
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e9dc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008e9dc  0008e9dc  0001e9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000010c0  20000000  0008e9e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001d6c  200010c0  0008faa4  000210c0  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY
  6 .comment      000000a5  00000000  00000000  000210e9  2**0
                  CONTENTS, READONLY
  7 .debug_info   00043681  00000000  00000000  0002118e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00009640  00000000  00000000  0006480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000f635  00000000  00000000  0006de4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000016f8  00000000  00000000  0007d484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00002818  00000000  00000000  0007eb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00022784  00000000  00000000  00081394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00031916  00000000  00000000  000a3b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00062664  00000000  00000000  000d542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004e1c  00000000  00000000  00137a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 b5 6e 08 00 b3 6e 08 00 b3 6e 08 00     . . .n...n...n..
   80010:	b3 6e 08 00 b3 6e 08 00 b3 6e 08 00 00 00 00 00     .n...n...n......
	...
   8002c:	b3 6e 08 00 b3 6e 08 00 00 00 00 00 b3 6e 08 00     .n...n.......n..
   8003c:	b3 6e 08 00 b3 6e 08 00 b3 6e 08 00 b3 6e 08 00     .n...n...n...n..
   8004c:	b3 6e 08 00 b3 6e 08 00 b3 6e 08 00 b3 6e 08 00     .n...n...n...n..
   8005c:	b3 6e 08 00 b3 6e 08 00 b3 6e 08 00 29 53 08 00     .n...n...n..)S..
   8006c:	3d 53 08 00 b3 6e 08 00 21 3a 08 00 41 3a 08 00     =S...n..!:..A:..
   8007c:	61 3a 08 00 b3 6e 08 00 b3 6e 08 00 b3 6e 08 00     a:...n...n...n..
   8008c:	b3 6e 08 00 b3 6e 08 00 b3 6e 08 00 55 35 08 00     .n...n...n..U5..
   8009c:	b3 6e 08 00 b3 6e 08 00 b3 6e 08 00 b3 6e 08 00     .n...n...n...n..
   800ac:	b3 6e 08 00 b3 6e 08 00 f1 5a 08 00 b3 6e 08 00     .n...n...Z...n..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200010c0 	.word	0x200010c0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008e9e4 	.word	0x0008e9e4

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	200010c4 	.word	0x200010c4
   800f8:	0008e9e4 	.word	0x0008e9e4

000800fc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   800fc:	4a02      	ldr	r2, [pc, #8]	; (80108 <udi_cdc_comm_disable+0xc>)
   800fe:	7813      	ldrb	r3, [r2, #0]
   80100:	3b01      	subs	r3, #1
   80102:	b2db      	uxtb	r3, r3
   80104:	7013      	strb	r3, [r2, #0]
}
   80106:	4770      	bx	lr
   80108:	200010e7 	.word	0x200010e7

0008010c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   8010c:	2000      	movs	r0, #0
   8010e:	4770      	bx	lr

00080110 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80110:	2000      	movs	r0, #0
   80112:	4770      	bx	lr

00080114 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80114:	4a1e      	ldr	r2, [pc, #120]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80116:	7813      	ldrb	r3, [r2, #0]
   80118:	f992 2000 	ldrsb.w	r2, [r2]
   8011c:	2a00      	cmp	r2, #0
   8011e:	db05      	blt.n	8012c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80120:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80124:	2b20      	cmp	r3, #32
   80126:	d01a      	beq.n	8015e <udi_cdc_comm_setup+0x4a>
	return false;  // request Not supported
   80128:	2000      	movs	r0, #0
   8012a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8012c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80130:	2b20      	cmp	r3, #32
   80132:	d001      	beq.n	80138 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
   80134:	2000      	movs	r0, #0
   80136:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80138:	4b15      	ldr	r3, [pc, #84]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8013a:	785b      	ldrb	r3, [r3, #1]
   8013c:	2b21      	cmp	r3, #33	; 0x21
   8013e:	d001      	beq.n	80144 <udi_cdc_comm_setup+0x30>
	return false;  // request Not supported
   80140:	2000      	movs	r0, #0
   80142:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80144:	4b12      	ldr	r3, [pc, #72]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80146:	88db      	ldrh	r3, [r3, #6]
   80148:	2b07      	cmp	r3, #7
   8014a:	d001      	beq.n	80150 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
   8014c:	2000      	movs	r0, #0
   8014e:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80150:	4b0f      	ldr	r3, [pc, #60]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80152:	4a10      	ldr	r2, [pc, #64]	; (80194 <udi_cdc_comm_setup+0x80>)
   80154:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80156:	2207      	movs	r2, #7
   80158:	819a      	strh	r2, [r3, #12]
				return true;
   8015a:	2001      	movs	r0, #1
   8015c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   8015e:	4b0c      	ldr	r3, [pc, #48]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80160:	7858      	ldrb	r0, [r3, #1]
   80162:	2820      	cmp	r0, #32
   80164:	d004      	beq.n	80170 <udi_cdc_comm_setup+0x5c>
   80166:	2822      	cmp	r0, #34	; 0x22
   80168:	bf14      	ite	ne
   8016a:	2000      	movne	r0, #0
   8016c:	2001      	moveq	r0, #1
   8016e:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80170:	4b07      	ldr	r3, [pc, #28]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80172:	88db      	ldrh	r3, [r3, #6]
   80174:	2b07      	cmp	r3, #7
   80176:	d001      	beq.n	8017c <udi_cdc_comm_setup+0x68>
					return false; // Error for USB host
   80178:	2000      	movs	r0, #0
}
   8017a:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   8017c:	4b04      	ldr	r3, [pc, #16]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8017e:	4a06      	ldr	r2, [pc, #24]	; (80198 <udi_cdc_comm_setup+0x84>)
   80180:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   80182:	4a04      	ldr	r2, [pc, #16]	; (80194 <udi_cdc_comm_setup+0x80>)
   80184:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80186:	2207      	movs	r2, #7
   80188:	819a      	strh	r2, [r3, #12]
				return true;
   8018a:	2001      	movs	r0, #1
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	20002dec 	.word	0x20002dec
   80194:	200010e0 	.word	0x200010e0
   80198:	000803b1 	.word	0x000803b1

0008019c <udi_cdc_comm_enable>:
{
   8019c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   8019e:	2400      	movs	r4, #0
   801a0:	4b11      	ldr	r3, [pc, #68]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801a4:	4b11      	ldr	r3, [pc, #68]	; (801ec <udi_cdc_comm_enable+0x50>)
   801a6:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <udi_cdc_comm_enable+0x54>)
   801aa:	22a1      	movs	r2, #161	; 0xa1
   801ac:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801ae:	2220      	movs	r2, #32
   801b0:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801b2:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801b4:	2201      	movs	r2, #1
   801b6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801b8:	2202      	movs	r2, #2
   801ba:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801bc:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <udi_cdc_comm_enable+0x58>)
   801c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801c4:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801c6:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801c8:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801ca:	2308      	movs	r3, #8
   801cc:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801ce:	4620      	mov	r0, r4
   801d0:	4b09      	ldr	r3, [pc, #36]	; (801f8 <udi_cdc_comm_enable+0x5c>)
   801d2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801d4:	4620      	mov	r0, r4
   801d6:	4b09      	ldr	r3, [pc, #36]	; (801fc <udi_cdc_comm_enable+0x60>)
   801d8:	4798      	blx	r3
   801da:	b120      	cbz	r0, 801e6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
   801dc:	4a02      	ldr	r2, [pc, #8]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801de:	7813      	ldrb	r3, [r2, #0]
   801e0:	3301      	adds	r3, #1
   801e2:	b2db      	uxtb	r3, r3
   801e4:	7013      	strb	r3, [r2, #0]
}
   801e6:	bd10      	pop	{r4, pc}
   801e8:	200010e7 	.word	0x200010e7
   801ec:	200014fc 	.word	0x200014fc
   801f0:	20001914 	.word	0x20001914
   801f4:	200010e0 	.word	0x200010e0
   801f8:	00083385 	.word	0x00083385
   801fc:	000832e1 	.word	0x000832e1

00080200 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80200:	4b42      	ldr	r3, [pc, #264]	; (8030c <udi_cdc_tx_send+0x10c>)
   80202:	781b      	ldrb	r3, [r3, #0]
   80204:	b103      	cbz	r3, 80208 <udi_cdc_tx_send+0x8>
   80206:	4770      	bx	lr
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8020c:	4b40      	ldr	r3, [pc, #256]	; (80310 <udi_cdc_tx_send+0x110>)
   8020e:	4798      	blx	r3
   80210:	2800      	cmp	r0, #0
   80212:	d045      	beq.n	802a0 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80214:	4b3f      	ldr	r3, [pc, #252]	; (80314 <udi_cdc_tx_send+0x114>)
   80216:	881c      	ldrh	r4, [r3, #0]
   80218:	4b3f      	ldr	r3, [pc, #252]	; (80318 <udi_cdc_tx_send+0x118>)
   8021a:	4798      	blx	r3
   8021c:	4284      	cmp	r4, r0
   8021e:	d03d      	beq.n	8029c <udi_cdc_tx_send+0x9c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80220:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80224:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80226:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8022a:	4b3c      	ldr	r3, [pc, #240]	; (8031c <udi_cdc_tx_send+0x11c>)
   8022c:	2200      	movs	r2, #0
   8022e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80230:	4b3b      	ldr	r3, [pc, #236]	; (80320 <udi_cdc_tx_send+0x120>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2dc      	uxtb	r4, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80236:	4a3b      	ldr	r2, [pc, #236]	; (80324 <udi_cdc_tx_send+0x124>)
   80238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8023c:	2b00      	cmp	r3, #0
   8023e:	d036      	beq.n	802ae <udi_cdc_tx_send+0xae>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80240:	4b39      	ldr	r3, [pc, #228]	; (80328 <udi_cdc_tx_send+0x128>)
   80242:	2200      	movs	r2, #0
   80244:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80246:	4b39      	ldr	r3, [pc, #228]	; (8032c <udi_cdc_tx_send+0x12c>)
   80248:	781b      	ldrb	r3, [r3, #0]
   8024a:	2b00      	cmp	r3, #0
   8024c:	d14c      	bne.n	802e8 <udi_cdc_tx_send+0xe8>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8024e:	fab4 f384 	clz	r3, r4
   80252:	095b      	lsrs	r3, r3, #5
   80254:	4a32      	ldr	r2, [pc, #200]	; (80320 <udi_cdc_tx_send+0x120>)
   80256:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80258:	4b2c      	ldr	r3, [pc, #176]	; (8030c <udi_cdc_tx_send+0x10c>)
   8025a:	2201      	movs	r2, #1
   8025c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8025e:	b925      	cbnz	r5, 8026a <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80260:	4b2e      	ldr	r3, [pc, #184]	; (8031c <udi_cdc_tx_send+0x11c>)
   80262:	701a      	strb	r2, [r3, #0]
   80264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80268:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8026a:	4626      	mov	r6, r4
   8026c:	4b2d      	ldr	r3, [pc, #180]	; (80324 <udi_cdc_tx_send+0x124>)
   8026e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80276:	bf14      	ite	ne
   80278:	2501      	movne	r5, #1
   8027a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8027c:	d138      	bne.n	802f0 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8027e:	4b25      	ldr	r3, [pc, #148]	; (80314 <udi_cdc_tx_send+0x114>)
   80280:	2200      	movs	r2, #0
   80282:	801a      	strh	r2, [r3, #0]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80284:	4b2a      	ldr	r3, [pc, #168]	; (80330 <udi_cdc_tx_send+0x130>)
   80286:	9300      	str	r3, [sp, #0]
   80288:	4b26      	ldr	r3, [pc, #152]	; (80324 <udi_cdc_tx_send+0x124>)
   8028a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   8028e:	4a29      	ldr	r2, [pc, #164]	; (80334 <udi_cdc_tx_send+0x134>)
   80290:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80294:	4629      	mov	r1, r5
   80296:	2085      	movs	r0, #133	; 0x85
   80298:	4c27      	ldr	r4, [pc, #156]	; (80338 <udi_cdc_tx_send+0x138>)
   8029a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8029c:	b002      	add	sp, #8
   8029e:	bd70      	pop	{r4, r5, r6, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802a0:	4b1c      	ldr	r3, [pc, #112]	; (80314 <udi_cdc_tx_send+0x114>)
   802a2:	881c      	ldrh	r4, [r3, #0]
   802a4:	4b25      	ldr	r3, [pc, #148]	; (8033c <udi_cdc_tx_send+0x13c>)
   802a6:	4798      	blx	r3
   802a8:	4284      	cmp	r4, r0
   802aa:	d1b9      	bne.n	80220 <udi_cdc_tx_send+0x20>
   802ac:	e7f6      	b.n	8029c <udi_cdc_tx_send+0x9c>
		sof_zlp_counter++;
   802ae:	4a1e      	ldr	r2, [pc, #120]	; (80328 <udi_cdc_tx_send+0x128>)
   802b0:	8813      	ldrh	r3, [r2, #0]
   802b2:	3301      	adds	r3, #1
   802b4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802b6:	4b16      	ldr	r3, [pc, #88]	; (80310 <udi_cdc_tx_send+0x110>)
   802b8:	4798      	blx	r3
   802ba:	b918      	cbnz	r0, 802c4 <udi_cdc_tx_send+0xc4>
   802bc:	4b1a      	ldr	r3, [pc, #104]	; (80328 <udi_cdc_tx_send+0x128>)
   802be:	881b      	ldrh	r3, [r3, #0]
   802c0:	2b63      	cmp	r3, #99	; 0x63
   802c2:	d908      	bls.n	802d6 <udi_cdc_tx_send+0xd6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802c4:	4b12      	ldr	r3, [pc, #72]	; (80310 <udi_cdc_tx_send+0x110>)
   802c6:	4798      	blx	r3
   802c8:	2800      	cmp	r0, #0
   802ca:	d0b9      	beq.n	80240 <udi_cdc_tx_send+0x40>
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <udi_cdc_tx_send+0x128>)
   802ce:	881b      	ldrh	r3, [r3, #0]
   802d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802d4:	d2b4      	bcs.n	80240 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802d6:	2d00      	cmp	r5, #0
   802d8:	d1e0      	bne.n	8029c <udi_cdc_tx_send+0x9c>
		cpu_irq_enable();
   802da:	4b10      	ldr	r3, [pc, #64]	; (8031c <udi_cdc_tx_send+0x11c>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	f3bf 8f5f 	dmb	sy
   802e4:	b662      	cpsie	i
}
   802e6:	e7d9      	b.n	8029c <udi_cdc_tx_send+0x9c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802e8:	fab4 f484 	clz	r4, r4
   802ec:	0964      	lsrs	r4, r4, #5
   802ee:	e7b3      	b.n	80258 <udi_cdc_tx_send+0x58>
		if (udd_is_high_speed()) {
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_cdc_tx_send+0x110>)
   802f2:	4798      	blx	r3
   802f4:	b120      	cbz	r0, 80300 <udi_cdc_tx_send+0x100>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802f6:	4b08      	ldr	r3, [pc, #32]	; (80318 <udi_cdc_tx_send+0x118>)
   802f8:	4798      	blx	r3
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <udi_cdc_tx_send+0x114>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	e7c1      	b.n	80284 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <udi_cdc_tx_send+0x13c>)
   80302:	4798      	blx	r3
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <udi_cdc_tx_send+0x114>)
   80306:	8018      	strh	r0, [r3, #0]
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x84>
   8030a:	bf00      	nop
   8030c:	20001910 	.word	0x20001910
   80310:	00086295 	.word	0x00086295
   80314:	2000190c 	.word	0x2000190c
   80318:	000862ed 	.word	0x000862ed
   8031c:	200006ea 	.word	0x200006ea
   80320:	20001908 	.word	0x20001908
   80324:	20001904 	.word	0x20001904
   80328:	200010dc 	.word	0x200010dc
   8032c:	20001500 	.word	0x20001500
   80330:	00080341 	.word	0x00080341
   80334:	20001504 	.word	0x20001504
   80338:	00086551 	.word	0x00086551
   8033c:	000862dd 	.word	0x000862dd

00080340 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80340:	b100      	cbz	r0, 80344 <udi_cdc_data_sent+0x4>
   80342:	4770      	bx	lr
{
   80344:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <udi_cdc_data_sent+0x24>)
   80348:	781b      	ldrb	r3, [r3, #0]
   8034a:	fab3 f383 	clz	r3, r3
   8034e:	095b      	lsrs	r3, r3, #5
   80350:	4a05      	ldr	r2, [pc, #20]	; (80368 <udi_cdc_data_sent+0x28>)
   80352:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <udi_cdc_data_sent+0x2c>)
   80358:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <udi_cdc_data_sent+0x30>)
   8035c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <udi_cdc_data_sent+0x34>)
   80360:	4798      	blx	r3
}
   80362:	bd08      	pop	{r3, pc}
   80364:	20001908 	.word	0x20001908
   80368:	20001904 	.word	0x20001904
   8036c:	20001500 	.word	0x20001500
   80370:	20001910 	.word	0x20001910
   80374:	00080201 	.word	0x00080201

00080378 <udi_cdc_data_sof_notify>:
{
   80378:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8037a:	2000      	movs	r0, #0
   8037c:	4b01      	ldr	r3, [pc, #4]	; (80384 <udi_cdc_data_sof_notify+0xc>)
   8037e:	4798      	blx	r3
}
   80380:	bd08      	pop	{r3, pc}
   80382:	bf00      	nop
   80384:	00080201 	.word	0x00080201

00080388 <udi_cdc_data_disable>:
{
   80388:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8038a:	4a06      	ldr	r2, [pc, #24]	; (803a4 <udi_cdc_data_disable+0x1c>)
   8038c:	7813      	ldrb	r3, [r2, #0]
   8038e:	3b01      	subs	r3, #1
   80390:	b2db      	uxtb	r3, r3
   80392:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80394:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   80396:	4b04      	ldr	r3, [pc, #16]	; (803a8 <udi_cdc_data_disable+0x20>)
   80398:	4798      	blx	r3
	udi_cdc_data_running = false;
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <udi_cdc_data_disable+0x24>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
}
   803a0:	bd08      	pop	{r3, pc}
   803a2:	bf00      	nop
   803a4:	200010e8 	.word	0x200010e8
   803a8:	000832f1 	.word	0x000832f1
   803ac:	200010de 	.word	0x200010de

000803b0 <udi_cdc_line_coding_received>:
{
   803b0:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803b2:	4902      	ldr	r1, [pc, #8]	; (803bc <udi_cdc_line_coding_received+0xc>)
   803b4:	2000      	movs	r0, #0
   803b6:	4b02      	ldr	r3, [pc, #8]	; (803c0 <udi_cdc_line_coding_received+0x10>)
   803b8:	4798      	blx	r3
}
   803ba:	bd08      	pop	{r3, pc}
   803bc:	200010e0 	.word	0x200010e0
   803c0:	00083385 	.word	0x00083385

000803c4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   803c8:	b672      	cpsid	i
   803ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803ce:	4b0b      	ldr	r3, [pc, #44]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803d4:	4b0a      	ldr	r3, [pc, #40]	; (80400 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803d6:	8818      	ldrh	r0, [r3, #0]
   803d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803da:	4a0a      	ldr	r2, [pc, #40]	; (80404 <udi_cdc_multi_get_nb_received_data+0x40>)
   803dc:	7812      	ldrb	r2, [r2, #0]
   803de:	b2d2      	uxtb	r2, r2
   803e0:	4809      	ldr	r0, [pc, #36]	; (80408 <udi_cdc_multi_get_nb_received_data+0x44>)
   803e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   803e6:	b280      	uxth	r0, r0
   803e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   803ea:	b929      	cbnz	r1, 803f8 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   803f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop
   803fc:	200006ea 	.word	0x200006ea
   80400:	200014f4 	.word	0x200014f4
   80404:	200014f0 	.word	0x200014f0
   80408:	200014ec 	.word	0x200014ec

0008040c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8040c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8040e:	4b03      	ldr	r3, [pc, #12]	; (8041c <udi_cdc_multi_is_rx_ready+0x10>)
   80410:	4798      	blx	r3
}
   80412:	3800      	subs	r0, #0
   80414:	bf18      	it	ne
   80416:	2001      	movne	r0, #1
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	000803c5 	.word	0x000803c5

00080420 <udi_cdc_rx_start>:
{
   80420:	b510      	push	{r4, lr}
   80422:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80424:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
   8042a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8042e:	4b21      	ldr	r3, [pc, #132]	; (804b4 <udi_cdc_rx_start+0x94>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80434:	4b20      	ldr	r3, [pc, #128]	; (804b8 <udi_cdc_rx_start+0x98>)
   80436:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80438:	4b20      	ldr	r3, [pc, #128]	; (804bc <udi_cdc_rx_start+0x9c>)
   8043a:	781b      	ldrb	r3, [r3, #0]
   8043c:	bb5b      	cbnz	r3, 80496 <udi_cdc_rx_start+0x76>
   8043e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80440:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80442:	881a      	ldrh	r2, [r3, #0]
   80444:	b292      	uxth	r2, r2
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <udi_cdc_rx_start+0xa4>)
   80448:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8044c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8044e:	429a      	cmp	r2, r3
   80450:	d321      	bcc.n	80496 <udi_cdc_rx_start+0x76>
	udi_cdc_rx_pos[port] = 0;
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80454:	2200      	movs	r2, #0
   80456:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80458:	fab4 f384 	clz	r3, r4
   8045c:	095b      	lsrs	r3, r3, #5
   8045e:	4a16      	ldr	r2, [pc, #88]	; (804b8 <udi_cdc_rx_start+0x98>)
   80460:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <udi_cdc_rx_start+0x9c>)
   80464:	2201      	movs	r2, #1
   80466:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80468:	b921      	cbnz	r1, 80474 <udi_cdc_rx_start+0x54>
		cpu_irq_enable();
   8046a:	4b12      	ldr	r3, [pc, #72]	; (804b4 <udi_cdc_rx_start+0x94>)
   8046c:	701a      	strb	r2, [r3, #0]
   8046e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80472:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80474:	2000      	movs	r0, #0
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <udi_cdc_rx_start+0xa8>)
   80478:	4798      	blx	r3
   8047a:	b9a8      	cbnz	r0, 804a8 <udi_cdc_rx_start+0x88>
	return udd_ep_run(ep,
   8047c:	4b13      	ldr	r3, [pc, #76]	; (804cc <udi_cdc_rx_start+0xac>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	f44f 7300 	mov.w	r3, #512	; 0x200
   80484:	4a12      	ldr	r2, [pc, #72]	; (804d0 <udi_cdc_rx_start+0xb0>)
   80486:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8048a:	2101      	movs	r1, #1
   8048c:	2006      	movs	r0, #6
   8048e:	4c11      	ldr	r4, [pc, #68]	; (804d4 <udi_cdc_rx_start+0xb4>)
   80490:	47a0      	blx	r4
}
   80492:	b002      	add	sp, #8
   80494:	bd10      	pop	{r4, pc}
	if (cpu_irq_is_enabled_flags(flags))
   80496:	b959      	cbnz	r1, 804b0 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <udi_cdc_rx_start+0x94>)
   8049a:	2201      	movs	r2, #1
   8049c:	701a      	strb	r2, [r3, #0]
   8049e:	f3bf 8f5f 	dmb	sy
   804a2:	b662      	cpsie	i
		return false;
   804a4:	2000      	movs	r0, #0
}
   804a6:	e7f4      	b.n	80492 <udi_cdc_rx_start+0x72>
		UDI_CDC_RX_NOTIFY(port);
   804a8:	2000      	movs	r0, #0
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <udi_cdc_rx_start+0xb8>)
   804ac:	4798      	blx	r3
   804ae:	e7e5      	b.n	8047c <udi_cdc_rx_start+0x5c>
		return false;
   804b0:	2000      	movs	r0, #0
   804b2:	e7ee      	b.n	80492 <udi_cdc_rx_start+0x72>
   804b4:	200006ea 	.word	0x200006ea
   804b8:	200014f0 	.word	0x200014f0
   804bc:	200014f8 	.word	0x200014f8
   804c0:	200014f4 	.word	0x200014f4
   804c4:	200014ec 	.word	0x200014ec
   804c8:	0008040d 	.word	0x0008040d
   804cc:	0008056d 	.word	0x0008056d
   804d0:	200010ec 	.word	0x200010ec
   804d4:	00086551 	.word	0x00086551
   804d8:	000832fd 	.word	0x000832fd

000804dc <udi_cdc_data_enable>:
{
   804dc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804de:	2400      	movs	r4, #0
   804e0:	4b15      	ldr	r3, [pc, #84]	; (80538 <udi_cdc_data_enable+0x5c>)
   804e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804e4:	4b15      	ldr	r3, [pc, #84]	; (8053c <udi_cdc_data_enable+0x60>)
   804e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804e8:	4b15      	ldr	r3, [pc, #84]	; (80540 <udi_cdc_data_enable+0x64>)
   804ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   804ec:	4b15      	ldr	r3, [pc, #84]	; (80544 <udi_cdc_data_enable+0x68>)
   804ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   804f0:	4b15      	ldr	r3, [pc, #84]	; (80548 <udi_cdc_data_enable+0x6c>)
   804f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   804f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <udi_cdc_data_enable+0x70>)
   804f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   804fa:	4620      	mov	r0, r4
   804fc:	4b14      	ldr	r3, [pc, #80]	; (80550 <udi_cdc_data_enable+0x74>)
   804fe:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <udi_cdc_data_enable+0x78>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <udi_cdc_data_enable+0x7c>)
   80506:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80508:	4b14      	ldr	r3, [pc, #80]	; (8055c <udi_cdc_data_enable+0x80>)
   8050a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8050c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8050e:	4b14      	ldr	r3, [pc, #80]	; (80560 <udi_cdc_data_enable+0x84>)
   80510:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80512:	4620      	mov	r0, r4
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <udi_cdc_data_enable+0x88>)
   80516:	4798      	blx	r3
   80518:	b140      	cbz	r0, 8052c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
   8051a:	4a07      	ldr	r2, [pc, #28]	; (80538 <udi_cdc_data_enable+0x5c>)
   8051c:	7813      	ldrb	r3, [r2, #0]
   8051e:	3301      	adds	r3, #1
   80520:	b2db      	uxtb	r3, r3
   80522:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80524:	7813      	ldrb	r3, [r2, #0]
   80526:	b2db      	uxtb	r3, r3
   80528:	2b01      	cmp	r3, #1
   8052a:	d000      	beq.n	8052e <udi_cdc_data_enable+0x52>
}
   8052c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   8052e:	4b0e      	ldr	r3, [pc, #56]	; (80568 <udi_cdc_data_enable+0x8c>)
   80530:	2201      	movs	r2, #1
   80532:	701a      	strb	r2, [r3, #0]
   80534:	e7fa      	b.n	8052c <udi_cdc_data_enable+0x50>
   80536:	bf00      	nop
   80538:	200010e8 	.word	0x200010e8
   8053c:	20001910 	.word	0x20001910
   80540:	20001500 	.word	0x20001500
   80544:	20001908 	.word	0x20001908
   80548:	20001904 	.word	0x20001904
   8054c:	2000190c 	.word	0x2000190c
   80550:	00080201 	.word	0x00080201
   80554:	200014f8 	.word	0x200014f8
   80558:	200014f0 	.word	0x200014f0
   8055c:	200014ec 	.word	0x200014ec
   80560:	200014f4 	.word	0x200014f4
   80564:	00080421 	.word	0x00080421
   80568:	200010de 	.word	0x200010de

0008056c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8056c:	b9f8      	cbnz	r0, 805ae <udi_cdc_data_received+0x42>
{
   8056e:	b530      	push	{r4, r5, lr}
   80570:	b083      	sub	sp, #12
   80572:	4615      	mov	r5, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <udi_cdc_data_received+0x44>)
   80576:	781c      	ldrb	r4, [r3, #0]
   80578:	fab4 f484 	clz	r4, r4
   8057c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8057e:	b151      	cbz	r1, 80596 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80580:	b289      	uxth	r1, r1
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <udi_cdc_data_received+0x48>)
   80584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80588:	2000      	movs	r0, #0
   8058a:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <udi_cdc_data_received+0x4c>)
   8058c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8058e:	4b0b      	ldr	r3, [pc, #44]	; (805bc <udi_cdc_data_received+0x50>)
   80590:	4798      	blx	r3
}
   80592:	b003      	add	sp, #12
   80594:	bd30      	pop	{r4, r5, pc}
		udd_ep_run( ep,
   80596:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <udi_cdc_data_received+0x54>)
   80598:	9300      	str	r3, [sp, #0]
   8059a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8059e:	4a09      	ldr	r2, [pc, #36]	; (805c4 <udi_cdc_data_received+0x58>)
   805a0:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805a4:	2101      	movs	r1, #1
   805a6:	4628      	mov	r0, r5
   805a8:	4c07      	ldr	r4, [pc, #28]	; (805c8 <udi_cdc_data_received+0x5c>)
   805aa:	47a0      	blx	r4
		return;
   805ac:	e7f1      	b.n	80592 <udi_cdc_data_received+0x26>
   805ae:	4770      	bx	lr
   805b0:	200014f0 	.word	0x200014f0
   805b4:	200014ec 	.word	0x200014ec
   805b8:	200014f8 	.word	0x200014f8
   805bc:	00080421 	.word	0x00080421
   805c0:	0008056d 	.word	0x0008056d
   805c4:	200010ec 	.word	0x200010ec
   805c8:	00086551 	.word	0x00086551

000805cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805d0:	4688      	mov	r8, r1
   805d2:	4617      	mov	r7, r2
	cpu_irq_disable();
   805d4:	4e21      	ldr	r6, [pc, #132]	; (8065c <udi_cdc_multi_read_buf+0x90>)
   805d6:	f04f 0b00 	mov.w	fp, #0
   805da:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805dc:	4d20      	ldr	r5, [pc, #128]	; (80660 <udi_cdc_multi_read_buf+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80678 <udi_cdc_multi_read_buf+0xac>
   805e2:	e00a      	b.n	805fa <udi_cdc_multi_read_buf+0x2e>
		cpu_irq_enable();
   805e4:	2001      	movs	r0, #1
   805e6:	7030      	strb	r0, [r6, #0]
   805e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ec:	b662      	cpsie	i
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   805ee:	428a      	cmp	r2, r1
   805f0:	d816      	bhi.n	80620 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
   805f2:	4b1c      	ldr	r3, [pc, #112]	; (80664 <udi_cdc_multi_read_buf+0x98>)
   805f4:	781b      	ldrb	r3, [r3, #0]
   805f6:	2b00      	cmp	r3, #0
   805f8:	d02d      	beq.n	80656 <udi_cdc_multi_read_buf+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   805fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80604:	f886 a000 	strb.w	sl, [r6]
	pos = udi_cdc_rx_pos[port];
   80608:	8829      	ldrh	r1, [r5, #0]
   8060a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8060c:	f899 3000 	ldrb.w	r3, [r9]
   80610:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80612:	4a15      	ldr	r2, [pc, #84]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   80618:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8061a:	2800      	cmp	r0, #0
   8061c:	d1e7      	bne.n	805ee <udi_cdc_multi_read_buf+0x22>
   8061e:	e7e1      	b.n	805e4 <udi_cdc_multi_read_buf+0x18>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80620:	4a11      	ldr	r2, [pc, #68]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80622:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80626:	b2a4      	uxth	r4, r4
   80628:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
   8062a:	42bc      	cmp	r4, r7
   8062c:	bf28      	it	cs
   8062e:	463c      	movcs	r4, r7
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80630:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80634:	4622      	mov	r2, r4
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <udi_cdc_multi_read_buf+0xa0>)
   80638:	4419      	add	r1, r3
   8063a:	4640      	mov	r0, r8
   8063c:	4b0c      	ldr	r3, [pc, #48]	; (80670 <udi_cdc_multi_read_buf+0xa4>)
   8063e:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80640:	882b      	ldrh	r3, [r5, #0]
   80642:	4423      	add	r3, r4
   80644:	b29b      	uxth	r3, r3
   80646:	802b      	strh	r3, [r5, #0]
	ptr_buf += copy_nb;
   80648:	44a0      	add	r8, r4
	size -= copy_nb;
   8064a:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_start(port);
   8064c:	4658      	mov	r0, fp
   8064e:	4b09      	ldr	r3, [pc, #36]	; (80674 <udi_cdc_multi_read_buf+0xa8>)
   80650:	4798      	blx	r3

	if (size) {
   80652:	2f00      	cmp	r7, #0
   80654:	d1d1      	bne.n	805fa <udi_cdc_multi_read_buf+0x2e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80656:	4638      	mov	r0, r7
   80658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8065c:	200006ea 	.word	0x200006ea
   80660:	200014f4 	.word	0x200014f4
   80664:	200010de 	.word	0x200010de
   80668:	200014ec 	.word	0x200014ec
   8066c:	200010ec 	.word	0x200010ec
   80670:	00087835 	.word	0x00087835
   80674:	00080421 	.word	0x00080421
   80678:	200014f0 	.word	0x200014f0

0008067c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8067c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8067e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80682:	b672      	cpsid	i
   80684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80688:	4b14      	ldr	r3, [pc, #80]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   8068a:	2100      	movs	r1, #0
   8068c:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   80690:	781b      	ldrb	r3, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80692:	4914      	ldr	r1, [pc, #80]	; (806e4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80694:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80698:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8069c:	d00a      	beq.n	806b4 <udi_cdc_multi_get_free_tx_buffer+0x38>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8069e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806a2:	b92a      	cbnz	r2, 806b0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a6:	2201      	movs	r2, #1
   806a8:	701a      	strb	r2, [r3, #0]
   806aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806b0:	bc10      	pop	{r4}
   806b2:	4770      	bx	lr
   806b4:	b2dc      	uxtb	r4, r3
		if ((!udi_cdc_tx_trans_ongoing[port])
   806b6:	4b0c      	ldr	r3, [pc, #48]	; (806e8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d1ef      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806be:	4b0b      	ldr	r3, [pc, #44]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c0:	781b      	ldrb	r3, [r3, #0]
   806c2:	2b00      	cmp	r3, #0
   806c4:	d1eb      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c8:	2101      	movs	r1, #1
   806ca:	7019      	strb	r1, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806cc:	fab4 f484 	clz	r4, r4
   806d0:	0964      	lsrs	r4, r4, #5
   806d2:	4b03      	ldr	r3, [pc, #12]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806d4:	701c      	strb	r4, [r3, #0]
			buf_sel_nb = 0;
   806d6:	2000      	movs	r0, #0
   806d8:	e7e1      	b.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
   806da:	bf00      	nop
   806dc:	200006ea 	.word	0x200006ea
   806e0:	20001908 	.word	0x20001908
   806e4:	20001904 	.word	0x20001904
   806e8:	20001910 	.word	0x20001910
   806ec:	20001500 	.word	0x20001500

000806f0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   806f0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   806f2:	4b03      	ldr	r3, [pc, #12]	; (80700 <udi_cdc_multi_is_tx_ready+0x10>)
   806f4:	4798      	blx	r3
}
   806f6:	3800      	subs	r0, #0
   806f8:	bf18      	it	ne
   806fa:	2001      	movne	r0, #1
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	0008067d 	.word	0x0008067d

00080704 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80708:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8070a:	4b1a      	ldr	r3, [pc, #104]	; (80774 <udi_cdc_multi_putc+0x70>)
   8070c:	799d      	ldrb	r5, [r3, #6]
   8070e:	2d09      	cmp	r5, #9
   80710:	bf14      	ite	ne
   80712:	2500      	movne	r5, #0
   80714:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80716:	4e18      	ldr	r6, [pc, #96]	; (80778 <udi_cdc_multi_putc+0x74>)
	cpu_irq_disable();
   80718:	4f18      	ldr	r7, [pc, #96]	; (8077c <udi_cdc_multi_putc+0x78>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8071a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8078c <udi_cdc_multi_putc+0x88>
   8071e:	e01d      	b.n	8075c <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80720:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80724:	b672      	cpsid	i
   80726:	f3bf 8f5f 	dmb	sy
   8072a:	2300      	movs	r3, #0
   8072c:	703b      	strb	r3, [r7, #0]
   8072e:	f898 2000 	ldrb.w	r2, [r8]
   80732:	b2d1      	uxtb	r1, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <udi_cdc_multi_putc+0x7c>)
   80736:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   8073a:	f102 0c01 	add.w	ip, r2, #1
   8073e:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
   80742:	4b10      	ldr	r3, [pc, #64]	; (80784 <udi_cdc_multi_putc+0x80>)
   80744:	eb03 2341 	add.w	r3, r3, r1, lsl #9
   80748:	549c      	strb	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
   8074a:	b920      	cbnz	r0, 80756 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   8074c:	2301      	movs	r3, #1
   8074e:	703b      	strb	r3, [r7, #0]
   80750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80754:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80756:	b15d      	cbz	r5, 80770 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80758:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   8075a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8075c:	2000      	movs	r0, #0
   8075e:	47b0      	blx	r6
   80760:	2800      	cmp	r0, #0
   80762:	d1dd      	bne.n	80720 <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <udi_cdc_multi_putc+0x84>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	2b00      	cmp	r3, #0
   8076a:	d1f7      	bne.n	8075c <udi_cdc_multi_putc+0x58>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   8076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80770:	2001      	movs	r0, #1
   80772:	e7fb      	b.n	8076c <udi_cdc_multi_putc+0x68>
   80774:	200010e0 	.word	0x200010e0
   80778:	000806f1 	.word	0x000806f1
   8077c:	200006ea 	.word	0x200006ea
   80780:	20001904 	.word	0x20001904
   80784:	20001504 	.word	0x20001504
   80788:	200010de 	.word	0x200010de
   8078c:	20001908 	.word	0x20001908

00080790 <readFabricationZone>:
*   \brief  Read the fabrication zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readFabricationZone(uint8_t* buffer)
{
   80790:	b510      	push	{r4, lr}
   80792:	4604      	mov	r4, r0
    readSMC(2, 0, buffer);
   80794:	4602      	mov	r2, r0
   80796:	2100      	movs	r1, #0
   80798:	2002      	movs	r0, #2
   8079a:	4b02      	ldr	r3, [pc, #8]	; (807a4 <readFabricationZone+0x14>)
   8079c:	4798      	blx	r3
    return buffer;
}
   8079e:	4620      	mov	r0, r4
   807a0:	bd10      	pop	{r4, pc}
   807a2:	bf00      	nop
   807a4:	00080e5d 	.word	0x00080e5d

000807a8 <writeIssuerZone>:
/*! \fn     writeIssuerZone(uint8_t* buffer)
*   \brief  Write in the issuer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (8 bytes required)
*/
void writeIssuerZone(uint8_t* buffer)
{
   807a8:	b508      	push	{r3, lr}
   807aa:	4602      	mov	r2, r0
    writeSMC(16, 64, buffer);
   807ac:	2140      	movs	r1, #64	; 0x40
   807ae:	2010      	movs	r0, #16
   807b0:	4b01      	ldr	r3, [pc, #4]	; (807b8 <writeIssuerZone+0x10>)
   807b2:	4798      	blx	r3
}
   807b4:	bd08      	pop	{r3, pc}
   807b6:	bf00      	nop
   807b8:	00080d8d 	.word	0x00080d8d

000807bc <readSecurityCodeAttemptsCounters>:
*   \brief  Read the number of code attempts left (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readSecurityCodeAttemptsCounters(uint8_t* buffer)
{
   807bc:	b510      	push	{r4, lr}
   807be:	4604      	mov	r4, r0
    readSMC(14, 12, buffer);
   807c0:	4602      	mov	r2, r0
   807c2:	210c      	movs	r1, #12
   807c4:	200e      	movs	r0, #14
   807c6:	4b02      	ldr	r3, [pc, #8]	; (807d0 <readSecurityCodeAttemptsCounters+0x14>)
   807c8:	4798      	blx	r3
    return buffer;
}
   807ca:	4620      	mov	r0, r4
   807cc:	bd10      	pop	{r4, pc}
   807ce:	bf00      	nop
   807d0:	00080e5d 	.word	0x00080e5d

000807d4 <readMemoryTestZone>:
*   \brief  Read the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readMemoryTestZone(uint8_t* buffer)
{
   807d4:	b510      	push	{r4, lr}
   807d6:	4604      	mov	r4, r0
    readSMC(178, 176, buffer);
   807d8:	4602      	mov	r2, r0
   807da:	21b0      	movs	r1, #176	; 0xb0
   807dc:	20b2      	movs	r0, #178	; 0xb2
   807de:	4b02      	ldr	r3, [pc, #8]	; (807e8 <readMemoryTestZone+0x14>)
   807e0:	4798      	blx	r3
    return buffer;
}
   807e2:	4620      	mov	r0, r4
   807e4:	bd10      	pop	{r4, pc}
   807e6:	bf00      	nop
   807e8:	00080e5d 	.word	0x00080e5d

000807ec <writeMemoryTestZone>:
/*! \fn     writeMemoryTestZone(uint8_t* buffer)
*   \brief  Write in the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeMemoryTestZone(uint8_t* buffer)
{
   807ec:	b508      	push	{r3, lr}
   807ee:	4602      	mov	r2, r0
    writeSMC(1408, 16, buffer);
   807f0:	2110      	movs	r1, #16
   807f2:	f44f 60b0 	mov.w	r0, #1408	; 0x580
   807f6:	4b01      	ldr	r3, [pc, #4]	; (807fc <writeMemoryTestZone+0x10>)
   807f8:	4798      	blx	r3
}
   807fa:	bd08      	pop	{r3, pc}
   807fc:	00080d8d 	.word	0x00080d8d

00080800 <readManufacturerZone>:
*   \brief  Read the manufacturer zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readManufacturerZone(uint8_t* buffer)
{
   80800:	b510      	push	{r4, lr}
   80802:	4604      	mov	r4, r0
    readSMC(180, 178, buffer);
   80804:	4602      	mov	r2, r0
   80806:	21b2      	movs	r1, #178	; 0xb2
   80808:	20b4      	movs	r0, #180	; 0xb4
   8080a:	4b02      	ldr	r3, [pc, #8]	; (80814 <readManufacturerZone+0x14>)
   8080c:	4798      	blx	r3
    return buffer;
}
   8080e:	4620      	mov	r0, r4
   80810:	bd10      	pop	{r4, pc}
   80812:	bf00      	nop
   80814:	00080e5d 	.word	0x00080e5d

00080818 <writeManufacturerZone>:
/*! \fn     writeManufacturerZone(uint8_t* buffer)
*   \brief  Write in the manufacturer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeManufacturerZone(uint8_t* buffer)
{
   80818:	b508      	push	{r3, lr}
   8081a:	4602      	mov	r2, r0
    writeSMC(1424, 16, buffer);
   8081c:	2110      	movs	r1, #16
   8081e:	f44f 60b2 	mov.w	r0, #1424	; 0x590
   80822:	4b01      	ldr	r3, [pc, #4]	; (80828 <writeManufacturerZone+0x10>)
   80824:	4798      	blx	r3
}
   80826:	bd08      	pop	{r3, pc}
   80828:	00080d8d 	.word	0x00080d8d

0008082c <writeManufacturerFuse>:

/*! \fn     writeManufacturerFuse(void)
*   \brief  Write manufacturer fuse, controlling access to the MFZ
*/
void writeManufacturerFuse(void)
{
   8082c:	b508      	push	{r3, lr}
    blowFuse(MAN_FUSE);
   8082e:	2000      	movs	r0, #0
   80830:	4b01      	ldr	r3, [pc, #4]	; (80838 <writeManufacturerFuse+0xc>)
   80832:	4798      	blx	r3
}
   80834:	bd08      	pop	{r3, pc}
   80836:	bf00      	nop
   80838:	00080ba5 	.word	0x00080ba5

0008083c <write_issuers_fuse>:

/*! \fn     write_issuers_fuse(void)
*   \brief  Write issuers fuse, setting the AT88SC102 into Security Mode 2, we need to be authenticated here
*/
void write_issuers_fuse(void)
{
   8083c:	b508      	push	{r3, lr}
    blowFuse(ISSUER_FUSE);
   8083e:	2002      	movs	r0, #2
   80840:	4b01      	ldr	r3, [pc, #4]	; (80848 <write_issuers_fuse+0xc>)
   80842:	4798      	blx	r3
}
   80844:	bd08      	pop	{r3, pc}
   80846:	bf00      	nop
   80848:	00080ba5 	.word	0x00080ba5

0008084c <write_ec2en_fuse>:

/*! \fn     write_ec2en_fuse(void)
*   \brief  Write ec2en fuse, to be done before blowing issuer fuse
*/
void write_ec2en_fuse(void)
{
   8084c:	b508      	push	{r3, lr}
    blowFuse(EC2EN_FUSE);
   8084e:	2001      	movs	r0, #1
   80850:	4b01      	ldr	r3, [pc, #4]	; (80858 <write_ec2en_fuse+0xc>)
   80852:	4798      	blx	r3
}
   80854:	bd08      	pop	{r3, pc}
   80856:	bf00      	nop
   80858:	00080ba5 	.word	0x00080ba5

0008085c <checkSecurityMode2>:
/*! \fn     checkSecurityMode2(void)
*   \brief  Check that the smartcard is in mode two by trying to write his manufacturer zone
*   \return Success status
*/
RET_TYPE checkSecurityMode2(void)
{
   8085c:	b510      	push	{r4, lr}
   8085e:	b082      	sub	sp, #8
    uint16_t manZoneRead, temp_uint;
    
    // Read manufacturer zone, set temp_uint to its opposite
    readManufacturerZone((uint8_t*)&manZoneRead);
   80860:	f10d 0006 	add.w	r0, sp, #6
   80864:	4c0b      	ldr	r4, [pc, #44]	; (80894 <checkSecurityMode2+0x38>)
   80866:	47a0      	blx	r4
    temp_uint = ~manZoneRead;
   80868:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8086c:	43db      	mvns	r3, r3
   8086e:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    // Perform test write
    writeManufacturerZone((uint8_t*)&temp_uint);
   80872:	a801      	add	r0, sp, #4
   80874:	4b08      	ldr	r3, [pc, #32]	; (80898 <checkSecurityMode2+0x3c>)
   80876:	4798      	blx	r3
    readManufacturerZone((uint8_t*)&manZoneRead);
   80878:	f10d 0006 	add.w	r0, sp, #6
   8087c:	47a0      	blx	r4
    
    if (temp_uint != manZoneRead)
   8087e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   80882:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    } 
    else
    {
        return RETURN_NOK;
    }
}
   80886:	4298      	cmp	r0, r3
   80888:	f04f 30ff 	mov.w	r0, #4294967295
   8088c:	bf18      	it	ne
   8088e:	2000      	movne	r0, #0
   80890:	b002      	add	sp, #8
   80892:	bd10      	pop	{r4, pc}
   80894:	00080801 	.word	0x00080801
   80898:	00080819 	.word	0x00080819

0008089c <writeSecurityCode>:
/*! \fn     writeSecurityCode(uint16_t* code)
*   \brief  Write a new security code (security mode 1&2 - Authenticated!)
*   \param  code  The pin code
*/
void writeSecurityCode(volatile uint16_t* code)
{
   8089c:	b510      	push	{r4, lr}
   8089e:	4604      	mov	r4, r0
    *code = swap16(*code);
   808a0:	8803      	ldrh	r3, [r0, #0]
   808a2:	8802      	ldrh	r2, [r0, #0]
   808a4:	b292      	uxth	r2, r2
   808a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808ae:	b29b      	uxth	r3, r3
   808b0:	8003      	strh	r3, [r0, #0]
    writeSMC(80, 16, (uint8_t*)code);
   808b2:	4602      	mov	r2, r0
   808b4:	2110      	movs	r1, #16
   808b6:	2050      	movs	r0, #80	; 0x50
   808b8:	4b05      	ldr	r3, [pc, #20]	; (808d0 <writeSecurityCode+0x34>)
   808ba:	4798      	blx	r3
    *code = swap16(*code);
   808bc:	8823      	ldrh	r3, [r4, #0]
   808be:	8822      	ldrh	r2, [r4, #0]
   808c0:	b292      	uxth	r2, r2
   808c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808ca:	b29b      	uxth	r3, r3
   808cc:	8023      	strh	r3, [r4, #0]
}
   808ce:	bd10      	pop	{r4, pc}
   808d0:	00080d8d 	.word	0x00080d8d

000808d4 <resetBlankCard>:
{
   808d4:	b500      	push	{lr}
   808d6:	b083      	sub	sp, #12
    uint16_t default_pin = SMARTCARD_FACTORY_PIN;
   808d8:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   808dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint8_t data_buffer[2] = {0xFF, 0xFF};
   808e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   808e4:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeSMC(1441, 1, data_buffer);
   808e8:	aa01      	add	r2, sp, #4
   808ea:	2101      	movs	r1, #1
   808ec:	f240 50a1 	movw	r0, #1441	; 0x5a1
   808f0:	4b04      	ldr	r3, [pc, #16]	; (80904 <resetBlankCard+0x30>)
   808f2:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   808f4:	f10d 0006 	add.w	r0, sp, #6
   808f8:	4b03      	ldr	r3, [pc, #12]	; (80908 <resetBlankCard+0x34>)
   808fa:	4798      	blx	r3
}
   808fc:	b003      	add	sp, #12
   808fe:	f85d fb04 	ldr.w	pc, [sp], #4
   80902:	bf00      	nop
   80904:	00080d8d 	.word	0x00080d8d
   80908:	0008089d 	.word	0x0008089d

0008090c <setAuthenticatedReadWriteAccessToZone1and2>:

/*! \fn     setAuthenticatedReadWriteAccessToZone1and2(void)
*   \brief  Function called to only allow reads and writes to the application zone 1 & 2 when authenticated
*/
void setAuthenticatedReadWriteAccessToZone1and2(void)
{
   8090c:	b510      	push	{r4, lr}
   8090e:	b082      	sub	sp, #8
    uint8_t temp_buffer[2] = {0x80, 0x00};
   80910:	2380      	movs	r3, #128	; 0x80
   80912:	f8ad 3004 	strh.w	r3, [sp, #4]
    // Set P1 to 1 to allow write, remove R1 to prevent non authenticated reads
    writeSMC(176, 16, temp_buffer);
   80916:	aa01      	add	r2, sp, #4
   80918:	2110      	movs	r1, #16
   8091a:	20b0      	movs	r0, #176	; 0xb0
   8091c:	4c04      	ldr	r4, [pc, #16]	; (80930 <setAuthenticatedReadWriteAccessToZone1and2+0x24>)
   8091e:	47a0      	blx	r4
    // Set P2 to 1 to allow write, remove R2 to prevent non authenticated reads
    writeSMC(736, 16, temp_buffer);
   80920:	aa01      	add	r2, sp, #4
   80922:	2110      	movs	r1, #16
   80924:	f44f 7038 	mov.w	r0, #736	; 0x2e0
   80928:	47a0      	blx	r4
}
   8092a:	b002      	add	sp, #8
   8092c:	bd10      	pop	{r4, pc}
   8092e:	bf00      	nop
   80930:	00080d8d 	.word	0x00080d8d

00080934 <transformBlankCardIntoMooltipass>:
{
   80934:	b510      	push	{r4, lr}
   80936:	b086      	sub	sp, #24
    uint16_t default_pin = SMARTCARD_DEFAULT_PIN;
   80938:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   8093c:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (checkSecurityMode2() == RETURN_OK)
   80940:	4b13      	ldr	r3, [pc, #76]	; (80990 <transformBlankCardIntoMooltipass+0x5c>)
   80942:	4798      	blx	r3
   80944:	b300      	cbz	r0, 80988 <transformBlankCardIntoMooltipass+0x54>
    resetBlankCard();
   80946:	4b13      	ldr	r3, [pc, #76]	; (80994 <transformBlankCardIntoMooltipass+0x60>)
   80948:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   8094a:	f10d 0002 	add.w	r0, sp, #2
   8094e:	4b12      	ldr	r3, [pc, #72]	; (80998 <transformBlankCardIntoMooltipass+0x64>)
   80950:	4798      	blx	r3
    strcpy((char*)temp_buffer, "limpkin");
   80952:	ac01      	add	r4, sp, #4
   80954:	4b11      	ldr	r3, [pc, #68]	; (8099c <transformBlankCardIntoMooltipass+0x68>)
   80956:	e893 0003 	ldmia.w	r3, {r0, r1}
   8095a:	e884 0003 	stmia.w	r4, {r0, r1}
    writeIssuerZone(temp_buffer);
   8095e:	4620      	mov	r0, r4
   80960:	4b0f      	ldr	r3, [pc, #60]	; (809a0 <transformBlankCardIntoMooltipass+0x6c>)
   80962:	4798      	blx	r3
    *temp_buf16 = swap16(2014);
   80964:	f64d 6307 	movw	r3, #56839	; 0xde07
   80968:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeManufacturerZone(temp_buffer);
   8096c:	4620      	mov	r0, r4
   8096e:	4b0d      	ldr	r3, [pc, #52]	; (809a4 <transformBlankCardIntoMooltipass+0x70>)
   80970:	4798      	blx	r3
    setAuthenticatedReadWriteAccessToZone1and2();
   80972:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <transformBlankCardIntoMooltipass+0x74>)
   80974:	4798      	blx	r3
    writeManufacturerFuse();
   80976:	4b0d      	ldr	r3, [pc, #52]	; (809ac <transformBlankCardIntoMooltipass+0x78>)
   80978:	4798      	blx	r3
    write_ec2en_fuse();
   8097a:	4b0d      	ldr	r3, [pc, #52]	; (809b0 <transformBlankCardIntoMooltipass+0x7c>)
   8097c:	4798      	blx	r3
    write_issuers_fuse();
   8097e:	4b0d      	ldr	r3, [pc, #52]	; (809b4 <transformBlankCardIntoMooltipass+0x80>)
   80980:	4798      	blx	r3
    return RETURN_OK;
   80982:	2000      	movs	r0, #0
}
   80984:	b006      	add	sp, #24
   80986:	bd10      	pop	{r4, pc}
        return RETURN_NOK;
   80988:	f04f 30ff 	mov.w	r0, #4294967295
   8098c:	e7fa      	b.n	80984 <transformBlankCardIntoMooltipass+0x50>
   8098e:	bf00      	nop
   80990:	0008085d 	.word	0x0008085d
   80994:	000808d5 	.word	0x000808d5
   80998:	0008089d 	.word	0x0008089d
   8099c:	0008e330 	.word	0x0008e330
   809a0:	000807a9 	.word	0x000807a9
   809a4:	00080819 	.word	0x00080819
   809a8:	0008090d 	.word	0x0008090d
   809ac:	0008082d 	.word	0x0008082d
   809b0:	0008084d 	.word	0x0008084d
   809b4:	0008083d 	.word	0x0008083d

000809b8 <getNumberOfSecurityCodeTriesLeft>:
/*! \fn     getNumberOfSecurityCodeTriesLeft(void)
*   \brief  Get the number of security code tries left
*   \return Number of tries left
*/
uint8_t getNumberOfSecurityCodeTriesLeft(void)
{
   809b8:	b500      	push	{lr}
   809ba:	b083      	sub	sp, #12
    uint8_t temp_buffer[2];
    uint8_t return_val = 0;
    uint8_t i;

    readSecurityCodeAttemptsCounters(temp_buffer);
   809bc:	a801      	add	r0, sp, #4
   809be:	4b09      	ldr	r3, [pc, #36]	; (809e4 <getNumberOfSecurityCodeTriesLeft+0x2c>)
   809c0:	4798      	blx	r3
    for(i = 0; i < 4; i++)
    {
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   809c6:	2304      	movs	r3, #4
    uint8_t return_val = 0;
   809c8:	2000      	movs	r0, #0
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809ca:	fa41 f203 	asr.w	r2, r1, r3
   809ce:	f012 0f01 	tst.w	r2, #1
        {
            return_val++;
   809d2:	bf1c      	itt	ne
   809d4:	3001      	addne	r0, #1
   809d6:	b2c0      	uxtbne	r0, r0
    for(i = 0; i < 4; i++)
   809d8:	3301      	adds	r3, #1
   809da:	2b08      	cmp	r3, #8
   809dc:	d1f5      	bne.n	809ca <getNumberOfSecurityCodeTriesLeft+0x12>
        }
    }

    return return_val;
}
   809de:	b003      	add	sp, #12
   809e0:	f85d fb04 	ldr.w	pc, [sp], #4
   809e4:	000807bd 	.word	0x000807bd

000809e8 <smartcardHPulseDelay>:

/*! \fn     smartcardHPulseDelay(void)
*   \brief  2us half pulse delay, specified by datasheet (min 3.3us/2)
*/
void smartcardHPulseDelay(void)
{
   809e8:	b508      	push	{r3, lr}
    delay_us(2);
   809ea:	200e      	movs	r0, #14
   809ec:	4b01      	ldr	r3, [pc, #4]	; (809f4 <smartcardHPulseDelay+0xc>)
   809ee:	4798      	blx	r3
}
   809f0:	bd08      	pop	{r3, pc}
   809f2:	bf00      	nop
   809f4:	20000089 	.word	0x20000089

000809f8 <smartcardPowerDelay>:

/*! \fn     smartcardPowerDelay(void)
*   \brief  Delay to let the card come online/offline
*/
void smartcardPowerDelay(void)
{
   809f8:	b508      	push	{r3, lr}
    delay_ms(130);
   809fa:	4802      	ldr	r0, [pc, #8]	; (80a04 <smartcardPowerDelay+0xc>)
   809fc:	4b02      	ldr	r3, [pc, #8]	; (80a08 <smartcardPowerDelay+0x10>)
   809fe:	4798      	blx	r3
}
   80a00:	bd08      	pop	{r3, pc}
   80a02:	bf00      	nop
   80a04:	000d9a25 	.word	0x000d9a25
   80a08:	20000089 	.word	0x20000089

00080a0c <clockPulseSMC>:

/*! \fn     clockPulseSMC(void)
*   \brief  Send a 4us H->L clock pulse (datasheet: min 3.3us)
*/
void clockPulseSMC(void)
{
   80a0c:	b570      	push	{r4, r5, r6, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a0e:	4d04      	ldr	r5, [pc, #16]	; (80a20 <clockPulseSMC+0x14>)
   80a10:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a14:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a16:	4c03      	ldr	r4, [pc, #12]	; (80a24 <clockPulseSMC+0x18>)
   80a18:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a1a:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a1c:	47a0      	blx	r4
}
   80a1e:	bd70      	pop	{r4, r5, r6, pc}
   80a20:	400e0c00 	.word	0x400e0c00
   80a24:	000809e9 	.word	0x000809e9

00080a28 <invertedClockPulseSMC>:

/*! \fn     invertedClockPulseSMC(void)
*   \brief  Send a 4us L->H clock pulse (datasheet: min 3.3us)
*/
void invertedClockPulseSMC(void)
{
   80a28:	b570      	push	{r4, r5, r6, lr}
   80a2a:	4d04      	ldr	r5, [pc, #16]	; (80a3c <invertedClockPulseSMC+0x14>)
   80a2c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a30:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a32:	4c03      	ldr	r4, [pc, #12]	; (80a40 <invertedClockPulseSMC+0x18>)
   80a34:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a36:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a38:	47a0      	blx	r4
}
   80a3a:	bd70      	pop	{r4, r5, r6, pc}
   80a3c:	400e0c00 	.word	0x400e0c00
   80a40:	000809e9 	.word	0x000809e9

00080a44 <clearPgmRstSignals>:

/*! \fn     clearPgmRstSignals(void)
*   \brief  Clear PGM / RST signal for normal operation mode
*/
void clearPgmRstSignals(void)
{
   80a44:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a46:	4b04      	ldr	r3, [pc, #16]	; (80a58 <clearPgmRstSignals+0x14>)
   80a48:	2220      	movs	r2, #32
   80a4a:	635a      	str	r2, [r3, #52]	; 0x34
   80a4c:	2208      	movs	r2, #8
   80a4e:	635a      	str	r2, [r3, #52]	; 0x34
	scard_pgm_low();
	scard_rst_low();
    smartcardHPulseDelay();
   80a50:	4c02      	ldr	r4, [pc, #8]	; (80a5c <clearPgmRstSignals+0x18>)
   80a52:	47a0      	blx	r4
	smartcardHPulseDelay();
   80a54:	47a0      	blx	r4
}
   80a56:	bd10      	pop	{r4, pc}
   80a58:	400e0c00 	.word	0x400e0c00
   80a5c:	000809e9 	.word	0x000809e9

00080a60 <setPgmRstSignals>:

/*! \fn     setPgmRstSignals(void)
*   \brief  Set PGM / RST signal for standby mode
*/
void setPgmRstSignals(void)
{
   80a60:	b508      	push	{r3, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <setPgmRstSignals+0x14>)
   80a64:	2208      	movs	r2, #8
   80a66:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a68:	2220      	movs	r2, #32
   80a6a:	635a      	str	r2, [r3, #52]	; 0x34
	scard_rst_high();
	scard_pgm_low();
    smartcardHPulseDelay();
   80a6c:	4b02      	ldr	r3, [pc, #8]	; (80a78 <setPgmRstSignals+0x18>)
   80a6e:	4798      	blx	r3
}
   80a70:	bd08      	pop	{r3, pc}
   80a72:	bf00      	nop
   80a74:	400e0c00 	.word	0x400e0c00
   80a78:	000809e9 	.word	0x000809e9

00080a7c <performLowLevelWriteNErase>:
/*! \fn     performLowLevelWriteNErase(uint8_t is_write)
*   \brief  Perform a write or erase operation on the smart card
*   \param  is_write    Boolean to indicate if it is a write
*/
void performLowLevelWriteNErase(uint8_t is_write)
{
   80a7c:	b570      	push	{r4, r5, r6, lr}
   80a7e:	4604      	mov	r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a80:	4b11      	ldr	r3, [pc, #68]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a82:	2220      	movs	r2, #32
   80a84:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set programming control signal */
	scard_pgm_high();
    smartcardHPulseDelay();
   80a86:	4b11      	ldr	r3, [pc, #68]	; (80acc <performLowLevelWriteNErase+0x50>)
   80a88:	4798      	blx	r3

    /* Set data according to write / erase */
    if (is_write != FALSE)
   80a8a:	b1bc      	cbz	r4, 80abc <performLowLevelWriteNErase+0x40>
   80a8c:	4b0e      	ldr	r3, [pc, #56]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a8e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80a92:	631a      	str	r2, [r3, #48]	; 0x30
    }
    else
    {
		scard_io_low();
    }
    smartcardHPulseDelay();
   80a94:	4c0d      	ldr	r4, [pc, #52]	; (80acc <performLowLevelWriteNErase+0x50>)
   80a96:	47a0      	blx	r4
   80a98:	4d0b      	ldr	r5, [pc, #44]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a9a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a9e:	632e      	str	r6, [r5, #48]	; 0x30

    /* Set clock */
	scard_sck_high();
    smartcardHPulseDelay();
   80aa0:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80aa2:	2320      	movs	r3, #32
   80aa4:	636b      	str	r3, [r5, #52]	; 0x34
    delay_ms(4);
   80aa6:	f646 3025 	movw	r0, #27429	; 0x6b25
   80aaa:	4b09      	ldr	r3, [pc, #36]	; (80ad0 <performLowLevelWriteNErase+0x54>)
   80aac:	4798      	blx	r3
   80aae:	636e      	str	r6, [r5, #52]	; 0x34
    scard_pgm_low();
    smartcardTchpDelay();

    /* Release clock */
    scard_sck_low();
    smartcardHPulseDelay();
   80ab0:	47a0      	blx	r4
   80ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ab6:	636b      	str	r3, [r5, #52]	; 0x34

    /* Release data */
    scard_io_low();
    smartcardHPulseDelay();
   80ab8:	47a0      	blx	r4
}
   80aba:	bd70      	pop	{r4, r5, r6, pc}
   80abc:	4b02      	ldr	r3, [pc, #8]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80abe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80ac2:	635a      	str	r2, [r3, #52]	; 0x34
   80ac4:	e7e6      	b.n	80a94 <performLowLevelWriteNErase+0x18>
   80ac6:	bf00      	nop
   80ac8:	400e0c00 	.word	0x400e0c00
   80acc:	000809e9 	.word	0x000809e9
   80ad0:	20000089 	.word	0x20000089

00080ad4 <setSPIModeSMC>:

/*! \fn     setSPIModeSMC(void)
*   \brief  Activate SPI controller for the SMC
*/
void setSPIModeSMC(void)
{
   80ad4:	b530      	push	{r4, r5, lr}
   80ad6:	b085      	sub	sp, #20
	usart_spi_opt_t opts;
	
	opts.baudrate = 125000;
   80ad8:	4b12      	ldr	r3, [pc, #72]	; (80b24 <setSPIModeSMC+0x50>)
   80ada:	9300      	str	r3, [sp, #0]
	opts.char_length = US_MR_CHRL_8_BIT;
   80adc:	23c0      	movs	r3, #192	; 0xc0
   80ade:	9301      	str	r3, [sp, #4]
	opts.channel_mode = US_MR_CHMODE_NORMAL;
   80ae0:	2300      	movs	r3, #0
   80ae2:	9303      	str	r3, [sp, #12]
	opts.spi_mode = SPI_MODE_0;
   80ae4:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80ae6:	200f      	movs	r0, #15
   80ae8:	4b0f      	ldr	r3, [pc, #60]	; (80b28 <setSPIModeSMC+0x54>)
   80aea:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	usart_init_spi_master(SCARD_USART, &opts ,sysclk_get_cpu_hz());
   80aec:	4c0f      	ldr	r4, [pc, #60]	; (80b2c <setSPIModeSMC+0x58>)
   80aee:	4a10      	ldr	r2, [pc, #64]	; (80b30 <setSPIModeSMC+0x5c>)
   80af0:	4669      	mov	r1, sp
   80af2:	4620      	mov	r0, r4
   80af4:	4b0f      	ldr	r3, [pc, #60]	; (80b34 <setSPIModeSMC+0x60>)
   80af6:	4798      	blx	r3
	gpio_configure_pin(SCARD_IOTX_IDX, PIO_PERIPH_A);
   80af8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80afc:	2016      	movs	r0, #22
   80afe:	4d0e      	ldr	r5, [pc, #56]	; (80b38 <setSPIModeSMC+0x64>)
   80b00:	47a8      	blx	r5
	gpio_configure_pin(SCARD_IORX_IDX, PIO_PERIPH_A);
   80b02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b06:	2017      	movs	r0, #23
   80b08:	47a8      	blx	r5
	gpio_configure_pin(SCARD_SCK_IDX, SCK_PERIPH);
   80b0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b0e:	2019      	movs	r0, #25
   80b10:	47a8      	blx	r5
	
	usart_enable_rx(SCARD_USART);
   80b12:	4620      	mov	r0, r4
   80b14:	4b09      	ldr	r3, [pc, #36]	; (80b3c <setSPIModeSMC+0x68>)
   80b16:	4798      	blx	r3
	usart_enable_tx(SCARD_USART);
   80b18:	4620      	mov	r0, r4
   80b1a:	4b09      	ldr	r3, [pc, #36]	; (80b40 <setSPIModeSMC+0x6c>)
   80b1c:	4798      	blx	r3
	
}
   80b1e:	b005      	add	sp, #20
   80b20:	bd30      	pop	{r4, r5, pc}
   80b22:	bf00      	nop
   80b24:	0001e848 	.word	0x0001e848
   80b28:	000854b1 	.word	0x000854b1
   80b2c:	40098000 	.word	0x40098000
   80b30:	05b8d800 	.word	0x05b8d800
   80b34:	00086c59 	.word	0x00086c59
   80b38:	0008516d 	.word	0x0008516d
   80b3c:	00086dcd 	.word	0x00086dcd
   80b40:	00086dbd 	.word	0x00086dbd

00080b44 <setBBModeAndPgmRstSMC>:

/*! \fn     setBBModeAndPgmRstSMC(void)
*   \brief  Switch to big banging, and clear pgm/rst signal for normal operation
*/
void setBBModeAndPgmRstSMC(void)
{
   80b44:	b510      	push	{r4, lr}
    /* Deactivate SPI port */
    usart_disable_rx(SCARD_USART);
   80b46:	4c10      	ldr	r4, [pc, #64]	; (80b88 <setBBModeAndPgmRstSMC+0x44>)
   80b48:	4620      	mov	r0, r4
   80b4a:	4b10      	ldr	r3, [pc, #64]	; (80b8c <setBBModeAndPgmRstSMC+0x48>)
   80b4c:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80b4e:	4620      	mov	r0, r4
   80b50:	4b0f      	ldr	r3, [pc, #60]	; (80b90 <setBBModeAndPgmRstSMC+0x4c>)
   80b52:	4798      	blx	r3

    /* Clock & data low */
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b54:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b58:	2016      	movs	r0, #22
   80b5a:	4c0e      	ldr	r4, [pc, #56]	; (80b94 <setBBModeAndPgmRstSMC+0x50>)
   80b5c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80b5e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80b62:	2017      	movs	r0, #23
   80b64:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b66:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b6a:	2019      	movs	r0, #25
   80b6c:	47a0      	blx	r4
   80b6e:	4b0a      	ldr	r3, [pc, #40]	; (80b98 <setBBModeAndPgmRstSMC+0x54>)
   80b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80b74:	635a      	str	r2, [r3, #52]	; 0x34
   80b76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80b7a:	635a      	str	r2, [r3, #52]	; 0x34
    scard_sck_low();
    scard_io_low();
	
    smartcardHPulseDelay();
   80b7c:	4b07      	ldr	r3, [pc, #28]	; (80b9c <setBBModeAndPgmRstSMC+0x58>)
   80b7e:	4798      	blx	r3

    /* Clear PGM and RST signals */
    clearPgmRstSignals();
   80b80:	4b07      	ldr	r3, [pc, #28]	; (80ba0 <setBBModeAndPgmRstSMC+0x5c>)
   80b82:	4798      	blx	r3
}
   80b84:	bd10      	pop	{r4, pc}
   80b86:	bf00      	nop
   80b88:	40098000 	.word	0x40098000
   80b8c:	00086dd3 	.word	0x00086dd3
   80b90:	00086dc3 	.word	0x00086dc3
   80b94:	0008516d 	.word	0x0008516d
   80b98:	400e0c00 	.word	0x400e0c00
   80b9c:	000809e9 	.word	0x000809e9
   80ba0:	00080a45 	.word	0x00080a45

00080ba4 <blowFuse>:
/*! \fn     blowFuse(uint8_t fuse_name)
*   \brief  Blow the manufacturer or issuer fuse
*   \param  fuse_name    Which fuse to blow
*/
void blowFuse(uint8_t fuse_name)
{
   80ba4:	b570      	push	{r4, r5, r6, lr}
    uint16_t i;

    /* Set the index to write */
    if (fuse_name == MAN_FUSE)
   80ba6:	b130      	cbz	r0, 80bb6 <blowFuse+0x12>
    {
        i = 1460;
    }
    else if (fuse_name == ISSUER_FUSE)
   80ba8:	2802      	cmp	r0, #2
   80baa:	d01d      	beq.n	80be8 <blowFuse+0x44>
    {
        i = 1560;
    }
    else if (fuse_name == EC2EN_FUSE)
   80bac:	2801      	cmp	r0, #1
   80bae:	d01e      	beq.n	80bee <blowFuse+0x4a>
    {
        i = 0;
    }

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80bb0:	4b10      	ldr	r3, [pc, #64]	; (80bf4 <blowFuse+0x50>)
   80bb2:	4798      	blx	r3

    /* Get to the good index */
    while(i--)clockPulseSMC();
   80bb4:	e00d      	b.n	80bd2 <blowFuse+0x2e>
        i = 1460;
   80bb6:	f240 54b4 	movw	r4, #1460	; 0x5b4
    setBBModeAndPgmRstSMC();
   80bba:	4b0e      	ldr	r3, [pc, #56]	; (80bf4 <blowFuse+0x50>)
   80bbc:	4798      	blx	r3
    while(i--)clockPulseSMC();
   80bbe:	3c01      	subs	r4, #1
   80bc0:	b2a4      	uxth	r4, r4
   80bc2:	4e0d      	ldr	r6, [pc, #52]	; (80bf8 <blowFuse+0x54>)
   80bc4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   80bc8:	47b0      	blx	r6
   80bca:	3c01      	subs	r4, #1
   80bcc:	b2a4      	uxth	r4, r4
   80bce:	42ac      	cmp	r4, r5
   80bd0:	d1fa      	bne.n	80bc8 <blowFuse+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80bd2:	4b0a      	ldr	r3, [pc, #40]	; (80bfc <blowFuse+0x58>)
   80bd4:	2208      	movs	r2, #8
   80bd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set RST signal */
	scard_rst_high();

    /* Perform a write */
    performLowLevelWriteNErase(TRUE);
   80bd8:	2001      	movs	r0, #1
   80bda:	4b09      	ldr	r3, [pc, #36]	; (80c00 <blowFuse+0x5c>)
   80bdc:	4798      	blx	r3

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80bde:	4b09      	ldr	r3, [pc, #36]	; (80c04 <blowFuse+0x60>)
   80be0:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80be2:	4b09      	ldr	r3, [pc, #36]	; (80c08 <blowFuse+0x64>)
   80be4:	4798      	blx	r3
}
   80be6:	bd70      	pop	{r4, r5, r6, pc}
        i = 1560;
   80be8:	f44f 64c3 	mov.w	r4, #1560	; 0x618
   80bec:	e7e5      	b.n	80bba <blowFuse+0x16>
        i = 1529;
   80bee:	f240 54f9 	movw	r4, #1529	; 0x5f9
   80bf2:	e7e2      	b.n	80bba <blowFuse+0x16>
   80bf4:	00080b45 	.word	0x00080b45
   80bf8:	00080a0d 	.word	0x00080a0d
   80bfc:	400e0c00 	.word	0x400e0c00
   80c00:	00080a7d 	.word	0x00080a7d
   80c04:	00080a61 	.word	0x00080a61
   80c08:	00080ad5 	.word	0x00080ad5

00080c0c <securityValidationSMC>:
*   \brief  Check security code
*   \param  code    The code
*   \return success_status (see card_detect_return_t)
*/
RET_TYPE securityValidationSMC(uint16_t code, uint8_t reset_after_send)
{
   80c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80c10:	4607      	mov	r7, r0
   80c12:	460e      	mov	r6, r1
    RET_TYPE return_val = RETURN_PIN_NOK_0;
    uint8_t temp_bool;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80c14:	4b54      	ldr	r3, [pc, #336]	; (80d68 <securityValidationSMC+0x15c>)
   80c16:	4798      	blx	r3
   80c18:	2450      	movs	r4, #80	; 0x50

    /* Get to the SC */
    for(i = 0; i < 80; i++)
        invertedClockPulseSMC();
   80c1a:	4d54      	ldr	r5, [pc, #336]	; (80d6c <securityValidationSMC+0x160>)
   80c1c:	47a8      	blx	r5
    for(i = 0; i < 80; i++)
   80c1e:	3c01      	subs	r4, #1
   80c20:	b2a4      	uxth	r4, r4
   80c22:	2c00      	cmp	r4, #0
   80c24:	d1fa      	bne.n	80c1c <securityValidationSMC+0x10>
   80c26:	4b52      	ldr	r3, [pc, #328]	; (80d70 <securityValidationSMC+0x164>)
   80c28:	2210      	movs	r2, #16
   80c2a:	631a      	str	r2, [r3, #48]	; 0x30

	scard_aux1_high();	

    /* Clock is at high level now, as input must be switched during this time */
    /* Enter the SC */
    smartcardHPulseDelay();
   80c2c:	4b51      	ldr	r3, [pc, #324]	; (80d74 <securityValidationSMC+0x168>)
   80c2e:	4798      	blx	r3
   80c30:	250f      	movs	r5, #15
   80c32:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80d70 <securityValidationSMC+0x164>
        }
        else
        {
            scard_io_high();
        }
        smartcardHPulseDelay();
   80c36:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80d74 <securityValidationSMC+0x168>

        /* Inverted clock pulse */
        invertedClockPulseSMC();
   80c3a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80d6c <securityValidationSMC+0x160>
        if (((code >> (15-i)) & 0x0001) != 0x0000)
   80c3e:	fa47 f305 	asr.w	r3, r7, r5
   80c42:	f013 0f01 	tst.w	r3, #1
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c4a:	bf14      	ite	ne
   80c4c:	f8ca 3034 	strne.w	r3, [sl, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c50:	f8ca 3030 	streq.w	r3, [sl, #48]	; 0x30
        smartcardHPulseDelay();
   80c54:	47c8      	blx	r9
        invertedClockPulseSMC();
   80c56:	47c0      	blx	r8
    for(i = 0; i < 16; i++)
   80c58:	3d01      	subs	r5, #1
   80c5a:	f1b5 3fff 	cmp.w	r5, #4294967295
   80c5e:	d1ee      	bne.n	80c3e <securityValidationSMC+0x32>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c60:	4f43      	ldr	r7, [pc, #268]	; (80d70 <securityValidationSMC+0x164>)
   80c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80c66:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   80c68:	4d42      	ldr	r5, [pc, #264]	; (80d74 <securityValidationSMC+0x168>)
   80c6a:	47a8      	blx	r5
	smartcardHPulseDelay();
   80c6c:	47a8      	blx	r5
   80c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c72:	637b      	str	r3, [r7, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();	
   80c74:	47a8      	blx	r5
	smartcardHPulseDelay();
   80c76:	47a8      	blx	r5
	
	if (reset_after_send == 1){
   80c78:	2e01      	cmp	r6, #1
   80c7a:	d002      	beq.n	80c82 <securityValidationSMC+0x76>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80c7c:	463d      	mov	r5, r7
            temp_bool = FALSE;
        }
        else
        {
            /* Clock pulse */
            clockPulseSMC();
   80c7e:	4f3e      	ldr	r7, [pc, #248]	; (80d78 <securityValidationSMC+0x16c>)
   80c80:	e051      	b.n	80d26 <securityValidationSMC+0x11a>
		delay_us(10);
   80c82:	2045      	movs	r0, #69	; 0x45
   80c84:	4b3d      	ldr	r3, [pc, #244]	; (80d7c <securityValidationSMC+0x170>)
   80c86:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c88:	4b39      	ldr	r3, [pc, #228]	; (80d70 <securityValidationSMC+0x164>)
   80c8a:	2210      	movs	r2, #16
   80c8c:	635a      	str	r2, [r3, #52]	; 0x34
		setPgmRstSignals();
   80c8e:	4b3c      	ldr	r3, [pc, #240]	; (80d80 <securityValidationSMC+0x174>)
   80c90:	4798      	blx	r3
		setSPIModeSMC();
   80c92:	4b3c      	ldr	r3, [pc, #240]	; (80d84 <securityValidationSMC+0x178>)
   80c94:	4798      	blx	r3
		return RETURN_PIN_NOK_0;
   80c96:	2520      	movs	r5, #32
   80c98:	e060      	b.n	80d5c <securityValidationSMC+0x150>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c9a:	4c35      	ldr	r4, [pc, #212]	; (80d70 <securityValidationSMC+0x164>)
   80c9c:	2520      	movs	r5, #32
   80c9e:	6325      	str	r5, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80ca0:	4e34      	ldr	r6, [pc, #208]	; (80d74 <securityValidationSMC+0x168>)
   80ca2:	47b0      	blx	r6
   80ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ca8:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80caa:	47b0      	blx	r6
   80cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80cb0:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cb2:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cb4:	2310      	movs	r3, #16
   80cb6:	6363      	str	r3, [r4, #52]	; 0x34
				setPgmRstSignals();
   80cb8:	4b31      	ldr	r3, [pc, #196]	; (80d80 <securityValidationSMC+0x174>)
   80cba:	4798      	blx	r3
				setSPIModeSMC();
   80cbc:	4b31      	ldr	r3, [pc, #196]	; (80d84 <securityValidationSMC+0x178>)
   80cbe:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80cc0:	e04c      	b.n	80d5c <securityValidationSMC+0x150>
			if (reset_after_send == 3){			
   80cc2:	2e03      	cmp	r6, #3
   80cc4:	d00f      	beq.n	80ce6 <securityValidationSMC+0xda>
            performLowLevelWriteNErase(FALSE);
   80cc6:	2000      	movs	r0, #0
   80cc8:	4b2f      	ldr	r3, [pc, #188]	; (80d88 <securityValidationSMC+0x17c>)
   80cca:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80ccc:	4b28      	ldr	r3, [pc, #160]	; (80d70 <securityValidationSMC+0x164>)
   80cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            if (scard_io_read())
   80cd0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80cd4:	d110      	bne.n	80cf8 <securityValidationSMC+0xec>
                if (i == 0)
   80cd6:	b1ec      	cbz	r4, 80d14 <securityValidationSMC+0x108>
                else if (i == 1)
   80cd8:	2c01      	cmp	r4, #1
   80cda:	d01d      	beq.n	80d18 <securityValidationSMC+0x10c>
                else if (i == 2)
   80cdc:	2c02      	cmp	r4, #2
   80cde:	bf0c      	ite	eq
   80ce0:	2521      	moveq	r5, #33	; 0x21
   80ce2:	2520      	movne	r5, #32
   80ce4:	e009      	b.n	80cfa <securityValidationSMC+0xee>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ce6:	4b22      	ldr	r3, [pc, #136]	; (80d70 <securityValidationSMC+0x164>)
   80ce8:	2210      	movs	r2, #16
   80cea:	635a      	str	r2, [r3, #52]	; 0x34
				setPgmRstSignals();
   80cec:	4b24      	ldr	r3, [pc, #144]	; (80d80 <securityValidationSMC+0x174>)
   80cee:	4798      	blx	r3
				setSPIModeSMC();
   80cf0:	4b24      	ldr	r3, [pc, #144]	; (80d84 <securityValidationSMC+0x178>)
   80cf2:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80cf4:	2520      	movs	r5, #32
   80cf6:	e031      	b.n	80d5c <securityValidationSMC+0x150>
                return_val = RETURN_PIN_OK;
   80cf8:	2524      	movs	r5, #36	; 0x24
            clockPulseSMC();
   80cfa:	4b1f      	ldr	r3, [pc, #124]	; (80d78 <securityValidationSMC+0x16c>)
   80cfc:	4798      	blx	r3
    }

    /* If we couldn't find a spot to write, no tries left */
    if (i == 4)
    {
        return_val = RETURN_PIN_NOK_0;
   80cfe:	2c04      	cmp	r4, #4
   80d00:	bf08      	it	eq
   80d02:	2520      	moveq	r5, #32
   80d04:	4b1a      	ldr	r3, [pc, #104]	; (80d70 <securityValidationSMC+0x164>)
   80d06:	2210      	movs	r2, #16
   80d08:	635a      	str	r2, [r3, #52]	; 0x34


	scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80d0a:	4b1d      	ldr	r3, [pc, #116]	; (80d80 <securityValidationSMC+0x174>)
   80d0c:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80d0e:	4b1d      	ldr	r3, [pc, #116]	; (80d84 <securityValidationSMC+0x178>)
   80d10:	4798      	blx	r3

    return return_val;
   80d12:	e023      	b.n	80d5c <securityValidationSMC+0x150>
                    return_val = RETURN_PIN_NOK_3;
   80d14:	2523      	movs	r5, #35	; 0x23
   80d16:	e7f0      	b.n	80cfa <securityValidationSMC+0xee>
                    return_val = RETURN_PIN_NOK_2;
   80d18:	2522      	movs	r5, #34	; 0x22
   80d1a:	e7ee      	b.n	80cfa <securityValidationSMC+0xee>
            clockPulseSMC();
   80d1c:	47b8      	blx	r7
            i++;
   80d1e:	3401      	adds	r4, #1
   80d20:	b2a4      	uxth	r4, r4
    while((temp_bool == TRUE) && (i < 4))
   80d22:	2c04      	cmp	r4, #4
   80d24:	d01d      	beq.n	80d62 <securityValidationSMC+0x156>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80d26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        if (scard_io_read())
   80d28:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80d2c:	d0f6      	beq.n	80d1c <securityValidationSMC+0x110>
			if (reset_after_send == 2){			
   80d2e:	2e02      	cmp	r6, #2
   80d30:	d0b3      	beq.n	80c9a <securityValidationSMC+0x8e>
            performLowLevelWriteNErase(TRUE);
   80d32:	2001      	movs	r0, #1
   80d34:	4b14      	ldr	r3, [pc, #80]	; (80d88 <securityValidationSMC+0x17c>)
   80d36:	4798      	blx	r3
            while(scard_io_read())
   80d38:	2320      	movs	r3, #32
   80d3a:	490d      	ldr	r1, [pc, #52]	; (80d70 <securityValidationSMC+0x164>)
   80d3c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   80d3e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   80d42:	d0be      	beq.n	80cc2 <securityValidationSMC+0xb6>
				if(timeout == 0)
   80d44:	3b01      	subs	r3, #1
   80d46:	b29b      	uxth	r3, r3
   80d48:	2b00      	cmp	r3, #0
   80d4a:	d1f7      	bne.n	80d3c <securityValidationSMC+0x130>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d4c:	4b08      	ldr	r3, [pc, #32]	; (80d70 <securityValidationSMC+0x164>)
   80d4e:	2210      	movs	r2, #16
   80d50:	635a      	str	r2, [r3, #52]	; 0x34
					setPgmRstSignals();
   80d52:	4b0b      	ldr	r3, [pc, #44]	; (80d80 <securityValidationSMC+0x174>)
   80d54:	4798      	blx	r3
					setSPIModeSMC();
   80d56:	4b0b      	ldr	r3, [pc, #44]	; (80d84 <securityValidationSMC+0x178>)
   80d58:	4798      	blx	r3
					return RETURN_PIN_TIMEOUT;
   80d5a:	2525      	movs	r5, #37	; 0x25
}
   80d5c:	4628      	mov	r0, r5
   80d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return_val = RETURN_PIN_NOK_0;
   80d62:	2520      	movs	r5, #32
   80d64:	e7ce      	b.n	80d04 <securityValidationSMC+0xf8>
   80d66:	bf00      	nop
   80d68:	00080b45 	.word	0x00080b45
   80d6c:	00080a29 	.word	0x00080a29
   80d70:	400e0c00 	.word	0x400e0c00
   80d74:	000809e9 	.word	0x000809e9
   80d78:	00080a0d 	.word	0x00080a0d
   80d7c:	20000089 	.word	0x20000089
   80d80:	00080a61 	.word	0x00080a61
   80d84:	00080ad5 	.word	0x00080ad5
   80d88:	00080a7d 	.word	0x00080a7d

00080d8c <writeSMC>:
*   \param  start_index_bit         Where to start writing bits
*   \param  nb_bits                 Number of bits to write
*   \param  data_to_write           Pointer to the buffer
*/
void writeSMC(uint16_t start_index_bit, uint16_t nb_bits, uint8_t* data_to_write)
{
   80d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d90:	4606      	mov	r6, r0
   80d92:	460f      	mov	r7, r1
   80d94:	4690      	mov	r8, r2
    uint16_t current_written_bit = 0;
    uint8_t masked_bit_to_write = 0;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80d96:	4b2b      	ldr	r3, [pc, #172]	; (80e44 <writeSMC+0xb8>)
   80d98:	4798      	blx	r3

    /* Try to not erase AZ1 if EZ1 is 0xFFFFFFF... and we're writing the first bit of the AZ2 */
    if (start_index_bit >= SMARTCARD_AZ2_BIT_START)
   80d9a:	f5b6 7f38 	cmp.w	r6, #736	; 0x2e0
   80d9e:	d208      	bcs.n	80db2 <writeSMC+0x26>
        }                
    }
    else
    {
        /* Get to the good index, clock pulses */
        for(i = 0; i < start_index_bit; i++)
   80da0:	b31e      	cbz	r6, 80dea <writeSMC+0x5e>
   80da2:	2400      	movs	r4, #0
        {
            clockPulseSMC();
   80da4:	4d28      	ldr	r5, [pc, #160]	; (80e48 <writeSMC+0xbc>)
   80da6:	47a8      	blx	r5
        for(i = 0; i < start_index_bit; i++)
   80da8:	3401      	adds	r4, #1
   80daa:	b2a4      	uxth	r4, r4
   80dac:	42a6      	cmp	r6, r4
   80dae:	d1fa      	bne.n	80da6 <writeSMC+0x1a>
   80db0:	e01b      	b.n	80dea <writeSMC+0x5e>
   80db2:	f240 24df 	movw	r4, #735	; 0x2df
            clockPulseSMC();            
   80db6:	4d24      	ldr	r5, [pc, #144]	; (80e48 <writeSMC+0xbc>)
   80db8:	47a8      	blx	r5
        for(i = 0; i < SMARTCARD_AZ2_BIT_START - 1; i++)
   80dba:	3c01      	subs	r4, #1
   80dbc:	b2a4      	uxth	r4, r4
   80dbe:	2c00      	cmp	r4, #0
   80dc0:	d1fa      	bne.n	80db8 <writeSMC+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80dc2:	4d22      	ldr	r5, [pc, #136]	; (80e4c <writeSMC+0xc0>)
   80dc4:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
   80dc8:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
        clockPulseSMC();
   80dcc:	4b1e      	ldr	r3, [pc, #120]	; (80e48 <writeSMC+0xbc>)
   80dce:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80dd0:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80dd4:	f5a6 7538 	sub.w	r5, r6, #736	; 0x2e0
   80dd8:	2d00      	cmp	r5, #0
   80dda:	dd06      	ble.n	80dea <writeSMC+0x5e>
            clockPulseSMC();            
   80ddc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80e48 <writeSMC+0xbc>
   80de0:	47c8      	blx	r9
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80de2:	3401      	adds	r4, #1
   80de4:	b2a4      	uxth	r4, r4
   80de6:	42ac      	cmp	r4, r5
   80de8:	dbfa      	blt.n	80de0 <writeSMC+0x54>
        }                
    }

    /* Start writing */
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80dea:	b327      	cbz	r7, 80e36 <writeSMC+0xaa>
   80dec:	3f01      	subs	r7, #1
   80dee:	b2bf      	uxth	r7, r7
   80df0:	2500      	movs	r5, #0
    {
        /* If we are at the start of a 16bits word or writing our first bit, erase the word */
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
        {
            performLowLevelWriteNErase(FALSE);
   80df2:	46ab      	mov	fp, r5
   80df4:	f8df a060 	ldr.w	sl, [pc, #96]	; 80e58 <writeSMC+0xcc>
        {
            performLowLevelWriteNErase(TRUE);
        }

        /* Go to next address */
        clockPulseSMC();
   80df8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80e48 <writeSMC+0xbc>
   80dfc:	e010      	b.n	80e20 <writeSMC+0x94>
            performLowLevelWriteNErase(FALSE);
   80dfe:	4658      	mov	r0, fp
   80e00:	47d0      	blx	sl
        masked_bit_to_write = (data_to_write[(current_written_bit>>3)] >> (7 - (current_written_bit & 0x0007))) & 0x01;
   80e02:	08e4      	lsrs	r4, r4, #3
   80e04:	f818 3004 	ldrb.w	r3, [r8, r4]
   80e08:	43ea      	mvns	r2, r5
   80e0a:	f002 0207 	and.w	r2, r2, #7
   80e0e:	4113      	asrs	r3, r2
        if (masked_bit_to_write == 0x00)
   80e10:	f013 0f01 	tst.w	r3, #1
   80e14:	d00c      	beq.n	80e30 <writeSMC+0xa4>
        clockPulseSMC();
   80e16:	47c8      	blx	r9
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80e18:	1c6b      	adds	r3, r5, #1
   80e1a:	42bd      	cmp	r5, r7
   80e1c:	d00b      	beq.n	80e36 <writeSMC+0xaa>
   80e1e:	461d      	mov	r5, r3
   80e20:	b2ac      	uxth	r4, r5
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
   80e22:	19a3      	adds	r3, r4, r6
   80e24:	f013 0f0f 	tst.w	r3, #15
   80e28:	d0e9      	beq.n	80dfe <writeSMC+0x72>
   80e2a:	2c00      	cmp	r4, #0
   80e2c:	d1e9      	bne.n	80e02 <writeSMC+0x76>
   80e2e:	e7e6      	b.n	80dfe <writeSMC+0x72>
            performLowLevelWriteNErase(TRUE);
   80e30:	2001      	movs	r0, #1
   80e32:	47d0      	blx	sl
   80e34:	e7ef      	b.n	80e16 <writeSMC+0x8a>
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80e36:	4b06      	ldr	r3, [pc, #24]	; (80e50 <writeSMC+0xc4>)
   80e38:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80e3a:	4b06      	ldr	r3, [pc, #24]	; (80e54 <writeSMC+0xc8>)
   80e3c:	4798      	blx	r3
}
   80e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e42:	bf00      	nop
   80e44:	00080b45 	.word	0x00080b45
   80e48:	00080a0d 	.word	0x00080a0d
   80e4c:	400e0c00 	.word	0x400e0c00
   80e50:	00080a61 	.word	0x00080a61
   80e54:	00080ad5 	.word	0x00080ad5
   80e58:	00080a7d 	.word	0x00080a7d

00080e5c <readSMC>:
*   \param  start_record_index      The index at which we start recording the answer
*   \param  data_to_receive        Pointer to the buffer
*   \return The buffer
*/
uint8_t* readSMC(uint8_t nb_bytes_total_read, uint8_t start_record_index, uint8_t* data_to_receive)
{
   80e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e60:	b083      	sub	sp, #12
   80e62:	4607      	mov	r7, r0
   80e64:	4688      	mov	r8, r1
   80e66:	4693      	mov	fp, r2
    uint8_t* return_val = data_to_receive;
    uint8_t i;

    /* Set PGM / RST signals for operation */
    clearPgmRstSignals();
   80e68:	4b11      	ldr	r3, [pc, #68]	; (80eb0 <readSMC+0x54>)
   80e6a:	4798      	blx	r3
	
	/* Read */
	uint32_t temp;
    for(i = 0; i < nb_bytes_total_read; i++)
   80e6c:	b1cf      	cbz	r7, 80ea2 <readSMC+0x46>
   80e6e:	465e      	mov	r6, fp
   80e70:	2500      	movs	r5, #0
    {
        /* Start transmission */
		usart_putchar(SCARD_USART, 0x00);
   80e72:	4c10      	ldr	r4, [pc, #64]	; (80eb4 <readSMC+0x58>)
   80e74:	f8df a044 	ldr.w	sl, [pc, #68]	; 80ebc <readSMC+0x60>
        /* Store data in buffer or discard it*/
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
				
		usart_getchar(SCARD_USART, &temp);
   80e78:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80ec0 <readSMC+0x64>
		usart_putchar(SCARD_USART, 0x00);
   80e7c:	2100      	movs	r1, #0
   80e7e:	4620      	mov	r0, r4
   80e80:	47d0      	blx	sl
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
   80e82:	6963      	ldr	r3, [r4, #20]
   80e84:	f013 0f02 	tst.w	r3, #2
   80e88:	d0fb      	beq.n	80e82 <readSMC+0x26>
		usart_getchar(SCARD_USART, &temp);
   80e8a:	a901      	add	r1, sp, #4
   80e8c:	4620      	mov	r0, r4
   80e8e:	47c8      	blx	r9
		
        if (i >= start_record_index)
   80e90:	45a8      	cmp	r8, r5
        {			
			*(data_to_receive++) = (uint8_t)temp;
   80e92:	bf9c      	itt	ls
   80e94:	9b01      	ldrls	r3, [sp, #4]
   80e96:	f806 3b01 	strbls.w	r3, [r6], #1
    for(i = 0; i < nb_bytes_total_read; i++)
   80e9a:	3501      	adds	r5, #1
   80e9c:	b2ed      	uxtb	r5, r5
   80e9e:	42af      	cmp	r7, r5
   80ea0:	d1ec      	bne.n	80e7c <readSMC+0x20>
        }
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80ea2:	4b05      	ldr	r3, [pc, #20]	; (80eb8 <readSMC+0x5c>)
   80ea4:	4798      	blx	r3

    return return_val;
}
   80ea6:	4658      	mov	r0, fp
   80ea8:	b003      	add	sp, #12
   80eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80eae:	bf00      	nop
   80eb0:	00080a45 	.word	0x00080a45
   80eb4:	40098000 	.word	0x40098000
   80eb8:	00080a61 	.word	0x00080a61
   80ebc:	00086e1d 	.word	0x00086e1d
   80ec0:	00086e47 	.word	0x00086e47

00080ec4 <firstDetectFunctionSMC>:
/*! \fn     firstDetectFunctionSMC(void)
*   \brief  functions performed once the smart card is detected
*   \return The detection result (see card_detect_return_t)
*/
RET_TYPE firstDetectFunctionSMC(void)
{
   80ec4:	b510      	push	{r4, lr}
   80ec6:	b082      	sub	sp, #8
    uint8_t data_buffer[2];
    uint16_t *data_buf16 = (uint16_t*)data_buffer;
    uint16_t temp_uint;

	/* Fuse pin low */
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ec8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ecc:	2004      	movs	r0, #4
   80ece:	4c27      	ldr	r4, [pc, #156]	; (80f6c <firstDetectFunctionSMC+0xa8>)
   80ed0:	47a0      	blx	r4

    /* Default state: PGM to 0 and RST to 1 */
	gpio_configure_pin(SCARD_PGM_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ed2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ed6:	2005      	movs	r0, #5
   80ed8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   80eda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ede:	2003      	movs	r0, #3
   80ee0:	47a0      	blx	r4
   80ee2:	4b23      	ldr	r3, [pc, #140]	; (80f70 <firstDetectFunctionSMC+0xac>)
   80ee4:	2220      	movs	r2, #32
   80ee6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ee8:	2208      	movs	r2, #8
   80eea:	631a      	str	r2, [r3, #48]	; 0x30
    scard_pgm_low();
	scard_rst_high();

    /* Activate SPI port */
    setSPIModeSMC();
   80eec:	4b21      	ldr	r3, [pc, #132]	; (80f74 <firstDetectFunctionSMC+0xb0>)
   80eee:	4798      	blx	r3
    
    /* Let the card come online */
    smartcardPowerDelay();
   80ef0:	4b21      	ldr	r3, [pc, #132]	; (80f78 <firstDetectFunctionSMC+0xb4>)
   80ef2:	4798      	blx	r3

    /* Check smart card FZ */
    readFabricationZone(data_buffer);
   80ef4:	a801      	add	r0, sp, #4
   80ef6:	4b21      	ldr	r3, [pc, #132]	; (80f7c <firstDetectFunctionSMC+0xb8>)
   80ef8:	4798      	blx	r3
    if ((swap16(*data_buf16)) != SMARTCARD_FABRICATION_ZONE)
   80efa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   80efe:	0213      	lsls	r3, r2, #8
   80f00:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80f04:	b21b      	sxth	r3, r3
   80f06:	f640 720f 	movw	r2, #3855	; 0xf0f
   80f0a:	4293      	cmp	r3, r2
   80f0c:	d002      	beq.n	80f14 <firstDetectFunctionSMC+0x50>
    {
        return RETURN_CARD_NDET;
   80f0e:	2001      	movs	r0, #1
        case 2: return RETURN_CARD_2_TRIES_LEFT;
        case 1: return RETURN_CARD_1_TRIES_LEFT;
        case 0: return RETURN_CARD_0_TRIES_LEFT;
        default: return RETURN_CARD_0_TRIES_LEFT;
    }
}
   80f10:	b002      	add	sp, #8
   80f12:	bd10      	pop	{r4, pc}
    readMemoryTestZone((uint8_t*)&temp_uint);
   80f14:	f10d 0002 	add.w	r0, sp, #2
   80f18:	4c19      	ldr	r4, [pc, #100]	; (80f80 <firstDetectFunctionSMC+0xbc>)
   80f1a:	47a0      	blx	r4
    temp_uint = temp_uint + 5;
   80f1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f20:	3305      	adds	r3, #5
   80f22:	f8ad 3002 	strh.w	r3, [sp, #2]
    writeMemoryTestZone((uint8_t*)&temp_uint);
   80f26:	f10d 0002 	add.w	r0, sp, #2
   80f2a:	4b16      	ldr	r3, [pc, #88]	; (80f84 <firstDetectFunctionSMC+0xc0>)
   80f2c:	4798      	blx	r3
    if (*(uint16_t*)readMemoryTestZone(data_buffer) != temp_uint)
   80f2e:	a801      	add	r0, sp, #4
   80f30:	47a0      	blx	r4
   80f32:	8802      	ldrh	r2, [r0, #0]
   80f34:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f38:	429a      	cmp	r2, r3
   80f3a:	d001      	beq.n	80f40 <firstDetectFunctionSMC+0x7c>
        return RETURN_CARD_TEST_PB;
   80f3c:	2002      	movs	r0, #2
   80f3e:	e7e7      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
    switch(getNumberOfSecurityCodeTriesLeft())
   80f40:	4b11      	ldr	r3, [pc, #68]	; (80f88 <firstDetectFunctionSMC+0xc4>)
   80f42:	4798      	blx	r3
   80f44:	2804      	cmp	r0, #4
   80f46:	d80c      	bhi.n	80f62 <firstDetectFunctionSMC+0x9e>
   80f48:	e8df f000 	tbb	[pc, r0]
   80f4c:	03050709 	.word	0x03050709
   80f50:	0d          	.byte	0x0d
   80f51:	00          	.byte	0x00
   80f52:	2013      	movs	r0, #19
   80f54:	e7dc      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 2: return RETURN_CARD_2_TRIES_LEFT;
   80f56:	2012      	movs	r0, #18
   80f58:	e7da      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 1: return RETURN_CARD_1_TRIES_LEFT;
   80f5a:	2011      	movs	r0, #17
   80f5c:	e7d8      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 0: return RETURN_CARD_0_TRIES_LEFT;
   80f5e:	2010      	movs	r0, #16
   80f60:	e7d6      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        default: return RETURN_CARD_0_TRIES_LEFT;
   80f62:	2010      	movs	r0, #16
   80f64:	e7d4      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 4: return RETURN_CARD_4_TRIES_LEFT;
   80f66:	2014      	movs	r0, #20
   80f68:	e7d2      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
   80f6a:	bf00      	nop
   80f6c:	0008516d 	.word	0x0008516d
   80f70:	400e0c00 	.word	0x400e0c00
   80f74:	00080ad5 	.word	0x00080ad5
   80f78:	000809f9 	.word	0x000809f9
   80f7c:	00080791 	.word	0x00080791
   80f80:	000807d5 	.word	0x000807d5
   80f84:	000807ed 	.word	0x000807ed
   80f88:	000809b9 	.word	0x000809b9

00080f8c <removeFunctionSMC>:

/*! \fn     removeFunctionSMC(void)
*   \brief  functions performed once the smart card is removed
*/
void removeFunctionSMC(void)
{
   80f8c:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80f8e:	4b12      	ldr	r3, [pc, #72]	; (80fd8 <removeFunctionSMC+0x4c>)
   80f90:	2220      	movs	r2, #32
   80f92:	635a      	str	r2, [r3, #52]	; 0x34
    /* Setup all output pins as tri-state */
    scard_pgm_low();
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80f94:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80f98:	2004      	movs	r0, #4
   80f9a:	4c10      	ldr	r4, [pc, #64]	; (80fdc <removeFunctionSMC+0x50>)
   80f9c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_AUX2_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80f9e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fa2:	2005      	movs	r0, #5
   80fa4:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fa6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80faa:	2003      	movs	r0, #3
   80fac:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fb2:	2016      	movs	r0, #22
   80fb4:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fb6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fba:	2017      	movs	r0, #23
   80fbc:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fbe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fc2:	2019      	movs	r0, #25
   80fc4:	47a0      	blx	r4
	
    /* Deactivate port */
	usart_disable_rx(SCARD_USART);
   80fc6:	4c06      	ldr	r4, [pc, #24]	; (80fe0 <removeFunctionSMC+0x54>)
   80fc8:	4620      	mov	r0, r4
   80fca:	4b06      	ldr	r3, [pc, #24]	; (80fe4 <removeFunctionSMC+0x58>)
   80fcc:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80fce:	4620      	mov	r0, r4
   80fd0:	4b05      	ldr	r3, [pc, #20]	; (80fe8 <removeFunctionSMC+0x5c>)
   80fd2:	4798      	blx	r3
}
   80fd4:	bd10      	pop	{r4, pc}
   80fd6:	bf00      	nop
   80fd8:	400e0c00 	.word	0x400e0c00
   80fdc:	0008516d 	.word	0x0008516d
   80fe0:	40098000 	.word	0x40098000
   80fe4:	00086dd3 	.word	0x00086dd3
   80fe8:	00086dc3 	.word	0x00086dc3

00080fec <initPortSMC>:

/*! \fn     initPortSMC(void)
*   \brief  Initialize smart card port
*/
void initPortSMC(void)
{
   80fec:	b508      	push	{r3, lr}
    /* Setup card detection input with pull-up */
	gpio_configure_pin(SCARD_PRESENT_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT | PIO_PULLUP));
   80fee:	4904      	ldr	r1, [pc, #16]	; (81000 <initPortSMC+0x14>)
   80ff0:	2002      	movs	r0, #2
   80ff2:	4b04      	ldr	r3, [pc, #16]	; (81004 <initPortSMC+0x18>)
   80ff4:	4798      	blx	r3
        PORT_SPI_NATIVE &= ~(1 << MISO_SPI_NATIVE);
        PORT_SPI_NATIVE |= (1 << SS_SPI_NATIVE);
    #endif

    /* Set all output pins as tri-state */
    removeFunctionSMC();
   80ff6:	4b04      	ldr	r3, [pc, #16]	; (81008 <initPortSMC+0x1c>)
   80ff8:	4798      	blx	r3
	setPgmRstSignals();
   80ffa:	4b04      	ldr	r3, [pc, #16]	; (8100c <initPortSMC+0x20>)
   80ffc:	4798      	blx	r3
}
   80ffe:	bd08      	pop	{r3, pc}
   81000:	28000001 	.word	0x28000001
   81004:	0008516d 	.word	0x0008516d
   81008:	00080f8d 	.word	0x00080f8d
   8100c:	00080a61 	.word	0x00080a61

00081010 <compareBit>:


// Greg's function
// Walk up to the security code register, enter a bit in the right place, then reset.
void compareBit(uint16_t bit, uint16_t value)
{
   81010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81012:	4605      	mov	r5, r0
   81014:	460f      	mov	r7, r1
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   81016:	4b18      	ldr	r3, [pc, #96]	; (81078 <compareBit+0x68>)
   81018:	4798      	blx	r3

    /* Get to the SC */
    for(i = 0; i < 80 + bit; i++)
   8101a:	354f      	adds	r5, #79	; 0x4f
   8101c:	2400      	movs	r4, #0
		invertedClockPulseSMC();
   8101e:	4e17      	ldr	r6, [pc, #92]	; (8107c <compareBit+0x6c>)
   81020:	47b0      	blx	r6
    for(i = 0; i < 80 + bit; i++)
   81022:	3401      	adds	r4, #1
   81024:	b2a4      	uxth	r4, r4
   81026:	42ac      	cmp	r4, r5
   81028:	ddfa      	ble.n	81020 <compareBit+0x10>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8102a:	4b15      	ldr	r3, [pc, #84]	; (81080 <compareBit+0x70>)
   8102c:	2210      	movs	r2, #16
   8102e:	631a      	str	r2, [r3, #48]	; 0x30

    scard_aux1_high();

    // Clock is at high level now, as input must be switched during this time */
    // Enter test value
    smartcardHPulseDelay();
   81030:	4b14      	ldr	r3, [pc, #80]	; (81084 <compareBit+0x74>)
   81032:	4798      	blx	r3
	if (value)
   81034:	b1df      	cbz	r7, 8106e <compareBit+0x5e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81036:	4b12      	ldr	r3, [pc, #72]	; (81080 <compareBit+0x70>)
   81038:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8103c:	635a      	str	r2, [r3, #52]	; 0x34
    }
    else
    {
	    scard_io_high();
    }
    smartcardHPulseDelay();
   8103e:	4c11      	ldr	r4, [pc, #68]	; (81084 <compareBit+0x74>)
   81040:	47a0      	blx	r4
    invertedClockPulseSMC();
   81042:	4b0e      	ldr	r3, [pc, #56]	; (8107c <compareBit+0x6c>)
   81044:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81046:	4d0e      	ldr	r5, [pc, #56]	; (81080 <compareBit+0x70>)
   81048:	2308      	movs	r3, #8
   8104a:	632b      	str	r3, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8104c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   81050:	636b      	str	r3, [r5, #52]	; 0x34
	// Bring reset high
	scard_rst_high();

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   81052:	47a0      	blx	r4
    smartcardHPulseDelay();
   81054:	47a0      	blx	r4
   81056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   8105a:	636b      	str	r3, [r5, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();
   8105c:	47a0      	blx	r4
    smartcardHPulseDelay();
   8105e:	47a0      	blx	r4
   81060:	2310      	movs	r3, #16
   81062:	636b      	str	r3, [r5, #52]	; 0x34
    
	// Cleanup
    scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   81064:	4b08      	ldr	r3, [pc, #32]	; (81088 <compareBit+0x78>)
   81066:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   81068:	4b08      	ldr	r3, [pc, #32]	; (8108c <compareBit+0x7c>)
   8106a:	4798      	blx	r3

    return;	
   8106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8106e:	4b04      	ldr	r3, [pc, #16]	; (81080 <compareBit+0x70>)
   81070:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81074:	631a      	str	r2, [r3, #48]	; 0x30
   81076:	e7e2      	b.n	8103e <compareBit+0x2e>
   81078:	00080b45 	.word	0x00080b45
   8107c:	00080a29 	.word	0x00080a29
   81080:	400e0c00 	.word	0x400e0c00
   81084:	000809e9 	.word	0x000809e9
   81088:	00080a61 	.word	0x00080a61
   8108c:	00080ad5 	.word	0x00080ad5

00081090 <iso7816_update_crc>:
 * \param crc CRC result.
 *
 * \return CRC value.
 */
static uint16_t iso7816_update_crc(uint8_t data, uint16_t crc)
{
   81090:	b410      	push	{r4}
	uint8_t idx;
	uint16_t tmp = (uint16_t)data << 8;
   81092:	0200      	lsls	r0, r0, #8
   81094:	2308      	movs	r3, #8

	for (idx = 0; idx < 8; idx++) {
		if ((crc ^ tmp) & 0x8000) {
			crc <<= 1;
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   81096:	f241 0421 	movw	r4, #4129	; 0x1021
		if ((crc ^ tmp) & 0x8000) {
   8109a:	ea81 0200 	eor.w	r2, r1, r0
   8109e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
			crc <<= 1;
   810a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   810a6:	b289      	uxth	r1, r1
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   810a8:	bf18      	it	ne
   810aa:	4061      	eorne	r1, r4
		} else {
			crc <<= 1;
		}

		tmp <<= 1;
   810ac:	0040      	lsls	r0, r0, #1
   810ae:	b280      	uxth	r0, r0
   810b0:	3b01      	subs	r3, #1
	for (idx = 0; idx < 8; idx++) {
   810b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   810b6:	d1f0      	bne.n	8109a <iso7816_update_crc+0xa>
	}

	return crc;
}
   810b8:	4608      	mov	r0, r1
   810ba:	bc10      	pop	{r4}
   810bc:	4770      	bx	lr
	...

000810c0 <iso7816_icc_power_off>:
{
   810c0:	b508      	push	{r3, lr}
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   810c2:	4b02      	ldr	r3, [pc, #8]	; (810cc <iso7816_icc_power_off+0xc>)
   810c4:	6818      	ldr	r0, [r3, #0]
   810c6:	4b02      	ldr	r3, [pc, #8]	; (810d0 <iso7816_icc_power_off+0x10>)
   810c8:	4798      	blx	r3
   810ca:	bd08      	pop	{r3, pc}
   810cc:	200023ec 	.word	0x200023ec
   810d0:	00085151 	.word	0x00085151

000810d4 <iso7816_get_char>:
 * \param p_char_received Pointer for store the received char.
 *
 * \return 0xff: if timeout else status of US_CSR.
 */
uint32_t iso7816_get_char(Usart* p_usart, uint8_t *p_char_received)
{
   810d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   810d8:	b083      	sub	sp, #12
   810da:	4605      	mov	r5, r0
   810dc:	4689      	mov	r9, r1
	uint32_t ul_data;
	uint32_t ul_status;
	uint32_t ul_timeout = 0;

	if (gs_uc_state == USART_SEND) {		
   810de:	4b1d      	ldr	r3, [pc, #116]	; (81154 <iso7816_get_char+0x80>)
   810e0:	781b      	ldrb	r3, [r3, #0]
   810e2:	b943      	cbnz	r3, 810f6 <iso7816_get_char+0x22>
		while ((usart_get_status(p_usart) & US_CSR_TXEMPTY) ==
   810e4:	4c1c      	ldr	r4, [pc, #112]	; (81158 <iso7816_get_char+0x84>)
   810e6:	4628      	mov	r0, r5
   810e8:	47a0      	blx	r4
   810ea:	f410 7f00 	tst.w	r0, #512	; 0x200
   810ee:	d0fa      	beq.n	810e6 <iso7816_get_char+0x12>
		/*
		usart_reset_status(p_usart);
		usart_reset_iterations(p_usart);
		usart_reset_nack(p_usart);
		*/
		gs_uc_state = USART_RCV;
   810f0:	2201      	movs	r2, #1
   810f2:	4b18      	ldr	r3, [pc, #96]	; (81154 <iso7816_get_char+0x80>)
   810f4:	701a      	strb	r2, [r3, #0]
{
   810f6:	2400      	movs	r4, #0
		//iso7816_icc_power_off();
		//iso7816_icc_power_on();	
	}

	/* Wait USART ready for reception. */
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   810f8:	4e17      	ldr	r6, [pc, #92]	; (81158 <iso7816_get_char+0x84>)
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   810fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81168 <iso7816_get_char+0x94>
   810fe:	4f17      	ldr	r7, [pc, #92]	; (8115c <iso7816_get_char+0x88>)
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   81100:	4628      	mov	r0, r5
   81102:	47b0      	blx	r6
   81104:	f010 0f01 	tst.w	r0, #1
   81108:	d10d      	bne.n	81126 <iso7816_get_char+0x52>
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   8110a:	1c61      	adds	r1, r4, #1
   8110c:	f8d8 3000 	ldr.w	r3, [r8]
   81110:	fba7 2303 	umull	r2, r3, r7, r3
   81114:	0c9b      	lsrs	r3, r3, #18
   81116:	f642 62e0 	movw	r2, #12000	; 0x2ee0
   8111a:	fb02 f303 	mul.w	r3, r2, r3
   8111e:	429c      	cmp	r4, r3
   81120:	d813      	bhi.n	8114a <iso7816_get_char+0x76>
   81122:	460c      	mov	r4, r1
   81124:	e7ec      	b.n	81100 <iso7816_get_char+0x2c>
		}
	}

	/* At least one complete character has been received and US_RHR has not
	 * yet been read. */
	usart_read(p_usart, &ul_data);
   81126:	a901      	add	r1, sp, #4
   81128:	4628      	mov	r0, r5
   8112a:	4b0d      	ldr	r3, [pc, #52]	; (81160 <iso7816_get_char+0x8c>)
   8112c:	4798      	blx	r3
	/* ISO7816 only has 8 bits data. */
	*p_char_received = 0xFF & ul_data;
   8112e:	9b01      	ldr	r3, [sp, #4]
   81130:	f889 3000 	strb.w	r3, [r9]

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   81134:	4628      	mov	r0, r5
   81136:	4b08      	ldr	r3, [pc, #32]	; (81158 <iso7816_get_char+0x84>)
   81138:	4798      	blx	r3
   8113a:	f242 54e0 	movw	r4, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   8113e:	4004      	ands	r4, r0
   81140:	d004      	beq.n	8114c <iso7816_get_char+0x78>
		usart_reset_status(p_usart);
   81142:	4628      	mov	r0, r5
   81144:	4b07      	ldr	r3, [pc, #28]	; (81164 <iso7816_get_char+0x90>)
   81146:	4798      	blx	r3
   81148:	e000      	b.n	8114c <iso7816_get_char+0x78>
			return (0xff);
   8114a:	24ff      	movs	r4, #255	; 0xff
	}

	/* Return status. */
	return (ul_status);
}
   8114c:	4620      	mov	r0, r4
   8114e:	b003      	add	sp, #12
   81150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81154:	200002f0 	.word	0x200002f0
   81158:	00086de5 	.word	0x00086de5
   8115c:	431bde83 	.word	0x431bde83
   81160:	00086e2f 	.word	0x00086e2f
   81164:	00086de9 	.word	0x00086de9
   81168:	200023e8 	.word	0x200023e8

0008116c <iso7816_send_char>:
 * \param uc_char Char to be sent.
 *
 * \return status of US_CSR.
 */
uint32_t iso7816_send_char(Usart* p_usart, uint8_t uc_char)
{
   8116c:	b570      	push	{r4, r5, r6, lr}
   8116e:	4604      	mov	r4, r0
   81170:	460e      	mov	r6, r1
	uint32_t ul_status;

	if (USART_RCV == gs_uc_state) {
   81172:	4b14      	ldr	r3, [pc, #80]	; (811c4 <iso7816_send_char+0x58>)
   81174:	781b      	ldrb	r3, [r3, #0]
   81176:	2b01      	cmp	r3, #1
   81178:	d013      	beq.n	811a2 <iso7816_send_char+0x36>
		usart_reset_nack(p_usart);
		gs_uc_state = USART_SEND;
	}

	/* Wait USART ready for transmit. */
	while ((usart_get_status(p_usart) & US_CSR_TXRDY) == 0) {
   8117a:	4d13      	ldr	r5, [pc, #76]	; (811c8 <iso7816_send_char+0x5c>)
   8117c:	4620      	mov	r0, r4
   8117e:	47a8      	blx	r5
   81180:	f010 0f02 	tst.w	r0, #2
   81184:	d0fa      	beq.n	8117c <iso7816_send_char+0x10>
	}

	/* There is no character in the US_THR, transmit a char. */
	usart_write(p_usart, uc_char);
   81186:	4631      	mov	r1, r6
   81188:	4620      	mov	r0, r4
   8118a:	4b10      	ldr	r3, [pc, #64]	; (811cc <iso7816_send_char+0x60>)
   8118c:	4798      	blx	r3

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   8118e:	4620      	mov	r0, r4
   81190:	4b0d      	ldr	r3, [pc, #52]	; (811c8 <iso7816_send_char+0x5c>)
   81192:	4798      	blx	r3
   81194:	f242 53e0 	movw	r3, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   81198:	ea10 0503 	ands.w	r5, r0, r3
   8119c:	d10d      	bne.n	811ba <iso7816_send_char+0x4e>
		usart_reset_status(p_usart);
	}

	/* Return status. */
	return (ul_status);
}
   8119e:	4628      	mov	r0, r5
   811a0:	bd70      	pop	{r4, r5, r6, pc}
		usart_reset_status(p_usart);
   811a2:	4b0b      	ldr	r3, [pc, #44]	; (811d0 <iso7816_send_char+0x64>)
   811a4:	4798      	blx	r3
		usart_reset_iterations(p_usart);
   811a6:	4620      	mov	r0, r4
   811a8:	4b0a      	ldr	r3, [pc, #40]	; (811d4 <iso7816_send_char+0x68>)
   811aa:	4798      	blx	r3
		usart_reset_nack(p_usart);
   811ac:	4620      	mov	r0, r4
   811ae:	4b0a      	ldr	r3, [pc, #40]	; (811d8 <iso7816_send_char+0x6c>)
   811b0:	4798      	blx	r3
		gs_uc_state = USART_SEND;
   811b2:	2200      	movs	r2, #0
   811b4:	4b03      	ldr	r3, [pc, #12]	; (811c4 <iso7816_send_char+0x58>)
   811b6:	701a      	strb	r2, [r3, #0]
   811b8:	e7df      	b.n	8117a <iso7816_send_char+0xe>
		usart_reset_status(p_usart);
   811ba:	4620      	mov	r0, r4
   811bc:	4b04      	ldr	r3, [pc, #16]	; (811d0 <iso7816_send_char+0x64>)
   811be:	4798      	blx	r3
	return (ul_status);
   811c0:	e7ed      	b.n	8119e <iso7816_send_char+0x32>
   811c2:	bf00      	nop
   811c4:	200002f0 	.word	0x200002f0
   811c8:	00086de5 	.word	0x00086de5
   811cc:	00086e09 	.word	0x00086e09
   811d0:	00086de9 	.word	0x00086de9
   811d4:	00086df1 	.word	0x00086df1
   811d8:	00086df9 	.word	0x00086df9

000811dc <iso7816_xfr_block_apdu_t0>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t0(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   811dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811e0:	b087      	sub	sp, #28
   811e2:	4607      	mov	r7, r0
   811e4:	9001      	str	r0, [sp, #4]
   811e6:	4689      	mov	r9, r1
   811e8:	4692      	mov	sl, r2
   811ea:	461c      	mov	r4, r3
	uint8_t uc_proc_byte;
	uint8_t uc_cmd_case;
	
	uint32_t status = 0;

	status |= iso7816_send_char(p_usart, p_apdu[0]); /* CLA */
   811ec:	7809      	ldrb	r1, [r1, #0]
   811ee:	4e6e      	ldr	r6, [pc, #440]	; (813a8 <iso7816_xfr_block_apdu_t0+0x1cc>)
   811f0:	47b0      	blx	r6
   811f2:	4605      	mov	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[1]); /* INS */	
   811f4:	f899 1001 	ldrb.w	r1, [r9, #1]
   811f8:	4638      	mov	r0, r7
   811fa:	47b0      	blx	r6
   811fc:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[2]); /* P1 */
   811fe:	f899 1002 	ldrb.w	r1, [r9, #2]
   81202:	4638      	mov	r0, r7
   81204:	47b0      	blx	r6
   81206:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[3]); /* P2 */
   81208:	f899 1003 	ldrb.w	r1, [r9, #3]
   8120c:	4638      	mov	r0, r7
   8120e:	47b0      	blx	r6
   81210:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[4]); /* P3 */
   81212:	f899 1004 	ldrb.w	r1, [r9, #4]
   81216:	4638      	mov	r0, r7
   81218:	47b0      	blx	r6
   8121a:	4305      	orrs	r5, r0

	/* Handle the four structures of command APDU. */
	us_apdu_index = 5;

	/* Check transfer cases */
	if (us_length == 4) {
   8121c:	2c04      	cmp	r4, #4
   8121e:	d02c      	beq.n	8127a <iso7816_xfr_block_apdu_t0+0x9e>
		uc_cmd_case = CASE1;
		us_ne_nc = 0;
	} else if (us_length == 5) {
   81220:	2c05      	cmp	r4, #5
   81222:	d010      	beq.n	81246 <iso7816_xfr_block_apdu_t0+0x6a>
		uc_cmd_case = CASE2;
		us_ne_nc = p_apdu[4];
		if (us_ne_nc == 0) {
			us_ne_nc = 256;
		}
	} else if (us_length == 6) {
   81224:	2c06      	cmp	r4, #6
   81226:	d016      	beq.n	81256 <iso7816_xfr_block_apdu_t0+0x7a>
		us_ne_nc = p_apdu[4];
		uc_cmd_case = CASE3;
	} else if (us_length == 7) {
   81228:	2c07      	cmp	r4, #7
   8122a:	d019      	beq.n	81260 <iso7816_xfr_block_apdu_t0+0x84>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
		} else {
			uc_cmd_case = CASE3;
		}
	} else {
		us_ne_nc = p_apdu[4];
   8122c:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81230:	bb94      	cbnz	r4, 81298 <iso7816_xfr_block_apdu_t0+0xbc>
			uc_cmd_case = CASE3;
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81232:	f899 3005 	ldrb.w	r3, [r9, #5]
   81236:	f899 4006 	ldrb.w	r4, [r9, #6]
   8123a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   8123e:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE3;
   81240:	f04f 0803 	mov.w	r8, #3
   81244:	e01c      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81246:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   8124a:	b9fc      	cbnz	r4, 8128c <iso7816_xfr_block_apdu_t0+0xb0>
		uc_cmd_case = CASE2;
   8124c:	f04f 0802 	mov.w	r8, #2
			us_ne_nc = 256;
   81250:	f44f 7480 	mov.w	r4, #256	; 0x100
   81254:	e014      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81256:	f899 4004 	ldrb.w	r4, [r9, #4]
		uc_cmd_case = CASE3;
   8125a:	f04f 0803 	mov.w	r8, #3
   8125e:	e00f      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81260:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81264:	b9ac      	cbnz	r4, 81292 <iso7816_xfr_block_apdu_t0+0xb6>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81266:	f899 3005 	ldrb.w	r3, [r9, #5]
   8126a:	f899 4006 	ldrb.w	r4, [r9, #6]
   8126e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   81272:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE2;
   81274:	f04f 0802 	mov.w	r8, #2
   81278:	e002      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		uc_cmd_case = CASE1;
   8127a:	f04f 0801 	mov.w	r8, #1
		us_ne_nc = 0;
   8127e:	2400      	movs	r4, #0
		uc_cmd_case = CASE2;
   81280:	2300      	movs	r3, #0
   81282:	9302      	str	r3, [sp, #8]
   81284:	9303      	str	r3, [sp, #12]
   81286:	2705      	movs	r7, #5
		}
	}

	/* Handle procedure bytes. */
	do {
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   81288:	4e48      	ldr	r6, [pc, #288]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   8128a:	e056      	b.n	8133a <iso7816_xfr_block_apdu_t0+0x15e>
		uc_cmd_case = CASE2;
   8128c:	f04f 0802 	mov.w	r8, #2
   81290:	e7f6      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   81292:	f04f 0803 	mov.w	r8, #3
   81296:	e7f3      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   81298:	f04f 0803 	mov.w	r8, #3
   8129c:	e7f0      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
				((uc_proc_byte & 0xF0) == 0x90)) {
			uc_sw1 = 1;
		}
		/* Handle INS. */
		else if (p_apdu[1] == uc_proc_byte) {
			if (uc_cmd_case == CASE2) {
   8129e:	f1b8 0f02 	cmp.w	r8, #2
   812a2:	d026      	beq.n	812f2 <iso7816_xfr_block_apdu_t0+0x116>
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
				} while (0 != --us_ne_nc);
			} else {
				/* Send data. */
				do {
					status |= iso7816_send_char(p_usart,
   812a4:	f8df b100 	ldr.w	fp, [pc, #256]	; 813a8 <iso7816_xfr_block_apdu_t0+0x1cc>
							p_apdu[us_apdu_index++]);
   812a8:	1c7e      	adds	r6, r7, #1
   812aa:	b2b6      	uxth	r6, r6
					status |= iso7816_send_char(p_usart,
   812ac:	f819 1007 	ldrb.w	r1, [r9, r7]
   812b0:	9801      	ldr	r0, [sp, #4]
   812b2:	47d8      	blx	fp
   812b4:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   812b6:	3c01      	subs	r4, #1
   812b8:	b2a4      	uxth	r4, r4
							p_apdu[us_apdu_index++]);
   812ba:	4637      	mov	r7, r6
				} while (0 != --us_ne_nc);
   812bc:	2c00      	cmp	r4, #0
   812be:	d1f3      	bne.n	812a8 <iso7816_xfr_block_apdu_t0+0xcc>
			break;
		}
	} while (us_ne_nc != 0);

	/* Status Bytes. */
	if (uc_sw1 == 0) {
   812c0:	9b02      	ldr	r3, [sp, #8]
   812c2:	2b00      	cmp	r3, #0
   812c4:	d065      	beq.n	81392 <iso7816_xfr_block_apdu_t0+0x1b6>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
	} else {
		p_message[us_message_index++] = uc_proc_byte;
   812c6:	9a03      	ldr	r2, [sp, #12]
   812c8:	1c54      	adds	r4, r2, #1
   812ca:	b2a4      	uxth	r4, r4
   812cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   812d0:	f80a 3002 	strb.w	r3, [sl, r2]
	}

	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   812d4:	eb0a 0104 	add.w	r1, sl, r4
   812d8:	9801      	ldr	r0, [sp, #4]
   812da:	4b34      	ldr	r3, [pc, #208]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   812dc:	4798      	blx	r3
	
	printf("%x\n", (unsigned int)status);
   812de:	ea45 0100 	orr.w	r1, r5, r0
   812e2:	4833      	ldr	r0, [pc, #204]	; (813b0 <iso7816_xfr_block_apdu_t0+0x1d4>)
   812e4:	4b33      	ldr	r3, [pc, #204]	; (813b4 <iso7816_xfr_block_apdu_t0+0x1d8>)
   812e6:	4798      	blx	r3
	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   812e8:	1c60      	adds	r0, r4, #1

	return (us_message_index);
   812ea:	b280      	uxth	r0, r0
}
   812ec:	b007      	add	sp, #28
   812ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812f2:	9903      	ldr	r1, [sp, #12]
   812f4:	4626      	mov	r6, r4
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   812f6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 813ac <iso7816_xfr_block_apdu_t0+0x1d0>
   812fa:	1c4f      	adds	r7, r1, #1
   812fc:	b2bf      	uxth	r7, r7
   812fe:	4451      	add	r1, sl
   81300:	9801      	ldr	r0, [sp, #4]
   81302:	47c8      	blx	r9
   81304:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   81306:	3e01      	subs	r6, #1
   81308:	b2b6      	uxth	r6, r6
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8130a:	4639      	mov	r1, r7
				} while (0 != --us_ne_nc);
   8130c:	2e00      	cmp	r6, #0
   8130e:	d1f4      	bne.n	812fa <iso7816_xfr_block_apdu_t0+0x11e>
   81310:	9b03      	ldr	r3, [sp, #12]
   81312:	441c      	add	r4, r3
   81314:	b2a3      	uxth	r3, r4
   81316:	9303      	str	r3, [sp, #12]
   81318:	e7d2      	b.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
				status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8131a:	9a03      	ldr	r2, [sp, #12]
   8131c:	f102 0b01 	add.w	fp, r2, #1
   81320:	fa1f fb8b 	uxth.w	fp, fp
   81324:	eb0a 0102 	add.w	r1, sl, r2
   81328:	9801      	ldr	r0, [sp, #4]
   8132a:	47b0      	blx	r6
   8132c:	4305      	orrs	r5, r0
   8132e:	f8cd b00c 	str.w	fp, [sp, #12]
			us_ne_nc--;
   81332:	3c01      	subs	r4, #1
   81334:	b2a4      	uxth	r4, r4
	} while (us_ne_nc != 0);
   81336:	2c00      	cmp	r4, #0
   81338:	d0c2      	beq.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   8133a:	f10d 0117 	add.w	r1, sp, #23
   8133e:	9801      	ldr	r0, [sp, #4]
   81340:	47b0      	blx	r6
   81342:	4305      	orrs	r5, r0
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81344:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if (ISO_NULL_VAL == uc_proc_byte) {
   81348:	2b60      	cmp	r3, #96	; 0x60
   8134a:	d0f4      	beq.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
   8134c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
		else if (((uc_proc_byte & 0xF0) == 0x60) ||
   81350:	2a60      	cmp	r2, #96	; 0x60
   81352:	d018      	beq.n	81386 <iso7816_xfr_block_apdu_t0+0x1aa>
   81354:	2a90      	cmp	r2, #144	; 0x90
   81356:	d019      	beq.n	8138c <iso7816_xfr_block_apdu_t0+0x1b0>
		else if (p_apdu[1] == uc_proc_byte) {
   81358:	f899 2001 	ldrb.w	r2, [r9, #1]
   8135c:	4293      	cmp	r3, r2
   8135e:	d09e      	beq.n	8129e <iso7816_xfr_block_apdu_t0+0xc2>
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81360:	43db      	mvns	r3, r3
		else if (p_apdu[1] == uc_proc_byte_x) {
   81362:	b2db      	uxtb	r3, r3
   81364:	4293      	cmp	r3, r2
   81366:	d1ab      	bne.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
			if (uc_cmd_case == CASE2) {
   81368:	f1b8 0f02 	cmp.w	r8, #2
   8136c:	d0d5      	beq.n	8131a <iso7816_xfr_block_apdu_t0+0x13e>
				status |= iso7816_send_char(p_usart, p_apdu[us_apdu_index++]);
   8136e:	f107 0b01 	add.w	fp, r7, #1
   81372:	fa1f fb8b 	uxth.w	fp, fp
   81376:	f819 1007 	ldrb.w	r1, [r9, r7]
   8137a:	9801      	ldr	r0, [sp, #4]
   8137c:	4b0a      	ldr	r3, [pc, #40]	; (813a8 <iso7816_xfr_block_apdu_t0+0x1cc>)
   8137e:	4798      	blx	r3
   81380:	4305      	orrs	r5, r0
   81382:	465f      	mov	r7, fp
   81384:	e7d5      	b.n	81332 <iso7816_xfr_block_apdu_t0+0x156>
			uc_sw1 = 1;
   81386:	2301      	movs	r3, #1
   81388:	9302      	str	r3, [sp, #8]
   8138a:	e7d4      	b.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
   8138c:	2301      	movs	r3, #1
   8138e:	9302      	str	r3, [sp, #8]
   81390:	e7d1      	b.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
   81392:	9b03      	ldr	r3, [sp, #12]
   81394:	1c5c      	adds	r4, r3, #1
   81396:	b2a4      	uxth	r4, r4
   81398:	eb0a 0103 	add.w	r1, sl, r3
   8139c:	9801      	ldr	r0, [sp, #4]
   8139e:	4b03      	ldr	r3, [pc, #12]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   813a0:	4798      	blx	r3
   813a2:	4305      	orrs	r5, r0
   813a4:	e796      	b.n	812d4 <iso7816_xfr_block_apdu_t0+0xf8>
   813a6:	bf00      	nop
   813a8:	0008116d 	.word	0x0008116d
   813ac:	000810d5 	.word	0x000810d5
   813b0:	0008e3a0 	.word	0x0008e3a0
   813b4:	0008780d 	.word	0x0008780d

000813b8 <iso7816_xfr_block_apdu_t1>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t1(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   813b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index;
	uint16_t edc;
	uint32_t rx_len;
	uint16_t us_message_index = 0;

	if (us_length <= 0) {
   813bc:	2b00      	cmp	r3, #0
   813be:	f000 80a4 	beq.w	8150a <iso7816_xfr_block_apdu_t1+0x152>
   813c2:	4690      	mov	r8, r2
   813c4:	460d      	mov	r5, r1
   813c6:	4683      	mov	fp, r0
		return false;
	}

	if (tc3 & 0x1) {
   813c8:	4b72      	ldr	r3, [pc, #456]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   813ca:	781e      	ldrb	r6, [r3, #0]
   813cc:	f006 0a01 	and.w	sl, r6, #1
   813d0:	f346 0600 	sbfx	r6, r6, #0, #1
   813d4:	b2b6      	uxth	r6, r6
	} else {
		edc = 0;
	}

	/* Update the edc for the data to be transmitted */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   813d6:	f891 9002 	ldrb.w	r9, [r1, #2]
   813da:	f109 0903 	add.w	r9, r9, #3
   813de:	2400      	movs	r4, #0
		*edc = iso7816_update_crc(data, *edc);
   813e0:	4f6d      	ldr	r7, [pc, #436]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   813e2:	e006      	b.n	813f2 <iso7816_xfr_block_apdu_t1+0x3a>
   813e4:	4631      	mov	r1, r6
   813e6:	47b8      	blx	r7
   813e8:	4606      	mov	r6, r0
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   813ea:	3401      	adds	r4, #1
   813ec:	b2e4      	uxtb	r4, r4
   813ee:	454c      	cmp	r4, r9
   813f0:	da06      	bge.n	81400 <iso7816_xfr_block_apdu_t1+0x48>
		iso7816_update_edc(p_apdu[index], &edc);
   813f2:	5d28      	ldrb	r0, [r5, r4]
	if (tc3 & 0x1) {  /* type = CRC */
   813f4:	f1ba 0f00 	cmp.w	sl, #0
   813f8:	d1f4      	bne.n	813e4 <iso7816_xfr_block_apdu_t1+0x2c>
		*edc = *edc ^ data;
   813fa:	4046      	eors	r6, r0
   813fc:	b2b6      	uxth	r6, r6
   813fe:	e7f4      	b.n	813ea <iso7816_xfr_block_apdu_t1+0x32>
   81400:	2400      	movs	r4, #0
	}

	/* Transmit Data Bytes */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
		iso7816_send_char(p_usart, p_apdu[index]);
   81402:	4f66      	ldr	r7, [pc, #408]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   81404:	5d29      	ldrb	r1, [r5, r4]
   81406:	4658      	mov	r0, fp
   81408:	47b8      	blx	r7
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   8140a:	3401      	adds	r4, #1
   8140c:	b2e4      	uxtb	r4, r4
   8140e:	78ab      	ldrb	r3, [r5, #2]
   81410:	3303      	adds	r3, #3
   81412:	429c      	cmp	r4, r3
   81414:	dbf6      	blt.n	81404 <iso7816_xfr_block_apdu_t1+0x4c>
	}

	/* Transmit EDC */
	iso7816_send_char(p_usart, (uint8_t)edc);
   81416:	b2f1      	uxtb	r1, r6
   81418:	4658      	mov	r0, fp
   8141a:	4b60      	ldr	r3, [pc, #384]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   8141c:	4798      	blx	r3

	if (tc3 & 0x1) {
   8141e:	4b5d      	ldr	r3, [pc, #372]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81420:	781b      	ldrb	r3, [r3, #0]
   81422:	f013 0f01 	tst.w	r3, #1
   81426:	d14f      	bne.n	814c8 <iso7816_xfr_block_apdu_t1+0x110>
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
	}

	if (iso7816_get_char(p_usart, &p_message[0]) == 0xff) {
   81428:	4641      	mov	r1, r8
   8142a:	4658      	mov	r0, fp
   8142c:	4b5c      	ldr	r3, [pc, #368]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8142e:	4798      	blx	r3
   81430:	28ff      	cmp	r0, #255	; 0xff
   81432:	d06d      	beq.n	81510 <iso7816_xfr_block_apdu_t1+0x158>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[1]) == 0xff) {
   81434:	f108 0101 	add.w	r1, r8, #1
   81438:	4658      	mov	r0, fp
   8143a:	4b59      	ldr	r3, [pc, #356]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8143c:	4798      	blx	r3
   8143e:	28ff      	cmp	r0, #255	; 0xff
   81440:	d069      	beq.n	81516 <iso7816_xfr_block_apdu_t1+0x15e>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[2]) == 0xff) {
   81442:	f108 0102 	add.w	r1, r8, #2
   81446:	4658      	mov	r0, fp
   81448:	4b55      	ldr	r3, [pc, #340]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8144a:	4798      	blx	r3
   8144c:	28ff      	cmp	r0, #255	; 0xff
   8144e:	d065      	beq.n	8151c <iso7816_xfr_block_apdu_t1+0x164>
		return us_message_index;
	}

	us_message_index++;

	rx_len = p_message[2] + 1;
   81450:	f898 4002 	ldrb.w	r4, [r8, #2]
   81454:	1c65      	adds	r5, r4, #1

	if (tc3 & 0x1) {
   81456:	4b4f      	ldr	r3, [pc, #316]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81458:	781b      	ldrb	r3, [r3, #0]
   8145a:	f013 0301 	ands.w	r3, r3, #1
   8145e:	d038      	beq.n	814d2 <iso7816_xfr_block_apdu_t1+0x11a>
		rx_len++;
   81460:	f105 0901 	add.w	r9, r5, #1
	}

	for (index = 3; index < (rx_len + 3); index++) {
   81464:	1d2e      	adds	r6, r5, #4
   81466:	2e03      	cmp	r6, #3
		rx_len++;
   81468:	bf88      	it	hi
   8146a:	464d      	movhi	r5, r9
	for (index = 3; index < (rx_len + 3); index++) {
   8146c:	f240 8082 	bls.w	81574 <iso7816_xfr_block_apdu_t1+0x1bc>
		rx_len++;
   81470:	2103      	movs	r1, #3
   81472:	460c      	mov	r4, r1
		if (iso7816_get_char(p_usart, &p_message[index]) == 0xff) {
   81474:	f8df 9128 	ldr.w	r9, [pc, #296]	; 815a0 <iso7816_xfr_block_apdu_t1+0x1e8>
   81478:	4441      	add	r1, r8
   8147a:	4658      	mov	r0, fp
   8147c:	47c8      	blx	r9
   8147e:	28ff      	cmp	r0, #255	; 0xff
   81480:	d04f      	beq.n	81522 <iso7816_xfr_block_apdu_t1+0x16a>
	for (index = 3; index < (rx_len + 3); index++) {
   81482:	3401      	adds	r4, #1
   81484:	b2e4      	uxtb	r4, r4
   81486:	4621      	mov	r1, r4
   81488:	42b4      	cmp	r4, r6
   8148a:	d3f5      	bcc.n	81478 <iso7816_xfr_block_apdu_t1+0xc0>
			return us_message_index;
		}
	}

	/* Check for the CRC Error */
	if (tc3 & 0x1) {
   8148c:	4b41      	ldr	r3, [pc, #260]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   8148e:	781b      	ldrb	r3, [r3, #0]
   81490:	f013 0f01 	tst.w	r3, #1
   81494:	d148      	bne.n	81528 <iso7816_xfr_block_apdu_t1+0x170>
		}
	} else {
		edc = 0;
		edc = edc ^ p_message[0];
		edc = edc ^ p_message[1];
		edc = edc ^ p_message[2];
   81496:	f898 2001 	ldrb.w	r2, [r8, #1]
   8149a:	f898 3000 	ldrb.w	r3, [r8]
   8149e:	405a      	eors	r2, r3
   814a0:	f898 3002 	ldrb.w	r3, [r8, #2]
   814a4:	405a      	eors	r2, r3
   814a6:	2103      	movs	r1, #3
   814a8:	460b      	mov	r3, r1

		for (index = 3; index < (rx_len + 3); index++) {
			edc = edc ^ p_message[index];
   814aa:	f818 1001 	ldrb.w	r1, [r8, r1]
   814ae:	404a      	eors	r2, r1
		for (index = 3; index < (rx_len + 3); index++) {
   814b0:	3301      	adds	r3, #1
   814b2:	b2db      	uxtb	r3, r3
   814b4:	4619      	mov	r1, r3
   814b6:	42b3      	cmp	r3, r6
   814b8:	d3f7      	bcc.n	814aa <iso7816_xfr_block_apdu_t1+0xf2>
		}

		if (edc != p_message[index + 1]) {
   814ba:	4441      	add	r1, r8
   814bc:	784b      	ldrb	r3, [r1, #1]
   814be:	4293      	cmp	r3, r2
   814c0:	d01f      	beq.n	81502 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814c2:	2003      	movs	r0, #3
   814c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
   814c8:	2100      	movs	r1, #0
   814ca:	4658      	mov	r0, fp
   814cc:	4b33      	ldr	r3, [pc, #204]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   814ce:	4798      	blx	r3
   814d0:	e7aa      	b.n	81428 <iso7816_xfr_block_apdu_t1+0x70>
	for (index = 3; index < (rx_len + 3); index++) {
   814d2:	1cee      	adds	r6, r5, #3
   814d4:	2e03      	cmp	r6, #3
   814d6:	d8cb      	bhi.n	81470 <iso7816_xfr_block_apdu_t1+0xb8>
	if (tc3 & 0x1) {
   814d8:	2b00      	cmp	r3, #0
   814da:	d14a      	bne.n	81572 <iso7816_xfr_block_apdu_t1+0x1ba>
		edc = edc ^ p_message[2];
   814dc:	f898 2000 	ldrb.w	r2, [r8]
   814e0:	f898 3001 	ldrb.w	r3, [r8, #1]
   814e4:	405a      	eors	r2, r3
   814e6:	f898 3002 	ldrb.w	r3, [r8, #2]
   814ea:	405a      	eors	r2, r3
		for (index = 3; index < (rx_len + 3); index++) {
   814ec:	2103      	movs	r1, #3
   814ee:	e7e4      	b.n	814ba <iso7816_xfr_block_apdu_t1+0x102>
				((edc & 0xFF) != p_message[rx_len - 1])) {
   814f0:	44a8      	add	r8, r5
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   814f2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   814f6:	b2c0      	uxtb	r0, r0
   814f8:	4283      	cmp	r3, r0
   814fa:	d002      	beq.n	81502 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814fc:	2003      	movs	r0, #3
   814fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	us_message_index += rx_len;
   81502:	1ce8      	adds	r0, r5, #3
   81504:	b280      	uxth	r0, r0
	return us_message_index;
   81506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8150a:	4618      	mov	r0, r3
   8150c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81510:	2000      	movs	r0, #0
   81512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81516:	2001      	movs	r0, #1
   81518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   8151c:	2002      	movs	r0, #2
   8151e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return us_message_index;
   81522:	2003      	movs	r0, #3
   81524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		edc = iso7816_update_crc(p_message[0], edc);
   81528:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8152c:	f898 0000 	ldrb.w	r0, [r8]
   81530:	4c19      	ldr	r4, [pc, #100]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   81532:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[1], edc);
   81534:	4601      	mov	r1, r0
   81536:	f898 0001 	ldrb.w	r0, [r8, #1]
   8153a:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[2], edc);
   8153c:	4601      	mov	r1, r0
   8153e:	f898 0002 	ldrb.w	r0, [r8, #2]
   81542:	47a0      	blx	r4
   81544:	2303      	movs	r3, #3
   81546:	461c      	mov	r4, r3
			edc = iso7816_update_crc(p_message[index], edc);
   81548:	4f13      	ldr	r7, [pc, #76]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8154a:	4601      	mov	r1, r0
   8154c:	f818 0003 	ldrb.w	r0, [r8, r3]
   81550:	47b8      	blx	r7
		for (index = 3; index < (rx_len + 3); index++) {
   81552:	3401      	adds	r4, #1
   81554:	b2e4      	uxtb	r4, r4
   81556:	4623      	mov	r3, r4
   81558:	42b4      	cmp	r4, r6
   8155a:	d3f6      	bcc.n	8154a <iso7816_xfr_block_apdu_t1+0x192>
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   8155c:	eb08 0305 	add.w	r3, r8, r5
   81560:	f813 2c02 	ldrb.w	r2, [r3, #-2]
   81564:	f3c0 230f 	ubfx	r3, r0, #8, #16
   81568:	429a      	cmp	r2, r3
   8156a:	d0c1      	beq.n	814f0 <iso7816_xfr_block_apdu_t1+0x138>
			return us_message_index;
   8156c:	2003      	movs	r0, #3
   8156e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx_len = p_message[2] + 1;
   81572:	46a9      	mov	r9, r5
		edc = iso7816_update_crc(p_message[0], edc);
   81574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81578:	f898 0000 	ldrb.w	r0, [r8]
   8157c:	4d06      	ldr	r5, [pc, #24]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8157e:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[1], edc);
   81580:	4601      	mov	r1, r0
   81582:	f898 0001 	ldrb.w	r0, [r8, #1]
   81586:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[2], edc);
   81588:	4601      	mov	r1, r0
   8158a:	4620      	mov	r0, r4
   8158c:	47a8      	blx	r5
   8158e:	464d      	mov	r5, r9
   81590:	e7e4      	b.n	8155c <iso7816_xfr_block_apdu_t1+0x1a4>
   81592:	bf00      	nop
   81594:	2000191f 	.word	0x2000191f
   81598:	00081091 	.word	0x00081091
   8159c:	0008116d 	.word	0x0008116d
   815a0:	000810d5 	.word	0x000810d5

000815a4 <iso7816_data_block_atr>:
 * \param p_usart Pointer to the usart device.
 * \param p_atr    Pointer to ATR buffer.
 * \param p_length Pointer for store the ATR length.
 */
void iso7816_data_block_atr(Usart* p_usart, uint8_t *p_atr, uint8_t *p_length)
{
   815a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815a8:	4607      	mov	r7, r0
   815aa:	460e      	mov	r6, r1
   815ac:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t j;
	uint8_t uc_value;

	*p_length = 0;
   815ae:	2300      	movs	r3, #0
   815b0:	7013      	strb	r3, [r2, #0]

	ta1=0;
   815b2:	4a55      	ldr	r2, [pc, #340]	; (81708 <iso7816_data_block_atr+0x164>)
   815b4:	7013      	strb	r3, [r2, #0]
	td1=0;
   815b6:	4a55      	ldr	r2, [pc, #340]	; (8170c <iso7816_data_block_atr+0x168>)
   815b8:	7013      	strb	r3, [r2, #0]
	tc3=0;
   815ba:	4a55      	ldr	r2, [pc, #340]	; (81710 <iso7816_data_block_atr+0x16c>)
   815bc:	7013      	strb	r3, [r2, #0]

	/* Read ATR TS. */
	iso7816_get_char(p_usart, &p_atr[0]);
   815be:	4c55      	ldr	r4, [pc, #340]	; (81714 <iso7816_data_block_atr+0x170>)
   815c0:	47a0      	blx	r4

	/* Read ATR T0. */
	iso7816_get_char(p_usart, &p_atr[1]);
   815c2:	1c71      	adds	r1, r6, #1
   815c4:	4638      	mov	r0, r7
   815c6:	47a0      	blx	r4

	uc_value = p_atr[1] & 0xF0;
   815c8:	7874      	ldrb	r4, [r6, #1]
   815ca:	f004 09f0 	and.w	r9, r4, #240	; 0xf0
	i = 2;

	/* Read ATR T1. */
	if (uc_value & 0x10) { /* TA[1] */
   815ce:	f014 0f10 	tst.w	r4, #16
   815d2:	d11d      	bne.n	81610 <iso7816_data_block_atr+0x6c>
	i = 2;
   815d4:	2502      	movs	r5, #2
		iso7816_get_char(p_usart, &p_atr[i++]);
		ta1 = p_atr[2];
	}

	if (uc_value & 0x20) { /* TB[1] */
   815d6:	f014 0f20 	tst.w	r4, #32
   815da:	d122      	bne.n	81622 <iso7816_data_block_atr+0x7e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x40) { /* TC[1] */
   815dc:	f014 0f40 	tst.w	r4, #64	; 0x40
   815e0:	d127      	bne.n	81632 <iso7816_data_block_atr+0x8e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x80) { /* TD[1] */
   815e2:	f019 0f80 	tst.w	r9, #128	; 0x80
   815e6:	d12b      	bne.n	81640 <iso7816_data_block_atr+0x9c>
			uc_value = 0;
		}
	}

	/* Historical Bytes. */
	uc_value = p_atr[1] & 0x0F;
   815e8:	7873      	ldrb	r3, [r6, #1]
	for (j = 0; j < uc_value; j++) {
   815ea:	f013 030f 	ands.w	r3, r3, #15
   815ee:	d00b      	beq.n	81608 <iso7816_data_block_atr+0x64>
   815f0:	1974      	adds	r4, r6, r5
   815f2:	eb05 0903 	add.w	r9, r5, r3
   815f6:	444e      	add	r6, r9
		iso7816_get_char(p_usart, &p_atr[i++]);
   815f8:	4d46      	ldr	r5, [pc, #280]	; (81714 <iso7816_data_block_atr+0x170>)
   815fa:	4621      	mov	r1, r4
   815fc:	4638      	mov	r0, r7
   815fe:	47a8      	blx	r5
   81600:	3401      	adds	r4, #1
	for (j = 0; j < uc_value; j++) {
   81602:	42b4      	cmp	r4, r6
   81604:	d1f9      	bne.n	815fa <iso7816_data_block_atr+0x56>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81606:	464d      	mov	r5, r9
	}

	*p_length = i;
   81608:	f888 5000 	strb.w	r5, [r8]
}
   8160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		iso7816_get_char(p_usart, &p_atr[i++]);
   81610:	1cb1      	adds	r1, r6, #2
   81612:	4638      	mov	r0, r7
   81614:	4b3f      	ldr	r3, [pc, #252]	; (81714 <iso7816_data_block_atr+0x170>)
   81616:	4798      	blx	r3
		ta1 = p_atr[2];
   81618:	78b2      	ldrb	r2, [r6, #2]
   8161a:	4b3b      	ldr	r3, [pc, #236]	; (81708 <iso7816_data_block_atr+0x164>)
   8161c:	701a      	strb	r2, [r3, #0]
		iso7816_get_char(p_usart, &p_atr[i++]);
   8161e:	2503      	movs	r5, #3
   81620:	e7d9      	b.n	815d6 <iso7816_data_block_atr+0x32>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81622:	f105 0a01 	add.w	sl, r5, #1
   81626:	1971      	adds	r1, r6, r5
   81628:	4638      	mov	r0, r7
   8162a:	4b3a      	ldr	r3, [pc, #232]	; (81714 <iso7816_data_block_atr+0x170>)
   8162c:	4798      	blx	r3
   8162e:	4655      	mov	r5, sl
   81630:	e7d4      	b.n	815dc <iso7816_data_block_atr+0x38>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81632:	1c6c      	adds	r4, r5, #1
   81634:	1971      	adds	r1, r6, r5
   81636:	4638      	mov	r0, r7
   81638:	4b36      	ldr	r3, [pc, #216]	; (81714 <iso7816_data_block_atr+0x170>)
   8163a:	4798      	blx	r3
   8163c:	4625      	mov	r5, r4
   8163e:	e7d0      	b.n	815e2 <iso7816_data_block_atr+0x3e>
		iso7816_get_char(p_usart, &p_atr[i]);
   81640:	1971      	adds	r1, r6, r5
   81642:	4638      	mov	r0, r7
   81644:	4b33      	ldr	r3, [pc, #204]	; (81714 <iso7816_data_block_atr+0x170>)
   81646:	4798      	blx	r3
		td1 = p_atr[i];
   81648:	f816 9005 	ldrb.w	r9, [r6, r5]
   8164c:	4b2f      	ldr	r3, [pc, #188]	; (8170c <iso7816_data_block_atr+0x168>)
   8164e:	f883 9000 	strb.w	r9, [r3]
		uc_value = p_atr[i++] & 0xF0;
   81652:	1c6c      	adds	r4, r5, #1
	if (uc_value) {
   81654:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   81658:	d00b      	beq.n	81672 <iso7816_data_block_atr+0xce>
		if (uc_value & 0x10) { /* TA[2] */
   8165a:	f019 0f10 	tst.w	r9, #16
   8165e:	d10a      	bne.n	81676 <iso7816_data_block_atr+0xd2>
		if (uc_value & 0x20) { /* TB[2] */
   81660:	f019 0f20 	tst.w	r9, #32
   81664:	d10e      	bne.n	81684 <iso7816_data_block_atr+0xe0>
		if (uc_value & 0x40) { /* TC[2] */
   81666:	f019 0f40 	tst.w	r9, #64	; 0x40
   8166a:	d112      	bne.n	81692 <iso7816_data_block_atr+0xee>
		if (uc_value & 0x80) { /* TD[2] */
   8166c:	f01a 0f80 	tst.w	sl, #128	; 0x80
   81670:	d116      	bne.n	816a0 <iso7816_data_block_atr+0xfc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81672:	4625      	mov	r5, r4
   81674:	e7b8      	b.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81676:	3502      	adds	r5, #2
   81678:	1931      	adds	r1, r6, r4
   8167a:	4638      	mov	r0, r7
   8167c:	4b25      	ldr	r3, [pc, #148]	; (81714 <iso7816_data_block_atr+0x170>)
   8167e:	4798      	blx	r3
   81680:	462c      	mov	r4, r5
   81682:	e7ed      	b.n	81660 <iso7816_data_block_atr+0xbc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81684:	1c65      	adds	r5, r4, #1
   81686:	1931      	adds	r1, r6, r4
   81688:	4638      	mov	r0, r7
   8168a:	4b22      	ldr	r3, [pc, #136]	; (81714 <iso7816_data_block_atr+0x170>)
   8168c:	4798      	blx	r3
   8168e:	462c      	mov	r4, r5
   81690:	e7e9      	b.n	81666 <iso7816_data_block_atr+0xc2>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81692:	1c65      	adds	r5, r4, #1
   81694:	1931      	adds	r1, r6, r4
   81696:	4638      	mov	r0, r7
   81698:	4b1e      	ldr	r3, [pc, #120]	; (81714 <iso7816_data_block_atr+0x170>)
   8169a:	4798      	blx	r3
   8169c:	462c      	mov	r4, r5
   8169e:	e7e5      	b.n	8166c <iso7816_data_block_atr+0xc8>
			iso7816_get_char(p_usart, &p_atr[i]);
   816a0:	1931      	adds	r1, r6, r4
   816a2:	4638      	mov	r0, r7
   816a4:	4b1b      	ldr	r3, [pc, #108]	; (81714 <iso7816_data_block_atr+0x170>)
   816a6:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816a8:	1c65      	adds	r5, r4, #1
   816aa:	f816 9004 	ldrb.w	r9, [r6, r4]
	if (uc_value) {
   816ae:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   816b2:	d099      	beq.n	815e8 <iso7816_data_block_atr+0x44>
		if (uc_value & 0x10) { /* TA[3] */
   816b4:	f019 0f10 	tst.w	r9, #16
   816b8:	d10e      	bne.n	816d8 <iso7816_data_block_atr+0x134>
		if (uc_value & 0x20) { /* TB[3] */
   816ba:	f019 0f20 	tst.w	r9, #32
   816be:	d112      	bne.n	816e6 <iso7816_data_block_atr+0x142>
		if (uc_value & 0x40) { /* TC[3] */
   816c0:	f019 0f40 	tst.w	r9, #64	; 0x40
   816c4:	d116      	bne.n	816f4 <iso7816_data_block_atr+0x150>
		if (uc_value & 0x80) { /* TD[3] */
   816c6:	f01a 0f80 	tst.w	sl, #128	; 0x80
   816ca:	d08d      	beq.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i]);
   816cc:	1971      	adds	r1, r6, r5
   816ce:	4638      	mov	r0, r7
   816d0:	4b10      	ldr	r3, [pc, #64]	; (81714 <iso7816_data_block_atr+0x170>)
   816d2:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816d4:	3501      	adds	r5, #1
   816d6:	e787      	b.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816d8:	3402      	adds	r4, #2
   816da:	1971      	adds	r1, r6, r5
   816dc:	4638      	mov	r0, r7
   816de:	4b0d      	ldr	r3, [pc, #52]	; (81714 <iso7816_data_block_atr+0x170>)
   816e0:	4798      	blx	r3
   816e2:	4625      	mov	r5, r4
   816e4:	e7e9      	b.n	816ba <iso7816_data_block_atr+0x116>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816e6:	1c6c      	adds	r4, r5, #1
   816e8:	1971      	adds	r1, r6, r5
   816ea:	4638      	mov	r0, r7
   816ec:	4b09      	ldr	r3, [pc, #36]	; (81714 <iso7816_data_block_atr+0x170>)
   816ee:	4798      	blx	r3
   816f0:	4625      	mov	r5, r4
   816f2:	e7e5      	b.n	816c0 <iso7816_data_block_atr+0x11c>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816f4:	1c6c      	adds	r4, r5, #1
   816f6:	1971      	adds	r1, r6, r5
   816f8:	4638      	mov	r0, r7
   816fa:	4b06      	ldr	r3, [pc, #24]	; (81714 <iso7816_data_block_atr+0x170>)
   816fc:	4798      	blx	r3
			tc3 = p_atr[i - 1];
   816fe:	5d72      	ldrb	r2, [r6, r5]
   81700:	4b03      	ldr	r3, [pc, #12]	; (81710 <iso7816_data_block_atr+0x16c>)
   81702:	701a      	strb	r2, [r3, #0]
			iso7816_get_char(p_usart, &p_atr[i++]);
   81704:	4625      	mov	r5, r4
   81706:	e7de      	b.n	816c6 <iso7816_data_block_atr+0x122>
   81708:	2000191e 	.word	0x2000191e
   8170c:	20001920 	.word	0x20001920
   81710:	2000191f 	.word	0x2000191f
   81714:	000810d5 	.word	0x000810d5

00081718 <iso7816_warm_reset>:
 * \brief Warm reset.
 *
 * \param p_usart Pointer to the usart device.
 */
void iso7816_warm_reset(Usart* p_usart)
{
   81718:	b510      	push	{r4, lr}
   8171a:	b082      	sub	sp, #8
   8171c:	4604      	mov	r4, r0
	uint32_t i;
	uint32_t ul_data;

	iso7816_icc_power_off();
   8171e:	4b16      	ldr	r3, [pc, #88]	; (81778 <iso7816_warm_reset+0x60>)
   81720:	4798      	blx	r3

	/* tb: wait 400 cycles. */
	for (i = 0; i < (RST_WAIT_TIME * (g_ul_clk / 1000000)); i++) {
   81722:	4b16      	ldr	r3, [pc, #88]	; (8177c <iso7816_warm_reset+0x64>)
   81724:	681b      	ldr	r3, [r3, #0]
   81726:	4a16      	ldr	r2, [pc, #88]	; (81780 <iso7816_warm_reset+0x68>)
   81728:	fba2 2303 	umull	r2, r3, r2, r3
   8172c:	0c9b      	lsrs	r3, r3, #18
   8172e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   81732:	00db      	lsls	r3, r3, #3
   81734:	d00c      	beq.n	81750 <iso7816_warm_reset+0x38>
   81736:	2200      	movs	r2, #0
   81738:	4810      	ldr	r0, [pc, #64]	; (8177c <iso7816_warm_reset+0x64>)
   8173a:	4911      	ldr	r1, [pc, #68]	; (81780 <iso7816_warm_reset+0x68>)
   8173c:	3201      	adds	r2, #1
   8173e:	6803      	ldr	r3, [r0, #0]
   81740:	fba1 e303 	umull	lr, r3, r1, r3
   81744:	0c9b      	lsrs	r3, r3, #18
   81746:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   8174a:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   8174e:	d3f5      	bcc.n	8173c <iso7816_warm_reset+0x24>
	}

	usart_read(p_usart, &ul_data);
   81750:	a901      	add	r1, sp, #4
   81752:	4620      	mov	r0, r4
   81754:	4b0b      	ldr	r3, [pc, #44]	; (81784 <iso7816_warm_reset+0x6c>)
   81756:	4798      	blx	r3
	usart_reset_status(p_usart);
   81758:	4620      	mov	r0, r4
   8175a:	4b0b      	ldr	r3, [pc, #44]	; (81788 <iso7816_warm_reset+0x70>)
   8175c:	4798      	blx	r3
	usart_reset_iterations(p_usart);
   8175e:	4620      	mov	r0, r4
   81760:	4b0a      	ldr	r3, [pc, #40]	; (8178c <iso7816_warm_reset+0x74>)
   81762:	4798      	blx	r3
	usart_reset_nack(p_usart);
   81764:	4620      	mov	r0, r4
   81766:	4b0a      	ldr	r3, [pc, #40]	; (81790 <iso7816_warm_reset+0x78>)
   81768:	4798      	blx	r3
	gpio_set_pin_high(gs_ul_rst_pin_idx);
   8176a:	4b0a      	ldr	r3, [pc, #40]	; (81794 <iso7816_warm_reset+0x7c>)
   8176c:	6818      	ldr	r0, [r3, #0]
   8176e:	4b0a      	ldr	r3, [pc, #40]	; (81798 <iso7816_warm_reset+0x80>)
   81770:	4798      	blx	r3

	iso7816_icc_power_on();
}
   81772:	b002      	add	sp, #8
   81774:	bd10      	pop	{r4, pc}
   81776:	bf00      	nop
   81778:	000810c1 	.word	0x000810c1
   8177c:	200023e8 	.word	0x200023e8
   81780:	431bde83 	.word	0x431bde83
   81784:	00086e2f 	.word	0x00086e2f
   81788:	00086de9 	.word	0x00086de9
   8178c:	00086df1 	.word	0x00086df1
   81790:	00086df9 	.word	0x00086df9
   81794:	200023ec 	.word	0x200023ec
   81798:	00085137 	.word	0x00085137

0008179c <iso7816_decode_atr>:
 *
 * \param p_usart Pointer to the usart device.
 * \param p_atr Pinter on ATR buffer.
 */
uint8_t iso7816_decode_atr(Usart* p_usart, uint8_t *p_atr)
{
   8179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817a0:	b09c      	sub	sp, #112	; 0x70
   817a2:	4686      	mov	lr, r0
   817a4:	4688      	mov	r8, r1
	uint32_t ftable[16] = {0, 372, 558, 744, 1116, 1488, 1860, 0,
   817a6:	4e65      	ldr	r6, [pc, #404]	; (8193c <iso7816_decode_atr+0x1a0>)
   817a8:	ac0c      	add	r4, sp, #48	; 0x30
   817aa:	4635      	mov	r5, r6
   817ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   817bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			       0, 512, 768, 1024, 1536, 2048, 0, 0};
	uint32_t dtable[10] = {0, 1, 2, 4, 8, 16, 32, 64, 12, 20};
   817c0:	ad02      	add	r5, sp, #8
   817c2:	f106 0440 	add.w	r4, r6, #64	; 0x40
   817c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817ce:	e894 0003 	ldmia.w	r4, {r0, r1}
   817d2:	e885 0003 	stmia.w	r5, {r0, r1}
	uint8_t ppss[4] = {0,0,0,0};
   817d6:	2300      	movs	r3, #0
   817d8:	9301      	str	r3, [sp, #4]
	uint32_t y;
	uint8_t uc_offset;
	uint32_t fidi = 0;

	i = 2;
	y = p_atr[1] & 0xF0;
   817da:	f898 1001 	ldrb.w	r1, [r8, #1]

	/* Read ATR Ti. */
	uc_offset = 1;

	if (y & 0x10) {
   817de:	f011 0f10 	tst.w	r1, #16
   817e2:	d018      	beq.n	81816 <iso7816_decode_atr+0x7a>
	y = p_atr[1] & 0xF0;
   817e4:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   817e8:	2202      	movs	r2, #2
   817ea:	e004      	b.n	817f6 <iso7816_decode_atr+0x5a>
			if (y & 0x40) { /* TC[i] */
				i++;
			}

			if (y & 0x80) { /* TD[i] */
				y = p_atr[i++] & 0xF0;
   817ec:	f818 3002 	ldrb.w	r3, [r8, r2]
   817f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   817f4:	3201      	adds	r2, #1
		while (y) {
   817f6:	b173      	cbz	r3, 81816 <iso7816_decode_atr+0x7a>
			if (y & 0x10) { /* TA[i] */
   817f8:	f013 0f10 	tst.w	r3, #16
				i++;
   817fc:	bf18      	it	ne
   817fe:	3201      	addne	r2, #1
			if (y & 0x20) { /* TB[i] */
   81800:	f013 0f20 	tst.w	r3, #32
				i++;
   81804:	bf18      	it	ne
   81806:	3201      	addne	r2, #1
			if (y & 0x40) { /* TC[i] */
   81808:	f013 0f40 	tst.w	r3, #64	; 0x40
				i++;
   8180c:	bf18      	it	ne
   8180e:	3201      	addne	r2, #1
			if (y & 0x80) { /* TD[i] */
   81810:	f013 0f80 	tst.w	r3, #128	; 0x80
   81814:	d1ea      	bne.n	817ec <iso7816_decode_atr+0x50>
			uc_offset++;
		}
	}

	y = p_atr[1] & 0x0F;
	for (j = 0; j < y; j++) {
   81816:	f011 020f 	ands.w	r2, r1, #15
   8181a:	d003      	beq.n	81824 <iso7816_decode_atr+0x88>
   8181c:	2300      	movs	r3, #0
   8181e:	3301      	adds	r3, #1
   81820:	429a      	cmp	r2, r3
   81822:	d1fc      	bne.n	8181e <iso7816_decode_atr+0x82>
		i++;
	}

	if (td1 & 0x10) {
   81824:	4b46      	ldr	r3, [pc, #280]	; (81940 <iso7816_decode_atr+0x1a4>)
   81826:	7818      	ldrb	r0, [r3, #0]
   81828:	f010 0f10 	tst.w	r0, #16
   8182c:	f040 8081 	bne.w	81932 <iso7816_decode_atr+0x196>
		return 0;
	}

	if (ta1 && ((ta1 & 0xf) != 0)) {
   81830:	4b44      	ldr	r3, [pc, #272]	; (81944 <iso7816_decode_atr+0x1a8>)
   81832:	781b      	ldrb	r3, [r3, #0]
   81834:	b17b      	cbz	r3, 81856 <iso7816_decode_atr+0xba>
   81836:	f013 020f 	ands.w	r2, r3, #15
   8183a:	d044      	beq.n	818c6 <iso7816_decode_atr+0x12a>
		fidi = ftable[(ta1 >> 4) & 0xf] / dtable[ta1 & 0xf];
   8183c:	091b      	lsrs	r3, r3, #4
   8183e:	a91c      	add	r1, sp, #112	; 0x70
   81840:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81844:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   81848:	f853 6c40 	ldr.w	r6, [r3, #-64]
   8184c:	f852 3c68 	ldr.w	r3, [r2, #-104]
   81850:	fbb6 f6f3 	udiv	r6, r6, r3
   81854:	e000      	b.n	81858 <iso7816_decode_atr+0xbc>
	uint32_t fidi = 0;
   81856:	2600      	movs	r6, #0
	}

	if (td1 & 0xf) {
   81858:	f010 000f 	ands.w	r0, r0, #15
   8185c:	d16a      	bne.n	81934 <iso7816_decode_atr+0x198>
   8185e:	4674      	mov	r4, lr
		return (td1 & 0xf);
	}
	
	// Propose speeds to card
	iso7816_send_char(p_usart, 0xff);
   81860:	21ff      	movs	r1, #255	; 0xff
   81862:	4670      	mov	r0, lr
   81864:	4d38      	ldr	r5, [pc, #224]	; (81948 <iso7816_decode_atr+0x1ac>)
   81866:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0x10);
   81868:	2110      	movs	r1, #16
   8186a:	4620      	mov	r0, r4
   8186c:	47a8      	blx	r5
	iso7816_send_char(p_usart, ta1);
   8186e:	4f35      	ldr	r7, [pc, #212]	; (81944 <iso7816_decode_atr+0x1a8>)
   81870:	7839      	ldrb	r1, [r7, #0]
   81872:	4620      	mov	r0, r4
   81874:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0xff ^ 0x10 ^ ta1);
   81876:	7839      	ldrb	r1, [r7, #0]
   81878:	f081 01ef 	eor.w	r1, r1, #239	; 0xef
   8187c:	4620      	mov	r0, r4
   8187e:	47a8      	blx	r5

	iso7816_get_char(p_usart, &ppss[0]);
   81880:	a901      	add	r1, sp, #4
   81882:	4620      	mov	r0, r4
   81884:	4d31      	ldr	r5, [pc, #196]	; (8194c <iso7816_decode_atr+0x1b0>)
   81886:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[1]);
   81888:	f10d 0105 	add.w	r1, sp, #5
   8188c:	4620      	mov	r0, r4
   8188e:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[2]);
   81890:	f10d 0106 	add.w	r1, sp, #6
   81894:	4620      	mov	r0, r4
   81896:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[3]);
   81898:	f10d 0107 	add.w	r1, sp, #7
   8189c:	4620      	mov	r0, r4
   8189e:	47a8      	blx	r5

	if ((ppss[0] != 0xff) || (ppss[1] != 0x10)) {
   818a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818a4:	2bff      	cmp	r3, #255	; 0xff
   818a6:	d103      	bne.n	818b0 <iso7816_decode_atr+0x114>
   818a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   818ac:	2b10      	cmp	r3, #16
   818ae:	d00c      	beq.n	818ca <iso7816_decode_atr+0x12e>
		// Fail - if card doesn't support this we reset card again
		iso7816_warm_reset(p_usart);
   818b0:	4620      	mov	r0, r4
   818b2:	4b27      	ldr	r3, [pc, #156]	; (81950 <iso7816_decode_atr+0x1b4>)
   818b4:	4798      	blx	r3
		// Read ATR to clear buffer
		uint8_t plength;
		iso7816_data_block_atr(p_usart, p_atr, &plength);
   818b6:	f10d 0203 	add.w	r2, sp, #3
   818ba:	4641      	mov	r1, r8
   818bc:	4620      	mov	r0, r4
   818be:	4b25      	ldr	r3, [pc, #148]	; (81954 <iso7816_decode_atr+0x1b8>)
   818c0:	4798      	blx	r3
		return 0;
   818c2:	2000      	movs	r0, #0
   818c4:	e036      	b.n	81934 <iso7816_decode_atr+0x198>
	uint32_t fidi = 0;
   818c6:	2600      	movs	r6, #0
   818c8:	e7c6      	b.n	81858 <iso7816_decode_atr+0xbc>
	}

	if (ppss[2] != ta1) {
   818ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
   818ce:	4b1d      	ldr	r3, [pc, #116]	; (81944 <iso7816_decode_atr+0x1a8>)
   818d0:	781b      	ldrb	r3, [r3, #0]
   818d2:	4293      	cmp	r3, r2
   818d4:	d013      	beq.n	818fe <iso7816_decode_atr+0x162>
		if (ppss[3] == (0xff ^ 0x10 ^ ppss[2])) {
   818d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   818da:	f082 02ef 	eor.w	r2, r2, #239	; 0xef
   818de:	4293      	cmp	r3, r2
   818e0:	d11c      	bne.n	8191c <iso7816_decode_atr+0x180>
			fidi = ftable[(ppss[3] >>
					4) & 0xf] / dtable[ppss[3] & 0xf];
   818e2:	091a      	lsrs	r2, r3, #4
			fidi = ftable[(ppss[3] >>
   818e4:	a91c      	add	r1, sp, #112	; 0x70
   818e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
					4) & 0xf] / dtable[ppss[3] & 0xf];
   818ea:	f003 030f 	and.w	r3, r3, #15
   818ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
			fidi = ftable[(ppss[3] >>
   818f2:	f852 6c40 	ldr.w	r6, [r2, #-64]
   818f6:	f853 3c68 	ldr.w	r3, [r3, #-104]
   818fa:	fbb6 f6f3 	udiv	r6, r6, r3
			return 0;
		}
	}

	/* Enable TX and RX. */
	usart_disable_rx(p_usart);
   818fe:	4620      	mov	r0, r4
   81900:	4b15      	ldr	r3, [pc, #84]	; (81958 <iso7816_decode_atr+0x1bc>)
   81902:	4798      	blx	r3
	usart_disable_tx(p_usart);
   81904:	4620      	mov	r0, r4
   81906:	4b15      	ldr	r3, [pc, #84]	; (8195c <iso7816_decode_atr+0x1c0>)
   81908:	4798      	blx	r3

	p_usart->US_FIDI = fidi;
   8190a:	6426      	str	r6, [r4, #64]	; 0x40

	usart_enable_rx(p_usart);
   8190c:	4620      	mov	r0, r4
   8190e:	4b14      	ldr	r3, [pc, #80]	; (81960 <iso7816_decode_atr+0x1c4>)
   81910:	4798      	blx	r3
	usart_enable_tx(p_usart);
   81912:	4620      	mov	r0, r4
   81914:	4b13      	ldr	r3, [pc, #76]	; (81964 <iso7816_decode_atr+0x1c8>)
   81916:	4798      	blx	r3

	return 0;
   81918:	2000      	movs	r0, #0
   8191a:	e00b      	b.n	81934 <iso7816_decode_atr+0x198>
			iso7816_warm_reset(p_usart);
   8191c:	4620      	mov	r0, r4
   8191e:	4b0c      	ldr	r3, [pc, #48]	; (81950 <iso7816_decode_atr+0x1b4>)
   81920:	4798      	blx	r3
			iso7816_data_block_atr(p_usart, p_atr, &plength);
   81922:	f10d 0203 	add.w	r2, sp, #3
   81926:	4641      	mov	r1, r8
   81928:	4620      	mov	r0, r4
   8192a:	4b0a      	ldr	r3, [pc, #40]	; (81954 <iso7816_decode_atr+0x1b8>)
   8192c:	4798      	blx	r3
			return 0;
   8192e:	2000      	movs	r0, #0
   81930:	e000      	b.n	81934 <iso7816_decode_atr+0x198>
		return 0;
   81932:	2000      	movs	r0, #0
}
   81934:	b01c      	add	sp, #112	; 0x70
   81936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8193a:	bf00      	nop
   8193c:	0008e338 	.word	0x0008e338
   81940:	20001920 	.word	0x20001920
   81944:	2000191e 	.word	0x2000191e
   81948:	0008116d 	.word	0x0008116d
   8194c:	000810d5 	.word	0x000810d5
   81950:	00081719 	.word	0x00081719
   81954:	000815a5 	.word	0x000815a5
   81958:	00086dd3 	.word	0x00086dd3
   8195c:	00086dc3 	.word	0x00086dc3
   81960:	00086dcd 	.word	0x00086dcd
   81964:	00086dbd 	.word	0x00086dbd

00081968 <iso7816_init>:
 * \param ul_mck          USART module input clock frequency.
 * \param ul_rst_pin_idx  Control smart card RST pin index.
 */
void iso7816_init(Usart* p_usart, const usart_iso7816_opt_t *p_usart_opt,
		uint32_t ul_mck, uint32_t ul_rst_pin_idx)
{
   81968:	b570      	push	{r4, r5, r6, lr}
   8196a:	4604      	mov	r4, r0
   8196c:	460d      	mov	r5, r1
   8196e:	4616      	mov	r6, r2
	/* Pin RST of ISO7816 initialize. */
	gs_ul_rst_pin_idx = ul_rst_pin_idx;
   81970:	4a0d      	ldr	r2, [pc, #52]	; (819a8 <iso7816_init+0x40>)
   81972:	6013      	str	r3, [r2, #0]
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   81974:	4618      	mov	r0, r3
   81976:	4b0d      	ldr	r3, [pc, #52]	; (819ac <iso7816_init+0x44>)
   81978:	4798      	blx	r3

	/* Init the global variable for ISO7816. */
	g_ul_clk = ul_mck;
   8197a:	4b0d      	ldr	r3, [pc, #52]	; (819b0 <iso7816_init+0x48>)
   8197c:	601e      	str	r6, [r3, #0]

	usart_init_iso7816(p_usart, p_usart_opt, g_ul_clk);
   8197e:	681a      	ldr	r2, [r3, #0]
   81980:	4629      	mov	r1, r5
   81982:	4620      	mov	r0, r4
   81984:	4b0b      	ldr	r3, [pc, #44]	; (819b4 <iso7816_init+0x4c>)
   81986:	4798      	blx	r3

	/* Disable interrupts. */
	usart_disable_interrupt(p_usart, 0xffffffff);
   81988:	f04f 31ff 	mov.w	r1, #4294967295
   8198c:	4620      	mov	r0, r4
   8198e:	4b0a      	ldr	r3, [pc, #40]	; (819b8 <iso7816_init+0x50>)
   81990:	4798      	blx	r3

	/* Write the Timeguard Register. */
	usart_set_tx_timeguard(p_usart, 5);
   81992:	2105      	movs	r1, #5
   81994:	4620      	mov	r0, r4
   81996:	4b09      	ldr	r3, [pc, #36]	; (819bc <iso7816_init+0x54>)
   81998:	4798      	blx	r3

	/* Enable TX and RX. */
	usart_enable_rx(p_usart);
   8199a:	4620      	mov	r0, r4
   8199c:	4b08      	ldr	r3, [pc, #32]	; (819c0 <iso7816_init+0x58>)
   8199e:	4798      	blx	r3
	usart_enable_tx(p_usart);
   819a0:	4620      	mov	r0, r4
   819a2:	4b08      	ldr	r3, [pc, #32]	; (819c4 <iso7816_init+0x5c>)
   819a4:	4798      	blx	r3
   819a6:	bd70      	pop	{r4, r5, r6, pc}
   819a8:	200023ec 	.word	0x200023ec
   819ac:	00085151 	.word	0x00085151
   819b0:	200023e8 	.word	0x200023e8
   819b4:	00086b85 	.word	0x00086b85
   819b8:	00086ddd 	.word	0x00086ddd
   819bc:	00086dc9 	.word	0x00086dc9
   819c0:	00086dcd 	.word	0x00086dcd
   819c4:	00086dbd 	.word	0x00086dbd

000819c8 <ctrl_scarddata_req>:
#define SCARD_MODE_AT88SC102_COMPAREBIT 0x08

/* Handle "Smartcard Data" request */
bool ctrl_scarddata_req(void)
{
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819c8:	4b0c      	ldr	r3, [pc, #48]	; (819fc <ctrl_scarddata_req+0x34>)
   819ca:	8859      	ldrh	r1, [r3, #2]
   819cc:	0a0b      	lsrs	r3, r1, #8
	uint8_t datalen = (udd_g_ctrlreq.req.wValue) & 0xFF;
	uint16_t rxlen;
	
	if (offset > scard_rx_buffer_size){
   819ce:	4a0c      	ldr	r2, [pc, #48]	; (81a00 <ctrl_scarddata_req+0x38>)
   819d0:	8812      	ldrh	r2, [r2, #0]
   819d2:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   819d6:	d30d      	bcc.n	819f4 <ctrl_scarddata_req+0x2c>
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819d8:	b2d8      	uxtb	r0, r3
		/* No data to send - point our buffer to memory actually used to prevent errors */
		rxlen = 0;
		offset = 0;
	} else {
		rxlen = scard_rx_buffer_size - offset;
   819da:	1ad3      	subs	r3, r2, r3
   819dc:	b29b      	uxth	r3, r3
   819de:	b2c9      	uxtb	r1, r1
   819e0:	428b      	cmp	r3, r1
   819e2:	bf28      	it	cs
   819e4:	460b      	movcs	r3, r1
		if (rxlen > datalen){
			rxlen = datalen;
		}
	}
	
	udd_g_ctrlreq.payload = scard_rx_buffer + offset;
   819e6:	4905      	ldr	r1, [pc, #20]	; (819fc <ctrl_scarddata_req+0x34>)
   819e8:	4a06      	ldr	r2, [pc, #24]	; (81a04 <ctrl_scarddata_req+0x3c>)
   819ea:	4402      	add	r2, r0
   819ec:	608a      	str	r2, [r1, #8]
	udd_g_ctrlreq.payload_size = rxlen;
   819ee:	818b      	strh	r3, [r1, #12]
	
	return true;
}
   819f0:	2001      	movs	r0, #1
   819f2:	4770      	bx	lr
		rxlen = 0;
   819f4:	2300      	movs	r3, #0
		offset = 0;
   819f6:	4618      	mov	r0, r3
   819f8:	e7f5      	b.n	819e6 <ctrl_scarddata_req+0x1e>
   819fa:	bf00      	nop
   819fc:	20002dec 	.word	0x20002dec
   81a00:	200024f0 	.word	0x200024f0
   81a04:	200024f4 	.word	0x200024f4

00081a08 <ctrl_scardconfig_req>:
{
	/* Version information, used to indicate to host computer what the firmware in the CW-Lite 
	   supports. */
	static uint8_t scard_protocol_version = 02;
	
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81a08:	4b0e      	ldr	r3, [pc, #56]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a0a:	789b      	ldrb	r3, [r3, #2]
   81a0c:	2b01      	cmp	r3, #1
   81a0e:	d004      	beq.n	81a1a <ctrl_scardconfig_req+0x12>
   81a10:	2b02      	cmp	r3, #2
   81a12:	d00a      	beq.n	81a2a <ctrl_scardconfig_req+0x22>
   81a14:	b17b      	cbz	r3, 81a36 <ctrl_scardconfig_req+0x2e>
   81a16:	2000      	movs	r0, #0
   81a18:	4770      	bx	lr
		case SCARD_CFG_ATR:
			udd_g_ctrlreq.payload = scard_atr;
   81a1a:	4b0a      	ldr	r3, [pc, #40]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a1c:	4a0a      	ldr	r2, [pc, #40]	; (81a48 <ctrl_scardconfig_req+0x40>)
   81a1e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = scard_atr_size;
   81a20:	4a0a      	ldr	r2, [pc, #40]	; (81a4c <ctrl_scardconfig_req+0x44>)
   81a22:	7812      	ldrb	r2, [r2, #0]
   81a24:	819a      	strh	r2, [r3, #12]
			return true;
   81a26:	2001      	movs	r0, #1
   81a28:	4770      	bx	lr
			break;
			
		case SCARD_CFG_PROTOCOL:
			udd_g_ctrlreq.payload = &scard_protocol;
   81a2a:	4b06      	ldr	r3, [pc, #24]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a2c:	4a08      	ldr	r2, [pc, #32]	; (81a50 <ctrl_scardconfig_req+0x48>)
   81a2e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a30:	2001      	movs	r0, #1
   81a32:	8198      	strh	r0, [r3, #12]
			return true;
   81a34:	4770      	bx	lr
			break;
			
		case SCARD_CFG_VERSION:
			udd_g_ctrlreq.payload = &scard_protocol_version;
   81a36:	4b03      	ldr	r3, [pc, #12]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a38:	4a06      	ldr	r2, [pc, #24]	; (81a54 <ctrl_scardconfig_req+0x4c>)
   81a3a:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a3c:	2001      	movs	r0, #1
   81a3e:	8198      	strh	r0, [r3, #12]
		default:
			return false;
			break;
	}
	
}
   81a40:	4770      	bx	lr
   81a42:	bf00      	nop
   81a44:	20002dec 	.word	0x20002dec
   81a48:	200025f8 	.word	0x200025f8
   81a4c:	200025f4 	.word	0x200025f4
   81a50:	20002630 	.word	0x20002630
   81a54:	200002f1 	.word	0x200002f1

00081a58 <ctrl_scardaux_req>:

/* Handle "Smartcard Auxilary" request */
bool ctrl_scardaux_req(void)
{
	if(udd_g_ctrlreq.req.wValue == SCARD_MODE_AT88SC102_IN)
   81a58:	4b05      	ldr	r3, [pc, #20]	; (81a70 <ctrl_scardaux_req+0x18>)
   81a5a:	885b      	ldrh	r3, [r3, #2]
   81a5c:	2b02      	cmp	r3, #2
   81a5e:	d001      	beq.n	81a64 <ctrl_scardaux_req+0xc>
	{	
		udd_g_ctrlreq.payload = &at88sc102_status;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
   81a60:	2000      	movs	r0, #0
}
   81a62:	4770      	bx	lr
		udd_g_ctrlreq.payload = &at88sc102_status;
   81a64:	4b02      	ldr	r3, [pc, #8]	; (81a70 <ctrl_scardaux_req+0x18>)
   81a66:	4a03      	ldr	r2, [pc, #12]	; (81a74 <ctrl_scardaux_req+0x1c>)
   81a68:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size = 1;
   81a6a:	2001      	movs	r0, #1
   81a6c:	8198      	strh	r0, [r3, #12]
		return true;
   81a6e:	4770      	bx	lr
   81a70:	20002dec 	.word	0x20002dec
   81a74:	2000262f 	.word	0x2000262f

00081a78 <ctrl_scarddata_cb>:

/* Handle "Smartcard Data" Output from Computer */
void ctrl_scarddata_cb(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81a78:	4b11      	ldr	r3, [pc, #68]	; (81ac0 <ctrl_scarddata_cb+0x48>)
   81a7a:	88d8      	ldrh	r0, [r3, #6]
   81a7c:	899b      	ldrh	r3, [r3, #12]
   81a7e:	4283      	cmp	r3, r0
   81a80:	d31d      	bcc.n	81abe <ctrl_scarddata_cb+0x46>
	
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a82:	b1e0      	cbz	r0, 81abe <ctrl_scarddata_cb+0x46>
{
   81a84:	b5f0      	push	{r4, r5, r6, r7, lr}
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81a86:	4b0e      	ldr	r3, [pc, #56]	; (81ac0 <ctrl_scarddata_cb+0x48>)
   81a88:	885c      	ldrh	r4, [r3, #2]
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81a8a:	f8d3 e008 	ldr.w	lr, [r3, #8]
   81a8e:	1c66      	adds	r6, r4, #1
   81a90:	b2b6      	uxth	r6, r6
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a92:	2200      	movs	r2, #0
   81a94:	4613      	mov	r3, r2
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81a96:	f8df c030 	ldr.w	ip, [pc, #48]	; 81ac8 <ctrl_scarddata_cb+0x50>
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81a9a:	4f0a      	ldr	r7, [pc, #40]	; (81ac4 <ctrl_scarddata_cb+0x4c>)
   81a9c:	e004      	b.n	81aa8 <ctrl_scarddata_cb+0x30>
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a9e:	1c53      	adds	r3, r2, #1
   81aa0:	b2da      	uxtb	r2, r3
   81aa2:	4613      	mov	r3, r2
   81aa4:	4290      	cmp	r0, r2
   81aa6:	d909      	bls.n	81abc <ctrl_scarddata_cb+0x44>
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81aa8:	1911      	adds	r1, r2, r4
   81aaa:	29ff      	cmp	r1, #255	; 0xff
   81aac:	dcf7      	bgt.n	81a9e <ctrl_scarddata_cb+0x26>
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81aae:	f81e 5002 	ldrb.w	r5, [lr, r2]
   81ab2:	f80c 5001 	strb.w	r5, [ip, r1]
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81ab6:	4433      	add	r3, r6
   81ab8:	803b      	strh	r3, [r7, #0]
   81aba:	e7f0      	b.n	81a9e <ctrl_scarddata_cb+0x26>
		}
	}
}
   81abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81abe:	4770      	bx	lr
   81ac0:	20002dec 	.word	0x20002dec
   81ac4:	20002632 	.word	0x20002632
   81ac8:	200023f0 	.word	0x200023f0

00081acc <ctrl_scardaux_cb>:
	}
}

/* Handle "Smartcard Aux" Output from Computer */
void ctrl_scardaux_cb(void)
{
   81acc:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81ace:	4a2d      	ldr	r2, [pc, #180]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81ad0:	88d3      	ldrh	r3, [r2, #6]
   81ad2:	8992      	ldrh	r2, [r2, #12]
   81ad4:	429a      	cmp	r2, r3
   81ad6:	d303      	bcc.n	81ae0 <ctrl_scardaux_cb+0x14>
	
	if((udd_g_ctrlreq.req.wValue & 0xFF) == SCARD_MODE_AT88SC102_OUT)
   81ad8:	4a2a      	ldr	r2, [pc, #168]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81ada:	7892      	ldrb	r2, [r2, #2]
   81adc:	2a03      	cmp	r2, #3
   81ade:	d000      	beq.n	81ae2 <ctrl_scardaux_cb+0x16>
				break;
		}
		
	}
	return;
}
   81ae0:	bd08      	pop	{r3, pc}
		at88sc102_status = 0;
   81ae2:	4a29      	ldr	r2, [pc, #164]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81ae4:	2100      	movs	r1, #0
   81ae6:	7011      	strb	r1, [r2, #0]
		if (udd_g_ctrlreq.req.wLength < 1) return;
   81ae8:	2b00      	cmp	r3, #0
   81aea:	d0f9      	beq.n	81ae0 <ctrl_scardaux_cb+0x14>
		udd_g_ctrlreq.req.wLength--;
   81aec:	3b01      	subs	r3, #1
   81aee:	b29b      	uxth	r3, r3
   81af0:	4a24      	ldr	r2, [pc, #144]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81af2:	80d3      	strh	r3, [r2, #6]
		switch(udd_g_ctrlreq.payload[0]) {
   81af4:	6890      	ldr	r0, [r2, #8]
   81af6:	7802      	ldrb	r2, [r0, #0]
   81af8:	3a02      	subs	r2, #2
   81afa:	2a06      	cmp	r2, #6
   81afc:	d8f0      	bhi.n	81ae0 <ctrl_scardaux_cb+0x14>
   81afe:	e8df f002 	tbb	[pc, r2]
   81b02:	0b04      	.short	0x0b04
   81b04:	2f261e15 	.word	0x2f261e15
   81b08:	38          	.byte	0x38
   81b09:	00          	.byte	0x00
				initPortSMC();
   81b0a:	4b20      	ldr	r3, [pc, #128]	; (81b8c <ctrl_scardaux_cb+0xc0>)
   81b0c:	4798      	blx	r3
				at88sc102_status = firstDetectFunctionSMC();
   81b0e:	4b20      	ldr	r3, [pc, #128]	; (81b90 <ctrl_scardaux_cb+0xc4>)
   81b10:	4798      	blx	r3
   81b12:	4b1d      	ldr	r3, [pc, #116]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b14:	7018      	strb	r0, [r3, #0]
				break;
   81b16:	e7e3      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b18:	2b01      	cmp	r3, #1
   81b1a:	d9e1      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+1)), FALSE);
   81b1c:	2100      	movs	r1, #0
   81b1e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   81b22:	4b1c      	ldr	r3, [pc, #112]	; (81b94 <ctrl_scardaux_cb+0xc8>)
   81b24:	4798      	blx	r3
   81b26:	4b18      	ldr	r3, [pc, #96]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b28:	7018      	strb	r0, [r3, #0]
				break;
   81b2a:	e7d9      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b2c:	2b01      	cmp	r3, #1
   81b2e:	d9d7      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				writeSecurityCode(((uint16_t *)(udd_g_ctrlreq.payload+1)));
   81b30:	3001      	adds	r0, #1
   81b32:	4b19      	ldr	r3, [pc, #100]	; (81b98 <ctrl_scardaux_cb+0xcc>)
   81b34:	4798      	blx	r3
				at88sc102_status = 1;
   81b36:	4b14      	ldr	r3, [pc, #80]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b38:	2201      	movs	r2, #1
   81b3a:	701a      	strb	r2, [r3, #0]
				break;
   81b3c:	e7d0      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (transformBlankCardIntoMooltipass() == RETURN_OK){
   81b3e:	4b17      	ldr	r3, [pc, #92]	; (81b9c <ctrl_scardaux_cb+0xd0>)
   81b40:	4798      	blx	r3
   81b42:	2800      	cmp	r0, #0
   81b44:	d1cc      	bne.n	81ae0 <ctrl_scardaux_cb+0x14>
					at88sc102_status = 1;
   81b46:	4b10      	ldr	r3, [pc, #64]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b48:	2201      	movs	r2, #1
   81b4a:	701a      	strb	r2, [r3, #0]
   81b4c:	e7c8      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 3) return;
   81b4e:	2b02      	cmp	r3, #2
   81b50:	d9c6      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+2)), *(udd_g_ctrlreq.payload+1));
   81b52:	7841      	ldrb	r1, [r0, #1]
   81b54:	8840      	ldrh	r0, [r0, #2]
   81b56:	4b0f      	ldr	r3, [pc, #60]	; (81b94 <ctrl_scardaux_cb+0xc8>)
   81b58:	4798      	blx	r3
   81b5a:	4b0b      	ldr	r3, [pc, #44]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b5c:	7018      	strb	r0, [r3, #0]
				break;
   81b5e:	e7bf      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = getNumberOfSecurityCodeTriesLeft();
   81b60:	4b0f      	ldr	r3, [pc, #60]	; (81ba0 <ctrl_scardaux_cb+0xd4>)
   81b62:	4798      	blx	r3
   81b64:	4a08      	ldr	r2, [pc, #32]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b66:	7010      	strb	r0, [r2, #0]
				udd_g_ctrlreq.payload = &at88sc102_status;
   81b68:	4b06      	ldr	r3, [pc, #24]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81b6a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
   81b6c:	2201      	movs	r2, #1
   81b6e:	819a      	strh	r2, [r3, #12]
				break;
   81b70:	e7b6      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				compareBit(15, 1);
   81b72:	2101      	movs	r1, #1
   81b74:	200f      	movs	r0, #15
   81b76:	4b0b      	ldr	r3, [pc, #44]	; (81ba4 <ctrl_scardaux_cb+0xd8>)
   81b78:	4798      	blx	r3
				at88sc102_status = 1; 
   81b7a:	4b03      	ldr	r3, [pc, #12]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b7c:	2201      	movs	r2, #1
   81b7e:	701a      	strb	r2, [r3, #0]
				break;
   81b80:	e7ae      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
   81b82:	bf00      	nop
   81b84:	20002dec 	.word	0x20002dec
   81b88:	2000262f 	.word	0x2000262f
   81b8c:	00080fed 	.word	0x00080fed
   81b90:	00080ec5 	.word	0x00080ec5
   81b94:	00080c0d 	.word	0x00080c0d
   81b98:	0008089d 	.word	0x0008089d
   81b9c:	00080935 	.word	0x00080935
   81ba0:	000809b9 	.word	0x000809b9
   81ba4:	00081011 	.word	0x00081011

00081ba8 <scard_reset_init>:

/* Reset Smart-Card Interface on SAM3U Device */
void scard_reset_init(void)
{
   81ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81bac:	b088      	sub	sp, #32
	usart_iso7816_opt_t conf_iso7816_t;
	conf_iso7816_t.iso7816_hz = ISO7816_BAUDRATE *ISO7816_FI_DI; //4000000UL;
   81bae:	4b31      	ldr	r3, [pc, #196]	; (81c74 <scard_reset_init+0xcc>)
   81bb0:	9300      	str	r3, [sp, #0]
	conf_iso7816_t.fidi_ratio = ISO7816_FI_DI;
   81bb2:	f44f 73ba 	mov.w	r3, #372	; 0x174
   81bb6:	9301      	str	r3, [sp, #4]
	conf_iso7816_t.parity_type= US_MR_PAR_EVEN;
   81bb8:	2300      	movs	r3, #0
   81bba:	9302      	str	r3, [sp, #8]
	conf_iso7816_t.inhibit_nack = 0x00;
   81bbc:	9303      	str	r3, [sp, #12]
	conf_iso7816_t.dis_suc_nack = 0x00;
   81bbe:	9304      	str	r3, [sp, #16]
	conf_iso7816_t.max_iterations = 0x03;
   81bc0:	2503      	movs	r5, #3
   81bc2:	9505      	str	r5, [sp, #20]
	conf_iso7816_t.bit_order = 0x00;
   81bc4:	9306      	str	r3, [sp, #24]
	conf_iso7816_t.protocol_type = 0x00;	/* T=0 Protocol */
   81bc6:	9307      	str	r3, [sp, #28]
   81bc8:	200f      	movs	r0, #15
   81bca:	4b2b      	ldr	r3, [pc, #172]	; (81c78 <scard_reset_init+0xd0>)
   81bcc:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	gpio_configure_pin(PIN_USART2_TXD, PIN_USART2_TXD_FLAGS);
   81bce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bd2:	2016      	movs	r0, #22
   81bd4:	4c29      	ldr	r4, [pc, #164]	; (81c7c <scard_reset_init+0xd4>)
   81bd6:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART2_SCK, PIN_USART2_SCK_FLAGS);
   81bd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81bdc:	2019      	movs	r0, #25
   81bde:	47a0      	blx	r4
	gpio_configure_pin(PIN_ISO7816_RST_IDX, PIN_ISO7816_RST_FLAG);
   81be0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81be4:	4628      	mov	r0, r5
   81be6:	47a0      	blx	r4
	iso7816_init(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz(), PIN_ISO7816_RST_IDX);
   81be8:	4c25      	ldr	r4, [pc, #148]	; (81c80 <scard_reset_init+0xd8>)
   81bea:	462b      	mov	r3, r5
   81bec:	4a25      	ldr	r2, [pc, #148]	; (81c84 <scard_reset_init+0xdc>)
   81bee:	4669      	mov	r1, sp
   81bf0:	4620      	mov	r0, r4
   81bf2:	4d25      	ldr	r5, [pc, #148]	; (81c88 <scard_reset_init+0xe0>)
   81bf4:	47a8      	blx	r5
	
	/* Reset (includes power off/on */
	iso7816_warm_reset(SCARD_USART);
   81bf6:	4620      	mov	r0, r4
   81bf8:	4b24      	ldr	r3, [pc, #144]	; (81c8c <scard_reset_init+0xe4>)
   81bfa:	4798      	blx	r3
	
	iso7816_data_block_atr(SCARD_USART, scard_atr, &scard_atr_size);
   81bfc:	4d24      	ldr	r5, [pc, #144]	; (81c90 <scard_reset_init+0xe8>)
   81bfe:	4e25      	ldr	r6, [pc, #148]	; (81c94 <scard_reset_init+0xec>)
   81c00:	462a      	mov	r2, r5
   81c02:	4631      	mov	r1, r6
   81c04:	4620      	mov	r0, r4
   81c06:	4b24      	ldr	r3, [pc, #144]	; (81c98 <scard_reset_init+0xf0>)
   81c08:	4798      	blx	r3
	scard_protocol = iso7816_decode_atr(SCARD_USART, scard_atr);
   81c0a:	4631      	mov	r1, r6
   81c0c:	4620      	mov	r0, r4
   81c0e:	4b23      	ldr	r3, [pc, #140]	; (81c9c <scard_reset_init+0xf4>)
   81c10:	4798      	blx	r3
   81c12:	4b23      	ldr	r3, [pc, #140]	; (81ca0 <scard_reset_init+0xf8>)
   81c14:	7018      	strb	r0, [r3, #0]
	
	printf("ATR (%d len): ", scard_atr_size);
   81c16:	7829      	ldrb	r1, [r5, #0]
   81c18:	4822      	ldr	r0, [pc, #136]	; (81ca4 <scard_reset_init+0xfc>)
   81c1a:	4b23      	ldr	r3, [pc, #140]	; (81ca8 <scard_reset_init+0x100>)
   81c1c:	4798      	blx	r3
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c1e:	782b      	ldrb	r3, [r5, #0]
   81c20:	b16b      	cbz	r3, 81c3e <scard_reset_init+0x96>
   81c22:	4635      	mov	r5, r6
   81c24:	2400      	movs	r4, #0
		printf("%02x ", scard_atr[i]);
   81c26:	f8df 8094 	ldr.w	r8, [pc, #148]	; 81cbc <scard_reset_init+0x114>
   81c2a:	4f1f      	ldr	r7, [pc, #124]	; (81ca8 <scard_reset_init+0x100>)
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c2c:	4e18      	ldr	r6, [pc, #96]	; (81c90 <scard_reset_init+0xe8>)
		printf("%02x ", scard_atr[i]);
   81c2e:	f815 1b01 	ldrb.w	r1, [r5], #1
   81c32:	4640      	mov	r0, r8
   81c34:	47b8      	blx	r7
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c36:	3401      	adds	r4, #1
   81c38:	7833      	ldrb	r3, [r6, #0]
   81c3a:	42a3      	cmp	r3, r4
   81c3c:	d8f7      	bhi.n	81c2e <scard_reset_init+0x86>
	}
	printf("\n");
   81c3e:	481b      	ldr	r0, [pc, #108]	; (81cac <scard_reset_init+0x104>)
   81c40:	4b19      	ldr	r3, [pc, #100]	; (81ca8 <scard_reset_init+0x100>)
   81c42:	4798      	blx	r3
	
	if (scard_protocol == 1) {
   81c44:	4b16      	ldr	r3, [pc, #88]	; (81ca0 <scard_reset_init+0xf8>)
   81c46:	781b      	ldrb	r3, [r3, #0]
   81c48:	2b01      	cmp	r3, #1
   81c4a:	d002      	beq.n	81c52 <scard_reset_init+0xaa>
		/* Enable TX and RX. */
		usart_enable_rx(SCARD_USART);
		usart_enable_tx(SCARD_USART);
	}

}
   81c4c:	b008      	add	sp, #32
   81c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conf_iso7816_t.protocol_type  = 1;
   81c52:	9307      	str	r3, [sp, #28]
		conf_iso7816_t.max_iterations = 0;
   81c54:	2300      	movs	r3, #0
   81c56:	9305      	str	r3, [sp, #20]
		usart_init_iso7816(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz());
   81c58:	4c09      	ldr	r4, [pc, #36]	; (81c80 <scard_reset_init+0xd8>)
   81c5a:	4a0a      	ldr	r2, [pc, #40]	; (81c84 <scard_reset_init+0xdc>)
   81c5c:	4669      	mov	r1, sp
   81c5e:	4620      	mov	r0, r4
   81c60:	4b13      	ldr	r3, [pc, #76]	; (81cb0 <scard_reset_init+0x108>)
   81c62:	4798      	blx	r3
		usart_enable_rx(SCARD_USART);
   81c64:	4620      	mov	r0, r4
   81c66:	4b13      	ldr	r3, [pc, #76]	; (81cb4 <scard_reset_init+0x10c>)
   81c68:	4798      	blx	r3
		usart_enable_tx(SCARD_USART);
   81c6a:	4620      	mov	r0, r4
   81c6c:	4b12      	ldr	r3, [pc, #72]	; (81cb8 <scard_reset_init+0x110>)
   81c6e:	4798      	blx	r3
}
   81c70:	e7ec      	b.n	81c4c <scard_reset_init+0xa4>
   81c72:	bf00      	nop
   81c74:	00367e00 	.word	0x00367e00
   81c78:	000854b1 	.word	0x000854b1
   81c7c:	0008516d 	.word	0x0008516d
   81c80:	40098000 	.word	0x40098000
   81c84:	05b8d800 	.word	0x05b8d800
   81c88:	00081969 	.word	0x00081969
   81c8c:	00081719 	.word	0x00081719
   81c90:	200025f4 	.word	0x200025f4
   81c94:	200025f8 	.word	0x200025f8
   81c98:	000815a5 	.word	0x000815a5
   81c9c:	0008179d 	.word	0x0008179d
   81ca0:	20002630 	.word	0x20002630
   81ca4:	0008e3a4 	.word	0x0008e3a4
   81ca8:	0008780d 	.word	0x0008780d
   81cac:	0008e498 	.word	0x0008e498
   81cb0:	00086b85 	.word	0x00086b85
   81cb4:	00086dcd 	.word	0x00086dcd
   81cb8:	00086dbd 	.word	0x00086dbd
   81cbc:	0008e3b4 	.word	0x0008e3b4

00081cc0 <ctrl_scardconfig_cb>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81cc0:	4b15      	ldr	r3, [pc, #84]	; (81d18 <ctrl_scardconfig_cb+0x58>)
   81cc2:	88da      	ldrh	r2, [r3, #6]
   81cc4:	899b      	ldrh	r3, [r3, #12]
   81cc6:	429a      	cmp	r2, r3
   81cc8:	d824      	bhi.n	81d14 <ctrl_scardconfig_cb+0x54>
{
   81cca:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81ccc:	4b12      	ldr	r3, [pc, #72]	; (81d18 <ctrl_scardconfig_cb+0x58>)
   81cce:	789b      	ldrb	r3, [r3, #2]
   81cd0:	2b01      	cmp	r3, #1
   81cd2:	d002      	beq.n	81cda <ctrl_scardconfig_cb+0x1a>
   81cd4:	2b05      	cmp	r3, #5
   81cd6:	d003      	beq.n	81ce0 <ctrl_scardconfig_cb+0x20>
}
   81cd8:	bd10      	pop	{r4, pc}
			scard_reset_init();
   81cda:	4b10      	ldr	r3, [pc, #64]	; (81d1c <ctrl_scardconfig_cb+0x5c>)
   81cdc:	4798      	blx	r3
			break;
   81cde:	e7fb      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
			scard_rx_buffer_size = 0;
   81ce0:	4b0f      	ldr	r3, [pc, #60]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81ce2:	2200      	movs	r2, #0
   81ce4:	801a      	strh	r2, [r3, #0]
			if (scard_protocol){
   81ce6:	4b0f      	ldr	r3, [pc, #60]	; (81d24 <ctrl_scardconfig_cb+0x64>)
   81ce8:	781b      	ldrb	r3, [r3, #0]
   81cea:	b14b      	cbz	r3, 81d00 <ctrl_scardconfig_cb+0x40>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t1(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81cec:	4b0e      	ldr	r3, [pc, #56]	; (81d28 <ctrl_scardconfig_cb+0x68>)
   81cee:	881b      	ldrh	r3, [r3, #0]
   81cf0:	4a0e      	ldr	r2, [pc, #56]	; (81d2c <ctrl_scardconfig_cb+0x6c>)
   81cf2:	490f      	ldr	r1, [pc, #60]	; (81d30 <ctrl_scardconfig_cb+0x70>)
   81cf4:	480f      	ldr	r0, [pc, #60]	; (81d34 <ctrl_scardconfig_cb+0x74>)
   81cf6:	4c10      	ldr	r4, [pc, #64]	; (81d38 <ctrl_scardconfig_cb+0x78>)
   81cf8:	47a0      	blx	r4
   81cfa:	4b09      	ldr	r3, [pc, #36]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81cfc:	8018      	strh	r0, [r3, #0]
   81cfe:	e7eb      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t0(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81d00:	4b09      	ldr	r3, [pc, #36]	; (81d28 <ctrl_scardconfig_cb+0x68>)
   81d02:	881b      	ldrh	r3, [r3, #0]
   81d04:	4a09      	ldr	r2, [pc, #36]	; (81d2c <ctrl_scardconfig_cb+0x6c>)
   81d06:	490a      	ldr	r1, [pc, #40]	; (81d30 <ctrl_scardconfig_cb+0x70>)
   81d08:	480a      	ldr	r0, [pc, #40]	; (81d34 <ctrl_scardconfig_cb+0x74>)
   81d0a:	4c0c      	ldr	r4, [pc, #48]	; (81d3c <ctrl_scardconfig_cb+0x7c>)
   81d0c:	47a0      	blx	r4
   81d0e:	4b04      	ldr	r3, [pc, #16]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81d10:	8018      	strh	r0, [r3, #0]
   81d12:	e7e1      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
   81d14:	4770      	bx	lr
   81d16:	bf00      	nop
   81d18:	20002dec 	.word	0x20002dec
   81d1c:	00081ba9 	.word	0x00081ba9
   81d20:	200024f0 	.word	0x200024f0
   81d24:	20002630 	.word	0x20002630
   81d28:	20002632 	.word	0x20002632
   81d2c:	200024f4 	.word	0x200024f4
   81d30:	200023f0 	.word	0x200023f0
   81d34:	40098000 	.word	0x40098000
   81d38:	000813b9 	.word	0x000813b9
   81d3c:	000811dd 	.word	0x000811dd

00081d40 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81d40:	b510      	push	{r4, lr}
   81d42:	4604      	mov	r4, r0
	int ret = 0;
	cpu_irq_enter_critical();
   81d44:	4b06      	ldr	r3, [pc, #24]	; (81d60 <FPGA_setlock+0x20>)
   81d46:	4798      	blx	r3
	if (_fpga_locked == fpga_unlocked)
   81d48:	4b06      	ldr	r3, [pc, #24]	; (81d64 <FPGA_setlock+0x24>)
   81d4a:	781b      	ldrb	r3, [r3, #0]
   81d4c:	b933      	cbnz	r3, 81d5c <FPGA_setlock+0x1c>
	{
		ret = 1;
		_fpga_locked = lockstatus;	
   81d4e:	4b05      	ldr	r3, [pc, #20]	; (81d64 <FPGA_setlock+0x24>)
   81d50:	701c      	strb	r4, [r3, #0]
		ret = 1;
   81d52:	2401      	movs	r4, #1
	}
	cpu_irq_leave_critical();
   81d54:	4b04      	ldr	r3, [pc, #16]	; (81d68 <FPGA_setlock+0x28>)
   81d56:	4798      	blx	r3
	return ret;
}
   81d58:	4620      	mov	r0, r4
   81d5a:	bd10      	pop	{r4, pc}
	int ret = 0;
   81d5c:	2400      	movs	r4, #0
   81d5e:	e7f9      	b.n	81d54 <FPGA_setlock+0x14>
   81d60:	00084e59 	.word	0x00084e59
   81d64:	20001921 	.word	0x20001921
   81d68:	00084e95 	.word	0x00084e95

00081d6c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
	_fpga_locked = fpga_unlocked;
   81d6c:	4b01      	ldr	r3, [pc, #4]	; (81d74 <FPGA_releaselock+0x8>)
   81d6e:	2200      	movs	r2, #0
   81d70:	701a      	strb	r2, [r3, #0]
}
   81d72:	4770      	bx	lr
   81d74:	20001921 	.word	0x20001921

00081d78 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
	return _fpga_locked;
   81d78:	4b01      	ldr	r3, [pc, #4]	; (81d80 <FPGA_lockstatus+0x8>)
   81d7a:	7818      	ldrb	r0, [r3, #0]
}
   81d7c:	4770      	bx	lr
   81d7e:	bf00      	nop
   81d80:	20001921 	.word	0x20001921

00081d84 <FPGA_setaddr>:
	FPGA_releaselock();
	cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81d84:	b508      	push	{r3, lr}
   81d86:	4601      	mov	r1, r0
	pio_sync_output_write(FPGA_ADDR_PORT, addr);
   81d88:	4804      	ldr	r0, [pc, #16]	; (81d9c <FPGA_setaddr+0x18>)
   81d8a:	4b05      	ldr	r3, [pc, #20]	; (81da0 <FPGA_setaddr+0x1c>)
   81d8c:	4798      	blx	r3
	gpio_set_pin_low(FPGA_ALE_GPIO);
   81d8e:	2035      	movs	r0, #53	; 0x35
   81d90:	4b04      	ldr	r3, [pc, #16]	; (81da4 <FPGA_setaddr+0x20>)
   81d92:	4798      	blx	r3
	gpio_set_pin_high(FPGA_ALE_GPIO);
   81d94:	2035      	movs	r0, #53	; 0x35
   81d96:	4b04      	ldr	r3, [pc, #16]	; (81da8 <FPGA_setaddr+0x24>)
   81d98:	4798      	blx	r3
}
   81d9a:	bd08      	pop	{r3, pc}
   81d9c:	400e0e00 	.word	0x400e0e00
   81da0:	0008510f 	.word	0x0008510f
   81da4:	00085151 	.word	0x00085151
   81da8:	00085137 	.word	0x00085137

00081dac <smc_normaltiming>:
		*(xram+i) = data[i];
	}
}

//Set timing for normal mode
void smc_normaltiming(void){
   81dac:	b510      	push	{r4, lr}
	smc_set_setup_timing(SMC, 0,
   81dae:	4c0b      	ldr	r4, [pc, #44]	; (81ddc <smc_normaltiming+0x30>)
   81db0:	f44f 7280 	mov.w	r2, #256	; 0x100
   81db4:	2100      	movs	r1, #0
   81db6:	4620      	mov	r0, r4
   81db8:	4b09      	ldr	r3, [pc, #36]	; (81de0 <smc_normaltiming+0x34>)
   81dba:	4798      	blx	r3
	SMC_SETUP_NCS_WR_SETUP(1) |
	SMC_SETUP_NRD_SETUP(0) |
	SMC_SETUP_NCS_RD_SETUP(0)
	);
	
	smc_set_pulse_timing(SMC, 0,
   81dbc:	4a09      	ldr	r2, [pc, #36]	; (81de4 <smc_normaltiming+0x38>)
   81dbe:	2100      	movs	r1, #0
   81dc0:	4620      	mov	r0, r4
   81dc2:	4b09      	ldr	r3, [pc, #36]	; (81de8 <smc_normaltiming+0x3c>)
   81dc4:	4798      	blx	r3
	SMC_PULSE_NCS_WR_PULSE(1) |
	SMC_PULSE_NRD_PULSE(4) |
	SMC_PULSE_NCS_RD_PULSE(4)
	);
	
	smc_set_cycle_timing(SMC, 0,
   81dc6:	4a09      	ldr	r2, [pc, #36]	; (81dec <smc_normaltiming+0x40>)
   81dc8:	2100      	movs	r1, #0
   81dca:	4620      	mov	r0, r4
   81dcc:	4b08      	ldr	r3, [pc, #32]	; (81df0 <smc_normaltiming+0x44>)
   81dce:	4798      	blx	r3
	SMC_CYCLE_NWE_CYCLE(2) |
	SMC_CYCLE_NRD_CYCLE(5)
	);
	
	smc_set_mode(SMC, 0,
   81dd0:	2203      	movs	r2, #3
   81dd2:	2100      	movs	r1, #0
   81dd4:	4620      	mov	r0, r4
   81dd6:	4b07      	ldr	r3, [pc, #28]	; (81df4 <smc_normaltiming+0x48>)
   81dd8:	4798      	blx	r3
	SMC_MODE_READ_MODE_NRD_CTRL |
	SMC_MODE_WRITE_MODE_NWE_CTRL |
	SMC_MODE_DBW_BIT_8
	);
}
   81dda:	bd10      	pop	{r4, pc}
   81ddc:	400e0000 	.word	0x400e0000
   81de0:	00085041 	.word	0x00085041
   81de4:	04040101 	.word	0x04040101
   81de8:	0008504d 	.word	0x0008504d
   81dec:	00050002 	.word	0x00050002
   81df0:	00085059 	.word	0x00085059
   81df4:	00085065 	.word	0x00085065

00081df8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81df8:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81dfa:	f1a1 030e 	sub.w	r3, r1, #14
   81dfe:	2b01      	cmp	r3, #1
   81e00:	d802      	bhi.n	81e08 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   81e02:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   81e06:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e08:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   81e0c:	b672      	cpsid	i
   81e0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81e12:	2500      	movs	r5, #0
   81e14:	4b0a      	ldr	r3, [pc, #40]	; (81e40 <efc_perform_command+0x48>)
   81e16:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81e18:	0212      	lsls	r2, r2, #8
   81e1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   81e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   81e22:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   81e26:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   81e28:	4311      	orrs	r1, r2
   81e2a:	4b06      	ldr	r3, [pc, #24]	; (81e44 <efc_perform_command+0x4c>)
   81e2c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   81e2e:	2c00      	cmp	r4, #0
   81e30:	d1e9      	bne.n	81e06 <efc_perform_command+0xe>
		cpu_irq_enable();
   81e32:	2201      	movs	r2, #1
   81e34:	4b02      	ldr	r3, [pc, #8]	; (81e40 <efc_perform_command+0x48>)
   81e36:	701a      	strb	r2, [r3, #0]
   81e38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81e3c:	b662      	cpsie	i
   81e3e:	bd38      	pop	{r3, r4, r5, pc}
   81e40:	200006ea 	.word	0x200006ea
   81e44:	2000006d 	.word	0x2000006d

00081e48 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81e48:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e4a:	0189      	lsls	r1, r1, #6
   81e4c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81e4e:	2402      	movs	r4, #2
   81e50:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81e52:	f04f 31ff 	mov.w	r1, #4294967295
   81e56:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81e58:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81e5a:	605a      	str	r2, [r3, #4]
}
   81e5c:	bc10      	pop	{r4}
   81e5e:	4770      	bx	lr

00081e60 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81e60:	0189      	lsls	r1, r1, #6
   81e62:	2305      	movs	r3, #5
   81e64:	5043      	str	r3, [r0, r1]
   81e66:	4770      	bx	lr

00081e68 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81e68:	0189      	lsls	r1, r1, #6
   81e6a:	2302      	movs	r3, #2
   81e6c:	5043      	str	r3, [r0, r1]
   81e6e:	4770      	bx	lr

00081e70 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81e70:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81e74:	61ca      	str	r2, [r1, #28]
   81e76:	4770      	bx	lr

00081e78 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e78:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81e7c:	624a      	str	r2, [r1, #36]	; 0x24
   81e7e:	4770      	bx	lr

00081e80 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e80:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81e84:	6a08      	ldr	r0, [r1, #32]
}
   81e86:	4770      	bx	lr

00081e88 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81e88:	b570      	push	{r4, r5, r6, lr}
   81e8a:	b086      	sub	sp, #24
   81e8c:	4604      	mov	r4, r0
   81e8e:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81e90:	2304      	movs	r3, #4
   81e92:	9300      	str	r3, [sp, #0]
   81e94:	ab02      	add	r3, sp, #8
   81e96:	220f      	movs	r2, #15
   81e98:	210e      	movs	r1, #14
   81e9a:	480d      	ldr	r0, [pc, #52]	; (81ed0 <flash_read_unique_id+0x48>)
   81e9c:	4d0d      	ldr	r5, [pc, #52]	; (81ed4 <flash_read_unique_id+0x4c>)
   81e9e:	47a8      	blx	r5
   81ea0:	b118      	cbz	r0, 81eaa <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81ea2:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   81ea4:	4628      	mov	r0, r5
   81ea6:	b006      	add	sp, #24
   81ea8:	bd70      	pop	{r4, r5, r6, pc}
   81eaa:	4605      	mov	r5, r0
   81eac:	2e04      	cmp	r6, #4
   81eae:	bf28      	it	cs
   81eb0:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81eb2:	b156      	cbz	r6, 81eca <flash_read_unique_id+0x42>
   81eb4:	aa02      	add	r2, sp, #8
   81eb6:	4623      	mov	r3, r4
   81eb8:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   81ebc:	f852 0b04 	ldr.w	r0, [r2], #4
   81ec0:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81ec4:	428b      	cmp	r3, r1
   81ec6:	d1f9      	bne.n	81ebc <flash_read_unique_id+0x34>
   81ec8:	e7ec      	b.n	81ea4 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   81eca:	4635      	mov	r5, r6
   81ecc:	e7ea      	b.n	81ea4 <flash_read_unique_id+0x1c>
   81ece:	bf00      	nop
   81ed0:	400e0800 	.word	0x400e0800
   81ed4:	20000001 	.word	0x20000001

00081ed8 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   81ed8:	2300      	movs	r3, #0
   81eda:	6043      	str	r3, [r0, #4]
   81edc:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   81ede:	6083      	str	r3, [r0, #8]
}
   81ee0:	4770      	bx	lr
	...

00081ee4 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81ee4:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   81ee6:	b672      	cpsid	i
   81ee8:	f3bf 8f5f 	dmb	sy
    // Add char to buffer
	cpu_irq_disable();
   81eec:	4b11      	ldr	r3, [pc, #68]	; (81f34 <add_to_circ_buf+0x50>)
   81eee:	2400      	movs	r4, #0
   81ef0:	701c      	strb	r4, [r3, #0]
    unsigned int newhead = cbuf->head;
   81ef2:	6804      	ldr	r4, [r0, #0]
    newhead++;
   81ef4:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   81ef6:	2cc8      	cmp	r4, #200	; 0xc8
   81ef8:	bf28      	it	cs
   81efa:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   81efc:	6843      	ldr	r3, [r0, #4]
   81efe:	42a3      	cmp	r3, r4
   81f00:	d10b      	bne.n	81f1a <add_to_circ_buf+0x36>
    {
        if (!block)
   81f02:	2a00      	cmp	r2, #0
   81f04:	d1fa      	bne.n	81efc <add_to_circ_buf+0x18>
        {
            cbuf->dropped++;
   81f06:	6883      	ldr	r3, [r0, #8]
   81f08:	3301      	adds	r3, #1
   81f0a:	6083      	str	r3, [r0, #8]
			cpu_irq_enable();
   81f0c:	4b09      	ldr	r3, [pc, #36]	; (81f34 <add_to_circ_buf+0x50>)
   81f0e:	2201      	movs	r2, #1
   81f10:	701a      	strb	r2, [r3, #0]
   81f12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f16:	b662      	cpsie	i
            return;
   81f18:	e009      	b.n	81f2e <add_to_circ_buf+0x4a>
        //TODO: Need to add processing here if you want a blocking
		//      function.
        
    }

    cbuf->buf[cbuf->head] = ch;
   81f1a:	6803      	ldr	r3, [r0, #0]
   81f1c:	4403      	add	r3, r0
   81f1e:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   81f20:	6004      	str	r4, [r0, #0]
	cpu_irq_enable();
   81f22:	4b04      	ldr	r3, [pc, #16]	; (81f34 <add_to_circ_buf+0x50>)
   81f24:	2201      	movs	r2, #1
   81f26:	701a      	strb	r2, [r3, #0]
   81f28:	f3bf 8f5f 	dmb	sy
   81f2c:	b662      	cpsie	i
}
   81f2e:	bc10      	pop	{r4}
   81f30:	4770      	bx	lr
   81f32:	bf00      	nop
   81f34:	200006ea 	.word	0x200006ea

00081f38 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81f38:	4602      	mov	r2, r0
  __ASM volatile ("cpsid i");
   81f3a:	b672      	cpsid	i
   81f3c:	f3bf 8f5f 	dmb	sy
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
	cpu_irq_disable();
   81f40:	4b0e      	ldr	r3, [pc, #56]	; (81f7c <get_from_circ_buf+0x44>)
   81f42:	2100      	movs	r1, #0
   81f44:	7019      	strb	r1, [r3, #0]
    unsigned int newtail = cbuf->tail;
   81f46:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   81f48:	18c1      	adds	r1, r0, r3
   81f4a:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head) {
   81f4c:	6811      	ldr	r1, [r2, #0]
   81f4e:	4299      	cmp	r1, r3
   81f50:	d00b      	beq.n	81f6a <get_from_circ_buf+0x32>
		cpu_irq_enable();
        return SERIAL_ERR;
	}

    newtail++;
   81f52:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   81f54:	2bc8      	cmp	r3, #200	; 0xc8
   81f56:	bf28      	it	cs
   81f58:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   81f5a:	6053      	str	r3, [r2, #4]

	cpu_irq_enable();
   81f5c:	4b07      	ldr	r3, [pc, #28]	; (81f7c <get_from_circ_buf+0x44>)
   81f5e:	2201      	movs	r2, #1
   81f60:	701a      	strb	r2, [r3, #0]
   81f62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f66:	b662      	cpsie	i
    return retval;
}
   81f68:	4770      	bx	lr
		cpu_irq_enable();
   81f6a:	4b04      	ldr	r3, [pc, #16]	; (81f7c <get_from_circ_buf+0x44>)
   81f6c:	2201      	movs	r2, #1
   81f6e:	701a      	strb	r2, [r3, #0]
   81f70:	f3bf 8f5f 	dmb	sy
   81f74:	b662      	cpsie	i
        return SERIAL_ERR;
   81f76:	20ff      	movs	r0, #255	; 0xff
   81f78:	4770      	bx	lr
   81f7a:	bf00      	nop
   81f7c:	200006ea 	.word	0x200006ea

00081f80 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81f80:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   81f82:	6840      	ldr	r0, [r0, #4]
}
   81f84:	1ac0      	subs	r0, r0, r3
   81f86:	bf18      	it	ne
   81f88:	2001      	movne	r0, #1
   81f8a:	4770      	bx	lr

00081f8c <circ_buf_count>:
  __ASM volatile ("cpsid i");
   81f8c:	b672      	cpsid	i
   81f8e:	f3bf 8f5f 	dmb	sy
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

	cpu_irq_disable();
   81f92:	4b07      	ldr	r3, [pc, #28]	; (81fb0 <circ_buf_count+0x24>)
   81f94:	2200      	movs	r2, #0
   81f96:	701a      	strb	r2, [r3, #0]
    count = cbuf->head;
   81f98:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   81f9a:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   81f9c:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   81f9e:	bf48      	it	mi
   81fa0:	30c8      	addmi	r0, #200	; 0xc8
		
	cpu_irq_enable();
   81fa2:	4b03      	ldr	r3, [pc, #12]	; (81fb0 <circ_buf_count+0x24>)
   81fa4:	2201      	movs	r2, #1
   81fa6:	701a      	strb	r2, [r3, #0]
   81fa8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81fac:	b662      	cpsie	i
    return (unsigned int)count;
}
   81fae:	4770      	bx	lr
   81fb0:	200006ea 	.word	0x200006ea

00081fb4 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   81fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fb8:	b08d      	sub	sp, #52	; 0x34
   81fba:	9103      	str	r1, [sp, #12]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   81fbc:	4b92      	ldr	r3, [pc, #584]	; (82208 <ISPProtocol_ProgramMemory+0x254>)
   81fbe:	8999      	ldrh	r1, [r3, #12]
   81fc0:	2909      	cmp	r1, #9
   81fc2:	d005      	beq.n	81fd0 <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   81fc4:	4891      	ldr	r0, [pc, #580]	; (8220c <ISPProtocol_ProgramMemory+0x258>)
   81fc6:	4b92      	ldr	r3, [pc, #584]	; (82210 <ISPProtocol_ProgramMemory+0x25c>)
   81fc8:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   81fca:	b00d      	add	sp, #52	; 0x34
   81fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fd0:	4683      	mov	fp, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   81fd2:	4b8d      	ldr	r3, [pc, #564]	; (82208 <ISPProtocol_ProgramMemory+0x254>)
   81fd4:	689a      	ldr	r2, [r3, #8]
   81fd6:	ab09      	add	r3, sp, #36	; 0x24
   81fd8:	6810      	ldr	r0, [r2, #0]
   81fda:	6851      	ldr	r1, [r2, #4]
   81fdc:	c303      	stmia	r3!, {r0, r1}
   81fde:	8912      	ldrh	r2, [r2, #8]
   81fe0:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   81fe2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   81fe6:	9305      	str	r3, [sp, #20]
   81fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   81fec:	d813      	bhi.n	82016 <ISPProtocol_ProgramMemory+0x62>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   81fee:	f1bb 0f13 	cmp.w	fp, #19
   81ff2:	bf0c      	ite	eq
   81ff4:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   81ff8:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   81ffc:	9306      	str	r3, [sp, #24]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   81ffe:	4b85      	ldr	r3, [pc, #532]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   82000:	681b      	ldr	r3, [r3, #0]
   82002:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   82004:	9b05      	ldr	r3, [sp, #20]
   82006:	2b00      	cmp	r3, #0
   82008:	d043      	beq.n	82092 <ISPProtocol_ProgramMemory+0xde>
   8200a:	2400      	movs	r4, #0
	uint16_t PollAddress       = 0;
   8200c:	9404      	str	r4, [sp, #16]
			MustLoadExtendedAddress = false;
   8200e:	4627      	mov	r7, r4
   82010:	f8cd b008 	str.w	fp, [sp, #8]
   82014:	e0a6      	b.n	82164 <ISPProtocol_ProgramMemory+0x1b0>
		avrisp_status_payload[0] = V2Command;
   82016:	4b80      	ldr	r3, [pc, #512]	; (82218 <ISPProtocol_ProgramMemory+0x264>)
   82018:	f883 b000 	strb.w	fp, [r3]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8201c:	22c0      	movs	r2, #192	; 0xc0
   8201e:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   82020:	4b7e      	ldr	r3, [pc, #504]	; (8221c <ISPProtocol_ProgramMemory+0x268>)
   82022:	2202      	movs	r2, #2
   82024:	801a      	strh	r2, [r3, #0]
		return;
   82026:	e7d0      	b.n	81fca <ISPProtocol_ProgramMemory+0x16>
			ISPTarget_LoadExtendedAddress();
   82028:	4b7d      	ldr	r3, [pc, #500]	; (82220 <ISPProtocol_ProgramMemory+0x26c>)
   8202a:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   8202c:	4b7d      	ldr	r3, [pc, #500]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   8202e:	701f      	strb	r7, [r3, #0]
   82030:	e0a3      	b.n	8217a <ISPProtocol_ProgramMemory+0x1c6>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   82032:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82036:	f043 0308 	orr.w	r3, r3, #8
   8203a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   8203e:	4b75      	ldr	r3, [pc, #468]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   82040:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82042:	f018 0f01 	tst.w	r8, #1
   82046:	f000 80d4 	beq.w	821f2 <ISPProtocol_ProgramMemory+0x23e>
			PollAddress = (CurrentAddress & 0xFFFF);
   8204a:	9304      	str	r3, [sp, #16]
			CurrentAddress++;
   8204c:	4a71      	ldr	r2, [pc, #452]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8204e:	6813      	ldr	r3, [r2, #0]
   82050:	3301      	adds	r3, #1
   82052:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82054:	9a02      	ldr	r2, [sp, #8]
   82056:	2a13      	cmp	r2, #19
   82058:	d17f      	bne.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
   8205a:	b29b      	uxth	r3, r3
   8205c:	2b00      	cmp	r3, #0
   8205e:	d17c      	bne.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
			  MustLoadExtendedAddress = true;
   82060:	2301      	movs	r3, #1
   82062:	4a70      	ldr	r2, [pc, #448]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82064:	7013      	strb	r3, [r2, #0]
   82066:	e078      	b.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
   82068:	9304      	str	r3, [sp, #16]
   8206a:	e061      	b.n	82130 <ISPProtocol_ProgramMemory+0x17c>
			PollAddress = (CurrentAddress & 0xFFFF);
   8206c:	9304      	str	r3, [sp, #16]
   8206e:	e06d      	b.n	8214c <ISPProtocol_ProgramMemory+0x198>
   82070:	f8dd b008 	ldr.w	fp, [sp, #8]
   82074:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   82076:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
   8207a:	f99d 4026 	ldrsb.w	r4, [sp, #38]	; 0x26
   8207e:	2c00      	cmp	r4, #0
   82080:	db0e      	blt.n	820a0 <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   82082:	4a65      	ldr	r2, [pc, #404]	; (82218 <ISPProtocol_ProgramMemory+0x264>)
   82084:	f882 b000 	strb.w	fp, [r2]
	avrisp_status_payload[1] = ProgrammingStatus;
   82088:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   8208a:	4b64      	ldr	r3, [pc, #400]	; (8221c <ISPProtocol_ProgramMemory+0x268>)
   8208c:	2202      	movs	r2, #2
   8208e:	801a      	strh	r2, [r3, #0]
   82090:	e79b      	b.n	81fca <ISPProtocol_ProgramMemory+0x16>
	uint16_t PollAddress       = 0;
   82092:	9b05      	ldr	r3, [sp, #20]
   82094:	9304      	str	r3, [sp, #16]
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   82096:	2300      	movs	r3, #0
   82098:	e7ed      	b.n	82076 <ISPProtocol_ProgramMemory+0xc2>
   8209a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8209e:	e7ea      	b.n	82076 <ISPProtocol_ProgramMemory+0xc2>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   820a0:	4f61      	ldr	r7, [pc, #388]	; (82228 <ISPProtocol_ProgramMemory+0x274>)
   820a2:	2300      	movs	r3, #0
   820a4:	461a      	mov	r2, r3
   820a6:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   820aa:	4638      	mov	r0, r7
   820ac:	4e5f      	ldr	r6, [pc, #380]	; (8222c <ISPProtocol_ProgramMemory+0x278>)
   820ae:	47b0      	blx	r6
   820b0:	2300      	movs	r3, #0
   820b2:	461a      	mov	r2, r3
   820b4:	9907      	ldr	r1, [sp, #28]
   820b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   820ba:	4638      	mov	r0, r7
   820bc:	47b0      	blx	r6
   820be:	2300      	movs	r3, #0
   820c0:	461a      	mov	r2, r3
   820c2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   820c6:	4638      	mov	r0, r7
   820c8:	47b0      	blx	r6
   820ca:	2300      	movs	r3, #0
   820cc:	461a      	mov	r2, r3
   820ce:	4619      	mov	r1, r3
   820d0:	4638      	mov	r0, r7
   820d2:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   820d4:	f015 0f20 	tst.w	r5, #32
   820d8:	d007      	beq.n	820ea <ISPProtocol_ProgramMemory+0x136>
   820da:	9b04      	ldr	r3, [sp, #16]
   820dc:	b92b      	cbnz	r3, 820ea <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   820de:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   820e2:	f043 0310 	orr.w	r3, r3, #16
   820e6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   820ea:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   820ee:	9300      	str	r3, [sp, #0]
   820f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   820f4:	9a06      	ldr	r2, [sp, #24]
   820f6:	9904      	ldr	r1, [sp, #16]
   820f8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   820fc:	4c4c      	ldr	r4, [pc, #304]	; (82230 <ISPProtocol_ProgramMemory+0x27c>)
   820fe:	47a0      	blx	r4
   82100:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82102:	f1bb 0f13 	cmp.w	fp, #19
   82106:	d1bc      	bne.n	82082 <ISPProtocol_ProgramMemory+0xce>
   82108:	4a42      	ldr	r2, [pc, #264]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8210a:	8812      	ldrh	r2, [r2, #0]
   8210c:	2a00      	cmp	r2, #0
   8210e:	d1b8      	bne.n	82082 <ISPProtocol_ProgramMemory+0xce>
		  MustLoadExtendedAddress = true;
   82110:	4a44      	ldr	r2, [pc, #272]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82112:	2101      	movs	r1, #1
   82114:	7011      	strb	r1, [r2, #0]
   82116:	e7b4      	b.n	82082 <ISPProtocol_ProgramMemory+0xce>
			CurrentAddress++;
   82118:	4a3e      	ldr	r2, [pc, #248]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8211a:	6813      	ldr	r3, [r2, #0]
   8211c:	3301      	adds	r3, #1
   8211e:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82120:	e01b      	b.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82122:	f018 0f01 	tst.w	r8, #1
   82126:	d067      	beq.n	821f8 <ISPProtocol_ProgramMemory+0x244>
   82128:	e010      	b.n	8214c <ISPProtocol_ProgramMemory+0x198>
   8212a:	f018 0f01 	tst.w	r8, #1
   8212e:	d10d      	bne.n	8214c <ISPProtocol_ProgramMemory+0x198>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   82130:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82134:	9300      	str	r3, [sp, #0]
   82136:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8213a:	9a06      	ldr	r2, [sp, #24]
   8213c:	9904      	ldr	r1, [sp, #16]
   8213e:	4640      	mov	r0, r8
   82140:	4d3b      	ldr	r5, [pc, #236]	; (82230 <ISPProtocol_ProgramMemory+0x27c>)
   82142:	47a8      	blx	r5
			if (ProgrammingStatus != STATUS_CMD_OK)
   82144:	4603      	mov	r3, r0
   82146:	2800      	cmp	r0, #0
   82148:	d1a7      	bne.n	8209a <ISPProtocol_ProgramMemory+0xe6>
			PollAddress = 0;
   8214a:	9704      	str	r7, [sp, #16]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   8214c:	f014 0f01 	tst.w	r4, #1
   82150:	f47f af7c 	bne.w	8204c <ISPProtocol_ProgramMemory+0x98>
   82154:	9b02      	ldr	r3, [sp, #8]
   82156:	2b15      	cmp	r3, #21
   82158:	d0de      	beq.n	82118 <ISPProtocol_ProgramMemory+0x164>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   8215a:	3401      	adds	r4, #1
   8215c:	b2a4      	uxth	r4, r4
   8215e:	9b05      	ldr	r3, [sp, #20]
   82160:	42a3      	cmp	r3, r4
   82162:	d085      	beq.n	82070 <ISPProtocol_ProgramMemory+0xbc>
		uint8_t ByteToWrite     = *(NextWriteByte++);
   82164:	9b03      	ldr	r3, [sp, #12]
   82166:	f813 bb01 	ldrb.w	fp, [r3], #1
   8216a:	9303      	str	r3, [sp, #12]
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   8216c:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   82170:	4b2c      	ldr	r3, [pc, #176]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82172:	781b      	ldrb	r3, [r3, #0]
   82174:	2b00      	cmp	r3, #0
   82176:	f47f af57 	bne.w	82028 <ISPProtocol_ProgramMemory+0x74>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   8217a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   8217e:	4e2a      	ldr	r6, [pc, #168]	; (82228 <ISPProtocol_ProgramMemory+0x274>)
   82180:	463b      	mov	r3, r7
   82182:	463a      	mov	r2, r7
   82184:	4649      	mov	r1, r9
   82186:	4630      	mov	r0, r6
   82188:	4d28      	ldr	r5, [pc, #160]	; (8222c <ISPProtocol_ProgramMemory+0x278>)
   8218a:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   8218c:	f8df a084 	ldr.w	sl, [pc, #132]	; 82214 <ISPProtocol_ProgramMemory+0x260>
   82190:	463b      	mov	r3, r7
   82192:	463a      	mov	r2, r7
   82194:	f89a 1001 	ldrb.w	r1, [sl, #1]
   82198:	4630      	mov	r0, r6
   8219a:	47a8      	blx	r5
   8219c:	463b      	mov	r3, r7
   8219e:	463a      	mov	r2, r7
   821a0:	f89a 1000 	ldrb.w	r1, [sl]
   821a4:	4630      	mov	r0, r6
   821a6:	47a8      	blx	r5
   821a8:	463b      	mov	r3, r7
   821aa:	463a      	mov	r2, r7
   821ac:	4659      	mov	r1, fp
   821ae:	4630      	mov	r0, r6
   821b0:	47a8      	blx	r5
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   821b2:	9b02      	ldr	r3, [sp, #8]
   821b4:	2b13      	cmp	r3, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   821b6:	bf04      	itt	eq
   821b8:	f089 0908 	eoreq.w	r9, r9, #8
   821bc:	f88d 9028 	strbeq.w	r9, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   821c0:	9b04      	ldr	r3, [sp, #16]
   821c2:	2b00      	cmp	r3, #0
   821c4:	d1b1      	bne.n	8212a <ISPProtocol_ProgramMemory+0x176>
   821c6:	9b06      	ldr	r3, [sp, #24]
   821c8:	455b      	cmp	r3, fp
   821ca:	d0aa      	beq.n	82122 <ISPProtocol_ProgramMemory+0x16e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   821cc:	f014 0f01 	tst.w	r4, #1
   821d0:	d003      	beq.n	821da <ISPProtocol_ProgramMemory+0x226>
   821d2:	9b02      	ldr	r3, [sp, #8]
   821d4:	2b13      	cmp	r3, #19
   821d6:	f43f af2c 	beq.w	82032 <ISPProtocol_ProgramMemory+0x7e>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   821da:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   821de:	f023 0308 	bic.w	r3, r3, #8
   821e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   821e6:	4b0b      	ldr	r3, [pc, #44]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   821e8:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   821ea:	f018 0f01 	tst.w	r8, #1
   821ee:	f47f af3d 	bne.w	8206c <ISPProtocol_ProgramMemory+0xb8>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   821f2:	2b00      	cmp	r3, #0
   821f4:	f47f af38 	bne.w	82068 <ISPProtocol_ProgramMemory+0xb4>
   821f8:	f018 0f08 	tst.w	r8, #8
   821fc:	d198      	bne.n	82130 <ISPProtocol_ProgramMemory+0x17c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   821fe:	f028 0806 	bic.w	r8, r8, #6
   82202:	f048 0802 	orr.w	r8, r8, #2
   82206:	e793      	b.n	82130 <ISPProtocol_ProgramMemory+0x17c>
   82208:	20002dec 	.word	0x20002dec
   8220c:	0008e414 	.word	0x0008e414
   82210:	0008780d 	.word	0x0008780d
   82214:	20002658 	.word	0x20002658
   82218:	20002638 	.word	0x20002638
   8221c:	20002636 	.word	0x20002636
   82220:	00082895 	.word	0x00082895
   82224:	20002634 	.word	0x20002634
   82228:	40008000 	.word	0x40008000
   8222c:	0008559f 	.word	0x0008559f
   82230:	000828d5 	.word	0x000828d5

00082234 <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   82234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82238:	b085      	sub	sp, #20
   8223a:	9000      	str	r0, [sp, #0]
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   8223c:	4b45      	ldr	r3, [pc, #276]	; (82354 <ISPProtocol_ReadMemory+0x120>)
   8223e:	899b      	ldrh	r3, [r3, #12]
   82240:	2b03      	cmp	r3, #3
   82242:	d118      	bne.n	82276 <ISPProtocol_ReadMemory+0x42>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   82244:	4b43      	ldr	r3, [pc, #268]	; (82354 <ISPProtocol_ReadMemory+0x120>)
   82246:	689b      	ldr	r3, [r3, #8]
   82248:	681b      	ldr	r3, [r3, #0]
   8224a:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   8224c:	4a42      	ldr	r2, [pc, #264]	; (82358 <ISPProtocol_ReadMemory+0x124>)
   8224e:	9800      	ldr	r0, [sp, #0]
   82250:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82252:	20c0      	movs	r0, #192	; 0xc0
   82254:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   82256:	4a41      	ldr	r2, [pc, #260]	; (8235c <ISPProtocol_ReadMemory+0x128>)
   82258:	2002      	movs	r0, #2
   8225a:	8010      	strh	r0, [r2, #0]
		
	//printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   8225c:	b29b      	uxth	r3, r3
   8225e:	9301      	str	r3, [sp, #4]
   82260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82264:	d872      	bhi.n	8234c <ISPProtocol_ReadMemory+0x118>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   82266:	2b00      	cmp	r3, #0
   82268:	d06a      	beq.n	82340 <ISPProtocol_ReadMemory+0x10c>
   8226a:	f101 38ff 	add.w	r8, r1, #4294967295
   8226e:	2700      	movs	r7, #0
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
   82270:	463e      	mov	r6, r7
   82272:	4c3b      	ldr	r4, [pc, #236]	; (82360 <ISPProtocol_ReadMemory+0x12c>)
   82274:	e026      	b.n	822c4 <ISPProtocol_ReadMemory+0x90>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82276:	4619      	mov	r1, r3
   82278:	483a      	ldr	r0, [pc, #232]	; (82364 <ISPProtocol_ReadMemory+0x130>)
   8227a:	4b3b      	ldr	r3, [pc, #236]	; (82368 <ISPProtocol_ReadMemory+0x134>)
   8227c:	4798      	blx	r3
		return;
   8227e:	e065      	b.n	8234c <ISPProtocol_ReadMemory+0x118>
			ISPTarget_LoadExtendedAddress();
   82280:	4b3a      	ldr	r3, [pc, #232]	; (8236c <ISPProtocol_ReadMemory+0x138>)
   82282:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   82284:	4b3a      	ldr	r3, [pc, #232]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   82286:	701e      	strb	r6, [r3, #0]
   82288:	e022      	b.n	822d0 <ISPProtocol_ReadMemory+0x9c>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   8228a:	f089 0908 	eor.w	r9, r9, #8
   8228e:	f88d 900e 	strb.w	r9, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   82292:	f01b 0f01 	tst.w	fp, #1
   82296:	d010      	beq.n	822ba <ISPProtocol_ReadMemory+0x86>
		{
			CurrentAddress++;
   82298:	4a36      	ldr	r2, [pc, #216]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   8229a:	6813      	ldr	r3, [r2, #0]
   8229c:	3301      	adds	r3, #1
   8229e:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822a0:	e006      	b.n	822b0 <ISPProtocol_ReadMemory+0x7c>
			CurrentAddress++;
   822a2:	4a34      	ldr	r2, [pc, #208]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   822a4:	6813      	ldr	r3, [r2, #0]
   822a6:	3301      	adds	r3, #1
   822a8:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822aa:	9a00      	ldr	r2, [sp, #0]
   822ac:	2a16      	cmp	r2, #22
   822ae:	d004      	beq.n	822ba <ISPProtocol_ReadMemory+0x86>
   822b0:	b29b      	uxth	r3, r3
   822b2:	b913      	cbnz	r3, 822ba <ISPProtocol_ReadMemory+0x86>
			  MustLoadExtendedAddress = true;
   822b4:	2301      	movs	r3, #1
   822b6:	4a2e      	ldr	r2, [pc, #184]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   822b8:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   822ba:	3701      	adds	r7, #1
   822bc:	b2bb      	uxth	r3, r7
   822be:	9a01      	ldr	r2, [sp, #4]
   822c0:	429a      	cmp	r2, r3
   822c2:	d93d      	bls.n	82340 <ISPProtocol_ReadMemory+0x10c>
   822c4:	fa1f fb87 	uxth.w	fp, r7
		if (MustLoadExtendedAddress)
   822c8:	4b29      	ldr	r3, [pc, #164]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   822ca:	781b      	ldrb	r3, [r3, #0]
   822cc:	2b00      	cmp	r3, #0
   822ce:	d1d7      	bne.n	82280 <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   822d0:	f89d 900e 	ldrb.w	r9, [sp, #14]
   822d4:	4633      	mov	r3, r6
   822d6:	4632      	mov	r2, r6
   822d8:	4649      	mov	r1, r9
   822da:	4620      	mov	r0, r4
   822dc:	4d26      	ldr	r5, [pc, #152]	; (82378 <ISPProtocol_ReadMemory+0x144>)
   822de:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   822e0:	f8df a090 	ldr.w	sl, [pc, #144]	; 82374 <ISPProtocol_ReadMemory+0x140>
   822e4:	4633      	mov	r3, r6
   822e6:	4632      	mov	r2, r6
   822e8:	f89a 1001 	ldrb.w	r1, [sl, #1]
   822ec:	4620      	mov	r0, r4
   822ee:	47a8      	blx	r5
   822f0:	4633      	mov	r3, r6
   822f2:	4632      	mov	r2, r6
   822f4:	f89a 1000 	ldrb.w	r1, [sl]
   822f8:	4620      	mov	r0, r4
   822fa:	47a8      	blx	r5
   822fc:	4633      	mov	r3, r6
   822fe:	4632      	mov	r2, r6
   82300:	4631      	mov	r1, r6
   82302:	4620      	mov	r0, r4
   82304:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   82306:	6923      	ldr	r3, [r4, #16]
   82308:	f413 7f00 	tst.w	r3, #512	; 0x200
   8230c:	d0fb      	beq.n	82306 <ISPProtocol_ReadMemory+0xd2>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   8230e:	f10d 0209 	add.w	r2, sp, #9
   82312:	f10d 010a 	add.w	r1, sp, #10
   82316:	4620      	mov	r0, r4
   82318:	4b18      	ldr	r3, [pc, #96]	; (8237c <ISPProtocol_ReadMemory+0x148>)
   8231a:	4798      	blx	r3
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   8231c:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   82320:	f808 3f01 	strb.w	r3, [r8, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   82324:	9b00      	ldr	r3, [sp, #0]
   82326:	2b14      	cmp	r3, #20
   82328:	d0af      	beq.n	8228a <ISPProtocol_ReadMemory+0x56>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   8232a:	f01b 0f01 	tst.w	fp, #1
   8232e:	d1b8      	bne.n	822a2 <ISPProtocol_ReadMemory+0x6e>
   82330:	9b00      	ldr	r3, [sp, #0]
   82332:	2b16      	cmp	r3, #22
   82334:	d1c1      	bne.n	822ba <ISPProtocol_ReadMemory+0x86>
			CurrentAddress++;
   82336:	4a0f      	ldr	r2, [pc, #60]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   82338:	6813      	ldr	r3, [r2, #0]
   8233a:	3301      	adds	r3, #1
   8233c:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   8233e:	e7bc      	b.n	822ba <ISPProtocol_ReadMemory+0x86>
		}
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82340:	4b05      	ldr	r3, [pc, #20]	; (82358 <ISPProtocol_ReadMemory+0x124>)
   82342:	2200      	movs	r2, #0
   82344:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82346:	4b05      	ldr	r3, [pc, #20]	; (8235c <ISPProtocol_ReadMemory+0x128>)
   82348:	2202      	movs	r2, #2
   8234a:	801a      	strh	r2, [r3, #0]
}
   8234c:	b005      	add	sp, #20
   8234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82352:	bf00      	nop
   82354:	20002dec 	.word	0x20002dec
   82358:	20002638 	.word	0x20002638
   8235c:	20002636 	.word	0x20002636
   82360:	40008000 	.word	0x40008000
   82364:	0008e3bc 	.word	0x0008e3bc
   82368:	0008780d 	.word	0x0008780d
   8236c:	00082895 	.word	0x00082895
   82370:	20002634 	.word	0x20002634
   82374:	20002658 	.word	0x20002658
   82378:	0008559f 	.word	0x0008559f
   8237c:	00085571 	.word	0x00085571

00082380 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   82380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82384:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   82386:	4b21      	ldr	r3, [pc, #132]	; (8240c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   82388:	8999      	ldrh	r1, [r3, #12]
   8238a:	2905      	cmp	r1, #5
   8238c:	d139      	bne.n	82402 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   8238e:	4607      	mov	r7, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   82390:	4b1e      	ldr	r3, [pc, #120]	; (8240c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   82392:	689b      	ldr	r3, [r3, #8]
   82394:	6818      	ldr	r0, [r3, #0]
   82396:	9002      	str	r0, [sp, #8]
   82398:	791a      	ldrb	r2, [r3, #4]
   8239a:	f88d 200c 	strb.w	r2, [sp, #12]
   8239e:	f893 b000 	ldrb.w	fp, [r3]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823a2:	f10d 0609 	add.w	r6, sp, #9
   823a6:	ad01      	add	r5, sp, #4
   823a8:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   823ac:	4c18      	ldr	r4, [pc, #96]	; (82410 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   823ae:	f8df 9074 	ldr.w	r9, [pc, #116]	; 82424 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   823b2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 82428 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
		  spi_write(SPI, data, 0, 0);
   823b6:	2300      	movs	r3, #0
   823b8:	461a      	mov	r2, r3
   823ba:	f816 1b01 	ldrb.w	r1, [r6], #1
   823be:	4620      	mov	r0, r4
   823c0:	47c8      	blx	r9
   823c2:	6923      	ldr	r3, [r4, #16]
   823c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   823c8:	d0fb      	beq.n	823c2 <ISPProtocol_ReadFuseLockSigOSCCAL+0x42>
			spi_read(SPI, &ReceivedByte, &_);
   823ca:	f10d 0201 	add.w	r2, sp, #1
   823ce:	f10d 0102 	add.w	r1, sp, #2
   823d2:	4620      	mov	r0, r4
   823d4:	47c0      	blx	r8
			return  ReceivedByte;
   823d6:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   823da:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823de:	4555      	cmp	r5, sl
   823e0:	d1e9      	bne.n	823b6 <ISPProtocol_ReadFuseLockSigOSCCAL+0x36>

	avrisp_status_payload[0] = V2Command;
   823e2:	4b0c      	ldr	r3, [pc, #48]	; (82414 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
   823e4:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   823e6:	2200      	movs	r2, #0
   823e8:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   823ea:	a904      	add	r1, sp, #16
   823ec:	448b      	add	fp, r1
   823ee:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   823f2:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   823f4:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   823f6:	4b08      	ldr	r3, [pc, #32]	; (82418 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   823f8:	2204      	movs	r2, #4
   823fa:	801a      	strh	r2, [r3, #0]
}
   823fc:	b005      	add	sp, #20
   823fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82402:	4806      	ldr	r0, [pc, #24]	; (8241c <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   82404:	4b06      	ldr	r3, [pc, #24]	; (82420 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   82406:	4798      	blx	r3
		return;
   82408:	e7f8      	b.n	823fc <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   8240a:	bf00      	nop
   8240c:	20002dec 	.word	0x20002dec
   82410:	40008000 	.word	0x40008000
   82414:	20002638 	.word	0x20002638
   82418:	20002636 	.word	0x20002636
   8241c:	0008e414 	.word	0x0008e414
   82420:	0008780d 	.word	0x0008780d
   82424:	0008559f 	.word	0x0008559f
   82428:	00085571 	.word	0x00085571

0008242c <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   8242c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82430:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   82432:	4b13      	ldr	r3, [pc, #76]	; (82480 <ISPProtocol_WriteFuseLock+0x54>)
   82434:	8999      	ldrh	r1, [r3, #12]
   82436:	2904      	cmp	r1, #4
   82438:	d11d      	bne.n	82476 <ISPProtocol_WriteFuseLock+0x4a>
   8243a:	4605      	mov	r5, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   8243c:	4b10      	ldr	r3, [pc, #64]	; (82480 <ISPProtocol_WriteFuseLock+0x54>)
   8243e:	689b      	ldr	r3, [r3, #8]
   82440:	681b      	ldr	r3, [r3, #0]
   82442:	9301      	str	r3, [sp, #4]

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   82444:	ac01      	add	r4, sp, #4
   82446:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   8244a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 82498 <ISPProtocol_WriteFuseLock+0x6c>
   8244e:	2700      	movs	r7, #0
   82450:	4e0c      	ldr	r6, [pc, #48]	; (82484 <ISPProtocol_WriteFuseLock+0x58>)
   82452:	463b      	mov	r3, r7
   82454:	463a      	mov	r2, r7
   82456:	f814 1b01 	ldrb.w	r1, [r4], #1
   8245a:	4640      	mov	r0, r8
   8245c:	47b0      	blx	r6
   8245e:	454c      	cmp	r4, r9
   82460:	d1f7      	bne.n	82452 <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   82462:	4b09      	ldr	r3, [pc, #36]	; (82488 <ISPProtocol_WriteFuseLock+0x5c>)
   82464:	701d      	strb	r5, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82466:	2200      	movs	r2, #0
   82468:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   8246a:	4b08      	ldr	r3, [pc, #32]	; (8248c <ISPProtocol_WriteFuseLock+0x60>)
   8246c:	2202      	movs	r2, #2
   8246e:	801a      	strh	r2, [r3, #0]
}
   82470:	b003      	add	sp, #12
   82472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82476:	4806      	ldr	r0, [pc, #24]	; (82490 <ISPProtocol_WriteFuseLock+0x64>)
   82478:	4b06      	ldr	r3, [pc, #24]	; (82494 <ISPProtocol_WriteFuseLock+0x68>)
   8247a:	4798      	blx	r3
		return;
   8247c:	e7f8      	b.n	82470 <ISPProtocol_WriteFuseLock+0x44>
   8247e:	bf00      	nop
   82480:	20002dec 	.word	0x20002dec
   82484:	0008559f 	.word	0x0008559f
   82488:	20002638 	.word	0x20002638
   8248c:	20002636 	.word	0x20002636
   82490:	0008e414 	.word	0x0008e414
   82494:	0008780d 	.word	0x0008780d
   82498:	40008000 	.word	0x40008000

0008249c <ISPProtocol_SPIMulti>:
/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
	//Not implemented for this device, alternative methods of accessing SPI interface present
	;
}
   8249c:	4770      	bx	lr
	...

000824a0 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   824a0:	b900      	cbnz	r0, 824a4 <ISPProtocol_DelayMS+0x4>
   824a2:	4770      	bx	lr
{
   824a4:	b538      	push	{r3, r4, r5, lr}
   824a6:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   824a8:	f243 62b0 	movw	r2, #14000	; 0x36b0
   824ac:	2300      	movs	r3, #0
   824ae:	4806      	ldr	r0, [pc, #24]	; (824c8 <ISPProtocol_DelayMS+0x28>)
   824b0:	f243 64af 	movw	r4, #13999	; 0x36af
   824b4:	2500      	movs	r5, #0
   824b6:	fbe0 4501 	umlal	r4, r5, r0, r1
   824ba:	4620      	mov	r0, r4
   824bc:	4629      	mov	r1, r5
   824be:	4c03      	ldr	r4, [pc, #12]	; (824cc <ISPProtocol_DelayMS+0x2c>)
   824c0:	47a0      	blx	r4
   824c2:	4b03      	ldr	r3, [pc, #12]	; (824d0 <ISPProtocol_DelayMS+0x30>)
   824c4:	4798      	blx	r3
}
   824c6:	bd38      	pop	{r3, r4, r5, pc}
   824c8:	05b8d800 	.word	0x05b8d800
   824cc:	000874cd 	.word	0x000874cd
   824d0:	20000089 	.word	0x20000089

000824d4 <ISPProtocol_EnterISPMode>:
{
   824d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824d8:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   824da:	4b42      	ldr	r3, [pc, #264]	; (825e4 <ISPProtocol_EnterISPMode+0x110>)
   824dc:	8999      	ldrh	r1, [r3, #12]
   824de:	290b      	cmp	r1, #11
   824e0:	d003      	beq.n	824ea <ISPProtocol_EnterISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   824e2:	4841      	ldr	r0, [pc, #260]	; (825e8 <ISPProtocol_EnterISPMode+0x114>)
   824e4:	4b41      	ldr	r3, [pc, #260]	; (825ec <ISPProtocol_EnterISPMode+0x118>)
   824e6:	4798      	blx	r3
		return;
   824e8:	e074      	b.n	825d4 <ISPProtocol_EnterISPMode+0x100>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   824ea:	4b3e      	ldr	r3, [pc, #248]	; (825e4 <ISPProtocol_EnterISPMode+0x110>)
   824ec:	689b      	ldr	r3, [r3, #8]
   824ee:	aa07      	add	r2, sp, #28
   824f0:	6818      	ldr	r0, [r3, #0]
   824f2:	6859      	ldr	r1, [r3, #4]
   824f4:	c203      	stmia	r2!, {r0, r1}
   824f6:	8918      	ldrh	r0, [r3, #8]
   824f8:	7a99      	ldrb	r1, [r3, #10]
   824fa:	8010      	strh	r0, [r2, #0]
   824fc:	7091      	strb	r1, [r2, #2]
   824fe:	785e      	ldrb	r6, [r3, #1]
   82500:	9603      	str	r6, [sp, #12]
   82502:	7898      	ldrb	r0, [r3, #2]
   82504:	78dc      	ldrb	r4, [r3, #3]
   82506:	f893 b004 	ldrb.w	fp, [r3, #4]
   8250a:	795a      	ldrb	r2, [r3, #5]
   8250c:	9202      	str	r2, [sp, #8]
   8250e:	799b      	ldrb	r3, [r3, #6]
   82510:	9301      	str	r3, [sp, #4]
	CurrentAddress = 0;
   82512:	4b37      	ldr	r3, [pc, #220]	; (825f0 <ISPProtocol_EnterISPMode+0x11c>)
   82514:	2200      	movs	r2, #0
   82516:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   82518:	4d36      	ldr	r5, [pc, #216]	; (825f4 <ISPProtocol_EnterISPMode+0x120>)
   8251a:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   8251c:	4b36      	ldr	r3, [pc, #216]	; (825f8 <ISPProtocol_EnterISPMode+0x124>)
   8251e:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   82520:	2001      	movs	r0, #1
   82522:	4b36      	ldr	r3, [pc, #216]	; (825fc <ISPProtocol_EnterISPMode+0x128>)
   82524:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82526:	4630      	mov	r0, r6
   82528:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   8252a:	f104 38ff 	add.w	r8, r4, #4294967295
   8252e:	fa5f f888 	uxtb.w	r8, r8
   82532:	b114      	cbz	r4, 8253a <ISPProtocol_EnterISPMode+0x66>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   82534:	462f      	mov	r7, r5
   82536:	4c32      	ldr	r4, [pc, #200]	; (82600 <ISPProtocol_EnterISPMode+0x12c>)
   82538:	e01c      	b.n	82574 <ISPProtocol_EnterISPMode+0xa0>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   8253a:	24c0      	movs	r4, #192	; 0xc0
   8253c:	e03f      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   8253e:	9b01      	ldr	r3, [sp, #4]
   82540:	2b00      	cmp	r3, #0
   82542:	d03b      	beq.n	825bc <ISPProtocol_EnterISPMode+0xe8>
   82544:	aa0a      	add	r2, sp, #40	; 0x28
   82546:	18d3      	adds	r3, r2, r3
   82548:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   8254c:	9a02      	ldr	r2, [sp, #8]
   8254e:	4293      	cmp	r3, r2
   82550:	d034      	beq.n	825bc <ISPProtocol_EnterISPMode+0xe8>
			ISPTarget_ChangeTargetResetLine(false);
   82552:	2000      	movs	r0, #0
   82554:	4d29      	ldr	r5, [pc, #164]	; (825fc <ISPProtocol_EnterISPMode+0x128>)
   82556:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82558:	9e03      	ldr	r6, [sp, #12]
   8255a:	4630      	mov	r0, r6
   8255c:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   8255e:	2001      	movs	r0, #1
   82560:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82562:	4630      	mov	r0, r6
   82564:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82566:	f108 38ff 	add.w	r8, r8, #4294967295
   8256a:	fa5f f888 	uxtb.w	r8, r8
   8256e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   82572:	d034      	beq.n	825de <ISPProtocol_EnterISPMode+0x10a>
   82574:	4b23      	ldr	r3, [pc, #140]	; (82604 <ISPProtocol_EnterISPMode+0x130>)
   82576:	681b      	ldr	r3, [r3, #0]
   82578:	b37b      	cbz	r3, 825da <ISPProtocol_EnterISPMode+0x106>
   8257a:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   8257e:	ad06      	add	r5, sp, #24
   82580:	f10d 0a1c 	add.w	sl, sp, #28
   82584:	f8df 9090 	ldr.w	r9, [pc, #144]	; 82618 <ISPProtocol_EnterISPMode+0x144>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   82588:	4658      	mov	r0, fp
   8258a:	47b8      	blx	r7
   8258c:	2300      	movs	r3, #0
   8258e:	461a      	mov	r2, r3
   82590:	f816 1b01 	ldrb.w	r1, [r6], #1
   82594:	4620      	mov	r0, r4
   82596:	47c8      	blx	r9
   82598:	6923      	ldr	r3, [r4, #16]
   8259a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8259e:	d0fb      	beq.n	82598 <ISPProtocol_EnterISPMode+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   825a0:	f10d 0215 	add.w	r2, sp, #21
   825a4:	f10d 0116 	add.w	r1, sp, #22
   825a8:	4620      	mov	r0, r4
   825aa:	4b17      	ldr	r3, [pc, #92]	; (82608 <ISPProtocol_EnterISPMode+0x134>)
   825ac:	4798      	blx	r3
			return  ReceivedByte;
   825ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   825b2:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   825b6:	4555      	cmp	r5, sl
   825b8:	d1e6      	bne.n	82588 <ISPProtocol_EnterISPMode+0xb4>
   825ba:	e7c0      	b.n	8253e <ISPProtocol_EnterISPMode+0x6a>
			ResponseStatus = STATUS_CMD_OK;
   825bc:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   825be:	4621      	mov	r1, r4
   825c0:	4812      	ldr	r0, [pc, #72]	; (8260c <ISPProtocol_EnterISPMode+0x138>)
   825c2:	4b0a      	ldr	r3, [pc, #40]	; (825ec <ISPProtocol_EnterISPMode+0x118>)
   825c4:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   825c6:	4b12      	ldr	r3, [pc, #72]	; (82610 <ISPProtocol_EnterISPMode+0x13c>)
   825c8:	2210      	movs	r2, #16
   825ca:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   825cc:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   825ce:	4b11      	ldr	r3, [pc, #68]	; (82614 <ISPProtocol_EnterISPMode+0x140>)
   825d0:	2202      	movs	r2, #2
   825d2:	801a      	strh	r2, [r3, #0]
}
   825d4:	b00b      	add	sp, #44	; 0x2c
   825d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   825da:	24c0      	movs	r4, #192	; 0xc0
   825dc:	e7ef      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
   825de:	24c0      	movs	r4, #192	; 0xc0
   825e0:	e7ed      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
   825e2:	bf00      	nop
   825e4:	20002dec 	.word	0x20002dec
   825e8:	0008e414 	.word	0x0008e414
   825ec:	0008780d 	.word	0x0008780d
   825f0:	20002658 	.word	0x20002658
   825f4:	000824a1 	.word	0x000824a1
   825f8:	00082715 	.word	0x00082715
   825fc:	000827d5 	.word	0x000827d5
   82600:	40008000 	.word	0x40008000
   82604:	2000265c 	.word	0x2000265c
   82608:	00085571 	.word	0x00085571
   8260c:	0008e3e4 	.word	0x0008e3e4
   82610:	20002638 	.word	0x20002638
   82614:	20002636 	.word	0x20002636
   82618:	0008559f 	.word	0x0008559f

0008261c <ISPProtocol_LeaveISPMode>:
{
   8261c:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   8261e:	4b0f      	ldr	r3, [pc, #60]	; (8265c <ISPProtocol_LeaveISPMode+0x40>)
   82620:	8999      	ldrh	r1, [r3, #12]
   82622:	2902      	cmp	r1, #2
   82624:	d003      	beq.n	8262e <ISPProtocol_LeaveISPMode+0x12>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82626:	480e      	ldr	r0, [pc, #56]	; (82660 <ISPProtocol_LeaveISPMode+0x44>)
   82628:	4b0e      	ldr	r3, [pc, #56]	; (82664 <ISPProtocol_LeaveISPMode+0x48>)
   8262a:	4798      	blx	r3
}
   8262c:	bd38      	pop	{r3, r4, r5, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   8262e:	4b0b      	ldr	r3, [pc, #44]	; (8265c <ISPProtocol_LeaveISPMode+0x40>)
   82630:	689b      	ldr	r3, [r3, #8]
   82632:	881d      	ldrh	r5, [r3, #0]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   82634:	b2e8      	uxtb	r0, r5
   82636:	4c0c      	ldr	r4, [pc, #48]	; (82668 <ISPProtocol_LeaveISPMode+0x4c>)
   82638:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   8263a:	2000      	movs	r0, #0
   8263c:	4b0b      	ldr	r3, [pc, #44]	; (8266c <ISPProtocol_LeaveISPMode+0x50>)
   8263e:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   82640:	4b0b      	ldr	r3, [pc, #44]	; (82670 <ISPProtocol_LeaveISPMode+0x54>)
   82642:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   82644:	0a28      	lsrs	r0, r5, #8
   82646:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   82648:	4b0a      	ldr	r3, [pc, #40]	; (82674 <ISPProtocol_LeaveISPMode+0x58>)
   8264a:	2211      	movs	r2, #17
   8264c:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8264e:	2200      	movs	r2, #0
   82650:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82652:	4b09      	ldr	r3, [pc, #36]	; (82678 <ISPProtocol_LeaveISPMode+0x5c>)
   82654:	2202      	movs	r2, #2
   82656:	801a      	strh	r2, [r3, #0]
   82658:	e7e8      	b.n	8262c <ISPProtocol_LeaveISPMode+0x10>
   8265a:	bf00      	nop
   8265c:	20002dec 	.word	0x20002dec
   82660:	0008e414 	.word	0x0008e414
   82664:	0008780d 	.word	0x0008780d
   82668:	000824a1 	.word	0x000824a1
   8266c:	000827d5 	.word	0x000827d5
   82670:	000827bd 	.word	0x000827bd
   82674:	20002638 	.word	0x20002638
   82678:	20002636 	.word	0x20002636

0008267c <ISPProtocol_ChipErase>:
{
   8267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82680:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   82682:	4b1b      	ldr	r3, [pc, #108]	; (826f0 <ISPProtocol_ChipErase+0x74>)
   82684:	8999      	ldrh	r1, [r3, #12]
   82686:	2906      	cmp	r1, #6
   82688:	d12a      	bne.n	826e0 <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   8268a:	4b19      	ldr	r3, [pc, #100]	; (826f0 <ISPProtocol_ChipErase+0x74>)
   8268c:	689b      	ldr	r3, [r3, #8]
   8268e:	6818      	ldr	r0, [r3, #0]
   82690:	9000      	str	r0, [sp, #0]
   82692:	889a      	ldrh	r2, [r3, #4]
   82694:	f8ad 2004 	strh.w	r2, [sp, #4]
   82698:	f893 a000 	ldrb.w	sl, [r3]
   8269c:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   826a0:	f10d 0402 	add.w	r4, sp, #2
   826a4:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   826a8:	4f12      	ldr	r7, [pc, #72]	; (826f4 <ISPProtocol_ChipErase+0x78>)
   826aa:	2600      	movs	r6, #0
   826ac:	4d12      	ldr	r5, [pc, #72]	; (826f8 <ISPProtocol_ChipErase+0x7c>)
   826ae:	4633      	mov	r3, r6
   826b0:	4632      	mov	r2, r6
   826b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   826b6:	4638      	mov	r0, r7
   826b8:	47a8      	blx	r5
   826ba:	4544      	cmp	r4, r8
   826bc:	d1f7      	bne.n	826ae <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   826be:	f1b9 0f00 	cmp.w	r9, #0
   826c2:	d111      	bne.n	826e8 <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   826c4:	4650      	mov	r0, sl
   826c6:	4b0d      	ldr	r3, [pc, #52]	; (826fc <ISPProtocol_ChipErase+0x80>)
   826c8:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   826ca:	4b0d      	ldr	r3, [pc, #52]	; (82700 <ISPProtocol_ChipErase+0x84>)
   826cc:	2212      	movs	r2, #18
   826ce:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   826d0:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   826d4:	4b0b      	ldr	r3, [pc, #44]	; (82704 <ISPProtocol_ChipErase+0x88>)
   826d6:	2202      	movs	r2, #2
   826d8:	801a      	strh	r2, [r3, #0]
}
   826da:	b002      	add	sp, #8
   826dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   826e0:	4809      	ldr	r0, [pc, #36]	; (82708 <ISPProtocol_ChipErase+0x8c>)
   826e2:	4b0a      	ldr	r3, [pc, #40]	; (8270c <ISPProtocol_ChipErase+0x90>)
   826e4:	4798      	blx	r3
		return;
   826e6:	e7f8      	b.n	826da <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   826e8:	4b09      	ldr	r3, [pc, #36]	; (82710 <ISPProtocol_ChipErase+0x94>)
   826ea:	4798      	blx	r3
   826ec:	4681      	mov	r9, r0
   826ee:	e7ec      	b.n	826ca <ISPProtocol_ChipErase+0x4e>
   826f0:	20002dec 	.word	0x20002dec
   826f4:	40008000 	.word	0x40008000
   826f8:	0008559f 	.word	0x0008559f
   826fc:	000824a1 	.word	0x000824a1
   82700:	20002638 	.word	0x20002638
   82704:	20002636 	.word	0x20002636
   82708:	0008e404 	.word	0x0008e404
   8270c:	0008780d 	.word	0x0008780d
   82710:	00082819 	.word	0x00082819

00082714 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   82714:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   82716:	2098      	movs	r0, #152	; 0x98
   82718:	4b1e      	ldr	r3, [pc, #120]	; (82794 <ISPTarget_EnableTargetISP+0x80>)
   8271a:	4798      	blx	r3
   8271c:	4b1e      	ldr	r3, [pc, #120]	; (82798 <ISPTarget_EnableTargetISP+0x84>)
   8271e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   82722:	4c1e      	ldr	r4, [pc, #120]	; (8279c <ISPTarget_EnableTargetISP+0x88>)
   82724:	4620      	mov	r0, r4
   82726:	4b1e      	ldr	r3, [pc, #120]	; (827a0 <ISPTarget_EnableTargetISP+0x8c>)
   82728:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8272a:	2380      	movs	r3, #128	; 0x80
   8272c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8272e:	6863      	ldr	r3, [r4, #4]
   82730:	f043 0301 	orr.w	r3, r3, #1
   82734:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   82736:	6863      	ldr	r3, [r4, #4]
   82738:	f043 0310 	orr.w	r3, r3, #16
   8273c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8273e:	6863      	ldr	r3, [r4, #4]
   82740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82744:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   82746:	4917      	ldr	r1, [pc, #92]	; (827a4 <ISPTarget_EnableTargetISP+0x90>)
   82748:	4628      	mov	r0, r5
   8274a:	4b17      	ldr	r3, [pc, #92]	; (827a8 <ISPTarget_EnableTargetISP+0x94>)
   8274c:	4798      	blx	r3
	if (bauddiv < 0){
		bauddiv = 255;
   8274e:	1e04      	subs	r4, r0, #0
   82750:	bfb8      	it	lt
   82752:	24ff      	movlt	r4, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   82754:	4d11      	ldr	r5, [pc, #68]	; (8279c <ISPTarget_EnableTargetISP+0x88>)
   82756:	2200      	movs	r2, #0
   82758:	4611      	mov	r1, r2
   8275a:	4628      	mov	r0, r5
   8275c:	4b13      	ldr	r3, [pc, #76]	; (827ac <ISPTarget_EnableTargetISP+0x98>)
   8275e:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   82760:	2201      	movs	r2, #1
   82762:	2100      	movs	r1, #0
   82764:	4628      	mov	r0, r5
   82766:	4b12      	ldr	r3, [pc, #72]	; (827b0 <ISPTarget_EnableTargetISP+0x9c>)
   82768:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   8276a:	b2e2      	uxtb	r2, r4
   8276c:	2100      	movs	r1, #0
   8276e:	4628      	mov	r0, r5
   82770:	4b10      	ldr	r3, [pc, #64]	; (827b4 <ISPTarget_EnableTargetISP+0xa0>)
   82772:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   82774:	2301      	movs	r3, #1
   82776:	602b      	str	r3, [r5, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   82778:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8277c:	200e      	movs	r0, #14
   8277e:	4c0e      	ldr	r4, [pc, #56]	; (827b8 <ISPTarget_EnableTargetISP+0xa4>)
   82780:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   82782:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82786:	200d      	movs	r0, #13
   82788:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8278a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8278e:	200f      	movs	r0, #15
   82790:	47a0      	blx	r4
#endif

}
   82792:	bd38      	pop	{r3, r4, r5, pc}
   82794:	00082c51 	.word	0x00082c51
   82798:	200002f8 	.word	0x200002f8
   8279c:	40008000 	.word	0x40008000
   827a0:	00085551 	.word	0x00085551
   827a4:	05b8d800 	.word	0x05b8d800
   827a8:	0008560f 	.word	0x0008560f
   827ac:	000855d3 	.word	0x000855d3
   827b0:	000855f1 	.word	0x000855f1
   827b4:	00085625 	.word	0x00085625
   827b8:	0008516d 	.word	0x0008516d

000827bc <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   827bc:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   827be:	4803      	ldr	r0, [pc, #12]	; (827cc <ISPTarget_DisableTargetISP+0x10>)
   827c0:	2302      	movs	r3, #2
   827c2:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   827c4:	4b02      	ldr	r3, [pc, #8]	; (827d0 <ISPTarget_DisableTargetISP+0x14>)
   827c6:	4798      	blx	r3
#endif
}
   827c8:	bd08      	pop	{r3, pc}
   827ca:	bf00      	nop
   827cc:	40008000 	.word	0x40008000
   827d0:	00085561 	.word	0x00085561

000827d4 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   827d4:	b508      	push	{r3, lr}
	if (ResetTarget)
   827d6:	b180      	cbz	r0, 827fa <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   827d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827dc:	2011      	movs	r0, #17
   827de:	4b0a      	ldr	r3, [pc, #40]	; (82808 <ISPTarget_ChangeTargetResetLine+0x34>)
   827e0:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   827e2:	209e      	movs	r0, #158	; 0x9e
   827e4:	4b09      	ldr	r3, [pc, #36]	; (8280c <ISPTarget_ChangeTargetResetLine+0x38>)
   827e6:	4798      	blx	r3
   827e8:	b918      	cbnz	r0, 827f2 <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   827ea:	2011      	movs	r0, #17
   827ec:	4b08      	ldr	r3, [pc, #32]	; (82810 <ISPTarget_ChangeTargetResetLine+0x3c>)
   827ee:	4798      	blx	r3
   827f0:	e008      	b.n	82804 <ISPTarget_ChangeTargetResetLine+0x30>
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   827f2:	2011      	movs	r0, #17
   827f4:	4b07      	ldr	r3, [pc, #28]	; (82814 <ISPTarget_ChangeTargetResetLine+0x40>)
   827f6:	4798      	blx	r3
   827f8:	e004      	b.n	82804 <ISPTarget_ChangeTargetResetLine+0x30>
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   827fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   827fe:	2011      	movs	r0, #17
   82800:	4b01      	ldr	r3, [pc, #4]	; (82808 <ISPTarget_ChangeTargetResetLine+0x34>)
   82802:	4798      	blx	r3
	}
}
   82804:	bd08      	pop	{r3, pc}
   82806:	bf00      	nop
   82808:	0008516d 	.word	0x0008516d
   8280c:	00082c51 	.word	0x00082c51
   82810:	00085137 	.word	0x00085137
   82814:	00085151 	.word	0x00085151

00082818 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   82818:	b570      	push	{r4, r5, r6, lr}
   8281a:	b082      	sub	sp, #8
   8281c:	4c19      	ldr	r4, [pc, #100]	; (82884 <ISPTarget_WaitWhileTargetBusy+0x6c>)
   8281e:	2600      	movs	r6, #0
   82820:	4d19      	ldr	r5, [pc, #100]	; (82888 <ISPTarget_WaitWhileTargetBusy+0x70>)
   82822:	4633      	mov	r3, r6
   82824:	4632      	mov	r2, r6
   82826:	21f0      	movs	r1, #240	; 0xf0
   82828:	4620      	mov	r0, r4
   8282a:	47a8      	blx	r5
   8282c:	4633      	mov	r3, r6
   8282e:	4632      	mov	r2, r6
   82830:	4631      	mov	r1, r6
   82832:	4620      	mov	r0, r4
   82834:	47a8      	blx	r5
   82836:	4633      	mov	r3, r6
   82838:	4632      	mov	r2, r6
   8283a:	4631      	mov	r1, r6
   8283c:	4620      	mov	r0, r4
   8283e:	47a8      	blx	r5
   82840:	4633      	mov	r3, r6
   82842:	4632      	mov	r2, r6
   82844:	4631      	mov	r1, r6
   82846:	4620      	mov	r0, r4
   82848:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8284a:	6923      	ldr	r3, [r4, #16]
   8284c:	f413 7f00 	tst.w	r3, #512	; 0x200
   82850:	d0fb      	beq.n	8284a <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   82852:	f10d 0205 	add.w	r2, sp, #5
   82856:	f10d 0106 	add.w	r1, sp, #6
   8285a:	4620      	mov	r0, r4
   8285c:	4b0b      	ldr	r3, [pc, #44]	; (8288c <ISPTarget_WaitWhileTargetBusy+0x74>)
   8285e:	4798      	blx	r3
			return  ReceivedByte;
   82860:	f89d 0006 	ldrb.w	r0, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   82864:	f010 0001 	ands.w	r0, r0, #1
   82868:	d005      	beq.n	82876 <ISPTarget_WaitWhileTargetBusy+0x5e>
   8286a:	4b09      	ldr	r3, [pc, #36]	; (82890 <ISPTarget_WaitWhileTargetBusy+0x78>)
   8286c:	681b      	ldr	r3, [r3, #0]
   8286e:	2b00      	cmp	r3, #0
   82870:	d1d7      	bne.n	82822 <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   82872:	2081      	movs	r0, #129	; 0x81
   82874:	e004      	b.n	82880 <ISPTarget_WaitWhileTargetBusy+0x68>
   82876:	4b06      	ldr	r3, [pc, #24]	; (82890 <ISPTarget_WaitWhileTargetBusy+0x78>)
   82878:	681b      	ldr	r3, [r3, #0]
   8287a:	2b00      	cmp	r3, #0
   8287c:	bf08      	it	eq
   8287e:	2081      	moveq	r0, #129	; 0x81
}
   82880:	b002      	add	sp, #8
   82882:	bd70      	pop	{r4, r5, r6, pc}
   82884:	40008000 	.word	0x40008000
   82888:	0008559f 	.word	0x0008559f
   8288c:	00085571 	.word	0x00085571
   82890:	2000265c 	.word	0x2000265c

00082894 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   82894:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   82896:	4d0c      	ldr	r5, [pc, #48]	; (828c8 <ISPTarget_LoadExtendedAddress+0x34>)
   82898:	2300      	movs	r3, #0
   8289a:	461a      	mov	r2, r3
   8289c:	214d      	movs	r1, #77	; 0x4d
   8289e:	4628      	mov	r0, r5
   828a0:	4c0a      	ldr	r4, [pc, #40]	; (828cc <ISPTarget_LoadExtendedAddress+0x38>)
   828a2:	47a0      	blx	r4
   828a4:	2300      	movs	r3, #0
   828a6:	461a      	mov	r2, r3
   828a8:	4619      	mov	r1, r3
   828aa:	4628      	mov	r0, r5
   828ac:	47a0      	blx	r4
   828ae:	2300      	movs	r3, #0
   828b0:	461a      	mov	r2, r3
   828b2:	4907      	ldr	r1, [pc, #28]	; (828d0 <ISPTarget_LoadExtendedAddress+0x3c>)
   828b4:	7889      	ldrb	r1, [r1, #2]
   828b6:	4628      	mov	r0, r5
   828b8:	47a0      	blx	r4
   828ba:	2300      	movs	r3, #0
   828bc:	461a      	mov	r2, r3
   828be:	4619      	mov	r1, r3
   828c0:	4628      	mov	r0, r5
   828c2:	47a0      	blx	r4
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
	ISPTarget_SendByte(0x00);
}
   828c4:	bd38      	pop	{r3, r4, r5, pc}
   828c6:	bf00      	nop
   828c8:	40008000 	.word	0x40008000
   828cc:	0008559f 	.word	0x0008559f
   828d0:	20002658 	.word	0x20002658

000828d4 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   828d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   828d8:	b082      	sub	sp, #8
   828da:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   828de:	f000 047e 	and.w	r4, r0, #126	; 0x7e
   828e2:	2c20      	cmp	r4, #32
   828e4:	dc18      	bgt.n	82918 <ISPTarget_WaitForProgComplete+0x44>
   828e6:	460e      	mov	r6, r1
   828e8:	4617      	mov	r7, r2
   828ea:	2c01      	cmp	r4, #1
   828ec:	dd5b      	ble.n	829a6 <ISPTarget_WaitForProgComplete+0xd2>
   828ee:	3c02      	subs	r4, #2
   828f0:	2c1e      	cmp	r4, #30
   828f2:	d85a      	bhi.n	829aa <ISPTarget_WaitForProgComplete+0xd6>
   828f4:	e8df f004 	tbb	[pc, r4]
   828f8:	591e5919 	.word	0x591e5919
   828fc:	59545959 	.word	0x59545959
   82900:	59595959 	.word	0x59595959
   82904:	59195959 	.word	0x59195959
   82908:	59595959 	.word	0x59595959
   8290c:	59595959 	.word	0x59595959
   82910:	59595959 	.word	0x59595959
   82914:	5959      	.short	0x5959
   82916:	1e          	.byte	0x1e
   82917:	00          	.byte	0x00
   82918:	2c40      	cmp	r4, #64	; 0x40
   8291a:	d041      	beq.n	829a0 <ISPTarget_WaitForProgComplete+0xcc>
   8291c:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   8291e:	4b24      	ldr	r3, [pc, #144]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82920:	2264      	movs	r2, #100	; 0x64
   82922:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   82924:	b002      	add	sp, #8
   82926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ISPProtocol_DelayMS(DelayMS);
   8292a:	4618      	mov	r0, r3
   8292c:	4b21      	ldr	r3, [pc, #132]	; (829b4 <ISPTarget_WaitForProgComplete+0xe0>)
   8292e:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   82930:	2000      	movs	r0, #0
			break;
   82932:	e7f4      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
				ISPTarget_SendByte(PollAddress >> 8);
   82934:	ea4f 2a11 	mov.w	sl, r1, lsr #8
   82938:	4c1f      	ldr	r4, [pc, #124]	; (829b8 <ISPTarget_WaitForProgComplete+0xe4>)
   8293a:	f04f 0900 	mov.w	r9, #0
   8293e:	4d1f      	ldr	r5, [pc, #124]	; (829bc <ISPTarget_WaitForProgComplete+0xe8>)
   82940:	464b      	mov	r3, r9
   82942:	464a      	mov	r2, r9
   82944:	4641      	mov	r1, r8
   82946:	4620      	mov	r0, r4
   82948:	47a8      	blx	r5
   8294a:	464b      	mov	r3, r9
   8294c:	464a      	mov	r2, r9
   8294e:	4651      	mov	r1, sl
   82950:	4620      	mov	r0, r4
   82952:	47a8      	blx	r5
   82954:	464b      	mov	r3, r9
   82956:	464a      	mov	r2, r9
   82958:	b2f1      	uxtb	r1, r6
   8295a:	4620      	mov	r0, r4
   8295c:	47a8      	blx	r5
   8295e:	464b      	mov	r3, r9
   82960:	464a      	mov	r2, r9
   82962:	4649      	mov	r1, r9
   82964:	4620      	mov	r0, r4
   82966:	47a8      	blx	r5
   82968:	6923      	ldr	r3, [r4, #16]
   8296a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8296e:	d0fb      	beq.n	82968 <ISPTarget_WaitForProgComplete+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   82970:	f10d 0205 	add.w	r2, sp, #5
   82974:	f10d 0106 	add.w	r1, sp, #6
   82978:	4620      	mov	r0, r4
   8297a:	4b11      	ldr	r3, [pc, #68]	; (829c0 <ISPTarget_WaitForProgComplete+0xec>)
   8297c:	4798      	blx	r3
			return  ReceivedByte;
   8297e:	f89d 3006 	ldrb.w	r3, [sp, #6]
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   82982:	429f      	cmp	r7, r3
   82984:	d105      	bne.n	82992 <ISPTarget_WaitForProgComplete+0xbe>
   82986:	4b0a      	ldr	r3, [pc, #40]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82988:	681b      	ldr	r3, [r3, #0]
   8298a:	2b00      	cmp	r3, #0
   8298c:	d1d8      	bne.n	82940 <ISPTarget_WaitForProgComplete+0x6c>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8298e:	2080      	movs	r0, #128	; 0x80
   82990:	e7c5      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
			if (!(TimeoutTicksRemaining))
   82992:	4b07      	ldr	r3, [pc, #28]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82994:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   82996:	2b00      	cmp	r3, #0
   82998:	bf14      	ite	ne
   8299a:	2000      	movne	r0, #0
   8299c:	2080      	moveq	r0, #128	; 0x80
   8299e:	e7be      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   829a0:	4b08      	ldr	r3, [pc, #32]	; (829c4 <ISPTarget_WaitForProgComplete+0xf0>)
   829a2:	4798      	blx	r3
			break;
   829a4:	e7bb      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   829a6:	2000      	movs	r0, #0
   829a8:	e7b9      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
   829aa:	2000      	movs	r0, #0
   829ac:	e7b7      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
   829ae:	bf00      	nop
   829b0:	2000265c 	.word	0x2000265c
   829b4:	000824a1 	.word	0x000824a1
   829b8:	40008000 	.word	0x40008000
   829bc:	0008559f 	.word	0x0008559f
   829c0:	00085571 	.word	0x00085571
   829c4:	00082819 	.word	0x00082819

000829c8 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   829c8:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   829ca:	4b7e      	ldr	r3, [pc, #504]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   829cc:	789c      	ldrb	r4, [r3, #2]
   829ce:	4b7e      	ldr	r3, [pc, #504]	; (82bc8 <V2Protocol_ProcessCommand+0x200>)
   829d0:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   829d2:	4b7e      	ldr	r3, [pc, #504]	; (82bcc <V2Protocol_ProcessCommand+0x204>)
   829d4:	4798      	blx	r3

	switch (V2Command)
   829d6:	1e63      	subs	r3, r4, #1
   829d8:	2b21      	cmp	r3, #33	; 0x21
   829da:	f200 80e8 	bhi.w	82bae <V2Protocol_ProcessCommand+0x1e6>
   829de:	e8df f013 	tbh	[pc, r3, lsl #1]
   829e2:	0022      	.short	0x0022
   829e4:	00370037 	.word	0x00370037
   829e8:	00e600e6 	.word	0x00e600e6
   829ec:	00e6006c 	.word	0x00e6006c
   829f0:	00e600e6 	.word	0x00e600e6
   829f4:	00e6008b 	.word	0x00e6008b
   829f8:	00e600e6 	.word	0x00e600e6
   829fc:	00e600e6 	.word	0x00e600e6
   82a00:	00970093 	.word	0x00970093
   82a04:	009b00a7 	.word	0x009b00a7
   82a08:	009b00a1 	.word	0x009b00a1
   82a0c:	00b000a1 	.word	0x00b000a1
   82a10:	00b000ab 	.word	0x00b000ab
   82a14:	00ab00ab 	.word	0x00ab00ab
   82a18:	00b500ab 	.word	0x00b500ab
   82a1c:	00e600e6 	.word	0x00e600e6
   82a20:	00d300b9 	.word	0x00d300b9
   82a24:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82a26:	4b68      	ldr	r3, [pc, #416]	; (82bc8 <V2Protocol_ProcessCommand+0x200>)
   82a28:	2200      	movs	r2, #0
   82a2a:	705a      	strb	r2, [r3, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82a2c:	220d      	movs	r2, #13
   82a2e:	709a      	strb	r2, [r3, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82a30:	4c67      	ldr	r4, [pc, #412]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82a32:	cc07      	ldmia	r4!, {r0, r1, r2}
   82a34:	f8c3 0003 	str.w	r0, [r3, #3]
   82a38:	f8c3 1007 	str.w	r1, [r3, #7]
   82a3c:	f8c3 200b 	str.w	r2, [r3, #11]
   82a40:	7822      	ldrb	r2, [r4, #0]
   82a42:	73da      	strb	r2, [r3, #15]
	udd_g_ctrlreq.payload = status_payload;
   82a44:	4a5f      	ldr	r2, [pc, #380]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82a46:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   82a48:	2310      	movs	r3, #16
   82a4a:	8193      	strh	r3, [r2, #12]
	return true;
   82a4c:	2001      	movs	r0, #1
}
   82a4e:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82a50:	4b5c      	ldr	r3, [pc, #368]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82a52:	689b      	ldr	r3, [r3, #8]
   82a54:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   82a56:	2c02      	cmp	r4, #2
   82a58:	d00c      	beq.n	82a74 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   82a5a:	4b5e      	ldr	r3, [pc, #376]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a5c:	2202      	movs	r2, #2
   82a5e:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a60:	4628      	mov	r0, r5
   82a62:	4b5d      	ldr	r3, [pc, #372]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a64:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a66:	2c03      	cmp	r4, #3
   82a68:	d017      	beq.n	82a9a <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82a6a:	4b5c      	ldr	r3, [pc, #368]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82a6c:	22c0      	movs	r2, #192	; 0xc0
   82a6e:	705a      	strb	r2, [r3, #1]
	return true;
   82a70:	2001      	movs	r0, #1
   82a72:	e7ec      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   82a74:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   82a76:	4b57      	ldr	r3, [pc, #348]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a78:	2202      	movs	r2, #2
   82a7a:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a7c:	4628      	mov	r0, r5
   82a7e:	4b56      	ldr	r3, [pc, #344]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a80:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82a82:	f010 0f02 	tst.w	r0, #2
   82a86:	d0f0      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82a88:	4b54      	ldr	r3, [pc, #336]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82a8a:	2200      	movs	r2, #0
   82a8c:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a8e:	4621      	mov	r1, r4
   82a90:	4628      	mov	r0, r5
   82a92:	4b53      	ldr	r3, [pc, #332]	; (82be0 <V2Protocol_ProcessCommand+0x218>)
   82a94:	4798      	blx	r3
	return true;
   82a96:	2001      	movs	r0, #1
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a98:	e7d9      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a9a:	f010 0f01 	tst.w	r0, #1
   82a9e:	d0e4      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82aa0:	4c4e      	ldr	r4, [pc, #312]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82aa2:	2300      	movs	r3, #0
   82aa4:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82aa6:	4628      	mov	r0, r5
   82aa8:	4b4e      	ldr	r3, [pc, #312]	; (82be4 <V2Protocol_ProcessCommand+0x21c>)
   82aaa:	4798      	blx	r3
   82aac:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   82aae:	4a49      	ldr	r2, [pc, #292]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82ab0:	8813      	ldrh	r3, [r2, #0]
   82ab2:	3301      	adds	r3, #1
   82ab4:	8013      	strh	r3, [r2, #0]
	return true;
   82ab6:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   82ab8:	e7c9      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82aba:	4b42      	ldr	r3, [pc, #264]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82abc:	689b      	ldr	r3, [r3, #8]
   82abe:	78da      	ldrb	r2, [r3, #3]
   82ac0:	7899      	ldrb	r1, [r3, #2]
   82ac2:	0409      	lsls	r1, r1, #16
   82ac4:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82ac8:	781a      	ldrb	r2, [r3, #0]
   82aca:	4311      	orrs	r1, r2
   82acc:	785b      	ldrb	r3, [r3, #1]
   82ace:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   82ad2:	4b45      	ldr	r3, [pc, #276]	; (82be8 <V2Protocol_ProcessCommand+0x220>)
   82ad4:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   82ad6:	2900      	cmp	r1, #0
   82ad8:	db0a      	blt.n	82af0 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   82ada:	4844      	ldr	r0, [pc, #272]	; (82bec <V2Protocol_ProcessCommand+0x224>)
   82adc:	4b44      	ldr	r3, [pc, #272]	; (82bf0 <V2Protocol_ProcessCommand+0x228>)
   82ade:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82ae0:	4b3e      	ldr	r3, [pc, #248]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82ae2:	2200      	movs	r2, #0
   82ae4:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82ae6:	4b3b      	ldr	r3, [pc, #236]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82ae8:	2202      	movs	r2, #2
   82aea:	801a      	strh	r2, [r3, #0]
	return true;
   82aec:	2001      	movs	r0, #1
}
   82aee:	e7ae      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	  MustLoadExtendedAddress = true;
   82af0:	4b40      	ldr	r3, [pc, #256]	; (82bf4 <V2Protocol_ProcessCommand+0x22c>)
   82af2:	2201      	movs	r2, #1
   82af4:	701a      	strb	r2, [r3, #0]
   82af6:	e7f0      	b.n	82ada <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82af8:	4b38      	ldr	r3, [pc, #224]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82afa:	2200      	movs	r2, #0
   82afc:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82afe:	4b35      	ldr	r3, [pc, #212]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82b00:	2202      	movs	r2, #2
   82b02:	801a      	strh	r2, [r3, #0]
	return true;
   82b04:	2001      	movs	r0, #1
}
   82b06:	e7a2      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_EnterISPMode();
   82b08:	4b3b      	ldr	r3, [pc, #236]	; (82bf8 <V2Protocol_ProcessCommand+0x230>)
   82b0a:	4798      	blx	r3
	return true;
   82b0c:	2001      	movs	r0, #1
			break;
   82b0e:	e79e      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_LeaveISPMode();
   82b10:	4b3a      	ldr	r3, [pc, #232]	; (82bfc <V2Protocol_ProcessCommand+0x234>)
   82b12:	4798      	blx	r3
	return true;
   82b14:	2001      	movs	r0, #1
			break;
   82b16:	e79a      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82b18:	4939      	ldr	r1, [pc, #228]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b1a:	4620      	mov	r0, r4
   82b1c:	4b39      	ldr	r3, [pc, #228]	; (82c04 <V2Protocol_ProcessCommand+0x23c>)
   82b1e:	4798      	blx	r3
	return true;
   82b20:	2001      	movs	r0, #1
			break;
   82b22:	e794      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82b24:	4936      	ldr	r1, [pc, #216]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b26:	4620      	mov	r0, r4
   82b28:	4b37      	ldr	r3, [pc, #220]	; (82c08 <V2Protocol_ProcessCommand+0x240>)
   82b2a:	4798      	blx	r3
	return true;
   82b2c:	2001      	movs	r0, #1
			break;
   82b2e:	e78e      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ChipErase();
   82b30:	4b36      	ldr	r3, [pc, #216]	; (82c0c <V2Protocol_ProcessCommand+0x244>)
   82b32:	4798      	blx	r3
	return true;
   82b34:	2001      	movs	r0, #1
			break;
   82b36:	e78a      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   82b38:	4620      	mov	r0, r4
   82b3a:	4b35      	ldr	r3, [pc, #212]	; (82c10 <V2Protocol_ProcessCommand+0x248>)
   82b3c:	4798      	blx	r3
	return true;
   82b3e:	2001      	movs	r0, #1
			break;
   82b40:	e785      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_WriteFuseLock(V2Command);
   82b42:	4620      	mov	r0, r4
   82b44:	4b33      	ldr	r3, [pc, #204]	; (82c14 <V2Protocol_ProcessCommand+0x24c>)
   82b46:	4798      	blx	r3
	return true;
   82b48:	2001      	movs	r0, #1
			break;
   82b4a:	e780      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_SPIMulti();
   82b4c:	4b32      	ldr	r3, [pc, #200]	; (82c18 <V2Protocol_ProcessCommand+0x250>)
   82b4e:	4798      	blx	r3
	return true;
   82b50:	2001      	movs	r0, #1
			break;
   82b52:	e77c      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82b54:	4a1b      	ldr	r2, [pc, #108]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b56:	4b21      	ldr	r3, [pc, #132]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82b58:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   82b5a:	4b1e      	ldr	r3, [pc, #120]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82b5c:	8819      	ldrh	r1, [r3, #0]
   82b5e:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   82b60:	2200      	movs	r2, #0
   82b62:	801a      	strh	r2, [r3, #0]
			return true;
   82b64:	2001      	movs	r0, #1
   82b66:	e772      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b68:	4a16      	ldr	r2, [pc, #88]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b6a:	8853      	ldrh	r3, [r2, #2]
   82b6c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b6e:	88d2      	ldrh	r2, [r2, #6]
   82b70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82b78:	dc21      	bgt.n	82bbe <V2Protocol_ProcessCommand+0x1f6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   82b7a:	4912      	ldr	r1, [pc, #72]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b7c:	4b20      	ldr	r3, [pc, #128]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b7e:	4403      	add	r3, r0
   82b80:	608b      	str	r3, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82b82:	818a      	strh	r2, [r1, #12]
			return true;
   82b84:	2001      	movs	r0, #1
   82b86:	e762      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b88:	4a0e      	ldr	r2, [pc, #56]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b8a:	8853      	ldrh	r3, [r2, #2]
   82b8c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b8e:	88d2      	ldrh	r2, [r2, #6]
   82b90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82b98:	dd01      	ble.n	82b9e <V2Protocol_ProcessCommand+0x1d6>
				return false;
   82b9a:	2000      	movs	r0, #0
   82b9c:	e757      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82b9e:	4b09      	ldr	r3, [pc, #36]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82ba0:	6899      	ldr	r1, [r3, #8]
   82ba2:	4b17      	ldr	r3, [pc, #92]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82ba4:	4418      	add	r0, r3
   82ba6:	4b1d      	ldr	r3, [pc, #116]	; (82c1c <V2Protocol_ProcessCommand+0x254>)
   82ba8:	4798      	blx	r3
			return true;
   82baa:	2001      	movs	r0, #1
   82bac:	e74f      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   82bae:	4b0b      	ldr	r3, [pc, #44]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82bb0:	22c9      	movs	r2, #201	; 0xc9
   82bb2:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82bb4:	4b07      	ldr	r3, [pc, #28]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82bb6:	2202      	movs	r2, #2
   82bb8:	801a      	strh	r2, [r3, #0]
	return true;
   82bba:	2001      	movs	r0, #1
}
   82bbc:	e747      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
				return false;
   82bbe:	2000      	movs	r0, #0
   82bc0:	e745      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
   82bc2:	bf00      	nop
   82bc4:	20002dec 	.word	0x20002dec
   82bc8:	20001a24 	.word	0x20001a24
   82bcc:	000834f9 	.word	0x000834f9
   82bd0:	0008e430 	.word	0x0008e430
   82bd4:	20002636 	.word	0x20002636
   82bd8:	00082c3d 	.word	0x00082c3d
   82bdc:	20002638 	.word	0x20002638
   82be0:	00082c65 	.word	0x00082c65
   82be4:	00082c51 	.word	0x00082c51
   82be8:	20002658 	.word	0x20002658
   82bec:	0008e440 	.word	0x0008e440
   82bf0:	0008780d 	.word	0x0008780d
   82bf4:	20002634 	.word	0x20002634
   82bf8:	000824d5 	.word	0x000824d5
   82bfc:	0008261d 	.word	0x0008261d
   82c00:	20001924 	.word	0x20001924
   82c04:	00081fb5 	.word	0x00081fb5
   82c08:	00082235 	.word	0x00082235
   82c0c:	0008267d 	.word	0x0008267d
   82c10:	00082381 	.word	0x00082381
   82c14:	0008242d 	.word	0x0008242d
   82c18:	0008249d 	.word	0x0008249d
   82c1c:	00087835 	.word	0x00087835

00082c20 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
   82c20:	4602      	mov	r2, r0
	ParameterItem_t* CurrTableItem = ParameterTable;
   82c22:	4805      	ldr	r0, [pc, #20]	; (82c38 <V2Params_GetParamFromTable+0x18>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c24:	f100 011e 	add.w	r1, r0, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   82c28:	7803      	ldrb	r3, [r0, #0]
   82c2a:	4293      	cmp	r3, r2
   82c2c:	d003      	beq.n	82c36 <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   82c2e:	3003      	adds	r0, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c30:	4288      	cmp	r0, r1
   82c32:	d1f9      	bne.n	82c28 <V2Params_GetParamFromTable+0x8>
	}

	return NULL;
   82c34:	2000      	movs	r0, #0
}
   82c36:	4770      	bx	lr
   82c38:	20000588 	.word	0x20000588

00082c3c <V2Params_GetParameterPrivileges>:
{
   82c3c:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c3e:	4b03      	ldr	r3, [pc, #12]	; (82c4c <V2Params_GetParameterPrivileges+0x10>)
   82c40:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c42:	b108      	cbz	r0, 82c48 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   82c44:	7840      	ldrb	r0, [r0, #1]
}
   82c46:	bd08      	pop	{r3, pc}
	  return 0;
   82c48:	2000      	movs	r0, #0
   82c4a:	e7fc      	b.n	82c46 <V2Params_GetParameterPrivileges+0xa>
   82c4c:	00082c21 	.word	0x00082c21

00082c50 <V2Params_GetParameterValue>:
{
   82c50:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c52:	4b03      	ldr	r3, [pc, #12]	; (82c60 <V2Params_GetParameterValue+0x10>)
   82c54:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c56:	b108      	cbz	r0, 82c5c <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   82c58:	7880      	ldrb	r0, [r0, #2]
}
   82c5a:	bd08      	pop	{r3, pc}
	  return 0;
   82c5c:	2000      	movs	r0, #0
   82c5e:	e7fc      	b.n	82c5a <V2Params_GetParameterValue+0xa>
   82c60:	00082c21 	.word	0x00082c21

00082c64 <V2Params_SetParameterValue>:
{
   82c64:	b510      	push	{r4, lr}
   82c66:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c68:	4b02      	ldr	r3, [pc, #8]	; (82c74 <V2Params_SetParameterValue+0x10>)
   82c6a:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c6c:	b100      	cbz	r0, 82c70 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   82c6e:	7084      	strb	r4, [r0, #2]
}
   82c70:	bd10      	pop	{r4, pc}
   82c72:	bf00      	nop
   82c74:	00082c21 	.word	0x00082c21

00082c78 <ctrl_readmem_ctrl>:
	buflen,
	main_vendor_bulk_in_received
	);	
}

void ctrl_readmem_ctrl(void){
   82c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82c7a:	4b0a      	ldr	r3, [pc, #40]	; (82ca4 <ctrl_readmem_ctrl+0x2c>)
   82c7c:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82c7e:	685f      	ldr	r7, [r3, #4]
	
	FPGA_releaselock();
   82c80:	4b09      	ldr	r3, [pc, #36]	; (82ca8 <ctrl_readmem_ctrl+0x30>)
   82c82:	4798      	blx	r3
	while(!FPGA_setlock(fpga_ctrlmem));
   82c84:	2505      	movs	r5, #5
   82c86:	4c09      	ldr	r4, [pc, #36]	; (82cac <ctrl_readmem_ctrl+0x34>)
   82c88:	4628      	mov	r0, r5
   82c8a:	47a0      	blx	r4
   82c8c:	2800      	cmp	r0, #0
   82c8e:	d0fb      	beq.n	82c88 <ctrl_readmem_ctrl+0x10>
	
	/* Set address */
	FPGA_setaddr(address);
   82c90:	4638      	mov	r0, r7
   82c92:	4b07      	ldr	r3, [pc, #28]	; (82cb0 <ctrl_readmem_ctrl+0x38>)
   82c94:	4798      	blx	r3

	/* Do memory read */
	ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82c96:	4b07      	ldr	r3, [pc, #28]	; (82cb4 <ctrl_readmem_ctrl+0x3c>)
   82c98:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   82c9c:	601a      	str	r2, [r3, #0]
	
	/* Set size to read */
	ctrlmemread_size = buflen;
   82c9e:	4b06      	ldr	r3, [pc, #24]	; (82cb8 <ctrl_readmem_ctrl+0x40>)
   82ca0:	601e      	str	r6, [r3, #0]
	
	/* Start Transaction */
}
   82ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ca4:	20001a48 	.word	0x20001a48
   82ca8:	00081d6d 	.word	0x00081d6d
   82cac:	00081d41 	.word	0x00081d41
   82cb0:	00081d85 	.word	0x00081d85
   82cb4:	20001a88 	.word	0x20001a88
   82cb8:	20001a8c 	.word	0x20001a8c

00082cbc <ctrl_writemem_ctrl>:

void ctrl_writemem_ctrl(void){
   82cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82cbe:	4b0e      	ldr	r3, [pc, #56]	; (82cf8 <ctrl_writemem_ctrl+0x3c>)
   82cc0:	681c      	ldr	r4, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82cc2:	685f      	ldr	r7, [r3, #4]
	
	uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
	
	//printf("Writing to %x, %d\n", address, buflen);
	
	FPGA_releaselock();
   82cc4:	4b0d      	ldr	r3, [pc, #52]	; (82cfc <ctrl_writemem_ctrl+0x40>)
   82cc6:	4798      	blx	r3
	while(!FPGA_setlock(fpga_generic));
   82cc8:	2601      	movs	r6, #1
   82cca:	4d0d      	ldr	r5, [pc, #52]	; (82d00 <ctrl_writemem_ctrl+0x44>)
   82ccc:	4630      	mov	r0, r6
   82cce:	47a8      	blx	r5
   82cd0:	2800      	cmp	r0, #0
   82cd2:	d0fb      	beq.n	82ccc <ctrl_writemem_ctrl+0x10>
	
	/* Set address */
	FPGA_setaddr(address);
   82cd4:	4638      	mov	r0, r7
   82cd6:	4b0b      	ldr	r3, [pc, #44]	; (82d04 <ctrl_writemem_ctrl+0x48>)
   82cd8:	4798      	blx	r3

	/* Start Transaction */

	/* Do memory write */
	for(unsigned int i = 0; i < buflen; i++){
   82cda:	b14c      	cbz	r4, 82cf0 <ctrl_writemem_ctrl+0x34>
   82cdc:	4a0a      	ldr	r2, [pc, #40]	; (82d08 <ctrl_writemem_ctrl+0x4c>)
   82cde:	2300      	movs	r3, #0
		xram[i] = ctrlbuf_payload[i];
   82ce0:	4d0a      	ldr	r5, [pc, #40]	; (82d0c <ctrl_writemem_ctrl+0x50>)
   82ce2:	6829      	ldr	r1, [r5, #0]
   82ce4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82ce8:	54c8      	strb	r0, [r1, r3]
	for(unsigned int i = 0; i < buflen; i++){
   82cea:	3301      	adds	r3, #1
   82cec:	429c      	cmp	r4, r3
   82cee:	d1f8      	bne.n	82ce2 <ctrl_writemem_ctrl+0x26>
	}
	
	FPGA_releaselock();
   82cf0:	4b02      	ldr	r3, [pc, #8]	; (82cfc <ctrl_writemem_ctrl+0x40>)
   82cf2:	4798      	blx	r3
}
   82cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cf6:	bf00      	nop
   82cf8:	20001a48 	.word	0x20001a48
   82cfc:	00081d6d 	.word	0x00081d6d
   82d00:	00081d41 	.word	0x00081d41
   82d04:	00081d85 	.word	0x00081d85
   82d08:	20001a4f 	.word	0x20001a4f
   82d0c:	200002f4 	.word	0x200002f4

00082d10 <ctrl_writemem_bulk>:

void ctrl_writemem_bulk(void){
   82d10:	b570      	push	{r4, r5, r6, lr}
	//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d12:	4b07      	ldr	r3, [pc, #28]	; (82d30 <ctrl_writemem_bulk+0x20>)
   82d14:	685e      	ldr	r6, [r3, #4]
	
	// TODO: see block in
	FPGA_releaselock();
   82d16:	4b07      	ldr	r3, [pc, #28]	; (82d34 <ctrl_writemem_bulk+0x24>)
   82d18:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockout));
   82d1a:	2504      	movs	r5, #4
   82d1c:	4c06      	ldr	r4, [pc, #24]	; (82d38 <ctrl_writemem_bulk+0x28>)
   82d1e:	4628      	mov	r0, r5
   82d20:	47a0      	blx	r4
   82d22:	2800      	cmp	r0, #0
   82d24:	d0fb      	beq.n	82d1e <ctrl_writemem_bulk+0xe>
	
	/* Set address */
	FPGA_setaddr(address);
   82d26:	4630      	mov	r0, r6
   82d28:	4b04      	ldr	r3, [pc, #16]	; (82d3c <ctrl_writemem_bulk+0x2c>)
   82d2a:	4798      	blx	r3
	
	/* Transaction done in generic callback */
}
   82d2c:	bd70      	pop	{r4, r5, r6, pc}
   82d2e:	bf00      	nop
   82d30:	20001a48 	.word	0x20001a48
   82d34:	00081d6d 	.word	0x00081d6d
   82d38:	00081d41 	.word	0x00081d41
   82d3c:	00081d85 	.word	0x00081d85

00082d40 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   82d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   82d42:	4b0a      	ldr	r3, [pc, #40]	; (82d6c <ctrl_readmem_bulk+0x2c>)
   82d44:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d46:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82d48:	4b09      	ldr	r3, [pc, #36]	; (82d70 <ctrl_readmem_bulk+0x30>)
   82d4a:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockin));
   82d4c:	2502      	movs	r5, #2
   82d4e:	4c09      	ldr	r4, [pc, #36]	; (82d74 <ctrl_readmem_bulk+0x34>)
   82d50:	4628      	mov	r0, r5
   82d52:	47a0      	blx	r4
   82d54:	2800      	cmp	r0, #0
   82d56:	d0fb      	beq.n	82d50 <ctrl_readmem_bulk+0x10>
	FPGA_setaddr(address);
   82d58:	4638      	mov	r0, r7
   82d5a:	4b07      	ldr	r3, [pc, #28]	; (82d78 <ctrl_readmem_bulk+0x38>)
   82d5c:	4798      	blx	r3
	udi_vendor_bulk_in_run(
   82d5e:	4a07      	ldr	r2, [pc, #28]	; (82d7c <ctrl_readmem_bulk+0x3c>)
   82d60:	4631      	mov	r1, r6
   82d62:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   82d66:	4b06      	ldr	r3, [pc, #24]	; (82d80 <ctrl_readmem_bulk+0x40>)
   82d68:	4798      	blx	r3
}
   82d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d6c:	20001a48 	.word	0x20001a48
   82d70:	00081d6d 	.word	0x00081d6d
   82d74:	00081d41 	.word	0x00081d41
   82d78:	00081d85 	.word	0x00081d85
   82d7c:	00082ed1 	.word	0x00082ed1
   82d80:	00084629 	.word	0x00084629

00082d84 <ctrl_xmega_program_void>:
}
#endif
    			

void ctrl_xmega_program_void(void)
{
   82d84:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   82d86:	4b01      	ldr	r3, [pc, #4]	; (82d8c <ctrl_xmega_program_void+0x8>)
   82d88:	4798      	blx	r3
}
   82d8a:	bd08      	pop	{r3, pc}
   82d8c:	00083e85 	.word	0x00083e85

00082d90 <ctrl_avr_program_void>:

void ctrl_avr_program_void(void)
{
   82d90:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   82d92:	4b01      	ldr	r3, [pc, #4]	; (82d98 <ctrl_avr_program_void+0x8>)
   82d94:	4798      	blx	r3
}
   82d96:	bd08      	pop	{r3, pc}
   82d98:	000829c9 	.word	0x000829c9

00082d9c <ctrl_usart2_enabledump>:

static void ctrl_usart2_enabledump(void)
{
   82d9c:	b510      	push	{r4, lr}
   82d9e:	b084      	sub	sp, #16
	switch(udd_g_ctrlreq.req.wValue & 0xFF){
   82da0:	4b1e      	ldr	r3, [pc, #120]	; (82e1c <ctrl_usart2_enabledump+0x80>)
   82da2:	789b      	ldrb	r3, [r3, #2]
   82da4:	b11b      	cbz	r3, 82dae <ctrl_usart2_enabledump+0x12>
   82da6:	2b01      	cmp	r3, #1
   82da8:	d012      	beq.n	82dd0 <ctrl_usart2_enabledump+0x34>
			
		default:
			break;
	}

}
   82daa:	b004      	add	sp, #16
   82dac:	bd10      	pop	{r4, pc}
			usart_disable_rx(USART2);
   82dae:	4c1c      	ldr	r4, [pc, #112]	; (82e20 <ctrl_usart2_enabledump+0x84>)
   82db0:	4620      	mov	r0, r4
   82db2:	4b1c      	ldr	r3, [pc, #112]	; (82e24 <ctrl_usart2_enabledump+0x88>)
   82db4:	4798      	blx	r3
			usart_disable_tx(USART2);
   82db6:	4620      	mov	r0, r4
   82db8:	4b1b      	ldr	r3, [pc, #108]	; (82e28 <ctrl_usart2_enabledump+0x8c>)
   82dba:	4798      	blx	r3
			usart_enable_interrupt(USART2, 0);
   82dbc:	2100      	movs	r1, #0
   82dbe:	4620      	mov	r0, r4
   82dc0:	4b1a      	ldr	r3, [pc, #104]	; (82e2c <ctrl_usart2_enabledump+0x90>)
   82dc2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82dc4:	4b1a      	ldr	r3, [pc, #104]	; (82e30 <ctrl_usart2_enabledump+0x94>)
   82dc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   82dce:	e7ec      	b.n	82daa <ctrl_usart2_enabledump+0xe>
			pmc_enable_periph_clk(ID_USART2);
   82dd0:	200f      	movs	r0, #15
   82dd2:	4b18      	ldr	r3, [pc, #96]	; (82e34 <ctrl_usart2_enabledump+0x98>)
   82dd4:	4798      	blx	r3
			opts.channel_mode = US_MR_CHMODE_NORMAL;
   82dd6:	2300      	movs	r3, #0
   82dd8:	9303      	str	r3, [sp, #12]
			opts.spi_mode = SPI_MODE_0;
   82dda:	9302      	str	r3, [sp, #8]
			opts.char_length = US_MR_CHRL_8_BIT;
   82ddc:	23c0      	movs	r3, #192	; 0xc0
   82dde:	9301      	str	r3, [sp, #4]
			usart_init_spi_slave(USART2, &opts);
   82de0:	4c0f      	ldr	r4, [pc, #60]	; (82e20 <ctrl_usart2_enabledump+0x84>)
   82de2:	4669      	mov	r1, sp
   82de4:	4620      	mov	r0, r4
   82de6:	4b14      	ldr	r3, [pc, #80]	; (82e38 <ctrl_usart2_enabledump+0x9c>)
   82de8:	4798      	blx	r3
			usart_enable_rx(USART2);
   82dea:	4620      	mov	r0, r4
   82dec:	4b13      	ldr	r3, [pc, #76]	; (82e3c <ctrl_usart2_enabledump+0xa0>)
   82dee:	4798      	blx	r3
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82df0:	4b0f      	ldr	r3, [pc, #60]	; (82e30 <ctrl_usart2_enabledump+0x94>)
   82df2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82df6:	601a      	str	r2, [r3, #0]
			usart_enable_interrupt(USART2, US_IER_RXRDY);
   82df8:	2101      	movs	r1, #1
   82dfa:	4620      	mov	r0, r4
   82dfc:	4b0b      	ldr	r3, [pc, #44]	; (82e2c <ctrl_usart2_enabledump+0x90>)
   82dfe:	4798      	blx	r3
			gpio_configure_pin(PIO_PA23_IDX, (PIO_PERIPH_A | PIO_DEFAULT));
   82e00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e04:	2017      	movs	r0, #23
   82e06:	4c0e      	ldr	r4, [pc, #56]	; (82e40 <ctrl_usart2_enabledump+0xa4>)
   82e08:	47a0      	blx	r4
			gpio_configure_pin(PIO_PB22_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e0e:	2036      	movs	r0, #54	; 0x36
   82e10:	47a0      	blx	r4
			gpio_configure_pin(PIO_PA25_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e12:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e16:	2019      	movs	r0, #25
   82e18:	47a0      	blx	r4
}
   82e1a:	e7c6      	b.n	82daa <ctrl_usart2_enabledump+0xe>
   82e1c:	20002dec 	.word	0x20002dec
   82e20:	40098000 	.word	0x40098000
   82e24:	00086dd3 	.word	0x00086dd3
   82e28:	00086dc3 	.word	0x00086dc3
   82e2c:	00086dd9 	.word	0x00086dd9
   82e30:	e000e100 	.word	0xe000e100
   82e34:	000854b1 	.word	0x000854b1
   82e38:	00086d15 	.word	0x00086d15
   82e3c:	00086dcd 	.word	0x00086dcd
   82e40:	0008516d 	.word	0x0008516d

00082e44 <ctrl_usart_cb_data>:
{
	ctrl_usart(USART_TARGET, false);
}

static void ctrl_usart_cb_data(void)
{		
   82e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82e46:	4b0a      	ldr	r3, [pc, #40]	; (82e70 <ctrl_usart_cb_data+0x2c>)
   82e48:	88da      	ldrh	r2, [r3, #6]
   82e4a:	899b      	ldrh	r3, [r3, #12]
   82e4c:	4293      	cmp	r3, r2
   82e4e:	d30d      	bcc.n	82e6c <ctrl_usart_cb_data+0x28>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e50:	b162      	cbz	r2, 82e6c <ctrl_usart_cb_data+0x28>
   82e52:	2400      	movs	r4, #0
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   82e54:	4d06      	ldr	r5, [pc, #24]	; (82e70 <ctrl_usart_cb_data+0x2c>)
   82e56:	4f07      	ldr	r7, [pc, #28]	; (82e74 <ctrl_usart_cb_data+0x30>)
   82e58:	4e07      	ldr	r6, [pc, #28]	; (82e78 <ctrl_usart_cb_data+0x34>)
   82e5a:	68ab      	ldr	r3, [r5, #8]
   82e5c:	5d1a      	ldrb	r2, [r3, r4]
   82e5e:	2100      	movs	r1, #0
   82e60:	4638      	mov	r0, r7
   82e62:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e64:	3401      	adds	r4, #1
   82e66:	88eb      	ldrh	r3, [r5, #6]
   82e68:	42a3      	cmp	r3, r4
   82e6a:	dcf6      	bgt.n	82e5a <ctrl_usart_cb_data+0x16>
	}
}
   82e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e6e:	bf00      	nop
   82e70:	20002dec 	.word	0x20002dec
   82e74:	40090000 	.word	0x40090000
   82e78:	000838d5 	.word	0x000838d5

00082e7c <ctrl_usart_cb>:
{
   82e7c:	b508      	push	{r3, lr}
	ctrl_usart(USART_TARGET, false);
   82e7e:	2100      	movs	r1, #0
   82e80:	4801      	ldr	r0, [pc, #4]	; (82e88 <ctrl_usart_cb+0xc>)
   82e82:	4b02      	ldr	r3, [pc, #8]	; (82e8c <ctrl_usart_cb+0x10>)
   82e84:	4798      	blx	r3
}
   82e86:	bd08      	pop	{r3, pc}
   82e88:	40090000 	.word	0x40090000
   82e8c:	00083579 	.word	0x00083579

00082e90 <ctrl_progfpga_bulk>:
	// If any of the above failed...
	return false;		
}


void ctrl_progfpga_bulk(void){
   82e90:	b508      	push	{r3, lr}
	
	switch(udd_g_ctrlreq.req.wValue){
   82e92:	4b0b      	ldr	r3, [pc, #44]	; (82ec0 <ctrl_progfpga_bulk+0x30>)
   82e94:	885b      	ldrh	r3, [r3, #2]
   82e96:	2ba1      	cmp	r3, #161	; 0xa1
   82e98:	d007      	beq.n	82eaa <ctrl_progfpga_bulk+0x1a>
   82e9a:	2ba2      	cmp	r3, #162	; 0xa2
   82e9c:	d00b      	beq.n	82eb6 <ctrl_progfpga_bulk+0x26>
   82e9e:	2ba0      	cmp	r3, #160	; 0xa0
   82ea0:	d000      	beq.n	82ea4 <ctrl_progfpga_bulk+0x14>
			break;
			
		default:
			break;
	}
}
   82ea2:	bd08      	pop	{r3, pc}
			fpga_program_setup1();			
   82ea4:	4b07      	ldr	r3, [pc, #28]	; (82ec4 <ctrl_progfpga_bulk+0x34>)
   82ea6:	4798      	blx	r3
			break;
   82ea8:	e7fb      	b.n	82ea2 <ctrl_progfpga_bulk+0x12>
			fpga_program_setup2();
   82eaa:	4b07      	ldr	r3, [pc, #28]	; (82ec8 <ctrl_progfpga_bulk+0x38>)
   82eac:	4798      	blx	r3
			blockendpoint_usage = bep_fpgabitstream;
   82eae:	4b07      	ldr	r3, [pc, #28]	; (82ecc <ctrl_progfpga_bulk+0x3c>)
   82eb0:	220a      	movs	r2, #10
   82eb2:	701a      	strb	r2, [r3, #0]
			break;
   82eb4:	e7f5      	b.n	82ea2 <ctrl_progfpga_bulk+0x12>
			blockendpoint_usage = bep_emem;
   82eb6:	4b05      	ldr	r3, [pc, #20]	; (82ecc <ctrl_progfpga_bulk+0x3c>)
   82eb8:	2200      	movs	r2, #0
   82eba:	701a      	strb	r2, [r3, #0]
}
   82ebc:	e7f1      	b.n	82ea2 <ctrl_progfpga_bulk+0x12>
   82ebe:	bf00      	nop
   82ec0:	20002dec 	.word	0x20002dec
   82ec4:	000870d1 	.word	0x000870d1
   82ec8:	00087165 	.word	0x00087165
   82ecc:	20001a45 	.word	0x20001a45

00082ed0 <main_vendor_bulk_in_received>:
	return false;
}

void main_vendor_bulk_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82ed0:	b508      	push	{r3, lr}
	UNUSED(nb_transfered);
	UNUSED(ep);
	
	if (FPGA_lockstatus() == fpga_blockin){		
   82ed2:	4b08      	ldr	r3, [pc, #32]	; (82ef4 <main_vendor_bulk_in_received+0x24>)
   82ed4:	4798      	blx	r3
   82ed6:	2802      	cmp	r0, #2
   82ed8:	d004      	beq.n	82ee4 <main_vendor_bulk_in_received+0x14>
		FPGA_releaselock();
	} else 	if (FPGA_lockstatus() == fpga_streamin) {
   82eda:	4b06      	ldr	r3, [pc, #24]	; (82ef4 <main_vendor_bulk_in_received+0x24>)
   82edc:	4798      	blx	r3
   82ede:	2803      	cmp	r0, #3
   82ee0:	d003      	beq.n	82eea <main_vendor_bulk_in_received+0x1a>

	if (UDD_EP_TRANSFER_OK != status) {
		return; // Transfer aborted/error
	}	

}
   82ee2:	bd08      	pop	{r3, pc}
		FPGA_releaselock();
   82ee4:	4b04      	ldr	r3, [pc, #16]	; (82ef8 <main_vendor_bulk_in_received+0x28>)
   82ee6:	4798      	blx	r3
   82ee8:	e7fb      	b.n	82ee2 <main_vendor_bulk_in_received+0x12>
		smc_normaltiming();
   82eea:	4b04      	ldr	r3, [pc, #16]	; (82efc <main_vendor_bulk_in_received+0x2c>)
   82eec:	4798      	blx	r3
		FPGA_releaselock();
   82eee:	4b02      	ldr	r3, [pc, #8]	; (82ef8 <main_vendor_bulk_in_received+0x28>)
   82ef0:	4798      	blx	r3
	if (UDD_EP_TRANSFER_OK != status) {
   82ef2:	e7f6      	b.n	82ee2 <main_vendor_bulk_in_received+0x12>
   82ef4:	00081d79 	.word	0x00081d79
   82ef8:	00081d6d 	.word	0x00081d6d
   82efc:	00081dad 	.word	0x00081dad

00082f00 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82f00:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   82f02:	b9b8      	cbnz	r0, 82f34 <main_vendor_bulk_out_received+0x34>
		main_vendor_bulk_out_received);
		
		return;
	}
	
	if (blockendpoint_usage == bep_emem){
   82f04:	4b17      	ldr	r3, [pc, #92]	; (82f64 <main_vendor_bulk_out_received+0x64>)
   82f06:	781b      	ldrb	r3, [r3, #0]
   82f08:	b9f3      	cbnz	r3, 82f48 <main_vendor_bulk_out_received+0x48>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f0a:	b141      	cbz	r1, 82f1e <main_vendor_bulk_out_received+0x1e>
   82f0c:	4a16      	ldr	r2, [pc, #88]	; (82f68 <main_vendor_bulk_out_received+0x68>)
			xram[i] = main_buf_loopback[i];
   82f0e:	4d17      	ldr	r5, [pc, #92]	; (82f6c <main_vendor_bulk_out_received+0x6c>)
   82f10:	6828      	ldr	r0, [r5, #0]
   82f12:	f812 4b01 	ldrb.w	r4, [r2], #1
   82f16:	54c4      	strb	r4, [r0, r3]
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f18:	3301      	adds	r3, #1
   82f1a:	4299      	cmp	r1, r3
   82f1c:	d1f8      	bne.n	82f10 <main_vendor_bulk_out_received+0x10>
		}
		
		if (FPGA_lockstatus() == fpga_blockout){
   82f1e:	4b14      	ldr	r3, [pc, #80]	; (82f70 <main_vendor_bulk_out_received+0x70>)
   82f20:	4798      	blx	r3
   82f22:	2804      	cmp	r0, #4
   82f24:	d00d      	beq.n	82f42 <main_vendor_bulk_out_received+0x42>
#endif
	}
	
	//printf("BULKOUT: %d bytes\n", (int)nb_transfered);
	
	udi_vendor_bulk_out_run(
   82f26:	4a13      	ldr	r2, [pc, #76]	; (82f74 <main_vendor_bulk_out_received+0x74>)
   82f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f2c:	480e      	ldr	r0, [pc, #56]	; (82f68 <main_vendor_bulk_out_received+0x68>)
   82f2e:	4b12      	ldr	r3, [pc, #72]	; (82f78 <main_vendor_bulk_out_received+0x78>)
   82f30:	4798      	blx	r3
	main_buf_loopback,
	sizeof(main_buf_loopback),
	main_vendor_bulk_out_received);
}
   82f32:	bd70      	pop	{r4, r5, r6, pc}
		udi_vendor_bulk_out_run(
   82f34:	4a0f      	ldr	r2, [pc, #60]	; (82f74 <main_vendor_bulk_out_received+0x74>)
   82f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f3a:	480b      	ldr	r0, [pc, #44]	; (82f68 <main_vendor_bulk_out_received+0x68>)
   82f3c:	4b0e      	ldr	r3, [pc, #56]	; (82f78 <main_vendor_bulk_out_received+0x78>)
   82f3e:	4798      	blx	r3
		return;
   82f40:	e7f7      	b.n	82f32 <main_vendor_bulk_out_received+0x32>
			FPGA_releaselock();
   82f42:	4b0e      	ldr	r3, [pc, #56]	; (82f7c <main_vendor_bulk_out_received+0x7c>)
   82f44:	4798      	blx	r3
   82f46:	e7ee      	b.n	82f26 <main_vendor_bulk_out_received+0x26>
	} else if (blockendpoint_usage == bep_fpgabitstream){
   82f48:	2b0a      	cmp	r3, #10
   82f4a:	d1ec      	bne.n	82f26 <main_vendor_bulk_out_received+0x26>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f4c:	2900      	cmp	r1, #0
   82f4e:	d0ea      	beq.n	82f26 <main_vendor_bulk_out_received+0x26>
   82f50:	4d05      	ldr	r5, [pc, #20]	; (82f68 <main_vendor_bulk_out_received+0x68>)
   82f52:	194c      	adds	r4, r1, r5
			fpga_program_sendbyte(main_buf_loopback[i]);
   82f54:	4e0a      	ldr	r6, [pc, #40]	; (82f80 <main_vendor_bulk_out_received+0x80>)
   82f56:	f815 0b01 	ldrb.w	r0, [r5], #1
   82f5a:	47b0      	blx	r6
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f5c:	42a5      	cmp	r5, r4
   82f5e:	d1fa      	bne.n	82f56 <main_vendor_bulk_out_received+0x56>
   82f60:	e7e1      	b.n	82f26 <main_vendor_bulk_out_received+0x26>
   82f62:	bf00      	nop
   82f64:	20001a45 	.word	0x20001a45
   82f68:	20001a94 	.word	0x20001a94
   82f6c:	200002f4 	.word	0x200002f4
   82f70:	00081d79 	.word	0x00081d79
   82f74:	00082f01 	.word	0x00082f01
   82f78:	00084645 	.word	0x00084645
   82f7c:	00081d6d 	.word	0x00081d6d
   82f80:	00087175 	.word	0x00087175

00082f84 <ctrl_sam3ucfg_cb>:
{
   82f84:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   82f86:	4b17      	ldr	r3, [pc, #92]	; (82fe4 <ctrl_sam3ucfg_cb+0x60>)
   82f88:	789b      	ldrb	r3, [r3, #2]
   82f8a:	2b02      	cmp	r3, #2
   82f8c:	d00f      	beq.n	82fae <ctrl_sam3ucfg_cb+0x2a>
   82f8e:	2b03      	cmp	r3, #3
   82f90:	d011      	beq.n	82fb6 <ctrl_sam3ucfg_cb+0x32>
   82f92:	2b01      	cmp	r3, #1
   82f94:	d000      	beq.n	82f98 <ctrl_sam3ucfg_cb+0x14>
}
   82f96:	bd10      	pop	{r4, pc}
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82f98:	203e      	movs	r0, #62	; 0x3e
   82f9a:	4b13      	ldr	r3, [pc, #76]	; (82fe8 <ctrl_sam3ucfg_cb+0x64>)
   82f9c:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   82f9e:	4c13      	ldr	r4, [pc, #76]	; (82fec <ctrl_sam3ucfg_cb+0x68>)
   82fa0:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82fa2:	2800      	cmp	r0, #0
   82fa4:	d0fc      	beq.n	82fa0 <ctrl_sam3ucfg_cb+0x1c>
			pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   82fa6:	2010      	movs	r0, #16
   82fa8:	4b11      	ldr	r3, [pc, #68]	; (82ff0 <ctrl_sam3ucfg_cb+0x6c>)
   82faa:	4798      	blx	r3
			break;
   82fac:	e7f3      	b.n	82f96 <ctrl_sam3ucfg_cb+0x12>
			pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fae:	2010      	movs	r0, #16
   82fb0:	4b10      	ldr	r3, [pc, #64]	; (82ff4 <ctrl_sam3ucfg_cb+0x70>)
   82fb2:	4798      	blx	r3
			break;
   82fb4:	e7ef      	b.n	82f96 <ctrl_sam3ucfg_cb+0x12>
			board_power(0);
   82fb6:	201d      	movs	r0, #29
   82fb8:	4b0f      	ldr	r3, [pc, #60]	; (82ff8 <ctrl_sam3ucfg_cb+0x74>)
   82fba:	4798      	blx	r3
			efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);	
   82fbc:	2201      	movs	r2, #1
   82fbe:	210c      	movs	r1, #12
   82fc0:	480e      	ldr	r0, [pc, #56]	; (82ffc <ctrl_sam3ucfg_cb+0x78>)
   82fc2:	4b0f      	ldr	r3, [pc, #60]	; (83000 <ctrl_sam3ucfg_cb+0x7c>)
   82fc4:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82fc6:	4b0f      	ldr	r3, [pc, #60]	; (83004 <ctrl_sam3ucfg_cb+0x80>)
   82fc8:	4798      	blx	r3
			while (RSTC->RSTC_SR & RSTC_SR_SRCMP);			
   82fca:	4b0f      	ldr	r3, [pc, #60]	; (83008 <ctrl_sam3ucfg_cb+0x84>)
   82fcc:	685a      	ldr	r2, [r3, #4]
   82fce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   82fd2:	d1fb      	bne.n	82fcc <ctrl_sam3ucfg_cb+0x48>
			RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;				
   82fd4:	4a0c      	ldr	r2, [pc, #48]	; (83008 <ctrl_sam3ucfg_cb+0x84>)
   82fd6:	6813      	ldr	r3, [r2, #0]
   82fd8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82fdc:	f043 0305 	orr.w	r3, r3, #5
   82fe0:	6013      	str	r3, [r2, #0]
			while(1);
   82fe2:	e7fe      	b.n	82fe2 <ctrl_sam3ucfg_cb+0x5e>
   82fe4:	20002dec 	.word	0x20002dec
   82fe8:	00085419 	.word	0x00085419
   82fec:	00085441 	.word	0x00085441
   82ff0:	00085351 	.word	0x00085351
   82ff4:	000853b5 	.word	0x000853b5
   82ff8:	00085151 	.word	0x00085151
   82ffc:	400e0800 	.word	0x400e0800
   83000:	00081df9 	.word	0x00081df9
   83004:	0008625d 	.word	0x0008625d
   83008:	400e1200 	.word	0x400e1200

0008300c <main_suspend_action>:
{
   8300c:	b508      	push	{r3, lr}
	active = false;
   8300e:	4b03      	ldr	r3, [pc, #12]	; (8301c <main_suspend_action+0x10>)
   83010:	2200      	movs	r2, #0
   83012:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   83014:	4b02      	ldr	r3, [pc, #8]	; (83020 <main_suspend_action+0x14>)
   83016:	4798      	blx	r3
}
   83018:	bd08      	pop	{r3, pc}
   8301a:	bf00      	nop
   8301c:	20001a44 	.word	0x20001a44
   83020:	00084481 	.word	0x00084481

00083024 <main_resume_action>:
{
   83024:	b508      	push	{r3, lr}
	ui_wakeup();
   83026:	4b01      	ldr	r3, [pc, #4]	; (8302c <main_resume_action+0x8>)
   83028:	4798      	blx	r3
}
   8302a:	bd08      	pop	{r3, pc}
   8302c:	0008449d 	.word	0x0008449d

00083030 <main_sof_action>:
{
   83030:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
   83032:	4b04      	ldr	r3, [pc, #16]	; (83044 <main_sof_action+0x14>)
   83034:	781b      	ldrb	r3, [r3, #0]
   83036:	b903      	cbnz	r3, 8303a <main_sof_action+0xa>
}
   83038:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
   8303a:	4b03      	ldr	r3, [pc, #12]	; (83048 <main_sof_action+0x18>)
   8303c:	4798      	blx	r3
   8303e:	4b03      	ldr	r3, [pc, #12]	; (8304c <main_sof_action+0x1c>)
   83040:	4798      	blx	r3
   83042:	e7f9      	b.n	83038 <main_sof_action+0x8>
   83044:	200005a6 	.word	0x200005a6
   83048:	000862dd 	.word	0x000862dd
   8304c:	000844b5 	.word	0x000844b5

00083050 <main_vendor_enable>:
{
   83050:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
   83052:	2401      	movs	r4, #1
   83054:	4b05      	ldr	r3, [pc, #20]	; (8306c <main_vendor_enable+0x1c>)
   83056:	701c      	strb	r4, [r3, #0]
	active = true;
   83058:	4b05      	ldr	r3, [pc, #20]	; (83070 <main_vendor_enable+0x20>)
   8305a:	701c      	strb	r4, [r3, #0]
	udi_vendor_bulk_out_run(
   8305c:	4a05      	ldr	r2, [pc, #20]	; (83074 <main_vendor_enable+0x24>)
   8305e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83062:	4805      	ldr	r0, [pc, #20]	; (83078 <main_vendor_enable+0x28>)
   83064:	4b05      	ldr	r3, [pc, #20]	; (8307c <main_vendor_enable+0x2c>)
   83066:	4798      	blx	r3
}
   83068:	4620      	mov	r0, r4
   8306a:	bd10      	pop	{r4, pc}
   8306c:	200005a6 	.word	0x200005a6
   83070:	20001a44 	.word	0x20001a44
   83074:	00082f01 	.word	0x00082f01
   83078:	20001a94 	.word	0x20001a94
   8307c:	00084645 	.word	0x00084645

00083080 <main_vendor_disable>:
	main_b_vendor_enable = false;
   83080:	4b01      	ldr	r3, [pc, #4]	; (83088 <main_vendor_disable+0x8>)
   83082:	2200      	movs	r2, #0
   83084:	701a      	strb	r2, [r3, #0]
}
   83086:	4770      	bx	lr
   83088:	200005a6 	.word	0x200005a6

0008308c <main_setup_out_received>:
{
   8308c:	b508      	push	{r3, lr}
	udd_g_ctrlreq.payload = ctrlbuffer;
   8308e:	4b3d      	ldr	r3, [pc, #244]	; (83184 <main_setup_out_received+0xf8>)
   83090:	4a3d      	ldr	r2, [pc, #244]	; (83188 <main_setup_out_received+0xfc>)
   83092:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   83094:	88da      	ldrh	r2, [r3, #6]
   83096:	2a40      	cmp	r2, #64	; 0x40
   83098:	bf28      	it	cs
   8309a:	2240      	movcs	r2, #64	; 0x40
   8309c:	819a      	strh	r2, [r3, #12]
	blockendpoint_usage = bep_emem;
   8309e:	4a3b      	ldr	r2, [pc, #236]	; (8318c <main_setup_out_received+0x100>)
   830a0:	2100      	movs	r1, #0
   830a2:	7011      	strb	r1, [r2, #0]
	switch(udd_g_ctrlreq.req.bRequest){
   830a4:	785b      	ldrb	r3, [r3, #1]
   830a6:	3b10      	subs	r3, #16
   830a8:	2b12      	cmp	r3, #18
   830aa:	d869      	bhi.n	83180 <main_setup_out_received+0xf4>
   830ac:	e8df f003 	tbb	[pc, r3]
   830b0:	2b15200a 	.word	0x2b15200a
   830b4:	68546868 	.word	0x68546868
   830b8:	363b6868 	.word	0x363b6868
   830bc:	4f4a4045 	.word	0x4f4a4045
   830c0:	5e59      	.short	0x5e59
   830c2:	63          	.byte	0x63
   830c3:	00          	.byte	0x00
			if (FPGA_setlock(fpga_usblocked)){
   830c4:	2006      	movs	r0, #6
   830c6:	4b32      	ldr	r3, [pc, #200]	; (83190 <main_setup_out_received+0x104>)
   830c8:	4798      	blx	r3
   830ca:	b908      	cbnz	r0, 830d0 <main_setup_out_received+0x44>
	return false;		
   830cc:	2000      	movs	r0, #0
   830ce:	e058      	b.n	83182 <main_setup_out_received+0xf6>
				udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   830d0:	4b2c      	ldr	r3, [pc, #176]	; (83184 <main_setup_out_received+0xf8>)
   830d2:	4a30      	ldr	r2, [pc, #192]	; (83194 <main_setup_out_received+0x108>)
   830d4:	611a      	str	r2, [r3, #16]
				return true;
   830d6:	2001      	movs	r0, #1
   830d8:	e053      	b.n	83182 <main_setup_out_received+0xf6>
			if (FPGA_setlock(fpga_usblocked)){
   830da:	2006      	movs	r0, #6
   830dc:	4b2c      	ldr	r3, [pc, #176]	; (83190 <main_setup_out_received+0x104>)
   830de:	4798      	blx	r3
   830e0:	b908      	cbnz	r0, 830e6 <main_setup_out_received+0x5a>
	return false;		
   830e2:	2000      	movs	r0, #0
   830e4:	e04d      	b.n	83182 <main_setup_out_received+0xf6>
				udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   830e6:	4b27      	ldr	r3, [pc, #156]	; (83184 <main_setup_out_received+0xf8>)
   830e8:	4a2b      	ldr	r2, [pc, #172]	; (83198 <main_setup_out_received+0x10c>)
   830ea:	611a      	str	r2, [r3, #16]
				return true;	
   830ec:	2001      	movs	r0, #1
   830ee:	e048      	b.n	83182 <main_setup_out_received+0xf6>
			if (FPGA_setlock(fpga_usblocked)){
   830f0:	2006      	movs	r0, #6
   830f2:	4b27      	ldr	r3, [pc, #156]	; (83190 <main_setup_out_received+0x104>)
   830f4:	4798      	blx	r3
   830f6:	b908      	cbnz	r0, 830fc <main_setup_out_received+0x70>
	return false;		
   830f8:	2000      	movs	r0, #0
   830fa:	e042      	b.n	83182 <main_setup_out_received+0xf6>
				udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   830fc:	4b21      	ldr	r3, [pc, #132]	; (83184 <main_setup_out_received+0xf8>)
   830fe:	4a27      	ldr	r2, [pc, #156]	; (8319c <main_setup_out_received+0x110>)
   83100:	611a      	str	r2, [r3, #16]
				return true;
   83102:	2001      	movs	r0, #1
   83104:	e03d      	b.n	83182 <main_setup_out_received+0xf6>
			if (FPGA_setlock(fpga_usblocked)){
   83106:	2006      	movs	r0, #6
   83108:	4b21      	ldr	r3, [pc, #132]	; (83190 <main_setup_out_received+0x104>)
   8310a:	4798      	blx	r3
   8310c:	b908      	cbnz	r0, 83112 <main_setup_out_received+0x86>
	return false;		
   8310e:	2000      	movs	r0, #0
   83110:	e037      	b.n	83182 <main_setup_out_received+0xf6>
				udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   83112:	4b1c      	ldr	r3, [pc, #112]	; (83184 <main_setup_out_received+0xf8>)
   83114:	4a22      	ldr	r2, [pc, #136]	; (831a0 <main_setup_out_received+0x114>)
   83116:	611a      	str	r2, [r3, #16]
				return true;
   83118:	2001      	movs	r0, #1
   8311a:	e032      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_usart_cb;
   8311c:	4b19      	ldr	r3, [pc, #100]	; (83184 <main_setup_out_received+0xf8>)
   8311e:	4a21      	ldr	r2, [pc, #132]	; (831a4 <main_setup_out_received+0x118>)
   83120:	611a      	str	r2, [r3, #16]
			return true;
   83122:	2001      	movs	r0, #1
   83124:	e02d      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   83126:	4b17      	ldr	r3, [pc, #92]	; (83184 <main_setup_out_received+0xf8>)
   83128:	4a1f      	ldr	r2, [pc, #124]	; (831a8 <main_setup_out_received+0x11c>)
   8312a:	611a      	str	r2, [r3, #16]
			return true;
   8312c:	2001      	movs	r0, #1
   8312e:	e028      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_scardconfig_cb;
   83130:	4b14      	ldr	r3, [pc, #80]	; (83184 <main_setup_out_received+0xf8>)
   83132:	4a1e      	ldr	r2, [pc, #120]	; (831ac <main_setup_out_received+0x120>)
   83134:	611a      	str	r2, [r3, #16]
			return true;
   83136:	2001      	movs	r0, #1
   83138:	e023      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_scarddata_cb;
   8313a:	4b12      	ldr	r3, [pc, #72]	; (83184 <main_setup_out_received+0xf8>)
   8313c:	4a1c      	ldr	r2, [pc, #112]	; (831b0 <main_setup_out_received+0x124>)
   8313e:	611a      	str	r2, [r3, #16]
			return true;
   83140:	2001      	movs	r0, #1
   83142:	e01e      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_scardaux_cb;
   83144:	4b0f      	ldr	r3, [pc, #60]	; (83184 <main_setup_out_received+0xf8>)
   83146:	4a1b      	ldr	r2, [pc, #108]	; (831b4 <main_setup_out_received+0x128>)
   83148:	611a      	str	r2, [r3, #16]
			return true;
   8314a:	2001      	movs	r0, #1
   8314c:	e019      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_usart2_enabledump;
   8314e:	4b0d      	ldr	r3, [pc, #52]	; (83184 <main_setup_out_received+0xf8>)
   83150:	4a19      	ldr	r2, [pc, #100]	; (831b8 <main_setup_out_received+0x12c>)
   83152:	611a      	str	r2, [r3, #16]
			return true;
   83154:	2001      	movs	r0, #1
   83156:	e014      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   83158:	4b0a      	ldr	r3, [pc, #40]	; (83184 <main_setup_out_received+0xf8>)
   8315a:	4a18      	ldr	r2, [pc, #96]	; (831bc <main_setup_out_received+0x130>)
   8315c:	611a      	str	r2, [r3, #16]
			return true;
   8315e:	2001      	movs	r0, #1
   83160:	e00f      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   83162:	4b08      	ldr	r3, [pc, #32]	; (83184 <main_setup_out_received+0xf8>)
   83164:	4a16      	ldr	r2, [pc, #88]	; (831c0 <main_setup_out_received+0x134>)
   83166:	611a      	str	r2, [r3, #16]
			return true;
   83168:	2001      	movs	r0, #1
   8316a:	e00a      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_avr_program_void;
   8316c:	4b05      	ldr	r3, [pc, #20]	; (83184 <main_setup_out_received+0xf8>)
   8316e:	4a15      	ldr	r2, [pc, #84]	; (831c4 <main_setup_out_received+0x138>)
   83170:	611a      	str	r2, [r3, #16]
			return true;
   83172:	2001      	movs	r0, #1
   83174:	e005      	b.n	83182 <main_setup_out_received+0xf6>
			udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   83176:	4b03      	ldr	r3, [pc, #12]	; (83184 <main_setup_out_received+0xf8>)
   83178:	4a13      	ldr	r2, [pc, #76]	; (831c8 <main_setup_out_received+0x13c>)
   8317a:	611a      	str	r2, [r3, #16]
			return true;
   8317c:	2001      	movs	r0, #1
   8317e:	e000      	b.n	83182 <main_setup_out_received+0xf6>
	switch(udd_g_ctrlreq.req.bRequest){
   83180:	2000      	movs	r0, #0
}
   83182:	bd08      	pop	{r3, pc}
   83184:	20002dec 	.word	0x20002dec
   83188:	20001a48 	.word	0x20001a48
   8318c:	20001a45 	.word	0x20001a45
   83190:	00081d41 	.word	0x00081d41
   83194:	00082d41 	.word	0x00082d41
   83198:	00082c79 	.word	0x00082c79
   8319c:	00082d11 	.word	0x00082d11
   831a0:	00082cbd 	.word	0x00082cbd
   831a4:	00082e7d 	.word	0x00082e7d
   831a8:	00082e45 	.word	0x00082e45
   831ac:	00081cc1 	.word	0x00081cc1
   831b0:	00081a79 	.word	0x00081a79
   831b4:	00081acd 	.word	0x00081acd
   831b8:	00082d9d 	.word	0x00082d9d
   831bc:	00082e91 	.word	0x00082e91
   831c0:	00082d85 	.word	0x00082d85
   831c4:	00082d91 	.word	0x00082d91
   831c8:	00082f85 	.word	0x00082f85

000831cc <main_setup_in_received>:
	if (udd_g_ctrlreq.req.wLength > sizeof(respbuf)){
   831cc:	4b36      	ldr	r3, [pc, #216]	; (832a8 <main_setup_in_received+0xdc>)
   831ce:	88da      	ldrh	r2, [r3, #6]
   831d0:	2ac8      	cmp	r2, #200	; 0xc8
   831d2:	d864      	bhi.n	8329e <main_setup_in_received+0xd2>
{
   831d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.bRequest){
   831d8:	785b      	ldrb	r3, [r3, #1]
   831da:	3b12      	subs	r3, #18
   831dc:	2b0f      	cmp	r3, #15
   831de:	d860      	bhi.n	832a2 <main_setup_in_received+0xd6>
   831e0:	e8df f003 	tbb	[pc, r3]
   831e4:	2b5f5f1e 	.word	0x2b5f5f1e
   831e8:	5f5f485f 	.word	0x5f5f485f
   831ec:	54574308 	.word	0x54574308
   831f0:	403d5f5a 	.word	0x403d5f5a
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   831f4:	2400      	movs	r4, #0
   831f6:	b16a      	cbz	r2, 83214 <main_setup_in_received+0x48>
   831f8:	4d2c      	ldr	r5, [pc, #176]	; (832ac <main_setup_in_received+0xe0>)
   831fa:	2400      	movs	r4, #0
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   831fc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 832cc <main_setup_in_received+0x100>
   83200:	4f2b      	ldr	r7, [pc, #172]	; (832b0 <main_setup_in_received+0xe4>)
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83202:	4e29      	ldr	r6, [pc, #164]	; (832a8 <main_setup_in_received+0xdc>)
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   83204:	4640      	mov	r0, r8
   83206:	47b8      	blx	r7
   83208:	f805 0b01 	strb.w	r0, [r5], #1
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8320c:	3401      	adds	r4, #1
   8320e:	88f3      	ldrh	r3, [r6, #6]
   83210:	42a3      	cmp	r3, r4
   83212:	d8f7      	bhi.n	83204 <main_setup_in_received+0x38>
			udd_g_ctrlreq.payload = respbuf;
   83214:	4b24      	ldr	r3, [pc, #144]	; (832a8 <main_setup_in_received+0xdc>)
   83216:	4a25      	ldr	r2, [pc, #148]	; (832ac <main_setup_in_received+0xe0>)
   83218:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = cnt;
   8321a:	819c      	strh	r4, [r3, #12]
			return true;
   8321c:	2001      	movs	r0, #1
   8321e:	e041      	b.n	832a4 <main_setup_in_received+0xd8>
			udd_g_ctrlreq.payload = ctrlmemread_buf;
   83220:	4a21      	ldr	r2, [pc, #132]	; (832a8 <main_setup_in_received+0xdc>)
   83222:	4b24      	ldr	r3, [pc, #144]	; (832b4 <main_setup_in_received+0xe8>)
   83224:	681b      	ldr	r3, [r3, #0]
   83226:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = ctrlmemread_size;
   83228:	4b23      	ldr	r3, [pc, #140]	; (832b8 <main_setup_in_received+0xec>)
   8322a:	6819      	ldr	r1, [r3, #0]
   8322c:	8191      	strh	r1, [r2, #12]
			ctrlmemread_size = 0;
   8322e:	2200      	movs	r2, #0
   83230:	601a      	str	r2, [r3, #0]
			FPGA_releaselock();
   83232:	4b22      	ldr	r3, [pc, #136]	; (832bc <main_setup_in_received+0xf0>)
   83234:	4798      	blx	r3
			return true;
   83236:	2001      	movs	r0, #1
   83238:	e034      	b.n	832a4 <main_setup_in_received+0xd8>
			respbuf[0] = FPGA_ISDONE();
   8323a:	200a      	movs	r0, #10
   8323c:	4b20      	ldr	r3, [pc, #128]	; (832c0 <main_setup_in_received+0xf4>)
   8323e:	4798      	blx	r3
   83240:	4b1a      	ldr	r3, [pc, #104]	; (832ac <main_setup_in_received+0xe0>)
   83242:	3800      	subs	r0, #0
   83244:	bf18      	it	ne
   83246:	2001      	movne	r0, #1
   83248:	7018      	strb	r0, [r3, #0]
			respbuf[1] = 0;
   8324a:	2200      	movs	r2, #0
   8324c:	705a      	strb	r2, [r3, #1]
			respbuf[2] = 0;
   8324e:	709a      	strb	r2, [r3, #2]
			respbuf[3] = 0;
   83250:	70da      	strb	r2, [r3, #3]
			udd_g_ctrlreq.payload = respbuf;
   83252:	4a15      	ldr	r2, [pc, #84]	; (832a8 <main_setup_in_received+0xdc>)
   83254:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 4;
   83256:	2304      	movs	r3, #4
   83258:	8193      	strh	r3, [r2, #12]
			return true;
   8325a:	2001      	movs	r0, #1
   8325c:	e022      	b.n	832a4 <main_setup_in_received+0xd8>
			return XPROGProtocol_Command();
   8325e:	4b19      	ldr	r3, [pc, #100]	; (832c4 <main_setup_in_received+0xf8>)
   83260:	4798      	blx	r3
   83262:	e01f      	b.n	832a4 <main_setup_in_received+0xd8>
			return V2Protocol_ProcessCommand();
   83264:	4b18      	ldr	r3, [pc, #96]	; (832c8 <main_setup_in_received+0xfc>)
   83266:	4798      	blx	r3
   83268:	e01c      	b.n	832a4 <main_setup_in_received+0xd8>
			return ctrl_usart(USART_TARGET, true);
   8326a:	2101      	movs	r1, #1
   8326c:	4817      	ldr	r0, [pc, #92]	; (832cc <main_setup_in_received+0x100>)
   8326e:	4b18      	ldr	r3, [pc, #96]	; (832d0 <main_setup_in_received+0x104>)
   83270:	4798      	blx	r3
   83272:	e017      	b.n	832a4 <main_setup_in_received+0xd8>
			respbuf[0] = FW_VER_MAJOR;
   83274:	4b0d      	ldr	r3, [pc, #52]	; (832ac <main_setup_in_received+0xe0>)
   83276:	2200      	movs	r2, #0
   83278:	701a      	strb	r2, [r3, #0]
			respbuf[1] = FW_VER_MINOR;
   8327a:	211e      	movs	r1, #30
   8327c:	7059      	strb	r1, [r3, #1]
			respbuf[2] = FW_VER_DEBUG;
   8327e:	709a      	strb	r2, [r3, #2]
			udd_g_ctrlreq.payload = respbuf;
   83280:	4a09      	ldr	r2, [pc, #36]	; (832a8 <main_setup_in_received+0xdc>)
   83282:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 3;
   83284:	2303      	movs	r3, #3
   83286:	8193      	strh	r3, [r2, #12]
			return true;
   83288:	2001      	movs	r0, #1
   8328a:	e00b      	b.n	832a4 <main_setup_in_received+0xd8>
			return ctrl_scardconfig_req();
   8328c:	4b11      	ldr	r3, [pc, #68]	; (832d4 <main_setup_in_received+0x108>)
   8328e:	4798      	blx	r3
   83290:	e008      	b.n	832a4 <main_setup_in_received+0xd8>
			return ctrl_scarddata_req();
   83292:	4b11      	ldr	r3, [pc, #68]	; (832d8 <main_setup_in_received+0x10c>)
   83294:	4798      	blx	r3
   83296:	e005      	b.n	832a4 <main_setup_in_received+0xd8>
			return ctrl_scardaux_req();
   83298:	4b10      	ldr	r3, [pc, #64]	; (832dc <main_setup_in_received+0x110>)
   8329a:	4798      	blx	r3
   8329c:	e002      	b.n	832a4 <main_setup_in_received+0xd8>
		return false;
   8329e:	2000      	movs	r0, #0
}
   832a0:	4770      	bx	lr
	switch(udd_g_ctrlreq.req.bRequest){
   832a2:	2000      	movs	r0, #0
}
   832a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832a8:	20002dec 	.word	0x20002dec
   832ac:	20001e94 	.word	0x20001e94
   832b0:	00083969 	.word	0x00083969
   832b4:	20001a88 	.word	0x20001a88
   832b8:	20001a8c 	.word	0x20001a8c
   832bc:	00081d6d 	.word	0x00081d6d
   832c0:	0008511b 	.word	0x0008511b
   832c4:	00083e85 	.word	0x00083e85
   832c8:	000829c9 	.word	0x000829c9
   832cc:	40090000 	.word	0x40090000
   832d0:	00083579 	.word	0x00083579
   832d4:	00081a09 	.word	0x00081a09
   832d8:	000819c9 	.word	0x000819c9
   832dc:	00081a59 	.word	0x00081a59

000832e0 <cdc_enable>:
/////////////////////////////////////////////////////////
#include "usb_protocol_cdc.h"
volatile bool enable_cdc_transfer[2] = {false, false};
	extern volatile bool usart_x_enabled[4];
bool cdc_enable(uint8_t port)
{
   832e0:	4603      	mov	r3, r0
	enable_cdc_transfer[port] = true;
   832e2:	2001      	movs	r0, #1
   832e4:	4a01      	ldr	r2, [pc, #4]	; (832ec <cdc_enable+0xc>)
   832e6:	54d0      	strb	r0, [r2, r3]
	return true;
}
   832e8:	4770      	bx	lr
   832ea:	bf00      	nop
   832ec:	20001a90 	.word	0x20001a90

000832f0 <cdc_disable>:

void cdc_disable(uint8_t port)
{
	enable_cdc_transfer[port] = false;
   832f0:	4b01      	ldr	r3, [pc, #4]	; (832f8 <cdc_disable+0x8>)
   832f2:	2200      	movs	r2, #0
   832f4:	541a      	strb	r2, [r3, r0]
}
   832f6:	4770      	bx	lr
   832f8:	20001a90 	.word	0x20001a90

000832fc <my_callback_rx_notify>:
static uint8_t uart_buf[512] = {0};
void my_callback_rx_notify(uint8_t port)
{
	//iram_size_t udi_cdc_multi_get_nb_received_data
	
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   832fc:	4b1a      	ldr	r3, [pc, #104]	; (83368 <my_callback_rx_notify+0x6c>)
   832fe:	5c1b      	ldrb	r3, [r3, r0]
   83300:	2b00      	cmp	r3, #0
   83302:	d02f      	beq.n	83364 <my_callback_rx_notify+0x68>
{
   83304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83308:	4681      	mov	r9, r0
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   8330a:	4b18      	ldr	r3, [pc, #96]	; (8336c <my_callback_rx_notify+0x70>)
   8330c:	781b      	ldrb	r3, [r3, #0]
   8330e:	b90b      	cbnz	r3, 83314 <my_callback_rx_notify+0x18>
		while (*st) {
			udi_cdc_putc(*st++);
		}
		#endif
	}
}
   83310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   83314:	4b16      	ldr	r3, [pc, #88]	; (83370 <my_callback_rx_notify+0x74>)
   83316:	4798      	blx	r3
		while (num_char > 0) {
   83318:	4604      	mov	r4, r0
   8331a:	2800      	cmp	r0, #0
   8331c:	d0f8      	beq.n	83310 <my_callback_rx_notify+0x14>
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   8331e:	4e15      	ldr	r6, [pc, #84]	; (83374 <my_callback_rx_notify+0x78>)
   83320:	f8df a058 	ldr.w	sl, [pc, #88]	; 8337c <my_callback_rx_notify+0x80>
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   83324:	f8df 8058 	ldr.w	r8, [pc, #88]	; 83380 <my_callback_rx_notify+0x84>
   83328:	e005      	b.n	83336 <my_callback_rx_notify+0x3a>
			num_char = udi_cdc_multi_get_nb_received_data(port);
   8332a:	4648      	mov	r0, r9
   8332c:	4b10      	ldr	r3, [pc, #64]	; (83370 <my_callback_rx_notify+0x74>)
   8332e:	4798      	blx	r3
		while (num_char > 0) {
   83330:	4604      	mov	r4, r0
   83332:	2800      	cmp	r0, #0
   83334:	d0ec      	beq.n	83310 <my_callback_rx_notify+0x14>
			num_char = (num_char > 512) ? 512 : num_char;
   83336:	4625      	mov	r5, r4
   83338:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   8333c:	bf28      	it	cs
   8333e:	f44f 7500 	movcs.w	r5, #512	; 0x200
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   83342:	462a      	mov	r2, r5
   83344:	4631      	mov	r1, r6
   83346:	4648      	mov	r0, r9
   83348:	47d0      	blx	sl
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   8334a:	2c00      	cmp	r4, #0
   8334c:	d0ed      	beq.n	8332a <my_callback_rx_notify+0x2e>
   8334e:	2400      	movs	r4, #0
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   83350:	4f09      	ldr	r7, [pc, #36]	; (83378 <my_callback_rx_notify+0x7c>)
   83352:	5d32      	ldrb	r2, [r6, r4]
   83354:	2100      	movs	r1, #0
   83356:	4640      	mov	r0, r8
   83358:	47b8      	blx	r7
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   8335a:	3401      	adds	r4, #1
   8335c:	b2a4      	uxth	r4, r4
   8335e:	42ac      	cmp	r4, r5
   83360:	d3f7      	bcc.n	83352 <my_callback_rx_notify+0x56>
   83362:	e7e2      	b.n	8332a <my_callback_rx_notify+0x2e>
   83364:	4770      	bx	lr
   83366:	bf00      	nop
   83368:	20001a90 	.word	0x20001a90
   8336c:	20002170 	.word	0x20002170
   83370:	000803c5 	.word	0x000803c5
   83374:	20001f5c 	.word	0x20001f5c
   83378:	000838d5 	.word	0x000838d5
   8337c:	000805cd 	.word	0x000805cd
   83380:	40090000 	.word	0x40090000

00083384 <my_callback_config>:
extern tcirc_buf rx0buf, tx0buf;
extern tcirc_buf usb_usart_circ_buf;

void my_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	if (enable_cdc_transfer[port]) {
   83384:	4b31      	ldr	r3, [pc, #196]	; (8344c <my_callback_config+0xc8>)
   83386:	5c1b      	ldrb	r3, [r3, r0]
   83388:	2b00      	cmp	r3, #0
   8338a:	d05d      	beq.n	83448 <my_callback_config+0xc4>
        usart_x_enabled[0] = true;
   8338c:	4b30      	ldr	r3, [pc, #192]	; (83450 <my_callback_config+0xcc>)
   8338e:	2201      	movs	r2, #1
   83390:	701a      	strb	r2, [r3, #0]
		sam_usart_opt_t usartopts;
		if (port != 0){
   83392:	2800      	cmp	r0, #0
   83394:	d158      	bne.n	83448 <my_callback_config+0xc4>
			return;
		}
		if (cfg->bDataBits < 5)
   83396:	798b      	ldrb	r3, [r1, #6]
   83398:	2b04      	cmp	r3, #4
   8339a:	d955      	bls.n	83448 <my_callback_config+0xc4>
			return;
		if (cfg->bCharFormat > 2)
   8339c:	790a      	ldrb	r2, [r1, #4]
   8339e:	2a02      	cmp	r2, #2
   833a0:	d852      	bhi.n	83448 <my_callback_config+0xc4>
{
   833a2:	b510      	push	{r4, lr}
   833a4:	b086      	sub	sp, #24
			return;
	
		usartopts.baudrate = cfg->dwDTERate;
   833a6:	6808      	ldr	r0, [r1, #0]
   833a8:	9000      	str	r0, [sp, #0]
		usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   833aa:	2000      	movs	r0, #0
   833ac:	9004      	str	r0, [sp, #16]
		usartopts.stop_bits = ((uint32_t)cfg->bCharFormat) << 12;
   833ae:	0312      	lsls	r2, r2, #12
   833b0:	9203      	str	r2, [sp, #12]
		usartopts.char_length = ((uint32_t)cfg->bDataBits - 5) << 6;
   833b2:	3b05      	subs	r3, #5
   833b4:	019b      	lsls	r3, r3, #6
   833b6:	9301      	str	r3, [sp, #4]
		switch(cfg->bParityType) {
   833b8:	794b      	ldrb	r3, [r1, #5]
   833ba:	2b04      	cmp	r3, #4
   833bc:	d833      	bhi.n	83426 <my_callback_config+0xa2>
   833be:	e8df f003 	tbb	[pc, r3]
   833c2:	3403      	.short	0x3403
   833c4:	3b38      	.short	0x3b38
   833c6:	3f          	.byte	0x3f
   833c7:	00          	.byte	0x00
			case CDC_PAR_NONE:
			usartopts.parity_type = US_MR_PAR_NO;
   833c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   833cc:	9302      	str	r3, [sp, #8]
   833ce:	200d      	movs	r0, #13
   833d0:	4b20      	ldr	r3, [pc, #128]	; (83454 <my_callback_config+0xd0>)
   833d2:	4798      	blx	r3
		}
		if (port == 0)
		{
			//completely restart USART - otherwise breaks tx or stalls
			sysclk_enable_peripheral_clock(ID_USART0);
			init_circ_buf(&usb_usart_circ_buf);
   833d4:	4820      	ldr	r0, [pc, #128]	; (83458 <my_callback_config+0xd4>)
   833d6:	4c21      	ldr	r4, [pc, #132]	; (8345c <my_callback_config+0xd8>)
   833d8:	47a0      	blx	r4
			init_circ_buf(&tx0buf);
   833da:	4821      	ldr	r0, [pc, #132]	; (83460 <my_callback_config+0xdc>)
   833dc:	47a0      	blx	r4
			init_circ_buf(&rx0buf);
   833de:	4821      	ldr	r0, [pc, #132]	; (83464 <my_callback_config+0xe0>)
   833e0:	47a0      	blx	r4
			usart_init_rs232(USART0, &usartopts,  sysclk_get_cpu_hz());
   833e2:	4c21      	ldr	r4, [pc, #132]	; (83468 <my_callback_config+0xe4>)
   833e4:	4a21      	ldr	r2, [pc, #132]	; (8346c <my_callback_config+0xe8>)
   833e6:	4669      	mov	r1, sp
   833e8:	4620      	mov	r0, r4
   833ea:	4b21      	ldr	r3, [pc, #132]	; (83470 <my_callback_config+0xec>)
   833ec:	4798      	blx	r3
			
			usart_enable_rx(USART0);
   833ee:	4620      	mov	r0, r4
   833f0:	4b20      	ldr	r3, [pc, #128]	; (83474 <my_callback_config+0xf0>)
   833f2:	4798      	blx	r3
			usart_enable_tx(USART0);
   833f4:	4620      	mov	r0, r4
   833f6:	4b20      	ldr	r3, [pc, #128]	; (83478 <my_callback_config+0xf4>)
   833f8:	4798      	blx	r3
			
			usart_enable_interrupt(USART0, UART_IER_RXRDY);
   833fa:	2101      	movs	r1, #1
   833fc:	4620      	mov	r0, r4
   833fe:	4b1f      	ldr	r3, [pc, #124]	; (8347c <my_callback_config+0xf8>)
   83400:	4798      	blx	r3
			
			gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   83402:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83406:	2013      	movs	r0, #19
   83408:	4c1d      	ldr	r4, [pc, #116]	; (83480 <my_callback_config+0xfc>)
   8340a:	47a0      	blx	r4
			gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8340c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83410:	2012      	movs	r0, #18
   83412:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83414:	4b1b      	ldr	r3, [pc, #108]	; (83484 <my_callback_config+0x100>)
   83416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8341a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8341e:	2150      	movs	r1, #80	; 0x50
   83420:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83424:	601a      	str	r2, [r3, #0]
			irq_register_handler(USART0_IRQn, 5);
		}
	}
		
   83426:	b006      	add	sp, #24
   83428:	bd10      	pop	{r4, pc}
			usartopts.parity_type = US_MR_PAR_ODD;
   8342a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8342e:	9302      	str	r3, [sp, #8]
			break;
   83430:	e7cd      	b.n	833ce <my_callback_config+0x4a>
			usartopts.parity_type = US_MR_PAR_EVEN;
   83432:	2300      	movs	r3, #0
   83434:	9302      	str	r3, [sp, #8]
			break;
   83436:	e7ca      	b.n	833ce <my_callback_config+0x4a>
			usartopts.parity_type = US_MR_PAR_MARK;
   83438:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8343c:	9302      	str	r3, [sp, #8]
			break;
   8343e:	e7c6      	b.n	833ce <my_callback_config+0x4a>
			usartopts.parity_type = US_MR_PAR_SPACE;
   83440:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83444:	9302      	str	r3, [sp, #8]
			break;
   83446:	e7c2      	b.n	833ce <my_callback_config+0x4a>
   83448:	4770      	bx	lr
   8344a:	bf00      	nop
   8344c:	20001a90 	.word	0x20001a90
   83450:	20002170 	.word	0x20002170
   83454:	000854b1 	.word	0x000854b1
   83458:	200029b0 	.word	0x200029b0
   8345c:	00081ed9 	.word	0x00081ed9
   83460:	20002d00 	.word	0x20002d00
   83464:	20002734 	.word	0x20002734
   83468:	40090000 	.word	0x40090000
   8346c:	05b8d800 	.word	0x05b8d800
   83470:	00086ac9 	.word	0x00086ac9
   83474:	00086dcd 	.word	0x00086dcd
   83478:	00086dbd 	.word	0x00086dbd
   8347c:	00086dd9 	.word	0x00086dd9
   83480:	0008516d 	.word	0x0008516d
   83484:	e000e100 	.word	0xe000e100

00083488 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   83488:	4b01      	ldr	r3, [pc, #4]	; (83490 <set_timeout+0x8>)
   8348a:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   8348c:	4770      	bx	lr
   8348e:	bf00      	nop
   83490:	200005a8 	.word	0x200005a8

00083494 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   83494:	b538      	push	{r3, r4, r5, lr}
   83496:	2016      	movs	r0, #22
   83498:	4b10      	ldr	r3, [pc, #64]	; (834dc <setup_timeoutcnt+0x48>)
   8349a:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8349c:	4b10      	ldr	r3, [pc, #64]	; (834e0 <setup_timeoutcnt+0x4c>)
   8349e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   834a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   834a6:	2510      	movs	r5, #16
   834a8:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   834ac:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   834ae:	4c0d      	ldr	r4, [pc, #52]	; (834e4 <setup_timeoutcnt+0x50>)
   834b0:	f24c 0201 	movw	r2, #49153	; 0xc001
   834b4:	2100      	movs	r1, #0
   834b6:	4620      	mov	r0, r4
   834b8:	4b0b      	ldr	r3, [pc, #44]	; (834e8 <setup_timeoutcnt+0x54>)
   834ba:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   834bc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   834c0:	2100      	movs	r1, #0
   834c2:	4620      	mov	r0, r4
   834c4:	4b09      	ldr	r3, [pc, #36]	; (834ec <setup_timeoutcnt+0x58>)
   834c6:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   834c8:	462a      	mov	r2, r5
   834ca:	2100      	movs	r1, #0
   834cc:	4620      	mov	r0, r4
   834ce:	4b08      	ldr	r3, [pc, #32]	; (834f0 <setup_timeoutcnt+0x5c>)
   834d0:	4798      	blx	r3
	
	timerEnabled = true;
   834d2:	4b08      	ldr	r3, [pc, #32]	; (834f4 <setup_timeoutcnt+0x60>)
   834d4:	2201      	movs	r2, #1
   834d6:	701a      	strb	r2, [r3, #0]
}
   834d8:	bd38      	pop	{r3, r4, r5, pc}
   834da:	bf00      	nop
   834dc:	000854b1 	.word	0x000854b1
   834e0:	e000e100 	.word	0xe000e100
   834e4:	40080000 	.word	0x40080000
   834e8:	00081e49 	.word	0x00081e49
   834ec:	00081e71 	.word	0x00081e71
   834f0:	00081e79 	.word	0x00081e79
   834f4:	2000215c 	.word	0x2000215c

000834f8 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   834f8:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   834fa:	4b0a      	ldr	r3, [pc, #40]	; (83524 <start_timeoutcnt+0x2c>)
   834fc:	781b      	ldrb	r3, [r3, #0]
   834fe:	b16b      	cbz	r3, 8351c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83500:	4c09      	ldr	r4, [pc, #36]	; (83528 <start_timeoutcnt+0x30>)
   83502:	2100      	movs	r1, #0
   83504:	4620      	mov	r0, r4
   83506:	4b09      	ldr	r3, [pc, #36]	; (8352c <start_timeoutcnt+0x34>)
   83508:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   8350a:	4b09      	ldr	r3, [pc, #36]	; (83530 <start_timeoutcnt+0x38>)
   8350c:	681a      	ldr	r2, [r3, #0]
   8350e:	4b09      	ldr	r3, [pc, #36]	; (83534 <start_timeoutcnt+0x3c>)
   83510:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   83512:	2100      	movs	r1, #0
   83514:	4620      	mov	r0, r4
   83516:	4b08      	ldr	r3, [pc, #32]	; (83538 <start_timeoutcnt+0x40>)
   83518:	4798      	blx	r3
}
   8351a:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   8351c:	4b07      	ldr	r3, [pc, #28]	; (8353c <start_timeoutcnt+0x44>)
   8351e:	4798      	blx	r3
   83520:	e7ee      	b.n	83500 <start_timeoutcnt+0x8>
   83522:	bf00      	nop
   83524:	2000215c 	.word	0x2000215c
   83528:	40080000 	.word	0x40080000
   8352c:	00081e69 	.word	0x00081e69
   83530:	200005a8 	.word	0x200005a8
   83534:	2000265c 	.word	0x2000265c
   83538:	00081e61 	.word	0x00081e61
   8353c:	00083495 	.word	0x00083495

00083540 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   83540:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83542:	2100      	movs	r1, #0
   83544:	4801      	ldr	r0, [pc, #4]	; (8354c <stop_timeoutcnt+0xc>)
   83546:	4b02      	ldr	r3, [pc, #8]	; (83550 <stop_timeoutcnt+0x10>)
   83548:	4798      	blx	r3
}
   8354a:	bd08      	pop	{r3, pc}
   8354c:	40080000 	.word	0x40080000
   83550:	00081e69 	.word	0x00081e69

00083554 <TC0_Handler>:

ISR(TC0_Handler)
{
   83554:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   83556:	4b05      	ldr	r3, [pc, #20]	; (8356c <TC0_Handler+0x18>)
   83558:	681b      	ldr	r3, [r3, #0]
   8355a:	b113      	cbz	r3, 83562 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   8355c:	3b01      	subs	r3, #1
   8355e:	4a03      	ldr	r2, [pc, #12]	; (8356c <TC0_Handler+0x18>)
   83560:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   83562:	2100      	movs	r1, #0
   83564:	4802      	ldr	r0, [pc, #8]	; (83570 <TC0_Handler+0x1c>)
   83566:	4b03      	ldr	r3, [pc, #12]	; (83574 <TC0_Handler+0x20>)
   83568:	4798      	blx	r3
}
   8356a:	bd08      	pop	{r3, pc}
   8356c:	2000265c 	.word	0x2000265c
   83570:	40080000 	.word	0x40080000
   83574:	00081e81 	.word	0x00081e81

00083578 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   83578:	b570      	push	{r4, r5, r6, lr}
   8357a:	b086      	sub	sp, #24
   8357c:	4605      	mov	r5, r0
   8357e:	460c      	mov	r4, r1
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   83580:	4b96      	ldr	r3, [pc, #600]	; (837dc <ctrl_usart+0x264>)
   83582:	789b      	ldrb	r3, [r3, #2]
   83584:	3b10      	subs	r3, #16
   83586:	2b08      	cmp	r3, #8
   83588:	f200 818a 	bhi.w	838a0 <ctrl_usart+0x328>
   8358c:	e8df f013 	tbh	[pc, r3, lsl #1]
   83590:	009c0009 	.word	0x009c0009
   83594:	018800dd 	.word	0x018800dd
   83598:	018800ea 	.word	0x018800ea
   8359c:	01880188 	.word	0x01880188
   835a0:	011d      	.short	0x011d
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   835a2:	b134      	cbz	r4, 835b2 <ctrl_usart+0x3a>
				if (udd_g_ctrlreq.req.wLength == 4){
   835a4:	4b8d      	ldr	r3, [pc, #564]	; (837dc <ctrl_usart+0x264>)
   835a6:	88dc      	ldrh	r4, [r3, #6]
   835a8:	2c04      	cmp	r4, #4
   835aa:	bf14      	ite	ne
   835ac:	2000      	movne	r0, #0
   835ae:	2001      	moveq	r0, #1
   835b0:	e177      	b.n	838a2 <ctrl_usart+0x32a>
					word2buf(ctrlbuffer, baud);
					*/
					return true;
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   835b2:	4b8a      	ldr	r3, [pc, #552]	; (837dc <ctrl_usart+0x264>)
   835b4:	88db      	ldrh	r3, [r3, #6]
   835b6:	2b07      	cmp	r3, #7
   835b8:	f040 8081 	bne.w	836be <ctrl_usart+0x146>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   835bc:	4b87      	ldr	r3, [pc, #540]	; (837dc <ctrl_usart+0x264>)
   835be:	689b      	ldr	r3, [r3, #8]
   835c0:	681a      	ldr	r2, [r3, #0]
					
						usartopts.baudrate = baud;
   835c2:	9200      	str	r2, [sp, #0]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   835c4:	791a      	ldrb	r2, [r3, #4]
   835c6:	2a01      	cmp	r2, #1
   835c8:	d00e      	beq.n	835e8 <ctrl_usart+0x70>
   835ca:	2a02      	cmp	r2, #2
   835cc:	d010      	beq.n	835f0 <ctrl_usart+0x78>
   835ce:	b112      	cbz	r2, 835d6 <ctrl_usart+0x5e>
								break;
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
								break;
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   835d0:	2200      	movs	r2, #0
   835d2:	9203      	str	r2, [sp, #12]
   835d4:	e000      	b.n	835d8 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   835d6:	9203      	str	r2, [sp, #12]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   835d8:	795a      	ldrb	r2, [r3, #5]
   835da:	2a04      	cmp	r2, #4
   835dc:	d828      	bhi.n	83630 <ctrl_usart+0xb8>
   835de:	e8df f002 	tbb	[pc, r2]
   835e2:	180b      	.short	0x180b
   835e4:	1f1c      	.short	0x1f1c
   835e6:	23          	.byte	0x23
   835e7:	00          	.byte	0x00
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   835e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   835ec:	9203      	str	r2, [sp, #12]
								break;
   835ee:	e7f3      	b.n	835d8 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   835f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   835f4:	9203      	str	r2, [sp, #12]
								break;
   835f6:	e7ef      	b.n	835d8 <ctrl_usart+0x60>
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   835f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   835fc:	9202      	str	r2, [sp, #8]
							default:
								usartopts.parity_type = US_MR_PAR_NO;
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   835fe:	799b      	ldrb	r3, [r3, #6]
   83600:	2b06      	cmp	r3, #6
   83602:	d02d      	beq.n	83660 <ctrl_usart+0xe8>
   83604:	2b07      	cmp	r3, #7
   83606:	d02e      	beq.n	83666 <ctrl_usart+0xee>
   83608:	2b05      	cmp	r3, #5
   8360a:	d015      	beq.n	83638 <ctrl_usart+0xc0>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
								break;					
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   8360c:	23c0      	movs	r3, #192	; 0xc0
   8360e:	9301      	str	r3, [sp, #4]
   83610:	e014      	b.n	8363c <ctrl_usart+0xc4>
								usartopts.parity_type = US_MR_PAR_ODD;
   83612:	f44f 7200 	mov.w	r2, #512	; 0x200
   83616:	9202      	str	r2, [sp, #8]
								break;
   83618:	e7f1      	b.n	835fe <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_EVEN;
   8361a:	2200      	movs	r2, #0
   8361c:	9202      	str	r2, [sp, #8]
								break;
   8361e:	e7ee      	b.n	835fe <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_MARK;
   83620:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   83624:	9202      	str	r2, [sp, #8]
								break;
   83626:	e7ea      	b.n	835fe <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_SPACE;
   83628:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8362c:	9202      	str	r2, [sp, #8]
								break;							
   8362e:	e7e6      	b.n	835fe <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_NO;
   83630:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83634:	9202      	str	r2, [sp, #8]
   83636:	e7e2      	b.n	835fe <ctrl_usart+0x86>
								usartopts.char_length = US_MR_CHRL_5_BIT;
   83638:	2300      	movs	r3, #0
   8363a:	9301      	str	r3, [sp, #4]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8363c:	2300      	movs	r3, #0
   8363e:	9304      	str	r3, [sp, #16]

						if (usart == USART0)
   83640:	4b67      	ldr	r3, [pc, #412]	; (837e0 <ctrl_usart+0x268>)
   83642:	429d      	cmp	r5, r3
   83644:	d012      	beq.n	8366c <ctrl_usart+0xf4>
							init_circ_buf(&usb_usart_circ_buf);
							init_circ_buf(&tx0buf);
							init_circ_buf(&rx0buf);
							usart_x_enabled[0] = true;
							printf("Enabling USART0\n");
						} else if (usart == USART1)
   83646:	4b67      	ldr	r3, [pc, #412]	; (837e4 <ctrl_usart+0x26c>)
   83648:	429d      	cmp	r5, r3
   8364a:	d020      	beq.n	8368e <ctrl_usart+0x116>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
							init_circ_buf(&tx1buf);
							init_circ_buf(&rx1buf);
							usart_x_enabled[1] = true;
						} else if (usart == USART2)
   8364c:	4b66      	ldr	r3, [pc, #408]	; (837e8 <ctrl_usart+0x270>)
   8364e:	429d      	cmp	r5, r3
   83650:	d029      	beq.n	836a6 <ctrl_usart+0x12e>
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
							usart_x_enabled[3] = true;
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   83652:	4a66      	ldr	r2, [pc, #408]	; (837ec <ctrl_usart+0x274>)
   83654:	4669      	mov	r1, sp
   83656:	4628      	mov	r0, r5
   83658:	4b65      	ldr	r3, [pc, #404]	; (837f0 <ctrl_usart+0x278>)
   8365a:	4798      	blx	r3
				}
			}
			break;		
	}
	
	return false;
   8365c:	4620      	mov	r0, r4
   8365e:	e120      	b.n	838a2 <ctrl_usart+0x32a>
								usartopts.char_length = US_MR_CHRL_6_BIT;
   83660:	2340      	movs	r3, #64	; 0x40
   83662:	9301      	str	r3, [sp, #4]
								break;
   83664:	e7ea      	b.n	8363c <ctrl_usart+0xc4>
								usartopts.char_length = US_MR_CHRL_7_BIT;
   83666:	2380      	movs	r3, #128	; 0x80
   83668:	9301      	str	r3, [sp, #4]
								break;					
   8366a:	e7e7      	b.n	8363c <ctrl_usart+0xc4>
   8366c:	200d      	movs	r0, #13
   8366e:	4b61      	ldr	r3, [pc, #388]	; (837f4 <ctrl_usart+0x27c>)
   83670:	4798      	blx	r3
							init_circ_buf(&usb_usart_circ_buf);
   83672:	4861      	ldr	r0, [pc, #388]	; (837f8 <ctrl_usart+0x280>)
   83674:	4e61      	ldr	r6, [pc, #388]	; (837fc <ctrl_usart+0x284>)
   83676:	47b0      	blx	r6
							init_circ_buf(&tx0buf);
   83678:	4861      	ldr	r0, [pc, #388]	; (83800 <ctrl_usart+0x288>)
   8367a:	47b0      	blx	r6
							init_circ_buf(&rx0buf);
   8367c:	4861      	ldr	r0, [pc, #388]	; (83804 <ctrl_usart+0x28c>)
   8367e:	47b0      	blx	r6
							usart_x_enabled[0] = true;
   83680:	4b61      	ldr	r3, [pc, #388]	; (83808 <ctrl_usart+0x290>)
   83682:	2201      	movs	r2, #1
   83684:	701a      	strb	r2, [r3, #0]
							printf("Enabling USART0\n");
   83686:	4861      	ldr	r0, [pc, #388]	; (8380c <ctrl_usart+0x294>)
   83688:	4b61      	ldr	r3, [pc, #388]	; (83810 <ctrl_usart+0x298>)
   8368a:	4798      	blx	r3
   8368c:	e7e1      	b.n	83652 <ctrl_usart+0xda>
   8368e:	200e      	movs	r0, #14
   83690:	4b58      	ldr	r3, [pc, #352]	; (837f4 <ctrl_usart+0x27c>)
   83692:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   83694:	485f      	ldr	r0, [pc, #380]	; (83814 <ctrl_usart+0x29c>)
   83696:	4e59      	ldr	r6, [pc, #356]	; (837fc <ctrl_usart+0x284>)
   83698:	47b0      	blx	r6
							init_circ_buf(&rx1buf);
   8369a:	485f      	ldr	r0, [pc, #380]	; (83818 <ctrl_usart+0x2a0>)
   8369c:	47b0      	blx	r6
							usart_x_enabled[1] = true;
   8369e:	4b5a      	ldr	r3, [pc, #360]	; (83808 <ctrl_usart+0x290>)
   836a0:	2201      	movs	r2, #1
   836a2:	705a      	strb	r2, [r3, #1]
   836a4:	e7d5      	b.n	83652 <ctrl_usart+0xda>
   836a6:	200f      	movs	r0, #15
   836a8:	4b52      	ldr	r3, [pc, #328]	; (837f4 <ctrl_usart+0x27c>)
   836aa:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   836ac:	485b      	ldr	r0, [pc, #364]	; (8381c <ctrl_usart+0x2a4>)
   836ae:	4e53      	ldr	r6, [pc, #332]	; (837fc <ctrl_usart+0x284>)
   836b0:	47b0      	blx	r6
							init_circ_buf(&rx2buf);
   836b2:	485b      	ldr	r0, [pc, #364]	; (83820 <ctrl_usart+0x2a8>)
   836b4:	47b0      	blx	r6
							usart_x_enabled[2] = true;
   836b6:	4b54      	ldr	r3, [pc, #336]	; (83808 <ctrl_usart+0x290>)
   836b8:	2201      	movs	r2, #1
   836ba:	709a      	strb	r2, [r3, #2]
   836bc:	e7c9      	b.n	83652 <ctrl_usart+0xda>
						printf("ERR: Invalid USART Configuration packet?\n");
   836be:	4859      	ldr	r0, [pc, #356]	; (83824 <ctrl_usart+0x2ac>)
   836c0:	4b53      	ldr	r3, [pc, #332]	; (83810 <ctrl_usart+0x298>)
   836c2:	4798      	blx	r3
	return false;
   836c4:	4620      	mov	r0, r4
   836c6:	e0ec      	b.n	838a2 <ctrl_usart+0x32a>
			if (directionIn == false){
   836c8:	b10c      	cbz	r4, 836ce <ctrl_usart+0x156>
	return false;
   836ca:	2000      	movs	r0, #0
   836cc:	e0e9      	b.n	838a2 <ctrl_usart+0x32a>
				usart_enable_rx(usart);
   836ce:	4b56      	ldr	r3, [pc, #344]	; (83828 <ctrl_usart+0x2b0>)
   836d0:	4798      	blx	r3
				usart_enable_tx(usart);
   836d2:	4628      	mov	r0, r5
   836d4:	4b55      	ldr	r3, [pc, #340]	; (8382c <ctrl_usart+0x2b4>)
   836d6:	4798      	blx	r3
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   836d8:	2101      	movs	r1, #1
   836da:	4628      	mov	r0, r5
   836dc:	4b54      	ldr	r3, [pc, #336]	; (83830 <ctrl_usart+0x2b8>)
   836de:	4798      	blx	r3
				if (usart == USART0){
   836e0:	4b3f      	ldr	r3, [pc, #252]	; (837e0 <ctrl_usart+0x268>)
   836e2:	429d      	cmp	r5, r3
   836e4:	d007      	beq.n	836f6 <ctrl_usart+0x17e>
				} else if (usart == USART1) {
   836e6:	4b3f      	ldr	r3, [pc, #252]	; (837e4 <ctrl_usart+0x26c>)
   836e8:	429d      	cmp	r5, r3
   836ea:	d018      	beq.n	8371e <ctrl_usart+0x1a6>
				} else if (usart == USART2) {
   836ec:	4b3e      	ldr	r3, [pc, #248]	; (837e8 <ctrl_usart+0x270>)
   836ee:	429d      	cmp	r5, r3
   836f0:	d020      	beq.n	83734 <ctrl_usart+0x1bc>
	return false;
   836f2:	4620      	mov	r0, r4
   836f4:	e0d5      	b.n	838a2 <ctrl_usart+0x32a>
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   836f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   836fa:	2013      	movs	r0, #19
   836fc:	4d4d      	ldr	r5, [pc, #308]	; (83834 <ctrl_usart+0x2bc>)
   836fe:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   83700:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83704:	2012      	movs	r0, #18
   83706:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83708:	4b4b      	ldr	r3, [pc, #300]	; (83838 <ctrl_usart+0x2c0>)
   8370a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8370e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83712:	2150      	movs	r1, #80	; 0x50
   83714:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83718:	601a      	str	r2, [r3, #0]
	return false;
   8371a:	4620      	mov	r0, r4
}
   8371c:	e0c1      	b.n	838a2 <ctrl_usart+0x32a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8371e:	4b46      	ldr	r3, [pc, #280]	; (83838 <ctrl_usart+0x2c0>)
   83720:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83724:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83728:	2150      	movs	r1, #80	; 0x50
   8372a:	f883 130e 	strb.w	r1, [r3, #782]	; 0x30e
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8372e:	601a      	str	r2, [r3, #0]
   83730:	4620      	mov	r0, r4
}
   83732:	e0b6      	b.n	838a2 <ctrl_usart+0x32a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83734:	4b40      	ldr	r3, [pc, #256]	; (83838 <ctrl_usart+0x2c0>)
   83736:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8373a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8373e:	2150      	movs	r1, #80	; 0x50
   83740:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83744:	601a      	str	r2, [r3, #0]
   83746:	4620      	mov	r0, r4
}
   83748:	e0ab      	b.n	838a2 <ctrl_usart+0x32a>
			if (directionIn == false){
   8374a:	b10c      	cbz	r4, 83750 <ctrl_usart+0x1d8>
	return false;
   8374c:	2000      	movs	r0, #0
   8374e:	e0a8      	b.n	838a2 <ctrl_usart+0x32a>
				usart_disable_rx(usart);
   83750:	4e3a      	ldr	r6, [pc, #232]	; (8383c <ctrl_usart+0x2c4>)
   83752:	47b0      	blx	r6
				usart_disable_rx(usart);
   83754:	4628      	mov	r0, r5
   83756:	47b0      	blx	r6
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   83758:	2103      	movs	r1, #3
   8375a:	4628      	mov	r0, r5
   8375c:	4b38      	ldr	r3, [pc, #224]	; (83840 <ctrl_usart+0x2c8>)
   8375e:	4798      	blx	r3
	return false;
   83760:	4620      	mov	r0, r4
   83762:	e09e      	b.n	838a2 <ctrl_usart+0x32a>
			if (directionIn){
   83764:	2c00      	cmp	r4, #0
   83766:	f000 809e 	beq.w	838a6 <ctrl_usart+0x32e>
				if (udd_g_ctrlreq.req.wLength == 4){
   8376a:	4b1c      	ldr	r3, [pc, #112]	; (837dc <ctrl_usart+0x264>)
   8376c:	88db      	ldrh	r3, [r3, #6]
   8376e:	2b04      	cmp	r3, #4
   83770:	d001      	beq.n	83776 <ctrl_usart+0x1fe>
	return false;
   83772:	2000      	movs	r0, #0
   83774:	e095      	b.n	838a2 <ctrl_usart+0x32a>
					udd_g_ctrlreq.payload = ctrlbuffer;
   83776:	4b19      	ldr	r3, [pc, #100]	; (837dc <ctrl_usart+0x264>)
   83778:	4932      	ldr	r1, [pc, #200]	; (83844 <ctrl_usart+0x2cc>)
   8377a:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   8377c:	2104      	movs	r1, #4
   8377e:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   83780:	4b17      	ldr	r3, [pc, #92]	; (837e0 <ctrl_usart+0x268>)
   83782:	4298      	cmp	r0, r3
   83784:	d012      	beq.n	837ac <ctrl_usart+0x234>
					} else if (usart == USART1){
   83786:	4b17      	ldr	r3, [pc, #92]	; (837e4 <ctrl_usart+0x26c>)
   83788:	4298      	cmp	r0, r3
   8378a:	d014      	beq.n	837b6 <ctrl_usart+0x23e>
					} else if (usart == USART2){
   8378c:	4b16      	ldr	r3, [pc, #88]	; (837e8 <ctrl_usart+0x270>)
   8378e:	4298      	cmp	r0, r3
   83790:	d016      	beq.n	837c0 <ctrl_usart+0x248>
					word2buf(ctrlbuffer, cnt);
   83792:	4b2c      	ldr	r3, [pc, #176]	; (83844 <ctrl_usart+0x2cc>)
   83794:	701a      	strb	r2, [r3, #0]
   83796:	f3c2 2107 	ubfx	r1, r2, #8, #8
   8379a:	7059      	strb	r1, [r3, #1]
   8379c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   837a0:	7099      	strb	r1, [r3, #2]
   837a2:	f3c2 6007 	ubfx	r0, r2, #24, #8
   837a6:	70d8      	strb	r0, [r3, #3]
					return true;
   837a8:	4620      	mov	r0, r4
   837aa:	e07a      	b.n	838a2 <ctrl_usart+0x32a>
						cnt = circ_buf_count(&rx0buf);
   837ac:	4815      	ldr	r0, [pc, #84]	; (83804 <ctrl_usart+0x28c>)
   837ae:	4b26      	ldr	r3, [pc, #152]	; (83848 <ctrl_usart+0x2d0>)
   837b0:	4798      	blx	r3
   837b2:	4602      	mov	r2, r0
   837b4:	e7ed      	b.n	83792 <ctrl_usart+0x21a>
						cnt = circ_buf_count(&rx1buf);
   837b6:	4818      	ldr	r0, [pc, #96]	; (83818 <ctrl_usart+0x2a0>)
   837b8:	4b23      	ldr	r3, [pc, #140]	; (83848 <ctrl_usart+0x2d0>)
   837ba:	4798      	blx	r3
   837bc:	4602      	mov	r2, r0
   837be:	e7e8      	b.n	83792 <ctrl_usart+0x21a>
						cnt = circ_buf_count(&rx2buf);
   837c0:	4817      	ldr	r0, [pc, #92]	; (83820 <ctrl_usart+0x2a8>)
   837c2:	4b21      	ldr	r3, [pc, #132]	; (83848 <ctrl_usart+0x2d0>)
   837c4:	4798      	blx	r3
   837c6:	4602      	mov	r2, r0
   837c8:	e7e3      	b.n	83792 <ctrl_usart+0x21a>
			if (directionIn){
   837ca:	2c00      	cmp	r4, #0
   837cc:	d06d      	beq.n	838aa <ctrl_usart+0x332>
				if (udd_g_ctrlreq.req.wLength == 4){
   837ce:	4b03      	ldr	r3, [pc, #12]	; (837dc <ctrl_usart+0x264>)
   837d0:	88db      	ldrh	r3, [r3, #6]
   837d2:	2b04      	cmp	r3, #4
   837d4:	d03a      	beq.n	8384c <ctrl_usart+0x2d4>
	return false;
   837d6:	2000      	movs	r0, #0
   837d8:	e063      	b.n	838a2 <ctrl_usart+0x32a>
   837da:	bf00      	nop
   837dc:	20002dec 	.word	0x20002dec
   837e0:	40090000 	.word	0x40090000
   837e4:	40094000 	.word	0x40094000
   837e8:	40098000 	.word	0x40098000
   837ec:	05b8d800 	.word	0x05b8d800
   837f0:	00086ac9 	.word	0x00086ac9
   837f4:	000854b1 	.word	0x000854b1
   837f8:	200029b0 	.word	0x200029b0
   837fc:	00081ed9 	.word	0x00081ed9
   83800:	20002d00 	.word	0x20002d00
   83804:	20002734 	.word	0x20002734
   83808:	20002170 	.word	0x20002170
   8380c:	0008e45c 	.word	0x0008e45c
   83810:	0008780d 	.word	0x0008780d
   83814:	200028dc 	.word	0x200028dc
   83818:	20002c2c 	.word	0x20002c2c
   8381c:	20002660 	.word	0x20002660
   83820:	20002b58 	.word	0x20002b58
   83824:	0008e470 	.word	0x0008e470
   83828:	00086dcd 	.word	0x00086dcd
   8382c:	00086dbd 	.word	0x00086dbd
   83830:	00086dd9 	.word	0x00086dd9
   83834:	0008516d 	.word	0x0008516d
   83838:	e000e100 	.word	0xe000e100
   8383c:	00086dd3 	.word	0x00086dd3
   83840:	00086ddd 	.word	0x00086ddd
   83844:	20002160 	.word	0x20002160
   83848:	00081f8d 	.word	0x00081f8d
					udd_g_ctrlreq.payload = ctrlbuffer;
   8384c:	4b18      	ldr	r3, [pc, #96]	; (838b0 <ctrl_usart+0x338>)
   8384e:	4919      	ldr	r1, [pc, #100]	; (838b4 <ctrl_usart+0x33c>)
   83850:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   83852:	2104      	movs	r1, #4
   83854:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   83856:	4b18      	ldr	r3, [pc, #96]	; (838b8 <ctrl_usart+0x340>)
   83858:	4298      	cmp	r0, r3
   8385a:	d012      	beq.n	83882 <ctrl_usart+0x30a>
					} else if (usart == USART1){
   8385c:	4b17      	ldr	r3, [pc, #92]	; (838bc <ctrl_usart+0x344>)
   8385e:	4298      	cmp	r0, r3
   83860:	d014      	beq.n	8388c <ctrl_usart+0x314>
					} else if (usart == USART2){
   83862:	4b17      	ldr	r3, [pc, #92]	; (838c0 <ctrl_usart+0x348>)
   83864:	4298      	cmp	r0, r3
   83866:	d016      	beq.n	83896 <ctrl_usart+0x31e>
					word2buf(ctrlbuffer, cnt);
   83868:	4b12      	ldr	r3, [pc, #72]	; (838b4 <ctrl_usart+0x33c>)
   8386a:	701a      	strb	r2, [r3, #0]
   8386c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   83870:	7059      	strb	r1, [r3, #1]
   83872:	f3c2 4107 	ubfx	r1, r2, #16, #8
   83876:	7099      	strb	r1, [r3, #2]
   83878:	f3c2 6007 	ubfx	r0, r2, #24, #8
   8387c:	70d8      	strb	r0, [r3, #3]
					return true;
   8387e:	4620      	mov	r0, r4
   83880:	e00f      	b.n	838a2 <ctrl_usart+0x32a>
						cnt = circ_buf_count(&tx0buf);
   83882:	4810      	ldr	r0, [pc, #64]	; (838c4 <ctrl_usart+0x34c>)
   83884:	4b10      	ldr	r3, [pc, #64]	; (838c8 <ctrl_usart+0x350>)
   83886:	4798      	blx	r3
   83888:	4602      	mov	r2, r0
   8388a:	e7ed      	b.n	83868 <ctrl_usart+0x2f0>
						cnt = circ_buf_count(&tx1buf);
   8388c:	480f      	ldr	r0, [pc, #60]	; (838cc <ctrl_usart+0x354>)
   8388e:	4b0e      	ldr	r3, [pc, #56]	; (838c8 <ctrl_usart+0x350>)
   83890:	4798      	blx	r3
   83892:	4602      	mov	r2, r0
   83894:	e7e8      	b.n	83868 <ctrl_usart+0x2f0>
						cnt = circ_buf_count(&tx2buf);
   83896:	480e      	ldr	r0, [pc, #56]	; (838d0 <ctrl_usart+0x358>)
   83898:	4b0b      	ldr	r3, [pc, #44]	; (838c8 <ctrl_usart+0x350>)
   8389a:	4798      	blx	r3
   8389c:	4602      	mov	r2, r0
   8389e:	e7e3      	b.n	83868 <ctrl_usart+0x2f0>
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   838a0:	2000      	movs	r0, #0
}
   838a2:	b006      	add	sp, #24
   838a4:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   838a6:	4620      	mov	r0, r4
   838a8:	e7fb      	b.n	838a2 <ctrl_usart+0x32a>
   838aa:	4620      	mov	r0, r4
   838ac:	e7f9      	b.n	838a2 <ctrl_usart+0x32a>
   838ae:	bf00      	nop
   838b0:	20002dec 	.word	0x20002dec
   838b4:	20002160 	.word	0x20002160
   838b8:	40090000 	.word	0x40090000
   838bc:	40094000 	.word	0x40094000
   838c0:	40098000 	.word	0x40098000
   838c4:	20002d00 	.word	0x20002d00
   838c8:	00081f8d 	.word	0x00081f8d
   838cc:	200028dc 	.word	0x200028dc
   838d0:	20002660 	.word	0x20002660

000838d4 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   838d4:	b538      	push	{r3, r4, r5, lr}
   838d6:	4604      	mov	r4, r0
   838d8:	4613      	mov	r3, r2
	if (txbuf == NULL){
   838da:	460d      	mov	r5, r1
   838dc:	b159      	cbz	r1, 838f6 <usart_driver_putchar+0x22>
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   838de:	2200      	movs	r2, #0
   838e0:	4619      	mov	r1, r3
   838e2:	4628      	mov	r0, r5
   838e4:	4b16      	ldr	r3, [pc, #88]	; (83940 <usart_driver_putchar+0x6c>)
   838e6:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   838e8:	4620      	mov	r0, r4
   838ea:	4b16      	ldr	r3, [pc, #88]	; (83944 <usart_driver_putchar+0x70>)
   838ec:	4798      	blx	r3
   838ee:	f010 0f02 	tst.w	r0, #2
   838f2:	d011      	beq.n	83918 <usart_driver_putchar+0x44>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
			usart_putchar(usart, get_from_circ_buf(txbuf));
		usart_enable_interrupt(usart, US_CSR_TXRDY);
	}
}
   838f4:	bd38      	pop	{r3, r4, r5, pc}
		if (usart == USART0) txbuf = &tx0buf;
   838f6:	4a14      	ldr	r2, [pc, #80]	; (83948 <usart_driver_putchar+0x74>)
   838f8:	4290      	cmp	r0, r2
   838fa:	d009      	beq.n	83910 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   838fc:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   83900:	4290      	cmp	r0, r2
   83902:	d007      	beq.n	83914 <usart_driver_putchar+0x40>
		else if (usart == USART2) txbuf = &tx2buf;
   83904:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   83908:	4290      	cmp	r0, r2
   8390a:	d1f3      	bne.n	838f4 <usart_driver_putchar+0x20>
   8390c:	4d0f      	ldr	r5, [pc, #60]	; (8394c <usart_driver_putchar+0x78>)
   8390e:	e7e6      	b.n	838de <usart_driver_putchar+0xa>
		if (usart == USART0) txbuf = &tx0buf;
   83910:	4d0f      	ldr	r5, [pc, #60]	; (83950 <usart_driver_putchar+0x7c>)
   83912:	e7e4      	b.n	838de <usart_driver_putchar+0xa>
		else if (usart == USART1) txbuf = &tx1buf;
   83914:	4d0f      	ldr	r5, [pc, #60]	; (83954 <usart_driver_putchar+0x80>)
   83916:	e7e2      	b.n	838de <usart_driver_putchar+0xa>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
   83918:	4620      	mov	r0, r4
   8391a:	4b0f      	ldr	r3, [pc, #60]	; (83958 <usart_driver_putchar+0x84>)
   8391c:	4798      	blx	r3
   8391e:	f010 0f02 	tst.w	r0, #2
   83922:	d104      	bne.n	8392e <usart_driver_putchar+0x5a>
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   83924:	2102      	movs	r1, #2
   83926:	4620      	mov	r0, r4
   83928:	4b0c      	ldr	r3, [pc, #48]	; (8395c <usart_driver_putchar+0x88>)
   8392a:	4798      	blx	r3
   8392c:	e7e2      	b.n	838f4 <usart_driver_putchar+0x20>
			usart_putchar(usart, get_from_circ_buf(txbuf));
   8392e:	4628      	mov	r0, r5
   83930:	4b0b      	ldr	r3, [pc, #44]	; (83960 <usart_driver_putchar+0x8c>)
   83932:	4798      	blx	r3
   83934:	4601      	mov	r1, r0
   83936:	4620      	mov	r0, r4
   83938:	4b0a      	ldr	r3, [pc, #40]	; (83964 <usart_driver_putchar+0x90>)
   8393a:	4798      	blx	r3
   8393c:	e7f2      	b.n	83924 <usart_driver_putchar+0x50>
   8393e:	bf00      	nop
   83940:	00081ee5 	.word	0x00081ee5
   83944:	00086de1 	.word	0x00086de1
   83948:	40090000 	.word	0x40090000
   8394c:	20002660 	.word	0x20002660
   83950:	20002d00 	.word	0x20002d00
   83954:	200028dc 	.word	0x200028dc
   83958:	00086de5 	.word	0x00086de5
   8395c:	00086dd9 	.word	0x00086dd9
   83960:	00081f39 	.word	0x00081f39
   83964:	00086e1d 	.word	0x00086e1d

00083968 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   83968:	b508      	push	{r3, lr}
	tcirc_buf * rxbuf = NULL;	 
	if (rxbuf == NULL){
			if (usart == USART0) rxbuf = &rx0buf;
   8396a:	4b0a      	ldr	r3, [pc, #40]	; (83994 <usart_driver_getchar+0x2c>)
   8396c:	4298      	cmp	r0, r3
   8396e:	d00b      	beq.n	83988 <usart_driver_getchar+0x20>
			else if (usart == USART1) rxbuf = &rx1buf;
   83970:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   83974:	4298      	cmp	r0, r3
   83976:	d009      	beq.n	8398c <usart_driver_getchar+0x24>
			else if (usart == USART2) rxbuf = &rx2buf;
   83978:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   8397c:	4298      	cmp	r0, r3
   8397e:	d107      	bne.n	83990 <usart_driver_getchar+0x28>
   83980:	4805      	ldr	r0, [pc, #20]	; (83998 <usart_driver_getchar+0x30>)
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
	}
	return get_from_circ_buf(rxbuf);
   83982:	4b06      	ldr	r3, [pc, #24]	; (8399c <usart_driver_getchar+0x34>)
   83984:	4798      	blx	r3
}
   83986:	bd08      	pop	{r3, pc}
			if (usart == USART0) rxbuf = &rx0buf;
   83988:	4805      	ldr	r0, [pc, #20]	; (839a0 <usart_driver_getchar+0x38>)
   8398a:	e7fa      	b.n	83982 <usart_driver_getchar+0x1a>
			else if (usart == USART1) rxbuf = &rx1buf;
   8398c:	4805      	ldr	r0, [pc, #20]	; (839a4 <usart_driver_getchar+0x3c>)
   8398e:	e7f8      	b.n	83982 <usart_driver_getchar+0x1a>
			else return 0xFF;
   83990:	20ff      	movs	r0, #255	; 0xff
   83992:	e7f8      	b.n	83986 <usart_driver_getchar+0x1e>
   83994:	40090000 	.word	0x40090000
   83998:	20002b58 	.word	0x20002b58
   8399c:	00081f39 	.word	0x00081f39
   839a0:	20002734 	.word	0x20002734
   839a4:	20002c2c 	.word	0x20002c2c

000839a8 <generic_isr>:


void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   839a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839ac:	4607      	mov	r7, r0
   839ae:	460e      	mov	r6, r1
   839b0:	4615      	mov	r5, r2
	uint32_t status;
	status = usart_get_status(usart);
   839b2:	4b14      	ldr	r3, [pc, #80]	; (83a04 <generic_isr+0x5c>)
   839b4:	4798      	blx	r3
   839b6:	4604      	mov	r4, r0
	if (status & US_CSR_RXRDY){
   839b8:	f010 0f01 	tst.w	r0, #1
   839bc:	d104      	bne.n	839c8 <generic_isr+0x20>
		add_to_circ_buf(rxbuf, temp, false);
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
		//udi_cdc_multi_putc(0, temp);
	}
	
	if (status & US_CSR_TXRDY){
   839be:	f014 0f02 	tst.w	r4, #2
   839c2:	d10e      	bne.n	839e2 <generic_isr+0x3a>
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   839c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   839c8:	69bb      	ldr	r3, [r7, #24]
		add_to_circ_buf(rxbuf, temp, false);
   839ca:	fa5f f883 	uxtb.w	r8, r3
   839ce:	2200      	movs	r2, #0
   839d0:	4641      	mov	r1, r8
   839d2:	4630      	mov	r0, r6
   839d4:	4e0c      	ldr	r6, [pc, #48]	; (83a08 <generic_isr+0x60>)
   839d6:	47b0      	blx	r6
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
   839d8:	2200      	movs	r2, #0
   839da:	4641      	mov	r1, r8
   839dc:	480b      	ldr	r0, [pc, #44]	; (83a0c <generic_isr+0x64>)
   839de:	47b0      	blx	r6
   839e0:	e7ed      	b.n	839be <generic_isr+0x16>
		if (circ_buf_has_char(txbuf)){
   839e2:	4628      	mov	r0, r5
   839e4:	4b0a      	ldr	r3, [pc, #40]	; (83a10 <generic_isr+0x68>)
   839e6:	4798      	blx	r3
   839e8:	b138      	cbz	r0, 839fa <generic_isr+0x52>
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   839ea:	4628      	mov	r0, r5
   839ec:	4b09      	ldr	r3, [pc, #36]	; (83a14 <generic_isr+0x6c>)
   839ee:	4798      	blx	r3
   839f0:	4601      	mov	r1, r0
   839f2:	4638      	mov	r0, r7
   839f4:	4b08      	ldr	r3, [pc, #32]	; (83a18 <generic_isr+0x70>)
   839f6:	4798      	blx	r3
   839f8:	e7e4      	b.n	839c4 <generic_isr+0x1c>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   839fa:	2102      	movs	r1, #2
   839fc:	4638      	mov	r0, r7
   839fe:	4b07      	ldr	r3, [pc, #28]	; (83a1c <generic_isr+0x74>)
   83a00:	4798      	blx	r3
}
   83a02:	e7df      	b.n	839c4 <generic_isr+0x1c>
   83a04:	00086de5 	.word	0x00086de5
   83a08:	00081ee5 	.word	0x00081ee5
   83a0c:	200029b0 	.word	0x200029b0
   83a10:	00081f81 	.word	0x00081f81
   83a14:	00081f39 	.word	0x00081f39
   83a18:	00086e1d 	.word	0x00086e1d
   83a1c:	00086ddd 	.word	0x00086ddd

00083a20 <USART0_Handler>:

ISR(USART0_Handler)
{
   83a20:	b508      	push	{r3, lr}
	generic_isr(USART0, &rx0buf, &tx0buf);
   83a22:	4a03      	ldr	r2, [pc, #12]	; (83a30 <USART0_Handler+0x10>)
   83a24:	4903      	ldr	r1, [pc, #12]	; (83a34 <USART0_Handler+0x14>)
   83a26:	4804      	ldr	r0, [pc, #16]	; (83a38 <USART0_Handler+0x18>)
   83a28:	4b04      	ldr	r3, [pc, #16]	; (83a3c <USART0_Handler+0x1c>)
   83a2a:	4798      	blx	r3
}
   83a2c:	bd08      	pop	{r3, pc}
   83a2e:	bf00      	nop
   83a30:	20002d00 	.word	0x20002d00
   83a34:	20002734 	.word	0x20002734
   83a38:	40090000 	.word	0x40090000
   83a3c:	000839a9 	.word	0x000839a9

00083a40 <USART1_Handler>:

ISR(USART1_Handler)
{
   83a40:	b508      	push	{r3, lr}
	generic_isr(USART1, &rx1buf, &tx1buf);
   83a42:	4a03      	ldr	r2, [pc, #12]	; (83a50 <USART1_Handler+0x10>)
   83a44:	4903      	ldr	r1, [pc, #12]	; (83a54 <USART1_Handler+0x14>)
   83a46:	4804      	ldr	r0, [pc, #16]	; (83a58 <USART1_Handler+0x18>)
   83a48:	4b04      	ldr	r3, [pc, #16]	; (83a5c <USART1_Handler+0x1c>)
   83a4a:	4798      	blx	r3
}
   83a4c:	bd08      	pop	{r3, pc}
   83a4e:	bf00      	nop
   83a50:	200028dc 	.word	0x200028dc
   83a54:	20002c2c 	.word	0x20002c2c
   83a58:	40094000 	.word	0x40094000
   83a5c:	000839a9 	.word	0x000839a9

00083a60 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   83a60:	b508      	push	{r3, lr}
	generic_isr(USART2, &rx2buf, &tx2buf);
   83a62:	4a03      	ldr	r2, [pc, #12]	; (83a70 <USART2_Handler+0x10>)
   83a64:	4903      	ldr	r1, [pc, #12]	; (83a74 <USART2_Handler+0x14>)
   83a66:	4804      	ldr	r0, [pc, #16]	; (83a78 <USART2_Handler+0x18>)
   83a68:	4b04      	ldr	r3, [pc, #16]	; (83a7c <USART2_Handler+0x1c>)
   83a6a:	4798      	blx	r3
}
   83a6c:	bd08      	pop	{r3, pc}
   83a6e:	bf00      	nop
   83a70:	20002660 	.word	0x20002660
   83a74:	20002b58 	.word	0x20002b58
   83a78:	40098000 	.word	0x40098000
   83a7c:	000839a9 	.word	0x000839a9

00083a80 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   83a80:	b538      	push	{r3, r4, r5, lr}
   83a82:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   83a84:	b2c0      	uxtb	r0, r0
   83a86:	4d05      	ldr	r5, [pc, #20]	; (83a9c <XMEGANVM_SendAddress+0x1c>)
   83a88:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   83a8a:	f3c4 2007 	ubfx	r0, r4, #8, #8
   83a8e:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   83a90:	f3c4 4007 	ubfx	r0, r4, #16, #8
   83a94:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   83a96:	0e20      	lsrs	r0, r4, #24
   83a98:	47a8      	blx	r5
}
   83a9a:	bd38      	pop	{r3, r4, r5, pc}
   83a9c:	0008430d 	.word	0x0008430d

00083aa0 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   83aa0:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   83aa2:	4b03      	ldr	r3, [pc, #12]	; (83ab0 <XMEGANVM_SendNVMRegAddress+0x10>)
   83aa4:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   83aa6:	4318      	orrs	r0, r3
   83aa8:	4b02      	ldr	r3, [pc, #8]	; (83ab4 <XMEGANVM_SendNVMRegAddress+0x14>)
   83aaa:	4798      	blx	r3
}
   83aac:	bd08      	pop	{r3, pc}
   83aae:	bf00      	nop
   83ab0:	200005b0 	.word	0x200005b0
   83ab4:	00083a81 	.word	0x00083a81

00083ab8 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   83ab8:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83aba:	4e07      	ldr	r6, [pc, #28]	; (83ad8 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83abc:	4d07      	ldr	r5, [pc, #28]	; (83adc <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   83abe:	4c08      	ldr	r4, [pc, #32]	; (83ae0 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83ac0:	2080      	movs	r0, #128	; 0x80
   83ac2:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83ac4:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   83ac6:	6823      	ldr	r3, [r4, #0]
   83ac8:	b123      	cbz	r3, 83ad4 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   83aca:	f010 0f02 	tst.w	r0, #2
   83ace:	d0f7      	beq.n	83ac0 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   83ad0:	2001      	movs	r0, #1
   83ad2:	e000      	b.n	83ad6 <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   83ad4:	2000      	movs	r0, #0
		}
	}
}
   83ad6:	bd70      	pop	{r4, r5, r6, pc}
   83ad8:	0008430d 	.word	0x0008430d
   83adc:	00084339 	.word	0x00084339
   83ae0:	2000265c 	.word	0x2000265c

00083ae4 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   83ae4:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83ae6:	206b      	movs	r0, #107	; 0x6b
   83ae8:	4b09      	ldr	r3, [pc, #36]	; (83b10 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   83aea:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   83aec:	200f      	movs	r0, #15
   83aee:	4b09      	ldr	r3, [pc, #36]	; (83b14 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   83af0:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83af2:	4e07      	ldr	r6, [pc, #28]	; (83b10 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83af4:	4d08      	ldr	r5, [pc, #32]	; (83b18 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   83af6:	4c09      	ldr	r4, [pc, #36]	; (83b1c <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83af8:	2020      	movs	r0, #32
   83afa:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83afc:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   83afe:	6823      	ldr	r3, [r4, #0]
   83b00:	b123      	cbz	r3, 83b0c <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   83b02:	f010 0f80 	tst.w	r0, #128	; 0x80
   83b06:	d1f7      	bne.n	83af8 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   83b08:	2001      	movs	r0, #1
   83b0a:	e000      	b.n	83b0e <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   83b0c:	2000      	movs	r0, #0
		}
	}
}
   83b0e:	bd70      	pop	{r4, r5, r6, pc}
   83b10:	0008430d 	.word	0x0008430d
   83b14:	00083aa1 	.word	0x00083aa1
   83b18:	00084339 	.word	0x00084339
   83b1c:	2000265c 	.word	0x2000265c

00083b20 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   83b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83b24:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   83b26:	4b1a      	ldr	r3, [pc, #104]	; (83b90 <XMEGANVM_EnablePDI+0x70>)
   83b28:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83b2a:	20c1      	movs	r0, #193	; 0xc1
   83b2c:	4c19      	ldr	r4, [pc, #100]	; (83b94 <XMEGANVM_EnablePDI+0x74>)
   83b2e:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   83b30:	2059      	movs	r0, #89	; 0x59
   83b32:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   83b34:	20c2      	movs	r0, #194	; 0xc2
   83b36:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   83b38:	2002      	movs	r0, #2
   83b3a:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   83b3c:	20e0      	movs	r0, #224	; 0xe0
   83b3e:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83b40:	f10d 0407 	add.w	r4, sp, #7
   83b44:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   83b46:	f04f 0812 	mov.w	r8, #18
   83b4a:	2789      	movs	r7, #137	; 0x89
   83b4c:	4e11      	ldr	r6, [pc, #68]	; (83b94 <XMEGANVM_EnablePDI+0x74>)
   83b4e:	f88d 8000 	strb.w	r8, [sp]
   83b52:	f88d 7001 	strb.w	r7, [sp, #1]
   83b56:	23ab      	movs	r3, #171	; 0xab
   83b58:	f88d 3002 	strb.w	r3, [sp, #2]
   83b5c:	2345      	movs	r3, #69	; 0x45
   83b5e:	f88d 3003 	strb.w	r3, [sp, #3]
   83b62:	23cd      	movs	r3, #205	; 0xcd
   83b64:	f88d 3004 	strb.w	r3, [sp, #4]
   83b68:	23d8      	movs	r3, #216	; 0xd8
   83b6a:	f88d 3005 	strb.w	r3, [sp, #5]
   83b6e:	2388      	movs	r3, #136	; 0x88
   83b70:	f88d 3006 	strb.w	r3, [sp, #6]
   83b74:	23ff      	movs	r3, #255	; 0xff
   83b76:	f88d 3007 	strb.w	r3, [sp, #7]
   83b7a:	7820      	ldrb	r0, [r4, #0]
   83b7c:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83b7e:	454c      	cmp	r4, r9
   83b80:	f104 34ff 	add.w	r4, r4, #4294967295
   83b84:	d1e3      	bne.n	83b4e <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   83b86:	4b04      	ldr	r3, [pc, #16]	; (83b98 <XMEGANVM_EnablePDI+0x78>)
   83b88:	4798      	blx	r3
}
   83b8a:	b003      	add	sp, #12
   83b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83b90:	000843d9 	.word	0x000843d9
   83b94:	0008430d 	.word	0x0008430d
   83b98:	00083ab9 	.word	0x00083ab9

00083b9c <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   83b9c:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   83b9e:	4b09      	ldr	r3, [pc, #36]	; (83bc4 <XMEGANVM_DisablePDI+0x28>)
   83ba0:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83ba2:	4c09      	ldr	r4, [pc, #36]	; (83bc8 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83ba4:	4d09      	ldr	r5, [pc, #36]	; (83bcc <XMEGANVM_DisablePDI+0x30>)
   83ba6:	4e0a      	ldr	r6, [pc, #40]	; (83bd0 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83ba8:	20c1      	movs	r0, #193	; 0xc1
   83baa:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   83bac:	2000      	movs	r0, #0
   83bae:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   83bb0:	2081      	movs	r0, #129	; 0x81
   83bb2:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83bb4:	47a8      	blx	r5
   83bb6:	b110      	cbz	r0, 83bbe <XMEGANVM_DisablePDI+0x22>
   83bb8:	6833      	ldr	r3, [r6, #0]
   83bba:	2b00      	cmp	r3, #0
   83bbc:	d1f4      	bne.n	83ba8 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   83bbe:	4b05      	ldr	r3, [pc, #20]	; (83bd4 <XMEGANVM_DisablePDI+0x38>)
   83bc0:	4798      	blx	r3
}
   83bc2:	bd70      	pop	{r4, r5, r6, pc}
   83bc4:	00083ab9 	.word	0x00083ab9
   83bc8:	0008430d 	.word	0x0008430d
   83bcc:	00084339 	.word	0x00084339
   83bd0:	2000265c 	.word	0x2000265c
   83bd4:	000842b1 	.word	0x000842b1

00083bd8 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   83bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bda:	4606      	mov	r6, r0
   83bdc:	460c      	mov	r4, r1
   83bde:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83be0:	4b1c      	ldr	r3, [pc, #112]	; (83c54 <XMEGANVM_ReadMemory+0x7c>)
   83be2:	4798      	blx	r3
   83be4:	4603      	mov	r3, r0
   83be6:	b908      	cbnz	r0, 83bec <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   83be8:	4618      	mov	r0, r3
   83bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83bec:	204c      	movs	r0, #76	; 0x4c
   83bee:	4f1a      	ldr	r7, [pc, #104]	; (83c58 <XMEGANVM_ReadMemory+0x80>)
   83bf0:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83bf2:	200a      	movs	r0, #10
   83bf4:	4b19      	ldr	r3, [pc, #100]	; (83c5c <XMEGANVM_ReadMemory+0x84>)
   83bf6:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   83bf8:	2043      	movs	r0, #67	; 0x43
   83bfa:	47b8      	blx	r7
	if (ReadSize > 1)
   83bfc:	2d01      	cmp	r5, #1
   83bfe:	d919      	bls.n	83c34 <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83c00:	206b      	movs	r0, #107	; 0x6b
   83c02:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   83c04:	4630      	mov	r0, r6
   83c06:	4b16      	ldr	r3, [pc, #88]	; (83c60 <XMEGANVM_ReadMemory+0x88>)
   83c08:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83c0a:	20a0      	movs	r0, #160	; 0xa0
   83c0c:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   83c0e:	1e68      	subs	r0, r5, #1
   83c10:	b2c0      	uxtb	r0, r0
   83c12:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83c14:	2024      	movs	r0, #36	; 0x24
   83c16:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   83c18:	3d01      	subs	r5, #1
   83c1a:	b2ad      	uxth	r5, r5
   83c1c:	3501      	adds	r5, #1
   83c1e:	4425      	add	r5, r4
   83c20:	4e10      	ldr	r6, [pc, #64]	; (83c64 <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83c22:	4f11      	ldr	r7, [pc, #68]	; (83c68 <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   83c24:	6833      	ldr	r3, [r6, #0]
   83c26:	b173      	cbz	r3, 83c46 <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83c28:	47b8      	blx	r7
   83c2a:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   83c2e:	42ac      	cmp	r4, r5
   83c30:	d1f8      	bne.n	83c24 <XMEGANVM_ReadMemory+0x4c>
   83c32:	e008      	b.n	83c46 <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c34:	200c      	movs	r0, #12
   83c36:	4b08      	ldr	r3, [pc, #32]	; (83c58 <XMEGANVM_ReadMemory+0x80>)
   83c38:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   83c3a:	4630      	mov	r0, r6
   83c3c:	4b08      	ldr	r3, [pc, #32]	; (83c60 <XMEGANVM_ReadMemory+0x88>)
   83c3e:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83c40:	4b09      	ldr	r3, [pc, #36]	; (83c68 <XMEGANVM_ReadMemory+0x90>)
   83c42:	4798      	blx	r3
   83c44:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   83c46:	4b07      	ldr	r3, [pc, #28]	; (83c64 <XMEGANVM_ReadMemory+0x8c>)
   83c48:	681b      	ldr	r3, [r3, #0]
   83c4a:	3b00      	subs	r3, #0
   83c4c:	bf18      	it	ne
   83c4e:	2301      	movne	r3, #1
   83c50:	e7ca      	b.n	83be8 <XMEGANVM_ReadMemory+0x10>
   83c52:	bf00      	nop
   83c54:	00083ae5 	.word	0x00083ae5
   83c58:	0008430d 	.word	0x0008430d
   83c5c:	00083aa1 	.word	0x00083aa1
   83c60:	00083a81 	.word	0x00083a81
   83c64:	2000265c 	.word	0x2000265c
   83c68:	00084339 	.word	0x00084339

00083c6c <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   83c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c70:	4607      	mov	r7, r0
   83c72:	4688      	mov	r8, r1
   83c74:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83c76:	4b0b      	ldr	r3, [pc, #44]	; (83ca4 <XMEGANVM_WriteByteMemory+0x38>)
   83c78:	4798      	blx	r3
   83c7a:	4605      	mov	r5, r0
   83c7c:	b910      	cbnz	r0, 83c84 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   83c7e:	4628      	mov	r0, r5
   83c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c84:	204c      	movs	r0, #76	; 0x4c
   83c86:	4c08      	ldr	r4, [pc, #32]	; (83ca8 <XMEGANVM_WriteByteMemory+0x3c>)
   83c88:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83c8a:	200a      	movs	r0, #10
   83c8c:	4b07      	ldr	r3, [pc, #28]	; (83cac <XMEGANVM_WriteByteMemory+0x40>)
   83c8e:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   83c90:	4638      	mov	r0, r7
   83c92:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c94:	204c      	movs	r0, #76	; 0x4c
   83c96:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   83c98:	4640      	mov	r0, r8
   83c9a:	4b05      	ldr	r3, [pc, #20]	; (83cb0 <XMEGANVM_WriteByteMemory+0x44>)
   83c9c:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   83c9e:	4630      	mov	r0, r6
   83ca0:	47a0      	blx	r4
	return true;
   83ca2:	e7ec      	b.n	83c7e <XMEGANVM_WriteByteMemory+0x12>
   83ca4:	00083ae5 	.word	0x00083ae5
   83ca8:	0008430d 	.word	0x0008430d
   83cac:	00083aa1 	.word	0x00083aa1
   83cb0:	00083a81 	.word	0x00083a81

00083cb4 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   83cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83cb8:	4681      	mov	r9, r0
   83cba:	4617      	mov	r7, r2
   83cbc:	461c      	mov	r4, r3
   83cbe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83cc0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   83cc4:	f013 0f01 	tst.w	r3, #1
   83cc8:	d108      	bne.n	83cdc <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   83cca:	b9f6      	cbnz	r6, 83d0a <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   83ccc:	f014 0f02 	tst.w	r4, #2
   83cd0:	d13f      	bne.n	83d52 <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   83cd2:	f04f 0a01 	mov.w	sl, #1
}
   83cd6:	4650      	mov	r0, sl
   83cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cdc:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83cde:	4b27      	ldr	r3, [pc, #156]	; (83d7c <XMEGANVM_WritePageMemory+0xc8>)
   83ce0:	4798      	blx	r3
   83ce2:	4682      	mov	sl, r0
   83ce4:	2800      	cmp	r0, #0
   83ce6:	d0f6      	beq.n	83cd6 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ce8:	204c      	movs	r0, #76	; 0x4c
   83cea:	f8df a09c 	ldr.w	sl, [pc, #156]	; 83d88 <XMEGANVM_WritePageMemory+0xd4>
   83cee:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83cf0:	200a      	movs	r0, #10
   83cf2:	f8df b08c 	ldr.w	fp, [pc, #140]	; 83d80 <XMEGANVM_WritePageMemory+0xcc>
   83cf6:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   83cf8:	4640      	mov	r0, r8
   83cfa:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83cfc:	204c      	movs	r0, #76	; 0x4c
   83cfe:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83d00:	200b      	movs	r0, #11
   83d02:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83d04:	2001      	movs	r0, #1
   83d06:	47d0      	blx	sl
   83d08:	e7df      	b.n	83cca <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d0a:	4b1c      	ldr	r3, [pc, #112]	; (83d7c <XMEGANVM_WritePageMemory+0xc8>)
   83d0c:	4798      	blx	r3
   83d0e:	4682      	mov	sl, r0
   83d10:	2800      	cmp	r0, #0
   83d12:	d0e0      	beq.n	83cd6 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d14:	204c      	movs	r0, #76	; 0x4c
   83d16:	f8df 8070 	ldr.w	r8, [pc, #112]	; 83d88 <XMEGANVM_WritePageMemory+0xd4>
   83d1a:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d1c:	200a      	movs	r0, #10
   83d1e:	4b18      	ldr	r3, [pc, #96]	; (83d80 <XMEGANVM_WritePageMemory+0xcc>)
   83d20:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   83d22:	4648      	mov	r0, r9
   83d24:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83d26:	206b      	movs	r0, #107	; 0x6b
   83d28:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   83d2a:	980a      	ldr	r0, [sp, #40]	; 0x28
   83d2c:	4b15      	ldr	r3, [pc, #84]	; (83d84 <XMEGANVM_WritePageMemory+0xd0>)
   83d2e:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83d30:	20a0      	movs	r0, #160	; 0xa0
   83d32:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   83d34:	1e70      	subs	r0, r6, #1
   83d36:	b2c0      	uxtb	r0, r0
   83d38:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83d3a:	2064      	movs	r0, #100	; 0x64
   83d3c:	47c0      	blx	r8
		while (WriteSize--)
   83d3e:	3e01      	subs	r6, #1
   83d40:	b2b6      	uxth	r6, r6
   83d42:	3601      	adds	r6, #1
   83d44:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   83d46:	f815 0b01 	ldrb.w	r0, [r5], #1
   83d4a:	47c0      	blx	r8
		while (WriteSize--)
   83d4c:	42b5      	cmp	r5, r6
   83d4e:	d1fa      	bne.n	83d46 <XMEGANVM_WritePageMemory+0x92>
   83d50:	e7bc      	b.n	83ccc <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d52:	4b0a      	ldr	r3, [pc, #40]	; (83d7c <XMEGANVM_WritePageMemory+0xc8>)
   83d54:	4798      	blx	r3
   83d56:	4682      	mov	sl, r0
   83d58:	2800      	cmp	r0, #0
   83d5a:	d0bc      	beq.n	83cd6 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d5c:	204c      	movs	r0, #76	; 0x4c
   83d5e:	4c0a      	ldr	r4, [pc, #40]	; (83d88 <XMEGANVM_WritePageMemory+0xd4>)
   83d60:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d62:	200a      	movs	r0, #10
   83d64:	4b06      	ldr	r3, [pc, #24]	; (83d80 <XMEGANVM_WritePageMemory+0xcc>)
   83d66:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   83d68:	4638      	mov	r0, r7
   83d6a:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d6c:	204c      	movs	r0, #76	; 0x4c
   83d6e:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   83d70:	980a      	ldr	r0, [sp, #40]	; 0x28
   83d72:	4b04      	ldr	r3, [pc, #16]	; (83d84 <XMEGANVM_WritePageMemory+0xd0>)
   83d74:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83d76:	2000      	movs	r0, #0
   83d78:	47a0      	blx	r4
   83d7a:	e7ac      	b.n	83cd6 <XMEGANVM_WritePageMemory+0x22>
   83d7c:	00083ae5 	.word	0x00083ae5
   83d80:	00083aa1 	.word	0x00083aa1
   83d84:	00083a81 	.word	0x00083a81
   83d88:	0008430d 	.word	0x0008430d

00083d8c <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   83d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d8e:	4604      	mov	r4, r0
   83d90:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d92:	4b36      	ldr	r3, [pc, #216]	; (83e6c <XMEGANVM_EraseMemory+0xe0>)
   83d94:	4798      	blx	r3
   83d96:	4603      	mov	r3, r0
   83d98:	b1a8      	cbz	r0, 83dc6 <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   83d9a:	2c40      	cmp	r4, #64	; 0x40
   83d9c:	d015      	beq.n	83dca <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   83d9e:	2c30      	cmp	r4, #48	; 0x30
   83da0:	d022      	beq.n	83de8 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83da2:	204c      	movs	r0, #76	; 0x4c
   83da4:	4e32      	ldr	r6, [pc, #200]	; (83e70 <XMEGANVM_EraseMemory+0xe4>)
   83da6:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83da8:	200a      	movs	r0, #10
   83daa:	4b32      	ldr	r3, [pc, #200]	; (83e74 <XMEGANVM_EraseMemory+0xe8>)
   83dac:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   83dae:	4620      	mov	r0, r4
   83db0:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83db2:	204c      	movs	r0, #76	; 0x4c
   83db4:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   83db6:	4628      	mov	r0, r5
   83db8:	4b2f      	ldr	r3, [pc, #188]	; (83e78 <XMEGANVM_EraseMemory+0xec>)
   83dba:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83dbc:	2000      	movs	r0, #0
   83dbe:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   83dc0:	4b2e      	ldr	r3, [pc, #184]	; (83e7c <XMEGANVM_EraseMemory+0xf0>)
   83dc2:	4798      	blx	r3
   83dc4:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   83dc6:	4618      	mov	r0, r3
   83dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83dca:	204c      	movs	r0, #76	; 0x4c
   83dcc:	4c28      	ldr	r4, [pc, #160]	; (83e70 <XMEGANVM_EraseMemory+0xe4>)
   83dce:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83dd0:	200a      	movs	r0, #10
   83dd2:	4d28      	ldr	r5, [pc, #160]	; (83e74 <XMEGANVM_EraseMemory+0xe8>)
   83dd4:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83dd6:	2040      	movs	r0, #64	; 0x40
   83dd8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83dda:	204c      	movs	r0, #76	; 0x4c
   83ddc:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83dde:	200b      	movs	r0, #11
   83de0:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83de2:	2001      	movs	r0, #1
   83de4:	47a0      	blx	r4
   83de6:	e7eb      	b.n	83dc0 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83de8:	204c      	movs	r0, #76	; 0x4c
   83dea:	4c21      	ldr	r4, [pc, #132]	; (83e70 <XMEGANVM_EraseMemory+0xe4>)
   83dec:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83dee:	200a      	movs	r0, #10
   83df0:	4e20      	ldr	r6, [pc, #128]	; (83e74 <XMEGANVM_EraseMemory+0xe8>)
   83df2:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   83df4:	2036      	movs	r0, #54	; 0x36
   83df6:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83df8:	204c      	movs	r0, #76	; 0x4c
   83dfa:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83dfc:	200b      	movs	r0, #11
   83dfe:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83e00:	2001      	movs	r0, #1
   83e02:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83e04:	4b19      	ldr	r3, [pc, #100]	; (83e6c <XMEGANVM_EraseMemory+0xe0>)
   83e06:	4798      	blx	r3
   83e08:	4603      	mov	r3, r0
   83e0a:	2800      	cmp	r0, #0
   83e0c:	d0db      	beq.n	83dc6 <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e0e:	204c      	movs	r0, #76	; 0x4c
   83e10:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e12:	200a      	movs	r0, #10
   83e14:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   83e16:	2033      	movs	r0, #51	; 0x33
   83e18:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83e1a:	206b      	movs	r0, #107	; 0x6b
   83e1c:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   83e1e:	4628      	mov	r0, r5
   83e20:	4b15      	ldr	r3, [pc, #84]	; (83e78 <XMEGANVM_EraseMemory+0xec>)
   83e22:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83e24:	20a0      	movs	r0, #160	; 0xa0
   83e26:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   83e28:	4d15      	ldr	r5, [pc, #84]	; (83e80 <XMEGANVM_EraseMemory+0xf4>)
   83e2a:	7828      	ldrb	r0, [r5, #0]
   83e2c:	3801      	subs	r0, #1
   83e2e:	b2c0      	uxtb	r0, r0
   83e30:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83e32:	2064      	movs	r0, #100	; 0x64
   83e34:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83e36:	882b      	ldrh	r3, [r5, #0]
   83e38:	b14b      	cbz	r3, 83e4e <XMEGANVM_EraseMemory+0xc2>
   83e3a:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   83e3c:	4627      	mov	r7, r4
   83e3e:	4e0c      	ldr	r6, [pc, #48]	; (83e70 <XMEGANVM_EraseMemory+0xe4>)
   83e40:	4638      	mov	r0, r7
   83e42:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83e44:	1c63      	adds	r3, r4, #1
   83e46:	b2dc      	uxtb	r4, r3
   83e48:	882a      	ldrh	r2, [r5, #0]
   83e4a:	42a2      	cmp	r2, r4
   83e4c:	d8f8      	bhi.n	83e40 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e4e:	204c      	movs	r0, #76	; 0x4c
   83e50:	4c07      	ldr	r4, [pc, #28]	; (83e70 <XMEGANVM_EraseMemory+0xe4>)
   83e52:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e54:	200a      	movs	r0, #10
   83e56:	4d07      	ldr	r5, [pc, #28]	; (83e74 <XMEGANVM_EraseMemory+0xe8>)
   83e58:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83e5a:	2030      	movs	r0, #48	; 0x30
   83e5c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e5e:	204c      	movs	r0, #76	; 0x4c
   83e60:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83e62:	200b      	movs	r0, #11
   83e64:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83e66:	2001      	movs	r0, #1
   83e68:	47a0      	blx	r4
   83e6a:	e7a9      	b.n	83dc0 <XMEGANVM_EraseMemory+0x34>
   83e6c:	00083ae5 	.word	0x00083ae5
   83e70:	0008430d 	.word	0x0008430d
   83e74:	00083aa1 	.word	0x00083aa1
   83e78:	00083a81 	.word	0x00083a81
   83e7c:	00083ab9 	.word	0x00083ab9
   83e80:	200005ac 	.word	0x200005ac

00083e84 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   83e84:	b570      	push	{r4, r5, r6, lr}
   83e86:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   83e88:	4b8f      	ldr	r3, [pc, #572]	; (840c8 <XPROGProtocol_Command+0x244>)
   83e8a:	8859      	ldrh	r1, [r3, #2]
   83e8c:	b2cb      	uxtb	r3, r1
   83e8e:	4a8f      	ldr	r2, [pc, #572]	; (840cc <XPROGProtocol_Command+0x248>)
   83e90:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   83e92:	3b01      	subs	r3, #1
   83e94:	2b21      	cmp	r3, #33	; 0x21
   83e96:	d82b      	bhi.n	83ef0 <XPROGProtocol_Command+0x6c>
   83e98:	e8df f013 	tbh	[pc, r3, lsl #1]
   83e9c:	002f0022 	.word	0x002f0022
   83ea0:	00730037 	.word	0x00730037
   83ea4:	00e600c2 	.word	0x00e600c2
   83ea8:	002a00e9 	.word	0x002a00e9
   83eac:	002a002a 	.word	0x002a002a
   83eb0:	002a002a 	.word	0x002a002a
   83eb4:	002a002a 	.word	0x002a002a
   83eb8:	002a002a 	.word	0x002a002a
   83ebc:	002a002a 	.word	0x002a002a
   83ec0:	002a002a 	.word	0x002a002a
   83ec4:	002a002a 	.word	0x002a002a
   83ec8:	002a002a 	.word	0x002a002a
   83ecc:	002a002a 	.word	0x002a002a
   83ed0:	002a002a 	.word	0x002a002a
   83ed4:	002a002a 	.word	0x002a002a
   83ed8:	017c002a 	.word	0x017c002a
   83edc:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83ee0:	4b7b      	ldr	r3, [pc, #492]	; (840d0 <XPROGProtocol_Command+0x24c>)
   83ee2:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83ee4:	4b7b      	ldr	r3, [pc, #492]	; (840d4 <XPROGProtocol_Command+0x250>)
   83ee6:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83ee8:	f080 0001 	eor.w	r0, r0, #1
   83eec:	4b7a      	ldr	r3, [pc, #488]	; (840d8 <XPROGProtocol_Command+0x254>)
   83eee:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83ef0:	4b7a      	ldr	r3, [pc, #488]	; (840dc <XPROGProtocol_Command+0x258>)
   83ef2:	4798      	blx	r3
	return false;
   83ef4:	2000      	movs	r0, #0
}
   83ef6:	b004      	add	sp, #16
   83ef8:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   83efa:	4b75      	ldr	r3, [pc, #468]	; (840d0 <XPROGProtocol_Command+0x24c>)
   83efc:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   83efe:	4b78      	ldr	r3, [pc, #480]	; (840e0 <XPROGProtocol_Command+0x25c>)
   83f00:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83f02:	4b75      	ldr	r3, [pc, #468]	; (840d8 <XPROGProtocol_Command+0x254>)
   83f04:	2200      	movs	r2, #0
   83f06:	701a      	strb	r2, [r3, #0]
}
   83f08:	e7f2      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83f0a:	4b71      	ldr	r3, [pc, #452]	; (840d0 <XPROGProtocol_Command+0x24c>)
   83f0c:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83f0e:	4b72      	ldr	r3, [pc, #456]	; (840d8 <XPROGProtocol_Command+0x254>)
   83f10:	2200      	movs	r2, #0
   83f12:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83f14:	4b6c      	ldr	r3, [pc, #432]	; (840c8 <XPROGProtocol_Command+0x244>)
   83f16:	899b      	ldrh	r3, [r3, #12]
   83f18:	2b04      	cmp	r3, #4
   83f1a:	d915      	bls.n	83f48 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   83f1c:	4b6a      	ldr	r3, [pc, #424]	; (840c8 <XPROGProtocol_Command+0x244>)
   83f1e:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83f20:	791a      	ldrb	r2, [r3, #4]
   83f22:	78d9      	ldrb	r1, [r3, #3]
   83f24:	0409      	lsls	r1, r1, #16
   83f26:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83f2a:	785a      	ldrb	r2, [r3, #1]
   83f2c:	4311      	orrs	r1, r2
   83f2e:	789a      	ldrb	r2, [r3, #2]
   83f30:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83f34:	781b      	ldrb	r3, [r3, #0]
   83f36:	3b01      	subs	r3, #1
   83f38:	2b07      	cmp	r3, #7
   83f3a:	d81e      	bhi.n	83f7a <XPROGProtocol_Command+0xf6>
   83f3c:	e8df f003 	tbb	[pc, r3]
   83f40:	1311081f 	.word	0x1311081f
   83f44:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   83f48:	4b63      	ldr	r3, [pc, #396]	; (840d8 <XPROGProtocol_Command+0x254>)
   83f4a:	2201      	movs	r2, #1
   83f4c:	701a      	strb	r2, [r3, #0]
		return;
   83f4e:	e7cf      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83f50:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83f52:	4b64      	ldr	r3, [pc, #400]	; (840e4 <XPROGProtocol_Command+0x260>)
   83f54:	4798      	blx	r3
   83f56:	2800      	cmp	r0, #0
   83f58:	d1ca      	bne.n	83ef0 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   83f5a:	4b5f      	ldr	r3, [pc, #380]	; (840d8 <XPROGProtocol_Command+0x254>)
   83f5c:	2203      	movs	r2, #3
   83f5e:	701a      	strb	r2, [r3, #0]
   83f60:	e7c6      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   83f62:	2068      	movs	r0, #104	; 0x68
		break;
   83f64:	e7f5      	b.n	83f52 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   83f66:	2030      	movs	r0, #48	; 0x30
		break;
   83f68:	e7f3      	b.n	83f52 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   83f6a:	2022      	movs	r0, #34	; 0x22
		break;
   83f6c:	e7f1      	b.n	83f52 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   83f6e:	202a      	movs	r0, #42	; 0x2a
		break;
   83f70:	e7ef      	b.n	83f52 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   83f72:	2032      	movs	r0, #50	; 0x32
		break;
   83f74:	e7ed      	b.n	83f52 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   83f76:	2018      	movs	r0, #24
		break;
   83f78:	e7eb      	b.n	83f52 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   83f7a:	2000      	movs	r0, #0
		break;
   83f7c:	e7e9      	b.n	83f52 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   83f7e:	2040      	movs	r0, #64	; 0x40
   83f80:	e7e7      	b.n	83f52 <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   83f82:	4b53      	ldr	r3, [pc, #332]	; (840d0 <XPROGProtocol_Command+0x24c>)
   83f84:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83f86:	4b54      	ldr	r3, [pc, #336]	; (840d8 <XPROGProtocol_Command+0x254>)
   83f88:	2200      	movs	r2, #0
   83f8a:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   83f8c:	4b4e      	ldr	r3, [pc, #312]	; (840c8 <XPROGProtocol_Command+0x244>)
   83f8e:	88db      	ldrh	r3, [r3, #6]
   83f90:	2b07      	cmp	r3, #7
   83f92:	d802      	bhi.n	83f9a <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   83f94:	4b50      	ldr	r3, [pc, #320]	; (840d8 <XPROGProtocol_Command+0x254>)
   83f96:	2201      	movs	r2, #1
   83f98:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   83f9a:	4b4b      	ldr	r3, [pc, #300]	; (840c8 <XPROGProtocol_Command+0x244>)
   83f9c:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   83f9e:	795a      	ldrb	r2, [r3, #5]
   83fa0:	7919      	ldrb	r1, [r3, #4]
   83fa2:	0409      	lsls	r1, r1, #16
   83fa4:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83fa8:	789a      	ldrb	r2, [r3, #2]
   83faa:	4311      	orrs	r1, r2
   83fac:	78da      	ldrb	r2, [r3, #3]
   83fae:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   83fb2:	781a      	ldrb	r2, [r3, #0]
   83fb4:	3a01      	subs	r2, #1
   83fb6:	2a05      	cmp	r2, #5
   83fb8:	d82e      	bhi.n	84018 <XPROGProtocol_Command+0x194>
   83fba:	e8df f012 	tbh	[pc, r2, lsl #1]
   83fbe:	00fd      	.short	0x00fd
   83fc0:	0101000e 	.word	0x0101000e
   83fc4:	00060105 	.word	0x00060105
   83fc8:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   83fca:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   83fcc:	4b46      	ldr	r3, [pc, #280]	; (840e8 <XPROGProtocol_Command+0x264>)
   83fce:	781a      	ldrb	r2, [r3, #0]
   83fd0:	4b46      	ldr	r3, [pc, #280]	; (840ec <XPROGProtocol_Command+0x268>)
   83fd2:	4798      	blx	r3
   83fd4:	2800      	cmp	r0, #0
   83fd6:	d18b      	bne.n	83ef0 <XPROGProtocol_Command+0x6c>
   83fd8:	e016      	b.n	84008 <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   83fda:	2526      	movs	r5, #38	; 0x26
   83fdc:	2023      	movs	r0, #35	; 0x23
   83fde:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   83fe0:	79de      	ldrb	r6, [r3, #7]
   83fe2:	799c      	ldrb	r4, [r3, #6]
   83fe4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   83fe8:	785b      	ldrb	r3, [r3, #1]
   83fea:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   83fee:	bf28      	it	cs
   83ff0:	f44f 7480 	movcs.w	r4, #256	; 0x100
   83ff4:	9402      	str	r4, [sp, #8]
   83ff6:	4c3c      	ldr	r4, [pc, #240]	; (840e8 <XPROGProtocol_Command+0x264>)
   83ff8:	9401      	str	r4, [sp, #4]
   83ffa:	9100      	str	r1, [sp, #0]
   83ffc:	4629      	mov	r1, r5
   83ffe:	4c3c      	ldr	r4, [pc, #240]	; (840f0 <XPROGProtocol_Command+0x26c>)
   84000:	47a0      	blx	r4
   84002:	2800      	cmp	r0, #0
   84004:	f47f af74 	bne.w	83ef0 <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   84008:	4b33      	ldr	r3, [pc, #204]	; (840d8 <XPROGProtocol_Command+0x254>)
   8400a:	2203      	movs	r2, #3
   8400c:	701a      	strb	r2, [r3, #0]
   8400e:	e76f      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   84010:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   84012:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   84014:	221a      	movs	r2, #26
		break;
   84016:	e7e3      	b.n	83fe0 <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   84018:	222e      	movs	r2, #46	; 0x2e
   8401a:	2526      	movs	r5, #38	; 0x26
   8401c:	2023      	movs	r0, #35	; 0x23
   8401e:	e7df      	b.n	83fe0 <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   84020:	4b2b      	ldr	r3, [pc, #172]	; (840d0 <XPROGProtocol_Command+0x24c>)
   84022:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   84024:	4b2c      	ldr	r3, [pc, #176]	; (840d8 <XPROGProtocol_Command+0x254>)
   84026:	2200      	movs	r2, #0
   84028:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8402a:	4b27      	ldr	r3, [pc, #156]	; (840c8 <XPROGProtocol_Command+0x244>)
   8402c:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   8402e:	798b      	ldrb	r3, [r1, #6]
   84030:	794a      	ldrb	r2, [r1, #5]
   84032:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   84036:	7908      	ldrb	r0, [r1, #4]
   84038:	78cb      	ldrb	r3, [r1, #3]
   8403a:	041b      	lsls	r3, r3, #16
   8403c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   84040:	7848      	ldrb	r0, [r1, #1]
   84042:	4303      	orrs	r3, r0
   84044:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   84046:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   8404a:	bf28      	it	cs
   8404c:	f44f 7280 	movcs.w	r2, #256	; 0x100
   84050:	4925      	ldr	r1, [pc, #148]	; (840e8 <XPROGProtocol_Command+0x264>)
   84052:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   84056:	4b27      	ldr	r3, [pc, #156]	; (840f4 <XPROGProtocol_Command+0x270>)
   84058:	4798      	blx	r3
   8405a:	2800      	cmp	r0, #0
   8405c:	f47f af48 	bne.w	83ef0 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   84060:	4b1d      	ldr	r3, [pc, #116]	; (840d8 <XPROGProtocol_Command+0x254>)
   84062:	2203      	movs	r2, #3
   84064:	701a      	strb	r2, [r3, #0]
   84066:	e743      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   84068:	4b19      	ldr	r3, [pc, #100]	; (840d0 <XPROGProtocol_Command+0x24c>)
   8406a:	4798      	blx	r3
			break;
   8406c:	e740      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   8406e:	4b18      	ldr	r3, [pc, #96]	; (840d0 <XPROGProtocol_Command+0x24c>)
   84070:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   84072:	4b19      	ldr	r3, [pc, #100]	; (840d8 <XPROGProtocol_Command+0x254>)
   84074:	2200      	movs	r2, #0
   84076:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   84078:	4b13      	ldr	r3, [pc, #76]	; (840c8 <XPROGProtocol_Command+0x244>)
   8407a:	8999      	ldrh	r1, [r3, #12]
   8407c:	2901      	cmp	r1, #1
   8407e:	d90b      	bls.n	84098 <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   84080:	4b11      	ldr	r3, [pc, #68]	; (840c8 <XPROGProtocol_Command+0x244>)
   84082:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   84084:	7813      	ldrb	r3, [r2, #0]
   84086:	3b01      	subs	r3, #1
   84088:	2b07      	cmp	r3, #7
   8408a:	d85f      	bhi.n	8414c <XPROGProtocol_Command+0x2c8>
   8408c:	e8df f003 	tbb	[pc, r3]
   84090:	47433608 	.word	0x47433608
   84094:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   84098:	4b0f      	ldr	r3, [pc, #60]	; (840d8 <XPROGProtocol_Command+0x254>)
   8409a:	2201      	movs	r2, #1
   8409c:	701a      	strb	r2, [r3, #0]
		return;
   8409e:	e727      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   840a0:	2904      	cmp	r1, #4
   840a2:	d90c      	bls.n	840be <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   840a4:	7911      	ldrb	r1, [r2, #4]
   840a6:	78d3      	ldrb	r3, [r2, #3]
   840a8:	041b      	lsls	r3, r3, #16
   840aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   840ae:	7851      	ldrb	r1, [r2, #1]
   840b0:	430b      	orrs	r3, r1
   840b2:	7892      	ldrb	r2, [r2, #2]
   840b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   840b8:	4a0f      	ldr	r2, [pc, #60]	; (840f8 <XPROGProtocol_Command+0x274>)
   840ba:	6013      	str	r3, [r2, #0]
			break;
   840bc:	e718      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   840be:	4b06      	ldr	r3, [pc, #24]	; (840d8 <XPROGProtocol_Command+0x254>)
   840c0:	2201      	movs	r2, #1
   840c2:	701a      	strb	r2, [r3, #0]
				return;
   840c4:	e714      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
   840c6:	bf00      	nop
   840c8:	20002dec 	.word	0x20002dec
   840cc:	20002174 	.word	0x20002174
   840d0:	000834f9 	.word	0x000834f9
   840d4:	00083b21 	.word	0x00083b21
   840d8:	20002dd4 	.word	0x20002dd4
   840dc:	00083541 	.word	0x00083541
   840e0:	00083b9d 	.word	0x00083b9d
   840e4:	00083d8d 	.word	0x00083d8d
   840e8:	20002178 	.word	0x20002178
   840ec:	00083c6d 	.word	0x00083c6d
   840f0:	00083cb5 	.word	0x00083cb5
   840f4:	00083bd9 	.word	0x00083bd9
   840f8:	200005b0 	.word	0x200005b0
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   840fc:	2902      	cmp	r1, #2
   840fe:	d906      	bls.n	8410e <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   84100:	7891      	ldrb	r1, [r2, #2]
   84102:	7853      	ldrb	r3, [r2, #1]
   84104:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   84108:	4a30      	ldr	r2, [pc, #192]	; (841cc <XPROGProtocol_Command+0x348>)
   8410a:	8013      	strh	r3, [r2, #0]
			break;
   8410c:	e6f0      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   8410e:	4b30      	ldr	r3, [pc, #192]	; (841d0 <XPROGProtocol_Command+0x34c>)
   84110:	2201      	movs	r2, #1
   84112:	701a      	strb	r2, [r3, #0]
				return;
   84114:	e6ec      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   84116:	7852      	ldrb	r2, [r2, #1]
   84118:	4b2e      	ldr	r3, [pc, #184]	; (841d4 <XPROGProtocol_Command+0x350>)
   8411a:	701a      	strb	r2, [r3, #0]
			break;
   8411c:	e6e8      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   8411e:	7852      	ldrb	r2, [r2, #1]
   84120:	4b2d      	ldr	r3, [pc, #180]	; (841d8 <XPROGProtocol_Command+0x354>)
   84122:	701a      	strb	r2, [r3, #0]
			break;
   84124:	e6e4      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   84126:	2904      	cmp	r1, #4
   84128:	d803      	bhi.n	84132 <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   8412a:	4b29      	ldr	r3, [pc, #164]	; (841d0 <XPROGProtocol_Command+0x34c>)
   8412c:	2201      	movs	r2, #1
   8412e:	701a      	strb	r2, [r3, #0]
				return;
   84130:	e6de      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   84132:	7911      	ldrb	r1, [r2, #4]
   84134:	78d3      	ldrb	r3, [r2, #3]
   84136:	041b      	lsls	r3, r3, #16
   84138:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   8413c:	7851      	ldrb	r1, [r2, #1]
   8413e:	430b      	orrs	r3, r1
   84140:	7890      	ldrb	r0, [r2, #2]
   84142:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   84146:	4b25      	ldr	r3, [pc, #148]	; (841dc <XPROGProtocol_Command+0x358>)
   84148:	4798      	blx	r3
			break;
   8414a:	e6d1      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   8414c:	4b20      	ldr	r3, [pc, #128]	; (841d0 <XPROGProtocol_Command+0x34c>)
   8414e:	2201      	movs	r2, #1
   84150:	701a      	strb	r2, [r3, #0]
			break;
   84152:	e6cd      	b.n	83ef0 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   84154:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   84156:	4b22      	ldr	r3, [pc, #136]	; (841e0 <XPROGProtocol_Command+0x35c>)
   84158:	88db      	ldrh	r3, [r3, #6]
   8415a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   8415e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   84162:	dc27      	bgt.n	841b4 <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   84164:	491e      	ldr	r1, [pc, #120]	; (841e0 <XPROGProtocol_Command+0x35c>)
   84166:	4a1f      	ldr	r2, [pc, #124]	; (841e4 <XPROGProtocol_Command+0x360>)
   84168:	4402      	add	r2, r0
   8416a:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8416c:	818b      	strh	r3, [r1, #12]
			return true;
   8416e:	2001      	movs	r0, #1
   84170:	e6c1      	b.n	83ef6 <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   84172:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   84174:	4b1a      	ldr	r3, [pc, #104]	; (841e0 <XPROGProtocol_Command+0x35c>)
   84176:	88da      	ldrh	r2, [r3, #6]
   84178:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   8417c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   84180:	dd01      	ble.n	84186 <XPROGProtocol_Command+0x302>
				return false;
   84182:	2000      	movs	r0, #0
   84184:	e6b7      	b.n	83ef6 <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   84186:	6899      	ldr	r1, [r3, #8]
   84188:	4b16      	ldr	r3, [pc, #88]	; (841e4 <XPROGProtocol_Command+0x360>)
   8418a:	4418      	add	r0, r3
   8418c:	4b16      	ldr	r3, [pc, #88]	; (841e8 <XPROGProtocol_Command+0x364>)
   8418e:	4798      	blx	r3
			return true;
   84190:	2001      	movs	r0, #1
   84192:	e6b0      	b.n	83ef6 <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   84194:	4a15      	ldr	r2, [pc, #84]	; (841ec <XPROGProtocol_Command+0x368>)
   84196:	4b0e      	ldr	r3, [pc, #56]	; (841d0 <XPROGProtocol_Command+0x34c>)
   84198:	781b      	ldrb	r3, [r3, #0]
   8419a:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   8419c:	4b14      	ldr	r3, [pc, #80]	; (841f0 <XPROGProtocol_Command+0x36c>)
   8419e:	681b      	ldr	r3, [r3, #0]
   841a0:	fab3 f383 	clz	r3, r3
   841a4:	095b      	lsrs	r3, r3, #5
   841a6:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   841a8:	4b0d      	ldr	r3, [pc, #52]	; (841e0 <XPROGProtocol_Command+0x35c>)
   841aa:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   841ac:	2203      	movs	r2, #3
   841ae:	819a      	strh	r2, [r3, #12]
			return true;
   841b0:	2001      	movs	r0, #1
   841b2:	e6a0      	b.n	83ef6 <XPROGProtocol_Command+0x72>
				return false;
   841b4:	2000      	movs	r0, #0
   841b6:	e69e      	b.n	83ef6 <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   841b8:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   841ba:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   841bc:	2224      	movs	r2, #36	; 0x24
   841be:	e70f      	b.n	83fe0 <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   841c0:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   841c2:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   841c4:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   841c6:	e70b      	b.n	83fe0 <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   841c8:	204c      	movs	r0, #76	; 0x4c
   841ca:	e6ff      	b.n	83fcc <XPROGProtocol_Command+0x148>
   841cc:	200005ac 	.word	0x200005ac
   841d0:	20002dd4 	.word	0x20002dd4
   841d4:	200005b4 	.word	0x200005b4
   841d8:	200005b5 	.word	0x200005b5
   841dc:	00083489 	.word	0x00083489
   841e0:	20002dec 	.word	0x20002dec
   841e4:	20002178 	.word	0x20002178
   841e8:	00087835 	.word	0x00087835
   841ec:	20002174 	.word	0x20002174
   841f0:	2000265c 	.word	0x2000265c

000841f4 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   841f4:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   841f6:	4d0b      	ldr	r5, [pc, #44]	; (84224 <XPROGTarget_SetRxMode+0x30>)
   841f8:	4c0b      	ldr	r4, [pc, #44]	; (84228 <XPROGTarget_SetRxMode+0x34>)
   841fa:	4628      	mov	r0, r5
   841fc:	47a0      	blx	r4
   841fe:	2800      	cmp	r0, #0
   84200:	d0fb      	beq.n	841fa <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   84202:	4c08      	ldr	r4, [pc, #32]	; (84224 <XPROGTarget_SetRxMode+0x30>)
   84204:	4620      	mov	r0, r4
   84206:	4b09      	ldr	r3, [pc, #36]	; (8422c <XPROGTarget_SetRxMode+0x38>)
   84208:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   8420a:	4620      	mov	r0, r4
   8420c:	4b08      	ldr	r3, [pc, #32]	; (84230 <XPROGTarget_SetRxMode+0x3c>)
   8420e:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84210:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84214:	2014      	movs	r0, #20
   84216:	4b07      	ldr	r3, [pc, #28]	; (84234 <XPROGTarget_SetRxMode+0x40>)
   84218:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   8421a:	4b07      	ldr	r3, [pc, #28]	; (84238 <XPROGTarget_SetRxMode+0x44>)
   8421c:	2200      	movs	r2, #0
   8421e:	701a      	strb	r2, [r3, #0]
}
   84220:	bd38      	pop	{r3, r4, r5, pc}
   84222:	bf00      	nop
   84224:	40094000 	.word	0x40094000
   84228:	00086e01 	.word	0x00086e01
   8422c:	00086dc3 	.word	0x00086dc3
   84230:	00086dcd 	.word	0x00086dcd
   84234:	0008516d 	.word	0x0008516d
   84238:	20002278 	.word	0x20002278

0008423c <XPROGTarget_SetTxMode>:
{
   8423c:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8423e:	2518      	movs	r5, #24
   84240:	4c14      	ldr	r4, [pc, #80]	; (84294 <XPROGTarget_SetTxMode+0x58>)
   84242:	4e15      	ldr	r6, [pc, #84]	; (84298 <XPROGTarget_SetTxMode+0x5c>)
   84244:	4628      	mov	r0, r5
   84246:	47a0      	blx	r4
   84248:	b110      	cbz	r0, 84250 <XPROGTarget_SetTxMode+0x14>
   8424a:	6833      	ldr	r3, [r6, #0]
   8424c:	2b00      	cmp	r3, #0
   8424e:	d1f9      	bne.n	84244 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84250:	2518      	movs	r5, #24
   84252:	4c10      	ldr	r4, [pc, #64]	; (84294 <XPROGTarget_SetTxMode+0x58>)
   84254:	4e10      	ldr	r6, [pc, #64]	; (84298 <XPROGTarget_SetTxMode+0x5c>)
   84256:	4628      	mov	r0, r5
   84258:	47a0      	blx	r4
   8425a:	b910      	cbnz	r0, 84262 <XPROGTarget_SetTxMode+0x26>
   8425c:	6833      	ldr	r3, [r6, #0]
   8425e:	2b00      	cmp	r3, #0
   84260:	d1f9      	bne.n	84256 <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84262:	2518      	movs	r5, #24
   84264:	4c0b      	ldr	r4, [pc, #44]	; (84294 <XPROGTarget_SetTxMode+0x58>)
   84266:	4e0c      	ldr	r6, [pc, #48]	; (84298 <XPROGTarget_SetTxMode+0x5c>)
   84268:	4628      	mov	r0, r5
   8426a:	47a0      	blx	r4
   8426c:	b110      	cbz	r0, 84274 <XPROGTarget_SetTxMode+0x38>
   8426e:	6833      	ldr	r3, [r6, #0]
   84270:	2b00      	cmp	r3, #0
   84272:	d1f9      	bne.n	84268 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   84274:	4c09      	ldr	r4, [pc, #36]	; (8429c <XPROGTarget_SetTxMode+0x60>)
   84276:	4620      	mov	r0, r4
   84278:	4b09      	ldr	r3, [pc, #36]	; (842a0 <XPROGTarget_SetTxMode+0x64>)
   8427a:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   8427c:	4620      	mov	r0, r4
   8427e:	4b09      	ldr	r3, [pc, #36]	; (842a4 <XPROGTarget_SetTxMode+0x68>)
   84280:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   84282:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84286:	2014      	movs	r0, #20
   84288:	4b07      	ldr	r3, [pc, #28]	; (842a8 <XPROGTarget_SetTxMode+0x6c>)
   8428a:	4798      	blx	r3
	IsSending = true;
   8428c:	4b07      	ldr	r3, [pc, #28]	; (842ac <XPROGTarget_SetTxMode+0x70>)
   8428e:	2201      	movs	r2, #1
   84290:	701a      	strb	r2, [r3, #0]
}
   84292:	bd70      	pop	{r4, r5, r6, pc}
   84294:	0008511b 	.word	0x0008511b
   84298:	2000265c 	.word	0x2000265c
   8429c:	40094000 	.word	0x40094000
   842a0:	00086dd3 	.word	0x00086dd3
   842a4:	00086dbd 	.word	0x00086dbd
   842a8:	0008516d 	.word	0x0008516d
   842ac:	20002278 	.word	0x20002278

000842b0 <XPROGTarget_DisableTargetPDI>:
{
   842b0:	b510      	push	{r4, lr}
	if (IsSending)
   842b2:	4b0f      	ldr	r3, [pc, #60]	; (842f0 <XPROGTarget_DisableTargetPDI+0x40>)
   842b4:	781b      	ldrb	r3, [r3, #0]
   842b6:	b9bb      	cbnz	r3, 842e8 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   842b8:	4c0e      	ldr	r4, [pc, #56]	; (842f4 <XPROGTarget_DisableTargetPDI+0x44>)
   842ba:	4620      	mov	r0, r4
   842bc:	4b0e      	ldr	r3, [pc, #56]	; (842f8 <XPROGTarget_DisableTargetPDI+0x48>)
   842be:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   842c0:	4620      	mov	r0, r4
   842c2:	4b0e      	ldr	r3, [pc, #56]	; (842fc <XPROGTarget_DisableTargetPDI+0x4c>)
   842c4:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   842c6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   842ca:	2018      	movs	r0, #24
   842cc:	4c0c      	ldr	r4, [pc, #48]	; (84300 <XPROGTarget_DisableTargetPDI+0x50>)
   842ce:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   842d0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   842d4:	2015      	movs	r0, #21
   842d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   842d8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   842dc:	2014      	movs	r0, #20
   842de:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   842e0:	200e      	movs	r0, #14
   842e2:	4b08      	ldr	r3, [pc, #32]	; (84304 <XPROGTarget_DisableTargetPDI+0x54>)
   842e4:	4798      	blx	r3
}
   842e6:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   842e8:	4b07      	ldr	r3, [pc, #28]	; (84308 <XPROGTarget_DisableTargetPDI+0x58>)
   842ea:	4798      	blx	r3
   842ec:	e7e4      	b.n	842b8 <XPROGTarget_DisableTargetPDI+0x8>
   842ee:	bf00      	nop
   842f0:	20002278 	.word	0x20002278
   842f4:	40094000 	.word	0x40094000
   842f8:	00086dd3 	.word	0x00086dd3
   842fc:	00086dc3 	.word	0x00086dc3
   84300:	0008516d 	.word	0x0008516d
   84304:	000854e5 	.word	0x000854e5
   84308:	000841f5 	.word	0x000841f5

0008430c <XPROGTarget_SendByte>:
{
   8430c:	b510      	push	{r4, lr}
   8430e:	4604      	mov	r4, r0
	if (!(IsSending))
   84310:	4b05      	ldr	r3, [pc, #20]	; (84328 <XPROGTarget_SendByte+0x1c>)
   84312:	781b      	ldrb	r3, [r3, #0]
   84314:	b123      	cbz	r3, 84320 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   84316:	4621      	mov	r1, r4
   84318:	4804      	ldr	r0, [pc, #16]	; (8432c <XPROGTarget_SendByte+0x20>)
   8431a:	4b05      	ldr	r3, [pc, #20]	; (84330 <XPROGTarget_SendByte+0x24>)
   8431c:	4798      	blx	r3
}
   8431e:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   84320:	4b04      	ldr	r3, [pc, #16]	; (84334 <XPROGTarget_SendByte+0x28>)
   84322:	4798      	blx	r3
   84324:	e7f7      	b.n	84316 <XPROGTarget_SendByte+0xa>
   84326:	bf00      	nop
   84328:	20002278 	.word	0x20002278
   8432c:	40094000 	.word	0x40094000
   84330:	00086e1d 	.word	0x00086e1d
   84334:	0008423d 	.word	0x0008423d

00084338 <XPROGTarget_ReceiveByte>:
{
   84338:	b570      	push	{r4, r5, r6, lr}
   8433a:	b082      	sub	sp, #8
	if (IsSending)
   8433c:	4b0a      	ldr	r3, [pc, #40]	; (84368 <XPROGTarget_ReceiveByte+0x30>)
   8433e:	781b      	ldrb	r3, [r3, #0]
   84340:	b973      	cbnz	r3, 84360 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   84342:	4d0a      	ldr	r5, [pc, #40]	; (8436c <XPROGTarget_ReceiveByte+0x34>)
   84344:	4c0a      	ldr	r4, [pc, #40]	; (84370 <XPROGTarget_ReceiveByte+0x38>)
   84346:	4e0b      	ldr	r6, [pc, #44]	; (84374 <XPROGTarget_ReceiveByte+0x3c>)
   84348:	a901      	add	r1, sp, #4
   8434a:	4628      	mov	r0, r5
   8434c:	47a0      	blx	r4
   8434e:	2801      	cmp	r0, #1
   84350:	d102      	bne.n	84358 <XPROGTarget_ReceiveByte+0x20>
   84352:	6833      	ldr	r3, [r6, #0]
   84354:	2b00      	cmp	r3, #0
   84356:	d1f7      	bne.n	84348 <XPROGTarget_ReceiveByte+0x10>
}
   84358:	f89d 0004 	ldrb.w	r0, [sp, #4]
   8435c:	b002      	add	sp, #8
   8435e:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   84360:	4b05      	ldr	r3, [pc, #20]	; (84378 <XPROGTarget_ReceiveByte+0x40>)
   84362:	4798      	blx	r3
   84364:	e7ed      	b.n	84342 <XPROGTarget_ReceiveByte+0xa>
   84366:	bf00      	nop
   84368:	20002278 	.word	0x20002278
   8436c:	40094000 	.word	0x40094000
   84370:	00086e2f 	.word	0x00086e2f
   84374:	2000265c 	.word	0x2000265c
   84378:	000841f5 	.word	0x000841f5

0008437c <XPROGTarget_SendIdle>:
{
   8437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   8437e:	4b12      	ldr	r3, [pc, #72]	; (843c8 <XPROGTarget_SendIdle+0x4c>)
   84380:	781b      	ldrb	r3, [r3, #0]
   84382:	b123      	cbz	r3, 8438e <XPROGTarget_SendIdle+0x12>
{
   84384:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84386:	2518      	movs	r5, #24
   84388:	4c10      	ldr	r4, [pc, #64]	; (843cc <XPROGTarget_SendIdle+0x50>)
   8438a:	4e11      	ldr	r6, [pc, #68]	; (843d0 <XPROGTarget_SendIdle+0x54>)
   8438c:	e006      	b.n	8439c <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   8438e:	4b11      	ldr	r3, [pc, #68]	; (843d4 <XPROGTarget_SendIdle+0x58>)
   84390:	4798      	blx	r3
   84392:	e7f7      	b.n	84384 <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   84394:	3f01      	subs	r7, #1
   84396:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   8439a:	d013      	beq.n	843c4 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8439c:	4628      	mov	r0, r5
   8439e:	47a0      	blx	r4
   843a0:	b110      	cbz	r0, 843a8 <XPROGTarget_SendIdle+0x2c>
   843a2:	6833      	ldr	r3, [r6, #0]
   843a4:	2b00      	cmp	r3, #0
   843a6:	d1f9      	bne.n	8439c <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   843a8:	4628      	mov	r0, r5
   843aa:	47a0      	blx	r4
   843ac:	b910      	cbnz	r0, 843b4 <XPROGTarget_SendIdle+0x38>
   843ae:	6833      	ldr	r3, [r6, #0]
   843b0:	2b00      	cmp	r3, #0
   843b2:	d1f9      	bne.n	843a8 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   843b4:	4628      	mov	r0, r5
   843b6:	47a0      	blx	r4
   843b8:	2800      	cmp	r0, #0
   843ba:	d0eb      	beq.n	84394 <XPROGTarget_SendIdle+0x18>
   843bc:	6833      	ldr	r3, [r6, #0]
   843be:	2b00      	cmp	r3, #0
   843c0:	d1f8      	bne.n	843b4 <XPROGTarget_SendIdle+0x38>
   843c2:	e7e7      	b.n	84394 <XPROGTarget_SendIdle+0x18>
}
   843c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   843c6:	bf00      	nop
   843c8:	20002278 	.word	0x20002278
   843cc:	0008511b 	.word	0x0008511b
   843d0:	2000265c 	.word	0x2000265c
   843d4:	0008423d 	.word	0x0008423d

000843d8 <XPROGTarget_EnableTargetPDI>:
{
   843d8:	b570      	push	{r4, r5, r6, lr}
   843da:	b086      	sub	sp, #24
	IsSending = false;
   843dc:	2500      	movs	r5, #0
   843de:	4b19      	ldr	r3, [pc, #100]	; (84444 <XPROGTarget_EnableTargetPDI+0x6c>)
   843e0:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   843e2:	200e      	movs	r0, #14
   843e4:	4b18      	ldr	r3, [pc, #96]	; (84448 <XPROGTarget_EnableTargetPDI+0x70>)
   843e6:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   843e8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   843ec:	2014      	movs	r0, #20
   843ee:	4c17      	ldr	r4, [pc, #92]	; (8444c <XPROGTarget_EnableTargetPDI+0x74>)
   843f0:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   843f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   843f6:	2015      	movs	r0, #21
   843f8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   843fa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   843fe:	2018      	movs	r0, #24
   84400:	47a0      	blx	r4
	delay_us(50);
   84402:	f240 1057 	movw	r0, #343	; 0x157
   84406:	4e12      	ldr	r6, [pc, #72]	; (84450 <XPROGTarget_EnableTargetPDI+0x78>)
   84408:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   8440a:	2014      	movs	r0, #20
   8440c:	4b11      	ldr	r3, [pc, #68]	; (84454 <XPROGTarget_EnableTargetPDI+0x7c>)
   8440e:	4798      	blx	r3
	delay_us(10);
   84410:	2045      	movs	r0, #69	; 0x45
   84412:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   84414:	9502      	str	r5, [sp, #8]
   84416:	9504      	str	r5, [sp, #16]
   84418:	9505      	str	r5, [sp, #20]
   8441a:	4b0f      	ldr	r3, [pc, #60]	; (84458 <XPROGTarget_EnableTargetPDI+0x80>)
   8441c:	9300      	str	r3, [sp, #0]
   8441e:	23c0      	movs	r3, #192	; 0xc0
   84420:	9301      	str	r3, [sp, #4]
   84422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   84426:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   84428:	4a0c      	ldr	r2, [pc, #48]	; (8445c <XPROGTarget_EnableTargetPDI+0x84>)
   8442a:	4669      	mov	r1, sp
   8442c:	480c      	ldr	r0, [pc, #48]	; (84460 <XPROGTarget_EnableTargetPDI+0x88>)
   8442e:	4b0d      	ldr	r3, [pc, #52]	; (84464 <XPROGTarget_EnableTargetPDI+0x8c>)
   84430:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   84432:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84436:	2018      	movs	r0, #24
   84438:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   8443a:	4c0b      	ldr	r4, [pc, #44]	; (84468 <XPROGTarget_EnableTargetPDI+0x90>)
   8443c:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   8443e:	47a0      	blx	r4
}
   84440:	b006      	add	sp, #24
   84442:	bd70      	pop	{r4, r5, r6, pc}
   84444:	20002278 	.word	0x20002278
   84448:	000854b1 	.word	0x000854b1
   8444c:	0008516d 	.word	0x0008516d
   84450:	20000089 	.word	0x20000089
   84454:	00085137 	.word	0x00085137
   84458:	0007a120 	.word	0x0007a120
   8445c:	0b71b000 	.word	0x0b71b000
   84460:	40094000 	.word	0x40094000
   84464:	00086b1d 	.word	0x00086b1d
   84468:	0008437d 	.word	0x0008437d

0008446c <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   8446c:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   8446e:	2006      	movs	r0, #6
   84470:	4c02      	ldr	r4, [pc, #8]	; (8447c <ui_init+0x10>)
   84472:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84474:	2007      	movs	r0, #7
   84476:	47a0      	blx	r4
}
   84478:	bd10      	pop	{r4, pc}
   8447a:	bf00      	nop
   8447c:	00084ff9 	.word	0x00084ff9

00084480 <ui_powerdown>:

void ui_powerdown(void)
{
   84480:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   84482:	2006      	movs	r0, #6
   84484:	4c03      	ldr	r4, [pc, #12]	; (84494 <ui_powerdown+0x14>)
   84486:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84488:	2007      	movs	r0, #7
   8448a:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   8448c:	201d      	movs	r0, #29
   8448e:	4b02      	ldr	r3, [pc, #8]	; (84498 <ui_powerdown+0x18>)
   84490:	4798      	blx	r3
		
}
   84492:	bd10      	pop	{r4, pc}
   84494:	00084ff9 	.word	0x00084ff9
   84498:	00085151 	.word	0x00085151

0008449c <ui_wakeup>:

void ui_wakeup(void)
{
   8449c:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   8449e:	2006      	movs	r0, #6
   844a0:	4b02      	ldr	r3, [pc, #8]	; (844ac <ui_wakeup+0x10>)
   844a2:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   844a4:	201d      	movs	r0, #29
   844a6:	4b02      	ldr	r3, [pc, #8]	; (844b0 <ui_wakeup+0x14>)
   844a8:	4798      	blx	r3
}
   844aa:	bd08      	pop	{r3, pc}
   844ac:	0008501d 	.word	0x0008501d
   844b0:	00085137 	.word	0x00085137

000844b4 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   844b4:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   844b6:	4b0b      	ldr	r3, [pc, #44]	; (844e4 <ui_process+0x30>)
   844b8:	fba3 2300 	umull	r2, r3, r3, r0
   844bc:	099b      	lsrs	r3, r3, #6
   844be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   844c2:	fb02 0013 	mls	r0, r2, r3, r0
   844c6:	b280      	uxth	r0, r0
   844c8:	b118      	cbz	r0, 844d2 <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   844ca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   844ce:	d004      	beq.n	844da <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
}
   844d0:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   844d2:	2006      	movs	r0, #6
   844d4:	4b04      	ldr	r3, [pc, #16]	; (844e8 <ui_process+0x34>)
   844d6:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   844d8:	e7fa      	b.n	844d0 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   844da:	2006      	movs	r0, #6
   844dc:	4b03      	ldr	r3, [pc, #12]	; (844ec <ui_process+0x38>)
   844de:	4798      	blx	r3
}
   844e0:	e7f6      	b.n	844d0 <ui_process+0x1c>
   844e2:	bf00      	nop
   844e4:	10624dd3 	.word	0x10624dd3
   844e8:	0008501d 	.word	0x0008501d
   844ec:	00084ff9 	.word	0x00084ff9

000844f0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   844f0:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   844f2:	203e      	movs	r0, #62	; 0x3e
   844f4:	4b07      	ldr	r3, [pc, #28]	; (84514 <sysclk_enable_usb+0x24>)
   844f6:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   844f8:	4c07      	ldr	r4, [pc, #28]	; (84518 <sysclk_enable_usb+0x28>)
   844fa:	47a0      	blx	r4
   844fc:	2800      	cmp	r0, #0
   844fe:	d0fc      	beq.n	844fa <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   84500:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   84504:	4b05      	ldr	r3, [pc, #20]	; (8451c <sysclk_enable_usb+0x2c>)
   84506:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   84508:	4c05      	ldr	r4, [pc, #20]	; (84520 <sysclk_enable_usb+0x30>)
   8450a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8450c:	2800      	cmp	r0, #0
   8450e:	d0fc      	beq.n	8450a <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   84510:	bd10      	pop	{r4, pc}
   84512:	bf00      	nop
   84514:	00085419 	.word	0x00085419
   84518:	00085441 	.word	0x00085441
   8451c:	400e0400 	.word	0x400e0400
   84520:	000854a1 	.word	0x000854a1

00084524 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   84524:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   84526:	4812      	ldr	r0, [pc, #72]	; (84570 <sysclk_init+0x4c>)
   84528:	4b12      	ldr	r3, [pc, #72]	; (84574 <sysclk_init+0x50>)
   8452a:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8452c:	203e      	movs	r0, #62	; 0x3e
   8452e:	4b12      	ldr	r3, [pc, #72]	; (84578 <sysclk_init+0x54>)
   84530:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   84532:	4c12      	ldr	r4, [pc, #72]	; (8457c <sysclk_init+0x58>)
   84534:	47a0      	blx	r4
   84536:	2800      	cmp	r0, #0
   84538:	d0fc      	beq.n	84534 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   8453a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8453e:	4b10      	ldr	r3, [pc, #64]	; (84580 <sysclk_init+0x5c>)
   84540:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   84542:	4c10      	ldr	r4, [pc, #64]	; (84584 <sysclk_init+0x60>)
   84544:	47a0      	blx	r4
   84546:	2800      	cmp	r0, #0
   84548:	d0fc      	beq.n	84544 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   8454a:	4b0f      	ldr	r3, [pc, #60]	; (84588 <sysclk_init+0x64>)
   8454c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8454e:	4a0f      	ldr	r2, [pc, #60]	; (8458c <sysclk_init+0x68>)
   84550:	4b0f      	ldr	r3, [pc, #60]	; (84590 <sysclk_init+0x6c>)
   84552:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   84554:	4c0f      	ldr	r4, [pc, #60]	; (84594 <sysclk_init+0x70>)
   84556:	47a0      	blx	r4
   84558:	2800      	cmp	r0, #0
   8455a:	d0fc      	beq.n	84556 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8455c:	2010      	movs	r0, #16
   8455e:	4b0e      	ldr	r3, [pc, #56]	; (84598 <sysclk_init+0x74>)
   84560:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   84562:	4b0e      	ldr	r3, [pc, #56]	; (8459c <sysclk_init+0x78>)
   84564:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   84566:	4802      	ldr	r0, [pc, #8]	; (84570 <sysclk_init+0x4c>)
   84568:	4b02      	ldr	r3, [pc, #8]	; (84574 <sysclk_init+0x50>)
   8456a:	4798      	blx	r3
   8456c:	bd10      	pop	{r4, pc}
   8456e:	bf00      	nop
   84570:	05b8d800 	.word	0x05b8d800
   84574:	2000013d 	.word	0x2000013d
   84578:	00085419 	.word	0x00085419
   8457c:	00085441 	.word	0x00085441
   84580:	00085461 	.word	0x00085461
   84584:	00085451 	.word	0x00085451
   84588:	00085481 	.word	0x00085481
   8458c:	200f3f01 	.word	0x200f3f01
   84590:	400e0400 	.word	0x400e0400
   84594:	00085491 	.word	0x00085491
   84598:	000853b5 	.word	0x000853b5
   8459c:	00086f4d 	.word	0x00086f4d

000845a0 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   845a0:	4b01      	ldr	r3, [pc, #4]	; (845a8 <udi_vendor_getsetting+0x8>)
   845a2:	7818      	ldrb	r0, [r3, #0]
   845a4:	4770      	bx	lr
   845a6:	bf00      	nop
   845a8:	20002279 	.word	0x20002279

000845ac <udi_vendor_enable>:
{
   845ac:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   845ae:	4b05      	ldr	r3, [pc, #20]	; (845c4 <udi_vendor_enable+0x18>)
   845b0:	4798      	blx	r3
   845b2:	78c3      	ldrb	r3, [r0, #3]
   845b4:	4a04      	ldr	r2, [pc, #16]	; (845c8 <udi_vendor_enable+0x1c>)
   845b6:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   845b8:	b10b      	cbz	r3, 845be <udi_vendor_enable+0x12>
	return true;
   845ba:	2001      	movs	r0, #1
}
   845bc:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   845be:	4b03      	ldr	r3, [pc, #12]	; (845cc <udi_vendor_enable+0x20>)
   845c0:	4798      	blx	r3
   845c2:	e7fb      	b.n	845bc <udi_vendor_enable+0x10>
   845c4:	000847e1 	.word	0x000847e1
   845c8:	20002279 	.word	0x20002279
   845cc:	00083051 	.word	0x00083051

000845d0 <udi_vendor_disable>:
{
   845d0:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   845d2:	4b03      	ldr	r3, [pc, #12]	; (845e0 <udi_vendor_disable+0x10>)
   845d4:	781b      	ldrb	r3, [r3, #0]
   845d6:	b103      	cbz	r3, 845da <udi_vendor_disable+0xa>
}
   845d8:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   845da:	4b02      	ldr	r3, [pc, #8]	; (845e4 <udi_vendor_disable+0x14>)
   845dc:	4798      	blx	r3
}
   845de:	e7fb      	b.n	845d8 <udi_vendor_disable+0x8>
   845e0:	20002279 	.word	0x20002279
   845e4:	00083081 	.word	0x00083081

000845e8 <udi_vendor_setup>:
{
   845e8:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   845ea:	4a0c      	ldr	r2, [pc, #48]	; (8461c <udi_vendor_setup+0x34>)
   845ec:	7813      	ldrb	r3, [r2, #0]
   845ee:	f992 2000 	ldrsb.w	r2, [r2]
   845f2:	2a00      	cmp	r2, #0
   845f4:	db06      	blt.n	84604 <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   845f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   845fa:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   845fc:	bf18      	it	ne
   845fe:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84600:	d009      	beq.n	84616 <udi_vendor_setup+0x2e>
}
   84602:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84604:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84608:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   8460a:	bf18      	it	ne
   8460c:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8460e:	d1f8      	bne.n	84602 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84610:	4b03      	ldr	r3, [pc, #12]	; (84620 <udi_vendor_setup+0x38>)
   84612:	4798      	blx	r3
   84614:	e7f5      	b.n	84602 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84616:	4b03      	ldr	r3, [pc, #12]	; (84624 <udi_vendor_setup+0x3c>)
   84618:	4798      	blx	r3
   8461a:	e7f2      	b.n	84602 <udi_vendor_setup+0x1a>
   8461c:	20002dec 	.word	0x20002dec
   84620:	000831cd 	.word	0x000831cd
   84624:	0008308d 	.word	0x0008308d

00084628 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84628:	b510      	push	{r4, lr}
   8462a:	b082      	sub	sp, #8
   8462c:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   8462e:	9200      	str	r2, [sp, #0]
   84630:	4602      	mov	r2, r0
   84632:	2100      	movs	r1, #0
   84634:	2081      	movs	r0, #129	; 0x81
   84636:	4c02      	ldr	r4, [pc, #8]	; (84640 <udi_vendor_bulk_in_run+0x18>)
   84638:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8463a:	b002      	add	sp, #8
   8463c:	bd10      	pop	{r4, pc}
   8463e:	bf00      	nop
   84640:	00086551 	.word	0x00086551

00084644 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84644:	b510      	push	{r4, lr}
   84646:	b082      	sub	sp, #8
   84648:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   8464a:	9200      	str	r2, [sp, #0]
   8464c:	4602      	mov	r2, r0
   8464e:	2100      	movs	r1, #0
   84650:	2002      	movs	r0, #2
   84652:	4c02      	ldr	r4, [pc, #8]	; (8465c <udi_vendor_bulk_out_run+0x18>)
   84654:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   84656:	b002      	add	sp, #8
   84658:	bd10      	pop	{r4, pc}
   8465a:	bf00      	nop
   8465c:	00086551 	.word	0x00086551

00084660 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   84660:	4b0b      	ldr	r3, [pc, #44]	; (84690 <udc_next_desc_in_iface+0x30>)
   84662:	681b      	ldr	r3, [r3, #0]
   84664:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   84666:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   84668:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8466a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8466c:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8466e:	4290      	cmp	r0, r2
   84670:	d20a      	bcs.n	84688 <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   84672:	7843      	ldrb	r3, [r0, #1]
   84674:	2b04      	cmp	r3, #4
   84676:	d009      	beq.n	8468c <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   84678:	428b      	cmp	r3, r1
   8467a:	d008      	beq.n	8468e <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   8467c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8467e:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   84680:	4290      	cmp	r0, r2
   84682:	d3f6      	bcc.n	84672 <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   84684:	2000      	movs	r0, #0
   84686:	4770      	bx	lr
   84688:	2000      	movs	r0, #0
   8468a:	4770      	bx	lr
   8468c:	2000      	movs	r0, #0
}
   8468e:	4770      	bx	lr
   84690:	20002280 	.word	0x20002280

00084694 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   84694:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   84696:	4b03      	ldr	r3, [pc, #12]	; (846a4 <udc_valid_address+0x10>)
   84698:	7898      	ldrb	r0, [r3, #2]
   8469a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8469e:	4b02      	ldr	r3, [pc, #8]	; (846a8 <udc_valid_address+0x14>)
   846a0:	4798      	blx	r3
}
   846a2:	bd08      	pop	{r3, pc}
   846a4:	20002dec 	.word	0x20002dec
   846a8:	000862a5 	.word	0x000862a5

000846ac <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   846ac:	4b18      	ldr	r3, [pc, #96]	; (84710 <udc_update_iface_desc+0x64>)
   846ae:	781b      	ldrb	r3, [r3, #0]
   846b0:	b33b      	cbz	r3, 84702 <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   846b2:	4b18      	ldr	r3, [pc, #96]	; (84714 <udc_update_iface_desc+0x68>)
   846b4:	681b      	ldr	r3, [r3, #0]
   846b6:	681b      	ldr	r3, [r3, #0]
   846b8:	791a      	ldrb	r2, [r3, #4]
   846ba:	4282      	cmp	r2, r0
   846bc:	d923      	bls.n	84706 <udc_update_iface_desc+0x5a>
{
   846be:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   846c0:	4a15      	ldr	r2, [pc, #84]	; (84718 <udc_update_iface_desc+0x6c>)
   846c2:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   846c4:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   846c6:	441c      	add	r4, r3
	while (ptr_end_desc >
   846c8:	42a3      	cmp	r3, r4
   846ca:	d21e      	bcs.n	8470a <udc_update_iface_desc+0x5e>
   846cc:	2500      	movs	r5, #0
   846ce:	2601      	movs	r6, #1
   846d0:	e004      	b.n	846dc <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   846d2:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   846d4:	4413      	add	r3, r2
	while (ptr_end_desc >
   846d6:	4635      	mov	r5, r6
   846d8:	42a3      	cmp	r3, r4
   846da:	d20d      	bcs.n	846f8 <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   846dc:	785a      	ldrb	r2, [r3, #1]
   846de:	2a04      	cmp	r2, #4
   846e0:	d1f7      	bne.n	846d2 <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   846e2:	789a      	ldrb	r2, [r3, #2]
   846e4:	4282      	cmp	r2, r0
   846e6:	d1f4      	bne.n	846d2 <udc_update_iface_desc+0x26>
   846e8:	78da      	ldrb	r2, [r3, #3]
   846ea:	428a      	cmp	r2, r1
   846ec:	d1f1      	bne.n	846d2 <udc_update_iface_desc+0x26>
   846ee:	b10d      	cbz	r5, 846f4 <udc_update_iface_desc+0x48>
   846f0:	4a09      	ldr	r2, [pc, #36]	; (84718 <udc_update_iface_desc+0x6c>)
   846f2:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   846f4:	2001      	movs	r0, #1
   846f6:	e002      	b.n	846fe <udc_update_iface_desc+0x52>
   846f8:	4a07      	ldr	r2, [pc, #28]	; (84718 <udc_update_iface_desc+0x6c>)
   846fa:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   846fc:	2000      	movs	r0, #0
}
   846fe:	bc70      	pop	{r4, r5, r6}
   84700:	4770      	bx	lr
		return false;
   84702:	2000      	movs	r0, #0
   84704:	4770      	bx	lr
		return false;
   84706:	2000      	movs	r0, #0
}
   84708:	4770      	bx	lr
	return false; // Interface not found
   8470a:	2000      	movs	r0, #0
   8470c:	e7f7      	b.n	846fe <udc_update_iface_desc+0x52>
   8470e:	bf00      	nop
   84710:	2000227f 	.word	0x2000227f
   84714:	20002280 	.word	0x20002280
   84718:	20002284 	.word	0x20002284

0008471c <udc_iface_disable>:
{
   8471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84720:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   84722:	2100      	movs	r1, #0
   84724:	4b12      	ldr	r3, [pc, #72]	; (84770 <udc_iface_disable+0x54>)
   84726:	4798      	blx	r3
   84728:	4680      	mov	r8, r0
   8472a:	b1f0      	cbz	r0, 8476a <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8472c:	4b11      	ldr	r3, [pc, #68]	; (84774 <udc_iface_disable+0x58>)
   8472e:	681b      	ldr	r3, [r3, #0]
   84730:	685b      	ldr	r3, [r3, #4]
   84732:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84736:	f8d9 300c 	ldr.w	r3, [r9, #12]
   8473a:	4798      	blx	r3
   8473c:	4601      	mov	r1, r0
   8473e:	4620      	mov	r0, r4
   84740:	4b0b      	ldr	r3, [pc, #44]	; (84770 <udc_iface_disable+0x54>)
   84742:	4798      	blx	r3
   84744:	4680      	mov	r8, r0
   84746:	b180      	cbz	r0, 8476a <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84748:	4b0b      	ldr	r3, [pc, #44]	; (84778 <udc_iface_disable+0x5c>)
   8474a:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   8474c:	2605      	movs	r6, #5
   8474e:	4d0b      	ldr	r5, [pc, #44]	; (8477c <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   84750:	4f0b      	ldr	r7, [pc, #44]	; (84780 <udc_iface_disable+0x64>)
   84752:	e001      	b.n	84758 <udc_iface_disable+0x3c>
   84754:	7880      	ldrb	r0, [r0, #2]
   84756:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   84758:	4631      	mov	r1, r6
   8475a:	4620      	mov	r0, r4
   8475c:	47a8      	blx	r5
			if (NULL == ep_desc) {
   8475e:	4604      	mov	r4, r0
   84760:	2800      	cmp	r0, #0
   84762:	d1f7      	bne.n	84754 <udc_iface_disable+0x38>
	udi_api->disable();
   84764:	f8d9 3004 	ldr.w	r3, [r9, #4]
   84768:	4798      	blx	r3
}
   8476a:	4640      	mov	r0, r8
   8476c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84770:	000846ad 	.word	0x000846ad
   84774:	20002280 	.word	0x20002280
   84778:	20002284 	.word	0x20002284
   8477c:	00084661 	.word	0x00084661
   84780:	00086309 	.word	0x00086309

00084784 <udc_iface_enable>:
{
   84784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84788:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8478a:	4b10      	ldr	r3, [pc, #64]	; (847cc <udc_iface_enable+0x48>)
   8478c:	4798      	blx	r3
   8478e:	4603      	mov	r3, r0
   84790:	b1c8      	cbz	r0, 847c6 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84792:	4b0f      	ldr	r3, [pc, #60]	; (847d0 <udc_iface_enable+0x4c>)
   84794:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   84796:	2605      	movs	r6, #5
   84798:	4d0e      	ldr	r5, [pc, #56]	; (847d4 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8479a:	4f0f      	ldr	r7, [pc, #60]	; (847d8 <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8479c:	4631      	mov	r1, r6
   8479e:	4620      	mov	r0, r4
   847a0:	47a8      	blx	r5
		if (NULL == ep_desc)
   847a2:	4604      	mov	r4, r0
   847a4:	b138      	cbz	r0, 847b6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   847a6:	8882      	ldrh	r2, [r0, #4]
   847a8:	78c1      	ldrb	r1, [r0, #3]
   847aa:	7880      	ldrb	r0, [r0, #2]
   847ac:	47b8      	blx	r7
   847ae:	4603      	mov	r3, r0
   847b0:	2800      	cmp	r0, #0
   847b2:	d1f3      	bne.n	8479c <udc_iface_enable+0x18>
   847b4:	e007      	b.n	847c6 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   847b6:	4b09      	ldr	r3, [pc, #36]	; (847dc <udc_iface_enable+0x58>)
   847b8:	681b      	ldr	r3, [r3, #0]
   847ba:	685b      	ldr	r3, [r3, #4]
   847bc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   847c0:	681b      	ldr	r3, [r3, #0]
   847c2:	4798      	blx	r3
   847c4:	4603      	mov	r3, r0
}
   847c6:	4618      	mov	r0, r3
   847c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847cc:	000846ad 	.word	0x000846ad
   847d0:	20002284 	.word	0x20002284
   847d4:	00084661 	.word	0x00084661
   847d8:	0008664d 	.word	0x0008664d
   847dc:	20002280 	.word	0x20002280

000847e0 <udc_get_interface_desc>:
}
   847e0:	4b01      	ldr	r3, [pc, #4]	; (847e8 <udc_get_interface_desc+0x8>)
   847e2:	6818      	ldr	r0, [r3, #0]
   847e4:	4770      	bx	lr
   847e6:	bf00      	nop
   847e8:	20002284 	.word	0x20002284

000847ec <udc_start>:
{
   847ec:	b508      	push	{r3, lr}
	udd_enable();
   847ee:	4b01      	ldr	r3, [pc, #4]	; (847f4 <udc_start+0x8>)
   847f0:	4798      	blx	r3
}
   847f2:	bd08      	pop	{r3, pc}
   847f4:	00086189 	.word	0x00086189

000847f8 <udc_reset>:
{
   847f8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   847fa:	4b0d      	ldr	r3, [pc, #52]	; (84830 <udc_reset+0x38>)
   847fc:	781b      	ldrb	r3, [r3, #0]
   847fe:	b183      	cbz	r3, 84822 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84800:	4b0c      	ldr	r3, [pc, #48]	; (84834 <udc_reset+0x3c>)
   84802:	681b      	ldr	r3, [r3, #0]
   84804:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   84806:	791b      	ldrb	r3, [r3, #4]
   84808:	b15b      	cbz	r3, 84822 <udc_reset+0x2a>
   8480a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   8480c:	4e0a      	ldr	r6, [pc, #40]	; (84838 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8480e:	4d09      	ldr	r5, [pc, #36]	; (84834 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   84810:	b2e0      	uxtb	r0, r4
   84812:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84814:	3401      	adds	r4, #1
   84816:	682b      	ldr	r3, [r5, #0]
   84818:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8481a:	791a      	ldrb	r2, [r3, #4]
   8481c:	b2e3      	uxtb	r3, r4
   8481e:	429a      	cmp	r2, r3
   84820:	d8f6      	bhi.n	84810 <udc_reset+0x18>
	udc_num_configuration = 0;
   84822:	2300      	movs	r3, #0
   84824:	4a02      	ldr	r2, [pc, #8]	; (84830 <udc_reset+0x38>)
   84826:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   84828:	4a04      	ldr	r2, [pc, #16]	; (8483c <udc_reset+0x44>)
   8482a:	8013      	strh	r3, [r2, #0]
}
   8482c:	bd70      	pop	{r4, r5, r6, pc}
   8482e:	bf00      	nop
   84830:	2000227f 	.word	0x2000227f
   84834:	20002280 	.word	0x20002280
   84838:	0008471d 	.word	0x0008471d
   8483c:	2000227a 	.word	0x2000227a

00084840 <udc_sof_notify>:
{
   84840:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   84842:	4b0e      	ldr	r3, [pc, #56]	; (8487c <udc_sof_notify+0x3c>)
   84844:	781b      	ldrb	r3, [r3, #0]
   84846:	b1bb      	cbz	r3, 84878 <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84848:	4b0d      	ldr	r3, [pc, #52]	; (84880 <udc_sof_notify+0x40>)
   8484a:	681a      	ldr	r2, [r3, #0]
   8484c:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   8484e:	791b      	ldrb	r3, [r3, #4]
   84850:	b193      	cbz	r3, 84878 <udc_sof_notify+0x38>
   84852:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84854:	4d0a      	ldr	r5, [pc, #40]	; (84880 <udc_sof_notify+0x40>)
   84856:	e006      	b.n	84866 <udc_sof_notify+0x26>
   84858:	682a      	ldr	r2, [r5, #0]
   8485a:	3401      	adds	r4, #1
   8485c:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   8485e:	7919      	ldrb	r1, [r3, #4]
   84860:	b2e3      	uxtb	r3, r4
   84862:	4299      	cmp	r1, r3
   84864:	d908      	bls.n	84878 <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   84866:	b2e3      	uxtb	r3, r4
   84868:	6852      	ldr	r2, [r2, #4]
   8486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   8486e:	691b      	ldr	r3, [r3, #16]
   84870:	2b00      	cmp	r3, #0
   84872:	d0f1      	beq.n	84858 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   84874:	4798      	blx	r3
   84876:	e7ef      	b.n	84858 <udc_sof_notify+0x18>
}
   84878:	bd38      	pop	{r3, r4, r5, pc}
   8487a:	bf00      	nop
   8487c:	2000227f 	.word	0x2000227f
   84880:	20002280 	.word	0x20002280

00084884 <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   84884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   84888:	4b91      	ldr	r3, [pc, #580]	; (84ad0 <udc_process_setup+0x24c>)
   8488a:	2200      	movs	r2, #0
   8488c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   8488e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84890:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   84892:	881b      	ldrh	r3, [r3, #0]
   84894:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   84898:	d01b      	beq.n	848d2 <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   8489a:	4b8d      	ldr	r3, [pc, #564]	; (84ad0 <udc_process_setup+0x24c>)
   8489c:	781a      	ldrb	r2, [r3, #0]
   8489e:	f993 3000 	ldrsb.w	r3, [r3]
   848a2:	2b00      	cmp	r3, #0
   848a4:	db1b      	blt.n	848de <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   848a6:	f012 0f60 	tst.w	r2, #96	; 0x60
   848aa:	f000 8147 	beq.w	84b3c <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   848ae:	4b88      	ldr	r3, [pc, #544]	; (84ad0 <udc_process_setup+0x24c>)
   848b0:	781b      	ldrb	r3, [r3, #0]
   848b2:	f003 031f 	and.w	r3, r3, #31
   848b6:	2b01      	cmp	r3, #1
   848b8:	f000 8245 	beq.w	84d46 <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   848bc:	4b84      	ldr	r3, [pc, #528]	; (84ad0 <udc_process_setup+0x24c>)
   848be:	781b      	ldrb	r3, [r3, #0]
   848c0:	f003 031f 	and.w	r3, r3, #31
   848c4:	2b02      	cmp	r3, #2
   848c6:	f000 8291 	beq.w	84dec <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   848ca:	2300      	movs	r3, #0
#endif
}
   848cc:	4618      	mov	r0, r3
   848ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   848d2:	21ae      	movs	r1, #174	; 0xae
   848d4:	487f      	ldr	r0, [pc, #508]	; (84ad4 <udc_process_setup+0x250>)
   848d6:	4b80      	ldr	r3, [pc, #512]	; (84ad8 <udc_process_setup+0x254>)
   848d8:	4798      	blx	r3
		return true;
   848da:	2301      	movs	r3, #1
   848dc:	e7f6      	b.n	848cc <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   848de:	4b7c      	ldr	r3, [pc, #496]	; (84ad0 <udc_process_setup+0x24c>)
   848e0:	88db      	ldrh	r3, [r3, #6]
   848e2:	2b00      	cmp	r3, #0
   848e4:	f000 82ae 	beq.w	84e44 <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   848e8:	f012 0f60 	tst.w	r2, #96	; 0x60
   848ec:	d1df      	bne.n	848ae <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   848ee:	f012 021f 	ands.w	r2, r2, #31
   848f2:	f040 80c1 	bne.w	84a78 <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   848f6:	4a76      	ldr	r2, [pc, #472]	; (84ad0 <udc_process_setup+0x24c>)
   848f8:	7852      	ldrb	r2, [r2, #1]
   848fa:	2a06      	cmp	r2, #6
   848fc:	d00b      	beq.n	84916 <udc_process_setup+0x92>
   848fe:	2a08      	cmp	r2, #8
   84900:	f000 80b2 	beq.w	84a68 <udc_process_setup+0x1e4>
   84904:	2a00      	cmp	r2, #0
   84906:	d1d2      	bne.n	848ae <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   84908:	2b02      	cmp	r3, #2
   8490a:	d1d0      	bne.n	848ae <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8490c:	2102      	movs	r1, #2
   8490e:	4873      	ldr	r0, [pc, #460]	; (84adc <udc_process_setup+0x258>)
   84910:	4b71      	ldr	r3, [pc, #452]	; (84ad8 <udc_process_setup+0x254>)
   84912:	4798      	blx	r3
	return true;
   84914:	e12f      	b.n	84b76 <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84916:	4b6e      	ldr	r3, [pc, #440]	; (84ad0 <udc_process_setup+0x24c>)
   84918:	885a      	ldrh	r2, [r3, #2]
   8491a:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8491c:	0a13      	lsrs	r3, r2, #8
   8491e:	3b01      	subs	r3, #1
   84920:	2b0e      	cmp	r3, #14
   84922:	f200 8209 	bhi.w	84d38 <udc_process_setup+0x4b4>
   84926:	e8df f013 	tbh	[pc, r3, lsl #1]
   8492a:	000f      	.short	0x000f
   8492c:	007a0023 	.word	0x007a0023
   84930:	02070207 	.word	0x02070207
   84934:	00520044 	.word	0x00520044
   84938:	02070207 	.word	0x02070207
   8493c:	02070207 	.word	0x02070207
   84940:	02070207 	.word	0x02070207
   84944:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   84948:	4b65      	ldr	r3, [pc, #404]	; (84ae0 <udc_process_setup+0x25c>)
   8494a:	4798      	blx	r3
   8494c:	b928      	cbnz	r0, 8495a <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   8494e:	4b65      	ldr	r3, [pc, #404]	; (84ae4 <udc_process_setup+0x260>)
   84950:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   84952:	7801      	ldrb	r1, [r0, #0]
   84954:	4b60      	ldr	r3, [pc, #384]	; (84ad8 <udc_process_setup+0x254>)
   84956:	4798      	blx	r3
   84958:	e030      	b.n	849bc <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   8495a:	4b62      	ldr	r3, [pc, #392]	; (84ae4 <udc_process_setup+0x260>)
   8495c:	681a      	ldr	r2, [r3, #0]
   8495e:	2110      	movs	r1, #16
   84960:	7091      	strb	r1, [r2, #2]
   84962:	2102      	movs	r1, #2
   84964:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   84966:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   84968:	7801      	ldrb	r1, [r0, #0]
   8496a:	4b5b      	ldr	r3, [pc, #364]	; (84ad8 <udc_process_setup+0x254>)
   8496c:	4798      	blx	r3
   8496e:	e025      	b.n	849bc <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   84970:	4b5b      	ldr	r3, [pc, #364]	; (84ae0 <udc_process_setup+0x25c>)
   84972:	4798      	blx	r3
   84974:	b180      	cbz	r0, 84998 <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   84976:	4b5b      	ldr	r3, [pc, #364]	; (84ae4 <udc_process_setup+0x260>)
   84978:	689b      	ldr	r3, [r3, #8]
   8497a:	7c5b      	ldrb	r3, [r3, #17]
   8497c:	42a3      	cmp	r3, r4
   8497e:	d996      	bls.n	848ae <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84980:	4b58      	ldr	r3, [pc, #352]	; (84ae4 <udc_process_setup+0x260>)
   84982:	691b      	ldr	r3, [r3, #16]
   84984:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84988:	8841      	ldrh	r1, [r0, #2]
   8498a:	4b53      	ldr	r3, [pc, #332]	; (84ad8 <udc_process_setup+0x254>)
   8498c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8498e:	4b50      	ldr	r3, [pc, #320]	; (84ad0 <udc_process_setup+0x24c>)
   84990:	689b      	ldr	r3, [r3, #8]
   84992:	2202      	movs	r2, #2
   84994:	705a      	strb	r2, [r3, #1]
		break;
   84996:	e011      	b.n	849bc <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   84998:	4b52      	ldr	r3, [pc, #328]	; (84ae4 <udc_process_setup+0x260>)
   8499a:	681b      	ldr	r3, [r3, #0]
   8499c:	7c5b      	ldrb	r3, [r3, #17]
   8499e:	42a3      	cmp	r3, r4
   849a0:	d985      	bls.n	848ae <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   849a2:	4b50      	ldr	r3, [pc, #320]	; (84ae4 <udc_process_setup+0x260>)
   849a4:	685b      	ldr	r3, [r3, #4]
   849a6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   849aa:	8841      	ldrh	r1, [r0, #2]
   849ac:	4b4a      	ldr	r3, [pc, #296]	; (84ad8 <udc_process_setup+0x254>)
   849ae:	4798      	blx	r3
   849b0:	e7ed      	b.n	8498e <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   849b2:	4b4c      	ldr	r3, [pc, #304]	; (84ae4 <udc_process_setup+0x260>)
   849b4:	68d8      	ldr	r0, [r3, #12]
   849b6:	7801      	ldrb	r1, [r0, #0]
   849b8:	4b47      	ldr	r3, [pc, #284]	; (84ad8 <udc_process_setup+0x254>)
   849ba:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   849bc:	4b44      	ldr	r3, [pc, #272]	; (84ad0 <udc_process_setup+0x24c>)
   849be:	88da      	ldrh	r2, [r3, #6]
   849c0:	899b      	ldrh	r3, [r3, #12]
   849c2:	4293      	cmp	r3, r2
   849c4:	f240 80d7 	bls.w	84b76 <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   849c8:	4b41      	ldr	r3, [pc, #260]	; (84ad0 <udc_process_setup+0x24c>)
   849ca:	819a      	strh	r2, [r3, #12]
   849cc:	e0d3      	b.n	84b76 <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   849ce:	4b44      	ldr	r3, [pc, #272]	; (84ae0 <udc_process_setup+0x25c>)
   849d0:	4798      	blx	r3
   849d2:	b988      	cbnz	r0, 849f8 <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   849d4:	4b43      	ldr	r3, [pc, #268]	; (84ae4 <udc_process_setup+0x260>)
   849d6:	689b      	ldr	r3, [r3, #8]
   849d8:	7c5b      	ldrb	r3, [r3, #17]
   849da:	42a3      	cmp	r3, r4
   849dc:	f67f af67 	bls.w	848ae <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   849e0:	4b40      	ldr	r3, [pc, #256]	; (84ae4 <udc_process_setup+0x260>)
   849e2:	691b      	ldr	r3, [r3, #16]
   849e4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   849e8:	8841      	ldrh	r1, [r0, #2]
   849ea:	4b3b      	ldr	r3, [pc, #236]	; (84ad8 <udc_process_setup+0x254>)
   849ec:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   849ee:	4b38      	ldr	r3, [pc, #224]	; (84ad0 <udc_process_setup+0x24c>)
   849f0:	689b      	ldr	r3, [r3, #8]
   849f2:	2207      	movs	r2, #7
   849f4:	705a      	strb	r2, [r3, #1]
		break;
   849f6:	e7e1      	b.n	849bc <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   849f8:	4b3a      	ldr	r3, [pc, #232]	; (84ae4 <udc_process_setup+0x260>)
   849fa:	681b      	ldr	r3, [r3, #0]
   849fc:	7c5b      	ldrb	r3, [r3, #17]
   849fe:	42a3      	cmp	r3, r4
   84a00:	f67f af55 	bls.w	848ae <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84a04:	4b37      	ldr	r3, [pc, #220]	; (84ae4 <udc_process_setup+0x260>)
   84a06:	685b      	ldr	r3, [r3, #4]
   84a08:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a0c:	8841      	ldrh	r1, [r0, #2]
   84a0e:	4b32      	ldr	r3, [pc, #200]	; (84ad8 <udc_process_setup+0x254>)
   84a10:	4798      	blx	r3
   84a12:	e7ec      	b.n	849ee <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84a14:	2121      	movs	r1, #33	; 0x21
   84a16:	4834      	ldr	r0, [pc, #208]	; (84ae8 <udc_process_setup+0x264>)
   84a18:	4b2f      	ldr	r3, [pc, #188]	; (84ad8 <udc_process_setup+0x254>)
   84a1a:	4798      	blx	r3
		break;
   84a1c:	e7ce      	b.n	849bc <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84a1e:	b2d2      	uxtb	r2, r2
   84a20:	2a03      	cmp	r2, #3
   84a22:	f63f af44 	bhi.w	848ae <udc_process_setup+0x2a>
   84a26:	e8df f002 	tbb	[pc, r2]
   84a2a:	1914      	.short	0x1914
   84a2c:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84a2e:	2020      	movs	r0, #32
   84a30:	4a2e      	ldr	r2, [pc, #184]	; (84aec <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   84a32:	4613      	mov	r3, r2
   84a34:	492e      	ldr	r1, [pc, #184]	; (84af0 <udc_process_setup+0x26c>)
   84a36:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84a38:	f813 4b01 	ldrb.w	r4, [r3], #1
   84a3c:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   84a40:	429a      	cmp	r2, r3
   84a42:	d1f9      	bne.n	84a38 <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84a44:	0041      	lsls	r1, r0, #1
   84a46:	3102      	adds	r1, #2
   84a48:	4829      	ldr	r0, [pc, #164]	; (84af0 <udc_process_setup+0x26c>)
   84a4a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   84a4c:	4b22      	ldr	r3, [pc, #136]	; (84ad8 <udc_process_setup+0x254>)
   84a4e:	4798      	blx	r3
   84a50:	e7b4      	b.n	849bc <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84a52:	2104      	movs	r1, #4
   84a54:	4827      	ldr	r0, [pc, #156]	; (84af4 <udc_process_setup+0x270>)
   84a56:	4b20      	ldr	r3, [pc, #128]	; (84ad8 <udc_process_setup+0x254>)
   84a58:	4798      	blx	r3
	if (str_length) {
   84a5a:	e7af      	b.n	849bc <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84a5c:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   84a5e:	4a26      	ldr	r2, [pc, #152]	; (84af8 <udc_process_setup+0x274>)
   84a60:	e7e7      	b.n	84a32 <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84a62:	2012      	movs	r0, #18
		str = udc_string_product_name;
   84a64:	4a25      	ldr	r2, [pc, #148]	; (84afc <udc_process_setup+0x278>)
   84a66:	e7e4      	b.n	84a32 <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84a68:	2b01      	cmp	r3, #1
   84a6a:	f47f af20 	bne.w	848ae <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   84a6e:	2101      	movs	r1, #1
   84a70:	4823      	ldr	r0, [pc, #140]	; (84b00 <udc_process_setup+0x27c>)
   84a72:	4b19      	ldr	r3, [pc, #100]	; (84ad8 <udc_process_setup+0x254>)
   84a74:	4798      	blx	r3
	return true;
   84a76:	e07e      	b.n	84b76 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84a78:	2a01      	cmp	r2, #1
   84a7a:	d149      	bne.n	84b10 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   84a7c:	4a14      	ldr	r2, [pc, #80]	; (84ad0 <udc_process_setup+0x24c>)
   84a7e:	7852      	ldrb	r2, [r2, #1]
   84a80:	2a0a      	cmp	r2, #10
   84a82:	f47f af14 	bne.w	848ae <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84a86:	2b01      	cmp	r3, #1
   84a88:	f47f af11 	bne.w	848ae <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   84a8c:	4b1c      	ldr	r3, [pc, #112]	; (84b00 <udc_process_setup+0x27c>)
   84a8e:	781b      	ldrb	r3, [r3, #0]
   84a90:	2b00      	cmp	r3, #0
   84a92:	f43f af0c 	beq.w	848ae <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84a96:	4b0e      	ldr	r3, [pc, #56]	; (84ad0 <udc_process_setup+0x24c>)
   84a98:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84a9a:	4b1a      	ldr	r3, [pc, #104]	; (84b04 <udc_process_setup+0x280>)
   84a9c:	681d      	ldr	r5, [r3, #0]
   84a9e:	682b      	ldr	r3, [r5, #0]
   84aa0:	791b      	ldrb	r3, [r3, #4]
   84aa2:	42a3      	cmp	r3, r4
   84aa4:	f67f af03 	bls.w	848ae <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   84aa8:	2100      	movs	r1, #0
   84aaa:	4620      	mov	r0, r4
   84aac:	4b16      	ldr	r3, [pc, #88]	; (84b08 <udc_process_setup+0x284>)
   84aae:	4798      	blx	r3
   84ab0:	2800      	cmp	r0, #0
   84ab2:	f43f aefc 	beq.w	848ae <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84ab6:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   84ab8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   84abc:	68db      	ldr	r3, [r3, #12]
   84abe:	4798      	blx	r3
   84ac0:	4b12      	ldr	r3, [pc, #72]	; (84b0c <udc_process_setup+0x288>)
   84ac2:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   84ac4:	2101      	movs	r1, #1
   84ac6:	4618      	mov	r0, r3
   84ac8:	4b03      	ldr	r3, [pc, #12]	; (84ad8 <udc_process_setup+0x254>)
   84aca:	4798      	blx	r3
	return true;
   84acc:	e053      	b.n	84b76 <udc_process_setup+0x2f2>
   84ace:	bf00      	nop
   84ad0:	20002dec 	.word	0x20002dec
   84ad4:	20000640 	.word	0x20000640
   84ad8:	000862fd 	.word	0x000862fd
   84adc:	2000227a 	.word	0x2000227a
   84ae0:	00086295 	.word	0x00086295
   84ae4:	200001d4 	.word	0x200001d4
   84ae8:	0008e49c 	.word	0x0008e49c
   84aec:	200006f0 	.word	0x200006f0
   84af0:	200005cc 	.word	0x200005cc
   84af4:	20000610 	.word	0x20000610
   84af8:	20000614 	.word	0x20000614
   84afc:	2000062c 	.word	0x2000062c
   84b00:	2000227f 	.word	0x2000227f
   84b04:	20002280 	.word	0x20002280
   84b08:	000846ad 	.word	0x000846ad
   84b0c:	2000227e 	.word	0x2000227e
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84b10:	2a02      	cmp	r2, #2
   84b12:	f47f aecc 	bne.w	848ae <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   84b16:	4a93      	ldr	r2, [pc, #588]	; (84d64 <udc_process_setup+0x4e0>)
   84b18:	7852      	ldrb	r2, [r2, #1]
   84b1a:	2a00      	cmp	r2, #0
   84b1c:	f47f aec7 	bne.w	848ae <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84b20:	2b02      	cmp	r3, #2
   84b22:	f47f aec4 	bne.w	848ae <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84b26:	4b8f      	ldr	r3, [pc, #572]	; (84d64 <udc_process_setup+0x4e0>)
   84b28:	7918      	ldrb	r0, [r3, #4]
   84b2a:	4b8f      	ldr	r3, [pc, #572]	; (84d68 <udc_process_setup+0x4e4>)
   84b2c:	4798      	blx	r3
   84b2e:	4b8f      	ldr	r3, [pc, #572]	; (84d6c <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84b30:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84b32:	2102      	movs	r1, #2
   84b34:	4618      	mov	r0, r3
   84b36:	4b8e      	ldr	r3, [pc, #568]	; (84d70 <udc_process_setup+0x4ec>)
   84b38:	4798      	blx	r3
	return true;
   84b3a:	e01c      	b.n	84b76 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84b3c:	f012 021f 	ands.w	r2, r2, #31
   84b40:	f040 80b1 	bne.w	84ca6 <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   84b44:	4b87      	ldr	r3, [pc, #540]	; (84d64 <udc_process_setup+0x4e0>)
   84b46:	785b      	ldrb	r3, [r3, #1]
   84b48:	3b01      	subs	r3, #1
   84b4a:	2b08      	cmp	r3, #8
   84b4c:	f200 80ab 	bhi.w	84ca6 <udc_process_setup+0x422>
   84b50:	e8df f013 	tbh	[pc, r3, lsl #1]
   84b54:	00a90013 	.word	0x00a90013
   84b58:	00a90023 	.word	0x00a90023
   84b5c:	00a90009 	.word	0x00a90009
   84b60:	00a900a9 	.word	0x00a900a9
   84b64:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   84b66:	4b7f      	ldr	r3, [pc, #508]	; (84d64 <udc_process_setup+0x4e0>)
   84b68:	88db      	ldrh	r3, [r3, #6]
   84b6a:	2b00      	cmp	r3, #0
   84b6c:	f47f ae9f 	bne.w	848ae <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   84b70:	4b7c      	ldr	r3, [pc, #496]	; (84d64 <udc_process_setup+0x4e0>)
   84b72:	4a80      	ldr	r2, [pc, #512]	; (84d74 <udc_process_setup+0x4f0>)
   84b74:	611a      	str	r2, [r3, #16]
			return true;
   84b76:	2301      	movs	r3, #1
   84b78:	e6a8      	b.n	848cc <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   84b7a:	4b7a      	ldr	r3, [pc, #488]	; (84d64 <udc_process_setup+0x4e0>)
   84b7c:	88db      	ldrh	r3, [r3, #6]
   84b7e:	2b00      	cmp	r3, #0
   84b80:	f47f ae95 	bne.w	848ae <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84b84:	4b77      	ldr	r3, [pc, #476]	; (84d64 <udc_process_setup+0x4e0>)
   84b86:	885b      	ldrh	r3, [r3, #2]
   84b88:	2b01      	cmp	r3, #1
   84b8a:	f47f ae90 	bne.w	848ae <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84b8e:	4a7a      	ldr	r2, [pc, #488]	; (84d78 <udc_process_setup+0x4f4>)
   84b90:	8813      	ldrh	r3, [r2, #0]
   84b92:	f023 0302 	bic.w	r3, r3, #2
   84b96:	8013      	strh	r3, [r2, #0]
		return true;
   84b98:	e7ed      	b.n	84b76 <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   84b9a:	4b72      	ldr	r3, [pc, #456]	; (84d64 <udc_process_setup+0x4e0>)
   84b9c:	88db      	ldrh	r3, [r3, #6]
   84b9e:	2b00      	cmp	r3, #0
   84ba0:	f47f ae85 	bne.w	848ae <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   84ba4:	4b6f      	ldr	r3, [pc, #444]	; (84d64 <udc_process_setup+0x4e0>)
   84ba6:	885b      	ldrh	r3, [r3, #2]
   84ba8:	2b02      	cmp	r3, #2
   84baa:	f47f ae80 	bne.w	848ae <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   84bae:	4b73      	ldr	r3, [pc, #460]	; (84d7c <udc_process_setup+0x4f8>)
   84bb0:	4798      	blx	r3
   84bb2:	2800      	cmp	r0, #0
   84bb4:	f43f ae7b 	beq.w	848ae <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84bb8:	4b6a      	ldr	r3, [pc, #424]	; (84d64 <udc_process_setup+0x4e0>)
   84bba:	791b      	ldrb	r3, [r3, #4]
   84bbc:	2b00      	cmp	r3, #0
   84bbe:	f47f ae76 	bne.w	848ae <udc_process_setup+0x2a>
		udc_reset();
   84bc2:	4b6f      	ldr	r3, [pc, #444]	; (84d80 <udc_process_setup+0x4fc>)
   84bc4:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84bc6:	4b67      	ldr	r3, [pc, #412]	; (84d64 <udc_process_setup+0x4e0>)
   84bc8:	889b      	ldrh	r3, [r3, #4]
   84bca:	0a1b      	lsrs	r3, r3, #8
   84bcc:	3b01      	subs	r3, #1
   84bce:	2b03      	cmp	r3, #3
   84bd0:	f200 80b7 	bhi.w	84d42 <udc_process_setup+0x4be>
   84bd4:	e8df f003 	tbb	[pc, r3]
   84bd8:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84bdc:	4b61      	ldr	r3, [pc, #388]	; (84d64 <udc_process_setup+0x4e0>)
   84bde:	4a69      	ldr	r2, [pc, #420]	; (84d84 <udc_process_setup+0x500>)
   84be0:	611a      	str	r2, [r3, #16]
			return true;
   84be2:	e7c8      	b.n	84b76 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84be4:	4b5f      	ldr	r3, [pc, #380]	; (84d64 <udc_process_setup+0x4e0>)
   84be6:	4a68      	ldr	r2, [pc, #416]	; (84d88 <udc_process_setup+0x504>)
   84be8:	611a      	str	r2, [r3, #16]
			return true;
   84bea:	e7c4      	b.n	84b76 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84bec:	4b5d      	ldr	r3, [pc, #372]	; (84d64 <udc_process_setup+0x4e0>)
   84bee:	4a67      	ldr	r2, [pc, #412]	; (84d8c <udc_process_setup+0x508>)
   84bf0:	611a      	str	r2, [r3, #16]
			return true;
   84bf2:	e7c0      	b.n	84b76 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84bf4:	4b5b      	ldr	r3, [pc, #364]	; (84d64 <udc_process_setup+0x4e0>)
   84bf6:	4a66      	ldr	r2, [pc, #408]	; (84d90 <udc_process_setup+0x50c>)
   84bf8:	611a      	str	r2, [r3, #16]
			return true;
   84bfa:	e7bc      	b.n	84b76 <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   84bfc:	4b59      	ldr	r3, [pc, #356]	; (84d64 <udc_process_setup+0x4e0>)
   84bfe:	88db      	ldrh	r3, [r3, #6]
   84c00:	2b00      	cmp	r3, #0
   84c02:	f47f ae54 	bne.w	848ae <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   84c06:	4b63      	ldr	r3, [pc, #396]	; (84d94 <udc_process_setup+0x510>)
   84c08:	4798      	blx	r3
   84c0a:	2800      	cmp	r0, #0
   84c0c:	f43f ae4f 	beq.w	848ae <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   84c10:	4b5a      	ldr	r3, [pc, #360]	; (84d7c <udc_process_setup+0x4f8>)
   84c12:	4798      	blx	r3
   84c14:	2800      	cmp	r0, #0
   84c16:	d034      	beq.n	84c82 <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   84c18:	4b5f      	ldr	r3, [pc, #380]	; (84d98 <udc_process_setup+0x514>)
   84c1a:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84c1c:	7c5a      	ldrb	r2, [r3, #17]
   84c1e:	4b51      	ldr	r3, [pc, #324]	; (84d64 <udc_process_setup+0x4e0>)
   84c20:	789b      	ldrb	r3, [r3, #2]
   84c22:	429a      	cmp	r2, r3
   84c24:	f4ff ae43 	bcc.w	848ae <udc_process_setup+0x2a>
	udc_reset();
   84c28:	4b55      	ldr	r3, [pc, #340]	; (84d80 <udc_process_setup+0x4fc>)
   84c2a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84c2c:	4b4d      	ldr	r3, [pc, #308]	; (84d64 <udc_process_setup+0x4e0>)
   84c2e:	789b      	ldrb	r3, [r3, #2]
   84c30:	4a5a      	ldr	r2, [pc, #360]	; (84d9c <udc_process_setup+0x518>)
   84c32:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   84c34:	2b00      	cmp	r3, #0
   84c36:	d09e      	beq.n	84b76 <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   84c38:	4b50      	ldr	r3, [pc, #320]	; (84d7c <udc_process_setup+0x4f8>)
   84c3a:	4798      	blx	r3
   84c3c:	2800      	cmp	r0, #0
   84c3e:	d028      	beq.n	84c92 <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84c40:	4b56      	ldr	r3, [pc, #344]	; (84d9c <udc_process_setup+0x518>)
   84c42:	781b      	ldrb	r3, [r3, #0]
   84c44:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   84c48:	3a01      	subs	r2, #1
   84c4a:	4b53      	ldr	r3, [pc, #332]	; (84d98 <udc_process_setup+0x514>)
   84c4c:	691b      	ldr	r3, [r3, #16]
   84c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84c52:	4a53      	ldr	r2, [pc, #332]	; (84da0 <udc_process_setup+0x51c>)
   84c54:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84c56:	681b      	ldr	r3, [r3, #0]
   84c58:	791b      	ldrb	r3, [r3, #4]
   84c5a:	2b00      	cmp	r3, #0
   84c5c:	d08b      	beq.n	84b76 <udc_process_setup+0x2f2>
   84c5e:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   84c60:	4626      	mov	r6, r4
   84c62:	4d50      	ldr	r5, [pc, #320]	; (84da4 <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84c64:	4f4e      	ldr	r7, [pc, #312]	; (84da0 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   84c66:	4631      	mov	r1, r6
   84c68:	b2e0      	uxtb	r0, r4
   84c6a:	47a8      	blx	r5
   84c6c:	2800      	cmp	r0, #0
   84c6e:	f43f ae1e 	beq.w	848ae <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84c72:	3401      	adds	r4, #1
   84c74:	683b      	ldr	r3, [r7, #0]
   84c76:	681b      	ldr	r3, [r3, #0]
   84c78:	791a      	ldrb	r2, [r3, #4]
   84c7a:	b2e3      	uxtb	r3, r4
   84c7c:	429a      	cmp	r2, r3
   84c7e:	d8f2      	bhi.n	84c66 <udc_process_setup+0x3e2>
   84c80:	e779      	b.n	84b76 <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   84c82:	4b45      	ldr	r3, [pc, #276]	; (84d98 <udc_process_setup+0x514>)
   84c84:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84c86:	7c5a      	ldrb	r2, [r3, #17]
   84c88:	4b36      	ldr	r3, [pc, #216]	; (84d64 <udc_process_setup+0x4e0>)
   84c8a:	789b      	ldrb	r3, [r3, #2]
   84c8c:	429a      	cmp	r2, r3
   84c8e:	d2cb      	bcs.n	84c28 <udc_process_setup+0x3a4>
   84c90:	e60d      	b.n	848ae <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84c92:	4b42      	ldr	r3, [pc, #264]	; (84d9c <udc_process_setup+0x518>)
   84c94:	781b      	ldrb	r3, [r3, #0]
   84c96:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   84c9a:	3a01      	subs	r2, #1
   84c9c:	4b3e      	ldr	r3, [pc, #248]	; (84d98 <udc_process_setup+0x514>)
   84c9e:	685b      	ldr	r3, [r3, #4]
   84ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84ca4:	e7d5      	b.n	84c52 <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84ca6:	2a01      	cmp	r2, #1
   84ca8:	d01a      	beq.n	84ce0 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84caa:	2a02      	cmp	r2, #2
   84cac:	f47f adff 	bne.w	848ae <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   84cb0:	4b2c      	ldr	r3, [pc, #176]	; (84d64 <udc_process_setup+0x4e0>)
   84cb2:	785b      	ldrb	r3, [r3, #1]
   84cb4:	2b01      	cmp	r3, #1
   84cb6:	d031      	beq.n	84d1c <udc_process_setup+0x498>
   84cb8:	2b03      	cmp	r3, #3
   84cba:	f47f adf8 	bne.w	848ae <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   84cbe:	4a29      	ldr	r2, [pc, #164]	; (84d64 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84cc0:	88d3      	ldrh	r3, [r2, #6]
   84cc2:	8852      	ldrh	r2, [r2, #2]
   84cc4:	4313      	orrs	r3, r2
   84cc6:	b29b      	uxth	r3, r3
   84cc8:	2b00      	cmp	r3, #0
   84cca:	f47f adf0 	bne.w	848ae <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84cce:	4c25      	ldr	r4, [pc, #148]	; (84d64 <udc_process_setup+0x4e0>)
   84cd0:	7920      	ldrb	r0, [r4, #4]
   84cd2:	4b35      	ldr	r3, [pc, #212]	; (84da8 <udc_process_setup+0x524>)
   84cd4:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84cd6:	7920      	ldrb	r0, [r4, #4]
   84cd8:	4b34      	ldr	r3, [pc, #208]	; (84dac <udc_process_setup+0x528>)
   84cda:	4798      	blx	r3
   84cdc:	4603      	mov	r3, r0
   84cde:	e02c      	b.n	84d3a <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   84ce0:	4b20      	ldr	r3, [pc, #128]	; (84d64 <udc_process_setup+0x4e0>)
   84ce2:	785b      	ldrb	r3, [r3, #1]
   84ce4:	2b0b      	cmp	r3, #11
   84ce6:	f47f ade2 	bne.w	848ae <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   84cea:	4b1e      	ldr	r3, [pc, #120]	; (84d64 <udc_process_setup+0x4e0>)
   84cec:	88db      	ldrh	r3, [r3, #6]
   84cee:	2b00      	cmp	r3, #0
   84cf0:	f47f addd 	bne.w	848ae <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   84cf4:	4b29      	ldr	r3, [pc, #164]	; (84d9c <udc_process_setup+0x518>)
   84cf6:	781b      	ldrb	r3, [r3, #0]
   84cf8:	2b00      	cmp	r3, #0
   84cfa:	f43f add8 	beq.w	848ae <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84cfe:	4b19      	ldr	r3, [pc, #100]	; (84d64 <udc_process_setup+0x4e0>)
   84d00:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84d02:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   84d04:	4620      	mov	r0, r4
   84d06:	4b2a      	ldr	r3, [pc, #168]	; (84db0 <udc_process_setup+0x52c>)
   84d08:	4798      	blx	r3
   84d0a:	2800      	cmp	r0, #0
   84d0c:	f43f adcf 	beq.w	848ae <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   84d10:	b2e9      	uxtb	r1, r5
   84d12:	4620      	mov	r0, r4
   84d14:	4b23      	ldr	r3, [pc, #140]	; (84da4 <udc_process_setup+0x520>)
   84d16:	4798      	blx	r3
   84d18:	4603      	mov	r3, r0
   84d1a:	e00e      	b.n	84d3a <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   84d1c:	4a11      	ldr	r2, [pc, #68]	; (84d64 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84d1e:	88d3      	ldrh	r3, [r2, #6]
   84d20:	8852      	ldrh	r2, [r2, #2]
   84d22:	4313      	orrs	r3, r2
   84d24:	b29b      	uxth	r3, r3
   84d26:	2b00      	cmp	r3, #0
   84d28:	f47f adc1 	bne.w	848ae <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84d2c:	4b0d      	ldr	r3, [pc, #52]	; (84d64 <udc_process_setup+0x4e0>)
   84d2e:	7918      	ldrb	r0, [r3, #4]
   84d30:	4b20      	ldr	r3, [pc, #128]	; (84db4 <udc_process_setup+0x530>)
   84d32:	4798      	blx	r3
   84d34:	4603      	mov	r3, r0
   84d36:	e000      	b.n	84d3a <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84d38:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   84d3a:	2b00      	cmp	r3, #0
   84d3c:	f47f adc6 	bne.w	848cc <udc_process_setup+0x48>
   84d40:	e5b5      	b.n	848ae <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84d42:	2300      	movs	r3, #0
   84d44:	e7f9      	b.n	84d3a <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   84d46:	4b15      	ldr	r3, [pc, #84]	; (84d9c <udc_process_setup+0x518>)
   84d48:	781b      	ldrb	r3, [r3, #0]
   84d4a:	2b00      	cmp	r3, #0
   84d4c:	d07c      	beq.n	84e48 <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84d4e:	4b05      	ldr	r3, [pc, #20]	; (84d64 <udc_process_setup+0x4e0>)
   84d50:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84d52:	4b13      	ldr	r3, [pc, #76]	; (84da0 <udc_process_setup+0x51c>)
   84d54:	681d      	ldr	r5, [r3, #0]
   84d56:	682b      	ldr	r3, [r5, #0]
   84d58:	791b      	ldrb	r3, [r3, #4]
   84d5a:	42a3      	cmp	r3, r4
   84d5c:	d82c      	bhi.n	84db8 <udc_process_setup+0x534>
	return false;
   84d5e:	2300      	movs	r3, #0
   84d60:	e5b4      	b.n	848cc <udc_process_setup+0x48>
   84d62:	bf00      	nop
   84d64:	20002dec 	.word	0x20002dec
   84d68:	00086361 	.word	0x00086361
   84d6c:	2000227c 	.word	0x2000227c
   84d70:	000862fd 	.word	0x000862fd
   84d74:	00084695 	.word	0x00084695
   84d78:	2000227a 	.word	0x2000227a
   84d7c:	00086295 	.word	0x00086295
   84d80:	000847f9 	.word	0x000847f9
   84d84:	00086949 	.word	0x00086949
   84d88:	0008696d 	.word	0x0008696d
   84d8c:	00086991 	.word	0x00086991
   84d90:	000869a9 	.word	0x000869a9
   84d94:	000862cd 	.word	0x000862cd
   84d98:	200001d4 	.word	0x200001d4
   84d9c:	2000227f 	.word	0x2000227f
   84da0:	20002280 	.word	0x20002280
   84da4:	00084785 	.word	0x00084785
   84da8:	000868d5 	.word	0x000868d5
   84dac:	00086395 	.word	0x00086395
   84db0:	0008471d 	.word	0x0008471d
   84db4:	00086459 	.word	0x00086459
	if (!udc_update_iface_desc(iface_num, 0)) {
   84db8:	2100      	movs	r1, #0
   84dba:	4620      	mov	r0, r4
   84dbc:	4b23      	ldr	r3, [pc, #140]	; (84e4c <udc_process_setup+0x5c8>)
   84dbe:	4798      	blx	r3
   84dc0:	2800      	cmp	r0, #0
   84dc2:	f43f ad7b 	beq.w	848bc <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84dc6:	686b      	ldr	r3, [r5, #4]
   84dc8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84dcc:	68eb      	ldr	r3, [r5, #12]
   84dce:	4798      	blx	r3
   84dd0:	4601      	mov	r1, r0
   84dd2:	4620      	mov	r0, r4
   84dd4:	4b1d      	ldr	r3, [pc, #116]	; (84e4c <udc_process_setup+0x5c8>)
   84dd6:	4798      	blx	r3
   84dd8:	2800      	cmp	r0, #0
   84dda:	f43f ad6f 	beq.w	848bc <udc_process_setup+0x38>
	return udi_api->setup();
   84dde:	68ab      	ldr	r3, [r5, #8]
   84de0:	4798      	blx	r3
		if (udc_req_iface()) {
   84de2:	4603      	mov	r3, r0
   84de4:	2800      	cmp	r0, #0
   84de6:	f47f ad71 	bne.w	848cc <udc_process_setup+0x48>
   84dea:	e567      	b.n	848bc <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   84dec:	4b18      	ldr	r3, [pc, #96]	; (84e50 <udc_process_setup+0x5cc>)
   84dee:	781b      	ldrb	r3, [r3, #0]
   84df0:	b323      	cbz	r3, 84e3c <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84df2:	4b18      	ldr	r3, [pc, #96]	; (84e54 <udc_process_setup+0x5d0>)
   84df4:	681a      	ldr	r2, [r3, #0]
   84df6:	6813      	ldr	r3, [r2, #0]
   84df8:	791b      	ldrb	r3, [r3, #4]
   84dfa:	b30b      	cbz	r3, 84e40 <udc_process_setup+0x5bc>
   84dfc:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84dfe:	4e13      	ldr	r6, [pc, #76]	; (84e4c <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e00:	4f14      	ldr	r7, [pc, #80]	; (84e54 <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84e02:	b2ec      	uxtb	r4, r5
   84e04:	6853      	ldr	r3, [r2, #4]
   84e06:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   84e0e:	4798      	blx	r3
   84e10:	4601      	mov	r1, r0
   84e12:	4620      	mov	r0, r4
   84e14:	47b0      	blx	r6
   84e16:	4603      	mov	r3, r0
   84e18:	2800      	cmp	r0, #0
   84e1a:	f43f ad57 	beq.w	848cc <udc_process_setup+0x48>
		if (udi_api->setup()) {
   84e1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   84e22:	4798      	blx	r3
   84e24:	4603      	mov	r3, r0
   84e26:	2800      	cmp	r0, #0
   84e28:	f47f ad50 	bne.w	848cc <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e2c:	683a      	ldr	r2, [r7, #0]
   84e2e:	3501      	adds	r5, #1
   84e30:	6811      	ldr	r1, [r2, #0]
   84e32:	7908      	ldrb	r0, [r1, #4]
   84e34:	b2e9      	uxtb	r1, r5
   84e36:	4288      	cmp	r0, r1
   84e38:	d8e3      	bhi.n	84e02 <udc_process_setup+0x57e>
   84e3a:	e547      	b.n	848cc <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   84e3c:	2300      	movs	r3, #0
   84e3e:	e545      	b.n	848cc <udc_process_setup+0x48>
	return false;
   84e40:	2300      	movs	r3, #0
   84e42:	e543      	b.n	848cc <udc_process_setup+0x48>
			return false; // Error from USB host
   84e44:	2300      	movs	r3, #0
   84e46:	e541      	b.n	848cc <udc_process_setup+0x48>
	return false;
   84e48:	2300      	movs	r3, #0
   84e4a:	e53f      	b.n	848cc <udc_process_setup+0x48>
   84e4c:	000846ad 	.word	0x000846ad
   84e50:	2000227f 	.word	0x2000227f
   84e54:	20002280 	.word	0x20002280

00084e58 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84e58:	4b0b      	ldr	r3, [pc, #44]	; (84e88 <cpu_irq_enter_critical+0x30>)
   84e5a:	681b      	ldr	r3, [r3, #0]
   84e5c:	b92b      	cbnz	r3, 84e6a <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e5e:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   84e62:	b13b      	cbz	r3, 84e74 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84e64:	2200      	movs	r2, #0
   84e66:	4b09      	ldr	r3, [pc, #36]	; (84e8c <cpu_irq_enter_critical+0x34>)
   84e68:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84e6a:	4a07      	ldr	r2, [pc, #28]	; (84e88 <cpu_irq_enter_critical+0x30>)
   84e6c:	6813      	ldr	r3, [r2, #0]
   84e6e:	3301      	adds	r3, #1
   84e70:	6013      	str	r3, [r2, #0]
   84e72:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   84e74:	b672      	cpsid	i
   84e76:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84e7a:	2200      	movs	r2, #0
   84e7c:	4b04      	ldr	r3, [pc, #16]	; (84e90 <cpu_irq_enter_critical+0x38>)
   84e7e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   84e80:	2201      	movs	r2, #1
   84e82:	4b02      	ldr	r3, [pc, #8]	; (84e8c <cpu_irq_enter_critical+0x34>)
   84e84:	701a      	strb	r2, [r3, #0]
   84e86:	e7f0      	b.n	84e6a <cpu_irq_enter_critical+0x12>
   84e88:	20002288 	.word	0x20002288
   84e8c:	2000228c 	.word	0x2000228c
   84e90:	200006ea 	.word	0x200006ea

00084e94 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84e94:	4b07      	ldr	r3, [pc, #28]	; (84eb4 <cpu_irq_leave_critical+0x20>)
   84e96:	681a      	ldr	r2, [r3, #0]
   84e98:	3a01      	subs	r2, #1
   84e9a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84e9c:	681b      	ldr	r3, [r3, #0]
   84e9e:	b943      	cbnz	r3, 84eb2 <cpu_irq_leave_critical+0x1e>
   84ea0:	4b05      	ldr	r3, [pc, #20]	; (84eb8 <cpu_irq_leave_critical+0x24>)
   84ea2:	781b      	ldrb	r3, [r3, #0]
   84ea4:	b12b      	cbz	r3, 84eb2 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84ea6:	2201      	movs	r2, #1
   84ea8:	4b04      	ldr	r3, [pc, #16]	; (84ebc <cpu_irq_leave_critical+0x28>)
   84eaa:	701a      	strb	r2, [r3, #0]
   84eac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84eb0:	b662      	cpsie	i
   84eb2:	4770      	bx	lr
   84eb4:	20002288 	.word	0x20002288
   84eb8:	2000228c 	.word	0x2000228c
   84ebc:	200006ea 	.word	0x200006ea

00084ec0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   84ec4:	b980      	cbnz	r0, 84ee8 <_read+0x28>
   84ec6:	460c      	mov	r4, r1
   84ec8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   84eca:	2a00      	cmp	r2, #0
   84ecc:	dd0f      	ble.n	84eee <_read+0x2e>
   84ece:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   84ed0:	4e08      	ldr	r6, [pc, #32]	; (84ef4 <_read+0x34>)
   84ed2:	4d09      	ldr	r5, [pc, #36]	; (84ef8 <_read+0x38>)
   84ed4:	6830      	ldr	r0, [r6, #0]
   84ed6:	4621      	mov	r1, r4
   84ed8:	682b      	ldr	r3, [r5, #0]
   84eda:	4798      	blx	r3
		ptr++;
   84edc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   84ede:	42bc      	cmp	r4, r7
   84ee0:	d1f8      	bne.n	84ed4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   84ee2:	4640      	mov	r0, r8
   84ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84ee8:	f04f 38ff 	mov.w	r8, #4294967295
   84eec:	e7f9      	b.n	84ee2 <_read+0x22>
	for (; len > 0; --len) {
   84eee:	4680      	mov	r8, r0
   84ef0:	e7f7      	b.n	84ee2 <_read+0x22>
   84ef2:	bf00      	nop
   84ef4:	20002de8 	.word	0x20002de8
   84ef8:	20002de0 	.word	0x20002de0

00084efc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84efc:	3801      	subs	r0, #1
   84efe:	2802      	cmp	r0, #2
   84f00:	d815      	bhi.n	84f2e <_write+0x32>
{
   84f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84f06:	460e      	mov	r6, r1
   84f08:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   84f0a:	b19a      	cbz	r2, 84f34 <_write+0x38>
   84f0c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84f0e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 84f48 <_write+0x4c>
   84f12:	4f0c      	ldr	r7, [pc, #48]	; (84f44 <_write+0x48>)
   84f14:	f8d8 0000 	ldr.w	r0, [r8]
   84f18:	f815 1b01 	ldrb.w	r1, [r5], #1
   84f1c:	683b      	ldr	r3, [r7, #0]
   84f1e:	4798      	blx	r3
   84f20:	2800      	cmp	r0, #0
   84f22:	db0a      	blt.n	84f3a <_write+0x3e>
   84f24:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   84f26:	3c01      	subs	r4, #1
   84f28:	d1f4      	bne.n	84f14 <_write+0x18>
   84f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84f2e:	f04f 30ff 	mov.w	r0, #4294967295
   84f32:	4770      	bx	lr
	for (; len != 0; --len) {
   84f34:	4610      	mov	r0, r2
   84f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   84f3a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   84f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f42:	bf00      	nop
   84f44:	20002de4 	.word	0x20002de4
   84f48:	20002de8 	.word	0x20002de8

00084f4c <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   84f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84f4e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84f52:	2006      	movs	r0, #6
   84f54:	4c17      	ldr	r4, [pc, #92]	; (84fb4 <iopins_normal+0x68>)
   84f56:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84f58:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84f5c:	2007      	movs	r0, #7
   84f5e:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   84f60:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84f64:	201d      	movs	r0, #29
   84f66:	47a0      	blx	r4
	board_power(0);
   84f68:	201d      	movs	r0, #29
   84f6a:	4b13      	ldr	r3, [pc, #76]	; (84fb8 <iopins_normal+0x6c>)
   84f6c:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   84f6e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84f72:	2008      	movs	r0, #8
   84f74:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   84f76:	2008      	movs	r0, #8
   84f78:	4e10      	ldr	r6, [pc, #64]	; (84fbc <iopins_normal+0x70>)
   84f7a:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   84f7c:	4f10      	ldr	r7, [pc, #64]	; (84fc0 <iopins_normal+0x74>)
   84f7e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   84f82:	21ff      	movs	r1, #255	; 0xff
   84f84:	4638      	mov	r0, r7
   84f86:	4d0f      	ldr	r5, [pc, #60]	; (84fc4 <iopins_normal+0x78>)
   84f88:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   84f8a:	21ff      	movs	r1, #255	; 0xff
   84f8c:	4638      	mov	r0, r7
   84f8e:	4b0e      	ldr	r3, [pc, #56]	; (84fc8 <iopins_normal+0x7c>)
   84f90:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   84f92:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84f96:	2035      	movs	r0, #53	; 0x35
   84f98:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   84f9a:	2035      	movs	r0, #53	; 0x35
   84f9c:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   84f9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   84fa2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   84fa6:	4809      	ldr	r0, [pc, #36]	; (84fcc <iopins_normal+0x80>)
   84fa8:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   84faa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84fae:	201b      	movs	r0, #27
   84fb0:	47a0      	blx	r4
   84fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84fb4:	0008516d 	.word	0x0008516d
   84fb8:	00085151 	.word	0x00085151
   84fbc:	00085137 	.word	0x00085137
   84fc0:	400e0e00 	.word	0x400e0e00
   84fc4:	0008523d 	.word	0x0008523d
   84fc8:	00085109 	.word	0x00085109
   84fcc:	400e0c00 	.word	0x400e0c00

00084fd0 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   84fd0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   84fd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84fd6:	4b05      	ldr	r3, [pc, #20]	; (84fec <board_init+0x1c>)
   84fd8:	605a      	str	r2, [r3, #4]
   84fda:	200a      	movs	r0, #10
   84fdc:	4c04      	ldr	r4, [pc, #16]	; (84ff0 <board_init+0x20>)
   84fde:	47a0      	blx	r4
   84fe0:	200b      	movs	r0, #11
   84fe2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   84fe4:	4b03      	ldr	r3, [pc, #12]	; (84ff4 <board_init+0x24>)
   84fe6:	4798      	blx	r3
   84fe8:	bd10      	pop	{r4, pc}
   84fea:	bf00      	nop
   84fec:	400e1250 	.word	0x400e1250
   84ff0:	000854b1 	.word	0x000854b1
   84ff4:	00084f4d 	.word	0x00084f4d

00084ff8 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   84ff8:	b510      	push	{r4, lr}
   84ffa:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84ffc:	2806      	cmp	r0, #6
   84ffe:	d002      	beq.n	85006 <LED_Off+0xe>
   85000:	2c07      	cmp	r4, #7
   85002:	d004      	beq.n	8500e <LED_Off+0x16>
   85004:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   85006:	2006      	movs	r0, #6
   85008:	4b03      	ldr	r3, [pc, #12]	; (85018 <LED_Off+0x20>)
   8500a:	4798      	blx	r3
   8500c:	e7f8      	b.n	85000 <LED_Off+0x8>
   8500e:	2007      	movs	r0, #7
   85010:	4b01      	ldr	r3, [pc, #4]	; (85018 <LED_Off+0x20>)
   85012:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   85014:	e7f6      	b.n	85004 <LED_Off+0xc>
   85016:	bf00      	nop
   85018:	00085151 	.word	0x00085151

0008501c <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   8501c:	b510      	push	{r4, lr}
   8501e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85020:	2806      	cmp	r0, #6
   85022:	d002      	beq.n	8502a <LED_On+0xe>
   85024:	2c07      	cmp	r4, #7
   85026:	d004      	beq.n	85032 <LED_On+0x16>
   85028:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   8502a:	2006      	movs	r0, #6
   8502c:	4b03      	ldr	r3, [pc, #12]	; (8503c <LED_On+0x20>)
   8502e:	4798      	blx	r3
   85030:	e7f8      	b.n	85024 <LED_On+0x8>
   85032:	2007      	movs	r0, #7
   85034:	4b01      	ldr	r3, [pc, #4]	; (8503c <LED_On+0x20>)
   85036:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   85038:	e7f6      	b.n	85028 <LED_On+0xc>
   8503a:	bf00      	nop
   8503c:	00085137 	.word	0x00085137

00085040 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   85040:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85044:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   85048:	670a      	str	r2, [r1, #112]	; 0x70
   8504a:	4770      	bx	lr

0008504c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8504c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85050:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   85054:	674a      	str	r2, [r1, #116]	; 0x74
   85056:	4770      	bx	lr

00085058 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   85058:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8505c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   85060:	678a      	str	r2, [r1, #120]	; 0x78
   85062:	4770      	bx	lr

00085064 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   85064:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85068:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8506c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   85070:	4770      	bx	lr

00085072 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   85072:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   85074:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   85078:	d016      	beq.n	850a8 <pio_set_peripheral+0x36>
   8507a:	d80b      	bhi.n	85094 <pio_set_peripheral+0x22>
   8507c:	b149      	cbz	r1, 85092 <pio_set_peripheral+0x20>
   8507e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   85082:	d105      	bne.n	85090 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   85084:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   85086:	6f01      	ldr	r1, [r0, #112]	; 0x70
   85088:	400b      	ands	r3, r1
   8508a:	ea23 0302 	bic.w	r3, r3, r2
   8508e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   85090:	6042      	str	r2, [r0, #4]
   85092:	4770      	bx	lr
	switch (ul_type) {
   85094:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   85098:	d0fb      	beq.n	85092 <pio_set_peripheral+0x20>
   8509a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8509e:	d0f8      	beq.n	85092 <pio_set_peripheral+0x20>
   850a0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   850a4:	d1f4      	bne.n	85090 <pio_set_peripheral+0x1e>
   850a6:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   850a8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   850aa:	4313      	orrs	r3, r2
   850ac:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   850ae:	e7ef      	b.n	85090 <pio_set_peripheral+0x1e>

000850b0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   850b0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   850b2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   850b6:	bf14      	ite	ne
   850b8:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   850ba:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   850bc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   850c0:	bf14      	ite	ne
   850c2:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   850c4:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   850c6:	f012 0f02 	tst.w	r2, #2
   850ca:	d107      	bne.n	850dc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   850cc:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   850d0:	bf18      	it	ne
   850d2:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   850d6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   850d8:	6001      	str	r1, [r0, #0]
   850da:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   850dc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   850e0:	e7f9      	b.n	850d6 <pio_set_input+0x26>

000850e2 <pio_set_output>:
{
   850e2:	b410      	push	{r4}
   850e4:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   850e6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   850e8:	b944      	cbnz	r4, 850fc <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   850ea:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   850ec:	b143      	cbz	r3, 85100 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   850ee:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   850f0:	b942      	cbnz	r2, 85104 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   850f2:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   850f4:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   850f6:	6001      	str	r1, [r0, #0]
}
   850f8:	bc10      	pop	{r4}
   850fa:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   850fc:	6641      	str	r1, [r0, #100]	; 0x64
   850fe:	e7f5      	b.n	850ec <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   85100:	6541      	str	r1, [r0, #84]	; 0x54
   85102:	e7f5      	b.n	850f0 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   85104:	6301      	str	r1, [r0, #48]	; 0x30
   85106:	e7f5      	b.n	850f4 <pio_set_output+0x12>

00085108 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   85108:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   8510c:	4770      	bx	lr

0008510e <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   8510e:	6381      	str	r1, [r0, #56]	; 0x38
   85110:	4770      	bx	lr

00085112 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   85112:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   85114:	4770      	bx	lr

00085116 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   85116:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   85118:	4770      	bx	lr

0008511a <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8511a:	0943      	lsrs	r3, r0, #5
   8511c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85120:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85124:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   85126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85128:	f000 001f 	and.w	r0, r0, #31
   8512c:	fa23 f000 	lsr.w	r0, r3, r0
}
   85130:	f000 0001 	and.w	r0, r0, #1
   85134:	4770      	bx	lr

00085136 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85136:	0943      	lsrs	r3, r0, #5
   85138:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8513c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85140:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85142:	f000 001f 	and.w	r0, r0, #31
   85146:	2201      	movs	r2, #1
   85148:	fa02 f000 	lsl.w	r0, r2, r0
   8514c:	6318      	str	r0, [r3, #48]	; 0x30
   8514e:	4770      	bx	lr

00085150 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85150:	0943      	lsrs	r3, r0, #5
   85152:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85156:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8515a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8515c:	f000 001f 	and.w	r0, r0, #31
   85160:	2201      	movs	r2, #1
   85162:	fa02 f000 	lsl.w	r0, r2, r0
   85166:	6358      	str	r0, [r3, #52]	; 0x34
   85168:	4770      	bx	lr
	...

0008516c <pio_configure_pin>:
{
   8516c:	b570      	push	{r4, r5, r6, lr}
   8516e:	b082      	sub	sp, #8
   85170:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85172:	0943      	lsrs	r3, r0, #5
   85174:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85178:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8517c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8517e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   85182:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85186:	d031      	beq.n	851ec <pio_configure_pin+0x80>
   85188:	d816      	bhi.n	851b8 <pio_configure_pin+0x4c>
   8518a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8518e:	d01b      	beq.n	851c8 <pio_configure_pin+0x5c>
   85190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85194:	d116      	bne.n	851c4 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   85196:	f000 001f 	and.w	r0, r0, #31
   8519a:	2601      	movs	r6, #1
   8519c:	4086      	lsls	r6, r0
   8519e:	4632      	mov	r2, r6
   851a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   851a4:	4620      	mov	r0, r4
   851a6:	4b22      	ldr	r3, [pc, #136]	; (85230 <pio_configure_pin+0xc4>)
   851a8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   851aa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   851ae:	bf14      	ite	ne
   851b0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   851b2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   851b4:	2001      	movs	r0, #1
   851b6:	e017      	b.n	851e8 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   851b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   851bc:	d021      	beq.n	85202 <pio_configure_pin+0x96>
   851be:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   851c2:	d01e      	beq.n	85202 <pio_configure_pin+0x96>
		return 0;
   851c4:	2000      	movs	r0, #0
   851c6:	e00f      	b.n	851e8 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   851c8:	f000 001f 	and.w	r0, r0, #31
   851cc:	2601      	movs	r6, #1
   851ce:	4086      	lsls	r6, r0
   851d0:	4632      	mov	r2, r6
   851d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   851d6:	4620      	mov	r0, r4
   851d8:	4b15      	ldr	r3, [pc, #84]	; (85230 <pio_configure_pin+0xc4>)
   851da:	4798      	blx	r3
	if (ul_pull_up_enable) {
   851dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   851e0:	bf14      	ite	ne
   851e2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   851e4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   851e6:	2001      	movs	r0, #1
}
   851e8:	b002      	add	sp, #8
   851ea:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   851ec:	f000 011f 	and.w	r1, r0, #31
   851f0:	2601      	movs	r6, #1
   851f2:	462a      	mov	r2, r5
   851f4:	fa06 f101 	lsl.w	r1, r6, r1
   851f8:	4620      	mov	r0, r4
   851fa:	4b0e      	ldr	r3, [pc, #56]	; (85234 <pio_configure_pin+0xc8>)
   851fc:	4798      	blx	r3
	return 1;
   851fe:	4630      	mov	r0, r6
		break;
   85200:	e7f2      	b.n	851e8 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85202:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85206:	f000 011f 	and.w	r1, r0, #31
   8520a:	2601      	movs	r6, #1
   8520c:	ea05 0306 	and.w	r3, r5, r6
   85210:	9300      	str	r3, [sp, #0]
   85212:	f3c5 0380 	ubfx	r3, r5, #2, #1
   85216:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8521a:	bf14      	ite	ne
   8521c:	2200      	movne	r2, #0
   8521e:	2201      	moveq	r2, #1
   85220:	fa06 f101 	lsl.w	r1, r6, r1
   85224:	4620      	mov	r0, r4
   85226:	4c04      	ldr	r4, [pc, #16]	; (85238 <pio_configure_pin+0xcc>)
   85228:	47a0      	blx	r4
	return 1;
   8522a:	4630      	mov	r0, r6
		break;
   8522c:	e7dc      	b.n	851e8 <pio_configure_pin+0x7c>
   8522e:	bf00      	nop
   85230:	00085073 	.word	0x00085073
   85234:	000850b1 	.word	0x000850b1
   85238:	000850e3 	.word	0x000850e3

0008523c <pio_configure_pin_group>:
{
   8523c:	b570      	push	{r4, r5, r6, lr}
   8523e:	b082      	sub	sp, #8
   85240:	4605      	mov	r5, r0
   85242:	460e      	mov	r6, r1
   85244:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   85246:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8524a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8524e:	d027      	beq.n	852a0 <pio_configure_pin_group+0x64>
   85250:	d811      	bhi.n	85276 <pio_configure_pin_group+0x3a>
   85252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85256:	d016      	beq.n	85286 <pio_configure_pin_group+0x4a>
   85258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8525c:	d111      	bne.n	85282 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8525e:	460a      	mov	r2, r1
   85260:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85264:	4b19      	ldr	r3, [pc, #100]	; (852cc <pio_configure_pin_group+0x90>)
   85266:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85268:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8526c:	bf14      	ite	ne
   8526e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85270:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   85272:	2001      	movs	r0, #1
   85274:	e012      	b.n	8529c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   85276:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8527a:	d015      	beq.n	852a8 <pio_configure_pin_group+0x6c>
   8527c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85280:	d012      	beq.n	852a8 <pio_configure_pin_group+0x6c>
		return 0;
   85282:	2000      	movs	r0, #0
   85284:	e00a      	b.n	8529c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   85286:	460a      	mov	r2, r1
   85288:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8528c:	4b0f      	ldr	r3, [pc, #60]	; (852cc <pio_configure_pin_group+0x90>)
   8528e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85290:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   85294:	bf14      	ite	ne
   85296:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85298:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8529a:	2001      	movs	r0, #1
}
   8529c:	b002      	add	sp, #8
   8529e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   852a0:	4b0b      	ldr	r3, [pc, #44]	; (852d0 <pio_configure_pin_group+0x94>)
   852a2:	4798      	blx	r3
	return 1;
   852a4:	2001      	movs	r0, #1
		break;
   852a6:	e7f9      	b.n	8529c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   852a8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   852ac:	f004 0301 	and.w	r3, r4, #1
   852b0:	9300      	str	r3, [sp, #0]
   852b2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   852b6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   852ba:	bf14      	ite	ne
   852bc:	2200      	movne	r2, #0
   852be:	2201      	moveq	r2, #1
   852c0:	4631      	mov	r1, r6
   852c2:	4628      	mov	r0, r5
   852c4:	4c03      	ldr	r4, [pc, #12]	; (852d4 <pio_configure_pin_group+0x98>)
   852c6:	47a0      	blx	r4
	return 1;
   852c8:	2001      	movs	r0, #1
		break;
   852ca:	e7e7      	b.n	8529c <pio_configure_pin_group+0x60>
   852cc:	00085073 	.word	0x00085073
   852d0:	000850b1 	.word	0x000850b1
   852d4:	000850e3 	.word	0x000850e3

000852d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   852d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   852dc:	4604      	mov	r4, r0
   852de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   852e0:	4b0e      	ldr	r3, [pc, #56]	; (8531c <pio_handler_process+0x44>)
   852e2:	4798      	blx	r3
   852e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   852e6:	4620      	mov	r0, r4
   852e8:	4b0d      	ldr	r3, [pc, #52]	; (85320 <pio_handler_process+0x48>)
   852ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   852ec:	4005      	ands	r5, r0
   852ee:	d013      	beq.n	85318 <pio_handler_process+0x40>
   852f0:	4c0c      	ldr	r4, [pc, #48]	; (85324 <pio_handler_process+0x4c>)
   852f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   852f6:	e003      	b.n	85300 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   852f8:	42b4      	cmp	r4, r6
   852fa:	d00d      	beq.n	85318 <pio_handler_process+0x40>
   852fc:	3410      	adds	r4, #16
		while (status != 0) {
   852fe:	b15d      	cbz	r5, 85318 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   85300:	6820      	ldr	r0, [r4, #0]
   85302:	4540      	cmp	r0, r8
   85304:	d1f8      	bne.n	852f8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   85306:	6861      	ldr	r1, [r4, #4]
   85308:	4229      	tst	r1, r5
   8530a:	d0f5      	beq.n	852f8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8530c:	68e3      	ldr	r3, [r4, #12]
   8530e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   85310:	6863      	ldr	r3, [r4, #4]
   85312:	ea25 0503 	bic.w	r5, r5, r3
   85316:	e7ef      	b.n	852f8 <pio_handler_process+0x20>
   85318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8531c:	00085113 	.word	0x00085113
   85320:	00085117 	.word	0x00085117
   85324:	20002290 	.word	0x20002290

00085328 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   85328:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8532a:	210a      	movs	r1, #10
   8532c:	4801      	ldr	r0, [pc, #4]	; (85334 <PIOA_Handler+0xc>)
   8532e:	4b02      	ldr	r3, [pc, #8]	; (85338 <PIOA_Handler+0x10>)
   85330:	4798      	blx	r3
   85332:	bd08      	pop	{r3, pc}
   85334:	400e0c00 	.word	0x400e0c00
   85338:	000852d9 	.word	0x000852d9

0008533c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8533c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8533e:	210b      	movs	r1, #11
   85340:	4801      	ldr	r0, [pc, #4]	; (85348 <PIOB_Handler+0xc>)
   85342:	4b02      	ldr	r3, [pc, #8]	; (8534c <PIOB_Handler+0x10>)
   85344:	4798      	blx	r3
   85346:	bd08      	pop	{r3, pc}
   85348:	400e0e00 	.word	0x400e0e00
   8534c:	000852d9 	.word	0x000852d9

00085350 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85350:	4a17      	ldr	r2, [pc, #92]	; (853b0 <pmc_switch_mck_to_mainck+0x60>)
   85352:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85354:	f023 0303 	bic.w	r3, r3, #3
   85358:	f043 0301 	orr.w	r3, r3, #1
   8535c:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8535e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85360:	f013 0f08 	tst.w	r3, #8
   85364:	d10a      	bne.n	8537c <pmc_switch_mck_to_mainck+0x2c>
   85366:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8536a:	4911      	ldr	r1, [pc, #68]	; (853b0 <pmc_switch_mck_to_mainck+0x60>)
   8536c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8536e:	f012 0f08 	tst.w	r2, #8
   85372:	d103      	bne.n	8537c <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85374:	3b01      	subs	r3, #1
   85376:	d1f9      	bne.n	8536c <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   85378:	2001      	movs	r0, #1
   8537a:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8537c:	4a0c      	ldr	r2, [pc, #48]	; (853b0 <pmc_switch_mck_to_mainck+0x60>)
   8537e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85384:	4318      	orrs	r0, r3
   85386:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85388:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8538a:	f013 0f08 	tst.w	r3, #8
   8538e:	d10a      	bne.n	853a6 <pmc_switch_mck_to_mainck+0x56>
   85390:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85394:	4906      	ldr	r1, [pc, #24]	; (853b0 <pmc_switch_mck_to_mainck+0x60>)
   85396:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85398:	f012 0f08 	tst.w	r2, #8
   8539c:	d105      	bne.n	853aa <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8539e:	3b01      	subs	r3, #1
   853a0:	d1f9      	bne.n	85396 <pmc_switch_mck_to_mainck+0x46>
			return 1;
   853a2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   853a4:	4770      	bx	lr
	return 0;
   853a6:	2000      	movs	r0, #0
   853a8:	4770      	bx	lr
   853aa:	2000      	movs	r0, #0
   853ac:	4770      	bx	lr
   853ae:	bf00      	nop
   853b0:	400e0400 	.word	0x400e0400

000853b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   853b4:	4a17      	ldr	r2, [pc, #92]	; (85414 <pmc_switch_mck_to_pllack+0x60>)
   853b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   853b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   853bc:	4318      	orrs	r0, r3
   853be:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   853c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   853c2:	f013 0f08 	tst.w	r3, #8
   853c6:	d10a      	bne.n	853de <pmc_switch_mck_to_pllack+0x2a>
   853c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   853cc:	4911      	ldr	r1, [pc, #68]	; (85414 <pmc_switch_mck_to_pllack+0x60>)
   853ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   853d0:	f012 0f08 	tst.w	r2, #8
   853d4:	d103      	bne.n	853de <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   853d6:	3b01      	subs	r3, #1
   853d8:	d1f9      	bne.n	853ce <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   853da:	2001      	movs	r0, #1
   853dc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   853de:	4a0d      	ldr	r2, [pc, #52]	; (85414 <pmc_switch_mck_to_pllack+0x60>)
   853e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   853e2:	f023 0303 	bic.w	r3, r3, #3
   853e6:	f043 0302 	orr.w	r3, r3, #2
   853ea:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   853ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
   853ee:	f013 0f08 	tst.w	r3, #8
   853f2:	d10a      	bne.n	8540a <pmc_switch_mck_to_pllack+0x56>
   853f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   853f8:	4906      	ldr	r1, [pc, #24]	; (85414 <pmc_switch_mck_to_pllack+0x60>)
   853fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   853fc:	f012 0f08 	tst.w	r2, #8
   85400:	d105      	bne.n	8540e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85402:	3b01      	subs	r3, #1
   85404:	d1f9      	bne.n	853fa <pmc_switch_mck_to_pllack+0x46>
			return 1;
   85406:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   85408:	4770      	bx	lr
	return 0;
   8540a:	2000      	movs	r0, #0
   8540c:	4770      	bx	lr
   8540e:	2000      	movs	r0, #0
   85410:	4770      	bx	lr
   85412:	bf00      	nop
   85414:	400e0400 	.word	0x400e0400

00085418 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   85418:	4a08      	ldr	r2, [pc, #32]	; (8543c <pmc_osc_enable_main_xtal+0x24>)
   8541a:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   8541c:	f023 0303 	bic.w	r3, r3, #3
   85420:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85424:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   85428:	0200      	lsls	r0, r0, #8
   8542a:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8542c:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   8542e:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   85430:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85432:	f013 0f01 	tst.w	r3, #1
   85436:	d0fb      	beq.n	85430 <pmc_osc_enable_main_xtal+0x18>
}
   85438:	4770      	bx	lr
   8543a:	bf00      	nop
   8543c:	400e0400 	.word	0x400e0400

00085440 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   85440:	4b02      	ldr	r3, [pc, #8]	; (8544c <pmc_osc_is_ready_main_xtal+0xc>)
   85442:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85444:	f000 0001 	and.w	r0, r0, #1
   85448:	4770      	bx	lr
   8544a:	bf00      	nop
   8544c:	400e0400 	.word	0x400e0400

00085450 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   85450:	4b02      	ldr	r3, [pc, #8]	; (8545c <pmc_osc_is_ready_mainck+0xc>)
   85452:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85454:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   85458:	4770      	bx	lr
   8545a:	bf00      	nop
   8545c:	400e0400 	.word	0x400e0400

00085460 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   85460:	4b06      	ldr	r3, [pc, #24]	; (8547c <pmc_mainck_osc_select+0x1c>)
   85462:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   85464:	b930      	cbnz	r0, 85474 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   85466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8546a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8546e:	4a03      	ldr	r2, [pc, #12]	; (8547c <pmc_mainck_osc_select+0x1c>)
   85470:	6213      	str	r3, [r2, #32]
   85472:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   85474:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   85478:	e7f7      	b.n	8546a <pmc_mainck_osc_select+0xa>
   8547a:	bf00      	nop
   8547c:	400e0400 	.word	0x400e0400

00085480 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   85480:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   85484:	4b01      	ldr	r3, [pc, #4]	; (8548c <pmc_disable_pllack+0xc>)
   85486:	629a      	str	r2, [r3, #40]	; 0x28
   85488:	4770      	bx	lr
   8548a:	bf00      	nop
   8548c:	400e0400 	.word	0x400e0400

00085490 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   85490:	4b02      	ldr	r3, [pc, #8]	; (8549c <pmc_is_locked_pllack+0xc>)
   85492:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85494:	f000 0002 	and.w	r0, r0, #2
   85498:	4770      	bx	lr
   8549a:	bf00      	nop
   8549c:	400e0400 	.word	0x400e0400

000854a0 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   854a0:	4b02      	ldr	r3, [pc, #8]	; (854ac <pmc_is_locked_upll+0xc>)
   854a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854a4:	f000 0040 	and.w	r0, r0, #64	; 0x40
   854a8:	4770      	bx	lr
   854aa:	bf00      	nop
   854ac:	400e0400 	.word	0x400e0400

000854b0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   854b0:	281d      	cmp	r0, #29
   854b2:	d80e      	bhi.n	854d2 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   854b4:	281f      	cmp	r0, #31
   854b6:	d80e      	bhi.n	854d6 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   854b8:	4b09      	ldr	r3, [pc, #36]	; (854e0 <pmc_enable_periph_clk+0x30>)
   854ba:	699a      	ldr	r2, [r3, #24]
   854bc:	2301      	movs	r3, #1
   854be:	4083      	lsls	r3, r0
   854c0:	4393      	bics	r3, r2
   854c2:	d00a      	beq.n	854da <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   854c4:	2301      	movs	r3, #1
   854c6:	fa03 f000 	lsl.w	r0, r3, r0
   854ca:	4b05      	ldr	r3, [pc, #20]	; (854e0 <pmc_enable_periph_clk+0x30>)
   854cc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   854ce:	2000      	movs	r0, #0
   854d0:	4770      	bx	lr
		return 1;
   854d2:	2001      	movs	r0, #1
   854d4:	4770      	bx	lr
	return 0;
   854d6:	2000      	movs	r0, #0
   854d8:	4770      	bx	lr
   854da:	2000      	movs	r0, #0
}
   854dc:	4770      	bx	lr
   854de:	bf00      	nop
   854e0:	400e0400 	.word	0x400e0400

000854e4 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   854e4:	281d      	cmp	r0, #29
   854e6:	d810      	bhi.n	8550a <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   854e8:	281f      	cmp	r0, #31
   854ea:	d810      	bhi.n	8550e <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   854ec:	4b09      	ldr	r3, [pc, #36]	; (85514 <pmc_disable_periph_clk+0x30>)
   854ee:	699a      	ldr	r2, [r3, #24]
   854f0:	2301      	movs	r3, #1
   854f2:	4083      	lsls	r3, r0
   854f4:	4393      	bics	r3, r2
   854f6:	d001      	beq.n	854fc <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   854f8:	2000      	movs	r0, #0
}
   854fa:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   854fc:	2301      	movs	r3, #1
   854fe:	fa03 f000 	lsl.w	r0, r3, r0
   85502:	4b04      	ldr	r3, [pc, #16]	; (85514 <pmc_disable_periph_clk+0x30>)
   85504:	6158      	str	r0, [r3, #20]
	return 0;
   85506:	2000      	movs	r0, #0
   85508:	4770      	bx	lr
		return 1;
   8550a:	2001      	movs	r0, #1
   8550c:	4770      	bx	lr
	return 0;
   8550e:	2000      	movs	r0, #0
   85510:	4770      	bx	lr
   85512:	bf00      	nop
   85514:	400e0400 	.word	0x400e0400

00085518 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   85518:	f44f 7380 	mov.w	r3, #256	; 0x100
   8551c:	fa03 f000 	lsl.w	r0, r3, r0
   85520:	4b01      	ldr	r3, [pc, #4]	; (85528 <pmc_enable_pck+0x10>)
   85522:	6018      	str	r0, [r3, #0]
   85524:	4770      	bx	lr
   85526:	bf00      	nop
   85528:	400e0400 	.word	0x400e0400

0008552c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   8552c:	4b03      	ldr	r3, [pc, #12]	; (8553c <pmc_set_fast_startup_input+0x10>)
   8552e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   85530:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   85534:	4310      	orrs	r0, r2
   85536:	6718      	str	r0, [r3, #112]	; 0x70
   85538:	4770      	bx	lr
   8553a:	bf00      	nop
   8553c:	400e0400 	.word	0x400e0400

00085540 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   85540:	4b02      	ldr	r3, [pc, #8]	; (8554c <pmc_is_wakeup_clocks_restored+0xc>)
   85542:	7818      	ldrb	r0, [r3, #0]
}
   85544:	f080 0001 	eor.w	r0, r0, #1
   85548:	4770      	bx	lr
   8554a:	bf00      	nop
   8554c:	20002300 	.word	0x20002300

00085550 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   85550:	b508      	push	{r3, lr}
   85552:	2014      	movs	r0, #20
   85554:	4b01      	ldr	r3, [pc, #4]	; (8555c <spi_enable_clock+0xc>)
   85556:	4798      	blx	r3
   85558:	bd08      	pop	{r3, pc}
   8555a:	bf00      	nop
   8555c:	000854b1 	.word	0x000854b1

00085560 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   85560:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   85562:	2014      	movs	r0, #20
   85564:	4b01      	ldr	r3, [pc, #4]	; (8556c <spi_disable_clock+0xc>)
   85566:	4798      	blx	r3
   85568:	bd08      	pop	{r3, pc}
   8556a:	bf00      	nop
   8556c:	000854e5 	.word	0x000854e5

00085570 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   85570:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   85572:	f643 2399 	movw	r3, #15001	; 0x3a99
   85576:	6904      	ldr	r4, [r0, #16]
   85578:	f014 0f01 	tst.w	r4, #1
   8557c:	d103      	bne.n	85586 <spi_read+0x16>
		if (!timeout--) {
   8557e:	3b01      	subs	r3, #1
   85580:	d1f9      	bne.n	85576 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   85582:	2001      	movs	r0, #1
   85584:	e009      	b.n	8559a <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   85586:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   85588:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   8558a:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   8558e:	bf1c      	itt	ne
   85590:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   85594:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   85596:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   85598:	2000      	movs	r0, #0
}
   8559a:	bc10      	pop	{r4}
   8559c:	4770      	bx	lr

0008559e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   8559e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   855a0:	f643 2499 	movw	r4, #15001	; 0x3a99
   855a4:	6905      	ldr	r5, [r0, #16]
   855a6:	f015 0f02 	tst.w	r5, #2
   855aa:	d103      	bne.n	855b4 <spi_write+0x16>
		if (!timeout--) {
   855ac:	3c01      	subs	r4, #1
   855ae:	d1f9      	bne.n	855a4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   855b0:	2001      	movs	r0, #1
   855b2:	e00c      	b.n	855ce <spi_write+0x30>
   855b4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   855b6:	f014 0f02 	tst.w	r4, #2
   855ba:	d006      	beq.n	855ca <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   855bc:	0412      	lsls	r2, r2, #16
   855be:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   855c2:	4311      	orrs	r1, r2
		if (uc_last) {
   855c4:	b10b      	cbz	r3, 855ca <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   855c6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   855ca:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   855cc:	2000      	movs	r0, #0
}
   855ce:	bc30      	pop	{r4, r5}
   855d0:	4770      	bx	lr

000855d2 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   855d2:	b932      	cbnz	r2, 855e2 <spi_set_clock_polarity+0x10>
   855d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   855d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   855da:	f023 0301 	bic.w	r3, r3, #1
   855de:	6303      	str	r3, [r0, #48]	; 0x30
   855e0:	4770      	bx	lr
   855e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   855e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   855e8:	f043 0301 	orr.w	r3, r3, #1
   855ec:	6303      	str	r3, [r0, #48]	; 0x30
   855ee:	4770      	bx	lr

000855f0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   855f0:	b932      	cbnz	r2, 85600 <spi_set_clock_phase+0x10>
   855f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   855f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   855f8:	f023 0302 	bic.w	r3, r3, #2
   855fc:	6303      	str	r3, [r0, #48]	; 0x30
   855fe:	4770      	bx	lr
   85600:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   85604:	6b03      	ldr	r3, [r0, #48]	; 0x30
   85606:	f043 0302 	orr.w	r3, r3, #2
   8560a:	6303      	str	r3, [r0, #48]	; 0x30
   8560c:	4770      	bx	lr

0008560e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   8560e:	1e43      	subs	r3, r0, #1
   85610:	4419      	add	r1, r3
   85612:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   85616:	1e43      	subs	r3, r0, #1
   85618:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   8561a:	bf94      	ite	ls
   8561c:	b200      	sxthls	r0, r0
		return -1;
   8561e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   85622:	4770      	bx	lr

00085624 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   85624:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   85628:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8562a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   8562e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   85630:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85632:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   85636:	630a      	str	r2, [r1, #48]	; 0x30
   85638:	4770      	bx	lr
	...

0008563c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   8563c:	4603      	mov	r3, r0
   8563e:	b9c0      	cbnz	r0, 85672 <udd_sleep_mode+0x36>
   85640:	4a18      	ldr	r2, [pc, #96]	; (856a4 <udd_sleep_mode+0x68>)
   85642:	7812      	ldrb	r2, [r2, #0]
   85644:	b192      	cbz	r2, 8566c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85646:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8564a:	b672      	cpsid	i
   8564c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85650:	4a15      	ldr	r2, [pc, #84]	; (856a8 <udd_sleep_mode+0x6c>)
   85652:	2100      	movs	r1, #0
   85654:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   85656:	4915      	ldr	r1, [pc, #84]	; (856ac <udd_sleep_mode+0x70>)
   85658:	788a      	ldrb	r2, [r1, #2]
   8565a:	3a01      	subs	r2, #1
   8565c:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8565e:	b928      	cbnz	r0, 8566c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   85660:	4a11      	ldr	r2, [pc, #68]	; (856a8 <udd_sleep_mode+0x6c>)
   85662:	2101      	movs	r1, #1
   85664:	7011      	strb	r1, [r2, #0]
   85666:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8566a:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8566c:	4a0d      	ldr	r2, [pc, #52]	; (856a4 <udd_sleep_mode+0x68>)
   8566e:	7013      	strb	r3, [r2, #0]
}
   85670:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   85672:	4a0c      	ldr	r2, [pc, #48]	; (856a4 <udd_sleep_mode+0x68>)
   85674:	7812      	ldrb	r2, [r2, #0]
   85676:	2a00      	cmp	r2, #0
   85678:	d1f8      	bne.n	8566c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8567a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8567e:	b672      	cpsid	i
   85680:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85684:	4a08      	ldr	r2, [pc, #32]	; (856a8 <udd_sleep_mode+0x6c>)
   85686:	2100      	movs	r1, #0
   85688:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   8568a:	4908      	ldr	r1, [pc, #32]	; (856ac <udd_sleep_mode+0x70>)
   8568c:	788a      	ldrb	r2, [r1, #2]
   8568e:	3201      	adds	r2, #1
   85690:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   85692:	2800      	cmp	r0, #0
   85694:	d1ea      	bne.n	8566c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   85696:	4a04      	ldr	r2, [pc, #16]	; (856a8 <udd_sleep_mode+0x6c>)
   85698:	2101      	movs	r1, #1
   8569a:	7011      	strb	r1, [r2, #0]
   8569c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   856a0:	b662      	cpsie	i
}
   856a2:	e7e3      	b.n	8566c <udd_sleep_mode+0x30>
   856a4:	20002302 	.word	0x20002302
   856a8:	200006ea 	.word	0x200006ea
   856ac:	20002dd8 	.word	0x20002dd8

000856b0 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856b0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   856b4:	b672      	cpsid	i
   856b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856ba:	4a0e      	ldr	r2, [pc, #56]	; (856f4 <udd_ctrl_init+0x44>)
   856bc:	2100      	movs	r1, #0
   856be:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   856c0:	4a0d      	ldr	r2, [pc, #52]	; (856f8 <udd_ctrl_init+0x48>)
   856c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   856c6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   856ca:	b92b      	cbnz	r3, 856d8 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   856cc:	4b09      	ldr	r3, [pc, #36]	; (856f4 <udd_ctrl_init+0x44>)
   856ce:	2201      	movs	r2, #1
   856d0:	701a      	strb	r2, [r3, #0]
   856d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   856d6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   856d8:	4b07      	ldr	r3, [pc, #28]	; (856f8 <udd_ctrl_init+0x48>)
   856da:	f44f 7200 	mov.w	r2, #512	; 0x200
   856de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   856e2:	4a06      	ldr	r2, [pc, #24]	; (856fc <udd_ctrl_init+0x4c>)
   856e4:	2300      	movs	r3, #0
   856e6:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   856e8:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   856ea:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   856ec:	4a04      	ldr	r2, [pc, #16]	; (85700 <udd_ctrl_init+0x50>)
   856ee:	7013      	strb	r3, [r2, #0]
}
   856f0:	4770      	bx	lr
   856f2:	bf00      	nop
   856f4:	200006ea 	.word	0x200006ea
   856f8:	400a4000 	.word	0x400a4000
   856fc:	20002dec 	.word	0x20002dec
   85700:	20002308 	.word	0x20002308

00085704 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85704:	4b03      	ldr	r3, [pc, #12]	; (85714 <udd_ctrl_stall_data+0x10>)
   85706:	2205      	movs	r2, #5
   85708:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8570a:	4b03      	ldr	r3, [pc, #12]	; (85718 <udd_ctrl_stall_data+0x14>)
   8570c:	2220      	movs	r2, #32
   8570e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85712:	4770      	bx	lr
   85714:	20002308 	.word	0x20002308
   85718:	400a4000 	.word	0x400a4000

0008571c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8571c:	4b11      	ldr	r3, [pc, #68]	; (85764 <udd_ctrl_send_zlp_in+0x48>)
   8571e:	2203      	movs	r2, #3
   85720:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85722:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   85726:	b672      	cpsid	i
   85728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8572c:	4b0e      	ldr	r3, [pc, #56]	; (85768 <udd_ctrl_send_zlp_in+0x4c>)
   8572e:	2200      	movs	r2, #0
   85730:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   85732:	4b0e      	ldr	r3, [pc, #56]	; (8576c <udd_ctrl_send_zlp_in+0x50>)
   85734:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85738:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8573c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   85740:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85744:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   85748:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8574c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   85750:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85754:	b929      	cbnz	r1, 85762 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   85756:	4b04      	ldr	r3, [pc, #16]	; (85768 <udd_ctrl_send_zlp_in+0x4c>)
   85758:	2201      	movs	r2, #1
   8575a:	701a      	strb	r2, [r3, #0]
   8575c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85760:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   85762:	4770      	bx	lr
   85764:	20002308 	.word	0x20002308
   85768:	200006ea 	.word	0x200006ea
   8576c:	400a4000 	.word	0x400a4000

00085770 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   85770:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   85772:	4b02      	ldr	r3, [pc, #8]	; (8577c <udd_ctrl_endofrequest+0xc>)
   85774:	691b      	ldr	r3, [r3, #16]
   85776:	b103      	cbz	r3, 8577a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   85778:	4798      	blx	r3
	}
}
   8577a:	bd08      	pop	{r3, pc}
   8577c:	20002dec 	.word	0x20002dec

00085780 <udd_ctrl_in_sent>:
{
   85780:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85782:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85786:	b672      	cpsid	i
   85788:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8578c:	4a4c      	ldr	r2, [pc, #304]	; (858c0 <udd_ctrl_in_sent+0x140>)
   8578e:	2100      	movs	r1, #0
   85790:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   85792:	4a4c      	ldr	r2, [pc, #304]	; (858c4 <udd_ctrl_in_sent+0x144>)
   85794:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85798:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8579c:	b92b      	cbnz	r3, 857aa <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   8579e:	4b48      	ldr	r3, [pc, #288]	; (858c0 <udd_ctrl_in_sent+0x140>)
   857a0:	2201      	movs	r2, #1
   857a2:	701a      	strb	r2, [r3, #0]
   857a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   857a8:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   857aa:	4b47      	ldr	r3, [pc, #284]	; (858c8 <udd_ctrl_in_sent+0x148>)
   857ac:	781b      	ldrb	r3, [r3, #0]
   857ae:	2b03      	cmp	r3, #3
   857b0:	d05a      	beq.n	85868 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   857b2:	4b46      	ldr	r3, [pc, #280]	; (858cc <udd_ctrl_in_sent+0x14c>)
   857b4:	881b      	ldrh	r3, [r3, #0]
   857b6:	4a46      	ldr	r2, [pc, #280]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857b8:	8994      	ldrh	r4, [r2, #12]
   857ba:	1ae4      	subs	r4, r4, r3
   857bc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   857be:	b9c4      	cbnz	r4, 857f2 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   857c0:	4a44      	ldr	r2, [pc, #272]	; (858d4 <udd_ctrl_in_sent+0x154>)
   857c2:	8811      	ldrh	r1, [r2, #0]
   857c4:	440b      	add	r3, r1
   857c6:	b29b      	uxth	r3, r3
   857c8:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   857ca:	4a41      	ldr	r2, [pc, #260]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857cc:	88d2      	ldrh	r2, [r2, #6]
   857ce:	429a      	cmp	r2, r3
   857d0:	d04f      	beq.n	85872 <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   857d2:	4b41      	ldr	r3, [pc, #260]	; (858d8 <udd_ctrl_in_sent+0x158>)
   857d4:	781b      	ldrb	r3, [r3, #0]
   857d6:	2b00      	cmp	r3, #0
   857d8:	d14b      	bne.n	85872 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   857da:	4b3d      	ldr	r3, [pc, #244]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857dc:	695b      	ldr	r3, [r3, #20]
   857de:	2b00      	cmp	r3, #0
   857e0:	d06c      	beq.n	858bc <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   857e2:	4798      	blx	r3
   857e4:	2800      	cmp	r0, #0
   857e6:	d069      	beq.n	858bc <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   857e8:	4b38      	ldr	r3, [pc, #224]	; (858cc <udd_ctrl_in_sent+0x14c>)
   857ea:	2200      	movs	r2, #0
   857ec:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   857ee:	4b38      	ldr	r3, [pc, #224]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857f0:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   857f2:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   857f4:	bf92      	itee	ls
   857f6:	2201      	movls	r2, #1
		b_shortpacket = false;
   857f8:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   857fa:	2440      	movhi	r4, #64	; 0x40
   857fc:	4b36      	ldr	r3, [pc, #216]	; (858d8 <udd_ctrl_in_sent+0x158>)
   857fe:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85800:	4b33      	ldr	r3, [pc, #204]	; (858d0 <udd_ctrl_in_sent+0x150>)
   85802:	689a      	ldr	r2, [r3, #8]
   85804:	4b31      	ldr	r3, [pc, #196]	; (858cc <udd_ctrl_in_sent+0x14c>)
   85806:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85808:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   8580c:	b672      	cpsid	i
   8580e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85812:	4b2b      	ldr	r3, [pc, #172]	; (858c0 <udd_ctrl_in_sent+0x140>)
   85814:	2100      	movs	r1, #0
   85816:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   85818:	4b2a      	ldr	r3, [pc, #168]	; (858c4 <udd_ctrl_in_sent+0x144>)
   8581a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8581e:	f413 7f00 	tst.w	r3, #512	; 0x200
   85822:	d140      	bne.n	858a6 <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   85824:	b14c      	cbz	r4, 8583a <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85826:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85828:	4b2c      	ldr	r3, [pc, #176]	; (858dc <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   8582a:	4619      	mov	r1, r3
   8582c:	3301      	adds	r3, #1
   8582e:	f812 0b01 	ldrb.w	r0, [r2], #1
   85832:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   85834:	b2d9      	uxtb	r1, r3
   85836:	42a1      	cmp	r1, r4
   85838:	d3f7      	bcc.n	8582a <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   8583a:	4a24      	ldr	r2, [pc, #144]	; (858cc <udd_ctrl_in_sent+0x14c>)
   8583c:	8813      	ldrh	r3, [r2, #0]
   8583e:	441c      	add	r4, r3
   85840:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   85842:	4b20      	ldr	r3, [pc, #128]	; (858c4 <udd_ctrl_in_sent+0x144>)
   85844:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85848:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8584c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   85850:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85854:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85858:	bb7d      	cbnz	r5, 858ba <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   8585a:	4b19      	ldr	r3, [pc, #100]	; (858c0 <udd_ctrl_in_sent+0x140>)
   8585c:	2201      	movs	r2, #1
   8585e:	701a      	strb	r2, [r3, #0]
   85860:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85864:	b662      	cpsie	i
}
   85866:	e028      	b.n	858ba <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   85868:	4b1d      	ldr	r3, [pc, #116]	; (858e0 <udd_ctrl_in_sent+0x160>)
   8586a:	4798      	blx	r3
		udd_ctrl_init();
   8586c:	4b1d      	ldr	r3, [pc, #116]	; (858e4 <udd_ctrl_in_sent+0x164>)
   8586e:	4798      	blx	r3
		return;
   85870:	e023      	b.n	858ba <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85872:	4b15      	ldr	r3, [pc, #84]	; (858c8 <udd_ctrl_in_sent+0x148>)
   85874:	2204      	movs	r2, #4
   85876:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85878:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   8587c:	b672      	cpsid	i
   8587e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85882:	4b0f      	ldr	r3, [pc, #60]	; (858c0 <udd_ctrl_in_sent+0x140>)
   85884:	2200      	movs	r2, #0
   85886:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   85888:	4b0e      	ldr	r3, [pc, #56]	; (858c4 <udd_ctrl_in_sent+0x144>)
   8588a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8588e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   85892:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85896:	b981      	cbnz	r1, 858ba <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   85898:	4b09      	ldr	r3, [pc, #36]	; (858c0 <udd_ctrl_in_sent+0x140>)
   8589a:	2201      	movs	r2, #1
   8589c:	701a      	strb	r2, [r3, #0]
   8589e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   858a2:	b662      	cpsie	i
}
   858a4:	e009      	b.n	858ba <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   858a6:	b92d      	cbnz	r5, 858b4 <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   858a8:	4b05      	ldr	r3, [pc, #20]	; (858c0 <udd_ctrl_in_sent+0x140>)
   858aa:	2201      	movs	r2, #1
   858ac:	701a      	strb	r2, [r3, #0]
   858ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   858b2:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   858b4:	4b04      	ldr	r3, [pc, #16]	; (858c8 <udd_ctrl_in_sent+0x148>)
   858b6:	2204      	movs	r2, #4
   858b8:	701a      	strb	r2, [r3, #0]
}
   858ba:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   858bc:	2201      	movs	r2, #1
   858be:	e79d      	b.n	857fc <udd_ctrl_in_sent+0x7c>
   858c0:	200006ea 	.word	0x200006ea
   858c4:	400a4000 	.word	0x400a4000
   858c8:	20002308 	.word	0x20002308
   858cc:	20002304 	.word	0x20002304
   858d0:	20002dec 	.word	0x20002dec
   858d4:	20002306 	.word	0x20002306
   858d8:	20002301 	.word	0x20002301
   858dc:	20180000 	.word	0x20180000
   858e0:	00085771 	.word	0x00085771
   858e4:	000856b1 	.word	0x000856b1

000858e8 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   858e8:	b538      	push	{r3, r4, r5, lr}
   858ea:	4603      	mov	r3, r0
   858ec:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   858ee:	7d19      	ldrb	r1, [r3, #20]
   858f0:	f011 0f01 	tst.w	r1, #1
   858f4:	d011      	beq.n	8591a <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   858f6:	7d19      	ldrb	r1, [r3, #20]
   858f8:	f36f 0100 	bfc	r1, #0, #1
   858fc:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   858fe:	681c      	ldr	r4, [r3, #0]
   85900:	b15c      	cbz	r4, 8591a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85902:	f102 0108 	add.w	r1, r2, #8
   85906:	0149      	lsls	r1, r1, #5
   85908:	4d04      	ldr	r5, [pc, #16]	; (8591c <udd_ep_finish_job+0x34>)
   8590a:	5869      	ldr	r1, [r5, r1]
   8590c:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   85910:	bf18      	it	ne
   85912:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85916:	6899      	ldr	r1, [r3, #8]
   85918:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   8591a:	bd38      	pop	{r3, r4, r5, pc}
   8591c:	400a4000 	.word	0x400a4000

00085920 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85922:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85924:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   85926:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8592a:	496c      	ldr	r1, [pc, #432]	; (85adc <udd_ep_trans_done+0x1bc>)
   8592c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   85930:	7d09      	ldrb	r1, [r1, #20]
   85932:	f011 0f01 	tst.w	r1, #1
   85936:	f000 80ca 	beq.w	85ace <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8593a:	4601      	mov	r1, r0
   8593c:	4867      	ldr	r0, [pc, #412]	; (85adc <udd_ep_trans_done+0x1bc>)
   8593e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   85942:	68cd      	ldr	r5, [r1, #12]
   85944:	6888      	ldr	r0, [r1, #8]
   85946:	4285      	cmp	r5, r0
   85948:	f000 80a6 	beq.w	85a98 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8594c:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8594e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   85952:	d863      	bhi.n	85a1c <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   85954:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   85956:	0151      	lsls	r1, r2, #5
   85958:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8595c:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85960:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   85964:	f016 0f08 	tst.w	r6, #8
   85968:	d014      	beq.n	85994 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8596a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8596e:	f006 0607 	and.w	r6, r6, #7
   85972:	2108      	movs	r1, #8
   85974:	40b1      	lsls	r1, r6
   85976:	3901      	subs	r1, #1
   85978:	4201      	tst	r1, r0
   8597a:	d068      	beq.n	85a4e <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8597c:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85980:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85984:	4e55      	ldr	r6, [pc, #340]	; (85adc <udd_ep_trans_done+0x1bc>)
   85986:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   8598a:	7d0e      	ldrb	r6, [r1, #20]
   8598c:	f36f 0641 	bfc	r6, #1, #1
   85990:	750e      	strb	r6, [r1, #20]
   85992:	e05c      	b.n	85a4e <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85994:	0151      	lsls	r1, r2, #5
   85996:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8599a:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8599e:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   859a2:	f3c6 1601 	ubfx	r6, r6, #4, #2
   859a6:	2e01      	cmp	r6, #1
   859a8:	d14f      	bne.n	85a4a <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   859aa:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   859ae:	f006 0607 	and.w	r6, r6, #7
   859b2:	2108      	movs	r1, #8
   859b4:	40b1      	lsls	r1, r6
   859b6:	4281      	cmp	r1, r0
   859b8:	d247      	bcs.n	85a4a <udd_ep_trans_done+0x12a>
   859ba:	e048      	b.n	85a4e <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   859bc:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   859c0:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   859c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   859c6:	4a45      	ldr	r2, [pc, #276]	; (85adc <udd_ep_trans_done+0x1bc>)
   859c8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   859cc:	68d1      	ldr	r1, [r2, #12]
   859ce:	4401      	add	r1, r0
   859d0:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   859d2:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   859d4:	4a42      	ldr	r2, [pc, #264]	; (85ae0 <udd_ep_trans_done+0x1c0>)
   859d6:	6911      	ldr	r1, [r2, #16]
   859d8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   859dc:	fa00 f303 	lsl.w	r3, r0, r3
   859e0:	430b      	orrs	r3, r1
   859e2:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   859e4:	2d00      	cmp	r5, #0
   859e6:	d172      	bne.n	85ace <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   859e8:	4b3e      	ldr	r3, [pc, #248]	; (85ae4 <udd_ep_trans_done+0x1c4>)
   859ea:	2201      	movs	r2, #1
   859ec:	701a      	strb	r2, [r3, #0]
   859ee:	f3bf 8f5f 	dmb	sy
   859f2:	b662      	cpsie	i
}
   859f4:	e06b      	b.n	85ace <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   859f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   859fa:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   859fe:	4b38      	ldr	r3, [pc, #224]	; (85ae0 <udd_ep_trans_done+0x1c0>)
   85a00:	6919      	ldr	r1, [r3, #16]
   85a02:	f44f 7080 	mov.w	r0, #256	; 0x100
   85a06:	fa00 f202 	lsl.w	r2, r0, r2
   85a0a:	430a      	orrs	r2, r1
   85a0c:	611a      	str	r2, [r3, #16]
			return;
   85a0e:	e05e      	b.n	85ace <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85a10:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85a14:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85a18:	2400      	movs	r4, #0
   85a1a:	e018      	b.n	85a4e <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   85a1c:	0151      	lsls	r1, r2, #5
   85a1e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85a22:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85a26:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   85a2a:	f014 0408 	ands.w	r4, r4, #8
   85a2e:	d1ef      	bne.n	85a10 <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85a30:	0151      	lsls	r1, r2, #5
   85a32:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85a36:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85a3a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   85a3e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   85a42:	2801      	cmp	r0, #1
   85a44:	d044      	beq.n	85ad0 <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85a46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85a4a:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85a4e:	4926      	ldr	r1, [pc, #152]	; (85ae8 <udd_ep_trans_done+0x1c8>)
   85a50:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   85a54:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   85a58:	4f20      	ldr	r7, [pc, #128]	; (85adc <udd_ep_trans_done+0x1bc>)
   85a5a:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   85a5e:	6876      	ldr	r6, [r6, #4]
   85a60:	4435      	add	r5, r6
   85a62:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85a64:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   85a68:	b672      	cpsid	i
   85a6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85a6e:	4e1d      	ldr	r6, [pc, #116]	; (85ae4 <udd_ep_trans_done+0x1c4>)
   85a70:	2700      	movs	r7, #0
   85a72:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   85a74:	68ce      	ldr	r6, [r1, #12]
   85a76:	f016 0f10 	tst.w	r6, #16
   85a7a:	d09f      	beq.n	859bc <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   85a7c:	b92d      	cbnz	r5, 85a8a <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   85a7e:	4919      	ldr	r1, [pc, #100]	; (85ae4 <udd_ep_trans_done+0x1c4>)
   85a80:	2001      	movs	r0, #1
   85a82:	7008      	strb	r0, [r1, #0]
   85a84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85a88:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   85a8a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85a8e:	4813      	ldr	r0, [pc, #76]	; (85adc <udd_ep_trans_done+0x1bc>)
   85a90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   85a94:	68c8      	ldr	r0, [r1, #12]
   85a96:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   85a98:	0151      	lsls	r1, r2, #5
   85a9a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85a9e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85aa2:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   85aa6:	f010 0f08 	tst.w	r0, #8
   85aaa:	d008      	beq.n	85abe <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   85aac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   85ab0:	4c0a      	ldr	r4, [pc, #40]	; (85adc <udd_ep_trans_done+0x1bc>)
   85ab2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   85ab6:	7d00      	ldrb	r0, [r0, #20]
   85ab8:	f010 0f02 	tst.w	r0, #2
   85abc:	d19b      	bne.n	859f6 <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   85abe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   85ac2:	2100      	movs	r1, #0
   85ac4:	4805      	ldr	r0, [pc, #20]	; (85adc <udd_ep_trans_done+0x1bc>)
   85ac6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   85aca:	4b08      	ldr	r3, [pc, #32]	; (85aec <udd_ep_trans_done+0x1cc>)
   85acc:	4798      	blx	r3
}
   85ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85ad0:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85ad4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   85ad8:	e7b9      	b.n	85a4e <udd_ep_trans_done+0x12e>
   85ada:	bf00      	nop
   85adc:	2000230c 	.word	0x2000230c
   85ae0:	400a4000 	.word	0x400a4000
   85ae4:	200006ea 	.word	0x200006ea
   85ae8:	400a4300 	.word	0x400a4300
   85aec:	000858e9 	.word	0x000858e9

00085af0 <UDPHS_Handler>:
{
   85af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   85af4:	201d      	movs	r0, #29
   85af6:	4ba0      	ldr	r3, [pc, #640]	; (85d78 <UDPHS_Handler+0x288>)
   85af8:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   85afa:	4ba0      	ldr	r3, [pc, #640]	; (85d7c <UDPHS_Handler+0x28c>)
   85afc:	4798      	blx	r3
   85afe:	b920      	cbnz	r0, 85b0a <UDPHS_Handler+0x1a>
   85b00:	4b9f      	ldr	r3, [pc, #636]	; (85d80 <UDPHS_Handler+0x290>)
   85b02:	695b      	ldr	r3, [r3, #20]
   85b04:	f013 0f02 	tst.w	r3, #2
   85b08:	d041      	beq.n	85b8e <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   85b0a:	4b9d      	ldr	r3, [pc, #628]	; (85d80 <UDPHS_Handler+0x290>)
   85b0c:	695b      	ldr	r3, [r3, #20]
   85b0e:	f013 0f08 	tst.w	r3, #8
   85b12:	d143      	bne.n	85b9c <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   85b14:	4b9a      	ldr	r3, [pc, #616]	; (85d80 <UDPHS_Handler+0x290>)
   85b16:	695b      	ldr	r3, [r3, #20]
   85b18:	f013 0f04 	tst.w	r3, #4
   85b1c:	d14c      	bne.n	85bb8 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   85b1e:	4a98      	ldr	r2, [pc, #608]	; (85d80 <UDPHS_Handler+0x290>)
   85b20:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   85b24:	6952      	ldr	r2, [r2, #20]
   85b26:	f412 7f80 	tst.w	r2, #256	; 0x100
   85b2a:	d029      	beq.n	85b80 <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   85b2c:	4a94      	ldr	r2, [pc, #592]	; (85d80 <UDPHS_Handler+0x290>)
   85b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85b32:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   85b3a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   85b3e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   85b42:	d13f      	bne.n	85bc4 <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   85b44:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85b48:	d006      	beq.n	85b58 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85b4a:	4a8d      	ldr	r2, [pc, #564]	; (85d80 <UDPHS_Handler+0x290>)
   85b4c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85b50:	f412 6f80 	tst.w	r2, #1024	; 0x400
   85b54:	f040 809e 	bne.w	85c94 <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   85b58:	f413 7f00 	tst.w	r3, #512	; 0x200
   85b5c:	f040 809d 	bne.w	85c9a <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   85b60:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85b64:	d004      	beq.n	85b70 <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   85b66:	4a86      	ldr	r2, [pc, #536]	; (85d80 <UDPHS_Handler+0x290>)
   85b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85b6c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   85b70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   85b74:	f040 8144 	bne.w	85e00 <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   85b78:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   85b7c:	f040 8155 	bne.w	85e2a <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85b80:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85b82:	497f      	ldr	r1, [pc, #508]	; (85d80 <UDPHS_Handler+0x290>)
   85b84:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85b88:	f44f 7e80 	mov.w	lr, #256	; 0x100
   85b8c:	e19c      	b.n	85ec8 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   85b8e:	b672      	cpsid	i
   85b90:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85b94:	4b7b      	ldr	r3, [pc, #492]	; (85d84 <UDPHS_Handler+0x294>)
   85b96:	2200      	movs	r2, #0
   85b98:	701a      	strb	r2, [r3, #0]
		return;
   85b9a:	e008      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ack_sof();
   85b9c:	4b78      	ldr	r3, [pc, #480]	; (85d80 <UDPHS_Handler+0x290>)
   85b9e:	2208      	movs	r2, #8
   85ba0:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   85ba2:	695b      	ldr	r3, [r3, #20]
   85ba4:	f013 0f01 	tst.w	r3, #1
   85ba8:	d003      	beq.n	85bb2 <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   85baa:	4b77      	ldr	r3, [pc, #476]	; (85d88 <UDPHS_Handler+0x298>)
   85bac:	4798      	blx	r3
}
   85bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   85bb2:	4b76      	ldr	r3, [pc, #472]	; (85d8c <UDPHS_Handler+0x29c>)
   85bb4:	4798      	blx	r3
   85bb6:	e7f8      	b.n	85baa <UDPHS_Handler+0xba>
		udd_ack_msof();
   85bb8:	4b71      	ldr	r3, [pc, #452]	; (85d80 <UDPHS_Handler+0x290>)
   85bba:	2204      	movs	r2, #4
   85bbc:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   85bbe:	4b73      	ldr	r3, [pc, #460]	; (85d8c <UDPHS_Handler+0x29c>)
   85bc0:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85bc2:	e7f4      	b.n	85bae <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85bc4:	4b72      	ldr	r3, [pc, #456]	; (85d90 <UDPHS_Handler+0x2a0>)
   85bc6:	781b      	ldrb	r3, [r3, #0]
   85bc8:	2b00      	cmp	r3, #0
   85bca:	d140      	bne.n	85c4e <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   85bcc:	4b6c      	ldr	r3, [pc, #432]	; (85d80 <UDPHS_Handler+0x290>)
   85bce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85bd2:	f3c3 530a 	ubfx	r3, r3, #20, #11
   85bd6:	2b08      	cmp	r3, #8
   85bd8:	d13e      	bne.n	85c58 <UDPHS_Handler+0x168>
   85bda:	4a6e      	ldr	r2, [pc, #440]	; (85d94 <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85bdc:	4b6e      	ldr	r3, [pc, #440]	; (85d98 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   85bde:	486f      	ldr	r0, [pc, #444]	; (85d9c <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85be0:	4619      	mov	r1, r3
   85be2:	3301      	adds	r3, #1
   85be4:	7809      	ldrb	r1, [r1, #0]
   85be6:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   85bea:	4283      	cmp	r3, r0
   85bec:	d1f8      	bne.n	85be0 <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   85bee:	4b6c      	ldr	r3, [pc, #432]	; (85da0 <UDPHS_Handler+0x2b0>)
   85bf0:	4798      	blx	r3
   85bf2:	2800      	cmp	r0, #0
   85bf4:	d038      	beq.n	85c68 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   85bf6:	4b62      	ldr	r3, [pc, #392]	; (85d80 <UDPHS_Handler+0x290>)
   85bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85bfc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   85c00:	4b68      	ldr	r3, [pc, #416]	; (85da4 <UDPHS_Handler+0x2b4>)
   85c02:	f993 3000 	ldrsb.w	r3, [r3]
   85c06:	2b00      	cmp	r3, #0
   85c08:	db36      	blt.n	85c78 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   85c0a:	4b66      	ldr	r3, [pc, #408]	; (85da4 <UDPHS_Handler+0x2b4>)
   85c0c:	88db      	ldrh	r3, [r3, #6]
   85c0e:	2b00      	cmp	r3, #0
   85c10:	d03d      	beq.n	85c8e <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c12:	2300      	movs	r3, #0
   85c14:	4a64      	ldr	r2, [pc, #400]	; (85da8 <UDPHS_Handler+0x2b8>)
   85c16:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85c18:	4a64      	ldr	r2, [pc, #400]	; (85dac <UDPHS_Handler+0x2bc>)
   85c1a:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85c1c:	4a5c      	ldr	r2, [pc, #368]	; (85d90 <UDPHS_Handler+0x2a0>)
   85c1e:	2101      	movs	r1, #1
   85c20:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   85c22:	4a57      	ldr	r2, [pc, #348]	; (85d80 <UDPHS_Handler+0x290>)
   85c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85c28:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85c2c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   85c30:	b672      	cpsid	i
   85c32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85c36:	4c53      	ldr	r4, [pc, #332]	; (85d84 <UDPHS_Handler+0x294>)
   85c38:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   85c3a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85c3e:	2800      	cmp	r0, #0
   85c40:	d1b5      	bne.n	85bae <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   85c42:	2201      	movs	r2, #1
   85c44:	7022      	strb	r2, [r4, #0]
   85c46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85c4a:	b662      	cpsie	i
}
   85c4c:	e7af      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   85c4e:	4b58      	ldr	r3, [pc, #352]	; (85db0 <UDPHS_Handler+0x2c0>)
   85c50:	4798      	blx	r3
		udd_ctrl_init();
   85c52:	4b58      	ldr	r3, [pc, #352]	; (85db4 <UDPHS_Handler+0x2c4>)
   85c54:	4798      	blx	r3
   85c56:	e7b9      	b.n	85bcc <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   85c58:	4b57      	ldr	r3, [pc, #348]	; (85db8 <UDPHS_Handler+0x2c8>)
   85c5a:	4798      	blx	r3
		udd_ack_setup_received(0);
   85c5c:	4b48      	ldr	r3, [pc, #288]	; (85d80 <UDPHS_Handler+0x290>)
   85c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c62:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85c66:	e7a2      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   85c68:	4b53      	ldr	r3, [pc, #332]	; (85db8 <UDPHS_Handler+0x2c8>)
   85c6a:	4798      	blx	r3
		udd_ack_setup_received(0);
   85c6c:	4b44      	ldr	r3, [pc, #272]	; (85d80 <UDPHS_Handler+0x290>)
   85c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c72:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   85c76:	e79a      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c78:	2300      	movs	r3, #0
   85c7a:	4a4b      	ldr	r2, [pc, #300]	; (85da8 <UDPHS_Handler+0x2b8>)
   85c7c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85c7e:	4a4b      	ldr	r2, [pc, #300]	; (85dac <UDPHS_Handler+0x2bc>)
   85c80:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85c82:	4b43      	ldr	r3, [pc, #268]	; (85d90 <UDPHS_Handler+0x2a0>)
   85c84:	2202      	movs	r2, #2
   85c86:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   85c88:	4b4c      	ldr	r3, [pc, #304]	; (85dbc <UDPHS_Handler+0x2cc>)
   85c8a:	4798      	blx	r3
   85c8c:	e78f      	b.n	85bae <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   85c8e:	4b4c      	ldr	r3, [pc, #304]	; (85dc0 <UDPHS_Handler+0x2d0>)
   85c90:	4798      	blx	r3
			return;
   85c92:	e78c      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   85c94:	4b49      	ldr	r3, [pc, #292]	; (85dbc <UDPHS_Handler+0x2cc>)
   85c96:	4798      	blx	r3
		return true;
   85c98:	e789      	b.n	85bae <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85c9a:	4b3d      	ldr	r3, [pc, #244]	; (85d90 <UDPHS_Handler+0x2a0>)
   85c9c:	781b      	ldrb	r3, [r3, #0]
   85c9e:	2b01      	cmp	r3, #1
   85ca0:	d00b      	beq.n	85cba <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85ca2:	2b02      	cmp	r3, #2
   85ca4:	d001      	beq.n	85caa <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85ca6:	2b04      	cmp	r3, #4
   85ca8:	d104      	bne.n	85cb4 <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   85caa:	4b41      	ldr	r3, [pc, #260]	; (85db0 <UDPHS_Handler+0x2c0>)
   85cac:	4798      	blx	r3
		udd_ctrl_init();
   85cae:	4b41      	ldr	r3, [pc, #260]	; (85db4 <UDPHS_Handler+0x2c4>)
   85cb0:	4798      	blx	r3
		return;
   85cb2:	e77c      	b.n	85bae <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   85cb4:	4b40      	ldr	r3, [pc, #256]	; (85db8 <UDPHS_Handler+0x2c8>)
   85cb6:	4798      	blx	r3
   85cb8:	e7f9      	b.n	85cae <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   85cba:	4b31      	ldr	r3, [pc, #196]	; (85d80 <UDPHS_Handler+0x290>)
   85cbc:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   85cc0:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85cc4:	4b37      	ldr	r3, [pc, #220]	; (85da4 <UDPHS_Handler+0x2b4>)
   85cc6:	899b      	ldrh	r3, [r3, #12]
   85cc8:	4a38      	ldr	r2, [pc, #224]	; (85dac <UDPHS_Handler+0x2bc>)
   85cca:	8814      	ldrh	r4, [r2, #0]
   85ccc:	1822      	adds	r2, r4, r0
   85cce:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85cd0:	bfbc      	itt	lt
   85cd2:	1b1b      	sublt	r3, r3, r4
   85cd4:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85cd6:	4b33      	ldr	r3, [pc, #204]	; (85da4 <UDPHS_Handler+0x2b4>)
   85cd8:	689a      	ldr	r2, [r3, #8]
   85cda:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   85cdc:	b170      	cbz	r0, 85cfc <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85cde:	4b2e      	ldr	r3, [pc, #184]	; (85d98 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   85ce0:	4619      	mov	r1, r3
   85ce2:	3301      	adds	r3, #1
   85ce4:	7809      	ldrb	r1, [r1, #0]
   85ce6:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   85cea:	b2d9      	uxtb	r1, r3
   85cec:	4281      	cmp	r1, r0
   85cee:	d3f7      	bcc.n	85ce0 <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   85cf0:	4404      	add	r4, r0
   85cf2:	b2a4      	uxth	r4, r4
   85cf4:	4b2d      	ldr	r3, [pc, #180]	; (85dac <UDPHS_Handler+0x2bc>)
   85cf6:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85cf8:	2840      	cmp	r0, #64	; 0x40
   85cfa:	d00d      	beq.n	85d18 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85cfc:	4b29      	ldr	r3, [pc, #164]	; (85da4 <UDPHS_Handler+0x2b4>)
   85cfe:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85d00:	695b      	ldr	r3, [r3, #20]
   85d02:	b10b      	cbz	r3, 85d08 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   85d04:	4798      	blx	r3
   85d06:	b370      	cbz	r0, 85d66 <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   85d08:	4b1d      	ldr	r3, [pc, #116]	; (85d80 <UDPHS_Handler+0x290>)
   85d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   85d0e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85d12:	4b2b      	ldr	r3, [pc, #172]	; (85dc0 <UDPHS_Handler+0x2d0>)
   85d14:	4798      	blx	r3
		return;
   85d16:	e74a      	b.n	85bae <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85d18:	4b22      	ldr	r3, [pc, #136]	; (85da4 <UDPHS_Handler+0x2b4>)
   85d1a:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   85d1c:	4b22      	ldr	r3, [pc, #136]	; (85da8 <UDPHS_Handler+0x2b8>)
   85d1e:	881b      	ldrh	r3, [r3, #0]
   85d20:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   85d22:	429a      	cmp	r2, r3
   85d24:	ddea      	ble.n	85cfc <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85d26:	4b1f      	ldr	r3, [pc, #124]	; (85da4 <UDPHS_Handler+0x2b4>)
   85d28:	899b      	ldrh	r3, [r3, #12]
   85d2a:	42a3      	cmp	r3, r4
   85d2c:	d04a      	beq.n	85dc4 <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   85d2e:	4b14      	ldr	r3, [pc, #80]	; (85d80 <UDPHS_Handler+0x290>)
   85d30:	f44f 7200 	mov.w	r2, #512	; 0x200
   85d34:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   85d38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85d3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85d40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   85d44:	b672      	cpsid	i
   85d46:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85d4a:	480e      	ldr	r0, [pc, #56]	; (85d84 <UDPHS_Handler+0x294>)
   85d4c:	2400      	movs	r4, #0
   85d4e:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   85d50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85d54:	2900      	cmp	r1, #0
   85d56:	f47f af2a 	bne.w	85bae <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   85d5a:	2201      	movs	r2, #1
   85d5c:	7002      	strb	r2, [r0, #0]
   85d5e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85d62:	b662      	cpsie	i
}
   85d64:	e723      	b.n	85bae <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   85d66:	4b14      	ldr	r3, [pc, #80]	; (85db8 <UDPHS_Handler+0x2c8>)
   85d68:	4798      	blx	r3
				udd_ack_out_received(0);
   85d6a:	4b05      	ldr	r3, [pc, #20]	; (85d80 <UDPHS_Handler+0x290>)
   85d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   85d70:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   85d74:	e71b      	b.n	85bae <UDPHS_Handler+0xbe>
   85d76:	bf00      	nop
   85d78:	000854b1 	.word	0x000854b1
   85d7c:	00085541 	.word	0x00085541
   85d80:	400a4000 	.word	0x400a4000
   85d84:	200006ea 	.word	0x200006ea
   85d88:	00083031 	.word	0x00083031
   85d8c:	00084841 	.word	0x00084841
   85d90:	20002308 	.word	0x20002308
   85d94:	20002deb 	.word	0x20002deb
   85d98:	20180000 	.word	0x20180000
   85d9c:	20180008 	.word	0x20180008
   85da0:	00084885 	.word	0x00084885
   85da4:	20002dec 	.word	0x20002dec
   85da8:	20002306 	.word	0x20002306
   85dac:	20002304 	.word	0x20002304
   85db0:	00085771 	.word	0x00085771
   85db4:	000856b1 	.word	0x000856b1
   85db8:	00085705 	.word	0x00085705
   85dbc:	00085781 	.word	0x00085781
   85dc0:	0008571d 	.word	0x0008571d
		if (!udd_g_ctrlreq.over_under_run) {
   85dc4:	4b9d      	ldr	r3, [pc, #628]	; (8603c <UDPHS_Handler+0x54c>)
   85dc6:	695b      	ldr	r3, [r3, #20]
   85dc8:	b153      	cbz	r3, 85de0 <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   85dca:	4798      	blx	r3
   85dcc:	b180      	cbz	r0, 85df0 <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85dce:	499c      	ldr	r1, [pc, #624]	; (86040 <UDPHS_Handler+0x550>)
   85dd0:	4a9c      	ldr	r2, [pc, #624]	; (86044 <UDPHS_Handler+0x554>)
   85dd2:	880b      	ldrh	r3, [r1, #0]
   85dd4:	8810      	ldrh	r0, [r2, #0]
   85dd6:	4403      	add	r3, r0
   85dd8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85dda:	2300      	movs	r3, #0
   85ddc:	8013      	strh	r3, [r2, #0]
   85dde:	e7a6      	b.n	85d2e <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   85de0:	4b99      	ldr	r3, [pc, #612]	; (86048 <UDPHS_Handler+0x558>)
   85de2:	4798      	blx	r3
			udd_ack_out_received(0);
   85de4:	4b99      	ldr	r3, [pc, #612]	; (8604c <UDPHS_Handler+0x55c>)
   85de6:	f44f 7200 	mov.w	r2, #512	; 0x200
   85dea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85dee:	e6de      	b.n	85bae <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   85df0:	4b95      	ldr	r3, [pc, #596]	; (86048 <UDPHS_Handler+0x558>)
   85df2:	4798      	blx	r3
			udd_ack_out_received(0);
   85df4:	4b95      	ldr	r3, [pc, #596]	; (8604c <UDPHS_Handler+0x55c>)
   85df6:	f44f 7200 	mov.w	r2, #512	; 0x200
   85dfa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85dfe:	e6d6      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   85e00:	4b92      	ldr	r3, [pc, #584]	; (8604c <UDPHS_Handler+0x55c>)
   85e02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85e06:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   85e0a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85e0e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85e12:	f47f aecc 	bne.w	85bae <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85e16:	4b8e      	ldr	r3, [pc, #568]	; (86050 <UDPHS_Handler+0x560>)
   85e18:	781b      	ldrb	r3, [r3, #0]
   85e1a:	2b03      	cmp	r3, #3
   85e1c:	f47f aec7 	bne.w	85bae <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   85e20:	4b8a      	ldr	r3, [pc, #552]	; (8604c <UDPHS_Handler+0x55c>)
   85e22:	2220      	movs	r2, #32
   85e24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85e28:	e6c1      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   85e2a:	4b88      	ldr	r3, [pc, #544]	; (8604c <UDPHS_Handler+0x55c>)
   85e2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85e30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   85e34:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85e38:	f413 7f00 	tst.w	r3, #512	; 0x200
   85e3c:	f47f aeb7 	bne.w	85bae <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85e40:	4b83      	ldr	r3, [pc, #524]	; (86050 <UDPHS_Handler+0x560>)
   85e42:	781b      	ldrb	r3, [r3, #0]
   85e44:	2b01      	cmp	r3, #1
   85e46:	d007      	beq.n	85e58 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85e48:	2b04      	cmp	r3, #4
   85e4a:	f47f aeb0 	bne.w	85bae <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   85e4e:	4b7f      	ldr	r3, [pc, #508]	; (8604c <UDPHS_Handler+0x55c>)
   85e50:	2220      	movs	r2, #32
   85e52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85e56:	e6aa      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   85e58:	4b7e      	ldr	r3, [pc, #504]	; (86054 <UDPHS_Handler+0x564>)
   85e5a:	4798      	blx	r3
   85e5c:	e6a7      	b.n	85bae <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   85e5e:	4b7e      	ldr	r3, [pc, #504]	; (86058 <UDPHS_Handler+0x568>)
   85e60:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   85e64:	68d9      	ldr	r1, [r3, #12]
   85e66:	f011 0f01 	tst.w	r1, #1
   85e6a:	f47f aea0 	bne.w	85bae <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   85e6e:	4877      	ldr	r0, [pc, #476]	; (8604c <UDPHS_Handler+0x55c>)
   85e70:	6901      	ldr	r1, [r0, #16]
   85e72:	ea21 0606 	bic.w	r6, r1, r6
   85e76:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85e78:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   85e7a:	0c1b      	lsrs	r3, r3, #16
   85e7c:	d008      	beq.n	85e90 <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   85e7e:	4977      	ldr	r1, [pc, #476]	; (8605c <UDPHS_Handler+0x56c>)
   85e80:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   85e84:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   85e88:	68e0      	ldr	r0, [r4, #12]
   85e8a:	1ac3      	subs	r3, r0, r3
   85e8c:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   85e8e:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   85e90:	4610      	mov	r0, r2
   85e92:	4b73      	ldr	r3, [pc, #460]	; (86060 <UDPHS_Handler+0x570>)
   85e94:	4798      	blx	r3
			return true;
   85e96:	e68a      	b.n	85bae <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   85e98:	0163      	lsls	r3, r4, #5
   85e9a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85e9e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   85ea6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   85eaa:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   85eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   85eb2:	2100      	movs	r1, #0
   85eb4:	4869      	ldr	r0, [pc, #420]	; (8605c <UDPHS_Handler+0x56c>)
   85eb6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   85eba:	4b6a      	ldr	r3, [pc, #424]	; (86064 <UDPHS_Handler+0x574>)
   85ebc:	4798      	blx	r3
				return true;
   85ebe:	e676      	b.n	85bae <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85ec0:	3301      	adds	r3, #1
   85ec2:	2b07      	cmp	r3, #7
   85ec4:	f000 80dc 	beq.w	86080 <UDPHS_Handler+0x590>
   85ec8:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   85eca:	461c      	mov	r4, r3
   85ecc:	1e5d      	subs	r5, r3, #1
   85ece:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85ed0:	690f      	ldr	r7, [r1, #16]
   85ed2:	fa0c f605 	lsl.w	r6, ip, r5
   85ed6:	4237      	tst	r7, r6
   85ed8:	d002      	beq.n	85ee0 <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85eda:	6948      	ldr	r0, [r1, #20]
   85edc:	4206      	tst	r6, r0
   85ede:	d1be      	bne.n	85e5e <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85ee0:	690f      	ldr	r7, [r1, #16]
   85ee2:	fa0e f604 	lsl.w	r6, lr, r4
   85ee6:	4237      	tst	r7, r6
   85ee8:	d0ea      	beq.n	85ec0 <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   85eea:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   85eee:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   85ef2:	f410 6f00 	tst.w	r0, #2048	; 0x800
   85ef6:	d006      	beq.n	85f06 <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   85ef8:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   85efc:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   85f00:	f410 6f00 	tst.w	r0, #2048	; 0x800
   85f04:	d0c8      	beq.n	85e98 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   85f06:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f0a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85f0e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   85f12:	d0d5      	beq.n	85ec0 <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   85f14:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f18:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85f1c:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   85f20:	d1ce      	bne.n	85ec0 <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   85f22:	4b4a      	ldr	r3, [pc, #296]	; (8604c <UDPHS_Handler+0x55c>)
   85f24:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   85f28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85f2c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   85f30:	691a      	ldr	r2, [r3, #16]
   85f32:	ea22 0606 	bic.w	r6, r2, r6
   85f36:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   85f38:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   85f3c:	4b47      	ldr	r3, [pc, #284]	; (8605c <UDPHS_Handler+0x56c>)
   85f3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   85f42:	f898 3014 	ldrb.w	r3, [r8, #20]
   85f46:	f36f 0382 	bfc	r3, #2, #1
   85f4a:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   85f4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   85f52:	f023 0302 	bic.w	r3, r3, #2
   85f56:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   85f5a:	2320      	movs	r3, #32
   85f5c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   85f60:	2340      	movs	r3, #64	; 0x40
   85f62:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   85f66:	e622      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ack_reset();
   85f68:	4b38      	ldr	r3, [pc, #224]	; (8604c <UDPHS_Handler+0x55c>)
   85f6a:	2210      	movs	r2, #16
   85f6c:	619a      	str	r2, [r3, #24]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85f6e:	4d3b      	ldr	r5, [pc, #236]	; (8605c <UDPHS_Handler+0x56c>)
   85f70:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85f72:	2701      	movs	r7, #1
   85f74:	4e3b      	ldr	r6, [pc, #236]	; (86064 <UDPHS_Handler+0x574>)
   85f76:	3401      	adds	r4, #1
   85f78:	b2e4      	uxtb	r4, r4
   85f7a:	4622      	mov	r2, r4
   85f7c:	4639      	mov	r1, r7
   85f7e:	4628      	mov	r0, r5
   85f80:	47b0      	blx	r6
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85f82:	3518      	adds	r5, #24
   85f84:	2c06      	cmp	r4, #6
   85f86:	d1f6      	bne.n	85f76 <UDPHS_Handler+0x486>
		udc_reset();
   85f88:	4b37      	ldr	r3, [pc, #220]	; (86068 <UDPHS_Handler+0x578>)
   85f8a:	4798      	blx	r3
	udd_configure_address(0);
   85f8c:	4b2f      	ldr	r3, [pc, #188]	; (8604c <UDPHS_Handler+0x55c>)
   85f8e:	681a      	ldr	r2, [r3, #0]
   85f90:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85f94:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   85f96:	681a      	ldr	r2, [r3, #0]
   85f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85f9c:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   85f9e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85fa2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   85fa6:	f022 0203 	bic.w	r2, r2, #3
   85faa:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   85fae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   85fb2:	2201      	movs	r2, #1
   85fb4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85fb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   85fbc:	b672      	cpsid	i
   85fbe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85fc2:	4a2a      	ldr	r2, [pc, #168]	; (8606c <UDPHS_Handler+0x57c>)
   85fc4:	2000      	movs	r0, #0
   85fc6:	7010      	strb	r0, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   85fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85fcc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   85fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
   85fd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   85fd8:	691a      	ldr	r2, [r3, #16]
   85fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   85fde:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85fe0:	b929      	cbnz	r1, 85fee <UDPHS_Handler+0x4fe>
		cpu_irq_enable();
   85fe2:	4b22      	ldr	r3, [pc, #136]	; (8606c <UDPHS_Handler+0x57c>)
   85fe4:	2201      	movs	r2, #1
   85fe6:	701a      	strb	r2, [r3, #0]
   85fe8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85fec:	b662      	cpsie	i
		udd_ctrl_init();
   85fee:	4b20      	ldr	r3, [pc, #128]	; (86070 <UDPHS_Handler+0x580>)
   85ff0:	4798      	blx	r3
		udd_enable_sof_interrupt();
   85ff2:	4b16      	ldr	r3, [pc, #88]	; (8604c <UDPHS_Handler+0x55c>)
   85ff4:	691a      	ldr	r2, [r3, #16]
   85ff6:	f042 0208 	orr.w	r2, r2, #8
   85ffa:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   85ffc:	691a      	ldr	r2, [r3, #16]
   85ffe:	f042 0204 	orr.w	r2, r2, #4
   86002:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   86004:	691a      	ldr	r2, [r3, #16]
   86006:	f042 0202 	orr.w	r2, r2, #2
   8600a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   8600c:	e5cf      	b.n	85bae <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   8600e:	4b0f      	ldr	r3, [pc, #60]	; (8604c <UDPHS_Handler+0x55c>)
   86010:	2220      	movs	r2, #32
   86012:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   86014:	691a      	ldr	r2, [r3, #16]
   86016:	f022 0202 	bic.w	r2, r2, #2
   8601a:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   8601c:	691a      	ldr	r2, [r3, #16]
   8601e:	f042 0220 	orr.w	r2, r2, #32
   86022:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   86024:	2202      	movs	r2, #2
   86026:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   86028:	201d      	movs	r0, #29
   8602a:	4b12      	ldr	r3, [pc, #72]	; (86074 <UDPHS_Handler+0x584>)
   8602c:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   8602e:	4b12      	ldr	r3, [pc, #72]	; (86078 <UDPHS_Handler+0x588>)
   86030:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   86032:	2000      	movs	r0, #0
   86034:	4b11      	ldr	r3, [pc, #68]	; (8607c <UDPHS_Handler+0x58c>)
   86036:	4798      	blx	r3
		goto udd_interrupt_end;
   86038:	e5b9      	b.n	85bae <UDPHS_Handler+0xbe>
   8603a:	bf00      	nop
   8603c:	20002dec 	.word	0x20002dec
   86040:	20002306 	.word	0x20002306
   86044:	20002304 	.word	0x20002304
   86048:	00085705 	.word	0x00085705
   8604c:	400a4000 	.word	0x400a4000
   86050:	20002308 	.word	0x20002308
   86054:	0008571d 	.word	0x0008571d
   86058:	400a4300 	.word	0x400a4300
   8605c:	2000230c 	.word	0x2000230c
   86060:	00085921 	.word	0x00085921
   86064:	000858e9 	.word	0x000858e9
   86068:	000847f9 	.word	0x000847f9
   8606c:	200006ea 	.word	0x200006ea
   86070:	000856b1 	.word	0x000856b1
   86074:	000854e5 	.word	0x000854e5
   86078:	0008300d 	.word	0x0008300d
   8607c:	0008563d 	.word	0x0008563d
	if (Is_udd_reset()) {
   86080:	4b18      	ldr	r3, [pc, #96]	; (860e4 <UDPHS_Handler+0x5f4>)
   86082:	695b      	ldr	r3, [r3, #20]
   86084:	f013 0f10 	tst.w	r3, #16
   86088:	f47f af6e 	bne.w	85f68 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8608c:	4b15      	ldr	r3, [pc, #84]	; (860e4 <UDPHS_Handler+0x5f4>)
   8608e:	691b      	ldr	r3, [r3, #16]
   86090:	f013 0f02 	tst.w	r3, #2
   86094:	d004      	beq.n	860a0 <UDPHS_Handler+0x5b0>
   86096:	4b13      	ldr	r3, [pc, #76]	; (860e4 <UDPHS_Handler+0x5f4>)
   86098:	695b      	ldr	r3, [r3, #20]
   8609a:	f013 0f02 	tst.w	r3, #2
   8609e:	d1b6      	bne.n	8600e <UDPHS_Handler+0x51e>
	if (Is_udd_wake_up()) {
   860a0:	4b10      	ldr	r3, [pc, #64]	; (860e4 <UDPHS_Handler+0x5f4>)
   860a2:	695b      	ldr	r3, [r3, #20]
   860a4:	f013 0f20 	tst.w	r3, #32
   860a8:	f43f ad81 	beq.w	85bae <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   860ac:	2001      	movs	r0, #1
   860ae:	4b0e      	ldr	r3, [pc, #56]	; (860e8 <UDPHS_Handler+0x5f8>)
   860b0:	4798      	blx	r3
		udd_ack_suspend();
   860b2:	4b0c      	ldr	r3, [pc, #48]	; (860e4 <UDPHS_Handler+0x5f4>)
   860b4:	2202      	movs	r2, #2
   860b6:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   860b8:	2220      	movs	r2, #32
   860ba:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   860bc:	691a      	ldr	r2, [r3, #16]
   860be:	f022 0220 	bic.w	r2, r2, #32
   860c2:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   860c4:	691a      	ldr	r2, [r3, #16]
   860c6:	f042 0202 	orr.w	r2, r2, #2
   860ca:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   860cc:	691a      	ldr	r2, [r3, #16]
   860ce:	f042 0208 	orr.w	r2, r2, #8
   860d2:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   860d4:	691a      	ldr	r2, [r3, #16]
   860d6:	f042 0204 	orr.w	r2, r2, #4
   860da:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   860dc:	4b03      	ldr	r3, [pc, #12]	; (860ec <UDPHS_Handler+0x5fc>)
   860de:	4798      	blx	r3
		goto udd_interrupt_end;
   860e0:	e565      	b.n	85bae <UDPHS_Handler+0xbe>
   860e2:	bf00      	nop
   860e4:	400a4000 	.word	0x400a4000
   860e8:	0008563d 	.word	0x0008563d
   860ec:	00083025 	.word	0x00083025

000860f0 <udd_attach>:
{
   860f0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   860f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   860f6:	b672      	cpsid	i
   860f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   860fc:	4b1d      	ldr	r3, [pc, #116]	; (86174 <udd_attach+0x84>)
   860fe:	2200      	movs	r2, #0
   86100:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   86102:	2001      	movs	r0, #1
   86104:	4b1c      	ldr	r3, [pc, #112]	; (86178 <udd_attach+0x88>)
   86106:	4798      	blx	r3
	udd_enable_periph_ck();
   86108:	201d      	movs	r0, #29
   8610a:	4b1c      	ldr	r3, [pc, #112]	; (8617c <udd_attach+0x8c>)
   8610c:	4798      	blx	r3
	udd_attach_device();
   8610e:	4b1c      	ldr	r3, [pc, #112]	; (86180 <udd_attach+0x90>)
   86110:	681a      	ldr	r2, [r3, #0]
   86112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   86116:	601a      	str	r2, [r3, #0]
   86118:	681a      	ldr	r2, [r3, #0]
   8611a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8611e:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   86120:	691a      	ldr	r2, [r3, #16]
   86122:	f042 0210 	orr.w	r2, r2, #16
   86126:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   86128:	691a      	ldr	r2, [r3, #16]
   8612a:	f042 0202 	orr.w	r2, r2, #2
   8612e:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   86130:	691a      	ldr	r2, [r3, #16]
   86132:	f042 0220 	orr.w	r2, r2, #32
   86136:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   86138:	691a      	ldr	r2, [r3, #16]
   8613a:	f042 0208 	orr.w	r2, r2, #8
   8613e:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   86140:	691a      	ldr	r2, [r3, #16]
   86142:	f042 0204 	orr.w	r2, r2, #4
   86146:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   86148:	2208      	movs	r2, #8
   8614a:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   8614c:	2204      	movs	r2, #4
   8614e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   86150:	2210      	movs	r2, #16
   86152:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   86154:	2202      	movs	r2, #2
   86156:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   86158:	2220      	movs	r2, #32
   8615a:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   8615c:	201d      	movs	r0, #29
   8615e:	4b09      	ldr	r3, [pc, #36]	; (86184 <udd_attach+0x94>)
   86160:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   86162:	b92c      	cbnz	r4, 86170 <udd_attach+0x80>
		cpu_irq_enable();
   86164:	4b03      	ldr	r3, [pc, #12]	; (86174 <udd_attach+0x84>)
   86166:	2201      	movs	r2, #1
   86168:	701a      	strb	r2, [r3, #0]
   8616a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8616e:	b662      	cpsie	i
}
   86170:	bd10      	pop	{r4, pc}
   86172:	bf00      	nop
   86174:	200006ea 	.word	0x200006ea
   86178:	0008563d 	.word	0x0008563d
   8617c:	000854b1 	.word	0x000854b1
   86180:	400a4000 	.word	0x400a4000
   86184:	000854e5 	.word	0x000854e5

00086188 <udd_enable>:
{
   86188:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   8618a:	4b2a      	ldr	r3, [pc, #168]	; (86234 <udd_enable+0xac>)
   8618c:	4798      	blx	r3
	udd_enable_periph_ck();
   8618e:	201d      	movs	r0, #29
   86190:	4b29      	ldr	r3, [pc, #164]	; (86238 <udd_enable+0xb0>)
   86192:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86194:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   86198:	b672      	cpsid	i
   8619a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8619e:	2300      	movs	r3, #0
   861a0:	4a26      	ldr	r2, [pc, #152]	; (8623c <udd_enable+0xb4>)
   861a2:	7013      	strb	r3, [r2, #0]
	udd_enable_periph();
   861a4:	4926      	ldr	r1, [pc, #152]	; (86240 <udd_enable+0xb8>)
   861a6:	680a      	ldr	r2, [r1, #0]
   861a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   861ac:	600a      	str	r2, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   861ae:	4a25      	ldr	r2, [pc, #148]	; (86244 <udd_enable+0xbc>)
   861b0:	2150      	movs	r1, #80	; 0x50
   861b2:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   861b6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   861ba:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   861bc:	4822      	ldr	r0, [pc, #136]	; (86248 <udd_enable+0xc0>)
   861be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   861c2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   861c6:	7d12      	ldrb	r2, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   861c8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   861cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   861d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   861d4:	f36f 0282 	bfc	r2, #2, #1
   861d8:	750a      	strb	r2, [r1, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   861da:	3301      	adds	r3, #1
   861dc:	2b06      	cmp	r3, #6
   861de:	d1ee      	bne.n	861be <udd_enable+0x36>
	udd_high_speed_enable();
   861e0:	4a17      	ldr	r2, [pc, #92]	; (86240 <udd_enable+0xb8>)
   861e2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   861e6:	f023 0303 	bic.w	r3, r3, #3
   861ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   861ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   861f2:	4b16      	ldr	r3, [pc, #88]	; (8624c <udd_enable+0xc4>)
   861f4:	4798      	blx	r3
	udd_b_idle = false;
   861f6:	2300      	movs	r3, #0
   861f8:	4a15      	ldr	r2, [pc, #84]	; (86250 <udd_enable+0xc8>)
   861fa:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   861fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   86200:	b672      	cpsid	i
   86202:	f3bf 8f5f 	dmb	sy
   86206:	4a0d      	ldr	r2, [pc, #52]	; (8623c <udd_enable+0xb4>)
   86208:	7013      	strb	r3, [r2, #0]
   8620a:	4a12      	ldr	r2, [pc, #72]	; (86254 <udd_enable+0xcc>)
   8620c:	78d3      	ldrb	r3, [r2, #3]
   8620e:	3301      	adds	r3, #1
   86210:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   86212:	b929      	cbnz	r1, 86220 <udd_enable+0x98>
		cpu_irq_enable();
   86214:	4b09      	ldr	r3, [pc, #36]	; (8623c <udd_enable+0xb4>)
   86216:	2201      	movs	r2, #1
   86218:	701a      	strb	r2, [r3, #0]
   8621a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8621e:	b662      	cpsie	i
	udd_attach();
   86220:	4b0d      	ldr	r3, [pc, #52]	; (86258 <udd_enable+0xd0>)
   86222:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   86224:	b92c      	cbnz	r4, 86232 <udd_enable+0xaa>
		cpu_irq_enable();
   86226:	4b05      	ldr	r3, [pc, #20]	; (8623c <udd_enable+0xb4>)
   86228:	2201      	movs	r2, #1
   8622a:	701a      	strb	r2, [r3, #0]
   8622c:	f3bf 8f5f 	dmb	sy
   86230:	b662      	cpsie	i
}
   86232:	bd10      	pop	{r4, pc}
   86234:	000844f1 	.word	0x000844f1
   86238:	000854b1 	.word	0x000854b1
   8623c:	200006ea 	.word	0x200006ea
   86240:	400a4000 	.word	0x400a4000
   86244:	e000e100 	.word	0xe000e100
   86248:	2000230c 	.word	0x2000230c
   8624c:	0008552d 	.word	0x0008552d
   86250:	20002302 	.word	0x20002302
   86254:	20002dd8 	.word	0x20002dd8
   86258:	000860f1 	.word	0x000860f1

0008625c <udd_detach>:
{
   8625c:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   8625e:	201d      	movs	r0, #29
   86260:	4b08      	ldr	r3, [pc, #32]	; (86284 <udd_detach+0x28>)
   86262:	4798      	blx	r3
	udd_detach_device();
   86264:	4b08      	ldr	r3, [pc, #32]	; (86288 <udd_detach+0x2c>)
   86266:	681a      	ldr	r2, [r3, #0]
   86268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8626c:	601a      	str	r2, [r3, #0]
   8626e:	681a      	ldr	r2, [r3, #0]
   86270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   86274:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   86276:	201d      	movs	r0, #29
   86278:	4b04      	ldr	r3, [pc, #16]	; (8628c <udd_detach+0x30>)
   8627a:	4798      	blx	r3
	udd_sleep_mode(false);
   8627c:	2000      	movs	r0, #0
   8627e:	4b04      	ldr	r3, [pc, #16]	; (86290 <udd_detach+0x34>)
   86280:	4798      	blx	r3
}
   86282:	bd08      	pop	{r3, pc}
   86284:	000854b1 	.word	0x000854b1
   86288:	400a4000 	.word	0x400a4000
   8628c:	000854e5 	.word	0x000854e5
   86290:	0008563d 	.word	0x0008563d

00086294 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   86294:	4b02      	ldr	r3, [pc, #8]	; (862a0 <udd_is_high_speed+0xc>)
   86296:	6958      	ldr	r0, [r3, #20]
}
   86298:	f000 0001 	and.w	r0, r0, #1
   8629c:	4770      	bx	lr
   8629e:	bf00      	nop
   862a0:	400a4000 	.word	0x400a4000

000862a4 <udd_set_address>:
	udd_disable_address();
   862a4:	4b08      	ldr	r3, [pc, #32]	; (862c8 <udd_set_address+0x24>)
   862a6:	681a      	ldr	r2, [r3, #0]
   862a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   862ac:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   862ae:	681a      	ldr	r2, [r3, #0]
   862b0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   862b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   862b8:	4302      	orrs	r2, r0
   862ba:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   862bc:	681a      	ldr	r2, [r3, #0]
   862be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   862c2:	601a      	str	r2, [r3, #0]
}
   862c4:	4770      	bx	lr
   862c6:	bf00      	nop
   862c8:	400a4000 	.word	0x400a4000

000862cc <udd_getaddress>:
	return udd_get_configured_address();
   862cc:	4b02      	ldr	r3, [pc, #8]	; (862d8 <udd_getaddress+0xc>)
   862ce:	6818      	ldr	r0, [r3, #0]
}
   862d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   862d4:	4770      	bx	lr
   862d6:	bf00      	nop
   862d8:	400a4000 	.word	0x400a4000

000862dc <udd_get_frame_number>:
	return udd_frame_number();
   862dc:	4b02      	ldr	r3, [pc, #8]	; (862e8 <udd_get_frame_number+0xc>)
   862de:	6858      	ldr	r0, [r3, #4]
}
   862e0:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   862e4:	4770      	bx	lr
   862e6:	bf00      	nop
   862e8:	400a4000 	.word	0x400a4000

000862ec <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   862ec:	4b02      	ldr	r3, [pc, #8]	; (862f8 <udd_get_micro_frame_number+0xc>)
   862ee:	6858      	ldr	r0, [r3, #4]
}
   862f0:	f000 0007 	and.w	r0, r0, #7
   862f4:	4770      	bx	lr
   862f6:	bf00      	nop
   862f8:	400a4000 	.word	0x400a4000

000862fc <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   862fc:	4b01      	ldr	r3, [pc, #4]	; (86304 <udd_set_setup_payload+0x8>)
   862fe:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   86300:	8199      	strh	r1, [r3, #12]
}
   86302:	4770      	bx	lr
   86304:	20002dec 	.word	0x20002dec

00086308 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86308:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8630c:	2a06      	cmp	r2, #6
   8630e:	d900      	bls.n	86312 <udd_ep_free+0xa>
   86310:	4770      	bx	lr
{
   86312:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   86314:	0153      	lsls	r3, r2, #5
   86316:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   8631a:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   8631e:	2101      	movs	r1, #1
   86320:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   86324:	4603      	mov	r3, r0
   86326:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   8632a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   8632e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   86332:	1e55      	subs	r5, r2, #1
   86334:	4c08      	ldr	r4, [pc, #32]	; (86358 <udd_ep_free+0x50>)
   86336:	fa05 f601 	lsl.w	r6, r5, r1
   8633a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   8633e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   86342:	4b06      	ldr	r3, [pc, #24]	; (8635c <udd_ep_free+0x54>)
   86344:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   86346:	4435      	add	r5, r6
   86348:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   8634c:	7d23      	ldrb	r3, [r4, #20]
   8634e:	f36f 0382 	bfc	r3, #2, #1
   86352:	7523      	strb	r3, [r4, #20]
}
   86354:	bd70      	pop	{r4, r5, r6, pc}
   86356:	bf00      	nop
   86358:	2000230c 	.word	0x2000230c
   8635c:	000858e9 	.word	0x000858e9

00086360 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   86360:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   86364:	0143      	lsls	r3, r0, #5
   86366:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8636a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8636e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   86372:	f013 0f20 	tst.w	r3, #32
   86376:	d109      	bne.n	8638c <udd_ep_is_halted+0x2c>
   86378:	3801      	subs	r0, #1
   8637a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8637e:	4b04      	ldr	r3, [pc, #16]	; (86390 <udd_ep_is_halted+0x30>)
   86380:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   86384:	7d00      	ldrb	r0, [r0, #20]
   86386:	f3c0 0080 	ubfx	r0, r0, #2, #1
   8638a:	4770      	bx	lr
   8638c:	2001      	movs	r0, #1
}
   8638e:	4770      	bx	lr
   86390:	2000230c 	.word	0x2000230c

00086394 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86394:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   86398:	2b06      	cmp	r3, #6
   8639a:	d851      	bhi.n	86440 <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8639c:	015a      	lsls	r2, r3, #5
   8639e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   863a2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   863a6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   863aa:	f012 0f20 	tst.w	r2, #32
   863ae:	d149      	bne.n	86444 <udd_ep_set_halt+0xb0>
{
   863b0:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   863b2:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   863b4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   863b8:	4a25      	ldr	r2, [pc, #148]	; (86450 <udd_ep_set_halt+0xbc>)
   863ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   863be:	7d12      	ldrb	r2, [r2, #20]
   863c0:	f012 0f04 	tst.w	r2, #4
   863c4:	d140      	bne.n	86448 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   863c6:	f012 0f01 	tst.w	r2, #1
   863ca:	d13f      	bne.n	8644c <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   863cc:	f010 0f80 	tst.w	r0, #128	; 0x80
   863d0:	d114      	bne.n	863fc <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   863d2:	015b      	lsls	r3, r3, #5
   863d4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   863d8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   863dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   863e0:	f022 0202 	bic.w	r2, r2, #2
   863e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   863e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   863ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   863f0:	2220      	movs	r2, #32
   863f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   863f6:	2001      	movs	r0, #1
}
   863f8:	bc10      	pop	{r4}
   863fa:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   863fc:	015a      	lsls	r2, r3, #5
   863fe:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   86402:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   86406:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8640a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   8640e:	d0e0      	beq.n	863d2 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   86410:	4a0f      	ldr	r2, [pc, #60]	; (86450 <udd_ep_set_halt+0xbc>)
   86412:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   86416:	7d0a      	ldrb	r2, [r1, #20]
   86418:	f042 0204 	orr.w	r2, r2, #4
   8641c:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   8641e:	490d      	ldr	r1, [pc, #52]	; (86454 <udd_ep_set_halt+0xc0>)
   86420:	f103 0208 	add.w	r2, r3, #8
   86424:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   86428:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8642c:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   8642e:	6908      	ldr	r0, [r1, #16]
   86430:	f44f 7280 	mov.w	r2, #256	; 0x100
   86434:	fa02 f303 	lsl.w	r3, r2, r3
   86438:	4303      	orrs	r3, r0
   8643a:	610b      	str	r3, [r1, #16]
			return true;
   8643c:	2001      	movs	r0, #1
   8643e:	e7db      	b.n	863f8 <udd_ep_set_halt+0x64>
		return false;
   86440:	2000      	movs	r0, #0
   86442:	4770      	bx	lr
		return true; // Already STALL
   86444:	2001      	movs	r0, #1
}
   86446:	4770      	bx	lr
		return true; // Already STALL
   86448:	2001      	movs	r0, #1
   8644a:	e7d5      	b.n	863f8 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   8644c:	2000      	movs	r0, #0
   8644e:	e7d3      	b.n	863f8 <udd_ep_set_halt+0x64>
   86450:	2000230c 	.word	0x2000230c
   86454:	400a4000 	.word	0x400a4000

00086458 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   86458:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   8645c:	2806      	cmp	r0, #6
   8645e:	d862      	bhi.n	86526 <udd_ep_clear_halt+0xce>
{
   86460:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   86462:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   86464:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   86468:	4b37      	ldr	r3, [pc, #220]	; (86548 <udd_ep_clear_halt+0xf0>)
   8646a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   8646e:	7d1b      	ldrb	r3, [r3, #20]
   86470:	f013 0f04 	tst.w	r3, #4
   86474:	d05b      	beq.n	8652e <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   86476:	460b      	mov	r3, r1
   86478:	4933      	ldr	r1, [pc, #204]	; (86548 <udd_ep_clear_halt+0xf0>)
   8647a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   8647e:	7d19      	ldrb	r1, [r3, #20]
   86480:	f36f 0182 	bfc	r1, #2, #1
   86484:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   86486:	4b31      	ldr	r3, [pc, #196]	; (8654c <udd_ep_clear_halt+0xf4>)
   86488:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   8648c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   86490:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   86494:	6919      	ldr	r1, [r3, #16]
   86496:	f44f 7480 	mov.w	r4, #256	; 0x100
   8649a:	4084      	lsls	r4, r0
   8649c:	ea21 0104 	bic.w	r1, r1, r4
   864a0:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   864a2:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   864a6:	f013 0f20 	tst.w	r3, #32
   864aa:	d024      	beq.n	864f6 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   864ac:	0143      	lsls	r3, r0, #5
   864ae:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   864b2:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   864b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   864ba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   864be:	d00b      	beq.n	864d8 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   864c0:	0143      	lsls	r3, r0, #5
   864c2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   864c6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   864ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   864ce:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   864d2:	2140      	movs	r1, #64	; 0x40
   864d4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   864d8:	0143      	lsls	r3, r0, #5
   864da:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   864de:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   864e2:	2120      	movs	r1, #32
   864e4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   864e8:	4618      	mov	r0, r3
   864ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   864ee:	f043 0302 	orr.w	r3, r3, #2
   864f2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   864f6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   864fa:	4913      	ldr	r1, [pc, #76]	; (86548 <udd_ep_clear_halt+0xf0>)
   864fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   86500:	7d1b      	ldrb	r3, [r3, #20]
   86502:	f013 0f01 	tst.w	r3, #1
   86506:	d010      	beq.n	8652a <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   86508:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   8650c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   86510:	7d18      	ldrb	r0, [r3, #20]
   86512:	f36f 0000 	bfc	r0, #0, #1
   86516:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   86518:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   8651c:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   86520:	4798      	blx	r3
	return true;
   86522:	2001      	movs	r0, #1
   86524:	e002      	b.n	8652c <udd_ep_clear_halt+0xd4>
		return false;
   86526:	2000      	movs	r0, #0
}
   86528:	4770      	bx	lr
	return true;
   8652a:	2001      	movs	r0, #1
}
   8652c:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   8652e:	0143      	lsls	r3, r0, #5
   86530:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86534:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86538:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8653c:	f013 0f20 	tst.w	r3, #32
   86540:	d1b4      	bne.n	864ac <udd_ep_clear_halt+0x54>
	return true;
   86542:	2001      	movs	r0, #1
   86544:	e7f2      	b.n	8652c <udd_ep_clear_halt+0xd4>
   86546:	bf00      	nop
   86548:	2000230c 	.word	0x2000230c
   8654c:	400a4000 	.word	0x400a4000

00086550 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   86550:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   86554:	2806      	cmp	r0, #6
   86556:	d868      	bhi.n	8662a <udd_ep_run+0xda>
{
   86558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   8655a:	0144      	lsls	r4, r0, #5
   8655c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   86560:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   86564:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   86568:	f014 0f01 	tst.w	r4, #1
   8656c:	d05f      	beq.n	8662e <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   8656e:	0144      	lsls	r4, r0, #5
   86570:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   86574:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   86578:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   8657c:	f014 0f20 	tst.w	r4, #32
   86580:	d157      	bne.n	86632 <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   86582:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   86584:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   86588:	4d2d      	ldr	r5, [pc, #180]	; (86640 <udd_ep_run+0xf0>)
   8658a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   8658e:	7d2d      	ldrb	r5, [r5, #20]
   86590:	f015 0f04 	tst.w	r5, #4
   86594:	d14f      	bne.n	86636 <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86596:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   8659a:	b672      	cpsid	i
   8659c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   865a0:	4d28      	ldr	r5, [pc, #160]	; (86644 <udd_ep_run+0xf4>)
   865a2:	2600      	movs	r6, #0
   865a4:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   865a6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   865aa:	4e25      	ldr	r6, [pc, #148]	; (86640 <udd_ep_run+0xf0>)
   865ac:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   865b0:	7d2d      	ldrb	r5, [r5, #20]
   865b2:	f015 0f01 	tst.w	r5, #1
   865b6:	d121      	bne.n	865fc <udd_ep_run+0xac>
	ptr_job->busy = true;
   865b8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   865bc:	4e20      	ldr	r6, [pc, #128]	; (86640 <udd_ep_run+0xf0>)
   865be:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   865c2:	7d2e      	ldrb	r6, [r5, #20]
   865c4:	f046 0601 	orr.w	r6, r6, #1
   865c8:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   865ca:	b92f      	cbnz	r7, 865d8 <udd_ep_run+0x88>
		cpu_irq_enable();
   865cc:	4d1d      	ldr	r5, [pc, #116]	; (86644 <udd_ep_run+0xf4>)
   865ce:	2601      	movs	r6, #1
   865d0:	702e      	strb	r6, [r5, #0]
   865d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   865d6:	b662      	cpsie	i
	ptr_job->buf = buf;
   865d8:	4e19      	ldr	r6, [pc, #100]	; (86640 <udd_ep_run+0xf0>)
   865da:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   865de:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   865e2:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   865e4:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   865e6:	2200      	movs	r2, #0
   865e8:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   865ea:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   865ec:	9a06      	ldr	r2, [sp, #24]
   865ee:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   865f2:	b961      	cbnz	r1, 8660e <udd_ep_run+0xbe>
   865f4:	fab3 f383 	clz	r3, r3
   865f8:	095b      	lsrs	r3, r3, #5
   865fa:	e009      	b.n	86610 <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   865fc:	b9ef      	cbnz	r7, 8663a <udd_ep_run+0xea>
		cpu_irq_enable();
   865fe:	4b11      	ldr	r3, [pc, #68]	; (86644 <udd_ep_run+0xf4>)
   86600:	2201      	movs	r2, #1
   86602:	701a      	strb	r2, [r3, #0]
   86604:	f3bf 8f5f 	dmb	sy
   86608:	b662      	cpsie	i
		return false; // Job already on going
   8660a:	2000      	movs	r0, #0
}
   8660c:	e010      	b.n	86630 <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8660e:	2301      	movs	r3, #1
   86610:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   86614:	4a0a      	ldr	r2, [pc, #40]	; (86640 <udd_ep_run+0xf0>)
   86616:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   8661a:	7d22      	ldrb	r2, [r4, #20]
   8661c:	f363 0241 	bfi	r2, r3, #1, #1
   86620:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   86622:	4b09      	ldr	r3, [pc, #36]	; (86648 <udd_ep_run+0xf8>)
   86624:	4798      	blx	r3
	return true;
   86626:	2001      	movs	r0, #1
   86628:	e002      	b.n	86630 <udd_ep_run+0xe0>
		return false;
   8662a:	2000      	movs	r0, #0
}
   8662c:	4770      	bx	lr
		return false; // Endpoint is halted
   8662e:	2000      	movs	r0, #0
}
   86630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   86632:	2000      	movs	r0, #0
   86634:	e7fc      	b.n	86630 <udd_ep_run+0xe0>
   86636:	2000      	movs	r0, #0
   86638:	e7fa      	b.n	86630 <udd_ep_run+0xe0>
		return false; // Job already on going
   8663a:	2000      	movs	r0, #0
   8663c:	e7f8      	b.n	86630 <udd_ep_run+0xe0>
   8663e:	bf00      	nop
   86640:	2000230c 	.word	0x2000230c
   86644:	200006ea 	.word	0x200006ea
   86648:	00085921 	.word	0x00085921

0008664c <udd_ep_alloc>:
{
   8664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86650:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   86652:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   86656:	2d06      	cmp	r5, #6
   86658:	f200 812a 	bhi.w	868b0 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   8665c:	016c      	lsls	r4, r5, #5
   8665e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   86662:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   86666:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   8666a:	f014 0401 	ands.w	r4, r4, #1
   8666e:	f040 8123 	bne.w	868b8 <udd_ep_alloc+0x26c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   86672:	f001 0c03 	and.w	ip, r1, #3
   86676:	f1bc 0f02 	cmp.w	ip, #2
   8667a:	d05e      	beq.n	8673a <udd_ep_alloc+0xee>
   8667c:	f1bc 0f03 	cmp.w	ip, #3
   86680:	d064      	beq.n	8674c <udd_ep_alloc+0x100>
   86682:	f1bc 0f01 	cmp.w	ip, #1
   86686:	d001      	beq.n	8668c <udd_ep_alloc+0x40>
   86688:	2000      	movs	r0, #0
   8668a:	e112      	b.n	868b2 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   8668c:	2d00      	cmp	r5, #0
   8668e:	d052      	beq.n	86736 <udd_ep_alloc+0xea>
   86690:	1eeb      	subs	r3, r5, #3
   86692:	b2db      	uxtb	r3, r3
   86694:	2b01      	cmp	r3, #1
   86696:	bf94      	ite	ls
   86698:	2300      	movls	r3, #0
   8669a:	2301      	movhi	r3, #1
	if (b_iso_hbw) {
   8669c:	469e      	mov	lr, r3
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8669e:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   866a2:	2b00      	cmp	r3, #0
   866a4:	d054      	beq.n	86750 <udd_ep_alloc+0x104>
		switch(MaxEndpointSize & (0x3u << 11)) {
   866a6:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   866aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   866ae:	d04a      	beq.n	86746 <udd_ep_alloc+0xfa>
   866b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   866b4:	bf08      	it	eq
   866b6:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   866ba:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   866be:	b292      	uxth	r2, r2
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   866c0:	f04f 0802 	mov.w	r8, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   866c4:	016f      	lsls	r7, r5, #5
   866c6:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
   866ca:	f507 2720 	add.w	r7, r7, #655360	; 0xa0000
   866ce:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
   866d2:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   866d6:	f026 0603 	bic.w	r6, r6, #3
   866da:	010b      	lsls	r3, r1, #4
   866dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   866e0:	f010 0f80 	tst.w	r0, #128	; 0x80
   866e4:	bf0c      	ite	eq
   866e6:	4621      	moveq	r1, r4
   866e8:	2108      	movne	r1, #8
   866ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   866ee:	d237      	bcs.n	86760 <udd_ep_alloc+0x114>
   866f0:	2a08      	cmp	r2, #8
   866f2:	bf38      	it	cc
   866f4:	2208      	movcc	r2, #8
   866f6:	0052      	lsls	r2, r2, #1
   866f8:	3a01      	subs	r2, #1
   866fa:	fab2 f282 	clz	r2, r2
   866fe:	f1c2 021c 	rsb	r2, r2, #28
   86702:	4333      	orrs	r3, r6
   86704:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   86708:	430b      	orrs	r3, r1
   8670a:	f1be 0f00 	cmp.w	lr, #0
   8670e:	d001      	beq.n	86714 <udd_ep_alloc+0xc8>
   86710:	ea4f 240c 	mov.w	r4, ip, lsl #8
   86714:	431a      	orrs	r2, r3
   86716:	4322      	orrs	r2, r4
   86718:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   8671c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   86720:	2b00      	cmp	r3, #0
   86722:	f280 80cd 	bge.w	868c0 <udd_ep_alloc+0x274>
	udd_enable_endpoint(ep);
   86726:	2301      	movs	r3, #1
   86728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8672c:	2306      	movs	r3, #6
	ep_allocated = 0;
   8672e:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   86730:	4865      	ldr	r0, [pc, #404]	; (868c8 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   86732:	2401      	movs	r4, #1
   86734:	e01b      	b.n	8676e <udd_ep_alloc+0x122>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   86736:	2300      	movs	r3, #0
   86738:	e7b0      	b.n	8669c <udd_ep_alloc+0x50>
		nb_bank = UDD_BULK_NB_BANK(ep);
   8673a:	2d03      	cmp	r5, #3
   8673c:	bf34      	ite	cc
   8673e:	46e0      	movcc	r8, ip
   86740:	f04f 0801 	movcs.w	r8, #1
   86744:	e004      	b.n	86750 <udd_ep_alloc+0x104>
			nb_tran = 2;
   86746:	f04f 0c02 	mov.w	ip, #2
   8674a:	e7b6      	b.n	866ba <udd_ep_alloc+0x6e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8674c:	f04f 0801 	mov.w	r8, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   86750:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   86754:	f040 80b2 	bne.w	868bc <udd_ep_alloc+0x270>
   86758:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   8675c:	46f4      	mov	ip, lr
   8675e:	e7b1      	b.n	866c4 <udd_ep_alloc+0x78>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   86760:	f240 72ff 	movw	r2, #2047	; 0x7ff
   86764:	e7c9      	b.n	866fa <udd_ep_alloc+0xae>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   86766:	3b01      	subs	r3, #1
   86768:	b2db      	uxtb	r3, r3
   8676a:	429d      	cmp	r5, r3
   8676c:	d81e      	bhi.n	867ac <udd_ep_alloc+0x160>
		if (Is_udd_endpoint_enabled(i)) {
   8676e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   86772:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   86776:	f012 0f01 	tst.w	r2, #1
   8677a:	d0f4      	beq.n	86766 <udd_ep_alloc+0x11a>
			bank = udd_get_endpoint_bank(i);
   8677c:	015a      	lsls	r2, r3, #5
   8677e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   86782:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   86786:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   8678a:	f3c1 1181 	ubfx	r1, r1, #6, #2
   8678e:	005f      	lsls	r7, r3, #1
   86790:	40b9      	lsls	r1, r7
   86792:	430e      	orrs	r6, r1
   86794:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   86796:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   8679a:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   8679e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   867a2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   867a6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   867aa:	e7dc      	b.n	86766 <udd_ep_alloc+0x11a>
   867ac:	462c      	mov	r4, r5
   867ae:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   867b2:	4d46      	ldr	r5, [pc, #280]	; (868cc <udd_ep_alloc+0x280>)
   867b4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		bool b_restart = ptr_job->busy;
   867b8:	4f44      	ldr	r7, [pc, #272]	; (868cc <udd_ep_alloc+0x280>)
		udd_enable_endpoint(i);
   867ba:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   867be:	f8df 9110 	ldr.w	r9, [pc, #272]	; 868d0 <udd_ep_alloc+0x284>
   867c2:	e023      	b.n	8680c <udd_ep_alloc+0x1c0>
			if (NULL == ptr_job->call_trans) {
   867c4:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   867c8:	4a40      	ldr	r2, [pc, #256]	; (868cc <udd_ep_alloc+0x280>)
   867ca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   867ce:	2c00      	cmp	r4, #0
   867d0:	d078      	beq.n	868c4 <udd_ep_alloc+0x278>
			if (Is_udd_endpoint_in(i)) {
   867d2:	f10c 0c08 	add.w	ip, ip, #8
   867d6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   867da:	4b3b      	ldr	r3, [pc, #236]	; (868c8 <udd_ep_alloc+0x27c>)
   867dc:	f853 300c 	ldr.w	r3, [r3, ip]
   867e0:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   867e4:	bf18      	it	ne
   867e6:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   867ea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   867ee:	4b37      	ldr	r3, [pc, #220]	; (868cc <udd_ep_alloc+0x280>)
   867f0:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   867f4:	4602      	mov	r2, r0
   867f6:	f8de 100c 	ldr.w	r1, [lr, #12]
   867fa:	2001      	movs	r0, #1
   867fc:	47a0      	blx	r4
			return false;
   867fe:	2000      	movs	r0, #0
   86800:	e057      	b.n	868b2 <udd_ep_alloc+0x266>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   86802:	3401      	adds	r4, #1
   86804:	3518      	adds	r5, #24
   86806:	b2e3      	uxtb	r3, r4
   86808:	2b06      	cmp	r3, #6
   8680a:	d84f      	bhi.n	868ac <udd_ep_alloc+0x260>
   8680c:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8680e:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   86810:	0063      	lsls	r3, r4, #1
   86812:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   86816:	f013 0203 	ands.w	r2, r3, #3
   8681a:	d0f2      	beq.n	86802 <udd_ep_alloc+0x1b6>
   8681c:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   86820:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   86824:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   86828:	7d0b      	ldrb	r3, [r1, #20]
   8682a:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   8682e:	f36f 0300 	bfc	r3, #0, #1
   86832:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   86834:	0163      	lsls	r3, r4, #5
   86836:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8683a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8683e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   86842:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   86846:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   8684a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   8684e:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   86852:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   86856:	2a00      	cmp	r2, #0
   86858:	dab4      	bge.n	867c4 <udd_ep_alloc+0x178>
		udd_enable_endpoint_bank_autoswitch(i);
   8685a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   8685e:	f042 0202 	orr.w	r2, r2, #2
   86862:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   86866:	f1ba 0f00 	cmp.w	sl, #0
   8686a:	d0ca      	beq.n	86802 <udd_ep_alloc+0x1b6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   8686c:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   86870:	f855 2c08 	ldr.w	r2, [r5, #-8]
   86874:	ebab 0102 	sub.w	r1, fp, r2
   86878:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   8687c:	f855 3c10 	ldr.w	r3, [r5, #-16]
   86880:	eb02 0a03 	add.w	sl, r2, r3
   86884:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   86888:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   8688c:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   86890:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   86894:	f855 3c18 	ldr.w	r3, [r5, #-24]
   86898:	9300      	str	r3, [sp, #0]
   8689a:	ebaa 030b 	sub.w	r3, sl, fp
   8689e:	440a      	add	r2, r1
   868a0:	f3cc 0140 	ubfx	r1, ip, #1, #1
   868a4:	47c8      	blx	r9
			if (!b_restart) {
   868a6:	2800      	cmp	r0, #0
   868a8:	d1ab      	bne.n	86802 <udd_ep_alloc+0x1b6>
   868aa:	e002      	b.n	868b2 <udd_ep_alloc+0x266>
	return true;
   868ac:	2001      	movs	r0, #1
   868ae:	e000      	b.n	868b2 <udd_ep_alloc+0x266>
		return false;
   868b0:	2000      	movs	r0, #0
}
   868b2:	b003      	add	sp, #12
   868b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   868b8:	2000      	movs	r0, #0
   868ba:	e7fa      	b.n	868b2 <udd_ep_alloc+0x266>
		return false;
   868bc:	2000      	movs	r0, #0
   868be:	e7f8      	b.n	868b2 <udd_ep_alloc+0x266>
		return false;
   868c0:	2000      	movs	r0, #0
   868c2:	e7f6      	b.n	868b2 <udd_ep_alloc+0x266>
				return false;
   868c4:	2000      	movs	r0, #0
   868c6:	e7f4      	b.n	868b2 <udd_ep_alloc+0x266>
   868c8:	400a4000 	.word	0x400a4000
   868cc:	2000230c 	.word	0x2000230c
   868d0:	00086551 	.word	0x00086551

000868d4 <udd_ep_abort>:
{
   868d4:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   868d6:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   868da:	4b18      	ldr	r3, [pc, #96]	; (8693c <udd_ep_abort+0x68>)
   868dc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   868e0:	2100      	movs	r1, #0
   868e2:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   868e4:	f010 0f80 	tst.w	r0, #128	; 0x80
   868e8:	d109      	bne.n	868fe <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   868ea:	1e50      	subs	r0, r2, #1
   868ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   868f0:	2101      	movs	r1, #1
   868f2:	4b13      	ldr	r3, [pc, #76]	; (86940 <udd_ep_abort+0x6c>)
   868f4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   868f8:	4b12      	ldr	r3, [pc, #72]	; (86944 <udd_ep_abort+0x70>)
   868fa:	4798      	blx	r3
}
   868fc:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   868fe:	0151      	lsls	r1, r2, #5
   86900:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   86904:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   86908:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   8690c:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   86910:	d0eb      	beq.n	868ea <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   86912:	0153      	lsls	r3, r2, #5
   86914:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   86918:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8691c:	f501 748a 	add.w	r4, r1, #276	; 0x114
   86920:	f44f 7000 	mov.w	r0, #512	; 0x200
   86924:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   86926:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   8692a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8692e:	d1fa      	bne.n	86926 <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   86930:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   86934:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   86938:	d1f4      	bne.n	86924 <udd_ep_abort+0x50>
   8693a:	e7d6      	b.n	868ea <udd_ep_abort+0x16>
   8693c:	400a4300 	.word	0x400a4300
   86940:	2000230c 	.word	0x2000230c
   86944:	000858e9 	.word	0x000858e9

00086948 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   86948:	4a07      	ldr	r2, [pc, #28]	; (86968 <udd_test_mode_j+0x20>)
   8694a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8694e:	f023 0303 	bic.w	r3, r3, #3
   86952:	f043 0302 	orr.w	r3, r3, #2
   86956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8695a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8695e:	f043 0304 	orr.w	r3, r3, #4
   86962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86966:	4770      	bx	lr
   86968:	400a4000 	.word	0x400a4000

0008696c <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   8696c:	4a07      	ldr	r2, [pc, #28]	; (8698c <udd_test_mode_k+0x20>)
   8696e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86972:	f023 0303 	bic.w	r3, r3, #3
   86976:	f043 0302 	orr.w	r3, r3, #2
   8697a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8697e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86982:	f043 0308 	orr.w	r3, r3, #8
   86986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8698a:	4770      	bx	lr
   8698c:	400a4000 	.word	0x400a4000

00086990 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   86990:	4a04      	ldr	r2, [pc, #16]	; (869a4 <udd_test_mode_se0_nak+0x14>)
   86992:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86996:	f023 0303 	bic.w	r3, r3, #3
   8699a:	f043 0302 	orr.w	r3, r3, #2
   8699e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   869a2:	4770      	bx	lr
   869a4:	400a4000 	.word	0x400a4000

000869a8 <udd_test_mode_packet>:
{
   869a8:	b430      	push	{r4, r5}
   869aa:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   869ac:	466c      	mov	r4, sp
   869ae:	4d21      	ldr	r5, [pc, #132]	; (86a34 <udd_test_mode_packet+0x8c>)
   869b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   869b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   869b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   869b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   869b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   869ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   869bc:	e895 0003 	ldmia.w	r5, {r0, r1}
   869c0:	f844 0b04 	str.w	r0, [r4], #4
   869c4:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   869c6:	4b1c      	ldr	r3, [pc, #112]	; (86a38 <udd_test_mode_packet+0x90>)
   869c8:	2101      	movs	r1, #1
   869ca:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   869ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   869d2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   869d6:	f022 0203 	bic.w	r2, r2, #3
   869da:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   869de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   869e2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   869e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   869ea:	f022 0203 	bic.w	r2, r2, #3
   869ee:	f042 0202 	orr.w	r2, r2, #2
   869f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   869f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   869fa:	f042 0210 	orr.w	r2, r2, #16
   869fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   86a02:	466b      	mov	r3, sp
   86a04:	480d      	ldr	r0, [pc, #52]	; (86a3c <udd_test_mode_packet+0x94>)
   86a06:	aa0e      	add	r2, sp, #56	; 0x38
   86a08:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   86a0a:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   86a0e:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   86a10:	f813 1b01 	ldrb.w	r1, [r3], #1
   86a14:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   86a16:	42a3      	cmp	r3, r4
   86a18:	d1f9      	bne.n	86a0e <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   86a1a:	4b07      	ldr	r3, [pc, #28]	; (86a38 <udd_test_mode_packet+0x90>)
   86a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86a20:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86a28:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   86a2c:	b00e      	add	sp, #56	; 0x38
   86a2e:	bc30      	pop	{r4, r5}
   86a30:	4770      	bx	lr
   86a32:	bf00      	nop
   86a34:	0008e4c0 	.word	0x0008e4c0
   86a38:	400a4000 	.word	0x400a4000
   86a3c:	20180038 	.word	0x20180038

00086a40 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86a40:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86a42:	010b      	lsls	r3, r1, #4
   86a44:	4293      	cmp	r3, r2
   86a46:	d914      	bls.n	86a72 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86a48:	00c9      	lsls	r1, r1, #3
   86a4a:	084b      	lsrs	r3, r1, #1
   86a4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   86a50:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   86a54:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86a56:	1e5c      	subs	r4, r3, #1
   86a58:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86a5c:	428c      	cmp	r4, r1
   86a5e:	d901      	bls.n	86a64 <usart_set_async_baudrate+0x24>
		return 1;
   86a60:	2001      	movs	r0, #1
   86a62:	e017      	b.n	86a94 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   86a64:	6841      	ldr	r1, [r0, #4]
   86a66:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   86a6a:	6041      	str	r1, [r0, #4]
   86a6c:	e00c      	b.n	86a88 <usart_set_async_baudrate+0x48>
		return 1;
   86a6e:	2001      	movs	r0, #1
   86a70:	e010      	b.n	86a94 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86a72:	0859      	lsrs	r1, r3, #1
   86a74:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   86a78:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   86a7c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86a7e:	1e5c      	subs	r4, r3, #1
   86a80:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86a84:	428c      	cmp	r4, r1
   86a86:	d8f2      	bhi.n	86a6e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86a88:	0412      	lsls	r2, r2, #16
   86a8a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   86a8e:	431a      	orrs	r2, r3
   86a90:	6202      	str	r2, [r0, #32]

	return 0;
   86a92:	2000      	movs	r0, #0
}
   86a94:	bc10      	pop	{r4}
   86a96:	4770      	bx	lr

00086a98 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86a98:	4b0a      	ldr	r3, [pc, #40]	; (86ac4 <usart_reset+0x2c>)
   86a9a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   86a9e:	2300      	movs	r3, #0
   86aa0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   86aa2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86aa4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86aa6:	2388      	movs	r3, #136	; 0x88
   86aa8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86aaa:	2324      	movs	r3, #36	; 0x24
   86aac:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   86aae:	f44f 7380 	mov.w	r3, #256	; 0x100
   86ab2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   86ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   86ab8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   86aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   86abe:	6003      	str	r3, [r0, #0]
   86ac0:	4770      	bx	lr
   86ac2:	bf00      	nop
   86ac4:	55534100 	.word	0x55534100

00086ac8 <usart_init_rs232>:
{
   86ac8:	b570      	push	{r4, r5, r6, lr}
   86aca:	4605      	mov	r5, r0
   86acc:	460c      	mov	r4, r1
   86ace:	4616      	mov	r6, r2
	usart_reset(p_usart);
   86ad0:	4b0f      	ldr	r3, [pc, #60]	; (86b10 <usart_init_rs232+0x48>)
   86ad2:	4798      	blx	r3
	ul_reg_val = 0;
   86ad4:	2200      	movs	r2, #0
   86ad6:	4b0f      	ldr	r3, [pc, #60]	; (86b14 <usart_init_rs232+0x4c>)
   86ad8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86ada:	b1a4      	cbz	r4, 86b06 <usart_init_rs232+0x3e>
   86adc:	4632      	mov	r2, r6
   86ade:	6821      	ldr	r1, [r4, #0]
   86ae0:	4628      	mov	r0, r5
   86ae2:	4b0d      	ldr	r3, [pc, #52]	; (86b18 <usart_init_rs232+0x50>)
   86ae4:	4798      	blx	r3
   86ae6:	4602      	mov	r2, r0
   86ae8:	b978      	cbnz	r0, 86b0a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86aea:	6863      	ldr	r3, [r4, #4]
   86aec:	68a1      	ldr	r1, [r4, #8]
   86aee:	430b      	orrs	r3, r1
   86af0:	6921      	ldr	r1, [r4, #16]
   86af2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86af4:	68e1      	ldr	r1, [r4, #12]
   86af6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86af8:	4906      	ldr	r1, [pc, #24]	; (86b14 <usart_init_rs232+0x4c>)
   86afa:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   86afc:	6869      	ldr	r1, [r5, #4]
   86afe:	430b      	orrs	r3, r1
   86b00:	606b      	str	r3, [r5, #4]
}
   86b02:	4610      	mov	r0, r2
   86b04:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86b06:	2201      	movs	r2, #1
   86b08:	e7fb      	b.n	86b02 <usart_init_rs232+0x3a>
   86b0a:	2201      	movs	r2, #1
   86b0c:	e7f9      	b.n	86b02 <usart_init_rs232+0x3a>
   86b0e:	bf00      	nop
   86b10:	00086a99 	.word	0x00086a99
   86b14:	2000239c 	.word	0x2000239c
   86b18:	00086a41 	.word	0x00086a41

00086b1c <usart_init_sync_master>:
{
   86b1c:	b570      	push	{r4, r5, r6, lr}
   86b1e:	4604      	mov	r4, r0
   86b20:	460e      	mov	r6, r1
   86b22:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86b24:	4b15      	ldr	r3, [pc, #84]	; (86b7c <usart_init_sync_master+0x60>)
   86b26:	4798      	blx	r3
	ul_reg_val = 0;
   86b28:	2200      	movs	r2, #0
   86b2a:	4b15      	ldr	r3, [pc, #84]	; (86b80 <usart_init_sync_master+0x64>)
   86b2c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   86b2e:	b306      	cbz	r6, 86b72 <usart_init_sync_master+0x56>
   86b30:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86b32:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   86b36:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86b3a:	1e51      	subs	r1, r2, #1
   86b3c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86b40:	4299      	cmp	r1, r3
   86b42:	d818      	bhi.n	86b76 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86b44:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86b46:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   86b48:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86b50:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86b52:	6873      	ldr	r3, [r6, #4]
   86b54:	68b2      	ldr	r2, [r6, #8]
   86b56:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   86b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86b5c:	6932      	ldr	r2, [r6, #16]
   86b5e:	4313      	orrs	r3, r2
   86b60:	68f2      	ldr	r2, [r6, #12]
   86b62:	4313      	orrs	r3, r2
   86b64:	4a06      	ldr	r2, [pc, #24]	; (86b80 <usart_init_sync_master+0x64>)
   86b66:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86b68:	6862      	ldr	r2, [r4, #4]
   86b6a:	4313      	orrs	r3, r2
   86b6c:	6063      	str	r3, [r4, #4]
	return 0;
   86b6e:	2000      	movs	r0, #0
   86b70:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86b72:	2001      	movs	r0, #1
   86b74:	bd70      	pop	{r4, r5, r6, pc}
   86b76:	2001      	movs	r0, #1
}
   86b78:	bd70      	pop	{r4, r5, r6, pc}
   86b7a:	bf00      	nop
   86b7c:	00086a99 	.word	0x00086a99
   86b80:	200023a0 	.word	0x200023a0

00086b84 <usart_init_iso7816>:
{
   86b84:	b570      	push	{r4, r5, r6, lr}
   86b86:	4606      	mov	r6, r0
   86b88:	460c      	mov	r4, r1
   86b8a:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86b8c:	4b30      	ldr	r3, [pc, #192]	; (86c50 <usart_init_iso7816+0xcc>)
   86b8e:	4798      	blx	r3
	ul_reg_val = 0;
   86b90:	2200      	movs	r2, #0
   86b92:	4b30      	ldr	r3, [pc, #192]	; (86c54 <usart_init_iso7816+0xd0>)
   86b94:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
   86b96:	2c00      	cmp	r4, #0
   86b98:	d04f      	beq.n	86c3a <usart_init_iso7816+0xb6>
   86b9a:	68a3      	ldr	r3, [r4, #8]
   86b9c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
   86ba0:	d14d      	bne.n	86c3e <usart_init_iso7816+0xba>
	if (p_usart_opt->protocol_type == ISO7816_T_0) {
   86ba2:	69e3      	ldr	r3, [r4, #28]
   86ba4:	2b00      	cmp	r3, #0
   86ba6:	d13c      	bne.n	86c22 <usart_init_iso7816+0x9e>
				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
   86ba8:	6963      	ldr	r3, [r4, #20]
   86baa:	061b      	lsls	r3, r3, #24
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
   86bac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
   86bb0:	f042 0204 	orr.w	r2, r2, #4
   86bb4:	4927      	ldr	r1, [pc, #156]	; (86c54 <usart_init_iso7816+0xd0>)
   86bb6:	600a      	str	r2, [r1, #0]
		if (p_usart_opt->bit_order) {
   86bb8:	69a2      	ldr	r2, [r4, #24]
   86bba:	b122      	cbz	r2, 86bc6 <usart_init_iso7816+0x42>
			ul_reg_val |= US_MR_MSBF;
   86bbc:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   86bc0:	f043 0304 	orr.w	r3, r3, #4
   86bc4:	600b      	str	r3, [r1, #0]
	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
   86bc6:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + clock / 2) / clock;
   86bc8:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86bcc:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86bd0:	1e6a      	subs	r2, r5, #1
   86bd2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86bd6:	429a      	cmp	r2, r3
   86bd8:	d837      	bhi.n	86c4a <usart_init_iso7816+0xc6>
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86bda:	6873      	ldr	r3, [r6, #4]
			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
   86bdc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
   86be0:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86be8:	6073      	str	r3, [r6, #4]
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86bea:	6235      	str	r5, [r6, #32]
	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
   86bec:	6863      	ldr	r3, [r4, #4]
   86bee:	6433      	str	r3, [r6, #64]	; 0x40
	ul_reg_val |= p_usart_opt->parity_type;
   86bf0:	4a18      	ldr	r2, [pc, #96]	; (86c54 <usart_init_iso7816+0xd0>)
   86bf2:	68a3      	ldr	r3, [r4, #8]
   86bf4:	6811      	ldr	r1, [r2, #0]
   86bf6:	430b      	orrs	r3, r1
   86bf8:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->inhibit_nack) {
   86bfa:	68e2      	ldr	r2, [r4, #12]
   86bfc:	b11a      	cbz	r2, 86c06 <usart_init_iso7816+0x82>
		ul_reg_val |= US_MR_INACK;
   86bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   86c02:	4a14      	ldr	r2, [pc, #80]	; (86c54 <usart_init_iso7816+0xd0>)
   86c04:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->dis_suc_nack) {
   86c06:	6923      	ldr	r3, [r4, #16]
   86c08:	b123      	cbz	r3, 86c14 <usart_init_iso7816+0x90>
		ul_reg_val |= US_MR_DSNACK;
   86c0a:	4a12      	ldr	r2, [pc, #72]	; (86c54 <usart_init_iso7816+0xd0>)
   86c0c:	6813      	ldr	r3, [r2, #0]
   86c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   86c12:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86c14:	6873      	ldr	r3, [r6, #4]
   86c16:	4a0f      	ldr	r2, [pc, #60]	; (86c54 <usart_init_iso7816+0xd0>)
   86c18:	6812      	ldr	r2, [r2, #0]
   86c1a:	4313      	orrs	r3, r2
   86c1c:	6073      	str	r3, [r6, #4]
	return 0;
   86c1e:	2000      	movs	r0, #0
   86c20:	bd70      	pop	{r4, r5, r6, pc}
	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
   86c22:	2b01      	cmp	r3, #1
   86c24:	d001      	beq.n	86c2a <usart_init_iso7816+0xa6>
		return 1;
   86c26:	2001      	movs	r0, #1
   86c28:	bd70      	pop	{r4, r5, r6, pc}
		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
   86c2a:	69a3      	ldr	r3, [r4, #24]
   86c2c:	b94b      	cbnz	r3, 86c42 <usart_init_iso7816+0xbe>
   86c2e:	6963      	ldr	r3, [r4, #20]
   86c30:	b94b      	cbnz	r3, 86c46 <usart_init_iso7816+0xc2>
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
   86c32:	2206      	movs	r2, #6
   86c34:	4b07      	ldr	r3, [pc, #28]	; (86c54 <usart_init_iso7816+0xd0>)
   86c36:	601a      	str	r2, [r3, #0]
   86c38:	e7c5      	b.n	86bc6 <usart_init_iso7816+0x42>
		return 1;
   86c3a:	2001      	movs	r0, #1
   86c3c:	bd70      	pop	{r4, r5, r6, pc}
   86c3e:	2001      	movs	r0, #1
   86c40:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   86c42:	2001      	movs	r0, #1
   86c44:	bd70      	pop	{r4, r5, r6, pc}
   86c46:	2001      	movs	r0, #1
   86c48:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86c4a:	2001      	movs	r0, #1
}
   86c4c:	bd70      	pop	{r4, r5, r6, pc}
   86c4e:	bf00      	nop
   86c50:	00086a99 	.word	0x00086a99
   86c54:	200023a4 	.word	0x200023a4

00086c58 <usart_init_spi_master>:
{
   86c58:	b570      	push	{r4, r5, r6, lr}
   86c5a:	4606      	mov	r6, r0
   86c5c:	460c      	mov	r4, r1
   86c5e:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86c60:	4b2a      	ldr	r3, [pc, #168]	; (86d0c <usart_init_spi_master+0xb4>)
   86c62:	4798      	blx	r3
	ul_reg_val = 0;
   86c64:	2200      	movs	r2, #0
   86c66:	4b2a      	ldr	r3, [pc, #168]	; (86d10 <usart_init_spi_master+0xb8>)
   86c68:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86c6a:	2c00      	cmp	r4, #0
   86c6c:	d049      	beq.n	86d02 <usart_init_spi_master+0xaa>
   86c6e:	68a3      	ldr	r3, [r4, #8]
   86c70:	2b03      	cmp	r3, #3
   86c72:	d901      	bls.n	86c78 <usart_init_spi_master+0x20>
		return 1;
   86c74:	2001      	movs	r0, #1
   86c76:	bd70      	pop	{r4, r5, r6, pc}
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   86c78:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86c7a:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86c7e:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86c82:	1f2a      	subs	r2, r5, #4
   86c84:	f64f 73fb 	movw	r3, #65531	; 0xfffb
   86c88:	429a      	cmp	r2, r3
   86c8a:	d83c      	bhi.n	86d06 <usart_init_spi_master+0xae>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86c8c:	6235      	str	r5, [r6, #32]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86c8e:	6863      	ldr	r3, [r4, #4]
   86c90:	68e2      	ldr	r2, [r4, #12]
   86c92:	4313      	orrs	r3, r2
   86c94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   86c98:	f042 020e 	orr.w	r2, r2, #14
   86c9c:	491c      	ldr	r1, [pc, #112]	; (86d10 <usart_init_spi_master+0xb8>)
   86c9e:	600a      	str	r2, [r1, #0]
	switch (p_usart_opt->spi_mode) {
   86ca0:	68a2      	ldr	r2, [r4, #8]
   86ca2:	2a03      	cmp	r2, #3
   86ca4:	d80b      	bhi.n	86cbe <usart_init_spi_master+0x66>
   86ca6:	e8df f002 	tbb	[pc, r2]
   86caa:	1102      	.short	0x1102
   86cac:	231c      	.short	0x231c
		ul_reg_val &= ~US_MR_CPOL;
   86cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86cb6:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86cba:	4a15      	ldr	r2, [pc, #84]	; (86d10 <usart_init_spi_master+0xb8>)
   86cbc:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86cbe:	6873      	ldr	r3, [r6, #4]
   86cc0:	4a13      	ldr	r2, [pc, #76]	; (86d10 <usart_init_spi_master+0xb8>)
   86cc2:	6812      	ldr	r2, [r2, #0]
   86cc4:	4313      	orrs	r3, r2
   86cc6:	6073      	str	r3, [r6, #4]
	return 0;
   86cc8:	2000      	movs	r0, #0
   86cca:	bd70      	pop	{r4, r5, r6, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86cd8:	f043 030e 	orr.w	r3, r3, #14
   86cdc:	4a0c      	ldr	r2, [pc, #48]	; (86d10 <usart_init_spi_master+0xb8>)
   86cde:	6013      	str	r3, [r2, #0]
		break;
   86ce0:	e7ed      	b.n	86cbe <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86ce2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86ce6:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86cea:	4a09      	ldr	r2, [pc, #36]	; (86d10 <usart_init_spi_master+0xb8>)
   86cec:	6013      	str	r3, [r2, #0]
		break;
   86cee:	e7e6      	b.n	86cbe <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86cf4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86cf8:	f043 030e 	orr.w	r3, r3, #14
   86cfc:	4a04      	ldr	r2, [pc, #16]	; (86d10 <usart_init_spi_master+0xb8>)
   86cfe:	6013      	str	r3, [r2, #0]
		break;
   86d00:	e7dd      	b.n	86cbe <usart_init_spi_master+0x66>
		return 1;
   86d02:	2001      	movs	r0, #1
   86d04:	bd70      	pop	{r4, r5, r6, pc}
   86d06:	2001      	movs	r0, #1
}
   86d08:	bd70      	pop	{r4, r5, r6, pc}
   86d0a:	bf00      	nop
   86d0c:	00086a99 	.word	0x00086a99
   86d10:	200023a8 	.word	0x200023a8

00086d14 <usart_init_spi_slave>:
{
   86d14:	b538      	push	{r3, r4, r5, lr}
   86d16:	4604      	mov	r4, r0
   86d18:	460d      	mov	r5, r1
	usart_reset(p_usart);
   86d1a:	4b25      	ldr	r3, [pc, #148]	; (86db0 <usart_init_spi_slave+0x9c>)
   86d1c:	4798      	blx	r3
	ul_reg_val = 0;
   86d1e:	2200      	movs	r2, #0
   86d20:	4b24      	ldr	r3, [pc, #144]	; (86db4 <usart_init_spi_slave+0xa0>)
   86d22:	601a      	str	r2, [r3, #0]
	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
   86d24:	6863      	ldr	r3, [r4, #4]
   86d26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   86d2a:	6063      	str	r3, [r4, #4]
	p_usart->US_MR |= US_MR_USCLKS_SCK;
   86d2c:	6863      	ldr	r3, [r4, #4]
   86d2e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   86d32:	6063      	str	r3, [r4, #4]
	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
   86d34:	2d00      	cmp	r5, #0
   86d36:	d036      	beq.n	86da6 <usart_init_spi_slave+0x92>
   86d38:	68aa      	ldr	r2, [r5, #8]
   86d3a:	2a03      	cmp	r2, #3
   86d3c:	d835      	bhi.n	86daa <usart_init_spi_slave+0x96>
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86d3e:	686b      	ldr	r3, [r5, #4]
   86d40:	68e9      	ldr	r1, [r5, #12]
   86d42:	430b      	orrs	r3, r1
	switch (p_usart_opt->spi_mode) {
   86d44:	2a03      	cmp	r2, #3
   86d46:	d803      	bhi.n	86d50 <usart_init_spi_slave+0x3c>
   86d48:	e8df f002 	tbb	[pc, r2]
   86d4c:	241f160d 	.word	0x241f160d
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86d50:	f043 030f 	orr.w	r3, r3, #15
   86d54:	4a17      	ldr	r2, [pc, #92]	; (86db4 <usart_init_spi_slave+0xa0>)
   86d56:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86d58:	6863      	ldr	r3, [r4, #4]
   86d5a:	4a16      	ldr	r2, [pc, #88]	; (86db4 <usart_init_spi_slave+0xa0>)
   86d5c:	6812      	ldr	r2, [r2, #0]
   86d5e:	4313      	orrs	r3, r2
   86d60:	6063      	str	r3, [r4, #4]
	return 0;
   86d62:	2000      	movs	r0, #0
   86d64:	bd38      	pop	{r3, r4, r5, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d6a:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86d6e:	f043 0301 	orr.w	r3, r3, #1
   86d72:	4a10      	ldr	r2, [pc, #64]	; (86db4 <usart_init_spi_slave+0xa0>)
   86d74:	6013      	str	r3, [r2, #0]
		break;
   86d76:	e7ef      	b.n	86d58 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPOL;
   86d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d80:	f043 030f 	orr.w	r3, r3, #15
   86d84:	4a0b      	ldr	r2, [pc, #44]	; (86db4 <usart_init_spi_slave+0xa0>)
   86d86:	6013      	str	r3, [r2, #0]
		break;
   86d88:	e7e6      	b.n	86d58 <usart_init_spi_slave+0x44>
		ul_reg_val |= US_MR_CPOL;
   86d8a:	4a0b      	ldr	r2, [pc, #44]	; (86db8 <usart_init_spi_slave+0xa4>)
   86d8c:	431a      	orrs	r2, r3
   86d8e:	4b09      	ldr	r3, [pc, #36]	; (86db4 <usart_init_spi_slave+0xa0>)
   86d90:	601a      	str	r2, [r3, #0]
		break;
   86d92:	e7e1      	b.n	86d58 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPHA;
   86d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86d9c:	f043 030f 	orr.w	r3, r3, #15
   86da0:	4a04      	ldr	r2, [pc, #16]	; (86db4 <usart_init_spi_slave+0xa0>)
   86da2:	6013      	str	r3, [r2, #0]
		break;
   86da4:	e7d8      	b.n	86d58 <usart_init_spi_slave+0x44>
		return 1;
   86da6:	2001      	movs	r0, #1
   86da8:	bd38      	pop	{r3, r4, r5, pc}
   86daa:	2001      	movs	r0, #1
}
   86dac:	bd38      	pop	{r3, r4, r5, pc}
   86dae:	bf00      	nop
   86db0:	00086a99 	.word	0x00086a99
   86db4:	200023ac 	.word	0x200023ac
   86db8:	0001010f 	.word	0x0001010f

00086dbc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   86dbc:	2340      	movs	r3, #64	; 0x40
   86dbe:	6003      	str	r3, [r0, #0]
   86dc0:	4770      	bx	lr

00086dc2 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   86dc2:	2380      	movs	r3, #128	; 0x80
   86dc4:	6003      	str	r3, [r0, #0]
   86dc6:	4770      	bx	lr

00086dc8 <usart_set_tx_timeguard>:
	p_usart->US_TTGR = timeguard;
   86dc8:	6281      	str	r1, [r0, #40]	; 0x28
   86dca:	4770      	bx	lr

00086dcc <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   86dcc:	2310      	movs	r3, #16
   86dce:	6003      	str	r3, [r0, #0]
   86dd0:	4770      	bx	lr

00086dd2 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   86dd2:	2320      	movs	r3, #32
   86dd4:	6003      	str	r3, [r0, #0]
   86dd6:	4770      	bx	lr

00086dd8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   86dd8:	6081      	str	r1, [r0, #8]
   86dda:	4770      	bx	lr

00086ddc <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   86ddc:	60c1      	str	r1, [r0, #12]
   86dde:	4770      	bx	lr

00086de0 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   86de0:	6900      	ldr	r0, [r0, #16]
}
   86de2:	4770      	bx	lr

00086de4 <usart_get_status>:
	return p_usart->US_CSR;
   86de4:	6940      	ldr	r0, [r0, #20]
}
   86de6:	4770      	bx	lr

00086de8 <usart_reset_status>:
	p_usart->US_CR = US_CR_RSTSTA;
   86de8:	f44f 7380 	mov.w	r3, #256	; 0x100
   86dec:	6003      	str	r3, [r0, #0]
   86dee:	4770      	bx	lr

00086df0 <usart_reset_iterations>:
	p_usart->US_CR = US_CR_RSTIT;
   86df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   86df4:	6003      	str	r3, [r0, #0]
   86df6:	4770      	bx	lr

00086df8 <usart_reset_nack>:
	p_usart->US_CR = US_CR_RSTNACK;
   86df8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   86dfc:	6003      	str	r3, [r0, #0]
   86dfe:	4770      	bx	lr

00086e00 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   86e00:	6940      	ldr	r0, [r0, #20]
}
   86e02:	f3c0 2040 	ubfx	r0, r0, #9, #1
   86e06:	4770      	bx	lr

00086e08 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86e08:	6943      	ldr	r3, [r0, #20]
   86e0a:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   86e0e:	bf1d      	ittte	ne
   86e10:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   86e14:	61c1      	strne	r1, [r0, #28]
	return 0;
   86e16:	2000      	movne	r0, #0
		return 1;
   86e18:	2001      	moveq	r0, #1
}
   86e1a:	4770      	bx	lr

00086e1c <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86e1c:	6943      	ldr	r3, [r0, #20]
   86e1e:	f013 0f02 	tst.w	r3, #2
   86e22:	d0fb      	beq.n	86e1c <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   86e24:	f3c1 0108 	ubfx	r1, r1, #0, #9
   86e28:	61c1      	str	r1, [r0, #28]
}
   86e2a:	2000      	movs	r0, #0
   86e2c:	4770      	bx	lr

00086e2e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86e2e:	6943      	ldr	r3, [r0, #20]
   86e30:	f013 0f01 	tst.w	r3, #1
   86e34:	d005      	beq.n	86e42 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86e36:	6983      	ldr	r3, [r0, #24]
   86e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86e3c:	600b      	str	r3, [r1, #0]
	return 0;
   86e3e:	2000      	movs	r0, #0
   86e40:	4770      	bx	lr
		return 1;
   86e42:	2001      	movs	r0, #1
}
   86e44:	4770      	bx	lr

00086e46 <usart_getchar>:
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86e46:	6943      	ldr	r3, [r0, #20]
   86e48:	f013 0f01 	tst.w	r3, #1
   86e4c:	d0fb      	beq.n	86e46 <usart_getchar>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86e4e:	6983      	ldr	r3, [r0, #24]
   86e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86e54:	600b      	str	r3, [r1, #0]
}
   86e56:	2000      	movs	r0, #0
   86e58:	4770      	bx	lr

00086e5a <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   86e5a:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   86e5c:	23ac      	movs	r3, #172	; 0xac
   86e5e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   86e60:	680b      	ldr	r3, [r1, #0]
   86e62:	684a      	ldr	r2, [r1, #4]
   86e64:	fbb3 f3f2 	udiv	r3, r3, r2
   86e68:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   86e6a:	1e5c      	subs	r4, r3, #1
   86e6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   86e70:	4294      	cmp	r4, r2
   86e72:	d80b      	bhi.n	86e8c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   86e74:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   86e76:	688b      	ldr	r3, [r1, #8]
   86e78:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   86e7a:	f240 2302 	movw	r3, #514	; 0x202
   86e7e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   86e82:	2350      	movs	r3, #80	; 0x50
   86e84:	6003      	str	r3, [r0, #0]

	return 0;
   86e86:	2000      	movs	r0, #0
}
   86e88:	bc10      	pop	{r4}
   86e8a:	4770      	bx	lr
		return 1;
   86e8c:	2001      	movs	r0, #1
   86e8e:	e7fb      	b.n	86e88 <uart_init+0x2e>

00086e90 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   86e90:	6943      	ldr	r3, [r0, #20]
   86e92:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   86e96:	bf1a      	itte	ne
   86e98:	61c1      	strne	r1, [r0, #28]
	return 0;
   86e9a:	2000      	movne	r0, #0
		return 1;
   86e9c:	2001      	moveq	r0, #1
}
   86e9e:	4770      	bx	lr

00086ea0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   86ea0:	6943      	ldr	r3, [r0, #20]
   86ea2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   86ea6:	bf1d      	ittte	ne
   86ea8:	6983      	ldrne	r3, [r0, #24]
   86eaa:	700b      	strbne	r3, [r1, #0]
	return 0;
   86eac:	2000      	movne	r0, #0
		return 1;
   86eae:	2001      	moveq	r0, #1
}
   86eb0:	4770      	bx	lr

00086eb2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   86eb2:	e7fe      	b.n	86eb2 <Dummy_Handler>

00086eb4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   86eb4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   86eb6:	4b1c      	ldr	r3, [pc, #112]	; (86f28 <Reset_Handler+0x74>)
   86eb8:	4a1c      	ldr	r2, [pc, #112]	; (86f2c <Reset_Handler+0x78>)
   86eba:	429a      	cmp	r2, r3
   86ebc:	d010      	beq.n	86ee0 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   86ebe:	4b1c      	ldr	r3, [pc, #112]	; (86f30 <Reset_Handler+0x7c>)
   86ec0:	4a19      	ldr	r2, [pc, #100]	; (86f28 <Reset_Handler+0x74>)
   86ec2:	429a      	cmp	r2, r3
   86ec4:	d20c      	bcs.n	86ee0 <Reset_Handler+0x2c>
   86ec6:	3b01      	subs	r3, #1
   86ec8:	1a9b      	subs	r3, r3, r2
   86eca:	f023 0303 	bic.w	r3, r3, #3
   86ece:	3304      	adds	r3, #4
   86ed0:	4413      	add	r3, r2
   86ed2:	4916      	ldr	r1, [pc, #88]	; (86f2c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   86ed4:	f851 0b04 	ldr.w	r0, [r1], #4
   86ed8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   86edc:	429a      	cmp	r2, r3
   86ede:	d1f9      	bne.n	86ed4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   86ee0:	4b14      	ldr	r3, [pc, #80]	; (86f34 <Reset_Handler+0x80>)
   86ee2:	4a15      	ldr	r2, [pc, #84]	; (86f38 <Reset_Handler+0x84>)
   86ee4:	429a      	cmp	r2, r3
   86ee6:	d20a      	bcs.n	86efe <Reset_Handler+0x4a>
   86ee8:	3b01      	subs	r3, #1
   86eea:	1a9b      	subs	r3, r3, r2
   86eec:	f023 0303 	bic.w	r3, r3, #3
   86ef0:	3304      	adds	r3, #4
   86ef2:	4413      	add	r3, r2
		*pDest++ = 0;
   86ef4:	2100      	movs	r1, #0
   86ef6:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   86efa:	4293      	cmp	r3, r2
   86efc:	d1fb      	bne.n	86ef6 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   86efe:	4b0f      	ldr	r3, [pc, #60]	; (86f3c <Reset_Handler+0x88>)
   86f00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   86f04:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86f08:	490d      	ldr	r1, [pc, #52]	; (86f40 <Reset_Handler+0x8c>)
   86f0a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   86f0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   86f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   86f14:	d203      	bcs.n	86f1e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   86f16:	688b      	ldr	r3, [r1, #8]
   86f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   86f1c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   86f1e:	4b09      	ldr	r3, [pc, #36]	; (86f44 <Reset_Handler+0x90>)
   86f20:	4798      	blx	r3

	/* Branch to main function */
	main();
   86f22:	4b09      	ldr	r3, [pc, #36]	; (86f48 <Reset_Handler+0x94>)
   86f24:	4798      	blx	r3
   86f26:	e7fe      	b.n	86f26 <Reset_Handler+0x72>
   86f28:	20000000 	.word	0x20000000
   86f2c:	0008e9e4 	.word	0x0008e9e4
   86f30:	200010c0 	.word	0x200010c0
   86f34:	20002e2c 	.word	0x20002e2c
   86f38:	200010c0 	.word	0x200010c0
   86f3c:	00080000 	.word	0x00080000
   86f40:	e000ed00 	.word	0xe000ed00
   86f44:	000877c5 	.word	0x000877c5
   86f48:	00087295 	.word	0x00087295

00086f4c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   86f4c:	4b3d      	ldr	r3, [pc, #244]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86f50:	f003 0303 	and.w	r3, r3, #3
   86f54:	2b03      	cmp	r3, #3
   86f56:	d80e      	bhi.n	86f76 <SystemCoreClockUpdate+0x2a>
   86f58:	e8df f003 	tbb	[pc, r3]
   86f5c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   86f60:	4b39      	ldr	r3, [pc, #228]	; (87048 <SystemCoreClockUpdate+0xfc>)
   86f62:	695b      	ldr	r3, [r3, #20]
   86f64:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   86f68:	bf14      	ite	ne
   86f6a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   86f6e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   86f72:	4b36      	ldr	r3, [pc, #216]	; (8704c <SystemCoreClockUpdate+0x100>)
   86f74:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   86f76:	4b33      	ldr	r3, [pc, #204]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86f7e:	2b70      	cmp	r3, #112	; 0x70
   86f80:	d057      	beq.n	87032 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   86f82:	4b30      	ldr	r3, [pc, #192]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   86f86:	4931      	ldr	r1, [pc, #196]	; (8704c <SystemCoreClockUpdate+0x100>)
   86f88:	f3c2 1202 	ubfx	r2, r2, #4, #3
   86f8c:	680b      	ldr	r3, [r1, #0]
   86f8e:	40d3      	lsrs	r3, r2
   86f90:	600b      	str	r3, [r1, #0]
   86f92:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86f94:	4b2b      	ldr	r3, [pc, #172]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86f96:	6a1b      	ldr	r3, [r3, #32]
   86f98:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   86f9c:	d003      	beq.n	86fa6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86f9e:	4a2c      	ldr	r2, [pc, #176]	; (87050 <SystemCoreClockUpdate+0x104>)
   86fa0:	4b2a      	ldr	r3, [pc, #168]	; (8704c <SystemCoreClockUpdate+0x100>)
   86fa2:	601a      	str	r2, [r3, #0]
   86fa4:	e7e7      	b.n	86f76 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86fa6:	4a2b      	ldr	r2, [pc, #172]	; (87054 <SystemCoreClockUpdate+0x108>)
   86fa8:	4b28      	ldr	r3, [pc, #160]	; (8704c <SystemCoreClockUpdate+0x100>)
   86faa:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86fac:	4b25      	ldr	r3, [pc, #148]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86fae:	6a1b      	ldr	r3, [r3, #32]
   86fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86fb4:	2b10      	cmp	r3, #16
   86fb6:	d005      	beq.n	86fc4 <SystemCoreClockUpdate+0x78>
   86fb8:	2b20      	cmp	r3, #32
   86fba:	d1dc      	bne.n	86f76 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   86fbc:	4a24      	ldr	r2, [pc, #144]	; (87050 <SystemCoreClockUpdate+0x104>)
   86fbe:	4b23      	ldr	r3, [pc, #140]	; (8704c <SystemCoreClockUpdate+0x100>)
   86fc0:	601a      	str	r2, [r3, #0]
				break;
   86fc2:	e7d8      	b.n	86f76 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   86fc4:	4a24      	ldr	r2, [pc, #144]	; (87058 <SystemCoreClockUpdate+0x10c>)
   86fc6:	4b21      	ldr	r3, [pc, #132]	; (8704c <SystemCoreClockUpdate+0x100>)
   86fc8:	601a      	str	r2, [r3, #0]
				break;
   86fca:	e7d4      	b.n	86f76 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86fcc:	4b1d      	ldr	r3, [pc, #116]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86fce:	6a1b      	ldr	r3, [r3, #32]
   86fd0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   86fd4:	d00c      	beq.n	86ff0 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86fd6:	4a1e      	ldr	r2, [pc, #120]	; (87050 <SystemCoreClockUpdate+0x104>)
   86fd8:	4b1c      	ldr	r3, [pc, #112]	; (8704c <SystemCoreClockUpdate+0x100>)
   86fda:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   86fdc:	4b19      	ldr	r3, [pc, #100]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86fe0:	f003 0303 	and.w	r3, r3, #3
   86fe4:	2b02      	cmp	r3, #2
   86fe6:	d016      	beq.n	87016 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   86fe8:	4a1c      	ldr	r2, [pc, #112]	; (8705c <SystemCoreClockUpdate+0x110>)
   86fea:	4b18      	ldr	r3, [pc, #96]	; (8704c <SystemCoreClockUpdate+0x100>)
   86fec:	601a      	str	r2, [r3, #0]
   86fee:	e7c2      	b.n	86f76 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86ff0:	4a18      	ldr	r2, [pc, #96]	; (87054 <SystemCoreClockUpdate+0x108>)
   86ff2:	4b16      	ldr	r3, [pc, #88]	; (8704c <SystemCoreClockUpdate+0x100>)
   86ff4:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86ff6:	4b13      	ldr	r3, [pc, #76]	; (87044 <SystemCoreClockUpdate+0xf8>)
   86ff8:	6a1b      	ldr	r3, [r3, #32]
   86ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86ffe:	2b10      	cmp	r3, #16
   87000:	d005      	beq.n	8700e <SystemCoreClockUpdate+0xc2>
   87002:	2b20      	cmp	r3, #32
   87004:	d1ea      	bne.n	86fdc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   87006:	4a12      	ldr	r2, [pc, #72]	; (87050 <SystemCoreClockUpdate+0x104>)
   87008:	4b10      	ldr	r3, [pc, #64]	; (8704c <SystemCoreClockUpdate+0x100>)
   8700a:	601a      	str	r2, [r3, #0]
				break;
   8700c:	e7e6      	b.n	86fdc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8700e:	4a12      	ldr	r2, [pc, #72]	; (87058 <SystemCoreClockUpdate+0x10c>)
   87010:	4b0e      	ldr	r3, [pc, #56]	; (8704c <SystemCoreClockUpdate+0x100>)
   87012:	601a      	str	r2, [r3, #0]
				break;
   87014:	e7e2      	b.n	86fdc <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   87016:	4a0b      	ldr	r2, [pc, #44]	; (87044 <SystemCoreClockUpdate+0xf8>)
   87018:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8701a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8701c:	480b      	ldr	r0, [pc, #44]	; (8704c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8701e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   87022:	6803      	ldr	r3, [r0, #0]
   87024:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   87028:	b2d2      	uxtb	r2, r2
   8702a:	fbb3 f3f2 	udiv	r3, r3, r2
   8702e:	6003      	str	r3, [r0, #0]
   87030:	e7a1      	b.n	86f76 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   87032:	4a06      	ldr	r2, [pc, #24]	; (8704c <SystemCoreClockUpdate+0x100>)
   87034:	6813      	ldr	r3, [r2, #0]
   87036:	490a      	ldr	r1, [pc, #40]	; (87060 <SystemCoreClockUpdate+0x114>)
   87038:	fba1 1303 	umull	r1, r3, r1, r3
   8703c:	085b      	lsrs	r3, r3, #1
   8703e:	6013      	str	r3, [r2, #0]
   87040:	4770      	bx	lr
   87042:	bf00      	nop
   87044:	400e0400 	.word	0x400e0400
   87048:	400e1210 	.word	0x400e1210
   8704c:	200006ec 	.word	0x200006ec
   87050:	00b71b00 	.word	0x00b71b00
   87054:	003d0900 	.word	0x003d0900
   87058:	007a1200 	.word	0x007a1200
   8705c:	0e4e1c00 	.word	0x0e4e1c00
   87060:	aaaaaaab 	.word	0xaaaaaaab

00087064 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   87064:	4b0a      	ldr	r3, [pc, #40]	; (87090 <_sbrk+0x2c>)
   87066:	681b      	ldr	r3, [r3, #0]
   87068:	b153      	cbz	r3, 87080 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8706a:	4b09      	ldr	r3, [pc, #36]	; (87090 <_sbrk+0x2c>)
   8706c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8706e:	181a      	adds	r2, r3, r0
   87070:	4908      	ldr	r1, [pc, #32]	; (87094 <_sbrk+0x30>)
   87072:	4291      	cmp	r1, r2
   87074:	db08      	blt.n	87088 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   87076:	4610      	mov	r0, r2
   87078:	4a05      	ldr	r2, [pc, #20]	; (87090 <_sbrk+0x2c>)
   8707a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8707c:	4618      	mov	r0, r3
   8707e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   87080:	4a05      	ldr	r2, [pc, #20]	; (87098 <_sbrk+0x34>)
   87082:	4b03      	ldr	r3, [pc, #12]	; (87090 <_sbrk+0x2c>)
   87084:	601a      	str	r2, [r3, #0]
   87086:	e7f0      	b.n	8706a <_sbrk+0x6>
		return (caddr_t) -1;	
   87088:	f04f 30ff 	mov.w	r0, #4294967295
}
   8708c:	4770      	bx	lr
   8708e:	bf00      	nop
   87090:	200023b0 	.word	0x200023b0
   87094:	2007fffc 	.word	0x2007fffc
   87098:	20082000 	.word	0x20082000

0008709c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8709c:	f04f 30ff 	mov.w	r0, #4294967295
   870a0:	4770      	bx	lr

000870a2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   870a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   870a6:	604b      	str	r3, [r1, #4]

	return 0;
}
   870a8:	2000      	movs	r0, #0
   870aa:	4770      	bx	lr

000870ac <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   870ac:	2001      	movs	r0, #1
   870ae:	4770      	bx	lr

000870b0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   870b0:	2000      	movs	r0, #0
   870b2:	4770      	bx	lr

000870b4 <_exit>:

extern void _exit(int status)
{
   870b4:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
   870b6:	4601      	mov	r1, r0
   870b8:	4801      	ldr	r0, [pc, #4]	; (870c0 <_exit+0xc>)
   870ba:	4b02      	ldr	r3, [pc, #8]	; (870c4 <_exit+0x10>)
   870bc:	4798      	blx	r3
   870be:	e7fe      	b.n	870be <_exit+0xa>
   870c0:	0008e4f8 	.word	0x0008e4f8
   870c4:	0008780d 	.word	0x0008780d

000870c8 <_kill>:

	for (;;);
}

extern void _kill(int pid, int sig)
{
   870c8:	4770      	bx	lr

000870ca <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
   870ca:	f04f 30ff 	mov.w	r0, #4294967295
   870ce:	4770      	bx	lr

000870d0 <fpga_program_setup1>:
	FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   870d0:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   870d2:	2008      	movs	r0, #8
   870d4:	4b19      	ldr	r3, [pc, #100]	; (8713c <fpga_program_setup1+0x6c>)
   870d6:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);	
	usart_enable_tx(FPGA_PROG_USART);
#else
				
	spi_enable_clock(SPI);
   870d8:	4c19      	ldr	r4, [pc, #100]	; (87140 <fpga_program_setup1+0x70>)
   870da:	4620      	mov	r0, r4
   870dc:	4b19      	ldr	r3, [pc, #100]	; (87144 <fpga_program_setup1+0x74>)
   870de:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   870e0:	2380      	movs	r3, #128	; 0x80
   870e2:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   870e4:	6863      	ldr	r3, [r4, #4]
   870e6:	f043 0301 	orr.w	r3, r3, #1
   870ea:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   870ec:	6863      	ldr	r3, [r4, #4]
   870ee:	f043 0310 	orr.w	r3, r3, #16
   870f2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   870f4:	6863      	ldr	r3, [r4, #4]
   870f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   870fa:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
				
	spi_set_clock_polarity(SPI, 0, 0);
   870fc:	2200      	movs	r2, #0
   870fe:	4611      	mov	r1, r2
   87100:	4620      	mov	r0, r4
   87102:	4b11      	ldr	r3, [pc, #68]	; (87148 <fpga_program_setup1+0x78>)
   87104:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   87106:	2201      	movs	r2, #1
   87108:	2100      	movs	r1, #0
   8710a:	4620      	mov	r0, r4
   8710c:	4b0f      	ldr	r3, [pc, #60]	; (8714c <fpga_program_setup1+0x7c>)
   8710e:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   87110:	490f      	ldr	r1, [pc, #60]	; (87150 <fpga_program_setup1+0x80>)
   87112:	4810      	ldr	r0, [pc, #64]	; (87154 <fpga_program_setup1+0x84>)
   87114:	4b10      	ldr	r3, [pc, #64]	; (87158 <fpga_program_setup1+0x88>)
   87116:	4798      	blx	r3
   87118:	b2c2      	uxtb	r2, r0
   8711a:	2100      	movs	r1, #0
   8711c:	4620      	mov	r0, r4
   8711e:	4b0f      	ldr	r3, [pc, #60]	; (8715c <fpga_program_setup1+0x8c>)
   87120:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   87122:	2301      	movs	r3, #1
   87124:	6023      	str	r3, [r4, #0]
				
	spi_enable(SPI);
				
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   87126:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8712a:	200e      	movs	r0, #14
   8712c:	4c0c      	ldr	r4, [pc, #48]	; (87160 <fpga_program_setup1+0x90>)
   8712e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);			
   87130:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   87134:	200f      	movs	r0, #15
   87136:	47a0      	blx	r4
#endif
}
   87138:	bd10      	pop	{r4, pc}
   8713a:	bf00      	nop
   8713c:	00085151 	.word	0x00085151
   87140:	40008000 	.word	0x40008000
   87144:	00085551 	.word	0x00085551
   87148:	000855d3 	.word	0x000855d3
   8714c:	000855f1 	.word	0x000855f1
   87150:	05b8d800 	.word	0x05b8d800
   87154:	000f4240 	.word	0x000f4240
   87158:	0008560f 	.word	0x0008560f
   8715c:	00085625 	.word	0x00085625
   87160:	0008516d 	.word	0x0008516d

00087164 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   87164:	b508      	push	{r3, lr}
	FPGA_NPROG_HIGH();	
   87166:	2008      	movs	r0, #8
   87168:	4b01      	ldr	r3, [pc, #4]	; (87170 <fpga_program_setup2+0xc>)
   8716a:	4798      	blx	r3
}
   8716c:	bd08      	pop	{r3, pc}
   8716e:	bf00      	nop
   87170:	00085137 	.word	0x00085137

00087174 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   87174:	b510      	push	{r4, lr}
   87176:	4601      	mov	r1, r0
		databyte = databyte >> 1;
	}
	#elif FPGA_USE_USART
	usart_putchar(FPGA_PROG_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   87178:	2300      	movs	r3, #0
   8717a:	461a      	mov	r2, r3
   8717c:	4801      	ldr	r0, [pc, #4]	; (87184 <fpga_program_sendbyte+0x10>)
   8717e:	4c02      	ldr	r4, [pc, #8]	; (87188 <fpga_program_sendbyte+0x14>)
   87180:	47a0      	blx	r4
	#endif
}
   87182:	bd10      	pop	{r4, pc}
   87184:	40008000 	.word	0x40008000
   87188:	0008559f 	.word	0x0008559f

0008718c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8718c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8718e:	b083      	sub	sp, #12
   87190:	4605      	mov	r5, r0
   87192:	460c      	mov	r4, r1
	uint32_t val = 0;
   87194:	2300      	movs	r3, #0
   87196:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   87198:	4b18      	ldr	r3, [pc, #96]	; (871fc <usart_serial_getchar+0x70>)
   8719a:	4298      	cmp	r0, r3
   8719c:	d010      	beq.n	871c0 <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8719e:	4b18      	ldr	r3, [pc, #96]	; (87200 <usart_serial_getchar+0x74>)
   871a0:	4298      	cmp	r0, r3
   871a2:	d021      	beq.n	871e8 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   871a4:	4b17      	ldr	r3, [pc, #92]	; (87204 <usart_serial_getchar+0x78>)
   871a6:	4298      	cmp	r0, r3
   871a8:	d111      	bne.n	871ce <usart_serial_getchar+0x42>
		while (usart_read(p_usart, &val));
   871aa:	461e      	mov	r6, r3
   871ac:	4d16      	ldr	r5, [pc, #88]	; (87208 <usart_serial_getchar+0x7c>)
   871ae:	a901      	add	r1, sp, #4
   871b0:	4630      	mov	r0, r6
   871b2:	47a8      	blx	r5
   871b4:	2800      	cmp	r0, #0
   871b6:	d1fa      	bne.n	871ae <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   871b8:	9b01      	ldr	r3, [sp, #4]
   871ba:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   871bc:	b003      	add	sp, #12
   871be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   871c0:	461f      	mov	r7, r3
   871c2:	4e12      	ldr	r6, [pc, #72]	; (8720c <usart_serial_getchar+0x80>)
   871c4:	4621      	mov	r1, r4
   871c6:	4638      	mov	r0, r7
   871c8:	47b0      	blx	r6
   871ca:	2800      	cmp	r0, #0
   871cc:	d1fa      	bne.n	871c4 <usart_serial_getchar+0x38>
	if (USART2 == p_usart) {
   871ce:	4b10      	ldr	r3, [pc, #64]	; (87210 <usart_serial_getchar+0x84>)
   871d0:	429d      	cmp	r5, r3
   871d2:	d1f3      	bne.n	871bc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   871d4:	461e      	mov	r6, r3
   871d6:	4d0c      	ldr	r5, [pc, #48]	; (87208 <usart_serial_getchar+0x7c>)
   871d8:	a901      	add	r1, sp, #4
   871da:	4630      	mov	r0, r6
   871dc:	47a8      	blx	r5
   871de:	2800      	cmp	r0, #0
   871e0:	d1fa      	bne.n	871d8 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   871e2:	9b01      	ldr	r3, [sp, #4]
   871e4:	7023      	strb	r3, [r4, #0]
}
   871e6:	e7e9      	b.n	871bc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   871e8:	461e      	mov	r6, r3
   871ea:	4d07      	ldr	r5, [pc, #28]	; (87208 <usart_serial_getchar+0x7c>)
   871ec:	a901      	add	r1, sp, #4
   871ee:	4630      	mov	r0, r6
   871f0:	47a8      	blx	r5
   871f2:	2800      	cmp	r0, #0
   871f4:	d1fa      	bne.n	871ec <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   871f6:	9b01      	ldr	r3, [sp, #4]
   871f8:	7023      	strb	r3, [r4, #0]
	if (USART2 == p_usart) {
   871fa:	e7df      	b.n	871bc <usart_serial_getchar+0x30>
   871fc:	400e0600 	.word	0x400e0600
   87200:	40090000 	.word	0x40090000
   87204:	40094000 	.word	0x40094000
   87208:	00086e2f 	.word	0x00086e2f
   8720c:	00086ea1 	.word	0x00086ea1
   87210:	40098000 	.word	0x40098000

00087214 <usart_serial_putchar>:
{
   87214:	b570      	push	{r4, r5, r6, lr}
   87216:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   87218:	4b18      	ldr	r3, [pc, #96]	; (8727c <usart_serial_putchar+0x68>)
   8721a:	4298      	cmp	r0, r3
   8721c:	d00a      	beq.n	87234 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   8721e:	4b18      	ldr	r3, [pc, #96]	; (87280 <usart_serial_putchar+0x6c>)
   87220:	4298      	cmp	r0, r3
   87222:	d010      	beq.n	87246 <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   87224:	4b17      	ldr	r3, [pc, #92]	; (87284 <usart_serial_putchar+0x70>)
   87226:	4298      	cmp	r0, r3
   87228:	d016      	beq.n	87258 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   8722a:	4b17      	ldr	r3, [pc, #92]	; (87288 <usart_serial_putchar+0x74>)
   8722c:	4298      	cmp	r0, r3
   8722e:	d01c      	beq.n	8726a <usart_serial_putchar+0x56>
	return 0;
   87230:	2000      	movs	r0, #0
}
   87232:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   87234:	461e      	mov	r6, r3
   87236:	4d15      	ldr	r5, [pc, #84]	; (8728c <usart_serial_putchar+0x78>)
   87238:	4621      	mov	r1, r4
   8723a:	4630      	mov	r0, r6
   8723c:	47a8      	blx	r5
   8723e:	2800      	cmp	r0, #0
   87240:	d1fa      	bne.n	87238 <usart_serial_putchar+0x24>
		return 1;
   87242:	2001      	movs	r0, #1
   87244:	e7f5      	b.n	87232 <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   87246:	461e      	mov	r6, r3
   87248:	4d11      	ldr	r5, [pc, #68]	; (87290 <usart_serial_putchar+0x7c>)
   8724a:	4621      	mov	r1, r4
   8724c:	4630      	mov	r0, r6
   8724e:	47a8      	blx	r5
   87250:	2800      	cmp	r0, #0
   87252:	d1fa      	bne.n	8724a <usart_serial_putchar+0x36>
		return 1;
   87254:	2001      	movs	r0, #1
   87256:	e7ec      	b.n	87232 <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   87258:	461e      	mov	r6, r3
   8725a:	4d0d      	ldr	r5, [pc, #52]	; (87290 <usart_serial_putchar+0x7c>)
   8725c:	4621      	mov	r1, r4
   8725e:	4630      	mov	r0, r6
   87260:	47a8      	blx	r5
   87262:	2800      	cmp	r0, #0
   87264:	d1fa      	bne.n	8725c <usart_serial_putchar+0x48>
		return 1;
   87266:	2001      	movs	r0, #1
   87268:	e7e3      	b.n	87232 <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   8726a:	461e      	mov	r6, r3
   8726c:	4d08      	ldr	r5, [pc, #32]	; (87290 <usart_serial_putchar+0x7c>)
   8726e:	4621      	mov	r1, r4
   87270:	4630      	mov	r0, r6
   87272:	47a8      	blx	r5
   87274:	2800      	cmp	r0, #0
   87276:	d1fa      	bne.n	8726e <usart_serial_putchar+0x5a>
		return 1;
   87278:	2001      	movs	r0, #1
   8727a:	e7da      	b.n	87232 <usart_serial_putchar+0x1e>
   8727c:	400e0600 	.word	0x400e0600
   87280:	40090000 	.word	0x40090000
   87284:	40094000 	.word	0x40094000
   87288:	40098000 	.word	0x40098000
   8728c:	00086e91 	.word	0x00086e91
   87290:	00086e09 	.word	0x00086e09

00087294 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   87294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87298:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   8729a:	2110      	movs	r1, #16
   8729c:	eb0d 0001 	add.w	r0, sp, r1
   872a0:	4b5a      	ldr	r3, [pc, #360]	; (8740c <main+0x178>)
   872a2:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   872a4:	2008      	movs	r0, #8
   872a6:	4d5a      	ldr	r5, [pc, #360]	; (87410 <main+0x17c>)
   872a8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   872aa:	4c5a      	ldr	r4, [pc, #360]	; (87414 <main+0x180>)
   872ac:	4b5a      	ldr	r3, [pc, #360]	; (87418 <main+0x184>)
   872ae:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   872b0:	4b5a      	ldr	r3, [pc, #360]	; (8741c <main+0x188>)
   872b2:	4a5b      	ldr	r2, [pc, #364]	; (87420 <main+0x18c>)
   872b4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   872b6:	4b5b      	ldr	r3, [pc, #364]	; (87424 <main+0x190>)
   872b8:	4a5b      	ldr	r2, [pc, #364]	; (87428 <main+0x194>)
   872ba:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   872bc:	4b5b      	ldr	r3, [pc, #364]	; (8742c <main+0x198>)
   872be:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   872c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   872c4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   872c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   872ca:	9303      	str	r3, [sp, #12]
   872cc:	2008      	movs	r0, #8
   872ce:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   872d0:	a901      	add	r1, sp, #4
   872d2:	4620      	mov	r0, r4
   872d4:	4b56      	ldr	r3, [pc, #344]	; (87430 <main+0x19c>)
   872d6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   872d8:	4d56      	ldr	r5, [pc, #344]	; (87434 <main+0x1a0>)
   872da:	682b      	ldr	r3, [r5, #0]
   872dc:	2100      	movs	r1, #0
   872de:	6898      	ldr	r0, [r3, #8]
   872e0:	4c55      	ldr	r4, [pc, #340]	; (87438 <main+0x1a4>)
   872e2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   872e4:	682b      	ldr	r3, [r5, #0]
   872e6:	2100      	movs	r1, #0
   872e8:	6858      	ldr	r0, [r3, #4]
   872ea:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   872ec:	2101      	movs	r1, #1
   872ee:	4b53      	ldr	r3, [pc, #332]	; (8743c <main+0x1a8>)
   872f0:	7019      	strb	r1, [r3, #0]
   872f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   872f6:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   872f8:	4b51      	ldr	r3, [pc, #324]	; (87440 <main+0x1ac>)
   872fa:	2200      	movs	r2, #0
   872fc:	701a      	strb	r2, [r3, #0]
   872fe:	705a      	strb	r2, [r3, #1]
   87300:	709a      	strb	r2, [r3, #2]
   87302:	70da      	strb	r2, [r3, #3]
   87304:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   87306:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   87308:	4b4e      	ldr	r3, [pc, #312]	; (87444 <main+0x1b0>)
   8730a:	4798      	blx	r3
	board_init();
   8730c:	4b4e      	ldr	r3, [pc, #312]	; (87448 <main+0x1b4>)
   8730e:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   87310:	4b4e      	ldr	r3, [pc, #312]	; (8744c <main+0x1b8>)
   87312:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   87314:	ac04      	add	r4, sp, #16
   87316:	4d4e      	ldr	r5, [pc, #312]	; (87450 <main+0x1bc>)
   87318:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   8731c:	4f4d      	ldr	r7, [pc, #308]	; (87454 <main+0x1c0>)
   8731e:	4e4e      	ldr	r6, [pc, #312]	; (87458 <main+0x1c4>)
   87320:	f854 2b04 	ldr.w	r2, [r4], #4
   87324:	4639      	mov	r1, r7
   87326:	4628      	mov	r0, r5
   87328:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   8732a:	3508      	adds	r5, #8
   8732c:	4544      	cmp	r4, r8
   8732e:	d1f7      	bne.n	87320 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   87330:	4c47      	ldr	r4, [pc, #284]	; (87450 <main+0x1bc>)
   87332:	2600      	movs	r6, #0
   87334:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   87338:	4a48      	ldr	r2, [pc, #288]	; (8745c <main+0x1c8>)
   8733a:	4949      	ldr	r1, [pc, #292]	; (87460 <main+0x1cc>)
   8733c:	4849      	ldr	r0, [pc, #292]	; (87464 <main+0x1d0>)
   8733e:	4f4a      	ldr	r7, [pc, #296]	; (87468 <main+0x1d4>)
   87340:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   87342:	4621      	mov	r1, r4
   87344:	4849      	ldr	r0, [pc, #292]	; (8746c <main+0x1d8>)
   87346:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   87348:	2009      	movs	r0, #9
   8734a:	4b31      	ldr	r3, [pc, #196]	; (87410 <main+0x17c>)
   8734c:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   8734e:	4d48      	ldr	r5, [pc, #288]	; (87470 <main+0x1dc>)
   87350:	4629      	mov	r1, r5
   87352:	2029      	movs	r0, #41	; 0x29
   87354:	4c47      	ldr	r4, [pc, #284]	; (87474 <main+0x1e0>)
   87356:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   87358:	4629      	mov	r1, r5
   8735a:	202a      	movs	r0, #42	; 0x2a
   8735c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8735e:	4629      	mov	r1, r5
   87360:	202b      	movs	r0, #43	; 0x2b
   87362:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   87364:	4629      	mov	r1, r5
   87366:	202c      	movs	r0, #44	; 0x2c
   87368:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8736a:	4629      	mov	r1, r5
   8736c:	202d      	movs	r0, #45	; 0x2d
   8736e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   87370:	4629      	mov	r1, r5
   87372:	202e      	movs	r0, #46	; 0x2e
   87374:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   87376:	4629      	mov	r1, r5
   87378:	202f      	movs	r0, #47	; 0x2f
   8737a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   8737c:	4629      	mov	r1, r5
   8737e:	2030      	movs	r0, #48	; 0x30
   87380:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   87382:	4629      	mov	r1, r5
   87384:	2033      	movs	r0, #51	; 0x33
   87386:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   87388:	4629      	mov	r1, r5
   8738a:	2037      	movs	r0, #55	; 0x37
   8738c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8738e:	4629      	mov	r1, r5
   87390:	2034      	movs	r0, #52	; 0x34
   87392:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   87394:	4838      	ldr	r0, [pc, #224]	; (87478 <main+0x1e4>)
   87396:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   87398:	4c38      	ldr	r4, [pc, #224]	; (8747c <main+0x1e8>)
   8739a:	4a39      	ldr	r2, [pc, #228]	; (87480 <main+0x1ec>)
   8739c:	4631      	mov	r1, r6
   8739e:	4620      	mov	r0, r4
   873a0:	4b38      	ldr	r3, [pc, #224]	; (87484 <main+0x1f0>)
   873a2:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   873a4:	4a38      	ldr	r2, [pc, #224]	; (87488 <main+0x1f4>)
   873a6:	4631      	mov	r1, r6
   873a8:	4620      	mov	r0, r4
   873aa:	4b38      	ldr	r3, [pc, #224]	; (8748c <main+0x1f8>)
   873ac:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   873ae:	4a38      	ldr	r2, [pc, #224]	; (87490 <main+0x1fc>)
   873b0:	4631      	mov	r1, r6
   873b2:	4620      	mov	r0, r4
   873b4:	4b37      	ldr	r3, [pc, #220]	; (87494 <main+0x200>)
   873b6:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   873b8:	2203      	movs	r2, #3
   873ba:	4631      	mov	r1, r6
   873bc:	4620      	mov	r0, r4
   873be:	4b36      	ldr	r3, [pc, #216]	; (87498 <main+0x204>)
   873c0:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   873c2:	4b36      	ldr	r3, [pc, #216]	; (8749c <main+0x208>)
   873c4:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   873c6:	4b36      	ldr	r3, [pc, #216]	; (874a0 <main+0x20c>)
   873c8:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   873ca:	4b36      	ldr	r3, [pc, #216]	; (874a4 <main+0x210>)
   873cc:	2204      	movs	r2, #4
   873ce:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   873d0:	4630      	mov	r0, r6
   873d2:	4b35      	ldr	r3, [pc, #212]	; (874a8 <main+0x214>)
   873d4:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   873d6:	4835      	ldr	r0, [pc, #212]	; (874ac <main+0x218>)
   873d8:	47b8      	blx	r7
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	extern volatile bool enable_cdc_transfer[2];
	extern volatile bool usart_x_enabled[4];
	extern tcirc_buf usb_usart_circ_buf;
	init_circ_buf(&usb_usart_circ_buf);
   873da:	4835      	ldr	r0, [pc, #212]	; (874b0 <main+0x21c>)
   873dc:	4b35      	ldr	r3, [pc, #212]	; (874b4 <main+0x220>)
   873de:	4798      	blx	r3
	while (true) {
		//sleepmgr_enter_sleep();
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   873e0:	4c35      	ldr	r4, [pc, #212]	; (874b8 <main+0x224>)
			//uint8_t chr_buf[512];
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
				uint16_t i = 0;
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   873e2:	4f36      	ldr	r7, [pc, #216]	; (874bc <main+0x228>)
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   873e4:	4a36      	ldr	r2, [pc, #216]	; (874c0 <main+0x22c>)
   873e6:	7823      	ldrb	r3, [r4, #0]
   873e8:	2b00      	cmp	r3, #0
   873ea:	d0fc      	beq.n	873e6 <main+0x152>
   873ec:	7813      	ldrb	r3, [r2, #0]
   873ee:	2b00      	cmp	r3, #0
   873f0:	d0f9      	beq.n	873e6 <main+0x152>
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   873f2:	4d2f      	ldr	r5, [pc, #188]	; (874b0 <main+0x21c>)
   873f4:	4e33      	ldr	r6, [pc, #204]	; (874c4 <main+0x230>)
   873f6:	4628      	mov	r0, r5
   873f8:	47b0      	blx	r6
   873fa:	2800      	cmp	r0, #0
   873fc:	d0f2      	beq.n	873e4 <main+0x150>
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   873fe:	4628      	mov	r0, r5
   87400:	47b8      	blx	r7
   87402:	4601      	mov	r1, r0
   87404:	2000      	movs	r0, #0
   87406:	4b30      	ldr	r3, [pc, #192]	; (874c8 <main+0x234>)
   87408:	4798      	blx	r3
   8740a:	e7f4      	b.n	873f6 <main+0x162>
   8740c:	00081e89 	.word	0x00081e89
   87410:	000854b1 	.word	0x000854b1
   87414:	400e0600 	.word	0x400e0600
   87418:	20002de8 	.word	0x20002de8
   8741c:	20002de4 	.word	0x20002de4
   87420:	00087215 	.word	0x00087215
   87424:	20002de0 	.word	0x20002de0
   87428:	0008718d 	.word	0x0008718d
   8742c:	05b8d800 	.word	0x05b8d800
   87430:	00086e5b 	.word	0x00086e5b
   87434:	20000714 	.word	0x20000714
   87438:	000879c1 	.word	0x000879c1
   8743c:	200006ea 	.word	0x200006ea
   87440:	20002dd8 	.word	0x20002dd8
   87444:	00084525 	.word	0x00084525
   87448:	00084fd1 	.word	0x00084fd1
   8744c:	000842b1 	.word	0x000842b1
   87450:	200006f0 	.word	0x200006f0
   87454:	0008e514 	.word	0x0008e514
   87458:	00087b71 	.word	0x00087b71
   8745c:	0008e51c 	.word	0x0008e51c
   87460:	0008e528 	.word	0x0008e528
   87464:	0008e534 	.word	0x0008e534
   87468:	0008780d 	.word	0x0008780d
   8746c:	0008e568 	.word	0x0008e568
   87470:	08000001 	.word	0x08000001
   87474:	0008516d 	.word	0x0008516d
   87478:	0008e57c 	.word	0x0008e57c
   8747c:	400e0000 	.word	0x400e0000
   87480:	01010100 	.word	0x01010100
   87484:	00085041 	.word	0x00085041
   87488:	01030101 	.word	0x01030101
   8748c:	0008504d 	.word	0x0008504d
   87490:	00040002 	.word	0x00040002
   87494:	00085059 	.word	0x00085059
   87498:	00085065 	.word	0x00085065
   8749c:	0008446d 	.word	0x0008446d
   874a0:	000847ed 	.word	0x000847ed
   874a4:	400e0400 	.word	0x400e0400
   874a8:	00085519 	.word	0x00085519
   874ac:	0008e59c 	.word	0x0008e59c
   874b0:	200029b0 	.word	0x200029b0
   874b4:	00081ed9 	.word	0x00081ed9
   874b8:	20001a90 	.word	0x20001a90
   874bc:	00081f39 	.word	0x00081f39
   874c0:	20002170 	.word	0x20002170
   874c4:	00081f81 	.word	0x00081f81
   874c8:	00080705 	.word	0x00080705

000874cc <__aeabi_uldivmod>:
   874cc:	b953      	cbnz	r3, 874e4 <__aeabi_uldivmod+0x18>
   874ce:	b94a      	cbnz	r2, 874e4 <__aeabi_uldivmod+0x18>
   874d0:	2900      	cmp	r1, #0
   874d2:	bf08      	it	eq
   874d4:	2800      	cmpeq	r0, #0
   874d6:	bf1c      	itt	ne
   874d8:	f04f 31ff 	movne.w	r1, #4294967295
   874dc:	f04f 30ff 	movne.w	r0, #4294967295
   874e0:	f000 b96e 	b.w	877c0 <__aeabi_idiv0>
   874e4:	f1ad 0c08 	sub.w	ip, sp, #8
   874e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   874ec:	f000 f806 	bl	874fc <__udivmoddi4>
   874f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   874f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   874f8:	b004      	add	sp, #16
   874fa:	4770      	bx	lr

000874fc <__udivmoddi4>:
   874fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87500:	9e08      	ldr	r6, [sp, #32]
   87502:	460d      	mov	r5, r1
   87504:	4604      	mov	r4, r0
   87506:	468e      	mov	lr, r1
   87508:	2b00      	cmp	r3, #0
   8750a:	f040 8083 	bne.w	87614 <__udivmoddi4+0x118>
   8750e:	428a      	cmp	r2, r1
   87510:	4617      	mov	r7, r2
   87512:	d947      	bls.n	875a4 <__udivmoddi4+0xa8>
   87514:	fab2 f382 	clz	r3, r2
   87518:	b14b      	cbz	r3, 8752e <__udivmoddi4+0x32>
   8751a:	f1c3 0120 	rsb	r1, r3, #32
   8751e:	fa05 fe03 	lsl.w	lr, r5, r3
   87522:	fa20 f101 	lsr.w	r1, r0, r1
   87526:	409f      	lsls	r7, r3
   87528:	ea41 0e0e 	orr.w	lr, r1, lr
   8752c:	409c      	lsls	r4, r3
   8752e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   87532:	fbbe fcf8 	udiv	ip, lr, r8
   87536:	fa1f f987 	uxth.w	r9, r7
   8753a:	fb08 e21c 	mls	r2, r8, ip, lr
   8753e:	fb0c f009 	mul.w	r0, ip, r9
   87542:	0c21      	lsrs	r1, r4, #16
   87544:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   87548:	4290      	cmp	r0, r2
   8754a:	d90a      	bls.n	87562 <__udivmoddi4+0x66>
   8754c:	18ba      	adds	r2, r7, r2
   8754e:	f10c 31ff 	add.w	r1, ip, #4294967295
   87552:	f080 8118 	bcs.w	87786 <__udivmoddi4+0x28a>
   87556:	4290      	cmp	r0, r2
   87558:	f240 8115 	bls.w	87786 <__udivmoddi4+0x28a>
   8755c:	f1ac 0c02 	sub.w	ip, ip, #2
   87560:	443a      	add	r2, r7
   87562:	1a12      	subs	r2, r2, r0
   87564:	fbb2 f0f8 	udiv	r0, r2, r8
   87568:	fb08 2210 	mls	r2, r8, r0, r2
   8756c:	fb00 f109 	mul.w	r1, r0, r9
   87570:	b2a4      	uxth	r4, r4
   87572:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   87576:	42a1      	cmp	r1, r4
   87578:	d909      	bls.n	8758e <__udivmoddi4+0x92>
   8757a:	193c      	adds	r4, r7, r4
   8757c:	f100 32ff 	add.w	r2, r0, #4294967295
   87580:	f080 8103 	bcs.w	8778a <__udivmoddi4+0x28e>
   87584:	42a1      	cmp	r1, r4
   87586:	f240 8100 	bls.w	8778a <__udivmoddi4+0x28e>
   8758a:	3802      	subs	r0, #2
   8758c:	443c      	add	r4, r7
   8758e:	1a64      	subs	r4, r4, r1
   87590:	2100      	movs	r1, #0
   87592:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   87596:	b11e      	cbz	r6, 875a0 <__udivmoddi4+0xa4>
   87598:	2200      	movs	r2, #0
   8759a:	40dc      	lsrs	r4, r3
   8759c:	e9c6 4200 	strd	r4, r2, [r6]
   875a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   875a4:	b902      	cbnz	r2, 875a8 <__udivmoddi4+0xac>
   875a6:	deff      	udf	#255	; 0xff
   875a8:	fab2 f382 	clz	r3, r2
   875ac:	2b00      	cmp	r3, #0
   875ae:	d14f      	bne.n	87650 <__udivmoddi4+0x154>
   875b0:	1a8d      	subs	r5, r1, r2
   875b2:	2101      	movs	r1, #1
   875b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   875b8:	fa1f f882 	uxth.w	r8, r2
   875bc:	fbb5 fcfe 	udiv	ip, r5, lr
   875c0:	fb0e 551c 	mls	r5, lr, ip, r5
   875c4:	fb08 f00c 	mul.w	r0, r8, ip
   875c8:	0c22      	lsrs	r2, r4, #16
   875ca:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   875ce:	42a8      	cmp	r0, r5
   875d0:	d907      	bls.n	875e2 <__udivmoddi4+0xe6>
   875d2:	197d      	adds	r5, r7, r5
   875d4:	f10c 32ff 	add.w	r2, ip, #4294967295
   875d8:	d202      	bcs.n	875e0 <__udivmoddi4+0xe4>
   875da:	42a8      	cmp	r0, r5
   875dc:	f200 80e9 	bhi.w	877b2 <__udivmoddi4+0x2b6>
   875e0:	4694      	mov	ip, r2
   875e2:	1a2d      	subs	r5, r5, r0
   875e4:	fbb5 f0fe 	udiv	r0, r5, lr
   875e8:	fb0e 5510 	mls	r5, lr, r0, r5
   875ec:	fb08 f800 	mul.w	r8, r8, r0
   875f0:	b2a4      	uxth	r4, r4
   875f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   875f6:	45a0      	cmp	r8, r4
   875f8:	d907      	bls.n	8760a <__udivmoddi4+0x10e>
   875fa:	193c      	adds	r4, r7, r4
   875fc:	f100 32ff 	add.w	r2, r0, #4294967295
   87600:	d202      	bcs.n	87608 <__udivmoddi4+0x10c>
   87602:	45a0      	cmp	r8, r4
   87604:	f200 80d9 	bhi.w	877ba <__udivmoddi4+0x2be>
   87608:	4610      	mov	r0, r2
   8760a:	eba4 0408 	sub.w	r4, r4, r8
   8760e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   87612:	e7c0      	b.n	87596 <__udivmoddi4+0x9a>
   87614:	428b      	cmp	r3, r1
   87616:	d908      	bls.n	8762a <__udivmoddi4+0x12e>
   87618:	2e00      	cmp	r6, #0
   8761a:	f000 80b1 	beq.w	87780 <__udivmoddi4+0x284>
   8761e:	2100      	movs	r1, #0
   87620:	e9c6 0500 	strd	r0, r5, [r6]
   87624:	4608      	mov	r0, r1
   87626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8762a:	fab3 f183 	clz	r1, r3
   8762e:	2900      	cmp	r1, #0
   87630:	d14b      	bne.n	876ca <__udivmoddi4+0x1ce>
   87632:	42ab      	cmp	r3, r5
   87634:	d302      	bcc.n	8763c <__udivmoddi4+0x140>
   87636:	4282      	cmp	r2, r0
   87638:	f200 80b9 	bhi.w	877ae <__udivmoddi4+0x2b2>
   8763c:	1a84      	subs	r4, r0, r2
   8763e:	eb65 0303 	sbc.w	r3, r5, r3
   87642:	2001      	movs	r0, #1
   87644:	469e      	mov	lr, r3
   87646:	2e00      	cmp	r6, #0
   87648:	d0aa      	beq.n	875a0 <__udivmoddi4+0xa4>
   8764a:	e9c6 4e00 	strd	r4, lr, [r6]
   8764e:	e7a7      	b.n	875a0 <__udivmoddi4+0xa4>
   87650:	409f      	lsls	r7, r3
   87652:	f1c3 0220 	rsb	r2, r3, #32
   87656:	40d1      	lsrs	r1, r2
   87658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8765c:	fbb1 f0fe 	udiv	r0, r1, lr
   87660:	fa1f f887 	uxth.w	r8, r7
   87664:	fb0e 1110 	mls	r1, lr, r0, r1
   87668:	fa24 f202 	lsr.w	r2, r4, r2
   8766c:	409d      	lsls	r5, r3
   8766e:	fb00 fc08 	mul.w	ip, r0, r8
   87672:	432a      	orrs	r2, r5
   87674:	0c15      	lsrs	r5, r2, #16
   87676:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8767a:	45ac      	cmp	ip, r5
   8767c:	fa04 f403 	lsl.w	r4, r4, r3
   87680:	d909      	bls.n	87696 <__udivmoddi4+0x19a>
   87682:	197d      	adds	r5, r7, r5
   87684:	f100 31ff 	add.w	r1, r0, #4294967295
   87688:	f080 808f 	bcs.w	877aa <__udivmoddi4+0x2ae>
   8768c:	45ac      	cmp	ip, r5
   8768e:	f240 808c 	bls.w	877aa <__udivmoddi4+0x2ae>
   87692:	3802      	subs	r0, #2
   87694:	443d      	add	r5, r7
   87696:	eba5 050c 	sub.w	r5, r5, ip
   8769a:	fbb5 f1fe 	udiv	r1, r5, lr
   8769e:	fb0e 5c11 	mls	ip, lr, r1, r5
   876a2:	fb01 f908 	mul.w	r9, r1, r8
   876a6:	b295      	uxth	r5, r2
   876a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   876ac:	45a9      	cmp	r9, r5
   876ae:	d907      	bls.n	876c0 <__udivmoddi4+0x1c4>
   876b0:	197d      	adds	r5, r7, r5
   876b2:	f101 32ff 	add.w	r2, r1, #4294967295
   876b6:	d274      	bcs.n	877a2 <__udivmoddi4+0x2a6>
   876b8:	45a9      	cmp	r9, r5
   876ba:	d972      	bls.n	877a2 <__udivmoddi4+0x2a6>
   876bc:	3902      	subs	r1, #2
   876be:	443d      	add	r5, r7
   876c0:	eba5 0509 	sub.w	r5, r5, r9
   876c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   876c8:	e778      	b.n	875bc <__udivmoddi4+0xc0>
   876ca:	f1c1 0720 	rsb	r7, r1, #32
   876ce:	408b      	lsls	r3, r1
   876d0:	fa22 fc07 	lsr.w	ip, r2, r7
   876d4:	ea4c 0c03 	orr.w	ip, ip, r3
   876d8:	fa25 f407 	lsr.w	r4, r5, r7
   876dc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   876e0:	fbb4 f9fe 	udiv	r9, r4, lr
   876e4:	fa1f f88c 	uxth.w	r8, ip
   876e8:	fb0e 4419 	mls	r4, lr, r9, r4
   876ec:	fa20 f307 	lsr.w	r3, r0, r7
   876f0:	fb09 fa08 	mul.w	sl, r9, r8
   876f4:	408d      	lsls	r5, r1
   876f6:	431d      	orrs	r5, r3
   876f8:	0c2b      	lsrs	r3, r5, #16
   876fa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   876fe:	45a2      	cmp	sl, r4
   87700:	fa02 f201 	lsl.w	r2, r2, r1
   87704:	fa00 f301 	lsl.w	r3, r0, r1
   87708:	d909      	bls.n	8771e <__udivmoddi4+0x222>
   8770a:	eb1c 0404 	adds.w	r4, ip, r4
   8770e:	f109 30ff 	add.w	r0, r9, #4294967295
   87712:	d248      	bcs.n	877a6 <__udivmoddi4+0x2aa>
   87714:	45a2      	cmp	sl, r4
   87716:	d946      	bls.n	877a6 <__udivmoddi4+0x2aa>
   87718:	f1a9 0902 	sub.w	r9, r9, #2
   8771c:	4464      	add	r4, ip
   8771e:	eba4 040a 	sub.w	r4, r4, sl
   87722:	fbb4 f0fe 	udiv	r0, r4, lr
   87726:	fb0e 4410 	mls	r4, lr, r0, r4
   8772a:	fb00 fa08 	mul.w	sl, r0, r8
   8772e:	b2ad      	uxth	r5, r5
   87730:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   87734:	45a2      	cmp	sl, r4
   87736:	d908      	bls.n	8774a <__udivmoddi4+0x24e>
   87738:	eb1c 0404 	adds.w	r4, ip, r4
   8773c:	f100 35ff 	add.w	r5, r0, #4294967295
   87740:	d22d      	bcs.n	8779e <__udivmoddi4+0x2a2>
   87742:	45a2      	cmp	sl, r4
   87744:	d92b      	bls.n	8779e <__udivmoddi4+0x2a2>
   87746:	3802      	subs	r0, #2
   87748:	4464      	add	r4, ip
   8774a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8774e:	fba0 8902 	umull	r8, r9, r0, r2
   87752:	eba4 040a 	sub.w	r4, r4, sl
   87756:	454c      	cmp	r4, r9
   87758:	46c6      	mov	lr, r8
   8775a:	464d      	mov	r5, r9
   8775c:	d319      	bcc.n	87792 <__udivmoddi4+0x296>
   8775e:	d016      	beq.n	8778e <__udivmoddi4+0x292>
   87760:	b15e      	cbz	r6, 8777a <__udivmoddi4+0x27e>
   87762:	ebb3 020e 	subs.w	r2, r3, lr
   87766:	eb64 0405 	sbc.w	r4, r4, r5
   8776a:	fa04 f707 	lsl.w	r7, r4, r7
   8776e:	fa22 f301 	lsr.w	r3, r2, r1
   87772:	431f      	orrs	r7, r3
   87774:	40cc      	lsrs	r4, r1
   87776:	e9c6 7400 	strd	r7, r4, [r6]
   8777a:	2100      	movs	r1, #0
   8777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87780:	4631      	mov	r1, r6
   87782:	4630      	mov	r0, r6
   87784:	e70c      	b.n	875a0 <__udivmoddi4+0xa4>
   87786:	468c      	mov	ip, r1
   87788:	e6eb      	b.n	87562 <__udivmoddi4+0x66>
   8778a:	4610      	mov	r0, r2
   8778c:	e6ff      	b.n	8758e <__udivmoddi4+0x92>
   8778e:	4543      	cmp	r3, r8
   87790:	d2e6      	bcs.n	87760 <__udivmoddi4+0x264>
   87792:	ebb8 0e02 	subs.w	lr, r8, r2
   87796:	eb69 050c 	sbc.w	r5, r9, ip
   8779a:	3801      	subs	r0, #1
   8779c:	e7e0      	b.n	87760 <__udivmoddi4+0x264>
   8779e:	4628      	mov	r0, r5
   877a0:	e7d3      	b.n	8774a <__udivmoddi4+0x24e>
   877a2:	4611      	mov	r1, r2
   877a4:	e78c      	b.n	876c0 <__udivmoddi4+0x1c4>
   877a6:	4681      	mov	r9, r0
   877a8:	e7b9      	b.n	8771e <__udivmoddi4+0x222>
   877aa:	4608      	mov	r0, r1
   877ac:	e773      	b.n	87696 <__udivmoddi4+0x19a>
   877ae:	4608      	mov	r0, r1
   877b0:	e749      	b.n	87646 <__udivmoddi4+0x14a>
   877b2:	f1ac 0c02 	sub.w	ip, ip, #2
   877b6:	443d      	add	r5, r7
   877b8:	e713      	b.n	875e2 <__udivmoddi4+0xe6>
   877ba:	3802      	subs	r0, #2
   877bc:	443c      	add	r4, r7
   877be:	e724      	b.n	8760a <__udivmoddi4+0x10e>

000877c0 <__aeabi_idiv0>:
   877c0:	4770      	bx	lr
   877c2:	bf00      	nop

000877c4 <__libc_init_array>:
   877c4:	b570      	push	{r4, r5, r6, lr}
   877c6:	4e0d      	ldr	r6, [pc, #52]	; (877fc <__libc_init_array+0x38>)
   877c8:	4d0d      	ldr	r5, [pc, #52]	; (87800 <__libc_init_array+0x3c>)
   877ca:	1b76      	subs	r6, r6, r5
   877cc:	10b6      	asrs	r6, r6, #2
   877ce:	d006      	beq.n	877de <__libc_init_array+0x1a>
   877d0:	2400      	movs	r4, #0
   877d2:	f855 3b04 	ldr.w	r3, [r5], #4
   877d6:	3401      	adds	r4, #1
   877d8:	4798      	blx	r3
   877da:	42a6      	cmp	r6, r4
   877dc:	d1f9      	bne.n	877d2 <__libc_init_array+0xe>
   877de:	4e09      	ldr	r6, [pc, #36]	; (87804 <__libc_init_array+0x40>)
   877e0:	4d09      	ldr	r5, [pc, #36]	; (87808 <__libc_init_array+0x44>)
   877e2:	f007 f8e9 	bl	8e9b8 <_init>
   877e6:	1b76      	subs	r6, r6, r5
   877e8:	10b6      	asrs	r6, r6, #2
   877ea:	d006      	beq.n	877fa <__libc_init_array+0x36>
   877ec:	2400      	movs	r4, #0
   877ee:	f855 3b04 	ldr.w	r3, [r5], #4
   877f2:	3401      	adds	r4, #1
   877f4:	4798      	blx	r3
   877f6:	42a6      	cmp	r6, r4
   877f8:	d1f9      	bne.n	877ee <__libc_init_array+0x2a>
   877fa:	bd70      	pop	{r4, r5, r6, pc}
   877fc:	0008e9c4 	.word	0x0008e9c4
   87800:	0008e9c4 	.word	0x0008e9c4
   87804:	0008e9cc 	.word	0x0008e9cc
   87808:	0008e9c4 	.word	0x0008e9c4

0008780c <iprintf>:
   8780c:	b40f      	push	{r0, r1, r2, r3}
   8780e:	b500      	push	{lr}
   87810:	4907      	ldr	r1, [pc, #28]	; (87830 <iprintf+0x24>)
   87812:	b083      	sub	sp, #12
   87814:	ab04      	add	r3, sp, #16
   87816:	6808      	ldr	r0, [r1, #0]
   87818:	f853 2b04 	ldr.w	r2, [r3], #4
   8781c:	6881      	ldr	r1, [r0, #8]
   8781e:	9301      	str	r3, [sp, #4]
   87820:	f001 ffac 	bl	8977c <_vfiprintf_r>
   87824:	b003      	add	sp, #12
   87826:	f85d eb04 	ldr.w	lr, [sp], #4
   8782a:	b004      	add	sp, #16
   8782c:	4770      	bx	lr
   8782e:	bf00      	nop
   87830:	20000714 	.word	0x20000714

00087834 <memcpy>:
   87834:	4684      	mov	ip, r0
   87836:	ea41 0300 	orr.w	r3, r1, r0
   8783a:	f013 0303 	ands.w	r3, r3, #3
   8783e:	d149      	bne.n	878d4 <memcpy+0xa0>
   87840:	3a40      	subs	r2, #64	; 0x40
   87842:	d323      	bcc.n	8788c <memcpy+0x58>
   87844:	680b      	ldr	r3, [r1, #0]
   87846:	6003      	str	r3, [r0, #0]
   87848:	684b      	ldr	r3, [r1, #4]
   8784a:	6043      	str	r3, [r0, #4]
   8784c:	688b      	ldr	r3, [r1, #8]
   8784e:	6083      	str	r3, [r0, #8]
   87850:	68cb      	ldr	r3, [r1, #12]
   87852:	60c3      	str	r3, [r0, #12]
   87854:	690b      	ldr	r3, [r1, #16]
   87856:	6103      	str	r3, [r0, #16]
   87858:	694b      	ldr	r3, [r1, #20]
   8785a:	6143      	str	r3, [r0, #20]
   8785c:	698b      	ldr	r3, [r1, #24]
   8785e:	6183      	str	r3, [r0, #24]
   87860:	69cb      	ldr	r3, [r1, #28]
   87862:	61c3      	str	r3, [r0, #28]
   87864:	6a0b      	ldr	r3, [r1, #32]
   87866:	6203      	str	r3, [r0, #32]
   87868:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8786a:	6243      	str	r3, [r0, #36]	; 0x24
   8786c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8786e:	6283      	str	r3, [r0, #40]	; 0x28
   87870:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   87872:	62c3      	str	r3, [r0, #44]	; 0x2c
   87874:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   87876:	6303      	str	r3, [r0, #48]	; 0x30
   87878:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8787a:	6343      	str	r3, [r0, #52]	; 0x34
   8787c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8787e:	6383      	str	r3, [r0, #56]	; 0x38
   87880:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   87882:	63c3      	str	r3, [r0, #60]	; 0x3c
   87884:	3040      	adds	r0, #64	; 0x40
   87886:	3140      	adds	r1, #64	; 0x40
   87888:	3a40      	subs	r2, #64	; 0x40
   8788a:	d2db      	bcs.n	87844 <memcpy+0x10>
   8788c:	3230      	adds	r2, #48	; 0x30
   8788e:	d30b      	bcc.n	878a8 <memcpy+0x74>
   87890:	680b      	ldr	r3, [r1, #0]
   87892:	6003      	str	r3, [r0, #0]
   87894:	684b      	ldr	r3, [r1, #4]
   87896:	6043      	str	r3, [r0, #4]
   87898:	688b      	ldr	r3, [r1, #8]
   8789a:	6083      	str	r3, [r0, #8]
   8789c:	68cb      	ldr	r3, [r1, #12]
   8789e:	60c3      	str	r3, [r0, #12]
   878a0:	3010      	adds	r0, #16
   878a2:	3110      	adds	r1, #16
   878a4:	3a10      	subs	r2, #16
   878a6:	d2f3      	bcs.n	87890 <memcpy+0x5c>
   878a8:	320c      	adds	r2, #12
   878aa:	d305      	bcc.n	878b8 <memcpy+0x84>
   878ac:	f851 3b04 	ldr.w	r3, [r1], #4
   878b0:	f840 3b04 	str.w	r3, [r0], #4
   878b4:	3a04      	subs	r2, #4
   878b6:	d2f9      	bcs.n	878ac <memcpy+0x78>
   878b8:	3204      	adds	r2, #4
   878ba:	d008      	beq.n	878ce <memcpy+0x9a>
   878bc:	07d2      	lsls	r2, r2, #31
   878be:	bf1c      	itt	ne
   878c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   878c4:	f800 3b01 	strbne.w	r3, [r0], #1
   878c8:	d301      	bcc.n	878ce <memcpy+0x9a>
   878ca:	880b      	ldrh	r3, [r1, #0]
   878cc:	8003      	strh	r3, [r0, #0]
   878ce:	4660      	mov	r0, ip
   878d0:	4770      	bx	lr
   878d2:	bf00      	nop
   878d4:	2a08      	cmp	r2, #8
   878d6:	d313      	bcc.n	87900 <memcpy+0xcc>
   878d8:	078b      	lsls	r3, r1, #30
   878da:	d0b1      	beq.n	87840 <memcpy+0xc>
   878dc:	f010 0303 	ands.w	r3, r0, #3
   878e0:	d0ae      	beq.n	87840 <memcpy+0xc>
   878e2:	f1c3 0304 	rsb	r3, r3, #4
   878e6:	1ad2      	subs	r2, r2, r3
   878e8:	07db      	lsls	r3, r3, #31
   878ea:	bf1c      	itt	ne
   878ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
   878f0:	f800 3b01 	strbne.w	r3, [r0], #1
   878f4:	d3a4      	bcc.n	87840 <memcpy+0xc>
   878f6:	f831 3b02 	ldrh.w	r3, [r1], #2
   878fa:	f820 3b02 	strh.w	r3, [r0], #2
   878fe:	e79f      	b.n	87840 <memcpy+0xc>
   87900:	3a04      	subs	r2, #4
   87902:	d3d9      	bcc.n	878b8 <memcpy+0x84>
   87904:	3a01      	subs	r2, #1
   87906:	f811 3b01 	ldrb.w	r3, [r1], #1
   8790a:	f800 3b01 	strb.w	r3, [r0], #1
   8790e:	d2f9      	bcs.n	87904 <memcpy+0xd0>
   87910:	780b      	ldrb	r3, [r1, #0]
   87912:	7003      	strb	r3, [r0, #0]
   87914:	784b      	ldrb	r3, [r1, #1]
   87916:	7043      	strb	r3, [r0, #1]
   87918:	788b      	ldrb	r3, [r1, #2]
   8791a:	7083      	strb	r3, [r0, #2]
   8791c:	4660      	mov	r0, ip
   8791e:	4770      	bx	lr

00087920 <memset>:
   87920:	b4f0      	push	{r4, r5, r6, r7}
   87922:	0786      	lsls	r6, r0, #30
   87924:	d046      	beq.n	879b4 <memset+0x94>
   87926:	1e54      	subs	r4, r2, #1
   87928:	2a00      	cmp	r2, #0
   8792a:	d03c      	beq.n	879a6 <memset+0x86>
   8792c:	4603      	mov	r3, r0
   8792e:	b2ca      	uxtb	r2, r1
   87930:	e001      	b.n	87936 <memset+0x16>
   87932:	3c01      	subs	r4, #1
   87934:	d337      	bcc.n	879a6 <memset+0x86>
   87936:	f803 2b01 	strb.w	r2, [r3], #1
   8793a:	079d      	lsls	r5, r3, #30
   8793c:	d1f9      	bne.n	87932 <memset+0x12>
   8793e:	2c03      	cmp	r4, #3
   87940:	d92a      	bls.n	87998 <memset+0x78>
   87942:	b2cd      	uxtb	r5, r1
   87944:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   87948:	2c0f      	cmp	r4, #15
   8794a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8794e:	d934      	bls.n	879ba <memset+0x9a>
   87950:	f1a4 0210 	sub.w	r2, r4, #16
   87954:	f022 0c0f 	bic.w	ip, r2, #15
   87958:	f103 0720 	add.w	r7, r3, #32
   8795c:	0916      	lsrs	r6, r2, #4
   8795e:	4467      	add	r7, ip
   87960:	f103 0210 	add.w	r2, r3, #16
   87964:	e942 5504 	strd	r5, r5, [r2, #-16]
   87968:	e942 5502 	strd	r5, r5, [r2, #-8]
   8796c:	3210      	adds	r2, #16
   8796e:	42ba      	cmp	r2, r7
   87970:	d1f8      	bne.n	87964 <memset+0x44>
   87972:	1c72      	adds	r2, r6, #1
   87974:	f014 0f0c 	tst.w	r4, #12
   87978:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   8797c:	f004 060f 	and.w	r6, r4, #15
   87980:	d013      	beq.n	879aa <memset+0x8a>
   87982:	1f33      	subs	r3, r6, #4
   87984:	f023 0303 	bic.w	r3, r3, #3
   87988:	3304      	adds	r3, #4
   8798a:	4413      	add	r3, r2
   8798c:	f842 5b04 	str.w	r5, [r2], #4
   87990:	4293      	cmp	r3, r2
   87992:	d1fb      	bne.n	8798c <memset+0x6c>
   87994:	f006 0403 	and.w	r4, r6, #3
   87998:	b12c      	cbz	r4, 879a6 <memset+0x86>
   8799a:	b2ca      	uxtb	r2, r1
   8799c:	441c      	add	r4, r3
   8799e:	f803 2b01 	strb.w	r2, [r3], #1
   879a2:	429c      	cmp	r4, r3
   879a4:	d1fb      	bne.n	8799e <memset+0x7e>
   879a6:	bcf0      	pop	{r4, r5, r6, r7}
   879a8:	4770      	bx	lr
   879aa:	4634      	mov	r4, r6
   879ac:	4613      	mov	r3, r2
   879ae:	2c00      	cmp	r4, #0
   879b0:	d1f3      	bne.n	8799a <memset+0x7a>
   879b2:	e7f8      	b.n	879a6 <memset+0x86>
   879b4:	4614      	mov	r4, r2
   879b6:	4603      	mov	r3, r0
   879b8:	e7c1      	b.n	8793e <memset+0x1e>
   879ba:	461a      	mov	r2, r3
   879bc:	4626      	mov	r6, r4
   879be:	e7e0      	b.n	87982 <memset+0x62>

000879c0 <setbuf>:
   879c0:	2900      	cmp	r1, #0
   879c2:	bf0c      	ite	eq
   879c4:	2202      	moveq	r2, #2
   879c6:	2200      	movne	r2, #0
   879c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   879cc:	f000 b800 	b.w	879d0 <setvbuf>

000879d0 <setvbuf>:
   879d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   879d4:	4d65      	ldr	r5, [pc, #404]	; (87b6c <setvbuf+0x19c>)
   879d6:	4604      	mov	r4, r0
   879d8:	f8d5 9000 	ldr.w	r9, [r5]
   879dc:	460f      	mov	r7, r1
   879de:	4690      	mov	r8, r2
   879e0:	461e      	mov	r6, r3
   879e2:	b083      	sub	sp, #12
   879e4:	f1b9 0f00 	cmp.w	r9, #0
   879e8:	d003      	beq.n	879f2 <setvbuf+0x22>
   879ea:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   879ee:	2b00      	cmp	r3, #0
   879f0:	d079      	beq.n	87ae6 <setvbuf+0x116>
   879f2:	f1b8 0f02 	cmp.w	r8, #2
   879f6:	d006      	beq.n	87a06 <setvbuf+0x36>
   879f8:	f1b8 0f01 	cmp.w	r8, #1
   879fc:	f200 80a3 	bhi.w	87b46 <setvbuf+0x176>
   87a00:	2e00      	cmp	r6, #0
   87a02:	f2c0 80a0 	blt.w	87b46 <setvbuf+0x176>
   87a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87a08:	07d9      	lsls	r1, r3, #31
   87a0a:	d552      	bpl.n	87ab2 <setvbuf+0xe2>
   87a0c:	4621      	mov	r1, r4
   87a0e:	4648      	mov	r0, r9
   87a10:	f003 fe92 	bl	8b738 <_fflush_r>
   87a14:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87a16:	b141      	cbz	r1, 87a2a <setvbuf+0x5a>
   87a18:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87a1c:	4299      	cmp	r1, r3
   87a1e:	d002      	beq.n	87a26 <setvbuf+0x56>
   87a20:	4648      	mov	r0, r9
   87a22:	f004 f809 	bl	8ba38 <_free_r>
   87a26:	2300      	movs	r3, #0
   87a28:	6323      	str	r3, [r4, #48]	; 0x30
   87a2a:	2300      	movs	r3, #0
   87a2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87a30:	61a3      	str	r3, [r4, #24]
   87a32:	6063      	str	r3, [r4, #4]
   87a34:	062b      	lsls	r3, r5, #24
   87a36:	d465      	bmi.n	87b04 <setvbuf+0x134>
   87a38:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   87a3c:	f025 0503 	bic.w	r5, r5, #3
   87a40:	f1b8 0f02 	cmp.w	r8, #2
   87a44:	81a5      	strh	r5, [r4, #12]
   87a46:	d064      	beq.n	87b12 <setvbuf+0x142>
   87a48:	ab01      	add	r3, sp, #4
   87a4a:	466a      	mov	r2, sp
   87a4c:	4621      	mov	r1, r4
   87a4e:	4648      	mov	r0, r9
   87a50:	f004 faa4 	bl	8bf9c <__swhatbuf_r>
   87a54:	89a3      	ldrh	r3, [r4, #12]
   87a56:	4318      	orrs	r0, r3
   87a58:	81a0      	strh	r0, [r4, #12]
   87a5a:	2e00      	cmp	r6, #0
   87a5c:	d030      	beq.n	87ac0 <setvbuf+0xf0>
   87a5e:	2f00      	cmp	r7, #0
   87a60:	d02f      	beq.n	87ac2 <setvbuf+0xf2>
   87a62:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87a66:	2b00      	cmp	r3, #0
   87a68:	d039      	beq.n	87ade <setvbuf+0x10e>
   87a6a:	9b00      	ldr	r3, [sp, #0]
   87a6c:	e9c4 7604 	strd	r7, r6, [r4, #16]
   87a70:	42b3      	cmp	r3, r6
   87a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87a76:	6027      	str	r7, [r4, #0]
   87a78:	bf1c      	itt	ne
   87a7a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   87a7e:	81a3      	strhne	r3, [r4, #12]
   87a80:	f1b8 0f01 	cmp.w	r8, #1
   87a84:	bf04      	itt	eq
   87a86:	f043 0301 	orreq.w	r3, r3, #1
   87a8a:	81a3      	strheq	r3, [r4, #12]
   87a8c:	b29a      	uxth	r2, r3
   87a8e:	f013 0308 	ands.w	r3, r3, #8
   87a92:	d02c      	beq.n	87aee <setvbuf+0x11e>
   87a94:	07d1      	lsls	r1, r2, #31
   87a96:	d554      	bpl.n	87b42 <setvbuf+0x172>
   87a98:	2100      	movs	r1, #0
   87a9a:	4276      	negs	r6, r6
   87a9c:	61a6      	str	r6, [r4, #24]
   87a9e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   87aa0:	60a1      	str	r1, [r4, #8]
   87aa2:	f016 0601 	ands.w	r6, r6, #1
   87aa6:	d027      	beq.n	87af8 <setvbuf+0x128>
   87aa8:	2600      	movs	r6, #0
   87aaa:	4630      	mov	r0, r6
   87aac:	b003      	add	sp, #12
   87aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87ab2:	89a3      	ldrh	r3, [r4, #12]
   87ab4:	059a      	lsls	r2, r3, #22
   87ab6:	d4a9      	bmi.n	87a0c <setvbuf+0x3c>
   87ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87aba:	f004 fa6b 	bl	8bf94 <__retarget_lock_acquire_recursive>
   87abe:	e7a5      	b.n	87a0c <setvbuf+0x3c>
   87ac0:	9e00      	ldr	r6, [sp, #0]
   87ac2:	4630      	mov	r0, r6
   87ac4:	f004 fae2 	bl	8c08c <malloc>
   87ac8:	4607      	mov	r7, r0
   87aca:	2800      	cmp	r0, #0
   87acc:	d03e      	beq.n	87b4c <setvbuf+0x17c>
   87ace:	89a3      	ldrh	r3, [r4, #12]
   87ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87ad4:	81a3      	strh	r3, [r4, #12]
   87ad6:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87ada:	2b00      	cmp	r3, #0
   87adc:	d1c5      	bne.n	87a6a <setvbuf+0x9a>
   87ade:	4648      	mov	r0, r9
   87ae0:	f003 fe86 	bl	8b7f0 <__sinit>
   87ae4:	e7c1      	b.n	87a6a <setvbuf+0x9a>
   87ae6:	4648      	mov	r0, r9
   87ae8:	f003 fe82 	bl	8b7f0 <__sinit>
   87aec:	e781      	b.n	879f2 <setvbuf+0x22>
   87aee:	60a3      	str	r3, [r4, #8]
   87af0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   87af2:	f016 0601 	ands.w	r6, r6, #1
   87af6:	d1d7      	bne.n	87aa8 <setvbuf+0xd8>
   87af8:	0593      	lsls	r3, r2, #22
   87afa:	d51b      	bpl.n	87b34 <setvbuf+0x164>
   87afc:	4630      	mov	r0, r6
   87afe:	b003      	add	sp, #12
   87b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87b04:	4648      	mov	r0, r9
   87b06:	6921      	ldr	r1, [r4, #16]
   87b08:	f003 ff96 	bl	8ba38 <_free_r>
   87b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87b10:	e792      	b.n	87a38 <setvbuf+0x68>
   87b12:	2600      	movs	r6, #0
   87b14:	2300      	movs	r3, #0
   87b16:	2101      	movs	r1, #1
   87b18:	6e62      	ldr	r2, [r4, #100]	; 0x64
   87b1a:	f045 0502 	orr.w	r5, r5, #2
   87b1e:	60a3      	str	r3, [r4, #8]
   87b20:	07d7      	lsls	r7, r2, #31
   87b22:	f104 0343 	add.w	r3, r4, #67	; 0x43
   87b26:	81a5      	strh	r5, [r4, #12]
   87b28:	6161      	str	r1, [r4, #20]
   87b2a:	6023      	str	r3, [r4, #0]
   87b2c:	6123      	str	r3, [r4, #16]
   87b2e:	d4e5      	bmi.n	87afc <setvbuf+0x12c>
   87b30:	05a8      	lsls	r0, r5, #22
   87b32:	d4e3      	bmi.n	87afc <setvbuf+0x12c>
   87b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87b36:	f004 fa2f 	bl	8bf98 <__retarget_lock_release_recursive>
   87b3a:	4630      	mov	r0, r6
   87b3c:	b003      	add	sp, #12
   87b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87b42:	60a6      	str	r6, [r4, #8]
   87b44:	e7d4      	b.n	87af0 <setvbuf+0x120>
   87b46:	f04f 36ff 	mov.w	r6, #4294967295
   87b4a:	e7d7      	b.n	87afc <setvbuf+0x12c>
   87b4c:	9d00      	ldr	r5, [sp, #0]
   87b4e:	42b5      	cmp	r5, r6
   87b50:	d004      	beq.n	87b5c <setvbuf+0x18c>
   87b52:	4628      	mov	r0, r5
   87b54:	f004 fa9a 	bl	8c08c <malloc>
   87b58:	4607      	mov	r7, r0
   87b5a:	b920      	cbnz	r0, 87b66 <setvbuf+0x196>
   87b5c:	f04f 36ff 	mov.w	r6, #4294967295
   87b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87b64:	e7d6      	b.n	87b14 <setvbuf+0x144>
   87b66:	462e      	mov	r6, r5
   87b68:	e7b1      	b.n	87ace <setvbuf+0xfe>
   87b6a:	bf00      	nop
   87b6c:	20000714 	.word	0x20000714

00087b70 <sprintf>:
   87b70:	b40e      	push	{r1, r2, r3}
   87b72:	4601      	mov	r1, r0
   87b74:	b530      	push	{r4, r5, lr}
   87b76:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   87b7a:	b09c      	sub	sp, #112	; 0x70
   87b7c:	ab1f      	add	r3, sp, #124	; 0x7c
   87b7e:	480b      	ldr	r0, [pc, #44]	; (87bac <sprintf+0x3c>)
   87b80:	f853 2b04 	ldr.w	r2, [r3], #4
   87b84:	4d0a      	ldr	r5, [pc, #40]	; (87bb0 <sprintf+0x40>)
   87b86:	9102      	str	r1, [sp, #8]
   87b88:	9106      	str	r1, [sp, #24]
   87b8a:	6800      	ldr	r0, [r0, #0]
   87b8c:	a902      	add	r1, sp, #8
   87b8e:	9301      	str	r3, [sp, #4]
   87b90:	e9cd 4504 	strd	r4, r5, [sp, #16]
   87b94:	9407      	str	r4, [sp, #28]
   87b96:	f000 f80d 	bl	87bb4 <_svfprintf_r>
   87b9a:	2200      	movs	r2, #0
   87b9c:	9b02      	ldr	r3, [sp, #8]
   87b9e:	701a      	strb	r2, [r3, #0]
   87ba0:	b01c      	add	sp, #112	; 0x70
   87ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   87ba6:	b003      	add	sp, #12
   87ba8:	4770      	bx	lr
   87baa:	bf00      	nop
   87bac:	20000714 	.word	0x20000714
   87bb0:	ffff0208 	.word	0xffff0208

00087bb4 <_svfprintf_r>:
   87bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87bb8:	b0d7      	sub	sp, #348	; 0x15c
   87bba:	468b      	mov	fp, r1
   87bbc:	4617      	mov	r7, r2
   87bbe:	930e      	str	r3, [sp, #56]	; 0x38
   87bc0:	4681      	mov	r9, r0
   87bc2:	f004 f9df 	bl	8bf84 <_localeconv_r>
   87bc6:	6803      	ldr	r3, [r0, #0]
   87bc8:	4618      	mov	r0, r3
   87bca:	9318      	str	r3, [sp, #96]	; 0x60
   87bcc:	f005 fbdc 	bl	8d388 <strlen>
   87bd0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87bd4:	9017      	str	r0, [sp, #92]	; 0x5c
   87bd6:	061d      	lsls	r5, r3, #24
   87bd8:	d504      	bpl.n	87be4 <_svfprintf_r+0x30>
   87bda:	f8db 3010 	ldr.w	r3, [fp, #16]
   87bde:	2b00      	cmp	r3, #0
   87be0:	f000 87df 	beq.w	88ba2 <_svfprintf_r+0xfee>
   87be4:	2300      	movs	r3, #0
   87be6:	2100      	movs	r1, #0
   87be8:	2200      	movs	r2, #0
   87bea:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   87bee:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   87bf2:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   87bf6:	9313      	str	r3, [sp, #76]	; 0x4c
   87bf8:	9319      	str	r3, [sp, #100]	; 0x64
   87bfa:	930a      	str	r3, [sp, #40]	; 0x28
   87bfc:	ab2d      	add	r3, sp, #180	; 0xb4
   87bfe:	4698      	mov	r8, r3
   87c00:	932a      	str	r3, [sp, #168]	; 0xa8
   87c02:	783b      	ldrb	r3, [r7, #0]
   87c04:	46da      	mov	sl, fp
   87c06:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   87c0a:	2b00      	cmp	r3, #0
   87c0c:	f000 81a4 	beq.w	87f58 <_svfprintf_r+0x3a4>
   87c10:	463c      	mov	r4, r7
   87c12:	e004      	b.n	87c1e <_svfprintf_r+0x6a>
   87c14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87c18:	2b00      	cmp	r3, #0
   87c1a:	f000 80fd 	beq.w	87e18 <_svfprintf_r+0x264>
   87c1e:	2b25      	cmp	r3, #37	; 0x25
   87c20:	d1f8      	bne.n	87c14 <_svfprintf_r+0x60>
   87c22:	1be5      	subs	r5, r4, r7
   87c24:	f040 80fb 	bne.w	87e1e <_svfprintf_r+0x26a>
   87c28:	7823      	ldrb	r3, [r4, #0]
   87c2a:	2b00      	cmp	r3, #0
   87c2c:	f000 8194 	beq.w	87f58 <_svfprintf_r+0x3a4>
   87c30:	2300      	movs	r3, #0
   87c32:	930b      	str	r3, [sp, #44]	; 0x2c
   87c34:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87c38:	9307      	str	r3, [sp, #28]
   87c3a:	f04f 33ff 	mov.w	r3, #4294967295
   87c3e:	7866      	ldrb	r6, [r4, #1]
   87c40:	f104 0b01 	add.w	fp, r4, #1
   87c44:	2120      	movs	r1, #32
   87c46:	242b      	movs	r4, #43	; 0x2b
   87c48:	9309      	str	r3, [sp, #36]	; 0x24
   87c4a:	f10b 0b01 	add.w	fp, fp, #1
   87c4e:	f1a6 0320 	sub.w	r3, r6, #32
   87c52:	2b5a      	cmp	r3, #90	; 0x5a
   87c54:	f200 80ff 	bhi.w	87e56 <_svfprintf_r+0x2a2>
   87c58:	e8df f013 	tbh	[pc, r3, lsl #1]
   87c5c:	00fd02bc 	.word	0x00fd02bc
   87c60:	02b500fd 	.word	0x02b500fd
   87c64:	00fd00fd 	.word	0x00fd00fd
   87c68:	029100fd 	.word	0x029100fd
   87c6c:	00fd00fd 	.word	0x00fd00fd
   87c70:	02e7006a 	.word	0x02e7006a
   87c74:	023400fd 	.word	0x023400fd
   87c78:	00fd02cd 	.word	0x00fd02cd
   87c7c:	005b02c6 	.word	0x005b02c6
   87c80:	005b005b 	.word	0x005b005b
   87c84:	005b005b 	.word	0x005b005b
   87c88:	005b005b 	.word	0x005b005b
   87c8c:	005b005b 	.word	0x005b005b
   87c90:	00fd00fd 	.word	0x00fd00fd
   87c94:	00fd00fd 	.word	0x00fd00fd
   87c98:	00fd00fd 	.word	0x00fd00fd
   87c9c:	019000fd 	.word	0x019000fd
   87ca0:	01f700fd 	.word	0x01f700fd
   87ca4:	0190007c 	.word	0x0190007c
   87ca8:	01900190 	.word	0x01900190
   87cac:	00fd00fd 	.word	0x00fd00fd
   87cb0:	00fd00fd 	.word	0x00fd00fd
   87cb4:	00fd028a 	.word	0x00fd028a
   87cb8:	00a900fd 	.word	0x00a900fd
   87cbc:	00fd00fd 	.word	0x00fd00fd
   87cc0:	020b00fd 	.word	0x020b00fd
   87cc4:	023b00fd 	.word	0x023b00fd
   87cc8:	00fd00fd 	.word	0x00fd00fd
   87ccc:	00fd0781 	.word	0x00fd0781
   87cd0:	00fd00fd 	.word	0x00fd00fd
   87cd4:	00fd00fd 	.word	0x00fd00fd
   87cd8:	00fd00fd 	.word	0x00fd00fd
   87cdc:	019000fd 	.word	0x019000fd
   87ce0:	01f700fd 	.word	0x01f700fd
   87ce4:	01900080 	.word	0x01900080
   87ce8:	01900190 	.word	0x01900190
   87cec:	00800280 	.word	0x00800280
   87cf0:	00fd0075 	.word	0x00fd0075
   87cf4:	00fd0276 	.word	0x00fd0276
   87cf8:	00ad025e 	.word	0x00ad025e
   87cfc:	0075024c 	.word	0x0075024c
   87d00:	020b00fd 	.word	0x020b00fd
   87d04:	075b0072 	.word	0x075b0072
   87d08:	00fd00fd 	.word	0x00fd00fd
   87d0c:	00fd075f 	.word	0x00fd075f
   87d10:	0072      	.short	0x0072
   87d12:	2200      	movs	r2, #0
   87d14:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87d18:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87d1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87d20:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87d24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87d28:	2b09      	cmp	r3, #9
   87d2a:	d9f5      	bls.n	87d18 <_svfprintf_r+0x164>
   87d2c:	920b      	str	r2, [sp, #44]	; 0x2c
   87d2e:	e78e      	b.n	87c4e <_svfprintf_r+0x9a>
   87d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d32:	f853 2b04 	ldr.w	r2, [r3], #4
   87d36:	2a00      	cmp	r2, #0
   87d38:	920b      	str	r2, [sp, #44]	; 0x2c
   87d3a:	930e      	str	r3, [sp, #56]	; 0x38
   87d3c:	f2c0 81bf 	blt.w	880be <_svfprintf_r+0x50a>
   87d40:	f89b 6000 	ldrb.w	r6, [fp]
   87d44:	e781      	b.n	87c4a <_svfprintf_r+0x96>
   87d46:	9b07      	ldr	r3, [sp, #28]
   87d48:	f89b 6000 	ldrb.w	r6, [fp]
   87d4c:	f043 0320 	orr.w	r3, r3, #32
   87d50:	9307      	str	r3, [sp, #28]
   87d52:	e77a      	b.n	87c4a <_svfprintf_r+0x96>
   87d54:	9b07      	ldr	r3, [sp, #28]
   87d56:	f043 0310 	orr.w	r3, r3, #16
   87d5a:	9307      	str	r3, [sp, #28]
   87d5c:	9b07      	ldr	r3, [sp, #28]
   87d5e:	069c      	lsls	r4, r3, #26
   87d60:	f140 8162 	bpl.w	88028 <_svfprintf_r+0x474>
   87d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d66:	3307      	adds	r3, #7
   87d68:	f023 0307 	bic.w	r3, r3, #7
   87d6c:	4619      	mov	r1, r3
   87d6e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   87d72:	4614      	mov	r4, r2
   87d74:	461d      	mov	r5, r3
   87d76:	910e      	str	r1, [sp, #56]	; 0x38
   87d78:	2a00      	cmp	r2, #0
   87d7a:	f173 0300 	sbcs.w	r3, r3, #0
   87d7e:	f2c0 85ab 	blt.w	888d8 <_svfprintf_r+0xd24>
   87d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87d84:	3301      	adds	r3, #1
   87d86:	9b07      	ldr	r3, [sp, #28]
   87d88:	f000 8414 	beq.w	885b4 <_svfprintf_r+0xa00>
   87d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   87d90:	ea54 0205 	orrs.w	r2, r4, r5
   87d94:	9308      	str	r3, [sp, #32]
   87d96:	f040 840e 	bne.w	885b6 <_svfprintf_r+0xa02>
   87d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87d9c:	2a00      	cmp	r2, #0
   87d9e:	f040 840f 	bne.w	885c0 <_svfprintf_r+0xa0c>
   87da2:	9307      	str	r3, [sp, #28]
   87da4:	2300      	movs	r3, #0
   87da6:	af56      	add	r7, sp, #344	; 0x158
   87da8:	9309      	str	r3, [sp, #36]	; 0x24
   87daa:	930c      	str	r3, [sp, #48]	; 0x30
   87dac:	e26b      	b.n	88286 <_svfprintf_r+0x6d2>
   87dae:	9b07      	ldr	r3, [sp, #28]
   87db0:	f043 0310 	orr.w	r3, r3, #16
   87db4:	9307      	str	r3, [sp, #28]
   87db6:	9b07      	ldr	r3, [sp, #28]
   87db8:	069a      	lsls	r2, r3, #26
   87dba:	f140 8126 	bpl.w	8800a <_svfprintf_r+0x456>
   87dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87dc0:	3307      	adds	r3, #7
   87dc2:	f023 0307 	bic.w	r3, r3, #7
   87dc6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87dca:	930e      	str	r3, [sp, #56]	; 0x38
   87dcc:	9b07      	ldr	r3, [sp, #28]
   87dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   87dd2:	9308      	str	r3, [sp, #32]
   87dd4:	2300      	movs	r3, #0
   87dd6:	2200      	movs	r2, #0
   87dd8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87dde:	4611      	mov	r1, r2
   87de0:	3101      	adds	r1, #1
   87de2:	f000 8231 	beq.w	88248 <_svfprintf_r+0x694>
   87de6:	9908      	ldr	r1, [sp, #32]
   87de8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   87dec:	9107      	str	r1, [sp, #28]
   87dee:	ea54 0105 	orrs.w	r1, r4, r5
   87df2:	f040 8227 	bne.w	88244 <_svfprintf_r+0x690>
   87df6:	2a00      	cmp	r2, #0
   87df8:	f040 837d 	bne.w	884f6 <_svfprintf_r+0x942>
   87dfc:	2b00      	cmp	r3, #0
   87dfe:	d1d1      	bne.n	87da4 <_svfprintf_r+0x1f0>
   87e00:	9b08      	ldr	r3, [sp, #32]
   87e02:	f013 0301 	ands.w	r3, r3, #1
   87e06:	930c      	str	r3, [sp, #48]	; 0x30
   87e08:	f000 8590 	beq.w	8892c <_svfprintf_r+0xd78>
   87e0c:	2330      	movs	r3, #48	; 0x30
   87e0e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   87e12:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   87e16:	e236      	b.n	88286 <_svfprintf_r+0x6d2>
   87e18:	1be5      	subs	r5, r4, r7
   87e1a:	f000 809d 	beq.w	87f58 <_svfprintf_r+0x3a4>
   87e1e:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   87e22:	3301      	adds	r3, #1
   87e24:	442a      	add	r2, r5
   87e26:	2b07      	cmp	r3, #7
   87e28:	e9c8 7500 	strd	r7, r5, [r8]
   87e2c:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   87e30:	dc06      	bgt.n	87e40 <_svfprintf_r+0x28c>
   87e32:	f108 0808 	add.w	r8, r8, #8
   87e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87e38:	7823      	ldrb	r3, [r4, #0]
   87e3a:	442a      	add	r2, r5
   87e3c:	920a      	str	r2, [sp, #40]	; 0x28
   87e3e:	e6f4      	b.n	87c2a <_svfprintf_r+0x76>
   87e40:	4651      	mov	r1, sl
   87e42:	4648      	mov	r0, r9
   87e44:	aa2a      	add	r2, sp, #168	; 0xa8
   87e46:	f005 fb01 	bl	8d44c <__ssprint_r>
   87e4a:	2800      	cmp	r0, #0
   87e4c:	f041 83ce 	bne.w	895ec <_svfprintf_r+0x1a38>
   87e50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e54:	e7ef      	b.n	87e36 <_svfprintf_r+0x282>
   87e56:	2e00      	cmp	r6, #0
   87e58:	d07e      	beq.n	87f58 <_svfprintf_r+0x3a4>
   87e5a:	2300      	movs	r3, #0
   87e5c:	2101      	movs	r1, #1
   87e5e:	461a      	mov	r2, r3
   87e60:	9108      	str	r1, [sp, #32]
   87e62:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   87e66:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87e6a:	930d      	str	r3, [sp, #52]	; 0x34
   87e6c:	9309      	str	r3, [sp, #36]	; 0x24
   87e6e:	9312      	str	r3, [sp, #72]	; 0x48
   87e70:	9316      	str	r3, [sp, #88]	; 0x58
   87e72:	9310      	str	r3, [sp, #64]	; 0x40
   87e74:	910c      	str	r1, [sp, #48]	; 0x30
   87e76:	af3d      	add	r7, sp, #244	; 0xf4
   87e78:	9b07      	ldr	r3, [sp, #28]
   87e7a:	f013 0302 	ands.w	r3, r3, #2
   87e7e:	d002      	beq.n	87e86 <_svfprintf_r+0x2d2>
   87e80:	9908      	ldr	r1, [sp, #32]
   87e82:	3102      	adds	r1, #2
   87e84:	9108      	str	r1, [sp, #32]
   87e86:	9907      	ldr	r1, [sp, #28]
   87e88:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   87e8c:	910f      	str	r1, [sp, #60]	; 0x3c
   87e8e:	d105      	bne.n	87e9c <_svfprintf_r+0x2e8>
   87e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87e92:	9808      	ldr	r0, [sp, #32]
   87e94:	1a0d      	subs	r5, r1, r0
   87e96:	2d00      	cmp	r5, #0
   87e98:	f300 834b 	bgt.w	88532 <_svfprintf_r+0x97e>
   87e9c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87e9e:	b172      	cbz	r2, 87ebe <_svfprintf_r+0x30a>
   87ea0:	2001      	movs	r0, #1
   87ea2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87ea4:	4404      	add	r4, r0
   87ea6:	4402      	add	r2, r0
   87ea8:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   87eac:	2a07      	cmp	r2, #7
   87eae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87eb2:	e9c8 1000 	strd	r1, r0, [r8]
   87eb6:	f300 83cd 	bgt.w	88654 <_svfprintf_r+0xaa0>
   87eba:	f108 0808 	add.w	r8, r8, #8
   87ebe:	b16b      	cbz	r3, 87edc <_svfprintf_r+0x328>
   87ec0:	2102      	movs	r1, #2
   87ec2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87ec4:	440c      	add	r4, r1
   87ec6:	3301      	adds	r3, #1
   87ec8:	aa23      	add	r2, sp, #140	; 0x8c
   87eca:	2b07      	cmp	r3, #7
   87ecc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87ed0:	e9c8 2100 	strd	r2, r1, [r8]
   87ed4:	f300 83cc 	bgt.w	88670 <_svfprintf_r+0xabc>
   87ed8:	f108 0808 	add.w	r8, r8, #8
   87edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ede:	2b80      	cmp	r3, #128	; 0x80
   87ee0:	f000 8234 	beq.w	8834c <_svfprintf_r+0x798>
   87ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87ee8:	1a9d      	subs	r5, r3, r2
   87eea:	2d00      	cmp	r5, #0
   87eec:	f300 826e 	bgt.w	883cc <_svfprintf_r+0x818>
   87ef0:	9b07      	ldr	r3, [sp, #28]
   87ef2:	05d9      	lsls	r1, r3, #23
   87ef4:	f100 81d5 	bmi.w	882a2 <_svfprintf_r+0x6ee>
   87ef8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87efc:	3301      	adds	r3, #1
   87efe:	4414      	add	r4, r2
   87f00:	2b07      	cmp	r3, #7
   87f02:	e9c8 7200 	strd	r7, r2, [r8]
   87f06:	942c      	str	r4, [sp, #176]	; 0xb0
   87f08:	932b      	str	r3, [sp, #172]	; 0xac
   87f0a:	f300 8397 	bgt.w	8863c <_svfprintf_r+0xa88>
   87f0e:	f108 0808 	add.w	r8, r8, #8
   87f12:	9b07      	ldr	r3, [sp, #28]
   87f14:	0759      	lsls	r1, r3, #29
   87f16:	d505      	bpl.n	87f24 <_svfprintf_r+0x370>
   87f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87f1a:	9a08      	ldr	r2, [sp, #32]
   87f1c:	1a9d      	subs	r5, r3, r2
   87f1e:	2d00      	cmp	r5, #0
   87f20:	f300 83b2 	bgt.w	88688 <_svfprintf_r+0xad4>
   87f24:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   87f28:	9908      	ldr	r1, [sp, #32]
   87f2a:	428a      	cmp	r2, r1
   87f2c:	bfac      	ite	ge
   87f2e:	189b      	addge	r3, r3, r2
   87f30:	185b      	addlt	r3, r3, r1
   87f32:	930a      	str	r3, [sp, #40]	; 0x28
   87f34:	2c00      	cmp	r4, #0
   87f36:	f040 827d 	bne.w	88434 <_svfprintf_r+0x880>
   87f3a:	2300      	movs	r3, #0
   87f3c:	932b      	str	r3, [sp, #172]	; 0xac
   87f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87f40:	b11b      	cbz	r3, 87f4a <_svfprintf_r+0x396>
   87f42:	4648      	mov	r0, r9
   87f44:	990d      	ldr	r1, [sp, #52]	; 0x34
   87f46:	f003 fd77 	bl	8ba38 <_free_r>
   87f4a:	465f      	mov	r7, fp
   87f4c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f50:	783b      	ldrb	r3, [r7, #0]
   87f52:	2b00      	cmp	r3, #0
   87f54:	f47f ae5c 	bne.w	87c10 <_svfprintf_r+0x5c>
   87f58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   87f5a:	46d3      	mov	fp, sl
   87f5c:	2b00      	cmp	r3, #0
   87f5e:	f041 824b 	bne.w	893f8 <_svfprintf_r+0x1844>
   87f62:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87f66:	f013 0f40 	tst.w	r3, #64	; 0x40
   87f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87f6c:	bf18      	it	ne
   87f6e:	f04f 33ff 	movne.w	r3, #4294967295
   87f72:	930a      	str	r3, [sp, #40]	; 0x28
   87f74:	980a      	ldr	r0, [sp, #40]	; 0x28
   87f76:	b057      	add	sp, #348	; 0x15c
   87f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87f7e:	3307      	adds	r3, #7
   87f80:	f023 0307 	bic.w	r3, r3, #7
   87f84:	4619      	mov	r1, r3
   87f86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   87f8a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   87f8e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   87f92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   87f96:	461d      	mov	r5, r3
   87f98:	4618      	mov	r0, r3
   87f9a:	910e      	str	r1, [sp, #56]	; 0x38
   87f9c:	f04f 32ff 	mov.w	r2, #4294967295
   87fa0:	4621      	mov	r1, r4
   87fa2:	4ba4      	ldr	r3, [pc, #656]	; (88234 <_svfprintf_r+0x680>)
   87fa4:	f006 f986 	bl	8e2b4 <__aeabi_dcmpun>
   87fa8:	2800      	cmp	r0, #0
   87faa:	f040 84d9 	bne.w	88960 <_svfprintf_r+0xdac>
   87fae:	4628      	mov	r0, r5
   87fb0:	4621      	mov	r1, r4
   87fb2:	f04f 32ff 	mov.w	r2, #4294967295
   87fb6:	4b9f      	ldr	r3, [pc, #636]	; (88234 <_svfprintf_r+0x680>)
   87fb8:	f006 f95e 	bl	8e278 <__aeabi_dcmple>
   87fbc:	2800      	cmp	r0, #0
   87fbe:	f040 84cf 	bne.w	88960 <_svfprintf_r+0xdac>
   87fc2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87fc6:	2200      	movs	r2, #0
   87fc8:	2300      	movs	r3, #0
   87fca:	f006 f94b 	bl	8e264 <__aeabi_dcmplt>
   87fce:	2800      	cmp	r0, #0
   87fd0:	f041 800e 	bne.w	88ff0 <_svfprintf_r+0x143c>
   87fd4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87fd8:	2003      	movs	r0, #3
   87fda:	2100      	movs	r1, #0
   87fdc:	4f96      	ldr	r7, [pc, #600]	; (88238 <_svfprintf_r+0x684>)
   87fde:	4b97      	ldr	r3, [pc, #604]	; (8823c <_svfprintf_r+0x688>)
   87fe0:	9008      	str	r0, [sp, #32]
   87fe2:	910d      	str	r1, [sp, #52]	; 0x34
   87fe4:	2e47      	cmp	r6, #71	; 0x47
   87fe6:	bfc8      	it	gt
   87fe8:	461f      	movgt	r7, r3
   87fea:	9c07      	ldr	r4, [sp, #28]
   87fec:	900c      	str	r0, [sp, #48]	; 0x30
   87fee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   87ff2:	9407      	str	r4, [sp, #28]
   87ff4:	9109      	str	r1, [sp, #36]	; 0x24
   87ff6:	9112      	str	r1, [sp, #72]	; 0x48
   87ff8:	9116      	str	r1, [sp, #88]	; 0x58
   87ffa:	9110      	str	r1, [sp, #64]	; 0x40
   87ffc:	2a00      	cmp	r2, #0
   87ffe:	f43f af3b 	beq.w	87e78 <_svfprintf_r+0x2c4>
   88002:	9b08      	ldr	r3, [sp, #32]
   88004:	3301      	adds	r3, #1
   88006:	9308      	str	r3, [sp, #32]
   88008:	e736      	b.n	87e78 <_svfprintf_r+0x2c4>
   8800a:	9b07      	ldr	r3, [sp, #28]
   8800c:	06db      	lsls	r3, r3, #27
   8800e:	f100 849c 	bmi.w	8894a <_svfprintf_r+0xd96>
   88012:	9b07      	ldr	r3, [sp, #28]
   88014:	065f      	lsls	r7, r3, #25
   88016:	f140 87b2 	bpl.w	88f7e <_svfprintf_r+0x13ca>
   8801a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8801c:	2500      	movs	r5, #0
   8801e:	f853 4b04 	ldr.w	r4, [r3], #4
   88022:	930e      	str	r3, [sp, #56]	; 0x38
   88024:	b2a4      	uxth	r4, r4
   88026:	e6d1      	b.n	87dcc <_svfprintf_r+0x218>
   88028:	9b07      	ldr	r3, [sp, #28]
   8802a:	06d8      	lsls	r0, r3, #27
   8802c:	f100 8568 	bmi.w	88b00 <_svfprintf_r+0xf4c>
   88030:	9b07      	ldr	r3, [sp, #28]
   88032:	0659      	lsls	r1, r3, #25
   88034:	f140 87be 	bpl.w	88fb4 <_svfprintf_r+0x1400>
   88038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8803a:	f853 4b04 	ldr.w	r4, [r3], #4
   8803e:	b224      	sxth	r4, r4
   88040:	17e5      	asrs	r5, r4, #31
   88042:	930e      	str	r3, [sp, #56]	; 0x38
   88044:	4622      	mov	r2, r4
   88046:	462b      	mov	r3, r5
   88048:	e696      	b.n	87d78 <_svfprintf_r+0x1c4>
   8804a:	2100      	movs	r1, #0
   8804c:	2401      	movs	r4, #1
   8804e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88050:	460a      	mov	r2, r1
   88052:	f853 0b04 	ldr.w	r0, [r3], #4
   88056:	9408      	str	r4, [sp, #32]
   88058:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   8805c:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   88060:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   88064:	9109      	str	r1, [sp, #36]	; 0x24
   88066:	9112      	str	r1, [sp, #72]	; 0x48
   88068:	9116      	str	r1, [sp, #88]	; 0x58
   8806a:	9110      	str	r1, [sp, #64]	; 0x40
   8806c:	940c      	str	r4, [sp, #48]	; 0x30
   8806e:	af3d      	add	r7, sp, #244	; 0xf4
   88070:	e702      	b.n	87e78 <_svfprintf_r+0x2c4>
   88072:	2500      	movs	r5, #0
   88074:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   88076:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8807a:	f854 7b04 	ldr.w	r7, [r4], #4
   8807e:	2f00      	cmp	r7, #0
   88080:	f000 859f 	beq.w	88bc2 <_svfprintf_r+0x100e>
   88084:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88086:	4613      	mov	r3, r2
   88088:	3301      	adds	r3, #1
   8808a:	f000 8770 	beq.w	88f6e <_svfprintf_r+0x13ba>
   8808e:	4629      	mov	r1, r5
   88090:	4638      	mov	r0, r7
   88092:	f004 fac7 	bl	8c624 <memchr>
   88096:	900d      	str	r0, [sp, #52]	; 0x34
   88098:	2800      	cmp	r0, #0
   8809a:	f001 80b9 	beq.w	89210 <_svfprintf_r+0x165c>
   8809e:	462b      	mov	r3, r5
   880a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   880a2:	9509      	str	r5, [sp, #36]	; 0x24
   880a4:	1bd2      	subs	r2, r2, r7
   880a6:	920c      	str	r2, [sp, #48]	; 0x30
   880a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   880ac:	9208      	str	r2, [sp, #32]
   880ae:	940e      	str	r4, [sp, #56]	; 0x38
   880b0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   880b4:	930d      	str	r3, [sp, #52]	; 0x34
   880b6:	9312      	str	r3, [sp, #72]	; 0x48
   880b8:	9316      	str	r3, [sp, #88]	; 0x58
   880ba:	9310      	str	r3, [sp, #64]	; 0x40
   880bc:	e79e      	b.n	87ffc <_svfprintf_r+0x448>
   880be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   880c0:	425b      	negs	r3, r3
   880c2:	930b      	str	r3, [sp, #44]	; 0x2c
   880c4:	9b07      	ldr	r3, [sp, #28]
   880c6:	f89b 6000 	ldrb.w	r6, [fp]
   880ca:	f043 0304 	orr.w	r3, r3, #4
   880ce:	9307      	str	r3, [sp, #28]
   880d0:	e5bb      	b.n	87c4a <_svfprintf_r+0x96>
   880d2:	9b07      	ldr	r3, [sp, #28]
   880d4:	f043 0310 	orr.w	r3, r3, #16
   880d8:	9308      	str	r3, [sp, #32]
   880da:	9b08      	ldr	r3, [sp, #32]
   880dc:	069d      	lsls	r5, r3, #26
   880de:	f140 83ea 	bpl.w	888b6 <_svfprintf_r+0xd02>
   880e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880e4:	3307      	adds	r3, #7
   880e6:	f023 0307 	bic.w	r3, r3, #7
   880ea:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   880ee:	930e      	str	r3, [sp, #56]	; 0x38
   880f0:	2301      	movs	r3, #1
   880f2:	e670      	b.n	87dd6 <_svfprintf_r+0x222>
   880f4:	f647 0230 	movw	r2, #30768	; 0x7830
   880f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880fa:	9907      	ldr	r1, [sp, #28]
   880fc:	f853 4b04 	ldr.w	r4, [r3], #4
   88100:	f041 0102 	orr.w	r1, r1, #2
   88104:	930e      	str	r3, [sp, #56]	; 0x38
   88106:	4b4e      	ldr	r3, [pc, #312]	; (88240 <_svfprintf_r+0x68c>)
   88108:	2500      	movs	r5, #0
   8810a:	9319      	str	r3, [sp, #100]	; 0x64
   8810c:	2678      	movs	r6, #120	; 0x78
   8810e:	2302      	movs	r3, #2
   88110:	9108      	str	r1, [sp, #32]
   88112:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   88116:	e65e      	b.n	87dd6 <_svfprintf_r+0x222>
   88118:	9b07      	ldr	r3, [sp, #28]
   8811a:	069d      	lsls	r5, r3, #26
   8811c:	f100 8408 	bmi.w	88930 <_svfprintf_r+0xd7c>
   88120:	9b07      	ldr	r3, [sp, #28]
   88122:	06dc      	lsls	r4, r3, #27
   88124:	f100 86e1 	bmi.w	88eea <_svfprintf_r+0x1336>
   88128:	9b07      	ldr	r3, [sp, #28]
   8812a:	0658      	lsls	r0, r3, #25
   8812c:	f100 8795 	bmi.w	8905a <_svfprintf_r+0x14a6>
   88130:	9b07      	ldr	r3, [sp, #28]
   88132:	0599      	lsls	r1, r3, #22
   88134:	f140 86d9 	bpl.w	88eea <_svfprintf_r+0x1336>
   88138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8813a:	990a      	ldr	r1, [sp, #40]	; 0x28
   8813c:	f853 2b04 	ldr.w	r2, [r3], #4
   88140:	465f      	mov	r7, fp
   88142:	7011      	strb	r1, [r2, #0]
   88144:	930e      	str	r3, [sp, #56]	; 0x38
   88146:	e703      	b.n	87f50 <_svfprintf_r+0x39c>
   88148:	f89b 6000 	ldrb.w	r6, [fp]
   8814c:	9b07      	ldr	r3, [sp, #28]
   8814e:	2e6c      	cmp	r6, #108	; 0x6c
   88150:	f000 8508 	beq.w	88b64 <_svfprintf_r+0xfb0>
   88154:	f043 0310 	orr.w	r3, r3, #16
   88158:	9307      	str	r3, [sp, #28]
   8815a:	e576      	b.n	87c4a <_svfprintf_r+0x96>
   8815c:	f89b 6000 	ldrb.w	r6, [fp]
   88160:	9b07      	ldr	r3, [sp, #28]
   88162:	2e68      	cmp	r6, #104	; 0x68
   88164:	f000 8507 	beq.w	88b76 <_svfprintf_r+0xfc2>
   88168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8816c:	9307      	str	r3, [sp, #28]
   8816e:	e56c      	b.n	87c4a <_svfprintf_r+0x96>
   88170:	9b07      	ldr	r3, [sp, #28]
   88172:	f89b 6000 	ldrb.w	r6, [fp]
   88176:	f043 0308 	orr.w	r3, r3, #8
   8817a:	9307      	str	r3, [sp, #28]
   8817c:	e565      	b.n	87c4a <_svfprintf_r+0x96>
   8817e:	4648      	mov	r0, r9
   88180:	f003 ff00 	bl	8bf84 <_localeconv_r>
   88184:	6843      	ldr	r3, [r0, #4]
   88186:	4618      	mov	r0, r3
   88188:	931c      	str	r3, [sp, #112]	; 0x70
   8818a:	f005 f8fd 	bl	8d388 <strlen>
   8818e:	4603      	mov	r3, r0
   88190:	4648      	mov	r0, r9
   88192:	461d      	mov	r5, r3
   88194:	931d      	str	r3, [sp, #116]	; 0x74
   88196:	f003 fef5 	bl	8bf84 <_localeconv_r>
   8819a:	6882      	ldr	r2, [r0, #8]
   8819c:	2120      	movs	r1, #32
   8819e:	921a      	str	r2, [sp, #104]	; 0x68
   881a0:	2d00      	cmp	r5, #0
   881a2:	f43f adcd 	beq.w	87d40 <_svfprintf_r+0x18c>
   881a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   881a8:	2b00      	cmp	r3, #0
   881aa:	f43f adc9 	beq.w	87d40 <_svfprintf_r+0x18c>
   881ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   881b0:	781b      	ldrb	r3, [r3, #0]
   881b2:	2b00      	cmp	r3, #0
   881b4:	f43f adc4 	beq.w	87d40 <_svfprintf_r+0x18c>
   881b8:	9b07      	ldr	r3, [sp, #28]
   881ba:	f89b 6000 	ldrb.w	r6, [fp]
   881be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   881c2:	9307      	str	r3, [sp, #28]
   881c4:	e541      	b.n	87c4a <_svfprintf_r+0x96>
   881c6:	9b07      	ldr	r3, [sp, #28]
   881c8:	f89b 6000 	ldrb.w	r6, [fp]
   881cc:	f043 0301 	orr.w	r3, r3, #1
   881d0:	9307      	str	r3, [sp, #28]
   881d2:	e53a      	b.n	87c4a <_svfprintf_r+0x96>
   881d4:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   881d8:	2b00      	cmp	r3, #0
   881da:	f47f adb1 	bne.w	87d40 <_svfprintf_r+0x18c>
   881de:	f89b 6000 	ldrb.w	r6, [fp]
   881e2:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   881e6:	e530      	b.n	87c4a <_svfprintf_r+0x96>
   881e8:	9b07      	ldr	r3, [sp, #28]
   881ea:	f89b 6000 	ldrb.w	r6, [fp]
   881ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   881f2:	9307      	str	r3, [sp, #28]
   881f4:	e529      	b.n	87c4a <_svfprintf_r+0x96>
   881f6:	465a      	mov	r2, fp
   881f8:	f812 6b01 	ldrb.w	r6, [r2], #1
   881fc:	2e2a      	cmp	r6, #42	; 0x2a
   881fe:	f001 8251 	beq.w	896a4 <_svfprintf_r+0x1af0>
   88202:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   88206:	2b09      	cmp	r3, #9
   88208:	4693      	mov	fp, r2
   8820a:	bf98      	it	ls
   8820c:	2200      	movls	r2, #0
   8820e:	f201 80ef 	bhi.w	893f0 <_svfprintf_r+0x183c>
   88212:	f81b 6b01 	ldrb.w	r6, [fp], #1
   88216:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8821a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8821e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   88222:	2b09      	cmp	r3, #9
   88224:	d9f5      	bls.n	88212 <_svfprintf_r+0x65e>
   88226:	9209      	str	r2, [sp, #36]	; 0x24
   88228:	e511      	b.n	87c4e <_svfprintf_r+0x9a>
   8822a:	f89b 6000 	ldrb.w	r6, [fp]
   8822e:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   88232:	e50a      	b.n	87c4a <_svfprintf_r+0x96>
   88234:	7fefffff 	.word	0x7fefffff
   88238:	0008e5c0 	.word	0x0008e5c0
   8823c:	0008e5c4 	.word	0x0008e5c4
   88240:	0008e5d0 	.word	0x0008e5d0
   88244:	9a07      	ldr	r2, [sp, #28]
   88246:	9208      	str	r2, [sp, #32]
   88248:	2b01      	cmp	r3, #1
   8824a:	f000 81b4 	beq.w	885b6 <_svfprintf_r+0xa02>
   8824e:	2b02      	cmp	r3, #2
   88250:	f000 8159 	beq.w	88506 <_svfprintf_r+0x952>
   88254:	af56      	add	r7, sp, #344	; 0x158
   88256:	08e2      	lsrs	r2, r4, #3
   88258:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8825c:	08e9      	lsrs	r1, r5, #3
   8825e:	f004 0307 	and.w	r3, r4, #7
   88262:	460d      	mov	r5, r1
   88264:	4614      	mov	r4, r2
   88266:	3330      	adds	r3, #48	; 0x30
   88268:	ea54 0105 	orrs.w	r1, r4, r5
   8826c:	463a      	mov	r2, r7
   8826e:	f807 3d01 	strb.w	r3, [r7, #-1]!
   88272:	d1f0      	bne.n	88256 <_svfprintf_r+0x6a2>
   88274:	9908      	ldr	r1, [sp, #32]
   88276:	4608      	mov	r0, r1
   88278:	07c0      	lsls	r0, r0, #31
   8827a:	f100 82b8 	bmi.w	887ee <_svfprintf_r+0xc3a>
   8827e:	ab56      	add	r3, sp, #344	; 0x158
   88280:	1bdb      	subs	r3, r3, r7
   88282:	9107      	str	r1, [sp, #28]
   88284:	930c      	str	r3, [sp, #48]	; 0x30
   88286:	2300      	movs	r3, #0
   88288:	9909      	ldr	r1, [sp, #36]	; 0x24
   8828a:	930d      	str	r3, [sp, #52]	; 0x34
   8828c:	9312      	str	r3, [sp, #72]	; 0x48
   8828e:	9316      	str	r3, [sp, #88]	; 0x58
   88290:	9310      	str	r3, [sp, #64]	; 0x40
   88292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88294:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88298:	428b      	cmp	r3, r1
   8829a:	bfb8      	it	lt
   8829c:	460b      	movlt	r3, r1
   8829e:	9308      	str	r3, [sp, #32]
   882a0:	e6ac      	b.n	87ffc <_svfprintf_r+0x448>
   882a2:	2e65      	cmp	r6, #101	; 0x65
   882a4:	f340 80d8 	ble.w	88458 <_svfprintf_r+0x8a4>
   882a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   882ac:	2200      	movs	r2, #0
   882ae:	2300      	movs	r3, #0
   882b0:	f005 ffce 	bl	8e250 <__aeabi_dcmpeq>
   882b4:	2800      	cmp	r0, #0
   882b6:	f000 821e 	beq.w	886f6 <_svfprintf_r+0xb42>
   882ba:	2101      	movs	r1, #1
   882bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   882be:	4ac5      	ldr	r2, [pc, #788]	; (885d4 <_svfprintf_r+0xa20>)
   882c0:	440b      	add	r3, r1
   882c2:	440c      	add	r4, r1
   882c4:	2b07      	cmp	r3, #7
   882c6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   882ca:	e9c8 2100 	strd	r2, r1, [r8]
   882ce:	f300 85bb 	bgt.w	88e48 <_svfprintf_r+0x1294>
   882d2:	f108 0808 	add.w	r8, r8, #8
   882d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   882d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   882da:	4293      	cmp	r3, r2
   882dc:	f280 8321 	bge.w	88922 <_svfprintf_r+0xd6e>
   882e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   882e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   882e4:	3301      	adds	r3, #1
   882e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   882e8:	4414      	add	r4, r2
   882ea:	2b07      	cmp	r3, #7
   882ec:	e9c8 1200 	strd	r1, r2, [r8]
   882f0:	942c      	str	r4, [sp, #176]	; 0xb0
   882f2:	932b      	str	r3, [sp, #172]	; 0xac
   882f4:	f300 8448 	bgt.w	88b88 <_svfprintf_r+0xfd4>
   882f8:	f108 0808 	add.w	r8, r8, #8
   882fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   882fe:	1e5d      	subs	r5, r3, #1
   88300:	2d00      	cmp	r5, #0
   88302:	f77f ae06 	ble.w	87f12 <_svfprintf_r+0x35e>
   88306:	2d10      	cmp	r5, #16
   88308:	f340 85c7 	ble.w	88e9a <_svfprintf_r+0x12e6>
   8830c:	4fb2      	ldr	r7, [pc, #712]	; (885d8 <_svfprintf_r+0xa24>)
   8830e:	2610      	movs	r6, #16
   88310:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88312:	970f      	str	r7, [sp, #60]	; 0x3c
   88314:	e005      	b.n	88322 <_svfprintf_r+0x76e>
   88316:	f108 0808 	add.w	r8, r8, #8
   8831a:	3d10      	subs	r5, #16
   8831c:	2d10      	cmp	r5, #16
   8831e:	f340 85bf 	ble.w	88ea0 <_svfprintf_r+0x12ec>
   88322:	3301      	adds	r3, #1
   88324:	3410      	adds	r4, #16
   88326:	2b07      	cmp	r3, #7
   88328:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8832c:	e9c8 7600 	strd	r7, r6, [r8]
   88330:	ddf1      	ble.n	88316 <_svfprintf_r+0x762>
   88332:	4651      	mov	r1, sl
   88334:	4648      	mov	r0, r9
   88336:	aa2a      	add	r2, sp, #168	; 0xa8
   88338:	f005 f888 	bl	8d44c <__ssprint_r>
   8833c:	2800      	cmp	r0, #0
   8833e:	f040 8081 	bne.w	88444 <_svfprintf_r+0x890>
   88342:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88346:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8834a:	e7e6      	b.n	8831a <_svfprintf_r+0x766>
   8834c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8834e:	9a08      	ldr	r2, [sp, #32]
   88350:	1a9d      	subs	r5, r3, r2
   88352:	2d00      	cmp	r5, #0
   88354:	f77f adc6 	ble.w	87ee4 <_svfprintf_r+0x330>
   88358:	2d10      	cmp	r5, #16
   8835a:	f341 8069 	ble.w	89430 <_svfprintf_r+0x187c>
   8835e:	489e      	ldr	r0, [pc, #632]	; (885d8 <_svfprintf_r+0xa24>)
   88360:	4621      	mov	r1, r4
   88362:	2310      	movs	r3, #16
   88364:	4604      	mov	r4, r0
   88366:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88368:	900f      	str	r0, [sp, #60]	; 0x3c
   8836a:	e004      	b.n	88376 <_svfprintf_r+0x7c2>
   8836c:	3d10      	subs	r5, #16
   8836e:	2d10      	cmp	r5, #16
   88370:	f108 0808 	add.w	r8, r8, #8
   88374:	dd17      	ble.n	883a6 <_svfprintf_r+0x7f2>
   88376:	3201      	adds	r2, #1
   88378:	3110      	adds	r1, #16
   8837a:	2a07      	cmp	r2, #7
   8837c:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   88380:	e9c8 4300 	strd	r4, r3, [r8]
   88384:	ddf2      	ble.n	8836c <_svfprintf_r+0x7b8>
   88386:	4651      	mov	r1, sl
   88388:	4648      	mov	r0, r9
   8838a:	aa2a      	add	r2, sp, #168	; 0xa8
   8838c:	f005 f85e 	bl	8d44c <__ssprint_r>
   88390:	2800      	cmp	r0, #0
   88392:	d157      	bne.n	88444 <_svfprintf_r+0x890>
   88394:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88398:	3d10      	subs	r5, #16
   8839a:	2d10      	cmp	r5, #16
   8839c:	f04f 0310 	mov.w	r3, #16
   883a0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   883a4:	dce7      	bgt.n	88376 <_svfprintf_r+0x7c2>
   883a6:	460c      	mov	r4, r1
   883a8:	3201      	adds	r2, #1
   883aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   883ac:	442c      	add	r4, r5
   883ae:	2a07      	cmp	r2, #7
   883b0:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   883b4:	e9c8 3500 	strd	r3, r5, [r8]
   883b8:	f300 858a 	bgt.w	88ed0 <_svfprintf_r+0x131c>
   883bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   883be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   883c0:	f108 0808 	add.w	r8, r8, #8
   883c4:	1a9d      	subs	r5, r3, r2
   883c6:	2d00      	cmp	r5, #0
   883c8:	f77f ad92 	ble.w	87ef0 <_svfprintf_r+0x33c>
   883cc:	2d10      	cmp	r5, #16
   883ce:	f340 860a 	ble.w	88fe6 <_svfprintf_r+0x1432>
   883d2:	4881      	ldr	r0, [pc, #516]	; (885d8 <_svfprintf_r+0xa24>)
   883d4:	4621      	mov	r1, r4
   883d6:	2310      	movs	r3, #16
   883d8:	4604      	mov	r4, r0
   883da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   883dc:	900f      	str	r0, [sp, #60]	; 0x3c
   883de:	e004      	b.n	883ea <_svfprintf_r+0x836>
   883e0:	3d10      	subs	r5, #16
   883e2:	2d10      	cmp	r5, #16
   883e4:	f108 0808 	add.w	r8, r8, #8
   883e8:	dd16      	ble.n	88418 <_svfprintf_r+0x864>
   883ea:	3201      	adds	r2, #1
   883ec:	3110      	adds	r1, #16
   883ee:	2a07      	cmp	r2, #7
   883f0:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   883f4:	e9c8 4300 	strd	r4, r3, [r8]
   883f8:	ddf2      	ble.n	883e0 <_svfprintf_r+0x82c>
   883fa:	4651      	mov	r1, sl
   883fc:	4648      	mov	r0, r9
   883fe:	aa2a      	add	r2, sp, #168	; 0xa8
   88400:	f005 f824 	bl	8d44c <__ssprint_r>
   88404:	b9f0      	cbnz	r0, 88444 <_svfprintf_r+0x890>
   88406:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8840a:	3d10      	subs	r5, #16
   8840c:	2d10      	cmp	r5, #16
   8840e:	f04f 0310 	mov.w	r3, #16
   88412:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88416:	dce8      	bgt.n	883ea <_svfprintf_r+0x836>
   88418:	460c      	mov	r4, r1
   8841a:	3201      	adds	r2, #1
   8841c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8841e:	442c      	add	r4, r5
   88420:	2a07      	cmp	r2, #7
   88422:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   88426:	e9c8 3500 	strd	r3, r5, [r8]
   8842a:	f300 8237 	bgt.w	8889c <_svfprintf_r+0xce8>
   8842e:	f108 0808 	add.w	r8, r8, #8
   88432:	e55d      	b.n	87ef0 <_svfprintf_r+0x33c>
   88434:	4651      	mov	r1, sl
   88436:	4648      	mov	r0, r9
   88438:	aa2a      	add	r2, sp, #168	; 0xa8
   8843a:	f005 f807 	bl	8d44c <__ssprint_r>
   8843e:	2800      	cmp	r0, #0
   88440:	f43f ad7b 	beq.w	87f3a <_svfprintf_r+0x386>
   88444:	46d3      	mov	fp, sl
   88446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88448:	2b00      	cmp	r3, #0
   8844a:	f43f ad8a 	beq.w	87f62 <_svfprintf_r+0x3ae>
   8844e:	4648      	mov	r0, r9
   88450:	990d      	ldr	r1, [sp, #52]	; 0x34
   88452:	f003 faf1 	bl	8ba38 <_free_r>
   88456:	e584      	b.n	87f62 <_svfprintf_r+0x3ae>
   88458:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8845a:	2b01      	cmp	r3, #1
   8845c:	f340 81d5 	ble.w	8880a <_svfprintf_r+0xc56>
   88460:	2301      	movs	r3, #1
   88462:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   88464:	441c      	add	r4, r3
   88466:	441d      	add	r5, r3
   88468:	2d07      	cmp	r5, #7
   8846a:	942c      	str	r4, [sp, #176]	; 0xb0
   8846c:	f8c8 7000 	str.w	r7, [r8]
   88470:	952b      	str	r5, [sp, #172]	; 0xac
   88472:	f8c8 3004 	str.w	r3, [r8, #4]
   88476:	f300 823a 	bgt.w	888ee <_svfprintf_r+0xd3a>
   8847a:	f108 0808 	add.w	r8, r8, #8
   8847e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88480:	3501      	adds	r5, #1
   88482:	9a18      	ldr	r2, [sp, #96]	; 0x60
   88484:	441c      	add	r4, r3
   88486:	2d07      	cmp	r5, #7
   88488:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8848c:	e9c8 2300 	strd	r2, r3, [r8]
   88490:	f300 823a 	bgt.w	88908 <_svfprintf_r+0xd54>
   88494:	f108 0808 	add.w	r8, r8, #8
   88498:	2300      	movs	r3, #0
   8849a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8849e:	2200      	movs	r2, #0
   884a0:	f005 fed6 	bl	8e250 <__aeabi_dcmpeq>
   884a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   884a6:	2800      	cmp	r0, #0
   884a8:	f040 81cd 	bne.w	88846 <_svfprintf_r+0xc92>
   884ac:	3b01      	subs	r3, #1
   884ae:	3501      	adds	r5, #1
   884b0:	3701      	adds	r7, #1
   884b2:	441c      	add	r4, r3
   884b4:	2d07      	cmp	r5, #7
   884b6:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   884ba:	f8c8 7000 	str.w	r7, [r8]
   884be:	f8c8 3004 	str.w	r3, [r8, #4]
   884c2:	f300 84dc 	bgt.w	88e7e <_svfprintf_r+0x12ca>
   884c6:	f108 0808 	add.w	r8, r8, #8
   884ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   884cc:	3501      	adds	r5, #1
   884ce:	4414      	add	r4, r2
   884d0:	ab26      	add	r3, sp, #152	; 0x98
   884d2:	2d07      	cmp	r5, #7
   884d4:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   884d8:	e9c8 3200 	strd	r3, r2, [r8]
   884dc:	f77f ad17 	ble.w	87f0e <_svfprintf_r+0x35a>
   884e0:	4651      	mov	r1, sl
   884e2:	4648      	mov	r0, r9
   884e4:	aa2a      	add	r2, sp, #168	; 0xa8
   884e6:	f004 ffb1 	bl	8d44c <__ssprint_r>
   884ea:	2800      	cmp	r0, #0
   884ec:	d1aa      	bne.n	88444 <_svfprintf_r+0x890>
   884ee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   884f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   884f4:	e50d      	b.n	87f12 <_svfprintf_r+0x35e>
   884f6:	2b01      	cmp	r3, #1
   884f8:	f000 87ca 	beq.w	89490 <_svfprintf_r+0x18dc>
   884fc:	2b02      	cmp	r3, #2
   884fe:	9b07      	ldr	r3, [sp, #28]
   88500:	9308      	str	r3, [sp, #32]
   88502:	f47f aea7 	bne.w	88254 <_svfprintf_r+0x6a0>
   88506:	9819      	ldr	r0, [sp, #100]	; 0x64
   88508:	af56      	add	r7, sp, #344	; 0x158
   8850a:	0923      	lsrs	r3, r4, #4
   8850c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88510:	0929      	lsrs	r1, r5, #4
   88512:	f004 020f 	and.w	r2, r4, #15
   88516:	460d      	mov	r5, r1
   88518:	461c      	mov	r4, r3
   8851a:	5c83      	ldrb	r3, [r0, r2]
   8851c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   88520:	ea54 0305 	orrs.w	r3, r4, r5
   88524:	d1f1      	bne.n	8850a <_svfprintf_r+0x956>
   88526:	9b08      	ldr	r3, [sp, #32]
   88528:	9307      	str	r3, [sp, #28]
   8852a:	ab56      	add	r3, sp, #344	; 0x158
   8852c:	1bdb      	subs	r3, r3, r7
   8852e:	930c      	str	r3, [sp, #48]	; 0x30
   88530:	e6a9      	b.n	88286 <_svfprintf_r+0x6d2>
   88532:	2d10      	cmp	r5, #16
   88534:	f340 8668 	ble.w	89208 <_svfprintf_r+0x1654>
   88538:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8853c:	931e      	str	r3, [sp, #120]	; 0x78
   8853e:	460b      	mov	r3, r1
   88540:	4639      	mov	r1, r7
   88542:	2410      	movs	r4, #16
   88544:	4637      	mov	r7, r6
   88546:	4656      	mov	r6, sl
   88548:	46ca      	mov	sl, r9
   8854a:	4689      	mov	r9, r1
   8854c:	e004      	b.n	88558 <_svfprintf_r+0x9a4>
   8854e:	3d10      	subs	r5, #16
   88550:	2d10      	cmp	r5, #16
   88552:	f108 0808 	add.w	r8, r8, #8
   88556:	dd17      	ble.n	88588 <_svfprintf_r+0x9d4>
   88558:	3201      	adds	r2, #1
   8855a:	4920      	ldr	r1, [pc, #128]	; (885dc <_svfprintf_r+0xa28>)
   8855c:	3310      	adds	r3, #16
   8855e:	2a07      	cmp	r2, #7
   88560:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   88564:	e9c8 1400 	strd	r1, r4, [r8]
   88568:	ddf1      	ble.n	8854e <_svfprintf_r+0x99a>
   8856a:	4631      	mov	r1, r6
   8856c:	4650      	mov	r0, sl
   8856e:	aa2a      	add	r2, sp, #168	; 0xa8
   88570:	f004 ff6c 	bl	8d44c <__ssprint_r>
   88574:	2800      	cmp	r0, #0
   88576:	f040 8458 	bne.w	88e2a <_svfprintf_r+0x1276>
   8857a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   8857e:	3d10      	subs	r5, #16
   88580:	2d10      	cmp	r5, #16
   88582:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88586:	dce7      	bgt.n	88558 <_svfprintf_r+0x9a4>
   88588:	4648      	mov	r0, r9
   8858a:	46d1      	mov	r9, sl
   8858c:	46b2      	mov	sl, r6
   8858e:	463e      	mov	r6, r7
   88590:	4607      	mov	r7, r0
   88592:	4619      	mov	r1, r3
   88594:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88596:	194c      	adds	r4, r1, r5
   88598:	3201      	adds	r2, #1
   8859a:	4910      	ldr	r1, [pc, #64]	; (885dc <_svfprintf_r+0xa28>)
   8859c:	2a07      	cmp	r2, #7
   8859e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   885a2:	e9c8 1500 	strd	r1, r5, [r8]
   885a6:	f300 841f 	bgt.w	88de8 <_svfprintf_r+0x1234>
   885aa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   885ae:	f108 0808 	add.w	r8, r8, #8
   885b2:	e474      	b.n	87e9e <_svfprintf_r+0x2ea>
   885b4:	9308      	str	r3, [sp, #32]
   885b6:	2d00      	cmp	r5, #0
   885b8:	bf08      	it	eq
   885ba:	2c0a      	cmpeq	r4, #10
   885bc:	f080 83d0 	bcs.w	88d60 <_svfprintf_r+0x11ac>
   885c0:	9b08      	ldr	r3, [sp, #32]
   885c2:	3430      	adds	r4, #48	; 0x30
   885c4:	9307      	str	r3, [sp, #28]
   885c6:	2301      	movs	r3, #1
   885c8:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   885cc:	930c      	str	r3, [sp, #48]	; 0x30
   885ce:	f20d 1757 	addw	r7, sp, #343	; 0x157
   885d2:	e658      	b.n	88286 <_svfprintf_r+0x6d2>
   885d4:	0008e600 	.word	0x0008e600
   885d8:	0008e614 	.word	0x0008e614
   885dc:	0008e604 	.word	0x0008e604
   885e0:	4651      	mov	r1, sl
   885e2:	4648      	mov	r0, r9
   885e4:	aa2a      	add	r2, sp, #168	; 0xa8
   885e6:	f004 ff31 	bl	8d44c <__ssprint_r>
   885ea:	2800      	cmp	r0, #0
   885ec:	f47f af2a 	bne.w	88444 <_svfprintf_r+0x890>
   885f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   885f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   885f4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   885f8:	2a00      	cmp	r2, #0
   885fa:	f040 847f 	bne.w	88efc <_svfprintf_r+0x1348>
   885fe:	9b07      	ldr	r3, [sp, #28]
   88600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88602:	f003 0301 	and.w	r3, r3, #1
   88606:	4313      	orrs	r3, r2
   88608:	f43f ac83 	beq.w	87f12 <_svfprintf_r+0x35e>
   8860c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8860e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88610:	3301      	adds	r3, #1
   88612:	9918      	ldr	r1, [sp, #96]	; 0x60
   88614:	4414      	add	r4, r2
   88616:	2b07      	cmp	r3, #7
   88618:	e9c8 1200 	strd	r1, r2, [r8]
   8861c:	942c      	str	r4, [sp, #176]	; 0xb0
   8861e:	932b      	str	r3, [sp, #172]	; 0xac
   88620:	f300 8524 	bgt.w	8906c <_svfprintf_r+0x14b8>
   88624:	f108 0808 	add.w	r8, r8, #8
   88628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8862a:	3301      	adds	r3, #1
   8862c:	4414      	add	r4, r2
   8862e:	2b07      	cmp	r3, #7
   88630:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88634:	e9c8 7200 	strd	r7, r2, [r8]
   88638:	f77f ac69 	ble.w	87f0e <_svfprintf_r+0x35a>
   8863c:	4651      	mov	r1, sl
   8863e:	4648      	mov	r0, r9
   88640:	aa2a      	add	r2, sp, #168	; 0xa8
   88642:	f004 ff03 	bl	8d44c <__ssprint_r>
   88646:	2800      	cmp	r0, #0
   88648:	f47f aefc 	bne.w	88444 <_svfprintf_r+0x890>
   8864c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8864e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88652:	e45e      	b.n	87f12 <_svfprintf_r+0x35e>
   88654:	4651      	mov	r1, sl
   88656:	4648      	mov	r0, r9
   88658:	aa2a      	add	r2, sp, #168	; 0xa8
   8865a:	931e      	str	r3, [sp, #120]	; 0x78
   8865c:	f004 fef6 	bl	8d44c <__ssprint_r>
   88660:	2800      	cmp	r0, #0
   88662:	f47f aeef 	bne.w	88444 <_svfprintf_r+0x890>
   88666:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88668:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8866a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8866e:	e426      	b.n	87ebe <_svfprintf_r+0x30a>
   88670:	4651      	mov	r1, sl
   88672:	4648      	mov	r0, r9
   88674:	aa2a      	add	r2, sp, #168	; 0xa8
   88676:	f004 fee9 	bl	8d44c <__ssprint_r>
   8867a:	2800      	cmp	r0, #0
   8867c:	f47f aee2 	bne.w	88444 <_svfprintf_r+0x890>
   88680:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88682:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88686:	e429      	b.n	87edc <_svfprintf_r+0x328>
   88688:	2d10      	cmp	r5, #16
   8868a:	f340 86be 	ble.w	8940a <_svfprintf_r+0x1856>
   8868e:	2610      	movs	r6, #16
   88690:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88692:	e004      	b.n	8869e <_svfprintf_r+0xaea>
   88694:	3d10      	subs	r5, #16
   88696:	2d10      	cmp	r5, #16
   88698:	f108 0808 	add.w	r8, r8, #8
   8869c:	dd17      	ble.n	886ce <_svfprintf_r+0xb1a>
   8869e:	3301      	adds	r3, #1
   886a0:	4aad      	ldr	r2, [pc, #692]	; (88958 <_svfprintf_r+0xda4>)
   886a2:	3410      	adds	r4, #16
   886a4:	2b07      	cmp	r3, #7
   886a6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   886aa:	e9c8 2600 	strd	r2, r6, [r8]
   886ae:	ddf1      	ble.n	88694 <_svfprintf_r+0xae0>
   886b0:	4651      	mov	r1, sl
   886b2:	4648      	mov	r0, r9
   886b4:	aa2a      	add	r2, sp, #168	; 0xa8
   886b6:	f004 fec9 	bl	8d44c <__ssprint_r>
   886ba:	2800      	cmp	r0, #0
   886bc:	f47f aec2 	bne.w	88444 <_svfprintf_r+0x890>
   886c0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   886c4:	3d10      	subs	r5, #16
   886c6:	2d10      	cmp	r5, #16
   886c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   886cc:	dce7      	bgt.n	8869e <_svfprintf_r+0xaea>
   886ce:	3301      	adds	r3, #1
   886d0:	4aa1      	ldr	r2, [pc, #644]	; (88958 <_svfprintf_r+0xda4>)
   886d2:	442c      	add	r4, r5
   886d4:	2b07      	cmp	r3, #7
   886d6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   886da:	e9c8 2500 	strd	r2, r5, [r8]
   886de:	f77f ac21 	ble.w	87f24 <_svfprintf_r+0x370>
   886e2:	4651      	mov	r1, sl
   886e4:	4648      	mov	r0, r9
   886e6:	aa2a      	add	r2, sp, #168	; 0xa8
   886e8:	f004 feb0 	bl	8d44c <__ssprint_r>
   886ec:	2800      	cmp	r0, #0
   886ee:	f47f aea9 	bne.w	88444 <_svfprintf_r+0x890>
   886f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   886f4:	e416      	b.n	87f24 <_svfprintf_r+0x370>
   886f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   886f8:	2a00      	cmp	r2, #0
   886fa:	f340 8386 	ble.w	88e0a <_svfprintf_r+0x1256>
   886fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88702:	4293      	cmp	r3, r2
   88704:	bfa8      	it	ge
   88706:	4613      	movge	r3, r2
   88708:	2b00      	cmp	r3, #0
   8870a:	461d      	mov	r5, r3
   8870c:	dd0b      	ble.n	88726 <_svfprintf_r+0xb72>
   8870e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88710:	442c      	add	r4, r5
   88712:	3301      	adds	r3, #1
   88714:	2b07      	cmp	r3, #7
   88716:	e9c8 7500 	strd	r7, r5, [r8]
   8871a:	942c      	str	r4, [sp, #176]	; 0xb0
   8871c:	932b      	str	r3, [sp, #172]	; 0xac
   8871e:	f300 851e 	bgt.w	8915e <_svfprintf_r+0x15aa>
   88722:	f108 0808 	add.w	r8, r8, #8
   88726:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88728:	2d00      	cmp	r5, #0
   8872a:	bfa8      	it	ge
   8872c:	1b5b      	subge	r3, r3, r5
   8872e:	2b00      	cmp	r3, #0
   88730:	461d      	mov	r5, r3
   88732:	f300 8256 	bgt.w	88be2 <_svfprintf_r+0x102e>
   88736:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88738:	443b      	add	r3, r7
   8873a:	461e      	mov	r6, r3
   8873c:	9b07      	ldr	r3, [sp, #28]
   8873e:	055b      	lsls	r3, r3, #21
   88740:	f100 8277 	bmi.w	88c32 <_svfprintf_r+0x107e>
   88744:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88746:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88748:	4293      	cmp	r3, r2
   8874a:	db03      	blt.n	88754 <_svfprintf_r+0xba0>
   8874c:	9a07      	ldr	r2, [sp, #28]
   8874e:	07d5      	lsls	r5, r2, #31
   88750:	f140 847a 	bpl.w	89048 <_svfprintf_r+0x1494>
   88754:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88756:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88758:	3201      	adds	r2, #1
   8875a:	9818      	ldr	r0, [sp, #96]	; 0x60
   8875c:	440c      	add	r4, r1
   8875e:	2a07      	cmp	r2, #7
   88760:	e9c8 0100 	strd	r0, r1, [r8]
   88764:	942c      	str	r4, [sp, #176]	; 0xb0
   88766:	922b      	str	r2, [sp, #172]	; 0xac
   88768:	f300 8506 	bgt.w	89178 <_svfprintf_r+0x15c4>
   8876c:	f108 0808 	add.w	r8, r8, #8
   88770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88772:	18bd      	adds	r5, r7, r2
   88774:	1bad      	subs	r5, r5, r6
   88776:	1ad3      	subs	r3, r2, r3
   88778:	429d      	cmp	r5, r3
   8877a:	bfa8      	it	ge
   8877c:	461d      	movge	r5, r3
   8877e:	2d00      	cmp	r5, #0
   88780:	dd0b      	ble.n	8879a <_svfprintf_r+0xbe6>
   88782:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88784:	442c      	add	r4, r5
   88786:	3201      	adds	r2, #1
   88788:	2a07      	cmp	r2, #7
   8878a:	e9c8 6500 	strd	r6, r5, [r8]
   8878e:	942c      	str	r4, [sp, #176]	; 0xb0
   88790:	922b      	str	r2, [sp, #172]	; 0xac
   88792:	f300 855f 	bgt.w	89254 <_svfprintf_r+0x16a0>
   88796:	f108 0808 	add.w	r8, r8, #8
   8879a:	2d00      	cmp	r5, #0
   8879c:	bfb4      	ite	lt
   8879e:	461d      	movlt	r5, r3
   887a0:	1b5d      	subge	r5, r3, r5
   887a2:	2d00      	cmp	r5, #0
   887a4:	f77f abb5 	ble.w	87f12 <_svfprintf_r+0x35e>
   887a8:	2d10      	cmp	r5, #16
   887aa:	f340 8376 	ble.w	88e9a <_svfprintf_r+0x12e6>
   887ae:	4f6b      	ldr	r7, [pc, #428]	; (8895c <_svfprintf_r+0xda8>)
   887b0:	2610      	movs	r6, #16
   887b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   887b4:	970f      	str	r7, [sp, #60]	; 0x3c
   887b6:	e005      	b.n	887c4 <_svfprintf_r+0xc10>
   887b8:	f108 0808 	add.w	r8, r8, #8
   887bc:	3d10      	subs	r5, #16
   887be:	2d10      	cmp	r5, #16
   887c0:	f340 836e 	ble.w	88ea0 <_svfprintf_r+0x12ec>
   887c4:	3301      	adds	r3, #1
   887c6:	3410      	adds	r4, #16
   887c8:	2b07      	cmp	r3, #7
   887ca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   887ce:	e9c8 7600 	strd	r7, r6, [r8]
   887d2:	ddf1      	ble.n	887b8 <_svfprintf_r+0xc04>
   887d4:	4651      	mov	r1, sl
   887d6:	4648      	mov	r0, r9
   887d8:	aa2a      	add	r2, sp, #168	; 0xa8
   887da:	f004 fe37 	bl	8d44c <__ssprint_r>
   887de:	2800      	cmp	r0, #0
   887e0:	f47f ae30 	bne.w	88444 <_svfprintf_r+0x890>
   887e4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   887e8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   887ec:	e7e6      	b.n	887bc <_svfprintf_r+0xc08>
   887ee:	2b30      	cmp	r3, #48	; 0x30
   887f0:	f43f ae99 	beq.w	88526 <_svfprintf_r+0x972>
   887f4:	2330      	movs	r3, #48	; 0x30
   887f6:	3a02      	subs	r2, #2
   887f8:	f807 3c01 	strb.w	r3, [r7, #-1]
   887fc:	9908      	ldr	r1, [sp, #32]
   887fe:	ab56      	add	r3, sp, #344	; 0x158
   88800:	1a9b      	subs	r3, r3, r2
   88802:	4617      	mov	r7, r2
   88804:	9107      	str	r1, [sp, #28]
   88806:	930c      	str	r3, [sp, #48]	; 0x30
   88808:	e53d      	b.n	88286 <_svfprintf_r+0x6d2>
   8880a:	9b07      	ldr	r3, [sp, #28]
   8880c:	07d8      	lsls	r0, r3, #31
   8880e:	f53f ae27 	bmi.w	88460 <_svfprintf_r+0x8ac>
   88812:	2301      	movs	r3, #1
   88814:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   88816:	441c      	add	r4, r3
   88818:	441d      	add	r5, r3
   8881a:	2d07      	cmp	r5, #7
   8881c:	942c      	str	r4, [sp, #176]	; 0xb0
   8881e:	f8c8 7000 	str.w	r7, [r8]
   88822:	952b      	str	r5, [sp, #172]	; 0xac
   88824:	f8c8 3004 	str.w	r3, [r8, #4]
   88828:	f77f ae4d 	ble.w	884c6 <_svfprintf_r+0x912>
   8882c:	4651      	mov	r1, sl
   8882e:	4648      	mov	r0, r9
   88830:	aa2a      	add	r2, sp, #168	; 0xa8
   88832:	f004 fe0b 	bl	8d44c <__ssprint_r>
   88836:	2800      	cmp	r0, #0
   88838:	f47f ae04 	bne.w	88444 <_svfprintf_r+0x890>
   8883c:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88840:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88844:	e641      	b.n	884ca <_svfprintf_r+0x916>
   88846:	1e5e      	subs	r6, r3, #1
   88848:	2e00      	cmp	r6, #0
   8884a:	f77f ae3e 	ble.w	884ca <_svfprintf_r+0x916>
   8884e:	2e10      	cmp	r6, #16
   88850:	f340 871e 	ble.w	89690 <_svfprintf_r+0x1adc>
   88854:	4b41      	ldr	r3, [pc, #260]	; (8895c <_svfprintf_r+0xda8>)
   88856:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8885a:	2710      	movs	r7, #16
   8885c:	46d3      	mov	fp, sl
   8885e:	930f      	str	r3, [sp, #60]	; 0x3c
   88860:	46ca      	mov	sl, r9
   88862:	4699      	mov	r9, r3
   88864:	e005      	b.n	88872 <_svfprintf_r+0xcbe>
   88866:	f108 0808 	add.w	r8, r8, #8
   8886a:	3e10      	subs	r6, #16
   8886c:	2e10      	cmp	r6, #16
   8886e:	f340 82f8 	ble.w	88e62 <_svfprintf_r+0x12ae>
   88872:	3501      	adds	r5, #1
   88874:	3410      	adds	r4, #16
   88876:	2d07      	cmp	r5, #7
   88878:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8887c:	e9c8 9700 	strd	r9, r7, [r8]
   88880:	ddf1      	ble.n	88866 <_svfprintf_r+0xcb2>
   88882:	4659      	mov	r1, fp
   88884:	4650      	mov	r0, sl
   88886:	aa2a      	add	r2, sp, #168	; 0xa8
   88888:	f004 fde0 	bl	8d44c <__ssprint_r>
   8888c:	2800      	cmp	r0, #0
   8888e:	f040 85cc 	bne.w	8942a <_svfprintf_r+0x1876>
   88892:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88896:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8889a:	e7e6      	b.n	8886a <_svfprintf_r+0xcb6>
   8889c:	4651      	mov	r1, sl
   8889e:	4648      	mov	r0, r9
   888a0:	aa2a      	add	r2, sp, #168	; 0xa8
   888a2:	f004 fdd3 	bl	8d44c <__ssprint_r>
   888a6:	2800      	cmp	r0, #0
   888a8:	f47f adcc 	bne.w	88444 <_svfprintf_r+0x890>
   888ac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   888ae:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   888b2:	f7ff bb1d 	b.w	87ef0 <_svfprintf_r+0x33c>
   888b6:	9b08      	ldr	r3, [sp, #32]
   888b8:	06dc      	lsls	r4, r3, #27
   888ba:	f100 8119 	bmi.w	88af0 <_svfprintf_r+0xf3c>
   888be:	9b08      	ldr	r3, [sp, #32]
   888c0:	0658      	lsls	r0, r3, #25
   888c2:	f140 8368 	bpl.w	88f96 <_svfprintf_r+0x13e2>
   888c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   888c8:	2301      	movs	r3, #1
   888ca:	f852 4b04 	ldr.w	r4, [r2], #4
   888ce:	2500      	movs	r5, #0
   888d0:	920e      	str	r2, [sp, #56]	; 0x38
   888d2:	b2a4      	uxth	r4, r4
   888d4:	f7ff ba7f 	b.w	87dd6 <_svfprintf_r+0x222>
   888d8:	232d      	movs	r3, #45	; 0x2d
   888da:	9a07      	ldr	r2, [sp, #28]
   888dc:	4264      	negs	r4, r4
   888de:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   888e2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   888e6:	2301      	movs	r3, #1
   888e8:	9208      	str	r2, [sp, #32]
   888ea:	f7ff ba77 	b.w	87ddc <_svfprintf_r+0x228>
   888ee:	4651      	mov	r1, sl
   888f0:	4648      	mov	r0, r9
   888f2:	aa2a      	add	r2, sp, #168	; 0xa8
   888f4:	f004 fdaa 	bl	8d44c <__ssprint_r>
   888f8:	2800      	cmp	r0, #0
   888fa:	f47f ada3 	bne.w	88444 <_svfprintf_r+0x890>
   888fe:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88902:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88906:	e5ba      	b.n	8847e <_svfprintf_r+0x8ca>
   88908:	4651      	mov	r1, sl
   8890a:	4648      	mov	r0, r9
   8890c:	aa2a      	add	r2, sp, #168	; 0xa8
   8890e:	f004 fd9d 	bl	8d44c <__ssprint_r>
   88912:	2800      	cmp	r0, #0
   88914:	f47f ad96 	bne.w	88444 <_svfprintf_r+0x890>
   88918:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8891c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88920:	e5ba      	b.n	88498 <_svfprintf_r+0x8e4>
   88922:	9b07      	ldr	r3, [sp, #28]
   88924:	07da      	lsls	r2, r3, #31
   88926:	f57f aaf4 	bpl.w	87f12 <_svfprintf_r+0x35e>
   8892a:	e4d9      	b.n	882e0 <_svfprintf_r+0x72c>
   8892c:	af56      	add	r7, sp, #344	; 0x158
   8892e:	e4aa      	b.n	88286 <_svfprintf_r+0x6d2>
   88930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88932:	465f      	mov	r7, fp
   88934:	f853 1b04 	ldr.w	r1, [r3], #4
   88938:	930e      	str	r3, [sp, #56]	; 0x38
   8893a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8893c:	17dd      	asrs	r5, r3, #31
   8893e:	461a      	mov	r2, r3
   88940:	462b      	mov	r3, r5
   88942:	e9c1 2300 	strd	r2, r3, [r1]
   88946:	f7ff bb03 	b.w	87f50 <_svfprintf_r+0x39c>
   8894a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8894c:	2500      	movs	r5, #0
   8894e:	f853 4b04 	ldr.w	r4, [r3], #4
   88952:	930e      	str	r3, [sp, #56]	; 0x38
   88954:	f7ff ba3a 	b.w	87dcc <_svfprintf_r+0x218>
   88958:	0008e604 	.word	0x0008e604
   8895c:	0008e614 	.word	0x0008e614
   88960:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88964:	460b      	mov	r3, r1
   88966:	4602      	mov	r2, r0
   88968:	f005 fca4 	bl	8e2b4 <__aeabi_dcmpun>
   8896c:	4601      	mov	r1, r0
   8896e:	2800      	cmp	r0, #0
   88970:	f040 8643 	bne.w	895fa <_svfprintf_r+0x1a46>
   88974:	2e61      	cmp	r6, #97	; 0x61
   88976:	f000 8586 	beq.w	89486 <_svfprintf_r+0x18d2>
   8897a:	2e41      	cmp	r6, #65	; 0x41
   8897c:	f000 847a 	beq.w	89274 <_svfprintf_r+0x16c0>
   88980:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88982:	f026 0520 	bic.w	r5, r6, #32
   88986:	1c5a      	adds	r2, r3, #1
   88988:	9508      	str	r5, [sp, #32]
   8898a:	f000 837d 	beq.w	89088 <_svfprintf_r+0x14d4>
   8898e:	2d47      	cmp	r5, #71	; 0x47
   88990:	f000 859e 	beq.w	894d0 <_svfprintf_r+0x191c>
   88994:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88998:	9b07      	ldr	r3, [sp, #28]
   8899a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8899e:	9312      	str	r3, [sp, #72]	; 0x48
   889a0:	460b      	mov	r3, r1
   889a2:	2b00      	cmp	r3, #0
   889a4:	f2c0 85ba 	blt.w	8951c <_svfprintf_r+0x1968>
   889a8:	2200      	movs	r2, #0
   889aa:	930f      	str	r3, [sp, #60]	; 0x3c
   889ac:	921e      	str	r2, [sp, #120]	; 0x78
   889ae:	920d      	str	r2, [sp, #52]	; 0x34
   889b0:	900c      	str	r0, [sp, #48]	; 0x30
   889b2:	2d46      	cmp	r5, #70	; 0x46
   889b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   889b6:	f000 8407 	beq.w	891c8 <_svfprintf_r+0x1614>
   889ba:	2d45      	cmp	r5, #69	; 0x45
   889bc:	f04f 0002 	mov.w	r0, #2
   889c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   889c2:	f040 83e7 	bne.w	89194 <_svfprintf_r+0x15e0>
   889c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   889c8:	9000      	str	r0, [sp, #0]
   889ca:	1c4c      	adds	r4, r1, #1
   889cc:	a928      	add	r1, sp, #160	; 0xa0
   889ce:	a825      	add	r0, sp, #148	; 0x94
   889d0:	9104      	str	r1, [sp, #16]
   889d2:	a924      	add	r1, sp, #144	; 0x90
   889d4:	e9cd 1002 	strd	r1, r0, [sp, #8]
   889d8:	9401      	str	r4, [sp, #4]
   889da:	4648      	mov	r0, r9
   889dc:	f001 feb0 	bl	8a740 <_dtoa_r>
   889e0:	4607      	mov	r7, r0
   889e2:	4404      	add	r4, r0
   889e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   889e6:	9d07      	ldr	r5, [sp, #28]
   889e8:	9307      	str	r3, [sp, #28]
   889ea:	2200      	movs	r2, #0
   889ec:	2300      	movs	r3, #0
   889ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   889f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   889f2:	f005 fc2d 	bl	8e250 <__aeabi_dcmpeq>
   889f6:	2800      	cmp	r0, #0
   889f8:	f000 8398 	beq.w	8912c <_svfprintf_r+0x1578>
   889fc:	4623      	mov	r3, r4
   889fe:	1bdb      	subs	r3, r3, r7
   88a00:	9313      	str	r3, [sp, #76]	; 0x4c
   88a02:	9b08      	ldr	r3, [sp, #32]
   88a04:	2b47      	cmp	r3, #71	; 0x47
   88a06:	f000 835e 	beq.w	890c6 <_svfprintf_r+0x1512>
   88a0a:	9b08      	ldr	r3, [sp, #32]
   88a0c:	2b46      	cmp	r3, #70	; 0x46
   88a0e:	f000 840b 	beq.w	89228 <_svfprintf_r+0x1674>
   88a12:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88a14:	9310      	str	r3, [sp, #64]	; 0x40
   88a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88a18:	9a08      	ldr	r2, [sp, #32]
   88a1a:	3b01      	subs	r3, #1
   88a1c:	2a41      	cmp	r2, #65	; 0x41
   88a1e:	9324      	str	r3, [sp, #144]	; 0x90
   88a20:	f000 85ad 	beq.w	8957e <_svfprintf_r+0x19ca>
   88a24:	2100      	movs	r1, #0
   88a26:	b2f2      	uxtb	r2, r6
   88a28:	2b00      	cmp	r3, #0
   88a2a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   88a2e:	bfb6      	itet	lt
   88a30:	222d      	movlt	r2, #45	; 0x2d
   88a32:	222b      	movge	r2, #43	; 0x2b
   88a34:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   88a36:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   88a3a:	bfb8      	it	lt
   88a3c:	f1c3 0301 	rsblt	r3, r3, #1
   88a40:	2b09      	cmp	r3, #9
   88a42:	f340 85a2 	ble.w	8958a <_svfprintf_r+0x19d6>
   88a46:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   88a4a:	4672      	mov	r2, lr
   88a4c:	469c      	mov	ip, r3
   88a4e:	4cbf      	ldr	r4, [pc, #764]	; (88d4c <_svfprintf_r+0x1198>)
   88a50:	4660      	mov	r0, ip
   88a52:	4611      	mov	r1, r2
   88a54:	fb84 230c 	smull	r2, r3, r4, ip
   88a58:	ea4f 72ec 	mov.w	r2, ip, asr #31
   88a5c:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   88a60:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   88a64:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   88a68:	3330      	adds	r3, #48	; 0x30
   88a6a:	2863      	cmp	r0, #99	; 0x63
   88a6c:	4694      	mov	ip, r2
   88a6e:	f801 3c01 	strb.w	r3, [r1, #-1]
   88a72:	f101 32ff 	add.w	r2, r1, #4294967295
   88a76:	dceb      	bgt.n	88a50 <_svfprintf_r+0xe9c>
   88a78:	4663      	mov	r3, ip
   88a7a:	3330      	adds	r3, #48	; 0x30
   88a7c:	b2d8      	uxtb	r0, r3
   88a7e:	1e8b      	subs	r3, r1, #2
   88a80:	459e      	cmp	lr, r3
   88a82:	f802 0c01 	strb.w	r0, [r2, #-1]
   88a86:	f240 862c 	bls.w	896e2 <_svfprintf_r+0x1b2e>
   88a8a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   88a8e:	e001      	b.n	88a94 <_svfprintf_r+0xee0>
   88a90:	f812 0b01 	ldrb.w	r0, [r2], #1
   88a94:	4596      	cmp	lr, r2
   88a96:	f803 0b01 	strb.w	r0, [r3], #1
   88a9a:	d1f9      	bne.n	88a90 <_svfprintf_r+0xedc>
   88a9c:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   88aa0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88aa4:	1a5b      	subs	r3, r3, r1
   88aa6:	4413      	add	r3, r2
   88aa8:	aa26      	add	r2, sp, #152	; 0x98
   88aaa:	1a9b      	subs	r3, r3, r2
   88aac:	931b      	str	r3, [sp, #108]	; 0x6c
   88aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88ab0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88ab2:	2b01      	cmp	r3, #1
   88ab4:	441a      	add	r2, r3
   88ab6:	920c      	str	r2, [sp, #48]	; 0x30
   88ab8:	f340 85cc 	ble.w	89654 <_svfprintf_r+0x1aa0>
   88abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88abe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88ac0:	4413      	add	r3, r2
   88ac2:	930c      	str	r3, [sp, #48]	; 0x30
   88ac4:	2300      	movs	r3, #0
   88ac6:	9312      	str	r3, [sp, #72]	; 0x48
   88ac8:	9316      	str	r3, [sp, #88]	; 0x58
   88aca:	9310      	str	r3, [sp, #64]	; 0x40
   88acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88ace:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   88ad2:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   88ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88ada:	9207      	str	r2, [sp, #28]
   88adc:	9308      	str	r3, [sp, #32]
   88ade:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88ae0:	2b00      	cmp	r3, #0
   88ae2:	f040 8317 	bne.w	89114 <_svfprintf_r+0x1560>
   88ae6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88aea:	9309      	str	r3, [sp, #36]	; 0x24
   88aec:	f7ff ba86 	b.w	87ffc <_svfprintf_r+0x448>
   88af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88af2:	2301      	movs	r3, #1
   88af4:	f852 4b04 	ldr.w	r4, [r2], #4
   88af8:	2500      	movs	r5, #0
   88afa:	920e      	str	r2, [sp, #56]	; 0x38
   88afc:	f7ff b96b 	b.w	87dd6 <_svfprintf_r+0x222>
   88b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88b02:	f853 4b04 	ldr.w	r4, [r3], #4
   88b06:	17e5      	asrs	r5, r4, #31
   88b08:	930e      	str	r3, [sp, #56]	; 0x38
   88b0a:	4622      	mov	r2, r4
   88b0c:	462b      	mov	r3, r5
   88b0e:	f7ff b933 	b.w	87d78 <_svfprintf_r+0x1c4>
   88b12:	9b07      	ldr	r3, [sp, #28]
   88b14:	9308      	str	r3, [sp, #32]
   88b16:	f7ff bae0 	b.w	880da <_svfprintf_r+0x526>
   88b1a:	4b8d      	ldr	r3, [pc, #564]	; (88d50 <_svfprintf_r+0x119c>)
   88b1c:	9319      	str	r3, [sp, #100]	; 0x64
   88b1e:	9b07      	ldr	r3, [sp, #28]
   88b20:	0699      	lsls	r1, r3, #26
   88b22:	f140 80fe 	bpl.w	88d22 <_svfprintf_r+0x116e>
   88b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88b28:	3307      	adds	r3, #7
   88b2a:	f023 0307 	bic.w	r3, r3, #7
   88b2e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88b32:	930e      	str	r3, [sp, #56]	; 0x38
   88b34:	9a07      	ldr	r2, [sp, #28]
   88b36:	07d7      	lsls	r7, r2, #31
   88b38:	d50a      	bpl.n	88b50 <_svfprintf_r+0xf9c>
   88b3a:	ea54 0305 	orrs.w	r3, r4, r5
   88b3e:	d007      	beq.n	88b50 <_svfprintf_r+0xf9c>
   88b40:	2330      	movs	r3, #48	; 0x30
   88b42:	f042 0202 	orr.w	r2, r2, #2
   88b46:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   88b4a:	9207      	str	r2, [sp, #28]
   88b4c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88b50:	9a07      	ldr	r2, [sp, #28]
   88b52:	2302      	movs	r3, #2
   88b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   88b58:	9208      	str	r2, [sp, #32]
   88b5a:	f7ff b93c 	b.w	87dd6 <_svfprintf_r+0x222>
   88b5e:	4b7d      	ldr	r3, [pc, #500]	; (88d54 <_svfprintf_r+0x11a0>)
   88b60:	9319      	str	r3, [sp, #100]	; 0x64
   88b62:	e7dc      	b.n	88b1e <_svfprintf_r+0xf6a>
   88b64:	f043 0320 	orr.w	r3, r3, #32
   88b68:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88b6c:	9307      	str	r3, [sp, #28]
   88b6e:	f10b 0b01 	add.w	fp, fp, #1
   88b72:	f7ff b86a 	b.w	87c4a <_svfprintf_r+0x96>
   88b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   88b7a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88b7e:	9307      	str	r3, [sp, #28]
   88b80:	f10b 0b01 	add.w	fp, fp, #1
   88b84:	f7ff b861 	b.w	87c4a <_svfprintf_r+0x96>
   88b88:	4651      	mov	r1, sl
   88b8a:	4648      	mov	r0, r9
   88b8c:	aa2a      	add	r2, sp, #168	; 0xa8
   88b8e:	f004 fc5d 	bl	8d44c <__ssprint_r>
   88b92:	2800      	cmp	r0, #0
   88b94:	f47f ac56 	bne.w	88444 <_svfprintf_r+0x890>
   88b98:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88b9a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88b9e:	f7ff bbad 	b.w	882fc <_svfprintf_r+0x748>
   88ba2:	2140      	movs	r1, #64	; 0x40
   88ba4:	4648      	mov	r0, r9
   88ba6:	f003 fa79 	bl	8c09c <_malloc_r>
   88baa:	f8cb 0000 	str.w	r0, [fp]
   88bae:	f8cb 0010 	str.w	r0, [fp, #16]
   88bb2:	2800      	cmp	r0, #0
   88bb4:	f000 858d 	beq.w	896d2 <_svfprintf_r+0x1b1e>
   88bb8:	2340      	movs	r3, #64	; 0x40
   88bba:	f8cb 3014 	str.w	r3, [fp, #20]
   88bbe:	f7ff b811 	b.w	87be4 <_svfprintf_r+0x30>
   88bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88bc4:	463a      	mov	r2, r7
   88bc6:	2b06      	cmp	r3, #6
   88bc8:	bf28      	it	cs
   88bca:	2306      	movcs	r3, #6
   88bcc:	9709      	str	r7, [sp, #36]	; 0x24
   88bce:	9712      	str	r7, [sp, #72]	; 0x48
   88bd0:	9716      	str	r7, [sp, #88]	; 0x58
   88bd2:	9710      	str	r7, [sp, #64]	; 0x40
   88bd4:	970d      	str	r7, [sp, #52]	; 0x34
   88bd6:	9308      	str	r3, [sp, #32]
   88bd8:	4f5f      	ldr	r7, [pc, #380]	; (88d58 <_svfprintf_r+0x11a4>)
   88bda:	940e      	str	r4, [sp, #56]	; 0x38
   88bdc:	930c      	str	r3, [sp, #48]	; 0x30
   88bde:	f7ff ba0d 	b.w	87ffc <_svfprintf_r+0x448>
   88be2:	2b10      	cmp	r3, #16
   88be4:	f340 8558 	ble.w	89698 <_svfprintf_r+0x1ae4>
   88be8:	4651      	mov	r1, sl
   88bea:	4a5c      	ldr	r2, [pc, #368]	; (88d5c <_svfprintf_r+0x11a8>)
   88bec:	46ca      	mov	sl, r9
   88bee:	9709      	str	r7, [sp, #36]	; 0x24
   88bf0:	2610      	movs	r6, #16
   88bf2:	4617      	mov	r7, r2
   88bf4:	4689      	mov	r9, r1
   88bf6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88bf8:	920f      	str	r2, [sp, #60]	; 0x3c
   88bfa:	e005      	b.n	88c08 <_svfprintf_r+0x1054>
   88bfc:	f108 0808 	add.w	r8, r8, #8
   88c00:	3d10      	subs	r5, #16
   88c02:	2d10      	cmp	r5, #16
   88c04:	f340 81fa 	ble.w	88ffc <_svfprintf_r+0x1448>
   88c08:	3301      	adds	r3, #1
   88c0a:	3410      	adds	r4, #16
   88c0c:	2b07      	cmp	r3, #7
   88c0e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88c12:	e9c8 7600 	strd	r7, r6, [r8]
   88c16:	ddf1      	ble.n	88bfc <_svfprintf_r+0x1048>
   88c18:	4649      	mov	r1, r9
   88c1a:	4650      	mov	r0, sl
   88c1c:	aa2a      	add	r2, sp, #168	; 0xa8
   88c1e:	f004 fc15 	bl	8d44c <__ssprint_r>
   88c22:	2800      	cmp	r0, #0
   88c24:	f040 83fd 	bne.w	89422 <_svfprintf_r+0x186e>
   88c28:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88c2c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88c30:	e7e6      	b.n	88c00 <_svfprintf_r+0x104c>
   88c32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88c34:	4642      	mov	r2, r8
   88c36:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88c3a:	18fb      	adds	r3, r7, r3
   88c3c:	9309      	str	r3, [sp, #36]	; 0x24
   88c3e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   88c42:	970f      	str	r7, [sp, #60]	; 0x3c
   88c44:	4620      	mov	r0, r4
   88c46:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   88c4a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   88c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88c4e:	f1b8 0f00 	cmp.w	r8, #0
   88c52:	d02d      	beq.n	88cb0 <_svfprintf_r+0x10fc>
   88c54:	bb7b      	cbnz	r3, 88cb6 <_svfprintf_r+0x1102>
   88c56:	3f01      	subs	r7, #1
   88c58:	f108 38ff 	add.w	r8, r8, #4294967295
   88c5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88c5e:	991c      	ldr	r1, [sp, #112]	; 0x70
   88c60:	3301      	adds	r3, #1
   88c62:	4458      	add	r0, fp
   88c64:	2b07      	cmp	r3, #7
   88c66:	e9c2 1b00 	strd	r1, fp, [r2]
   88c6a:	902c      	str	r0, [sp, #176]	; 0xb0
   88c6c:	932b      	str	r3, [sp, #172]	; 0xac
   88c6e:	dc62      	bgt.n	88d36 <_svfprintf_r+0x1182>
   88c70:	3208      	adds	r2, #8
   88c72:	9909      	ldr	r1, [sp, #36]	; 0x24
   88c74:	783b      	ldrb	r3, [r7, #0]
   88c76:	1b8d      	subs	r5, r1, r6
   88c78:	429d      	cmp	r5, r3
   88c7a:	bfa8      	it	ge
   88c7c:	461d      	movge	r5, r3
   88c7e:	2d00      	cmp	r5, #0
   88c80:	dd0b      	ble.n	88c9a <_svfprintf_r+0x10e6>
   88c82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88c84:	4428      	add	r0, r5
   88c86:	3301      	adds	r3, #1
   88c88:	2b07      	cmp	r3, #7
   88c8a:	e9c2 6500 	strd	r6, r5, [r2]
   88c8e:	902c      	str	r0, [sp, #176]	; 0xb0
   88c90:	932b      	str	r3, [sp, #172]	; 0xac
   88c92:	f300 8111 	bgt.w	88eb8 <_svfprintf_r+0x1304>
   88c96:	783b      	ldrb	r3, [r7, #0]
   88c98:	3208      	adds	r2, #8
   88c9a:	2d00      	cmp	r5, #0
   88c9c:	bfb4      	ite	lt
   88c9e:	461d      	movlt	r5, r3
   88ca0:	1b5d      	subge	r5, r3, r5
   88ca2:	2d00      	cmp	r5, #0
   88ca4:	dc0b      	bgt.n	88cbe <_svfprintf_r+0x110a>
   88ca6:	441e      	add	r6, r3
   88ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88caa:	f1b8 0f00 	cmp.w	r8, #0
   88cae:	d1d1      	bne.n	88c54 <_svfprintf_r+0x10a0>
   88cb0:	2b00      	cmp	r3, #0
   88cb2:	f000 81f9 	beq.w	890a8 <_svfprintf_r+0x14f4>
   88cb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88cb8:	3b01      	subs	r3, #1
   88cba:	9312      	str	r3, [sp, #72]	; 0x48
   88cbc:	e7ce      	b.n	88c5c <_svfprintf_r+0x10a8>
   88cbe:	2d10      	cmp	r5, #16
   88cc0:	f340 84c5 	ble.w	8964e <_svfprintf_r+0x1a9a>
   88cc4:	992b      	ldr	r1, [sp, #172]	; 0xac
   88cc6:	2410      	movs	r4, #16
   88cc8:	460b      	mov	r3, r1
   88cca:	e004      	b.n	88cd6 <_svfprintf_r+0x1122>
   88ccc:	3d10      	subs	r5, #16
   88cce:	2d10      	cmp	r5, #16
   88cd0:	f102 0208 	add.w	r2, r2, #8
   88cd4:	dd16      	ble.n	88d04 <_svfprintf_r+0x1150>
   88cd6:	3301      	adds	r3, #1
   88cd8:	4920      	ldr	r1, [pc, #128]	; (88d5c <_svfprintf_r+0x11a8>)
   88cda:	3010      	adds	r0, #16
   88cdc:	2b07      	cmp	r3, #7
   88cde:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   88ce2:	e9c2 1400 	strd	r1, r4, [r2]
   88ce6:	ddf1      	ble.n	88ccc <_svfprintf_r+0x1118>
   88ce8:	4651      	mov	r1, sl
   88cea:	4648      	mov	r0, r9
   88cec:	aa2a      	add	r2, sp, #168	; 0xa8
   88cee:	f004 fbad 	bl	8d44c <__ssprint_r>
   88cf2:	2800      	cmp	r0, #0
   88cf4:	f47f aba6 	bne.w	88444 <_svfprintf_r+0x890>
   88cf8:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   88cfc:	3d10      	subs	r5, #16
   88cfe:	2d10      	cmp	r5, #16
   88d00:	aa2d      	add	r2, sp, #180	; 0xb4
   88d02:	dce8      	bgt.n	88cd6 <_svfprintf_r+0x1122>
   88d04:	4619      	mov	r1, r3
   88d06:	1c4b      	adds	r3, r1, #1
   88d08:	4914      	ldr	r1, [pc, #80]	; (88d5c <_svfprintf_r+0x11a8>)
   88d0a:	4428      	add	r0, r5
   88d0c:	2b07      	cmp	r3, #7
   88d0e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   88d12:	e9c2 1500 	strd	r1, r5, [r2]
   88d16:	f300 8215 	bgt.w	89144 <_svfprintf_r+0x1590>
   88d1a:	783b      	ldrb	r3, [r7, #0]
   88d1c:	3208      	adds	r2, #8
   88d1e:	441e      	add	r6, r3
   88d20:	e7c2      	b.n	88ca8 <_svfprintf_r+0x10f4>
   88d22:	9b07      	ldr	r3, [sp, #28]
   88d24:	06da      	lsls	r2, r3, #27
   88d26:	f140 8084 	bpl.w	88e32 <_svfprintf_r+0x127e>
   88d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88d2c:	2500      	movs	r5, #0
   88d2e:	f853 4b04 	ldr.w	r4, [r3], #4
   88d32:	930e      	str	r3, [sp, #56]	; 0x38
   88d34:	e6fe      	b.n	88b34 <_svfprintf_r+0xf80>
   88d36:	4651      	mov	r1, sl
   88d38:	4648      	mov	r0, r9
   88d3a:	aa2a      	add	r2, sp, #168	; 0xa8
   88d3c:	f004 fb86 	bl	8d44c <__ssprint_r>
   88d40:	2800      	cmp	r0, #0
   88d42:	f47f ab7f 	bne.w	88444 <_svfprintf_r+0x890>
   88d46:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88d48:	aa2d      	add	r2, sp, #180	; 0xb4
   88d4a:	e792      	b.n	88c72 <_svfprintf_r+0x10be>
   88d4c:	66666667 	.word	0x66666667
   88d50:	0008e5d0 	.word	0x0008e5d0
   88d54:	0008e5e4 	.word	0x0008e5e4
   88d58:	0008e5f8 	.word	0x0008e5f8
   88d5c:	0008e614 	.word	0x0008e614
   88d60:	2200      	movs	r2, #0
   88d62:	9b08      	ldr	r3, [sp, #32]
   88d64:	f8cd b01c 	str.w	fp, [sp, #28]
   88d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   88d6c:	960c      	str	r6, [sp, #48]	; 0x30
   88d6e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   88d72:	4693      	mov	fp, r2
   88d74:	46ca      	mov	sl, r9
   88d76:	461e      	mov	r6, r3
   88d78:	46c1      	mov	r9, r8
   88d7a:	af56      	add	r7, sp, #344	; 0x158
   88d7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   88d80:	e00b      	b.n	88d9a <_svfprintf_r+0x11e6>
   88d82:	220a      	movs	r2, #10
   88d84:	2300      	movs	r3, #0
   88d86:	4620      	mov	r0, r4
   88d88:	4629      	mov	r1, r5
   88d8a:	f7fe fb9f 	bl	874cc <__aeabi_uldivmod>
   88d8e:	2d00      	cmp	r5, #0
   88d90:	bf08      	it	eq
   88d92:	2c0a      	cmpeq	r4, #10
   88d94:	d31b      	bcc.n	88dce <_svfprintf_r+0x121a>
   88d96:	4604      	mov	r4, r0
   88d98:	460d      	mov	r5, r1
   88d9a:	220a      	movs	r2, #10
   88d9c:	2300      	movs	r3, #0
   88d9e:	4620      	mov	r0, r4
   88da0:	4629      	mov	r1, r5
   88da2:	f7fe fb93 	bl	874cc <__aeabi_uldivmod>
   88da6:	3230      	adds	r2, #48	; 0x30
   88da8:	f807 2c01 	strb.w	r2, [r7, #-1]
   88dac:	f10b 0b01 	add.w	fp, fp, #1
   88db0:	3f01      	subs	r7, #1
   88db2:	2e00      	cmp	r6, #0
   88db4:	d0e5      	beq.n	88d82 <_svfprintf_r+0x11ce>
   88db6:	f898 3000 	ldrb.w	r3, [r8]
   88dba:	459b      	cmp	fp, r3
   88dbc:	d1e1      	bne.n	88d82 <_svfprintf_r+0x11ce>
   88dbe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   88dc2:	d0de      	beq.n	88d82 <_svfprintf_r+0x11ce>
   88dc4:	2d00      	cmp	r5, #0
   88dc6:	bf08      	it	eq
   88dc8:	2c0a      	cmpeq	r4, #10
   88dca:	f080 8128 	bcs.w	8901e <_svfprintf_r+0x146a>
   88dce:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   88dd2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   88dd6:	46c8      	mov	r8, r9
   88dd8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   88dda:	46d1      	mov	r9, sl
   88ddc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88de0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   88de4:	f7ff bb9f 	b.w	88526 <_svfprintf_r+0x972>
   88de8:	4651      	mov	r1, sl
   88dea:	4648      	mov	r0, r9
   88dec:	aa2a      	add	r2, sp, #168	; 0xa8
   88dee:	931e      	str	r3, [sp, #120]	; 0x78
   88df0:	f004 fb2c 	bl	8d44c <__ssprint_r>
   88df4:	2800      	cmp	r0, #0
   88df6:	f47f ab25 	bne.w	88444 <_svfprintf_r+0x890>
   88dfa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88dfe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88e00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88e02:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88e06:	f7ff b84a 	b.w	87e9e <_svfprintf_r+0x2ea>
   88e0a:	2001      	movs	r0, #1
   88e0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88e0e:	49c5      	ldr	r1, [pc, #788]	; (89124 <_svfprintf_r+0x1570>)
   88e10:	4403      	add	r3, r0
   88e12:	4404      	add	r4, r0
   88e14:	2b07      	cmp	r3, #7
   88e16:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88e1a:	e9c8 1000 	strd	r1, r0, [r8]
   88e1e:	f73f abdf 	bgt.w	885e0 <_svfprintf_r+0xa2c>
   88e22:	f108 0808 	add.w	r8, r8, #8
   88e26:	f7ff bbe7 	b.w	885f8 <_svfprintf_r+0xa44>
   88e2a:	46d1      	mov	r9, sl
   88e2c:	46b3      	mov	fp, r6
   88e2e:	f7ff bb0a 	b.w	88446 <_svfprintf_r+0x892>
   88e32:	9b07      	ldr	r3, [sp, #28]
   88e34:	065b      	lsls	r3, r3, #25
   88e36:	f140 80cb 	bpl.w	88fd0 <_svfprintf_r+0x141c>
   88e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88e3c:	2500      	movs	r5, #0
   88e3e:	f853 4b04 	ldr.w	r4, [r3], #4
   88e42:	930e      	str	r3, [sp, #56]	; 0x38
   88e44:	b2a4      	uxth	r4, r4
   88e46:	e675      	b.n	88b34 <_svfprintf_r+0xf80>
   88e48:	4651      	mov	r1, sl
   88e4a:	4648      	mov	r0, r9
   88e4c:	aa2a      	add	r2, sp, #168	; 0xa8
   88e4e:	f004 fafd 	bl	8d44c <__ssprint_r>
   88e52:	2800      	cmp	r0, #0
   88e54:	f47f aaf6 	bne.w	88444 <_svfprintf_r+0x890>
   88e58:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88e5a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88e5e:	f7ff ba3a 	b.w	882d6 <_svfprintf_r+0x722>
   88e62:	46d1      	mov	r9, sl
   88e64:	46da      	mov	sl, fp
   88e66:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   88e6a:	3501      	adds	r5, #1
   88e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88e6e:	4434      	add	r4, r6
   88e70:	2d07      	cmp	r5, #7
   88e72:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88e76:	e9c8 3600 	strd	r3, r6, [r8]
   88e7a:	f77f ab24 	ble.w	884c6 <_svfprintf_r+0x912>
   88e7e:	4651      	mov	r1, sl
   88e80:	4648      	mov	r0, r9
   88e82:	aa2a      	add	r2, sp, #168	; 0xa8
   88e84:	f004 fae2 	bl	8d44c <__ssprint_r>
   88e88:	2800      	cmp	r0, #0
   88e8a:	f47f aadb 	bne.w	88444 <_svfprintf_r+0x890>
   88e8e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88e92:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88e96:	f7ff bb18 	b.w	884ca <_svfprintf_r+0x916>
   88e9a:	4aa3      	ldr	r2, [pc, #652]	; (89128 <_svfprintf_r+0x1574>)
   88e9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88e9e:	920f      	str	r2, [sp, #60]	; 0x3c
   88ea0:	3301      	adds	r3, #1
   88ea2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88ea4:	442c      	add	r4, r5
   88ea6:	2b07      	cmp	r3, #7
   88ea8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88eac:	e9c8 2500 	strd	r2, r5, [r8]
   88eb0:	f77f a82d 	ble.w	87f0e <_svfprintf_r+0x35a>
   88eb4:	f7ff bbc2 	b.w	8863c <_svfprintf_r+0xa88>
   88eb8:	4651      	mov	r1, sl
   88eba:	4648      	mov	r0, r9
   88ebc:	aa2a      	add	r2, sp, #168	; 0xa8
   88ebe:	f004 fac5 	bl	8d44c <__ssprint_r>
   88ec2:	2800      	cmp	r0, #0
   88ec4:	f47f aabe 	bne.w	88444 <_svfprintf_r+0x890>
   88ec8:	783b      	ldrb	r3, [r7, #0]
   88eca:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88ecc:	aa2d      	add	r2, sp, #180	; 0xb4
   88ece:	e6e4      	b.n	88c9a <_svfprintf_r+0x10e6>
   88ed0:	4651      	mov	r1, sl
   88ed2:	4648      	mov	r0, r9
   88ed4:	aa2a      	add	r2, sp, #168	; 0xa8
   88ed6:	f004 fab9 	bl	8d44c <__ssprint_r>
   88eda:	2800      	cmp	r0, #0
   88edc:	f47f aab2 	bne.w	88444 <_svfprintf_r+0x890>
   88ee0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88ee2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88ee6:	f7fe bffd 	b.w	87ee4 <_svfprintf_r+0x330>
   88eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88eec:	990a      	ldr	r1, [sp, #40]	; 0x28
   88eee:	f853 2b04 	ldr.w	r2, [r3], #4
   88ef2:	465f      	mov	r7, fp
   88ef4:	6011      	str	r1, [r2, #0]
   88ef6:	930e      	str	r3, [sp, #56]	; 0x38
   88ef8:	f7ff b82a 	b.w	87f50 <_svfprintf_r+0x39c>
   88efc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88efe:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88f00:	3301      	adds	r3, #1
   88f02:	9818      	ldr	r0, [sp, #96]	; 0x60
   88f04:	440c      	add	r4, r1
   88f06:	2b07      	cmp	r3, #7
   88f08:	e9c8 0100 	strd	r0, r1, [r8]
   88f0c:	942c      	str	r4, [sp, #176]	; 0xb0
   88f0e:	932b      	str	r3, [sp, #172]	; 0xac
   88f10:	f300 80ac 	bgt.w	8906c <_svfprintf_r+0x14b8>
   88f14:	f108 0808 	add.w	r8, r8, #8
   88f18:	2a00      	cmp	r2, #0
   88f1a:	f6bf ab85 	bge.w	88628 <_svfprintf_r+0xa74>
   88f1e:	4255      	negs	r5, r2
   88f20:	3210      	adds	r2, #16
   88f22:	f280 83d3 	bge.w	896cc <_svfprintf_r+0x1b18>
   88f26:	4651      	mov	r1, sl
   88f28:	4a7f      	ldr	r2, [pc, #508]	; (89128 <_svfprintf_r+0x1574>)
   88f2a:	46ca      	mov	sl, r9
   88f2c:	9709      	str	r7, [sp, #36]	; 0x24
   88f2e:	2610      	movs	r6, #16
   88f30:	4617      	mov	r7, r2
   88f32:	4689      	mov	r9, r1
   88f34:	920f      	str	r2, [sp, #60]	; 0x3c
   88f36:	e005      	b.n	88f44 <_svfprintf_r+0x1390>
   88f38:	f108 0808 	add.w	r8, r8, #8
   88f3c:	3d10      	subs	r5, #16
   88f3e:	2d10      	cmp	r5, #16
   88f40:	f340 82aa 	ble.w	89498 <_svfprintf_r+0x18e4>
   88f44:	3301      	adds	r3, #1
   88f46:	3410      	adds	r4, #16
   88f48:	2b07      	cmp	r3, #7
   88f4a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88f4e:	e9c8 7600 	strd	r7, r6, [r8]
   88f52:	ddf1      	ble.n	88f38 <_svfprintf_r+0x1384>
   88f54:	4649      	mov	r1, r9
   88f56:	4650      	mov	r0, sl
   88f58:	aa2a      	add	r2, sp, #168	; 0xa8
   88f5a:	f004 fa77 	bl	8d44c <__ssprint_r>
   88f5e:	2800      	cmp	r0, #0
   88f60:	f040 825f 	bne.w	89422 <_svfprintf_r+0x186e>
   88f64:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88f68:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f6c:	e7e6      	b.n	88f3c <_svfprintf_r+0x1388>
   88f6e:	4638      	mov	r0, r7
   88f70:	f004 fa0a 	bl	8d388 <strlen>
   88f74:	462b      	mov	r3, r5
   88f76:	4602      	mov	r2, r0
   88f78:	9509      	str	r5, [sp, #36]	; 0x24
   88f7a:	f7ff b894 	b.w	880a6 <_svfprintf_r+0x4f2>
   88f7e:	9b07      	ldr	r3, [sp, #28]
   88f80:	2500      	movs	r5, #0
   88f82:	f413 7f00 	tst.w	r3, #512	; 0x200
   88f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88f88:	f853 4b04 	ldr.w	r4, [r3], #4
   88f8c:	930e      	str	r3, [sp, #56]	; 0x38
   88f8e:	bf18      	it	ne
   88f90:	b2e4      	uxtbne	r4, r4
   88f92:	f7fe bf1b 	b.w	87dcc <_svfprintf_r+0x218>
   88f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88f98:	9b08      	ldr	r3, [sp, #32]
   88f9a:	f852 4b04 	ldr.w	r4, [r2], #4
   88f9e:	f413 7f00 	tst.w	r3, #512	; 0x200
   88fa2:	f04f 0500 	mov.w	r5, #0
   88fa6:	f04f 0301 	mov.w	r3, #1
   88faa:	920e      	str	r2, [sp, #56]	; 0x38
   88fac:	bf18      	it	ne
   88fae:	b2e4      	uxtbne	r4, r4
   88fb0:	f7fe bf11 	b.w	87dd6 <_svfprintf_r+0x222>
   88fb4:	9b07      	ldr	r3, [sp, #28]
   88fb6:	f413 7f00 	tst.w	r3, #512	; 0x200
   88fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88fbc:	f853 4b04 	ldr.w	r4, [r3], #4
   88fc0:	bf18      	it	ne
   88fc2:	b264      	sxtbne	r4, r4
   88fc4:	17e5      	asrs	r5, r4, #31
   88fc6:	930e      	str	r3, [sp, #56]	; 0x38
   88fc8:	4622      	mov	r2, r4
   88fca:	462b      	mov	r3, r5
   88fcc:	f7fe bed4 	b.w	87d78 <_svfprintf_r+0x1c4>
   88fd0:	9b07      	ldr	r3, [sp, #28]
   88fd2:	2500      	movs	r5, #0
   88fd4:	f413 7f00 	tst.w	r3, #512	; 0x200
   88fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88fda:	f853 4b04 	ldr.w	r4, [r3], #4
   88fde:	930e      	str	r3, [sp, #56]	; 0x38
   88fe0:	bf18      	it	ne
   88fe2:	b2e4      	uxtbne	r4, r4
   88fe4:	e5a6      	b.n	88b34 <_svfprintf_r+0xf80>
   88fe6:	4b50      	ldr	r3, [pc, #320]	; (89128 <_svfprintf_r+0x1574>)
   88fe8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88fea:	930f      	str	r3, [sp, #60]	; 0x3c
   88fec:	f7ff ba15 	b.w	8841a <_svfprintf_r+0x866>
   88ff0:	232d      	movs	r3, #45	; 0x2d
   88ff2:	461a      	mov	r2, r3
   88ff4:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   88ff8:	f7fe bfee 	b.w	87fd8 <_svfprintf_r+0x424>
   88ffc:	464a      	mov	r2, r9
   88ffe:	46d1      	mov	r9, sl
   89000:	4692      	mov	sl, r2
   89002:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89004:	3301      	adds	r3, #1
   89006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89008:	442c      	add	r4, r5
   8900a:	2b07      	cmp	r3, #7
   8900c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   89010:	e9c8 2500 	strd	r2, r5, [r8]
   89014:	dc3b      	bgt.n	8908e <_svfprintf_r+0x14da>
   89016:	f108 0808 	add.w	r8, r8, #8
   8901a:	f7ff bb8c 	b.w	88736 <_svfprintf_r+0xb82>
   8901e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   89020:	991c      	ldr	r1, [sp, #112]	; 0x70
   89022:	1aff      	subs	r7, r7, r3
   89024:	461a      	mov	r2, r3
   89026:	4638      	mov	r0, r7
   89028:	f004 f9dc 	bl	8d3e4 <strncpy>
   8902c:	f898 3001 	ldrb.w	r3, [r8, #1]
   89030:	b10b      	cbz	r3, 89036 <_svfprintf_r+0x1482>
   89032:	f108 0801 	add.w	r8, r8, #1
   89036:	220a      	movs	r2, #10
   89038:	2300      	movs	r3, #0
   8903a:	4620      	mov	r0, r4
   8903c:	4629      	mov	r1, r5
   8903e:	f7fe fa45 	bl	874cc <__aeabi_uldivmod>
   89042:	f04f 0b00 	mov.w	fp, #0
   89046:	e6a6      	b.n	88d96 <_svfprintf_r+0x11e2>
   89048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8904a:	18bd      	adds	r5, r7, r2
   8904c:	1bad      	subs	r5, r5, r6
   8904e:	1ad3      	subs	r3, r2, r3
   89050:	429d      	cmp	r5, r3
   89052:	bfa8      	it	ge
   89054:	461d      	movge	r5, r3
   89056:	f7ff bba0 	b.w	8879a <_svfprintf_r+0xbe6>
   8905a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8905c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8905e:	f853 2b04 	ldr.w	r2, [r3], #4
   89062:	465f      	mov	r7, fp
   89064:	8011      	strh	r1, [r2, #0]
   89066:	930e      	str	r3, [sp, #56]	; 0x38
   89068:	f7fe bf72 	b.w	87f50 <_svfprintf_r+0x39c>
   8906c:	4651      	mov	r1, sl
   8906e:	4648      	mov	r0, r9
   89070:	aa2a      	add	r2, sp, #168	; 0xa8
   89072:	f004 f9eb 	bl	8d44c <__ssprint_r>
   89076:	2800      	cmp	r0, #0
   89078:	f47f a9e4 	bne.w	88444 <_svfprintf_r+0x890>
   8907c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89080:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89082:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89086:	e747      	b.n	88f18 <_svfprintf_r+0x1364>
   89088:	2306      	movs	r3, #6
   8908a:	9309      	str	r3, [sp, #36]	; 0x24
   8908c:	e482      	b.n	88994 <_svfprintf_r+0xde0>
   8908e:	4651      	mov	r1, sl
   89090:	4648      	mov	r0, r9
   89092:	aa2a      	add	r2, sp, #168	; 0xa8
   89094:	f004 f9da 	bl	8d44c <__ssprint_r>
   89098:	2800      	cmp	r0, #0
   8909a:	f47f a9d3 	bne.w	88444 <_svfprintf_r+0x890>
   8909e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   890a0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   890a4:	f7ff bb47 	b.w	88736 <_svfprintf_r+0xb82>
   890a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   890aa:	971a      	str	r7, [sp, #104]	; 0x68
   890ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   890ae:	4690      	mov	r8, r2
   890b0:	18fb      	adds	r3, r7, r3
   890b2:	429e      	cmp	r6, r3
   890b4:	4632      	mov	r2, r6
   890b6:	bf28      	it	cs
   890b8:	461a      	movcs	r2, r3
   890ba:	4604      	mov	r4, r0
   890bc:	4616      	mov	r6, r2
   890be:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   890c2:	f7ff bb3f 	b.w	88744 <_svfprintf_r+0xb90>
   890c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   890c8:	1cd8      	adds	r0, r3, #3
   890ca:	9310      	str	r3, [sp, #64]	; 0x40
   890cc:	db02      	blt.n	890d4 <_svfprintf_r+0x1520>
   890ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   890d0:	4293      	cmp	r3, r2
   890d2:	dd04      	ble.n	890de <_svfprintf_r+0x152a>
   890d4:	3e02      	subs	r6, #2
   890d6:	f026 0320 	bic.w	r3, r6, #32
   890da:	9308      	str	r3, [sp, #32]
   890dc:	e49b      	b.n	88a16 <_svfprintf_r+0xe62>
   890de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   890e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   890e2:	428b      	cmp	r3, r1
   890e4:	f2c0 817a 	blt.w	893dc <_svfprintf_r+0x1828>
   890e8:	07ea      	lsls	r2, r5, #31
   890ea:	f140 8283 	bpl.w	895f4 <_svfprintf_r+0x1a40>
   890ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   890f0:	4413      	add	r3, r2
   890f2:	930c      	str	r3, [sp, #48]	; 0x30
   890f4:	056e      	lsls	r6, r5, #21
   890f6:	f140 8277 	bpl.w	895e8 <_svfprintf_r+0x1a34>
   890fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   890fc:	2b00      	cmp	r3, #0
   890fe:	f300 8210 	bgt.w	89522 <_svfprintf_r+0x196e>
   89102:	2667      	movs	r6, #103	; 0x67
   89104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89106:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8910a:	9308      	str	r3, [sp, #32]
   8910c:	2300      	movs	r3, #0
   8910e:	9312      	str	r3, [sp, #72]	; 0x48
   89110:	9316      	str	r3, [sp, #88]	; 0x58
   89112:	e4e4      	b.n	88ade <_svfprintf_r+0xf2a>
   89114:	222d      	movs	r2, #45	; 0x2d
   89116:	2300      	movs	r3, #0
   89118:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   8911c:	9309      	str	r3, [sp, #36]	; 0x24
   8911e:	f7fe bf70 	b.w	88002 <_svfprintf_r+0x44e>
   89122:	bf00      	nop
   89124:	0008e600 	.word	0x0008e600
   89128:	0008e614 	.word	0x0008e614
   8912c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8912e:	42a3      	cmp	r3, r4
   89130:	f4bf ac65 	bcs.w	889fe <_svfprintf_r+0xe4a>
   89134:	2130      	movs	r1, #48	; 0x30
   89136:	1c5a      	adds	r2, r3, #1
   89138:	9228      	str	r2, [sp, #160]	; 0xa0
   8913a:	7019      	strb	r1, [r3, #0]
   8913c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8913e:	429c      	cmp	r4, r3
   89140:	d8f9      	bhi.n	89136 <_svfprintf_r+0x1582>
   89142:	e45c      	b.n	889fe <_svfprintf_r+0xe4a>
   89144:	4651      	mov	r1, sl
   89146:	4648      	mov	r0, r9
   89148:	aa2a      	add	r2, sp, #168	; 0xa8
   8914a:	f004 f97f 	bl	8d44c <__ssprint_r>
   8914e:	2800      	cmp	r0, #0
   89150:	f47f a978 	bne.w	88444 <_svfprintf_r+0x890>
   89154:	783b      	ldrb	r3, [r7, #0]
   89156:	982c      	ldr	r0, [sp, #176]	; 0xb0
   89158:	aa2d      	add	r2, sp, #180	; 0xb4
   8915a:	441e      	add	r6, r3
   8915c:	e5a4      	b.n	88ca8 <_svfprintf_r+0x10f4>
   8915e:	4651      	mov	r1, sl
   89160:	4648      	mov	r0, r9
   89162:	aa2a      	add	r2, sp, #168	; 0xa8
   89164:	f004 f972 	bl	8d44c <__ssprint_r>
   89168:	2800      	cmp	r0, #0
   8916a:	f47f a96b 	bne.w	88444 <_svfprintf_r+0x890>
   8916e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89170:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89174:	f7ff bad7 	b.w	88726 <_svfprintf_r+0xb72>
   89178:	4651      	mov	r1, sl
   8917a:	4648      	mov	r0, r9
   8917c:	aa2a      	add	r2, sp, #168	; 0xa8
   8917e:	f004 f965 	bl	8d44c <__ssprint_r>
   89182:	2800      	cmp	r0, #0
   89184:	f47f a95e 	bne.w	88444 <_svfprintf_r+0x890>
   89188:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8918a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8918c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89190:	f7ff baee 	b.w	88770 <_svfprintf_r+0xbbc>
   89194:	9c09      	ldr	r4, [sp, #36]	; 0x24
   89196:	a928      	add	r1, sp, #160	; 0xa0
   89198:	e9cd 0400 	strd	r0, r4, [sp]
   8919c:	9104      	str	r1, [sp, #16]
   8919e:	a825      	add	r0, sp, #148	; 0x94
   891a0:	a924      	add	r1, sp, #144	; 0x90
   891a2:	e9cd 1002 	strd	r1, r0, [sp, #8]
   891a6:	4648      	mov	r0, r9
   891a8:	f001 faca 	bl	8a740 <_dtoa_r>
   891ac:	2d47      	cmp	r5, #71	; 0x47
   891ae:	4607      	mov	r7, r0
   891b0:	d119      	bne.n	891e6 <_svfprintf_r+0x1632>
   891b2:	9d07      	ldr	r5, [sp, #28]
   891b4:	462b      	mov	r3, r5
   891b6:	07db      	lsls	r3, r3, #31
   891b8:	f100 812a 	bmi.w	89410 <_svfprintf_r+0x185c>
   891bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   891be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   891c0:	9207      	str	r2, [sp, #28]
   891c2:	2247      	movs	r2, #71	; 0x47
   891c4:	9208      	str	r2, [sp, #32]
   891c6:	e41a      	b.n	889fe <_svfprintf_r+0xe4a>
   891c8:	2003      	movs	r0, #3
   891ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
   891cc:	a928      	add	r1, sp, #160	; 0xa0
   891ce:	e9cd 0400 	strd	r0, r4, [sp]
   891d2:	9104      	str	r1, [sp, #16]
   891d4:	a825      	add	r0, sp, #148	; 0x94
   891d6:	a924      	add	r1, sp, #144	; 0x90
   891d8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   891dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   891de:	4648      	mov	r0, r9
   891e0:	f001 faae 	bl	8a740 <_dtoa_r>
   891e4:	4607      	mov	r7, r0
   891e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   891e8:	2d46      	cmp	r5, #70	; 0x46
   891ea:	eb07 0403 	add.w	r4, r7, r3
   891ee:	f47f abf9 	bne.w	889e4 <_svfprintf_r+0xe30>
   891f2:	783b      	ldrb	r3, [r7, #0]
   891f4:	2b30      	cmp	r3, #48	; 0x30
   891f6:	f000 821c 	beq.w	89632 <_svfprintf_r+0x1a7e>
   891fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   891fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   891fe:	9d07      	ldr	r5, [sp, #28]
   89200:	441c      	add	r4, r3
   89202:	9207      	str	r2, [sp, #28]
   89204:	f7ff bbf1 	b.w	889ea <_svfprintf_r+0xe36>
   89208:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8920c:	f7ff b9c3 	b.w	88596 <_svfprintf_r+0x9e2>
   89210:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89212:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   89216:	9308      	str	r3, [sp, #32]
   89218:	930c      	str	r3, [sp, #48]	; 0x30
   8921a:	9009      	str	r0, [sp, #36]	; 0x24
   8921c:	940e      	str	r4, [sp, #56]	; 0x38
   8921e:	9012      	str	r0, [sp, #72]	; 0x48
   89220:	9016      	str	r0, [sp, #88]	; 0x58
   89222:	9010      	str	r0, [sp, #64]	; 0x40
   89224:	f7fe beea 	b.w	87ffc <_svfprintf_r+0x448>
   89228:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8922a:	2a00      	cmp	r2, #0
   8922c:	9210      	str	r2, [sp, #64]	; 0x40
   8922e:	f340 821b 	ble.w	89668 <_svfprintf_r+0x1ab4>
   89232:	9909      	ldr	r1, [sp, #36]	; 0x24
   89234:	f005 0301 	and.w	r3, r5, #1
   89238:	430b      	orrs	r3, r1
   8923a:	f040 819a 	bne.w	89572 <_svfprintf_r+0x19be>
   8923e:	2666      	movs	r6, #102	; 0x66
   89240:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89242:	930c      	str	r3, [sp, #48]	; 0x30
   89244:	056a      	lsls	r2, r5, #21
   89246:	f100 816d 	bmi.w	89524 <_svfprintf_r+0x1970>
   8924a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8924c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   89250:	9308      	str	r3, [sp, #32]
   89252:	e75b      	b.n	8910c <_svfprintf_r+0x1558>
   89254:	4651      	mov	r1, sl
   89256:	4648      	mov	r0, r9
   89258:	aa2a      	add	r2, sp, #168	; 0xa8
   8925a:	f004 f8f7 	bl	8d44c <__ssprint_r>
   8925e:	2800      	cmp	r0, #0
   89260:	f47f a8f0 	bne.w	88444 <_svfprintf_r+0x890>
   89264:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89266:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   89268:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8926a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8926e:	1ad3      	subs	r3, r2, r3
   89270:	f7ff ba93 	b.w	8879a <_svfprintf_r+0xbe6>
   89274:	2330      	movs	r3, #48	; 0x30
   89276:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8927a:	2358      	movs	r3, #88	; 0x58
   8927c:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   89280:	9b07      	ldr	r3, [sp, #28]
   89282:	f043 0402 	orr.w	r4, r3, #2
   89286:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89288:	2b63      	cmp	r3, #99	; 0x63
   8928a:	f300 80f2 	bgt.w	89472 <_svfprintf_r+0x18be>
   8928e:	2300      	movs	r3, #0
   89290:	af3d      	add	r7, sp, #244	; 0xf4
   89292:	930d      	str	r3, [sp, #52]	; 0x34
   89294:	9b07      	ldr	r3, [sp, #28]
   89296:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   8929a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   8929e:	9312      	str	r3, [sp, #72]	; 0x48
   892a0:	4613      	mov	r3, r2
   892a2:	2b00      	cmp	r3, #0
   892a4:	f026 0520 	bic.w	r5, r6, #32
   892a8:	9407      	str	r4, [sp, #28]
   892aa:	f2c0 808d 	blt.w	893c8 <_svfprintf_r+0x1814>
   892ae:	930f      	str	r3, [sp, #60]	; 0x3c
   892b0:	2300      	movs	r3, #0
   892b2:	9508      	str	r5, [sp, #32]
   892b4:	910c      	str	r1, [sp, #48]	; 0x30
   892b6:	931e      	str	r3, [sp, #120]	; 0x78
   892b8:	2e61      	cmp	r6, #97	; 0x61
   892ba:	f000 817d 	beq.w	895b8 <_svfprintf_r+0x1a04>
   892be:	2e41      	cmp	r6, #65	; 0x41
   892c0:	f47f ab77 	bne.w	889b2 <_svfprintf_r+0xdfe>
   892c4:	aa24      	add	r2, sp, #144	; 0x90
   892c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   892c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   892ca:	f003 ffcd 	bl	8d268 <frexp>
   892ce:	2200      	movs	r2, #0
   892d0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   892d4:	f004 fd54 	bl	8dd80 <__aeabi_dmul>
   892d8:	4604      	mov	r4, r0
   892da:	460d      	mov	r5, r1
   892dc:	2200      	movs	r2, #0
   892de:	2300      	movs	r3, #0
   892e0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   892e4:	f004 ffb4 	bl	8e250 <__aeabi_dcmpeq>
   892e8:	b108      	cbz	r0, 892ee <_svfprintf_r+0x173a>
   892ea:	2301      	movs	r3, #1
   892ec:	9324      	str	r3, [sp, #144]	; 0x90
   892ee:	4bae      	ldr	r3, [pc, #696]	; (895a8 <_svfprintf_r+0x19f4>)
   892f0:	930c      	str	r3, [sp, #48]	; 0x30
   892f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   892f4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   892f8:	3b01      	subs	r3, #1
   892fa:	9613      	str	r6, [sp, #76]	; 0x4c
   892fc:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   89300:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   89304:	9721      	str	r7, [sp, #132]	; 0x84
   89306:	46ba      	mov	sl, r7
   89308:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   8930c:	4699      	mov	r9, r3
   8930e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   89312:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   89316:	e006      	b.n	89326 <_svfprintf_r+0x1772>
   89318:	2200      	movs	r2, #0
   8931a:	2300      	movs	r3, #0
   8931c:	f004 ff98 	bl	8e250 <__aeabi_dcmpeq>
   89320:	f109 39ff 	add.w	r9, r9, #4294967295
   89324:	b9e8      	cbnz	r0, 89362 <_svfprintf_r+0x17ae>
   89326:	2200      	movs	r2, #0
   89328:	4ba0      	ldr	r3, [pc, #640]	; (895ac <_svfprintf_r+0x19f8>)
   8932a:	4630      	mov	r0, r6
   8932c:	4639      	mov	r1, r7
   8932e:	f004 fd27 	bl	8dd80 <__aeabi_dmul>
   89332:	460d      	mov	r5, r1
   89334:	4604      	mov	r4, r0
   89336:	f004 ffd3 	bl	8e2e0 <__aeabi_d2iz>
   8933a:	4680      	mov	r8, r0
   8933c:	f004 fcb6 	bl	8dcac <__aeabi_i2d>
   89340:	460b      	mov	r3, r1
   89342:	4602      	mov	r2, r0
   89344:	4629      	mov	r1, r5
   89346:	4620      	mov	r0, r4
   89348:	f004 fb62 	bl	8da10 <__aeabi_dsub>
   8934c:	f81b 3008 	ldrb.w	r3, [fp, r8]
   89350:	f1b9 3fff 	cmp.w	r9, #4294967295
   89354:	4655      	mov	r5, sl
   89356:	4606      	mov	r6, r0
   89358:	460f      	mov	r7, r1
   8935a:	464c      	mov	r4, r9
   8935c:	f80a 3b01 	strb.w	r3, [sl], #1
   89360:	d1da      	bne.n	89318 <_svfprintf_r+0x1764>
   89362:	4630      	mov	r0, r6
   89364:	4639      	mov	r1, r7
   89366:	2200      	movs	r2, #0
   89368:	4b91      	ldr	r3, [pc, #580]	; (895b0 <_svfprintf_r+0x19fc>)
   8936a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   8936e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   89370:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   89374:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   89378:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8937c:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   89380:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   89384:	9f21      	ldr	r7, [sp, #132]	; 0x84
   89386:	f004 ff8b 	bl	8e2a0 <__aeabi_dcmpgt>
   8938a:	2800      	cmp	r0, #0
   8938c:	d155      	bne.n	8943a <_svfprintf_r+0x1886>
   8938e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89392:	2200      	movs	r2, #0
   89394:	4b86      	ldr	r3, [pc, #536]	; (895b0 <_svfprintf_r+0x19fc>)
   89396:	f004 ff5b 	bl	8e250 <__aeabi_dcmpeq>
   8939a:	b110      	cbz	r0, 893a2 <_svfprintf_r+0x17ee>
   8939c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8939e:	07db      	lsls	r3, r3, #31
   893a0:	d44b      	bmi.n	8943a <_svfprintf_r+0x1886>
   893a2:	2c00      	cmp	r4, #0
   893a4:	db08      	blt.n	893b8 <_svfprintf_r+0x1804>
   893a6:	2230      	movs	r2, #48	; 0x30
   893a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   893aa:	1c63      	adds	r3, r4, #1
   893ac:	440b      	add	r3, r1
   893ae:	f801 2b01 	strb.w	r2, [r1], #1
   893b2:	428b      	cmp	r3, r1
   893b4:	d1fb      	bne.n	893ae <_svfprintf_r+0x17fa>
   893b6:	910f      	str	r1, [sp, #60]	; 0x3c
   893b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   893ba:	9d07      	ldr	r5, [sp, #28]
   893bc:	1bdb      	subs	r3, r3, r7
   893be:	9313      	str	r3, [sp, #76]	; 0x4c
   893c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   893c2:	9307      	str	r3, [sp, #28]
   893c4:	f7ff bb1d 	b.w	88a02 <_svfprintf_r+0xe4e>
   893c8:	9508      	str	r5, [sp, #32]
   893ca:	232d      	movs	r3, #45	; 0x2d
   893cc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   893d0:	931e      	str	r3, [sp, #120]	; 0x78
   893d2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   893d6:	910c      	str	r1, [sp, #48]	; 0x30
   893d8:	930f      	str	r3, [sp, #60]	; 0x3c
   893da:	e76d      	b.n	892b8 <_svfprintf_r+0x1704>
   893dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   893de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   893e0:	189a      	adds	r2, r3, r2
   893e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   893e4:	920c      	str	r2, [sp, #48]	; 0x30
   893e6:	2b00      	cmp	r3, #0
   893e8:	f340 811a 	ble.w	89620 <_svfprintf_r+0x1a6c>
   893ec:	2667      	movs	r6, #103	; 0x67
   893ee:	e729      	b.n	89244 <_svfprintf_r+0x1690>
   893f0:	2300      	movs	r3, #0
   893f2:	9309      	str	r3, [sp, #36]	; 0x24
   893f4:	f7fe bc2b 	b.w	87c4e <_svfprintf_r+0x9a>
   893f8:	4648      	mov	r0, r9
   893fa:	4651      	mov	r1, sl
   893fc:	aa2a      	add	r2, sp, #168	; 0xa8
   893fe:	f004 f825 	bl	8d44c <__ssprint_r>
   89402:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89406:	f7fe bdae 	b.w	87f66 <_svfprintf_r+0x3b2>
   8940a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8940c:	f7ff b95f 	b.w	886ce <_svfprintf_r+0xb1a>
   89410:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89412:	9d07      	ldr	r5, [sp, #28]
   89414:	18fc      	adds	r4, r7, r3
   89416:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89418:	9307      	str	r3, [sp, #28]
   8941a:	2347      	movs	r3, #71	; 0x47
   8941c:	9308      	str	r3, [sp, #32]
   8941e:	f7ff bae4 	b.w	889ea <_svfprintf_r+0xe36>
   89422:	46cb      	mov	fp, r9
   89424:	46d1      	mov	r9, sl
   89426:	f7ff b80e 	b.w	88446 <_svfprintf_r+0x892>
   8942a:	46d1      	mov	r9, sl
   8942c:	f7ff b80b 	b.w	88446 <_svfprintf_r+0x892>
   89430:	4b60      	ldr	r3, [pc, #384]	; (895b4 <_svfprintf_r+0x1a00>)
   89432:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   89434:	930f      	str	r3, [sp, #60]	; 0x3c
   89436:	f7fe bfb7 	b.w	883a8 <_svfprintf_r+0x7f4>
   8943a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8943c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8943e:	9528      	str	r5, [sp, #160]	; 0xa0
   89440:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   89444:	7bc9      	ldrb	r1, [r1, #15]
   89446:	428a      	cmp	r2, r1
   89448:	f040 812a 	bne.w	896a0 <_svfprintf_r+0x1aec>
   8944c:	2030      	movs	r0, #48	; 0x30
   8944e:	f803 0c01 	strb.w	r0, [r3, #-1]
   89452:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89454:	1e5a      	subs	r2, r3, #1
   89456:	9228      	str	r2, [sp, #160]	; 0xa0
   89458:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   8945c:	4291      	cmp	r1, r2
   8945e:	d0f6      	beq.n	8944e <_svfprintf_r+0x189a>
   89460:	2a39      	cmp	r2, #57	; 0x39
   89462:	bf0b      	itete	eq
   89464:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   89466:	3201      	addne	r2, #1
   89468:	7a92      	ldrbeq	r2, [r2, #10]
   8946a:	b2d2      	uxtbne	r2, r2
   8946c:	f803 2c01 	strb.w	r2, [r3, #-1]
   89470:	e7a2      	b.n	893b8 <_svfprintf_r+0x1804>
   89472:	4648      	mov	r0, r9
   89474:	1c59      	adds	r1, r3, #1
   89476:	f002 fe11 	bl	8c09c <_malloc_r>
   8947a:	4607      	mov	r7, r0
   8947c:	2800      	cmp	r0, #0
   8947e:	f000 811d 	beq.w	896bc <_svfprintf_r+0x1b08>
   89482:	900d      	str	r0, [sp, #52]	; 0x34
   89484:	e706      	b.n	89294 <_svfprintf_r+0x16e0>
   89486:	2330      	movs	r3, #48	; 0x30
   89488:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8948c:	2378      	movs	r3, #120	; 0x78
   8948e:	e6f5      	b.n	8927c <_svfprintf_r+0x16c8>
   89490:	9b07      	ldr	r3, [sp, #28]
   89492:	9308      	str	r3, [sp, #32]
   89494:	f7ff b894 	b.w	885c0 <_svfprintf_r+0xa0c>
   89498:	464a      	mov	r2, r9
   8949a:	46d1      	mov	r9, sl
   8949c:	4692      	mov	sl, r2
   8949e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   894a0:	3301      	adds	r3, #1
   894a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   894a4:	442c      	add	r4, r5
   894a6:	2b07      	cmp	r3, #7
   894a8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   894ac:	e9c8 2500 	strd	r2, r5, [r8]
   894b0:	f77f a8b8 	ble.w	88624 <_svfprintf_r+0xa70>
   894b4:	4651      	mov	r1, sl
   894b6:	4648      	mov	r0, r9
   894b8:	aa2a      	add	r2, sp, #168	; 0xa8
   894ba:	f003 ffc7 	bl	8d44c <__ssprint_r>
   894be:	2800      	cmp	r0, #0
   894c0:	f47e afc0 	bne.w	88444 <_svfprintf_r+0x890>
   894c4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   894c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   894cc:	f7ff b8ac 	b.w	88628 <_svfprintf_r+0xa74>
   894d0:	2b00      	cmp	r3, #0
   894d2:	bf08      	it	eq
   894d4:	2301      	moveq	r3, #1
   894d6:	9309      	str	r3, [sp, #36]	; 0x24
   894d8:	9b07      	ldr	r3, [sp, #28]
   894da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   894de:	9312      	str	r3, [sp, #72]	; 0x48
   894e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   894e2:	2b00      	cmp	r3, #0
   894e4:	930c      	str	r3, [sp, #48]	; 0x30
   894e6:	f2c0 80bd 	blt.w	89664 <_svfprintf_r+0x1ab0>
   894ea:	2402      	movs	r4, #2
   894ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   894ee:	a828      	add	r0, sp, #160	; 0xa0
   894f0:	aa25      	add	r2, sp, #148	; 0x94
   894f2:	ab24      	add	r3, sp, #144	; 0x90
   894f4:	e9cd 2003 	strd	r2, r0, [sp, #12]
   894f8:	e9cd 4500 	strd	r4, r5, [sp]
   894fc:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   89500:	9302      	str	r3, [sp, #8]
   89502:	4622      	mov	r2, r4
   89504:	462b      	mov	r3, r5
   89506:	4648      	mov	r0, r9
   89508:	911e      	str	r1, [sp, #120]	; 0x78
   8950a:	f001 f919 	bl	8a740 <_dtoa_r>
   8950e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89510:	4607      	mov	r7, r0
   89512:	930f      	str	r3, [sp, #60]	; 0x3c
   89514:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   89516:	940c      	str	r4, [sp, #48]	; 0x30
   89518:	930d      	str	r3, [sp, #52]	; 0x34
   8951a:	e64a      	b.n	891b2 <_svfprintf_r+0x15fe>
   8951c:	2300      	movs	r3, #0
   8951e:	930d      	str	r3, [sp, #52]	; 0x34
   89520:	e753      	b.n	893ca <_svfprintf_r+0x1816>
   89522:	2667      	movs	r6, #103	; 0x67
   89524:	991a      	ldr	r1, [sp, #104]	; 0x68
   89526:	780b      	ldrb	r3, [r1, #0]
   89528:	2bff      	cmp	r3, #255	; 0xff
   8952a:	f000 80de 	beq.w	896ea <_svfprintf_r+0x1b36>
   8952e:	2400      	movs	r4, #0
   89530:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89532:	4620      	mov	r0, r4
   89534:	e003      	b.n	8953e <_svfprintf_r+0x198a>
   89536:	3001      	adds	r0, #1
   89538:	3101      	adds	r1, #1
   8953a:	2bff      	cmp	r3, #255	; 0xff
   8953c:	d008      	beq.n	89550 <_svfprintf_r+0x199c>
   8953e:	4293      	cmp	r3, r2
   89540:	da06      	bge.n	89550 <_svfprintf_r+0x199c>
   89542:	1ad2      	subs	r2, r2, r3
   89544:	784b      	ldrb	r3, [r1, #1]
   89546:	2b00      	cmp	r3, #0
   89548:	d1f5      	bne.n	89536 <_svfprintf_r+0x1982>
   8954a:	780b      	ldrb	r3, [r1, #0]
   8954c:	3401      	adds	r4, #1
   8954e:	e7f4      	b.n	8953a <_svfprintf_r+0x1986>
   89550:	911a      	str	r1, [sp, #104]	; 0x68
   89552:	9210      	str	r2, [sp, #64]	; 0x40
   89554:	9016      	str	r0, [sp, #88]	; 0x58
   89556:	9412      	str	r4, [sp, #72]	; 0x48
   89558:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8955a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8955c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8955e:	4413      	add	r3, r2
   89560:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   89562:	fb02 1303 	mla	r3, r2, r3, r1
   89566:	930c      	str	r3, [sp, #48]	; 0x30
   89568:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8956c:	9308      	str	r3, [sp, #32]
   8956e:	f7ff bab6 	b.w	88ade <_svfprintf_r+0xf2a>
   89572:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89574:	2666      	movs	r6, #102	; 0x66
   89576:	18d3      	adds	r3, r2, r3
   89578:	4419      	add	r1, r3
   8957a:	910c      	str	r1, [sp, #48]	; 0x30
   8957c:	e662      	b.n	89244 <_svfprintf_r+0x1690>
   8957e:	f106 020f 	add.w	r2, r6, #15
   89582:	2101      	movs	r1, #1
   89584:	b2d2      	uxtb	r2, r2
   89586:	f7ff ba4f 	b.w	88a28 <_svfprintf_r+0xe74>
   8958a:	2900      	cmp	r1, #0
   8958c:	d167      	bne.n	8965e <_svfprintf_r+0x1aaa>
   8958e:	2230      	movs	r2, #48	; 0x30
   89590:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   89594:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   89598:	3330      	adds	r3, #48	; 0x30
   8959a:	f802 3b01 	strb.w	r3, [r2], #1
   8959e:	ab26      	add	r3, sp, #152	; 0x98
   895a0:	1ad3      	subs	r3, r2, r3
   895a2:	931b      	str	r3, [sp, #108]	; 0x6c
   895a4:	f7ff ba83 	b.w	88aae <_svfprintf_r+0xefa>
   895a8:	0008e5e4 	.word	0x0008e5e4
   895ac:	40300000 	.word	0x40300000
   895b0:	3fe00000 	.word	0x3fe00000
   895b4:	0008e614 	.word	0x0008e614
   895b8:	aa24      	add	r2, sp, #144	; 0x90
   895ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   895bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   895be:	f003 fe53 	bl	8d268 <frexp>
   895c2:	2200      	movs	r2, #0
   895c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   895c8:	f004 fbda 	bl	8dd80 <__aeabi_dmul>
   895cc:	4604      	mov	r4, r0
   895ce:	460d      	mov	r5, r1
   895d0:	2200      	movs	r2, #0
   895d2:	2300      	movs	r3, #0
   895d4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   895d8:	f004 fe3a 	bl	8e250 <__aeabi_dcmpeq>
   895dc:	b108      	cbz	r0, 895e2 <_svfprintf_r+0x1a2e>
   895de:	2301      	movs	r3, #1
   895e0:	9324      	str	r3, [sp, #144]	; 0x90
   895e2:	4b44      	ldr	r3, [pc, #272]	; (896f4 <_svfprintf_r+0x1b40>)
   895e4:	930c      	str	r3, [sp, #48]	; 0x30
   895e6:	e684      	b.n	892f2 <_svfprintf_r+0x173e>
   895e8:	2667      	movs	r6, #103	; 0x67
   895ea:	e62e      	b.n	8924a <_svfprintf_r+0x1696>
   895ec:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   895f0:	f7fe bcb9 	b.w	87f66 <_svfprintf_r+0x3b2>
   895f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   895f6:	930c      	str	r3, [sp, #48]	; 0x30
   895f8:	e57c      	b.n	890f4 <_svfprintf_r+0x1540>
   895fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   895fc:	2003      	movs	r0, #3
   895fe:	2b00      	cmp	r3, #0
   89600:	bfb8      	it	lt
   89602:	232d      	movlt	r3, #45	; 0x2d
   89604:	f04f 0100 	mov.w	r1, #0
   89608:	bfba      	itte	lt
   8960a:	461a      	movlt	r2, r3
   8960c:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   89610:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   89614:	4f38      	ldr	r7, [pc, #224]	; (896f8 <_svfprintf_r+0x1b44>)
   89616:	4b39      	ldr	r3, [pc, #228]	; (896fc <_svfprintf_r+0x1b48>)
   89618:	9008      	str	r0, [sp, #32]
   8961a:	910d      	str	r1, [sp, #52]	; 0x34
   8961c:	f7fe bce2 	b.w	87fe4 <_svfprintf_r+0x430>
   89620:	f1c3 0301 	rsb	r3, r3, #1
   89624:	441a      	add	r2, r3
   89626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8962a:	2667      	movs	r6, #103	; 0x67
   8962c:	920c      	str	r2, [sp, #48]	; 0x30
   8962e:	9308      	str	r3, [sp, #32]
   89630:	e56c      	b.n	8910c <_svfprintf_r+0x1558>
   89632:	2200      	movs	r2, #0
   89634:	2300      	movs	r3, #0
   89636:	980c      	ldr	r0, [sp, #48]	; 0x30
   89638:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8963a:	f004 fe09 	bl	8e250 <__aeabi_dcmpeq>
   8963e:	2800      	cmp	r0, #0
   89640:	f47f addb 	bne.w	891fa <_svfprintf_r+0x1646>
   89644:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89646:	f1c3 0301 	rsb	r3, r3, #1
   8964a:	9324      	str	r3, [sp, #144]	; 0x90
   8964c:	e5d6      	b.n	891fc <_svfprintf_r+0x1648>
   8964e:	992b      	ldr	r1, [sp, #172]	; 0xac
   89650:	f7ff bb59 	b.w	88d06 <_svfprintf_r+0x1152>
   89654:	07e9      	lsls	r1, r5, #31
   89656:	f57f aa35 	bpl.w	88ac4 <_svfprintf_r+0xf10>
   8965a:	f7ff ba2f 	b.w	88abc <_svfprintf_r+0xf08>
   8965e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   89662:	e799      	b.n	89598 <_svfprintf_r+0x19e4>
   89664:	900d      	str	r0, [sp, #52]	; 0x34
   89666:	e6b0      	b.n	893ca <_svfprintf_r+0x1816>
   89668:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8966a:	f005 0501 	and.w	r5, r5, #1
   8966e:	4613      	mov	r3, r2
   89670:	432b      	orrs	r3, r5
   89672:	d104      	bne.n	8967e <_svfprintf_r+0x1aca>
   89674:	2301      	movs	r3, #1
   89676:	2666      	movs	r6, #102	; 0x66
   89678:	9308      	str	r3, [sp, #32]
   8967a:	930c      	str	r3, [sp, #48]	; 0x30
   8967c:	e546      	b.n	8910c <_svfprintf_r+0x1558>
   8967e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89680:	2666      	movs	r6, #102	; 0x66
   89682:	3301      	adds	r3, #1
   89684:	441a      	add	r2, r3
   89686:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8968a:	920c      	str	r2, [sp, #48]	; 0x30
   8968c:	9308      	str	r3, [sp, #32]
   8968e:	e53d      	b.n	8910c <_svfprintf_r+0x1558>
   89690:	4b1b      	ldr	r3, [pc, #108]	; (89700 <_svfprintf_r+0x1b4c>)
   89692:	930f      	str	r3, [sp, #60]	; 0x3c
   89694:	f7ff bbe9 	b.w	88e6a <_svfprintf_r+0x12b6>
   89698:	4a19      	ldr	r2, [pc, #100]	; (89700 <_svfprintf_r+0x1b4c>)
   8969a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8969c:	920f      	str	r2, [sp, #60]	; 0x3c
   8969e:	e4b1      	b.n	89004 <_svfprintf_r+0x1450>
   896a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   896a2:	e6dd      	b.n	89460 <_svfprintf_r+0x18ac>
   896a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   896a6:	f89b 6001 	ldrb.w	r6, [fp, #1]
   896aa:	f853 0b04 	ldr.w	r0, [r3], #4
   896ae:	4693      	mov	fp, r2
   896b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   896b4:	9009      	str	r0, [sp, #36]	; 0x24
   896b6:	930e      	str	r3, [sp, #56]	; 0x38
   896b8:	f7fe bac7 	b.w	87c4a <_svfprintf_r+0x96>
   896bc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   896c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   896c4:	f8aa 300c 	strh.w	r3, [sl, #12]
   896c8:	f7fe bc4d 	b.w	87f66 <_svfprintf_r+0x3b2>
   896cc:	4a0c      	ldr	r2, [pc, #48]	; (89700 <_svfprintf_r+0x1b4c>)
   896ce:	920f      	str	r2, [sp, #60]	; 0x3c
   896d0:	e6e6      	b.n	894a0 <_svfprintf_r+0x18ec>
   896d2:	230c      	movs	r3, #12
   896d4:	f04f 32ff 	mov.w	r2, #4294967295
   896d8:	f8c9 3000 	str.w	r3, [r9]
   896dc:	920a      	str	r2, [sp, #40]	; 0x28
   896de:	f7fe bc49 	b.w	87f74 <_svfprintf_r+0x3c0>
   896e2:	2302      	movs	r3, #2
   896e4:	931b      	str	r3, [sp, #108]	; 0x6c
   896e6:	f7ff b9e2 	b.w	88aae <_svfprintf_r+0xefa>
   896ea:	2300      	movs	r3, #0
   896ec:	9312      	str	r3, [sp, #72]	; 0x48
   896ee:	9316      	str	r3, [sp, #88]	; 0x58
   896f0:	e732      	b.n	89558 <_svfprintf_r+0x19a4>
   896f2:	bf00      	nop
   896f4:	0008e5d0 	.word	0x0008e5d0
   896f8:	0008e5c8 	.word	0x0008e5c8
   896fc:	0008e5cc 	.word	0x0008e5cc
   89700:	0008e614 	.word	0x0008e614

00089704 <__sprint_r.part.0>:
   89704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89708:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8970a:	4690      	mov	r8, r2
   8970c:	049c      	lsls	r4, r3, #18
   8970e:	d52d      	bpl.n	8976c <__sprint_r.part.0+0x68>
   89710:	6893      	ldr	r3, [r2, #8]
   89712:	6812      	ldr	r2, [r2, #0]
   89714:	b343      	cbz	r3, 89768 <__sprint_r.part.0+0x64>
   89716:	468b      	mov	fp, r1
   89718:	4606      	mov	r6, r0
   8971a:	f102 0908 	add.w	r9, r2, #8
   8971e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   89722:	ea5f 079a 	movs.w	r7, sl, lsr #2
   89726:	d015      	beq.n	89754 <__sprint_r.part.0+0x50>
   89728:	2400      	movs	r4, #0
   8972a:	3d04      	subs	r5, #4
   8972c:	e001      	b.n	89732 <__sprint_r.part.0+0x2e>
   8972e:	42a7      	cmp	r7, r4
   89730:	d00e      	beq.n	89750 <__sprint_r.part.0+0x4c>
   89732:	465a      	mov	r2, fp
   89734:	4630      	mov	r0, r6
   89736:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8973a:	f002 f8f9 	bl	8b930 <_fputwc_r>
   8973e:	1c43      	adds	r3, r0, #1
   89740:	f104 0401 	add.w	r4, r4, #1
   89744:	d1f3      	bne.n	8972e <__sprint_r.part.0+0x2a>
   89746:	2300      	movs	r3, #0
   89748:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8974c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89750:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89754:	f02a 0a03 	bic.w	sl, sl, #3
   89758:	eba3 030a 	sub.w	r3, r3, sl
   8975c:	f8c8 3008 	str.w	r3, [r8, #8]
   89760:	f109 0908 	add.w	r9, r9, #8
   89764:	2b00      	cmp	r3, #0
   89766:	d1da      	bne.n	8971e <__sprint_r.part.0+0x1a>
   89768:	2000      	movs	r0, #0
   8976a:	e7ec      	b.n	89746 <__sprint_r.part.0+0x42>
   8976c:	f002 fa6a 	bl	8bc44 <__sfvwrite_r>
   89770:	2300      	movs	r3, #0
   89772:	e9c8 3301 	strd	r3, r3, [r8, #4]
   89776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8977a:	bf00      	nop

0008977c <_vfiprintf_r>:
   8977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89780:	b0bb      	sub	sp, #236	; 0xec
   89782:	461c      	mov	r4, r3
   89784:	4689      	mov	r9, r1
   89786:	4690      	mov	r8, r2
   89788:	e9cd 3004 	strd	r3, r0, [sp, #16]
   8978c:	b118      	cbz	r0, 89796 <_vfiprintf_r+0x1a>
   8978e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89790:	2b00      	cmp	r3, #0
   89792:	f000 827a 	beq.w	89c8a <_vfiprintf_r+0x50e>
   89796:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8979a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8979e:	07de      	lsls	r6, r3, #31
   897a0:	b28a      	uxth	r2, r1
   897a2:	d402      	bmi.n	897aa <_vfiprintf_r+0x2e>
   897a4:	058d      	lsls	r5, r1, #22
   897a6:	f140 851a 	bpl.w	8a1de <_vfiprintf_r+0xa62>
   897aa:	0490      	lsls	r0, r2, #18
   897ac:	d40a      	bmi.n	897c4 <_vfiprintf_r+0x48>
   897ae:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   897b2:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   897b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   897ba:	f8a9 200c 	strh.w	r2, [r9, #12]
   897be:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   897c2:	b292      	uxth	r2, r2
   897c4:	0711      	lsls	r1, r2, #28
   897c6:	f140 80f6 	bpl.w	899b6 <_vfiprintf_r+0x23a>
   897ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   897ce:	2b00      	cmp	r3, #0
   897d0:	f000 80f1 	beq.w	899b6 <_vfiprintf_r+0x23a>
   897d4:	f002 031a 	and.w	r3, r2, #26
   897d8:	2b0a      	cmp	r3, #10
   897da:	f000 80fa 	beq.w	899d2 <_vfiprintf_r+0x256>
   897de:	2300      	movs	r3, #0
   897e0:	46cb      	mov	fp, r9
   897e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
   897e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   897ea:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   897ee:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897f2:	9303      	str	r3, [sp, #12]
   897f4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   897f8:	f898 3000 	ldrb.w	r3, [r8]
   897fc:	2b00      	cmp	r3, #0
   897fe:	f000 81ed 	beq.w	89bdc <_vfiprintf_r+0x460>
   89802:	4644      	mov	r4, r8
   89804:	e004      	b.n	89810 <_vfiprintf_r+0x94>
   89806:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8980a:	2b00      	cmp	r3, #0
   8980c:	f000 8127 	beq.w	89a5e <_vfiprintf_r+0x2e2>
   89810:	2b25      	cmp	r3, #37	; 0x25
   89812:	d1f8      	bne.n	89806 <_vfiprintf_r+0x8a>
   89814:	ebb4 0508 	subs.w	r5, r4, r8
   89818:	f040 8125 	bne.w	89a66 <_vfiprintf_r+0x2ea>
   8981c:	7823      	ldrb	r3, [r4, #0]
   8981e:	2b00      	cmp	r3, #0
   89820:	f000 81dc 	beq.w	89bdc <_vfiprintf_r+0x460>
   89824:	f04f 0200 	mov.w	r2, #0
   89828:	2300      	movs	r3, #0
   8982a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8982e:	f04f 32ff 	mov.w	r2, #4294967295
   89832:	252b      	movs	r5, #43	; 0x2b
   89834:	461f      	mov	r7, r3
   89836:	9302      	str	r3, [sp, #8]
   89838:	7863      	ldrb	r3, [r4, #1]
   8983a:	f104 0801 	add.w	r8, r4, #1
   8983e:	9200      	str	r2, [sp, #0]
   89840:	f108 0801 	add.w	r8, r8, #1
   89844:	f1a3 0220 	sub.w	r2, r3, #32
   89848:	2a5a      	cmp	r2, #90	; 0x5a
   8984a:	f200 8141 	bhi.w	89ad0 <_vfiprintf_r+0x354>
   8984e:	e8df f012 	tbh	[pc, r2, lsl #1]
   89852:	0272      	.short	0x0272
   89854:	013f013f 	.word	0x013f013f
   89858:	013f026d 	.word	0x013f026d
   8985c:	013f013f 	.word	0x013f013f
   89860:	013f024b 	.word	0x013f024b
   89864:	006a013f 	.word	0x006a013f
   89868:	013f0227 	.word	0x013f0227
   8986c:	02310222 	.word	0x02310222
   89870:	022c013f 	.word	0x022c013f
   89874:	005b005b 	.word	0x005b005b
   89878:	005b005b 	.word	0x005b005b
   8987c:	005b005b 	.word	0x005b005b
   89880:	005b005b 	.word	0x005b005b
   89884:	013f005b 	.word	0x013f005b
   89888:	013f013f 	.word	0x013f013f
   8988c:	013f013f 	.word	0x013f013f
   89890:	013f013f 	.word	0x013f013f
   89894:	013f013f 	.word	0x013f013f
   89898:	007a020e 	.word	0x007a020e
   8989c:	013f013f 	.word	0x013f013f
   898a0:	013f013f 	.word	0x013f013f
   898a4:	013f013f 	.word	0x013f013f
   898a8:	013f013f 	.word	0x013f013f
   898ac:	013f013f 	.word	0x013f013f
   898b0:	013f00d7 	.word	0x013f00d7
   898b4:	013f013f 	.word	0x013f013f
   898b8:	013f01f2 	.word	0x013f01f2
   898bc:	013f0297 	.word	0x013f0297
   898c0:	0500013f 	.word	0x0500013f
   898c4:	013f013f 	.word	0x013f013f
   898c8:	013f013f 	.word	0x013f013f
   898cc:	013f013f 	.word	0x013f013f
   898d0:	013f013f 	.word	0x013f013f
   898d4:	013f013f 	.word	0x013f013f
   898d8:	007c020e 	.word	0x007c020e
   898dc:	013f013f 	.word	0x013f013f
   898e0:	028a013f 	.word	0x028a013f
   898e4:	0075007c 	.word	0x0075007c
   898e8:	027d013f 	.word	0x027d013f
   898ec:	02b6013f 	.word	0x02b6013f
   898f0:	02a600d9 	.word	0x02a600d9
   898f4:	013f0075 	.word	0x013f0075
   898f8:	007201f2 	.word	0x007201f2
   898fc:	013f04fe 	.word	0x013f04fe
   89900:	051c013f 	.word	0x051c013f
   89904:	0072013f 	.word	0x0072013f
   89908:	2100      	movs	r1, #0
   8990a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8990e:	f818 3b01 	ldrb.w	r3, [r8], #1
   89912:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89916:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8991a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8991e:	2a09      	cmp	r2, #9
   89920:	d9f5      	bls.n	8990e <_vfiprintf_r+0x192>
   89922:	9102      	str	r1, [sp, #8]
   89924:	e78e      	b.n	89844 <_vfiprintf_r+0xc8>
   89926:	9b04      	ldr	r3, [sp, #16]
   89928:	f853 2b04 	ldr.w	r2, [r3], #4
   8992c:	2a00      	cmp	r2, #0
   8992e:	9202      	str	r2, [sp, #8]
   89930:	9304      	str	r3, [sp, #16]
   89932:	f2c0 81ad 	blt.w	89c90 <_vfiprintf_r+0x514>
   89936:	f898 3000 	ldrb.w	r3, [r8]
   8993a:	e781      	b.n	89840 <_vfiprintf_r+0xc4>
   8993c:	f898 3000 	ldrb.w	r3, [r8]
   89940:	f047 0720 	orr.w	r7, r7, #32
   89944:	e77c      	b.n	89840 <_vfiprintf_r+0xc4>
   89946:	f047 0710 	orr.w	r7, r7, #16
   8994a:	06bc      	lsls	r4, r7, #26
   8994c:	f140 8158 	bpl.w	89c00 <_vfiprintf_r+0x484>
   89950:	9c04      	ldr	r4, [sp, #16]
   89952:	3407      	adds	r4, #7
   89954:	f024 0307 	bic.w	r3, r4, #7
   89958:	4619      	mov	r1, r3
   8995a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8995e:	4614      	mov	r4, r2
   89960:	461d      	mov	r5, r3
   89962:	9104      	str	r1, [sp, #16]
   89964:	2a00      	cmp	r2, #0
   89966:	f173 0300 	sbcs.w	r3, r3, #0
   8996a:	f2c0 841e 	blt.w	8a1aa <_vfiprintf_r+0xa2e>
   8996e:	9b00      	ldr	r3, [sp, #0]
   89970:	3301      	adds	r3, #1
   89972:	f000 84f0 	beq.w	8a356 <_vfiprintf_r+0xbda>
   89976:	ea54 0305 	orrs.w	r3, r4, r5
   8997a:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   8997e:	f000 83fc 	beq.w	8a17a <_vfiprintf_r+0x9fe>
   89982:	2d00      	cmp	r5, #0
   89984:	bf08      	it	eq
   89986:	2c0a      	cmpeq	r4, #10
   89988:	f080 84a9 	bcs.w	8a2de <_vfiprintf_r+0xb62>
   8998c:	2301      	movs	r3, #1
   8998e:	464f      	mov	r7, r9
   89990:	3430      	adds	r4, #48	; 0x30
   89992:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   89996:	9301      	str	r3, [sp, #4]
   89998:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8999c:	e9dd 2100 	ldrd	r2, r1, [sp]
   899a0:	428a      	cmp	r2, r1
   899a2:	bfb8      	it	lt
   899a4:	460a      	movlt	r2, r1
   899a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   899aa:	4615      	mov	r5, r2
   899ac:	2b00      	cmp	r3, #0
   899ae:	f000 809d 	beq.w	89aec <_vfiprintf_r+0x370>
   899b2:	3501      	adds	r5, #1
   899b4:	e09a      	b.n	89aec <_vfiprintf_r+0x370>
   899b6:	4649      	mov	r1, r9
   899b8:	9805      	ldr	r0, [sp, #20]
   899ba:	f000 fdb9 	bl	8a530 <__swsetup_r>
   899be:	2800      	cmp	r0, #0
   899c0:	f040 854a 	bne.w	8a458 <_vfiprintf_r+0xcdc>
   899c4:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   899c8:	f002 031a 	and.w	r3, r2, #26
   899cc:	2b0a      	cmp	r3, #10
   899ce:	f47f af06 	bne.w	897de <_vfiprintf_r+0x62>
   899d2:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   899d6:	2b00      	cmp	r3, #0
   899d8:	f6ff af01 	blt.w	897de <_vfiprintf_r+0x62>
   899dc:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   899e0:	07de      	lsls	r6, r3, #31
   899e2:	d402      	bmi.n	899ea <_vfiprintf_r+0x26e>
   899e4:	0595      	lsls	r5, r2, #22
   899e6:	f140 850e 	bpl.w	8a406 <_vfiprintf_r+0xc8a>
   899ea:	4623      	mov	r3, r4
   899ec:	4642      	mov	r2, r8
   899ee:	4649      	mov	r1, r9
   899f0:	9805      	ldr	r0, [sp, #20]
   899f2:	f000 fd59 	bl	8a4a8 <__sbprintf>
   899f6:	9003      	str	r0, [sp, #12]
   899f8:	9803      	ldr	r0, [sp, #12]
   899fa:	b03b      	add	sp, #236	; 0xec
   899fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a00:	f047 0710 	orr.w	r7, r7, #16
   89a04:	06b8      	lsls	r0, r7, #26
   89a06:	9c04      	ldr	r4, [sp, #16]
   89a08:	f140 8109 	bpl.w	89c1e <_vfiprintf_r+0x4a2>
   89a0c:	3407      	adds	r4, #7
   89a0e:	f024 0307 	bic.w	r3, r4, #7
   89a12:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89a16:	9304      	str	r3, [sp, #16]
   89a18:	2300      	movs	r3, #0
   89a1a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89a1e:	f04f 0200 	mov.w	r2, #0
   89a22:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   89a26:	9a00      	ldr	r2, [sp, #0]
   89a28:	4611      	mov	r1, r2
   89a2a:	3101      	adds	r1, #1
   89a2c:	f000 81db 	beq.w	89de6 <_vfiprintf_r+0x66a>
   89a30:	ea54 0105 	orrs.w	r1, r4, r5
   89a34:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   89a38:	f040 81d4 	bne.w	89de4 <_vfiprintf_r+0x668>
   89a3c:	2a00      	cmp	r2, #0
   89a3e:	f040 848d 	bne.w	8a35c <_vfiprintf_r+0xbe0>
   89a42:	2b00      	cmp	r3, #0
   89a44:	f040 839e 	bne.w	8a184 <_vfiprintf_r+0xa08>
   89a48:	f019 0301 	ands.w	r3, r9, #1
   89a4c:	9301      	str	r3, [sp, #4]
   89a4e:	f000 83c3 	beq.w	8a1d8 <_vfiprintf_r+0xa5c>
   89a52:	2330      	movs	r3, #48	; 0x30
   89a54:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   89a58:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   89a5c:	e79e      	b.n	8999c <_vfiprintf_r+0x220>
   89a5e:	ebb4 0508 	subs.w	r5, r4, r8
   89a62:	f000 80bb 	beq.w	89bdc <_vfiprintf_r+0x460>
   89a66:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   89a6a:	3301      	adds	r3, #1
   89a6c:	442a      	add	r2, r5
   89a6e:	2b07      	cmp	r3, #7
   89a70:	e9ca 8500 	strd	r8, r5, [sl]
   89a74:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   89a78:	dc06      	bgt.n	89a88 <_vfiprintf_r+0x30c>
   89a7a:	f10a 0a08 	add.w	sl, sl, #8
   89a7e:	9a03      	ldr	r2, [sp, #12]
   89a80:	7823      	ldrb	r3, [r4, #0]
   89a82:	442a      	add	r2, r5
   89a84:	9203      	str	r2, [sp, #12]
   89a86:	e6ca      	b.n	8981e <_vfiprintf_r+0xa2>
   89a88:	2a00      	cmp	r2, #0
   89a8a:	f000 8372 	beq.w	8a172 <_vfiprintf_r+0x9f6>
   89a8e:	4659      	mov	r1, fp
   89a90:	9805      	ldr	r0, [sp, #20]
   89a92:	aa0e      	add	r2, sp, #56	; 0x38
   89a94:	f7ff fe36 	bl	89704 <__sprint_r.part.0>
   89a98:	b950      	cbnz	r0, 89ab0 <_vfiprintf_r+0x334>
   89a9a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89a9e:	e7ee      	b.n	89a7e <_vfiprintf_r+0x302>
   89aa0:	4659      	mov	r1, fp
   89aa2:	9805      	ldr	r0, [sp, #20]
   89aa4:	aa0e      	add	r2, sp, #56	; 0x38
   89aa6:	f7ff fe2d 	bl	89704 <__sprint_r.part.0>
   89aaa:	2800      	cmp	r0, #0
   89aac:	f000 808d 	beq.w	89bca <_vfiprintf_r+0x44e>
   89ab0:	46d9      	mov	r9, fp
   89ab2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89ab6:	f013 0f01 	tst.w	r3, #1
   89aba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89abe:	f000 8095 	beq.w	89bec <_vfiprintf_r+0x470>
   89ac2:	065b      	lsls	r3, r3, #25
   89ac4:	f100 84d4 	bmi.w	8a470 <_vfiprintf_r+0xcf4>
   89ac8:	9803      	ldr	r0, [sp, #12]
   89aca:	b03b      	add	sp, #236	; 0xec
   89acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ad0:	2b00      	cmp	r3, #0
   89ad2:	f000 8083 	beq.w	89bdc <_vfiprintf_r+0x460>
   89ad6:	2501      	movs	r5, #1
   89ad8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89adc:	f04f 0300 	mov.w	r3, #0
   89ae0:	9501      	str	r5, [sp, #4]
   89ae2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89ae6:	ae21      	add	r6, sp, #132	; 0x84
   89ae8:	2300      	movs	r3, #0
   89aea:	9300      	str	r3, [sp, #0]
   89aec:	f017 0302 	ands.w	r3, r7, #2
   89af0:	9307      	str	r3, [sp, #28]
   89af2:	bf18      	it	ne
   89af4:	3502      	addne	r5, #2
   89af6:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   89afa:	9306      	str	r3, [sp, #24]
   89afc:	d104      	bne.n	89b08 <_vfiprintf_r+0x38c>
   89afe:	9b02      	ldr	r3, [sp, #8]
   89b00:	1b5c      	subs	r4, r3, r5
   89b02:	2c00      	cmp	r4, #0
   89b04:	f300 8274 	bgt.w	89ff0 <_vfiprintf_r+0x874>
   89b08:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89b0c:	1c48      	adds	r0, r1, #1
   89b0e:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   89b12:	b174      	cbz	r4, 89b32 <_vfiprintf_r+0x3b6>
   89b14:	2101      	movs	r1, #1
   89b16:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   89b1a:	440a      	add	r2, r1
   89b1c:	2807      	cmp	r0, #7
   89b1e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   89b22:	e9ca 4100 	strd	r4, r1, [sl]
   89b26:	f300 8246 	bgt.w	89fb6 <_vfiprintf_r+0x83a>
   89b2a:	4601      	mov	r1, r0
   89b2c:	f10a 0a08 	add.w	sl, sl, #8
   89b30:	3001      	adds	r0, #1
   89b32:	9b07      	ldr	r3, [sp, #28]
   89b34:	b1c3      	cbz	r3, 89b68 <_vfiprintf_r+0x3ec>
   89b36:	2102      	movs	r1, #2
   89b38:	ab0d      	add	r3, sp, #52	; 0x34
   89b3a:	440a      	add	r2, r1
   89b3c:	2807      	cmp	r0, #7
   89b3e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   89b42:	e9ca 3100 	strd	r3, r1, [sl]
   89b46:	f340 824e 	ble.w	89fe6 <_vfiprintf_r+0x86a>
   89b4a:	2a00      	cmp	r2, #0
   89b4c:	f000 830c 	beq.w	8a168 <_vfiprintf_r+0x9ec>
   89b50:	4659      	mov	r1, fp
   89b52:	9805      	ldr	r0, [sp, #20]
   89b54:	aa0e      	add	r2, sp, #56	; 0x38
   89b56:	f7ff fdd5 	bl	89704 <__sprint_r.part.0>
   89b5a:	2800      	cmp	r0, #0
   89b5c:	d1a8      	bne.n	89ab0 <_vfiprintf_r+0x334>
   89b5e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89b62:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89b66:	1c48      	adds	r0, r1, #1
   89b68:	9b06      	ldr	r3, [sp, #24]
   89b6a:	2b80      	cmp	r3, #128	; 0x80
   89b6c:	f000 817e 	beq.w	89e6c <_vfiprintf_r+0x6f0>
   89b70:	e9dd 3400 	ldrd	r3, r4, [sp]
   89b74:	1b1c      	subs	r4, r3, r4
   89b76:	2c00      	cmp	r4, #0
   89b78:	f300 81d3 	bgt.w	89f22 <_vfiprintf_r+0x7a6>
   89b7c:	9b01      	ldr	r3, [sp, #4]
   89b7e:	2807      	cmp	r0, #7
   89b80:	441a      	add	r2, r3
   89b82:	e9ca 6300 	strd	r6, r3, [sl]
   89b86:	9210      	str	r2, [sp, #64]	; 0x40
   89b88:	900f      	str	r0, [sp, #60]	; 0x3c
   89b8a:	f340 816c 	ble.w	89e66 <_vfiprintf_r+0x6ea>
   89b8e:	2a00      	cmp	r2, #0
   89b90:	f000 8276 	beq.w	8a080 <_vfiprintf_r+0x904>
   89b94:	4659      	mov	r1, fp
   89b96:	9805      	ldr	r0, [sp, #20]
   89b98:	aa0e      	add	r2, sp, #56	; 0x38
   89b9a:	f7ff fdb3 	bl	89704 <__sprint_r.part.0>
   89b9e:	2800      	cmp	r0, #0
   89ba0:	d186      	bne.n	89ab0 <_vfiprintf_r+0x334>
   89ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89ba4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89ba8:	0779      	lsls	r1, r7, #29
   89baa:	d504      	bpl.n	89bb6 <_vfiprintf_r+0x43a>
   89bac:	9b02      	ldr	r3, [sp, #8]
   89bae:	1b5c      	subs	r4, r3, r5
   89bb0:	2c00      	cmp	r4, #0
   89bb2:	f300 826e 	bgt.w	8a092 <_vfiprintf_r+0x916>
   89bb6:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   89bba:	42a9      	cmp	r1, r5
   89bbc:	bfac      	ite	ge
   89bbe:	185b      	addge	r3, r3, r1
   89bc0:	195b      	addlt	r3, r3, r5
   89bc2:	9303      	str	r3, [sp, #12]
   89bc4:	2a00      	cmp	r2, #0
   89bc6:	f47f af6b 	bne.w	89aa0 <_vfiprintf_r+0x324>
   89bca:	2300      	movs	r3, #0
   89bcc:	930f      	str	r3, [sp, #60]	; 0x3c
   89bce:	f898 3000 	ldrb.w	r3, [r8]
   89bd2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89bd6:	2b00      	cmp	r3, #0
   89bd8:	f47f ae13 	bne.w	89802 <_vfiprintf_r+0x86>
   89bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89bde:	46d9      	mov	r9, fp
   89be0:	2b00      	cmp	r3, #0
   89be2:	f040 8426 	bne.w	8a432 <_vfiprintf_r+0xcb6>
   89be6:	2300      	movs	r3, #0
   89be8:	930f      	str	r3, [sp, #60]	; 0x3c
   89bea:	e762      	b.n	89ab2 <_vfiprintf_r+0x336>
   89bec:	059a      	lsls	r2, r3, #22
   89bee:	f53f af68 	bmi.w	89ac2 <_vfiprintf_r+0x346>
   89bf2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89bf6:	f002 f9cf 	bl	8bf98 <__retarget_lock_release_recursive>
   89bfa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89bfe:	e760      	b.n	89ac2 <_vfiprintf_r+0x346>
   89c00:	9b04      	ldr	r3, [sp, #16]
   89c02:	06f8      	lsls	r0, r7, #27
   89c04:	f853 4b04 	ldr.w	r4, [r3], #4
   89c08:	f100 8308 	bmi.w	8a21c <_vfiprintf_r+0xaa0>
   89c0c:	0679      	lsls	r1, r7, #25
   89c0e:	f140 8302 	bpl.w	8a216 <_vfiprintf_r+0xa9a>
   89c12:	b224      	sxth	r4, r4
   89c14:	17e5      	asrs	r5, r4, #31
   89c16:	9304      	str	r3, [sp, #16]
   89c18:	4622      	mov	r2, r4
   89c1a:	462b      	mov	r3, r5
   89c1c:	e6a2      	b.n	89964 <_vfiprintf_r+0x1e8>
   89c1e:	f854 3b04 	ldr.w	r3, [r4], #4
   89c22:	06f9      	lsls	r1, r7, #27
   89c24:	9404      	str	r4, [sp, #16]
   89c26:	f100 82f3 	bmi.w	8a210 <_vfiprintf_r+0xa94>
   89c2a:	067a      	lsls	r2, r7, #25
   89c2c:	f140 82ed 	bpl.w	8a20a <_vfiprintf_r+0xa8e>
   89c30:	2500      	movs	r5, #0
   89c32:	b29c      	uxth	r4, r3
   89c34:	e6f0      	b.n	89a18 <_vfiprintf_r+0x29c>
   89c36:	f04f 0300 	mov.w	r3, #0
   89c3a:	9c04      	ldr	r4, [sp, #16]
   89c3c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89c40:	f854 6b04 	ldr.w	r6, [r4], #4
   89c44:	2e00      	cmp	r6, #0
   89c46:	f000 8397 	beq.w	8a378 <_vfiprintf_r+0xbfc>
   89c4a:	9a00      	ldr	r2, [sp, #0]
   89c4c:	4613      	mov	r3, r2
   89c4e:	3301      	adds	r3, #1
   89c50:	f000 831e 	beq.w	8a290 <_vfiprintf_r+0xb14>
   89c54:	2100      	movs	r1, #0
   89c56:	4630      	mov	r0, r6
   89c58:	f002 fce4 	bl	8c624 <memchr>
   89c5c:	2800      	cmp	r0, #0
   89c5e:	f000 83d8 	beq.w	8a412 <_vfiprintf_r+0xc96>
   89c62:	1b83      	subs	r3, r0, r6
   89c64:	9301      	str	r3, [sp, #4]
   89c66:	2300      	movs	r3, #0
   89c68:	9404      	str	r4, [sp, #16]
   89c6a:	9300      	str	r3, [sp, #0]
   89c6c:	e696      	b.n	8999c <_vfiprintf_r+0x220>
   89c6e:	2501      	movs	r5, #1
   89c70:	f04f 0200 	mov.w	r2, #0
   89c74:	9c04      	ldr	r4, [sp, #16]
   89c76:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   89c7a:	f854 3b04 	ldr.w	r3, [r4], #4
   89c7e:	9501      	str	r5, [sp, #4]
   89c80:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89c84:	9404      	str	r4, [sp, #16]
   89c86:	ae21      	add	r6, sp, #132	; 0x84
   89c88:	e72e      	b.n	89ae8 <_vfiprintf_r+0x36c>
   89c8a:	f001 fdb1 	bl	8b7f0 <__sinit>
   89c8e:	e582      	b.n	89796 <_vfiprintf_r+0x1a>
   89c90:	9b02      	ldr	r3, [sp, #8]
   89c92:	425b      	negs	r3, r3
   89c94:	9302      	str	r3, [sp, #8]
   89c96:	f898 3000 	ldrb.w	r3, [r8]
   89c9a:	f047 0704 	orr.w	r7, r7, #4
   89c9e:	e5cf      	b.n	89840 <_vfiprintf_r+0xc4>
   89ca0:	f898 3000 	ldrb.w	r3, [r8]
   89ca4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   89ca8:	e5ca      	b.n	89840 <_vfiprintf_r+0xc4>
   89caa:	f898 3000 	ldrb.w	r3, [r8]
   89cae:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   89cb2:	e5c5      	b.n	89840 <_vfiprintf_r+0xc4>
   89cb4:	4641      	mov	r1, r8
   89cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
   89cba:	2b2a      	cmp	r3, #42	; 0x2a
   89cbc:	f000 83dd 	beq.w	8a47a <_vfiprintf_r+0xcfe>
   89cc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89cc4:	2a09      	cmp	r2, #9
   89cc6:	4688      	mov	r8, r1
   89cc8:	bf98      	it	ls
   89cca:	2100      	movls	r1, #0
   89ccc:	f200 83ad 	bhi.w	8a42a <_vfiprintf_r+0xcae>
   89cd0:	f818 3b01 	ldrb.w	r3, [r8], #1
   89cd4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89cd8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   89cdc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89ce0:	2a09      	cmp	r2, #9
   89ce2:	d9f5      	bls.n	89cd0 <_vfiprintf_r+0x554>
   89ce4:	9100      	str	r1, [sp, #0]
   89ce6:	e5ad      	b.n	89844 <_vfiprintf_r+0xc8>
   89ce8:	9c05      	ldr	r4, [sp, #20]
   89cea:	4620      	mov	r0, r4
   89cec:	f002 f94a 	bl	8bf84 <_localeconv_r>
   89cf0:	6843      	ldr	r3, [r0, #4]
   89cf2:	4618      	mov	r0, r3
   89cf4:	930a      	str	r3, [sp, #40]	; 0x28
   89cf6:	f003 fb47 	bl	8d388 <strlen>
   89cfa:	4603      	mov	r3, r0
   89cfc:	4620      	mov	r0, r4
   89cfe:	930b      	str	r3, [sp, #44]	; 0x2c
   89d00:	461c      	mov	r4, r3
   89d02:	f002 f93f 	bl	8bf84 <_localeconv_r>
   89d06:	6882      	ldr	r2, [r0, #8]
   89d08:	9209      	str	r2, [sp, #36]	; 0x24
   89d0a:	2c00      	cmp	r4, #0
   89d0c:	f43f ae13 	beq.w	89936 <_vfiprintf_r+0x1ba>
   89d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89d12:	2b00      	cmp	r3, #0
   89d14:	f43f ae0f 	beq.w	89936 <_vfiprintf_r+0x1ba>
   89d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89d1a:	781b      	ldrb	r3, [r3, #0]
   89d1c:	2b00      	cmp	r3, #0
   89d1e:	f43f ae0a 	beq.w	89936 <_vfiprintf_r+0x1ba>
   89d22:	f898 3000 	ldrb.w	r3, [r8]
   89d26:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   89d2a:	e589      	b.n	89840 <_vfiprintf_r+0xc4>
   89d2c:	f898 3000 	ldrb.w	r3, [r8]
   89d30:	f047 0701 	orr.w	r7, r7, #1
   89d34:	e584      	b.n	89840 <_vfiprintf_r+0xc4>
   89d36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   89d3a:	2b00      	cmp	r3, #0
   89d3c:	f47f adfb 	bne.w	89936 <_vfiprintf_r+0x1ba>
   89d40:	2320      	movs	r3, #32
   89d42:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89d46:	f898 3000 	ldrb.w	r3, [r8]
   89d4a:	e579      	b.n	89840 <_vfiprintf_r+0xc4>
   89d4c:	f898 3000 	ldrb.w	r3, [r8]
   89d50:	2b6c      	cmp	r3, #108	; 0x6c
   89d52:	bf03      	ittte	eq
   89d54:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   89d58:	f047 0720 	orreq.w	r7, r7, #32
   89d5c:	f108 0801 	addeq.w	r8, r8, #1
   89d60:	f047 0710 	orrne.w	r7, r7, #16
   89d64:	e56c      	b.n	89840 <_vfiprintf_r+0xc4>
   89d66:	f898 3000 	ldrb.w	r3, [r8]
   89d6a:	2b68      	cmp	r3, #104	; 0x68
   89d6c:	bf03      	ittte	eq
   89d6e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   89d72:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   89d76:	f108 0801 	addeq.w	r8, r8, #1
   89d7a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   89d7e:	e55f      	b.n	89840 <_vfiprintf_r+0xc4>
   89d80:	f047 0910 	orr.w	r9, r7, #16
   89d84:	f019 0f20 	tst.w	r9, #32
   89d88:	9c04      	ldr	r4, [sp, #16]
   89d8a:	f000 8200 	beq.w	8a18e <_vfiprintf_r+0xa12>
   89d8e:	3407      	adds	r4, #7
   89d90:	f024 0307 	bic.w	r3, r4, #7
   89d94:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89d98:	9304      	str	r3, [sp, #16]
   89d9a:	2301      	movs	r3, #1
   89d9c:	e63f      	b.n	89a1e <_vfiprintf_r+0x2a2>
   89d9e:	f647 0330 	movw	r3, #30768	; 0x7830
   89da2:	9c04      	ldr	r4, [sp, #16]
   89da4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   89da8:	f854 2b04 	ldr.w	r2, [r4], #4
   89dac:	4bbf      	ldr	r3, [pc, #764]	; (8a0ac <_vfiprintf_r+0x930>)
   89dae:	9404      	str	r4, [sp, #16]
   89db0:	9308      	str	r3, [sp, #32]
   89db2:	4614      	mov	r4, r2
   89db4:	2500      	movs	r5, #0
   89db6:	2302      	movs	r3, #2
   89db8:	f047 0902 	orr.w	r9, r7, #2
   89dbc:	e62f      	b.n	89a1e <_vfiprintf_r+0x2a2>
   89dbe:	06bb      	lsls	r3, r7, #26
   89dc0:	f100 8232 	bmi.w	8a228 <_vfiprintf_r+0xaac>
   89dc4:	06fe      	lsls	r6, r7, #27
   89dc6:	f100 82cf 	bmi.w	8a368 <_vfiprintf_r+0xbec>
   89dca:	067d      	lsls	r5, r7, #25
   89dcc:	f100 8301 	bmi.w	8a3d2 <_vfiprintf_r+0xc56>
   89dd0:	05bc      	lsls	r4, r7, #22
   89dd2:	f140 82c9 	bpl.w	8a368 <_vfiprintf_r+0xbec>
   89dd6:	9c04      	ldr	r4, [sp, #16]
   89dd8:	9a03      	ldr	r2, [sp, #12]
   89dda:	f854 3b04 	ldr.w	r3, [r4], #4
   89dde:	701a      	strb	r2, [r3, #0]
   89de0:	9404      	str	r4, [sp, #16]
   89de2:	e509      	b.n	897f8 <_vfiprintf_r+0x7c>
   89de4:	46b9      	mov	r9, r7
   89de6:	2b01      	cmp	r3, #1
   89de8:	f43f adcb 	beq.w	89982 <_vfiprintf_r+0x206>
   89dec:	2b02      	cmp	r3, #2
   89dee:	ae3a      	add	r6, sp, #232	; 0xe8
   89df0:	d113      	bne.n	89e1a <_vfiprintf_r+0x69e>
   89df2:	9808      	ldr	r0, [sp, #32]
   89df4:	0923      	lsrs	r3, r4, #4
   89df6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   89dfa:	0929      	lsrs	r1, r5, #4
   89dfc:	f004 020f 	and.w	r2, r4, #15
   89e00:	460d      	mov	r5, r1
   89e02:	461c      	mov	r4, r3
   89e04:	5c83      	ldrb	r3, [r0, r2]
   89e06:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89e0a:	ea54 0305 	orrs.w	r3, r4, r5
   89e0e:	d1f1      	bne.n	89df4 <_vfiprintf_r+0x678>
   89e10:	ab3a      	add	r3, sp, #232	; 0xe8
   89e12:	1b9b      	subs	r3, r3, r6
   89e14:	464f      	mov	r7, r9
   89e16:	9301      	str	r3, [sp, #4]
   89e18:	e5c0      	b.n	8999c <_vfiprintf_r+0x220>
   89e1a:	08e2      	lsrs	r2, r4, #3
   89e1c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   89e20:	08e9      	lsrs	r1, r5, #3
   89e22:	f004 0307 	and.w	r3, r4, #7
   89e26:	460d      	mov	r5, r1
   89e28:	4614      	mov	r4, r2
   89e2a:	3330      	adds	r3, #48	; 0x30
   89e2c:	ea54 0105 	orrs.w	r1, r4, r5
   89e30:	4632      	mov	r2, r6
   89e32:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89e36:	d1f0      	bne.n	89e1a <_vfiprintf_r+0x69e>
   89e38:	f019 0f01 	tst.w	r9, #1
   89e3c:	d0e8      	beq.n	89e10 <_vfiprintf_r+0x694>
   89e3e:	2b30      	cmp	r3, #48	; 0x30
   89e40:	d0e6      	beq.n	89e10 <_vfiprintf_r+0x694>
   89e42:	2330      	movs	r3, #48	; 0x30
   89e44:	3a02      	subs	r2, #2
   89e46:	f806 3c01 	strb.w	r3, [r6, #-1]
   89e4a:	ab3a      	add	r3, sp, #232	; 0xe8
   89e4c:	1a9b      	subs	r3, r3, r2
   89e4e:	464f      	mov	r7, r9
   89e50:	4616      	mov	r6, r2
   89e52:	9301      	str	r3, [sp, #4]
   89e54:	e5a2      	b.n	8999c <_vfiprintf_r+0x220>
   89e56:	2301      	movs	r3, #1
   89e58:	9a01      	ldr	r2, [sp, #4]
   89e5a:	930f      	str	r3, [sp, #60]	; 0x3c
   89e5c:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   89e60:	9212      	str	r2, [sp, #72]	; 0x48
   89e62:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89e66:	f10a 0a08 	add.w	sl, sl, #8
   89e6a:	e69d      	b.n	89ba8 <_vfiprintf_r+0x42c>
   89e6c:	9b02      	ldr	r3, [sp, #8]
   89e6e:	1b5c      	subs	r4, r3, r5
   89e70:	2c00      	cmp	r4, #0
   89e72:	f77f ae7d 	ble.w	89b70 <_vfiprintf_r+0x3f4>
   89e76:	2c10      	cmp	r4, #16
   89e78:	f340 82ea 	ble.w	8a450 <_vfiprintf_r+0xcd4>
   89e7c:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8a0b0 <_vfiprintf_r+0x934>
   89e80:	4650      	mov	r0, sl
   89e82:	9706      	str	r7, [sp, #24]
   89e84:	46b2      	mov	sl, r6
   89e86:	464e      	mov	r6, r9
   89e88:	46c1      	mov	r9, r8
   89e8a:	46a8      	mov	r8, r5
   89e8c:	9d05      	ldr	r5, [sp, #20]
   89e8e:	e006      	b.n	89e9e <_vfiprintf_r+0x722>
   89e90:	f101 0c02 	add.w	ip, r1, #2
   89e94:	4619      	mov	r1, r3
   89e96:	3008      	adds	r0, #8
   89e98:	3c10      	subs	r4, #16
   89e9a:	2c10      	cmp	r4, #16
   89e9c:	dd1a      	ble.n	89ed4 <_vfiprintf_r+0x758>
   89e9e:	2710      	movs	r7, #16
   89ea0:	1c4b      	adds	r3, r1, #1
   89ea2:	3210      	adds	r2, #16
   89ea4:	2b07      	cmp	r3, #7
   89ea6:	9210      	str	r2, [sp, #64]	; 0x40
   89ea8:	6006      	str	r6, [r0, #0]
   89eaa:	6047      	str	r7, [r0, #4]
   89eac:	930f      	str	r3, [sp, #60]	; 0x3c
   89eae:	ddef      	ble.n	89e90 <_vfiprintf_r+0x714>
   89eb0:	2a00      	cmp	r2, #0
   89eb2:	d07b      	beq.n	89fac <_vfiprintf_r+0x830>
   89eb4:	4659      	mov	r1, fp
   89eb6:	4628      	mov	r0, r5
   89eb8:	aa0e      	add	r2, sp, #56	; 0x38
   89eba:	f7ff fc23 	bl	89704 <__sprint_r.part.0>
   89ebe:	2800      	cmp	r0, #0
   89ec0:	f47f adf6 	bne.w	89ab0 <_vfiprintf_r+0x334>
   89ec4:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89ec8:	3c10      	subs	r4, #16
   89eca:	2c10      	cmp	r4, #16
   89ecc:	a811      	add	r0, sp, #68	; 0x44
   89ece:	f101 0c01 	add.w	ip, r1, #1
   89ed2:	dce4      	bgt.n	89e9e <_vfiprintf_r+0x722>
   89ed4:	4645      	mov	r5, r8
   89ed6:	46c8      	mov	r8, r9
   89ed8:	46b1      	mov	r9, r6
   89eda:	4656      	mov	r6, sl
   89edc:	4682      	mov	sl, r0
   89ede:	9f06      	ldr	r7, [sp, #24]
   89ee0:	4422      	add	r2, r4
   89ee2:	f1bc 0f07 	cmp.w	ip, #7
   89ee6:	e9ca 9400 	strd	r9, r4, [sl]
   89eea:	9210      	str	r2, [sp, #64]	; 0x40
   89eec:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   89ef0:	f340 817e 	ble.w	8a1f0 <_vfiprintf_r+0xa74>
   89ef4:	2a00      	cmp	r2, #0
   89ef6:	f000 825c 	beq.w	8a3b2 <_vfiprintf_r+0xc36>
   89efa:	4659      	mov	r1, fp
   89efc:	9805      	ldr	r0, [sp, #20]
   89efe:	aa0e      	add	r2, sp, #56	; 0x38
   89f00:	f7ff fc00 	bl	89704 <__sprint_r.part.0>
   89f04:	2800      	cmp	r0, #0
   89f06:	f47f add3 	bne.w	89ab0 <_vfiprintf_r+0x334>
   89f0a:	e9dd 3400 	ldrd	r3, r4, [sp]
   89f0e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89f12:	1b1c      	subs	r4, r3, r4
   89f14:	2c00      	cmp	r4, #0
   89f16:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89f1a:	f101 0001 	add.w	r0, r1, #1
   89f1e:	f77f ae2d 	ble.w	89b7c <_vfiprintf_r+0x400>
   89f22:	2c10      	cmp	r4, #16
   89f24:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8a0b0 <_vfiprintf_r+0x934>
   89f28:	dd2f      	ble.n	89f8a <_vfiprintf_r+0x80e>
   89f2a:	46d4      	mov	ip, sl
   89f2c:	46b2      	mov	sl, r6
   89f2e:	464e      	mov	r6, r9
   89f30:	46c1      	mov	r9, r8
   89f32:	46a8      	mov	r8, r5
   89f34:	9d05      	ldr	r5, [sp, #20]
   89f36:	e006      	b.n	89f46 <_vfiprintf_r+0x7ca>
   89f38:	1c88      	adds	r0, r1, #2
   89f3a:	4619      	mov	r1, r3
   89f3c:	f10c 0c08 	add.w	ip, ip, #8
   89f40:	3c10      	subs	r4, #16
   89f42:	2c10      	cmp	r4, #16
   89f44:	dd1c      	ble.n	89f80 <_vfiprintf_r+0x804>
   89f46:	2010      	movs	r0, #16
   89f48:	1c4b      	adds	r3, r1, #1
   89f4a:	3210      	adds	r2, #16
   89f4c:	2b07      	cmp	r3, #7
   89f4e:	9210      	str	r2, [sp, #64]	; 0x40
   89f50:	f8cc 6000 	str.w	r6, [ip]
   89f54:	f8cc 0004 	str.w	r0, [ip, #4]
   89f58:	930f      	str	r3, [sp, #60]	; 0x3c
   89f5a:	dded      	ble.n	89f38 <_vfiprintf_r+0x7bc>
   89f5c:	b30a      	cbz	r2, 89fa2 <_vfiprintf_r+0x826>
   89f5e:	4659      	mov	r1, fp
   89f60:	4628      	mov	r0, r5
   89f62:	aa0e      	add	r2, sp, #56	; 0x38
   89f64:	f7ff fbce 	bl	89704 <__sprint_r.part.0>
   89f68:	2800      	cmp	r0, #0
   89f6a:	f47f ada1 	bne.w	89ab0 <_vfiprintf_r+0x334>
   89f6e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89f72:	3c10      	subs	r4, #16
   89f74:	2c10      	cmp	r4, #16
   89f76:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   89f7a:	f101 0001 	add.w	r0, r1, #1
   89f7e:	dce2      	bgt.n	89f46 <_vfiprintf_r+0x7ca>
   89f80:	4645      	mov	r5, r8
   89f82:	46c8      	mov	r8, r9
   89f84:	46b1      	mov	r9, r6
   89f86:	4656      	mov	r6, sl
   89f88:	46e2      	mov	sl, ip
   89f8a:	4422      	add	r2, r4
   89f8c:	2807      	cmp	r0, #7
   89f8e:	e9ca 9400 	strd	r9, r4, [sl]
   89f92:	9210      	str	r2, [sp, #64]	; 0x40
   89f94:	900f      	str	r0, [sp, #60]	; 0x3c
   89f96:	f300 80d3 	bgt.w	8a140 <_vfiprintf_r+0x9c4>
   89f9a:	f10a 0a08 	add.w	sl, sl, #8
   89f9e:	3001      	adds	r0, #1
   89fa0:	e5ec      	b.n	89b7c <_vfiprintf_r+0x400>
   89fa2:	2001      	movs	r0, #1
   89fa4:	4611      	mov	r1, r2
   89fa6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   89faa:	e7c9      	b.n	89f40 <_vfiprintf_r+0x7c4>
   89fac:	f04f 0c01 	mov.w	ip, #1
   89fb0:	4611      	mov	r1, r2
   89fb2:	a811      	add	r0, sp, #68	; 0x44
   89fb4:	e770      	b.n	89e98 <_vfiprintf_r+0x71c>
   89fb6:	2a00      	cmp	r2, #0
   89fb8:	f000 80d3 	beq.w	8a162 <_vfiprintf_r+0x9e6>
   89fbc:	4659      	mov	r1, fp
   89fbe:	9805      	ldr	r0, [sp, #20]
   89fc0:	aa0e      	add	r2, sp, #56	; 0x38
   89fc2:	f7ff fb9f 	bl	89704 <__sprint_r.part.0>
   89fc6:	2800      	cmp	r0, #0
   89fc8:	f47f ad72 	bne.w	89ab0 <_vfiprintf_r+0x334>
   89fcc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89fd0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89fd4:	1c48      	adds	r0, r1, #1
   89fd6:	e5ac      	b.n	89b32 <_vfiprintf_r+0x3b6>
   89fd8:	2202      	movs	r2, #2
   89fda:	2001      	movs	r0, #1
   89fdc:	ab0d      	add	r3, sp, #52	; 0x34
   89fde:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   89fe2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89fe6:	4601      	mov	r1, r0
   89fe8:	f10a 0a08 	add.w	sl, sl, #8
   89fec:	1c48      	adds	r0, r1, #1
   89fee:	e5bb      	b.n	89b68 <_vfiprintf_r+0x3ec>
   89ff0:	2c10      	cmp	r4, #16
   89ff2:	f340 8214 	ble.w	8a41e <_vfiprintf_r+0xca2>
   89ff6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   89ffa:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8a0b4 <_vfiprintf_r+0x938>
   89ffe:	46d4      	mov	ip, sl
   8a000:	46b2      	mov	sl, r6
   8a002:	464e      	mov	r6, r9
   8a004:	46c1      	mov	r9, r8
   8a006:	46a8      	mov	r8, r5
   8a008:	9d05      	ldr	r5, [sp, #20]
   8a00a:	e006      	b.n	8a01a <_vfiprintf_r+0x89e>
   8a00c:	1c99      	adds	r1, r3, #2
   8a00e:	4603      	mov	r3, r0
   8a010:	f10c 0c08 	add.w	ip, ip, #8
   8a014:	3c10      	subs	r4, #16
   8a016:	2c10      	cmp	r4, #16
   8a018:	dd1c      	ble.n	8a054 <_vfiprintf_r+0x8d8>
   8a01a:	2110      	movs	r1, #16
   8a01c:	1c58      	adds	r0, r3, #1
   8a01e:	3210      	adds	r2, #16
   8a020:	2807      	cmp	r0, #7
   8a022:	9210      	str	r2, [sp, #64]	; 0x40
   8a024:	f8cc 6000 	str.w	r6, [ip]
   8a028:	f8cc 1004 	str.w	r1, [ip, #4]
   8a02c:	900f      	str	r0, [sp, #60]	; 0x3c
   8a02e:	dded      	ble.n	8a00c <_vfiprintf_r+0x890>
   8a030:	b30a      	cbz	r2, 8a076 <_vfiprintf_r+0x8fa>
   8a032:	4659      	mov	r1, fp
   8a034:	4628      	mov	r0, r5
   8a036:	aa0e      	add	r2, sp, #56	; 0x38
   8a038:	f7ff fb64 	bl	89704 <__sprint_r.part.0>
   8a03c:	2800      	cmp	r0, #0
   8a03e:	f47f ad37 	bne.w	89ab0 <_vfiprintf_r+0x334>
   8a042:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a046:	3c10      	subs	r4, #16
   8a048:	2c10      	cmp	r4, #16
   8a04a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a04e:	f103 0101 	add.w	r1, r3, #1
   8a052:	dce2      	bgt.n	8a01a <_vfiprintf_r+0x89e>
   8a054:	4645      	mov	r5, r8
   8a056:	46c8      	mov	r8, r9
   8a058:	46b1      	mov	r9, r6
   8a05a:	4656      	mov	r6, sl
   8a05c:	46e2      	mov	sl, ip
   8a05e:	4422      	add	r2, r4
   8a060:	2907      	cmp	r1, #7
   8a062:	e9ca 9400 	strd	r9, r4, [sl]
   8a066:	9210      	str	r2, [sp, #64]	; 0x40
   8a068:	910f      	str	r1, [sp, #60]	; 0x3c
   8a06a:	f300 80a8 	bgt.w	8a1be <_vfiprintf_r+0xa42>
   8a06e:	f10a 0a08 	add.w	sl, sl, #8
   8a072:	1c48      	adds	r0, r1, #1
   8a074:	e54b      	b.n	89b0e <_vfiprintf_r+0x392>
   8a076:	4613      	mov	r3, r2
   8a078:	2101      	movs	r1, #1
   8a07a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a07e:	e7c9      	b.n	8a014 <_vfiprintf_r+0x898>
   8a080:	0778      	lsls	r0, r7, #29
   8a082:	920f      	str	r2, [sp, #60]	; 0x3c
   8a084:	d554      	bpl.n	8a130 <_vfiprintf_r+0x9b4>
   8a086:	9b02      	ldr	r3, [sp, #8]
   8a088:	1b5c      	subs	r4, r3, r5
   8a08a:	2c00      	cmp	r4, #0
   8a08c:	dd50      	ble.n	8a130 <_vfiprintf_r+0x9b4>
   8a08e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a092:	2c10      	cmp	r4, #16
   8a094:	f340 81d7 	ble.w	8a446 <_vfiprintf_r+0xcca>
   8a098:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8a0b4 <_vfiprintf_r+0x938>
   8a09c:	2610      	movs	r6, #16
   8a09e:	464b      	mov	r3, r9
   8a0a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8a0a2:	46a9      	mov	r9, r5
   8a0a4:	9f05      	ldr	r7, [sp, #20]
   8a0a6:	461d      	mov	r5, r3
   8a0a8:	e00d      	b.n	8a0c6 <_vfiprintf_r+0x94a>
   8a0aa:	bf00      	nop
   8a0ac:	0008e5d0 	.word	0x0008e5d0
   8a0b0:	0008e634 	.word	0x0008e634
   8a0b4:	0008e624 	.word	0x0008e624
   8a0b8:	1c88      	adds	r0, r1, #2
   8a0ba:	4619      	mov	r1, r3
   8a0bc:	f10a 0a08 	add.w	sl, sl, #8
   8a0c0:	3c10      	subs	r4, #16
   8a0c2:	2c10      	cmp	r4, #16
   8a0c4:	dd19      	ble.n	8a0fa <_vfiprintf_r+0x97e>
   8a0c6:	1c4b      	adds	r3, r1, #1
   8a0c8:	3210      	adds	r2, #16
   8a0ca:	2b07      	cmp	r3, #7
   8a0cc:	e9ca 5600 	strd	r5, r6, [sl]
   8a0d0:	9210      	str	r2, [sp, #64]	; 0x40
   8a0d2:	930f      	str	r3, [sp, #60]	; 0x3c
   8a0d4:	ddf0      	ble.n	8a0b8 <_vfiprintf_r+0x93c>
   8a0d6:	b332      	cbz	r2, 8a126 <_vfiprintf_r+0x9aa>
   8a0d8:	4659      	mov	r1, fp
   8a0da:	4638      	mov	r0, r7
   8a0dc:	aa0e      	add	r2, sp, #56	; 0x38
   8a0de:	f7ff fb11 	bl	89704 <__sprint_r.part.0>
   8a0e2:	2800      	cmp	r0, #0
   8a0e4:	f47f ace4 	bne.w	89ab0 <_vfiprintf_r+0x334>
   8a0e8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a0ec:	3c10      	subs	r4, #16
   8a0ee:	2c10      	cmp	r4, #16
   8a0f0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a0f4:	f101 0001 	add.w	r0, r1, #1
   8a0f8:	dce5      	bgt.n	8a0c6 <_vfiprintf_r+0x94a>
   8a0fa:	462b      	mov	r3, r5
   8a0fc:	464d      	mov	r5, r9
   8a0fe:	4699      	mov	r9, r3
   8a100:	4422      	add	r2, r4
   8a102:	2807      	cmp	r0, #7
   8a104:	e9ca 9400 	strd	r9, r4, [sl]
   8a108:	9210      	str	r2, [sp, #64]	; 0x40
   8a10a:	900f      	str	r0, [sp, #60]	; 0x3c
   8a10c:	f77f ad53 	ble.w	89bb6 <_vfiprintf_r+0x43a>
   8a110:	b172      	cbz	r2, 8a130 <_vfiprintf_r+0x9b4>
   8a112:	4659      	mov	r1, fp
   8a114:	9805      	ldr	r0, [sp, #20]
   8a116:	aa0e      	add	r2, sp, #56	; 0x38
   8a118:	f7ff faf4 	bl	89704 <__sprint_r.part.0>
   8a11c:	2800      	cmp	r0, #0
   8a11e:	f47f acc7 	bne.w	89ab0 <_vfiprintf_r+0x334>
   8a122:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a124:	e547      	b.n	89bb6 <_vfiprintf_r+0x43a>
   8a126:	2001      	movs	r0, #1
   8a128:	4611      	mov	r1, r2
   8a12a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a12e:	e7c7      	b.n	8a0c0 <_vfiprintf_r+0x944>
   8a130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a134:	42aa      	cmp	r2, r5
   8a136:	bfac      	ite	ge
   8a138:	189b      	addge	r3, r3, r2
   8a13a:	195b      	addlt	r3, r3, r5
   8a13c:	9303      	str	r3, [sp, #12]
   8a13e:	e544      	b.n	89bca <_vfiprintf_r+0x44e>
   8a140:	2a00      	cmp	r2, #0
   8a142:	f43f ae88 	beq.w	89e56 <_vfiprintf_r+0x6da>
   8a146:	4659      	mov	r1, fp
   8a148:	9805      	ldr	r0, [sp, #20]
   8a14a:	aa0e      	add	r2, sp, #56	; 0x38
   8a14c:	f7ff fada 	bl	89704 <__sprint_r.part.0>
   8a150:	2800      	cmp	r0, #0
   8a152:	f47f acad 	bne.w	89ab0 <_vfiprintf_r+0x334>
   8a156:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   8a15a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a15e:	3001      	adds	r0, #1
   8a160:	e50c      	b.n	89b7c <_vfiprintf_r+0x400>
   8a162:	9b07      	ldr	r3, [sp, #28]
   8a164:	2b00      	cmp	r3, #0
   8a166:	d16b      	bne.n	8a240 <_vfiprintf_r+0xac4>
   8a168:	2001      	movs	r0, #1
   8a16a:	4611      	mov	r1, r2
   8a16c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a170:	e4fa      	b.n	89b68 <_vfiprintf_r+0x3ec>
   8a172:	920f      	str	r2, [sp, #60]	; 0x3c
   8a174:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a178:	e481      	b.n	89a7e <_vfiprintf_r+0x302>
   8a17a:	9b00      	ldr	r3, [sp, #0]
   8a17c:	2b00      	cmp	r3, #0
   8a17e:	f47f ac05 	bne.w	8998c <_vfiprintf_r+0x210>
   8a182:	464f      	mov	r7, r9
   8a184:	2300      	movs	r3, #0
   8a186:	ae3a      	add	r6, sp, #232	; 0xe8
   8a188:	9300      	str	r3, [sp, #0]
   8a18a:	9301      	str	r3, [sp, #4]
   8a18c:	e406      	b.n	8999c <_vfiprintf_r+0x220>
   8a18e:	f854 2b04 	ldr.w	r2, [r4], #4
   8a192:	f019 0f10 	tst.w	r9, #16
   8a196:	f04f 0301 	mov.w	r3, #1
   8a19a:	9404      	str	r4, [sp, #16]
   8a19c:	d132      	bne.n	8a204 <_vfiprintf_r+0xa88>
   8a19e:	f019 0f40 	tst.w	r9, #64	; 0x40
   8a1a2:	d02b      	beq.n	8a1fc <_vfiprintf_r+0xa80>
   8a1a4:	2500      	movs	r5, #0
   8a1a6:	b294      	uxth	r4, r2
   8a1a8:	e439      	b.n	89a1e <_vfiprintf_r+0x2a2>
   8a1aa:	232d      	movs	r3, #45	; 0x2d
   8a1ac:	4264      	negs	r4, r4
   8a1ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8a1b2:	46b9      	mov	r9, r7
   8a1b4:	f04f 0301 	mov.w	r3, #1
   8a1b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8a1bc:	e433      	b.n	89a26 <_vfiprintf_r+0x2aa>
   8a1be:	2a00      	cmp	r2, #0
   8a1c0:	d06f      	beq.n	8a2a2 <_vfiprintf_r+0xb26>
   8a1c2:	4659      	mov	r1, fp
   8a1c4:	9805      	ldr	r0, [sp, #20]
   8a1c6:	aa0e      	add	r2, sp, #56	; 0x38
   8a1c8:	f7ff fa9c 	bl	89704 <__sprint_r.part.0>
   8a1cc:	2800      	cmp	r0, #0
   8a1ce:	f47f ac6f 	bne.w	89ab0 <_vfiprintf_r+0x334>
   8a1d2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a1d6:	e497      	b.n	89b08 <_vfiprintf_r+0x38c>
   8a1d8:	ae3a      	add	r6, sp, #232	; 0xe8
   8a1da:	f7ff bbdf 	b.w	8999c <_vfiprintf_r+0x220>
   8a1de:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a1e2:	f001 fed7 	bl	8bf94 <__retarget_lock_acquire_recursive>
   8a1e6:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8a1ea:	b28a      	uxth	r2, r1
   8a1ec:	f7ff badd 	b.w	897aa <_vfiprintf_r+0x2e>
   8a1f0:	4661      	mov	r1, ip
   8a1f2:	f10a 0a08 	add.w	sl, sl, #8
   8a1f6:	f10c 0001 	add.w	r0, ip, #1
   8a1fa:	e4b9      	b.n	89b70 <_vfiprintf_r+0x3f4>
   8a1fc:	f419 7f00 	tst.w	r9, #512	; 0x200
   8a200:	f040 80ef 	bne.w	8a3e2 <_vfiprintf_r+0xc66>
   8a204:	4614      	mov	r4, r2
   8a206:	2500      	movs	r5, #0
   8a208:	e409      	b.n	89a1e <_vfiprintf_r+0x2a2>
   8a20a:	05be      	lsls	r6, r7, #22
   8a20c:	f100 80f7 	bmi.w	8a3fe <_vfiprintf_r+0xc82>
   8a210:	461c      	mov	r4, r3
   8a212:	2500      	movs	r5, #0
   8a214:	e400      	b.n	89a18 <_vfiprintf_r+0x29c>
   8a216:	05ba      	lsls	r2, r7, #22
   8a218:	f100 80ea 	bmi.w	8a3f0 <_vfiprintf_r+0xc74>
   8a21c:	17e5      	asrs	r5, r4, #31
   8a21e:	9304      	str	r3, [sp, #16]
   8a220:	4622      	mov	r2, r4
   8a222:	462b      	mov	r3, r5
   8a224:	f7ff bb9e 	b.w	89964 <_vfiprintf_r+0x1e8>
   8a228:	9b03      	ldr	r3, [sp, #12]
   8a22a:	9c04      	ldr	r4, [sp, #16]
   8a22c:	17dd      	asrs	r5, r3, #31
   8a22e:	461a      	mov	r2, r3
   8a230:	462b      	mov	r3, r5
   8a232:	f854 1b04 	ldr.w	r1, [r4], #4
   8a236:	e9c1 2300 	strd	r2, r3, [r1]
   8a23a:	9404      	str	r4, [sp, #16]
   8a23c:	f7ff badc 	b.w	897f8 <_vfiprintf_r+0x7c>
   8a240:	2202      	movs	r2, #2
   8a242:	ab0d      	add	r3, sp, #52	; 0x34
   8a244:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8a248:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a24c:	e6cc      	b.n	89fe8 <_vfiprintf_r+0x86c>
   8a24e:	46b9      	mov	r9, r7
   8a250:	e598      	b.n	89d84 <_vfiprintf_r+0x608>
   8a252:	4a90      	ldr	r2, [pc, #576]	; (8a494 <_vfiprintf_r+0xd18>)
   8a254:	9208      	str	r2, [sp, #32]
   8a256:	06bd      	lsls	r5, r7, #26
   8a258:	9c04      	ldr	r4, [sp, #16]
   8a25a:	d530      	bpl.n	8a2be <_vfiprintf_r+0xb42>
   8a25c:	3407      	adds	r4, #7
   8a25e:	f024 0207 	bic.w	r2, r4, #7
   8a262:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   8a266:	9204      	str	r2, [sp, #16]
   8a268:	07fe      	lsls	r6, r7, #31
   8a26a:	d509      	bpl.n	8a280 <_vfiprintf_r+0xb04>
   8a26c:	ea54 0205 	orrs.w	r2, r4, r5
   8a270:	d006      	beq.n	8a280 <_vfiprintf_r+0xb04>
   8a272:	2230      	movs	r2, #48	; 0x30
   8a274:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   8a278:	f047 0702 	orr.w	r7, r7, #2
   8a27c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   8a280:	2302      	movs	r3, #2
   8a282:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8a286:	f7ff bbca 	b.w	89a1e <_vfiprintf_r+0x2a2>
   8a28a:	4a83      	ldr	r2, [pc, #524]	; (8a498 <_vfiprintf_r+0xd1c>)
   8a28c:	9208      	str	r2, [sp, #32]
   8a28e:	e7e2      	b.n	8a256 <_vfiprintf_r+0xada>
   8a290:	4630      	mov	r0, r6
   8a292:	f003 f879 	bl	8d388 <strlen>
   8a296:	2300      	movs	r3, #0
   8a298:	9404      	str	r4, [sp, #16]
   8a29a:	9001      	str	r0, [sp, #4]
   8a29c:	9300      	str	r3, [sp, #0]
   8a29e:	f7ff bb7d 	b.w	8999c <_vfiprintf_r+0x220>
   8a2a2:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   8a2a6:	2900      	cmp	r1, #0
   8a2a8:	f040 8089 	bne.w	8a3be <_vfiprintf_r+0xc42>
   8a2ac:	9b07      	ldr	r3, [sp, #28]
   8a2ae:	2b00      	cmp	r3, #0
   8a2b0:	f47f ae92 	bne.w	89fd8 <_vfiprintf_r+0x85c>
   8a2b4:	4611      	mov	r1, r2
   8a2b6:	2001      	movs	r0, #1
   8a2b8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a2bc:	e458      	b.n	89b70 <_vfiprintf_r+0x3f4>
   8a2be:	f854 2b04 	ldr.w	r2, [r4], #4
   8a2c2:	9404      	str	r4, [sp, #16]
   8a2c4:	06fc      	lsls	r4, r7, #27
   8a2c6:	d407      	bmi.n	8a2d8 <_vfiprintf_r+0xb5c>
   8a2c8:	0678      	lsls	r0, r7, #25
   8a2ca:	d502      	bpl.n	8a2d2 <_vfiprintf_r+0xb56>
   8a2cc:	2500      	movs	r5, #0
   8a2ce:	b294      	uxth	r4, r2
   8a2d0:	e7ca      	b.n	8a268 <_vfiprintf_r+0xaec>
   8a2d2:	05b9      	lsls	r1, r7, #22
   8a2d4:	f100 8089 	bmi.w	8a3ea <_vfiprintf_r+0xc6e>
   8a2d8:	4614      	mov	r4, r2
   8a2da:	2500      	movs	r5, #0
   8a2dc:	e7c4      	b.n	8a268 <_vfiprintf_r+0xaec>
   8a2de:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   8a2e2:	f8cd 9004 	str.w	r9, [sp, #4]
   8a2e6:	f8cd 8018 	str.w	r8, [sp, #24]
   8a2ea:	2700      	movs	r7, #0
   8a2ec:	4698      	mov	r8, r3
   8a2ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   8a2f2:	ae3a      	add	r6, sp, #232	; 0xe8
   8a2f4:	e00b      	b.n	8a30e <_vfiprintf_r+0xb92>
   8a2f6:	220a      	movs	r2, #10
   8a2f8:	2300      	movs	r3, #0
   8a2fa:	4620      	mov	r0, r4
   8a2fc:	4629      	mov	r1, r5
   8a2fe:	f7fd f8e5 	bl	874cc <__aeabi_uldivmod>
   8a302:	2d00      	cmp	r5, #0
   8a304:	bf08      	it	eq
   8a306:	2c0a      	cmpeq	r4, #10
   8a308:	d319      	bcc.n	8a33e <_vfiprintf_r+0xbc2>
   8a30a:	4604      	mov	r4, r0
   8a30c:	460d      	mov	r5, r1
   8a30e:	220a      	movs	r2, #10
   8a310:	2300      	movs	r3, #0
   8a312:	4620      	mov	r0, r4
   8a314:	4629      	mov	r1, r5
   8a316:	f7fd f8d9 	bl	874cc <__aeabi_uldivmod>
   8a31a:	3230      	adds	r2, #48	; 0x30
   8a31c:	f806 2c01 	strb.w	r2, [r6, #-1]
   8a320:	3701      	adds	r7, #1
   8a322:	3e01      	subs	r6, #1
   8a324:	f1b8 0f00 	cmp.w	r8, #0
   8a328:	d0e5      	beq.n	8a2f6 <_vfiprintf_r+0xb7a>
   8a32a:	f899 3000 	ldrb.w	r3, [r9]
   8a32e:	42bb      	cmp	r3, r7
   8a330:	d1e1      	bne.n	8a2f6 <_vfiprintf_r+0xb7a>
   8a332:	2fff      	cmp	r7, #255	; 0xff
   8a334:	d0df      	beq.n	8a2f6 <_vfiprintf_r+0xb7a>
   8a336:	2d00      	cmp	r5, #0
   8a338:	bf08      	it	eq
   8a33a:	2c0a      	cmpeq	r4, #10
   8a33c:	d225      	bcs.n	8a38a <_vfiprintf_r+0xc0e>
   8a33e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   8a342:	ab3a      	add	r3, sp, #232	; 0xe8
   8a344:	f8dd 9004 	ldr.w	r9, [sp, #4]
   8a348:	1b9b      	subs	r3, r3, r6
   8a34a:	464f      	mov	r7, r9
   8a34c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   8a350:	9301      	str	r3, [sp, #4]
   8a352:	f7ff bb23 	b.w	8999c <_vfiprintf_r+0x220>
   8a356:	46b9      	mov	r9, r7
   8a358:	f7ff bb13 	b.w	89982 <_vfiprintf_r+0x206>
   8a35c:	2b01      	cmp	r3, #1
   8a35e:	46b9      	mov	r9, r7
   8a360:	f47f ad44 	bne.w	89dec <_vfiprintf_r+0x670>
   8a364:	f7ff bb12 	b.w	8998c <_vfiprintf_r+0x210>
   8a368:	9c04      	ldr	r4, [sp, #16]
   8a36a:	9a03      	ldr	r2, [sp, #12]
   8a36c:	f854 3b04 	ldr.w	r3, [r4], #4
   8a370:	601a      	str	r2, [r3, #0]
   8a372:	9404      	str	r4, [sp, #16]
   8a374:	f7ff ba40 	b.w	897f8 <_vfiprintf_r+0x7c>
   8a378:	9d00      	ldr	r5, [sp, #0]
   8a37a:	4e48      	ldr	r6, [pc, #288]	; (8a49c <_vfiprintf_r+0xd20>)
   8a37c:	2d06      	cmp	r5, #6
   8a37e:	bf28      	it	cs
   8a380:	2506      	movcs	r5, #6
   8a382:	9404      	str	r4, [sp, #16]
   8a384:	9501      	str	r5, [sp, #4]
   8a386:	f7ff bbaf 	b.w	89ae8 <_vfiprintf_r+0x36c>
   8a38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a38c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8a38e:	1af6      	subs	r6, r6, r3
   8a390:	461a      	mov	r2, r3
   8a392:	4630      	mov	r0, r6
   8a394:	f003 f826 	bl	8d3e4 <strncpy>
   8a398:	f899 3001 	ldrb.w	r3, [r9, #1]
   8a39c:	b10b      	cbz	r3, 8a3a2 <_vfiprintf_r+0xc26>
   8a39e:	f109 0901 	add.w	r9, r9, #1
   8a3a2:	220a      	movs	r2, #10
   8a3a4:	2300      	movs	r3, #0
   8a3a6:	4620      	mov	r0, r4
   8a3a8:	4629      	mov	r1, r5
   8a3aa:	f7fd f88f 	bl	874cc <__aeabi_uldivmod>
   8a3ae:	2700      	movs	r7, #0
   8a3b0:	e7ab      	b.n	8a30a <_vfiprintf_r+0xb8e>
   8a3b2:	2001      	movs	r0, #1
   8a3b4:	4611      	mov	r1, r2
   8a3b6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a3ba:	f7ff bbd9 	b.w	89b70 <_vfiprintf_r+0x3f4>
   8a3be:	2201      	movs	r2, #1
   8a3c0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   8a3c4:	4610      	mov	r0, r2
   8a3c6:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8a3ca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a3ce:	f7ff bbac 	b.w	89b2a <_vfiprintf_r+0x3ae>
   8a3d2:	9c04      	ldr	r4, [sp, #16]
   8a3d4:	9a03      	ldr	r2, [sp, #12]
   8a3d6:	f854 3b04 	ldr.w	r3, [r4], #4
   8a3da:	801a      	strh	r2, [r3, #0]
   8a3dc:	9404      	str	r4, [sp, #16]
   8a3de:	f7ff ba0b 	b.w	897f8 <_vfiprintf_r+0x7c>
   8a3e2:	2500      	movs	r5, #0
   8a3e4:	b2d4      	uxtb	r4, r2
   8a3e6:	f7ff bb1a 	b.w	89a1e <_vfiprintf_r+0x2a2>
   8a3ea:	2500      	movs	r5, #0
   8a3ec:	b2d4      	uxtb	r4, r2
   8a3ee:	e73b      	b.n	8a268 <_vfiprintf_r+0xaec>
   8a3f0:	b264      	sxtb	r4, r4
   8a3f2:	17e5      	asrs	r5, r4, #31
   8a3f4:	9304      	str	r3, [sp, #16]
   8a3f6:	4622      	mov	r2, r4
   8a3f8:	462b      	mov	r3, r5
   8a3fa:	f7ff bab3 	b.w	89964 <_vfiprintf_r+0x1e8>
   8a3fe:	2500      	movs	r5, #0
   8a400:	b2dc      	uxtb	r4, r3
   8a402:	f7ff bb09 	b.w	89a18 <_vfiprintf_r+0x29c>
   8a406:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a40a:	f001 fdc5 	bl	8bf98 <__retarget_lock_release_recursive>
   8a40e:	f7ff baec 	b.w	899ea <_vfiprintf_r+0x26e>
   8a412:	9b00      	ldr	r3, [sp, #0]
   8a414:	9404      	str	r4, [sp, #16]
   8a416:	9301      	str	r3, [sp, #4]
   8a418:	9000      	str	r0, [sp, #0]
   8a41a:	f7ff babf 	b.w	8999c <_vfiprintf_r+0x220>
   8a41e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a422:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8a4a0 <_vfiprintf_r+0xd24>
   8a426:	3101      	adds	r1, #1
   8a428:	e619      	b.n	8a05e <_vfiprintf_r+0x8e2>
   8a42a:	2200      	movs	r2, #0
   8a42c:	9200      	str	r2, [sp, #0]
   8a42e:	f7ff ba09 	b.w	89844 <_vfiprintf_r+0xc8>
   8a432:	4659      	mov	r1, fp
   8a434:	9805      	ldr	r0, [sp, #20]
   8a436:	aa0e      	add	r2, sp, #56	; 0x38
   8a438:	f7ff f964 	bl	89704 <__sprint_r.part.0>
   8a43c:	2800      	cmp	r0, #0
   8a43e:	f43f abd2 	beq.w	89be6 <_vfiprintf_r+0x46a>
   8a442:	f7ff bb36 	b.w	89ab2 <_vfiprintf_r+0x336>
   8a446:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8a448:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8a4a0 <_vfiprintf_r+0xd24>
   8a44c:	3001      	adds	r0, #1
   8a44e:	e657      	b.n	8a100 <_vfiprintf_r+0x984>
   8a450:	4684      	mov	ip, r0
   8a452:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8a4a4 <_vfiprintf_r+0xd28>
   8a456:	e543      	b.n	89ee0 <_vfiprintf_r+0x764>
   8a458:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8a45c:	07db      	lsls	r3, r3, #31
   8a45e:	d407      	bmi.n	8a470 <_vfiprintf_r+0xcf4>
   8a460:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8a464:	059f      	lsls	r7, r3, #22
   8a466:	d403      	bmi.n	8a470 <_vfiprintf_r+0xcf4>
   8a468:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a46c:	f001 fd94 	bl	8bf98 <__retarget_lock_release_recursive>
   8a470:	f04f 33ff 	mov.w	r3, #4294967295
   8a474:	9303      	str	r3, [sp, #12]
   8a476:	f7ff bb27 	b.w	89ac8 <_vfiprintf_r+0x34c>
   8a47a:	9a04      	ldr	r2, [sp, #16]
   8a47c:	f898 3001 	ldrb.w	r3, [r8, #1]
   8a480:	f852 0b04 	ldr.w	r0, [r2], #4
   8a484:	4688      	mov	r8, r1
   8a486:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8a48a:	9000      	str	r0, [sp, #0]
   8a48c:	9204      	str	r2, [sp, #16]
   8a48e:	f7ff b9d7 	b.w	89840 <_vfiprintf_r+0xc4>
   8a492:	bf00      	nop
   8a494:	0008e5e4 	.word	0x0008e5e4
   8a498:	0008e5d0 	.word	0x0008e5d0
   8a49c:	0008e5f8 	.word	0x0008e5f8
   8a4a0:	0008e624 	.word	0x0008e624
   8a4a4:	0008e634 	.word	0x0008e634

0008a4a8 <__sbprintf>:
   8a4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a4aa:	460c      	mov	r4, r1
   8a4ac:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8a4b0:	f04f 0e00 	mov.w	lr, #0
   8a4b4:	4615      	mov	r5, r2
   8a4b6:	4606      	mov	r6, r0
   8a4b8:	461f      	mov	r7, r3
   8a4ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a4bc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8a4c0:	89e2      	ldrh	r2, [r4, #14]
   8a4c2:	8989      	ldrh	r1, [r1, #12]
   8a4c4:	9319      	str	r3, [sp, #100]	; 0x64
   8a4c6:	69e3      	ldr	r3, [r4, #28]
   8a4c8:	f8ad 200e 	strh.w	r2, [sp, #14]
   8a4cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   8a4ce:	f021 0102 	bic.w	r1, r1, #2
   8a4d2:	9307      	str	r3, [sp, #28]
   8a4d4:	a816      	add	r0, sp, #88	; 0x58
   8a4d6:	ab1a      	add	r3, sp, #104	; 0x68
   8a4d8:	f8ad 100c 	strh.w	r1, [sp, #12]
   8a4dc:	f8cd e018 	str.w	lr, [sp, #24]
   8a4e0:	9209      	str	r2, [sp, #36]	; 0x24
   8a4e2:	9300      	str	r3, [sp, #0]
   8a4e4:	9304      	str	r3, [sp, #16]
   8a4e6:	f8cd c008 	str.w	ip, [sp, #8]
   8a4ea:	f8cd c014 	str.w	ip, [sp, #20]
   8a4ee:	f001 fd4d 	bl	8bf8c <__retarget_lock_init_recursive>
   8a4f2:	462a      	mov	r2, r5
   8a4f4:	463b      	mov	r3, r7
   8a4f6:	4669      	mov	r1, sp
   8a4f8:	4630      	mov	r0, r6
   8a4fa:	f7ff f93f 	bl	8977c <_vfiprintf_r>
   8a4fe:	1e05      	subs	r5, r0, #0
   8a500:	db07      	blt.n	8a512 <__sbprintf+0x6a>
   8a502:	4630      	mov	r0, r6
   8a504:	4669      	mov	r1, sp
   8a506:	f001 f917 	bl	8b738 <_fflush_r>
   8a50a:	2800      	cmp	r0, #0
   8a50c:	bf18      	it	ne
   8a50e:	f04f 35ff 	movne.w	r5, #4294967295
   8a512:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8a516:	065b      	lsls	r3, r3, #25
   8a518:	d503      	bpl.n	8a522 <__sbprintf+0x7a>
   8a51a:	89a3      	ldrh	r3, [r4, #12]
   8a51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a520:	81a3      	strh	r3, [r4, #12]
   8a522:	9816      	ldr	r0, [sp, #88]	; 0x58
   8a524:	f001 fd34 	bl	8bf90 <__retarget_lock_close_recursive>
   8a528:	4628      	mov	r0, r5
   8a52a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8a52e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008a530 <__swsetup_r>:
   8a530:	b538      	push	{r3, r4, r5, lr}
   8a532:	4b32      	ldr	r3, [pc, #200]	; (8a5fc <__swsetup_r+0xcc>)
   8a534:	4605      	mov	r5, r0
   8a536:	6818      	ldr	r0, [r3, #0]
   8a538:	460c      	mov	r4, r1
   8a53a:	b110      	cbz	r0, 8a542 <__swsetup_r+0x12>
   8a53c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a53e:	2b00      	cmp	r3, #0
   8a540:	d03c      	beq.n	8a5bc <__swsetup_r+0x8c>
   8a542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a546:	0718      	lsls	r0, r3, #28
   8a548:	b29a      	uxth	r2, r3
   8a54a:	d50c      	bpl.n	8a566 <__swsetup_r+0x36>
   8a54c:	6921      	ldr	r1, [r4, #16]
   8a54e:	b1a9      	cbz	r1, 8a57c <__swsetup_r+0x4c>
   8a550:	f012 0001 	ands.w	r0, r2, #1
   8a554:	d022      	beq.n	8a59c <__swsetup_r+0x6c>
   8a556:	2500      	movs	r5, #0
   8a558:	6960      	ldr	r0, [r4, #20]
   8a55a:	60a5      	str	r5, [r4, #8]
   8a55c:	4240      	negs	r0, r0
   8a55e:	61a0      	str	r0, [r4, #24]
   8a560:	b311      	cbz	r1, 8a5a8 <__swsetup_r+0x78>
   8a562:	2000      	movs	r0, #0
   8a564:	bd38      	pop	{r3, r4, r5, pc}
   8a566:	06d1      	lsls	r1, r2, #27
   8a568:	d53f      	bpl.n	8a5ea <__swsetup_r+0xba>
   8a56a:	0752      	lsls	r2, r2, #29
   8a56c:	d429      	bmi.n	8a5c2 <__swsetup_r+0x92>
   8a56e:	6921      	ldr	r1, [r4, #16]
   8a570:	f043 0308 	orr.w	r3, r3, #8
   8a574:	81a3      	strh	r3, [r4, #12]
   8a576:	b29a      	uxth	r2, r3
   8a578:	2900      	cmp	r1, #0
   8a57a:	d1e9      	bne.n	8a550 <__swsetup_r+0x20>
   8a57c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8a580:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8a584:	d0e4      	beq.n	8a550 <__swsetup_r+0x20>
   8a586:	4628      	mov	r0, r5
   8a588:	4621      	mov	r1, r4
   8a58a:	f001 fd35 	bl	8bff8 <__smakebuf_r>
   8a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a592:	6921      	ldr	r1, [r4, #16]
   8a594:	b29a      	uxth	r2, r3
   8a596:	f012 0001 	ands.w	r0, r2, #1
   8a59a:	d1dc      	bne.n	8a556 <__swsetup_r+0x26>
   8a59c:	0795      	lsls	r5, r2, #30
   8a59e:	bf58      	it	pl
   8a5a0:	6960      	ldrpl	r0, [r4, #20]
   8a5a2:	60a0      	str	r0, [r4, #8]
   8a5a4:	2900      	cmp	r1, #0
   8a5a6:	d1dc      	bne.n	8a562 <__swsetup_r+0x32>
   8a5a8:	0612      	lsls	r2, r2, #24
   8a5aa:	bf58      	it	pl
   8a5ac:	4608      	movpl	r0, r1
   8a5ae:	d5d9      	bpl.n	8a564 <__swsetup_r+0x34>
   8a5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a5b4:	f04f 30ff 	mov.w	r0, #4294967295
   8a5b8:	81a3      	strh	r3, [r4, #12]
   8a5ba:	bd38      	pop	{r3, r4, r5, pc}
   8a5bc:	f001 f918 	bl	8b7f0 <__sinit>
   8a5c0:	e7bf      	b.n	8a542 <__swsetup_r+0x12>
   8a5c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8a5c4:	b151      	cbz	r1, 8a5dc <__swsetup_r+0xac>
   8a5c6:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8a5ca:	4291      	cmp	r1, r2
   8a5cc:	d004      	beq.n	8a5d8 <__swsetup_r+0xa8>
   8a5ce:	4628      	mov	r0, r5
   8a5d0:	f001 fa32 	bl	8ba38 <_free_r>
   8a5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a5d8:	2200      	movs	r2, #0
   8a5da:	6322      	str	r2, [r4, #48]	; 0x30
   8a5dc:	2200      	movs	r2, #0
   8a5de:	6921      	ldr	r1, [r4, #16]
   8a5e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8a5e4:	e9c4 1200 	strd	r1, r2, [r4]
   8a5e8:	e7c2      	b.n	8a570 <__swsetup_r+0x40>
   8a5ea:	2209      	movs	r2, #9
   8a5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a5f0:	602a      	str	r2, [r5, #0]
   8a5f2:	f04f 30ff 	mov.w	r0, #4294967295
   8a5f6:	81a3      	strh	r3, [r4, #12]
   8a5f8:	bd38      	pop	{r3, r4, r5, pc}
   8a5fa:	bf00      	nop
   8a5fc:	20000714 	.word	0x20000714

0008a600 <register_fini>:
   8a600:	4b02      	ldr	r3, [pc, #8]	; (8a60c <register_fini+0xc>)
   8a602:	b113      	cbz	r3, 8a60a <register_fini+0xa>
   8a604:	4802      	ldr	r0, [pc, #8]	; (8a610 <register_fini+0x10>)
   8a606:	f000 b805 	b.w	8a614 <atexit>
   8a60a:	4770      	bx	lr
   8a60c:	00000000 	.word	0x00000000
   8a610:	0008b865 	.word	0x0008b865

0008a614 <atexit>:
   8a614:	2300      	movs	r3, #0
   8a616:	4601      	mov	r1, r0
   8a618:	461a      	mov	r2, r3
   8a61a:	4618      	mov	r0, r3
   8a61c:	f003 b82c 	b.w	8d678 <__register_exitproc>

0008a620 <quorem>:
   8a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a624:	6903      	ldr	r3, [r0, #16]
   8a626:	690d      	ldr	r5, [r1, #16]
   8a628:	b083      	sub	sp, #12
   8a62a:	42ab      	cmp	r3, r5
   8a62c:	f2c0 8084 	blt.w	8a738 <quorem+0x118>
   8a630:	3d01      	subs	r5, #1
   8a632:	f101 0614 	add.w	r6, r1, #20
   8a636:	f100 0914 	add.w	r9, r0, #20
   8a63a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   8a63e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8a642:	3301      	adds	r3, #1
   8a644:	468e      	mov	lr, r1
   8a646:	00a9      	lsls	r1, r5, #2
   8a648:	9100      	str	r1, [sp, #0]
   8a64a:	429a      	cmp	r2, r3
   8a64c:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   8a650:	4682      	mov	sl, r0
   8a652:	fbb2 f7f3 	udiv	r7, r2, r3
   8a656:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8a65a:	9101      	str	r1, [sp, #4]
   8a65c:	d337      	bcc.n	8a6ce <quorem+0xae>
   8a65e:	2200      	movs	r2, #0
   8a660:	46b4      	mov	ip, r6
   8a662:	4614      	mov	r4, r2
   8a664:	4648      	mov	r0, r9
   8a666:	f85c 3b04 	ldr.w	r3, [ip], #4
   8a66a:	6801      	ldr	r1, [r0, #0]
   8a66c:	fa1f fb83 	uxth.w	fp, r3
   8a670:	fb07 220b 	mla	r2, r7, fp, r2
   8a674:	0c1b      	lsrs	r3, r3, #16
   8a676:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8a67a:	fb07 bb03 	mla	fp, r7, r3, fp
   8a67e:	b293      	uxth	r3, r2
   8a680:	1ae3      	subs	r3, r4, r3
   8a682:	b28a      	uxth	r2, r1
   8a684:	fa1f f48b 	uxth.w	r4, fp
   8a688:	4413      	add	r3, r2
   8a68a:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   8a68e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   8a692:	b29b      	uxth	r3, r3
   8a694:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   8a698:	45e0      	cmp	r8, ip
   8a69a:	f840 3b04 	str.w	r3, [r0], #4
   8a69e:	ea4f 4424 	mov.w	r4, r4, asr #16
   8a6a2:	ea4f 421b 	mov.w	r2, fp, lsr #16
   8a6a6:	d2de      	bcs.n	8a666 <quorem+0x46>
   8a6a8:	9b00      	ldr	r3, [sp, #0]
   8a6aa:	f859 3003 	ldr.w	r3, [r9, r3]
   8a6ae:	b973      	cbnz	r3, 8a6ce <quorem+0xae>
   8a6b0:	9b01      	ldr	r3, [sp, #4]
   8a6b2:	3b04      	subs	r3, #4
   8a6b4:	4599      	cmp	r9, r3
   8a6b6:	d304      	bcc.n	8a6c2 <quorem+0xa2>
   8a6b8:	e007      	b.n	8a6ca <quorem+0xaa>
   8a6ba:	4599      	cmp	r9, r3
   8a6bc:	f105 35ff 	add.w	r5, r5, #4294967295
   8a6c0:	d203      	bcs.n	8a6ca <quorem+0xaa>
   8a6c2:	f853 2904 	ldr.w	r2, [r3], #-4
   8a6c6:	2a00      	cmp	r2, #0
   8a6c8:	d0f7      	beq.n	8a6ba <quorem+0x9a>
   8a6ca:	f8ca 5010 	str.w	r5, [sl, #16]
   8a6ce:	4671      	mov	r1, lr
   8a6d0:	4650      	mov	r0, sl
   8a6d2:	f002 fab1 	bl	8cc38 <__mcmp>
   8a6d6:	2800      	cmp	r0, #0
   8a6d8:	db2a      	blt.n	8a730 <quorem+0x110>
   8a6da:	4648      	mov	r0, r9
   8a6dc:	2300      	movs	r3, #0
   8a6de:	3701      	adds	r7, #1
   8a6e0:	f856 1b04 	ldr.w	r1, [r6], #4
   8a6e4:	6804      	ldr	r4, [r0, #0]
   8a6e6:	b28a      	uxth	r2, r1
   8a6e8:	1a9a      	subs	r2, r3, r2
   8a6ea:	0c0b      	lsrs	r3, r1, #16
   8a6ec:	b2a1      	uxth	r1, r4
   8a6ee:	440a      	add	r2, r1
   8a6f0:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   8a6f4:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8a6f8:	b292      	uxth	r2, r2
   8a6fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8a6fe:	45b0      	cmp	r8, r6
   8a700:	f840 2b04 	str.w	r2, [r0], #4
   8a704:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a708:	d2ea      	bcs.n	8a6e0 <quorem+0xc0>
   8a70a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8a70e:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   8a712:	b96a      	cbnz	r2, 8a730 <quorem+0x110>
   8a714:	3b04      	subs	r3, #4
   8a716:	4599      	cmp	r9, r3
   8a718:	d304      	bcc.n	8a724 <quorem+0x104>
   8a71a:	e007      	b.n	8a72c <quorem+0x10c>
   8a71c:	4599      	cmp	r9, r3
   8a71e:	f105 35ff 	add.w	r5, r5, #4294967295
   8a722:	d203      	bcs.n	8a72c <quorem+0x10c>
   8a724:	f853 2904 	ldr.w	r2, [r3], #-4
   8a728:	2a00      	cmp	r2, #0
   8a72a:	d0f7      	beq.n	8a71c <quorem+0xfc>
   8a72c:	f8ca 5010 	str.w	r5, [sl, #16]
   8a730:	4638      	mov	r0, r7
   8a732:	b003      	add	sp, #12
   8a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a738:	2000      	movs	r0, #0
   8a73a:	b003      	add	sp, #12
   8a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008a740 <_dtoa_r>:
   8a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a744:	4616      	mov	r6, r2
   8a746:	461f      	mov	r7, r3
   8a748:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8a74a:	b09b      	sub	sp, #108	; 0x6c
   8a74c:	4604      	mov	r4, r0
   8a74e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8a752:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8a754:	b141      	cbz	r1, 8a768 <_dtoa_r+0x28>
   8a756:	2301      	movs	r3, #1
   8a758:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8a75a:	4093      	lsls	r3, r2
   8a75c:	e9c1 2301 	strd	r2, r3, [r1, #4]
   8a760:	f002 f83c 	bl	8c7dc <_Bfree>
   8a764:	2300      	movs	r3, #0
   8a766:	6423      	str	r3, [r4, #64]	; 0x40
   8a768:	f1b7 0900 	subs.w	r9, r7, #0
   8a76c:	bfb4      	ite	lt
   8a76e:	2301      	movlt	r3, #1
   8a770:	2300      	movge	r3, #0
   8a772:	602b      	str	r3, [r5, #0]
   8a774:	4b76      	ldr	r3, [pc, #472]	; (8a950 <_dtoa_r+0x210>)
   8a776:	bfbc      	itt	lt
   8a778:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   8a77c:	f8cd 9014 	strlt.w	r9, [sp, #20]
   8a780:	ea33 0309 	bics.w	r3, r3, r9
   8a784:	f000 80ab 	beq.w	8a8de <_dtoa_r+0x19e>
   8a788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a78c:	4610      	mov	r0, r2
   8a78e:	4619      	mov	r1, r3
   8a790:	2200      	movs	r2, #0
   8a792:	2300      	movs	r3, #0
   8a794:	e9cd 0108 	strd	r0, r1, [sp, #32]
   8a798:	f003 fd5a 	bl	8e250 <__aeabi_dcmpeq>
   8a79c:	4680      	mov	r8, r0
   8a79e:	b170      	cbz	r0, 8a7be <_dtoa_r+0x7e>
   8a7a0:	2301      	movs	r3, #1
   8a7a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a7a4:	6013      	str	r3, [r2, #0]
   8a7a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a7a8:	2b00      	cmp	r3, #0
   8a7aa:	f000 82c2 	beq.w	8ad32 <_dtoa_r+0x5f2>
   8a7ae:	4869      	ldr	r0, [pc, #420]	; (8a954 <_dtoa_r+0x214>)
   8a7b0:	6018      	str	r0, [r3, #0]
   8a7b2:	1e43      	subs	r3, r0, #1
   8a7b4:	9303      	str	r3, [sp, #12]
   8a7b6:	9803      	ldr	r0, [sp, #12]
   8a7b8:	b01b      	add	sp, #108	; 0x6c
   8a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a7be:	aa18      	add	r2, sp, #96	; 0x60
   8a7c0:	ab19      	add	r3, sp, #100	; 0x64
   8a7c2:	e9cd 3200 	strd	r3, r2, [sp]
   8a7c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a7ca:	4620      	mov	r0, r4
   8a7cc:	f002 fafa 	bl	8cdc4 <__d2b>
   8a7d0:	ea5f 5519 	movs.w	r5, r9, lsr #20
   8a7d4:	4682      	mov	sl, r0
   8a7d6:	f040 8098 	bne.w	8a90a <_dtoa_r+0x1ca>
   8a7da:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   8a7de:	4445      	add	r5, r8
   8a7e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
   8a7e4:	2820      	cmp	r0, #32
   8a7e6:	f340 8390 	ble.w	8af0a <_dtoa_r+0x7ca>
   8a7ea:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   8a7ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
   8a7f2:	fa09 f903 	lsl.w	r9, r9, r3
   8a7f6:	fa26 f000 	lsr.w	r0, r6, r0
   8a7fa:	ea49 0000 	orr.w	r0, r9, r0
   8a7fe:	f003 fa45 	bl	8dc8c <__aeabi_ui2d>
   8a802:	2201      	movs	r2, #1
   8a804:	3d01      	subs	r5, #1
   8a806:	920f      	str	r2, [sp, #60]	; 0x3c
   8a808:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8a80c:	2200      	movs	r2, #0
   8a80e:	4b52      	ldr	r3, [pc, #328]	; (8a958 <_dtoa_r+0x218>)
   8a810:	f003 f8fe 	bl	8da10 <__aeabi_dsub>
   8a814:	a348      	add	r3, pc, #288	; (adr r3, 8a938 <_dtoa_r+0x1f8>)
   8a816:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a81a:	f003 fab1 	bl	8dd80 <__aeabi_dmul>
   8a81e:	a348      	add	r3, pc, #288	; (adr r3, 8a940 <_dtoa_r+0x200>)
   8a820:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a824:	f003 f8f6 	bl	8da14 <__adddf3>
   8a828:	4606      	mov	r6, r0
   8a82a:	4628      	mov	r0, r5
   8a82c:	460f      	mov	r7, r1
   8a82e:	f003 fa3d 	bl	8dcac <__aeabi_i2d>
   8a832:	a345      	add	r3, pc, #276	; (adr r3, 8a948 <_dtoa_r+0x208>)
   8a834:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a838:	f003 faa2 	bl	8dd80 <__aeabi_dmul>
   8a83c:	4602      	mov	r2, r0
   8a83e:	460b      	mov	r3, r1
   8a840:	4630      	mov	r0, r6
   8a842:	4639      	mov	r1, r7
   8a844:	f003 f8e6 	bl	8da14 <__adddf3>
   8a848:	4606      	mov	r6, r0
   8a84a:	460f      	mov	r7, r1
   8a84c:	f003 fd48 	bl	8e2e0 <__aeabi_d2iz>
   8a850:	2200      	movs	r2, #0
   8a852:	4683      	mov	fp, r0
   8a854:	2300      	movs	r3, #0
   8a856:	4630      	mov	r0, r6
   8a858:	4639      	mov	r1, r7
   8a85a:	f003 fd03 	bl	8e264 <__aeabi_dcmplt>
   8a85e:	2800      	cmp	r0, #0
   8a860:	f040 825a 	bne.w	8ad18 <_dtoa_r+0x5d8>
   8a864:	f1bb 0f16 	cmp.w	fp, #22
   8a868:	f200 8248 	bhi.w	8acfc <_dtoa_r+0x5bc>
   8a86c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a870:	4b3a      	ldr	r3, [pc, #232]	; (8a95c <_dtoa_r+0x21c>)
   8a872:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8a876:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a87a:	f003 fcf3 	bl	8e264 <__aeabi_dcmplt>
   8a87e:	2800      	cmp	r0, #0
   8a880:	d072      	beq.n	8a968 <_dtoa_r+0x228>
   8a882:	2300      	movs	r3, #0
   8a884:	eba8 0505 	sub.w	r5, r8, r5
   8a888:	930e      	str	r3, [sp, #56]	; 0x38
   8a88a:	1e6b      	subs	r3, r5, #1
   8a88c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a890:	9306      	str	r3, [sp, #24]
   8a892:	f100 823b 	bmi.w	8ad0c <_dtoa_r+0x5cc>
   8a896:	2300      	movs	r3, #0
   8a898:	930b      	str	r3, [sp, #44]	; 0x2c
   8a89a:	f1bb 0f00 	cmp.w	fp, #0
   8a89e:	da6b      	bge.n	8a978 <_dtoa_r+0x238>
   8a8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a8a2:	f8cd b01c 	str.w	fp, [sp, #28]
   8a8a6:	eba3 030b 	sub.w	r3, r3, fp
   8a8aa:	930b      	str	r3, [sp, #44]	; 0x2c
   8a8ac:	f1cb 0300 	rsb	r3, fp, #0
   8a8b0:	930d      	str	r3, [sp, #52]	; 0x34
   8a8b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a8b4:	f04f 0b00 	mov.w	fp, #0
   8a8b8:	2b09      	cmp	r3, #9
   8a8ba:	d866      	bhi.n	8a98a <_dtoa_r+0x24a>
   8a8bc:	2b05      	cmp	r3, #5
   8a8be:	f340 8322 	ble.w	8af06 <_dtoa_r+0x7c6>
   8a8c2:	2500      	movs	r5, #0
   8a8c4:	3b04      	subs	r3, #4
   8a8c6:	9324      	str	r3, [sp, #144]	; 0x90
   8a8c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a8ca:	3b02      	subs	r3, #2
   8a8cc:	2b03      	cmp	r3, #3
   8a8ce:	f200 866e 	bhi.w	8b5ae <_dtoa_r+0xe6e>
   8a8d2:	e8df f013 	tbh	[pc, r3, lsl #1]
   8a8d6:	043b      	.short	0x043b
   8a8d8:	042f0438 	.word	0x042f0438
   8a8dc:	0412      	.short	0x0412
   8a8de:	f242 730f 	movw	r3, #9999	; 0x270f
   8a8e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a8e4:	f3c9 0913 	ubfx	r9, r9, #0, #20
   8a8e8:	6013      	str	r3, [r2, #0]
   8a8ea:	ea59 0306 	orrs.w	r3, r9, r6
   8a8ee:	d11c      	bne.n	8a92a <_dtoa_r+0x1ea>
   8a8f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a8f2:	2b00      	cmp	r3, #0
   8a8f4:	f000 8657 	beq.w	8b5a6 <_dtoa_r+0xe66>
   8a8f8:	4b19      	ldr	r3, [pc, #100]	; (8a960 <_dtoa_r+0x220>)
   8a8fa:	9303      	str	r3, [sp, #12]
   8a8fc:	3308      	adds	r3, #8
   8a8fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8a900:	9803      	ldr	r0, [sp, #12]
   8a902:	6013      	str	r3, [r2, #0]
   8a904:	b01b      	add	sp, #108	; 0x6c
   8a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a90a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   8a90e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a912:	4608      	mov	r0, r1
   8a914:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   8a918:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   8a91c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   8a920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8a924:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8a928:	e770      	b.n	8a80c <_dtoa_r+0xcc>
   8a92a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a92c:	2b00      	cmp	r3, #0
   8a92e:	f040 83c8 	bne.w	8b0c2 <_dtoa_r+0x982>
   8a932:	4b0c      	ldr	r3, [pc, #48]	; (8a964 <_dtoa_r+0x224>)
   8a934:	9303      	str	r3, [sp, #12]
   8a936:	e73e      	b.n	8a7b6 <_dtoa_r+0x76>
   8a938:	636f4361 	.word	0x636f4361
   8a93c:	3fd287a7 	.word	0x3fd287a7
   8a940:	8b60c8b3 	.word	0x8b60c8b3
   8a944:	3fc68a28 	.word	0x3fc68a28
   8a948:	509f79fb 	.word	0x509f79fb
   8a94c:	3fd34413 	.word	0x3fd34413
   8a950:	7ff00000 	.word	0x7ff00000
   8a954:	0008e601 	.word	0x0008e601
   8a958:	3ff80000 	.word	0x3ff80000
   8a95c:	0008e7a0 	.word	0x0008e7a0
   8a960:	0008e648 	.word	0x0008e648
   8a964:	0008e644 	.word	0x0008e644
   8a968:	eba8 0505 	sub.w	r5, r8, r5
   8a96c:	1e6b      	subs	r3, r5, #1
   8a96e:	9306      	str	r3, [sp, #24]
   8a970:	f100 84a9 	bmi.w	8b2c6 <_dtoa_r+0xb86>
   8a974:	900e      	str	r0, [sp, #56]	; 0x38
   8a976:	900b      	str	r0, [sp, #44]	; 0x2c
   8a978:	9b06      	ldr	r3, [sp, #24]
   8a97a:	445b      	add	r3, fp
   8a97c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   8a980:	2300      	movs	r3, #0
   8a982:	930d      	str	r3, [sp, #52]	; 0x34
   8a984:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a986:	2b09      	cmp	r3, #9
   8a988:	d998      	bls.n	8a8bc <_dtoa_r+0x17c>
   8a98a:	2300      	movs	r3, #0
   8a98c:	2501      	movs	r5, #1
   8a98e:	9324      	str	r3, [sp, #144]	; 0x90
   8a990:	9325      	str	r3, [sp, #148]	; 0x94
   8a992:	f04f 33ff 	mov.w	r3, #4294967295
   8a996:	950c      	str	r5, [sp, #48]	; 0x30
   8a998:	930a      	str	r3, [sp, #40]	; 0x28
   8a99a:	2100      	movs	r1, #0
   8a99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a99e:	6461      	str	r1, [r4, #68]	; 0x44
   8a9a0:	9312      	str	r3, [sp, #72]	; 0x48
   8a9a2:	4620      	mov	r0, r4
   8a9a4:	f001 fef4 	bl	8c790 <_Balloc>
   8a9a8:	9003      	str	r0, [sp, #12]
   8a9aa:	2800      	cmp	r0, #0
   8a9ac:	f000 8607 	beq.w	8b5be <_dtoa_r+0xe7e>
   8a9b0:	9b03      	ldr	r3, [sp, #12]
   8a9b2:	6423      	str	r3, [r4, #64]	; 0x40
   8a9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a9b6:	2b0e      	cmp	r3, #14
   8a9b8:	f200 80e9 	bhi.w	8ab8e <_dtoa_r+0x44e>
   8a9bc:	2d00      	cmp	r5, #0
   8a9be:	f000 80e6 	beq.w	8ab8e <_dtoa_r+0x44e>
   8a9c2:	9907      	ldr	r1, [sp, #28]
   8a9c4:	2900      	cmp	r1, #0
   8a9c6:	f340 8452 	ble.w	8b26e <_dtoa_r+0xb2e>
   8a9ca:	4bb5      	ldr	r3, [pc, #724]	; (8aca0 <_dtoa_r+0x560>)
   8a9cc:	f001 020f 	and.w	r2, r1, #15
   8a9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a9d4:	05c8      	lsls	r0, r1, #23
   8a9d6:	ea4f 1521 	mov.w	r5, r1, asr #4
   8a9da:	e9d3 6700 	ldrd	r6, r7, [r3]
   8a9de:	f140 83ee 	bpl.w	8b1be <_dtoa_r+0xa7e>
   8a9e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a9e6:	4baf      	ldr	r3, [pc, #700]	; (8aca4 <_dtoa_r+0x564>)
   8a9e8:	f04f 0903 	mov.w	r9, #3
   8a9ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8a9f0:	f003 faf0 	bl	8dfd4 <__aeabi_ddiv>
   8a9f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a9f8:	f005 050f 	and.w	r5, r5, #15
   8a9fc:	b18d      	cbz	r5, 8aa22 <_dtoa_r+0x2e2>
   8a9fe:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8aca4 <_dtoa_r+0x564>
   8aa02:	07e9      	lsls	r1, r5, #31
   8aa04:	d509      	bpl.n	8aa1a <_dtoa_r+0x2da>
   8aa06:	e9d8 2300 	ldrd	r2, r3, [r8]
   8aa0a:	4630      	mov	r0, r6
   8aa0c:	4639      	mov	r1, r7
   8aa0e:	f003 f9b7 	bl	8dd80 <__aeabi_dmul>
   8aa12:	4606      	mov	r6, r0
   8aa14:	460f      	mov	r7, r1
   8aa16:	f109 0901 	add.w	r9, r9, #1
   8aa1a:	106d      	asrs	r5, r5, #1
   8aa1c:	f108 0808 	add.w	r8, r8, #8
   8aa20:	d1ef      	bne.n	8aa02 <_dtoa_r+0x2c2>
   8aa22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8aa26:	4632      	mov	r2, r6
   8aa28:	463b      	mov	r3, r7
   8aa2a:	f003 fad3 	bl	8dfd4 <__aeabi_ddiv>
   8aa2e:	4606      	mov	r6, r0
   8aa30:	460f      	mov	r7, r1
   8aa32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8aa34:	b143      	cbz	r3, 8aa48 <_dtoa_r+0x308>
   8aa36:	2200      	movs	r2, #0
   8aa38:	4630      	mov	r0, r6
   8aa3a:	4639      	mov	r1, r7
   8aa3c:	4b9a      	ldr	r3, [pc, #616]	; (8aca8 <_dtoa_r+0x568>)
   8aa3e:	f003 fc11 	bl	8e264 <__aeabi_dcmplt>
   8aa42:	2800      	cmp	r0, #0
   8aa44:	f040 853b 	bne.w	8b4be <_dtoa_r+0xd7e>
   8aa48:	4648      	mov	r0, r9
   8aa4a:	f003 f92f 	bl	8dcac <__aeabi_i2d>
   8aa4e:	4632      	mov	r2, r6
   8aa50:	463b      	mov	r3, r7
   8aa52:	f003 f995 	bl	8dd80 <__aeabi_dmul>
   8aa56:	4b95      	ldr	r3, [pc, #596]	; (8acac <_dtoa_r+0x56c>)
   8aa58:	2200      	movs	r2, #0
   8aa5a:	f002 ffdb 	bl	8da14 <__adddf3>
   8aa5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa60:	4680      	mov	r8, r0
   8aa62:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8aa66:	2b00      	cmp	r3, #0
   8aa68:	f000 83ce 	beq.w	8b208 <_dtoa_r+0xac8>
   8aa6c:	9b07      	ldr	r3, [sp, #28]
   8aa6e:	9313      	str	r3, [sp, #76]	; 0x4c
   8aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa72:	9310      	str	r3, [sp, #64]	; 0x40
   8aa74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8aa76:	2b00      	cmp	r3, #0
   8aa78:	f000 84b7 	beq.w	8b3ea <_dtoa_r+0xcaa>
   8aa7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8aa7e:	4b88      	ldr	r3, [pc, #544]	; (8aca0 <_dtoa_r+0x560>)
   8aa80:	2000      	movs	r0, #0
   8aa82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8aa86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8aa8a:	4989      	ldr	r1, [pc, #548]	; (8acb0 <_dtoa_r+0x570>)
   8aa8c:	f003 faa2 	bl	8dfd4 <__aeabi_ddiv>
   8aa90:	4642      	mov	r2, r8
   8aa92:	464b      	mov	r3, r9
   8aa94:	f002 ffbc 	bl	8da10 <__aeabi_dsub>
   8aa98:	4602      	mov	r2, r0
   8aa9a:	460b      	mov	r3, r1
   8aa9c:	4630      	mov	r0, r6
   8aa9e:	4639      	mov	r1, r7
   8aaa0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8aaa4:	f003 fc1c 	bl	8e2e0 <__aeabi_d2iz>
   8aaa8:	4680      	mov	r8, r0
   8aaaa:	f003 f8ff 	bl	8dcac <__aeabi_i2d>
   8aaae:	4602      	mov	r2, r0
   8aab0:	460b      	mov	r3, r1
   8aab2:	4630      	mov	r0, r6
   8aab4:	4639      	mov	r1, r7
   8aab6:	f002 ffab 	bl	8da10 <__aeabi_dsub>
   8aaba:	9d03      	ldr	r5, [sp, #12]
   8aabc:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8aac0:	4606      	mov	r6, r0
   8aac2:	460f      	mov	r7, r1
   8aac4:	4602      	mov	r2, r0
   8aac6:	f805 3b01 	strb.w	r3, [r5], #1
   8aaca:	460b      	mov	r3, r1
   8aacc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8aad0:	f003 fbe6 	bl	8e2a0 <__aeabi_dcmpgt>
   8aad4:	2800      	cmp	r0, #0
   8aad6:	f040 853b 	bne.w	8b550 <_dtoa_r+0xe10>
   8aada:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8aade:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8aae2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8aae6:	f04f 0900 	mov.w	r9, #0
   8aaea:	9410      	str	r4, [sp, #64]	; 0x40
   8aaec:	e02a      	b.n	8ab44 <_dtoa_r+0x404>
   8aaee:	f109 0901 	add.w	r9, r9, #1
   8aaf2:	45c1      	cmp	r9, r8
   8aaf4:	da48      	bge.n	8ab88 <_dtoa_r+0x448>
   8aaf6:	4650      	mov	r0, sl
   8aaf8:	4659      	mov	r1, fp
   8aafa:	2200      	movs	r2, #0
   8aafc:	4b6d      	ldr	r3, [pc, #436]	; (8acb4 <_dtoa_r+0x574>)
   8aafe:	f003 f93f 	bl	8dd80 <__aeabi_dmul>
   8ab02:	2200      	movs	r2, #0
   8ab04:	4b6b      	ldr	r3, [pc, #428]	; (8acb4 <_dtoa_r+0x574>)
   8ab06:	4682      	mov	sl, r0
   8ab08:	468b      	mov	fp, r1
   8ab0a:	4630      	mov	r0, r6
   8ab0c:	4639      	mov	r1, r7
   8ab0e:	f003 f937 	bl	8dd80 <__aeabi_dmul>
   8ab12:	460f      	mov	r7, r1
   8ab14:	4606      	mov	r6, r0
   8ab16:	f003 fbe3 	bl	8e2e0 <__aeabi_d2iz>
   8ab1a:	4604      	mov	r4, r0
   8ab1c:	f003 f8c6 	bl	8dcac <__aeabi_i2d>
   8ab20:	4602      	mov	r2, r0
   8ab22:	460b      	mov	r3, r1
   8ab24:	4630      	mov	r0, r6
   8ab26:	4639      	mov	r1, r7
   8ab28:	f002 ff72 	bl	8da10 <__aeabi_dsub>
   8ab2c:	3430      	adds	r4, #48	; 0x30
   8ab2e:	4652      	mov	r2, sl
   8ab30:	465b      	mov	r3, fp
   8ab32:	f805 4b01 	strb.w	r4, [r5], #1
   8ab36:	4606      	mov	r6, r0
   8ab38:	460f      	mov	r7, r1
   8ab3a:	f003 fb93 	bl	8e264 <__aeabi_dcmplt>
   8ab3e:	2800      	cmp	r0, #0
   8ab40:	f040 8503 	bne.w	8b54a <_dtoa_r+0xe0a>
   8ab44:	4632      	mov	r2, r6
   8ab46:	463b      	mov	r3, r7
   8ab48:	2000      	movs	r0, #0
   8ab4a:	4957      	ldr	r1, [pc, #348]	; (8aca8 <_dtoa_r+0x568>)
   8ab4c:	f002 ff60 	bl	8da10 <__aeabi_dsub>
   8ab50:	4652      	mov	r2, sl
   8ab52:	465b      	mov	r3, fp
   8ab54:	f003 fb86 	bl	8e264 <__aeabi_dcmplt>
   8ab58:	2800      	cmp	r0, #0
   8ab5a:	d0c8      	beq.n	8aaee <_dtoa_r+0x3ae>
   8ab5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8ab5e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8ab62:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8ab64:	9a03      	ldr	r2, [sp, #12]
   8ab66:	9307      	str	r3, [sp, #28]
   8ab68:	e002      	b.n	8ab70 <_dtoa_r+0x430>
   8ab6a:	4295      	cmp	r5, r2
   8ab6c:	f000 84d2 	beq.w	8b514 <_dtoa_r+0xdd4>
   8ab70:	46a9      	mov	r9, r5
   8ab72:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8ab76:	2b39      	cmp	r3, #57	; 0x39
   8ab78:	d0f7      	beq.n	8ab6a <_dtoa_r+0x42a>
   8ab7a:	3301      	adds	r3, #1
   8ab7c:	b2db      	uxtb	r3, r3
   8ab7e:	702b      	strb	r3, [r5, #0]
   8ab80:	9b07      	ldr	r3, [sp, #28]
   8ab82:	3301      	adds	r3, #1
   8ab84:	9307      	str	r3, [sp, #28]
   8ab86:	e1a0      	b.n	8aeca <_dtoa_r+0x78a>
   8ab88:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8ab8a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8ab8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8ab90:	2b00      	cmp	r3, #0
   8ab92:	f2c0 8093 	blt.w	8acbc <_dtoa_r+0x57c>
   8ab96:	9a07      	ldr	r2, [sp, #28]
   8ab98:	2a0e      	cmp	r2, #14
   8ab9a:	f300 808f 	bgt.w	8acbc <_dtoa_r+0x57c>
   8ab9e:	4b40      	ldr	r3, [pc, #256]	; (8aca0 <_dtoa_r+0x560>)
   8aba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aba8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8abac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8abae:	2b00      	cmp	r3, #0
   8abb0:	da1a      	bge.n	8abe8 <_dtoa_r+0x4a8>
   8abb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8abb4:	2b00      	cmp	r3, #0
   8abb6:	dc17      	bgt.n	8abe8 <_dtoa_r+0x4a8>
   8abb8:	f040 833f 	bne.w	8b23a <_dtoa_r+0xafa>
   8abbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8abc0:	2200      	movs	r2, #0
   8abc2:	4b3d      	ldr	r3, [pc, #244]	; (8acb8 <_dtoa_r+0x578>)
   8abc4:	f003 f8dc 	bl	8dd80 <__aeabi_dmul>
   8abc8:	4602      	mov	r2, r0
   8abca:	460b      	mov	r3, r1
   8abcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8abd0:	f003 fb52 	bl	8e278 <__aeabi_dcmple>
   8abd4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   8abd8:	4645      	mov	r5, r8
   8abda:	2800      	cmp	r0, #0
   8abdc:	f000 82cd 	beq.w	8b17a <_dtoa_r+0xa3a>
   8abe0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8abe2:	9f03      	ldr	r7, [sp, #12]
   8abe4:	43de      	mvns	r6, r3
   8abe6:	e2d0      	b.n	8b18a <_dtoa_r+0xa4a>
   8abe8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8abec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8abf0:	4632      	mov	r2, r6
   8abf2:	463b      	mov	r3, r7
   8abf4:	f003 f9ee 	bl	8dfd4 <__aeabi_ddiv>
   8abf8:	f003 fb72 	bl	8e2e0 <__aeabi_d2iz>
   8abfc:	4680      	mov	r8, r0
   8abfe:	f003 f855 	bl	8dcac <__aeabi_i2d>
   8ac02:	4632      	mov	r2, r6
   8ac04:	463b      	mov	r3, r7
   8ac06:	f003 f8bb 	bl	8dd80 <__aeabi_dmul>
   8ac0a:	460b      	mov	r3, r1
   8ac0c:	4602      	mov	r2, r0
   8ac0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8ac12:	f002 fefd 	bl	8da10 <__aeabi_dsub>
   8ac16:	9d03      	ldr	r5, [sp, #12]
   8ac18:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8ac1c:	f805 3b01 	strb.w	r3, [r5], #1
   8ac20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ac22:	2b01      	cmp	r3, #1
   8ac24:	f000 837f 	beq.w	8b326 <_dtoa_r+0xbe6>
   8ac28:	f8cd a018 	str.w	sl, [sp, #24]
   8ac2c:	f04f 0901 	mov.w	r9, #1
   8ac30:	469b      	mov	fp, r3
   8ac32:	46aa      	mov	sl, r5
   8ac34:	9408      	str	r4, [sp, #32]
   8ac36:	e01d      	b.n	8ac74 <_dtoa_r+0x534>
   8ac38:	4632      	mov	r2, r6
   8ac3a:	463b      	mov	r3, r7
   8ac3c:	4620      	mov	r0, r4
   8ac3e:	4629      	mov	r1, r5
   8ac40:	f003 f9c8 	bl	8dfd4 <__aeabi_ddiv>
   8ac44:	f003 fb4c 	bl	8e2e0 <__aeabi_d2iz>
   8ac48:	4680      	mov	r8, r0
   8ac4a:	f003 f82f 	bl	8dcac <__aeabi_i2d>
   8ac4e:	4632      	mov	r2, r6
   8ac50:	463b      	mov	r3, r7
   8ac52:	f003 f895 	bl	8dd80 <__aeabi_dmul>
   8ac56:	f109 0901 	add.w	r9, r9, #1
   8ac5a:	460b      	mov	r3, r1
   8ac5c:	4602      	mov	r2, r0
   8ac5e:	4629      	mov	r1, r5
   8ac60:	4620      	mov	r0, r4
   8ac62:	f002 fed5 	bl	8da10 <__aeabi_dsub>
   8ac66:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8ac6a:	45cb      	cmp	fp, r9
   8ac6c:	f80a 3b01 	strb.w	r3, [sl], #1
   8ac70:	f000 8355 	beq.w	8b31e <_dtoa_r+0xbde>
   8ac74:	2200      	movs	r2, #0
   8ac76:	4b0f      	ldr	r3, [pc, #60]	; (8acb4 <_dtoa_r+0x574>)
   8ac78:	f003 f882 	bl	8dd80 <__aeabi_dmul>
   8ac7c:	2200      	movs	r2, #0
   8ac7e:	2300      	movs	r3, #0
   8ac80:	4604      	mov	r4, r0
   8ac82:	460d      	mov	r5, r1
   8ac84:	f003 fae4 	bl	8e250 <__aeabi_dcmpeq>
   8ac88:	2800      	cmp	r0, #0
   8ac8a:	d0d5      	beq.n	8ac38 <_dtoa_r+0x4f8>
   8ac8c:	4655      	mov	r5, sl
   8ac8e:	9c08      	ldr	r4, [sp, #32]
   8ac90:	f8dd a018 	ldr.w	sl, [sp, #24]
   8ac94:	9b07      	ldr	r3, [sp, #28]
   8ac96:	46a9      	mov	r9, r5
   8ac98:	3301      	adds	r3, #1
   8ac9a:	9307      	str	r3, [sp, #28]
   8ac9c:	e115      	b.n	8aeca <_dtoa_r+0x78a>
   8ac9e:	bf00      	nop
   8aca0:	0008e7a0 	.word	0x0008e7a0
   8aca4:	0008e778 	.word	0x0008e778
   8aca8:	3ff00000 	.word	0x3ff00000
   8acac:	401c0000 	.word	0x401c0000
   8acb0:	3fe00000 	.word	0x3fe00000
   8acb4:	40240000 	.word	0x40240000
   8acb8:	40140000 	.word	0x40140000
   8acbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8acbe:	2a00      	cmp	r2, #0
   8acc0:	d03d      	beq.n	8ad3e <_dtoa_r+0x5fe>
   8acc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8acc4:	2a01      	cmp	r2, #1
   8acc6:	f340 82bc 	ble.w	8b242 <_dtoa_r+0xb02>
   8acca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8accc:	1e5f      	subs	r7, r3, #1
   8acce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8acd0:	42bb      	cmp	r3, r7
   8acd2:	f2c0 826e 	blt.w	8b1b2 <_dtoa_r+0xa72>
   8acd6:	1bdf      	subs	r7, r3, r7
   8acd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8acda:	2b00      	cmp	r3, #0
   8acdc:	f2c0 8354 	blt.w	8b388 <_dtoa_r+0xc48>
   8ace0:	9a06      	ldr	r2, [sp, #24]
   8ace2:	4611      	mov	r1, r2
   8ace4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8ace6:	4419      	add	r1, r3
   8ace8:	4616      	mov	r6, r2
   8acea:	441a      	add	r2, r3
   8acec:	9106      	str	r1, [sp, #24]
   8acee:	920b      	str	r2, [sp, #44]	; 0x2c
   8acf0:	2101      	movs	r1, #1
   8acf2:	4620      	mov	r0, r4
   8acf4:	f001 fe1a 	bl	8c92c <__i2b>
   8acf8:	4605      	mov	r5, r0
   8acfa:	e023      	b.n	8ad44 <_dtoa_r+0x604>
   8acfc:	2301      	movs	r3, #1
   8acfe:	eba8 0505 	sub.w	r5, r8, r5
   8ad02:	930e      	str	r3, [sp, #56]	; 0x38
   8ad04:	1e6b      	subs	r3, r5, #1
   8ad06:	9306      	str	r3, [sp, #24]
   8ad08:	f57f adc5 	bpl.w	8a896 <_dtoa_r+0x156>
   8ad0c:	f1c5 0301 	rsb	r3, r5, #1
   8ad10:	930b      	str	r3, [sp, #44]	; 0x2c
   8ad12:	2300      	movs	r3, #0
   8ad14:	9306      	str	r3, [sp, #24]
   8ad16:	e5c0      	b.n	8a89a <_dtoa_r+0x15a>
   8ad18:	4658      	mov	r0, fp
   8ad1a:	f002 ffc7 	bl	8dcac <__aeabi_i2d>
   8ad1e:	4632      	mov	r2, r6
   8ad20:	463b      	mov	r3, r7
   8ad22:	f003 fa95 	bl	8e250 <__aeabi_dcmpeq>
   8ad26:	2800      	cmp	r0, #0
   8ad28:	f47f ad9c 	bne.w	8a864 <_dtoa_r+0x124>
   8ad2c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8ad30:	e598      	b.n	8a864 <_dtoa_r+0x124>
   8ad32:	4bc7      	ldr	r3, [pc, #796]	; (8b050 <_dtoa_r+0x910>)
   8ad34:	9303      	str	r3, [sp, #12]
   8ad36:	9803      	ldr	r0, [sp, #12]
   8ad38:	b01b      	add	sp, #108	; 0x6c
   8ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad3e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8ad40:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8ad44:	2e00      	cmp	r6, #0
   8ad46:	dd0c      	ble.n	8ad62 <_dtoa_r+0x622>
   8ad48:	9a06      	ldr	r2, [sp, #24]
   8ad4a:	2a00      	cmp	r2, #0
   8ad4c:	dd09      	ble.n	8ad62 <_dtoa_r+0x622>
   8ad4e:	42b2      	cmp	r2, r6
   8ad50:	4613      	mov	r3, r2
   8ad52:	bfa8      	it	ge
   8ad54:	4633      	movge	r3, r6
   8ad56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8ad58:	1af6      	subs	r6, r6, r3
   8ad5a:	1ac9      	subs	r1, r1, r3
   8ad5c:	1ad3      	subs	r3, r2, r3
   8ad5e:	910b      	str	r1, [sp, #44]	; 0x2c
   8ad60:	9306      	str	r3, [sp, #24]
   8ad62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ad64:	b1d3      	cbz	r3, 8ad9c <_dtoa_r+0x65c>
   8ad66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ad68:	2b00      	cmp	r3, #0
   8ad6a:	f000 81a3 	beq.w	8b0b4 <_dtoa_r+0x974>
   8ad6e:	2f00      	cmp	r7, #0
   8ad70:	dd10      	ble.n	8ad94 <_dtoa_r+0x654>
   8ad72:	4629      	mov	r1, r5
   8ad74:	463a      	mov	r2, r7
   8ad76:	4620      	mov	r0, r4
   8ad78:	f001 fe9e 	bl	8cab8 <__pow5mult>
   8ad7c:	4652      	mov	r2, sl
   8ad7e:	4601      	mov	r1, r0
   8ad80:	4605      	mov	r5, r0
   8ad82:	4620      	mov	r0, r4
   8ad84:	f001 fde8 	bl	8c958 <__multiply>
   8ad88:	4603      	mov	r3, r0
   8ad8a:	4651      	mov	r1, sl
   8ad8c:	4620      	mov	r0, r4
   8ad8e:	469a      	mov	sl, r3
   8ad90:	f001 fd24 	bl	8c7dc <_Bfree>
   8ad94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ad96:	1bda      	subs	r2, r3, r7
   8ad98:	f040 818d 	bne.w	8b0b6 <_dtoa_r+0x976>
   8ad9c:	2101      	movs	r1, #1
   8ad9e:	4620      	mov	r0, r4
   8ada0:	f001 fdc4 	bl	8c92c <__i2b>
   8ada4:	f1bb 0f00 	cmp.w	fp, #0
   8ada8:	4680      	mov	r8, r0
   8adaa:	f300 80b3 	bgt.w	8af14 <_dtoa_r+0x7d4>
   8adae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8adb0:	2b01      	cmp	r3, #1
   8adb2:	f340 818a 	ble.w	8b0ca <_dtoa_r+0x98a>
   8adb6:	f04f 0900 	mov.w	r9, #0
   8adba:	2001      	movs	r0, #1
   8adbc:	f1bb 0f00 	cmp.w	fp, #0
   8adc0:	f040 80b4 	bne.w	8af2c <_dtoa_r+0x7ec>
   8adc4:	9a06      	ldr	r2, [sp, #24]
   8adc6:	4410      	add	r0, r2
   8adc8:	f010 001f 	ands.w	r0, r0, #31
   8adcc:	f000 8092 	beq.w	8aef4 <_dtoa_r+0x7b4>
   8add0:	f1c0 0320 	rsb	r3, r0, #32
   8add4:	2b04      	cmp	r3, #4
   8add6:	f340 83f9 	ble.w	8b5cc <_dtoa_r+0xe8c>
   8adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8addc:	f1c0 001c 	rsb	r0, r0, #28
   8ade0:	4403      	add	r3, r0
   8ade2:	4402      	add	r2, r0
   8ade4:	930b      	str	r3, [sp, #44]	; 0x2c
   8ade6:	4406      	add	r6, r0
   8ade8:	9206      	str	r2, [sp, #24]
   8adea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8adec:	2b00      	cmp	r3, #0
   8adee:	dd05      	ble.n	8adfc <_dtoa_r+0x6bc>
   8adf0:	4651      	mov	r1, sl
   8adf2:	461a      	mov	r2, r3
   8adf4:	4620      	mov	r0, r4
   8adf6:	f001 feab 	bl	8cb50 <__lshift>
   8adfa:	4682      	mov	sl, r0
   8adfc:	9b06      	ldr	r3, [sp, #24]
   8adfe:	2b00      	cmp	r3, #0
   8ae00:	dd05      	ble.n	8ae0e <_dtoa_r+0x6ce>
   8ae02:	4641      	mov	r1, r8
   8ae04:	461a      	mov	r2, r3
   8ae06:	4620      	mov	r0, r4
   8ae08:	f001 fea2 	bl	8cb50 <__lshift>
   8ae0c:	4680      	mov	r8, r0
   8ae0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8ae10:	2b00      	cmp	r3, #0
   8ae12:	f040 8135 	bne.w	8b080 <_dtoa_r+0x940>
   8ae16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ae18:	2b00      	cmp	r3, #0
   8ae1a:	f340 811b 	ble.w	8b054 <_dtoa_r+0x914>
   8ae1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ae20:	2b00      	cmp	r3, #0
   8ae22:	f040 809a 	bne.w	8af5a <_dtoa_r+0x81a>
   8ae26:	9b07      	ldr	r3, [sp, #28]
   8ae28:	3301      	adds	r3, #1
   8ae2a:	9307      	str	r3, [sp, #28]
   8ae2c:	2601      	movs	r6, #1
   8ae2e:	9f03      	ldr	r7, [sp, #12]
   8ae30:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8ae34:	e007      	b.n	8ae46 <_dtoa_r+0x706>
   8ae36:	4651      	mov	r1, sl
   8ae38:	2300      	movs	r3, #0
   8ae3a:	220a      	movs	r2, #10
   8ae3c:	4620      	mov	r0, r4
   8ae3e:	f001 fcd7 	bl	8c7f0 <__multadd>
   8ae42:	4682      	mov	sl, r0
   8ae44:	3601      	adds	r6, #1
   8ae46:	4641      	mov	r1, r8
   8ae48:	4650      	mov	r0, sl
   8ae4a:	f7ff fbe9 	bl	8a620 <quorem>
   8ae4e:	454e      	cmp	r6, r9
   8ae50:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8ae54:	f807 3b01 	strb.w	r3, [r7], #1
   8ae58:	dbed      	blt.n	8ae36 <_dtoa_r+0x6f6>
   8ae5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8ae5c:	2600      	movs	r6, #0
   8ae5e:	2a00      	cmp	r2, #0
   8ae60:	bfcc      	ite	gt
   8ae62:	4693      	movgt	fp, r2
   8ae64:	f04f 0b01 	movle.w	fp, #1
   8ae68:	9a03      	ldr	r2, [sp, #12]
   8ae6a:	4493      	add	fp, r2
   8ae6c:	4651      	mov	r1, sl
   8ae6e:	2201      	movs	r2, #1
   8ae70:	4620      	mov	r0, r4
   8ae72:	9304      	str	r3, [sp, #16]
   8ae74:	f001 fe6c 	bl	8cb50 <__lshift>
   8ae78:	4641      	mov	r1, r8
   8ae7a:	4682      	mov	sl, r0
   8ae7c:	f001 fedc 	bl	8cc38 <__mcmp>
   8ae80:	2800      	cmp	r0, #0
   8ae82:	f340 81a8 	ble.w	8b1d6 <_dtoa_r+0xa96>
   8ae86:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8ae8a:	9a03      	ldr	r2, [sp, #12]
   8ae8c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8ae90:	e004      	b.n	8ae9c <_dtoa_r+0x75c>
   8ae92:	455a      	cmp	r2, fp
   8ae94:	f000 81e4 	beq.w	8b260 <_dtoa_r+0xb20>
   8ae98:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8ae9c:	2b39      	cmp	r3, #57	; 0x39
   8ae9e:	f10b 0901 	add.w	r9, fp, #1
   8aea2:	d0f6      	beq.n	8ae92 <_dtoa_r+0x752>
   8aea4:	3301      	adds	r3, #1
   8aea6:	f88b 3000 	strb.w	r3, [fp]
   8aeaa:	4641      	mov	r1, r8
   8aeac:	4620      	mov	r0, r4
   8aeae:	f001 fc95 	bl	8c7dc <_Bfree>
   8aeb2:	b155      	cbz	r5, 8aeca <_dtoa_r+0x78a>
   8aeb4:	b12e      	cbz	r6, 8aec2 <_dtoa_r+0x782>
   8aeb6:	42ae      	cmp	r6, r5
   8aeb8:	d003      	beq.n	8aec2 <_dtoa_r+0x782>
   8aeba:	4631      	mov	r1, r6
   8aebc:	4620      	mov	r0, r4
   8aebe:	f001 fc8d 	bl	8c7dc <_Bfree>
   8aec2:	4629      	mov	r1, r5
   8aec4:	4620      	mov	r0, r4
   8aec6:	f001 fc89 	bl	8c7dc <_Bfree>
   8aeca:	4651      	mov	r1, sl
   8aecc:	4620      	mov	r0, r4
   8aece:	f001 fc85 	bl	8c7dc <_Bfree>
   8aed2:	2300      	movs	r3, #0
   8aed4:	f889 3000 	strb.w	r3, [r9]
   8aed8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8aeda:	461a      	mov	r2, r3
   8aedc:	9b07      	ldr	r3, [sp, #28]
   8aede:	6013      	str	r3, [r2, #0]
   8aee0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8aee2:	2b00      	cmp	r3, #0
   8aee4:	f43f ac67 	beq.w	8a7b6 <_dtoa_r+0x76>
   8aee8:	9803      	ldr	r0, [sp, #12]
   8aeea:	f8c3 9000 	str.w	r9, [r3]
   8aeee:	b01b      	add	sp, #108	; 0x6c
   8aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aef4:	201c      	movs	r0, #28
   8aef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8aef8:	4406      	add	r6, r0
   8aefa:	4403      	add	r3, r0
   8aefc:	930b      	str	r3, [sp, #44]	; 0x2c
   8aefe:	9b06      	ldr	r3, [sp, #24]
   8af00:	4403      	add	r3, r0
   8af02:	9306      	str	r3, [sp, #24]
   8af04:	e771      	b.n	8adea <_dtoa_r+0x6aa>
   8af06:	2501      	movs	r5, #1
   8af08:	e4de      	b.n	8a8c8 <_dtoa_r+0x188>
   8af0a:	f1c0 0020 	rsb	r0, r0, #32
   8af0e:	fa06 f000 	lsl.w	r0, r6, r0
   8af12:	e474      	b.n	8a7fe <_dtoa_r+0xbe>
   8af14:	4601      	mov	r1, r0
   8af16:	465a      	mov	r2, fp
   8af18:	4620      	mov	r0, r4
   8af1a:	f001 fdcd 	bl	8cab8 <__pow5mult>
   8af1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8af20:	4680      	mov	r8, r0
   8af22:	2b01      	cmp	r3, #1
   8af24:	f340 81d1 	ble.w	8b2ca <_dtoa_r+0xb8a>
   8af28:	f04f 0900 	mov.w	r9, #0
   8af2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8af30:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8af34:	6918      	ldr	r0, [r3, #16]
   8af36:	f001 fca9 	bl	8c88c <__hi0bits>
   8af3a:	f1c0 0020 	rsb	r0, r0, #32
   8af3e:	e741      	b.n	8adc4 <_dtoa_r+0x684>
   8af40:	4629      	mov	r1, r5
   8af42:	2300      	movs	r3, #0
   8af44:	220a      	movs	r2, #10
   8af46:	4620      	mov	r0, r4
   8af48:	f001 fc52 	bl	8c7f0 <__multadd>
   8af4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8af4e:	4605      	mov	r5, r0
   8af50:	2b00      	cmp	r3, #0
   8af52:	f340 8315 	ble.w	8b580 <_dtoa_r+0xe40>
   8af56:	9707      	str	r7, [sp, #28]
   8af58:	930a      	str	r3, [sp, #40]	; 0x28
   8af5a:	2e00      	cmp	r6, #0
   8af5c:	f300 8122 	bgt.w	8b1a4 <_dtoa_r+0xa64>
   8af60:	f1b9 0f00 	cmp.w	r9, #0
   8af64:	f040 81f9 	bne.w	8b35a <_dtoa_r+0xc1a>
   8af68:	462f      	mov	r7, r5
   8af6a:	9903      	ldr	r1, [sp, #12]
   8af6c:	9b04      	ldr	r3, [sp, #16]
   8af6e:	460e      	mov	r6, r1
   8af70:	f003 0201 	and.w	r2, r3, #1
   8af74:	1e4b      	subs	r3, r1, #1
   8af76:	9924      	ldr	r1, [sp, #144]	; 0x90
   8af78:	920c      	str	r2, [sp, #48]	; 0x30
   8af7a:	430a      	orrs	r2, r1
   8af7c:	920b      	str	r2, [sp, #44]	; 0x2c
   8af7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8af80:	441a      	add	r2, r3
   8af82:	920a      	str	r2, [sp, #40]	; 0x28
   8af84:	4641      	mov	r1, r8
   8af86:	4650      	mov	r0, sl
   8af88:	f7ff fb4a 	bl	8a620 <quorem>
   8af8c:	4629      	mov	r1, r5
   8af8e:	4683      	mov	fp, r0
   8af90:	4650      	mov	r0, sl
   8af92:	f001 fe51 	bl	8cc38 <__mcmp>
   8af96:	463a      	mov	r2, r7
   8af98:	4641      	mov	r1, r8
   8af9a:	4681      	mov	r9, r0
   8af9c:	4620      	mov	r0, r4
   8af9e:	f001 fe69 	bl	8cc74 <__mdiff>
   8afa2:	68c2      	ldr	r2, [r0, #12]
   8afa4:	4601      	mov	r1, r0
   8afa6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8afaa:	2a00      	cmp	r2, #0
   8afac:	d142      	bne.n	8b034 <_dtoa_r+0x8f4>
   8afae:	9006      	str	r0, [sp, #24]
   8afb0:	4650      	mov	r0, sl
   8afb2:	9308      	str	r3, [sp, #32]
   8afb4:	f001 fe40 	bl	8cc38 <__mcmp>
   8afb8:	9906      	ldr	r1, [sp, #24]
   8afba:	9004      	str	r0, [sp, #16]
   8afbc:	4620      	mov	r0, r4
   8afbe:	f001 fc0d 	bl	8c7dc <_Bfree>
   8afc2:	9a04      	ldr	r2, [sp, #16]
   8afc4:	9b08      	ldr	r3, [sp, #32]
   8afc6:	b91a      	cbnz	r2, 8afd0 <_dtoa_r+0x890>
   8afc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8afca:	2900      	cmp	r1, #0
   8afcc:	f000 82cb 	beq.w	8b566 <_dtoa_r+0xe26>
   8afd0:	f1b9 0f00 	cmp.w	r9, #0
   8afd4:	f2c0 8185 	blt.w	8b2e2 <_dtoa_r+0xba2>
   8afd8:	9924      	ldr	r1, [sp, #144]	; 0x90
   8afda:	ea41 0909 	orr.w	r9, r1, r9
   8afde:	990c      	ldr	r1, [sp, #48]	; 0x30
   8afe0:	ea51 0109 	orrs.w	r1, r1, r9
   8afe4:	f000 817d 	beq.w	8b2e2 <_dtoa_r+0xba2>
   8afe8:	2a00      	cmp	r2, #0
   8afea:	f300 81d1 	bgt.w	8b390 <_dtoa_r+0xc50>
   8afee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8aff0:	f106 0901 	add.w	r9, r6, #1
   8aff4:	4296      	cmp	r6, r2
   8aff6:	46cb      	mov	fp, r9
   8aff8:	7033      	strb	r3, [r6, #0]
   8affa:	f000 81e3 	beq.w	8b3c4 <_dtoa_r+0xc84>
   8affe:	4651      	mov	r1, sl
   8b000:	2300      	movs	r3, #0
   8b002:	220a      	movs	r2, #10
   8b004:	4620      	mov	r0, r4
   8b006:	f001 fbf3 	bl	8c7f0 <__multadd>
   8b00a:	42bd      	cmp	r5, r7
   8b00c:	4682      	mov	sl, r0
   8b00e:	4629      	mov	r1, r5
   8b010:	f04f 0300 	mov.w	r3, #0
   8b014:	f04f 020a 	mov.w	r2, #10
   8b018:	4620      	mov	r0, r4
   8b01a:	d012      	beq.n	8b042 <_dtoa_r+0x902>
   8b01c:	f001 fbe8 	bl	8c7f0 <__multadd>
   8b020:	4639      	mov	r1, r7
   8b022:	4605      	mov	r5, r0
   8b024:	2300      	movs	r3, #0
   8b026:	220a      	movs	r2, #10
   8b028:	4620      	mov	r0, r4
   8b02a:	f001 fbe1 	bl	8c7f0 <__multadd>
   8b02e:	464e      	mov	r6, r9
   8b030:	4607      	mov	r7, r0
   8b032:	e7a7      	b.n	8af84 <_dtoa_r+0x844>
   8b034:	4620      	mov	r0, r4
   8b036:	9304      	str	r3, [sp, #16]
   8b038:	f001 fbd0 	bl	8c7dc <_Bfree>
   8b03c:	2201      	movs	r2, #1
   8b03e:	9b04      	ldr	r3, [sp, #16]
   8b040:	e7c6      	b.n	8afd0 <_dtoa_r+0x890>
   8b042:	f001 fbd5 	bl	8c7f0 <__multadd>
   8b046:	464e      	mov	r6, r9
   8b048:	4605      	mov	r5, r0
   8b04a:	4607      	mov	r7, r0
   8b04c:	e79a      	b.n	8af84 <_dtoa_r+0x844>
   8b04e:	bf00      	nop
   8b050:	0008e600 	.word	0x0008e600
   8b054:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b056:	2b02      	cmp	r3, #2
   8b058:	dc7e      	bgt.n	8b158 <_dtoa_r+0xa18>
   8b05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b05c:	2b00      	cmp	r3, #0
   8b05e:	f47f af7c 	bne.w	8af5a <_dtoa_r+0x81a>
   8b062:	4641      	mov	r1, r8
   8b064:	4650      	mov	r0, sl
   8b066:	f7ff fadb 	bl	8a620 <quorem>
   8b06a:	9a07      	ldr	r2, [sp, #28]
   8b06c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8b070:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8b074:	3201      	adds	r2, #1
   8b076:	2600      	movs	r6, #0
   8b078:	9207      	str	r2, [sp, #28]
   8b07a:	f80b 3b01 	strb.w	r3, [fp], #1
   8b07e:	e6f5      	b.n	8ae6c <_dtoa_r+0x72c>
   8b080:	4641      	mov	r1, r8
   8b082:	4650      	mov	r0, sl
   8b084:	f001 fdd8 	bl	8cc38 <__mcmp>
   8b088:	2800      	cmp	r0, #0
   8b08a:	f6bf aec4 	bge.w	8ae16 <_dtoa_r+0x6d6>
   8b08e:	4651      	mov	r1, sl
   8b090:	2300      	movs	r3, #0
   8b092:	220a      	movs	r2, #10
   8b094:	4620      	mov	r0, r4
   8b096:	f001 fbab 	bl	8c7f0 <__multadd>
   8b09a:	9b07      	ldr	r3, [sp, #28]
   8b09c:	4682      	mov	sl, r0
   8b09e:	1e5f      	subs	r7, r3, #1
   8b0a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b0a2:	2b00      	cmp	r3, #0
   8b0a4:	f47f af4c 	bne.w	8af40 <_dtoa_r+0x800>
   8b0a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b0aa:	2b00      	cmp	r3, #0
   8b0ac:	f340 8262 	ble.w	8b574 <_dtoa_r+0xe34>
   8b0b0:	930a      	str	r3, [sp, #40]	; 0x28
   8b0b2:	e6bb      	b.n	8ae2c <_dtoa_r+0x6ec>
   8b0b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b0b6:	4651      	mov	r1, sl
   8b0b8:	4620      	mov	r0, r4
   8b0ba:	f001 fcfd 	bl	8cab8 <__pow5mult>
   8b0be:	4682      	mov	sl, r0
   8b0c0:	e66c      	b.n	8ad9c <_dtoa_r+0x65c>
   8b0c2:	4bba      	ldr	r3, [pc, #744]	; (8b3ac <_dtoa_r+0xc6c>)
   8b0c4:	9303      	str	r3, [sp, #12]
   8b0c6:	3303      	adds	r3, #3
   8b0c8:	e419      	b.n	8a8fe <_dtoa_r+0x1be>
   8b0ca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b0ce:	2900      	cmp	r1, #0
   8b0d0:	f47f ae71 	bne.w	8adb6 <_dtoa_r+0x676>
   8b0d4:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b0d8:	2b00      	cmp	r3, #0
   8b0da:	f47f ae6c 	bne.w	8adb6 <_dtoa_r+0x676>
   8b0de:	4bb4      	ldr	r3, [pc, #720]	; (8b3b0 <_dtoa_r+0xc70>)
   8b0e0:	4013      	ands	r3, r2
   8b0e2:	2b00      	cmp	r3, #0
   8b0e4:	f000 822a 	beq.w	8b53c <_dtoa_r+0xdfc>
   8b0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b0ea:	f04f 0901 	mov.w	r9, #1
   8b0ee:	3301      	adds	r3, #1
   8b0f0:	930b      	str	r3, [sp, #44]	; 0x2c
   8b0f2:	9b06      	ldr	r3, [sp, #24]
   8b0f4:	3301      	adds	r3, #1
   8b0f6:	9306      	str	r3, [sp, #24]
   8b0f8:	e65f      	b.n	8adba <_dtoa_r+0x67a>
   8b0fa:	2301      	movs	r3, #1
   8b0fc:	930c      	str	r3, [sp, #48]	; 0x30
   8b0fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b100:	9a07      	ldr	r2, [sp, #28]
   8b102:	4413      	add	r3, r2
   8b104:	9312      	str	r3, [sp, #72]	; 0x48
   8b106:	3301      	adds	r3, #1
   8b108:	2b01      	cmp	r3, #1
   8b10a:	461e      	mov	r6, r3
   8b10c:	bfb8      	it	lt
   8b10e:	2601      	movlt	r6, #1
   8b110:	930a      	str	r3, [sp, #40]	; 0x28
   8b112:	2100      	movs	r1, #0
   8b114:	2e17      	cmp	r6, #23
   8b116:	6461      	str	r1, [r4, #68]	; 0x44
   8b118:	f77f ac43 	ble.w	8a9a2 <_dtoa_r+0x262>
   8b11c:	2201      	movs	r2, #1
   8b11e:	2304      	movs	r3, #4
   8b120:	005b      	lsls	r3, r3, #1
   8b122:	f103 0014 	add.w	r0, r3, #20
   8b126:	42b0      	cmp	r0, r6
   8b128:	4611      	mov	r1, r2
   8b12a:	f102 0201 	add.w	r2, r2, #1
   8b12e:	d9f7      	bls.n	8b120 <_dtoa_r+0x9e0>
   8b130:	6461      	str	r1, [r4, #68]	; 0x44
   8b132:	e436      	b.n	8a9a2 <_dtoa_r+0x262>
   8b134:	2301      	movs	r3, #1
   8b136:	930c      	str	r3, [sp, #48]	; 0x30
   8b138:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b13a:	2b00      	cmp	r3, #0
   8b13c:	dd46      	ble.n	8b1cc <_dtoa_r+0xa8c>
   8b13e:	461e      	mov	r6, r3
   8b140:	9312      	str	r3, [sp, #72]	; 0x48
   8b142:	930a      	str	r3, [sp, #40]	; 0x28
   8b144:	e7e5      	b.n	8b112 <_dtoa_r+0x9d2>
   8b146:	2300      	movs	r3, #0
   8b148:	930c      	str	r3, [sp, #48]	; 0x30
   8b14a:	e7d8      	b.n	8b0fe <_dtoa_r+0x9be>
   8b14c:	2300      	movs	r3, #0
   8b14e:	930c      	str	r3, [sp, #48]	; 0x30
   8b150:	e7f2      	b.n	8b138 <_dtoa_r+0x9f8>
   8b152:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b154:	9707      	str	r7, [sp, #28]
   8b156:	930a      	str	r3, [sp, #40]	; 0x28
   8b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b15a:	2b00      	cmp	r3, #0
   8b15c:	f47f ad40 	bne.w	8abe0 <_dtoa_r+0x4a0>
   8b160:	4641      	mov	r1, r8
   8b162:	2205      	movs	r2, #5
   8b164:	4620      	mov	r0, r4
   8b166:	f001 fb43 	bl	8c7f0 <__multadd>
   8b16a:	4680      	mov	r8, r0
   8b16c:	4650      	mov	r0, sl
   8b16e:	4641      	mov	r1, r8
   8b170:	f001 fd62 	bl	8cc38 <__mcmp>
   8b174:	2800      	cmp	r0, #0
   8b176:	f77f ad33 	ble.w	8abe0 <_dtoa_r+0x4a0>
   8b17a:	9f03      	ldr	r7, [sp, #12]
   8b17c:	2231      	movs	r2, #49	; 0x31
   8b17e:	463b      	mov	r3, r7
   8b180:	9e07      	ldr	r6, [sp, #28]
   8b182:	f803 2b01 	strb.w	r2, [r3], #1
   8b186:	3601      	adds	r6, #1
   8b188:	9303      	str	r3, [sp, #12]
   8b18a:	4641      	mov	r1, r8
   8b18c:	4620      	mov	r0, r4
   8b18e:	f001 fb25 	bl	8c7dc <_Bfree>
   8b192:	1c73      	adds	r3, r6, #1
   8b194:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8b198:	9307      	str	r3, [sp, #28]
   8b19a:	9703      	str	r7, [sp, #12]
   8b19c:	2d00      	cmp	r5, #0
   8b19e:	f47f ae90 	bne.w	8aec2 <_dtoa_r+0x782>
   8b1a2:	e692      	b.n	8aeca <_dtoa_r+0x78a>
   8b1a4:	4629      	mov	r1, r5
   8b1a6:	4632      	mov	r2, r6
   8b1a8:	4620      	mov	r0, r4
   8b1aa:	f001 fcd1 	bl	8cb50 <__lshift>
   8b1ae:	4605      	mov	r5, r0
   8b1b0:	e6d6      	b.n	8af60 <_dtoa_r+0x820>
   8b1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b1b4:	970d      	str	r7, [sp, #52]	; 0x34
   8b1b6:	1afb      	subs	r3, r7, r3
   8b1b8:	449b      	add	fp, r3
   8b1ba:	2700      	movs	r7, #0
   8b1bc:	e58c      	b.n	8acd8 <_dtoa_r+0x598>
   8b1be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8b1c2:	f04f 0902 	mov.w	r9, #2
   8b1c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8b1ca:	e417      	b.n	8a9fc <_dtoa_r+0x2bc>
   8b1cc:	2301      	movs	r3, #1
   8b1ce:	9325      	str	r3, [sp, #148]	; 0x94
   8b1d0:	930a      	str	r3, [sp, #40]	; 0x28
   8b1d2:	f7ff bbe2 	b.w	8a99a <_dtoa_r+0x25a>
   8b1d6:	d103      	bne.n	8b1e0 <_dtoa_r+0xaa0>
   8b1d8:	9b04      	ldr	r3, [sp, #16]
   8b1da:	07db      	lsls	r3, r3, #31
   8b1dc:	f53f ae53 	bmi.w	8ae86 <_dtoa_r+0x746>
   8b1e0:	46d9      	mov	r9, fp
   8b1e2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8b1e6:	2b30      	cmp	r3, #48	; 0x30
   8b1e8:	d0fa      	beq.n	8b1e0 <_dtoa_r+0xaa0>
   8b1ea:	e65e      	b.n	8aeaa <_dtoa_r+0x76a>
   8b1ec:	4648      	mov	r0, r9
   8b1ee:	f002 fd5d 	bl	8dcac <__aeabi_i2d>
   8b1f2:	4632      	mov	r2, r6
   8b1f4:	463b      	mov	r3, r7
   8b1f6:	f002 fdc3 	bl	8dd80 <__aeabi_dmul>
   8b1fa:	2200      	movs	r2, #0
   8b1fc:	4b6d      	ldr	r3, [pc, #436]	; (8b3b4 <_dtoa_r+0xc74>)
   8b1fe:	f002 fc09 	bl	8da14 <__adddf3>
   8b202:	4680      	mov	r8, r0
   8b204:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b208:	4630      	mov	r0, r6
   8b20a:	4639      	mov	r1, r7
   8b20c:	2200      	movs	r2, #0
   8b20e:	4b6a      	ldr	r3, [pc, #424]	; (8b3b8 <_dtoa_r+0xc78>)
   8b210:	f002 fbfe 	bl	8da10 <__aeabi_dsub>
   8b214:	4642      	mov	r2, r8
   8b216:	464b      	mov	r3, r9
   8b218:	4606      	mov	r6, r0
   8b21a:	460f      	mov	r7, r1
   8b21c:	f003 f840 	bl	8e2a0 <__aeabi_dcmpgt>
   8b220:	2800      	cmp	r0, #0
   8b222:	f040 8187 	bne.w	8b534 <_dtoa_r+0xdf4>
   8b226:	4642      	mov	r2, r8
   8b228:	4630      	mov	r0, r6
   8b22a:	4639      	mov	r1, r7
   8b22c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8b230:	f003 f818 	bl	8e264 <__aeabi_dcmplt>
   8b234:	2800      	cmp	r0, #0
   8b236:	f43f acaa 	beq.w	8ab8e <_dtoa_r+0x44e>
   8b23a:	f04f 0800 	mov.w	r8, #0
   8b23e:	4645      	mov	r5, r8
   8b240:	e4ce      	b.n	8abe0 <_dtoa_r+0x4a0>
   8b242:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8b244:	2a00      	cmp	r2, #0
   8b246:	f000 80c3 	beq.w	8b3d0 <_dtoa_r+0xc90>
   8b24a:	9a06      	ldr	r2, [sp, #24]
   8b24c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8b250:	441a      	add	r2, r3
   8b252:	9206      	str	r2, [sp, #24]
   8b254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8b256:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b258:	4616      	mov	r6, r2
   8b25a:	441a      	add	r2, r3
   8b25c:	920b      	str	r2, [sp, #44]	; 0x2c
   8b25e:	e547      	b.n	8acf0 <_dtoa_r+0x5b0>
   8b260:	2331      	movs	r3, #49	; 0x31
   8b262:	9a07      	ldr	r2, [sp, #28]
   8b264:	3201      	adds	r2, #1
   8b266:	9207      	str	r2, [sp, #28]
   8b268:	9a03      	ldr	r2, [sp, #12]
   8b26a:	7013      	strb	r3, [r2, #0]
   8b26c:	e61d      	b.n	8aeaa <_dtoa_r+0x76a>
   8b26e:	f000 814b 	beq.w	8b508 <_dtoa_r+0xdc8>
   8b272:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b276:	9b07      	ldr	r3, [sp, #28]
   8b278:	425d      	negs	r5, r3
   8b27a:	4b50      	ldr	r3, [pc, #320]	; (8b3bc <_dtoa_r+0xc7c>)
   8b27c:	f005 020f 	and.w	r2, r5, #15
   8b280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8b284:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b288:	f002 fd7a 	bl	8dd80 <__aeabi_dmul>
   8b28c:	112d      	asrs	r5, r5, #4
   8b28e:	4606      	mov	r6, r0
   8b290:	460f      	mov	r7, r1
   8b292:	f000 817d 	beq.w	8b590 <_dtoa_r+0xe50>
   8b296:	2300      	movs	r3, #0
   8b298:	f04f 0902 	mov.w	r9, #2
   8b29c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8b3c0 <_dtoa_r+0xc80>
   8b2a0:	07ea      	lsls	r2, r5, #31
   8b2a2:	d505      	bpl.n	8b2b0 <_dtoa_r+0xb70>
   8b2a4:	e9d8 2300 	ldrd	r2, r3, [r8]
   8b2a8:	f002 fd6a 	bl	8dd80 <__aeabi_dmul>
   8b2ac:	2301      	movs	r3, #1
   8b2ae:	4499      	add	r9, r3
   8b2b0:	106d      	asrs	r5, r5, #1
   8b2b2:	f108 0808 	add.w	r8, r8, #8
   8b2b6:	d1f3      	bne.n	8b2a0 <_dtoa_r+0xb60>
   8b2b8:	2b00      	cmp	r3, #0
   8b2ba:	f43f abba 	beq.w	8aa32 <_dtoa_r+0x2f2>
   8b2be:	4606      	mov	r6, r0
   8b2c0:	460f      	mov	r7, r1
   8b2c2:	f7ff bbb6 	b.w	8aa32 <_dtoa_r+0x2f2>
   8b2c6:	900e      	str	r0, [sp, #56]	; 0x38
   8b2c8:	e520      	b.n	8ad0c <_dtoa_r+0x5cc>
   8b2ca:	9b04      	ldr	r3, [sp, #16]
   8b2cc:	2b00      	cmp	r3, #0
   8b2ce:	f47f ae2b 	bne.w	8af28 <_dtoa_r+0x7e8>
   8b2d2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b2d6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b2da:	2b00      	cmp	r3, #0
   8b2dc:	f43f aeff 	beq.w	8b0de <_dtoa_r+0x99e>
   8b2e0:	e622      	b.n	8af28 <_dtoa_r+0x7e8>
   8b2e2:	2a00      	cmp	r2, #0
   8b2e4:	dd12      	ble.n	8b30c <_dtoa_r+0xbcc>
   8b2e6:	4651      	mov	r1, sl
   8b2e8:	2201      	movs	r2, #1
   8b2ea:	4620      	mov	r0, r4
   8b2ec:	9304      	str	r3, [sp, #16]
   8b2ee:	f001 fc2f 	bl	8cb50 <__lshift>
   8b2f2:	4641      	mov	r1, r8
   8b2f4:	4682      	mov	sl, r0
   8b2f6:	f001 fc9f 	bl	8cc38 <__mcmp>
   8b2fa:	2800      	cmp	r0, #0
   8b2fc:	9b04      	ldr	r3, [sp, #16]
   8b2fe:	f340 812c 	ble.w	8b55a <_dtoa_r+0xe1a>
   8b302:	2b39      	cmp	r3, #57	; 0x39
   8b304:	f000 810c 	beq.w	8b520 <_dtoa_r+0xde0>
   8b308:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8b30c:	46b1      	mov	r9, r6
   8b30e:	f809 3b01 	strb.w	r3, [r9], #1
   8b312:	9b07      	ldr	r3, [sp, #28]
   8b314:	462e      	mov	r6, r5
   8b316:	3301      	adds	r3, #1
   8b318:	463d      	mov	r5, r7
   8b31a:	9307      	str	r3, [sp, #28]
   8b31c:	e5c5      	b.n	8aeaa <_dtoa_r+0x76a>
   8b31e:	4655      	mov	r5, sl
   8b320:	9c08      	ldr	r4, [sp, #32]
   8b322:	f8dd a018 	ldr.w	sl, [sp, #24]
   8b326:	4602      	mov	r2, r0
   8b328:	460b      	mov	r3, r1
   8b32a:	f002 fb73 	bl	8da14 <__adddf3>
   8b32e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8b332:	4606      	mov	r6, r0
   8b334:	460f      	mov	r7, r1
   8b336:	f002 ffb3 	bl	8e2a0 <__aeabi_dcmpgt>
   8b33a:	b960      	cbnz	r0, 8b356 <_dtoa_r+0xc16>
   8b33c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8b340:	4630      	mov	r0, r6
   8b342:	4639      	mov	r1, r7
   8b344:	f002 ff84 	bl	8e250 <__aeabi_dcmpeq>
   8b348:	2800      	cmp	r0, #0
   8b34a:	f43f aca3 	beq.w	8ac94 <_dtoa_r+0x554>
   8b34e:	f018 0f01 	tst.w	r8, #1
   8b352:	f43f ac9f 	beq.w	8ac94 <_dtoa_r+0x554>
   8b356:	9a03      	ldr	r2, [sp, #12]
   8b358:	e40a      	b.n	8ab70 <_dtoa_r+0x430>
   8b35a:	4620      	mov	r0, r4
   8b35c:	6869      	ldr	r1, [r5, #4]
   8b35e:	f001 fa17 	bl	8c790 <_Balloc>
   8b362:	4606      	mov	r6, r0
   8b364:	2800      	cmp	r0, #0
   8b366:	f000 8117 	beq.w	8b598 <_dtoa_r+0xe58>
   8b36a:	692b      	ldr	r3, [r5, #16]
   8b36c:	f105 010c 	add.w	r1, r5, #12
   8b370:	3302      	adds	r3, #2
   8b372:	009a      	lsls	r2, r3, #2
   8b374:	300c      	adds	r0, #12
   8b376:	f7fc fa5d 	bl	87834 <memcpy>
   8b37a:	4631      	mov	r1, r6
   8b37c:	2201      	movs	r2, #1
   8b37e:	4620      	mov	r0, r4
   8b380:	f001 fbe6 	bl	8cb50 <__lshift>
   8b384:	4607      	mov	r7, r0
   8b386:	e5f0      	b.n	8af6a <_dtoa_r+0x82a>
   8b388:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8b38c:	1a9e      	subs	r6, r3, r2
   8b38e:	e4af      	b.n	8acf0 <_dtoa_r+0x5b0>
   8b390:	2b39      	cmp	r3, #57	; 0x39
   8b392:	f000 80c5 	beq.w	8b520 <_dtoa_r+0xde0>
   8b396:	46b1      	mov	r9, r6
   8b398:	3301      	adds	r3, #1
   8b39a:	f809 3b01 	strb.w	r3, [r9], #1
   8b39e:	9b07      	ldr	r3, [sp, #28]
   8b3a0:	462e      	mov	r6, r5
   8b3a2:	3301      	adds	r3, #1
   8b3a4:	463d      	mov	r5, r7
   8b3a6:	9307      	str	r3, [sp, #28]
   8b3a8:	e57f      	b.n	8aeaa <_dtoa_r+0x76a>
   8b3aa:	bf00      	nop
   8b3ac:	0008e644 	.word	0x0008e644
   8b3b0:	7ff00000 	.word	0x7ff00000
   8b3b4:	401c0000 	.word	0x401c0000
   8b3b8:	40140000 	.word	0x40140000
   8b3bc:	0008e7a0 	.word	0x0008e7a0
   8b3c0:	0008e778 	.word	0x0008e778
   8b3c4:	9a07      	ldr	r2, [sp, #28]
   8b3c6:	462e      	mov	r6, r5
   8b3c8:	3201      	adds	r2, #1
   8b3ca:	463d      	mov	r5, r7
   8b3cc:	9207      	str	r2, [sp, #28]
   8b3ce:	e54d      	b.n	8ae6c <_dtoa_r+0x72c>
   8b3d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8b3d2:	9a06      	ldr	r2, [sp, #24]
   8b3d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b3d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8b3da:	441a      	add	r2, r3
   8b3dc:	9206      	str	r2, [sp, #24]
   8b3de:	460a      	mov	r2, r1
   8b3e0:	441a      	add	r2, r3
   8b3e2:	460e      	mov	r6, r1
   8b3e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b3e6:	920b      	str	r2, [sp, #44]	; 0x2c
   8b3e8:	e482      	b.n	8acf0 <_dtoa_r+0x5b0>
   8b3ea:	9810      	ldr	r0, [sp, #64]	; 0x40
   8b3ec:	497f      	ldr	r1, [pc, #508]	; (8b5ec <_dtoa_r+0xeac>)
   8b3ee:	4642      	mov	r2, r8
   8b3f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8b3f4:	464b      	mov	r3, r9
   8b3f6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8b3fa:	f002 fcc1 	bl	8dd80 <__aeabi_dmul>
   8b3fe:	4602      	mov	r2, r0
   8b400:	460b      	mov	r3, r1
   8b402:	4630      	mov	r0, r6
   8b404:	4639      	mov	r1, r7
   8b406:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8b40a:	f002 ff69 	bl	8e2e0 <__aeabi_d2iz>
   8b40e:	4680      	mov	r8, r0
   8b410:	f002 fc4c 	bl	8dcac <__aeabi_i2d>
   8b414:	460b      	mov	r3, r1
   8b416:	4602      	mov	r2, r0
   8b418:	4639      	mov	r1, r7
   8b41a:	4630      	mov	r0, r6
   8b41c:	f002 faf8 	bl	8da10 <__aeabi_dsub>
   8b420:	4606      	mov	r6, r0
   8b422:	9810      	ldr	r0, [sp, #64]	; 0x40
   8b424:	9d03      	ldr	r5, [sp, #12]
   8b426:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8b42a:	2801      	cmp	r0, #1
   8b42c:	460f      	mov	r7, r1
   8b42e:	f805 3b01 	strb.w	r3, [r5], #1
   8b432:	d01e      	beq.n	8b472 <_dtoa_r+0xd32>
   8b434:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8b436:	9a03      	ldr	r2, [sp, #12]
   8b438:	4413      	add	r3, r2
   8b43a:	4698      	mov	r8, r3
   8b43c:	2200      	movs	r2, #0
   8b43e:	4b6c      	ldr	r3, [pc, #432]	; (8b5f0 <_dtoa_r+0xeb0>)
   8b440:	4630      	mov	r0, r6
   8b442:	4639      	mov	r1, r7
   8b444:	f002 fc9c 	bl	8dd80 <__aeabi_dmul>
   8b448:	460f      	mov	r7, r1
   8b44a:	4606      	mov	r6, r0
   8b44c:	f002 ff48 	bl	8e2e0 <__aeabi_d2iz>
   8b450:	4681      	mov	r9, r0
   8b452:	f002 fc2b 	bl	8dcac <__aeabi_i2d>
   8b456:	4602      	mov	r2, r0
   8b458:	460b      	mov	r3, r1
   8b45a:	4630      	mov	r0, r6
   8b45c:	4639      	mov	r1, r7
   8b45e:	f002 fad7 	bl	8da10 <__aeabi_dsub>
   8b462:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8b466:	f805 9b01 	strb.w	r9, [r5], #1
   8b46a:	4545      	cmp	r5, r8
   8b46c:	4606      	mov	r6, r0
   8b46e:	460f      	mov	r7, r1
   8b470:	d1e4      	bne.n	8b43c <_dtoa_r+0xcfc>
   8b472:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8b476:	2200      	movs	r2, #0
   8b478:	4b5e      	ldr	r3, [pc, #376]	; (8b5f4 <_dtoa_r+0xeb4>)
   8b47a:	4640      	mov	r0, r8
   8b47c:	4649      	mov	r1, r9
   8b47e:	f002 fac9 	bl	8da14 <__adddf3>
   8b482:	4632      	mov	r2, r6
   8b484:	463b      	mov	r3, r7
   8b486:	f002 feed 	bl	8e264 <__aeabi_dcmplt>
   8b48a:	2800      	cmp	r0, #0
   8b48c:	d158      	bne.n	8b540 <_dtoa_r+0xe00>
   8b48e:	4642      	mov	r2, r8
   8b490:	464b      	mov	r3, r9
   8b492:	2000      	movs	r0, #0
   8b494:	4957      	ldr	r1, [pc, #348]	; (8b5f4 <_dtoa_r+0xeb4>)
   8b496:	f002 fabb 	bl	8da10 <__aeabi_dsub>
   8b49a:	4632      	mov	r2, r6
   8b49c:	463b      	mov	r3, r7
   8b49e:	f002 feff 	bl	8e2a0 <__aeabi_dcmpgt>
   8b4a2:	2800      	cmp	r0, #0
   8b4a4:	f43f ab73 	beq.w	8ab8e <_dtoa_r+0x44e>
   8b4a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8b4ac:	46a9      	mov	r9, r5
   8b4ae:	2b30      	cmp	r3, #48	; 0x30
   8b4b0:	f105 35ff 	add.w	r5, r5, #4294967295
   8b4b4:	d0f8      	beq.n	8b4a8 <_dtoa_r+0xd68>
   8b4b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b4b8:	3301      	adds	r3, #1
   8b4ba:	9307      	str	r3, [sp, #28]
   8b4bc:	e505      	b.n	8aeca <_dtoa_r+0x78a>
   8b4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b4c0:	2b00      	cmp	r3, #0
   8b4c2:	f43f ae93 	beq.w	8b1ec <_dtoa_r+0xaac>
   8b4c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8b4c8:	2d00      	cmp	r5, #0
   8b4ca:	f77f ab60 	ble.w	8ab8e <_dtoa_r+0x44e>
   8b4ce:	2200      	movs	r2, #0
   8b4d0:	4b47      	ldr	r3, [pc, #284]	; (8b5f0 <_dtoa_r+0xeb0>)
   8b4d2:	4630      	mov	r0, r6
   8b4d4:	4639      	mov	r1, r7
   8b4d6:	f002 fc53 	bl	8dd80 <__aeabi_dmul>
   8b4da:	4606      	mov	r6, r0
   8b4dc:	460f      	mov	r7, r1
   8b4de:	f109 0001 	add.w	r0, r9, #1
   8b4e2:	f002 fbe3 	bl	8dcac <__aeabi_i2d>
   8b4e6:	4632      	mov	r2, r6
   8b4e8:	463b      	mov	r3, r7
   8b4ea:	f002 fc49 	bl	8dd80 <__aeabi_dmul>
   8b4ee:	2200      	movs	r2, #0
   8b4f0:	4b41      	ldr	r3, [pc, #260]	; (8b5f8 <_dtoa_r+0xeb8>)
   8b4f2:	f002 fa8f 	bl	8da14 <__adddf3>
   8b4f6:	9a07      	ldr	r2, [sp, #28]
   8b4f8:	4680      	mov	r8, r0
   8b4fa:	3a01      	subs	r2, #1
   8b4fc:	9213      	str	r2, [sp, #76]	; 0x4c
   8b4fe:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b502:	9510      	str	r5, [sp, #64]	; 0x40
   8b504:	f7ff bab6 	b.w	8aa74 <_dtoa_r+0x334>
   8b508:	f04f 0902 	mov.w	r9, #2
   8b50c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8b510:	f7ff ba8f 	b.w	8aa32 <_dtoa_r+0x2f2>
   8b514:	9b07      	ldr	r3, [sp, #28]
   8b516:	3301      	adds	r3, #1
   8b518:	9307      	str	r3, [sp, #28]
   8b51a:	2331      	movs	r3, #49	; 0x31
   8b51c:	f7ff bb2f 	b.w	8ab7e <_dtoa_r+0x43e>
   8b520:	46b3      	mov	fp, r6
   8b522:	2339      	movs	r3, #57	; 0x39
   8b524:	9a07      	ldr	r2, [sp, #28]
   8b526:	462e      	mov	r6, r5
   8b528:	3201      	adds	r2, #1
   8b52a:	463d      	mov	r5, r7
   8b52c:	9207      	str	r2, [sp, #28]
   8b52e:	f80b 3b01 	strb.w	r3, [fp], #1
   8b532:	e4aa      	b.n	8ae8a <_dtoa_r+0x74a>
   8b534:	f04f 0800 	mov.w	r8, #0
   8b538:	4645      	mov	r5, r8
   8b53a:	e61e      	b.n	8b17a <_dtoa_r+0xa3a>
   8b53c:	4699      	mov	r9, r3
   8b53e:	e43c      	b.n	8adba <_dtoa_r+0x67a>
   8b540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b542:	9a03      	ldr	r2, [sp, #12]
   8b544:	9307      	str	r3, [sp, #28]
   8b546:	f7ff bb13 	b.w	8ab70 <_dtoa_r+0x430>
   8b54a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8b54e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8b550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b552:	46a9      	mov	r9, r5
   8b554:	3301      	adds	r3, #1
   8b556:	9307      	str	r3, [sp, #28]
   8b558:	e4b7      	b.n	8aeca <_dtoa_r+0x78a>
   8b55a:	f47f aed7 	bne.w	8b30c <_dtoa_r+0xbcc>
   8b55e:	07da      	lsls	r2, r3, #31
   8b560:	f57f aed4 	bpl.w	8b30c <_dtoa_r+0xbcc>
   8b564:	e6cd      	b.n	8b302 <_dtoa_r+0xbc2>
   8b566:	2b39      	cmp	r3, #57	; 0x39
   8b568:	d0da      	beq.n	8b520 <_dtoa_r+0xde0>
   8b56a:	f1b9 0f00 	cmp.w	r9, #0
   8b56e:	f73f aecb 	bgt.w	8b308 <_dtoa_r+0xbc8>
   8b572:	e6cb      	b.n	8b30c <_dtoa_r+0xbcc>
   8b574:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b576:	2b02      	cmp	r3, #2
   8b578:	f73f adeb 	bgt.w	8b152 <_dtoa_r+0xa12>
   8b57c:	9707      	str	r7, [sp, #28]
   8b57e:	e570      	b.n	8b062 <_dtoa_r+0x922>
   8b580:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b582:	2b02      	cmp	r3, #2
   8b584:	f73f ade5 	bgt.w	8b152 <_dtoa_r+0xa12>
   8b588:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b58a:	9707      	str	r7, [sp, #28]
   8b58c:	930a      	str	r3, [sp, #40]	; 0x28
   8b58e:	e4e4      	b.n	8af5a <_dtoa_r+0x81a>
   8b590:	f04f 0902 	mov.w	r9, #2
   8b594:	f7ff ba4d 	b.w	8aa32 <_dtoa_r+0x2f2>
   8b598:	4602      	mov	r2, r0
   8b59a:	f240 21ea 	movw	r1, #746	; 0x2ea
   8b59e:	4b17      	ldr	r3, [pc, #92]	; (8b5fc <_dtoa_r+0xebc>)
   8b5a0:	4817      	ldr	r0, [pc, #92]	; (8b600 <_dtoa_r+0xec0>)
   8b5a2:	f002 f8af 	bl	8d704 <__assert_func>
   8b5a6:	4b17      	ldr	r3, [pc, #92]	; (8b604 <_dtoa_r+0xec4>)
   8b5a8:	9303      	str	r3, [sp, #12]
   8b5aa:	f7ff b904 	b.w	8a7b6 <_dtoa_r+0x76>
   8b5ae:	2500      	movs	r5, #0
   8b5b0:	4620      	mov	r0, r4
   8b5b2:	4629      	mov	r1, r5
   8b5b4:	6465      	str	r5, [r4, #68]	; 0x44
   8b5b6:	f001 f8eb 	bl	8c790 <_Balloc>
   8b5ba:	9003      	str	r0, [sp, #12]
   8b5bc:	b958      	cbnz	r0, 8b5d6 <_dtoa_r+0xe96>
   8b5be:	2200      	movs	r2, #0
   8b5c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8b5c4:	4b0d      	ldr	r3, [pc, #52]	; (8b5fc <_dtoa_r+0xebc>)
   8b5c6:	480e      	ldr	r0, [pc, #56]	; (8b600 <_dtoa_r+0xec0>)
   8b5c8:	f002 f89c 	bl	8d704 <__assert_func>
   8b5cc:	f43f ac0d 	beq.w	8adea <_dtoa_r+0x6aa>
   8b5d0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8b5d4:	e48f      	b.n	8aef6 <_dtoa_r+0x7b6>
   8b5d6:	f04f 33ff 	mov.w	r3, #4294967295
   8b5da:	9312      	str	r3, [sp, #72]	; 0x48
   8b5dc:	930a      	str	r3, [sp, #40]	; 0x28
   8b5de:	2301      	movs	r3, #1
   8b5e0:	9a03      	ldr	r2, [sp, #12]
   8b5e2:	9525      	str	r5, [sp, #148]	; 0x94
   8b5e4:	6422      	str	r2, [r4, #64]	; 0x40
   8b5e6:	930c      	str	r3, [sp, #48]	; 0x30
   8b5e8:	f7ff bad1 	b.w	8ab8e <_dtoa_r+0x44e>
   8b5ec:	0008e7a0 	.word	0x0008e7a0
   8b5f0:	40240000 	.word	0x40240000
   8b5f4:	3fe00000 	.word	0x3fe00000
   8b5f8:	401c0000 	.word	0x401c0000
   8b5fc:	0008e654 	.word	0x0008e654
   8b600:	0008e668 	.word	0x0008e668
   8b604:	0008e648 	.word	0x0008e648

0008b608 <__sflush_r>:
   8b608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b610:	460d      	mov	r5, r1
   8b612:	0711      	lsls	r1, r2, #28
   8b614:	4680      	mov	r8, r0
   8b616:	d447      	bmi.n	8b6a8 <__sflush_r+0xa0>
   8b618:	686b      	ldr	r3, [r5, #4]
   8b61a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8b61e:	2b00      	cmp	r3, #0
   8b620:	81aa      	strh	r2, [r5, #12]
   8b622:	dd5e      	ble.n	8b6e2 <__sflush_r+0xda>
   8b624:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b626:	2c00      	cmp	r4, #0
   8b628:	d058      	beq.n	8b6dc <__sflush_r+0xd4>
   8b62a:	2300      	movs	r3, #0
   8b62c:	f8d8 6000 	ldr.w	r6, [r8]
   8b630:	f8c8 3000 	str.w	r3, [r8]
   8b634:	b293      	uxth	r3, r2
   8b636:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8b63a:	d156      	bne.n	8b6ea <__sflush_r+0xe2>
   8b63c:	2301      	movs	r3, #1
   8b63e:	4640      	mov	r0, r8
   8b640:	69e9      	ldr	r1, [r5, #28]
   8b642:	47a0      	blx	r4
   8b644:	1c43      	adds	r3, r0, #1
   8b646:	d067      	beq.n	8b718 <__sflush_r+0x110>
   8b648:	89ab      	ldrh	r3, [r5, #12]
   8b64a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b64c:	075f      	lsls	r7, r3, #29
   8b64e:	d505      	bpl.n	8b65c <__sflush_r+0x54>
   8b650:	686a      	ldr	r2, [r5, #4]
   8b652:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8b654:	1a80      	subs	r0, r0, r2
   8b656:	b10b      	cbz	r3, 8b65c <__sflush_r+0x54>
   8b658:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8b65a:	1ac0      	subs	r0, r0, r3
   8b65c:	4602      	mov	r2, r0
   8b65e:	69e9      	ldr	r1, [r5, #28]
   8b660:	2300      	movs	r3, #0
   8b662:	4640      	mov	r0, r8
   8b664:	47a0      	blx	r4
   8b666:	1c41      	adds	r1, r0, #1
   8b668:	d141      	bne.n	8b6ee <__sflush_r+0xe6>
   8b66a:	f8d8 3000 	ldr.w	r3, [r8]
   8b66e:	2b00      	cmp	r3, #0
   8b670:	d03d      	beq.n	8b6ee <__sflush_r+0xe6>
   8b672:	2b1d      	cmp	r3, #29
   8b674:	d001      	beq.n	8b67a <__sflush_r+0x72>
   8b676:	2b16      	cmp	r3, #22
   8b678:	d156      	bne.n	8b728 <__sflush_r+0x120>
   8b67a:	2100      	movs	r1, #0
   8b67c:	692a      	ldr	r2, [r5, #16]
   8b67e:	89ab      	ldrh	r3, [r5, #12]
   8b680:	e9c5 2100 	strd	r2, r1, [r5]
   8b684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b688:	81ab      	strh	r3, [r5, #12]
   8b68a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8b68c:	f8c8 6000 	str.w	r6, [r8]
   8b690:	b321      	cbz	r1, 8b6dc <__sflush_r+0xd4>
   8b692:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8b696:	4299      	cmp	r1, r3
   8b698:	d002      	beq.n	8b6a0 <__sflush_r+0x98>
   8b69a:	4640      	mov	r0, r8
   8b69c:	f000 f9cc 	bl	8ba38 <_free_r>
   8b6a0:	2000      	movs	r0, #0
   8b6a2:	6328      	str	r0, [r5, #48]	; 0x30
   8b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b6a8:	692f      	ldr	r7, [r5, #16]
   8b6aa:	b1bf      	cbz	r7, 8b6dc <__sflush_r+0xd4>
   8b6ac:	b293      	uxth	r3, r2
   8b6ae:	079a      	lsls	r2, r3, #30
   8b6b0:	bf18      	it	ne
   8b6b2:	2300      	movne	r3, #0
   8b6b4:	682e      	ldr	r6, [r5, #0]
   8b6b6:	bf08      	it	eq
   8b6b8:	696b      	ldreq	r3, [r5, #20]
   8b6ba:	602f      	str	r7, [r5, #0]
   8b6bc:	1bf6      	subs	r6, r6, r7
   8b6be:	60ab      	str	r3, [r5, #8]
   8b6c0:	e00a      	b.n	8b6d8 <__sflush_r+0xd0>
   8b6c2:	4633      	mov	r3, r6
   8b6c4:	463a      	mov	r2, r7
   8b6c6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8b6c8:	4640      	mov	r0, r8
   8b6ca:	69e9      	ldr	r1, [r5, #28]
   8b6cc:	47a0      	blx	r4
   8b6ce:	1e04      	subs	r4, r0, #0
   8b6d0:	eba6 0604 	sub.w	r6, r6, r4
   8b6d4:	4427      	add	r7, r4
   8b6d6:	dd17      	ble.n	8b708 <__sflush_r+0x100>
   8b6d8:	2e00      	cmp	r6, #0
   8b6da:	dcf2      	bgt.n	8b6c2 <__sflush_r+0xba>
   8b6dc:	2000      	movs	r0, #0
   8b6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b6e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8b6e4:	2b00      	cmp	r3, #0
   8b6e6:	dc9d      	bgt.n	8b624 <__sflush_r+0x1c>
   8b6e8:	e7f8      	b.n	8b6dc <__sflush_r+0xd4>
   8b6ea:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8b6ec:	e7ae      	b.n	8b64c <__sflush_r+0x44>
   8b6ee:	2100      	movs	r1, #0
   8b6f0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8b6f4:	692a      	ldr	r2, [r5, #16]
   8b6f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b6fa:	81ab      	strh	r3, [r5, #12]
   8b6fc:	04db      	lsls	r3, r3, #19
   8b6fe:	e9c5 2100 	strd	r2, r1, [r5]
   8b702:	d5c2      	bpl.n	8b68a <__sflush_r+0x82>
   8b704:	6528      	str	r0, [r5, #80]	; 0x50
   8b706:	e7c0      	b.n	8b68a <__sflush_r+0x82>
   8b708:	89ab      	ldrh	r3, [r5, #12]
   8b70a:	f04f 30ff 	mov.w	r0, #4294967295
   8b70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b712:	81ab      	strh	r3, [r5, #12]
   8b714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b718:	f8d8 3000 	ldr.w	r3, [r8]
   8b71c:	2b00      	cmp	r3, #0
   8b71e:	d093      	beq.n	8b648 <__sflush_r+0x40>
   8b720:	2b1d      	cmp	r3, #29
   8b722:	d006      	beq.n	8b732 <__sflush_r+0x12a>
   8b724:	2b16      	cmp	r3, #22
   8b726:	d004      	beq.n	8b732 <__sflush_r+0x12a>
   8b728:	89ab      	ldrh	r3, [r5, #12]
   8b72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b72e:	81ab      	strh	r3, [r5, #12]
   8b730:	e7d5      	b.n	8b6de <__sflush_r+0xd6>
   8b732:	f8c8 6000 	str.w	r6, [r8]
   8b736:	e7d1      	b.n	8b6dc <__sflush_r+0xd4>

0008b738 <_fflush_r>:
   8b738:	b538      	push	{r3, r4, r5, lr}
   8b73a:	460c      	mov	r4, r1
   8b73c:	4605      	mov	r5, r0
   8b73e:	b108      	cbz	r0, 8b744 <_fflush_r+0xc>
   8b740:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b742:	b1a3      	cbz	r3, 8b76e <_fflush_r+0x36>
   8b744:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b748:	b1b8      	cbz	r0, 8b77a <_fflush_r+0x42>
   8b74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b74c:	07db      	lsls	r3, r3, #31
   8b74e:	d401      	bmi.n	8b754 <_fflush_r+0x1c>
   8b750:	0581      	lsls	r1, r0, #22
   8b752:	d515      	bpl.n	8b780 <_fflush_r+0x48>
   8b754:	4628      	mov	r0, r5
   8b756:	4621      	mov	r1, r4
   8b758:	f7ff ff56 	bl	8b608 <__sflush_r>
   8b75c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b75e:	4605      	mov	r5, r0
   8b760:	07da      	lsls	r2, r3, #31
   8b762:	d402      	bmi.n	8b76a <_fflush_r+0x32>
   8b764:	89a3      	ldrh	r3, [r4, #12]
   8b766:	059b      	lsls	r3, r3, #22
   8b768:	d50e      	bpl.n	8b788 <_fflush_r+0x50>
   8b76a:	4628      	mov	r0, r5
   8b76c:	bd38      	pop	{r3, r4, r5, pc}
   8b76e:	f000 f83f 	bl	8b7f0 <__sinit>
   8b772:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b776:	2800      	cmp	r0, #0
   8b778:	d1e7      	bne.n	8b74a <_fflush_r+0x12>
   8b77a:	4605      	mov	r5, r0
   8b77c:	4628      	mov	r0, r5
   8b77e:	bd38      	pop	{r3, r4, r5, pc}
   8b780:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b782:	f000 fc07 	bl	8bf94 <__retarget_lock_acquire_recursive>
   8b786:	e7e5      	b.n	8b754 <_fflush_r+0x1c>
   8b788:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b78a:	f000 fc05 	bl	8bf98 <__retarget_lock_release_recursive>
   8b78e:	4628      	mov	r0, r5
   8b790:	bd38      	pop	{r3, r4, r5, pc}
   8b792:	bf00      	nop

0008b794 <std>:
   8b794:	2300      	movs	r3, #0
   8b796:	b510      	push	{r4, lr}
   8b798:	4604      	mov	r4, r0
   8b79a:	e9c0 3300 	strd	r3, r3, [r0]
   8b79e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8b7a2:	8181      	strh	r1, [r0, #12]
   8b7a4:	81c2      	strh	r2, [r0, #14]
   8b7a6:	4619      	mov	r1, r3
   8b7a8:	6083      	str	r3, [r0, #8]
   8b7aa:	6643      	str	r3, [r0, #100]	; 0x64
   8b7ac:	6183      	str	r3, [r0, #24]
   8b7ae:	2208      	movs	r2, #8
   8b7b0:	305c      	adds	r0, #92	; 0x5c
   8b7b2:	f7fc f8b5 	bl	87920 <memset>
   8b7b6:	4807      	ldr	r0, [pc, #28]	; (8b7d4 <std+0x40>)
   8b7b8:	4907      	ldr	r1, [pc, #28]	; (8b7d8 <std+0x44>)
   8b7ba:	4a08      	ldr	r2, [pc, #32]	; (8b7dc <std+0x48>)
   8b7bc:	4b08      	ldr	r3, [pc, #32]	; (8b7e0 <std+0x4c>)
   8b7be:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8b7c2:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8b7c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   8b7c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8b7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b7d0:	f000 bbdc 	b.w	8bf8c <__retarget_lock_init_recursive>
   8b7d4:	0008d2fd 	.word	0x0008d2fd
   8b7d8:	0008d321 	.word	0x0008d321
   8b7dc:	0008d361 	.word	0x0008d361
   8b7e0:	0008d381 	.word	0x0008d381

0008b7e4 <_cleanup_r>:
   8b7e4:	4901      	ldr	r1, [pc, #4]	; (8b7ec <_cleanup_r+0x8>)
   8b7e6:	f000 bba3 	b.w	8bf30 <_fwalk_reent>
   8b7ea:	bf00      	nop
   8b7ec:	0008d7c5 	.word	0x0008d7c5

0008b7f0 <__sinit>:
   8b7f0:	b510      	push	{r4, lr}
   8b7f2:	4604      	mov	r4, r0
   8b7f4:	4813      	ldr	r0, [pc, #76]	; (8b844 <__sinit+0x54>)
   8b7f6:	f000 fbcd 	bl	8bf94 <__retarget_lock_acquire_recursive>
   8b7fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8b7fc:	b9ea      	cbnz	r2, 8b83a <__sinit+0x4a>
   8b7fe:	2003      	movs	r0, #3
   8b800:	4911      	ldr	r1, [pc, #68]	; (8b848 <__sinit+0x58>)
   8b802:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8b806:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8b80a:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8b80e:	63e1      	str	r1, [r4, #60]	; 0x3c
   8b810:	6860      	ldr	r0, [r4, #4]
   8b812:	2104      	movs	r1, #4
   8b814:	f7ff ffbe 	bl	8b794 <std>
   8b818:	68a0      	ldr	r0, [r4, #8]
   8b81a:	2201      	movs	r2, #1
   8b81c:	2109      	movs	r1, #9
   8b81e:	f7ff ffb9 	bl	8b794 <std>
   8b822:	68e0      	ldr	r0, [r4, #12]
   8b824:	2202      	movs	r2, #2
   8b826:	2112      	movs	r1, #18
   8b828:	f7ff ffb4 	bl	8b794 <std>
   8b82c:	2301      	movs	r3, #1
   8b82e:	4805      	ldr	r0, [pc, #20]	; (8b844 <__sinit+0x54>)
   8b830:	63a3      	str	r3, [r4, #56]	; 0x38
   8b832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b836:	f000 bbaf 	b.w	8bf98 <__retarget_lock_release_recursive>
   8b83a:	4802      	ldr	r0, [pc, #8]	; (8b844 <__sinit+0x54>)
   8b83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b840:	f000 bbaa 	b.w	8bf98 <__retarget_lock_release_recursive>
   8b844:	20002e10 	.word	0x20002e10
   8b848:	0008b7e5 	.word	0x0008b7e5

0008b84c <__sfp_lock_acquire>:
   8b84c:	4801      	ldr	r0, [pc, #4]	; (8b854 <__sfp_lock_acquire+0x8>)
   8b84e:	f000 bba1 	b.w	8bf94 <__retarget_lock_acquire_recursive>
   8b852:	bf00      	nop
   8b854:	20002e24 	.word	0x20002e24

0008b858 <__sfp_lock_release>:
   8b858:	4801      	ldr	r0, [pc, #4]	; (8b860 <__sfp_lock_release+0x8>)
   8b85a:	f000 bb9d 	b.w	8bf98 <__retarget_lock_release_recursive>
   8b85e:	bf00      	nop
   8b860:	20002e24 	.word	0x20002e24

0008b864 <__libc_fini_array>:
   8b864:	b538      	push	{r3, r4, r5, lr}
   8b866:	4b08      	ldr	r3, [pc, #32]	; (8b888 <__libc_fini_array+0x24>)
   8b868:	4d08      	ldr	r5, [pc, #32]	; (8b88c <__libc_fini_array+0x28>)
   8b86a:	1b5b      	subs	r3, r3, r5
   8b86c:	109c      	asrs	r4, r3, #2
   8b86e:	d007      	beq.n	8b880 <__libc_fini_array+0x1c>
   8b870:	3b04      	subs	r3, #4
   8b872:	441d      	add	r5, r3
   8b874:	3c01      	subs	r4, #1
   8b876:	f855 3904 	ldr.w	r3, [r5], #-4
   8b87a:	4798      	blx	r3
   8b87c:	2c00      	cmp	r4, #0
   8b87e:	d1f9      	bne.n	8b874 <__libc_fini_array+0x10>
   8b880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b884:	f003 b8a2 	b.w	8e9cc <_fini>
   8b888:	0008e9dc 	.word	0x0008e9dc
   8b88c:	0008e9d8 	.word	0x0008e9d8

0008b890 <__fputwc>:
   8b890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b894:	b083      	sub	sp, #12
   8b896:	4607      	mov	r7, r0
   8b898:	4688      	mov	r8, r1
   8b89a:	4614      	mov	r4, r2
   8b89c:	f000 fb6c 	bl	8bf78 <__locale_mb_cur_max>
   8b8a0:	2801      	cmp	r0, #1
   8b8a2:	d103      	bne.n	8b8ac <__fputwc+0x1c>
   8b8a4:	f108 33ff 	add.w	r3, r8, #4294967295
   8b8a8:	2bfe      	cmp	r3, #254	; 0xfe
   8b8aa:	d933      	bls.n	8b914 <__fputwc+0x84>
   8b8ac:	4642      	mov	r2, r8
   8b8ae:	4638      	mov	r0, r7
   8b8b0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b8b4:	a901      	add	r1, sp, #4
   8b8b6:	f001 fe9d 	bl	8d5f4 <_wcrtomb_r>
   8b8ba:	1c42      	adds	r2, r0, #1
   8b8bc:	4606      	mov	r6, r0
   8b8be:	d02f      	beq.n	8b920 <__fputwc+0x90>
   8b8c0:	b318      	cbz	r0, 8b90a <__fputwc+0x7a>
   8b8c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b8c6:	2500      	movs	r5, #0
   8b8c8:	f10d 0904 	add.w	r9, sp, #4
   8b8cc:	e008      	b.n	8b8e0 <__fputwc+0x50>
   8b8ce:	6823      	ldr	r3, [r4, #0]
   8b8d0:	1c5a      	adds	r2, r3, #1
   8b8d2:	6022      	str	r2, [r4, #0]
   8b8d4:	7019      	strb	r1, [r3, #0]
   8b8d6:	3501      	adds	r5, #1
   8b8d8:	42b5      	cmp	r5, r6
   8b8da:	d216      	bcs.n	8b90a <__fputwc+0x7a>
   8b8dc:	f815 1009 	ldrb.w	r1, [r5, r9]
   8b8e0:	68a3      	ldr	r3, [r4, #8]
   8b8e2:	3b01      	subs	r3, #1
   8b8e4:	2b00      	cmp	r3, #0
   8b8e6:	60a3      	str	r3, [r4, #8]
   8b8e8:	daf1      	bge.n	8b8ce <__fputwc+0x3e>
   8b8ea:	69a2      	ldr	r2, [r4, #24]
   8b8ec:	4293      	cmp	r3, r2
   8b8ee:	db01      	blt.n	8b8f4 <__fputwc+0x64>
   8b8f0:	290a      	cmp	r1, #10
   8b8f2:	d1ec      	bne.n	8b8ce <__fputwc+0x3e>
   8b8f4:	4622      	mov	r2, r4
   8b8f6:	4638      	mov	r0, r7
   8b8f8:	f001 fe24 	bl	8d544 <__swbuf_r>
   8b8fc:	1c43      	adds	r3, r0, #1
   8b8fe:	d1ea      	bne.n	8b8d6 <__fputwc+0x46>
   8b900:	4606      	mov	r6, r0
   8b902:	4630      	mov	r0, r6
   8b904:	b003      	add	sp, #12
   8b906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b90a:	4646      	mov	r6, r8
   8b90c:	4630      	mov	r0, r6
   8b90e:	b003      	add	sp, #12
   8b910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b914:	fa5f f188 	uxtb.w	r1, r8
   8b918:	4606      	mov	r6, r0
   8b91a:	f88d 1004 	strb.w	r1, [sp, #4]
   8b91e:	e7d2      	b.n	8b8c6 <__fputwc+0x36>
   8b920:	4630      	mov	r0, r6
   8b922:	89a3      	ldrh	r3, [r4, #12]
   8b924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b928:	81a3      	strh	r3, [r4, #12]
   8b92a:	b003      	add	sp, #12
   8b92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b930 <_fputwc_r>:
   8b930:	b530      	push	{r4, r5, lr}
   8b932:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b934:	4614      	mov	r4, r2
   8b936:	f013 0f01 	tst.w	r3, #1
   8b93a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b93e:	4605      	mov	r5, r0
   8b940:	b083      	sub	sp, #12
   8b942:	b29a      	uxth	r2, r3
   8b944:	d101      	bne.n	8b94a <_fputwc_r+0x1a>
   8b946:	0598      	lsls	r0, r3, #22
   8b948:	d51c      	bpl.n	8b984 <_fputwc_r+0x54>
   8b94a:	0490      	lsls	r0, r2, #18
   8b94c:	d406      	bmi.n	8b95c <_fputwc_r+0x2c>
   8b94e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b958:	81a3      	strh	r3, [r4, #12]
   8b95a:	6662      	str	r2, [r4, #100]	; 0x64
   8b95c:	4628      	mov	r0, r5
   8b95e:	4622      	mov	r2, r4
   8b960:	f7ff ff96 	bl	8b890 <__fputwc>
   8b964:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b966:	4605      	mov	r5, r0
   8b968:	07da      	lsls	r2, r3, #31
   8b96a:	d402      	bmi.n	8b972 <_fputwc_r+0x42>
   8b96c:	89a3      	ldrh	r3, [r4, #12]
   8b96e:	059b      	lsls	r3, r3, #22
   8b970:	d502      	bpl.n	8b978 <_fputwc_r+0x48>
   8b972:	4628      	mov	r0, r5
   8b974:	b003      	add	sp, #12
   8b976:	bd30      	pop	{r4, r5, pc}
   8b978:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b97a:	f000 fb0d 	bl	8bf98 <__retarget_lock_release_recursive>
   8b97e:	4628      	mov	r0, r5
   8b980:	b003      	add	sp, #12
   8b982:	bd30      	pop	{r4, r5, pc}
   8b984:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b986:	9101      	str	r1, [sp, #4]
   8b988:	f000 fb04 	bl	8bf94 <__retarget_lock_acquire_recursive>
   8b98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b990:	9901      	ldr	r1, [sp, #4]
   8b992:	b29a      	uxth	r2, r3
   8b994:	e7d9      	b.n	8b94a <_fputwc_r+0x1a>
   8b996:	bf00      	nop

0008b998 <_malloc_trim_r>:
   8b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b99a:	460c      	mov	r4, r1
   8b99c:	4f23      	ldr	r7, [pc, #140]	; (8ba2c <_malloc_trim_r+0x94>)
   8b99e:	4606      	mov	r6, r0
   8b9a0:	f000 feea 	bl	8c778 <__malloc_lock>
   8b9a4:	68bb      	ldr	r3, [r7, #8]
   8b9a6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8b9aa:	685d      	ldr	r5, [r3, #4]
   8b9ac:	310f      	adds	r1, #15
   8b9ae:	f025 0503 	bic.w	r5, r5, #3
   8b9b2:	194b      	adds	r3, r1, r5
   8b9b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8b9b8:	f023 030f 	bic.w	r3, r3, #15
   8b9bc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8b9c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8b9c4:	db07      	blt.n	8b9d6 <_malloc_trim_r+0x3e>
   8b9c6:	2100      	movs	r1, #0
   8b9c8:	4630      	mov	r0, r6
   8b9ca:	f001 fc85 	bl	8d2d8 <_sbrk_r>
   8b9ce:	68bb      	ldr	r3, [r7, #8]
   8b9d0:	442b      	add	r3, r5
   8b9d2:	4298      	cmp	r0, r3
   8b9d4:	d004      	beq.n	8b9e0 <_malloc_trim_r+0x48>
   8b9d6:	4630      	mov	r0, r6
   8b9d8:	f000 fed4 	bl	8c784 <__malloc_unlock>
   8b9dc:	2000      	movs	r0, #0
   8b9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b9e0:	4630      	mov	r0, r6
   8b9e2:	4261      	negs	r1, r4
   8b9e4:	f001 fc78 	bl	8d2d8 <_sbrk_r>
   8b9e8:	3001      	adds	r0, #1
   8b9ea:	d00d      	beq.n	8ba08 <_malloc_trim_r+0x70>
   8b9ec:	4a10      	ldr	r2, [pc, #64]	; (8ba30 <_malloc_trim_r+0x98>)
   8b9ee:	68b9      	ldr	r1, [r7, #8]
   8b9f0:	6813      	ldr	r3, [r2, #0]
   8b9f2:	1b2d      	subs	r5, r5, r4
   8b9f4:	f045 0501 	orr.w	r5, r5, #1
   8b9f8:	4630      	mov	r0, r6
   8b9fa:	1b1b      	subs	r3, r3, r4
   8b9fc:	604d      	str	r5, [r1, #4]
   8b9fe:	6013      	str	r3, [r2, #0]
   8ba00:	f000 fec0 	bl	8c784 <__malloc_unlock>
   8ba04:	2001      	movs	r0, #1
   8ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ba08:	2100      	movs	r1, #0
   8ba0a:	4630      	mov	r0, r6
   8ba0c:	f001 fc64 	bl	8d2d8 <_sbrk_r>
   8ba10:	68ba      	ldr	r2, [r7, #8]
   8ba12:	1a83      	subs	r3, r0, r2
   8ba14:	2b0f      	cmp	r3, #15
   8ba16:	ddde      	ble.n	8b9d6 <_malloc_trim_r+0x3e>
   8ba18:	4906      	ldr	r1, [pc, #24]	; (8ba34 <_malloc_trim_r+0x9c>)
   8ba1a:	f043 0301 	orr.w	r3, r3, #1
   8ba1e:	680c      	ldr	r4, [r1, #0]
   8ba20:	4903      	ldr	r1, [pc, #12]	; (8ba30 <_malloc_trim_r+0x98>)
   8ba22:	1b00      	subs	r0, r0, r4
   8ba24:	6053      	str	r3, [r2, #4]
   8ba26:	6008      	str	r0, [r1, #0]
   8ba28:	e7d5      	b.n	8b9d6 <_malloc_trim_r+0x3e>
   8ba2a:	bf00      	nop
   8ba2c:	20000cb0 	.word	0x20000cb0
   8ba30:	200023b4 	.word	0x200023b4
   8ba34:	200010b8 	.word	0x200010b8

0008ba38 <_free_r>:
   8ba38:	2900      	cmp	r1, #0
   8ba3a:	d05f      	beq.n	8bafc <_free_r+0xc4>
   8ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ba3e:	460c      	mov	r4, r1
   8ba40:	4606      	mov	r6, r0
   8ba42:	f000 fe99 	bl	8c778 <__malloc_lock>
   8ba46:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8ba4a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8bc40 <_free_r+0x208>
   8ba4e:	f1a4 0008 	sub.w	r0, r4, #8
   8ba52:	f023 0101 	bic.w	r1, r3, #1
   8ba56:	1842      	adds	r2, r0, r1
   8ba58:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8ba5c:	6855      	ldr	r5, [r2, #4]
   8ba5e:	4297      	cmp	r7, r2
   8ba60:	f025 0503 	bic.w	r5, r5, #3
   8ba64:	f000 8089 	beq.w	8bb7a <_free_r+0x142>
   8ba68:	07df      	lsls	r7, r3, #31
   8ba6a:	6055      	str	r5, [r2, #4]
   8ba6c:	d434      	bmi.n	8bad8 <_free_r+0xa0>
   8ba6e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8ba72:	f10c 0408 	add.w	r4, ip, #8
   8ba76:	1bc0      	subs	r0, r0, r7
   8ba78:	6883      	ldr	r3, [r0, #8]
   8ba7a:	4439      	add	r1, r7
   8ba7c:	42a3      	cmp	r3, r4
   8ba7e:	d06a      	beq.n	8bb56 <_free_r+0x11e>
   8ba80:	1957      	adds	r7, r2, r5
   8ba82:	687f      	ldr	r7, [r7, #4]
   8ba84:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8ba88:	f8c3 e00c 	str.w	lr, [r3, #12]
   8ba8c:	f8ce 3008 	str.w	r3, [lr, #8]
   8ba90:	07fb      	lsls	r3, r7, #31
   8ba92:	f140 8097 	bpl.w	8bbc4 <_free_r+0x18c>
   8ba96:	f041 0301 	orr.w	r3, r1, #1
   8ba9a:	6043      	str	r3, [r0, #4]
   8ba9c:	6011      	str	r1, [r2, #0]
   8ba9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8baa2:	d234      	bcs.n	8bb0e <_free_r+0xd6>
   8baa4:	2201      	movs	r2, #1
   8baa6:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8baaa:	08cb      	lsrs	r3, r1, #3
   8baac:	0949      	lsrs	r1, r1, #5
   8baae:	4413      	add	r3, r2
   8bab0:	fa02 f101 	lsl.w	r1, r2, r1
   8bab4:	4321      	orrs	r1, r4
   8bab6:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8baba:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8babe:	3a08      	subs	r2, #8
   8bac0:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8bac4:	f8cc 1004 	str.w	r1, [ip, #4]
   8bac8:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8bacc:	60e0      	str	r0, [r4, #12]
   8bace:	4630      	mov	r0, r6
   8bad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bad4:	f000 be56 	b.w	8c784 <__malloc_unlock>
   8bad8:	1953      	adds	r3, r2, r5
   8bada:	685b      	ldr	r3, [r3, #4]
   8badc:	07df      	lsls	r7, r3, #31
   8bade:	d40e      	bmi.n	8bafe <_free_r+0xc6>
   8bae0:	4429      	add	r1, r5
   8bae2:	f10c 0408 	add.w	r4, ip, #8
   8bae6:	6893      	ldr	r3, [r2, #8]
   8bae8:	42a3      	cmp	r3, r4
   8baea:	d073      	beq.n	8bbd4 <_free_r+0x19c>
   8baec:	68d4      	ldr	r4, [r2, #12]
   8baee:	f041 0201 	orr.w	r2, r1, #1
   8baf2:	60dc      	str	r4, [r3, #12]
   8baf4:	60a3      	str	r3, [r4, #8]
   8baf6:	6042      	str	r2, [r0, #4]
   8baf8:	5041      	str	r1, [r0, r1]
   8bafa:	e7d0      	b.n	8ba9e <_free_r+0x66>
   8bafc:	4770      	bx	lr
   8bafe:	f041 0301 	orr.w	r3, r1, #1
   8bb02:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8bb06:	f844 3c04 	str.w	r3, [r4, #-4]
   8bb0a:	6011      	str	r1, [r2, #0]
   8bb0c:	d3ca      	bcc.n	8baa4 <_free_r+0x6c>
   8bb0e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8bb12:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8bb16:	d24a      	bcs.n	8bbae <_free_r+0x176>
   8bb18:	098b      	lsrs	r3, r1, #6
   8bb1a:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8bb1e:	00ed      	lsls	r5, r5, #3
   8bb20:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8bb24:	f85c 3005 	ldr.w	r3, [ip, r5]
   8bb28:	eb0c 0405 	add.w	r4, ip, r5
   8bb2c:	3c08      	subs	r4, #8
   8bb2e:	429c      	cmp	r4, r3
   8bb30:	d059      	beq.n	8bbe6 <_free_r+0x1ae>
   8bb32:	685a      	ldr	r2, [r3, #4]
   8bb34:	f022 0203 	bic.w	r2, r2, #3
   8bb38:	428a      	cmp	r2, r1
   8bb3a:	d902      	bls.n	8bb42 <_free_r+0x10a>
   8bb3c:	689b      	ldr	r3, [r3, #8]
   8bb3e:	429c      	cmp	r4, r3
   8bb40:	d1f7      	bne.n	8bb32 <_free_r+0xfa>
   8bb42:	68dc      	ldr	r4, [r3, #12]
   8bb44:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8bb48:	60a0      	str	r0, [r4, #8]
   8bb4a:	60d8      	str	r0, [r3, #12]
   8bb4c:	4630      	mov	r0, r6
   8bb4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bb52:	f000 be17 	b.w	8c784 <__malloc_unlock>
   8bb56:	1953      	adds	r3, r2, r5
   8bb58:	685b      	ldr	r3, [r3, #4]
   8bb5a:	07db      	lsls	r3, r3, #31
   8bb5c:	d466      	bmi.n	8bc2c <_free_r+0x1f4>
   8bb5e:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8bb62:	4429      	add	r1, r5
   8bb64:	f041 0401 	orr.w	r4, r1, #1
   8bb68:	60d3      	str	r3, [r2, #12]
   8bb6a:	609a      	str	r2, [r3, #8]
   8bb6c:	6044      	str	r4, [r0, #4]
   8bb6e:	5041      	str	r1, [r0, r1]
   8bb70:	4630      	mov	r0, r6
   8bb72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bb76:	f000 be05 	b.w	8c784 <__malloc_unlock>
   8bb7a:	07db      	lsls	r3, r3, #31
   8bb7c:	4429      	add	r1, r5
   8bb7e:	d407      	bmi.n	8bb90 <_free_r+0x158>
   8bb80:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8bb84:	1b00      	subs	r0, r0, r4
   8bb86:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8bb8a:	4421      	add	r1, r4
   8bb8c:	60d3      	str	r3, [r2, #12]
   8bb8e:	609a      	str	r2, [r3, #8]
   8bb90:	4b29      	ldr	r3, [pc, #164]	; (8bc38 <_free_r+0x200>)
   8bb92:	f041 0201 	orr.w	r2, r1, #1
   8bb96:	681b      	ldr	r3, [r3, #0]
   8bb98:	6042      	str	r2, [r0, #4]
   8bb9a:	428b      	cmp	r3, r1
   8bb9c:	f8cc 0008 	str.w	r0, [ip, #8]
   8bba0:	d895      	bhi.n	8bace <_free_r+0x96>
   8bba2:	4b26      	ldr	r3, [pc, #152]	; (8bc3c <_free_r+0x204>)
   8bba4:	4630      	mov	r0, r6
   8bba6:	6819      	ldr	r1, [r3, #0]
   8bba8:	f7ff fef6 	bl	8b998 <_malloc_trim_r>
   8bbac:	e78f      	b.n	8bace <_free_r+0x96>
   8bbae:	2b14      	cmp	r3, #20
   8bbb0:	d90a      	bls.n	8bbc8 <_free_r+0x190>
   8bbb2:	2b54      	cmp	r3, #84	; 0x54
   8bbb4:	d821      	bhi.n	8bbfa <_free_r+0x1c2>
   8bbb6:	0b0b      	lsrs	r3, r1, #12
   8bbb8:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8bbbc:	00ed      	lsls	r5, r5, #3
   8bbbe:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8bbc2:	e7af      	b.n	8bb24 <_free_r+0xec>
   8bbc4:	4429      	add	r1, r5
   8bbc6:	e78e      	b.n	8bae6 <_free_r+0xae>
   8bbc8:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8bbcc:	00ed      	lsls	r5, r5, #3
   8bbce:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8bbd2:	e7a7      	b.n	8bb24 <_free_r+0xec>
   8bbd4:	f041 0301 	orr.w	r3, r1, #1
   8bbd8:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8bbdc:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8bbe0:	6043      	str	r3, [r0, #4]
   8bbe2:	5041      	str	r1, [r0, r1]
   8bbe4:	e773      	b.n	8bace <_free_r+0x96>
   8bbe6:	2501      	movs	r5, #1
   8bbe8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8bbec:	1092      	asrs	r2, r2, #2
   8bbee:	fa05 f202 	lsl.w	r2, r5, r2
   8bbf2:	430a      	orrs	r2, r1
   8bbf4:	f8cc 2004 	str.w	r2, [ip, #4]
   8bbf8:	e7a4      	b.n	8bb44 <_free_r+0x10c>
   8bbfa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bbfe:	d806      	bhi.n	8bc0e <_free_r+0x1d6>
   8bc00:	0bcb      	lsrs	r3, r1, #15
   8bc02:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8bc06:	00ed      	lsls	r5, r5, #3
   8bc08:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8bc0c:	e78a      	b.n	8bb24 <_free_r+0xec>
   8bc0e:	f240 5254 	movw	r2, #1364	; 0x554
   8bc12:	4293      	cmp	r3, r2
   8bc14:	d806      	bhi.n	8bc24 <_free_r+0x1ec>
   8bc16:	0c8b      	lsrs	r3, r1, #18
   8bc18:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8bc1c:	00ed      	lsls	r5, r5, #3
   8bc1e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8bc22:	e77f      	b.n	8bb24 <_free_r+0xec>
   8bc24:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8bc28:	227e      	movs	r2, #126	; 0x7e
   8bc2a:	e77b      	b.n	8bb24 <_free_r+0xec>
   8bc2c:	f041 0301 	orr.w	r3, r1, #1
   8bc30:	6043      	str	r3, [r0, #4]
   8bc32:	6011      	str	r1, [r2, #0]
   8bc34:	e74b      	b.n	8bace <_free_r+0x96>
   8bc36:	bf00      	nop
   8bc38:	200010bc 	.word	0x200010bc
   8bc3c:	200023e4 	.word	0x200023e4
   8bc40:	20000cb0 	.word	0x20000cb0

0008bc44 <__sfvwrite_r>:
   8bc44:	6893      	ldr	r3, [r2, #8]
   8bc46:	2b00      	cmp	r3, #0
   8bc48:	f000 80bd 	beq.w	8bdc6 <__sfvwrite_r+0x182>
   8bc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bc50:	4690      	mov	r8, r2
   8bc52:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8bc56:	460c      	mov	r4, r1
   8bc58:	0711      	lsls	r1, r2, #28
   8bc5a:	4681      	mov	r9, r0
   8bc5c:	b083      	sub	sp, #12
   8bc5e:	b293      	uxth	r3, r2
   8bc60:	d527      	bpl.n	8bcb2 <__sfvwrite_r+0x6e>
   8bc62:	6922      	ldr	r2, [r4, #16]
   8bc64:	b32a      	cbz	r2, 8bcb2 <__sfvwrite_r+0x6e>
   8bc66:	f013 0702 	ands.w	r7, r3, #2
   8bc6a:	f8d8 5000 	ldr.w	r5, [r8]
   8bc6e:	d02f      	beq.n	8bcd0 <__sfvwrite_r+0x8c>
   8bc70:	f04f 0b00 	mov.w	fp, #0
   8bc74:	465f      	mov	r7, fp
   8bc76:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8bf2c <__sfvwrite_r+0x2e8>
   8bc7a:	2f00      	cmp	r7, #0
   8bc7c:	f000 8089 	beq.w	8bd92 <__sfvwrite_r+0x14e>
   8bc80:	4557      	cmp	r7, sl
   8bc82:	463b      	mov	r3, r7
   8bc84:	465a      	mov	r2, fp
   8bc86:	bf28      	it	cs
   8bc88:	4653      	movcs	r3, sl
   8bc8a:	4648      	mov	r0, r9
   8bc8c:	69e1      	ldr	r1, [r4, #28]
   8bc8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8bc90:	47b0      	blx	r6
   8bc92:	2800      	cmp	r0, #0
   8bc94:	f340 808d 	ble.w	8bdb2 <__sfvwrite_r+0x16e>
   8bc98:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8bc9c:	4483      	add	fp, r0
   8bc9e:	1a1b      	subs	r3, r3, r0
   8bca0:	1a3f      	subs	r7, r7, r0
   8bca2:	f8c8 3008 	str.w	r3, [r8, #8]
   8bca6:	2b00      	cmp	r3, #0
   8bca8:	d1e7      	bne.n	8bc7a <__sfvwrite_r+0x36>
   8bcaa:	2000      	movs	r0, #0
   8bcac:	b003      	add	sp, #12
   8bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bcb2:	4621      	mov	r1, r4
   8bcb4:	4648      	mov	r0, r9
   8bcb6:	f7fe fc3b 	bl	8a530 <__swsetup_r>
   8bcba:	2800      	cmp	r0, #0
   8bcbc:	f040 8132 	bne.w	8bf24 <__sfvwrite_r+0x2e0>
   8bcc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bcc4:	f8d8 5000 	ldr.w	r5, [r8]
   8bcc8:	b293      	uxth	r3, r2
   8bcca:	f013 0702 	ands.w	r7, r3, #2
   8bcce:	d1cf      	bne.n	8bc70 <__sfvwrite_r+0x2c>
   8bcd0:	f013 0a01 	ands.w	sl, r3, #1
   8bcd4:	d179      	bne.n	8bdca <__sfvwrite_r+0x186>
   8bcd6:	4656      	mov	r6, sl
   8bcd8:	2e00      	cmp	r6, #0
   8bcda:	d056      	beq.n	8bd8a <__sfvwrite_r+0x146>
   8bcdc:	059a      	lsls	r2, r3, #22
   8bcde:	68a7      	ldr	r7, [r4, #8]
   8bce0:	f140 80bd 	bpl.w	8be5e <__sfvwrite_r+0x21a>
   8bce4:	42b7      	cmp	r7, r6
   8bce6:	46bb      	mov	fp, r7
   8bce8:	f200 80d2 	bhi.w	8be90 <__sfvwrite_r+0x24c>
   8bcec:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bcf0:	f000 80d0 	beq.w	8be94 <__sfvwrite_r+0x250>
   8bcf4:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8bcf8:	6822      	ldr	r2, [r4, #0]
   8bcfa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8bcfe:	eba2 0b01 	sub.w	fp, r2, r1
   8bd02:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8bd06:	f10b 0001 	add.w	r0, fp, #1
   8bd0a:	107f      	asrs	r7, r7, #1
   8bd0c:	4430      	add	r0, r6
   8bd0e:	42b8      	cmp	r0, r7
   8bd10:	463a      	mov	r2, r7
   8bd12:	bf84      	itt	hi
   8bd14:	4607      	movhi	r7, r0
   8bd16:	463a      	movhi	r2, r7
   8bd18:	055b      	lsls	r3, r3, #21
   8bd1a:	f140 80e7 	bpl.w	8beec <__sfvwrite_r+0x2a8>
   8bd1e:	4611      	mov	r1, r2
   8bd20:	4648      	mov	r0, r9
   8bd22:	f000 f9bb 	bl	8c09c <_malloc_r>
   8bd26:	2800      	cmp	r0, #0
   8bd28:	f000 80f6 	beq.w	8bf18 <__sfvwrite_r+0x2d4>
   8bd2c:	465a      	mov	r2, fp
   8bd2e:	6921      	ldr	r1, [r4, #16]
   8bd30:	9000      	str	r0, [sp, #0]
   8bd32:	f7fb fd7f 	bl	87834 <memcpy>
   8bd36:	89a2      	ldrh	r2, [r4, #12]
   8bd38:	9b00      	ldr	r3, [sp, #0]
   8bd3a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bd3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bd42:	81a2      	strh	r2, [r4, #12]
   8bd44:	eba7 020b 	sub.w	r2, r7, fp
   8bd48:	eb03 000b 	add.w	r0, r3, fp
   8bd4c:	6167      	str	r7, [r4, #20]
   8bd4e:	46b3      	mov	fp, r6
   8bd50:	4637      	mov	r7, r6
   8bd52:	6123      	str	r3, [r4, #16]
   8bd54:	6020      	str	r0, [r4, #0]
   8bd56:	60a2      	str	r2, [r4, #8]
   8bd58:	465a      	mov	r2, fp
   8bd5a:	4651      	mov	r1, sl
   8bd5c:	f000 fca2 	bl	8c6a4 <memmove>
   8bd60:	68a2      	ldr	r2, [r4, #8]
   8bd62:	6823      	ldr	r3, [r4, #0]
   8bd64:	1bd2      	subs	r2, r2, r7
   8bd66:	4637      	mov	r7, r6
   8bd68:	2600      	movs	r6, #0
   8bd6a:	445b      	add	r3, fp
   8bd6c:	60a2      	str	r2, [r4, #8]
   8bd6e:	6023      	str	r3, [r4, #0]
   8bd70:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8bd74:	44ba      	add	sl, r7
   8bd76:	1bd7      	subs	r7, r2, r7
   8bd78:	f8c8 7008 	str.w	r7, [r8, #8]
   8bd7c:	2f00      	cmp	r7, #0
   8bd7e:	d094      	beq.n	8bcaa <__sfvwrite_r+0x66>
   8bd80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bd84:	b29b      	uxth	r3, r3
   8bd86:	2e00      	cmp	r6, #0
   8bd88:	d1a8      	bne.n	8bcdc <__sfvwrite_r+0x98>
   8bd8a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8bd8e:	3508      	adds	r5, #8
   8bd90:	e7a2      	b.n	8bcd8 <__sfvwrite_r+0x94>
   8bd92:	e9d5 b700 	ldrd	fp, r7, [r5]
   8bd96:	3508      	adds	r5, #8
   8bd98:	e76f      	b.n	8bc7a <__sfvwrite_r+0x36>
   8bd9a:	4629      	mov	r1, r5
   8bd9c:	465a      	mov	r2, fp
   8bd9e:	f000 fc81 	bl	8c6a4 <memmove>
   8bda2:	6823      	ldr	r3, [r4, #0]
   8bda4:	4621      	mov	r1, r4
   8bda6:	445b      	add	r3, fp
   8bda8:	4648      	mov	r0, r9
   8bdaa:	6023      	str	r3, [r4, #0]
   8bdac:	f7ff fcc4 	bl	8b738 <_fflush_r>
   8bdb0:	b358      	cbz	r0, 8be0a <__sfvwrite_r+0x1c6>
   8bdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bdb6:	f04f 30ff 	mov.w	r0, #4294967295
   8bdba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8bdbe:	81a3      	strh	r3, [r4, #12]
   8bdc0:	b003      	add	sp, #12
   8bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bdc6:	2000      	movs	r0, #0
   8bdc8:	4770      	bx	lr
   8bdca:	463e      	mov	r6, r7
   8bdcc:	46aa      	mov	sl, r5
   8bdce:	4638      	mov	r0, r7
   8bdd0:	463d      	mov	r5, r7
   8bdd2:	9700      	str	r7, [sp, #0]
   8bdd4:	b36e      	cbz	r6, 8be32 <__sfvwrite_r+0x1ee>
   8bdd6:	2800      	cmp	r0, #0
   8bdd8:	d035      	beq.n	8be46 <__sfvwrite_r+0x202>
   8bdda:	9a00      	ldr	r2, [sp, #0]
   8bddc:	6820      	ldr	r0, [r4, #0]
   8bdde:	6921      	ldr	r1, [r4, #16]
   8bde0:	42b2      	cmp	r2, r6
   8bde2:	bf28      	it	cs
   8bde4:	4632      	movcs	r2, r6
   8bde6:	4288      	cmp	r0, r1
   8bde8:	6963      	ldr	r3, [r4, #20]
   8bdea:	d904      	bls.n	8bdf6 <__sfvwrite_r+0x1b2>
   8bdec:	68a1      	ldr	r1, [r4, #8]
   8bdee:	eb03 0b01 	add.w	fp, r3, r1
   8bdf2:	455a      	cmp	r2, fp
   8bdf4:	dcd1      	bgt.n	8bd9a <__sfvwrite_r+0x156>
   8bdf6:	4293      	cmp	r3, r2
   8bdf8:	dc6b      	bgt.n	8bed2 <__sfvwrite_r+0x28e>
   8bdfa:	462a      	mov	r2, r5
   8bdfc:	4648      	mov	r0, r9
   8bdfe:	69e1      	ldr	r1, [r4, #28]
   8be00:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8be02:	47b8      	blx	r7
   8be04:	f1b0 0b00 	subs.w	fp, r0, #0
   8be08:	ddd3      	ble.n	8bdb2 <__sfvwrite_r+0x16e>
   8be0a:	9b00      	ldr	r3, [sp, #0]
   8be0c:	ebb3 030b 	subs.w	r3, r3, fp
   8be10:	9300      	str	r3, [sp, #0]
   8be12:	d057      	beq.n	8bec4 <__sfvwrite_r+0x280>
   8be14:	2001      	movs	r0, #1
   8be16:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8be1a:	445d      	add	r5, fp
   8be1c:	eba3 030b 	sub.w	r3, r3, fp
   8be20:	eba6 060b 	sub.w	r6, r6, fp
   8be24:	f8c8 3008 	str.w	r3, [r8, #8]
   8be28:	2b00      	cmp	r3, #0
   8be2a:	f43f af3e 	beq.w	8bcaa <__sfvwrite_r+0x66>
   8be2e:	2e00      	cmp	r6, #0
   8be30:	d1d1      	bne.n	8bdd6 <__sfvwrite_r+0x192>
   8be32:	f10a 0308 	add.w	r3, sl, #8
   8be36:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8be3a:	469a      	mov	sl, r3
   8be3c:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8be40:	3308      	adds	r3, #8
   8be42:	2e00      	cmp	r6, #0
   8be44:	d0f7      	beq.n	8be36 <__sfvwrite_r+0x1f2>
   8be46:	4632      	mov	r2, r6
   8be48:	210a      	movs	r1, #10
   8be4a:	4628      	mov	r0, r5
   8be4c:	f000 fbea 	bl	8c624 <memchr>
   8be50:	2800      	cmp	r0, #0
   8be52:	d05e      	beq.n	8bf12 <__sfvwrite_r+0x2ce>
   8be54:	3001      	adds	r0, #1
   8be56:	1b43      	subs	r3, r0, r5
   8be58:	461a      	mov	r2, r3
   8be5a:	9300      	str	r3, [sp, #0]
   8be5c:	e7be      	b.n	8bddc <__sfvwrite_r+0x198>
   8be5e:	6820      	ldr	r0, [r4, #0]
   8be60:	6923      	ldr	r3, [r4, #16]
   8be62:	4298      	cmp	r0, r3
   8be64:	d818      	bhi.n	8be98 <__sfvwrite_r+0x254>
   8be66:	6962      	ldr	r2, [r4, #20]
   8be68:	42b2      	cmp	r2, r6
   8be6a:	d815      	bhi.n	8be98 <__sfvwrite_r+0x254>
   8be6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8be70:	42b3      	cmp	r3, r6
   8be72:	bf28      	it	cs
   8be74:	4633      	movcs	r3, r6
   8be76:	fb93 f3f2 	sdiv	r3, r3, r2
   8be7a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8be7c:	fb02 f303 	mul.w	r3, r2, r3
   8be80:	4648      	mov	r0, r9
   8be82:	4652      	mov	r2, sl
   8be84:	69e1      	ldr	r1, [r4, #28]
   8be86:	47b8      	blx	r7
   8be88:	1e07      	subs	r7, r0, #0
   8be8a:	dd92      	ble.n	8bdb2 <__sfvwrite_r+0x16e>
   8be8c:	1bf6      	subs	r6, r6, r7
   8be8e:	e76f      	b.n	8bd70 <__sfvwrite_r+0x12c>
   8be90:	4637      	mov	r7, r6
   8be92:	46b3      	mov	fp, r6
   8be94:	6820      	ldr	r0, [r4, #0]
   8be96:	e75f      	b.n	8bd58 <__sfvwrite_r+0x114>
   8be98:	42b7      	cmp	r7, r6
   8be9a:	bf28      	it	cs
   8be9c:	4637      	movcs	r7, r6
   8be9e:	4651      	mov	r1, sl
   8bea0:	463a      	mov	r2, r7
   8bea2:	f000 fbff 	bl	8c6a4 <memmove>
   8bea6:	68a3      	ldr	r3, [r4, #8]
   8bea8:	6822      	ldr	r2, [r4, #0]
   8beaa:	1bdb      	subs	r3, r3, r7
   8beac:	443a      	add	r2, r7
   8beae:	60a3      	str	r3, [r4, #8]
   8beb0:	6022      	str	r2, [r4, #0]
   8beb2:	2b00      	cmp	r3, #0
   8beb4:	d1ea      	bne.n	8be8c <__sfvwrite_r+0x248>
   8beb6:	4621      	mov	r1, r4
   8beb8:	4648      	mov	r0, r9
   8beba:	f7ff fc3d 	bl	8b738 <_fflush_r>
   8bebe:	2800      	cmp	r0, #0
   8bec0:	d0e4      	beq.n	8be8c <__sfvwrite_r+0x248>
   8bec2:	e776      	b.n	8bdb2 <__sfvwrite_r+0x16e>
   8bec4:	4621      	mov	r1, r4
   8bec6:	4648      	mov	r0, r9
   8bec8:	f7ff fc36 	bl	8b738 <_fflush_r>
   8becc:	2800      	cmp	r0, #0
   8bece:	d0a2      	beq.n	8be16 <__sfvwrite_r+0x1d2>
   8bed0:	e76f      	b.n	8bdb2 <__sfvwrite_r+0x16e>
   8bed2:	4629      	mov	r1, r5
   8bed4:	4693      	mov	fp, r2
   8bed6:	9201      	str	r2, [sp, #4]
   8bed8:	f000 fbe4 	bl	8c6a4 <memmove>
   8bedc:	68a1      	ldr	r1, [r4, #8]
   8bede:	6823      	ldr	r3, [r4, #0]
   8bee0:	9a01      	ldr	r2, [sp, #4]
   8bee2:	1a89      	subs	r1, r1, r2
   8bee4:	441a      	add	r2, r3
   8bee6:	60a1      	str	r1, [r4, #8]
   8bee8:	6022      	str	r2, [r4, #0]
   8beea:	e78e      	b.n	8be0a <__sfvwrite_r+0x1c6>
   8beec:	4648      	mov	r0, r9
   8beee:	f000 ffcb 	bl	8ce88 <_realloc_r>
   8bef2:	4603      	mov	r3, r0
   8bef4:	2800      	cmp	r0, #0
   8bef6:	f47f af25 	bne.w	8bd44 <__sfvwrite_r+0x100>
   8befa:	4648      	mov	r0, r9
   8befc:	6921      	ldr	r1, [r4, #16]
   8befe:	f7ff fd9b 	bl	8ba38 <_free_r>
   8bf02:	220c      	movs	r2, #12
   8bf04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf08:	f8c9 2000 	str.w	r2, [r9]
   8bf0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8bf10:	e751      	b.n	8bdb6 <__sfvwrite_r+0x172>
   8bf12:	1c72      	adds	r2, r6, #1
   8bf14:	9200      	str	r2, [sp, #0]
   8bf16:	e761      	b.n	8bddc <__sfvwrite_r+0x198>
   8bf18:	220c      	movs	r2, #12
   8bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf1e:	f8c9 2000 	str.w	r2, [r9]
   8bf22:	e748      	b.n	8bdb6 <__sfvwrite_r+0x172>
   8bf24:	f04f 30ff 	mov.w	r0, #4294967295
   8bf28:	e6c0      	b.n	8bcac <__sfvwrite_r+0x68>
   8bf2a:	bf00      	nop
   8bf2c:	7ffffc00 	.word	0x7ffffc00

0008bf30 <_fwalk_reent>:
   8bf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8bf34:	4607      	mov	r7, r0
   8bf36:	4688      	mov	r8, r1
   8bf38:	f04f 0900 	mov.w	r9, #0
   8bf3c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8bf40:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8bf44:	3d01      	subs	r5, #1
   8bf46:	d410      	bmi.n	8bf6a <_fwalk_reent+0x3a>
   8bf48:	89a3      	ldrh	r3, [r4, #12]
   8bf4a:	3d01      	subs	r5, #1
   8bf4c:	2b01      	cmp	r3, #1
   8bf4e:	d908      	bls.n	8bf62 <_fwalk_reent+0x32>
   8bf50:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8bf54:	3301      	adds	r3, #1
   8bf56:	d004      	beq.n	8bf62 <_fwalk_reent+0x32>
   8bf58:	4621      	mov	r1, r4
   8bf5a:	4638      	mov	r0, r7
   8bf5c:	47c0      	blx	r8
   8bf5e:	ea49 0900 	orr.w	r9, r9, r0
   8bf62:	1c6b      	adds	r3, r5, #1
   8bf64:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8bf68:	d1ee      	bne.n	8bf48 <_fwalk_reent+0x18>
   8bf6a:	6836      	ldr	r6, [r6, #0]
   8bf6c:	2e00      	cmp	r6, #0
   8bf6e:	d1e7      	bne.n	8bf40 <_fwalk_reent+0x10>
   8bf70:	4648      	mov	r0, r9
   8bf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8bf76:	bf00      	nop

0008bf78 <__locale_mb_cur_max>:
   8bf78:	4b01      	ldr	r3, [pc, #4]	; (8bf80 <__locale_mb_cur_max+0x8>)
   8bf7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8bf7e:	4770      	bx	lr
   8bf80:	20000b44 	.word	0x20000b44

0008bf84 <_localeconv_r>:
   8bf84:	4800      	ldr	r0, [pc, #0]	; (8bf88 <_localeconv_r+0x4>)
   8bf86:	4770      	bx	lr
   8bf88:	20000c34 	.word	0x20000c34

0008bf8c <__retarget_lock_init_recursive>:
   8bf8c:	4770      	bx	lr
   8bf8e:	bf00      	nop

0008bf90 <__retarget_lock_close_recursive>:
   8bf90:	4770      	bx	lr
   8bf92:	bf00      	nop

0008bf94 <__retarget_lock_acquire_recursive>:
   8bf94:	4770      	bx	lr
   8bf96:	bf00      	nop

0008bf98 <__retarget_lock_release_recursive>:
   8bf98:	4770      	bx	lr
   8bf9a:	bf00      	nop

0008bf9c <__swhatbuf_r>:
   8bf9c:	b570      	push	{r4, r5, r6, lr}
   8bf9e:	460c      	mov	r4, r1
   8bfa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bfa4:	4615      	mov	r5, r2
   8bfa6:	2900      	cmp	r1, #0
   8bfa8:	461e      	mov	r6, r3
   8bfaa:	b096      	sub	sp, #88	; 0x58
   8bfac:	db14      	blt.n	8bfd8 <__swhatbuf_r+0x3c>
   8bfae:	466a      	mov	r2, sp
   8bfb0:	f001 fc82 	bl	8d8b8 <_fstat_r>
   8bfb4:	2800      	cmp	r0, #0
   8bfb6:	db0f      	blt.n	8bfd8 <__swhatbuf_r+0x3c>
   8bfb8:	9a01      	ldr	r2, [sp, #4]
   8bfba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8bfbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8bfc2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8bfc6:	fab2 f282 	clz	r2, r2
   8bfca:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8bfce:	0952      	lsrs	r2, r2, #5
   8bfd0:	6032      	str	r2, [r6, #0]
   8bfd2:	602b      	str	r3, [r5, #0]
   8bfd4:	b016      	add	sp, #88	; 0x58
   8bfd6:	bd70      	pop	{r4, r5, r6, pc}
   8bfd8:	2300      	movs	r3, #0
   8bfda:	89a1      	ldrh	r1, [r4, #12]
   8bfdc:	6033      	str	r3, [r6, #0]
   8bfde:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8bfe2:	d004      	beq.n	8bfee <__swhatbuf_r+0x52>
   8bfe4:	2240      	movs	r2, #64	; 0x40
   8bfe6:	4618      	mov	r0, r3
   8bfe8:	602a      	str	r2, [r5, #0]
   8bfea:	b016      	add	sp, #88	; 0x58
   8bfec:	bd70      	pop	{r4, r5, r6, pc}
   8bfee:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8bff2:	602b      	str	r3, [r5, #0]
   8bff4:	b016      	add	sp, #88	; 0x58
   8bff6:	bd70      	pop	{r4, r5, r6, pc}

0008bff8 <__smakebuf_r>:
   8bff8:	b570      	push	{r4, r5, r6, lr}
   8bffa:	898b      	ldrh	r3, [r1, #12]
   8bffc:	460c      	mov	r4, r1
   8bffe:	079d      	lsls	r5, r3, #30
   8c000:	b082      	sub	sp, #8
   8c002:	d507      	bpl.n	8c014 <__smakebuf_r+0x1c>
   8c004:	2201      	movs	r2, #1
   8c006:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8c00a:	614a      	str	r2, [r1, #20]
   8c00c:	600b      	str	r3, [r1, #0]
   8c00e:	610b      	str	r3, [r1, #16]
   8c010:	b002      	add	sp, #8
   8c012:	bd70      	pop	{r4, r5, r6, pc}
   8c014:	ab01      	add	r3, sp, #4
   8c016:	466a      	mov	r2, sp
   8c018:	4606      	mov	r6, r0
   8c01a:	f7ff ffbf 	bl	8bf9c <__swhatbuf_r>
   8c01e:	9900      	ldr	r1, [sp, #0]
   8c020:	4605      	mov	r5, r0
   8c022:	4630      	mov	r0, r6
   8c024:	f000 f83a 	bl	8c09c <_malloc_r>
   8c028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c02c:	b170      	cbz	r0, 8c04c <__smakebuf_r+0x54>
   8c02e:	4916      	ldr	r1, [pc, #88]	; (8c088 <__smakebuf_r+0x90>)
   8c030:	9a00      	ldr	r2, [sp, #0]
   8c032:	63f1      	str	r1, [r6, #60]	; 0x3c
   8c034:	9901      	ldr	r1, [sp, #4]
   8c036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8c03a:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8c03e:	81a3      	strh	r3, [r4, #12]
   8c040:	6020      	str	r0, [r4, #0]
   8c042:	b989      	cbnz	r1, 8c068 <__smakebuf_r+0x70>
   8c044:	432b      	orrs	r3, r5
   8c046:	81a3      	strh	r3, [r4, #12]
   8c048:	b002      	add	sp, #8
   8c04a:	bd70      	pop	{r4, r5, r6, pc}
   8c04c:	059a      	lsls	r2, r3, #22
   8c04e:	d4df      	bmi.n	8c010 <__smakebuf_r+0x18>
   8c050:	2101      	movs	r1, #1
   8c052:	f023 0303 	bic.w	r3, r3, #3
   8c056:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8c05a:	f043 0302 	orr.w	r3, r3, #2
   8c05e:	81a3      	strh	r3, [r4, #12]
   8c060:	6161      	str	r1, [r4, #20]
   8c062:	6022      	str	r2, [r4, #0]
   8c064:	6122      	str	r2, [r4, #16]
   8c066:	e7d3      	b.n	8c010 <__smakebuf_r+0x18>
   8c068:	4630      	mov	r0, r6
   8c06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c06e:	f001 fc39 	bl	8d8e4 <_isatty_r>
   8c072:	b910      	cbnz	r0, 8c07a <__smakebuf_r+0x82>
   8c074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c078:	e7e4      	b.n	8c044 <__smakebuf_r+0x4c>
   8c07a:	89a2      	ldrh	r2, [r4, #12]
   8c07c:	f022 0203 	bic.w	r2, r2, #3
   8c080:	f042 0201 	orr.w	r2, r2, #1
   8c084:	b213      	sxth	r3, r2
   8c086:	e7dd      	b.n	8c044 <__smakebuf_r+0x4c>
   8c088:	0008b7e5 	.word	0x0008b7e5

0008c08c <malloc>:
   8c08c:	4b02      	ldr	r3, [pc, #8]	; (8c098 <malloc+0xc>)
   8c08e:	4601      	mov	r1, r0
   8c090:	6818      	ldr	r0, [r3, #0]
   8c092:	f000 b803 	b.w	8c09c <_malloc_r>
   8c096:	bf00      	nop
   8c098:	20000714 	.word	0x20000714

0008c09c <_malloc_r>:
   8c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c0a0:	f101 050b 	add.w	r5, r1, #11
   8c0a4:	2d16      	cmp	r5, #22
   8c0a6:	4606      	mov	r6, r0
   8c0a8:	b083      	sub	sp, #12
   8c0aa:	d824      	bhi.n	8c0f6 <_malloc_r+0x5a>
   8c0ac:	2910      	cmp	r1, #16
   8c0ae:	f200 80b6 	bhi.w	8c21e <_malloc_r+0x182>
   8c0b2:	f000 fb61 	bl	8c778 <__malloc_lock>
   8c0b6:	2510      	movs	r5, #16
   8c0b8:	2002      	movs	r0, #2
   8c0ba:	2318      	movs	r3, #24
   8c0bc:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8c5a8 <_malloc_r+0x50c>
   8c0c0:	4443      	add	r3, r8
   8c0c2:	685c      	ldr	r4, [r3, #4]
   8c0c4:	f1a3 0208 	sub.w	r2, r3, #8
   8c0c8:	4294      	cmp	r4, r2
   8c0ca:	f000 80b4 	beq.w	8c236 <_malloc_r+0x19a>
   8c0ce:	6863      	ldr	r3, [r4, #4]
   8c0d0:	68e1      	ldr	r1, [r4, #12]
   8c0d2:	f023 0303 	bic.w	r3, r3, #3
   8c0d6:	4423      	add	r3, r4
   8c0d8:	685a      	ldr	r2, [r3, #4]
   8c0da:	68a5      	ldr	r5, [r4, #8]
   8c0dc:	f042 0201 	orr.w	r2, r2, #1
   8c0e0:	60e9      	str	r1, [r5, #12]
   8c0e2:	4630      	mov	r0, r6
   8c0e4:	608d      	str	r5, [r1, #8]
   8c0e6:	3408      	adds	r4, #8
   8c0e8:	605a      	str	r2, [r3, #4]
   8c0ea:	f000 fb4b 	bl	8c784 <__malloc_unlock>
   8c0ee:	4620      	mov	r0, r4
   8c0f0:	b003      	add	sp, #12
   8c0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c0f6:	f035 0507 	bics.w	r5, r5, #7
   8c0fa:	f100 8090 	bmi.w	8c21e <_malloc_r+0x182>
   8c0fe:	42a9      	cmp	r1, r5
   8c100:	f200 808d 	bhi.w	8c21e <_malloc_r+0x182>
   8c104:	f000 fb38 	bl	8c778 <__malloc_lock>
   8c108:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8c10c:	f0c0 8185 	bcc.w	8c41a <_malloc_r+0x37e>
   8c110:	0a6b      	lsrs	r3, r5, #9
   8c112:	f000 808b 	beq.w	8c22c <_malloc_r+0x190>
   8c116:	2b04      	cmp	r3, #4
   8c118:	f200 815b 	bhi.w	8c3d2 <_malloc_r+0x336>
   8c11c:	09ab      	lsrs	r3, r5, #6
   8c11e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8c122:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8c126:	00c1      	lsls	r1, r0, #3
   8c128:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8c5a8 <_malloc_r+0x50c>
   8c12c:	4441      	add	r1, r8
   8c12e:	684c      	ldr	r4, [r1, #4]
   8c130:	3908      	subs	r1, #8
   8c132:	42a1      	cmp	r1, r4
   8c134:	d106      	bne.n	8c144 <_malloc_r+0xa8>
   8c136:	e00c      	b.n	8c152 <_malloc_r+0xb6>
   8c138:	2a00      	cmp	r2, #0
   8c13a:	f280 8122 	bge.w	8c382 <_malloc_r+0x2e6>
   8c13e:	68e4      	ldr	r4, [r4, #12]
   8c140:	42a1      	cmp	r1, r4
   8c142:	d006      	beq.n	8c152 <_malloc_r+0xb6>
   8c144:	6863      	ldr	r3, [r4, #4]
   8c146:	f023 0303 	bic.w	r3, r3, #3
   8c14a:	1b5a      	subs	r2, r3, r5
   8c14c:	2a0f      	cmp	r2, #15
   8c14e:	ddf3      	ble.n	8c138 <_malloc_r+0x9c>
   8c150:	4638      	mov	r0, r7
   8c152:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c156:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8c5ac <_malloc_r+0x510>
   8c15a:	4564      	cmp	r4, ip
   8c15c:	d077      	beq.n	8c24e <_malloc_r+0x1b2>
   8c15e:	6862      	ldr	r2, [r4, #4]
   8c160:	f022 0203 	bic.w	r2, r2, #3
   8c164:	1b53      	subs	r3, r2, r5
   8c166:	2b0f      	cmp	r3, #15
   8c168:	f300 8165 	bgt.w	8c436 <_malloc_r+0x39a>
   8c16c:	2b00      	cmp	r3, #0
   8c16e:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8c172:	f280 8156 	bge.w	8c422 <_malloc_r+0x386>
   8c176:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8c17a:	f080 8106 	bcs.w	8c38a <_malloc_r+0x2ee>
   8c17e:	2101      	movs	r1, #1
   8c180:	08d3      	lsrs	r3, r2, #3
   8c182:	0952      	lsrs	r2, r2, #5
   8c184:	440b      	add	r3, r1
   8c186:	fa01 f202 	lsl.w	r2, r1, r2
   8c18a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8c18e:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8c192:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8c196:	430a      	orrs	r2, r1
   8c198:	f1ae 0108 	sub.w	r1, lr, #8
   8c19c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8c1a0:	f8c8 2004 	str.w	r2, [r8, #4]
   8c1a4:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8c1a8:	60fc      	str	r4, [r7, #12]
   8c1aa:	2101      	movs	r1, #1
   8c1ac:	1083      	asrs	r3, r0, #2
   8c1ae:	4099      	lsls	r1, r3
   8c1b0:	4291      	cmp	r1, r2
   8c1b2:	d853      	bhi.n	8c25c <_malloc_r+0x1c0>
   8c1b4:	4211      	tst	r1, r2
   8c1b6:	d106      	bne.n	8c1c6 <_malloc_r+0x12a>
   8c1b8:	f020 0003 	bic.w	r0, r0, #3
   8c1bc:	0049      	lsls	r1, r1, #1
   8c1be:	4211      	tst	r1, r2
   8c1c0:	f100 0004 	add.w	r0, r0, #4
   8c1c4:	d0fa      	beq.n	8c1bc <_malloc_r+0x120>
   8c1c6:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8c1ca:	464c      	mov	r4, r9
   8c1cc:	4686      	mov	lr, r0
   8c1ce:	68e7      	ldr	r7, [r4, #12]
   8c1d0:	42bc      	cmp	r4, r7
   8c1d2:	d107      	bne.n	8c1e4 <_malloc_r+0x148>
   8c1d4:	e109      	b.n	8c3ea <_malloc_r+0x34e>
   8c1d6:	2b00      	cmp	r3, #0
   8c1d8:	f280 8110 	bge.w	8c3fc <_malloc_r+0x360>
   8c1dc:	68ff      	ldr	r7, [r7, #12]
   8c1de:	42bc      	cmp	r4, r7
   8c1e0:	f000 8103 	beq.w	8c3ea <_malloc_r+0x34e>
   8c1e4:	687a      	ldr	r2, [r7, #4]
   8c1e6:	f022 0203 	bic.w	r2, r2, #3
   8c1ea:	1b53      	subs	r3, r2, r5
   8c1ec:	2b0f      	cmp	r3, #15
   8c1ee:	ddf2      	ble.n	8c1d6 <_malloc_r+0x13a>
   8c1f0:	f045 0e01 	orr.w	lr, r5, #1
   8c1f4:	4630      	mov	r0, r6
   8c1f6:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8c1fa:	443d      	add	r5, r7
   8c1fc:	f043 0601 	orr.w	r6, r3, #1
   8c200:	f8c7 e004 	str.w	lr, [r7, #4]
   8c204:	60e1      	str	r1, [r4, #12]
   8c206:	608c      	str	r4, [r1, #8]
   8c208:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8c20c:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8c210:	606e      	str	r6, [r5, #4]
   8c212:	50bb      	str	r3, [r7, r2]
   8c214:	f000 fab6 	bl	8c784 <__malloc_unlock>
   8c218:	f107 0408 	add.w	r4, r7, #8
   8c21c:	e002      	b.n	8c224 <_malloc_r+0x188>
   8c21e:	230c      	movs	r3, #12
   8c220:	2400      	movs	r4, #0
   8c222:	6033      	str	r3, [r6, #0]
   8c224:	4620      	mov	r0, r4
   8c226:	b003      	add	sp, #12
   8c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c22c:	f44f 7100 	mov.w	r1, #512	; 0x200
   8c230:	2040      	movs	r0, #64	; 0x40
   8c232:	273f      	movs	r7, #63	; 0x3f
   8c234:	e778      	b.n	8c128 <_malloc_r+0x8c>
   8c236:	68dc      	ldr	r4, [r3, #12]
   8c238:	42a3      	cmp	r3, r4
   8c23a:	bf08      	it	eq
   8c23c:	3002      	addeq	r0, #2
   8c23e:	f47f af46 	bne.w	8c0ce <_malloc_r+0x32>
   8c242:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c246:	f8df c364 	ldr.w	ip, [pc, #868]	; 8c5ac <_malloc_r+0x510>
   8c24a:	4564      	cmp	r4, ip
   8c24c:	d187      	bne.n	8c15e <_malloc_r+0xc2>
   8c24e:	2101      	movs	r1, #1
   8c250:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8c254:	1083      	asrs	r3, r0, #2
   8c256:	4099      	lsls	r1, r3
   8c258:	4291      	cmp	r1, r2
   8c25a:	d9ab      	bls.n	8c1b4 <_malloc_r+0x118>
   8c25c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c260:	6867      	ldr	r7, [r4, #4]
   8c262:	f027 0703 	bic.w	r7, r7, #3
   8c266:	42bd      	cmp	r5, r7
   8c268:	d802      	bhi.n	8c270 <_malloc_r+0x1d4>
   8c26a:	1b7b      	subs	r3, r7, r5
   8c26c:	2b0f      	cmp	r3, #15
   8c26e:	dc77      	bgt.n	8c360 <_malloc_r+0x2c4>
   8c270:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8c5b0 <_malloc_r+0x514>
   8c274:	4bc8      	ldr	r3, [pc, #800]	; (8c598 <_malloc_r+0x4fc>)
   8c276:	f8d9 2000 	ldr.w	r2, [r9]
   8c27a:	681b      	ldr	r3, [r3, #0]
   8c27c:	3201      	adds	r2, #1
   8c27e:	442b      	add	r3, r5
   8c280:	eb04 0a07 	add.w	sl, r4, r7
   8c284:	f000 8124 	beq.w	8c4d0 <_malloc_r+0x434>
   8c288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8c28c:	330f      	adds	r3, #15
   8c28e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8c292:	f02b 0b0f 	bic.w	fp, fp, #15
   8c296:	4659      	mov	r1, fp
   8c298:	4630      	mov	r0, r6
   8c29a:	f001 f81d 	bl	8d2d8 <_sbrk_r>
   8c29e:	1c41      	adds	r1, r0, #1
   8c2a0:	4602      	mov	r2, r0
   8c2a2:	f000 80e1 	beq.w	8c468 <_malloc_r+0x3cc>
   8c2a6:	4582      	cmp	sl, r0
   8c2a8:	f200 80dc 	bhi.w	8c464 <_malloc_r+0x3c8>
   8c2ac:	4bbb      	ldr	r3, [pc, #748]	; (8c59c <_malloc_r+0x500>)
   8c2ae:	6819      	ldr	r1, [r3, #0]
   8c2b0:	4459      	add	r1, fp
   8c2b2:	4608      	mov	r0, r1
   8c2b4:	6019      	str	r1, [r3, #0]
   8c2b6:	f000 8141 	beq.w	8c53c <_malloc_r+0x4a0>
   8c2ba:	f8d9 1000 	ldr.w	r1, [r9]
   8c2be:	9301      	str	r3, [sp, #4]
   8c2c0:	3101      	adds	r1, #1
   8c2c2:	bf1b      	ittet	ne
   8c2c4:	eba2 0a0a 	subne.w	sl, r2, sl
   8c2c8:	4450      	addne	r0, sl
   8c2ca:	f8c9 2000 	streq.w	r2, [r9]
   8c2ce:	6018      	strne	r0, [r3, #0]
   8c2d0:	f012 0a07 	ands.w	sl, r2, #7
   8c2d4:	f000 810a 	beq.w	8c4ec <_malloc_r+0x450>
   8c2d8:	f1ca 0108 	rsb	r1, sl, #8
   8c2dc:	440a      	add	r2, r1
   8c2de:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8c2e2:	4493      	add	fp, r2
   8c2e4:	3108      	adds	r1, #8
   8c2e6:	eba1 010b 	sub.w	r1, r1, fp
   8c2ea:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8c2ee:	4649      	mov	r1, r9
   8c2f0:	4630      	mov	r0, r6
   8c2f2:	9200      	str	r2, [sp, #0]
   8c2f4:	f000 fff0 	bl	8d2d8 <_sbrk_r>
   8c2f8:	1c42      	adds	r2, r0, #1
   8c2fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c2fe:	f000 8143 	beq.w	8c588 <_malloc_r+0x4ec>
   8c302:	1a80      	subs	r0, r0, r2
   8c304:	eb00 0b09 	add.w	fp, r0, r9
   8c308:	6819      	ldr	r1, [r3, #0]
   8c30a:	f04b 0001 	orr.w	r0, fp, #1
   8c30e:	4449      	add	r1, r9
   8c310:	4544      	cmp	r4, r8
   8c312:	f8c8 2008 	str.w	r2, [r8, #8]
   8c316:	6019      	str	r1, [r3, #0]
   8c318:	6050      	str	r0, [r2, #4]
   8c31a:	f000 811c 	beq.w	8c556 <_malloc_r+0x4ba>
   8c31e:	2f0f      	cmp	r7, #15
   8c320:	f240 811b 	bls.w	8c55a <_malloc_r+0x4be>
   8c324:	f04f 0c05 	mov.w	ip, #5
   8c328:	6860      	ldr	r0, [r4, #4]
   8c32a:	3f0c      	subs	r7, #12
   8c32c:	f027 0707 	bic.w	r7, r7, #7
   8c330:	f000 0001 	and.w	r0, r0, #1
   8c334:	4338      	orrs	r0, r7
   8c336:	eb04 0e07 	add.w	lr, r4, r7
   8c33a:	2f0f      	cmp	r7, #15
   8c33c:	6060      	str	r0, [r4, #4]
   8c33e:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8c342:	f200 8137 	bhi.w	8c5b4 <_malloc_r+0x518>
   8c346:	4614      	mov	r4, r2
   8c348:	6850      	ldr	r0, [r2, #4]
   8c34a:	4b95      	ldr	r3, [pc, #596]	; (8c5a0 <_malloc_r+0x504>)
   8c34c:	681a      	ldr	r2, [r3, #0]
   8c34e:	428a      	cmp	r2, r1
   8c350:	bf38      	it	cc
   8c352:	6019      	strcc	r1, [r3, #0]
   8c354:	4b93      	ldr	r3, [pc, #588]	; (8c5a4 <_malloc_r+0x508>)
   8c356:	681a      	ldr	r2, [r3, #0]
   8c358:	428a      	cmp	r2, r1
   8c35a:	bf38      	it	cc
   8c35c:	6019      	strcc	r1, [r3, #0]
   8c35e:	e086      	b.n	8c46e <_malloc_r+0x3d2>
   8c360:	f045 0201 	orr.w	r2, r5, #1
   8c364:	f043 0301 	orr.w	r3, r3, #1
   8c368:	4425      	add	r5, r4
   8c36a:	6062      	str	r2, [r4, #4]
   8c36c:	4630      	mov	r0, r6
   8c36e:	f8c8 5008 	str.w	r5, [r8, #8]
   8c372:	3408      	adds	r4, #8
   8c374:	606b      	str	r3, [r5, #4]
   8c376:	f000 fa05 	bl	8c784 <__malloc_unlock>
   8c37a:	4620      	mov	r0, r4
   8c37c:	b003      	add	sp, #12
   8c37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c382:	4423      	add	r3, r4
   8c384:	685a      	ldr	r2, [r3, #4]
   8c386:	68e1      	ldr	r1, [r4, #12]
   8c388:	e6a7      	b.n	8c0da <_malloc_r+0x3e>
   8c38a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8c38e:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8c392:	d361      	bcc.n	8c458 <_malloc_r+0x3bc>
   8c394:	2b14      	cmp	r3, #20
   8c396:	f200 80ba 	bhi.w	8c50e <_malloc_r+0x472>
   8c39a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8c39e:	00c9      	lsls	r1, r1, #3
   8c3a0:	335b      	adds	r3, #91	; 0x5b
   8c3a2:	eb08 0701 	add.w	r7, r8, r1
   8c3a6:	f858 1001 	ldr.w	r1, [r8, r1]
   8c3aa:	3f08      	subs	r7, #8
   8c3ac:	428f      	cmp	r7, r1
   8c3ae:	f000 8092 	beq.w	8c4d6 <_malloc_r+0x43a>
   8c3b2:	684b      	ldr	r3, [r1, #4]
   8c3b4:	f023 0303 	bic.w	r3, r3, #3
   8c3b8:	4293      	cmp	r3, r2
   8c3ba:	d902      	bls.n	8c3c2 <_malloc_r+0x326>
   8c3bc:	6889      	ldr	r1, [r1, #8]
   8c3be:	428f      	cmp	r7, r1
   8c3c0:	d1f7      	bne.n	8c3b2 <_malloc_r+0x316>
   8c3c2:	68cf      	ldr	r7, [r1, #12]
   8c3c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8c3c8:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8c3cc:	60bc      	str	r4, [r7, #8]
   8c3ce:	60cc      	str	r4, [r1, #12]
   8c3d0:	e6eb      	b.n	8c1aa <_malloc_r+0x10e>
   8c3d2:	2b14      	cmp	r3, #20
   8c3d4:	d959      	bls.n	8c48a <_malloc_r+0x3ee>
   8c3d6:	2b54      	cmp	r3, #84	; 0x54
   8c3d8:	f200 80a1 	bhi.w	8c51e <_malloc_r+0x482>
   8c3dc:	0b2b      	lsrs	r3, r5, #12
   8c3de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8c3e2:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8c3e6:	00c1      	lsls	r1, r0, #3
   8c3e8:	e69e      	b.n	8c128 <_malloc_r+0x8c>
   8c3ea:	f10e 0e01 	add.w	lr, lr, #1
   8c3ee:	f01e 0f03 	tst.w	lr, #3
   8c3f2:	f104 0408 	add.w	r4, r4, #8
   8c3f6:	f47f aeea 	bne.w	8c1ce <_malloc_r+0x132>
   8c3fa:	e051      	b.n	8c4a0 <_malloc_r+0x404>
   8c3fc:	463c      	mov	r4, r7
   8c3fe:	443a      	add	r2, r7
   8c400:	6853      	ldr	r3, [r2, #4]
   8c402:	68f9      	ldr	r1, [r7, #12]
   8c404:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8c408:	f043 0301 	orr.w	r3, r3, #1
   8c40c:	6053      	str	r3, [r2, #4]
   8c40e:	4630      	mov	r0, r6
   8c410:	60e9      	str	r1, [r5, #12]
   8c412:	608d      	str	r5, [r1, #8]
   8c414:	f000 f9b6 	bl	8c784 <__malloc_unlock>
   8c418:	e704      	b.n	8c224 <_malloc_r+0x188>
   8c41a:	08e8      	lsrs	r0, r5, #3
   8c41c:	f105 0308 	add.w	r3, r5, #8
   8c420:	e64c      	b.n	8c0bc <_malloc_r+0x20>
   8c422:	4422      	add	r2, r4
   8c424:	6853      	ldr	r3, [r2, #4]
   8c426:	4630      	mov	r0, r6
   8c428:	f043 0301 	orr.w	r3, r3, #1
   8c42c:	6053      	str	r3, [r2, #4]
   8c42e:	3408      	adds	r4, #8
   8c430:	f000 f9a8 	bl	8c784 <__malloc_unlock>
   8c434:	e6f6      	b.n	8c224 <_malloc_r+0x188>
   8c436:	f045 0701 	orr.w	r7, r5, #1
   8c43a:	f043 0101 	orr.w	r1, r3, #1
   8c43e:	4425      	add	r5, r4
   8c440:	6067      	str	r7, [r4, #4]
   8c442:	4630      	mov	r0, r6
   8c444:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8c448:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8c44c:	6069      	str	r1, [r5, #4]
   8c44e:	50a3      	str	r3, [r4, r2]
   8c450:	f000 f998 	bl	8c784 <__malloc_unlock>
   8c454:	3408      	adds	r4, #8
   8c456:	e6e5      	b.n	8c224 <_malloc_r+0x188>
   8c458:	0993      	lsrs	r3, r2, #6
   8c45a:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8c45e:	00c9      	lsls	r1, r1, #3
   8c460:	3338      	adds	r3, #56	; 0x38
   8c462:	e79e      	b.n	8c3a2 <_malloc_r+0x306>
   8c464:	4544      	cmp	r4, r8
   8c466:	d064      	beq.n	8c532 <_malloc_r+0x496>
   8c468:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c46c:	6860      	ldr	r0, [r4, #4]
   8c46e:	f020 0b03 	bic.w	fp, r0, #3
   8c472:	455d      	cmp	r5, fp
   8c474:	ebab 0305 	sub.w	r3, fp, r5
   8c478:	d802      	bhi.n	8c480 <_malloc_r+0x3e4>
   8c47a:	2b0f      	cmp	r3, #15
   8c47c:	f73f af70 	bgt.w	8c360 <_malloc_r+0x2c4>
   8c480:	4630      	mov	r0, r6
   8c482:	f000 f97f 	bl	8c784 <__malloc_unlock>
   8c486:	2400      	movs	r4, #0
   8c488:	e6cc      	b.n	8c224 <_malloc_r+0x188>
   8c48a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8c48e:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8c492:	00c1      	lsls	r1, r0, #3
   8c494:	e648      	b.n	8c128 <_malloc_r+0x8c>
   8c496:	f859 3908 	ldr.w	r3, [r9], #-8
   8c49a:	454b      	cmp	r3, r9
   8c49c:	f040 80a9 	bne.w	8c5f2 <_malloc_r+0x556>
   8c4a0:	f010 0f03 	tst.w	r0, #3
   8c4a4:	f100 30ff 	add.w	r0, r0, #4294967295
   8c4a8:	d1f5      	bne.n	8c496 <_malloc_r+0x3fa>
   8c4aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c4ae:	ea23 0301 	bic.w	r3, r3, r1
   8c4b2:	f8c8 3004 	str.w	r3, [r8, #4]
   8c4b6:	0049      	lsls	r1, r1, #1
   8c4b8:	4299      	cmp	r1, r3
   8c4ba:	f63f aecf 	bhi.w	8c25c <_malloc_r+0x1c0>
   8c4be:	b919      	cbnz	r1, 8c4c8 <_malloc_r+0x42c>
   8c4c0:	e6cc      	b.n	8c25c <_malloc_r+0x1c0>
   8c4c2:	0049      	lsls	r1, r1, #1
   8c4c4:	f10e 0e04 	add.w	lr, lr, #4
   8c4c8:	4219      	tst	r1, r3
   8c4ca:	d0fa      	beq.n	8c4c2 <_malloc_r+0x426>
   8c4cc:	4670      	mov	r0, lr
   8c4ce:	e67a      	b.n	8c1c6 <_malloc_r+0x12a>
   8c4d0:	f103 0b10 	add.w	fp, r3, #16
   8c4d4:	e6df      	b.n	8c296 <_malloc_r+0x1fa>
   8c4d6:	f04f 0e01 	mov.w	lr, #1
   8c4da:	109a      	asrs	r2, r3, #2
   8c4dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c4e0:	fa0e f202 	lsl.w	r2, lr, r2
   8c4e4:	431a      	orrs	r2, r3
   8c4e6:	f8c8 2004 	str.w	r2, [r8, #4]
   8c4ea:	e76d      	b.n	8c3c8 <_malloc_r+0x32c>
   8c4ec:	eb02 010b 	add.w	r1, r2, fp
   8c4f0:	4249      	negs	r1, r1
   8c4f2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8c4f6:	4649      	mov	r1, r9
   8c4f8:	4630      	mov	r0, r6
   8c4fa:	9200      	str	r2, [sp, #0]
   8c4fc:	f000 feec 	bl	8d2d8 <_sbrk_r>
   8c500:	1c43      	adds	r3, r0, #1
   8c502:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c506:	f47f aefc 	bne.w	8c302 <_malloc_r+0x266>
   8c50a:	46d1      	mov	r9, sl
   8c50c:	e6fc      	b.n	8c308 <_malloc_r+0x26c>
   8c50e:	2b54      	cmp	r3, #84	; 0x54
   8c510:	d826      	bhi.n	8c560 <_malloc_r+0x4c4>
   8c512:	0b13      	lsrs	r3, r2, #12
   8c514:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8c518:	00c9      	lsls	r1, r1, #3
   8c51a:	336e      	adds	r3, #110	; 0x6e
   8c51c:	e741      	b.n	8c3a2 <_malloc_r+0x306>
   8c51e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8c522:	d826      	bhi.n	8c572 <_malloc_r+0x4d6>
   8c524:	0beb      	lsrs	r3, r5, #15
   8c526:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8c52a:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8c52e:	00c1      	lsls	r1, r0, #3
   8c530:	e5fa      	b.n	8c128 <_malloc_r+0x8c>
   8c532:	4b1a      	ldr	r3, [pc, #104]	; (8c59c <_malloc_r+0x500>)
   8c534:	6818      	ldr	r0, [r3, #0]
   8c536:	4458      	add	r0, fp
   8c538:	6018      	str	r0, [r3, #0]
   8c53a:	e6be      	b.n	8c2ba <_malloc_r+0x21e>
   8c53c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8c540:	f1bc 0f00 	cmp.w	ip, #0
   8c544:	f47f aeb9 	bne.w	8c2ba <_malloc_r+0x21e>
   8c548:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c54c:	44bb      	add	fp, r7
   8c54e:	f04b 0001 	orr.w	r0, fp, #1
   8c552:	6060      	str	r0, [r4, #4]
   8c554:	e6f9      	b.n	8c34a <_malloc_r+0x2ae>
   8c556:	4614      	mov	r4, r2
   8c558:	e6f7      	b.n	8c34a <_malloc_r+0x2ae>
   8c55a:	2301      	movs	r3, #1
   8c55c:	6053      	str	r3, [r2, #4]
   8c55e:	e78f      	b.n	8c480 <_malloc_r+0x3e4>
   8c560:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8c564:	d832      	bhi.n	8c5cc <_malloc_r+0x530>
   8c566:	0bd3      	lsrs	r3, r2, #15
   8c568:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8c56c:	00c9      	lsls	r1, r1, #3
   8c56e:	3377      	adds	r3, #119	; 0x77
   8c570:	e717      	b.n	8c3a2 <_malloc_r+0x306>
   8c572:	f240 5254 	movw	r2, #1364	; 0x554
   8c576:	4293      	cmp	r3, r2
   8c578:	d832      	bhi.n	8c5e0 <_malloc_r+0x544>
   8c57a:	0cab      	lsrs	r3, r5, #18
   8c57c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8c580:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8c584:	00c1      	lsls	r1, r0, #3
   8c586:	e5cf      	b.n	8c128 <_malloc_r+0x8c>
   8c588:	f1aa 0a08 	sub.w	sl, sl, #8
   8c58c:	44d3      	add	fp, sl
   8c58e:	f04f 0900 	mov.w	r9, #0
   8c592:	ebab 0b02 	sub.w	fp, fp, r2
   8c596:	e6b7      	b.n	8c308 <_malloc_r+0x26c>
   8c598:	200023e4 	.word	0x200023e4
   8c59c:	200023b4 	.word	0x200023b4
   8c5a0:	200023dc 	.word	0x200023dc
   8c5a4:	200023e0 	.word	0x200023e0
   8c5a8:	20000cb0 	.word	0x20000cb0
   8c5ac:	20000cb8 	.word	0x20000cb8
   8c5b0:	200010b8 	.word	0x200010b8
   8c5b4:	f104 0108 	add.w	r1, r4, #8
   8c5b8:	4630      	mov	r0, r6
   8c5ba:	9300      	str	r3, [sp, #0]
   8c5bc:	f7ff fa3c 	bl	8ba38 <_free_r>
   8c5c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c5c4:	9b00      	ldr	r3, [sp, #0]
   8c5c6:	6860      	ldr	r0, [r4, #4]
   8c5c8:	6819      	ldr	r1, [r3, #0]
   8c5ca:	e6be      	b.n	8c34a <_malloc_r+0x2ae>
   8c5cc:	f240 5154 	movw	r1, #1364	; 0x554
   8c5d0:	428b      	cmp	r3, r1
   8c5d2:	d80a      	bhi.n	8c5ea <_malloc_r+0x54e>
   8c5d4:	0c93      	lsrs	r3, r2, #18
   8c5d6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8c5da:	00c9      	lsls	r1, r1, #3
   8c5dc:	337c      	adds	r3, #124	; 0x7c
   8c5de:	e6e0      	b.n	8c3a2 <_malloc_r+0x306>
   8c5e0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c5e4:	207f      	movs	r0, #127	; 0x7f
   8c5e6:	277e      	movs	r7, #126	; 0x7e
   8c5e8:	e59e      	b.n	8c128 <_malloc_r+0x8c>
   8c5ea:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c5ee:	237e      	movs	r3, #126	; 0x7e
   8c5f0:	e6d7      	b.n	8c3a2 <_malloc_r+0x306>
   8c5f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c5f6:	e75e      	b.n	8c4b6 <_malloc_r+0x41a>

0008c5f8 <__ascii_mbtowc>:
   8c5f8:	b082      	sub	sp, #8
   8c5fa:	b149      	cbz	r1, 8c610 <__ascii_mbtowc+0x18>
   8c5fc:	b15a      	cbz	r2, 8c616 <__ascii_mbtowc+0x1e>
   8c5fe:	b16b      	cbz	r3, 8c61c <__ascii_mbtowc+0x24>
   8c600:	7813      	ldrb	r3, [r2, #0]
   8c602:	600b      	str	r3, [r1, #0]
   8c604:	7812      	ldrb	r2, [r2, #0]
   8c606:	1e10      	subs	r0, r2, #0
   8c608:	bf18      	it	ne
   8c60a:	2001      	movne	r0, #1
   8c60c:	b002      	add	sp, #8
   8c60e:	4770      	bx	lr
   8c610:	a901      	add	r1, sp, #4
   8c612:	2a00      	cmp	r2, #0
   8c614:	d1f3      	bne.n	8c5fe <__ascii_mbtowc+0x6>
   8c616:	4610      	mov	r0, r2
   8c618:	b002      	add	sp, #8
   8c61a:	4770      	bx	lr
   8c61c:	f06f 0001 	mvn.w	r0, #1
   8c620:	e7f4      	b.n	8c60c <__ascii_mbtowc+0x14>
   8c622:	bf00      	nop

0008c624 <memchr>:
   8c624:	b470      	push	{r4, r5, r6}
   8c626:	0784      	lsls	r4, r0, #30
   8c628:	b2cd      	uxtb	r5, r1
   8c62a:	d012      	beq.n	8c652 <memchr+0x2e>
   8c62c:	4603      	mov	r3, r0
   8c62e:	1e54      	subs	r4, r2, #1
   8c630:	b92a      	cbnz	r2, 8c63e <memchr+0x1a>
   8c632:	e00b      	b.n	8c64c <memchr+0x28>
   8c634:	079a      	lsls	r2, r3, #30
   8c636:	4618      	mov	r0, r3
   8c638:	d00c      	beq.n	8c654 <memchr+0x30>
   8c63a:	3c01      	subs	r4, #1
   8c63c:	d306      	bcc.n	8c64c <memchr+0x28>
   8c63e:	4618      	mov	r0, r3
   8c640:	f813 2b01 	ldrb.w	r2, [r3], #1
   8c644:	42aa      	cmp	r2, r5
   8c646:	d1f5      	bne.n	8c634 <memchr+0x10>
   8c648:	bc70      	pop	{r4, r5, r6}
   8c64a:	4770      	bx	lr
   8c64c:	2000      	movs	r0, #0
   8c64e:	bc70      	pop	{r4, r5, r6}
   8c650:	4770      	bx	lr
   8c652:	4614      	mov	r4, r2
   8c654:	2c03      	cmp	r4, #3
   8c656:	d80d      	bhi.n	8c674 <memchr+0x50>
   8c658:	2c00      	cmp	r4, #0
   8c65a:	d0f7      	beq.n	8c64c <memchr+0x28>
   8c65c:	4602      	mov	r2, r0
   8c65e:	1903      	adds	r3, r0, r4
   8c660:	e001      	b.n	8c666 <memchr+0x42>
   8c662:	429a      	cmp	r2, r3
   8c664:	d0f2      	beq.n	8c64c <memchr+0x28>
   8c666:	4610      	mov	r0, r2
   8c668:	f812 1b01 	ldrb.w	r1, [r2], #1
   8c66c:	42a9      	cmp	r1, r5
   8c66e:	d1f8      	bne.n	8c662 <memchr+0x3e>
   8c670:	bc70      	pop	{r4, r5, r6}
   8c672:	4770      	bx	lr
   8c674:	4606      	mov	r6, r0
   8c676:	020a      	lsls	r2, r1, #8
   8c678:	b292      	uxth	r2, r2
   8c67a:	432a      	orrs	r2, r5
   8c67c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8c680:	6833      	ldr	r3, [r6, #0]
   8c682:	4630      	mov	r0, r6
   8c684:	4053      	eors	r3, r2
   8c686:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8c68a:	ea21 0303 	bic.w	r3, r1, r3
   8c68e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8c692:	f106 0604 	add.w	r6, r6, #4
   8c696:	d1e1      	bne.n	8c65c <memchr+0x38>
   8c698:	3c04      	subs	r4, #4
   8c69a:	2c03      	cmp	r4, #3
   8c69c:	4630      	mov	r0, r6
   8c69e:	d8ef      	bhi.n	8c680 <memchr+0x5c>
   8c6a0:	e7da      	b.n	8c658 <memchr+0x34>
   8c6a2:	bf00      	nop

0008c6a4 <memmove>:
   8c6a4:	4288      	cmp	r0, r1
   8c6a6:	b4f0      	push	{r4, r5, r6, r7}
   8c6a8:	d90d      	bls.n	8c6c6 <memmove+0x22>
   8c6aa:	188b      	adds	r3, r1, r2
   8c6ac:	4283      	cmp	r3, r0
   8c6ae:	d90a      	bls.n	8c6c6 <memmove+0x22>
   8c6b0:	1884      	adds	r4, r0, r2
   8c6b2:	b132      	cbz	r2, 8c6c2 <memmove+0x1e>
   8c6b4:	4622      	mov	r2, r4
   8c6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8c6ba:	4299      	cmp	r1, r3
   8c6bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8c6c0:	d1f9      	bne.n	8c6b6 <memmove+0x12>
   8c6c2:	bcf0      	pop	{r4, r5, r6, r7}
   8c6c4:	4770      	bx	lr
   8c6c6:	2a0f      	cmp	r2, #15
   8c6c8:	d80e      	bhi.n	8c6e8 <memmove+0x44>
   8c6ca:	4603      	mov	r3, r0
   8c6cc:	1e54      	subs	r4, r2, #1
   8c6ce:	2a00      	cmp	r2, #0
   8c6d0:	d0f7      	beq.n	8c6c2 <memmove+0x1e>
   8c6d2:	3401      	adds	r4, #1
   8c6d4:	440c      	add	r4, r1
   8c6d6:	3b01      	subs	r3, #1
   8c6d8:	f811 2b01 	ldrb.w	r2, [r1], #1
   8c6dc:	42a1      	cmp	r1, r4
   8c6de:	f803 2f01 	strb.w	r2, [r3, #1]!
   8c6e2:	d1f9      	bne.n	8c6d8 <memmove+0x34>
   8c6e4:	bcf0      	pop	{r4, r5, r6, r7}
   8c6e6:	4770      	bx	lr
   8c6e8:	ea40 0301 	orr.w	r3, r0, r1
   8c6ec:	079b      	lsls	r3, r3, #30
   8c6ee:	d13e      	bne.n	8c76e <memmove+0xca>
   8c6f0:	f1a2 0310 	sub.w	r3, r2, #16
   8c6f4:	f023 040f 	bic.w	r4, r3, #15
   8c6f8:	f101 0720 	add.w	r7, r1, #32
   8c6fc:	4427      	add	r7, r4
   8c6fe:	091b      	lsrs	r3, r3, #4
   8c700:	f101 0410 	add.w	r4, r1, #16
   8c704:	f100 0510 	add.w	r5, r0, #16
   8c708:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8c70c:	3410      	adds	r4, #16
   8c70e:	f845 6c10 	str.w	r6, [r5, #-16]
   8c712:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8c716:	3510      	adds	r5, #16
   8c718:	f845 6c1c 	str.w	r6, [r5, #-28]
   8c71c:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8c720:	f845 6c18 	str.w	r6, [r5, #-24]
   8c724:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8c728:	42bc      	cmp	r4, r7
   8c72a:	f845 6c14 	str.w	r6, [r5, #-20]
   8c72e:	d1eb      	bne.n	8c708 <memmove+0x64>
   8c730:	3301      	adds	r3, #1
   8c732:	f012 0f0c 	tst.w	r2, #12
   8c736:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8c73a:	f002 040f 	and.w	r4, r2, #15
   8c73e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8c742:	d017      	beq.n	8c774 <memmove+0xd0>
   8c744:	460e      	mov	r6, r1
   8c746:	3c04      	subs	r4, #4
   8c748:	f024 0c03 	bic.w	ip, r4, #3
   8c74c:	08a5      	lsrs	r5, r4, #2
   8c74e:	449c      	add	ip, r3
   8c750:	1f1c      	subs	r4, r3, #4
   8c752:	f856 7b04 	ldr.w	r7, [r6], #4
   8c756:	f844 7f04 	str.w	r7, [r4, #4]!
   8c75a:	4564      	cmp	r4, ip
   8c75c:	d1f9      	bne.n	8c752 <memmove+0xae>
   8c75e:	1c6c      	adds	r4, r5, #1
   8c760:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8c764:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8c768:	f002 0203 	and.w	r2, r2, #3
   8c76c:	e7ae      	b.n	8c6cc <memmove+0x28>
   8c76e:	4603      	mov	r3, r0
   8c770:	1e54      	subs	r4, r2, #1
   8c772:	e7ae      	b.n	8c6d2 <memmove+0x2e>
   8c774:	4622      	mov	r2, r4
   8c776:	e7a9      	b.n	8c6cc <memmove+0x28>

0008c778 <__malloc_lock>:
   8c778:	4801      	ldr	r0, [pc, #4]	; (8c780 <__malloc_lock+0x8>)
   8c77a:	f7ff bc0b 	b.w	8bf94 <__retarget_lock_acquire_recursive>
   8c77e:	bf00      	nop
   8c780:	20002e14 	.word	0x20002e14

0008c784 <__malloc_unlock>:
   8c784:	4801      	ldr	r0, [pc, #4]	; (8c78c <__malloc_unlock+0x8>)
   8c786:	f7ff bc07 	b.w	8bf98 <__retarget_lock_release_recursive>
   8c78a:	bf00      	nop
   8c78c:	20002e14 	.word	0x20002e14

0008c790 <_Balloc>:
   8c790:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c792:	b570      	push	{r4, r5, r6, lr}
   8c794:	4605      	mov	r5, r0
   8c796:	460c      	mov	r4, r1
   8c798:	b14b      	cbz	r3, 8c7ae <_Balloc+0x1e>
   8c79a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8c79e:	b180      	cbz	r0, 8c7c2 <_Balloc+0x32>
   8c7a0:	6802      	ldr	r2, [r0, #0]
   8c7a2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8c7a6:	2300      	movs	r3, #0
   8c7a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8c7ac:	bd70      	pop	{r4, r5, r6, pc}
   8c7ae:	2221      	movs	r2, #33	; 0x21
   8c7b0:	2104      	movs	r1, #4
   8c7b2:	f000 ffc5 	bl	8d740 <_calloc_r>
   8c7b6:	4603      	mov	r3, r0
   8c7b8:	64e8      	str	r0, [r5, #76]	; 0x4c
   8c7ba:	2800      	cmp	r0, #0
   8c7bc:	d1ed      	bne.n	8c79a <_Balloc+0xa>
   8c7be:	2000      	movs	r0, #0
   8c7c0:	bd70      	pop	{r4, r5, r6, pc}
   8c7c2:	2101      	movs	r1, #1
   8c7c4:	fa01 f604 	lsl.w	r6, r1, r4
   8c7c8:	1d72      	adds	r2, r6, #5
   8c7ca:	4628      	mov	r0, r5
   8c7cc:	0092      	lsls	r2, r2, #2
   8c7ce:	f000 ffb7 	bl	8d740 <_calloc_r>
   8c7d2:	2800      	cmp	r0, #0
   8c7d4:	d0f3      	beq.n	8c7be <_Balloc+0x2e>
   8c7d6:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8c7da:	e7e4      	b.n	8c7a6 <_Balloc+0x16>

0008c7dc <_Bfree>:
   8c7dc:	b131      	cbz	r1, 8c7ec <_Bfree+0x10>
   8c7de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c7e0:	684a      	ldr	r2, [r1, #4]
   8c7e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8c7e6:	6008      	str	r0, [r1, #0]
   8c7e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8c7ec:	4770      	bx	lr
   8c7ee:	bf00      	nop

0008c7f0 <__multadd>:
   8c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c7f4:	4680      	mov	r8, r0
   8c7f6:	461c      	mov	r4, r3
   8c7f8:	2000      	movs	r0, #0
   8c7fa:	460f      	mov	r7, r1
   8c7fc:	690e      	ldr	r6, [r1, #16]
   8c7fe:	3114      	adds	r1, #20
   8c800:	680d      	ldr	r5, [r1, #0]
   8c802:	3001      	adds	r0, #1
   8c804:	b2ab      	uxth	r3, r5
   8c806:	fb02 4303 	mla	r3, r2, r3, r4
   8c80a:	0c2c      	lsrs	r4, r5, #16
   8c80c:	0c1d      	lsrs	r5, r3, #16
   8c80e:	fb02 5404 	mla	r4, r2, r4, r5
   8c812:	b29b      	uxth	r3, r3
   8c814:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8c818:	4286      	cmp	r6, r0
   8c81a:	f841 3b04 	str.w	r3, [r1], #4
   8c81e:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8c822:	dced      	bgt.n	8c800 <__multadd+0x10>
   8c824:	b13c      	cbz	r4, 8c836 <__multadd+0x46>
   8c826:	68bb      	ldr	r3, [r7, #8]
   8c828:	42b3      	cmp	r3, r6
   8c82a:	dd07      	ble.n	8c83c <__multadd+0x4c>
   8c82c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8c830:	3601      	adds	r6, #1
   8c832:	615c      	str	r4, [r3, #20]
   8c834:	613e      	str	r6, [r7, #16]
   8c836:	4638      	mov	r0, r7
   8c838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c83c:	6879      	ldr	r1, [r7, #4]
   8c83e:	4640      	mov	r0, r8
   8c840:	3101      	adds	r1, #1
   8c842:	f7ff ffa5 	bl	8c790 <_Balloc>
   8c846:	4605      	mov	r5, r0
   8c848:	b1b0      	cbz	r0, 8c878 <__multadd+0x88>
   8c84a:	693a      	ldr	r2, [r7, #16]
   8c84c:	f107 010c 	add.w	r1, r7, #12
   8c850:	3202      	adds	r2, #2
   8c852:	0092      	lsls	r2, r2, #2
   8c854:	300c      	adds	r0, #12
   8c856:	f7fa ffed 	bl	87834 <memcpy>
   8c85a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8c85e:	687a      	ldr	r2, [r7, #4]
   8c860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c864:	6039      	str	r1, [r7, #0]
   8c866:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8c86a:	462f      	mov	r7, r5
   8c86c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8c870:	3601      	adds	r6, #1
   8c872:	615c      	str	r4, [r3, #20]
   8c874:	613e      	str	r6, [r7, #16]
   8c876:	e7de      	b.n	8c836 <__multadd+0x46>
   8c878:	4602      	mov	r2, r0
   8c87a:	21b5      	movs	r1, #181	; 0xb5
   8c87c:	4b01      	ldr	r3, [pc, #4]	; (8c884 <__multadd+0x94>)
   8c87e:	4802      	ldr	r0, [pc, #8]	; (8c888 <__multadd+0x98>)
   8c880:	f000 ff40 	bl	8d704 <__assert_func>
   8c884:	0008e654 	.word	0x0008e654
   8c888:	0008e6f4 	.word	0x0008e6f4

0008c88c <__hi0bits>:
   8c88c:	0c02      	lsrs	r2, r0, #16
   8c88e:	0412      	lsls	r2, r2, #16
   8c890:	4603      	mov	r3, r0
   8c892:	b9ca      	cbnz	r2, 8c8c8 <__hi0bits+0x3c>
   8c894:	0403      	lsls	r3, r0, #16
   8c896:	2010      	movs	r0, #16
   8c898:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8c89c:	bf04      	itt	eq
   8c89e:	021b      	lsleq	r3, r3, #8
   8c8a0:	3008      	addeq	r0, #8
   8c8a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8c8a6:	bf04      	itt	eq
   8c8a8:	011b      	lsleq	r3, r3, #4
   8c8aa:	3004      	addeq	r0, #4
   8c8ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8c8b0:	bf04      	itt	eq
   8c8b2:	009b      	lsleq	r3, r3, #2
   8c8b4:	3002      	addeq	r0, #2
   8c8b6:	2b00      	cmp	r3, #0
   8c8b8:	db05      	blt.n	8c8c6 <__hi0bits+0x3a>
   8c8ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8c8be:	f100 0001 	add.w	r0, r0, #1
   8c8c2:	bf08      	it	eq
   8c8c4:	2020      	moveq	r0, #32
   8c8c6:	4770      	bx	lr
   8c8c8:	2000      	movs	r0, #0
   8c8ca:	e7e5      	b.n	8c898 <__hi0bits+0xc>

0008c8cc <__lo0bits>:
   8c8cc:	6803      	ldr	r3, [r0, #0]
   8c8ce:	4601      	mov	r1, r0
   8c8d0:	f013 0207 	ands.w	r2, r3, #7
   8c8d4:	d007      	beq.n	8c8e6 <__lo0bits+0x1a>
   8c8d6:	07da      	lsls	r2, r3, #31
   8c8d8:	d420      	bmi.n	8c91c <__lo0bits+0x50>
   8c8da:	0798      	lsls	r0, r3, #30
   8c8dc:	d522      	bpl.n	8c924 <__lo0bits+0x58>
   8c8de:	085b      	lsrs	r3, r3, #1
   8c8e0:	2001      	movs	r0, #1
   8c8e2:	600b      	str	r3, [r1, #0]
   8c8e4:	4770      	bx	lr
   8c8e6:	b298      	uxth	r0, r3
   8c8e8:	b1a8      	cbz	r0, 8c916 <__lo0bits+0x4a>
   8c8ea:	4610      	mov	r0, r2
   8c8ec:	f013 0fff 	tst.w	r3, #255	; 0xff
   8c8f0:	bf04      	itt	eq
   8c8f2:	0a1b      	lsreq	r3, r3, #8
   8c8f4:	3008      	addeq	r0, #8
   8c8f6:	071a      	lsls	r2, r3, #28
   8c8f8:	bf04      	itt	eq
   8c8fa:	091b      	lsreq	r3, r3, #4
   8c8fc:	3004      	addeq	r0, #4
   8c8fe:	079a      	lsls	r2, r3, #30
   8c900:	bf04      	itt	eq
   8c902:	089b      	lsreq	r3, r3, #2
   8c904:	3002      	addeq	r0, #2
   8c906:	07da      	lsls	r2, r3, #31
   8c908:	d403      	bmi.n	8c912 <__lo0bits+0x46>
   8c90a:	085b      	lsrs	r3, r3, #1
   8c90c:	f100 0001 	add.w	r0, r0, #1
   8c910:	d006      	beq.n	8c920 <__lo0bits+0x54>
   8c912:	600b      	str	r3, [r1, #0]
   8c914:	4770      	bx	lr
   8c916:	2010      	movs	r0, #16
   8c918:	0c1b      	lsrs	r3, r3, #16
   8c91a:	e7e7      	b.n	8c8ec <__lo0bits+0x20>
   8c91c:	2000      	movs	r0, #0
   8c91e:	4770      	bx	lr
   8c920:	2020      	movs	r0, #32
   8c922:	4770      	bx	lr
   8c924:	089b      	lsrs	r3, r3, #2
   8c926:	2002      	movs	r0, #2
   8c928:	600b      	str	r3, [r1, #0]
   8c92a:	4770      	bx	lr

0008c92c <__i2b>:
   8c92c:	b510      	push	{r4, lr}
   8c92e:	460c      	mov	r4, r1
   8c930:	2101      	movs	r1, #1
   8c932:	f7ff ff2d 	bl	8c790 <_Balloc>
   8c936:	4602      	mov	r2, r0
   8c938:	b118      	cbz	r0, 8c942 <__i2b+0x16>
   8c93a:	2301      	movs	r3, #1
   8c93c:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8c940:	bd10      	pop	{r4, pc}
   8c942:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8c946:	4b02      	ldr	r3, [pc, #8]	; (8c950 <__i2b+0x24>)
   8c948:	4802      	ldr	r0, [pc, #8]	; (8c954 <__i2b+0x28>)
   8c94a:	f000 fedb 	bl	8d704 <__assert_func>
   8c94e:	bf00      	nop
   8c950:	0008e654 	.word	0x0008e654
   8c954:	0008e6f4 	.word	0x0008e6f4

0008c958 <__multiply>:
   8c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c95c:	690d      	ldr	r5, [r1, #16]
   8c95e:	6917      	ldr	r7, [r2, #16]
   8c960:	460e      	mov	r6, r1
   8c962:	42bd      	cmp	r5, r7
   8c964:	4614      	mov	r4, r2
   8c966:	b085      	sub	sp, #20
   8c968:	db05      	blt.n	8c976 <__multiply+0x1e>
   8c96a:	463a      	mov	r2, r7
   8c96c:	4623      	mov	r3, r4
   8c96e:	462f      	mov	r7, r5
   8c970:	460c      	mov	r4, r1
   8c972:	4615      	mov	r5, r2
   8c974:	461e      	mov	r6, r3
   8c976:	68a3      	ldr	r3, [r4, #8]
   8c978:	6861      	ldr	r1, [r4, #4]
   8c97a:	eb07 0805 	add.w	r8, r7, r5
   8c97e:	4543      	cmp	r3, r8
   8c980:	bfb8      	it	lt
   8c982:	3101      	addlt	r1, #1
   8c984:	f7ff ff04 	bl	8c790 <_Balloc>
   8c988:	9001      	str	r0, [sp, #4]
   8c98a:	2800      	cmp	r0, #0
   8c98c:	f000 8088 	beq.w	8caa0 <__multiply+0x148>
   8c990:	9b01      	ldr	r3, [sp, #4]
   8c992:	f103 0914 	add.w	r9, r3, #20
   8c996:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8c99a:	45d1      	cmp	r9, sl
   8c99c:	d205      	bcs.n	8c9aa <__multiply+0x52>
   8c99e:	464b      	mov	r3, r9
   8c9a0:	2200      	movs	r2, #0
   8c9a2:	f843 2b04 	str.w	r2, [r3], #4
   8c9a6:	459a      	cmp	sl, r3
   8c9a8:	d8fb      	bhi.n	8c9a2 <__multiply+0x4a>
   8c9aa:	f106 0e14 	add.w	lr, r6, #20
   8c9ae:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8c9b2:	f104 0314 	add.w	r3, r4, #20
   8c9b6:	45de      	cmp	lr, fp
   8c9b8:	461a      	mov	r2, r3
   8c9ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8c9be:	d23e      	bcs.n	8ca3e <__multiply+0xe6>
   8c9c0:	1b3b      	subs	r3, r7, r4
   8c9c2:	3b15      	subs	r3, #21
   8c9c4:	f023 0303 	bic.w	r3, r3, #3
   8c9c8:	3304      	adds	r3, #4
   8c9ca:	3415      	adds	r4, #21
   8c9cc:	42a7      	cmp	r7, r4
   8c9ce:	bf38      	it	cc
   8c9d0:	2304      	movcc	r3, #4
   8c9d2:	e9cd a802 	strd	sl, r8, [sp, #8]
   8c9d6:	4698      	mov	r8, r3
   8c9d8:	4692      	mov	sl, r2
   8c9da:	e003      	b.n	8c9e4 <__multiply+0x8c>
   8c9dc:	45f3      	cmp	fp, lr
   8c9de:	f109 0904 	add.w	r9, r9, #4
   8c9e2:	d92a      	bls.n	8ca3a <__multiply+0xe2>
   8c9e4:	f85e 0b04 	ldr.w	r0, [lr], #4
   8c9e8:	b286      	uxth	r6, r0
   8c9ea:	2e00      	cmp	r6, #0
   8c9ec:	d138      	bne.n	8ca60 <__multiply+0x108>
   8c9ee:	0c00      	lsrs	r0, r0, #16
   8c9f0:	d0f4      	beq.n	8c9dc <__multiply+0x84>
   8c9f2:	f8d9 3000 	ldr.w	r3, [r9]
   8c9f6:	4654      	mov	r4, sl
   8c9f8:	461e      	mov	r6, r3
   8c9fa:	464d      	mov	r5, r9
   8c9fc:	f04f 0c00 	mov.w	ip, #0
   8ca00:	8822      	ldrh	r2, [r4, #0]
   8ca02:	0c36      	lsrs	r6, r6, #16
   8ca04:	fb00 6602 	mla	r6, r0, r2, r6
   8ca08:	b29b      	uxth	r3, r3
   8ca0a:	44b4      	add	ip, r6
   8ca0c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8ca10:	f845 3b04 	str.w	r3, [r5], #4
   8ca14:	f854 3b04 	ldr.w	r3, [r4], #4
   8ca18:	682e      	ldr	r6, [r5, #0]
   8ca1a:	0c1b      	lsrs	r3, r3, #16
   8ca1c:	b2b2      	uxth	r2, r6
   8ca1e:	fb00 2303 	mla	r3, r0, r3, r2
   8ca22:	42a7      	cmp	r7, r4
   8ca24:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8ca28:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8ca2c:	d8e8      	bhi.n	8ca00 <__multiply+0xa8>
   8ca2e:	45f3      	cmp	fp, lr
   8ca30:	f849 3008 	str.w	r3, [r9, r8]
   8ca34:	f109 0904 	add.w	r9, r9, #4
   8ca38:	d8d4      	bhi.n	8c9e4 <__multiply+0x8c>
   8ca3a:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8ca3e:	f1b8 0f00 	cmp.w	r8, #0
   8ca42:	dc03      	bgt.n	8ca4c <__multiply+0xf4>
   8ca44:	e006      	b.n	8ca54 <__multiply+0xfc>
   8ca46:	f1b8 0801 	subs.w	r8, r8, #1
   8ca4a:	d003      	beq.n	8ca54 <__multiply+0xfc>
   8ca4c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8ca50:	2b00      	cmp	r3, #0
   8ca52:	d0f8      	beq.n	8ca46 <__multiply+0xee>
   8ca54:	9801      	ldr	r0, [sp, #4]
   8ca56:	f8c0 8010 	str.w	r8, [r0, #16]
   8ca5a:	b005      	add	sp, #20
   8ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ca60:	4655      	mov	r5, sl
   8ca62:	464c      	mov	r4, r9
   8ca64:	2300      	movs	r3, #0
   8ca66:	f855 1b04 	ldr.w	r1, [r5], #4
   8ca6a:	6820      	ldr	r0, [r4, #0]
   8ca6c:	b28a      	uxth	r2, r1
   8ca6e:	fa1f fc80 	uxth.w	ip, r0
   8ca72:	fb06 c202 	mla	r2, r6, r2, ip
   8ca76:	0c09      	lsrs	r1, r1, #16
   8ca78:	0c00      	lsrs	r0, r0, #16
   8ca7a:	fb06 0101 	mla	r1, r6, r1, r0
   8ca7e:	4413      	add	r3, r2
   8ca80:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8ca84:	b29b      	uxth	r3, r3
   8ca86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8ca8a:	42af      	cmp	r7, r5
   8ca8c:	f844 3b04 	str.w	r3, [r4], #4
   8ca90:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8ca94:	d8e7      	bhi.n	8ca66 <__multiply+0x10e>
   8ca96:	f849 3008 	str.w	r3, [r9, r8]
   8ca9a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8ca9e:	e7a6      	b.n	8c9ee <__multiply+0x96>
   8caa0:	4602      	mov	r2, r0
   8caa2:	f240 115d 	movw	r1, #349	; 0x15d
   8caa6:	4b02      	ldr	r3, [pc, #8]	; (8cab0 <__multiply+0x158>)
   8caa8:	4802      	ldr	r0, [pc, #8]	; (8cab4 <__multiply+0x15c>)
   8caaa:	f000 fe2b 	bl	8d704 <__assert_func>
   8caae:	bf00      	nop
   8cab0:	0008e654 	.word	0x0008e654
   8cab4:	0008e6f4 	.word	0x0008e6f4

0008cab8 <__pow5mult>:
   8cab8:	f012 0303 	ands.w	r3, r2, #3
   8cabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cac0:	4614      	mov	r4, r2
   8cac2:	4607      	mov	r7, r0
   8cac4:	d12e      	bne.n	8cb24 <__pow5mult+0x6c>
   8cac6:	460e      	mov	r6, r1
   8cac8:	10a4      	asrs	r4, r4, #2
   8caca:	d01c      	beq.n	8cb06 <__pow5mult+0x4e>
   8cacc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8cace:	b395      	cbz	r5, 8cb36 <__pow5mult+0x7e>
   8cad0:	07e3      	lsls	r3, r4, #31
   8cad2:	f04f 0800 	mov.w	r8, #0
   8cad6:	d406      	bmi.n	8cae6 <__pow5mult+0x2e>
   8cad8:	1064      	asrs	r4, r4, #1
   8cada:	d014      	beq.n	8cb06 <__pow5mult+0x4e>
   8cadc:	6828      	ldr	r0, [r5, #0]
   8cade:	b1a8      	cbz	r0, 8cb0c <__pow5mult+0x54>
   8cae0:	4605      	mov	r5, r0
   8cae2:	07e3      	lsls	r3, r4, #31
   8cae4:	d5f8      	bpl.n	8cad8 <__pow5mult+0x20>
   8cae6:	462a      	mov	r2, r5
   8cae8:	4631      	mov	r1, r6
   8caea:	4638      	mov	r0, r7
   8caec:	f7ff ff34 	bl	8c958 <__multiply>
   8caf0:	b1b6      	cbz	r6, 8cb20 <__pow5mult+0x68>
   8caf2:	6871      	ldr	r1, [r6, #4]
   8caf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8caf6:	1064      	asrs	r4, r4, #1
   8caf8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8cafc:	6032      	str	r2, [r6, #0]
   8cafe:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8cb02:	4606      	mov	r6, r0
   8cb04:	d1ea      	bne.n	8cadc <__pow5mult+0x24>
   8cb06:	4630      	mov	r0, r6
   8cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cb0c:	462a      	mov	r2, r5
   8cb0e:	4629      	mov	r1, r5
   8cb10:	4638      	mov	r0, r7
   8cb12:	f7ff ff21 	bl	8c958 <__multiply>
   8cb16:	6028      	str	r0, [r5, #0]
   8cb18:	4605      	mov	r5, r0
   8cb1a:	f8c0 8000 	str.w	r8, [r0]
   8cb1e:	e7e0      	b.n	8cae2 <__pow5mult+0x2a>
   8cb20:	4606      	mov	r6, r0
   8cb22:	e7d9      	b.n	8cad8 <__pow5mult+0x20>
   8cb24:	4a09      	ldr	r2, [pc, #36]	; (8cb4c <__pow5mult+0x94>)
   8cb26:	3b01      	subs	r3, #1
   8cb28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8cb2c:	2300      	movs	r3, #0
   8cb2e:	f7ff fe5f 	bl	8c7f0 <__multadd>
   8cb32:	4606      	mov	r6, r0
   8cb34:	e7c8      	b.n	8cac8 <__pow5mult+0x10>
   8cb36:	f240 2171 	movw	r1, #625	; 0x271
   8cb3a:	4638      	mov	r0, r7
   8cb3c:	f7ff fef6 	bl	8c92c <__i2b>
   8cb40:	2300      	movs	r3, #0
   8cb42:	64b8      	str	r0, [r7, #72]	; 0x48
   8cb44:	4605      	mov	r5, r0
   8cb46:	6003      	str	r3, [r0, #0]
   8cb48:	e7c2      	b.n	8cad0 <__pow5mult+0x18>
   8cb4a:	bf00      	nop
   8cb4c:	0008e868 	.word	0x0008e868

0008cb50 <__lshift>:
   8cb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8cb54:	690f      	ldr	r7, [r1, #16]
   8cb56:	688b      	ldr	r3, [r1, #8]
   8cb58:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8cb5c:	1c7e      	adds	r6, r7, #1
   8cb5e:	429e      	cmp	r6, r3
   8cb60:	460d      	mov	r5, r1
   8cb62:	4691      	mov	r9, r2
   8cb64:	4680      	mov	r8, r0
   8cb66:	6849      	ldr	r1, [r1, #4]
   8cb68:	ea4f 1462 	mov.w	r4, r2, asr #5
   8cb6c:	dd04      	ble.n	8cb78 <__lshift+0x28>
   8cb6e:	005b      	lsls	r3, r3, #1
   8cb70:	429e      	cmp	r6, r3
   8cb72:	f101 0101 	add.w	r1, r1, #1
   8cb76:	dcfa      	bgt.n	8cb6e <__lshift+0x1e>
   8cb78:	4640      	mov	r0, r8
   8cb7a:	f7ff fe09 	bl	8c790 <_Balloc>
   8cb7e:	2800      	cmp	r0, #0
   8cb80:	d04f      	beq.n	8cc22 <__lshift+0xd2>
   8cb82:	2c00      	cmp	r4, #0
   8cb84:	f100 0114 	add.w	r1, r0, #20
   8cb88:	dd0d      	ble.n	8cba6 <__lshift+0x56>
   8cb8a:	460b      	mov	r3, r1
   8cb8c:	2200      	movs	r2, #0
   8cb8e:	3405      	adds	r4, #5
   8cb90:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8cb94:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8cb98:	f843 2b04 	str.w	r2, [r3], #4
   8cb9c:	42a3      	cmp	r3, r4
   8cb9e:	d1fb      	bne.n	8cb98 <__lshift+0x48>
   8cba0:	f1ac 0314 	sub.w	r3, ip, #20
   8cba4:	4419      	add	r1, r3
   8cba6:	692c      	ldr	r4, [r5, #16]
   8cba8:	f105 0314 	add.w	r3, r5, #20
   8cbac:	f019 091f 	ands.w	r9, r9, #31
   8cbb0:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8cbb4:	d02d      	beq.n	8cc12 <__lshift+0xc2>
   8cbb6:	468e      	mov	lr, r1
   8cbb8:	f04f 0a00 	mov.w	sl, #0
   8cbbc:	f1c9 0220 	rsb	r2, r9, #32
   8cbc0:	681c      	ldr	r4, [r3, #0]
   8cbc2:	fa04 f409 	lsl.w	r4, r4, r9
   8cbc6:	ea44 040a 	orr.w	r4, r4, sl
   8cbca:	f84e 4b04 	str.w	r4, [lr], #4
   8cbce:	f853 4b04 	ldr.w	r4, [r3], #4
   8cbd2:	459c      	cmp	ip, r3
   8cbd4:	fa24 fa02 	lsr.w	sl, r4, r2
   8cbd8:	d8f2      	bhi.n	8cbc0 <__lshift+0x70>
   8cbda:	ebac 0305 	sub.w	r3, ip, r5
   8cbde:	3b15      	subs	r3, #21
   8cbe0:	f023 0303 	bic.w	r3, r3, #3
   8cbe4:	3304      	adds	r3, #4
   8cbe6:	f105 0215 	add.w	r2, r5, #21
   8cbea:	4594      	cmp	ip, r2
   8cbec:	bf38      	it	cc
   8cbee:	2304      	movcc	r3, #4
   8cbf0:	f1ba 0f00 	cmp.w	sl, #0
   8cbf4:	bf18      	it	ne
   8cbf6:	4637      	movne	r7, r6
   8cbf8:	f841 a003 	str.w	sl, [r1, r3]
   8cbfc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8cc00:	686a      	ldr	r2, [r5, #4]
   8cc02:	6107      	str	r7, [r0, #16]
   8cc04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8cc08:	6029      	str	r1, [r5, #0]
   8cc0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8cc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cc12:	3904      	subs	r1, #4
   8cc14:	f853 2b04 	ldr.w	r2, [r3], #4
   8cc18:	459c      	cmp	ip, r3
   8cc1a:	f841 2f04 	str.w	r2, [r1, #4]!
   8cc1e:	d8f9      	bhi.n	8cc14 <__lshift+0xc4>
   8cc20:	e7ec      	b.n	8cbfc <__lshift+0xac>
   8cc22:	4602      	mov	r2, r0
   8cc24:	f240 11d9 	movw	r1, #473	; 0x1d9
   8cc28:	4b01      	ldr	r3, [pc, #4]	; (8cc30 <__lshift+0xe0>)
   8cc2a:	4802      	ldr	r0, [pc, #8]	; (8cc34 <__lshift+0xe4>)
   8cc2c:	f000 fd6a 	bl	8d704 <__assert_func>
   8cc30:	0008e654 	.word	0x0008e654
   8cc34:	0008e6f4 	.word	0x0008e6f4

0008cc38 <__mcmp>:
   8cc38:	b430      	push	{r4, r5}
   8cc3a:	690b      	ldr	r3, [r1, #16]
   8cc3c:	4605      	mov	r5, r0
   8cc3e:	6900      	ldr	r0, [r0, #16]
   8cc40:	1ac0      	subs	r0, r0, r3
   8cc42:	d111      	bne.n	8cc68 <__mcmp+0x30>
   8cc44:	3514      	adds	r5, #20
   8cc46:	3114      	adds	r1, #20
   8cc48:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8cc4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8cc50:	e001      	b.n	8cc56 <__mcmp+0x1e>
   8cc52:	429d      	cmp	r5, r3
   8cc54:	d208      	bcs.n	8cc68 <__mcmp+0x30>
   8cc56:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8cc5a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8cc5e:	428c      	cmp	r4, r1
   8cc60:	d0f7      	beq.n	8cc52 <__mcmp+0x1a>
   8cc62:	d203      	bcs.n	8cc6c <__mcmp+0x34>
   8cc64:	f04f 30ff 	mov.w	r0, #4294967295
   8cc68:	bc30      	pop	{r4, r5}
   8cc6a:	4770      	bx	lr
   8cc6c:	2001      	movs	r0, #1
   8cc6e:	bc30      	pop	{r4, r5}
   8cc70:	4770      	bx	lr
   8cc72:	bf00      	nop

0008cc74 <__mdiff>:
   8cc74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8cc78:	690b      	ldr	r3, [r1, #16]
   8cc7a:	460c      	mov	r4, r1
   8cc7c:	6911      	ldr	r1, [r2, #16]
   8cc7e:	4690      	mov	r8, r2
   8cc80:	eba3 0b01 	sub.w	fp, r3, r1
   8cc84:	f1bb 0f00 	cmp.w	fp, #0
   8cc88:	d17c      	bne.n	8cd84 <__mdiff+0x110>
   8cc8a:	f104 0614 	add.w	r6, r4, #20
   8cc8e:	3214      	adds	r2, #20
   8cc90:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8cc94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8cc98:	e001      	b.n	8cc9e <__mdiff+0x2a>
   8cc9a:	429e      	cmp	r6, r3
   8cc9c:	d276      	bcs.n	8cd8c <__mdiff+0x118>
   8cc9e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8cca2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8cca6:	428d      	cmp	r5, r1
   8cca8:	d0f7      	beq.n	8cc9a <__mdiff+0x26>
   8ccaa:	d365      	bcc.n	8cd78 <__mdiff+0x104>
   8ccac:	6861      	ldr	r1, [r4, #4]
   8ccae:	f7ff fd6f 	bl	8c790 <_Balloc>
   8ccb2:	2800      	cmp	r0, #0
   8ccb4:	d074      	beq.n	8cda0 <__mdiff+0x12c>
   8ccb6:	f100 0614 	add.w	r6, r0, #20
   8ccba:	46b4      	mov	ip, r6
   8ccbc:	2300      	movs	r3, #0
   8ccbe:	6927      	ldr	r7, [r4, #16]
   8ccc0:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8ccc4:	f104 0a14 	add.w	sl, r4, #20
   8ccc8:	f108 0514 	add.w	r5, r8, #20
   8cccc:	f8c0 b00c 	str.w	fp, [r0, #12]
   8ccd0:	3410      	adds	r4, #16
   8ccd2:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8ccd6:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8ccda:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8ccde:	f855 bb04 	ldr.w	fp, [r5], #4
   8cce2:	b291      	uxth	r1, r2
   8cce4:	440b      	add	r3, r1
   8cce6:	fa1f f18b 	uxth.w	r1, fp
   8ccea:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8ccee:	1a59      	subs	r1, r3, r1
   8ccf0:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8ccf4:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8ccf8:	b289      	uxth	r1, r1
   8ccfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8ccfe:	45a9      	cmp	r9, r5
   8cd00:	f84c 1b04 	str.w	r1, [ip], #4
   8cd04:	ea4f 4323 	mov.w	r3, r3, asr #16
   8cd08:	d8e7      	bhi.n	8ccda <__mdiff+0x66>
   8cd0a:	eba9 0208 	sub.w	r2, r9, r8
   8cd0e:	3a15      	subs	r2, #21
   8cd10:	f108 0815 	add.w	r8, r8, #21
   8cd14:	45c1      	cmp	r9, r8
   8cd16:	f022 0403 	bic.w	r4, r2, #3
   8cd1a:	f104 0404 	add.w	r4, r4, #4
   8cd1e:	bf38      	it	cc
   8cd20:	2404      	movcc	r4, #4
   8cd22:	f022 0203 	bic.w	r2, r2, #3
   8cd26:	bf38      	it	cc
   8cd28:	2200      	movcc	r2, #0
   8cd2a:	44a2      	add	sl, r4
   8cd2c:	45d6      	cmp	lr, sl
   8cd2e:	4434      	add	r4, r6
   8cd30:	4416      	add	r6, r2
   8cd32:	d918      	bls.n	8cd66 <__mdiff+0xf2>
   8cd34:	4625      	mov	r5, r4
   8cd36:	4652      	mov	r2, sl
   8cd38:	f852 6b04 	ldr.w	r6, [r2], #4
   8cd3c:	b2b1      	uxth	r1, r6
   8cd3e:	4419      	add	r1, r3
   8cd40:	140b      	asrs	r3, r1, #16
   8cd42:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8cd46:	b289      	uxth	r1, r1
   8cd48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8cd4c:	4596      	cmp	lr, r2
   8cd4e:	f845 1b04 	str.w	r1, [r5], #4
   8cd52:	ea4f 4323 	mov.w	r3, r3, asr #16
   8cd56:	d8ef      	bhi.n	8cd38 <__mdiff+0xc4>
   8cd58:	f10e 36ff 	add.w	r6, lr, #4294967295
   8cd5c:	eba6 060a 	sub.w	r6, r6, sl
   8cd60:	f026 0603 	bic.w	r6, r6, #3
   8cd64:	4426      	add	r6, r4
   8cd66:	b921      	cbnz	r1, 8cd72 <__mdiff+0xfe>
   8cd68:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8cd6c:	3f01      	subs	r7, #1
   8cd6e:	2b00      	cmp	r3, #0
   8cd70:	d0fa      	beq.n	8cd68 <__mdiff+0xf4>
   8cd72:	6107      	str	r7, [r0, #16]
   8cd74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cd78:	4623      	mov	r3, r4
   8cd7a:	f04f 0b01 	mov.w	fp, #1
   8cd7e:	4644      	mov	r4, r8
   8cd80:	4698      	mov	r8, r3
   8cd82:	e793      	b.n	8ccac <__mdiff+0x38>
   8cd84:	dbf8      	blt.n	8cd78 <__mdiff+0x104>
   8cd86:	f04f 0b00 	mov.w	fp, #0
   8cd8a:	e78f      	b.n	8ccac <__mdiff+0x38>
   8cd8c:	2100      	movs	r1, #0
   8cd8e:	f7ff fcff 	bl	8c790 <_Balloc>
   8cd92:	b160      	cbz	r0, 8cdae <__mdiff+0x13a>
   8cd94:	2201      	movs	r2, #1
   8cd96:	2300      	movs	r3, #0
   8cd98:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8cd9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cda0:	4602      	mov	r2, r0
   8cda2:	f44f 7110 	mov.w	r1, #576	; 0x240
   8cda6:	4b05      	ldr	r3, [pc, #20]	; (8cdbc <__mdiff+0x148>)
   8cda8:	4805      	ldr	r0, [pc, #20]	; (8cdc0 <__mdiff+0x14c>)
   8cdaa:	f000 fcab 	bl	8d704 <__assert_func>
   8cdae:	4602      	mov	r2, r0
   8cdb0:	f240 2132 	movw	r1, #562	; 0x232
   8cdb4:	4b01      	ldr	r3, [pc, #4]	; (8cdbc <__mdiff+0x148>)
   8cdb6:	4802      	ldr	r0, [pc, #8]	; (8cdc0 <__mdiff+0x14c>)
   8cdb8:	f000 fca4 	bl	8d704 <__assert_func>
   8cdbc:	0008e654 	.word	0x0008e654
   8cdc0:	0008e6f4 	.word	0x0008e6f4

0008cdc4 <__d2b>:
   8cdc4:	b570      	push	{r4, r5, r6, lr}
   8cdc6:	2101      	movs	r1, #1
   8cdc8:	b082      	sub	sp, #8
   8cdca:	4616      	mov	r6, r2
   8cdcc:	461d      	mov	r5, r3
   8cdce:	f7ff fcdf 	bl	8c790 <_Balloc>
   8cdd2:	4604      	mov	r4, r0
   8cdd4:	2800      	cmp	r0, #0
   8cdd6:	d04c      	beq.n	8ce72 <__d2b+0xae>
   8cdd8:	462b      	mov	r3, r5
   8cdda:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8cdde:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8cde2:	b10d      	cbz	r5, 8cde8 <__d2b+0x24>
   8cde4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8cde8:	2e00      	cmp	r6, #0
   8cdea:	9301      	str	r3, [sp, #4]
   8cdec:	d022      	beq.n	8ce34 <__d2b+0x70>
   8cdee:	4668      	mov	r0, sp
   8cdf0:	9600      	str	r6, [sp, #0]
   8cdf2:	f7ff fd6b 	bl	8c8cc <__lo0bits>
   8cdf6:	2800      	cmp	r0, #0
   8cdf8:	d037      	beq.n	8ce6a <__d2b+0xa6>
   8cdfa:	9b01      	ldr	r3, [sp, #4]
   8cdfc:	9900      	ldr	r1, [sp, #0]
   8cdfe:	f1c0 0220 	rsb	r2, r0, #32
   8ce02:	fa03 f202 	lsl.w	r2, r3, r2
   8ce06:	430a      	orrs	r2, r1
   8ce08:	40c3      	lsrs	r3, r0
   8ce0a:	9301      	str	r3, [sp, #4]
   8ce0c:	6162      	str	r2, [r4, #20]
   8ce0e:	2b00      	cmp	r3, #0
   8ce10:	bf14      	ite	ne
   8ce12:	2102      	movne	r1, #2
   8ce14:	2101      	moveq	r1, #1
   8ce16:	61a3      	str	r3, [r4, #24]
   8ce18:	6121      	str	r1, [r4, #16]
   8ce1a:	b1b5      	cbz	r5, 8ce4a <__d2b+0x86>
   8ce1c:	9a06      	ldr	r2, [sp, #24]
   8ce1e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8ce22:	4403      	add	r3, r0
   8ce24:	6013      	str	r3, [r2, #0]
   8ce26:	9b07      	ldr	r3, [sp, #28]
   8ce28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8ce2c:	6018      	str	r0, [r3, #0]
   8ce2e:	4620      	mov	r0, r4
   8ce30:	b002      	add	sp, #8
   8ce32:	bd70      	pop	{r4, r5, r6, pc}
   8ce34:	a801      	add	r0, sp, #4
   8ce36:	f7ff fd49 	bl	8c8cc <__lo0bits>
   8ce3a:	2301      	movs	r3, #1
   8ce3c:	9a01      	ldr	r2, [sp, #4]
   8ce3e:	4619      	mov	r1, r3
   8ce40:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8ce44:	3020      	adds	r0, #32
   8ce46:	2d00      	cmp	r5, #0
   8ce48:	d1e8      	bne.n	8ce1c <__d2b+0x58>
   8ce4a:	9a06      	ldr	r2, [sp, #24]
   8ce4c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8ce50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8ce54:	6010      	str	r0, [r2, #0]
   8ce56:	6918      	ldr	r0, [r3, #16]
   8ce58:	f7ff fd18 	bl	8c88c <__hi0bits>
   8ce5c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8ce60:	4620      	mov	r0, r4
   8ce62:	9b07      	ldr	r3, [sp, #28]
   8ce64:	6019      	str	r1, [r3, #0]
   8ce66:	b002      	add	sp, #8
   8ce68:	bd70      	pop	{r4, r5, r6, pc}
   8ce6a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8ce6e:	6162      	str	r2, [r4, #20]
   8ce70:	e7cd      	b.n	8ce0e <__d2b+0x4a>
   8ce72:	4602      	mov	r2, r0
   8ce74:	f240 310a 	movw	r1, #778	; 0x30a
   8ce78:	4b01      	ldr	r3, [pc, #4]	; (8ce80 <__d2b+0xbc>)
   8ce7a:	4802      	ldr	r0, [pc, #8]	; (8ce84 <__d2b+0xc0>)
   8ce7c:	f000 fc42 	bl	8d704 <__assert_func>
   8ce80:	0008e654 	.word	0x0008e654
   8ce84:	0008e6f4 	.word	0x0008e6f4

0008ce88 <_realloc_r>:
   8ce88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ce8c:	4616      	mov	r6, r2
   8ce8e:	2900      	cmp	r1, #0
   8ce90:	f000 80bd 	beq.w	8d00e <_realloc_r+0x186>
   8ce94:	f106 050b 	add.w	r5, r6, #11
   8ce98:	460c      	mov	r4, r1
   8ce9a:	4680      	mov	r8, r0
   8ce9c:	f7ff fc6c 	bl	8c778 <__malloc_lock>
   8cea0:	2d16      	cmp	r5, #22
   8cea2:	d85f      	bhi.n	8cf64 <_realloc_r+0xdc>
   8cea4:	2510      	movs	r5, #16
   8cea6:	462a      	mov	r2, r5
   8cea8:	42ae      	cmp	r6, r5
   8ceaa:	d860      	bhi.n	8cf6e <_realloc_r+0xe6>
   8ceac:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8ceb0:	f1a4 0908 	sub.w	r9, r4, #8
   8ceb4:	f021 0703 	bic.w	r7, r1, #3
   8ceb8:	4297      	cmp	r7, r2
   8ceba:	f280 8086 	bge.w	8cfca <_realloc_r+0x142>
   8cebe:	4bc9      	ldr	r3, [pc, #804]	; (8d1e4 <_realloc_r+0x35c>)
   8cec0:	eb09 0007 	add.w	r0, r9, r7
   8cec4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8cec8:	4584      	cmp	ip, r0
   8ceca:	f000 80b9 	beq.w	8d040 <_realloc_r+0x1b8>
   8cece:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8ced2:	f02c 0301 	bic.w	r3, ip, #1
   8ced6:	4403      	add	r3, r0
   8ced8:	685b      	ldr	r3, [r3, #4]
   8ceda:	07db      	lsls	r3, r3, #31
   8cedc:	f100 808c 	bmi.w	8cff8 <_realloc_r+0x170>
   8cee0:	f02c 0c03 	bic.w	ip, ip, #3
   8cee4:	eb07 030c 	add.w	r3, r7, ip
   8cee8:	4293      	cmp	r3, r2
   8ceea:	f280 8115 	bge.w	8d118 <_realloc_r+0x290>
   8ceee:	07cb      	lsls	r3, r1, #31
   8cef0:	d40f      	bmi.n	8cf12 <_realloc_r+0x8a>
   8cef2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8cef6:	eba9 0a03 	sub.w	sl, r9, r3
   8cefa:	f8da 3004 	ldr.w	r3, [sl, #4]
   8cefe:	f023 0103 	bic.w	r1, r3, #3
   8cf02:	448c      	add	ip, r1
   8cf04:	44bc      	add	ip, r7
   8cf06:	4594      	cmp	ip, r2
   8cf08:	da38      	bge.n	8cf7c <_realloc_r+0xf4>
   8cf0a:	187b      	adds	r3, r7, r1
   8cf0c:	4293      	cmp	r3, r2
   8cf0e:	f280 810f 	bge.w	8d130 <_realloc_r+0x2a8>
   8cf12:	4631      	mov	r1, r6
   8cf14:	4640      	mov	r0, r8
   8cf16:	f7ff f8c1 	bl	8c09c <_malloc_r>
   8cf1a:	4606      	mov	r6, r0
   8cf1c:	b1e0      	cbz	r0, 8cf58 <_realloc_r+0xd0>
   8cf1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8cf22:	f1a0 0208 	sub.w	r2, r0, #8
   8cf26:	f023 0301 	bic.w	r3, r3, #1
   8cf2a:	444b      	add	r3, r9
   8cf2c:	4293      	cmp	r3, r2
   8cf2e:	f000 80f9 	beq.w	8d124 <_realloc_r+0x29c>
   8cf32:	1f3a      	subs	r2, r7, #4
   8cf34:	2a24      	cmp	r2, #36	; 0x24
   8cf36:	f200 811c 	bhi.w	8d172 <_realloc_r+0x2ea>
   8cf3a:	2a13      	cmp	r2, #19
   8cf3c:	f200 80cd 	bhi.w	8d0da <_realloc_r+0x252>
   8cf40:	4603      	mov	r3, r0
   8cf42:	4622      	mov	r2, r4
   8cf44:	6811      	ldr	r1, [r2, #0]
   8cf46:	6019      	str	r1, [r3, #0]
   8cf48:	6851      	ldr	r1, [r2, #4]
   8cf4a:	6059      	str	r1, [r3, #4]
   8cf4c:	6892      	ldr	r2, [r2, #8]
   8cf4e:	609a      	str	r2, [r3, #8]
   8cf50:	4621      	mov	r1, r4
   8cf52:	4640      	mov	r0, r8
   8cf54:	f7fe fd70 	bl	8ba38 <_free_r>
   8cf58:	4640      	mov	r0, r8
   8cf5a:	f7ff fc13 	bl	8c784 <__malloc_unlock>
   8cf5e:	4630      	mov	r0, r6
   8cf60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cf64:	f025 0507 	bic.w	r5, r5, #7
   8cf68:	2d00      	cmp	r5, #0
   8cf6a:	462a      	mov	r2, r5
   8cf6c:	da9c      	bge.n	8cea8 <_realloc_r+0x20>
   8cf6e:	230c      	movs	r3, #12
   8cf70:	2600      	movs	r6, #0
   8cf72:	f8c8 3000 	str.w	r3, [r8]
   8cf76:	4630      	mov	r0, r6
   8cf78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cf7c:	4656      	mov	r6, sl
   8cf7e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8cf82:	60cb      	str	r3, [r1, #12]
   8cf84:	6099      	str	r1, [r3, #8]
   8cf86:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8cf8a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8cf8e:	1f3a      	subs	r2, r7, #4
   8cf90:	2a24      	cmp	r2, #36	; 0x24
   8cf92:	60cb      	str	r3, [r1, #12]
   8cf94:	6099      	str	r1, [r3, #8]
   8cf96:	f200 8107 	bhi.w	8d1a8 <_realloc_r+0x320>
   8cf9a:	2a13      	cmp	r2, #19
   8cf9c:	f240 8102 	bls.w	8d1a4 <_realloc_r+0x31c>
   8cfa0:	6823      	ldr	r3, [r4, #0]
   8cfa2:	2a1b      	cmp	r2, #27
   8cfa4:	f8ca 3008 	str.w	r3, [sl, #8]
   8cfa8:	6863      	ldr	r3, [r4, #4]
   8cfaa:	f8ca 300c 	str.w	r3, [sl, #12]
   8cfae:	f200 811b 	bhi.w	8d1e8 <_realloc_r+0x360>
   8cfb2:	3408      	adds	r4, #8
   8cfb4:	f10a 0310 	add.w	r3, sl, #16
   8cfb8:	6822      	ldr	r2, [r4, #0]
   8cfba:	4667      	mov	r7, ip
   8cfbc:	601a      	str	r2, [r3, #0]
   8cfbe:	6862      	ldr	r2, [r4, #4]
   8cfc0:	46d1      	mov	r9, sl
   8cfc2:	605a      	str	r2, [r3, #4]
   8cfc4:	68a2      	ldr	r2, [r4, #8]
   8cfc6:	4634      	mov	r4, r6
   8cfc8:	609a      	str	r2, [r3, #8]
   8cfca:	1b7b      	subs	r3, r7, r5
   8cfcc:	2b0f      	cmp	r3, #15
   8cfce:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8cfd2:	d821      	bhi.n	8d018 <_realloc_r+0x190>
   8cfd4:	f002 0201 	and.w	r2, r2, #1
   8cfd8:	433a      	orrs	r2, r7
   8cfda:	eb09 0107 	add.w	r1, r9, r7
   8cfde:	f8c9 2004 	str.w	r2, [r9, #4]
   8cfe2:	684b      	ldr	r3, [r1, #4]
   8cfe4:	f043 0301 	orr.w	r3, r3, #1
   8cfe8:	604b      	str	r3, [r1, #4]
   8cfea:	4626      	mov	r6, r4
   8cfec:	4640      	mov	r0, r8
   8cfee:	f7ff fbc9 	bl	8c784 <__malloc_unlock>
   8cff2:	4630      	mov	r0, r6
   8cff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cff8:	07c9      	lsls	r1, r1, #31
   8cffa:	d48a      	bmi.n	8cf12 <_realloc_r+0x8a>
   8cffc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8d000:	eba9 0a03 	sub.w	sl, r9, r3
   8d004:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d008:	f021 0103 	bic.w	r1, r1, #3
   8d00c:	e77d      	b.n	8cf0a <_realloc_r+0x82>
   8d00e:	4611      	mov	r1, r2
   8d010:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d014:	f7ff b842 	b.w	8c09c <_malloc_r>
   8d018:	f002 0201 	and.w	r2, r2, #1
   8d01c:	eb09 0105 	add.w	r1, r9, r5
   8d020:	f043 0301 	orr.w	r3, r3, #1
   8d024:	432a      	orrs	r2, r5
   8d026:	f8c9 2004 	str.w	r2, [r9, #4]
   8d02a:	444f      	add	r7, r9
   8d02c:	604b      	str	r3, [r1, #4]
   8d02e:	687b      	ldr	r3, [r7, #4]
   8d030:	4640      	mov	r0, r8
   8d032:	f043 0301 	orr.w	r3, r3, #1
   8d036:	3108      	adds	r1, #8
   8d038:	607b      	str	r3, [r7, #4]
   8d03a:	f7fe fcfd 	bl	8ba38 <_free_r>
   8d03e:	e7d4      	b.n	8cfea <_realloc_r+0x162>
   8d040:	f8dc b004 	ldr.w	fp, [ip, #4]
   8d044:	f105 0010 	add.w	r0, r5, #16
   8d048:	f02b 0b03 	bic.w	fp, fp, #3
   8d04c:	eb07 0c0b 	add.w	ip, r7, fp
   8d050:	4584      	cmp	ip, r0
   8d052:	da4d      	bge.n	8d0f0 <_realloc_r+0x268>
   8d054:	07c9      	lsls	r1, r1, #31
   8d056:	f53f af5c 	bmi.w	8cf12 <_realloc_r+0x8a>
   8d05a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8d05e:	eba9 0a01 	sub.w	sl, r9, r1
   8d062:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d066:	f021 0103 	bic.w	r1, r1, #3
   8d06a:	448b      	add	fp, r1
   8d06c:	44bb      	add	fp, r7
   8d06e:	4558      	cmp	r0, fp
   8d070:	f73f af4b 	bgt.w	8cf0a <_realloc_r+0x82>
   8d074:	4656      	mov	r6, sl
   8d076:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d07a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d07e:	1f3a      	subs	r2, r7, #4
   8d080:	2a24      	cmp	r2, #36	; 0x24
   8d082:	60c1      	str	r1, [r0, #12]
   8d084:	6088      	str	r0, [r1, #8]
   8d086:	f200 80bd 	bhi.w	8d204 <_realloc_r+0x37c>
   8d08a:	2a13      	cmp	r2, #19
   8d08c:	f240 80b8 	bls.w	8d200 <_realloc_r+0x378>
   8d090:	6821      	ldr	r1, [r4, #0]
   8d092:	2a1b      	cmp	r2, #27
   8d094:	f8ca 1008 	str.w	r1, [sl, #8]
   8d098:	6861      	ldr	r1, [r4, #4]
   8d09a:	f8ca 100c 	str.w	r1, [sl, #12]
   8d09e:	f200 80c1 	bhi.w	8d224 <_realloc_r+0x39c>
   8d0a2:	3408      	adds	r4, #8
   8d0a4:	f10a 0210 	add.w	r2, sl, #16
   8d0a8:	6821      	ldr	r1, [r4, #0]
   8d0aa:	6011      	str	r1, [r2, #0]
   8d0ac:	6861      	ldr	r1, [r4, #4]
   8d0ae:	6051      	str	r1, [r2, #4]
   8d0b0:	68a1      	ldr	r1, [r4, #8]
   8d0b2:	6091      	str	r1, [r2, #8]
   8d0b4:	ebab 0205 	sub.w	r2, fp, r5
   8d0b8:	eb0a 0105 	add.w	r1, sl, r5
   8d0bc:	f042 0201 	orr.w	r2, r2, #1
   8d0c0:	6099      	str	r1, [r3, #8]
   8d0c2:	604a      	str	r2, [r1, #4]
   8d0c4:	f8da 3004 	ldr.w	r3, [sl, #4]
   8d0c8:	4640      	mov	r0, r8
   8d0ca:	f003 0301 	and.w	r3, r3, #1
   8d0ce:	431d      	orrs	r5, r3
   8d0d0:	f8ca 5004 	str.w	r5, [sl, #4]
   8d0d4:	f7ff fb56 	bl	8c784 <__malloc_unlock>
   8d0d8:	e74d      	b.n	8cf76 <_realloc_r+0xee>
   8d0da:	6823      	ldr	r3, [r4, #0]
   8d0dc:	2a1b      	cmp	r2, #27
   8d0de:	6003      	str	r3, [r0, #0]
   8d0e0:	6863      	ldr	r3, [r4, #4]
   8d0e2:	6043      	str	r3, [r0, #4]
   8d0e4:	d849      	bhi.n	8d17a <_realloc_r+0x2f2>
   8d0e6:	f104 0208 	add.w	r2, r4, #8
   8d0ea:	f100 0308 	add.w	r3, r0, #8
   8d0ee:	e729      	b.n	8cf44 <_realloc_r+0xbc>
   8d0f0:	ebac 0205 	sub.w	r2, ip, r5
   8d0f4:	eb09 0105 	add.w	r1, r9, r5
   8d0f8:	f042 0201 	orr.w	r2, r2, #1
   8d0fc:	6099      	str	r1, [r3, #8]
   8d0fe:	604a      	str	r2, [r1, #4]
   8d100:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8d104:	4640      	mov	r0, r8
   8d106:	f003 0301 	and.w	r3, r3, #1
   8d10a:	431d      	orrs	r5, r3
   8d10c:	f844 5c04 	str.w	r5, [r4, #-4]
   8d110:	f7ff fb38 	bl	8c784 <__malloc_unlock>
   8d114:	4626      	mov	r6, r4
   8d116:	e72e      	b.n	8cf76 <_realloc_r+0xee>
   8d118:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8d11c:	461f      	mov	r7, r3
   8d11e:	60ca      	str	r2, [r1, #12]
   8d120:	6091      	str	r1, [r2, #8]
   8d122:	e752      	b.n	8cfca <_realloc_r+0x142>
   8d124:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8d128:	f023 0303 	bic.w	r3, r3, #3
   8d12c:	441f      	add	r7, r3
   8d12e:	e74c      	b.n	8cfca <_realloc_r+0x142>
   8d130:	4656      	mov	r6, sl
   8d132:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d136:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d13a:	1f3a      	subs	r2, r7, #4
   8d13c:	2a24      	cmp	r2, #36	; 0x24
   8d13e:	60c1      	str	r1, [r0, #12]
   8d140:	6088      	str	r0, [r1, #8]
   8d142:	d827      	bhi.n	8d194 <_realloc_r+0x30c>
   8d144:	2a13      	cmp	r2, #19
   8d146:	d923      	bls.n	8d190 <_realloc_r+0x308>
   8d148:	6821      	ldr	r1, [r4, #0]
   8d14a:	2a1b      	cmp	r2, #27
   8d14c:	f8ca 1008 	str.w	r1, [sl, #8]
   8d150:	6861      	ldr	r1, [r4, #4]
   8d152:	f8ca 100c 	str.w	r1, [sl, #12]
   8d156:	d82f      	bhi.n	8d1b8 <_realloc_r+0x330>
   8d158:	3408      	adds	r4, #8
   8d15a:	f10a 0210 	add.w	r2, sl, #16
   8d15e:	6821      	ldr	r1, [r4, #0]
   8d160:	461f      	mov	r7, r3
   8d162:	6011      	str	r1, [r2, #0]
   8d164:	6863      	ldr	r3, [r4, #4]
   8d166:	46d1      	mov	r9, sl
   8d168:	6053      	str	r3, [r2, #4]
   8d16a:	68a3      	ldr	r3, [r4, #8]
   8d16c:	4634      	mov	r4, r6
   8d16e:	6093      	str	r3, [r2, #8]
   8d170:	e72b      	b.n	8cfca <_realloc_r+0x142>
   8d172:	4621      	mov	r1, r4
   8d174:	f7ff fa96 	bl	8c6a4 <memmove>
   8d178:	e6ea      	b.n	8cf50 <_realloc_r+0xc8>
   8d17a:	68a3      	ldr	r3, [r4, #8]
   8d17c:	2a24      	cmp	r2, #36	; 0x24
   8d17e:	6083      	str	r3, [r0, #8]
   8d180:	68e3      	ldr	r3, [r4, #12]
   8d182:	60c3      	str	r3, [r0, #12]
   8d184:	d024      	beq.n	8d1d0 <_realloc_r+0x348>
   8d186:	f104 0210 	add.w	r2, r4, #16
   8d18a:	f100 0310 	add.w	r3, r0, #16
   8d18e:	e6d9      	b.n	8cf44 <_realloc_r+0xbc>
   8d190:	4632      	mov	r2, r6
   8d192:	e7e4      	b.n	8d15e <_realloc_r+0x2d6>
   8d194:	4621      	mov	r1, r4
   8d196:	4630      	mov	r0, r6
   8d198:	461f      	mov	r7, r3
   8d19a:	46d1      	mov	r9, sl
   8d19c:	f7ff fa82 	bl	8c6a4 <memmove>
   8d1a0:	4634      	mov	r4, r6
   8d1a2:	e712      	b.n	8cfca <_realloc_r+0x142>
   8d1a4:	4633      	mov	r3, r6
   8d1a6:	e707      	b.n	8cfb8 <_realloc_r+0x130>
   8d1a8:	4621      	mov	r1, r4
   8d1aa:	4630      	mov	r0, r6
   8d1ac:	4667      	mov	r7, ip
   8d1ae:	46d1      	mov	r9, sl
   8d1b0:	f7ff fa78 	bl	8c6a4 <memmove>
   8d1b4:	4634      	mov	r4, r6
   8d1b6:	e708      	b.n	8cfca <_realloc_r+0x142>
   8d1b8:	68a1      	ldr	r1, [r4, #8]
   8d1ba:	2a24      	cmp	r2, #36	; 0x24
   8d1bc:	f8ca 1010 	str.w	r1, [sl, #16]
   8d1c0:	68e1      	ldr	r1, [r4, #12]
   8d1c2:	f8ca 1014 	str.w	r1, [sl, #20]
   8d1c6:	d023      	beq.n	8d210 <_realloc_r+0x388>
   8d1c8:	3410      	adds	r4, #16
   8d1ca:	f10a 0218 	add.w	r2, sl, #24
   8d1ce:	e7c6      	b.n	8d15e <_realloc_r+0x2d6>
   8d1d0:	6923      	ldr	r3, [r4, #16]
   8d1d2:	f104 0218 	add.w	r2, r4, #24
   8d1d6:	6103      	str	r3, [r0, #16]
   8d1d8:	6961      	ldr	r1, [r4, #20]
   8d1da:	f100 0318 	add.w	r3, r0, #24
   8d1de:	6141      	str	r1, [r0, #20]
   8d1e0:	e6b0      	b.n	8cf44 <_realloc_r+0xbc>
   8d1e2:	bf00      	nop
   8d1e4:	20000cb0 	.word	0x20000cb0
   8d1e8:	68a3      	ldr	r3, [r4, #8]
   8d1ea:	2a24      	cmp	r2, #36	; 0x24
   8d1ec:	f8ca 3010 	str.w	r3, [sl, #16]
   8d1f0:	68e3      	ldr	r3, [r4, #12]
   8d1f2:	f8ca 3014 	str.w	r3, [sl, #20]
   8d1f6:	d021      	beq.n	8d23c <_realloc_r+0x3b4>
   8d1f8:	3410      	adds	r4, #16
   8d1fa:	f10a 0318 	add.w	r3, sl, #24
   8d1fe:	e6db      	b.n	8cfb8 <_realloc_r+0x130>
   8d200:	4632      	mov	r2, r6
   8d202:	e751      	b.n	8d0a8 <_realloc_r+0x220>
   8d204:	4621      	mov	r1, r4
   8d206:	4630      	mov	r0, r6
   8d208:	f7ff fa4c 	bl	8c6a4 <memmove>
   8d20c:	4b15      	ldr	r3, [pc, #84]	; (8d264 <_realloc_r+0x3dc>)
   8d20e:	e751      	b.n	8d0b4 <_realloc_r+0x22c>
   8d210:	6921      	ldr	r1, [r4, #16]
   8d212:	f10a 0220 	add.w	r2, sl, #32
   8d216:	f8ca 1018 	str.w	r1, [sl, #24]
   8d21a:	6961      	ldr	r1, [r4, #20]
   8d21c:	3418      	adds	r4, #24
   8d21e:	f8ca 101c 	str.w	r1, [sl, #28]
   8d222:	e79c      	b.n	8d15e <_realloc_r+0x2d6>
   8d224:	68a1      	ldr	r1, [r4, #8]
   8d226:	2a24      	cmp	r2, #36	; 0x24
   8d228:	f8ca 1010 	str.w	r1, [sl, #16]
   8d22c:	68e1      	ldr	r1, [r4, #12]
   8d22e:	f8ca 1014 	str.w	r1, [sl, #20]
   8d232:	d00d      	beq.n	8d250 <_realloc_r+0x3c8>
   8d234:	3410      	adds	r4, #16
   8d236:	f10a 0218 	add.w	r2, sl, #24
   8d23a:	e735      	b.n	8d0a8 <_realloc_r+0x220>
   8d23c:	6922      	ldr	r2, [r4, #16]
   8d23e:	f10a 0320 	add.w	r3, sl, #32
   8d242:	f8ca 2018 	str.w	r2, [sl, #24]
   8d246:	6962      	ldr	r2, [r4, #20]
   8d248:	3418      	adds	r4, #24
   8d24a:	f8ca 201c 	str.w	r2, [sl, #28]
   8d24e:	e6b3      	b.n	8cfb8 <_realloc_r+0x130>
   8d250:	6921      	ldr	r1, [r4, #16]
   8d252:	f10a 0220 	add.w	r2, sl, #32
   8d256:	f8ca 1018 	str.w	r1, [sl, #24]
   8d25a:	6961      	ldr	r1, [r4, #20]
   8d25c:	3418      	adds	r4, #24
   8d25e:	f8ca 101c 	str.w	r1, [sl, #28]
   8d262:	e721      	b.n	8d0a8 <_realloc_r+0x220>
   8d264:	20000cb0 	.word	0x20000cb0

0008d268 <frexp>:
   8d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d26a:	4617      	mov	r7, r2
   8d26c:	2200      	movs	r2, #0
   8d26e:	f8df c060 	ldr.w	ip, [pc, #96]	; 8d2d0 <frexp+0x68>
   8d272:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d276:	4563      	cmp	r3, ip
   8d278:	4604      	mov	r4, r0
   8d27a:	460d      	mov	r5, r1
   8d27c:	603a      	str	r2, [r7, #0]
   8d27e:	dc22      	bgt.n	8d2c6 <frexp+0x5e>
   8d280:	4684      	mov	ip, r0
   8d282:	ea53 0c0c 	orrs.w	ip, r3, ip
   8d286:	d01e      	beq.n	8d2c6 <frexp+0x5e>
   8d288:	f8df c048 	ldr.w	ip, [pc, #72]	; 8d2d4 <frexp+0x6c>
   8d28c:	460e      	mov	r6, r1
   8d28e:	ea01 0c0c 	and.w	ip, r1, ip
   8d292:	f1bc 0f00 	cmp.w	ip, #0
   8d296:	d109      	bne.n	8d2ac <frexp+0x44>
   8d298:	2200      	movs	r2, #0
   8d29a:	4b0c      	ldr	r3, [pc, #48]	; (8d2cc <frexp+0x64>)
   8d29c:	f000 fd70 	bl	8dd80 <__aeabi_dmul>
   8d2a0:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8d2a4:	4604      	mov	r4, r0
   8d2a6:	460e      	mov	r6, r1
   8d2a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d2ac:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8d2b0:	151b      	asrs	r3, r3, #20
   8d2b2:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8d2b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8d2ba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8d2be:	4413      	add	r3, r2
   8d2c0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8d2c4:	603b      	str	r3, [r7, #0]
   8d2c6:	4620      	mov	r0, r4
   8d2c8:	4629      	mov	r1, r5
   8d2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d2cc:	43500000 	.word	0x43500000
   8d2d0:	7fefffff 	.word	0x7fefffff
   8d2d4:	7ff00000 	.word	0x7ff00000

0008d2d8 <_sbrk_r>:
   8d2d8:	2200      	movs	r2, #0
   8d2da:	b538      	push	{r3, r4, r5, lr}
   8d2dc:	4d06      	ldr	r5, [pc, #24]	; (8d2f8 <_sbrk_r+0x20>)
   8d2de:	4604      	mov	r4, r0
   8d2e0:	4608      	mov	r0, r1
   8d2e2:	602a      	str	r2, [r5, #0]
   8d2e4:	f7f9 febe 	bl	87064 <_sbrk>
   8d2e8:	1c43      	adds	r3, r0, #1
   8d2ea:	d000      	beq.n	8d2ee <_sbrk_r+0x16>
   8d2ec:	bd38      	pop	{r3, r4, r5, pc}
   8d2ee:	682b      	ldr	r3, [r5, #0]
   8d2f0:	2b00      	cmp	r3, #0
   8d2f2:	d0fb      	beq.n	8d2ec <_sbrk_r+0x14>
   8d2f4:	6023      	str	r3, [r4, #0]
   8d2f6:	bd38      	pop	{r3, r4, r5, pc}
   8d2f8:	20002e28 	.word	0x20002e28

0008d2fc <__sread>:
   8d2fc:	b510      	push	{r4, lr}
   8d2fe:	460c      	mov	r4, r1
   8d300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d304:	f000 fb16 	bl	8d934 <_read_r>
   8d308:	2800      	cmp	r0, #0
   8d30a:	db03      	blt.n	8d314 <__sread+0x18>
   8d30c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8d30e:	4403      	add	r3, r0
   8d310:	6523      	str	r3, [r4, #80]	; 0x50
   8d312:	bd10      	pop	{r4, pc}
   8d314:	89a3      	ldrh	r3, [r4, #12]
   8d316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8d31a:	81a3      	strh	r3, [r4, #12]
   8d31c:	bd10      	pop	{r4, pc}
   8d31e:	bf00      	nop

0008d320 <__swrite>:
   8d320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8d324:	460c      	mov	r4, r1
   8d326:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8d32a:	461f      	mov	r7, r3
   8d32c:	05cb      	lsls	r3, r1, #23
   8d32e:	4616      	mov	r6, r2
   8d330:	4605      	mov	r5, r0
   8d332:	d40b      	bmi.n	8d34c <__swrite+0x2c>
   8d334:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8d338:	81a1      	strh	r1, [r4, #12]
   8d33a:	463b      	mov	r3, r7
   8d33c:	4632      	mov	r2, r6
   8d33e:	4628      	mov	r0, r5
   8d340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8d344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8d348:	f000 b980 	b.w	8d64c <_write_r>
   8d34c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8d350:	2302      	movs	r3, #2
   8d352:	2200      	movs	r2, #0
   8d354:	f000 fad8 	bl	8d908 <_lseek_r>
   8d358:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8d35c:	e7ea      	b.n	8d334 <__swrite+0x14>
   8d35e:	bf00      	nop

0008d360 <__sseek>:
   8d360:	b510      	push	{r4, lr}
   8d362:	460c      	mov	r4, r1
   8d364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d368:	f000 face 	bl	8d908 <_lseek_r>
   8d36c:	89a3      	ldrh	r3, [r4, #12]
   8d36e:	1c42      	adds	r2, r0, #1
   8d370:	bf0e      	itee	eq
   8d372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8d376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8d37a:	6520      	strne	r0, [r4, #80]	; 0x50
   8d37c:	81a3      	strh	r3, [r4, #12]
   8d37e:	bd10      	pop	{r4, pc}

0008d380 <__sclose>:
   8d380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d384:	f000 ba0c 	b.w	8d7a0 <_close_r>

0008d388 <strlen>:
   8d388:	f020 0103 	bic.w	r1, r0, #3
   8d38c:	f010 0003 	ands.w	r0, r0, #3
   8d390:	f1c0 0000 	rsb	r0, r0, #0
   8d394:	f851 3b04 	ldr.w	r3, [r1], #4
   8d398:	f100 0c04 	add.w	ip, r0, #4
   8d39c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8d3a0:	f06f 0200 	mvn.w	r2, #0
   8d3a4:	bf1c      	itt	ne
   8d3a6:	fa22 f20c 	lsrne.w	r2, r2, ip
   8d3aa:	4313      	orrne	r3, r2
   8d3ac:	f04f 0c01 	mov.w	ip, #1
   8d3b0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8d3b4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8d3b8:	eba3 020c 	sub.w	r2, r3, ip
   8d3bc:	ea22 0203 	bic.w	r2, r2, r3
   8d3c0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8d3c4:	bf04      	itt	eq
   8d3c6:	f851 3b04 	ldreq.w	r3, [r1], #4
   8d3ca:	3004      	addeq	r0, #4
   8d3cc:	d0f4      	beq.n	8d3b8 <strlen+0x30>
   8d3ce:	f1c2 0100 	rsb	r1, r2, #0
   8d3d2:	ea02 0201 	and.w	r2, r2, r1
   8d3d6:	fab2 f282 	clz	r2, r2
   8d3da:	f1c2 021f 	rsb	r2, r2, #31
   8d3de:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8d3e2:	4770      	bx	lr

0008d3e4 <strncpy>:
   8d3e4:	b470      	push	{r4, r5, r6}
   8d3e6:	ea40 0401 	orr.w	r4, r0, r1
   8d3ea:	07a3      	lsls	r3, r4, #30
   8d3ec:	d122      	bne.n	8d434 <strncpy+0x50>
   8d3ee:	2a03      	cmp	r2, #3
   8d3f0:	d920      	bls.n	8d434 <strncpy+0x50>
   8d3f2:	460b      	mov	r3, r1
   8d3f4:	4604      	mov	r4, r0
   8d3f6:	4619      	mov	r1, r3
   8d3f8:	f853 6b04 	ldr.w	r6, [r3], #4
   8d3fc:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8d400:	ea25 0506 	bic.w	r5, r5, r6
   8d404:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8d408:	d115      	bne.n	8d436 <strncpy+0x52>
   8d40a:	3a04      	subs	r2, #4
   8d40c:	2a03      	cmp	r2, #3
   8d40e:	4619      	mov	r1, r3
   8d410:	f844 6b04 	str.w	r6, [r4], #4
   8d414:	d8ef      	bhi.n	8d3f6 <strncpy+0x12>
   8d416:	1e4d      	subs	r5, r1, #1
   8d418:	b152      	cbz	r2, 8d430 <strncpy+0x4c>
   8d41a:	4623      	mov	r3, r4
   8d41c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8d420:	1e56      	subs	r6, r2, #1
   8d422:	f803 1b01 	strb.w	r1, [r3], #1
   8d426:	b141      	cbz	r1, 8d43a <strncpy+0x56>
   8d428:	4632      	mov	r2, r6
   8d42a:	461c      	mov	r4, r3
   8d42c:	2a00      	cmp	r2, #0
   8d42e:	d1f4      	bne.n	8d41a <strncpy+0x36>
   8d430:	bc70      	pop	{r4, r5, r6}
   8d432:	4770      	bx	lr
   8d434:	4604      	mov	r4, r0
   8d436:	1e4d      	subs	r5, r1, #1
   8d438:	e7ee      	b.n	8d418 <strncpy+0x34>
   8d43a:	4422      	add	r2, r4
   8d43c:	2e00      	cmp	r6, #0
   8d43e:	d0f7      	beq.n	8d430 <strncpy+0x4c>
   8d440:	f803 1b01 	strb.w	r1, [r3], #1
   8d444:	4293      	cmp	r3, r2
   8d446:	d1fb      	bne.n	8d440 <strncpy+0x5c>
   8d448:	bc70      	pop	{r4, r5, r6}
   8d44a:	4770      	bx	lr

0008d44c <__ssprint_r>:
   8d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d450:	6893      	ldr	r3, [r2, #8]
   8d452:	4691      	mov	r9, r2
   8d454:	b083      	sub	sp, #12
   8d456:	2b00      	cmp	r3, #0
   8d458:	d06d      	beq.n	8d536 <__ssprint_r+0xea>
   8d45a:	6817      	ldr	r7, [r2, #0]
   8d45c:	4680      	mov	r8, r0
   8d45e:	460c      	mov	r4, r1
   8d460:	6808      	ldr	r0, [r1, #0]
   8d462:	688d      	ldr	r5, [r1, #8]
   8d464:	3708      	adds	r7, #8
   8d466:	e043      	b.n	8d4f0 <__ssprint_r+0xa4>
   8d468:	89a3      	ldrh	r3, [r4, #12]
   8d46a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8d46e:	d02e      	beq.n	8d4ce <__ssprint_r+0x82>
   8d470:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8d474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8d478:	eba0 0a01 	sub.w	sl, r0, r1
   8d47c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8d480:	eb0a 0006 	add.w	r0, sl, r6
   8d484:	106d      	asrs	r5, r5, #1
   8d486:	3001      	adds	r0, #1
   8d488:	42a8      	cmp	r0, r5
   8d48a:	462a      	mov	r2, r5
   8d48c:	bf84      	itt	hi
   8d48e:	4605      	movhi	r5, r0
   8d490:	462a      	movhi	r2, r5
   8d492:	055b      	lsls	r3, r3, #21
   8d494:	d536      	bpl.n	8d504 <__ssprint_r+0xb8>
   8d496:	4611      	mov	r1, r2
   8d498:	4640      	mov	r0, r8
   8d49a:	f7fe fdff 	bl	8c09c <_malloc_r>
   8d49e:	2800      	cmp	r0, #0
   8d4a0:	d03a      	beq.n	8d518 <__ssprint_r+0xcc>
   8d4a2:	4652      	mov	r2, sl
   8d4a4:	6921      	ldr	r1, [r4, #16]
   8d4a6:	9001      	str	r0, [sp, #4]
   8d4a8:	f7fa f9c4 	bl	87834 <memcpy>
   8d4ac:	89a2      	ldrh	r2, [r4, #12]
   8d4ae:	9b01      	ldr	r3, [sp, #4]
   8d4b0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8d4b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8d4b8:	81a2      	strh	r2, [r4, #12]
   8d4ba:	eba5 020a 	sub.w	r2, r5, sl
   8d4be:	eb03 000a 	add.w	r0, r3, sl
   8d4c2:	6165      	str	r5, [r4, #20]
   8d4c4:	46b2      	mov	sl, r6
   8d4c6:	4635      	mov	r5, r6
   8d4c8:	6123      	str	r3, [r4, #16]
   8d4ca:	6020      	str	r0, [r4, #0]
   8d4cc:	60a2      	str	r2, [r4, #8]
   8d4ce:	4659      	mov	r1, fp
   8d4d0:	4652      	mov	r2, sl
   8d4d2:	f7ff f8e7 	bl	8c6a4 <memmove>
   8d4d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8d4da:	68a1      	ldr	r1, [r4, #8]
   8d4dc:	6820      	ldr	r0, [r4, #0]
   8d4de:	1b4d      	subs	r5, r1, r5
   8d4e0:	4450      	add	r0, sl
   8d4e2:	1b9e      	subs	r6, r3, r6
   8d4e4:	60a5      	str	r5, [r4, #8]
   8d4e6:	6020      	str	r0, [r4, #0]
   8d4e8:	f8c9 6008 	str.w	r6, [r9, #8]
   8d4ec:	b31e      	cbz	r6, 8d536 <__ssprint_r+0xea>
   8d4ee:	3708      	adds	r7, #8
   8d4f0:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8d4f4:	2e00      	cmp	r6, #0
   8d4f6:	d0fa      	beq.n	8d4ee <__ssprint_r+0xa2>
   8d4f8:	42b5      	cmp	r5, r6
   8d4fa:	46aa      	mov	sl, r5
   8d4fc:	d9b4      	bls.n	8d468 <__ssprint_r+0x1c>
   8d4fe:	4635      	mov	r5, r6
   8d500:	46b2      	mov	sl, r6
   8d502:	e7e4      	b.n	8d4ce <__ssprint_r+0x82>
   8d504:	4640      	mov	r0, r8
   8d506:	f7ff fcbf 	bl	8ce88 <_realloc_r>
   8d50a:	4603      	mov	r3, r0
   8d50c:	2800      	cmp	r0, #0
   8d50e:	d1d4      	bne.n	8d4ba <__ssprint_r+0x6e>
   8d510:	4640      	mov	r0, r8
   8d512:	6921      	ldr	r1, [r4, #16]
   8d514:	f7fe fa90 	bl	8ba38 <_free_r>
   8d518:	230c      	movs	r3, #12
   8d51a:	2200      	movs	r2, #0
   8d51c:	f04f 30ff 	mov.w	r0, #4294967295
   8d520:	f8c8 3000 	str.w	r3, [r8]
   8d524:	89a3      	ldrh	r3, [r4, #12]
   8d526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8d52a:	81a3      	strh	r3, [r4, #12]
   8d52c:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8d530:	b003      	add	sp, #12
   8d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d536:	2000      	movs	r0, #0
   8d538:	f8c9 0004 	str.w	r0, [r9, #4]
   8d53c:	b003      	add	sp, #12
   8d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d542:	bf00      	nop

0008d544 <__swbuf_r>:
   8d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d546:	460d      	mov	r5, r1
   8d548:	4614      	mov	r4, r2
   8d54a:	4606      	mov	r6, r0
   8d54c:	b110      	cbz	r0, 8d554 <__swbuf_r+0x10>
   8d54e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8d550:	2b00      	cmp	r3, #0
   8d552:	d043      	beq.n	8d5dc <__swbuf_r+0x98>
   8d554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8d558:	69a3      	ldr	r3, [r4, #24]
   8d55a:	0717      	lsls	r7, r2, #28
   8d55c:	60a3      	str	r3, [r4, #8]
   8d55e:	b290      	uxth	r0, r2
   8d560:	d51b      	bpl.n	8d59a <__swbuf_r+0x56>
   8d562:	6923      	ldr	r3, [r4, #16]
   8d564:	b1cb      	cbz	r3, 8d59a <__swbuf_r+0x56>
   8d566:	b2ed      	uxtb	r5, r5
   8d568:	0481      	lsls	r1, r0, #18
   8d56a:	462f      	mov	r7, r5
   8d56c:	d522      	bpl.n	8d5b4 <__swbuf_r+0x70>
   8d56e:	6822      	ldr	r2, [r4, #0]
   8d570:	6961      	ldr	r1, [r4, #20]
   8d572:	1ad3      	subs	r3, r2, r3
   8d574:	4299      	cmp	r1, r3
   8d576:	dd29      	ble.n	8d5cc <__swbuf_r+0x88>
   8d578:	3301      	adds	r3, #1
   8d57a:	68a1      	ldr	r1, [r4, #8]
   8d57c:	1c50      	adds	r0, r2, #1
   8d57e:	3901      	subs	r1, #1
   8d580:	60a1      	str	r1, [r4, #8]
   8d582:	6020      	str	r0, [r4, #0]
   8d584:	7015      	strb	r5, [r2, #0]
   8d586:	6962      	ldr	r2, [r4, #20]
   8d588:	429a      	cmp	r2, r3
   8d58a:	d02a      	beq.n	8d5e2 <__swbuf_r+0x9e>
   8d58c:	89a3      	ldrh	r3, [r4, #12]
   8d58e:	07db      	lsls	r3, r3, #31
   8d590:	d501      	bpl.n	8d596 <__swbuf_r+0x52>
   8d592:	2d0a      	cmp	r5, #10
   8d594:	d025      	beq.n	8d5e2 <__swbuf_r+0x9e>
   8d596:	4638      	mov	r0, r7
   8d598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d59a:	4621      	mov	r1, r4
   8d59c:	4630      	mov	r0, r6
   8d59e:	f7fc ffc7 	bl	8a530 <__swsetup_r>
   8d5a2:	bb20      	cbnz	r0, 8d5ee <__swbuf_r+0xaa>
   8d5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8d5a8:	b2ed      	uxtb	r5, r5
   8d5aa:	b290      	uxth	r0, r2
   8d5ac:	0481      	lsls	r1, r0, #18
   8d5ae:	462f      	mov	r7, r5
   8d5b0:	6923      	ldr	r3, [r4, #16]
   8d5b2:	d4dc      	bmi.n	8d56e <__swbuf_r+0x2a>
   8d5b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8d5b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8d5ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8d5be:	81a2      	strh	r2, [r4, #12]
   8d5c0:	6822      	ldr	r2, [r4, #0]
   8d5c2:	6661      	str	r1, [r4, #100]	; 0x64
   8d5c4:	6961      	ldr	r1, [r4, #20]
   8d5c6:	1ad3      	subs	r3, r2, r3
   8d5c8:	4299      	cmp	r1, r3
   8d5ca:	dcd5      	bgt.n	8d578 <__swbuf_r+0x34>
   8d5cc:	4621      	mov	r1, r4
   8d5ce:	4630      	mov	r0, r6
   8d5d0:	f7fe f8b2 	bl	8b738 <_fflush_r>
   8d5d4:	b958      	cbnz	r0, 8d5ee <__swbuf_r+0xaa>
   8d5d6:	2301      	movs	r3, #1
   8d5d8:	6822      	ldr	r2, [r4, #0]
   8d5da:	e7ce      	b.n	8d57a <__swbuf_r+0x36>
   8d5dc:	f7fe f908 	bl	8b7f0 <__sinit>
   8d5e0:	e7b8      	b.n	8d554 <__swbuf_r+0x10>
   8d5e2:	4621      	mov	r1, r4
   8d5e4:	4630      	mov	r0, r6
   8d5e6:	f7fe f8a7 	bl	8b738 <_fflush_r>
   8d5ea:	2800      	cmp	r0, #0
   8d5ec:	d0d3      	beq.n	8d596 <__swbuf_r+0x52>
   8d5ee:	f04f 37ff 	mov.w	r7, #4294967295
   8d5f2:	e7d0      	b.n	8d596 <__swbuf_r+0x52>

0008d5f4 <_wcrtomb_r>:
   8d5f4:	b570      	push	{r4, r5, r6, lr}
   8d5f6:	4606      	mov	r6, r0
   8d5f8:	461d      	mov	r5, r3
   8d5fa:	b084      	sub	sp, #16
   8d5fc:	b139      	cbz	r1, 8d60e <_wcrtomb_r+0x1a>
   8d5fe:	4c0b      	ldr	r4, [pc, #44]	; (8d62c <_wcrtomb_r+0x38>)
   8d600:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8d604:	47a0      	blx	r4
   8d606:	1c43      	adds	r3, r0, #1
   8d608:	d00a      	beq.n	8d620 <_wcrtomb_r+0x2c>
   8d60a:	b004      	add	sp, #16
   8d60c:	bd70      	pop	{r4, r5, r6, pc}
   8d60e:	460c      	mov	r4, r1
   8d610:	4906      	ldr	r1, [pc, #24]	; (8d62c <_wcrtomb_r+0x38>)
   8d612:	4622      	mov	r2, r4
   8d614:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8d618:	a901      	add	r1, sp, #4
   8d61a:	47a0      	blx	r4
   8d61c:	1c43      	adds	r3, r0, #1
   8d61e:	d1f4      	bne.n	8d60a <_wcrtomb_r+0x16>
   8d620:	2200      	movs	r2, #0
   8d622:	238a      	movs	r3, #138	; 0x8a
   8d624:	602a      	str	r2, [r5, #0]
   8d626:	6033      	str	r3, [r6, #0]
   8d628:	b004      	add	sp, #16
   8d62a:	bd70      	pop	{r4, r5, r6, pc}
   8d62c:	20000b44 	.word	0x20000b44

0008d630 <__ascii_wctomb>:
   8d630:	4603      	mov	r3, r0
   8d632:	b149      	cbz	r1, 8d648 <__ascii_wctomb+0x18>
   8d634:	2aff      	cmp	r2, #255	; 0xff
   8d636:	d802      	bhi.n	8d63e <__ascii_wctomb+0xe>
   8d638:	2001      	movs	r0, #1
   8d63a:	700a      	strb	r2, [r1, #0]
   8d63c:	4770      	bx	lr
   8d63e:	228a      	movs	r2, #138	; 0x8a
   8d640:	f04f 30ff 	mov.w	r0, #4294967295
   8d644:	601a      	str	r2, [r3, #0]
   8d646:	4770      	bx	lr
   8d648:	4608      	mov	r0, r1
   8d64a:	4770      	bx	lr

0008d64c <_write_r>:
   8d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d64e:	460f      	mov	r7, r1
   8d650:	2600      	movs	r6, #0
   8d652:	4d08      	ldr	r5, [pc, #32]	; (8d674 <_write_r+0x28>)
   8d654:	4611      	mov	r1, r2
   8d656:	4604      	mov	r4, r0
   8d658:	461a      	mov	r2, r3
   8d65a:	4638      	mov	r0, r7
   8d65c:	602e      	str	r6, [r5, #0]
   8d65e:	f7f7 fc4d 	bl	84efc <_write>
   8d662:	1c43      	adds	r3, r0, #1
   8d664:	d000      	beq.n	8d668 <_write_r+0x1c>
   8d666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d668:	682b      	ldr	r3, [r5, #0]
   8d66a:	2b00      	cmp	r3, #0
   8d66c:	d0fb      	beq.n	8d666 <_write_r+0x1a>
   8d66e:	6023      	str	r3, [r4, #0]
   8d670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d672:	bf00      	nop
   8d674:	20002e28 	.word	0x20002e28

0008d678 <__register_exitproc>:
   8d678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d67c:	f8df a080 	ldr.w	sl, [pc, #128]	; 8d700 <__register_exitproc+0x88>
   8d680:	4606      	mov	r6, r0
   8d682:	f8da 0000 	ldr.w	r0, [sl]
   8d686:	4698      	mov	r8, r3
   8d688:	460f      	mov	r7, r1
   8d68a:	4691      	mov	r9, r2
   8d68c:	f7fe fc82 	bl	8bf94 <__retarget_lock_acquire_recursive>
   8d690:	4b1a      	ldr	r3, [pc, #104]	; (8d6fc <__register_exitproc+0x84>)
   8d692:	681b      	ldr	r3, [r3, #0]
   8d694:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8d698:	b324      	cbz	r4, 8d6e4 <__register_exitproc+0x6c>
   8d69a:	6865      	ldr	r5, [r4, #4]
   8d69c:	2d1f      	cmp	r5, #31
   8d69e:	dc26      	bgt.n	8d6ee <__register_exitproc+0x76>
   8d6a0:	b95e      	cbnz	r6, 8d6ba <__register_exitproc+0x42>
   8d6a2:	1c6b      	adds	r3, r5, #1
   8d6a4:	3502      	adds	r5, #2
   8d6a6:	f8da 0000 	ldr.w	r0, [sl]
   8d6aa:	6063      	str	r3, [r4, #4]
   8d6ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8d6b0:	f7fe fc72 	bl	8bf98 <__retarget_lock_release_recursive>
   8d6b4:	2000      	movs	r0, #0
   8d6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d6ba:	2301      	movs	r3, #1
   8d6bc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8d6c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8d6c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8d6c8:	40ab      	lsls	r3, r5
   8d6ca:	431a      	orrs	r2, r3
   8d6cc:	2e02      	cmp	r6, #2
   8d6ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8d6d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8d6d6:	d1e4      	bne.n	8d6a2 <__register_exitproc+0x2a>
   8d6d8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8d6dc:	4313      	orrs	r3, r2
   8d6de:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8d6e2:	e7de      	b.n	8d6a2 <__register_exitproc+0x2a>
   8d6e4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8d6e8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8d6ec:	e7d5      	b.n	8d69a <__register_exitproc+0x22>
   8d6ee:	f8da 0000 	ldr.w	r0, [sl]
   8d6f2:	f7fe fc51 	bl	8bf98 <__retarget_lock_release_recursive>
   8d6f6:	f04f 30ff 	mov.w	r0, #4294967295
   8d6fa:	e7dc      	b.n	8d6b6 <__register_exitproc+0x3e>
   8d6fc:	0008e5bc 	.word	0x0008e5bc
   8d700:	20000b40 	.word	0x20000b40

0008d704 <__assert_func>:
   8d704:	4614      	mov	r4, r2
   8d706:	b500      	push	{lr}
   8d708:	4d09      	ldr	r5, [pc, #36]	; (8d730 <__assert_func+0x2c>)
   8d70a:	461a      	mov	r2, r3
   8d70c:	4603      	mov	r3, r0
   8d70e:	6828      	ldr	r0, [r5, #0]
   8d710:	b085      	sub	sp, #20
   8d712:	68c0      	ldr	r0, [r0, #12]
   8d714:	b144      	cbz	r4, 8d728 <__assert_func+0x24>
   8d716:	4d07      	ldr	r5, [pc, #28]	; (8d734 <__assert_func+0x30>)
   8d718:	9100      	str	r1, [sp, #0]
   8d71a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8d71e:	4906      	ldr	r1, [pc, #24]	; (8d738 <__assert_func+0x34>)
   8d720:	f000 f8b6 	bl	8d890 <fiprintf>
   8d724:	f000 f91c 	bl	8d960 <abort>
   8d728:	4d04      	ldr	r5, [pc, #16]	; (8d73c <__assert_func+0x38>)
   8d72a:	462c      	mov	r4, r5
   8d72c:	e7f4      	b.n	8d718 <__assert_func+0x14>
   8d72e:	bf00      	nop
   8d730:	20000714 	.word	0x20000714
   8d734:	0008e874 	.word	0x0008e874
   8d738:	0008e884 	.word	0x0008e884
   8d73c:	0008e510 	.word	0x0008e510

0008d740 <_calloc_r>:
   8d740:	b510      	push	{r4, lr}
   8d742:	fb02 f101 	mul.w	r1, r2, r1
   8d746:	f7fe fca9 	bl	8c09c <_malloc_r>
   8d74a:	4604      	mov	r4, r0
   8d74c:	b168      	cbz	r0, 8d76a <_calloc_r+0x2a>
   8d74e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8d752:	f022 0203 	bic.w	r2, r2, #3
   8d756:	3a04      	subs	r2, #4
   8d758:	2a24      	cmp	r2, #36	; 0x24
   8d75a:	d818      	bhi.n	8d78e <_calloc_r+0x4e>
   8d75c:	2a13      	cmp	r2, #19
   8d75e:	d806      	bhi.n	8d76e <_calloc_r+0x2e>
   8d760:	4602      	mov	r2, r0
   8d762:	2300      	movs	r3, #0
   8d764:	e9c2 3300 	strd	r3, r3, [r2]
   8d768:	6093      	str	r3, [r2, #8]
   8d76a:	4620      	mov	r0, r4
   8d76c:	bd10      	pop	{r4, pc}
   8d76e:	2300      	movs	r3, #0
   8d770:	2a1b      	cmp	r2, #27
   8d772:	e9c0 3300 	strd	r3, r3, [r0]
   8d776:	d90f      	bls.n	8d798 <_calloc_r+0x58>
   8d778:	2a24      	cmp	r2, #36	; 0x24
   8d77a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8d77e:	bf0a      	itet	eq
   8d780:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8d784:	f100 0210 	addne.w	r2, r0, #16
   8d788:	f100 0218 	addeq.w	r2, r0, #24
   8d78c:	e7e9      	b.n	8d762 <_calloc_r+0x22>
   8d78e:	2100      	movs	r1, #0
   8d790:	f7fa f8c6 	bl	87920 <memset>
   8d794:	4620      	mov	r0, r4
   8d796:	bd10      	pop	{r4, pc}
   8d798:	f100 0208 	add.w	r2, r0, #8
   8d79c:	e7e1      	b.n	8d762 <_calloc_r+0x22>
   8d79e:	bf00      	nop

0008d7a0 <_close_r>:
   8d7a0:	2200      	movs	r2, #0
   8d7a2:	b538      	push	{r3, r4, r5, lr}
   8d7a4:	4d06      	ldr	r5, [pc, #24]	; (8d7c0 <_close_r+0x20>)
   8d7a6:	4604      	mov	r4, r0
   8d7a8:	4608      	mov	r0, r1
   8d7aa:	602a      	str	r2, [r5, #0]
   8d7ac:	f7f9 fc76 	bl	8709c <_close>
   8d7b0:	1c43      	adds	r3, r0, #1
   8d7b2:	d000      	beq.n	8d7b6 <_close_r+0x16>
   8d7b4:	bd38      	pop	{r3, r4, r5, pc}
   8d7b6:	682b      	ldr	r3, [r5, #0]
   8d7b8:	2b00      	cmp	r3, #0
   8d7ba:	d0fb      	beq.n	8d7b4 <_close_r+0x14>
   8d7bc:	6023      	str	r3, [r4, #0]
   8d7be:	bd38      	pop	{r3, r4, r5, pc}
   8d7c0:	20002e28 	.word	0x20002e28

0008d7c4 <_fclose_r>:
   8d7c4:	b570      	push	{r4, r5, r6, lr}
   8d7c6:	2900      	cmp	r1, #0
   8d7c8:	d04b      	beq.n	8d862 <_fclose_r+0x9e>
   8d7ca:	460c      	mov	r4, r1
   8d7cc:	4605      	mov	r5, r0
   8d7ce:	b110      	cbz	r0, 8d7d6 <_fclose_r+0x12>
   8d7d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8d7d2:	2b00      	cmp	r3, #0
   8d7d4:	d048      	beq.n	8d868 <_fclose_r+0xa4>
   8d7d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d7d8:	07d8      	lsls	r0, r3, #31
   8d7da:	d534      	bpl.n	8d846 <_fclose_r+0x82>
   8d7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d7e0:	2b00      	cmp	r3, #0
   8d7e2:	d03e      	beq.n	8d862 <_fclose_r+0x9e>
   8d7e4:	4621      	mov	r1, r4
   8d7e6:	4628      	mov	r0, r5
   8d7e8:	f7fd ff0e 	bl	8b608 <__sflush_r>
   8d7ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8d7ee:	4606      	mov	r6, r0
   8d7f0:	b133      	cbz	r3, 8d800 <_fclose_r+0x3c>
   8d7f2:	4628      	mov	r0, r5
   8d7f4:	69e1      	ldr	r1, [r4, #28]
   8d7f6:	4798      	blx	r3
   8d7f8:	2800      	cmp	r0, #0
   8d7fa:	bfb8      	it	lt
   8d7fc:	f04f 36ff 	movlt.w	r6, #4294967295
   8d800:	89a3      	ldrh	r3, [r4, #12]
   8d802:	061a      	lsls	r2, r3, #24
   8d804:	d43b      	bmi.n	8d87e <_fclose_r+0xba>
   8d806:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8d808:	b141      	cbz	r1, 8d81c <_fclose_r+0x58>
   8d80a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8d80e:	4299      	cmp	r1, r3
   8d810:	d002      	beq.n	8d818 <_fclose_r+0x54>
   8d812:	4628      	mov	r0, r5
   8d814:	f7fe f910 	bl	8ba38 <_free_r>
   8d818:	2300      	movs	r3, #0
   8d81a:	6323      	str	r3, [r4, #48]	; 0x30
   8d81c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8d81e:	b121      	cbz	r1, 8d82a <_fclose_r+0x66>
   8d820:	4628      	mov	r0, r5
   8d822:	f7fe f909 	bl	8ba38 <_free_r>
   8d826:	2300      	movs	r3, #0
   8d828:	6463      	str	r3, [r4, #68]	; 0x44
   8d82a:	f7fe f80f 	bl	8b84c <__sfp_lock_acquire>
   8d82e:	2200      	movs	r2, #0
   8d830:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d832:	81a2      	strh	r2, [r4, #12]
   8d834:	07db      	lsls	r3, r3, #31
   8d836:	d527      	bpl.n	8d888 <_fclose_r+0xc4>
   8d838:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d83a:	f7fe fba9 	bl	8bf90 <__retarget_lock_close_recursive>
   8d83e:	f7fe f80b 	bl	8b858 <__sfp_lock_release>
   8d842:	4630      	mov	r0, r6
   8d844:	bd70      	pop	{r4, r5, r6, pc}
   8d846:	89a3      	ldrh	r3, [r4, #12]
   8d848:	0599      	lsls	r1, r3, #22
   8d84a:	d4cb      	bmi.n	8d7e4 <_fclose_r+0x20>
   8d84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d84e:	f7fe fba1 	bl	8bf94 <__retarget_lock_acquire_recursive>
   8d852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d856:	2b00      	cmp	r3, #0
   8d858:	d1c4      	bne.n	8d7e4 <_fclose_r+0x20>
   8d85a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8d85c:	f016 0601 	ands.w	r6, r6, #1
   8d860:	d008      	beq.n	8d874 <_fclose_r+0xb0>
   8d862:	2600      	movs	r6, #0
   8d864:	4630      	mov	r0, r6
   8d866:	bd70      	pop	{r4, r5, r6, pc}
   8d868:	f7fd ffc2 	bl	8b7f0 <__sinit>
   8d86c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d86e:	07d8      	lsls	r0, r3, #31
   8d870:	d4b4      	bmi.n	8d7dc <_fclose_r+0x18>
   8d872:	e7e8      	b.n	8d846 <_fclose_r+0x82>
   8d874:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d876:	f7fe fb8f 	bl	8bf98 <__retarget_lock_release_recursive>
   8d87a:	4630      	mov	r0, r6
   8d87c:	bd70      	pop	{r4, r5, r6, pc}
   8d87e:	4628      	mov	r0, r5
   8d880:	6921      	ldr	r1, [r4, #16]
   8d882:	f7fe f8d9 	bl	8ba38 <_free_r>
   8d886:	e7be      	b.n	8d806 <_fclose_r+0x42>
   8d888:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d88a:	f7fe fb85 	bl	8bf98 <__retarget_lock_release_recursive>
   8d88e:	e7d3      	b.n	8d838 <_fclose_r+0x74>

0008d890 <fiprintf>:
   8d890:	b40e      	push	{r1, r2, r3}
   8d892:	b510      	push	{r4, lr}
   8d894:	b083      	sub	sp, #12
   8d896:	ab05      	add	r3, sp, #20
   8d898:	4c06      	ldr	r4, [pc, #24]	; (8d8b4 <fiprintf+0x24>)
   8d89a:	f853 2b04 	ldr.w	r2, [r3], #4
   8d89e:	4601      	mov	r1, r0
   8d8a0:	6820      	ldr	r0, [r4, #0]
   8d8a2:	9301      	str	r3, [sp, #4]
   8d8a4:	f7fb ff6a 	bl	8977c <_vfiprintf_r>
   8d8a8:	b003      	add	sp, #12
   8d8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8d8ae:	b003      	add	sp, #12
   8d8b0:	4770      	bx	lr
   8d8b2:	bf00      	nop
   8d8b4:	20000714 	.word	0x20000714

0008d8b8 <_fstat_r>:
   8d8b8:	b570      	push	{r4, r5, r6, lr}
   8d8ba:	460c      	mov	r4, r1
   8d8bc:	4603      	mov	r3, r0
   8d8be:	2600      	movs	r6, #0
   8d8c0:	4d07      	ldr	r5, [pc, #28]	; (8d8e0 <_fstat_r+0x28>)
   8d8c2:	4620      	mov	r0, r4
   8d8c4:	4611      	mov	r1, r2
   8d8c6:	461c      	mov	r4, r3
   8d8c8:	602e      	str	r6, [r5, #0]
   8d8ca:	f7f9 fbea 	bl	870a2 <_fstat>
   8d8ce:	1c43      	adds	r3, r0, #1
   8d8d0:	d000      	beq.n	8d8d4 <_fstat_r+0x1c>
   8d8d2:	bd70      	pop	{r4, r5, r6, pc}
   8d8d4:	682b      	ldr	r3, [r5, #0]
   8d8d6:	2b00      	cmp	r3, #0
   8d8d8:	d0fb      	beq.n	8d8d2 <_fstat_r+0x1a>
   8d8da:	6023      	str	r3, [r4, #0]
   8d8dc:	bd70      	pop	{r4, r5, r6, pc}
   8d8de:	bf00      	nop
   8d8e0:	20002e28 	.word	0x20002e28

0008d8e4 <_isatty_r>:
   8d8e4:	2200      	movs	r2, #0
   8d8e6:	b538      	push	{r3, r4, r5, lr}
   8d8e8:	4d06      	ldr	r5, [pc, #24]	; (8d904 <_isatty_r+0x20>)
   8d8ea:	4604      	mov	r4, r0
   8d8ec:	4608      	mov	r0, r1
   8d8ee:	602a      	str	r2, [r5, #0]
   8d8f0:	f7f9 fbdc 	bl	870ac <_isatty>
   8d8f4:	1c43      	adds	r3, r0, #1
   8d8f6:	d000      	beq.n	8d8fa <_isatty_r+0x16>
   8d8f8:	bd38      	pop	{r3, r4, r5, pc}
   8d8fa:	682b      	ldr	r3, [r5, #0]
   8d8fc:	2b00      	cmp	r3, #0
   8d8fe:	d0fb      	beq.n	8d8f8 <_isatty_r+0x14>
   8d900:	6023      	str	r3, [r4, #0]
   8d902:	bd38      	pop	{r3, r4, r5, pc}
   8d904:	20002e28 	.word	0x20002e28

0008d908 <_lseek_r>:
   8d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d90a:	460f      	mov	r7, r1
   8d90c:	2600      	movs	r6, #0
   8d90e:	4d08      	ldr	r5, [pc, #32]	; (8d930 <_lseek_r+0x28>)
   8d910:	4611      	mov	r1, r2
   8d912:	4604      	mov	r4, r0
   8d914:	461a      	mov	r2, r3
   8d916:	4638      	mov	r0, r7
   8d918:	602e      	str	r6, [r5, #0]
   8d91a:	f7f9 fbc9 	bl	870b0 <_lseek>
   8d91e:	1c43      	adds	r3, r0, #1
   8d920:	d000      	beq.n	8d924 <_lseek_r+0x1c>
   8d922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d924:	682b      	ldr	r3, [r5, #0]
   8d926:	2b00      	cmp	r3, #0
   8d928:	d0fb      	beq.n	8d922 <_lseek_r+0x1a>
   8d92a:	6023      	str	r3, [r4, #0]
   8d92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d92e:	bf00      	nop
   8d930:	20002e28 	.word	0x20002e28

0008d934 <_read_r>:
   8d934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d936:	460f      	mov	r7, r1
   8d938:	2600      	movs	r6, #0
   8d93a:	4d08      	ldr	r5, [pc, #32]	; (8d95c <_read_r+0x28>)
   8d93c:	4611      	mov	r1, r2
   8d93e:	4604      	mov	r4, r0
   8d940:	461a      	mov	r2, r3
   8d942:	4638      	mov	r0, r7
   8d944:	602e      	str	r6, [r5, #0]
   8d946:	f7f7 fabb 	bl	84ec0 <_read>
   8d94a:	1c43      	adds	r3, r0, #1
   8d94c:	d000      	beq.n	8d950 <_read_r+0x1c>
   8d94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d950:	682b      	ldr	r3, [r5, #0]
   8d952:	2b00      	cmp	r3, #0
   8d954:	d0fb      	beq.n	8d94e <_read_r+0x1a>
   8d956:	6023      	str	r3, [r4, #0]
   8d958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d95a:	bf00      	nop
   8d95c:	20002e28 	.word	0x20002e28

0008d960 <abort>:
   8d960:	2006      	movs	r0, #6
   8d962:	b508      	push	{r3, lr}
   8d964:	f000 f830 	bl	8d9c8 <raise>
   8d968:	2001      	movs	r0, #1
   8d96a:	f7f9 fba3 	bl	870b4 <_exit>
   8d96e:	bf00      	nop

0008d970 <_raise_r>:
   8d970:	291f      	cmp	r1, #31
   8d972:	b538      	push	{r3, r4, r5, lr}
   8d974:	4605      	mov	r5, r0
   8d976:	d821      	bhi.n	8d9bc <_raise_r+0x4c>
   8d978:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8d97c:	460c      	mov	r4, r1
   8d97e:	b16a      	cbz	r2, 8d99c <_raise_r+0x2c>
   8d980:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8d984:	b153      	cbz	r3, 8d99c <_raise_r+0x2c>
   8d986:	2b01      	cmp	r3, #1
   8d988:	d016      	beq.n	8d9b8 <_raise_r+0x48>
   8d98a:	1c59      	adds	r1, r3, #1
   8d98c:	d010      	beq.n	8d9b0 <_raise_r+0x40>
   8d98e:	2500      	movs	r5, #0
   8d990:	4620      	mov	r0, r4
   8d992:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8d996:	4798      	blx	r3
   8d998:	4628      	mov	r0, r5
   8d99a:	bd38      	pop	{r3, r4, r5, pc}
   8d99c:	4628      	mov	r0, r5
   8d99e:	f000 f831 	bl	8da04 <_getpid_r>
   8d9a2:	4622      	mov	r2, r4
   8d9a4:	4601      	mov	r1, r0
   8d9a6:	4628      	mov	r0, r5
   8d9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8d9ac:	f000 b814 	b.w	8d9d8 <_kill_r>
   8d9b0:	2316      	movs	r3, #22
   8d9b2:	2001      	movs	r0, #1
   8d9b4:	602b      	str	r3, [r5, #0]
   8d9b6:	bd38      	pop	{r3, r4, r5, pc}
   8d9b8:	2000      	movs	r0, #0
   8d9ba:	bd38      	pop	{r3, r4, r5, pc}
   8d9bc:	2316      	movs	r3, #22
   8d9be:	f04f 30ff 	mov.w	r0, #4294967295
   8d9c2:	602b      	str	r3, [r5, #0]
   8d9c4:	bd38      	pop	{r3, r4, r5, pc}
   8d9c6:	bf00      	nop

0008d9c8 <raise>:
   8d9c8:	4b02      	ldr	r3, [pc, #8]	; (8d9d4 <raise+0xc>)
   8d9ca:	4601      	mov	r1, r0
   8d9cc:	6818      	ldr	r0, [r3, #0]
   8d9ce:	f7ff bfcf 	b.w	8d970 <_raise_r>
   8d9d2:	bf00      	nop
   8d9d4:	20000714 	.word	0x20000714

0008d9d8 <_kill_r>:
   8d9d8:	b570      	push	{r4, r5, r6, lr}
   8d9da:	460c      	mov	r4, r1
   8d9dc:	4603      	mov	r3, r0
   8d9de:	2600      	movs	r6, #0
   8d9e0:	4d07      	ldr	r5, [pc, #28]	; (8da00 <_kill_r+0x28>)
   8d9e2:	4620      	mov	r0, r4
   8d9e4:	4611      	mov	r1, r2
   8d9e6:	461c      	mov	r4, r3
   8d9e8:	602e      	str	r6, [r5, #0]
   8d9ea:	f7f9 fb6d 	bl	870c8 <_kill>
   8d9ee:	1c43      	adds	r3, r0, #1
   8d9f0:	d000      	beq.n	8d9f4 <_kill_r+0x1c>
   8d9f2:	bd70      	pop	{r4, r5, r6, pc}
   8d9f4:	682b      	ldr	r3, [r5, #0]
   8d9f6:	2b00      	cmp	r3, #0
   8d9f8:	d0fb      	beq.n	8d9f2 <_kill_r+0x1a>
   8d9fa:	6023      	str	r3, [r4, #0]
   8d9fc:	bd70      	pop	{r4, r5, r6, pc}
   8d9fe:	bf00      	nop
   8da00:	20002e28 	.word	0x20002e28

0008da04 <_getpid_r>:
   8da04:	f7f9 bb61 	b.w	870ca <_getpid>

0008da08 <__aeabi_drsub>:
   8da08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8da0c:	e002      	b.n	8da14 <__adddf3>
   8da0e:	bf00      	nop

0008da10 <__aeabi_dsub>:
   8da10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008da14 <__adddf3>:
   8da14:	b530      	push	{r4, r5, lr}
   8da16:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8da1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8da1e:	ea94 0f05 	teq	r4, r5
   8da22:	bf08      	it	eq
   8da24:	ea90 0f02 	teqeq	r0, r2
   8da28:	bf1f      	itttt	ne
   8da2a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8da2e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8da32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8da36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8da3a:	f000 80e2 	beq.w	8dc02 <__adddf3+0x1ee>
   8da3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8da42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8da46:	bfb8      	it	lt
   8da48:	426d      	neglt	r5, r5
   8da4a:	dd0c      	ble.n	8da66 <__adddf3+0x52>
   8da4c:	442c      	add	r4, r5
   8da4e:	ea80 0202 	eor.w	r2, r0, r2
   8da52:	ea81 0303 	eor.w	r3, r1, r3
   8da56:	ea82 0000 	eor.w	r0, r2, r0
   8da5a:	ea83 0101 	eor.w	r1, r3, r1
   8da5e:	ea80 0202 	eor.w	r2, r0, r2
   8da62:	ea81 0303 	eor.w	r3, r1, r3
   8da66:	2d36      	cmp	r5, #54	; 0x36
   8da68:	bf88      	it	hi
   8da6a:	bd30      	pophi	{r4, r5, pc}
   8da6c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8da70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8da74:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8da78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8da7c:	d002      	beq.n	8da84 <__adddf3+0x70>
   8da7e:	4240      	negs	r0, r0
   8da80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8da84:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8da88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8da8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8da90:	d002      	beq.n	8da98 <__adddf3+0x84>
   8da92:	4252      	negs	r2, r2
   8da94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8da98:	ea94 0f05 	teq	r4, r5
   8da9c:	f000 80a7 	beq.w	8dbee <__adddf3+0x1da>
   8daa0:	f1a4 0401 	sub.w	r4, r4, #1
   8daa4:	f1d5 0e20 	rsbs	lr, r5, #32
   8daa8:	db0d      	blt.n	8dac6 <__adddf3+0xb2>
   8daaa:	fa02 fc0e 	lsl.w	ip, r2, lr
   8daae:	fa22 f205 	lsr.w	r2, r2, r5
   8dab2:	1880      	adds	r0, r0, r2
   8dab4:	f141 0100 	adc.w	r1, r1, #0
   8dab8:	fa03 f20e 	lsl.w	r2, r3, lr
   8dabc:	1880      	adds	r0, r0, r2
   8dabe:	fa43 f305 	asr.w	r3, r3, r5
   8dac2:	4159      	adcs	r1, r3
   8dac4:	e00e      	b.n	8dae4 <__adddf3+0xd0>
   8dac6:	f1a5 0520 	sub.w	r5, r5, #32
   8daca:	f10e 0e20 	add.w	lr, lr, #32
   8dace:	2a01      	cmp	r2, #1
   8dad0:	fa03 fc0e 	lsl.w	ip, r3, lr
   8dad4:	bf28      	it	cs
   8dad6:	f04c 0c02 	orrcs.w	ip, ip, #2
   8dada:	fa43 f305 	asr.w	r3, r3, r5
   8dade:	18c0      	adds	r0, r0, r3
   8dae0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8dae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8dae8:	d507      	bpl.n	8dafa <__adddf3+0xe6>
   8daea:	f04f 0e00 	mov.w	lr, #0
   8daee:	f1dc 0c00 	rsbs	ip, ip, #0
   8daf2:	eb7e 0000 	sbcs.w	r0, lr, r0
   8daf6:	eb6e 0101 	sbc.w	r1, lr, r1
   8dafa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8dafe:	d31b      	bcc.n	8db38 <__adddf3+0x124>
   8db00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8db04:	d30c      	bcc.n	8db20 <__adddf3+0x10c>
   8db06:	0849      	lsrs	r1, r1, #1
   8db08:	ea5f 0030 	movs.w	r0, r0, rrx
   8db0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8db10:	f104 0401 	add.w	r4, r4, #1
   8db14:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8db18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8db1c:	f080 809a 	bcs.w	8dc54 <__adddf3+0x240>
   8db20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8db24:	bf08      	it	eq
   8db26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8db2a:	f150 0000 	adcs.w	r0, r0, #0
   8db2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8db32:	ea41 0105 	orr.w	r1, r1, r5
   8db36:	bd30      	pop	{r4, r5, pc}
   8db38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8db3c:	4140      	adcs	r0, r0
   8db3e:	eb41 0101 	adc.w	r1, r1, r1
   8db42:	3c01      	subs	r4, #1
   8db44:	bf28      	it	cs
   8db46:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8db4a:	d2e9      	bcs.n	8db20 <__adddf3+0x10c>
   8db4c:	f091 0f00 	teq	r1, #0
   8db50:	bf04      	itt	eq
   8db52:	4601      	moveq	r1, r0
   8db54:	2000      	moveq	r0, #0
   8db56:	fab1 f381 	clz	r3, r1
   8db5a:	bf08      	it	eq
   8db5c:	3320      	addeq	r3, #32
   8db5e:	f1a3 030b 	sub.w	r3, r3, #11
   8db62:	f1b3 0220 	subs.w	r2, r3, #32
   8db66:	da0c      	bge.n	8db82 <__adddf3+0x16e>
   8db68:	320c      	adds	r2, #12
   8db6a:	dd08      	ble.n	8db7e <__adddf3+0x16a>
   8db6c:	f102 0c14 	add.w	ip, r2, #20
   8db70:	f1c2 020c 	rsb	r2, r2, #12
   8db74:	fa01 f00c 	lsl.w	r0, r1, ip
   8db78:	fa21 f102 	lsr.w	r1, r1, r2
   8db7c:	e00c      	b.n	8db98 <__adddf3+0x184>
   8db7e:	f102 0214 	add.w	r2, r2, #20
   8db82:	bfd8      	it	le
   8db84:	f1c2 0c20 	rsble	ip, r2, #32
   8db88:	fa01 f102 	lsl.w	r1, r1, r2
   8db8c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8db90:	bfdc      	itt	le
   8db92:	ea41 010c 	orrle.w	r1, r1, ip
   8db96:	4090      	lslle	r0, r2
   8db98:	1ae4      	subs	r4, r4, r3
   8db9a:	bfa2      	ittt	ge
   8db9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8dba0:	4329      	orrge	r1, r5
   8dba2:	bd30      	popge	{r4, r5, pc}
   8dba4:	ea6f 0404 	mvn.w	r4, r4
   8dba8:	3c1f      	subs	r4, #31
   8dbaa:	da1c      	bge.n	8dbe6 <__adddf3+0x1d2>
   8dbac:	340c      	adds	r4, #12
   8dbae:	dc0e      	bgt.n	8dbce <__adddf3+0x1ba>
   8dbb0:	f104 0414 	add.w	r4, r4, #20
   8dbb4:	f1c4 0220 	rsb	r2, r4, #32
   8dbb8:	fa20 f004 	lsr.w	r0, r0, r4
   8dbbc:	fa01 f302 	lsl.w	r3, r1, r2
   8dbc0:	ea40 0003 	orr.w	r0, r0, r3
   8dbc4:	fa21 f304 	lsr.w	r3, r1, r4
   8dbc8:	ea45 0103 	orr.w	r1, r5, r3
   8dbcc:	bd30      	pop	{r4, r5, pc}
   8dbce:	f1c4 040c 	rsb	r4, r4, #12
   8dbd2:	f1c4 0220 	rsb	r2, r4, #32
   8dbd6:	fa20 f002 	lsr.w	r0, r0, r2
   8dbda:	fa01 f304 	lsl.w	r3, r1, r4
   8dbde:	ea40 0003 	orr.w	r0, r0, r3
   8dbe2:	4629      	mov	r1, r5
   8dbe4:	bd30      	pop	{r4, r5, pc}
   8dbe6:	fa21 f004 	lsr.w	r0, r1, r4
   8dbea:	4629      	mov	r1, r5
   8dbec:	bd30      	pop	{r4, r5, pc}
   8dbee:	f094 0f00 	teq	r4, #0
   8dbf2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8dbf6:	bf06      	itte	eq
   8dbf8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8dbfc:	3401      	addeq	r4, #1
   8dbfe:	3d01      	subne	r5, #1
   8dc00:	e74e      	b.n	8daa0 <__adddf3+0x8c>
   8dc02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8dc06:	bf18      	it	ne
   8dc08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8dc0c:	d029      	beq.n	8dc62 <__adddf3+0x24e>
   8dc0e:	ea94 0f05 	teq	r4, r5
   8dc12:	bf08      	it	eq
   8dc14:	ea90 0f02 	teqeq	r0, r2
   8dc18:	d005      	beq.n	8dc26 <__adddf3+0x212>
   8dc1a:	ea54 0c00 	orrs.w	ip, r4, r0
   8dc1e:	bf04      	itt	eq
   8dc20:	4619      	moveq	r1, r3
   8dc22:	4610      	moveq	r0, r2
   8dc24:	bd30      	pop	{r4, r5, pc}
   8dc26:	ea91 0f03 	teq	r1, r3
   8dc2a:	bf1e      	ittt	ne
   8dc2c:	2100      	movne	r1, #0
   8dc2e:	2000      	movne	r0, #0
   8dc30:	bd30      	popne	{r4, r5, pc}
   8dc32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8dc36:	d105      	bne.n	8dc44 <__adddf3+0x230>
   8dc38:	0040      	lsls	r0, r0, #1
   8dc3a:	4149      	adcs	r1, r1
   8dc3c:	bf28      	it	cs
   8dc3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8dc42:	bd30      	pop	{r4, r5, pc}
   8dc44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8dc48:	bf3c      	itt	cc
   8dc4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8dc4e:	bd30      	popcc	{r4, r5, pc}
   8dc50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8dc54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8dc58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8dc5c:	f04f 0000 	mov.w	r0, #0
   8dc60:	bd30      	pop	{r4, r5, pc}
   8dc62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8dc66:	bf1a      	itte	ne
   8dc68:	4619      	movne	r1, r3
   8dc6a:	4610      	movne	r0, r2
   8dc6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8dc70:	bf1c      	itt	ne
   8dc72:	460b      	movne	r3, r1
   8dc74:	4602      	movne	r2, r0
   8dc76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8dc7a:	bf06      	itte	eq
   8dc7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8dc80:	ea91 0f03 	teqeq	r1, r3
   8dc84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8dc88:	bd30      	pop	{r4, r5, pc}
   8dc8a:	bf00      	nop

0008dc8c <__aeabi_ui2d>:
   8dc8c:	f090 0f00 	teq	r0, #0
   8dc90:	bf04      	itt	eq
   8dc92:	2100      	moveq	r1, #0
   8dc94:	4770      	bxeq	lr
   8dc96:	b530      	push	{r4, r5, lr}
   8dc98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dc9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8dca0:	f04f 0500 	mov.w	r5, #0
   8dca4:	f04f 0100 	mov.w	r1, #0
   8dca8:	e750      	b.n	8db4c <__adddf3+0x138>
   8dcaa:	bf00      	nop

0008dcac <__aeabi_i2d>:
   8dcac:	f090 0f00 	teq	r0, #0
   8dcb0:	bf04      	itt	eq
   8dcb2:	2100      	moveq	r1, #0
   8dcb4:	4770      	bxeq	lr
   8dcb6:	b530      	push	{r4, r5, lr}
   8dcb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dcbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8dcc0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8dcc4:	bf48      	it	mi
   8dcc6:	4240      	negmi	r0, r0
   8dcc8:	f04f 0100 	mov.w	r1, #0
   8dccc:	e73e      	b.n	8db4c <__adddf3+0x138>
   8dcce:	bf00      	nop

0008dcd0 <__aeabi_f2d>:
   8dcd0:	0042      	lsls	r2, r0, #1
   8dcd2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8dcd6:	ea4f 0131 	mov.w	r1, r1, rrx
   8dcda:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8dcde:	bf1f      	itttt	ne
   8dce0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8dce4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8dce8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8dcec:	4770      	bxne	lr
   8dcee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8dcf2:	bf08      	it	eq
   8dcf4:	4770      	bxeq	lr
   8dcf6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8dcfa:	bf04      	itt	eq
   8dcfc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8dd00:	4770      	bxeq	lr
   8dd02:	b530      	push	{r4, r5, lr}
   8dd04:	f44f 7460 	mov.w	r4, #896	; 0x380
   8dd08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8dd0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8dd10:	e71c      	b.n	8db4c <__adddf3+0x138>
   8dd12:	bf00      	nop

0008dd14 <__aeabi_ul2d>:
   8dd14:	ea50 0201 	orrs.w	r2, r0, r1
   8dd18:	bf08      	it	eq
   8dd1a:	4770      	bxeq	lr
   8dd1c:	b530      	push	{r4, r5, lr}
   8dd1e:	f04f 0500 	mov.w	r5, #0
   8dd22:	e00a      	b.n	8dd3a <__aeabi_l2d+0x16>

0008dd24 <__aeabi_l2d>:
   8dd24:	ea50 0201 	orrs.w	r2, r0, r1
   8dd28:	bf08      	it	eq
   8dd2a:	4770      	bxeq	lr
   8dd2c:	b530      	push	{r4, r5, lr}
   8dd2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8dd32:	d502      	bpl.n	8dd3a <__aeabi_l2d+0x16>
   8dd34:	4240      	negs	r0, r0
   8dd36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8dd3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dd3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8dd42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8dd46:	f43f aed8 	beq.w	8dafa <__adddf3+0xe6>
   8dd4a:	f04f 0203 	mov.w	r2, #3
   8dd4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8dd52:	bf18      	it	ne
   8dd54:	3203      	addne	r2, #3
   8dd56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8dd5a:	bf18      	it	ne
   8dd5c:	3203      	addne	r2, #3
   8dd5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8dd62:	f1c2 0320 	rsb	r3, r2, #32
   8dd66:	fa00 fc03 	lsl.w	ip, r0, r3
   8dd6a:	fa20 f002 	lsr.w	r0, r0, r2
   8dd6e:	fa01 fe03 	lsl.w	lr, r1, r3
   8dd72:	ea40 000e 	orr.w	r0, r0, lr
   8dd76:	fa21 f102 	lsr.w	r1, r1, r2
   8dd7a:	4414      	add	r4, r2
   8dd7c:	e6bd      	b.n	8dafa <__adddf3+0xe6>
   8dd7e:	bf00      	nop

0008dd80 <__aeabi_dmul>:
   8dd80:	b570      	push	{r4, r5, r6, lr}
   8dd82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8dd86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8dd8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8dd8e:	bf1d      	ittte	ne
   8dd90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8dd94:	ea94 0f0c 	teqne	r4, ip
   8dd98:	ea95 0f0c 	teqne	r5, ip
   8dd9c:	f000 f8de 	bleq	8df5c <__aeabi_dmul+0x1dc>
   8dda0:	442c      	add	r4, r5
   8dda2:	ea81 0603 	eor.w	r6, r1, r3
   8dda6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8ddaa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8ddae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8ddb2:	bf18      	it	ne
   8ddb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8ddb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8ddbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8ddc0:	d038      	beq.n	8de34 <__aeabi_dmul+0xb4>
   8ddc2:	fba0 ce02 	umull	ip, lr, r0, r2
   8ddc6:	f04f 0500 	mov.w	r5, #0
   8ddca:	fbe1 e502 	umlal	lr, r5, r1, r2
   8ddce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8ddd2:	fbe0 e503 	umlal	lr, r5, r0, r3
   8ddd6:	f04f 0600 	mov.w	r6, #0
   8ddda:	fbe1 5603 	umlal	r5, r6, r1, r3
   8ddde:	f09c 0f00 	teq	ip, #0
   8dde2:	bf18      	it	ne
   8dde4:	f04e 0e01 	orrne.w	lr, lr, #1
   8dde8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8ddec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8ddf0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8ddf4:	d204      	bcs.n	8de00 <__aeabi_dmul+0x80>
   8ddf6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8ddfa:	416d      	adcs	r5, r5
   8ddfc:	eb46 0606 	adc.w	r6, r6, r6
   8de00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8de04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8de08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8de0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8de10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8de14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8de18:	bf88      	it	hi
   8de1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8de1e:	d81e      	bhi.n	8de5e <__aeabi_dmul+0xde>
   8de20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8de24:	bf08      	it	eq
   8de26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8de2a:	f150 0000 	adcs.w	r0, r0, #0
   8de2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8de32:	bd70      	pop	{r4, r5, r6, pc}
   8de34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8de38:	ea46 0101 	orr.w	r1, r6, r1
   8de3c:	ea40 0002 	orr.w	r0, r0, r2
   8de40:	ea81 0103 	eor.w	r1, r1, r3
   8de44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8de48:	bfc2      	ittt	gt
   8de4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8de4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8de52:	bd70      	popgt	{r4, r5, r6, pc}
   8de54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8de58:	f04f 0e00 	mov.w	lr, #0
   8de5c:	3c01      	subs	r4, #1
   8de5e:	f300 80ab 	bgt.w	8dfb8 <__aeabi_dmul+0x238>
   8de62:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8de66:	bfde      	ittt	le
   8de68:	2000      	movle	r0, #0
   8de6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8de6e:	bd70      	pople	{r4, r5, r6, pc}
   8de70:	f1c4 0400 	rsb	r4, r4, #0
   8de74:	3c20      	subs	r4, #32
   8de76:	da35      	bge.n	8dee4 <__aeabi_dmul+0x164>
   8de78:	340c      	adds	r4, #12
   8de7a:	dc1b      	bgt.n	8deb4 <__aeabi_dmul+0x134>
   8de7c:	f104 0414 	add.w	r4, r4, #20
   8de80:	f1c4 0520 	rsb	r5, r4, #32
   8de84:	fa00 f305 	lsl.w	r3, r0, r5
   8de88:	fa20 f004 	lsr.w	r0, r0, r4
   8de8c:	fa01 f205 	lsl.w	r2, r1, r5
   8de90:	ea40 0002 	orr.w	r0, r0, r2
   8de94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8de98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8de9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8dea0:	fa21 f604 	lsr.w	r6, r1, r4
   8dea4:	eb42 0106 	adc.w	r1, r2, r6
   8dea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8deac:	bf08      	it	eq
   8deae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8deb2:	bd70      	pop	{r4, r5, r6, pc}
   8deb4:	f1c4 040c 	rsb	r4, r4, #12
   8deb8:	f1c4 0520 	rsb	r5, r4, #32
   8debc:	fa00 f304 	lsl.w	r3, r0, r4
   8dec0:	fa20 f005 	lsr.w	r0, r0, r5
   8dec4:	fa01 f204 	lsl.w	r2, r1, r4
   8dec8:	ea40 0002 	orr.w	r0, r0, r2
   8decc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8ded0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8ded4:	f141 0100 	adc.w	r1, r1, #0
   8ded8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8dedc:	bf08      	it	eq
   8dede:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8dee2:	bd70      	pop	{r4, r5, r6, pc}
   8dee4:	f1c4 0520 	rsb	r5, r4, #32
   8dee8:	fa00 f205 	lsl.w	r2, r0, r5
   8deec:	ea4e 0e02 	orr.w	lr, lr, r2
   8def0:	fa20 f304 	lsr.w	r3, r0, r4
   8def4:	fa01 f205 	lsl.w	r2, r1, r5
   8def8:	ea43 0302 	orr.w	r3, r3, r2
   8defc:	fa21 f004 	lsr.w	r0, r1, r4
   8df00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8df04:	fa21 f204 	lsr.w	r2, r1, r4
   8df08:	ea20 0002 	bic.w	r0, r0, r2
   8df0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8df10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8df14:	bf08      	it	eq
   8df16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8df1a:	bd70      	pop	{r4, r5, r6, pc}
   8df1c:	f094 0f00 	teq	r4, #0
   8df20:	d10f      	bne.n	8df42 <__aeabi_dmul+0x1c2>
   8df22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8df26:	0040      	lsls	r0, r0, #1
   8df28:	eb41 0101 	adc.w	r1, r1, r1
   8df2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8df30:	bf08      	it	eq
   8df32:	3c01      	subeq	r4, #1
   8df34:	d0f7      	beq.n	8df26 <__aeabi_dmul+0x1a6>
   8df36:	ea41 0106 	orr.w	r1, r1, r6
   8df3a:	f095 0f00 	teq	r5, #0
   8df3e:	bf18      	it	ne
   8df40:	4770      	bxne	lr
   8df42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8df46:	0052      	lsls	r2, r2, #1
   8df48:	eb43 0303 	adc.w	r3, r3, r3
   8df4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8df50:	bf08      	it	eq
   8df52:	3d01      	subeq	r5, #1
   8df54:	d0f7      	beq.n	8df46 <__aeabi_dmul+0x1c6>
   8df56:	ea43 0306 	orr.w	r3, r3, r6
   8df5a:	4770      	bx	lr
   8df5c:	ea94 0f0c 	teq	r4, ip
   8df60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8df64:	bf18      	it	ne
   8df66:	ea95 0f0c 	teqne	r5, ip
   8df6a:	d00c      	beq.n	8df86 <__aeabi_dmul+0x206>
   8df6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8df70:	bf18      	it	ne
   8df72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8df76:	d1d1      	bne.n	8df1c <__aeabi_dmul+0x19c>
   8df78:	ea81 0103 	eor.w	r1, r1, r3
   8df7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8df80:	f04f 0000 	mov.w	r0, #0
   8df84:	bd70      	pop	{r4, r5, r6, pc}
   8df86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8df8a:	bf06      	itte	eq
   8df8c:	4610      	moveq	r0, r2
   8df8e:	4619      	moveq	r1, r3
   8df90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8df94:	d019      	beq.n	8dfca <__aeabi_dmul+0x24a>
   8df96:	ea94 0f0c 	teq	r4, ip
   8df9a:	d102      	bne.n	8dfa2 <__aeabi_dmul+0x222>
   8df9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8dfa0:	d113      	bne.n	8dfca <__aeabi_dmul+0x24a>
   8dfa2:	ea95 0f0c 	teq	r5, ip
   8dfa6:	d105      	bne.n	8dfb4 <__aeabi_dmul+0x234>
   8dfa8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8dfac:	bf1c      	itt	ne
   8dfae:	4610      	movne	r0, r2
   8dfb0:	4619      	movne	r1, r3
   8dfb2:	d10a      	bne.n	8dfca <__aeabi_dmul+0x24a>
   8dfb4:	ea81 0103 	eor.w	r1, r1, r3
   8dfb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8dfbc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8dfc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8dfc4:	f04f 0000 	mov.w	r0, #0
   8dfc8:	bd70      	pop	{r4, r5, r6, pc}
   8dfca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8dfce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8dfd2:	bd70      	pop	{r4, r5, r6, pc}

0008dfd4 <__aeabi_ddiv>:
   8dfd4:	b570      	push	{r4, r5, r6, lr}
   8dfd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8dfda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8dfde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8dfe2:	bf1d      	ittte	ne
   8dfe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8dfe8:	ea94 0f0c 	teqne	r4, ip
   8dfec:	ea95 0f0c 	teqne	r5, ip
   8dff0:	f000 f8a7 	bleq	8e142 <__aeabi_ddiv+0x16e>
   8dff4:	eba4 0405 	sub.w	r4, r4, r5
   8dff8:	ea81 0e03 	eor.w	lr, r1, r3
   8dffc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e000:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8e004:	f000 8088 	beq.w	8e118 <__aeabi_ddiv+0x144>
   8e008:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8e00c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8e010:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8e014:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8e018:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8e01c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8e020:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8e024:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8e028:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8e02c:	429d      	cmp	r5, r3
   8e02e:	bf08      	it	eq
   8e030:	4296      	cmpeq	r6, r2
   8e032:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8e036:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8e03a:	d202      	bcs.n	8e042 <__aeabi_ddiv+0x6e>
   8e03c:	085b      	lsrs	r3, r3, #1
   8e03e:	ea4f 0232 	mov.w	r2, r2, rrx
   8e042:	1ab6      	subs	r6, r6, r2
   8e044:	eb65 0503 	sbc.w	r5, r5, r3
   8e048:	085b      	lsrs	r3, r3, #1
   8e04a:	ea4f 0232 	mov.w	r2, r2, rrx
   8e04e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8e052:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8e056:	ebb6 0e02 	subs.w	lr, r6, r2
   8e05a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e05e:	bf22      	ittt	cs
   8e060:	1ab6      	subcs	r6, r6, r2
   8e062:	4675      	movcs	r5, lr
   8e064:	ea40 000c 	orrcs.w	r0, r0, ip
   8e068:	085b      	lsrs	r3, r3, #1
   8e06a:	ea4f 0232 	mov.w	r2, r2, rrx
   8e06e:	ebb6 0e02 	subs.w	lr, r6, r2
   8e072:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e076:	bf22      	ittt	cs
   8e078:	1ab6      	subcs	r6, r6, r2
   8e07a:	4675      	movcs	r5, lr
   8e07c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8e080:	085b      	lsrs	r3, r3, #1
   8e082:	ea4f 0232 	mov.w	r2, r2, rrx
   8e086:	ebb6 0e02 	subs.w	lr, r6, r2
   8e08a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e08e:	bf22      	ittt	cs
   8e090:	1ab6      	subcs	r6, r6, r2
   8e092:	4675      	movcs	r5, lr
   8e094:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8e098:	085b      	lsrs	r3, r3, #1
   8e09a:	ea4f 0232 	mov.w	r2, r2, rrx
   8e09e:	ebb6 0e02 	subs.w	lr, r6, r2
   8e0a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e0a6:	bf22      	ittt	cs
   8e0a8:	1ab6      	subcs	r6, r6, r2
   8e0aa:	4675      	movcs	r5, lr
   8e0ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8e0b0:	ea55 0e06 	orrs.w	lr, r5, r6
   8e0b4:	d018      	beq.n	8e0e8 <__aeabi_ddiv+0x114>
   8e0b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8e0ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8e0be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8e0c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8e0c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8e0ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8e0ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8e0d2:	d1c0      	bne.n	8e056 <__aeabi_ddiv+0x82>
   8e0d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e0d8:	d10b      	bne.n	8e0f2 <__aeabi_ddiv+0x11e>
   8e0da:	ea41 0100 	orr.w	r1, r1, r0
   8e0de:	f04f 0000 	mov.w	r0, #0
   8e0e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8e0e6:	e7b6      	b.n	8e056 <__aeabi_ddiv+0x82>
   8e0e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e0ec:	bf04      	itt	eq
   8e0ee:	4301      	orreq	r1, r0
   8e0f0:	2000      	moveq	r0, #0
   8e0f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8e0f6:	bf88      	it	hi
   8e0f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8e0fc:	f63f aeaf 	bhi.w	8de5e <__aeabi_dmul+0xde>
   8e100:	ebb5 0c03 	subs.w	ip, r5, r3
   8e104:	bf04      	itt	eq
   8e106:	ebb6 0c02 	subseq.w	ip, r6, r2
   8e10a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8e10e:	f150 0000 	adcs.w	r0, r0, #0
   8e112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8e116:	bd70      	pop	{r4, r5, r6, pc}
   8e118:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8e11c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8e120:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8e124:	bfc2      	ittt	gt
   8e126:	ebd4 050c 	rsbsgt	r5, r4, ip
   8e12a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8e12e:	bd70      	popgt	{r4, r5, r6, pc}
   8e130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8e134:	f04f 0e00 	mov.w	lr, #0
   8e138:	3c01      	subs	r4, #1
   8e13a:	e690      	b.n	8de5e <__aeabi_dmul+0xde>
   8e13c:	ea45 0e06 	orr.w	lr, r5, r6
   8e140:	e68d      	b.n	8de5e <__aeabi_dmul+0xde>
   8e142:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8e146:	ea94 0f0c 	teq	r4, ip
   8e14a:	bf08      	it	eq
   8e14c:	ea95 0f0c 	teqeq	r5, ip
   8e150:	f43f af3b 	beq.w	8dfca <__aeabi_dmul+0x24a>
   8e154:	ea94 0f0c 	teq	r4, ip
   8e158:	d10a      	bne.n	8e170 <__aeabi_ddiv+0x19c>
   8e15a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8e15e:	f47f af34 	bne.w	8dfca <__aeabi_dmul+0x24a>
   8e162:	ea95 0f0c 	teq	r5, ip
   8e166:	f47f af25 	bne.w	8dfb4 <__aeabi_dmul+0x234>
   8e16a:	4610      	mov	r0, r2
   8e16c:	4619      	mov	r1, r3
   8e16e:	e72c      	b.n	8dfca <__aeabi_dmul+0x24a>
   8e170:	ea95 0f0c 	teq	r5, ip
   8e174:	d106      	bne.n	8e184 <__aeabi_ddiv+0x1b0>
   8e176:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e17a:	f43f aefd 	beq.w	8df78 <__aeabi_dmul+0x1f8>
   8e17e:	4610      	mov	r0, r2
   8e180:	4619      	mov	r1, r3
   8e182:	e722      	b.n	8dfca <__aeabi_dmul+0x24a>
   8e184:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e188:	bf18      	it	ne
   8e18a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e18e:	f47f aec5 	bne.w	8df1c <__aeabi_dmul+0x19c>
   8e192:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8e196:	f47f af0d 	bne.w	8dfb4 <__aeabi_dmul+0x234>
   8e19a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8e19e:	f47f aeeb 	bne.w	8df78 <__aeabi_dmul+0x1f8>
   8e1a2:	e712      	b.n	8dfca <__aeabi_dmul+0x24a>

0008e1a4 <__gedf2>:
   8e1a4:	f04f 3cff 	mov.w	ip, #4294967295
   8e1a8:	e006      	b.n	8e1b8 <__cmpdf2+0x4>
   8e1aa:	bf00      	nop

0008e1ac <__ledf2>:
   8e1ac:	f04f 0c01 	mov.w	ip, #1
   8e1b0:	e002      	b.n	8e1b8 <__cmpdf2+0x4>
   8e1b2:	bf00      	nop

0008e1b4 <__cmpdf2>:
   8e1b4:	f04f 0c01 	mov.w	ip, #1
   8e1b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   8e1bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e1c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e1c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e1c8:	bf18      	it	ne
   8e1ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8e1ce:	d01b      	beq.n	8e208 <__cmpdf2+0x54>
   8e1d0:	b001      	add	sp, #4
   8e1d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8e1d6:	bf0c      	ite	eq
   8e1d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8e1dc:	ea91 0f03 	teqne	r1, r3
   8e1e0:	bf02      	ittt	eq
   8e1e2:	ea90 0f02 	teqeq	r0, r2
   8e1e6:	2000      	moveq	r0, #0
   8e1e8:	4770      	bxeq	lr
   8e1ea:	f110 0f00 	cmn.w	r0, #0
   8e1ee:	ea91 0f03 	teq	r1, r3
   8e1f2:	bf58      	it	pl
   8e1f4:	4299      	cmppl	r1, r3
   8e1f6:	bf08      	it	eq
   8e1f8:	4290      	cmpeq	r0, r2
   8e1fa:	bf2c      	ite	cs
   8e1fc:	17d8      	asrcs	r0, r3, #31
   8e1fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8e202:	f040 0001 	orr.w	r0, r0, #1
   8e206:	4770      	bx	lr
   8e208:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e20c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e210:	d102      	bne.n	8e218 <__cmpdf2+0x64>
   8e212:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e216:	d107      	bne.n	8e228 <__cmpdf2+0x74>
   8e218:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e21c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e220:	d1d6      	bne.n	8e1d0 <__cmpdf2+0x1c>
   8e222:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e226:	d0d3      	beq.n	8e1d0 <__cmpdf2+0x1c>
   8e228:	f85d 0b04 	ldr.w	r0, [sp], #4
   8e22c:	4770      	bx	lr
   8e22e:	bf00      	nop

0008e230 <__aeabi_cdrcmple>:
   8e230:	4684      	mov	ip, r0
   8e232:	4610      	mov	r0, r2
   8e234:	4662      	mov	r2, ip
   8e236:	468c      	mov	ip, r1
   8e238:	4619      	mov	r1, r3
   8e23a:	4663      	mov	r3, ip
   8e23c:	e000      	b.n	8e240 <__aeabi_cdcmpeq>
   8e23e:	bf00      	nop

0008e240 <__aeabi_cdcmpeq>:
   8e240:	b501      	push	{r0, lr}
   8e242:	f7ff ffb7 	bl	8e1b4 <__cmpdf2>
   8e246:	2800      	cmp	r0, #0
   8e248:	bf48      	it	mi
   8e24a:	f110 0f00 	cmnmi.w	r0, #0
   8e24e:	bd01      	pop	{r0, pc}

0008e250 <__aeabi_dcmpeq>:
   8e250:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e254:	f7ff fff4 	bl	8e240 <__aeabi_cdcmpeq>
   8e258:	bf0c      	ite	eq
   8e25a:	2001      	moveq	r0, #1
   8e25c:	2000      	movne	r0, #0
   8e25e:	f85d fb08 	ldr.w	pc, [sp], #8
   8e262:	bf00      	nop

0008e264 <__aeabi_dcmplt>:
   8e264:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e268:	f7ff ffea 	bl	8e240 <__aeabi_cdcmpeq>
   8e26c:	bf34      	ite	cc
   8e26e:	2001      	movcc	r0, #1
   8e270:	2000      	movcs	r0, #0
   8e272:	f85d fb08 	ldr.w	pc, [sp], #8
   8e276:	bf00      	nop

0008e278 <__aeabi_dcmple>:
   8e278:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e27c:	f7ff ffe0 	bl	8e240 <__aeabi_cdcmpeq>
   8e280:	bf94      	ite	ls
   8e282:	2001      	movls	r0, #1
   8e284:	2000      	movhi	r0, #0
   8e286:	f85d fb08 	ldr.w	pc, [sp], #8
   8e28a:	bf00      	nop

0008e28c <__aeabi_dcmpge>:
   8e28c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e290:	f7ff ffce 	bl	8e230 <__aeabi_cdrcmple>
   8e294:	bf94      	ite	ls
   8e296:	2001      	movls	r0, #1
   8e298:	2000      	movhi	r0, #0
   8e29a:	f85d fb08 	ldr.w	pc, [sp], #8
   8e29e:	bf00      	nop

0008e2a0 <__aeabi_dcmpgt>:
   8e2a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e2a4:	f7ff ffc4 	bl	8e230 <__aeabi_cdrcmple>
   8e2a8:	bf34      	ite	cc
   8e2aa:	2001      	movcc	r0, #1
   8e2ac:	2000      	movcs	r0, #0
   8e2ae:	f85d fb08 	ldr.w	pc, [sp], #8
   8e2b2:	bf00      	nop

0008e2b4 <__aeabi_dcmpun>:
   8e2b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e2b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e2bc:	d102      	bne.n	8e2c4 <__aeabi_dcmpun+0x10>
   8e2be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e2c2:	d10a      	bne.n	8e2da <__aeabi_dcmpun+0x26>
   8e2c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e2c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e2cc:	d102      	bne.n	8e2d4 <__aeabi_dcmpun+0x20>
   8e2ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e2d2:	d102      	bne.n	8e2da <__aeabi_dcmpun+0x26>
   8e2d4:	f04f 0000 	mov.w	r0, #0
   8e2d8:	4770      	bx	lr
   8e2da:	f04f 0001 	mov.w	r0, #1
   8e2de:	4770      	bx	lr

0008e2e0 <__aeabi_d2iz>:
   8e2e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8e2e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8e2e8:	d215      	bcs.n	8e316 <__aeabi_d2iz+0x36>
   8e2ea:	d511      	bpl.n	8e310 <__aeabi_d2iz+0x30>
   8e2ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8e2f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8e2f4:	d912      	bls.n	8e31c <__aeabi_d2iz+0x3c>
   8e2f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8e2fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8e2fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8e302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8e306:	fa23 f002 	lsr.w	r0, r3, r2
   8e30a:	bf18      	it	ne
   8e30c:	4240      	negne	r0, r0
   8e30e:	4770      	bx	lr
   8e310:	f04f 0000 	mov.w	r0, #0
   8e314:	4770      	bx	lr
   8e316:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8e31a:	d105      	bne.n	8e328 <__aeabi_d2iz+0x48>
   8e31c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8e320:	bf08      	it	eq
   8e322:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8e326:	4770      	bx	lr
   8e328:	f04f 0000 	mov.w	r0, #0
   8e32c:	4770      	bx	lr
   8e32e:	bf00      	nop
   8e330:	706d696c 	.word	0x706d696c
   8e334:	006e696b 	.word	0x006e696b
   8e338:	00000000 	.word	0x00000000
   8e33c:	00000174 	.word	0x00000174
   8e340:	0000022e 	.word	0x0000022e
   8e344:	000002e8 	.word	0x000002e8
   8e348:	0000045c 	.word	0x0000045c
   8e34c:	000005d0 	.word	0x000005d0
   8e350:	00000744 	.word	0x00000744
	...
   8e35c:	00000200 	.word	0x00000200
   8e360:	00000300 	.word	0x00000300
   8e364:	00000400 	.word	0x00000400
   8e368:	00000600 	.word	0x00000600
   8e36c:	00000800 	.word	0x00000800
	...
   8e37c:	00000001 	.word	0x00000001
   8e380:	00000002 	.word	0x00000002
   8e384:	00000004 	.word	0x00000004
   8e388:	00000008 	.word	0x00000008
   8e38c:	00000010 	.word	0x00000010
   8e390:	00000020 	.word	0x00000020
   8e394:	00000040 	.word	0x00000040
   8e398:	0000000c 	.word	0x0000000c
   8e39c:	00000014 	.word	0x00000014
   8e3a0:	000a7825 	.word	0x000a7825
   8e3a4:	20525441 	.word	0x20525441
   8e3a8:	20642528 	.word	0x20642528
   8e3ac:	296e656c 	.word	0x296e656c
   8e3b0:	0000203a 	.word	0x0000203a
   8e3b4:	78323025 	.word	0x78323025
   8e3b8:	00000020 	.word	0x00000020
   8e3bc:	50525641 	.word	0x50525641
   8e3c0:	3a474f52 	.word	0x3a474f52
   8e3c4:	79615020 	.word	0x79615020
   8e3c8:	64616f6c 	.word	0x64616f6c
   8e3cc:	7a697320 	.word	0x7a697320
   8e3d0:	203d2065 	.word	0x203d2065
   8e3d4:	202c6425 	.word	0x202c6425
   8e3d8:	6f727265 	.word	0x6f727265
   8e3dc:	0a3f2172 	.word	0x0a3f2172
   8e3e0:	00000000 	.word	0x00000000
   8e3e4:	50525641 	.word	0x50525641
   8e3e8:	3a474f52 	.word	0x3a474f52
   8e3ec:	746e4520 	.word	0x746e4520
   8e3f0:	49207265 	.word	0x49207265
   8e3f4:	4d205053 	.word	0x4d205053
   8e3f8:	3a65646f 	.word	0x3a65646f
   8e3fc:	0a782520 	.word	0x0a782520
   8e400:	00000000 	.word	0x00000000
   8e404:	50525641 	.word	0x50525641
   8e408:	3a474f52 	.word	0x3a474f52
   8e40c:	61724520 	.word	0x61724520
   8e410:	203a6573 	.word	0x203a6573
   8e414:	6c796150 	.word	0x6c796150
   8e418:	2064616f 	.word	0x2064616f
   8e41c:	657a6973 	.word	0x657a6973
   8e420:	25203d20 	.word	0x25203d20
   8e424:	65202c64 	.word	0x65202c64
   8e428:	726f7272 	.word	0x726f7272
   8e42c:	000a3f21 	.word	0x000a3f21
   8e430:	494c5743 	.word	0x494c5743
   8e434:	415f4554 	.word	0x415f4554
   8e438:	53495256 	.word	0x53495256
   8e43c:	00000050 	.word	0x00000050
   8e440:	50525641 	.word	0x50525641
   8e444:	3a474f52 	.word	0x3a474f52
   8e448:	64644120 	.word	0x64644120
   8e44c:	73736572 	.word	0x73736572
   8e450:	25203d20 	.word	0x25203d20
   8e454:	0a783230 	.word	0x0a783230
   8e458:	00000000 	.word	0x00000000
   8e45c:	62616e45 	.word	0x62616e45
   8e460:	676e696c 	.word	0x676e696c
   8e464:	41535520 	.word	0x41535520
   8e468:	0a305452 	.word	0x0a305452
   8e46c:	00000000 	.word	0x00000000
   8e470:	3a525245 	.word	0x3a525245
   8e474:	766e4920 	.word	0x766e4920
   8e478:	64696c61 	.word	0x64696c61
   8e47c:	41535520 	.word	0x41535520
   8e480:	43205452 	.word	0x43205452
   8e484:	69666e6f 	.word	0x69666e6f
   8e488:	61727567 	.word	0x61727567
   8e48c:	6e6f6974 	.word	0x6e6f6974
   8e490:	63617020 	.word	0x63617020
   8e494:	3f74656b 	.word	0x3f74656b
   8e498:	0000000a 	.word	0x0000000a

0008e49c <BOS_DESC>:
   8e49c:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8e4ac:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8e4c8:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8e4d8:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8e4e8:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8e4f8:	74697845 20676e69 68746977 61747320     Exiting with sta
   8e508:	20737574 0a2e6425 00000000 78383025     tus %d......%08x
   8e518:	00000000 2072614d 32203831 00313230     ....Mar 18 2021.
   8e528:	323a3531 38303a37 00000000 70696843     15:27:08....Chip
   8e538:	73696857 65726570 694c2d72 4f206574     Whisperer-Lite O
   8e548:	6e696c6e 46202e65 776d7269 20657261     nline. Firmware 
   8e558:	6c697562 25203a64 73252f73 0000000a     build: %s/%s....
   8e568:	69726553 6e206c61 65626d75 25203a72     Serial number: %
   8e578:	00000a73 74746553 20676e69 46207075     s...Setting up F
   8e588:	20414750 6d6d6f43 63696e75 6f697461     PGA Communicatio
   8e598:	00000a6e 6e657645 6f4c2074 4520706f     n...Event Loop E
   8e5a8:	7265746e 202c6465 74696177 2e676e69     ntered, waiting.
   8e5b8:	000a2e2e                                ....

0008e5bc <_global_impure_ptr>:
   8e5bc:	20000718 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8e5cc:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8e5dc:	66656463 00000000 33323130 37363534     cdef....01234567
   8e5ec:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8e5fc:	0000296c 00000030                       l)..0...

0008e604 <blanks.7335>:
   8e604:	20202020 20202020 20202020 20202020                     

0008e614 <zeroes.7336>:
   8e614:	30303030 30303030 30303030 30303030     0000000000000000

0008e624 <blanks.7328>:
   8e624:	20202020 20202020 20202020 20202020                     

0008e634 <zeroes.7329>:
   8e634:	30303030 30303030 30303030 30303030     0000000000000000
   8e644:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8e654:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8e664:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8e674:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8e684:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8e694:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8e6a4:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8e6b4:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8e6c4:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8e6d4:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8e6e4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8e6f4:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8e704:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8e714:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8e724:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8e734:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8e744:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8e754:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8e764:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8e774:	00000000                                ....

0008e778 <__mprec_bigtens>:
   8e778:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8e788:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8e798:	7f73bf3c 75154fdd                       <.s..O.u

0008e7a0 <__mprec_tens>:
   8e7a0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8e7b0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8e7c0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8e7d0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8e7e0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8e7f0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8e800:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8e810:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8e820:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8e830:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8e840:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8e850:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8e860:	79d99db4 44ea7843                       ...yCx.D

0008e868 <p05.6122>:
   8e868:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8e878:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8e888:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8e898:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8e8a8:	2520656e 25732564 00000a73              ne %d%s%s...

0008e8b4 <_ctype_>:
   8e8b4:	20202000 20202020 28282020 20282828     .         ((((( 
   8e8c4:	20202020 20202020 20202020 20202020                     
   8e8d4:	10108820 10101010 10101010 10101010      ...............
   8e8e4:	04040410 04040404 10040404 10101010     ................
   8e8f4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8e904:	01010101 01010101 01010101 10101010     ................
   8e914:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8e924:	02020202 02020202 02020202 10101010     ................
   8e934:	00000020 00000000 00000000 00000000      ...............
	...

0008e9b8 <_init>:
   8e9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8e9ba:	bf00      	nop
   8e9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8e9be:	bc08      	pop	{r3}
   8e9c0:	469e      	mov	lr, r3
   8e9c2:	4770      	bx	lr

0008e9c4 <__init_array_start>:
   8e9c4:	0008a601 	.word	0x0008a601

0008e9c8 <__frame_dummy_init_array_entry>:
   8e9c8:	000800e1                                ....

0008e9cc <_fini>:
   8e9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8e9ce:	bf00      	nop
   8e9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8e9d2:	bc08      	pop	{r3}
   8e9d4:	469e      	mov	lr, r3
   8e9d6:	4770      	bx	lr

0008e9d8 <__do_global_dtors_aux_fini_array_entry>:
   8e9d8:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	200006ec 	.word	0x200006ec

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	0008019d 000800fd 00080115 00080111     ................
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	000804dd 00080389 0008010d 00080111     ................
200001d0:	00080379                                y...

200001d4 <udc_config>:
200001d4:	200002c4 200001f4 200002c4 200002d8     ... ... ... ... 
200001e4:	200001ec 00000000                       ... ....

200001ec <udc_config_hs>:
200001ec:	20000260 200002e4                       `.. ... 

200001f4 <udc_config_lsfs>:
200001f4:	200001fc 200002e4                       ... ... 

200001fc <udc_desc_fs>:
200001fc:	00620209 80000103 000409fa ffff0200     ..b.............
2000020c:	050700ff 00400281 02050700 00004002     ......@......@..
2000021c:	02010b08 00010202 00010409 01020201     ................
2000022c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000023c:	02030124 03830507 09100040 02000204     $.......@.......
2000024c:	0000000a 02850507 07000040 40020605     ........@......@
2000025c:	00000000                                ....

20000260 <udc_desc_hs>:
20000260:	00620209 80000103 000409fa ffff0200     ..b.............
20000270:	050700ff 02000281 02050700 00020002     ................
20000280:	02010b08 00010202 00010409 01020201     ................
20000290:	00240500 24040110 24050202 05020106     ..$....$...$....
200002a0:	02030124 03830507 09100040 02000204     $.......@.......
200002b0:	0000000a 02850507 07000200 00020605     ................
200002c0:	00000002                                ....

200002c4 <udc_device_desc>:
200002c4:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d4:	00000103                                ....

200002d8 <udc_device_qual>:
200002d8:	0200060a 40000000 00000001              .......@....

200002e4 <udi_apis>:
200002e4:	200005b8 200001ac 200001c0              ... ... ... 

200002f0 <gs_uc_state>:
200002f0:	                                         .

200002f1 <scard_protocol_version.8943>:
200002f1:	                                         ...

200002f4 <xram>:
200002f4:	60000000                                ...`

200002f8 <avrispmkIIfreqs>:
200002f8:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
20000308:	0007a120 0003d090 0001e848 00017882      .......H....x..
20000318:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000328:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000338:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000348:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000358:	000099f1 00009586 00008d68 0000861f     ........h.......
20000368:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000378:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000388:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000398:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
200003a8:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003b8:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003c8:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003d8:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003e8:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003f8:	000016f7 000015e7 000014ef 000013e5     ................
20000408:	00001306 00001219 00001142 00001071     ........B...q...
20000418:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000428:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000438:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000448:	000008d1 00000868 00000804 000007a4     ....h...........
20000458:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000468:	00000603 000005bc 00000576 00000535     ........v...5...
20000478:	000004f7 000004bc 00000483 0000044d     ............M...
20000488:	00000419 000003e8 000003b9 0000038d     ................
20000498:	00000362 0000033a 00000313 000002ee     b...:...........
200004a8:	000002cb 000002aa 0000028a 0000026b     ............k...
200004b8:	0000024e 00000233 00000218 000001ff     N...3...........
200004c8:	000001e7 000001d1 000001bb 000001a6     ................
200004d8:	00000192 00000180 0000016e 0000015d     ........n...]...
200004e8:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004f8:	00000112 00000105 000000f9 000000ee     ................
20000508:	000000e2 000000d8 000000ce 000000c4     ................
20000518:	000000bb 000000b2 000000aa 000000a2     ................
20000528:	0000009a 00000093 0000008c 00000086     ................
20000538:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000548:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000558:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000568:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000578:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000588 <ParameterTable>:
20000588:	81000180 01900001 01019100 94170192     ................
20000598:	03982101 01039e06 a40001a1               .!............

200005a6 <main_b_vendor_enable>:
200005a6:	                                         ..

200005a8 <defaultTimeoutTicks>:
200005a8:	000001f4                                ....

200005ac <XPROG_Param_EEPageSize>:
200005ac:	00000020                                 ...

200005b0 <XPROG_Param_NVMBase>:
200005b0:	010001c0                                ....

200005b4 <XPROG_Param_NVMCMDRegAddr>:
200005b4:	                                         3

200005b5 <XPROG_Param_NVMCSRRegAddr>:
200005b5:	                                         2..

200005b8 <udi_api_vendor>:
200005b8:	000845ad 000845d1 000845e9 000845a1     .E...E...E...E..
200005c8:	00000000                                ....

200005cc <udc_string_desc>:
200005cc:	00000300 00000000 00000000 00000000     ................
	...

20000610 <udc_string_desc_languageid>:
20000610:	04090304                                ....

20000614 <udc_string_manufacturer_name>:
20000614:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000624:	636e4920 0000002e                        Inc....

2000062c <udc_string_product_name>:
2000062c:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
2000063c:	00006574                                te..

20000640 <winusb_20_desc>:
20000640:	0000000a 06030000 000800ae 00000002     ................
20000650:	001400a4 49570003 4253554e 00000000     ......WINUSB....
20000660:	00000000 00880000 00070004 0044002a     ............*.D.
20000670:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000680:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000690:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
200006a0:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
200006b0:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
200006c0:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
200006d0:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
200006e0:	00390045 0000007d                        E.9.}.....

200006ea <g_interrupt_enabled>:
200006ea:	                                         ..

200006ec <SystemCoreClock>:
200006ec:	003d0900                                ..=.

200006f0 <usb_serial_number>:
200006f0:	30303030 30303030 30303030 44414544     000000000000DEAD
20000700:	46454542 00000000 00000000 00000000     BEEF............
20000710:	00000000                                ....

20000714 <_impure_ptr>:
20000714:	20000718                                ... 

20000718 <impure_data>:
20000718:	00000000 20000a04 20000a6c 20000ad4     ....... l.. ... 
	...
200007c0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200007d0:	0005deec 0000000b 00000000 00000000     ................
	...

20000b40 <__atexit_recursive_mutex>:
20000b40:	20002e04                                ... 

20000b44 <__global_locale>:
20000b44:	00000043 00000000 00000000 00000000     C...............
	...
20000b64:	00000043 00000000 00000000 00000000     C...............
	...
20000b84:	00000043 00000000 00000000 00000000     C...............
	...
20000ba4:	00000043 00000000 00000000 00000000     C...............
	...
20000bc4:	00000043 00000000 00000000 00000000     C...............
	...
20000be4:	00000043 00000000 00000000 00000000     C...............
	...
20000c04:	00000043 00000000 00000000 00000000     C...............
	...
20000c24:	0008d631 0008c5f9 00000000 0008e8b4     1...............
20000c34:	0008e6f0 0008e510 0008e510 0008e510     ................
20000c44:	0008e510 0008e510 0008e510 0008e510     ................
20000c54:	0008e510 0008e510 ffffffff ffffffff     ................
20000c64:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000c8c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000cb0 <__malloc_av_>:
	...
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0 20000dd8 20000dd8     ... ... ... ... 
20000de8:	20000de0 20000de0 20000de8 20000de8     ... ... ... ... 
20000df8:	20000df0 20000df0 20000df8 20000df8     ... ... ... ... 
20000e08:	20000e00 20000e00 20000e08 20000e08     ... ... ... ... 
20000e18:	20000e10 20000e10 20000e18 20000e18     ... ... ... ... 
20000e28:	20000e20 20000e20 20000e28 20000e28      ..  .. (.. (.. 
20000e38:	20000e30 20000e30 20000e38 20000e38     0.. 0.. 8.. 8.. 
20000e48:	20000e40 20000e40 20000e48 20000e48     @.. @.. H.. H.. 
20000e58:	20000e50 20000e50 20000e58 20000e58     P.. P.. X.. X.. 
20000e68:	20000e60 20000e60 20000e68 20000e68     `.. `.. h.. h.. 
20000e78:	20000e70 20000e70 20000e78 20000e78     p.. p.. x.. x.. 
20000e88:	20000e80 20000e80 20000e88 20000e88     ... ... ... ... 
20000e98:	20000e90 20000e90 20000e98 20000e98     ... ... ... ... 
20000ea8:	20000ea0 20000ea0 20000ea8 20000ea8     ... ... ... ... 
20000eb8:	20000eb0 20000eb0 20000eb8 20000eb8     ... ... ... ... 
20000ec8:	20000ec0 20000ec0 20000ec8 20000ec8     ... ... ... ... 
20000ed8:	20000ed0 20000ed0 20000ed8 20000ed8     ... ... ... ... 
20000ee8:	20000ee0 20000ee0 20000ee8 20000ee8     ... ... ... ... 
20000ef8:	20000ef0 20000ef0 20000ef8 20000ef8     ... ... ... ... 
20000f08:	20000f00 20000f00 20000f08 20000f08     ... ... ... ... 
20000f18:	20000f10 20000f10 20000f18 20000f18     ... ... ... ... 
20000f28:	20000f20 20000f20 20000f28 20000f28      ..  .. (.. (.. 
20000f38:	20000f30 20000f30 20000f38 20000f38     0.. 0.. 8.. 8.. 
20000f48:	20000f40 20000f40 20000f48 20000f48     @.. @.. H.. H.. 
20000f58:	20000f50 20000f50 20000f58 20000f58     P.. P.. X.. X.. 
20000f68:	20000f60 20000f60 20000f68 20000f68     `.. `.. h.. h.. 
20000f78:	20000f70 20000f70 20000f78 20000f78     p.. p.. x.. x.. 
20000f88:	20000f80 20000f80 20000f88 20000f88     ... ... ... ... 
20000f98:	20000f90 20000f90 20000f98 20000f98     ... ... ... ... 
20000fa8:	20000fa0 20000fa0 20000fa8 20000fa8     ... ... ... ... 
20000fb8:	20000fb0 20000fb0 20000fb8 20000fb8     ... ... ... ... 
20000fc8:	20000fc0 20000fc0 20000fc8 20000fc8     ... ... ... ... 
20000fd8:	20000fd0 20000fd0 20000fd8 20000fd8     ... ... ... ... 
20000fe8:	20000fe0 20000fe0 20000fe8 20000fe8     ... ... ... ... 
20000ff8:	20000ff0 20000ff0 20000ff8 20000ff8     ... ... ... ... 
20001008:	20001000 20001000 20001008 20001008     ... ... ... ... 
20001018:	20001010 20001010 20001018 20001018     ... ... ... ... 
20001028:	20001020 20001020 20001028 20001028      ..  .. (.. (.. 
20001038:	20001030 20001030 20001038 20001038     0.. 0.. 8.. 8.. 
20001048:	20001040 20001040 20001048 20001048     @.. @.. H.. H.. 
20001058:	20001050 20001050 20001058 20001058     P.. P.. X.. X.. 
20001068:	20001060 20001060 20001068 20001068     `.. `.. h.. h.. 
20001078:	20001070 20001070 20001078 20001078     p.. p.. x.. x.. 
20001088:	20001080 20001080 20001088 20001088     ... ... ... ... 
20001098:	20001090 20001090 20001098 20001098     ... ... ... ... 
200010a8:	200010a0 200010a0 200010a8 200010a8     ... ... ... ... 

200010b8 <__malloc_sbrk_base>:
200010b8:	ffffffff                                ....

200010bc <__malloc_trim_threshold>:
200010bc:	00020000                                ....
