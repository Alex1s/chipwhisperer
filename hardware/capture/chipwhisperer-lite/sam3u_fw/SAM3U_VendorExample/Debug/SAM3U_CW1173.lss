
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d064  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d064  0008d064  0001d064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001358  20000000  0008d06c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001384  20001358  0008e3c4  00021358  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00021358  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00021381  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003c03c  00000000  00000000  000213cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000094be  00000000  00000000  0005d409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000c74c  00000000  00000000  000668c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001520  00000000  00000000  00073013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001ea8  00000000  00000000  00074533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00021890  00000000  00000000  000763db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00030beb  00000000  00000000  00097c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000604da  00000000  00000000  000c8856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  000047c8  00000000  00000000  00128d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 d9 56 08 00 d7 56 08 00 d7 56 08 00     . . .V...V...V..
   80010:	d7 56 08 00 d7 56 08 00 d7 56 08 00 00 00 00 00     .V...V...V......
	...
   8002c:	d7 56 08 00 d7 56 08 00 00 00 00 00 d7 56 08 00     .V...V.......V..
   8003c:	d7 56 08 00 d7 56 08 00 d7 56 08 00 d7 56 08 00     .V...V...V...V..
   8004c:	d7 56 08 00 d7 56 08 00 d7 56 08 00 d7 56 08 00     .V...V...V...V..
   8005c:	d7 56 08 00 d7 56 08 00 d7 56 08 00 d1 3d 08 00     .V...V...V...=..
   8006c:	e5 3d 08 00 d7 56 08 00 a9 19 08 00 d7 56 08 00     .=...V.......V..
   8007c:	d7 56 08 00 d7 56 08 00 d7 56 08 00 d7 56 08 00     .V...V...V...V..
   8008c:	d7 56 08 00 d7 56 08 00 d7 56 08 00 31 2d 08 00     .V...V...V..1-..
   8009c:	d7 56 08 00 d7 56 08 00 d7 56 08 00 d7 56 08 00     .V...V...V...V..
   800ac:	d7 56 08 00 d7 56 08 00 7d 45 08 00 d7 56 08 00     .V...V..}E...V..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001358 	.word	0x20001358
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d06c 	.word	0x0008d06c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	2000135c 	.word	0x2000135c
   800f8:	0008d06c 	.word	0x0008d06c

000800fc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   800fc:	4a02      	ldr	r2, [pc, #8]	; (80108 <udi_cdc_comm_disable+0xc>)
   800fe:	7813      	ldrb	r3, [r2, #0]
   80100:	3b01      	subs	r3, #1
   80102:	b2db      	uxtb	r3, r3
   80104:	7013      	strb	r3, [r2, #0]
}
   80106:	4770      	bx	lr
   80108:	2000137f 	.word	0x2000137f

0008010c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   8010c:	2000      	movs	r0, #0
   8010e:	4770      	bx	lr

00080110 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80110:	2000      	movs	r0, #0
   80112:	4770      	bx	lr

00080114 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80114:	4a1e      	ldr	r2, [pc, #120]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80116:	7813      	ldrb	r3, [r2, #0]
   80118:	f992 2000 	ldrsb.w	r2, [r2]
   8011c:	2a00      	cmp	r2, #0
   8011e:	db05      	blt.n	8012c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80120:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80124:	2b20      	cmp	r3, #32
   80126:	d01a      	beq.n	8015e <udi_cdc_comm_setup+0x4a>
	return false;  // request Not supported
   80128:	2000      	movs	r0, #0
   8012a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8012c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80130:	2b20      	cmp	r3, #32
   80132:	d001      	beq.n	80138 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
   80134:	2000      	movs	r0, #0
   80136:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80138:	4b15      	ldr	r3, [pc, #84]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8013a:	785b      	ldrb	r3, [r3, #1]
   8013c:	2b21      	cmp	r3, #33	; 0x21
   8013e:	d001      	beq.n	80144 <udi_cdc_comm_setup+0x30>
	return false;  // request Not supported
   80140:	2000      	movs	r0, #0
   80142:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80144:	4b12      	ldr	r3, [pc, #72]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80146:	88db      	ldrh	r3, [r3, #6]
   80148:	2b07      	cmp	r3, #7
   8014a:	d001      	beq.n	80150 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
   8014c:	2000      	movs	r0, #0
   8014e:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80150:	4b0f      	ldr	r3, [pc, #60]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80152:	4a10      	ldr	r2, [pc, #64]	; (80194 <udi_cdc_comm_setup+0x80>)
   80154:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80156:	2207      	movs	r2, #7
   80158:	819a      	strh	r2, [r3, #12]
				return true;
   8015a:	2001      	movs	r0, #1
   8015c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   8015e:	4b0c      	ldr	r3, [pc, #48]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80160:	7858      	ldrb	r0, [r3, #1]
   80162:	2820      	cmp	r0, #32
   80164:	d004      	beq.n	80170 <udi_cdc_comm_setup+0x5c>
   80166:	2822      	cmp	r0, #34	; 0x22
   80168:	bf14      	ite	ne
   8016a:	2000      	movne	r0, #0
   8016c:	2001      	moveq	r0, #1
   8016e:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80170:	4b07      	ldr	r3, [pc, #28]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80172:	88db      	ldrh	r3, [r3, #6]
   80174:	2b07      	cmp	r3, #7
   80176:	d001      	beq.n	8017c <udi_cdc_comm_setup+0x68>
					return false; // Error for USB host
   80178:	2000      	movs	r0, #0
}
   8017a:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   8017c:	4b04      	ldr	r3, [pc, #16]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8017e:	4a06      	ldr	r2, [pc, #24]	; (80198 <udi_cdc_comm_setup+0x84>)
   80180:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   80182:	4a04      	ldr	r2, [pc, #16]	; (80194 <udi_cdc_comm_setup+0x80>)
   80184:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80186:	2207      	movs	r2, #7
   80188:	819a      	strh	r2, [r3, #12]
				return true;
   8018a:	2001      	movs	r0, #1
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	2000269c 	.word	0x2000269c
   80194:	20001378 	.word	0x20001378
   80198:	000803b1 	.word	0x000803b1

0008019c <udi_cdc_comm_enable>:
{
   8019c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   8019e:	2400      	movs	r4, #0
   801a0:	4b11      	ldr	r3, [pc, #68]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801a4:	4b11      	ldr	r3, [pc, #68]	; (801ec <udi_cdc_comm_enable+0x50>)
   801a6:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <udi_cdc_comm_enable+0x54>)
   801aa:	22a1      	movs	r2, #161	; 0xa1
   801ac:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801ae:	2220      	movs	r2, #32
   801b0:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801b2:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801b4:	2201      	movs	r2, #1
   801b6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801b8:	2202      	movs	r2, #2
   801ba:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801bc:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <udi_cdc_comm_enable+0x58>)
   801c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801c4:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801c6:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801c8:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801ca:	2308      	movs	r3, #8
   801cc:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801ce:	4620      	mov	r0, r4
   801d0:	4b09      	ldr	r3, [pc, #36]	; (801f8 <udi_cdc_comm_enable+0x5c>)
   801d2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801d4:	4620      	mov	r0, r4
   801d6:	4b09      	ldr	r3, [pc, #36]	; (801fc <udi_cdc_comm_enable+0x60>)
   801d8:	4798      	blx	r3
   801da:	b120      	cbz	r0, 801e6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
   801dc:	4a02      	ldr	r2, [pc, #8]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801de:	7813      	ldrb	r3, [r2, #0]
   801e0:	3301      	adds	r3, #1
   801e2:	b2db      	uxtb	r3, r3
   801e4:	7013      	strb	r3, [r2, #0]
}
   801e6:	bd10      	pop	{r4, pc}
   801e8:	2000137f 	.word	0x2000137f
   801ec:	20001794 	.word	0x20001794
   801f0:	20001bac 	.word	0x20001bac
   801f4:	20001378 	.word	0x20001378
   801f8:	00081eb9 	.word	0x00081eb9
   801fc:	00081e05 	.word	0x00081e05

00080200 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80200:	4b42      	ldr	r3, [pc, #264]	; (8030c <udi_cdc_tx_send+0x10c>)
   80202:	781b      	ldrb	r3, [r3, #0]
   80204:	b103      	cbz	r3, 80208 <udi_cdc_tx_send+0x8>
   80206:	4770      	bx	lr
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8020c:	4b40      	ldr	r3, [pc, #256]	; (80310 <udi_cdc_tx_send+0x110>)
   8020e:	4798      	blx	r3
   80210:	2800      	cmp	r0, #0
   80212:	d045      	beq.n	802a0 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80214:	4b3f      	ldr	r3, [pc, #252]	; (80314 <udi_cdc_tx_send+0x114>)
   80216:	881c      	ldrh	r4, [r3, #0]
   80218:	4b3f      	ldr	r3, [pc, #252]	; (80318 <udi_cdc_tx_send+0x118>)
   8021a:	4798      	blx	r3
   8021c:	4284      	cmp	r4, r0
   8021e:	d03d      	beq.n	8029c <udi_cdc_tx_send+0x9c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80220:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80224:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80226:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8022a:	4b3c      	ldr	r3, [pc, #240]	; (8031c <udi_cdc_tx_send+0x11c>)
   8022c:	2200      	movs	r2, #0
   8022e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80230:	4b3b      	ldr	r3, [pc, #236]	; (80320 <udi_cdc_tx_send+0x120>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2dc      	uxtb	r4, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80236:	4a3b      	ldr	r2, [pc, #236]	; (80324 <udi_cdc_tx_send+0x124>)
   80238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8023c:	2b00      	cmp	r3, #0
   8023e:	d036      	beq.n	802ae <udi_cdc_tx_send+0xae>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80240:	4b39      	ldr	r3, [pc, #228]	; (80328 <udi_cdc_tx_send+0x128>)
   80242:	2200      	movs	r2, #0
   80244:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80246:	4b39      	ldr	r3, [pc, #228]	; (8032c <udi_cdc_tx_send+0x12c>)
   80248:	781b      	ldrb	r3, [r3, #0]
   8024a:	2b00      	cmp	r3, #0
   8024c:	d14c      	bne.n	802e8 <udi_cdc_tx_send+0xe8>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8024e:	fab4 f384 	clz	r3, r4
   80252:	095b      	lsrs	r3, r3, #5
   80254:	4a32      	ldr	r2, [pc, #200]	; (80320 <udi_cdc_tx_send+0x120>)
   80256:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80258:	4b2c      	ldr	r3, [pc, #176]	; (8030c <udi_cdc_tx_send+0x10c>)
   8025a:	2201      	movs	r2, #1
   8025c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8025e:	b925      	cbnz	r5, 8026a <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80260:	4b2e      	ldr	r3, [pc, #184]	; (8031c <udi_cdc_tx_send+0x11c>)
   80262:	701a      	strb	r2, [r3, #0]
   80264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80268:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8026a:	4626      	mov	r6, r4
   8026c:	4b2d      	ldr	r3, [pc, #180]	; (80324 <udi_cdc_tx_send+0x124>)
   8026e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80276:	bf14      	ite	ne
   80278:	2501      	movne	r5, #1
   8027a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8027c:	d138      	bne.n	802f0 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8027e:	4b25      	ldr	r3, [pc, #148]	; (80314 <udi_cdc_tx_send+0x114>)
   80280:	2200      	movs	r2, #0
   80282:	801a      	strh	r2, [r3, #0]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80284:	4b2a      	ldr	r3, [pc, #168]	; (80330 <udi_cdc_tx_send+0x130>)
   80286:	9300      	str	r3, [sp, #0]
   80288:	4b26      	ldr	r3, [pc, #152]	; (80324 <udi_cdc_tx_send+0x124>)
   8028a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   8028e:	4a29      	ldr	r2, [pc, #164]	; (80334 <udi_cdc_tx_send+0x134>)
   80290:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80294:	4629      	mov	r1, r5
   80296:	2085      	movs	r0, #133	; 0x85
   80298:	4c27      	ldr	r4, [pc, #156]	; (80338 <udi_cdc_tx_send+0x138>)
   8029a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8029c:	b002      	add	sp, #8
   8029e:	bd70      	pop	{r4, r5, r6, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802a0:	4b1c      	ldr	r3, [pc, #112]	; (80314 <udi_cdc_tx_send+0x114>)
   802a2:	881c      	ldrh	r4, [r3, #0]
   802a4:	4b25      	ldr	r3, [pc, #148]	; (8033c <udi_cdc_tx_send+0x13c>)
   802a6:	4798      	blx	r3
   802a8:	4284      	cmp	r4, r0
   802aa:	d1b9      	bne.n	80220 <udi_cdc_tx_send+0x20>
   802ac:	e7f6      	b.n	8029c <udi_cdc_tx_send+0x9c>
		sof_zlp_counter++;
   802ae:	4a1e      	ldr	r2, [pc, #120]	; (80328 <udi_cdc_tx_send+0x128>)
   802b0:	8813      	ldrh	r3, [r2, #0]
   802b2:	3301      	adds	r3, #1
   802b4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802b6:	4b16      	ldr	r3, [pc, #88]	; (80310 <udi_cdc_tx_send+0x110>)
   802b8:	4798      	blx	r3
   802ba:	b918      	cbnz	r0, 802c4 <udi_cdc_tx_send+0xc4>
   802bc:	4b1a      	ldr	r3, [pc, #104]	; (80328 <udi_cdc_tx_send+0x128>)
   802be:	881b      	ldrh	r3, [r3, #0]
   802c0:	2b63      	cmp	r3, #99	; 0x63
   802c2:	d908      	bls.n	802d6 <udi_cdc_tx_send+0xd6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802c4:	4b12      	ldr	r3, [pc, #72]	; (80310 <udi_cdc_tx_send+0x110>)
   802c6:	4798      	blx	r3
   802c8:	2800      	cmp	r0, #0
   802ca:	d0b9      	beq.n	80240 <udi_cdc_tx_send+0x40>
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <udi_cdc_tx_send+0x128>)
   802ce:	881b      	ldrh	r3, [r3, #0]
   802d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802d4:	d2b4      	bcs.n	80240 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802d6:	2d00      	cmp	r5, #0
   802d8:	d1e0      	bne.n	8029c <udi_cdc_tx_send+0x9c>
		cpu_irq_enable();
   802da:	4b10      	ldr	r3, [pc, #64]	; (8031c <udi_cdc_tx_send+0x11c>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	f3bf 8f5f 	dmb	sy
   802e4:	b662      	cpsie	i
}
   802e6:	e7d9      	b.n	8029c <udi_cdc_tx_send+0x9c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802e8:	fab4 f484 	clz	r4, r4
   802ec:	0964      	lsrs	r4, r4, #5
   802ee:	e7b3      	b.n	80258 <udi_cdc_tx_send+0x58>
		if (udd_is_high_speed()) {
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_cdc_tx_send+0x110>)
   802f2:	4798      	blx	r3
   802f4:	b120      	cbz	r0, 80300 <udi_cdc_tx_send+0x100>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802f6:	4b08      	ldr	r3, [pc, #32]	; (80318 <udi_cdc_tx_send+0x118>)
   802f8:	4798      	blx	r3
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <udi_cdc_tx_send+0x114>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	e7c1      	b.n	80284 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <udi_cdc_tx_send+0x13c>)
   80302:	4798      	blx	r3
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <udi_cdc_tx_send+0x114>)
   80306:	8018      	strh	r0, [r3, #0]
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x84>
   8030a:	bf00      	nop
   8030c:	20001ba8 	.word	0x20001ba8
   80310:	00084d21 	.word	0x00084d21
   80314:	20001ba4 	.word	0x20001ba4
   80318:	00084d79 	.word	0x00084d79
   8031c:	20000982 	.word	0x20000982
   80320:	20001ba0 	.word	0x20001ba0
   80324:	20001b9c 	.word	0x20001b9c
   80328:	20001374 	.word	0x20001374
   8032c:	20001798 	.word	0x20001798
   80330:	00080341 	.word	0x00080341
   80334:	2000179c 	.word	0x2000179c
   80338:	00084fdd 	.word	0x00084fdd
   8033c:	00084d69 	.word	0x00084d69

00080340 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80340:	b100      	cbz	r0, 80344 <udi_cdc_data_sent+0x4>
   80342:	4770      	bx	lr
{
   80344:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <udi_cdc_data_sent+0x24>)
   80348:	781b      	ldrb	r3, [r3, #0]
   8034a:	fab3 f383 	clz	r3, r3
   8034e:	095b      	lsrs	r3, r3, #5
   80350:	4a05      	ldr	r2, [pc, #20]	; (80368 <udi_cdc_data_sent+0x28>)
   80352:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <udi_cdc_data_sent+0x2c>)
   80358:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <udi_cdc_data_sent+0x30>)
   8035c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <udi_cdc_data_sent+0x34>)
   80360:	4798      	blx	r3
}
   80362:	bd08      	pop	{r3, pc}
   80364:	20001ba0 	.word	0x20001ba0
   80368:	20001b9c 	.word	0x20001b9c
   8036c:	20001798 	.word	0x20001798
   80370:	20001ba8 	.word	0x20001ba8
   80374:	00080201 	.word	0x00080201

00080378 <udi_cdc_data_sof_notify>:
{
   80378:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8037a:	2000      	movs	r0, #0
   8037c:	4b01      	ldr	r3, [pc, #4]	; (80384 <udi_cdc_data_sof_notify+0xc>)
   8037e:	4798      	blx	r3
}
   80380:	bd08      	pop	{r3, pc}
   80382:	bf00      	nop
   80384:	00080201 	.word	0x00080201

00080388 <udi_cdc_data_disable>:
{
   80388:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8038a:	4a06      	ldr	r2, [pc, #24]	; (803a4 <udi_cdc_data_disable+0x1c>)
   8038c:	7813      	ldrb	r3, [r2, #0]
   8038e:	3b01      	subs	r3, #1
   80390:	b2db      	uxtb	r3, r3
   80392:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80394:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   80396:	4b04      	ldr	r3, [pc, #16]	; (803a8 <udi_cdc_data_disable+0x20>)
   80398:	4798      	blx	r3
	udi_cdc_data_running = false;
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <udi_cdc_data_disable+0x24>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
}
   803a0:	bd08      	pop	{r3, pc}
   803a2:	bf00      	nop
   803a4:	20001380 	.word	0x20001380
   803a8:	00081e21 	.word	0x00081e21
   803ac:	20001376 	.word	0x20001376

000803b0 <udi_cdc_line_coding_received>:
{
   803b0:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803b2:	4902      	ldr	r1, [pc, #8]	; (803bc <udi_cdc_line_coding_received+0xc>)
   803b4:	2000      	movs	r0, #0
   803b6:	4b02      	ldr	r3, [pc, #8]	; (803c0 <udi_cdc_line_coding_received+0x10>)
   803b8:	4798      	blx	r3
}
   803ba:	bd08      	pop	{r3, pc}
   803bc:	20001378 	.word	0x20001378
   803c0:	00081eb9 	.word	0x00081eb9

000803c4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   803c8:	b672      	cpsid	i
   803ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803ce:	4b0b      	ldr	r3, [pc, #44]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803d4:	4b0a      	ldr	r3, [pc, #40]	; (80400 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803d6:	8818      	ldrh	r0, [r3, #0]
   803d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803da:	4a0a      	ldr	r2, [pc, #40]	; (80404 <udi_cdc_multi_get_nb_received_data+0x40>)
   803dc:	7812      	ldrb	r2, [r2, #0]
   803de:	b2d2      	uxtb	r2, r2
   803e0:	4809      	ldr	r0, [pc, #36]	; (80408 <udi_cdc_multi_get_nb_received_data+0x44>)
   803e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   803e6:	b280      	uxth	r0, r0
   803e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   803ea:	b929      	cbnz	r1, 803f8 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   803f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop
   803fc:	20000982 	.word	0x20000982
   80400:	2000178c 	.word	0x2000178c
   80404:	20001788 	.word	0x20001788
   80408:	20001784 	.word	0x20001784

0008040c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8040c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8040e:	4b03      	ldr	r3, [pc, #12]	; (8041c <udi_cdc_multi_is_rx_ready+0x10>)
   80410:	4798      	blx	r3
}
   80412:	3800      	subs	r0, #0
   80414:	bf18      	it	ne
   80416:	2001      	movne	r0, #1
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	000803c5 	.word	0x000803c5

00080420 <udi_cdc_rx_start>:
{
   80420:	b510      	push	{r4, lr}
   80422:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80424:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
   8042a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8042e:	4b21      	ldr	r3, [pc, #132]	; (804b4 <udi_cdc_rx_start+0x94>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80434:	4b20      	ldr	r3, [pc, #128]	; (804b8 <udi_cdc_rx_start+0x98>)
   80436:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80438:	4b20      	ldr	r3, [pc, #128]	; (804bc <udi_cdc_rx_start+0x9c>)
   8043a:	781b      	ldrb	r3, [r3, #0]
   8043c:	bb5b      	cbnz	r3, 80496 <udi_cdc_rx_start+0x76>
   8043e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80440:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80442:	881a      	ldrh	r2, [r3, #0]
   80444:	b292      	uxth	r2, r2
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <udi_cdc_rx_start+0xa4>)
   80448:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8044c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8044e:	429a      	cmp	r2, r3
   80450:	d321      	bcc.n	80496 <udi_cdc_rx_start+0x76>
	udi_cdc_rx_pos[port] = 0;
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80454:	2200      	movs	r2, #0
   80456:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80458:	fab4 f384 	clz	r3, r4
   8045c:	095b      	lsrs	r3, r3, #5
   8045e:	4a16      	ldr	r2, [pc, #88]	; (804b8 <udi_cdc_rx_start+0x98>)
   80460:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <udi_cdc_rx_start+0x9c>)
   80464:	2201      	movs	r2, #1
   80466:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80468:	b921      	cbnz	r1, 80474 <udi_cdc_rx_start+0x54>
		cpu_irq_enable();
   8046a:	4b12      	ldr	r3, [pc, #72]	; (804b4 <udi_cdc_rx_start+0x94>)
   8046c:	701a      	strb	r2, [r3, #0]
   8046e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80472:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80474:	2000      	movs	r0, #0
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <udi_cdc_rx_start+0xa8>)
   80478:	4798      	blx	r3
   8047a:	b9a8      	cbnz	r0, 804a8 <udi_cdc_rx_start+0x88>
	return udd_ep_run(ep,
   8047c:	4b13      	ldr	r3, [pc, #76]	; (804cc <udi_cdc_rx_start+0xac>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	f44f 7300 	mov.w	r3, #512	; 0x200
   80484:	4a12      	ldr	r2, [pc, #72]	; (804d0 <udi_cdc_rx_start+0xb0>)
   80486:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8048a:	2101      	movs	r1, #1
   8048c:	2006      	movs	r0, #6
   8048e:	4c11      	ldr	r4, [pc, #68]	; (804d4 <udi_cdc_rx_start+0xb4>)
   80490:	47a0      	blx	r4
}
   80492:	b002      	add	sp, #8
   80494:	bd10      	pop	{r4, pc}
	if (cpu_irq_is_enabled_flags(flags))
   80496:	b959      	cbnz	r1, 804b0 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <udi_cdc_rx_start+0x94>)
   8049a:	2201      	movs	r2, #1
   8049c:	701a      	strb	r2, [r3, #0]
   8049e:	f3bf 8f5f 	dmb	sy
   804a2:	b662      	cpsie	i
		return false;
   804a4:	2000      	movs	r0, #0
}
   804a6:	e7f4      	b.n	80492 <udi_cdc_rx_start+0x72>
		UDI_CDC_RX_NOTIFY(port);
   804a8:	2000      	movs	r0, #0
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <udi_cdc_rx_start+0xb8>)
   804ac:	4798      	blx	r3
   804ae:	e7e5      	b.n	8047c <udi_cdc_rx_start+0x5c>
		return false;
   804b0:	2000      	movs	r0, #0
   804b2:	e7ee      	b.n	80492 <udi_cdc_rx_start+0x72>
   804b4:	20000982 	.word	0x20000982
   804b8:	20001788 	.word	0x20001788
   804bc:	20001790 	.word	0x20001790
   804c0:	2000178c 	.word	0x2000178c
   804c4:	20001784 	.word	0x20001784
   804c8:	0008040d 	.word	0x0008040d
   804cc:	0008056d 	.word	0x0008056d
   804d0:	20001384 	.word	0x20001384
   804d4:	00084fdd 	.word	0x00084fdd
   804d8:	00081e39 	.word	0x00081e39

000804dc <udi_cdc_data_enable>:
{
   804dc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804de:	2400      	movs	r4, #0
   804e0:	4b15      	ldr	r3, [pc, #84]	; (80538 <udi_cdc_data_enable+0x5c>)
   804e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804e4:	4b15      	ldr	r3, [pc, #84]	; (8053c <udi_cdc_data_enable+0x60>)
   804e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804e8:	4b15      	ldr	r3, [pc, #84]	; (80540 <udi_cdc_data_enable+0x64>)
   804ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   804ec:	4b15      	ldr	r3, [pc, #84]	; (80544 <udi_cdc_data_enable+0x68>)
   804ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   804f0:	4b15      	ldr	r3, [pc, #84]	; (80548 <udi_cdc_data_enable+0x6c>)
   804f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   804f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <udi_cdc_data_enable+0x70>)
   804f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   804fa:	4620      	mov	r0, r4
   804fc:	4b14      	ldr	r3, [pc, #80]	; (80550 <udi_cdc_data_enable+0x74>)
   804fe:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <udi_cdc_data_enable+0x78>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <udi_cdc_data_enable+0x7c>)
   80506:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80508:	4b14      	ldr	r3, [pc, #80]	; (8055c <udi_cdc_data_enable+0x80>)
   8050a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8050c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8050e:	4b14      	ldr	r3, [pc, #80]	; (80560 <udi_cdc_data_enable+0x84>)
   80510:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80512:	4620      	mov	r0, r4
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <udi_cdc_data_enable+0x88>)
   80516:	4798      	blx	r3
   80518:	b140      	cbz	r0, 8052c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
   8051a:	4a07      	ldr	r2, [pc, #28]	; (80538 <udi_cdc_data_enable+0x5c>)
   8051c:	7813      	ldrb	r3, [r2, #0]
   8051e:	3301      	adds	r3, #1
   80520:	b2db      	uxtb	r3, r3
   80522:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80524:	7813      	ldrb	r3, [r2, #0]
   80526:	b2db      	uxtb	r3, r3
   80528:	2b01      	cmp	r3, #1
   8052a:	d000      	beq.n	8052e <udi_cdc_data_enable+0x52>
}
   8052c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   8052e:	4b0e      	ldr	r3, [pc, #56]	; (80568 <udi_cdc_data_enable+0x8c>)
   80530:	2201      	movs	r2, #1
   80532:	701a      	strb	r2, [r3, #0]
   80534:	e7fa      	b.n	8052c <udi_cdc_data_enable+0x50>
   80536:	bf00      	nop
   80538:	20001380 	.word	0x20001380
   8053c:	20001ba8 	.word	0x20001ba8
   80540:	20001798 	.word	0x20001798
   80544:	20001ba0 	.word	0x20001ba0
   80548:	20001b9c 	.word	0x20001b9c
   8054c:	20001ba4 	.word	0x20001ba4
   80550:	00080201 	.word	0x00080201
   80554:	20001790 	.word	0x20001790
   80558:	20001788 	.word	0x20001788
   8055c:	20001784 	.word	0x20001784
   80560:	2000178c 	.word	0x2000178c
   80564:	00080421 	.word	0x00080421
   80568:	20001376 	.word	0x20001376

0008056c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8056c:	b9f8      	cbnz	r0, 805ae <udi_cdc_data_received+0x42>
{
   8056e:	b530      	push	{r4, r5, lr}
   80570:	b083      	sub	sp, #12
   80572:	4615      	mov	r5, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <udi_cdc_data_received+0x44>)
   80576:	781c      	ldrb	r4, [r3, #0]
   80578:	fab4 f484 	clz	r4, r4
   8057c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8057e:	b151      	cbz	r1, 80596 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80580:	b289      	uxth	r1, r1
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <udi_cdc_data_received+0x48>)
   80584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80588:	2000      	movs	r0, #0
   8058a:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <udi_cdc_data_received+0x4c>)
   8058c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8058e:	4b0b      	ldr	r3, [pc, #44]	; (805bc <udi_cdc_data_received+0x50>)
   80590:	4798      	blx	r3
}
   80592:	b003      	add	sp, #12
   80594:	bd30      	pop	{r4, r5, pc}
		udd_ep_run( ep,
   80596:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <udi_cdc_data_received+0x54>)
   80598:	9300      	str	r3, [sp, #0]
   8059a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8059e:	4a09      	ldr	r2, [pc, #36]	; (805c4 <udi_cdc_data_received+0x58>)
   805a0:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805a4:	2101      	movs	r1, #1
   805a6:	4628      	mov	r0, r5
   805a8:	4c07      	ldr	r4, [pc, #28]	; (805c8 <udi_cdc_data_received+0x5c>)
   805aa:	47a0      	blx	r4
		return;
   805ac:	e7f1      	b.n	80592 <udi_cdc_data_received+0x26>
   805ae:	4770      	bx	lr
   805b0:	20001788 	.word	0x20001788
   805b4:	20001784 	.word	0x20001784
   805b8:	20001790 	.word	0x20001790
   805bc:	00080421 	.word	0x00080421
   805c0:	0008056d 	.word	0x0008056d
   805c4:	20001384 	.word	0x20001384
   805c8:	00084fdd 	.word	0x00084fdd

000805cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805d0:	4688      	mov	r8, r1
   805d2:	4617      	mov	r7, r2
	cpu_irq_disable();
   805d4:	4e21      	ldr	r6, [pc, #132]	; (8065c <udi_cdc_multi_read_buf+0x90>)
   805d6:	f04f 0b00 	mov.w	fp, #0
   805da:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805dc:	4d20      	ldr	r5, [pc, #128]	; (80660 <udi_cdc_multi_read_buf+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80678 <udi_cdc_multi_read_buf+0xac>
   805e2:	e00a      	b.n	805fa <udi_cdc_multi_read_buf+0x2e>
		cpu_irq_enable();
   805e4:	2001      	movs	r0, #1
   805e6:	7030      	strb	r0, [r6, #0]
   805e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ec:	b662      	cpsie	i
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   805ee:	428a      	cmp	r2, r1
   805f0:	d816      	bhi.n	80620 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
   805f2:	4b1c      	ldr	r3, [pc, #112]	; (80664 <udi_cdc_multi_read_buf+0x98>)
   805f4:	781b      	ldrb	r3, [r3, #0]
   805f6:	2b00      	cmp	r3, #0
   805f8:	d02d      	beq.n	80656 <udi_cdc_multi_read_buf+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   805fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80604:	f886 a000 	strb.w	sl, [r6]
	pos = udi_cdc_rx_pos[port];
   80608:	8829      	ldrh	r1, [r5, #0]
   8060a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8060c:	f899 3000 	ldrb.w	r3, [r9]
   80610:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80612:	4a15      	ldr	r2, [pc, #84]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   80618:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8061a:	2800      	cmp	r0, #0
   8061c:	d1e7      	bne.n	805ee <udi_cdc_multi_read_buf+0x22>
   8061e:	e7e1      	b.n	805e4 <udi_cdc_multi_read_buf+0x18>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80620:	4a11      	ldr	r2, [pc, #68]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80622:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80626:	b2a4      	uxth	r4, r4
   80628:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
   8062a:	42bc      	cmp	r4, r7
   8062c:	bf28      	it	cs
   8062e:	463c      	movcs	r4, r7
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80630:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80634:	4622      	mov	r2, r4
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <udi_cdc_multi_read_buf+0xa0>)
   80638:	4419      	add	r1, r3
   8063a:	4640      	mov	r0, r8
   8063c:	4b0c      	ldr	r3, [pc, #48]	; (80670 <udi_cdc_multi_read_buf+0xa4>)
   8063e:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80640:	882b      	ldrh	r3, [r5, #0]
   80642:	4423      	add	r3, r4
   80644:	b29b      	uxth	r3, r3
   80646:	802b      	strh	r3, [r5, #0]
	ptr_buf += copy_nb;
   80648:	44a0      	add	r8, r4
	size -= copy_nb;
   8064a:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_start(port);
   8064c:	4658      	mov	r0, fp
   8064e:	4b09      	ldr	r3, [pc, #36]	; (80674 <udi_cdc_multi_read_buf+0xa8>)
   80650:	4798      	blx	r3

	if (size) {
   80652:	2f00      	cmp	r7, #0
   80654:	d1d1      	bne.n	805fa <udi_cdc_multi_read_buf+0x2e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80656:	4638      	mov	r0, r7
   80658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8065c:	20000982 	.word	0x20000982
   80660:	2000178c 	.word	0x2000178c
   80664:	20001376 	.word	0x20001376
   80668:	20001784 	.word	0x20001784
   8066c:	20001384 	.word	0x20001384
   80670:	00085f71 	.word	0x00085f71
   80674:	00080421 	.word	0x00080421
   80678:	20001788 	.word	0x20001788

0008067c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8067c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8067e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80682:	b672      	cpsid	i
   80684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80688:	4b14      	ldr	r3, [pc, #80]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   8068a:	2100      	movs	r1, #0
   8068c:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   80690:	781b      	ldrb	r3, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80692:	4914      	ldr	r1, [pc, #80]	; (806e4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80694:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80698:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8069c:	d00a      	beq.n	806b4 <udi_cdc_multi_get_free_tx_buffer+0x38>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8069e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806a2:	b92a      	cbnz	r2, 806b0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a6:	2201      	movs	r2, #1
   806a8:	701a      	strb	r2, [r3, #0]
   806aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806b0:	bc10      	pop	{r4}
   806b2:	4770      	bx	lr
   806b4:	b2dc      	uxtb	r4, r3
		if ((!udi_cdc_tx_trans_ongoing[port])
   806b6:	4b0c      	ldr	r3, [pc, #48]	; (806e8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d1ef      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806be:	4b0b      	ldr	r3, [pc, #44]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c0:	781b      	ldrb	r3, [r3, #0]
   806c2:	2b00      	cmp	r3, #0
   806c4:	d1eb      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c8:	2101      	movs	r1, #1
   806ca:	7019      	strb	r1, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806cc:	fab4 f484 	clz	r4, r4
   806d0:	0964      	lsrs	r4, r4, #5
   806d2:	4b03      	ldr	r3, [pc, #12]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806d4:	701c      	strb	r4, [r3, #0]
			buf_sel_nb = 0;
   806d6:	2000      	movs	r0, #0
   806d8:	e7e1      	b.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
   806da:	bf00      	nop
   806dc:	20000982 	.word	0x20000982
   806e0:	20001ba0 	.word	0x20001ba0
   806e4:	20001b9c 	.word	0x20001b9c
   806e8:	20001ba8 	.word	0x20001ba8
   806ec:	20001798 	.word	0x20001798

000806f0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   806f0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   806f2:	4b03      	ldr	r3, [pc, #12]	; (80700 <udi_cdc_multi_is_tx_ready+0x10>)
   806f4:	4798      	blx	r3
}
   806f6:	3800      	subs	r0, #0
   806f8:	bf18      	it	ne
   806fa:	2001      	movne	r0, #1
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	0008067d 	.word	0x0008067d

00080704 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80708:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8070a:	4b1a      	ldr	r3, [pc, #104]	; (80774 <udi_cdc_multi_putc+0x70>)
   8070c:	799d      	ldrb	r5, [r3, #6]
   8070e:	2d09      	cmp	r5, #9
   80710:	bf14      	ite	ne
   80712:	2500      	movne	r5, #0
   80714:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80716:	4e18      	ldr	r6, [pc, #96]	; (80778 <udi_cdc_multi_putc+0x74>)
	cpu_irq_disable();
   80718:	4f18      	ldr	r7, [pc, #96]	; (8077c <udi_cdc_multi_putc+0x78>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8071a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8078c <udi_cdc_multi_putc+0x88>
   8071e:	e01d      	b.n	8075c <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80720:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80724:	b672      	cpsid	i
   80726:	f3bf 8f5f 	dmb	sy
   8072a:	2300      	movs	r3, #0
   8072c:	703b      	strb	r3, [r7, #0]
   8072e:	f898 2000 	ldrb.w	r2, [r8]
   80732:	b2d1      	uxtb	r1, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <udi_cdc_multi_putc+0x7c>)
   80736:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   8073a:	f102 0c01 	add.w	ip, r2, #1
   8073e:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
   80742:	4b10      	ldr	r3, [pc, #64]	; (80784 <udi_cdc_multi_putc+0x80>)
   80744:	eb03 2341 	add.w	r3, r3, r1, lsl #9
   80748:	549c      	strb	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
   8074a:	b920      	cbnz	r0, 80756 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   8074c:	2301      	movs	r3, #1
   8074e:	703b      	strb	r3, [r7, #0]
   80750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80754:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80756:	b15d      	cbz	r5, 80770 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80758:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   8075a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8075c:	2000      	movs	r0, #0
   8075e:	47b0      	blx	r6
   80760:	2800      	cmp	r0, #0
   80762:	d1dd      	bne.n	80720 <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <udi_cdc_multi_putc+0x84>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	2b00      	cmp	r3, #0
   8076a:	d1f7      	bne.n	8075c <udi_cdc_multi_putc+0x58>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   8076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80770:	2001      	movs	r0, #1
   80772:	e7fb      	b.n	8076c <udi_cdc_multi_putc+0x68>
   80774:	20001378 	.word	0x20001378
   80778:	000806f1 	.word	0x000806f1
   8077c:	20000982 	.word	0x20000982
   80780:	20001b9c 	.word	0x20001b9c
   80784:	2000179c 	.word	0x2000179c
   80788:	20001376 	.word	0x20001376
   8078c:	20001ba0 	.word	0x20001ba0

00080790 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   80790:	b510      	push	{r4, lr}
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   80792:	4c18      	ldr	r4, [pc, #96]	; (807f4 <fpga_program_setup1+0x64>)
   80794:	4620      	mov	r0, r4
   80796:	4b18      	ldr	r3, [pc, #96]	; (807f8 <fpga_program_setup1+0x68>)
   80798:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8079a:	2380      	movs	r3, #128	; 0x80
   8079c:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8079e:	6863      	ldr	r3, [r4, #4]
   807a0:	f043 0301 	orr.w	r3, r3, #1
   807a4:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   807a6:	6863      	ldr	r3, [r4, #4]
   807a8:	f043 0310 	orr.w	r3, r3, #16
   807ac:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   807ae:	6863      	ldr	r3, [r4, #4]
   807b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   807b4:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   807b6:	2200      	movs	r2, #0
   807b8:	4611      	mov	r1, r2
   807ba:	4620      	mov	r0, r4
   807bc:	4b0f      	ldr	r3, [pc, #60]	; (807fc <fpga_program_setup1+0x6c>)
   807be:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   807c0:	2201      	movs	r2, #1
   807c2:	2100      	movs	r1, #0
   807c4:	4620      	mov	r0, r4
   807c6:	4b0e      	ldr	r3, [pc, #56]	; (80800 <fpga_program_setup1+0x70>)
   807c8:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   807ca:	490e      	ldr	r1, [pc, #56]	; (80804 <fpga_program_setup1+0x74>)
   807cc:	480e      	ldr	r0, [pc, #56]	; (80808 <fpga_program_setup1+0x78>)
   807ce:	4b0f      	ldr	r3, [pc, #60]	; (8080c <fpga_program_setup1+0x7c>)
   807d0:	4798      	blx	r3
   807d2:	b2c2      	uxtb	r2, r0
   807d4:	2100      	movs	r1, #0
   807d6:	4620      	mov	r0, r4
   807d8:	4b0d      	ldr	r3, [pc, #52]	; (80810 <fpga_program_setup1+0x80>)
   807da:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   807dc:	2301      	movs	r3, #1
   807de:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   807e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807e4:	200e      	movs	r0, #14
   807e6:	4c0b      	ldr	r4, [pc, #44]	; (80814 <fpga_program_setup1+0x84>)
   807e8:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   807ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807ee:	200f      	movs	r0, #15
   807f0:	47a0      	blx	r4
	#endif
#endif
}
   807f2:	bd10      	pop	{r4, pc}
   807f4:	40008000 	.word	0x40008000
   807f8:	00083fdd 	.word	0x00083fdd
   807fc:	0008405f 	.word	0x0008405f
   80800:	0008407d 	.word	0x0008407d
   80804:	05b8d800 	.word	0x05b8d800
   80808:	000f4240 	.word	0x000f4240
   8080c:	0008409b 	.word	0x0008409b
   80810:	000840b1 	.word	0x000840b1
   80814:	00083c15 	.word	0x00083c15

00080818 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80818:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   8081a:	2008      	movs	r0, #8
   8081c:	4b01      	ldr	r3, [pc, #4]	; (80824 <fpga_program_setup2+0xc>)
   8081e:	4798      	blx	r3
}
   80820:	bd08      	pop	{r3, pc}
   80822:	bf00      	nop
   80824:	00083be1 	.word	0x00083be1

00080828 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   80828:	b510      	push	{r4, lr}
   8082a:	4601      	mov	r1, r0
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   8082c:	2300      	movs	r3, #0
   8082e:	461a      	mov	r2, r3
   80830:	4801      	ldr	r0, [pc, #4]	; (80838 <fpga_program_sendbyte+0x10>)
   80832:	4c02      	ldr	r4, [pc, #8]	; (8083c <fpga_program_sendbyte+0x14>)
   80834:	47a0      	blx	r4
		#endif
	#endif
}
   80836:	bd10      	pop	{r4, pc}
   80838:	40008000 	.word	0x40008000
   8083c:	0008402b 	.word	0x0008402b

00080840 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   80840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80844:	b08d      	sub	sp, #52	; 0x34
   80846:	9103      	str	r1, [sp, #12]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   80848:	4b92      	ldr	r3, [pc, #584]	; (80a94 <ISPProtocol_ProgramMemory+0x254>)
   8084a:	8999      	ldrh	r1, [r3, #12]
   8084c:	2909      	cmp	r1, #9
   8084e:	d005      	beq.n	8085c <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80850:	4891      	ldr	r0, [pc, #580]	; (80a98 <ISPProtocol_ProgramMemory+0x258>)
   80852:	4b92      	ldr	r3, [pc, #584]	; (80a9c <ISPProtocol_ProgramMemory+0x25c>)
   80854:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   80856:	b00d      	add	sp, #52	; 0x34
   80858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8085c:	4683      	mov	fp, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   8085e:	4b8d      	ldr	r3, [pc, #564]	; (80a94 <ISPProtocol_ProgramMemory+0x254>)
   80860:	689a      	ldr	r2, [r3, #8]
   80862:	ab09      	add	r3, sp, #36	; 0x24
   80864:	6810      	ldr	r0, [r2, #0]
   80866:	6851      	ldr	r1, [r2, #4]
   80868:	c303      	stmia	r3!, {r0, r1}
   8086a:	8912      	ldrh	r2, [r2, #8]
   8086c:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   8086e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   80872:	9305      	str	r3, [sp, #20]
   80874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80878:	d813      	bhi.n	808a2 <ISPProtocol_ProgramMemory+0x62>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   8087a:	f1bb 0f13 	cmp.w	fp, #19
   8087e:	bf0c      	ite	eq
   80880:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   80884:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   80888:	9306      	str	r3, [sp, #24]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   8088a:	4b85      	ldr	r3, [pc, #532]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   8088c:	681b      	ldr	r3, [r3, #0]
   8088e:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80890:	9b05      	ldr	r3, [sp, #20]
   80892:	2b00      	cmp	r3, #0
   80894:	d043      	beq.n	8091e <ISPProtocol_ProgramMemory+0xde>
   80896:	2400      	movs	r4, #0
	uint16_t PollAddress       = 0;
   80898:	9404      	str	r4, [sp, #16]
			MustLoadExtendedAddress = false;
   8089a:	4627      	mov	r7, r4
   8089c:	f8cd b008 	str.w	fp, [sp, #8]
   808a0:	e0a6      	b.n	809f0 <ISPProtocol_ProgramMemory+0x1b0>
		avrisp_status_payload[0] = V2Command;
   808a2:	4b80      	ldr	r3, [pc, #512]	; (80aa4 <ISPProtocol_ProgramMemory+0x264>)
   808a4:	f883 b000 	strb.w	fp, [r3]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   808a8:	22c0      	movs	r2, #192	; 0xc0
   808aa:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   808ac:	4b7e      	ldr	r3, [pc, #504]	; (80aa8 <ISPProtocol_ProgramMemory+0x268>)
   808ae:	2202      	movs	r2, #2
   808b0:	801a      	strh	r2, [r3, #0]
		return;
   808b2:	e7d0      	b.n	80856 <ISPProtocol_ProgramMemory+0x16>
			ISPTarget_LoadExtendedAddress();
   808b4:	4b7d      	ldr	r3, [pc, #500]	; (80aac <ISPProtocol_ProgramMemory+0x26c>)
   808b6:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   808b8:	4b7d      	ldr	r3, [pc, #500]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   808ba:	701f      	strb	r7, [r3, #0]
   808bc:	e0a3      	b.n	80a06 <ISPProtocol_ProgramMemory+0x1c6>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   808be:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   808c2:	f043 0308 	orr.w	r3, r3, #8
   808c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   808ca:	4b75      	ldr	r3, [pc, #468]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   808cc:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   808ce:	f018 0f01 	tst.w	r8, #1
   808d2:	f000 80d4 	beq.w	80a7e <ISPProtocol_ProgramMemory+0x23e>
			PollAddress = (CurrentAddress & 0xFFFF);
   808d6:	9304      	str	r3, [sp, #16]
			CurrentAddress++;
   808d8:	4a71      	ldr	r2, [pc, #452]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   808da:	6813      	ldr	r3, [r2, #0]
   808dc:	3301      	adds	r3, #1
   808de:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   808e0:	9a02      	ldr	r2, [sp, #8]
   808e2:	2a13      	cmp	r2, #19
   808e4:	d17f      	bne.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
   808e6:	b29b      	uxth	r3, r3
   808e8:	2b00      	cmp	r3, #0
   808ea:	d17c      	bne.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
			  MustLoadExtendedAddress = true;
   808ec:	2301      	movs	r3, #1
   808ee:	4a70      	ldr	r2, [pc, #448]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   808f0:	7013      	strb	r3, [r2, #0]
   808f2:	e078      	b.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
   808f4:	9304      	str	r3, [sp, #16]
   808f6:	e061      	b.n	809bc <ISPProtocol_ProgramMemory+0x17c>
			PollAddress = (CurrentAddress & 0xFFFF);
   808f8:	9304      	str	r3, [sp, #16]
   808fa:	e06d      	b.n	809d8 <ISPProtocol_ProgramMemory+0x198>
   808fc:	f8dd b008 	ldr.w	fp, [sp, #8]
   80900:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   80902:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
   80906:	f99d 4026 	ldrsb.w	r4, [sp, #38]	; 0x26
   8090a:	2c00      	cmp	r4, #0
   8090c:	db0e      	blt.n	8092c <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   8090e:	4a65      	ldr	r2, [pc, #404]	; (80aa4 <ISPProtocol_ProgramMemory+0x264>)
   80910:	f882 b000 	strb.w	fp, [r2]
	avrisp_status_payload[1] = ProgrammingStatus;
   80914:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80916:	4b64      	ldr	r3, [pc, #400]	; (80aa8 <ISPProtocol_ProgramMemory+0x268>)
   80918:	2202      	movs	r2, #2
   8091a:	801a      	strh	r2, [r3, #0]
   8091c:	e79b      	b.n	80856 <ISPProtocol_ProgramMemory+0x16>
	uint16_t PollAddress       = 0;
   8091e:	9b05      	ldr	r3, [sp, #20]
   80920:	9304      	str	r3, [sp, #16]
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   80922:	2300      	movs	r3, #0
   80924:	e7ed      	b.n	80902 <ISPProtocol_ProgramMemory+0xc2>
   80926:	f8dd b008 	ldr.w	fp, [sp, #8]
   8092a:	e7ea      	b.n	80902 <ISPProtocol_ProgramMemory+0xc2>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   8092c:	4f61      	ldr	r7, [pc, #388]	; (80ab4 <ISPProtocol_ProgramMemory+0x274>)
   8092e:	2300      	movs	r3, #0
   80930:	461a      	mov	r2, r3
   80932:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   80936:	4638      	mov	r0, r7
   80938:	4e5f      	ldr	r6, [pc, #380]	; (80ab8 <ISPProtocol_ProgramMemory+0x278>)
   8093a:	47b0      	blx	r6
   8093c:	2300      	movs	r3, #0
   8093e:	461a      	mov	r2, r3
   80940:	9907      	ldr	r1, [sp, #28]
   80942:	f3c1 2107 	ubfx	r1, r1, #8, #8
   80946:	4638      	mov	r0, r7
   80948:	47b0      	blx	r6
   8094a:	2300      	movs	r3, #0
   8094c:	461a      	mov	r2, r3
   8094e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   80952:	4638      	mov	r0, r7
   80954:	47b0      	blx	r6
   80956:	2300      	movs	r3, #0
   80958:	461a      	mov	r2, r3
   8095a:	4619      	mov	r1, r3
   8095c:	4638      	mov	r0, r7
   8095e:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   80960:	f015 0f20 	tst.w	r5, #32
   80964:	d007      	beq.n	80976 <ISPProtocol_ProgramMemory+0x136>
   80966:	9b04      	ldr	r3, [sp, #16]
   80968:	b92b      	cbnz	r3, 80976 <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   8096a:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   8096e:	f043 0310 	orr.w	r3, r3, #16
   80972:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   80976:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   8097a:	9300      	str	r3, [sp, #0]
   8097c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80980:	9a06      	ldr	r2, [sp, #24]
   80982:	9904      	ldr	r1, [sp, #16]
   80984:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80988:	4c4c      	ldr	r4, [pc, #304]	; (80abc <ISPProtocol_ProgramMemory+0x27c>)
   8098a:	47a0      	blx	r4
   8098c:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   8098e:	f1bb 0f13 	cmp.w	fp, #19
   80992:	d1bc      	bne.n	8090e <ISPProtocol_ProgramMemory+0xce>
   80994:	4a42      	ldr	r2, [pc, #264]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   80996:	8812      	ldrh	r2, [r2, #0]
   80998:	2a00      	cmp	r2, #0
   8099a:	d1b8      	bne.n	8090e <ISPProtocol_ProgramMemory+0xce>
		  MustLoadExtendedAddress = true;
   8099c:	4a44      	ldr	r2, [pc, #272]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   8099e:	2101      	movs	r1, #1
   809a0:	7011      	strb	r1, [r2, #0]
   809a2:	e7b4      	b.n	8090e <ISPProtocol_ProgramMemory+0xce>
			CurrentAddress++;
   809a4:	4a3e      	ldr	r2, [pc, #248]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   809a6:	6813      	ldr	r3, [r2, #0]
   809a8:	3301      	adds	r3, #1
   809aa:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   809ac:	e01b      	b.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   809ae:	f018 0f01 	tst.w	r8, #1
   809b2:	d067      	beq.n	80a84 <ISPProtocol_ProgramMemory+0x244>
   809b4:	e010      	b.n	809d8 <ISPProtocol_ProgramMemory+0x198>
   809b6:	f018 0f01 	tst.w	r8, #1
   809ba:	d10d      	bne.n	809d8 <ISPProtocol_ProgramMemory+0x198>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   809bc:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   809c0:	9300      	str	r3, [sp, #0]
   809c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   809c6:	9a06      	ldr	r2, [sp, #24]
   809c8:	9904      	ldr	r1, [sp, #16]
   809ca:	4640      	mov	r0, r8
   809cc:	4d3b      	ldr	r5, [pc, #236]	; (80abc <ISPProtocol_ProgramMemory+0x27c>)
   809ce:	47a8      	blx	r5
			if (ProgrammingStatus != STATUS_CMD_OK)
   809d0:	4603      	mov	r3, r0
   809d2:	2800      	cmp	r0, #0
   809d4:	d1a7      	bne.n	80926 <ISPProtocol_ProgramMemory+0xe6>
			PollAddress = 0;
   809d6:	9704      	str	r7, [sp, #16]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   809d8:	f014 0f01 	tst.w	r4, #1
   809dc:	f47f af7c 	bne.w	808d8 <ISPProtocol_ProgramMemory+0x98>
   809e0:	9b02      	ldr	r3, [sp, #8]
   809e2:	2b15      	cmp	r3, #21
   809e4:	d0de      	beq.n	809a4 <ISPProtocol_ProgramMemory+0x164>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   809e6:	3401      	adds	r4, #1
   809e8:	b2a4      	uxth	r4, r4
   809ea:	9b05      	ldr	r3, [sp, #20]
   809ec:	42a3      	cmp	r3, r4
   809ee:	d085      	beq.n	808fc <ISPProtocol_ProgramMemory+0xbc>
		uint8_t ByteToWrite     = *(NextWriteByte++);
   809f0:	9b03      	ldr	r3, [sp, #12]
   809f2:	f813 bb01 	ldrb.w	fp, [r3], #1
   809f6:	9303      	str	r3, [sp, #12]
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   809f8:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   809fc:	4b2c      	ldr	r3, [pc, #176]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   809fe:	781b      	ldrb	r3, [r3, #0]
   80a00:	2b00      	cmp	r3, #0
   80a02:	f47f af57 	bne.w	808b4 <ISPProtocol_ProgramMemory+0x74>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80a06:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   80a0a:	4e2a      	ldr	r6, [pc, #168]	; (80ab4 <ISPProtocol_ProgramMemory+0x274>)
   80a0c:	463b      	mov	r3, r7
   80a0e:	463a      	mov	r2, r7
   80a10:	4649      	mov	r1, r9
   80a12:	4630      	mov	r0, r6
   80a14:	4d28      	ldr	r5, [pc, #160]	; (80ab8 <ISPProtocol_ProgramMemory+0x278>)
   80a16:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80a18:	f8df a084 	ldr.w	sl, [pc, #132]	; 80aa0 <ISPProtocol_ProgramMemory+0x260>
   80a1c:	463b      	mov	r3, r7
   80a1e:	463a      	mov	r2, r7
   80a20:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80a24:	4630      	mov	r0, r6
   80a26:	47a8      	blx	r5
   80a28:	463b      	mov	r3, r7
   80a2a:	463a      	mov	r2, r7
   80a2c:	f89a 1000 	ldrb.w	r1, [sl]
   80a30:	4630      	mov	r0, r6
   80a32:	47a8      	blx	r5
   80a34:	463b      	mov	r3, r7
   80a36:	463a      	mov	r2, r7
   80a38:	4659      	mov	r1, fp
   80a3a:	4630      	mov	r0, r6
   80a3c:	47a8      	blx	r5
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80a3e:	9b02      	ldr	r3, [sp, #8]
   80a40:	2b13      	cmp	r3, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80a42:	bf04      	itt	eq
   80a44:	f089 0908 	eoreq.w	r9, r9, #8
   80a48:	f88d 9028 	strbeq.w	r9, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80a4c:	9b04      	ldr	r3, [sp, #16]
   80a4e:	2b00      	cmp	r3, #0
   80a50:	d1b1      	bne.n	809b6 <ISPProtocol_ProgramMemory+0x176>
   80a52:	9b06      	ldr	r3, [sp, #24]
   80a54:	455b      	cmp	r3, fp
   80a56:	d0aa      	beq.n	809ae <ISPProtocol_ProgramMemory+0x16e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80a58:	f014 0f01 	tst.w	r4, #1
   80a5c:	d003      	beq.n	80a66 <ISPProtocol_ProgramMemory+0x226>
   80a5e:	9b02      	ldr	r3, [sp, #8]
   80a60:	2b13      	cmp	r3, #19
   80a62:	f43f af2c 	beq.w	808be <ISPProtocol_ProgramMemory+0x7e>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80a66:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a6a:	f023 0308 	bic.w	r3, r3, #8
   80a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80a72:	4b0b      	ldr	r3, [pc, #44]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   80a74:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a76:	f018 0f01 	tst.w	r8, #1
   80a7a:	f47f af3d 	bne.w	808f8 <ISPProtocol_ProgramMemory+0xb8>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80a7e:	2b00      	cmp	r3, #0
   80a80:	f47f af38 	bne.w	808f4 <ISPProtocol_ProgramMemory+0xb4>
   80a84:	f018 0f08 	tst.w	r8, #8
   80a88:	d198      	bne.n	809bc <ISPProtocol_ProgramMemory+0x17c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80a8a:	f028 0806 	bic.w	r8, r8, #6
   80a8e:	f048 0802 	orr.w	r8, r8, #2
   80a92:	e793      	b.n	809bc <ISPProtocol_ProgramMemory+0x17c>
   80a94:	2000269c 	.word	0x2000269c
   80a98:	0008cac4 	.word	0x0008cac4
   80a9c:	00085f49 	.word	0x00085f49
   80aa0:	2000267c 	.word	0x2000267c
   80aa4:	2000265c 	.word	0x2000265c
   80aa8:	2000265a 	.word	0x2000265a
   80aac:	00081121 	.word	0x00081121
   80ab0:	20002658 	.word	0x20002658
   80ab4:	40008000 	.word	0x40008000
   80ab8:	0008402b 	.word	0x0008402b
   80abc:	00081161 	.word	0x00081161

00080ac0 <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   80ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ac4:	b085      	sub	sp, #20
   80ac6:	9000      	str	r0, [sp, #0]
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80ac8:	4b45      	ldr	r3, [pc, #276]	; (80be0 <ISPProtocol_ReadMemory+0x120>)
   80aca:	899b      	ldrh	r3, [r3, #12]
   80acc:	2b03      	cmp	r3, #3
   80ace:	d118      	bne.n	80b02 <ISPProtocol_ReadMemory+0x42>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80ad0:	4b43      	ldr	r3, [pc, #268]	; (80be0 <ISPProtocol_ReadMemory+0x120>)
   80ad2:	689b      	ldr	r3, [r3, #8]
   80ad4:	681b      	ldr	r3, [r3, #0]
   80ad6:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80ad8:	4a42      	ldr	r2, [pc, #264]	; (80be4 <ISPProtocol_ReadMemory+0x124>)
   80ada:	9800      	ldr	r0, [sp, #0]
   80adc:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80ade:	20c0      	movs	r0, #192	; 0xc0
   80ae0:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   80ae2:	4a41      	ldr	r2, [pc, #260]	; (80be8 <ISPProtocol_ReadMemory+0x128>)
   80ae4:	2002      	movs	r0, #2
   80ae6:	8010      	strh	r0, [r2, #0]
		
	//printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80ae8:	b29b      	uxth	r3, r3
   80aea:	9301      	str	r3, [sp, #4]
   80aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80af0:	d872      	bhi.n	80bd8 <ISPProtocol_ReadMemory+0x118>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80af2:	2b00      	cmp	r3, #0
   80af4:	d06a      	beq.n	80bcc <ISPProtocol_ReadMemory+0x10c>
   80af6:	f101 38ff 	add.w	r8, r1, #4294967295
   80afa:	2700      	movs	r7, #0
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
   80afc:	463e      	mov	r6, r7
   80afe:	4c3b      	ldr	r4, [pc, #236]	; (80bec <ISPProtocol_ReadMemory+0x12c>)
   80b00:	e026      	b.n	80b50 <ISPProtocol_ReadMemory+0x90>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80b02:	4619      	mov	r1, r3
   80b04:	483a      	ldr	r0, [pc, #232]	; (80bf0 <ISPProtocol_ReadMemory+0x130>)
   80b06:	4b3b      	ldr	r3, [pc, #236]	; (80bf4 <ISPProtocol_ReadMemory+0x134>)
   80b08:	4798      	blx	r3
		return;
   80b0a:	e065      	b.n	80bd8 <ISPProtocol_ReadMemory+0x118>
			ISPTarget_LoadExtendedAddress();
   80b0c:	4b3a      	ldr	r3, [pc, #232]	; (80bf8 <ISPProtocol_ReadMemory+0x138>)
   80b0e:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80b10:	4b3a      	ldr	r3, [pc, #232]	; (80bfc <ISPProtocol_ReadMemory+0x13c>)
   80b12:	701e      	strb	r6, [r3, #0]
   80b14:	e022      	b.n	80b5c <ISPProtocol_ReadMemory+0x9c>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80b16:	f089 0908 	eor.w	r9, r9, #8
   80b1a:	f88d 900e 	strb.w	r9, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80b1e:	f01b 0f01 	tst.w	fp, #1
   80b22:	d010      	beq.n	80b46 <ISPProtocol_ReadMemory+0x86>
		{
			CurrentAddress++;
   80b24:	4a36      	ldr	r2, [pc, #216]	; (80c00 <ISPProtocol_ReadMemory+0x140>)
   80b26:	6813      	ldr	r3, [r2, #0]
   80b28:	3301      	adds	r3, #1
   80b2a:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80b2c:	e006      	b.n	80b3c <ISPProtocol_ReadMemory+0x7c>
			CurrentAddress++;
   80b2e:	4a34      	ldr	r2, [pc, #208]	; (80c00 <ISPProtocol_ReadMemory+0x140>)
   80b30:	6813      	ldr	r3, [r2, #0]
   80b32:	3301      	adds	r3, #1
   80b34:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80b36:	9a00      	ldr	r2, [sp, #0]
   80b38:	2a16      	cmp	r2, #22
   80b3a:	d004      	beq.n	80b46 <ISPProtocol_ReadMemory+0x86>
   80b3c:	b29b      	uxth	r3, r3
   80b3e:	b913      	cbnz	r3, 80b46 <ISPProtocol_ReadMemory+0x86>
			  MustLoadExtendedAddress = true;
   80b40:	2301      	movs	r3, #1
   80b42:	4a2e      	ldr	r2, [pc, #184]	; (80bfc <ISPProtocol_ReadMemory+0x13c>)
   80b44:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80b46:	3701      	adds	r7, #1
   80b48:	b2bb      	uxth	r3, r7
   80b4a:	9a01      	ldr	r2, [sp, #4]
   80b4c:	429a      	cmp	r2, r3
   80b4e:	d93d      	bls.n	80bcc <ISPProtocol_ReadMemory+0x10c>
   80b50:	fa1f fb87 	uxth.w	fp, r7
		if (MustLoadExtendedAddress)
   80b54:	4b29      	ldr	r3, [pc, #164]	; (80bfc <ISPProtocol_ReadMemory+0x13c>)
   80b56:	781b      	ldrb	r3, [r3, #0]
   80b58:	2b00      	cmp	r3, #0
   80b5a:	d1d7      	bne.n	80b0c <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80b5c:	f89d 900e 	ldrb.w	r9, [sp, #14]
   80b60:	4633      	mov	r3, r6
   80b62:	4632      	mov	r2, r6
   80b64:	4649      	mov	r1, r9
   80b66:	4620      	mov	r0, r4
   80b68:	4d26      	ldr	r5, [pc, #152]	; (80c04 <ISPProtocol_ReadMemory+0x144>)
   80b6a:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80b6c:	f8df a090 	ldr.w	sl, [pc, #144]	; 80c00 <ISPProtocol_ReadMemory+0x140>
   80b70:	4633      	mov	r3, r6
   80b72:	4632      	mov	r2, r6
   80b74:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80b78:	4620      	mov	r0, r4
   80b7a:	47a8      	blx	r5
   80b7c:	4633      	mov	r3, r6
   80b7e:	4632      	mov	r2, r6
   80b80:	f89a 1000 	ldrb.w	r1, [sl]
   80b84:	4620      	mov	r0, r4
   80b86:	47a8      	blx	r5
   80b88:	4633      	mov	r3, r6
   80b8a:	4632      	mov	r2, r6
   80b8c:	4631      	mov	r1, r6
   80b8e:	4620      	mov	r0, r4
   80b90:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80b92:	6923      	ldr	r3, [r4, #16]
   80b94:	f413 7f00 	tst.w	r3, #512	; 0x200
   80b98:	d0fb      	beq.n	80b92 <ISPProtocol_ReadMemory+0xd2>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   80b9a:	f10d 0209 	add.w	r2, sp, #9
   80b9e:	f10d 010a 	add.w	r1, sp, #10
   80ba2:	4620      	mov	r0, r4
   80ba4:	4b18      	ldr	r3, [pc, #96]	; (80c08 <ISPProtocol_ReadMemory+0x148>)
   80ba6:	4798      	blx	r3
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   80ba8:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80bac:	f808 3f01 	strb.w	r3, [r8, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80bb0:	9b00      	ldr	r3, [sp, #0]
   80bb2:	2b14      	cmp	r3, #20
   80bb4:	d0af      	beq.n	80b16 <ISPProtocol_ReadMemory+0x56>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80bb6:	f01b 0f01 	tst.w	fp, #1
   80bba:	d1b8      	bne.n	80b2e <ISPProtocol_ReadMemory+0x6e>
   80bbc:	9b00      	ldr	r3, [sp, #0]
   80bbe:	2b16      	cmp	r3, #22
   80bc0:	d1c1      	bne.n	80b46 <ISPProtocol_ReadMemory+0x86>
			CurrentAddress++;
   80bc2:	4a0f      	ldr	r2, [pc, #60]	; (80c00 <ISPProtocol_ReadMemory+0x140>)
   80bc4:	6813      	ldr	r3, [r2, #0]
   80bc6:	3301      	adds	r3, #1
   80bc8:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80bca:	e7bc      	b.n	80b46 <ISPProtocol_ReadMemory+0x86>
		}
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80bcc:	4b05      	ldr	r3, [pc, #20]	; (80be4 <ISPProtocol_ReadMemory+0x124>)
   80bce:	2200      	movs	r2, #0
   80bd0:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80bd2:	4b05      	ldr	r3, [pc, #20]	; (80be8 <ISPProtocol_ReadMemory+0x128>)
   80bd4:	2202      	movs	r2, #2
   80bd6:	801a      	strh	r2, [r3, #0]
}
   80bd8:	b005      	add	sp, #20
   80bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80bde:	bf00      	nop
   80be0:	2000269c 	.word	0x2000269c
   80be4:	2000265c 	.word	0x2000265c
   80be8:	2000265a 	.word	0x2000265a
   80bec:	40008000 	.word	0x40008000
   80bf0:	0008ca6c 	.word	0x0008ca6c
   80bf4:	00085f49 	.word	0x00085f49
   80bf8:	00081121 	.word	0x00081121
   80bfc:	20002658 	.word	0x20002658
   80c00:	2000267c 	.word	0x2000267c
   80c04:	0008402b 	.word	0x0008402b
   80c08:	00083ffd 	.word	0x00083ffd

00080c0c <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   80c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c10:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80c12:	4b21      	ldr	r3, [pc, #132]	; (80c98 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c14:	8999      	ldrh	r1, [r3, #12]
   80c16:	2905      	cmp	r1, #5
   80c18:	d139      	bne.n	80c8e <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   80c1a:	4607      	mov	r7, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80c1c:	4b1e      	ldr	r3, [pc, #120]	; (80c98 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c1e:	689b      	ldr	r3, [r3, #8]
   80c20:	6818      	ldr	r0, [r3, #0]
   80c22:	9002      	str	r0, [sp, #8]
   80c24:	791a      	ldrb	r2, [r3, #4]
   80c26:	f88d 200c 	strb.w	r2, [sp, #12]
   80c2a:	f893 b000 	ldrb.w	fp, [r3]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80c2e:	f10d 0609 	add.w	r6, sp, #9
   80c32:	ad01      	add	r5, sp, #4
   80c34:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80c38:	4c18      	ldr	r4, [pc, #96]	; (80c9c <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80c3a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80cb0 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   80c3e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80cb4 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
		  spi_write(SPI, data, 0, 0);
   80c42:	2300      	movs	r3, #0
   80c44:	461a      	mov	r2, r3
   80c46:	f816 1b01 	ldrb.w	r1, [r6], #1
   80c4a:	4620      	mov	r0, r4
   80c4c:	47c8      	blx	r9
   80c4e:	6923      	ldr	r3, [r4, #16]
   80c50:	f413 7f00 	tst.w	r3, #512	; 0x200
   80c54:	d0fb      	beq.n	80c4e <ISPProtocol_ReadFuseLockSigOSCCAL+0x42>
			spi_read(SPI, &ReceivedByte, &_);
   80c56:	f10d 0201 	add.w	r2, sp, #1
   80c5a:	f10d 0102 	add.w	r1, sp, #2
   80c5e:	4620      	mov	r0, r4
   80c60:	47c0      	blx	r8
			return  ReceivedByte;
   80c62:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80c66:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80c6a:	4555      	cmp	r5, sl
   80c6c:	d1e9      	bne.n	80c42 <ISPProtocol_ReadFuseLockSigOSCCAL+0x36>

	avrisp_status_payload[0] = V2Command;
   80c6e:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
   80c70:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80c72:	2200      	movs	r2, #0
   80c74:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80c76:	a904      	add	r1, sp, #16
   80c78:	448b      	add	fp, r1
   80c7a:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80c7e:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80c80:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80c82:	4b08      	ldr	r3, [pc, #32]	; (80ca4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   80c84:	2204      	movs	r2, #4
   80c86:	801a      	strh	r2, [r3, #0]
}
   80c88:	b005      	add	sp, #20
   80c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80c8e:	4806      	ldr	r0, [pc, #24]	; (80ca8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   80c90:	4b06      	ldr	r3, [pc, #24]	; (80cac <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   80c92:	4798      	blx	r3
		return;
   80c94:	e7f8      	b.n	80c88 <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   80c96:	bf00      	nop
   80c98:	2000269c 	.word	0x2000269c
   80c9c:	40008000 	.word	0x40008000
   80ca0:	2000265c 	.word	0x2000265c
   80ca4:	2000265a 	.word	0x2000265a
   80ca8:	0008cac4 	.word	0x0008cac4
   80cac:	00085f49 	.word	0x00085f49
   80cb0:	0008402b 	.word	0x0008402b
   80cb4:	00083ffd 	.word	0x00083ffd

00080cb8 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   80cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80cbc:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80cbe:	4b13      	ldr	r3, [pc, #76]	; (80d0c <ISPProtocol_WriteFuseLock+0x54>)
   80cc0:	8999      	ldrh	r1, [r3, #12]
   80cc2:	2904      	cmp	r1, #4
   80cc4:	d11d      	bne.n	80d02 <ISPProtocol_WriteFuseLock+0x4a>
   80cc6:	4605      	mov	r5, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80cc8:	4b10      	ldr	r3, [pc, #64]	; (80d0c <ISPProtocol_WriteFuseLock+0x54>)
   80cca:	689b      	ldr	r3, [r3, #8]
   80ccc:	681b      	ldr	r3, [r3, #0]
   80cce:	9301      	str	r3, [sp, #4]

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80cd0:	ac01      	add	r4, sp, #4
   80cd2:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   80cd6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80d24 <ISPProtocol_WriteFuseLock+0x6c>
   80cda:	2700      	movs	r7, #0
   80cdc:	4e0c      	ldr	r6, [pc, #48]	; (80d10 <ISPProtocol_WriteFuseLock+0x58>)
   80cde:	463b      	mov	r3, r7
   80ce0:	463a      	mov	r2, r7
   80ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
   80ce6:	4640      	mov	r0, r8
   80ce8:	47b0      	blx	r6
   80cea:	454c      	cmp	r4, r9
   80cec:	d1f7      	bne.n	80cde <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80cee:	4b09      	ldr	r3, [pc, #36]	; (80d14 <ISPProtocol_WriteFuseLock+0x5c>)
   80cf0:	701d      	strb	r5, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80cf2:	2200      	movs	r2, #0
   80cf4:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80cf6:	4b08      	ldr	r3, [pc, #32]	; (80d18 <ISPProtocol_WriteFuseLock+0x60>)
   80cf8:	2202      	movs	r2, #2
   80cfa:	801a      	strh	r2, [r3, #0]
}
   80cfc:	b003      	add	sp, #12
   80cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80d02:	4806      	ldr	r0, [pc, #24]	; (80d1c <ISPProtocol_WriteFuseLock+0x64>)
   80d04:	4b06      	ldr	r3, [pc, #24]	; (80d20 <ISPProtocol_WriteFuseLock+0x68>)
   80d06:	4798      	blx	r3
		return;
   80d08:	e7f8      	b.n	80cfc <ISPProtocol_WriteFuseLock+0x44>
   80d0a:	bf00      	nop
   80d0c:	2000269c 	.word	0x2000269c
   80d10:	0008402b 	.word	0x0008402b
   80d14:	2000265c 	.word	0x2000265c
   80d18:	2000265a 	.word	0x2000265a
   80d1c:	0008cac4 	.word	0x0008cac4
   80d20:	00085f49 	.word	0x00085f49
   80d24:	40008000 	.word	0x40008000

00080d28 <ISPProtocol_SPIMulti>:
/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
	//Not implemented for this device, alternative methods of accessing SPI interface present
	;
}
   80d28:	4770      	bx	lr
	...

00080d2c <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80d2c:	b900      	cbnz	r0, 80d30 <ISPProtocol_DelayMS+0x4>
   80d2e:	4770      	bx	lr
{
   80d30:	b538      	push	{r3, r4, r5, lr}
   80d32:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80d34:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80d38:	2300      	movs	r3, #0
   80d3a:	4806      	ldr	r0, [pc, #24]	; (80d54 <ISPProtocol_DelayMS+0x28>)
   80d3c:	f243 64af 	movw	r4, #13999	; 0x36af
   80d40:	2500      	movs	r5, #0
   80d42:	fbe0 4501 	umlal	r4, r5, r0, r1
   80d46:	4620      	mov	r0, r4
   80d48:	4629      	mov	r1, r5
   80d4a:	4c03      	ldr	r4, [pc, #12]	; (80d58 <ISPProtocol_DelayMS+0x2c>)
   80d4c:	47a0      	blx	r4
   80d4e:	4b03      	ldr	r3, [pc, #12]	; (80d5c <ISPProtocol_DelayMS+0x30>)
   80d50:	4798      	blx	r3
}
   80d52:	bd38      	pop	{r3, r4, r5, pc}
   80d54:	05b8d800 	.word	0x05b8d800
   80d58:	00085c09 	.word	0x00085c09
   80d5c:	20000087 	.word	0x20000087

00080d60 <ISPProtocol_EnterISPMode>:
{
   80d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d64:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   80d66:	4b42      	ldr	r3, [pc, #264]	; (80e70 <ISPProtocol_EnterISPMode+0x110>)
   80d68:	8999      	ldrh	r1, [r3, #12]
   80d6a:	290b      	cmp	r1, #11
   80d6c:	d003      	beq.n	80d76 <ISPProtocol_EnterISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80d6e:	4841      	ldr	r0, [pc, #260]	; (80e74 <ISPProtocol_EnterISPMode+0x114>)
   80d70:	4b41      	ldr	r3, [pc, #260]	; (80e78 <ISPProtocol_EnterISPMode+0x118>)
   80d72:	4798      	blx	r3
		return;
   80d74:	e074      	b.n	80e60 <ISPProtocol_EnterISPMode+0x100>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80d76:	4b3e      	ldr	r3, [pc, #248]	; (80e70 <ISPProtocol_EnterISPMode+0x110>)
   80d78:	689b      	ldr	r3, [r3, #8]
   80d7a:	aa07      	add	r2, sp, #28
   80d7c:	6818      	ldr	r0, [r3, #0]
   80d7e:	6859      	ldr	r1, [r3, #4]
   80d80:	c203      	stmia	r2!, {r0, r1}
   80d82:	8918      	ldrh	r0, [r3, #8]
   80d84:	7a99      	ldrb	r1, [r3, #10]
   80d86:	8010      	strh	r0, [r2, #0]
   80d88:	7091      	strb	r1, [r2, #2]
   80d8a:	785e      	ldrb	r6, [r3, #1]
   80d8c:	9603      	str	r6, [sp, #12]
   80d8e:	7898      	ldrb	r0, [r3, #2]
   80d90:	78dc      	ldrb	r4, [r3, #3]
   80d92:	f893 b004 	ldrb.w	fp, [r3, #4]
   80d96:	795a      	ldrb	r2, [r3, #5]
   80d98:	9202      	str	r2, [sp, #8]
   80d9a:	799b      	ldrb	r3, [r3, #6]
   80d9c:	9301      	str	r3, [sp, #4]
	CurrentAddress = 0;
   80d9e:	4b37      	ldr	r3, [pc, #220]	; (80e7c <ISPProtocol_EnterISPMode+0x11c>)
   80da0:	2200      	movs	r2, #0
   80da2:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80da4:	4d36      	ldr	r5, [pc, #216]	; (80e80 <ISPProtocol_EnterISPMode+0x120>)
   80da6:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80da8:	4b36      	ldr	r3, [pc, #216]	; (80e84 <ISPProtocol_EnterISPMode+0x124>)
   80daa:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80dac:	2001      	movs	r0, #1
   80dae:	4b36      	ldr	r3, [pc, #216]	; (80e88 <ISPProtocol_EnterISPMode+0x128>)
   80db0:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80db2:	4630      	mov	r0, r6
   80db4:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80db6:	f104 38ff 	add.w	r8, r4, #4294967295
   80dba:	fa5f f888 	uxtb.w	r8, r8
   80dbe:	b114      	cbz	r4, 80dc6 <ISPProtocol_EnterISPMode+0x66>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80dc0:	462f      	mov	r7, r5
   80dc2:	4c32      	ldr	r4, [pc, #200]	; (80e8c <ISPProtocol_EnterISPMode+0x12c>)
   80dc4:	e01c      	b.n	80e00 <ISPProtocol_EnterISPMode+0xa0>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80dc6:	24c0      	movs	r4, #192	; 0xc0
   80dc8:	e03f      	b.n	80e4a <ISPProtocol_EnterISPMode+0xea>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80dca:	9b01      	ldr	r3, [sp, #4]
   80dcc:	2b00      	cmp	r3, #0
   80dce:	d03b      	beq.n	80e48 <ISPProtocol_EnterISPMode+0xe8>
   80dd0:	aa0a      	add	r2, sp, #40	; 0x28
   80dd2:	18d3      	adds	r3, r2, r3
   80dd4:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80dd8:	9a02      	ldr	r2, [sp, #8]
   80dda:	4293      	cmp	r3, r2
   80ddc:	d034      	beq.n	80e48 <ISPProtocol_EnterISPMode+0xe8>
			ISPTarget_ChangeTargetResetLine(false);
   80dde:	2000      	movs	r0, #0
   80de0:	4d29      	ldr	r5, [pc, #164]	; (80e88 <ISPProtocol_EnterISPMode+0x128>)
   80de2:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80de4:	9e03      	ldr	r6, [sp, #12]
   80de6:	4630      	mov	r0, r6
   80de8:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80dea:	2001      	movs	r0, #1
   80dec:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80dee:	4630      	mov	r0, r6
   80df0:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80df2:	f108 38ff 	add.w	r8, r8, #4294967295
   80df6:	fa5f f888 	uxtb.w	r8, r8
   80dfa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   80dfe:	d034      	beq.n	80e6a <ISPProtocol_EnterISPMode+0x10a>
   80e00:	4b23      	ldr	r3, [pc, #140]	; (80e90 <ISPProtocol_EnterISPMode+0x130>)
   80e02:	681b      	ldr	r3, [r3, #0]
   80e04:	b37b      	cbz	r3, 80e66 <ISPProtocol_EnterISPMode+0x106>
   80e06:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80e0a:	ad06      	add	r5, sp, #24
   80e0c:	f10d 0a1c 	add.w	sl, sp, #28
   80e10:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80ea4 <ISPProtocol_EnterISPMode+0x144>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80e14:	4658      	mov	r0, fp
   80e16:	47b8      	blx	r7
   80e18:	2300      	movs	r3, #0
   80e1a:	461a      	mov	r2, r3
   80e1c:	f816 1b01 	ldrb.w	r1, [r6], #1
   80e20:	4620      	mov	r0, r4
   80e22:	47c8      	blx	r9
   80e24:	6923      	ldr	r3, [r4, #16]
   80e26:	f413 7f00 	tst.w	r3, #512	; 0x200
   80e2a:	d0fb      	beq.n	80e24 <ISPProtocol_EnterISPMode+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80e2c:	f10d 0215 	add.w	r2, sp, #21
   80e30:	f10d 0116 	add.w	r1, sp, #22
   80e34:	4620      	mov	r0, r4
   80e36:	4b17      	ldr	r3, [pc, #92]	; (80e94 <ISPProtocol_EnterISPMode+0x134>)
   80e38:	4798      	blx	r3
			return  ReceivedByte;
   80e3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80e3e:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80e42:	4555      	cmp	r5, sl
   80e44:	d1e6      	bne.n	80e14 <ISPProtocol_EnterISPMode+0xb4>
   80e46:	e7c0      	b.n	80dca <ISPProtocol_EnterISPMode+0x6a>
			ResponseStatus = STATUS_CMD_OK;
   80e48:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   80e4a:	4621      	mov	r1, r4
   80e4c:	4812      	ldr	r0, [pc, #72]	; (80e98 <ISPProtocol_EnterISPMode+0x138>)
   80e4e:	4b0a      	ldr	r3, [pc, #40]	; (80e78 <ISPProtocol_EnterISPMode+0x118>)
   80e50:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80e52:	4b12      	ldr	r3, [pc, #72]	; (80e9c <ISPProtocol_EnterISPMode+0x13c>)
   80e54:	2210      	movs	r2, #16
   80e56:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80e58:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   80e5a:	4b11      	ldr	r3, [pc, #68]	; (80ea0 <ISPProtocol_EnterISPMode+0x140>)
   80e5c:	2202      	movs	r2, #2
   80e5e:	801a      	strh	r2, [r3, #0]
}
   80e60:	b00b      	add	sp, #44	; 0x2c
   80e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80e66:	24c0      	movs	r4, #192	; 0xc0
   80e68:	e7ef      	b.n	80e4a <ISPProtocol_EnterISPMode+0xea>
   80e6a:	24c0      	movs	r4, #192	; 0xc0
   80e6c:	e7ed      	b.n	80e4a <ISPProtocol_EnterISPMode+0xea>
   80e6e:	bf00      	nop
   80e70:	2000269c 	.word	0x2000269c
   80e74:	0008cac4 	.word	0x0008cac4
   80e78:	00085f49 	.word	0x00085f49
   80e7c:	2000267c 	.word	0x2000267c
   80e80:	00080d2d 	.word	0x00080d2d
   80e84:	00080fa1 	.word	0x00080fa1
   80e88:	00081061 	.word	0x00081061
   80e8c:	40008000 	.word	0x40008000
   80e90:	20002684 	.word	0x20002684
   80e94:	00083ffd 	.word	0x00083ffd
   80e98:	0008ca94 	.word	0x0008ca94
   80e9c:	2000265c 	.word	0x2000265c
   80ea0:	2000265a 	.word	0x2000265a
   80ea4:	0008402b 	.word	0x0008402b

00080ea8 <ISPProtocol_LeaveISPMode>:
{
   80ea8:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   80eaa:	4b0f      	ldr	r3, [pc, #60]	; (80ee8 <ISPProtocol_LeaveISPMode+0x40>)
   80eac:	8999      	ldrh	r1, [r3, #12]
   80eae:	2902      	cmp	r1, #2
   80eb0:	d003      	beq.n	80eba <ISPProtocol_LeaveISPMode+0x12>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80eb2:	480e      	ldr	r0, [pc, #56]	; (80eec <ISPProtocol_LeaveISPMode+0x44>)
   80eb4:	4b0e      	ldr	r3, [pc, #56]	; (80ef0 <ISPProtocol_LeaveISPMode+0x48>)
   80eb6:	4798      	blx	r3
}
   80eb8:	bd38      	pop	{r3, r4, r5, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80eba:	4b0b      	ldr	r3, [pc, #44]	; (80ee8 <ISPProtocol_LeaveISPMode+0x40>)
   80ebc:	689b      	ldr	r3, [r3, #8]
   80ebe:	881d      	ldrh	r5, [r3, #0]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80ec0:	b2e8      	uxtb	r0, r5
   80ec2:	4c0c      	ldr	r4, [pc, #48]	; (80ef4 <ISPProtocol_LeaveISPMode+0x4c>)
   80ec4:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80ec6:	2000      	movs	r0, #0
   80ec8:	4b0b      	ldr	r3, [pc, #44]	; (80ef8 <ISPProtocol_LeaveISPMode+0x50>)
   80eca:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80ecc:	4b0b      	ldr	r3, [pc, #44]	; (80efc <ISPProtocol_LeaveISPMode+0x54>)
   80ece:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80ed0:	0a28      	lsrs	r0, r5, #8
   80ed2:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80ed4:	4b0a      	ldr	r3, [pc, #40]	; (80f00 <ISPProtocol_LeaveISPMode+0x58>)
   80ed6:	2211      	movs	r2, #17
   80ed8:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80eda:	2200      	movs	r2, #0
   80edc:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80ede:	4b09      	ldr	r3, [pc, #36]	; (80f04 <ISPProtocol_LeaveISPMode+0x5c>)
   80ee0:	2202      	movs	r2, #2
   80ee2:	801a      	strh	r2, [r3, #0]
   80ee4:	e7e8      	b.n	80eb8 <ISPProtocol_LeaveISPMode+0x10>
   80ee6:	bf00      	nop
   80ee8:	2000269c 	.word	0x2000269c
   80eec:	0008cac4 	.word	0x0008cac4
   80ef0:	00085f49 	.word	0x00085f49
   80ef4:	00080d2d 	.word	0x00080d2d
   80ef8:	00081061 	.word	0x00081061
   80efc:	00081049 	.word	0x00081049
   80f00:	2000265c 	.word	0x2000265c
   80f04:	2000265a 	.word	0x2000265a

00080f08 <ISPProtocol_ChipErase>:
{
   80f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80f0c:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   80f0e:	4b1b      	ldr	r3, [pc, #108]	; (80f7c <ISPProtocol_ChipErase+0x74>)
   80f10:	8999      	ldrh	r1, [r3, #12]
   80f12:	2906      	cmp	r1, #6
   80f14:	d12a      	bne.n	80f6c <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   80f16:	4b19      	ldr	r3, [pc, #100]	; (80f7c <ISPProtocol_ChipErase+0x74>)
   80f18:	689b      	ldr	r3, [r3, #8]
   80f1a:	6818      	ldr	r0, [r3, #0]
   80f1c:	9000      	str	r0, [sp, #0]
   80f1e:	889a      	ldrh	r2, [r3, #4]
   80f20:	f8ad 2004 	strh.w	r2, [sp, #4]
   80f24:	f893 a000 	ldrb.w	sl, [r3]
   80f28:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   80f2c:	f10d 0402 	add.w	r4, sp, #2
   80f30:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   80f34:	4f12      	ldr	r7, [pc, #72]	; (80f80 <ISPProtocol_ChipErase+0x78>)
   80f36:	2600      	movs	r6, #0
   80f38:	4d12      	ldr	r5, [pc, #72]	; (80f84 <ISPProtocol_ChipErase+0x7c>)
   80f3a:	4633      	mov	r3, r6
   80f3c:	4632      	mov	r2, r6
   80f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
   80f42:	4638      	mov	r0, r7
   80f44:	47a8      	blx	r5
   80f46:	4544      	cmp	r4, r8
   80f48:	d1f7      	bne.n	80f3a <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   80f4a:	f1b9 0f00 	cmp.w	r9, #0
   80f4e:	d111      	bne.n	80f74 <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   80f50:	4650      	mov	r0, sl
   80f52:	4b0d      	ldr	r3, [pc, #52]	; (80f88 <ISPProtocol_ChipErase+0x80>)
   80f54:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   80f56:	4b0d      	ldr	r3, [pc, #52]	; (80f8c <ISPProtocol_ChipErase+0x84>)
   80f58:	2212      	movs	r2, #18
   80f5a:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80f5c:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   80f60:	4b0b      	ldr	r3, [pc, #44]	; (80f90 <ISPProtocol_ChipErase+0x88>)
   80f62:	2202      	movs	r2, #2
   80f64:	801a      	strh	r2, [r3, #0]
}
   80f66:	b002      	add	sp, #8
   80f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80f6c:	4809      	ldr	r0, [pc, #36]	; (80f94 <ISPProtocol_ChipErase+0x8c>)
   80f6e:	4b0a      	ldr	r3, [pc, #40]	; (80f98 <ISPProtocol_ChipErase+0x90>)
   80f70:	4798      	blx	r3
		return;
   80f72:	e7f8      	b.n	80f66 <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   80f74:	4b09      	ldr	r3, [pc, #36]	; (80f9c <ISPProtocol_ChipErase+0x94>)
   80f76:	4798      	blx	r3
   80f78:	4681      	mov	r9, r0
   80f7a:	e7ec      	b.n	80f56 <ISPProtocol_ChipErase+0x4e>
   80f7c:	2000269c 	.word	0x2000269c
   80f80:	40008000 	.word	0x40008000
   80f84:	0008402b 	.word	0x0008402b
   80f88:	00080d2d 	.word	0x00080d2d
   80f8c:	2000265c 	.word	0x2000265c
   80f90:	2000265a 	.word	0x2000265a
   80f94:	0008cab4 	.word	0x0008cab4
   80f98:	00085f49 	.word	0x00085f49
   80f9c:	000810a5 	.word	0x000810a5

00080fa0 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   80fa0:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   80fa2:	2098      	movs	r0, #152	; 0x98
   80fa4:	4b1e      	ldr	r3, [pc, #120]	; (81020 <ISPTarget_EnableTargetISP+0x80>)
   80fa6:	4798      	blx	r3
   80fa8:	4b1e      	ldr	r3, [pc, #120]	; (81024 <ISPTarget_EnableTargetISP+0x84>)
   80faa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   80fae:	4c1e      	ldr	r4, [pc, #120]	; (81028 <ISPTarget_EnableTargetISP+0x88>)
   80fb0:	4620      	mov	r0, r4
   80fb2:	4b1e      	ldr	r3, [pc, #120]	; (8102c <ISPTarget_EnableTargetISP+0x8c>)
   80fb4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80fb6:	2380      	movs	r3, #128	; 0x80
   80fb8:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80fba:	6863      	ldr	r3, [r4, #4]
   80fbc:	f043 0301 	orr.w	r3, r3, #1
   80fc0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80fc2:	6863      	ldr	r3, [r4, #4]
   80fc4:	f043 0310 	orr.w	r3, r3, #16
   80fc8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80fca:	6863      	ldr	r3, [r4, #4]
   80fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80fd0:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   80fd2:	4917      	ldr	r1, [pc, #92]	; (81030 <ISPTarget_EnableTargetISP+0x90>)
   80fd4:	4628      	mov	r0, r5
   80fd6:	4b17      	ldr	r3, [pc, #92]	; (81034 <ISPTarget_EnableTargetISP+0x94>)
   80fd8:	4798      	blx	r3
	if (bauddiv < 0){
		bauddiv = 255;
   80fda:	1e04      	subs	r4, r0, #0
   80fdc:	bfb8      	it	lt
   80fde:	24ff      	movlt	r4, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   80fe0:	4d11      	ldr	r5, [pc, #68]	; (81028 <ISPTarget_EnableTargetISP+0x88>)
   80fe2:	2200      	movs	r2, #0
   80fe4:	4611      	mov	r1, r2
   80fe6:	4628      	mov	r0, r5
   80fe8:	4b13      	ldr	r3, [pc, #76]	; (81038 <ISPTarget_EnableTargetISP+0x98>)
   80fea:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80fec:	2201      	movs	r2, #1
   80fee:	2100      	movs	r1, #0
   80ff0:	4628      	mov	r0, r5
   80ff2:	4b12      	ldr	r3, [pc, #72]	; (8103c <ISPTarget_EnableTargetISP+0x9c>)
   80ff4:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   80ff6:	b2e2      	uxtb	r2, r4
   80ff8:	2100      	movs	r1, #0
   80ffa:	4628      	mov	r0, r5
   80ffc:	4b10      	ldr	r3, [pc, #64]	; (81040 <ISPTarget_EnableTargetISP+0xa0>)
   80ffe:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81000:	2301      	movs	r3, #1
   81002:	602b      	str	r3, [r5, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   81004:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81008:	200e      	movs	r0, #14
   8100a:	4c0e      	ldr	r4, [pc, #56]	; (81044 <ISPTarget_EnableTargetISP+0xa4>)
   8100c:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   8100e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81012:	200d      	movs	r0, #13
   81014:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   81016:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8101a:	200f      	movs	r0, #15
   8101c:	47a0      	blx	r4
#endif

}
   8101e:	bd38      	pop	{r3, r4, r5, pc}
   81020:	00082251 	.word	0x00082251
   81024:	200002ec 	.word	0x200002ec
   81028:	40008000 	.word	0x40008000
   8102c:	00083fdd 	.word	0x00083fdd
   81030:	05b8d800 	.word	0x05b8d800
   81034:	0008409b 	.word	0x0008409b
   81038:	0008405f 	.word	0x0008405f
   8103c:	0008407d 	.word	0x0008407d
   81040:	000840b1 	.word	0x000840b1
   81044:	00083c15 	.word	0x00083c15

00081048 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   81048:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   8104a:	4803      	ldr	r0, [pc, #12]	; (81058 <ISPTarget_DisableTargetISP+0x10>)
   8104c:	2302      	movs	r3, #2
   8104e:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   81050:	4b02      	ldr	r3, [pc, #8]	; (8105c <ISPTarget_DisableTargetISP+0x14>)
   81052:	4798      	blx	r3
#endif
}
   81054:	bd08      	pop	{r3, pc}
   81056:	bf00      	nop
   81058:	40008000 	.word	0x40008000
   8105c:	00083fed 	.word	0x00083fed

00081060 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   81060:	b508      	push	{r3, lr}
	if (ResetTarget)
   81062:	b180      	cbz	r0, 81086 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81064:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81068:	2011      	movs	r0, #17
   8106a:	4b0a      	ldr	r3, [pc, #40]	; (81094 <ISPTarget_ChangeTargetResetLine+0x34>)
   8106c:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   8106e:	209e      	movs	r0, #158	; 0x9e
   81070:	4b09      	ldr	r3, [pc, #36]	; (81098 <ISPTarget_ChangeTargetResetLine+0x38>)
   81072:	4798      	blx	r3
   81074:	b918      	cbnz	r0, 8107e <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   81076:	2011      	movs	r0, #17
   81078:	4b08      	ldr	r3, [pc, #32]	; (8109c <ISPTarget_ChangeTargetResetLine+0x3c>)
   8107a:	4798      	blx	r3
   8107c:	e008      	b.n	81090 <ISPTarget_ChangeTargetResetLine+0x30>
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   8107e:	2011      	movs	r0, #17
   81080:	4b07      	ldr	r3, [pc, #28]	; (810a0 <ISPTarget_ChangeTargetResetLine+0x40>)
   81082:	4798      	blx	r3
   81084:	e004      	b.n	81090 <ISPTarget_ChangeTargetResetLine+0x30>
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   81086:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8108a:	2011      	movs	r0, #17
   8108c:	4b01      	ldr	r3, [pc, #4]	; (81094 <ISPTarget_ChangeTargetResetLine+0x34>)
   8108e:	4798      	blx	r3
	}
}
   81090:	bd08      	pop	{r3, pc}
   81092:	bf00      	nop
   81094:	00083c15 	.word	0x00083c15
   81098:	00082251 	.word	0x00082251
   8109c:	00083be1 	.word	0x00083be1
   810a0:	00083bfb 	.word	0x00083bfb

000810a4 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   810a4:	b570      	push	{r4, r5, r6, lr}
   810a6:	b082      	sub	sp, #8
   810a8:	4c19      	ldr	r4, [pc, #100]	; (81110 <ISPTarget_WaitWhileTargetBusy+0x6c>)
   810aa:	2600      	movs	r6, #0
   810ac:	4d19      	ldr	r5, [pc, #100]	; (81114 <ISPTarget_WaitWhileTargetBusy+0x70>)
   810ae:	4633      	mov	r3, r6
   810b0:	4632      	mov	r2, r6
   810b2:	21f0      	movs	r1, #240	; 0xf0
   810b4:	4620      	mov	r0, r4
   810b6:	47a8      	blx	r5
   810b8:	4633      	mov	r3, r6
   810ba:	4632      	mov	r2, r6
   810bc:	4631      	mov	r1, r6
   810be:	4620      	mov	r0, r4
   810c0:	47a8      	blx	r5
   810c2:	4633      	mov	r3, r6
   810c4:	4632      	mov	r2, r6
   810c6:	4631      	mov	r1, r6
   810c8:	4620      	mov	r0, r4
   810ca:	47a8      	blx	r5
   810cc:	4633      	mov	r3, r6
   810ce:	4632      	mov	r2, r6
   810d0:	4631      	mov	r1, r6
   810d2:	4620      	mov	r0, r4
   810d4:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   810d6:	6923      	ldr	r3, [r4, #16]
   810d8:	f413 7f00 	tst.w	r3, #512	; 0x200
   810dc:	d0fb      	beq.n	810d6 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   810de:	f10d 0205 	add.w	r2, sp, #5
   810e2:	f10d 0106 	add.w	r1, sp, #6
   810e6:	4620      	mov	r0, r4
   810e8:	4b0b      	ldr	r3, [pc, #44]	; (81118 <ISPTarget_WaitWhileTargetBusy+0x74>)
   810ea:	4798      	blx	r3
			return  ReceivedByte;
   810ec:	f89d 0006 	ldrb.w	r0, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   810f0:	f010 0001 	ands.w	r0, r0, #1
   810f4:	d005      	beq.n	81102 <ISPTarget_WaitWhileTargetBusy+0x5e>
   810f6:	4b09      	ldr	r3, [pc, #36]	; (8111c <ISPTarget_WaitWhileTargetBusy+0x78>)
   810f8:	681b      	ldr	r3, [r3, #0]
   810fa:	2b00      	cmp	r3, #0
   810fc:	d1d7      	bne.n	810ae <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   810fe:	2081      	movs	r0, #129	; 0x81
   81100:	e004      	b.n	8110c <ISPTarget_WaitWhileTargetBusy+0x68>
   81102:	4b06      	ldr	r3, [pc, #24]	; (8111c <ISPTarget_WaitWhileTargetBusy+0x78>)
   81104:	681b      	ldr	r3, [r3, #0]
   81106:	2b00      	cmp	r3, #0
   81108:	bf08      	it	eq
   8110a:	2081      	moveq	r0, #129	; 0x81
}
   8110c:	b002      	add	sp, #8
   8110e:	bd70      	pop	{r4, r5, r6, pc}
   81110:	40008000 	.word	0x40008000
   81114:	0008402b 	.word	0x0008402b
   81118:	00083ffd 	.word	0x00083ffd
   8111c:	20002684 	.word	0x20002684

00081120 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81120:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   81122:	4d0c      	ldr	r5, [pc, #48]	; (81154 <ISPTarget_LoadExtendedAddress+0x34>)
   81124:	2300      	movs	r3, #0
   81126:	461a      	mov	r2, r3
   81128:	214d      	movs	r1, #77	; 0x4d
   8112a:	4628      	mov	r0, r5
   8112c:	4c0a      	ldr	r4, [pc, #40]	; (81158 <ISPTarget_LoadExtendedAddress+0x38>)
   8112e:	47a0      	blx	r4
   81130:	2300      	movs	r3, #0
   81132:	461a      	mov	r2, r3
   81134:	4619      	mov	r1, r3
   81136:	4628      	mov	r0, r5
   81138:	47a0      	blx	r4
   8113a:	2300      	movs	r3, #0
   8113c:	461a      	mov	r2, r3
   8113e:	4907      	ldr	r1, [pc, #28]	; (8115c <ISPTarget_LoadExtendedAddress+0x3c>)
   81140:	7889      	ldrb	r1, [r1, #2]
   81142:	4628      	mov	r0, r5
   81144:	47a0      	blx	r4
   81146:	2300      	movs	r3, #0
   81148:	461a      	mov	r2, r3
   8114a:	4619      	mov	r1, r3
   8114c:	4628      	mov	r0, r5
   8114e:	47a0      	blx	r4
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
	ISPTarget_SendByte(0x00);
}
   81150:	bd38      	pop	{r3, r4, r5, pc}
   81152:	bf00      	nop
   81154:	40008000 	.word	0x40008000
   81158:	0008402b 	.word	0x0008402b
   8115c:	2000267c 	.word	0x2000267c

00081160 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   81160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81164:	b082      	sub	sp, #8
   81166:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8116a:	f000 047e 	and.w	r4, r0, #126	; 0x7e
   8116e:	2c20      	cmp	r4, #32
   81170:	dc18      	bgt.n	811a4 <ISPTarget_WaitForProgComplete+0x44>
   81172:	460e      	mov	r6, r1
   81174:	4617      	mov	r7, r2
   81176:	2c01      	cmp	r4, #1
   81178:	dd5b      	ble.n	81232 <ISPTarget_WaitForProgComplete+0xd2>
   8117a:	3c02      	subs	r4, #2
   8117c:	2c1e      	cmp	r4, #30
   8117e:	d85a      	bhi.n	81236 <ISPTarget_WaitForProgComplete+0xd6>
   81180:	e8df f004 	tbb	[pc, r4]
   81184:	591e5919 	.word	0x591e5919
   81188:	59545959 	.word	0x59545959
   8118c:	59595959 	.word	0x59595959
   81190:	59195959 	.word	0x59195959
   81194:	59595959 	.word	0x59595959
   81198:	59595959 	.word	0x59595959
   8119c:	59595959 	.word	0x59595959
   811a0:	5959      	.short	0x5959
   811a2:	1e          	.byte	0x1e
   811a3:	00          	.byte	0x00
   811a4:	2c40      	cmp	r4, #64	; 0x40
   811a6:	d041      	beq.n	8122c <ISPTarget_WaitForProgComplete+0xcc>
   811a8:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   811aa:	4b24      	ldr	r3, [pc, #144]	; (8123c <ISPTarget_WaitForProgComplete+0xdc>)
   811ac:	2264      	movs	r2, #100	; 0x64
   811ae:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   811b0:	b002      	add	sp, #8
   811b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ISPProtocol_DelayMS(DelayMS);
   811b6:	4618      	mov	r0, r3
   811b8:	4b21      	ldr	r3, [pc, #132]	; (81240 <ISPTarget_WaitForProgComplete+0xe0>)
   811ba:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   811bc:	2000      	movs	r0, #0
			break;
   811be:	e7f4      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
				ISPTarget_SendByte(PollAddress >> 8);
   811c0:	ea4f 2a11 	mov.w	sl, r1, lsr #8
   811c4:	4c1f      	ldr	r4, [pc, #124]	; (81244 <ISPTarget_WaitForProgComplete+0xe4>)
   811c6:	f04f 0900 	mov.w	r9, #0
   811ca:	4d1f      	ldr	r5, [pc, #124]	; (81248 <ISPTarget_WaitForProgComplete+0xe8>)
   811cc:	464b      	mov	r3, r9
   811ce:	464a      	mov	r2, r9
   811d0:	4641      	mov	r1, r8
   811d2:	4620      	mov	r0, r4
   811d4:	47a8      	blx	r5
   811d6:	464b      	mov	r3, r9
   811d8:	464a      	mov	r2, r9
   811da:	4651      	mov	r1, sl
   811dc:	4620      	mov	r0, r4
   811de:	47a8      	blx	r5
   811e0:	464b      	mov	r3, r9
   811e2:	464a      	mov	r2, r9
   811e4:	b2f1      	uxtb	r1, r6
   811e6:	4620      	mov	r0, r4
   811e8:	47a8      	blx	r5
   811ea:	464b      	mov	r3, r9
   811ec:	464a      	mov	r2, r9
   811ee:	4649      	mov	r1, r9
   811f0:	4620      	mov	r0, r4
   811f2:	47a8      	blx	r5
   811f4:	6923      	ldr	r3, [r4, #16]
   811f6:	f413 7f00 	tst.w	r3, #512	; 0x200
   811fa:	d0fb      	beq.n	811f4 <ISPTarget_WaitForProgComplete+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   811fc:	f10d 0205 	add.w	r2, sp, #5
   81200:	f10d 0106 	add.w	r1, sp, #6
   81204:	4620      	mov	r0, r4
   81206:	4b11      	ldr	r3, [pc, #68]	; (8124c <ISPTarget_WaitForProgComplete+0xec>)
   81208:	4798      	blx	r3
			return  ReceivedByte;
   8120a:	f89d 3006 	ldrb.w	r3, [sp, #6]
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   8120e:	429f      	cmp	r7, r3
   81210:	d105      	bne.n	8121e <ISPTarget_WaitForProgComplete+0xbe>
   81212:	4b0a      	ldr	r3, [pc, #40]	; (8123c <ISPTarget_WaitForProgComplete+0xdc>)
   81214:	681b      	ldr	r3, [r3, #0]
   81216:	2b00      	cmp	r3, #0
   81218:	d1d8      	bne.n	811cc <ISPTarget_WaitForProgComplete+0x6c>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8121a:	2080      	movs	r0, #128	; 0x80
   8121c:	e7c5      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
			if (!(TimeoutTicksRemaining))
   8121e:	4b07      	ldr	r3, [pc, #28]	; (8123c <ISPTarget_WaitForProgComplete+0xdc>)
   81220:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81222:	2b00      	cmp	r3, #0
   81224:	bf14      	ite	ne
   81226:	2000      	movne	r0, #0
   81228:	2080      	moveq	r0, #128	; 0x80
   8122a:	e7be      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   8122c:	4b08      	ldr	r3, [pc, #32]	; (81250 <ISPTarget_WaitForProgComplete+0xf0>)
   8122e:	4798      	blx	r3
			break;
   81230:	e7bb      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81232:	2000      	movs	r0, #0
   81234:	e7b9      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
   81236:	2000      	movs	r0, #0
   81238:	e7b7      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
   8123a:	bf00      	nop
   8123c:	20002684 	.word	0x20002684
   81240:	00080d2d 	.word	0x00080d2d
   81244:	40008000 	.word	0x40008000
   81248:	0008402b 	.word	0x0008402b
   8124c:	00083ffd 	.word	0x00083ffd
   81250:	000810a5 	.word	0x000810a5

00081254 <naeusb_add_in_handler>:
COMPILER_WORD_ALIGNED
uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   81254:	4b06      	ldr	r3, [pc, #24]	; (81270 <naeusb_add_in_handler+0x1c>)
   81256:	781b      	ldrb	r3, [r3, #0]
   81258:	2b0f      	cmp	r3, #15
   8125a:	d807      	bhi.n	8126c <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   8125c:	1c59      	adds	r1, r3, #1
   8125e:	4a04      	ldr	r2, [pc, #16]	; (81270 <naeusb_add_in_handler+0x1c>)
   81260:	7011      	strb	r1, [r2, #0]
   81262:	4a04      	ldr	r2, [pc, #16]	; (81274 <naeusb_add_in_handler+0x20>)
   81264:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   81268:	2001      	movs	r0, #1
   8126a:	4770      	bx	lr
        return false;
   8126c:	2000      	movs	r0, #0
}
   8126e:	4770      	bx	lr
   81270:	20001bf8 	.word	0x20001bf8
   81274:	20001bb8 	.word	0x20001bb8

00081278 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   81278:	4b06      	ldr	r3, [pc, #24]	; (81294 <naeusb_add_out_handler+0x1c>)
   8127a:	781b      	ldrb	r3, [r3, #0]
   8127c:	2b0f      	cmp	r3, #15
   8127e:	d807      	bhi.n	81290 <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81280:	1c59      	adds	r1, r3, #1
   81282:	4a04      	ldr	r2, [pc, #16]	; (81294 <naeusb_add_out_handler+0x1c>)
   81284:	7011      	strb	r1, [r2, #0]
   81286:	4a04      	ldr	r2, [pc, #16]	; (81298 <naeusb_add_out_handler+0x20>)
   81288:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   8128c:	2001      	movs	r0, #1
   8128e:	4770      	bx	lr
        return false;
   81290:	2000      	movs	r0, #0
}
   81292:	4770      	bx	lr
   81294:	20001bf9 	.word	0x20001bf9
   81298:	20001bfc 	.word	0x20001bfc

0008129c <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   8129c:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   8129e:	4b01      	ldr	r3, [pc, #4]	; (812a4 <main_suspend_action+0x8>)
   812a0:	4798      	blx	r3
}
   812a2:	bd08      	pop	{r3, pc}
   812a4:	00082f25 	.word	0x00082f25

000812a8 <main_resume_action>:

void main_resume_action(void)
{
   812a8:	b508      	push	{r3, lr}
    ui_wakeup();
   812aa:	4b01      	ldr	r3, [pc, #4]	; (812b0 <main_resume_action+0x8>)
   812ac:	4798      	blx	r3
}
   812ae:	bd08      	pop	{r3, pc}
   812b0:	00082f41 	.word	0x00082f41

000812b4 <main_sof_action>:

void main_sof_action(void)
{
   812b4:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   812b6:	4b04      	ldr	r3, [pc, #16]	; (812c8 <main_sof_action+0x14>)
   812b8:	781b      	ldrb	r3, [r3, #0]
   812ba:	b903      	cbnz	r3, 812be <main_sof_action+0xa>
        return;
    ui_process(udd_get_frame_number());
}
   812bc:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   812be:	4b03      	ldr	r3, [pc, #12]	; (812cc <main_sof_action+0x18>)
   812c0:	4798      	blx	r3
   812c2:	4b03      	ldr	r3, [pc, #12]	; (812d0 <main_sof_action+0x1c>)
   812c4:	4798      	blx	r3
   812c6:	e7f9      	b.n	812bc <main_sof_action+0x8>
   812c8:	2000057c 	.word	0x2000057c
   812cc:	00084d69 	.word	0x00084d69
   812d0:	00082f59 	.word	0x00082f59

000812d4 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   812d4:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   812d6:	2401      	movs	r4, #1
   812d8:	4b04      	ldr	r3, [pc, #16]	; (812ec <main_vendor_enable+0x18>)
   812da:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   812dc:	4a04      	ldr	r2, [pc, #16]	; (812f0 <main_vendor_enable+0x1c>)
   812de:	f44f 6180 	mov.w	r1, #1024	; 0x400
   812e2:	4804      	ldr	r0, [pc, #16]	; (812f4 <main_vendor_enable+0x20>)
   812e4:	4b04      	ldr	r3, [pc, #16]	; (812f8 <main_vendor_enable+0x24>)
   812e6:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   812e8:	4620      	mov	r0, r4
   812ea:	bd10      	pop	{r4, pc}
   812ec:	2000057c 	.word	0x2000057c
   812f0:	0008172d 	.word	0x0008172d
   812f4:	20002258 	.word	0x20002258
   812f8:	000830e9 	.word	0x000830e9

000812fc <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   812fc:	4b01      	ldr	r3, [pc, #4]	; (81304 <main_vendor_disable+0x8>)
   812fe:	2200      	movs	r2, #0
   81300:	701a      	strb	r2, [r3, #0]
}
   81302:	4770      	bx	lr
   81304:	2000057c 	.word	0x2000057c

00081308 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81308:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   8130a:	4b0f      	ldr	r3, [pc, #60]	; (81348 <main_setup_out_received+0x40>)
   8130c:	4a0f      	ldr	r2, [pc, #60]	; (8134c <main_setup_out_received+0x44>)
   8130e:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81310:	88da      	ldrh	r2, [r3, #6]
   81312:	2a40      	cmp	r2, #64	; 0x40
   81314:	bf28      	it	cs
   81316:	2240      	movcs	r2, #64	; 0x40
   81318:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8131a:	4b0d      	ldr	r3, [pc, #52]	; (81350 <main_setup_out_received+0x48>)
   8131c:	781d      	ldrb	r5, [r3, #0]
   8131e:	b18d      	cbz	r5, 81344 <main_setup_out_received+0x3c>
   81320:	4b0c      	ldr	r3, [pc, #48]	; (81354 <main_setup_out_received+0x4c>)
   81322:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   81326:	1e6a      	subs	r2, r5, #1
   81328:	b2d2      	uxtb	r2, r2
   8132a:	1aad      	subs	r5, r5, r2
   8132c:	3b04      	subs	r3, #4
   8132e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   81332:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81336:	4798      	blx	r3
        if (handler_status == true) {
   81338:	4603      	mov	r3, r0
   8133a:	b908      	cbnz	r0, 81340 <main_setup_out_received+0x38>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8133c:	42ac      	cmp	r4, r5
   8133e:	d1f8      	bne.n	81332 <main_setup_out_received+0x2a>
        }
    }

    return false;

}
   81340:	4618      	mov	r0, r3
   81342:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81344:	2300      	movs	r3, #0
   81346:	e7fb      	b.n	81340 <main_setup_out_received+0x38>
   81348:	2000269c 	.word	0x2000269c
   8134c:	20002218 	.word	0x20002218
   81350:	20001bf9 	.word	0x20001bf9
   81354:	20001bfc 	.word	0x20001bfc

00081358 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81358:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8135a:	4b0b      	ldr	r3, [pc, #44]	; (81388 <main_setup_in_received+0x30>)
   8135c:	781d      	ldrb	r5, [r3, #0]
   8135e:	b18d      	cbz	r5, 81384 <main_setup_in_received+0x2c>
   81360:	4b0a      	ldr	r3, [pc, #40]	; (8138c <main_setup_in_received+0x34>)
   81362:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   81366:	1e6a      	subs	r2, r5, #1
   81368:	b2d2      	uxtb	r2, r2
   8136a:	1aad      	subs	r5, r5, r2
   8136c:	3b04      	subs	r3, #4
   8136e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   81372:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81376:	4798      	blx	r3
        if (handler_status == true) {
   81378:	4603      	mov	r3, r0
   8137a:	b908      	cbnz	r0, 81380 <main_setup_in_received+0x28>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8137c:	42ac      	cmp	r4, r5
   8137e:	d1f8      	bne.n	81372 <main_setup_in_received+0x1a>
        }
    }

    return false;

   81380:	4618      	mov	r0, r3
   81382:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81384:	2300      	movs	r3, #0
   81386:	e7fb      	b.n	81380 <main_setup_in_received+0x28>
   81388:	20001bf8 	.word	0x20001bf8
   8138c:	20001bb8 	.word	0x20001bb8

00081390 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81390:	4b05      	ldr	r3, [pc, #20]	; (813a8 <naeusb_setup_out_received+0x18>)
   81392:	785b      	ldrb	r3, [r3, #1]
   81394:	2b22      	cmp	r3, #34	; 0x22
   81396:	d001      	beq.n	8139c <naeusb_setup_out_received+0xc>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
            return true;
            break;
    }
    return false;
   81398:	2000      	movs	r0, #0
}
   8139a:	4770      	bx	lr
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   8139c:	4b02      	ldr	r3, [pc, #8]	; (813a8 <naeusb_setup_out_received+0x18>)
   8139e:	4a03      	ldr	r2, [pc, #12]	; (813ac <naeusb_setup_out_received+0x1c>)
   813a0:	611a      	str	r2, [r3, #16]
            return true;
   813a2:	2001      	movs	r0, #1
   813a4:	4770      	bx	lr
   813a6:	bf00      	nop
   813a8:	2000269c 	.word	0x2000269c
   813ac:	000813b1 	.word	0x000813b1

000813b0 <naeusb_sam_cfg_out>:
{
   813b0:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   813b2:	4b22      	ldr	r3, [pc, #136]	; (8143c <naeusb_sam_cfg_out+0x8c>)
   813b4:	789b      	ldrb	r3, [r3, #2]
   813b6:	3b01      	subs	r3, #1
   813b8:	2b10      	cmp	r3, #16
   813ba:	d814      	bhi.n	813e6 <naeusb_sam_cfg_out+0x36>
   813bc:	e8df f003 	tbb	[pc, r3]
   813c0:	13181409 	.word	0x13181409
   813c4:	13131313 	.word	0x13131313
   813c8:	13131313 	.word	0x13131313
   813cc:	2c131313 	.word	0x2c131313
   813d0:	3b          	.byte	0x3b
   813d1:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   813d2:	203e      	movs	r0, #62	; 0x3e
   813d4:	4b1a      	ldr	r3, [pc, #104]	; (81440 <naeusb_sam_cfg_out+0x90>)
   813d6:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   813d8:	4c1a      	ldr	r4, [pc, #104]	; (81444 <naeusb_sam_cfg_out+0x94>)
   813da:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   813dc:	2800      	cmp	r0, #0
   813de:	d0fc      	beq.n	813da <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   813e0:	2010      	movs	r0, #16
   813e2:	4b19      	ldr	r3, [pc, #100]	; (81448 <naeusb_sam_cfg_out+0x98>)
   813e4:	4798      	blx	r3
}
   813e6:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   813e8:	2010      	movs	r0, #16
   813ea:	4b18      	ldr	r3, [pc, #96]	; (8144c <naeusb_sam_cfg_out+0x9c>)
   813ec:	4798      	blx	r3
        break;
   813ee:	e7fa      	b.n	813e6 <naeusb_sam_cfg_out+0x36>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   813f0:	2201      	movs	r2, #1
   813f2:	210c      	movs	r1, #12
   813f4:	4816      	ldr	r0, [pc, #88]	; (81450 <naeusb_sam_cfg_out+0xa0>)
   813f6:	4b17      	ldr	r3, [pc, #92]	; (81454 <naeusb_sam_cfg_out+0xa4>)
   813f8:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   813fa:	4b17      	ldr	r3, [pc, #92]	; (81458 <naeusb_sam_cfg_out+0xa8>)
   813fc:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   813fe:	4b17      	ldr	r3, [pc, #92]	; (8145c <naeusb_sam_cfg_out+0xac>)
   81400:	685a      	ldr	r2, [r3, #4]
   81402:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81406:	d1fb      	bne.n	81400 <naeusb_sam_cfg_out+0x50>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81408:	4a14      	ldr	r2, [pc, #80]	; (8145c <naeusb_sam_cfg_out+0xac>)
   8140a:	6813      	ldr	r3, [r2, #0]
   8140c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81410:	f043 0305 	orr.w	r3, r3, #5
   81414:	6013      	str	r3, [r2, #0]
        while(1);
   81416:	e7fe      	b.n	81416 <naeusb_sam_cfg_out+0x66>
   81418:	4b0f      	ldr	r3, [pc, #60]	; (81458 <naeusb_sam_cfg_out+0xa8>)
   8141a:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8141c:	4b0f      	ldr	r3, [pc, #60]	; (8145c <naeusb_sam_cfg_out+0xac>)
   8141e:	685a      	ldr	r2, [r3, #4]
   81420:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81424:	d1fb      	bne.n	8141e <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81426:	4a0d      	ldr	r2, [pc, #52]	; (8145c <naeusb_sam_cfg_out+0xac>)
   81428:	6813      	ldr	r3, [r2, #0]
   8142a:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8142e:	f043 0305 	orr.w	r3, r3, #5
   81432:	6013      	str	r3, [r2, #0]
        while(1);
   81434:	e7fe      	b.n	81434 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   81436:	4b0a      	ldr	r3, [pc, #40]	; (81460 <naeusb_sam_cfg_out+0xb0>)
   81438:	4798      	blx	r3
}
   8143a:	e7d4      	b.n	813e6 <naeusb_sam_cfg_out+0x36>
   8143c:	2000269c 	.word	0x2000269c
   81440:	00083eb9 	.word	0x00083eb9
   81444:	00083ee1 	.word	0x00083ee1
   81448:	00083df9 	.word	0x00083df9
   8144c:	00083e59 	.word	0x00083e59
   81450:	400e0800 	.word	0x400e0800
   81454:	00082d55 	.word	0x00082d55
   81458:	00084ce9 	.word	0x00084ce9
   8145c:	400e1200 	.word	0x400e1200
   81460:	00081f89 	.word	0x00081f89

00081464 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   81464:	4b05      	ldr	r3, [pc, #20]	; (8147c <naeusb_fw_version_in+0x18>)
   81466:	2200      	movs	r2, #0
   81468:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   8146a:	2132      	movs	r1, #50	; 0x32
   8146c:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   8146e:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81470:	4a03      	ldr	r2, [pc, #12]	; (81480 <naeusb_fw_version_in+0x1c>)
   81472:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   81474:	2303      	movs	r3, #3
   81476:	8193      	strh	r3, [r2, #12]
}
   81478:	2001      	movs	r0, #1
   8147a:	4770      	bx	lr
   8147c:	200021d8 	.word	0x200021d8
   81480:	2000269c 	.word	0x2000269c

00081484 <naeusb_build_date_in>:
{
   81484:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   81486:	4c0a      	ldr	r4, [pc, #40]	; (814b0 <naeusb_build_date_in+0x2c>)
   81488:	2240      	movs	r2, #64	; 0x40
   8148a:	490a      	ldr	r1, [pc, #40]	; (814b4 <naeusb_build_date_in+0x30>)
   8148c:	4620      	mov	r0, r4
   8148e:	4d0a      	ldr	r5, [pc, #40]	; (814b8 <naeusb_build_date_in+0x34>)
   81490:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81492:	2320      	movs	r3, #32
   81494:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81496:	2237      	movs	r2, #55	; 0x37
   81498:	4908      	ldr	r1, [pc, #32]	; (814bc <naeusb_build_date_in+0x38>)
   8149a:	f104 0009 	add.w	r0, r4, #9
   8149e:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   814a0:	4d07      	ldr	r5, [pc, #28]	; (814c0 <naeusb_build_date_in+0x3c>)
   814a2:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   814a4:	4620      	mov	r0, r4
   814a6:	4b07      	ldr	r3, [pc, #28]	; (814c4 <naeusb_build_date_in+0x40>)
   814a8:	4798      	blx	r3
   814aa:	81a8      	strh	r0, [r5, #12]
}
   814ac:	2001      	movs	r0, #1
   814ae:	bd38      	pop	{r3, r4, r5, pc}
   814b0:	200021d8 	.word	0x200021d8
   814b4:	0008caec 	.word	0x0008caec
   814b8:	0008634d 	.word	0x0008634d
   814bc:	0008cae0 	.word	0x0008cae0
   814c0:	2000269c 	.word	0x2000269c
   814c4:	000862f1 	.word	0x000862f1

000814c8 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   814c8:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   814ca:	4b07      	ldr	r3, [pc, #28]	; (814e8 <naeusb_setup_in_received+0x20>)
   814cc:	785b      	ldrb	r3, [r3, #1]
   814ce:	2b17      	cmp	r3, #23
   814d0:	d003      	beq.n	814da <naeusb_setup_in_received+0x12>
   814d2:	2b40      	cmp	r3, #64	; 0x40
   814d4:	d004      	beq.n	814e0 <naeusb_setup_in_received+0x18>
   814d6:	2000      	movs	r0, #0
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
}
   814d8:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   814da:	4b04      	ldr	r3, [pc, #16]	; (814ec <naeusb_setup_in_received+0x24>)
   814dc:	4798      	blx	r3
   814de:	e7fb      	b.n	814d8 <naeusb_setup_in_received+0x10>
            return naeusb_build_date_in();
   814e0:	4b03      	ldr	r3, [pc, #12]	; (814f0 <naeusb_setup_in_received+0x28>)
   814e2:	4798      	blx	r3
   814e4:	e7f8      	b.n	814d8 <naeusb_setup_in_received+0x10>
   814e6:	bf00      	nop
   814e8:	2000269c 	.word	0x2000269c
   814ec:	00081465 	.word	0x00081465
   814f0:	00081485 	.word	0x00081485

000814f4 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   814f4:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   814f6:	4803      	ldr	r0, [pc, #12]	; (81504 <naeusb_register_handlers+0x10>)
   814f8:	4b03      	ldr	r3, [pc, #12]	; (81508 <naeusb_register_handlers+0x14>)
   814fa:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   814fc:	4803      	ldr	r0, [pc, #12]	; (8150c <naeusb_register_handlers+0x18>)
   814fe:	4b04      	ldr	r3, [pc, #16]	; (81510 <naeusb_register_handlers+0x1c>)
   81500:	4798      	blx	r3
   81502:	bd08      	pop	{r3, pc}
   81504:	000814c9 	.word	0x000814c9
   81508:	00081255 	.word	0x00081255
   8150c:	00081391 	.word	0x00081391
   81510:	00081279 	.word	0x00081279

00081514 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   81514:	b508      	push	{r3, lr}

    switch(udd_g_ctrlreq.req.wValue){
   81516:	4b0b      	ldr	r3, [pc, #44]	; (81544 <openadc_progfpga_bulk+0x30>)
   81518:	885b      	ldrh	r3, [r3, #2]
   8151a:	2ba1      	cmp	r3, #161	; 0xa1
   8151c:	d007      	beq.n	8152e <openadc_progfpga_bulk+0x1a>
   8151e:	2ba2      	cmp	r3, #162	; 0xa2
   81520:	d00b      	beq.n	8153a <openadc_progfpga_bulk+0x26>
   81522:	2ba0      	cmp	r3, #160	; 0xa0
   81524:	d000      	beq.n	81528 <openadc_progfpga_bulk+0x14>
        break;

    default:
        break;
    }
}
   81526:	bd08      	pop	{r3, pc}
        fpga_program_setup1();
   81528:	4b07      	ldr	r3, [pc, #28]	; (81548 <openadc_progfpga_bulk+0x34>)
   8152a:	4798      	blx	r3
        break;
   8152c:	e7fb      	b.n	81526 <openadc_progfpga_bulk+0x12>
        fpga_program_setup2();
   8152e:	4b07      	ldr	r3, [pc, #28]	; (8154c <openadc_progfpga_bulk+0x38>)
   81530:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81532:	4b07      	ldr	r3, [pc, #28]	; (81550 <openadc_progfpga_bulk+0x3c>)
   81534:	220a      	movs	r2, #10
   81536:	701a      	strb	r2, [r3, #0]
        break;
   81538:	e7f5      	b.n	81526 <openadc_progfpga_bulk+0x12>
        blockendpoint_usage = bep_emem;
   8153a:	4b05      	ldr	r3, [pc, #20]	; (81550 <openadc_progfpga_bulk+0x3c>)
   8153c:	2200      	movs	r2, #0
   8153e:	701a      	strb	r2, [r3, #0]
}
   81540:	e7f1      	b.n	81526 <openadc_progfpga_bulk+0x12>
   81542:	bf00      	nop
   81544:	2000269c 	.word	0x2000269c
   81548:	00080791 	.word	0x00080791
   8154c:	00080819 	.word	0x00080819
   81550:	20001c3c 	.word	0x20001c3c

00081554 <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   81554:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   81556:	4b20      	ldr	r3, [pc, #128]	; (815d8 <openadc_setup_out_received+0x84>)
   81558:	2200      	movs	r2, #0
   8155a:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   8155c:	4b1f      	ldr	r3, [pc, #124]	; (815dc <openadc_setup_out_received+0x88>)
   8155e:	785b      	ldrb	r3, [r3, #1]
   81560:	3b10      	subs	r3, #16
   81562:	2b06      	cmp	r3, #6
   81564:	d836      	bhi.n	815d4 <openadc_setup_out_received+0x80>
   81566:	e8df f003 	tbb	[pc, r3]
   8156a:	1a04      	.short	0x1a04
   8156c:	3535250f 	.word	0x3535250f
   81570:	30          	.byte	0x30
   81571:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81572:	2006      	movs	r0, #6
   81574:	4b1a      	ldr	r3, [pc, #104]	; (815e0 <openadc_setup_out_received+0x8c>)
   81576:	4798      	blx	r3
   81578:	b908      	cbnz	r0, 8157e <openadc_setup_out_received+0x2a>

    default:
        return false;
    }

    return false;
   8157a:	2000      	movs	r0, #0
   8157c:	e029      	b.n	815d2 <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   8157e:	4b17      	ldr	r3, [pc, #92]	; (815dc <openadc_setup_out_received+0x88>)
   81580:	4a18      	ldr	r2, [pc, #96]	; (815e4 <openadc_setup_out_received+0x90>)
   81582:	611a      	str	r2, [r3, #16]
            return true;
   81584:	2001      	movs	r0, #1
   81586:	e024      	b.n	815d2 <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   81588:	2006      	movs	r0, #6
   8158a:	4b15      	ldr	r3, [pc, #84]	; (815e0 <openadc_setup_out_received+0x8c>)
   8158c:	4798      	blx	r3
   8158e:	b908      	cbnz	r0, 81594 <openadc_setup_out_received+0x40>
    return false;
   81590:	2000      	movs	r0, #0
   81592:	e01e      	b.n	815d2 <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   81594:	4b11      	ldr	r3, [pc, #68]	; (815dc <openadc_setup_out_received+0x88>)
   81596:	4a14      	ldr	r2, [pc, #80]	; (815e8 <openadc_setup_out_received+0x94>)
   81598:	611a      	str	r2, [r3, #16]
            return true;
   8159a:	2001      	movs	r0, #1
   8159c:	e019      	b.n	815d2 <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   8159e:	2006      	movs	r0, #6
   815a0:	4b0f      	ldr	r3, [pc, #60]	; (815e0 <openadc_setup_out_received+0x8c>)
   815a2:	4798      	blx	r3
   815a4:	b908      	cbnz	r0, 815aa <openadc_setup_out_received+0x56>
    return false;
   815a6:	2000      	movs	r0, #0
   815a8:	e013      	b.n	815d2 <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   815aa:	4b0c      	ldr	r3, [pc, #48]	; (815dc <openadc_setup_out_received+0x88>)
   815ac:	4a0f      	ldr	r2, [pc, #60]	; (815ec <openadc_setup_out_received+0x98>)
   815ae:	611a      	str	r2, [r3, #16]
            return true;
   815b0:	2001      	movs	r0, #1
   815b2:	e00e      	b.n	815d2 <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   815b4:	2006      	movs	r0, #6
   815b6:	4b0a      	ldr	r3, [pc, #40]	; (815e0 <openadc_setup_out_received+0x8c>)
   815b8:	4798      	blx	r3
   815ba:	b908      	cbnz	r0, 815c0 <openadc_setup_out_received+0x6c>
    return false;
   815bc:	2000      	movs	r0, #0
   815be:	e008      	b.n	815d2 <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   815c0:	4b06      	ldr	r3, [pc, #24]	; (815dc <openadc_setup_out_received+0x88>)
   815c2:	4a0b      	ldr	r2, [pc, #44]	; (815f0 <openadc_setup_out_received+0x9c>)
   815c4:	611a      	str	r2, [r3, #16]
            return true;
   815c6:	2001      	movs	r0, #1
   815c8:	e003      	b.n	815d2 <openadc_setup_out_received+0x7e>
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   815ca:	4b04      	ldr	r3, [pc, #16]	; (815dc <openadc_setup_out_received+0x88>)
   815cc:	4a09      	ldr	r2, [pc, #36]	; (815f4 <openadc_setup_out_received+0xa0>)
   815ce:	611a      	str	r2, [r3, #16]
        return true;
   815d0:	2001      	movs	r0, #1
}
   815d2:	bd08      	pop	{r3, pc}
    switch(udd_g_ctrlreq.req.bRequest){
   815d4:	2000      	movs	r0, #0
   815d6:	e7fc      	b.n	815d2 <openadc_setup_out_received+0x7e>
   815d8:	20001c3c 	.word	0x20001c3c
   815dc:	2000269c 	.word	0x2000269c
   815e0:	00081f5d 	.word	0x00081f5d
   815e4:	000816c1 	.word	0x000816c1
   815e8:	00081629 	.word	0x00081629
   815ec:	000815f9 	.word	0x000815f9
   815f0:	0008166d 	.word	0x0008166d
   815f4:	00081515 	.word	0x00081515

000815f8 <openadc_writemem_bulk>:
{
   815f8:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   815fa:	4b07      	ldr	r3, [pc, #28]	; (81618 <openadc_writemem_bulk+0x20>)
   815fc:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   815fe:	4b07      	ldr	r3, [pc, #28]	; (8161c <openadc_writemem_bulk+0x24>)
   81600:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   81602:	2504      	movs	r5, #4
   81604:	4c06      	ldr	r4, [pc, #24]	; (81620 <openadc_writemem_bulk+0x28>)
   81606:	4628      	mov	r0, r5
   81608:	47a0      	blx	r4
   8160a:	2800      	cmp	r0, #0
   8160c:	d0fb      	beq.n	81606 <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   8160e:	4630      	mov	r0, r6
   81610:	4b04      	ldr	r3, [pc, #16]	; (81624 <openadc_writemem_bulk+0x2c>)
   81612:	4798      	blx	r3
}
   81614:	bd70      	pop	{r4, r5, r6, pc}
   81616:	bf00      	nop
   81618:	20002218 	.word	0x20002218
   8161c:	00081f89 	.word	0x00081f89
   81620:	00081f5d 	.word	0x00081f5d
   81624:	00081fa1 	.word	0x00081fa1

00081628 <openadc_readmem_ctrl>:
{
   81628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8162a:	4b0a      	ldr	r3, [pc, #40]	; (81654 <openadc_readmem_ctrl+0x2c>)
   8162c:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8162e:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81630:	4b09      	ldr	r3, [pc, #36]	; (81658 <openadc_readmem_ctrl+0x30>)
   81632:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   81634:	2505      	movs	r5, #5
   81636:	4c09      	ldr	r4, [pc, #36]	; (8165c <openadc_readmem_ctrl+0x34>)
   81638:	4628      	mov	r0, r5
   8163a:	47a0      	blx	r4
   8163c:	2800      	cmp	r0, #0
   8163e:	d0fb      	beq.n	81638 <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   81640:	4638      	mov	r0, r7
   81642:	4b07      	ldr	r3, [pc, #28]	; (81660 <openadc_readmem_ctrl+0x38>)
   81644:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   81646:	4b07      	ldr	r3, [pc, #28]	; (81664 <openadc_readmem_ctrl+0x3c>)
   81648:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   8164c:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   8164e:	4b06      	ldr	r3, [pc, #24]	; (81668 <openadc_readmem_ctrl+0x40>)
   81650:	601e      	str	r6, [r3, #0]
}
   81652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81654:	20002218 	.word	0x20002218
   81658:	00081f89 	.word	0x00081f89
   8165c:	00081f5d 	.word	0x00081f5d
   81660:	00081fa1 	.word	0x00081fa1
   81664:	20001c40 	.word	0x20001c40
   81668:	20001c44 	.word	0x20001c44

0008166c <openadc_writemem_ctrl>:
{
   8166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8166e:	4b0e      	ldr	r3, [pc, #56]	; (816a8 <openadc_writemem_ctrl+0x3c>)
   81670:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81672:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81674:	4b0d      	ldr	r3, [pc, #52]	; (816ac <openadc_writemem_ctrl+0x40>)
   81676:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   81678:	2601      	movs	r6, #1
   8167a:	4d0d      	ldr	r5, [pc, #52]	; (816b0 <openadc_writemem_ctrl+0x44>)
   8167c:	4630      	mov	r0, r6
   8167e:	47a8      	blx	r5
   81680:	2800      	cmp	r0, #0
   81682:	d0fb      	beq.n	8167c <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   81684:	4638      	mov	r0, r7
   81686:	4b0b      	ldr	r3, [pc, #44]	; (816b4 <openadc_writemem_ctrl+0x48>)
   81688:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   8168a:	b14c      	cbz	r4, 816a0 <openadc_writemem_ctrl+0x34>
   8168c:	4a0a      	ldr	r2, [pc, #40]	; (816b8 <openadc_writemem_ctrl+0x4c>)
   8168e:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   81690:	4d0a      	ldr	r5, [pc, #40]	; (816bc <openadc_writemem_ctrl+0x50>)
   81692:	6829      	ldr	r1, [r5, #0]
   81694:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   81698:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   8169a:	3301      	adds	r3, #1
   8169c:	429c      	cmp	r4, r3
   8169e:	d1f8      	bne.n	81692 <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   816a0:	4b02      	ldr	r3, [pc, #8]	; (816ac <openadc_writemem_ctrl+0x40>)
   816a2:	4798      	blx	r3
}
   816a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   816a6:	bf00      	nop
   816a8:	20002218 	.word	0x20002218
   816ac:	00081f89 	.word	0x00081f89
   816b0:	00081f5d 	.word	0x00081f5d
   816b4:	00081fa1 	.word	0x00081fa1
   816b8:	2000221f 	.word	0x2000221f
   816bc:	20000820 	.word	0x20000820

000816c0 <openadc_readmem_bulk>:
{
   816c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   816c2:	4b0a      	ldr	r3, [pc, #40]	; (816ec <openadc_readmem_bulk+0x2c>)
   816c4:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   816c6:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   816c8:	4b09      	ldr	r3, [pc, #36]	; (816f0 <openadc_readmem_bulk+0x30>)
   816ca:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   816cc:	2502      	movs	r5, #2
   816ce:	4c09      	ldr	r4, [pc, #36]	; (816f4 <openadc_readmem_bulk+0x34>)
   816d0:	4628      	mov	r0, r5
   816d2:	47a0      	blx	r4
   816d4:	2800      	cmp	r0, #0
   816d6:	d0fb      	beq.n	816d0 <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   816d8:	4638      	mov	r0, r7
   816da:	4b07      	ldr	r3, [pc, #28]	; (816f8 <openadc_readmem_bulk+0x38>)
   816dc:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   816de:	4a07      	ldr	r2, [pc, #28]	; (816fc <openadc_readmem_bulk+0x3c>)
   816e0:	4631      	mov	r1, r6
   816e2:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   816e6:	4b06      	ldr	r3, [pc, #24]	; (81700 <openadc_readmem_bulk+0x40>)
   816e8:	4798      	blx	r3
}
   816ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   816ec:	20002218 	.word	0x20002218
   816f0:	00081f89 	.word	0x00081f89
   816f4:	00081f5d 	.word	0x00081f5d
   816f8:	00081fa1 	.word	0x00081fa1
   816fc:	00081705 	.word	0x00081705
   81700:	000830cd 	.word	0x000830cd

00081704 <main_vendor_bulk_in_received>:
{
   81704:	b510      	push	{r4, lr}
   81706:	4604      	mov	r4, r0
    FPGA_releaselock();
   81708:	4b05      	ldr	r3, [pc, #20]	; (81720 <main_vendor_bulk_in_received+0x1c>)
   8170a:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   8170c:	b104      	cbz	r4, 81710 <main_vendor_bulk_in_received+0xc>
}
   8170e:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   81710:	4b04      	ldr	r3, [pc, #16]	; (81724 <main_vendor_bulk_in_received+0x20>)
   81712:	4798      	blx	r3
   81714:	2802      	cmp	r0, #2
   81716:	d1fa      	bne.n	8170e <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   81718:	2000      	movs	r0, #0
   8171a:	4b03      	ldr	r3, [pc, #12]	; (81728 <main_vendor_bulk_in_received+0x24>)
   8171c:	4798      	blx	r3
   8171e:	e7f6      	b.n	8170e <main_vendor_bulk_in_received+0xa>
   81720:	00081f89 	.word	0x00081f89
   81724:	00081f95 	.word	0x00081f95
   81728:	00081f5d 	.word	0x00081f5d

0008172c <main_vendor_bulk_out_received>:
{
   8172c:	b570      	push	{r4, r5, r6, lr}
   8172e:	4605      	mov	r5, r0
   81730:	460c      	mov	r4, r1
    FPGA_releaselock();
   81732:	4b19      	ldr	r3, [pc, #100]	; (81798 <main_vendor_bulk_out_received+0x6c>)
   81734:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81736:	b9bd      	cbnz	r5, 81768 <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   81738:	4b18      	ldr	r3, [pc, #96]	; (8179c <main_vendor_bulk_out_received+0x70>)
   8173a:	781b      	ldrb	r3, [r3, #0]
   8173c:	b9f3      	cbnz	r3, 8177c <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   8173e:	b144      	cbz	r4, 81752 <main_vendor_bulk_out_received+0x26>
   81740:	4a17      	ldr	r2, [pc, #92]	; (817a0 <main_vendor_bulk_out_received+0x74>)
            xram[i] = main_buf_loopback[i];
   81742:	4d18      	ldr	r5, [pc, #96]	; (817a4 <main_vendor_bulk_out_received+0x78>)
   81744:	6829      	ldr	r1, [r5, #0]
   81746:	f812 0b01 	ldrb.w	r0, [r2], #1
   8174a:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   8174c:	3301      	adds	r3, #1
   8174e:	429c      	cmp	r4, r3
   81750:	d1f8      	bne.n	81744 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   81752:	4b15      	ldr	r3, [pc, #84]	; (817a8 <main_vendor_bulk_out_received+0x7c>)
   81754:	4798      	blx	r3
   81756:	2804      	cmp	r0, #4
   81758:	d00d      	beq.n	81776 <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   8175a:	4a14      	ldr	r2, [pc, #80]	; (817ac <main_vendor_bulk_out_received+0x80>)
   8175c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81760:	480f      	ldr	r0, [pc, #60]	; (817a0 <main_vendor_bulk_out_received+0x74>)
   81762:	4b13      	ldr	r3, [pc, #76]	; (817b0 <main_vendor_bulk_out_received+0x84>)
   81764:	4798      	blx	r3
}
   81766:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   81768:	4a10      	ldr	r2, [pc, #64]	; (817ac <main_vendor_bulk_out_received+0x80>)
   8176a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8176e:	480c      	ldr	r0, [pc, #48]	; (817a0 <main_vendor_bulk_out_received+0x74>)
   81770:	4b0f      	ldr	r3, [pc, #60]	; (817b0 <main_vendor_bulk_out_received+0x84>)
   81772:	4798      	blx	r3
        return;
   81774:	e7f7      	b.n	81766 <main_vendor_bulk_out_received+0x3a>
            FPGA_releaselock();
   81776:	4b08      	ldr	r3, [pc, #32]	; (81798 <main_vendor_bulk_out_received+0x6c>)
   81778:	4798      	blx	r3
   8177a:	e7ee      	b.n	8175a <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   8177c:	2b0a      	cmp	r3, #10
   8177e:	d1ec      	bne.n	8175a <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81780:	2c00      	cmp	r4, #0
   81782:	d0ea      	beq.n	8175a <main_vendor_bulk_out_received+0x2e>
   81784:	4d06      	ldr	r5, [pc, #24]	; (817a0 <main_vendor_bulk_out_received+0x74>)
   81786:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   81788:	4e0a      	ldr	r6, [pc, #40]	; (817b4 <main_vendor_bulk_out_received+0x88>)
   8178a:	f815 0b01 	ldrb.w	r0, [r5], #1
   8178e:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   81790:	42a5      	cmp	r5, r4
   81792:	d1fa      	bne.n	8178a <main_vendor_bulk_out_received+0x5e>
   81794:	e7e1      	b.n	8175a <main_vendor_bulk_out_received+0x2e>
   81796:	bf00      	nop
   81798:	00081f89 	.word	0x00081f89
   8179c:	20001c3c 	.word	0x20001c3c
   817a0:	20002258 	.word	0x20002258
   817a4:	20000820 	.word	0x20000820
   817a8:	00081f95 	.word	0x00081f95
   817ac:	0008172d 	.word	0x0008172d
   817b0:	000830e9 	.word	0x000830e9
   817b4:	00080829 	.word	0x00080829

000817b8 <openadc_setup_in_received>:
{
   817b8:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   817ba:	4b13      	ldr	r3, [pc, #76]	; (81808 <openadc_setup_in_received+0x50>)
   817bc:	785b      	ldrb	r3, [r3, #1]
   817be:	2b12      	cmp	r3, #18
   817c0:	d003      	beq.n	817ca <openadc_setup_in_received+0x12>
   817c2:	2b15      	cmp	r3, #21
   817c4:	d00e      	beq.n	817e4 <openadc_setup_in_received+0x2c>
   817c6:	2000      	movs	r0, #0
}
   817c8:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   817ca:	4a0f      	ldr	r2, [pc, #60]	; (81808 <openadc_setup_in_received+0x50>)
   817cc:	4b0f      	ldr	r3, [pc, #60]	; (8180c <openadc_setup_in_received+0x54>)
   817ce:	681b      	ldr	r3, [r3, #0]
   817d0:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   817d2:	4b0f      	ldr	r3, [pc, #60]	; (81810 <openadc_setup_in_received+0x58>)
   817d4:	6819      	ldr	r1, [r3, #0]
   817d6:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   817d8:	2200      	movs	r2, #0
   817da:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   817dc:	4b0d      	ldr	r3, [pc, #52]	; (81814 <openadc_setup_in_received+0x5c>)
   817de:	4798      	blx	r3
        return true;
   817e0:	2001      	movs	r0, #1
   817e2:	e7f1      	b.n	817c8 <openadc_setup_in_received+0x10>
        respbuf[0] = FPGA_ISDONE();
   817e4:	200a      	movs	r0, #10
   817e6:	4b0c      	ldr	r3, [pc, #48]	; (81818 <openadc_setup_in_received+0x60>)
   817e8:	4798      	blx	r3
   817ea:	4b0c      	ldr	r3, [pc, #48]	; (8181c <openadc_setup_in_received+0x64>)
   817ec:	3800      	subs	r0, #0
   817ee:	bf18      	it	ne
   817f0:	2001      	movne	r0, #1
   817f2:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   817f4:	2200      	movs	r2, #0
   817f6:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   817f8:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   817fa:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   817fc:	4a02      	ldr	r2, [pc, #8]	; (81808 <openadc_setup_in_received+0x50>)
   817fe:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81800:	2304      	movs	r3, #4
   81802:	8193      	strh	r3, [r2, #12]
        return true;
   81804:	2001      	movs	r0, #1
   81806:	e7df      	b.n	817c8 <openadc_setup_in_received+0x10>
   81808:	2000269c 	.word	0x2000269c
   8180c:	20001c40 	.word	0x20001c40
   81810:	20001c44 	.word	0x20001c44
   81814:	00081f89 	.word	0x00081f89
   81818:	00083bc5 	.word	0x00083bc5
   8181c:	200021d8 	.word	0x200021d8

00081820 <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   81820:	b508      	push	{r3, lr}
    FPGA_releaselock();
   81822:	4b04      	ldr	r3, [pc, #16]	; (81834 <openadc_register_handlers+0x14>)
   81824:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   81826:	4804      	ldr	r0, [pc, #16]	; (81838 <openadc_register_handlers+0x18>)
   81828:	4b04      	ldr	r3, [pc, #16]	; (8183c <openadc_register_handlers+0x1c>)
   8182a:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   8182c:	4804      	ldr	r0, [pc, #16]	; (81840 <openadc_register_handlers+0x20>)
   8182e:	4b05      	ldr	r3, [pc, #20]	; (81844 <openadc_register_handlers+0x24>)
   81830:	4798      	blx	r3
   81832:	bd08      	pop	{r3, pc}
   81834:	00081f89 	.word	0x00081f89
   81838:	000817b9 	.word	0x000817b9
   8183c:	00081255 	.word	0x00081255
   81840:	00081555 	.word	0x00081555
   81844:	00081279 	.word	0x00081279

00081848 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   81848:	4b16      	ldr	r3, [pc, #88]	; (818a4 <usart_setup_out_received+0x5c>)
   8184a:	785b      	ldrb	r3, [r3, #1]
   8184c:	3b1a      	subs	r3, #26
   8184e:	2b17      	cmp	r3, #23
   81850:	d826      	bhi.n	818a0 <usart_setup_out_received+0x58>
   81852:	e8df f003 	tbb	[pc, r3]
   81856:	0c11      	.short	0x0c11
   81858:	25252525 	.word	0x25252525
   8185c:	25251b16 	.word	0x25251b16
   81860:	25252525 	.word	0x25252525
   81864:	25252525 	.word	0x25252525
   81868:	25252525 	.word	0x25252525
   8186c:	2025      	.short	0x2025
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   8186e:	4b0d      	ldr	r3, [pc, #52]	; (818a4 <usart_setup_out_received+0x5c>)
   81870:	4a0d      	ldr	r2, [pc, #52]	; (818a8 <usart_setup_out_received+0x60>)
   81872:	611a      	str	r2, [r3, #16]
        return true;
   81874:	2001      	movs	r0, #1
   81876:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81878:	4b0a      	ldr	r3, [pc, #40]	; (818a4 <usart_setup_out_received+0x5c>)
   8187a:	4a0c      	ldr	r2, [pc, #48]	; (818ac <usart_setup_out_received+0x64>)
   8187c:	611a      	str	r2, [r3, #16]
        return true;
   8187e:	2001      	movs	r0, #1
   81880:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81882:	4b08      	ldr	r3, [pc, #32]	; (818a4 <usart_setup_out_received+0x5c>)
   81884:	4a0a      	ldr	r2, [pc, #40]	; (818b0 <usart_setup_out_received+0x68>)
   81886:	611a      	str	r2, [r3, #16]
        return true;
   81888:	2001      	movs	r0, #1
   8188a:	4770      	bx	lr

		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   8188c:	4b05      	ldr	r3, [pc, #20]	; (818a4 <usart_setup_out_received+0x5c>)
   8188e:	4a09      	ldr	r2, [pc, #36]	; (818b4 <usart_setup_out_received+0x6c>)
   81890:	611a      	str	r2, [r3, #16]
        return true;
   81892:	2001      	movs	r0, #1
   81894:	4770      	bx	lr
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81896:	4b03      	ldr	r3, [pc, #12]	; (818a4 <usart_setup_out_received+0x5c>)
   81898:	4a07      	ldr	r2, [pc, #28]	; (818b8 <usart_setup_out_received+0x70>)
   8189a:	611a      	str	r2, [r3, #16]
        return true;
   8189c:	2001      	movs	r0, #1
   8189e:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest) {
   818a0:	2000      	movs	r0, #0
        break;
    }
    return false;
}
   818a2:	4770      	bx	lr
   818a4:	2000269c 	.word	0x2000269c
   818a8:	00081c41 	.word	0x00081c41
   818ac:	00081c8d 	.word	0x00081c8d
   818b0:	000818bd 	.word	0x000818bd
   818b4:	000818c9 	.word	0x000818c9
   818b8:	00081c4d 	.word	0x00081c4d

000818bc <ctrl_xmega_program_void>:
{
   818bc:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   818be:	4b01      	ldr	r3, [pc, #4]	; (818c4 <ctrl_xmega_program_void+0x8>)
   818c0:	4798      	blx	r3
}
   818c2:	bd08      	pop	{r3, pc}
   818c4:	0008267d 	.word	0x0008267d

000818c8 <ctrl_avr_program_void>:
{
   818c8:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   818ca:	4b01      	ldr	r3, [pc, #4]	; (818d0 <ctrl_avr_program_void+0x8>)
   818cc:	4798      	blx	r3
}
   818ce:	bd08      	pop	{r3, pc}
   818d0:	00081fc9 	.word	0x00081fc9

000818d4 <usart0_enableIO>:
{
   818d4:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   818d6:	200d      	movs	r0, #13
   818d8:	4b0a      	ldr	r3, [pc, #40]	; (81904 <usart0_enableIO+0x30>)
   818da:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   818dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818e0:	2013      	movs	r0, #19
   818e2:	4c09      	ldr	r4, [pc, #36]	; (81908 <usart0_enableIO+0x34>)
   818e4:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   818e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818ea:	2012      	movs	r0, #18
   818ec:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   818ee:	4b07      	ldr	r3, [pc, #28]	; (8190c <usart0_enableIO+0x38>)
   818f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   818f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   818f8:	2150      	movs	r1, #80	; 0x50
   818fa:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   818fe:	601a      	str	r2, [r3, #0]
}
   81900:	bd10      	pop	{r4, pc}
   81902:	bf00      	nop
   81904:	00083f51 	.word	0x00083f51
   81908:	00083c15 	.word	0x00083c15
   8190c:	e000e100 	.word	0xe000e100

00081910 <usart_enableIO>:
{
   81910:	b508      	push	{r3, lr}
    if (driver->usart_id == 0) {
   81912:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   81916:	b103      	cbz	r3, 8191a <usart_enableIO+0xa>
}
   81918:	bd08      	pop	{r3, pc}
        usart0_enableIO();
   8191a:	4b01      	ldr	r3, [pc, #4]	; (81920 <usart_enableIO+0x10>)
   8191c:	4798      	blx	r3
}
   8191e:	e7fb      	b.n	81918 <usart_enableIO+0x8>
   81920:	000818d5 	.word	0x000818d5

00081924 <generic_isr>:
{
   81924:	b570      	push	{r4, r5, r6, lr}
   81926:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   81928:	6800      	ldr	r0, [r0, #0]
   8192a:	4b19      	ldr	r3, [pc, #100]	; (81990 <generic_isr+0x6c>)
   8192c:	4798      	blx	r3
   8192e:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   81930:	f010 0f01 	tst.w	r0, #1
   81934:	d103      	bne.n	8193e <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   81936:	f015 0f02 	tst.w	r5, #2
   8193a:	d115      	bne.n	81968 <generic_isr+0x44>
}
   8193c:	bd70      	pop	{r4, r5, r6, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   8193e:	4620      	mov	r0, r4
   81940:	f850 3b1c 	ldr.w	r3, [r0], #28
   81944:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81946:	b2f6      	uxtb	r6, r6
   81948:	2200      	movs	r2, #0
   8194a:	4631      	mov	r1, r6
   8194c:	4b11      	ldr	r3, [pc, #68]	; (81994 <generic_isr+0x70>)
   8194e:	4798      	blx	r3
        if (driver->cdc_enabled)
   81950:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81954:	f013 0f04 	tst.w	r3, #4
   81958:	d0ed      	beq.n	81936 <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   8195a:	2200      	movs	r2, #0
   8195c:	4631      	mov	r1, r6
   8195e:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81962:	4b0c      	ldr	r3, [pc, #48]	; (81994 <generic_isr+0x70>)
   81964:	4798      	blx	r3
   81966:	e7e6      	b.n	81936 <generic_isr+0x12>
		if (circ_buf_has_char(&driver->txbuf)){
   81968:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   8196c:	4628      	mov	r0, r5
   8196e:	4b0a      	ldr	r3, [pc, #40]	; (81998 <generic_isr+0x74>)
   81970:	4798      	blx	r3
   81972:	b140      	cbz	r0, 81986 <generic_isr+0x62>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81974:	6824      	ldr	r4, [r4, #0]
   81976:	4628      	mov	r0, r5
   81978:	4b08      	ldr	r3, [pc, #32]	; (8199c <generic_isr+0x78>)
   8197a:	4798      	blx	r3
   8197c:	4601      	mov	r1, r0
   8197e:	4620      	mov	r0, r4
   81980:	4b07      	ldr	r3, [pc, #28]	; (819a0 <generic_isr+0x7c>)
   81982:	4798      	blx	r3
   81984:	e7da      	b.n	8193c <generic_isr+0x18>
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81986:	2102      	movs	r1, #2
   81988:	6820      	ldr	r0, [r4, #0]
   8198a:	4b06      	ldr	r3, [pc, #24]	; (819a4 <generic_isr+0x80>)
   8198c:	4798      	blx	r3
}
   8198e:	e7d5      	b.n	8193c <generic_isr+0x18>
   81990:	00085635 	.word	0x00085635
   81994:	00082e41 	.word	0x00082e41
   81998:	00082edd 	.word	0x00082edd
   8199c:	00082e95 	.word	0x00082e95
   819a0:	00085655 	.word	0x00085655
   819a4:	0008562d 	.word	0x0008562d

000819a8 <USART0_Handler>:
{
   819a8:	b508      	push	{r3, lr}
	generic_isr(&usart0_driver);
   819aa:	4802      	ldr	r0, [pc, #8]	; (819b4 <USART0_Handler+0xc>)
   819ac:	4b02      	ldr	r3, [pc, #8]	; (819b8 <USART0_Handler+0x10>)
   819ae:	4798      	blx	r3
}
   819b0:	bd08      	pop	{r3, pc}
   819b2:	bf00      	nop
   819b4:	20000580 	.word	0x20000580
   819b8:	00081925 	.word	0x00081925

000819bc <configure_usart>:
{
   819bc:	b538      	push	{r3, r4, r5, lr}
   819be:	4604      	mov	r4, r0
   819c0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    driver->usartopts.baudrate = baud;
   819c4:	6061      	str	r1, [r4, #4]
    switch(stop_bits)
   819c6:	2a01      	cmp	r2, #1
   819c8:	d00d      	beq.n	819e6 <configure_usart+0x2a>
   819ca:	2a02      	cmp	r2, #2
   819cc:	d00f      	beq.n	819ee <configure_usart+0x32>
   819ce:	b112      	cbz	r2, 819d6 <configure_usart+0x1a>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   819d0:	2200      	movs	r2, #0
   819d2:	6122      	str	r2, [r4, #16]
   819d4:	e000      	b.n	819d8 <configure_usart+0x1c>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   819d6:	6122      	str	r2, [r4, #16]
    switch(parity)
   819d8:	2b04      	cmp	r3, #4
   819da:	d827      	bhi.n	81a2c <configure_usart+0x70>
   819dc:	e8df f003 	tbb	[pc, r3]
   819e0:	1e1b170b 	.word	0x1e1b170b
   819e4:	22          	.byte	0x22
   819e5:	00          	.byte	0x00
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   819e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   819ea:	6122      	str	r2, [r4, #16]
            break;
   819ec:	e7f4      	b.n	819d8 <configure_usart+0x1c>
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   819ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   819f2:	6122      	str	r2, [r4, #16]
            break;
   819f4:	e7f0      	b.n	819d8 <configure_usart+0x1c>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   819f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   819fa:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   819fc:	2806      	cmp	r0, #6
   819fe:	d037      	beq.n	81a70 <configure_usart+0xb4>
   81a00:	2807      	cmp	r0, #7
   81a02:	d038      	beq.n	81a76 <configure_usart+0xba>
   81a04:	2805      	cmp	r0, #5
   81a06:	d015      	beq.n	81a34 <configure_usart+0x78>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81a08:	23c0      	movs	r3, #192	; 0xc0
   81a0a:	60a3      	str	r3, [r4, #8]
   81a0c:	e014      	b.n	81a38 <configure_usart+0x7c>
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
   81a12:	60e3      	str	r3, [r4, #12]
            break;
   81a14:	e7f2      	b.n	819fc <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81a16:	2300      	movs	r3, #0
   81a18:	60e3      	str	r3, [r4, #12]
            break;
   81a1a:	e7ef      	b.n	819fc <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81a1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81a20:	60e3      	str	r3, [r4, #12]
            break;
   81a22:	e7eb      	b.n	819fc <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81a28:	60e3      	str	r3, [r4, #12]
            break;							
   81a2a:	e7e7      	b.n	819fc <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81a2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81a30:	60e3      	str	r3, [r4, #12]
   81a32:	e7e3      	b.n	819fc <configure_usart+0x40>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81a34:	2300      	movs	r3, #0
   81a36:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81a38:	2300      	movs	r3, #0
   81a3a:	6163      	str	r3, [r4, #20]
    usart_enableIO(driver);
   81a3c:	4620      	mov	r0, r4
   81a3e:	4b0f      	ldr	r3, [pc, #60]	; (81a7c <configure_usart+0xc0>)
   81a40:	4798      	blx	r3
    driver->enabled = 1;
   81a42:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81a46:	f043 0302 	orr.w	r3, r3, #2
   81a4a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81a4e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   81a52:	4d0b      	ldr	r5, [pc, #44]	; (81a80 <configure_usart+0xc4>)
   81a54:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   81a56:	f104 001c 	add.w	r0, r4, #28
   81a5a:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   81a5c:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81a60:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   81a62:	4621      	mov	r1, r4
   81a64:	f851 0b04 	ldr.w	r0, [r1], #4
   81a68:	4a06      	ldr	r2, [pc, #24]	; (81a84 <configure_usart+0xc8>)
   81a6a:	4b07      	ldr	r3, [pc, #28]	; (81a88 <configure_usart+0xcc>)
   81a6c:	4798      	blx	r3
}
   81a6e:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   81a70:	2340      	movs	r3, #64	; 0x40
   81a72:	60a3      	str	r3, [r4, #8]
            break;
   81a74:	e7e0      	b.n	81a38 <configure_usart+0x7c>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   81a76:	2380      	movs	r3, #128	; 0x80
   81a78:	60a3      	str	r3, [r4, #8]
            break;					
   81a7a:	e7dd      	b.n	81a38 <configure_usart+0x7c>
   81a7c:	00081911 	.word	0x00081911
   81a80:	00082e35 	.word	0x00082e35
   81a84:	05b8d800 	.word	0x05b8d800
   81a88:	00085559 	.word	0x00085559

00081a8c <usart_driver_putchar>:
{
   81a8c:	b570      	push	{r4, r5, r6, lr}
   81a8e:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   81a90:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   81a94:	2200      	movs	r2, #0
   81a96:	4628      	mov	r0, r5
   81a98:	4b0e      	ldr	r3, [pc, #56]	; (81ad4 <usart_driver_putchar+0x48>)
   81a9a:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   81a9c:	6820      	ldr	r0, [r4, #0]
   81a9e:	4b0e      	ldr	r3, [pc, #56]	; (81ad8 <usart_driver_putchar+0x4c>)
   81aa0:	4798      	blx	r3
   81aa2:	f010 0f02 	tst.w	r0, #2
   81aa6:	d000      	beq.n	81aaa <usart_driver_putchar+0x1e>
}
   81aa8:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   81aaa:	6820      	ldr	r0, [r4, #0]
   81aac:	4b0b      	ldr	r3, [pc, #44]	; (81adc <usart_driver_putchar+0x50>)
   81aae:	4798      	blx	r3
   81ab0:	f010 0f02 	tst.w	r0, #2
   81ab4:	d104      	bne.n	81ac0 <usart_driver_putchar+0x34>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81ab6:	2102      	movs	r1, #2
   81ab8:	6820      	ldr	r0, [r4, #0]
   81aba:	4b09      	ldr	r3, [pc, #36]	; (81ae0 <usart_driver_putchar+0x54>)
   81abc:	4798      	blx	r3
}
   81abe:	e7f3      	b.n	81aa8 <usart_driver_putchar+0x1c>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   81ac0:	6826      	ldr	r6, [r4, #0]
   81ac2:	4628      	mov	r0, r5
   81ac4:	4b07      	ldr	r3, [pc, #28]	; (81ae4 <usart_driver_putchar+0x58>)
   81ac6:	4798      	blx	r3
   81ac8:	4601      	mov	r1, r0
   81aca:	4630      	mov	r0, r6
   81acc:	4b06      	ldr	r3, [pc, #24]	; (81ae8 <usart_driver_putchar+0x5c>)
   81ace:	4798      	blx	r3
   81ad0:	e7f1      	b.n	81ab6 <usart_driver_putchar+0x2a>
   81ad2:	bf00      	nop
   81ad4:	00082e41 	.word	0x00082e41
   81ad8:	00085631 	.word	0x00085631
   81adc:	00085635 	.word	0x00085635
   81ae0:	00085629 	.word	0x00085629
   81ae4:	00082e95 	.word	0x00082e95
   81ae8:	00085655 	.word	0x00085655

00081aec <get_nth_available_driver>:
        if (id == 0) return &usart0_driver;
   81aec:	2800      	cmp	r0, #0
}
   81aee:	4802      	ldr	r0, [pc, #8]	; (81af8 <get_nth_available_driver+0xc>)
   81af0:	bf18      	it	ne
   81af2:	2000      	movne	r0, #0
   81af4:	4770      	bx	lr
   81af6:	bf00      	nop
   81af8:	20000580 	.word	0x20000580

00081afc <ctrl_usart_in>:
{
   81afc:	b510      	push	{r4, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81afe:	4b25      	ldr	r3, [pc, #148]	; (81b94 <ctrl_usart_in+0x98>)
   81b00:	885c      	ldrh	r4, [r3, #2]
   81b02:	0a20      	lsrs	r0, r4, #8
   81b04:	4b24      	ldr	r3, [pc, #144]	; (81b98 <ctrl_usart_in+0x9c>)
   81b06:	4798      	blx	r3
    if (!driver)
   81b08:	2800      	cmp	r0, #0
   81b0a:	d040      	beq.n	81b8e <ctrl_usart_in+0x92>
   81b0c:	4603      	mov	r3, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81b0e:	b2e0      	uxtb	r0, r4
   81b10:	2814      	cmp	r0, #20
   81b12:	d006      	beq.n	81b22 <ctrl_usart_in+0x26>
   81b14:	2818      	cmp	r0, #24
   81b16:	d01f      	beq.n	81b58 <ctrl_usart_in+0x5c>
   81b18:	2810      	cmp	r0, #16
   81b1a:	bf14      	ite	ne
   81b1c:	2000      	movne	r0, #0
   81b1e:	2001      	moveq	r0, #1
}
   81b20:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81b22:	4a1c      	ldr	r2, [pc, #112]	; (81b94 <ctrl_usart_in+0x98>)
   81b24:	88d2      	ldrh	r2, [r2, #6]
   81b26:	2a03      	cmp	r2, #3
   81b28:	d801      	bhi.n	81b2e <ctrl_usart_in+0x32>
            return false;
   81b2a:	2000      	movs	r0, #0
   81b2c:	e7f8      	b.n	81b20 <ctrl_usart_in+0x24>
        udd_g_ctrlreq.payload = respbuf;
   81b2e:	4a19      	ldr	r2, [pc, #100]	; (81b94 <ctrl_usart_in+0x98>)
   81b30:	4c1a      	ldr	r4, [pc, #104]	; (81b9c <ctrl_usart_in+0xa0>)
   81b32:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81b34:	2104      	movs	r1, #4
   81b36:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   81b38:	f103 001c 	add.w	r0, r3, #28
   81b3c:	4b18      	ldr	r3, [pc, #96]	; (81ba0 <ctrl_usart_in+0xa4>)
   81b3e:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81b40:	7020      	strb	r0, [r4, #0]
   81b42:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81b46:	7063      	strb	r3, [r4, #1]
   81b48:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81b4c:	70a3      	strb	r3, [r4, #2]
   81b4e:	f3c0 6007 	ubfx	r0, r0, #24, #8
   81b52:	70e0      	strb	r0, [r4, #3]
        return true;
   81b54:	2001      	movs	r0, #1
   81b56:	e7e3      	b.n	81b20 <ctrl_usart_in+0x24>
        if (udd_g_ctrlreq.req.wLength < 4) {
   81b58:	4a0e      	ldr	r2, [pc, #56]	; (81b94 <ctrl_usart_in+0x98>)
   81b5a:	88d2      	ldrh	r2, [r2, #6]
   81b5c:	2a03      	cmp	r2, #3
   81b5e:	d801      	bhi.n	81b64 <ctrl_usart_in+0x68>
            return false;
   81b60:	2000      	movs	r0, #0
   81b62:	e7dd      	b.n	81b20 <ctrl_usart_in+0x24>
        udd_g_ctrlreq.payload = respbuf;
   81b64:	4a0b      	ldr	r2, [pc, #44]	; (81b94 <ctrl_usart_in+0x98>)
   81b66:	4c0d      	ldr	r4, [pc, #52]	; (81b9c <ctrl_usart_in+0xa0>)
   81b68:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81b6a:	2104      	movs	r1, #4
   81b6c:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   81b6e:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
   81b72:	4b0b      	ldr	r3, [pc, #44]	; (81ba0 <ctrl_usart_in+0xa4>)
   81b74:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81b76:	7020      	strb	r0, [r4, #0]
   81b78:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81b7c:	7063      	strb	r3, [r4, #1]
   81b7e:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81b82:	70a3      	strb	r3, [r4, #2]
   81b84:	f3c0 6007 	ubfx	r0, r0, #24, #8
   81b88:	70e0      	strb	r0, [r4, #3]
        return true;
   81b8a:	2001      	movs	r0, #1
   81b8c:	e7c8      	b.n	81b20 <ctrl_usart_in+0x24>
        return false;
   81b8e:	2000      	movs	r0, #0
   81b90:	e7c6      	b.n	81b20 <ctrl_usart_in+0x24>
   81b92:	bf00      	nop
   81b94:	2000269c 	.word	0x2000269c
   81b98:	00081aed 	.word	0x00081aed
   81b9c:	200021d8 	.word	0x200021d8
   81ba0:	00082ee9 	.word	0x00082ee9

00081ba4 <ctrl_usart_out>:
{
   81ba4:	b530      	push	{r4, r5, lr}
   81ba6:	b083      	sub	sp, #12
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81ba8:	4b1b      	ldr	r3, [pc, #108]	; (81c18 <ctrl_usart_out+0x74>)
   81baa:	885c      	ldrh	r4, [r3, #2]
   81bac:	0a20      	lsrs	r0, r4, #8
   81bae:	4b1b      	ldr	r3, [pc, #108]	; (81c1c <ctrl_usart_out+0x78>)
   81bb0:	4798      	blx	r3
    if (!driver) return;
   81bb2:	b138      	cbz	r0, 81bc4 <ctrl_usart_out+0x20>
   81bb4:	4605      	mov	r5, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81bb6:	b2e3      	uxtb	r3, r4
   81bb8:	2b11      	cmp	r3, #17
   81bba:	d014      	beq.n	81be6 <ctrl_usart_out+0x42>
   81bbc:	2b12      	cmp	r3, #18
   81bbe:	d01f      	beq.n	81c00 <ctrl_usart_out+0x5c>
   81bc0:	2b10      	cmp	r3, #16
   81bc2:	d001      	beq.n	81bc8 <ctrl_usart_out+0x24>
}
   81bc4:	b003      	add	sp, #12
   81bc6:	bd30      	pop	{r4, r5, pc}
        if (udd_g_ctrlreq.req.wLength != 7) return false;
   81bc8:	4b13      	ldr	r3, [pc, #76]	; (81c18 <ctrl_usart_out+0x74>)
   81bca:	88db      	ldrh	r3, [r3, #6]
   81bcc:	2b07      	cmp	r3, #7
   81bce:	d1f9      	bne.n	81bc4 <ctrl_usart_out+0x20>
        buf2word(baud, udd_g_ctrlreq.payload);
   81bd0:	4b11      	ldr	r3, [pc, #68]	; (81c18 <ctrl_usart_out+0x74>)
   81bd2:	6898      	ldr	r0, [r3, #8]
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   81bd4:	7943      	ldrb	r3, [r0, #5]
   81bd6:	7902      	ldrb	r2, [r0, #4]
   81bd8:	6801      	ldr	r1, [r0, #0]
   81bda:	7980      	ldrb	r0, [r0, #6]
   81bdc:	9000      	str	r0, [sp, #0]
   81bde:	4628      	mov	r0, r5
   81be0:	4c0f      	ldr	r4, [pc, #60]	; (81c20 <ctrl_usart_out+0x7c>)
   81be2:	47a0      	blx	r4
        return true;
   81be4:	e7ee      	b.n	81bc4 <ctrl_usart_out+0x20>
		usart_enableIO(driver);
   81be6:	4b0f      	ldr	r3, [pc, #60]	; (81c24 <ctrl_usart_out+0x80>)
   81be8:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   81bea:	6828      	ldr	r0, [r5, #0]
   81bec:	4b0e      	ldr	r3, [pc, #56]	; (81c28 <ctrl_usart_out+0x84>)
   81bee:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   81bf0:	6828      	ldr	r0, [r5, #0]
   81bf2:	4b0e      	ldr	r3, [pc, #56]	; (81c2c <ctrl_usart_out+0x88>)
   81bf4:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   81bf6:	2101      	movs	r1, #1
   81bf8:	6828      	ldr	r0, [r5, #0]
   81bfa:	4b0d      	ldr	r3, [pc, #52]	; (81c30 <ctrl_usart_out+0x8c>)
   81bfc:	4798      	blx	r3
		return;
   81bfe:	e7e1      	b.n	81bc4 <ctrl_usart_out+0x20>
        usart_disable_rx(driver->usart);
   81c00:	6800      	ldr	r0, [r0, #0]
   81c02:	4b0c      	ldr	r3, [pc, #48]	; (81c34 <ctrl_usart_out+0x90>)
   81c04:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   81c06:	6828      	ldr	r0, [r5, #0]
   81c08:	4b0b      	ldr	r3, [pc, #44]	; (81c38 <ctrl_usart_out+0x94>)
   81c0a:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81c0c:	2103      	movs	r1, #3
   81c0e:	6828      	ldr	r0, [r5, #0]
   81c10:	4b0a      	ldr	r3, [pc, #40]	; (81c3c <ctrl_usart_out+0x98>)
   81c12:	4798      	blx	r3
        return true;
   81c14:	e7d6      	b.n	81bc4 <ctrl_usart_out+0x20>
   81c16:	bf00      	nop
   81c18:	2000269c 	.word	0x2000269c
   81c1c:	00081aed 	.word	0x00081aed
   81c20:	000819bd 	.word	0x000819bd
   81c24:	00081911 	.word	0x00081911
   81c28:	0008561d 	.word	0x0008561d
   81c2c:	00085611 	.word	0x00085611
   81c30:	00085629 	.word	0x00085629
   81c34:	00085623 	.word	0x00085623
   81c38:	00085617 	.word	0x00085617
   81c3c:	0008562d 	.word	0x0008562d

00081c40 <ctrl_usart_cb>:
{
   81c40:	b508      	push	{r3, lr}
	ctrl_usart_out();
   81c42:	4b01      	ldr	r3, [pc, #4]	; (81c48 <ctrl_usart_cb+0x8>)
   81c44:	4798      	blx	r3
}
   81c46:	bd08      	pop	{r3, pc}
   81c48:	00081ba5 	.word	0x00081ba5

00081c4c <naeusb_cdc_settings_out>:
{
   81c4c:	b570      	push	{r4, r5, r6, lr}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81c4e:	4b0d      	ldr	r3, [pc, #52]	; (81c84 <naeusb_cdc_settings_out+0x38>)
   81c50:	885e      	ldrh	r6, [r3, #2]
   81c52:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81c54:	4d0c      	ldr	r5, [pc, #48]	; (81c88 <naeusb_cdc_settings_out+0x3c>)
   81c56:	e002      	b.n	81c5e <naeusb_cdc_settings_out+0x12>
    for (uint8_t i = 0; i < 4; i++) {
   81c58:	3401      	adds	r4, #1
   81c5a:	2c04      	cmp	r4, #4
   81c5c:	d011      	beq.n	81c82 <naeusb_cdc_settings_out+0x36>
        usart_driver *driver = get_nth_available_driver(i);
   81c5e:	4620      	mov	r0, r4
   81c60:	47a8      	blx	r5
        if (driver) {
   81c62:	2800      	cmp	r0, #0
   81c64:	d0f8      	beq.n	81c58 <naeusb_cdc_settings_out+0xc>
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81c66:	fa46 f204 	asr.w	r2, r6, r4
   81c6a:	f012 0f01 	tst.w	r2, #1
                driver->cdc_settings_change = 1;
   81c6e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
   81c72:	bf14      	ite	ne
   81c74:	f042 0208 	orrne.w	r2, r2, #8
                driver->cdc_settings_change = 0;
   81c78:	f36f 02c3 	bfceq	r2, #3, #1
   81c7c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
   81c80:	e7ea      	b.n	81c58 <naeusb_cdc_settings_out+0xc>
}
   81c82:	bd70      	pop	{r4, r5, r6, pc}
   81c84:	2000269c 	.word	0x2000269c
   81c88:	00081aed 	.word	0x00081aed

00081c8c <ctrl_usart_cb_data>:
{		
   81c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81c8e:	4b0c      	ldr	r3, [pc, #48]	; (81cc0 <ctrl_usart_cb_data+0x34>)
   81c90:	8858      	ldrh	r0, [r3, #2]
   81c92:	0a00      	lsrs	r0, r0, #8
   81c94:	4b0b      	ldr	r3, [pc, #44]	; (81cc4 <ctrl_usart_cb_data+0x38>)
   81c96:	4798      	blx	r3
	if (!driver) return;
   81c98:	b188      	cbz	r0, 81cbe <ctrl_usart_cb_data+0x32>
   81c9a:	4606      	mov	r6, r0
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81c9c:	4b08      	ldr	r3, [pc, #32]	; (81cc0 <ctrl_usart_cb_data+0x34>)
   81c9e:	88da      	ldrh	r2, [r3, #6]
   81ca0:	899b      	ldrh	r3, [r3, #12]
   81ca2:	4293      	cmp	r3, r2
   81ca4:	d30b      	bcc.n	81cbe <ctrl_usart_cb_data+0x32>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81ca6:	b152      	cbz	r2, 81cbe <ctrl_usart_cb_data+0x32>
   81ca8:	2400      	movs	r4, #0
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   81caa:	4d05      	ldr	r5, [pc, #20]	; (81cc0 <ctrl_usart_cb_data+0x34>)
   81cac:	4f06      	ldr	r7, [pc, #24]	; (81cc8 <ctrl_usart_cb_data+0x3c>)
   81cae:	68ab      	ldr	r3, [r5, #8]
   81cb0:	5d19      	ldrb	r1, [r3, r4]
   81cb2:	4630      	mov	r0, r6
   81cb4:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81cb6:	3401      	adds	r4, #1
   81cb8:	88eb      	ldrh	r3, [r5, #6]
   81cba:	42a3      	cmp	r3, r4
   81cbc:	dcf7      	bgt.n	81cae <ctrl_usart_cb_data+0x22>
}
   81cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81cc0:	2000269c 	.word	0x2000269c
   81cc4:	00081aed 	.word	0x00081aed
   81cc8:	00081a8d 	.word	0x00081a8d

00081ccc <naeusart_register_handlers>:
{
   81ccc:	b570      	push	{r4, r5, r6, lr}
   81cce:	2400      	movs	r4, #0
		usart_driver *driver = get_nth_available_driver(i);
   81cd0:	4d09      	ldr	r5, [pc, #36]	; (81cf8 <naeusart_register_handlers+0x2c>)
		usart_enableIO(driver);
   81cd2:	4e0a      	ldr	r6, [pc, #40]	; (81cfc <naeusart_register_handlers+0x30>)
   81cd4:	e002      	b.n	81cdc <naeusart_register_handlers+0x10>
	for (uint8_t i = 0; i < 4; i++) {
   81cd6:	3401      	adds	r4, #1
   81cd8:	2c04      	cmp	r4, #4
   81cda:	d005      	beq.n	81ce8 <naeusart_register_handlers+0x1c>
		usart_driver *driver = get_nth_available_driver(i);
   81cdc:	4620      	mov	r0, r4
   81cde:	47a8      	blx	r5
		if (!driver) continue;
   81ce0:	2800      	cmp	r0, #0
   81ce2:	d0f8      	beq.n	81cd6 <naeusart_register_handlers+0xa>
		usart_enableIO(driver);
   81ce4:	47b0      	blx	r6
   81ce6:	e7f6      	b.n	81cd6 <naeusart_register_handlers+0xa>
    naeusb_add_in_handler(usart_setup_in_received);
   81ce8:	4805      	ldr	r0, [pc, #20]	; (81d00 <naeusart_register_handlers+0x34>)
   81cea:	4b06      	ldr	r3, [pc, #24]	; (81d04 <naeusart_register_handlers+0x38>)
   81cec:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   81cee:	4806      	ldr	r0, [pc, #24]	; (81d08 <naeusart_register_handlers+0x3c>)
   81cf0:	4b06      	ldr	r3, [pc, #24]	; (81d0c <naeusart_register_handlers+0x40>)
   81cf2:	4798      	blx	r3
}
   81cf4:	bd70      	pop	{r4, r5, r6, pc}
   81cf6:	bf00      	nop
   81cf8:	00081aed 	.word	0x00081aed
   81cfc:	00081911 	.word	0x00081911
   81d00:	00081d59 	.word	0x00081d59
   81d04:	00081255 	.word	0x00081255
   81d08:	00081849 	.word	0x00081849
   81d0c:	00081279 	.word	0x00081279

00081d10 <naeusb_cdc_settings_in>:
{
   81d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (uint8_t i = 0; i < 4; i++) {
   81d12:	4d0e      	ldr	r5, [pc, #56]	; (81d4c <naeusb_cdc_settings_in+0x3c>)
{
   81d14:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81d16:	4f0e      	ldr	r7, [pc, #56]	; (81d50 <naeusb_cdc_settings_in+0x40>)
		respbuf[i] = 0;
   81d18:	4626      	mov	r6, r4
   81d1a:	e002      	b.n	81d22 <naeusb_cdc_settings_in+0x12>
    for (uint8_t i = 0; i < 4; i++) {
   81d1c:	3401      	adds	r4, #1
   81d1e:	2c04      	cmp	r4, #4
   81d20:	d00c      	beq.n	81d3c <naeusb_cdc_settings_in+0x2c>
        usart_driver *driver = get_nth_available_driver(i);
   81d22:	4620      	mov	r0, r4
   81d24:	47b8      	blx	r7
		respbuf[i] = 0;
   81d26:	f805 6b01 	strb.w	r6, [r5], #1
        if (driver)
   81d2a:	2800      	cmp	r0, #0
   81d2c:	d0f6      	beq.n	81d1c <naeusb_cdc_settings_in+0xc>
            respbuf[i] = driver->cdc_settings_change;
   81d2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81d32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   81d36:	f805 3c01 	strb.w	r3, [r5, #-1]
   81d3a:	e7ef      	b.n	81d1c <naeusb_cdc_settings_in+0xc>
    udd_g_ctrlreq.payload = respbuf;
   81d3c:	4b05      	ldr	r3, [pc, #20]	; (81d54 <naeusb_cdc_settings_in+0x44>)
   81d3e:	4a03      	ldr	r2, [pc, #12]	; (81d4c <naeusb_cdc_settings_in+0x3c>)
   81d40:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = 4;
   81d42:	2204      	movs	r2, #4
   81d44:	819a      	strh	r2, [r3, #12]
}
   81d46:	2001      	movs	r0, #1
   81d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d4a:	bf00      	nop
   81d4c:	200021d8 	.word	0x200021d8
   81d50:	00081aed 	.word	0x00081aed
   81d54:	2000269c 	.word	0x2000269c

00081d58 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   81d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   81d5c:	4b21      	ldr	r3, [pc, #132]	; (81de4 <usart_setup_in_received+0x8c>)
   81d5e:	785b      	ldrb	r3, [r3, #1]
   81d60:	3b1a      	subs	r3, #26
   81d62:	2b17      	cmp	r3, #23
   81d64:	d839      	bhi.n	81dda <usart_setup_in_received+0x82>
   81d66:	e8df f003 	tbb	[pc, r3]
   81d6a:	0c0f      	.short	0x0c0f
   81d6c:	38383838 	.word	0x38383838
   81d70:	3838322f 	.word	0x3838322f
   81d74:	38383838 	.word	0x38383838
   81d78:	38383838 	.word	0x38383838
   81d7c:	38383838 	.word	0x38383838
   81d80:	3538      	.short	0x3538
    case REQ_USART0_CONFIG:
        return ctrl_usart_in();
   81d82:	4b19      	ldr	r3, [pc, #100]	; (81de8 <usart_setup_in_received+0x90>)
   81d84:	4798      	blx	r3
   81d86:	e029      	b.n	81ddc <usart_setup_in_received+0x84>
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81d88:	4b16      	ldr	r3, [pc, #88]	; (81de4 <usart_setup_in_received+0x8c>)
   81d8a:	8858      	ldrh	r0, [r3, #2]
   81d8c:	0a00      	lsrs	r0, r0, #8
   81d8e:	4b17      	ldr	r3, [pc, #92]	; (81dec <usart_setup_in_received+0x94>)
   81d90:	4798      	blx	r3
		if (!driver) return false;
   81d92:	4606      	mov	r6, r0
   81d94:	b320      	cbz	r0, 81de0 <usart_setup_in_received+0x88>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81d96:	4b13      	ldr	r3, [pc, #76]	; (81de4 <usart_setup_in_received+0x8c>)
   81d98:	88db      	ldrh	r3, [r3, #6]
   81d9a:	b19b      	cbz	r3, 81dc4 <usart_setup_in_received+0x6c>
   81d9c:	4d14      	ldr	r5, [pc, #80]	; (81df0 <usart_setup_in_received+0x98>)
   81d9e:	2400      	movs	r4, #0
    return get_from_circ_buf(&driver->rxbuf);
   81da0:	361c      	adds	r6, #28
   81da2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 81e00 <usart_setup_in_received+0xa8>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81da6:	4f0f      	ldr	r7, [pc, #60]	; (81de4 <usart_setup_in_received+0x8c>)
    return get_from_circ_buf(&driver->rxbuf);
   81da8:	4630      	mov	r0, r6
   81daa:	47c0      	blx	r8
            respbuf[cnt] = usart_driver_getchar(driver);
   81dac:	f805 0b01 	strb.w	r0, [r5], #1
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81db0:	3401      	adds	r4, #1
   81db2:	88fb      	ldrh	r3, [r7, #6]
   81db4:	42a3      	cmp	r3, r4
   81db6:	d8f7      	bhi.n	81da8 <usart_setup_in_received+0x50>
        }
        udd_g_ctrlreq.payload = respbuf;
   81db8:	4b0a      	ldr	r3, [pc, #40]	; (81de4 <usart_setup_in_received+0x8c>)
   81dba:	4a0d      	ldr	r2, [pc, #52]	; (81df0 <usart_setup_in_received+0x98>)
   81dbc:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   81dbe:	819c      	strh	r4, [r3, #12]
        return true;
   81dc0:	2001      	movs	r0, #1
   81dc2:	e00b      	b.n	81ddc <usart_setup_in_received+0x84>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81dc4:	2400      	movs	r4, #0
   81dc6:	e7f7      	b.n	81db8 <usart_setup_in_received+0x60>
        break;
		
	#if USB_DEVICE_PRODUCT_ID != 0xACE0
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   81dc8:	4b0a      	ldr	r3, [pc, #40]	; (81df4 <usart_setup_in_received+0x9c>)
   81dca:	4798      	blx	r3
   81dcc:	e006      	b.n	81ddc <usart_setup_in_received+0x84>
        break;
        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   81dce:	4b0a      	ldr	r3, [pc, #40]	; (81df8 <usart_setup_in_received+0xa0>)
   81dd0:	4798      	blx	r3
   81dd2:	e003      	b.n	81ddc <usart_setup_in_received+0x84>
        break;
	#endif
	
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
   81dd4:	4b09      	ldr	r3, [pc, #36]	; (81dfc <usart_setup_in_received+0xa4>)
   81dd6:	4798      	blx	r3
   81dd8:	e000      	b.n	81ddc <usart_setup_in_received+0x84>
    switch(udd_g_ctrlreq.req.bRequest) {
   81dda:	2000      	movs	r0, #0
        break;
    }
    return false;
}
   81ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!driver) return false;
   81de0:	2000      	movs	r0, #0
   81de2:	e7fb      	b.n	81ddc <usart_setup_in_received+0x84>
   81de4:	2000269c 	.word	0x2000269c
   81de8:	00081afd 	.word	0x00081afd
   81dec:	00081aed 	.word	0x00081aed
   81df0:	200021d8 	.word	0x200021d8
   81df4:	0008267d 	.word	0x0008267d
   81df8:	00081fc9 	.word	0x00081fc9
   81dfc:	00081d11 	.word	0x00081d11
   81e00:	00082e95 	.word	0x00082e95

00081e04 <cdc_enable>:
{
   81e04:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81e06:	4b05      	ldr	r3, [pc, #20]	; (81e1c <cdc_enable+0x18>)
   81e08:	4798      	blx	r3
    driver->cdc_enabled = 1;
   81e0a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81e0e:	f043 0304 	orr.w	r3, r3, #4
   81e12:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   81e16:	2001      	movs	r0, #1
   81e18:	bd08      	pop	{r3, pc}
   81e1a:	bf00      	nop
   81e1c:	00081aed 	.word	0x00081aed

00081e20 <cdc_disable>:
{
   81e20:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81e22:	4b04      	ldr	r3, [pc, #16]	; (81e34 <cdc_disable+0x14>)
   81e24:	4798      	blx	r3
    driver->cdc_enabled = 0;
   81e26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81e2a:	f36f 0382 	bfc	r3, #2, #1
   81e2e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   81e32:	bd08      	pop	{r3, pc}
   81e34:	00081aed 	.word	0x00081aed

00081e38 <my_callback_rx_notify>:
{
   81e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e3c:	4681      	mov	r9, r0
	usart_driver *driver = get_nth_available_driver(port);
   81e3e:	4b19      	ldr	r3, [pc, #100]	; (81ea4 <my_callback_rx_notify+0x6c>)
   81e40:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   81e42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81e46:	f003 0306 	and.w	r3, r3, #6
   81e4a:	2b06      	cmp	r3, #6
   81e4c:	d001      	beq.n	81e52 <my_callback_rx_notify+0x1a>
}
   81e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81e52:	4605      	mov	r5, r0
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   81e54:	4648      	mov	r0, r9
   81e56:	4b14      	ldr	r3, [pc, #80]	; (81ea8 <my_callback_rx_notify+0x70>)
   81e58:	4798      	blx	r3
        while (num_char > 0) {
   81e5a:	4604      	mov	r4, r0
   81e5c:	2800      	cmp	r0, #0
   81e5e:	d0f6      	beq.n	81e4e <my_callback_rx_notify+0x16>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81e60:	4f12      	ldr	r7, [pc, #72]	; (81eac <my_callback_rx_notify+0x74>)
   81e62:	f8df a04c 	ldr.w	sl, [pc, #76]	; 81eb0 <my_callback_rx_notify+0x78>
                usart_driver_putchar(driver, uart_buf[i]);
   81e66:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81eb4 <my_callback_rx_notify+0x7c>
   81e6a:	e005      	b.n	81e78 <my_callback_rx_notify+0x40>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   81e6c:	4648      	mov	r0, r9
   81e6e:	4b0e      	ldr	r3, [pc, #56]	; (81ea8 <my_callback_rx_notify+0x70>)
   81e70:	4798      	blx	r3
        while (num_char > 0) {
   81e72:	4604      	mov	r4, r0
   81e74:	2800      	cmp	r0, #0
   81e76:	d0ea      	beq.n	81e4e <my_callback_rx_notify+0x16>
            num_char = (num_char > 512) ? 512 : num_char;
   81e78:	4626      	mov	r6, r4
   81e7a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   81e7e:	bf28      	it	cs
   81e80:	f44f 7600 	movcs.w	r6, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81e84:	4632      	mov	r2, r6
   81e86:	4639      	mov	r1, r7
   81e88:	4648      	mov	r0, r9
   81e8a:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   81e8c:	2c00      	cmp	r4, #0
   81e8e:	d0ed      	beq.n	81e6c <my_callback_rx_notify+0x34>
   81e90:	2400      	movs	r4, #0
                usart_driver_putchar(driver, uart_buf[i]);
   81e92:	5d39      	ldrb	r1, [r7, r4]
   81e94:	4628      	mov	r0, r5
   81e96:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   81e98:	3401      	adds	r4, #1
   81e9a:	b2a4      	uxth	r4, r4
   81e9c:	42b4      	cmp	r4, r6
   81e9e:	d3f8      	bcc.n	81e92 <my_callback_rx_notify+0x5a>
   81ea0:	e7e4      	b.n	81e6c <my_callback_rx_notify+0x34>
   81ea2:	bf00      	nop
   81ea4:	00081aed 	.word	0x00081aed
   81ea8:	000803c5 	.word	0x000803c5
   81eac:	20001c48 	.word	0x20001c48
   81eb0:	000805cd 	.word	0x000805cd
   81eb4:	00081a8d 	.word	0x00081a8d

00081eb8 <my_callback_config>:
{
   81eb8:	b510      	push	{r4, lr}
   81eba:	b082      	sub	sp, #8
   81ebc:	460c      	mov	r4, r1
	usart_driver *driver = get_nth_available_driver(port);
   81ebe:	4b0c      	ldr	r3, [pc, #48]	; (81ef0 <my_callback_config+0x38>)
   81ec0:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   81ec2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81ec6:	f003 0306 	and.w	r3, r3, #6
   81eca:	2b06      	cmp	r3, #6
   81ecc:	d001      	beq.n	81ed2 <my_callback_config+0x1a>
}
   81ece:	b002      	add	sp, #8
   81ed0:	bd10      	pop	{r4, pc}
        switch(cfg->bParityType) {
   81ed2:	7963      	ldrb	r3, [r4, #5]
   81ed4:	2b04      	cmp	r3, #4
   81ed6:	d8fa      	bhi.n	81ece <my_callback_config+0x16>
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   81ed8:	79a3      	ldrb	r3, [r4, #6]
   81eda:	3b05      	subs	r3, #5
   81edc:	019b      	lsls	r3, r3, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   81ede:	b2db      	uxtb	r3, r3
   81ee0:	9300      	str	r3, [sp, #0]
   81ee2:	2300      	movs	r3, #0
   81ee4:	461a      	mov	r2, r3
   81ee6:	6821      	ldr	r1, [r4, #0]
   81ee8:	4c02      	ldr	r4, [pc, #8]	; (81ef4 <my_callback_config+0x3c>)
   81eea:	47a0      	blx	r4
   81eec:	e7ef      	b.n	81ece <my_callback_config+0x16>
   81eee:	bf00      	nop
   81ef0:	00081aed 	.word	0x00081aed
   81ef4:	000819bd 	.word	0x000819bd

00081ef8 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   81ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81efc:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
   81efe:	f8df b04c 	ldr.w	fp, [pc, #76]	; 81f4c <cdc_send_to_pc+0x54>
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled) {
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   81f02:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81f50 <cdc_send_to_pc+0x58>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   81f06:	f8df a04c 	ldr.w	sl, [pc, #76]	; 81f54 <cdc_send_to_pc+0x5c>
   81f0a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 81f58 <cdc_send_to_pc+0x60>
   81f0e:	e002      	b.n	81f16 <cdc_send_to_pc+0x1e>
	for (uint8_t i = 0; i < 4; i++) {
   81f10:	3401      	adds	r4, #1
   81f12:	2c04      	cmp	r4, #4
   81f14:	d017      	beq.n	81f46 <cdc_send_to_pc+0x4e>
   81f16:	b2e7      	uxtb	r7, r4
		usart_driver *driver = get_nth_available_driver(i);
   81f18:	4620      	mov	r0, r4
   81f1a:	47d8      	blx	fp
		if (!driver) continue;
   81f1c:	4606      	mov	r6, r0
   81f1e:	2800      	cmp	r0, #0
   81f20:	d0f6      	beq.n	81f10 <cdc_send_to_pc+0x18>
		if (driver->cdc_enabled && driver->enabled) {
   81f22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81f26:	f003 0306 	and.w	r3, r3, #6
   81f2a:	2b06      	cmp	r3, #6
   81f2c:	d1f0      	bne.n	81f10 <cdc_send_to_pc+0x18>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   81f2e:	f506 75e2 	add.w	r5, r6, #452	; 0x1c4
   81f32:	4628      	mov	r0, r5
   81f34:	47c0      	blx	r8
   81f36:	2800      	cmp	r0, #0
   81f38:	d0ea      	beq.n	81f10 <cdc_send_to_pc+0x18>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   81f3a:	4628      	mov	r0, r5
   81f3c:	47d0      	blx	sl
   81f3e:	4601      	mov	r1, r0
   81f40:	4638      	mov	r0, r7
   81f42:	47c8      	blx	r9
   81f44:	e7f3      	b.n	81f2e <cdc_send_to_pc+0x36>
			}
		}

	}
	
   81f46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f4a:	bf00      	nop
   81f4c:	00081aed 	.word	0x00081aed
   81f50:	00082edd 	.word	0x00082edd
   81f54:	00082e95 	.word	0x00082e95
   81f58:	00080705 	.word	0x00080705

00081f5c <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81f5c:	b510      	push	{r4, lr}
   81f5e:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   81f60:	4b06      	ldr	r3, [pc, #24]	; (81f7c <FPGA_setlock+0x20>)
   81f62:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81f64:	4b06      	ldr	r3, [pc, #24]	; (81f80 <FPGA_setlock+0x24>)
   81f66:	781b      	ldrb	r3, [r3, #0]
   81f68:	b933      	cbnz	r3, 81f78 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   81f6a:	4b05      	ldr	r3, [pc, #20]	; (81f80 <FPGA_setlock+0x24>)
   81f6c:	701c      	strb	r4, [r3, #0]
    ret = 1;
   81f6e:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   81f70:	4b04      	ldr	r3, [pc, #16]	; (81f84 <FPGA_setlock+0x28>)
   81f72:	4798      	blx	r3
  return ret;
}
   81f74:	4620      	mov	r0, r4
   81f76:	bd10      	pop	{r4, pc}
  int ret = 0;
   81f78:	2400      	movs	r4, #0
   81f7a:	e7f9      	b.n	81f70 <FPGA_setlock+0x14>
   81f7c:	000838fd 	.word	0x000838fd
   81f80:	20001e48 	.word	0x20001e48
   81f84:	00083939 	.word	0x00083939

00081f88 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   81f88:	4b01      	ldr	r3, [pc, #4]	; (81f90 <FPGA_releaselock+0x8>)
   81f8a:	2200      	movs	r2, #0
   81f8c:	701a      	strb	r2, [r3, #0]
}
   81f8e:	4770      	bx	lr
   81f90:	20001e48 	.word	0x20001e48

00081f94 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   81f94:	4b01      	ldr	r3, [pc, #4]	; (81f9c <FPGA_lockstatus+0x8>)
   81f96:	7818      	ldrb	r0, [r3, #0]
}
   81f98:	4770      	bx	lr
   81f9a:	bf00      	nop
   81f9c:	20001e48 	.word	0x20001e48

00081fa0 <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   81fa0:	b508      	push	{r3, lr}
   81fa2:	4601      	mov	r1, r0
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   81fa4:	4804      	ldr	r0, [pc, #16]	; (81fb8 <FPGA_setaddr+0x18>)
   81fa6:	4b05      	ldr	r3, [pc, #20]	; (81fbc <FPGA_setaddr+0x1c>)
   81fa8:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   81faa:	2035      	movs	r0, #53	; 0x35
   81fac:	4b04      	ldr	r3, [pc, #16]	; (81fc0 <FPGA_setaddr+0x20>)
   81fae:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   81fb0:	2035      	movs	r0, #53	; 0x35
   81fb2:	4b04      	ldr	r3, [pc, #16]	; (81fc4 <FPGA_setaddr+0x24>)
   81fb4:	4798      	blx	r3
	#endif
}
   81fb6:	bd08      	pop	{r3, pc}
   81fb8:	400e0e00 	.word	0x400e0e00
   81fbc:	00083bb9 	.word	0x00083bb9
   81fc0:	00083bfb 	.word	0x00083bfb
   81fc4:	00083be1 	.word	0x00083be1

00081fc8 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   81fc8:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   81fca:	4b7e      	ldr	r3, [pc, #504]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   81fcc:	789c      	ldrb	r4, [r3, #2]
   81fce:	4b7e      	ldr	r3, [pc, #504]	; (821c8 <V2Protocol_ProcessCommand+0x200>)
   81fd0:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   81fd2:	4b7e      	ldr	r3, [pc, #504]	; (821cc <V2Protocol_ProcessCommand+0x204>)
   81fd4:	4798      	blx	r3

	switch (V2Command)
   81fd6:	1e63      	subs	r3, r4, #1
   81fd8:	2b21      	cmp	r3, #33	; 0x21
   81fda:	f200 80e8 	bhi.w	821ae <V2Protocol_ProcessCommand+0x1e6>
   81fde:	e8df f013 	tbh	[pc, r3, lsl #1]
   81fe2:	0022      	.short	0x0022
   81fe4:	00370037 	.word	0x00370037
   81fe8:	00e600e6 	.word	0x00e600e6
   81fec:	00e6006c 	.word	0x00e6006c
   81ff0:	00e600e6 	.word	0x00e600e6
   81ff4:	00e6008b 	.word	0x00e6008b
   81ff8:	00e600e6 	.word	0x00e600e6
   81ffc:	00e600e6 	.word	0x00e600e6
   82000:	00970093 	.word	0x00970093
   82004:	009b00a7 	.word	0x009b00a7
   82008:	009b00a1 	.word	0x009b00a1
   8200c:	00b000a1 	.word	0x00b000a1
   82010:	00b000ab 	.word	0x00b000ab
   82014:	00ab00ab 	.word	0x00ab00ab
   82018:	00b500ab 	.word	0x00b500ab
   8201c:	00e600e6 	.word	0x00e600e6
   82020:	00d300b9 	.word	0x00d300b9
   82024:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82026:	4b68      	ldr	r3, [pc, #416]	; (821c8 <V2Protocol_ProcessCommand+0x200>)
   82028:	2200      	movs	r2, #0
   8202a:	705a      	strb	r2, [r3, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   8202c:	220d      	movs	r2, #13
   8202e:	709a      	strb	r2, [r3, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82030:	4c67      	ldr	r4, [pc, #412]	; (821d0 <V2Protocol_ProcessCommand+0x208>)
   82032:	cc07      	ldmia	r4!, {r0, r1, r2}
   82034:	f8c3 0003 	str.w	r0, [r3, #3]
   82038:	f8c3 1007 	str.w	r1, [r3, #7]
   8203c:	f8c3 200b 	str.w	r2, [r3, #11]
   82040:	7822      	ldrb	r2, [r4, #0]
   82042:	73da      	strb	r2, [r3, #15]
	udd_g_ctrlreq.payload = status_payload;
   82044:	4a5f      	ldr	r2, [pc, #380]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   82046:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   82048:	2310      	movs	r3, #16
   8204a:	8193      	strh	r3, [r2, #12]
	return true;
   8204c:	2001      	movs	r0, #1
}
   8204e:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82050:	4b5c      	ldr	r3, [pc, #368]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   82052:	689b      	ldr	r3, [r3, #8]
   82054:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   82056:	2c02      	cmp	r4, #2
   82058:	d00c      	beq.n	82074 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   8205a:	4b5e      	ldr	r3, [pc, #376]	; (821d4 <V2Protocol_ProcessCommand+0x20c>)
   8205c:	2202      	movs	r2, #2
   8205e:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82060:	4628      	mov	r0, r5
   82062:	4b5d      	ldr	r3, [pc, #372]	; (821d8 <V2Protocol_ProcessCommand+0x210>)
   82064:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82066:	2c03      	cmp	r4, #3
   82068:	d017      	beq.n	8209a <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8206a:	4b5c      	ldr	r3, [pc, #368]	; (821dc <V2Protocol_ProcessCommand+0x214>)
   8206c:	22c0      	movs	r2, #192	; 0xc0
   8206e:	705a      	strb	r2, [r3, #1]
	return true;
   82070:	2001      	movs	r0, #1
   82072:	e7ec      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   82074:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   82076:	4b57      	ldr	r3, [pc, #348]	; (821d4 <V2Protocol_ProcessCommand+0x20c>)
   82078:	2202      	movs	r2, #2
   8207a:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   8207c:	4628      	mov	r0, r5
   8207e:	4b56      	ldr	r3, [pc, #344]	; (821d8 <V2Protocol_ProcessCommand+0x210>)
   82080:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82082:	f010 0f02 	tst.w	r0, #2
   82086:	d0f0      	beq.n	8206a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82088:	4b54      	ldr	r3, [pc, #336]	; (821dc <V2Protocol_ProcessCommand+0x214>)
   8208a:	2200      	movs	r2, #0
   8208c:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   8208e:	4621      	mov	r1, r4
   82090:	4628      	mov	r0, r5
   82092:	4b53      	ldr	r3, [pc, #332]	; (821e0 <V2Protocol_ProcessCommand+0x218>)
   82094:	4798      	blx	r3
	return true;
   82096:	2001      	movs	r0, #1
		V2Params_SetParameterValue(ParamID, ParamValue);
   82098:	e7d9      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   8209a:	f010 0f01 	tst.w	r0, #1
   8209e:	d0e4      	beq.n	8206a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   820a0:	4c4e      	ldr	r4, [pc, #312]	; (821dc <V2Protocol_ProcessCommand+0x214>)
   820a2:	2300      	movs	r3, #0
   820a4:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   820a6:	4628      	mov	r0, r5
   820a8:	4b4e      	ldr	r3, [pc, #312]	; (821e4 <V2Protocol_ProcessCommand+0x21c>)
   820aa:	4798      	blx	r3
   820ac:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   820ae:	4a49      	ldr	r2, [pc, #292]	; (821d4 <V2Protocol_ProcessCommand+0x20c>)
   820b0:	8813      	ldrh	r3, [r2, #0]
   820b2:	3301      	adds	r3, #1
   820b4:	8013      	strh	r3, [r2, #0]
	return true;
   820b6:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   820b8:	e7c9      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   820ba:	4b42      	ldr	r3, [pc, #264]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   820bc:	689b      	ldr	r3, [r3, #8]
   820be:	78da      	ldrb	r2, [r3, #3]
   820c0:	7899      	ldrb	r1, [r3, #2]
   820c2:	0409      	lsls	r1, r1, #16
   820c4:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   820c8:	781a      	ldrb	r2, [r3, #0]
   820ca:	4311      	orrs	r1, r2
   820cc:	785b      	ldrb	r3, [r3, #1]
   820ce:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   820d2:	4b45      	ldr	r3, [pc, #276]	; (821e8 <V2Protocol_ProcessCommand+0x220>)
   820d4:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   820d6:	2900      	cmp	r1, #0
   820d8:	db0a      	blt.n	820f0 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   820da:	4844      	ldr	r0, [pc, #272]	; (821ec <V2Protocol_ProcessCommand+0x224>)
   820dc:	4b44      	ldr	r3, [pc, #272]	; (821f0 <V2Protocol_ProcessCommand+0x228>)
   820de:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   820e0:	4b3e      	ldr	r3, [pc, #248]	; (821dc <V2Protocol_ProcessCommand+0x214>)
   820e2:	2200      	movs	r2, #0
   820e4:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   820e6:	4b3b      	ldr	r3, [pc, #236]	; (821d4 <V2Protocol_ProcessCommand+0x20c>)
   820e8:	2202      	movs	r2, #2
   820ea:	801a      	strh	r2, [r3, #0]
	return true;
   820ec:	2001      	movs	r0, #1
}
   820ee:	e7ae      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
	  MustLoadExtendedAddress = true;
   820f0:	4b40      	ldr	r3, [pc, #256]	; (821f4 <V2Protocol_ProcessCommand+0x22c>)
   820f2:	2201      	movs	r2, #1
   820f4:	701a      	strb	r2, [r3, #0]
   820f6:	e7f0      	b.n	820da <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   820f8:	4b38      	ldr	r3, [pc, #224]	; (821dc <V2Protocol_ProcessCommand+0x214>)
   820fa:	2200      	movs	r2, #0
   820fc:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   820fe:	4b35      	ldr	r3, [pc, #212]	; (821d4 <V2Protocol_ProcessCommand+0x20c>)
   82100:	2202      	movs	r2, #2
   82102:	801a      	strh	r2, [r3, #0]
	return true;
   82104:	2001      	movs	r0, #1
}
   82106:	e7a2      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_EnterISPMode();
   82108:	4b3b      	ldr	r3, [pc, #236]	; (821f8 <V2Protocol_ProcessCommand+0x230>)
   8210a:	4798      	blx	r3
	return true;
   8210c:	2001      	movs	r0, #1
			break;
   8210e:	e79e      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_LeaveISPMode();
   82110:	4b3a      	ldr	r3, [pc, #232]	; (821fc <V2Protocol_ProcessCommand+0x234>)
   82112:	4798      	blx	r3
	return true;
   82114:	2001      	movs	r0, #1
			break;
   82116:	e79a      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82118:	4939      	ldr	r1, [pc, #228]	; (82200 <V2Protocol_ProcessCommand+0x238>)
   8211a:	4620      	mov	r0, r4
   8211c:	4b39      	ldr	r3, [pc, #228]	; (82204 <V2Protocol_ProcessCommand+0x23c>)
   8211e:	4798      	blx	r3
	return true;
   82120:	2001      	movs	r0, #1
			break;
   82122:	e794      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82124:	4936      	ldr	r1, [pc, #216]	; (82200 <V2Protocol_ProcessCommand+0x238>)
   82126:	4620      	mov	r0, r4
   82128:	4b37      	ldr	r3, [pc, #220]	; (82208 <V2Protocol_ProcessCommand+0x240>)
   8212a:	4798      	blx	r3
	return true;
   8212c:	2001      	movs	r0, #1
			break;
   8212e:	e78e      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ChipErase();
   82130:	4b36      	ldr	r3, [pc, #216]	; (8220c <V2Protocol_ProcessCommand+0x244>)
   82132:	4798      	blx	r3
	return true;
   82134:	2001      	movs	r0, #1
			break;
   82136:	e78a      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   82138:	4620      	mov	r0, r4
   8213a:	4b35      	ldr	r3, [pc, #212]	; (82210 <V2Protocol_ProcessCommand+0x248>)
   8213c:	4798      	blx	r3
	return true;
   8213e:	2001      	movs	r0, #1
			break;
   82140:	e785      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_WriteFuseLock(V2Command);
   82142:	4620      	mov	r0, r4
   82144:	4b33      	ldr	r3, [pc, #204]	; (82214 <V2Protocol_ProcessCommand+0x24c>)
   82146:	4798      	blx	r3
	return true;
   82148:	2001      	movs	r0, #1
			break;
   8214a:	e780      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_SPIMulti();
   8214c:	4b32      	ldr	r3, [pc, #200]	; (82218 <V2Protocol_ProcessCommand+0x250>)
   8214e:	4798      	blx	r3
	return true;
   82150:	2001      	movs	r0, #1
			break;
   82152:	e77c      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82154:	4a1b      	ldr	r2, [pc, #108]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   82156:	4b21      	ldr	r3, [pc, #132]	; (821dc <V2Protocol_ProcessCommand+0x214>)
   82158:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   8215a:	4b1e      	ldr	r3, [pc, #120]	; (821d4 <V2Protocol_ProcessCommand+0x20c>)
   8215c:	8819      	ldrh	r1, [r3, #0]
   8215e:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   82160:	2200      	movs	r2, #0
   82162:	801a      	strh	r2, [r3, #0]
			return true;
   82164:	2001      	movs	r0, #1
   82166:	e772      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82168:	4a16      	ldr	r2, [pc, #88]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   8216a:	8853      	ldrh	r3, [r2, #2]
   8216c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   8216e:	88d2      	ldrh	r2, [r2, #6]
   82170:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82178:	dc21      	bgt.n	821be <V2Protocol_ProcessCommand+0x1f6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   8217a:	4912      	ldr	r1, [pc, #72]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   8217c:	4b20      	ldr	r3, [pc, #128]	; (82200 <V2Protocol_ProcessCommand+0x238>)
   8217e:	4403      	add	r3, r0
   82180:	608b      	str	r3, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82182:	818a      	strh	r2, [r1, #12]
			return true;
   82184:	2001      	movs	r0, #1
   82186:	e762      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82188:	4a0e      	ldr	r2, [pc, #56]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   8218a:	8853      	ldrh	r3, [r2, #2]
   8218c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   8218e:	88d2      	ldrh	r2, [r2, #6]
   82190:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82198:	dd01      	ble.n	8219e <V2Protocol_ProcessCommand+0x1d6>
				return false;
   8219a:	2000      	movs	r0, #0
   8219c:	e757      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8219e:	4b09      	ldr	r3, [pc, #36]	; (821c4 <V2Protocol_ProcessCommand+0x1fc>)
   821a0:	6899      	ldr	r1, [r3, #8]
   821a2:	4b17      	ldr	r3, [pc, #92]	; (82200 <V2Protocol_ProcessCommand+0x238>)
   821a4:	4418      	add	r0, r3
   821a6:	4b1d      	ldr	r3, [pc, #116]	; (8221c <V2Protocol_ProcessCommand+0x254>)
   821a8:	4798      	blx	r3
			return true;
   821aa:	2001      	movs	r0, #1
   821ac:	e74f      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   821ae:	4b0b      	ldr	r3, [pc, #44]	; (821dc <V2Protocol_ProcessCommand+0x214>)
   821b0:	22c9      	movs	r2, #201	; 0xc9
   821b2:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   821b4:	4b07      	ldr	r3, [pc, #28]	; (821d4 <V2Protocol_ProcessCommand+0x20c>)
   821b6:	2202      	movs	r2, #2
   821b8:	801a      	strh	r2, [r3, #0]
	return true;
   821ba:	2001      	movs	r0, #1
}
   821bc:	e747      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
				return false;
   821be:	2000      	movs	r0, #0
   821c0:	e745      	b.n	8204e <V2Protocol_ProcessCommand+0x86>
   821c2:	bf00      	nop
   821c4:	2000269c 	.word	0x2000269c
   821c8:	20001f4c 	.word	0x20001f4c
   821cc:	00082cd5 	.word	0x00082cd5
   821d0:	0008caf8 	.word	0x0008caf8
   821d4:	2000265a 	.word	0x2000265a
   821d8:	0008223d 	.word	0x0008223d
   821dc:	2000265c 	.word	0x2000265c
   821e0:	00082265 	.word	0x00082265
   821e4:	00082251 	.word	0x00082251
   821e8:	2000267c 	.word	0x2000267c
   821ec:	0008cb08 	.word	0x0008cb08
   821f0:	00085f49 	.word	0x00085f49
   821f4:	20002658 	.word	0x20002658
   821f8:	00080d61 	.word	0x00080d61
   821fc:	00080ea9 	.word	0x00080ea9
   82200:	20001e4c 	.word	0x20001e4c
   82204:	00080841 	.word	0x00080841
   82208:	00080ac1 	.word	0x00080ac1
   8220c:	00080f09 	.word	0x00080f09
   82210:	00080c0d 	.word	0x00080c0d
   82214:	00080cb9 	.word	0x00080cb9
   82218:	00080d29 	.word	0x00080d29
   8221c:	00085f71 	.word	0x00085f71

00082220 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
   82220:	4602      	mov	r2, r0
	ParameterItem_t* CurrTableItem = ParameterTable;
   82222:	4805      	ldr	r0, [pc, #20]	; (82238 <V2Params_GetParamFromTable+0x18>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82224:	f100 011e 	add.w	r1, r0, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   82228:	7803      	ldrb	r3, [r0, #0]
   8222a:	4293      	cmp	r3, r2
   8222c:	d003      	beq.n	82236 <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   8222e:	3003      	adds	r0, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82230:	4288      	cmp	r0, r1
   82232:	d1f9      	bne.n	82228 <V2Params_GetParamFromTable+0x8>
	}

	return NULL;
   82234:	2000      	movs	r0, #0
}
   82236:	4770      	bx	lr
   82238:	20000824 	.word	0x20000824

0008223c <V2Params_GetParameterPrivileges>:
{
   8223c:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   8223e:	4b03      	ldr	r3, [pc, #12]	; (8224c <V2Params_GetParameterPrivileges+0x10>)
   82240:	4798      	blx	r3
	if (ParamInfo == NULL)
   82242:	b108      	cbz	r0, 82248 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   82244:	7840      	ldrb	r0, [r0, #1]
}
   82246:	bd08      	pop	{r3, pc}
	  return 0;
   82248:	2000      	movs	r0, #0
   8224a:	e7fc      	b.n	82246 <V2Params_GetParameterPrivileges+0xa>
   8224c:	00082221 	.word	0x00082221

00082250 <V2Params_GetParameterValue>:
{
   82250:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82252:	4b03      	ldr	r3, [pc, #12]	; (82260 <V2Params_GetParameterValue+0x10>)
   82254:	4798      	blx	r3
	if (ParamInfo == NULL)
   82256:	b108      	cbz	r0, 8225c <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   82258:	7880      	ldrb	r0, [r0, #2]
}
   8225a:	bd08      	pop	{r3, pc}
	  return 0;
   8225c:	2000      	movs	r0, #0
   8225e:	e7fc      	b.n	8225a <V2Params_GetParameterValue+0xa>
   82260:	00082221 	.word	0x00082221

00082264 <V2Params_SetParameterValue>:
{
   82264:	b510      	push	{r4, lr}
   82266:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82268:	4b02      	ldr	r3, [pc, #8]	; (82274 <V2Params_SetParameterValue+0x10>)
   8226a:	4798      	blx	r3
	if (ParamInfo == NULL)
   8226c:	b100      	cbz	r0, 82270 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   8226e:	7084      	strb	r4, [r0, #2]
}
   82270:	bd10      	pop	{r4, pc}
   82272:	bf00      	nop
   82274:	00082221 	.word	0x00082221

00082278 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   82278:	b538      	push	{r3, r4, r5, lr}
   8227a:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8227c:	b2c0      	uxtb	r0, r0
   8227e:	4d05      	ldr	r5, [pc, #20]	; (82294 <XMEGANVM_SendAddress+0x1c>)
   82280:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   82282:	f3c4 2007 	ubfx	r0, r4, #8, #8
   82286:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   82288:	f3c4 4007 	ubfx	r0, r4, #16, #8
   8228c:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   8228e:	0e20      	lsrs	r0, r4, #24
   82290:	47a8      	blx	r5
}
   82292:	bd38      	pop	{r3, r4, r5, pc}
   82294:	00082b05 	.word	0x00082b05

00082298 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   82298:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   8229a:	4b03      	ldr	r3, [pc, #12]	; (822a8 <XMEGANVM_SendNVMRegAddress+0x10>)
   8229c:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   8229e:	4318      	orrs	r0, r3
   822a0:	4b02      	ldr	r3, [pc, #8]	; (822ac <XMEGANVM_SendNVMRegAddress+0x14>)
   822a2:	4798      	blx	r3
}
   822a4:	bd08      	pop	{r3, pc}
   822a6:	bf00      	nop
   822a8:	20000844 	.word	0x20000844
   822ac:	00082279 	.word	0x00082279

000822b0 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   822b0:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   822b2:	4e07      	ldr	r6, [pc, #28]	; (822d0 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   822b4:	4d07      	ldr	r5, [pc, #28]	; (822d4 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   822b6:	4c08      	ldr	r4, [pc, #32]	; (822d8 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   822b8:	2080      	movs	r0, #128	; 0x80
   822ba:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   822bc:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   822be:	6823      	ldr	r3, [r4, #0]
   822c0:	b123      	cbz	r3, 822cc <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   822c2:	f010 0f02 	tst.w	r0, #2
   822c6:	d0f7      	beq.n	822b8 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   822c8:	2001      	movs	r0, #1
   822ca:	e000      	b.n	822ce <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   822cc:	2000      	movs	r0, #0
		}
	}
}
   822ce:	bd70      	pop	{r4, r5, r6, pc}
   822d0:	00082b05 	.word	0x00082b05
   822d4:	00082b31 	.word	0x00082b31
   822d8:	20002684 	.word	0x20002684

000822dc <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   822dc:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   822de:	206b      	movs	r0, #107	; 0x6b
   822e0:	4b09      	ldr	r3, [pc, #36]	; (82308 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   822e2:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   822e4:	200f      	movs	r0, #15
   822e6:	4b09      	ldr	r3, [pc, #36]	; (8230c <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   822e8:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   822ea:	4e07      	ldr	r6, [pc, #28]	; (82308 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   822ec:	4d08      	ldr	r5, [pc, #32]	; (82310 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   822ee:	4c09      	ldr	r4, [pc, #36]	; (82314 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   822f0:	2020      	movs	r0, #32
   822f2:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   822f4:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   822f6:	6823      	ldr	r3, [r4, #0]
   822f8:	b123      	cbz	r3, 82304 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   822fa:	f010 0f80 	tst.w	r0, #128	; 0x80
   822fe:	d1f7      	bne.n	822f0 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   82300:	2001      	movs	r0, #1
   82302:	e000      	b.n	82306 <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   82304:	2000      	movs	r0, #0
		}
	}
}
   82306:	bd70      	pop	{r4, r5, r6, pc}
   82308:	00082b05 	.word	0x00082b05
   8230c:	00082299 	.word	0x00082299
   82310:	00082b31 	.word	0x00082b31
   82314:	20002684 	.word	0x20002684

00082318 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   82318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8231c:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   8231e:	4b1a      	ldr	r3, [pc, #104]	; (82388 <XMEGANVM_EnablePDI+0x70>)
   82320:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   82322:	20c1      	movs	r0, #193	; 0xc1
   82324:	4c19      	ldr	r4, [pc, #100]	; (8238c <XMEGANVM_EnablePDI+0x74>)
   82326:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   82328:	2059      	movs	r0, #89	; 0x59
   8232a:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   8232c:	20c2      	movs	r0, #194	; 0xc2
   8232e:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   82330:	2002      	movs	r0, #2
   82332:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   82334:	20e0      	movs	r0, #224	; 0xe0
   82336:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   82338:	f10d 0407 	add.w	r4, sp, #7
   8233c:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   8233e:	f04f 0812 	mov.w	r8, #18
   82342:	2789      	movs	r7, #137	; 0x89
   82344:	4e11      	ldr	r6, [pc, #68]	; (8238c <XMEGANVM_EnablePDI+0x74>)
   82346:	f88d 8000 	strb.w	r8, [sp]
   8234a:	f88d 7001 	strb.w	r7, [sp, #1]
   8234e:	23ab      	movs	r3, #171	; 0xab
   82350:	f88d 3002 	strb.w	r3, [sp, #2]
   82354:	2345      	movs	r3, #69	; 0x45
   82356:	f88d 3003 	strb.w	r3, [sp, #3]
   8235a:	23cd      	movs	r3, #205	; 0xcd
   8235c:	f88d 3004 	strb.w	r3, [sp, #4]
   82360:	23d8      	movs	r3, #216	; 0xd8
   82362:	f88d 3005 	strb.w	r3, [sp, #5]
   82366:	2388      	movs	r3, #136	; 0x88
   82368:	f88d 3006 	strb.w	r3, [sp, #6]
   8236c:	23ff      	movs	r3, #255	; 0xff
   8236e:	f88d 3007 	strb.w	r3, [sp, #7]
   82372:	7820      	ldrb	r0, [r4, #0]
   82374:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   82376:	454c      	cmp	r4, r9
   82378:	f104 34ff 	add.w	r4, r4, #4294967295
   8237c:	d1e3      	bne.n	82346 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   8237e:	4b04      	ldr	r3, [pc, #16]	; (82390 <XMEGANVM_EnablePDI+0x78>)
   82380:	4798      	blx	r3
}
   82382:	b003      	add	sp, #12
   82384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82388:	00082bd1 	.word	0x00082bd1
   8238c:	00082b05 	.word	0x00082b05
   82390:	000822b1 	.word	0x000822b1

00082394 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   82394:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   82396:	4b09      	ldr	r3, [pc, #36]	; (823bc <XMEGANVM_DisablePDI+0x28>)
   82398:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8239a:	4c09      	ldr	r4, [pc, #36]	; (823c0 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   8239c:	4d09      	ldr	r5, [pc, #36]	; (823c4 <XMEGANVM_DisablePDI+0x30>)
   8239e:	4e0a      	ldr	r6, [pc, #40]	; (823c8 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   823a0:	20c1      	movs	r0, #193	; 0xc1
   823a2:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   823a4:	2000      	movs	r0, #0
   823a6:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   823a8:	2081      	movs	r0, #129	; 0x81
   823aa:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   823ac:	47a8      	blx	r5
   823ae:	b110      	cbz	r0, 823b6 <XMEGANVM_DisablePDI+0x22>
   823b0:	6833      	ldr	r3, [r6, #0]
   823b2:	2b00      	cmp	r3, #0
   823b4:	d1f4      	bne.n	823a0 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   823b6:	4b05      	ldr	r3, [pc, #20]	; (823cc <XMEGANVM_DisablePDI+0x38>)
   823b8:	4798      	blx	r3
}
   823ba:	bd70      	pop	{r4, r5, r6, pc}
   823bc:	000822b1 	.word	0x000822b1
   823c0:	00082b05 	.word	0x00082b05
   823c4:	00082b31 	.word	0x00082b31
   823c8:	20002684 	.word	0x20002684
   823cc:	00082aa9 	.word	0x00082aa9

000823d0 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   823d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   823d2:	4606      	mov	r6, r0
   823d4:	460c      	mov	r4, r1
   823d6:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   823d8:	4b1c      	ldr	r3, [pc, #112]	; (8244c <XMEGANVM_ReadMemory+0x7c>)
   823da:	4798      	blx	r3
   823dc:	4603      	mov	r3, r0
   823de:	b908      	cbnz	r0, 823e4 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   823e0:	4618      	mov	r0, r3
   823e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   823e4:	204c      	movs	r0, #76	; 0x4c
   823e6:	4f1a      	ldr	r7, [pc, #104]	; (82450 <XMEGANVM_ReadMemory+0x80>)
   823e8:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   823ea:	200a      	movs	r0, #10
   823ec:	4b19      	ldr	r3, [pc, #100]	; (82454 <XMEGANVM_ReadMemory+0x84>)
   823ee:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   823f0:	2043      	movs	r0, #67	; 0x43
   823f2:	47b8      	blx	r7
	if (ReadSize > 1)
   823f4:	2d01      	cmp	r5, #1
   823f6:	d919      	bls.n	8242c <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   823f8:	206b      	movs	r0, #107	; 0x6b
   823fa:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   823fc:	4630      	mov	r0, r6
   823fe:	4b16      	ldr	r3, [pc, #88]	; (82458 <XMEGANVM_ReadMemory+0x88>)
   82400:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82402:	20a0      	movs	r0, #160	; 0xa0
   82404:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   82406:	1e68      	subs	r0, r5, #1
   82408:	b2c0      	uxtb	r0, r0
   8240a:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8240c:	2024      	movs	r0, #36	; 0x24
   8240e:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   82410:	3d01      	subs	r5, #1
   82412:	b2ad      	uxth	r5, r5
   82414:	3501      	adds	r5, #1
   82416:	4425      	add	r5, r4
   82418:	4e10      	ldr	r6, [pc, #64]	; (8245c <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8241a:	4f11      	ldr	r7, [pc, #68]	; (82460 <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   8241c:	6833      	ldr	r3, [r6, #0]
   8241e:	b173      	cbz	r3, 8243e <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   82420:	47b8      	blx	r7
   82422:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   82426:	42ac      	cmp	r4, r5
   82428:	d1f8      	bne.n	8241c <XMEGANVM_ReadMemory+0x4c>
   8242a:	e008      	b.n	8243e <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8242c:	200c      	movs	r0, #12
   8242e:	4b08      	ldr	r3, [pc, #32]	; (82450 <XMEGANVM_ReadMemory+0x80>)
   82430:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   82432:	4630      	mov	r0, r6
   82434:	4b08      	ldr	r3, [pc, #32]	; (82458 <XMEGANVM_ReadMemory+0x88>)
   82436:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   82438:	4b09      	ldr	r3, [pc, #36]	; (82460 <XMEGANVM_ReadMemory+0x90>)
   8243a:	4798      	blx	r3
   8243c:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   8243e:	4b07      	ldr	r3, [pc, #28]	; (8245c <XMEGANVM_ReadMemory+0x8c>)
   82440:	681b      	ldr	r3, [r3, #0]
   82442:	3b00      	subs	r3, #0
   82444:	bf18      	it	ne
   82446:	2301      	movne	r3, #1
   82448:	e7ca      	b.n	823e0 <XMEGANVM_ReadMemory+0x10>
   8244a:	bf00      	nop
   8244c:	000822dd 	.word	0x000822dd
   82450:	00082b05 	.word	0x00082b05
   82454:	00082299 	.word	0x00082299
   82458:	00082279 	.word	0x00082279
   8245c:	20002684 	.word	0x20002684
   82460:	00082b31 	.word	0x00082b31

00082464 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   82464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82468:	4607      	mov	r7, r0
   8246a:	4688      	mov	r8, r1
   8246c:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8246e:	4b0b      	ldr	r3, [pc, #44]	; (8249c <XMEGANVM_WriteByteMemory+0x38>)
   82470:	4798      	blx	r3
   82472:	4605      	mov	r5, r0
   82474:	b910      	cbnz	r0, 8247c <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   82476:	4628      	mov	r0, r5
   82478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8247c:	204c      	movs	r0, #76	; 0x4c
   8247e:	4c08      	ldr	r4, [pc, #32]	; (824a0 <XMEGANVM_WriteByteMemory+0x3c>)
   82480:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82482:	200a      	movs	r0, #10
   82484:	4b07      	ldr	r3, [pc, #28]	; (824a4 <XMEGANVM_WriteByteMemory+0x40>)
   82486:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   82488:	4638      	mov	r0, r7
   8248a:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8248c:	204c      	movs	r0, #76	; 0x4c
   8248e:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   82490:	4640      	mov	r0, r8
   82492:	4b05      	ldr	r3, [pc, #20]	; (824a8 <XMEGANVM_WriteByteMemory+0x44>)
   82494:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   82496:	4630      	mov	r0, r6
   82498:	47a0      	blx	r4
	return true;
   8249a:	e7ec      	b.n	82476 <XMEGANVM_WriteByteMemory+0x12>
   8249c:	000822dd 	.word	0x000822dd
   824a0:	00082b05 	.word	0x00082b05
   824a4:	00082299 	.word	0x00082299
   824a8:	00082279 	.word	0x00082279

000824ac <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   824ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824b0:	4681      	mov	r9, r0
   824b2:	4617      	mov	r7, r2
   824b4:	461c      	mov	r4, r3
   824b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   824b8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   824bc:	f013 0f01 	tst.w	r3, #1
   824c0:	d108      	bne.n	824d4 <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   824c2:	b9f6      	cbnz	r6, 82502 <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   824c4:	f014 0f02 	tst.w	r4, #2
   824c8:	d13f      	bne.n	8254a <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   824ca:	f04f 0a01 	mov.w	sl, #1
}
   824ce:	4650      	mov	r0, sl
   824d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824d4:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   824d6:	4b27      	ldr	r3, [pc, #156]	; (82574 <XMEGANVM_WritePageMemory+0xc8>)
   824d8:	4798      	blx	r3
   824da:	4682      	mov	sl, r0
   824dc:	2800      	cmp	r0, #0
   824de:	d0f6      	beq.n	824ce <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   824e0:	204c      	movs	r0, #76	; 0x4c
   824e2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 82580 <XMEGANVM_WritePageMemory+0xd4>
   824e6:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   824e8:	200a      	movs	r0, #10
   824ea:	f8df b08c 	ldr.w	fp, [pc, #140]	; 82578 <XMEGANVM_WritePageMemory+0xcc>
   824ee:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   824f0:	4640      	mov	r0, r8
   824f2:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   824f4:	204c      	movs	r0, #76	; 0x4c
   824f6:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   824f8:	200b      	movs	r0, #11
   824fa:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   824fc:	2001      	movs	r0, #1
   824fe:	47d0      	blx	sl
   82500:	e7df      	b.n	824c2 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82502:	4b1c      	ldr	r3, [pc, #112]	; (82574 <XMEGANVM_WritePageMemory+0xc8>)
   82504:	4798      	blx	r3
   82506:	4682      	mov	sl, r0
   82508:	2800      	cmp	r0, #0
   8250a:	d0e0      	beq.n	824ce <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8250c:	204c      	movs	r0, #76	; 0x4c
   8250e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 82580 <XMEGANVM_WritePageMemory+0xd4>
   82512:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82514:	200a      	movs	r0, #10
   82516:	4b18      	ldr	r3, [pc, #96]	; (82578 <XMEGANVM_WritePageMemory+0xcc>)
   82518:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   8251a:	4648      	mov	r0, r9
   8251c:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8251e:	206b      	movs	r0, #107	; 0x6b
   82520:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   82522:	980a      	ldr	r0, [sp, #40]	; 0x28
   82524:	4b15      	ldr	r3, [pc, #84]	; (8257c <XMEGANVM_WritePageMemory+0xd0>)
   82526:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82528:	20a0      	movs	r0, #160	; 0xa0
   8252a:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   8252c:	1e70      	subs	r0, r6, #1
   8252e:	b2c0      	uxtb	r0, r0
   82530:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   82532:	2064      	movs	r0, #100	; 0x64
   82534:	47c0      	blx	r8
		while (WriteSize--)
   82536:	3e01      	subs	r6, #1
   82538:	b2b6      	uxth	r6, r6
   8253a:	3601      	adds	r6, #1
   8253c:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   8253e:	f815 0b01 	ldrb.w	r0, [r5], #1
   82542:	47c0      	blx	r8
		while (WriteSize--)
   82544:	42b5      	cmp	r5, r6
   82546:	d1fa      	bne.n	8253e <XMEGANVM_WritePageMemory+0x92>
   82548:	e7bc      	b.n	824c4 <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8254a:	4b0a      	ldr	r3, [pc, #40]	; (82574 <XMEGANVM_WritePageMemory+0xc8>)
   8254c:	4798      	blx	r3
   8254e:	4682      	mov	sl, r0
   82550:	2800      	cmp	r0, #0
   82552:	d0bc      	beq.n	824ce <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82554:	204c      	movs	r0, #76	; 0x4c
   82556:	4c0a      	ldr	r4, [pc, #40]	; (82580 <XMEGANVM_WritePageMemory+0xd4>)
   82558:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8255a:	200a      	movs	r0, #10
   8255c:	4b06      	ldr	r3, [pc, #24]	; (82578 <XMEGANVM_WritePageMemory+0xcc>)
   8255e:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   82560:	4638      	mov	r0, r7
   82562:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82564:	204c      	movs	r0, #76	; 0x4c
   82566:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   82568:	980a      	ldr	r0, [sp, #40]	; 0x28
   8256a:	4b04      	ldr	r3, [pc, #16]	; (8257c <XMEGANVM_WritePageMemory+0xd0>)
   8256c:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   8256e:	2000      	movs	r0, #0
   82570:	47a0      	blx	r4
   82572:	e7ac      	b.n	824ce <XMEGANVM_WritePageMemory+0x22>
   82574:	000822dd 	.word	0x000822dd
   82578:	00082299 	.word	0x00082299
   8257c:	00082279 	.word	0x00082279
   82580:	00082b05 	.word	0x00082b05

00082584 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   82584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82586:	4604      	mov	r4, r0
   82588:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8258a:	4b36      	ldr	r3, [pc, #216]	; (82664 <XMEGANVM_EraseMemory+0xe0>)
   8258c:	4798      	blx	r3
   8258e:	4603      	mov	r3, r0
   82590:	b1a8      	cbz	r0, 825be <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   82592:	2c40      	cmp	r4, #64	; 0x40
   82594:	d015      	beq.n	825c2 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   82596:	2c30      	cmp	r4, #48	; 0x30
   82598:	d022      	beq.n	825e0 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8259a:	204c      	movs	r0, #76	; 0x4c
   8259c:	4e32      	ldr	r6, [pc, #200]	; (82668 <XMEGANVM_EraseMemory+0xe4>)
   8259e:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   825a0:	200a      	movs	r0, #10
   825a2:	4b32      	ldr	r3, [pc, #200]	; (8266c <XMEGANVM_EraseMemory+0xe8>)
   825a4:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   825a6:	4620      	mov	r0, r4
   825a8:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825aa:	204c      	movs	r0, #76	; 0x4c
   825ac:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   825ae:	4628      	mov	r0, r5
   825b0:	4b2f      	ldr	r3, [pc, #188]	; (82670 <XMEGANVM_EraseMemory+0xec>)
   825b2:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   825b4:	2000      	movs	r0, #0
   825b6:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   825b8:	4b2e      	ldr	r3, [pc, #184]	; (82674 <XMEGANVM_EraseMemory+0xf0>)
   825ba:	4798      	blx	r3
   825bc:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   825be:	4618      	mov	r0, r3
   825c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825c2:	204c      	movs	r0, #76	; 0x4c
   825c4:	4c28      	ldr	r4, [pc, #160]	; (82668 <XMEGANVM_EraseMemory+0xe4>)
   825c6:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   825c8:	200a      	movs	r0, #10
   825ca:	4d28      	ldr	r5, [pc, #160]	; (8266c <XMEGANVM_EraseMemory+0xe8>)
   825cc:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   825ce:	2040      	movs	r0, #64	; 0x40
   825d0:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825d2:	204c      	movs	r0, #76	; 0x4c
   825d4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   825d6:	200b      	movs	r0, #11
   825d8:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   825da:	2001      	movs	r0, #1
   825dc:	47a0      	blx	r4
   825de:	e7eb      	b.n	825b8 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825e0:	204c      	movs	r0, #76	; 0x4c
   825e2:	4c21      	ldr	r4, [pc, #132]	; (82668 <XMEGANVM_EraseMemory+0xe4>)
   825e4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   825e6:	200a      	movs	r0, #10
   825e8:	4e20      	ldr	r6, [pc, #128]	; (8266c <XMEGANVM_EraseMemory+0xe8>)
   825ea:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   825ec:	2036      	movs	r0, #54	; 0x36
   825ee:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825f0:	204c      	movs	r0, #76	; 0x4c
   825f2:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   825f4:	200b      	movs	r0, #11
   825f6:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   825f8:	2001      	movs	r0, #1
   825fa:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   825fc:	4b19      	ldr	r3, [pc, #100]	; (82664 <XMEGANVM_EraseMemory+0xe0>)
   825fe:	4798      	blx	r3
   82600:	4603      	mov	r3, r0
   82602:	2800      	cmp	r0, #0
   82604:	d0db      	beq.n	825be <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82606:	204c      	movs	r0, #76	; 0x4c
   82608:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8260a:	200a      	movs	r0, #10
   8260c:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   8260e:	2033      	movs	r0, #51	; 0x33
   82610:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82612:	206b      	movs	r0, #107	; 0x6b
   82614:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   82616:	4628      	mov	r0, r5
   82618:	4b15      	ldr	r3, [pc, #84]	; (82670 <XMEGANVM_EraseMemory+0xec>)
   8261a:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   8261c:	20a0      	movs	r0, #160	; 0xa0
   8261e:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   82620:	4d15      	ldr	r5, [pc, #84]	; (82678 <XMEGANVM_EraseMemory+0xf4>)
   82622:	7828      	ldrb	r0, [r5, #0]
   82624:	3801      	subs	r0, #1
   82626:	b2c0      	uxtb	r0, r0
   82628:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8262a:	2064      	movs	r0, #100	; 0x64
   8262c:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   8262e:	882b      	ldrh	r3, [r5, #0]
   82630:	b14b      	cbz	r3, 82646 <XMEGANVM_EraseMemory+0xc2>
   82632:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   82634:	4627      	mov	r7, r4
   82636:	4e0c      	ldr	r6, [pc, #48]	; (82668 <XMEGANVM_EraseMemory+0xe4>)
   82638:	4638      	mov	r0, r7
   8263a:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   8263c:	1c63      	adds	r3, r4, #1
   8263e:	b2dc      	uxtb	r4, r3
   82640:	882a      	ldrh	r2, [r5, #0]
   82642:	42a2      	cmp	r2, r4
   82644:	d8f8      	bhi.n	82638 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82646:	204c      	movs	r0, #76	; 0x4c
   82648:	4c07      	ldr	r4, [pc, #28]	; (82668 <XMEGANVM_EraseMemory+0xe4>)
   8264a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8264c:	200a      	movs	r0, #10
   8264e:	4d07      	ldr	r5, [pc, #28]	; (8266c <XMEGANVM_EraseMemory+0xe8>)
   82650:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   82652:	2030      	movs	r0, #48	; 0x30
   82654:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82656:	204c      	movs	r0, #76	; 0x4c
   82658:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   8265a:	200b      	movs	r0, #11
   8265c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8265e:	2001      	movs	r0, #1
   82660:	47a0      	blx	r4
   82662:	e7a9      	b.n	825b8 <XMEGANVM_EraseMemory+0x34>
   82664:	000822dd 	.word	0x000822dd
   82668:	00082b05 	.word	0x00082b05
   8266c:	00082299 	.word	0x00082299
   82670:	00082279 	.word	0x00082279
   82674:	000822b1 	.word	0x000822b1
   82678:	20000842 	.word	0x20000842

0008267c <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   8267c:	b570      	push	{r4, r5, r6, lr}
   8267e:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   82680:	4b8f      	ldr	r3, [pc, #572]	; (828c0 <XPROGProtocol_Command+0x244>)
   82682:	8859      	ldrh	r1, [r3, #2]
   82684:	b2cb      	uxtb	r3, r1
   82686:	4a8f      	ldr	r2, [pc, #572]	; (828c4 <XPROGProtocol_Command+0x248>)
   82688:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   8268a:	3b01      	subs	r3, #1
   8268c:	2b21      	cmp	r3, #33	; 0x21
   8268e:	d82b      	bhi.n	826e8 <XPROGProtocol_Command+0x6c>
   82690:	e8df f013 	tbh	[pc, r3, lsl #1]
   82694:	002f0022 	.word	0x002f0022
   82698:	00730037 	.word	0x00730037
   8269c:	00e600c2 	.word	0x00e600c2
   826a0:	002a00e9 	.word	0x002a00e9
   826a4:	002a002a 	.word	0x002a002a
   826a8:	002a002a 	.word	0x002a002a
   826ac:	002a002a 	.word	0x002a002a
   826b0:	002a002a 	.word	0x002a002a
   826b4:	002a002a 	.word	0x002a002a
   826b8:	002a002a 	.word	0x002a002a
   826bc:	002a002a 	.word	0x002a002a
   826c0:	002a002a 	.word	0x002a002a
   826c4:	002a002a 	.word	0x002a002a
   826c8:	002a002a 	.word	0x002a002a
   826cc:	002a002a 	.word	0x002a002a
   826d0:	017c002a 	.word	0x017c002a
   826d4:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   826d8:	4b7b      	ldr	r3, [pc, #492]	; (828c8 <XPROGProtocol_Command+0x24c>)
   826da:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   826dc:	4b7b      	ldr	r3, [pc, #492]	; (828cc <XPROGProtocol_Command+0x250>)
   826de:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   826e0:	f080 0001 	eor.w	r0, r0, #1
   826e4:	4b7a      	ldr	r3, [pc, #488]	; (828d0 <XPROGProtocol_Command+0x254>)
   826e6:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   826e8:	4b7a      	ldr	r3, [pc, #488]	; (828d4 <XPROGProtocol_Command+0x258>)
   826ea:	4798      	blx	r3
	return false;
   826ec:	2000      	movs	r0, #0
}
   826ee:	b004      	add	sp, #16
   826f0:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   826f2:	4b75      	ldr	r3, [pc, #468]	; (828c8 <XPROGProtocol_Command+0x24c>)
   826f4:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   826f6:	4b78      	ldr	r3, [pc, #480]	; (828d8 <XPROGProtocol_Command+0x25c>)
   826f8:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   826fa:	4b75      	ldr	r3, [pc, #468]	; (828d0 <XPROGProtocol_Command+0x254>)
   826fc:	2200      	movs	r2, #0
   826fe:	701a      	strb	r2, [r3, #0]
}
   82700:	e7f2      	b.n	826e8 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   82702:	4b71      	ldr	r3, [pc, #452]	; (828c8 <XPROGProtocol_Command+0x24c>)
   82704:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   82706:	4b72      	ldr	r3, [pc, #456]	; (828d0 <XPROGProtocol_Command+0x254>)
   82708:	2200      	movs	r2, #0
   8270a:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   8270c:	4b6c      	ldr	r3, [pc, #432]	; (828c0 <XPROGProtocol_Command+0x244>)
   8270e:	899b      	ldrh	r3, [r3, #12]
   82710:	2b04      	cmp	r3, #4
   82712:	d915      	bls.n	82740 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   82714:	4b6a      	ldr	r3, [pc, #424]	; (828c0 <XPROGProtocol_Command+0x244>)
   82716:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82718:	791a      	ldrb	r2, [r3, #4]
   8271a:	78d9      	ldrb	r1, [r3, #3]
   8271c:	0409      	lsls	r1, r1, #16
   8271e:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82722:	785a      	ldrb	r2, [r3, #1]
   82724:	4311      	orrs	r1, r2
   82726:	789a      	ldrb	r2, [r3, #2]
   82728:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   8272c:	781b      	ldrb	r3, [r3, #0]
   8272e:	3b01      	subs	r3, #1
   82730:	2b07      	cmp	r3, #7
   82732:	d81e      	bhi.n	82772 <XPROGProtocol_Command+0xf6>
   82734:	e8df f003 	tbb	[pc, r3]
   82738:	1311081f 	.word	0x1311081f
   8273c:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   82740:	4b63      	ldr	r3, [pc, #396]	; (828d0 <XPROGProtocol_Command+0x254>)
   82742:	2201      	movs	r2, #1
   82744:	701a      	strb	r2, [r3, #0]
		return;
   82746:	e7cf      	b.n	826e8 <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82748:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   8274a:	4b64      	ldr	r3, [pc, #400]	; (828dc <XPROGProtocol_Command+0x260>)
   8274c:	4798      	blx	r3
   8274e:	2800      	cmp	r0, #0
   82750:	d1ca      	bne.n	826e8 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   82752:	4b5f      	ldr	r3, [pc, #380]	; (828d0 <XPROGProtocol_Command+0x254>)
   82754:	2203      	movs	r2, #3
   82756:	701a      	strb	r2, [r3, #0]
   82758:	e7c6      	b.n	826e8 <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   8275a:	2068      	movs	r0, #104	; 0x68
		break;
   8275c:	e7f5      	b.n	8274a <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   8275e:	2030      	movs	r0, #48	; 0x30
		break;
   82760:	e7f3      	b.n	8274a <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   82762:	2022      	movs	r0, #34	; 0x22
		break;
   82764:	e7f1      	b.n	8274a <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   82766:	202a      	movs	r0, #42	; 0x2a
		break;
   82768:	e7ef      	b.n	8274a <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   8276a:	2032      	movs	r0, #50	; 0x32
		break;
   8276c:	e7ed      	b.n	8274a <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   8276e:	2018      	movs	r0, #24
		break;
   82770:	e7eb      	b.n	8274a <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   82772:	2000      	movs	r0, #0
		break;
   82774:	e7e9      	b.n	8274a <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   82776:	2040      	movs	r0, #64	; 0x40
   82778:	e7e7      	b.n	8274a <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   8277a:	4b53      	ldr	r3, [pc, #332]	; (828c8 <XPROGProtocol_Command+0x24c>)
   8277c:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   8277e:	4b54      	ldr	r3, [pc, #336]	; (828d0 <XPROGProtocol_Command+0x254>)
   82780:	2200      	movs	r2, #0
   82782:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   82784:	4b4e      	ldr	r3, [pc, #312]	; (828c0 <XPROGProtocol_Command+0x244>)
   82786:	88db      	ldrh	r3, [r3, #6]
   82788:	2b07      	cmp	r3, #7
   8278a:	d802      	bhi.n	82792 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   8278c:	4b50      	ldr	r3, [pc, #320]	; (828d0 <XPROGProtocol_Command+0x254>)
   8278e:	2201      	movs	r2, #1
   82790:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   82792:	4b4b      	ldr	r3, [pc, #300]	; (828c0 <XPROGProtocol_Command+0x244>)
   82794:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82796:	795a      	ldrb	r2, [r3, #5]
   82798:	7919      	ldrb	r1, [r3, #4]
   8279a:	0409      	lsls	r1, r1, #16
   8279c:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   827a0:	789a      	ldrb	r2, [r3, #2]
   827a2:	4311      	orrs	r1, r2
   827a4:	78da      	ldrb	r2, [r3, #3]
   827a6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   827aa:	781a      	ldrb	r2, [r3, #0]
   827ac:	3a01      	subs	r2, #1
   827ae:	2a05      	cmp	r2, #5
   827b0:	d82e      	bhi.n	82810 <XPROGProtocol_Command+0x194>
   827b2:	e8df f012 	tbh	[pc, r2, lsl #1]
   827b6:	00fd      	.short	0x00fd
   827b8:	0101000e 	.word	0x0101000e
   827bc:	00060105 	.word	0x00060105
   827c0:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   827c2:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   827c4:	4b46      	ldr	r3, [pc, #280]	; (828e0 <XPROGProtocol_Command+0x264>)
   827c6:	781a      	ldrb	r2, [r3, #0]
   827c8:	4b46      	ldr	r3, [pc, #280]	; (828e4 <XPROGProtocol_Command+0x268>)
   827ca:	4798      	blx	r3
   827cc:	2800      	cmp	r0, #0
   827ce:	d18b      	bne.n	826e8 <XPROGProtocol_Command+0x6c>
   827d0:	e016      	b.n	82800 <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   827d2:	2526      	movs	r5, #38	; 0x26
   827d4:	2023      	movs	r0, #35	; 0x23
   827d6:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   827d8:	79de      	ldrb	r6, [r3, #7]
   827da:	799c      	ldrb	r4, [r3, #6]
   827dc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   827e0:	785b      	ldrb	r3, [r3, #1]
   827e2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   827e6:	bf28      	it	cs
   827e8:	f44f 7480 	movcs.w	r4, #256	; 0x100
   827ec:	9402      	str	r4, [sp, #8]
   827ee:	4c3c      	ldr	r4, [pc, #240]	; (828e0 <XPROGProtocol_Command+0x264>)
   827f0:	9401      	str	r4, [sp, #4]
   827f2:	9100      	str	r1, [sp, #0]
   827f4:	4629      	mov	r1, r5
   827f6:	4c3c      	ldr	r4, [pc, #240]	; (828e8 <XPROGProtocol_Command+0x26c>)
   827f8:	47a0      	blx	r4
   827fa:	2800      	cmp	r0, #0
   827fc:	f47f af74 	bne.w	826e8 <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   82800:	4b33      	ldr	r3, [pc, #204]	; (828d0 <XPROGProtocol_Command+0x254>)
   82802:	2203      	movs	r2, #3
   82804:	701a      	strb	r2, [r3, #0]
   82806:	e76f      	b.n	826e8 <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82808:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8280a:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   8280c:	221a      	movs	r2, #26
		break;
   8280e:	e7e3      	b.n	827d8 <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82810:	222e      	movs	r2, #46	; 0x2e
   82812:	2526      	movs	r5, #38	; 0x26
   82814:	2023      	movs	r0, #35	; 0x23
   82816:	e7df      	b.n	827d8 <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   82818:	4b2b      	ldr	r3, [pc, #172]	; (828c8 <XPROGProtocol_Command+0x24c>)
   8281a:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   8281c:	4b2c      	ldr	r3, [pc, #176]	; (828d0 <XPROGProtocol_Command+0x254>)
   8281e:	2200      	movs	r2, #0
   82820:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82822:	4b27      	ldr	r3, [pc, #156]	; (828c0 <XPROGProtocol_Command+0x244>)
   82824:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   82826:	798b      	ldrb	r3, [r1, #6]
   82828:	794a      	ldrb	r2, [r1, #5]
   8282a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8282e:	7908      	ldrb	r0, [r1, #4]
   82830:	78cb      	ldrb	r3, [r1, #3]
   82832:	041b      	lsls	r3, r3, #16
   82834:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   82838:	7848      	ldrb	r0, [r1, #1]
   8283a:	4303      	orrs	r3, r0
   8283c:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   8283e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   82842:	bf28      	it	cs
   82844:	f44f 7280 	movcs.w	r2, #256	; 0x100
   82848:	4925      	ldr	r1, [pc, #148]	; (828e0 <XPROGProtocol_Command+0x264>)
   8284a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   8284e:	4b27      	ldr	r3, [pc, #156]	; (828ec <XPROGProtocol_Command+0x270>)
   82850:	4798      	blx	r3
   82852:	2800      	cmp	r0, #0
   82854:	f47f af48 	bne.w	826e8 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   82858:	4b1d      	ldr	r3, [pc, #116]	; (828d0 <XPROGProtocol_Command+0x254>)
   8285a:	2203      	movs	r2, #3
   8285c:	701a      	strb	r2, [r3, #0]
   8285e:	e743      	b.n	826e8 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   82860:	4b19      	ldr	r3, [pc, #100]	; (828c8 <XPROGProtocol_Command+0x24c>)
   82862:	4798      	blx	r3
			break;
   82864:	e740      	b.n	826e8 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   82866:	4b18      	ldr	r3, [pc, #96]	; (828c8 <XPROGProtocol_Command+0x24c>)
   82868:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   8286a:	4b19      	ldr	r3, [pc, #100]	; (828d0 <XPROGProtocol_Command+0x254>)
   8286c:	2200      	movs	r2, #0
   8286e:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   82870:	4b13      	ldr	r3, [pc, #76]	; (828c0 <XPROGProtocol_Command+0x244>)
   82872:	8999      	ldrh	r1, [r3, #12]
   82874:	2901      	cmp	r1, #1
   82876:	d90b      	bls.n	82890 <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   82878:	4b11      	ldr	r3, [pc, #68]	; (828c0 <XPROGProtocol_Command+0x244>)
   8287a:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   8287c:	7813      	ldrb	r3, [r2, #0]
   8287e:	3b01      	subs	r3, #1
   82880:	2b07      	cmp	r3, #7
   82882:	d85f      	bhi.n	82944 <XPROGProtocol_Command+0x2c8>
   82884:	e8df f003 	tbb	[pc, r3]
   82888:	47433608 	.word	0x47433608
   8288c:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   82890:	4b0f      	ldr	r3, [pc, #60]	; (828d0 <XPROGProtocol_Command+0x254>)
   82892:	2201      	movs	r2, #1
   82894:	701a      	strb	r2, [r3, #0]
		return;
   82896:	e727      	b.n	826e8 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   82898:	2904      	cmp	r1, #4
   8289a:	d90c      	bls.n	828b6 <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8289c:	7911      	ldrb	r1, [r2, #4]
   8289e:	78d3      	ldrb	r3, [r2, #3]
   828a0:	041b      	lsls	r3, r3, #16
   828a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   828a6:	7851      	ldrb	r1, [r2, #1]
   828a8:	430b      	orrs	r3, r1
   828aa:	7892      	ldrb	r2, [r2, #2]
   828ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   828b0:	4a0f      	ldr	r2, [pc, #60]	; (828f0 <XPROGProtocol_Command+0x274>)
   828b2:	6013      	str	r3, [r2, #0]
			break;
   828b4:	e718      	b.n	826e8 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   828b6:	4b06      	ldr	r3, [pc, #24]	; (828d0 <XPROGProtocol_Command+0x254>)
   828b8:	2201      	movs	r2, #1
   828ba:	701a      	strb	r2, [r3, #0]
				return;
   828bc:	e714      	b.n	826e8 <XPROGProtocol_Command+0x6c>
   828be:	bf00      	nop
   828c0:	2000269c 	.word	0x2000269c
   828c4:	20001f6c 	.word	0x20001f6c
   828c8:	00082cd5 	.word	0x00082cd5
   828cc:	00082319 	.word	0x00082319
   828d0:	20002680 	.word	0x20002680
   828d4:	00082d1d 	.word	0x00082d1d
   828d8:	00082395 	.word	0x00082395
   828dc:	00082585 	.word	0x00082585
   828e0:	20001f70 	.word	0x20001f70
   828e4:	00082465 	.word	0x00082465
   828e8:	000824ad 	.word	0x000824ad
   828ec:	000823d1 	.word	0x000823d1
   828f0:	20000844 	.word	0x20000844
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   828f4:	2902      	cmp	r1, #2
   828f6:	d906      	bls.n	82906 <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   828f8:	7891      	ldrb	r1, [r2, #2]
   828fa:	7853      	ldrb	r3, [r2, #1]
   828fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   82900:	4a30      	ldr	r2, [pc, #192]	; (829c4 <XPROGProtocol_Command+0x348>)
   82902:	8013      	strh	r3, [r2, #0]
			break;
   82904:	e6f0      	b.n	826e8 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   82906:	4b30      	ldr	r3, [pc, #192]	; (829c8 <XPROGProtocol_Command+0x34c>)
   82908:	2201      	movs	r2, #1
   8290a:	701a      	strb	r2, [r3, #0]
				return;
   8290c:	e6ec      	b.n	826e8 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   8290e:	7852      	ldrb	r2, [r2, #1]
   82910:	4b2e      	ldr	r3, [pc, #184]	; (829cc <XPROGProtocol_Command+0x350>)
   82912:	701a      	strb	r2, [r3, #0]
			break;
   82914:	e6e8      	b.n	826e8 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   82916:	7852      	ldrb	r2, [r2, #1]
   82918:	4b2d      	ldr	r3, [pc, #180]	; (829d0 <XPROGProtocol_Command+0x354>)
   8291a:	701a      	strb	r2, [r3, #0]
			break;
   8291c:	e6e4      	b.n	826e8 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   8291e:	2904      	cmp	r1, #4
   82920:	d803      	bhi.n	8292a <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   82922:	4b29      	ldr	r3, [pc, #164]	; (829c8 <XPROGProtocol_Command+0x34c>)
   82924:	2201      	movs	r2, #1
   82926:	701a      	strb	r2, [r3, #0]
				return;
   82928:	e6de      	b.n	826e8 <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   8292a:	7911      	ldrb	r1, [r2, #4]
   8292c:	78d3      	ldrb	r3, [r2, #3]
   8292e:	041b      	lsls	r3, r3, #16
   82930:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   82934:	7851      	ldrb	r1, [r2, #1]
   82936:	430b      	orrs	r3, r1
   82938:	7890      	ldrb	r0, [r2, #2]
   8293a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   8293e:	4b25      	ldr	r3, [pc, #148]	; (829d4 <XPROGProtocol_Command+0x358>)
   82940:	4798      	blx	r3
			break;
   82942:	e6d1      	b.n	826e8 <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   82944:	4b20      	ldr	r3, [pc, #128]	; (829c8 <XPROGProtocol_Command+0x34c>)
   82946:	2201      	movs	r2, #1
   82948:	701a      	strb	r2, [r3, #0]
			break;
   8294a:	e6cd      	b.n	826e8 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8294c:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8294e:	4b22      	ldr	r3, [pc, #136]	; (829d8 <XPROGProtocol_Command+0x35c>)
   82950:	88db      	ldrh	r3, [r3, #6]
   82952:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   82956:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8295a:	dc27      	bgt.n	829ac <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   8295c:	491e      	ldr	r1, [pc, #120]	; (829d8 <XPROGProtocol_Command+0x35c>)
   8295e:	4a1f      	ldr	r2, [pc, #124]	; (829dc <XPROGProtocol_Command+0x360>)
   82960:	4402      	add	r2, r0
   82962:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82964:	818b      	strh	r3, [r1, #12]
			return true;
   82966:	2001      	movs	r0, #1
   82968:	e6c1      	b.n	826ee <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8296a:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8296c:	4b1a      	ldr	r3, [pc, #104]	; (829d8 <XPROGProtocol_Command+0x35c>)
   8296e:	88da      	ldrh	r2, [r3, #6]
   82970:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   82974:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82978:	dd01      	ble.n	8297e <XPROGProtocol_Command+0x302>
				return false;
   8297a:	2000      	movs	r0, #0
   8297c:	e6b7      	b.n	826ee <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8297e:	6899      	ldr	r1, [r3, #8]
   82980:	4b16      	ldr	r3, [pc, #88]	; (829dc <XPROGProtocol_Command+0x360>)
   82982:	4418      	add	r0, r3
   82984:	4b16      	ldr	r3, [pc, #88]	; (829e0 <XPROGProtocol_Command+0x364>)
   82986:	4798      	blx	r3
			return true;
   82988:	2001      	movs	r0, #1
   8298a:	e6b0      	b.n	826ee <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   8298c:	4a15      	ldr	r2, [pc, #84]	; (829e4 <XPROGProtocol_Command+0x368>)
   8298e:	4b0e      	ldr	r3, [pc, #56]	; (829c8 <XPROGProtocol_Command+0x34c>)
   82990:	781b      	ldrb	r3, [r3, #0]
   82992:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   82994:	4b14      	ldr	r3, [pc, #80]	; (829e8 <XPROGProtocol_Command+0x36c>)
   82996:	681b      	ldr	r3, [r3, #0]
   82998:	fab3 f383 	clz	r3, r3
   8299c:	095b      	lsrs	r3, r3, #5
   8299e:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   829a0:	4b0d      	ldr	r3, [pc, #52]	; (829d8 <XPROGProtocol_Command+0x35c>)
   829a2:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   829a4:	2203      	movs	r2, #3
   829a6:	819a      	strh	r2, [r3, #12]
			return true;
   829a8:	2001      	movs	r0, #1
   829aa:	e6a0      	b.n	826ee <XPROGProtocol_Command+0x72>
				return false;
   829ac:	2000      	movs	r0, #0
   829ae:	e69e      	b.n	826ee <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   829b0:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   829b2:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   829b4:	2224      	movs	r2, #36	; 0x24
   829b6:	e70f      	b.n	827d8 <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   829b8:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   829ba:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   829bc:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   829be:	e70b      	b.n	827d8 <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   829c0:	204c      	movs	r0, #76	; 0x4c
   829c2:	e6ff      	b.n	827c4 <XPROGProtocol_Command+0x148>
   829c4:	20000842 	.word	0x20000842
   829c8:	20002680 	.word	0x20002680
   829cc:	20000848 	.word	0x20000848
   829d0:	20000849 	.word	0x20000849
   829d4:	00082c65 	.word	0x00082c65
   829d8:	2000269c 	.word	0x2000269c
   829dc:	20001f70 	.word	0x20001f70
   829e0:	00085f71 	.word	0x00085f71
   829e4:	20001f6c 	.word	0x20001f6c
   829e8:	20002684 	.word	0x20002684

000829ec <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   829ec:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   829ee:	4d0b      	ldr	r5, [pc, #44]	; (82a1c <XPROGTarget_SetRxMode+0x30>)
   829f0:	4c0b      	ldr	r4, [pc, #44]	; (82a20 <XPROGTarget_SetRxMode+0x34>)
   829f2:	4628      	mov	r0, r5
   829f4:	47a0      	blx	r4
   829f6:	2800      	cmp	r0, #0
   829f8:	d0fb      	beq.n	829f2 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   829fa:	4c08      	ldr	r4, [pc, #32]	; (82a1c <XPROGTarget_SetRxMode+0x30>)
   829fc:	4620      	mov	r0, r4
   829fe:	4b09      	ldr	r3, [pc, #36]	; (82a24 <XPROGTarget_SetRxMode+0x38>)
   82a00:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   82a02:	4620      	mov	r0, r4
   82a04:	4b08      	ldr	r3, [pc, #32]	; (82a28 <XPROGTarget_SetRxMode+0x3c>)
   82a06:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82a08:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82a0c:	2014      	movs	r0, #20
   82a0e:	4b07      	ldr	r3, [pc, #28]	; (82a2c <XPROGTarget_SetRxMode+0x40>)
   82a10:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   82a12:	4b07      	ldr	r3, [pc, #28]	; (82a30 <XPROGTarget_SetRxMode+0x44>)
   82a14:	2200      	movs	r2, #0
   82a16:	701a      	strb	r2, [r3, #0]
}
   82a18:	bd38      	pop	{r3, r4, r5, pc}
   82a1a:	bf00      	nop
   82a1c:	40094000 	.word	0x40094000
   82a20:	00085639 	.word	0x00085639
   82a24:	00085617 	.word	0x00085617
   82a28:	0008561d 	.word	0x0008561d
   82a2c:	00083c15 	.word	0x00083c15
   82a30:	20002070 	.word	0x20002070

00082a34 <XPROGTarget_SetTxMode>:
{
   82a34:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82a36:	2518      	movs	r5, #24
   82a38:	4c14      	ldr	r4, [pc, #80]	; (82a8c <XPROGTarget_SetTxMode+0x58>)
   82a3a:	4e15      	ldr	r6, [pc, #84]	; (82a90 <XPROGTarget_SetTxMode+0x5c>)
   82a3c:	4628      	mov	r0, r5
   82a3e:	47a0      	blx	r4
   82a40:	b110      	cbz	r0, 82a48 <XPROGTarget_SetTxMode+0x14>
   82a42:	6833      	ldr	r3, [r6, #0]
   82a44:	2b00      	cmp	r3, #0
   82a46:	d1f9      	bne.n	82a3c <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82a48:	2518      	movs	r5, #24
   82a4a:	4c10      	ldr	r4, [pc, #64]	; (82a8c <XPROGTarget_SetTxMode+0x58>)
   82a4c:	4e10      	ldr	r6, [pc, #64]	; (82a90 <XPROGTarget_SetTxMode+0x5c>)
   82a4e:	4628      	mov	r0, r5
   82a50:	47a0      	blx	r4
   82a52:	b910      	cbnz	r0, 82a5a <XPROGTarget_SetTxMode+0x26>
   82a54:	6833      	ldr	r3, [r6, #0]
   82a56:	2b00      	cmp	r3, #0
   82a58:	d1f9      	bne.n	82a4e <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82a5a:	2518      	movs	r5, #24
   82a5c:	4c0b      	ldr	r4, [pc, #44]	; (82a8c <XPROGTarget_SetTxMode+0x58>)
   82a5e:	4e0c      	ldr	r6, [pc, #48]	; (82a90 <XPROGTarget_SetTxMode+0x5c>)
   82a60:	4628      	mov	r0, r5
   82a62:	47a0      	blx	r4
   82a64:	b110      	cbz	r0, 82a6c <XPROGTarget_SetTxMode+0x38>
   82a66:	6833      	ldr	r3, [r6, #0]
   82a68:	2b00      	cmp	r3, #0
   82a6a:	d1f9      	bne.n	82a60 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   82a6c:	4c09      	ldr	r4, [pc, #36]	; (82a94 <XPROGTarget_SetTxMode+0x60>)
   82a6e:	4620      	mov	r0, r4
   82a70:	4b09      	ldr	r3, [pc, #36]	; (82a98 <XPROGTarget_SetTxMode+0x64>)
   82a72:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   82a74:	4620      	mov	r0, r4
   82a76:	4b09      	ldr	r3, [pc, #36]	; (82a9c <XPROGTarget_SetTxMode+0x68>)
   82a78:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   82a7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82a7e:	2014      	movs	r0, #20
   82a80:	4b07      	ldr	r3, [pc, #28]	; (82aa0 <XPROGTarget_SetTxMode+0x6c>)
   82a82:	4798      	blx	r3
	IsSending = true;
   82a84:	4b07      	ldr	r3, [pc, #28]	; (82aa4 <XPROGTarget_SetTxMode+0x70>)
   82a86:	2201      	movs	r2, #1
   82a88:	701a      	strb	r2, [r3, #0]
}
   82a8a:	bd70      	pop	{r4, r5, r6, pc}
   82a8c:	00083bc5 	.word	0x00083bc5
   82a90:	20002684 	.word	0x20002684
   82a94:	40094000 	.word	0x40094000
   82a98:	00085623 	.word	0x00085623
   82a9c:	00085611 	.word	0x00085611
   82aa0:	00083c15 	.word	0x00083c15
   82aa4:	20002070 	.word	0x20002070

00082aa8 <XPROGTarget_DisableTargetPDI>:
{
   82aa8:	b510      	push	{r4, lr}
	if (IsSending)
   82aaa:	4b0f      	ldr	r3, [pc, #60]	; (82ae8 <XPROGTarget_DisableTargetPDI+0x40>)
   82aac:	781b      	ldrb	r3, [r3, #0]
   82aae:	b9bb      	cbnz	r3, 82ae0 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   82ab0:	4c0e      	ldr	r4, [pc, #56]	; (82aec <XPROGTarget_DisableTargetPDI+0x44>)
   82ab2:	4620      	mov	r0, r4
   82ab4:	4b0e      	ldr	r3, [pc, #56]	; (82af0 <XPROGTarget_DisableTargetPDI+0x48>)
   82ab6:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   82ab8:	4620      	mov	r0, r4
   82aba:	4b0e      	ldr	r3, [pc, #56]	; (82af4 <XPROGTarget_DisableTargetPDI+0x4c>)
   82abc:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   82abe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82ac2:	2018      	movs	r0, #24
   82ac4:	4c0c      	ldr	r4, [pc, #48]	; (82af8 <XPROGTarget_DisableTargetPDI+0x50>)
   82ac6:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82ac8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82acc:	2015      	movs	r0, #21
   82ace:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82ad0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82ad4:	2014      	movs	r0, #20
   82ad6:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   82ad8:	200e      	movs	r0, #14
   82ada:	4b08      	ldr	r3, [pc, #32]	; (82afc <XPROGTarget_DisableTargetPDI+0x54>)
   82adc:	4798      	blx	r3
}
   82ade:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   82ae0:	4b07      	ldr	r3, [pc, #28]	; (82b00 <XPROGTarget_DisableTargetPDI+0x58>)
   82ae2:	4798      	blx	r3
   82ae4:	e7e4      	b.n	82ab0 <XPROGTarget_DisableTargetPDI+0x8>
   82ae6:	bf00      	nop
   82ae8:	20002070 	.word	0x20002070
   82aec:	40094000 	.word	0x40094000
   82af0:	00085623 	.word	0x00085623
   82af4:	00085617 	.word	0x00085617
   82af8:	00083c15 	.word	0x00083c15
   82afc:	00083f7d 	.word	0x00083f7d
   82b00:	000829ed 	.word	0x000829ed

00082b04 <XPROGTarget_SendByte>:
{
   82b04:	b510      	push	{r4, lr}
   82b06:	4604      	mov	r4, r0
	if (!(IsSending))
   82b08:	4b05      	ldr	r3, [pc, #20]	; (82b20 <XPROGTarget_SendByte+0x1c>)
   82b0a:	781b      	ldrb	r3, [r3, #0]
   82b0c:	b123      	cbz	r3, 82b18 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   82b0e:	4621      	mov	r1, r4
   82b10:	4804      	ldr	r0, [pc, #16]	; (82b24 <XPROGTarget_SendByte+0x20>)
   82b12:	4b05      	ldr	r3, [pc, #20]	; (82b28 <XPROGTarget_SendByte+0x24>)
   82b14:	4798      	blx	r3
}
   82b16:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   82b18:	4b04      	ldr	r3, [pc, #16]	; (82b2c <XPROGTarget_SendByte+0x28>)
   82b1a:	4798      	blx	r3
   82b1c:	e7f7      	b.n	82b0e <XPROGTarget_SendByte+0xa>
   82b1e:	bf00      	nop
   82b20:	20002070 	.word	0x20002070
   82b24:	40094000 	.word	0x40094000
   82b28:	00085655 	.word	0x00085655
   82b2c:	00082a35 	.word	0x00082a35

00082b30 <XPROGTarget_ReceiveByte>:
{
   82b30:	b570      	push	{r4, r5, r6, lr}
   82b32:	b082      	sub	sp, #8
	if (IsSending)
   82b34:	4b0a      	ldr	r3, [pc, #40]	; (82b60 <XPROGTarget_ReceiveByte+0x30>)
   82b36:	781b      	ldrb	r3, [r3, #0]
   82b38:	b973      	cbnz	r3, 82b58 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   82b3a:	4d0a      	ldr	r5, [pc, #40]	; (82b64 <XPROGTarget_ReceiveByte+0x34>)
   82b3c:	4c0a      	ldr	r4, [pc, #40]	; (82b68 <XPROGTarget_ReceiveByte+0x38>)
   82b3e:	4e0b      	ldr	r6, [pc, #44]	; (82b6c <XPROGTarget_ReceiveByte+0x3c>)
   82b40:	a901      	add	r1, sp, #4
   82b42:	4628      	mov	r0, r5
   82b44:	47a0      	blx	r4
   82b46:	2801      	cmp	r0, #1
   82b48:	d102      	bne.n	82b50 <XPROGTarget_ReceiveByte+0x20>
   82b4a:	6833      	ldr	r3, [r6, #0]
   82b4c:	2b00      	cmp	r3, #0
   82b4e:	d1f7      	bne.n	82b40 <XPROGTarget_ReceiveByte+0x10>
}
   82b50:	f89d 0004 	ldrb.w	r0, [sp, #4]
   82b54:	b002      	add	sp, #8
   82b56:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   82b58:	4b05      	ldr	r3, [pc, #20]	; (82b70 <XPROGTarget_ReceiveByte+0x40>)
   82b5a:	4798      	blx	r3
   82b5c:	e7ed      	b.n	82b3a <XPROGTarget_ReceiveByte+0xa>
   82b5e:	bf00      	nop
   82b60:	20002070 	.word	0x20002070
   82b64:	40094000 	.word	0x40094000
   82b68:	00085667 	.word	0x00085667
   82b6c:	20002684 	.word	0x20002684
   82b70:	000829ed 	.word	0x000829ed

00082b74 <XPROGTarget_SendIdle>:
{
   82b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   82b76:	4b12      	ldr	r3, [pc, #72]	; (82bc0 <XPROGTarget_SendIdle+0x4c>)
   82b78:	781b      	ldrb	r3, [r3, #0]
   82b7a:	b123      	cbz	r3, 82b86 <XPROGTarget_SendIdle+0x12>
{
   82b7c:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82b7e:	2518      	movs	r5, #24
   82b80:	4c10      	ldr	r4, [pc, #64]	; (82bc4 <XPROGTarget_SendIdle+0x50>)
   82b82:	4e11      	ldr	r6, [pc, #68]	; (82bc8 <XPROGTarget_SendIdle+0x54>)
   82b84:	e006      	b.n	82b94 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   82b86:	4b11      	ldr	r3, [pc, #68]	; (82bcc <XPROGTarget_SendIdle+0x58>)
   82b88:	4798      	blx	r3
   82b8a:	e7f7      	b.n	82b7c <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   82b8c:	3f01      	subs	r7, #1
   82b8e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   82b92:	d013      	beq.n	82bbc <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82b94:	4628      	mov	r0, r5
   82b96:	47a0      	blx	r4
   82b98:	b110      	cbz	r0, 82ba0 <XPROGTarget_SendIdle+0x2c>
   82b9a:	6833      	ldr	r3, [r6, #0]
   82b9c:	2b00      	cmp	r3, #0
   82b9e:	d1f9      	bne.n	82b94 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82ba0:	4628      	mov	r0, r5
   82ba2:	47a0      	blx	r4
   82ba4:	b910      	cbnz	r0, 82bac <XPROGTarget_SendIdle+0x38>
   82ba6:	6833      	ldr	r3, [r6, #0]
   82ba8:	2b00      	cmp	r3, #0
   82baa:	d1f9      	bne.n	82ba0 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82bac:	4628      	mov	r0, r5
   82bae:	47a0      	blx	r4
   82bb0:	2800      	cmp	r0, #0
   82bb2:	d0eb      	beq.n	82b8c <XPROGTarget_SendIdle+0x18>
   82bb4:	6833      	ldr	r3, [r6, #0]
   82bb6:	2b00      	cmp	r3, #0
   82bb8:	d1f8      	bne.n	82bac <XPROGTarget_SendIdle+0x38>
   82bba:	e7e7      	b.n	82b8c <XPROGTarget_SendIdle+0x18>
}
   82bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bbe:	bf00      	nop
   82bc0:	20002070 	.word	0x20002070
   82bc4:	00083bc5 	.word	0x00083bc5
   82bc8:	20002684 	.word	0x20002684
   82bcc:	00082a35 	.word	0x00082a35

00082bd0 <XPROGTarget_EnableTargetPDI>:
{
   82bd0:	b570      	push	{r4, r5, r6, lr}
   82bd2:	b086      	sub	sp, #24
	IsSending = false;
   82bd4:	2500      	movs	r5, #0
   82bd6:	4b19      	ldr	r3, [pc, #100]	; (82c3c <XPROGTarget_EnableTargetPDI+0x6c>)
   82bd8:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   82bda:	200e      	movs	r0, #14
   82bdc:	4b18      	ldr	r3, [pc, #96]	; (82c40 <XPROGTarget_EnableTargetPDI+0x70>)
   82bde:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   82be0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82be4:	2014      	movs	r0, #20
   82be6:	4c17      	ldr	r4, [pc, #92]	; (82c44 <XPROGTarget_EnableTargetPDI+0x74>)
   82be8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82bea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82bee:	2015      	movs	r0, #21
   82bf0:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   82bf2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82bf6:	2018      	movs	r0, #24
   82bf8:	47a0      	blx	r4
	delay_us(50);
   82bfa:	f240 1057 	movw	r0, #343	; 0x157
   82bfe:	4e12      	ldr	r6, [pc, #72]	; (82c48 <XPROGTarget_EnableTargetPDI+0x78>)
   82c00:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   82c02:	2014      	movs	r0, #20
   82c04:	4b11      	ldr	r3, [pc, #68]	; (82c4c <XPROGTarget_EnableTargetPDI+0x7c>)
   82c06:	4798      	blx	r3
	delay_us(10);
   82c08:	2045      	movs	r0, #69	; 0x45
   82c0a:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   82c0c:	9502      	str	r5, [sp, #8]
   82c0e:	9504      	str	r5, [sp, #16]
   82c10:	9505      	str	r5, [sp, #20]
   82c12:	4b0f      	ldr	r3, [pc, #60]	; (82c50 <XPROGTarget_EnableTargetPDI+0x80>)
   82c14:	9300      	str	r3, [sp, #0]
   82c16:	23c0      	movs	r3, #192	; 0xc0
   82c18:	9301      	str	r3, [sp, #4]
   82c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82c1e:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   82c20:	4a0c      	ldr	r2, [pc, #48]	; (82c54 <XPROGTarget_EnableTargetPDI+0x84>)
   82c22:	4669      	mov	r1, sp
   82c24:	480c      	ldr	r0, [pc, #48]	; (82c58 <XPROGTarget_EnableTargetPDI+0x88>)
   82c26:	4b0d      	ldr	r3, [pc, #52]	; (82c5c <XPROGTarget_EnableTargetPDI+0x8c>)
   82c28:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   82c2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82c2e:	2018      	movs	r0, #24
   82c30:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82c32:	4c0b      	ldr	r4, [pc, #44]	; (82c60 <XPROGTarget_EnableTargetPDI+0x90>)
   82c34:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82c36:	47a0      	blx	r4
}
   82c38:	b006      	add	sp, #24
   82c3a:	bd70      	pop	{r4, r5, r6, pc}
   82c3c:	20002070 	.word	0x20002070
   82c40:	00083f51 	.word	0x00083f51
   82c44:	00083c15 	.word	0x00083c15
   82c48:	20000087 	.word	0x20000087
   82c4c:	00083be1 	.word	0x00083be1
   82c50:	0007a120 	.word	0x0007a120
   82c54:	0b71b000 	.word	0x0b71b000
   82c58:	40094000 	.word	0x40094000
   82c5c:	000855a9 	.word	0x000855a9
   82c60:	00082b75 	.word	0x00082b75

00082c64 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   82c64:	4b01      	ldr	r3, [pc, #4]	; (82c6c <set_timeout+0x8>)
   82c66:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   82c68:	4770      	bx	lr
   82c6a:	bf00      	nop
   82c6c:	2000084c 	.word	0x2000084c

00082c70 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   82c70:	b538      	push	{r3, r4, r5, lr}
   82c72:	2016      	movs	r0, #22
   82c74:	4b10      	ldr	r3, [pc, #64]	; (82cb8 <setup_timeoutcnt+0x48>)
   82c76:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82c78:	4b10      	ldr	r3, [pc, #64]	; (82cbc <setup_timeoutcnt+0x4c>)
   82c7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   82c7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82c82:	2510      	movs	r5, #16
   82c84:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82c88:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   82c8a:	4c0d      	ldr	r4, [pc, #52]	; (82cc0 <setup_timeoutcnt+0x50>)
   82c8c:	f24c 0201 	movw	r2, #49153	; 0xc001
   82c90:	2100      	movs	r1, #0
   82c92:	4620      	mov	r0, r4
   82c94:	4b0b      	ldr	r3, [pc, #44]	; (82cc4 <setup_timeoutcnt+0x54>)
   82c96:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   82c98:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   82c9c:	2100      	movs	r1, #0
   82c9e:	4620      	mov	r0, r4
   82ca0:	4b09      	ldr	r3, [pc, #36]	; (82cc8 <setup_timeoutcnt+0x58>)
   82ca2:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   82ca4:	462a      	mov	r2, r5
   82ca6:	2100      	movs	r1, #0
   82ca8:	4620      	mov	r0, r4
   82caa:	4b08      	ldr	r3, [pc, #32]	; (82ccc <setup_timeoutcnt+0x5c>)
   82cac:	4798      	blx	r3
	
	timerEnabled = true;
   82cae:	4b08      	ldr	r3, [pc, #32]	; (82cd0 <setup_timeoutcnt+0x60>)
   82cb0:	2201      	movs	r2, #1
   82cb2:	701a      	strb	r2, [r3, #0]
}
   82cb4:	bd38      	pop	{r3, r4, r5, pc}
   82cb6:	bf00      	nop
   82cb8:	00083f51 	.word	0x00083f51
   82cbc:	e000e100 	.word	0xe000e100
   82cc0:	40080000 	.word	0x40080000
   82cc4:	00082da5 	.word	0x00082da5
   82cc8:	00082dcf 	.word	0x00082dcf
   82ccc:	00082dd7 	.word	0x00082dd7
   82cd0:	20002071 	.word	0x20002071

00082cd4 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   82cd4:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   82cd6:	4b0a      	ldr	r3, [pc, #40]	; (82d00 <start_timeoutcnt+0x2c>)
   82cd8:	781b      	ldrb	r3, [r3, #0]
   82cda:	b16b      	cbz	r3, 82cf8 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82cdc:	4c09      	ldr	r4, [pc, #36]	; (82d04 <start_timeoutcnt+0x30>)
   82cde:	2100      	movs	r1, #0
   82ce0:	4620      	mov	r0, r4
   82ce2:	4b09      	ldr	r3, [pc, #36]	; (82d08 <start_timeoutcnt+0x34>)
   82ce4:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   82ce6:	4b09      	ldr	r3, [pc, #36]	; (82d0c <start_timeoutcnt+0x38>)
   82ce8:	681a      	ldr	r2, [r3, #0]
   82cea:	4b09      	ldr	r3, [pc, #36]	; (82d10 <start_timeoutcnt+0x3c>)
   82cec:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   82cee:	2100      	movs	r1, #0
   82cf0:	4620      	mov	r0, r4
   82cf2:	4b08      	ldr	r3, [pc, #32]	; (82d14 <start_timeoutcnt+0x40>)
   82cf4:	4798      	blx	r3
}
   82cf6:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   82cf8:	4b07      	ldr	r3, [pc, #28]	; (82d18 <start_timeoutcnt+0x44>)
   82cfa:	4798      	blx	r3
   82cfc:	e7ee      	b.n	82cdc <start_timeoutcnt+0x8>
   82cfe:	bf00      	nop
   82d00:	20002071 	.word	0x20002071
   82d04:	40080000 	.word	0x40080000
   82d08:	00082dc7 	.word	0x00082dc7
   82d0c:	2000084c 	.word	0x2000084c
   82d10:	20002684 	.word	0x20002684
   82d14:	00082dbf 	.word	0x00082dbf
   82d18:	00082c71 	.word	0x00082c71

00082d1c <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   82d1c:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82d1e:	2100      	movs	r1, #0
   82d20:	4801      	ldr	r0, [pc, #4]	; (82d28 <stop_timeoutcnt+0xc>)
   82d22:	4b02      	ldr	r3, [pc, #8]	; (82d2c <stop_timeoutcnt+0x10>)
   82d24:	4798      	blx	r3
}
   82d26:	bd08      	pop	{r3, pc}
   82d28:	40080000 	.word	0x40080000
   82d2c:	00082dc7 	.word	0x00082dc7

00082d30 <TC0_Handler>:

ISR(TC0_Handler)
{
   82d30:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   82d32:	4b05      	ldr	r3, [pc, #20]	; (82d48 <TC0_Handler+0x18>)
   82d34:	681b      	ldr	r3, [r3, #0]
   82d36:	b113      	cbz	r3, 82d3e <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   82d38:	3b01      	subs	r3, #1
   82d3a:	4a03      	ldr	r2, [pc, #12]	; (82d48 <TC0_Handler+0x18>)
   82d3c:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   82d3e:	2100      	movs	r1, #0
   82d40:	4802      	ldr	r0, [pc, #8]	; (82d4c <TC0_Handler+0x1c>)
   82d42:	4b03      	ldr	r3, [pc, #12]	; (82d50 <TC0_Handler+0x20>)
   82d44:	4798      	blx	r3
}
   82d46:	bd08      	pop	{r3, pc}
   82d48:	20002684 	.word	0x20002684
   82d4c:	40080000 	.word	0x40080000
   82d50:	00082ddf 	.word	0x00082ddf

00082d54 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   82d54:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82d56:	f1a1 030e 	sub.w	r3, r1, #14
   82d5a:	2b01      	cmp	r3, #1
   82d5c:	d91a      	bls.n	82d94 <efc_perform_command+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82d5e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82d62:	b672      	cpsid	i
   82d64:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82d68:	4b0c      	ldr	r3, [pc, #48]	; (82d9c <efc_perform_command+0x48>)
   82d6a:	2500      	movs	r5, #0
   82d6c:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82d6e:	0212      	lsls	r2, r2, #8
   82d70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   82d74:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   82d78:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82d7a:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   82d7c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   82d80:	4b07      	ldr	r3, [pc, #28]	; (82da0 <efc_perform_command+0x4c>)
   82d82:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   82d84:	b92c      	cbnz	r4, 82d92 <efc_perform_command+0x3e>
		cpu_irq_enable();
   82d86:	4b05      	ldr	r3, [pc, #20]	; (82d9c <efc_perform_command+0x48>)
   82d88:	2201      	movs	r2, #1
   82d8a:	701a      	strb	r2, [r3, #0]
   82d8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82d90:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   82d92:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   82d94:	f04f 30ff 	mov.w	r0, #4294967295
   82d98:	e7fb      	b.n	82d92 <efc_perform_command+0x3e>
   82d9a:	bf00      	nop
   82d9c:	20000982 	.word	0x20000982
   82da0:	2000006d 	.word	0x2000006d

00082da4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   82da4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82da6:	018b      	lsls	r3, r1, #6
   82da8:	eb00 1181 	add.w	r1, r0, r1, lsl #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   82dac:	2402      	movs	r4, #2
   82dae:	50c4      	str	r4, [r0, r3]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   82db0:	f04f 33ff 	mov.w	r3, #4294967295
   82db4:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   82db6:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   82db8:	604a      	str	r2, [r1, #4]
}
   82dba:	bc10      	pop	{r4}
   82dbc:	4770      	bx	lr

00082dbe <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   82dbe:	0189      	lsls	r1, r1, #6
   82dc0:	2305      	movs	r3, #5
   82dc2:	5043      	str	r3, [r0, r1]
}
   82dc4:	4770      	bx	lr

00082dc6 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   82dc6:	0189      	lsls	r1, r1, #6
   82dc8:	2302      	movs	r3, #2
   82dca:	5043      	str	r3, [r0, r1]
}
   82dcc:	4770      	bx	lr

00082dce <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82dce:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   82dd2:	61c2      	str	r2, [r0, #28]
}
   82dd4:	4770      	bx	lr

00082dd6 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82dd6:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   82dda:	6242      	str	r2, [r0, #36]	; 0x24
}
   82ddc:	4770      	bx	lr

00082dde <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82dde:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   82de2:	6a00      	ldr	r0, [r0, #32]
}
   82de4:	4770      	bx	lr
	...

00082de8 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82de8:	b570      	push	{r4, r5, r6, lr}
   82dea:	b086      	sub	sp, #24
   82dec:	4604      	mov	r4, r0
   82dee:	460d      	mov	r5, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82df0:	2304      	movs	r3, #4
   82df2:	9300      	str	r3, [sp, #0]
   82df4:	ab02      	add	r3, sp, #8
   82df6:	220f      	movs	r2, #15
   82df8:	210e      	movs	r1, #14
   82dfa:	480c      	ldr	r0, [pc, #48]	; (82e2c <flash_read_unique_id+0x44>)
   82dfc:	4e0c      	ldr	r6, [pc, #48]	; (82e30 <flash_read_unique_id+0x48>)
   82dfe:	47b0      	blx	r6
   82e00:	b980      	cbnz	r0, 82e24 <flash_read_unique_id+0x3c>
   82e02:	4603      	mov	r3, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82e04:	462e      	mov	r6, r5
   82e06:	2d04      	cmp	r5, #4
   82e08:	bf28      	it	cs
   82e0a:	2604      	movcs	r6, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82e0c:	b165      	cbz	r5, 82e28 <flash_read_unique_id+0x40>
   82e0e:	a902      	add	r1, sp, #8
   82e10:	1f22      	subs	r2, r4, #4
		pul_data[ul_idx] = uid_buf[ul_idx];
   82e12:	f851 4b04 	ldr.w	r4, [r1], #4
   82e16:	f842 4f04 	str.w	r4, [r2, #4]!
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82e1a:	3301      	adds	r3, #1
   82e1c:	429e      	cmp	r6, r3
   82e1e:	d8f8      	bhi.n	82e12 <flash_read_unique_id+0x2a>
	}

	return FLASH_RC_OK;
}
   82e20:	b006      	add	sp, #24
   82e22:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   82e24:	2010      	movs	r0, #16
   82e26:	e7fb      	b.n	82e20 <flash_read_unique_id+0x38>
	return FLASH_RC_OK;
   82e28:	4628      	mov	r0, r5
   82e2a:	e7f9      	b.n	82e20 <flash_read_unique_id+0x38>
   82e2c:	400e0800 	.word	0x400e0800
   82e30:	20000001 	.word	0x20000001

00082e34 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   82e34:	2300      	movs	r3, #0
   82e36:	6043      	str	r3, [r0, #4]
   82e38:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   82e3a:	6083      	str	r3, [r0, #8]
}
   82e3c:	4770      	bx	lr
	...

00082e40 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   82e40:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   82e42:	b672      	cpsid	i
   82e44:	f3bf 8f5f 	dmb	sy
    // Add char to buffer
	cpu_irq_disable();
   82e48:	4b11      	ldr	r3, [pc, #68]	; (82e90 <add_to_circ_buf+0x50>)
   82e4a:	2400      	movs	r4, #0
   82e4c:	701c      	strb	r4, [r3, #0]
    unsigned int newhead = cbuf->head;
   82e4e:	6804      	ldr	r4, [r0, #0]
    newhead++;
   82e50:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   82e52:	2cc8      	cmp	r4, #200	; 0xc8
   82e54:	bf28      	it	cs
   82e56:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   82e58:	6843      	ldr	r3, [r0, #4]
   82e5a:	42a3      	cmp	r3, r4
   82e5c:	d10b      	bne.n	82e76 <add_to_circ_buf+0x36>
    {
        if (!block)
   82e5e:	2a00      	cmp	r2, #0
   82e60:	d1fa      	bne.n	82e58 <add_to_circ_buf+0x18>
        {
            cbuf->dropped++;
   82e62:	6883      	ldr	r3, [r0, #8]
   82e64:	3301      	adds	r3, #1
   82e66:	6083      	str	r3, [r0, #8]
			cpu_irq_enable();
   82e68:	4b09      	ldr	r3, [pc, #36]	; (82e90 <add_to_circ_buf+0x50>)
   82e6a:	2201      	movs	r2, #1
   82e6c:	701a      	strb	r2, [r3, #0]
   82e6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82e72:	b662      	cpsie	i
            return;
   82e74:	e009      	b.n	82e8a <add_to_circ_buf+0x4a>
        //TODO: Need to add processing here if you want a blocking
		//      function.
        
    }

    cbuf->buf[cbuf->head] = ch;
   82e76:	6803      	ldr	r3, [r0, #0]
   82e78:	4403      	add	r3, r0
   82e7a:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   82e7c:	6004      	str	r4, [r0, #0]
	cpu_irq_enable();
   82e7e:	4b04      	ldr	r3, [pc, #16]	; (82e90 <add_to_circ_buf+0x50>)
   82e80:	2201      	movs	r2, #1
   82e82:	701a      	strb	r2, [r3, #0]
   82e84:	f3bf 8f5f 	dmb	sy
   82e88:	b662      	cpsie	i
}
   82e8a:	bc10      	pop	{r4}
   82e8c:	4770      	bx	lr
   82e8e:	bf00      	nop
   82e90:	20000982 	.word	0x20000982

00082e94 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   82e94:	4602      	mov	r2, r0
  __ASM volatile ("cpsid i");
   82e96:	b672      	cpsid	i
   82e98:	f3bf 8f5f 	dmb	sy
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
	cpu_irq_disable();
   82e9c:	4b0e      	ldr	r3, [pc, #56]	; (82ed8 <get_from_circ_buf+0x44>)
   82e9e:	2100      	movs	r1, #0
   82ea0:	7019      	strb	r1, [r3, #0]
    unsigned int newtail = cbuf->tail;
   82ea2:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   82ea4:	18c1      	adds	r1, r0, r3
   82ea6:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head) {
   82ea8:	6811      	ldr	r1, [r2, #0]
   82eaa:	4299      	cmp	r1, r3
   82eac:	d00b      	beq.n	82ec6 <get_from_circ_buf+0x32>
		cpu_irq_enable();
        return SERIAL_ERR;
	}

    newtail++;
   82eae:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   82eb0:	2bc8      	cmp	r3, #200	; 0xc8
   82eb2:	bf28      	it	cs
   82eb4:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   82eb6:	6053      	str	r3, [r2, #4]

	cpu_irq_enable();
   82eb8:	4b07      	ldr	r3, [pc, #28]	; (82ed8 <get_from_circ_buf+0x44>)
   82eba:	2201      	movs	r2, #1
   82ebc:	701a      	strb	r2, [r3, #0]
   82ebe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82ec2:	b662      	cpsie	i
    return retval;
}
   82ec4:	4770      	bx	lr
		cpu_irq_enable();
   82ec6:	4b04      	ldr	r3, [pc, #16]	; (82ed8 <get_from_circ_buf+0x44>)
   82ec8:	2201      	movs	r2, #1
   82eca:	701a      	strb	r2, [r3, #0]
   82ecc:	f3bf 8f5f 	dmb	sy
   82ed0:	b662      	cpsie	i
        return SERIAL_ERR;
   82ed2:	20ff      	movs	r0, #255	; 0xff
   82ed4:	4770      	bx	lr
   82ed6:	bf00      	nop
   82ed8:	20000982 	.word	0x20000982

00082edc <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   82edc:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   82ede:	6840      	ldr	r0, [r0, #4]
}
   82ee0:	1ac0      	subs	r0, r0, r3
   82ee2:	bf18      	it	ne
   82ee4:	2001      	movne	r0, #1
   82ee6:	4770      	bx	lr

00082ee8 <circ_buf_count>:
  __ASM volatile ("cpsid i");
   82ee8:	b672      	cpsid	i
   82eea:	f3bf 8f5f 	dmb	sy
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

	cpu_irq_disable();
   82eee:	4b07      	ldr	r3, [pc, #28]	; (82f0c <circ_buf_count+0x24>)
   82ef0:	2200      	movs	r2, #0
   82ef2:	701a      	strb	r2, [r3, #0]
    count = cbuf->head;
   82ef4:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   82ef6:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   82ef8:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   82efa:	bf48      	it	mi
   82efc:	30c8      	addmi	r0, #200	; 0xc8
		
	cpu_irq_enable();
   82efe:	4b03      	ldr	r3, [pc, #12]	; (82f0c <circ_buf_count+0x24>)
   82f00:	2201      	movs	r2, #1
   82f02:	701a      	strb	r2, [r3, #0]
   82f04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82f08:	b662      	cpsie	i
    return (unsigned int)count;
}
   82f0a:	4770      	bx	lr
   82f0c:	20000982 	.word	0x20000982

00082f10 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   82f10:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   82f12:	2006      	movs	r0, #6
   82f14:	4c02      	ldr	r4, [pc, #8]	; (82f20 <ui_init+0x10>)
   82f16:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82f18:	2007      	movs	r0, #7
   82f1a:	47a0      	blx	r4
}
   82f1c:	bd10      	pop	{r4, pc}
   82f1e:	bf00      	nop
   82f20:	00083aa5 	.word	0x00083aa5

00082f24 <ui_powerdown>:

void ui_powerdown(void)
{
   82f24:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   82f26:	2006      	movs	r0, #6
   82f28:	4c03      	ldr	r4, [pc, #12]	; (82f38 <ui_powerdown+0x14>)
   82f2a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82f2c:	2007      	movs	r0, #7
   82f2e:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   82f30:	201d      	movs	r0, #29
   82f32:	4b02      	ldr	r3, [pc, #8]	; (82f3c <ui_powerdown+0x18>)
   82f34:	4798      	blx	r3
		
}
   82f36:	bd10      	pop	{r4, pc}
   82f38:	00083aa5 	.word	0x00083aa5
   82f3c:	00083bfb 	.word	0x00083bfb

00082f40 <ui_wakeup>:

void ui_wakeup(void)
{
   82f40:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   82f42:	2006      	movs	r0, #6
   82f44:	4b02      	ldr	r3, [pc, #8]	; (82f50 <ui_wakeup+0x10>)
   82f46:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   82f48:	201d      	movs	r0, #29
   82f4a:	4b02      	ldr	r3, [pc, #8]	; (82f54 <ui_wakeup+0x14>)
   82f4c:	4798      	blx	r3
}
   82f4e:	bd08      	pop	{r3, pc}
   82f50:	00083ac9 	.word	0x00083ac9
   82f54:	00083be1 	.word	0x00083be1

00082f58 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   82f58:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   82f5a:	4b0b      	ldr	r3, [pc, #44]	; (82f88 <ui_process+0x30>)
   82f5c:	fba3 2300 	umull	r2, r3, r3, r0
   82f60:	099b      	lsrs	r3, r3, #6
   82f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82f66:	fb02 0013 	mls	r0, r2, r3, r0
   82f6a:	b280      	uxth	r0, r0
   82f6c:	b118      	cbz	r0, 82f76 <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   82f6e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   82f72:	d004      	beq.n	82f7e <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
}
   82f74:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   82f76:	2006      	movs	r0, #6
   82f78:	4b04      	ldr	r3, [pc, #16]	; (82f8c <ui_process+0x34>)
   82f7a:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   82f7c:	e7fa      	b.n	82f74 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   82f7e:	2006      	movs	r0, #6
   82f80:	4b03      	ldr	r3, [pc, #12]	; (82f90 <ui_process+0x38>)
   82f82:	4798      	blx	r3
}
   82f84:	e7f6      	b.n	82f74 <ui_process+0x1c>
   82f86:	bf00      	nop
   82f88:	10624dd3 	.word	0x10624dd3
   82f8c:	00083ac9 	.word	0x00083ac9
   82f90:	00083aa5 	.word	0x00083aa5

00082f94 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82f94:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82f96:	203e      	movs	r0, #62	; 0x3e
   82f98:	4b07      	ldr	r3, [pc, #28]	; (82fb8 <sysclk_enable_usb+0x24>)
   82f9a:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82f9c:	4c07      	ldr	r4, [pc, #28]	; (82fbc <sysclk_enable_usb+0x28>)
   82f9e:	47a0      	blx	r4
   82fa0:	2800      	cmp	r0, #0
   82fa2:	d0fc      	beq.n	82f9e <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82fa4:	4b06      	ldr	r3, [pc, #24]	; (82fc0 <sysclk_enable_usb+0x2c>)
   82fa6:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   82faa:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   82fac:	4c05      	ldr	r4, [pc, #20]	; (82fc4 <sysclk_enable_usb+0x30>)
   82fae:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82fb0:	2800      	cmp	r0, #0
   82fb2:	d0fc      	beq.n	82fae <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   82fb4:	bd10      	pop	{r4, pc}
   82fb6:	bf00      	nop
   82fb8:	00083eb9 	.word	0x00083eb9
   82fbc:	00083ee1 	.word	0x00083ee1
   82fc0:	400e0400 	.word	0x400e0400
   82fc4:	00083f41 	.word	0x00083f41

00082fc8 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82fc8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82fca:	4812      	ldr	r0, [pc, #72]	; (83014 <sysclk_init+0x4c>)
   82fcc:	4b12      	ldr	r3, [pc, #72]	; (83018 <sysclk_init+0x50>)
   82fce:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82fd0:	203e      	movs	r0, #62	; 0x3e
   82fd2:	4b12      	ldr	r3, [pc, #72]	; (8301c <sysclk_init+0x54>)
   82fd4:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82fd6:	4c12      	ldr	r4, [pc, #72]	; (83020 <sysclk_init+0x58>)
   82fd8:	47a0      	blx	r4
   82fda:	2800      	cmp	r0, #0
   82fdc:	d0fc      	beq.n	82fd8 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82fde:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82fe2:	4b10      	ldr	r3, [pc, #64]	; (83024 <sysclk_init+0x5c>)
   82fe4:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   82fe6:	4c10      	ldr	r4, [pc, #64]	; (83028 <sysclk_init+0x60>)
   82fe8:	47a0      	blx	r4
   82fea:	2800      	cmp	r0, #0
   82fec:	d0fc      	beq.n	82fe8 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   82fee:	4b0f      	ldr	r3, [pc, #60]	; (8302c <sysclk_init+0x64>)
   82ff0:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82ff2:	4b0f      	ldr	r3, [pc, #60]	; (83030 <sysclk_init+0x68>)
   82ff4:	4a0f      	ldr	r2, [pc, #60]	; (83034 <sysclk_init+0x6c>)
   82ff6:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   82ff8:	4c0f      	ldr	r4, [pc, #60]	; (83038 <sysclk_init+0x70>)
   82ffa:	47a0      	blx	r4
   82ffc:	2800      	cmp	r0, #0
   82ffe:	d0fc      	beq.n	82ffa <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83000:	2010      	movs	r0, #16
   83002:	4b0e      	ldr	r3, [pc, #56]	; (8303c <sysclk_init+0x74>)
   83004:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83006:	4b0e      	ldr	r3, [pc, #56]	; (83040 <sysclk_init+0x78>)
   83008:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8300a:	4802      	ldr	r0, [pc, #8]	; (83014 <sysclk_init+0x4c>)
   8300c:	4b02      	ldr	r3, [pc, #8]	; (83018 <sysclk_init+0x50>)
   8300e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83010:	bd10      	pop	{r4, pc}
   83012:	bf00      	nop
   83014:	05b8d800 	.word	0x05b8d800
   83018:	20000139 	.word	0x20000139
   8301c:	00083eb9 	.word	0x00083eb9
   83020:	00083ee1 	.word	0x00083ee1
   83024:	00083f01 	.word	0x00083f01
   83028:	00083ef1 	.word	0x00083ef1
   8302c:	00083f21 	.word	0x00083f21
   83030:	400e0400 	.word	0x400e0400
   83034:	200f3f01 	.word	0x200f3f01
   83038:	00083f31 	.word	0x00083f31
   8303c:	00083e59 	.word	0x00083e59
   83040:	00085775 	.word	0x00085775

00083044 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   83044:	4b01      	ldr	r3, [pc, #4]	; (8304c <udi_vendor_getsetting+0x8>)
   83046:	7818      	ldrb	r0, [r3, #0]
   83048:	4770      	bx	lr
   8304a:	bf00      	nop
   8304c:	20002072 	.word	0x20002072

00083050 <udi_vendor_enable>:
{
   83050:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83052:	4b05      	ldr	r3, [pc, #20]	; (83068 <udi_vendor_enable+0x18>)
   83054:	4798      	blx	r3
   83056:	78c3      	ldrb	r3, [r0, #3]
   83058:	4a04      	ldr	r2, [pc, #16]	; (8306c <udi_vendor_enable+0x1c>)
   8305a:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   8305c:	b10b      	cbz	r3, 83062 <udi_vendor_enable+0x12>
	return true;
   8305e:	2001      	movs	r0, #1
}
   83060:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83062:	4b03      	ldr	r3, [pc, #12]	; (83070 <udi_vendor_enable+0x20>)
   83064:	4798      	blx	r3
   83066:	e7fb      	b.n	83060 <udi_vendor_enable+0x10>
   83068:	00083285 	.word	0x00083285
   8306c:	20002072 	.word	0x20002072
   83070:	000812d5 	.word	0x000812d5

00083074 <udi_vendor_disable>:
{
   83074:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   83076:	4b03      	ldr	r3, [pc, #12]	; (83084 <udi_vendor_disable+0x10>)
   83078:	781b      	ldrb	r3, [r3, #0]
   8307a:	b103      	cbz	r3, 8307e <udi_vendor_disable+0xa>
}
   8307c:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   8307e:	4b02      	ldr	r3, [pc, #8]	; (83088 <udi_vendor_disable+0x14>)
   83080:	4798      	blx	r3
}
   83082:	e7fb      	b.n	8307c <udi_vendor_disable+0x8>
   83084:	20002072 	.word	0x20002072
   83088:	000812fd 	.word	0x000812fd

0008308c <udi_vendor_setup>:
{
   8308c:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   8308e:	4a0c      	ldr	r2, [pc, #48]	; (830c0 <udi_vendor_setup+0x34>)
   83090:	7813      	ldrb	r3, [r2, #0]
   83092:	f992 2000 	ldrsb.w	r2, [r2]
   83096:	2a00      	cmp	r2, #0
   83098:	db06      	blt.n	830a8 <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8309a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8309e:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   830a0:	bf18      	it	ne
   830a2:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   830a4:	d009      	beq.n	830ba <udi_vendor_setup+0x2e>
}
   830a6:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   830a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   830ac:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   830ae:	bf18      	it	ne
   830b0:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   830b2:	d1f8      	bne.n	830a6 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   830b4:	4b03      	ldr	r3, [pc, #12]	; (830c4 <udi_vendor_setup+0x38>)
   830b6:	4798      	blx	r3
   830b8:	e7f5      	b.n	830a6 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   830ba:	4b03      	ldr	r3, [pc, #12]	; (830c8 <udi_vendor_setup+0x3c>)
   830bc:	4798      	blx	r3
   830be:	e7f2      	b.n	830a6 <udi_vendor_setup+0x1a>
   830c0:	2000269c 	.word	0x2000269c
   830c4:	00081359 	.word	0x00081359
   830c8:	00081309 	.word	0x00081309

000830cc <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   830cc:	b510      	push	{r4, lr}
   830ce:	b082      	sub	sp, #8
   830d0:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   830d2:	9200      	str	r2, [sp, #0]
   830d4:	4602      	mov	r2, r0
   830d6:	2100      	movs	r1, #0
   830d8:	2081      	movs	r0, #129	; 0x81
   830da:	4c02      	ldr	r4, [pc, #8]	; (830e4 <udi_vendor_bulk_in_run+0x18>)
   830dc:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   830de:	b002      	add	sp, #8
   830e0:	bd10      	pop	{r4, pc}
   830e2:	bf00      	nop
   830e4:	00084fdd 	.word	0x00084fdd

000830e8 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   830e8:	b510      	push	{r4, lr}
   830ea:	b082      	sub	sp, #8
   830ec:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   830ee:	9200      	str	r2, [sp, #0]
   830f0:	4602      	mov	r2, r0
   830f2:	2100      	movs	r1, #0
   830f4:	2002      	movs	r0, #2
   830f6:	4c02      	ldr	r4, [pc, #8]	; (83100 <udi_vendor_bulk_out_run+0x18>)
   830f8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   830fa:	b002      	add	sp, #8
   830fc:	bd10      	pop	{r4, pc}
   830fe:	bf00      	nop
   83100:	00084fdd 	.word	0x00084fdd

00083104 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83104:	4b0b      	ldr	r3, [pc, #44]	; (83134 <udc_next_desc_in_iface+0x30>)
   83106:	681b      	ldr	r3, [r3, #0]
   83108:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8310a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8310c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8310e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83110:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   83112:	4290      	cmp	r0, r2
   83114:	d20a      	bcs.n	8312c <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   83116:	7843      	ldrb	r3, [r0, #1]
   83118:	2b04      	cmp	r3, #4
   8311a:	d009      	beq.n	83130 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8311c:	428b      	cmp	r3, r1
   8311e:	d008      	beq.n	83132 <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   83120:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83122:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   83124:	4290      	cmp	r0, r2
   83126:	d3f6      	bcc.n	83116 <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   83128:	2000      	movs	r0, #0
   8312a:	4770      	bx	lr
   8312c:	2000      	movs	r0, #0
   8312e:	4770      	bx	lr
   83130:	2000      	movs	r0, #0
}
   83132:	4770      	bx	lr
   83134:	2000207c 	.word	0x2000207c

00083138 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   83138:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8313a:	4b03      	ldr	r3, [pc, #12]	; (83148 <udc_valid_address+0x10>)
   8313c:	7898      	ldrb	r0, [r3, #2]
   8313e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83142:	4b02      	ldr	r3, [pc, #8]	; (8314c <udc_valid_address+0x14>)
   83144:	4798      	blx	r3
}
   83146:	bd08      	pop	{r3, pc}
   83148:	2000269c 	.word	0x2000269c
   8314c:	00084d31 	.word	0x00084d31

00083150 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   83150:	4b18      	ldr	r3, [pc, #96]	; (831b4 <udc_update_iface_desc+0x64>)
   83152:	781b      	ldrb	r3, [r3, #0]
   83154:	b33b      	cbz	r3, 831a6 <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83156:	4b18      	ldr	r3, [pc, #96]	; (831b8 <udc_update_iface_desc+0x68>)
   83158:	681b      	ldr	r3, [r3, #0]
   8315a:	681b      	ldr	r3, [r3, #0]
   8315c:	791a      	ldrb	r2, [r3, #4]
   8315e:	4282      	cmp	r2, r0
   83160:	d923      	bls.n	831aa <udc_update_iface_desc+0x5a>
{
   83162:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   83164:	4a15      	ldr	r2, [pc, #84]	; (831bc <udc_update_iface_desc+0x6c>)
   83166:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   83168:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8316a:	441c      	add	r4, r3
	while (ptr_end_desc >
   8316c:	42a3      	cmp	r3, r4
   8316e:	d21e      	bcs.n	831ae <udc_update_iface_desc+0x5e>
   83170:	2500      	movs	r5, #0
   83172:	2601      	movs	r6, #1
   83174:	e004      	b.n	83180 <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   83176:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83178:	4413      	add	r3, r2
	while (ptr_end_desc >
   8317a:	4635      	mov	r5, r6
   8317c:	42a3      	cmp	r3, r4
   8317e:	d20d      	bcs.n	8319c <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83180:	785a      	ldrb	r2, [r3, #1]
   83182:	2a04      	cmp	r2, #4
   83184:	d1f7      	bne.n	83176 <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83186:	789a      	ldrb	r2, [r3, #2]
   83188:	4282      	cmp	r2, r0
   8318a:	d1f4      	bne.n	83176 <udc_update_iface_desc+0x26>
   8318c:	78da      	ldrb	r2, [r3, #3]
   8318e:	428a      	cmp	r2, r1
   83190:	d1f1      	bne.n	83176 <udc_update_iface_desc+0x26>
   83192:	b10d      	cbz	r5, 83198 <udc_update_iface_desc+0x48>
   83194:	4a09      	ldr	r2, [pc, #36]	; (831bc <udc_update_iface_desc+0x6c>)
   83196:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   83198:	2001      	movs	r0, #1
   8319a:	e002      	b.n	831a2 <udc_update_iface_desc+0x52>
   8319c:	4a07      	ldr	r2, [pc, #28]	; (831bc <udc_update_iface_desc+0x6c>)
   8319e:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   831a0:	2000      	movs	r0, #0
}
   831a2:	bc70      	pop	{r4, r5, r6}
   831a4:	4770      	bx	lr
		return false;
   831a6:	2000      	movs	r0, #0
   831a8:	4770      	bx	lr
		return false;
   831aa:	2000      	movs	r0, #0
}
   831ac:	4770      	bx	lr
	return false; // Interface not found
   831ae:	2000      	movs	r0, #0
   831b0:	e7f7      	b.n	831a2 <udc_update_iface_desc+0x52>
   831b2:	bf00      	nop
   831b4:	20002079 	.word	0x20002079
   831b8:	2000207c 	.word	0x2000207c
   831bc:	20002080 	.word	0x20002080

000831c0 <udc_iface_disable>:
{
   831c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   831c4:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   831c6:	2100      	movs	r1, #0
   831c8:	4b12      	ldr	r3, [pc, #72]	; (83214 <udc_iface_disable+0x54>)
   831ca:	4798      	blx	r3
   831cc:	4680      	mov	r8, r0
   831ce:	b1f0      	cbz	r0, 8320e <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   831d0:	4b11      	ldr	r3, [pc, #68]	; (83218 <udc_iface_disable+0x58>)
   831d2:	681b      	ldr	r3, [r3, #0]
   831d4:	685b      	ldr	r3, [r3, #4]
   831d6:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   831da:	f8d9 300c 	ldr.w	r3, [r9, #12]
   831de:	4798      	blx	r3
   831e0:	4601      	mov	r1, r0
   831e2:	4620      	mov	r0, r4
   831e4:	4b0b      	ldr	r3, [pc, #44]	; (83214 <udc_iface_disable+0x54>)
   831e6:	4798      	blx	r3
   831e8:	4680      	mov	r8, r0
   831ea:	b180      	cbz	r0, 8320e <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   831ec:	4b0b      	ldr	r3, [pc, #44]	; (8321c <udc_iface_disable+0x5c>)
   831ee:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   831f0:	2605      	movs	r6, #5
   831f2:	4d0b      	ldr	r5, [pc, #44]	; (83220 <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   831f4:	4f0b      	ldr	r7, [pc, #44]	; (83224 <udc_iface_disable+0x64>)
   831f6:	e001      	b.n	831fc <udc_iface_disable+0x3c>
   831f8:	7880      	ldrb	r0, [r0, #2]
   831fa:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   831fc:	4631      	mov	r1, r6
   831fe:	4620      	mov	r0, r4
   83200:	47a8      	blx	r5
			if (NULL == ep_desc) {
   83202:	4604      	mov	r4, r0
   83204:	2800      	cmp	r0, #0
   83206:	d1f7      	bne.n	831f8 <udc_iface_disable+0x38>
	udi_api->disable();
   83208:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8320c:	4798      	blx	r3
}
   8320e:	4640      	mov	r0, r8
   83210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83214:	00083151 	.word	0x00083151
   83218:	2000207c 	.word	0x2000207c
   8321c:	20002080 	.word	0x20002080
   83220:	00083105 	.word	0x00083105
   83224:	00084d95 	.word	0x00084d95

00083228 <udc_iface_enable>:
{
   83228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8322c:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8322e:	4b10      	ldr	r3, [pc, #64]	; (83270 <udc_iface_enable+0x48>)
   83230:	4798      	blx	r3
   83232:	4603      	mov	r3, r0
   83234:	b1c8      	cbz	r0, 8326a <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83236:	4b0f      	ldr	r3, [pc, #60]	; (83274 <udc_iface_enable+0x4c>)
   83238:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8323a:	2605      	movs	r6, #5
   8323c:	4d0e      	ldr	r5, [pc, #56]	; (83278 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8323e:	4f0f      	ldr	r7, [pc, #60]	; (8327c <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   83240:	4631      	mov	r1, r6
   83242:	4620      	mov	r0, r4
   83244:	47a8      	blx	r5
		if (NULL == ep_desc)
   83246:	4604      	mov	r4, r0
   83248:	b138      	cbz	r0, 8325a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8324a:	8882      	ldrh	r2, [r0, #4]
   8324c:	78c1      	ldrb	r1, [r0, #3]
   8324e:	7880      	ldrb	r0, [r0, #2]
   83250:	47b8      	blx	r7
   83252:	4603      	mov	r3, r0
   83254:	2800      	cmp	r0, #0
   83256:	d1f3      	bne.n	83240 <udc_iface_enable+0x18>
   83258:	e007      	b.n	8326a <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8325a:	4b09      	ldr	r3, [pc, #36]	; (83280 <udc_iface_enable+0x58>)
   8325c:	681b      	ldr	r3, [r3, #0]
   8325e:	685b      	ldr	r3, [r3, #4]
   83260:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   83264:	681b      	ldr	r3, [r3, #0]
   83266:	4798      	blx	r3
   83268:	4603      	mov	r3, r0
}
   8326a:	4618      	mov	r0, r3
   8326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83270:	00083151 	.word	0x00083151
   83274:	20002080 	.word	0x20002080
   83278:	00083105 	.word	0x00083105
   8327c:	000850d9 	.word	0x000850d9
   83280:	2000207c 	.word	0x2000207c

00083284 <udc_get_interface_desc>:
}
   83284:	4b01      	ldr	r3, [pc, #4]	; (8328c <udc_get_interface_desc+0x8>)
   83286:	6818      	ldr	r0, [r3, #0]
   83288:	4770      	bx	lr
   8328a:	bf00      	nop
   8328c:	20002080 	.word	0x20002080

00083290 <udc_start>:
{
   83290:	b508      	push	{r3, lr}
	udd_enable();
   83292:	4b01      	ldr	r3, [pc, #4]	; (83298 <udc_start+0x8>)
   83294:	4798      	blx	r3
}
   83296:	bd08      	pop	{r3, pc}
   83298:	00084c15 	.word	0x00084c15

0008329c <udc_reset>:
{
   8329c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   8329e:	4b0d      	ldr	r3, [pc, #52]	; (832d4 <udc_reset+0x38>)
   832a0:	781b      	ldrb	r3, [r3, #0]
   832a2:	b183      	cbz	r3, 832c6 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832a4:	4b0c      	ldr	r3, [pc, #48]	; (832d8 <udc_reset+0x3c>)
   832a6:	681b      	ldr	r3, [r3, #0]
   832a8:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   832aa:	791b      	ldrb	r3, [r3, #4]
   832ac:	b15b      	cbz	r3, 832c6 <udc_reset+0x2a>
   832ae:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   832b0:	4e0a      	ldr	r6, [pc, #40]	; (832dc <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832b2:	4d09      	ldr	r5, [pc, #36]	; (832d8 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   832b4:	b2e0      	uxtb	r0, r4
   832b6:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832b8:	3401      	adds	r4, #1
   832ba:	682b      	ldr	r3, [r5, #0]
   832bc:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   832be:	791a      	ldrb	r2, [r3, #4]
   832c0:	b2e3      	uxtb	r3, r4
   832c2:	429a      	cmp	r2, r3
   832c4:	d8f6      	bhi.n	832b4 <udc_reset+0x18>
	udc_num_configuration = 0;
   832c6:	2300      	movs	r3, #0
   832c8:	4a02      	ldr	r2, [pc, #8]	; (832d4 <udc_reset+0x38>)
   832ca:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   832cc:	4a04      	ldr	r2, [pc, #16]	; (832e0 <udc_reset+0x44>)
   832ce:	8013      	strh	r3, [r2, #0]
}
   832d0:	bd70      	pop	{r4, r5, r6, pc}
   832d2:	bf00      	nop
   832d4:	20002079 	.word	0x20002079
   832d8:	2000207c 	.word	0x2000207c
   832dc:	000831c1 	.word	0x000831c1
   832e0:	20002074 	.word	0x20002074

000832e4 <udc_sof_notify>:
{
   832e4:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   832e6:	4b0e      	ldr	r3, [pc, #56]	; (83320 <udc_sof_notify+0x3c>)
   832e8:	781b      	ldrb	r3, [r3, #0]
   832ea:	b1bb      	cbz	r3, 8331c <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832ec:	4b0d      	ldr	r3, [pc, #52]	; (83324 <udc_sof_notify+0x40>)
   832ee:	681a      	ldr	r2, [r3, #0]
   832f0:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   832f2:	791b      	ldrb	r3, [r3, #4]
   832f4:	b193      	cbz	r3, 8331c <udc_sof_notify+0x38>
   832f6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832f8:	4d0a      	ldr	r5, [pc, #40]	; (83324 <udc_sof_notify+0x40>)
   832fa:	e006      	b.n	8330a <udc_sof_notify+0x26>
   832fc:	682a      	ldr	r2, [r5, #0]
   832fe:	3401      	adds	r4, #1
   83300:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   83302:	7919      	ldrb	r1, [r3, #4]
   83304:	b2e3      	uxtb	r3, r4
   83306:	4299      	cmp	r1, r3
   83308:	d908      	bls.n	8331c <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8330a:	b2e3      	uxtb	r3, r4
   8330c:	6852      	ldr	r2, [r2, #4]
   8330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83312:	691b      	ldr	r3, [r3, #16]
   83314:	2b00      	cmp	r3, #0
   83316:	d0f1      	beq.n	832fc <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   83318:	4798      	blx	r3
   8331a:	e7ef      	b.n	832fc <udc_sof_notify+0x18>
}
   8331c:	bd38      	pop	{r3, r4, r5, pc}
   8331e:	bf00      	nop
   83320:	20002079 	.word	0x20002079
   83324:	2000207c 	.word	0x2000207c

00083328 <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   83328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   8332c:	4b91      	ldr	r3, [pc, #580]	; (83574 <udc_process_setup+0x24c>)
   8332e:	2200      	movs	r2, #0
   83330:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   83332:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83334:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   83336:	881b      	ldrh	r3, [r3, #0]
   83338:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   8333c:	d01b      	beq.n	83376 <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   8333e:	4b8d      	ldr	r3, [pc, #564]	; (83574 <udc_process_setup+0x24c>)
   83340:	781a      	ldrb	r2, [r3, #0]
   83342:	f993 3000 	ldrsb.w	r3, [r3]
   83346:	2b00      	cmp	r3, #0
   83348:	db1b      	blt.n	83382 <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8334a:	f012 0f60 	tst.w	r2, #96	; 0x60
   8334e:	f000 8147 	beq.w	835e0 <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   83352:	4b88      	ldr	r3, [pc, #544]	; (83574 <udc_process_setup+0x24c>)
   83354:	781b      	ldrb	r3, [r3, #0]
   83356:	f003 031f 	and.w	r3, r3, #31
   8335a:	2b01      	cmp	r3, #1
   8335c:	f000 8245 	beq.w	837ea <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   83360:	4b84      	ldr	r3, [pc, #528]	; (83574 <udc_process_setup+0x24c>)
   83362:	781b      	ldrb	r3, [r3, #0]
   83364:	f003 031f 	and.w	r3, r3, #31
   83368:	2b02      	cmp	r3, #2
   8336a:	f000 8291 	beq.w	83890 <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8336e:	2300      	movs	r3, #0
#endif
}
   83370:	4618      	mov	r0, r3
   83372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   83376:	21ae      	movs	r1, #174	; 0xae
   83378:	487f      	ldr	r0, [pc, #508]	; (83578 <udc_process_setup+0x250>)
   8337a:	4b80      	ldr	r3, [pc, #512]	; (8357c <udc_process_setup+0x254>)
   8337c:	4798      	blx	r3
		return true;
   8337e:	2301      	movs	r3, #1
   83380:	e7f6      	b.n	83370 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   83382:	4b7c      	ldr	r3, [pc, #496]	; (83574 <udc_process_setup+0x24c>)
   83384:	88db      	ldrh	r3, [r3, #6]
   83386:	2b00      	cmp	r3, #0
   83388:	f000 82ae 	beq.w	838e8 <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8338c:	f012 0f60 	tst.w	r2, #96	; 0x60
   83390:	d1df      	bne.n	83352 <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83392:	f012 021f 	ands.w	r2, r2, #31
   83396:	f040 80c1 	bne.w	8351c <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   8339a:	4a76      	ldr	r2, [pc, #472]	; (83574 <udc_process_setup+0x24c>)
   8339c:	7852      	ldrb	r2, [r2, #1]
   8339e:	2a06      	cmp	r2, #6
   833a0:	d00b      	beq.n	833ba <udc_process_setup+0x92>
   833a2:	2a08      	cmp	r2, #8
   833a4:	f000 80b2 	beq.w	8350c <udc_process_setup+0x1e4>
   833a8:	2a00      	cmp	r2, #0
   833aa:	d1d2      	bne.n	83352 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   833ac:	2b02      	cmp	r3, #2
   833ae:	d1d0      	bne.n	83352 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   833b0:	2102      	movs	r1, #2
   833b2:	4873      	ldr	r0, [pc, #460]	; (83580 <udc_process_setup+0x258>)
   833b4:	4b71      	ldr	r3, [pc, #452]	; (8357c <udc_process_setup+0x254>)
   833b6:	4798      	blx	r3
	return true;
   833b8:	e12f      	b.n	8361a <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   833ba:	4b6e      	ldr	r3, [pc, #440]	; (83574 <udc_process_setup+0x24c>)
   833bc:	885a      	ldrh	r2, [r3, #2]
   833be:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   833c0:	0a13      	lsrs	r3, r2, #8
   833c2:	3b01      	subs	r3, #1
   833c4:	2b0e      	cmp	r3, #14
   833c6:	f200 8209 	bhi.w	837dc <udc_process_setup+0x4b4>
   833ca:	e8df f013 	tbh	[pc, r3, lsl #1]
   833ce:	000f      	.short	0x000f
   833d0:	007a0023 	.word	0x007a0023
   833d4:	02070207 	.word	0x02070207
   833d8:	00520044 	.word	0x00520044
   833dc:	02070207 	.word	0x02070207
   833e0:	02070207 	.word	0x02070207
   833e4:	02070207 	.word	0x02070207
   833e8:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   833ec:	4b65      	ldr	r3, [pc, #404]	; (83584 <udc_process_setup+0x25c>)
   833ee:	4798      	blx	r3
   833f0:	b928      	cbnz	r0, 833fe <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   833f2:	4b65      	ldr	r3, [pc, #404]	; (83588 <udc_process_setup+0x260>)
   833f4:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   833f6:	7801      	ldrb	r1, [r0, #0]
   833f8:	4b60      	ldr	r3, [pc, #384]	; (8357c <udc_process_setup+0x254>)
   833fa:	4798      	blx	r3
   833fc:	e030      	b.n	83460 <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   833fe:	4b62      	ldr	r3, [pc, #392]	; (83588 <udc_process_setup+0x260>)
   83400:	681a      	ldr	r2, [r3, #0]
   83402:	2110      	movs	r1, #16
   83404:	7091      	strb	r1, [r2, #2]
   83406:	2102      	movs	r1, #2
   83408:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   8340a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   8340c:	7801      	ldrb	r1, [r0, #0]
   8340e:	4b5b      	ldr	r3, [pc, #364]	; (8357c <udc_process_setup+0x254>)
   83410:	4798      	blx	r3
   83412:	e025      	b.n	83460 <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   83414:	4b5b      	ldr	r3, [pc, #364]	; (83584 <udc_process_setup+0x25c>)
   83416:	4798      	blx	r3
   83418:	b180      	cbz	r0, 8343c <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   8341a:	4b5b      	ldr	r3, [pc, #364]	; (83588 <udc_process_setup+0x260>)
   8341c:	689b      	ldr	r3, [r3, #8]
   8341e:	7c5b      	ldrb	r3, [r3, #17]
   83420:	42a3      	cmp	r3, r4
   83422:	d996      	bls.n	83352 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83424:	4b58      	ldr	r3, [pc, #352]	; (83588 <udc_process_setup+0x260>)
   83426:	691b      	ldr	r3, [r3, #16]
   83428:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8342c:	8841      	ldrh	r1, [r0, #2]
   8342e:	4b53      	ldr	r3, [pc, #332]	; (8357c <udc_process_setup+0x254>)
   83430:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83432:	4b50      	ldr	r3, [pc, #320]	; (83574 <udc_process_setup+0x24c>)
   83434:	689b      	ldr	r3, [r3, #8]
   83436:	2202      	movs	r2, #2
   83438:	705a      	strb	r2, [r3, #1]
		break;
   8343a:	e011      	b.n	83460 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   8343c:	4b52      	ldr	r3, [pc, #328]	; (83588 <udc_process_setup+0x260>)
   8343e:	681b      	ldr	r3, [r3, #0]
   83440:	7c5b      	ldrb	r3, [r3, #17]
   83442:	42a3      	cmp	r3, r4
   83444:	d985      	bls.n	83352 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83446:	4b50      	ldr	r3, [pc, #320]	; (83588 <udc_process_setup+0x260>)
   83448:	685b      	ldr	r3, [r3, #4]
   8344a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8344e:	8841      	ldrh	r1, [r0, #2]
   83450:	4b4a      	ldr	r3, [pc, #296]	; (8357c <udc_process_setup+0x254>)
   83452:	4798      	blx	r3
   83454:	e7ed      	b.n	83432 <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83456:	4b4c      	ldr	r3, [pc, #304]	; (83588 <udc_process_setup+0x260>)
   83458:	68d8      	ldr	r0, [r3, #12]
   8345a:	7801      	ldrb	r1, [r0, #0]
   8345c:	4b47      	ldr	r3, [pc, #284]	; (8357c <udc_process_setup+0x254>)
   8345e:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   83460:	4b44      	ldr	r3, [pc, #272]	; (83574 <udc_process_setup+0x24c>)
   83462:	88da      	ldrh	r2, [r3, #6]
   83464:	899b      	ldrh	r3, [r3, #12]
   83466:	4293      	cmp	r3, r2
   83468:	f240 80d7 	bls.w	8361a <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8346c:	4b41      	ldr	r3, [pc, #260]	; (83574 <udc_process_setup+0x24c>)
   8346e:	819a      	strh	r2, [r3, #12]
   83470:	e0d3      	b.n	8361a <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   83472:	4b44      	ldr	r3, [pc, #272]	; (83584 <udc_process_setup+0x25c>)
   83474:	4798      	blx	r3
   83476:	b988      	cbnz	r0, 8349c <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   83478:	4b43      	ldr	r3, [pc, #268]	; (83588 <udc_process_setup+0x260>)
   8347a:	689b      	ldr	r3, [r3, #8]
   8347c:	7c5b      	ldrb	r3, [r3, #17]
   8347e:	42a3      	cmp	r3, r4
   83480:	f67f af67 	bls.w	83352 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83484:	4b40      	ldr	r3, [pc, #256]	; (83588 <udc_process_setup+0x260>)
   83486:	691b      	ldr	r3, [r3, #16]
   83488:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8348c:	8841      	ldrh	r1, [r0, #2]
   8348e:	4b3b      	ldr	r3, [pc, #236]	; (8357c <udc_process_setup+0x254>)
   83490:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83492:	4b38      	ldr	r3, [pc, #224]	; (83574 <udc_process_setup+0x24c>)
   83494:	689b      	ldr	r3, [r3, #8]
   83496:	2207      	movs	r2, #7
   83498:	705a      	strb	r2, [r3, #1]
		break;
   8349a:	e7e1      	b.n	83460 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   8349c:	4b3a      	ldr	r3, [pc, #232]	; (83588 <udc_process_setup+0x260>)
   8349e:	681b      	ldr	r3, [r3, #0]
   834a0:	7c5b      	ldrb	r3, [r3, #17]
   834a2:	42a3      	cmp	r3, r4
   834a4:	f67f af55 	bls.w	83352 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   834a8:	4b37      	ldr	r3, [pc, #220]	; (83588 <udc_process_setup+0x260>)
   834aa:	685b      	ldr	r3, [r3, #4]
   834ac:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   834b0:	8841      	ldrh	r1, [r0, #2]
   834b2:	4b32      	ldr	r3, [pc, #200]	; (8357c <udc_process_setup+0x254>)
   834b4:	4798      	blx	r3
   834b6:	e7ec      	b.n	83492 <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   834b8:	2121      	movs	r1, #33	; 0x21
   834ba:	4834      	ldr	r0, [pc, #208]	; (8358c <udc_process_setup+0x264>)
   834bc:	4b2f      	ldr	r3, [pc, #188]	; (8357c <udc_process_setup+0x254>)
   834be:	4798      	blx	r3
		break;
   834c0:	e7ce      	b.n	83460 <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   834c2:	b2d2      	uxtb	r2, r2
   834c4:	2a03      	cmp	r2, #3
   834c6:	f63f af44 	bhi.w	83352 <udc_process_setup+0x2a>
   834ca:	e8df f002 	tbb	[pc, r2]
   834ce:	1914      	.short	0x1914
   834d0:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   834d2:	2020      	movs	r0, #32
   834d4:	4a2e      	ldr	r2, [pc, #184]	; (83590 <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   834d6:	4613      	mov	r3, r2
   834d8:	492e      	ldr	r1, [pc, #184]	; (83594 <udc_process_setup+0x26c>)
   834da:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   834dc:	f813 4b01 	ldrb.w	r4, [r3], #1
   834e0:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   834e4:	429a      	cmp	r2, r3
   834e6:	d1f9      	bne.n	834dc <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   834e8:	0041      	lsls	r1, r0, #1
   834ea:	3102      	adds	r1, #2
   834ec:	4829      	ldr	r0, [pc, #164]	; (83594 <udc_process_setup+0x26c>)
   834ee:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   834f0:	4b22      	ldr	r3, [pc, #136]	; (8357c <udc_process_setup+0x254>)
   834f2:	4798      	blx	r3
   834f4:	e7b4      	b.n	83460 <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   834f6:	2104      	movs	r1, #4
   834f8:	4827      	ldr	r0, [pc, #156]	; (83598 <udc_process_setup+0x270>)
   834fa:	4b20      	ldr	r3, [pc, #128]	; (8357c <udc_process_setup+0x254>)
   834fc:	4798      	blx	r3
	if (str_length) {
   834fe:	e7af      	b.n	83460 <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   83500:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   83502:	4a26      	ldr	r2, [pc, #152]	; (8359c <udc_process_setup+0x274>)
   83504:	e7e7      	b.n	834d6 <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83506:	2012      	movs	r0, #18
		str = udc_string_product_name;
   83508:	4a25      	ldr	r2, [pc, #148]	; (835a0 <udc_process_setup+0x278>)
   8350a:	e7e4      	b.n	834d6 <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8350c:	2b01      	cmp	r3, #1
   8350e:	f47f af20 	bne.w	83352 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   83512:	2101      	movs	r1, #1
   83514:	4823      	ldr	r0, [pc, #140]	; (835a4 <udc_process_setup+0x27c>)
   83516:	4b19      	ldr	r3, [pc, #100]	; (8357c <udc_process_setup+0x254>)
   83518:	4798      	blx	r3
	return true;
   8351a:	e07e      	b.n	8361a <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8351c:	2a01      	cmp	r2, #1
   8351e:	d149      	bne.n	835b4 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   83520:	4a14      	ldr	r2, [pc, #80]	; (83574 <udc_process_setup+0x24c>)
   83522:	7852      	ldrb	r2, [r2, #1]
   83524:	2a0a      	cmp	r2, #10
   83526:	f47f af14 	bne.w	83352 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8352a:	2b01      	cmp	r3, #1
   8352c:	f47f af11 	bne.w	83352 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   83530:	4b1c      	ldr	r3, [pc, #112]	; (835a4 <udc_process_setup+0x27c>)
   83532:	781b      	ldrb	r3, [r3, #0]
   83534:	2b00      	cmp	r3, #0
   83536:	f43f af0c 	beq.w	83352 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8353a:	4b0e      	ldr	r3, [pc, #56]	; (83574 <udc_process_setup+0x24c>)
   8353c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8353e:	4b1a      	ldr	r3, [pc, #104]	; (835a8 <udc_process_setup+0x280>)
   83540:	681d      	ldr	r5, [r3, #0]
   83542:	682b      	ldr	r3, [r5, #0]
   83544:	791b      	ldrb	r3, [r3, #4]
   83546:	42a3      	cmp	r3, r4
   83548:	f67f af03 	bls.w	83352 <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   8354c:	2100      	movs	r1, #0
   8354e:	4620      	mov	r0, r4
   83550:	4b16      	ldr	r3, [pc, #88]	; (835ac <udc_process_setup+0x284>)
   83552:	4798      	blx	r3
   83554:	2800      	cmp	r0, #0
   83556:	f43f aefc 	beq.w	83352 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8355a:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   8355c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   83560:	68db      	ldr	r3, [r3, #12]
   83562:	4798      	blx	r3
   83564:	4b12      	ldr	r3, [pc, #72]	; (835b0 <udc_process_setup+0x288>)
   83566:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   83568:	2101      	movs	r1, #1
   8356a:	4618      	mov	r0, r3
   8356c:	4b03      	ldr	r3, [pc, #12]	; (8357c <udc_process_setup+0x254>)
   8356e:	4798      	blx	r3
	return true;
   83570:	e053      	b.n	8361a <udc_process_setup+0x2f2>
   83572:	bf00      	nop
   83574:	2000269c 	.word	0x2000269c
   83578:	200008d8 	.word	0x200008d8
   8357c:	00084d89 	.word	0x00084d89
   83580:	20002074 	.word	0x20002074
   83584:	00084d21 	.word	0x00084d21
   83588:	200001d0 	.word	0x200001d0
   8358c:	0008cb24 	.word	0x0008cb24
   83590:	20000988 	.word	0x20000988
   83594:	20000864 	.word	0x20000864
   83598:	200008a8 	.word	0x200008a8
   8359c:	200008ac 	.word	0x200008ac
   835a0:	200008c4 	.word	0x200008c4
   835a4:	20002079 	.word	0x20002079
   835a8:	2000207c 	.word	0x2000207c
   835ac:	00083151 	.word	0x00083151
   835b0:	20002078 	.word	0x20002078
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   835b4:	2a02      	cmp	r2, #2
   835b6:	f47f aecc 	bne.w	83352 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   835ba:	4a93      	ldr	r2, [pc, #588]	; (83808 <udc_process_setup+0x4e0>)
   835bc:	7852      	ldrb	r2, [r2, #1]
   835be:	2a00      	cmp	r2, #0
   835c0:	f47f aec7 	bne.w	83352 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   835c4:	2b02      	cmp	r3, #2
   835c6:	f47f aec4 	bne.w	83352 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   835ca:	4b8f      	ldr	r3, [pc, #572]	; (83808 <udc_process_setup+0x4e0>)
   835cc:	7918      	ldrb	r0, [r3, #4]
   835ce:	4b8f      	ldr	r3, [pc, #572]	; (8380c <udc_process_setup+0x4e4>)
   835d0:	4798      	blx	r3
   835d2:	4b8f      	ldr	r3, [pc, #572]	; (83810 <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   835d4:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   835d6:	2102      	movs	r1, #2
   835d8:	4618      	mov	r0, r3
   835da:	4b8e      	ldr	r3, [pc, #568]	; (83814 <udc_process_setup+0x4ec>)
   835dc:	4798      	blx	r3
	return true;
   835de:	e01c      	b.n	8361a <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   835e0:	f012 021f 	ands.w	r2, r2, #31
   835e4:	f040 80b1 	bne.w	8374a <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   835e8:	4b87      	ldr	r3, [pc, #540]	; (83808 <udc_process_setup+0x4e0>)
   835ea:	785b      	ldrb	r3, [r3, #1]
   835ec:	3b01      	subs	r3, #1
   835ee:	2b08      	cmp	r3, #8
   835f0:	f200 80ab 	bhi.w	8374a <udc_process_setup+0x422>
   835f4:	e8df f013 	tbh	[pc, r3, lsl #1]
   835f8:	00a90013 	.word	0x00a90013
   835fc:	00a90023 	.word	0x00a90023
   83600:	00a90009 	.word	0x00a90009
   83604:	00a900a9 	.word	0x00a900a9
   83608:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   8360a:	4b7f      	ldr	r3, [pc, #508]	; (83808 <udc_process_setup+0x4e0>)
   8360c:	88db      	ldrh	r3, [r3, #6]
   8360e:	2b00      	cmp	r3, #0
   83610:	f47f ae9f 	bne.w	83352 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   83614:	4b7c      	ldr	r3, [pc, #496]	; (83808 <udc_process_setup+0x4e0>)
   83616:	4a80      	ldr	r2, [pc, #512]	; (83818 <udc_process_setup+0x4f0>)
   83618:	611a      	str	r2, [r3, #16]
			return true;
   8361a:	2301      	movs	r3, #1
   8361c:	e6a8      	b.n	83370 <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   8361e:	4b7a      	ldr	r3, [pc, #488]	; (83808 <udc_process_setup+0x4e0>)
   83620:	88db      	ldrh	r3, [r3, #6]
   83622:	2b00      	cmp	r3, #0
   83624:	f47f ae95 	bne.w	83352 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   83628:	4b77      	ldr	r3, [pc, #476]	; (83808 <udc_process_setup+0x4e0>)
   8362a:	885b      	ldrh	r3, [r3, #2]
   8362c:	2b01      	cmp	r3, #1
   8362e:	f47f ae90 	bne.w	83352 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83632:	4a7a      	ldr	r2, [pc, #488]	; (8381c <udc_process_setup+0x4f4>)
   83634:	8813      	ldrh	r3, [r2, #0]
   83636:	f023 0302 	bic.w	r3, r3, #2
   8363a:	8013      	strh	r3, [r2, #0]
		return true;
   8363c:	e7ed      	b.n	8361a <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   8363e:	4b72      	ldr	r3, [pc, #456]	; (83808 <udc_process_setup+0x4e0>)
   83640:	88db      	ldrh	r3, [r3, #6]
   83642:	2b00      	cmp	r3, #0
   83644:	f47f ae85 	bne.w	83352 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   83648:	4b6f      	ldr	r3, [pc, #444]	; (83808 <udc_process_setup+0x4e0>)
   8364a:	885b      	ldrh	r3, [r3, #2]
   8364c:	2b02      	cmp	r3, #2
   8364e:	f47f ae80 	bne.w	83352 <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   83652:	4b73      	ldr	r3, [pc, #460]	; (83820 <udc_process_setup+0x4f8>)
   83654:	4798      	blx	r3
   83656:	2800      	cmp	r0, #0
   83658:	f43f ae7b 	beq.w	83352 <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8365c:	4b6a      	ldr	r3, [pc, #424]	; (83808 <udc_process_setup+0x4e0>)
   8365e:	791b      	ldrb	r3, [r3, #4]
   83660:	2b00      	cmp	r3, #0
   83662:	f47f ae76 	bne.w	83352 <udc_process_setup+0x2a>
		udc_reset();
   83666:	4b6f      	ldr	r3, [pc, #444]	; (83824 <udc_process_setup+0x4fc>)
   83668:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8366a:	4b67      	ldr	r3, [pc, #412]	; (83808 <udc_process_setup+0x4e0>)
   8366c:	889b      	ldrh	r3, [r3, #4]
   8366e:	0a1b      	lsrs	r3, r3, #8
   83670:	3b01      	subs	r3, #1
   83672:	2b03      	cmp	r3, #3
   83674:	f200 80b7 	bhi.w	837e6 <udc_process_setup+0x4be>
   83678:	e8df f003 	tbb	[pc, r3]
   8367c:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83680:	4b61      	ldr	r3, [pc, #388]	; (83808 <udc_process_setup+0x4e0>)
   83682:	4a69      	ldr	r2, [pc, #420]	; (83828 <udc_process_setup+0x500>)
   83684:	611a      	str	r2, [r3, #16]
			return true;
   83686:	e7c8      	b.n	8361a <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   83688:	4b5f      	ldr	r3, [pc, #380]	; (83808 <udc_process_setup+0x4e0>)
   8368a:	4a68      	ldr	r2, [pc, #416]	; (8382c <udc_process_setup+0x504>)
   8368c:	611a      	str	r2, [r3, #16]
			return true;
   8368e:	e7c4      	b.n	8361a <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83690:	4b5d      	ldr	r3, [pc, #372]	; (83808 <udc_process_setup+0x4e0>)
   83692:	4a67      	ldr	r2, [pc, #412]	; (83830 <udc_process_setup+0x508>)
   83694:	611a      	str	r2, [r3, #16]
			return true;
   83696:	e7c0      	b.n	8361a <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   83698:	4b5b      	ldr	r3, [pc, #364]	; (83808 <udc_process_setup+0x4e0>)
   8369a:	4a66      	ldr	r2, [pc, #408]	; (83834 <udc_process_setup+0x50c>)
   8369c:	611a      	str	r2, [r3, #16]
			return true;
   8369e:	e7bc      	b.n	8361a <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   836a0:	4b59      	ldr	r3, [pc, #356]	; (83808 <udc_process_setup+0x4e0>)
   836a2:	88db      	ldrh	r3, [r3, #6]
   836a4:	2b00      	cmp	r3, #0
   836a6:	f47f ae54 	bne.w	83352 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   836aa:	4b63      	ldr	r3, [pc, #396]	; (83838 <udc_process_setup+0x510>)
   836ac:	4798      	blx	r3
   836ae:	2800      	cmp	r0, #0
   836b0:	f43f ae4f 	beq.w	83352 <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   836b4:	4b5a      	ldr	r3, [pc, #360]	; (83820 <udc_process_setup+0x4f8>)
   836b6:	4798      	blx	r3
   836b8:	2800      	cmp	r0, #0
   836ba:	d034      	beq.n	83726 <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   836bc:	4b5f      	ldr	r3, [pc, #380]	; (8383c <udc_process_setup+0x514>)
   836be:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   836c0:	7c5a      	ldrb	r2, [r3, #17]
   836c2:	4b51      	ldr	r3, [pc, #324]	; (83808 <udc_process_setup+0x4e0>)
   836c4:	789b      	ldrb	r3, [r3, #2]
   836c6:	429a      	cmp	r2, r3
   836c8:	f4ff ae43 	bcc.w	83352 <udc_process_setup+0x2a>
	udc_reset();
   836cc:	4b55      	ldr	r3, [pc, #340]	; (83824 <udc_process_setup+0x4fc>)
   836ce:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   836d0:	4b4d      	ldr	r3, [pc, #308]	; (83808 <udc_process_setup+0x4e0>)
   836d2:	789b      	ldrb	r3, [r3, #2]
   836d4:	4a5a      	ldr	r2, [pc, #360]	; (83840 <udc_process_setup+0x518>)
   836d6:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   836d8:	2b00      	cmp	r3, #0
   836da:	d09e      	beq.n	8361a <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   836dc:	4b50      	ldr	r3, [pc, #320]	; (83820 <udc_process_setup+0x4f8>)
   836de:	4798      	blx	r3
   836e0:	2800      	cmp	r0, #0
   836e2:	d028      	beq.n	83736 <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   836e4:	4b56      	ldr	r3, [pc, #344]	; (83840 <udc_process_setup+0x518>)
   836e6:	781b      	ldrb	r3, [r3, #0]
   836e8:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   836ec:	3a01      	subs	r2, #1
   836ee:	4b53      	ldr	r3, [pc, #332]	; (8383c <udc_process_setup+0x514>)
   836f0:	691b      	ldr	r3, [r3, #16]
   836f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   836f6:	4a53      	ldr	r2, [pc, #332]	; (83844 <udc_process_setup+0x51c>)
   836f8:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   836fa:	681b      	ldr	r3, [r3, #0]
   836fc:	791b      	ldrb	r3, [r3, #4]
   836fe:	2b00      	cmp	r3, #0
   83700:	d08b      	beq.n	8361a <udc_process_setup+0x2f2>
   83702:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   83704:	4626      	mov	r6, r4
   83706:	4d50      	ldr	r5, [pc, #320]	; (83848 <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83708:	4f4e      	ldr	r7, [pc, #312]	; (83844 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   8370a:	4631      	mov	r1, r6
   8370c:	b2e0      	uxtb	r0, r4
   8370e:	47a8      	blx	r5
   83710:	2800      	cmp	r0, #0
   83712:	f43f ae1e 	beq.w	83352 <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83716:	3401      	adds	r4, #1
   83718:	683b      	ldr	r3, [r7, #0]
   8371a:	681b      	ldr	r3, [r3, #0]
   8371c:	791a      	ldrb	r2, [r3, #4]
   8371e:	b2e3      	uxtb	r3, r4
   83720:	429a      	cmp	r2, r3
   83722:	d8f2      	bhi.n	8370a <udc_process_setup+0x3e2>
   83724:	e779      	b.n	8361a <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   83726:	4b45      	ldr	r3, [pc, #276]	; (8383c <udc_process_setup+0x514>)
   83728:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8372a:	7c5a      	ldrb	r2, [r3, #17]
   8372c:	4b36      	ldr	r3, [pc, #216]	; (83808 <udc_process_setup+0x4e0>)
   8372e:	789b      	ldrb	r3, [r3, #2]
   83730:	429a      	cmp	r2, r3
   83732:	d2cb      	bcs.n	836cc <udc_process_setup+0x3a4>
   83734:	e60d      	b.n	83352 <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   83736:	4b42      	ldr	r3, [pc, #264]	; (83840 <udc_process_setup+0x518>)
   83738:	781b      	ldrb	r3, [r3, #0]
   8373a:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   8373e:	3a01      	subs	r2, #1
   83740:	4b3e      	ldr	r3, [pc, #248]	; (8383c <udc_process_setup+0x514>)
   83742:	685b      	ldr	r3, [r3, #4]
   83744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83748:	e7d5      	b.n	836f6 <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8374a:	2a01      	cmp	r2, #1
   8374c:	d01a      	beq.n	83784 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8374e:	2a02      	cmp	r2, #2
   83750:	f47f adff 	bne.w	83352 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   83754:	4b2c      	ldr	r3, [pc, #176]	; (83808 <udc_process_setup+0x4e0>)
   83756:	785b      	ldrb	r3, [r3, #1]
   83758:	2b01      	cmp	r3, #1
   8375a:	d031      	beq.n	837c0 <udc_process_setup+0x498>
   8375c:	2b03      	cmp	r3, #3
   8375e:	f47f adf8 	bne.w	83352 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   83762:	4a29      	ldr	r2, [pc, #164]	; (83808 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83764:	88d3      	ldrh	r3, [r2, #6]
   83766:	8852      	ldrh	r2, [r2, #2]
   83768:	4313      	orrs	r3, r2
   8376a:	b29b      	uxth	r3, r3
   8376c:	2b00      	cmp	r3, #0
   8376e:	f47f adf0 	bne.w	83352 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83772:	4c25      	ldr	r4, [pc, #148]	; (83808 <udc_process_setup+0x4e0>)
   83774:	7920      	ldrb	r0, [r4, #4]
   83776:	4b35      	ldr	r3, [pc, #212]	; (8384c <udc_process_setup+0x524>)
   83778:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8377a:	7920      	ldrb	r0, [r4, #4]
   8377c:	4b34      	ldr	r3, [pc, #208]	; (83850 <udc_process_setup+0x528>)
   8377e:	4798      	blx	r3
   83780:	4603      	mov	r3, r0
   83782:	e02c      	b.n	837de <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   83784:	4b20      	ldr	r3, [pc, #128]	; (83808 <udc_process_setup+0x4e0>)
   83786:	785b      	ldrb	r3, [r3, #1]
   83788:	2b0b      	cmp	r3, #11
   8378a:	f47f ade2 	bne.w	83352 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   8378e:	4b1e      	ldr	r3, [pc, #120]	; (83808 <udc_process_setup+0x4e0>)
   83790:	88db      	ldrh	r3, [r3, #6]
   83792:	2b00      	cmp	r3, #0
   83794:	f47f addd 	bne.w	83352 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   83798:	4b29      	ldr	r3, [pc, #164]	; (83840 <udc_process_setup+0x518>)
   8379a:	781b      	ldrb	r3, [r3, #0]
   8379c:	2b00      	cmp	r3, #0
   8379e:	f43f add8 	beq.w	83352 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   837a2:	4b19      	ldr	r3, [pc, #100]	; (83808 <udc_process_setup+0x4e0>)
   837a4:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   837a6:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   837a8:	4620      	mov	r0, r4
   837aa:	4b2a      	ldr	r3, [pc, #168]	; (83854 <udc_process_setup+0x52c>)
   837ac:	4798      	blx	r3
   837ae:	2800      	cmp	r0, #0
   837b0:	f43f adcf 	beq.w	83352 <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   837b4:	b2e9      	uxtb	r1, r5
   837b6:	4620      	mov	r0, r4
   837b8:	4b23      	ldr	r3, [pc, #140]	; (83848 <udc_process_setup+0x520>)
   837ba:	4798      	blx	r3
   837bc:	4603      	mov	r3, r0
   837be:	e00e      	b.n	837de <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   837c0:	4a11      	ldr	r2, [pc, #68]	; (83808 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   837c2:	88d3      	ldrh	r3, [r2, #6]
   837c4:	8852      	ldrh	r2, [r2, #2]
   837c6:	4313      	orrs	r3, r2
   837c8:	b29b      	uxth	r3, r3
   837ca:	2b00      	cmp	r3, #0
   837cc:	f47f adc1 	bne.w	83352 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   837d0:	4b0d      	ldr	r3, [pc, #52]	; (83808 <udc_process_setup+0x4e0>)
   837d2:	7918      	ldrb	r0, [r3, #4]
   837d4:	4b20      	ldr	r3, [pc, #128]	; (83858 <udc_process_setup+0x530>)
   837d6:	4798      	blx	r3
   837d8:	4603      	mov	r3, r0
   837da:	e000      	b.n	837de <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   837dc:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   837de:	2b00      	cmp	r3, #0
   837e0:	f47f adc6 	bne.w	83370 <udc_process_setup+0x48>
   837e4:	e5b5      	b.n	83352 <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   837e6:	2300      	movs	r3, #0
   837e8:	e7f9      	b.n	837de <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   837ea:	4b15      	ldr	r3, [pc, #84]	; (83840 <udc_process_setup+0x518>)
   837ec:	781b      	ldrb	r3, [r3, #0]
   837ee:	2b00      	cmp	r3, #0
   837f0:	d07c      	beq.n	838ec <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   837f2:	4b05      	ldr	r3, [pc, #20]	; (83808 <udc_process_setup+0x4e0>)
   837f4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   837f6:	4b13      	ldr	r3, [pc, #76]	; (83844 <udc_process_setup+0x51c>)
   837f8:	681d      	ldr	r5, [r3, #0]
   837fa:	682b      	ldr	r3, [r5, #0]
   837fc:	791b      	ldrb	r3, [r3, #4]
   837fe:	42a3      	cmp	r3, r4
   83800:	d82c      	bhi.n	8385c <udc_process_setup+0x534>
	return false;
   83802:	2300      	movs	r3, #0
   83804:	e5b4      	b.n	83370 <udc_process_setup+0x48>
   83806:	bf00      	nop
   83808:	2000269c 	.word	0x2000269c
   8380c:	00084ded 	.word	0x00084ded
   83810:	20002076 	.word	0x20002076
   83814:	00084d89 	.word	0x00084d89
   83818:	00083139 	.word	0x00083139
   8381c:	20002074 	.word	0x20002074
   83820:	00084d21 	.word	0x00084d21
   83824:	0008329d 	.word	0x0008329d
   83828:	000853d5 	.word	0x000853d5
   8382c:	000853f9 	.word	0x000853f9
   83830:	0008541d 	.word	0x0008541d
   83834:	00085435 	.word	0x00085435
   83838:	00084d59 	.word	0x00084d59
   8383c:	200001d0 	.word	0x200001d0
   83840:	20002079 	.word	0x20002079
   83844:	2000207c 	.word	0x2000207c
   83848:	00083229 	.word	0x00083229
   8384c:	00085361 	.word	0x00085361
   83850:	00084e21 	.word	0x00084e21
   83854:	000831c1 	.word	0x000831c1
   83858:	00084ee5 	.word	0x00084ee5
	if (!udc_update_iface_desc(iface_num, 0)) {
   8385c:	2100      	movs	r1, #0
   8385e:	4620      	mov	r0, r4
   83860:	4b23      	ldr	r3, [pc, #140]	; (838f0 <udc_process_setup+0x5c8>)
   83862:	4798      	blx	r3
   83864:	2800      	cmp	r0, #0
   83866:	f43f ad7b 	beq.w	83360 <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8386a:	686b      	ldr	r3, [r5, #4]
   8386c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83870:	68eb      	ldr	r3, [r5, #12]
   83872:	4798      	blx	r3
   83874:	4601      	mov	r1, r0
   83876:	4620      	mov	r0, r4
   83878:	4b1d      	ldr	r3, [pc, #116]	; (838f0 <udc_process_setup+0x5c8>)
   8387a:	4798      	blx	r3
   8387c:	2800      	cmp	r0, #0
   8387e:	f43f ad6f 	beq.w	83360 <udc_process_setup+0x38>
	return udi_api->setup();
   83882:	68ab      	ldr	r3, [r5, #8]
   83884:	4798      	blx	r3
		if (udc_req_iface()) {
   83886:	4603      	mov	r3, r0
   83888:	2800      	cmp	r0, #0
   8388a:	f47f ad71 	bne.w	83370 <udc_process_setup+0x48>
   8388e:	e567      	b.n	83360 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   83890:	4b18      	ldr	r3, [pc, #96]	; (838f4 <udc_process_setup+0x5cc>)
   83892:	781b      	ldrb	r3, [r3, #0]
   83894:	b323      	cbz	r3, 838e0 <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83896:	4b18      	ldr	r3, [pc, #96]	; (838f8 <udc_process_setup+0x5d0>)
   83898:	681a      	ldr	r2, [r3, #0]
   8389a:	6813      	ldr	r3, [r2, #0]
   8389c:	791b      	ldrb	r3, [r3, #4]
   8389e:	b30b      	cbz	r3, 838e4 <udc_process_setup+0x5bc>
   838a0:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   838a2:	4e13      	ldr	r6, [pc, #76]	; (838f0 <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   838a4:	4f14      	ldr	r7, [pc, #80]	; (838f8 <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   838a6:	b2ec      	uxtb	r4, r5
   838a8:	6853      	ldr	r3, [r2, #4]
   838aa:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   838ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
   838b2:	4798      	blx	r3
   838b4:	4601      	mov	r1, r0
   838b6:	4620      	mov	r0, r4
   838b8:	47b0      	blx	r6
   838ba:	4603      	mov	r3, r0
   838bc:	2800      	cmp	r0, #0
   838be:	f43f ad57 	beq.w	83370 <udc_process_setup+0x48>
		if (udi_api->setup()) {
   838c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   838c6:	4798      	blx	r3
   838c8:	4603      	mov	r3, r0
   838ca:	2800      	cmp	r0, #0
   838cc:	f47f ad50 	bne.w	83370 <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   838d0:	683a      	ldr	r2, [r7, #0]
   838d2:	3501      	adds	r5, #1
   838d4:	6811      	ldr	r1, [r2, #0]
   838d6:	7908      	ldrb	r0, [r1, #4]
   838d8:	b2e9      	uxtb	r1, r5
   838da:	4288      	cmp	r0, r1
   838dc:	d8e3      	bhi.n	838a6 <udc_process_setup+0x57e>
   838de:	e547      	b.n	83370 <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   838e0:	2300      	movs	r3, #0
   838e2:	e545      	b.n	83370 <udc_process_setup+0x48>
	return false;
   838e4:	2300      	movs	r3, #0
   838e6:	e543      	b.n	83370 <udc_process_setup+0x48>
			return false; // Error from USB host
   838e8:	2300      	movs	r3, #0
   838ea:	e541      	b.n	83370 <udc_process_setup+0x48>
	return false;
   838ec:	2300      	movs	r3, #0
   838ee:	e53f      	b.n	83370 <udc_process_setup+0x48>
   838f0:	00083151 	.word	0x00083151
   838f4:	20002079 	.word	0x20002079
   838f8:	2000207c 	.word	0x2000207c

000838fc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   838fc:	4b0b      	ldr	r3, [pc, #44]	; (8392c <cpu_irq_enter_critical+0x30>)
   838fe:	681b      	ldr	r3, [r3, #0]
   83900:	b95b      	cbnz	r3, 8391a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83902:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   83906:	b96b      	cbnz	r3, 83924 <cpu_irq_enter_critical+0x28>
  __ASM volatile ("cpsid i");
   83908:	b672      	cpsid	i
   8390a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   8390e:	4b08      	ldr	r3, [pc, #32]	; (83930 <cpu_irq_enter_critical+0x34>)
   83910:	2200      	movs	r2, #0
   83912:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   83914:	4b07      	ldr	r3, [pc, #28]	; (83934 <cpu_irq_enter_critical+0x38>)
   83916:	2201      	movs	r2, #1
   83918:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
   8391a:	4a04      	ldr	r2, [pc, #16]	; (8392c <cpu_irq_enter_critical+0x30>)
   8391c:	6813      	ldr	r3, [r2, #0]
   8391e:	3301      	adds	r3, #1
   83920:	6013      	str	r3, [r2, #0]
}
   83922:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
   83924:	4b03      	ldr	r3, [pc, #12]	; (83934 <cpu_irq_enter_critical+0x38>)
   83926:	2200      	movs	r2, #0
   83928:	701a      	strb	r2, [r3, #0]
   8392a:	e7f6      	b.n	8391a <cpu_irq_enter_critical+0x1e>
   8392c:	20002084 	.word	0x20002084
   83930:	20000982 	.word	0x20000982
   83934:	20002088 	.word	0x20002088

00083938 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   83938:	4b07      	ldr	r3, [pc, #28]	; (83958 <cpu_irq_leave_critical+0x20>)
   8393a:	681a      	ldr	r2, [r3, #0]
   8393c:	3a01      	subs	r2, #1
   8393e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   83940:	681b      	ldr	r3, [r3, #0]
   83942:	b943      	cbnz	r3, 83956 <cpu_irq_leave_critical+0x1e>
   83944:	4b05      	ldr	r3, [pc, #20]	; (8395c <cpu_irq_leave_critical+0x24>)
   83946:	781b      	ldrb	r3, [r3, #0]
   83948:	b12b      	cbz	r3, 83956 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   8394a:	4b05      	ldr	r3, [pc, #20]	; (83960 <cpu_irq_leave_critical+0x28>)
   8394c:	2201      	movs	r2, #1
   8394e:	701a      	strb	r2, [r3, #0]
   83950:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83954:	b662      	cpsie	i
	}
}
   83956:	4770      	bx	lr
   83958:	20002084 	.word	0x20002084
   8395c:	20002088 	.word	0x20002088
   83960:	20000982 	.word	0x20000982

00083964 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   83964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   83968:	b980      	cbnz	r0, 8398c <_read+0x28>
   8396a:	460c      	mov	r4, r1
   8396c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8396e:	2a00      	cmp	r2, #0
   83970:	dd0f      	ble.n	83992 <_read+0x2e>
   83972:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   83974:	4e08      	ldr	r6, [pc, #32]	; (83998 <_read+0x34>)
   83976:	4d09      	ldr	r5, [pc, #36]	; (8399c <_read+0x38>)
   83978:	6830      	ldr	r0, [r6, #0]
   8397a:	682b      	ldr	r3, [r5, #0]
   8397c:	4621      	mov	r1, r4
   8397e:	4798      	blx	r3
		ptr++;
   83980:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   83982:	42bc      	cmp	r4, r7
   83984:	d1f8      	bne.n	83978 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   83986:	4640      	mov	r0, r8
   83988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8398c:	f04f 38ff 	mov.w	r8, #4294967295
   83990:	e7f9      	b.n	83986 <_read+0x22>
	int nChars = 0;
   83992:	4680      	mov	r8, r0
   83994:	e7f7      	b.n	83986 <_read+0x22>
   83996:	bf00      	nop
   83998:	20002698 	.word	0x20002698
   8399c:	20002690 	.word	0x20002690

000839a0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   839a0:	3801      	subs	r0, #1
   839a2:	2802      	cmp	r0, #2
   839a4:	d81a      	bhi.n	839dc <_write+0x3c>
{
   839a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   839aa:	460e      	mov	r6, r1
   839ac:	4617      	mov	r7, r2
		return -1;
	}

	for (; len != 0; --len) {
   839ae:	b1c2      	cbz	r2, 839e2 <_write+0x42>
   839b0:	1e4d      	subs	r5, r1, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   839b2:	f8df 903c 	ldr.w	r9, [pc, #60]	; 839f0 <_write+0x50>
   839b6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 839f4 <_write+0x54>
   839ba:	f8d9 0000 	ldr.w	r0, [r9]
   839be:	462c      	mov	r4, r5
   839c0:	f8d8 3000 	ldr.w	r3, [r8]
   839c4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   839c8:	4798      	blx	r3
   839ca:	2800      	cmp	r0, #0
   839cc:	db0b      	blt.n	839e6 <_write+0x46>
			return -1;
		}
		++nChars;
   839ce:	3402      	adds	r4, #2
   839d0:	1ba0      	subs	r0, r4, r6
	for (; len != 0; --len) {
   839d2:	43eb      	mvns	r3, r5
   839d4:	443b      	add	r3, r7
   839d6:	42f3      	cmn	r3, r6
   839d8:	d1ef      	bne.n	839ba <_write+0x1a>
   839da:	e006      	b.n	839ea <_write+0x4a>
		return -1;
   839dc:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return nChars;
}
   839e0:	4770      	bx	lr
	int nChars = 0;
   839e2:	4610      	mov	r0, r2
   839e4:	e001      	b.n	839ea <_write+0x4a>
			return -1;
   839e6:	f04f 30ff 	mov.w	r0, #4294967295
}
   839ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   839ee:	bf00      	nop
   839f0:	20002698 	.word	0x20002698
   839f4:	20002694 	.word	0x20002694

000839f8 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   839f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   839fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   839fe:	2006      	movs	r0, #6
   83a00:	4c17      	ldr	r4, [pc, #92]	; (83a60 <iopins_normal+0x68>)
   83a02:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83a04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83a08:	2007      	movs	r0, #7
   83a0a:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   83a0c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83a10:	201d      	movs	r0, #29
   83a12:	47a0      	blx	r4
	board_power(0);
   83a14:	201d      	movs	r0, #29
   83a16:	4b13      	ldr	r3, [pc, #76]	; (83a64 <iopins_normal+0x6c>)
   83a18:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   83a1a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83a1e:	2008      	movs	r0, #8
   83a20:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   83a22:	2008      	movs	r0, #8
   83a24:	4e10      	ldr	r6, [pc, #64]	; (83a68 <iopins_normal+0x70>)
   83a26:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   83a28:	4f10      	ldr	r7, [pc, #64]	; (83a6c <iopins_normal+0x74>)
   83a2a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   83a2e:	21ff      	movs	r1, #255	; 0xff
   83a30:	4638      	mov	r0, r7
   83a32:	4d0f      	ldr	r5, [pc, #60]	; (83a70 <iopins_normal+0x78>)
   83a34:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   83a36:	21ff      	movs	r1, #255	; 0xff
   83a38:	4638      	mov	r0, r7
   83a3a:	4b0e      	ldr	r3, [pc, #56]	; (83a74 <iopins_normal+0x7c>)
   83a3c:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   83a3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83a42:	2035      	movs	r0, #53	; 0x35
   83a44:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   83a46:	2035      	movs	r0, #53	; 0x35
   83a48:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83a4e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   83a52:	4809      	ldr	r0, [pc, #36]	; (83a78 <iopins_normal+0x80>)
   83a54:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   83a56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83a5a:	201b      	movs	r0, #27
   83a5c:	47a0      	blx	r4
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   83a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a60:	00083c15 	.word	0x00083c15
   83a64:	00083bfb 	.word	0x00083bfb
   83a68:	00083be1 	.word	0x00083be1
   83a6c:	400e0e00 	.word	0x400e0e00
   83a70:	00083ce5 	.word	0x00083ce5
   83a74:	00083bb3 	.word	0x00083bb3
   83a78:	400e0c00 	.word	0x400e0c00

00083a7c <board_init>:

void board_init(void)
{
   83a7c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83a7e:	4b06      	ldr	r3, [pc, #24]	; (83a98 <board_init+0x1c>)
   83a80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83a84:	605a      	str	r2, [r3, #4]
   83a86:	200a      	movs	r0, #10
   83a88:	4c04      	ldr	r4, [pc, #16]	; (83a9c <board_init+0x20>)
   83a8a:	47a0      	blx	r4
   83a8c:	200b      	movs	r0, #11
   83a8e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   83a90:	4b03      	ldr	r3, [pc, #12]	; (83aa0 <board_init+0x24>)
   83a92:	4798      	blx	r3

}
   83a94:	bd10      	pop	{r4, pc}
   83a96:	bf00      	nop
   83a98:	400e1250 	.word	0x400e1250
   83a9c:	00083f51 	.word	0x00083f51
   83aa0:	000839f9 	.word	0x000839f9

00083aa4 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   83aa4:	b510      	push	{r4, lr}
   83aa6:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83aa8:	2806      	cmp	r0, #6
   83aaa:	d002      	beq.n	83ab2 <LED_Off+0xe>
   83aac:	2c07      	cmp	r4, #7
   83aae:	d004      	beq.n	83aba <LED_Off+0x16>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   83ab0:	bd10      	pop	{r4, pc}
				gpio_set_pin_low(led_gpio);
   83ab2:	2006      	movs	r0, #6
   83ab4:	4b03      	ldr	r3, [pc, #12]	; (83ac4 <LED_Off+0x20>)
   83ab6:	4798      	blx	r3
   83ab8:	e7f8      	b.n	83aac <LED_Off+0x8>
   83aba:	2007      	movs	r0, #7
   83abc:	4b01      	ldr	r3, [pc, #4]	; (83ac4 <LED_Off+0x20>)
   83abe:	4798      	blx	r3
}
   83ac0:	e7f6      	b.n	83ab0 <LED_Off+0xc>
   83ac2:	bf00      	nop
   83ac4:	00083bfb 	.word	0x00083bfb

00083ac8 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   83ac8:	b510      	push	{r4, lr}
   83aca:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83acc:	2806      	cmp	r0, #6
   83ace:	d002      	beq.n	83ad6 <LED_On+0xe>
   83ad0:	2c07      	cmp	r4, #7
   83ad2:	d004      	beq.n	83ade <LED_On+0x16>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   83ad4:	bd10      	pop	{r4, pc}
				gpio_set_pin_high(led_gpio);
   83ad6:	2006      	movs	r0, #6
   83ad8:	4b03      	ldr	r3, [pc, #12]	; (83ae8 <LED_On+0x20>)
   83ada:	4798      	blx	r3
   83adc:	e7f8      	b.n	83ad0 <LED_On+0x8>
   83ade:	2007      	movs	r0, #7
   83ae0:	4b01      	ldr	r3, [pc, #4]	; (83ae8 <LED_On+0x20>)
   83ae2:	4798      	blx	r3
}
   83ae4:	e7f6      	b.n	83ad4 <LED_On+0xc>
   83ae6:	bf00      	nop
   83ae8:	00083be1 	.word	0x00083be1

00083aec <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83aec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83af0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83af4:	670a      	str	r2, [r1, #112]	; 0x70
}
   83af6:	4770      	bx	lr

00083af8 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83af8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83afc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83b00:	674a      	str	r2, [r1, #116]	; 0x74
}
   83b02:	4770      	bx	lr

00083b04 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83b04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83b08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83b0c:	678a      	str	r2, [r1, #120]	; 0x78
}
   83b0e:	4770      	bx	lr

00083b10 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83b10:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83b14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83b18:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   83b1c:	4770      	bx	lr

00083b1e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83b1e:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83b20:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83b24:	d015      	beq.n	83b52 <pio_set_peripheral+0x34>
   83b26:	d80a      	bhi.n	83b3e <pio_set_peripheral+0x20>
   83b28:	b191      	cbz	r1, 83b50 <pio_set_peripheral+0x32>
   83b2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83b2e:	d10e      	bne.n	83b4e <pio_set_peripheral+0x30>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83b30:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83b32:	6f03      	ldr	r3, [r0, #112]	; 0x70
   83b34:	400b      	ands	r3, r1
   83b36:	ea23 0302 	bic.w	r3, r3, r2
   83b3a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83b3c:	e007      	b.n	83b4e <pio_set_peripheral+0x30>
	switch (ul_type) {
   83b3e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83b42:	d005      	beq.n	83b50 <pio_set_peripheral+0x32>
   83b44:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
   83b48:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   83b4c:	d000      	beq.n	83b50 <pio_set_peripheral+0x32>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83b4e:	6042      	str	r2, [r0, #4]
}
   83b50:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   83b52:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83b54:	4313      	orrs	r3, r2
   83b56:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83b58:	e7f9      	b.n	83b4e <pio_set_peripheral+0x30>

00083b5a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83b5a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83b5c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   83b60:	bf14      	ite	ne
   83b62:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83b64:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83b66:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83b6a:	bf14      	ite	ne
   83b6c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   83b6e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83b70:	f012 0f02 	tst.w	r2, #2
   83b74:	d004      	beq.n	83b80 <pio_set_input+0x26>
		p_pio->PIO_SCIFSR = ul_mask;
   83b76:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   83b7a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   83b7c:	6001      	str	r1, [r0, #0]
}
   83b7e:	4770      	bx	lr
		if (ul_attribute & PIO_DEBOUNCE) {
   83b80:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   83b84:	bf18      	it	ne
   83b86:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
   83b8a:	e7f6      	b.n	83b7a <pio_set_input+0x20>

00083b8c <pio_set_output>:
{
   83b8c:	b410      	push	{r4}
   83b8e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   83b90:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83b92:	b144      	cbz	r4, 83ba6 <pio_set_output+0x1a>
		p_pio->PIO_PUER = ul_mask;
   83b94:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
   83b96:	b143      	cbz	r3, 83baa <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   83b98:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   83b9a:	b142      	cbz	r2, 83bae <pio_set_output+0x22>
		p_pio->PIO_SODR = ul_mask;
   83b9c:	6301      	str	r1, [r0, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   83b9e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   83ba0:	6001      	str	r1, [r0, #0]
}
   83ba2:	bc10      	pop	{r4}
   83ba4:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
   83ba6:	6601      	str	r1, [r0, #96]	; 0x60
   83ba8:	e7f5      	b.n	83b96 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   83baa:	6541      	str	r1, [r0, #84]	; 0x54
   83bac:	e7f5      	b.n	83b9a <pio_set_output+0xe>
		p_pio->PIO_CODR = ul_mask;
   83bae:	6341      	str	r1, [r0, #52]	; 0x34
   83bb0:	e7f5      	b.n	83b9e <pio_set_output+0x12>

00083bb2 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   83bb2:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
   83bb6:	4770      	bx	lr

00083bb8 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   83bb8:	6381      	str	r1, [r0, #56]	; 0x38
}
   83bba:	4770      	bx	lr

00083bbc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83bbc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83bbe:	4770      	bx	lr

00083bc0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83bc0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83bc2:	4770      	bx	lr

00083bc4 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83bc4:	0943      	lsrs	r3, r0, #5
   83bc6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83bca:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83bce:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83bd2:	f000 001f 	and.w	r0, r0, #31
   83bd6:	fa23 f000 	lsr.w	r0, r3, r0
}
   83bda:	f000 0001 	and.w	r0, r0, #1
   83bde:	4770      	bx	lr

00083be0 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83be0:	0943      	lsrs	r3, r0, #5
   83be2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83be6:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83bea:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83bec:	f000 001f 	and.w	r0, r0, #31
   83bf0:	2201      	movs	r2, #1
   83bf2:	fa02 f000 	lsl.w	r0, r2, r0
   83bf6:	6318      	str	r0, [r3, #48]	; 0x30
}
   83bf8:	4770      	bx	lr

00083bfa <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83bfa:	0943      	lsrs	r3, r0, #5
   83bfc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83c00:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83c04:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83c06:	f000 001f 	and.w	r0, r0, #31
   83c0a:	2201      	movs	r2, #1
   83c0c:	fa02 f000 	lsl.w	r0, r2, r0
   83c10:	6358      	str	r0, [r3, #52]	; 0x34
}
   83c12:	4770      	bx	lr

00083c14 <pio_configure_pin>:
{
   83c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c16:	b083      	sub	sp, #12
   83c18:	460e      	mov	r6, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83c1a:	0943      	lsrs	r3, r0, #5
   83c1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83c20:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83c24:	025d      	lsls	r5, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   83c26:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   83c2a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83c2e:	d032      	beq.n	83c96 <pio_configure_pin+0x82>
   83c30:	d818      	bhi.n	83c64 <pio_configure_pin+0x50>
   83c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83c36:	d01d      	beq.n	83c74 <pio_configure_pin+0x60>
   83c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83c3c:	bf18      	it	ne
   83c3e:	2000      	movne	r0, #0
   83c40:	d116      	bne.n	83c70 <pio_configure_pin+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83c42:	f000 001f 	and.w	r0, r0, #31
   83c46:	2401      	movs	r4, #1
   83c48:	4084      	lsls	r4, r0
   83c4a:	4622      	mov	r2, r4
   83c4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83c50:	4628      	mov	r0, r5
   83c52:	4b21      	ldr	r3, [pc, #132]	; (83cd8 <pio_configure_pin+0xc4>)
   83c54:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83c56:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83c5a:	bf12      	itee	ne
   83c5c:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83c5e:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83c60:	2001      	moveq	r0, #1
   83c62:	e005      	b.n	83c70 <pio_configure_pin+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83c64:	f001 43e0 	and.w	r3, r1, #1879048192	; 0x70000000
   83c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83c6c:	d01e      	beq.n	83cac <pio_configure_pin+0x98>
   83c6e:	2000      	movs	r0, #0
}
   83c70:	b003      	add	sp, #12
   83c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83c74:	f000 001f 	and.w	r0, r0, #31
   83c78:	2401      	movs	r4, #1
   83c7a:	4084      	lsls	r4, r0
   83c7c:	4622      	mov	r2, r4
   83c7e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83c82:	4628      	mov	r0, r5
   83c84:	4b14      	ldr	r3, [pc, #80]	; (83cd8 <pio_configure_pin+0xc4>)
   83c86:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83c88:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83c8c:	bf12      	itee	ne
   83c8e:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83c90:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83c92:	2001      	moveq	r0, #1
   83c94:	e7ec      	b.n	83c70 <pio_configure_pin+0x5c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83c96:	f000 011f 	and.w	r1, r0, #31
   83c9a:	2401      	movs	r4, #1
   83c9c:	4632      	mov	r2, r6
   83c9e:	fa04 f101 	lsl.w	r1, r4, r1
   83ca2:	4628      	mov	r0, r5
   83ca4:	4b0d      	ldr	r3, [pc, #52]	; (83cdc <pio_configure_pin+0xc8>)
   83ca6:	4798      	blx	r3
	return 1;
   83ca8:	4620      	mov	r0, r4
		break;
   83caa:	e7e1      	b.n	83c70 <pio_configure_pin+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83cac:	f001 5260 	and.w	r2, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83cb0:	f000 011f 	and.w	r1, r0, #31
   83cb4:	2701      	movs	r7, #1
   83cb6:	ea06 0307 	and.w	r3, r6, r7
   83cba:	9300      	str	r3, [sp, #0]
   83cbc:	f3c6 0380 	ubfx	r3, r6, #2, #1
   83cc0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83cc4:	bf14      	ite	ne
   83cc6:	2200      	movne	r2, #0
   83cc8:	2201      	moveq	r2, #1
   83cca:	fa07 f101 	lsl.w	r1, r7, r1
   83cce:	4628      	mov	r0, r5
   83cd0:	4c03      	ldr	r4, [pc, #12]	; (83ce0 <pio_configure_pin+0xcc>)
   83cd2:	47a0      	blx	r4
	return 1;
   83cd4:	4638      	mov	r0, r7
		break;
   83cd6:	e7cb      	b.n	83c70 <pio_configure_pin+0x5c>
   83cd8:	00083b1f 	.word	0x00083b1f
   83cdc:	00083b5b 	.word	0x00083b5b
   83ce0:	00083b8d 	.word	0x00083b8d

00083ce4 <pio_configure_pin_group>:
{
   83ce4:	b570      	push	{r4, r5, r6, lr}
   83ce6:	b082      	sub	sp, #8
   83ce8:	4605      	mov	r5, r0
   83cea:	460e      	mov	r6, r1
   83cec:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   83cee:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   83cf2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83cf6:	d029      	beq.n	83d4c <pio_configure_pin_group+0x68>
   83cf8:	d814      	bhi.n	83d24 <pio_configure_pin_group+0x40>
   83cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83cfe:	d019      	beq.n	83d34 <pio_configure_pin_group+0x50>
   83d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83d04:	bf18      	it	ne
   83d06:	2000      	movne	r0, #0
   83d08:	d112      	bne.n	83d30 <pio_configure_pin_group+0x4c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83d0a:	460a      	mov	r2, r1
   83d0c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83d10:	4628      	mov	r0, r5
   83d12:	4b18      	ldr	r3, [pc, #96]	; (83d74 <pio_configure_pin_group+0x90>)
   83d14:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83d16:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83d1a:	bf12      	itee	ne
   83d1c:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83d1e:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83d20:	2001      	moveq	r0, #1
   83d22:	e005      	b.n	83d30 <pio_configure_pin_group+0x4c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83d24:	f002 43e0 	and.w	r3, r2, #1879048192	; 0x70000000
   83d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83d2c:	d012      	beq.n	83d54 <pio_configure_pin_group+0x70>
   83d2e:	2000      	movs	r0, #0
}
   83d30:	b002      	add	sp, #8
   83d32:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83d34:	460a      	mov	r2, r1
   83d36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83d3a:	4b0e      	ldr	r3, [pc, #56]	; (83d74 <pio_configure_pin_group+0x90>)
   83d3c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83d3e:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83d42:	bf12      	itee	ne
   83d44:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83d46:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83d48:	2001      	moveq	r0, #1
   83d4a:	e7f1      	b.n	83d30 <pio_configure_pin_group+0x4c>
		pio_set_input(p_pio, ul_mask, ul_flags);
   83d4c:	4b0a      	ldr	r3, [pc, #40]	; (83d78 <pio_configure_pin_group+0x94>)
   83d4e:	4798      	blx	r3
	return 1;
   83d50:	2001      	movs	r0, #1
		break;
   83d52:	e7ed      	b.n	83d30 <pio_configure_pin_group+0x4c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83d54:	f002 5260 	and.w	r2, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83d58:	f004 0301 	and.w	r3, r4, #1
   83d5c:	9300      	str	r3, [sp, #0]
   83d5e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   83d62:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83d66:	bf14      	ite	ne
   83d68:	2200      	movne	r2, #0
   83d6a:	2201      	moveq	r2, #1
   83d6c:	4c03      	ldr	r4, [pc, #12]	; (83d7c <pio_configure_pin_group+0x98>)
   83d6e:	47a0      	blx	r4
	return 1;
   83d70:	2001      	movs	r0, #1
		break;
   83d72:	e7dd      	b.n	83d30 <pio_configure_pin_group+0x4c>
   83d74:	00083b1f 	.word	0x00083b1f
   83d78:	00083b5b 	.word	0x00083b5b
   83d7c:	00083b8d 	.word	0x00083b8d

00083d80 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d84:	4604      	mov	r4, r0
   83d86:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83d88:	4b0e      	ldr	r3, [pc, #56]	; (83dc4 <pio_handler_process+0x44>)
   83d8a:	4798      	blx	r3
   83d8c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83d8e:	4620      	mov	r0, r4
   83d90:	4b0d      	ldr	r3, [pc, #52]	; (83dc8 <pio_handler_process+0x48>)
   83d92:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   83d94:	4005      	ands	r5, r0
   83d96:	d013      	beq.n	83dc0 <pio_handler_process+0x40>
   83d98:	4c0c      	ldr	r4, [pc, #48]	; (83dcc <pio_handler_process+0x4c>)
   83d9a:	f104 0860 	add.w	r8, r4, #96	; 0x60
   83d9e:	e003      	b.n	83da8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   83da0:	4544      	cmp	r4, r8
   83da2:	d00d      	beq.n	83dc0 <pio_handler_process+0x40>
		while (status != 0) {
   83da4:	3410      	adds	r4, #16
   83da6:	b15d      	cbz	r5, 83dc0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   83da8:	6820      	ldr	r0, [r4, #0]
   83daa:	42b0      	cmp	r0, r6
   83dac:	d1f8      	bne.n	83da0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83dae:	6861      	ldr	r1, [r4, #4]
   83db0:	4229      	tst	r1, r5
   83db2:	d0f5      	beq.n	83da0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83db4:	68e3      	ldr	r3, [r4, #12]
   83db6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   83db8:	6863      	ldr	r3, [r4, #4]
   83dba:	ea25 0503 	bic.w	r5, r5, r3
   83dbe:	e7ef      	b.n	83da0 <pio_handler_process+0x20>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83dc4:	00083bbd 	.word	0x00083bbd
   83dc8:	00083bc1 	.word	0x00083bc1
   83dcc:	2000208c 	.word	0x2000208c

00083dd0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83dd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   83dd2:	210a      	movs	r1, #10
   83dd4:	4801      	ldr	r0, [pc, #4]	; (83ddc <PIOA_Handler+0xc>)
   83dd6:	4b02      	ldr	r3, [pc, #8]	; (83de0 <PIOA_Handler+0x10>)
   83dd8:	4798      	blx	r3
}
   83dda:	bd08      	pop	{r3, pc}
   83ddc:	400e0c00 	.word	0x400e0c00
   83de0:	00083d81 	.word	0x00083d81

00083de4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83de4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   83de6:	210b      	movs	r1, #11
   83de8:	4801      	ldr	r0, [pc, #4]	; (83df0 <PIOB_Handler+0xc>)
   83dea:	4b02      	ldr	r3, [pc, #8]	; (83df4 <PIOB_Handler+0x10>)
   83dec:	4798      	blx	r3
}
   83dee:	bd08      	pop	{r3, pc}
   83df0:	400e0e00 	.word	0x400e0e00
   83df4:	00083d81 	.word	0x00083d81

00083df8 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83df8:	4a16      	ldr	r2, [pc, #88]	; (83e54 <pmc_switch_mck_to_mainck+0x5c>)
   83dfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83dfc:	f023 0303 	bic.w	r3, r3, #3
   83e00:	f043 0301 	orr.w	r3, r3, #1
   83e04:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83e06:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83e08:	f013 0f08 	tst.w	r3, #8
   83e0c:	d10a      	bne.n	83e24 <pmc_switch_mck_to_mainck+0x2c>
   83e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e12:	4910      	ldr	r1, [pc, #64]	; (83e54 <pmc_switch_mck_to_mainck+0x5c>)
   83e14:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83e16:	f012 0f08 	tst.w	r2, #8
   83e1a:	d103      	bne.n	83e24 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83e1c:	3b01      	subs	r3, #1
   83e1e:	d1f9      	bne.n	83e14 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   83e20:	2001      	movs	r0, #1
   83e22:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83e24:	4a0b      	ldr	r2, [pc, #44]	; (83e54 <pmc_switch_mck_to_mainck+0x5c>)
   83e26:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83e2c:	4303      	orrs	r3, r0
   83e2e:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83e30:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83e32:	f010 0008 	ands.w	r0, r0, #8
   83e36:	d10a      	bne.n	83e4e <pmc_switch_mck_to_mainck+0x56>
   83e38:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e3c:	4905      	ldr	r1, [pc, #20]	; (83e54 <pmc_switch_mck_to_mainck+0x5c>)
   83e3e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83e40:	f012 0f08 	tst.w	r2, #8
   83e44:	d105      	bne.n	83e52 <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83e46:	3b01      	subs	r3, #1
   83e48:	d1f9      	bne.n	83e3e <pmc_switch_mck_to_mainck+0x46>
			return 1;
   83e4a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83e4c:	4770      	bx	lr
	return 0;
   83e4e:	2000      	movs	r0, #0
   83e50:	4770      	bx	lr
   83e52:	4770      	bx	lr
   83e54:	400e0400 	.word	0x400e0400

00083e58 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83e58:	4a16      	ldr	r2, [pc, #88]	; (83eb4 <pmc_switch_mck_to_pllack+0x5c>)
   83e5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83e60:	4303      	orrs	r3, r0
   83e62:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83e64:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83e66:	f013 0f08 	tst.w	r3, #8
   83e6a:	d10a      	bne.n	83e82 <pmc_switch_mck_to_pllack+0x2a>
   83e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e70:	4910      	ldr	r1, [pc, #64]	; (83eb4 <pmc_switch_mck_to_pllack+0x5c>)
   83e72:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83e74:	f012 0f08 	tst.w	r2, #8
   83e78:	d103      	bne.n	83e82 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83e7a:	3b01      	subs	r3, #1
   83e7c:	d1f9      	bne.n	83e72 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   83e7e:	2001      	movs	r0, #1
   83e80:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83e82:	4a0c      	ldr	r2, [pc, #48]	; (83eb4 <pmc_switch_mck_to_pllack+0x5c>)
   83e84:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83e86:	f023 0303 	bic.w	r3, r3, #3
   83e8a:	f043 0302 	orr.w	r3, r3, #2
   83e8e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83e90:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83e92:	f010 0008 	ands.w	r0, r0, #8
   83e96:	d10a      	bne.n	83eae <pmc_switch_mck_to_pllack+0x56>
   83e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e9c:	4905      	ldr	r1, [pc, #20]	; (83eb4 <pmc_switch_mck_to_pllack+0x5c>)
   83e9e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83ea0:	f012 0f08 	tst.w	r2, #8
   83ea4:	d105      	bne.n	83eb2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83ea6:	3b01      	subs	r3, #1
   83ea8:	d1f9      	bne.n	83e9e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   83eaa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83eac:	4770      	bx	lr
	return 0;
   83eae:	2000      	movs	r0, #0
   83eb0:	4770      	bx	lr
   83eb2:	4770      	bx	lr
   83eb4:	400e0400 	.word	0x400e0400

00083eb8 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   83eb8:	4908      	ldr	r1, [pc, #32]	; (83edc <pmc_osc_enable_main_xtal+0x24>)
   83eba:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83ebc:	0203      	lsls	r3, r0, #8
   83ebe:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83ec0:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83ec4:	4313      	orrs	r3, r2
   83ec6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83eca:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   83ece:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83ed0:	460a      	mov	r2, r1
   83ed2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83ed4:	f013 0f01 	tst.w	r3, #1
   83ed8:	d0fb      	beq.n	83ed2 <pmc_osc_enable_main_xtal+0x1a>
}
   83eda:	4770      	bx	lr
   83edc:	400e0400 	.word	0x400e0400

00083ee0 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83ee0:	4b02      	ldr	r3, [pc, #8]	; (83eec <pmc_osc_is_ready_main_xtal+0xc>)
   83ee2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ee4:	f000 0001 	and.w	r0, r0, #1
   83ee8:	4770      	bx	lr
   83eea:	bf00      	nop
   83eec:	400e0400 	.word	0x400e0400

00083ef0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83ef0:	4b02      	ldr	r3, [pc, #8]	; (83efc <pmc_osc_is_ready_mainck+0xc>)
   83ef2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ef4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83ef8:	4770      	bx	lr
   83efa:	bf00      	nop
   83efc:	400e0400 	.word	0x400e0400

00083f00 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   83f00:	4b06      	ldr	r3, [pc, #24]	; (83f1c <pmc_mainck_osc_select+0x1c>)
   83f02:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   83f04:	b130      	cbz	r0, 83f14 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   83f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83f0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83f0e:	4a03      	ldr	r2, [pc, #12]	; (83f1c <pmc_mainck_osc_select+0x1c>)
   83f10:	6213      	str	r3, [r2, #32]
}
   83f12:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   83f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   83f18:	e7f7      	b.n	83f0a <pmc_mainck_osc_select+0xa>
   83f1a:	bf00      	nop
   83f1c:	400e0400 	.word	0x400e0400

00083f20 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83f20:	4b02      	ldr	r3, [pc, #8]	; (83f2c <pmc_disable_pllack+0xc>)
   83f22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83f26:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83f28:	4770      	bx	lr
   83f2a:	bf00      	nop
   83f2c:	400e0400 	.word	0x400e0400

00083f30 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83f30:	4b02      	ldr	r3, [pc, #8]	; (83f3c <pmc_is_locked_pllack+0xc>)
   83f32:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83f34:	f000 0002 	and.w	r0, r0, #2
   83f38:	4770      	bx	lr
   83f3a:	bf00      	nop
   83f3c:	400e0400 	.word	0x400e0400

00083f40 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83f40:	4b02      	ldr	r3, [pc, #8]	; (83f4c <pmc_is_locked_upll+0xc>)
   83f42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83f44:	f000 0040 	and.w	r0, r0, #64	; 0x40
   83f48:	4770      	bx	lr
   83f4a:	bf00      	nop
   83f4c:	400e0400 	.word	0x400e0400

00083f50 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83f50:	281d      	cmp	r0, #29
   83f52:	d80c      	bhi.n	83f6e <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83f54:	4b08      	ldr	r3, [pc, #32]	; (83f78 <pmc_enable_periph_clk+0x28>)
   83f56:	699a      	ldr	r2, [r3, #24]
   83f58:	2301      	movs	r3, #1
   83f5a:	4083      	lsls	r3, r0
   83f5c:	4393      	bics	r3, r2
   83f5e:	d008      	beq.n	83f72 <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
   83f60:	2301      	movs	r3, #1
   83f62:	fa03 f000 	lsl.w	r0, r3, r0
   83f66:	4b04      	ldr	r3, [pc, #16]	; (83f78 <pmc_enable_periph_clk+0x28>)
   83f68:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83f6a:	2000      	movs	r0, #0
   83f6c:	4770      	bx	lr
		return 1;
   83f6e:	2001      	movs	r0, #1
   83f70:	4770      	bx	lr
	return 0;
   83f72:	2000      	movs	r0, #0
}
   83f74:	4770      	bx	lr
   83f76:	bf00      	nop
   83f78:	400e0400 	.word	0x400e0400

00083f7c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83f7c:	281d      	cmp	r0, #29
   83f7e:	d80e      	bhi.n	83f9e <pmc_disable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   83f80:	4b08      	ldr	r3, [pc, #32]	; (83fa4 <pmc_disable_periph_clk+0x28>)
   83f82:	699a      	ldr	r2, [r3, #24]
   83f84:	2301      	movs	r3, #1
   83f86:	4083      	lsls	r3, r0
   83f88:	4393      	bics	r3, r2
   83f8a:	d001      	beq.n	83f90 <pmc_disable_periph_clk+0x14>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83f8c:	2000      	movs	r0, #0
}
   83f8e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   83f90:	2301      	movs	r3, #1
   83f92:	fa03 f000 	lsl.w	r0, r3, r0
   83f96:	4b03      	ldr	r3, [pc, #12]	; (83fa4 <pmc_disable_periph_clk+0x28>)
   83f98:	6158      	str	r0, [r3, #20]
	return 0;
   83f9a:	2000      	movs	r0, #0
   83f9c:	4770      	bx	lr
		return 1;
   83f9e:	2001      	movs	r0, #1
   83fa0:	4770      	bx	lr
   83fa2:	bf00      	nop
   83fa4:	400e0400 	.word	0x400e0400

00083fa8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
   83fac:	4083      	lsls	r3, r0
   83fae:	4a01      	ldr	r2, [pc, #4]	; (83fb4 <pmc_enable_pck+0xc>)
   83fb0:	6013      	str	r3, [r2, #0]
}
   83fb2:	4770      	bx	lr
   83fb4:	400e0400 	.word	0x400e0400

00083fb8 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   83fb8:	4b03      	ldr	r3, [pc, #12]	; (83fc8 <pmc_set_fast_startup_input+0x10>)
   83fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83fbc:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   83fc0:	4310      	orrs	r0, r2
   83fc2:	6718      	str	r0, [r3, #112]	; 0x70
}
   83fc4:	4770      	bx	lr
   83fc6:	bf00      	nop
   83fc8:	400e0400 	.word	0x400e0400

00083fcc <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83fcc:	4b02      	ldr	r3, [pc, #8]	; (83fd8 <pmc_is_wakeup_clocks_restored+0xc>)
   83fce:	7818      	ldrb	r0, [r3, #0]
}
   83fd0:	f080 0001 	eor.w	r0, r0, #1
   83fd4:	4770      	bx	lr
   83fd6:	bf00      	nop
   83fd8:	200020fc 	.word	0x200020fc

00083fdc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   83fdc:	b508      	push	{r3, lr}
   83fde:	2014      	movs	r0, #20
   83fe0:	4b01      	ldr	r3, [pc, #4]	; (83fe8 <spi_enable_clock+0xc>)
   83fe2:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   83fe4:	bd08      	pop	{r3, pc}
   83fe6:	bf00      	nop
   83fe8:	00083f51 	.word	0x00083f51

00083fec <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   83fec:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   83fee:	2014      	movs	r0, #20
   83ff0:	4b01      	ldr	r3, [pc, #4]	; (83ff8 <spi_disable_clock+0xc>)
   83ff2:	4798      	blx	r3
		}
	#endif
#elif SAM4L
	sysclk_disable_peripheral_clock(p_spi);
#endif
}
   83ff4:	bd08      	pop	{r3, pc}
   83ff6:	bf00      	nop
   83ff8:	00083f7d 	.word	0x00083f7d

00083ffc <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   83ffc:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   83ffe:	f643 2399 	movw	r3, #15001	; 0x3a99
   84002:	6904      	ldr	r4, [r0, #16]
   84004:	f014 0f01 	tst.w	r4, #1
   84008:	d103      	bne.n	84012 <spi_read+0x16>
		if (!timeout--) {
   8400a:	3b01      	subs	r3, #1
   8400c:	d1f9      	bne.n	84002 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   8400e:	2001      	movs	r0, #1
   84010:	e009      	b.n	84026 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   84012:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   84014:	6840      	ldr	r0, [r0, #4]
   84016:	f010 0f02 	tst.w	r0, #2
	if (spi_get_peripheral_select_mode(p_spi)) {
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   8401a:	bf1c      	itt	ne
   8401c:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   84020:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   84022:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   84024:	2000      	movs	r0, #0
}
   84026:	bc10      	pop	{r4}
   84028:	4770      	bx	lr

0008402a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   8402a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   8402c:	f643 2499 	movw	r4, #15001	; 0x3a99
   84030:	6905      	ldr	r5, [r0, #16]
   84032:	f015 0f02 	tst.w	r5, #2
   84036:	d103      	bne.n	84040 <spi_write+0x16>
		if (!timeout--) {
   84038:	3c01      	subs	r4, #1
   8403a:	d1f9      	bne.n	84030 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   8403c:	2001      	movs	r0, #1
   8403e:	e00c      	b.n	8405a <spi_write+0x30>
   84040:	6844      	ldr	r4, [r0, #4]
   84042:	f014 0f02 	tst.w	r4, #2
   84046:	d006      	beq.n	84056 <spi_write+0x2c>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   84048:	0412      	lsls	r2, r2, #16
   8404a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8404e:	4311      	orrs	r1, r2
		if (uc_last) {
   84050:	b10b      	cbz	r3, 84056 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   84052:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   84056:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   84058:	2000      	movs	r0, #0
}
   8405a:	bc30      	pop	{r4, r5}
   8405c:	4770      	bx	lr

0008405e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   8405e:	b132      	cbz	r2, 8406e <spi_set_clock_polarity+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   84060:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84064:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84066:	f043 0301 	orr.w	r3, r3, #1
   8406a:	6303      	str	r3, [r0, #48]	; 0x30
   8406c:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8406e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84072:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84074:	f023 0301 	bic.w	r3, r3, #1
   84078:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   8407a:	4770      	bx	lr

0008407c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   8407c:	b132      	cbz	r2, 8408c <spi_set_clock_phase+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8407e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84082:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84084:	f043 0302 	orr.w	r3, r3, #2
   84088:	6303      	str	r3, [r0, #48]	; 0x30
   8408a:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8408c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84090:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84092:	f023 0302 	bic.w	r3, r3, #2
   84096:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   84098:	4770      	bx	lr

0008409a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   8409a:	1e43      	subs	r3, r0, #1
   8409c:	440b      	add	r3, r1
   8409e:	fbb3 f0f0 	udiv	r0, r3, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   840a2:	1e43      	subs	r3, r0, #1
   840a4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   840a6:	bf94      	ite	ls
   840a8:	b200      	sxthls	r0, r0
		return -1;
   840aa:	f04f 30ff 	movhi.w	r0, #4294967295
}
   840ae:	4770      	bx	lr

000840b0 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   840b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   840b4:	6b08      	ldr	r0, [r1, #48]	; 0x30
   840b6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
   840ba:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   840bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   840be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   840c2:	630b      	str	r3, [r1, #48]	; 0x30
}
   840c4:	4770      	bx	lr
	...

000840c8 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   840c8:	4603      	mov	r3, r0
   840ca:	b9c0      	cbnz	r0, 840fe <udd_sleep_mode+0x36>
   840cc:	4a18      	ldr	r2, [pc, #96]	; (84130 <udd_sleep_mode+0x68>)
   840ce:	7812      	ldrb	r2, [r2, #0]
   840d0:	b192      	cbz	r2, 840f8 <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   840d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   840d6:	b672      	cpsid	i
   840d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840dc:	4a15      	ldr	r2, [pc, #84]	; (84134 <udd_sleep_mode+0x6c>)
   840de:	2100      	movs	r1, #0
   840e0:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   840e2:	4915      	ldr	r1, [pc, #84]	; (84138 <udd_sleep_mode+0x70>)
   840e4:	788a      	ldrb	r2, [r1, #2]
   840e6:	3a01      	subs	r2, #1
   840e8:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   840ea:	b928      	cbnz	r0, 840f8 <udd_sleep_mode+0x30>
		cpu_irq_enable();
   840ec:	4a11      	ldr	r2, [pc, #68]	; (84134 <udd_sleep_mode+0x6c>)
   840ee:	2101      	movs	r1, #1
   840f0:	7011      	strb	r1, [r2, #0]
   840f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   840f6:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   840f8:	4a0d      	ldr	r2, [pc, #52]	; (84130 <udd_sleep_mode+0x68>)
   840fa:	7013      	strb	r3, [r2, #0]
}
   840fc:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   840fe:	4a0c      	ldr	r2, [pc, #48]	; (84130 <udd_sleep_mode+0x68>)
   84100:	7812      	ldrb	r2, [r2, #0]
   84102:	2a00      	cmp	r2, #0
   84104:	d1f8      	bne.n	840f8 <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84106:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8410a:	b672      	cpsid	i
   8410c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84110:	4a08      	ldr	r2, [pc, #32]	; (84134 <udd_sleep_mode+0x6c>)
   84112:	2100      	movs	r1, #0
   84114:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   84116:	4908      	ldr	r1, [pc, #32]	; (84138 <udd_sleep_mode+0x70>)
   84118:	788a      	ldrb	r2, [r1, #2]
   8411a:	3201      	adds	r2, #1
   8411c:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8411e:	2800      	cmp	r0, #0
   84120:	d1ea      	bne.n	840f8 <udd_sleep_mode+0x30>
		cpu_irq_enable();
   84122:	4a04      	ldr	r2, [pc, #16]	; (84134 <udd_sleep_mode+0x6c>)
   84124:	2101      	movs	r1, #1
   84126:	7011      	strb	r1, [r2, #0]
   84128:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8412c:	b662      	cpsie	i
}
   8412e:	e7e3      	b.n	840f8 <udd_sleep_mode+0x30>
   84130:	200020fe 	.word	0x200020fe
   84134:	20000982 	.word	0x20000982
   84138:	20002688 	.word	0x20002688

0008413c <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8413c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84140:	b672      	cpsid	i
   84142:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84146:	4a0e      	ldr	r2, [pc, #56]	; (84180 <udd_ctrl_init+0x44>)
   84148:	2100      	movs	r1, #0
   8414a:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   8414c:	4a0d      	ldr	r2, [pc, #52]	; (84184 <udd_ctrl_init+0x48>)
   8414e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84152:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84156:	b92b      	cbnz	r3, 84164 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   84158:	4b09      	ldr	r3, [pc, #36]	; (84180 <udd_ctrl_init+0x44>)
   8415a:	2201      	movs	r2, #1
   8415c:	701a      	strb	r2, [r3, #0]
   8415e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84162:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   84164:	4b07      	ldr	r3, [pc, #28]	; (84184 <udd_ctrl_init+0x48>)
   84166:	f44f 7200 	mov.w	r2, #512	; 0x200
   8416a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   8416e:	4a06      	ldr	r2, [pc, #24]	; (84188 <udd_ctrl_init+0x4c>)
   84170:	2300      	movs	r3, #0
   84172:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84174:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   84176:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84178:	4a04      	ldr	r2, [pc, #16]	; (8418c <udd_ctrl_init+0x50>)
   8417a:	7013      	strb	r3, [r2, #0]
}
   8417c:	4770      	bx	lr
   8417e:	bf00      	nop
   84180:	20000982 	.word	0x20000982
   84184:	400a4000 	.word	0x400a4000
   84188:	2000269c 	.word	0x2000269c
   8418c:	20002104 	.word	0x20002104

00084190 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84190:	4b03      	ldr	r3, [pc, #12]	; (841a0 <udd_ctrl_stall_data+0x10>)
   84192:	2205      	movs	r2, #5
   84194:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   84196:	4b03      	ldr	r3, [pc, #12]	; (841a4 <udd_ctrl_stall_data+0x14>)
   84198:	2220      	movs	r2, #32
   8419a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8419e:	4770      	bx	lr
   841a0:	20002104 	.word	0x20002104
   841a4:	400a4000 	.word	0x400a4000

000841a8 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   841a8:	4b11      	ldr	r3, [pc, #68]	; (841f0 <udd_ctrl_send_zlp_in+0x48>)
   841aa:	2203      	movs	r2, #3
   841ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   841ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   841b2:	b672      	cpsid	i
   841b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   841b8:	4b0e      	ldr	r3, [pc, #56]	; (841f4 <udd_ctrl_send_zlp_in+0x4c>)
   841ba:	2200      	movs	r2, #0
   841bc:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   841be:	4b0e      	ldr	r3, [pc, #56]	; (841f8 <udd_ctrl_send_zlp_in+0x50>)
   841c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   841c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   841c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   841cc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   841d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   841d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   841d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   841dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   841e0:	b929      	cbnz	r1, 841ee <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   841e2:	4b04      	ldr	r3, [pc, #16]	; (841f4 <udd_ctrl_send_zlp_in+0x4c>)
   841e4:	2201      	movs	r2, #1
   841e6:	701a      	strb	r2, [r3, #0]
   841e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   841ec:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   841ee:	4770      	bx	lr
   841f0:	20002104 	.word	0x20002104
   841f4:	20000982 	.word	0x20000982
   841f8:	400a4000 	.word	0x400a4000

000841fc <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   841fc:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   841fe:	4b02      	ldr	r3, [pc, #8]	; (84208 <udd_ctrl_endofrequest+0xc>)
   84200:	691b      	ldr	r3, [r3, #16]
   84202:	b103      	cbz	r3, 84206 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   84204:	4798      	blx	r3
	}
}
   84206:	bd08      	pop	{r3, pc}
   84208:	2000269c 	.word	0x2000269c

0008420c <udd_ctrl_in_sent>:
{
   8420c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8420e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84212:	b672      	cpsid	i
   84214:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84218:	4a4c      	ldr	r2, [pc, #304]	; (8434c <udd_ctrl_in_sent+0x140>)
   8421a:	2100      	movs	r1, #0
   8421c:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   8421e:	4a4c      	ldr	r2, [pc, #304]	; (84350 <udd_ctrl_in_sent+0x144>)
   84220:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84224:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84228:	b92b      	cbnz	r3, 84236 <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   8422a:	4b48      	ldr	r3, [pc, #288]	; (8434c <udd_ctrl_in_sent+0x140>)
   8422c:	2201      	movs	r2, #1
   8422e:	701a      	strb	r2, [r3, #0]
   84230:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84234:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84236:	4b47      	ldr	r3, [pc, #284]	; (84354 <udd_ctrl_in_sent+0x148>)
   84238:	781b      	ldrb	r3, [r3, #0]
   8423a:	2b03      	cmp	r3, #3
   8423c:	d05a      	beq.n	842f4 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8423e:	4b46      	ldr	r3, [pc, #280]	; (84358 <udd_ctrl_in_sent+0x14c>)
   84240:	881b      	ldrh	r3, [r3, #0]
   84242:	4a46      	ldr	r2, [pc, #280]	; (8435c <udd_ctrl_in_sent+0x150>)
   84244:	8994      	ldrh	r4, [r2, #12]
   84246:	1ae4      	subs	r4, r4, r3
   84248:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   8424a:	b9c4      	cbnz	r4, 8427e <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8424c:	4a44      	ldr	r2, [pc, #272]	; (84360 <udd_ctrl_in_sent+0x154>)
   8424e:	8811      	ldrh	r1, [r2, #0]
   84250:	440b      	add	r3, r1
   84252:	b29b      	uxth	r3, r3
   84254:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84256:	4a41      	ldr	r2, [pc, #260]	; (8435c <udd_ctrl_in_sent+0x150>)
   84258:	88d2      	ldrh	r2, [r2, #6]
   8425a:	429a      	cmp	r2, r3
   8425c:	d04f      	beq.n	842fe <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   8425e:	4b41      	ldr	r3, [pc, #260]	; (84364 <udd_ctrl_in_sent+0x158>)
   84260:	781b      	ldrb	r3, [r3, #0]
   84262:	2b00      	cmp	r3, #0
   84264:	d14b      	bne.n	842fe <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   84266:	4b3d      	ldr	r3, [pc, #244]	; (8435c <udd_ctrl_in_sent+0x150>)
   84268:	695b      	ldr	r3, [r3, #20]
   8426a:	2b00      	cmp	r3, #0
   8426c:	d06c      	beq.n	84348 <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8426e:	4798      	blx	r3
   84270:	2800      	cmp	r0, #0
   84272:	d069      	beq.n	84348 <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   84274:	4b38      	ldr	r3, [pc, #224]	; (84358 <udd_ctrl_in_sent+0x14c>)
   84276:	2200      	movs	r2, #0
   84278:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8427a:	4b38      	ldr	r3, [pc, #224]	; (8435c <udd_ctrl_in_sent+0x150>)
   8427c:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   8427e:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   84280:	bf92      	itee	ls
   84282:	2201      	movls	r2, #1
		b_shortpacket = false;
   84284:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84286:	2440      	movhi	r4, #64	; 0x40
   84288:	4b36      	ldr	r3, [pc, #216]	; (84364 <udd_ctrl_in_sent+0x158>)
   8428a:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8428c:	4b33      	ldr	r3, [pc, #204]	; (8435c <udd_ctrl_in_sent+0x150>)
   8428e:	689a      	ldr	r2, [r3, #8]
   84290:	4b31      	ldr	r3, [pc, #196]	; (84358 <udd_ctrl_in_sent+0x14c>)
   84292:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84294:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84298:	b672      	cpsid	i
   8429a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8429e:	4b2b      	ldr	r3, [pc, #172]	; (8434c <udd_ctrl_in_sent+0x140>)
   842a0:	2100      	movs	r1, #0
   842a2:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   842a4:	4b2a      	ldr	r3, [pc, #168]	; (84350 <udd_ctrl_in_sent+0x144>)
   842a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   842aa:	f413 7f00 	tst.w	r3, #512	; 0x200
   842ae:	d140      	bne.n	84332 <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   842b0:	b14c      	cbz	r4, 842c6 <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   842b2:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   842b4:	4b2c      	ldr	r3, [pc, #176]	; (84368 <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   842b6:	4619      	mov	r1, r3
   842b8:	3301      	adds	r3, #1
   842ba:	f812 0b01 	ldrb.w	r0, [r2], #1
   842be:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   842c0:	b2d9      	uxtb	r1, r3
   842c2:	42a1      	cmp	r1, r4
   842c4:	d3f7      	bcc.n	842b6 <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   842c6:	4a24      	ldr	r2, [pc, #144]	; (84358 <udd_ctrl_in_sent+0x14c>)
   842c8:	8813      	ldrh	r3, [r2, #0]
   842ca:	441c      	add	r4, r3
   842cc:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   842ce:	4b20      	ldr	r3, [pc, #128]	; (84350 <udd_ctrl_in_sent+0x144>)
   842d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   842d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   842d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   842dc:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   842e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   842e4:	bb7d      	cbnz	r5, 84346 <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   842e6:	4b19      	ldr	r3, [pc, #100]	; (8434c <udd_ctrl_in_sent+0x140>)
   842e8:	2201      	movs	r2, #1
   842ea:	701a      	strb	r2, [r3, #0]
   842ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842f0:	b662      	cpsie	i
}
   842f2:	e028      	b.n	84346 <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   842f4:	4b1d      	ldr	r3, [pc, #116]	; (8436c <udd_ctrl_in_sent+0x160>)
   842f6:	4798      	blx	r3
		udd_ctrl_init();
   842f8:	4b1d      	ldr	r3, [pc, #116]	; (84370 <udd_ctrl_in_sent+0x164>)
   842fa:	4798      	blx	r3
		return;
   842fc:	e023      	b.n	84346 <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   842fe:	4b15      	ldr	r3, [pc, #84]	; (84354 <udd_ctrl_in_sent+0x148>)
   84300:	2204      	movs	r2, #4
   84302:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84304:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84308:	b672      	cpsid	i
   8430a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8430e:	4b0f      	ldr	r3, [pc, #60]	; (8434c <udd_ctrl_in_sent+0x140>)
   84310:	2200      	movs	r2, #0
   84312:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   84314:	4b0e      	ldr	r3, [pc, #56]	; (84350 <udd_ctrl_in_sent+0x144>)
   84316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8431a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   8431e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84322:	b981      	cbnz	r1, 84346 <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   84324:	4b09      	ldr	r3, [pc, #36]	; (8434c <udd_ctrl_in_sent+0x140>)
   84326:	2201      	movs	r2, #1
   84328:	701a      	strb	r2, [r3, #0]
   8432a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8432e:	b662      	cpsie	i
}
   84330:	e009      	b.n	84346 <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   84332:	b92d      	cbnz	r5, 84340 <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   84334:	4b05      	ldr	r3, [pc, #20]	; (8434c <udd_ctrl_in_sent+0x140>)
   84336:	2201      	movs	r2, #1
   84338:	701a      	strb	r2, [r3, #0]
   8433a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8433e:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84340:	4b04      	ldr	r3, [pc, #16]	; (84354 <udd_ctrl_in_sent+0x148>)
   84342:	2204      	movs	r2, #4
   84344:	701a      	strb	r2, [r3, #0]
}
   84346:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   84348:	2201      	movs	r2, #1
   8434a:	e79d      	b.n	84288 <udd_ctrl_in_sent+0x7c>
   8434c:	20000982 	.word	0x20000982
   84350:	400a4000 	.word	0x400a4000
   84354:	20002104 	.word	0x20002104
   84358:	20002100 	.word	0x20002100
   8435c:	2000269c 	.word	0x2000269c
   84360:	20002102 	.word	0x20002102
   84364:	200020fd 	.word	0x200020fd
   84368:	20180000 	.word	0x20180000
   8436c:	000841fd 	.word	0x000841fd
   84370:	0008413d 	.word	0x0008413d

00084374 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   84374:	b538      	push	{r3, r4, r5, lr}
   84376:	4603      	mov	r3, r0
   84378:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   8437a:	7d19      	ldrb	r1, [r3, #20]
   8437c:	f011 0f01 	tst.w	r1, #1
   84380:	d011      	beq.n	843a6 <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   84382:	7d19      	ldrb	r1, [r3, #20]
   84384:	f36f 0100 	bfc	r1, #0, #1
   84388:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   8438a:	681c      	ldr	r4, [r3, #0]
   8438c:	b15c      	cbz	r4, 843a6 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   8438e:	f102 0108 	add.w	r1, r2, #8
   84392:	0149      	lsls	r1, r1, #5
   84394:	4d04      	ldr	r5, [pc, #16]	; (843a8 <udd_ep_finish_job+0x34>)
   84396:	5869      	ldr	r1, [r5, r1]
   84398:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   8439c:	bf18      	it	ne
   8439e:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   843a2:	6899      	ldr	r1, [r3, #8]
   843a4:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   843a6:	bd38      	pop	{r3, r4, r5, pc}
   843a8:	400a4000 	.word	0x400a4000

000843ac <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   843ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   843ae:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   843b0:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   843b2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   843b6:	496c      	ldr	r1, [pc, #432]	; (84568 <udd_ep_trans_done+0x1bc>)
   843b8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   843bc:	7d09      	ldrb	r1, [r1, #20]
   843be:	f011 0f01 	tst.w	r1, #1
   843c2:	f000 80ca 	beq.w	8455a <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   843c6:	4601      	mov	r1, r0
   843c8:	4867      	ldr	r0, [pc, #412]	; (84568 <udd_ep_trans_done+0x1bc>)
   843ca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   843ce:	68cd      	ldr	r5, [r1, #12]
   843d0:	6888      	ldr	r0, [r1, #8]
   843d2:	4285      	cmp	r5, r0
   843d4:	f000 80a6 	beq.w	84524 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   843d8:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   843da:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   843de:	d863      	bhi.n	844a8 <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   843e0:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   843e2:	0151      	lsls	r1, r2, #5
   843e4:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   843e8:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   843ec:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   843f0:	f016 0f08 	tst.w	r6, #8
   843f4:	d014      	beq.n	84420 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   843f6:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   843fa:	f006 0607 	and.w	r6, r6, #7
   843fe:	2108      	movs	r1, #8
   84400:	40b1      	lsls	r1, r6
   84402:	3901      	subs	r1, #1
   84404:	4201      	tst	r1, r0
   84406:	d068      	beq.n	844da <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   84408:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   8440c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84410:	4e55      	ldr	r6, [pc, #340]	; (84568 <udd_ep_trans_done+0x1bc>)
   84412:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   84416:	7d0e      	ldrb	r6, [r1, #20]
   84418:	f36f 0641 	bfc	r6, #1, #1
   8441c:	750e      	strb	r6, [r1, #20]
   8441e:	e05c      	b.n	844da <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84420:	0151      	lsls	r1, r2, #5
   84422:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   84426:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8442a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8442e:	f3c6 1601 	ubfx	r6, r6, #4, #2
   84432:	2e01      	cmp	r6, #1
   84434:	d14f      	bne.n	844d6 <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84436:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8443a:	f006 0607 	and.w	r6, r6, #7
   8443e:	2108      	movs	r1, #8
   84440:	40b1      	lsls	r1, r6
   84442:	4281      	cmp	r1, r0
   84444:	d247      	bcs.n	844d6 <udd_ep_trans_done+0x12a>
   84446:	e048      	b.n	844da <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   84448:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   8444c:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   8444e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84452:	4a45      	ldr	r2, [pc, #276]	; (84568 <udd_ep_trans_done+0x1bc>)
   84454:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   84458:	68d1      	ldr	r1, [r2, #12]
   8445a:	4401      	add	r1, r0
   8445c:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   8445e:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   84460:	4a42      	ldr	r2, [pc, #264]	; (8456c <udd_ep_trans_done+0x1c0>)
   84462:	6911      	ldr	r1, [r2, #16]
   84464:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   84468:	fa00 f303 	lsl.w	r3, r0, r3
   8446c:	430b      	orrs	r3, r1
   8446e:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84470:	2d00      	cmp	r5, #0
   84472:	d172      	bne.n	8455a <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   84474:	4b3e      	ldr	r3, [pc, #248]	; (84570 <udd_ep_trans_done+0x1c4>)
   84476:	2201      	movs	r2, #1
   84478:	701a      	strb	r2, [r3, #0]
   8447a:	f3bf 8f5f 	dmb	sy
   8447e:	b662      	cpsie	i
}
   84480:	e06b      	b.n	8455a <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   84482:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84486:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   8448a:	4b38      	ldr	r3, [pc, #224]	; (8456c <udd_ep_trans_done+0x1c0>)
   8448c:	6919      	ldr	r1, [r3, #16]
   8448e:	f44f 7080 	mov.w	r0, #256	; 0x100
   84492:	fa00 f202 	lsl.w	r2, r0, r2
   84496:	430a      	orrs	r2, r1
   84498:	611a      	str	r2, [r3, #16]
			return;
   8449a:	e05e      	b.n	8455a <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8449c:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   844a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   844a4:	2400      	movs	r4, #0
   844a6:	e018      	b.n	844da <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   844a8:	0151      	lsls	r1, r2, #5
   844aa:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   844ae:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   844b2:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   844b6:	f014 0408 	ands.w	r4, r4, #8
   844ba:	d1ef      	bne.n	8449c <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   844bc:	0151      	lsls	r1, r2, #5
   844be:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   844c2:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   844c6:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   844ca:	f3c0 1001 	ubfx	r0, r0, #4, #2
   844ce:	2801      	cmp	r0, #1
   844d0:	d044      	beq.n	8455c <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   844d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   844d6:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   844da:	4926      	ldr	r1, [pc, #152]	; (84574 <udd_ep_trans_done+0x1c8>)
   844dc:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   844e0:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   844e4:	4f20      	ldr	r7, [pc, #128]	; (84568 <udd_ep_trans_done+0x1bc>)
   844e6:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   844ea:	6876      	ldr	r6, [r6, #4]
   844ec:	4435      	add	r5, r6
   844ee:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   844f0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   844f4:	b672      	cpsid	i
   844f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   844fa:	4e1d      	ldr	r6, [pc, #116]	; (84570 <udd_ep_trans_done+0x1c4>)
   844fc:	2700      	movs	r7, #0
   844fe:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   84500:	68ce      	ldr	r6, [r1, #12]
   84502:	f016 0f10 	tst.w	r6, #16
   84506:	d09f      	beq.n	84448 <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   84508:	b92d      	cbnz	r5, 84516 <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   8450a:	4919      	ldr	r1, [pc, #100]	; (84570 <udd_ep_trans_done+0x1c4>)
   8450c:	2001      	movs	r0, #1
   8450e:	7008      	strb	r0, [r1, #0]
   84510:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84514:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   84516:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8451a:	4813      	ldr	r0, [pc, #76]	; (84568 <udd_ep_trans_done+0x1bc>)
   8451c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84520:	68c8      	ldr	r0, [r1, #12]
   84522:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   84524:	0151      	lsls	r1, r2, #5
   84526:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8452a:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8452e:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   84532:	f010 0f08 	tst.w	r0, #8
   84536:	d008      	beq.n	8454a <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   84538:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8453c:	4c0a      	ldr	r4, [pc, #40]	; (84568 <udd_ep_trans_done+0x1bc>)
   8453e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   84542:	7d00      	ldrb	r0, [r0, #20]
   84544:	f010 0f02 	tst.w	r0, #2
   84548:	d19b      	bne.n	84482 <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   8454a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8454e:	2100      	movs	r1, #0
   84550:	4805      	ldr	r0, [pc, #20]	; (84568 <udd_ep_trans_done+0x1bc>)
   84552:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   84556:	4b08      	ldr	r3, [pc, #32]	; (84578 <udd_ep_trans_done+0x1cc>)
   84558:	4798      	blx	r3
}
   8455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8455c:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84560:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   84564:	e7b9      	b.n	844da <udd_ep_trans_done+0x12e>
   84566:	bf00      	nop
   84568:	20002108 	.word	0x20002108
   8456c:	400a4000 	.word	0x400a4000
   84570:	20000982 	.word	0x20000982
   84574:	400a4300 	.word	0x400a4300
   84578:	00084375 	.word	0x00084375

0008457c <UDPHS_Handler>:
{
   8457c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   84580:	201d      	movs	r0, #29
   84582:	4ba0      	ldr	r3, [pc, #640]	; (84804 <UDPHS_Handler+0x288>)
   84584:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84586:	4ba0      	ldr	r3, [pc, #640]	; (84808 <UDPHS_Handler+0x28c>)
   84588:	4798      	blx	r3
   8458a:	b920      	cbnz	r0, 84596 <UDPHS_Handler+0x1a>
   8458c:	4b9f      	ldr	r3, [pc, #636]	; (8480c <UDPHS_Handler+0x290>)
   8458e:	695b      	ldr	r3, [r3, #20]
   84590:	f013 0f02 	tst.w	r3, #2
   84594:	d041      	beq.n	8461a <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   84596:	4b9d      	ldr	r3, [pc, #628]	; (8480c <UDPHS_Handler+0x290>)
   84598:	695b      	ldr	r3, [r3, #20]
   8459a:	f013 0f08 	tst.w	r3, #8
   8459e:	d143      	bne.n	84628 <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   845a0:	4b9a      	ldr	r3, [pc, #616]	; (8480c <UDPHS_Handler+0x290>)
   845a2:	695b      	ldr	r3, [r3, #20]
   845a4:	f013 0f04 	tst.w	r3, #4
   845a8:	d14c      	bne.n	84644 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   845aa:	4a98      	ldr	r2, [pc, #608]	; (8480c <UDPHS_Handler+0x290>)
   845ac:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   845b0:	6952      	ldr	r2, [r2, #20]
   845b2:	f412 7f80 	tst.w	r2, #256	; 0x100
   845b6:	d029      	beq.n	8460c <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   845b8:	4a94      	ldr	r2, [pc, #592]	; (8480c <UDPHS_Handler+0x290>)
   845ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   845be:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   845c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   845c6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   845ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   845ce:	d13f      	bne.n	84650 <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   845d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   845d4:	d006      	beq.n	845e4 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   845d6:	4a8d      	ldr	r2, [pc, #564]	; (8480c <UDPHS_Handler+0x290>)
   845d8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   845dc:	f412 6f80 	tst.w	r2, #1024	; 0x400
   845e0:	f040 809e 	bne.w	84720 <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   845e4:	f413 7f00 	tst.w	r3, #512	; 0x200
   845e8:	f040 809d 	bne.w	84726 <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   845ec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   845f0:	d004      	beq.n	845fc <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   845f2:	4a86      	ldr	r2, [pc, #536]	; (8480c <UDPHS_Handler+0x290>)
   845f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   845f8:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   845fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   84600:	f040 8144 	bne.w	8488c <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   84604:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   84608:	f040 8155 	bne.w	848b6 <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8460c:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8460e:	497f      	ldr	r1, [pc, #508]	; (8480c <UDPHS_Handler+0x290>)
   84610:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84614:	f44f 7e80 	mov.w	lr, #256	; 0x100
   84618:	e19c      	b.n	84954 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   8461a:	b672      	cpsid	i
   8461c:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   84620:	4b7b      	ldr	r3, [pc, #492]	; (84810 <UDPHS_Handler+0x294>)
   84622:	2200      	movs	r2, #0
   84624:	701a      	strb	r2, [r3, #0]
		return;
   84626:	e008      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ack_sof();
   84628:	4b78      	ldr	r3, [pc, #480]	; (8480c <UDPHS_Handler+0x290>)
   8462a:	2208      	movs	r2, #8
   8462c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   8462e:	695b      	ldr	r3, [r3, #20]
   84630:	f013 0f01 	tst.w	r3, #1
   84634:	d003      	beq.n	8463e <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   84636:	4b77      	ldr	r3, [pc, #476]	; (84814 <UDPHS_Handler+0x298>)
   84638:	4798      	blx	r3
}
   8463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   8463e:	4b76      	ldr	r3, [pc, #472]	; (84818 <UDPHS_Handler+0x29c>)
   84640:	4798      	blx	r3
   84642:	e7f8      	b.n	84636 <UDPHS_Handler+0xba>
		udd_ack_msof();
   84644:	4b71      	ldr	r3, [pc, #452]	; (8480c <UDPHS_Handler+0x290>)
   84646:	2204      	movs	r2, #4
   84648:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   8464a:	4b73      	ldr	r3, [pc, #460]	; (84818 <UDPHS_Handler+0x29c>)
   8464c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8464e:	e7f4      	b.n	8463a <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84650:	4b72      	ldr	r3, [pc, #456]	; (8481c <UDPHS_Handler+0x2a0>)
   84652:	781b      	ldrb	r3, [r3, #0]
   84654:	2b00      	cmp	r3, #0
   84656:	d140      	bne.n	846da <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   84658:	4b6c      	ldr	r3, [pc, #432]	; (8480c <UDPHS_Handler+0x290>)
   8465a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8465e:	f3c3 530a 	ubfx	r3, r3, #20, #11
   84662:	2b08      	cmp	r3, #8
   84664:	d13e      	bne.n	846e4 <UDPHS_Handler+0x168>
   84666:	4a6e      	ldr	r2, [pc, #440]	; (84820 <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84668:	4b6e      	ldr	r3, [pc, #440]	; (84824 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   8466a:	486f      	ldr	r0, [pc, #444]	; (84828 <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   8466c:	4619      	mov	r1, r3
   8466e:	3301      	adds	r3, #1
   84670:	7809      	ldrb	r1, [r1, #0]
   84672:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   84676:	4283      	cmp	r3, r0
   84678:	d1f8      	bne.n	8466c <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   8467a:	4b6c      	ldr	r3, [pc, #432]	; (8482c <UDPHS_Handler+0x2b0>)
   8467c:	4798      	blx	r3
   8467e:	2800      	cmp	r0, #0
   84680:	d038      	beq.n	846f4 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   84682:	4b62      	ldr	r3, [pc, #392]	; (8480c <UDPHS_Handler+0x290>)
   84684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84688:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   8468c:	4b68      	ldr	r3, [pc, #416]	; (84830 <UDPHS_Handler+0x2b4>)
   8468e:	f993 3000 	ldrsb.w	r3, [r3]
   84692:	2b00      	cmp	r3, #0
   84694:	db36      	blt.n	84704 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   84696:	4b66      	ldr	r3, [pc, #408]	; (84830 <UDPHS_Handler+0x2b4>)
   84698:	88db      	ldrh	r3, [r3, #6]
   8469a:	2b00      	cmp	r3, #0
   8469c:	d03d      	beq.n	8471a <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   8469e:	2300      	movs	r3, #0
   846a0:	4a64      	ldr	r2, [pc, #400]	; (84834 <UDPHS_Handler+0x2b8>)
   846a2:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   846a4:	4a64      	ldr	r2, [pc, #400]	; (84838 <UDPHS_Handler+0x2bc>)
   846a6:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   846a8:	4a5c      	ldr	r2, [pc, #368]	; (8481c <UDPHS_Handler+0x2a0>)
   846aa:	2101      	movs	r1, #1
   846ac:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   846ae:	4a57      	ldr	r2, [pc, #348]	; (8480c <UDPHS_Handler+0x290>)
   846b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   846b4:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   846b8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   846bc:	b672      	cpsid	i
   846be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   846c2:	4c53      	ldr	r4, [pc, #332]	; (84810 <UDPHS_Handler+0x294>)
   846c4:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   846c6:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   846ca:	2800      	cmp	r0, #0
   846cc:	d1b5      	bne.n	8463a <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   846ce:	2201      	movs	r2, #1
   846d0:	7022      	strb	r2, [r4, #0]
   846d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   846d6:	b662      	cpsie	i
}
   846d8:	e7af      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   846da:	4b58      	ldr	r3, [pc, #352]	; (8483c <UDPHS_Handler+0x2c0>)
   846dc:	4798      	blx	r3
		udd_ctrl_init();
   846de:	4b58      	ldr	r3, [pc, #352]	; (84840 <UDPHS_Handler+0x2c4>)
   846e0:	4798      	blx	r3
   846e2:	e7b9      	b.n	84658 <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   846e4:	4b57      	ldr	r3, [pc, #348]	; (84844 <UDPHS_Handler+0x2c8>)
   846e6:	4798      	blx	r3
		udd_ack_setup_received(0);
   846e8:	4b48      	ldr	r3, [pc, #288]	; (8480c <UDPHS_Handler+0x290>)
   846ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   846ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   846f2:	e7a2      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   846f4:	4b53      	ldr	r3, [pc, #332]	; (84844 <UDPHS_Handler+0x2c8>)
   846f6:	4798      	blx	r3
		udd_ack_setup_received(0);
   846f8:	4b44      	ldr	r3, [pc, #272]	; (8480c <UDPHS_Handler+0x290>)
   846fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   846fe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   84702:	e79a      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84704:	2300      	movs	r3, #0
   84706:	4a4b      	ldr	r2, [pc, #300]	; (84834 <UDPHS_Handler+0x2b8>)
   84708:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8470a:	4a4b      	ldr	r2, [pc, #300]	; (84838 <UDPHS_Handler+0x2bc>)
   8470c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8470e:	4b43      	ldr	r3, [pc, #268]	; (8481c <UDPHS_Handler+0x2a0>)
   84710:	2202      	movs	r2, #2
   84712:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   84714:	4b4c      	ldr	r3, [pc, #304]	; (84848 <UDPHS_Handler+0x2cc>)
   84716:	4798      	blx	r3
   84718:	e78f      	b.n	8463a <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   8471a:	4b4c      	ldr	r3, [pc, #304]	; (8484c <UDPHS_Handler+0x2d0>)
   8471c:	4798      	blx	r3
			return;
   8471e:	e78c      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   84720:	4b49      	ldr	r3, [pc, #292]	; (84848 <UDPHS_Handler+0x2cc>)
   84722:	4798      	blx	r3
		return true;
   84724:	e789      	b.n	8463a <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   84726:	4b3d      	ldr	r3, [pc, #244]	; (8481c <UDPHS_Handler+0x2a0>)
   84728:	781b      	ldrb	r3, [r3, #0]
   8472a:	2b01      	cmp	r3, #1
   8472c:	d00b      	beq.n	84746 <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8472e:	2b02      	cmp	r3, #2
   84730:	d001      	beq.n	84736 <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   84732:	2b04      	cmp	r3, #4
   84734:	d104      	bne.n	84740 <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   84736:	4b41      	ldr	r3, [pc, #260]	; (8483c <UDPHS_Handler+0x2c0>)
   84738:	4798      	blx	r3
		udd_ctrl_init();
   8473a:	4b41      	ldr	r3, [pc, #260]	; (84840 <UDPHS_Handler+0x2c4>)
   8473c:	4798      	blx	r3
		return;
   8473e:	e77c      	b.n	8463a <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   84740:	4b40      	ldr	r3, [pc, #256]	; (84844 <UDPHS_Handler+0x2c8>)
   84742:	4798      	blx	r3
   84744:	e7f9      	b.n	8473a <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   84746:	4b31      	ldr	r3, [pc, #196]	; (8480c <UDPHS_Handler+0x290>)
   84748:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   8474c:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84750:	4b37      	ldr	r3, [pc, #220]	; (84830 <UDPHS_Handler+0x2b4>)
   84752:	899b      	ldrh	r3, [r3, #12]
   84754:	4a38      	ldr	r2, [pc, #224]	; (84838 <UDPHS_Handler+0x2bc>)
   84756:	8814      	ldrh	r4, [r2, #0]
   84758:	1822      	adds	r2, r4, r0
   8475a:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8475c:	bfbc      	itt	lt
   8475e:	1b1b      	sublt	r3, r3, r4
   84760:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84762:	4b33      	ldr	r3, [pc, #204]	; (84830 <UDPHS_Handler+0x2b4>)
   84764:	689a      	ldr	r2, [r3, #8]
   84766:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   84768:	b170      	cbz	r0, 84788 <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8476a:	4b2e      	ldr	r3, [pc, #184]	; (84824 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   8476c:	4619      	mov	r1, r3
   8476e:	3301      	adds	r3, #1
   84770:	7809      	ldrb	r1, [r1, #0]
   84772:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   84776:	b2d9      	uxtb	r1, r3
   84778:	4281      	cmp	r1, r0
   8477a:	d3f7      	bcc.n	8476c <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   8477c:	4404      	add	r4, r0
   8477e:	b2a4      	uxth	r4, r4
   84780:	4b2d      	ldr	r3, [pc, #180]	; (84838 <UDPHS_Handler+0x2bc>)
   84782:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84784:	2840      	cmp	r0, #64	; 0x40
   84786:	d00d      	beq.n	847a4 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84788:	4b29      	ldr	r3, [pc, #164]	; (84830 <UDPHS_Handler+0x2b4>)
   8478a:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8478c:	695b      	ldr	r3, [r3, #20]
   8478e:	b10b      	cbz	r3, 84794 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   84790:	4798      	blx	r3
   84792:	b370      	cbz	r0, 847f2 <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   84794:	4b1d      	ldr	r3, [pc, #116]	; (8480c <UDPHS_Handler+0x290>)
   84796:	f44f 7200 	mov.w	r2, #512	; 0x200
   8479a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   8479e:	4b2b      	ldr	r3, [pc, #172]	; (8484c <UDPHS_Handler+0x2d0>)
   847a0:	4798      	blx	r3
		return;
   847a2:	e74a      	b.n	8463a <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   847a4:	4b22      	ldr	r3, [pc, #136]	; (84830 <UDPHS_Handler+0x2b4>)
   847a6:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   847a8:	4b22      	ldr	r3, [pc, #136]	; (84834 <UDPHS_Handler+0x2b8>)
   847aa:	881b      	ldrh	r3, [r3, #0]
   847ac:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   847ae:	429a      	cmp	r2, r3
   847b0:	ddea      	ble.n	84788 <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   847b2:	4b1f      	ldr	r3, [pc, #124]	; (84830 <UDPHS_Handler+0x2b4>)
   847b4:	899b      	ldrh	r3, [r3, #12]
   847b6:	42a3      	cmp	r3, r4
   847b8:	d04a      	beq.n	84850 <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   847ba:	4b14      	ldr	r3, [pc, #80]	; (8480c <UDPHS_Handler+0x290>)
   847bc:	f44f 7200 	mov.w	r2, #512	; 0x200
   847c0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   847c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   847c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   847cc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   847d0:	b672      	cpsid	i
   847d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   847d6:	480e      	ldr	r0, [pc, #56]	; (84810 <UDPHS_Handler+0x294>)
   847d8:	2400      	movs	r4, #0
   847da:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   847dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   847e0:	2900      	cmp	r1, #0
   847e2:	f47f af2a 	bne.w	8463a <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   847e6:	2201      	movs	r2, #1
   847e8:	7002      	strb	r2, [r0, #0]
   847ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   847ee:	b662      	cpsie	i
}
   847f0:	e723      	b.n	8463a <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   847f2:	4b14      	ldr	r3, [pc, #80]	; (84844 <UDPHS_Handler+0x2c8>)
   847f4:	4798      	blx	r3
				udd_ack_out_received(0);
   847f6:	4b05      	ldr	r3, [pc, #20]	; (8480c <UDPHS_Handler+0x290>)
   847f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   847fc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   84800:	e71b      	b.n	8463a <UDPHS_Handler+0xbe>
   84802:	bf00      	nop
   84804:	00083f51 	.word	0x00083f51
   84808:	00083fcd 	.word	0x00083fcd
   8480c:	400a4000 	.word	0x400a4000
   84810:	20000982 	.word	0x20000982
   84814:	000812b5 	.word	0x000812b5
   84818:	000832e5 	.word	0x000832e5
   8481c:	20002104 	.word	0x20002104
   84820:	2000269b 	.word	0x2000269b
   84824:	20180000 	.word	0x20180000
   84828:	20180008 	.word	0x20180008
   8482c:	00083329 	.word	0x00083329
   84830:	2000269c 	.word	0x2000269c
   84834:	20002102 	.word	0x20002102
   84838:	20002100 	.word	0x20002100
   8483c:	000841fd 	.word	0x000841fd
   84840:	0008413d 	.word	0x0008413d
   84844:	00084191 	.word	0x00084191
   84848:	0008420d 	.word	0x0008420d
   8484c:	000841a9 	.word	0x000841a9
		if (!udd_g_ctrlreq.over_under_run) {
   84850:	4b9d      	ldr	r3, [pc, #628]	; (84ac8 <UDPHS_Handler+0x54c>)
   84852:	695b      	ldr	r3, [r3, #20]
   84854:	b153      	cbz	r3, 8486c <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   84856:	4798      	blx	r3
   84858:	b180      	cbz	r0, 8487c <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8485a:	499c      	ldr	r1, [pc, #624]	; (84acc <UDPHS_Handler+0x550>)
   8485c:	4a9c      	ldr	r2, [pc, #624]	; (84ad0 <UDPHS_Handler+0x554>)
   8485e:	880b      	ldrh	r3, [r1, #0]
   84860:	8810      	ldrh	r0, [r2, #0]
   84862:	4403      	add	r3, r0
   84864:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84866:	2300      	movs	r3, #0
   84868:	8013      	strh	r3, [r2, #0]
   8486a:	e7a6      	b.n	847ba <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   8486c:	4b99      	ldr	r3, [pc, #612]	; (84ad4 <UDPHS_Handler+0x558>)
   8486e:	4798      	blx	r3
			udd_ack_out_received(0);
   84870:	4b99      	ldr	r3, [pc, #612]	; (84ad8 <UDPHS_Handler+0x55c>)
   84872:	f44f 7200 	mov.w	r2, #512	; 0x200
   84876:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   8487a:	e6de      	b.n	8463a <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   8487c:	4b95      	ldr	r3, [pc, #596]	; (84ad4 <UDPHS_Handler+0x558>)
   8487e:	4798      	blx	r3
			udd_ack_out_received(0);
   84880:	4b95      	ldr	r3, [pc, #596]	; (84ad8 <UDPHS_Handler+0x55c>)
   84882:	f44f 7200 	mov.w	r2, #512	; 0x200
   84886:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   8488a:	e6d6      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   8488c:	4b92      	ldr	r3, [pc, #584]	; (84ad8 <UDPHS_Handler+0x55c>)
   8488e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84892:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   84896:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8489a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   8489e:	f47f aecc 	bne.w	8463a <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   848a2:	4b8e      	ldr	r3, [pc, #568]	; (84adc <UDPHS_Handler+0x560>)
   848a4:	781b      	ldrb	r3, [r3, #0]
   848a6:	2b03      	cmp	r3, #3
   848a8:	f47f aec7 	bne.w	8463a <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   848ac:	4b8a      	ldr	r3, [pc, #552]	; (84ad8 <UDPHS_Handler+0x55c>)
   848ae:	2220      	movs	r2, #32
   848b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   848b4:	e6c1      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   848b6:	4b88      	ldr	r3, [pc, #544]	; (84ad8 <UDPHS_Handler+0x55c>)
   848b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   848bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   848c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   848c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   848c8:	f47f aeb7 	bne.w	8463a <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   848cc:	4b83      	ldr	r3, [pc, #524]	; (84adc <UDPHS_Handler+0x560>)
   848ce:	781b      	ldrb	r3, [r3, #0]
   848d0:	2b01      	cmp	r3, #1
   848d2:	d007      	beq.n	848e4 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   848d4:	2b04      	cmp	r3, #4
   848d6:	f47f aeb0 	bne.w	8463a <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   848da:	4b7f      	ldr	r3, [pc, #508]	; (84ad8 <UDPHS_Handler+0x55c>)
   848dc:	2220      	movs	r2, #32
   848de:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   848e2:	e6aa      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   848e4:	4b7e      	ldr	r3, [pc, #504]	; (84ae0 <UDPHS_Handler+0x564>)
   848e6:	4798      	blx	r3
   848e8:	e6a7      	b.n	8463a <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   848ea:	4b7e      	ldr	r3, [pc, #504]	; (84ae4 <UDPHS_Handler+0x568>)
   848ec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   848f0:	68d9      	ldr	r1, [r3, #12]
   848f2:	f011 0f01 	tst.w	r1, #1
   848f6:	f47f aea0 	bne.w	8463a <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   848fa:	4877      	ldr	r0, [pc, #476]	; (84ad8 <UDPHS_Handler+0x55c>)
   848fc:	6901      	ldr	r1, [r0, #16]
   848fe:	ea21 0606 	bic.w	r6, r1, r6
   84902:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84904:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   84906:	0c1b      	lsrs	r3, r3, #16
   84908:	d008      	beq.n	8491c <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   8490a:	4977      	ldr	r1, [pc, #476]	; (84ae8 <UDPHS_Handler+0x56c>)
   8490c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   84910:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   84914:	68e0      	ldr	r0, [r4, #12]
   84916:	1ac3      	subs	r3, r0, r3
   84918:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   8491a:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   8491c:	4610      	mov	r0, r2
   8491e:	4b73      	ldr	r3, [pc, #460]	; (84aec <UDPHS_Handler+0x570>)
   84920:	4798      	blx	r3
			return true;
   84922:	e68a      	b.n	8463a <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   84924:	0163      	lsls	r3, r4, #5
   84926:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8492a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8492e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   84932:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   84936:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   8493a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   8493e:	2100      	movs	r1, #0
   84940:	4869      	ldr	r0, [pc, #420]	; (84ae8 <UDPHS_Handler+0x56c>)
   84942:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   84946:	4b6a      	ldr	r3, [pc, #424]	; (84af0 <UDPHS_Handler+0x574>)
   84948:	4798      	blx	r3
				return true;
   8494a:	e676      	b.n	8463a <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8494c:	3301      	adds	r3, #1
   8494e:	2b07      	cmp	r3, #7
   84950:	f000 80dc 	beq.w	84b0c <UDPHS_Handler+0x590>
   84954:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   84956:	461c      	mov	r4, r3
   84958:	1e5d      	subs	r5, r3, #1
   8495a:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8495c:	690f      	ldr	r7, [r1, #16]
   8495e:	fa0c f605 	lsl.w	r6, ip, r5
   84962:	4237      	tst	r7, r6
   84964:	d002      	beq.n	8496c <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   84966:	6948      	ldr	r0, [r1, #20]
   84968:	4206      	tst	r6, r0
   8496a:	d1be      	bne.n	848ea <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8496c:	690f      	ldr	r7, [r1, #16]
   8496e:	fa0e f604 	lsl.w	r6, lr, r4
   84972:	4237      	tst	r7, r6
   84974:	d0ea      	beq.n	8494c <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   84976:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   8497a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   8497e:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84982:	d006      	beq.n	84992 <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   84984:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   84988:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   8498c:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84990:	d0c8      	beq.n	84924 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84992:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84996:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8499a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   8499e:	d0d5      	beq.n	8494c <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   849a0:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   849a4:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   849a8:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   849ac:	d1ce      	bne.n	8494c <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   849ae:	4b4a      	ldr	r3, [pc, #296]	; (84ad8 <UDPHS_Handler+0x55c>)
   849b0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   849b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   849b8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   849bc:	691a      	ldr	r2, [r3, #16]
   849be:	ea22 0606 	bic.w	r6, r2, r6
   849c2:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   849c4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   849c8:	4b47      	ldr	r3, [pc, #284]	; (84ae8 <UDPHS_Handler+0x56c>)
   849ca:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   849ce:	f898 3014 	ldrb.w	r3, [r8, #20]
   849d2:	f36f 0382 	bfc	r3, #2, #1
   849d6:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   849da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   849de:	f023 0302 	bic.w	r3, r3, #2
   849e2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   849e6:	2320      	movs	r3, #32
   849e8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   849ec:	2340      	movs	r3, #64	; 0x40
   849ee:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   849f2:	e622      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ack_reset();
   849f4:	4b38      	ldr	r3, [pc, #224]	; (84ad8 <UDPHS_Handler+0x55c>)
   849f6:	2210      	movs	r2, #16
   849f8:	619a      	str	r2, [r3, #24]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   849fa:	4d3b      	ldr	r5, [pc, #236]	; (84ae8 <UDPHS_Handler+0x56c>)
   849fc:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   849fe:	2701      	movs	r7, #1
   84a00:	4e3b      	ldr	r6, [pc, #236]	; (84af0 <UDPHS_Handler+0x574>)
   84a02:	3401      	adds	r4, #1
   84a04:	b2e4      	uxtb	r4, r4
   84a06:	4622      	mov	r2, r4
   84a08:	4639      	mov	r1, r7
   84a0a:	4628      	mov	r0, r5
   84a0c:	47b0      	blx	r6
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84a0e:	3518      	adds	r5, #24
   84a10:	2c06      	cmp	r4, #6
   84a12:	d1f6      	bne.n	84a02 <UDPHS_Handler+0x486>
		udc_reset();
   84a14:	4b37      	ldr	r3, [pc, #220]	; (84af4 <UDPHS_Handler+0x578>)
   84a16:	4798      	blx	r3
	udd_configure_address(0);
   84a18:	4b2f      	ldr	r3, [pc, #188]	; (84ad8 <UDPHS_Handler+0x55c>)
   84a1a:	681a      	ldr	r2, [r3, #0]
   84a1c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84a20:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84a22:	681a      	ldr	r2, [r3, #0]
   84a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84a28:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84a2a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84a2e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   84a32:	f022 0203 	bic.w	r2, r2, #3
   84a36:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   84a3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84a3e:	2201      	movs	r2, #1
   84a40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84a44:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84a48:	b672      	cpsid	i
   84a4a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84a4e:	4a2a      	ldr	r2, [pc, #168]	; (84af8 <UDPHS_Handler+0x57c>)
   84a50:	2000      	movs	r0, #0
   84a52:	7010      	strb	r0, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   84a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84a58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
   84a60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84a64:	691a      	ldr	r2, [r3, #16]
   84a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84a6a:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84a6c:	b929      	cbnz	r1, 84a7a <UDPHS_Handler+0x4fe>
		cpu_irq_enable();
   84a6e:	4b22      	ldr	r3, [pc, #136]	; (84af8 <UDPHS_Handler+0x57c>)
   84a70:	2201      	movs	r2, #1
   84a72:	701a      	strb	r2, [r3, #0]
   84a74:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84a78:	b662      	cpsie	i
		udd_ctrl_init();
   84a7a:	4b20      	ldr	r3, [pc, #128]	; (84afc <UDPHS_Handler+0x580>)
   84a7c:	4798      	blx	r3
		udd_enable_sof_interrupt();
   84a7e:	4b16      	ldr	r3, [pc, #88]	; (84ad8 <UDPHS_Handler+0x55c>)
   84a80:	691a      	ldr	r2, [r3, #16]
   84a82:	f042 0208 	orr.w	r2, r2, #8
   84a86:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84a88:	691a      	ldr	r2, [r3, #16]
   84a8a:	f042 0204 	orr.w	r2, r2, #4
   84a8e:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84a90:	691a      	ldr	r2, [r3, #16]
   84a92:	f042 0202 	orr.w	r2, r2, #2
   84a96:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   84a98:	e5cf      	b.n	8463a <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   84a9a:	4b0f      	ldr	r3, [pc, #60]	; (84ad8 <UDPHS_Handler+0x55c>)
   84a9c:	2220      	movs	r2, #32
   84a9e:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   84aa0:	691a      	ldr	r2, [r3, #16]
   84aa2:	f022 0202 	bic.w	r2, r2, #2
   84aa6:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   84aa8:	691a      	ldr	r2, [r3, #16]
   84aaa:	f042 0220 	orr.w	r2, r2, #32
   84aae:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   84ab0:	2202      	movs	r2, #2
   84ab2:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   84ab4:	201d      	movs	r0, #29
   84ab6:	4b12      	ldr	r3, [pc, #72]	; (84b00 <UDPHS_Handler+0x584>)
   84ab8:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   84aba:	4b12      	ldr	r3, [pc, #72]	; (84b04 <UDPHS_Handler+0x588>)
   84abc:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84abe:	2000      	movs	r0, #0
   84ac0:	4b11      	ldr	r3, [pc, #68]	; (84b08 <UDPHS_Handler+0x58c>)
   84ac2:	4798      	blx	r3
		goto udd_interrupt_end;
   84ac4:	e5b9      	b.n	8463a <UDPHS_Handler+0xbe>
   84ac6:	bf00      	nop
   84ac8:	2000269c 	.word	0x2000269c
   84acc:	20002102 	.word	0x20002102
   84ad0:	20002100 	.word	0x20002100
   84ad4:	00084191 	.word	0x00084191
   84ad8:	400a4000 	.word	0x400a4000
   84adc:	20002104 	.word	0x20002104
   84ae0:	000841a9 	.word	0x000841a9
   84ae4:	400a4300 	.word	0x400a4300
   84ae8:	20002108 	.word	0x20002108
   84aec:	000843ad 	.word	0x000843ad
   84af0:	00084375 	.word	0x00084375
   84af4:	0008329d 	.word	0x0008329d
   84af8:	20000982 	.word	0x20000982
   84afc:	0008413d 	.word	0x0008413d
   84b00:	00083f7d 	.word	0x00083f7d
   84b04:	0008129d 	.word	0x0008129d
   84b08:	000840c9 	.word	0x000840c9
	if (Is_udd_reset()) {
   84b0c:	4b18      	ldr	r3, [pc, #96]	; (84b70 <UDPHS_Handler+0x5f4>)
   84b0e:	695b      	ldr	r3, [r3, #20]
   84b10:	f013 0f10 	tst.w	r3, #16
   84b14:	f47f af6e 	bne.w	849f4 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84b18:	4b15      	ldr	r3, [pc, #84]	; (84b70 <UDPHS_Handler+0x5f4>)
   84b1a:	691b      	ldr	r3, [r3, #16]
   84b1c:	f013 0f02 	tst.w	r3, #2
   84b20:	d004      	beq.n	84b2c <UDPHS_Handler+0x5b0>
   84b22:	4b13      	ldr	r3, [pc, #76]	; (84b70 <UDPHS_Handler+0x5f4>)
   84b24:	695b      	ldr	r3, [r3, #20]
   84b26:	f013 0f02 	tst.w	r3, #2
   84b2a:	d1b6      	bne.n	84a9a <UDPHS_Handler+0x51e>
	if (Is_udd_wake_up()) {
   84b2c:	4b10      	ldr	r3, [pc, #64]	; (84b70 <UDPHS_Handler+0x5f4>)
   84b2e:	695b      	ldr	r3, [r3, #20]
   84b30:	f013 0f20 	tst.w	r3, #32
   84b34:	f43f ad81 	beq.w	8463a <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   84b38:	2001      	movs	r0, #1
   84b3a:	4b0e      	ldr	r3, [pc, #56]	; (84b74 <UDPHS_Handler+0x5f8>)
   84b3c:	4798      	blx	r3
		udd_ack_suspend();
   84b3e:	4b0c      	ldr	r3, [pc, #48]	; (84b70 <UDPHS_Handler+0x5f4>)
   84b40:	2202      	movs	r2, #2
   84b42:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   84b44:	2220      	movs	r2, #32
   84b46:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   84b48:	691a      	ldr	r2, [r3, #16]
   84b4a:	f022 0220 	bic.w	r2, r2, #32
   84b4e:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84b50:	691a      	ldr	r2, [r3, #16]
   84b52:	f042 0202 	orr.w	r2, r2, #2
   84b56:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   84b58:	691a      	ldr	r2, [r3, #16]
   84b5a:	f042 0208 	orr.w	r2, r2, #8
   84b5e:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84b60:	691a      	ldr	r2, [r3, #16]
   84b62:	f042 0204 	orr.w	r2, r2, #4
   84b66:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   84b68:	4b03      	ldr	r3, [pc, #12]	; (84b78 <UDPHS_Handler+0x5fc>)
   84b6a:	4798      	blx	r3
		goto udd_interrupt_end;
   84b6c:	e565      	b.n	8463a <UDPHS_Handler+0xbe>
   84b6e:	bf00      	nop
   84b70:	400a4000 	.word	0x400a4000
   84b74:	000840c9 	.word	0x000840c9
   84b78:	000812a9 	.word	0x000812a9

00084b7c <udd_attach>:
{
   84b7c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84b7e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84b82:	b672      	cpsid	i
   84b84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84b88:	4b1d      	ldr	r3, [pc, #116]	; (84c00 <udd_attach+0x84>)
   84b8a:	2200      	movs	r2, #0
   84b8c:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   84b8e:	2001      	movs	r0, #1
   84b90:	4b1c      	ldr	r3, [pc, #112]	; (84c04 <udd_attach+0x88>)
   84b92:	4798      	blx	r3
	udd_enable_periph_ck();
   84b94:	201d      	movs	r0, #29
   84b96:	4b1c      	ldr	r3, [pc, #112]	; (84c08 <udd_attach+0x8c>)
   84b98:	4798      	blx	r3
	udd_attach_device();
   84b9a:	4b1c      	ldr	r3, [pc, #112]	; (84c0c <udd_attach+0x90>)
   84b9c:	681a      	ldr	r2, [r3, #0]
   84b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   84ba2:	601a      	str	r2, [r3, #0]
   84ba4:	681a      	ldr	r2, [r3, #0]
   84ba6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   84baa:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84bac:	691a      	ldr	r2, [r3, #16]
   84bae:	f042 0210 	orr.w	r2, r2, #16
   84bb2:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   84bb4:	691a      	ldr	r2, [r3, #16]
   84bb6:	f042 0202 	orr.w	r2, r2, #2
   84bba:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   84bbc:	691a      	ldr	r2, [r3, #16]
   84bbe:	f042 0220 	orr.w	r2, r2, #32
   84bc2:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   84bc4:	691a      	ldr	r2, [r3, #16]
   84bc6:	f042 0208 	orr.w	r2, r2, #8
   84bca:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   84bcc:	691a      	ldr	r2, [r3, #16]
   84bce:	f042 0204 	orr.w	r2, r2, #4
   84bd2:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   84bd4:	2208      	movs	r2, #8
   84bd6:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84bd8:	2204      	movs	r2, #4
   84bda:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84bdc:	2210      	movs	r2, #16
   84bde:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84be0:	2202      	movs	r2, #2
   84be2:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84be4:	2220      	movs	r2, #32
   84be6:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   84be8:	201d      	movs	r0, #29
   84bea:	4b09      	ldr	r3, [pc, #36]	; (84c10 <udd_attach+0x94>)
   84bec:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84bee:	b92c      	cbnz	r4, 84bfc <udd_attach+0x80>
		cpu_irq_enable();
   84bf0:	4b03      	ldr	r3, [pc, #12]	; (84c00 <udd_attach+0x84>)
   84bf2:	2201      	movs	r2, #1
   84bf4:	701a      	strb	r2, [r3, #0]
   84bf6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84bfa:	b662      	cpsie	i
}
   84bfc:	bd10      	pop	{r4, pc}
   84bfe:	bf00      	nop
   84c00:	20000982 	.word	0x20000982
   84c04:	000840c9 	.word	0x000840c9
   84c08:	00083f51 	.word	0x00083f51
   84c0c:	400a4000 	.word	0x400a4000
   84c10:	00083f7d 	.word	0x00083f7d

00084c14 <udd_enable>:
{
   84c14:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   84c16:	4b2a      	ldr	r3, [pc, #168]	; (84cc0 <udd_enable+0xac>)
   84c18:	4798      	blx	r3
	udd_enable_periph_ck();
   84c1a:	201d      	movs	r0, #29
   84c1c:	4b29      	ldr	r3, [pc, #164]	; (84cc4 <udd_enable+0xb0>)
   84c1e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c20:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84c24:	b672      	cpsid	i
   84c26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84c2a:	2300      	movs	r3, #0
   84c2c:	4a26      	ldr	r2, [pc, #152]	; (84cc8 <udd_enable+0xb4>)
   84c2e:	7013      	strb	r3, [r2, #0]
	udd_enable_periph();
   84c30:	4926      	ldr	r1, [pc, #152]	; (84ccc <udd_enable+0xb8>)
   84c32:	680a      	ldr	r2, [r1, #0]
   84c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84c38:	600a      	str	r2, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84c3a:	4a25      	ldr	r2, [pc, #148]	; (84cd0 <udd_enable+0xbc>)
   84c3c:	2150      	movs	r1, #80	; 0x50
   84c3e:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84c42:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   84c46:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   84c48:	4822      	ldr	r0, [pc, #136]	; (84cd4 <udd_enable+0xc0>)
   84c4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84c4e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   84c52:	7d12      	ldrb	r2, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   84c54:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84c58:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   84c60:	f36f 0282 	bfc	r2, #2, #1
   84c64:	750a      	strb	r2, [r1, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84c66:	3301      	adds	r3, #1
   84c68:	2b06      	cmp	r3, #6
   84c6a:	d1ee      	bne.n	84c4a <udd_enable+0x36>
	udd_high_speed_enable();
   84c6c:	4a17      	ldr	r2, [pc, #92]	; (84ccc <udd_enable+0xb8>)
   84c6e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84c72:	f023 0303 	bic.w	r3, r3, #3
   84c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84c7a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84c7e:	4b16      	ldr	r3, [pc, #88]	; (84cd8 <udd_enable+0xc4>)
   84c80:	4798      	blx	r3
	udd_b_idle = false;
   84c82:	2300      	movs	r3, #0
   84c84:	4a15      	ldr	r2, [pc, #84]	; (84cdc <udd_enable+0xc8>)
   84c86:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84c8c:	b672      	cpsid	i
   84c8e:	f3bf 8f5f 	dmb	sy
   84c92:	4a0d      	ldr	r2, [pc, #52]	; (84cc8 <udd_enable+0xb4>)
   84c94:	7013      	strb	r3, [r2, #0]
   84c96:	4a12      	ldr	r2, [pc, #72]	; (84ce0 <udd_enable+0xcc>)
   84c98:	78d3      	ldrb	r3, [r2, #3]
   84c9a:	3301      	adds	r3, #1
   84c9c:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84c9e:	b929      	cbnz	r1, 84cac <udd_enable+0x98>
		cpu_irq_enable();
   84ca0:	4b09      	ldr	r3, [pc, #36]	; (84cc8 <udd_enable+0xb4>)
   84ca2:	2201      	movs	r2, #1
   84ca4:	701a      	strb	r2, [r3, #0]
   84ca6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84caa:	b662      	cpsie	i
	udd_attach();
   84cac:	4b0d      	ldr	r3, [pc, #52]	; (84ce4 <udd_enable+0xd0>)
   84cae:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84cb0:	b92c      	cbnz	r4, 84cbe <udd_enable+0xaa>
		cpu_irq_enable();
   84cb2:	4b05      	ldr	r3, [pc, #20]	; (84cc8 <udd_enable+0xb4>)
   84cb4:	2201      	movs	r2, #1
   84cb6:	701a      	strb	r2, [r3, #0]
   84cb8:	f3bf 8f5f 	dmb	sy
   84cbc:	b662      	cpsie	i
}
   84cbe:	bd10      	pop	{r4, pc}
   84cc0:	00082f95 	.word	0x00082f95
   84cc4:	00083f51 	.word	0x00083f51
   84cc8:	20000982 	.word	0x20000982
   84ccc:	400a4000 	.word	0x400a4000
   84cd0:	e000e100 	.word	0xe000e100
   84cd4:	20002108 	.word	0x20002108
   84cd8:	00083fb9 	.word	0x00083fb9
   84cdc:	200020fe 	.word	0x200020fe
   84ce0:	20002688 	.word	0x20002688
   84ce4:	00084b7d 	.word	0x00084b7d

00084ce8 <udd_detach>:
{
   84ce8:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   84cea:	201d      	movs	r0, #29
   84cec:	4b08      	ldr	r3, [pc, #32]	; (84d10 <udd_detach+0x28>)
   84cee:	4798      	blx	r3
	udd_detach_device();
   84cf0:	4b08      	ldr	r3, [pc, #32]	; (84d14 <udd_detach+0x2c>)
   84cf2:	681a      	ldr	r2, [r3, #0]
   84cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   84cf8:	601a      	str	r2, [r3, #0]
   84cfa:	681a      	ldr	r2, [r3, #0]
   84cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84d00:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   84d02:	201d      	movs	r0, #29
   84d04:	4b04      	ldr	r3, [pc, #16]	; (84d18 <udd_detach+0x30>)
   84d06:	4798      	blx	r3
	udd_sleep_mode(false);
   84d08:	2000      	movs	r0, #0
   84d0a:	4b04      	ldr	r3, [pc, #16]	; (84d1c <udd_detach+0x34>)
   84d0c:	4798      	blx	r3
}
   84d0e:	bd08      	pop	{r3, pc}
   84d10:	00083f51 	.word	0x00083f51
   84d14:	400a4000 	.word	0x400a4000
   84d18:	00083f7d 	.word	0x00083f7d
   84d1c:	000840c9 	.word	0x000840c9

00084d20 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   84d20:	4b02      	ldr	r3, [pc, #8]	; (84d2c <udd_is_high_speed+0xc>)
   84d22:	6958      	ldr	r0, [r3, #20]
}
   84d24:	f000 0001 	and.w	r0, r0, #1
   84d28:	4770      	bx	lr
   84d2a:	bf00      	nop
   84d2c:	400a4000 	.word	0x400a4000

00084d30 <udd_set_address>:
	udd_disable_address();
   84d30:	4b08      	ldr	r3, [pc, #32]	; (84d54 <udd_set_address+0x24>)
   84d32:	681a      	ldr	r2, [r3, #0]
   84d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84d38:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   84d3a:	681a      	ldr	r2, [r3, #0]
   84d3c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84d40:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84d44:	4302      	orrs	r2, r0
   84d46:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84d48:	681a      	ldr	r2, [r3, #0]
   84d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84d4e:	601a      	str	r2, [r3, #0]
}
   84d50:	4770      	bx	lr
   84d52:	bf00      	nop
   84d54:	400a4000 	.word	0x400a4000

00084d58 <udd_getaddress>:
	return udd_get_configured_address();
   84d58:	4b02      	ldr	r3, [pc, #8]	; (84d64 <udd_getaddress+0xc>)
   84d5a:	6818      	ldr	r0, [r3, #0]
}
   84d5c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84d60:	4770      	bx	lr
   84d62:	bf00      	nop
   84d64:	400a4000 	.word	0x400a4000

00084d68 <udd_get_frame_number>:
	return udd_frame_number();
   84d68:	4b02      	ldr	r3, [pc, #8]	; (84d74 <udd_get_frame_number+0xc>)
   84d6a:	6858      	ldr	r0, [r3, #4]
}
   84d6c:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   84d70:	4770      	bx	lr
   84d72:	bf00      	nop
   84d74:	400a4000 	.word	0x400a4000

00084d78 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84d78:	4b02      	ldr	r3, [pc, #8]	; (84d84 <udd_get_micro_frame_number+0xc>)
   84d7a:	6858      	ldr	r0, [r3, #4]
}
   84d7c:	f000 0007 	and.w	r0, r0, #7
   84d80:	4770      	bx	lr
   84d82:	bf00      	nop
   84d84:	400a4000 	.word	0x400a4000

00084d88 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84d88:	4b01      	ldr	r3, [pc, #4]	; (84d90 <udd_set_setup_payload+0x8>)
   84d8a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84d8c:	8199      	strh	r1, [r3, #12]
}
   84d8e:	4770      	bx	lr
   84d90:	2000269c 	.word	0x2000269c

00084d94 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84d94:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84d98:	2a06      	cmp	r2, #6
   84d9a:	d900      	bls.n	84d9e <udd_ep_free+0xa>
   84d9c:	4770      	bx	lr
{
   84d9e:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   84da0:	0153      	lsls	r3, r2, #5
   84da2:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   84da6:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   84daa:	2101      	movs	r1, #1
   84dac:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   84db0:	4603      	mov	r3, r0
   84db2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   84db6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   84dba:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84dbe:	1e55      	subs	r5, r2, #1
   84dc0:	4c08      	ldr	r4, [pc, #32]	; (84de4 <udd_ep_free+0x50>)
   84dc2:	fa05 f601 	lsl.w	r6, r5, r1
   84dc6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   84dca:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   84dce:	4b06      	ldr	r3, [pc, #24]	; (84de8 <udd_ep_free+0x54>)
   84dd0:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84dd2:	4435      	add	r5, r6
   84dd4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   84dd8:	7d23      	ldrb	r3, [r4, #20]
   84dda:	f36f 0382 	bfc	r3, #2, #1
   84dde:	7523      	strb	r3, [r4, #20]
}
   84de0:	bd70      	pop	{r4, r5, r6, pc}
   84de2:	bf00      	nop
   84de4:	20002108 	.word	0x20002108
   84de8:	00084375 	.word	0x00084375

00084dec <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84dec:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   84df0:	0143      	lsls	r3, r0, #5
   84df2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84df6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84dfa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   84dfe:	f013 0f20 	tst.w	r3, #32
   84e02:	d109      	bne.n	84e18 <udd_ep_is_halted+0x2c>
   84e04:	3801      	subs	r0, #1
   84e06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84e0a:	4b04      	ldr	r3, [pc, #16]	; (84e1c <udd_ep_is_halted+0x30>)
   84e0c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   84e10:	7d00      	ldrb	r0, [r0, #20]
   84e12:	f3c0 0080 	ubfx	r0, r0, #2, #1
   84e16:	4770      	bx	lr
   84e18:	2001      	movs	r0, #1
}
   84e1a:	4770      	bx	lr
   84e1c:	20002108 	.word	0x20002108

00084e20 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84e20:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84e24:	2b06      	cmp	r3, #6
   84e26:	d851      	bhi.n	84ecc <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84e28:	015a      	lsls	r2, r3, #5
   84e2a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84e2e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84e32:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84e36:	f012 0f20 	tst.w	r2, #32
   84e3a:	d149      	bne.n	84ed0 <udd_ep_set_halt+0xb0>
{
   84e3c:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   84e3e:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84e40:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   84e44:	4a25      	ldr	r2, [pc, #148]	; (84edc <udd_ep_set_halt+0xbc>)
   84e46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   84e4a:	7d12      	ldrb	r2, [r2, #20]
   84e4c:	f012 0f04 	tst.w	r2, #4
   84e50:	d140      	bne.n	84ed4 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   84e52:	f012 0f01 	tst.w	r2, #1
   84e56:	d13f      	bne.n	84ed8 <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84e58:	f010 0f80 	tst.w	r0, #128	; 0x80
   84e5c:	d114      	bne.n	84e88 <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84e5e:	015b      	lsls	r3, r3, #5
   84e60:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84e64:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84e68:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84e6c:	f022 0202 	bic.w	r2, r2, #2
   84e70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   84e74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84e78:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   84e7c:	2220      	movs	r2, #32
   84e7e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   84e82:	2001      	movs	r0, #1
}
   84e84:	bc10      	pop	{r4}
   84e86:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84e88:	015a      	lsls	r2, r3, #5
   84e8a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84e8e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84e92:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84e96:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84e9a:	d0e0      	beq.n	84e5e <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   84e9c:	4a0f      	ldr	r2, [pc, #60]	; (84edc <udd_ep_set_halt+0xbc>)
   84e9e:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   84ea2:	7d0a      	ldrb	r2, [r1, #20]
   84ea4:	f042 0204 	orr.w	r2, r2, #4
   84ea8:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   84eaa:	490d      	ldr	r1, [pc, #52]	; (84ee0 <udd_ep_set_halt+0xc0>)
   84eac:	f103 0208 	add.w	r2, r3, #8
   84eb0:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   84eb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84eb8:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   84eba:	6908      	ldr	r0, [r1, #16]
   84ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
   84ec0:	fa02 f303 	lsl.w	r3, r2, r3
   84ec4:	4303      	orrs	r3, r0
   84ec6:	610b      	str	r3, [r1, #16]
			return true;
   84ec8:	2001      	movs	r0, #1
   84eca:	e7db      	b.n	84e84 <udd_ep_set_halt+0x64>
		return false;
   84ecc:	2000      	movs	r0, #0
   84ece:	4770      	bx	lr
		return true; // Already STALL
   84ed0:	2001      	movs	r0, #1
}
   84ed2:	4770      	bx	lr
		return true; // Already STALL
   84ed4:	2001      	movs	r0, #1
   84ed6:	e7d5      	b.n	84e84 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   84ed8:	2000      	movs	r0, #0
   84eda:	e7d3      	b.n	84e84 <udd_ep_set_halt+0x64>
   84edc:	20002108 	.word	0x20002108
   84ee0:	400a4000 	.word	0x400a4000

00084ee4 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   84ee4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   84ee8:	2806      	cmp	r0, #6
   84eea:	d862      	bhi.n	84fb2 <udd_ep_clear_halt+0xce>
{
   84eec:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   84eee:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   84ef0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   84ef4:	4b37      	ldr	r3, [pc, #220]	; (84fd4 <udd_ep_clear_halt+0xf0>)
   84ef6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   84efa:	7d1b      	ldrb	r3, [r3, #20]
   84efc:	f013 0f04 	tst.w	r3, #4
   84f00:	d05b      	beq.n	84fba <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   84f02:	460b      	mov	r3, r1
   84f04:	4933      	ldr	r1, [pc, #204]	; (84fd4 <udd_ep_clear_halt+0xf0>)
   84f06:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84f0a:	7d19      	ldrb	r1, [r3, #20]
   84f0c:	f36f 0182 	bfc	r1, #2, #1
   84f10:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   84f12:	4b31      	ldr	r3, [pc, #196]	; (84fd8 <udd_ep_clear_halt+0xf4>)
   84f14:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   84f18:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   84f1c:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   84f20:	6919      	ldr	r1, [r3, #16]
   84f22:	f44f 7480 	mov.w	r4, #256	; 0x100
   84f26:	4084      	lsls	r4, r0
   84f28:	ea21 0104 	bic.w	r1, r1, r4
   84f2c:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   84f2e:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   84f32:	f013 0f20 	tst.w	r3, #32
   84f36:	d024      	beq.n	84f82 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   84f38:	0143      	lsls	r3, r0, #5
   84f3a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f3e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f42:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84f46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84f4a:	d00b      	beq.n	84f64 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   84f4c:	0143      	lsls	r3, r0, #5
   84f4e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f52:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84f5a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   84f5e:	2140      	movs	r1, #64	; 0x40
   84f60:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   84f64:	0143      	lsls	r3, r0, #5
   84f66:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f6a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f6e:	2120      	movs	r1, #32
   84f70:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   84f74:	4618      	mov	r0, r3
   84f76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   84f7a:	f043 0302 	orr.w	r3, r3, #2
   84f7e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   84f82:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   84f86:	4913      	ldr	r1, [pc, #76]	; (84fd4 <udd_ep_clear_halt+0xf0>)
   84f88:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84f8c:	7d1b      	ldrb	r3, [r3, #20]
   84f8e:	f013 0f01 	tst.w	r3, #1
   84f92:	d010      	beq.n	84fb6 <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   84f94:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   84f98:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84f9c:	7d18      	ldrb	r0, [r3, #20]
   84f9e:	f36f 0000 	bfc	r0, #0, #1
   84fa2:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   84fa4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   84fa8:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   84fac:	4798      	blx	r3
	return true;
   84fae:	2001      	movs	r0, #1
   84fb0:	e002      	b.n	84fb8 <udd_ep_clear_halt+0xd4>
		return false;
   84fb2:	2000      	movs	r0, #0
}
   84fb4:	4770      	bx	lr
	return true;
   84fb6:	2001      	movs	r0, #1
}
   84fb8:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   84fba:	0143      	lsls	r3, r0, #5
   84fbc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84fc0:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84fc4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84fc8:	f013 0f20 	tst.w	r3, #32
   84fcc:	d1b4      	bne.n	84f38 <udd_ep_clear_halt+0x54>
	return true;
   84fce:	2001      	movs	r0, #1
   84fd0:	e7f2      	b.n	84fb8 <udd_ep_clear_halt+0xd4>
   84fd2:	bf00      	nop
   84fd4:	20002108 	.word	0x20002108
   84fd8:	400a4000 	.word	0x400a4000

00084fdc <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   84fdc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   84fe0:	2806      	cmp	r0, #6
   84fe2:	d868      	bhi.n	850b6 <udd_ep_run+0xda>
{
   84fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   84fe6:	0144      	lsls	r4, r0, #5
   84fe8:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   84fec:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   84ff0:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   84ff4:	f014 0f01 	tst.w	r4, #1
   84ff8:	d05f      	beq.n	850ba <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   84ffa:	0144      	lsls	r4, r0, #5
   84ffc:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85000:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85004:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   85008:	f014 0f20 	tst.w	r4, #32
   8500c:	d157      	bne.n	850be <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   8500e:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   85010:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   85014:	4d2d      	ldr	r5, [pc, #180]	; (850cc <udd_ep_run+0xf0>)
   85016:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   8501a:	7d2d      	ldrb	r5, [r5, #20]
   8501c:	f015 0f04 	tst.w	r5, #4
   85020:	d14f      	bne.n	850c2 <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85022:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   85026:	b672      	cpsid	i
   85028:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8502c:	4d28      	ldr	r5, [pc, #160]	; (850d0 <udd_ep_run+0xf4>)
   8502e:	2600      	movs	r6, #0
   85030:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   85032:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   85036:	4e25      	ldr	r6, [pc, #148]	; (850cc <udd_ep_run+0xf0>)
   85038:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8503c:	7d2d      	ldrb	r5, [r5, #20]
   8503e:	f015 0f01 	tst.w	r5, #1
   85042:	d121      	bne.n	85088 <udd_ep_run+0xac>
	ptr_job->busy = true;
   85044:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   85048:	4e20      	ldr	r6, [pc, #128]	; (850cc <udd_ep_run+0xf0>)
   8504a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8504e:	7d2e      	ldrb	r6, [r5, #20]
   85050:	f046 0601 	orr.w	r6, r6, #1
   85054:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   85056:	b92f      	cbnz	r7, 85064 <udd_ep_run+0x88>
		cpu_irq_enable();
   85058:	4d1d      	ldr	r5, [pc, #116]	; (850d0 <udd_ep_run+0xf4>)
   8505a:	2601      	movs	r6, #1
   8505c:	702e      	strb	r6, [r5, #0]
   8505e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85062:	b662      	cpsie	i
	ptr_job->buf = buf;
   85064:	4e19      	ldr	r6, [pc, #100]	; (850cc <udd_ep_run+0xf0>)
   85066:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   8506a:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   8506e:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   85070:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   85072:	2200      	movs	r2, #0
   85074:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   85076:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   85078:	9a06      	ldr	r2, [sp, #24]
   8507a:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8507e:	b961      	cbnz	r1, 8509a <udd_ep_run+0xbe>
   85080:	fab3 f383 	clz	r3, r3
   85084:	095b      	lsrs	r3, r3, #5
   85086:	e009      	b.n	8509c <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   85088:	b9ef      	cbnz	r7, 850c6 <udd_ep_run+0xea>
		cpu_irq_enable();
   8508a:	4b11      	ldr	r3, [pc, #68]	; (850d0 <udd_ep_run+0xf4>)
   8508c:	2201      	movs	r2, #1
   8508e:	701a      	strb	r2, [r3, #0]
   85090:	f3bf 8f5f 	dmb	sy
   85094:	b662      	cpsie	i
		return false; // Job already on going
   85096:	2000      	movs	r0, #0
}
   85098:	e010      	b.n	850bc <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8509a:	2301      	movs	r3, #1
   8509c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   850a0:	4a0a      	ldr	r2, [pc, #40]	; (850cc <udd_ep_run+0xf0>)
   850a2:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   850a6:	7d22      	ldrb	r2, [r4, #20]
   850a8:	f363 0241 	bfi	r2, r3, #1, #1
   850ac:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   850ae:	4b09      	ldr	r3, [pc, #36]	; (850d4 <udd_ep_run+0xf8>)
   850b0:	4798      	blx	r3
	return true;
   850b2:	2001      	movs	r0, #1
   850b4:	e002      	b.n	850bc <udd_ep_run+0xe0>
		return false;
   850b6:	2000      	movs	r0, #0
}
   850b8:	4770      	bx	lr
		return false; // Endpoint is halted
   850ba:	2000      	movs	r0, #0
}
   850bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   850be:	2000      	movs	r0, #0
   850c0:	e7fc      	b.n	850bc <udd_ep_run+0xe0>
   850c2:	2000      	movs	r0, #0
   850c4:	e7fa      	b.n	850bc <udd_ep_run+0xe0>
		return false; // Job already on going
   850c6:	2000      	movs	r0, #0
   850c8:	e7f8      	b.n	850bc <udd_ep_run+0xe0>
   850ca:	bf00      	nop
   850cc:	20002108 	.word	0x20002108
   850d0:	20000982 	.word	0x20000982
   850d4:	000843ad 	.word	0x000843ad

000850d8 <udd_ep_alloc>:
{
   850d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   850dc:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   850de:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   850e2:	2d06      	cmp	r5, #6
   850e4:	f200 812a 	bhi.w	8533c <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   850e8:	016c      	lsls	r4, r5, #5
   850ea:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   850ee:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   850f2:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   850f6:	f014 0401 	ands.w	r4, r4, #1
   850fa:	f040 8123 	bne.w	85344 <udd_ep_alloc+0x26c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   850fe:	f001 0c03 	and.w	ip, r1, #3
   85102:	f1bc 0f02 	cmp.w	ip, #2
   85106:	d05e      	beq.n	851c6 <udd_ep_alloc+0xee>
   85108:	f1bc 0f03 	cmp.w	ip, #3
   8510c:	d064      	beq.n	851d8 <udd_ep_alloc+0x100>
   8510e:	f1bc 0f01 	cmp.w	ip, #1
   85112:	d001      	beq.n	85118 <udd_ep_alloc+0x40>
   85114:	2000      	movs	r0, #0
   85116:	e112      	b.n	8533e <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85118:	2d00      	cmp	r5, #0
   8511a:	d052      	beq.n	851c2 <udd_ep_alloc+0xea>
   8511c:	1eeb      	subs	r3, r5, #3
   8511e:	b2db      	uxtb	r3, r3
   85120:	2b01      	cmp	r3, #1
   85122:	bf94      	ite	ls
   85124:	2300      	movls	r3, #0
   85126:	2301      	movhi	r3, #1
	if (b_iso_hbw) {
   85128:	469e      	mov	lr, r3
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8512a:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   8512e:	2b00      	cmp	r3, #0
   85130:	d054      	beq.n	851dc <udd_ep_alloc+0x104>
		switch(MaxEndpointSize & (0x3u << 11)) {
   85132:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   85136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   8513a:	d04a      	beq.n	851d2 <udd_ep_alloc+0xfa>
   8513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   85140:	bf08      	it	eq
   85142:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   85146:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   8514a:	b292      	uxth	r2, r2
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8514c:	f04f 0802 	mov.w	r8, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85150:	016f      	lsls	r7, r5, #5
   85152:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
   85156:	f507 2720 	add.w	r7, r7, #655360	; 0xa0000
   8515a:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
   8515e:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   85162:	f026 0603 	bic.w	r6, r6, #3
   85166:	010b      	lsls	r3, r1, #4
   85168:	f003 0330 	and.w	r3, r3, #48	; 0x30
   8516c:	f010 0f80 	tst.w	r0, #128	; 0x80
   85170:	bf0c      	ite	eq
   85172:	4621      	moveq	r1, r4
   85174:	2108      	movne	r1, #8
   85176:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8517a:	d237      	bcs.n	851ec <udd_ep_alloc+0x114>
   8517c:	2a08      	cmp	r2, #8
   8517e:	bf38      	it	cc
   85180:	2208      	movcc	r2, #8
   85182:	0052      	lsls	r2, r2, #1
   85184:	3a01      	subs	r2, #1
   85186:	fab2 f282 	clz	r2, r2
   8518a:	f1c2 021c 	rsb	r2, r2, #28
   8518e:	4333      	orrs	r3, r6
   85190:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   85194:	430b      	orrs	r3, r1
   85196:	f1be 0f00 	cmp.w	lr, #0
   8519a:	d001      	beq.n	851a0 <udd_ep_alloc+0xc8>
   8519c:	ea4f 240c 	mov.w	r4, ip, lsl #8
   851a0:	431a      	orrs	r2, r3
   851a2:	4322      	orrs	r2, r4
   851a4:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   851a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   851ac:	2b00      	cmp	r3, #0
   851ae:	f280 80cd 	bge.w	8534c <udd_ep_alloc+0x274>
	udd_enable_endpoint(ep);
   851b2:	2301      	movs	r3, #1
   851b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   851b8:	2306      	movs	r3, #6
	ep_allocated = 0;
   851ba:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   851bc:	4865      	ldr	r0, [pc, #404]	; (85354 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   851be:	2401      	movs	r4, #1
   851c0:	e01b      	b.n	851fa <udd_ep_alloc+0x122>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   851c2:	2300      	movs	r3, #0
   851c4:	e7b0      	b.n	85128 <udd_ep_alloc+0x50>
		nb_bank = UDD_BULK_NB_BANK(ep);
   851c6:	2d03      	cmp	r5, #3
   851c8:	bf34      	ite	cc
   851ca:	46e0      	movcc	r8, ip
   851cc:	f04f 0801 	movcs.w	r8, #1
   851d0:	e004      	b.n	851dc <udd_ep_alloc+0x104>
			nb_tran = 2;
   851d2:	f04f 0c02 	mov.w	ip, #2
   851d6:	e7b6      	b.n	85146 <udd_ep_alloc+0x6e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   851d8:	f04f 0801 	mov.w	r8, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   851dc:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   851e0:	f040 80b2 	bne.w	85348 <udd_ep_alloc+0x270>
   851e4:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   851e8:	46f4      	mov	ip, lr
   851ea:	e7b1      	b.n	85150 <udd_ep_alloc+0x78>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   851ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
   851f0:	e7c9      	b.n	85186 <udd_ep_alloc+0xae>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   851f2:	3b01      	subs	r3, #1
   851f4:	b2db      	uxtb	r3, r3
   851f6:	429d      	cmp	r5, r3
   851f8:	d81e      	bhi.n	85238 <udd_ep_alloc+0x160>
		if (Is_udd_endpoint_enabled(i)) {
   851fa:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   851fe:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85202:	f012 0f01 	tst.w	r2, #1
   85206:	d0f4      	beq.n	851f2 <udd_ep_alloc+0x11a>
			bank = udd_get_endpoint_bank(i);
   85208:	015a      	lsls	r2, r3, #5
   8520a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8520e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   85212:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   85216:	f3c1 1181 	ubfx	r1, r1, #6, #2
   8521a:	005f      	lsls	r7, r3, #1
   8521c:	40b9      	lsls	r1, r7
   8521e:	430e      	orrs	r6, r1
   85220:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   85222:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   85226:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   8522a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8522e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   85232:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   85236:	e7dc      	b.n	851f2 <udd_ep_alloc+0x11a>
   85238:	462c      	mov	r4, r5
   8523a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   8523e:	4d46      	ldr	r5, [pc, #280]	; (85358 <udd_ep_alloc+0x280>)
   85240:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		bool b_restart = ptr_job->busy;
   85244:	4f44      	ldr	r7, [pc, #272]	; (85358 <udd_ep_alloc+0x280>)
		udd_enable_endpoint(i);
   85246:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   8524a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8535c <udd_ep_alloc+0x284>
   8524e:	e023      	b.n	85298 <udd_ep_alloc+0x1c0>
			if (NULL == ptr_job->call_trans) {
   85250:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   85254:	4a40      	ldr	r2, [pc, #256]	; (85358 <udd_ep_alloc+0x280>)
   85256:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   8525a:	2c00      	cmp	r4, #0
   8525c:	d078      	beq.n	85350 <udd_ep_alloc+0x278>
			if (Is_udd_endpoint_in(i)) {
   8525e:	f10c 0c08 	add.w	ip, ip, #8
   85262:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   85266:	4b3b      	ldr	r3, [pc, #236]	; (85354 <udd_ep_alloc+0x27c>)
   85268:	f853 300c 	ldr.w	r3, [r3, ip]
   8526c:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   85270:	bf18      	it	ne
   85272:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85276:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   8527a:	4b37      	ldr	r3, [pc, #220]	; (85358 <udd_ep_alloc+0x280>)
   8527c:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   85280:	4602      	mov	r2, r0
   85282:	f8de 100c 	ldr.w	r1, [lr, #12]
   85286:	2001      	movs	r0, #1
   85288:	47a0      	blx	r4
			return false;
   8528a:	2000      	movs	r0, #0
   8528c:	e057      	b.n	8533e <udd_ep_alloc+0x266>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8528e:	3401      	adds	r4, #1
   85290:	3518      	adds	r5, #24
   85292:	b2e3      	uxtb	r3, r4
   85294:	2b06      	cmp	r3, #6
   85296:	d84f      	bhi.n	85338 <udd_ep_alloc+0x260>
   85298:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8529a:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   8529c:	0063      	lsls	r3, r4, #1
   8529e:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   852a2:	f013 0203 	ands.w	r2, r3, #3
   852a6:	d0f2      	beq.n	8528e <udd_ep_alloc+0x1b6>
   852a8:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   852ac:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   852b0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   852b4:	7d0b      	ldrb	r3, [r1, #20]
   852b6:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   852ba:	f36f 0300 	bfc	r3, #0, #1
   852be:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   852c0:	0163      	lsls	r3, r4, #5
   852c2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   852c6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   852ca:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   852ce:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   852d2:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   852d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   852da:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   852de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   852e2:	2a00      	cmp	r2, #0
   852e4:	dab4      	bge.n	85250 <udd_ep_alloc+0x178>
		udd_enable_endpoint_bank_autoswitch(i);
   852e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   852ea:	f042 0202 	orr.w	r2, r2, #2
   852ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   852f2:	f1ba 0f00 	cmp.w	sl, #0
   852f6:	d0ca      	beq.n	8528e <udd_ep_alloc+0x1b6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   852f8:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   852fc:	f855 2c08 	ldr.w	r2, [r5, #-8]
   85300:	ebab 0102 	sub.w	r1, fp, r2
   85304:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   85308:	f855 3c10 	ldr.w	r3, [r5, #-16]
   8530c:	eb02 0a03 	add.w	sl, r2, r3
   85310:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   85314:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   85318:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   8531c:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   85320:	f855 3c18 	ldr.w	r3, [r5, #-24]
   85324:	9300      	str	r3, [sp, #0]
   85326:	ebaa 030b 	sub.w	r3, sl, fp
   8532a:	440a      	add	r2, r1
   8532c:	f3cc 0140 	ubfx	r1, ip, #1, #1
   85330:	47c8      	blx	r9
			if (!b_restart) {
   85332:	2800      	cmp	r0, #0
   85334:	d1ab      	bne.n	8528e <udd_ep_alloc+0x1b6>
   85336:	e002      	b.n	8533e <udd_ep_alloc+0x266>
	return true;
   85338:	2001      	movs	r0, #1
   8533a:	e000      	b.n	8533e <udd_ep_alloc+0x266>
		return false;
   8533c:	2000      	movs	r0, #0
}
   8533e:	b003      	add	sp, #12
   85340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   85344:	2000      	movs	r0, #0
   85346:	e7fa      	b.n	8533e <udd_ep_alloc+0x266>
		return false;
   85348:	2000      	movs	r0, #0
   8534a:	e7f8      	b.n	8533e <udd_ep_alloc+0x266>
		return false;
   8534c:	2000      	movs	r0, #0
   8534e:	e7f6      	b.n	8533e <udd_ep_alloc+0x266>
				return false;
   85350:	2000      	movs	r0, #0
   85352:	e7f4      	b.n	8533e <udd_ep_alloc+0x266>
   85354:	400a4000 	.word	0x400a4000
   85358:	20002108 	.word	0x20002108
   8535c:	00084fdd 	.word	0x00084fdd

00085360 <udd_ep_abort>:
{
   85360:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85362:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   85366:	4b18      	ldr	r3, [pc, #96]	; (853c8 <udd_ep_abort+0x68>)
   85368:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   8536c:	2100      	movs	r1, #0
   8536e:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   85370:	f010 0f80 	tst.w	r0, #128	; 0x80
   85374:	d109      	bne.n	8538a <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85376:	1e50      	subs	r0, r2, #1
   85378:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8537c:	2101      	movs	r1, #1
   8537e:	4b13      	ldr	r3, [pc, #76]	; (853cc <udd_ep_abort+0x6c>)
   85380:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   85384:	4b12      	ldr	r3, [pc, #72]	; (853d0 <udd_ep_abort+0x70>)
   85386:	4798      	blx	r3
}
   85388:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   8538a:	0151      	lsls	r1, r2, #5
   8538c:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85390:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85394:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   85398:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   8539c:	d0eb      	beq.n	85376 <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   8539e:	0153      	lsls	r3, r2, #5
   853a0:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   853a4:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   853a8:	f501 748a 	add.w	r4, r1, #276	; 0x114
   853ac:	f44f 7000 	mov.w	r0, #512	; 0x200
   853b0:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   853b2:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   853b6:	f413 7f00 	tst.w	r3, #512	; 0x200
   853ba:	d1fa      	bne.n	853b2 <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   853bc:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   853c0:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   853c4:	d1f4      	bne.n	853b0 <udd_ep_abort+0x50>
   853c6:	e7d6      	b.n	85376 <udd_ep_abort+0x16>
   853c8:	400a4300 	.word	0x400a4300
   853cc:	20002108 	.word	0x20002108
   853d0:	00084375 	.word	0x00084375

000853d4 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   853d4:	4a07      	ldr	r2, [pc, #28]	; (853f4 <udd_test_mode_j+0x20>)
   853d6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   853da:	f023 0303 	bic.w	r3, r3, #3
   853de:	f043 0302 	orr.w	r3, r3, #2
   853e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   853e6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   853ea:	f043 0304 	orr.w	r3, r3, #4
   853ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   853f2:	4770      	bx	lr
   853f4:	400a4000 	.word	0x400a4000

000853f8 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   853f8:	4a07      	ldr	r2, [pc, #28]	; (85418 <udd_test_mode_k+0x20>)
   853fa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   853fe:	f023 0303 	bic.w	r3, r3, #3
   85402:	f043 0302 	orr.w	r3, r3, #2
   85406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8540a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8540e:	f043 0308 	orr.w	r3, r3, #8
   85412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85416:	4770      	bx	lr
   85418:	400a4000 	.word	0x400a4000

0008541c <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   8541c:	4a04      	ldr	r2, [pc, #16]	; (85430 <udd_test_mode_se0_nak+0x14>)
   8541e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85422:	f023 0303 	bic.w	r3, r3, #3
   85426:	f043 0302 	orr.w	r3, r3, #2
   8542a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8542e:	4770      	bx	lr
   85430:	400a4000 	.word	0x400a4000

00085434 <udd_test_mode_packet>:
{
   85434:	b430      	push	{r4, r5}
   85436:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   85438:	466c      	mov	r4, sp
   8543a:	4d21      	ldr	r5, [pc, #132]	; (854c0 <udd_test_mode_packet+0x8c>)
   8543c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8543e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85448:	e895 0003 	ldmia.w	r5, {r0, r1}
   8544c:	f844 0b04 	str.w	r0, [r4], #4
   85450:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   85452:	4b1c      	ldr	r3, [pc, #112]	; (854c4 <udd_test_mode_packet+0x90>)
   85454:	2101      	movs	r1, #1
   85456:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8545a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8545e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   85462:	f022 0203 	bic.w	r2, r2, #3
   85466:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   8546a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   8546e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   85472:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85476:	f022 0203 	bic.w	r2, r2, #3
   8547a:	f042 0202 	orr.w	r2, r2, #2
   8547e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85482:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85486:	f042 0210 	orr.w	r2, r2, #16
   8548a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   8548e:	466b      	mov	r3, sp
   85490:	480d      	ldr	r0, [pc, #52]	; (854c8 <udd_test_mode_packet+0x94>)
   85492:	aa0e      	add	r2, sp, #56	; 0x38
   85494:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   85496:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   8549a:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   8549c:	f813 1b01 	ldrb.w	r1, [r3], #1
   854a0:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   854a2:	42a3      	cmp	r3, r4
   854a4:	d1f9      	bne.n	8549a <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   854a6:	4b07      	ldr	r3, [pc, #28]	; (854c4 <udd_test_mode_packet+0x90>)
   854a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   854ac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   854b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   854b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   854b8:	b00e      	add	sp, #56	; 0x38
   854ba:	bc30      	pop	{r4, r5}
   854bc:	4770      	bx	lr
   854be:	bf00      	nop
   854c0:	0008cb48 	.word	0x0008cb48
   854c4:	400a4000 	.word	0x400a4000
   854c8:	20180038 	.word	0x20180038

000854cc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   854cc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   854ce:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
   854d2:	d214      	bcs.n	854fe <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   854d4:	00c9      	lsls	r1, r1, #3
   854d6:	084b      	lsrs	r3, r1, #1
   854d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   854dc:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   854e0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   854e2:	1e5c      	subs	r4, r3, #1
   854e4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   854e8:	428c      	cmp	r4, r1
   854ea:	d901      	bls.n	854f0 <usart_set_async_baudrate+0x24>
		return 1;
   854ec:	2001      	movs	r0, #1
   854ee:	e018      	b.n	85522 <usart_set_async_baudrate+0x56>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   854f0:	6841      	ldr	r1, [r0, #4]
   854f2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   854f6:	6041      	str	r1, [r0, #4]
   854f8:	e00d      	b.n	85516 <usart_set_async_baudrate+0x4a>
		return 1;
   854fa:	2001      	movs	r0, #1
   854fc:	e011      	b.n	85522 <usart_set_async_baudrate+0x56>
   854fe:	010c      	lsls	r4, r1, #4
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85500:	0863      	lsrs	r3, r4, #1
   85502:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   85506:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
   8550a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8550c:	1e5c      	subs	r4, r3, #1
   8550e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   85512:	428c      	cmp	r4, r1
   85514:	d8f1      	bhi.n	854fa <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   85516:	0412      	lsls	r2, r2, #16
   85518:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   8551c:	431a      	orrs	r2, r3
   8551e:	6202      	str	r2, [r0, #32]

	return 0;
   85520:	2000      	movs	r0, #0
}
   85522:	bc10      	pop	{r4}
   85524:	4770      	bx	lr
	...

00085528 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   85528:	4b0a      	ldr	r3, [pc, #40]	; (85554 <usart_reset+0x2c>)
   8552a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   8552e:	2300      	movs	r3, #0
   85530:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   85532:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   85534:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   85536:	2388      	movs	r3, #136	; 0x88
   85538:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8553a:	2324      	movs	r3, #36	; 0x24
   8553c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   8553e:	f44f 7380 	mov.w	r3, #256	; 0x100
   85542:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   85544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   85548:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   8554a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   8554e:	6003      	str	r3, [r0, #0]
}
   85550:	4770      	bx	lr
   85552:	bf00      	nop
   85554:	55534100 	.word	0x55534100

00085558 <usart_init_rs232>:
{
   85558:	b570      	push	{r4, r5, r6, lr}
   8555a:	4605      	mov	r5, r0
   8555c:	460c      	mov	r4, r1
   8555e:	4616      	mov	r6, r2
	usart_reset(p_usart);
   85560:	4b0e      	ldr	r3, [pc, #56]	; (8559c <usart_init_rs232+0x44>)
   85562:	4798      	blx	r3
	ul_reg_val = 0;
   85564:	4b0e      	ldr	r3, [pc, #56]	; (855a0 <usart_init_rs232+0x48>)
   85566:	2200      	movs	r2, #0
   85568:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8556a:	b194      	cbz	r4, 85592 <usart_init_rs232+0x3a>
   8556c:	4632      	mov	r2, r6
   8556e:	6821      	ldr	r1, [r4, #0]
   85570:	4628      	mov	r0, r5
   85572:	4b0c      	ldr	r3, [pc, #48]	; (855a4 <usart_init_rs232+0x4c>)
   85574:	4798      	blx	r3
   85576:	b970      	cbnz	r0, 85596 <usart_init_rs232+0x3e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85578:	6863      	ldr	r3, [r4, #4]
   8557a:	68a2      	ldr	r2, [r4, #8]
   8557c:	4313      	orrs	r3, r2
   8557e:	6922      	ldr	r2, [r4, #16]
   85580:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   85582:	68e2      	ldr	r2, [r4, #12]
   85584:	4313      	orrs	r3, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85586:	4a06      	ldr	r2, [pc, #24]	; (855a0 <usart_init_rs232+0x48>)
   85588:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   8558a:	686a      	ldr	r2, [r5, #4]
   8558c:	4313      	orrs	r3, r2
   8558e:	606b      	str	r3, [r5, #4]
}
   85590:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85592:	2001      	movs	r0, #1
   85594:	e7fc      	b.n	85590 <usart_init_rs232+0x38>
   85596:	2001      	movs	r0, #1
   85598:	e7fa      	b.n	85590 <usart_init_rs232+0x38>
   8559a:	bf00      	nop
   8559c:	00085529 	.word	0x00085529
   855a0:	20002198 	.word	0x20002198
   855a4:	000854cd 	.word	0x000854cd

000855a8 <usart_init_sync_master>:
{
   855a8:	b570      	push	{r4, r5, r6, lr}
   855aa:	4606      	mov	r6, r0
   855ac:	460d      	mov	r5, r1
   855ae:	4614      	mov	r4, r2
	usart_reset(p_usart);
   855b0:	4b15      	ldr	r3, [pc, #84]	; (85608 <usart_init_sync_master+0x60>)
   855b2:	4798      	blx	r3
	ul_reg_val = 0;
   855b4:	4b15      	ldr	r3, [pc, #84]	; (8560c <usart_init_sync_master+0x64>)
   855b6:	2200      	movs	r2, #0
   855b8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   855ba:	b305      	cbz	r5, 855fe <usart_init_sync_master+0x56>
   855bc:	682b      	ldr	r3, [r5, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   855be:	eb04 0253 	add.w	r2, r4, r3, lsr #1
   855c2:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   855c6:	1e51      	subs	r1, r2, #1
   855c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   855cc:	4299      	cmp	r1, r3
   855ce:	d818      	bhi.n	85602 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   855d0:	6232      	str	r2, [r6, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   855d2:	6873      	ldr	r3, [r6, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   855d4:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   855d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   855dc:	6073      	str	r3, [r6, #4]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   855de:	686b      	ldr	r3, [r5, #4]
   855e0:	68ea      	ldr	r2, [r5, #12]
   855e2:	4313      	orrs	r3, r2
   855e4:	68aa      	ldr	r2, [r5, #8]
   855e6:	4313      	orrs	r3, r2
   855e8:	692a      	ldr	r2, [r5, #16]
   855ea:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   855ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   855f0:	4a06      	ldr	r2, [pc, #24]	; (8560c <usart_init_sync_master+0x64>)
   855f2:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   855f4:	6872      	ldr	r2, [r6, #4]
   855f6:	4313      	orrs	r3, r2
   855f8:	6073      	str	r3, [r6, #4]
	return 0;
   855fa:	2000      	movs	r0, #0
}
   855fc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   855fe:	2001      	movs	r0, #1
   85600:	e7fc      	b.n	855fc <usart_init_sync_master+0x54>
   85602:	2001      	movs	r0, #1
   85604:	e7fa      	b.n	855fc <usart_init_sync_master+0x54>
   85606:	bf00      	nop
   85608:	00085529 	.word	0x00085529
   8560c:	2000219c 	.word	0x2000219c

00085610 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   85610:	2340      	movs	r3, #64	; 0x40
   85612:	6003      	str	r3, [r0, #0]
}
   85614:	4770      	bx	lr

00085616 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   85616:	2380      	movs	r3, #128	; 0x80
   85618:	6003      	str	r3, [r0, #0]
}
   8561a:	4770      	bx	lr

0008561c <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   8561c:	2310      	movs	r3, #16
   8561e:	6003      	str	r3, [r0, #0]
}
   85620:	4770      	bx	lr

00085622 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   85622:	2320      	movs	r3, #32
   85624:	6003      	str	r3, [r0, #0]
}
   85626:	4770      	bx	lr

00085628 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   85628:	6081      	str	r1, [r0, #8]
}
   8562a:	4770      	bx	lr

0008562c <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   8562c:	60c1      	str	r1, [r0, #12]
}
   8562e:	4770      	bx	lr

00085630 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   85630:	6900      	ldr	r0, [r0, #16]
}
   85632:	4770      	bx	lr

00085634 <usart_get_status>:
	return p_usart->US_CSR;
   85634:	6940      	ldr	r0, [r0, #20]
}
   85636:	4770      	bx	lr

00085638 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   85638:	6940      	ldr	r0, [r0, #20]
}
   8563a:	f3c0 2040 	ubfx	r0, r0, #9, #1
   8563e:	4770      	bx	lr

00085640 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85640:	6943      	ldr	r3, [r0, #20]
   85642:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   85646:	bf1d      	ittte	ne
   85648:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8564c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8564e:	2000      	movne	r0, #0
		return 1;
   85650:	2001      	moveq	r0, #1
}
   85652:	4770      	bx	lr

00085654 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85654:	6943      	ldr	r3, [r0, #20]
   85656:	f013 0f02 	tst.w	r3, #2
   8565a:	d0fb      	beq.n	85654 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   8565c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   85660:	61c1      	str	r1, [r0, #28]
}
   85662:	2000      	movs	r0, #0
   85664:	4770      	bx	lr

00085666 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   85666:	6943      	ldr	r3, [r0, #20]
   85668:	f013 0f01 	tst.w	r3, #1
   8566c:	d005      	beq.n	8567a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8566e:	6983      	ldr	r3, [r0, #24]
   85670:	f3c3 0308 	ubfx	r3, r3, #0, #9
   85674:	600b      	str	r3, [r1, #0]
	return 0;
   85676:	2000      	movs	r0, #0
   85678:	4770      	bx	lr
		return 1;
   8567a:	2001      	movs	r0, #1
}
   8567c:	4770      	bx	lr

0008567e <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8567e:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   85680:	23ac      	movs	r3, #172	; 0xac
   85682:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   85684:	680b      	ldr	r3, [r1, #0]
   85686:	684a      	ldr	r2, [r1, #4]
   85688:	fbb3 f3f2 	udiv	r3, r3, r2
   8568c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8568e:	1e5c      	subs	r4, r3, #1
   85690:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   85694:	4294      	cmp	r4, r2
   85696:	d80b      	bhi.n	856b0 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   85698:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8569a:	688b      	ldr	r3, [r1, #8]
   8569c:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8569e:	f240 2302 	movw	r3, #514	; 0x202
   856a2:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   856a6:	2350      	movs	r3, #80	; 0x50
   856a8:	6003      	str	r3, [r0, #0]

	return 0;
   856aa:	2000      	movs	r0, #0
}
   856ac:	bc10      	pop	{r4}
   856ae:	4770      	bx	lr
		return 1;
   856b0:	2001      	movs	r0, #1
   856b2:	e7fb      	b.n	856ac <uart_init+0x2e>

000856b4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   856b4:	6943      	ldr	r3, [r0, #20]
   856b6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   856ba:	bf1a      	itte	ne
   856bc:	61c1      	strne	r1, [r0, #28]
	return 0;
   856be:	2000      	movne	r0, #0
		return 1;
   856c0:	2001      	moveq	r0, #1
}
   856c2:	4770      	bx	lr

000856c4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   856c4:	6943      	ldr	r3, [r0, #20]
   856c6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   856ca:	bf1d      	ittte	ne
   856cc:	6983      	ldrne	r3, [r0, #24]
   856ce:	700b      	strbne	r3, [r1, #0]
	return 0;
   856d0:	2000      	movne	r0, #0
		return 1;
   856d2:	2001      	moveq	r0, #1
}
   856d4:	4770      	bx	lr

000856d6 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   856d6:	e7fe      	b.n	856d6 <Dummy_Handler>

000856d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   856d8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   856da:	4a1d      	ldr	r2, [pc, #116]	; (85750 <Reset_Handler+0x78>)
   856dc:	4b1d      	ldr	r3, [pc, #116]	; (85754 <Reset_Handler+0x7c>)
   856de:	429a      	cmp	r2, r3
   856e0:	d011      	beq.n	85706 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
   856e2:	461a      	mov	r2, r3
   856e4:	4b1c      	ldr	r3, [pc, #112]	; (85758 <Reset_Handler+0x80>)
   856e6:	429a      	cmp	r2, r3
   856e8:	d20d      	bcs.n	85706 <Reset_Handler+0x2e>
   856ea:	4611      	mov	r1, r2
   856ec:	3b01      	subs	r3, #1
   856ee:	1a9b      	subs	r3, r3, r2
   856f0:	f023 0303 	bic.w	r3, r3, #3
   856f4:	3304      	adds	r3, #4
   856f6:	4a16      	ldr	r2, [pc, #88]	; (85750 <Reset_Handler+0x78>)
   856f8:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
   856fa:	f852 0b04 	ldr.w	r0, [r2], #4
   856fe:	f841 0b04 	str.w	r0, [r1], #4
		for (; pDest < &_erelocate;) {
   85702:	429a      	cmp	r2, r3
   85704:	d1f9      	bne.n	856fa <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   85706:	4a15      	ldr	r2, [pc, #84]	; (8575c <Reset_Handler+0x84>)
   85708:	4b15      	ldr	r3, [pc, #84]	; (85760 <Reset_Handler+0x88>)
   8570a:	429a      	cmp	r2, r3
   8570c:	d20a      	bcs.n	85724 <Reset_Handler+0x4c>
   8570e:	3b01      	subs	r3, #1
   85710:	1a9b      	subs	r3, r3, r2
   85712:	f023 0303 	bic.w	r3, r3, #3
   85716:	3304      	adds	r3, #4
   85718:	4413      	add	r3, r2
		*pDest++ = 0;
   8571a:	2100      	movs	r1, #0
   8571c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   85720:	4293      	cmp	r3, r2
   85722:	d1fb      	bne.n	8571c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   85724:	4b0f      	ldr	r3, [pc, #60]	; (85764 <Reset_Handler+0x8c>)
   85726:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8572a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8572e:	490e      	ldr	r1, [pc, #56]	; (85768 <Reset_Handler+0x90>)
   85730:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   85732:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   85736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8573a:	d203      	bcs.n	85744 <Reset_Handler+0x6c>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8573c:	688b      	ldr	r3, [r1, #8]
   8573e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   85742:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   85744:	4b09      	ldr	r3, [pc, #36]	; (8576c <Reset_Handler+0x94>)
   85746:	4798      	blx	r3

	/* Branch to main function */
	main();
   85748:	4b09      	ldr	r3, [pc, #36]	; (85770 <Reset_Handler+0x98>)
   8574a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8574c:	e7fe      	b.n	8574c <Reset_Handler+0x74>
   8574e:	bf00      	nop
   85750:	0008d06c 	.word	0x0008d06c
   85754:	20000000 	.word	0x20000000
   85758:	20001358 	.word	0x20001358
   8575c:	20001358 	.word	0x20001358
   85760:	200026dc 	.word	0x200026dc
   85764:	00080000 	.word	0x00080000
   85768:	e000ed00 	.word	0xe000ed00
   8576c:	00085f01 	.word	0x00085f01
   85770:	000859fd 	.word	0x000859fd

00085774 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   85774:	4b3d      	ldr	r3, [pc, #244]	; (8586c <SystemCoreClockUpdate+0xf8>)
   85776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   85778:	f002 0303 	and.w	r3, r2, #3
   8577c:	2b01      	cmp	r3, #1
   8577e:	d032      	beq.n	857e6 <SystemCoreClockUpdate+0x72>
   85780:	f012 0f02 	tst.w	r2, #2
   85784:	d11b      	bne.n	857be <SystemCoreClockUpdate+0x4a>
   85786:	b953      	cbnz	r3, 8579e <SystemCoreClockUpdate+0x2a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85788:	4b39      	ldr	r3, [pc, #228]	; (85870 <SystemCoreClockUpdate+0xfc>)
   8578a:	695b      	ldr	r3, [r3, #20]
   8578c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85790:	4b38      	ldr	r3, [pc, #224]	; (85874 <SystemCoreClockUpdate+0x100>)
   85792:	bf14      	ite	ne
   85794:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   85798:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8579c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8579e:	4b33      	ldr	r3, [pc, #204]	; (8586c <SystemCoreClockUpdate+0xf8>)
   857a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   857a6:	2b70      	cmp	r3, #112	; 0x70
   857a8:	d058      	beq.n	8585c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   857aa:	4b30      	ldr	r3, [pc, #192]	; (8586c <SystemCoreClockUpdate+0xf8>)
   857ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   857ae:	f3c2 1202 	ubfx	r2, r2, #4, #3
   857b2:	4b30      	ldr	r3, [pc, #192]	; (85874 <SystemCoreClockUpdate+0x100>)
   857b4:	681b      	ldr	r3, [r3, #0]
   857b6:	40d3      	lsrs	r3, r2
   857b8:	4a2e      	ldr	r2, [pc, #184]	; (85874 <SystemCoreClockUpdate+0x100>)
   857ba:	6013      	str	r3, [r2, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   857bc:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   857be:	4b2b      	ldr	r3, [pc, #172]	; (8586c <SystemCoreClockUpdate+0xf8>)
   857c0:	6a1b      	ldr	r3, [r3, #32]
   857c2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   857c6:	d12a      	bne.n	8581e <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   857c8:	4b2a      	ldr	r3, [pc, #168]	; (85874 <SystemCoreClockUpdate+0x100>)
   857ca:	4a2b      	ldr	r2, [pc, #172]	; (85878 <SystemCoreClockUpdate+0x104>)
   857cc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   857ce:	4b27      	ldr	r3, [pc, #156]	; (8586c <SystemCoreClockUpdate+0xf8>)
   857d0:	6a1b      	ldr	r3, [r3, #32]
   857d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   857d6:	2b10      	cmp	r3, #16
   857d8:	d02e      	beq.n	85838 <SystemCoreClockUpdate+0xc4>
   857da:	2b20      	cmp	r3, #32
   857dc:	d122      	bne.n	85824 <SystemCoreClockUpdate+0xb0>
				SystemCoreClock *= 3U;
   857de:	4b25      	ldr	r3, [pc, #148]	; (85874 <SystemCoreClockUpdate+0x100>)
   857e0:	4a26      	ldr	r2, [pc, #152]	; (8587c <SystemCoreClockUpdate+0x108>)
   857e2:	601a      	str	r2, [r3, #0]
				break;
   857e4:	e01e      	b.n	85824 <SystemCoreClockUpdate+0xb0>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   857e6:	4b21      	ldr	r3, [pc, #132]	; (8586c <SystemCoreClockUpdate+0xf8>)
   857e8:	6a1b      	ldr	r3, [r3, #32]
   857ea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   857ee:	d003      	beq.n	857f8 <SystemCoreClockUpdate+0x84>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   857f0:	4b20      	ldr	r3, [pc, #128]	; (85874 <SystemCoreClockUpdate+0x100>)
   857f2:	4a22      	ldr	r2, [pc, #136]	; (8587c <SystemCoreClockUpdate+0x108>)
   857f4:	601a      	str	r2, [r3, #0]
   857f6:	e7d2      	b.n	8579e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   857f8:	4b1e      	ldr	r3, [pc, #120]	; (85874 <SystemCoreClockUpdate+0x100>)
   857fa:	4a1f      	ldr	r2, [pc, #124]	; (85878 <SystemCoreClockUpdate+0x104>)
   857fc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   857fe:	4b1b      	ldr	r3, [pc, #108]	; (8586c <SystemCoreClockUpdate+0xf8>)
   85800:	6a1b      	ldr	r3, [r3, #32]
   85802:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85806:	2b10      	cmp	r3, #16
   85808:	d005      	beq.n	85816 <SystemCoreClockUpdate+0xa2>
   8580a:	2b20      	cmp	r3, #32
   8580c:	d1c7      	bne.n	8579e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8580e:	4b19      	ldr	r3, [pc, #100]	; (85874 <SystemCoreClockUpdate+0x100>)
   85810:	4a1a      	ldr	r2, [pc, #104]	; (8587c <SystemCoreClockUpdate+0x108>)
   85812:	601a      	str	r2, [r3, #0]
				break;
   85814:	e7c3      	b.n	8579e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   85816:	4b17      	ldr	r3, [pc, #92]	; (85874 <SystemCoreClockUpdate+0x100>)
   85818:	4a19      	ldr	r2, [pc, #100]	; (85880 <SystemCoreClockUpdate+0x10c>)
   8581a:	601a      	str	r2, [r3, #0]
				break;
   8581c:	e7bf      	b.n	8579e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8581e:	4b15      	ldr	r3, [pc, #84]	; (85874 <SystemCoreClockUpdate+0x100>)
   85820:	4a16      	ldr	r2, [pc, #88]	; (8587c <SystemCoreClockUpdate+0x108>)
   85822:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85824:	4b11      	ldr	r3, [pc, #68]	; (8586c <SystemCoreClockUpdate+0xf8>)
   85826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85828:	f003 0303 	and.w	r3, r3, #3
   8582c:	2b02      	cmp	r3, #2
   8582e:	d007      	beq.n	85840 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   85830:	4b10      	ldr	r3, [pc, #64]	; (85874 <SystemCoreClockUpdate+0x100>)
   85832:	4a14      	ldr	r2, [pc, #80]	; (85884 <SystemCoreClockUpdate+0x110>)
   85834:	601a      	str	r2, [r3, #0]
   85836:	e7b2      	b.n	8579e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   85838:	4b0e      	ldr	r3, [pc, #56]	; (85874 <SystemCoreClockUpdate+0x100>)
   8583a:	4a11      	ldr	r2, [pc, #68]	; (85880 <SystemCoreClockUpdate+0x10c>)
   8583c:	601a      	str	r2, [r3, #0]
				break;
   8583e:	e7f1      	b.n	85824 <SystemCoreClockUpdate+0xb0>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85840:	4a0a      	ldr	r2, [pc, #40]	; (8586c <SystemCoreClockUpdate+0xf8>)
   85842:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85844:	6a92      	ldr	r2, [r2, #40]	; 0x28
   85846:	480b      	ldr	r0, [pc, #44]	; (85874 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85848:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8584c:	6803      	ldr	r3, [r0, #0]
   8584e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85852:	b2d2      	uxtb	r2, r2
   85854:	fbb3 f3f2 	udiv	r3, r3, r2
   85858:	6003      	str	r3, [r0, #0]
   8585a:	e7a0      	b.n	8579e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8585c:	4b05      	ldr	r3, [pc, #20]	; (85874 <SystemCoreClockUpdate+0x100>)
   8585e:	681b      	ldr	r3, [r3, #0]
   85860:	4a09      	ldr	r2, [pc, #36]	; (85888 <SystemCoreClockUpdate+0x114>)
   85862:	fba2 2303 	umull	r2, r3, r2, r3
   85866:	085b      	lsrs	r3, r3, #1
   85868:	e7a6      	b.n	857b8 <SystemCoreClockUpdate+0x44>
   8586a:	bf00      	nop
   8586c:	400e0400 	.word	0x400e0400
   85870:	400e1210 	.word	0x400e1210
   85874:	20000984 	.word	0x20000984
   85878:	003d0900 	.word	0x003d0900
   8587c:	00b71b00 	.word	0x00b71b00
   85880:	007a1200 	.word	0x007a1200
   85884:	0e4e1c00 	.word	0x0e4e1c00
   85888:	aaaaaaab 	.word	0xaaaaaaab

0008588c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   8588c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8588e:	4a09      	ldr	r2, [pc, #36]	; (858b4 <_sbrk+0x28>)
   85890:	6812      	ldr	r2, [r2, #0]
   85892:	b15a      	cbz	r2, 858ac <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   85894:	4a07      	ldr	r2, [pc, #28]	; (858b4 <_sbrk+0x28>)
   85896:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   85898:	18c1      	adds	r1, r0, r3
   8589a:	4a07      	ldr	r2, [pc, #28]	; (858b8 <_sbrk+0x2c>)
   8589c:	4291      	cmp	r1, r2
		return (caddr_t) -1;	
	}

	heap += incr;
   8589e:	bfdd      	ittte	le
   858a0:	460b      	movle	r3, r1
   858a2:	4a04      	ldrle	r2, [pc, #16]	; (858b4 <_sbrk+0x28>)
   858a4:	6013      	strle	r3, [r2, #0]
		return (caddr_t) -1;	
   858a6:	f04f 30ff 	movgt.w	r0, #4294967295

	return (caddr_t) prev_heap;
}
   858aa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   858ac:	4a01      	ldr	r2, [pc, #4]	; (858b4 <_sbrk+0x28>)
   858ae:	4903      	ldr	r1, [pc, #12]	; (858bc <_sbrk+0x30>)
   858b0:	6011      	str	r1, [r2, #0]
   858b2:	e7ef      	b.n	85894 <_sbrk+0x8>
   858b4:	200021a0 	.word	0x200021a0
   858b8:	2007fffc 	.word	0x2007fffc
   858bc:	20082000 	.word	0x20082000

000858c0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   858c0:	f04f 30ff 	mov.w	r0, #4294967295
   858c4:	4770      	bx	lr

000858c6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   858c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   858ca:	604b      	str	r3, [r1, #4]

	return 0;
}
   858cc:	2000      	movs	r0, #0
   858ce:	4770      	bx	lr

000858d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   858d0:	2001      	movs	r0, #1
   858d2:	4770      	bx	lr

000858d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   858d4:	2000      	movs	r0, #0
   858d6:	4770      	bx	lr

000858d8 <_exit>:

extern void _exit(int status)
{
   858d8:	b508      	push	{r3, lr}
   858da:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   858dc:	4801      	ldr	r0, [pc, #4]	; (858e4 <_exit+0xc>)
   858de:	4b02      	ldr	r3, [pc, #8]	; (858e8 <_exit+0x10>)
   858e0:	4798      	blx	r3

	for (;;);
   858e2:	e7fe      	b.n	858e2 <_exit+0xa>
   858e4:	0008cb80 	.word	0x0008cb80
   858e8:	00085f49 	.word	0x00085f49

000858ec <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   858ec:	4770      	bx	lr

000858ee <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   858ee:	f04f 30ff 	mov.w	r0, #4294967295
   858f2:	4770      	bx	lr

000858f4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   858f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   858f6:	b083      	sub	sp, #12
   858f8:	4605      	mov	r5, r0
   858fa:	460c      	mov	r4, r1
	uint32_t val = 0;
   858fc:	2300      	movs	r3, #0
   858fe:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   85900:	4b18      	ldr	r3, [pc, #96]	; (85964 <usart_serial_getchar+0x70>)
   85902:	4298      	cmp	r0, r3
   85904:	d010      	beq.n	85928 <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   85906:	4b18      	ldr	r3, [pc, #96]	; (85968 <usart_serial_getchar+0x74>)
   85908:	4298      	cmp	r0, r3
   8590a:	d021      	beq.n	85950 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8590c:	4b17      	ldr	r3, [pc, #92]	; (8596c <usart_serial_getchar+0x78>)
   8590e:	4298      	cmp	r0, r3
   85910:	d111      	bne.n	85936 <usart_serial_getchar+0x42>
		while (usart_read(p_usart, &val));
   85912:	461e      	mov	r6, r3
   85914:	4d16      	ldr	r5, [pc, #88]	; (85970 <usart_serial_getchar+0x7c>)
   85916:	a901      	add	r1, sp, #4
   85918:	4630      	mov	r0, r6
   8591a:	47a8      	blx	r5
   8591c:	2800      	cmp	r0, #0
   8591e:	d1fa      	bne.n	85916 <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   85920:	9b01      	ldr	r3, [sp, #4]
   85922:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   85924:	b003      	add	sp, #12
   85926:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   85928:	461f      	mov	r7, r3
   8592a:	4e12      	ldr	r6, [pc, #72]	; (85974 <usart_serial_getchar+0x80>)
   8592c:	4621      	mov	r1, r4
   8592e:	4638      	mov	r0, r7
   85930:	47b0      	blx	r6
   85932:	2800      	cmp	r0, #0
   85934:	d1fa      	bne.n	8592c <usart_serial_getchar+0x38>
	if (USART2 == p_usart) {
   85936:	4b10      	ldr	r3, [pc, #64]	; (85978 <usart_serial_getchar+0x84>)
   85938:	429d      	cmp	r5, r3
   8593a:	d1f3      	bne.n	85924 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   8593c:	461e      	mov	r6, r3
   8593e:	4d0c      	ldr	r5, [pc, #48]	; (85970 <usart_serial_getchar+0x7c>)
   85940:	a901      	add	r1, sp, #4
   85942:	4630      	mov	r0, r6
   85944:	47a8      	blx	r5
   85946:	2800      	cmp	r0, #0
   85948:	d1fa      	bne.n	85940 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   8594a:	9b01      	ldr	r3, [sp, #4]
   8594c:	7023      	strb	r3, [r4, #0]
}
   8594e:	e7e9      	b.n	85924 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   85950:	461e      	mov	r6, r3
   85952:	4d07      	ldr	r5, [pc, #28]	; (85970 <usart_serial_getchar+0x7c>)
   85954:	a901      	add	r1, sp, #4
   85956:	4630      	mov	r0, r6
   85958:	47a8      	blx	r5
   8595a:	2800      	cmp	r0, #0
   8595c:	d1fa      	bne.n	85954 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8595e:	9b01      	ldr	r3, [sp, #4]
   85960:	7023      	strb	r3, [r4, #0]
	if (USART2 == p_usart) {
   85962:	e7df      	b.n	85924 <usart_serial_getchar+0x30>
   85964:	400e0600 	.word	0x400e0600
   85968:	40090000 	.word	0x40090000
   8596c:	40094000 	.word	0x40094000
   85970:	00085667 	.word	0x00085667
   85974:	000856c5 	.word	0x000856c5
   85978:	40098000 	.word	0x40098000

0008597c <usart_serial_putchar>:
{
   8597c:	b570      	push	{r4, r5, r6, lr}
   8597e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   85980:	4b18      	ldr	r3, [pc, #96]	; (859e4 <usart_serial_putchar+0x68>)
   85982:	4298      	cmp	r0, r3
   85984:	d00a      	beq.n	8599c <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   85986:	4b18      	ldr	r3, [pc, #96]	; (859e8 <usart_serial_putchar+0x6c>)
   85988:	4298      	cmp	r0, r3
   8598a:	d010      	beq.n	859ae <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   8598c:	4b17      	ldr	r3, [pc, #92]	; (859ec <usart_serial_putchar+0x70>)
   8598e:	4298      	cmp	r0, r3
   85990:	d016      	beq.n	859c0 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   85992:	4b17      	ldr	r3, [pc, #92]	; (859f0 <usart_serial_putchar+0x74>)
   85994:	4298      	cmp	r0, r3
   85996:	d01c      	beq.n	859d2 <usart_serial_putchar+0x56>
	return 0;
   85998:	2000      	movs	r0, #0
}
   8599a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8599c:	461e      	mov	r6, r3
   8599e:	4d15      	ldr	r5, [pc, #84]	; (859f4 <usart_serial_putchar+0x78>)
   859a0:	4621      	mov	r1, r4
   859a2:	4630      	mov	r0, r6
   859a4:	47a8      	blx	r5
   859a6:	2800      	cmp	r0, #0
   859a8:	d1fa      	bne.n	859a0 <usart_serial_putchar+0x24>
		return 1;
   859aa:	2001      	movs	r0, #1
   859ac:	e7f5      	b.n	8599a <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   859ae:	461e      	mov	r6, r3
   859b0:	4d11      	ldr	r5, [pc, #68]	; (859f8 <usart_serial_putchar+0x7c>)
   859b2:	4621      	mov	r1, r4
   859b4:	4630      	mov	r0, r6
   859b6:	47a8      	blx	r5
   859b8:	2800      	cmp	r0, #0
   859ba:	d1fa      	bne.n	859b2 <usart_serial_putchar+0x36>
		return 1;
   859bc:	2001      	movs	r0, #1
   859be:	e7ec      	b.n	8599a <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   859c0:	461e      	mov	r6, r3
   859c2:	4d0d      	ldr	r5, [pc, #52]	; (859f8 <usart_serial_putchar+0x7c>)
   859c4:	4621      	mov	r1, r4
   859c6:	4630      	mov	r0, r6
   859c8:	47a8      	blx	r5
   859ca:	2800      	cmp	r0, #0
   859cc:	d1fa      	bne.n	859c4 <usart_serial_putchar+0x48>
		return 1;
   859ce:	2001      	movs	r0, #1
   859d0:	e7e3      	b.n	8599a <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   859d2:	461e      	mov	r6, r3
   859d4:	4d08      	ldr	r5, [pc, #32]	; (859f8 <usart_serial_putchar+0x7c>)
   859d6:	4621      	mov	r1, r4
   859d8:	4630      	mov	r0, r6
   859da:	47a8      	blx	r5
   859dc:	2800      	cmp	r0, #0
   859de:	d1fa      	bne.n	859d6 <usart_serial_putchar+0x5a>
		return 1;
   859e0:	2001      	movs	r0, #1
   859e2:	e7da      	b.n	8599a <usart_serial_putchar+0x1e>
   859e4:	400e0600 	.word	0x400e0600
   859e8:	40090000 	.word	0x40090000
   859ec:	40094000 	.word	0x40094000
   859f0:	40098000 	.word	0x40098000
   859f4:	000856b5 	.word	0x000856b5
   859f8:	00085641 	.word	0x00085641

000859fc <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   859fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a00:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   85a02:	2110      	movs	r1, #16
   85a04:	eb0d 0001 	add.w	r0, sp, r1
   85a08:	4b52      	ldr	r3, [pc, #328]	; (85b54 <main+0x158>)
   85a0a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   85a0c:	2008      	movs	r0, #8
   85a0e:	4d52      	ldr	r5, [pc, #328]	; (85b58 <main+0x15c>)
   85a10:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   85a12:	4c52      	ldr	r4, [pc, #328]	; (85b5c <main+0x160>)
   85a14:	4b52      	ldr	r3, [pc, #328]	; (85b60 <main+0x164>)
   85a16:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   85a18:	4b52      	ldr	r3, [pc, #328]	; (85b64 <main+0x168>)
   85a1a:	4a53      	ldr	r2, [pc, #332]	; (85b68 <main+0x16c>)
   85a1c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   85a1e:	4b53      	ldr	r3, [pc, #332]	; (85b6c <main+0x170>)
   85a20:	4a53      	ldr	r2, [pc, #332]	; (85b70 <main+0x174>)
   85a22:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   85a24:	4b53      	ldr	r3, [pc, #332]	; (85b74 <main+0x178>)
   85a26:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   85a28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   85a2c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   85a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85a32:	9303      	str	r3, [sp, #12]
   85a34:	2008      	movs	r0, #8
   85a36:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   85a38:	a901      	add	r1, sp, #4
   85a3a:	4620      	mov	r0, r4
   85a3c:	4b4e      	ldr	r3, [pc, #312]	; (85b78 <main+0x17c>)
   85a3e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   85a40:	4d4e      	ldr	r5, [pc, #312]	; (85b7c <main+0x180>)
   85a42:	682b      	ldr	r3, [r5, #0]
   85a44:	2100      	movs	r1, #0
   85a46:	6898      	ldr	r0, [r3, #8]
   85a48:	4c4d      	ldr	r4, [pc, #308]	; (85b80 <main+0x184>)
   85a4a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   85a4c:	682b      	ldr	r3, [r5, #0]
   85a4e:	2100      	movs	r1, #0
   85a50:	6858      	ldr	r0, [r3, #4]
   85a52:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   85a54:	2101      	movs	r1, #1
   85a56:	4b4b      	ldr	r3, [pc, #300]	; (85b84 <main+0x188>)
   85a58:	7019      	strb	r1, [r3, #0]
   85a5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85a5e:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   85a60:	4b49      	ldr	r3, [pc, #292]	; (85b88 <main+0x18c>)
   85a62:	2200      	movs	r2, #0
   85a64:	701a      	strb	r2, [r3, #0]
   85a66:	705a      	strb	r2, [r3, #1]
   85a68:	709a      	strb	r2, [r3, #2]
   85a6a:	70da      	strb	r2, [r3, #3]
   85a6c:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   85a6e:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   85a70:	4b46      	ldr	r3, [pc, #280]	; (85b8c <main+0x190>)
   85a72:	4798      	blx	r3
	board_init();
   85a74:	4b46      	ldr	r3, [pc, #280]	; (85b90 <main+0x194>)
   85a76:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   85a78:	4b46      	ldr	r3, [pc, #280]	; (85b94 <main+0x198>)
   85a7a:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   85a7c:	ac04      	add	r4, sp, #16
   85a7e:	4d46      	ldr	r5, [pc, #280]	; (85b98 <main+0x19c>)
   85a80:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   85a84:	4f45      	ldr	r7, [pc, #276]	; (85b9c <main+0x1a0>)
   85a86:	4e46      	ldr	r6, [pc, #280]	; (85ba0 <main+0x1a4>)
   85a88:	f854 2b04 	ldr.w	r2, [r4], #4
   85a8c:	4639      	mov	r1, r7
   85a8e:	4628      	mov	r0, r5
   85a90:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   85a92:	3508      	adds	r5, #8
   85a94:	45a0      	cmp	r8, r4
   85a96:	d1f7      	bne.n	85a88 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   85a98:	4c3f      	ldr	r4, [pc, #252]	; (85b98 <main+0x19c>)
   85a9a:	2600      	movs	r6, #0
   85a9c:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   85aa0:	4a40      	ldr	r2, [pc, #256]	; (85ba4 <main+0x1a8>)
   85aa2:	4941      	ldr	r1, [pc, #260]	; (85ba8 <main+0x1ac>)
   85aa4:	4841      	ldr	r0, [pc, #260]	; (85bac <main+0x1b0>)
   85aa6:	4f42      	ldr	r7, [pc, #264]	; (85bb0 <main+0x1b4>)
   85aa8:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   85aaa:	4621      	mov	r1, r4
   85aac:	4841      	ldr	r0, [pc, #260]	; (85bb4 <main+0x1b8>)
   85aae:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   85ab0:	2009      	movs	r0, #9
   85ab2:	4b29      	ldr	r3, [pc, #164]	; (85b58 <main+0x15c>)
   85ab4:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   85ab6:	4d40      	ldr	r5, [pc, #256]	; (85bb8 <main+0x1bc>)
   85ab8:	4629      	mov	r1, r5
   85aba:	2029      	movs	r0, #41	; 0x29
   85abc:	4c3f      	ldr	r4, [pc, #252]	; (85bbc <main+0x1c0>)
   85abe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   85ac0:	4629      	mov	r1, r5
   85ac2:	202a      	movs	r0, #42	; 0x2a
   85ac4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   85ac6:	4629      	mov	r1, r5
   85ac8:	202b      	movs	r0, #43	; 0x2b
   85aca:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   85acc:	4629      	mov	r1, r5
   85ace:	202c      	movs	r0, #44	; 0x2c
   85ad0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   85ad2:	4629      	mov	r1, r5
   85ad4:	202d      	movs	r0, #45	; 0x2d
   85ad6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   85ad8:	4629      	mov	r1, r5
   85ada:	202e      	movs	r0, #46	; 0x2e
   85adc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   85ade:	4629      	mov	r1, r5
   85ae0:	202f      	movs	r0, #47	; 0x2f
   85ae2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   85ae4:	4629      	mov	r1, r5
   85ae6:	2030      	movs	r0, #48	; 0x30
   85ae8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   85aea:	4629      	mov	r1, r5
   85aec:	2033      	movs	r0, #51	; 0x33
   85aee:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   85af0:	4629      	mov	r1, r5
   85af2:	2037      	movs	r0, #55	; 0x37
   85af4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   85af6:	4629      	mov	r1, r5
   85af8:	2034      	movs	r0, #52	; 0x34
   85afa:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   85afc:	4830      	ldr	r0, [pc, #192]	; (85bc0 <main+0x1c4>)
   85afe:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   85b00:	4c30      	ldr	r4, [pc, #192]	; (85bc4 <main+0x1c8>)
   85b02:	4a31      	ldr	r2, [pc, #196]	; (85bc8 <main+0x1cc>)
   85b04:	4631      	mov	r1, r6
   85b06:	4620      	mov	r0, r4
   85b08:	4b30      	ldr	r3, [pc, #192]	; (85bcc <main+0x1d0>)
   85b0a:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   85b0c:	4a30      	ldr	r2, [pc, #192]	; (85bd0 <main+0x1d4>)
   85b0e:	4631      	mov	r1, r6
   85b10:	4620      	mov	r0, r4
   85b12:	4b30      	ldr	r3, [pc, #192]	; (85bd4 <main+0x1d8>)
   85b14:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   85b16:	4a30      	ldr	r2, [pc, #192]	; (85bd8 <main+0x1dc>)
   85b18:	4631      	mov	r1, r6
   85b1a:	4620      	mov	r0, r4
   85b1c:	4b2f      	ldr	r3, [pc, #188]	; (85bdc <main+0x1e0>)
   85b1e:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   85b20:	2203      	movs	r2, #3
   85b22:	4631      	mov	r1, r6
   85b24:	4620      	mov	r0, r4
   85b26:	4b2e      	ldr	r3, [pc, #184]	; (85be0 <main+0x1e4>)
   85b28:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   85b2a:	4b2e      	ldr	r3, [pc, #184]	; (85be4 <main+0x1e8>)
   85b2c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   85b2e:	4b2e      	ldr	r3, [pc, #184]	; (85be8 <main+0x1ec>)
   85b30:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   85b32:	4b2e      	ldr	r3, [pc, #184]	; (85bec <main+0x1f0>)
   85b34:	2204      	movs	r2, #4
   85b36:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   85b38:	4630      	mov	r0, r6
   85b3a:	4b2d      	ldr	r3, [pc, #180]	; (85bf0 <main+0x1f4>)
   85b3c:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   85b3e:	482d      	ldr	r0, [pc, #180]	; (85bf4 <main+0x1f8>)
   85b40:	47b8      	blx	r7
	naeusb_register_handlers();
   85b42:	4b2d      	ldr	r3, [pc, #180]	; (85bf8 <main+0x1fc>)
   85b44:	4798      	blx	r3
	naeusart_register_handlers();
   85b46:	4b2d      	ldr	r3, [pc, #180]	; (85bfc <main+0x200>)
   85b48:	4798      	blx	r3
	openadc_register_handlers();
   85b4a:	4b2d      	ldr	r3, [pc, #180]	; (85c00 <main+0x204>)
   85b4c:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   85b4e:	4c2d      	ldr	r4, [pc, #180]	; (85c04 <main+0x208>)
   85b50:	47a0      	blx	r4
	while (true) {
   85b52:	e7fd      	b.n	85b50 <main+0x154>
   85b54:	00082de9 	.word	0x00082de9
   85b58:	00083f51 	.word	0x00083f51
   85b5c:	400e0600 	.word	0x400e0600
   85b60:	20002698 	.word	0x20002698
   85b64:	20002694 	.word	0x20002694
   85b68:	0008597d 	.word	0x0008597d
   85b6c:	20002690 	.word	0x20002690
   85b70:	000858f5 	.word	0x000858f5
   85b74:	05b8d800 	.word	0x05b8d800
   85b78:	0008567f 	.word	0x0008567f
   85b7c:	200009ac 	.word	0x200009ac
   85b80:	000860fd 	.word	0x000860fd
   85b84:	20000982 	.word	0x20000982
   85b88:	20002688 	.word	0x20002688
   85b8c:	00082fc9 	.word	0x00082fc9
   85b90:	00083a7d 	.word	0x00083a7d
   85b94:	00082aa9 	.word	0x00082aa9
   85b98:	20000988 	.word	0x20000988
   85b9c:	0008cb9c 	.word	0x0008cb9c
   85ba0:	000862ad 	.word	0x000862ad
   85ba4:	0008cba4 	.word	0x0008cba4
   85ba8:	0008cbb0 	.word	0x0008cbb0
   85bac:	0008cbbc 	.word	0x0008cbbc
   85bb0:	00085f49 	.word	0x00085f49
   85bb4:	0008cbf0 	.word	0x0008cbf0
   85bb8:	08000001 	.word	0x08000001
   85bbc:	00083c15 	.word	0x00083c15
   85bc0:	0008cc04 	.word	0x0008cc04
   85bc4:	400e0000 	.word	0x400e0000
   85bc8:	01010100 	.word	0x01010100
   85bcc:	00083aed 	.word	0x00083aed
   85bd0:	01030101 	.word	0x01030101
   85bd4:	00083af9 	.word	0x00083af9
   85bd8:	00040002 	.word	0x00040002
   85bdc:	00083b05 	.word	0x00083b05
   85be0:	00083b11 	.word	0x00083b11
   85be4:	00082f11 	.word	0x00082f11
   85be8:	00083291 	.word	0x00083291
   85bec:	400e0400 	.word	0x400e0400
   85bf0:	00083fa9 	.word	0x00083fa9
   85bf4:	0008cc24 	.word	0x0008cc24
   85bf8:	000814f5 	.word	0x000814f5
   85bfc:	00081ccd 	.word	0x00081ccd
   85c00:	00081821 	.word	0x00081821
   85c04:	00081ef9 	.word	0x00081ef9

00085c08 <__aeabi_uldivmod>:
   85c08:	b953      	cbnz	r3, 85c20 <__aeabi_uldivmod+0x18>
   85c0a:	b94a      	cbnz	r2, 85c20 <__aeabi_uldivmod+0x18>
   85c0c:	2900      	cmp	r1, #0
   85c0e:	bf08      	it	eq
   85c10:	2800      	cmpeq	r0, #0
   85c12:	bf1c      	itt	ne
   85c14:	f04f 31ff 	movne.w	r1, #4294967295
   85c18:	f04f 30ff 	movne.w	r0, #4294967295
   85c1c:	f000 b96e 	b.w	85efc <__aeabi_idiv0>
   85c20:	f1ad 0c08 	sub.w	ip, sp, #8
   85c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85c28:	f000 f806 	bl	85c38 <__udivmoddi4>
   85c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
   85c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85c34:	b004      	add	sp, #16
   85c36:	4770      	bx	lr

00085c38 <__udivmoddi4>:
   85c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85c3c:	9e08      	ldr	r6, [sp, #32]
   85c3e:	460d      	mov	r5, r1
   85c40:	4604      	mov	r4, r0
   85c42:	468e      	mov	lr, r1
   85c44:	2b00      	cmp	r3, #0
   85c46:	f040 8083 	bne.w	85d50 <__udivmoddi4+0x118>
   85c4a:	428a      	cmp	r2, r1
   85c4c:	4617      	mov	r7, r2
   85c4e:	d947      	bls.n	85ce0 <__udivmoddi4+0xa8>
   85c50:	fab2 f382 	clz	r3, r2
   85c54:	b14b      	cbz	r3, 85c6a <__udivmoddi4+0x32>
   85c56:	f1c3 0120 	rsb	r1, r3, #32
   85c5a:	fa05 fe03 	lsl.w	lr, r5, r3
   85c5e:	fa20 f101 	lsr.w	r1, r0, r1
   85c62:	409f      	lsls	r7, r3
   85c64:	ea41 0e0e 	orr.w	lr, r1, lr
   85c68:	409c      	lsls	r4, r3
   85c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   85c6e:	fbbe fcf8 	udiv	ip, lr, r8
   85c72:	fa1f f987 	uxth.w	r9, r7
   85c76:	fb08 e21c 	mls	r2, r8, ip, lr
   85c7a:	fb0c f009 	mul.w	r0, ip, r9
   85c7e:	0c21      	lsrs	r1, r4, #16
   85c80:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   85c84:	4290      	cmp	r0, r2
   85c86:	d90a      	bls.n	85c9e <__udivmoddi4+0x66>
   85c88:	18ba      	adds	r2, r7, r2
   85c8a:	f10c 31ff 	add.w	r1, ip, #4294967295
   85c8e:	f080 8118 	bcs.w	85ec2 <__udivmoddi4+0x28a>
   85c92:	4290      	cmp	r0, r2
   85c94:	f240 8115 	bls.w	85ec2 <__udivmoddi4+0x28a>
   85c98:	f1ac 0c02 	sub.w	ip, ip, #2
   85c9c:	443a      	add	r2, r7
   85c9e:	1a12      	subs	r2, r2, r0
   85ca0:	fbb2 f0f8 	udiv	r0, r2, r8
   85ca4:	fb08 2210 	mls	r2, r8, r0, r2
   85ca8:	fb00 f109 	mul.w	r1, r0, r9
   85cac:	b2a4      	uxth	r4, r4
   85cae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   85cb2:	42a1      	cmp	r1, r4
   85cb4:	d909      	bls.n	85cca <__udivmoddi4+0x92>
   85cb6:	193c      	adds	r4, r7, r4
   85cb8:	f100 32ff 	add.w	r2, r0, #4294967295
   85cbc:	f080 8103 	bcs.w	85ec6 <__udivmoddi4+0x28e>
   85cc0:	42a1      	cmp	r1, r4
   85cc2:	f240 8100 	bls.w	85ec6 <__udivmoddi4+0x28e>
   85cc6:	3802      	subs	r0, #2
   85cc8:	443c      	add	r4, r7
   85cca:	1a64      	subs	r4, r4, r1
   85ccc:	2100      	movs	r1, #0
   85cce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85cd2:	b11e      	cbz	r6, 85cdc <__udivmoddi4+0xa4>
   85cd4:	2200      	movs	r2, #0
   85cd6:	40dc      	lsrs	r4, r3
   85cd8:	e9c6 4200 	strd	r4, r2, [r6]
   85cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85ce0:	b902      	cbnz	r2, 85ce4 <__udivmoddi4+0xac>
   85ce2:	deff      	udf	#255	; 0xff
   85ce4:	fab2 f382 	clz	r3, r2
   85ce8:	2b00      	cmp	r3, #0
   85cea:	d14f      	bne.n	85d8c <__udivmoddi4+0x154>
   85cec:	1a8d      	subs	r5, r1, r2
   85cee:	2101      	movs	r1, #1
   85cf0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   85cf4:	fa1f f882 	uxth.w	r8, r2
   85cf8:	fbb5 fcfe 	udiv	ip, r5, lr
   85cfc:	fb0e 551c 	mls	r5, lr, ip, r5
   85d00:	fb08 f00c 	mul.w	r0, r8, ip
   85d04:	0c22      	lsrs	r2, r4, #16
   85d06:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   85d0a:	42a8      	cmp	r0, r5
   85d0c:	d907      	bls.n	85d1e <__udivmoddi4+0xe6>
   85d0e:	197d      	adds	r5, r7, r5
   85d10:	f10c 32ff 	add.w	r2, ip, #4294967295
   85d14:	d202      	bcs.n	85d1c <__udivmoddi4+0xe4>
   85d16:	42a8      	cmp	r0, r5
   85d18:	f200 80e9 	bhi.w	85eee <__udivmoddi4+0x2b6>
   85d1c:	4694      	mov	ip, r2
   85d1e:	1a2d      	subs	r5, r5, r0
   85d20:	fbb5 f0fe 	udiv	r0, r5, lr
   85d24:	fb0e 5510 	mls	r5, lr, r0, r5
   85d28:	fb08 f800 	mul.w	r8, r8, r0
   85d2c:	b2a4      	uxth	r4, r4
   85d2e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   85d32:	45a0      	cmp	r8, r4
   85d34:	d907      	bls.n	85d46 <__udivmoddi4+0x10e>
   85d36:	193c      	adds	r4, r7, r4
   85d38:	f100 32ff 	add.w	r2, r0, #4294967295
   85d3c:	d202      	bcs.n	85d44 <__udivmoddi4+0x10c>
   85d3e:	45a0      	cmp	r8, r4
   85d40:	f200 80d9 	bhi.w	85ef6 <__udivmoddi4+0x2be>
   85d44:	4610      	mov	r0, r2
   85d46:	eba4 0408 	sub.w	r4, r4, r8
   85d4a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85d4e:	e7c0      	b.n	85cd2 <__udivmoddi4+0x9a>
   85d50:	428b      	cmp	r3, r1
   85d52:	d908      	bls.n	85d66 <__udivmoddi4+0x12e>
   85d54:	2e00      	cmp	r6, #0
   85d56:	f000 80b1 	beq.w	85ebc <__udivmoddi4+0x284>
   85d5a:	2100      	movs	r1, #0
   85d5c:	e9c6 0500 	strd	r0, r5, [r6]
   85d60:	4608      	mov	r0, r1
   85d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85d66:	fab3 f183 	clz	r1, r3
   85d6a:	2900      	cmp	r1, #0
   85d6c:	d14b      	bne.n	85e06 <__udivmoddi4+0x1ce>
   85d6e:	42ab      	cmp	r3, r5
   85d70:	d302      	bcc.n	85d78 <__udivmoddi4+0x140>
   85d72:	4282      	cmp	r2, r0
   85d74:	f200 80b9 	bhi.w	85eea <__udivmoddi4+0x2b2>
   85d78:	1a84      	subs	r4, r0, r2
   85d7a:	eb65 0303 	sbc.w	r3, r5, r3
   85d7e:	2001      	movs	r0, #1
   85d80:	469e      	mov	lr, r3
   85d82:	2e00      	cmp	r6, #0
   85d84:	d0aa      	beq.n	85cdc <__udivmoddi4+0xa4>
   85d86:	e9c6 4e00 	strd	r4, lr, [r6]
   85d8a:	e7a7      	b.n	85cdc <__udivmoddi4+0xa4>
   85d8c:	409f      	lsls	r7, r3
   85d8e:	f1c3 0220 	rsb	r2, r3, #32
   85d92:	40d1      	lsrs	r1, r2
   85d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   85d98:	fbb1 f0fe 	udiv	r0, r1, lr
   85d9c:	fa1f f887 	uxth.w	r8, r7
   85da0:	fb0e 1110 	mls	r1, lr, r0, r1
   85da4:	fa24 f202 	lsr.w	r2, r4, r2
   85da8:	409d      	lsls	r5, r3
   85daa:	fb00 fc08 	mul.w	ip, r0, r8
   85dae:	432a      	orrs	r2, r5
   85db0:	0c15      	lsrs	r5, r2, #16
   85db2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   85db6:	45ac      	cmp	ip, r5
   85db8:	fa04 f403 	lsl.w	r4, r4, r3
   85dbc:	d909      	bls.n	85dd2 <__udivmoddi4+0x19a>
   85dbe:	197d      	adds	r5, r7, r5
   85dc0:	f100 31ff 	add.w	r1, r0, #4294967295
   85dc4:	f080 808f 	bcs.w	85ee6 <__udivmoddi4+0x2ae>
   85dc8:	45ac      	cmp	ip, r5
   85dca:	f240 808c 	bls.w	85ee6 <__udivmoddi4+0x2ae>
   85dce:	3802      	subs	r0, #2
   85dd0:	443d      	add	r5, r7
   85dd2:	eba5 050c 	sub.w	r5, r5, ip
   85dd6:	fbb5 f1fe 	udiv	r1, r5, lr
   85dda:	fb0e 5c11 	mls	ip, lr, r1, r5
   85dde:	fb01 f908 	mul.w	r9, r1, r8
   85de2:	b295      	uxth	r5, r2
   85de4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   85de8:	45a9      	cmp	r9, r5
   85dea:	d907      	bls.n	85dfc <__udivmoddi4+0x1c4>
   85dec:	197d      	adds	r5, r7, r5
   85dee:	f101 32ff 	add.w	r2, r1, #4294967295
   85df2:	d274      	bcs.n	85ede <__udivmoddi4+0x2a6>
   85df4:	45a9      	cmp	r9, r5
   85df6:	d972      	bls.n	85ede <__udivmoddi4+0x2a6>
   85df8:	3902      	subs	r1, #2
   85dfa:	443d      	add	r5, r7
   85dfc:	eba5 0509 	sub.w	r5, r5, r9
   85e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   85e04:	e778      	b.n	85cf8 <__udivmoddi4+0xc0>
   85e06:	f1c1 0720 	rsb	r7, r1, #32
   85e0a:	408b      	lsls	r3, r1
   85e0c:	fa22 fc07 	lsr.w	ip, r2, r7
   85e10:	ea4c 0c03 	orr.w	ip, ip, r3
   85e14:	fa25 f407 	lsr.w	r4, r5, r7
   85e18:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   85e1c:	fbb4 f9fe 	udiv	r9, r4, lr
   85e20:	fa1f f88c 	uxth.w	r8, ip
   85e24:	fb0e 4419 	mls	r4, lr, r9, r4
   85e28:	fa20 f307 	lsr.w	r3, r0, r7
   85e2c:	fb09 fa08 	mul.w	sl, r9, r8
   85e30:	408d      	lsls	r5, r1
   85e32:	431d      	orrs	r5, r3
   85e34:	0c2b      	lsrs	r3, r5, #16
   85e36:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   85e3a:	45a2      	cmp	sl, r4
   85e3c:	fa02 f201 	lsl.w	r2, r2, r1
   85e40:	fa00 f301 	lsl.w	r3, r0, r1
   85e44:	d909      	bls.n	85e5a <__udivmoddi4+0x222>
   85e46:	eb1c 0404 	adds.w	r4, ip, r4
   85e4a:	f109 30ff 	add.w	r0, r9, #4294967295
   85e4e:	d248      	bcs.n	85ee2 <__udivmoddi4+0x2aa>
   85e50:	45a2      	cmp	sl, r4
   85e52:	d946      	bls.n	85ee2 <__udivmoddi4+0x2aa>
   85e54:	f1a9 0902 	sub.w	r9, r9, #2
   85e58:	4464      	add	r4, ip
   85e5a:	eba4 040a 	sub.w	r4, r4, sl
   85e5e:	fbb4 f0fe 	udiv	r0, r4, lr
   85e62:	fb0e 4410 	mls	r4, lr, r0, r4
   85e66:	fb00 fa08 	mul.w	sl, r0, r8
   85e6a:	b2ad      	uxth	r5, r5
   85e6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   85e70:	45a2      	cmp	sl, r4
   85e72:	d908      	bls.n	85e86 <__udivmoddi4+0x24e>
   85e74:	eb1c 0404 	adds.w	r4, ip, r4
   85e78:	f100 35ff 	add.w	r5, r0, #4294967295
   85e7c:	d22d      	bcs.n	85eda <__udivmoddi4+0x2a2>
   85e7e:	45a2      	cmp	sl, r4
   85e80:	d92b      	bls.n	85eda <__udivmoddi4+0x2a2>
   85e82:	3802      	subs	r0, #2
   85e84:	4464      	add	r4, ip
   85e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85e8a:	fba0 8902 	umull	r8, r9, r0, r2
   85e8e:	eba4 040a 	sub.w	r4, r4, sl
   85e92:	454c      	cmp	r4, r9
   85e94:	46c6      	mov	lr, r8
   85e96:	464d      	mov	r5, r9
   85e98:	d319      	bcc.n	85ece <__udivmoddi4+0x296>
   85e9a:	d016      	beq.n	85eca <__udivmoddi4+0x292>
   85e9c:	b15e      	cbz	r6, 85eb6 <__udivmoddi4+0x27e>
   85e9e:	ebb3 020e 	subs.w	r2, r3, lr
   85ea2:	eb64 0405 	sbc.w	r4, r4, r5
   85ea6:	fa04 f707 	lsl.w	r7, r4, r7
   85eaa:	fa22 f301 	lsr.w	r3, r2, r1
   85eae:	431f      	orrs	r7, r3
   85eb0:	40cc      	lsrs	r4, r1
   85eb2:	e9c6 7400 	strd	r7, r4, [r6]
   85eb6:	2100      	movs	r1, #0
   85eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85ebc:	4631      	mov	r1, r6
   85ebe:	4630      	mov	r0, r6
   85ec0:	e70c      	b.n	85cdc <__udivmoddi4+0xa4>
   85ec2:	468c      	mov	ip, r1
   85ec4:	e6eb      	b.n	85c9e <__udivmoddi4+0x66>
   85ec6:	4610      	mov	r0, r2
   85ec8:	e6ff      	b.n	85cca <__udivmoddi4+0x92>
   85eca:	4543      	cmp	r3, r8
   85ecc:	d2e6      	bcs.n	85e9c <__udivmoddi4+0x264>
   85ece:	ebb8 0e02 	subs.w	lr, r8, r2
   85ed2:	eb69 050c 	sbc.w	r5, r9, ip
   85ed6:	3801      	subs	r0, #1
   85ed8:	e7e0      	b.n	85e9c <__udivmoddi4+0x264>
   85eda:	4628      	mov	r0, r5
   85edc:	e7d3      	b.n	85e86 <__udivmoddi4+0x24e>
   85ede:	4611      	mov	r1, r2
   85ee0:	e78c      	b.n	85dfc <__udivmoddi4+0x1c4>
   85ee2:	4681      	mov	r9, r0
   85ee4:	e7b9      	b.n	85e5a <__udivmoddi4+0x222>
   85ee6:	4608      	mov	r0, r1
   85ee8:	e773      	b.n	85dd2 <__udivmoddi4+0x19a>
   85eea:	4608      	mov	r0, r1
   85eec:	e749      	b.n	85d82 <__udivmoddi4+0x14a>
   85eee:	f1ac 0c02 	sub.w	ip, ip, #2
   85ef2:	443d      	add	r5, r7
   85ef4:	e713      	b.n	85d1e <__udivmoddi4+0xe6>
   85ef6:	3802      	subs	r0, #2
   85ef8:	443c      	add	r4, r7
   85efa:	e724      	b.n	85d46 <__udivmoddi4+0x10e>

00085efc <__aeabi_idiv0>:
   85efc:	4770      	bx	lr
   85efe:	bf00      	nop

00085f00 <__libc_init_array>:
   85f00:	b570      	push	{r4, r5, r6, lr}
   85f02:	4e0d      	ldr	r6, [pc, #52]	; (85f38 <__libc_init_array+0x38>)
   85f04:	4d0d      	ldr	r5, [pc, #52]	; (85f3c <__libc_init_array+0x3c>)
   85f06:	1b76      	subs	r6, r6, r5
   85f08:	10b6      	asrs	r6, r6, #2
   85f0a:	d006      	beq.n	85f1a <__libc_init_array+0x1a>
   85f0c:	2400      	movs	r4, #0
   85f0e:	f855 3b04 	ldr.w	r3, [r5], #4
   85f12:	3401      	adds	r4, #1
   85f14:	4798      	blx	r3
   85f16:	42a6      	cmp	r6, r4
   85f18:	d1f9      	bne.n	85f0e <__libc_init_array+0xe>
   85f1a:	4e09      	ldr	r6, [pc, #36]	; (85f40 <__libc_init_array+0x40>)
   85f1c:	4d09      	ldr	r5, [pc, #36]	; (85f44 <__libc_init_array+0x44>)
   85f1e:	f007 f88f 	bl	8d040 <_init>
   85f22:	1b76      	subs	r6, r6, r5
   85f24:	10b6      	asrs	r6, r6, #2
   85f26:	d006      	beq.n	85f36 <__libc_init_array+0x36>
   85f28:	2400      	movs	r4, #0
   85f2a:	f855 3b04 	ldr.w	r3, [r5], #4
   85f2e:	3401      	adds	r4, #1
   85f30:	4798      	blx	r3
   85f32:	42a6      	cmp	r6, r4
   85f34:	d1f9      	bne.n	85f2a <__libc_init_array+0x2a>
   85f36:	bd70      	pop	{r4, r5, r6, pc}
   85f38:	0008d04c 	.word	0x0008d04c
   85f3c:	0008d04c 	.word	0x0008d04c
   85f40:	0008d054 	.word	0x0008d054
   85f44:	0008d04c 	.word	0x0008d04c

00085f48 <iprintf>:
   85f48:	b40f      	push	{r0, r1, r2, r3}
   85f4a:	b500      	push	{lr}
   85f4c:	4907      	ldr	r1, [pc, #28]	; (85f6c <iprintf+0x24>)
   85f4e:	b083      	sub	sp, #12
   85f50:	ab04      	add	r3, sp, #16
   85f52:	6808      	ldr	r0, [r1, #0]
   85f54:	f853 2b04 	ldr.w	r2, [r3], #4
   85f58:	6881      	ldr	r1, [r0, #8]
   85f5a:	9301      	str	r3, [sp, #4]
   85f5c:	f002 f80e 	bl	87f7c <_vfiprintf_r>
   85f60:	b003      	add	sp, #12
   85f62:	f85d eb04 	ldr.w	lr, [sp], #4
   85f66:	b004      	add	sp, #16
   85f68:	4770      	bx	lr
   85f6a:	bf00      	nop
   85f6c:	200009ac 	.word	0x200009ac

00085f70 <memcpy>:
   85f70:	4684      	mov	ip, r0
   85f72:	ea41 0300 	orr.w	r3, r1, r0
   85f76:	f013 0303 	ands.w	r3, r3, #3
   85f7a:	d149      	bne.n	86010 <memcpy+0xa0>
   85f7c:	3a40      	subs	r2, #64	; 0x40
   85f7e:	d323      	bcc.n	85fc8 <memcpy+0x58>
   85f80:	680b      	ldr	r3, [r1, #0]
   85f82:	6003      	str	r3, [r0, #0]
   85f84:	684b      	ldr	r3, [r1, #4]
   85f86:	6043      	str	r3, [r0, #4]
   85f88:	688b      	ldr	r3, [r1, #8]
   85f8a:	6083      	str	r3, [r0, #8]
   85f8c:	68cb      	ldr	r3, [r1, #12]
   85f8e:	60c3      	str	r3, [r0, #12]
   85f90:	690b      	ldr	r3, [r1, #16]
   85f92:	6103      	str	r3, [r0, #16]
   85f94:	694b      	ldr	r3, [r1, #20]
   85f96:	6143      	str	r3, [r0, #20]
   85f98:	698b      	ldr	r3, [r1, #24]
   85f9a:	6183      	str	r3, [r0, #24]
   85f9c:	69cb      	ldr	r3, [r1, #28]
   85f9e:	61c3      	str	r3, [r0, #28]
   85fa0:	6a0b      	ldr	r3, [r1, #32]
   85fa2:	6203      	str	r3, [r0, #32]
   85fa4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85fa6:	6243      	str	r3, [r0, #36]	; 0x24
   85fa8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85faa:	6283      	str	r3, [r0, #40]	; 0x28
   85fac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85fae:	62c3      	str	r3, [r0, #44]	; 0x2c
   85fb0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85fb2:	6303      	str	r3, [r0, #48]	; 0x30
   85fb4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85fb6:	6343      	str	r3, [r0, #52]	; 0x34
   85fb8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85fba:	6383      	str	r3, [r0, #56]	; 0x38
   85fbc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85fbe:	63c3      	str	r3, [r0, #60]	; 0x3c
   85fc0:	3040      	adds	r0, #64	; 0x40
   85fc2:	3140      	adds	r1, #64	; 0x40
   85fc4:	3a40      	subs	r2, #64	; 0x40
   85fc6:	d2db      	bcs.n	85f80 <memcpy+0x10>
   85fc8:	3230      	adds	r2, #48	; 0x30
   85fca:	d30b      	bcc.n	85fe4 <memcpy+0x74>
   85fcc:	680b      	ldr	r3, [r1, #0]
   85fce:	6003      	str	r3, [r0, #0]
   85fd0:	684b      	ldr	r3, [r1, #4]
   85fd2:	6043      	str	r3, [r0, #4]
   85fd4:	688b      	ldr	r3, [r1, #8]
   85fd6:	6083      	str	r3, [r0, #8]
   85fd8:	68cb      	ldr	r3, [r1, #12]
   85fda:	60c3      	str	r3, [r0, #12]
   85fdc:	3010      	adds	r0, #16
   85fde:	3110      	adds	r1, #16
   85fe0:	3a10      	subs	r2, #16
   85fe2:	d2f3      	bcs.n	85fcc <memcpy+0x5c>
   85fe4:	320c      	adds	r2, #12
   85fe6:	d305      	bcc.n	85ff4 <memcpy+0x84>
   85fe8:	f851 3b04 	ldr.w	r3, [r1], #4
   85fec:	f840 3b04 	str.w	r3, [r0], #4
   85ff0:	3a04      	subs	r2, #4
   85ff2:	d2f9      	bcs.n	85fe8 <memcpy+0x78>
   85ff4:	3204      	adds	r2, #4
   85ff6:	d008      	beq.n	8600a <memcpy+0x9a>
   85ff8:	07d2      	lsls	r2, r2, #31
   85ffa:	bf1c      	itt	ne
   85ffc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86000:	f800 3b01 	strbne.w	r3, [r0], #1
   86004:	d301      	bcc.n	8600a <memcpy+0x9a>
   86006:	880b      	ldrh	r3, [r1, #0]
   86008:	8003      	strh	r3, [r0, #0]
   8600a:	4660      	mov	r0, ip
   8600c:	4770      	bx	lr
   8600e:	bf00      	nop
   86010:	2a08      	cmp	r2, #8
   86012:	d313      	bcc.n	8603c <memcpy+0xcc>
   86014:	078b      	lsls	r3, r1, #30
   86016:	d0b1      	beq.n	85f7c <memcpy+0xc>
   86018:	f010 0303 	ands.w	r3, r0, #3
   8601c:	d0ae      	beq.n	85f7c <memcpy+0xc>
   8601e:	f1c3 0304 	rsb	r3, r3, #4
   86022:	1ad2      	subs	r2, r2, r3
   86024:	07db      	lsls	r3, r3, #31
   86026:	bf1c      	itt	ne
   86028:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8602c:	f800 3b01 	strbne.w	r3, [r0], #1
   86030:	d3a4      	bcc.n	85f7c <memcpy+0xc>
   86032:	f831 3b02 	ldrh.w	r3, [r1], #2
   86036:	f820 3b02 	strh.w	r3, [r0], #2
   8603a:	e79f      	b.n	85f7c <memcpy+0xc>
   8603c:	3a04      	subs	r2, #4
   8603e:	d3d9      	bcc.n	85ff4 <memcpy+0x84>
   86040:	3a01      	subs	r2, #1
   86042:	f811 3b01 	ldrb.w	r3, [r1], #1
   86046:	f800 3b01 	strb.w	r3, [r0], #1
   8604a:	d2f9      	bcs.n	86040 <memcpy+0xd0>
   8604c:	780b      	ldrb	r3, [r1, #0]
   8604e:	7003      	strb	r3, [r0, #0]
   86050:	784b      	ldrb	r3, [r1, #1]
   86052:	7043      	strb	r3, [r0, #1]
   86054:	788b      	ldrb	r3, [r1, #2]
   86056:	7083      	strb	r3, [r0, #2]
   86058:	4660      	mov	r0, ip
   8605a:	4770      	bx	lr

0008605c <memset>:
   8605c:	b4f0      	push	{r4, r5, r6, r7}
   8605e:	0786      	lsls	r6, r0, #30
   86060:	d046      	beq.n	860f0 <memset+0x94>
   86062:	1e54      	subs	r4, r2, #1
   86064:	2a00      	cmp	r2, #0
   86066:	d03c      	beq.n	860e2 <memset+0x86>
   86068:	4603      	mov	r3, r0
   8606a:	b2ca      	uxtb	r2, r1
   8606c:	e001      	b.n	86072 <memset+0x16>
   8606e:	3c01      	subs	r4, #1
   86070:	d337      	bcc.n	860e2 <memset+0x86>
   86072:	f803 2b01 	strb.w	r2, [r3], #1
   86076:	079d      	lsls	r5, r3, #30
   86078:	d1f9      	bne.n	8606e <memset+0x12>
   8607a:	2c03      	cmp	r4, #3
   8607c:	d92a      	bls.n	860d4 <memset+0x78>
   8607e:	b2cd      	uxtb	r5, r1
   86080:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86084:	2c0f      	cmp	r4, #15
   86086:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8608a:	d934      	bls.n	860f6 <memset+0x9a>
   8608c:	f1a4 0210 	sub.w	r2, r4, #16
   86090:	f022 0c0f 	bic.w	ip, r2, #15
   86094:	f103 0720 	add.w	r7, r3, #32
   86098:	0916      	lsrs	r6, r2, #4
   8609a:	4467      	add	r7, ip
   8609c:	f103 0210 	add.w	r2, r3, #16
   860a0:	e942 5504 	strd	r5, r5, [r2, #-16]
   860a4:	e942 5502 	strd	r5, r5, [r2, #-8]
   860a8:	3210      	adds	r2, #16
   860aa:	42ba      	cmp	r2, r7
   860ac:	d1f8      	bne.n	860a0 <memset+0x44>
   860ae:	1c72      	adds	r2, r6, #1
   860b0:	f014 0f0c 	tst.w	r4, #12
   860b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   860b8:	f004 060f 	and.w	r6, r4, #15
   860bc:	d013      	beq.n	860e6 <memset+0x8a>
   860be:	1f33      	subs	r3, r6, #4
   860c0:	f023 0303 	bic.w	r3, r3, #3
   860c4:	3304      	adds	r3, #4
   860c6:	4413      	add	r3, r2
   860c8:	f842 5b04 	str.w	r5, [r2], #4
   860cc:	4293      	cmp	r3, r2
   860ce:	d1fb      	bne.n	860c8 <memset+0x6c>
   860d0:	f006 0403 	and.w	r4, r6, #3
   860d4:	b12c      	cbz	r4, 860e2 <memset+0x86>
   860d6:	b2ca      	uxtb	r2, r1
   860d8:	441c      	add	r4, r3
   860da:	f803 2b01 	strb.w	r2, [r3], #1
   860de:	429c      	cmp	r4, r3
   860e0:	d1fb      	bne.n	860da <memset+0x7e>
   860e2:	bcf0      	pop	{r4, r5, r6, r7}
   860e4:	4770      	bx	lr
   860e6:	4634      	mov	r4, r6
   860e8:	4613      	mov	r3, r2
   860ea:	2c00      	cmp	r4, #0
   860ec:	d1f3      	bne.n	860d6 <memset+0x7a>
   860ee:	e7f8      	b.n	860e2 <memset+0x86>
   860f0:	4614      	mov	r4, r2
   860f2:	4603      	mov	r3, r0
   860f4:	e7c1      	b.n	8607a <memset+0x1e>
   860f6:	461a      	mov	r2, r3
   860f8:	4626      	mov	r6, r4
   860fa:	e7e0      	b.n	860be <memset+0x62>

000860fc <setbuf>:
   860fc:	2900      	cmp	r1, #0
   860fe:	bf0c      	ite	eq
   86100:	2202      	moveq	r2, #2
   86102:	2200      	movne	r2, #0
   86104:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86108:	f000 b800 	b.w	8610c <setvbuf>

0008610c <setvbuf>:
   8610c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86110:	4d65      	ldr	r5, [pc, #404]	; (862a8 <setvbuf+0x19c>)
   86112:	4604      	mov	r4, r0
   86114:	f8d5 9000 	ldr.w	r9, [r5]
   86118:	460f      	mov	r7, r1
   8611a:	4690      	mov	r8, r2
   8611c:	461e      	mov	r6, r3
   8611e:	b083      	sub	sp, #12
   86120:	f1b9 0f00 	cmp.w	r9, #0
   86124:	d003      	beq.n	8612e <setvbuf+0x22>
   86126:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   8612a:	2b00      	cmp	r3, #0
   8612c:	d079      	beq.n	86222 <setvbuf+0x116>
   8612e:	f1b8 0f02 	cmp.w	r8, #2
   86132:	d006      	beq.n	86142 <setvbuf+0x36>
   86134:	f1b8 0f01 	cmp.w	r8, #1
   86138:	f200 80a3 	bhi.w	86282 <setvbuf+0x176>
   8613c:	2e00      	cmp	r6, #0
   8613e:	f2c0 80a0 	blt.w	86282 <setvbuf+0x176>
   86142:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86144:	07d9      	lsls	r1, r3, #31
   86146:	d552      	bpl.n	861ee <setvbuf+0xe2>
   86148:	4621      	mov	r1, r4
   8614a:	4648      	mov	r0, r9
   8614c:	f003 fef4 	bl	89f38 <_fflush_r>
   86150:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86152:	b141      	cbz	r1, 86166 <setvbuf+0x5a>
   86154:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86158:	4299      	cmp	r1, r3
   8615a:	d002      	beq.n	86162 <setvbuf+0x56>
   8615c:	4648      	mov	r0, r9
   8615e:	f004 f86b 	bl	8a238 <_free_r>
   86162:	2300      	movs	r3, #0
   86164:	6323      	str	r3, [r4, #48]	; 0x30
   86166:	2300      	movs	r3, #0
   86168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   8616c:	61a3      	str	r3, [r4, #24]
   8616e:	6063      	str	r3, [r4, #4]
   86170:	062b      	lsls	r3, r5, #24
   86172:	d465      	bmi.n	86240 <setvbuf+0x134>
   86174:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   86178:	f025 0503 	bic.w	r5, r5, #3
   8617c:	f1b8 0f02 	cmp.w	r8, #2
   86180:	81a5      	strh	r5, [r4, #12]
   86182:	d064      	beq.n	8624e <setvbuf+0x142>
   86184:	ab01      	add	r3, sp, #4
   86186:	466a      	mov	r2, sp
   86188:	4621      	mov	r1, r4
   8618a:	4648      	mov	r0, r9
   8618c:	f004 fb06 	bl	8a79c <__swhatbuf_r>
   86190:	89a3      	ldrh	r3, [r4, #12]
   86192:	4318      	orrs	r0, r3
   86194:	81a0      	strh	r0, [r4, #12]
   86196:	2e00      	cmp	r6, #0
   86198:	d030      	beq.n	861fc <setvbuf+0xf0>
   8619a:	2f00      	cmp	r7, #0
   8619c:	d02f      	beq.n	861fe <setvbuf+0xf2>
   8619e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   861a2:	2b00      	cmp	r3, #0
   861a4:	d039      	beq.n	8621a <setvbuf+0x10e>
   861a6:	9b00      	ldr	r3, [sp, #0]
   861a8:	e9c4 7604 	strd	r7, r6, [r4, #16]
   861ac:	42b3      	cmp	r3, r6
   861ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   861b2:	6027      	str	r7, [r4, #0]
   861b4:	bf1c      	itt	ne
   861b6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   861ba:	81a3      	strhne	r3, [r4, #12]
   861bc:	f1b8 0f01 	cmp.w	r8, #1
   861c0:	bf04      	itt	eq
   861c2:	f043 0301 	orreq.w	r3, r3, #1
   861c6:	81a3      	strheq	r3, [r4, #12]
   861c8:	b29a      	uxth	r2, r3
   861ca:	f013 0308 	ands.w	r3, r3, #8
   861ce:	d02c      	beq.n	8622a <setvbuf+0x11e>
   861d0:	07d1      	lsls	r1, r2, #31
   861d2:	d554      	bpl.n	8627e <setvbuf+0x172>
   861d4:	2100      	movs	r1, #0
   861d6:	4276      	negs	r6, r6
   861d8:	61a6      	str	r6, [r4, #24]
   861da:	6e66      	ldr	r6, [r4, #100]	; 0x64
   861dc:	60a1      	str	r1, [r4, #8]
   861de:	f016 0601 	ands.w	r6, r6, #1
   861e2:	d027      	beq.n	86234 <setvbuf+0x128>
   861e4:	2600      	movs	r6, #0
   861e6:	4630      	mov	r0, r6
   861e8:	b003      	add	sp, #12
   861ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   861ee:	89a3      	ldrh	r3, [r4, #12]
   861f0:	059a      	lsls	r2, r3, #22
   861f2:	d4a9      	bmi.n	86148 <setvbuf+0x3c>
   861f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   861f6:	f004 facd 	bl	8a794 <__retarget_lock_acquire_recursive>
   861fa:	e7a5      	b.n	86148 <setvbuf+0x3c>
   861fc:	9e00      	ldr	r6, [sp, #0]
   861fe:	4630      	mov	r0, r6
   86200:	f004 fb44 	bl	8a88c <malloc>
   86204:	4607      	mov	r7, r0
   86206:	2800      	cmp	r0, #0
   86208:	d03e      	beq.n	86288 <setvbuf+0x17c>
   8620a:	89a3      	ldrh	r3, [r4, #12]
   8620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86210:	81a3      	strh	r3, [r4, #12]
   86212:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   86216:	2b00      	cmp	r3, #0
   86218:	d1c5      	bne.n	861a6 <setvbuf+0x9a>
   8621a:	4648      	mov	r0, r9
   8621c:	f003 fee8 	bl	89ff0 <__sinit>
   86220:	e7c1      	b.n	861a6 <setvbuf+0x9a>
   86222:	4648      	mov	r0, r9
   86224:	f003 fee4 	bl	89ff0 <__sinit>
   86228:	e781      	b.n	8612e <setvbuf+0x22>
   8622a:	60a3      	str	r3, [r4, #8]
   8622c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8622e:	f016 0601 	ands.w	r6, r6, #1
   86232:	d1d7      	bne.n	861e4 <setvbuf+0xd8>
   86234:	0593      	lsls	r3, r2, #22
   86236:	d51b      	bpl.n	86270 <setvbuf+0x164>
   86238:	4630      	mov	r0, r6
   8623a:	b003      	add	sp, #12
   8623c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86240:	4648      	mov	r0, r9
   86242:	6921      	ldr	r1, [r4, #16]
   86244:	f003 fff8 	bl	8a238 <_free_r>
   86248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   8624c:	e792      	b.n	86174 <setvbuf+0x68>
   8624e:	2600      	movs	r6, #0
   86250:	2300      	movs	r3, #0
   86252:	2101      	movs	r1, #1
   86254:	6e62      	ldr	r2, [r4, #100]	; 0x64
   86256:	f045 0502 	orr.w	r5, r5, #2
   8625a:	60a3      	str	r3, [r4, #8]
   8625c:	07d7      	lsls	r7, r2, #31
   8625e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   86262:	81a5      	strh	r5, [r4, #12]
   86264:	6161      	str	r1, [r4, #20]
   86266:	6023      	str	r3, [r4, #0]
   86268:	6123      	str	r3, [r4, #16]
   8626a:	d4e5      	bmi.n	86238 <setvbuf+0x12c>
   8626c:	05a8      	lsls	r0, r5, #22
   8626e:	d4e3      	bmi.n	86238 <setvbuf+0x12c>
   86270:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86272:	f004 fa91 	bl	8a798 <__retarget_lock_release_recursive>
   86276:	4630      	mov	r0, r6
   86278:	b003      	add	sp, #12
   8627a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8627e:	60a6      	str	r6, [r4, #8]
   86280:	e7d4      	b.n	8622c <setvbuf+0x120>
   86282:	f04f 36ff 	mov.w	r6, #4294967295
   86286:	e7d7      	b.n	86238 <setvbuf+0x12c>
   86288:	9d00      	ldr	r5, [sp, #0]
   8628a:	42b5      	cmp	r5, r6
   8628c:	d004      	beq.n	86298 <setvbuf+0x18c>
   8628e:	4628      	mov	r0, r5
   86290:	f004 fafc 	bl	8a88c <malloc>
   86294:	4607      	mov	r7, r0
   86296:	b920      	cbnz	r0, 862a2 <setvbuf+0x196>
   86298:	f04f 36ff 	mov.w	r6, #4294967295
   8629c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   862a0:	e7d6      	b.n	86250 <setvbuf+0x144>
   862a2:	462e      	mov	r6, r5
   862a4:	e7b1      	b.n	8620a <setvbuf+0xfe>
   862a6:	bf00      	nop
   862a8:	200009ac 	.word	0x200009ac

000862ac <sprintf>:
   862ac:	b40e      	push	{r1, r2, r3}
   862ae:	4601      	mov	r1, r0
   862b0:	b530      	push	{r4, r5, lr}
   862b2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   862b6:	b09c      	sub	sp, #112	; 0x70
   862b8:	ab1f      	add	r3, sp, #124	; 0x7c
   862ba:	480b      	ldr	r0, [pc, #44]	; (862e8 <sprintf+0x3c>)
   862bc:	f853 2b04 	ldr.w	r2, [r3], #4
   862c0:	4d0a      	ldr	r5, [pc, #40]	; (862ec <sprintf+0x40>)
   862c2:	9102      	str	r1, [sp, #8]
   862c4:	9106      	str	r1, [sp, #24]
   862c6:	6800      	ldr	r0, [r0, #0]
   862c8:	a902      	add	r1, sp, #8
   862ca:	9301      	str	r3, [sp, #4]
   862cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   862d0:	9407      	str	r4, [sp, #28]
   862d2:	f000 f86f 	bl	863b4 <_svfprintf_r>
   862d6:	2200      	movs	r2, #0
   862d8:	9b02      	ldr	r3, [sp, #8]
   862da:	701a      	strb	r2, [r3, #0]
   862dc:	b01c      	add	sp, #112	; 0x70
   862de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   862e2:	b003      	add	sp, #12
   862e4:	4770      	bx	lr
   862e6:	bf00      	nop
   862e8:	200009ac 	.word	0x200009ac
   862ec:	ffff0208 	.word	0xffff0208

000862f0 <strlen>:
   862f0:	f020 0103 	bic.w	r1, r0, #3
   862f4:	f010 0003 	ands.w	r0, r0, #3
   862f8:	f1c0 0000 	rsb	r0, r0, #0
   862fc:	f851 3b04 	ldr.w	r3, [r1], #4
   86300:	f100 0c04 	add.w	ip, r0, #4
   86304:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86308:	f06f 0200 	mvn.w	r2, #0
   8630c:	bf1c      	itt	ne
   8630e:	fa22 f20c 	lsrne.w	r2, r2, ip
   86312:	4313      	orrne	r3, r2
   86314:	f04f 0c01 	mov.w	ip, #1
   86318:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8631c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   86320:	eba3 020c 	sub.w	r2, r3, ip
   86324:	ea22 0203 	bic.w	r2, r2, r3
   86328:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8632c:	bf04      	itt	eq
   8632e:	f851 3b04 	ldreq.w	r3, [r1], #4
   86332:	3004      	addeq	r0, #4
   86334:	d0f4      	beq.n	86320 <strlen+0x30>
   86336:	f1c2 0100 	rsb	r1, r2, #0
   8633a:	ea02 0201 	and.w	r2, r2, r1
   8633e:	fab2 f282 	clz	r2, r2
   86342:	f1c2 021f 	rsb	r2, r2, #31
   86346:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8634a:	4770      	bx	lr

0008634c <strncpy>:
   8634c:	b470      	push	{r4, r5, r6}
   8634e:	ea40 0401 	orr.w	r4, r0, r1
   86352:	07a3      	lsls	r3, r4, #30
   86354:	d122      	bne.n	8639c <strncpy+0x50>
   86356:	2a03      	cmp	r2, #3
   86358:	d920      	bls.n	8639c <strncpy+0x50>
   8635a:	460b      	mov	r3, r1
   8635c:	4604      	mov	r4, r0
   8635e:	4619      	mov	r1, r3
   86360:	f853 6b04 	ldr.w	r6, [r3], #4
   86364:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   86368:	ea25 0506 	bic.w	r5, r5, r6
   8636c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   86370:	d115      	bne.n	8639e <strncpy+0x52>
   86372:	3a04      	subs	r2, #4
   86374:	2a03      	cmp	r2, #3
   86376:	4619      	mov	r1, r3
   86378:	f844 6b04 	str.w	r6, [r4], #4
   8637c:	d8ef      	bhi.n	8635e <strncpy+0x12>
   8637e:	1e4d      	subs	r5, r1, #1
   86380:	b152      	cbz	r2, 86398 <strncpy+0x4c>
   86382:	4623      	mov	r3, r4
   86384:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   86388:	1e56      	subs	r6, r2, #1
   8638a:	f803 1b01 	strb.w	r1, [r3], #1
   8638e:	b141      	cbz	r1, 863a2 <strncpy+0x56>
   86390:	4632      	mov	r2, r6
   86392:	461c      	mov	r4, r3
   86394:	2a00      	cmp	r2, #0
   86396:	d1f4      	bne.n	86382 <strncpy+0x36>
   86398:	bc70      	pop	{r4, r5, r6}
   8639a:	4770      	bx	lr
   8639c:	4604      	mov	r4, r0
   8639e:	1e4d      	subs	r5, r1, #1
   863a0:	e7ee      	b.n	86380 <strncpy+0x34>
   863a2:	4422      	add	r2, r4
   863a4:	2e00      	cmp	r6, #0
   863a6:	d0f7      	beq.n	86398 <strncpy+0x4c>
   863a8:	f803 1b01 	strb.w	r1, [r3], #1
   863ac:	4293      	cmp	r3, r2
   863ae:	d1fb      	bne.n	863a8 <strncpy+0x5c>
   863b0:	bc70      	pop	{r4, r5, r6}
   863b2:	4770      	bx	lr

000863b4 <_svfprintf_r>:
   863b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863b8:	b0d7      	sub	sp, #348	; 0x15c
   863ba:	468b      	mov	fp, r1
   863bc:	4617      	mov	r7, r2
   863be:	930e      	str	r3, [sp, #56]	; 0x38
   863c0:	4681      	mov	r9, r0
   863c2:	f004 f9df 	bl	8a784 <_localeconv_r>
   863c6:	6803      	ldr	r3, [r0, #0]
   863c8:	4618      	mov	r0, r3
   863ca:	9318      	str	r3, [sp, #96]	; 0x60
   863cc:	f7ff ff90 	bl	862f0 <strlen>
   863d0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   863d4:	9017      	str	r0, [sp, #92]	; 0x5c
   863d6:	061d      	lsls	r5, r3, #24
   863d8:	d504      	bpl.n	863e4 <_svfprintf_r+0x30>
   863da:	f8db 3010 	ldr.w	r3, [fp, #16]
   863de:	2b00      	cmp	r3, #0
   863e0:	f000 87df 	beq.w	873a2 <_svfprintf_r+0xfee>
   863e4:	2300      	movs	r3, #0
   863e6:	2100      	movs	r1, #0
   863e8:	2200      	movs	r2, #0
   863ea:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   863ee:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   863f2:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   863f6:	9313      	str	r3, [sp, #76]	; 0x4c
   863f8:	9319      	str	r3, [sp, #100]	; 0x64
   863fa:	930a      	str	r3, [sp, #40]	; 0x28
   863fc:	ab2d      	add	r3, sp, #180	; 0xb4
   863fe:	4698      	mov	r8, r3
   86400:	932a      	str	r3, [sp, #168]	; 0xa8
   86402:	783b      	ldrb	r3, [r7, #0]
   86404:	46da      	mov	sl, fp
   86406:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   8640a:	2b00      	cmp	r3, #0
   8640c:	f000 81a4 	beq.w	86758 <_svfprintf_r+0x3a4>
   86410:	463c      	mov	r4, r7
   86412:	e004      	b.n	8641e <_svfprintf_r+0x6a>
   86414:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86418:	2b00      	cmp	r3, #0
   8641a:	f000 80fd 	beq.w	86618 <_svfprintf_r+0x264>
   8641e:	2b25      	cmp	r3, #37	; 0x25
   86420:	d1f8      	bne.n	86414 <_svfprintf_r+0x60>
   86422:	1be5      	subs	r5, r4, r7
   86424:	f040 80fb 	bne.w	8661e <_svfprintf_r+0x26a>
   86428:	7823      	ldrb	r3, [r4, #0]
   8642a:	2b00      	cmp	r3, #0
   8642c:	f000 8194 	beq.w	86758 <_svfprintf_r+0x3a4>
   86430:	2300      	movs	r3, #0
   86432:	930b      	str	r3, [sp, #44]	; 0x2c
   86434:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86438:	9307      	str	r3, [sp, #28]
   8643a:	f04f 33ff 	mov.w	r3, #4294967295
   8643e:	7866      	ldrb	r6, [r4, #1]
   86440:	f104 0b01 	add.w	fp, r4, #1
   86444:	2120      	movs	r1, #32
   86446:	242b      	movs	r4, #43	; 0x2b
   86448:	9309      	str	r3, [sp, #36]	; 0x24
   8644a:	f10b 0b01 	add.w	fp, fp, #1
   8644e:	f1a6 0320 	sub.w	r3, r6, #32
   86452:	2b5a      	cmp	r3, #90	; 0x5a
   86454:	f200 80ff 	bhi.w	86656 <_svfprintf_r+0x2a2>
   86458:	e8df f013 	tbh	[pc, r3, lsl #1]
   8645c:	00fd02bc 	.word	0x00fd02bc
   86460:	02b500fd 	.word	0x02b500fd
   86464:	00fd00fd 	.word	0x00fd00fd
   86468:	029100fd 	.word	0x029100fd
   8646c:	00fd00fd 	.word	0x00fd00fd
   86470:	02e7006a 	.word	0x02e7006a
   86474:	023400fd 	.word	0x023400fd
   86478:	00fd02cd 	.word	0x00fd02cd
   8647c:	005b02c6 	.word	0x005b02c6
   86480:	005b005b 	.word	0x005b005b
   86484:	005b005b 	.word	0x005b005b
   86488:	005b005b 	.word	0x005b005b
   8648c:	005b005b 	.word	0x005b005b
   86490:	00fd00fd 	.word	0x00fd00fd
   86494:	00fd00fd 	.word	0x00fd00fd
   86498:	00fd00fd 	.word	0x00fd00fd
   8649c:	019000fd 	.word	0x019000fd
   864a0:	01f700fd 	.word	0x01f700fd
   864a4:	0190007c 	.word	0x0190007c
   864a8:	01900190 	.word	0x01900190
   864ac:	00fd00fd 	.word	0x00fd00fd
   864b0:	00fd00fd 	.word	0x00fd00fd
   864b4:	00fd028a 	.word	0x00fd028a
   864b8:	00a900fd 	.word	0x00a900fd
   864bc:	00fd00fd 	.word	0x00fd00fd
   864c0:	020b00fd 	.word	0x020b00fd
   864c4:	023b00fd 	.word	0x023b00fd
   864c8:	00fd00fd 	.word	0x00fd00fd
   864cc:	00fd0781 	.word	0x00fd0781
   864d0:	00fd00fd 	.word	0x00fd00fd
   864d4:	00fd00fd 	.word	0x00fd00fd
   864d8:	00fd00fd 	.word	0x00fd00fd
   864dc:	019000fd 	.word	0x019000fd
   864e0:	01f700fd 	.word	0x01f700fd
   864e4:	01900080 	.word	0x01900080
   864e8:	01900190 	.word	0x01900190
   864ec:	00800280 	.word	0x00800280
   864f0:	00fd0075 	.word	0x00fd0075
   864f4:	00fd0276 	.word	0x00fd0276
   864f8:	00ad025e 	.word	0x00ad025e
   864fc:	0075024c 	.word	0x0075024c
   86500:	020b00fd 	.word	0x020b00fd
   86504:	075b0072 	.word	0x075b0072
   86508:	00fd00fd 	.word	0x00fd00fd
   8650c:	00fd075f 	.word	0x00fd075f
   86510:	0072      	.short	0x0072
   86512:	2200      	movs	r2, #0
   86514:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86518:	f81b 6b01 	ldrb.w	r6, [fp], #1
   8651c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86520:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86524:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86528:	2b09      	cmp	r3, #9
   8652a:	d9f5      	bls.n	86518 <_svfprintf_r+0x164>
   8652c:	920b      	str	r2, [sp, #44]	; 0x2c
   8652e:	e78e      	b.n	8644e <_svfprintf_r+0x9a>
   86530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86532:	f853 2b04 	ldr.w	r2, [r3], #4
   86536:	2a00      	cmp	r2, #0
   86538:	920b      	str	r2, [sp, #44]	; 0x2c
   8653a:	930e      	str	r3, [sp, #56]	; 0x38
   8653c:	f2c0 81bf 	blt.w	868be <_svfprintf_r+0x50a>
   86540:	f89b 6000 	ldrb.w	r6, [fp]
   86544:	e781      	b.n	8644a <_svfprintf_r+0x96>
   86546:	9b07      	ldr	r3, [sp, #28]
   86548:	f89b 6000 	ldrb.w	r6, [fp]
   8654c:	f043 0320 	orr.w	r3, r3, #32
   86550:	9307      	str	r3, [sp, #28]
   86552:	e77a      	b.n	8644a <_svfprintf_r+0x96>
   86554:	9b07      	ldr	r3, [sp, #28]
   86556:	f043 0310 	orr.w	r3, r3, #16
   8655a:	9307      	str	r3, [sp, #28]
   8655c:	9b07      	ldr	r3, [sp, #28]
   8655e:	069c      	lsls	r4, r3, #26
   86560:	f140 8162 	bpl.w	86828 <_svfprintf_r+0x474>
   86564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86566:	3307      	adds	r3, #7
   86568:	f023 0307 	bic.w	r3, r3, #7
   8656c:	4619      	mov	r1, r3
   8656e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86572:	4614      	mov	r4, r2
   86574:	461d      	mov	r5, r3
   86576:	910e      	str	r1, [sp, #56]	; 0x38
   86578:	2a00      	cmp	r2, #0
   8657a:	f173 0300 	sbcs.w	r3, r3, #0
   8657e:	f2c0 85ab 	blt.w	870d8 <_svfprintf_r+0xd24>
   86582:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86584:	3301      	adds	r3, #1
   86586:	9b07      	ldr	r3, [sp, #28]
   86588:	f000 8414 	beq.w	86db4 <_svfprintf_r+0xa00>
   8658c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86590:	ea54 0205 	orrs.w	r2, r4, r5
   86594:	9308      	str	r3, [sp, #32]
   86596:	f040 840e 	bne.w	86db6 <_svfprintf_r+0xa02>
   8659a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8659c:	2a00      	cmp	r2, #0
   8659e:	f040 840f 	bne.w	86dc0 <_svfprintf_r+0xa0c>
   865a2:	9307      	str	r3, [sp, #28]
   865a4:	2300      	movs	r3, #0
   865a6:	af56      	add	r7, sp, #344	; 0x158
   865a8:	9309      	str	r3, [sp, #36]	; 0x24
   865aa:	930c      	str	r3, [sp, #48]	; 0x30
   865ac:	e26b      	b.n	86a86 <_svfprintf_r+0x6d2>
   865ae:	9b07      	ldr	r3, [sp, #28]
   865b0:	f043 0310 	orr.w	r3, r3, #16
   865b4:	9307      	str	r3, [sp, #28]
   865b6:	9b07      	ldr	r3, [sp, #28]
   865b8:	069a      	lsls	r2, r3, #26
   865ba:	f140 8126 	bpl.w	8680a <_svfprintf_r+0x456>
   865be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   865c0:	3307      	adds	r3, #7
   865c2:	f023 0307 	bic.w	r3, r3, #7
   865c6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   865ca:	930e      	str	r3, [sp, #56]	; 0x38
   865cc:	9b07      	ldr	r3, [sp, #28]
   865ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   865d2:	9308      	str	r3, [sp, #32]
   865d4:	2300      	movs	r3, #0
   865d6:	2200      	movs	r2, #0
   865d8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   865dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   865de:	4611      	mov	r1, r2
   865e0:	3101      	adds	r1, #1
   865e2:	f000 8231 	beq.w	86a48 <_svfprintf_r+0x694>
   865e6:	9908      	ldr	r1, [sp, #32]
   865e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   865ec:	9107      	str	r1, [sp, #28]
   865ee:	ea54 0105 	orrs.w	r1, r4, r5
   865f2:	f040 8227 	bne.w	86a44 <_svfprintf_r+0x690>
   865f6:	2a00      	cmp	r2, #0
   865f8:	f040 837d 	bne.w	86cf6 <_svfprintf_r+0x942>
   865fc:	2b00      	cmp	r3, #0
   865fe:	d1d1      	bne.n	865a4 <_svfprintf_r+0x1f0>
   86600:	9b08      	ldr	r3, [sp, #32]
   86602:	f013 0301 	ands.w	r3, r3, #1
   86606:	930c      	str	r3, [sp, #48]	; 0x30
   86608:	f000 8590 	beq.w	8712c <_svfprintf_r+0xd78>
   8660c:	2330      	movs	r3, #48	; 0x30
   8660e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86612:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   86616:	e236      	b.n	86a86 <_svfprintf_r+0x6d2>
   86618:	1be5      	subs	r5, r4, r7
   8661a:	f000 809d 	beq.w	86758 <_svfprintf_r+0x3a4>
   8661e:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   86622:	3301      	adds	r3, #1
   86624:	442a      	add	r2, r5
   86626:	2b07      	cmp	r3, #7
   86628:	e9c8 7500 	strd	r7, r5, [r8]
   8662c:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   86630:	dc06      	bgt.n	86640 <_svfprintf_r+0x28c>
   86632:	f108 0808 	add.w	r8, r8, #8
   86636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86638:	7823      	ldrb	r3, [r4, #0]
   8663a:	442a      	add	r2, r5
   8663c:	920a      	str	r2, [sp, #40]	; 0x28
   8663e:	e6f4      	b.n	8642a <_svfprintf_r+0x76>
   86640:	4651      	mov	r1, sl
   86642:	4648      	mov	r0, r9
   86644:	aa2a      	add	r2, sp, #168	; 0xa8
   86646:	f005 fa9f 	bl	8bb88 <__ssprint_r>
   8664a:	2800      	cmp	r0, #0
   8664c:	f041 83ce 	bne.w	87dec <_svfprintf_r+0x1a38>
   86650:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86654:	e7ef      	b.n	86636 <_svfprintf_r+0x282>
   86656:	2e00      	cmp	r6, #0
   86658:	d07e      	beq.n	86758 <_svfprintf_r+0x3a4>
   8665a:	2300      	movs	r3, #0
   8665c:	2101      	movs	r1, #1
   8665e:	461a      	mov	r2, r3
   86660:	9108      	str	r1, [sp, #32]
   86662:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   86666:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8666a:	930d      	str	r3, [sp, #52]	; 0x34
   8666c:	9309      	str	r3, [sp, #36]	; 0x24
   8666e:	9312      	str	r3, [sp, #72]	; 0x48
   86670:	9316      	str	r3, [sp, #88]	; 0x58
   86672:	9310      	str	r3, [sp, #64]	; 0x40
   86674:	910c      	str	r1, [sp, #48]	; 0x30
   86676:	af3d      	add	r7, sp, #244	; 0xf4
   86678:	9b07      	ldr	r3, [sp, #28]
   8667a:	f013 0302 	ands.w	r3, r3, #2
   8667e:	d002      	beq.n	86686 <_svfprintf_r+0x2d2>
   86680:	9908      	ldr	r1, [sp, #32]
   86682:	3102      	adds	r1, #2
   86684:	9108      	str	r1, [sp, #32]
   86686:	9907      	ldr	r1, [sp, #28]
   86688:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   8668c:	910f      	str	r1, [sp, #60]	; 0x3c
   8668e:	d105      	bne.n	8669c <_svfprintf_r+0x2e8>
   86690:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86692:	9808      	ldr	r0, [sp, #32]
   86694:	1a0d      	subs	r5, r1, r0
   86696:	2d00      	cmp	r5, #0
   86698:	f300 834b 	bgt.w	86d32 <_svfprintf_r+0x97e>
   8669c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8669e:	b172      	cbz	r2, 866be <_svfprintf_r+0x30a>
   866a0:	2001      	movs	r0, #1
   866a2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   866a4:	4404      	add	r4, r0
   866a6:	4402      	add	r2, r0
   866a8:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   866ac:	2a07      	cmp	r2, #7
   866ae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   866b2:	e9c8 1000 	strd	r1, r0, [r8]
   866b6:	f300 83cd 	bgt.w	86e54 <_svfprintf_r+0xaa0>
   866ba:	f108 0808 	add.w	r8, r8, #8
   866be:	b16b      	cbz	r3, 866dc <_svfprintf_r+0x328>
   866c0:	2102      	movs	r1, #2
   866c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   866c4:	440c      	add	r4, r1
   866c6:	3301      	adds	r3, #1
   866c8:	aa23      	add	r2, sp, #140	; 0x8c
   866ca:	2b07      	cmp	r3, #7
   866cc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   866d0:	e9c8 2100 	strd	r2, r1, [r8]
   866d4:	f300 83cc 	bgt.w	86e70 <_svfprintf_r+0xabc>
   866d8:	f108 0808 	add.w	r8, r8, #8
   866dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   866de:	2b80      	cmp	r3, #128	; 0x80
   866e0:	f000 8234 	beq.w	86b4c <_svfprintf_r+0x798>
   866e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   866e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   866e8:	1a9d      	subs	r5, r3, r2
   866ea:	2d00      	cmp	r5, #0
   866ec:	f300 826e 	bgt.w	86bcc <_svfprintf_r+0x818>
   866f0:	9b07      	ldr	r3, [sp, #28]
   866f2:	05d9      	lsls	r1, r3, #23
   866f4:	f100 81d5 	bmi.w	86aa2 <_svfprintf_r+0x6ee>
   866f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   866fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   866fc:	3301      	adds	r3, #1
   866fe:	4414      	add	r4, r2
   86700:	2b07      	cmp	r3, #7
   86702:	e9c8 7200 	strd	r7, r2, [r8]
   86706:	942c      	str	r4, [sp, #176]	; 0xb0
   86708:	932b      	str	r3, [sp, #172]	; 0xac
   8670a:	f300 8397 	bgt.w	86e3c <_svfprintf_r+0xa88>
   8670e:	f108 0808 	add.w	r8, r8, #8
   86712:	9b07      	ldr	r3, [sp, #28]
   86714:	0759      	lsls	r1, r3, #29
   86716:	d505      	bpl.n	86724 <_svfprintf_r+0x370>
   86718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8671a:	9a08      	ldr	r2, [sp, #32]
   8671c:	1a9d      	subs	r5, r3, r2
   8671e:	2d00      	cmp	r5, #0
   86720:	f300 83b2 	bgt.w	86e88 <_svfprintf_r+0xad4>
   86724:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   86728:	9908      	ldr	r1, [sp, #32]
   8672a:	428a      	cmp	r2, r1
   8672c:	bfac      	ite	ge
   8672e:	189b      	addge	r3, r3, r2
   86730:	185b      	addlt	r3, r3, r1
   86732:	930a      	str	r3, [sp, #40]	; 0x28
   86734:	2c00      	cmp	r4, #0
   86736:	f040 827d 	bne.w	86c34 <_svfprintf_r+0x880>
   8673a:	2300      	movs	r3, #0
   8673c:	932b      	str	r3, [sp, #172]	; 0xac
   8673e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86740:	b11b      	cbz	r3, 8674a <_svfprintf_r+0x396>
   86742:	4648      	mov	r0, r9
   86744:	990d      	ldr	r1, [sp, #52]	; 0x34
   86746:	f003 fd77 	bl	8a238 <_free_r>
   8674a:	465f      	mov	r7, fp
   8674c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86750:	783b      	ldrb	r3, [r7, #0]
   86752:	2b00      	cmp	r3, #0
   86754:	f47f ae5c 	bne.w	86410 <_svfprintf_r+0x5c>
   86758:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8675a:	46d3      	mov	fp, sl
   8675c:	2b00      	cmp	r3, #0
   8675e:	f041 824b 	bne.w	87bf8 <_svfprintf_r+0x1844>
   86762:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86766:	f013 0f40 	tst.w	r3, #64	; 0x40
   8676a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8676c:	bf18      	it	ne
   8676e:	f04f 33ff 	movne.w	r3, #4294967295
   86772:	930a      	str	r3, [sp, #40]	; 0x28
   86774:	980a      	ldr	r0, [sp, #40]	; 0x28
   86776:	b057      	add	sp, #348	; 0x15c
   86778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8677c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8677e:	3307      	adds	r3, #7
   86780:	f023 0307 	bic.w	r3, r3, #7
   86784:	4619      	mov	r1, r3
   86786:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8678a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8678e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86792:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86796:	461d      	mov	r5, r3
   86798:	4618      	mov	r0, r3
   8679a:	910e      	str	r1, [sp, #56]	; 0x38
   8679c:	f04f 32ff 	mov.w	r2, #4294967295
   867a0:	4621      	mov	r1, r4
   867a2:	4ba4      	ldr	r3, [pc, #656]	; (86a34 <_svfprintf_r+0x680>)
   867a4:	f006 f924 	bl	8c9f0 <__aeabi_dcmpun>
   867a8:	2800      	cmp	r0, #0
   867aa:	f040 84d9 	bne.w	87160 <_svfprintf_r+0xdac>
   867ae:	4628      	mov	r0, r5
   867b0:	4621      	mov	r1, r4
   867b2:	f04f 32ff 	mov.w	r2, #4294967295
   867b6:	4b9f      	ldr	r3, [pc, #636]	; (86a34 <_svfprintf_r+0x680>)
   867b8:	f006 f8fc 	bl	8c9b4 <__aeabi_dcmple>
   867bc:	2800      	cmp	r0, #0
   867be:	f040 84cf 	bne.w	87160 <_svfprintf_r+0xdac>
   867c2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   867c6:	2200      	movs	r2, #0
   867c8:	2300      	movs	r3, #0
   867ca:	f006 f8e9 	bl	8c9a0 <__aeabi_dcmplt>
   867ce:	2800      	cmp	r0, #0
   867d0:	f041 800e 	bne.w	877f0 <_svfprintf_r+0x143c>
   867d4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   867d8:	2003      	movs	r0, #3
   867da:	2100      	movs	r1, #0
   867dc:	4f96      	ldr	r7, [pc, #600]	; (86a38 <_svfprintf_r+0x684>)
   867de:	4b97      	ldr	r3, [pc, #604]	; (86a3c <_svfprintf_r+0x688>)
   867e0:	9008      	str	r0, [sp, #32]
   867e2:	910d      	str	r1, [sp, #52]	; 0x34
   867e4:	2e47      	cmp	r6, #71	; 0x47
   867e6:	bfc8      	it	gt
   867e8:	461f      	movgt	r7, r3
   867ea:	9c07      	ldr	r4, [sp, #28]
   867ec:	900c      	str	r0, [sp, #48]	; 0x30
   867ee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   867f2:	9407      	str	r4, [sp, #28]
   867f4:	9109      	str	r1, [sp, #36]	; 0x24
   867f6:	9112      	str	r1, [sp, #72]	; 0x48
   867f8:	9116      	str	r1, [sp, #88]	; 0x58
   867fa:	9110      	str	r1, [sp, #64]	; 0x40
   867fc:	2a00      	cmp	r2, #0
   867fe:	f43f af3b 	beq.w	86678 <_svfprintf_r+0x2c4>
   86802:	9b08      	ldr	r3, [sp, #32]
   86804:	3301      	adds	r3, #1
   86806:	9308      	str	r3, [sp, #32]
   86808:	e736      	b.n	86678 <_svfprintf_r+0x2c4>
   8680a:	9b07      	ldr	r3, [sp, #28]
   8680c:	06db      	lsls	r3, r3, #27
   8680e:	f100 849c 	bmi.w	8714a <_svfprintf_r+0xd96>
   86812:	9b07      	ldr	r3, [sp, #28]
   86814:	065f      	lsls	r7, r3, #25
   86816:	f140 87b2 	bpl.w	8777e <_svfprintf_r+0x13ca>
   8681a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8681c:	2500      	movs	r5, #0
   8681e:	f853 4b04 	ldr.w	r4, [r3], #4
   86822:	930e      	str	r3, [sp, #56]	; 0x38
   86824:	b2a4      	uxth	r4, r4
   86826:	e6d1      	b.n	865cc <_svfprintf_r+0x218>
   86828:	9b07      	ldr	r3, [sp, #28]
   8682a:	06d8      	lsls	r0, r3, #27
   8682c:	f100 8568 	bmi.w	87300 <_svfprintf_r+0xf4c>
   86830:	9b07      	ldr	r3, [sp, #28]
   86832:	0659      	lsls	r1, r3, #25
   86834:	f140 87be 	bpl.w	877b4 <_svfprintf_r+0x1400>
   86838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8683a:	f853 4b04 	ldr.w	r4, [r3], #4
   8683e:	b224      	sxth	r4, r4
   86840:	17e5      	asrs	r5, r4, #31
   86842:	930e      	str	r3, [sp, #56]	; 0x38
   86844:	4622      	mov	r2, r4
   86846:	462b      	mov	r3, r5
   86848:	e696      	b.n	86578 <_svfprintf_r+0x1c4>
   8684a:	2100      	movs	r1, #0
   8684c:	2401      	movs	r4, #1
   8684e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86850:	460a      	mov	r2, r1
   86852:	f853 0b04 	ldr.w	r0, [r3], #4
   86856:	9408      	str	r4, [sp, #32]
   86858:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   8685c:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86860:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   86864:	9109      	str	r1, [sp, #36]	; 0x24
   86866:	9112      	str	r1, [sp, #72]	; 0x48
   86868:	9116      	str	r1, [sp, #88]	; 0x58
   8686a:	9110      	str	r1, [sp, #64]	; 0x40
   8686c:	940c      	str	r4, [sp, #48]	; 0x30
   8686e:	af3d      	add	r7, sp, #244	; 0xf4
   86870:	e702      	b.n	86678 <_svfprintf_r+0x2c4>
   86872:	2500      	movs	r5, #0
   86874:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86876:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8687a:	f854 7b04 	ldr.w	r7, [r4], #4
   8687e:	2f00      	cmp	r7, #0
   86880:	f000 859f 	beq.w	873c2 <_svfprintf_r+0x100e>
   86884:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86886:	4613      	mov	r3, r2
   86888:	3301      	adds	r3, #1
   8688a:	f000 8770 	beq.w	8776e <_svfprintf_r+0x13ba>
   8688e:	4629      	mov	r1, r5
   86890:	4638      	mov	r0, r7
   86892:	f004 fac7 	bl	8ae24 <memchr>
   86896:	900d      	str	r0, [sp, #52]	; 0x34
   86898:	2800      	cmp	r0, #0
   8689a:	f001 80b9 	beq.w	87a10 <_svfprintf_r+0x165c>
   8689e:	462b      	mov	r3, r5
   868a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   868a2:	9509      	str	r5, [sp, #36]	; 0x24
   868a4:	1bd2      	subs	r2, r2, r7
   868a6:	920c      	str	r2, [sp, #48]	; 0x30
   868a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   868ac:	9208      	str	r2, [sp, #32]
   868ae:	940e      	str	r4, [sp, #56]	; 0x38
   868b0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   868b4:	930d      	str	r3, [sp, #52]	; 0x34
   868b6:	9312      	str	r3, [sp, #72]	; 0x48
   868b8:	9316      	str	r3, [sp, #88]	; 0x58
   868ba:	9310      	str	r3, [sp, #64]	; 0x40
   868bc:	e79e      	b.n	867fc <_svfprintf_r+0x448>
   868be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   868c0:	425b      	negs	r3, r3
   868c2:	930b      	str	r3, [sp, #44]	; 0x2c
   868c4:	9b07      	ldr	r3, [sp, #28]
   868c6:	f89b 6000 	ldrb.w	r6, [fp]
   868ca:	f043 0304 	orr.w	r3, r3, #4
   868ce:	9307      	str	r3, [sp, #28]
   868d0:	e5bb      	b.n	8644a <_svfprintf_r+0x96>
   868d2:	9b07      	ldr	r3, [sp, #28]
   868d4:	f043 0310 	orr.w	r3, r3, #16
   868d8:	9308      	str	r3, [sp, #32]
   868da:	9b08      	ldr	r3, [sp, #32]
   868dc:	069d      	lsls	r5, r3, #26
   868de:	f140 83ea 	bpl.w	870b6 <_svfprintf_r+0xd02>
   868e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868e4:	3307      	adds	r3, #7
   868e6:	f023 0307 	bic.w	r3, r3, #7
   868ea:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   868ee:	930e      	str	r3, [sp, #56]	; 0x38
   868f0:	2301      	movs	r3, #1
   868f2:	e670      	b.n	865d6 <_svfprintf_r+0x222>
   868f4:	f647 0230 	movw	r2, #30768	; 0x7830
   868f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868fa:	9907      	ldr	r1, [sp, #28]
   868fc:	f853 4b04 	ldr.w	r4, [r3], #4
   86900:	f041 0102 	orr.w	r1, r1, #2
   86904:	930e      	str	r3, [sp, #56]	; 0x38
   86906:	4b4e      	ldr	r3, [pc, #312]	; (86a40 <_svfprintf_r+0x68c>)
   86908:	2500      	movs	r5, #0
   8690a:	9319      	str	r3, [sp, #100]	; 0x64
   8690c:	2678      	movs	r6, #120	; 0x78
   8690e:	2302      	movs	r3, #2
   86910:	9108      	str	r1, [sp, #32]
   86912:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   86916:	e65e      	b.n	865d6 <_svfprintf_r+0x222>
   86918:	9b07      	ldr	r3, [sp, #28]
   8691a:	069d      	lsls	r5, r3, #26
   8691c:	f100 8408 	bmi.w	87130 <_svfprintf_r+0xd7c>
   86920:	9b07      	ldr	r3, [sp, #28]
   86922:	06dc      	lsls	r4, r3, #27
   86924:	f100 86e1 	bmi.w	876ea <_svfprintf_r+0x1336>
   86928:	9b07      	ldr	r3, [sp, #28]
   8692a:	0658      	lsls	r0, r3, #25
   8692c:	f100 8795 	bmi.w	8785a <_svfprintf_r+0x14a6>
   86930:	9b07      	ldr	r3, [sp, #28]
   86932:	0599      	lsls	r1, r3, #22
   86934:	f140 86d9 	bpl.w	876ea <_svfprintf_r+0x1336>
   86938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8693a:	990a      	ldr	r1, [sp, #40]	; 0x28
   8693c:	f853 2b04 	ldr.w	r2, [r3], #4
   86940:	465f      	mov	r7, fp
   86942:	7011      	strb	r1, [r2, #0]
   86944:	930e      	str	r3, [sp, #56]	; 0x38
   86946:	e703      	b.n	86750 <_svfprintf_r+0x39c>
   86948:	f89b 6000 	ldrb.w	r6, [fp]
   8694c:	9b07      	ldr	r3, [sp, #28]
   8694e:	2e6c      	cmp	r6, #108	; 0x6c
   86950:	f000 8508 	beq.w	87364 <_svfprintf_r+0xfb0>
   86954:	f043 0310 	orr.w	r3, r3, #16
   86958:	9307      	str	r3, [sp, #28]
   8695a:	e576      	b.n	8644a <_svfprintf_r+0x96>
   8695c:	f89b 6000 	ldrb.w	r6, [fp]
   86960:	9b07      	ldr	r3, [sp, #28]
   86962:	2e68      	cmp	r6, #104	; 0x68
   86964:	f000 8507 	beq.w	87376 <_svfprintf_r+0xfc2>
   86968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8696c:	9307      	str	r3, [sp, #28]
   8696e:	e56c      	b.n	8644a <_svfprintf_r+0x96>
   86970:	9b07      	ldr	r3, [sp, #28]
   86972:	f89b 6000 	ldrb.w	r6, [fp]
   86976:	f043 0308 	orr.w	r3, r3, #8
   8697a:	9307      	str	r3, [sp, #28]
   8697c:	e565      	b.n	8644a <_svfprintf_r+0x96>
   8697e:	4648      	mov	r0, r9
   86980:	f003 ff00 	bl	8a784 <_localeconv_r>
   86984:	6843      	ldr	r3, [r0, #4]
   86986:	4618      	mov	r0, r3
   86988:	931c      	str	r3, [sp, #112]	; 0x70
   8698a:	f7ff fcb1 	bl	862f0 <strlen>
   8698e:	4603      	mov	r3, r0
   86990:	4648      	mov	r0, r9
   86992:	461d      	mov	r5, r3
   86994:	931d      	str	r3, [sp, #116]	; 0x74
   86996:	f003 fef5 	bl	8a784 <_localeconv_r>
   8699a:	6882      	ldr	r2, [r0, #8]
   8699c:	2120      	movs	r1, #32
   8699e:	921a      	str	r2, [sp, #104]	; 0x68
   869a0:	2d00      	cmp	r5, #0
   869a2:	f43f adcd 	beq.w	86540 <_svfprintf_r+0x18c>
   869a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   869a8:	2b00      	cmp	r3, #0
   869aa:	f43f adc9 	beq.w	86540 <_svfprintf_r+0x18c>
   869ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   869b0:	781b      	ldrb	r3, [r3, #0]
   869b2:	2b00      	cmp	r3, #0
   869b4:	f43f adc4 	beq.w	86540 <_svfprintf_r+0x18c>
   869b8:	9b07      	ldr	r3, [sp, #28]
   869ba:	f89b 6000 	ldrb.w	r6, [fp]
   869be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   869c2:	9307      	str	r3, [sp, #28]
   869c4:	e541      	b.n	8644a <_svfprintf_r+0x96>
   869c6:	9b07      	ldr	r3, [sp, #28]
   869c8:	f89b 6000 	ldrb.w	r6, [fp]
   869cc:	f043 0301 	orr.w	r3, r3, #1
   869d0:	9307      	str	r3, [sp, #28]
   869d2:	e53a      	b.n	8644a <_svfprintf_r+0x96>
   869d4:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   869d8:	2b00      	cmp	r3, #0
   869da:	f47f adb1 	bne.w	86540 <_svfprintf_r+0x18c>
   869de:	f89b 6000 	ldrb.w	r6, [fp]
   869e2:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   869e6:	e530      	b.n	8644a <_svfprintf_r+0x96>
   869e8:	9b07      	ldr	r3, [sp, #28]
   869ea:	f89b 6000 	ldrb.w	r6, [fp]
   869ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   869f2:	9307      	str	r3, [sp, #28]
   869f4:	e529      	b.n	8644a <_svfprintf_r+0x96>
   869f6:	465a      	mov	r2, fp
   869f8:	f812 6b01 	ldrb.w	r6, [r2], #1
   869fc:	2e2a      	cmp	r6, #42	; 0x2a
   869fe:	f001 8251 	beq.w	87ea4 <_svfprintf_r+0x1af0>
   86a02:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86a06:	2b09      	cmp	r3, #9
   86a08:	4693      	mov	fp, r2
   86a0a:	bf98      	it	ls
   86a0c:	2200      	movls	r2, #0
   86a0e:	f201 80ef 	bhi.w	87bf0 <_svfprintf_r+0x183c>
   86a12:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86a16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86a1a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86a1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86a22:	2b09      	cmp	r3, #9
   86a24:	d9f5      	bls.n	86a12 <_svfprintf_r+0x65e>
   86a26:	9209      	str	r2, [sp, #36]	; 0x24
   86a28:	e511      	b.n	8644e <_svfprintf_r+0x9a>
   86a2a:	f89b 6000 	ldrb.w	r6, [fp]
   86a2e:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   86a32:	e50a      	b.n	8644a <_svfprintf_r+0x96>
   86a34:	7fefffff 	.word	0x7fefffff
   86a38:	0008cc48 	.word	0x0008cc48
   86a3c:	0008cc4c 	.word	0x0008cc4c
   86a40:	0008cc58 	.word	0x0008cc58
   86a44:	9a07      	ldr	r2, [sp, #28]
   86a46:	9208      	str	r2, [sp, #32]
   86a48:	2b01      	cmp	r3, #1
   86a4a:	f000 81b4 	beq.w	86db6 <_svfprintf_r+0xa02>
   86a4e:	2b02      	cmp	r3, #2
   86a50:	f000 8159 	beq.w	86d06 <_svfprintf_r+0x952>
   86a54:	af56      	add	r7, sp, #344	; 0x158
   86a56:	08e2      	lsrs	r2, r4, #3
   86a58:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86a5c:	08e9      	lsrs	r1, r5, #3
   86a5e:	f004 0307 	and.w	r3, r4, #7
   86a62:	460d      	mov	r5, r1
   86a64:	4614      	mov	r4, r2
   86a66:	3330      	adds	r3, #48	; 0x30
   86a68:	ea54 0105 	orrs.w	r1, r4, r5
   86a6c:	463a      	mov	r2, r7
   86a6e:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86a72:	d1f0      	bne.n	86a56 <_svfprintf_r+0x6a2>
   86a74:	9908      	ldr	r1, [sp, #32]
   86a76:	4608      	mov	r0, r1
   86a78:	07c0      	lsls	r0, r0, #31
   86a7a:	f100 82b8 	bmi.w	86fee <_svfprintf_r+0xc3a>
   86a7e:	ab56      	add	r3, sp, #344	; 0x158
   86a80:	1bdb      	subs	r3, r3, r7
   86a82:	9107      	str	r1, [sp, #28]
   86a84:	930c      	str	r3, [sp, #48]	; 0x30
   86a86:	2300      	movs	r3, #0
   86a88:	9909      	ldr	r1, [sp, #36]	; 0x24
   86a8a:	930d      	str	r3, [sp, #52]	; 0x34
   86a8c:	9312      	str	r3, [sp, #72]	; 0x48
   86a8e:	9316      	str	r3, [sp, #88]	; 0x58
   86a90:	9310      	str	r3, [sp, #64]	; 0x40
   86a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86a94:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86a98:	428b      	cmp	r3, r1
   86a9a:	bfb8      	it	lt
   86a9c:	460b      	movlt	r3, r1
   86a9e:	9308      	str	r3, [sp, #32]
   86aa0:	e6ac      	b.n	867fc <_svfprintf_r+0x448>
   86aa2:	2e65      	cmp	r6, #101	; 0x65
   86aa4:	f340 80d8 	ble.w	86c58 <_svfprintf_r+0x8a4>
   86aa8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86aac:	2200      	movs	r2, #0
   86aae:	2300      	movs	r3, #0
   86ab0:	f005 ff6c 	bl	8c98c <__aeabi_dcmpeq>
   86ab4:	2800      	cmp	r0, #0
   86ab6:	f000 821e 	beq.w	86ef6 <_svfprintf_r+0xb42>
   86aba:	2101      	movs	r1, #1
   86abc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86abe:	4ac5      	ldr	r2, [pc, #788]	; (86dd4 <_svfprintf_r+0xa20>)
   86ac0:	440b      	add	r3, r1
   86ac2:	440c      	add	r4, r1
   86ac4:	2b07      	cmp	r3, #7
   86ac6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86aca:	e9c8 2100 	strd	r2, r1, [r8]
   86ace:	f300 85bb 	bgt.w	87648 <_svfprintf_r+0x1294>
   86ad2:	f108 0808 	add.w	r8, r8, #8
   86ad6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86ada:	4293      	cmp	r3, r2
   86adc:	f280 8321 	bge.w	87122 <_svfprintf_r+0xd6e>
   86ae0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ae2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86ae4:	3301      	adds	r3, #1
   86ae6:	9918      	ldr	r1, [sp, #96]	; 0x60
   86ae8:	4414      	add	r4, r2
   86aea:	2b07      	cmp	r3, #7
   86aec:	e9c8 1200 	strd	r1, r2, [r8]
   86af0:	942c      	str	r4, [sp, #176]	; 0xb0
   86af2:	932b      	str	r3, [sp, #172]	; 0xac
   86af4:	f300 8448 	bgt.w	87388 <_svfprintf_r+0xfd4>
   86af8:	f108 0808 	add.w	r8, r8, #8
   86afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86afe:	1e5d      	subs	r5, r3, #1
   86b00:	2d00      	cmp	r5, #0
   86b02:	f77f ae06 	ble.w	86712 <_svfprintf_r+0x35e>
   86b06:	2d10      	cmp	r5, #16
   86b08:	f340 85c7 	ble.w	8769a <_svfprintf_r+0x12e6>
   86b0c:	4fb2      	ldr	r7, [pc, #712]	; (86dd8 <_svfprintf_r+0xa24>)
   86b0e:	2610      	movs	r6, #16
   86b10:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86b12:	970f      	str	r7, [sp, #60]	; 0x3c
   86b14:	e005      	b.n	86b22 <_svfprintf_r+0x76e>
   86b16:	f108 0808 	add.w	r8, r8, #8
   86b1a:	3d10      	subs	r5, #16
   86b1c:	2d10      	cmp	r5, #16
   86b1e:	f340 85bf 	ble.w	876a0 <_svfprintf_r+0x12ec>
   86b22:	3301      	adds	r3, #1
   86b24:	3410      	adds	r4, #16
   86b26:	2b07      	cmp	r3, #7
   86b28:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86b2c:	e9c8 7600 	strd	r7, r6, [r8]
   86b30:	ddf1      	ble.n	86b16 <_svfprintf_r+0x762>
   86b32:	4651      	mov	r1, sl
   86b34:	4648      	mov	r0, r9
   86b36:	aa2a      	add	r2, sp, #168	; 0xa8
   86b38:	f005 f826 	bl	8bb88 <__ssprint_r>
   86b3c:	2800      	cmp	r0, #0
   86b3e:	f040 8081 	bne.w	86c44 <_svfprintf_r+0x890>
   86b42:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86b46:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86b4a:	e7e6      	b.n	86b1a <_svfprintf_r+0x766>
   86b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86b4e:	9a08      	ldr	r2, [sp, #32]
   86b50:	1a9d      	subs	r5, r3, r2
   86b52:	2d00      	cmp	r5, #0
   86b54:	f77f adc6 	ble.w	866e4 <_svfprintf_r+0x330>
   86b58:	2d10      	cmp	r5, #16
   86b5a:	f341 8069 	ble.w	87c30 <_svfprintf_r+0x187c>
   86b5e:	489e      	ldr	r0, [pc, #632]	; (86dd8 <_svfprintf_r+0xa24>)
   86b60:	4621      	mov	r1, r4
   86b62:	2310      	movs	r3, #16
   86b64:	4604      	mov	r4, r0
   86b66:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86b68:	900f      	str	r0, [sp, #60]	; 0x3c
   86b6a:	e004      	b.n	86b76 <_svfprintf_r+0x7c2>
   86b6c:	3d10      	subs	r5, #16
   86b6e:	2d10      	cmp	r5, #16
   86b70:	f108 0808 	add.w	r8, r8, #8
   86b74:	dd17      	ble.n	86ba6 <_svfprintf_r+0x7f2>
   86b76:	3201      	adds	r2, #1
   86b78:	3110      	adds	r1, #16
   86b7a:	2a07      	cmp	r2, #7
   86b7c:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86b80:	e9c8 4300 	strd	r4, r3, [r8]
   86b84:	ddf2      	ble.n	86b6c <_svfprintf_r+0x7b8>
   86b86:	4651      	mov	r1, sl
   86b88:	4648      	mov	r0, r9
   86b8a:	aa2a      	add	r2, sp, #168	; 0xa8
   86b8c:	f004 fffc 	bl	8bb88 <__ssprint_r>
   86b90:	2800      	cmp	r0, #0
   86b92:	d157      	bne.n	86c44 <_svfprintf_r+0x890>
   86b94:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86b98:	3d10      	subs	r5, #16
   86b9a:	2d10      	cmp	r5, #16
   86b9c:	f04f 0310 	mov.w	r3, #16
   86ba0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86ba4:	dce7      	bgt.n	86b76 <_svfprintf_r+0x7c2>
   86ba6:	460c      	mov	r4, r1
   86ba8:	3201      	adds	r2, #1
   86baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86bac:	442c      	add	r4, r5
   86bae:	2a07      	cmp	r2, #7
   86bb0:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86bb4:	e9c8 3500 	strd	r3, r5, [r8]
   86bb8:	f300 858a 	bgt.w	876d0 <_svfprintf_r+0x131c>
   86bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86bc0:	f108 0808 	add.w	r8, r8, #8
   86bc4:	1a9d      	subs	r5, r3, r2
   86bc6:	2d00      	cmp	r5, #0
   86bc8:	f77f ad92 	ble.w	866f0 <_svfprintf_r+0x33c>
   86bcc:	2d10      	cmp	r5, #16
   86bce:	f340 860a 	ble.w	877e6 <_svfprintf_r+0x1432>
   86bd2:	4881      	ldr	r0, [pc, #516]	; (86dd8 <_svfprintf_r+0xa24>)
   86bd4:	4621      	mov	r1, r4
   86bd6:	2310      	movs	r3, #16
   86bd8:	4604      	mov	r4, r0
   86bda:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86bdc:	900f      	str	r0, [sp, #60]	; 0x3c
   86bde:	e004      	b.n	86bea <_svfprintf_r+0x836>
   86be0:	3d10      	subs	r5, #16
   86be2:	2d10      	cmp	r5, #16
   86be4:	f108 0808 	add.w	r8, r8, #8
   86be8:	dd16      	ble.n	86c18 <_svfprintf_r+0x864>
   86bea:	3201      	adds	r2, #1
   86bec:	3110      	adds	r1, #16
   86bee:	2a07      	cmp	r2, #7
   86bf0:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86bf4:	e9c8 4300 	strd	r4, r3, [r8]
   86bf8:	ddf2      	ble.n	86be0 <_svfprintf_r+0x82c>
   86bfa:	4651      	mov	r1, sl
   86bfc:	4648      	mov	r0, r9
   86bfe:	aa2a      	add	r2, sp, #168	; 0xa8
   86c00:	f004 ffc2 	bl	8bb88 <__ssprint_r>
   86c04:	b9f0      	cbnz	r0, 86c44 <_svfprintf_r+0x890>
   86c06:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86c0a:	3d10      	subs	r5, #16
   86c0c:	2d10      	cmp	r5, #16
   86c0e:	f04f 0310 	mov.w	r3, #16
   86c12:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86c16:	dce8      	bgt.n	86bea <_svfprintf_r+0x836>
   86c18:	460c      	mov	r4, r1
   86c1a:	3201      	adds	r2, #1
   86c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86c1e:	442c      	add	r4, r5
   86c20:	2a07      	cmp	r2, #7
   86c22:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86c26:	e9c8 3500 	strd	r3, r5, [r8]
   86c2a:	f300 8237 	bgt.w	8709c <_svfprintf_r+0xce8>
   86c2e:	f108 0808 	add.w	r8, r8, #8
   86c32:	e55d      	b.n	866f0 <_svfprintf_r+0x33c>
   86c34:	4651      	mov	r1, sl
   86c36:	4648      	mov	r0, r9
   86c38:	aa2a      	add	r2, sp, #168	; 0xa8
   86c3a:	f004 ffa5 	bl	8bb88 <__ssprint_r>
   86c3e:	2800      	cmp	r0, #0
   86c40:	f43f ad7b 	beq.w	8673a <_svfprintf_r+0x386>
   86c44:	46d3      	mov	fp, sl
   86c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86c48:	2b00      	cmp	r3, #0
   86c4a:	f43f ad8a 	beq.w	86762 <_svfprintf_r+0x3ae>
   86c4e:	4648      	mov	r0, r9
   86c50:	990d      	ldr	r1, [sp, #52]	; 0x34
   86c52:	f003 faf1 	bl	8a238 <_free_r>
   86c56:	e584      	b.n	86762 <_svfprintf_r+0x3ae>
   86c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86c5a:	2b01      	cmp	r3, #1
   86c5c:	f340 81d5 	ble.w	8700a <_svfprintf_r+0xc56>
   86c60:	2301      	movs	r3, #1
   86c62:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   86c64:	441c      	add	r4, r3
   86c66:	441d      	add	r5, r3
   86c68:	2d07      	cmp	r5, #7
   86c6a:	942c      	str	r4, [sp, #176]	; 0xb0
   86c6c:	f8c8 7000 	str.w	r7, [r8]
   86c70:	952b      	str	r5, [sp, #172]	; 0xac
   86c72:	f8c8 3004 	str.w	r3, [r8, #4]
   86c76:	f300 823a 	bgt.w	870ee <_svfprintf_r+0xd3a>
   86c7a:	f108 0808 	add.w	r8, r8, #8
   86c7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86c80:	3501      	adds	r5, #1
   86c82:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86c84:	441c      	add	r4, r3
   86c86:	2d07      	cmp	r5, #7
   86c88:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86c8c:	e9c8 2300 	strd	r2, r3, [r8]
   86c90:	f300 823a 	bgt.w	87108 <_svfprintf_r+0xd54>
   86c94:	f108 0808 	add.w	r8, r8, #8
   86c98:	2300      	movs	r3, #0
   86c9a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86c9e:	2200      	movs	r2, #0
   86ca0:	f005 fe74 	bl	8c98c <__aeabi_dcmpeq>
   86ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86ca6:	2800      	cmp	r0, #0
   86ca8:	f040 81cd 	bne.w	87046 <_svfprintf_r+0xc92>
   86cac:	3b01      	subs	r3, #1
   86cae:	3501      	adds	r5, #1
   86cb0:	3701      	adds	r7, #1
   86cb2:	441c      	add	r4, r3
   86cb4:	2d07      	cmp	r5, #7
   86cb6:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86cba:	f8c8 7000 	str.w	r7, [r8]
   86cbe:	f8c8 3004 	str.w	r3, [r8, #4]
   86cc2:	f300 84dc 	bgt.w	8767e <_svfprintf_r+0x12ca>
   86cc6:	f108 0808 	add.w	r8, r8, #8
   86cca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86ccc:	3501      	adds	r5, #1
   86cce:	4414      	add	r4, r2
   86cd0:	ab26      	add	r3, sp, #152	; 0x98
   86cd2:	2d07      	cmp	r5, #7
   86cd4:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86cd8:	e9c8 3200 	strd	r3, r2, [r8]
   86cdc:	f77f ad17 	ble.w	8670e <_svfprintf_r+0x35a>
   86ce0:	4651      	mov	r1, sl
   86ce2:	4648      	mov	r0, r9
   86ce4:	aa2a      	add	r2, sp, #168	; 0xa8
   86ce6:	f004 ff4f 	bl	8bb88 <__ssprint_r>
   86cea:	2800      	cmp	r0, #0
   86cec:	d1aa      	bne.n	86c44 <_svfprintf_r+0x890>
   86cee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86cf0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86cf4:	e50d      	b.n	86712 <_svfprintf_r+0x35e>
   86cf6:	2b01      	cmp	r3, #1
   86cf8:	f000 87ca 	beq.w	87c90 <_svfprintf_r+0x18dc>
   86cfc:	2b02      	cmp	r3, #2
   86cfe:	9b07      	ldr	r3, [sp, #28]
   86d00:	9308      	str	r3, [sp, #32]
   86d02:	f47f aea7 	bne.w	86a54 <_svfprintf_r+0x6a0>
   86d06:	9819      	ldr	r0, [sp, #100]	; 0x64
   86d08:	af56      	add	r7, sp, #344	; 0x158
   86d0a:	0923      	lsrs	r3, r4, #4
   86d0c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86d10:	0929      	lsrs	r1, r5, #4
   86d12:	f004 020f 	and.w	r2, r4, #15
   86d16:	460d      	mov	r5, r1
   86d18:	461c      	mov	r4, r3
   86d1a:	5c83      	ldrb	r3, [r0, r2]
   86d1c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86d20:	ea54 0305 	orrs.w	r3, r4, r5
   86d24:	d1f1      	bne.n	86d0a <_svfprintf_r+0x956>
   86d26:	9b08      	ldr	r3, [sp, #32]
   86d28:	9307      	str	r3, [sp, #28]
   86d2a:	ab56      	add	r3, sp, #344	; 0x158
   86d2c:	1bdb      	subs	r3, r3, r7
   86d2e:	930c      	str	r3, [sp, #48]	; 0x30
   86d30:	e6a9      	b.n	86a86 <_svfprintf_r+0x6d2>
   86d32:	2d10      	cmp	r5, #16
   86d34:	f340 8668 	ble.w	87a08 <_svfprintf_r+0x1654>
   86d38:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86d3c:	931e      	str	r3, [sp, #120]	; 0x78
   86d3e:	460b      	mov	r3, r1
   86d40:	4639      	mov	r1, r7
   86d42:	2410      	movs	r4, #16
   86d44:	4637      	mov	r7, r6
   86d46:	4656      	mov	r6, sl
   86d48:	46ca      	mov	sl, r9
   86d4a:	4689      	mov	r9, r1
   86d4c:	e004      	b.n	86d58 <_svfprintf_r+0x9a4>
   86d4e:	3d10      	subs	r5, #16
   86d50:	2d10      	cmp	r5, #16
   86d52:	f108 0808 	add.w	r8, r8, #8
   86d56:	dd17      	ble.n	86d88 <_svfprintf_r+0x9d4>
   86d58:	3201      	adds	r2, #1
   86d5a:	4920      	ldr	r1, [pc, #128]	; (86ddc <_svfprintf_r+0xa28>)
   86d5c:	3310      	adds	r3, #16
   86d5e:	2a07      	cmp	r2, #7
   86d60:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   86d64:	e9c8 1400 	strd	r1, r4, [r8]
   86d68:	ddf1      	ble.n	86d4e <_svfprintf_r+0x99a>
   86d6a:	4631      	mov	r1, r6
   86d6c:	4650      	mov	r0, sl
   86d6e:	aa2a      	add	r2, sp, #168	; 0xa8
   86d70:	f004 ff0a 	bl	8bb88 <__ssprint_r>
   86d74:	2800      	cmp	r0, #0
   86d76:	f040 8458 	bne.w	8762a <_svfprintf_r+0x1276>
   86d7a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   86d7e:	3d10      	subs	r5, #16
   86d80:	2d10      	cmp	r5, #16
   86d82:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d86:	dce7      	bgt.n	86d58 <_svfprintf_r+0x9a4>
   86d88:	4648      	mov	r0, r9
   86d8a:	46d1      	mov	r9, sl
   86d8c:	46b2      	mov	sl, r6
   86d8e:	463e      	mov	r6, r7
   86d90:	4607      	mov	r7, r0
   86d92:	4619      	mov	r1, r3
   86d94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86d96:	194c      	adds	r4, r1, r5
   86d98:	3201      	adds	r2, #1
   86d9a:	4910      	ldr	r1, [pc, #64]	; (86ddc <_svfprintf_r+0xa28>)
   86d9c:	2a07      	cmp	r2, #7
   86d9e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86da2:	e9c8 1500 	strd	r1, r5, [r8]
   86da6:	f300 841f 	bgt.w	875e8 <_svfprintf_r+0x1234>
   86daa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86dae:	f108 0808 	add.w	r8, r8, #8
   86db2:	e474      	b.n	8669e <_svfprintf_r+0x2ea>
   86db4:	9308      	str	r3, [sp, #32]
   86db6:	2d00      	cmp	r5, #0
   86db8:	bf08      	it	eq
   86dba:	2c0a      	cmpeq	r4, #10
   86dbc:	f080 83d0 	bcs.w	87560 <_svfprintf_r+0x11ac>
   86dc0:	9b08      	ldr	r3, [sp, #32]
   86dc2:	3430      	adds	r4, #48	; 0x30
   86dc4:	9307      	str	r3, [sp, #28]
   86dc6:	2301      	movs	r3, #1
   86dc8:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   86dcc:	930c      	str	r3, [sp, #48]	; 0x30
   86dce:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86dd2:	e658      	b.n	86a86 <_svfprintf_r+0x6d2>
   86dd4:	0008cc88 	.word	0x0008cc88
   86dd8:	0008cc9c 	.word	0x0008cc9c
   86ddc:	0008cc8c 	.word	0x0008cc8c
   86de0:	4651      	mov	r1, sl
   86de2:	4648      	mov	r0, r9
   86de4:	aa2a      	add	r2, sp, #168	; 0xa8
   86de6:	f004 fecf 	bl	8bb88 <__ssprint_r>
   86dea:	2800      	cmp	r0, #0
   86dec:	f47f af2a 	bne.w	86c44 <_svfprintf_r+0x890>
   86df0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86df2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86df4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86df8:	2a00      	cmp	r2, #0
   86dfa:	f040 847f 	bne.w	876fc <_svfprintf_r+0x1348>
   86dfe:	9b07      	ldr	r3, [sp, #28]
   86e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86e02:	f003 0301 	and.w	r3, r3, #1
   86e06:	4313      	orrs	r3, r2
   86e08:	f43f ac83 	beq.w	86712 <_svfprintf_r+0x35e>
   86e0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86e0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86e10:	3301      	adds	r3, #1
   86e12:	9918      	ldr	r1, [sp, #96]	; 0x60
   86e14:	4414      	add	r4, r2
   86e16:	2b07      	cmp	r3, #7
   86e18:	e9c8 1200 	strd	r1, r2, [r8]
   86e1c:	942c      	str	r4, [sp, #176]	; 0xb0
   86e1e:	932b      	str	r3, [sp, #172]	; 0xac
   86e20:	f300 8524 	bgt.w	8786c <_svfprintf_r+0x14b8>
   86e24:	f108 0808 	add.w	r8, r8, #8
   86e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86e2a:	3301      	adds	r3, #1
   86e2c:	4414      	add	r4, r2
   86e2e:	2b07      	cmp	r3, #7
   86e30:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86e34:	e9c8 7200 	strd	r7, r2, [r8]
   86e38:	f77f ac69 	ble.w	8670e <_svfprintf_r+0x35a>
   86e3c:	4651      	mov	r1, sl
   86e3e:	4648      	mov	r0, r9
   86e40:	aa2a      	add	r2, sp, #168	; 0xa8
   86e42:	f004 fea1 	bl	8bb88 <__ssprint_r>
   86e46:	2800      	cmp	r0, #0
   86e48:	f47f aefc 	bne.w	86c44 <_svfprintf_r+0x890>
   86e4c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e4e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e52:	e45e      	b.n	86712 <_svfprintf_r+0x35e>
   86e54:	4651      	mov	r1, sl
   86e56:	4648      	mov	r0, r9
   86e58:	aa2a      	add	r2, sp, #168	; 0xa8
   86e5a:	931e      	str	r3, [sp, #120]	; 0x78
   86e5c:	f004 fe94 	bl	8bb88 <__ssprint_r>
   86e60:	2800      	cmp	r0, #0
   86e62:	f47f aeef 	bne.w	86c44 <_svfprintf_r+0x890>
   86e66:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86e6a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e6e:	e426      	b.n	866be <_svfprintf_r+0x30a>
   86e70:	4651      	mov	r1, sl
   86e72:	4648      	mov	r0, r9
   86e74:	aa2a      	add	r2, sp, #168	; 0xa8
   86e76:	f004 fe87 	bl	8bb88 <__ssprint_r>
   86e7a:	2800      	cmp	r0, #0
   86e7c:	f47f aee2 	bne.w	86c44 <_svfprintf_r+0x890>
   86e80:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e82:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e86:	e429      	b.n	866dc <_svfprintf_r+0x328>
   86e88:	2d10      	cmp	r5, #16
   86e8a:	f340 86be 	ble.w	87c0a <_svfprintf_r+0x1856>
   86e8e:	2610      	movs	r6, #16
   86e90:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86e92:	e004      	b.n	86e9e <_svfprintf_r+0xaea>
   86e94:	3d10      	subs	r5, #16
   86e96:	2d10      	cmp	r5, #16
   86e98:	f108 0808 	add.w	r8, r8, #8
   86e9c:	dd17      	ble.n	86ece <_svfprintf_r+0xb1a>
   86e9e:	3301      	adds	r3, #1
   86ea0:	4aad      	ldr	r2, [pc, #692]	; (87158 <_svfprintf_r+0xda4>)
   86ea2:	3410      	adds	r4, #16
   86ea4:	2b07      	cmp	r3, #7
   86ea6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86eaa:	e9c8 2600 	strd	r2, r6, [r8]
   86eae:	ddf1      	ble.n	86e94 <_svfprintf_r+0xae0>
   86eb0:	4651      	mov	r1, sl
   86eb2:	4648      	mov	r0, r9
   86eb4:	aa2a      	add	r2, sp, #168	; 0xa8
   86eb6:	f004 fe67 	bl	8bb88 <__ssprint_r>
   86eba:	2800      	cmp	r0, #0
   86ebc:	f47f aec2 	bne.w	86c44 <_svfprintf_r+0x890>
   86ec0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86ec4:	3d10      	subs	r5, #16
   86ec6:	2d10      	cmp	r5, #16
   86ec8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86ecc:	dce7      	bgt.n	86e9e <_svfprintf_r+0xaea>
   86ece:	3301      	adds	r3, #1
   86ed0:	4aa1      	ldr	r2, [pc, #644]	; (87158 <_svfprintf_r+0xda4>)
   86ed2:	442c      	add	r4, r5
   86ed4:	2b07      	cmp	r3, #7
   86ed6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86eda:	e9c8 2500 	strd	r2, r5, [r8]
   86ede:	f77f ac21 	ble.w	86724 <_svfprintf_r+0x370>
   86ee2:	4651      	mov	r1, sl
   86ee4:	4648      	mov	r0, r9
   86ee6:	aa2a      	add	r2, sp, #168	; 0xa8
   86ee8:	f004 fe4e 	bl	8bb88 <__ssprint_r>
   86eec:	2800      	cmp	r0, #0
   86eee:	f47f aea9 	bne.w	86c44 <_svfprintf_r+0x890>
   86ef2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86ef4:	e416      	b.n	86724 <_svfprintf_r+0x370>
   86ef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86ef8:	2a00      	cmp	r2, #0
   86efa:	f340 8386 	ble.w	8760a <_svfprintf_r+0x1256>
   86efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86f00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86f02:	4293      	cmp	r3, r2
   86f04:	bfa8      	it	ge
   86f06:	4613      	movge	r3, r2
   86f08:	2b00      	cmp	r3, #0
   86f0a:	461d      	mov	r5, r3
   86f0c:	dd0b      	ble.n	86f26 <_svfprintf_r+0xb72>
   86f0e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86f10:	442c      	add	r4, r5
   86f12:	3301      	adds	r3, #1
   86f14:	2b07      	cmp	r3, #7
   86f16:	e9c8 7500 	strd	r7, r5, [r8]
   86f1a:	942c      	str	r4, [sp, #176]	; 0xb0
   86f1c:	932b      	str	r3, [sp, #172]	; 0xac
   86f1e:	f300 851e 	bgt.w	8795e <_svfprintf_r+0x15aa>
   86f22:	f108 0808 	add.w	r8, r8, #8
   86f26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86f28:	2d00      	cmp	r5, #0
   86f2a:	bfa8      	it	ge
   86f2c:	1b5b      	subge	r3, r3, r5
   86f2e:	2b00      	cmp	r3, #0
   86f30:	461d      	mov	r5, r3
   86f32:	f300 8256 	bgt.w	873e2 <_svfprintf_r+0x102e>
   86f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86f38:	443b      	add	r3, r7
   86f3a:	461e      	mov	r6, r3
   86f3c:	9b07      	ldr	r3, [sp, #28]
   86f3e:	055b      	lsls	r3, r3, #21
   86f40:	f100 8277 	bmi.w	87432 <_svfprintf_r+0x107e>
   86f44:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86f46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86f48:	4293      	cmp	r3, r2
   86f4a:	db03      	blt.n	86f54 <_svfprintf_r+0xba0>
   86f4c:	9a07      	ldr	r2, [sp, #28]
   86f4e:	07d5      	lsls	r5, r2, #31
   86f50:	f140 847a 	bpl.w	87848 <_svfprintf_r+0x1494>
   86f54:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86f56:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86f58:	3201      	adds	r2, #1
   86f5a:	9818      	ldr	r0, [sp, #96]	; 0x60
   86f5c:	440c      	add	r4, r1
   86f5e:	2a07      	cmp	r2, #7
   86f60:	e9c8 0100 	strd	r0, r1, [r8]
   86f64:	942c      	str	r4, [sp, #176]	; 0xb0
   86f66:	922b      	str	r2, [sp, #172]	; 0xac
   86f68:	f300 8506 	bgt.w	87978 <_svfprintf_r+0x15c4>
   86f6c:	f108 0808 	add.w	r8, r8, #8
   86f70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86f72:	18bd      	adds	r5, r7, r2
   86f74:	1bad      	subs	r5, r5, r6
   86f76:	1ad3      	subs	r3, r2, r3
   86f78:	429d      	cmp	r5, r3
   86f7a:	bfa8      	it	ge
   86f7c:	461d      	movge	r5, r3
   86f7e:	2d00      	cmp	r5, #0
   86f80:	dd0b      	ble.n	86f9a <_svfprintf_r+0xbe6>
   86f82:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86f84:	442c      	add	r4, r5
   86f86:	3201      	adds	r2, #1
   86f88:	2a07      	cmp	r2, #7
   86f8a:	e9c8 6500 	strd	r6, r5, [r8]
   86f8e:	942c      	str	r4, [sp, #176]	; 0xb0
   86f90:	922b      	str	r2, [sp, #172]	; 0xac
   86f92:	f300 855f 	bgt.w	87a54 <_svfprintf_r+0x16a0>
   86f96:	f108 0808 	add.w	r8, r8, #8
   86f9a:	2d00      	cmp	r5, #0
   86f9c:	bfb4      	ite	lt
   86f9e:	461d      	movlt	r5, r3
   86fa0:	1b5d      	subge	r5, r3, r5
   86fa2:	2d00      	cmp	r5, #0
   86fa4:	f77f abb5 	ble.w	86712 <_svfprintf_r+0x35e>
   86fa8:	2d10      	cmp	r5, #16
   86faa:	f340 8376 	ble.w	8769a <_svfprintf_r+0x12e6>
   86fae:	4f6b      	ldr	r7, [pc, #428]	; (8715c <_svfprintf_r+0xda8>)
   86fb0:	2610      	movs	r6, #16
   86fb2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86fb4:	970f      	str	r7, [sp, #60]	; 0x3c
   86fb6:	e005      	b.n	86fc4 <_svfprintf_r+0xc10>
   86fb8:	f108 0808 	add.w	r8, r8, #8
   86fbc:	3d10      	subs	r5, #16
   86fbe:	2d10      	cmp	r5, #16
   86fc0:	f340 836e 	ble.w	876a0 <_svfprintf_r+0x12ec>
   86fc4:	3301      	adds	r3, #1
   86fc6:	3410      	adds	r4, #16
   86fc8:	2b07      	cmp	r3, #7
   86fca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86fce:	e9c8 7600 	strd	r7, r6, [r8]
   86fd2:	ddf1      	ble.n	86fb8 <_svfprintf_r+0xc04>
   86fd4:	4651      	mov	r1, sl
   86fd6:	4648      	mov	r0, r9
   86fd8:	aa2a      	add	r2, sp, #168	; 0xa8
   86fda:	f004 fdd5 	bl	8bb88 <__ssprint_r>
   86fde:	2800      	cmp	r0, #0
   86fe0:	f47f ae30 	bne.w	86c44 <_svfprintf_r+0x890>
   86fe4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86fe8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86fec:	e7e6      	b.n	86fbc <_svfprintf_r+0xc08>
   86fee:	2b30      	cmp	r3, #48	; 0x30
   86ff0:	f43f ae99 	beq.w	86d26 <_svfprintf_r+0x972>
   86ff4:	2330      	movs	r3, #48	; 0x30
   86ff6:	3a02      	subs	r2, #2
   86ff8:	f807 3c01 	strb.w	r3, [r7, #-1]
   86ffc:	9908      	ldr	r1, [sp, #32]
   86ffe:	ab56      	add	r3, sp, #344	; 0x158
   87000:	1a9b      	subs	r3, r3, r2
   87002:	4617      	mov	r7, r2
   87004:	9107      	str	r1, [sp, #28]
   87006:	930c      	str	r3, [sp, #48]	; 0x30
   87008:	e53d      	b.n	86a86 <_svfprintf_r+0x6d2>
   8700a:	9b07      	ldr	r3, [sp, #28]
   8700c:	07d8      	lsls	r0, r3, #31
   8700e:	f53f ae27 	bmi.w	86c60 <_svfprintf_r+0x8ac>
   87012:	2301      	movs	r3, #1
   87014:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87016:	441c      	add	r4, r3
   87018:	441d      	add	r5, r3
   8701a:	2d07      	cmp	r5, #7
   8701c:	942c      	str	r4, [sp, #176]	; 0xb0
   8701e:	f8c8 7000 	str.w	r7, [r8]
   87022:	952b      	str	r5, [sp, #172]	; 0xac
   87024:	f8c8 3004 	str.w	r3, [r8, #4]
   87028:	f77f ae4d 	ble.w	86cc6 <_svfprintf_r+0x912>
   8702c:	4651      	mov	r1, sl
   8702e:	4648      	mov	r0, r9
   87030:	aa2a      	add	r2, sp, #168	; 0xa8
   87032:	f004 fda9 	bl	8bb88 <__ssprint_r>
   87036:	2800      	cmp	r0, #0
   87038:	f47f ae04 	bne.w	86c44 <_svfprintf_r+0x890>
   8703c:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87040:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87044:	e641      	b.n	86cca <_svfprintf_r+0x916>
   87046:	1e5e      	subs	r6, r3, #1
   87048:	2e00      	cmp	r6, #0
   8704a:	f77f ae3e 	ble.w	86cca <_svfprintf_r+0x916>
   8704e:	2e10      	cmp	r6, #16
   87050:	f340 871e 	ble.w	87e90 <_svfprintf_r+0x1adc>
   87054:	4b41      	ldr	r3, [pc, #260]	; (8715c <_svfprintf_r+0xda8>)
   87056:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8705a:	2710      	movs	r7, #16
   8705c:	46d3      	mov	fp, sl
   8705e:	930f      	str	r3, [sp, #60]	; 0x3c
   87060:	46ca      	mov	sl, r9
   87062:	4699      	mov	r9, r3
   87064:	e005      	b.n	87072 <_svfprintf_r+0xcbe>
   87066:	f108 0808 	add.w	r8, r8, #8
   8706a:	3e10      	subs	r6, #16
   8706c:	2e10      	cmp	r6, #16
   8706e:	f340 82f8 	ble.w	87662 <_svfprintf_r+0x12ae>
   87072:	3501      	adds	r5, #1
   87074:	3410      	adds	r4, #16
   87076:	2d07      	cmp	r5, #7
   87078:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8707c:	e9c8 9700 	strd	r9, r7, [r8]
   87080:	ddf1      	ble.n	87066 <_svfprintf_r+0xcb2>
   87082:	4659      	mov	r1, fp
   87084:	4650      	mov	r0, sl
   87086:	aa2a      	add	r2, sp, #168	; 0xa8
   87088:	f004 fd7e 	bl	8bb88 <__ssprint_r>
   8708c:	2800      	cmp	r0, #0
   8708e:	f040 85cc 	bne.w	87c2a <_svfprintf_r+0x1876>
   87092:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87096:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8709a:	e7e6      	b.n	8706a <_svfprintf_r+0xcb6>
   8709c:	4651      	mov	r1, sl
   8709e:	4648      	mov	r0, r9
   870a0:	aa2a      	add	r2, sp, #168	; 0xa8
   870a2:	f004 fd71 	bl	8bb88 <__ssprint_r>
   870a6:	2800      	cmp	r0, #0
   870a8:	f47f adcc 	bne.w	86c44 <_svfprintf_r+0x890>
   870ac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   870ae:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   870b2:	f7ff bb1d 	b.w	866f0 <_svfprintf_r+0x33c>
   870b6:	9b08      	ldr	r3, [sp, #32]
   870b8:	06dc      	lsls	r4, r3, #27
   870ba:	f100 8119 	bmi.w	872f0 <_svfprintf_r+0xf3c>
   870be:	9b08      	ldr	r3, [sp, #32]
   870c0:	0658      	lsls	r0, r3, #25
   870c2:	f140 8368 	bpl.w	87796 <_svfprintf_r+0x13e2>
   870c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   870c8:	2301      	movs	r3, #1
   870ca:	f852 4b04 	ldr.w	r4, [r2], #4
   870ce:	2500      	movs	r5, #0
   870d0:	920e      	str	r2, [sp, #56]	; 0x38
   870d2:	b2a4      	uxth	r4, r4
   870d4:	f7ff ba7f 	b.w	865d6 <_svfprintf_r+0x222>
   870d8:	232d      	movs	r3, #45	; 0x2d
   870da:	9a07      	ldr	r2, [sp, #28]
   870dc:	4264      	negs	r4, r4
   870de:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   870e2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   870e6:	2301      	movs	r3, #1
   870e8:	9208      	str	r2, [sp, #32]
   870ea:	f7ff ba77 	b.w	865dc <_svfprintf_r+0x228>
   870ee:	4651      	mov	r1, sl
   870f0:	4648      	mov	r0, r9
   870f2:	aa2a      	add	r2, sp, #168	; 0xa8
   870f4:	f004 fd48 	bl	8bb88 <__ssprint_r>
   870f8:	2800      	cmp	r0, #0
   870fa:	f47f ada3 	bne.w	86c44 <_svfprintf_r+0x890>
   870fe:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87102:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87106:	e5ba      	b.n	86c7e <_svfprintf_r+0x8ca>
   87108:	4651      	mov	r1, sl
   8710a:	4648      	mov	r0, r9
   8710c:	aa2a      	add	r2, sp, #168	; 0xa8
   8710e:	f004 fd3b 	bl	8bb88 <__ssprint_r>
   87112:	2800      	cmp	r0, #0
   87114:	f47f ad96 	bne.w	86c44 <_svfprintf_r+0x890>
   87118:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8711c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87120:	e5ba      	b.n	86c98 <_svfprintf_r+0x8e4>
   87122:	9b07      	ldr	r3, [sp, #28]
   87124:	07da      	lsls	r2, r3, #31
   87126:	f57f aaf4 	bpl.w	86712 <_svfprintf_r+0x35e>
   8712a:	e4d9      	b.n	86ae0 <_svfprintf_r+0x72c>
   8712c:	af56      	add	r7, sp, #344	; 0x158
   8712e:	e4aa      	b.n	86a86 <_svfprintf_r+0x6d2>
   87130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87132:	465f      	mov	r7, fp
   87134:	f853 1b04 	ldr.w	r1, [r3], #4
   87138:	930e      	str	r3, [sp, #56]	; 0x38
   8713a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8713c:	17dd      	asrs	r5, r3, #31
   8713e:	461a      	mov	r2, r3
   87140:	462b      	mov	r3, r5
   87142:	e9c1 2300 	strd	r2, r3, [r1]
   87146:	f7ff bb03 	b.w	86750 <_svfprintf_r+0x39c>
   8714a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8714c:	2500      	movs	r5, #0
   8714e:	f853 4b04 	ldr.w	r4, [r3], #4
   87152:	930e      	str	r3, [sp, #56]	; 0x38
   87154:	f7ff ba3a 	b.w	865cc <_svfprintf_r+0x218>
   87158:	0008cc8c 	.word	0x0008cc8c
   8715c:	0008cc9c 	.word	0x0008cc9c
   87160:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87164:	460b      	mov	r3, r1
   87166:	4602      	mov	r2, r0
   87168:	f005 fc42 	bl	8c9f0 <__aeabi_dcmpun>
   8716c:	4601      	mov	r1, r0
   8716e:	2800      	cmp	r0, #0
   87170:	f040 8643 	bne.w	87dfa <_svfprintf_r+0x1a46>
   87174:	2e61      	cmp	r6, #97	; 0x61
   87176:	f000 8586 	beq.w	87c86 <_svfprintf_r+0x18d2>
   8717a:	2e41      	cmp	r6, #65	; 0x41
   8717c:	f000 847a 	beq.w	87a74 <_svfprintf_r+0x16c0>
   87180:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87182:	f026 0520 	bic.w	r5, r6, #32
   87186:	1c5a      	adds	r2, r3, #1
   87188:	9508      	str	r5, [sp, #32]
   8718a:	f000 837d 	beq.w	87888 <_svfprintf_r+0x14d4>
   8718e:	2d47      	cmp	r5, #71	; 0x47
   87190:	f000 859e 	beq.w	87cd0 <_svfprintf_r+0x191c>
   87194:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87198:	9b07      	ldr	r3, [sp, #28]
   8719a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8719e:	9312      	str	r3, [sp, #72]	; 0x48
   871a0:	460b      	mov	r3, r1
   871a2:	2b00      	cmp	r3, #0
   871a4:	f2c0 85ba 	blt.w	87d1c <_svfprintf_r+0x1968>
   871a8:	2200      	movs	r2, #0
   871aa:	930f      	str	r3, [sp, #60]	; 0x3c
   871ac:	921e      	str	r2, [sp, #120]	; 0x78
   871ae:	920d      	str	r2, [sp, #52]	; 0x34
   871b0:	900c      	str	r0, [sp, #48]	; 0x30
   871b2:	2d46      	cmp	r5, #70	; 0x46
   871b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   871b6:	f000 8407 	beq.w	879c8 <_svfprintf_r+0x1614>
   871ba:	2d45      	cmp	r5, #69	; 0x45
   871bc:	f04f 0002 	mov.w	r0, #2
   871c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   871c2:	f040 83e7 	bne.w	87994 <_svfprintf_r+0x15e0>
   871c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   871c8:	9000      	str	r0, [sp, #0]
   871ca:	1c4c      	adds	r4, r1, #1
   871cc:	a928      	add	r1, sp, #160	; 0xa0
   871ce:	a825      	add	r0, sp, #148	; 0x94
   871d0:	9104      	str	r1, [sp, #16]
   871d2:	a924      	add	r1, sp, #144	; 0x90
   871d4:	e9cd 1002 	strd	r1, r0, [sp, #8]
   871d8:	9401      	str	r4, [sp, #4]
   871da:	4648      	mov	r0, r9
   871dc:	f001 feb0 	bl	88f40 <_dtoa_r>
   871e0:	4607      	mov	r7, r0
   871e2:	4404      	add	r4, r0
   871e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   871e6:	9d07      	ldr	r5, [sp, #28]
   871e8:	9307      	str	r3, [sp, #28]
   871ea:	2200      	movs	r2, #0
   871ec:	2300      	movs	r3, #0
   871ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   871f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   871f2:	f005 fbcb 	bl	8c98c <__aeabi_dcmpeq>
   871f6:	2800      	cmp	r0, #0
   871f8:	f000 8398 	beq.w	8792c <_svfprintf_r+0x1578>
   871fc:	4623      	mov	r3, r4
   871fe:	1bdb      	subs	r3, r3, r7
   87200:	9313      	str	r3, [sp, #76]	; 0x4c
   87202:	9b08      	ldr	r3, [sp, #32]
   87204:	2b47      	cmp	r3, #71	; 0x47
   87206:	f000 835e 	beq.w	878c6 <_svfprintf_r+0x1512>
   8720a:	9b08      	ldr	r3, [sp, #32]
   8720c:	2b46      	cmp	r3, #70	; 0x46
   8720e:	f000 840b 	beq.w	87a28 <_svfprintf_r+0x1674>
   87212:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87214:	9310      	str	r3, [sp, #64]	; 0x40
   87216:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87218:	9a08      	ldr	r2, [sp, #32]
   8721a:	3b01      	subs	r3, #1
   8721c:	2a41      	cmp	r2, #65	; 0x41
   8721e:	9324      	str	r3, [sp, #144]	; 0x90
   87220:	f000 85ad 	beq.w	87d7e <_svfprintf_r+0x19ca>
   87224:	2100      	movs	r1, #0
   87226:	b2f2      	uxtb	r2, r6
   87228:	2b00      	cmp	r3, #0
   8722a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   8722e:	bfb6      	itet	lt
   87230:	222d      	movlt	r2, #45	; 0x2d
   87232:	222b      	movge	r2, #43	; 0x2b
   87234:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   87236:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   8723a:	bfb8      	it	lt
   8723c:	f1c3 0301 	rsblt	r3, r3, #1
   87240:	2b09      	cmp	r3, #9
   87242:	f340 85a2 	ble.w	87d8a <_svfprintf_r+0x19d6>
   87246:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   8724a:	4672      	mov	r2, lr
   8724c:	469c      	mov	ip, r3
   8724e:	4cbf      	ldr	r4, [pc, #764]	; (8754c <_svfprintf_r+0x1198>)
   87250:	4660      	mov	r0, ip
   87252:	4611      	mov	r1, r2
   87254:	fb84 230c 	smull	r2, r3, r4, ip
   87258:	ea4f 72ec 	mov.w	r2, ip, asr #31
   8725c:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   87260:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   87264:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   87268:	3330      	adds	r3, #48	; 0x30
   8726a:	2863      	cmp	r0, #99	; 0x63
   8726c:	4694      	mov	ip, r2
   8726e:	f801 3c01 	strb.w	r3, [r1, #-1]
   87272:	f101 32ff 	add.w	r2, r1, #4294967295
   87276:	dceb      	bgt.n	87250 <_svfprintf_r+0xe9c>
   87278:	4663      	mov	r3, ip
   8727a:	3330      	adds	r3, #48	; 0x30
   8727c:	b2d8      	uxtb	r0, r3
   8727e:	1e8b      	subs	r3, r1, #2
   87280:	459e      	cmp	lr, r3
   87282:	f802 0c01 	strb.w	r0, [r2, #-1]
   87286:	f240 862c 	bls.w	87ee2 <_svfprintf_r+0x1b2e>
   8728a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   8728e:	e001      	b.n	87294 <_svfprintf_r+0xee0>
   87290:	f812 0b01 	ldrb.w	r0, [r2], #1
   87294:	4596      	cmp	lr, r2
   87296:	f803 0b01 	strb.w	r0, [r3], #1
   8729a:	d1f9      	bne.n	87290 <_svfprintf_r+0xedc>
   8729c:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   872a0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   872a4:	1a5b      	subs	r3, r3, r1
   872a6:	4413      	add	r3, r2
   872a8:	aa26      	add	r2, sp, #152	; 0x98
   872aa:	1a9b      	subs	r3, r3, r2
   872ac:	931b      	str	r3, [sp, #108]	; 0x6c
   872ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   872b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   872b2:	2b01      	cmp	r3, #1
   872b4:	441a      	add	r2, r3
   872b6:	920c      	str	r2, [sp, #48]	; 0x30
   872b8:	f340 85cc 	ble.w	87e54 <_svfprintf_r+0x1aa0>
   872bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   872be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   872c0:	4413      	add	r3, r2
   872c2:	930c      	str	r3, [sp, #48]	; 0x30
   872c4:	2300      	movs	r3, #0
   872c6:	9312      	str	r3, [sp, #72]	; 0x48
   872c8:	9316      	str	r3, [sp, #88]	; 0x58
   872ca:	9310      	str	r3, [sp, #64]	; 0x40
   872cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   872ce:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   872d2:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   872d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   872da:	9207      	str	r2, [sp, #28]
   872dc:	9308      	str	r3, [sp, #32]
   872de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   872e0:	2b00      	cmp	r3, #0
   872e2:	f040 8317 	bne.w	87914 <_svfprintf_r+0x1560>
   872e6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   872ea:	9309      	str	r3, [sp, #36]	; 0x24
   872ec:	f7ff ba86 	b.w	867fc <_svfprintf_r+0x448>
   872f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   872f2:	2301      	movs	r3, #1
   872f4:	f852 4b04 	ldr.w	r4, [r2], #4
   872f8:	2500      	movs	r5, #0
   872fa:	920e      	str	r2, [sp, #56]	; 0x38
   872fc:	f7ff b96b 	b.w	865d6 <_svfprintf_r+0x222>
   87300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87302:	f853 4b04 	ldr.w	r4, [r3], #4
   87306:	17e5      	asrs	r5, r4, #31
   87308:	930e      	str	r3, [sp, #56]	; 0x38
   8730a:	4622      	mov	r2, r4
   8730c:	462b      	mov	r3, r5
   8730e:	f7ff b933 	b.w	86578 <_svfprintf_r+0x1c4>
   87312:	9b07      	ldr	r3, [sp, #28]
   87314:	9308      	str	r3, [sp, #32]
   87316:	f7ff bae0 	b.w	868da <_svfprintf_r+0x526>
   8731a:	4b8d      	ldr	r3, [pc, #564]	; (87550 <_svfprintf_r+0x119c>)
   8731c:	9319      	str	r3, [sp, #100]	; 0x64
   8731e:	9b07      	ldr	r3, [sp, #28]
   87320:	0699      	lsls	r1, r3, #26
   87322:	f140 80fe 	bpl.w	87522 <_svfprintf_r+0x116e>
   87326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87328:	3307      	adds	r3, #7
   8732a:	f023 0307 	bic.w	r3, r3, #7
   8732e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87332:	930e      	str	r3, [sp, #56]	; 0x38
   87334:	9a07      	ldr	r2, [sp, #28]
   87336:	07d7      	lsls	r7, r2, #31
   87338:	d50a      	bpl.n	87350 <_svfprintf_r+0xf9c>
   8733a:	ea54 0305 	orrs.w	r3, r4, r5
   8733e:	d007      	beq.n	87350 <_svfprintf_r+0xf9c>
   87340:	2330      	movs	r3, #48	; 0x30
   87342:	f042 0202 	orr.w	r2, r2, #2
   87346:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   8734a:	9207      	str	r2, [sp, #28]
   8734c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87350:	9a07      	ldr	r2, [sp, #28]
   87352:	2302      	movs	r3, #2
   87354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   87358:	9208      	str	r2, [sp, #32]
   8735a:	f7ff b93c 	b.w	865d6 <_svfprintf_r+0x222>
   8735e:	4b7d      	ldr	r3, [pc, #500]	; (87554 <_svfprintf_r+0x11a0>)
   87360:	9319      	str	r3, [sp, #100]	; 0x64
   87362:	e7dc      	b.n	8731e <_svfprintf_r+0xf6a>
   87364:	f043 0320 	orr.w	r3, r3, #32
   87368:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8736c:	9307      	str	r3, [sp, #28]
   8736e:	f10b 0b01 	add.w	fp, fp, #1
   87372:	f7ff b86a 	b.w	8644a <_svfprintf_r+0x96>
   87376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8737a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8737e:	9307      	str	r3, [sp, #28]
   87380:	f10b 0b01 	add.w	fp, fp, #1
   87384:	f7ff b861 	b.w	8644a <_svfprintf_r+0x96>
   87388:	4651      	mov	r1, sl
   8738a:	4648      	mov	r0, r9
   8738c:	aa2a      	add	r2, sp, #168	; 0xa8
   8738e:	f004 fbfb 	bl	8bb88 <__ssprint_r>
   87392:	2800      	cmp	r0, #0
   87394:	f47f ac56 	bne.w	86c44 <_svfprintf_r+0x890>
   87398:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8739a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8739e:	f7ff bbad 	b.w	86afc <_svfprintf_r+0x748>
   873a2:	2140      	movs	r1, #64	; 0x40
   873a4:	4648      	mov	r0, r9
   873a6:	f003 fa79 	bl	8a89c <_malloc_r>
   873aa:	f8cb 0000 	str.w	r0, [fp]
   873ae:	f8cb 0010 	str.w	r0, [fp, #16]
   873b2:	2800      	cmp	r0, #0
   873b4:	f000 858d 	beq.w	87ed2 <_svfprintf_r+0x1b1e>
   873b8:	2340      	movs	r3, #64	; 0x40
   873ba:	f8cb 3014 	str.w	r3, [fp, #20]
   873be:	f7ff b811 	b.w	863e4 <_svfprintf_r+0x30>
   873c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   873c4:	463a      	mov	r2, r7
   873c6:	2b06      	cmp	r3, #6
   873c8:	bf28      	it	cs
   873ca:	2306      	movcs	r3, #6
   873cc:	9709      	str	r7, [sp, #36]	; 0x24
   873ce:	9712      	str	r7, [sp, #72]	; 0x48
   873d0:	9716      	str	r7, [sp, #88]	; 0x58
   873d2:	9710      	str	r7, [sp, #64]	; 0x40
   873d4:	970d      	str	r7, [sp, #52]	; 0x34
   873d6:	9308      	str	r3, [sp, #32]
   873d8:	4f5f      	ldr	r7, [pc, #380]	; (87558 <_svfprintf_r+0x11a4>)
   873da:	940e      	str	r4, [sp, #56]	; 0x38
   873dc:	930c      	str	r3, [sp, #48]	; 0x30
   873de:	f7ff ba0d 	b.w	867fc <_svfprintf_r+0x448>
   873e2:	2b10      	cmp	r3, #16
   873e4:	f340 8558 	ble.w	87e98 <_svfprintf_r+0x1ae4>
   873e8:	4651      	mov	r1, sl
   873ea:	4a5c      	ldr	r2, [pc, #368]	; (8755c <_svfprintf_r+0x11a8>)
   873ec:	46ca      	mov	sl, r9
   873ee:	9709      	str	r7, [sp, #36]	; 0x24
   873f0:	2610      	movs	r6, #16
   873f2:	4617      	mov	r7, r2
   873f4:	4689      	mov	r9, r1
   873f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   873f8:	920f      	str	r2, [sp, #60]	; 0x3c
   873fa:	e005      	b.n	87408 <_svfprintf_r+0x1054>
   873fc:	f108 0808 	add.w	r8, r8, #8
   87400:	3d10      	subs	r5, #16
   87402:	2d10      	cmp	r5, #16
   87404:	f340 81fa 	ble.w	877fc <_svfprintf_r+0x1448>
   87408:	3301      	adds	r3, #1
   8740a:	3410      	adds	r4, #16
   8740c:	2b07      	cmp	r3, #7
   8740e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87412:	e9c8 7600 	strd	r7, r6, [r8]
   87416:	ddf1      	ble.n	873fc <_svfprintf_r+0x1048>
   87418:	4649      	mov	r1, r9
   8741a:	4650      	mov	r0, sl
   8741c:	aa2a      	add	r2, sp, #168	; 0xa8
   8741e:	f004 fbb3 	bl	8bb88 <__ssprint_r>
   87422:	2800      	cmp	r0, #0
   87424:	f040 83fd 	bne.w	87c22 <_svfprintf_r+0x186e>
   87428:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8742c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87430:	e7e6      	b.n	87400 <_svfprintf_r+0x104c>
   87432:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87434:	4642      	mov	r2, r8
   87436:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   8743a:	18fb      	adds	r3, r7, r3
   8743c:	9309      	str	r3, [sp, #36]	; 0x24
   8743e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   87442:	970f      	str	r7, [sp, #60]	; 0x3c
   87444:	4620      	mov	r0, r4
   87446:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   8744a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   8744c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8744e:	f1b8 0f00 	cmp.w	r8, #0
   87452:	d02d      	beq.n	874b0 <_svfprintf_r+0x10fc>
   87454:	bb7b      	cbnz	r3, 874b6 <_svfprintf_r+0x1102>
   87456:	3f01      	subs	r7, #1
   87458:	f108 38ff 	add.w	r8, r8, #4294967295
   8745c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8745e:	991c      	ldr	r1, [sp, #112]	; 0x70
   87460:	3301      	adds	r3, #1
   87462:	4458      	add	r0, fp
   87464:	2b07      	cmp	r3, #7
   87466:	e9c2 1b00 	strd	r1, fp, [r2]
   8746a:	902c      	str	r0, [sp, #176]	; 0xb0
   8746c:	932b      	str	r3, [sp, #172]	; 0xac
   8746e:	dc62      	bgt.n	87536 <_svfprintf_r+0x1182>
   87470:	3208      	adds	r2, #8
   87472:	9909      	ldr	r1, [sp, #36]	; 0x24
   87474:	783b      	ldrb	r3, [r7, #0]
   87476:	1b8d      	subs	r5, r1, r6
   87478:	429d      	cmp	r5, r3
   8747a:	bfa8      	it	ge
   8747c:	461d      	movge	r5, r3
   8747e:	2d00      	cmp	r5, #0
   87480:	dd0b      	ble.n	8749a <_svfprintf_r+0x10e6>
   87482:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87484:	4428      	add	r0, r5
   87486:	3301      	adds	r3, #1
   87488:	2b07      	cmp	r3, #7
   8748a:	e9c2 6500 	strd	r6, r5, [r2]
   8748e:	902c      	str	r0, [sp, #176]	; 0xb0
   87490:	932b      	str	r3, [sp, #172]	; 0xac
   87492:	f300 8111 	bgt.w	876b8 <_svfprintf_r+0x1304>
   87496:	783b      	ldrb	r3, [r7, #0]
   87498:	3208      	adds	r2, #8
   8749a:	2d00      	cmp	r5, #0
   8749c:	bfb4      	ite	lt
   8749e:	461d      	movlt	r5, r3
   874a0:	1b5d      	subge	r5, r3, r5
   874a2:	2d00      	cmp	r5, #0
   874a4:	dc0b      	bgt.n	874be <_svfprintf_r+0x110a>
   874a6:	441e      	add	r6, r3
   874a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   874aa:	f1b8 0f00 	cmp.w	r8, #0
   874ae:	d1d1      	bne.n	87454 <_svfprintf_r+0x10a0>
   874b0:	2b00      	cmp	r3, #0
   874b2:	f000 81f9 	beq.w	878a8 <_svfprintf_r+0x14f4>
   874b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   874b8:	3b01      	subs	r3, #1
   874ba:	9312      	str	r3, [sp, #72]	; 0x48
   874bc:	e7ce      	b.n	8745c <_svfprintf_r+0x10a8>
   874be:	2d10      	cmp	r5, #16
   874c0:	f340 84c5 	ble.w	87e4e <_svfprintf_r+0x1a9a>
   874c4:	992b      	ldr	r1, [sp, #172]	; 0xac
   874c6:	2410      	movs	r4, #16
   874c8:	460b      	mov	r3, r1
   874ca:	e004      	b.n	874d6 <_svfprintf_r+0x1122>
   874cc:	3d10      	subs	r5, #16
   874ce:	2d10      	cmp	r5, #16
   874d0:	f102 0208 	add.w	r2, r2, #8
   874d4:	dd16      	ble.n	87504 <_svfprintf_r+0x1150>
   874d6:	3301      	adds	r3, #1
   874d8:	4920      	ldr	r1, [pc, #128]	; (8755c <_svfprintf_r+0x11a8>)
   874da:	3010      	adds	r0, #16
   874dc:	2b07      	cmp	r3, #7
   874de:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   874e2:	e9c2 1400 	strd	r1, r4, [r2]
   874e6:	ddf1      	ble.n	874cc <_svfprintf_r+0x1118>
   874e8:	4651      	mov	r1, sl
   874ea:	4648      	mov	r0, r9
   874ec:	aa2a      	add	r2, sp, #168	; 0xa8
   874ee:	f004 fb4b 	bl	8bb88 <__ssprint_r>
   874f2:	2800      	cmp	r0, #0
   874f4:	f47f aba6 	bne.w	86c44 <_svfprintf_r+0x890>
   874f8:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   874fc:	3d10      	subs	r5, #16
   874fe:	2d10      	cmp	r5, #16
   87500:	aa2d      	add	r2, sp, #180	; 0xb4
   87502:	dce8      	bgt.n	874d6 <_svfprintf_r+0x1122>
   87504:	4619      	mov	r1, r3
   87506:	1c4b      	adds	r3, r1, #1
   87508:	4914      	ldr	r1, [pc, #80]	; (8755c <_svfprintf_r+0x11a8>)
   8750a:	4428      	add	r0, r5
   8750c:	2b07      	cmp	r3, #7
   8750e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87512:	e9c2 1500 	strd	r1, r5, [r2]
   87516:	f300 8215 	bgt.w	87944 <_svfprintf_r+0x1590>
   8751a:	783b      	ldrb	r3, [r7, #0]
   8751c:	3208      	adds	r2, #8
   8751e:	441e      	add	r6, r3
   87520:	e7c2      	b.n	874a8 <_svfprintf_r+0x10f4>
   87522:	9b07      	ldr	r3, [sp, #28]
   87524:	06da      	lsls	r2, r3, #27
   87526:	f140 8084 	bpl.w	87632 <_svfprintf_r+0x127e>
   8752a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8752c:	2500      	movs	r5, #0
   8752e:	f853 4b04 	ldr.w	r4, [r3], #4
   87532:	930e      	str	r3, [sp, #56]	; 0x38
   87534:	e6fe      	b.n	87334 <_svfprintf_r+0xf80>
   87536:	4651      	mov	r1, sl
   87538:	4648      	mov	r0, r9
   8753a:	aa2a      	add	r2, sp, #168	; 0xa8
   8753c:	f004 fb24 	bl	8bb88 <__ssprint_r>
   87540:	2800      	cmp	r0, #0
   87542:	f47f ab7f 	bne.w	86c44 <_svfprintf_r+0x890>
   87546:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87548:	aa2d      	add	r2, sp, #180	; 0xb4
   8754a:	e792      	b.n	87472 <_svfprintf_r+0x10be>
   8754c:	66666667 	.word	0x66666667
   87550:	0008cc58 	.word	0x0008cc58
   87554:	0008cc6c 	.word	0x0008cc6c
   87558:	0008cc80 	.word	0x0008cc80
   8755c:	0008cc9c 	.word	0x0008cc9c
   87560:	2200      	movs	r2, #0
   87562:	9b08      	ldr	r3, [sp, #32]
   87564:	f8cd b01c 	str.w	fp, [sp, #28]
   87568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8756c:	960c      	str	r6, [sp, #48]	; 0x30
   8756e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87572:	4693      	mov	fp, r2
   87574:	46ca      	mov	sl, r9
   87576:	461e      	mov	r6, r3
   87578:	46c1      	mov	r9, r8
   8757a:	af56      	add	r7, sp, #344	; 0x158
   8757c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87580:	e00b      	b.n	8759a <_svfprintf_r+0x11e6>
   87582:	220a      	movs	r2, #10
   87584:	2300      	movs	r3, #0
   87586:	4620      	mov	r0, r4
   87588:	4629      	mov	r1, r5
   8758a:	f7fe fb3d 	bl	85c08 <__aeabi_uldivmod>
   8758e:	2d00      	cmp	r5, #0
   87590:	bf08      	it	eq
   87592:	2c0a      	cmpeq	r4, #10
   87594:	d31b      	bcc.n	875ce <_svfprintf_r+0x121a>
   87596:	4604      	mov	r4, r0
   87598:	460d      	mov	r5, r1
   8759a:	220a      	movs	r2, #10
   8759c:	2300      	movs	r3, #0
   8759e:	4620      	mov	r0, r4
   875a0:	4629      	mov	r1, r5
   875a2:	f7fe fb31 	bl	85c08 <__aeabi_uldivmod>
   875a6:	3230      	adds	r2, #48	; 0x30
   875a8:	f807 2c01 	strb.w	r2, [r7, #-1]
   875ac:	f10b 0b01 	add.w	fp, fp, #1
   875b0:	3f01      	subs	r7, #1
   875b2:	2e00      	cmp	r6, #0
   875b4:	d0e5      	beq.n	87582 <_svfprintf_r+0x11ce>
   875b6:	f898 3000 	ldrb.w	r3, [r8]
   875ba:	459b      	cmp	fp, r3
   875bc:	d1e1      	bne.n	87582 <_svfprintf_r+0x11ce>
   875be:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   875c2:	d0de      	beq.n	87582 <_svfprintf_r+0x11ce>
   875c4:	2d00      	cmp	r5, #0
   875c6:	bf08      	it	eq
   875c8:	2c0a      	cmpeq	r4, #10
   875ca:	f080 8128 	bcs.w	8781e <_svfprintf_r+0x146a>
   875ce:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   875d2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   875d6:	46c8      	mov	r8, r9
   875d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   875da:	46d1      	mov	r9, sl
   875dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   875e0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   875e4:	f7ff bb9f 	b.w	86d26 <_svfprintf_r+0x972>
   875e8:	4651      	mov	r1, sl
   875ea:	4648      	mov	r0, r9
   875ec:	aa2a      	add	r2, sp, #168	; 0xa8
   875ee:	931e      	str	r3, [sp, #120]	; 0x78
   875f0:	f004 faca 	bl	8bb88 <__ssprint_r>
   875f4:	2800      	cmp	r0, #0
   875f6:	f47f ab25 	bne.w	86c44 <_svfprintf_r+0x890>
   875fa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   875fe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87600:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87602:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87606:	f7ff b84a 	b.w	8669e <_svfprintf_r+0x2ea>
   8760a:	2001      	movs	r0, #1
   8760c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8760e:	49c5      	ldr	r1, [pc, #788]	; (87924 <_svfprintf_r+0x1570>)
   87610:	4403      	add	r3, r0
   87612:	4404      	add	r4, r0
   87614:	2b07      	cmp	r3, #7
   87616:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8761a:	e9c8 1000 	strd	r1, r0, [r8]
   8761e:	f73f abdf 	bgt.w	86de0 <_svfprintf_r+0xa2c>
   87622:	f108 0808 	add.w	r8, r8, #8
   87626:	f7ff bbe7 	b.w	86df8 <_svfprintf_r+0xa44>
   8762a:	46d1      	mov	r9, sl
   8762c:	46b3      	mov	fp, r6
   8762e:	f7ff bb0a 	b.w	86c46 <_svfprintf_r+0x892>
   87632:	9b07      	ldr	r3, [sp, #28]
   87634:	065b      	lsls	r3, r3, #25
   87636:	f140 80cb 	bpl.w	877d0 <_svfprintf_r+0x141c>
   8763a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8763c:	2500      	movs	r5, #0
   8763e:	f853 4b04 	ldr.w	r4, [r3], #4
   87642:	930e      	str	r3, [sp, #56]	; 0x38
   87644:	b2a4      	uxth	r4, r4
   87646:	e675      	b.n	87334 <_svfprintf_r+0xf80>
   87648:	4651      	mov	r1, sl
   8764a:	4648      	mov	r0, r9
   8764c:	aa2a      	add	r2, sp, #168	; 0xa8
   8764e:	f004 fa9b 	bl	8bb88 <__ssprint_r>
   87652:	2800      	cmp	r0, #0
   87654:	f47f aaf6 	bne.w	86c44 <_svfprintf_r+0x890>
   87658:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8765a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8765e:	f7ff ba3a 	b.w	86ad6 <_svfprintf_r+0x722>
   87662:	46d1      	mov	r9, sl
   87664:	46da      	mov	sl, fp
   87666:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8766a:	3501      	adds	r5, #1
   8766c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8766e:	4434      	add	r4, r6
   87670:	2d07      	cmp	r5, #7
   87672:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87676:	e9c8 3600 	strd	r3, r6, [r8]
   8767a:	f77f ab24 	ble.w	86cc6 <_svfprintf_r+0x912>
   8767e:	4651      	mov	r1, sl
   87680:	4648      	mov	r0, r9
   87682:	aa2a      	add	r2, sp, #168	; 0xa8
   87684:	f004 fa80 	bl	8bb88 <__ssprint_r>
   87688:	2800      	cmp	r0, #0
   8768a:	f47f aadb 	bne.w	86c44 <_svfprintf_r+0x890>
   8768e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87692:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87696:	f7ff bb18 	b.w	86cca <_svfprintf_r+0x916>
   8769a:	4aa3      	ldr	r2, [pc, #652]	; (87928 <_svfprintf_r+0x1574>)
   8769c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8769e:	920f      	str	r2, [sp, #60]	; 0x3c
   876a0:	3301      	adds	r3, #1
   876a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   876a4:	442c      	add	r4, r5
   876a6:	2b07      	cmp	r3, #7
   876a8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   876ac:	e9c8 2500 	strd	r2, r5, [r8]
   876b0:	f77f a82d 	ble.w	8670e <_svfprintf_r+0x35a>
   876b4:	f7ff bbc2 	b.w	86e3c <_svfprintf_r+0xa88>
   876b8:	4651      	mov	r1, sl
   876ba:	4648      	mov	r0, r9
   876bc:	aa2a      	add	r2, sp, #168	; 0xa8
   876be:	f004 fa63 	bl	8bb88 <__ssprint_r>
   876c2:	2800      	cmp	r0, #0
   876c4:	f47f aabe 	bne.w	86c44 <_svfprintf_r+0x890>
   876c8:	783b      	ldrb	r3, [r7, #0]
   876ca:	982c      	ldr	r0, [sp, #176]	; 0xb0
   876cc:	aa2d      	add	r2, sp, #180	; 0xb4
   876ce:	e6e4      	b.n	8749a <_svfprintf_r+0x10e6>
   876d0:	4651      	mov	r1, sl
   876d2:	4648      	mov	r0, r9
   876d4:	aa2a      	add	r2, sp, #168	; 0xa8
   876d6:	f004 fa57 	bl	8bb88 <__ssprint_r>
   876da:	2800      	cmp	r0, #0
   876dc:	f47f aab2 	bne.w	86c44 <_svfprintf_r+0x890>
   876e0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   876e2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   876e6:	f7fe bffd 	b.w	866e4 <_svfprintf_r+0x330>
   876ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   876ee:	f853 2b04 	ldr.w	r2, [r3], #4
   876f2:	465f      	mov	r7, fp
   876f4:	6011      	str	r1, [r2, #0]
   876f6:	930e      	str	r3, [sp, #56]	; 0x38
   876f8:	f7ff b82a 	b.w	86750 <_svfprintf_r+0x39c>
   876fc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   876fe:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87700:	3301      	adds	r3, #1
   87702:	9818      	ldr	r0, [sp, #96]	; 0x60
   87704:	440c      	add	r4, r1
   87706:	2b07      	cmp	r3, #7
   87708:	e9c8 0100 	strd	r0, r1, [r8]
   8770c:	942c      	str	r4, [sp, #176]	; 0xb0
   8770e:	932b      	str	r3, [sp, #172]	; 0xac
   87710:	f300 80ac 	bgt.w	8786c <_svfprintf_r+0x14b8>
   87714:	f108 0808 	add.w	r8, r8, #8
   87718:	2a00      	cmp	r2, #0
   8771a:	f6bf ab85 	bge.w	86e28 <_svfprintf_r+0xa74>
   8771e:	4255      	negs	r5, r2
   87720:	3210      	adds	r2, #16
   87722:	f280 83d3 	bge.w	87ecc <_svfprintf_r+0x1b18>
   87726:	4651      	mov	r1, sl
   87728:	4a7f      	ldr	r2, [pc, #508]	; (87928 <_svfprintf_r+0x1574>)
   8772a:	46ca      	mov	sl, r9
   8772c:	9709      	str	r7, [sp, #36]	; 0x24
   8772e:	2610      	movs	r6, #16
   87730:	4617      	mov	r7, r2
   87732:	4689      	mov	r9, r1
   87734:	920f      	str	r2, [sp, #60]	; 0x3c
   87736:	e005      	b.n	87744 <_svfprintf_r+0x1390>
   87738:	f108 0808 	add.w	r8, r8, #8
   8773c:	3d10      	subs	r5, #16
   8773e:	2d10      	cmp	r5, #16
   87740:	f340 82aa 	ble.w	87c98 <_svfprintf_r+0x18e4>
   87744:	3301      	adds	r3, #1
   87746:	3410      	adds	r4, #16
   87748:	2b07      	cmp	r3, #7
   8774a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8774e:	e9c8 7600 	strd	r7, r6, [r8]
   87752:	ddf1      	ble.n	87738 <_svfprintf_r+0x1384>
   87754:	4649      	mov	r1, r9
   87756:	4650      	mov	r0, sl
   87758:	aa2a      	add	r2, sp, #168	; 0xa8
   8775a:	f004 fa15 	bl	8bb88 <__ssprint_r>
   8775e:	2800      	cmp	r0, #0
   87760:	f040 825f 	bne.w	87c22 <_svfprintf_r+0x186e>
   87764:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87768:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8776c:	e7e6      	b.n	8773c <_svfprintf_r+0x1388>
   8776e:	4638      	mov	r0, r7
   87770:	f7fe fdbe 	bl	862f0 <strlen>
   87774:	462b      	mov	r3, r5
   87776:	4602      	mov	r2, r0
   87778:	9509      	str	r5, [sp, #36]	; 0x24
   8777a:	f7ff b894 	b.w	868a6 <_svfprintf_r+0x4f2>
   8777e:	9b07      	ldr	r3, [sp, #28]
   87780:	2500      	movs	r5, #0
   87782:	f413 7f00 	tst.w	r3, #512	; 0x200
   87786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87788:	f853 4b04 	ldr.w	r4, [r3], #4
   8778c:	930e      	str	r3, [sp, #56]	; 0x38
   8778e:	bf18      	it	ne
   87790:	b2e4      	uxtbne	r4, r4
   87792:	f7fe bf1b 	b.w	865cc <_svfprintf_r+0x218>
   87796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87798:	9b08      	ldr	r3, [sp, #32]
   8779a:	f852 4b04 	ldr.w	r4, [r2], #4
   8779e:	f413 7f00 	tst.w	r3, #512	; 0x200
   877a2:	f04f 0500 	mov.w	r5, #0
   877a6:	f04f 0301 	mov.w	r3, #1
   877aa:	920e      	str	r2, [sp, #56]	; 0x38
   877ac:	bf18      	it	ne
   877ae:	b2e4      	uxtbne	r4, r4
   877b0:	f7fe bf11 	b.w	865d6 <_svfprintf_r+0x222>
   877b4:	9b07      	ldr	r3, [sp, #28]
   877b6:	f413 7f00 	tst.w	r3, #512	; 0x200
   877ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877bc:	f853 4b04 	ldr.w	r4, [r3], #4
   877c0:	bf18      	it	ne
   877c2:	b264      	sxtbne	r4, r4
   877c4:	17e5      	asrs	r5, r4, #31
   877c6:	930e      	str	r3, [sp, #56]	; 0x38
   877c8:	4622      	mov	r2, r4
   877ca:	462b      	mov	r3, r5
   877cc:	f7fe bed4 	b.w	86578 <_svfprintf_r+0x1c4>
   877d0:	9b07      	ldr	r3, [sp, #28]
   877d2:	2500      	movs	r5, #0
   877d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   877d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877da:	f853 4b04 	ldr.w	r4, [r3], #4
   877de:	930e      	str	r3, [sp, #56]	; 0x38
   877e0:	bf18      	it	ne
   877e2:	b2e4      	uxtbne	r4, r4
   877e4:	e5a6      	b.n	87334 <_svfprintf_r+0xf80>
   877e6:	4b50      	ldr	r3, [pc, #320]	; (87928 <_svfprintf_r+0x1574>)
   877e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   877ea:	930f      	str	r3, [sp, #60]	; 0x3c
   877ec:	f7ff ba15 	b.w	86c1a <_svfprintf_r+0x866>
   877f0:	232d      	movs	r3, #45	; 0x2d
   877f2:	461a      	mov	r2, r3
   877f4:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   877f8:	f7fe bfee 	b.w	867d8 <_svfprintf_r+0x424>
   877fc:	464a      	mov	r2, r9
   877fe:	46d1      	mov	r9, sl
   87800:	4692      	mov	sl, r2
   87802:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87804:	3301      	adds	r3, #1
   87806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87808:	442c      	add	r4, r5
   8780a:	2b07      	cmp	r3, #7
   8780c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87810:	e9c8 2500 	strd	r2, r5, [r8]
   87814:	dc3b      	bgt.n	8788e <_svfprintf_r+0x14da>
   87816:	f108 0808 	add.w	r8, r8, #8
   8781a:	f7ff bb8c 	b.w	86f36 <_svfprintf_r+0xb82>
   8781e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87820:	991c      	ldr	r1, [sp, #112]	; 0x70
   87822:	1aff      	subs	r7, r7, r3
   87824:	461a      	mov	r2, r3
   87826:	4638      	mov	r0, r7
   87828:	f7fe fd90 	bl	8634c <strncpy>
   8782c:	f898 3001 	ldrb.w	r3, [r8, #1]
   87830:	b10b      	cbz	r3, 87836 <_svfprintf_r+0x1482>
   87832:	f108 0801 	add.w	r8, r8, #1
   87836:	220a      	movs	r2, #10
   87838:	2300      	movs	r3, #0
   8783a:	4620      	mov	r0, r4
   8783c:	4629      	mov	r1, r5
   8783e:	f7fe f9e3 	bl	85c08 <__aeabi_uldivmod>
   87842:	f04f 0b00 	mov.w	fp, #0
   87846:	e6a6      	b.n	87596 <_svfprintf_r+0x11e2>
   87848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8784a:	18bd      	adds	r5, r7, r2
   8784c:	1bad      	subs	r5, r5, r6
   8784e:	1ad3      	subs	r3, r2, r3
   87850:	429d      	cmp	r5, r3
   87852:	bfa8      	it	ge
   87854:	461d      	movge	r5, r3
   87856:	f7ff bba0 	b.w	86f9a <_svfprintf_r+0xbe6>
   8785a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8785c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8785e:	f853 2b04 	ldr.w	r2, [r3], #4
   87862:	465f      	mov	r7, fp
   87864:	8011      	strh	r1, [r2, #0]
   87866:	930e      	str	r3, [sp, #56]	; 0x38
   87868:	f7fe bf72 	b.w	86750 <_svfprintf_r+0x39c>
   8786c:	4651      	mov	r1, sl
   8786e:	4648      	mov	r0, r9
   87870:	aa2a      	add	r2, sp, #168	; 0xa8
   87872:	f004 f989 	bl	8bb88 <__ssprint_r>
   87876:	2800      	cmp	r0, #0
   87878:	f47f a9e4 	bne.w	86c44 <_svfprintf_r+0x890>
   8787c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87880:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87882:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87886:	e747      	b.n	87718 <_svfprintf_r+0x1364>
   87888:	2306      	movs	r3, #6
   8788a:	9309      	str	r3, [sp, #36]	; 0x24
   8788c:	e482      	b.n	87194 <_svfprintf_r+0xde0>
   8788e:	4651      	mov	r1, sl
   87890:	4648      	mov	r0, r9
   87892:	aa2a      	add	r2, sp, #168	; 0xa8
   87894:	f004 f978 	bl	8bb88 <__ssprint_r>
   87898:	2800      	cmp	r0, #0
   8789a:	f47f a9d3 	bne.w	86c44 <_svfprintf_r+0x890>
   8789e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   878a0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   878a4:	f7ff bb47 	b.w	86f36 <_svfprintf_r+0xb82>
   878a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   878aa:	971a      	str	r7, [sp, #104]	; 0x68
   878ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   878ae:	4690      	mov	r8, r2
   878b0:	18fb      	adds	r3, r7, r3
   878b2:	429e      	cmp	r6, r3
   878b4:	4632      	mov	r2, r6
   878b6:	bf28      	it	cs
   878b8:	461a      	movcs	r2, r3
   878ba:	4604      	mov	r4, r0
   878bc:	4616      	mov	r6, r2
   878be:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   878c2:	f7ff bb3f 	b.w	86f44 <_svfprintf_r+0xb90>
   878c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   878c8:	1cd8      	adds	r0, r3, #3
   878ca:	9310      	str	r3, [sp, #64]	; 0x40
   878cc:	db02      	blt.n	878d4 <_svfprintf_r+0x1520>
   878ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   878d0:	4293      	cmp	r3, r2
   878d2:	dd04      	ble.n	878de <_svfprintf_r+0x152a>
   878d4:	3e02      	subs	r6, #2
   878d6:	f026 0320 	bic.w	r3, r6, #32
   878da:	9308      	str	r3, [sp, #32]
   878dc:	e49b      	b.n	87216 <_svfprintf_r+0xe62>
   878de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   878e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   878e2:	428b      	cmp	r3, r1
   878e4:	f2c0 817a 	blt.w	87bdc <_svfprintf_r+0x1828>
   878e8:	07ea      	lsls	r2, r5, #31
   878ea:	f140 8283 	bpl.w	87df4 <_svfprintf_r+0x1a40>
   878ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   878f0:	4413      	add	r3, r2
   878f2:	930c      	str	r3, [sp, #48]	; 0x30
   878f4:	056e      	lsls	r6, r5, #21
   878f6:	f140 8277 	bpl.w	87de8 <_svfprintf_r+0x1a34>
   878fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   878fc:	2b00      	cmp	r3, #0
   878fe:	f300 8210 	bgt.w	87d22 <_svfprintf_r+0x196e>
   87902:	2667      	movs	r6, #103	; 0x67
   87904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8790a:	9308      	str	r3, [sp, #32]
   8790c:	2300      	movs	r3, #0
   8790e:	9312      	str	r3, [sp, #72]	; 0x48
   87910:	9316      	str	r3, [sp, #88]	; 0x58
   87912:	e4e4      	b.n	872de <_svfprintf_r+0xf2a>
   87914:	222d      	movs	r2, #45	; 0x2d
   87916:	2300      	movs	r3, #0
   87918:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   8791c:	9309      	str	r3, [sp, #36]	; 0x24
   8791e:	f7fe bf70 	b.w	86802 <_svfprintf_r+0x44e>
   87922:	bf00      	nop
   87924:	0008cc88 	.word	0x0008cc88
   87928:	0008cc9c 	.word	0x0008cc9c
   8792c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8792e:	42a3      	cmp	r3, r4
   87930:	f4bf ac65 	bcs.w	871fe <_svfprintf_r+0xe4a>
   87934:	2130      	movs	r1, #48	; 0x30
   87936:	1c5a      	adds	r2, r3, #1
   87938:	9228      	str	r2, [sp, #160]	; 0xa0
   8793a:	7019      	strb	r1, [r3, #0]
   8793c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8793e:	429c      	cmp	r4, r3
   87940:	d8f9      	bhi.n	87936 <_svfprintf_r+0x1582>
   87942:	e45c      	b.n	871fe <_svfprintf_r+0xe4a>
   87944:	4651      	mov	r1, sl
   87946:	4648      	mov	r0, r9
   87948:	aa2a      	add	r2, sp, #168	; 0xa8
   8794a:	f004 f91d 	bl	8bb88 <__ssprint_r>
   8794e:	2800      	cmp	r0, #0
   87950:	f47f a978 	bne.w	86c44 <_svfprintf_r+0x890>
   87954:	783b      	ldrb	r3, [r7, #0]
   87956:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87958:	aa2d      	add	r2, sp, #180	; 0xb4
   8795a:	441e      	add	r6, r3
   8795c:	e5a4      	b.n	874a8 <_svfprintf_r+0x10f4>
   8795e:	4651      	mov	r1, sl
   87960:	4648      	mov	r0, r9
   87962:	aa2a      	add	r2, sp, #168	; 0xa8
   87964:	f004 f910 	bl	8bb88 <__ssprint_r>
   87968:	2800      	cmp	r0, #0
   8796a:	f47f a96b 	bne.w	86c44 <_svfprintf_r+0x890>
   8796e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87970:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87974:	f7ff bad7 	b.w	86f26 <_svfprintf_r+0xb72>
   87978:	4651      	mov	r1, sl
   8797a:	4648      	mov	r0, r9
   8797c:	aa2a      	add	r2, sp, #168	; 0xa8
   8797e:	f004 f903 	bl	8bb88 <__ssprint_r>
   87982:	2800      	cmp	r0, #0
   87984:	f47f a95e 	bne.w	86c44 <_svfprintf_r+0x890>
   87988:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8798a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8798c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87990:	f7ff baee 	b.w	86f70 <_svfprintf_r+0xbbc>
   87994:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87996:	a928      	add	r1, sp, #160	; 0xa0
   87998:	e9cd 0400 	strd	r0, r4, [sp]
   8799c:	9104      	str	r1, [sp, #16]
   8799e:	a825      	add	r0, sp, #148	; 0x94
   879a0:	a924      	add	r1, sp, #144	; 0x90
   879a2:	e9cd 1002 	strd	r1, r0, [sp, #8]
   879a6:	4648      	mov	r0, r9
   879a8:	f001 faca 	bl	88f40 <_dtoa_r>
   879ac:	2d47      	cmp	r5, #71	; 0x47
   879ae:	4607      	mov	r7, r0
   879b0:	d119      	bne.n	879e6 <_svfprintf_r+0x1632>
   879b2:	9d07      	ldr	r5, [sp, #28]
   879b4:	462b      	mov	r3, r5
   879b6:	07db      	lsls	r3, r3, #31
   879b8:	f100 812a 	bmi.w	87c10 <_svfprintf_r+0x185c>
   879bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   879be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   879c0:	9207      	str	r2, [sp, #28]
   879c2:	2247      	movs	r2, #71	; 0x47
   879c4:	9208      	str	r2, [sp, #32]
   879c6:	e41a      	b.n	871fe <_svfprintf_r+0xe4a>
   879c8:	2003      	movs	r0, #3
   879ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
   879cc:	a928      	add	r1, sp, #160	; 0xa0
   879ce:	e9cd 0400 	strd	r0, r4, [sp]
   879d2:	9104      	str	r1, [sp, #16]
   879d4:	a825      	add	r0, sp, #148	; 0x94
   879d6:	a924      	add	r1, sp, #144	; 0x90
   879d8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   879dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   879de:	4648      	mov	r0, r9
   879e0:	f001 faae 	bl	88f40 <_dtoa_r>
   879e4:	4607      	mov	r7, r0
   879e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   879e8:	2d46      	cmp	r5, #70	; 0x46
   879ea:	eb07 0403 	add.w	r4, r7, r3
   879ee:	f47f abf9 	bne.w	871e4 <_svfprintf_r+0xe30>
   879f2:	783b      	ldrb	r3, [r7, #0]
   879f4:	2b30      	cmp	r3, #48	; 0x30
   879f6:	f000 821c 	beq.w	87e32 <_svfprintf_r+0x1a7e>
   879fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   879fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   879fe:	9d07      	ldr	r5, [sp, #28]
   87a00:	441c      	add	r4, r3
   87a02:	9207      	str	r2, [sp, #28]
   87a04:	f7ff bbf1 	b.w	871ea <_svfprintf_r+0xe36>
   87a08:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87a0c:	f7ff b9c3 	b.w	86d96 <_svfprintf_r+0x9e2>
   87a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a12:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87a16:	9308      	str	r3, [sp, #32]
   87a18:	930c      	str	r3, [sp, #48]	; 0x30
   87a1a:	9009      	str	r0, [sp, #36]	; 0x24
   87a1c:	940e      	str	r4, [sp, #56]	; 0x38
   87a1e:	9012      	str	r0, [sp, #72]	; 0x48
   87a20:	9016      	str	r0, [sp, #88]	; 0x58
   87a22:	9010      	str	r0, [sp, #64]	; 0x40
   87a24:	f7fe beea 	b.w	867fc <_svfprintf_r+0x448>
   87a28:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87a2a:	2a00      	cmp	r2, #0
   87a2c:	9210      	str	r2, [sp, #64]	; 0x40
   87a2e:	f340 821b 	ble.w	87e68 <_svfprintf_r+0x1ab4>
   87a32:	9909      	ldr	r1, [sp, #36]	; 0x24
   87a34:	f005 0301 	and.w	r3, r5, #1
   87a38:	430b      	orrs	r3, r1
   87a3a:	f040 819a 	bne.w	87d72 <_svfprintf_r+0x19be>
   87a3e:	2666      	movs	r6, #102	; 0x66
   87a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87a42:	930c      	str	r3, [sp, #48]	; 0x30
   87a44:	056a      	lsls	r2, r5, #21
   87a46:	f100 816d 	bmi.w	87d24 <_svfprintf_r+0x1970>
   87a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87a4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87a50:	9308      	str	r3, [sp, #32]
   87a52:	e75b      	b.n	8790c <_svfprintf_r+0x1558>
   87a54:	4651      	mov	r1, sl
   87a56:	4648      	mov	r0, r9
   87a58:	aa2a      	add	r2, sp, #168	; 0xa8
   87a5a:	f004 f895 	bl	8bb88 <__ssprint_r>
   87a5e:	2800      	cmp	r0, #0
   87a60:	f47f a8f0 	bne.w	86c44 <_svfprintf_r+0x890>
   87a64:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87a68:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87a6a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a6e:	1ad3      	subs	r3, r2, r3
   87a70:	f7ff ba93 	b.w	86f9a <_svfprintf_r+0xbe6>
   87a74:	2330      	movs	r3, #48	; 0x30
   87a76:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87a7a:	2358      	movs	r3, #88	; 0x58
   87a7c:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   87a80:	9b07      	ldr	r3, [sp, #28]
   87a82:	f043 0402 	orr.w	r4, r3, #2
   87a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a88:	2b63      	cmp	r3, #99	; 0x63
   87a8a:	f300 80f2 	bgt.w	87c72 <_svfprintf_r+0x18be>
   87a8e:	2300      	movs	r3, #0
   87a90:	af3d      	add	r7, sp, #244	; 0xf4
   87a92:	930d      	str	r3, [sp, #52]	; 0x34
   87a94:	9b07      	ldr	r3, [sp, #28]
   87a96:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87a9a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   87a9e:	9312      	str	r3, [sp, #72]	; 0x48
   87aa0:	4613      	mov	r3, r2
   87aa2:	2b00      	cmp	r3, #0
   87aa4:	f026 0520 	bic.w	r5, r6, #32
   87aa8:	9407      	str	r4, [sp, #28]
   87aaa:	f2c0 808d 	blt.w	87bc8 <_svfprintf_r+0x1814>
   87aae:	930f      	str	r3, [sp, #60]	; 0x3c
   87ab0:	2300      	movs	r3, #0
   87ab2:	9508      	str	r5, [sp, #32]
   87ab4:	910c      	str	r1, [sp, #48]	; 0x30
   87ab6:	931e      	str	r3, [sp, #120]	; 0x78
   87ab8:	2e61      	cmp	r6, #97	; 0x61
   87aba:	f000 817d 	beq.w	87db8 <_svfprintf_r+0x1a04>
   87abe:	2e41      	cmp	r6, #65	; 0x41
   87ac0:	f47f ab77 	bne.w	871b2 <_svfprintf_r+0xdfe>
   87ac4:	aa24      	add	r2, sp, #144	; 0x90
   87ac6:	980c      	ldr	r0, [sp, #48]	; 0x30
   87ac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87aca:	f003 ffcd 	bl	8ba68 <frexp>
   87ace:	2200      	movs	r2, #0
   87ad0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87ad4:	f004 fcf2 	bl	8c4bc <__aeabi_dmul>
   87ad8:	4604      	mov	r4, r0
   87ada:	460d      	mov	r5, r1
   87adc:	2200      	movs	r2, #0
   87ade:	2300      	movs	r3, #0
   87ae0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87ae4:	f004 ff52 	bl	8c98c <__aeabi_dcmpeq>
   87ae8:	b108      	cbz	r0, 87aee <_svfprintf_r+0x173a>
   87aea:	2301      	movs	r3, #1
   87aec:	9324      	str	r3, [sp, #144]	; 0x90
   87aee:	4bae      	ldr	r3, [pc, #696]	; (87da8 <_svfprintf_r+0x19f4>)
   87af0:	930c      	str	r3, [sp, #48]	; 0x30
   87af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87af4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   87af8:	3b01      	subs	r3, #1
   87afa:	9613      	str	r6, [sp, #76]	; 0x4c
   87afc:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   87b00:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   87b04:	9721      	str	r7, [sp, #132]	; 0x84
   87b06:	46ba      	mov	sl, r7
   87b08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   87b0c:	4699      	mov	r9, r3
   87b0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87b12:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   87b16:	e006      	b.n	87b26 <_svfprintf_r+0x1772>
   87b18:	2200      	movs	r2, #0
   87b1a:	2300      	movs	r3, #0
   87b1c:	f004 ff36 	bl	8c98c <__aeabi_dcmpeq>
   87b20:	f109 39ff 	add.w	r9, r9, #4294967295
   87b24:	b9e8      	cbnz	r0, 87b62 <_svfprintf_r+0x17ae>
   87b26:	2200      	movs	r2, #0
   87b28:	4ba0      	ldr	r3, [pc, #640]	; (87dac <_svfprintf_r+0x19f8>)
   87b2a:	4630      	mov	r0, r6
   87b2c:	4639      	mov	r1, r7
   87b2e:	f004 fcc5 	bl	8c4bc <__aeabi_dmul>
   87b32:	460d      	mov	r5, r1
   87b34:	4604      	mov	r4, r0
   87b36:	f004 ff71 	bl	8ca1c <__aeabi_d2iz>
   87b3a:	4680      	mov	r8, r0
   87b3c:	f004 fc54 	bl	8c3e8 <__aeabi_i2d>
   87b40:	460b      	mov	r3, r1
   87b42:	4602      	mov	r2, r0
   87b44:	4629      	mov	r1, r5
   87b46:	4620      	mov	r0, r4
   87b48:	f004 fb00 	bl	8c14c <__aeabi_dsub>
   87b4c:	f81b 3008 	ldrb.w	r3, [fp, r8]
   87b50:	f1b9 3fff 	cmp.w	r9, #4294967295
   87b54:	4655      	mov	r5, sl
   87b56:	4606      	mov	r6, r0
   87b58:	460f      	mov	r7, r1
   87b5a:	464c      	mov	r4, r9
   87b5c:	f80a 3b01 	strb.w	r3, [sl], #1
   87b60:	d1da      	bne.n	87b18 <_svfprintf_r+0x1764>
   87b62:	4630      	mov	r0, r6
   87b64:	4639      	mov	r1, r7
   87b66:	2200      	movs	r2, #0
   87b68:	4b91      	ldr	r3, [pc, #580]	; (87db0 <_svfprintf_r+0x19fc>)
   87b6a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   87b6e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   87b70:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   87b74:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   87b78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87b7c:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   87b80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87b84:	9f21      	ldr	r7, [sp, #132]	; 0x84
   87b86:	f004 ff29 	bl	8c9dc <__aeabi_dcmpgt>
   87b8a:	2800      	cmp	r0, #0
   87b8c:	d155      	bne.n	87c3a <_svfprintf_r+0x1886>
   87b8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87b92:	2200      	movs	r2, #0
   87b94:	4b86      	ldr	r3, [pc, #536]	; (87db0 <_svfprintf_r+0x19fc>)
   87b96:	f004 fef9 	bl	8c98c <__aeabi_dcmpeq>
   87b9a:	b110      	cbz	r0, 87ba2 <_svfprintf_r+0x17ee>
   87b9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b9e:	07db      	lsls	r3, r3, #31
   87ba0:	d44b      	bmi.n	87c3a <_svfprintf_r+0x1886>
   87ba2:	2c00      	cmp	r4, #0
   87ba4:	db08      	blt.n	87bb8 <_svfprintf_r+0x1804>
   87ba6:	2230      	movs	r2, #48	; 0x30
   87ba8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87baa:	1c63      	adds	r3, r4, #1
   87bac:	440b      	add	r3, r1
   87bae:	f801 2b01 	strb.w	r2, [r1], #1
   87bb2:	428b      	cmp	r3, r1
   87bb4:	d1fb      	bne.n	87bae <_svfprintf_r+0x17fa>
   87bb6:	910f      	str	r1, [sp, #60]	; 0x3c
   87bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87bba:	9d07      	ldr	r5, [sp, #28]
   87bbc:	1bdb      	subs	r3, r3, r7
   87bbe:	9313      	str	r3, [sp, #76]	; 0x4c
   87bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87bc2:	9307      	str	r3, [sp, #28]
   87bc4:	f7ff bb1d 	b.w	87202 <_svfprintf_r+0xe4e>
   87bc8:	9508      	str	r5, [sp, #32]
   87bca:	232d      	movs	r3, #45	; 0x2d
   87bcc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87bd0:	931e      	str	r3, [sp, #120]	; 0x78
   87bd2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   87bd6:	910c      	str	r1, [sp, #48]	; 0x30
   87bd8:	930f      	str	r3, [sp, #60]	; 0x3c
   87bda:	e76d      	b.n	87ab8 <_svfprintf_r+0x1704>
   87bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87bde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87be0:	189a      	adds	r2, r3, r2
   87be2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87be4:	920c      	str	r2, [sp, #48]	; 0x30
   87be6:	2b00      	cmp	r3, #0
   87be8:	f340 811a 	ble.w	87e20 <_svfprintf_r+0x1a6c>
   87bec:	2667      	movs	r6, #103	; 0x67
   87bee:	e729      	b.n	87a44 <_svfprintf_r+0x1690>
   87bf0:	2300      	movs	r3, #0
   87bf2:	9309      	str	r3, [sp, #36]	; 0x24
   87bf4:	f7fe bc2b 	b.w	8644e <_svfprintf_r+0x9a>
   87bf8:	4648      	mov	r0, r9
   87bfa:	4651      	mov	r1, sl
   87bfc:	aa2a      	add	r2, sp, #168	; 0xa8
   87bfe:	f003 ffc3 	bl	8bb88 <__ssprint_r>
   87c02:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87c06:	f7fe bdae 	b.w	86766 <_svfprintf_r+0x3b2>
   87c0a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87c0c:	f7ff b95f 	b.w	86ece <_svfprintf_r+0xb1a>
   87c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87c12:	9d07      	ldr	r5, [sp, #28]
   87c14:	18fc      	adds	r4, r7, r3
   87c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87c18:	9307      	str	r3, [sp, #28]
   87c1a:	2347      	movs	r3, #71	; 0x47
   87c1c:	9308      	str	r3, [sp, #32]
   87c1e:	f7ff bae4 	b.w	871ea <_svfprintf_r+0xe36>
   87c22:	46cb      	mov	fp, r9
   87c24:	46d1      	mov	r9, sl
   87c26:	f7ff b80e 	b.w	86c46 <_svfprintf_r+0x892>
   87c2a:	46d1      	mov	r9, sl
   87c2c:	f7ff b80b 	b.w	86c46 <_svfprintf_r+0x892>
   87c30:	4b60      	ldr	r3, [pc, #384]	; (87db4 <_svfprintf_r+0x1a00>)
   87c32:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87c34:	930f      	str	r3, [sp, #60]	; 0x3c
   87c36:	f7fe bfb7 	b.w	86ba8 <_svfprintf_r+0x7f4>
   87c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87c3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   87c3e:	9528      	str	r5, [sp, #160]	; 0xa0
   87c40:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87c44:	7bc9      	ldrb	r1, [r1, #15]
   87c46:	428a      	cmp	r2, r1
   87c48:	f040 812a 	bne.w	87ea0 <_svfprintf_r+0x1aec>
   87c4c:	2030      	movs	r0, #48	; 0x30
   87c4e:	f803 0c01 	strb.w	r0, [r3, #-1]
   87c52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87c54:	1e5a      	subs	r2, r3, #1
   87c56:	9228      	str	r2, [sp, #160]	; 0xa0
   87c58:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87c5c:	4291      	cmp	r1, r2
   87c5e:	d0f6      	beq.n	87c4e <_svfprintf_r+0x189a>
   87c60:	2a39      	cmp	r2, #57	; 0x39
   87c62:	bf0b      	itete	eq
   87c64:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   87c66:	3201      	addne	r2, #1
   87c68:	7a92      	ldrbeq	r2, [r2, #10]
   87c6a:	b2d2      	uxtbne	r2, r2
   87c6c:	f803 2c01 	strb.w	r2, [r3, #-1]
   87c70:	e7a2      	b.n	87bb8 <_svfprintf_r+0x1804>
   87c72:	4648      	mov	r0, r9
   87c74:	1c59      	adds	r1, r3, #1
   87c76:	f002 fe11 	bl	8a89c <_malloc_r>
   87c7a:	4607      	mov	r7, r0
   87c7c:	2800      	cmp	r0, #0
   87c7e:	f000 811d 	beq.w	87ebc <_svfprintf_r+0x1b08>
   87c82:	900d      	str	r0, [sp, #52]	; 0x34
   87c84:	e706      	b.n	87a94 <_svfprintf_r+0x16e0>
   87c86:	2330      	movs	r3, #48	; 0x30
   87c88:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87c8c:	2378      	movs	r3, #120	; 0x78
   87c8e:	e6f5      	b.n	87a7c <_svfprintf_r+0x16c8>
   87c90:	9b07      	ldr	r3, [sp, #28]
   87c92:	9308      	str	r3, [sp, #32]
   87c94:	f7ff b894 	b.w	86dc0 <_svfprintf_r+0xa0c>
   87c98:	464a      	mov	r2, r9
   87c9a:	46d1      	mov	r9, sl
   87c9c:	4692      	mov	sl, r2
   87c9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87ca0:	3301      	adds	r3, #1
   87ca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87ca4:	442c      	add	r4, r5
   87ca6:	2b07      	cmp	r3, #7
   87ca8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87cac:	e9c8 2500 	strd	r2, r5, [r8]
   87cb0:	f77f a8b8 	ble.w	86e24 <_svfprintf_r+0xa70>
   87cb4:	4651      	mov	r1, sl
   87cb6:	4648      	mov	r0, r9
   87cb8:	aa2a      	add	r2, sp, #168	; 0xa8
   87cba:	f003 ff65 	bl	8bb88 <__ssprint_r>
   87cbe:	2800      	cmp	r0, #0
   87cc0:	f47e afc0 	bne.w	86c44 <_svfprintf_r+0x890>
   87cc4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87cc8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87ccc:	f7ff b8ac 	b.w	86e28 <_svfprintf_r+0xa74>
   87cd0:	2b00      	cmp	r3, #0
   87cd2:	bf08      	it	eq
   87cd4:	2301      	moveq	r3, #1
   87cd6:	9309      	str	r3, [sp, #36]	; 0x24
   87cd8:	9b07      	ldr	r3, [sp, #28]
   87cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87cde:	9312      	str	r3, [sp, #72]	; 0x48
   87ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87ce2:	2b00      	cmp	r3, #0
   87ce4:	930c      	str	r3, [sp, #48]	; 0x30
   87ce6:	f2c0 80bd 	blt.w	87e64 <_svfprintf_r+0x1ab0>
   87cea:	2402      	movs	r4, #2
   87cec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87cee:	a828      	add	r0, sp, #160	; 0xa0
   87cf0:	aa25      	add	r2, sp, #148	; 0x94
   87cf2:	ab24      	add	r3, sp, #144	; 0x90
   87cf4:	e9cd 2003 	strd	r2, r0, [sp, #12]
   87cf8:	e9cd 4500 	strd	r4, r5, [sp]
   87cfc:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   87d00:	9302      	str	r3, [sp, #8]
   87d02:	4622      	mov	r2, r4
   87d04:	462b      	mov	r3, r5
   87d06:	4648      	mov	r0, r9
   87d08:	911e      	str	r1, [sp, #120]	; 0x78
   87d0a:	f001 f919 	bl	88f40 <_dtoa_r>
   87d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87d10:	4607      	mov	r7, r0
   87d12:	930f      	str	r3, [sp, #60]	; 0x3c
   87d14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87d16:	940c      	str	r4, [sp, #48]	; 0x30
   87d18:	930d      	str	r3, [sp, #52]	; 0x34
   87d1a:	e64a      	b.n	879b2 <_svfprintf_r+0x15fe>
   87d1c:	2300      	movs	r3, #0
   87d1e:	930d      	str	r3, [sp, #52]	; 0x34
   87d20:	e753      	b.n	87bca <_svfprintf_r+0x1816>
   87d22:	2667      	movs	r6, #103	; 0x67
   87d24:	991a      	ldr	r1, [sp, #104]	; 0x68
   87d26:	780b      	ldrb	r3, [r1, #0]
   87d28:	2bff      	cmp	r3, #255	; 0xff
   87d2a:	f000 80de 	beq.w	87eea <_svfprintf_r+0x1b36>
   87d2e:	2400      	movs	r4, #0
   87d30:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87d32:	4620      	mov	r0, r4
   87d34:	e003      	b.n	87d3e <_svfprintf_r+0x198a>
   87d36:	3001      	adds	r0, #1
   87d38:	3101      	adds	r1, #1
   87d3a:	2bff      	cmp	r3, #255	; 0xff
   87d3c:	d008      	beq.n	87d50 <_svfprintf_r+0x199c>
   87d3e:	4293      	cmp	r3, r2
   87d40:	da06      	bge.n	87d50 <_svfprintf_r+0x199c>
   87d42:	1ad2      	subs	r2, r2, r3
   87d44:	784b      	ldrb	r3, [r1, #1]
   87d46:	2b00      	cmp	r3, #0
   87d48:	d1f5      	bne.n	87d36 <_svfprintf_r+0x1982>
   87d4a:	780b      	ldrb	r3, [r1, #0]
   87d4c:	3401      	adds	r4, #1
   87d4e:	e7f4      	b.n	87d3a <_svfprintf_r+0x1986>
   87d50:	911a      	str	r1, [sp, #104]	; 0x68
   87d52:	9210      	str	r2, [sp, #64]	; 0x40
   87d54:	9016      	str	r0, [sp, #88]	; 0x58
   87d56:	9412      	str	r4, [sp, #72]	; 0x48
   87d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87d5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
   87d5e:	4413      	add	r3, r2
   87d60:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   87d62:	fb02 1303 	mla	r3, r2, r3, r1
   87d66:	930c      	str	r3, [sp, #48]	; 0x30
   87d68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87d6c:	9308      	str	r3, [sp, #32]
   87d6e:	f7ff bab6 	b.w	872de <_svfprintf_r+0xf2a>
   87d72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87d74:	2666      	movs	r6, #102	; 0x66
   87d76:	18d3      	adds	r3, r2, r3
   87d78:	4419      	add	r1, r3
   87d7a:	910c      	str	r1, [sp, #48]	; 0x30
   87d7c:	e662      	b.n	87a44 <_svfprintf_r+0x1690>
   87d7e:	f106 020f 	add.w	r2, r6, #15
   87d82:	2101      	movs	r1, #1
   87d84:	b2d2      	uxtb	r2, r2
   87d86:	f7ff ba4f 	b.w	87228 <_svfprintf_r+0xe74>
   87d8a:	2900      	cmp	r1, #0
   87d8c:	d167      	bne.n	87e5e <_svfprintf_r+0x1aaa>
   87d8e:	2230      	movs	r2, #48	; 0x30
   87d90:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   87d94:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   87d98:	3330      	adds	r3, #48	; 0x30
   87d9a:	f802 3b01 	strb.w	r3, [r2], #1
   87d9e:	ab26      	add	r3, sp, #152	; 0x98
   87da0:	1ad3      	subs	r3, r2, r3
   87da2:	931b      	str	r3, [sp, #108]	; 0x6c
   87da4:	f7ff ba83 	b.w	872ae <_svfprintf_r+0xefa>
   87da8:	0008cc6c 	.word	0x0008cc6c
   87dac:	40300000 	.word	0x40300000
   87db0:	3fe00000 	.word	0x3fe00000
   87db4:	0008cc9c 	.word	0x0008cc9c
   87db8:	aa24      	add	r2, sp, #144	; 0x90
   87dba:	980c      	ldr	r0, [sp, #48]	; 0x30
   87dbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87dbe:	f003 fe53 	bl	8ba68 <frexp>
   87dc2:	2200      	movs	r2, #0
   87dc4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87dc8:	f004 fb78 	bl	8c4bc <__aeabi_dmul>
   87dcc:	4604      	mov	r4, r0
   87dce:	460d      	mov	r5, r1
   87dd0:	2200      	movs	r2, #0
   87dd2:	2300      	movs	r3, #0
   87dd4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87dd8:	f004 fdd8 	bl	8c98c <__aeabi_dcmpeq>
   87ddc:	b108      	cbz	r0, 87de2 <_svfprintf_r+0x1a2e>
   87dde:	2301      	movs	r3, #1
   87de0:	9324      	str	r3, [sp, #144]	; 0x90
   87de2:	4b44      	ldr	r3, [pc, #272]	; (87ef4 <_svfprintf_r+0x1b40>)
   87de4:	930c      	str	r3, [sp, #48]	; 0x30
   87de6:	e684      	b.n	87af2 <_svfprintf_r+0x173e>
   87de8:	2667      	movs	r6, #103	; 0x67
   87dea:	e62e      	b.n	87a4a <_svfprintf_r+0x1696>
   87dec:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87df0:	f7fe bcb9 	b.w	86766 <_svfprintf_r+0x3b2>
   87df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87df6:	930c      	str	r3, [sp, #48]	; 0x30
   87df8:	e57c      	b.n	878f4 <_svfprintf_r+0x1540>
   87dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87dfc:	2003      	movs	r0, #3
   87dfe:	2b00      	cmp	r3, #0
   87e00:	bfb8      	it	lt
   87e02:	232d      	movlt	r3, #45	; 0x2d
   87e04:	f04f 0100 	mov.w	r1, #0
   87e08:	bfba      	itte	lt
   87e0a:	461a      	movlt	r2, r3
   87e0c:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   87e10:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   87e14:	4f38      	ldr	r7, [pc, #224]	; (87ef8 <_svfprintf_r+0x1b44>)
   87e16:	4b39      	ldr	r3, [pc, #228]	; (87efc <_svfprintf_r+0x1b48>)
   87e18:	9008      	str	r0, [sp, #32]
   87e1a:	910d      	str	r1, [sp, #52]	; 0x34
   87e1c:	f7fe bce2 	b.w	867e4 <_svfprintf_r+0x430>
   87e20:	f1c3 0301 	rsb	r3, r3, #1
   87e24:	441a      	add	r2, r3
   87e26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87e2a:	2667      	movs	r6, #103	; 0x67
   87e2c:	920c      	str	r2, [sp, #48]	; 0x30
   87e2e:	9308      	str	r3, [sp, #32]
   87e30:	e56c      	b.n	8790c <_svfprintf_r+0x1558>
   87e32:	2200      	movs	r2, #0
   87e34:	2300      	movs	r3, #0
   87e36:	980c      	ldr	r0, [sp, #48]	; 0x30
   87e38:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87e3a:	f004 fda7 	bl	8c98c <__aeabi_dcmpeq>
   87e3e:	2800      	cmp	r0, #0
   87e40:	f47f addb 	bne.w	879fa <_svfprintf_r+0x1646>
   87e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87e46:	f1c3 0301 	rsb	r3, r3, #1
   87e4a:	9324      	str	r3, [sp, #144]	; 0x90
   87e4c:	e5d6      	b.n	879fc <_svfprintf_r+0x1648>
   87e4e:	992b      	ldr	r1, [sp, #172]	; 0xac
   87e50:	f7ff bb59 	b.w	87506 <_svfprintf_r+0x1152>
   87e54:	07e9      	lsls	r1, r5, #31
   87e56:	f57f aa35 	bpl.w	872c4 <_svfprintf_r+0xf10>
   87e5a:	f7ff ba2f 	b.w	872bc <_svfprintf_r+0xf08>
   87e5e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87e62:	e799      	b.n	87d98 <_svfprintf_r+0x19e4>
   87e64:	900d      	str	r0, [sp, #52]	; 0x34
   87e66:	e6b0      	b.n	87bca <_svfprintf_r+0x1816>
   87e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87e6a:	f005 0501 	and.w	r5, r5, #1
   87e6e:	4613      	mov	r3, r2
   87e70:	432b      	orrs	r3, r5
   87e72:	d104      	bne.n	87e7e <_svfprintf_r+0x1aca>
   87e74:	2301      	movs	r3, #1
   87e76:	2666      	movs	r6, #102	; 0x66
   87e78:	9308      	str	r3, [sp, #32]
   87e7a:	930c      	str	r3, [sp, #48]	; 0x30
   87e7c:	e546      	b.n	8790c <_svfprintf_r+0x1558>
   87e7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87e80:	2666      	movs	r6, #102	; 0x66
   87e82:	3301      	adds	r3, #1
   87e84:	441a      	add	r2, r3
   87e86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87e8a:	920c      	str	r2, [sp, #48]	; 0x30
   87e8c:	9308      	str	r3, [sp, #32]
   87e8e:	e53d      	b.n	8790c <_svfprintf_r+0x1558>
   87e90:	4b1b      	ldr	r3, [pc, #108]	; (87f00 <_svfprintf_r+0x1b4c>)
   87e92:	930f      	str	r3, [sp, #60]	; 0x3c
   87e94:	f7ff bbe9 	b.w	8766a <_svfprintf_r+0x12b6>
   87e98:	4a19      	ldr	r2, [pc, #100]	; (87f00 <_svfprintf_r+0x1b4c>)
   87e9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87e9c:	920f      	str	r2, [sp, #60]	; 0x3c
   87e9e:	e4b1      	b.n	87804 <_svfprintf_r+0x1450>
   87ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ea2:	e6dd      	b.n	87c60 <_svfprintf_r+0x18ac>
   87ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ea6:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87eaa:	f853 0b04 	ldr.w	r0, [r3], #4
   87eae:	4693      	mov	fp, r2
   87eb0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   87eb4:	9009      	str	r0, [sp, #36]	; 0x24
   87eb6:	930e      	str	r3, [sp, #56]	; 0x38
   87eb8:	f7fe bac7 	b.w	8644a <_svfprintf_r+0x96>
   87ebc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87ec4:	f8aa 300c 	strh.w	r3, [sl, #12]
   87ec8:	f7fe bc4d 	b.w	86766 <_svfprintf_r+0x3b2>
   87ecc:	4a0c      	ldr	r2, [pc, #48]	; (87f00 <_svfprintf_r+0x1b4c>)
   87ece:	920f      	str	r2, [sp, #60]	; 0x3c
   87ed0:	e6e6      	b.n	87ca0 <_svfprintf_r+0x18ec>
   87ed2:	230c      	movs	r3, #12
   87ed4:	f04f 32ff 	mov.w	r2, #4294967295
   87ed8:	f8c9 3000 	str.w	r3, [r9]
   87edc:	920a      	str	r2, [sp, #40]	; 0x28
   87ede:	f7fe bc49 	b.w	86774 <_svfprintf_r+0x3c0>
   87ee2:	2302      	movs	r3, #2
   87ee4:	931b      	str	r3, [sp, #108]	; 0x6c
   87ee6:	f7ff b9e2 	b.w	872ae <_svfprintf_r+0xefa>
   87eea:	2300      	movs	r3, #0
   87eec:	9312      	str	r3, [sp, #72]	; 0x48
   87eee:	9316      	str	r3, [sp, #88]	; 0x58
   87ef0:	e732      	b.n	87d58 <_svfprintf_r+0x19a4>
   87ef2:	bf00      	nop
   87ef4:	0008cc58 	.word	0x0008cc58
   87ef8:	0008cc50 	.word	0x0008cc50
   87efc:	0008cc54 	.word	0x0008cc54
   87f00:	0008cc9c 	.word	0x0008cc9c

00087f04 <__sprint_r.part.0>:
   87f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87f08:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87f0a:	4690      	mov	r8, r2
   87f0c:	049c      	lsls	r4, r3, #18
   87f0e:	d52d      	bpl.n	87f6c <__sprint_r.part.0+0x68>
   87f10:	6893      	ldr	r3, [r2, #8]
   87f12:	6812      	ldr	r2, [r2, #0]
   87f14:	b343      	cbz	r3, 87f68 <__sprint_r.part.0+0x64>
   87f16:	468b      	mov	fp, r1
   87f18:	4606      	mov	r6, r0
   87f1a:	f102 0908 	add.w	r9, r2, #8
   87f1e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   87f22:	ea5f 079a 	movs.w	r7, sl, lsr #2
   87f26:	d015      	beq.n	87f54 <__sprint_r.part.0+0x50>
   87f28:	2400      	movs	r4, #0
   87f2a:	3d04      	subs	r5, #4
   87f2c:	e001      	b.n	87f32 <__sprint_r.part.0+0x2e>
   87f2e:	42a7      	cmp	r7, r4
   87f30:	d00e      	beq.n	87f50 <__sprint_r.part.0+0x4c>
   87f32:	465a      	mov	r2, fp
   87f34:	4630      	mov	r0, r6
   87f36:	f855 1f04 	ldr.w	r1, [r5, #4]!
   87f3a:	f002 f8f9 	bl	8a130 <_fputwc_r>
   87f3e:	1c43      	adds	r3, r0, #1
   87f40:	f104 0401 	add.w	r4, r4, #1
   87f44:	d1f3      	bne.n	87f2e <__sprint_r.part.0+0x2a>
   87f46:	2300      	movs	r3, #0
   87f48:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f50:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87f54:	f02a 0a03 	bic.w	sl, sl, #3
   87f58:	eba3 030a 	sub.w	r3, r3, sl
   87f5c:	f8c8 3008 	str.w	r3, [r8, #8]
   87f60:	f109 0908 	add.w	r9, r9, #8
   87f64:	2b00      	cmp	r3, #0
   87f66:	d1da      	bne.n	87f1e <__sprint_r.part.0+0x1a>
   87f68:	2000      	movs	r0, #0
   87f6a:	e7ec      	b.n	87f46 <__sprint_r.part.0+0x42>
   87f6c:	f002 fa6a 	bl	8a444 <__sfvwrite_r>
   87f70:	2300      	movs	r3, #0
   87f72:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f7a:	bf00      	nop

00087f7c <_vfiprintf_r>:
   87f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87f80:	b0bb      	sub	sp, #236	; 0xec
   87f82:	461c      	mov	r4, r3
   87f84:	4689      	mov	r9, r1
   87f86:	4690      	mov	r8, r2
   87f88:	e9cd 3004 	strd	r3, r0, [sp, #16]
   87f8c:	b118      	cbz	r0, 87f96 <_vfiprintf_r+0x1a>
   87f8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87f90:	2b00      	cmp	r3, #0
   87f92:	f000 827a 	beq.w	8848a <_vfiprintf_r+0x50e>
   87f96:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87f9a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   87f9e:	07de      	lsls	r6, r3, #31
   87fa0:	b28a      	uxth	r2, r1
   87fa2:	d402      	bmi.n	87faa <_vfiprintf_r+0x2e>
   87fa4:	058d      	lsls	r5, r1, #22
   87fa6:	f140 851a 	bpl.w	889de <_vfiprintf_r+0xa62>
   87faa:	0490      	lsls	r0, r2, #18
   87fac:	d40a      	bmi.n	87fc4 <_vfiprintf_r+0x48>
   87fae:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87fb2:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   87fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87fba:	f8a9 200c 	strh.w	r2, [r9, #12]
   87fbe:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   87fc2:	b292      	uxth	r2, r2
   87fc4:	0711      	lsls	r1, r2, #28
   87fc6:	f140 80f6 	bpl.w	881b6 <_vfiprintf_r+0x23a>
   87fca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   87fce:	2b00      	cmp	r3, #0
   87fd0:	f000 80f1 	beq.w	881b6 <_vfiprintf_r+0x23a>
   87fd4:	f002 031a 	and.w	r3, r2, #26
   87fd8:	2b0a      	cmp	r3, #10
   87fda:	f000 80fa 	beq.w	881d2 <_vfiprintf_r+0x256>
   87fde:	2300      	movs	r3, #0
   87fe0:	46cb      	mov	fp, r9
   87fe2:	e9cd 3308 	strd	r3, r3, [sp, #32]
   87fe6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   87fea:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   87fee:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87ff2:	9303      	str	r3, [sp, #12]
   87ff4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   87ff8:	f898 3000 	ldrb.w	r3, [r8]
   87ffc:	2b00      	cmp	r3, #0
   87ffe:	f000 81ed 	beq.w	883dc <_vfiprintf_r+0x460>
   88002:	4644      	mov	r4, r8
   88004:	e004      	b.n	88010 <_vfiprintf_r+0x94>
   88006:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8800a:	2b00      	cmp	r3, #0
   8800c:	f000 8127 	beq.w	8825e <_vfiprintf_r+0x2e2>
   88010:	2b25      	cmp	r3, #37	; 0x25
   88012:	d1f8      	bne.n	88006 <_vfiprintf_r+0x8a>
   88014:	ebb4 0508 	subs.w	r5, r4, r8
   88018:	f040 8125 	bne.w	88266 <_vfiprintf_r+0x2ea>
   8801c:	7823      	ldrb	r3, [r4, #0]
   8801e:	2b00      	cmp	r3, #0
   88020:	f000 81dc 	beq.w	883dc <_vfiprintf_r+0x460>
   88024:	f04f 0200 	mov.w	r2, #0
   88028:	2300      	movs	r3, #0
   8802a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8802e:	f04f 32ff 	mov.w	r2, #4294967295
   88032:	252b      	movs	r5, #43	; 0x2b
   88034:	461f      	mov	r7, r3
   88036:	9302      	str	r3, [sp, #8]
   88038:	7863      	ldrb	r3, [r4, #1]
   8803a:	f104 0801 	add.w	r8, r4, #1
   8803e:	9200      	str	r2, [sp, #0]
   88040:	f108 0801 	add.w	r8, r8, #1
   88044:	f1a3 0220 	sub.w	r2, r3, #32
   88048:	2a5a      	cmp	r2, #90	; 0x5a
   8804a:	f200 8141 	bhi.w	882d0 <_vfiprintf_r+0x354>
   8804e:	e8df f012 	tbh	[pc, r2, lsl #1]
   88052:	0272      	.short	0x0272
   88054:	013f013f 	.word	0x013f013f
   88058:	013f026d 	.word	0x013f026d
   8805c:	013f013f 	.word	0x013f013f
   88060:	013f024b 	.word	0x013f024b
   88064:	006a013f 	.word	0x006a013f
   88068:	013f0227 	.word	0x013f0227
   8806c:	02310222 	.word	0x02310222
   88070:	022c013f 	.word	0x022c013f
   88074:	005b005b 	.word	0x005b005b
   88078:	005b005b 	.word	0x005b005b
   8807c:	005b005b 	.word	0x005b005b
   88080:	005b005b 	.word	0x005b005b
   88084:	013f005b 	.word	0x013f005b
   88088:	013f013f 	.word	0x013f013f
   8808c:	013f013f 	.word	0x013f013f
   88090:	013f013f 	.word	0x013f013f
   88094:	013f013f 	.word	0x013f013f
   88098:	007a020e 	.word	0x007a020e
   8809c:	013f013f 	.word	0x013f013f
   880a0:	013f013f 	.word	0x013f013f
   880a4:	013f013f 	.word	0x013f013f
   880a8:	013f013f 	.word	0x013f013f
   880ac:	013f013f 	.word	0x013f013f
   880b0:	013f00d7 	.word	0x013f00d7
   880b4:	013f013f 	.word	0x013f013f
   880b8:	013f01f2 	.word	0x013f01f2
   880bc:	013f0297 	.word	0x013f0297
   880c0:	0500013f 	.word	0x0500013f
   880c4:	013f013f 	.word	0x013f013f
   880c8:	013f013f 	.word	0x013f013f
   880cc:	013f013f 	.word	0x013f013f
   880d0:	013f013f 	.word	0x013f013f
   880d4:	013f013f 	.word	0x013f013f
   880d8:	007c020e 	.word	0x007c020e
   880dc:	013f013f 	.word	0x013f013f
   880e0:	028a013f 	.word	0x028a013f
   880e4:	0075007c 	.word	0x0075007c
   880e8:	027d013f 	.word	0x027d013f
   880ec:	02b6013f 	.word	0x02b6013f
   880f0:	02a600d9 	.word	0x02a600d9
   880f4:	013f0075 	.word	0x013f0075
   880f8:	007201f2 	.word	0x007201f2
   880fc:	013f04fe 	.word	0x013f04fe
   88100:	051c013f 	.word	0x051c013f
   88104:	0072013f 	.word	0x0072013f
   88108:	2100      	movs	r1, #0
   8810a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8810e:	f818 3b01 	ldrb.w	r3, [r8], #1
   88112:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88116:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8811a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8811e:	2a09      	cmp	r2, #9
   88120:	d9f5      	bls.n	8810e <_vfiprintf_r+0x192>
   88122:	9102      	str	r1, [sp, #8]
   88124:	e78e      	b.n	88044 <_vfiprintf_r+0xc8>
   88126:	9b04      	ldr	r3, [sp, #16]
   88128:	f853 2b04 	ldr.w	r2, [r3], #4
   8812c:	2a00      	cmp	r2, #0
   8812e:	9202      	str	r2, [sp, #8]
   88130:	9304      	str	r3, [sp, #16]
   88132:	f2c0 81ad 	blt.w	88490 <_vfiprintf_r+0x514>
   88136:	f898 3000 	ldrb.w	r3, [r8]
   8813a:	e781      	b.n	88040 <_vfiprintf_r+0xc4>
   8813c:	f898 3000 	ldrb.w	r3, [r8]
   88140:	f047 0720 	orr.w	r7, r7, #32
   88144:	e77c      	b.n	88040 <_vfiprintf_r+0xc4>
   88146:	f047 0710 	orr.w	r7, r7, #16
   8814a:	06bc      	lsls	r4, r7, #26
   8814c:	f140 8158 	bpl.w	88400 <_vfiprintf_r+0x484>
   88150:	9c04      	ldr	r4, [sp, #16]
   88152:	3407      	adds	r4, #7
   88154:	f024 0307 	bic.w	r3, r4, #7
   88158:	4619      	mov	r1, r3
   8815a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8815e:	4614      	mov	r4, r2
   88160:	461d      	mov	r5, r3
   88162:	9104      	str	r1, [sp, #16]
   88164:	2a00      	cmp	r2, #0
   88166:	f173 0300 	sbcs.w	r3, r3, #0
   8816a:	f2c0 841e 	blt.w	889aa <_vfiprintf_r+0xa2e>
   8816e:	9b00      	ldr	r3, [sp, #0]
   88170:	3301      	adds	r3, #1
   88172:	f000 84f0 	beq.w	88b56 <_vfiprintf_r+0xbda>
   88176:	ea54 0305 	orrs.w	r3, r4, r5
   8817a:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   8817e:	f000 83fc 	beq.w	8897a <_vfiprintf_r+0x9fe>
   88182:	2d00      	cmp	r5, #0
   88184:	bf08      	it	eq
   88186:	2c0a      	cmpeq	r4, #10
   88188:	f080 84a9 	bcs.w	88ade <_vfiprintf_r+0xb62>
   8818c:	2301      	movs	r3, #1
   8818e:	464f      	mov	r7, r9
   88190:	3430      	adds	r4, #48	; 0x30
   88192:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   88196:	9301      	str	r3, [sp, #4]
   88198:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8819c:	e9dd 2100 	ldrd	r2, r1, [sp]
   881a0:	428a      	cmp	r2, r1
   881a2:	bfb8      	it	lt
   881a4:	460a      	movlt	r2, r1
   881a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   881aa:	4615      	mov	r5, r2
   881ac:	2b00      	cmp	r3, #0
   881ae:	f000 809d 	beq.w	882ec <_vfiprintf_r+0x370>
   881b2:	3501      	adds	r5, #1
   881b4:	e09a      	b.n	882ec <_vfiprintf_r+0x370>
   881b6:	4649      	mov	r1, r9
   881b8:	9805      	ldr	r0, [sp, #20]
   881ba:	f000 fdb9 	bl	88d30 <__swsetup_r>
   881be:	2800      	cmp	r0, #0
   881c0:	f040 854a 	bne.w	88c58 <_vfiprintf_r+0xcdc>
   881c4:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   881c8:	f002 031a 	and.w	r3, r2, #26
   881cc:	2b0a      	cmp	r3, #10
   881ce:	f47f af06 	bne.w	87fde <_vfiprintf_r+0x62>
   881d2:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   881d6:	2b00      	cmp	r3, #0
   881d8:	f6ff af01 	blt.w	87fde <_vfiprintf_r+0x62>
   881dc:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   881e0:	07de      	lsls	r6, r3, #31
   881e2:	d402      	bmi.n	881ea <_vfiprintf_r+0x26e>
   881e4:	0595      	lsls	r5, r2, #22
   881e6:	f140 850e 	bpl.w	88c06 <_vfiprintf_r+0xc8a>
   881ea:	4623      	mov	r3, r4
   881ec:	4642      	mov	r2, r8
   881ee:	4649      	mov	r1, r9
   881f0:	9805      	ldr	r0, [sp, #20]
   881f2:	f000 fd59 	bl	88ca8 <__sbprintf>
   881f6:	9003      	str	r0, [sp, #12]
   881f8:	9803      	ldr	r0, [sp, #12]
   881fa:	b03b      	add	sp, #236	; 0xec
   881fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88200:	f047 0710 	orr.w	r7, r7, #16
   88204:	06b8      	lsls	r0, r7, #26
   88206:	9c04      	ldr	r4, [sp, #16]
   88208:	f140 8109 	bpl.w	8841e <_vfiprintf_r+0x4a2>
   8820c:	3407      	adds	r4, #7
   8820e:	f024 0307 	bic.w	r3, r4, #7
   88212:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88216:	9304      	str	r3, [sp, #16]
   88218:	2300      	movs	r3, #0
   8821a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8821e:	f04f 0200 	mov.w	r2, #0
   88222:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88226:	9a00      	ldr	r2, [sp, #0]
   88228:	4611      	mov	r1, r2
   8822a:	3101      	adds	r1, #1
   8822c:	f000 81db 	beq.w	885e6 <_vfiprintf_r+0x66a>
   88230:	ea54 0105 	orrs.w	r1, r4, r5
   88234:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   88238:	f040 81d4 	bne.w	885e4 <_vfiprintf_r+0x668>
   8823c:	2a00      	cmp	r2, #0
   8823e:	f040 848d 	bne.w	88b5c <_vfiprintf_r+0xbe0>
   88242:	2b00      	cmp	r3, #0
   88244:	f040 839e 	bne.w	88984 <_vfiprintf_r+0xa08>
   88248:	f019 0301 	ands.w	r3, r9, #1
   8824c:	9301      	str	r3, [sp, #4]
   8824e:	f000 83c3 	beq.w	889d8 <_vfiprintf_r+0xa5c>
   88252:	2330      	movs	r3, #48	; 0x30
   88254:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88258:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   8825c:	e79e      	b.n	8819c <_vfiprintf_r+0x220>
   8825e:	ebb4 0508 	subs.w	r5, r4, r8
   88262:	f000 80bb 	beq.w	883dc <_vfiprintf_r+0x460>
   88266:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8826a:	3301      	adds	r3, #1
   8826c:	442a      	add	r2, r5
   8826e:	2b07      	cmp	r3, #7
   88270:	e9ca 8500 	strd	r8, r5, [sl]
   88274:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   88278:	dc06      	bgt.n	88288 <_vfiprintf_r+0x30c>
   8827a:	f10a 0a08 	add.w	sl, sl, #8
   8827e:	9a03      	ldr	r2, [sp, #12]
   88280:	7823      	ldrb	r3, [r4, #0]
   88282:	442a      	add	r2, r5
   88284:	9203      	str	r2, [sp, #12]
   88286:	e6ca      	b.n	8801e <_vfiprintf_r+0xa2>
   88288:	2a00      	cmp	r2, #0
   8828a:	f000 8372 	beq.w	88972 <_vfiprintf_r+0x9f6>
   8828e:	4659      	mov	r1, fp
   88290:	9805      	ldr	r0, [sp, #20]
   88292:	aa0e      	add	r2, sp, #56	; 0x38
   88294:	f7ff fe36 	bl	87f04 <__sprint_r.part.0>
   88298:	b950      	cbnz	r0, 882b0 <_vfiprintf_r+0x334>
   8829a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8829e:	e7ee      	b.n	8827e <_vfiprintf_r+0x302>
   882a0:	4659      	mov	r1, fp
   882a2:	9805      	ldr	r0, [sp, #20]
   882a4:	aa0e      	add	r2, sp, #56	; 0x38
   882a6:	f7ff fe2d 	bl	87f04 <__sprint_r.part.0>
   882aa:	2800      	cmp	r0, #0
   882ac:	f000 808d 	beq.w	883ca <_vfiprintf_r+0x44e>
   882b0:	46d9      	mov	r9, fp
   882b2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   882b6:	f013 0f01 	tst.w	r3, #1
   882ba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   882be:	f000 8095 	beq.w	883ec <_vfiprintf_r+0x470>
   882c2:	065b      	lsls	r3, r3, #25
   882c4:	f100 84d4 	bmi.w	88c70 <_vfiprintf_r+0xcf4>
   882c8:	9803      	ldr	r0, [sp, #12]
   882ca:	b03b      	add	sp, #236	; 0xec
   882cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   882d0:	2b00      	cmp	r3, #0
   882d2:	f000 8083 	beq.w	883dc <_vfiprintf_r+0x460>
   882d6:	2501      	movs	r5, #1
   882d8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   882dc:	f04f 0300 	mov.w	r3, #0
   882e0:	9501      	str	r5, [sp, #4]
   882e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   882e6:	ae21      	add	r6, sp, #132	; 0x84
   882e8:	2300      	movs	r3, #0
   882ea:	9300      	str	r3, [sp, #0]
   882ec:	f017 0302 	ands.w	r3, r7, #2
   882f0:	9307      	str	r3, [sp, #28]
   882f2:	bf18      	it	ne
   882f4:	3502      	addne	r5, #2
   882f6:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   882fa:	9306      	str	r3, [sp, #24]
   882fc:	d104      	bne.n	88308 <_vfiprintf_r+0x38c>
   882fe:	9b02      	ldr	r3, [sp, #8]
   88300:	1b5c      	subs	r4, r3, r5
   88302:	2c00      	cmp	r4, #0
   88304:	f300 8274 	bgt.w	887f0 <_vfiprintf_r+0x874>
   88308:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8830c:	1c48      	adds	r0, r1, #1
   8830e:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   88312:	b174      	cbz	r4, 88332 <_vfiprintf_r+0x3b6>
   88314:	2101      	movs	r1, #1
   88316:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   8831a:	440a      	add	r2, r1
   8831c:	2807      	cmp	r0, #7
   8831e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88322:	e9ca 4100 	strd	r4, r1, [sl]
   88326:	f300 8246 	bgt.w	887b6 <_vfiprintf_r+0x83a>
   8832a:	4601      	mov	r1, r0
   8832c:	f10a 0a08 	add.w	sl, sl, #8
   88330:	3001      	adds	r0, #1
   88332:	9b07      	ldr	r3, [sp, #28]
   88334:	b1c3      	cbz	r3, 88368 <_vfiprintf_r+0x3ec>
   88336:	2102      	movs	r1, #2
   88338:	ab0d      	add	r3, sp, #52	; 0x34
   8833a:	440a      	add	r2, r1
   8833c:	2807      	cmp	r0, #7
   8833e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88342:	e9ca 3100 	strd	r3, r1, [sl]
   88346:	f340 824e 	ble.w	887e6 <_vfiprintf_r+0x86a>
   8834a:	2a00      	cmp	r2, #0
   8834c:	f000 830c 	beq.w	88968 <_vfiprintf_r+0x9ec>
   88350:	4659      	mov	r1, fp
   88352:	9805      	ldr	r0, [sp, #20]
   88354:	aa0e      	add	r2, sp, #56	; 0x38
   88356:	f7ff fdd5 	bl	87f04 <__sprint_r.part.0>
   8835a:	2800      	cmp	r0, #0
   8835c:	d1a8      	bne.n	882b0 <_vfiprintf_r+0x334>
   8835e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88362:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88366:	1c48      	adds	r0, r1, #1
   88368:	9b06      	ldr	r3, [sp, #24]
   8836a:	2b80      	cmp	r3, #128	; 0x80
   8836c:	f000 817e 	beq.w	8866c <_vfiprintf_r+0x6f0>
   88370:	e9dd 3400 	ldrd	r3, r4, [sp]
   88374:	1b1c      	subs	r4, r3, r4
   88376:	2c00      	cmp	r4, #0
   88378:	f300 81d3 	bgt.w	88722 <_vfiprintf_r+0x7a6>
   8837c:	9b01      	ldr	r3, [sp, #4]
   8837e:	2807      	cmp	r0, #7
   88380:	441a      	add	r2, r3
   88382:	e9ca 6300 	strd	r6, r3, [sl]
   88386:	9210      	str	r2, [sp, #64]	; 0x40
   88388:	900f      	str	r0, [sp, #60]	; 0x3c
   8838a:	f340 816c 	ble.w	88666 <_vfiprintf_r+0x6ea>
   8838e:	2a00      	cmp	r2, #0
   88390:	f000 8276 	beq.w	88880 <_vfiprintf_r+0x904>
   88394:	4659      	mov	r1, fp
   88396:	9805      	ldr	r0, [sp, #20]
   88398:	aa0e      	add	r2, sp, #56	; 0x38
   8839a:	f7ff fdb3 	bl	87f04 <__sprint_r.part.0>
   8839e:	2800      	cmp	r0, #0
   883a0:	d186      	bne.n	882b0 <_vfiprintf_r+0x334>
   883a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   883a4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   883a8:	0779      	lsls	r1, r7, #29
   883aa:	d504      	bpl.n	883b6 <_vfiprintf_r+0x43a>
   883ac:	9b02      	ldr	r3, [sp, #8]
   883ae:	1b5c      	subs	r4, r3, r5
   883b0:	2c00      	cmp	r4, #0
   883b2:	f300 826e 	bgt.w	88892 <_vfiprintf_r+0x916>
   883b6:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   883ba:	42a9      	cmp	r1, r5
   883bc:	bfac      	ite	ge
   883be:	185b      	addge	r3, r3, r1
   883c0:	195b      	addlt	r3, r3, r5
   883c2:	9303      	str	r3, [sp, #12]
   883c4:	2a00      	cmp	r2, #0
   883c6:	f47f af6b 	bne.w	882a0 <_vfiprintf_r+0x324>
   883ca:	2300      	movs	r3, #0
   883cc:	930f      	str	r3, [sp, #60]	; 0x3c
   883ce:	f898 3000 	ldrb.w	r3, [r8]
   883d2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   883d6:	2b00      	cmp	r3, #0
   883d8:	f47f ae13 	bne.w	88002 <_vfiprintf_r+0x86>
   883dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   883de:	46d9      	mov	r9, fp
   883e0:	2b00      	cmp	r3, #0
   883e2:	f040 8426 	bne.w	88c32 <_vfiprintf_r+0xcb6>
   883e6:	2300      	movs	r3, #0
   883e8:	930f      	str	r3, [sp, #60]	; 0x3c
   883ea:	e762      	b.n	882b2 <_vfiprintf_r+0x336>
   883ec:	059a      	lsls	r2, r3, #22
   883ee:	f53f af68 	bmi.w	882c2 <_vfiprintf_r+0x346>
   883f2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   883f6:	f002 f9cf 	bl	8a798 <__retarget_lock_release_recursive>
   883fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   883fe:	e760      	b.n	882c2 <_vfiprintf_r+0x346>
   88400:	9b04      	ldr	r3, [sp, #16]
   88402:	06f8      	lsls	r0, r7, #27
   88404:	f853 4b04 	ldr.w	r4, [r3], #4
   88408:	f100 8308 	bmi.w	88a1c <_vfiprintf_r+0xaa0>
   8840c:	0679      	lsls	r1, r7, #25
   8840e:	f140 8302 	bpl.w	88a16 <_vfiprintf_r+0xa9a>
   88412:	b224      	sxth	r4, r4
   88414:	17e5      	asrs	r5, r4, #31
   88416:	9304      	str	r3, [sp, #16]
   88418:	4622      	mov	r2, r4
   8841a:	462b      	mov	r3, r5
   8841c:	e6a2      	b.n	88164 <_vfiprintf_r+0x1e8>
   8841e:	f854 3b04 	ldr.w	r3, [r4], #4
   88422:	06f9      	lsls	r1, r7, #27
   88424:	9404      	str	r4, [sp, #16]
   88426:	f100 82f3 	bmi.w	88a10 <_vfiprintf_r+0xa94>
   8842a:	067a      	lsls	r2, r7, #25
   8842c:	f140 82ed 	bpl.w	88a0a <_vfiprintf_r+0xa8e>
   88430:	2500      	movs	r5, #0
   88432:	b29c      	uxth	r4, r3
   88434:	e6f0      	b.n	88218 <_vfiprintf_r+0x29c>
   88436:	f04f 0300 	mov.w	r3, #0
   8843a:	9c04      	ldr	r4, [sp, #16]
   8843c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88440:	f854 6b04 	ldr.w	r6, [r4], #4
   88444:	2e00      	cmp	r6, #0
   88446:	f000 8397 	beq.w	88b78 <_vfiprintf_r+0xbfc>
   8844a:	9a00      	ldr	r2, [sp, #0]
   8844c:	4613      	mov	r3, r2
   8844e:	3301      	adds	r3, #1
   88450:	f000 831e 	beq.w	88a90 <_vfiprintf_r+0xb14>
   88454:	2100      	movs	r1, #0
   88456:	4630      	mov	r0, r6
   88458:	f002 fce4 	bl	8ae24 <memchr>
   8845c:	2800      	cmp	r0, #0
   8845e:	f000 83d8 	beq.w	88c12 <_vfiprintf_r+0xc96>
   88462:	1b83      	subs	r3, r0, r6
   88464:	9301      	str	r3, [sp, #4]
   88466:	2300      	movs	r3, #0
   88468:	9404      	str	r4, [sp, #16]
   8846a:	9300      	str	r3, [sp, #0]
   8846c:	e696      	b.n	8819c <_vfiprintf_r+0x220>
   8846e:	2501      	movs	r5, #1
   88470:	f04f 0200 	mov.w	r2, #0
   88474:	9c04      	ldr	r4, [sp, #16]
   88476:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8847a:	f854 3b04 	ldr.w	r3, [r4], #4
   8847e:	9501      	str	r5, [sp, #4]
   88480:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88484:	9404      	str	r4, [sp, #16]
   88486:	ae21      	add	r6, sp, #132	; 0x84
   88488:	e72e      	b.n	882e8 <_vfiprintf_r+0x36c>
   8848a:	f001 fdb1 	bl	89ff0 <__sinit>
   8848e:	e582      	b.n	87f96 <_vfiprintf_r+0x1a>
   88490:	9b02      	ldr	r3, [sp, #8]
   88492:	425b      	negs	r3, r3
   88494:	9302      	str	r3, [sp, #8]
   88496:	f898 3000 	ldrb.w	r3, [r8]
   8849a:	f047 0704 	orr.w	r7, r7, #4
   8849e:	e5cf      	b.n	88040 <_vfiprintf_r+0xc4>
   884a0:	f898 3000 	ldrb.w	r3, [r8]
   884a4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   884a8:	e5ca      	b.n	88040 <_vfiprintf_r+0xc4>
   884aa:	f898 3000 	ldrb.w	r3, [r8]
   884ae:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   884b2:	e5c5      	b.n	88040 <_vfiprintf_r+0xc4>
   884b4:	4641      	mov	r1, r8
   884b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   884ba:	2b2a      	cmp	r3, #42	; 0x2a
   884bc:	f000 83dd 	beq.w	88c7a <_vfiprintf_r+0xcfe>
   884c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   884c4:	2a09      	cmp	r2, #9
   884c6:	4688      	mov	r8, r1
   884c8:	bf98      	it	ls
   884ca:	2100      	movls	r1, #0
   884cc:	f200 83ad 	bhi.w	88c2a <_vfiprintf_r+0xcae>
   884d0:	f818 3b01 	ldrb.w	r3, [r8], #1
   884d4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   884d8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   884dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   884e0:	2a09      	cmp	r2, #9
   884e2:	d9f5      	bls.n	884d0 <_vfiprintf_r+0x554>
   884e4:	9100      	str	r1, [sp, #0]
   884e6:	e5ad      	b.n	88044 <_vfiprintf_r+0xc8>
   884e8:	9c05      	ldr	r4, [sp, #20]
   884ea:	4620      	mov	r0, r4
   884ec:	f002 f94a 	bl	8a784 <_localeconv_r>
   884f0:	6843      	ldr	r3, [r0, #4]
   884f2:	4618      	mov	r0, r3
   884f4:	930a      	str	r3, [sp, #40]	; 0x28
   884f6:	f7fd fefb 	bl	862f0 <strlen>
   884fa:	4603      	mov	r3, r0
   884fc:	4620      	mov	r0, r4
   884fe:	930b      	str	r3, [sp, #44]	; 0x2c
   88500:	461c      	mov	r4, r3
   88502:	f002 f93f 	bl	8a784 <_localeconv_r>
   88506:	6882      	ldr	r2, [r0, #8]
   88508:	9209      	str	r2, [sp, #36]	; 0x24
   8850a:	2c00      	cmp	r4, #0
   8850c:	f43f ae13 	beq.w	88136 <_vfiprintf_r+0x1ba>
   88510:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88512:	2b00      	cmp	r3, #0
   88514:	f43f ae0f 	beq.w	88136 <_vfiprintf_r+0x1ba>
   88518:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8851a:	781b      	ldrb	r3, [r3, #0]
   8851c:	2b00      	cmp	r3, #0
   8851e:	f43f ae0a 	beq.w	88136 <_vfiprintf_r+0x1ba>
   88522:	f898 3000 	ldrb.w	r3, [r8]
   88526:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   8852a:	e589      	b.n	88040 <_vfiprintf_r+0xc4>
   8852c:	f898 3000 	ldrb.w	r3, [r8]
   88530:	f047 0701 	orr.w	r7, r7, #1
   88534:	e584      	b.n	88040 <_vfiprintf_r+0xc4>
   88536:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8853a:	2b00      	cmp	r3, #0
   8853c:	f47f adfb 	bne.w	88136 <_vfiprintf_r+0x1ba>
   88540:	2320      	movs	r3, #32
   88542:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88546:	f898 3000 	ldrb.w	r3, [r8]
   8854a:	e579      	b.n	88040 <_vfiprintf_r+0xc4>
   8854c:	f898 3000 	ldrb.w	r3, [r8]
   88550:	2b6c      	cmp	r3, #108	; 0x6c
   88552:	bf03      	ittte	eq
   88554:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88558:	f047 0720 	orreq.w	r7, r7, #32
   8855c:	f108 0801 	addeq.w	r8, r8, #1
   88560:	f047 0710 	orrne.w	r7, r7, #16
   88564:	e56c      	b.n	88040 <_vfiprintf_r+0xc4>
   88566:	f898 3000 	ldrb.w	r3, [r8]
   8856a:	2b68      	cmp	r3, #104	; 0x68
   8856c:	bf03      	ittte	eq
   8856e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88572:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   88576:	f108 0801 	addeq.w	r8, r8, #1
   8857a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   8857e:	e55f      	b.n	88040 <_vfiprintf_r+0xc4>
   88580:	f047 0910 	orr.w	r9, r7, #16
   88584:	f019 0f20 	tst.w	r9, #32
   88588:	9c04      	ldr	r4, [sp, #16]
   8858a:	f000 8200 	beq.w	8898e <_vfiprintf_r+0xa12>
   8858e:	3407      	adds	r4, #7
   88590:	f024 0307 	bic.w	r3, r4, #7
   88594:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88598:	9304      	str	r3, [sp, #16]
   8859a:	2301      	movs	r3, #1
   8859c:	e63f      	b.n	8821e <_vfiprintf_r+0x2a2>
   8859e:	f647 0330 	movw	r3, #30768	; 0x7830
   885a2:	9c04      	ldr	r4, [sp, #16]
   885a4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   885a8:	f854 2b04 	ldr.w	r2, [r4], #4
   885ac:	4bbf      	ldr	r3, [pc, #764]	; (888ac <_vfiprintf_r+0x930>)
   885ae:	9404      	str	r4, [sp, #16]
   885b0:	9308      	str	r3, [sp, #32]
   885b2:	4614      	mov	r4, r2
   885b4:	2500      	movs	r5, #0
   885b6:	2302      	movs	r3, #2
   885b8:	f047 0902 	orr.w	r9, r7, #2
   885bc:	e62f      	b.n	8821e <_vfiprintf_r+0x2a2>
   885be:	06bb      	lsls	r3, r7, #26
   885c0:	f100 8232 	bmi.w	88a28 <_vfiprintf_r+0xaac>
   885c4:	06fe      	lsls	r6, r7, #27
   885c6:	f100 82cf 	bmi.w	88b68 <_vfiprintf_r+0xbec>
   885ca:	067d      	lsls	r5, r7, #25
   885cc:	f100 8301 	bmi.w	88bd2 <_vfiprintf_r+0xc56>
   885d0:	05bc      	lsls	r4, r7, #22
   885d2:	f140 82c9 	bpl.w	88b68 <_vfiprintf_r+0xbec>
   885d6:	9c04      	ldr	r4, [sp, #16]
   885d8:	9a03      	ldr	r2, [sp, #12]
   885da:	f854 3b04 	ldr.w	r3, [r4], #4
   885de:	701a      	strb	r2, [r3, #0]
   885e0:	9404      	str	r4, [sp, #16]
   885e2:	e509      	b.n	87ff8 <_vfiprintf_r+0x7c>
   885e4:	46b9      	mov	r9, r7
   885e6:	2b01      	cmp	r3, #1
   885e8:	f43f adcb 	beq.w	88182 <_vfiprintf_r+0x206>
   885ec:	2b02      	cmp	r3, #2
   885ee:	ae3a      	add	r6, sp, #232	; 0xe8
   885f0:	d113      	bne.n	8861a <_vfiprintf_r+0x69e>
   885f2:	9808      	ldr	r0, [sp, #32]
   885f4:	0923      	lsrs	r3, r4, #4
   885f6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   885fa:	0929      	lsrs	r1, r5, #4
   885fc:	f004 020f 	and.w	r2, r4, #15
   88600:	460d      	mov	r5, r1
   88602:	461c      	mov	r4, r3
   88604:	5c83      	ldrb	r3, [r0, r2]
   88606:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8860a:	ea54 0305 	orrs.w	r3, r4, r5
   8860e:	d1f1      	bne.n	885f4 <_vfiprintf_r+0x678>
   88610:	ab3a      	add	r3, sp, #232	; 0xe8
   88612:	1b9b      	subs	r3, r3, r6
   88614:	464f      	mov	r7, r9
   88616:	9301      	str	r3, [sp, #4]
   88618:	e5c0      	b.n	8819c <_vfiprintf_r+0x220>
   8861a:	08e2      	lsrs	r2, r4, #3
   8861c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88620:	08e9      	lsrs	r1, r5, #3
   88622:	f004 0307 	and.w	r3, r4, #7
   88626:	460d      	mov	r5, r1
   88628:	4614      	mov	r4, r2
   8862a:	3330      	adds	r3, #48	; 0x30
   8862c:	ea54 0105 	orrs.w	r1, r4, r5
   88630:	4632      	mov	r2, r6
   88632:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88636:	d1f0      	bne.n	8861a <_vfiprintf_r+0x69e>
   88638:	f019 0f01 	tst.w	r9, #1
   8863c:	d0e8      	beq.n	88610 <_vfiprintf_r+0x694>
   8863e:	2b30      	cmp	r3, #48	; 0x30
   88640:	d0e6      	beq.n	88610 <_vfiprintf_r+0x694>
   88642:	2330      	movs	r3, #48	; 0x30
   88644:	3a02      	subs	r2, #2
   88646:	f806 3c01 	strb.w	r3, [r6, #-1]
   8864a:	ab3a      	add	r3, sp, #232	; 0xe8
   8864c:	1a9b      	subs	r3, r3, r2
   8864e:	464f      	mov	r7, r9
   88650:	4616      	mov	r6, r2
   88652:	9301      	str	r3, [sp, #4]
   88654:	e5a2      	b.n	8819c <_vfiprintf_r+0x220>
   88656:	2301      	movs	r3, #1
   88658:	9a01      	ldr	r2, [sp, #4]
   8865a:	930f      	str	r3, [sp, #60]	; 0x3c
   8865c:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   88660:	9212      	str	r2, [sp, #72]	; 0x48
   88662:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88666:	f10a 0a08 	add.w	sl, sl, #8
   8866a:	e69d      	b.n	883a8 <_vfiprintf_r+0x42c>
   8866c:	9b02      	ldr	r3, [sp, #8]
   8866e:	1b5c      	subs	r4, r3, r5
   88670:	2c00      	cmp	r4, #0
   88672:	f77f ae7d 	ble.w	88370 <_vfiprintf_r+0x3f4>
   88676:	2c10      	cmp	r4, #16
   88678:	f340 82ea 	ble.w	88c50 <_vfiprintf_r+0xcd4>
   8867c:	f8df 9230 	ldr.w	r9, [pc, #560]	; 888b0 <_vfiprintf_r+0x934>
   88680:	4650      	mov	r0, sl
   88682:	9706      	str	r7, [sp, #24]
   88684:	46b2      	mov	sl, r6
   88686:	464e      	mov	r6, r9
   88688:	46c1      	mov	r9, r8
   8868a:	46a8      	mov	r8, r5
   8868c:	9d05      	ldr	r5, [sp, #20]
   8868e:	e006      	b.n	8869e <_vfiprintf_r+0x722>
   88690:	f101 0c02 	add.w	ip, r1, #2
   88694:	4619      	mov	r1, r3
   88696:	3008      	adds	r0, #8
   88698:	3c10      	subs	r4, #16
   8869a:	2c10      	cmp	r4, #16
   8869c:	dd1a      	ble.n	886d4 <_vfiprintf_r+0x758>
   8869e:	2710      	movs	r7, #16
   886a0:	1c4b      	adds	r3, r1, #1
   886a2:	3210      	adds	r2, #16
   886a4:	2b07      	cmp	r3, #7
   886a6:	9210      	str	r2, [sp, #64]	; 0x40
   886a8:	6006      	str	r6, [r0, #0]
   886aa:	6047      	str	r7, [r0, #4]
   886ac:	930f      	str	r3, [sp, #60]	; 0x3c
   886ae:	ddef      	ble.n	88690 <_vfiprintf_r+0x714>
   886b0:	2a00      	cmp	r2, #0
   886b2:	d07b      	beq.n	887ac <_vfiprintf_r+0x830>
   886b4:	4659      	mov	r1, fp
   886b6:	4628      	mov	r0, r5
   886b8:	aa0e      	add	r2, sp, #56	; 0x38
   886ba:	f7ff fc23 	bl	87f04 <__sprint_r.part.0>
   886be:	2800      	cmp	r0, #0
   886c0:	f47f adf6 	bne.w	882b0 <_vfiprintf_r+0x334>
   886c4:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   886c8:	3c10      	subs	r4, #16
   886ca:	2c10      	cmp	r4, #16
   886cc:	a811      	add	r0, sp, #68	; 0x44
   886ce:	f101 0c01 	add.w	ip, r1, #1
   886d2:	dce4      	bgt.n	8869e <_vfiprintf_r+0x722>
   886d4:	4645      	mov	r5, r8
   886d6:	46c8      	mov	r8, r9
   886d8:	46b1      	mov	r9, r6
   886da:	4656      	mov	r6, sl
   886dc:	4682      	mov	sl, r0
   886de:	9f06      	ldr	r7, [sp, #24]
   886e0:	4422      	add	r2, r4
   886e2:	f1bc 0f07 	cmp.w	ip, #7
   886e6:	e9ca 9400 	strd	r9, r4, [sl]
   886ea:	9210      	str	r2, [sp, #64]	; 0x40
   886ec:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   886f0:	f340 817e 	ble.w	889f0 <_vfiprintf_r+0xa74>
   886f4:	2a00      	cmp	r2, #0
   886f6:	f000 825c 	beq.w	88bb2 <_vfiprintf_r+0xc36>
   886fa:	4659      	mov	r1, fp
   886fc:	9805      	ldr	r0, [sp, #20]
   886fe:	aa0e      	add	r2, sp, #56	; 0x38
   88700:	f7ff fc00 	bl	87f04 <__sprint_r.part.0>
   88704:	2800      	cmp	r0, #0
   88706:	f47f add3 	bne.w	882b0 <_vfiprintf_r+0x334>
   8870a:	e9dd 3400 	ldrd	r3, r4, [sp]
   8870e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88712:	1b1c      	subs	r4, r3, r4
   88714:	2c00      	cmp	r4, #0
   88716:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8871a:	f101 0001 	add.w	r0, r1, #1
   8871e:	f77f ae2d 	ble.w	8837c <_vfiprintf_r+0x400>
   88722:	2c10      	cmp	r4, #16
   88724:	f8df 9188 	ldr.w	r9, [pc, #392]	; 888b0 <_vfiprintf_r+0x934>
   88728:	dd2f      	ble.n	8878a <_vfiprintf_r+0x80e>
   8872a:	46d4      	mov	ip, sl
   8872c:	46b2      	mov	sl, r6
   8872e:	464e      	mov	r6, r9
   88730:	46c1      	mov	r9, r8
   88732:	46a8      	mov	r8, r5
   88734:	9d05      	ldr	r5, [sp, #20]
   88736:	e006      	b.n	88746 <_vfiprintf_r+0x7ca>
   88738:	1c88      	adds	r0, r1, #2
   8873a:	4619      	mov	r1, r3
   8873c:	f10c 0c08 	add.w	ip, ip, #8
   88740:	3c10      	subs	r4, #16
   88742:	2c10      	cmp	r4, #16
   88744:	dd1c      	ble.n	88780 <_vfiprintf_r+0x804>
   88746:	2010      	movs	r0, #16
   88748:	1c4b      	adds	r3, r1, #1
   8874a:	3210      	adds	r2, #16
   8874c:	2b07      	cmp	r3, #7
   8874e:	9210      	str	r2, [sp, #64]	; 0x40
   88750:	f8cc 6000 	str.w	r6, [ip]
   88754:	f8cc 0004 	str.w	r0, [ip, #4]
   88758:	930f      	str	r3, [sp, #60]	; 0x3c
   8875a:	dded      	ble.n	88738 <_vfiprintf_r+0x7bc>
   8875c:	b30a      	cbz	r2, 887a2 <_vfiprintf_r+0x826>
   8875e:	4659      	mov	r1, fp
   88760:	4628      	mov	r0, r5
   88762:	aa0e      	add	r2, sp, #56	; 0x38
   88764:	f7ff fbce 	bl	87f04 <__sprint_r.part.0>
   88768:	2800      	cmp	r0, #0
   8876a:	f47f ada1 	bne.w	882b0 <_vfiprintf_r+0x334>
   8876e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88772:	3c10      	subs	r4, #16
   88774:	2c10      	cmp	r4, #16
   88776:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8877a:	f101 0001 	add.w	r0, r1, #1
   8877e:	dce2      	bgt.n	88746 <_vfiprintf_r+0x7ca>
   88780:	4645      	mov	r5, r8
   88782:	46c8      	mov	r8, r9
   88784:	46b1      	mov	r9, r6
   88786:	4656      	mov	r6, sl
   88788:	46e2      	mov	sl, ip
   8878a:	4422      	add	r2, r4
   8878c:	2807      	cmp	r0, #7
   8878e:	e9ca 9400 	strd	r9, r4, [sl]
   88792:	9210      	str	r2, [sp, #64]	; 0x40
   88794:	900f      	str	r0, [sp, #60]	; 0x3c
   88796:	f300 80d3 	bgt.w	88940 <_vfiprintf_r+0x9c4>
   8879a:	f10a 0a08 	add.w	sl, sl, #8
   8879e:	3001      	adds	r0, #1
   887a0:	e5ec      	b.n	8837c <_vfiprintf_r+0x400>
   887a2:	2001      	movs	r0, #1
   887a4:	4611      	mov	r1, r2
   887a6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   887aa:	e7c9      	b.n	88740 <_vfiprintf_r+0x7c4>
   887ac:	f04f 0c01 	mov.w	ip, #1
   887b0:	4611      	mov	r1, r2
   887b2:	a811      	add	r0, sp, #68	; 0x44
   887b4:	e770      	b.n	88698 <_vfiprintf_r+0x71c>
   887b6:	2a00      	cmp	r2, #0
   887b8:	f000 80d3 	beq.w	88962 <_vfiprintf_r+0x9e6>
   887bc:	4659      	mov	r1, fp
   887be:	9805      	ldr	r0, [sp, #20]
   887c0:	aa0e      	add	r2, sp, #56	; 0x38
   887c2:	f7ff fb9f 	bl	87f04 <__sprint_r.part.0>
   887c6:	2800      	cmp	r0, #0
   887c8:	f47f ad72 	bne.w	882b0 <_vfiprintf_r+0x334>
   887cc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   887d0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   887d4:	1c48      	adds	r0, r1, #1
   887d6:	e5ac      	b.n	88332 <_vfiprintf_r+0x3b6>
   887d8:	2202      	movs	r2, #2
   887da:	2001      	movs	r0, #1
   887dc:	ab0d      	add	r3, sp, #52	; 0x34
   887de:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   887e2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   887e6:	4601      	mov	r1, r0
   887e8:	f10a 0a08 	add.w	sl, sl, #8
   887ec:	1c48      	adds	r0, r1, #1
   887ee:	e5bb      	b.n	88368 <_vfiprintf_r+0x3ec>
   887f0:	2c10      	cmp	r4, #16
   887f2:	f340 8214 	ble.w	88c1e <_vfiprintf_r+0xca2>
   887f6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   887fa:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 888b4 <_vfiprintf_r+0x938>
   887fe:	46d4      	mov	ip, sl
   88800:	46b2      	mov	sl, r6
   88802:	464e      	mov	r6, r9
   88804:	46c1      	mov	r9, r8
   88806:	46a8      	mov	r8, r5
   88808:	9d05      	ldr	r5, [sp, #20]
   8880a:	e006      	b.n	8881a <_vfiprintf_r+0x89e>
   8880c:	1c99      	adds	r1, r3, #2
   8880e:	4603      	mov	r3, r0
   88810:	f10c 0c08 	add.w	ip, ip, #8
   88814:	3c10      	subs	r4, #16
   88816:	2c10      	cmp	r4, #16
   88818:	dd1c      	ble.n	88854 <_vfiprintf_r+0x8d8>
   8881a:	2110      	movs	r1, #16
   8881c:	1c58      	adds	r0, r3, #1
   8881e:	3210      	adds	r2, #16
   88820:	2807      	cmp	r0, #7
   88822:	9210      	str	r2, [sp, #64]	; 0x40
   88824:	f8cc 6000 	str.w	r6, [ip]
   88828:	f8cc 1004 	str.w	r1, [ip, #4]
   8882c:	900f      	str	r0, [sp, #60]	; 0x3c
   8882e:	dded      	ble.n	8880c <_vfiprintf_r+0x890>
   88830:	b30a      	cbz	r2, 88876 <_vfiprintf_r+0x8fa>
   88832:	4659      	mov	r1, fp
   88834:	4628      	mov	r0, r5
   88836:	aa0e      	add	r2, sp, #56	; 0x38
   88838:	f7ff fb64 	bl	87f04 <__sprint_r.part.0>
   8883c:	2800      	cmp	r0, #0
   8883e:	f47f ad37 	bne.w	882b0 <_vfiprintf_r+0x334>
   88842:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88846:	3c10      	subs	r4, #16
   88848:	2c10      	cmp	r4, #16
   8884a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8884e:	f103 0101 	add.w	r1, r3, #1
   88852:	dce2      	bgt.n	8881a <_vfiprintf_r+0x89e>
   88854:	4645      	mov	r5, r8
   88856:	46c8      	mov	r8, r9
   88858:	46b1      	mov	r9, r6
   8885a:	4656      	mov	r6, sl
   8885c:	46e2      	mov	sl, ip
   8885e:	4422      	add	r2, r4
   88860:	2907      	cmp	r1, #7
   88862:	e9ca 9400 	strd	r9, r4, [sl]
   88866:	9210      	str	r2, [sp, #64]	; 0x40
   88868:	910f      	str	r1, [sp, #60]	; 0x3c
   8886a:	f300 80a8 	bgt.w	889be <_vfiprintf_r+0xa42>
   8886e:	f10a 0a08 	add.w	sl, sl, #8
   88872:	1c48      	adds	r0, r1, #1
   88874:	e54b      	b.n	8830e <_vfiprintf_r+0x392>
   88876:	4613      	mov	r3, r2
   88878:	2101      	movs	r1, #1
   8887a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8887e:	e7c9      	b.n	88814 <_vfiprintf_r+0x898>
   88880:	0778      	lsls	r0, r7, #29
   88882:	920f      	str	r2, [sp, #60]	; 0x3c
   88884:	d554      	bpl.n	88930 <_vfiprintf_r+0x9b4>
   88886:	9b02      	ldr	r3, [sp, #8]
   88888:	1b5c      	subs	r4, r3, r5
   8888a:	2c00      	cmp	r4, #0
   8888c:	dd50      	ble.n	88930 <_vfiprintf_r+0x9b4>
   8888e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88892:	2c10      	cmp	r4, #16
   88894:	f340 81d7 	ble.w	88c46 <_vfiprintf_r+0xcca>
   88898:	f8df 9018 	ldr.w	r9, [pc, #24]	; 888b4 <_vfiprintf_r+0x938>
   8889c:	2610      	movs	r6, #16
   8889e:	464b      	mov	r3, r9
   888a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   888a2:	46a9      	mov	r9, r5
   888a4:	9f05      	ldr	r7, [sp, #20]
   888a6:	461d      	mov	r5, r3
   888a8:	e00d      	b.n	888c6 <_vfiprintf_r+0x94a>
   888aa:	bf00      	nop
   888ac:	0008cc58 	.word	0x0008cc58
   888b0:	0008ccbc 	.word	0x0008ccbc
   888b4:	0008ccac 	.word	0x0008ccac
   888b8:	1c88      	adds	r0, r1, #2
   888ba:	4619      	mov	r1, r3
   888bc:	f10a 0a08 	add.w	sl, sl, #8
   888c0:	3c10      	subs	r4, #16
   888c2:	2c10      	cmp	r4, #16
   888c4:	dd19      	ble.n	888fa <_vfiprintf_r+0x97e>
   888c6:	1c4b      	adds	r3, r1, #1
   888c8:	3210      	adds	r2, #16
   888ca:	2b07      	cmp	r3, #7
   888cc:	e9ca 5600 	strd	r5, r6, [sl]
   888d0:	9210      	str	r2, [sp, #64]	; 0x40
   888d2:	930f      	str	r3, [sp, #60]	; 0x3c
   888d4:	ddf0      	ble.n	888b8 <_vfiprintf_r+0x93c>
   888d6:	b332      	cbz	r2, 88926 <_vfiprintf_r+0x9aa>
   888d8:	4659      	mov	r1, fp
   888da:	4638      	mov	r0, r7
   888dc:	aa0e      	add	r2, sp, #56	; 0x38
   888de:	f7ff fb11 	bl	87f04 <__sprint_r.part.0>
   888e2:	2800      	cmp	r0, #0
   888e4:	f47f ace4 	bne.w	882b0 <_vfiprintf_r+0x334>
   888e8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   888ec:	3c10      	subs	r4, #16
   888ee:	2c10      	cmp	r4, #16
   888f0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888f4:	f101 0001 	add.w	r0, r1, #1
   888f8:	dce5      	bgt.n	888c6 <_vfiprintf_r+0x94a>
   888fa:	462b      	mov	r3, r5
   888fc:	464d      	mov	r5, r9
   888fe:	4699      	mov	r9, r3
   88900:	4422      	add	r2, r4
   88902:	2807      	cmp	r0, #7
   88904:	e9ca 9400 	strd	r9, r4, [sl]
   88908:	9210      	str	r2, [sp, #64]	; 0x40
   8890a:	900f      	str	r0, [sp, #60]	; 0x3c
   8890c:	f77f ad53 	ble.w	883b6 <_vfiprintf_r+0x43a>
   88910:	b172      	cbz	r2, 88930 <_vfiprintf_r+0x9b4>
   88912:	4659      	mov	r1, fp
   88914:	9805      	ldr	r0, [sp, #20]
   88916:	aa0e      	add	r2, sp, #56	; 0x38
   88918:	f7ff faf4 	bl	87f04 <__sprint_r.part.0>
   8891c:	2800      	cmp	r0, #0
   8891e:	f47f acc7 	bne.w	882b0 <_vfiprintf_r+0x334>
   88922:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88924:	e547      	b.n	883b6 <_vfiprintf_r+0x43a>
   88926:	2001      	movs	r0, #1
   88928:	4611      	mov	r1, r2
   8892a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8892e:	e7c7      	b.n	888c0 <_vfiprintf_r+0x944>
   88930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88934:	42aa      	cmp	r2, r5
   88936:	bfac      	ite	ge
   88938:	189b      	addge	r3, r3, r2
   8893a:	195b      	addlt	r3, r3, r5
   8893c:	9303      	str	r3, [sp, #12]
   8893e:	e544      	b.n	883ca <_vfiprintf_r+0x44e>
   88940:	2a00      	cmp	r2, #0
   88942:	f43f ae88 	beq.w	88656 <_vfiprintf_r+0x6da>
   88946:	4659      	mov	r1, fp
   88948:	9805      	ldr	r0, [sp, #20]
   8894a:	aa0e      	add	r2, sp, #56	; 0x38
   8894c:	f7ff fada 	bl	87f04 <__sprint_r.part.0>
   88950:	2800      	cmp	r0, #0
   88952:	f47f acad 	bne.w	882b0 <_vfiprintf_r+0x334>
   88956:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   8895a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8895e:	3001      	adds	r0, #1
   88960:	e50c      	b.n	8837c <_vfiprintf_r+0x400>
   88962:	9b07      	ldr	r3, [sp, #28]
   88964:	2b00      	cmp	r3, #0
   88966:	d16b      	bne.n	88a40 <_vfiprintf_r+0xac4>
   88968:	2001      	movs	r0, #1
   8896a:	4611      	mov	r1, r2
   8896c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88970:	e4fa      	b.n	88368 <_vfiprintf_r+0x3ec>
   88972:	920f      	str	r2, [sp, #60]	; 0x3c
   88974:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88978:	e481      	b.n	8827e <_vfiprintf_r+0x302>
   8897a:	9b00      	ldr	r3, [sp, #0]
   8897c:	2b00      	cmp	r3, #0
   8897e:	f47f ac05 	bne.w	8818c <_vfiprintf_r+0x210>
   88982:	464f      	mov	r7, r9
   88984:	2300      	movs	r3, #0
   88986:	ae3a      	add	r6, sp, #232	; 0xe8
   88988:	9300      	str	r3, [sp, #0]
   8898a:	9301      	str	r3, [sp, #4]
   8898c:	e406      	b.n	8819c <_vfiprintf_r+0x220>
   8898e:	f854 2b04 	ldr.w	r2, [r4], #4
   88992:	f019 0f10 	tst.w	r9, #16
   88996:	f04f 0301 	mov.w	r3, #1
   8899a:	9404      	str	r4, [sp, #16]
   8899c:	d132      	bne.n	88a04 <_vfiprintf_r+0xa88>
   8899e:	f019 0f40 	tst.w	r9, #64	; 0x40
   889a2:	d02b      	beq.n	889fc <_vfiprintf_r+0xa80>
   889a4:	2500      	movs	r5, #0
   889a6:	b294      	uxth	r4, r2
   889a8:	e439      	b.n	8821e <_vfiprintf_r+0x2a2>
   889aa:	232d      	movs	r3, #45	; 0x2d
   889ac:	4264      	negs	r4, r4
   889ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   889b2:	46b9      	mov	r9, r7
   889b4:	f04f 0301 	mov.w	r3, #1
   889b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   889bc:	e433      	b.n	88226 <_vfiprintf_r+0x2aa>
   889be:	2a00      	cmp	r2, #0
   889c0:	d06f      	beq.n	88aa2 <_vfiprintf_r+0xb26>
   889c2:	4659      	mov	r1, fp
   889c4:	9805      	ldr	r0, [sp, #20]
   889c6:	aa0e      	add	r2, sp, #56	; 0x38
   889c8:	f7ff fa9c 	bl	87f04 <__sprint_r.part.0>
   889cc:	2800      	cmp	r0, #0
   889ce:	f47f ac6f 	bne.w	882b0 <_vfiprintf_r+0x334>
   889d2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   889d6:	e497      	b.n	88308 <_vfiprintf_r+0x38c>
   889d8:	ae3a      	add	r6, sp, #232	; 0xe8
   889da:	f7ff bbdf 	b.w	8819c <_vfiprintf_r+0x220>
   889de:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   889e2:	f001 fed7 	bl	8a794 <__retarget_lock_acquire_recursive>
   889e6:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   889ea:	b28a      	uxth	r2, r1
   889ec:	f7ff badd 	b.w	87faa <_vfiprintf_r+0x2e>
   889f0:	4661      	mov	r1, ip
   889f2:	f10a 0a08 	add.w	sl, sl, #8
   889f6:	f10c 0001 	add.w	r0, ip, #1
   889fa:	e4b9      	b.n	88370 <_vfiprintf_r+0x3f4>
   889fc:	f419 7f00 	tst.w	r9, #512	; 0x200
   88a00:	f040 80ef 	bne.w	88be2 <_vfiprintf_r+0xc66>
   88a04:	4614      	mov	r4, r2
   88a06:	2500      	movs	r5, #0
   88a08:	e409      	b.n	8821e <_vfiprintf_r+0x2a2>
   88a0a:	05be      	lsls	r6, r7, #22
   88a0c:	f100 80f7 	bmi.w	88bfe <_vfiprintf_r+0xc82>
   88a10:	461c      	mov	r4, r3
   88a12:	2500      	movs	r5, #0
   88a14:	e400      	b.n	88218 <_vfiprintf_r+0x29c>
   88a16:	05ba      	lsls	r2, r7, #22
   88a18:	f100 80ea 	bmi.w	88bf0 <_vfiprintf_r+0xc74>
   88a1c:	17e5      	asrs	r5, r4, #31
   88a1e:	9304      	str	r3, [sp, #16]
   88a20:	4622      	mov	r2, r4
   88a22:	462b      	mov	r3, r5
   88a24:	f7ff bb9e 	b.w	88164 <_vfiprintf_r+0x1e8>
   88a28:	9b03      	ldr	r3, [sp, #12]
   88a2a:	9c04      	ldr	r4, [sp, #16]
   88a2c:	17dd      	asrs	r5, r3, #31
   88a2e:	461a      	mov	r2, r3
   88a30:	462b      	mov	r3, r5
   88a32:	f854 1b04 	ldr.w	r1, [r4], #4
   88a36:	e9c1 2300 	strd	r2, r3, [r1]
   88a3a:	9404      	str	r4, [sp, #16]
   88a3c:	f7ff badc 	b.w	87ff8 <_vfiprintf_r+0x7c>
   88a40:	2202      	movs	r2, #2
   88a42:	ab0d      	add	r3, sp, #52	; 0x34
   88a44:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88a48:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88a4c:	e6cc      	b.n	887e8 <_vfiprintf_r+0x86c>
   88a4e:	46b9      	mov	r9, r7
   88a50:	e598      	b.n	88584 <_vfiprintf_r+0x608>
   88a52:	4a90      	ldr	r2, [pc, #576]	; (88c94 <_vfiprintf_r+0xd18>)
   88a54:	9208      	str	r2, [sp, #32]
   88a56:	06bd      	lsls	r5, r7, #26
   88a58:	9c04      	ldr	r4, [sp, #16]
   88a5a:	d530      	bpl.n	88abe <_vfiprintf_r+0xb42>
   88a5c:	3407      	adds	r4, #7
   88a5e:	f024 0207 	bic.w	r2, r4, #7
   88a62:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   88a66:	9204      	str	r2, [sp, #16]
   88a68:	07fe      	lsls	r6, r7, #31
   88a6a:	d509      	bpl.n	88a80 <_vfiprintf_r+0xb04>
   88a6c:	ea54 0205 	orrs.w	r2, r4, r5
   88a70:	d006      	beq.n	88a80 <_vfiprintf_r+0xb04>
   88a72:	2230      	movs	r2, #48	; 0x30
   88a74:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   88a78:	f047 0702 	orr.w	r7, r7, #2
   88a7c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   88a80:	2302      	movs	r3, #2
   88a82:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88a86:	f7ff bbca 	b.w	8821e <_vfiprintf_r+0x2a2>
   88a8a:	4a83      	ldr	r2, [pc, #524]	; (88c98 <_vfiprintf_r+0xd1c>)
   88a8c:	9208      	str	r2, [sp, #32]
   88a8e:	e7e2      	b.n	88a56 <_vfiprintf_r+0xada>
   88a90:	4630      	mov	r0, r6
   88a92:	f7fd fc2d 	bl	862f0 <strlen>
   88a96:	2300      	movs	r3, #0
   88a98:	9404      	str	r4, [sp, #16]
   88a9a:	9001      	str	r0, [sp, #4]
   88a9c:	9300      	str	r3, [sp, #0]
   88a9e:	f7ff bb7d 	b.w	8819c <_vfiprintf_r+0x220>
   88aa2:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   88aa6:	2900      	cmp	r1, #0
   88aa8:	f040 8089 	bne.w	88bbe <_vfiprintf_r+0xc42>
   88aac:	9b07      	ldr	r3, [sp, #28]
   88aae:	2b00      	cmp	r3, #0
   88ab0:	f47f ae92 	bne.w	887d8 <_vfiprintf_r+0x85c>
   88ab4:	4611      	mov	r1, r2
   88ab6:	2001      	movs	r0, #1
   88ab8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88abc:	e458      	b.n	88370 <_vfiprintf_r+0x3f4>
   88abe:	f854 2b04 	ldr.w	r2, [r4], #4
   88ac2:	9404      	str	r4, [sp, #16]
   88ac4:	06fc      	lsls	r4, r7, #27
   88ac6:	d407      	bmi.n	88ad8 <_vfiprintf_r+0xb5c>
   88ac8:	0678      	lsls	r0, r7, #25
   88aca:	d502      	bpl.n	88ad2 <_vfiprintf_r+0xb56>
   88acc:	2500      	movs	r5, #0
   88ace:	b294      	uxth	r4, r2
   88ad0:	e7ca      	b.n	88a68 <_vfiprintf_r+0xaec>
   88ad2:	05b9      	lsls	r1, r7, #22
   88ad4:	f100 8089 	bmi.w	88bea <_vfiprintf_r+0xc6e>
   88ad8:	4614      	mov	r4, r2
   88ada:	2500      	movs	r5, #0
   88adc:	e7c4      	b.n	88a68 <_vfiprintf_r+0xaec>
   88ade:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   88ae2:	f8cd 9004 	str.w	r9, [sp, #4]
   88ae6:	f8cd 8018 	str.w	r8, [sp, #24]
   88aea:	2700      	movs	r7, #0
   88aec:	4698      	mov	r8, r3
   88aee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   88af2:	ae3a      	add	r6, sp, #232	; 0xe8
   88af4:	e00b      	b.n	88b0e <_vfiprintf_r+0xb92>
   88af6:	220a      	movs	r2, #10
   88af8:	2300      	movs	r3, #0
   88afa:	4620      	mov	r0, r4
   88afc:	4629      	mov	r1, r5
   88afe:	f7fd f883 	bl	85c08 <__aeabi_uldivmod>
   88b02:	2d00      	cmp	r5, #0
   88b04:	bf08      	it	eq
   88b06:	2c0a      	cmpeq	r4, #10
   88b08:	d319      	bcc.n	88b3e <_vfiprintf_r+0xbc2>
   88b0a:	4604      	mov	r4, r0
   88b0c:	460d      	mov	r5, r1
   88b0e:	220a      	movs	r2, #10
   88b10:	2300      	movs	r3, #0
   88b12:	4620      	mov	r0, r4
   88b14:	4629      	mov	r1, r5
   88b16:	f7fd f877 	bl	85c08 <__aeabi_uldivmod>
   88b1a:	3230      	adds	r2, #48	; 0x30
   88b1c:	f806 2c01 	strb.w	r2, [r6, #-1]
   88b20:	3701      	adds	r7, #1
   88b22:	3e01      	subs	r6, #1
   88b24:	f1b8 0f00 	cmp.w	r8, #0
   88b28:	d0e5      	beq.n	88af6 <_vfiprintf_r+0xb7a>
   88b2a:	f899 3000 	ldrb.w	r3, [r9]
   88b2e:	42bb      	cmp	r3, r7
   88b30:	d1e1      	bne.n	88af6 <_vfiprintf_r+0xb7a>
   88b32:	2fff      	cmp	r7, #255	; 0xff
   88b34:	d0df      	beq.n	88af6 <_vfiprintf_r+0xb7a>
   88b36:	2d00      	cmp	r5, #0
   88b38:	bf08      	it	eq
   88b3a:	2c0a      	cmpeq	r4, #10
   88b3c:	d225      	bcs.n	88b8a <_vfiprintf_r+0xc0e>
   88b3e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   88b42:	ab3a      	add	r3, sp, #232	; 0xe8
   88b44:	f8dd 9004 	ldr.w	r9, [sp, #4]
   88b48:	1b9b      	subs	r3, r3, r6
   88b4a:	464f      	mov	r7, r9
   88b4c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   88b50:	9301      	str	r3, [sp, #4]
   88b52:	f7ff bb23 	b.w	8819c <_vfiprintf_r+0x220>
   88b56:	46b9      	mov	r9, r7
   88b58:	f7ff bb13 	b.w	88182 <_vfiprintf_r+0x206>
   88b5c:	2b01      	cmp	r3, #1
   88b5e:	46b9      	mov	r9, r7
   88b60:	f47f ad44 	bne.w	885ec <_vfiprintf_r+0x670>
   88b64:	f7ff bb12 	b.w	8818c <_vfiprintf_r+0x210>
   88b68:	9c04      	ldr	r4, [sp, #16]
   88b6a:	9a03      	ldr	r2, [sp, #12]
   88b6c:	f854 3b04 	ldr.w	r3, [r4], #4
   88b70:	601a      	str	r2, [r3, #0]
   88b72:	9404      	str	r4, [sp, #16]
   88b74:	f7ff ba40 	b.w	87ff8 <_vfiprintf_r+0x7c>
   88b78:	9d00      	ldr	r5, [sp, #0]
   88b7a:	4e48      	ldr	r6, [pc, #288]	; (88c9c <_vfiprintf_r+0xd20>)
   88b7c:	2d06      	cmp	r5, #6
   88b7e:	bf28      	it	cs
   88b80:	2506      	movcs	r5, #6
   88b82:	9404      	str	r4, [sp, #16]
   88b84:	9501      	str	r5, [sp, #4]
   88b86:	f7ff bbaf 	b.w	882e8 <_vfiprintf_r+0x36c>
   88b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
   88b8e:	1af6      	subs	r6, r6, r3
   88b90:	461a      	mov	r2, r3
   88b92:	4630      	mov	r0, r6
   88b94:	f7fd fbda 	bl	8634c <strncpy>
   88b98:	f899 3001 	ldrb.w	r3, [r9, #1]
   88b9c:	b10b      	cbz	r3, 88ba2 <_vfiprintf_r+0xc26>
   88b9e:	f109 0901 	add.w	r9, r9, #1
   88ba2:	220a      	movs	r2, #10
   88ba4:	2300      	movs	r3, #0
   88ba6:	4620      	mov	r0, r4
   88ba8:	4629      	mov	r1, r5
   88baa:	f7fd f82d 	bl	85c08 <__aeabi_uldivmod>
   88bae:	2700      	movs	r7, #0
   88bb0:	e7ab      	b.n	88b0a <_vfiprintf_r+0xb8e>
   88bb2:	2001      	movs	r0, #1
   88bb4:	4611      	mov	r1, r2
   88bb6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88bba:	f7ff bbd9 	b.w	88370 <_vfiprintf_r+0x3f4>
   88bbe:	2201      	movs	r2, #1
   88bc0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   88bc4:	4610      	mov	r0, r2
   88bc6:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   88bca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88bce:	f7ff bbac 	b.w	8832a <_vfiprintf_r+0x3ae>
   88bd2:	9c04      	ldr	r4, [sp, #16]
   88bd4:	9a03      	ldr	r2, [sp, #12]
   88bd6:	f854 3b04 	ldr.w	r3, [r4], #4
   88bda:	801a      	strh	r2, [r3, #0]
   88bdc:	9404      	str	r4, [sp, #16]
   88bde:	f7ff ba0b 	b.w	87ff8 <_vfiprintf_r+0x7c>
   88be2:	2500      	movs	r5, #0
   88be4:	b2d4      	uxtb	r4, r2
   88be6:	f7ff bb1a 	b.w	8821e <_vfiprintf_r+0x2a2>
   88bea:	2500      	movs	r5, #0
   88bec:	b2d4      	uxtb	r4, r2
   88bee:	e73b      	b.n	88a68 <_vfiprintf_r+0xaec>
   88bf0:	b264      	sxtb	r4, r4
   88bf2:	17e5      	asrs	r5, r4, #31
   88bf4:	9304      	str	r3, [sp, #16]
   88bf6:	4622      	mov	r2, r4
   88bf8:	462b      	mov	r3, r5
   88bfa:	f7ff bab3 	b.w	88164 <_vfiprintf_r+0x1e8>
   88bfe:	2500      	movs	r5, #0
   88c00:	b2dc      	uxtb	r4, r3
   88c02:	f7ff bb09 	b.w	88218 <_vfiprintf_r+0x29c>
   88c06:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88c0a:	f001 fdc5 	bl	8a798 <__retarget_lock_release_recursive>
   88c0e:	f7ff baec 	b.w	881ea <_vfiprintf_r+0x26e>
   88c12:	9b00      	ldr	r3, [sp, #0]
   88c14:	9404      	str	r4, [sp, #16]
   88c16:	9301      	str	r3, [sp, #4]
   88c18:	9000      	str	r0, [sp, #0]
   88c1a:	f7ff babf 	b.w	8819c <_vfiprintf_r+0x220>
   88c1e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88c22:	f8df 907c 	ldr.w	r9, [pc, #124]	; 88ca0 <_vfiprintf_r+0xd24>
   88c26:	3101      	adds	r1, #1
   88c28:	e619      	b.n	8885e <_vfiprintf_r+0x8e2>
   88c2a:	2200      	movs	r2, #0
   88c2c:	9200      	str	r2, [sp, #0]
   88c2e:	f7ff ba09 	b.w	88044 <_vfiprintf_r+0xc8>
   88c32:	4659      	mov	r1, fp
   88c34:	9805      	ldr	r0, [sp, #20]
   88c36:	aa0e      	add	r2, sp, #56	; 0x38
   88c38:	f7ff f964 	bl	87f04 <__sprint_r.part.0>
   88c3c:	2800      	cmp	r0, #0
   88c3e:	f43f abd2 	beq.w	883e6 <_vfiprintf_r+0x46a>
   88c42:	f7ff bb36 	b.w	882b2 <_vfiprintf_r+0x336>
   88c46:	980f      	ldr	r0, [sp, #60]	; 0x3c
   88c48:	f8df 9054 	ldr.w	r9, [pc, #84]	; 88ca0 <_vfiprintf_r+0xd24>
   88c4c:	3001      	adds	r0, #1
   88c4e:	e657      	b.n	88900 <_vfiprintf_r+0x984>
   88c50:	4684      	mov	ip, r0
   88c52:	f8df 9050 	ldr.w	r9, [pc, #80]	; 88ca4 <_vfiprintf_r+0xd28>
   88c56:	e543      	b.n	886e0 <_vfiprintf_r+0x764>
   88c58:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88c5c:	07db      	lsls	r3, r3, #31
   88c5e:	d407      	bmi.n	88c70 <_vfiprintf_r+0xcf4>
   88c60:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88c64:	059f      	lsls	r7, r3, #22
   88c66:	d403      	bmi.n	88c70 <_vfiprintf_r+0xcf4>
   88c68:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88c6c:	f001 fd94 	bl	8a798 <__retarget_lock_release_recursive>
   88c70:	f04f 33ff 	mov.w	r3, #4294967295
   88c74:	9303      	str	r3, [sp, #12]
   88c76:	f7ff bb27 	b.w	882c8 <_vfiprintf_r+0x34c>
   88c7a:	9a04      	ldr	r2, [sp, #16]
   88c7c:	f898 3001 	ldrb.w	r3, [r8, #1]
   88c80:	f852 0b04 	ldr.w	r0, [r2], #4
   88c84:	4688      	mov	r8, r1
   88c86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88c8a:	9000      	str	r0, [sp, #0]
   88c8c:	9204      	str	r2, [sp, #16]
   88c8e:	f7ff b9d7 	b.w	88040 <_vfiprintf_r+0xc4>
   88c92:	bf00      	nop
   88c94:	0008cc6c 	.word	0x0008cc6c
   88c98:	0008cc58 	.word	0x0008cc58
   88c9c:	0008cc80 	.word	0x0008cc80
   88ca0:	0008ccac 	.word	0x0008ccac
   88ca4:	0008ccbc 	.word	0x0008ccbc

00088ca8 <__sbprintf>:
   88ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   88caa:	460c      	mov	r4, r1
   88cac:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   88cb0:	f04f 0e00 	mov.w	lr, #0
   88cb4:	4615      	mov	r5, r2
   88cb6:	4606      	mov	r6, r0
   88cb8:	461f      	mov	r7, r3
   88cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88cbc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   88cc0:	89e2      	ldrh	r2, [r4, #14]
   88cc2:	8989      	ldrh	r1, [r1, #12]
   88cc4:	9319      	str	r3, [sp, #100]	; 0x64
   88cc6:	69e3      	ldr	r3, [r4, #28]
   88cc8:	f8ad 200e 	strh.w	r2, [sp, #14]
   88ccc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   88cce:	f021 0102 	bic.w	r1, r1, #2
   88cd2:	9307      	str	r3, [sp, #28]
   88cd4:	a816      	add	r0, sp, #88	; 0x58
   88cd6:	ab1a      	add	r3, sp, #104	; 0x68
   88cd8:	f8ad 100c 	strh.w	r1, [sp, #12]
   88cdc:	f8cd e018 	str.w	lr, [sp, #24]
   88ce0:	9209      	str	r2, [sp, #36]	; 0x24
   88ce2:	9300      	str	r3, [sp, #0]
   88ce4:	9304      	str	r3, [sp, #16]
   88ce6:	f8cd c008 	str.w	ip, [sp, #8]
   88cea:	f8cd c014 	str.w	ip, [sp, #20]
   88cee:	f001 fd4d 	bl	8a78c <__retarget_lock_init_recursive>
   88cf2:	462a      	mov	r2, r5
   88cf4:	463b      	mov	r3, r7
   88cf6:	4669      	mov	r1, sp
   88cf8:	4630      	mov	r0, r6
   88cfa:	f7ff f93f 	bl	87f7c <_vfiprintf_r>
   88cfe:	1e05      	subs	r5, r0, #0
   88d00:	db07      	blt.n	88d12 <__sbprintf+0x6a>
   88d02:	4630      	mov	r0, r6
   88d04:	4669      	mov	r1, sp
   88d06:	f001 f917 	bl	89f38 <_fflush_r>
   88d0a:	2800      	cmp	r0, #0
   88d0c:	bf18      	it	ne
   88d0e:	f04f 35ff 	movne.w	r5, #4294967295
   88d12:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   88d16:	065b      	lsls	r3, r3, #25
   88d18:	d503      	bpl.n	88d22 <__sbprintf+0x7a>
   88d1a:	89a3      	ldrh	r3, [r4, #12]
   88d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d20:	81a3      	strh	r3, [r4, #12]
   88d22:	9816      	ldr	r0, [sp, #88]	; 0x58
   88d24:	f001 fd34 	bl	8a790 <__retarget_lock_close_recursive>
   88d28:	4628      	mov	r0, r5
   88d2a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   88d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00088d30 <__swsetup_r>:
   88d30:	b538      	push	{r3, r4, r5, lr}
   88d32:	4b32      	ldr	r3, [pc, #200]	; (88dfc <__swsetup_r+0xcc>)
   88d34:	4605      	mov	r5, r0
   88d36:	6818      	ldr	r0, [r3, #0]
   88d38:	460c      	mov	r4, r1
   88d3a:	b110      	cbz	r0, 88d42 <__swsetup_r+0x12>
   88d3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88d3e:	2b00      	cmp	r3, #0
   88d40:	d03c      	beq.n	88dbc <__swsetup_r+0x8c>
   88d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d46:	0718      	lsls	r0, r3, #28
   88d48:	b29a      	uxth	r2, r3
   88d4a:	d50c      	bpl.n	88d66 <__swsetup_r+0x36>
   88d4c:	6921      	ldr	r1, [r4, #16]
   88d4e:	b1a9      	cbz	r1, 88d7c <__swsetup_r+0x4c>
   88d50:	f012 0001 	ands.w	r0, r2, #1
   88d54:	d022      	beq.n	88d9c <__swsetup_r+0x6c>
   88d56:	2500      	movs	r5, #0
   88d58:	6960      	ldr	r0, [r4, #20]
   88d5a:	60a5      	str	r5, [r4, #8]
   88d5c:	4240      	negs	r0, r0
   88d5e:	61a0      	str	r0, [r4, #24]
   88d60:	b311      	cbz	r1, 88da8 <__swsetup_r+0x78>
   88d62:	2000      	movs	r0, #0
   88d64:	bd38      	pop	{r3, r4, r5, pc}
   88d66:	06d1      	lsls	r1, r2, #27
   88d68:	d53f      	bpl.n	88dea <__swsetup_r+0xba>
   88d6a:	0752      	lsls	r2, r2, #29
   88d6c:	d429      	bmi.n	88dc2 <__swsetup_r+0x92>
   88d6e:	6921      	ldr	r1, [r4, #16]
   88d70:	f043 0308 	orr.w	r3, r3, #8
   88d74:	81a3      	strh	r3, [r4, #12]
   88d76:	b29a      	uxth	r2, r3
   88d78:	2900      	cmp	r1, #0
   88d7a:	d1e9      	bne.n	88d50 <__swsetup_r+0x20>
   88d7c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   88d80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   88d84:	d0e4      	beq.n	88d50 <__swsetup_r+0x20>
   88d86:	4628      	mov	r0, r5
   88d88:	4621      	mov	r1, r4
   88d8a:	f001 fd35 	bl	8a7f8 <__smakebuf_r>
   88d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d92:	6921      	ldr	r1, [r4, #16]
   88d94:	b29a      	uxth	r2, r3
   88d96:	f012 0001 	ands.w	r0, r2, #1
   88d9a:	d1dc      	bne.n	88d56 <__swsetup_r+0x26>
   88d9c:	0795      	lsls	r5, r2, #30
   88d9e:	bf58      	it	pl
   88da0:	6960      	ldrpl	r0, [r4, #20]
   88da2:	60a0      	str	r0, [r4, #8]
   88da4:	2900      	cmp	r1, #0
   88da6:	d1dc      	bne.n	88d62 <__swsetup_r+0x32>
   88da8:	0612      	lsls	r2, r2, #24
   88daa:	bf58      	it	pl
   88dac:	4608      	movpl	r0, r1
   88dae:	d5d9      	bpl.n	88d64 <__swsetup_r+0x34>
   88db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88db4:	f04f 30ff 	mov.w	r0, #4294967295
   88db8:	81a3      	strh	r3, [r4, #12]
   88dba:	bd38      	pop	{r3, r4, r5, pc}
   88dbc:	f001 f918 	bl	89ff0 <__sinit>
   88dc0:	e7bf      	b.n	88d42 <__swsetup_r+0x12>
   88dc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88dc4:	b151      	cbz	r1, 88ddc <__swsetup_r+0xac>
   88dc6:	f104 0240 	add.w	r2, r4, #64	; 0x40
   88dca:	4291      	cmp	r1, r2
   88dcc:	d004      	beq.n	88dd8 <__swsetup_r+0xa8>
   88dce:	4628      	mov	r0, r5
   88dd0:	f001 fa32 	bl	8a238 <_free_r>
   88dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88dd8:	2200      	movs	r2, #0
   88dda:	6322      	str	r2, [r4, #48]	; 0x30
   88ddc:	2200      	movs	r2, #0
   88dde:	6921      	ldr	r1, [r4, #16]
   88de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   88de4:	e9c4 1200 	strd	r1, r2, [r4]
   88de8:	e7c2      	b.n	88d70 <__swsetup_r+0x40>
   88dea:	2209      	movs	r2, #9
   88dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88df0:	602a      	str	r2, [r5, #0]
   88df2:	f04f 30ff 	mov.w	r0, #4294967295
   88df6:	81a3      	strh	r3, [r4, #12]
   88df8:	bd38      	pop	{r3, r4, r5, pc}
   88dfa:	bf00      	nop
   88dfc:	200009ac 	.word	0x200009ac

00088e00 <register_fini>:
   88e00:	4b02      	ldr	r3, [pc, #8]	; (88e0c <register_fini+0xc>)
   88e02:	b113      	cbz	r3, 88e0a <register_fini+0xa>
   88e04:	4802      	ldr	r0, [pc, #8]	; (88e10 <register_fini+0x10>)
   88e06:	f000 b805 	b.w	88e14 <atexit>
   88e0a:	4770      	bx	lr
   88e0c:	00000000 	.word	0x00000000
   88e10:	0008a065 	.word	0x0008a065

00088e14 <atexit>:
   88e14:	2300      	movs	r3, #0
   88e16:	4601      	mov	r1, r0
   88e18:	461a      	mov	r2, r3
   88e1a:	4618      	mov	r0, r3
   88e1c:	f002 bfca 	b.w	8bdb4 <__register_exitproc>

00088e20 <quorem>:
   88e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88e24:	6903      	ldr	r3, [r0, #16]
   88e26:	690d      	ldr	r5, [r1, #16]
   88e28:	b083      	sub	sp, #12
   88e2a:	42ab      	cmp	r3, r5
   88e2c:	f2c0 8084 	blt.w	88f38 <quorem+0x118>
   88e30:	3d01      	subs	r5, #1
   88e32:	f101 0614 	add.w	r6, r1, #20
   88e36:	f100 0914 	add.w	r9, r0, #20
   88e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   88e3e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   88e42:	3301      	adds	r3, #1
   88e44:	468e      	mov	lr, r1
   88e46:	00a9      	lsls	r1, r5, #2
   88e48:	9100      	str	r1, [sp, #0]
   88e4a:	429a      	cmp	r2, r3
   88e4c:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   88e50:	4682      	mov	sl, r0
   88e52:	fbb2 f7f3 	udiv	r7, r2, r3
   88e56:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   88e5a:	9101      	str	r1, [sp, #4]
   88e5c:	d337      	bcc.n	88ece <quorem+0xae>
   88e5e:	2200      	movs	r2, #0
   88e60:	46b4      	mov	ip, r6
   88e62:	4614      	mov	r4, r2
   88e64:	4648      	mov	r0, r9
   88e66:	f85c 3b04 	ldr.w	r3, [ip], #4
   88e6a:	6801      	ldr	r1, [r0, #0]
   88e6c:	fa1f fb83 	uxth.w	fp, r3
   88e70:	fb07 220b 	mla	r2, r7, fp, r2
   88e74:	0c1b      	lsrs	r3, r3, #16
   88e76:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   88e7a:	fb07 bb03 	mla	fp, r7, r3, fp
   88e7e:	b293      	uxth	r3, r2
   88e80:	1ae3      	subs	r3, r4, r3
   88e82:	b28a      	uxth	r2, r1
   88e84:	fa1f f48b 	uxth.w	r4, fp
   88e88:	4413      	add	r3, r2
   88e8a:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   88e8e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   88e92:	b29b      	uxth	r3, r3
   88e94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   88e98:	45e0      	cmp	r8, ip
   88e9a:	f840 3b04 	str.w	r3, [r0], #4
   88e9e:	ea4f 4424 	mov.w	r4, r4, asr #16
   88ea2:	ea4f 421b 	mov.w	r2, fp, lsr #16
   88ea6:	d2de      	bcs.n	88e66 <quorem+0x46>
   88ea8:	9b00      	ldr	r3, [sp, #0]
   88eaa:	f859 3003 	ldr.w	r3, [r9, r3]
   88eae:	b973      	cbnz	r3, 88ece <quorem+0xae>
   88eb0:	9b01      	ldr	r3, [sp, #4]
   88eb2:	3b04      	subs	r3, #4
   88eb4:	4599      	cmp	r9, r3
   88eb6:	d304      	bcc.n	88ec2 <quorem+0xa2>
   88eb8:	e007      	b.n	88eca <quorem+0xaa>
   88eba:	4599      	cmp	r9, r3
   88ebc:	f105 35ff 	add.w	r5, r5, #4294967295
   88ec0:	d203      	bcs.n	88eca <quorem+0xaa>
   88ec2:	f853 2904 	ldr.w	r2, [r3], #-4
   88ec6:	2a00      	cmp	r2, #0
   88ec8:	d0f7      	beq.n	88eba <quorem+0x9a>
   88eca:	f8ca 5010 	str.w	r5, [sl, #16]
   88ece:	4671      	mov	r1, lr
   88ed0:	4650      	mov	r0, sl
   88ed2:	f002 fab1 	bl	8b438 <__mcmp>
   88ed6:	2800      	cmp	r0, #0
   88ed8:	db2a      	blt.n	88f30 <quorem+0x110>
   88eda:	4648      	mov	r0, r9
   88edc:	2300      	movs	r3, #0
   88ede:	3701      	adds	r7, #1
   88ee0:	f856 1b04 	ldr.w	r1, [r6], #4
   88ee4:	6804      	ldr	r4, [r0, #0]
   88ee6:	b28a      	uxth	r2, r1
   88ee8:	1a9a      	subs	r2, r3, r2
   88eea:	0c0b      	lsrs	r3, r1, #16
   88eec:	b2a1      	uxth	r1, r4
   88eee:	440a      	add	r2, r1
   88ef0:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   88ef4:	eb03 4322 	add.w	r3, r3, r2, asr #16
   88ef8:	b292      	uxth	r2, r2
   88efa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   88efe:	45b0      	cmp	r8, r6
   88f00:	f840 2b04 	str.w	r2, [r0], #4
   88f04:	ea4f 4323 	mov.w	r3, r3, asr #16
   88f08:	d2ea      	bcs.n	88ee0 <quorem+0xc0>
   88f0a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   88f0e:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   88f12:	b96a      	cbnz	r2, 88f30 <quorem+0x110>
   88f14:	3b04      	subs	r3, #4
   88f16:	4599      	cmp	r9, r3
   88f18:	d304      	bcc.n	88f24 <quorem+0x104>
   88f1a:	e007      	b.n	88f2c <quorem+0x10c>
   88f1c:	4599      	cmp	r9, r3
   88f1e:	f105 35ff 	add.w	r5, r5, #4294967295
   88f22:	d203      	bcs.n	88f2c <quorem+0x10c>
   88f24:	f853 2904 	ldr.w	r2, [r3], #-4
   88f28:	2a00      	cmp	r2, #0
   88f2a:	d0f7      	beq.n	88f1c <quorem+0xfc>
   88f2c:	f8ca 5010 	str.w	r5, [sl, #16]
   88f30:	4638      	mov	r0, r7
   88f32:	b003      	add	sp, #12
   88f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f38:	2000      	movs	r0, #0
   88f3a:	b003      	add	sp, #12
   88f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088f40 <_dtoa_r>:
   88f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88f44:	4616      	mov	r6, r2
   88f46:	461f      	mov	r7, r3
   88f48:	6c01      	ldr	r1, [r0, #64]	; 0x40
   88f4a:	b09b      	sub	sp, #108	; 0x6c
   88f4c:	4604      	mov	r4, r0
   88f4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   88f52:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   88f54:	b141      	cbz	r1, 88f68 <_dtoa_r+0x28>
   88f56:	2301      	movs	r3, #1
   88f58:	6c42      	ldr	r2, [r0, #68]	; 0x44
   88f5a:	4093      	lsls	r3, r2
   88f5c:	e9c1 2301 	strd	r2, r3, [r1, #4]
   88f60:	f002 f83c 	bl	8afdc <_Bfree>
   88f64:	2300      	movs	r3, #0
   88f66:	6423      	str	r3, [r4, #64]	; 0x40
   88f68:	f1b7 0900 	subs.w	r9, r7, #0
   88f6c:	bfb4      	ite	lt
   88f6e:	2301      	movlt	r3, #1
   88f70:	2300      	movge	r3, #0
   88f72:	602b      	str	r3, [r5, #0]
   88f74:	4b76      	ldr	r3, [pc, #472]	; (89150 <_dtoa_r+0x210>)
   88f76:	bfbc      	itt	lt
   88f78:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   88f7c:	f8cd 9014 	strlt.w	r9, [sp, #20]
   88f80:	ea33 0309 	bics.w	r3, r3, r9
   88f84:	f000 80ab 	beq.w	890de <_dtoa_r+0x19e>
   88f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88f8c:	4610      	mov	r0, r2
   88f8e:	4619      	mov	r1, r3
   88f90:	2200      	movs	r2, #0
   88f92:	2300      	movs	r3, #0
   88f94:	e9cd 0108 	strd	r0, r1, [sp, #32]
   88f98:	f003 fcf8 	bl	8c98c <__aeabi_dcmpeq>
   88f9c:	4680      	mov	r8, r0
   88f9e:	b170      	cbz	r0, 88fbe <_dtoa_r+0x7e>
   88fa0:	2301      	movs	r3, #1
   88fa2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88fa4:	6013      	str	r3, [r2, #0]
   88fa6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88fa8:	2b00      	cmp	r3, #0
   88faa:	f000 82c2 	beq.w	89532 <_dtoa_r+0x5f2>
   88fae:	4869      	ldr	r0, [pc, #420]	; (89154 <_dtoa_r+0x214>)
   88fb0:	6018      	str	r0, [r3, #0]
   88fb2:	1e43      	subs	r3, r0, #1
   88fb4:	9303      	str	r3, [sp, #12]
   88fb6:	9803      	ldr	r0, [sp, #12]
   88fb8:	b01b      	add	sp, #108	; 0x6c
   88fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88fbe:	aa18      	add	r2, sp, #96	; 0x60
   88fc0:	ab19      	add	r3, sp, #100	; 0x64
   88fc2:	e9cd 3200 	strd	r3, r2, [sp]
   88fc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88fca:	4620      	mov	r0, r4
   88fcc:	f002 fafa 	bl	8b5c4 <__d2b>
   88fd0:	ea5f 5519 	movs.w	r5, r9, lsr #20
   88fd4:	4682      	mov	sl, r0
   88fd6:	f040 8098 	bne.w	8910a <_dtoa_r+0x1ca>
   88fda:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   88fde:	4445      	add	r5, r8
   88fe0:	f205 4032 	addw	r0, r5, #1074	; 0x432
   88fe4:	2820      	cmp	r0, #32
   88fe6:	f340 8390 	ble.w	8970a <_dtoa_r+0x7ca>
   88fea:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   88fee:	f205 4012 	addw	r0, r5, #1042	; 0x412
   88ff2:	fa09 f903 	lsl.w	r9, r9, r3
   88ff6:	fa26 f000 	lsr.w	r0, r6, r0
   88ffa:	ea49 0000 	orr.w	r0, r9, r0
   88ffe:	f003 f9e3 	bl	8c3c8 <__aeabi_ui2d>
   89002:	2201      	movs	r2, #1
   89004:	3d01      	subs	r5, #1
   89006:	920f      	str	r2, [sp, #60]	; 0x3c
   89008:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8900c:	2200      	movs	r2, #0
   8900e:	4b52      	ldr	r3, [pc, #328]	; (89158 <_dtoa_r+0x218>)
   89010:	f003 f89c 	bl	8c14c <__aeabi_dsub>
   89014:	a348      	add	r3, pc, #288	; (adr r3, 89138 <_dtoa_r+0x1f8>)
   89016:	e9d3 2300 	ldrd	r2, r3, [r3]
   8901a:	f003 fa4f 	bl	8c4bc <__aeabi_dmul>
   8901e:	a348      	add	r3, pc, #288	; (adr r3, 89140 <_dtoa_r+0x200>)
   89020:	e9d3 2300 	ldrd	r2, r3, [r3]
   89024:	f003 f894 	bl	8c150 <__adddf3>
   89028:	4606      	mov	r6, r0
   8902a:	4628      	mov	r0, r5
   8902c:	460f      	mov	r7, r1
   8902e:	f003 f9db 	bl	8c3e8 <__aeabi_i2d>
   89032:	a345      	add	r3, pc, #276	; (adr r3, 89148 <_dtoa_r+0x208>)
   89034:	e9d3 2300 	ldrd	r2, r3, [r3]
   89038:	f003 fa40 	bl	8c4bc <__aeabi_dmul>
   8903c:	4602      	mov	r2, r0
   8903e:	460b      	mov	r3, r1
   89040:	4630      	mov	r0, r6
   89042:	4639      	mov	r1, r7
   89044:	f003 f884 	bl	8c150 <__adddf3>
   89048:	4606      	mov	r6, r0
   8904a:	460f      	mov	r7, r1
   8904c:	f003 fce6 	bl	8ca1c <__aeabi_d2iz>
   89050:	2200      	movs	r2, #0
   89052:	4683      	mov	fp, r0
   89054:	2300      	movs	r3, #0
   89056:	4630      	mov	r0, r6
   89058:	4639      	mov	r1, r7
   8905a:	f003 fca1 	bl	8c9a0 <__aeabi_dcmplt>
   8905e:	2800      	cmp	r0, #0
   89060:	f040 825a 	bne.w	89518 <_dtoa_r+0x5d8>
   89064:	f1bb 0f16 	cmp.w	fp, #22
   89068:	f200 8248 	bhi.w	894fc <_dtoa_r+0x5bc>
   8906c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89070:	4b3a      	ldr	r3, [pc, #232]	; (8915c <_dtoa_r+0x21c>)
   89072:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89076:	e9d3 2300 	ldrd	r2, r3, [r3]
   8907a:	f003 fc91 	bl	8c9a0 <__aeabi_dcmplt>
   8907e:	2800      	cmp	r0, #0
   89080:	d072      	beq.n	89168 <_dtoa_r+0x228>
   89082:	2300      	movs	r3, #0
   89084:	eba8 0505 	sub.w	r5, r8, r5
   89088:	930e      	str	r3, [sp, #56]	; 0x38
   8908a:	1e6b      	subs	r3, r5, #1
   8908c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89090:	9306      	str	r3, [sp, #24]
   89092:	f100 823b 	bmi.w	8950c <_dtoa_r+0x5cc>
   89096:	2300      	movs	r3, #0
   89098:	930b      	str	r3, [sp, #44]	; 0x2c
   8909a:	f1bb 0f00 	cmp.w	fp, #0
   8909e:	da6b      	bge.n	89178 <_dtoa_r+0x238>
   890a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   890a2:	f8cd b01c 	str.w	fp, [sp, #28]
   890a6:	eba3 030b 	sub.w	r3, r3, fp
   890aa:	930b      	str	r3, [sp, #44]	; 0x2c
   890ac:	f1cb 0300 	rsb	r3, fp, #0
   890b0:	930d      	str	r3, [sp, #52]	; 0x34
   890b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   890b4:	f04f 0b00 	mov.w	fp, #0
   890b8:	2b09      	cmp	r3, #9
   890ba:	d866      	bhi.n	8918a <_dtoa_r+0x24a>
   890bc:	2b05      	cmp	r3, #5
   890be:	f340 8322 	ble.w	89706 <_dtoa_r+0x7c6>
   890c2:	2500      	movs	r5, #0
   890c4:	3b04      	subs	r3, #4
   890c6:	9324      	str	r3, [sp, #144]	; 0x90
   890c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   890ca:	3b02      	subs	r3, #2
   890cc:	2b03      	cmp	r3, #3
   890ce:	f200 866e 	bhi.w	89dae <_dtoa_r+0xe6e>
   890d2:	e8df f013 	tbh	[pc, r3, lsl #1]
   890d6:	043b      	.short	0x043b
   890d8:	042f0438 	.word	0x042f0438
   890dc:	0412      	.short	0x0412
   890de:	f242 730f 	movw	r3, #9999	; 0x270f
   890e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   890e4:	f3c9 0913 	ubfx	r9, r9, #0, #20
   890e8:	6013      	str	r3, [r2, #0]
   890ea:	ea59 0306 	orrs.w	r3, r9, r6
   890ee:	d11c      	bne.n	8912a <_dtoa_r+0x1ea>
   890f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   890f2:	2b00      	cmp	r3, #0
   890f4:	f000 8657 	beq.w	89da6 <_dtoa_r+0xe66>
   890f8:	4b19      	ldr	r3, [pc, #100]	; (89160 <_dtoa_r+0x220>)
   890fa:	9303      	str	r3, [sp, #12]
   890fc:	3308      	adds	r3, #8
   890fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89100:	9803      	ldr	r0, [sp, #12]
   89102:	6013      	str	r3, [r2, #0]
   89104:	b01b      	add	sp, #108	; 0x6c
   89106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8910a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   8910e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89112:	4608      	mov	r0, r1
   89114:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89118:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   8911c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89120:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   89124:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89128:	e770      	b.n	8900c <_dtoa_r+0xcc>
   8912a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8912c:	2b00      	cmp	r3, #0
   8912e:	f040 83c8 	bne.w	898c2 <_dtoa_r+0x982>
   89132:	4b0c      	ldr	r3, [pc, #48]	; (89164 <_dtoa_r+0x224>)
   89134:	9303      	str	r3, [sp, #12]
   89136:	e73e      	b.n	88fb6 <_dtoa_r+0x76>
   89138:	636f4361 	.word	0x636f4361
   8913c:	3fd287a7 	.word	0x3fd287a7
   89140:	8b60c8b3 	.word	0x8b60c8b3
   89144:	3fc68a28 	.word	0x3fc68a28
   89148:	509f79fb 	.word	0x509f79fb
   8914c:	3fd34413 	.word	0x3fd34413
   89150:	7ff00000 	.word	0x7ff00000
   89154:	0008cc89 	.word	0x0008cc89
   89158:	3ff80000 	.word	0x3ff80000
   8915c:	0008ce28 	.word	0x0008ce28
   89160:	0008ccd0 	.word	0x0008ccd0
   89164:	0008cccc 	.word	0x0008cccc
   89168:	eba8 0505 	sub.w	r5, r8, r5
   8916c:	1e6b      	subs	r3, r5, #1
   8916e:	9306      	str	r3, [sp, #24]
   89170:	f100 84a9 	bmi.w	89ac6 <_dtoa_r+0xb86>
   89174:	900e      	str	r0, [sp, #56]	; 0x38
   89176:	900b      	str	r0, [sp, #44]	; 0x2c
   89178:	9b06      	ldr	r3, [sp, #24]
   8917a:	445b      	add	r3, fp
   8917c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89180:	2300      	movs	r3, #0
   89182:	930d      	str	r3, [sp, #52]	; 0x34
   89184:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89186:	2b09      	cmp	r3, #9
   89188:	d998      	bls.n	890bc <_dtoa_r+0x17c>
   8918a:	2300      	movs	r3, #0
   8918c:	2501      	movs	r5, #1
   8918e:	9324      	str	r3, [sp, #144]	; 0x90
   89190:	9325      	str	r3, [sp, #148]	; 0x94
   89192:	f04f 33ff 	mov.w	r3, #4294967295
   89196:	950c      	str	r5, [sp, #48]	; 0x30
   89198:	930a      	str	r3, [sp, #40]	; 0x28
   8919a:	2100      	movs	r1, #0
   8919c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8919e:	6461      	str	r1, [r4, #68]	; 0x44
   891a0:	9312      	str	r3, [sp, #72]	; 0x48
   891a2:	4620      	mov	r0, r4
   891a4:	f001 fef4 	bl	8af90 <_Balloc>
   891a8:	9003      	str	r0, [sp, #12]
   891aa:	2800      	cmp	r0, #0
   891ac:	f000 8607 	beq.w	89dbe <_dtoa_r+0xe7e>
   891b0:	9b03      	ldr	r3, [sp, #12]
   891b2:	6423      	str	r3, [r4, #64]	; 0x40
   891b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   891b6:	2b0e      	cmp	r3, #14
   891b8:	f200 80e9 	bhi.w	8938e <_dtoa_r+0x44e>
   891bc:	2d00      	cmp	r5, #0
   891be:	f000 80e6 	beq.w	8938e <_dtoa_r+0x44e>
   891c2:	9907      	ldr	r1, [sp, #28]
   891c4:	2900      	cmp	r1, #0
   891c6:	f340 8452 	ble.w	89a6e <_dtoa_r+0xb2e>
   891ca:	4bb5      	ldr	r3, [pc, #724]	; (894a0 <_dtoa_r+0x560>)
   891cc:	f001 020f 	and.w	r2, r1, #15
   891d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   891d4:	05c8      	lsls	r0, r1, #23
   891d6:	ea4f 1521 	mov.w	r5, r1, asr #4
   891da:	e9d3 6700 	ldrd	r6, r7, [r3]
   891de:	f140 83ee 	bpl.w	899be <_dtoa_r+0xa7e>
   891e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   891e6:	4baf      	ldr	r3, [pc, #700]	; (894a4 <_dtoa_r+0x564>)
   891e8:	f04f 0903 	mov.w	r9, #3
   891ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   891f0:	f003 fa8e 	bl	8c710 <__aeabi_ddiv>
   891f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   891f8:	f005 050f 	and.w	r5, r5, #15
   891fc:	b18d      	cbz	r5, 89222 <_dtoa_r+0x2e2>
   891fe:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 894a4 <_dtoa_r+0x564>
   89202:	07e9      	lsls	r1, r5, #31
   89204:	d509      	bpl.n	8921a <_dtoa_r+0x2da>
   89206:	e9d8 2300 	ldrd	r2, r3, [r8]
   8920a:	4630      	mov	r0, r6
   8920c:	4639      	mov	r1, r7
   8920e:	f003 f955 	bl	8c4bc <__aeabi_dmul>
   89212:	4606      	mov	r6, r0
   89214:	460f      	mov	r7, r1
   89216:	f109 0901 	add.w	r9, r9, #1
   8921a:	106d      	asrs	r5, r5, #1
   8921c:	f108 0808 	add.w	r8, r8, #8
   89220:	d1ef      	bne.n	89202 <_dtoa_r+0x2c2>
   89222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89226:	4632      	mov	r2, r6
   89228:	463b      	mov	r3, r7
   8922a:	f003 fa71 	bl	8c710 <__aeabi_ddiv>
   8922e:	4606      	mov	r6, r0
   89230:	460f      	mov	r7, r1
   89232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89234:	b143      	cbz	r3, 89248 <_dtoa_r+0x308>
   89236:	2200      	movs	r2, #0
   89238:	4630      	mov	r0, r6
   8923a:	4639      	mov	r1, r7
   8923c:	4b9a      	ldr	r3, [pc, #616]	; (894a8 <_dtoa_r+0x568>)
   8923e:	f003 fbaf 	bl	8c9a0 <__aeabi_dcmplt>
   89242:	2800      	cmp	r0, #0
   89244:	f040 853b 	bne.w	89cbe <_dtoa_r+0xd7e>
   89248:	4648      	mov	r0, r9
   8924a:	f003 f8cd 	bl	8c3e8 <__aeabi_i2d>
   8924e:	4632      	mov	r2, r6
   89250:	463b      	mov	r3, r7
   89252:	f003 f933 	bl	8c4bc <__aeabi_dmul>
   89256:	4b95      	ldr	r3, [pc, #596]	; (894ac <_dtoa_r+0x56c>)
   89258:	2200      	movs	r2, #0
   8925a:	f002 ff79 	bl	8c150 <__adddf3>
   8925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89260:	4680      	mov	r8, r0
   89262:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89266:	2b00      	cmp	r3, #0
   89268:	f000 83ce 	beq.w	89a08 <_dtoa_r+0xac8>
   8926c:	9b07      	ldr	r3, [sp, #28]
   8926e:	9313      	str	r3, [sp, #76]	; 0x4c
   89270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89272:	9310      	str	r3, [sp, #64]	; 0x40
   89274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89276:	2b00      	cmp	r3, #0
   89278:	f000 84b7 	beq.w	89bea <_dtoa_r+0xcaa>
   8927c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8927e:	4b88      	ldr	r3, [pc, #544]	; (894a0 <_dtoa_r+0x560>)
   89280:	2000      	movs	r0, #0
   89282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89286:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8928a:	4989      	ldr	r1, [pc, #548]	; (894b0 <_dtoa_r+0x570>)
   8928c:	f003 fa40 	bl	8c710 <__aeabi_ddiv>
   89290:	4642      	mov	r2, r8
   89292:	464b      	mov	r3, r9
   89294:	f002 ff5a 	bl	8c14c <__aeabi_dsub>
   89298:	4602      	mov	r2, r0
   8929a:	460b      	mov	r3, r1
   8929c:	4630      	mov	r0, r6
   8929e:	4639      	mov	r1, r7
   892a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   892a4:	f003 fbba 	bl	8ca1c <__aeabi_d2iz>
   892a8:	4680      	mov	r8, r0
   892aa:	f003 f89d 	bl	8c3e8 <__aeabi_i2d>
   892ae:	4602      	mov	r2, r0
   892b0:	460b      	mov	r3, r1
   892b2:	4630      	mov	r0, r6
   892b4:	4639      	mov	r1, r7
   892b6:	f002 ff49 	bl	8c14c <__aeabi_dsub>
   892ba:	9d03      	ldr	r5, [sp, #12]
   892bc:	f108 0330 	add.w	r3, r8, #48	; 0x30
   892c0:	4606      	mov	r6, r0
   892c2:	460f      	mov	r7, r1
   892c4:	4602      	mov	r2, r0
   892c6:	f805 3b01 	strb.w	r3, [r5], #1
   892ca:	460b      	mov	r3, r1
   892cc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   892d0:	f003 fb84 	bl	8c9dc <__aeabi_dcmpgt>
   892d4:	2800      	cmp	r0, #0
   892d6:	f040 853b 	bne.w	89d50 <_dtoa_r+0xe10>
   892da:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   892de:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   892e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   892e6:	f04f 0900 	mov.w	r9, #0
   892ea:	9410      	str	r4, [sp, #64]	; 0x40
   892ec:	e02a      	b.n	89344 <_dtoa_r+0x404>
   892ee:	f109 0901 	add.w	r9, r9, #1
   892f2:	45c1      	cmp	r9, r8
   892f4:	da48      	bge.n	89388 <_dtoa_r+0x448>
   892f6:	4650      	mov	r0, sl
   892f8:	4659      	mov	r1, fp
   892fa:	2200      	movs	r2, #0
   892fc:	4b6d      	ldr	r3, [pc, #436]	; (894b4 <_dtoa_r+0x574>)
   892fe:	f003 f8dd 	bl	8c4bc <__aeabi_dmul>
   89302:	2200      	movs	r2, #0
   89304:	4b6b      	ldr	r3, [pc, #428]	; (894b4 <_dtoa_r+0x574>)
   89306:	4682      	mov	sl, r0
   89308:	468b      	mov	fp, r1
   8930a:	4630      	mov	r0, r6
   8930c:	4639      	mov	r1, r7
   8930e:	f003 f8d5 	bl	8c4bc <__aeabi_dmul>
   89312:	460f      	mov	r7, r1
   89314:	4606      	mov	r6, r0
   89316:	f003 fb81 	bl	8ca1c <__aeabi_d2iz>
   8931a:	4604      	mov	r4, r0
   8931c:	f003 f864 	bl	8c3e8 <__aeabi_i2d>
   89320:	4602      	mov	r2, r0
   89322:	460b      	mov	r3, r1
   89324:	4630      	mov	r0, r6
   89326:	4639      	mov	r1, r7
   89328:	f002 ff10 	bl	8c14c <__aeabi_dsub>
   8932c:	3430      	adds	r4, #48	; 0x30
   8932e:	4652      	mov	r2, sl
   89330:	465b      	mov	r3, fp
   89332:	f805 4b01 	strb.w	r4, [r5], #1
   89336:	4606      	mov	r6, r0
   89338:	460f      	mov	r7, r1
   8933a:	f003 fb31 	bl	8c9a0 <__aeabi_dcmplt>
   8933e:	2800      	cmp	r0, #0
   89340:	f040 8503 	bne.w	89d4a <_dtoa_r+0xe0a>
   89344:	4632      	mov	r2, r6
   89346:	463b      	mov	r3, r7
   89348:	2000      	movs	r0, #0
   8934a:	4957      	ldr	r1, [pc, #348]	; (894a8 <_dtoa_r+0x568>)
   8934c:	f002 fefe 	bl	8c14c <__aeabi_dsub>
   89350:	4652      	mov	r2, sl
   89352:	465b      	mov	r3, fp
   89354:	f003 fb24 	bl	8c9a0 <__aeabi_dcmplt>
   89358:	2800      	cmp	r0, #0
   8935a:	d0c8      	beq.n	892ee <_dtoa_r+0x3ae>
   8935c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8935e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89362:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89364:	9a03      	ldr	r2, [sp, #12]
   89366:	9307      	str	r3, [sp, #28]
   89368:	e002      	b.n	89370 <_dtoa_r+0x430>
   8936a:	4295      	cmp	r5, r2
   8936c:	f000 84d2 	beq.w	89d14 <_dtoa_r+0xdd4>
   89370:	46a9      	mov	r9, r5
   89372:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   89376:	2b39      	cmp	r3, #57	; 0x39
   89378:	d0f7      	beq.n	8936a <_dtoa_r+0x42a>
   8937a:	3301      	adds	r3, #1
   8937c:	b2db      	uxtb	r3, r3
   8937e:	702b      	strb	r3, [r5, #0]
   89380:	9b07      	ldr	r3, [sp, #28]
   89382:	3301      	adds	r3, #1
   89384:	9307      	str	r3, [sp, #28]
   89386:	e1a0      	b.n	896ca <_dtoa_r+0x78a>
   89388:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8938a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8938e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89390:	2b00      	cmp	r3, #0
   89392:	f2c0 8093 	blt.w	894bc <_dtoa_r+0x57c>
   89396:	9a07      	ldr	r2, [sp, #28]
   89398:	2a0e      	cmp	r2, #14
   8939a:	f300 808f 	bgt.w	894bc <_dtoa_r+0x57c>
   8939e:	4b40      	ldr	r3, [pc, #256]	; (894a0 <_dtoa_r+0x560>)
   893a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   893a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   893a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   893ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   893ae:	2b00      	cmp	r3, #0
   893b0:	da1a      	bge.n	893e8 <_dtoa_r+0x4a8>
   893b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   893b4:	2b00      	cmp	r3, #0
   893b6:	dc17      	bgt.n	893e8 <_dtoa_r+0x4a8>
   893b8:	f040 833f 	bne.w	89a3a <_dtoa_r+0xafa>
   893bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   893c0:	2200      	movs	r2, #0
   893c2:	4b3d      	ldr	r3, [pc, #244]	; (894b8 <_dtoa_r+0x578>)
   893c4:	f003 f87a 	bl	8c4bc <__aeabi_dmul>
   893c8:	4602      	mov	r2, r0
   893ca:	460b      	mov	r3, r1
   893cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   893d0:	f003 faf0 	bl	8c9b4 <__aeabi_dcmple>
   893d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   893d8:	4645      	mov	r5, r8
   893da:	2800      	cmp	r0, #0
   893dc:	f000 82cd 	beq.w	8997a <_dtoa_r+0xa3a>
   893e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   893e2:	9f03      	ldr	r7, [sp, #12]
   893e4:	43de      	mvns	r6, r3
   893e6:	e2d0      	b.n	8998a <_dtoa_r+0xa4a>
   893e8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   893ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   893f0:	4632      	mov	r2, r6
   893f2:	463b      	mov	r3, r7
   893f4:	f003 f98c 	bl	8c710 <__aeabi_ddiv>
   893f8:	f003 fb10 	bl	8ca1c <__aeabi_d2iz>
   893fc:	4680      	mov	r8, r0
   893fe:	f002 fff3 	bl	8c3e8 <__aeabi_i2d>
   89402:	4632      	mov	r2, r6
   89404:	463b      	mov	r3, r7
   89406:	f003 f859 	bl	8c4bc <__aeabi_dmul>
   8940a:	460b      	mov	r3, r1
   8940c:	4602      	mov	r2, r0
   8940e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89412:	f002 fe9b 	bl	8c14c <__aeabi_dsub>
   89416:	9d03      	ldr	r5, [sp, #12]
   89418:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8941c:	f805 3b01 	strb.w	r3, [r5], #1
   89420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89422:	2b01      	cmp	r3, #1
   89424:	f000 837f 	beq.w	89b26 <_dtoa_r+0xbe6>
   89428:	f8cd a018 	str.w	sl, [sp, #24]
   8942c:	f04f 0901 	mov.w	r9, #1
   89430:	469b      	mov	fp, r3
   89432:	46aa      	mov	sl, r5
   89434:	9408      	str	r4, [sp, #32]
   89436:	e01d      	b.n	89474 <_dtoa_r+0x534>
   89438:	4632      	mov	r2, r6
   8943a:	463b      	mov	r3, r7
   8943c:	4620      	mov	r0, r4
   8943e:	4629      	mov	r1, r5
   89440:	f003 f966 	bl	8c710 <__aeabi_ddiv>
   89444:	f003 faea 	bl	8ca1c <__aeabi_d2iz>
   89448:	4680      	mov	r8, r0
   8944a:	f002 ffcd 	bl	8c3e8 <__aeabi_i2d>
   8944e:	4632      	mov	r2, r6
   89450:	463b      	mov	r3, r7
   89452:	f003 f833 	bl	8c4bc <__aeabi_dmul>
   89456:	f109 0901 	add.w	r9, r9, #1
   8945a:	460b      	mov	r3, r1
   8945c:	4602      	mov	r2, r0
   8945e:	4629      	mov	r1, r5
   89460:	4620      	mov	r0, r4
   89462:	f002 fe73 	bl	8c14c <__aeabi_dsub>
   89466:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8946a:	45cb      	cmp	fp, r9
   8946c:	f80a 3b01 	strb.w	r3, [sl], #1
   89470:	f000 8355 	beq.w	89b1e <_dtoa_r+0xbde>
   89474:	2200      	movs	r2, #0
   89476:	4b0f      	ldr	r3, [pc, #60]	; (894b4 <_dtoa_r+0x574>)
   89478:	f003 f820 	bl	8c4bc <__aeabi_dmul>
   8947c:	2200      	movs	r2, #0
   8947e:	2300      	movs	r3, #0
   89480:	4604      	mov	r4, r0
   89482:	460d      	mov	r5, r1
   89484:	f003 fa82 	bl	8c98c <__aeabi_dcmpeq>
   89488:	2800      	cmp	r0, #0
   8948a:	d0d5      	beq.n	89438 <_dtoa_r+0x4f8>
   8948c:	4655      	mov	r5, sl
   8948e:	9c08      	ldr	r4, [sp, #32]
   89490:	f8dd a018 	ldr.w	sl, [sp, #24]
   89494:	9b07      	ldr	r3, [sp, #28]
   89496:	46a9      	mov	r9, r5
   89498:	3301      	adds	r3, #1
   8949a:	9307      	str	r3, [sp, #28]
   8949c:	e115      	b.n	896ca <_dtoa_r+0x78a>
   8949e:	bf00      	nop
   894a0:	0008ce28 	.word	0x0008ce28
   894a4:	0008ce00 	.word	0x0008ce00
   894a8:	3ff00000 	.word	0x3ff00000
   894ac:	401c0000 	.word	0x401c0000
   894b0:	3fe00000 	.word	0x3fe00000
   894b4:	40240000 	.word	0x40240000
   894b8:	40140000 	.word	0x40140000
   894bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   894be:	2a00      	cmp	r2, #0
   894c0:	d03d      	beq.n	8953e <_dtoa_r+0x5fe>
   894c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   894c4:	2a01      	cmp	r2, #1
   894c6:	f340 82bc 	ble.w	89a42 <_dtoa_r+0xb02>
   894ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   894cc:	1e5f      	subs	r7, r3, #1
   894ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   894d0:	42bb      	cmp	r3, r7
   894d2:	f2c0 826e 	blt.w	899b2 <_dtoa_r+0xa72>
   894d6:	1bdf      	subs	r7, r3, r7
   894d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   894da:	2b00      	cmp	r3, #0
   894dc:	f2c0 8354 	blt.w	89b88 <_dtoa_r+0xc48>
   894e0:	9a06      	ldr	r2, [sp, #24]
   894e2:	4611      	mov	r1, r2
   894e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   894e6:	4419      	add	r1, r3
   894e8:	4616      	mov	r6, r2
   894ea:	441a      	add	r2, r3
   894ec:	9106      	str	r1, [sp, #24]
   894ee:	920b      	str	r2, [sp, #44]	; 0x2c
   894f0:	2101      	movs	r1, #1
   894f2:	4620      	mov	r0, r4
   894f4:	f001 fe1a 	bl	8b12c <__i2b>
   894f8:	4605      	mov	r5, r0
   894fa:	e023      	b.n	89544 <_dtoa_r+0x604>
   894fc:	2301      	movs	r3, #1
   894fe:	eba8 0505 	sub.w	r5, r8, r5
   89502:	930e      	str	r3, [sp, #56]	; 0x38
   89504:	1e6b      	subs	r3, r5, #1
   89506:	9306      	str	r3, [sp, #24]
   89508:	f57f adc5 	bpl.w	89096 <_dtoa_r+0x156>
   8950c:	f1c5 0301 	rsb	r3, r5, #1
   89510:	930b      	str	r3, [sp, #44]	; 0x2c
   89512:	2300      	movs	r3, #0
   89514:	9306      	str	r3, [sp, #24]
   89516:	e5c0      	b.n	8909a <_dtoa_r+0x15a>
   89518:	4658      	mov	r0, fp
   8951a:	f002 ff65 	bl	8c3e8 <__aeabi_i2d>
   8951e:	4632      	mov	r2, r6
   89520:	463b      	mov	r3, r7
   89522:	f003 fa33 	bl	8c98c <__aeabi_dcmpeq>
   89526:	2800      	cmp	r0, #0
   89528:	f47f ad9c 	bne.w	89064 <_dtoa_r+0x124>
   8952c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89530:	e598      	b.n	89064 <_dtoa_r+0x124>
   89532:	4bc7      	ldr	r3, [pc, #796]	; (89850 <_dtoa_r+0x910>)
   89534:	9303      	str	r3, [sp, #12]
   89536:	9803      	ldr	r0, [sp, #12]
   89538:	b01b      	add	sp, #108	; 0x6c
   8953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8953e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89540:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   89544:	2e00      	cmp	r6, #0
   89546:	dd0c      	ble.n	89562 <_dtoa_r+0x622>
   89548:	9a06      	ldr	r2, [sp, #24]
   8954a:	2a00      	cmp	r2, #0
   8954c:	dd09      	ble.n	89562 <_dtoa_r+0x622>
   8954e:	42b2      	cmp	r2, r6
   89550:	4613      	mov	r3, r2
   89552:	bfa8      	it	ge
   89554:	4633      	movge	r3, r6
   89556:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89558:	1af6      	subs	r6, r6, r3
   8955a:	1ac9      	subs	r1, r1, r3
   8955c:	1ad3      	subs	r3, r2, r3
   8955e:	910b      	str	r1, [sp, #44]	; 0x2c
   89560:	9306      	str	r3, [sp, #24]
   89562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89564:	b1d3      	cbz	r3, 8959c <_dtoa_r+0x65c>
   89566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89568:	2b00      	cmp	r3, #0
   8956a:	f000 81a3 	beq.w	898b4 <_dtoa_r+0x974>
   8956e:	2f00      	cmp	r7, #0
   89570:	dd10      	ble.n	89594 <_dtoa_r+0x654>
   89572:	4629      	mov	r1, r5
   89574:	463a      	mov	r2, r7
   89576:	4620      	mov	r0, r4
   89578:	f001 fe9e 	bl	8b2b8 <__pow5mult>
   8957c:	4652      	mov	r2, sl
   8957e:	4601      	mov	r1, r0
   89580:	4605      	mov	r5, r0
   89582:	4620      	mov	r0, r4
   89584:	f001 fde8 	bl	8b158 <__multiply>
   89588:	4603      	mov	r3, r0
   8958a:	4651      	mov	r1, sl
   8958c:	4620      	mov	r0, r4
   8958e:	469a      	mov	sl, r3
   89590:	f001 fd24 	bl	8afdc <_Bfree>
   89594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89596:	1bda      	subs	r2, r3, r7
   89598:	f040 818d 	bne.w	898b6 <_dtoa_r+0x976>
   8959c:	2101      	movs	r1, #1
   8959e:	4620      	mov	r0, r4
   895a0:	f001 fdc4 	bl	8b12c <__i2b>
   895a4:	f1bb 0f00 	cmp.w	fp, #0
   895a8:	4680      	mov	r8, r0
   895aa:	f300 80b3 	bgt.w	89714 <_dtoa_r+0x7d4>
   895ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   895b0:	2b01      	cmp	r3, #1
   895b2:	f340 818a 	ble.w	898ca <_dtoa_r+0x98a>
   895b6:	f04f 0900 	mov.w	r9, #0
   895ba:	2001      	movs	r0, #1
   895bc:	f1bb 0f00 	cmp.w	fp, #0
   895c0:	f040 80b4 	bne.w	8972c <_dtoa_r+0x7ec>
   895c4:	9a06      	ldr	r2, [sp, #24]
   895c6:	4410      	add	r0, r2
   895c8:	f010 001f 	ands.w	r0, r0, #31
   895cc:	f000 8092 	beq.w	896f4 <_dtoa_r+0x7b4>
   895d0:	f1c0 0320 	rsb	r3, r0, #32
   895d4:	2b04      	cmp	r3, #4
   895d6:	f340 83f9 	ble.w	89dcc <_dtoa_r+0xe8c>
   895da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   895dc:	f1c0 001c 	rsb	r0, r0, #28
   895e0:	4403      	add	r3, r0
   895e2:	4402      	add	r2, r0
   895e4:	930b      	str	r3, [sp, #44]	; 0x2c
   895e6:	4406      	add	r6, r0
   895e8:	9206      	str	r2, [sp, #24]
   895ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   895ec:	2b00      	cmp	r3, #0
   895ee:	dd05      	ble.n	895fc <_dtoa_r+0x6bc>
   895f0:	4651      	mov	r1, sl
   895f2:	461a      	mov	r2, r3
   895f4:	4620      	mov	r0, r4
   895f6:	f001 feab 	bl	8b350 <__lshift>
   895fa:	4682      	mov	sl, r0
   895fc:	9b06      	ldr	r3, [sp, #24]
   895fe:	2b00      	cmp	r3, #0
   89600:	dd05      	ble.n	8960e <_dtoa_r+0x6ce>
   89602:	4641      	mov	r1, r8
   89604:	461a      	mov	r2, r3
   89606:	4620      	mov	r0, r4
   89608:	f001 fea2 	bl	8b350 <__lshift>
   8960c:	4680      	mov	r8, r0
   8960e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89610:	2b00      	cmp	r3, #0
   89612:	f040 8135 	bne.w	89880 <_dtoa_r+0x940>
   89616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89618:	2b00      	cmp	r3, #0
   8961a:	f340 811b 	ble.w	89854 <_dtoa_r+0x914>
   8961e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89620:	2b00      	cmp	r3, #0
   89622:	f040 809a 	bne.w	8975a <_dtoa_r+0x81a>
   89626:	9b07      	ldr	r3, [sp, #28]
   89628:	3301      	adds	r3, #1
   8962a:	9307      	str	r3, [sp, #28]
   8962c:	2601      	movs	r6, #1
   8962e:	9f03      	ldr	r7, [sp, #12]
   89630:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89634:	e007      	b.n	89646 <_dtoa_r+0x706>
   89636:	4651      	mov	r1, sl
   89638:	2300      	movs	r3, #0
   8963a:	220a      	movs	r2, #10
   8963c:	4620      	mov	r0, r4
   8963e:	f001 fcd7 	bl	8aff0 <__multadd>
   89642:	4682      	mov	sl, r0
   89644:	3601      	adds	r6, #1
   89646:	4641      	mov	r1, r8
   89648:	4650      	mov	r0, sl
   8964a:	f7ff fbe9 	bl	88e20 <quorem>
   8964e:	454e      	cmp	r6, r9
   89650:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89654:	f807 3b01 	strb.w	r3, [r7], #1
   89658:	dbed      	blt.n	89636 <_dtoa_r+0x6f6>
   8965a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8965c:	2600      	movs	r6, #0
   8965e:	2a00      	cmp	r2, #0
   89660:	bfcc      	ite	gt
   89662:	4693      	movgt	fp, r2
   89664:	f04f 0b01 	movle.w	fp, #1
   89668:	9a03      	ldr	r2, [sp, #12]
   8966a:	4493      	add	fp, r2
   8966c:	4651      	mov	r1, sl
   8966e:	2201      	movs	r2, #1
   89670:	4620      	mov	r0, r4
   89672:	9304      	str	r3, [sp, #16]
   89674:	f001 fe6c 	bl	8b350 <__lshift>
   89678:	4641      	mov	r1, r8
   8967a:	4682      	mov	sl, r0
   8967c:	f001 fedc 	bl	8b438 <__mcmp>
   89680:	2800      	cmp	r0, #0
   89682:	f340 81a8 	ble.w	899d6 <_dtoa_r+0xa96>
   89686:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8968a:	9a03      	ldr	r2, [sp, #12]
   8968c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89690:	e004      	b.n	8969c <_dtoa_r+0x75c>
   89692:	455a      	cmp	r2, fp
   89694:	f000 81e4 	beq.w	89a60 <_dtoa_r+0xb20>
   89698:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8969c:	2b39      	cmp	r3, #57	; 0x39
   8969e:	f10b 0901 	add.w	r9, fp, #1
   896a2:	d0f6      	beq.n	89692 <_dtoa_r+0x752>
   896a4:	3301      	adds	r3, #1
   896a6:	f88b 3000 	strb.w	r3, [fp]
   896aa:	4641      	mov	r1, r8
   896ac:	4620      	mov	r0, r4
   896ae:	f001 fc95 	bl	8afdc <_Bfree>
   896b2:	b155      	cbz	r5, 896ca <_dtoa_r+0x78a>
   896b4:	b12e      	cbz	r6, 896c2 <_dtoa_r+0x782>
   896b6:	42ae      	cmp	r6, r5
   896b8:	d003      	beq.n	896c2 <_dtoa_r+0x782>
   896ba:	4631      	mov	r1, r6
   896bc:	4620      	mov	r0, r4
   896be:	f001 fc8d 	bl	8afdc <_Bfree>
   896c2:	4629      	mov	r1, r5
   896c4:	4620      	mov	r0, r4
   896c6:	f001 fc89 	bl	8afdc <_Bfree>
   896ca:	4651      	mov	r1, sl
   896cc:	4620      	mov	r0, r4
   896ce:	f001 fc85 	bl	8afdc <_Bfree>
   896d2:	2300      	movs	r3, #0
   896d4:	f889 3000 	strb.w	r3, [r9]
   896d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   896da:	461a      	mov	r2, r3
   896dc:	9b07      	ldr	r3, [sp, #28]
   896de:	6013      	str	r3, [r2, #0]
   896e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   896e2:	2b00      	cmp	r3, #0
   896e4:	f43f ac67 	beq.w	88fb6 <_dtoa_r+0x76>
   896e8:	9803      	ldr	r0, [sp, #12]
   896ea:	f8c3 9000 	str.w	r9, [r3]
   896ee:	b01b      	add	sp, #108	; 0x6c
   896f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   896f4:	201c      	movs	r0, #28
   896f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   896f8:	4406      	add	r6, r0
   896fa:	4403      	add	r3, r0
   896fc:	930b      	str	r3, [sp, #44]	; 0x2c
   896fe:	9b06      	ldr	r3, [sp, #24]
   89700:	4403      	add	r3, r0
   89702:	9306      	str	r3, [sp, #24]
   89704:	e771      	b.n	895ea <_dtoa_r+0x6aa>
   89706:	2501      	movs	r5, #1
   89708:	e4de      	b.n	890c8 <_dtoa_r+0x188>
   8970a:	f1c0 0020 	rsb	r0, r0, #32
   8970e:	fa06 f000 	lsl.w	r0, r6, r0
   89712:	e474      	b.n	88ffe <_dtoa_r+0xbe>
   89714:	4601      	mov	r1, r0
   89716:	465a      	mov	r2, fp
   89718:	4620      	mov	r0, r4
   8971a:	f001 fdcd 	bl	8b2b8 <__pow5mult>
   8971e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89720:	4680      	mov	r8, r0
   89722:	2b01      	cmp	r3, #1
   89724:	f340 81d1 	ble.w	89aca <_dtoa_r+0xb8a>
   89728:	f04f 0900 	mov.w	r9, #0
   8972c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89730:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   89734:	6918      	ldr	r0, [r3, #16]
   89736:	f001 fca9 	bl	8b08c <__hi0bits>
   8973a:	f1c0 0020 	rsb	r0, r0, #32
   8973e:	e741      	b.n	895c4 <_dtoa_r+0x684>
   89740:	4629      	mov	r1, r5
   89742:	2300      	movs	r3, #0
   89744:	220a      	movs	r2, #10
   89746:	4620      	mov	r0, r4
   89748:	f001 fc52 	bl	8aff0 <__multadd>
   8974c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8974e:	4605      	mov	r5, r0
   89750:	2b00      	cmp	r3, #0
   89752:	f340 8315 	ble.w	89d80 <_dtoa_r+0xe40>
   89756:	9707      	str	r7, [sp, #28]
   89758:	930a      	str	r3, [sp, #40]	; 0x28
   8975a:	2e00      	cmp	r6, #0
   8975c:	f300 8122 	bgt.w	899a4 <_dtoa_r+0xa64>
   89760:	f1b9 0f00 	cmp.w	r9, #0
   89764:	f040 81f9 	bne.w	89b5a <_dtoa_r+0xc1a>
   89768:	462f      	mov	r7, r5
   8976a:	9903      	ldr	r1, [sp, #12]
   8976c:	9b04      	ldr	r3, [sp, #16]
   8976e:	460e      	mov	r6, r1
   89770:	f003 0201 	and.w	r2, r3, #1
   89774:	1e4b      	subs	r3, r1, #1
   89776:	9924      	ldr	r1, [sp, #144]	; 0x90
   89778:	920c      	str	r2, [sp, #48]	; 0x30
   8977a:	430a      	orrs	r2, r1
   8977c:	920b      	str	r2, [sp, #44]	; 0x2c
   8977e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89780:	441a      	add	r2, r3
   89782:	920a      	str	r2, [sp, #40]	; 0x28
   89784:	4641      	mov	r1, r8
   89786:	4650      	mov	r0, sl
   89788:	f7ff fb4a 	bl	88e20 <quorem>
   8978c:	4629      	mov	r1, r5
   8978e:	4683      	mov	fp, r0
   89790:	4650      	mov	r0, sl
   89792:	f001 fe51 	bl	8b438 <__mcmp>
   89796:	463a      	mov	r2, r7
   89798:	4641      	mov	r1, r8
   8979a:	4681      	mov	r9, r0
   8979c:	4620      	mov	r0, r4
   8979e:	f001 fe69 	bl	8b474 <__mdiff>
   897a2:	68c2      	ldr	r2, [r0, #12]
   897a4:	4601      	mov	r1, r0
   897a6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   897aa:	2a00      	cmp	r2, #0
   897ac:	d142      	bne.n	89834 <_dtoa_r+0x8f4>
   897ae:	9006      	str	r0, [sp, #24]
   897b0:	4650      	mov	r0, sl
   897b2:	9308      	str	r3, [sp, #32]
   897b4:	f001 fe40 	bl	8b438 <__mcmp>
   897b8:	9906      	ldr	r1, [sp, #24]
   897ba:	9004      	str	r0, [sp, #16]
   897bc:	4620      	mov	r0, r4
   897be:	f001 fc0d 	bl	8afdc <_Bfree>
   897c2:	9a04      	ldr	r2, [sp, #16]
   897c4:	9b08      	ldr	r3, [sp, #32]
   897c6:	b91a      	cbnz	r2, 897d0 <_dtoa_r+0x890>
   897c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   897ca:	2900      	cmp	r1, #0
   897cc:	f000 82cb 	beq.w	89d66 <_dtoa_r+0xe26>
   897d0:	f1b9 0f00 	cmp.w	r9, #0
   897d4:	f2c0 8185 	blt.w	89ae2 <_dtoa_r+0xba2>
   897d8:	9924      	ldr	r1, [sp, #144]	; 0x90
   897da:	ea41 0909 	orr.w	r9, r1, r9
   897de:	990c      	ldr	r1, [sp, #48]	; 0x30
   897e0:	ea51 0109 	orrs.w	r1, r1, r9
   897e4:	f000 817d 	beq.w	89ae2 <_dtoa_r+0xba2>
   897e8:	2a00      	cmp	r2, #0
   897ea:	f300 81d1 	bgt.w	89b90 <_dtoa_r+0xc50>
   897ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   897f0:	f106 0901 	add.w	r9, r6, #1
   897f4:	4296      	cmp	r6, r2
   897f6:	46cb      	mov	fp, r9
   897f8:	7033      	strb	r3, [r6, #0]
   897fa:	f000 81e3 	beq.w	89bc4 <_dtoa_r+0xc84>
   897fe:	4651      	mov	r1, sl
   89800:	2300      	movs	r3, #0
   89802:	220a      	movs	r2, #10
   89804:	4620      	mov	r0, r4
   89806:	f001 fbf3 	bl	8aff0 <__multadd>
   8980a:	42bd      	cmp	r5, r7
   8980c:	4682      	mov	sl, r0
   8980e:	4629      	mov	r1, r5
   89810:	f04f 0300 	mov.w	r3, #0
   89814:	f04f 020a 	mov.w	r2, #10
   89818:	4620      	mov	r0, r4
   8981a:	d012      	beq.n	89842 <_dtoa_r+0x902>
   8981c:	f001 fbe8 	bl	8aff0 <__multadd>
   89820:	4639      	mov	r1, r7
   89822:	4605      	mov	r5, r0
   89824:	2300      	movs	r3, #0
   89826:	220a      	movs	r2, #10
   89828:	4620      	mov	r0, r4
   8982a:	f001 fbe1 	bl	8aff0 <__multadd>
   8982e:	464e      	mov	r6, r9
   89830:	4607      	mov	r7, r0
   89832:	e7a7      	b.n	89784 <_dtoa_r+0x844>
   89834:	4620      	mov	r0, r4
   89836:	9304      	str	r3, [sp, #16]
   89838:	f001 fbd0 	bl	8afdc <_Bfree>
   8983c:	2201      	movs	r2, #1
   8983e:	9b04      	ldr	r3, [sp, #16]
   89840:	e7c6      	b.n	897d0 <_dtoa_r+0x890>
   89842:	f001 fbd5 	bl	8aff0 <__multadd>
   89846:	464e      	mov	r6, r9
   89848:	4605      	mov	r5, r0
   8984a:	4607      	mov	r7, r0
   8984c:	e79a      	b.n	89784 <_dtoa_r+0x844>
   8984e:	bf00      	nop
   89850:	0008cc88 	.word	0x0008cc88
   89854:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89856:	2b02      	cmp	r3, #2
   89858:	dc7e      	bgt.n	89958 <_dtoa_r+0xa18>
   8985a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8985c:	2b00      	cmp	r3, #0
   8985e:	f47f af7c 	bne.w	8975a <_dtoa_r+0x81a>
   89862:	4641      	mov	r1, r8
   89864:	4650      	mov	r0, sl
   89866:	f7ff fadb 	bl	88e20 <quorem>
   8986a:	9a07      	ldr	r2, [sp, #28]
   8986c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89870:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89874:	3201      	adds	r2, #1
   89876:	2600      	movs	r6, #0
   89878:	9207      	str	r2, [sp, #28]
   8987a:	f80b 3b01 	strb.w	r3, [fp], #1
   8987e:	e6f5      	b.n	8966c <_dtoa_r+0x72c>
   89880:	4641      	mov	r1, r8
   89882:	4650      	mov	r0, sl
   89884:	f001 fdd8 	bl	8b438 <__mcmp>
   89888:	2800      	cmp	r0, #0
   8988a:	f6bf aec4 	bge.w	89616 <_dtoa_r+0x6d6>
   8988e:	4651      	mov	r1, sl
   89890:	2300      	movs	r3, #0
   89892:	220a      	movs	r2, #10
   89894:	4620      	mov	r0, r4
   89896:	f001 fbab 	bl	8aff0 <__multadd>
   8989a:	9b07      	ldr	r3, [sp, #28]
   8989c:	4682      	mov	sl, r0
   8989e:	1e5f      	subs	r7, r3, #1
   898a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   898a2:	2b00      	cmp	r3, #0
   898a4:	f47f af4c 	bne.w	89740 <_dtoa_r+0x800>
   898a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   898aa:	2b00      	cmp	r3, #0
   898ac:	f340 8262 	ble.w	89d74 <_dtoa_r+0xe34>
   898b0:	930a      	str	r3, [sp, #40]	; 0x28
   898b2:	e6bb      	b.n	8962c <_dtoa_r+0x6ec>
   898b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   898b6:	4651      	mov	r1, sl
   898b8:	4620      	mov	r0, r4
   898ba:	f001 fcfd 	bl	8b2b8 <__pow5mult>
   898be:	4682      	mov	sl, r0
   898c0:	e66c      	b.n	8959c <_dtoa_r+0x65c>
   898c2:	4bba      	ldr	r3, [pc, #744]	; (89bac <_dtoa_r+0xc6c>)
   898c4:	9303      	str	r3, [sp, #12]
   898c6:	3303      	adds	r3, #3
   898c8:	e419      	b.n	890fe <_dtoa_r+0x1be>
   898ca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   898ce:	2900      	cmp	r1, #0
   898d0:	f47f ae71 	bne.w	895b6 <_dtoa_r+0x676>
   898d4:	f3c2 0313 	ubfx	r3, r2, #0, #20
   898d8:	2b00      	cmp	r3, #0
   898da:	f47f ae6c 	bne.w	895b6 <_dtoa_r+0x676>
   898de:	4bb4      	ldr	r3, [pc, #720]	; (89bb0 <_dtoa_r+0xc70>)
   898e0:	4013      	ands	r3, r2
   898e2:	2b00      	cmp	r3, #0
   898e4:	f000 822a 	beq.w	89d3c <_dtoa_r+0xdfc>
   898e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   898ea:	f04f 0901 	mov.w	r9, #1
   898ee:	3301      	adds	r3, #1
   898f0:	930b      	str	r3, [sp, #44]	; 0x2c
   898f2:	9b06      	ldr	r3, [sp, #24]
   898f4:	3301      	adds	r3, #1
   898f6:	9306      	str	r3, [sp, #24]
   898f8:	e65f      	b.n	895ba <_dtoa_r+0x67a>
   898fa:	2301      	movs	r3, #1
   898fc:	930c      	str	r3, [sp, #48]	; 0x30
   898fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89900:	9a07      	ldr	r2, [sp, #28]
   89902:	4413      	add	r3, r2
   89904:	9312      	str	r3, [sp, #72]	; 0x48
   89906:	3301      	adds	r3, #1
   89908:	2b01      	cmp	r3, #1
   8990a:	461e      	mov	r6, r3
   8990c:	bfb8      	it	lt
   8990e:	2601      	movlt	r6, #1
   89910:	930a      	str	r3, [sp, #40]	; 0x28
   89912:	2100      	movs	r1, #0
   89914:	2e17      	cmp	r6, #23
   89916:	6461      	str	r1, [r4, #68]	; 0x44
   89918:	f77f ac43 	ble.w	891a2 <_dtoa_r+0x262>
   8991c:	2201      	movs	r2, #1
   8991e:	2304      	movs	r3, #4
   89920:	005b      	lsls	r3, r3, #1
   89922:	f103 0014 	add.w	r0, r3, #20
   89926:	42b0      	cmp	r0, r6
   89928:	4611      	mov	r1, r2
   8992a:	f102 0201 	add.w	r2, r2, #1
   8992e:	d9f7      	bls.n	89920 <_dtoa_r+0x9e0>
   89930:	6461      	str	r1, [r4, #68]	; 0x44
   89932:	e436      	b.n	891a2 <_dtoa_r+0x262>
   89934:	2301      	movs	r3, #1
   89936:	930c      	str	r3, [sp, #48]	; 0x30
   89938:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8993a:	2b00      	cmp	r3, #0
   8993c:	dd46      	ble.n	899cc <_dtoa_r+0xa8c>
   8993e:	461e      	mov	r6, r3
   89940:	9312      	str	r3, [sp, #72]	; 0x48
   89942:	930a      	str	r3, [sp, #40]	; 0x28
   89944:	e7e5      	b.n	89912 <_dtoa_r+0x9d2>
   89946:	2300      	movs	r3, #0
   89948:	930c      	str	r3, [sp, #48]	; 0x30
   8994a:	e7d8      	b.n	898fe <_dtoa_r+0x9be>
   8994c:	2300      	movs	r3, #0
   8994e:	930c      	str	r3, [sp, #48]	; 0x30
   89950:	e7f2      	b.n	89938 <_dtoa_r+0x9f8>
   89952:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89954:	9707      	str	r7, [sp, #28]
   89956:	930a      	str	r3, [sp, #40]	; 0x28
   89958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8995a:	2b00      	cmp	r3, #0
   8995c:	f47f ad40 	bne.w	893e0 <_dtoa_r+0x4a0>
   89960:	4641      	mov	r1, r8
   89962:	2205      	movs	r2, #5
   89964:	4620      	mov	r0, r4
   89966:	f001 fb43 	bl	8aff0 <__multadd>
   8996a:	4680      	mov	r8, r0
   8996c:	4650      	mov	r0, sl
   8996e:	4641      	mov	r1, r8
   89970:	f001 fd62 	bl	8b438 <__mcmp>
   89974:	2800      	cmp	r0, #0
   89976:	f77f ad33 	ble.w	893e0 <_dtoa_r+0x4a0>
   8997a:	9f03      	ldr	r7, [sp, #12]
   8997c:	2231      	movs	r2, #49	; 0x31
   8997e:	463b      	mov	r3, r7
   89980:	9e07      	ldr	r6, [sp, #28]
   89982:	f803 2b01 	strb.w	r2, [r3], #1
   89986:	3601      	adds	r6, #1
   89988:	9303      	str	r3, [sp, #12]
   8998a:	4641      	mov	r1, r8
   8998c:	4620      	mov	r0, r4
   8998e:	f001 fb25 	bl	8afdc <_Bfree>
   89992:	1c73      	adds	r3, r6, #1
   89994:	f8dd 900c 	ldr.w	r9, [sp, #12]
   89998:	9307      	str	r3, [sp, #28]
   8999a:	9703      	str	r7, [sp, #12]
   8999c:	2d00      	cmp	r5, #0
   8999e:	f47f ae90 	bne.w	896c2 <_dtoa_r+0x782>
   899a2:	e692      	b.n	896ca <_dtoa_r+0x78a>
   899a4:	4629      	mov	r1, r5
   899a6:	4632      	mov	r2, r6
   899a8:	4620      	mov	r0, r4
   899aa:	f001 fcd1 	bl	8b350 <__lshift>
   899ae:	4605      	mov	r5, r0
   899b0:	e6d6      	b.n	89760 <_dtoa_r+0x820>
   899b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   899b4:	970d      	str	r7, [sp, #52]	; 0x34
   899b6:	1afb      	subs	r3, r7, r3
   899b8:	449b      	add	fp, r3
   899ba:	2700      	movs	r7, #0
   899bc:	e58c      	b.n	894d8 <_dtoa_r+0x598>
   899be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   899c2:	f04f 0902 	mov.w	r9, #2
   899c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   899ca:	e417      	b.n	891fc <_dtoa_r+0x2bc>
   899cc:	2301      	movs	r3, #1
   899ce:	9325      	str	r3, [sp, #148]	; 0x94
   899d0:	930a      	str	r3, [sp, #40]	; 0x28
   899d2:	f7ff bbe2 	b.w	8919a <_dtoa_r+0x25a>
   899d6:	d103      	bne.n	899e0 <_dtoa_r+0xaa0>
   899d8:	9b04      	ldr	r3, [sp, #16]
   899da:	07db      	lsls	r3, r3, #31
   899dc:	f53f ae53 	bmi.w	89686 <_dtoa_r+0x746>
   899e0:	46d9      	mov	r9, fp
   899e2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   899e6:	2b30      	cmp	r3, #48	; 0x30
   899e8:	d0fa      	beq.n	899e0 <_dtoa_r+0xaa0>
   899ea:	e65e      	b.n	896aa <_dtoa_r+0x76a>
   899ec:	4648      	mov	r0, r9
   899ee:	f002 fcfb 	bl	8c3e8 <__aeabi_i2d>
   899f2:	4632      	mov	r2, r6
   899f4:	463b      	mov	r3, r7
   899f6:	f002 fd61 	bl	8c4bc <__aeabi_dmul>
   899fa:	2200      	movs	r2, #0
   899fc:	4b6d      	ldr	r3, [pc, #436]	; (89bb4 <_dtoa_r+0xc74>)
   899fe:	f002 fba7 	bl	8c150 <__adddf3>
   89a02:	4680      	mov	r8, r0
   89a04:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89a08:	4630      	mov	r0, r6
   89a0a:	4639      	mov	r1, r7
   89a0c:	2200      	movs	r2, #0
   89a0e:	4b6a      	ldr	r3, [pc, #424]	; (89bb8 <_dtoa_r+0xc78>)
   89a10:	f002 fb9c 	bl	8c14c <__aeabi_dsub>
   89a14:	4642      	mov	r2, r8
   89a16:	464b      	mov	r3, r9
   89a18:	4606      	mov	r6, r0
   89a1a:	460f      	mov	r7, r1
   89a1c:	f002 ffde 	bl	8c9dc <__aeabi_dcmpgt>
   89a20:	2800      	cmp	r0, #0
   89a22:	f040 8187 	bne.w	89d34 <_dtoa_r+0xdf4>
   89a26:	4642      	mov	r2, r8
   89a28:	4630      	mov	r0, r6
   89a2a:	4639      	mov	r1, r7
   89a2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   89a30:	f002 ffb6 	bl	8c9a0 <__aeabi_dcmplt>
   89a34:	2800      	cmp	r0, #0
   89a36:	f43f acaa 	beq.w	8938e <_dtoa_r+0x44e>
   89a3a:	f04f 0800 	mov.w	r8, #0
   89a3e:	4645      	mov	r5, r8
   89a40:	e4ce      	b.n	893e0 <_dtoa_r+0x4a0>
   89a42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89a44:	2a00      	cmp	r2, #0
   89a46:	f000 80c3 	beq.w	89bd0 <_dtoa_r+0xc90>
   89a4a:	9a06      	ldr	r2, [sp, #24]
   89a4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   89a50:	441a      	add	r2, r3
   89a52:	9206      	str	r2, [sp, #24]
   89a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89a56:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89a58:	4616      	mov	r6, r2
   89a5a:	441a      	add	r2, r3
   89a5c:	920b      	str	r2, [sp, #44]	; 0x2c
   89a5e:	e547      	b.n	894f0 <_dtoa_r+0x5b0>
   89a60:	2331      	movs	r3, #49	; 0x31
   89a62:	9a07      	ldr	r2, [sp, #28]
   89a64:	3201      	adds	r2, #1
   89a66:	9207      	str	r2, [sp, #28]
   89a68:	9a03      	ldr	r2, [sp, #12]
   89a6a:	7013      	strb	r3, [r2, #0]
   89a6c:	e61d      	b.n	896aa <_dtoa_r+0x76a>
   89a6e:	f000 814b 	beq.w	89d08 <_dtoa_r+0xdc8>
   89a72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89a76:	9b07      	ldr	r3, [sp, #28]
   89a78:	425d      	negs	r5, r3
   89a7a:	4b50      	ldr	r3, [pc, #320]	; (89bbc <_dtoa_r+0xc7c>)
   89a7c:	f005 020f 	and.w	r2, r5, #15
   89a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89a84:	e9d3 2300 	ldrd	r2, r3, [r3]
   89a88:	f002 fd18 	bl	8c4bc <__aeabi_dmul>
   89a8c:	112d      	asrs	r5, r5, #4
   89a8e:	4606      	mov	r6, r0
   89a90:	460f      	mov	r7, r1
   89a92:	f000 817d 	beq.w	89d90 <_dtoa_r+0xe50>
   89a96:	2300      	movs	r3, #0
   89a98:	f04f 0902 	mov.w	r9, #2
   89a9c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 89bc0 <_dtoa_r+0xc80>
   89aa0:	07ea      	lsls	r2, r5, #31
   89aa2:	d505      	bpl.n	89ab0 <_dtoa_r+0xb70>
   89aa4:	e9d8 2300 	ldrd	r2, r3, [r8]
   89aa8:	f002 fd08 	bl	8c4bc <__aeabi_dmul>
   89aac:	2301      	movs	r3, #1
   89aae:	4499      	add	r9, r3
   89ab0:	106d      	asrs	r5, r5, #1
   89ab2:	f108 0808 	add.w	r8, r8, #8
   89ab6:	d1f3      	bne.n	89aa0 <_dtoa_r+0xb60>
   89ab8:	2b00      	cmp	r3, #0
   89aba:	f43f abba 	beq.w	89232 <_dtoa_r+0x2f2>
   89abe:	4606      	mov	r6, r0
   89ac0:	460f      	mov	r7, r1
   89ac2:	f7ff bbb6 	b.w	89232 <_dtoa_r+0x2f2>
   89ac6:	900e      	str	r0, [sp, #56]	; 0x38
   89ac8:	e520      	b.n	8950c <_dtoa_r+0x5cc>
   89aca:	9b04      	ldr	r3, [sp, #16]
   89acc:	2b00      	cmp	r3, #0
   89ace:	f47f ae2b 	bne.w	89728 <_dtoa_r+0x7e8>
   89ad2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89ad6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89ada:	2b00      	cmp	r3, #0
   89adc:	f43f aeff 	beq.w	898de <_dtoa_r+0x99e>
   89ae0:	e622      	b.n	89728 <_dtoa_r+0x7e8>
   89ae2:	2a00      	cmp	r2, #0
   89ae4:	dd12      	ble.n	89b0c <_dtoa_r+0xbcc>
   89ae6:	4651      	mov	r1, sl
   89ae8:	2201      	movs	r2, #1
   89aea:	4620      	mov	r0, r4
   89aec:	9304      	str	r3, [sp, #16]
   89aee:	f001 fc2f 	bl	8b350 <__lshift>
   89af2:	4641      	mov	r1, r8
   89af4:	4682      	mov	sl, r0
   89af6:	f001 fc9f 	bl	8b438 <__mcmp>
   89afa:	2800      	cmp	r0, #0
   89afc:	9b04      	ldr	r3, [sp, #16]
   89afe:	f340 812c 	ble.w	89d5a <_dtoa_r+0xe1a>
   89b02:	2b39      	cmp	r3, #57	; 0x39
   89b04:	f000 810c 	beq.w	89d20 <_dtoa_r+0xde0>
   89b08:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   89b0c:	46b1      	mov	r9, r6
   89b0e:	f809 3b01 	strb.w	r3, [r9], #1
   89b12:	9b07      	ldr	r3, [sp, #28]
   89b14:	462e      	mov	r6, r5
   89b16:	3301      	adds	r3, #1
   89b18:	463d      	mov	r5, r7
   89b1a:	9307      	str	r3, [sp, #28]
   89b1c:	e5c5      	b.n	896aa <_dtoa_r+0x76a>
   89b1e:	4655      	mov	r5, sl
   89b20:	9c08      	ldr	r4, [sp, #32]
   89b22:	f8dd a018 	ldr.w	sl, [sp, #24]
   89b26:	4602      	mov	r2, r0
   89b28:	460b      	mov	r3, r1
   89b2a:	f002 fb11 	bl	8c150 <__adddf3>
   89b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89b32:	4606      	mov	r6, r0
   89b34:	460f      	mov	r7, r1
   89b36:	f002 ff51 	bl	8c9dc <__aeabi_dcmpgt>
   89b3a:	b960      	cbnz	r0, 89b56 <_dtoa_r+0xc16>
   89b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89b40:	4630      	mov	r0, r6
   89b42:	4639      	mov	r1, r7
   89b44:	f002 ff22 	bl	8c98c <__aeabi_dcmpeq>
   89b48:	2800      	cmp	r0, #0
   89b4a:	f43f aca3 	beq.w	89494 <_dtoa_r+0x554>
   89b4e:	f018 0f01 	tst.w	r8, #1
   89b52:	f43f ac9f 	beq.w	89494 <_dtoa_r+0x554>
   89b56:	9a03      	ldr	r2, [sp, #12]
   89b58:	e40a      	b.n	89370 <_dtoa_r+0x430>
   89b5a:	4620      	mov	r0, r4
   89b5c:	6869      	ldr	r1, [r5, #4]
   89b5e:	f001 fa17 	bl	8af90 <_Balloc>
   89b62:	4606      	mov	r6, r0
   89b64:	2800      	cmp	r0, #0
   89b66:	f000 8117 	beq.w	89d98 <_dtoa_r+0xe58>
   89b6a:	692b      	ldr	r3, [r5, #16]
   89b6c:	f105 010c 	add.w	r1, r5, #12
   89b70:	3302      	adds	r3, #2
   89b72:	009a      	lsls	r2, r3, #2
   89b74:	300c      	adds	r0, #12
   89b76:	f7fc f9fb 	bl	85f70 <memcpy>
   89b7a:	4631      	mov	r1, r6
   89b7c:	2201      	movs	r2, #1
   89b7e:	4620      	mov	r0, r4
   89b80:	f001 fbe6 	bl	8b350 <__lshift>
   89b84:	4607      	mov	r7, r0
   89b86:	e5f0      	b.n	8976a <_dtoa_r+0x82a>
   89b88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   89b8c:	1a9e      	subs	r6, r3, r2
   89b8e:	e4af      	b.n	894f0 <_dtoa_r+0x5b0>
   89b90:	2b39      	cmp	r3, #57	; 0x39
   89b92:	f000 80c5 	beq.w	89d20 <_dtoa_r+0xde0>
   89b96:	46b1      	mov	r9, r6
   89b98:	3301      	adds	r3, #1
   89b9a:	f809 3b01 	strb.w	r3, [r9], #1
   89b9e:	9b07      	ldr	r3, [sp, #28]
   89ba0:	462e      	mov	r6, r5
   89ba2:	3301      	adds	r3, #1
   89ba4:	463d      	mov	r5, r7
   89ba6:	9307      	str	r3, [sp, #28]
   89ba8:	e57f      	b.n	896aa <_dtoa_r+0x76a>
   89baa:	bf00      	nop
   89bac:	0008cccc 	.word	0x0008cccc
   89bb0:	7ff00000 	.word	0x7ff00000
   89bb4:	401c0000 	.word	0x401c0000
   89bb8:	40140000 	.word	0x40140000
   89bbc:	0008ce28 	.word	0x0008ce28
   89bc0:	0008ce00 	.word	0x0008ce00
   89bc4:	9a07      	ldr	r2, [sp, #28]
   89bc6:	462e      	mov	r6, r5
   89bc8:	3201      	adds	r2, #1
   89bca:	463d      	mov	r5, r7
   89bcc:	9207      	str	r2, [sp, #28]
   89bce:	e54d      	b.n	8966c <_dtoa_r+0x72c>
   89bd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   89bd2:	9a06      	ldr	r2, [sp, #24]
   89bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89bda:	441a      	add	r2, r3
   89bdc:	9206      	str	r2, [sp, #24]
   89bde:	460a      	mov	r2, r1
   89be0:	441a      	add	r2, r3
   89be2:	460e      	mov	r6, r1
   89be4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89be6:	920b      	str	r2, [sp, #44]	; 0x2c
   89be8:	e482      	b.n	894f0 <_dtoa_r+0x5b0>
   89bea:	9810      	ldr	r0, [sp, #64]	; 0x40
   89bec:	497f      	ldr	r1, [pc, #508]	; (89dec <_dtoa_r+0xeac>)
   89bee:	4642      	mov	r2, r8
   89bf0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   89bf4:	464b      	mov	r3, r9
   89bf6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89bfa:	f002 fc5f 	bl	8c4bc <__aeabi_dmul>
   89bfe:	4602      	mov	r2, r0
   89c00:	460b      	mov	r3, r1
   89c02:	4630      	mov	r0, r6
   89c04:	4639      	mov	r1, r7
   89c06:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89c0a:	f002 ff07 	bl	8ca1c <__aeabi_d2iz>
   89c0e:	4680      	mov	r8, r0
   89c10:	f002 fbea 	bl	8c3e8 <__aeabi_i2d>
   89c14:	460b      	mov	r3, r1
   89c16:	4602      	mov	r2, r0
   89c18:	4639      	mov	r1, r7
   89c1a:	4630      	mov	r0, r6
   89c1c:	f002 fa96 	bl	8c14c <__aeabi_dsub>
   89c20:	4606      	mov	r6, r0
   89c22:	9810      	ldr	r0, [sp, #64]	; 0x40
   89c24:	9d03      	ldr	r5, [sp, #12]
   89c26:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89c2a:	2801      	cmp	r0, #1
   89c2c:	460f      	mov	r7, r1
   89c2e:	f805 3b01 	strb.w	r3, [r5], #1
   89c32:	d01e      	beq.n	89c72 <_dtoa_r+0xd32>
   89c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89c36:	9a03      	ldr	r2, [sp, #12]
   89c38:	4413      	add	r3, r2
   89c3a:	4698      	mov	r8, r3
   89c3c:	2200      	movs	r2, #0
   89c3e:	4b6c      	ldr	r3, [pc, #432]	; (89df0 <_dtoa_r+0xeb0>)
   89c40:	4630      	mov	r0, r6
   89c42:	4639      	mov	r1, r7
   89c44:	f002 fc3a 	bl	8c4bc <__aeabi_dmul>
   89c48:	460f      	mov	r7, r1
   89c4a:	4606      	mov	r6, r0
   89c4c:	f002 fee6 	bl	8ca1c <__aeabi_d2iz>
   89c50:	4681      	mov	r9, r0
   89c52:	f002 fbc9 	bl	8c3e8 <__aeabi_i2d>
   89c56:	4602      	mov	r2, r0
   89c58:	460b      	mov	r3, r1
   89c5a:	4630      	mov	r0, r6
   89c5c:	4639      	mov	r1, r7
   89c5e:	f002 fa75 	bl	8c14c <__aeabi_dsub>
   89c62:	f109 0930 	add.w	r9, r9, #48	; 0x30
   89c66:	f805 9b01 	strb.w	r9, [r5], #1
   89c6a:	4545      	cmp	r5, r8
   89c6c:	4606      	mov	r6, r0
   89c6e:	460f      	mov	r7, r1
   89c70:	d1e4      	bne.n	89c3c <_dtoa_r+0xcfc>
   89c72:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   89c76:	2200      	movs	r2, #0
   89c78:	4b5e      	ldr	r3, [pc, #376]	; (89df4 <_dtoa_r+0xeb4>)
   89c7a:	4640      	mov	r0, r8
   89c7c:	4649      	mov	r1, r9
   89c7e:	f002 fa67 	bl	8c150 <__adddf3>
   89c82:	4632      	mov	r2, r6
   89c84:	463b      	mov	r3, r7
   89c86:	f002 fe8b 	bl	8c9a0 <__aeabi_dcmplt>
   89c8a:	2800      	cmp	r0, #0
   89c8c:	d158      	bne.n	89d40 <_dtoa_r+0xe00>
   89c8e:	4642      	mov	r2, r8
   89c90:	464b      	mov	r3, r9
   89c92:	2000      	movs	r0, #0
   89c94:	4957      	ldr	r1, [pc, #348]	; (89df4 <_dtoa_r+0xeb4>)
   89c96:	f002 fa59 	bl	8c14c <__aeabi_dsub>
   89c9a:	4632      	mov	r2, r6
   89c9c:	463b      	mov	r3, r7
   89c9e:	f002 fe9d 	bl	8c9dc <__aeabi_dcmpgt>
   89ca2:	2800      	cmp	r0, #0
   89ca4:	f43f ab73 	beq.w	8938e <_dtoa_r+0x44e>
   89ca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89cac:	46a9      	mov	r9, r5
   89cae:	2b30      	cmp	r3, #48	; 0x30
   89cb0:	f105 35ff 	add.w	r5, r5, #4294967295
   89cb4:	d0f8      	beq.n	89ca8 <_dtoa_r+0xd68>
   89cb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89cb8:	3301      	adds	r3, #1
   89cba:	9307      	str	r3, [sp, #28]
   89cbc:	e505      	b.n	896ca <_dtoa_r+0x78a>
   89cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89cc0:	2b00      	cmp	r3, #0
   89cc2:	f43f ae93 	beq.w	899ec <_dtoa_r+0xaac>
   89cc6:	9d12      	ldr	r5, [sp, #72]	; 0x48
   89cc8:	2d00      	cmp	r5, #0
   89cca:	f77f ab60 	ble.w	8938e <_dtoa_r+0x44e>
   89cce:	2200      	movs	r2, #0
   89cd0:	4b47      	ldr	r3, [pc, #284]	; (89df0 <_dtoa_r+0xeb0>)
   89cd2:	4630      	mov	r0, r6
   89cd4:	4639      	mov	r1, r7
   89cd6:	f002 fbf1 	bl	8c4bc <__aeabi_dmul>
   89cda:	4606      	mov	r6, r0
   89cdc:	460f      	mov	r7, r1
   89cde:	f109 0001 	add.w	r0, r9, #1
   89ce2:	f002 fb81 	bl	8c3e8 <__aeabi_i2d>
   89ce6:	4632      	mov	r2, r6
   89ce8:	463b      	mov	r3, r7
   89cea:	f002 fbe7 	bl	8c4bc <__aeabi_dmul>
   89cee:	2200      	movs	r2, #0
   89cf0:	4b41      	ldr	r3, [pc, #260]	; (89df8 <_dtoa_r+0xeb8>)
   89cf2:	f002 fa2d 	bl	8c150 <__adddf3>
   89cf6:	9a07      	ldr	r2, [sp, #28]
   89cf8:	4680      	mov	r8, r0
   89cfa:	3a01      	subs	r2, #1
   89cfc:	9213      	str	r2, [sp, #76]	; 0x4c
   89cfe:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89d02:	9510      	str	r5, [sp, #64]	; 0x40
   89d04:	f7ff bab6 	b.w	89274 <_dtoa_r+0x334>
   89d08:	f04f 0902 	mov.w	r9, #2
   89d0c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   89d10:	f7ff ba8f 	b.w	89232 <_dtoa_r+0x2f2>
   89d14:	9b07      	ldr	r3, [sp, #28]
   89d16:	3301      	adds	r3, #1
   89d18:	9307      	str	r3, [sp, #28]
   89d1a:	2331      	movs	r3, #49	; 0x31
   89d1c:	f7ff bb2f 	b.w	8937e <_dtoa_r+0x43e>
   89d20:	46b3      	mov	fp, r6
   89d22:	2339      	movs	r3, #57	; 0x39
   89d24:	9a07      	ldr	r2, [sp, #28]
   89d26:	462e      	mov	r6, r5
   89d28:	3201      	adds	r2, #1
   89d2a:	463d      	mov	r5, r7
   89d2c:	9207      	str	r2, [sp, #28]
   89d2e:	f80b 3b01 	strb.w	r3, [fp], #1
   89d32:	e4aa      	b.n	8968a <_dtoa_r+0x74a>
   89d34:	f04f 0800 	mov.w	r8, #0
   89d38:	4645      	mov	r5, r8
   89d3a:	e61e      	b.n	8997a <_dtoa_r+0xa3a>
   89d3c:	4699      	mov	r9, r3
   89d3e:	e43c      	b.n	895ba <_dtoa_r+0x67a>
   89d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89d42:	9a03      	ldr	r2, [sp, #12]
   89d44:	9307      	str	r3, [sp, #28]
   89d46:	f7ff bb13 	b.w	89370 <_dtoa_r+0x430>
   89d4a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89d4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89d52:	46a9      	mov	r9, r5
   89d54:	3301      	adds	r3, #1
   89d56:	9307      	str	r3, [sp, #28]
   89d58:	e4b7      	b.n	896ca <_dtoa_r+0x78a>
   89d5a:	f47f aed7 	bne.w	89b0c <_dtoa_r+0xbcc>
   89d5e:	07da      	lsls	r2, r3, #31
   89d60:	f57f aed4 	bpl.w	89b0c <_dtoa_r+0xbcc>
   89d64:	e6cd      	b.n	89b02 <_dtoa_r+0xbc2>
   89d66:	2b39      	cmp	r3, #57	; 0x39
   89d68:	d0da      	beq.n	89d20 <_dtoa_r+0xde0>
   89d6a:	f1b9 0f00 	cmp.w	r9, #0
   89d6e:	f73f aecb 	bgt.w	89b08 <_dtoa_r+0xbc8>
   89d72:	e6cb      	b.n	89b0c <_dtoa_r+0xbcc>
   89d74:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d76:	2b02      	cmp	r3, #2
   89d78:	f73f adeb 	bgt.w	89952 <_dtoa_r+0xa12>
   89d7c:	9707      	str	r7, [sp, #28]
   89d7e:	e570      	b.n	89862 <_dtoa_r+0x922>
   89d80:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d82:	2b02      	cmp	r3, #2
   89d84:	f73f ade5 	bgt.w	89952 <_dtoa_r+0xa12>
   89d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89d8a:	9707      	str	r7, [sp, #28]
   89d8c:	930a      	str	r3, [sp, #40]	; 0x28
   89d8e:	e4e4      	b.n	8975a <_dtoa_r+0x81a>
   89d90:	f04f 0902 	mov.w	r9, #2
   89d94:	f7ff ba4d 	b.w	89232 <_dtoa_r+0x2f2>
   89d98:	4602      	mov	r2, r0
   89d9a:	f240 21ea 	movw	r1, #746	; 0x2ea
   89d9e:	4b17      	ldr	r3, [pc, #92]	; (89dfc <_dtoa_r+0xebc>)
   89da0:	4817      	ldr	r0, [pc, #92]	; (89e00 <_dtoa_r+0xec0>)
   89da2:	f002 f84d 	bl	8be40 <__assert_func>
   89da6:	4b17      	ldr	r3, [pc, #92]	; (89e04 <_dtoa_r+0xec4>)
   89da8:	9303      	str	r3, [sp, #12]
   89daa:	f7ff b904 	b.w	88fb6 <_dtoa_r+0x76>
   89dae:	2500      	movs	r5, #0
   89db0:	4620      	mov	r0, r4
   89db2:	4629      	mov	r1, r5
   89db4:	6465      	str	r5, [r4, #68]	; 0x44
   89db6:	f001 f8eb 	bl	8af90 <_Balloc>
   89dba:	9003      	str	r0, [sp, #12]
   89dbc:	b958      	cbnz	r0, 89dd6 <_dtoa_r+0xe96>
   89dbe:	2200      	movs	r2, #0
   89dc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   89dc4:	4b0d      	ldr	r3, [pc, #52]	; (89dfc <_dtoa_r+0xebc>)
   89dc6:	480e      	ldr	r0, [pc, #56]	; (89e00 <_dtoa_r+0xec0>)
   89dc8:	f002 f83a 	bl	8be40 <__assert_func>
   89dcc:	f43f ac0d 	beq.w	895ea <_dtoa_r+0x6aa>
   89dd0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89dd4:	e48f      	b.n	896f6 <_dtoa_r+0x7b6>
   89dd6:	f04f 33ff 	mov.w	r3, #4294967295
   89dda:	9312      	str	r3, [sp, #72]	; 0x48
   89ddc:	930a      	str	r3, [sp, #40]	; 0x28
   89dde:	2301      	movs	r3, #1
   89de0:	9a03      	ldr	r2, [sp, #12]
   89de2:	9525      	str	r5, [sp, #148]	; 0x94
   89de4:	6422      	str	r2, [r4, #64]	; 0x40
   89de6:	930c      	str	r3, [sp, #48]	; 0x30
   89de8:	f7ff bad1 	b.w	8938e <_dtoa_r+0x44e>
   89dec:	0008ce28 	.word	0x0008ce28
   89df0:	40240000 	.word	0x40240000
   89df4:	3fe00000 	.word	0x3fe00000
   89df8:	401c0000 	.word	0x401c0000
   89dfc:	0008ccdc 	.word	0x0008ccdc
   89e00:	0008ccf0 	.word	0x0008ccf0
   89e04:	0008ccd0 	.word	0x0008ccd0

00089e08 <__sflush_r>:
   89e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   89e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89e10:	460d      	mov	r5, r1
   89e12:	0711      	lsls	r1, r2, #28
   89e14:	4680      	mov	r8, r0
   89e16:	d447      	bmi.n	89ea8 <__sflush_r+0xa0>
   89e18:	686b      	ldr	r3, [r5, #4]
   89e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   89e1e:	2b00      	cmp	r3, #0
   89e20:	81aa      	strh	r2, [r5, #12]
   89e22:	dd5e      	ble.n	89ee2 <__sflush_r+0xda>
   89e24:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89e26:	2c00      	cmp	r4, #0
   89e28:	d058      	beq.n	89edc <__sflush_r+0xd4>
   89e2a:	2300      	movs	r3, #0
   89e2c:	f8d8 6000 	ldr.w	r6, [r8]
   89e30:	f8c8 3000 	str.w	r3, [r8]
   89e34:	b293      	uxth	r3, r2
   89e36:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   89e3a:	d156      	bne.n	89eea <__sflush_r+0xe2>
   89e3c:	2301      	movs	r3, #1
   89e3e:	4640      	mov	r0, r8
   89e40:	69e9      	ldr	r1, [r5, #28]
   89e42:	47a0      	blx	r4
   89e44:	1c43      	adds	r3, r0, #1
   89e46:	d067      	beq.n	89f18 <__sflush_r+0x110>
   89e48:	89ab      	ldrh	r3, [r5, #12]
   89e4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89e4c:	075f      	lsls	r7, r3, #29
   89e4e:	d505      	bpl.n	89e5c <__sflush_r+0x54>
   89e50:	686a      	ldr	r2, [r5, #4]
   89e52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   89e54:	1a80      	subs	r0, r0, r2
   89e56:	b10b      	cbz	r3, 89e5c <__sflush_r+0x54>
   89e58:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89e5a:	1ac0      	subs	r0, r0, r3
   89e5c:	4602      	mov	r2, r0
   89e5e:	69e9      	ldr	r1, [r5, #28]
   89e60:	2300      	movs	r3, #0
   89e62:	4640      	mov	r0, r8
   89e64:	47a0      	blx	r4
   89e66:	1c41      	adds	r1, r0, #1
   89e68:	d141      	bne.n	89eee <__sflush_r+0xe6>
   89e6a:	f8d8 3000 	ldr.w	r3, [r8]
   89e6e:	2b00      	cmp	r3, #0
   89e70:	d03d      	beq.n	89eee <__sflush_r+0xe6>
   89e72:	2b1d      	cmp	r3, #29
   89e74:	d001      	beq.n	89e7a <__sflush_r+0x72>
   89e76:	2b16      	cmp	r3, #22
   89e78:	d156      	bne.n	89f28 <__sflush_r+0x120>
   89e7a:	2100      	movs	r1, #0
   89e7c:	692a      	ldr	r2, [r5, #16]
   89e7e:	89ab      	ldrh	r3, [r5, #12]
   89e80:	e9c5 2100 	strd	r2, r1, [r5]
   89e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89e88:	81ab      	strh	r3, [r5, #12]
   89e8a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   89e8c:	f8c8 6000 	str.w	r6, [r8]
   89e90:	b321      	cbz	r1, 89edc <__sflush_r+0xd4>
   89e92:	f105 0340 	add.w	r3, r5, #64	; 0x40
   89e96:	4299      	cmp	r1, r3
   89e98:	d002      	beq.n	89ea0 <__sflush_r+0x98>
   89e9a:	4640      	mov	r0, r8
   89e9c:	f000 f9cc 	bl	8a238 <_free_r>
   89ea0:	2000      	movs	r0, #0
   89ea2:	6328      	str	r0, [r5, #48]	; 0x30
   89ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89ea8:	692f      	ldr	r7, [r5, #16]
   89eaa:	b1bf      	cbz	r7, 89edc <__sflush_r+0xd4>
   89eac:	b293      	uxth	r3, r2
   89eae:	079a      	lsls	r2, r3, #30
   89eb0:	bf18      	it	ne
   89eb2:	2300      	movne	r3, #0
   89eb4:	682e      	ldr	r6, [r5, #0]
   89eb6:	bf08      	it	eq
   89eb8:	696b      	ldreq	r3, [r5, #20]
   89eba:	602f      	str	r7, [r5, #0]
   89ebc:	1bf6      	subs	r6, r6, r7
   89ebe:	60ab      	str	r3, [r5, #8]
   89ec0:	e00a      	b.n	89ed8 <__sflush_r+0xd0>
   89ec2:	4633      	mov	r3, r6
   89ec4:	463a      	mov	r2, r7
   89ec6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   89ec8:	4640      	mov	r0, r8
   89eca:	69e9      	ldr	r1, [r5, #28]
   89ecc:	47a0      	blx	r4
   89ece:	1e04      	subs	r4, r0, #0
   89ed0:	eba6 0604 	sub.w	r6, r6, r4
   89ed4:	4427      	add	r7, r4
   89ed6:	dd17      	ble.n	89f08 <__sflush_r+0x100>
   89ed8:	2e00      	cmp	r6, #0
   89eda:	dcf2      	bgt.n	89ec2 <__sflush_r+0xba>
   89edc:	2000      	movs	r0, #0
   89ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89ee2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89ee4:	2b00      	cmp	r3, #0
   89ee6:	dc9d      	bgt.n	89e24 <__sflush_r+0x1c>
   89ee8:	e7f8      	b.n	89edc <__sflush_r+0xd4>
   89eea:	6d28      	ldr	r0, [r5, #80]	; 0x50
   89eec:	e7ae      	b.n	89e4c <__sflush_r+0x44>
   89eee:	2100      	movs	r1, #0
   89ef0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   89ef4:	692a      	ldr	r2, [r5, #16]
   89ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89efa:	81ab      	strh	r3, [r5, #12]
   89efc:	04db      	lsls	r3, r3, #19
   89efe:	e9c5 2100 	strd	r2, r1, [r5]
   89f02:	d5c2      	bpl.n	89e8a <__sflush_r+0x82>
   89f04:	6528      	str	r0, [r5, #80]	; 0x50
   89f06:	e7c0      	b.n	89e8a <__sflush_r+0x82>
   89f08:	89ab      	ldrh	r3, [r5, #12]
   89f0a:	f04f 30ff 	mov.w	r0, #4294967295
   89f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89f12:	81ab      	strh	r3, [r5, #12]
   89f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89f18:	f8d8 3000 	ldr.w	r3, [r8]
   89f1c:	2b00      	cmp	r3, #0
   89f1e:	d093      	beq.n	89e48 <__sflush_r+0x40>
   89f20:	2b1d      	cmp	r3, #29
   89f22:	d006      	beq.n	89f32 <__sflush_r+0x12a>
   89f24:	2b16      	cmp	r3, #22
   89f26:	d004      	beq.n	89f32 <__sflush_r+0x12a>
   89f28:	89ab      	ldrh	r3, [r5, #12]
   89f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89f2e:	81ab      	strh	r3, [r5, #12]
   89f30:	e7d5      	b.n	89ede <__sflush_r+0xd6>
   89f32:	f8c8 6000 	str.w	r6, [r8]
   89f36:	e7d1      	b.n	89edc <__sflush_r+0xd4>

00089f38 <_fflush_r>:
   89f38:	b538      	push	{r3, r4, r5, lr}
   89f3a:	460c      	mov	r4, r1
   89f3c:	4605      	mov	r5, r0
   89f3e:	b108      	cbz	r0, 89f44 <_fflush_r+0xc>
   89f40:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89f42:	b1a3      	cbz	r3, 89f6e <_fflush_r+0x36>
   89f44:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89f48:	b1b8      	cbz	r0, 89f7a <_fflush_r+0x42>
   89f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89f4c:	07db      	lsls	r3, r3, #31
   89f4e:	d401      	bmi.n	89f54 <_fflush_r+0x1c>
   89f50:	0581      	lsls	r1, r0, #22
   89f52:	d515      	bpl.n	89f80 <_fflush_r+0x48>
   89f54:	4628      	mov	r0, r5
   89f56:	4621      	mov	r1, r4
   89f58:	f7ff ff56 	bl	89e08 <__sflush_r>
   89f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89f5e:	4605      	mov	r5, r0
   89f60:	07da      	lsls	r2, r3, #31
   89f62:	d402      	bmi.n	89f6a <_fflush_r+0x32>
   89f64:	89a3      	ldrh	r3, [r4, #12]
   89f66:	059b      	lsls	r3, r3, #22
   89f68:	d50e      	bpl.n	89f88 <_fflush_r+0x50>
   89f6a:	4628      	mov	r0, r5
   89f6c:	bd38      	pop	{r3, r4, r5, pc}
   89f6e:	f000 f83f 	bl	89ff0 <__sinit>
   89f72:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89f76:	2800      	cmp	r0, #0
   89f78:	d1e7      	bne.n	89f4a <_fflush_r+0x12>
   89f7a:	4605      	mov	r5, r0
   89f7c:	4628      	mov	r0, r5
   89f7e:	bd38      	pop	{r3, r4, r5, pc}
   89f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89f82:	f000 fc07 	bl	8a794 <__retarget_lock_acquire_recursive>
   89f86:	e7e5      	b.n	89f54 <_fflush_r+0x1c>
   89f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89f8a:	f000 fc05 	bl	8a798 <__retarget_lock_release_recursive>
   89f8e:	4628      	mov	r0, r5
   89f90:	bd38      	pop	{r3, r4, r5, pc}
   89f92:	bf00      	nop

00089f94 <std>:
   89f94:	2300      	movs	r3, #0
   89f96:	b510      	push	{r4, lr}
   89f98:	4604      	mov	r4, r0
   89f9a:	e9c0 3300 	strd	r3, r3, [r0]
   89f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   89fa2:	8181      	strh	r1, [r0, #12]
   89fa4:	81c2      	strh	r2, [r0, #14]
   89fa6:	4619      	mov	r1, r3
   89fa8:	6083      	str	r3, [r0, #8]
   89faa:	6643      	str	r3, [r0, #100]	; 0x64
   89fac:	6183      	str	r3, [r0, #24]
   89fae:	2208      	movs	r2, #8
   89fb0:	305c      	adds	r0, #92	; 0x5c
   89fb2:	f7fc f853 	bl	8605c <memset>
   89fb6:	4807      	ldr	r0, [pc, #28]	; (89fd4 <std+0x40>)
   89fb8:	4907      	ldr	r1, [pc, #28]	; (89fd8 <std+0x44>)
   89fba:	4a08      	ldr	r2, [pc, #32]	; (89fdc <std+0x48>)
   89fbc:	4b08      	ldr	r3, [pc, #32]	; (89fe0 <std+0x4c>)
   89fbe:	e9c4 4007 	strd	r4, r0, [r4, #28]
   89fc2:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   89fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
   89fc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   89fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89fd0:	f000 bbdc 	b.w	8a78c <__retarget_lock_init_recursive>
   89fd4:	0008bafd 	.word	0x0008bafd
   89fd8:	0008bb21 	.word	0x0008bb21
   89fdc:	0008bb61 	.word	0x0008bb61
   89fe0:	0008bb81 	.word	0x0008bb81

00089fe4 <_cleanup_r>:
   89fe4:	4901      	ldr	r1, [pc, #4]	; (89fec <_cleanup_r+0x8>)
   89fe6:	f000 bba3 	b.w	8a730 <_fwalk_reent>
   89fea:	bf00      	nop
   89fec:	0008bf01 	.word	0x0008bf01

00089ff0 <__sinit>:
   89ff0:	b510      	push	{r4, lr}
   89ff2:	4604      	mov	r4, r0
   89ff4:	4813      	ldr	r0, [pc, #76]	; (8a044 <__sinit+0x54>)
   89ff6:	f000 fbcd 	bl	8a794 <__retarget_lock_acquire_recursive>
   89ffa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   89ffc:	b9ea      	cbnz	r2, 8a03a <__sinit+0x4a>
   89ffe:	2003      	movs	r0, #3
   8a000:	4911      	ldr	r1, [pc, #68]	; (8a048 <__sinit+0x58>)
   8a002:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a006:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a00a:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8a00e:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a010:	6860      	ldr	r0, [r4, #4]
   8a012:	2104      	movs	r1, #4
   8a014:	f7ff ffbe 	bl	89f94 <std>
   8a018:	68a0      	ldr	r0, [r4, #8]
   8a01a:	2201      	movs	r2, #1
   8a01c:	2109      	movs	r1, #9
   8a01e:	f7ff ffb9 	bl	89f94 <std>
   8a022:	68e0      	ldr	r0, [r4, #12]
   8a024:	2202      	movs	r2, #2
   8a026:	2112      	movs	r1, #18
   8a028:	f7ff ffb4 	bl	89f94 <std>
   8a02c:	2301      	movs	r3, #1
   8a02e:	4805      	ldr	r0, [pc, #20]	; (8a044 <__sinit+0x54>)
   8a030:	63a3      	str	r3, [r4, #56]	; 0x38
   8a032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a036:	f000 bbaf 	b.w	8a798 <__retarget_lock_release_recursive>
   8a03a:	4802      	ldr	r0, [pc, #8]	; (8a044 <__sinit+0x54>)
   8a03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a040:	f000 bbaa 	b.w	8a798 <__retarget_lock_release_recursive>
   8a044:	200026c0 	.word	0x200026c0
   8a048:	00089fe5 	.word	0x00089fe5

0008a04c <__sfp_lock_acquire>:
   8a04c:	4801      	ldr	r0, [pc, #4]	; (8a054 <__sfp_lock_acquire+0x8>)
   8a04e:	f000 bba1 	b.w	8a794 <__retarget_lock_acquire_recursive>
   8a052:	bf00      	nop
   8a054:	200026d4 	.word	0x200026d4

0008a058 <__sfp_lock_release>:
   8a058:	4801      	ldr	r0, [pc, #4]	; (8a060 <__sfp_lock_release+0x8>)
   8a05a:	f000 bb9d 	b.w	8a798 <__retarget_lock_release_recursive>
   8a05e:	bf00      	nop
   8a060:	200026d4 	.word	0x200026d4

0008a064 <__libc_fini_array>:
   8a064:	b538      	push	{r3, r4, r5, lr}
   8a066:	4b08      	ldr	r3, [pc, #32]	; (8a088 <__libc_fini_array+0x24>)
   8a068:	4d08      	ldr	r5, [pc, #32]	; (8a08c <__libc_fini_array+0x28>)
   8a06a:	1b5b      	subs	r3, r3, r5
   8a06c:	109c      	asrs	r4, r3, #2
   8a06e:	d007      	beq.n	8a080 <__libc_fini_array+0x1c>
   8a070:	3b04      	subs	r3, #4
   8a072:	441d      	add	r5, r3
   8a074:	3c01      	subs	r4, #1
   8a076:	f855 3904 	ldr.w	r3, [r5], #-4
   8a07a:	4798      	blx	r3
   8a07c:	2c00      	cmp	r4, #0
   8a07e:	d1f9      	bne.n	8a074 <__libc_fini_array+0x10>
   8a080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a084:	f002 bfe6 	b.w	8d054 <_fini>
   8a088:	0008d064 	.word	0x0008d064
   8a08c:	0008d060 	.word	0x0008d060

0008a090 <__fputwc>:
   8a090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a094:	b083      	sub	sp, #12
   8a096:	4607      	mov	r7, r0
   8a098:	4688      	mov	r8, r1
   8a09a:	4614      	mov	r4, r2
   8a09c:	f000 fb6c 	bl	8a778 <__locale_mb_cur_max>
   8a0a0:	2801      	cmp	r0, #1
   8a0a2:	d103      	bne.n	8a0ac <__fputwc+0x1c>
   8a0a4:	f108 33ff 	add.w	r3, r8, #4294967295
   8a0a8:	2bfe      	cmp	r3, #254	; 0xfe
   8a0aa:	d933      	bls.n	8a114 <__fputwc+0x84>
   8a0ac:	4642      	mov	r2, r8
   8a0ae:	4638      	mov	r0, r7
   8a0b0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a0b4:	a901      	add	r1, sp, #4
   8a0b6:	f001 fe3b 	bl	8bd30 <_wcrtomb_r>
   8a0ba:	1c42      	adds	r2, r0, #1
   8a0bc:	4606      	mov	r6, r0
   8a0be:	d02f      	beq.n	8a120 <__fputwc+0x90>
   8a0c0:	b318      	cbz	r0, 8a10a <__fputwc+0x7a>
   8a0c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a0c6:	2500      	movs	r5, #0
   8a0c8:	f10d 0904 	add.w	r9, sp, #4
   8a0cc:	e008      	b.n	8a0e0 <__fputwc+0x50>
   8a0ce:	6823      	ldr	r3, [r4, #0]
   8a0d0:	1c5a      	adds	r2, r3, #1
   8a0d2:	6022      	str	r2, [r4, #0]
   8a0d4:	7019      	strb	r1, [r3, #0]
   8a0d6:	3501      	adds	r5, #1
   8a0d8:	42b5      	cmp	r5, r6
   8a0da:	d216      	bcs.n	8a10a <__fputwc+0x7a>
   8a0dc:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a0e0:	68a3      	ldr	r3, [r4, #8]
   8a0e2:	3b01      	subs	r3, #1
   8a0e4:	2b00      	cmp	r3, #0
   8a0e6:	60a3      	str	r3, [r4, #8]
   8a0e8:	daf1      	bge.n	8a0ce <__fputwc+0x3e>
   8a0ea:	69a2      	ldr	r2, [r4, #24]
   8a0ec:	4293      	cmp	r3, r2
   8a0ee:	db01      	blt.n	8a0f4 <__fputwc+0x64>
   8a0f0:	290a      	cmp	r1, #10
   8a0f2:	d1ec      	bne.n	8a0ce <__fputwc+0x3e>
   8a0f4:	4622      	mov	r2, r4
   8a0f6:	4638      	mov	r0, r7
   8a0f8:	f001 fdc2 	bl	8bc80 <__swbuf_r>
   8a0fc:	1c43      	adds	r3, r0, #1
   8a0fe:	d1ea      	bne.n	8a0d6 <__fputwc+0x46>
   8a100:	4606      	mov	r6, r0
   8a102:	4630      	mov	r0, r6
   8a104:	b003      	add	sp, #12
   8a106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a10a:	4646      	mov	r6, r8
   8a10c:	4630      	mov	r0, r6
   8a10e:	b003      	add	sp, #12
   8a110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a114:	fa5f f188 	uxtb.w	r1, r8
   8a118:	4606      	mov	r6, r0
   8a11a:	f88d 1004 	strb.w	r1, [sp, #4]
   8a11e:	e7d2      	b.n	8a0c6 <__fputwc+0x36>
   8a120:	4630      	mov	r0, r6
   8a122:	89a3      	ldrh	r3, [r4, #12]
   8a124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a128:	81a3      	strh	r3, [r4, #12]
   8a12a:	b003      	add	sp, #12
   8a12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a130 <_fputwc_r>:
   8a130:	b530      	push	{r4, r5, lr}
   8a132:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a134:	4614      	mov	r4, r2
   8a136:	f013 0f01 	tst.w	r3, #1
   8a13a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a13e:	4605      	mov	r5, r0
   8a140:	b083      	sub	sp, #12
   8a142:	b29a      	uxth	r2, r3
   8a144:	d101      	bne.n	8a14a <_fputwc_r+0x1a>
   8a146:	0598      	lsls	r0, r3, #22
   8a148:	d51c      	bpl.n	8a184 <_fputwc_r+0x54>
   8a14a:	0490      	lsls	r0, r2, #18
   8a14c:	d406      	bmi.n	8a15c <_fputwc_r+0x2c>
   8a14e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a150:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a158:	81a3      	strh	r3, [r4, #12]
   8a15a:	6662      	str	r2, [r4, #100]	; 0x64
   8a15c:	4628      	mov	r0, r5
   8a15e:	4622      	mov	r2, r4
   8a160:	f7ff ff96 	bl	8a090 <__fputwc>
   8a164:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a166:	4605      	mov	r5, r0
   8a168:	07da      	lsls	r2, r3, #31
   8a16a:	d402      	bmi.n	8a172 <_fputwc_r+0x42>
   8a16c:	89a3      	ldrh	r3, [r4, #12]
   8a16e:	059b      	lsls	r3, r3, #22
   8a170:	d502      	bpl.n	8a178 <_fputwc_r+0x48>
   8a172:	4628      	mov	r0, r5
   8a174:	b003      	add	sp, #12
   8a176:	bd30      	pop	{r4, r5, pc}
   8a178:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a17a:	f000 fb0d 	bl	8a798 <__retarget_lock_release_recursive>
   8a17e:	4628      	mov	r0, r5
   8a180:	b003      	add	sp, #12
   8a182:	bd30      	pop	{r4, r5, pc}
   8a184:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a186:	9101      	str	r1, [sp, #4]
   8a188:	f000 fb04 	bl	8a794 <__retarget_lock_acquire_recursive>
   8a18c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a190:	9901      	ldr	r1, [sp, #4]
   8a192:	b29a      	uxth	r2, r3
   8a194:	e7d9      	b.n	8a14a <_fputwc_r+0x1a>
   8a196:	bf00      	nop

0008a198 <_malloc_trim_r>:
   8a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a19a:	460c      	mov	r4, r1
   8a19c:	4f23      	ldr	r7, [pc, #140]	; (8a22c <_malloc_trim_r+0x94>)
   8a19e:	4606      	mov	r6, r0
   8a1a0:	f000 feea 	bl	8af78 <__malloc_lock>
   8a1a4:	68bb      	ldr	r3, [r7, #8]
   8a1a6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a1aa:	685d      	ldr	r5, [r3, #4]
   8a1ac:	310f      	adds	r1, #15
   8a1ae:	f025 0503 	bic.w	r5, r5, #3
   8a1b2:	194b      	adds	r3, r1, r5
   8a1b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a1b8:	f023 030f 	bic.w	r3, r3, #15
   8a1bc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a1c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a1c4:	db07      	blt.n	8a1d6 <_malloc_trim_r+0x3e>
   8a1c6:	2100      	movs	r1, #0
   8a1c8:	4630      	mov	r0, r6
   8a1ca:	f001 fc85 	bl	8bad8 <_sbrk_r>
   8a1ce:	68bb      	ldr	r3, [r7, #8]
   8a1d0:	442b      	add	r3, r5
   8a1d2:	4298      	cmp	r0, r3
   8a1d4:	d004      	beq.n	8a1e0 <_malloc_trim_r+0x48>
   8a1d6:	4630      	mov	r0, r6
   8a1d8:	f000 fed4 	bl	8af84 <__malloc_unlock>
   8a1dc:	2000      	movs	r0, #0
   8a1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a1e0:	4630      	mov	r0, r6
   8a1e2:	4261      	negs	r1, r4
   8a1e4:	f001 fc78 	bl	8bad8 <_sbrk_r>
   8a1e8:	3001      	adds	r0, #1
   8a1ea:	d00d      	beq.n	8a208 <_malloc_trim_r+0x70>
   8a1ec:	4a10      	ldr	r2, [pc, #64]	; (8a230 <_malloc_trim_r+0x98>)
   8a1ee:	68b9      	ldr	r1, [r7, #8]
   8a1f0:	6813      	ldr	r3, [r2, #0]
   8a1f2:	1b2d      	subs	r5, r5, r4
   8a1f4:	f045 0501 	orr.w	r5, r5, #1
   8a1f8:	4630      	mov	r0, r6
   8a1fa:	1b1b      	subs	r3, r3, r4
   8a1fc:	604d      	str	r5, [r1, #4]
   8a1fe:	6013      	str	r3, [r2, #0]
   8a200:	f000 fec0 	bl	8af84 <__malloc_unlock>
   8a204:	2001      	movs	r0, #1
   8a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a208:	2100      	movs	r1, #0
   8a20a:	4630      	mov	r0, r6
   8a20c:	f001 fc64 	bl	8bad8 <_sbrk_r>
   8a210:	68ba      	ldr	r2, [r7, #8]
   8a212:	1a83      	subs	r3, r0, r2
   8a214:	2b0f      	cmp	r3, #15
   8a216:	ddde      	ble.n	8a1d6 <_malloc_trim_r+0x3e>
   8a218:	4906      	ldr	r1, [pc, #24]	; (8a234 <_malloc_trim_r+0x9c>)
   8a21a:	f043 0301 	orr.w	r3, r3, #1
   8a21e:	680c      	ldr	r4, [r1, #0]
   8a220:	4903      	ldr	r1, [pc, #12]	; (8a230 <_malloc_trim_r+0x98>)
   8a222:	1b00      	subs	r0, r0, r4
   8a224:	6053      	str	r3, [r2, #4]
   8a226:	6008      	str	r0, [r1, #0]
   8a228:	e7d5      	b.n	8a1d6 <_malloc_trim_r+0x3e>
   8a22a:	bf00      	nop
   8a22c:	20000f48 	.word	0x20000f48
   8a230:	200021a4 	.word	0x200021a4
   8a234:	20001350 	.word	0x20001350

0008a238 <_free_r>:
   8a238:	2900      	cmp	r1, #0
   8a23a:	d05f      	beq.n	8a2fc <_free_r+0xc4>
   8a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a23e:	460c      	mov	r4, r1
   8a240:	4606      	mov	r6, r0
   8a242:	f000 fe99 	bl	8af78 <__malloc_lock>
   8a246:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a24a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8a440 <_free_r+0x208>
   8a24e:	f1a4 0008 	sub.w	r0, r4, #8
   8a252:	f023 0101 	bic.w	r1, r3, #1
   8a256:	1842      	adds	r2, r0, r1
   8a258:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8a25c:	6855      	ldr	r5, [r2, #4]
   8a25e:	4297      	cmp	r7, r2
   8a260:	f025 0503 	bic.w	r5, r5, #3
   8a264:	f000 8089 	beq.w	8a37a <_free_r+0x142>
   8a268:	07df      	lsls	r7, r3, #31
   8a26a:	6055      	str	r5, [r2, #4]
   8a26c:	d434      	bmi.n	8a2d8 <_free_r+0xa0>
   8a26e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8a272:	f10c 0408 	add.w	r4, ip, #8
   8a276:	1bc0      	subs	r0, r0, r7
   8a278:	6883      	ldr	r3, [r0, #8]
   8a27a:	4439      	add	r1, r7
   8a27c:	42a3      	cmp	r3, r4
   8a27e:	d06a      	beq.n	8a356 <_free_r+0x11e>
   8a280:	1957      	adds	r7, r2, r5
   8a282:	687f      	ldr	r7, [r7, #4]
   8a284:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8a288:	f8c3 e00c 	str.w	lr, [r3, #12]
   8a28c:	f8ce 3008 	str.w	r3, [lr, #8]
   8a290:	07fb      	lsls	r3, r7, #31
   8a292:	f140 8097 	bpl.w	8a3c4 <_free_r+0x18c>
   8a296:	f041 0301 	orr.w	r3, r1, #1
   8a29a:	6043      	str	r3, [r0, #4]
   8a29c:	6011      	str	r1, [r2, #0]
   8a29e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a2a2:	d234      	bcs.n	8a30e <_free_r+0xd6>
   8a2a4:	2201      	movs	r2, #1
   8a2a6:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8a2aa:	08cb      	lsrs	r3, r1, #3
   8a2ac:	0949      	lsrs	r1, r1, #5
   8a2ae:	4413      	add	r3, r2
   8a2b0:	fa02 f101 	lsl.w	r1, r2, r1
   8a2b4:	4321      	orrs	r1, r4
   8a2b6:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8a2ba:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8a2be:	3a08      	subs	r2, #8
   8a2c0:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8a2c4:	f8cc 1004 	str.w	r1, [ip, #4]
   8a2c8:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8a2cc:	60e0      	str	r0, [r4, #12]
   8a2ce:	4630      	mov	r0, r6
   8a2d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a2d4:	f000 be56 	b.w	8af84 <__malloc_unlock>
   8a2d8:	1953      	adds	r3, r2, r5
   8a2da:	685b      	ldr	r3, [r3, #4]
   8a2dc:	07df      	lsls	r7, r3, #31
   8a2de:	d40e      	bmi.n	8a2fe <_free_r+0xc6>
   8a2e0:	4429      	add	r1, r5
   8a2e2:	f10c 0408 	add.w	r4, ip, #8
   8a2e6:	6893      	ldr	r3, [r2, #8]
   8a2e8:	42a3      	cmp	r3, r4
   8a2ea:	d073      	beq.n	8a3d4 <_free_r+0x19c>
   8a2ec:	68d4      	ldr	r4, [r2, #12]
   8a2ee:	f041 0201 	orr.w	r2, r1, #1
   8a2f2:	60dc      	str	r4, [r3, #12]
   8a2f4:	60a3      	str	r3, [r4, #8]
   8a2f6:	6042      	str	r2, [r0, #4]
   8a2f8:	5041      	str	r1, [r0, r1]
   8a2fa:	e7d0      	b.n	8a29e <_free_r+0x66>
   8a2fc:	4770      	bx	lr
   8a2fe:	f041 0301 	orr.w	r3, r1, #1
   8a302:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a306:	f844 3c04 	str.w	r3, [r4, #-4]
   8a30a:	6011      	str	r1, [r2, #0]
   8a30c:	d3ca      	bcc.n	8a2a4 <_free_r+0x6c>
   8a30e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a312:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a316:	d24a      	bcs.n	8a3ae <_free_r+0x176>
   8a318:	098b      	lsrs	r3, r1, #6
   8a31a:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8a31e:	00ed      	lsls	r5, r5, #3
   8a320:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a324:	f85c 3005 	ldr.w	r3, [ip, r5]
   8a328:	eb0c 0405 	add.w	r4, ip, r5
   8a32c:	3c08      	subs	r4, #8
   8a32e:	429c      	cmp	r4, r3
   8a330:	d059      	beq.n	8a3e6 <_free_r+0x1ae>
   8a332:	685a      	ldr	r2, [r3, #4]
   8a334:	f022 0203 	bic.w	r2, r2, #3
   8a338:	428a      	cmp	r2, r1
   8a33a:	d902      	bls.n	8a342 <_free_r+0x10a>
   8a33c:	689b      	ldr	r3, [r3, #8]
   8a33e:	429c      	cmp	r4, r3
   8a340:	d1f7      	bne.n	8a332 <_free_r+0xfa>
   8a342:	68dc      	ldr	r4, [r3, #12]
   8a344:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8a348:	60a0      	str	r0, [r4, #8]
   8a34a:	60d8      	str	r0, [r3, #12]
   8a34c:	4630      	mov	r0, r6
   8a34e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a352:	f000 be17 	b.w	8af84 <__malloc_unlock>
   8a356:	1953      	adds	r3, r2, r5
   8a358:	685b      	ldr	r3, [r3, #4]
   8a35a:	07db      	lsls	r3, r3, #31
   8a35c:	d466      	bmi.n	8a42c <_free_r+0x1f4>
   8a35e:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8a362:	4429      	add	r1, r5
   8a364:	f041 0401 	orr.w	r4, r1, #1
   8a368:	60d3      	str	r3, [r2, #12]
   8a36a:	609a      	str	r2, [r3, #8]
   8a36c:	6044      	str	r4, [r0, #4]
   8a36e:	5041      	str	r1, [r0, r1]
   8a370:	4630      	mov	r0, r6
   8a372:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a376:	f000 be05 	b.w	8af84 <__malloc_unlock>
   8a37a:	07db      	lsls	r3, r3, #31
   8a37c:	4429      	add	r1, r5
   8a37e:	d407      	bmi.n	8a390 <_free_r+0x158>
   8a380:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8a384:	1b00      	subs	r0, r0, r4
   8a386:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a38a:	4421      	add	r1, r4
   8a38c:	60d3      	str	r3, [r2, #12]
   8a38e:	609a      	str	r2, [r3, #8]
   8a390:	4b29      	ldr	r3, [pc, #164]	; (8a438 <_free_r+0x200>)
   8a392:	f041 0201 	orr.w	r2, r1, #1
   8a396:	681b      	ldr	r3, [r3, #0]
   8a398:	6042      	str	r2, [r0, #4]
   8a39a:	428b      	cmp	r3, r1
   8a39c:	f8cc 0008 	str.w	r0, [ip, #8]
   8a3a0:	d895      	bhi.n	8a2ce <_free_r+0x96>
   8a3a2:	4b26      	ldr	r3, [pc, #152]	; (8a43c <_free_r+0x204>)
   8a3a4:	4630      	mov	r0, r6
   8a3a6:	6819      	ldr	r1, [r3, #0]
   8a3a8:	f7ff fef6 	bl	8a198 <_malloc_trim_r>
   8a3ac:	e78f      	b.n	8a2ce <_free_r+0x96>
   8a3ae:	2b14      	cmp	r3, #20
   8a3b0:	d90a      	bls.n	8a3c8 <_free_r+0x190>
   8a3b2:	2b54      	cmp	r3, #84	; 0x54
   8a3b4:	d821      	bhi.n	8a3fa <_free_r+0x1c2>
   8a3b6:	0b0b      	lsrs	r3, r1, #12
   8a3b8:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8a3bc:	00ed      	lsls	r5, r5, #3
   8a3be:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8a3c2:	e7af      	b.n	8a324 <_free_r+0xec>
   8a3c4:	4429      	add	r1, r5
   8a3c6:	e78e      	b.n	8a2e6 <_free_r+0xae>
   8a3c8:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8a3cc:	00ed      	lsls	r5, r5, #3
   8a3ce:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8a3d2:	e7a7      	b.n	8a324 <_free_r+0xec>
   8a3d4:	f041 0301 	orr.w	r3, r1, #1
   8a3d8:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8a3dc:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8a3e0:	6043      	str	r3, [r0, #4]
   8a3e2:	5041      	str	r1, [r0, r1]
   8a3e4:	e773      	b.n	8a2ce <_free_r+0x96>
   8a3e6:	2501      	movs	r5, #1
   8a3e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8a3ec:	1092      	asrs	r2, r2, #2
   8a3ee:	fa05 f202 	lsl.w	r2, r5, r2
   8a3f2:	430a      	orrs	r2, r1
   8a3f4:	f8cc 2004 	str.w	r2, [ip, #4]
   8a3f8:	e7a4      	b.n	8a344 <_free_r+0x10c>
   8a3fa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a3fe:	d806      	bhi.n	8a40e <_free_r+0x1d6>
   8a400:	0bcb      	lsrs	r3, r1, #15
   8a402:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8a406:	00ed      	lsls	r5, r5, #3
   8a408:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8a40c:	e78a      	b.n	8a324 <_free_r+0xec>
   8a40e:	f240 5254 	movw	r2, #1364	; 0x554
   8a412:	4293      	cmp	r3, r2
   8a414:	d806      	bhi.n	8a424 <_free_r+0x1ec>
   8a416:	0c8b      	lsrs	r3, r1, #18
   8a418:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8a41c:	00ed      	lsls	r5, r5, #3
   8a41e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8a422:	e77f      	b.n	8a324 <_free_r+0xec>
   8a424:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8a428:	227e      	movs	r2, #126	; 0x7e
   8a42a:	e77b      	b.n	8a324 <_free_r+0xec>
   8a42c:	f041 0301 	orr.w	r3, r1, #1
   8a430:	6043      	str	r3, [r0, #4]
   8a432:	6011      	str	r1, [r2, #0]
   8a434:	e74b      	b.n	8a2ce <_free_r+0x96>
   8a436:	bf00      	nop
   8a438:	20001354 	.word	0x20001354
   8a43c:	200021d4 	.word	0x200021d4
   8a440:	20000f48 	.word	0x20000f48

0008a444 <__sfvwrite_r>:
   8a444:	6893      	ldr	r3, [r2, #8]
   8a446:	2b00      	cmp	r3, #0
   8a448:	f000 80bd 	beq.w	8a5c6 <__sfvwrite_r+0x182>
   8a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a450:	4690      	mov	r8, r2
   8a452:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a456:	460c      	mov	r4, r1
   8a458:	0711      	lsls	r1, r2, #28
   8a45a:	4681      	mov	r9, r0
   8a45c:	b083      	sub	sp, #12
   8a45e:	b293      	uxth	r3, r2
   8a460:	d527      	bpl.n	8a4b2 <__sfvwrite_r+0x6e>
   8a462:	6922      	ldr	r2, [r4, #16]
   8a464:	b32a      	cbz	r2, 8a4b2 <__sfvwrite_r+0x6e>
   8a466:	f013 0702 	ands.w	r7, r3, #2
   8a46a:	f8d8 5000 	ldr.w	r5, [r8]
   8a46e:	d02f      	beq.n	8a4d0 <__sfvwrite_r+0x8c>
   8a470:	f04f 0b00 	mov.w	fp, #0
   8a474:	465f      	mov	r7, fp
   8a476:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8a72c <__sfvwrite_r+0x2e8>
   8a47a:	2f00      	cmp	r7, #0
   8a47c:	f000 8089 	beq.w	8a592 <__sfvwrite_r+0x14e>
   8a480:	4557      	cmp	r7, sl
   8a482:	463b      	mov	r3, r7
   8a484:	465a      	mov	r2, fp
   8a486:	bf28      	it	cs
   8a488:	4653      	movcs	r3, sl
   8a48a:	4648      	mov	r0, r9
   8a48c:	69e1      	ldr	r1, [r4, #28]
   8a48e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a490:	47b0      	blx	r6
   8a492:	2800      	cmp	r0, #0
   8a494:	f340 808d 	ble.w	8a5b2 <__sfvwrite_r+0x16e>
   8a498:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a49c:	4483      	add	fp, r0
   8a49e:	1a1b      	subs	r3, r3, r0
   8a4a0:	1a3f      	subs	r7, r7, r0
   8a4a2:	f8c8 3008 	str.w	r3, [r8, #8]
   8a4a6:	2b00      	cmp	r3, #0
   8a4a8:	d1e7      	bne.n	8a47a <__sfvwrite_r+0x36>
   8a4aa:	2000      	movs	r0, #0
   8a4ac:	b003      	add	sp, #12
   8a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a4b2:	4621      	mov	r1, r4
   8a4b4:	4648      	mov	r0, r9
   8a4b6:	f7fe fc3b 	bl	88d30 <__swsetup_r>
   8a4ba:	2800      	cmp	r0, #0
   8a4bc:	f040 8132 	bne.w	8a724 <__sfvwrite_r+0x2e0>
   8a4c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a4c4:	f8d8 5000 	ldr.w	r5, [r8]
   8a4c8:	b293      	uxth	r3, r2
   8a4ca:	f013 0702 	ands.w	r7, r3, #2
   8a4ce:	d1cf      	bne.n	8a470 <__sfvwrite_r+0x2c>
   8a4d0:	f013 0a01 	ands.w	sl, r3, #1
   8a4d4:	d179      	bne.n	8a5ca <__sfvwrite_r+0x186>
   8a4d6:	4656      	mov	r6, sl
   8a4d8:	2e00      	cmp	r6, #0
   8a4da:	d056      	beq.n	8a58a <__sfvwrite_r+0x146>
   8a4dc:	059a      	lsls	r2, r3, #22
   8a4de:	68a7      	ldr	r7, [r4, #8]
   8a4e0:	f140 80bd 	bpl.w	8a65e <__sfvwrite_r+0x21a>
   8a4e4:	42b7      	cmp	r7, r6
   8a4e6:	46bb      	mov	fp, r7
   8a4e8:	f200 80d2 	bhi.w	8a690 <__sfvwrite_r+0x24c>
   8a4ec:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a4f0:	f000 80d0 	beq.w	8a694 <__sfvwrite_r+0x250>
   8a4f4:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8a4f8:	6822      	ldr	r2, [r4, #0]
   8a4fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8a4fe:	eba2 0b01 	sub.w	fp, r2, r1
   8a502:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8a506:	f10b 0001 	add.w	r0, fp, #1
   8a50a:	107f      	asrs	r7, r7, #1
   8a50c:	4430      	add	r0, r6
   8a50e:	42b8      	cmp	r0, r7
   8a510:	463a      	mov	r2, r7
   8a512:	bf84      	itt	hi
   8a514:	4607      	movhi	r7, r0
   8a516:	463a      	movhi	r2, r7
   8a518:	055b      	lsls	r3, r3, #21
   8a51a:	f140 80e7 	bpl.w	8a6ec <__sfvwrite_r+0x2a8>
   8a51e:	4611      	mov	r1, r2
   8a520:	4648      	mov	r0, r9
   8a522:	f000 f9bb 	bl	8a89c <_malloc_r>
   8a526:	2800      	cmp	r0, #0
   8a528:	f000 80f6 	beq.w	8a718 <__sfvwrite_r+0x2d4>
   8a52c:	465a      	mov	r2, fp
   8a52e:	6921      	ldr	r1, [r4, #16]
   8a530:	9000      	str	r0, [sp, #0]
   8a532:	f7fb fd1d 	bl	85f70 <memcpy>
   8a536:	89a2      	ldrh	r2, [r4, #12]
   8a538:	9b00      	ldr	r3, [sp, #0]
   8a53a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8a53e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8a542:	81a2      	strh	r2, [r4, #12]
   8a544:	eba7 020b 	sub.w	r2, r7, fp
   8a548:	eb03 000b 	add.w	r0, r3, fp
   8a54c:	6167      	str	r7, [r4, #20]
   8a54e:	46b3      	mov	fp, r6
   8a550:	4637      	mov	r7, r6
   8a552:	6123      	str	r3, [r4, #16]
   8a554:	6020      	str	r0, [r4, #0]
   8a556:	60a2      	str	r2, [r4, #8]
   8a558:	465a      	mov	r2, fp
   8a55a:	4651      	mov	r1, sl
   8a55c:	f000 fca2 	bl	8aea4 <memmove>
   8a560:	68a2      	ldr	r2, [r4, #8]
   8a562:	6823      	ldr	r3, [r4, #0]
   8a564:	1bd2      	subs	r2, r2, r7
   8a566:	4637      	mov	r7, r6
   8a568:	2600      	movs	r6, #0
   8a56a:	445b      	add	r3, fp
   8a56c:	60a2      	str	r2, [r4, #8]
   8a56e:	6023      	str	r3, [r4, #0]
   8a570:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8a574:	44ba      	add	sl, r7
   8a576:	1bd7      	subs	r7, r2, r7
   8a578:	f8c8 7008 	str.w	r7, [r8, #8]
   8a57c:	2f00      	cmp	r7, #0
   8a57e:	d094      	beq.n	8a4aa <__sfvwrite_r+0x66>
   8a580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a584:	b29b      	uxth	r3, r3
   8a586:	2e00      	cmp	r6, #0
   8a588:	d1a8      	bne.n	8a4dc <__sfvwrite_r+0x98>
   8a58a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8a58e:	3508      	adds	r5, #8
   8a590:	e7a2      	b.n	8a4d8 <__sfvwrite_r+0x94>
   8a592:	e9d5 b700 	ldrd	fp, r7, [r5]
   8a596:	3508      	adds	r5, #8
   8a598:	e76f      	b.n	8a47a <__sfvwrite_r+0x36>
   8a59a:	4629      	mov	r1, r5
   8a59c:	465a      	mov	r2, fp
   8a59e:	f000 fc81 	bl	8aea4 <memmove>
   8a5a2:	6823      	ldr	r3, [r4, #0]
   8a5a4:	4621      	mov	r1, r4
   8a5a6:	445b      	add	r3, fp
   8a5a8:	4648      	mov	r0, r9
   8a5aa:	6023      	str	r3, [r4, #0]
   8a5ac:	f7ff fcc4 	bl	89f38 <_fflush_r>
   8a5b0:	b358      	cbz	r0, 8a60a <__sfvwrite_r+0x1c6>
   8a5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a5b6:	f04f 30ff 	mov.w	r0, #4294967295
   8a5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a5be:	81a3      	strh	r3, [r4, #12]
   8a5c0:	b003      	add	sp, #12
   8a5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a5c6:	2000      	movs	r0, #0
   8a5c8:	4770      	bx	lr
   8a5ca:	463e      	mov	r6, r7
   8a5cc:	46aa      	mov	sl, r5
   8a5ce:	4638      	mov	r0, r7
   8a5d0:	463d      	mov	r5, r7
   8a5d2:	9700      	str	r7, [sp, #0]
   8a5d4:	b36e      	cbz	r6, 8a632 <__sfvwrite_r+0x1ee>
   8a5d6:	2800      	cmp	r0, #0
   8a5d8:	d035      	beq.n	8a646 <__sfvwrite_r+0x202>
   8a5da:	9a00      	ldr	r2, [sp, #0]
   8a5dc:	6820      	ldr	r0, [r4, #0]
   8a5de:	6921      	ldr	r1, [r4, #16]
   8a5e0:	42b2      	cmp	r2, r6
   8a5e2:	bf28      	it	cs
   8a5e4:	4632      	movcs	r2, r6
   8a5e6:	4288      	cmp	r0, r1
   8a5e8:	6963      	ldr	r3, [r4, #20]
   8a5ea:	d904      	bls.n	8a5f6 <__sfvwrite_r+0x1b2>
   8a5ec:	68a1      	ldr	r1, [r4, #8]
   8a5ee:	eb03 0b01 	add.w	fp, r3, r1
   8a5f2:	455a      	cmp	r2, fp
   8a5f4:	dcd1      	bgt.n	8a59a <__sfvwrite_r+0x156>
   8a5f6:	4293      	cmp	r3, r2
   8a5f8:	dc6b      	bgt.n	8a6d2 <__sfvwrite_r+0x28e>
   8a5fa:	462a      	mov	r2, r5
   8a5fc:	4648      	mov	r0, r9
   8a5fe:	69e1      	ldr	r1, [r4, #28]
   8a600:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a602:	47b8      	blx	r7
   8a604:	f1b0 0b00 	subs.w	fp, r0, #0
   8a608:	ddd3      	ble.n	8a5b2 <__sfvwrite_r+0x16e>
   8a60a:	9b00      	ldr	r3, [sp, #0]
   8a60c:	ebb3 030b 	subs.w	r3, r3, fp
   8a610:	9300      	str	r3, [sp, #0]
   8a612:	d057      	beq.n	8a6c4 <__sfvwrite_r+0x280>
   8a614:	2001      	movs	r0, #1
   8a616:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a61a:	445d      	add	r5, fp
   8a61c:	eba3 030b 	sub.w	r3, r3, fp
   8a620:	eba6 060b 	sub.w	r6, r6, fp
   8a624:	f8c8 3008 	str.w	r3, [r8, #8]
   8a628:	2b00      	cmp	r3, #0
   8a62a:	f43f af3e 	beq.w	8a4aa <__sfvwrite_r+0x66>
   8a62e:	2e00      	cmp	r6, #0
   8a630:	d1d1      	bne.n	8a5d6 <__sfvwrite_r+0x192>
   8a632:	f10a 0308 	add.w	r3, sl, #8
   8a636:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a63a:	469a      	mov	sl, r3
   8a63c:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a640:	3308      	adds	r3, #8
   8a642:	2e00      	cmp	r6, #0
   8a644:	d0f7      	beq.n	8a636 <__sfvwrite_r+0x1f2>
   8a646:	4632      	mov	r2, r6
   8a648:	210a      	movs	r1, #10
   8a64a:	4628      	mov	r0, r5
   8a64c:	f000 fbea 	bl	8ae24 <memchr>
   8a650:	2800      	cmp	r0, #0
   8a652:	d05e      	beq.n	8a712 <__sfvwrite_r+0x2ce>
   8a654:	3001      	adds	r0, #1
   8a656:	1b43      	subs	r3, r0, r5
   8a658:	461a      	mov	r2, r3
   8a65a:	9300      	str	r3, [sp, #0]
   8a65c:	e7be      	b.n	8a5dc <__sfvwrite_r+0x198>
   8a65e:	6820      	ldr	r0, [r4, #0]
   8a660:	6923      	ldr	r3, [r4, #16]
   8a662:	4298      	cmp	r0, r3
   8a664:	d818      	bhi.n	8a698 <__sfvwrite_r+0x254>
   8a666:	6962      	ldr	r2, [r4, #20]
   8a668:	42b2      	cmp	r2, r6
   8a66a:	d815      	bhi.n	8a698 <__sfvwrite_r+0x254>
   8a66c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8a670:	42b3      	cmp	r3, r6
   8a672:	bf28      	it	cs
   8a674:	4633      	movcs	r3, r6
   8a676:	fb93 f3f2 	sdiv	r3, r3, r2
   8a67a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a67c:	fb02 f303 	mul.w	r3, r2, r3
   8a680:	4648      	mov	r0, r9
   8a682:	4652      	mov	r2, sl
   8a684:	69e1      	ldr	r1, [r4, #28]
   8a686:	47b8      	blx	r7
   8a688:	1e07      	subs	r7, r0, #0
   8a68a:	dd92      	ble.n	8a5b2 <__sfvwrite_r+0x16e>
   8a68c:	1bf6      	subs	r6, r6, r7
   8a68e:	e76f      	b.n	8a570 <__sfvwrite_r+0x12c>
   8a690:	4637      	mov	r7, r6
   8a692:	46b3      	mov	fp, r6
   8a694:	6820      	ldr	r0, [r4, #0]
   8a696:	e75f      	b.n	8a558 <__sfvwrite_r+0x114>
   8a698:	42b7      	cmp	r7, r6
   8a69a:	bf28      	it	cs
   8a69c:	4637      	movcs	r7, r6
   8a69e:	4651      	mov	r1, sl
   8a6a0:	463a      	mov	r2, r7
   8a6a2:	f000 fbff 	bl	8aea4 <memmove>
   8a6a6:	68a3      	ldr	r3, [r4, #8]
   8a6a8:	6822      	ldr	r2, [r4, #0]
   8a6aa:	1bdb      	subs	r3, r3, r7
   8a6ac:	443a      	add	r2, r7
   8a6ae:	60a3      	str	r3, [r4, #8]
   8a6b0:	6022      	str	r2, [r4, #0]
   8a6b2:	2b00      	cmp	r3, #0
   8a6b4:	d1ea      	bne.n	8a68c <__sfvwrite_r+0x248>
   8a6b6:	4621      	mov	r1, r4
   8a6b8:	4648      	mov	r0, r9
   8a6ba:	f7ff fc3d 	bl	89f38 <_fflush_r>
   8a6be:	2800      	cmp	r0, #0
   8a6c0:	d0e4      	beq.n	8a68c <__sfvwrite_r+0x248>
   8a6c2:	e776      	b.n	8a5b2 <__sfvwrite_r+0x16e>
   8a6c4:	4621      	mov	r1, r4
   8a6c6:	4648      	mov	r0, r9
   8a6c8:	f7ff fc36 	bl	89f38 <_fflush_r>
   8a6cc:	2800      	cmp	r0, #0
   8a6ce:	d0a2      	beq.n	8a616 <__sfvwrite_r+0x1d2>
   8a6d0:	e76f      	b.n	8a5b2 <__sfvwrite_r+0x16e>
   8a6d2:	4629      	mov	r1, r5
   8a6d4:	4693      	mov	fp, r2
   8a6d6:	9201      	str	r2, [sp, #4]
   8a6d8:	f000 fbe4 	bl	8aea4 <memmove>
   8a6dc:	68a1      	ldr	r1, [r4, #8]
   8a6de:	6823      	ldr	r3, [r4, #0]
   8a6e0:	9a01      	ldr	r2, [sp, #4]
   8a6e2:	1a89      	subs	r1, r1, r2
   8a6e4:	441a      	add	r2, r3
   8a6e6:	60a1      	str	r1, [r4, #8]
   8a6e8:	6022      	str	r2, [r4, #0]
   8a6ea:	e78e      	b.n	8a60a <__sfvwrite_r+0x1c6>
   8a6ec:	4648      	mov	r0, r9
   8a6ee:	f000 ffcb 	bl	8b688 <_realloc_r>
   8a6f2:	4603      	mov	r3, r0
   8a6f4:	2800      	cmp	r0, #0
   8a6f6:	f47f af25 	bne.w	8a544 <__sfvwrite_r+0x100>
   8a6fa:	4648      	mov	r0, r9
   8a6fc:	6921      	ldr	r1, [r4, #16]
   8a6fe:	f7ff fd9b 	bl	8a238 <_free_r>
   8a702:	220c      	movs	r2, #12
   8a704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a708:	f8c9 2000 	str.w	r2, [r9]
   8a70c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8a710:	e751      	b.n	8a5b6 <__sfvwrite_r+0x172>
   8a712:	1c72      	adds	r2, r6, #1
   8a714:	9200      	str	r2, [sp, #0]
   8a716:	e761      	b.n	8a5dc <__sfvwrite_r+0x198>
   8a718:	220c      	movs	r2, #12
   8a71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a71e:	f8c9 2000 	str.w	r2, [r9]
   8a722:	e748      	b.n	8a5b6 <__sfvwrite_r+0x172>
   8a724:	f04f 30ff 	mov.w	r0, #4294967295
   8a728:	e6c0      	b.n	8a4ac <__sfvwrite_r+0x68>
   8a72a:	bf00      	nop
   8a72c:	7ffffc00 	.word	0x7ffffc00

0008a730 <_fwalk_reent>:
   8a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a734:	4607      	mov	r7, r0
   8a736:	4688      	mov	r8, r1
   8a738:	f04f 0900 	mov.w	r9, #0
   8a73c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8a740:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8a744:	3d01      	subs	r5, #1
   8a746:	d410      	bmi.n	8a76a <_fwalk_reent+0x3a>
   8a748:	89a3      	ldrh	r3, [r4, #12]
   8a74a:	3d01      	subs	r5, #1
   8a74c:	2b01      	cmp	r3, #1
   8a74e:	d908      	bls.n	8a762 <_fwalk_reent+0x32>
   8a750:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a754:	3301      	adds	r3, #1
   8a756:	d004      	beq.n	8a762 <_fwalk_reent+0x32>
   8a758:	4621      	mov	r1, r4
   8a75a:	4638      	mov	r0, r7
   8a75c:	47c0      	blx	r8
   8a75e:	ea49 0900 	orr.w	r9, r9, r0
   8a762:	1c6b      	adds	r3, r5, #1
   8a764:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a768:	d1ee      	bne.n	8a748 <_fwalk_reent+0x18>
   8a76a:	6836      	ldr	r6, [r6, #0]
   8a76c:	2e00      	cmp	r6, #0
   8a76e:	d1e7      	bne.n	8a740 <_fwalk_reent+0x10>
   8a770:	4648      	mov	r0, r9
   8a772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a776:	bf00      	nop

0008a778 <__locale_mb_cur_max>:
   8a778:	4b01      	ldr	r3, [pc, #4]	; (8a780 <__locale_mb_cur_max+0x8>)
   8a77a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a77e:	4770      	bx	lr
   8a780:	20000ddc 	.word	0x20000ddc

0008a784 <_localeconv_r>:
   8a784:	4800      	ldr	r0, [pc, #0]	; (8a788 <_localeconv_r+0x4>)
   8a786:	4770      	bx	lr
   8a788:	20000ecc 	.word	0x20000ecc

0008a78c <__retarget_lock_init_recursive>:
   8a78c:	4770      	bx	lr
   8a78e:	bf00      	nop

0008a790 <__retarget_lock_close_recursive>:
   8a790:	4770      	bx	lr
   8a792:	bf00      	nop

0008a794 <__retarget_lock_acquire_recursive>:
   8a794:	4770      	bx	lr
   8a796:	bf00      	nop

0008a798 <__retarget_lock_release_recursive>:
   8a798:	4770      	bx	lr
   8a79a:	bf00      	nop

0008a79c <__swhatbuf_r>:
   8a79c:	b570      	push	{r4, r5, r6, lr}
   8a79e:	460c      	mov	r4, r1
   8a7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a7a4:	4615      	mov	r5, r2
   8a7a6:	2900      	cmp	r1, #0
   8a7a8:	461e      	mov	r6, r3
   8a7aa:	b096      	sub	sp, #88	; 0x58
   8a7ac:	db14      	blt.n	8a7d8 <__swhatbuf_r+0x3c>
   8a7ae:	466a      	mov	r2, sp
   8a7b0:	f001 fc20 	bl	8bff4 <_fstat_r>
   8a7b4:	2800      	cmp	r0, #0
   8a7b6:	db0f      	blt.n	8a7d8 <__swhatbuf_r+0x3c>
   8a7b8:	9a01      	ldr	r2, [sp, #4]
   8a7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a7be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a7c2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a7c6:	fab2 f282 	clz	r2, r2
   8a7ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a7ce:	0952      	lsrs	r2, r2, #5
   8a7d0:	6032      	str	r2, [r6, #0]
   8a7d2:	602b      	str	r3, [r5, #0]
   8a7d4:	b016      	add	sp, #88	; 0x58
   8a7d6:	bd70      	pop	{r4, r5, r6, pc}
   8a7d8:	2300      	movs	r3, #0
   8a7da:	89a1      	ldrh	r1, [r4, #12]
   8a7dc:	6033      	str	r3, [r6, #0]
   8a7de:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8a7e2:	d004      	beq.n	8a7ee <__swhatbuf_r+0x52>
   8a7e4:	2240      	movs	r2, #64	; 0x40
   8a7e6:	4618      	mov	r0, r3
   8a7e8:	602a      	str	r2, [r5, #0]
   8a7ea:	b016      	add	sp, #88	; 0x58
   8a7ec:	bd70      	pop	{r4, r5, r6, pc}
   8a7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a7f2:	602b      	str	r3, [r5, #0]
   8a7f4:	b016      	add	sp, #88	; 0x58
   8a7f6:	bd70      	pop	{r4, r5, r6, pc}

0008a7f8 <__smakebuf_r>:
   8a7f8:	b570      	push	{r4, r5, r6, lr}
   8a7fa:	898b      	ldrh	r3, [r1, #12]
   8a7fc:	460c      	mov	r4, r1
   8a7fe:	079d      	lsls	r5, r3, #30
   8a800:	b082      	sub	sp, #8
   8a802:	d507      	bpl.n	8a814 <__smakebuf_r+0x1c>
   8a804:	2201      	movs	r2, #1
   8a806:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8a80a:	614a      	str	r2, [r1, #20]
   8a80c:	600b      	str	r3, [r1, #0]
   8a80e:	610b      	str	r3, [r1, #16]
   8a810:	b002      	add	sp, #8
   8a812:	bd70      	pop	{r4, r5, r6, pc}
   8a814:	ab01      	add	r3, sp, #4
   8a816:	466a      	mov	r2, sp
   8a818:	4606      	mov	r6, r0
   8a81a:	f7ff ffbf 	bl	8a79c <__swhatbuf_r>
   8a81e:	9900      	ldr	r1, [sp, #0]
   8a820:	4605      	mov	r5, r0
   8a822:	4630      	mov	r0, r6
   8a824:	f000 f83a 	bl	8a89c <_malloc_r>
   8a828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a82c:	b170      	cbz	r0, 8a84c <__smakebuf_r+0x54>
   8a82e:	4916      	ldr	r1, [pc, #88]	; (8a888 <__smakebuf_r+0x90>)
   8a830:	9a00      	ldr	r2, [sp, #0]
   8a832:	63f1      	str	r1, [r6, #60]	; 0x3c
   8a834:	9901      	ldr	r1, [sp, #4]
   8a836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a83a:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8a83e:	81a3      	strh	r3, [r4, #12]
   8a840:	6020      	str	r0, [r4, #0]
   8a842:	b989      	cbnz	r1, 8a868 <__smakebuf_r+0x70>
   8a844:	432b      	orrs	r3, r5
   8a846:	81a3      	strh	r3, [r4, #12]
   8a848:	b002      	add	sp, #8
   8a84a:	bd70      	pop	{r4, r5, r6, pc}
   8a84c:	059a      	lsls	r2, r3, #22
   8a84e:	d4df      	bmi.n	8a810 <__smakebuf_r+0x18>
   8a850:	2101      	movs	r1, #1
   8a852:	f023 0303 	bic.w	r3, r3, #3
   8a856:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8a85a:	f043 0302 	orr.w	r3, r3, #2
   8a85e:	81a3      	strh	r3, [r4, #12]
   8a860:	6161      	str	r1, [r4, #20]
   8a862:	6022      	str	r2, [r4, #0]
   8a864:	6122      	str	r2, [r4, #16]
   8a866:	e7d3      	b.n	8a810 <__smakebuf_r+0x18>
   8a868:	4630      	mov	r0, r6
   8a86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a86e:	f001 fbd7 	bl	8c020 <_isatty_r>
   8a872:	b910      	cbnz	r0, 8a87a <__smakebuf_r+0x82>
   8a874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a878:	e7e4      	b.n	8a844 <__smakebuf_r+0x4c>
   8a87a:	89a2      	ldrh	r2, [r4, #12]
   8a87c:	f022 0203 	bic.w	r2, r2, #3
   8a880:	f042 0201 	orr.w	r2, r2, #1
   8a884:	b213      	sxth	r3, r2
   8a886:	e7dd      	b.n	8a844 <__smakebuf_r+0x4c>
   8a888:	00089fe5 	.word	0x00089fe5

0008a88c <malloc>:
   8a88c:	4b02      	ldr	r3, [pc, #8]	; (8a898 <malloc+0xc>)
   8a88e:	4601      	mov	r1, r0
   8a890:	6818      	ldr	r0, [r3, #0]
   8a892:	f000 b803 	b.w	8a89c <_malloc_r>
   8a896:	bf00      	nop
   8a898:	200009ac 	.word	0x200009ac

0008a89c <_malloc_r>:
   8a89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a8a0:	f101 050b 	add.w	r5, r1, #11
   8a8a4:	2d16      	cmp	r5, #22
   8a8a6:	4606      	mov	r6, r0
   8a8a8:	b083      	sub	sp, #12
   8a8aa:	d824      	bhi.n	8a8f6 <_malloc_r+0x5a>
   8a8ac:	2910      	cmp	r1, #16
   8a8ae:	f200 80b6 	bhi.w	8aa1e <_malloc_r+0x182>
   8a8b2:	f000 fb61 	bl	8af78 <__malloc_lock>
   8a8b6:	2510      	movs	r5, #16
   8a8b8:	2002      	movs	r0, #2
   8a8ba:	2318      	movs	r3, #24
   8a8bc:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8ada8 <_malloc_r+0x50c>
   8a8c0:	4443      	add	r3, r8
   8a8c2:	685c      	ldr	r4, [r3, #4]
   8a8c4:	f1a3 0208 	sub.w	r2, r3, #8
   8a8c8:	4294      	cmp	r4, r2
   8a8ca:	f000 80b4 	beq.w	8aa36 <_malloc_r+0x19a>
   8a8ce:	6863      	ldr	r3, [r4, #4]
   8a8d0:	68e1      	ldr	r1, [r4, #12]
   8a8d2:	f023 0303 	bic.w	r3, r3, #3
   8a8d6:	4423      	add	r3, r4
   8a8d8:	685a      	ldr	r2, [r3, #4]
   8a8da:	68a5      	ldr	r5, [r4, #8]
   8a8dc:	f042 0201 	orr.w	r2, r2, #1
   8a8e0:	60e9      	str	r1, [r5, #12]
   8a8e2:	4630      	mov	r0, r6
   8a8e4:	608d      	str	r5, [r1, #8]
   8a8e6:	3408      	adds	r4, #8
   8a8e8:	605a      	str	r2, [r3, #4]
   8a8ea:	f000 fb4b 	bl	8af84 <__malloc_unlock>
   8a8ee:	4620      	mov	r0, r4
   8a8f0:	b003      	add	sp, #12
   8a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a8f6:	f035 0507 	bics.w	r5, r5, #7
   8a8fa:	f100 8090 	bmi.w	8aa1e <_malloc_r+0x182>
   8a8fe:	42a9      	cmp	r1, r5
   8a900:	f200 808d 	bhi.w	8aa1e <_malloc_r+0x182>
   8a904:	f000 fb38 	bl	8af78 <__malloc_lock>
   8a908:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8a90c:	f0c0 8185 	bcc.w	8ac1a <_malloc_r+0x37e>
   8a910:	0a6b      	lsrs	r3, r5, #9
   8a912:	f000 808b 	beq.w	8aa2c <_malloc_r+0x190>
   8a916:	2b04      	cmp	r3, #4
   8a918:	f200 815b 	bhi.w	8abd2 <_malloc_r+0x336>
   8a91c:	09ab      	lsrs	r3, r5, #6
   8a91e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8a922:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8a926:	00c1      	lsls	r1, r0, #3
   8a928:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8ada8 <_malloc_r+0x50c>
   8a92c:	4441      	add	r1, r8
   8a92e:	684c      	ldr	r4, [r1, #4]
   8a930:	3908      	subs	r1, #8
   8a932:	42a1      	cmp	r1, r4
   8a934:	d106      	bne.n	8a944 <_malloc_r+0xa8>
   8a936:	e00c      	b.n	8a952 <_malloc_r+0xb6>
   8a938:	2a00      	cmp	r2, #0
   8a93a:	f280 8122 	bge.w	8ab82 <_malloc_r+0x2e6>
   8a93e:	68e4      	ldr	r4, [r4, #12]
   8a940:	42a1      	cmp	r1, r4
   8a942:	d006      	beq.n	8a952 <_malloc_r+0xb6>
   8a944:	6863      	ldr	r3, [r4, #4]
   8a946:	f023 0303 	bic.w	r3, r3, #3
   8a94a:	1b5a      	subs	r2, r3, r5
   8a94c:	2a0f      	cmp	r2, #15
   8a94e:	ddf3      	ble.n	8a938 <_malloc_r+0x9c>
   8a950:	4638      	mov	r0, r7
   8a952:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8a956:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8adac <_malloc_r+0x510>
   8a95a:	4564      	cmp	r4, ip
   8a95c:	d077      	beq.n	8aa4e <_malloc_r+0x1b2>
   8a95e:	6862      	ldr	r2, [r4, #4]
   8a960:	f022 0203 	bic.w	r2, r2, #3
   8a964:	1b53      	subs	r3, r2, r5
   8a966:	2b0f      	cmp	r3, #15
   8a968:	f300 8165 	bgt.w	8ac36 <_malloc_r+0x39a>
   8a96c:	2b00      	cmp	r3, #0
   8a96e:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8a972:	f280 8156 	bge.w	8ac22 <_malloc_r+0x386>
   8a976:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8a97a:	f080 8106 	bcs.w	8ab8a <_malloc_r+0x2ee>
   8a97e:	2101      	movs	r1, #1
   8a980:	08d3      	lsrs	r3, r2, #3
   8a982:	0952      	lsrs	r2, r2, #5
   8a984:	440b      	add	r3, r1
   8a986:	fa01 f202 	lsl.w	r2, r1, r2
   8a98a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8a98e:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8a992:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8a996:	430a      	orrs	r2, r1
   8a998:	f1ae 0108 	sub.w	r1, lr, #8
   8a99c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8a9a0:	f8c8 2004 	str.w	r2, [r8, #4]
   8a9a4:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8a9a8:	60fc      	str	r4, [r7, #12]
   8a9aa:	2101      	movs	r1, #1
   8a9ac:	1083      	asrs	r3, r0, #2
   8a9ae:	4099      	lsls	r1, r3
   8a9b0:	4291      	cmp	r1, r2
   8a9b2:	d853      	bhi.n	8aa5c <_malloc_r+0x1c0>
   8a9b4:	4211      	tst	r1, r2
   8a9b6:	d106      	bne.n	8a9c6 <_malloc_r+0x12a>
   8a9b8:	f020 0003 	bic.w	r0, r0, #3
   8a9bc:	0049      	lsls	r1, r1, #1
   8a9be:	4211      	tst	r1, r2
   8a9c0:	f100 0004 	add.w	r0, r0, #4
   8a9c4:	d0fa      	beq.n	8a9bc <_malloc_r+0x120>
   8a9c6:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8a9ca:	464c      	mov	r4, r9
   8a9cc:	4686      	mov	lr, r0
   8a9ce:	68e7      	ldr	r7, [r4, #12]
   8a9d0:	42bc      	cmp	r4, r7
   8a9d2:	d107      	bne.n	8a9e4 <_malloc_r+0x148>
   8a9d4:	e109      	b.n	8abea <_malloc_r+0x34e>
   8a9d6:	2b00      	cmp	r3, #0
   8a9d8:	f280 8110 	bge.w	8abfc <_malloc_r+0x360>
   8a9dc:	68ff      	ldr	r7, [r7, #12]
   8a9de:	42bc      	cmp	r4, r7
   8a9e0:	f000 8103 	beq.w	8abea <_malloc_r+0x34e>
   8a9e4:	687a      	ldr	r2, [r7, #4]
   8a9e6:	f022 0203 	bic.w	r2, r2, #3
   8a9ea:	1b53      	subs	r3, r2, r5
   8a9ec:	2b0f      	cmp	r3, #15
   8a9ee:	ddf2      	ble.n	8a9d6 <_malloc_r+0x13a>
   8a9f0:	f045 0e01 	orr.w	lr, r5, #1
   8a9f4:	4630      	mov	r0, r6
   8a9f6:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8a9fa:	443d      	add	r5, r7
   8a9fc:	f043 0601 	orr.w	r6, r3, #1
   8aa00:	f8c7 e004 	str.w	lr, [r7, #4]
   8aa04:	60e1      	str	r1, [r4, #12]
   8aa06:	608c      	str	r4, [r1, #8]
   8aa08:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8aa0c:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8aa10:	606e      	str	r6, [r5, #4]
   8aa12:	50bb      	str	r3, [r7, r2]
   8aa14:	f000 fab6 	bl	8af84 <__malloc_unlock>
   8aa18:	f107 0408 	add.w	r4, r7, #8
   8aa1c:	e002      	b.n	8aa24 <_malloc_r+0x188>
   8aa1e:	230c      	movs	r3, #12
   8aa20:	2400      	movs	r4, #0
   8aa22:	6033      	str	r3, [r6, #0]
   8aa24:	4620      	mov	r0, r4
   8aa26:	b003      	add	sp, #12
   8aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aa2c:	f44f 7100 	mov.w	r1, #512	; 0x200
   8aa30:	2040      	movs	r0, #64	; 0x40
   8aa32:	273f      	movs	r7, #63	; 0x3f
   8aa34:	e778      	b.n	8a928 <_malloc_r+0x8c>
   8aa36:	68dc      	ldr	r4, [r3, #12]
   8aa38:	42a3      	cmp	r3, r4
   8aa3a:	bf08      	it	eq
   8aa3c:	3002      	addeq	r0, #2
   8aa3e:	f47f af46 	bne.w	8a8ce <_malloc_r+0x32>
   8aa42:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8aa46:	f8df c364 	ldr.w	ip, [pc, #868]	; 8adac <_malloc_r+0x510>
   8aa4a:	4564      	cmp	r4, ip
   8aa4c:	d187      	bne.n	8a95e <_malloc_r+0xc2>
   8aa4e:	2101      	movs	r1, #1
   8aa50:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8aa54:	1083      	asrs	r3, r0, #2
   8aa56:	4099      	lsls	r1, r3
   8aa58:	4291      	cmp	r1, r2
   8aa5a:	d9ab      	bls.n	8a9b4 <_malloc_r+0x118>
   8aa5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8aa60:	6867      	ldr	r7, [r4, #4]
   8aa62:	f027 0703 	bic.w	r7, r7, #3
   8aa66:	42bd      	cmp	r5, r7
   8aa68:	d802      	bhi.n	8aa70 <_malloc_r+0x1d4>
   8aa6a:	1b7b      	subs	r3, r7, r5
   8aa6c:	2b0f      	cmp	r3, #15
   8aa6e:	dc77      	bgt.n	8ab60 <_malloc_r+0x2c4>
   8aa70:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8adb0 <_malloc_r+0x514>
   8aa74:	4bc8      	ldr	r3, [pc, #800]	; (8ad98 <_malloc_r+0x4fc>)
   8aa76:	f8d9 2000 	ldr.w	r2, [r9]
   8aa7a:	681b      	ldr	r3, [r3, #0]
   8aa7c:	3201      	adds	r2, #1
   8aa7e:	442b      	add	r3, r5
   8aa80:	eb04 0a07 	add.w	sl, r4, r7
   8aa84:	f000 8124 	beq.w	8acd0 <_malloc_r+0x434>
   8aa88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8aa8c:	330f      	adds	r3, #15
   8aa8e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8aa92:	f02b 0b0f 	bic.w	fp, fp, #15
   8aa96:	4659      	mov	r1, fp
   8aa98:	4630      	mov	r0, r6
   8aa9a:	f001 f81d 	bl	8bad8 <_sbrk_r>
   8aa9e:	1c41      	adds	r1, r0, #1
   8aaa0:	4602      	mov	r2, r0
   8aaa2:	f000 80e1 	beq.w	8ac68 <_malloc_r+0x3cc>
   8aaa6:	4582      	cmp	sl, r0
   8aaa8:	f200 80dc 	bhi.w	8ac64 <_malloc_r+0x3c8>
   8aaac:	4bbb      	ldr	r3, [pc, #748]	; (8ad9c <_malloc_r+0x500>)
   8aaae:	6819      	ldr	r1, [r3, #0]
   8aab0:	4459      	add	r1, fp
   8aab2:	4608      	mov	r0, r1
   8aab4:	6019      	str	r1, [r3, #0]
   8aab6:	f000 8141 	beq.w	8ad3c <_malloc_r+0x4a0>
   8aaba:	f8d9 1000 	ldr.w	r1, [r9]
   8aabe:	9301      	str	r3, [sp, #4]
   8aac0:	3101      	adds	r1, #1
   8aac2:	bf1b      	ittet	ne
   8aac4:	eba2 0a0a 	subne.w	sl, r2, sl
   8aac8:	4450      	addne	r0, sl
   8aaca:	f8c9 2000 	streq.w	r2, [r9]
   8aace:	6018      	strne	r0, [r3, #0]
   8aad0:	f012 0a07 	ands.w	sl, r2, #7
   8aad4:	f000 810a 	beq.w	8acec <_malloc_r+0x450>
   8aad8:	f1ca 0108 	rsb	r1, sl, #8
   8aadc:	440a      	add	r2, r1
   8aade:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8aae2:	4493      	add	fp, r2
   8aae4:	3108      	adds	r1, #8
   8aae6:	eba1 010b 	sub.w	r1, r1, fp
   8aaea:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8aaee:	4649      	mov	r1, r9
   8aaf0:	4630      	mov	r0, r6
   8aaf2:	9200      	str	r2, [sp, #0]
   8aaf4:	f000 fff0 	bl	8bad8 <_sbrk_r>
   8aaf8:	1c42      	adds	r2, r0, #1
   8aafa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8aafe:	f000 8143 	beq.w	8ad88 <_malloc_r+0x4ec>
   8ab02:	1a80      	subs	r0, r0, r2
   8ab04:	eb00 0b09 	add.w	fp, r0, r9
   8ab08:	6819      	ldr	r1, [r3, #0]
   8ab0a:	f04b 0001 	orr.w	r0, fp, #1
   8ab0e:	4449      	add	r1, r9
   8ab10:	4544      	cmp	r4, r8
   8ab12:	f8c8 2008 	str.w	r2, [r8, #8]
   8ab16:	6019      	str	r1, [r3, #0]
   8ab18:	6050      	str	r0, [r2, #4]
   8ab1a:	f000 811c 	beq.w	8ad56 <_malloc_r+0x4ba>
   8ab1e:	2f0f      	cmp	r7, #15
   8ab20:	f240 811b 	bls.w	8ad5a <_malloc_r+0x4be>
   8ab24:	f04f 0c05 	mov.w	ip, #5
   8ab28:	6860      	ldr	r0, [r4, #4]
   8ab2a:	3f0c      	subs	r7, #12
   8ab2c:	f027 0707 	bic.w	r7, r7, #7
   8ab30:	f000 0001 	and.w	r0, r0, #1
   8ab34:	4338      	orrs	r0, r7
   8ab36:	eb04 0e07 	add.w	lr, r4, r7
   8ab3a:	2f0f      	cmp	r7, #15
   8ab3c:	6060      	str	r0, [r4, #4]
   8ab3e:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8ab42:	f200 8137 	bhi.w	8adb4 <_malloc_r+0x518>
   8ab46:	4614      	mov	r4, r2
   8ab48:	6850      	ldr	r0, [r2, #4]
   8ab4a:	4b95      	ldr	r3, [pc, #596]	; (8ada0 <_malloc_r+0x504>)
   8ab4c:	681a      	ldr	r2, [r3, #0]
   8ab4e:	428a      	cmp	r2, r1
   8ab50:	bf38      	it	cc
   8ab52:	6019      	strcc	r1, [r3, #0]
   8ab54:	4b93      	ldr	r3, [pc, #588]	; (8ada4 <_malloc_r+0x508>)
   8ab56:	681a      	ldr	r2, [r3, #0]
   8ab58:	428a      	cmp	r2, r1
   8ab5a:	bf38      	it	cc
   8ab5c:	6019      	strcc	r1, [r3, #0]
   8ab5e:	e086      	b.n	8ac6e <_malloc_r+0x3d2>
   8ab60:	f045 0201 	orr.w	r2, r5, #1
   8ab64:	f043 0301 	orr.w	r3, r3, #1
   8ab68:	4425      	add	r5, r4
   8ab6a:	6062      	str	r2, [r4, #4]
   8ab6c:	4630      	mov	r0, r6
   8ab6e:	f8c8 5008 	str.w	r5, [r8, #8]
   8ab72:	3408      	adds	r4, #8
   8ab74:	606b      	str	r3, [r5, #4]
   8ab76:	f000 fa05 	bl	8af84 <__malloc_unlock>
   8ab7a:	4620      	mov	r0, r4
   8ab7c:	b003      	add	sp, #12
   8ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ab82:	4423      	add	r3, r4
   8ab84:	685a      	ldr	r2, [r3, #4]
   8ab86:	68e1      	ldr	r1, [r4, #12]
   8ab88:	e6a7      	b.n	8a8da <_malloc_r+0x3e>
   8ab8a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8ab8e:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ab92:	d361      	bcc.n	8ac58 <_malloc_r+0x3bc>
   8ab94:	2b14      	cmp	r3, #20
   8ab96:	f200 80ba 	bhi.w	8ad0e <_malloc_r+0x472>
   8ab9a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8ab9e:	00c9      	lsls	r1, r1, #3
   8aba0:	335b      	adds	r3, #91	; 0x5b
   8aba2:	eb08 0701 	add.w	r7, r8, r1
   8aba6:	f858 1001 	ldr.w	r1, [r8, r1]
   8abaa:	3f08      	subs	r7, #8
   8abac:	428f      	cmp	r7, r1
   8abae:	f000 8092 	beq.w	8acd6 <_malloc_r+0x43a>
   8abb2:	684b      	ldr	r3, [r1, #4]
   8abb4:	f023 0303 	bic.w	r3, r3, #3
   8abb8:	4293      	cmp	r3, r2
   8abba:	d902      	bls.n	8abc2 <_malloc_r+0x326>
   8abbc:	6889      	ldr	r1, [r1, #8]
   8abbe:	428f      	cmp	r7, r1
   8abc0:	d1f7      	bne.n	8abb2 <_malloc_r+0x316>
   8abc2:	68cf      	ldr	r7, [r1, #12]
   8abc4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8abc8:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8abcc:	60bc      	str	r4, [r7, #8]
   8abce:	60cc      	str	r4, [r1, #12]
   8abd0:	e6eb      	b.n	8a9aa <_malloc_r+0x10e>
   8abd2:	2b14      	cmp	r3, #20
   8abd4:	d959      	bls.n	8ac8a <_malloc_r+0x3ee>
   8abd6:	2b54      	cmp	r3, #84	; 0x54
   8abd8:	f200 80a1 	bhi.w	8ad1e <_malloc_r+0x482>
   8abdc:	0b2b      	lsrs	r3, r5, #12
   8abde:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8abe2:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8abe6:	00c1      	lsls	r1, r0, #3
   8abe8:	e69e      	b.n	8a928 <_malloc_r+0x8c>
   8abea:	f10e 0e01 	add.w	lr, lr, #1
   8abee:	f01e 0f03 	tst.w	lr, #3
   8abf2:	f104 0408 	add.w	r4, r4, #8
   8abf6:	f47f aeea 	bne.w	8a9ce <_malloc_r+0x132>
   8abfa:	e051      	b.n	8aca0 <_malloc_r+0x404>
   8abfc:	463c      	mov	r4, r7
   8abfe:	443a      	add	r2, r7
   8ac00:	6853      	ldr	r3, [r2, #4]
   8ac02:	68f9      	ldr	r1, [r7, #12]
   8ac04:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8ac08:	f043 0301 	orr.w	r3, r3, #1
   8ac0c:	6053      	str	r3, [r2, #4]
   8ac0e:	4630      	mov	r0, r6
   8ac10:	60e9      	str	r1, [r5, #12]
   8ac12:	608d      	str	r5, [r1, #8]
   8ac14:	f000 f9b6 	bl	8af84 <__malloc_unlock>
   8ac18:	e704      	b.n	8aa24 <_malloc_r+0x188>
   8ac1a:	08e8      	lsrs	r0, r5, #3
   8ac1c:	f105 0308 	add.w	r3, r5, #8
   8ac20:	e64c      	b.n	8a8bc <_malloc_r+0x20>
   8ac22:	4422      	add	r2, r4
   8ac24:	6853      	ldr	r3, [r2, #4]
   8ac26:	4630      	mov	r0, r6
   8ac28:	f043 0301 	orr.w	r3, r3, #1
   8ac2c:	6053      	str	r3, [r2, #4]
   8ac2e:	3408      	adds	r4, #8
   8ac30:	f000 f9a8 	bl	8af84 <__malloc_unlock>
   8ac34:	e6f6      	b.n	8aa24 <_malloc_r+0x188>
   8ac36:	f045 0701 	orr.w	r7, r5, #1
   8ac3a:	f043 0101 	orr.w	r1, r3, #1
   8ac3e:	4425      	add	r5, r4
   8ac40:	6067      	str	r7, [r4, #4]
   8ac42:	4630      	mov	r0, r6
   8ac44:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8ac48:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8ac4c:	6069      	str	r1, [r5, #4]
   8ac4e:	50a3      	str	r3, [r4, r2]
   8ac50:	f000 f998 	bl	8af84 <__malloc_unlock>
   8ac54:	3408      	adds	r4, #8
   8ac56:	e6e5      	b.n	8aa24 <_malloc_r+0x188>
   8ac58:	0993      	lsrs	r3, r2, #6
   8ac5a:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8ac5e:	00c9      	lsls	r1, r1, #3
   8ac60:	3338      	adds	r3, #56	; 0x38
   8ac62:	e79e      	b.n	8aba2 <_malloc_r+0x306>
   8ac64:	4544      	cmp	r4, r8
   8ac66:	d064      	beq.n	8ad32 <_malloc_r+0x496>
   8ac68:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8ac6c:	6860      	ldr	r0, [r4, #4]
   8ac6e:	f020 0b03 	bic.w	fp, r0, #3
   8ac72:	455d      	cmp	r5, fp
   8ac74:	ebab 0305 	sub.w	r3, fp, r5
   8ac78:	d802      	bhi.n	8ac80 <_malloc_r+0x3e4>
   8ac7a:	2b0f      	cmp	r3, #15
   8ac7c:	f73f af70 	bgt.w	8ab60 <_malloc_r+0x2c4>
   8ac80:	4630      	mov	r0, r6
   8ac82:	f000 f97f 	bl	8af84 <__malloc_unlock>
   8ac86:	2400      	movs	r4, #0
   8ac88:	e6cc      	b.n	8aa24 <_malloc_r+0x188>
   8ac8a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8ac8e:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8ac92:	00c1      	lsls	r1, r0, #3
   8ac94:	e648      	b.n	8a928 <_malloc_r+0x8c>
   8ac96:	f859 3908 	ldr.w	r3, [r9], #-8
   8ac9a:	454b      	cmp	r3, r9
   8ac9c:	f040 80a9 	bne.w	8adf2 <_malloc_r+0x556>
   8aca0:	f010 0f03 	tst.w	r0, #3
   8aca4:	f100 30ff 	add.w	r0, r0, #4294967295
   8aca8:	d1f5      	bne.n	8ac96 <_malloc_r+0x3fa>
   8acaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8acae:	ea23 0301 	bic.w	r3, r3, r1
   8acb2:	f8c8 3004 	str.w	r3, [r8, #4]
   8acb6:	0049      	lsls	r1, r1, #1
   8acb8:	4299      	cmp	r1, r3
   8acba:	f63f aecf 	bhi.w	8aa5c <_malloc_r+0x1c0>
   8acbe:	b919      	cbnz	r1, 8acc8 <_malloc_r+0x42c>
   8acc0:	e6cc      	b.n	8aa5c <_malloc_r+0x1c0>
   8acc2:	0049      	lsls	r1, r1, #1
   8acc4:	f10e 0e04 	add.w	lr, lr, #4
   8acc8:	4219      	tst	r1, r3
   8acca:	d0fa      	beq.n	8acc2 <_malloc_r+0x426>
   8accc:	4670      	mov	r0, lr
   8acce:	e67a      	b.n	8a9c6 <_malloc_r+0x12a>
   8acd0:	f103 0b10 	add.w	fp, r3, #16
   8acd4:	e6df      	b.n	8aa96 <_malloc_r+0x1fa>
   8acd6:	f04f 0e01 	mov.w	lr, #1
   8acda:	109a      	asrs	r2, r3, #2
   8acdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ace0:	fa0e f202 	lsl.w	r2, lr, r2
   8ace4:	431a      	orrs	r2, r3
   8ace6:	f8c8 2004 	str.w	r2, [r8, #4]
   8acea:	e76d      	b.n	8abc8 <_malloc_r+0x32c>
   8acec:	eb02 010b 	add.w	r1, r2, fp
   8acf0:	4249      	negs	r1, r1
   8acf2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8acf6:	4649      	mov	r1, r9
   8acf8:	4630      	mov	r0, r6
   8acfa:	9200      	str	r2, [sp, #0]
   8acfc:	f000 feec 	bl	8bad8 <_sbrk_r>
   8ad00:	1c43      	adds	r3, r0, #1
   8ad02:	e9dd 2300 	ldrd	r2, r3, [sp]
   8ad06:	f47f aefc 	bne.w	8ab02 <_malloc_r+0x266>
   8ad0a:	46d1      	mov	r9, sl
   8ad0c:	e6fc      	b.n	8ab08 <_malloc_r+0x26c>
   8ad0e:	2b54      	cmp	r3, #84	; 0x54
   8ad10:	d826      	bhi.n	8ad60 <_malloc_r+0x4c4>
   8ad12:	0b13      	lsrs	r3, r2, #12
   8ad14:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8ad18:	00c9      	lsls	r1, r1, #3
   8ad1a:	336e      	adds	r3, #110	; 0x6e
   8ad1c:	e741      	b.n	8aba2 <_malloc_r+0x306>
   8ad1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8ad22:	d826      	bhi.n	8ad72 <_malloc_r+0x4d6>
   8ad24:	0beb      	lsrs	r3, r5, #15
   8ad26:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8ad2a:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8ad2e:	00c1      	lsls	r1, r0, #3
   8ad30:	e5fa      	b.n	8a928 <_malloc_r+0x8c>
   8ad32:	4b1a      	ldr	r3, [pc, #104]	; (8ad9c <_malloc_r+0x500>)
   8ad34:	6818      	ldr	r0, [r3, #0]
   8ad36:	4458      	add	r0, fp
   8ad38:	6018      	str	r0, [r3, #0]
   8ad3a:	e6be      	b.n	8aaba <_malloc_r+0x21e>
   8ad3c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8ad40:	f1bc 0f00 	cmp.w	ip, #0
   8ad44:	f47f aeb9 	bne.w	8aaba <_malloc_r+0x21e>
   8ad48:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8ad4c:	44bb      	add	fp, r7
   8ad4e:	f04b 0001 	orr.w	r0, fp, #1
   8ad52:	6060      	str	r0, [r4, #4]
   8ad54:	e6f9      	b.n	8ab4a <_malloc_r+0x2ae>
   8ad56:	4614      	mov	r4, r2
   8ad58:	e6f7      	b.n	8ab4a <_malloc_r+0x2ae>
   8ad5a:	2301      	movs	r3, #1
   8ad5c:	6053      	str	r3, [r2, #4]
   8ad5e:	e78f      	b.n	8ac80 <_malloc_r+0x3e4>
   8ad60:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8ad64:	d832      	bhi.n	8adcc <_malloc_r+0x530>
   8ad66:	0bd3      	lsrs	r3, r2, #15
   8ad68:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8ad6c:	00c9      	lsls	r1, r1, #3
   8ad6e:	3377      	adds	r3, #119	; 0x77
   8ad70:	e717      	b.n	8aba2 <_malloc_r+0x306>
   8ad72:	f240 5254 	movw	r2, #1364	; 0x554
   8ad76:	4293      	cmp	r3, r2
   8ad78:	d832      	bhi.n	8ade0 <_malloc_r+0x544>
   8ad7a:	0cab      	lsrs	r3, r5, #18
   8ad7c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8ad80:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8ad84:	00c1      	lsls	r1, r0, #3
   8ad86:	e5cf      	b.n	8a928 <_malloc_r+0x8c>
   8ad88:	f1aa 0a08 	sub.w	sl, sl, #8
   8ad8c:	44d3      	add	fp, sl
   8ad8e:	f04f 0900 	mov.w	r9, #0
   8ad92:	ebab 0b02 	sub.w	fp, fp, r2
   8ad96:	e6b7      	b.n	8ab08 <_malloc_r+0x26c>
   8ad98:	200021d4 	.word	0x200021d4
   8ad9c:	200021a4 	.word	0x200021a4
   8ada0:	200021cc 	.word	0x200021cc
   8ada4:	200021d0 	.word	0x200021d0
   8ada8:	20000f48 	.word	0x20000f48
   8adac:	20000f50 	.word	0x20000f50
   8adb0:	20001350 	.word	0x20001350
   8adb4:	f104 0108 	add.w	r1, r4, #8
   8adb8:	4630      	mov	r0, r6
   8adba:	9300      	str	r3, [sp, #0]
   8adbc:	f7ff fa3c 	bl	8a238 <_free_r>
   8adc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8adc4:	9b00      	ldr	r3, [sp, #0]
   8adc6:	6860      	ldr	r0, [r4, #4]
   8adc8:	6819      	ldr	r1, [r3, #0]
   8adca:	e6be      	b.n	8ab4a <_malloc_r+0x2ae>
   8adcc:	f240 5154 	movw	r1, #1364	; 0x554
   8add0:	428b      	cmp	r3, r1
   8add2:	d80a      	bhi.n	8adea <_malloc_r+0x54e>
   8add4:	0c93      	lsrs	r3, r2, #18
   8add6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8adda:	00c9      	lsls	r1, r1, #3
   8addc:	337c      	adds	r3, #124	; 0x7c
   8adde:	e6e0      	b.n	8aba2 <_malloc_r+0x306>
   8ade0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ade4:	207f      	movs	r0, #127	; 0x7f
   8ade6:	277e      	movs	r7, #126	; 0x7e
   8ade8:	e59e      	b.n	8a928 <_malloc_r+0x8c>
   8adea:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8adee:	237e      	movs	r3, #126	; 0x7e
   8adf0:	e6d7      	b.n	8aba2 <_malloc_r+0x306>
   8adf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8adf6:	e75e      	b.n	8acb6 <_malloc_r+0x41a>

0008adf8 <__ascii_mbtowc>:
   8adf8:	b082      	sub	sp, #8
   8adfa:	b149      	cbz	r1, 8ae10 <__ascii_mbtowc+0x18>
   8adfc:	b15a      	cbz	r2, 8ae16 <__ascii_mbtowc+0x1e>
   8adfe:	b16b      	cbz	r3, 8ae1c <__ascii_mbtowc+0x24>
   8ae00:	7813      	ldrb	r3, [r2, #0]
   8ae02:	600b      	str	r3, [r1, #0]
   8ae04:	7812      	ldrb	r2, [r2, #0]
   8ae06:	1e10      	subs	r0, r2, #0
   8ae08:	bf18      	it	ne
   8ae0a:	2001      	movne	r0, #1
   8ae0c:	b002      	add	sp, #8
   8ae0e:	4770      	bx	lr
   8ae10:	a901      	add	r1, sp, #4
   8ae12:	2a00      	cmp	r2, #0
   8ae14:	d1f3      	bne.n	8adfe <__ascii_mbtowc+0x6>
   8ae16:	4610      	mov	r0, r2
   8ae18:	b002      	add	sp, #8
   8ae1a:	4770      	bx	lr
   8ae1c:	f06f 0001 	mvn.w	r0, #1
   8ae20:	e7f4      	b.n	8ae0c <__ascii_mbtowc+0x14>
   8ae22:	bf00      	nop

0008ae24 <memchr>:
   8ae24:	b470      	push	{r4, r5, r6}
   8ae26:	0784      	lsls	r4, r0, #30
   8ae28:	b2cd      	uxtb	r5, r1
   8ae2a:	d012      	beq.n	8ae52 <memchr+0x2e>
   8ae2c:	4603      	mov	r3, r0
   8ae2e:	1e54      	subs	r4, r2, #1
   8ae30:	b92a      	cbnz	r2, 8ae3e <memchr+0x1a>
   8ae32:	e00b      	b.n	8ae4c <memchr+0x28>
   8ae34:	079a      	lsls	r2, r3, #30
   8ae36:	4618      	mov	r0, r3
   8ae38:	d00c      	beq.n	8ae54 <memchr+0x30>
   8ae3a:	3c01      	subs	r4, #1
   8ae3c:	d306      	bcc.n	8ae4c <memchr+0x28>
   8ae3e:	4618      	mov	r0, r3
   8ae40:	f813 2b01 	ldrb.w	r2, [r3], #1
   8ae44:	42aa      	cmp	r2, r5
   8ae46:	d1f5      	bne.n	8ae34 <memchr+0x10>
   8ae48:	bc70      	pop	{r4, r5, r6}
   8ae4a:	4770      	bx	lr
   8ae4c:	2000      	movs	r0, #0
   8ae4e:	bc70      	pop	{r4, r5, r6}
   8ae50:	4770      	bx	lr
   8ae52:	4614      	mov	r4, r2
   8ae54:	2c03      	cmp	r4, #3
   8ae56:	d80d      	bhi.n	8ae74 <memchr+0x50>
   8ae58:	2c00      	cmp	r4, #0
   8ae5a:	d0f7      	beq.n	8ae4c <memchr+0x28>
   8ae5c:	4602      	mov	r2, r0
   8ae5e:	1903      	adds	r3, r0, r4
   8ae60:	e001      	b.n	8ae66 <memchr+0x42>
   8ae62:	429a      	cmp	r2, r3
   8ae64:	d0f2      	beq.n	8ae4c <memchr+0x28>
   8ae66:	4610      	mov	r0, r2
   8ae68:	f812 1b01 	ldrb.w	r1, [r2], #1
   8ae6c:	42a9      	cmp	r1, r5
   8ae6e:	d1f8      	bne.n	8ae62 <memchr+0x3e>
   8ae70:	bc70      	pop	{r4, r5, r6}
   8ae72:	4770      	bx	lr
   8ae74:	4606      	mov	r6, r0
   8ae76:	020a      	lsls	r2, r1, #8
   8ae78:	b292      	uxth	r2, r2
   8ae7a:	432a      	orrs	r2, r5
   8ae7c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8ae80:	6833      	ldr	r3, [r6, #0]
   8ae82:	4630      	mov	r0, r6
   8ae84:	4053      	eors	r3, r2
   8ae86:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8ae8a:	ea21 0303 	bic.w	r3, r1, r3
   8ae8e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8ae92:	f106 0604 	add.w	r6, r6, #4
   8ae96:	d1e1      	bne.n	8ae5c <memchr+0x38>
   8ae98:	3c04      	subs	r4, #4
   8ae9a:	2c03      	cmp	r4, #3
   8ae9c:	4630      	mov	r0, r6
   8ae9e:	d8ef      	bhi.n	8ae80 <memchr+0x5c>
   8aea0:	e7da      	b.n	8ae58 <memchr+0x34>
   8aea2:	bf00      	nop

0008aea4 <memmove>:
   8aea4:	4288      	cmp	r0, r1
   8aea6:	b4f0      	push	{r4, r5, r6, r7}
   8aea8:	d90d      	bls.n	8aec6 <memmove+0x22>
   8aeaa:	188b      	adds	r3, r1, r2
   8aeac:	4283      	cmp	r3, r0
   8aeae:	d90a      	bls.n	8aec6 <memmove+0x22>
   8aeb0:	1884      	adds	r4, r0, r2
   8aeb2:	b132      	cbz	r2, 8aec2 <memmove+0x1e>
   8aeb4:	4622      	mov	r2, r4
   8aeb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8aeba:	4299      	cmp	r1, r3
   8aebc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8aec0:	d1f9      	bne.n	8aeb6 <memmove+0x12>
   8aec2:	bcf0      	pop	{r4, r5, r6, r7}
   8aec4:	4770      	bx	lr
   8aec6:	2a0f      	cmp	r2, #15
   8aec8:	d80e      	bhi.n	8aee8 <memmove+0x44>
   8aeca:	4603      	mov	r3, r0
   8aecc:	1e54      	subs	r4, r2, #1
   8aece:	2a00      	cmp	r2, #0
   8aed0:	d0f7      	beq.n	8aec2 <memmove+0x1e>
   8aed2:	3401      	adds	r4, #1
   8aed4:	440c      	add	r4, r1
   8aed6:	3b01      	subs	r3, #1
   8aed8:	f811 2b01 	ldrb.w	r2, [r1], #1
   8aedc:	42a1      	cmp	r1, r4
   8aede:	f803 2f01 	strb.w	r2, [r3, #1]!
   8aee2:	d1f9      	bne.n	8aed8 <memmove+0x34>
   8aee4:	bcf0      	pop	{r4, r5, r6, r7}
   8aee6:	4770      	bx	lr
   8aee8:	ea40 0301 	orr.w	r3, r0, r1
   8aeec:	079b      	lsls	r3, r3, #30
   8aeee:	d13e      	bne.n	8af6e <memmove+0xca>
   8aef0:	f1a2 0310 	sub.w	r3, r2, #16
   8aef4:	f023 040f 	bic.w	r4, r3, #15
   8aef8:	f101 0720 	add.w	r7, r1, #32
   8aefc:	4427      	add	r7, r4
   8aefe:	091b      	lsrs	r3, r3, #4
   8af00:	f101 0410 	add.w	r4, r1, #16
   8af04:	f100 0510 	add.w	r5, r0, #16
   8af08:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8af0c:	3410      	adds	r4, #16
   8af0e:	f845 6c10 	str.w	r6, [r5, #-16]
   8af12:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8af16:	3510      	adds	r5, #16
   8af18:	f845 6c1c 	str.w	r6, [r5, #-28]
   8af1c:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8af20:	f845 6c18 	str.w	r6, [r5, #-24]
   8af24:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8af28:	42bc      	cmp	r4, r7
   8af2a:	f845 6c14 	str.w	r6, [r5, #-20]
   8af2e:	d1eb      	bne.n	8af08 <memmove+0x64>
   8af30:	3301      	adds	r3, #1
   8af32:	f012 0f0c 	tst.w	r2, #12
   8af36:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8af3a:	f002 040f 	and.w	r4, r2, #15
   8af3e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8af42:	d017      	beq.n	8af74 <memmove+0xd0>
   8af44:	460e      	mov	r6, r1
   8af46:	3c04      	subs	r4, #4
   8af48:	f024 0c03 	bic.w	ip, r4, #3
   8af4c:	08a5      	lsrs	r5, r4, #2
   8af4e:	449c      	add	ip, r3
   8af50:	1f1c      	subs	r4, r3, #4
   8af52:	f856 7b04 	ldr.w	r7, [r6], #4
   8af56:	f844 7f04 	str.w	r7, [r4, #4]!
   8af5a:	4564      	cmp	r4, ip
   8af5c:	d1f9      	bne.n	8af52 <memmove+0xae>
   8af5e:	1c6c      	adds	r4, r5, #1
   8af60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8af64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8af68:	f002 0203 	and.w	r2, r2, #3
   8af6c:	e7ae      	b.n	8aecc <memmove+0x28>
   8af6e:	4603      	mov	r3, r0
   8af70:	1e54      	subs	r4, r2, #1
   8af72:	e7ae      	b.n	8aed2 <memmove+0x2e>
   8af74:	4622      	mov	r2, r4
   8af76:	e7a9      	b.n	8aecc <memmove+0x28>

0008af78 <__malloc_lock>:
   8af78:	4801      	ldr	r0, [pc, #4]	; (8af80 <__malloc_lock+0x8>)
   8af7a:	f7ff bc0b 	b.w	8a794 <__retarget_lock_acquire_recursive>
   8af7e:	bf00      	nop
   8af80:	200026c4 	.word	0x200026c4

0008af84 <__malloc_unlock>:
   8af84:	4801      	ldr	r0, [pc, #4]	; (8af8c <__malloc_unlock+0x8>)
   8af86:	f7ff bc07 	b.w	8a798 <__retarget_lock_release_recursive>
   8af8a:	bf00      	nop
   8af8c:	200026c4 	.word	0x200026c4

0008af90 <_Balloc>:
   8af90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8af92:	b570      	push	{r4, r5, r6, lr}
   8af94:	4605      	mov	r5, r0
   8af96:	460c      	mov	r4, r1
   8af98:	b14b      	cbz	r3, 8afae <_Balloc+0x1e>
   8af9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8af9e:	b180      	cbz	r0, 8afc2 <_Balloc+0x32>
   8afa0:	6802      	ldr	r2, [r0, #0]
   8afa2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8afa6:	2300      	movs	r3, #0
   8afa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8afac:	bd70      	pop	{r4, r5, r6, pc}
   8afae:	2221      	movs	r2, #33	; 0x21
   8afb0:	2104      	movs	r1, #4
   8afb2:	f000 ff63 	bl	8be7c <_calloc_r>
   8afb6:	4603      	mov	r3, r0
   8afb8:	64e8      	str	r0, [r5, #76]	; 0x4c
   8afba:	2800      	cmp	r0, #0
   8afbc:	d1ed      	bne.n	8af9a <_Balloc+0xa>
   8afbe:	2000      	movs	r0, #0
   8afc0:	bd70      	pop	{r4, r5, r6, pc}
   8afc2:	2101      	movs	r1, #1
   8afc4:	fa01 f604 	lsl.w	r6, r1, r4
   8afc8:	1d72      	adds	r2, r6, #5
   8afca:	4628      	mov	r0, r5
   8afcc:	0092      	lsls	r2, r2, #2
   8afce:	f000 ff55 	bl	8be7c <_calloc_r>
   8afd2:	2800      	cmp	r0, #0
   8afd4:	d0f3      	beq.n	8afbe <_Balloc+0x2e>
   8afd6:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8afda:	e7e4      	b.n	8afa6 <_Balloc+0x16>

0008afdc <_Bfree>:
   8afdc:	b131      	cbz	r1, 8afec <_Bfree+0x10>
   8afde:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8afe0:	684a      	ldr	r2, [r1, #4]
   8afe2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8afe6:	6008      	str	r0, [r1, #0]
   8afe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8afec:	4770      	bx	lr
   8afee:	bf00      	nop

0008aff0 <__multadd>:
   8aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8aff4:	4680      	mov	r8, r0
   8aff6:	461c      	mov	r4, r3
   8aff8:	2000      	movs	r0, #0
   8affa:	460f      	mov	r7, r1
   8affc:	690e      	ldr	r6, [r1, #16]
   8affe:	3114      	adds	r1, #20
   8b000:	680d      	ldr	r5, [r1, #0]
   8b002:	3001      	adds	r0, #1
   8b004:	b2ab      	uxth	r3, r5
   8b006:	fb02 4303 	mla	r3, r2, r3, r4
   8b00a:	0c2c      	lsrs	r4, r5, #16
   8b00c:	0c1d      	lsrs	r5, r3, #16
   8b00e:	fb02 5404 	mla	r4, r2, r4, r5
   8b012:	b29b      	uxth	r3, r3
   8b014:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8b018:	4286      	cmp	r6, r0
   8b01a:	f841 3b04 	str.w	r3, [r1], #4
   8b01e:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8b022:	dced      	bgt.n	8b000 <__multadd+0x10>
   8b024:	b13c      	cbz	r4, 8b036 <__multadd+0x46>
   8b026:	68bb      	ldr	r3, [r7, #8]
   8b028:	42b3      	cmp	r3, r6
   8b02a:	dd07      	ble.n	8b03c <__multadd+0x4c>
   8b02c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b030:	3601      	adds	r6, #1
   8b032:	615c      	str	r4, [r3, #20]
   8b034:	613e      	str	r6, [r7, #16]
   8b036:	4638      	mov	r0, r7
   8b038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b03c:	6879      	ldr	r1, [r7, #4]
   8b03e:	4640      	mov	r0, r8
   8b040:	3101      	adds	r1, #1
   8b042:	f7ff ffa5 	bl	8af90 <_Balloc>
   8b046:	4605      	mov	r5, r0
   8b048:	b1b0      	cbz	r0, 8b078 <__multadd+0x88>
   8b04a:	693a      	ldr	r2, [r7, #16]
   8b04c:	f107 010c 	add.w	r1, r7, #12
   8b050:	3202      	adds	r2, #2
   8b052:	0092      	lsls	r2, r2, #2
   8b054:	300c      	adds	r0, #12
   8b056:	f7fa ff8b 	bl	85f70 <memcpy>
   8b05a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b05e:	687a      	ldr	r2, [r7, #4]
   8b060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b064:	6039      	str	r1, [r7, #0]
   8b066:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b06a:	462f      	mov	r7, r5
   8b06c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b070:	3601      	adds	r6, #1
   8b072:	615c      	str	r4, [r3, #20]
   8b074:	613e      	str	r6, [r7, #16]
   8b076:	e7de      	b.n	8b036 <__multadd+0x46>
   8b078:	4602      	mov	r2, r0
   8b07a:	21b5      	movs	r1, #181	; 0xb5
   8b07c:	4b01      	ldr	r3, [pc, #4]	; (8b084 <__multadd+0x94>)
   8b07e:	4802      	ldr	r0, [pc, #8]	; (8b088 <__multadd+0x98>)
   8b080:	f000 fede 	bl	8be40 <__assert_func>
   8b084:	0008ccdc 	.word	0x0008ccdc
   8b088:	0008cd7c 	.word	0x0008cd7c

0008b08c <__hi0bits>:
   8b08c:	0c02      	lsrs	r2, r0, #16
   8b08e:	0412      	lsls	r2, r2, #16
   8b090:	4603      	mov	r3, r0
   8b092:	b9ca      	cbnz	r2, 8b0c8 <__hi0bits+0x3c>
   8b094:	0403      	lsls	r3, r0, #16
   8b096:	2010      	movs	r0, #16
   8b098:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b09c:	bf04      	itt	eq
   8b09e:	021b      	lsleq	r3, r3, #8
   8b0a0:	3008      	addeq	r0, #8
   8b0a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b0a6:	bf04      	itt	eq
   8b0a8:	011b      	lsleq	r3, r3, #4
   8b0aa:	3004      	addeq	r0, #4
   8b0ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b0b0:	bf04      	itt	eq
   8b0b2:	009b      	lsleq	r3, r3, #2
   8b0b4:	3002      	addeq	r0, #2
   8b0b6:	2b00      	cmp	r3, #0
   8b0b8:	db05      	blt.n	8b0c6 <__hi0bits+0x3a>
   8b0ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b0be:	f100 0001 	add.w	r0, r0, #1
   8b0c2:	bf08      	it	eq
   8b0c4:	2020      	moveq	r0, #32
   8b0c6:	4770      	bx	lr
   8b0c8:	2000      	movs	r0, #0
   8b0ca:	e7e5      	b.n	8b098 <__hi0bits+0xc>

0008b0cc <__lo0bits>:
   8b0cc:	6803      	ldr	r3, [r0, #0]
   8b0ce:	4601      	mov	r1, r0
   8b0d0:	f013 0207 	ands.w	r2, r3, #7
   8b0d4:	d007      	beq.n	8b0e6 <__lo0bits+0x1a>
   8b0d6:	07da      	lsls	r2, r3, #31
   8b0d8:	d420      	bmi.n	8b11c <__lo0bits+0x50>
   8b0da:	0798      	lsls	r0, r3, #30
   8b0dc:	d522      	bpl.n	8b124 <__lo0bits+0x58>
   8b0de:	085b      	lsrs	r3, r3, #1
   8b0e0:	2001      	movs	r0, #1
   8b0e2:	600b      	str	r3, [r1, #0]
   8b0e4:	4770      	bx	lr
   8b0e6:	b298      	uxth	r0, r3
   8b0e8:	b1a8      	cbz	r0, 8b116 <__lo0bits+0x4a>
   8b0ea:	4610      	mov	r0, r2
   8b0ec:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b0f0:	bf04      	itt	eq
   8b0f2:	0a1b      	lsreq	r3, r3, #8
   8b0f4:	3008      	addeq	r0, #8
   8b0f6:	071a      	lsls	r2, r3, #28
   8b0f8:	bf04      	itt	eq
   8b0fa:	091b      	lsreq	r3, r3, #4
   8b0fc:	3004      	addeq	r0, #4
   8b0fe:	079a      	lsls	r2, r3, #30
   8b100:	bf04      	itt	eq
   8b102:	089b      	lsreq	r3, r3, #2
   8b104:	3002      	addeq	r0, #2
   8b106:	07da      	lsls	r2, r3, #31
   8b108:	d403      	bmi.n	8b112 <__lo0bits+0x46>
   8b10a:	085b      	lsrs	r3, r3, #1
   8b10c:	f100 0001 	add.w	r0, r0, #1
   8b110:	d006      	beq.n	8b120 <__lo0bits+0x54>
   8b112:	600b      	str	r3, [r1, #0]
   8b114:	4770      	bx	lr
   8b116:	2010      	movs	r0, #16
   8b118:	0c1b      	lsrs	r3, r3, #16
   8b11a:	e7e7      	b.n	8b0ec <__lo0bits+0x20>
   8b11c:	2000      	movs	r0, #0
   8b11e:	4770      	bx	lr
   8b120:	2020      	movs	r0, #32
   8b122:	4770      	bx	lr
   8b124:	089b      	lsrs	r3, r3, #2
   8b126:	2002      	movs	r0, #2
   8b128:	600b      	str	r3, [r1, #0]
   8b12a:	4770      	bx	lr

0008b12c <__i2b>:
   8b12c:	b510      	push	{r4, lr}
   8b12e:	460c      	mov	r4, r1
   8b130:	2101      	movs	r1, #1
   8b132:	f7ff ff2d 	bl	8af90 <_Balloc>
   8b136:	4602      	mov	r2, r0
   8b138:	b118      	cbz	r0, 8b142 <__i2b+0x16>
   8b13a:	2301      	movs	r3, #1
   8b13c:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b140:	bd10      	pop	{r4, pc}
   8b142:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b146:	4b02      	ldr	r3, [pc, #8]	; (8b150 <__i2b+0x24>)
   8b148:	4802      	ldr	r0, [pc, #8]	; (8b154 <__i2b+0x28>)
   8b14a:	f000 fe79 	bl	8be40 <__assert_func>
   8b14e:	bf00      	nop
   8b150:	0008ccdc 	.word	0x0008ccdc
   8b154:	0008cd7c 	.word	0x0008cd7c

0008b158 <__multiply>:
   8b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b15c:	690d      	ldr	r5, [r1, #16]
   8b15e:	6917      	ldr	r7, [r2, #16]
   8b160:	460e      	mov	r6, r1
   8b162:	42bd      	cmp	r5, r7
   8b164:	4614      	mov	r4, r2
   8b166:	b085      	sub	sp, #20
   8b168:	db05      	blt.n	8b176 <__multiply+0x1e>
   8b16a:	463a      	mov	r2, r7
   8b16c:	4623      	mov	r3, r4
   8b16e:	462f      	mov	r7, r5
   8b170:	460c      	mov	r4, r1
   8b172:	4615      	mov	r5, r2
   8b174:	461e      	mov	r6, r3
   8b176:	68a3      	ldr	r3, [r4, #8]
   8b178:	6861      	ldr	r1, [r4, #4]
   8b17a:	eb07 0805 	add.w	r8, r7, r5
   8b17e:	4543      	cmp	r3, r8
   8b180:	bfb8      	it	lt
   8b182:	3101      	addlt	r1, #1
   8b184:	f7ff ff04 	bl	8af90 <_Balloc>
   8b188:	9001      	str	r0, [sp, #4]
   8b18a:	2800      	cmp	r0, #0
   8b18c:	f000 8088 	beq.w	8b2a0 <__multiply+0x148>
   8b190:	9b01      	ldr	r3, [sp, #4]
   8b192:	f103 0914 	add.w	r9, r3, #20
   8b196:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b19a:	45d1      	cmp	r9, sl
   8b19c:	d205      	bcs.n	8b1aa <__multiply+0x52>
   8b19e:	464b      	mov	r3, r9
   8b1a0:	2200      	movs	r2, #0
   8b1a2:	f843 2b04 	str.w	r2, [r3], #4
   8b1a6:	459a      	cmp	sl, r3
   8b1a8:	d8fb      	bhi.n	8b1a2 <__multiply+0x4a>
   8b1aa:	f106 0e14 	add.w	lr, r6, #20
   8b1ae:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b1b2:	f104 0314 	add.w	r3, r4, #20
   8b1b6:	45de      	cmp	lr, fp
   8b1b8:	461a      	mov	r2, r3
   8b1ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b1be:	d23e      	bcs.n	8b23e <__multiply+0xe6>
   8b1c0:	1b3b      	subs	r3, r7, r4
   8b1c2:	3b15      	subs	r3, #21
   8b1c4:	f023 0303 	bic.w	r3, r3, #3
   8b1c8:	3304      	adds	r3, #4
   8b1ca:	3415      	adds	r4, #21
   8b1cc:	42a7      	cmp	r7, r4
   8b1ce:	bf38      	it	cc
   8b1d0:	2304      	movcc	r3, #4
   8b1d2:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b1d6:	4698      	mov	r8, r3
   8b1d8:	4692      	mov	sl, r2
   8b1da:	e003      	b.n	8b1e4 <__multiply+0x8c>
   8b1dc:	45f3      	cmp	fp, lr
   8b1de:	f109 0904 	add.w	r9, r9, #4
   8b1e2:	d92a      	bls.n	8b23a <__multiply+0xe2>
   8b1e4:	f85e 0b04 	ldr.w	r0, [lr], #4
   8b1e8:	b286      	uxth	r6, r0
   8b1ea:	2e00      	cmp	r6, #0
   8b1ec:	d138      	bne.n	8b260 <__multiply+0x108>
   8b1ee:	0c00      	lsrs	r0, r0, #16
   8b1f0:	d0f4      	beq.n	8b1dc <__multiply+0x84>
   8b1f2:	f8d9 3000 	ldr.w	r3, [r9]
   8b1f6:	4654      	mov	r4, sl
   8b1f8:	461e      	mov	r6, r3
   8b1fa:	464d      	mov	r5, r9
   8b1fc:	f04f 0c00 	mov.w	ip, #0
   8b200:	8822      	ldrh	r2, [r4, #0]
   8b202:	0c36      	lsrs	r6, r6, #16
   8b204:	fb00 6602 	mla	r6, r0, r2, r6
   8b208:	b29b      	uxth	r3, r3
   8b20a:	44b4      	add	ip, r6
   8b20c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8b210:	f845 3b04 	str.w	r3, [r5], #4
   8b214:	f854 3b04 	ldr.w	r3, [r4], #4
   8b218:	682e      	ldr	r6, [r5, #0]
   8b21a:	0c1b      	lsrs	r3, r3, #16
   8b21c:	b2b2      	uxth	r2, r6
   8b21e:	fb00 2303 	mla	r3, r0, r3, r2
   8b222:	42a7      	cmp	r7, r4
   8b224:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b228:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b22c:	d8e8      	bhi.n	8b200 <__multiply+0xa8>
   8b22e:	45f3      	cmp	fp, lr
   8b230:	f849 3008 	str.w	r3, [r9, r8]
   8b234:	f109 0904 	add.w	r9, r9, #4
   8b238:	d8d4      	bhi.n	8b1e4 <__multiply+0x8c>
   8b23a:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8b23e:	f1b8 0f00 	cmp.w	r8, #0
   8b242:	dc03      	bgt.n	8b24c <__multiply+0xf4>
   8b244:	e006      	b.n	8b254 <__multiply+0xfc>
   8b246:	f1b8 0801 	subs.w	r8, r8, #1
   8b24a:	d003      	beq.n	8b254 <__multiply+0xfc>
   8b24c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b250:	2b00      	cmp	r3, #0
   8b252:	d0f8      	beq.n	8b246 <__multiply+0xee>
   8b254:	9801      	ldr	r0, [sp, #4]
   8b256:	f8c0 8010 	str.w	r8, [r0, #16]
   8b25a:	b005      	add	sp, #20
   8b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b260:	4655      	mov	r5, sl
   8b262:	464c      	mov	r4, r9
   8b264:	2300      	movs	r3, #0
   8b266:	f855 1b04 	ldr.w	r1, [r5], #4
   8b26a:	6820      	ldr	r0, [r4, #0]
   8b26c:	b28a      	uxth	r2, r1
   8b26e:	fa1f fc80 	uxth.w	ip, r0
   8b272:	fb06 c202 	mla	r2, r6, r2, ip
   8b276:	0c09      	lsrs	r1, r1, #16
   8b278:	0c00      	lsrs	r0, r0, #16
   8b27a:	fb06 0101 	mla	r1, r6, r1, r0
   8b27e:	4413      	add	r3, r2
   8b280:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8b284:	b29b      	uxth	r3, r3
   8b286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b28a:	42af      	cmp	r7, r5
   8b28c:	f844 3b04 	str.w	r3, [r4], #4
   8b290:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b294:	d8e7      	bhi.n	8b266 <__multiply+0x10e>
   8b296:	f849 3008 	str.w	r3, [r9, r8]
   8b29a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8b29e:	e7a6      	b.n	8b1ee <__multiply+0x96>
   8b2a0:	4602      	mov	r2, r0
   8b2a2:	f240 115d 	movw	r1, #349	; 0x15d
   8b2a6:	4b02      	ldr	r3, [pc, #8]	; (8b2b0 <__multiply+0x158>)
   8b2a8:	4802      	ldr	r0, [pc, #8]	; (8b2b4 <__multiply+0x15c>)
   8b2aa:	f000 fdc9 	bl	8be40 <__assert_func>
   8b2ae:	bf00      	nop
   8b2b0:	0008ccdc 	.word	0x0008ccdc
   8b2b4:	0008cd7c 	.word	0x0008cd7c

0008b2b8 <__pow5mult>:
   8b2b8:	f012 0303 	ands.w	r3, r2, #3
   8b2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b2c0:	4614      	mov	r4, r2
   8b2c2:	4607      	mov	r7, r0
   8b2c4:	d12e      	bne.n	8b324 <__pow5mult+0x6c>
   8b2c6:	460e      	mov	r6, r1
   8b2c8:	10a4      	asrs	r4, r4, #2
   8b2ca:	d01c      	beq.n	8b306 <__pow5mult+0x4e>
   8b2cc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b2ce:	b395      	cbz	r5, 8b336 <__pow5mult+0x7e>
   8b2d0:	07e3      	lsls	r3, r4, #31
   8b2d2:	f04f 0800 	mov.w	r8, #0
   8b2d6:	d406      	bmi.n	8b2e6 <__pow5mult+0x2e>
   8b2d8:	1064      	asrs	r4, r4, #1
   8b2da:	d014      	beq.n	8b306 <__pow5mult+0x4e>
   8b2dc:	6828      	ldr	r0, [r5, #0]
   8b2de:	b1a8      	cbz	r0, 8b30c <__pow5mult+0x54>
   8b2e0:	4605      	mov	r5, r0
   8b2e2:	07e3      	lsls	r3, r4, #31
   8b2e4:	d5f8      	bpl.n	8b2d8 <__pow5mult+0x20>
   8b2e6:	462a      	mov	r2, r5
   8b2e8:	4631      	mov	r1, r6
   8b2ea:	4638      	mov	r0, r7
   8b2ec:	f7ff ff34 	bl	8b158 <__multiply>
   8b2f0:	b1b6      	cbz	r6, 8b320 <__pow5mult+0x68>
   8b2f2:	6871      	ldr	r1, [r6, #4]
   8b2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b2f6:	1064      	asrs	r4, r4, #1
   8b2f8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b2fc:	6032      	str	r2, [r6, #0]
   8b2fe:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b302:	4606      	mov	r6, r0
   8b304:	d1ea      	bne.n	8b2dc <__pow5mult+0x24>
   8b306:	4630      	mov	r0, r6
   8b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b30c:	462a      	mov	r2, r5
   8b30e:	4629      	mov	r1, r5
   8b310:	4638      	mov	r0, r7
   8b312:	f7ff ff21 	bl	8b158 <__multiply>
   8b316:	6028      	str	r0, [r5, #0]
   8b318:	4605      	mov	r5, r0
   8b31a:	f8c0 8000 	str.w	r8, [r0]
   8b31e:	e7e0      	b.n	8b2e2 <__pow5mult+0x2a>
   8b320:	4606      	mov	r6, r0
   8b322:	e7d9      	b.n	8b2d8 <__pow5mult+0x20>
   8b324:	4a09      	ldr	r2, [pc, #36]	; (8b34c <__pow5mult+0x94>)
   8b326:	3b01      	subs	r3, #1
   8b328:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b32c:	2300      	movs	r3, #0
   8b32e:	f7ff fe5f 	bl	8aff0 <__multadd>
   8b332:	4606      	mov	r6, r0
   8b334:	e7c8      	b.n	8b2c8 <__pow5mult+0x10>
   8b336:	f240 2171 	movw	r1, #625	; 0x271
   8b33a:	4638      	mov	r0, r7
   8b33c:	f7ff fef6 	bl	8b12c <__i2b>
   8b340:	2300      	movs	r3, #0
   8b342:	64b8      	str	r0, [r7, #72]	; 0x48
   8b344:	4605      	mov	r5, r0
   8b346:	6003      	str	r3, [r0, #0]
   8b348:	e7c2      	b.n	8b2d0 <__pow5mult+0x18>
   8b34a:	bf00      	nop
   8b34c:	0008cef0 	.word	0x0008cef0

0008b350 <__lshift>:
   8b350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b354:	690f      	ldr	r7, [r1, #16]
   8b356:	688b      	ldr	r3, [r1, #8]
   8b358:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8b35c:	1c7e      	adds	r6, r7, #1
   8b35e:	429e      	cmp	r6, r3
   8b360:	460d      	mov	r5, r1
   8b362:	4691      	mov	r9, r2
   8b364:	4680      	mov	r8, r0
   8b366:	6849      	ldr	r1, [r1, #4]
   8b368:	ea4f 1462 	mov.w	r4, r2, asr #5
   8b36c:	dd04      	ble.n	8b378 <__lshift+0x28>
   8b36e:	005b      	lsls	r3, r3, #1
   8b370:	429e      	cmp	r6, r3
   8b372:	f101 0101 	add.w	r1, r1, #1
   8b376:	dcfa      	bgt.n	8b36e <__lshift+0x1e>
   8b378:	4640      	mov	r0, r8
   8b37a:	f7ff fe09 	bl	8af90 <_Balloc>
   8b37e:	2800      	cmp	r0, #0
   8b380:	d04f      	beq.n	8b422 <__lshift+0xd2>
   8b382:	2c00      	cmp	r4, #0
   8b384:	f100 0114 	add.w	r1, r0, #20
   8b388:	dd0d      	ble.n	8b3a6 <__lshift+0x56>
   8b38a:	460b      	mov	r3, r1
   8b38c:	2200      	movs	r2, #0
   8b38e:	3405      	adds	r4, #5
   8b390:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8b394:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8b398:	f843 2b04 	str.w	r2, [r3], #4
   8b39c:	42a3      	cmp	r3, r4
   8b39e:	d1fb      	bne.n	8b398 <__lshift+0x48>
   8b3a0:	f1ac 0314 	sub.w	r3, ip, #20
   8b3a4:	4419      	add	r1, r3
   8b3a6:	692c      	ldr	r4, [r5, #16]
   8b3a8:	f105 0314 	add.w	r3, r5, #20
   8b3ac:	f019 091f 	ands.w	r9, r9, #31
   8b3b0:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8b3b4:	d02d      	beq.n	8b412 <__lshift+0xc2>
   8b3b6:	468e      	mov	lr, r1
   8b3b8:	f04f 0a00 	mov.w	sl, #0
   8b3bc:	f1c9 0220 	rsb	r2, r9, #32
   8b3c0:	681c      	ldr	r4, [r3, #0]
   8b3c2:	fa04 f409 	lsl.w	r4, r4, r9
   8b3c6:	ea44 040a 	orr.w	r4, r4, sl
   8b3ca:	f84e 4b04 	str.w	r4, [lr], #4
   8b3ce:	f853 4b04 	ldr.w	r4, [r3], #4
   8b3d2:	459c      	cmp	ip, r3
   8b3d4:	fa24 fa02 	lsr.w	sl, r4, r2
   8b3d8:	d8f2      	bhi.n	8b3c0 <__lshift+0x70>
   8b3da:	ebac 0305 	sub.w	r3, ip, r5
   8b3de:	3b15      	subs	r3, #21
   8b3e0:	f023 0303 	bic.w	r3, r3, #3
   8b3e4:	3304      	adds	r3, #4
   8b3e6:	f105 0215 	add.w	r2, r5, #21
   8b3ea:	4594      	cmp	ip, r2
   8b3ec:	bf38      	it	cc
   8b3ee:	2304      	movcc	r3, #4
   8b3f0:	f1ba 0f00 	cmp.w	sl, #0
   8b3f4:	bf18      	it	ne
   8b3f6:	4637      	movne	r7, r6
   8b3f8:	f841 a003 	str.w	sl, [r1, r3]
   8b3fc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b400:	686a      	ldr	r2, [r5, #4]
   8b402:	6107      	str	r7, [r0, #16]
   8b404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b408:	6029      	str	r1, [r5, #0]
   8b40a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b412:	3904      	subs	r1, #4
   8b414:	f853 2b04 	ldr.w	r2, [r3], #4
   8b418:	459c      	cmp	ip, r3
   8b41a:	f841 2f04 	str.w	r2, [r1, #4]!
   8b41e:	d8f9      	bhi.n	8b414 <__lshift+0xc4>
   8b420:	e7ec      	b.n	8b3fc <__lshift+0xac>
   8b422:	4602      	mov	r2, r0
   8b424:	f240 11d9 	movw	r1, #473	; 0x1d9
   8b428:	4b01      	ldr	r3, [pc, #4]	; (8b430 <__lshift+0xe0>)
   8b42a:	4802      	ldr	r0, [pc, #8]	; (8b434 <__lshift+0xe4>)
   8b42c:	f000 fd08 	bl	8be40 <__assert_func>
   8b430:	0008ccdc 	.word	0x0008ccdc
   8b434:	0008cd7c 	.word	0x0008cd7c

0008b438 <__mcmp>:
   8b438:	b430      	push	{r4, r5}
   8b43a:	690b      	ldr	r3, [r1, #16]
   8b43c:	4605      	mov	r5, r0
   8b43e:	6900      	ldr	r0, [r0, #16]
   8b440:	1ac0      	subs	r0, r0, r3
   8b442:	d111      	bne.n	8b468 <__mcmp+0x30>
   8b444:	3514      	adds	r5, #20
   8b446:	3114      	adds	r1, #20
   8b448:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8b44c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8b450:	e001      	b.n	8b456 <__mcmp+0x1e>
   8b452:	429d      	cmp	r5, r3
   8b454:	d208      	bcs.n	8b468 <__mcmp+0x30>
   8b456:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b45a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b45e:	428c      	cmp	r4, r1
   8b460:	d0f7      	beq.n	8b452 <__mcmp+0x1a>
   8b462:	d203      	bcs.n	8b46c <__mcmp+0x34>
   8b464:	f04f 30ff 	mov.w	r0, #4294967295
   8b468:	bc30      	pop	{r4, r5}
   8b46a:	4770      	bx	lr
   8b46c:	2001      	movs	r0, #1
   8b46e:	bc30      	pop	{r4, r5}
   8b470:	4770      	bx	lr
   8b472:	bf00      	nop

0008b474 <__mdiff>:
   8b474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b478:	690b      	ldr	r3, [r1, #16]
   8b47a:	460c      	mov	r4, r1
   8b47c:	6911      	ldr	r1, [r2, #16]
   8b47e:	4690      	mov	r8, r2
   8b480:	eba3 0b01 	sub.w	fp, r3, r1
   8b484:	f1bb 0f00 	cmp.w	fp, #0
   8b488:	d17c      	bne.n	8b584 <__mdiff+0x110>
   8b48a:	f104 0614 	add.w	r6, r4, #20
   8b48e:	3214      	adds	r2, #20
   8b490:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8b494:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8b498:	e001      	b.n	8b49e <__mdiff+0x2a>
   8b49a:	429e      	cmp	r6, r3
   8b49c:	d276      	bcs.n	8b58c <__mdiff+0x118>
   8b49e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b4a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b4a6:	428d      	cmp	r5, r1
   8b4a8:	d0f7      	beq.n	8b49a <__mdiff+0x26>
   8b4aa:	d365      	bcc.n	8b578 <__mdiff+0x104>
   8b4ac:	6861      	ldr	r1, [r4, #4]
   8b4ae:	f7ff fd6f 	bl	8af90 <_Balloc>
   8b4b2:	2800      	cmp	r0, #0
   8b4b4:	d074      	beq.n	8b5a0 <__mdiff+0x12c>
   8b4b6:	f100 0614 	add.w	r6, r0, #20
   8b4ba:	46b4      	mov	ip, r6
   8b4bc:	2300      	movs	r3, #0
   8b4be:	6927      	ldr	r7, [r4, #16]
   8b4c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8b4c4:	f104 0a14 	add.w	sl, r4, #20
   8b4c8:	f108 0514 	add.w	r5, r8, #20
   8b4cc:	f8c0 b00c 	str.w	fp, [r0, #12]
   8b4d0:	3410      	adds	r4, #16
   8b4d2:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8b4d6:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8b4da:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8b4de:	f855 bb04 	ldr.w	fp, [r5], #4
   8b4e2:	b291      	uxth	r1, r2
   8b4e4:	440b      	add	r3, r1
   8b4e6:	fa1f f18b 	uxth.w	r1, fp
   8b4ea:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8b4ee:	1a59      	subs	r1, r3, r1
   8b4f0:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8b4f4:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8b4f8:	b289      	uxth	r1, r1
   8b4fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b4fe:	45a9      	cmp	r9, r5
   8b500:	f84c 1b04 	str.w	r1, [ip], #4
   8b504:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b508:	d8e7      	bhi.n	8b4da <__mdiff+0x66>
   8b50a:	eba9 0208 	sub.w	r2, r9, r8
   8b50e:	3a15      	subs	r2, #21
   8b510:	f108 0815 	add.w	r8, r8, #21
   8b514:	45c1      	cmp	r9, r8
   8b516:	f022 0403 	bic.w	r4, r2, #3
   8b51a:	f104 0404 	add.w	r4, r4, #4
   8b51e:	bf38      	it	cc
   8b520:	2404      	movcc	r4, #4
   8b522:	f022 0203 	bic.w	r2, r2, #3
   8b526:	bf38      	it	cc
   8b528:	2200      	movcc	r2, #0
   8b52a:	44a2      	add	sl, r4
   8b52c:	45d6      	cmp	lr, sl
   8b52e:	4434      	add	r4, r6
   8b530:	4416      	add	r6, r2
   8b532:	d918      	bls.n	8b566 <__mdiff+0xf2>
   8b534:	4625      	mov	r5, r4
   8b536:	4652      	mov	r2, sl
   8b538:	f852 6b04 	ldr.w	r6, [r2], #4
   8b53c:	b2b1      	uxth	r1, r6
   8b53e:	4419      	add	r1, r3
   8b540:	140b      	asrs	r3, r1, #16
   8b542:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8b546:	b289      	uxth	r1, r1
   8b548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b54c:	4596      	cmp	lr, r2
   8b54e:	f845 1b04 	str.w	r1, [r5], #4
   8b552:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b556:	d8ef      	bhi.n	8b538 <__mdiff+0xc4>
   8b558:	f10e 36ff 	add.w	r6, lr, #4294967295
   8b55c:	eba6 060a 	sub.w	r6, r6, sl
   8b560:	f026 0603 	bic.w	r6, r6, #3
   8b564:	4426      	add	r6, r4
   8b566:	b921      	cbnz	r1, 8b572 <__mdiff+0xfe>
   8b568:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8b56c:	3f01      	subs	r7, #1
   8b56e:	2b00      	cmp	r3, #0
   8b570:	d0fa      	beq.n	8b568 <__mdiff+0xf4>
   8b572:	6107      	str	r7, [r0, #16]
   8b574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b578:	4623      	mov	r3, r4
   8b57a:	f04f 0b01 	mov.w	fp, #1
   8b57e:	4644      	mov	r4, r8
   8b580:	4698      	mov	r8, r3
   8b582:	e793      	b.n	8b4ac <__mdiff+0x38>
   8b584:	dbf8      	blt.n	8b578 <__mdiff+0x104>
   8b586:	f04f 0b00 	mov.w	fp, #0
   8b58a:	e78f      	b.n	8b4ac <__mdiff+0x38>
   8b58c:	2100      	movs	r1, #0
   8b58e:	f7ff fcff 	bl	8af90 <_Balloc>
   8b592:	b160      	cbz	r0, 8b5ae <__mdiff+0x13a>
   8b594:	2201      	movs	r2, #1
   8b596:	2300      	movs	r3, #0
   8b598:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8b59c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b5a0:	4602      	mov	r2, r0
   8b5a2:	f44f 7110 	mov.w	r1, #576	; 0x240
   8b5a6:	4b05      	ldr	r3, [pc, #20]	; (8b5bc <__mdiff+0x148>)
   8b5a8:	4805      	ldr	r0, [pc, #20]	; (8b5c0 <__mdiff+0x14c>)
   8b5aa:	f000 fc49 	bl	8be40 <__assert_func>
   8b5ae:	4602      	mov	r2, r0
   8b5b0:	f240 2132 	movw	r1, #562	; 0x232
   8b5b4:	4b01      	ldr	r3, [pc, #4]	; (8b5bc <__mdiff+0x148>)
   8b5b6:	4802      	ldr	r0, [pc, #8]	; (8b5c0 <__mdiff+0x14c>)
   8b5b8:	f000 fc42 	bl	8be40 <__assert_func>
   8b5bc:	0008ccdc 	.word	0x0008ccdc
   8b5c0:	0008cd7c 	.word	0x0008cd7c

0008b5c4 <__d2b>:
   8b5c4:	b570      	push	{r4, r5, r6, lr}
   8b5c6:	2101      	movs	r1, #1
   8b5c8:	b082      	sub	sp, #8
   8b5ca:	4616      	mov	r6, r2
   8b5cc:	461d      	mov	r5, r3
   8b5ce:	f7ff fcdf 	bl	8af90 <_Balloc>
   8b5d2:	4604      	mov	r4, r0
   8b5d4:	2800      	cmp	r0, #0
   8b5d6:	d04c      	beq.n	8b672 <__d2b+0xae>
   8b5d8:	462b      	mov	r3, r5
   8b5da:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8b5de:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8b5e2:	b10d      	cbz	r5, 8b5e8 <__d2b+0x24>
   8b5e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b5e8:	2e00      	cmp	r6, #0
   8b5ea:	9301      	str	r3, [sp, #4]
   8b5ec:	d022      	beq.n	8b634 <__d2b+0x70>
   8b5ee:	4668      	mov	r0, sp
   8b5f0:	9600      	str	r6, [sp, #0]
   8b5f2:	f7ff fd6b 	bl	8b0cc <__lo0bits>
   8b5f6:	2800      	cmp	r0, #0
   8b5f8:	d037      	beq.n	8b66a <__d2b+0xa6>
   8b5fa:	9b01      	ldr	r3, [sp, #4]
   8b5fc:	9900      	ldr	r1, [sp, #0]
   8b5fe:	f1c0 0220 	rsb	r2, r0, #32
   8b602:	fa03 f202 	lsl.w	r2, r3, r2
   8b606:	430a      	orrs	r2, r1
   8b608:	40c3      	lsrs	r3, r0
   8b60a:	9301      	str	r3, [sp, #4]
   8b60c:	6162      	str	r2, [r4, #20]
   8b60e:	2b00      	cmp	r3, #0
   8b610:	bf14      	ite	ne
   8b612:	2102      	movne	r1, #2
   8b614:	2101      	moveq	r1, #1
   8b616:	61a3      	str	r3, [r4, #24]
   8b618:	6121      	str	r1, [r4, #16]
   8b61a:	b1b5      	cbz	r5, 8b64a <__d2b+0x86>
   8b61c:	9a06      	ldr	r2, [sp, #24]
   8b61e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8b622:	4403      	add	r3, r0
   8b624:	6013      	str	r3, [r2, #0]
   8b626:	9b07      	ldr	r3, [sp, #28]
   8b628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b62c:	6018      	str	r0, [r3, #0]
   8b62e:	4620      	mov	r0, r4
   8b630:	b002      	add	sp, #8
   8b632:	bd70      	pop	{r4, r5, r6, pc}
   8b634:	a801      	add	r0, sp, #4
   8b636:	f7ff fd49 	bl	8b0cc <__lo0bits>
   8b63a:	2301      	movs	r3, #1
   8b63c:	9a01      	ldr	r2, [sp, #4]
   8b63e:	4619      	mov	r1, r3
   8b640:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b644:	3020      	adds	r0, #32
   8b646:	2d00      	cmp	r5, #0
   8b648:	d1e8      	bne.n	8b61c <__d2b+0x58>
   8b64a:	9a06      	ldr	r2, [sp, #24]
   8b64c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8b650:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8b654:	6010      	str	r0, [r2, #0]
   8b656:	6918      	ldr	r0, [r3, #16]
   8b658:	f7ff fd18 	bl	8b08c <__hi0bits>
   8b65c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8b660:	4620      	mov	r0, r4
   8b662:	9b07      	ldr	r3, [sp, #28]
   8b664:	6019      	str	r1, [r3, #0]
   8b666:	b002      	add	sp, #8
   8b668:	bd70      	pop	{r4, r5, r6, pc}
   8b66a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b66e:	6162      	str	r2, [r4, #20]
   8b670:	e7cd      	b.n	8b60e <__d2b+0x4a>
   8b672:	4602      	mov	r2, r0
   8b674:	f240 310a 	movw	r1, #778	; 0x30a
   8b678:	4b01      	ldr	r3, [pc, #4]	; (8b680 <__d2b+0xbc>)
   8b67a:	4802      	ldr	r0, [pc, #8]	; (8b684 <__d2b+0xc0>)
   8b67c:	f000 fbe0 	bl	8be40 <__assert_func>
   8b680:	0008ccdc 	.word	0x0008ccdc
   8b684:	0008cd7c 	.word	0x0008cd7c

0008b688 <_realloc_r>:
   8b688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b68c:	4616      	mov	r6, r2
   8b68e:	2900      	cmp	r1, #0
   8b690:	f000 80bd 	beq.w	8b80e <_realloc_r+0x186>
   8b694:	f106 050b 	add.w	r5, r6, #11
   8b698:	460c      	mov	r4, r1
   8b69a:	4680      	mov	r8, r0
   8b69c:	f7ff fc6c 	bl	8af78 <__malloc_lock>
   8b6a0:	2d16      	cmp	r5, #22
   8b6a2:	d85f      	bhi.n	8b764 <_realloc_r+0xdc>
   8b6a4:	2510      	movs	r5, #16
   8b6a6:	462a      	mov	r2, r5
   8b6a8:	42ae      	cmp	r6, r5
   8b6aa:	d860      	bhi.n	8b76e <_realloc_r+0xe6>
   8b6ac:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8b6b0:	f1a4 0908 	sub.w	r9, r4, #8
   8b6b4:	f021 0703 	bic.w	r7, r1, #3
   8b6b8:	4297      	cmp	r7, r2
   8b6ba:	f280 8086 	bge.w	8b7ca <_realloc_r+0x142>
   8b6be:	4bc9      	ldr	r3, [pc, #804]	; (8b9e4 <_realloc_r+0x35c>)
   8b6c0:	eb09 0007 	add.w	r0, r9, r7
   8b6c4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8b6c8:	4584      	cmp	ip, r0
   8b6ca:	f000 80b9 	beq.w	8b840 <_realloc_r+0x1b8>
   8b6ce:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8b6d2:	f02c 0301 	bic.w	r3, ip, #1
   8b6d6:	4403      	add	r3, r0
   8b6d8:	685b      	ldr	r3, [r3, #4]
   8b6da:	07db      	lsls	r3, r3, #31
   8b6dc:	f100 808c 	bmi.w	8b7f8 <_realloc_r+0x170>
   8b6e0:	f02c 0c03 	bic.w	ip, ip, #3
   8b6e4:	eb07 030c 	add.w	r3, r7, ip
   8b6e8:	4293      	cmp	r3, r2
   8b6ea:	f280 8115 	bge.w	8b918 <_realloc_r+0x290>
   8b6ee:	07cb      	lsls	r3, r1, #31
   8b6f0:	d40f      	bmi.n	8b712 <_realloc_r+0x8a>
   8b6f2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b6f6:	eba9 0a03 	sub.w	sl, r9, r3
   8b6fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b6fe:	f023 0103 	bic.w	r1, r3, #3
   8b702:	448c      	add	ip, r1
   8b704:	44bc      	add	ip, r7
   8b706:	4594      	cmp	ip, r2
   8b708:	da38      	bge.n	8b77c <_realloc_r+0xf4>
   8b70a:	187b      	adds	r3, r7, r1
   8b70c:	4293      	cmp	r3, r2
   8b70e:	f280 810f 	bge.w	8b930 <_realloc_r+0x2a8>
   8b712:	4631      	mov	r1, r6
   8b714:	4640      	mov	r0, r8
   8b716:	f7ff f8c1 	bl	8a89c <_malloc_r>
   8b71a:	4606      	mov	r6, r0
   8b71c:	b1e0      	cbz	r0, 8b758 <_realloc_r+0xd0>
   8b71e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b722:	f1a0 0208 	sub.w	r2, r0, #8
   8b726:	f023 0301 	bic.w	r3, r3, #1
   8b72a:	444b      	add	r3, r9
   8b72c:	4293      	cmp	r3, r2
   8b72e:	f000 80f9 	beq.w	8b924 <_realloc_r+0x29c>
   8b732:	1f3a      	subs	r2, r7, #4
   8b734:	2a24      	cmp	r2, #36	; 0x24
   8b736:	f200 811c 	bhi.w	8b972 <_realloc_r+0x2ea>
   8b73a:	2a13      	cmp	r2, #19
   8b73c:	f200 80cd 	bhi.w	8b8da <_realloc_r+0x252>
   8b740:	4603      	mov	r3, r0
   8b742:	4622      	mov	r2, r4
   8b744:	6811      	ldr	r1, [r2, #0]
   8b746:	6019      	str	r1, [r3, #0]
   8b748:	6851      	ldr	r1, [r2, #4]
   8b74a:	6059      	str	r1, [r3, #4]
   8b74c:	6892      	ldr	r2, [r2, #8]
   8b74e:	609a      	str	r2, [r3, #8]
   8b750:	4621      	mov	r1, r4
   8b752:	4640      	mov	r0, r8
   8b754:	f7fe fd70 	bl	8a238 <_free_r>
   8b758:	4640      	mov	r0, r8
   8b75a:	f7ff fc13 	bl	8af84 <__malloc_unlock>
   8b75e:	4630      	mov	r0, r6
   8b760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b764:	f025 0507 	bic.w	r5, r5, #7
   8b768:	2d00      	cmp	r5, #0
   8b76a:	462a      	mov	r2, r5
   8b76c:	da9c      	bge.n	8b6a8 <_realloc_r+0x20>
   8b76e:	230c      	movs	r3, #12
   8b770:	2600      	movs	r6, #0
   8b772:	f8c8 3000 	str.w	r3, [r8]
   8b776:	4630      	mov	r0, r6
   8b778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b77c:	4656      	mov	r6, sl
   8b77e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8b782:	60cb      	str	r3, [r1, #12]
   8b784:	6099      	str	r1, [r3, #8]
   8b786:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8b78a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8b78e:	1f3a      	subs	r2, r7, #4
   8b790:	2a24      	cmp	r2, #36	; 0x24
   8b792:	60cb      	str	r3, [r1, #12]
   8b794:	6099      	str	r1, [r3, #8]
   8b796:	f200 8107 	bhi.w	8b9a8 <_realloc_r+0x320>
   8b79a:	2a13      	cmp	r2, #19
   8b79c:	f240 8102 	bls.w	8b9a4 <_realloc_r+0x31c>
   8b7a0:	6823      	ldr	r3, [r4, #0]
   8b7a2:	2a1b      	cmp	r2, #27
   8b7a4:	f8ca 3008 	str.w	r3, [sl, #8]
   8b7a8:	6863      	ldr	r3, [r4, #4]
   8b7aa:	f8ca 300c 	str.w	r3, [sl, #12]
   8b7ae:	f200 811b 	bhi.w	8b9e8 <_realloc_r+0x360>
   8b7b2:	3408      	adds	r4, #8
   8b7b4:	f10a 0310 	add.w	r3, sl, #16
   8b7b8:	6822      	ldr	r2, [r4, #0]
   8b7ba:	4667      	mov	r7, ip
   8b7bc:	601a      	str	r2, [r3, #0]
   8b7be:	6862      	ldr	r2, [r4, #4]
   8b7c0:	46d1      	mov	r9, sl
   8b7c2:	605a      	str	r2, [r3, #4]
   8b7c4:	68a2      	ldr	r2, [r4, #8]
   8b7c6:	4634      	mov	r4, r6
   8b7c8:	609a      	str	r2, [r3, #8]
   8b7ca:	1b7b      	subs	r3, r7, r5
   8b7cc:	2b0f      	cmp	r3, #15
   8b7ce:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8b7d2:	d821      	bhi.n	8b818 <_realloc_r+0x190>
   8b7d4:	f002 0201 	and.w	r2, r2, #1
   8b7d8:	433a      	orrs	r2, r7
   8b7da:	eb09 0107 	add.w	r1, r9, r7
   8b7de:	f8c9 2004 	str.w	r2, [r9, #4]
   8b7e2:	684b      	ldr	r3, [r1, #4]
   8b7e4:	f043 0301 	orr.w	r3, r3, #1
   8b7e8:	604b      	str	r3, [r1, #4]
   8b7ea:	4626      	mov	r6, r4
   8b7ec:	4640      	mov	r0, r8
   8b7ee:	f7ff fbc9 	bl	8af84 <__malloc_unlock>
   8b7f2:	4630      	mov	r0, r6
   8b7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b7f8:	07c9      	lsls	r1, r1, #31
   8b7fa:	d48a      	bmi.n	8b712 <_realloc_r+0x8a>
   8b7fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b800:	eba9 0a03 	sub.w	sl, r9, r3
   8b804:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b808:	f021 0103 	bic.w	r1, r1, #3
   8b80c:	e77d      	b.n	8b70a <_realloc_r+0x82>
   8b80e:	4611      	mov	r1, r2
   8b810:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b814:	f7ff b842 	b.w	8a89c <_malloc_r>
   8b818:	f002 0201 	and.w	r2, r2, #1
   8b81c:	eb09 0105 	add.w	r1, r9, r5
   8b820:	f043 0301 	orr.w	r3, r3, #1
   8b824:	432a      	orrs	r2, r5
   8b826:	f8c9 2004 	str.w	r2, [r9, #4]
   8b82a:	444f      	add	r7, r9
   8b82c:	604b      	str	r3, [r1, #4]
   8b82e:	687b      	ldr	r3, [r7, #4]
   8b830:	4640      	mov	r0, r8
   8b832:	f043 0301 	orr.w	r3, r3, #1
   8b836:	3108      	adds	r1, #8
   8b838:	607b      	str	r3, [r7, #4]
   8b83a:	f7fe fcfd 	bl	8a238 <_free_r>
   8b83e:	e7d4      	b.n	8b7ea <_realloc_r+0x162>
   8b840:	f8dc b004 	ldr.w	fp, [ip, #4]
   8b844:	f105 0010 	add.w	r0, r5, #16
   8b848:	f02b 0b03 	bic.w	fp, fp, #3
   8b84c:	eb07 0c0b 	add.w	ip, r7, fp
   8b850:	4584      	cmp	ip, r0
   8b852:	da4d      	bge.n	8b8f0 <_realloc_r+0x268>
   8b854:	07c9      	lsls	r1, r1, #31
   8b856:	f53f af5c 	bmi.w	8b712 <_realloc_r+0x8a>
   8b85a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b85e:	eba9 0a01 	sub.w	sl, r9, r1
   8b862:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b866:	f021 0103 	bic.w	r1, r1, #3
   8b86a:	448b      	add	fp, r1
   8b86c:	44bb      	add	fp, r7
   8b86e:	4558      	cmp	r0, fp
   8b870:	f73f af4b 	bgt.w	8b70a <_realloc_r+0x82>
   8b874:	4656      	mov	r6, sl
   8b876:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b87a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b87e:	1f3a      	subs	r2, r7, #4
   8b880:	2a24      	cmp	r2, #36	; 0x24
   8b882:	60c1      	str	r1, [r0, #12]
   8b884:	6088      	str	r0, [r1, #8]
   8b886:	f200 80bd 	bhi.w	8ba04 <_realloc_r+0x37c>
   8b88a:	2a13      	cmp	r2, #19
   8b88c:	f240 80b8 	bls.w	8ba00 <_realloc_r+0x378>
   8b890:	6821      	ldr	r1, [r4, #0]
   8b892:	2a1b      	cmp	r2, #27
   8b894:	f8ca 1008 	str.w	r1, [sl, #8]
   8b898:	6861      	ldr	r1, [r4, #4]
   8b89a:	f8ca 100c 	str.w	r1, [sl, #12]
   8b89e:	f200 80c1 	bhi.w	8ba24 <_realloc_r+0x39c>
   8b8a2:	3408      	adds	r4, #8
   8b8a4:	f10a 0210 	add.w	r2, sl, #16
   8b8a8:	6821      	ldr	r1, [r4, #0]
   8b8aa:	6011      	str	r1, [r2, #0]
   8b8ac:	6861      	ldr	r1, [r4, #4]
   8b8ae:	6051      	str	r1, [r2, #4]
   8b8b0:	68a1      	ldr	r1, [r4, #8]
   8b8b2:	6091      	str	r1, [r2, #8]
   8b8b4:	ebab 0205 	sub.w	r2, fp, r5
   8b8b8:	eb0a 0105 	add.w	r1, sl, r5
   8b8bc:	f042 0201 	orr.w	r2, r2, #1
   8b8c0:	6099      	str	r1, [r3, #8]
   8b8c2:	604a      	str	r2, [r1, #4]
   8b8c4:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b8c8:	4640      	mov	r0, r8
   8b8ca:	f003 0301 	and.w	r3, r3, #1
   8b8ce:	431d      	orrs	r5, r3
   8b8d0:	f8ca 5004 	str.w	r5, [sl, #4]
   8b8d4:	f7ff fb56 	bl	8af84 <__malloc_unlock>
   8b8d8:	e74d      	b.n	8b776 <_realloc_r+0xee>
   8b8da:	6823      	ldr	r3, [r4, #0]
   8b8dc:	2a1b      	cmp	r2, #27
   8b8de:	6003      	str	r3, [r0, #0]
   8b8e0:	6863      	ldr	r3, [r4, #4]
   8b8e2:	6043      	str	r3, [r0, #4]
   8b8e4:	d849      	bhi.n	8b97a <_realloc_r+0x2f2>
   8b8e6:	f104 0208 	add.w	r2, r4, #8
   8b8ea:	f100 0308 	add.w	r3, r0, #8
   8b8ee:	e729      	b.n	8b744 <_realloc_r+0xbc>
   8b8f0:	ebac 0205 	sub.w	r2, ip, r5
   8b8f4:	eb09 0105 	add.w	r1, r9, r5
   8b8f8:	f042 0201 	orr.w	r2, r2, #1
   8b8fc:	6099      	str	r1, [r3, #8]
   8b8fe:	604a      	str	r2, [r1, #4]
   8b900:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b904:	4640      	mov	r0, r8
   8b906:	f003 0301 	and.w	r3, r3, #1
   8b90a:	431d      	orrs	r5, r3
   8b90c:	f844 5c04 	str.w	r5, [r4, #-4]
   8b910:	f7ff fb38 	bl	8af84 <__malloc_unlock>
   8b914:	4626      	mov	r6, r4
   8b916:	e72e      	b.n	8b776 <_realloc_r+0xee>
   8b918:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8b91c:	461f      	mov	r7, r3
   8b91e:	60ca      	str	r2, [r1, #12]
   8b920:	6091      	str	r1, [r2, #8]
   8b922:	e752      	b.n	8b7ca <_realloc_r+0x142>
   8b924:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8b928:	f023 0303 	bic.w	r3, r3, #3
   8b92c:	441f      	add	r7, r3
   8b92e:	e74c      	b.n	8b7ca <_realloc_r+0x142>
   8b930:	4656      	mov	r6, sl
   8b932:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b936:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b93a:	1f3a      	subs	r2, r7, #4
   8b93c:	2a24      	cmp	r2, #36	; 0x24
   8b93e:	60c1      	str	r1, [r0, #12]
   8b940:	6088      	str	r0, [r1, #8]
   8b942:	d827      	bhi.n	8b994 <_realloc_r+0x30c>
   8b944:	2a13      	cmp	r2, #19
   8b946:	d923      	bls.n	8b990 <_realloc_r+0x308>
   8b948:	6821      	ldr	r1, [r4, #0]
   8b94a:	2a1b      	cmp	r2, #27
   8b94c:	f8ca 1008 	str.w	r1, [sl, #8]
   8b950:	6861      	ldr	r1, [r4, #4]
   8b952:	f8ca 100c 	str.w	r1, [sl, #12]
   8b956:	d82f      	bhi.n	8b9b8 <_realloc_r+0x330>
   8b958:	3408      	adds	r4, #8
   8b95a:	f10a 0210 	add.w	r2, sl, #16
   8b95e:	6821      	ldr	r1, [r4, #0]
   8b960:	461f      	mov	r7, r3
   8b962:	6011      	str	r1, [r2, #0]
   8b964:	6863      	ldr	r3, [r4, #4]
   8b966:	46d1      	mov	r9, sl
   8b968:	6053      	str	r3, [r2, #4]
   8b96a:	68a3      	ldr	r3, [r4, #8]
   8b96c:	4634      	mov	r4, r6
   8b96e:	6093      	str	r3, [r2, #8]
   8b970:	e72b      	b.n	8b7ca <_realloc_r+0x142>
   8b972:	4621      	mov	r1, r4
   8b974:	f7ff fa96 	bl	8aea4 <memmove>
   8b978:	e6ea      	b.n	8b750 <_realloc_r+0xc8>
   8b97a:	68a3      	ldr	r3, [r4, #8]
   8b97c:	2a24      	cmp	r2, #36	; 0x24
   8b97e:	6083      	str	r3, [r0, #8]
   8b980:	68e3      	ldr	r3, [r4, #12]
   8b982:	60c3      	str	r3, [r0, #12]
   8b984:	d024      	beq.n	8b9d0 <_realloc_r+0x348>
   8b986:	f104 0210 	add.w	r2, r4, #16
   8b98a:	f100 0310 	add.w	r3, r0, #16
   8b98e:	e6d9      	b.n	8b744 <_realloc_r+0xbc>
   8b990:	4632      	mov	r2, r6
   8b992:	e7e4      	b.n	8b95e <_realloc_r+0x2d6>
   8b994:	4621      	mov	r1, r4
   8b996:	4630      	mov	r0, r6
   8b998:	461f      	mov	r7, r3
   8b99a:	46d1      	mov	r9, sl
   8b99c:	f7ff fa82 	bl	8aea4 <memmove>
   8b9a0:	4634      	mov	r4, r6
   8b9a2:	e712      	b.n	8b7ca <_realloc_r+0x142>
   8b9a4:	4633      	mov	r3, r6
   8b9a6:	e707      	b.n	8b7b8 <_realloc_r+0x130>
   8b9a8:	4621      	mov	r1, r4
   8b9aa:	4630      	mov	r0, r6
   8b9ac:	4667      	mov	r7, ip
   8b9ae:	46d1      	mov	r9, sl
   8b9b0:	f7ff fa78 	bl	8aea4 <memmove>
   8b9b4:	4634      	mov	r4, r6
   8b9b6:	e708      	b.n	8b7ca <_realloc_r+0x142>
   8b9b8:	68a1      	ldr	r1, [r4, #8]
   8b9ba:	2a24      	cmp	r2, #36	; 0x24
   8b9bc:	f8ca 1010 	str.w	r1, [sl, #16]
   8b9c0:	68e1      	ldr	r1, [r4, #12]
   8b9c2:	f8ca 1014 	str.w	r1, [sl, #20]
   8b9c6:	d023      	beq.n	8ba10 <_realloc_r+0x388>
   8b9c8:	3410      	adds	r4, #16
   8b9ca:	f10a 0218 	add.w	r2, sl, #24
   8b9ce:	e7c6      	b.n	8b95e <_realloc_r+0x2d6>
   8b9d0:	6923      	ldr	r3, [r4, #16]
   8b9d2:	f104 0218 	add.w	r2, r4, #24
   8b9d6:	6103      	str	r3, [r0, #16]
   8b9d8:	6961      	ldr	r1, [r4, #20]
   8b9da:	f100 0318 	add.w	r3, r0, #24
   8b9de:	6141      	str	r1, [r0, #20]
   8b9e0:	e6b0      	b.n	8b744 <_realloc_r+0xbc>
   8b9e2:	bf00      	nop
   8b9e4:	20000f48 	.word	0x20000f48
   8b9e8:	68a3      	ldr	r3, [r4, #8]
   8b9ea:	2a24      	cmp	r2, #36	; 0x24
   8b9ec:	f8ca 3010 	str.w	r3, [sl, #16]
   8b9f0:	68e3      	ldr	r3, [r4, #12]
   8b9f2:	f8ca 3014 	str.w	r3, [sl, #20]
   8b9f6:	d021      	beq.n	8ba3c <_realloc_r+0x3b4>
   8b9f8:	3410      	adds	r4, #16
   8b9fa:	f10a 0318 	add.w	r3, sl, #24
   8b9fe:	e6db      	b.n	8b7b8 <_realloc_r+0x130>
   8ba00:	4632      	mov	r2, r6
   8ba02:	e751      	b.n	8b8a8 <_realloc_r+0x220>
   8ba04:	4621      	mov	r1, r4
   8ba06:	4630      	mov	r0, r6
   8ba08:	f7ff fa4c 	bl	8aea4 <memmove>
   8ba0c:	4b15      	ldr	r3, [pc, #84]	; (8ba64 <_realloc_r+0x3dc>)
   8ba0e:	e751      	b.n	8b8b4 <_realloc_r+0x22c>
   8ba10:	6921      	ldr	r1, [r4, #16]
   8ba12:	f10a 0220 	add.w	r2, sl, #32
   8ba16:	f8ca 1018 	str.w	r1, [sl, #24]
   8ba1a:	6961      	ldr	r1, [r4, #20]
   8ba1c:	3418      	adds	r4, #24
   8ba1e:	f8ca 101c 	str.w	r1, [sl, #28]
   8ba22:	e79c      	b.n	8b95e <_realloc_r+0x2d6>
   8ba24:	68a1      	ldr	r1, [r4, #8]
   8ba26:	2a24      	cmp	r2, #36	; 0x24
   8ba28:	f8ca 1010 	str.w	r1, [sl, #16]
   8ba2c:	68e1      	ldr	r1, [r4, #12]
   8ba2e:	f8ca 1014 	str.w	r1, [sl, #20]
   8ba32:	d00d      	beq.n	8ba50 <_realloc_r+0x3c8>
   8ba34:	3410      	adds	r4, #16
   8ba36:	f10a 0218 	add.w	r2, sl, #24
   8ba3a:	e735      	b.n	8b8a8 <_realloc_r+0x220>
   8ba3c:	6922      	ldr	r2, [r4, #16]
   8ba3e:	f10a 0320 	add.w	r3, sl, #32
   8ba42:	f8ca 2018 	str.w	r2, [sl, #24]
   8ba46:	6962      	ldr	r2, [r4, #20]
   8ba48:	3418      	adds	r4, #24
   8ba4a:	f8ca 201c 	str.w	r2, [sl, #28]
   8ba4e:	e6b3      	b.n	8b7b8 <_realloc_r+0x130>
   8ba50:	6921      	ldr	r1, [r4, #16]
   8ba52:	f10a 0220 	add.w	r2, sl, #32
   8ba56:	f8ca 1018 	str.w	r1, [sl, #24]
   8ba5a:	6961      	ldr	r1, [r4, #20]
   8ba5c:	3418      	adds	r4, #24
   8ba5e:	f8ca 101c 	str.w	r1, [sl, #28]
   8ba62:	e721      	b.n	8b8a8 <_realloc_r+0x220>
   8ba64:	20000f48 	.word	0x20000f48

0008ba68 <frexp>:
   8ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ba6a:	4617      	mov	r7, r2
   8ba6c:	2200      	movs	r2, #0
   8ba6e:	f8df c060 	ldr.w	ip, [pc, #96]	; 8bad0 <frexp+0x68>
   8ba72:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ba76:	4563      	cmp	r3, ip
   8ba78:	4604      	mov	r4, r0
   8ba7a:	460d      	mov	r5, r1
   8ba7c:	603a      	str	r2, [r7, #0]
   8ba7e:	dc22      	bgt.n	8bac6 <frexp+0x5e>
   8ba80:	4684      	mov	ip, r0
   8ba82:	ea53 0c0c 	orrs.w	ip, r3, ip
   8ba86:	d01e      	beq.n	8bac6 <frexp+0x5e>
   8ba88:	f8df c048 	ldr.w	ip, [pc, #72]	; 8bad4 <frexp+0x6c>
   8ba8c:	460e      	mov	r6, r1
   8ba8e:	ea01 0c0c 	and.w	ip, r1, ip
   8ba92:	f1bc 0f00 	cmp.w	ip, #0
   8ba96:	d109      	bne.n	8baac <frexp+0x44>
   8ba98:	2200      	movs	r2, #0
   8ba9a:	4b0c      	ldr	r3, [pc, #48]	; (8bacc <frexp+0x64>)
   8ba9c:	f000 fd0e 	bl	8c4bc <__aeabi_dmul>
   8baa0:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8baa4:	4604      	mov	r4, r0
   8baa6:	460e      	mov	r6, r1
   8baa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8baac:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8bab0:	151b      	asrs	r3, r3, #20
   8bab2:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8bab6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8baba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8babe:	4413      	add	r3, r2
   8bac0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8bac4:	603b      	str	r3, [r7, #0]
   8bac6:	4620      	mov	r0, r4
   8bac8:	4629      	mov	r1, r5
   8baca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bacc:	43500000 	.word	0x43500000
   8bad0:	7fefffff 	.word	0x7fefffff
   8bad4:	7ff00000 	.word	0x7ff00000

0008bad8 <_sbrk_r>:
   8bad8:	2200      	movs	r2, #0
   8bada:	b538      	push	{r3, r4, r5, lr}
   8badc:	4d06      	ldr	r5, [pc, #24]	; (8baf8 <_sbrk_r+0x20>)
   8bade:	4604      	mov	r4, r0
   8bae0:	4608      	mov	r0, r1
   8bae2:	602a      	str	r2, [r5, #0]
   8bae4:	f7f9 fed2 	bl	8588c <_sbrk>
   8bae8:	1c43      	adds	r3, r0, #1
   8baea:	d000      	beq.n	8baee <_sbrk_r+0x16>
   8baec:	bd38      	pop	{r3, r4, r5, pc}
   8baee:	682b      	ldr	r3, [r5, #0]
   8baf0:	2b00      	cmp	r3, #0
   8baf2:	d0fb      	beq.n	8baec <_sbrk_r+0x14>
   8baf4:	6023      	str	r3, [r4, #0]
   8baf6:	bd38      	pop	{r3, r4, r5, pc}
   8baf8:	200026d8 	.word	0x200026d8

0008bafc <__sread>:
   8bafc:	b510      	push	{r4, lr}
   8bafe:	460c      	mov	r4, r1
   8bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb04:	f000 fab4 	bl	8c070 <_read_r>
   8bb08:	2800      	cmp	r0, #0
   8bb0a:	db03      	blt.n	8bb14 <__sread+0x18>
   8bb0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bb0e:	4403      	add	r3, r0
   8bb10:	6523      	str	r3, [r4, #80]	; 0x50
   8bb12:	bd10      	pop	{r4, pc}
   8bb14:	89a3      	ldrh	r3, [r4, #12]
   8bb16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8bb1a:	81a3      	strh	r3, [r4, #12]
   8bb1c:	bd10      	pop	{r4, pc}
   8bb1e:	bf00      	nop

0008bb20 <__swrite>:
   8bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bb24:	460c      	mov	r4, r1
   8bb26:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8bb2a:	461f      	mov	r7, r3
   8bb2c:	05cb      	lsls	r3, r1, #23
   8bb2e:	4616      	mov	r6, r2
   8bb30:	4605      	mov	r5, r0
   8bb32:	d40b      	bmi.n	8bb4c <__swrite+0x2c>
   8bb34:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bb38:	81a1      	strh	r1, [r4, #12]
   8bb3a:	463b      	mov	r3, r7
   8bb3c:	4632      	mov	r2, r6
   8bb3e:	4628      	mov	r0, r5
   8bb40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bb44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bb48:	f000 b91e 	b.w	8bd88 <_write_r>
   8bb4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bb50:	2302      	movs	r3, #2
   8bb52:	2200      	movs	r2, #0
   8bb54:	f000 fa76 	bl	8c044 <_lseek_r>
   8bb58:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bb5c:	e7ea      	b.n	8bb34 <__swrite+0x14>
   8bb5e:	bf00      	nop

0008bb60 <__sseek>:
   8bb60:	b510      	push	{r4, lr}
   8bb62:	460c      	mov	r4, r1
   8bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb68:	f000 fa6c 	bl	8c044 <_lseek_r>
   8bb6c:	89a3      	ldrh	r3, [r4, #12]
   8bb6e:	1c42      	adds	r2, r0, #1
   8bb70:	bf0e      	itee	eq
   8bb72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bb76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bb7a:	6520      	strne	r0, [r4, #80]	; 0x50
   8bb7c:	81a3      	strh	r3, [r4, #12]
   8bb7e:	bd10      	pop	{r4, pc}

0008bb80 <__sclose>:
   8bb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb84:	f000 b9aa 	b.w	8bedc <_close_r>

0008bb88 <__ssprint_r>:
   8bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb8c:	6893      	ldr	r3, [r2, #8]
   8bb8e:	4691      	mov	r9, r2
   8bb90:	b083      	sub	sp, #12
   8bb92:	2b00      	cmp	r3, #0
   8bb94:	d06d      	beq.n	8bc72 <__ssprint_r+0xea>
   8bb96:	6817      	ldr	r7, [r2, #0]
   8bb98:	4680      	mov	r8, r0
   8bb9a:	460c      	mov	r4, r1
   8bb9c:	6808      	ldr	r0, [r1, #0]
   8bb9e:	688d      	ldr	r5, [r1, #8]
   8bba0:	3708      	adds	r7, #8
   8bba2:	e043      	b.n	8bc2c <__ssprint_r+0xa4>
   8bba4:	89a3      	ldrh	r3, [r4, #12]
   8bba6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bbaa:	d02e      	beq.n	8bc0a <__ssprint_r+0x82>
   8bbac:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8bbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8bbb4:	eba0 0a01 	sub.w	sl, r0, r1
   8bbb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8bbbc:	eb0a 0006 	add.w	r0, sl, r6
   8bbc0:	106d      	asrs	r5, r5, #1
   8bbc2:	3001      	adds	r0, #1
   8bbc4:	42a8      	cmp	r0, r5
   8bbc6:	462a      	mov	r2, r5
   8bbc8:	bf84      	itt	hi
   8bbca:	4605      	movhi	r5, r0
   8bbcc:	462a      	movhi	r2, r5
   8bbce:	055b      	lsls	r3, r3, #21
   8bbd0:	d536      	bpl.n	8bc40 <__ssprint_r+0xb8>
   8bbd2:	4611      	mov	r1, r2
   8bbd4:	4640      	mov	r0, r8
   8bbd6:	f7fe fe61 	bl	8a89c <_malloc_r>
   8bbda:	2800      	cmp	r0, #0
   8bbdc:	d03a      	beq.n	8bc54 <__ssprint_r+0xcc>
   8bbde:	4652      	mov	r2, sl
   8bbe0:	6921      	ldr	r1, [r4, #16]
   8bbe2:	9001      	str	r0, [sp, #4]
   8bbe4:	f7fa f9c4 	bl	85f70 <memcpy>
   8bbe8:	89a2      	ldrh	r2, [r4, #12]
   8bbea:	9b01      	ldr	r3, [sp, #4]
   8bbec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bbf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bbf4:	81a2      	strh	r2, [r4, #12]
   8bbf6:	eba5 020a 	sub.w	r2, r5, sl
   8bbfa:	eb03 000a 	add.w	r0, r3, sl
   8bbfe:	6165      	str	r5, [r4, #20]
   8bc00:	46b2      	mov	sl, r6
   8bc02:	4635      	mov	r5, r6
   8bc04:	6123      	str	r3, [r4, #16]
   8bc06:	6020      	str	r0, [r4, #0]
   8bc08:	60a2      	str	r2, [r4, #8]
   8bc0a:	4659      	mov	r1, fp
   8bc0c:	4652      	mov	r2, sl
   8bc0e:	f7ff f949 	bl	8aea4 <memmove>
   8bc12:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8bc16:	68a1      	ldr	r1, [r4, #8]
   8bc18:	6820      	ldr	r0, [r4, #0]
   8bc1a:	1b4d      	subs	r5, r1, r5
   8bc1c:	4450      	add	r0, sl
   8bc1e:	1b9e      	subs	r6, r3, r6
   8bc20:	60a5      	str	r5, [r4, #8]
   8bc22:	6020      	str	r0, [r4, #0]
   8bc24:	f8c9 6008 	str.w	r6, [r9, #8]
   8bc28:	b31e      	cbz	r6, 8bc72 <__ssprint_r+0xea>
   8bc2a:	3708      	adds	r7, #8
   8bc2c:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8bc30:	2e00      	cmp	r6, #0
   8bc32:	d0fa      	beq.n	8bc2a <__ssprint_r+0xa2>
   8bc34:	42b5      	cmp	r5, r6
   8bc36:	46aa      	mov	sl, r5
   8bc38:	d9b4      	bls.n	8bba4 <__ssprint_r+0x1c>
   8bc3a:	4635      	mov	r5, r6
   8bc3c:	46b2      	mov	sl, r6
   8bc3e:	e7e4      	b.n	8bc0a <__ssprint_r+0x82>
   8bc40:	4640      	mov	r0, r8
   8bc42:	f7ff fd21 	bl	8b688 <_realloc_r>
   8bc46:	4603      	mov	r3, r0
   8bc48:	2800      	cmp	r0, #0
   8bc4a:	d1d4      	bne.n	8bbf6 <__ssprint_r+0x6e>
   8bc4c:	4640      	mov	r0, r8
   8bc4e:	6921      	ldr	r1, [r4, #16]
   8bc50:	f7fe faf2 	bl	8a238 <_free_r>
   8bc54:	230c      	movs	r3, #12
   8bc56:	2200      	movs	r2, #0
   8bc58:	f04f 30ff 	mov.w	r0, #4294967295
   8bc5c:	f8c8 3000 	str.w	r3, [r8]
   8bc60:	89a3      	ldrh	r3, [r4, #12]
   8bc62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8bc66:	81a3      	strh	r3, [r4, #12]
   8bc68:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8bc6c:	b003      	add	sp, #12
   8bc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc72:	2000      	movs	r0, #0
   8bc74:	f8c9 0004 	str.w	r0, [r9, #4]
   8bc78:	b003      	add	sp, #12
   8bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc7e:	bf00      	nop

0008bc80 <__swbuf_r>:
   8bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc82:	460d      	mov	r5, r1
   8bc84:	4614      	mov	r4, r2
   8bc86:	4606      	mov	r6, r0
   8bc88:	b110      	cbz	r0, 8bc90 <__swbuf_r+0x10>
   8bc8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bc8c:	2b00      	cmp	r3, #0
   8bc8e:	d043      	beq.n	8bd18 <__swbuf_r+0x98>
   8bc90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bc94:	69a3      	ldr	r3, [r4, #24]
   8bc96:	0717      	lsls	r7, r2, #28
   8bc98:	60a3      	str	r3, [r4, #8]
   8bc9a:	b290      	uxth	r0, r2
   8bc9c:	d51b      	bpl.n	8bcd6 <__swbuf_r+0x56>
   8bc9e:	6923      	ldr	r3, [r4, #16]
   8bca0:	b1cb      	cbz	r3, 8bcd6 <__swbuf_r+0x56>
   8bca2:	b2ed      	uxtb	r5, r5
   8bca4:	0481      	lsls	r1, r0, #18
   8bca6:	462f      	mov	r7, r5
   8bca8:	d522      	bpl.n	8bcf0 <__swbuf_r+0x70>
   8bcaa:	6822      	ldr	r2, [r4, #0]
   8bcac:	6961      	ldr	r1, [r4, #20]
   8bcae:	1ad3      	subs	r3, r2, r3
   8bcb0:	4299      	cmp	r1, r3
   8bcb2:	dd29      	ble.n	8bd08 <__swbuf_r+0x88>
   8bcb4:	3301      	adds	r3, #1
   8bcb6:	68a1      	ldr	r1, [r4, #8]
   8bcb8:	1c50      	adds	r0, r2, #1
   8bcba:	3901      	subs	r1, #1
   8bcbc:	60a1      	str	r1, [r4, #8]
   8bcbe:	6020      	str	r0, [r4, #0]
   8bcc0:	7015      	strb	r5, [r2, #0]
   8bcc2:	6962      	ldr	r2, [r4, #20]
   8bcc4:	429a      	cmp	r2, r3
   8bcc6:	d02a      	beq.n	8bd1e <__swbuf_r+0x9e>
   8bcc8:	89a3      	ldrh	r3, [r4, #12]
   8bcca:	07db      	lsls	r3, r3, #31
   8bccc:	d501      	bpl.n	8bcd2 <__swbuf_r+0x52>
   8bcce:	2d0a      	cmp	r5, #10
   8bcd0:	d025      	beq.n	8bd1e <__swbuf_r+0x9e>
   8bcd2:	4638      	mov	r0, r7
   8bcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bcd6:	4621      	mov	r1, r4
   8bcd8:	4630      	mov	r0, r6
   8bcda:	f7fd f829 	bl	88d30 <__swsetup_r>
   8bcde:	bb20      	cbnz	r0, 8bd2a <__swbuf_r+0xaa>
   8bce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bce4:	b2ed      	uxtb	r5, r5
   8bce6:	b290      	uxth	r0, r2
   8bce8:	0481      	lsls	r1, r0, #18
   8bcea:	462f      	mov	r7, r5
   8bcec:	6923      	ldr	r3, [r4, #16]
   8bcee:	d4dc      	bmi.n	8bcaa <__swbuf_r+0x2a>
   8bcf0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8bcf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bcf6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8bcfa:	81a2      	strh	r2, [r4, #12]
   8bcfc:	6822      	ldr	r2, [r4, #0]
   8bcfe:	6661      	str	r1, [r4, #100]	; 0x64
   8bd00:	6961      	ldr	r1, [r4, #20]
   8bd02:	1ad3      	subs	r3, r2, r3
   8bd04:	4299      	cmp	r1, r3
   8bd06:	dcd5      	bgt.n	8bcb4 <__swbuf_r+0x34>
   8bd08:	4621      	mov	r1, r4
   8bd0a:	4630      	mov	r0, r6
   8bd0c:	f7fe f914 	bl	89f38 <_fflush_r>
   8bd10:	b958      	cbnz	r0, 8bd2a <__swbuf_r+0xaa>
   8bd12:	2301      	movs	r3, #1
   8bd14:	6822      	ldr	r2, [r4, #0]
   8bd16:	e7ce      	b.n	8bcb6 <__swbuf_r+0x36>
   8bd18:	f7fe f96a 	bl	89ff0 <__sinit>
   8bd1c:	e7b8      	b.n	8bc90 <__swbuf_r+0x10>
   8bd1e:	4621      	mov	r1, r4
   8bd20:	4630      	mov	r0, r6
   8bd22:	f7fe f909 	bl	89f38 <_fflush_r>
   8bd26:	2800      	cmp	r0, #0
   8bd28:	d0d3      	beq.n	8bcd2 <__swbuf_r+0x52>
   8bd2a:	f04f 37ff 	mov.w	r7, #4294967295
   8bd2e:	e7d0      	b.n	8bcd2 <__swbuf_r+0x52>

0008bd30 <_wcrtomb_r>:
   8bd30:	b570      	push	{r4, r5, r6, lr}
   8bd32:	4606      	mov	r6, r0
   8bd34:	461d      	mov	r5, r3
   8bd36:	b084      	sub	sp, #16
   8bd38:	b139      	cbz	r1, 8bd4a <_wcrtomb_r+0x1a>
   8bd3a:	4c0b      	ldr	r4, [pc, #44]	; (8bd68 <_wcrtomb_r+0x38>)
   8bd3c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8bd40:	47a0      	blx	r4
   8bd42:	1c43      	adds	r3, r0, #1
   8bd44:	d00a      	beq.n	8bd5c <_wcrtomb_r+0x2c>
   8bd46:	b004      	add	sp, #16
   8bd48:	bd70      	pop	{r4, r5, r6, pc}
   8bd4a:	460c      	mov	r4, r1
   8bd4c:	4906      	ldr	r1, [pc, #24]	; (8bd68 <_wcrtomb_r+0x38>)
   8bd4e:	4622      	mov	r2, r4
   8bd50:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8bd54:	a901      	add	r1, sp, #4
   8bd56:	47a0      	blx	r4
   8bd58:	1c43      	adds	r3, r0, #1
   8bd5a:	d1f4      	bne.n	8bd46 <_wcrtomb_r+0x16>
   8bd5c:	2200      	movs	r2, #0
   8bd5e:	238a      	movs	r3, #138	; 0x8a
   8bd60:	602a      	str	r2, [r5, #0]
   8bd62:	6033      	str	r3, [r6, #0]
   8bd64:	b004      	add	sp, #16
   8bd66:	bd70      	pop	{r4, r5, r6, pc}
   8bd68:	20000ddc 	.word	0x20000ddc

0008bd6c <__ascii_wctomb>:
   8bd6c:	4603      	mov	r3, r0
   8bd6e:	b149      	cbz	r1, 8bd84 <__ascii_wctomb+0x18>
   8bd70:	2aff      	cmp	r2, #255	; 0xff
   8bd72:	d802      	bhi.n	8bd7a <__ascii_wctomb+0xe>
   8bd74:	2001      	movs	r0, #1
   8bd76:	700a      	strb	r2, [r1, #0]
   8bd78:	4770      	bx	lr
   8bd7a:	228a      	movs	r2, #138	; 0x8a
   8bd7c:	f04f 30ff 	mov.w	r0, #4294967295
   8bd80:	601a      	str	r2, [r3, #0]
   8bd82:	4770      	bx	lr
   8bd84:	4608      	mov	r0, r1
   8bd86:	4770      	bx	lr

0008bd88 <_write_r>:
   8bd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bd8a:	460f      	mov	r7, r1
   8bd8c:	2600      	movs	r6, #0
   8bd8e:	4d08      	ldr	r5, [pc, #32]	; (8bdb0 <_write_r+0x28>)
   8bd90:	4611      	mov	r1, r2
   8bd92:	4604      	mov	r4, r0
   8bd94:	461a      	mov	r2, r3
   8bd96:	4638      	mov	r0, r7
   8bd98:	602e      	str	r6, [r5, #0]
   8bd9a:	f7f7 fe01 	bl	839a0 <_write>
   8bd9e:	1c43      	adds	r3, r0, #1
   8bda0:	d000      	beq.n	8bda4 <_write_r+0x1c>
   8bda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bda4:	682b      	ldr	r3, [r5, #0]
   8bda6:	2b00      	cmp	r3, #0
   8bda8:	d0fb      	beq.n	8bda2 <_write_r+0x1a>
   8bdaa:	6023      	str	r3, [r4, #0]
   8bdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bdae:	bf00      	nop
   8bdb0:	200026d8 	.word	0x200026d8

0008bdb4 <__register_exitproc>:
   8bdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bdb8:	f8df a080 	ldr.w	sl, [pc, #128]	; 8be3c <__register_exitproc+0x88>
   8bdbc:	4606      	mov	r6, r0
   8bdbe:	f8da 0000 	ldr.w	r0, [sl]
   8bdc2:	4698      	mov	r8, r3
   8bdc4:	460f      	mov	r7, r1
   8bdc6:	4691      	mov	r9, r2
   8bdc8:	f7fe fce4 	bl	8a794 <__retarget_lock_acquire_recursive>
   8bdcc:	4b1a      	ldr	r3, [pc, #104]	; (8be38 <__register_exitproc+0x84>)
   8bdce:	681b      	ldr	r3, [r3, #0]
   8bdd0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8bdd4:	b324      	cbz	r4, 8be20 <__register_exitproc+0x6c>
   8bdd6:	6865      	ldr	r5, [r4, #4]
   8bdd8:	2d1f      	cmp	r5, #31
   8bdda:	dc26      	bgt.n	8be2a <__register_exitproc+0x76>
   8bddc:	b95e      	cbnz	r6, 8bdf6 <__register_exitproc+0x42>
   8bdde:	1c6b      	adds	r3, r5, #1
   8bde0:	3502      	adds	r5, #2
   8bde2:	f8da 0000 	ldr.w	r0, [sl]
   8bde6:	6063      	str	r3, [r4, #4]
   8bde8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8bdec:	f7fe fcd4 	bl	8a798 <__retarget_lock_release_recursive>
   8bdf0:	2000      	movs	r0, #0
   8bdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bdf6:	2301      	movs	r3, #1
   8bdf8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8bdfc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8be00:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8be04:	40ab      	lsls	r3, r5
   8be06:	431a      	orrs	r2, r3
   8be08:	2e02      	cmp	r6, #2
   8be0a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8be0e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8be12:	d1e4      	bne.n	8bdde <__register_exitproc+0x2a>
   8be14:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8be18:	4313      	orrs	r3, r2
   8be1a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8be1e:	e7de      	b.n	8bdde <__register_exitproc+0x2a>
   8be20:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8be24:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8be28:	e7d5      	b.n	8bdd6 <__register_exitproc+0x22>
   8be2a:	f8da 0000 	ldr.w	r0, [sl]
   8be2e:	f7fe fcb3 	bl	8a798 <__retarget_lock_release_recursive>
   8be32:	f04f 30ff 	mov.w	r0, #4294967295
   8be36:	e7dc      	b.n	8bdf2 <__register_exitproc+0x3e>
   8be38:	0008cc44 	.word	0x0008cc44
   8be3c:	20000dd8 	.word	0x20000dd8

0008be40 <__assert_func>:
   8be40:	4614      	mov	r4, r2
   8be42:	b500      	push	{lr}
   8be44:	4d09      	ldr	r5, [pc, #36]	; (8be6c <__assert_func+0x2c>)
   8be46:	461a      	mov	r2, r3
   8be48:	4603      	mov	r3, r0
   8be4a:	6828      	ldr	r0, [r5, #0]
   8be4c:	b085      	sub	sp, #20
   8be4e:	68c0      	ldr	r0, [r0, #12]
   8be50:	b144      	cbz	r4, 8be64 <__assert_func+0x24>
   8be52:	4d07      	ldr	r5, [pc, #28]	; (8be70 <__assert_func+0x30>)
   8be54:	9100      	str	r1, [sp, #0]
   8be56:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8be5a:	4906      	ldr	r1, [pc, #24]	; (8be74 <__assert_func+0x34>)
   8be5c:	f000 f8b6 	bl	8bfcc <fiprintf>
   8be60:	f000 f91c 	bl	8c09c <abort>
   8be64:	4d04      	ldr	r5, [pc, #16]	; (8be78 <__assert_func+0x38>)
   8be66:	462c      	mov	r4, r5
   8be68:	e7f4      	b.n	8be54 <__assert_func+0x14>
   8be6a:	bf00      	nop
   8be6c:	200009ac 	.word	0x200009ac
   8be70:	0008cefc 	.word	0x0008cefc
   8be74:	0008cf0c 	.word	0x0008cf0c
   8be78:	0008cb98 	.word	0x0008cb98

0008be7c <_calloc_r>:
   8be7c:	b510      	push	{r4, lr}
   8be7e:	fb02 f101 	mul.w	r1, r2, r1
   8be82:	f7fe fd0b 	bl	8a89c <_malloc_r>
   8be86:	4604      	mov	r4, r0
   8be88:	b168      	cbz	r0, 8bea6 <_calloc_r+0x2a>
   8be8a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8be8e:	f022 0203 	bic.w	r2, r2, #3
   8be92:	3a04      	subs	r2, #4
   8be94:	2a24      	cmp	r2, #36	; 0x24
   8be96:	d818      	bhi.n	8beca <_calloc_r+0x4e>
   8be98:	2a13      	cmp	r2, #19
   8be9a:	d806      	bhi.n	8beaa <_calloc_r+0x2e>
   8be9c:	4602      	mov	r2, r0
   8be9e:	2300      	movs	r3, #0
   8bea0:	e9c2 3300 	strd	r3, r3, [r2]
   8bea4:	6093      	str	r3, [r2, #8]
   8bea6:	4620      	mov	r0, r4
   8bea8:	bd10      	pop	{r4, pc}
   8beaa:	2300      	movs	r3, #0
   8beac:	2a1b      	cmp	r2, #27
   8beae:	e9c0 3300 	strd	r3, r3, [r0]
   8beb2:	d90f      	bls.n	8bed4 <_calloc_r+0x58>
   8beb4:	2a24      	cmp	r2, #36	; 0x24
   8beb6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8beba:	bf0a      	itet	eq
   8bebc:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8bec0:	f100 0210 	addne.w	r2, r0, #16
   8bec4:	f100 0218 	addeq.w	r2, r0, #24
   8bec8:	e7e9      	b.n	8be9e <_calloc_r+0x22>
   8beca:	2100      	movs	r1, #0
   8becc:	f7fa f8c6 	bl	8605c <memset>
   8bed0:	4620      	mov	r0, r4
   8bed2:	bd10      	pop	{r4, pc}
   8bed4:	f100 0208 	add.w	r2, r0, #8
   8bed8:	e7e1      	b.n	8be9e <_calloc_r+0x22>
   8beda:	bf00      	nop

0008bedc <_close_r>:
   8bedc:	2200      	movs	r2, #0
   8bede:	b538      	push	{r3, r4, r5, lr}
   8bee0:	4d06      	ldr	r5, [pc, #24]	; (8befc <_close_r+0x20>)
   8bee2:	4604      	mov	r4, r0
   8bee4:	4608      	mov	r0, r1
   8bee6:	602a      	str	r2, [r5, #0]
   8bee8:	f7f9 fcea 	bl	858c0 <_close>
   8beec:	1c43      	adds	r3, r0, #1
   8beee:	d000      	beq.n	8bef2 <_close_r+0x16>
   8bef0:	bd38      	pop	{r3, r4, r5, pc}
   8bef2:	682b      	ldr	r3, [r5, #0]
   8bef4:	2b00      	cmp	r3, #0
   8bef6:	d0fb      	beq.n	8bef0 <_close_r+0x14>
   8bef8:	6023      	str	r3, [r4, #0]
   8befa:	bd38      	pop	{r3, r4, r5, pc}
   8befc:	200026d8 	.word	0x200026d8

0008bf00 <_fclose_r>:
   8bf00:	b570      	push	{r4, r5, r6, lr}
   8bf02:	2900      	cmp	r1, #0
   8bf04:	d04b      	beq.n	8bf9e <_fclose_r+0x9e>
   8bf06:	460c      	mov	r4, r1
   8bf08:	4605      	mov	r5, r0
   8bf0a:	b110      	cbz	r0, 8bf12 <_fclose_r+0x12>
   8bf0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bf0e:	2b00      	cmp	r3, #0
   8bf10:	d048      	beq.n	8bfa4 <_fclose_r+0xa4>
   8bf12:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bf14:	07d8      	lsls	r0, r3, #31
   8bf16:	d534      	bpl.n	8bf82 <_fclose_r+0x82>
   8bf18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf1c:	2b00      	cmp	r3, #0
   8bf1e:	d03e      	beq.n	8bf9e <_fclose_r+0x9e>
   8bf20:	4621      	mov	r1, r4
   8bf22:	4628      	mov	r0, r5
   8bf24:	f7fd ff70 	bl	89e08 <__sflush_r>
   8bf28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8bf2a:	4606      	mov	r6, r0
   8bf2c:	b133      	cbz	r3, 8bf3c <_fclose_r+0x3c>
   8bf2e:	4628      	mov	r0, r5
   8bf30:	69e1      	ldr	r1, [r4, #28]
   8bf32:	4798      	blx	r3
   8bf34:	2800      	cmp	r0, #0
   8bf36:	bfb8      	it	lt
   8bf38:	f04f 36ff 	movlt.w	r6, #4294967295
   8bf3c:	89a3      	ldrh	r3, [r4, #12]
   8bf3e:	061a      	lsls	r2, r3, #24
   8bf40:	d43b      	bmi.n	8bfba <_fclose_r+0xba>
   8bf42:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8bf44:	b141      	cbz	r1, 8bf58 <_fclose_r+0x58>
   8bf46:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8bf4a:	4299      	cmp	r1, r3
   8bf4c:	d002      	beq.n	8bf54 <_fclose_r+0x54>
   8bf4e:	4628      	mov	r0, r5
   8bf50:	f7fe f972 	bl	8a238 <_free_r>
   8bf54:	2300      	movs	r3, #0
   8bf56:	6323      	str	r3, [r4, #48]	; 0x30
   8bf58:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8bf5a:	b121      	cbz	r1, 8bf66 <_fclose_r+0x66>
   8bf5c:	4628      	mov	r0, r5
   8bf5e:	f7fe f96b 	bl	8a238 <_free_r>
   8bf62:	2300      	movs	r3, #0
   8bf64:	6463      	str	r3, [r4, #68]	; 0x44
   8bf66:	f7fe f871 	bl	8a04c <__sfp_lock_acquire>
   8bf6a:	2200      	movs	r2, #0
   8bf6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bf6e:	81a2      	strh	r2, [r4, #12]
   8bf70:	07db      	lsls	r3, r3, #31
   8bf72:	d527      	bpl.n	8bfc4 <_fclose_r+0xc4>
   8bf74:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf76:	f7fe fc0b 	bl	8a790 <__retarget_lock_close_recursive>
   8bf7a:	f7fe f86d 	bl	8a058 <__sfp_lock_release>
   8bf7e:	4630      	mov	r0, r6
   8bf80:	bd70      	pop	{r4, r5, r6, pc}
   8bf82:	89a3      	ldrh	r3, [r4, #12]
   8bf84:	0599      	lsls	r1, r3, #22
   8bf86:	d4cb      	bmi.n	8bf20 <_fclose_r+0x20>
   8bf88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf8a:	f7fe fc03 	bl	8a794 <__retarget_lock_acquire_recursive>
   8bf8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf92:	2b00      	cmp	r3, #0
   8bf94:	d1c4      	bne.n	8bf20 <_fclose_r+0x20>
   8bf96:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8bf98:	f016 0601 	ands.w	r6, r6, #1
   8bf9c:	d008      	beq.n	8bfb0 <_fclose_r+0xb0>
   8bf9e:	2600      	movs	r6, #0
   8bfa0:	4630      	mov	r0, r6
   8bfa2:	bd70      	pop	{r4, r5, r6, pc}
   8bfa4:	f7fe f824 	bl	89ff0 <__sinit>
   8bfa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bfaa:	07d8      	lsls	r0, r3, #31
   8bfac:	d4b4      	bmi.n	8bf18 <_fclose_r+0x18>
   8bfae:	e7e8      	b.n	8bf82 <_fclose_r+0x82>
   8bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bfb2:	f7fe fbf1 	bl	8a798 <__retarget_lock_release_recursive>
   8bfb6:	4630      	mov	r0, r6
   8bfb8:	bd70      	pop	{r4, r5, r6, pc}
   8bfba:	4628      	mov	r0, r5
   8bfbc:	6921      	ldr	r1, [r4, #16]
   8bfbe:	f7fe f93b 	bl	8a238 <_free_r>
   8bfc2:	e7be      	b.n	8bf42 <_fclose_r+0x42>
   8bfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bfc6:	f7fe fbe7 	bl	8a798 <__retarget_lock_release_recursive>
   8bfca:	e7d3      	b.n	8bf74 <_fclose_r+0x74>

0008bfcc <fiprintf>:
   8bfcc:	b40e      	push	{r1, r2, r3}
   8bfce:	b510      	push	{r4, lr}
   8bfd0:	b083      	sub	sp, #12
   8bfd2:	ab05      	add	r3, sp, #20
   8bfd4:	4c06      	ldr	r4, [pc, #24]	; (8bff0 <fiprintf+0x24>)
   8bfd6:	f853 2b04 	ldr.w	r2, [r3], #4
   8bfda:	4601      	mov	r1, r0
   8bfdc:	6820      	ldr	r0, [r4, #0]
   8bfde:	9301      	str	r3, [sp, #4]
   8bfe0:	f7fb ffcc 	bl	87f7c <_vfiprintf_r>
   8bfe4:	b003      	add	sp, #12
   8bfe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8bfea:	b003      	add	sp, #12
   8bfec:	4770      	bx	lr
   8bfee:	bf00      	nop
   8bff0:	200009ac 	.word	0x200009ac

0008bff4 <_fstat_r>:
   8bff4:	b570      	push	{r4, r5, r6, lr}
   8bff6:	460c      	mov	r4, r1
   8bff8:	4603      	mov	r3, r0
   8bffa:	2600      	movs	r6, #0
   8bffc:	4d07      	ldr	r5, [pc, #28]	; (8c01c <_fstat_r+0x28>)
   8bffe:	4620      	mov	r0, r4
   8c000:	4611      	mov	r1, r2
   8c002:	461c      	mov	r4, r3
   8c004:	602e      	str	r6, [r5, #0]
   8c006:	f7f9 fc5e 	bl	858c6 <_fstat>
   8c00a:	1c43      	adds	r3, r0, #1
   8c00c:	d000      	beq.n	8c010 <_fstat_r+0x1c>
   8c00e:	bd70      	pop	{r4, r5, r6, pc}
   8c010:	682b      	ldr	r3, [r5, #0]
   8c012:	2b00      	cmp	r3, #0
   8c014:	d0fb      	beq.n	8c00e <_fstat_r+0x1a>
   8c016:	6023      	str	r3, [r4, #0]
   8c018:	bd70      	pop	{r4, r5, r6, pc}
   8c01a:	bf00      	nop
   8c01c:	200026d8 	.word	0x200026d8

0008c020 <_isatty_r>:
   8c020:	2200      	movs	r2, #0
   8c022:	b538      	push	{r3, r4, r5, lr}
   8c024:	4d06      	ldr	r5, [pc, #24]	; (8c040 <_isatty_r+0x20>)
   8c026:	4604      	mov	r4, r0
   8c028:	4608      	mov	r0, r1
   8c02a:	602a      	str	r2, [r5, #0]
   8c02c:	f7f9 fc50 	bl	858d0 <_isatty>
   8c030:	1c43      	adds	r3, r0, #1
   8c032:	d000      	beq.n	8c036 <_isatty_r+0x16>
   8c034:	bd38      	pop	{r3, r4, r5, pc}
   8c036:	682b      	ldr	r3, [r5, #0]
   8c038:	2b00      	cmp	r3, #0
   8c03a:	d0fb      	beq.n	8c034 <_isatty_r+0x14>
   8c03c:	6023      	str	r3, [r4, #0]
   8c03e:	bd38      	pop	{r3, r4, r5, pc}
   8c040:	200026d8 	.word	0x200026d8

0008c044 <_lseek_r>:
   8c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c046:	460f      	mov	r7, r1
   8c048:	2600      	movs	r6, #0
   8c04a:	4d08      	ldr	r5, [pc, #32]	; (8c06c <_lseek_r+0x28>)
   8c04c:	4611      	mov	r1, r2
   8c04e:	4604      	mov	r4, r0
   8c050:	461a      	mov	r2, r3
   8c052:	4638      	mov	r0, r7
   8c054:	602e      	str	r6, [r5, #0]
   8c056:	f7f9 fc3d 	bl	858d4 <_lseek>
   8c05a:	1c43      	adds	r3, r0, #1
   8c05c:	d000      	beq.n	8c060 <_lseek_r+0x1c>
   8c05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c060:	682b      	ldr	r3, [r5, #0]
   8c062:	2b00      	cmp	r3, #0
   8c064:	d0fb      	beq.n	8c05e <_lseek_r+0x1a>
   8c066:	6023      	str	r3, [r4, #0]
   8c068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c06a:	bf00      	nop
   8c06c:	200026d8 	.word	0x200026d8

0008c070 <_read_r>:
   8c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c072:	460f      	mov	r7, r1
   8c074:	2600      	movs	r6, #0
   8c076:	4d08      	ldr	r5, [pc, #32]	; (8c098 <_read_r+0x28>)
   8c078:	4611      	mov	r1, r2
   8c07a:	4604      	mov	r4, r0
   8c07c:	461a      	mov	r2, r3
   8c07e:	4638      	mov	r0, r7
   8c080:	602e      	str	r6, [r5, #0]
   8c082:	f7f7 fc6f 	bl	83964 <_read>
   8c086:	1c43      	adds	r3, r0, #1
   8c088:	d000      	beq.n	8c08c <_read_r+0x1c>
   8c08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c08c:	682b      	ldr	r3, [r5, #0]
   8c08e:	2b00      	cmp	r3, #0
   8c090:	d0fb      	beq.n	8c08a <_read_r+0x1a>
   8c092:	6023      	str	r3, [r4, #0]
   8c094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c096:	bf00      	nop
   8c098:	200026d8 	.word	0x200026d8

0008c09c <abort>:
   8c09c:	2006      	movs	r0, #6
   8c09e:	b508      	push	{r3, lr}
   8c0a0:	f000 f830 	bl	8c104 <raise>
   8c0a4:	2001      	movs	r0, #1
   8c0a6:	f7f9 fc17 	bl	858d8 <_exit>
   8c0aa:	bf00      	nop

0008c0ac <_raise_r>:
   8c0ac:	291f      	cmp	r1, #31
   8c0ae:	b538      	push	{r3, r4, r5, lr}
   8c0b0:	4605      	mov	r5, r0
   8c0b2:	d821      	bhi.n	8c0f8 <_raise_r+0x4c>
   8c0b4:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c0b8:	460c      	mov	r4, r1
   8c0ba:	b16a      	cbz	r2, 8c0d8 <_raise_r+0x2c>
   8c0bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c0c0:	b153      	cbz	r3, 8c0d8 <_raise_r+0x2c>
   8c0c2:	2b01      	cmp	r3, #1
   8c0c4:	d016      	beq.n	8c0f4 <_raise_r+0x48>
   8c0c6:	1c59      	adds	r1, r3, #1
   8c0c8:	d010      	beq.n	8c0ec <_raise_r+0x40>
   8c0ca:	2500      	movs	r5, #0
   8c0cc:	4620      	mov	r0, r4
   8c0ce:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c0d2:	4798      	blx	r3
   8c0d4:	4628      	mov	r0, r5
   8c0d6:	bd38      	pop	{r3, r4, r5, pc}
   8c0d8:	4628      	mov	r0, r5
   8c0da:	f000 f831 	bl	8c140 <_getpid_r>
   8c0de:	4622      	mov	r2, r4
   8c0e0:	4601      	mov	r1, r0
   8c0e2:	4628      	mov	r0, r5
   8c0e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c0e8:	f000 b814 	b.w	8c114 <_kill_r>
   8c0ec:	2316      	movs	r3, #22
   8c0ee:	2001      	movs	r0, #1
   8c0f0:	602b      	str	r3, [r5, #0]
   8c0f2:	bd38      	pop	{r3, r4, r5, pc}
   8c0f4:	2000      	movs	r0, #0
   8c0f6:	bd38      	pop	{r3, r4, r5, pc}
   8c0f8:	2316      	movs	r3, #22
   8c0fa:	f04f 30ff 	mov.w	r0, #4294967295
   8c0fe:	602b      	str	r3, [r5, #0]
   8c100:	bd38      	pop	{r3, r4, r5, pc}
   8c102:	bf00      	nop

0008c104 <raise>:
   8c104:	4b02      	ldr	r3, [pc, #8]	; (8c110 <raise+0xc>)
   8c106:	4601      	mov	r1, r0
   8c108:	6818      	ldr	r0, [r3, #0]
   8c10a:	f7ff bfcf 	b.w	8c0ac <_raise_r>
   8c10e:	bf00      	nop
   8c110:	200009ac 	.word	0x200009ac

0008c114 <_kill_r>:
   8c114:	b570      	push	{r4, r5, r6, lr}
   8c116:	460c      	mov	r4, r1
   8c118:	4603      	mov	r3, r0
   8c11a:	2600      	movs	r6, #0
   8c11c:	4d07      	ldr	r5, [pc, #28]	; (8c13c <_kill_r+0x28>)
   8c11e:	4620      	mov	r0, r4
   8c120:	4611      	mov	r1, r2
   8c122:	461c      	mov	r4, r3
   8c124:	602e      	str	r6, [r5, #0]
   8c126:	f7f9 fbe1 	bl	858ec <_kill>
   8c12a:	1c43      	adds	r3, r0, #1
   8c12c:	d000      	beq.n	8c130 <_kill_r+0x1c>
   8c12e:	bd70      	pop	{r4, r5, r6, pc}
   8c130:	682b      	ldr	r3, [r5, #0]
   8c132:	2b00      	cmp	r3, #0
   8c134:	d0fb      	beq.n	8c12e <_kill_r+0x1a>
   8c136:	6023      	str	r3, [r4, #0]
   8c138:	bd70      	pop	{r4, r5, r6, pc}
   8c13a:	bf00      	nop
   8c13c:	200026d8 	.word	0x200026d8

0008c140 <_getpid_r>:
   8c140:	f7f9 bbd5 	b.w	858ee <_getpid>

0008c144 <__aeabi_drsub>:
   8c144:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c148:	e002      	b.n	8c150 <__adddf3>
   8c14a:	bf00      	nop

0008c14c <__aeabi_dsub>:
   8c14c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c150 <__adddf3>:
   8c150:	b530      	push	{r4, r5, lr}
   8c152:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c156:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c15a:	ea94 0f05 	teq	r4, r5
   8c15e:	bf08      	it	eq
   8c160:	ea90 0f02 	teqeq	r0, r2
   8c164:	bf1f      	itttt	ne
   8c166:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c16a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c16e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c172:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c176:	f000 80e2 	beq.w	8c33e <__adddf3+0x1ee>
   8c17a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c17e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c182:	bfb8      	it	lt
   8c184:	426d      	neglt	r5, r5
   8c186:	dd0c      	ble.n	8c1a2 <__adddf3+0x52>
   8c188:	442c      	add	r4, r5
   8c18a:	ea80 0202 	eor.w	r2, r0, r2
   8c18e:	ea81 0303 	eor.w	r3, r1, r3
   8c192:	ea82 0000 	eor.w	r0, r2, r0
   8c196:	ea83 0101 	eor.w	r1, r3, r1
   8c19a:	ea80 0202 	eor.w	r2, r0, r2
   8c19e:	ea81 0303 	eor.w	r3, r1, r3
   8c1a2:	2d36      	cmp	r5, #54	; 0x36
   8c1a4:	bf88      	it	hi
   8c1a6:	bd30      	pophi	{r4, r5, pc}
   8c1a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c1ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c1b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c1b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c1b8:	d002      	beq.n	8c1c0 <__adddf3+0x70>
   8c1ba:	4240      	negs	r0, r0
   8c1bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c1c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c1c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c1c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c1cc:	d002      	beq.n	8c1d4 <__adddf3+0x84>
   8c1ce:	4252      	negs	r2, r2
   8c1d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c1d4:	ea94 0f05 	teq	r4, r5
   8c1d8:	f000 80a7 	beq.w	8c32a <__adddf3+0x1da>
   8c1dc:	f1a4 0401 	sub.w	r4, r4, #1
   8c1e0:	f1d5 0e20 	rsbs	lr, r5, #32
   8c1e4:	db0d      	blt.n	8c202 <__adddf3+0xb2>
   8c1e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c1ea:	fa22 f205 	lsr.w	r2, r2, r5
   8c1ee:	1880      	adds	r0, r0, r2
   8c1f0:	f141 0100 	adc.w	r1, r1, #0
   8c1f4:	fa03 f20e 	lsl.w	r2, r3, lr
   8c1f8:	1880      	adds	r0, r0, r2
   8c1fa:	fa43 f305 	asr.w	r3, r3, r5
   8c1fe:	4159      	adcs	r1, r3
   8c200:	e00e      	b.n	8c220 <__adddf3+0xd0>
   8c202:	f1a5 0520 	sub.w	r5, r5, #32
   8c206:	f10e 0e20 	add.w	lr, lr, #32
   8c20a:	2a01      	cmp	r2, #1
   8c20c:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c210:	bf28      	it	cs
   8c212:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c216:	fa43 f305 	asr.w	r3, r3, r5
   8c21a:	18c0      	adds	r0, r0, r3
   8c21c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c224:	d507      	bpl.n	8c236 <__adddf3+0xe6>
   8c226:	f04f 0e00 	mov.w	lr, #0
   8c22a:	f1dc 0c00 	rsbs	ip, ip, #0
   8c22e:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c232:	eb6e 0101 	sbc.w	r1, lr, r1
   8c236:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c23a:	d31b      	bcc.n	8c274 <__adddf3+0x124>
   8c23c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c240:	d30c      	bcc.n	8c25c <__adddf3+0x10c>
   8c242:	0849      	lsrs	r1, r1, #1
   8c244:	ea5f 0030 	movs.w	r0, r0, rrx
   8c248:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c24c:	f104 0401 	add.w	r4, r4, #1
   8c250:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c254:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c258:	f080 809a 	bcs.w	8c390 <__adddf3+0x240>
   8c25c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c260:	bf08      	it	eq
   8c262:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c266:	f150 0000 	adcs.w	r0, r0, #0
   8c26a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c26e:	ea41 0105 	orr.w	r1, r1, r5
   8c272:	bd30      	pop	{r4, r5, pc}
   8c274:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c278:	4140      	adcs	r0, r0
   8c27a:	eb41 0101 	adc.w	r1, r1, r1
   8c27e:	3c01      	subs	r4, #1
   8c280:	bf28      	it	cs
   8c282:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c286:	d2e9      	bcs.n	8c25c <__adddf3+0x10c>
   8c288:	f091 0f00 	teq	r1, #0
   8c28c:	bf04      	itt	eq
   8c28e:	4601      	moveq	r1, r0
   8c290:	2000      	moveq	r0, #0
   8c292:	fab1 f381 	clz	r3, r1
   8c296:	bf08      	it	eq
   8c298:	3320      	addeq	r3, #32
   8c29a:	f1a3 030b 	sub.w	r3, r3, #11
   8c29e:	f1b3 0220 	subs.w	r2, r3, #32
   8c2a2:	da0c      	bge.n	8c2be <__adddf3+0x16e>
   8c2a4:	320c      	adds	r2, #12
   8c2a6:	dd08      	ble.n	8c2ba <__adddf3+0x16a>
   8c2a8:	f102 0c14 	add.w	ip, r2, #20
   8c2ac:	f1c2 020c 	rsb	r2, r2, #12
   8c2b0:	fa01 f00c 	lsl.w	r0, r1, ip
   8c2b4:	fa21 f102 	lsr.w	r1, r1, r2
   8c2b8:	e00c      	b.n	8c2d4 <__adddf3+0x184>
   8c2ba:	f102 0214 	add.w	r2, r2, #20
   8c2be:	bfd8      	it	le
   8c2c0:	f1c2 0c20 	rsble	ip, r2, #32
   8c2c4:	fa01 f102 	lsl.w	r1, r1, r2
   8c2c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c2cc:	bfdc      	itt	le
   8c2ce:	ea41 010c 	orrle.w	r1, r1, ip
   8c2d2:	4090      	lslle	r0, r2
   8c2d4:	1ae4      	subs	r4, r4, r3
   8c2d6:	bfa2      	ittt	ge
   8c2d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c2dc:	4329      	orrge	r1, r5
   8c2de:	bd30      	popge	{r4, r5, pc}
   8c2e0:	ea6f 0404 	mvn.w	r4, r4
   8c2e4:	3c1f      	subs	r4, #31
   8c2e6:	da1c      	bge.n	8c322 <__adddf3+0x1d2>
   8c2e8:	340c      	adds	r4, #12
   8c2ea:	dc0e      	bgt.n	8c30a <__adddf3+0x1ba>
   8c2ec:	f104 0414 	add.w	r4, r4, #20
   8c2f0:	f1c4 0220 	rsb	r2, r4, #32
   8c2f4:	fa20 f004 	lsr.w	r0, r0, r4
   8c2f8:	fa01 f302 	lsl.w	r3, r1, r2
   8c2fc:	ea40 0003 	orr.w	r0, r0, r3
   8c300:	fa21 f304 	lsr.w	r3, r1, r4
   8c304:	ea45 0103 	orr.w	r1, r5, r3
   8c308:	bd30      	pop	{r4, r5, pc}
   8c30a:	f1c4 040c 	rsb	r4, r4, #12
   8c30e:	f1c4 0220 	rsb	r2, r4, #32
   8c312:	fa20 f002 	lsr.w	r0, r0, r2
   8c316:	fa01 f304 	lsl.w	r3, r1, r4
   8c31a:	ea40 0003 	orr.w	r0, r0, r3
   8c31e:	4629      	mov	r1, r5
   8c320:	bd30      	pop	{r4, r5, pc}
   8c322:	fa21 f004 	lsr.w	r0, r1, r4
   8c326:	4629      	mov	r1, r5
   8c328:	bd30      	pop	{r4, r5, pc}
   8c32a:	f094 0f00 	teq	r4, #0
   8c32e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c332:	bf06      	itte	eq
   8c334:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c338:	3401      	addeq	r4, #1
   8c33a:	3d01      	subne	r5, #1
   8c33c:	e74e      	b.n	8c1dc <__adddf3+0x8c>
   8c33e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c342:	bf18      	it	ne
   8c344:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c348:	d029      	beq.n	8c39e <__adddf3+0x24e>
   8c34a:	ea94 0f05 	teq	r4, r5
   8c34e:	bf08      	it	eq
   8c350:	ea90 0f02 	teqeq	r0, r2
   8c354:	d005      	beq.n	8c362 <__adddf3+0x212>
   8c356:	ea54 0c00 	orrs.w	ip, r4, r0
   8c35a:	bf04      	itt	eq
   8c35c:	4619      	moveq	r1, r3
   8c35e:	4610      	moveq	r0, r2
   8c360:	bd30      	pop	{r4, r5, pc}
   8c362:	ea91 0f03 	teq	r1, r3
   8c366:	bf1e      	ittt	ne
   8c368:	2100      	movne	r1, #0
   8c36a:	2000      	movne	r0, #0
   8c36c:	bd30      	popne	{r4, r5, pc}
   8c36e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c372:	d105      	bne.n	8c380 <__adddf3+0x230>
   8c374:	0040      	lsls	r0, r0, #1
   8c376:	4149      	adcs	r1, r1
   8c378:	bf28      	it	cs
   8c37a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c37e:	bd30      	pop	{r4, r5, pc}
   8c380:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c384:	bf3c      	itt	cc
   8c386:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c38a:	bd30      	popcc	{r4, r5, pc}
   8c38c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c390:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c394:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c398:	f04f 0000 	mov.w	r0, #0
   8c39c:	bd30      	pop	{r4, r5, pc}
   8c39e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c3a2:	bf1a      	itte	ne
   8c3a4:	4619      	movne	r1, r3
   8c3a6:	4610      	movne	r0, r2
   8c3a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c3ac:	bf1c      	itt	ne
   8c3ae:	460b      	movne	r3, r1
   8c3b0:	4602      	movne	r2, r0
   8c3b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c3b6:	bf06      	itte	eq
   8c3b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c3bc:	ea91 0f03 	teqeq	r1, r3
   8c3c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c3c4:	bd30      	pop	{r4, r5, pc}
   8c3c6:	bf00      	nop

0008c3c8 <__aeabi_ui2d>:
   8c3c8:	f090 0f00 	teq	r0, #0
   8c3cc:	bf04      	itt	eq
   8c3ce:	2100      	moveq	r1, #0
   8c3d0:	4770      	bxeq	lr
   8c3d2:	b530      	push	{r4, r5, lr}
   8c3d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c3d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c3dc:	f04f 0500 	mov.w	r5, #0
   8c3e0:	f04f 0100 	mov.w	r1, #0
   8c3e4:	e750      	b.n	8c288 <__adddf3+0x138>
   8c3e6:	bf00      	nop

0008c3e8 <__aeabi_i2d>:
   8c3e8:	f090 0f00 	teq	r0, #0
   8c3ec:	bf04      	itt	eq
   8c3ee:	2100      	moveq	r1, #0
   8c3f0:	4770      	bxeq	lr
   8c3f2:	b530      	push	{r4, r5, lr}
   8c3f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c3f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c3fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c400:	bf48      	it	mi
   8c402:	4240      	negmi	r0, r0
   8c404:	f04f 0100 	mov.w	r1, #0
   8c408:	e73e      	b.n	8c288 <__adddf3+0x138>
   8c40a:	bf00      	nop

0008c40c <__aeabi_f2d>:
   8c40c:	0042      	lsls	r2, r0, #1
   8c40e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c412:	ea4f 0131 	mov.w	r1, r1, rrx
   8c416:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c41a:	bf1f      	itttt	ne
   8c41c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c420:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c424:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c428:	4770      	bxne	lr
   8c42a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c42e:	bf08      	it	eq
   8c430:	4770      	bxeq	lr
   8c432:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c436:	bf04      	itt	eq
   8c438:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c43c:	4770      	bxeq	lr
   8c43e:	b530      	push	{r4, r5, lr}
   8c440:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c44c:	e71c      	b.n	8c288 <__adddf3+0x138>
   8c44e:	bf00      	nop

0008c450 <__aeabi_ul2d>:
   8c450:	ea50 0201 	orrs.w	r2, r0, r1
   8c454:	bf08      	it	eq
   8c456:	4770      	bxeq	lr
   8c458:	b530      	push	{r4, r5, lr}
   8c45a:	f04f 0500 	mov.w	r5, #0
   8c45e:	e00a      	b.n	8c476 <__aeabi_l2d+0x16>

0008c460 <__aeabi_l2d>:
   8c460:	ea50 0201 	orrs.w	r2, r0, r1
   8c464:	bf08      	it	eq
   8c466:	4770      	bxeq	lr
   8c468:	b530      	push	{r4, r5, lr}
   8c46a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c46e:	d502      	bpl.n	8c476 <__aeabi_l2d+0x16>
   8c470:	4240      	negs	r0, r0
   8c472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c476:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c47a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c47e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c482:	f43f aed8 	beq.w	8c236 <__adddf3+0xe6>
   8c486:	f04f 0203 	mov.w	r2, #3
   8c48a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c48e:	bf18      	it	ne
   8c490:	3203      	addne	r2, #3
   8c492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c496:	bf18      	it	ne
   8c498:	3203      	addne	r2, #3
   8c49a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c49e:	f1c2 0320 	rsb	r3, r2, #32
   8c4a2:	fa00 fc03 	lsl.w	ip, r0, r3
   8c4a6:	fa20 f002 	lsr.w	r0, r0, r2
   8c4aa:	fa01 fe03 	lsl.w	lr, r1, r3
   8c4ae:	ea40 000e 	orr.w	r0, r0, lr
   8c4b2:	fa21 f102 	lsr.w	r1, r1, r2
   8c4b6:	4414      	add	r4, r2
   8c4b8:	e6bd      	b.n	8c236 <__adddf3+0xe6>
   8c4ba:	bf00      	nop

0008c4bc <__aeabi_dmul>:
   8c4bc:	b570      	push	{r4, r5, r6, lr}
   8c4be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c4c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c4c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c4ca:	bf1d      	ittte	ne
   8c4cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c4d0:	ea94 0f0c 	teqne	r4, ip
   8c4d4:	ea95 0f0c 	teqne	r5, ip
   8c4d8:	f000 f8de 	bleq	8c698 <__aeabi_dmul+0x1dc>
   8c4dc:	442c      	add	r4, r5
   8c4de:	ea81 0603 	eor.w	r6, r1, r3
   8c4e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c4e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c4ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c4ee:	bf18      	it	ne
   8c4f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c4f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c4f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c4fc:	d038      	beq.n	8c570 <__aeabi_dmul+0xb4>
   8c4fe:	fba0 ce02 	umull	ip, lr, r0, r2
   8c502:	f04f 0500 	mov.w	r5, #0
   8c506:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c50a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c50e:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c512:	f04f 0600 	mov.w	r6, #0
   8c516:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c51a:	f09c 0f00 	teq	ip, #0
   8c51e:	bf18      	it	ne
   8c520:	f04e 0e01 	orrne.w	lr, lr, #1
   8c524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c52c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c530:	d204      	bcs.n	8c53c <__aeabi_dmul+0x80>
   8c532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c536:	416d      	adcs	r5, r5
   8c538:	eb46 0606 	adc.w	r6, r6, r6
   8c53c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c54c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c554:	bf88      	it	hi
   8c556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c55a:	d81e      	bhi.n	8c59a <__aeabi_dmul+0xde>
   8c55c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c560:	bf08      	it	eq
   8c562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c566:	f150 0000 	adcs.w	r0, r0, #0
   8c56a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c56e:	bd70      	pop	{r4, r5, r6, pc}
   8c570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c574:	ea46 0101 	orr.w	r1, r6, r1
   8c578:	ea40 0002 	orr.w	r0, r0, r2
   8c57c:	ea81 0103 	eor.w	r1, r1, r3
   8c580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c584:	bfc2      	ittt	gt
   8c586:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c58a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c58e:	bd70      	popgt	{r4, r5, r6, pc}
   8c590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c594:	f04f 0e00 	mov.w	lr, #0
   8c598:	3c01      	subs	r4, #1
   8c59a:	f300 80ab 	bgt.w	8c6f4 <__aeabi_dmul+0x238>
   8c59e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c5a2:	bfde      	ittt	le
   8c5a4:	2000      	movle	r0, #0
   8c5a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c5aa:	bd70      	pople	{r4, r5, r6, pc}
   8c5ac:	f1c4 0400 	rsb	r4, r4, #0
   8c5b0:	3c20      	subs	r4, #32
   8c5b2:	da35      	bge.n	8c620 <__aeabi_dmul+0x164>
   8c5b4:	340c      	adds	r4, #12
   8c5b6:	dc1b      	bgt.n	8c5f0 <__aeabi_dmul+0x134>
   8c5b8:	f104 0414 	add.w	r4, r4, #20
   8c5bc:	f1c4 0520 	rsb	r5, r4, #32
   8c5c0:	fa00 f305 	lsl.w	r3, r0, r5
   8c5c4:	fa20 f004 	lsr.w	r0, r0, r4
   8c5c8:	fa01 f205 	lsl.w	r2, r1, r5
   8c5cc:	ea40 0002 	orr.w	r0, r0, r2
   8c5d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c5d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c5d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c5dc:	fa21 f604 	lsr.w	r6, r1, r4
   8c5e0:	eb42 0106 	adc.w	r1, r2, r6
   8c5e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c5e8:	bf08      	it	eq
   8c5ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c5ee:	bd70      	pop	{r4, r5, r6, pc}
   8c5f0:	f1c4 040c 	rsb	r4, r4, #12
   8c5f4:	f1c4 0520 	rsb	r5, r4, #32
   8c5f8:	fa00 f304 	lsl.w	r3, r0, r4
   8c5fc:	fa20 f005 	lsr.w	r0, r0, r5
   8c600:	fa01 f204 	lsl.w	r2, r1, r4
   8c604:	ea40 0002 	orr.w	r0, r0, r2
   8c608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c60c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c610:	f141 0100 	adc.w	r1, r1, #0
   8c614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c618:	bf08      	it	eq
   8c61a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c61e:	bd70      	pop	{r4, r5, r6, pc}
   8c620:	f1c4 0520 	rsb	r5, r4, #32
   8c624:	fa00 f205 	lsl.w	r2, r0, r5
   8c628:	ea4e 0e02 	orr.w	lr, lr, r2
   8c62c:	fa20 f304 	lsr.w	r3, r0, r4
   8c630:	fa01 f205 	lsl.w	r2, r1, r5
   8c634:	ea43 0302 	orr.w	r3, r3, r2
   8c638:	fa21 f004 	lsr.w	r0, r1, r4
   8c63c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c640:	fa21 f204 	lsr.w	r2, r1, r4
   8c644:	ea20 0002 	bic.w	r0, r0, r2
   8c648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c64c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c650:	bf08      	it	eq
   8c652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c656:	bd70      	pop	{r4, r5, r6, pc}
   8c658:	f094 0f00 	teq	r4, #0
   8c65c:	d10f      	bne.n	8c67e <__aeabi_dmul+0x1c2>
   8c65e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c662:	0040      	lsls	r0, r0, #1
   8c664:	eb41 0101 	adc.w	r1, r1, r1
   8c668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c66c:	bf08      	it	eq
   8c66e:	3c01      	subeq	r4, #1
   8c670:	d0f7      	beq.n	8c662 <__aeabi_dmul+0x1a6>
   8c672:	ea41 0106 	orr.w	r1, r1, r6
   8c676:	f095 0f00 	teq	r5, #0
   8c67a:	bf18      	it	ne
   8c67c:	4770      	bxne	lr
   8c67e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c682:	0052      	lsls	r2, r2, #1
   8c684:	eb43 0303 	adc.w	r3, r3, r3
   8c688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c68c:	bf08      	it	eq
   8c68e:	3d01      	subeq	r5, #1
   8c690:	d0f7      	beq.n	8c682 <__aeabi_dmul+0x1c6>
   8c692:	ea43 0306 	orr.w	r3, r3, r6
   8c696:	4770      	bx	lr
   8c698:	ea94 0f0c 	teq	r4, ip
   8c69c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c6a0:	bf18      	it	ne
   8c6a2:	ea95 0f0c 	teqne	r5, ip
   8c6a6:	d00c      	beq.n	8c6c2 <__aeabi_dmul+0x206>
   8c6a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c6ac:	bf18      	it	ne
   8c6ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c6b2:	d1d1      	bne.n	8c658 <__aeabi_dmul+0x19c>
   8c6b4:	ea81 0103 	eor.w	r1, r1, r3
   8c6b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c6bc:	f04f 0000 	mov.w	r0, #0
   8c6c0:	bd70      	pop	{r4, r5, r6, pc}
   8c6c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c6c6:	bf06      	itte	eq
   8c6c8:	4610      	moveq	r0, r2
   8c6ca:	4619      	moveq	r1, r3
   8c6cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c6d0:	d019      	beq.n	8c706 <__aeabi_dmul+0x24a>
   8c6d2:	ea94 0f0c 	teq	r4, ip
   8c6d6:	d102      	bne.n	8c6de <__aeabi_dmul+0x222>
   8c6d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c6dc:	d113      	bne.n	8c706 <__aeabi_dmul+0x24a>
   8c6de:	ea95 0f0c 	teq	r5, ip
   8c6e2:	d105      	bne.n	8c6f0 <__aeabi_dmul+0x234>
   8c6e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c6e8:	bf1c      	itt	ne
   8c6ea:	4610      	movne	r0, r2
   8c6ec:	4619      	movne	r1, r3
   8c6ee:	d10a      	bne.n	8c706 <__aeabi_dmul+0x24a>
   8c6f0:	ea81 0103 	eor.w	r1, r1, r3
   8c6f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c6f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c6fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c700:	f04f 0000 	mov.w	r0, #0
   8c704:	bd70      	pop	{r4, r5, r6, pc}
   8c706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c70a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c70e:	bd70      	pop	{r4, r5, r6, pc}

0008c710 <__aeabi_ddiv>:
   8c710:	b570      	push	{r4, r5, r6, lr}
   8c712:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c71a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c71e:	bf1d      	ittte	ne
   8c720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c724:	ea94 0f0c 	teqne	r4, ip
   8c728:	ea95 0f0c 	teqne	r5, ip
   8c72c:	f000 f8a7 	bleq	8c87e <__aeabi_ddiv+0x16e>
   8c730:	eba4 0405 	sub.w	r4, r4, r5
   8c734:	ea81 0e03 	eor.w	lr, r1, r3
   8c738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c73c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c740:	f000 8088 	beq.w	8c854 <__aeabi_ddiv+0x144>
   8c744:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c74c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c754:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c75c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c760:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c768:	429d      	cmp	r5, r3
   8c76a:	bf08      	it	eq
   8c76c:	4296      	cmpeq	r6, r2
   8c76e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c772:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c776:	d202      	bcs.n	8c77e <__aeabi_ddiv+0x6e>
   8c778:	085b      	lsrs	r3, r3, #1
   8c77a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c77e:	1ab6      	subs	r6, r6, r2
   8c780:	eb65 0503 	sbc.w	r5, r5, r3
   8c784:	085b      	lsrs	r3, r3, #1
   8c786:	ea4f 0232 	mov.w	r2, r2, rrx
   8c78a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c78e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c792:	ebb6 0e02 	subs.w	lr, r6, r2
   8c796:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c79a:	bf22      	ittt	cs
   8c79c:	1ab6      	subcs	r6, r6, r2
   8c79e:	4675      	movcs	r5, lr
   8c7a0:	ea40 000c 	orrcs.w	r0, r0, ip
   8c7a4:	085b      	lsrs	r3, r3, #1
   8c7a6:	ea4f 0232 	mov.w	r2, r2, rrx
   8c7aa:	ebb6 0e02 	subs.w	lr, r6, r2
   8c7ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c7b2:	bf22      	ittt	cs
   8c7b4:	1ab6      	subcs	r6, r6, r2
   8c7b6:	4675      	movcs	r5, lr
   8c7b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c7bc:	085b      	lsrs	r3, r3, #1
   8c7be:	ea4f 0232 	mov.w	r2, r2, rrx
   8c7c2:	ebb6 0e02 	subs.w	lr, r6, r2
   8c7c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c7ca:	bf22      	ittt	cs
   8c7cc:	1ab6      	subcs	r6, r6, r2
   8c7ce:	4675      	movcs	r5, lr
   8c7d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c7d4:	085b      	lsrs	r3, r3, #1
   8c7d6:	ea4f 0232 	mov.w	r2, r2, rrx
   8c7da:	ebb6 0e02 	subs.w	lr, r6, r2
   8c7de:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c7e2:	bf22      	ittt	cs
   8c7e4:	1ab6      	subcs	r6, r6, r2
   8c7e6:	4675      	movcs	r5, lr
   8c7e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c7ec:	ea55 0e06 	orrs.w	lr, r5, r6
   8c7f0:	d018      	beq.n	8c824 <__aeabi_ddiv+0x114>
   8c7f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c7f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c7fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c7fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c80a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c80e:	d1c0      	bne.n	8c792 <__aeabi_ddiv+0x82>
   8c810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c814:	d10b      	bne.n	8c82e <__aeabi_ddiv+0x11e>
   8c816:	ea41 0100 	orr.w	r1, r1, r0
   8c81a:	f04f 0000 	mov.w	r0, #0
   8c81e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c822:	e7b6      	b.n	8c792 <__aeabi_ddiv+0x82>
   8c824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c828:	bf04      	itt	eq
   8c82a:	4301      	orreq	r1, r0
   8c82c:	2000      	moveq	r0, #0
   8c82e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c832:	bf88      	it	hi
   8c834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c838:	f63f aeaf 	bhi.w	8c59a <__aeabi_dmul+0xde>
   8c83c:	ebb5 0c03 	subs.w	ip, r5, r3
   8c840:	bf04      	itt	eq
   8c842:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c84a:	f150 0000 	adcs.w	r0, r0, #0
   8c84e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c852:	bd70      	pop	{r4, r5, r6, pc}
   8c854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c85c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c860:	bfc2      	ittt	gt
   8c862:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c86a:	bd70      	popgt	{r4, r5, r6, pc}
   8c86c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c870:	f04f 0e00 	mov.w	lr, #0
   8c874:	3c01      	subs	r4, #1
   8c876:	e690      	b.n	8c59a <__aeabi_dmul+0xde>
   8c878:	ea45 0e06 	orr.w	lr, r5, r6
   8c87c:	e68d      	b.n	8c59a <__aeabi_dmul+0xde>
   8c87e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c882:	ea94 0f0c 	teq	r4, ip
   8c886:	bf08      	it	eq
   8c888:	ea95 0f0c 	teqeq	r5, ip
   8c88c:	f43f af3b 	beq.w	8c706 <__aeabi_dmul+0x24a>
   8c890:	ea94 0f0c 	teq	r4, ip
   8c894:	d10a      	bne.n	8c8ac <__aeabi_ddiv+0x19c>
   8c896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c89a:	f47f af34 	bne.w	8c706 <__aeabi_dmul+0x24a>
   8c89e:	ea95 0f0c 	teq	r5, ip
   8c8a2:	f47f af25 	bne.w	8c6f0 <__aeabi_dmul+0x234>
   8c8a6:	4610      	mov	r0, r2
   8c8a8:	4619      	mov	r1, r3
   8c8aa:	e72c      	b.n	8c706 <__aeabi_dmul+0x24a>
   8c8ac:	ea95 0f0c 	teq	r5, ip
   8c8b0:	d106      	bne.n	8c8c0 <__aeabi_ddiv+0x1b0>
   8c8b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c8b6:	f43f aefd 	beq.w	8c6b4 <__aeabi_dmul+0x1f8>
   8c8ba:	4610      	mov	r0, r2
   8c8bc:	4619      	mov	r1, r3
   8c8be:	e722      	b.n	8c706 <__aeabi_dmul+0x24a>
   8c8c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c8c4:	bf18      	it	ne
   8c8c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c8ca:	f47f aec5 	bne.w	8c658 <__aeabi_dmul+0x19c>
   8c8ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c8d2:	f47f af0d 	bne.w	8c6f0 <__aeabi_dmul+0x234>
   8c8d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c8da:	f47f aeeb 	bne.w	8c6b4 <__aeabi_dmul+0x1f8>
   8c8de:	e712      	b.n	8c706 <__aeabi_dmul+0x24a>

0008c8e0 <__gedf2>:
   8c8e0:	f04f 3cff 	mov.w	ip, #4294967295
   8c8e4:	e006      	b.n	8c8f4 <__cmpdf2+0x4>
   8c8e6:	bf00      	nop

0008c8e8 <__ledf2>:
   8c8e8:	f04f 0c01 	mov.w	ip, #1
   8c8ec:	e002      	b.n	8c8f4 <__cmpdf2+0x4>
   8c8ee:	bf00      	nop

0008c8f0 <__cmpdf2>:
   8c8f0:	f04f 0c01 	mov.w	ip, #1
   8c8f4:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c8f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c8fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c904:	bf18      	it	ne
   8c906:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c90a:	d01b      	beq.n	8c944 <__cmpdf2+0x54>
   8c90c:	b001      	add	sp, #4
   8c90e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c912:	bf0c      	ite	eq
   8c914:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c918:	ea91 0f03 	teqne	r1, r3
   8c91c:	bf02      	ittt	eq
   8c91e:	ea90 0f02 	teqeq	r0, r2
   8c922:	2000      	moveq	r0, #0
   8c924:	4770      	bxeq	lr
   8c926:	f110 0f00 	cmn.w	r0, #0
   8c92a:	ea91 0f03 	teq	r1, r3
   8c92e:	bf58      	it	pl
   8c930:	4299      	cmppl	r1, r3
   8c932:	bf08      	it	eq
   8c934:	4290      	cmpeq	r0, r2
   8c936:	bf2c      	ite	cs
   8c938:	17d8      	asrcs	r0, r3, #31
   8c93a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c93e:	f040 0001 	orr.w	r0, r0, #1
   8c942:	4770      	bx	lr
   8c944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c94c:	d102      	bne.n	8c954 <__cmpdf2+0x64>
   8c94e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c952:	d107      	bne.n	8c964 <__cmpdf2+0x74>
   8c954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c95c:	d1d6      	bne.n	8c90c <__cmpdf2+0x1c>
   8c95e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c962:	d0d3      	beq.n	8c90c <__cmpdf2+0x1c>
   8c964:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c968:	4770      	bx	lr
   8c96a:	bf00      	nop

0008c96c <__aeabi_cdrcmple>:
   8c96c:	4684      	mov	ip, r0
   8c96e:	4610      	mov	r0, r2
   8c970:	4662      	mov	r2, ip
   8c972:	468c      	mov	ip, r1
   8c974:	4619      	mov	r1, r3
   8c976:	4663      	mov	r3, ip
   8c978:	e000      	b.n	8c97c <__aeabi_cdcmpeq>
   8c97a:	bf00      	nop

0008c97c <__aeabi_cdcmpeq>:
   8c97c:	b501      	push	{r0, lr}
   8c97e:	f7ff ffb7 	bl	8c8f0 <__cmpdf2>
   8c982:	2800      	cmp	r0, #0
   8c984:	bf48      	it	mi
   8c986:	f110 0f00 	cmnmi.w	r0, #0
   8c98a:	bd01      	pop	{r0, pc}

0008c98c <__aeabi_dcmpeq>:
   8c98c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c990:	f7ff fff4 	bl	8c97c <__aeabi_cdcmpeq>
   8c994:	bf0c      	ite	eq
   8c996:	2001      	moveq	r0, #1
   8c998:	2000      	movne	r0, #0
   8c99a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c99e:	bf00      	nop

0008c9a0 <__aeabi_dcmplt>:
   8c9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c9a4:	f7ff ffea 	bl	8c97c <__aeabi_cdcmpeq>
   8c9a8:	bf34      	ite	cc
   8c9aa:	2001      	movcc	r0, #1
   8c9ac:	2000      	movcs	r0, #0
   8c9ae:	f85d fb08 	ldr.w	pc, [sp], #8
   8c9b2:	bf00      	nop

0008c9b4 <__aeabi_dcmple>:
   8c9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c9b8:	f7ff ffe0 	bl	8c97c <__aeabi_cdcmpeq>
   8c9bc:	bf94      	ite	ls
   8c9be:	2001      	movls	r0, #1
   8c9c0:	2000      	movhi	r0, #0
   8c9c2:	f85d fb08 	ldr.w	pc, [sp], #8
   8c9c6:	bf00      	nop

0008c9c8 <__aeabi_dcmpge>:
   8c9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c9cc:	f7ff ffce 	bl	8c96c <__aeabi_cdrcmple>
   8c9d0:	bf94      	ite	ls
   8c9d2:	2001      	movls	r0, #1
   8c9d4:	2000      	movhi	r0, #0
   8c9d6:	f85d fb08 	ldr.w	pc, [sp], #8
   8c9da:	bf00      	nop

0008c9dc <__aeabi_dcmpgt>:
   8c9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c9e0:	f7ff ffc4 	bl	8c96c <__aeabi_cdrcmple>
   8c9e4:	bf34      	ite	cc
   8c9e6:	2001      	movcc	r0, #1
   8c9e8:	2000      	movcs	r0, #0
   8c9ea:	f85d fb08 	ldr.w	pc, [sp], #8
   8c9ee:	bf00      	nop

0008c9f0 <__aeabi_dcmpun>:
   8c9f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c9f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c9f8:	d102      	bne.n	8ca00 <__aeabi_dcmpun+0x10>
   8c9fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c9fe:	d10a      	bne.n	8ca16 <__aeabi_dcmpun+0x26>
   8ca00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ca04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ca08:	d102      	bne.n	8ca10 <__aeabi_dcmpun+0x20>
   8ca0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8ca0e:	d102      	bne.n	8ca16 <__aeabi_dcmpun+0x26>
   8ca10:	f04f 0000 	mov.w	r0, #0
   8ca14:	4770      	bx	lr
   8ca16:	f04f 0001 	mov.w	r0, #1
   8ca1a:	4770      	bx	lr

0008ca1c <__aeabi_d2iz>:
   8ca1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8ca20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8ca24:	d215      	bcs.n	8ca52 <__aeabi_d2iz+0x36>
   8ca26:	d511      	bpl.n	8ca4c <__aeabi_d2iz+0x30>
   8ca28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8ca2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8ca30:	d912      	bls.n	8ca58 <__aeabi_d2iz+0x3c>
   8ca32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ca36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8ca3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8ca3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8ca42:	fa23 f002 	lsr.w	r0, r3, r2
   8ca46:	bf18      	it	ne
   8ca48:	4240      	negne	r0, r0
   8ca4a:	4770      	bx	lr
   8ca4c:	f04f 0000 	mov.w	r0, #0
   8ca50:	4770      	bx	lr
   8ca52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8ca56:	d105      	bne.n	8ca64 <__aeabi_d2iz+0x48>
   8ca58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8ca5c:	bf08      	it	eq
   8ca5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8ca62:	4770      	bx	lr
   8ca64:	f04f 0000 	mov.w	r0, #0
   8ca68:	4770      	bx	lr
   8ca6a:	bf00      	nop
   8ca6c:	50525641 	.word	0x50525641
   8ca70:	3a474f52 	.word	0x3a474f52
   8ca74:	79615020 	.word	0x79615020
   8ca78:	64616f6c 	.word	0x64616f6c
   8ca7c:	7a697320 	.word	0x7a697320
   8ca80:	203d2065 	.word	0x203d2065
   8ca84:	202c6425 	.word	0x202c6425
   8ca88:	6f727265 	.word	0x6f727265
   8ca8c:	0a3f2172 	.word	0x0a3f2172
   8ca90:	00000000 	.word	0x00000000
   8ca94:	50525641 	.word	0x50525641
   8ca98:	3a474f52 	.word	0x3a474f52
   8ca9c:	746e4520 	.word	0x746e4520
   8caa0:	49207265 	.word	0x49207265
   8caa4:	4d205053 	.word	0x4d205053
   8caa8:	3a65646f 	.word	0x3a65646f
   8caac:	0a782520 	.word	0x0a782520
   8cab0:	00000000 	.word	0x00000000
   8cab4:	50525641 	.word	0x50525641
   8cab8:	3a474f52 	.word	0x3a474f52
   8cabc:	61724520 	.word	0x61724520
   8cac0:	203a6573 	.word	0x203a6573
   8cac4:	6c796150 	.word	0x6c796150
   8cac8:	2064616f 	.word	0x2064616f
   8cacc:	657a6973 	.word	0x657a6973
   8cad0:	25203d20 	.word	0x25203d20
   8cad4:	65202c64 	.word	0x65202c64
   8cad8:	726f7272 	.word	0x726f7272
   8cadc:	000a3f21 	.word	0x000a3f21

0008cae0 <BUILD_DATE>:
   8cae0:	206c754a 32203820 00313230              Jul  8 2021.

0008caec <BUILD_TIME>:
   8caec:	313a3332 33313a33 00000000 494c5743     23:13:13....CWLI
   8cafc:	415f4554 53495256 00000050 50525641     TE_AVRISP...AVRP
   8cb0c:	3a474f52 64644120 73736572 25203d20     ROG: Address = %
   8cb1c:	0a783230 00000000                       02x.....

0008cb24 <BOS_DESC>:
   8cb24:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8cb34:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8cb50:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8cb60:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8cb70:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8cb80:	74697845 20676e69 68746977 61747320     Exiting with sta
   8cb90:	20737574 0a2e6425 00000000 78383025     tus %d......%08x
   8cba0:	00000000 206c754a 32203820 00313230     ....Jul  8 2021.
   8cbb0:	313a3332 39323a34 00000000 70696843     23:14:29....Chip
   8cbc0:	73696857 65726570 694c2d72 4f206574     Whisperer-Lite O
   8cbd0:	6e696c6e 46202e65 776d7269 20657261     nline. Firmware 
   8cbe0:	6c697562 25203a64 73252f73 0000000a     build: %s/%s....
   8cbf0:	69726553 6e206c61 65626d75 25203a72     Serial number: %
   8cc00:	00000a73 74746553 20676e69 46207075     s...Setting up F
   8cc10:	20414750 6d6d6f43 63696e75 6f697461     PGA Communicatio
   8cc20:	00000a6e 6e657645 6f4c2074 4520706f     n...Event Loop E
   8cc30:	7265746e 202c6465 74696177 2e676e69     ntered, waiting.
   8cc40:	000a2e2e                                ....

0008cc44 <_global_impure_ptr>:
   8cc44:	200009b0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8cc54:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8cc64:	66656463 00000000 33323130 37363534     cdef....01234567
   8cc74:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8cc84:	0000296c 00000030                       l)..0...

0008cc8c <blanks.7335>:
   8cc8c:	20202020 20202020 20202020 20202020                     

0008cc9c <zeroes.7336>:
   8cc9c:	30303030 30303030 30303030 30303030     0000000000000000

0008ccac <blanks.7328>:
   8ccac:	20202020 20202020 20202020 20202020                     

0008ccbc <zeroes.7329>:
   8ccbc:	30303030 30303030 30303030 30303030     0000000000000000
   8cccc:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8ccdc:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8ccec:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8ccfc:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cd0c:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8cd1c:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8cd2c:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8cd3c:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8cd4c:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8cd5c:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8cd6c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8cd7c:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8cd8c:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8cd9c:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8cdac:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8cdbc:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8cdcc:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8cddc:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8cdec:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8cdfc:	00000000                                ....

0008ce00 <__mprec_bigtens>:
   8ce00:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8ce10:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8ce20:	7f73bf3c 75154fdd                       <.s..O.u

0008ce28 <__mprec_tens>:
   8ce28:	00000000 3ff00000 00000000 40240000     .......?......$@
   8ce38:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8ce48:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8ce58:	00000000 412e8480 00000000 416312d0     .......A......cA
   8ce68:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8ce78:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8ce88:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ce98:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8cea8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8ceb8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8cec8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8ced8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8cee8:	79d99db4 44ea7843                       ...yCx.D

0008cef0 <p05.6122>:
   8cef0:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8cf00:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8cf10:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8cf20:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8cf30:	2520656e 25732564 00000a73              ne %d%s%s...

0008cf3c <_ctype_>:
   8cf3c:	20202000 20202020 28282020 20282828     .         ((((( 
   8cf4c:	20202020 20202020 20202020 20202020                     
   8cf5c:	10108820 10101010 10101010 10101010      ...............
   8cf6c:	04040410 04040404 10040404 10101010     ................
   8cf7c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8cf8c:	01010101 01010101 01010101 10101010     ................
   8cf9c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8cfac:	02020202 02020202 02020202 10101010     ................
   8cfbc:	00000020 00000000 00000000 00000000      ...............
	...

0008d040 <_init>:
   8d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d042:	bf00      	nop
   8d044:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d046:	bc08      	pop	{r3}
   8d048:	469e      	mov	lr, r3
   8d04a:	4770      	bx	lr

0008d04c <__init_array_start>:
   8d04c:	00088e01 	.word	0x00088e01

0008d050 <__frame_dummy_init_array_entry>:
   8d050:	000800e1                                ....

0008d054 <_fini>:
   8d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d056:	bf00      	nop
   8d058:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d05a:	bc08      	pop	{r3}
   8d05c:	469e      	mov	lr, r3
   8d05e:	4770      	bx	lr

0008d060 <__do_global_dtors_aux_fini_array_entry>:
   8d060:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b36b      	cbz	r3, 20000064 <efc_perform_read_sequence+0x64>
20000008:	4604      	mov	r4, r0
2000000a:	461d      	mov	r5, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000c:	6803      	ldr	r3, [r0, #0]
2000000e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000012:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000014:	b2c9      	uxtb	r1, r1
20000016:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001c:	68a3      	ldr	r3, [r4, #8]
2000001e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000020:	9801      	ldr	r0, [sp, #4]
20000022:	f010 0001 	ands.w	r0, r0, #1
20000026:	d1f9      	bne.n	2000001c <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000028:	b15e      	cbz	r6, 20000042 <efc_perform_read_sequence+0x42>
2000002a:	1f2b      	subs	r3, r5, #4
2000002c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
20000030:	3e04      	subs	r6, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000032:	f5c5 2500 	rsb	r5, r5, #524288	; 0x80000
20000036:	3504      	adds	r5, #4
20000038:	58e9      	ldr	r1, [r5, r3]
2000003a:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003e:	42b3      	cmp	r3, r6
20000040:	d1fa      	bne.n	20000038 <efc_perform_read_sequence+0x38>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000042:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000044:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000048:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000004a:	68a3      	ldr	r3, [r4, #8]
2000004c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000004e:	9b01      	ldr	r3, [sp, #4]
20000050:	f013 0f01 	tst.w	r3, #1
20000054:	d0f9      	beq.n	2000004a <efc_perform_read_sequence+0x4a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000056:	6823      	ldr	r3, [r4, #0]
20000058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000005c:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
}
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
		return EFC_RC_INVALID;
20000064:	2002      	movs	r0, #2
20000066:	e7fa      	b.n	2000005e <efc_perform_read_sequence+0x5e>

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
}
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr

20000086 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000086:	f3bf 8f5f 	dmb	sy
2000008a:	3801      	subs	r0, #1
2000008c:	d1fb      	bne.n	20000086 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
2000008e:	4770      	bx	lr

20000090 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000090:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000094:	4a21      	ldr	r2, [pc, #132]	; (2000011c <SystemInit+0x8c>)
20000096:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000098:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000009c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000009e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000a6:	6a1b      	ldr	r3, [r3, #32]
200000a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000ac:	d107      	bne.n	200000be <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ae:	4b1c      	ldr	r3, [pc, #112]	; (20000120 <SystemInit+0x90>)
200000b0:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x94>)
200000b2:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b4:	461a      	mov	r2, r3
200000b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000b8:	f013 0f01 	tst.w	r3, #1
200000bc:	d0fb      	beq.n	200000b6 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000be:	4b18      	ldr	r3, [pc, #96]	; (20000120 <SystemInit+0x90>)
200000c0:	4a19      	ldr	r2, [pc, #100]	; (20000128 <SystemInit+0x98>)
200000c2:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c4:	461a      	mov	r2, r3
200000c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000cc:	d0fb      	beq.n	200000c6 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ce:	4a14      	ldr	r2, [pc, #80]	; (20000120 <SystemInit+0x90>)
200000d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d2:	f023 0303 	bic.w	r3, r3, #3
200000d6:	f043 0301 	orr.w	r3, r3, #1
200000da:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000de:	f013 0f08 	tst.w	r3, #8
200000e2:	d0fb      	beq.n	200000dc <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e4:	4b0e      	ldr	r3, [pc, #56]	; (20000120 <SystemInit+0x90>)
200000e6:	4a11      	ldr	r2, [pc, #68]	; (2000012c <SystemInit+0x9c>)
200000e8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ea:	461a      	mov	r2, r3
200000ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000ee:	f013 0f02 	tst.w	r3, #2
200000f2:	d0fb      	beq.n	200000ec <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f4:	4b0a      	ldr	r3, [pc, #40]	; (20000120 <SystemInit+0x90>)
200000f6:	2211      	movs	r2, #17
200000f8:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fa:	461a      	mov	r2, r3
200000fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000fe:	f013 0f08 	tst.w	r3, #8
20000102:	d0fb      	beq.n	200000fc <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000104:	4b06      	ldr	r3, [pc, #24]	; (20000120 <SystemInit+0x90>)
20000106:	2212      	movs	r2, #18
20000108:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010a:	461a      	mov	r2, r3
2000010c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000010e:	f013 0f08 	tst.w	r3, #8
20000112:	d0fb      	beq.n	2000010c <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000114:	4b06      	ldr	r3, [pc, #24]	; (20000130 <SystemInit+0xa0>)
20000116:	4a07      	ldr	r2, [pc, #28]	; (20000134 <SystemInit+0xa4>)
20000118:	601a      	str	r2, [r3, #0]
}
2000011a:	4770      	bx	lr
2000011c:	400e0800 	.word	0x400e0800
20000120:	400e0400 	.word	0x400e0400
20000124:	00370809 	.word	0x00370809
20000128:	01370809 	.word	0x01370809
2000012c:	200f3f01 	.word	0x200f3f01
20000130:	20000984 	.word	0x20000984
20000134:	05b8d800 	.word	0x05b8d800

20000138 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000138:	4b16      	ldr	r3, [pc, #88]	; (20000194 <system_init_flash+0x5c>)
2000013a:	4298      	cmp	r0, r3
2000013c:	d206      	bcs.n	2000014c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000013e:	2300      	movs	r3, #0
20000140:	4a15      	ldr	r2, [pc, #84]	; (20000198 <system_init_flash+0x60>)
20000142:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000144:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000148:	6013      	str	r3, [r2, #0]
2000014a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000014c:	4b13      	ldr	r3, [pc, #76]	; (2000019c <system_init_flash+0x64>)
2000014e:	4298      	cmp	r0, r3
20000150:	d207      	bcs.n	20000162 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000152:	f44f 7380 	mov.w	r3, #256	; 0x100
20000156:	4a10      	ldr	r2, [pc, #64]	; (20000198 <system_init_flash+0x60>)
20000158:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000162:	4b0f      	ldr	r3, [pc, #60]	; (200001a0 <system_init_flash+0x68>)
20000164:	4298      	cmp	r0, r3
20000166:	d807      	bhi.n	20000178 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000168:	f44f 7300 	mov.w	r3, #512	; 0x200
2000016c:	4a0a      	ldr	r2, [pc, #40]	; (20000198 <system_init_flash+0x60>)
2000016e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000174:	6013      	str	r3, [r2, #0]
20000176:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000178:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <system_init_flash+0x6c>)
2000017a:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000017c:	bf94      	ite	ls
2000017e:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000182:	f44f 6380 	movhi.w	r3, #1024	; 0x400
20000186:	4a04      	ldr	r2, [pc, #16]	; (20000198 <system_init_flash+0x60>)
20000188:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000018a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000018e:	6013      	str	r3, [r2, #0]
	}
}
20000190:	4770      	bx	lr
20000192:	bf00      	nop
20000194:	016e3600 	.word	0x016e3600
20000198:	400e0800 	.word	0x400e0800
2000019c:	02625a00 	.word	0x02625a00
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff

200001a8 <udi_api_cdc_comm>:
200001a8:	0008019d 000800fd 00080115 00080111     ................
200001b8:	00000000                                ....

200001bc <udi_api_cdc_data>:
200001bc:	000804dd 00080389 0008010d 00080111     ................
200001cc:	00080379                                y...

200001d0 <udc_config>:
200001d0:	200002c0 200001f0 200002c0 200002d4     ... ... ... ... 
200001e0:	200001e8 00000000                       ... ....

200001e8 <udc_config_hs>:
200001e8:	2000025c 200002e0                       \.. ... 

200001f0 <udc_config_lsfs>:
200001f0:	200001f8 200002e0                       ... ... 

200001f8 <udc_desc_fs>:
200001f8:	00620209 80000103 000409fa ffff0200     ..b.............
20000208:	050700ff 00400281 02050700 00004002     ......@......@..
20000218:	02010b08 00010202 00010409 01020201     ................
20000228:	00240500 24040110 24050202 05020106     ..$....$...$....
20000238:	02030124 03830507 09100040 02000204     $.......@.......
20000248:	0000000a 02850507 07000040 40020605     ........@......@
20000258:	00000000                                ....

2000025c <udc_desc_hs>:
2000025c:	00620209 80000103 000409fa ffff0200     ..b.............
2000026c:	050700ff 02000281 02050700 00020002     ................
2000027c:	02010b08 00010202 00010409 01020201     ................
2000028c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000029c:	02030124 03830507 09100040 02000204     $.......@.......
200002ac:	0000000a 02850507 07000200 00020605     ................
200002bc:	00000002                                ....

200002c0 <udc_device_desc>:
200002c0:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d0:	00000103                                ....

200002d4 <udc_device_qual>:
200002d4:	0200060a 40000000 00000001              .......@....

200002e0 <udi_apis>:
200002e0:	20000850 200001a8 200001bc              P.. ... ... 

200002ec <avrispmkIIfreqs>:
200002ec:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200002fc:	0007a120 0003d090 0001e848 00017882      .......H....x..
2000030c:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
2000031c:	0001148d 0001069b 0000fa00 0000ee8d     ................
2000032c:	0000e41b 0000da89 0000c99d 0000c21a     ................
2000033c:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
2000034c:	000099f1 00009586 00008d68 0000861f     ........h.......
2000035c:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
2000036c:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
2000037c:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
2000038c:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
2000039c:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003ac:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003bc:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003cc:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003dc:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003ec:	000016f7 000015e7 000014ef 000013e5     ................
200003fc:	00001306 00001219 00001142 00001071     ........B...q...
2000040c:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
2000041c:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
2000042c:	00000aae 00000a33 000009b4 00000941     ....3.......A...
2000043c:	000008d1 00000868 00000804 000007a4     ....h...........
2000044c:	0000074a 000006f3 0000069f 0000064f     J...........O...
2000045c:	00000603 000005bc 00000576 00000535     ........v...5...
2000046c:	000004f7 000004bc 00000483 0000044d     ............M...
2000047c:	00000419 000003e8 000003b9 0000038d     ................
2000048c:	00000362 0000033a 00000313 000002ee     b...:...........
2000049c:	000002cb 000002aa 0000028a 0000026b     ............k...
200004ac:	0000024e 00000233 00000218 000001ff     N...3...........
200004bc:	000001e7 000001d1 000001bb 000001a6     ................
200004cc:	00000192 00000180 0000016e 0000015d     ........n...]...
200004dc:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004ec:	00000112 00000105 000000f9 000000ee     ................
200004fc:	000000e2 000000d8 000000ce 000000c4     ................
2000050c:	000000bb 000000b2 000000aa 000000a2     ................
2000051c:	0000009a 00000093 0000008c 00000086     ................
2000052c:	00000080 0000007a 00000074 0000006f     ....z...t...o...
2000053c:	00000069 00000064 0000005f 0000005b     i...d..._...[...
2000054c:	00000057 00000053 0000004f 0000004b     W...S...O...K...
2000055c:	00000047 00000044 00000041 0000003e     G...D...A...>...
2000056c:	0000003b 00000038 00000036 00000033     ;...8...6...3...

2000057c <main_b_vendor_enable>:
2000057c:	00000001                                ....

20000580 <usart0_driver>:
20000580:	40090000 00000000 00000000 00000000     ...@............
	...
2000081c:	00000009                                ....

20000820 <xram>:
20000820:	60000000                                ...`

20000824 <ParameterTable>:
20000824:	81000180 01900001 01019100 94170192     ................
20000834:	03982101 01039e06 a40001a1               .!............

20000842 <XPROG_Param_EEPageSize>:
20000842:	                                          .

20000844 <XPROG_Param_NVMBase>:
20000844:	010001c0                                ....

20000848 <XPROG_Param_NVMCMDRegAddr>:
20000848:	                                         3

20000849 <XPROG_Param_NVMCSRRegAddr>:
20000849:	                                         2..

2000084c <defaultTimeoutTicks>:
2000084c:	000001f4                                ....

20000850 <udi_api_vendor>:
20000850:	00083051 00083075 0008308d 00083045     Q0..u0...0..E0..
20000860:	00000000                                ....

20000864 <udc_string_desc>:
20000864:	00000300 00000000 00000000 00000000     ................
	...

200008a8 <udc_string_desc_languageid>:
200008a8:	04090304                                ....

200008ac <udc_string_manufacturer_name>:
200008ac:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200008bc:	636e4920 0000002e                        Inc....

200008c4 <udc_string_product_name>:
200008c4:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
200008d4:	00006574                                te..

200008d8 <winusb_20_desc>:
200008d8:	0000000a 06030000 000800ae 00000002     ................
200008e8:	001400a4 49570003 4253554e 00000000     ......WINUSB....
200008f8:	00000000 00880000 00070004 0044002a     ............*.D.
20000908:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000918:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000928:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
20000938:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
20000948:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
20000958:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
20000968:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
20000978:	00390045 0000007d                        E.9.}.....

20000982 <g_interrupt_enabled>:
20000982:	                                         ..

20000984 <SystemCoreClock>:
20000984:	003d0900                                ..=.

20000988 <usb_serial_number>:
20000988:	30303030 30303030 30303030 44414544     000000000000DEAD
20000998:	46454542 00000000 00000000 00000000     BEEF............
200009a8:	00000000                                ....

200009ac <_impure_ptr>:
200009ac:	200009b0                                ... 

200009b0 <impure_data>:
200009b0:	00000000 20000c9c 20000d04 20000d6c     ....... ... l.. 
	...
20000a58:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000a68:	0005deec 0000000b 00000000 00000000     ................
	...

20000dd8 <__atexit_recursive_mutex>:
20000dd8:	200026b4                                .&. 

20000ddc <__global_locale>:
20000ddc:	00000043 00000000 00000000 00000000     C...............
	...
20000dfc:	00000043 00000000 00000000 00000000     C...............
	...
20000e1c:	00000043 00000000 00000000 00000000     C...............
	...
20000e3c:	00000043 00000000 00000000 00000000     C...............
	...
20000e5c:	00000043 00000000 00000000 00000000     C...............
	...
20000e7c:	00000043 00000000 00000000 00000000     C...............
	...
20000e9c:	00000043 00000000 00000000 00000000     C...............
	...
20000ebc:	0008bd6d 0008adf9 00000000 0008cf3c     m...........<...
20000ecc:	0008cd78 0008cb98 0008cb98 0008cb98     x...............
20000edc:	0008cb98 0008cb98 0008cb98 0008cb98     ................
20000eec:	0008cb98 0008cb98 ffffffff ffffffff     ................
20000efc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000f24:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000f48 <__malloc_av_>:
	...
20000f50:	20000f48 20000f48 20000f50 20000f50     H.. H.. P.. P.. 
20000f60:	20000f58 20000f58 20000f60 20000f60     X.. X.. `.. `.. 
20000f70:	20000f68 20000f68 20000f70 20000f70     h.. h.. p.. p.. 
20000f80:	20000f78 20000f78 20000f80 20000f80     x.. x.. ... ... 
20000f90:	20000f88 20000f88 20000f90 20000f90     ... ... ... ... 
20000fa0:	20000f98 20000f98 20000fa0 20000fa0     ... ... ... ... 
20000fb0:	20000fa8 20000fa8 20000fb0 20000fb0     ... ... ... ... 
20000fc0:	20000fb8 20000fb8 20000fc0 20000fc0     ... ... ... ... 
20000fd0:	20000fc8 20000fc8 20000fd0 20000fd0     ... ... ... ... 
20000fe0:	20000fd8 20000fd8 20000fe0 20000fe0     ... ... ... ... 
20000ff0:	20000fe8 20000fe8 20000ff0 20000ff0     ... ... ... ... 
20001000:	20000ff8 20000ff8 20001000 20001000     ... ... ... ... 
20001010:	20001008 20001008 20001010 20001010     ... ... ... ... 
20001020:	20001018 20001018 20001020 20001020     ... ...  ..  .. 
20001030:	20001028 20001028 20001030 20001030     (.. (.. 0.. 0.. 
20001040:	20001038 20001038 20001040 20001040     8.. 8.. @.. @.. 
20001050:	20001048 20001048 20001050 20001050     H.. H.. P.. P.. 
20001060:	20001058 20001058 20001060 20001060     X.. X.. `.. `.. 
20001070:	20001068 20001068 20001070 20001070     h.. h.. p.. p.. 
20001080:	20001078 20001078 20001080 20001080     x.. x.. ... ... 
20001090:	20001088 20001088 20001090 20001090     ... ... ... ... 
200010a0:	20001098 20001098 200010a0 200010a0     ... ... ... ... 
200010b0:	200010a8 200010a8 200010b0 200010b0     ... ... ... ... 
200010c0:	200010b8 200010b8 200010c0 200010c0     ... ... ... ... 
200010d0:	200010c8 200010c8 200010d0 200010d0     ... ... ... ... 
200010e0:	200010d8 200010d8 200010e0 200010e0     ... ... ... ... 
200010f0:	200010e8 200010e8 200010f0 200010f0     ... ... ... ... 
20001100:	200010f8 200010f8 20001100 20001100     ... ... ... ... 
20001110:	20001108 20001108 20001110 20001110     ... ... ... ... 
20001120:	20001118 20001118 20001120 20001120     ... ...  ..  .. 
20001130:	20001128 20001128 20001130 20001130     (.. (.. 0.. 0.. 
20001140:	20001138 20001138 20001140 20001140     8.. 8.. @.. @.. 
20001150:	20001148 20001148 20001150 20001150     H.. H.. P.. P.. 
20001160:	20001158 20001158 20001160 20001160     X.. X.. `.. `.. 
20001170:	20001168 20001168 20001170 20001170     h.. h.. p.. p.. 
20001180:	20001178 20001178 20001180 20001180     x.. x.. ... ... 
20001190:	20001188 20001188 20001190 20001190     ... ... ... ... 
200011a0:	20001198 20001198 200011a0 200011a0     ... ... ... ... 
200011b0:	200011a8 200011a8 200011b0 200011b0     ... ... ... ... 
200011c0:	200011b8 200011b8 200011c0 200011c0     ... ... ... ... 
200011d0:	200011c8 200011c8 200011d0 200011d0     ... ... ... ... 
200011e0:	200011d8 200011d8 200011e0 200011e0     ... ... ... ... 
200011f0:	200011e8 200011e8 200011f0 200011f0     ... ... ... ... 
20001200:	200011f8 200011f8 20001200 20001200     ... ... ... ... 
20001210:	20001208 20001208 20001210 20001210     ... ... ... ... 
20001220:	20001218 20001218 20001220 20001220     ... ...  ..  .. 
20001230:	20001228 20001228 20001230 20001230     (.. (.. 0.. 0.. 
20001240:	20001238 20001238 20001240 20001240     8.. 8.. @.. @.. 
20001250:	20001248 20001248 20001250 20001250     H.. H.. P.. P.. 
20001260:	20001258 20001258 20001260 20001260     X.. X.. `.. `.. 
20001270:	20001268 20001268 20001270 20001270     h.. h.. p.. p.. 
20001280:	20001278 20001278 20001280 20001280     x.. x.. ... ... 
20001290:	20001288 20001288 20001290 20001290     ... ... ... ... 
200012a0:	20001298 20001298 200012a0 200012a0     ... ... ... ... 
200012b0:	200012a8 200012a8 200012b0 200012b0     ... ... ... ... 
200012c0:	200012b8 200012b8 200012c0 200012c0     ... ... ... ... 
200012d0:	200012c8 200012c8 200012d0 200012d0     ... ... ... ... 
200012e0:	200012d8 200012d8 200012e0 200012e0     ... ... ... ... 
200012f0:	200012e8 200012e8 200012f0 200012f0     ... ... ... ... 
20001300:	200012f8 200012f8 20001300 20001300     ... ... ... ... 
20001310:	20001308 20001308 20001310 20001310     ... ... ... ... 
20001320:	20001318 20001318 20001320 20001320     ... ...  ..  .. 
20001330:	20001328 20001328 20001330 20001330     (.. (.. 0.. 0.. 
20001340:	20001338 20001338 20001340 20001340     8.. 8.. @.. @.. 

20001350 <__malloc_sbrk_base>:
20001350:	ffffffff                                ....

20001354 <__malloc_trim_threshold>:
20001354:	00020000                                ....
