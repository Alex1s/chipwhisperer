
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e004  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008e004  0008e004  0001e004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000010c0  20000000  0008e00c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001d6c  200010c0  0008f0cc  000210c0  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000210e9  2**0
                  CONTENTS, READONLY
  7 .debug_info   00042eff  00000000  00000000  00021142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008acd  00000000  00000000  00064041  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f420  00000000  00000000  0006cb0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016f0  00000000  00000000  0007bf2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001830  00000000  00000000  0007d61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000222cf  00000000  00000000  0007ee4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002b214  00000000  00000000  000a111d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006155e  00000000  00000000  000cc331  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004b7c  00000000  00000000  0012d890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 95 70 08 00 93 70 08 00 93 70 08 00     . . .p...p...p..
   80010:	93 70 08 00 93 70 08 00 93 70 08 00 00 00 00 00     .p...p...p......
	...
   8002c:	93 70 08 00 93 70 08 00 00 00 00 00 93 70 08 00     .p...p.......p..
   8003c:	93 70 08 00 93 70 08 00 93 70 08 00 93 70 08 00     .p...p...p...p..
   8004c:	93 70 08 00 93 70 08 00 93 70 08 00 93 70 08 00     .p...p...p...p..
   8005c:	93 70 08 00 93 70 08 00 93 70 08 00 3d 52 08 00     .p...p...p..=R..
   8006c:	51 52 08 00 93 70 08 00 11 39 08 00 31 39 08 00     QR...p...9..19..
   8007c:	51 39 08 00 93 70 08 00 93 70 08 00 93 70 08 00     Q9...p...p...p..
   8008c:	93 70 08 00 93 70 08 00 93 70 08 00 65 34 08 00     .p...p...p..e4..
   8009c:	93 70 08 00 93 70 08 00 93 70 08 00 93 70 08 00     .p...p...p...p..
   800ac:	93 70 08 00 93 70 08 00 a5 5c 08 00 93 70 08 00     .p...p...\...p..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200010c0 	.word	0x200010c0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008e00c 	.word	0x0008e00c

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008e00c 	.word	0x0008e00c
   8011c:	200010c4 	.word	0x200010c4
   80120:	0008e00c 	.word	0x0008e00c
   80124:	00000000 	.word	0x00000000

00080128 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80128:	4a02      	ldr	r2, [pc, #8]	; (80134 <udi_cdc_comm_disable+0xc>)
   8012a:	7813      	ldrb	r3, [r2, #0]
   8012c:	3b01      	subs	r3, #1
   8012e:	b2db      	uxtb	r3, r3
   80130:	7013      	strb	r3, [r2, #0]
   80132:	4770      	bx	lr
   80134:	200010e7 	.word	0x200010e7

00080138 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80138:	2000      	movs	r0, #0
   8013a:	4770      	bx	lr

0008013c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8013c:	2000      	movs	r0, #0
   8013e:	4770      	bx	lr

00080140 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80140:	4b1d      	ldr	r3, [pc, #116]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80142:	781b      	ldrb	r3, [r3, #0]
   80144:	f013 0f80 	tst.w	r3, #128	; 0x80
   80148:	d105      	bne.n	80156 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8014a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8014e:	2b20      	cmp	r3, #32
   80150:	d018      	beq.n	80184 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80152:	2000      	movs	r0, #0
   80154:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80156:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8015a:	2b20      	cmp	r3, #32
   8015c:	d001      	beq.n	80162 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   8015e:	2000      	movs	r0, #0
   80160:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80162:	4b15      	ldr	r3, [pc, #84]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80164:	785b      	ldrb	r3, [r3, #1]
   80166:	2b21      	cmp	r3, #33	; 0x21
   80168:	d124      	bne.n	801b4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   8016a:	4b13      	ldr	r3, [pc, #76]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8016c:	88db      	ldrh	r3, [r3, #6]
   8016e:	2b07      	cmp	r3, #7
   80170:	d001      	beq.n	80176 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   80172:	2000      	movs	r0, #0
   80174:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80176:	4b10      	ldr	r3, [pc, #64]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80178:	4a10      	ldr	r2, [pc, #64]	; (801bc <udi_cdc_comm_setup+0x7c>)
   8017a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   8017c:	2207      	movs	r2, #7
   8017e:	819a      	strh	r2, [r3, #12]
				return true;
   80180:	2001      	movs	r0, #1
   80182:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80184:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80186:	7858      	ldrb	r0, [r3, #1]
   80188:	2820      	cmp	r0, #32
   8018a:	d004      	beq.n	80196 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   8018c:	2822      	cmp	r0, #34	; 0x22
   8018e:	bf14      	ite	ne
   80190:	2000      	movne	r0, #0
   80192:	2001      	moveq	r0, #1
   80194:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80196:	4b08      	ldr	r3, [pc, #32]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80198:	88db      	ldrh	r3, [r3, #6]
   8019a:	2b07      	cmp	r3, #7
   8019c:	d001      	beq.n	801a2 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   8019e:	2000      	movs	r0, #0
}
   801a0:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   801a2:	4b05      	ldr	r3, [pc, #20]	; (801b8 <udi_cdc_comm_setup+0x78>)
   801a4:	4a06      	ldr	r2, [pc, #24]	; (801c0 <udi_cdc_comm_setup+0x80>)
   801a6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   801a8:	4a04      	ldr	r2, [pc, #16]	; (801bc <udi_cdc_comm_setup+0x7c>)
   801aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   801ac:	2207      	movs	r2, #7
   801ae:	819a      	strh	r2, [r3, #12]
				return true;
   801b0:	2001      	movs	r0, #1
   801b2:	4770      	bx	lr
	return false;  // request Not supported
   801b4:	2000      	movs	r0, #0
   801b6:	4770      	bx	lr
   801b8:	20002dec 	.word	0x20002dec
   801bc:	200010e0 	.word	0x200010e0
   801c0:	000801c5 	.word	0x000801c5

000801c4 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   801c4:	4770      	bx	lr
	...

000801c8 <udi_cdc_comm_enable>:
{
   801c8:	b508      	push	{r3, lr}
	udi_cdc_nb_comm_enabled = 0;
   801ca:	2000      	movs	r0, #0
   801cc:	4b10      	ldr	r3, [pc, #64]	; (80210 <udi_cdc_comm_enable+0x48>)
   801ce:	7018      	strb	r0, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801d0:	4b10      	ldr	r3, [pc, #64]	; (80214 <udi_cdc_comm_enable+0x4c>)
   801d2:	8018      	strh	r0, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801d4:	4b10      	ldr	r3, [pc, #64]	; (80218 <udi_cdc_comm_enable+0x50>)
   801d6:	22a1      	movs	r2, #161	; 0xa1
   801d8:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801da:	2220      	movs	r2, #32
   801dc:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801de:	8058      	strh	r0, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801e0:	2201      	movs	r2, #1
   801e2:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801e4:	2202      	movs	r2, #2
   801e6:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801e8:	8118      	strh	r0, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801ea:	4b0c      	ldr	r3, [pc, #48]	; (8021c <udi_cdc_comm_enable+0x54>)
   801ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   801f0:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801f2:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801f4:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801f6:	2208      	movs	r2, #8
   801f8:	719a      	strb	r2, [r3, #6]
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801fa:	4b09      	ldr	r3, [pc, #36]	; (80220 <udi_cdc_comm_enable+0x58>)
   801fc:	4798      	blx	r3
   801fe:	4602      	mov	r2, r0
   80200:	b120      	cbz	r0, 8020c <udi_cdc_comm_enable+0x44>
	udi_cdc_nb_comm_enabled++;
   80202:	4903      	ldr	r1, [pc, #12]	; (80210 <udi_cdc_comm_enable+0x48>)
   80204:	780b      	ldrb	r3, [r1, #0]
   80206:	3301      	adds	r3, #1
   80208:	b2db      	uxtb	r3, r3
   8020a:	700b      	strb	r3, [r1, #0]
}
   8020c:	4610      	mov	r0, r2
   8020e:	bd08      	pop	{r3, pc}
   80210:	200010e7 	.word	0x200010e7
   80214:	200014fc 	.word	0x200014fc
   80218:	20001914 	.word	0x20001914
   8021c:	200010e0 	.word	0x200010e0
   80220:	00083319 	.word	0x00083319

00080224 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80224:	4b42      	ldr	r3, [pc, #264]	; (80330 <udi_cdc_tx_send+0x10c>)
   80226:	781b      	ldrb	r3, [r3, #0]
   80228:	b103      	cbz	r3, 8022c <udi_cdc_tx_send+0x8>
   8022a:	4770      	bx	lr
{
   8022c:	b570      	push	{r4, r5, r6, lr}
   8022e:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80230:	4b40      	ldr	r3, [pc, #256]	; (80334 <udi_cdc_tx_send+0x110>)
   80232:	4798      	blx	r3
   80234:	2800      	cmp	r0, #0
   80236:	d03d      	beq.n	802b4 <udi_cdc_tx_send+0x90>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80238:	4b3f      	ldr	r3, [pc, #252]	; (80338 <udi_cdc_tx_send+0x114>)
   8023a:	881c      	ldrh	r4, [r3, #0]
   8023c:	4b3f      	ldr	r3, [pc, #252]	; (8033c <udi_cdc_tx_send+0x118>)
   8023e:	4798      	blx	r3
   80240:	4284      	cmp	r4, r0
   80242:	d072      	beq.n	8032a <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80244:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80248:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8024a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8024e:	2200      	movs	r2, #0
   80250:	4b3b      	ldr	r3, [pc, #236]	; (80340 <udi_cdc_tx_send+0x11c>)
   80252:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80254:	4b3b      	ldr	r3, [pc, #236]	; (80344 <udi_cdc_tx_send+0x120>)
   80256:	781c      	ldrb	r4, [r3, #0]
   80258:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8025a:	4b3b      	ldr	r3, [pc, #236]	; (80348 <udi_cdc_tx_send+0x124>)
   8025c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80260:	2b00      	cmp	r3, #0
   80262:	d02e      	beq.n	802c2 <udi_cdc_tx_send+0x9e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80264:	2200      	movs	r2, #0
   80266:	4b39      	ldr	r3, [pc, #228]	; (8034c <udi_cdc_tx_send+0x128>)
   80268:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   8026a:	4b39      	ldr	r3, [pc, #228]	; (80350 <udi_cdc_tx_send+0x12c>)
   8026c:	781b      	ldrb	r3, [r3, #0]
   8026e:	2b00      	cmp	r3, #0
   80270:	d143      	bne.n	802fa <udi_cdc_tx_send+0xd6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80272:	fab4 f384 	clz	r3, r4
   80276:	095b      	lsrs	r3, r3, #5
   80278:	4a32      	ldr	r2, [pc, #200]	; (80344 <udi_cdc_tx_send+0x120>)
   8027a:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   8027c:	2201      	movs	r2, #1
   8027e:	4b2c      	ldr	r3, [pc, #176]	; (80330 <udi_cdc_tx_send+0x10c>)
   80280:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80282:	b925      	cbnz	r5, 8028e <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80284:	4b2e      	ldr	r3, [pc, #184]	; (80340 <udi_cdc_tx_send+0x11c>)
   80286:	701a      	strb	r2, [r3, #0]
   80288:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8028c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8028e:	4626      	mov	r6, r4
   80290:	4b2d      	ldr	r3, [pc, #180]	; (80348 <udi_cdc_tx_send+0x124>)
   80292:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8029a:	bf14      	ite	ne
   8029c:	2501      	movne	r5, #1
   8029e:	2500      	moveq	r5, #0
	if (b_short_packet) {
   802a0:	d034      	beq.n	8030c <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   802a2:	4b24      	ldr	r3, [pc, #144]	; (80334 <udi_cdc_tx_send+0x110>)
   802a4:	4798      	blx	r3
   802a6:	2800      	cmp	r0, #0
   802a8:	d02b      	beq.n	80302 <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802aa:	4b24      	ldr	r3, [pc, #144]	; (8033c <udi_cdc_tx_send+0x118>)
   802ac:	4798      	blx	r3
   802ae:	4b22      	ldr	r3, [pc, #136]	; (80338 <udi_cdc_tx_send+0x114>)
   802b0:	8018      	strh	r0, [r3, #0]
   802b2:	e02e      	b.n	80312 <udi_cdc_tx_send+0xee>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802b4:	4b20      	ldr	r3, [pc, #128]	; (80338 <udi_cdc_tx_send+0x114>)
   802b6:	881c      	ldrh	r4, [r3, #0]
   802b8:	4b26      	ldr	r3, [pc, #152]	; (80354 <udi_cdc_tx_send+0x130>)
   802ba:	4798      	blx	r3
   802bc:	4284      	cmp	r4, r0
   802be:	d1c1      	bne.n	80244 <udi_cdc_tx_send+0x20>
   802c0:	e033      	b.n	8032a <udi_cdc_tx_send+0x106>
		sof_zlp_counter++;
   802c2:	4a22      	ldr	r2, [pc, #136]	; (8034c <udi_cdc_tx_send+0x128>)
   802c4:	8813      	ldrh	r3, [r2, #0]
   802c6:	3301      	adds	r3, #1
   802c8:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802ca:	4b1a      	ldr	r3, [pc, #104]	; (80334 <udi_cdc_tx_send+0x110>)
   802cc:	4798      	blx	r3
   802ce:	b918      	cbnz	r0, 802d8 <udi_cdc_tx_send+0xb4>
   802d0:	4b1e      	ldr	r3, [pc, #120]	; (8034c <udi_cdc_tx_send+0x128>)
   802d2:	881b      	ldrh	r3, [r3, #0]
   802d4:	2b63      	cmp	r3, #99	; 0x63
   802d6:	d908      	bls.n	802ea <udi_cdc_tx_send+0xc6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802d8:	4b16      	ldr	r3, [pc, #88]	; (80334 <udi_cdc_tx_send+0x110>)
   802da:	4798      	blx	r3
   802dc:	2800      	cmp	r0, #0
   802de:	d0c1      	beq.n	80264 <udi_cdc_tx_send+0x40>
   802e0:	4b1a      	ldr	r3, [pc, #104]	; (8034c <udi_cdc_tx_send+0x128>)
   802e2:	881b      	ldrh	r3, [r3, #0]
   802e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802e8:	d2bc      	bcs.n	80264 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802ea:	b9f5      	cbnz	r5, 8032a <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802ec:	2201      	movs	r2, #1
   802ee:	4b14      	ldr	r3, [pc, #80]	; (80340 <udi_cdc_tx_send+0x11c>)
   802f0:	701a      	strb	r2, [r3, #0]
   802f2:	f3bf 8f5f 	dmb	sy
   802f6:	b662      	cpsie	i
   802f8:	e017      	b.n	8032a <udi_cdc_tx_send+0x106>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802fa:	fab4 f484 	clz	r4, r4
   802fe:	0964      	lsrs	r4, r4, #5
   80300:	e7bc      	b.n	8027c <udi_cdc_tx_send+0x58>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80302:	4b14      	ldr	r3, [pc, #80]	; (80354 <udi_cdc_tx_send+0x130>)
   80304:	4798      	blx	r3
   80306:	4b0c      	ldr	r3, [pc, #48]	; (80338 <udi_cdc_tx_send+0x114>)
   80308:	8018      	strh	r0, [r3, #0]
   8030a:	e002      	b.n	80312 <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8030c:	2200      	movs	r2, #0
   8030e:	4b0a      	ldr	r3, [pc, #40]	; (80338 <udi_cdc_tx_send+0x114>)
   80310:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   80312:	4b0d      	ldr	r3, [pc, #52]	; (80348 <udi_cdc_tx_send+0x124>)
	udd_ep_run( ep,
   80314:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   80318:	4a0f      	ldr	r2, [pc, #60]	; (80358 <udi_cdc_tx_send+0x134>)
   8031a:	9200      	str	r2, [sp, #0]
   8031c:	4a0f      	ldr	r2, [pc, #60]	; (8035c <udi_cdc_tx_send+0x138>)
   8031e:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80322:	4629      	mov	r1, r5
   80324:	2081      	movs	r0, #129	; 0x81
   80326:	4c0e      	ldr	r4, [pc, #56]	; (80360 <udi_cdc_tx_send+0x13c>)
   80328:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   8032a:	b002      	add	sp, #8
   8032c:	bd70      	pop	{r4, r5, r6, pc}
   8032e:	bf00      	nop
   80330:	20001910 	.word	0x20001910
   80334:	00086475 	.word	0x00086475
   80338:	2000190c 	.word	0x2000190c
   8033c:	000864cd 	.word	0x000864cd
   80340:	200006ea 	.word	0x200006ea
   80344:	20001908 	.word	0x20001908
   80348:	20001904 	.word	0x20001904
   8034c:	200010dc 	.word	0x200010dc
   80350:	20001500 	.word	0x20001500
   80354:	000864bd 	.word	0x000864bd
   80358:	00080365 	.word	0x00080365
   8035c:	20001504 	.word	0x20001504
   80360:	00086731 	.word	0x00086731

00080364 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80364:	b100      	cbz	r0, 80368 <udi_cdc_data_sent+0x4>
   80366:	4770      	bx	lr
{
   80368:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8036a:	4b07      	ldr	r3, [pc, #28]	; (80388 <udi_cdc_data_sent+0x24>)
   8036c:	781b      	ldrb	r3, [r3, #0]
   8036e:	fab3 f383 	clz	r3, r3
   80372:	095b      	lsrs	r3, r3, #5
   80374:	4a05      	ldr	r2, [pc, #20]	; (8038c <udi_cdc_data_sent+0x28>)
   80376:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8037a:	4b05      	ldr	r3, [pc, #20]	; (80390 <udi_cdc_data_sent+0x2c>)
   8037c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8037e:	4b05      	ldr	r3, [pc, #20]	; (80394 <udi_cdc_data_sent+0x30>)
   80380:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   80382:	4b05      	ldr	r3, [pc, #20]	; (80398 <udi_cdc_data_sent+0x34>)
   80384:	4798      	blx	r3
   80386:	bd08      	pop	{r3, pc}
   80388:	20001908 	.word	0x20001908
   8038c:	20001904 	.word	0x20001904
   80390:	20001500 	.word	0x20001500
   80394:	20001910 	.word	0x20001910
   80398:	00080225 	.word	0x00080225

0008039c <udi_cdc_data_sof_notify>:
{
   8039c:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8039e:	2000      	movs	r0, #0
   803a0:	4b01      	ldr	r3, [pc, #4]	; (803a8 <udi_cdc_data_sof_notify+0xc>)
   803a2:	4798      	blx	r3
   803a4:	bd08      	pop	{r3, pc}
   803a6:	bf00      	nop
   803a8:	00080225 	.word	0x00080225

000803ac <udi_cdc_data_disable>:
{
   803ac:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   803ae:	4a06      	ldr	r2, [pc, #24]	; (803c8 <udi_cdc_data_disable+0x1c>)
   803b0:	7813      	ldrb	r3, [r2, #0]
   803b2:	3b01      	subs	r3, #1
   803b4:	b2db      	uxtb	r3, r3
   803b6:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803b8:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803ba:	4b04      	ldr	r3, [pc, #16]	; (803cc <udi_cdc_data_disable+0x20>)
   803bc:	4798      	blx	r3
	udi_cdc_data_running = false;
   803be:	2200      	movs	r2, #0
   803c0:	4b03      	ldr	r3, [pc, #12]	; (803d0 <udi_cdc_data_disable+0x24>)
   803c2:	701a      	strb	r2, [r3, #0]
   803c4:	bd08      	pop	{r3, pc}
   803c6:	bf00      	nop
   803c8:	200010e8 	.word	0x200010e8
   803cc:	00083329 	.word	0x00083329
   803d0:	200010de 	.word	0x200010de

000803d4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803d4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   803d8:	b672      	cpsid	i
   803da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803de:	2100      	movs	r1, #0
   803e0:	4a0a      	ldr	r2, [pc, #40]	; (8040c <udi_cdc_multi_get_nb_received_data+0x38>)
   803e2:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803e4:	4a0a      	ldr	r2, [pc, #40]	; (80410 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803e6:	8810      	ldrh	r0, [r2, #0]
   803e8:	b282      	uxth	r2, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803ea:	490a      	ldr	r1, [pc, #40]	; (80414 <udi_cdc_multi_get_nb_received_data+0x40>)
   803ec:	7809      	ldrb	r1, [r1, #0]
   803ee:	b2c9      	uxtb	r1, r1
   803f0:	4809      	ldr	r0, [pc, #36]	; (80418 <udi_cdc_multi_get_nb_received_data+0x44>)
   803f2:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
   803f6:	b280      	uxth	r0, r0
   803f8:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
   803fa:	b92b      	cbnz	r3, 80408 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803fc:	2201      	movs	r2, #1
   803fe:	4b03      	ldr	r3, [pc, #12]	; (8040c <udi_cdc_multi_get_nb_received_data+0x38>)
   80400:	701a      	strb	r2, [r3, #0]
   80402:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80406:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80408:	4770      	bx	lr
   8040a:	bf00      	nop
   8040c:	200006ea 	.word	0x200006ea
   80410:	200014f4 	.word	0x200014f4
   80414:	200014f0 	.word	0x200014f0
   80418:	200014ec 	.word	0x200014ec

0008041c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8041c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8041e:	4b03      	ldr	r3, [pc, #12]	; (8042c <udi_cdc_multi_is_rx_ready+0x10>)
   80420:	4798      	blx	r3
}
   80422:	3000      	adds	r0, #0
   80424:	bf18      	it	ne
   80426:	2001      	movne	r0, #1
   80428:	bd08      	pop	{r3, pc}
   8042a:	bf00      	nop
   8042c:	000803d5 	.word	0x000803d5

00080430 <udi_cdc_rx_start>:
{
   80430:	b510      	push	{r4, lr}
   80432:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80434:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   80438:	b672      	cpsid	i
   8043a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8043e:	2100      	movs	r1, #0
   80440:	4a21      	ldr	r2, [pc, #132]	; (804c8 <udi_cdc_rx_start+0x98>)
   80442:	7011      	strb	r1, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80444:	4a21      	ldr	r2, [pc, #132]	; (804cc <udi_cdc_rx_start+0x9c>)
   80446:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80448:	4a21      	ldr	r2, [pc, #132]	; (804d0 <udi_cdc_rx_start+0xa0>)
   8044a:	7812      	ldrb	r2, [r2, #0]
   8044c:	b94a      	cbnz	r2, 80462 <udi_cdc_rx_start+0x32>
   8044e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80450:	4a20      	ldr	r2, [pc, #128]	; (804d4 <udi_cdc_rx_start+0xa4>)
   80452:	8811      	ldrh	r1, [r2, #0]
   80454:	b289      	uxth	r1, r1
   80456:	4a20      	ldr	r2, [pc, #128]	; (804d8 <udi_cdc_rx_start+0xa8>)
   80458:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   8045c:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8045e:	4291      	cmp	r1, r2
   80460:	d20a      	bcs.n	80478 <udi_cdc_rx_start+0x48>
	if (cpu_irq_is_enabled_flags(flags))
   80462:	2b00      	cmp	r3, #0
   80464:	d12d      	bne.n	804c2 <udi_cdc_rx_start+0x92>
		cpu_irq_enable();
   80466:	2201      	movs	r2, #1
   80468:	4b17      	ldr	r3, [pc, #92]	; (804c8 <udi_cdc_rx_start+0x98>)
   8046a:	701a      	strb	r2, [r3, #0]
   8046c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80470:	b662      	cpsie	i
		return false;
   80472:	2000      	movs	r0, #0
}
   80474:	b002      	add	sp, #8
   80476:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   80478:	2100      	movs	r1, #0
   8047a:	4a16      	ldr	r2, [pc, #88]	; (804d4 <udi_cdc_rx_start+0xa4>)
   8047c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8047e:	fab4 f284 	clz	r2, r4
   80482:	0952      	lsrs	r2, r2, #5
   80484:	4911      	ldr	r1, [pc, #68]	; (804cc <udi_cdc_rx_start+0x9c>)
   80486:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80488:	2101      	movs	r1, #1
   8048a:	4a11      	ldr	r2, [pc, #68]	; (804d0 <udi_cdc_rx_start+0xa0>)
   8048c:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   8048e:	b923      	cbnz	r3, 8049a <udi_cdc_rx_start+0x6a>
		cpu_irq_enable();
   80490:	4b0d      	ldr	r3, [pc, #52]	; (804c8 <udi_cdc_rx_start+0x98>)
   80492:	7019      	strb	r1, [r3, #0]
   80494:	f3bf 8f5f 	dmb	sy
   80498:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   8049a:	2000      	movs	r0, #0
   8049c:	4b0f      	ldr	r3, [pc, #60]	; (804dc <udi_cdc_rx_start+0xac>)
   8049e:	4798      	blx	r3
   804a0:	b958      	cbnz	r0, 804ba <udi_cdc_rx_start+0x8a>
	return udd_ep_run(ep,
   804a2:	4b0f      	ldr	r3, [pc, #60]	; (804e0 <udi_cdc_rx_start+0xb0>)
   804a4:	9300      	str	r3, [sp, #0]
   804a6:	f44f 7300 	mov.w	r3, #512	; 0x200
   804aa:	4a0e      	ldr	r2, [pc, #56]	; (804e4 <udi_cdc_rx_start+0xb4>)
   804ac:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   804b0:	2101      	movs	r1, #1
   804b2:	2002      	movs	r0, #2
   804b4:	4c0c      	ldr	r4, [pc, #48]	; (804e8 <udi_cdc_rx_start+0xb8>)
   804b6:	47a0      	blx	r4
   804b8:	e7dc      	b.n	80474 <udi_cdc_rx_start+0x44>
		UDI_CDC_RX_NOTIFY(port);
   804ba:	2000      	movs	r0, #0
   804bc:	4b0b      	ldr	r3, [pc, #44]	; (804ec <udi_cdc_rx_start+0xbc>)
   804be:	4798      	blx	r3
   804c0:	e7ef      	b.n	804a2 <udi_cdc_rx_start+0x72>
		return false;
   804c2:	2000      	movs	r0, #0
   804c4:	e7d6      	b.n	80474 <udi_cdc_rx_start+0x44>
   804c6:	bf00      	nop
   804c8:	200006ea 	.word	0x200006ea
   804cc:	200014f0 	.word	0x200014f0
   804d0:	200014f8 	.word	0x200014f8
   804d4:	200014f4 	.word	0x200014f4
   804d8:	200014ec 	.word	0x200014ec
   804dc:	0008041d 	.word	0x0008041d
   804e0:	00080585 	.word	0x00080585
   804e4:	200010ec 	.word	0x200010ec
   804e8:	00086731 	.word	0x00086731
   804ec:	00083335 	.word	0x00083335

000804f0 <udi_cdc_data_enable>:
{
   804f0:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804f2:	2400      	movs	r4, #0
   804f4:	4b16      	ldr	r3, [pc, #88]	; (80550 <udi_cdc_data_enable+0x60>)
   804f6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804f8:	4b16      	ldr	r3, [pc, #88]	; (80554 <udi_cdc_data_enable+0x64>)
   804fa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804fc:	4b16      	ldr	r3, [pc, #88]	; (80558 <udi_cdc_data_enable+0x68>)
   804fe:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   80500:	4b16      	ldr	r3, [pc, #88]	; (8055c <udi_cdc_data_enable+0x6c>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80504:	4b16      	ldr	r3, [pc, #88]	; (80560 <udi_cdc_data_enable+0x70>)
   80506:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80508:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   8050a:	4b16      	ldr	r3, [pc, #88]	; (80564 <udi_cdc_data_enable+0x74>)
   8050c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8050e:	4620      	mov	r0, r4
   80510:	4b15      	ldr	r3, [pc, #84]	; (80568 <udi_cdc_data_enable+0x78>)
   80512:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80514:	4b15      	ldr	r3, [pc, #84]	; (8056c <udi_cdc_data_enable+0x7c>)
   80516:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80518:	4b15      	ldr	r3, [pc, #84]	; (80570 <udi_cdc_data_enable+0x80>)
   8051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   8051c:	4b15      	ldr	r3, [pc, #84]	; (80574 <udi_cdc_data_enable+0x84>)
   8051e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   80520:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   80522:	4b15      	ldr	r3, [pc, #84]	; (80578 <udi_cdc_data_enable+0x88>)
   80524:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80526:	4620      	mov	r0, r4
   80528:	4b14      	ldr	r3, [pc, #80]	; (8057c <udi_cdc_data_enable+0x8c>)
   8052a:	4798      	blx	r3
   8052c:	4601      	mov	r1, r0
   8052e:	b140      	cbz	r0, 80542 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   80530:	4a07      	ldr	r2, [pc, #28]	; (80550 <udi_cdc_data_enable+0x60>)
   80532:	7813      	ldrb	r3, [r2, #0]
   80534:	3301      	adds	r3, #1
   80536:	b2db      	uxtb	r3, r3
   80538:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8053a:	7813      	ldrb	r3, [r2, #0]
   8053c:	b2db      	uxtb	r3, r3
   8053e:	2b01      	cmp	r3, #1
   80540:	d001      	beq.n	80546 <udi_cdc_data_enable+0x56>
}
   80542:	4608      	mov	r0, r1
   80544:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   80546:	2201      	movs	r2, #1
   80548:	4b0d      	ldr	r3, [pc, #52]	; (80580 <udi_cdc_data_enable+0x90>)
   8054a:	701a      	strb	r2, [r3, #0]
   8054c:	e7f9      	b.n	80542 <udi_cdc_data_enable+0x52>
   8054e:	bf00      	nop
   80550:	200010e8 	.word	0x200010e8
   80554:	20001910 	.word	0x20001910
   80558:	20001500 	.word	0x20001500
   8055c:	20001908 	.word	0x20001908
   80560:	20001904 	.word	0x20001904
   80564:	2000190c 	.word	0x2000190c
   80568:	00080225 	.word	0x00080225
   8056c:	200014f8 	.word	0x200014f8
   80570:	200014f0 	.word	0x200014f0
   80574:	200014ec 	.word	0x200014ec
   80578:	200014f4 	.word	0x200014f4
   8057c:	00080431 	.word	0x00080431
   80580:	200010de 	.word	0x200010de

00080584 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   80584:	b9f0      	cbnz	r0, 805c4 <udi_cdc_data_received+0x40>
{
   80586:	b510      	push	{r4, lr}
   80588:	b082      	sub	sp, #8
   8058a:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8058c:	4b0e      	ldr	r3, [pc, #56]	; (805c8 <udi_cdc_data_received+0x44>)
   8058e:	781c      	ldrb	r4, [r3, #0]
   80590:	fab4 f484 	clz	r4, r4
   80594:	0964      	lsrs	r4, r4, #5
	if (!n) {
   80596:	b151      	cbz	r1, 805ae <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80598:	b289      	uxth	r1, r1
   8059a:	4b0c      	ldr	r3, [pc, #48]	; (805cc <udi_cdc_data_received+0x48>)
   8059c:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805a0:	2000      	movs	r0, #0
   805a2:	4b0b      	ldr	r3, [pc, #44]	; (805d0 <udi_cdc_data_received+0x4c>)
   805a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805a6:	4b0b      	ldr	r3, [pc, #44]	; (805d4 <udi_cdc_data_received+0x50>)
   805a8:	4798      	blx	r3
}
   805aa:	b002      	add	sp, #8
   805ac:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   805ae:	4b0a      	ldr	r3, [pc, #40]	; (805d8 <udi_cdc_data_received+0x54>)
   805b0:	9300      	str	r3, [sp, #0]
   805b2:	f44f 7300 	mov.w	r3, #512	; 0x200
   805b6:	4a09      	ldr	r2, [pc, #36]	; (805dc <udi_cdc_data_received+0x58>)
   805b8:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805bc:	2101      	movs	r1, #1
   805be:	4c08      	ldr	r4, [pc, #32]	; (805e0 <udi_cdc_data_received+0x5c>)
   805c0:	47a0      	blx	r4
		return;
   805c2:	e7f2      	b.n	805aa <udi_cdc_data_received+0x26>
   805c4:	4770      	bx	lr
   805c6:	bf00      	nop
   805c8:	200014f0 	.word	0x200014f0
   805cc:	200014ec 	.word	0x200014ec
   805d0:	200014f8 	.word	0x200014f8
   805d4:	00080431 	.word	0x00080431
   805d8:	00080585 	.word	0x00080585
   805dc:	200010ec 	.word	0x200010ec
   805e0:	00086731 	.word	0x00086731

000805e4 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805e8:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   805ea:	4688      	mov	r8, r1
	cpu_irq_disable();
   805ec:	4f20      	ldr	r7, [pc, #128]	; (80670 <udi_cdc_multi_read_buf+0x8c>)
   805ee:	f04f 0b00 	mov.w	fp, #0
   805f2:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805f4:	4e1f      	ldr	r6, [pc, #124]	; (80674 <udi_cdc_multi_read_buf+0x90>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805f6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8068c <udi_cdc_multi_read_buf+0xa8>
   805fa:	e019      	b.n	80630 <udi_cdc_multi_read_buf+0x4c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   805fc:	4a1e      	ldr	r2, [pc, #120]	; (80678 <udi_cdc_multi_read_buf+0x94>)
   805fe:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80602:	b2a4      	uxth	r4, r4
   80604:	1a64      	subs	r4, r4, r1
   80606:	42ac      	cmp	r4, r5
   80608:	bf28      	it	cs
   8060a:	462c      	movcs	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   8060c:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80610:	4622      	mov	r2, r4
   80612:	4b1a      	ldr	r3, [pc, #104]	; (8067c <udi_cdc_multi_read_buf+0x98>)
   80614:	4419      	add	r1, r3
   80616:	4640      	mov	r0, r8
   80618:	4b19      	ldr	r3, [pc, #100]	; (80680 <udi_cdc_multi_read_buf+0x9c>)
   8061a:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   8061c:	8833      	ldrh	r3, [r6, #0]
   8061e:	4423      	add	r3, r4
   80620:	b29b      	uxth	r3, r3
   80622:	8033      	strh	r3, [r6, #0]
	ptr_buf += copy_nb;
   80624:	44a0      	add	r8, r4
	size -= copy_nb;
   80626:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   80628:	4658      	mov	r0, fp
   8062a:	4b16      	ldr	r3, [pc, #88]	; (80684 <udi_cdc_multi_read_buf+0xa0>)
   8062c:	4798      	blx	r3

	if (size) {
   8062e:	b1dd      	cbz	r5, 80668 <udi_cdc_multi_read_buf+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80630:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80634:	b672      	cpsid	i
   80636:	f3bf 8f5f 	dmb	sy
   8063a:	f887 a000 	strb.w	sl, [r7]
	pos = udi_cdc_rx_pos[port];
   8063e:	8831      	ldrh	r1, [r6, #0]
   80640:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   80642:	f899 3000 	ldrb.w	r3, [r9]
   80646:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80648:	4a0b      	ldr	r2, [pc, #44]	; (80678 <udi_cdc_multi_read_buf+0x94>)
   8064a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   8064e:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   80650:	b920      	cbnz	r0, 8065c <udi_cdc_multi_read_buf+0x78>
		cpu_irq_enable();
   80652:	2001      	movs	r0, #1
   80654:	7038      	strb	r0, [r7, #0]
   80656:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8065a:	b662      	cpsie	i
	while (again) {
   8065c:	4291      	cmp	r1, r2
   8065e:	d3cd      	bcc.n	805fc <udi_cdc_multi_read_buf+0x18>
		if (!udi_cdc_data_running) {
   80660:	4b09      	ldr	r3, [pc, #36]	; (80688 <udi_cdc_multi_read_buf+0xa4>)
   80662:	781b      	ldrb	r3, [r3, #0]
   80664:	2b00      	cmp	r3, #0
   80666:	d1e3      	bne.n	80630 <udi_cdc_multi_read_buf+0x4c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80668:	4628      	mov	r0, r5
   8066a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8066e:	bf00      	nop
   80670:	200006ea 	.word	0x200006ea
   80674:	200014f4 	.word	0x200014f4
   80678:	200014ec 	.word	0x200014ec
   8067c:	200010ec 	.word	0x200010ec
   80680:	00087a85 	.word	0x00087a85
   80684:	00080431 	.word	0x00080431
   80688:	200010de 	.word	0x200010de
   8068c:	200014f0 	.word	0x200014f0

00080690 <udi_cdc_multi_get_free_tx_buffer>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80690:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80694:	b672      	cpsid	i
   80696:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8069a:	2100      	movs	r1, #0
   8069c:	4b13      	ldr	r3, [pc, #76]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   8069e:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   806a0:	4b13      	ldr	r3, [pc, #76]	; (806f0 <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a2:	781b      	ldrb	r3, [r3, #0]
   806a4:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   806a6:	4913      	ldr	r1, [pc, #76]	; (806f4 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806a8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   806ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   806b0:	d009      	beq.n	806c6 <udi_cdc_multi_get_free_tx_buffer+0x36>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   806b2:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806b6:	b92a      	cbnz	r2, 806c4 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806b8:	2201      	movs	r2, #1
   806ba:	4b0c      	ldr	r3, [pc, #48]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806bc:	701a      	strb	r2, [r3, #0]
   806be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806c2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806c4:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   806c6:	490c      	ldr	r1, [pc, #48]	; (806f8 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   806c8:	7809      	ldrb	r1, [r1, #0]
   806ca:	2900      	cmp	r1, #0
   806cc:	d1f1      	bne.n	806b2 <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806ce:	490b      	ldr	r1, [pc, #44]	; (806fc <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806d0:	7809      	ldrb	r1, [r1, #0]
   806d2:	2900      	cmp	r1, #0
   806d4:	d1ed      	bne.n	806b2 <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806d6:	2001      	movs	r0, #1
   806d8:	4908      	ldr	r1, [pc, #32]	; (806fc <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806da:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806dc:	fab3 f383 	clz	r3, r3
   806e0:	095b      	lsrs	r3, r3, #5
   806e2:	4903      	ldr	r1, [pc, #12]	; (806f0 <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806e4:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   806e6:	2000      	movs	r0, #0
   806e8:	e7e3      	b.n	806b2 <udi_cdc_multi_get_free_tx_buffer+0x22>
   806ea:	bf00      	nop
   806ec:	200006ea 	.word	0x200006ea
   806f0:	20001908 	.word	0x20001908
   806f4:	20001904 	.word	0x20001904
   806f8:	20001910 	.word	0x20001910
   806fc:	20001500 	.word	0x20001500

00080700 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   80700:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   80702:	4b03      	ldr	r3, [pc, #12]	; (80710 <udi_cdc_multi_is_tx_ready+0x10>)
   80704:	4798      	blx	r3
}
   80706:	3000      	adds	r0, #0
   80708:	bf18      	it	ne
   8070a:	2001      	movne	r0, #1
   8070c:	bd08      	pop	{r3, pc}
   8070e:	bf00      	nop
   80710:	00080691 	.word	0x00080691

00080714 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   80714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80718:	4617      	mov	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   8071a:	4b1f      	ldr	r3, [pc, #124]	; (80798 <udi_cdc_multi_write_buf+0x84>)
   8071c:	799b      	ldrb	r3, [r3, #6]
   8071e:	2b09      	cmp	r3, #9
		size *=2;
   80720:	bf08      	it	eq
   80722:	0057      	lsleq	r7, r2, #1
{
   80724:	4689      	mov	r9, r1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80726:	f8df b084 	ldr.w	fp, [pc, #132]	; 807ac <udi_cdc_multi_write_buf+0x98>
	cpu_irq_disable();
   8072a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 807b0 <udi_cdc_multi_write_buf+0x9c>
   8072e:	e028      	b.n	80782 <udi_cdc_multi_write_buf+0x6e>
  __ASM volatile ("cpsid i");
   80730:	b672      	cpsid	i
   80732:	f3bf 8f5f 	dmb	sy
   80736:	2300      	movs	r3, #0
   80738:	f888 3000 	strb.w	r3, [r8]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8073c:	4b17      	ldr	r3, [pc, #92]	; (8079c <udi_cdc_multi_write_buf+0x88>)
   8073e:	781d      	ldrb	r5, [r3, #0]
   80740:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80742:	f8df a070 	ldr.w	sl, [pc, #112]	; 807b4 <udi_cdc_multi_write_buf+0xa0>
   80746:	f83a 6015 	ldrh.w	r6, [sl, r5, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   8074a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
   8074e:	42bc      	cmp	r4, r7
   80750:	bf28      	it	cs
   80752:	463c      	movcs	r4, r7
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   80754:	eb06 2345 	add.w	r3, r6, r5, lsl #9
   80758:	4622      	mov	r2, r4
   8075a:	4649      	mov	r1, r9
   8075c:	4810      	ldr	r0, [pc, #64]	; (807a0 <udi_cdc_multi_write_buf+0x8c>)
   8075e:	4418      	add	r0, r3
   80760:	4b10      	ldr	r3, [pc, #64]	; (807a4 <udi_cdc_multi_write_buf+0x90>)
   80762:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   80764:	4426      	add	r6, r4
   80766:	f82a 6015 	strh.w	r6, [sl, r5, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
   8076a:	f3ef 8310 	mrs	r3, PRIMASK
   8076e:	b92b      	cbnz	r3, 8077c <udi_cdc_multi_write_buf+0x68>
		cpu_irq_enable();
   80770:	2301      	movs	r3, #1
   80772:	f888 3000 	strb.w	r3, [r8]
   80776:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8077a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   8077c:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   8077e:	1b3f      	subs	r7, r7, r4
   80780:	d007      	beq.n	80792 <udi_cdc_multi_write_buf+0x7e>
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80782:	2000      	movs	r0, #0
   80784:	47d8      	blx	fp
   80786:	2800      	cmp	r0, #0
   80788:	d1d2      	bne.n	80730 <udi_cdc_multi_write_buf+0x1c>
		if (!udi_cdc_data_running) {
   8078a:	4b07      	ldr	r3, [pc, #28]	; (807a8 <udi_cdc_multi_write_buf+0x94>)
   8078c:	781b      	ldrb	r3, [r3, #0]
   8078e:	2b00      	cmp	r3, #0
   80790:	d1f7      	bne.n	80782 <udi_cdc_multi_write_buf+0x6e>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   80792:	4638      	mov	r0, r7
   80794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80798:	200010e0 	.word	0x200010e0
   8079c:	20001908 	.word	0x20001908
   807a0:	20001504 	.word	0x20001504
   807a4:	00087a85 	.word	0x00087a85
   807a8:	200010de 	.word	0x200010de
   807ac:	00080701 	.word	0x00080701
   807b0:	200006ea 	.word	0x200006ea
   807b4:	20001904 	.word	0x20001904

000807b8 <readFabricationZone>:
*   \brief  Read the fabrication zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readFabricationZone(uint8_t* buffer)
{
   807b8:	b510      	push	{r4, lr}
   807ba:	4604      	mov	r4, r0
    readSMC(2, 0, buffer);
   807bc:	4602      	mov	r2, r0
   807be:	2100      	movs	r1, #0
   807c0:	2002      	movs	r0, #2
   807c2:	4b02      	ldr	r3, [pc, #8]	; (807cc <readFabricationZone+0x14>)
   807c4:	4798      	blx	r3
    return buffer;
}
   807c6:	4620      	mov	r0, r4
   807c8:	bd10      	pop	{r4, pc}
   807ca:	bf00      	nop
   807cc:	00080e7d 	.word	0x00080e7d

000807d0 <writeIssuerZone>:
/*! \fn     writeIssuerZone(uint8_t* buffer)
*   \brief  Write in the issuer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (8 bytes required)
*/
void writeIssuerZone(uint8_t* buffer)
{
   807d0:	b508      	push	{r3, lr}
    writeSMC(16, 64, buffer);
   807d2:	4602      	mov	r2, r0
   807d4:	2140      	movs	r1, #64	; 0x40
   807d6:	2010      	movs	r0, #16
   807d8:	4b01      	ldr	r3, [pc, #4]	; (807e0 <writeIssuerZone+0x10>)
   807da:	4798      	blx	r3
   807dc:	bd08      	pop	{r3, pc}
   807de:	bf00      	nop
   807e0:	00080db1 	.word	0x00080db1

000807e4 <readSecurityCodeAttemptsCounters>:
*   \brief  Read the number of code attempts left (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readSecurityCodeAttemptsCounters(uint8_t* buffer)
{
   807e4:	b510      	push	{r4, lr}
   807e6:	4604      	mov	r4, r0
    readSMC(14, 12, buffer);
   807e8:	4602      	mov	r2, r0
   807ea:	210c      	movs	r1, #12
   807ec:	200e      	movs	r0, #14
   807ee:	4b02      	ldr	r3, [pc, #8]	; (807f8 <readSecurityCodeAttemptsCounters+0x14>)
   807f0:	4798      	blx	r3
    return buffer;
}
   807f2:	4620      	mov	r0, r4
   807f4:	bd10      	pop	{r4, pc}
   807f6:	bf00      	nop
   807f8:	00080e7d 	.word	0x00080e7d

000807fc <readMemoryTestZone>:
*   \brief  Read the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readMemoryTestZone(uint8_t* buffer)
{
   807fc:	b510      	push	{r4, lr}
   807fe:	4604      	mov	r4, r0
    readSMC(178, 176, buffer);
   80800:	4602      	mov	r2, r0
   80802:	21b0      	movs	r1, #176	; 0xb0
   80804:	20b2      	movs	r0, #178	; 0xb2
   80806:	4b02      	ldr	r3, [pc, #8]	; (80810 <readMemoryTestZone+0x14>)
   80808:	4798      	blx	r3
    return buffer;
}
   8080a:	4620      	mov	r0, r4
   8080c:	bd10      	pop	{r4, pc}
   8080e:	bf00      	nop
   80810:	00080e7d 	.word	0x00080e7d

00080814 <writeMemoryTestZone>:
/*! \fn     writeMemoryTestZone(uint8_t* buffer)
*   \brief  Write in the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeMemoryTestZone(uint8_t* buffer)
{
   80814:	b508      	push	{r3, lr}
    writeSMC(1408, 16, buffer);
   80816:	4602      	mov	r2, r0
   80818:	2110      	movs	r1, #16
   8081a:	f44f 60b0 	mov.w	r0, #1408	; 0x580
   8081e:	4b01      	ldr	r3, [pc, #4]	; (80824 <writeMemoryTestZone+0x10>)
   80820:	4798      	blx	r3
   80822:	bd08      	pop	{r3, pc}
   80824:	00080db1 	.word	0x00080db1

00080828 <readManufacturerZone>:
*   \brief  Read the manufacturer zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readManufacturerZone(uint8_t* buffer)
{
   80828:	b510      	push	{r4, lr}
   8082a:	4604      	mov	r4, r0
    readSMC(180, 178, buffer);
   8082c:	4602      	mov	r2, r0
   8082e:	21b2      	movs	r1, #178	; 0xb2
   80830:	20b4      	movs	r0, #180	; 0xb4
   80832:	4b02      	ldr	r3, [pc, #8]	; (8083c <readManufacturerZone+0x14>)
   80834:	4798      	blx	r3
    return buffer;
}
   80836:	4620      	mov	r0, r4
   80838:	bd10      	pop	{r4, pc}
   8083a:	bf00      	nop
   8083c:	00080e7d 	.word	0x00080e7d

00080840 <writeManufacturerZone>:
/*! \fn     writeManufacturerZone(uint8_t* buffer)
*   \brief  Write in the manufacturer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeManufacturerZone(uint8_t* buffer)
{
   80840:	b508      	push	{r3, lr}
    writeSMC(1424, 16, buffer);
   80842:	4602      	mov	r2, r0
   80844:	2110      	movs	r1, #16
   80846:	f44f 60b2 	mov.w	r0, #1424	; 0x590
   8084a:	4b01      	ldr	r3, [pc, #4]	; (80850 <writeManufacturerZone+0x10>)
   8084c:	4798      	blx	r3
   8084e:	bd08      	pop	{r3, pc}
   80850:	00080db1 	.word	0x00080db1

00080854 <writeManufacturerFuse>:

/*! \fn     writeManufacturerFuse(void)
*   \brief  Write manufacturer fuse, controlling access to the MFZ
*/
void writeManufacturerFuse(void)
{
   80854:	b508      	push	{r3, lr}
    blowFuse(MAN_FUSE);
   80856:	2000      	movs	r0, #0
   80858:	4b01      	ldr	r3, [pc, #4]	; (80860 <writeManufacturerFuse+0xc>)
   8085a:	4798      	blx	r3
   8085c:	bd08      	pop	{r3, pc}
   8085e:	bf00      	nop
   80860:	00080bd5 	.word	0x00080bd5

00080864 <write_issuers_fuse>:

/*! \fn     write_issuers_fuse(void)
*   \brief  Write issuers fuse, setting the AT88SC102 into Security Mode 2, we need to be authenticated here
*/
void write_issuers_fuse(void)
{
   80864:	b508      	push	{r3, lr}
    blowFuse(ISSUER_FUSE);
   80866:	2002      	movs	r0, #2
   80868:	4b01      	ldr	r3, [pc, #4]	; (80870 <write_issuers_fuse+0xc>)
   8086a:	4798      	blx	r3
   8086c:	bd08      	pop	{r3, pc}
   8086e:	bf00      	nop
   80870:	00080bd5 	.word	0x00080bd5

00080874 <write_ec2en_fuse>:

/*! \fn     write_ec2en_fuse(void)
*   \brief  Write ec2en fuse, to be done before blowing issuer fuse
*/
void write_ec2en_fuse(void)
{
   80874:	b508      	push	{r3, lr}
    blowFuse(EC2EN_FUSE);
   80876:	2001      	movs	r0, #1
   80878:	4b01      	ldr	r3, [pc, #4]	; (80880 <write_ec2en_fuse+0xc>)
   8087a:	4798      	blx	r3
   8087c:	bd08      	pop	{r3, pc}
   8087e:	bf00      	nop
   80880:	00080bd5 	.word	0x00080bd5

00080884 <checkSecurityMode2>:
/*! \fn     checkSecurityMode2(void)
*   \brief  Check that the smartcard is in mode two by trying to write his manufacturer zone
*   \return Success status
*/
RET_TYPE checkSecurityMode2(void)
{
   80884:	b510      	push	{r4, lr}
   80886:	b082      	sub	sp, #8
    uint16_t manZoneRead, temp_uint;
    
    // Read manufacturer zone, set temp_uint to its opposite
    readManufacturerZone((uint8_t*)&manZoneRead);
   80888:	f10d 0006 	add.w	r0, sp, #6
   8088c:	4c0b      	ldr	r4, [pc, #44]	; (808bc <checkSecurityMode2+0x38>)
   8088e:	47a0      	blx	r4
    temp_uint = ~manZoneRead;
   80890:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80894:	43db      	mvns	r3, r3
   80896:	a802      	add	r0, sp, #8
   80898:	f820 3d04 	strh.w	r3, [r0, #-4]!
    
    // Perform test write
    writeManufacturerZone((uint8_t*)&temp_uint);
   8089c:	4b08      	ldr	r3, [pc, #32]	; (808c0 <checkSecurityMode2+0x3c>)
   8089e:	4798      	blx	r3
    readManufacturerZone((uint8_t*)&manZoneRead);
   808a0:	f10d 0006 	add.w	r0, sp, #6
   808a4:	47a0      	blx	r4
    
    if (temp_uint != manZoneRead)
   808a6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   808aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    } 
    else
    {
        return RETURN_NOK;
    }
}
   808ae:	4298      	cmp	r0, r3
   808b0:	f04f 30ff 	mov.w	r0, #4294967295
   808b4:	bf18      	it	ne
   808b6:	2000      	movne	r0, #0
   808b8:	b002      	add	sp, #8
   808ba:	bd10      	pop	{r4, pc}
   808bc:	00080829 	.word	0x00080829
   808c0:	00080841 	.word	0x00080841

000808c4 <writeSecurityCode>:
/*! \fn     writeSecurityCode(uint16_t* code)
*   \brief  Write a new security code (security mode 1&2 - Authenticated!)
*   \param  code  The pin code
*/
void writeSecurityCode(volatile uint16_t* code)
{
   808c4:	b510      	push	{r4, lr}
   808c6:	4604      	mov	r4, r0
    *code = swap16(*code);
   808c8:	8803      	ldrh	r3, [r0, #0]
   808ca:	8802      	ldrh	r2, [r0, #0]
   808cc:	b292      	uxth	r2, r2
   808ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808d6:	b29b      	uxth	r3, r3
   808d8:	8003      	strh	r3, [r0, #0]
    writeSMC(80, 16, (uint8_t*)code);
   808da:	4602      	mov	r2, r0
   808dc:	2110      	movs	r1, #16
   808de:	2050      	movs	r0, #80	; 0x50
   808e0:	4b05      	ldr	r3, [pc, #20]	; (808f8 <writeSecurityCode+0x34>)
   808e2:	4798      	blx	r3
    *code = swap16(*code);
   808e4:	8823      	ldrh	r3, [r4, #0]
   808e6:	8822      	ldrh	r2, [r4, #0]
   808e8:	b292      	uxth	r2, r2
   808ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808f2:	b29b      	uxth	r3, r3
   808f4:	8023      	strh	r3, [r4, #0]
   808f6:	bd10      	pop	{r4, pc}
   808f8:	00080db1 	.word	0x00080db1

000808fc <resetBlankCard>:
{
   808fc:	b500      	push	{lr}
   808fe:	b083      	sub	sp, #12
    uint16_t default_pin = SMARTCARD_FACTORY_PIN;
   80900:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   80904:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint8_t data_buffer[2] = {0xFF, 0xFF};
   80908:	4b08      	ldr	r3, [pc, #32]	; (8092c <resetBlankCard+0x30>)
   8090a:	881b      	ldrh	r3, [r3, #0]
   8090c:	aa02      	add	r2, sp, #8
   8090e:	f822 3d04 	strh.w	r3, [r2, #-4]!
    writeSMC(1441, 1, data_buffer);
   80912:	2101      	movs	r1, #1
   80914:	f240 50a1 	movw	r0, #1441	; 0x5a1
   80918:	4b05      	ldr	r3, [pc, #20]	; (80930 <resetBlankCard+0x34>)
   8091a:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   8091c:	f10d 0006 	add.w	r0, sp, #6
   80920:	4b04      	ldr	r3, [pc, #16]	; (80934 <resetBlankCard+0x38>)
   80922:	4798      	blx	r3
}
   80924:	b003      	add	sp, #12
   80926:	f85d fb04 	ldr.w	pc, [sp], #4
   8092a:	bf00      	nop
   8092c:	0008dac4 	.word	0x0008dac4
   80930:	00080db1 	.word	0x00080db1
   80934:	000808c5 	.word	0x000808c5

00080938 <setAuthenticatedReadWriteAccessToZone1and2>:

/*! \fn     setAuthenticatedReadWriteAccessToZone1and2(void)
*   \brief  Function called to only allow reads and writes to the application zone 1 & 2 when authenticated
*/
void setAuthenticatedReadWriteAccessToZone1and2(void)
{
   80938:	b510      	push	{r4, lr}
   8093a:	b082      	sub	sp, #8
    uint8_t temp_buffer[2] = {0x80, 0x00};
   8093c:	2380      	movs	r3, #128	; 0x80
   8093e:	f88d 3004 	strb.w	r3, [sp, #4]
   80942:	2300      	movs	r3, #0
   80944:	f88d 3005 	strb.w	r3, [sp, #5]
    // Set P1 to 1 to allow write, remove R1 to prevent non authenticated reads
    writeSMC(176, 16, temp_buffer);
   80948:	aa01      	add	r2, sp, #4
   8094a:	2110      	movs	r1, #16
   8094c:	20b0      	movs	r0, #176	; 0xb0
   8094e:	4c04      	ldr	r4, [pc, #16]	; (80960 <setAuthenticatedReadWriteAccessToZone1and2+0x28>)
   80950:	47a0      	blx	r4
    // Set P2 to 1 to allow write, remove R2 to prevent non authenticated reads
    writeSMC(736, 16, temp_buffer);
   80952:	aa01      	add	r2, sp, #4
   80954:	2110      	movs	r1, #16
   80956:	f44f 7038 	mov.w	r0, #736	; 0x2e0
   8095a:	47a0      	blx	r4
}
   8095c:	b002      	add	sp, #8
   8095e:	bd10      	pop	{r4, pc}
   80960:	00080db1 	.word	0x00080db1

00080964 <transformBlankCardIntoMooltipass>:
{
   80964:	b510      	push	{r4, lr}
   80966:	b086      	sub	sp, #24
    uint16_t default_pin = SMARTCARD_DEFAULT_PIN;
   80968:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   8096c:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (checkSecurityMode2() == RETURN_OK)
   80970:	4b13      	ldr	r3, [pc, #76]	; (809c0 <transformBlankCardIntoMooltipass+0x5c>)
   80972:	4798      	blx	r3
   80974:	b300      	cbz	r0, 809b8 <transformBlankCardIntoMooltipass+0x54>
    resetBlankCard();
   80976:	4b13      	ldr	r3, [pc, #76]	; (809c4 <transformBlankCardIntoMooltipass+0x60>)
   80978:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   8097a:	f10d 0002 	add.w	r0, sp, #2
   8097e:	4b12      	ldr	r3, [pc, #72]	; (809c8 <transformBlankCardIntoMooltipass+0x64>)
   80980:	4798      	blx	r3
    strcpy((char*)temp_buffer, "limpkin");
   80982:	ac01      	add	r4, sp, #4
   80984:	4b11      	ldr	r3, [pc, #68]	; (809cc <transformBlankCardIntoMooltipass+0x68>)
   80986:	e893 0003 	ldmia.w	r3, {r0, r1}
   8098a:	e884 0003 	stmia.w	r4, {r0, r1}
    writeIssuerZone(temp_buffer);
   8098e:	4620      	mov	r0, r4
   80990:	4b0f      	ldr	r3, [pc, #60]	; (809d0 <transformBlankCardIntoMooltipass+0x6c>)
   80992:	4798      	blx	r3
    *temp_buf16 = swap16(2014);
   80994:	f64d 6307 	movw	r3, #56839	; 0xde07
   80998:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeManufacturerZone(temp_buffer);
   8099c:	4620      	mov	r0, r4
   8099e:	4b0d      	ldr	r3, [pc, #52]	; (809d4 <transformBlankCardIntoMooltipass+0x70>)
   809a0:	4798      	blx	r3
    setAuthenticatedReadWriteAccessToZone1and2();
   809a2:	4b0d      	ldr	r3, [pc, #52]	; (809d8 <transformBlankCardIntoMooltipass+0x74>)
   809a4:	4798      	blx	r3
    writeManufacturerFuse();
   809a6:	4b0d      	ldr	r3, [pc, #52]	; (809dc <transformBlankCardIntoMooltipass+0x78>)
   809a8:	4798      	blx	r3
    write_ec2en_fuse();
   809aa:	4b0d      	ldr	r3, [pc, #52]	; (809e0 <transformBlankCardIntoMooltipass+0x7c>)
   809ac:	4798      	blx	r3
    write_issuers_fuse();
   809ae:	4b0d      	ldr	r3, [pc, #52]	; (809e4 <transformBlankCardIntoMooltipass+0x80>)
   809b0:	4798      	blx	r3
    return RETURN_OK;
   809b2:	2000      	movs	r0, #0
}
   809b4:	b006      	add	sp, #24
   809b6:	bd10      	pop	{r4, pc}
        return RETURN_NOK;
   809b8:	f04f 30ff 	mov.w	r0, #4294967295
   809bc:	e7fa      	b.n	809b4 <transformBlankCardIntoMooltipass+0x50>
   809be:	bf00      	nop
   809c0:	00080885 	.word	0x00080885
   809c4:	000808fd 	.word	0x000808fd
   809c8:	000808c5 	.word	0x000808c5
   809cc:	0008dac8 	.word	0x0008dac8
   809d0:	000807d1 	.word	0x000807d1
   809d4:	00080841 	.word	0x00080841
   809d8:	00080939 	.word	0x00080939
   809dc:	00080855 	.word	0x00080855
   809e0:	00080875 	.word	0x00080875
   809e4:	00080865 	.word	0x00080865

000809e8 <getNumberOfSecurityCodeTriesLeft>:
/*! \fn     getNumberOfSecurityCodeTriesLeft(void)
*   \brief  Get the number of security code tries left
*   \return Number of tries left
*/
uint8_t getNumberOfSecurityCodeTriesLeft(void)
{
   809e8:	b500      	push	{lr}
   809ea:	b083      	sub	sp, #12
    uint8_t temp_buffer[2];
    uint8_t return_val = 0;
    uint8_t i;

    readSecurityCodeAttemptsCounters(temp_buffer);
   809ec:	a801      	add	r0, sp, #4
   809ee:	4b09      	ldr	r3, [pc, #36]	; (80a14 <getNumberOfSecurityCodeTriesLeft+0x2c>)
   809f0:	4798      	blx	r3
    for(i = 0; i < 4; i++)
    {
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   809f6:	2304      	movs	r3, #4
    uint8_t return_val = 0;
   809f8:	2000      	movs	r0, #0
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809fa:	fa41 f203 	asr.w	r2, r1, r3
   809fe:	f012 0f01 	tst.w	r2, #1
        {
            return_val++;
   80a02:	bf1c      	itt	ne
   80a04:	3001      	addne	r0, #1
   80a06:	b2c0      	uxtbne	r0, r0
   80a08:	3301      	adds	r3, #1
    for(i = 0; i < 4; i++)
   80a0a:	2b08      	cmp	r3, #8
   80a0c:	d1f5      	bne.n	809fa <getNumberOfSecurityCodeTriesLeft+0x12>
        }
    }

    return return_val;
}
   80a0e:	b003      	add	sp, #12
   80a10:	f85d fb04 	ldr.w	pc, [sp], #4
   80a14:	000807e5 	.word	0x000807e5

00080a18 <smartcardHPulseDelay>:

/*! \fn     smartcardHPulseDelay(void)
*   \brief  2us half pulse delay, specified by datasheet (min 3.3us/2)
*/
void smartcardHPulseDelay(void)
{
   80a18:	b508      	push	{r3, lr}
    delay_us(2);
   80a1a:	200e      	movs	r0, #14
   80a1c:	4b01      	ldr	r3, [pc, #4]	; (80a24 <smartcardHPulseDelay+0xc>)
   80a1e:	4798      	blx	r3
   80a20:	bd08      	pop	{r3, pc}
   80a22:	bf00      	nop
   80a24:	20000089 	.word	0x20000089

00080a28 <smartcardPowerDelay>:

/*! \fn     smartcardPowerDelay(void)
*   \brief  Delay to let the card come online/offline
*/
void smartcardPowerDelay(void)
{
   80a28:	b508      	push	{r3, lr}
    delay_ms(130);
   80a2a:	4802      	ldr	r0, [pc, #8]	; (80a34 <smartcardPowerDelay+0xc>)
   80a2c:	4b02      	ldr	r3, [pc, #8]	; (80a38 <smartcardPowerDelay+0x10>)
   80a2e:	4798      	blx	r3
   80a30:	bd08      	pop	{r3, pc}
   80a32:	bf00      	nop
   80a34:	000d9a25 	.word	0x000d9a25
   80a38:	20000089 	.word	0x20000089

00080a3c <clockPulseSMC>:

/*! \fn     clockPulseSMC(void)
*   \brief  Send a 4us H->L clock pulse (datasheet: min 3.3us)
*/
void clockPulseSMC(void)
{
   80a3c:	b570      	push	{r4, r5, r6, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a3e:	4d04      	ldr	r5, [pc, #16]	; (80a50 <clockPulseSMC+0x14>)
   80a40:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a44:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a46:	4c03      	ldr	r4, [pc, #12]	; (80a54 <clockPulseSMC+0x18>)
   80a48:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a4a:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a4c:	47a0      	blx	r4
   80a4e:	bd70      	pop	{r4, r5, r6, pc}
   80a50:	400e0c00 	.word	0x400e0c00
   80a54:	00080a19 	.word	0x00080a19

00080a58 <invertedClockPulseSMC>:

/*! \fn     invertedClockPulseSMC(void)
*   \brief  Send a 4us L->H clock pulse (datasheet: min 3.3us)
*/
void invertedClockPulseSMC(void)
{
   80a58:	b570      	push	{r4, r5, r6, lr}
   80a5a:	4d04      	ldr	r5, [pc, #16]	; (80a6c <invertedClockPulseSMC+0x14>)
   80a5c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a60:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a62:	4c03      	ldr	r4, [pc, #12]	; (80a70 <invertedClockPulseSMC+0x18>)
   80a64:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a66:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a68:	47a0      	blx	r4
   80a6a:	bd70      	pop	{r4, r5, r6, pc}
   80a6c:	400e0c00 	.word	0x400e0c00
   80a70:	00080a19 	.word	0x00080a19

00080a74 <clearPgmRstSignals>:

/*! \fn     clearPgmRstSignals(void)
*   \brief  Clear PGM / RST signal for normal operation mode
*/
void clearPgmRstSignals(void)
{
   80a74:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a76:	4b04      	ldr	r3, [pc, #16]	; (80a88 <clearPgmRstSignals+0x14>)
   80a78:	2220      	movs	r2, #32
   80a7a:	635a      	str	r2, [r3, #52]	; 0x34
   80a7c:	2208      	movs	r2, #8
   80a7e:	635a      	str	r2, [r3, #52]	; 0x34
	scard_pgm_low();
	scard_rst_low();
    smartcardHPulseDelay();
   80a80:	4c02      	ldr	r4, [pc, #8]	; (80a8c <clearPgmRstSignals+0x18>)
   80a82:	47a0      	blx	r4
	smartcardHPulseDelay();
   80a84:	47a0      	blx	r4
   80a86:	bd10      	pop	{r4, pc}
   80a88:	400e0c00 	.word	0x400e0c00
   80a8c:	00080a19 	.word	0x00080a19

00080a90 <setPgmRstSignals>:

/*! \fn     setPgmRstSignals(void)
*   \brief  Set PGM / RST signal for standby mode
*/
void setPgmRstSignals(void)
{
   80a90:	b508      	push	{r3, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a92:	4b04      	ldr	r3, [pc, #16]	; (80aa4 <setPgmRstSignals+0x14>)
   80a94:	2208      	movs	r2, #8
   80a96:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a98:	2220      	movs	r2, #32
   80a9a:	635a      	str	r2, [r3, #52]	; 0x34
	scard_rst_high();
	scard_pgm_low();
    smartcardHPulseDelay();
   80a9c:	4b02      	ldr	r3, [pc, #8]	; (80aa8 <setPgmRstSignals+0x18>)
   80a9e:	4798      	blx	r3
   80aa0:	bd08      	pop	{r3, pc}
   80aa2:	bf00      	nop
   80aa4:	400e0c00 	.word	0x400e0c00
   80aa8:	00080a19 	.word	0x00080a19

00080aac <performLowLevelWriteNErase>:
/*! \fn     performLowLevelWriteNErase(uint8_t is_write)
*   \brief  Perform a write or erase operation on the smart card
*   \param  is_write    Boolean to indicate if it is a write
*/
void performLowLevelWriteNErase(uint8_t is_write)
{
   80aac:	b570      	push	{r4, r5, r6, lr}
   80aae:	4604      	mov	r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ab0:	2220      	movs	r2, #32
   80ab2:	4b11      	ldr	r3, [pc, #68]	; (80af8 <performLowLevelWriteNErase+0x4c>)
   80ab4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set programming control signal */
	scard_pgm_high();
    smartcardHPulseDelay();
   80ab6:	4b11      	ldr	r3, [pc, #68]	; (80afc <performLowLevelWriteNErase+0x50>)
   80ab8:	4798      	blx	r3

    /* Set data according to write / erase */
    if (is_write != FALSE)
   80aba:	b9bc      	cbnz	r4, 80aec <performLowLevelWriteNErase+0x40>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80abc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80ac0:	4b0d      	ldr	r3, [pc, #52]	; (80af8 <performLowLevelWriteNErase+0x4c>)
   80ac2:	635a      	str	r2, [r3, #52]	; 0x34
    }
    else
    {
		scard_io_low();
    }
    smartcardHPulseDelay();
   80ac4:	4c0d      	ldr	r4, [pc, #52]	; (80afc <performLowLevelWriteNErase+0x50>)
   80ac6:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ac8:	4d0b      	ldr	r5, [pc, #44]	; (80af8 <performLowLevelWriteNErase+0x4c>)
   80aca:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80ace:	632e      	str	r6, [r5, #48]	; 0x30

    /* Set clock */
	scard_sck_high();
    smartcardHPulseDelay();
   80ad0:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ad2:	2320      	movs	r3, #32
   80ad4:	636b      	str	r3, [r5, #52]	; 0x34
    delay_ms(4);
   80ad6:	f646 3025 	movw	r0, #27429	; 0x6b25
   80ada:	4b09      	ldr	r3, [pc, #36]	; (80b00 <performLowLevelWriteNErase+0x54>)
   80adc:	4798      	blx	r3
   80ade:	636e      	str	r6, [r5, #52]	; 0x34
    scard_pgm_low();
    smartcardTchpDelay();

    /* Release clock */
    scard_sck_low();
    smartcardHPulseDelay();
   80ae0:	47a0      	blx	r4
   80ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ae6:	636b      	str	r3, [r5, #52]	; 0x34

    /* Release data */
    scard_io_low();
    smartcardHPulseDelay();
   80ae8:	47a0      	blx	r4
   80aea:	bd70      	pop	{r4, r5, r6, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80aec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80af0:	4b01      	ldr	r3, [pc, #4]	; (80af8 <performLowLevelWriteNErase+0x4c>)
   80af2:	631a      	str	r2, [r3, #48]	; 0x30
   80af4:	e7e6      	b.n	80ac4 <performLowLevelWriteNErase+0x18>
   80af6:	bf00      	nop
   80af8:	400e0c00 	.word	0x400e0c00
   80afc:	00080a19 	.word	0x00080a19
   80b00:	20000089 	.word	0x20000089

00080b04 <setSPIModeSMC>:

/*! \fn     setSPIModeSMC(void)
*   \brief  Activate SPI controller for the SMC
*/
void setSPIModeSMC(void)
{
   80b04:	b530      	push	{r4, r5, lr}
   80b06:	b085      	sub	sp, #20
	usart_spi_opt_t opts;
	
	opts.baudrate = 125000;
   80b08:	4b12      	ldr	r3, [pc, #72]	; (80b54 <setSPIModeSMC+0x50>)
   80b0a:	9300      	str	r3, [sp, #0]
	opts.char_length = US_MR_CHRL_8_BIT;
   80b0c:	23c0      	movs	r3, #192	; 0xc0
   80b0e:	9301      	str	r3, [sp, #4]
	opts.channel_mode = US_MR_CHMODE_NORMAL;
   80b10:	2300      	movs	r3, #0
   80b12:	9303      	str	r3, [sp, #12]
	opts.spi_mode = SPI_MODE_0;
   80b14:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80b16:	200f      	movs	r0, #15
   80b18:	4b0f      	ldr	r3, [pc, #60]	; (80b58 <setSPIModeSMC+0x54>)
   80b1a:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	usart_init_spi_master(SCARD_USART, &opts ,sysclk_get_cpu_hz());
   80b1c:	4c0f      	ldr	r4, [pc, #60]	; (80b5c <setSPIModeSMC+0x58>)
   80b1e:	4a10      	ldr	r2, [pc, #64]	; (80b60 <setSPIModeSMC+0x5c>)
   80b20:	4669      	mov	r1, sp
   80b22:	4620      	mov	r0, r4
   80b24:	4b0f      	ldr	r3, [pc, #60]	; (80b64 <setSPIModeSMC+0x60>)
   80b26:	4798      	blx	r3
	gpio_configure_pin(SCARD_IOTX_IDX, PIO_PERIPH_A);
   80b28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b2c:	2016      	movs	r0, #22
   80b2e:	4d0e      	ldr	r5, [pc, #56]	; (80b68 <setSPIModeSMC+0x64>)
   80b30:	47a8      	blx	r5
	gpio_configure_pin(SCARD_IORX_IDX, PIO_PERIPH_A);
   80b32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b36:	2017      	movs	r0, #23
   80b38:	47a8      	blx	r5
	gpio_configure_pin(SCARD_SCK_IDX, SCK_PERIPH);
   80b3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b3e:	2019      	movs	r0, #25
   80b40:	47a8      	blx	r5
	
	usart_enable_rx(SCARD_USART);
   80b42:	4620      	mov	r0, r4
   80b44:	4b09      	ldr	r3, [pc, #36]	; (80b6c <setSPIModeSMC+0x68>)
   80b46:	4798      	blx	r3
	usart_enable_tx(SCARD_USART);
   80b48:	4620      	mov	r0, r4
   80b4a:	4b09      	ldr	r3, [pc, #36]	; (80b70 <setSPIModeSMC+0x6c>)
   80b4c:	4798      	blx	r3
	
}
   80b4e:	b005      	add	sp, #20
   80b50:	bd30      	pop	{r4, r5, pc}
   80b52:	bf00      	nop
   80b54:	0001e848 	.word	0x0001e848
   80b58:	000853d5 	.word	0x000853d5
   80b5c:	40098000 	.word	0x40098000
   80b60:	05b8d800 	.word	0x05b8d800
   80b64:	00086e39 	.word	0x00086e39
   80b68:	00085081 	.word	0x00085081
   80b6c:	00086fad 	.word	0x00086fad
   80b70:	00086f9d 	.word	0x00086f9d

00080b74 <setBBModeAndPgmRstSMC>:

/*! \fn     setBBModeAndPgmRstSMC(void)
*   \brief  Switch to big banging, and clear pgm/rst signal for normal operation
*/
void setBBModeAndPgmRstSMC(void)
{
   80b74:	b510      	push	{r4, lr}
    /* Deactivate SPI port */
    usart_disable_rx(SCARD_USART);
   80b76:	4c10      	ldr	r4, [pc, #64]	; (80bb8 <setBBModeAndPgmRstSMC+0x44>)
   80b78:	4620      	mov	r0, r4
   80b7a:	4b10      	ldr	r3, [pc, #64]	; (80bbc <setBBModeAndPgmRstSMC+0x48>)
   80b7c:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80b7e:	4620      	mov	r0, r4
   80b80:	4b0f      	ldr	r3, [pc, #60]	; (80bc0 <setBBModeAndPgmRstSMC+0x4c>)
   80b82:	4798      	blx	r3

    /* Clock & data low */
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b84:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b88:	2016      	movs	r0, #22
   80b8a:	4c0e      	ldr	r4, [pc, #56]	; (80bc4 <setBBModeAndPgmRstSMC+0x50>)
   80b8c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80b8e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80b92:	2017      	movs	r0, #23
   80b94:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b96:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b9a:	2019      	movs	r0, #25
   80b9c:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80b9e:	4b0a      	ldr	r3, [pc, #40]	; (80bc8 <setBBModeAndPgmRstSMC+0x54>)
   80ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80ba4:	635a      	str	r2, [r3, #52]	; 0x34
   80ba6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80baa:	635a      	str	r2, [r3, #52]	; 0x34
    scard_sck_low();
    scard_io_low();
	
    smartcardHPulseDelay();
   80bac:	4b07      	ldr	r3, [pc, #28]	; (80bcc <setBBModeAndPgmRstSMC+0x58>)
   80bae:	4798      	blx	r3

    /* Clear PGM and RST signals */
    clearPgmRstSignals();
   80bb0:	4b07      	ldr	r3, [pc, #28]	; (80bd0 <setBBModeAndPgmRstSMC+0x5c>)
   80bb2:	4798      	blx	r3
   80bb4:	bd10      	pop	{r4, pc}
   80bb6:	bf00      	nop
   80bb8:	40098000 	.word	0x40098000
   80bbc:	00086fb3 	.word	0x00086fb3
   80bc0:	00086fa3 	.word	0x00086fa3
   80bc4:	00085081 	.word	0x00085081
   80bc8:	400e0c00 	.word	0x400e0c00
   80bcc:	00080a19 	.word	0x00080a19
   80bd0:	00080a75 	.word	0x00080a75

00080bd4 <blowFuse>:
/*! \fn     blowFuse(uint8_t fuse_name)
*   \brief  Blow the manufacturer or issuer fuse
*   \param  fuse_name    Which fuse to blow
*/
void blowFuse(uint8_t fuse_name)
{
   80bd4:	b538      	push	{r3, r4, r5, lr}
    uint16_t i;

    /* Set the index to write */
    if (fuse_name == MAN_FUSE)
   80bd6:	b130      	cbz	r0, 80be6 <blowFuse+0x12>
    {
        i = 1460;
    }
    else if (fuse_name == ISSUER_FUSE)
   80bd8:	2802      	cmp	r0, #2
   80bda:	d019      	beq.n	80c10 <blowFuse+0x3c>
    {
        i = 1560;
    }
    else if (fuse_name == EC2EN_FUSE)
   80bdc:	2801      	cmp	r0, #1
   80bde:	d01a      	beq.n	80c16 <blowFuse+0x42>
    {
        i = 0;
    }

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80be0:	4b0e      	ldr	r3, [pc, #56]	; (80c1c <blowFuse+0x48>)
   80be2:	4798      	blx	r3
   80be4:	e009      	b.n	80bfa <blowFuse+0x26>
        i = 1460;
   80be6:	f240 54b4 	movw	r4, #1460	; 0x5b4
    setBBModeAndPgmRstSMC();
   80bea:	4b0c      	ldr	r3, [pc, #48]	; (80c1c <blowFuse+0x48>)
   80bec:	4798      	blx	r3

    /* Get to the good index */
    while(i--)clockPulseSMC();
   80bee:	4d0c      	ldr	r5, [pc, #48]	; (80c20 <blowFuse+0x4c>)
   80bf0:	47a8      	blx	r5
   80bf2:	3c01      	subs	r4, #1
   80bf4:	b2a4      	uxth	r4, r4
   80bf6:	2c00      	cmp	r4, #0
   80bf8:	d1fa      	bne.n	80bf0 <blowFuse+0x1c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80bfa:	2208      	movs	r2, #8
   80bfc:	4b09      	ldr	r3, [pc, #36]	; (80c24 <blowFuse+0x50>)
   80bfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set RST signal */
	scard_rst_high();

    /* Perform a write */
    performLowLevelWriteNErase(TRUE);
   80c00:	2001      	movs	r0, #1
   80c02:	4b09      	ldr	r3, [pc, #36]	; (80c28 <blowFuse+0x54>)
   80c04:	4798      	blx	r3

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80c06:	4b09      	ldr	r3, [pc, #36]	; (80c2c <blowFuse+0x58>)
   80c08:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80c0a:	4b09      	ldr	r3, [pc, #36]	; (80c30 <blowFuse+0x5c>)
   80c0c:	4798      	blx	r3
}
   80c0e:	bd38      	pop	{r3, r4, r5, pc}
        i = 1560;
   80c10:	f44f 64c3 	mov.w	r4, #1560	; 0x618
   80c14:	e7e9      	b.n	80bea <blowFuse+0x16>
        i = 1529;
   80c16:	f240 54f9 	movw	r4, #1529	; 0x5f9
   80c1a:	e7e6      	b.n	80bea <blowFuse+0x16>
   80c1c:	00080b75 	.word	0x00080b75
   80c20:	00080a3d 	.word	0x00080a3d
   80c24:	400e0c00 	.word	0x400e0c00
   80c28:	00080aad 	.word	0x00080aad
   80c2c:	00080a91 	.word	0x00080a91
   80c30:	00080b05 	.word	0x00080b05

00080c34 <securityValidationSMC>:
*   \brief  Check security code
*   \param  code    The code
*   \return success_status (see card_detect_return_t)
*/
RET_TYPE securityValidationSMC(uint16_t code, uint8_t reset_after_send)
{
   80c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80c38:	4607      	mov	r7, r0
   80c3a:	460e      	mov	r6, r1
    RET_TYPE return_val = RETURN_PIN_NOK_0;
    uint8_t temp_bool;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80c3c:	4b53      	ldr	r3, [pc, #332]	; (80d8c <securityValidationSMC+0x158>)
   80c3e:	4798      	blx	r3
   80c40:	2450      	movs	r4, #80	; 0x50

    /* Get to the SC */
    for(i = 0; i < 80; i++)
        invertedClockPulseSMC();
   80c42:	4d53      	ldr	r5, [pc, #332]	; (80d90 <securityValidationSMC+0x15c>)
   80c44:	47a8      	blx	r5
   80c46:	3c01      	subs	r4, #1
   80c48:	b2a4      	uxth	r4, r4
    for(i = 0; i < 80; i++)
   80c4a:	2c00      	cmp	r4, #0
   80c4c:	d1fa      	bne.n	80c44 <securityValidationSMC+0x10>
   80c4e:	2210      	movs	r2, #16
   80c50:	4b50      	ldr	r3, [pc, #320]	; (80d94 <securityValidationSMC+0x160>)
   80c52:	631a      	str	r2, [r3, #48]	; 0x30

	scard_aux1_high();	

    /* Clock is at high level now, as input must be switched during this time */
    /* Enter the SC */
    smartcardHPulseDelay();
   80c54:	4b50      	ldr	r3, [pc, #320]	; (80d98 <securityValidationSMC+0x164>)
   80c56:	4798      	blx	r3
   80c58:	240f      	movs	r4, #15
   80c5a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80d94 <securityValidationSMC+0x160>
        }
        else
        {
            scard_io_high();
        }
        smartcardHPulseDelay();
   80c5e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80d98 <securityValidationSMC+0x164>

        /* Inverted clock pulse */
        invertedClockPulseSMC();
   80c62:	4d4b      	ldr	r5, [pc, #300]	; (80d90 <securityValidationSMC+0x15c>)
        if (((code >> (15-i)) & 0x0001) != 0x0000)
   80c64:	fa47 f304 	asr.w	r3, r7, r4
   80c68:	f013 0f01 	tst.w	r3, #1
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c70:	bf14      	ite	ne
   80c72:	f8c9 3034 	strne.w	r3, [r9, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c76:	f8c9 3030 	streq.w	r3, [r9, #48]	; 0x30
        smartcardHPulseDelay();
   80c7a:	47c0      	blx	r8
        invertedClockPulseSMC();
   80c7c:	47a8      	blx	r5
   80c7e:	3c01      	subs	r4, #1
    for(i = 0; i < 16; i++)
   80c80:	f1b4 3fff 	cmp.w	r4, #4294967295
   80c84:	d1ee      	bne.n	80c64 <securityValidationSMC+0x30>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c86:	4d43      	ldr	r5, [pc, #268]	; (80d94 <securityValidationSMC+0x160>)
   80c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80c8c:	636b      	str	r3, [r5, #52]	; 0x34
    }

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   80c8e:	4c42      	ldr	r4, [pc, #264]	; (80d98 <securityValidationSMC+0x164>)
   80c90:	47a0      	blx	r4
	smartcardHPulseDelay();
   80c92:	47a0      	blx	r4
   80c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c98:	636b      	str	r3, [r5, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();	
   80c9a:	47a0      	blx	r4
	smartcardHPulseDelay();
   80c9c:	47a0      	blx	r4
	
	if (reset_after_send == 1){
   80c9e:	2e01      	cmp	r6, #1
   80ca0:	d003      	beq.n	80caa <securityValidationSMC+0x76>
   80ca2:	2400      	movs	r4, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80ca4:	4d3b      	ldr	r5, [pc, #236]	; (80d94 <securityValidationSMC+0x160>)
            temp_bool = FALSE;
        }
        else
        {
            /* Clock pulse */
            clockPulseSMC();
   80ca6:	4f3d      	ldr	r7, [pc, #244]	; (80d9c <securityValidationSMC+0x168>)
   80ca8:	e050      	b.n	80d4c <securityValidationSMC+0x118>
		delay_us(10);
   80caa:	2045      	movs	r0, #69	; 0x45
   80cac:	4b3c      	ldr	r3, [pc, #240]	; (80da0 <securityValidationSMC+0x16c>)
   80cae:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cb0:	2210      	movs	r2, #16
   80cb2:	636a      	str	r2, [r5, #52]	; 0x34
		setPgmRstSignals();
   80cb4:	4b3b      	ldr	r3, [pc, #236]	; (80da4 <securityValidationSMC+0x170>)
   80cb6:	4798      	blx	r3
		setSPIModeSMC();
   80cb8:	4b3b      	ldr	r3, [pc, #236]	; (80da8 <securityValidationSMC+0x174>)
   80cba:	4798      	blx	r3
		return RETURN_PIN_NOK_0;
   80cbc:	2520      	movs	r5, #32
   80cbe:	e060      	b.n	80d82 <securityValidationSMC+0x14e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80cc0:	4c34      	ldr	r4, [pc, #208]	; (80d94 <securityValidationSMC+0x160>)
   80cc2:	2520      	movs	r5, #32
   80cc4:	6325      	str	r5, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cc6:	4e34      	ldr	r6, [pc, #208]	; (80d98 <securityValidationSMC+0x164>)
   80cc8:	47b0      	blx	r6
   80cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80cce:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cd0:	47b0      	blx	r6
   80cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80cd6:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cd8:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cda:	2310      	movs	r3, #16
   80cdc:	6363      	str	r3, [r4, #52]	; 0x34
				setPgmRstSignals();
   80cde:	4b31      	ldr	r3, [pc, #196]	; (80da4 <securityValidationSMC+0x170>)
   80ce0:	4798      	blx	r3
				setSPIModeSMC();
   80ce2:	4b31      	ldr	r3, [pc, #196]	; (80da8 <securityValidationSMC+0x174>)
   80ce4:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80ce6:	e04c      	b.n	80d82 <securityValidationSMC+0x14e>
			if (reset_after_send == 3){			
   80ce8:	2e03      	cmp	r6, #3
   80cea:	d00f      	beq.n	80d0c <securityValidationSMC+0xd8>
            performLowLevelWriteNErase(FALSE);
   80cec:	2000      	movs	r0, #0
   80cee:	4b2f      	ldr	r3, [pc, #188]	; (80dac <securityValidationSMC+0x178>)
   80cf0:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80cf2:	4b28      	ldr	r3, [pc, #160]	; (80d94 <securityValidationSMC+0x160>)
   80cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            if (scard_io_read())
   80cf6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80cfa:	d110      	bne.n	80d1e <securityValidationSMC+0xea>
                if (i == 0)
   80cfc:	b1ec      	cbz	r4, 80d3a <securityValidationSMC+0x106>
                else if (i == 1)
   80cfe:	2c01      	cmp	r4, #1
   80d00:	d01d      	beq.n	80d3e <securityValidationSMC+0x10a>
                else if (i == 2)
   80d02:	2c02      	cmp	r4, #2
   80d04:	bf0c      	ite	eq
   80d06:	2521      	moveq	r5, #33	; 0x21
   80d08:	2520      	movne	r5, #32
   80d0a:	e009      	b.n	80d20 <securityValidationSMC+0xec>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d0c:	2210      	movs	r2, #16
   80d0e:	4b21      	ldr	r3, [pc, #132]	; (80d94 <securityValidationSMC+0x160>)
   80d10:	635a      	str	r2, [r3, #52]	; 0x34
				setPgmRstSignals();
   80d12:	4b24      	ldr	r3, [pc, #144]	; (80da4 <securityValidationSMC+0x170>)
   80d14:	4798      	blx	r3
				setSPIModeSMC();
   80d16:	4b24      	ldr	r3, [pc, #144]	; (80da8 <securityValidationSMC+0x174>)
   80d18:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80d1a:	2520      	movs	r5, #32
   80d1c:	e031      	b.n	80d82 <securityValidationSMC+0x14e>
                return_val = RETURN_PIN_OK;
   80d1e:	2524      	movs	r5, #36	; 0x24
            clockPulseSMC();
   80d20:	4b1e      	ldr	r3, [pc, #120]	; (80d9c <securityValidationSMC+0x168>)
   80d22:	4798      	blx	r3
    }

    /* If we couldn't find a spot to write, no tries left */
    if (i == 4)
    {
        return_val = RETURN_PIN_NOK_0;
   80d24:	2c04      	cmp	r4, #4
   80d26:	bf08      	it	eq
   80d28:	2520      	moveq	r5, #32
   80d2a:	2210      	movs	r2, #16
   80d2c:	4b19      	ldr	r3, [pc, #100]	; (80d94 <securityValidationSMC+0x160>)
   80d2e:	635a      	str	r2, [r3, #52]	; 0x34


	scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80d30:	4b1c      	ldr	r3, [pc, #112]	; (80da4 <securityValidationSMC+0x170>)
   80d32:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80d34:	4b1c      	ldr	r3, [pc, #112]	; (80da8 <securityValidationSMC+0x174>)
   80d36:	4798      	blx	r3

    return return_val;
   80d38:	e023      	b.n	80d82 <securityValidationSMC+0x14e>
                    return_val = RETURN_PIN_NOK_3;
   80d3a:	2523      	movs	r5, #35	; 0x23
   80d3c:	e7f0      	b.n	80d20 <securityValidationSMC+0xec>
                    return_val = RETURN_PIN_NOK_2;
   80d3e:	2522      	movs	r5, #34	; 0x22
   80d40:	e7ee      	b.n	80d20 <securityValidationSMC+0xec>
            clockPulseSMC();
   80d42:	47b8      	blx	r7
            i++;
   80d44:	3401      	adds	r4, #1
   80d46:	b2a4      	uxth	r4, r4
    while((temp_bool == TRUE) && (i < 4))
   80d48:	2c04      	cmp	r4, #4
   80d4a:	d01d      	beq.n	80d88 <securityValidationSMC+0x154>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80d4c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        if (scard_io_read())
   80d4e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80d52:	d0f6      	beq.n	80d42 <securityValidationSMC+0x10e>
			if (reset_after_send == 2){			
   80d54:	2e02      	cmp	r6, #2
   80d56:	d0b3      	beq.n	80cc0 <securityValidationSMC+0x8c>
            performLowLevelWriteNErase(TRUE);
   80d58:	2001      	movs	r0, #1
   80d5a:	4b14      	ldr	r3, [pc, #80]	; (80dac <securityValidationSMC+0x178>)
   80d5c:	4798      	blx	r3
            while(scard_io_read())
   80d5e:	2320      	movs	r3, #32
   80d60:	490c      	ldr	r1, [pc, #48]	; (80d94 <securityValidationSMC+0x160>)
   80d62:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   80d64:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   80d68:	d0be      	beq.n	80ce8 <securityValidationSMC+0xb4>
   80d6a:	3b01      	subs	r3, #1
   80d6c:	b29b      	uxth	r3, r3
				if(timeout == 0)
   80d6e:	2b00      	cmp	r3, #0
   80d70:	d1f7      	bne.n	80d62 <securityValidationSMC+0x12e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d72:	2210      	movs	r2, #16
   80d74:	4b07      	ldr	r3, [pc, #28]	; (80d94 <securityValidationSMC+0x160>)
   80d76:	635a      	str	r2, [r3, #52]	; 0x34
					setPgmRstSignals();
   80d78:	4b0a      	ldr	r3, [pc, #40]	; (80da4 <securityValidationSMC+0x170>)
   80d7a:	4798      	blx	r3
					setSPIModeSMC();
   80d7c:	4b0a      	ldr	r3, [pc, #40]	; (80da8 <securityValidationSMC+0x174>)
   80d7e:	4798      	blx	r3
					return RETURN_PIN_TIMEOUT;
   80d80:	2525      	movs	r5, #37	; 0x25
}
   80d82:	4628      	mov	r0, r5
   80d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return_val = RETURN_PIN_NOK_0;
   80d88:	2520      	movs	r5, #32
   80d8a:	e7ce      	b.n	80d2a <securityValidationSMC+0xf6>
   80d8c:	00080b75 	.word	0x00080b75
   80d90:	00080a59 	.word	0x00080a59
   80d94:	400e0c00 	.word	0x400e0c00
   80d98:	00080a19 	.word	0x00080a19
   80d9c:	00080a3d 	.word	0x00080a3d
   80da0:	20000089 	.word	0x20000089
   80da4:	00080a91 	.word	0x00080a91
   80da8:	00080b05 	.word	0x00080b05
   80dac:	00080aad 	.word	0x00080aad

00080db0 <writeSMC>:
*   \param  start_index_bit         Where to start writing bits
*   \param  nb_bits                 Number of bits to write
*   \param  data_to_write           Pointer to the buffer
*/
void writeSMC(uint16_t start_index_bit, uint16_t nb_bits, uint8_t* data_to_write)
{
   80db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80db4:	4606      	mov	r6, r0
   80db6:	460f      	mov	r7, r1
   80db8:	4690      	mov	r8, r2
    uint16_t current_written_bit = 0;
    uint8_t masked_bit_to_write = 0;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80dba:	4b2a      	ldr	r3, [pc, #168]	; (80e64 <writeSMC+0xb4>)
   80dbc:	4798      	blx	r3

    /* Try to not erase AZ1 if EZ1 is 0xFFFFFFF... and we're writing the first bit of the AZ2 */
    if (start_index_bit >= SMARTCARD_AZ2_BIT_START)
   80dbe:	f5b6 7f38 	cmp.w	r6, #736	; 0x2e0
   80dc2:	d208      	bcs.n	80dd6 <writeSMC+0x26>
        }                
    }
    else
    {
        /* Get to the good index, clock pulses */
        for(i = 0; i < start_index_bit; i++)
   80dc4:	b316      	cbz	r6, 80e0c <writeSMC+0x5c>
   80dc6:	2400      	movs	r4, #0
        {
            clockPulseSMC();
   80dc8:	4d27      	ldr	r5, [pc, #156]	; (80e68 <writeSMC+0xb8>)
   80dca:	47a8      	blx	r5
        for(i = 0; i < start_index_bit; i++)
   80dcc:	3401      	adds	r4, #1
   80dce:	b2a4      	uxth	r4, r4
   80dd0:	42a6      	cmp	r6, r4
   80dd2:	d1fa      	bne.n	80dca <writeSMC+0x1a>
   80dd4:	e01a      	b.n	80e0c <writeSMC+0x5c>
   80dd6:	f240 24df 	movw	r4, #735	; 0x2df
            clockPulseSMC();            
   80dda:	4d23      	ldr	r5, [pc, #140]	; (80e68 <writeSMC+0xb8>)
   80ddc:	47a8      	blx	r5
   80dde:	3c01      	subs	r4, #1
   80de0:	b2a4      	uxth	r4, r4
        for(i = 0; i < SMARTCARD_AZ2_BIT_START - 1; i++)
   80de2:	2c00      	cmp	r4, #0
   80de4:	d1fa      	bne.n	80ddc <writeSMC+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80de6:	4c21      	ldr	r4, [pc, #132]	; (80e6c <writeSMC+0xbc>)
   80de8:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
   80dec:	6325      	str	r5, [r4, #48]	; 0x30
        clockPulseSMC();
   80dee:	4b1e      	ldr	r3, [pc, #120]	; (80e68 <writeSMC+0xb8>)
   80df0:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80df2:	6365      	str	r5, [r4, #52]	; 0x34
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80df4:	f5a6 7538 	sub.w	r5, r6, #736	; 0x2e0
   80df8:	2d00      	cmp	r5, #0
   80dfa:	dd07      	ble.n	80e0c <writeSMC+0x5c>
   80dfc:	2400      	movs	r4, #0
            clockPulseSMC();            
   80dfe:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80e68 <writeSMC+0xb8>
   80e02:	47c8      	blx	r9
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80e04:	3401      	adds	r4, #1
   80e06:	b2a4      	uxth	r4, r4
   80e08:	42ac      	cmp	r4, r5
   80e0a:	dbfa      	blt.n	80e02 <writeSMC+0x52>
        }                
    }

    /* Start writing */
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80e0c:	b327      	cbz	r7, 80e58 <writeSMC+0xa8>
   80e0e:	3f01      	subs	r7, #1
   80e10:	b2bf      	uxth	r7, r7
   80e12:	3701      	adds	r7, #1
   80e14:	2500      	movs	r5, #0
    {
        /* If we are at the start of a 16bits word or writing our first bit, erase the word */
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
        {
            performLowLevelWriteNErase(FALSE);
   80e16:	46ab      	mov	fp, r5
   80e18:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80e78 <writeSMC+0xc8>
        {
            performLowLevelWriteNErase(TRUE);
        }

        /* Go to next address */
        clockPulseSMC();
   80e1c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80e68 <writeSMC+0xb8>
   80e20:	e00f      	b.n	80e42 <writeSMC+0x92>
            performLowLevelWriteNErase(FALSE);
   80e22:	4658      	mov	r0, fp
   80e24:	47d0      	blx	sl
        masked_bit_to_write = (data_to_write[(current_written_bit>>3)] >> (7 - (current_written_bit & 0x0007))) & 0x01;
   80e26:	08e4      	lsrs	r4, r4, #3
   80e28:	f818 3004 	ldrb.w	r3, [r8, r4]
   80e2c:	43ea      	mvns	r2, r5
   80e2e:	f002 0207 	and.w	r2, r2, #7
   80e32:	4113      	asrs	r3, r2
        if (masked_bit_to_write == 0x00)
   80e34:	f013 0f01 	tst.w	r3, #1
   80e38:	d00b      	beq.n	80e52 <writeSMC+0xa2>
        clockPulseSMC();
   80e3a:	47c8      	blx	r9
   80e3c:	3501      	adds	r5, #1
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80e3e:	42bd      	cmp	r5, r7
   80e40:	d00a      	beq.n	80e58 <writeSMC+0xa8>
   80e42:	b2ac      	uxth	r4, r5
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
   80e44:	1933      	adds	r3, r6, r4
   80e46:	f013 0f0f 	tst.w	r3, #15
   80e4a:	d0ea      	beq.n	80e22 <writeSMC+0x72>
   80e4c:	2c00      	cmp	r4, #0
   80e4e:	d1ea      	bne.n	80e26 <writeSMC+0x76>
   80e50:	e7e7      	b.n	80e22 <writeSMC+0x72>
            performLowLevelWriteNErase(TRUE);
   80e52:	2001      	movs	r0, #1
   80e54:	47d0      	blx	sl
   80e56:	e7f0      	b.n	80e3a <writeSMC+0x8a>
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80e58:	4b05      	ldr	r3, [pc, #20]	; (80e70 <writeSMC+0xc0>)
   80e5a:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80e5c:	4b05      	ldr	r3, [pc, #20]	; (80e74 <writeSMC+0xc4>)
   80e5e:	4798      	blx	r3
   80e60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e64:	00080b75 	.word	0x00080b75
   80e68:	00080a3d 	.word	0x00080a3d
   80e6c:	400e0c00 	.word	0x400e0c00
   80e70:	00080a91 	.word	0x00080a91
   80e74:	00080b05 	.word	0x00080b05
   80e78:	00080aad 	.word	0x00080aad

00080e7c <readSMC>:
*   \param  start_record_index      The index at which we start recording the answer
*   \param  data_to_receive        Pointer to the buffer
*   \return The buffer
*/
uint8_t* readSMC(uint8_t nb_bytes_total_read, uint8_t start_record_index, uint8_t* data_to_receive)
{
   80e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e80:	b083      	sub	sp, #12
   80e82:	4607      	mov	r7, r0
   80e84:	468a      	mov	sl, r1
   80e86:	4693      	mov	fp, r2
    uint8_t* return_val = data_to_receive;
    uint8_t i;

    /* Set PGM / RST signals for operation */
    clearPgmRstSignals();
   80e88:	4b12      	ldr	r3, [pc, #72]	; (80ed4 <readSMC+0x58>)
   80e8a:	4798      	blx	r3
	
	/* Read */
	uint32_t temp;
    for(i = 0; i < nb_bytes_total_read; i++)
   80e8c:	b1df      	cbz	r7, 80ec6 <readSMC+0x4a>
   80e8e:	465e      	mov	r6, fp
   80e90:	2500      	movs	r5, #0
    {
        /* Start transmission */
		usart_putchar(SCARD_USART, 0x00);
   80e92:	4c11      	ldr	r4, [pc, #68]	; (80ed8 <readSMC+0x5c>)
   80e94:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80ee0 <readSMC+0x64>
        /* Store data in buffer or discard it*/
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
				
		usart_getchar(SCARD_USART, &temp);
   80e98:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80ee4 <readSMC+0x68>
   80e9c:	e003      	b.n	80ea6 <readSMC+0x2a>
    for(i = 0; i < nb_bytes_total_read; i++)
   80e9e:	3501      	adds	r5, #1
   80ea0:	b2ed      	uxtb	r5, r5
   80ea2:	42af      	cmp	r7, r5
   80ea4:	d00f      	beq.n	80ec6 <readSMC+0x4a>
		usart_putchar(SCARD_USART, 0x00);
   80ea6:	2100      	movs	r1, #0
   80ea8:	4620      	mov	r0, r4
   80eaa:	47c8      	blx	r9
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
   80eac:	6963      	ldr	r3, [r4, #20]
   80eae:	f013 0f02 	tst.w	r3, #2
   80eb2:	d0fb      	beq.n	80eac <readSMC+0x30>
		usart_getchar(SCARD_USART, &temp);
   80eb4:	a901      	add	r1, sp, #4
   80eb6:	4620      	mov	r0, r4
   80eb8:	47c0      	blx	r8
		
        if (i >= start_record_index)
   80eba:	45aa      	cmp	sl, r5
   80ebc:	d8ef      	bhi.n	80e9e <readSMC+0x22>
        {			
			*(data_to_receive++) = (uint8_t)temp;
   80ebe:	9b01      	ldr	r3, [sp, #4]
   80ec0:	7033      	strb	r3, [r6, #0]
   80ec2:	3601      	adds	r6, #1
   80ec4:	e7eb      	b.n	80e9e <readSMC+0x22>
        }
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80ec6:	4b05      	ldr	r3, [pc, #20]	; (80edc <readSMC+0x60>)
   80ec8:	4798      	blx	r3

    return return_val;
}
   80eca:	4658      	mov	r0, fp
   80ecc:	b003      	add	sp, #12
   80ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ed2:	bf00      	nop
   80ed4:	00080a75 	.word	0x00080a75
   80ed8:	40098000 	.word	0x40098000
   80edc:	00080a91 	.word	0x00080a91
   80ee0:	00086ffd 	.word	0x00086ffd
   80ee4:	00087027 	.word	0x00087027

00080ee8 <firstDetectFunctionSMC>:
/*! \fn     firstDetectFunctionSMC(void)
*   \brief  functions performed once the smart card is detected
*   \return The detection result (see card_detect_return_t)
*/
RET_TYPE firstDetectFunctionSMC(void)
{
   80ee8:	b510      	push	{r4, lr}
   80eea:	b082      	sub	sp, #8
    uint8_t data_buffer[2];
    uint16_t *data_buf16 = (uint16_t*)data_buffer;
    uint16_t temp_uint;

	/* Fuse pin low */
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80eec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ef0:	2004      	movs	r0, #4
   80ef2:	4c27      	ldr	r4, [pc, #156]	; (80f90 <firstDetectFunctionSMC+0xa8>)
   80ef4:	47a0      	blx	r4

    /* Default state: PGM to 0 and RST to 1 */
	gpio_configure_pin(SCARD_PGM_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ef6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80efa:	2005      	movs	r0, #5
   80efc:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   80efe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f02:	2003      	movs	r0, #3
   80f04:	47a0      	blx	r4
   80f06:	4b23      	ldr	r3, [pc, #140]	; (80f94 <firstDetectFunctionSMC+0xac>)
   80f08:	2220      	movs	r2, #32
   80f0a:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80f0c:	2208      	movs	r2, #8
   80f0e:	631a      	str	r2, [r3, #48]	; 0x30
    scard_pgm_low();
	scard_rst_high();

    /* Activate SPI port */
    setSPIModeSMC();
   80f10:	4b21      	ldr	r3, [pc, #132]	; (80f98 <firstDetectFunctionSMC+0xb0>)
   80f12:	4798      	blx	r3
    
    /* Let the card come online */
    smartcardPowerDelay();
   80f14:	4b21      	ldr	r3, [pc, #132]	; (80f9c <firstDetectFunctionSMC+0xb4>)
   80f16:	4798      	blx	r3

    /* Check smart card FZ */
    readFabricationZone(data_buffer);
   80f18:	a801      	add	r0, sp, #4
   80f1a:	4b21      	ldr	r3, [pc, #132]	; (80fa0 <firstDetectFunctionSMC+0xb8>)
   80f1c:	4798      	blx	r3
    if ((swap16(*data_buf16)) != SMARTCARD_FABRICATION_ZONE)
   80f1e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   80f22:	0213      	lsls	r3, r2, #8
   80f24:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80f28:	b21b      	sxth	r3, r3
   80f2a:	f640 720f 	movw	r2, #3855	; 0xf0f
   80f2e:	4293      	cmp	r3, r2
   80f30:	d002      	beq.n	80f38 <firstDetectFunctionSMC+0x50>
    {
        return RETURN_CARD_NDET;
   80f32:	2001      	movs	r0, #1
        case 2: return RETURN_CARD_2_TRIES_LEFT;
        case 1: return RETURN_CARD_1_TRIES_LEFT;
        case 0: return RETURN_CARD_0_TRIES_LEFT;
        default: return RETURN_CARD_0_TRIES_LEFT;
    }
}
   80f34:	b002      	add	sp, #8
   80f36:	bd10      	pop	{r4, pc}
    readMemoryTestZone((uint8_t*)&temp_uint);
   80f38:	f10d 0002 	add.w	r0, sp, #2
   80f3c:	4c19      	ldr	r4, [pc, #100]	; (80fa4 <firstDetectFunctionSMC+0xbc>)
   80f3e:	47a0      	blx	r4
    temp_uint = temp_uint + 5;
   80f40:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f44:	3305      	adds	r3, #5
   80f46:	f8ad 3002 	strh.w	r3, [sp, #2]
    writeMemoryTestZone((uint8_t*)&temp_uint);
   80f4a:	f10d 0002 	add.w	r0, sp, #2
   80f4e:	4b16      	ldr	r3, [pc, #88]	; (80fa8 <firstDetectFunctionSMC+0xc0>)
   80f50:	4798      	blx	r3
    if (*(uint16_t*)readMemoryTestZone(data_buffer) != temp_uint)
   80f52:	a801      	add	r0, sp, #4
   80f54:	47a0      	blx	r4
   80f56:	8802      	ldrh	r2, [r0, #0]
   80f58:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f5c:	429a      	cmp	r2, r3
        return RETURN_CARD_TEST_PB;
   80f5e:	bf18      	it	ne
   80f60:	2002      	movne	r0, #2
    if (*(uint16_t*)readMemoryTestZone(data_buffer) != temp_uint)
   80f62:	d1e7      	bne.n	80f34 <firstDetectFunctionSMC+0x4c>
    switch(getNumberOfSecurityCodeTriesLeft())
   80f64:	4b11      	ldr	r3, [pc, #68]	; (80fac <firstDetectFunctionSMC+0xc4>)
   80f66:	4798      	blx	r3
   80f68:	2804      	cmp	r0, #4
   80f6a:	d80c      	bhi.n	80f86 <firstDetectFunctionSMC+0x9e>
   80f6c:	e8df f000 	tbb	[pc, r0]
   80f70:	03050709 	.word	0x03050709
   80f74:	0d          	.byte	0x0d
   80f75:	00          	.byte	0x00
        case 3: return RETURN_CARD_3_TRIES_LEFT;
   80f76:	2013      	movs	r0, #19
   80f78:	e7dc      	b.n	80f34 <firstDetectFunctionSMC+0x4c>
        case 2: return RETURN_CARD_2_TRIES_LEFT;
   80f7a:	2012      	movs	r0, #18
   80f7c:	e7da      	b.n	80f34 <firstDetectFunctionSMC+0x4c>
        case 1: return RETURN_CARD_1_TRIES_LEFT;
   80f7e:	2011      	movs	r0, #17
   80f80:	e7d8      	b.n	80f34 <firstDetectFunctionSMC+0x4c>
        case 0: return RETURN_CARD_0_TRIES_LEFT;
   80f82:	2010      	movs	r0, #16
   80f84:	e7d6      	b.n	80f34 <firstDetectFunctionSMC+0x4c>
        default: return RETURN_CARD_0_TRIES_LEFT;
   80f86:	2010      	movs	r0, #16
   80f88:	e7d4      	b.n	80f34 <firstDetectFunctionSMC+0x4c>
        case 4: return RETURN_CARD_4_TRIES_LEFT;
   80f8a:	2014      	movs	r0, #20
   80f8c:	e7d2      	b.n	80f34 <firstDetectFunctionSMC+0x4c>
   80f8e:	bf00      	nop
   80f90:	00085081 	.word	0x00085081
   80f94:	400e0c00 	.word	0x400e0c00
   80f98:	00080b05 	.word	0x00080b05
   80f9c:	00080a29 	.word	0x00080a29
   80fa0:	000807b9 	.word	0x000807b9
   80fa4:	000807fd 	.word	0x000807fd
   80fa8:	00080815 	.word	0x00080815
   80fac:	000809e9 	.word	0x000809e9

00080fb0 <removeFunctionSMC>:

/*! \fn     removeFunctionSMC(void)
*   \brief  functions performed once the smart card is removed
*/
void removeFunctionSMC(void)
{
   80fb0:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80fb2:	2220      	movs	r2, #32
   80fb4:	4b11      	ldr	r3, [pc, #68]	; (80ffc <removeFunctionSMC+0x4c>)
   80fb6:	635a      	str	r2, [r3, #52]	; 0x34
    /* Setup all output pins as tri-state */
    scard_pgm_low();
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fb8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fbc:	2004      	movs	r0, #4
   80fbe:	4c10      	ldr	r4, [pc, #64]	; (81000 <removeFunctionSMC+0x50>)
   80fc0:	47a0      	blx	r4
	gpio_configure_pin(SCARD_AUX2_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fc2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fc6:	2005      	movs	r0, #5
   80fc8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fce:	2003      	movs	r0, #3
   80fd0:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fd2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fd6:	2016      	movs	r0, #22
   80fd8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fda:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fde:	2017      	movs	r0, #23
   80fe0:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fe2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fe6:	2019      	movs	r0, #25
   80fe8:	47a0      	blx	r4
	
    /* Deactivate port */
	usart_disable_rx(SCARD_USART);
   80fea:	4c06      	ldr	r4, [pc, #24]	; (81004 <removeFunctionSMC+0x54>)
   80fec:	4620      	mov	r0, r4
   80fee:	4b06      	ldr	r3, [pc, #24]	; (81008 <removeFunctionSMC+0x58>)
   80ff0:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80ff2:	4620      	mov	r0, r4
   80ff4:	4b05      	ldr	r3, [pc, #20]	; (8100c <removeFunctionSMC+0x5c>)
   80ff6:	4798      	blx	r3
   80ff8:	bd10      	pop	{r4, pc}
   80ffa:	bf00      	nop
   80ffc:	400e0c00 	.word	0x400e0c00
   81000:	00085081 	.word	0x00085081
   81004:	40098000 	.word	0x40098000
   81008:	00086fb3 	.word	0x00086fb3
   8100c:	00086fa3 	.word	0x00086fa3

00081010 <initPortSMC>:

/*! \fn     initPortSMC(void)
*   \brief  Initialize smart card port
*/
void initPortSMC(void)
{
   81010:	b508      	push	{r3, lr}
    /* Setup card detection input with pull-up */
	gpio_configure_pin(SCARD_PRESENT_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT | PIO_PULLUP));
   81012:	4904      	ldr	r1, [pc, #16]	; (81024 <initPortSMC+0x14>)
   81014:	2002      	movs	r0, #2
   81016:	4b04      	ldr	r3, [pc, #16]	; (81028 <initPortSMC+0x18>)
   81018:	4798      	blx	r3
        PORT_SPI_NATIVE &= ~(1 << MISO_SPI_NATIVE);
        PORT_SPI_NATIVE |= (1 << SS_SPI_NATIVE);
    #endif

    /* Set all output pins as tri-state */
    removeFunctionSMC();
   8101a:	4b04      	ldr	r3, [pc, #16]	; (8102c <initPortSMC+0x1c>)
   8101c:	4798      	blx	r3
	setPgmRstSignals();
   8101e:	4b04      	ldr	r3, [pc, #16]	; (81030 <initPortSMC+0x20>)
   81020:	4798      	blx	r3
   81022:	bd08      	pop	{r3, pc}
   81024:	28000001 	.word	0x28000001
   81028:	00085081 	.word	0x00085081
   8102c:	00080fb1 	.word	0x00080fb1
   81030:	00080a91 	.word	0x00080a91

00081034 <compareBit>:


// Greg's function
// Walk up to the security code register, enter a bit in the right place, then reset.
void compareBit(uint16_t bit, uint16_t value)
{
   81034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81036:	4605      	mov	r5, r0
   81038:	460f      	mov	r7, r1
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   8103a:	4b18      	ldr	r3, [pc, #96]	; (8109c <compareBit+0x68>)
   8103c:	4798      	blx	r3

    /* Get to the SC */
    for(i = 0; i < 80 + bit; i++)
   8103e:	3550      	adds	r5, #80	; 0x50
   81040:	2400      	movs	r4, #0
		invertedClockPulseSMC();
   81042:	4e17      	ldr	r6, [pc, #92]	; (810a0 <compareBit+0x6c>)
   81044:	47b0      	blx	r6
    for(i = 0; i < 80 + bit; i++)
   81046:	3401      	adds	r4, #1
   81048:	b2a4      	uxth	r4, r4
   8104a:	42ac      	cmp	r4, r5
   8104c:	dbfa      	blt.n	81044 <compareBit+0x10>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8104e:	2210      	movs	r2, #16
   81050:	4b14      	ldr	r3, [pc, #80]	; (810a4 <compareBit+0x70>)
   81052:	631a      	str	r2, [r3, #48]	; 0x30

    scard_aux1_high();

    // Clock is at high level now, as input must be switched during this time */
    // Enter test value
    smartcardHPulseDelay();
   81054:	4b14      	ldr	r3, [pc, #80]	; (810a8 <compareBit+0x74>)
   81056:	4798      	blx	r3
	if (value)
   81058:	b9df      	cbnz	r7, 81092 <compareBit+0x5e>
   8105a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8105e:	4b11      	ldr	r3, [pc, #68]	; (810a4 <compareBit+0x70>)
   81060:	631a      	str	r2, [r3, #48]	; 0x30
    }
    else
    {
	    scard_io_high();
    }
    smartcardHPulseDelay();
   81062:	4c11      	ldr	r4, [pc, #68]	; (810a8 <compareBit+0x74>)
   81064:	47a0      	blx	r4
    invertedClockPulseSMC();
   81066:	4b0e      	ldr	r3, [pc, #56]	; (810a0 <compareBit+0x6c>)
   81068:	4798      	blx	r3
   8106a:	4d0e      	ldr	r5, [pc, #56]	; (810a4 <compareBit+0x70>)
   8106c:	2308      	movs	r3, #8
   8106e:	632b      	str	r3, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   81074:	636b      	str	r3, [r5, #52]	; 0x34
	// Bring reset high
	scard_rst_high();

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   81076:	47a0      	blx	r4
    smartcardHPulseDelay();
   81078:	47a0      	blx	r4
   8107a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   8107e:	636b      	str	r3, [r5, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();
   81080:	47a0      	blx	r4
    smartcardHPulseDelay();
   81082:	47a0      	blx	r4
   81084:	2310      	movs	r3, #16
   81086:	636b      	str	r3, [r5, #52]	; 0x34
    
	// Cleanup
    scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   81088:	4b08      	ldr	r3, [pc, #32]	; (810ac <compareBit+0x78>)
   8108a:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   8108c:	4b08      	ldr	r3, [pc, #32]	; (810b0 <compareBit+0x7c>)
   8108e:	4798      	blx	r3
   81090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81092:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81096:	4b03      	ldr	r3, [pc, #12]	; (810a4 <compareBit+0x70>)
   81098:	635a      	str	r2, [r3, #52]	; 0x34
   8109a:	e7e2      	b.n	81062 <compareBit+0x2e>
   8109c:	00080b75 	.word	0x00080b75
   810a0:	00080a59 	.word	0x00080a59
   810a4:	400e0c00 	.word	0x400e0c00
   810a8:	00080a19 	.word	0x00080a19
   810ac:	00080a91 	.word	0x00080a91
   810b0:	00080b05 	.word	0x00080b05

000810b4 <iso7816_update_crc>:
 * \param crc CRC result.
 *
 * \return CRC value.
 */
static uint16_t iso7816_update_crc(uint8_t data, uint16_t crc)
{
   810b4:	b410      	push	{r4}
	uint8_t idx;
	uint16_t tmp = (uint16_t)data << 8;
   810b6:	0200      	lsls	r0, r0, #8
   810b8:	2308      	movs	r3, #8

	for (idx = 0; idx < 8; idx++) {
		if ((crc ^ tmp) & 0x8000) {
			crc <<= 1;
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   810ba:	f241 0421 	movw	r4, #4129	; 0x1021
		if ((crc ^ tmp) & 0x8000) {
   810be:	ea81 0200 	eor.w	r2, r1, r0
   810c2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
			crc <<= 1;
   810c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
   810ca:	b289      	uxth	r1, r1
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   810cc:	bf18      	it	ne
   810ce:	4061      	eorne	r1, r4
		} else {
			crc <<= 1;
		}

		tmp <<= 1;
   810d0:	0040      	lsls	r0, r0, #1
   810d2:	b280      	uxth	r0, r0
   810d4:	3b01      	subs	r3, #1
	for (idx = 0; idx < 8; idx++) {
   810d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   810da:	d1f0      	bne.n	810be <iso7816_update_crc+0xa>
	}

	return crc;
}
   810dc:	4608      	mov	r0, r1
   810de:	bc10      	pop	{r4}
   810e0:	4770      	bx	lr
	...

000810e4 <iso7816_icc_power_off>:
{
   810e4:	b508      	push	{r3, lr}
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   810e6:	4b02      	ldr	r3, [pc, #8]	; (810f0 <iso7816_icc_power_off+0xc>)
   810e8:	6818      	ldr	r0, [r3, #0]
   810ea:	4b02      	ldr	r3, [pc, #8]	; (810f4 <iso7816_icc_power_off+0x10>)
   810ec:	4798      	blx	r3
   810ee:	bd08      	pop	{r3, pc}
   810f0:	200023ec 	.word	0x200023ec
   810f4:	00085065 	.word	0x00085065

000810f8 <iso7816_get_char>:
 * \param p_char_received Pointer for store the received char.
 *
 * \return 0xff: if timeout else status of US_CSR.
 */
uint32_t iso7816_get_char(Usart* p_usart, uint8_t *p_char_received)
{
   810f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   810fc:	b083      	sub	sp, #12
   810fe:	4605      	mov	r5, r0
   81100:	4689      	mov	r9, r1
	uint32_t ul_data;
	uint32_t ul_status;
	uint32_t ul_timeout = 0;

	if (gs_uc_state == USART_SEND) {		
   81102:	4b1d      	ldr	r3, [pc, #116]	; (81178 <iso7816_get_char+0x80>)
   81104:	781b      	ldrb	r3, [r3, #0]
   81106:	b943      	cbnz	r3, 8111a <iso7816_get_char+0x22>
		while ((usart_get_status(p_usart) & US_CSR_TXEMPTY) ==
   81108:	4c1c      	ldr	r4, [pc, #112]	; (8117c <iso7816_get_char+0x84>)
   8110a:	4628      	mov	r0, r5
   8110c:	47a0      	blx	r4
   8110e:	f410 7f00 	tst.w	r0, #512	; 0x200
   81112:	d0fa      	beq.n	8110a <iso7816_get_char+0x12>
		/*
		usart_reset_status(p_usart);
		usart_reset_iterations(p_usart);
		usart_reset_nack(p_usart);
		*/
		gs_uc_state = USART_RCV;
   81114:	2201      	movs	r2, #1
   81116:	4b18      	ldr	r3, [pc, #96]	; (81178 <iso7816_get_char+0x80>)
   81118:	701a      	strb	r2, [r3, #0]
{
   8111a:	2400      	movs	r4, #0
		//iso7816_icc_power_off();
		//iso7816_icc_power_on();	
	}

	/* Wait USART ready for reception. */
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   8111c:	4e17      	ldr	r6, [pc, #92]	; (8117c <iso7816_get_char+0x84>)
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   8111e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8118c <iso7816_get_char+0x94>
   81122:	4f17      	ldr	r7, [pc, #92]	; (81180 <iso7816_get_char+0x88>)
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   81124:	4628      	mov	r0, r5
   81126:	47b0      	blx	r6
   81128:	f010 0f01 	tst.w	r0, #1
   8112c:	d10d      	bne.n	8114a <iso7816_get_char+0x52>
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   8112e:	1c61      	adds	r1, r4, #1
   81130:	f8d8 3000 	ldr.w	r3, [r8]
   81134:	fba7 2303 	umull	r2, r3, r7, r3
   81138:	0c9b      	lsrs	r3, r3, #18
   8113a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
   8113e:	fb02 f303 	mul.w	r3, r2, r3
   81142:	429c      	cmp	r4, r3
   81144:	d813      	bhi.n	8116e <iso7816_get_char+0x76>
   81146:	460c      	mov	r4, r1
   81148:	e7ec      	b.n	81124 <iso7816_get_char+0x2c>
		}
	}

	/* At least one complete character has been received and US_RHR has not
	 * yet been read. */
	usart_read(p_usart, &ul_data);
   8114a:	a901      	add	r1, sp, #4
   8114c:	4628      	mov	r0, r5
   8114e:	4b0d      	ldr	r3, [pc, #52]	; (81184 <iso7816_get_char+0x8c>)
   81150:	4798      	blx	r3
	/* ISO7816 only has 8 bits data. */
	*p_char_received = 0xFF & ul_data;
   81152:	9b01      	ldr	r3, [sp, #4]
   81154:	f889 3000 	strb.w	r3, [r9]

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   81158:	4628      	mov	r0, r5
   8115a:	4b08      	ldr	r3, [pc, #32]	; (8117c <iso7816_get_char+0x84>)
   8115c:	4798      	blx	r3
   8115e:	f242 54e0 	movw	r4, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   81162:	4004      	ands	r4, r0
   81164:	d004      	beq.n	81170 <iso7816_get_char+0x78>
		usart_reset_status(p_usart);
   81166:	4628      	mov	r0, r5
   81168:	4b07      	ldr	r3, [pc, #28]	; (81188 <iso7816_get_char+0x90>)
   8116a:	4798      	blx	r3
   8116c:	e000      	b.n	81170 <iso7816_get_char+0x78>
			return (0xff);
   8116e:	24ff      	movs	r4, #255	; 0xff
	}

	/* Return status. */
	return (ul_status);
}
   81170:	4620      	mov	r0, r4
   81172:	b003      	add	sp, #12
   81174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81178:	200002f0 	.word	0x200002f0
   8117c:	00086fc5 	.word	0x00086fc5
   81180:	431bde83 	.word	0x431bde83
   81184:	0008700f 	.word	0x0008700f
   81188:	00086fc9 	.word	0x00086fc9
   8118c:	200023e8 	.word	0x200023e8

00081190 <iso7816_send_char>:
 * \param uc_char Char to be sent.
 *
 * \return status of US_CSR.
 */
uint32_t iso7816_send_char(Usart* p_usart, uint8_t uc_char)
{
   81190:	b570      	push	{r4, r5, r6, lr}
   81192:	4604      	mov	r4, r0
   81194:	460e      	mov	r6, r1
	uint32_t ul_status;

	if (USART_RCV == gs_uc_state) {
   81196:	4b14      	ldr	r3, [pc, #80]	; (811e8 <iso7816_send_char+0x58>)
   81198:	781b      	ldrb	r3, [r3, #0]
   8119a:	2b01      	cmp	r3, #1
   8119c:	d013      	beq.n	811c6 <iso7816_send_char+0x36>
		usart_reset_nack(p_usart);
		gs_uc_state = USART_SEND;
	}

	/* Wait USART ready for transmit. */
	while ((usart_get_status(p_usart) & US_CSR_TXRDY) == 0) {
   8119e:	4d13      	ldr	r5, [pc, #76]	; (811ec <iso7816_send_char+0x5c>)
   811a0:	4620      	mov	r0, r4
   811a2:	47a8      	blx	r5
   811a4:	f010 0f02 	tst.w	r0, #2
   811a8:	d0fa      	beq.n	811a0 <iso7816_send_char+0x10>
	}

	/* There is no character in the US_THR, transmit a char. */
	usart_write(p_usart, uc_char);
   811aa:	4631      	mov	r1, r6
   811ac:	4620      	mov	r0, r4
   811ae:	4b10      	ldr	r3, [pc, #64]	; (811f0 <iso7816_send_char+0x60>)
   811b0:	4798      	blx	r3

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   811b2:	4620      	mov	r0, r4
   811b4:	4b0d      	ldr	r3, [pc, #52]	; (811ec <iso7816_send_char+0x5c>)
   811b6:	4798      	blx	r3
   811b8:	f242 53e0 	movw	r3, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   811bc:	ea10 0503 	ands.w	r5, r0, r3
   811c0:	d10d      	bne.n	811de <iso7816_send_char+0x4e>
		usart_reset_status(p_usart);
	}

	/* Return status. */
	return (ul_status);
}
   811c2:	4628      	mov	r0, r5
   811c4:	bd70      	pop	{r4, r5, r6, pc}
		usart_reset_status(p_usart);
   811c6:	4b0b      	ldr	r3, [pc, #44]	; (811f4 <iso7816_send_char+0x64>)
   811c8:	4798      	blx	r3
		usart_reset_iterations(p_usart);
   811ca:	4620      	mov	r0, r4
   811cc:	4b0a      	ldr	r3, [pc, #40]	; (811f8 <iso7816_send_char+0x68>)
   811ce:	4798      	blx	r3
		usart_reset_nack(p_usart);
   811d0:	4620      	mov	r0, r4
   811d2:	4b0a      	ldr	r3, [pc, #40]	; (811fc <iso7816_send_char+0x6c>)
   811d4:	4798      	blx	r3
		gs_uc_state = USART_SEND;
   811d6:	2200      	movs	r2, #0
   811d8:	4b03      	ldr	r3, [pc, #12]	; (811e8 <iso7816_send_char+0x58>)
   811da:	701a      	strb	r2, [r3, #0]
   811dc:	e7df      	b.n	8119e <iso7816_send_char+0xe>
		usart_reset_status(p_usart);
   811de:	4620      	mov	r0, r4
   811e0:	4b04      	ldr	r3, [pc, #16]	; (811f4 <iso7816_send_char+0x64>)
   811e2:	4798      	blx	r3
	return (ul_status);
   811e4:	e7ed      	b.n	811c2 <iso7816_send_char+0x32>
   811e6:	bf00      	nop
   811e8:	200002f0 	.word	0x200002f0
   811ec:	00086fc5 	.word	0x00086fc5
   811f0:	00086fe9 	.word	0x00086fe9
   811f4:	00086fc9 	.word	0x00086fc9
   811f8:	00086fd1 	.word	0x00086fd1
   811fc:	00086fd9 	.word	0x00086fd9

00081200 <iso7816_xfr_block_apdu_t0>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t0(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   81200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81204:	b087      	sub	sp, #28
   81206:	4607      	mov	r7, r0
   81208:	9001      	str	r0, [sp, #4]
   8120a:	4689      	mov	r9, r1
   8120c:	4692      	mov	sl, r2
   8120e:	461c      	mov	r4, r3
	uint8_t uc_proc_byte;
	uint8_t uc_cmd_case;
	
	uint32_t status = 0;

	status |= iso7816_send_char(p_usart, p_apdu[0]); /* CLA */
   81210:	7809      	ldrb	r1, [r1, #0]
   81212:	4e6e      	ldr	r6, [pc, #440]	; (813cc <iso7816_xfr_block_apdu_t0+0x1cc>)
   81214:	47b0      	blx	r6
   81216:	4605      	mov	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[1]); /* INS */	
   81218:	f899 1001 	ldrb.w	r1, [r9, #1]
   8121c:	4638      	mov	r0, r7
   8121e:	47b0      	blx	r6
   81220:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[2]); /* P1 */
   81222:	f899 1002 	ldrb.w	r1, [r9, #2]
   81226:	4638      	mov	r0, r7
   81228:	47b0      	blx	r6
   8122a:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[3]); /* P2 */
   8122c:	f899 1003 	ldrb.w	r1, [r9, #3]
   81230:	4638      	mov	r0, r7
   81232:	47b0      	blx	r6
   81234:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[4]); /* P3 */
   81236:	f899 1004 	ldrb.w	r1, [r9, #4]
   8123a:	4638      	mov	r0, r7
   8123c:	47b0      	blx	r6
   8123e:	4305      	orrs	r5, r0

	/* Handle the four structures of command APDU. */
	us_apdu_index = 5;

	/* Check transfer cases */
	if (us_length == 4) {
   81240:	2c04      	cmp	r4, #4
   81242:	d02c      	beq.n	8129e <iso7816_xfr_block_apdu_t0+0x9e>
		uc_cmd_case = CASE1;
		us_ne_nc = 0;
	} else if (us_length == 5) {
   81244:	2c05      	cmp	r4, #5
   81246:	d010      	beq.n	8126a <iso7816_xfr_block_apdu_t0+0x6a>
		uc_cmd_case = CASE2;
		us_ne_nc = p_apdu[4];
		if (us_ne_nc == 0) {
			us_ne_nc = 256;
		}
	} else if (us_length == 6) {
   81248:	2c06      	cmp	r4, #6
   8124a:	d016      	beq.n	8127a <iso7816_xfr_block_apdu_t0+0x7a>
		us_ne_nc = p_apdu[4];
		uc_cmd_case = CASE3;
	} else if (us_length == 7) {
   8124c:	2c07      	cmp	r4, #7
   8124e:	d019      	beq.n	81284 <iso7816_xfr_block_apdu_t0+0x84>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
		} else {
			uc_cmd_case = CASE3;
		}
	} else {
		us_ne_nc = p_apdu[4];
   81250:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81254:	bb94      	cbnz	r4, 812bc <iso7816_xfr_block_apdu_t0+0xbc>
			uc_cmd_case = CASE3;
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81256:	f899 3005 	ldrb.w	r3, [r9, #5]
   8125a:	f899 4006 	ldrb.w	r4, [r9, #6]
   8125e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   81262:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE3;
   81264:	f04f 0803 	mov.w	r8, #3
   81268:	e01c      	b.n	812a4 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   8126a:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   8126e:	b9fc      	cbnz	r4, 812b0 <iso7816_xfr_block_apdu_t0+0xb0>
		uc_cmd_case = CASE2;
   81270:	f04f 0802 	mov.w	r8, #2
			us_ne_nc = 256;
   81274:	f44f 7480 	mov.w	r4, #256	; 0x100
   81278:	e014      	b.n	812a4 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   8127a:	f899 4004 	ldrb.w	r4, [r9, #4]
		uc_cmd_case = CASE3;
   8127e:	f04f 0803 	mov.w	r8, #3
   81282:	e00f      	b.n	812a4 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81284:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81288:	b9ac      	cbnz	r4, 812b6 <iso7816_xfr_block_apdu_t0+0xb6>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   8128a:	f899 3005 	ldrb.w	r3, [r9, #5]
   8128e:	f899 4006 	ldrb.w	r4, [r9, #6]
   81292:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   81296:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE2;
   81298:	f04f 0802 	mov.w	r8, #2
   8129c:	e002      	b.n	812a4 <iso7816_xfr_block_apdu_t0+0xa4>
		uc_cmd_case = CASE1;
   8129e:	f04f 0801 	mov.w	r8, #1
		us_ne_nc = 0;
   812a2:	2400      	movs	r4, #0
		uc_cmd_case = CASE2;
   812a4:	2300      	movs	r3, #0
   812a6:	9302      	str	r3, [sp, #8]
   812a8:	9303      	str	r3, [sp, #12]
   812aa:	2705      	movs	r7, #5
		}
	}

	/* Handle procedure bytes. */
	do {
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   812ac:	4e48      	ldr	r6, [pc, #288]	; (813d0 <iso7816_xfr_block_apdu_t0+0x1d0>)
   812ae:	e056      	b.n	8135e <iso7816_xfr_block_apdu_t0+0x15e>
		uc_cmd_case = CASE2;
   812b0:	f04f 0802 	mov.w	r8, #2
   812b4:	e7f6      	b.n	812a4 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   812b6:	f04f 0803 	mov.w	r8, #3
   812ba:	e7f3      	b.n	812a4 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   812bc:	f04f 0803 	mov.w	r8, #3
   812c0:	e7f0      	b.n	812a4 <iso7816_xfr_block_apdu_t0+0xa4>
				((uc_proc_byte & 0xF0) == 0x90)) {
			uc_sw1 = 1;
		}
		/* Handle INS. */
		else if (p_apdu[1] == uc_proc_byte) {
			if (uc_cmd_case == CASE2) {
   812c2:	f1b8 0f02 	cmp.w	r8, #2
   812c6:	d026      	beq.n	81316 <iso7816_xfr_block_apdu_t0+0x116>
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
				} while (0 != --us_ne_nc);
			} else {
				/* Send data. */
				do {
					status |= iso7816_send_char(p_usart,
   812c8:	f8df b100 	ldr.w	fp, [pc, #256]	; 813cc <iso7816_xfr_block_apdu_t0+0x1cc>
							p_apdu[us_apdu_index++]);
   812cc:	1c7e      	adds	r6, r7, #1
   812ce:	b2b6      	uxth	r6, r6
					status |= iso7816_send_char(p_usart,
   812d0:	f819 1007 	ldrb.w	r1, [r9, r7]
   812d4:	9801      	ldr	r0, [sp, #4]
   812d6:	47d8      	blx	fp
   812d8:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   812da:	3c01      	subs	r4, #1
   812dc:	b2a4      	uxth	r4, r4
							p_apdu[us_apdu_index++]);
   812de:	4637      	mov	r7, r6
				} while (0 != --us_ne_nc);
   812e0:	2c00      	cmp	r4, #0
   812e2:	d1f3      	bne.n	812cc <iso7816_xfr_block_apdu_t0+0xcc>
			break;
		}
	} while (us_ne_nc != 0);

	/* Status Bytes. */
	if (uc_sw1 == 0) {
   812e4:	9b02      	ldr	r3, [sp, #8]
   812e6:	2b00      	cmp	r3, #0
   812e8:	d065      	beq.n	813b6 <iso7816_xfr_block_apdu_t0+0x1b6>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
	} else {
		p_message[us_message_index++] = uc_proc_byte;
   812ea:	9a03      	ldr	r2, [sp, #12]
   812ec:	1c54      	adds	r4, r2, #1
   812ee:	b2a4      	uxth	r4, r4
   812f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   812f4:	f80a 3002 	strb.w	r3, [sl, r2]
	}

	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   812f8:	eb0a 0104 	add.w	r1, sl, r4
   812fc:	9801      	ldr	r0, [sp, #4]
   812fe:	4b34      	ldr	r3, [pc, #208]	; (813d0 <iso7816_xfr_block_apdu_t0+0x1d0>)
   81300:	4798      	blx	r3
	
	printf("%x\n", (unsigned int)status);
   81302:	ea45 0100 	orr.w	r1, r5, r0
   81306:	4833      	ldr	r0, [pc, #204]	; (813d4 <iso7816_xfr_block_apdu_t0+0x1d4>)
   81308:	4b33      	ldr	r3, [pc, #204]	; (813d8 <iso7816_xfr_block_apdu_t0+0x1d8>)
   8130a:	4798      	blx	r3
	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   8130c:	1c60      	adds	r0, r4, #1

	return (us_message_index);
   8130e:	b280      	uxth	r0, r0
}
   81310:	b007      	add	sp, #28
   81312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81316:	9903      	ldr	r1, [sp, #12]
   81318:	4626      	mov	r6, r4
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8131a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 813d0 <iso7816_xfr_block_apdu_t0+0x1d0>
   8131e:	1c4f      	adds	r7, r1, #1
   81320:	b2bf      	uxth	r7, r7
   81322:	4451      	add	r1, sl
   81324:	9801      	ldr	r0, [sp, #4]
   81326:	47c8      	blx	r9
   81328:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   8132a:	3e01      	subs	r6, #1
   8132c:	b2b6      	uxth	r6, r6
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8132e:	4639      	mov	r1, r7
				} while (0 != --us_ne_nc);
   81330:	2e00      	cmp	r6, #0
   81332:	d1f4      	bne.n	8131e <iso7816_xfr_block_apdu_t0+0x11e>
   81334:	9b03      	ldr	r3, [sp, #12]
   81336:	441c      	add	r4, r3
   81338:	b2a3      	uxth	r3, r4
   8133a:	9303      	str	r3, [sp, #12]
   8133c:	e7d2      	b.n	812e4 <iso7816_xfr_block_apdu_t0+0xe4>
				status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8133e:	9a03      	ldr	r2, [sp, #12]
   81340:	f102 0b01 	add.w	fp, r2, #1
   81344:	fa1f fb8b 	uxth.w	fp, fp
   81348:	eb0a 0102 	add.w	r1, sl, r2
   8134c:	9801      	ldr	r0, [sp, #4]
   8134e:	47b0      	blx	r6
   81350:	4305      	orrs	r5, r0
   81352:	f8cd b00c 	str.w	fp, [sp, #12]
			us_ne_nc--;
   81356:	3c01      	subs	r4, #1
   81358:	b2a4      	uxth	r4, r4
	} while (us_ne_nc != 0);
   8135a:	2c00      	cmp	r4, #0
   8135c:	d0c2      	beq.n	812e4 <iso7816_xfr_block_apdu_t0+0xe4>
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   8135e:	f10d 0117 	add.w	r1, sp, #23
   81362:	9801      	ldr	r0, [sp, #4]
   81364:	47b0      	blx	r6
   81366:	4305      	orrs	r5, r0
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81368:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if (ISO_NULL_VAL == uc_proc_byte) {
   8136c:	2b60      	cmp	r3, #96	; 0x60
   8136e:	d0f4      	beq.n	8135a <iso7816_xfr_block_apdu_t0+0x15a>
   81370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
		else if (((uc_proc_byte & 0xF0) == 0x60) ||
   81374:	2a60      	cmp	r2, #96	; 0x60
   81376:	d018      	beq.n	813aa <iso7816_xfr_block_apdu_t0+0x1aa>
   81378:	2a90      	cmp	r2, #144	; 0x90
   8137a:	d019      	beq.n	813b0 <iso7816_xfr_block_apdu_t0+0x1b0>
		else if (p_apdu[1] == uc_proc_byte) {
   8137c:	f899 2001 	ldrb.w	r2, [r9, #1]
   81380:	4293      	cmp	r3, r2
   81382:	d09e      	beq.n	812c2 <iso7816_xfr_block_apdu_t0+0xc2>
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81384:	43db      	mvns	r3, r3
		else if (p_apdu[1] == uc_proc_byte_x) {
   81386:	b2db      	uxtb	r3, r3
   81388:	4293      	cmp	r3, r2
   8138a:	d1ab      	bne.n	812e4 <iso7816_xfr_block_apdu_t0+0xe4>
			if (uc_cmd_case == CASE2) {
   8138c:	f1b8 0f02 	cmp.w	r8, #2
   81390:	d0d5      	beq.n	8133e <iso7816_xfr_block_apdu_t0+0x13e>
				status |= iso7816_send_char(p_usart, p_apdu[us_apdu_index++]);
   81392:	f107 0b01 	add.w	fp, r7, #1
   81396:	fa1f fb8b 	uxth.w	fp, fp
   8139a:	f819 1007 	ldrb.w	r1, [r9, r7]
   8139e:	9801      	ldr	r0, [sp, #4]
   813a0:	4b0a      	ldr	r3, [pc, #40]	; (813cc <iso7816_xfr_block_apdu_t0+0x1cc>)
   813a2:	4798      	blx	r3
   813a4:	4305      	orrs	r5, r0
   813a6:	465f      	mov	r7, fp
   813a8:	e7d5      	b.n	81356 <iso7816_xfr_block_apdu_t0+0x156>
			uc_sw1 = 1;
   813aa:	2301      	movs	r3, #1
   813ac:	9302      	str	r3, [sp, #8]
   813ae:	e7d4      	b.n	8135a <iso7816_xfr_block_apdu_t0+0x15a>
   813b0:	2301      	movs	r3, #1
   813b2:	9302      	str	r3, [sp, #8]
   813b4:	e7d1      	b.n	8135a <iso7816_xfr_block_apdu_t0+0x15a>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
   813b6:	9b03      	ldr	r3, [sp, #12]
   813b8:	1c5c      	adds	r4, r3, #1
   813ba:	b2a4      	uxth	r4, r4
   813bc:	eb0a 0103 	add.w	r1, sl, r3
   813c0:	9801      	ldr	r0, [sp, #4]
   813c2:	4b03      	ldr	r3, [pc, #12]	; (813d0 <iso7816_xfr_block_apdu_t0+0x1d0>)
   813c4:	4798      	blx	r3
   813c6:	4305      	orrs	r5, r0
   813c8:	e796      	b.n	812f8 <iso7816_xfr_block_apdu_t0+0xf8>
   813ca:	bf00      	nop
   813cc:	00081191 	.word	0x00081191
   813d0:	000810f9 	.word	0x000810f9
   813d4:	0008db38 	.word	0x0008db38
   813d8:	00087a5d 	.word	0x00087a5d

000813dc <iso7816_xfr_block_apdu_t1>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t1(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   813dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index;
	uint16_t edc;
	uint32_t rx_len;
	uint16_t us_message_index = 0;

	if (us_length <= 0) {
   813e0:	2b00      	cmp	r3, #0
   813e2:	f000 80a4 	beq.w	8152e <iso7816_xfr_block_apdu_t1+0x152>
   813e6:	4690      	mov	r8, r2
   813e8:	460d      	mov	r5, r1
   813ea:	4683      	mov	fp, r0
		return false;
	}

	if (tc3 & 0x1) {
   813ec:	4b72      	ldr	r3, [pc, #456]	; (815b8 <iso7816_xfr_block_apdu_t1+0x1dc>)
   813ee:	781e      	ldrb	r6, [r3, #0]
   813f0:	f006 0a01 	and.w	sl, r6, #1
   813f4:	f346 0600 	sbfx	r6, r6, #0, #1
   813f8:	b2b6      	uxth	r6, r6
	} else {
		edc = 0;
	}

	/* Update the edc for the data to be transmitted */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   813fa:	f891 9002 	ldrb.w	r9, [r1, #2]
   813fe:	f109 0903 	add.w	r9, r9, #3
   81402:	2400      	movs	r4, #0
		*edc = iso7816_update_crc(data, *edc);
   81404:	4f6d      	ldr	r7, [pc, #436]	; (815bc <iso7816_xfr_block_apdu_t1+0x1e0>)
   81406:	e006      	b.n	81416 <iso7816_xfr_block_apdu_t1+0x3a>
   81408:	4631      	mov	r1, r6
   8140a:	47b8      	blx	r7
   8140c:	4606      	mov	r6, r0
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   8140e:	3401      	adds	r4, #1
   81410:	b2e4      	uxtb	r4, r4
   81412:	454c      	cmp	r4, r9
   81414:	da06      	bge.n	81424 <iso7816_xfr_block_apdu_t1+0x48>
		iso7816_update_edc(p_apdu[index], &edc);
   81416:	5d28      	ldrb	r0, [r5, r4]
	if (tc3 & 0x1) {  /* type = CRC */
   81418:	f1ba 0f00 	cmp.w	sl, #0
   8141c:	d1f4      	bne.n	81408 <iso7816_xfr_block_apdu_t1+0x2c>
		*edc = *edc ^ data;
   8141e:	4046      	eors	r6, r0
   81420:	b2b6      	uxth	r6, r6
   81422:	e7f4      	b.n	8140e <iso7816_xfr_block_apdu_t1+0x32>
   81424:	2400      	movs	r4, #0
	}

	/* Transmit Data Bytes */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
		iso7816_send_char(p_usart, p_apdu[index]);
   81426:	4f66      	ldr	r7, [pc, #408]	; (815c0 <iso7816_xfr_block_apdu_t1+0x1e4>)
   81428:	5d29      	ldrb	r1, [r5, r4]
   8142a:	4658      	mov	r0, fp
   8142c:	47b8      	blx	r7
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   8142e:	3401      	adds	r4, #1
   81430:	b2e4      	uxtb	r4, r4
   81432:	78ab      	ldrb	r3, [r5, #2]
   81434:	3303      	adds	r3, #3
   81436:	429c      	cmp	r4, r3
   81438:	dbf6      	blt.n	81428 <iso7816_xfr_block_apdu_t1+0x4c>
	}

	/* Transmit EDC */
	iso7816_send_char(p_usart, (uint8_t)edc);
   8143a:	b2f1      	uxtb	r1, r6
   8143c:	4658      	mov	r0, fp
   8143e:	4b60      	ldr	r3, [pc, #384]	; (815c0 <iso7816_xfr_block_apdu_t1+0x1e4>)
   81440:	4798      	blx	r3

	if (tc3 & 0x1) {
   81442:	4b5d      	ldr	r3, [pc, #372]	; (815b8 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81444:	781b      	ldrb	r3, [r3, #0]
   81446:	f013 0f01 	tst.w	r3, #1
   8144a:	d14f      	bne.n	814ec <iso7816_xfr_block_apdu_t1+0x110>
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
	}

	if (iso7816_get_char(p_usart, &p_message[0]) == 0xff) {
   8144c:	4641      	mov	r1, r8
   8144e:	4658      	mov	r0, fp
   81450:	4b5c      	ldr	r3, [pc, #368]	; (815c4 <iso7816_xfr_block_apdu_t1+0x1e8>)
   81452:	4798      	blx	r3
   81454:	28ff      	cmp	r0, #255	; 0xff
   81456:	d06d      	beq.n	81534 <iso7816_xfr_block_apdu_t1+0x158>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[1]) == 0xff) {
   81458:	f108 0101 	add.w	r1, r8, #1
   8145c:	4658      	mov	r0, fp
   8145e:	4b59      	ldr	r3, [pc, #356]	; (815c4 <iso7816_xfr_block_apdu_t1+0x1e8>)
   81460:	4798      	blx	r3
   81462:	28ff      	cmp	r0, #255	; 0xff
   81464:	d069      	beq.n	8153a <iso7816_xfr_block_apdu_t1+0x15e>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[2]) == 0xff) {
   81466:	f108 0102 	add.w	r1, r8, #2
   8146a:	4658      	mov	r0, fp
   8146c:	4b55      	ldr	r3, [pc, #340]	; (815c4 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8146e:	4798      	blx	r3
   81470:	28ff      	cmp	r0, #255	; 0xff
   81472:	d065      	beq.n	81540 <iso7816_xfr_block_apdu_t1+0x164>
		return us_message_index;
	}

	us_message_index++;

	rx_len = p_message[2] + 1;
   81474:	f898 4002 	ldrb.w	r4, [r8, #2]
   81478:	1c65      	adds	r5, r4, #1

	if (tc3 & 0x1) {
   8147a:	4b4f      	ldr	r3, [pc, #316]	; (815b8 <iso7816_xfr_block_apdu_t1+0x1dc>)
   8147c:	781b      	ldrb	r3, [r3, #0]
   8147e:	f013 0301 	ands.w	r3, r3, #1
   81482:	d038      	beq.n	814f6 <iso7816_xfr_block_apdu_t1+0x11a>
		rx_len++;
   81484:	f105 0901 	add.w	r9, r5, #1
	}

	for (index = 3; index < (rx_len + 3); index++) {
   81488:	1d2e      	adds	r6, r5, #4
   8148a:	2e03      	cmp	r6, #3
		rx_len++;
   8148c:	bf88      	it	hi
   8148e:	464d      	movhi	r5, r9
	for (index = 3; index < (rx_len + 3); index++) {
   81490:	f240 8082 	bls.w	81598 <iso7816_xfr_block_apdu_t1+0x1bc>
		rx_len++;
   81494:	2103      	movs	r1, #3
   81496:	460c      	mov	r4, r1
		if (iso7816_get_char(p_usart, &p_message[index]) == 0xff) {
   81498:	f8df 9128 	ldr.w	r9, [pc, #296]	; 815c4 <iso7816_xfr_block_apdu_t1+0x1e8>
   8149c:	4441      	add	r1, r8
   8149e:	4658      	mov	r0, fp
   814a0:	47c8      	blx	r9
   814a2:	28ff      	cmp	r0, #255	; 0xff
   814a4:	d04f      	beq.n	81546 <iso7816_xfr_block_apdu_t1+0x16a>
	for (index = 3; index < (rx_len + 3); index++) {
   814a6:	3401      	adds	r4, #1
   814a8:	b2e4      	uxtb	r4, r4
   814aa:	4621      	mov	r1, r4
   814ac:	42b4      	cmp	r4, r6
   814ae:	d3f5      	bcc.n	8149c <iso7816_xfr_block_apdu_t1+0xc0>
			return us_message_index;
		}
	}

	/* Check for the CRC Error */
	if (tc3 & 0x1) {
   814b0:	4b41      	ldr	r3, [pc, #260]	; (815b8 <iso7816_xfr_block_apdu_t1+0x1dc>)
   814b2:	781b      	ldrb	r3, [r3, #0]
   814b4:	f013 0f01 	tst.w	r3, #1
   814b8:	d148      	bne.n	8154c <iso7816_xfr_block_apdu_t1+0x170>
		}
	} else {
		edc = 0;
		edc = edc ^ p_message[0];
		edc = edc ^ p_message[1];
		edc = edc ^ p_message[2];
   814ba:	f898 2001 	ldrb.w	r2, [r8, #1]
   814be:	f898 3000 	ldrb.w	r3, [r8]
   814c2:	405a      	eors	r2, r3
   814c4:	f898 3002 	ldrb.w	r3, [r8, #2]
   814c8:	405a      	eors	r2, r3
   814ca:	2103      	movs	r1, #3
   814cc:	460b      	mov	r3, r1

		for (index = 3; index < (rx_len + 3); index++) {
			edc = edc ^ p_message[index];
   814ce:	f818 1001 	ldrb.w	r1, [r8, r1]
   814d2:	404a      	eors	r2, r1
		for (index = 3; index < (rx_len + 3); index++) {
   814d4:	3301      	adds	r3, #1
   814d6:	b2db      	uxtb	r3, r3
   814d8:	4619      	mov	r1, r3
   814da:	42b3      	cmp	r3, r6
   814dc:	d3f7      	bcc.n	814ce <iso7816_xfr_block_apdu_t1+0xf2>
		}

		if (edc != p_message[index + 1]) {
   814de:	4441      	add	r1, r8
   814e0:	784b      	ldrb	r3, [r1, #1]
   814e2:	4293      	cmp	r3, r2
   814e4:	d01f      	beq.n	81526 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814e6:	2003      	movs	r0, #3
   814e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
   814ec:	2100      	movs	r1, #0
   814ee:	4658      	mov	r0, fp
   814f0:	4b33      	ldr	r3, [pc, #204]	; (815c0 <iso7816_xfr_block_apdu_t1+0x1e4>)
   814f2:	4798      	blx	r3
   814f4:	e7aa      	b.n	8144c <iso7816_xfr_block_apdu_t1+0x70>
	for (index = 3; index < (rx_len + 3); index++) {
   814f6:	1cee      	adds	r6, r5, #3
   814f8:	2e03      	cmp	r6, #3
   814fa:	d8cb      	bhi.n	81494 <iso7816_xfr_block_apdu_t1+0xb8>
	if (tc3 & 0x1) {
   814fc:	2b00      	cmp	r3, #0
   814fe:	d14a      	bne.n	81596 <iso7816_xfr_block_apdu_t1+0x1ba>
		edc = edc ^ p_message[2];
   81500:	f898 2000 	ldrb.w	r2, [r8]
   81504:	f898 3001 	ldrb.w	r3, [r8, #1]
   81508:	405a      	eors	r2, r3
   8150a:	f898 3002 	ldrb.w	r3, [r8, #2]
   8150e:	405a      	eors	r2, r3
		for (index = 3; index < (rx_len + 3); index++) {
   81510:	2103      	movs	r1, #3
   81512:	e7e4      	b.n	814de <iso7816_xfr_block_apdu_t1+0x102>
				((edc & 0xFF) != p_message[rx_len - 1])) {
   81514:	44a8      	add	r8, r5
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   81516:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   8151a:	b2c0      	uxtb	r0, r0
   8151c:	4283      	cmp	r3, r0
   8151e:	d002      	beq.n	81526 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   81520:	2003      	movs	r0, #3
   81522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	us_message_index += rx_len;
   81526:	1ce8      	adds	r0, r5, #3
   81528:	b280      	uxth	r0, r0
	return us_message_index;
   8152a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8152e:	4618      	mov	r0, r3
   81530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81534:	2000      	movs	r0, #0
   81536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   8153a:	2001      	movs	r0, #1
   8153c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81540:	2002      	movs	r0, #2
   81542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return us_message_index;
   81546:	2003      	movs	r0, #3
   81548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		edc = iso7816_update_crc(p_message[0], edc);
   8154c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81550:	f898 0000 	ldrb.w	r0, [r8]
   81554:	4c19      	ldr	r4, [pc, #100]	; (815bc <iso7816_xfr_block_apdu_t1+0x1e0>)
   81556:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[1], edc);
   81558:	4601      	mov	r1, r0
   8155a:	f898 0001 	ldrb.w	r0, [r8, #1]
   8155e:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[2], edc);
   81560:	4601      	mov	r1, r0
   81562:	f898 0002 	ldrb.w	r0, [r8, #2]
   81566:	47a0      	blx	r4
   81568:	2303      	movs	r3, #3
   8156a:	461c      	mov	r4, r3
			edc = iso7816_update_crc(p_message[index], edc);
   8156c:	4f13      	ldr	r7, [pc, #76]	; (815bc <iso7816_xfr_block_apdu_t1+0x1e0>)
   8156e:	4601      	mov	r1, r0
   81570:	f818 0003 	ldrb.w	r0, [r8, r3]
   81574:	47b8      	blx	r7
		for (index = 3; index < (rx_len + 3); index++) {
   81576:	3401      	adds	r4, #1
   81578:	b2e4      	uxtb	r4, r4
   8157a:	4623      	mov	r3, r4
   8157c:	42b4      	cmp	r4, r6
   8157e:	d3f6      	bcc.n	8156e <iso7816_xfr_block_apdu_t1+0x192>
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   81580:	eb08 0305 	add.w	r3, r8, r5
   81584:	f813 2c02 	ldrb.w	r2, [r3, #-2]
   81588:	f3c0 230f 	ubfx	r3, r0, #8, #16
   8158c:	429a      	cmp	r2, r3
   8158e:	d0c1      	beq.n	81514 <iso7816_xfr_block_apdu_t1+0x138>
			return us_message_index;
   81590:	2003      	movs	r0, #3
   81592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx_len = p_message[2] + 1;
   81596:	46a9      	mov	r9, r5
		edc = iso7816_update_crc(p_message[0], edc);
   81598:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8159c:	f898 0000 	ldrb.w	r0, [r8]
   815a0:	4d06      	ldr	r5, [pc, #24]	; (815bc <iso7816_xfr_block_apdu_t1+0x1e0>)
   815a2:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[1], edc);
   815a4:	4601      	mov	r1, r0
   815a6:	f898 0001 	ldrb.w	r0, [r8, #1]
   815aa:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[2], edc);
   815ac:	4601      	mov	r1, r0
   815ae:	4620      	mov	r0, r4
   815b0:	47a8      	blx	r5
   815b2:	464d      	mov	r5, r9
   815b4:	e7e4      	b.n	81580 <iso7816_xfr_block_apdu_t1+0x1a4>
   815b6:	bf00      	nop
   815b8:	2000191f 	.word	0x2000191f
   815bc:	000810b5 	.word	0x000810b5
   815c0:	00081191 	.word	0x00081191
   815c4:	000810f9 	.word	0x000810f9

000815c8 <iso7816_data_block_atr>:
 * \param p_usart Pointer to the usart device.
 * \param p_atr    Pointer to ATR buffer.
 * \param p_length Pointer for store the ATR length.
 */
void iso7816_data_block_atr(Usart* p_usart, uint8_t *p_atr, uint8_t *p_length)
{
   815c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815cc:	4607      	mov	r7, r0
   815ce:	460e      	mov	r6, r1
   815d0:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t j;
	uint8_t uc_value;

	*p_length = 0;
   815d2:	2300      	movs	r3, #0
   815d4:	7013      	strb	r3, [r2, #0]

	ta1=0;
   815d6:	4a55      	ldr	r2, [pc, #340]	; (8172c <iso7816_data_block_atr+0x164>)
   815d8:	7013      	strb	r3, [r2, #0]
	td1=0;
   815da:	4a55      	ldr	r2, [pc, #340]	; (81730 <iso7816_data_block_atr+0x168>)
   815dc:	7013      	strb	r3, [r2, #0]
	tc3=0;
   815de:	4a55      	ldr	r2, [pc, #340]	; (81734 <iso7816_data_block_atr+0x16c>)
   815e0:	7013      	strb	r3, [r2, #0]

	/* Read ATR TS. */
	iso7816_get_char(p_usart, &p_atr[0]);
   815e2:	4c55      	ldr	r4, [pc, #340]	; (81738 <iso7816_data_block_atr+0x170>)
   815e4:	47a0      	blx	r4

	/* Read ATR T0. */
	iso7816_get_char(p_usart, &p_atr[1]);
   815e6:	1c71      	adds	r1, r6, #1
   815e8:	4638      	mov	r0, r7
   815ea:	47a0      	blx	r4

	uc_value = p_atr[1] & 0xF0;
   815ec:	7874      	ldrb	r4, [r6, #1]
   815ee:	f004 09f0 	and.w	r9, r4, #240	; 0xf0
	i = 2;

	/* Read ATR T1. */
	if (uc_value & 0x10) { /* TA[1] */
   815f2:	f014 0f10 	tst.w	r4, #16
   815f6:	d11d      	bne.n	81634 <iso7816_data_block_atr+0x6c>
	i = 2;
   815f8:	2502      	movs	r5, #2
		iso7816_get_char(p_usart, &p_atr[i++]);
		ta1 = p_atr[2];
	}

	if (uc_value & 0x20) { /* TB[1] */
   815fa:	f014 0f20 	tst.w	r4, #32
   815fe:	d122      	bne.n	81646 <iso7816_data_block_atr+0x7e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x40) { /* TC[1] */
   81600:	f014 0f40 	tst.w	r4, #64	; 0x40
   81604:	d127      	bne.n	81656 <iso7816_data_block_atr+0x8e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x80) { /* TD[1] */
   81606:	f019 0f80 	tst.w	r9, #128	; 0x80
   8160a:	d12b      	bne.n	81664 <iso7816_data_block_atr+0x9c>
			uc_value = 0;
		}
	}

	/* Historical Bytes. */
	uc_value = p_atr[1] & 0x0F;
   8160c:	7873      	ldrb	r3, [r6, #1]
	for (j = 0; j < uc_value; j++) {
   8160e:	f013 030f 	ands.w	r3, r3, #15
   81612:	d00b      	beq.n	8162c <iso7816_data_block_atr+0x64>
   81614:	1974      	adds	r4, r6, r5
   81616:	eb05 0903 	add.w	r9, r5, r3
   8161a:	444e      	add	r6, r9
		iso7816_get_char(p_usart, &p_atr[i++]);
   8161c:	4d46      	ldr	r5, [pc, #280]	; (81738 <iso7816_data_block_atr+0x170>)
   8161e:	4621      	mov	r1, r4
   81620:	4638      	mov	r0, r7
   81622:	47a8      	blx	r5
   81624:	3401      	adds	r4, #1
	for (j = 0; j < uc_value; j++) {
   81626:	42b4      	cmp	r4, r6
   81628:	d1f9      	bne.n	8161e <iso7816_data_block_atr+0x56>
		iso7816_get_char(p_usart, &p_atr[i++]);
   8162a:	464d      	mov	r5, r9
	}

	*p_length = i;
   8162c:	f888 5000 	strb.w	r5, [r8]
}
   81630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		iso7816_get_char(p_usart, &p_atr[i++]);
   81634:	1cb1      	adds	r1, r6, #2
   81636:	4638      	mov	r0, r7
   81638:	4b3f      	ldr	r3, [pc, #252]	; (81738 <iso7816_data_block_atr+0x170>)
   8163a:	4798      	blx	r3
		ta1 = p_atr[2];
   8163c:	78b2      	ldrb	r2, [r6, #2]
   8163e:	4b3b      	ldr	r3, [pc, #236]	; (8172c <iso7816_data_block_atr+0x164>)
   81640:	701a      	strb	r2, [r3, #0]
		iso7816_get_char(p_usart, &p_atr[i++]);
   81642:	2503      	movs	r5, #3
   81644:	e7d9      	b.n	815fa <iso7816_data_block_atr+0x32>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81646:	f105 0a01 	add.w	sl, r5, #1
   8164a:	1971      	adds	r1, r6, r5
   8164c:	4638      	mov	r0, r7
   8164e:	4b3a      	ldr	r3, [pc, #232]	; (81738 <iso7816_data_block_atr+0x170>)
   81650:	4798      	blx	r3
   81652:	4655      	mov	r5, sl
   81654:	e7d4      	b.n	81600 <iso7816_data_block_atr+0x38>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81656:	1c6c      	adds	r4, r5, #1
   81658:	1971      	adds	r1, r6, r5
   8165a:	4638      	mov	r0, r7
   8165c:	4b36      	ldr	r3, [pc, #216]	; (81738 <iso7816_data_block_atr+0x170>)
   8165e:	4798      	blx	r3
   81660:	4625      	mov	r5, r4
   81662:	e7d0      	b.n	81606 <iso7816_data_block_atr+0x3e>
		iso7816_get_char(p_usart, &p_atr[i]);
   81664:	1971      	adds	r1, r6, r5
   81666:	4638      	mov	r0, r7
   81668:	4b33      	ldr	r3, [pc, #204]	; (81738 <iso7816_data_block_atr+0x170>)
   8166a:	4798      	blx	r3
		td1 = p_atr[i];
   8166c:	f816 9005 	ldrb.w	r9, [r6, r5]
   81670:	4b2f      	ldr	r3, [pc, #188]	; (81730 <iso7816_data_block_atr+0x168>)
   81672:	f883 9000 	strb.w	r9, [r3]
		uc_value = p_atr[i++] & 0xF0;
   81676:	1c6c      	adds	r4, r5, #1
	if (uc_value) {
   81678:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   8167c:	d00b      	beq.n	81696 <iso7816_data_block_atr+0xce>
		if (uc_value & 0x10) { /* TA[2] */
   8167e:	f019 0f10 	tst.w	r9, #16
   81682:	d10a      	bne.n	8169a <iso7816_data_block_atr+0xd2>
		if (uc_value & 0x20) { /* TB[2] */
   81684:	f019 0f20 	tst.w	r9, #32
   81688:	d10e      	bne.n	816a8 <iso7816_data_block_atr+0xe0>
		if (uc_value & 0x40) { /* TC[2] */
   8168a:	f019 0f40 	tst.w	r9, #64	; 0x40
   8168e:	d112      	bne.n	816b6 <iso7816_data_block_atr+0xee>
		if (uc_value & 0x80) { /* TD[2] */
   81690:	f01a 0f80 	tst.w	sl, #128	; 0x80
   81694:	d116      	bne.n	816c4 <iso7816_data_block_atr+0xfc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81696:	4625      	mov	r5, r4
   81698:	e7b8      	b.n	8160c <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   8169a:	3502      	adds	r5, #2
   8169c:	1931      	adds	r1, r6, r4
   8169e:	4638      	mov	r0, r7
   816a0:	4b25      	ldr	r3, [pc, #148]	; (81738 <iso7816_data_block_atr+0x170>)
   816a2:	4798      	blx	r3
   816a4:	462c      	mov	r4, r5
   816a6:	e7ed      	b.n	81684 <iso7816_data_block_atr+0xbc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816a8:	1c65      	adds	r5, r4, #1
   816aa:	1931      	adds	r1, r6, r4
   816ac:	4638      	mov	r0, r7
   816ae:	4b22      	ldr	r3, [pc, #136]	; (81738 <iso7816_data_block_atr+0x170>)
   816b0:	4798      	blx	r3
   816b2:	462c      	mov	r4, r5
   816b4:	e7e9      	b.n	8168a <iso7816_data_block_atr+0xc2>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816b6:	1c65      	adds	r5, r4, #1
   816b8:	1931      	adds	r1, r6, r4
   816ba:	4638      	mov	r0, r7
   816bc:	4b1e      	ldr	r3, [pc, #120]	; (81738 <iso7816_data_block_atr+0x170>)
   816be:	4798      	blx	r3
   816c0:	462c      	mov	r4, r5
   816c2:	e7e5      	b.n	81690 <iso7816_data_block_atr+0xc8>
			iso7816_get_char(p_usart, &p_atr[i]);
   816c4:	1931      	adds	r1, r6, r4
   816c6:	4638      	mov	r0, r7
   816c8:	4b1b      	ldr	r3, [pc, #108]	; (81738 <iso7816_data_block_atr+0x170>)
   816ca:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816cc:	1c65      	adds	r5, r4, #1
   816ce:	f816 9004 	ldrb.w	r9, [r6, r4]
	if (uc_value) {
   816d2:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   816d6:	d099      	beq.n	8160c <iso7816_data_block_atr+0x44>
		if (uc_value & 0x10) { /* TA[3] */
   816d8:	f019 0f10 	tst.w	r9, #16
   816dc:	d10e      	bne.n	816fc <iso7816_data_block_atr+0x134>
		if (uc_value & 0x20) { /* TB[3] */
   816de:	f019 0f20 	tst.w	r9, #32
   816e2:	d112      	bne.n	8170a <iso7816_data_block_atr+0x142>
		if (uc_value & 0x40) { /* TC[3] */
   816e4:	f019 0f40 	tst.w	r9, #64	; 0x40
   816e8:	d116      	bne.n	81718 <iso7816_data_block_atr+0x150>
		if (uc_value & 0x80) { /* TD[3] */
   816ea:	f01a 0f80 	tst.w	sl, #128	; 0x80
   816ee:	d08d      	beq.n	8160c <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i]);
   816f0:	1971      	adds	r1, r6, r5
   816f2:	4638      	mov	r0, r7
   816f4:	4b10      	ldr	r3, [pc, #64]	; (81738 <iso7816_data_block_atr+0x170>)
   816f6:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816f8:	3501      	adds	r5, #1
   816fa:	e787      	b.n	8160c <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816fc:	3402      	adds	r4, #2
   816fe:	1971      	adds	r1, r6, r5
   81700:	4638      	mov	r0, r7
   81702:	4b0d      	ldr	r3, [pc, #52]	; (81738 <iso7816_data_block_atr+0x170>)
   81704:	4798      	blx	r3
   81706:	4625      	mov	r5, r4
   81708:	e7e9      	b.n	816de <iso7816_data_block_atr+0x116>
			iso7816_get_char(p_usart, &p_atr[i++]);
   8170a:	1c6c      	adds	r4, r5, #1
   8170c:	1971      	adds	r1, r6, r5
   8170e:	4638      	mov	r0, r7
   81710:	4b09      	ldr	r3, [pc, #36]	; (81738 <iso7816_data_block_atr+0x170>)
   81712:	4798      	blx	r3
   81714:	4625      	mov	r5, r4
   81716:	e7e5      	b.n	816e4 <iso7816_data_block_atr+0x11c>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81718:	1c6c      	adds	r4, r5, #1
   8171a:	1971      	adds	r1, r6, r5
   8171c:	4638      	mov	r0, r7
   8171e:	4b06      	ldr	r3, [pc, #24]	; (81738 <iso7816_data_block_atr+0x170>)
   81720:	4798      	blx	r3
			tc3 = p_atr[i - 1];
   81722:	5d72      	ldrb	r2, [r6, r5]
   81724:	4b03      	ldr	r3, [pc, #12]	; (81734 <iso7816_data_block_atr+0x16c>)
   81726:	701a      	strb	r2, [r3, #0]
			iso7816_get_char(p_usart, &p_atr[i++]);
   81728:	4625      	mov	r5, r4
   8172a:	e7de      	b.n	816ea <iso7816_data_block_atr+0x122>
   8172c:	2000191e 	.word	0x2000191e
   81730:	20001920 	.word	0x20001920
   81734:	2000191f 	.word	0x2000191f
   81738:	000810f9 	.word	0x000810f9

0008173c <iso7816_warm_reset>:
 * \brief Warm reset.
 *
 * \param p_usart Pointer to the usart device.
 */
void iso7816_warm_reset(Usart* p_usart)
{
   8173c:	b510      	push	{r4, lr}
   8173e:	b082      	sub	sp, #8
   81740:	4604      	mov	r4, r0
	uint32_t i;
	uint32_t ul_data;

	iso7816_icc_power_off();
   81742:	4b16      	ldr	r3, [pc, #88]	; (8179c <iso7816_warm_reset+0x60>)
   81744:	4798      	blx	r3

	/* tb: wait 400 cycles. */
	for (i = 0; i < (RST_WAIT_TIME * (g_ul_clk / 1000000)); i++) {
   81746:	4b16      	ldr	r3, [pc, #88]	; (817a0 <iso7816_warm_reset+0x64>)
   81748:	681b      	ldr	r3, [r3, #0]
   8174a:	4a16      	ldr	r2, [pc, #88]	; (817a4 <iso7816_warm_reset+0x68>)
   8174c:	fba2 2303 	umull	r2, r3, r2, r3
   81750:	0c9b      	lsrs	r3, r3, #18
   81752:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   81756:	00db      	lsls	r3, r3, #3
   81758:	d00c      	beq.n	81774 <iso7816_warm_reset+0x38>
   8175a:	2200      	movs	r2, #0
   8175c:	4810      	ldr	r0, [pc, #64]	; (817a0 <iso7816_warm_reset+0x64>)
   8175e:	4911      	ldr	r1, [pc, #68]	; (817a4 <iso7816_warm_reset+0x68>)
   81760:	3201      	adds	r2, #1
   81762:	6803      	ldr	r3, [r0, #0]
   81764:	fba1 e303 	umull	lr, r3, r1, r3
   81768:	0c9b      	lsrs	r3, r3, #18
   8176a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   8176e:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   81772:	d3f5      	bcc.n	81760 <iso7816_warm_reset+0x24>
	}

	usart_read(p_usart, &ul_data);
   81774:	a901      	add	r1, sp, #4
   81776:	4620      	mov	r0, r4
   81778:	4b0b      	ldr	r3, [pc, #44]	; (817a8 <iso7816_warm_reset+0x6c>)
   8177a:	4798      	blx	r3
	usart_reset_status(p_usart);
   8177c:	4620      	mov	r0, r4
   8177e:	4b0b      	ldr	r3, [pc, #44]	; (817ac <iso7816_warm_reset+0x70>)
   81780:	4798      	blx	r3
	usart_reset_iterations(p_usart);
   81782:	4620      	mov	r0, r4
   81784:	4b0a      	ldr	r3, [pc, #40]	; (817b0 <iso7816_warm_reset+0x74>)
   81786:	4798      	blx	r3
	usart_reset_nack(p_usart);
   81788:	4620      	mov	r0, r4
   8178a:	4b0a      	ldr	r3, [pc, #40]	; (817b4 <iso7816_warm_reset+0x78>)
   8178c:	4798      	blx	r3
	gpio_set_pin_high(gs_ul_rst_pin_idx);
   8178e:	4b0a      	ldr	r3, [pc, #40]	; (817b8 <iso7816_warm_reset+0x7c>)
   81790:	6818      	ldr	r0, [r3, #0]
   81792:	4b0a      	ldr	r3, [pc, #40]	; (817bc <iso7816_warm_reset+0x80>)
   81794:	4798      	blx	r3

	iso7816_icc_power_on();
}
   81796:	b002      	add	sp, #8
   81798:	bd10      	pop	{r4, pc}
   8179a:	bf00      	nop
   8179c:	000810e5 	.word	0x000810e5
   817a0:	200023e8 	.word	0x200023e8
   817a4:	431bde83 	.word	0x431bde83
   817a8:	0008700f 	.word	0x0008700f
   817ac:	00086fc9 	.word	0x00086fc9
   817b0:	00086fd1 	.word	0x00086fd1
   817b4:	00086fd9 	.word	0x00086fd9
   817b8:	200023ec 	.word	0x200023ec
   817bc:	0008504b 	.word	0x0008504b

000817c0 <iso7816_decode_atr>:
 *
 * \param p_usart Pointer to the usart device.
 * \param p_atr Pinter on ATR buffer.
 */
uint8_t iso7816_decode_atr(Usart* p_usart, uint8_t *p_atr)
{
   817c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817c4:	b09c      	sub	sp, #112	; 0x70
   817c6:	4686      	mov	lr, r0
   817c8:	4688      	mov	r8, r1
	uint32_t ftable[16] = {0, 372, 558, 744, 1116, 1488, 1860, 0,
   817ca:	4e65      	ldr	r6, [pc, #404]	; (81960 <iso7816_decode_atr+0x1a0>)
   817cc:	ac0c      	add	r4, sp, #48	; 0x30
   817ce:	4635      	mov	r5, r6
   817d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   817e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			       0, 512, 768, 1024, 1536, 2048, 0, 0};
	uint32_t dtable[10] = {0, 1, 2, 4, 8, 16, 32, 64, 12, 20};
   817e4:	ad02      	add	r5, sp, #8
   817e6:	f106 0440 	add.w	r4, r6, #64	; 0x40
   817ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817f2:	e894 0003 	ldmia.w	r4, {r0, r1}
   817f6:	e885 0003 	stmia.w	r5, {r0, r1}
	uint8_t ppss[4] = {0,0,0,0};
   817fa:	2300      	movs	r3, #0
   817fc:	9301      	str	r3, [sp, #4]
	uint32_t y;
	uint8_t uc_offset;
	uint32_t fidi = 0;

	i = 2;
	y = p_atr[1] & 0xF0;
   817fe:	f898 1001 	ldrb.w	r1, [r8, #1]

	/* Read ATR Ti. */
	uc_offset = 1;

	if (y & 0x10) {
   81802:	f011 0f10 	tst.w	r1, #16
   81806:	d018      	beq.n	8183a <iso7816_decode_atr+0x7a>
	y = p_atr[1] & 0xF0;
   81808:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   8180c:	2202      	movs	r2, #2
   8180e:	e004      	b.n	8181a <iso7816_decode_atr+0x5a>
			if (y & 0x40) { /* TC[i] */
				i++;
			}

			if (y & 0x80) { /* TD[i] */
				y = p_atr[i++] & 0xF0;
   81810:	f818 3002 	ldrb.w	r3, [r8, r2]
   81814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   81818:	3201      	adds	r2, #1
		while (y) {
   8181a:	b173      	cbz	r3, 8183a <iso7816_decode_atr+0x7a>
			if (y & 0x10) { /* TA[i] */
   8181c:	f013 0f10 	tst.w	r3, #16
				i++;
   81820:	bf18      	it	ne
   81822:	3201      	addne	r2, #1
			if (y & 0x20) { /* TB[i] */
   81824:	f013 0f20 	tst.w	r3, #32
				i++;
   81828:	bf18      	it	ne
   8182a:	3201      	addne	r2, #1
			if (y & 0x40) { /* TC[i] */
   8182c:	f013 0f40 	tst.w	r3, #64	; 0x40
				i++;
   81830:	bf18      	it	ne
   81832:	3201      	addne	r2, #1
			if (y & 0x80) { /* TD[i] */
   81834:	f013 0f80 	tst.w	r3, #128	; 0x80
   81838:	d1ea      	bne.n	81810 <iso7816_decode_atr+0x50>
			uc_offset++;
		}
	}

	y = p_atr[1] & 0x0F;
	for (j = 0; j < y; j++) {
   8183a:	f011 020f 	ands.w	r2, r1, #15
   8183e:	d003      	beq.n	81848 <iso7816_decode_atr+0x88>
   81840:	2300      	movs	r3, #0
   81842:	3301      	adds	r3, #1
   81844:	429a      	cmp	r2, r3
   81846:	d1fc      	bne.n	81842 <iso7816_decode_atr+0x82>
		i++;
	}

	if (td1 & 0x10) {
   81848:	4b46      	ldr	r3, [pc, #280]	; (81964 <iso7816_decode_atr+0x1a4>)
   8184a:	7818      	ldrb	r0, [r3, #0]
   8184c:	f010 0f10 	tst.w	r0, #16
   81850:	f040 8081 	bne.w	81956 <iso7816_decode_atr+0x196>
		return 0;
	}

	if (ta1 && ((ta1 & 0xf) != 0)) {
   81854:	4b44      	ldr	r3, [pc, #272]	; (81968 <iso7816_decode_atr+0x1a8>)
   81856:	781b      	ldrb	r3, [r3, #0]
   81858:	b17b      	cbz	r3, 8187a <iso7816_decode_atr+0xba>
   8185a:	f013 020f 	ands.w	r2, r3, #15
   8185e:	d044      	beq.n	818ea <iso7816_decode_atr+0x12a>
		fidi = ftable[(ta1 >> 4) & 0xf] / dtable[ta1 & 0xf];
   81860:	091b      	lsrs	r3, r3, #4
   81862:	a91c      	add	r1, sp, #112	; 0x70
   81864:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81868:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   8186c:	f853 6c40 	ldr.w	r6, [r3, #-64]
   81870:	f852 3c68 	ldr.w	r3, [r2, #-104]
   81874:	fbb6 f6f3 	udiv	r6, r6, r3
   81878:	e000      	b.n	8187c <iso7816_decode_atr+0xbc>
	uint32_t fidi = 0;
   8187a:	2600      	movs	r6, #0
	}

	if (td1 & 0xf) {
   8187c:	f010 000f 	ands.w	r0, r0, #15
   81880:	d16a      	bne.n	81958 <iso7816_decode_atr+0x198>
   81882:	4674      	mov	r4, lr
		return (td1 & 0xf);
	}
	
	// Propose speeds to card
	iso7816_send_char(p_usart, 0xff);
   81884:	21ff      	movs	r1, #255	; 0xff
   81886:	4670      	mov	r0, lr
   81888:	4d38      	ldr	r5, [pc, #224]	; (8196c <iso7816_decode_atr+0x1ac>)
   8188a:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0x10);
   8188c:	2110      	movs	r1, #16
   8188e:	4620      	mov	r0, r4
   81890:	47a8      	blx	r5
	iso7816_send_char(p_usart, ta1);
   81892:	4f35      	ldr	r7, [pc, #212]	; (81968 <iso7816_decode_atr+0x1a8>)
   81894:	7839      	ldrb	r1, [r7, #0]
   81896:	4620      	mov	r0, r4
   81898:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0xff ^ 0x10 ^ ta1);
   8189a:	7839      	ldrb	r1, [r7, #0]
   8189c:	f081 01ef 	eor.w	r1, r1, #239	; 0xef
   818a0:	4620      	mov	r0, r4
   818a2:	47a8      	blx	r5

	iso7816_get_char(p_usart, &ppss[0]);
   818a4:	a901      	add	r1, sp, #4
   818a6:	4620      	mov	r0, r4
   818a8:	4d31      	ldr	r5, [pc, #196]	; (81970 <iso7816_decode_atr+0x1b0>)
   818aa:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[1]);
   818ac:	f10d 0105 	add.w	r1, sp, #5
   818b0:	4620      	mov	r0, r4
   818b2:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[2]);
   818b4:	f10d 0106 	add.w	r1, sp, #6
   818b8:	4620      	mov	r0, r4
   818ba:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[3]);
   818bc:	f10d 0107 	add.w	r1, sp, #7
   818c0:	4620      	mov	r0, r4
   818c2:	47a8      	blx	r5

	if ((ppss[0] != 0xff) || (ppss[1] != 0x10)) {
   818c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818c8:	2bff      	cmp	r3, #255	; 0xff
   818ca:	d103      	bne.n	818d4 <iso7816_decode_atr+0x114>
   818cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   818d0:	2b10      	cmp	r3, #16
   818d2:	d00c      	beq.n	818ee <iso7816_decode_atr+0x12e>
		// Fail - if card doesn't support this we reset card again
		iso7816_warm_reset(p_usart);
   818d4:	4620      	mov	r0, r4
   818d6:	4b27      	ldr	r3, [pc, #156]	; (81974 <iso7816_decode_atr+0x1b4>)
   818d8:	4798      	blx	r3
		// Read ATR to clear buffer
		uint8_t plength;
		iso7816_data_block_atr(p_usart, p_atr, &plength);
   818da:	f10d 0203 	add.w	r2, sp, #3
   818de:	4641      	mov	r1, r8
   818e0:	4620      	mov	r0, r4
   818e2:	4b25      	ldr	r3, [pc, #148]	; (81978 <iso7816_decode_atr+0x1b8>)
   818e4:	4798      	blx	r3
		return 0;
   818e6:	2000      	movs	r0, #0
   818e8:	e036      	b.n	81958 <iso7816_decode_atr+0x198>
	uint32_t fidi = 0;
   818ea:	2600      	movs	r6, #0
   818ec:	e7c6      	b.n	8187c <iso7816_decode_atr+0xbc>
	}

	if (ppss[2] != ta1) {
   818ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
   818f2:	4b1d      	ldr	r3, [pc, #116]	; (81968 <iso7816_decode_atr+0x1a8>)
   818f4:	781b      	ldrb	r3, [r3, #0]
   818f6:	4293      	cmp	r3, r2
   818f8:	d013      	beq.n	81922 <iso7816_decode_atr+0x162>
		if (ppss[3] == (0xff ^ 0x10 ^ ppss[2])) {
   818fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   818fe:	f082 02ef 	eor.w	r2, r2, #239	; 0xef
   81902:	4293      	cmp	r3, r2
   81904:	d11c      	bne.n	81940 <iso7816_decode_atr+0x180>
			fidi = ftable[(ppss[3] >>
					4) & 0xf] / dtable[ppss[3] & 0xf];
   81906:	091a      	lsrs	r2, r3, #4
			fidi = ftable[(ppss[3] >>
   81908:	a91c      	add	r1, sp, #112	; 0x70
   8190a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
					4) & 0xf] / dtable[ppss[3] & 0xf];
   8190e:	f003 030f 	and.w	r3, r3, #15
   81912:	eb01 0383 	add.w	r3, r1, r3, lsl #2
			fidi = ftable[(ppss[3] >>
   81916:	f852 6c40 	ldr.w	r6, [r2, #-64]
   8191a:	f853 3c68 	ldr.w	r3, [r3, #-104]
   8191e:	fbb6 f6f3 	udiv	r6, r6, r3
			return 0;
		}
	}

	/* Enable TX and RX. */
	usart_disable_rx(p_usart);
   81922:	4620      	mov	r0, r4
   81924:	4b15      	ldr	r3, [pc, #84]	; (8197c <iso7816_decode_atr+0x1bc>)
   81926:	4798      	blx	r3
	usart_disable_tx(p_usart);
   81928:	4620      	mov	r0, r4
   8192a:	4b15      	ldr	r3, [pc, #84]	; (81980 <iso7816_decode_atr+0x1c0>)
   8192c:	4798      	blx	r3

	p_usart->US_FIDI = fidi;
   8192e:	6426      	str	r6, [r4, #64]	; 0x40

	usart_enable_rx(p_usart);
   81930:	4620      	mov	r0, r4
   81932:	4b14      	ldr	r3, [pc, #80]	; (81984 <iso7816_decode_atr+0x1c4>)
   81934:	4798      	blx	r3
	usart_enable_tx(p_usart);
   81936:	4620      	mov	r0, r4
   81938:	4b13      	ldr	r3, [pc, #76]	; (81988 <iso7816_decode_atr+0x1c8>)
   8193a:	4798      	blx	r3

	return 0;
   8193c:	2000      	movs	r0, #0
   8193e:	e00b      	b.n	81958 <iso7816_decode_atr+0x198>
			iso7816_warm_reset(p_usart);
   81940:	4620      	mov	r0, r4
   81942:	4b0c      	ldr	r3, [pc, #48]	; (81974 <iso7816_decode_atr+0x1b4>)
   81944:	4798      	blx	r3
			iso7816_data_block_atr(p_usart, p_atr, &plength);
   81946:	f10d 0203 	add.w	r2, sp, #3
   8194a:	4641      	mov	r1, r8
   8194c:	4620      	mov	r0, r4
   8194e:	4b0a      	ldr	r3, [pc, #40]	; (81978 <iso7816_decode_atr+0x1b8>)
   81950:	4798      	blx	r3
			return 0;
   81952:	2000      	movs	r0, #0
   81954:	e000      	b.n	81958 <iso7816_decode_atr+0x198>
		return 0;
   81956:	2000      	movs	r0, #0
}
   81958:	b01c      	add	sp, #112	; 0x70
   8195a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8195e:	bf00      	nop
   81960:	0008dad0 	.word	0x0008dad0
   81964:	20001920 	.word	0x20001920
   81968:	2000191e 	.word	0x2000191e
   8196c:	00081191 	.word	0x00081191
   81970:	000810f9 	.word	0x000810f9
   81974:	0008173d 	.word	0x0008173d
   81978:	000815c9 	.word	0x000815c9
   8197c:	00086fb3 	.word	0x00086fb3
   81980:	00086fa3 	.word	0x00086fa3
   81984:	00086fad 	.word	0x00086fad
   81988:	00086f9d 	.word	0x00086f9d

0008198c <iso7816_init>:
 * \param ul_mck          USART module input clock frequency.
 * \param ul_rst_pin_idx  Control smart card RST pin index.
 */
void iso7816_init(Usart* p_usart, const usart_iso7816_opt_t *p_usart_opt,
		uint32_t ul_mck, uint32_t ul_rst_pin_idx)
{
   8198c:	b570      	push	{r4, r5, r6, lr}
   8198e:	4604      	mov	r4, r0
   81990:	460d      	mov	r5, r1
   81992:	4616      	mov	r6, r2
	/* Pin RST of ISO7816 initialize. */
	gs_ul_rst_pin_idx = ul_rst_pin_idx;
   81994:	4a0d      	ldr	r2, [pc, #52]	; (819cc <iso7816_init+0x40>)
   81996:	6013      	str	r3, [r2, #0]
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   81998:	4618      	mov	r0, r3
   8199a:	4b0d      	ldr	r3, [pc, #52]	; (819d0 <iso7816_init+0x44>)
   8199c:	4798      	blx	r3

	/* Init the global variable for ISO7816. */
	g_ul_clk = ul_mck;
   8199e:	4b0d      	ldr	r3, [pc, #52]	; (819d4 <iso7816_init+0x48>)
   819a0:	601e      	str	r6, [r3, #0]

	usart_init_iso7816(p_usart, p_usart_opt, g_ul_clk);
   819a2:	681a      	ldr	r2, [r3, #0]
   819a4:	4629      	mov	r1, r5
   819a6:	4620      	mov	r0, r4
   819a8:	4b0b      	ldr	r3, [pc, #44]	; (819d8 <iso7816_init+0x4c>)
   819aa:	4798      	blx	r3

	/* Disable interrupts. */
	usart_disable_interrupt(p_usart, 0xffffffff);
   819ac:	f04f 31ff 	mov.w	r1, #4294967295
   819b0:	4620      	mov	r0, r4
   819b2:	4b0a      	ldr	r3, [pc, #40]	; (819dc <iso7816_init+0x50>)
   819b4:	4798      	blx	r3

	/* Write the Timeguard Register. */
	usart_set_tx_timeguard(p_usart, 5);
   819b6:	2105      	movs	r1, #5
   819b8:	4620      	mov	r0, r4
   819ba:	4b09      	ldr	r3, [pc, #36]	; (819e0 <iso7816_init+0x54>)
   819bc:	4798      	blx	r3

	/* Enable TX and RX. */
	usart_enable_rx(p_usart);
   819be:	4620      	mov	r0, r4
   819c0:	4b08      	ldr	r3, [pc, #32]	; (819e4 <iso7816_init+0x58>)
   819c2:	4798      	blx	r3
	usart_enable_tx(p_usart);
   819c4:	4620      	mov	r0, r4
   819c6:	4b08      	ldr	r3, [pc, #32]	; (819e8 <iso7816_init+0x5c>)
   819c8:	4798      	blx	r3
   819ca:	bd70      	pop	{r4, r5, r6, pc}
   819cc:	200023ec 	.word	0x200023ec
   819d0:	00085065 	.word	0x00085065
   819d4:	200023e8 	.word	0x200023e8
   819d8:	00086d65 	.word	0x00086d65
   819dc:	00086fbd 	.word	0x00086fbd
   819e0:	00086fa9 	.word	0x00086fa9
   819e4:	00086fad 	.word	0x00086fad
   819e8:	00086f9d 	.word	0x00086f9d

000819ec <ctrl_scarddata_req>:
#define SCARD_MODE_AT88SC102_COMPAREBIT 0x08

/* Handle "Smartcard Data" request */
bool ctrl_scarddata_req(void)
{
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819ec:	4b0b      	ldr	r3, [pc, #44]	; (81a1c <ctrl_scarddata_req+0x30>)
   819ee:	885b      	ldrh	r3, [r3, #2]
   819f0:	0a18      	lsrs	r0, r3, #8
	uint8_t datalen = (udd_g_ctrlreq.req.wValue) & 0xFF;
	uint16_t rxlen;
	
	if (offset > scard_rx_buffer_size){
   819f2:	4a0b      	ldr	r2, [pc, #44]	; (81a20 <ctrl_scarddata_req+0x34>)
   819f4:	8812      	ldrh	r2, [r2, #0]
   819f6:	4290      	cmp	r0, r2
   819f8:	d80d      	bhi.n	81a16 <ctrl_scarddata_req+0x2a>
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819fa:	b2c1      	uxtb	r1, r0
		/* No data to send - point our buffer to memory actually used to prevent errors */
		rxlen = 0;
		offset = 0;
	} else {
		rxlen = scard_rx_buffer_size - offset;
   819fc:	1a12      	subs	r2, r2, r0
   819fe:	b2db      	uxtb	r3, r3
   81a00:	b292      	uxth	r2, r2
   81a02:	4293      	cmp	r3, r2
   81a04:	bf28      	it	cs
   81a06:	4613      	movcs	r3, r2
		if (rxlen > datalen){
			rxlen = datalen;
		}
	}
	
	udd_g_ctrlreq.payload = scard_rx_buffer + offset;
   81a08:	4804      	ldr	r0, [pc, #16]	; (81a1c <ctrl_scarddata_req+0x30>)
   81a0a:	4a06      	ldr	r2, [pc, #24]	; (81a24 <ctrl_scarddata_req+0x38>)
   81a0c:	440a      	add	r2, r1
   81a0e:	6082      	str	r2, [r0, #8]
	udd_g_ctrlreq.payload_size = rxlen;
   81a10:	8183      	strh	r3, [r0, #12]
	
	return true;
}
   81a12:	2001      	movs	r0, #1
   81a14:	4770      	bx	lr
		rxlen = 0;
   81a16:	2300      	movs	r3, #0
		offset = 0;
   81a18:	4619      	mov	r1, r3
   81a1a:	e7f5      	b.n	81a08 <ctrl_scarddata_req+0x1c>
   81a1c:	20002dec 	.word	0x20002dec
   81a20:	200024f0 	.word	0x200024f0
   81a24:	200024f4 	.word	0x200024f4

00081a28 <ctrl_scardconfig_req>:
{
	/* Version information, used to indicate to host computer what the firmware in the CW-Lite 
	   supports. */
	static uint8_t scard_protocol_version = 02;
	
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81a28:	4b0e      	ldr	r3, [pc, #56]	; (81a64 <ctrl_scardconfig_req+0x3c>)
   81a2a:	789b      	ldrb	r3, [r3, #2]
   81a2c:	2b01      	cmp	r3, #1
   81a2e:	d004      	beq.n	81a3a <ctrl_scardconfig_req+0x12>
   81a30:	b18b      	cbz	r3, 81a56 <ctrl_scardconfig_req+0x2e>
   81a32:	2b02      	cmp	r3, #2
   81a34:	d009      	beq.n	81a4a <ctrl_scardconfig_req+0x22>
			udd_g_ctrlreq.payload_size = 1;
			return true;
			break;
			
		default:
			return false;
   81a36:	2000      	movs	r0, #0
			break;
	}
	
}
   81a38:	4770      	bx	lr
			udd_g_ctrlreq.payload = scard_atr;
   81a3a:	4b0a      	ldr	r3, [pc, #40]	; (81a64 <ctrl_scardconfig_req+0x3c>)
   81a3c:	4a0a      	ldr	r2, [pc, #40]	; (81a68 <ctrl_scardconfig_req+0x40>)
   81a3e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = scard_atr_size;
   81a40:	4a0a      	ldr	r2, [pc, #40]	; (81a6c <ctrl_scardconfig_req+0x44>)
   81a42:	7812      	ldrb	r2, [r2, #0]
   81a44:	819a      	strh	r2, [r3, #12]
			return true;
   81a46:	2001      	movs	r0, #1
   81a48:	4770      	bx	lr
			udd_g_ctrlreq.payload = &scard_protocol;
   81a4a:	4b06      	ldr	r3, [pc, #24]	; (81a64 <ctrl_scardconfig_req+0x3c>)
   81a4c:	4a08      	ldr	r2, [pc, #32]	; (81a70 <ctrl_scardconfig_req+0x48>)
   81a4e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a50:	2001      	movs	r0, #1
   81a52:	8198      	strh	r0, [r3, #12]
			return true;
   81a54:	4770      	bx	lr
			udd_g_ctrlreq.payload = &scard_protocol_version;
   81a56:	4b03      	ldr	r3, [pc, #12]	; (81a64 <ctrl_scardconfig_req+0x3c>)
   81a58:	4a06      	ldr	r2, [pc, #24]	; (81a74 <ctrl_scardconfig_req+0x4c>)
   81a5a:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a5c:	2001      	movs	r0, #1
   81a5e:	8198      	strh	r0, [r3, #12]
			return true;
   81a60:	4770      	bx	lr
   81a62:	bf00      	nop
   81a64:	20002dec 	.word	0x20002dec
   81a68:	200025f8 	.word	0x200025f8
   81a6c:	200025f4 	.word	0x200025f4
   81a70:	20002630 	.word	0x20002630
   81a74:	200002f1 	.word	0x200002f1

00081a78 <ctrl_scardaux_req>:

/* Handle "Smartcard Auxilary" request */
bool ctrl_scardaux_req(void)
{
	if(udd_g_ctrlreq.req.wValue == SCARD_MODE_AT88SC102_IN)
   81a78:	4b05      	ldr	r3, [pc, #20]	; (81a90 <ctrl_scardaux_req+0x18>)
   81a7a:	885b      	ldrh	r3, [r3, #2]
   81a7c:	2b02      	cmp	r3, #2
   81a7e:	d001      	beq.n	81a84 <ctrl_scardaux_req+0xc>
	{	
		udd_g_ctrlreq.payload = &at88sc102_status;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
   81a80:	2000      	movs	r0, #0
}
   81a82:	4770      	bx	lr
		udd_g_ctrlreq.payload = &at88sc102_status;
   81a84:	4b02      	ldr	r3, [pc, #8]	; (81a90 <ctrl_scardaux_req+0x18>)
   81a86:	4a03      	ldr	r2, [pc, #12]	; (81a94 <ctrl_scardaux_req+0x1c>)
   81a88:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size = 1;
   81a8a:	2001      	movs	r0, #1
   81a8c:	8198      	strh	r0, [r3, #12]
		return true;
   81a8e:	4770      	bx	lr
   81a90:	20002dec 	.word	0x20002dec
   81a94:	2000262f 	.word	0x2000262f

00081a98 <ctrl_scarddata_cb>:

/* Handle "Smartcard Data" Output from Computer */
void ctrl_scarddata_cb(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81a98:	4b11      	ldr	r3, [pc, #68]	; (81ae0 <ctrl_scarddata_cb+0x48>)
   81a9a:	88d8      	ldrh	r0, [r3, #6]
   81a9c:	899b      	ldrh	r3, [r3, #12]
   81a9e:	4283      	cmp	r3, r0
   81aa0:	d31d      	bcc.n	81ade <ctrl_scarddata_cb+0x46>
	
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81aa2:	b1e0      	cbz	r0, 81ade <ctrl_scarddata_cb+0x46>
{
   81aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81aa6:	4b0e      	ldr	r3, [pc, #56]	; (81ae0 <ctrl_scarddata_cb+0x48>)
   81aa8:	885c      	ldrh	r4, [r3, #2]
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81aaa:	f8d3 c008 	ldr.w	ip, [r3, #8]
   81aae:	1c66      	adds	r6, r4, #1
   81ab0:	b2b6      	uxth	r6, r6
   81ab2:	2200      	movs	r2, #0
   81ab4:	4613      	mov	r3, r2
   81ab6:	f8df e030 	ldr.w	lr, [pc, #48]	; 81ae8 <ctrl_scarddata_cb+0x50>
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81aba:	4f0a      	ldr	r7, [pc, #40]	; (81ae4 <ctrl_scarddata_cb+0x4c>)
   81abc:	e004      	b.n	81ac8 <ctrl_scarddata_cb+0x30>
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81abe:	3301      	adds	r3, #1
   81ac0:	b2db      	uxtb	r3, r3
   81ac2:	b29a      	uxth	r2, r3
   81ac4:	4290      	cmp	r0, r2
   81ac6:	d909      	bls.n	81adc <ctrl_scarddata_cb+0x44>
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81ac8:	1919      	adds	r1, r3, r4
   81aca:	29ff      	cmp	r1, #255	; 0xff
   81acc:	dcf7      	bgt.n	81abe <ctrl_scarddata_cb+0x26>
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81ace:	f81c 5003 	ldrb.w	r5, [ip, r3]
   81ad2:	f80e 5001 	strb.w	r5, [lr, r1]
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81ad6:	4432      	add	r2, r6
   81ad8:	803a      	strh	r2, [r7, #0]
   81ada:	e7f0      	b.n	81abe <ctrl_scarddata_cb+0x26>
   81adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81ade:	4770      	bx	lr
   81ae0:	20002dec 	.word	0x20002dec
   81ae4:	20002632 	.word	0x20002632
   81ae8:	200023f0 	.word	0x200023f0

00081aec <ctrl_scardaux_cb>:
	}
}

/* Handle "Smartcard Aux" Output from Computer */
void ctrl_scardaux_cb(void)
{
   81aec:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81aee:	4b2d      	ldr	r3, [pc, #180]	; (81ba4 <ctrl_scardaux_cb+0xb8>)
   81af0:	88da      	ldrh	r2, [r3, #6]
   81af2:	899b      	ldrh	r3, [r3, #12]
   81af4:	4293      	cmp	r3, r2
   81af6:	d303      	bcc.n	81b00 <ctrl_scardaux_cb+0x14>
	
	if((udd_g_ctrlreq.req.wValue & 0xFF) == SCARD_MODE_AT88SC102_OUT)
   81af8:	4b2a      	ldr	r3, [pc, #168]	; (81ba4 <ctrl_scardaux_cb+0xb8>)
   81afa:	789b      	ldrb	r3, [r3, #2]
   81afc:	2b03      	cmp	r3, #3
   81afe:	d000      	beq.n	81b02 <ctrl_scardaux_cb+0x16>
   81b00:	bd08      	pop	{r3, pc}
	{
		at88sc102_status = 0;
   81b02:	2100      	movs	r1, #0
   81b04:	4b28      	ldr	r3, [pc, #160]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b06:	7019      	strb	r1, [r3, #0]
		if (udd_g_ctrlreq.req.wLength < 1) return;
   81b08:	2a00      	cmp	r2, #0
   81b0a:	d0f9      	beq.n	81b00 <ctrl_scardaux_cb+0x14>
		
		udd_g_ctrlreq.req.wLength--;
   81b0c:	3a01      	subs	r2, #1
   81b0e:	b292      	uxth	r2, r2
   81b10:	4b24      	ldr	r3, [pc, #144]	; (81ba4 <ctrl_scardaux_cb+0xb8>)
   81b12:	80da      	strh	r2, [r3, #6]
		switch(udd_g_ctrlreq.payload[0]) {
   81b14:	6898      	ldr	r0, [r3, #8]
   81b16:	7803      	ldrb	r3, [r0, #0]
   81b18:	3b02      	subs	r3, #2
   81b1a:	2b06      	cmp	r3, #6
   81b1c:	d8f0      	bhi.n	81b00 <ctrl_scardaux_cb+0x14>
   81b1e:	e8df f003 	tbb	[pc, r3]
   81b22:	0b04      	.short	0x0b04
   81b24:	2f261e15 	.word	0x2f261e15
   81b28:	38          	.byte	0x38
   81b29:	00          	.byte	0x00
			case SCARD_MODE_AT88SC102_INIT:
				/* FPGA must have been switched into proper mode as well */
				initPortSMC();
   81b2a:	4b20      	ldr	r3, [pc, #128]	; (81bac <ctrl_scardaux_cb+0xc0>)
   81b2c:	4798      	blx	r3
				at88sc102_status = firstDetectFunctionSMC();
   81b2e:	4b20      	ldr	r3, [pc, #128]	; (81bb0 <ctrl_scardaux_cb+0xc4>)
   81b30:	4798      	blx	r3
   81b32:	4b1d      	ldr	r3, [pc, #116]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b34:	7018      	strb	r0, [r3, #0]
				break;
   81b36:	bd08      	pop	{r3, pc}
			
			case SCARD_MODE_AT88SC102_SENDPIN:
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b38:	2a01      	cmp	r2, #1
   81b3a:	d9e1      	bls.n	81b00 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+1)), FALSE);
   81b3c:	2100      	movs	r1, #0
   81b3e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   81b42:	4b1c      	ldr	r3, [pc, #112]	; (81bb4 <ctrl_scardaux_cb+0xc8>)
   81b44:	4798      	blx	r3
   81b46:	4b18      	ldr	r3, [pc, #96]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b48:	7018      	strb	r0, [r3, #0]
				break;
   81b4a:	bd08      	pop	{r3, pc}
			
			case SCARD_MODE_AT88SC102_CHANGEPIN:
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b4c:	2a01      	cmp	r2, #1
   81b4e:	d9d7      	bls.n	81b00 <ctrl_scardaux_cb+0x14>
				writeSecurityCode(((uint16_t *)(udd_g_ctrlreq.payload+1)));
   81b50:	3001      	adds	r0, #1
   81b52:	4b19      	ldr	r3, [pc, #100]	; (81bb8 <ctrl_scardaux_cb+0xcc>)
   81b54:	4798      	blx	r3
				at88sc102_status = 1;
   81b56:	2201      	movs	r2, #1
   81b58:	4b13      	ldr	r3, [pc, #76]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b5a:	701a      	strb	r2, [r3, #0]
				break;
   81b5c:	bd08      	pop	{r3, pc}
			
			case SCARD_MODE_AT88SC102_MOOLTIPASS:
				if (transformBlankCardIntoMooltipass() == RETURN_OK){
   81b5e:	4b17      	ldr	r3, [pc, #92]	; (81bbc <ctrl_scardaux_cb+0xd0>)
   81b60:	4798      	blx	r3
   81b62:	2800      	cmp	r0, #0
   81b64:	d1cc      	bne.n	81b00 <ctrl_scardaux_cb+0x14>
					at88sc102_status = 1;
   81b66:	2201      	movs	r2, #1
   81b68:	4b0f      	ldr	r3, [pc, #60]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b6a:	701a      	strb	r2, [r3, #0]
   81b6c:	bd08      	pop	{r3, pc}
				}
				break;
			
			case SCARD_MODE_AT88SC102_TESTPIN:
				if (udd_g_ctrlreq.req.wLength < 3) return;
   81b6e:	2a02      	cmp	r2, #2
   81b70:	d9c6      	bls.n	81b00 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+2)), *(udd_g_ctrlreq.payload+1));
   81b72:	7841      	ldrb	r1, [r0, #1]
   81b74:	8840      	ldrh	r0, [r0, #2]
   81b76:	4b0f      	ldr	r3, [pc, #60]	; (81bb4 <ctrl_scardaux_cb+0xc8>)
   81b78:	4798      	blx	r3
   81b7a:	4b0b      	ldr	r3, [pc, #44]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b7c:	7018      	strb	r0, [r3, #0]
				break;
   81b7e:	bd08      	pop	{r3, pc}
				
			case SCARD_MODE_AT88SC102_TRIESLEFT:
				at88sc102_status = getNumberOfSecurityCodeTriesLeft();
   81b80:	4b0f      	ldr	r3, [pc, #60]	; (81bc0 <ctrl_scardaux_cb+0xd4>)
   81b82:	4798      	blx	r3
   81b84:	4a08      	ldr	r2, [pc, #32]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b86:	7010      	strb	r0, [r2, #0]
				udd_g_ctrlreq.payload = &at88sc102_status;
   81b88:	4b06      	ldr	r3, [pc, #24]	; (81ba4 <ctrl_scardaux_cb+0xb8>)
   81b8a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
   81b8c:	2201      	movs	r2, #1
   81b8e:	819a      	strh	r2, [r3, #12]
				break;
   81b90:	bd08      	pop	{r3, pc}
				
			case SCARD_MODE_AT88SC102_COMPAREBIT:
				// TODO: put in args
				compareBit(15, 1);
   81b92:	2101      	movs	r1, #1
   81b94:	200f      	movs	r0, #15
   81b96:	4b0b      	ldr	r3, [pc, #44]	; (81bc4 <ctrl_scardaux_cb+0xd8>)
   81b98:	4798      	blx	r3
				at88sc102_status = 1; 
   81b9a:	2201      	movs	r2, #1
   81b9c:	4b02      	ldr	r3, [pc, #8]	; (81ba8 <ctrl_scardaux_cb+0xbc>)
   81b9e:	701a      	strb	r2, [r3, #0]
				break;
   81ba0:	e7ae      	b.n	81b00 <ctrl_scardaux_cb+0x14>
   81ba2:	bf00      	nop
   81ba4:	20002dec 	.word	0x20002dec
   81ba8:	2000262f 	.word	0x2000262f
   81bac:	00081011 	.word	0x00081011
   81bb0:	00080ee9 	.word	0x00080ee9
   81bb4:	00080c35 	.word	0x00080c35
   81bb8:	000808c5 	.word	0x000808c5
   81bbc:	00080965 	.word	0x00080965
   81bc0:	000809e9 	.word	0x000809e9
   81bc4:	00081035 	.word	0x00081035

00081bc8 <scard_reset_init>:
	return;
}

/* Reset Smart-Card Interface on SAM3U Device */
void scard_reset_init(void)
{
   81bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81bcc:	b088      	sub	sp, #32
	usart_iso7816_opt_t conf_iso7816_t;
	conf_iso7816_t.iso7816_hz = ISO7816_BAUDRATE *ISO7816_FI_DI; //4000000UL;
   81bce:	4b31      	ldr	r3, [pc, #196]	; (81c94 <scard_reset_init+0xcc>)
   81bd0:	9300      	str	r3, [sp, #0]
	conf_iso7816_t.fidi_ratio = ISO7816_FI_DI;
   81bd2:	f44f 73ba 	mov.w	r3, #372	; 0x174
   81bd6:	9301      	str	r3, [sp, #4]
	conf_iso7816_t.parity_type= US_MR_PAR_EVEN;
   81bd8:	2300      	movs	r3, #0
   81bda:	9302      	str	r3, [sp, #8]
	conf_iso7816_t.inhibit_nack = 0x00;
   81bdc:	9303      	str	r3, [sp, #12]
	conf_iso7816_t.dis_suc_nack = 0x00;
   81bde:	9304      	str	r3, [sp, #16]
	conf_iso7816_t.max_iterations = 0x03;
   81be0:	2503      	movs	r5, #3
   81be2:	9505      	str	r5, [sp, #20]
	conf_iso7816_t.bit_order = 0x00;
   81be4:	9306      	str	r3, [sp, #24]
	conf_iso7816_t.protocol_type = 0x00;	/* T=0 Protocol */
   81be6:	9307      	str	r3, [sp, #28]
   81be8:	200f      	movs	r0, #15
   81bea:	4b2b      	ldr	r3, [pc, #172]	; (81c98 <scard_reset_init+0xd0>)
   81bec:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	gpio_configure_pin(PIN_USART2_TXD, PIN_USART2_TXD_FLAGS);
   81bee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bf2:	2016      	movs	r0, #22
   81bf4:	4c29      	ldr	r4, [pc, #164]	; (81c9c <scard_reset_init+0xd4>)
   81bf6:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART2_SCK, PIN_USART2_SCK_FLAGS);
   81bf8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81bfc:	2019      	movs	r0, #25
   81bfe:	47a0      	blx	r4
	gpio_configure_pin(PIN_ISO7816_RST_IDX, PIN_ISO7816_RST_FLAG);
   81c00:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81c04:	4628      	mov	r0, r5
   81c06:	47a0      	blx	r4
	iso7816_init(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz(), PIN_ISO7816_RST_IDX);
   81c08:	4c25      	ldr	r4, [pc, #148]	; (81ca0 <scard_reset_init+0xd8>)
   81c0a:	462b      	mov	r3, r5
   81c0c:	4a25      	ldr	r2, [pc, #148]	; (81ca4 <scard_reset_init+0xdc>)
   81c0e:	4669      	mov	r1, sp
   81c10:	4620      	mov	r0, r4
   81c12:	4d25      	ldr	r5, [pc, #148]	; (81ca8 <scard_reset_init+0xe0>)
   81c14:	47a8      	blx	r5
	
	/* Reset (includes power off/on */
	iso7816_warm_reset(SCARD_USART);
   81c16:	4620      	mov	r0, r4
   81c18:	4b24      	ldr	r3, [pc, #144]	; (81cac <scard_reset_init+0xe4>)
   81c1a:	4798      	blx	r3
	
	iso7816_data_block_atr(SCARD_USART, scard_atr, &scard_atr_size);
   81c1c:	4d24      	ldr	r5, [pc, #144]	; (81cb0 <scard_reset_init+0xe8>)
   81c1e:	4e25      	ldr	r6, [pc, #148]	; (81cb4 <scard_reset_init+0xec>)
   81c20:	462a      	mov	r2, r5
   81c22:	4631      	mov	r1, r6
   81c24:	4620      	mov	r0, r4
   81c26:	4b24      	ldr	r3, [pc, #144]	; (81cb8 <scard_reset_init+0xf0>)
   81c28:	4798      	blx	r3
	scard_protocol = iso7816_decode_atr(SCARD_USART, scard_atr);
   81c2a:	4631      	mov	r1, r6
   81c2c:	4620      	mov	r0, r4
   81c2e:	4b23      	ldr	r3, [pc, #140]	; (81cbc <scard_reset_init+0xf4>)
   81c30:	4798      	blx	r3
   81c32:	4b23      	ldr	r3, [pc, #140]	; (81cc0 <scard_reset_init+0xf8>)
   81c34:	7018      	strb	r0, [r3, #0]
	
	printf("ATR (%d len): ", scard_atr_size);
   81c36:	7829      	ldrb	r1, [r5, #0]
   81c38:	4822      	ldr	r0, [pc, #136]	; (81cc4 <scard_reset_init+0xfc>)
   81c3a:	4b23      	ldr	r3, [pc, #140]	; (81cc8 <scard_reset_init+0x100>)
   81c3c:	4798      	blx	r3
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c3e:	782b      	ldrb	r3, [r5, #0]
   81c40:	b16b      	cbz	r3, 81c5e <scard_reset_init+0x96>
   81c42:	1e75      	subs	r5, r6, #1
   81c44:	2400      	movs	r4, #0
		printf("%02x ", scard_atr[i]);
   81c46:	f8df 8094 	ldr.w	r8, [pc, #148]	; 81cdc <scard_reset_init+0x114>
   81c4a:	4f1f      	ldr	r7, [pc, #124]	; (81cc8 <scard_reset_init+0x100>)
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c4c:	4e18      	ldr	r6, [pc, #96]	; (81cb0 <scard_reset_init+0xe8>)
		printf("%02x ", scard_atr[i]);
   81c4e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   81c52:	4640      	mov	r0, r8
   81c54:	47b8      	blx	r7
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c56:	3401      	adds	r4, #1
   81c58:	7833      	ldrb	r3, [r6, #0]
   81c5a:	42a3      	cmp	r3, r4
   81c5c:	d8f7      	bhi.n	81c4e <scard_reset_init+0x86>
	}
	printf("\n");
   81c5e:	481b      	ldr	r0, [pc, #108]	; (81ccc <scard_reset_init+0x104>)
   81c60:	4b19      	ldr	r3, [pc, #100]	; (81cc8 <scard_reset_init+0x100>)
   81c62:	4798      	blx	r3
	
	if (scard_protocol == 1) {
   81c64:	4b16      	ldr	r3, [pc, #88]	; (81cc0 <scard_reset_init+0xf8>)
   81c66:	781b      	ldrb	r3, [r3, #0]
   81c68:	2b01      	cmp	r3, #1
   81c6a:	d002      	beq.n	81c72 <scard_reset_init+0xaa>
		/* Enable TX and RX. */
		usart_enable_rx(SCARD_USART);
		usart_enable_tx(SCARD_USART);
	}

}
   81c6c:	b008      	add	sp, #32
   81c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conf_iso7816_t.protocol_type  = 1;
   81c72:	9307      	str	r3, [sp, #28]
		conf_iso7816_t.max_iterations = 0;
   81c74:	2300      	movs	r3, #0
   81c76:	9305      	str	r3, [sp, #20]
		usart_init_iso7816(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz());
   81c78:	4c09      	ldr	r4, [pc, #36]	; (81ca0 <scard_reset_init+0xd8>)
   81c7a:	4a0a      	ldr	r2, [pc, #40]	; (81ca4 <scard_reset_init+0xdc>)
   81c7c:	4669      	mov	r1, sp
   81c7e:	4620      	mov	r0, r4
   81c80:	4b13      	ldr	r3, [pc, #76]	; (81cd0 <scard_reset_init+0x108>)
   81c82:	4798      	blx	r3
		usart_enable_rx(SCARD_USART);
   81c84:	4620      	mov	r0, r4
   81c86:	4b13      	ldr	r3, [pc, #76]	; (81cd4 <scard_reset_init+0x10c>)
   81c88:	4798      	blx	r3
		usart_enable_tx(SCARD_USART);
   81c8a:	4620      	mov	r0, r4
   81c8c:	4b12      	ldr	r3, [pc, #72]	; (81cd8 <scard_reset_init+0x110>)
   81c8e:	4798      	blx	r3
}
   81c90:	e7ec      	b.n	81c6c <scard_reset_init+0xa4>
   81c92:	bf00      	nop
   81c94:	00367e00 	.word	0x00367e00
   81c98:	000853d5 	.word	0x000853d5
   81c9c:	00085081 	.word	0x00085081
   81ca0:	40098000 	.word	0x40098000
   81ca4:	05b8d800 	.word	0x05b8d800
   81ca8:	0008198d 	.word	0x0008198d
   81cac:	0008173d 	.word	0x0008173d
   81cb0:	200025f4 	.word	0x200025f4
   81cb4:	200025f8 	.word	0x200025f8
   81cb8:	000815c9 	.word	0x000815c9
   81cbc:	000817c1 	.word	0x000817c1
   81cc0:	20002630 	.word	0x20002630
   81cc4:	0008db3c 	.word	0x0008db3c
   81cc8:	00087a5d 	.word	0x00087a5d
   81ccc:	0008dc30 	.word	0x0008dc30
   81cd0:	00086d65 	.word	0x00086d65
   81cd4:	00086fad 	.word	0x00086fad
   81cd8:	00086f9d 	.word	0x00086f9d
   81cdc:	0008db4c 	.word	0x0008db4c

00081ce0 <ctrl_scardconfig_cb>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81ce0:	4b15      	ldr	r3, [pc, #84]	; (81d38 <ctrl_scardconfig_cb+0x58>)
   81ce2:	88da      	ldrh	r2, [r3, #6]
   81ce4:	899b      	ldrh	r3, [r3, #12]
   81ce6:	429a      	cmp	r2, r3
   81ce8:	d824      	bhi.n	81d34 <ctrl_scardconfig_cb+0x54>
{
   81cea:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81cec:	4b12      	ldr	r3, [pc, #72]	; (81d38 <ctrl_scardconfig_cb+0x58>)
   81cee:	789b      	ldrb	r3, [r3, #2]
   81cf0:	2b01      	cmp	r3, #1
   81cf2:	d002      	beq.n	81cfa <ctrl_scardconfig_cb+0x1a>
   81cf4:	2b05      	cmp	r3, #5
   81cf6:	d003      	beq.n	81d00 <ctrl_scardconfig_cb+0x20>
   81cf8:	bd10      	pop	{r4, pc}
			scard_reset_init();
   81cfa:	4b10      	ldr	r3, [pc, #64]	; (81d3c <ctrl_scardconfig_cb+0x5c>)
   81cfc:	4798      	blx	r3
			break;
   81cfe:	bd10      	pop	{r4, pc}
			scard_rx_buffer_size = 0;
   81d00:	2200      	movs	r2, #0
   81d02:	4b0f      	ldr	r3, [pc, #60]	; (81d40 <ctrl_scardconfig_cb+0x60>)
   81d04:	801a      	strh	r2, [r3, #0]
			if (scard_protocol){
   81d06:	4b0f      	ldr	r3, [pc, #60]	; (81d44 <ctrl_scardconfig_cb+0x64>)
   81d08:	781b      	ldrb	r3, [r3, #0]
   81d0a:	b94b      	cbnz	r3, 81d20 <ctrl_scardconfig_cb+0x40>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t0(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81d0c:	4b0e      	ldr	r3, [pc, #56]	; (81d48 <ctrl_scardconfig_cb+0x68>)
   81d0e:	881b      	ldrh	r3, [r3, #0]
   81d10:	4a0e      	ldr	r2, [pc, #56]	; (81d4c <ctrl_scardconfig_cb+0x6c>)
   81d12:	490f      	ldr	r1, [pc, #60]	; (81d50 <ctrl_scardconfig_cb+0x70>)
   81d14:	480f      	ldr	r0, [pc, #60]	; (81d54 <ctrl_scardconfig_cb+0x74>)
   81d16:	4c10      	ldr	r4, [pc, #64]	; (81d58 <ctrl_scardconfig_cb+0x78>)
   81d18:	47a0      	blx	r4
   81d1a:	4b09      	ldr	r3, [pc, #36]	; (81d40 <ctrl_scardconfig_cb+0x60>)
   81d1c:	8018      	strh	r0, [r3, #0]
   81d1e:	bd10      	pop	{r4, pc}
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t1(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81d20:	4b09      	ldr	r3, [pc, #36]	; (81d48 <ctrl_scardconfig_cb+0x68>)
   81d22:	881b      	ldrh	r3, [r3, #0]
   81d24:	4a09      	ldr	r2, [pc, #36]	; (81d4c <ctrl_scardconfig_cb+0x6c>)
   81d26:	490a      	ldr	r1, [pc, #40]	; (81d50 <ctrl_scardconfig_cb+0x70>)
   81d28:	480a      	ldr	r0, [pc, #40]	; (81d54 <ctrl_scardconfig_cb+0x74>)
   81d2a:	4c0c      	ldr	r4, [pc, #48]	; (81d5c <ctrl_scardconfig_cb+0x7c>)
   81d2c:	47a0      	blx	r4
   81d2e:	4b04      	ldr	r3, [pc, #16]	; (81d40 <ctrl_scardconfig_cb+0x60>)
   81d30:	8018      	strh	r0, [r3, #0]
   81d32:	bd10      	pop	{r4, pc}
   81d34:	4770      	bx	lr
   81d36:	bf00      	nop
   81d38:	20002dec 	.word	0x20002dec
   81d3c:	00081bc9 	.word	0x00081bc9
   81d40:	200024f0 	.word	0x200024f0
   81d44:	20002630 	.word	0x20002630
   81d48:	20002632 	.word	0x20002632
   81d4c:	200024f4 	.word	0x200024f4
   81d50:	200023f0 	.word	0x200023f0
   81d54:	40098000 	.word	0x40098000
   81d58:	00081201 	.word	0x00081201
   81d5c:	000813dd 	.word	0x000813dd

00081d60 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81d60:	b510      	push	{r4, lr}
   81d62:	4604      	mov	r4, r0
	int ret = 0;
	cpu_irq_enter_critical();
   81d64:	4b06      	ldr	r3, [pc, #24]	; (81d80 <FPGA_setlock+0x20>)
   81d66:	4798      	blx	r3
	if (_fpga_locked == fpga_unlocked)
   81d68:	4b06      	ldr	r3, [pc, #24]	; (81d84 <FPGA_setlock+0x24>)
   81d6a:	781b      	ldrb	r3, [r3, #0]
   81d6c:	b933      	cbnz	r3, 81d7c <FPGA_setlock+0x1c>
	{
		ret = 1;
		_fpga_locked = lockstatus;	
   81d6e:	4b05      	ldr	r3, [pc, #20]	; (81d84 <FPGA_setlock+0x24>)
   81d70:	701c      	strb	r4, [r3, #0]
		ret = 1;
   81d72:	2401      	movs	r4, #1
	}
	cpu_irq_leave_critical();
   81d74:	4b04      	ldr	r3, [pc, #16]	; (81d88 <FPGA_setlock+0x28>)
   81d76:	4798      	blx	r3
	return ret;
}
   81d78:	4620      	mov	r0, r4
   81d7a:	bd10      	pop	{r4, pc}
	int ret = 0;
   81d7c:	2400      	movs	r4, #0
   81d7e:	e7f9      	b.n	81d74 <FPGA_setlock+0x14>
   81d80:	00084d6d 	.word	0x00084d6d
   81d84:	20001921 	.word	0x20001921
   81d88:	00084da9 	.word	0x00084da9

00081d8c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
	_fpga_locked = fpga_unlocked;
   81d8c:	2200      	movs	r2, #0
   81d8e:	4b01      	ldr	r3, [pc, #4]	; (81d94 <FPGA_releaselock+0x8>)
   81d90:	701a      	strb	r2, [r3, #0]
   81d92:	4770      	bx	lr
   81d94:	20001921 	.word	0x20001921

00081d98 <FPGA_lockstatus>:
}

fpga_lockstatus_t FPGA_lockstatus(void)
{
	return _fpga_locked;
   81d98:	4b01      	ldr	r3, [pc, #4]	; (81da0 <FPGA_lockstatus+0x8>)
   81d9a:	7818      	ldrb	r0, [r3, #0]
}
   81d9c:	4770      	bx	lr
   81d9e:	bf00      	nop
   81da0:	20001921 	.word	0x20001921

00081da4 <FPGA_setaddr>:
	FPGA_releaselock();
	cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81da4:	b508      	push	{r3, lr}
	pio_sync_output_write(FPGA_ADDR_PORT, addr);
   81da6:	4601      	mov	r1, r0
   81da8:	4804      	ldr	r0, [pc, #16]	; (81dbc <FPGA_setaddr+0x18>)
   81daa:	4b05      	ldr	r3, [pc, #20]	; (81dc0 <FPGA_setaddr+0x1c>)
   81dac:	4798      	blx	r3
	gpio_set_pin_low(FPGA_ALE_GPIO);
   81dae:	2035      	movs	r0, #53	; 0x35
   81db0:	4b04      	ldr	r3, [pc, #16]	; (81dc4 <FPGA_setaddr+0x20>)
   81db2:	4798      	blx	r3
	gpio_set_pin_high(FPGA_ALE_GPIO);
   81db4:	2035      	movs	r0, #53	; 0x35
   81db6:	4b04      	ldr	r3, [pc, #16]	; (81dc8 <FPGA_setaddr+0x24>)
   81db8:	4798      	blx	r3
   81dba:	bd08      	pop	{r3, pc}
   81dbc:	400e0e00 	.word	0x400e0e00
   81dc0:	00085023 	.word	0x00085023
   81dc4:	00085065 	.word	0x00085065
   81dc8:	0008504b 	.word	0x0008504b

00081dcc <smc_normaltiming>:
		*(xram+i) = data[i];
	}
}

//Set timing for normal mode
void smc_normaltiming(void){
   81dcc:	b510      	push	{r4, lr}
	smc_set_setup_timing(SMC, 0,
   81dce:	4c0b      	ldr	r4, [pc, #44]	; (81dfc <smc_normaltiming+0x30>)
   81dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
   81dd4:	2100      	movs	r1, #0
   81dd6:	4620      	mov	r0, r4
   81dd8:	4b09      	ldr	r3, [pc, #36]	; (81e00 <smc_normaltiming+0x34>)
   81dda:	4798      	blx	r3
	SMC_SETUP_NCS_WR_SETUP(1) |
	SMC_SETUP_NRD_SETUP(0) |
	SMC_SETUP_NCS_RD_SETUP(0)
	);
	
	smc_set_pulse_timing(SMC, 0,
   81ddc:	4a09      	ldr	r2, [pc, #36]	; (81e04 <smc_normaltiming+0x38>)
   81dde:	2100      	movs	r1, #0
   81de0:	4620      	mov	r0, r4
   81de2:	4b09      	ldr	r3, [pc, #36]	; (81e08 <smc_normaltiming+0x3c>)
   81de4:	4798      	blx	r3
	SMC_PULSE_NCS_WR_PULSE(1) |
	SMC_PULSE_NRD_PULSE(4) |
	SMC_PULSE_NCS_RD_PULSE(4)
	);
	
	smc_set_cycle_timing(SMC, 0,
   81de6:	4a09      	ldr	r2, [pc, #36]	; (81e0c <smc_normaltiming+0x40>)
   81de8:	2100      	movs	r1, #0
   81dea:	4620      	mov	r0, r4
   81dec:	4b08      	ldr	r3, [pc, #32]	; (81e10 <smc_normaltiming+0x44>)
   81dee:	4798      	blx	r3
	SMC_CYCLE_NWE_CYCLE(2) |
	SMC_CYCLE_NRD_CYCLE(5)
	);
	
	smc_set_mode(SMC, 0,
   81df0:	2203      	movs	r2, #3
   81df2:	2100      	movs	r1, #0
   81df4:	4620      	mov	r0, r4
   81df6:	4b07      	ldr	r3, [pc, #28]	; (81e14 <smc_normaltiming+0x48>)
   81df8:	4798      	blx	r3
   81dfa:	bd10      	pop	{r4, pc}
   81dfc:	400e0000 	.word	0x400e0000
   81e00:	00084f55 	.word	0x00084f55
   81e04:	04040101 	.word	0x04040101
   81e08:	00084f61 	.word	0x00084f61
   81e0c:	00050002 	.word	0x00050002
   81e10:	00084f6d 	.word	0x00084f6d
   81e14:	00084f79 	.word	0x00084f79

00081e18 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81e18:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81e1a:	f1a1 030e 	sub.w	r3, r1, #14
   81e1e:	2b01      	cmp	r3, #1
   81e20:	d802      	bhi.n	81e28 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   81e22:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   81e26:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e28:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   81e2c:	b672      	cpsid	i
   81e2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81e32:	2500      	movs	r5, #0
   81e34:	4b0a      	ldr	r3, [pc, #40]	; (81e60 <efc_perform_command+0x48>)
   81e36:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81e38:	0212      	lsls	r2, r2, #8
   81e3a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   81e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   81e42:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   81e46:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   81e48:	4311      	orrs	r1, r2
   81e4a:	4b06      	ldr	r3, [pc, #24]	; (81e64 <efc_perform_command+0x4c>)
   81e4c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   81e4e:	2c00      	cmp	r4, #0
   81e50:	d1e9      	bne.n	81e26 <efc_perform_command+0xe>
		cpu_irq_enable();
   81e52:	2201      	movs	r2, #1
   81e54:	4b02      	ldr	r3, [pc, #8]	; (81e60 <efc_perform_command+0x48>)
   81e56:	701a      	strb	r2, [r3, #0]
   81e58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81e5c:	b662      	cpsie	i
   81e5e:	bd38      	pop	{r3, r4, r5, pc}
   81e60:	200006ea 	.word	0x200006ea
   81e64:	2000006d 	.word	0x2000006d

00081e68 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81e68:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e6a:	0189      	lsls	r1, r1, #6
   81e6c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81e6e:	2402      	movs	r4, #2
   81e70:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81e72:	f04f 31ff 	mov.w	r1, #4294967295
   81e76:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81e78:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81e7a:	605a      	str	r2, [r3, #4]
}
   81e7c:	bc10      	pop	{r4}
   81e7e:	4770      	bx	lr

00081e80 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81e80:	0189      	lsls	r1, r1, #6
   81e82:	2305      	movs	r3, #5
   81e84:	5043      	str	r3, [r0, r1]
   81e86:	4770      	bx	lr

00081e88 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81e88:	0189      	lsls	r1, r1, #6
   81e8a:	2302      	movs	r3, #2
   81e8c:	5043      	str	r3, [r0, r1]
   81e8e:	4770      	bx	lr

00081e90 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81e90:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81e94:	61ca      	str	r2, [r1, #28]
   81e96:	4770      	bx	lr

00081e98 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e98:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81e9c:	624a      	str	r2, [r1, #36]	; 0x24
   81e9e:	4770      	bx	lr

00081ea0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81ea0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81ea4:	6a08      	ldr	r0, [r1, #32]
}
   81ea6:	4770      	bx	lr

00081ea8 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81ea8:	b570      	push	{r4, r5, r6, lr}
   81eaa:	b086      	sub	sp, #24
   81eac:	4604      	mov	r4, r0
   81eae:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81eb0:	2304      	movs	r3, #4
   81eb2:	9300      	str	r3, [sp, #0]
   81eb4:	ab02      	add	r3, sp, #8
   81eb6:	220f      	movs	r2, #15
   81eb8:	210e      	movs	r1, #14
   81eba:	480d      	ldr	r0, [pc, #52]	; (81ef0 <flash_read_unique_id+0x48>)
   81ebc:	4d0d      	ldr	r5, [pc, #52]	; (81ef4 <flash_read_unique_id+0x4c>)
   81ebe:	47a8      	blx	r5
   81ec0:	b118      	cbz	r0, 81eca <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81ec2:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   81ec4:	4628      	mov	r0, r5
   81ec6:	b006      	add	sp, #24
   81ec8:	bd70      	pop	{r4, r5, r6, pc}
   81eca:	4605      	mov	r5, r0
   81ecc:	2e04      	cmp	r6, #4
   81ece:	bf28      	it	cs
   81ed0:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81ed2:	b156      	cbz	r6, 81eea <flash_read_unique_id+0x42>
   81ed4:	aa02      	add	r2, sp, #8
   81ed6:	4623      	mov	r3, r4
   81ed8:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   81edc:	f852 0b04 	ldr.w	r0, [r2], #4
   81ee0:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81ee4:	428b      	cmp	r3, r1
   81ee6:	d1f9      	bne.n	81edc <flash_read_unique_id+0x34>
   81ee8:	e7ec      	b.n	81ec4 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   81eea:	4635      	mov	r5, r6
   81eec:	e7ea      	b.n	81ec4 <flash_read_unique_id+0x1c>
   81eee:	bf00      	nop
   81ef0:	400e0800 	.word	0x400e0800
   81ef4:	20000001 	.word	0x20000001

00081ef8 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   81ef8:	2300      	movs	r3, #0
   81efa:	6043      	str	r3, [r0, #4]
   81efc:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   81efe:	6083      	str	r3, [r0, #8]
   81f00:	4770      	bx	lr
	...

00081f04 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81f04:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   81f06:	b672      	cpsid	i
   81f08:	f3bf 8f5f 	dmb	sy
    // Add char to buffer
	cpu_irq_disable();
   81f0c:	2400      	movs	r4, #0
   81f0e:	4b11      	ldr	r3, [pc, #68]	; (81f54 <add_to_circ_buf+0x50>)
   81f10:	701c      	strb	r4, [r3, #0]
    unsigned int newhead = cbuf->head;
   81f12:	6804      	ldr	r4, [r0, #0]
    newhead++;
   81f14:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   81f16:	2cc8      	cmp	r4, #200	; 0xc8
   81f18:	bf28      	it	cs
   81f1a:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   81f1c:	6843      	ldr	r3, [r0, #4]
   81f1e:	42a3      	cmp	r3, r4
   81f20:	d10b      	bne.n	81f3a <add_to_circ_buf+0x36>
    {
        if (!block)
   81f22:	2a00      	cmp	r2, #0
   81f24:	d1fa      	bne.n	81f1c <add_to_circ_buf+0x18>
        {
            cbuf->dropped++;
   81f26:	6883      	ldr	r3, [r0, #8]
   81f28:	3301      	adds	r3, #1
   81f2a:	6083      	str	r3, [r0, #8]
			cpu_irq_enable();
   81f2c:	2201      	movs	r2, #1
   81f2e:	4b09      	ldr	r3, [pc, #36]	; (81f54 <add_to_circ_buf+0x50>)
   81f30:	701a      	strb	r2, [r3, #0]
   81f32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f36:	b662      	cpsie	i
   81f38:	e009      	b.n	81f4e <add_to_circ_buf+0x4a>
        //TODO: Need to add processing here if you want a blocking
		//      function.
        
    }

    cbuf->buf[cbuf->head] = ch;
   81f3a:	6803      	ldr	r3, [r0, #0]
   81f3c:	4403      	add	r3, r0
   81f3e:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   81f40:	6004      	str	r4, [r0, #0]
	cpu_irq_enable();
   81f42:	2201      	movs	r2, #1
   81f44:	4b03      	ldr	r3, [pc, #12]	; (81f54 <add_to_circ_buf+0x50>)
   81f46:	701a      	strb	r2, [r3, #0]
   81f48:	f3bf 8f5f 	dmb	sy
   81f4c:	b662      	cpsie	i
}
   81f4e:	bc10      	pop	{r4}
   81f50:	4770      	bx	lr
   81f52:	bf00      	nop
   81f54:	200006ea 	.word	0x200006ea

00081f58 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81f58:	4602      	mov	r2, r0
  __ASM volatile ("cpsid i");
   81f5a:	b672      	cpsid	i
   81f5c:	f3bf 8f5f 	dmb	sy
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
	cpu_irq_disable();
   81f60:	2100      	movs	r1, #0
   81f62:	4b0e      	ldr	r3, [pc, #56]	; (81f9c <get_from_circ_buf+0x44>)
   81f64:	7019      	strb	r1, [r3, #0]
    unsigned int newtail = cbuf->tail;
   81f66:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head) {
   81f68:	6801      	ldr	r1, [r0, #0]
   81f6a:	428b      	cmp	r3, r1
   81f6c:	d00d      	beq.n	81f8a <get_from_circ_buf+0x32>
		cpu_irq_enable();
        return SERIAL_ERR;
	}

    newtail++;
   81f6e:	1c59      	adds	r1, r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   81f70:	29c8      	cmp	r1, #200	; 0xc8
   81f72:	bf28      	it	cs
   81f74:	2100      	movcs	r1, #0
    uint8_t retval = cbuf->buf[newtail];
   81f76:	4403      	add	r3, r0
   81f78:	7b18      	ldrb	r0, [r3, #12]
    cbuf->tail = newtail;
   81f7a:	6051      	str	r1, [r2, #4]

	cpu_irq_enable();
   81f7c:	2201      	movs	r2, #1
   81f7e:	4b07      	ldr	r3, [pc, #28]	; (81f9c <get_from_circ_buf+0x44>)
   81f80:	701a      	strb	r2, [r3, #0]
   81f82:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f86:	b662      	cpsie	i
    return retval;
}
   81f88:	4770      	bx	lr
		cpu_irq_enable();
   81f8a:	2201      	movs	r2, #1
   81f8c:	4b03      	ldr	r3, [pc, #12]	; (81f9c <get_from_circ_buf+0x44>)
   81f8e:	701a      	strb	r2, [r3, #0]
   81f90:	f3bf 8f5f 	dmb	sy
   81f94:	b662      	cpsie	i
        return SERIAL_ERR;
   81f96:	20ff      	movs	r0, #255	; 0xff
   81f98:	4770      	bx	lr
   81f9a:	bf00      	nop
   81f9c:	200006ea 	.word	0x200006ea

00081fa0 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81fa0:	6802      	ldr	r2, [r0, #0]
    return (head != cbuf->tail);
   81fa2:	6840      	ldr	r0, [r0, #4]
}
   81fa4:	1a10      	subs	r0, r2, r0
   81fa6:	bf18      	it	ne
   81fa8:	2001      	movne	r0, #1
   81faa:	4770      	bx	lr

00081fac <circ_buf_count>:
  __ASM volatile ("cpsid i");
   81fac:	b672      	cpsid	i
   81fae:	f3bf 8f5f 	dmb	sy
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

	cpu_irq_disable();
   81fb2:	2200      	movs	r2, #0
   81fb4:	4b06      	ldr	r3, [pc, #24]	; (81fd0 <circ_buf_count+0x24>)
   81fb6:	701a      	strb	r2, [r3, #0]
    count = cbuf->head;
   81fb8:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   81fba:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   81fbc:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   81fbe:	bf48      	it	mi
   81fc0:	30c8      	addmi	r0, #200	; 0xc8
		
	cpu_irq_enable();
   81fc2:	2201      	movs	r2, #1
   81fc4:	4b02      	ldr	r3, [pc, #8]	; (81fd0 <circ_buf_count+0x24>)
   81fc6:	701a      	strb	r2, [r3, #0]
   81fc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81fcc:	b662      	cpsie	i
    return (unsigned int)count;
}
   81fce:	4770      	bx	lr
   81fd0:	200006ea 	.word	0x200006ea

00081fd4 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   81fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fd8:	b08d      	sub	sp, #52	; 0x34
   81fda:	9104      	str	r1, [sp, #16]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   81fdc:	4b90      	ldr	r3, [pc, #576]	; (82220 <ISPProtocol_ProgramMemory+0x24c>)
   81fde:	8999      	ldrh	r1, [r3, #12]
   81fe0:	2909      	cmp	r1, #9
   81fe2:	d005      	beq.n	81ff0 <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   81fe4:	488f      	ldr	r0, [pc, #572]	; (82224 <ISPProtocol_ProgramMemory+0x250>)
   81fe6:	4b90      	ldr	r3, [pc, #576]	; (82228 <ISPProtocol_ProgramMemory+0x254>)
   81fe8:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   81fea:	b00d      	add	sp, #52	; 0x34
   81fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ff0:	4605      	mov	r5, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   81ff2:	4b8b      	ldr	r3, [pc, #556]	; (82220 <ISPProtocol_ProgramMemory+0x24c>)
   81ff4:	689a      	ldr	r2, [r3, #8]
   81ff6:	ab09      	add	r3, sp, #36	; 0x24
   81ff8:	6810      	ldr	r0, [r2, #0]
   81ffa:	6851      	ldr	r1, [r2, #4]
   81ffc:	c303      	stmia	r3!, {r0, r1}
   81ffe:	8912      	ldrh	r2, [r2, #8]
   82000:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   82002:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   82006:	9303      	str	r3, [sp, #12]
   82008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   8200c:	d907      	bls.n	8201e <ISPProtocol_ProgramMemory+0x4a>
		avrisp_status_payload[0] = V2Command;
   8200e:	4b87      	ldr	r3, [pc, #540]	; (8222c <ISPProtocol_ProgramMemory+0x258>)
   82010:	701d      	strb	r5, [r3, #0]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82012:	22c0      	movs	r2, #192	; 0xc0
   82014:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   82016:	2202      	movs	r2, #2
   82018:	4b85      	ldr	r3, [pc, #532]	; (82230 <ISPProtocol_ProgramMemory+0x25c>)
   8201a:	801a      	strh	r2, [r3, #0]
		return;
   8201c:	e7e5      	b.n	81fea <ISPProtocol_ProgramMemory+0x16>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   8201e:	2d13      	cmp	r5, #19
   82020:	bf0c      	ite	eq
   82022:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   82026:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   8202a:	9305      	str	r3, [sp, #20]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   8202c:	4b81      	ldr	r3, [pc, #516]	; (82234 <ISPProtocol_ProgramMemory+0x260>)
   8202e:	681b      	ldr	r3, [r3, #0]
   82030:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   82032:	9b03      	ldr	r3, [sp, #12]
   82034:	2b00      	cmp	r3, #0
   82036:	d03f      	beq.n	820b8 <ISPProtocol_ProgramMemory+0xe4>
   82038:	3b01      	subs	r3, #1
   8203a:	b29b      	uxth	r3, r3
   8203c:	3301      	adds	r3, #1
   8203e:	9a04      	ldr	r2, [sp, #16]
   82040:	18d3      	adds	r3, r2, r3
   82042:	9306      	str	r3, [sp, #24]
   82044:	4617      	mov	r7, r2
   82046:	2300      	movs	r3, #0
   82048:	9303      	str	r3, [sp, #12]
			MustLoadExtendedAddress = false;
   8204a:	46ab      	mov	fp, r5
   8204c:	e092      	b.n	82174 <ISPProtocol_ProgramMemory+0x1a0>
			ISPTarget_LoadExtendedAddress();
   8204e:	4b7a      	ldr	r3, [pc, #488]	; (82238 <ISPProtocol_ProgramMemory+0x264>)
   82050:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   82052:	4b7a      	ldr	r3, [pc, #488]	; (8223c <ISPProtocol_ProgramMemory+0x268>)
   82054:	f04f 0200 	mov.w	r2, #0
   82058:	701a      	strb	r2, [r3, #0]
   8205a:	e099      	b.n	82190 <ISPProtocol_ProgramMemory+0x1bc>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   8205c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82060:	f043 0308 	orr.w	r3, r3, #8
   82064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   82068:	4b72      	ldr	r3, [pc, #456]	; (82234 <ISPProtocol_ProgramMemory+0x260>)
   8206a:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   8206c:	f019 0f01 	tst.w	r9, #1
   82070:	f000 80c6 	beq.w	82200 <ISPProtocol_ProgramMemory+0x22c>
			PollAddress = (CurrentAddress & 0xFFFF);
   82074:	9303      	str	r3, [sp, #12]
			CurrentAddress++;
   82076:	4a6f      	ldr	r2, [pc, #444]	; (82234 <ISPProtocol_ProgramMemory+0x260>)
   82078:	6813      	ldr	r3, [r2, #0]
   8207a:	3301      	adds	r3, #1
   8207c:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   8207e:	f1bb 0f13 	cmp.w	fp, #19
   82082:	d174      	bne.n	8216e <ISPProtocol_ProgramMemory+0x19a>
   82084:	b29b      	uxth	r3, r3
   82086:	2b00      	cmp	r3, #0
   82088:	d171      	bne.n	8216e <ISPProtocol_ProgramMemory+0x19a>
			  MustLoadExtendedAddress = true;
   8208a:	2301      	movs	r3, #1
   8208c:	4a6b      	ldr	r2, [pc, #428]	; (8223c <ISPProtocol_ProgramMemory+0x268>)
   8208e:	7013      	strb	r3, [r2, #0]
   82090:	e06d      	b.n	8216e <ISPProtocol_ProgramMemory+0x19a>
   82092:	9303      	str	r3, [sp, #12]
   82094:	e056      	b.n	82144 <ISPProtocol_ProgramMemory+0x170>
			PollAddress = (CurrentAddress & 0xFFFF);
   82096:	9303      	str	r3, [sp, #12]
   82098:	e063      	b.n	82162 <ISPProtocol_ProgramMemory+0x18e>
   8209a:	465d      	mov	r5, fp
   8209c:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   8209e:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
   820a2:	fa4f f488 	sxtb.w	r4, r8
   820a6:	2c00      	cmp	r4, #0
   820a8:	db0a      	blt.n	820c0 <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   820aa:	4a60      	ldr	r2, [pc, #384]	; (8222c <ISPProtocol_ProgramMemory+0x258>)
   820ac:	7015      	strb	r5, [r2, #0]
	avrisp_status_payload[1] = ProgrammingStatus;
   820ae:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   820b0:	2202      	movs	r2, #2
   820b2:	4b5f      	ldr	r3, [pc, #380]	; (82230 <ISPProtocol_ProgramMemory+0x25c>)
   820b4:	801a      	strh	r2, [r3, #0]
   820b6:	e798      	b.n	81fea <ISPProtocol_ProgramMemory+0x16>
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   820b8:	2300      	movs	r3, #0
   820ba:	e7f0      	b.n	8209e <ISPProtocol_ProgramMemory+0xca>
   820bc:	465d      	mov	r5, fp
   820be:	e7ee      	b.n	8209e <ISPProtocol_ProgramMemory+0xca>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   820c0:	4f5f      	ldr	r7, [pc, #380]	; (82240 <ISPProtocol_ProgramMemory+0x26c>)
   820c2:	2300      	movs	r3, #0
   820c4:	461a      	mov	r2, r3
   820c6:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   820ca:	4638      	mov	r0, r7
   820cc:	4e5d      	ldr	r6, [pc, #372]	; (82244 <ISPProtocol_ProgramMemory+0x270>)
   820ce:	47b0      	blx	r6
   820d0:	2300      	movs	r3, #0
   820d2:	461a      	mov	r2, r3
   820d4:	9907      	ldr	r1, [sp, #28]
   820d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   820da:	4638      	mov	r0, r7
   820dc:	47b0      	blx	r6
   820de:	2300      	movs	r3, #0
   820e0:	461a      	mov	r2, r3
   820e2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   820e6:	4638      	mov	r0, r7
   820e8:	47b0      	blx	r6
   820ea:	2300      	movs	r3, #0
   820ec:	461a      	mov	r2, r3
   820ee:	4619      	mov	r1, r3
   820f0:	4638      	mov	r0, r7
   820f2:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   820f4:	f018 0f20 	tst.w	r8, #32
   820f8:	d007      	beq.n	8210a <ISPProtocol_ProgramMemory+0x136>
   820fa:	9b03      	ldr	r3, [sp, #12]
   820fc:	b92b      	cbnz	r3, 8210a <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   820fe:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   82102:	f043 0310 	orr.w	r3, r3, #16
   82106:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   8210a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8210e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   82112:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   82116:	9200      	str	r2, [sp, #0]
   82118:	9a05      	ldr	r2, [sp, #20]
   8211a:	9903      	ldr	r1, [sp, #12]
   8211c:	4c4a      	ldr	r4, [pc, #296]	; (82248 <ISPProtocol_ProgramMemory+0x274>)
   8211e:	47a0      	blx	r4
   82120:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82122:	2d13      	cmp	r5, #19
   82124:	d1c1      	bne.n	820aa <ISPProtocol_ProgramMemory+0xd6>
   82126:	4a43      	ldr	r2, [pc, #268]	; (82234 <ISPProtocol_ProgramMemory+0x260>)
   82128:	8812      	ldrh	r2, [r2, #0]
   8212a:	2a00      	cmp	r2, #0
   8212c:	d1bd      	bne.n	820aa <ISPProtocol_ProgramMemory+0xd6>
		  MustLoadExtendedAddress = true;
   8212e:	2101      	movs	r1, #1
   82130:	4a42      	ldr	r2, [pc, #264]	; (8223c <ISPProtocol_ProgramMemory+0x268>)
   82132:	7011      	strb	r1, [r2, #0]
   82134:	e7b9      	b.n	820aa <ISPProtocol_ProgramMemory+0xd6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82136:	f019 0f01 	tst.w	r9, #1
   8213a:	d064      	beq.n	82206 <ISPProtocol_ProgramMemory+0x232>
   8213c:	e011      	b.n	82162 <ISPProtocol_ProgramMemory+0x18e>
   8213e:	f019 0f01 	tst.w	r9, #1
   82142:	d10e      	bne.n	82162 <ISPProtocol_ProgramMemory+0x18e>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   82144:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   82148:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   8214c:	9200      	str	r2, [sp, #0]
   8214e:	9a05      	ldr	r2, [sp, #20]
   82150:	9903      	ldr	r1, [sp, #12]
   82152:	4648      	mov	r0, r9
   82154:	4c3c      	ldr	r4, [pc, #240]	; (82248 <ISPProtocol_ProgramMemory+0x274>)
   82156:	47a0      	blx	r4
			if (ProgrammingStatus != STATUS_CMD_OK)
   82158:	4603      	mov	r3, r0
   8215a:	2800      	cmp	r0, #0
   8215c:	d1ae      	bne.n	820bc <ISPProtocol_ProgramMemory+0xe8>
			PollAddress = 0;
   8215e:	2300      	movs	r3, #0
   82160:	9303      	str	r3, [sp, #12]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   82162:	f018 0f01 	tst.w	r8, #1
   82166:	d186      	bne.n	82076 <ISPProtocol_ProgramMemory+0xa2>
   82168:	f1bb 0f15 	cmp.w	fp, #21
   8216c:	d053      	beq.n	82216 <ISPProtocol_ProgramMemory+0x242>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   8216e:	9b06      	ldr	r3, [sp, #24]
   82170:	429f      	cmp	r7, r3
   82172:	d092      	beq.n	8209a <ISPProtocol_ProgramMemory+0xc6>
   82174:	9b04      	ldr	r3, [sp, #16]
   82176:	eba7 0803 	sub.w	r8, r7, r3
   8217a:	fa1f f888 	uxth.w	r8, r8
		uint8_t ByteToWrite     = *(NextWriteByte++);
   8217e:	f817 6b01 	ldrb.w	r6, [r7], #1
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   82182:	f89d 9026 	ldrb.w	r9, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   82186:	4b2d      	ldr	r3, [pc, #180]	; (8223c <ISPProtocol_ProgramMemory+0x268>)
   82188:	781b      	ldrb	r3, [r3, #0]
   8218a:	2b00      	cmp	r3, #0
   8218c:	f47f af5f 	bne.w	8204e <ISPProtocol_ProgramMemory+0x7a>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   82190:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   82194:	2300      	movs	r3, #0
   82196:	461a      	mov	r2, r3
   82198:	4651      	mov	r1, sl
   8219a:	4829      	ldr	r0, [pc, #164]	; (82240 <ISPProtocol_ProgramMemory+0x26c>)
   8219c:	4c29      	ldr	r4, [pc, #164]	; (82244 <ISPProtocol_ProgramMemory+0x270>)
   8219e:	47a0      	blx	r4
		ISPTarget_SendByte(CurrentAddress >> 8);
   821a0:	4d24      	ldr	r5, [pc, #144]	; (82234 <ISPProtocol_ProgramMemory+0x260>)
   821a2:	2300      	movs	r3, #0
   821a4:	461a      	mov	r2, r3
   821a6:	7869      	ldrb	r1, [r5, #1]
   821a8:	4825      	ldr	r0, [pc, #148]	; (82240 <ISPProtocol_ProgramMemory+0x26c>)
   821aa:	47a0      	blx	r4
   821ac:	2300      	movs	r3, #0
   821ae:	461a      	mov	r2, r3
   821b0:	7829      	ldrb	r1, [r5, #0]
   821b2:	4823      	ldr	r0, [pc, #140]	; (82240 <ISPProtocol_ProgramMemory+0x26c>)
   821b4:	47a0      	blx	r4
   821b6:	2300      	movs	r3, #0
   821b8:	461a      	mov	r2, r3
   821ba:	4631      	mov	r1, r6
   821bc:	4820      	ldr	r0, [pc, #128]	; (82240 <ISPProtocol_ProgramMemory+0x26c>)
   821be:	47a0      	blx	r4
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   821c0:	f1bb 0f13 	cmp.w	fp, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   821c4:	bf04      	itt	eq
   821c6:	f08a 0a08 	eoreq.w	sl, sl, #8
   821ca:	f88d a028 	strbeq.w	sl, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   821ce:	9b03      	ldr	r3, [sp, #12]
   821d0:	2b00      	cmp	r3, #0
   821d2:	d1b4      	bne.n	8213e <ISPProtocol_ProgramMemory+0x16a>
   821d4:	9b05      	ldr	r3, [sp, #20]
   821d6:	42b3      	cmp	r3, r6
   821d8:	d0ad      	beq.n	82136 <ISPProtocol_ProgramMemory+0x162>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   821da:	f018 0f01 	tst.w	r8, #1
   821de:	d003      	beq.n	821e8 <ISPProtocol_ProgramMemory+0x214>
   821e0:	f1bb 0f13 	cmp.w	fp, #19
   821e4:	f43f af3a 	beq.w	8205c <ISPProtocol_ProgramMemory+0x88>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   821e8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   821ec:	f023 0308 	bic.w	r3, r3, #8
   821f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   821f4:	4b0f      	ldr	r3, [pc, #60]	; (82234 <ISPProtocol_ProgramMemory+0x260>)
   821f6:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   821f8:	f019 0f01 	tst.w	r9, #1
   821fc:	f47f af4b 	bne.w	82096 <ISPProtocol_ProgramMemory+0xc2>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   82200:	2b00      	cmp	r3, #0
   82202:	f47f af46 	bne.w	82092 <ISPProtocol_ProgramMemory+0xbe>
   82206:	f019 0f08 	tst.w	r9, #8
   8220a:	d19b      	bne.n	82144 <ISPProtocol_ProgramMemory+0x170>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   8220c:	f029 0906 	bic.w	r9, r9, #6
   82210:	f049 0902 	orr.w	r9, r9, #2
   82214:	e796      	b.n	82144 <ISPProtocol_ProgramMemory+0x170>
			CurrentAddress++;
   82216:	4a07      	ldr	r2, [pc, #28]	; (82234 <ISPProtocol_ProgramMemory+0x260>)
   82218:	6813      	ldr	r3, [r2, #0]
   8221a:	3301      	adds	r3, #1
   8221c:	6013      	str	r3, [r2, #0]
   8221e:	e7a6      	b.n	8216e <ISPProtocol_ProgramMemory+0x19a>
   82220:	20002dec 	.word	0x20002dec
   82224:	0008db64 	.word	0x0008db64
   82228:	00087a5d 	.word	0x00087a5d
   8222c:	20002638 	.word	0x20002638
   82230:	20002636 	.word	0x20002636
   82234:	20002658 	.word	0x20002658
   82238:	000828bd 	.word	0x000828bd
   8223c:	20002634 	.word	0x20002634
   82240:	40008000 	.word	0x40008000
   82244:	000857a3 	.word	0x000857a3
   82248:	000828fd 	.word	0x000828fd

0008224c <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   8224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82250:	b085      	sub	sp, #20
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   82252:	4b44      	ldr	r3, [pc, #272]	; (82364 <ISPProtocol_ReadMemory+0x118>)
   82254:	899b      	ldrh	r3, [r3, #12]
   82256:	2b03      	cmp	r3, #3
   82258:	d006      	beq.n	82268 <ISPProtocol_ReadMemory+0x1c>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   8225a:	4619      	mov	r1, r3
   8225c:	4842      	ldr	r0, [pc, #264]	; (82368 <ISPProtocol_ReadMemory+0x11c>)
   8225e:	4b43      	ldr	r3, [pc, #268]	; (8236c <ISPProtocol_ReadMemory+0x120>)
   82260:	4798      	blx	r3
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
	avrisp_status_payload_size = 2;
}
   82262:	b005      	add	sp, #20
   82264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82268:	4682      	mov	sl, r0
	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   8226a:	4b3e      	ldr	r3, [pc, #248]	; (82364 <ISPProtocol_ReadMemory+0x118>)
   8226c:	689b      	ldr	r3, [r3, #8]
   8226e:	681b      	ldr	r3, [r3, #0]
   82270:	9303      	str	r3, [sp, #12]
	avrisp_status_payload[0] = V2Command;
   82272:	4a3f      	ldr	r2, [pc, #252]	; (82370 <ISPProtocol_ReadMemory+0x124>)
   82274:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82276:	20c0      	movs	r0, #192	; 0xc0
   82278:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   8227a:	2002      	movs	r0, #2
   8227c:	4a3d      	ldr	r2, [pc, #244]	; (82374 <ISPProtocol_ReadMemory+0x128>)
   8227e:	8010      	strh	r0, [r2, #0]
	if (Read_Memory_Params.BytesToRead > 256)
   82280:	b29b      	uxth	r3, r3
   82282:	9301      	str	r3, [sp, #4]
   82284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82288:	d8eb      	bhi.n	82262 <ISPProtocol_ReadMemory+0x16>
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   8228a:	2b00      	cmp	r3, #0
   8228c:	d063      	beq.n	82356 <ISPProtocol_ReadMemory+0x10a>
   8228e:	f101 39ff 	add.w	r9, r1, #4294967295
   82292:	2600      	movs	r6, #0
   82294:	4c38      	ldr	r4, [pc, #224]	; (82378 <ISPProtocol_ReadMemory+0x12c>)
   82296:	e023      	b.n	822e0 <ISPProtocol_ReadMemory+0x94>
			ISPTarget_LoadExtendedAddress();
   82298:	4b38      	ldr	r3, [pc, #224]	; (8237c <ISPProtocol_ReadMemory+0x130>)
   8229a:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   8229c:	4b38      	ldr	r3, [pc, #224]	; (82380 <ISPProtocol_ReadMemory+0x134>)
   8229e:	f04f 0200 	mov.w	r2, #0
   822a2:	701a      	strb	r2, [r3, #0]
   822a4:	e022      	b.n	822ec <ISPProtocol_ReadMemory+0xa0>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   822a6:	f088 0808 	eor.w	r8, r8, #8
   822aa:	f88d 800e 	strb.w	r8, [sp, #14]
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   822ae:	f01b 0f01 	tst.w	fp, #1
   822b2:	d010      	beq.n	822d6 <ISPProtocol_ReadMemory+0x8a>
			CurrentAddress++;
   822b4:	4a33      	ldr	r2, [pc, #204]	; (82384 <ISPProtocol_ReadMemory+0x138>)
   822b6:	6813      	ldr	r3, [r2, #0]
   822b8:	3301      	adds	r3, #1
   822ba:	6013      	str	r3, [r2, #0]
   822bc:	e006      	b.n	822cc <ISPProtocol_ReadMemory+0x80>
   822be:	4a31      	ldr	r2, [pc, #196]	; (82384 <ISPProtocol_ReadMemory+0x138>)
   822c0:	6813      	ldr	r3, [r2, #0]
   822c2:	3301      	adds	r3, #1
   822c4:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822c6:	f1ba 0f16 	cmp.w	sl, #22
   822ca:	d004      	beq.n	822d6 <ISPProtocol_ReadMemory+0x8a>
   822cc:	b29b      	uxth	r3, r3
   822ce:	b913      	cbnz	r3, 822d6 <ISPProtocol_ReadMemory+0x8a>
			  MustLoadExtendedAddress = true;
   822d0:	2301      	movs	r3, #1
   822d2:	4a2b      	ldr	r2, [pc, #172]	; (82380 <ISPProtocol_ReadMemory+0x134>)
   822d4:	7013      	strb	r3, [r2, #0]
   822d6:	3601      	adds	r6, #1
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   822d8:	b2b3      	uxth	r3, r6
   822da:	9a01      	ldr	r2, [sp, #4]
   822dc:	429a      	cmp	r2, r3
   822de:	d93a      	bls.n	82356 <ISPProtocol_ReadMemory+0x10a>
   822e0:	fa1f fb86 	uxth.w	fp, r6
		if (MustLoadExtendedAddress)
   822e4:	4b26      	ldr	r3, [pc, #152]	; (82380 <ISPProtocol_ReadMemory+0x134>)
   822e6:	781b      	ldrb	r3, [r3, #0]
   822e8:	2b00      	cmp	r3, #0
   822ea:	d1d5      	bne.n	82298 <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   822ec:	f89d 800e 	ldrb.w	r8, [sp, #14]
   822f0:	2300      	movs	r3, #0
   822f2:	461a      	mov	r2, r3
   822f4:	4641      	mov	r1, r8
   822f6:	4620      	mov	r0, r4
   822f8:	4d23      	ldr	r5, [pc, #140]	; (82388 <ISPProtocol_ReadMemory+0x13c>)
   822fa:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   822fc:	4f21      	ldr	r7, [pc, #132]	; (82384 <ISPProtocol_ReadMemory+0x138>)
   822fe:	2300      	movs	r3, #0
   82300:	461a      	mov	r2, r3
   82302:	7879      	ldrb	r1, [r7, #1]
   82304:	4620      	mov	r0, r4
   82306:	47a8      	blx	r5
   82308:	2300      	movs	r3, #0
   8230a:	461a      	mov	r2, r3
   8230c:	7839      	ldrb	r1, [r7, #0]
   8230e:	4620      	mov	r0, r4
   82310:	47a8      	blx	r5
   82312:	2300      	movs	r3, #0
   82314:	461a      	mov	r2, r3
   82316:	4619      	mov	r1, r3
   82318:	4620      	mov	r0, r4
   8231a:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8231c:	6923      	ldr	r3, [r4, #16]
		{
			ISPTarget_SendByte(data);
#if AVRISP_USEUART
			while(usart_is_tx_empty(AVRISP_USART) == 0);
#else
			while(spi_is_tx_empty(SPI) == 0);
   8231e:	f413 7f00 	tst.w	r3, #512	; 0x200
   82322:	d0fb      	beq.n	8231c <ISPProtocol_ReadMemory+0xd0>
			spi_read(SPI, &ReceivedByte, &_);
   82324:	f10d 0209 	add.w	r2, sp, #9
   82328:	f10d 010a 	add.w	r1, sp, #10
   8232c:	4620      	mov	r0, r4
   8232e:	4b17      	ldr	r3, [pc, #92]	; (8238c <ISPProtocol_ReadMemory+0x140>)
   82330:	4798      	blx	r3
			return  ReceivedByte;
   82332:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   82336:	f809 3f01 	strb.w	r3, [r9, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   8233a:	f1ba 0f14 	cmp.w	sl, #20
   8233e:	d0b2      	beq.n	822a6 <ISPProtocol_ReadMemory+0x5a>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   82340:	f01b 0f01 	tst.w	fp, #1
   82344:	d1bb      	bne.n	822be <ISPProtocol_ReadMemory+0x72>
   82346:	f1ba 0f16 	cmp.w	sl, #22
   8234a:	d1c4      	bne.n	822d6 <ISPProtocol_ReadMemory+0x8a>
			CurrentAddress++;
   8234c:	4a0d      	ldr	r2, [pc, #52]	; (82384 <ISPProtocol_ReadMemory+0x138>)
   8234e:	6813      	ldr	r3, [r2, #0]
   82350:	3301      	adds	r3, #1
   82352:	6013      	str	r3, [r2, #0]
   82354:	e7bf      	b.n	822d6 <ISPProtocol_ReadMemory+0x8a>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82356:	2200      	movs	r2, #0
   82358:	4b05      	ldr	r3, [pc, #20]	; (82370 <ISPProtocol_ReadMemory+0x124>)
   8235a:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   8235c:	2202      	movs	r2, #2
   8235e:	4b05      	ldr	r3, [pc, #20]	; (82374 <ISPProtocol_ReadMemory+0x128>)
   82360:	801a      	strh	r2, [r3, #0]
   82362:	e77e      	b.n	82262 <ISPProtocol_ReadMemory+0x16>
   82364:	20002dec 	.word	0x20002dec
   82368:	0008dba0 	.word	0x0008dba0
   8236c:	00087a5d 	.word	0x00087a5d
   82370:	20002638 	.word	0x20002638
   82374:	20002636 	.word	0x20002636
   82378:	40008000 	.word	0x40008000
   8237c:	000828bd 	.word	0x000828bd
   82380:	20002634 	.word	0x20002634
   82384:	20002658 	.word	0x20002658
   82388:	000857a3 	.word	0x000857a3
   8238c:	00085775 	.word	0x00085775

00082390 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   82390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82394:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   82396:	4b21      	ldr	r3, [pc, #132]	; (8241c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   82398:	8999      	ldrh	r1, [r3, #12]
   8239a:	2905      	cmp	r1, #5
   8239c:	d139      	bne.n	82412 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   8239e:	4683      	mov	fp, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   823a0:	4b1e      	ldr	r3, [pc, #120]	; (8241c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   823a2:	689b      	ldr	r3, [r3, #8]
   823a4:	6818      	ldr	r0, [r3, #0]
   823a6:	9002      	str	r0, [sp, #8]
   823a8:	791a      	ldrb	r2, [r3, #4]
   823aa:	f88d 200c 	strb.w	r2, [sp, #12]
   823ae:	f893 a000 	ldrb.w	sl, [r3]
   823b2:	f10d 0609 	add.w	r6, sp, #9
   823b6:	ad01      	add	r5, sp, #4
   823b8:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   823bc:	4c18      	ldr	r4, [pc, #96]	; (82420 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   823be:	f8df 8078 	ldr.w	r8, [pc, #120]	; 82438 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
			spi_read(SPI, &ReceivedByte, &_);
   823c2:	4f18      	ldr	r7, [pc, #96]	; (82424 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
		  spi_write(SPI, data, 0, 0);
   823c4:	2300      	movs	r3, #0
   823c6:	461a      	mov	r2, r3
   823c8:	f816 1b01 	ldrb.w	r1, [r6], #1
   823cc:	4620      	mov	r0, r4
   823ce:	47c0      	blx	r8
   823d0:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   823d2:	f413 7f00 	tst.w	r3, #512	; 0x200
   823d6:	d0fb      	beq.n	823d0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x40>
			spi_read(SPI, &ReceivedByte, &_);
   823d8:	f10d 0201 	add.w	r2, sp, #1
   823dc:	f10d 0102 	add.w	r1, sp, #2
   823e0:	4620      	mov	r0, r4
   823e2:	47b8      	blx	r7
			return  ReceivedByte;
   823e4:	f89d 3002 	ldrb.w	r3, [sp, #2]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   823e8:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823ec:	454d      	cmp	r5, r9
   823ee:	d1e9      	bne.n	823c4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x34>

	avrisp_status_payload[0] = V2Command;
   823f0:	4b0d      	ldr	r3, [pc, #52]	; (82428 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   823f2:	f883 b000 	strb.w	fp, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   823f6:	2200      	movs	r2, #0
   823f8:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   823fa:	a904      	add	r1, sp, #16
   823fc:	448a      	add	sl, r1
   823fe:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   82402:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   82404:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   82406:	2204      	movs	r2, #4
   82408:	4b08      	ldr	r3, [pc, #32]	; (8242c <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   8240a:	801a      	strh	r2, [r3, #0]
}
   8240c:	b005      	add	sp, #20
   8240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82412:	4807      	ldr	r0, [pc, #28]	; (82430 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   82414:	4b07      	ldr	r3, [pc, #28]	; (82434 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>)
   82416:	4798      	blx	r3
   82418:	e7f8      	b.n	8240c <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   8241a:	bf00      	nop
   8241c:	20002dec 	.word	0x20002dec
   82420:	40008000 	.word	0x40008000
   82424:	00085775 	.word	0x00085775
   82428:	20002638 	.word	0x20002638
   8242c:	20002636 	.word	0x20002636
   82430:	0008db64 	.word	0x0008db64
   82434:	00087a5d 	.word	0x00087a5d
   82438:	000857a3 	.word	0x000857a3

0008243c <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   8243c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82440:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   82442:	4b13      	ldr	r3, [pc, #76]	; (82490 <ISPProtocol_WriteFuseLock+0x54>)
   82444:	8999      	ldrh	r1, [r3, #12]
   82446:	2904      	cmp	r1, #4
   82448:	d11e      	bne.n	82488 <ISPProtocol_WriteFuseLock+0x4c>
   8244a:	4681      	mov	r9, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   8244c:	4b10      	ldr	r3, [pc, #64]	; (82490 <ISPProtocol_WriteFuseLock+0x54>)
   8244e:	689b      	ldr	r3, [r3, #8]
   82450:	681b      	ldr	r3, [r3, #0]
   82452:	ac02      	add	r4, sp, #8
   82454:	f844 3d04 	str.w	r3, [r4, #-4]!
   82458:	f10d 0808 	add.w	r8, sp, #8
		  spi_write(SPI, data, 0, 0);
   8245c:	4f0d      	ldr	r7, [pc, #52]	; (82494 <ISPProtocol_WriteFuseLock+0x58>)
   8245e:	2600      	movs	r6, #0
   82460:	4d0d      	ldr	r5, [pc, #52]	; (82498 <ISPProtocol_WriteFuseLock+0x5c>)
   82462:	4633      	mov	r3, r6
   82464:	4632      	mov	r2, r6
   82466:	f814 1b01 	ldrb.w	r1, [r4], #1
   8246a:	4638      	mov	r0, r7
   8246c:	47a8      	blx	r5

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   8246e:	4544      	cmp	r4, r8
   82470:	d1f7      	bne.n	82462 <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   82472:	4b0a      	ldr	r3, [pc, #40]	; (8249c <ISPProtocol_WriteFuseLock+0x60>)
   82474:	f883 9000 	strb.w	r9, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82478:	2200      	movs	r2, #0
   8247a:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   8247c:	2202      	movs	r2, #2
   8247e:	4b08      	ldr	r3, [pc, #32]	; (824a0 <ISPProtocol_WriteFuseLock+0x64>)
   82480:	801a      	strh	r2, [r3, #0]
}
   82482:	b003      	add	sp, #12
   82484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82488:	4806      	ldr	r0, [pc, #24]	; (824a4 <ISPProtocol_WriteFuseLock+0x68>)
   8248a:	4b07      	ldr	r3, [pc, #28]	; (824a8 <ISPProtocol_WriteFuseLock+0x6c>)
   8248c:	4798      	blx	r3
   8248e:	e7f8      	b.n	82482 <ISPProtocol_WriteFuseLock+0x46>
   82490:	20002dec 	.word	0x20002dec
   82494:	40008000 	.word	0x40008000
   82498:	000857a3 	.word	0x000857a3
   8249c:	20002638 	.word	0x20002638
   824a0:	20002636 	.word	0x20002636
   824a4:	0008db64 	.word	0x0008db64
   824a8:	00087a5d 	.word	0x00087a5d

000824ac <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
   824ac:	4770      	bx	lr
	...

000824b0 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   824b0:	b900      	cbnz	r0, 824b4 <ISPProtocol_DelayMS+0x4>
   824b2:	4770      	bx	lr
{
   824b4:	b538      	push	{r3, r4, r5, lr}
   824b6:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   824b8:	f243 62b0 	movw	r2, #14000	; 0x36b0
   824bc:	2300      	movs	r3, #0
   824be:	f243 64af 	movw	r4, #13999	; 0x36af
   824c2:	2500      	movs	r5, #0
   824c4:	4804      	ldr	r0, [pc, #16]	; (824d8 <ISPProtocol_DelayMS+0x28>)
   824c6:	fbe0 4501 	umlal	r4, r5, r0, r1
   824ca:	4620      	mov	r0, r4
   824cc:	4629      	mov	r1, r5
   824ce:	4c03      	ldr	r4, [pc, #12]	; (824dc <ISPProtocol_DelayMS+0x2c>)
   824d0:	47a0      	blx	r4
   824d2:	4b03      	ldr	r3, [pc, #12]	; (824e0 <ISPProtocol_DelayMS+0x30>)
   824d4:	4798      	blx	r3
   824d6:	bd38      	pop	{r3, r4, r5, pc}
   824d8:	05b8d800 	.word	0x05b8d800
   824dc:	000876fd 	.word	0x000876fd
   824e0:	20000089 	.word	0x20000089

000824e4 <ISPProtocol_EnterISPMode>:
{
   824e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824e8:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   824ea:	4b45      	ldr	r3, [pc, #276]	; (82600 <ISPProtocol_EnterISPMode+0x11c>)
   824ec:	8999      	ldrh	r1, [r3, #12]
   824ee:	290b      	cmp	r1, #11
   824f0:	d005      	beq.n	824fe <ISPProtocol_EnterISPMode+0x1a>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   824f2:	4844      	ldr	r0, [pc, #272]	; (82604 <ISPProtocol_EnterISPMode+0x120>)
   824f4:	4b44      	ldr	r3, [pc, #272]	; (82608 <ISPProtocol_EnterISPMode+0x124>)
   824f6:	4798      	blx	r3
}
   824f8:	b00b      	add	sp, #44	; 0x2c
   824fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   824fe:	4b40      	ldr	r3, [pc, #256]	; (82600 <ISPProtocol_EnterISPMode+0x11c>)
   82500:	689b      	ldr	r3, [r3, #8]
   82502:	aa07      	add	r2, sp, #28
   82504:	6818      	ldr	r0, [r3, #0]
   82506:	6859      	ldr	r1, [r3, #4]
   82508:	c203      	stmia	r2!, {r0, r1}
   8250a:	8918      	ldrh	r0, [r3, #8]
   8250c:	7a99      	ldrb	r1, [r3, #10]
   8250e:	8010      	strh	r0, [r2, #0]
   82510:	7091      	strb	r1, [r2, #2]
   82512:	785a      	ldrb	r2, [r3, #1]
   82514:	4616      	mov	r6, r2
   82516:	9203      	str	r2, [sp, #12]
   82518:	7898      	ldrb	r0, [r3, #2]
   8251a:	78dc      	ldrb	r4, [r3, #3]
   8251c:	791a      	ldrb	r2, [r3, #4]
   8251e:	9201      	str	r2, [sp, #4]
   82520:	795a      	ldrb	r2, [r3, #5]
   82522:	9202      	str	r2, [sp, #8]
   82524:	f893 b006 	ldrb.w	fp, [r3, #6]
	CurrentAddress = 0;
   82528:	2200      	movs	r2, #0
   8252a:	4b38      	ldr	r3, [pc, #224]	; (8260c <ISPProtocol_EnterISPMode+0x128>)
   8252c:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   8252e:	4d38      	ldr	r5, [pc, #224]	; (82610 <ISPProtocol_EnterISPMode+0x12c>)
   82530:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   82532:	4b38      	ldr	r3, [pc, #224]	; (82614 <ISPProtocol_EnterISPMode+0x130>)
   82534:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   82536:	2001      	movs	r0, #1
   82538:	4b37      	ldr	r3, [pc, #220]	; (82618 <ISPProtocol_EnterISPMode+0x134>)
   8253a:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   8253c:	4630      	mov	r0, r6
   8253e:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82540:	f104 39ff 	add.w	r9, r4, #4294967295
   82544:	fa5f f989 	uxtb.w	r9, r9
   82548:	2c00      	cmp	r4, #0
   8254a:	d053      	beq.n	825f4 <ISPProtocol_EnterISPMode+0x110>
   8254c:	4b33      	ldr	r3, [pc, #204]	; (8261c <ISPProtocol_EnterISPMode+0x138>)
   8254e:	681b      	ldr	r3, [r3, #0]
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   82550:	24c0      	movs	r4, #192	; 0xc0
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82552:	2b00      	cmp	r3, #0
   82554:	d042      	beq.n	825dc <ISPProtocol_EnterISPMode+0xf8>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   82556:	4f2e      	ldr	r7, [pc, #184]	; (82610 <ISPProtocol_EnterISPMode+0x12c>)
   82558:	4c31      	ldr	r4, [pc, #196]	; (82620 <ISPProtocol_EnterISPMode+0x13c>)
   8255a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 82634 <ISPProtocol_EnterISPMode+0x150>
   8255e:	e01d      	b.n	8259c <ISPProtocol_EnterISPMode+0xb8>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   82560:	f1bb 0f00 	cmp.w	fp, #0
   82564:	d039      	beq.n	825da <ISPProtocol_EnterISPMode+0xf6>
   82566:	ab0a      	add	r3, sp, #40	; 0x28
   82568:	445b      	add	r3, fp
   8256a:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   8256e:	9a02      	ldr	r2, [sp, #8]
   82570:	4293      	cmp	r3, r2
   82572:	d032      	beq.n	825da <ISPProtocol_EnterISPMode+0xf6>
			ISPTarget_ChangeTargetResetLine(false);
   82574:	2000      	movs	r0, #0
   82576:	4d28      	ldr	r5, [pc, #160]	; (82618 <ISPProtocol_EnterISPMode+0x134>)
   82578:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   8257a:	9e03      	ldr	r6, [sp, #12]
   8257c:	4630      	mov	r0, r6
   8257e:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   82580:	2001      	movs	r0, #1
   82582:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82584:	4630      	mov	r0, r6
   82586:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82588:	f109 39ff 	add.w	r9, r9, #4294967295
   8258c:	fa5f f989 	uxtb.w	r9, r9
   82590:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   82594:	d030      	beq.n	825f8 <ISPProtocol_EnterISPMode+0x114>
   82596:	4b21      	ldr	r3, [pc, #132]	; (8261c <ISPProtocol_EnterISPMode+0x138>)
   82598:	681b      	ldr	r3, [r3, #0]
   8259a:	b37b      	cbz	r3, 825fc <ISPProtocol_EnterISPMode+0x118>
   8259c:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   825a0:	ad06      	add	r5, sp, #24
   825a2:	f10d 081c 	add.w	r8, sp, #28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   825a6:	9801      	ldr	r0, [sp, #4]
   825a8:	47b8      	blx	r7
   825aa:	2300      	movs	r3, #0
   825ac:	461a      	mov	r2, r3
   825ae:	f816 1b01 	ldrb.w	r1, [r6], #1
   825b2:	4620      	mov	r0, r4
   825b4:	47d0      	blx	sl
   825b6:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   825b8:	f413 7f00 	tst.w	r3, #512	; 0x200
   825bc:	d0fb      	beq.n	825b6 <ISPProtocol_EnterISPMode+0xd2>
			spi_read(SPI, &ReceivedByte, &_);
   825be:	f10d 0215 	add.w	r2, sp, #21
   825c2:	f10d 0116 	add.w	r1, sp, #22
   825c6:	4620      	mov	r0, r4
   825c8:	4b16      	ldr	r3, [pc, #88]	; (82624 <ISPProtocol_EnterISPMode+0x140>)
   825ca:	4798      	blx	r3
			return  ReceivedByte;
   825cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   825d0:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   825d4:	4545      	cmp	r5, r8
   825d6:	d1e6      	bne.n	825a6 <ISPProtocol_EnterISPMode+0xc2>
   825d8:	e7c2      	b.n	82560 <ISPProtocol_EnterISPMode+0x7c>
			ResponseStatus = STATUS_CMD_OK;
   825da:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   825dc:	4621      	mov	r1, r4
   825de:	4812      	ldr	r0, [pc, #72]	; (82628 <ISPProtocol_EnterISPMode+0x144>)
   825e0:	4b09      	ldr	r3, [pc, #36]	; (82608 <ISPProtocol_EnterISPMode+0x124>)
   825e2:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   825e4:	4b11      	ldr	r3, [pc, #68]	; (8262c <ISPProtocol_EnterISPMode+0x148>)
   825e6:	2210      	movs	r2, #16
   825e8:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   825ea:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   825ec:	2202      	movs	r2, #2
   825ee:	4b10      	ldr	r3, [pc, #64]	; (82630 <ISPProtocol_EnterISPMode+0x14c>)
   825f0:	801a      	strh	r2, [r3, #0]
   825f2:	e781      	b.n	824f8 <ISPProtocol_EnterISPMode+0x14>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   825f4:	24c0      	movs	r4, #192	; 0xc0
   825f6:	e7f1      	b.n	825dc <ISPProtocol_EnterISPMode+0xf8>
   825f8:	24c0      	movs	r4, #192	; 0xc0
   825fa:	e7ef      	b.n	825dc <ISPProtocol_EnterISPMode+0xf8>
   825fc:	24c0      	movs	r4, #192	; 0xc0
   825fe:	e7ed      	b.n	825dc <ISPProtocol_EnterISPMode+0xf8>
   82600:	20002dec 	.word	0x20002dec
   82604:	0008db64 	.word	0x0008db64
   82608:	00087a5d 	.word	0x00087a5d
   8260c:	20002658 	.word	0x20002658
   82610:	000824b1 	.word	0x000824b1
   82614:	00082739 	.word	0x00082739
   82618:	000827f9 	.word	0x000827f9
   8261c:	2000265c 	.word	0x2000265c
   82620:	40008000 	.word	0x40008000
   82624:	00085775 	.word	0x00085775
   82628:	0008db80 	.word	0x0008db80
   8262c:	20002638 	.word	0x20002638
   82630:	20002636 	.word	0x20002636
   82634:	000857a3 	.word	0x000857a3

00082638 <ISPProtocol_LeaveISPMode>:
{
   82638:	b510      	push	{r4, lr}
   8263a:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != 2){
   8263c:	4b10      	ldr	r3, [pc, #64]	; (82680 <ISPProtocol_LeaveISPMode+0x48>)
   8263e:	8999      	ldrh	r1, [r3, #12]
   82640:	2902      	cmp	r1, #2
   82642:	d004      	beq.n	8264e <ISPProtocol_LeaveISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82644:	480f      	ldr	r0, [pc, #60]	; (82684 <ISPProtocol_LeaveISPMode+0x4c>)
   82646:	4b10      	ldr	r3, [pc, #64]	; (82688 <ISPProtocol_LeaveISPMode+0x50>)
   82648:	4798      	blx	r3
}
   8264a:	b002      	add	sp, #8
   8264c:	bd10      	pop	{r4, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   8264e:	4b0c      	ldr	r3, [pc, #48]	; (82680 <ISPProtocol_LeaveISPMode+0x48>)
   82650:	689b      	ldr	r3, [r3, #8]
   82652:	8818      	ldrh	r0, [r3, #0]
   82654:	f8ad 0004 	strh.w	r0, [sp, #4]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   82658:	b2c0      	uxtb	r0, r0
   8265a:	4c0c      	ldr	r4, [pc, #48]	; (8268c <ISPProtocol_LeaveISPMode+0x54>)
   8265c:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   8265e:	2000      	movs	r0, #0
   82660:	4b0b      	ldr	r3, [pc, #44]	; (82690 <ISPProtocol_LeaveISPMode+0x58>)
   82662:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   82664:	4b0b      	ldr	r3, [pc, #44]	; (82694 <ISPProtocol_LeaveISPMode+0x5c>)
   82666:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   82668:	f89d 0005 	ldrb.w	r0, [sp, #5]
   8266c:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   8266e:	4b0a      	ldr	r3, [pc, #40]	; (82698 <ISPProtocol_LeaveISPMode+0x60>)
   82670:	2211      	movs	r2, #17
   82672:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82674:	2200      	movs	r2, #0
   82676:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82678:	2202      	movs	r2, #2
   8267a:	4b08      	ldr	r3, [pc, #32]	; (8269c <ISPProtocol_LeaveISPMode+0x64>)
   8267c:	801a      	strh	r2, [r3, #0]
   8267e:	e7e4      	b.n	8264a <ISPProtocol_LeaveISPMode+0x12>
   82680:	20002dec 	.word	0x20002dec
   82684:	0008db64 	.word	0x0008db64
   82688:	00087a5d 	.word	0x00087a5d
   8268c:	000824b1 	.word	0x000824b1
   82690:	000827f9 	.word	0x000827f9
   82694:	000827e1 	.word	0x000827e1
   82698:	20002638 	.word	0x20002638
   8269c:	20002636 	.word	0x20002636

000826a0 <ISPProtocol_ChipErase>:
{
   826a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   826a4:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   826a6:	4b1b      	ldr	r3, [pc, #108]	; (82714 <ISPProtocol_ChipErase+0x74>)
   826a8:	8999      	ldrh	r1, [r3, #12]
   826aa:	2906      	cmp	r1, #6
   826ac:	d12a      	bne.n	82704 <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   826ae:	4b19      	ldr	r3, [pc, #100]	; (82714 <ISPProtocol_ChipErase+0x74>)
   826b0:	689b      	ldr	r3, [r3, #8]
   826b2:	6818      	ldr	r0, [r3, #0]
   826b4:	9000      	str	r0, [sp, #0]
   826b6:	889a      	ldrh	r2, [r3, #4]
   826b8:	f8ad 2004 	strh.w	r2, [sp, #4]
   826bc:	f893 a000 	ldrb.w	sl, [r3]
   826c0:	f893 9001 	ldrb.w	r9, [r3, #1]
   826c4:	f10d 0402 	add.w	r4, sp, #2
   826c8:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   826cc:	4f12      	ldr	r7, [pc, #72]	; (82718 <ISPProtocol_ChipErase+0x78>)
   826ce:	2600      	movs	r6, #0
   826d0:	4d12      	ldr	r5, [pc, #72]	; (8271c <ISPProtocol_ChipErase+0x7c>)
   826d2:	4633      	mov	r3, r6
   826d4:	4632      	mov	r2, r6
   826d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   826da:	4638      	mov	r0, r7
   826dc:	47a8      	blx	r5
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   826de:	4544      	cmp	r4, r8
   826e0:	d1f7      	bne.n	826d2 <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   826e2:	f1b9 0f00 	cmp.w	r9, #0
   826e6:	d111      	bne.n	8270c <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   826e8:	4650      	mov	r0, sl
   826ea:	4b0d      	ldr	r3, [pc, #52]	; (82720 <ISPProtocol_ChipErase+0x80>)
   826ec:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   826ee:	4b0d      	ldr	r3, [pc, #52]	; (82724 <ISPProtocol_ChipErase+0x84>)
   826f0:	2212      	movs	r2, #18
   826f2:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   826f4:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   826f8:	2202      	movs	r2, #2
   826fa:	4b0b      	ldr	r3, [pc, #44]	; (82728 <ISPProtocol_ChipErase+0x88>)
   826fc:	801a      	strh	r2, [r3, #0]
}
   826fe:	b002      	add	sp, #8
   82700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82704:	4809      	ldr	r0, [pc, #36]	; (8272c <ISPProtocol_ChipErase+0x8c>)
   82706:	4b0a      	ldr	r3, [pc, #40]	; (82730 <ISPProtocol_ChipErase+0x90>)
   82708:	4798      	blx	r3
   8270a:	e7f8      	b.n	826fe <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   8270c:	4b09      	ldr	r3, [pc, #36]	; (82734 <ISPProtocol_ChipErase+0x94>)
   8270e:	4798      	blx	r3
   82710:	4681      	mov	r9, r0
   82712:	e7ec      	b.n	826ee <ISPProtocol_ChipErase+0x4e>
   82714:	20002dec 	.word	0x20002dec
   82718:	40008000 	.word	0x40008000
   8271c:	000857a3 	.word	0x000857a3
   82720:	000824b1 	.word	0x000824b1
   82724:	20002638 	.word	0x20002638
   82728:	20002636 	.word	0x20002636
   8272c:	0008db54 	.word	0x0008db54
   82730:	00087a5d 	.word	0x00087a5d
   82734:	0008283d 	.word	0x0008283d

00082738 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   82738:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   8273a:	2098      	movs	r0, #152	; 0x98
   8273c:	4b1e      	ldr	r3, [pc, #120]	; (827b8 <ISPTarget_EnableTargetISP+0x80>)
   8273e:	4798      	blx	r3
   82740:	4b1e      	ldr	r3, [pc, #120]	; (827bc <ISPTarget_EnableTargetISP+0x84>)
   82742:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   82746:	4c1e      	ldr	r4, [pc, #120]	; (827c0 <ISPTarget_EnableTargetISP+0x88>)
   82748:	4620      	mov	r0, r4
   8274a:	4b1e      	ldr	r3, [pc, #120]	; (827c4 <ISPTarget_EnableTargetISP+0x8c>)
   8274c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8274e:	2380      	movs	r3, #128	; 0x80
   82750:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   82752:	6863      	ldr	r3, [r4, #4]
   82754:	f043 0301 	orr.w	r3, r3, #1
   82758:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8275a:	6863      	ldr	r3, [r4, #4]
   8275c:	f043 0310 	orr.w	r3, r3, #16
   82760:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   82762:	6863      	ldr	r3, [r4, #4]
   82764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82768:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   8276a:	4917      	ldr	r1, [pc, #92]	; (827c8 <ISPTarget_EnableTargetISP+0x90>)
   8276c:	4628      	mov	r0, r5
   8276e:	4b17      	ldr	r3, [pc, #92]	; (827cc <ISPTarget_EnableTargetISP+0x94>)
   82770:	4798      	blx	r3
	if (bauddiv < 0){
   82772:	1e05      	subs	r5, r0, #0
		bauddiv = 255;
   82774:	bfb8      	it	lt
   82776:	25ff      	movlt	r5, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   82778:	2200      	movs	r2, #0
   8277a:	4611      	mov	r1, r2
   8277c:	4620      	mov	r0, r4
   8277e:	4b14      	ldr	r3, [pc, #80]	; (827d0 <ISPTarget_EnableTargetISP+0x98>)
   82780:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   82782:	2201      	movs	r2, #1
   82784:	2100      	movs	r1, #0
   82786:	4620      	mov	r0, r4
   82788:	4b12      	ldr	r3, [pc, #72]	; (827d4 <ISPTarget_EnableTargetISP+0x9c>)
   8278a:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   8278c:	b2ea      	uxtb	r2, r5
   8278e:	2100      	movs	r1, #0
   82790:	4620      	mov	r0, r4
   82792:	4b11      	ldr	r3, [pc, #68]	; (827d8 <ISPTarget_EnableTargetISP+0xa0>)
   82794:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   82796:	2301      	movs	r3, #1
   82798:	6023      	str	r3, [r4, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8279a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8279e:	200e      	movs	r0, #14
   827a0:	4c0e      	ldr	r4, [pc, #56]	; (827dc <ISPTarget_EnableTargetISP+0xa4>)
   827a2:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   827a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827a8:	200d      	movs	r0, #13
   827aa:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   827ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827b0:	200f      	movs	r0, #15
   827b2:	47a0      	blx	r4
   827b4:	bd38      	pop	{r3, r4, r5, pc}
   827b6:	bf00      	nop
   827b8:	00082c61 	.word	0x00082c61
   827bc:	200002f8 	.word	0x200002f8
   827c0:	40008000 	.word	0x40008000
   827c4:	00085755 	.word	0x00085755
   827c8:	05b8d800 	.word	0x05b8d800
   827cc:	00085813 	.word	0x00085813
   827d0:	000857d7 	.word	0x000857d7
   827d4:	000857f5 	.word	0x000857f5
   827d8:	00085829 	.word	0x00085829
   827dc:	00085081 	.word	0x00085081

000827e0 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   827e0:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   827e2:	4803      	ldr	r0, [pc, #12]	; (827f0 <ISPTarget_DisableTargetISP+0x10>)
   827e4:	2302      	movs	r3, #2
   827e6:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   827e8:	4b02      	ldr	r3, [pc, #8]	; (827f4 <ISPTarget_DisableTargetISP+0x14>)
   827ea:	4798      	blx	r3
   827ec:	bd08      	pop	{r3, pc}
   827ee:	bf00      	nop
   827f0:	40008000 	.word	0x40008000
   827f4:	00085765 	.word	0x00085765

000827f8 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   827f8:	b508      	push	{r3, lr}
	if (ResetTarget)
   827fa:	b180      	cbz	r0, 8281e <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   827fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82800:	2011      	movs	r0, #17
   82802:	4b0a      	ldr	r3, [pc, #40]	; (8282c <ISPTarget_ChangeTargetResetLine+0x34>)
   82804:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   82806:	209e      	movs	r0, #158	; 0x9e
   82808:	4b09      	ldr	r3, [pc, #36]	; (82830 <ISPTarget_ChangeTargetResetLine+0x38>)
   8280a:	4798      	blx	r3
   8280c:	b918      	cbnz	r0, 82816 <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   8280e:	2011      	movs	r0, #17
   82810:	4b08      	ldr	r3, [pc, #32]	; (82834 <ISPTarget_ChangeTargetResetLine+0x3c>)
   82812:	4798      	blx	r3
   82814:	bd08      	pop	{r3, pc}
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   82816:	2011      	movs	r0, #17
   82818:	4b07      	ldr	r3, [pc, #28]	; (82838 <ISPTarget_ChangeTargetResetLine+0x40>)
   8281a:	4798      	blx	r3
   8281c:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   8281e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82822:	2011      	movs	r0, #17
   82824:	4b01      	ldr	r3, [pc, #4]	; (8282c <ISPTarget_ChangeTargetResetLine+0x34>)
   82826:	4798      	blx	r3
   82828:	bd08      	pop	{r3, pc}
   8282a:	bf00      	nop
   8282c:	00085081 	.word	0x00085081
   82830:	00082c61 	.word	0x00082c61
   82834:	0008504b 	.word	0x0008504b
   82838:	00085065 	.word	0x00085065

0008283c <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   8283c:	b570      	push	{r4, r5, r6, lr}
   8283e:	b082      	sub	sp, #8
   82840:	4c1a      	ldr	r4, [pc, #104]	; (828ac <ISPTarget_WaitWhileTargetBusy+0x70>)
   82842:	2600      	movs	r6, #0
   82844:	4d1a      	ldr	r5, [pc, #104]	; (828b0 <ISPTarget_WaitWhileTargetBusy+0x74>)
   82846:	4633      	mov	r3, r6
   82848:	4632      	mov	r2, r6
   8284a:	21f0      	movs	r1, #240	; 0xf0
   8284c:	4620      	mov	r0, r4
   8284e:	47a8      	blx	r5
   82850:	4633      	mov	r3, r6
   82852:	4632      	mov	r2, r6
   82854:	4631      	mov	r1, r6
   82856:	4620      	mov	r0, r4
   82858:	47a8      	blx	r5
   8285a:	4633      	mov	r3, r6
   8285c:	4632      	mov	r2, r6
   8285e:	4631      	mov	r1, r6
   82860:	4620      	mov	r0, r4
   82862:	47a8      	blx	r5
   82864:	4633      	mov	r3, r6
   82866:	4632      	mov	r2, r6
   82868:	4631      	mov	r1, r6
   8286a:	4620      	mov	r0, r4
   8286c:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8286e:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   82870:	f413 7f00 	tst.w	r3, #512	; 0x200
   82874:	d0fb      	beq.n	8286e <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   82876:	f10d 0205 	add.w	r2, sp, #5
   8287a:	f10d 0106 	add.w	r1, sp, #6
   8287e:	4620      	mov	r0, r4
   82880:	4b0c      	ldr	r3, [pc, #48]	; (828b4 <ISPTarget_WaitWhileTargetBusy+0x78>)
   82882:	4798      	blx	r3
			return  ReceivedByte;
   82884:	f89d 3006 	ldrb.w	r3, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   82888:	f013 0f01 	tst.w	r3, #1
   8288c:	d005      	beq.n	8289a <ISPTarget_WaitWhileTargetBusy+0x5e>
   8288e:	4b0a      	ldr	r3, [pc, #40]	; (828b8 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   82890:	681b      	ldr	r3, [r3, #0]
   82892:	2b00      	cmp	r3, #0
   82894:	d1d7      	bne.n	82846 <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   82896:	2081      	movs	r0, #129	; 0x81
   82898:	e005      	b.n	828a6 <ISPTarget_WaitWhileTargetBusy+0x6a>
   8289a:	4b07      	ldr	r3, [pc, #28]	; (828b8 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   8289c:	681b      	ldr	r3, [r3, #0]
   8289e:	2b00      	cmp	r3, #0
   828a0:	bf14      	ite	ne
   828a2:	2000      	movne	r0, #0
   828a4:	2081      	moveq	r0, #129	; 0x81
}
   828a6:	b002      	add	sp, #8
   828a8:	bd70      	pop	{r4, r5, r6, pc}
   828aa:	bf00      	nop
   828ac:	40008000 	.word	0x40008000
   828b0:	000857a3 	.word	0x000857a3
   828b4:	00085775 	.word	0x00085775
   828b8:	2000265c 	.word	0x2000265c

000828bc <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   828bc:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   828be:	4d0c      	ldr	r5, [pc, #48]	; (828f0 <ISPTarget_LoadExtendedAddress+0x34>)
   828c0:	2300      	movs	r3, #0
   828c2:	461a      	mov	r2, r3
   828c4:	214d      	movs	r1, #77	; 0x4d
   828c6:	4628      	mov	r0, r5
   828c8:	4c0a      	ldr	r4, [pc, #40]	; (828f4 <ISPTarget_LoadExtendedAddress+0x38>)
   828ca:	47a0      	blx	r4
   828cc:	2300      	movs	r3, #0
   828ce:	461a      	mov	r2, r3
   828d0:	4619      	mov	r1, r3
   828d2:	4628      	mov	r0, r5
   828d4:	47a0      	blx	r4
   828d6:	2300      	movs	r3, #0
   828d8:	461a      	mov	r2, r3
   828da:	4907      	ldr	r1, [pc, #28]	; (828f8 <ISPTarget_LoadExtendedAddress+0x3c>)
   828dc:	7889      	ldrb	r1, [r1, #2]
   828de:	4628      	mov	r0, r5
   828e0:	47a0      	blx	r4
   828e2:	2300      	movs	r3, #0
   828e4:	461a      	mov	r2, r3
   828e6:	4619      	mov	r1, r3
   828e8:	4628      	mov	r0, r5
   828ea:	47a0      	blx	r4
   828ec:	bd38      	pop	{r3, r4, r5, pc}
   828ee:	bf00      	nop
   828f0:	40008000 	.word	0x40008000
   828f4:	000857a3 	.word	0x000857a3
   828f8:	20002658 	.word	0x20002658

000828fc <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   828fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82900:	b082      	sub	sp, #8
   82902:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   82906:	f000 007e 	and.w	r0, r0, #126	; 0x7e
   8290a:	2808      	cmp	r0, #8
   8290c:	d04d      	beq.n	829aa <ISPTarget_WaitForProgComplete+0xae>
   8290e:	460f      	mov	r7, r1
   82910:	4690      	mov	r8, r2
   82912:	dd07      	ble.n	82924 <ISPTarget_WaitForProgComplete+0x28>
   82914:	2820      	cmp	r0, #32
   82916:	d009      	beq.n	8292c <ISPTarget_WaitForProgComplete+0x30>
   82918:	2840      	cmp	r0, #64	; 0x40
   8291a:	d046      	beq.n	829aa <ISPTarget_WaitForProgComplete+0xae>
   8291c:	2810      	cmp	r0, #16
   8291e:	d033      	beq.n	82988 <ISPTarget_WaitForProgComplete+0x8c>
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   82920:	2000      	movs	r0, #0
   82922:	e035      	b.n	82990 <ISPTarget_WaitForProgComplete+0x94>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   82924:	2802      	cmp	r0, #2
   82926:	d02f      	beq.n	82988 <ISPTarget_WaitForProgComplete+0x8c>
   82928:	2804      	cmp	r0, #4
   8292a:	d1f9      	bne.n	82920 <ISPTarget_WaitForProgComplete+0x24>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
   8292c:	ea4f 2a17 	mov.w	sl, r7, lsr #8
   82930:	4c1f      	ldr	r4, [pc, #124]	; (829b0 <ISPTarget_WaitForProgComplete+0xb4>)
   82932:	2600      	movs	r6, #0
   82934:	4d1f      	ldr	r5, [pc, #124]	; (829b4 <ISPTarget_WaitForProgComplete+0xb8>)
   82936:	4633      	mov	r3, r6
   82938:	4632      	mov	r2, r6
   8293a:	4649      	mov	r1, r9
   8293c:	4620      	mov	r0, r4
   8293e:	47a8      	blx	r5
   82940:	4633      	mov	r3, r6
   82942:	4632      	mov	r2, r6
   82944:	4651      	mov	r1, sl
   82946:	4620      	mov	r0, r4
   82948:	47a8      	blx	r5
   8294a:	4633      	mov	r3, r6
   8294c:	4632      	mov	r2, r6
   8294e:	b2f9      	uxtb	r1, r7
   82950:	4620      	mov	r0, r4
   82952:	47a8      	blx	r5
   82954:	4633      	mov	r3, r6
   82956:	4632      	mov	r2, r6
   82958:	4631      	mov	r1, r6
   8295a:	4620      	mov	r0, r4
   8295c:	47a8      	blx	r5
   8295e:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   82960:	f413 7f00 	tst.w	r3, #512	; 0x200
   82964:	d0fb      	beq.n	8295e <ISPTarget_WaitForProgComplete+0x62>
			spi_read(SPI, &ReceivedByte, &_);
   82966:	f10d 0205 	add.w	r2, sp, #5
   8296a:	f10d 0106 	add.w	r1, sp, #6
   8296e:	4620      	mov	r0, r4
   82970:	4b11      	ldr	r3, [pc, #68]	; (829b8 <ISPTarget_WaitForProgComplete+0xbc>)
   82972:	4798      	blx	r3
			return  ReceivedByte;
   82974:	f89d 3006 	ldrb.w	r3, [sp, #6]
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   82978:	4598      	cmp	r8, r3
   8297a:	d10f      	bne.n	8299c <ISPTarget_WaitForProgComplete+0xa0>
   8297c:	4b0f      	ldr	r3, [pc, #60]	; (829bc <ISPTarget_WaitForProgComplete+0xc0>)
   8297e:	681b      	ldr	r3, [r3, #0]
   82980:	2b00      	cmp	r3, #0
   82982:	d1d8      	bne.n	82936 <ISPTarget_WaitForProgComplete+0x3a>

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
   82984:	2080      	movs	r0, #128	; 0x80
   82986:	e003      	b.n	82990 <ISPTarget_WaitForProgComplete+0x94>
			ISPProtocol_DelayMS(DelayMS);
   82988:	4618      	mov	r0, r3
   8298a:	4b0d      	ldr	r3, [pc, #52]	; (829c0 <ISPTarget_WaitForProgComplete+0xc4>)
   8298c:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   8298e:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   82990:	2264      	movs	r2, #100	; 0x64
   82992:	4b0a      	ldr	r3, [pc, #40]	; (829bc <ISPTarget_WaitForProgComplete+0xc0>)
   82994:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   82996:	b002      	add	sp, #8
   82998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!(TimeoutTicksRemaining))
   8299c:	4b07      	ldr	r3, [pc, #28]	; (829bc <ISPTarget_WaitForProgComplete+0xc0>)
   8299e:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   829a0:	2b00      	cmp	r3, #0
   829a2:	bf14      	ite	ne
   829a4:	2000      	movne	r0, #0
   829a6:	2080      	moveq	r0, #128	; 0x80
   829a8:	e7f2      	b.n	82990 <ISPTarget_WaitForProgComplete+0x94>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   829aa:	4b06      	ldr	r3, [pc, #24]	; (829c4 <ISPTarget_WaitForProgComplete+0xc8>)
   829ac:	4798      	blx	r3
			break;
   829ae:	e7ef      	b.n	82990 <ISPTarget_WaitForProgComplete+0x94>
   829b0:	40008000 	.word	0x40008000
   829b4:	000857a3 	.word	0x000857a3
   829b8:	00085775 	.word	0x00085775
   829bc:	2000265c 	.word	0x2000265c
   829c0:	000824b1 	.word	0x000824b1
   829c4:	0008283d 	.word	0x0008283d

000829c8 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   829c8:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   829ca:	4b7d      	ldr	r3, [pc, #500]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   829cc:	789c      	ldrb	r4, [r3, #2]
   829ce:	4b7d      	ldr	r3, [pc, #500]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   829d0:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   829d2:	4b7d      	ldr	r3, [pc, #500]	; (82bc8 <V2Protocol_ProcessCommand+0x200>)
   829d4:	4798      	blx	r3

	switch (V2Command)
   829d6:	1e63      	subs	r3, r4, #1
   829d8:	2b21      	cmp	r3, #33	; 0x21
   829da:	f200 80e6 	bhi.w	82baa <V2Protocol_ProcessCommand+0x1e2>
   829de:	e8df f013 	tbh	[pc, r3, lsl #1]
   829e2:	0022      	.short	0x0022
   829e4:	00370037 	.word	0x00370037
   829e8:	00e400e4 	.word	0x00e400e4
   829ec:	00e4006c 	.word	0x00e4006c
   829f0:	00e400e4 	.word	0x00e400e4
   829f4:	00e4008b 	.word	0x00e4008b
   829f8:	00e400e4 	.word	0x00e400e4
   829fc:	00e400e4 	.word	0x00e400e4
   82a00:	00970093 	.word	0x00970093
   82a04:	009b00a7 	.word	0x009b00a7
   82a08:	009b00a1 	.word	0x009b00a1
   82a0c:	00b000a1 	.word	0x00b000a1
   82a10:	00b000ab 	.word	0x00b000ab
   82a14:	00ab00ab 	.word	0x00ab00ab
   82a18:	00b500ab 	.word	0x00b500ab
   82a1c:	00e400e4 	.word	0x00e400e4
   82a20:	00d200b9 	.word	0x00d200b9
   82a24:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82a26:	4c67      	ldr	r4, [pc, #412]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82a28:	2300      	movs	r3, #0
   82a2a:	7063      	strb	r3, [r4, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82a2c:	230d      	movs	r3, #13
   82a2e:	70a3      	strb	r3, [r4, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82a30:	4b66      	ldr	r3, [pc, #408]	; (82bcc <V2Protocol_ProcessCommand+0x204>)
   82a32:	cb07      	ldmia	r3!, {r0, r1, r2}
   82a34:	f8c4 0003 	str.w	r0, [r4, #3]
   82a38:	f8c4 1007 	str.w	r1, [r4, #7]
   82a3c:	f8c4 200b 	str.w	r2, [r4, #11]
   82a40:	781b      	ldrb	r3, [r3, #0]
   82a42:	73e3      	strb	r3, [r4, #15]
	udd_g_ctrlreq.payload = status_payload;
   82a44:	4b5e      	ldr	r3, [pc, #376]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82a46:	609c      	str	r4, [r3, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   82a48:	2210      	movs	r2, #16
   82a4a:	819a      	strh	r2, [r3, #12]
	return true;
   82a4c:	2001      	movs	r0, #1
   82a4e:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82a50:	4b5b      	ldr	r3, [pc, #364]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82a52:	689b      	ldr	r3, [r3, #8]
   82a54:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   82a56:	2c02      	cmp	r4, #2
   82a58:	d00c      	beq.n	82a74 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   82a5a:	2202      	movs	r2, #2
   82a5c:	4b5c      	ldr	r3, [pc, #368]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82a5e:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a60:	4628      	mov	r0, r5
   82a62:	4b5c      	ldr	r3, [pc, #368]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a64:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a66:	2c03      	cmp	r4, #3
   82a68:	d017      	beq.n	82a9a <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82a6a:	22c0      	movs	r2, #192	; 0xc0
   82a6c:	4b5a      	ldr	r3, [pc, #360]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a6e:	705a      	strb	r2, [r3, #1]
	return true;
   82a70:	2001      	movs	r0, #1
   82a72:	bd38      	pop	{r3, r4, r5, pc}
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   82a74:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   82a76:	2202      	movs	r2, #2
   82a78:	4b55      	ldr	r3, [pc, #340]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82a7a:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a7c:	4628      	mov	r0, r5
   82a7e:	4b55      	ldr	r3, [pc, #340]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a80:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82a82:	f010 0f02 	tst.w	r0, #2
   82a86:	d0f0      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82a88:	2200      	movs	r2, #0
   82a8a:	4b53      	ldr	r3, [pc, #332]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a8c:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a8e:	4621      	mov	r1, r4
   82a90:	4628      	mov	r0, r5
   82a92:	4b52      	ldr	r3, [pc, #328]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82a94:	4798      	blx	r3
	return true;
   82a96:	2001      	movs	r0, #1
   82a98:	bd38      	pop	{r3, r4, r5, pc}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a9a:	f010 0f01 	tst.w	r0, #1
   82a9e:	d0e4      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82aa0:	4c4d      	ldr	r4, [pc, #308]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82aa2:	2300      	movs	r3, #0
   82aa4:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82aa6:	4628      	mov	r0, r5
   82aa8:	4b4d      	ldr	r3, [pc, #308]	; (82be0 <V2Protocol_ProcessCommand+0x218>)
   82aaa:	4798      	blx	r3
   82aac:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   82aae:	4a48      	ldr	r2, [pc, #288]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82ab0:	8813      	ldrh	r3, [r2, #0]
   82ab2:	3301      	adds	r3, #1
   82ab4:	8013      	strh	r3, [r2, #0]
	return true;
   82ab6:	2001      	movs	r0, #1
   82ab8:	bd38      	pop	{r3, r4, r5, pc}
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82aba:	4b41      	ldr	r3, [pc, #260]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82abc:	689b      	ldr	r3, [r3, #8]
   82abe:	78da      	ldrb	r2, [r3, #3]
   82ac0:	7899      	ldrb	r1, [r3, #2]
   82ac2:	0409      	lsls	r1, r1, #16
   82ac4:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82ac8:	781a      	ldrb	r2, [r3, #0]
   82aca:	4311      	orrs	r1, r2
   82acc:	785b      	ldrb	r3, [r3, #1]
   82ace:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   82ad2:	4b44      	ldr	r3, [pc, #272]	; (82be4 <V2Protocol_ProcessCommand+0x21c>)
   82ad4:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   82ad6:	2900      	cmp	r1, #0
   82ad8:	db0a      	blt.n	82af0 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   82ada:	4843      	ldr	r0, [pc, #268]	; (82be8 <V2Protocol_ProcessCommand+0x220>)
   82adc:	4b43      	ldr	r3, [pc, #268]	; (82bec <V2Protocol_ProcessCommand+0x224>)
   82ade:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82ae0:	2200      	movs	r2, #0
   82ae2:	4b3d      	ldr	r3, [pc, #244]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82ae4:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82ae6:	2202      	movs	r2, #2
   82ae8:	4b39      	ldr	r3, [pc, #228]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82aea:	801a      	strh	r2, [r3, #0]
	return true;
   82aec:	2001      	movs	r0, #1
   82aee:	bd38      	pop	{r3, r4, r5, pc}
	  MustLoadExtendedAddress = true;
   82af0:	2201      	movs	r2, #1
   82af2:	4b3f      	ldr	r3, [pc, #252]	; (82bf0 <V2Protocol_ProcessCommand+0x228>)
   82af4:	701a      	strb	r2, [r3, #0]
   82af6:	e7f0      	b.n	82ada <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82af8:	2200      	movs	r2, #0
   82afa:	4b37      	ldr	r3, [pc, #220]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82afc:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82afe:	2202      	movs	r2, #2
   82b00:	4b33      	ldr	r3, [pc, #204]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82b02:	801a      	strh	r2, [r3, #0]
	return true;
   82b04:	2001      	movs	r0, #1
   82b06:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_EnterISPMode();
   82b08:	4b3a      	ldr	r3, [pc, #232]	; (82bf4 <V2Protocol_ProcessCommand+0x22c>)
   82b0a:	4798      	blx	r3
	return true;
   82b0c:	2001      	movs	r0, #1
			break;
   82b0e:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_LeaveISPMode();
   82b10:	4b39      	ldr	r3, [pc, #228]	; (82bf8 <V2Protocol_ProcessCommand+0x230>)
   82b12:	4798      	blx	r3
	return true;
   82b14:	2001      	movs	r0, #1
			break;
   82b16:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82b18:	4938      	ldr	r1, [pc, #224]	; (82bfc <V2Protocol_ProcessCommand+0x234>)
   82b1a:	4620      	mov	r0, r4
   82b1c:	4b38      	ldr	r3, [pc, #224]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b1e:	4798      	blx	r3
	return true;
   82b20:	2001      	movs	r0, #1
			break;
   82b22:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82b24:	4935      	ldr	r1, [pc, #212]	; (82bfc <V2Protocol_ProcessCommand+0x234>)
   82b26:	4620      	mov	r0, r4
   82b28:	4b36      	ldr	r3, [pc, #216]	; (82c04 <V2Protocol_ProcessCommand+0x23c>)
   82b2a:	4798      	blx	r3
	return true;
   82b2c:	2001      	movs	r0, #1
			break;
   82b2e:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ChipErase();
   82b30:	4b35      	ldr	r3, [pc, #212]	; (82c08 <V2Protocol_ProcessCommand+0x240>)
   82b32:	4798      	blx	r3
	return true;
   82b34:	2001      	movs	r0, #1
			break;
   82b36:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   82b38:	4620      	mov	r0, r4
   82b3a:	4b34      	ldr	r3, [pc, #208]	; (82c0c <V2Protocol_ProcessCommand+0x244>)
   82b3c:	4798      	blx	r3
	return true;
   82b3e:	2001      	movs	r0, #1
			break;
   82b40:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_WriteFuseLock(V2Command);
   82b42:	4620      	mov	r0, r4
   82b44:	4b32      	ldr	r3, [pc, #200]	; (82c10 <V2Protocol_ProcessCommand+0x248>)
   82b46:	4798      	blx	r3
	return true;
   82b48:	2001      	movs	r0, #1
			break;
   82b4a:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_SPIMulti();
   82b4c:	4b31      	ldr	r3, [pc, #196]	; (82c14 <V2Protocol_ProcessCommand+0x24c>)
   82b4e:	4798      	blx	r3
	return true;
   82b50:	2001      	movs	r0, #1
			break;
   82b52:	bd38      	pop	{r3, r4, r5, pc}
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82b54:	4a1a      	ldr	r2, [pc, #104]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82b56:	4b20      	ldr	r3, [pc, #128]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82b58:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   82b5a:	4b1d      	ldr	r3, [pc, #116]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82b5c:	8819      	ldrh	r1, [r3, #0]
   82b5e:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   82b60:	2200      	movs	r2, #0
   82b62:	801a      	strh	r2, [r3, #0]
			return true;
   82b64:	2001      	movs	r0, #1
   82b66:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b68:	4a15      	ldr	r2, [pc, #84]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82b6a:	8853      	ldrh	r3, [r2, #2]
   82b6c:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b6e:	88d2      	ldrh	r2, [r2, #6]
   82b70:	1899      	adds	r1, r3, r2
   82b72:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82b76:	dc20      	bgt.n	82bba <V2Protocol_ProcessCommand+0x1f2>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   82b78:	4811      	ldr	r0, [pc, #68]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82b7a:	4920      	ldr	r1, [pc, #128]	; (82bfc <V2Protocol_ProcessCommand+0x234>)
   82b7c:	440b      	add	r3, r1
   82b7e:	6083      	str	r3, [r0, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82b80:	8182      	strh	r2, [r0, #12]
			return true;
   82b82:	2001      	movs	r0, #1
   82b84:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b86:	4a0e      	ldr	r2, [pc, #56]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82b88:	8853      	ldrh	r3, [r2, #2]
   82b8a:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b8c:	88d2      	ldrh	r2, [r2, #6]
   82b8e:	1899      	adds	r1, r3, r2
   82b90:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82b94:	dd01      	ble.n	82b9a <V2Protocol_ProcessCommand+0x1d2>
				return false;
   82b96:	2000      	movs	r0, #0
   82b98:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82b9a:	4909      	ldr	r1, [pc, #36]	; (82bc0 <V2Protocol_ProcessCommand+0x1f8>)
   82b9c:	6889      	ldr	r1, [r1, #8]
   82b9e:	4817      	ldr	r0, [pc, #92]	; (82bfc <V2Protocol_ProcessCommand+0x234>)
   82ba0:	4418      	add	r0, r3
   82ba2:	4b1d      	ldr	r3, [pc, #116]	; (82c18 <V2Protocol_ProcessCommand+0x250>)
   82ba4:	4798      	blx	r3
			return true;
   82ba6:	2001      	movs	r0, #1
   82ba8:	bd38      	pop	{r3, r4, r5, pc}
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   82baa:	22c9      	movs	r2, #201	; 0xc9
   82bac:	4b0a      	ldr	r3, [pc, #40]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82bae:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82bb0:	2202      	movs	r2, #2
   82bb2:	4b07      	ldr	r3, [pc, #28]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82bb4:	801a      	strh	r2, [r3, #0]
	return true;
   82bb6:	2001      	movs	r0, #1
   82bb8:	bd38      	pop	{r3, r4, r5, pc}
				return false;
   82bba:	2000      	movs	r0, #0
   82bbc:	bd38      	pop	{r3, r4, r5, pc}
   82bbe:	bf00      	nop
   82bc0:	20002dec 	.word	0x20002dec
   82bc4:	20001a24 	.word	0x20001a24
   82bc8:	00083409 	.word	0x00083409
   82bcc:	0008dbc8 	.word	0x0008dbc8
   82bd0:	20002636 	.word	0x20002636
   82bd4:	00082c4d 	.word	0x00082c4d
   82bd8:	20002638 	.word	0x20002638
   82bdc:	00082c75 	.word	0x00082c75
   82be0:	00082c61 	.word	0x00082c61
   82be4:	20002658 	.word	0x20002658
   82be8:	0008dbd8 	.word	0x0008dbd8
   82bec:	00087a5d 	.word	0x00087a5d
   82bf0:	20002634 	.word	0x20002634
   82bf4:	000824e5 	.word	0x000824e5
   82bf8:	00082639 	.word	0x00082639
   82bfc:	20001924 	.word	0x20001924
   82c00:	00081fd5 	.word	0x00081fd5
   82c04:	0008224d 	.word	0x0008224d
   82c08:	000826a1 	.word	0x000826a1
   82c0c:	00082391 	.word	0x00082391
   82c10:	0008243d 	.word	0x0008243d
   82c14:	000824ad 	.word	0x000824ad
   82c18:	00087a85 	.word	0x00087a85

00082c1c <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
   82c1c:	4b09      	ldr	r3, [pc, #36]	; (82c44 <V2Params_GetParamFromTable+0x28>)
   82c1e:	781b      	ldrb	r3, [r3, #0]
   82c20:	4283      	cmp	r3, r0
   82c22:	d00a      	beq.n	82c3a <V2Params_GetParamFromTable+0x1e>
		  return CurrTableItem;

		CurrTableItem++;
   82c24:	4b08      	ldr	r3, [pc, #32]	; (82c48 <V2Params_GetParamFromTable+0x2c>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c26:	f103 011b 	add.w	r1, r3, #27
		if (ParamID == CurrTableItem->ParamID)
   82c2a:	781a      	ldrb	r2, [r3, #0]
   82c2c:	4282      	cmp	r2, r0
   82c2e:	d006      	beq.n	82c3e <V2Params_GetParamFromTable+0x22>
		CurrTableItem++;
   82c30:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c32:	428b      	cmp	r3, r1
   82c34:	d1f9      	bne.n	82c2a <V2Params_GetParamFromTable+0xe>
	}

	return NULL;
   82c36:	2000      	movs	r0, #0
   82c38:	4770      	bx	lr
	ParameterItem_t* CurrTableItem = ParameterTable;
   82c3a:	4802      	ldr	r0, [pc, #8]	; (82c44 <V2Params_GetParamFromTable+0x28>)
   82c3c:	4770      	bx	lr
   82c3e:	4618      	mov	r0, r3
}
   82c40:	4770      	bx	lr
   82c42:	bf00      	nop
   82c44:	20000588 	.word	0x20000588
   82c48:	2000058b 	.word	0x2000058b

00082c4c <V2Params_GetParameterPrivileges>:
{
   82c4c:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c4e:	4b03      	ldr	r3, [pc, #12]	; (82c5c <V2Params_GetParameterPrivileges+0x10>)
   82c50:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c52:	b108      	cbz	r0, 82c58 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   82c54:	7840      	ldrb	r0, [r0, #1]
   82c56:	bd08      	pop	{r3, pc}
	  return 0;
   82c58:	2000      	movs	r0, #0
}
   82c5a:	bd08      	pop	{r3, pc}
   82c5c:	00082c1d 	.word	0x00082c1d

00082c60 <V2Params_GetParameterValue>:
{
   82c60:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c62:	4b03      	ldr	r3, [pc, #12]	; (82c70 <V2Params_GetParameterValue+0x10>)
   82c64:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c66:	b108      	cbz	r0, 82c6c <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   82c68:	7880      	ldrb	r0, [r0, #2]
   82c6a:	bd08      	pop	{r3, pc}
	  return 0;
   82c6c:	2000      	movs	r0, #0
}
   82c6e:	bd08      	pop	{r3, pc}
   82c70:	00082c1d 	.word	0x00082c1d

00082c74 <V2Params_SetParameterValue>:
{
   82c74:	b510      	push	{r4, lr}
   82c76:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c78:	4b02      	ldr	r3, [pc, #8]	; (82c84 <V2Params_SetParameterValue+0x10>)
   82c7a:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c7c:	b100      	cbz	r0, 82c80 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   82c7e:	7084      	strb	r4, [r0, #2]
   82c80:	bd10      	pop	{r4, pc}
   82c82:	bf00      	nop
   82c84:	00082c1d 	.word	0x00082c1d

00082c88 <ctrl_readmem_ctrl>:
	buflen,
	main_vendor_bulk_in_received
	);	
}

void ctrl_readmem_ctrl(void){
   82c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82c8a:	4b0a      	ldr	r3, [pc, #40]	; (82cb4 <ctrl_readmem_ctrl+0x2c>)
   82c8c:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82c8e:	685f      	ldr	r7, [r3, #4]
	
	FPGA_releaselock();
   82c90:	4b09      	ldr	r3, [pc, #36]	; (82cb8 <ctrl_readmem_ctrl+0x30>)
   82c92:	4798      	blx	r3
	while(!FPGA_setlock(fpga_ctrlmem));
   82c94:	2505      	movs	r5, #5
   82c96:	4c09      	ldr	r4, [pc, #36]	; (82cbc <ctrl_readmem_ctrl+0x34>)
   82c98:	4628      	mov	r0, r5
   82c9a:	47a0      	blx	r4
   82c9c:	2800      	cmp	r0, #0
   82c9e:	d0fb      	beq.n	82c98 <ctrl_readmem_ctrl+0x10>
	
	/* Set address */
	FPGA_setaddr(address);
   82ca0:	4638      	mov	r0, r7
   82ca2:	4b07      	ldr	r3, [pc, #28]	; (82cc0 <ctrl_readmem_ctrl+0x38>)
   82ca4:	4798      	blx	r3

	/* Do memory read */
	ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82ca6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   82caa:	4b06      	ldr	r3, [pc, #24]	; (82cc4 <ctrl_readmem_ctrl+0x3c>)
   82cac:	601a      	str	r2, [r3, #0]
	
	/* Set size to read */
	ctrlmemread_size = buflen;
   82cae:	4b06      	ldr	r3, [pc, #24]	; (82cc8 <ctrl_readmem_ctrl+0x40>)
   82cb0:	601e      	str	r6, [r3, #0]
   82cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cb4:	20001a48 	.word	0x20001a48
   82cb8:	00081d8d 	.word	0x00081d8d
   82cbc:	00081d61 	.word	0x00081d61
   82cc0:	00081da5 	.word	0x00081da5
   82cc4:	20001a88 	.word	0x20001a88
   82cc8:	20001a8c 	.word	0x20001a8c

00082ccc <ctrl_writemem_ctrl>:
	
	/* Start Transaction */
}

void ctrl_writemem_ctrl(void){
   82ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82cce:	4b0e      	ldr	r3, [pc, #56]	; (82d08 <ctrl_writemem_ctrl+0x3c>)
   82cd0:	681c      	ldr	r4, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82cd2:	685f      	ldr	r7, [r3, #4]
	
	uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
	
	//printf("Writing to %x, %d\n", address, buflen);
	
	FPGA_releaselock();
   82cd4:	4b0d      	ldr	r3, [pc, #52]	; (82d0c <ctrl_writemem_ctrl+0x40>)
   82cd6:	4798      	blx	r3
	while(!FPGA_setlock(fpga_generic));
   82cd8:	2601      	movs	r6, #1
   82cda:	4d0d      	ldr	r5, [pc, #52]	; (82d10 <ctrl_writemem_ctrl+0x44>)
   82cdc:	4630      	mov	r0, r6
   82cde:	47a8      	blx	r5
   82ce0:	2800      	cmp	r0, #0
   82ce2:	d0fb      	beq.n	82cdc <ctrl_writemem_ctrl+0x10>
	
	/* Set address */
	FPGA_setaddr(address);
   82ce4:	4638      	mov	r0, r7
   82ce6:	4b0b      	ldr	r3, [pc, #44]	; (82d14 <ctrl_writemem_ctrl+0x48>)
   82ce8:	4798      	blx	r3

	/* Start Transaction */

	/* Do memory write */
	for(unsigned int i = 0; i < buflen; i++){
   82cea:	b14c      	cbz	r4, 82d00 <ctrl_writemem_ctrl+0x34>
   82cec:	4a0a      	ldr	r2, [pc, #40]	; (82d18 <ctrl_writemem_ctrl+0x4c>)
   82cee:	2300      	movs	r3, #0
		xram[i] = ctrlbuf_payload[i];
   82cf0:	4d0a      	ldr	r5, [pc, #40]	; (82d1c <ctrl_writemem_ctrl+0x50>)
   82cf2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82cf6:	6829      	ldr	r1, [r5, #0]
   82cf8:	54c8      	strb	r0, [r1, r3]
	for(unsigned int i = 0; i < buflen; i++){
   82cfa:	3301      	adds	r3, #1
   82cfc:	429c      	cmp	r4, r3
   82cfe:	d1f8      	bne.n	82cf2 <ctrl_writemem_ctrl+0x26>
	}
	
	FPGA_releaselock();
   82d00:	4b02      	ldr	r3, [pc, #8]	; (82d0c <ctrl_writemem_ctrl+0x40>)
   82d02:	4798      	blx	r3
   82d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d06:	bf00      	nop
   82d08:	20001a48 	.word	0x20001a48
   82d0c:	00081d8d 	.word	0x00081d8d
   82d10:	00081d61 	.word	0x00081d61
   82d14:	00081da5 	.word	0x00081da5
   82d18:	20001a4f 	.word	0x20001a4f
   82d1c:	200002f4 	.word	0x200002f4

00082d20 <ctrl_writemem_bulk>:
}

void ctrl_writemem_bulk(void){
   82d20:	b570      	push	{r4, r5, r6, lr}
	//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d22:	4b07      	ldr	r3, [pc, #28]	; (82d40 <ctrl_writemem_bulk+0x20>)
   82d24:	685e      	ldr	r6, [r3, #4]
	
	// TODO: see block in
	FPGA_releaselock();
   82d26:	4b07      	ldr	r3, [pc, #28]	; (82d44 <ctrl_writemem_bulk+0x24>)
   82d28:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockout));
   82d2a:	2504      	movs	r5, #4
   82d2c:	4c06      	ldr	r4, [pc, #24]	; (82d48 <ctrl_writemem_bulk+0x28>)
   82d2e:	4628      	mov	r0, r5
   82d30:	47a0      	blx	r4
   82d32:	2800      	cmp	r0, #0
   82d34:	d0fb      	beq.n	82d2e <ctrl_writemem_bulk+0xe>
	
	/* Set address */
	FPGA_setaddr(address);
   82d36:	4630      	mov	r0, r6
   82d38:	4b04      	ldr	r3, [pc, #16]	; (82d4c <ctrl_writemem_bulk+0x2c>)
   82d3a:	4798      	blx	r3
   82d3c:	bd70      	pop	{r4, r5, r6, pc}
   82d3e:	bf00      	nop
   82d40:	20001a48 	.word	0x20001a48
   82d44:	00081d8d 	.word	0x00081d8d
   82d48:	00081d61 	.word	0x00081d61
   82d4c:	00081da5 	.word	0x00081da5

00082d50 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   82d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   82d52:	4b0a      	ldr	r3, [pc, #40]	; (82d7c <ctrl_readmem_bulk+0x2c>)
   82d54:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d56:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82d58:	4b09      	ldr	r3, [pc, #36]	; (82d80 <ctrl_readmem_bulk+0x30>)
   82d5a:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockin));
   82d5c:	2502      	movs	r5, #2
   82d5e:	4c09      	ldr	r4, [pc, #36]	; (82d84 <ctrl_readmem_bulk+0x34>)
   82d60:	4628      	mov	r0, r5
   82d62:	47a0      	blx	r4
   82d64:	2800      	cmp	r0, #0
   82d66:	d0fb      	beq.n	82d60 <ctrl_readmem_bulk+0x10>
	FPGA_setaddr(address);
   82d68:	4638      	mov	r0, r7
   82d6a:	4b07      	ldr	r3, [pc, #28]	; (82d88 <ctrl_readmem_bulk+0x38>)
   82d6c:	4798      	blx	r3
	udi_vendor_bulk_in_run(
   82d6e:	4a07      	ldr	r2, [pc, #28]	; (82d8c <ctrl_readmem_bulk+0x3c>)
   82d70:	4631      	mov	r1, r6
   82d72:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   82d76:	4b06      	ldr	r3, [pc, #24]	; (82d90 <ctrl_readmem_bulk+0x40>)
   82d78:	4798      	blx	r3
   82d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d7c:	20001a48 	.word	0x20001a48
   82d80:	00081d8d 	.word	0x00081d8d
   82d84:	00081d61 	.word	0x00081d61
   82d88:	00081da5 	.word	0x00081da5
   82d8c:	00082ee1 	.word	0x00082ee1
   82d90:	0008451d 	.word	0x0008451d

00082d94 <ctrl_xmega_program_void>:
}
#endif
    			

void ctrl_xmega_program_void(void)
{
   82d94:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   82d96:	4b01      	ldr	r3, [pc, #4]	; (82d9c <ctrl_xmega_program_void+0x8>)
   82d98:	4798      	blx	r3
   82d9a:	bd08      	pop	{r3, pc}
   82d9c:	00083d7d 	.word	0x00083d7d

00082da0 <ctrl_avr_program_void>:
}

void ctrl_avr_program_void(void)
{
   82da0:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   82da2:	4b01      	ldr	r3, [pc, #4]	; (82da8 <ctrl_avr_program_void+0x8>)
   82da4:	4798      	blx	r3
   82da6:	bd08      	pop	{r3, pc}
   82da8:	000829c9 	.word	0x000829c9

00082dac <ctrl_usart2_enabledump>:
}

static void ctrl_usart2_enabledump(void)
{
   82dac:	b510      	push	{r4, lr}
   82dae:	b084      	sub	sp, #16
	switch(udd_g_ctrlreq.req.wValue & 0xFF){
   82db0:	4b1e      	ldr	r3, [pc, #120]	; (82e2c <ctrl_usart2_enabledump+0x80>)
   82db2:	789b      	ldrb	r3, [r3, #2]
   82db4:	b11b      	cbz	r3, 82dbe <ctrl_usart2_enabledump+0x12>
   82db6:	2b01      	cmp	r3, #1
   82db8:	d012      	beq.n	82de0 <ctrl_usart2_enabledump+0x34>
			
		default:
			break;
	}

}
   82dba:	b004      	add	sp, #16
   82dbc:	bd10      	pop	{r4, pc}
			usart_disable_rx(USART2);
   82dbe:	4c1c      	ldr	r4, [pc, #112]	; (82e30 <ctrl_usart2_enabledump+0x84>)
   82dc0:	4620      	mov	r0, r4
   82dc2:	4b1c      	ldr	r3, [pc, #112]	; (82e34 <ctrl_usart2_enabledump+0x88>)
   82dc4:	4798      	blx	r3
			usart_disable_tx(USART2);
   82dc6:	4620      	mov	r0, r4
   82dc8:	4b1b      	ldr	r3, [pc, #108]	; (82e38 <ctrl_usart2_enabledump+0x8c>)
   82dca:	4798      	blx	r3
			usart_enable_interrupt(USART2, 0);
   82dcc:	2100      	movs	r1, #0
   82dce:	4620      	mov	r0, r4
   82dd0:	4b1a      	ldr	r3, [pc, #104]	; (82e3c <ctrl_usart2_enabledump+0x90>)
   82dd2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82dd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82dd8:	4b19      	ldr	r3, [pc, #100]	; (82e40 <ctrl_usart2_enabledump+0x94>)
   82dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82dde:	e7ec      	b.n	82dba <ctrl_usart2_enabledump+0xe>
			pmc_enable_periph_clk(ID_USART2);
   82de0:	200f      	movs	r0, #15
   82de2:	4b18      	ldr	r3, [pc, #96]	; (82e44 <ctrl_usart2_enabledump+0x98>)
   82de4:	4798      	blx	r3
			opts.channel_mode = US_MR_CHMODE_NORMAL;
   82de6:	2300      	movs	r3, #0
   82de8:	9303      	str	r3, [sp, #12]
			opts.spi_mode = SPI_MODE_0;
   82dea:	9302      	str	r3, [sp, #8]
			opts.char_length = US_MR_CHRL_8_BIT;
   82dec:	23c0      	movs	r3, #192	; 0xc0
   82dee:	9301      	str	r3, [sp, #4]
			usart_init_spi_slave(USART2, &opts);
   82df0:	4c0f      	ldr	r4, [pc, #60]	; (82e30 <ctrl_usart2_enabledump+0x84>)
   82df2:	4669      	mov	r1, sp
   82df4:	4620      	mov	r0, r4
   82df6:	4b14      	ldr	r3, [pc, #80]	; (82e48 <ctrl_usart2_enabledump+0x9c>)
   82df8:	4798      	blx	r3
			usart_enable_rx(USART2);
   82dfa:	4620      	mov	r0, r4
   82dfc:	4b13      	ldr	r3, [pc, #76]	; (82e4c <ctrl_usart2_enabledump+0xa0>)
   82dfe:	4798      	blx	r3
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82e00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82e04:	4b0e      	ldr	r3, [pc, #56]	; (82e40 <ctrl_usart2_enabledump+0x94>)
   82e06:	601a      	str	r2, [r3, #0]
			usart_enable_interrupt(USART2, US_IER_RXRDY);
   82e08:	2101      	movs	r1, #1
   82e0a:	4620      	mov	r0, r4
   82e0c:	4b0b      	ldr	r3, [pc, #44]	; (82e3c <ctrl_usart2_enabledump+0x90>)
   82e0e:	4798      	blx	r3
			gpio_configure_pin(PIO_PA23_IDX, (PIO_PERIPH_A | PIO_DEFAULT));
   82e10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e14:	2017      	movs	r0, #23
   82e16:	4c0e      	ldr	r4, [pc, #56]	; (82e50 <ctrl_usart2_enabledump+0xa4>)
   82e18:	47a0      	blx	r4
			gpio_configure_pin(PIO_PB22_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e1e:	2036      	movs	r0, #54	; 0x36
   82e20:	47a0      	blx	r4
			gpio_configure_pin(PIO_PA25_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e26:	2019      	movs	r0, #25
   82e28:	47a0      	blx	r4
}
   82e2a:	e7c6      	b.n	82dba <ctrl_usart2_enabledump+0xe>
   82e2c:	20002dec 	.word	0x20002dec
   82e30:	40098000 	.word	0x40098000
   82e34:	00086fb3 	.word	0x00086fb3
   82e38:	00086fa3 	.word	0x00086fa3
   82e3c:	00086fb9 	.word	0x00086fb9
   82e40:	e000e100 	.word	0xe000e100
   82e44:	000853d5 	.word	0x000853d5
   82e48:	00086ef5 	.word	0x00086ef5
   82e4c:	00086fad 	.word	0x00086fad
   82e50:	00085081 	.word	0x00085081

00082e54 <ctrl_usart_cb_data>:
{
	ctrl_usart(USART_TARGET, false);
}

static void ctrl_usart_cb_data(void)
{		
   82e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82e56:	4b0a      	ldr	r3, [pc, #40]	; (82e80 <ctrl_usart_cb_data+0x2c>)
   82e58:	88da      	ldrh	r2, [r3, #6]
   82e5a:	899b      	ldrh	r3, [r3, #12]
   82e5c:	4293      	cmp	r3, r2
   82e5e:	d30d      	bcc.n	82e7c <ctrl_usart_cb_data+0x28>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e60:	b162      	cbz	r2, 82e7c <ctrl_usart_cb_data+0x28>
   82e62:	2400      	movs	r4, #0
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   82e64:	4d06      	ldr	r5, [pc, #24]	; (82e80 <ctrl_usart_cb_data+0x2c>)
   82e66:	4f07      	ldr	r7, [pc, #28]	; (82e84 <ctrl_usart_cb_data+0x30>)
   82e68:	4e07      	ldr	r6, [pc, #28]	; (82e88 <ctrl_usart_cb_data+0x34>)
   82e6a:	68ab      	ldr	r3, [r5, #8]
   82e6c:	5d1a      	ldrb	r2, [r3, r4]
   82e6e:	2100      	movs	r1, #0
   82e70:	4638      	mov	r0, r7
   82e72:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e74:	3401      	adds	r4, #1
   82e76:	88eb      	ldrh	r3, [r5, #6]
   82e78:	42a3      	cmp	r3, r4
   82e7a:	dcf6      	bgt.n	82e6a <ctrl_usart_cb_data+0x16>
   82e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e7e:	bf00      	nop
   82e80:	20002dec 	.word	0x20002dec
   82e84:	40090000 	.word	0x40090000
   82e88:	000837d5 	.word	0x000837d5

00082e8c <ctrl_usart_cb>:
{
   82e8c:	b508      	push	{r3, lr}
	ctrl_usart(USART_TARGET, false);
   82e8e:	2100      	movs	r1, #0
   82e90:	4801      	ldr	r0, [pc, #4]	; (82e98 <ctrl_usart_cb+0xc>)
   82e92:	4b02      	ldr	r3, [pc, #8]	; (82e9c <ctrl_usart_cb+0x10>)
   82e94:	4798      	blx	r3
   82e96:	bd08      	pop	{r3, pc}
   82e98:	40090000 	.word	0x40090000
   82e9c:	00083489 	.word	0x00083489

00082ea0 <ctrl_progfpga_bulk>:
	// If any of the above failed...
	return false;		
}


void ctrl_progfpga_bulk(void){
   82ea0:	b508      	push	{r3, lr}
	
	switch(udd_g_ctrlreq.req.wValue){
   82ea2:	4b0b      	ldr	r3, [pc, #44]	; (82ed0 <ctrl_progfpga_bulk+0x30>)
   82ea4:	885b      	ldrh	r3, [r3, #2]
   82ea6:	2ba1      	cmp	r3, #161	; 0xa1
   82ea8:	d007      	beq.n	82eba <ctrl_progfpga_bulk+0x1a>
   82eaa:	2ba2      	cmp	r3, #162	; 0xa2
   82eac:	d00b      	beq.n	82ec6 <ctrl_progfpga_bulk+0x26>
   82eae:	2ba0      	cmp	r3, #160	; 0xa0
   82eb0:	d000      	beq.n	82eb4 <ctrl_progfpga_bulk+0x14>
   82eb2:	bd08      	pop	{r3, pc}
		case 0xA0:
			fpga_program_setup1();			
   82eb4:	4b07      	ldr	r3, [pc, #28]	; (82ed4 <ctrl_progfpga_bulk+0x34>)
   82eb6:	4798      	blx	r3
			break;
   82eb8:	bd08      	pop	{r3, pc}
			
		case 0xA1:
			/* Waiting on data... */
			fpga_program_setup2();
   82eba:	4b07      	ldr	r3, [pc, #28]	; (82ed8 <ctrl_progfpga_bulk+0x38>)
   82ebc:	4798      	blx	r3
			blockendpoint_usage = bep_fpgabitstream;
   82ebe:	220a      	movs	r2, #10
   82ec0:	4b06      	ldr	r3, [pc, #24]	; (82edc <ctrl_progfpga_bulk+0x3c>)
   82ec2:	701a      	strb	r2, [r3, #0]
			break;
   82ec4:	bd08      	pop	{r3, pc}
			
		case 0xA2:
			/* Done */
			blockendpoint_usage = bep_emem;
   82ec6:	2200      	movs	r2, #0
   82ec8:	4b04      	ldr	r3, [pc, #16]	; (82edc <ctrl_progfpga_bulk+0x3c>)
   82eca:	701a      	strb	r2, [r3, #0]
			break;
			
		default:
			break;
	}
}
   82ecc:	e7f1      	b.n	82eb2 <ctrl_progfpga_bulk+0x12>
   82ece:	bf00      	nop
   82ed0:	20002dec 	.word	0x20002dec
   82ed4:	00087295 	.word	0x00087295
   82ed8:	00087329 	.word	0x00087329
   82edc:	20001a45 	.word	0x20001a45

00082ee0 <main_vendor_bulk_in_received>:
	return false;
}

void main_vendor_bulk_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82ee0:	b508      	push	{r3, lr}
	UNUSED(nb_transfered);
	UNUSED(ep);
	
	if (FPGA_lockstatus() == fpga_blockin){		
   82ee2:	4b08      	ldr	r3, [pc, #32]	; (82f04 <main_vendor_bulk_in_received+0x24>)
   82ee4:	4798      	blx	r3
   82ee6:	2802      	cmp	r0, #2
   82ee8:	d004      	beq.n	82ef4 <main_vendor_bulk_in_received+0x14>
		FPGA_releaselock();
	} else 	if (FPGA_lockstatus() == fpga_streamin) {
   82eea:	4b06      	ldr	r3, [pc, #24]	; (82f04 <main_vendor_bulk_in_received+0x24>)
   82eec:	4798      	blx	r3
   82eee:	2803      	cmp	r0, #3
   82ef0:	d003      	beq.n	82efa <main_vendor_bulk_in_received+0x1a>
   82ef2:	bd08      	pop	{r3, pc}
		FPGA_releaselock();
   82ef4:	4b04      	ldr	r3, [pc, #16]	; (82f08 <main_vendor_bulk_in_received+0x28>)
   82ef6:	4798      	blx	r3
   82ef8:	bd08      	pop	{r3, pc}
		smc_normaltiming();
   82efa:	4b04      	ldr	r3, [pc, #16]	; (82f0c <main_vendor_bulk_in_received+0x2c>)
   82efc:	4798      	blx	r3
		FPGA_releaselock();
   82efe:	4b02      	ldr	r3, [pc, #8]	; (82f08 <main_vendor_bulk_in_received+0x28>)
   82f00:	4798      	blx	r3
   82f02:	e7f6      	b.n	82ef2 <main_vendor_bulk_in_received+0x12>
   82f04:	00081d99 	.word	0x00081d99
   82f08:	00081d8d 	.word	0x00081d8d
   82f0c:	00081dcd 	.word	0x00081dcd

00082f10 <main_vendor_bulk_out_received>:

}

void main_vendor_bulk_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82f10:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   82f12:	b9b8      	cbnz	r0, 82f44 <main_vendor_bulk_out_received+0x34>
		main_vendor_bulk_out_received);
		
		return;
	}
	
	if (blockendpoint_usage == bep_emem){
   82f14:	4b18      	ldr	r3, [pc, #96]	; (82f78 <main_vendor_bulk_out_received+0x68>)
   82f16:	781b      	ldrb	r3, [r3, #0]
   82f18:	b9f3      	cbnz	r3, 82f58 <main_vendor_bulk_out_received+0x48>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f1a:	b141      	cbz	r1, 82f2e <main_vendor_bulk_out_received+0x1e>
   82f1c:	4a17      	ldr	r2, [pc, #92]	; (82f7c <main_vendor_bulk_out_received+0x6c>)
			xram[i] = main_buf_loopback[i];
   82f1e:	4d18      	ldr	r5, [pc, #96]	; (82f80 <main_vendor_bulk_out_received+0x70>)
   82f20:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   82f24:	6828      	ldr	r0, [r5, #0]
   82f26:	54c4      	strb	r4, [r0, r3]
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f28:	3301      	adds	r3, #1
   82f2a:	4299      	cmp	r1, r3
   82f2c:	d1f8      	bne.n	82f20 <main_vendor_bulk_out_received+0x10>
		}
		
		if (FPGA_lockstatus() == fpga_blockout){
   82f2e:	4b15      	ldr	r3, [pc, #84]	; (82f84 <main_vendor_bulk_out_received+0x74>)
   82f30:	4798      	blx	r3
   82f32:	2804      	cmp	r0, #4
   82f34:	d00d      	beq.n	82f52 <main_vendor_bulk_out_received+0x42>
#endif
	}
	
	//printf("BULKOUT: %d bytes\n", (int)nb_transfered);
	
	udi_vendor_bulk_out_run(
   82f36:	4a14      	ldr	r2, [pc, #80]	; (82f88 <main_vendor_bulk_out_received+0x78>)
   82f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f3c:	4813      	ldr	r0, [pc, #76]	; (82f8c <main_vendor_bulk_out_received+0x7c>)
   82f3e:	4b14      	ldr	r3, [pc, #80]	; (82f90 <main_vendor_bulk_out_received+0x80>)
   82f40:	4798      	blx	r3
   82f42:	bd70      	pop	{r4, r5, r6, pc}
		udi_vendor_bulk_out_run(
   82f44:	4a10      	ldr	r2, [pc, #64]	; (82f88 <main_vendor_bulk_out_received+0x78>)
   82f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f4a:	4810      	ldr	r0, [pc, #64]	; (82f8c <main_vendor_bulk_out_received+0x7c>)
   82f4c:	4b10      	ldr	r3, [pc, #64]	; (82f90 <main_vendor_bulk_out_received+0x80>)
   82f4e:	4798      	blx	r3
		return;
   82f50:	bd70      	pop	{r4, r5, r6, pc}
			FPGA_releaselock();
   82f52:	4b10      	ldr	r3, [pc, #64]	; (82f94 <main_vendor_bulk_out_received+0x84>)
   82f54:	4798      	blx	r3
   82f56:	e7ee      	b.n	82f36 <main_vendor_bulk_out_received+0x26>
	} else if (blockendpoint_usage == bep_fpgabitstream){
   82f58:	2b0a      	cmp	r3, #10
   82f5a:	d1ec      	bne.n	82f36 <main_vendor_bulk_out_received+0x26>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f5c:	2900      	cmp	r1, #0
   82f5e:	d0ea      	beq.n	82f36 <main_vendor_bulk_out_received+0x26>
   82f60:	4d0a      	ldr	r5, [pc, #40]	; (82f8c <main_vendor_bulk_out_received+0x7c>)
   82f62:	1e6c      	subs	r4, r5, #1
   82f64:	3901      	subs	r1, #1
   82f66:	440d      	add	r5, r1
			fpga_program_sendbyte(main_buf_loopback[i]);
   82f68:	4e0b      	ldr	r6, [pc, #44]	; (82f98 <main_vendor_bulk_out_received+0x88>)
   82f6a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   82f6e:	47b0      	blx	r6
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f70:	42ac      	cmp	r4, r5
   82f72:	d1fa      	bne.n	82f6a <main_vendor_bulk_out_received+0x5a>
   82f74:	e7df      	b.n	82f36 <main_vendor_bulk_out_received+0x26>
   82f76:	bf00      	nop
   82f78:	20001a45 	.word	0x20001a45
   82f7c:	20001a93 	.word	0x20001a93
   82f80:	200002f4 	.word	0x200002f4
   82f84:	00081d99 	.word	0x00081d99
   82f88:	00082f11 	.word	0x00082f11
   82f8c:	20001a94 	.word	0x20001a94
   82f90:	00084539 	.word	0x00084539
   82f94:	00081d8d 	.word	0x00081d8d
   82f98:	00087339 	.word	0x00087339

00082f9c <ctrl_sam3ucfg_cb>:
{
   82f9c:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   82f9e:	4b17      	ldr	r3, [pc, #92]	; (82ffc <ctrl_sam3ucfg_cb+0x60>)
   82fa0:	789b      	ldrb	r3, [r3, #2]
   82fa2:	2b02      	cmp	r3, #2
   82fa4:	d00e      	beq.n	82fc4 <ctrl_sam3ucfg_cb+0x28>
   82fa6:	2b03      	cmp	r3, #3
   82fa8:	d010      	beq.n	82fcc <ctrl_sam3ucfg_cb+0x30>
   82faa:	2b01      	cmp	r3, #1
   82fac:	d125      	bne.n	82ffa <ctrl_sam3ucfg_cb+0x5e>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82fae:	203e      	movs	r0, #62	; 0x3e
   82fb0:	4b13      	ldr	r3, [pc, #76]	; (83000 <ctrl_sam3ucfg_cb+0x64>)
   82fb2:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   82fb4:	4c13      	ldr	r4, [pc, #76]	; (83004 <ctrl_sam3ucfg_cb+0x68>)
   82fb6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82fb8:	2800      	cmp	r0, #0
   82fba:	d0fc      	beq.n	82fb6 <ctrl_sam3ucfg_cb+0x1a>
			pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   82fbc:	2010      	movs	r0, #16
   82fbe:	4b12      	ldr	r3, [pc, #72]	; (83008 <ctrl_sam3ucfg_cb+0x6c>)
   82fc0:	4798      	blx	r3
			break;
   82fc2:	bd10      	pop	{r4, pc}
			pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fc4:	2010      	movs	r0, #16
   82fc6:	4b11      	ldr	r3, [pc, #68]	; (8300c <ctrl_sam3ucfg_cb+0x70>)
   82fc8:	4798      	blx	r3
			break;
   82fca:	bd10      	pop	{r4, pc}
			board_power(0);
   82fcc:	201d      	movs	r0, #29
   82fce:	4b10      	ldr	r3, [pc, #64]	; (83010 <ctrl_sam3ucfg_cb+0x74>)
   82fd0:	4798      	blx	r3
			efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);	
   82fd2:	2201      	movs	r2, #1
   82fd4:	210c      	movs	r1, #12
   82fd6:	480f      	ldr	r0, [pc, #60]	; (83014 <ctrl_sam3ucfg_cb+0x78>)
   82fd8:	4b0f      	ldr	r3, [pc, #60]	; (83018 <ctrl_sam3ucfg_cb+0x7c>)
   82fda:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82fdc:	4b0f      	ldr	r3, [pc, #60]	; (8301c <ctrl_sam3ucfg_cb+0x80>)
   82fde:	4798      	blx	r3
			while (RSTC->RSTC_SR & RSTC_SR_SRCMP);			
   82fe0:	4b0f      	ldr	r3, [pc, #60]	; (83020 <ctrl_sam3ucfg_cb+0x84>)
   82fe2:	685a      	ldr	r2, [r3, #4]
   82fe4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   82fe8:	d1fb      	bne.n	82fe2 <ctrl_sam3ucfg_cb+0x46>
			RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;				
   82fea:	4a0d      	ldr	r2, [pc, #52]	; (83020 <ctrl_sam3ucfg_cb+0x84>)
   82fec:	6813      	ldr	r3, [r2, #0]
   82fee:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82ff2:	f043 0305 	orr.w	r3, r3, #5
   82ff6:	6013      	str	r3, [r2, #0]
   82ff8:	e7fe      	b.n	82ff8 <ctrl_sam3ucfg_cb+0x5c>
   82ffa:	bd10      	pop	{r4, pc}
   82ffc:	20002dec 	.word	0x20002dec
   83000:	0008532d 	.word	0x0008532d
   83004:	00085355 	.word	0x00085355
   83008:	00085265 	.word	0x00085265
   8300c:	000852c9 	.word	0x000852c9
   83010:	00085065 	.word	0x00085065
   83014:	400e0800 	.word	0x400e0800
   83018:	00081e19 	.word	0x00081e19
   8301c:	0008643d 	.word	0x0008643d
   83020:	400e1200 	.word	0x400e1200

00083024 <main_suspend_action>:
{
   83024:	b508      	push	{r3, lr}
	active = false;
   83026:	2200      	movs	r2, #0
   83028:	4b02      	ldr	r3, [pc, #8]	; (83034 <main_suspend_action+0x10>)
   8302a:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   8302c:	4b02      	ldr	r3, [pc, #8]	; (83038 <main_suspend_action+0x14>)
   8302e:	4798      	blx	r3
   83030:	bd08      	pop	{r3, pc}
   83032:	bf00      	nop
   83034:	20001a44 	.word	0x20001a44
   83038:	00084379 	.word	0x00084379

0008303c <main_resume_action>:
{
   8303c:	b508      	push	{r3, lr}
	ui_wakeup();
   8303e:	4b01      	ldr	r3, [pc, #4]	; (83044 <main_resume_action+0x8>)
   83040:	4798      	blx	r3
   83042:	bd08      	pop	{r3, pc}
   83044:	00084395 	.word	0x00084395

00083048 <main_sof_action>:
{
   83048:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
   8304a:	4b04      	ldr	r3, [pc, #16]	; (8305c <main_sof_action+0x14>)
   8304c:	781b      	ldrb	r3, [r3, #0]
   8304e:	b903      	cbnz	r3, 83052 <main_sof_action+0xa>
   83050:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
   83052:	4b03      	ldr	r3, [pc, #12]	; (83060 <main_sof_action+0x18>)
   83054:	4798      	blx	r3
   83056:	4b03      	ldr	r3, [pc, #12]	; (83064 <main_sof_action+0x1c>)
   83058:	4798      	blx	r3
   8305a:	e7f9      	b.n	83050 <main_sof_action+0x8>
   8305c:	200005a6 	.word	0x200005a6
   83060:	000864bd 	.word	0x000864bd
   83064:	000843ad 	.word	0x000843ad

00083068 <main_vendor_enable>:
{
   83068:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
   8306a:	2401      	movs	r4, #1
   8306c:	4b05      	ldr	r3, [pc, #20]	; (83084 <main_vendor_enable+0x1c>)
   8306e:	701c      	strb	r4, [r3, #0]
	active = true;
   83070:	4b05      	ldr	r3, [pc, #20]	; (83088 <main_vendor_enable+0x20>)
   83072:	701c      	strb	r4, [r3, #0]
	udi_vendor_bulk_out_run(
   83074:	4a05      	ldr	r2, [pc, #20]	; (8308c <main_vendor_enable+0x24>)
   83076:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8307a:	4805      	ldr	r0, [pc, #20]	; (83090 <main_vendor_enable+0x28>)
   8307c:	4b05      	ldr	r3, [pc, #20]	; (83094 <main_vendor_enable+0x2c>)
   8307e:	4798      	blx	r3
}
   83080:	4620      	mov	r0, r4
   83082:	bd10      	pop	{r4, pc}
   83084:	200005a6 	.word	0x200005a6
   83088:	20001a44 	.word	0x20001a44
   8308c:	00082f11 	.word	0x00082f11
   83090:	20001a94 	.word	0x20001a94
   83094:	00084539 	.word	0x00084539

00083098 <main_vendor_disable>:
	main_b_vendor_enable = false;
   83098:	2200      	movs	r2, #0
   8309a:	4b01      	ldr	r3, [pc, #4]	; (830a0 <main_vendor_disable+0x8>)
   8309c:	701a      	strb	r2, [r3, #0]
   8309e:	4770      	bx	lr
   830a0:	200005a6 	.word	0x200005a6

000830a4 <main_setup_out_received>:
{
   830a4:	b508      	push	{r3, lr}
	udd_g_ctrlreq.payload = ctrlbuffer;
   830a6:	4b3f      	ldr	r3, [pc, #252]	; (831a4 <main_setup_out_received+0x100>)
   830a8:	4a3f      	ldr	r2, [pc, #252]	; (831a8 <main_setup_out_received+0x104>)
   830aa:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   830ac:	88da      	ldrh	r2, [r3, #6]
   830ae:	2a40      	cmp	r2, #64	; 0x40
   830b0:	bf28      	it	cs
   830b2:	2240      	movcs	r2, #64	; 0x40
   830b4:	819a      	strh	r2, [r3, #12]
	blockendpoint_usage = bep_emem;
   830b6:	2100      	movs	r1, #0
   830b8:	4a3c      	ldr	r2, [pc, #240]	; (831ac <main_setup_out_received+0x108>)
   830ba:	7011      	strb	r1, [r2, #0]
	switch(udd_g_ctrlreq.req.bRequest){
   830bc:	785b      	ldrb	r3, [r3, #1]
   830be:	3b10      	subs	r3, #16
   830c0:	2b12      	cmp	r3, #18
   830c2:	d865      	bhi.n	83190 <main_setup_out_received+0xec>
   830c4:	e8df f003 	tbb	[pc, r3]
   830c8:	28141e0a 	.word	0x28141e0a
   830cc:	64506464 	.word	0x64506464
   830d0:	32376464 	.word	0x32376464
   830d4:	4b463c41 	.word	0x4b463c41
   830d8:	5a55      	.short	0x5a55
   830da:	5f          	.byte	0x5f
   830db:	00          	.byte	0x00
			if (FPGA_setlock(fpga_usblocked)){
   830dc:	2006      	movs	r0, #6
   830de:	4b34      	ldr	r3, [pc, #208]	; (831b0 <main_setup_out_received+0x10c>)
   830e0:	4798      	blx	r3
   830e2:	2800      	cmp	r0, #0
   830e4:	d056      	beq.n	83194 <main_setup_out_received+0xf0>
				udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   830e6:	4a33      	ldr	r2, [pc, #204]	; (831b4 <main_setup_out_received+0x110>)
   830e8:	4b2e      	ldr	r3, [pc, #184]	; (831a4 <main_setup_out_received+0x100>)
   830ea:	611a      	str	r2, [r3, #16]
				return true;
   830ec:	2001      	movs	r0, #1
   830ee:	bd08      	pop	{r3, pc}
			if (FPGA_setlock(fpga_usblocked)){
   830f0:	2006      	movs	r0, #6
   830f2:	4b2f      	ldr	r3, [pc, #188]	; (831b0 <main_setup_out_received+0x10c>)
   830f4:	4798      	blx	r3
   830f6:	2800      	cmp	r0, #0
   830f8:	d04e      	beq.n	83198 <main_setup_out_received+0xf4>
				udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   830fa:	4a2f      	ldr	r2, [pc, #188]	; (831b8 <main_setup_out_received+0x114>)
   830fc:	4b29      	ldr	r3, [pc, #164]	; (831a4 <main_setup_out_received+0x100>)
   830fe:	611a      	str	r2, [r3, #16]
				return true;	
   83100:	2001      	movs	r0, #1
   83102:	bd08      	pop	{r3, pc}
			if (FPGA_setlock(fpga_usblocked)){
   83104:	2006      	movs	r0, #6
   83106:	4b2a      	ldr	r3, [pc, #168]	; (831b0 <main_setup_out_received+0x10c>)
   83108:	4798      	blx	r3
   8310a:	2800      	cmp	r0, #0
   8310c:	d046      	beq.n	8319c <main_setup_out_received+0xf8>
				udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   8310e:	4a2b      	ldr	r2, [pc, #172]	; (831bc <main_setup_out_received+0x118>)
   83110:	4b24      	ldr	r3, [pc, #144]	; (831a4 <main_setup_out_received+0x100>)
   83112:	611a      	str	r2, [r3, #16]
				return true;
   83114:	2001      	movs	r0, #1
   83116:	bd08      	pop	{r3, pc}
			if (FPGA_setlock(fpga_usblocked)){
   83118:	2006      	movs	r0, #6
   8311a:	4b25      	ldr	r3, [pc, #148]	; (831b0 <main_setup_out_received+0x10c>)
   8311c:	4798      	blx	r3
   8311e:	2800      	cmp	r0, #0
   83120:	d03e      	beq.n	831a0 <main_setup_out_received+0xfc>
				udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   83122:	4a27      	ldr	r2, [pc, #156]	; (831c0 <main_setup_out_received+0x11c>)
   83124:	4b1f      	ldr	r3, [pc, #124]	; (831a4 <main_setup_out_received+0x100>)
   83126:	611a      	str	r2, [r3, #16]
				return true;
   83128:	2001      	movs	r0, #1
   8312a:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_usart_cb;
   8312c:	4a25      	ldr	r2, [pc, #148]	; (831c4 <main_setup_out_received+0x120>)
   8312e:	4b1d      	ldr	r3, [pc, #116]	; (831a4 <main_setup_out_received+0x100>)
   83130:	611a      	str	r2, [r3, #16]
			return true;
   83132:	2001      	movs	r0, #1
   83134:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   83136:	4a24      	ldr	r2, [pc, #144]	; (831c8 <main_setup_out_received+0x124>)
   83138:	4b1a      	ldr	r3, [pc, #104]	; (831a4 <main_setup_out_received+0x100>)
   8313a:	611a      	str	r2, [r3, #16]
			return true;
   8313c:	2001      	movs	r0, #1
   8313e:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_scardconfig_cb;
   83140:	4a22      	ldr	r2, [pc, #136]	; (831cc <main_setup_out_received+0x128>)
   83142:	4b18      	ldr	r3, [pc, #96]	; (831a4 <main_setup_out_received+0x100>)
   83144:	611a      	str	r2, [r3, #16]
			return true;
   83146:	2001      	movs	r0, #1
   83148:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_scarddata_cb;
   8314a:	4a21      	ldr	r2, [pc, #132]	; (831d0 <main_setup_out_received+0x12c>)
   8314c:	4b15      	ldr	r3, [pc, #84]	; (831a4 <main_setup_out_received+0x100>)
   8314e:	611a      	str	r2, [r3, #16]
			return true;
   83150:	2001      	movs	r0, #1
   83152:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_scardaux_cb;
   83154:	4a1f      	ldr	r2, [pc, #124]	; (831d4 <main_setup_out_received+0x130>)
   83156:	4b13      	ldr	r3, [pc, #76]	; (831a4 <main_setup_out_received+0x100>)
   83158:	611a      	str	r2, [r3, #16]
			return true;
   8315a:	2001      	movs	r0, #1
   8315c:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_usart2_enabledump;
   8315e:	4a1e      	ldr	r2, [pc, #120]	; (831d8 <main_setup_out_received+0x134>)
   83160:	4b10      	ldr	r3, [pc, #64]	; (831a4 <main_setup_out_received+0x100>)
   83162:	611a      	str	r2, [r3, #16]
			return true;
   83164:	2001      	movs	r0, #1
   83166:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   83168:	4a1c      	ldr	r2, [pc, #112]	; (831dc <main_setup_out_received+0x138>)
   8316a:	4b0e      	ldr	r3, [pc, #56]	; (831a4 <main_setup_out_received+0x100>)
   8316c:	611a      	str	r2, [r3, #16]
			return true;
   8316e:	2001      	movs	r0, #1
   83170:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   83172:	4a1b      	ldr	r2, [pc, #108]	; (831e0 <main_setup_out_received+0x13c>)
   83174:	4b0b      	ldr	r3, [pc, #44]	; (831a4 <main_setup_out_received+0x100>)
   83176:	611a      	str	r2, [r3, #16]
			return true;
   83178:	2001      	movs	r0, #1
   8317a:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_avr_program_void;
   8317c:	4a19      	ldr	r2, [pc, #100]	; (831e4 <main_setup_out_received+0x140>)
   8317e:	4b09      	ldr	r3, [pc, #36]	; (831a4 <main_setup_out_received+0x100>)
   83180:	611a      	str	r2, [r3, #16]
			return true;
   83182:	2001      	movs	r0, #1
   83184:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   83186:	4a18      	ldr	r2, [pc, #96]	; (831e8 <main_setup_out_received+0x144>)
   83188:	4b06      	ldr	r3, [pc, #24]	; (831a4 <main_setup_out_received+0x100>)
   8318a:	611a      	str	r2, [r3, #16]
			return true;
   8318c:	2001      	movs	r0, #1
   8318e:	bd08      	pop	{r3, pc}
			return false;
   83190:	2000      	movs	r0, #0
   83192:	bd08      	pop	{r3, pc}
	return false;		
   83194:	2000      	movs	r0, #0
   83196:	bd08      	pop	{r3, pc}
   83198:	2000      	movs	r0, #0
   8319a:	bd08      	pop	{r3, pc}
   8319c:	2000      	movs	r0, #0
   8319e:	bd08      	pop	{r3, pc}
   831a0:	2000      	movs	r0, #0
}
   831a2:	bd08      	pop	{r3, pc}
   831a4:	20002dec 	.word	0x20002dec
   831a8:	20001a48 	.word	0x20001a48
   831ac:	20001a45 	.word	0x20001a45
   831b0:	00081d61 	.word	0x00081d61
   831b4:	00082d51 	.word	0x00082d51
   831b8:	00082c89 	.word	0x00082c89
   831bc:	00082d21 	.word	0x00082d21
   831c0:	00082ccd 	.word	0x00082ccd
   831c4:	00082e8d 	.word	0x00082e8d
   831c8:	00082e55 	.word	0x00082e55
   831cc:	00081ce1 	.word	0x00081ce1
   831d0:	00081a99 	.word	0x00081a99
   831d4:	00081aed 	.word	0x00081aed
   831d8:	00082dad 	.word	0x00082dad
   831dc:	00082ea1 	.word	0x00082ea1
   831e0:	00082d95 	.word	0x00082d95
   831e4:	00082da1 	.word	0x00082da1
   831e8:	00082f9d 	.word	0x00082f9d

000831ec <main_setup_in_received>:
	if (udd_g_ctrlreq.req.wLength > sizeof(respbuf)){
   831ec:	4b3b      	ldr	r3, [pc, #236]	; (832dc <main_setup_in_received+0xf0>)
   831ee:	88da      	ldrh	r2, [r3, #6]
   831f0:	2ac8      	cmp	r2, #200	; 0xc8
   831f2:	d86e      	bhi.n	832d2 <main_setup_in_received+0xe6>
{
   831f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.bRequest){
   831f8:	785b      	ldrb	r3, [r3, #1]
   831fa:	3b12      	subs	r3, #18
   831fc:	2b0f      	cmp	r3, #15
   831fe:	d86a      	bhi.n	832d6 <main_setup_in_received+0xea>
   83200:	e8df f003 	tbb	[pc, r3]
   83204:	2d69691f 	.word	0x2d69691f
   83208:	69694e69 	.word	0x69694e69
   8320c:	5b5f4808 	.word	0x5b5f4808
   83210:	44406963 	.word	0x44406963
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83214:	2400      	movs	r4, #0
   83216:	b16a      	cbz	r2, 83234 <main_setup_in_received+0x48>
   83218:	4d31      	ldr	r5, [pc, #196]	; (832e0 <main_setup_in_received+0xf4>)
   8321a:	2400      	movs	r4, #0
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   8321c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 83304 <main_setup_in_received+0x118>
   83220:	4f30      	ldr	r7, [pc, #192]	; (832e4 <main_setup_in_received+0xf8>)
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83222:	4e2e      	ldr	r6, [pc, #184]	; (832dc <main_setup_in_received+0xf0>)
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   83224:	4640      	mov	r0, r8
   83226:	47b8      	blx	r7
   83228:	f805 0f01 	strb.w	r0, [r5, #1]!
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8322c:	3401      	adds	r4, #1
   8322e:	88f3      	ldrh	r3, [r6, #6]
   83230:	42a3      	cmp	r3, r4
   83232:	d8f7      	bhi.n	83224 <main_setup_in_received+0x38>
			udd_g_ctrlreq.payload = respbuf;
   83234:	4b29      	ldr	r3, [pc, #164]	; (832dc <main_setup_in_received+0xf0>)
   83236:	4a2c      	ldr	r2, [pc, #176]	; (832e8 <main_setup_in_received+0xfc>)
   83238:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = cnt;
   8323a:	819c      	strh	r4, [r3, #12]
			return true;
   8323c:	2001      	movs	r0, #1
   8323e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_g_ctrlreq.payload = ctrlmemread_buf;
   83242:	4a26      	ldr	r2, [pc, #152]	; (832dc <main_setup_in_received+0xf0>)
   83244:	4b29      	ldr	r3, [pc, #164]	; (832ec <main_setup_in_received+0x100>)
   83246:	681b      	ldr	r3, [r3, #0]
   83248:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8324a:	4b29      	ldr	r3, [pc, #164]	; (832f0 <main_setup_in_received+0x104>)
   8324c:	6819      	ldr	r1, [r3, #0]
   8324e:	8191      	strh	r1, [r2, #12]
			ctrlmemread_size = 0;
   83250:	2200      	movs	r2, #0
   83252:	601a      	str	r2, [r3, #0]
			FPGA_releaselock();
   83254:	4b27      	ldr	r3, [pc, #156]	; (832f4 <main_setup_in_received+0x108>)
   83256:	4798      	blx	r3
			return true;
   83258:	2001      	movs	r0, #1
   8325a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			respbuf[0] = FPGA_ISDONE();
   8325e:	200a      	movs	r0, #10
   83260:	4b25      	ldr	r3, [pc, #148]	; (832f8 <main_setup_in_received+0x10c>)
   83262:	4798      	blx	r3
   83264:	4b20      	ldr	r3, [pc, #128]	; (832e8 <main_setup_in_received+0xfc>)
   83266:	3000      	adds	r0, #0
   83268:	bf18      	it	ne
   8326a:	2001      	movne	r0, #1
   8326c:	7018      	strb	r0, [r3, #0]
			respbuf[1] = 0;
   8326e:	2200      	movs	r2, #0
   83270:	705a      	strb	r2, [r3, #1]
			respbuf[2] = 0;
   83272:	709a      	strb	r2, [r3, #2]
			respbuf[3] = 0;
   83274:	70da      	strb	r2, [r3, #3]
			udd_g_ctrlreq.payload = respbuf;
   83276:	4a19      	ldr	r2, [pc, #100]	; (832dc <main_setup_in_received+0xf0>)
   83278:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 4;
   8327a:	2304      	movs	r3, #4
   8327c:	8193      	strh	r3, [r2, #12]
			return true;
   8327e:	2001      	movs	r0, #1
   83280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return XPROGProtocol_Command();
   83284:	4b1d      	ldr	r3, [pc, #116]	; (832fc <main_setup_in_received+0x110>)
   83286:	4798      	blx	r3
   83288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return V2Protocol_ProcessCommand();
   8328c:	4b1c      	ldr	r3, [pc, #112]	; (83300 <main_setup_in_received+0x114>)
   8328e:	4798      	blx	r3
   83290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_usart(USART_TARGET, true);
   83294:	2101      	movs	r1, #1
   83296:	481b      	ldr	r0, [pc, #108]	; (83304 <main_setup_in_received+0x118>)
   83298:	4b1b      	ldr	r3, [pc, #108]	; (83308 <main_setup_in_received+0x11c>)
   8329a:	4798      	blx	r3
   8329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			respbuf[0] = FW_VER_MAJOR;
   832a0:	4b11      	ldr	r3, [pc, #68]	; (832e8 <main_setup_in_received+0xfc>)
   832a2:	2200      	movs	r2, #0
   832a4:	701a      	strb	r2, [r3, #0]
			respbuf[1] = FW_VER_MINOR;
   832a6:	2117      	movs	r1, #23
   832a8:	7059      	strb	r1, [r3, #1]
			respbuf[2] = FW_VER_DEBUG;
   832aa:	709a      	strb	r2, [r3, #2]
			udd_g_ctrlreq.payload = respbuf;
   832ac:	4a0b      	ldr	r2, [pc, #44]	; (832dc <main_setup_in_received+0xf0>)
   832ae:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 3;
   832b0:	2303      	movs	r3, #3
   832b2:	8193      	strh	r3, [r2, #12]
			return true;
   832b4:	2001      	movs	r0, #1
   832b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_scardconfig_req();
   832ba:	4b14      	ldr	r3, [pc, #80]	; (8330c <main_setup_in_received+0x120>)
   832bc:	4798      	blx	r3
   832be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_scarddata_req();
   832c2:	4b13      	ldr	r3, [pc, #76]	; (83310 <main_setup_in_received+0x124>)
   832c4:	4798      	blx	r3
   832c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_scardaux_req();
   832ca:	4b12      	ldr	r3, [pc, #72]	; (83314 <main_setup_in_received+0x128>)
   832cc:	4798      	blx	r3
   832ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   832d2:	2000      	movs	r0, #0
   832d4:	4770      	bx	lr
			return false;
   832d6:	2000      	movs	r0, #0
}
   832d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832dc:	20002dec 	.word	0x20002dec
   832e0:	20001e93 	.word	0x20001e93
   832e4:	00083855 	.word	0x00083855
   832e8:	20001e94 	.word	0x20001e94
   832ec:	20001a88 	.word	0x20001a88
   832f0:	20001a8c 	.word	0x20001a8c
   832f4:	00081d8d 	.word	0x00081d8d
   832f8:	0008502f 	.word	0x0008502f
   832fc:	00083d7d 	.word	0x00083d7d
   83300:	000829c9 	.word	0x000829c9
   83304:	40090000 	.word	0x40090000
   83308:	00083489 	.word	0x00083489
   8330c:	00081a29 	.word	0x00081a29
   83310:	000819ed 	.word	0x000819ed
   83314:	00081a79 	.word	0x00081a79

00083318 <cdc_enable>:
/////////////////////////////////////////////////////////
#include "usb_protocol_cdc.h"
bool enable_cdc_transfer[2] = {false, false};
bool cdc_enable(uint8_t port)
{
	enable_cdc_transfer[port] = true;
   83318:	2301      	movs	r3, #1
   8331a:	4a02      	ldr	r2, [pc, #8]	; (83324 <cdc_enable+0xc>)
   8331c:	5413      	strb	r3, [r2, r0]
	return true;
}
   8331e:	4618      	mov	r0, r3
   83320:	4770      	bx	lr
   83322:	bf00      	nop
   83324:	20001a90 	.word	0x20001a90

00083328 <cdc_disable>:

void cdc_disable(uint8_t port)
{
	enable_cdc_transfer[port] = false;
   83328:	2200      	movs	r2, #0
   8332a:	4b01      	ldr	r3, [pc, #4]	; (83330 <cdc_disable+0x8>)
   8332c:	541a      	strb	r2, [r3, r0]
   8332e:	4770      	bx	lr
   83330:	20001a90 	.word	0x20001a90

00083334 <my_callback_rx_notify>:
static uint8_t uart_buf[512] = {0};
void my_callback_rx_notify(uint8_t port)
{
	//iram_size_t udi_cdc_multi_get_nb_received_data
	
	if (enable_cdc_transfer[port]) {
   83334:	4b12      	ldr	r3, [pc, #72]	; (83380 <my_callback_rx_notify+0x4c>)
   83336:	5c1b      	ldrb	r3, [r3, r0]
   83338:	b903      	cbnz	r3, 8333c <my_callback_rx_notify+0x8>
   8333a:	4770      	bx	lr
{
   8333c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83340:	4604      	mov	r4, r0
		iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   83342:	4b10      	ldr	r3, [pc, #64]	; (83384 <my_callback_rx_notify+0x50>)
   83344:	4798      	blx	r3
		num_char = (num_char > 512) ? 512 : num_char;
   83346:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8334a:	bf28      	it	cs
   8334c:	f44f 7000 	movcs.w	r0, #512	; 0x200
   83350:	4605      	mov	r5, r0
		udi_cdc_multi_read_buf(port, uart_buf, num_char);
   83352:	4602      	mov	r2, r0
   83354:	490c      	ldr	r1, [pc, #48]	; (83388 <my_callback_rx_notify+0x54>)
   83356:	4620      	mov	r0, r4
   83358:	4b0c      	ldr	r3, [pc, #48]	; (8338c <my_callback_rx_notify+0x58>)
   8335a:	4798      	blx	r3
		for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   8335c:	b16d      	cbz	r5, 8337a <my_callback_rx_notify+0x46>
   8335e:	2400      	movs	r4, #0
			//usart_driver_putchar(USART_TARGET, NULL, udi_cdc_multi_getc(port));
			usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   83360:	f8df 8024 	ldr.w	r8, [pc, #36]	; 83388 <my_callback_rx_notify+0x54>
   83364:	4f0a      	ldr	r7, [pc, #40]	; (83390 <my_callback_rx_notify+0x5c>)
   83366:	4e0b      	ldr	r6, [pc, #44]	; (83394 <my_callback_rx_notify+0x60>)
   83368:	f818 2004 	ldrb.w	r2, [r8, r4]
   8336c:	2100      	movs	r1, #0
   8336e:	4638      	mov	r0, r7
   83370:	47b0      	blx	r6
		for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   83372:	3401      	adds	r4, #1
   83374:	b2a4      	uxth	r4, r4
   83376:	42a5      	cmp	r5, r4
   83378:	d8f6      	bhi.n	83368 <my_callback_rx_notify+0x34>
   8337a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8337e:	bf00      	nop
   83380:	20001a90 	.word	0x20001a90
   83384:	000803d5 	.word	0x000803d5
   83388:	20001f5c 	.word	0x20001f5c
   8338c:	000805e5 	.word	0x000805e5
   83390:	40090000 	.word	0x40090000
   83394:	000837d5 	.word	0x000837d5

00083398 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   83398:	4b01      	ldr	r3, [pc, #4]	; (833a0 <set_timeout+0x8>)
   8339a:	6018      	str	r0, [r3, #0]
   8339c:	4770      	bx	lr
   8339e:	bf00      	nop
   833a0:	200005a8 	.word	0x200005a8

000833a4 <setup_timeoutcnt>:
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}

void setup_timeoutcnt(void)
{
   833a4:	b538      	push	{r3, r4, r5, lr}
   833a6:	2016      	movs	r0, #22
   833a8:	4b10      	ldr	r3, [pc, #64]	; (833ec <setup_timeoutcnt+0x48>)
   833aa:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   833ac:	4b10      	ldr	r3, [pc, #64]	; (833f0 <setup_timeoutcnt+0x4c>)
   833ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   833b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   833b6:	2510      	movs	r5, #16
   833b8:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   833bc:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   833be:	4c0d      	ldr	r4, [pc, #52]	; (833f4 <setup_timeoutcnt+0x50>)
   833c0:	f24c 0201 	movw	r2, #49153	; 0xc001
   833c4:	2100      	movs	r1, #0
   833c6:	4620      	mov	r0, r4
   833c8:	4b0b      	ldr	r3, [pc, #44]	; (833f8 <setup_timeoutcnt+0x54>)
   833ca:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   833cc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   833d0:	2100      	movs	r1, #0
   833d2:	4620      	mov	r0, r4
   833d4:	4b09      	ldr	r3, [pc, #36]	; (833fc <setup_timeoutcnt+0x58>)
   833d6:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   833d8:	462a      	mov	r2, r5
   833da:	2100      	movs	r1, #0
   833dc:	4620      	mov	r0, r4
   833de:	4b08      	ldr	r3, [pc, #32]	; (83400 <setup_timeoutcnt+0x5c>)
   833e0:	4798      	blx	r3
	
	timerEnabled = true;
   833e2:	2201      	movs	r2, #1
   833e4:	4b07      	ldr	r3, [pc, #28]	; (83404 <setup_timeoutcnt+0x60>)
   833e6:	701a      	strb	r2, [r3, #0]
   833e8:	bd38      	pop	{r3, r4, r5, pc}
   833ea:	bf00      	nop
   833ec:	000853d5 	.word	0x000853d5
   833f0:	e000e100 	.word	0xe000e100
   833f4:	40080000 	.word	0x40080000
   833f8:	00081e69 	.word	0x00081e69
   833fc:	00081e91 	.word	0x00081e91
   83400:	00081e99 	.word	0x00081e99
   83404:	2000215c 	.word	0x2000215c

00083408 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   83408:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   8340a:	4b0a      	ldr	r3, [pc, #40]	; (83434 <start_timeoutcnt+0x2c>)
   8340c:	781b      	ldrb	r3, [r3, #0]
   8340e:	b16b      	cbz	r3, 8342c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83410:	4c09      	ldr	r4, [pc, #36]	; (83438 <start_timeoutcnt+0x30>)
   83412:	2100      	movs	r1, #0
   83414:	4620      	mov	r0, r4
   83416:	4b09      	ldr	r3, [pc, #36]	; (8343c <start_timeoutcnt+0x34>)
   83418:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   8341a:	4b09      	ldr	r3, [pc, #36]	; (83440 <start_timeoutcnt+0x38>)
   8341c:	681a      	ldr	r2, [r3, #0]
   8341e:	4b09      	ldr	r3, [pc, #36]	; (83444 <start_timeoutcnt+0x3c>)
   83420:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   83422:	2100      	movs	r1, #0
   83424:	4620      	mov	r0, r4
   83426:	4b08      	ldr	r3, [pc, #32]	; (83448 <start_timeoutcnt+0x40>)
   83428:	4798      	blx	r3
   8342a:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   8342c:	4b07      	ldr	r3, [pc, #28]	; (8344c <start_timeoutcnt+0x44>)
   8342e:	4798      	blx	r3
   83430:	e7ee      	b.n	83410 <start_timeoutcnt+0x8>
   83432:	bf00      	nop
   83434:	2000215c 	.word	0x2000215c
   83438:	40080000 	.word	0x40080000
   8343c:	00081e89 	.word	0x00081e89
   83440:	200005a8 	.word	0x200005a8
   83444:	2000265c 	.word	0x2000265c
   83448:	00081e81 	.word	0x00081e81
   8344c:	000833a5 	.word	0x000833a5

00083450 <stop_timeoutcnt>:
}

void stop_timeoutcnt(void)
{
   83450:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83452:	2100      	movs	r1, #0
   83454:	4801      	ldr	r0, [pc, #4]	; (8345c <stop_timeoutcnt+0xc>)
   83456:	4b02      	ldr	r3, [pc, #8]	; (83460 <stop_timeoutcnt+0x10>)
   83458:	4798      	blx	r3
   8345a:	bd08      	pop	{r3, pc}
   8345c:	40080000 	.word	0x40080000
   83460:	00081e89 	.word	0x00081e89

00083464 <TC0_Handler>:
}

ISR(TC0_Handler)
{
   83464:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   83466:	4b05      	ldr	r3, [pc, #20]	; (8347c <TC0_Handler+0x18>)
   83468:	681b      	ldr	r3, [r3, #0]
   8346a:	b113      	cbz	r3, 83472 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   8346c:	3b01      	subs	r3, #1
   8346e:	4a03      	ldr	r2, [pc, #12]	; (8347c <TC0_Handler+0x18>)
   83470:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   83472:	2100      	movs	r1, #0
   83474:	4802      	ldr	r0, [pc, #8]	; (83480 <TC0_Handler+0x1c>)
   83476:	4b03      	ldr	r3, [pc, #12]	; (83484 <TC0_Handler+0x20>)
   83478:	4798      	blx	r3
   8347a:	bd08      	pop	{r3, pc}
   8347c:	2000265c 	.word	0x2000265c
   83480:	40080000 	.word	0x40080000
   83484:	00081ea1 	.word	0x00081ea1

00083488 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   83488:	b570      	push	{r4, r5, r6, lr}
   8348a:	b088      	sub	sp, #32
   8348c:	4605      	mov	r5, r0
   8348e:	460c      	mov	r4, r1
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   83490:	4b93      	ldr	r3, [pc, #588]	; (836e0 <ctrl_usart+0x258>)
   83492:	789b      	ldrb	r3, [r3, #2]
   83494:	3b10      	subs	r3, #16
   83496:	2b08      	cmp	r3, #8
   83498:	f200 8184 	bhi.w	837a4 <ctrl_usart+0x31c>
   8349c:	e8df f013 	tbh	[pc, r3, lsl #1]
   834a0:	00930009 	.word	0x00930009
   834a4:	018200d4 	.word	0x018200d4
   834a8:	018200e2 	.word	0x018200e2
   834ac:	01820182 	.word	0x01820182
   834b0:	0117      	.short	0x0117
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   834b2:	b131      	cbz	r1, 834c2 <ctrl_usart+0x3a>
				if (udd_g_ctrlreq.req.wLength == 4){
   834b4:	4b8a      	ldr	r3, [pc, #552]	; (836e0 <ctrl_usart+0x258>)
   834b6:	88dc      	ldrh	r4, [r3, #6]
   834b8:	2c04      	cmp	r4, #4
   834ba:	bf14      	ite	ne
   834bc:	2000      	movne	r0, #0
   834be:	2001      	moveq	r0, #1
   834c0:	e0c4      	b.n	8364c <ctrl_usart+0x1c4>
					word2buf(ctrlbuffer, baud);
					*/
					return true;
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   834c2:	4b87      	ldr	r3, [pc, #540]	; (836e0 <ctrl_usart+0x258>)
   834c4:	88db      	ldrh	r3, [r3, #6]
   834c6:	2b07      	cmp	r3, #7
   834c8:	d178      	bne.n	835bc <ctrl_usart+0x134>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   834ca:	4b85      	ldr	r3, [pc, #532]	; (836e0 <ctrl_usart+0x258>)
   834cc:	689b      	ldr	r3, [r3, #8]
   834ce:	681a      	ldr	r2, [r3, #0]
					
						usartopts.baudrate = baud;
   834d0:	9202      	str	r2, [sp, #8]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   834d2:	791a      	ldrb	r2, [r3, #4]
   834d4:	2a01      	cmp	r2, #1
   834d6:	d00f      	beq.n	834f8 <ctrl_usart+0x70>
   834d8:	b122      	cbz	r2, 834e4 <ctrl_usart+0x5c>
   834da:	2a02      	cmp	r2, #2
   834dc:	d010      	beq.n	83500 <ctrl_usart+0x78>
								break;
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
								break;
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   834de:	2200      	movs	r2, #0
   834e0:	9205      	str	r2, [sp, #20]
   834e2:	e001      	b.n	834e8 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   834e4:	2200      	movs	r2, #0
   834e6:	9205      	str	r2, [sp, #20]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   834e8:	795a      	ldrb	r2, [r3, #5]
   834ea:	2a04      	cmp	r2, #4
   834ec:	d828      	bhi.n	83540 <ctrl_usart+0xb8>
   834ee:	e8df f002 	tbb	[pc, r2]
   834f2:	180b      	.short	0x180b
   834f4:	1f1c      	.short	0x1f1c
   834f6:	23          	.byte	0x23
   834f7:	00          	.byte	0x00
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   834f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   834fc:	9205      	str	r2, [sp, #20]
								break;
   834fe:	e7f3      	b.n	834e8 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   83500:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83504:	9205      	str	r2, [sp, #20]
								break;
   83506:	e7ef      	b.n	834e8 <ctrl_usart+0x60>
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   83508:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8350c:	9204      	str	r2, [sp, #16]
							default:
								usartopts.parity_type = US_MR_PAR_NO;
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   8350e:	799b      	ldrb	r3, [r3, #6]
   83510:	2b06      	cmp	r3, #6
   83512:	d02d      	beq.n	83570 <ctrl_usart+0xe8>
   83514:	2b07      	cmp	r3, #7
   83516:	d02e      	beq.n	83576 <ctrl_usart+0xee>
   83518:	2b05      	cmp	r3, #5
   8351a:	d015      	beq.n	83548 <ctrl_usart+0xc0>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
								break;					
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   8351c:	23c0      	movs	r3, #192	; 0xc0
   8351e:	9303      	str	r3, [sp, #12]
   83520:	e014      	b.n	8354c <ctrl_usart+0xc4>
								usartopts.parity_type = US_MR_PAR_ODD;
   83522:	f44f 7200 	mov.w	r2, #512	; 0x200
   83526:	9204      	str	r2, [sp, #16]
								break;
   83528:	e7f1      	b.n	8350e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_EVEN;
   8352a:	2200      	movs	r2, #0
   8352c:	9204      	str	r2, [sp, #16]
								break;
   8352e:	e7ee      	b.n	8350e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_MARK;
   83530:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   83534:	9204      	str	r2, [sp, #16]
								break;
   83536:	e7ea      	b.n	8350e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_SPACE;
   83538:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8353c:	9204      	str	r2, [sp, #16]
								break;							
   8353e:	e7e6      	b.n	8350e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_NO;
   83540:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83544:	9204      	str	r2, [sp, #16]
   83546:	e7e2      	b.n	8350e <ctrl_usart+0x86>
								usartopts.char_length = US_MR_CHRL_5_BIT;
   83548:	2300      	movs	r3, #0
   8354a:	9303      	str	r3, [sp, #12]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8354c:	2300      	movs	r3, #0
   8354e:	9306      	str	r3, [sp, #24]

						if (usart == USART0)
   83550:	4b64      	ldr	r3, [pc, #400]	; (836e4 <ctrl_usart+0x25c>)
   83552:	429d      	cmp	r5, r3
   83554:	d012      	beq.n	8357c <ctrl_usart+0xf4>
							sysclk_enable_peripheral_clock(ID_USART0);
							init_circ_buf(&usb_usart_circ_buf);
							init_circ_buf(&tx0buf);
							init_circ_buf(&rx0buf);
							printf("Enabling USART0\n");
						} else if (usart == USART1)
   83556:	4b64      	ldr	r3, [pc, #400]	; (836e8 <ctrl_usart+0x260>)
   83558:	429d      	cmp	r5, r3
   8355a:	d01d      	beq.n	83598 <ctrl_usart+0x110>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
							init_circ_buf(&tx1buf);
							init_circ_buf(&rx1buf);
						} else if (usart == USART2)
   8355c:	4b63      	ldr	r3, [pc, #396]	; (836ec <ctrl_usart+0x264>)
   8355e:	429d      	cmp	r5, r3
   83560:	d023      	beq.n	835aa <ctrl_usart+0x122>
							sysclk_enable_peripheral_clock(ID_USART3);
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   83562:	4a63      	ldr	r2, [pc, #396]	; (836f0 <ctrl_usart+0x268>)
   83564:	a902      	add	r1, sp, #8
   83566:	4628      	mov	r0, r5
   83568:	4b62      	ldr	r3, [pc, #392]	; (836f4 <ctrl_usart+0x26c>)
   8356a:	4798      	blx	r3
				}
			}
			break;		
	}
	
	return false;
   8356c:	4620      	mov	r0, r4
   8356e:	e06d      	b.n	8364c <ctrl_usart+0x1c4>
								usartopts.char_length = US_MR_CHRL_6_BIT;
   83570:	2340      	movs	r3, #64	; 0x40
   83572:	9303      	str	r3, [sp, #12]
								break;
   83574:	e7ea      	b.n	8354c <ctrl_usart+0xc4>
								usartopts.char_length = US_MR_CHRL_7_BIT;
   83576:	2380      	movs	r3, #128	; 0x80
   83578:	9303      	str	r3, [sp, #12]
								break;					
   8357a:	e7e7      	b.n	8354c <ctrl_usart+0xc4>
   8357c:	200d      	movs	r0, #13
   8357e:	4b5e      	ldr	r3, [pc, #376]	; (836f8 <ctrl_usart+0x270>)
   83580:	4798      	blx	r3
							init_circ_buf(&usb_usart_circ_buf);
   83582:	485e      	ldr	r0, [pc, #376]	; (836fc <ctrl_usart+0x274>)
   83584:	4e5e      	ldr	r6, [pc, #376]	; (83700 <ctrl_usart+0x278>)
   83586:	47b0      	blx	r6
							init_circ_buf(&tx0buf);
   83588:	485e      	ldr	r0, [pc, #376]	; (83704 <ctrl_usart+0x27c>)
   8358a:	47b0      	blx	r6
							init_circ_buf(&rx0buf);
   8358c:	485e      	ldr	r0, [pc, #376]	; (83708 <ctrl_usart+0x280>)
   8358e:	47b0      	blx	r6
							printf("Enabling USART0\n");
   83590:	485e      	ldr	r0, [pc, #376]	; (8370c <ctrl_usart+0x284>)
   83592:	4b5f      	ldr	r3, [pc, #380]	; (83710 <ctrl_usart+0x288>)
   83594:	4798      	blx	r3
   83596:	e7e4      	b.n	83562 <ctrl_usart+0xda>
   83598:	200e      	movs	r0, #14
   8359a:	4b57      	ldr	r3, [pc, #348]	; (836f8 <ctrl_usart+0x270>)
   8359c:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   8359e:	485d      	ldr	r0, [pc, #372]	; (83714 <ctrl_usart+0x28c>)
   835a0:	4e57      	ldr	r6, [pc, #348]	; (83700 <ctrl_usart+0x278>)
   835a2:	47b0      	blx	r6
							init_circ_buf(&rx1buf);
   835a4:	485c      	ldr	r0, [pc, #368]	; (83718 <ctrl_usart+0x290>)
   835a6:	47b0      	blx	r6
   835a8:	e7db      	b.n	83562 <ctrl_usart+0xda>
   835aa:	200f      	movs	r0, #15
   835ac:	4b52      	ldr	r3, [pc, #328]	; (836f8 <ctrl_usart+0x270>)
   835ae:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   835b0:	485a      	ldr	r0, [pc, #360]	; (8371c <ctrl_usart+0x294>)
   835b2:	4e53      	ldr	r6, [pc, #332]	; (83700 <ctrl_usart+0x278>)
   835b4:	47b0      	blx	r6
							init_circ_buf(&rx2buf);
   835b6:	485a      	ldr	r0, [pc, #360]	; (83720 <ctrl_usart+0x298>)
   835b8:	47b0      	blx	r6
   835ba:	e7d2      	b.n	83562 <ctrl_usart+0xda>
						printf("ERR: Invalid USART Configuration packet?\n");
   835bc:	4859      	ldr	r0, [pc, #356]	; (83724 <ctrl_usart+0x29c>)
   835be:	4b54      	ldr	r3, [pc, #336]	; (83710 <ctrl_usart+0x288>)
   835c0:	4798      	blx	r3
	return false;
   835c2:	4620      	mov	r0, r4
   835c4:	e042      	b.n	8364c <ctrl_usart+0x1c4>
			if (directionIn == false){
   835c6:	b109      	cbz	r1, 835cc <ctrl_usart+0x144>
	return false;
   835c8:	2000      	movs	r0, #0
   835ca:	e03f      	b.n	8364c <ctrl_usart+0x1c4>
				usart_enable_rx(usart);
   835cc:	4b56      	ldr	r3, [pc, #344]	; (83728 <ctrl_usart+0x2a0>)
   835ce:	4798      	blx	r3
				usart_enable_tx(usart);
   835d0:	4628      	mov	r0, r5
   835d2:	4b56      	ldr	r3, [pc, #344]	; (8372c <ctrl_usart+0x2a4>)
   835d4:	4798      	blx	r3
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   835d6:	2101      	movs	r1, #1
   835d8:	4628      	mov	r0, r5
   835da:	4b55      	ldr	r3, [pc, #340]	; (83730 <ctrl_usart+0x2a8>)
   835dc:	4798      	blx	r3
				if (usart == USART0){
   835de:	4b41      	ldr	r3, [pc, #260]	; (836e4 <ctrl_usart+0x25c>)
   835e0:	429d      	cmp	r5, r3
   835e2:	d007      	beq.n	835f4 <ctrl_usart+0x16c>
				} else if (usart == USART1) {
   835e4:	4b40      	ldr	r3, [pc, #256]	; (836e8 <ctrl_usart+0x260>)
   835e6:	429d      	cmp	r5, r3
   835e8:	d018      	beq.n	8361c <ctrl_usart+0x194>
				} else if (usart == USART2) {
   835ea:	4b40      	ldr	r3, [pc, #256]	; (836ec <ctrl_usart+0x264>)
   835ec:	429d      	cmp	r5, r3
   835ee:	d020      	beq.n	83632 <ctrl_usart+0x1aa>
	return false;
   835f0:	4620      	mov	r0, r4
   835f2:	e02b      	b.n	8364c <ctrl_usart+0x1c4>
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   835f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   835f8:	2013      	movs	r0, #19
   835fa:	4d4e      	ldr	r5, [pc, #312]	; (83734 <ctrl_usart+0x2ac>)
   835fc:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   835fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83602:	2012      	movs	r0, #18
   83604:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83606:	4b4c      	ldr	r3, [pc, #304]	; (83738 <ctrl_usart+0x2b0>)
   83608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8360c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83610:	2150      	movs	r1, #80	; 0x50
   83612:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83616:	601a      	str	r2, [r3, #0]
	return false;
   83618:	4620      	mov	r0, r4
   8361a:	e017      	b.n	8364c <ctrl_usart+0x1c4>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8361c:	4b46      	ldr	r3, [pc, #280]	; (83738 <ctrl_usart+0x2b0>)
   8361e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83622:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83626:	2150      	movs	r1, #80	; 0x50
   83628:	f883 130e 	strb.w	r1, [r3, #782]	; 0x30e
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8362c:	601a      	str	r2, [r3, #0]
   8362e:	4620      	mov	r0, r4
   83630:	e00c      	b.n	8364c <ctrl_usart+0x1c4>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83632:	4b41      	ldr	r3, [pc, #260]	; (83738 <ctrl_usart+0x2b0>)
   83634:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83638:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8363c:	2150      	movs	r1, #80	; 0x50
   8363e:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83642:	601a      	str	r2, [r3, #0]
   83644:	4620      	mov	r0, r4
   83646:	e001      	b.n	8364c <ctrl_usart+0x1c4>
			if (directionIn == false){
   83648:	b111      	cbz	r1, 83650 <ctrl_usart+0x1c8>
	return false;
   8364a:	2000      	movs	r0, #0
}
   8364c:	b008      	add	sp, #32
   8364e:	bd70      	pop	{r4, r5, r6, pc}
				usart_disable_rx(usart);
   83650:	4e3a      	ldr	r6, [pc, #232]	; (8373c <ctrl_usart+0x2b4>)
   83652:	47b0      	blx	r6
				usart_disable_rx(usart);
   83654:	4628      	mov	r0, r5
   83656:	47b0      	blx	r6
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   83658:	2103      	movs	r1, #3
   8365a:	4628      	mov	r0, r5
   8365c:	4b38      	ldr	r3, [pc, #224]	; (83740 <ctrl_usart+0x2b8>)
   8365e:	4798      	blx	r3
	return false;
   83660:	4620      	mov	r0, r4
   83662:	e7f3      	b.n	8364c <ctrl_usart+0x1c4>
			if (directionIn){
   83664:	2900      	cmp	r1, #0
   83666:	f000 809f 	beq.w	837a8 <ctrl_usart+0x320>
				if (udd_g_ctrlreq.req.wLength == 4){
   8366a:	4b1d      	ldr	r3, [pc, #116]	; (836e0 <ctrl_usart+0x258>)
   8366c:	88db      	ldrh	r3, [r3, #6]
   8366e:	2b04      	cmp	r3, #4
   83670:	d001      	beq.n	83676 <ctrl_usart+0x1ee>
	return false;
   83672:	2000      	movs	r0, #0
   83674:	e7ea      	b.n	8364c <ctrl_usart+0x1c4>
					udd_g_ctrlreq.payload = ctrlbuffer;
   83676:	4b1a      	ldr	r3, [pc, #104]	; (836e0 <ctrl_usart+0x258>)
   83678:	4a32      	ldr	r2, [pc, #200]	; (83744 <ctrl_usart+0x2bc>)
   8367a:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   8367c:	2204      	movs	r2, #4
   8367e:	819a      	strh	r2, [r3, #12]
					if (usart == USART0){
   83680:	4b18      	ldr	r3, [pc, #96]	; (836e4 <ctrl_usart+0x25c>)
   83682:	4298      	cmp	r0, r3
   83684:	d014      	beq.n	836b0 <ctrl_usart+0x228>
					} else if (usart == USART1){
   83686:	4b18      	ldr	r3, [pc, #96]	; (836e8 <ctrl_usart+0x260>)
   83688:	4298      	cmp	r0, r3
   8368a:	d016      	beq.n	836ba <ctrl_usart+0x232>
					} else if (usart == USART2){
   8368c:	4b17      	ldr	r3, [pc, #92]	; (836ec <ctrl_usart+0x264>)
   8368e:	4298      	cmp	r0, r3
   83690:	d018      	beq.n	836c4 <ctrl_usart+0x23c>
					word2buf(ctrlbuffer, cnt);
   83692:	4b2c      	ldr	r3, [pc, #176]	; (83744 <ctrl_usart+0x2bc>)
   83694:	f89d 2004 	ldrb.w	r2, [sp, #4]
   83698:	701a      	strb	r2, [r3, #0]
   8369a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   8369e:	705a      	strb	r2, [r3, #1]
   836a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   836a4:	709a      	strb	r2, [r3, #2]
   836a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   836aa:	70da      	strb	r2, [r3, #3]
					return true;
   836ac:	4620      	mov	r0, r4
   836ae:	e7cd      	b.n	8364c <ctrl_usart+0x1c4>
						cnt = circ_buf_count(&rx0buf);
   836b0:	4815      	ldr	r0, [pc, #84]	; (83708 <ctrl_usart+0x280>)
   836b2:	4b25      	ldr	r3, [pc, #148]	; (83748 <ctrl_usart+0x2c0>)
   836b4:	4798      	blx	r3
   836b6:	9001      	str	r0, [sp, #4]
   836b8:	e7eb      	b.n	83692 <ctrl_usart+0x20a>
						cnt = circ_buf_count(&rx1buf);
   836ba:	4817      	ldr	r0, [pc, #92]	; (83718 <ctrl_usart+0x290>)
   836bc:	4b22      	ldr	r3, [pc, #136]	; (83748 <ctrl_usart+0x2c0>)
   836be:	4798      	blx	r3
   836c0:	9001      	str	r0, [sp, #4]
   836c2:	e7e6      	b.n	83692 <ctrl_usart+0x20a>
						cnt = circ_buf_count(&rx2buf);
   836c4:	4816      	ldr	r0, [pc, #88]	; (83720 <ctrl_usart+0x298>)
   836c6:	4b20      	ldr	r3, [pc, #128]	; (83748 <ctrl_usart+0x2c0>)
   836c8:	4798      	blx	r3
   836ca:	9001      	str	r0, [sp, #4]
   836cc:	e7e1      	b.n	83692 <ctrl_usart+0x20a>
			if (directionIn){
   836ce:	2900      	cmp	r1, #0
   836d0:	d06c      	beq.n	837ac <ctrl_usart+0x324>
				if (udd_g_ctrlreq.req.wLength == 4){
   836d2:	4b03      	ldr	r3, [pc, #12]	; (836e0 <ctrl_usart+0x258>)
   836d4:	88db      	ldrh	r3, [r3, #6]
   836d6:	2b04      	cmp	r3, #4
   836d8:	d038      	beq.n	8374c <ctrl_usart+0x2c4>
	return false;
   836da:	2000      	movs	r0, #0
   836dc:	e7b6      	b.n	8364c <ctrl_usart+0x1c4>
   836de:	bf00      	nop
   836e0:	20002dec 	.word	0x20002dec
   836e4:	40090000 	.word	0x40090000
   836e8:	40094000 	.word	0x40094000
   836ec:	40098000 	.word	0x40098000
   836f0:	05b8d800 	.word	0x05b8d800
   836f4:	00086ca9 	.word	0x00086ca9
   836f8:	000853d5 	.word	0x000853d5
   836fc:	200029b0 	.word	0x200029b0
   83700:	00081ef9 	.word	0x00081ef9
   83704:	20002d00 	.word	0x20002d00
   83708:	20002734 	.word	0x20002734
   8370c:	0008dbf4 	.word	0x0008dbf4
   83710:	00087a5d 	.word	0x00087a5d
   83714:	200028dc 	.word	0x200028dc
   83718:	20002c2c 	.word	0x20002c2c
   8371c:	20002660 	.word	0x20002660
   83720:	20002b58 	.word	0x20002b58
   83724:	0008dc08 	.word	0x0008dc08
   83728:	00086fad 	.word	0x00086fad
   8372c:	00086f9d 	.word	0x00086f9d
   83730:	00086fb9 	.word	0x00086fb9
   83734:	00085081 	.word	0x00085081
   83738:	e000e100 	.word	0xe000e100
   8373c:	00086fb3 	.word	0x00086fb3
   83740:	00086fbd 	.word	0x00086fbd
   83744:	20002160 	.word	0x20002160
   83748:	00081fad 	.word	0x00081fad
					udd_g_ctrlreq.payload = ctrlbuffer;
   8374c:	4b18      	ldr	r3, [pc, #96]	; (837b0 <ctrl_usart+0x328>)
   8374e:	4a19      	ldr	r2, [pc, #100]	; (837b4 <ctrl_usart+0x32c>)
   83750:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   83752:	2204      	movs	r2, #4
   83754:	819a      	strh	r2, [r3, #12]
					if (usart == USART0){
   83756:	4b18      	ldr	r3, [pc, #96]	; (837b8 <ctrl_usart+0x330>)
   83758:	4298      	cmp	r0, r3
   8375a:	d014      	beq.n	83786 <ctrl_usart+0x2fe>
					} else if (usart == USART1){
   8375c:	4b17      	ldr	r3, [pc, #92]	; (837bc <ctrl_usart+0x334>)
   8375e:	4298      	cmp	r0, r3
   83760:	d016      	beq.n	83790 <ctrl_usart+0x308>
					} else if (usart == USART2){
   83762:	4b17      	ldr	r3, [pc, #92]	; (837c0 <ctrl_usart+0x338>)
   83764:	4298      	cmp	r0, r3
   83766:	d018      	beq.n	8379a <ctrl_usart+0x312>
					word2buf(ctrlbuffer, cnt);
   83768:	4b12      	ldr	r3, [pc, #72]	; (837b4 <ctrl_usart+0x32c>)
   8376a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   8376e:	701a      	strb	r2, [r3, #0]
   83770:	f89d 2005 	ldrb.w	r2, [sp, #5]
   83774:	705a      	strb	r2, [r3, #1]
   83776:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8377a:	709a      	strb	r2, [r3, #2]
   8377c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   83780:	70da      	strb	r2, [r3, #3]
					return true;
   83782:	4620      	mov	r0, r4
   83784:	e762      	b.n	8364c <ctrl_usart+0x1c4>
						cnt = circ_buf_count(&tx0buf);
   83786:	480f      	ldr	r0, [pc, #60]	; (837c4 <ctrl_usart+0x33c>)
   83788:	4b0f      	ldr	r3, [pc, #60]	; (837c8 <ctrl_usart+0x340>)
   8378a:	4798      	blx	r3
   8378c:	9001      	str	r0, [sp, #4]
   8378e:	e7eb      	b.n	83768 <ctrl_usart+0x2e0>
						cnt = circ_buf_count(&tx1buf);
   83790:	480e      	ldr	r0, [pc, #56]	; (837cc <ctrl_usart+0x344>)
   83792:	4b0d      	ldr	r3, [pc, #52]	; (837c8 <ctrl_usart+0x340>)
   83794:	4798      	blx	r3
   83796:	9001      	str	r0, [sp, #4]
   83798:	e7e6      	b.n	83768 <ctrl_usart+0x2e0>
						cnt = circ_buf_count(&tx2buf);
   8379a:	480d      	ldr	r0, [pc, #52]	; (837d0 <ctrl_usart+0x348>)
   8379c:	4b0a      	ldr	r3, [pc, #40]	; (837c8 <ctrl_usart+0x340>)
   8379e:	4798      	blx	r3
   837a0:	9001      	str	r0, [sp, #4]
   837a2:	e7e1      	b.n	83768 <ctrl_usart+0x2e0>
	return false;
   837a4:	2000      	movs	r0, #0
   837a6:	e751      	b.n	8364c <ctrl_usart+0x1c4>
   837a8:	4608      	mov	r0, r1
   837aa:	e74f      	b.n	8364c <ctrl_usart+0x1c4>
   837ac:	4608      	mov	r0, r1
   837ae:	e74d      	b.n	8364c <ctrl_usart+0x1c4>
   837b0:	20002dec 	.word	0x20002dec
   837b4:	20002160 	.word	0x20002160
   837b8:	40090000 	.word	0x40090000
   837bc:	40094000 	.word	0x40094000
   837c0:	40098000 	.word	0x40098000
   837c4:	20002d00 	.word	0x20002d00
   837c8:	00081fad 	.word	0x00081fad
   837cc:	200028dc 	.word	0x200028dc
   837d0:	20002660 	.word	0x20002660

000837d4 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   837d4:	b538      	push	{r3, r4, r5, lr}
   837d6:	4604      	mov	r4, r0
   837d8:	4613      	mov	r3, r2
	if (txbuf == NULL){
   837da:	460d      	mov	r5, r1
   837dc:	b159      	cbz	r1, 837f6 <usart_driver_putchar+0x22>
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   837de:	2200      	movs	r2, #0
   837e0:	4619      	mov	r1, r3
   837e2:	4628      	mov	r0, r5
   837e4:	4b12      	ldr	r3, [pc, #72]	; (83830 <usart_driver_putchar+0x5c>)
   837e6:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   837e8:	4620      	mov	r0, r4
   837ea:	4b12      	ldr	r3, [pc, #72]	; (83834 <usart_driver_putchar+0x60>)
   837ec:	4798      	blx	r3
   837ee:	f010 0f02 	tst.w	r0, #2
   837f2:	d011      	beq.n	83818 <usart_driver_putchar+0x44>
   837f4:	bd38      	pop	{r3, r4, r5, pc}
		if (usart == USART0) txbuf = &tx0buf;
   837f6:	4a10      	ldr	r2, [pc, #64]	; (83838 <usart_driver_putchar+0x64>)
   837f8:	4290      	cmp	r0, r2
   837fa:	d009      	beq.n	83810 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   837fc:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   83800:	4290      	cmp	r0, r2
   83802:	d007      	beq.n	83814 <usart_driver_putchar+0x40>
		else if (usart == USART2) txbuf = &tx2buf;
   83804:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   83808:	4290      	cmp	r0, r2
   8380a:	d1f3      	bne.n	837f4 <usart_driver_putchar+0x20>
   8380c:	4d0b      	ldr	r5, [pc, #44]	; (8383c <usart_driver_putchar+0x68>)
   8380e:	e7e6      	b.n	837de <usart_driver_putchar+0xa>
		if (usart == USART0) txbuf = &tx0buf;
   83810:	4d0b      	ldr	r5, [pc, #44]	; (83840 <usart_driver_putchar+0x6c>)
   83812:	e7e4      	b.n	837de <usart_driver_putchar+0xa>
		else if (usart == USART1) txbuf = &tx1buf;
   83814:	4d0b      	ldr	r5, [pc, #44]	; (83844 <usart_driver_putchar+0x70>)
   83816:	e7e2      	b.n	837de <usart_driver_putchar+0xa>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   83818:	4628      	mov	r0, r5
   8381a:	4b0b      	ldr	r3, [pc, #44]	; (83848 <usart_driver_putchar+0x74>)
   8381c:	4798      	blx	r3
   8381e:	4601      	mov	r1, r0
   83820:	4620      	mov	r0, r4
   83822:	4b0a      	ldr	r3, [pc, #40]	; (8384c <usart_driver_putchar+0x78>)
   83824:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   83826:	2102      	movs	r1, #2
   83828:	4620      	mov	r0, r4
   8382a:	4b09      	ldr	r3, [pc, #36]	; (83850 <usart_driver_putchar+0x7c>)
   8382c:	4798      	blx	r3
   8382e:	e7e1      	b.n	837f4 <usart_driver_putchar+0x20>
   83830:	00081f05 	.word	0x00081f05
   83834:	00086fc1 	.word	0x00086fc1
   83838:	40090000 	.word	0x40090000
   8383c:	20002660 	.word	0x20002660
   83840:	20002d00 	.word	0x20002d00
   83844:	200028dc 	.word	0x200028dc
   83848:	00081f59 	.word	0x00081f59
   8384c:	00086ffd 	.word	0x00086ffd
   83850:	00086fb9 	.word	0x00086fb9

00083854 <usart_driver_getchar>:
	}
}

uint8_t usart_driver_getchar(Usart * usart)
{
   83854:	b508      	push	{r3, lr}
	tcirc_buf * rxbuf = NULL;	 
	if (rxbuf == NULL){
			if (usart == USART0) rxbuf = &rx0buf;
   83856:	4b0a      	ldr	r3, [pc, #40]	; (83880 <usart_driver_getchar+0x2c>)
   83858:	4298      	cmp	r0, r3
   8385a:	d00b      	beq.n	83874 <usart_driver_getchar+0x20>
			else if (usart == USART1) rxbuf = &rx1buf;
   8385c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   83860:	4298      	cmp	r0, r3
   83862:	d009      	beq.n	83878 <usart_driver_getchar+0x24>
			else if (usart == USART2) rxbuf = &rx2buf;
   83864:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   83868:	4298      	cmp	r0, r3
   8386a:	d001      	beq.n	83870 <usart_driver_getchar+0x1c>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   8386c:	20ff      	movs	r0, #255	; 0xff
	}
	return get_from_circ_buf(rxbuf);
}
   8386e:	bd08      	pop	{r3, pc}
			else if (usart == USART2) rxbuf = &rx2buf;
   83870:	4804      	ldr	r0, [pc, #16]	; (83884 <usart_driver_getchar+0x30>)
   83872:	e002      	b.n	8387a <usart_driver_getchar+0x26>
			if (usart == USART0) rxbuf = &rx0buf;
   83874:	4804      	ldr	r0, [pc, #16]	; (83888 <usart_driver_getchar+0x34>)
   83876:	e000      	b.n	8387a <usart_driver_getchar+0x26>
			else if (usart == USART1) rxbuf = &rx1buf;
   83878:	4804      	ldr	r0, [pc, #16]	; (8388c <usart_driver_getchar+0x38>)
	return get_from_circ_buf(rxbuf);
   8387a:	4b05      	ldr	r3, [pc, #20]	; (83890 <usart_driver_getchar+0x3c>)
   8387c:	4798      	blx	r3
   8387e:	bd08      	pop	{r3, pc}
   83880:	40090000 	.word	0x40090000
   83884:	20002b58 	.word	0x20002b58
   83888:	20002734 	.word	0x20002734
   8388c:	20002c2c 	.word	0x20002c2c
   83890:	00081f59 	.word	0x00081f59

00083894 <generic_isr>:


void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   83894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83898:	4605      	mov	r5, r0
   8389a:	4688      	mov	r8, r1
   8389c:	4616      	mov	r6, r2
	uint32_t status;
	status = usart_get_status(usart);
   8389e:	4b15      	ldr	r3, [pc, #84]	; (838f4 <generic_isr+0x60>)
   838a0:	4798      	blx	r3
   838a2:	4604      	mov	r4, r0
	if (status & US_CSR_RXRDY){
   838a4:	f010 0f01 	tst.w	r0, #1
   838a8:	d104      	bne.n	838b4 <generic_isr+0x20>
		add_to_circ_buf(rxbuf, temp, false);
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
		//udi_cdc_multi_putc(0, temp);
	}
	
	if (status & US_CSR_TXRDY){
   838aa:	f014 0f02 	tst.w	r4, #2
   838ae:	d10e      	bne.n	838ce <generic_isr+0x3a>
   838b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   838b4:	69af      	ldr	r7, [r5, #24]
		add_to_circ_buf(rxbuf, temp, false);
   838b6:	b2ff      	uxtb	r7, r7
   838b8:	2200      	movs	r2, #0
   838ba:	4639      	mov	r1, r7
   838bc:	4640      	mov	r0, r8
   838be:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8390c <generic_isr+0x78>
   838c2:	47c0      	blx	r8
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
   838c4:	2200      	movs	r2, #0
   838c6:	4639      	mov	r1, r7
   838c8:	480b      	ldr	r0, [pc, #44]	; (838f8 <generic_isr+0x64>)
   838ca:	47c0      	blx	r8
   838cc:	e7ed      	b.n	838aa <generic_isr+0x16>
		if (circ_buf_has_char(txbuf)){
   838ce:	4630      	mov	r0, r6
   838d0:	4b0a      	ldr	r3, [pc, #40]	; (838fc <generic_isr+0x68>)
   838d2:	4798      	blx	r3
   838d4:	b920      	cbnz	r0, 838e0 <generic_isr+0x4c>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   838d6:	2102      	movs	r1, #2
   838d8:	4628      	mov	r0, r5
   838da:	4b09      	ldr	r3, [pc, #36]	; (83900 <generic_isr+0x6c>)
   838dc:	4798      	blx	r3
		}
	}
}
   838de:	e7e7      	b.n	838b0 <generic_isr+0x1c>
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   838e0:	4630      	mov	r0, r6
   838e2:	4b08      	ldr	r3, [pc, #32]	; (83904 <generic_isr+0x70>)
   838e4:	4798      	blx	r3
   838e6:	4601      	mov	r1, r0
   838e8:	4628      	mov	r0, r5
   838ea:	4b07      	ldr	r3, [pc, #28]	; (83908 <generic_isr+0x74>)
   838ec:	4798      	blx	r3
   838ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   838f2:	bf00      	nop
   838f4:	00086fc5 	.word	0x00086fc5
   838f8:	200029b0 	.word	0x200029b0
   838fc:	00081fa1 	.word	0x00081fa1
   83900:	00086fbd 	.word	0x00086fbd
   83904:	00081f59 	.word	0x00081f59
   83908:	00086ffd 	.word	0x00086ffd
   8390c:	00081f05 	.word	0x00081f05

00083910 <USART0_Handler>:

ISR(USART0_Handler)
{
   83910:	b508      	push	{r3, lr}
	generic_isr(USART0, &rx0buf, &tx0buf);
   83912:	4a03      	ldr	r2, [pc, #12]	; (83920 <USART0_Handler+0x10>)
   83914:	4903      	ldr	r1, [pc, #12]	; (83924 <USART0_Handler+0x14>)
   83916:	4804      	ldr	r0, [pc, #16]	; (83928 <USART0_Handler+0x18>)
   83918:	4b04      	ldr	r3, [pc, #16]	; (8392c <USART0_Handler+0x1c>)
   8391a:	4798      	blx	r3
   8391c:	bd08      	pop	{r3, pc}
   8391e:	bf00      	nop
   83920:	20002d00 	.word	0x20002d00
   83924:	20002734 	.word	0x20002734
   83928:	40090000 	.word	0x40090000
   8392c:	00083895 	.word	0x00083895

00083930 <USART1_Handler>:
}

ISR(USART1_Handler)
{
   83930:	b508      	push	{r3, lr}
	generic_isr(USART1, &rx1buf, &tx1buf);
   83932:	4a03      	ldr	r2, [pc, #12]	; (83940 <USART1_Handler+0x10>)
   83934:	4903      	ldr	r1, [pc, #12]	; (83944 <USART1_Handler+0x14>)
   83936:	4804      	ldr	r0, [pc, #16]	; (83948 <USART1_Handler+0x18>)
   83938:	4b04      	ldr	r3, [pc, #16]	; (8394c <USART1_Handler+0x1c>)
   8393a:	4798      	blx	r3
   8393c:	bd08      	pop	{r3, pc}
   8393e:	bf00      	nop
   83940:	200028dc 	.word	0x200028dc
   83944:	20002c2c 	.word	0x20002c2c
   83948:	40094000 	.word	0x40094000
   8394c:	00083895 	.word	0x00083895

00083950 <USART2_Handler>:
}

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   83950:	b508      	push	{r3, lr}
	generic_isr(USART2, &rx2buf, &tx2buf);
   83952:	4a03      	ldr	r2, [pc, #12]	; (83960 <USART2_Handler+0x10>)
   83954:	4903      	ldr	r1, [pc, #12]	; (83964 <USART2_Handler+0x14>)
   83956:	4804      	ldr	r0, [pc, #16]	; (83968 <USART2_Handler+0x18>)
   83958:	4b04      	ldr	r3, [pc, #16]	; (8396c <USART2_Handler+0x1c>)
   8395a:	4798      	blx	r3
   8395c:	bd08      	pop	{r3, pc}
   8395e:	bf00      	nop
   83960:	20002660 	.word	0x20002660
   83964:	20002b58 	.word	0x20002b58
   83968:	40098000 	.word	0x40098000
   8396c:	00083895 	.word	0x00083895

00083970 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   83970:	b538      	push	{r3, r4, r5, lr}
   83972:	4605      	mov	r5, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   83974:	b2c0      	uxtb	r0, r0
   83976:	4c05      	ldr	r4, [pc, #20]	; (8398c <XMEGANVM_SendAddress+0x1c>)
   83978:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   8397a:	f3c5 2007 	ubfx	r0, r5, #8, #8
   8397e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   83980:	f3c5 4007 	ubfx	r0, r5, #16, #8
   83984:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   83986:	0e28      	lsrs	r0, r5, #24
   83988:	47a0      	blx	r4
   8398a:	bd38      	pop	{r3, r4, r5, pc}
   8398c:	00084205 	.word	0x00084205

00083990 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   83990:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   83992:	4b03      	ldr	r3, [pc, #12]	; (839a0 <XMEGANVM_SendNVMRegAddress+0x10>)
   83994:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   83996:	4318      	orrs	r0, r3
   83998:	4b02      	ldr	r3, [pc, #8]	; (839a4 <XMEGANVM_SendNVMRegAddress+0x14>)
   8399a:	4798      	blx	r3
   8399c:	bd08      	pop	{r3, pc}
   8399e:	bf00      	nop
   839a0:	200005b0 	.word	0x200005b0
   839a4:	00083971 	.word	0x00083971

000839a8 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   839a8:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   839aa:	4e07      	ldr	r6, [pc, #28]	; (839c8 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   839ac:	4d07      	ldr	r5, [pc, #28]	; (839cc <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   839ae:	4c08      	ldr	r4, [pc, #32]	; (839d0 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   839b0:	2080      	movs	r0, #128	; 0x80
   839b2:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   839b4:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   839b6:	6823      	ldr	r3, [r4, #0]
   839b8:	b123      	cbz	r3, 839c4 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   839ba:	f010 0f02 	tst.w	r0, #2
   839be:	d0f7      	beq.n	839b0 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   839c0:	2001      	movs	r0, #1
   839c2:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   839c4:	2000      	movs	r0, #0
		}
	}
}
   839c6:	bd70      	pop	{r4, r5, r6, pc}
   839c8:	00084205 	.word	0x00084205
   839cc:	00084231 	.word	0x00084231
   839d0:	2000265c 	.word	0x2000265c

000839d4 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   839d4:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   839d6:	206b      	movs	r0, #107	; 0x6b
   839d8:	4b09      	ldr	r3, [pc, #36]	; (83a00 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   839da:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   839dc:	200f      	movs	r0, #15
   839de:	4b09      	ldr	r3, [pc, #36]	; (83a04 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   839e0:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   839e2:	4e07      	ldr	r6, [pc, #28]	; (83a00 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   839e4:	4d08      	ldr	r5, [pc, #32]	; (83a08 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   839e6:	4c09      	ldr	r4, [pc, #36]	; (83a0c <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   839e8:	2020      	movs	r0, #32
   839ea:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   839ec:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   839ee:	6823      	ldr	r3, [r4, #0]
   839f0:	b123      	cbz	r3, 839fc <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   839f2:	f010 0f80 	tst.w	r0, #128	; 0x80
   839f6:	d1f7      	bne.n	839e8 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   839f8:	2001      	movs	r0, #1
   839fa:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   839fc:	2000      	movs	r0, #0
		}
	}
}
   839fe:	bd70      	pop	{r4, r5, r6, pc}
   83a00:	00084205 	.word	0x00084205
   83a04:	00083991 	.word	0x00083991
   83a08:	00084231 	.word	0x00084231
   83a0c:	2000265c 	.word	0x2000265c

00083a10 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   83a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a14:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   83a16:	4b1a      	ldr	r3, [pc, #104]	; (83a80 <XMEGANVM_EnablePDI+0x70>)
   83a18:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83a1a:	20c1      	movs	r0, #193	; 0xc1
   83a1c:	4c19      	ldr	r4, [pc, #100]	; (83a84 <XMEGANVM_EnablePDI+0x74>)
   83a1e:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   83a20:	2059      	movs	r0, #89	; 0x59
   83a22:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   83a24:	20c2      	movs	r0, #194	; 0xc2
   83a26:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   83a28:	2002      	movs	r0, #2
   83a2a:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   83a2c:	20e0      	movs	r0, #224	; 0xe0
   83a2e:	47a0      	blx	r4
   83a30:	f10d 0407 	add.w	r4, sp, #7
   83a34:	f10d 38ff 	add.w	r8, sp, #4294967295
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   83a38:	2712      	movs	r7, #18
   83a3a:	2689      	movs	r6, #137	; 0x89
   83a3c:	4d11      	ldr	r5, [pc, #68]	; (83a84 <XMEGANVM_EnablePDI+0x74>)
   83a3e:	f88d 7000 	strb.w	r7, [sp]
   83a42:	f88d 6001 	strb.w	r6, [sp, #1]
   83a46:	23ab      	movs	r3, #171	; 0xab
   83a48:	f88d 3002 	strb.w	r3, [sp, #2]
   83a4c:	2345      	movs	r3, #69	; 0x45
   83a4e:	f88d 3003 	strb.w	r3, [sp, #3]
   83a52:	23cd      	movs	r3, #205	; 0xcd
   83a54:	f88d 3004 	strb.w	r3, [sp, #4]
   83a58:	23d8      	movs	r3, #216	; 0xd8
   83a5a:	f88d 3005 	strb.w	r3, [sp, #5]
   83a5e:	2388      	movs	r3, #136	; 0x88
   83a60:	f88d 3006 	strb.w	r3, [sp, #6]
   83a64:	23ff      	movs	r3, #255	; 0xff
   83a66:	f88d 3007 	strb.w	r3, [sp, #7]
   83a6a:	f814 0901 	ldrb.w	r0, [r4], #-1
   83a6e:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83a70:	4544      	cmp	r4, r8
   83a72:	d1e4      	bne.n	83a3e <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   83a74:	4b04      	ldr	r3, [pc, #16]	; (83a88 <XMEGANVM_EnablePDI+0x78>)
   83a76:	4798      	blx	r3
}
   83a78:	b002      	add	sp, #8
   83a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a7e:	bf00      	nop
   83a80:	000842d1 	.word	0x000842d1
   83a84:	00084205 	.word	0x00084205
   83a88:	000839a9 	.word	0x000839a9

00083a8c <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   83a8c:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   83a8e:	4b09      	ldr	r3, [pc, #36]	; (83ab4 <XMEGANVM_DisablePDI+0x28>)
   83a90:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83a92:	4c09      	ldr	r4, [pc, #36]	; (83ab8 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83a94:	4d09      	ldr	r5, [pc, #36]	; (83abc <XMEGANVM_DisablePDI+0x30>)
   83a96:	4e0a      	ldr	r6, [pc, #40]	; (83ac0 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83a98:	20c1      	movs	r0, #193	; 0xc1
   83a9a:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   83a9c:	2000      	movs	r0, #0
   83a9e:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   83aa0:	2081      	movs	r0, #129	; 0x81
   83aa2:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83aa4:	47a8      	blx	r5
   83aa6:	b110      	cbz	r0, 83aae <XMEGANVM_DisablePDI+0x22>
   83aa8:	6833      	ldr	r3, [r6, #0]
   83aaa:	2b00      	cmp	r3, #0
   83aac:	d1f4      	bne.n	83a98 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   83aae:	4b05      	ldr	r3, [pc, #20]	; (83ac4 <XMEGANVM_DisablePDI+0x38>)
   83ab0:	4798      	blx	r3
   83ab2:	bd70      	pop	{r4, r5, r6, pc}
   83ab4:	000839a9 	.word	0x000839a9
   83ab8:	00084205 	.word	0x00084205
   83abc:	00084231 	.word	0x00084231
   83ac0:	2000265c 	.word	0x2000265c
   83ac4:	000841a9 	.word	0x000841a9

00083ac8 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   83ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83aca:	4607      	mov	r7, r0
   83acc:	460d      	mov	r5, r1
   83ace:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83ad0:	4b1e      	ldr	r3, [pc, #120]	; (83b4c <XMEGANVM_ReadMemory+0x84>)
   83ad2:	4798      	blx	r3
   83ad4:	4603      	mov	r3, r0
   83ad6:	b908      	cbnz	r0, 83adc <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   83ad8:	4618      	mov	r0, r3
   83ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83adc:	204c      	movs	r0, #76	; 0x4c
   83ade:	4e1c      	ldr	r6, [pc, #112]	; (83b50 <XMEGANVM_ReadMemory+0x88>)
   83ae0:	47b0      	blx	r6
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83ae2:	200a      	movs	r0, #10
   83ae4:	4b1b      	ldr	r3, [pc, #108]	; (83b54 <XMEGANVM_ReadMemory+0x8c>)
   83ae6:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   83ae8:	2043      	movs	r0, #67	; 0x43
   83aea:	47b0      	blx	r6
	if (ReadSize > 1)
   83aec:	2c01      	cmp	r4, #1
   83aee:	d923      	bls.n	83b38 <XMEGANVM_ReadMemory+0x70>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83af0:	206b      	movs	r0, #107	; 0x6b
   83af2:	47b0      	blx	r6
		XMEGANVM_SendAddress(ReadAddress);
   83af4:	4638      	mov	r0, r7
   83af6:	4b18      	ldr	r3, [pc, #96]	; (83b58 <XMEGANVM_ReadMemory+0x90>)
   83af8:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83afa:	20a0      	movs	r0, #160	; 0xa0
   83afc:	47b0      	blx	r6
		XPROGTarget_SendByte(ReadSize - 1);
   83afe:	1e60      	subs	r0, r4, #1
   83b00:	b2c0      	uxtb	r0, r0
   83b02:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83b04:	2024      	movs	r0, #36	; 0x24
   83b06:	47b0      	blx	r6
		while (ReadSize-- && TimeoutTicksRemaining)
   83b08:	1e63      	subs	r3, r4, #1
   83b0a:	b29b      	uxth	r3, r3
   83b0c:	b174      	cbz	r4, 83b2c <XMEGANVM_ReadMemory+0x64>
   83b0e:	4a13      	ldr	r2, [pc, #76]	; (83b5c <XMEGANVM_ReadMemory+0x94>)
   83b10:	6812      	ldr	r2, [r2, #0]
   83b12:	b15a      	cbz	r2, 83b2c <XMEGANVM_ReadMemory+0x64>
   83b14:	1e6c      	subs	r4, r5, #1
   83b16:	441d      	add	r5, r3
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83b18:	4e11      	ldr	r6, [pc, #68]	; (83b60 <XMEGANVM_ReadMemory+0x98>)
		while (ReadSize-- && TimeoutTicksRemaining)
   83b1a:	4f10      	ldr	r7, [pc, #64]	; (83b5c <XMEGANVM_ReadMemory+0x94>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83b1c:	47b0      	blx	r6
   83b1e:	f804 0f01 	strb.w	r0, [r4, #1]!
		while (ReadSize-- && TimeoutTicksRemaining)
   83b22:	42ac      	cmp	r4, r5
   83b24:	d002      	beq.n	83b2c <XMEGANVM_ReadMemory+0x64>
   83b26:	683b      	ldr	r3, [r7, #0]
   83b28:	2b00      	cmp	r3, #0
   83b2a:	d1f7      	bne.n	83b1c <XMEGANVM_ReadMemory+0x54>
	return (TimeoutTicksRemaining > 0);
   83b2c:	4b0b      	ldr	r3, [pc, #44]	; (83b5c <XMEGANVM_ReadMemory+0x94>)
   83b2e:	681b      	ldr	r3, [r3, #0]
   83b30:	3300      	adds	r3, #0
   83b32:	bf18      	it	ne
   83b34:	2301      	movne	r3, #1
   83b36:	e7cf      	b.n	83ad8 <XMEGANVM_ReadMemory+0x10>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b38:	200c      	movs	r0, #12
   83b3a:	4b05      	ldr	r3, [pc, #20]	; (83b50 <XMEGANVM_ReadMemory+0x88>)
   83b3c:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   83b3e:	4638      	mov	r0, r7
   83b40:	4b05      	ldr	r3, [pc, #20]	; (83b58 <XMEGANVM_ReadMemory+0x90>)
   83b42:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83b44:	4b06      	ldr	r3, [pc, #24]	; (83b60 <XMEGANVM_ReadMemory+0x98>)
   83b46:	4798      	blx	r3
   83b48:	7028      	strb	r0, [r5, #0]
   83b4a:	e7ef      	b.n	83b2c <XMEGANVM_ReadMemory+0x64>
   83b4c:	000839d5 	.word	0x000839d5
   83b50:	00084205 	.word	0x00084205
   83b54:	00083991 	.word	0x00083991
   83b58:	00083971 	.word	0x00083971
   83b5c:	2000265c 	.word	0x2000265c
   83b60:	00084231 	.word	0x00084231

00083b64 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   83b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b68:	4680      	mov	r8, r0
   83b6a:	460f      	mov	r7, r1
   83b6c:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83b6e:	4b0b      	ldr	r3, [pc, #44]	; (83b9c <XMEGANVM_WriteByteMemory+0x38>)
   83b70:	4798      	blx	r3
   83b72:	4604      	mov	r4, r0
   83b74:	b910      	cbnz	r0, 83b7c <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   83b76:	4620      	mov	r0, r4
   83b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b7c:	204c      	movs	r0, #76	; 0x4c
   83b7e:	4d08      	ldr	r5, [pc, #32]	; (83ba0 <XMEGANVM_WriteByteMemory+0x3c>)
   83b80:	47a8      	blx	r5
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83b82:	200a      	movs	r0, #10
   83b84:	4b07      	ldr	r3, [pc, #28]	; (83ba4 <XMEGANVM_WriteByteMemory+0x40>)
   83b86:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   83b88:	4640      	mov	r0, r8
   83b8a:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b8c:	204c      	movs	r0, #76	; 0x4c
   83b8e:	47a8      	blx	r5
	XMEGANVM_SendAddress(WriteAddress);
   83b90:	4638      	mov	r0, r7
   83b92:	4b05      	ldr	r3, [pc, #20]	; (83ba8 <XMEGANVM_WriteByteMemory+0x44>)
   83b94:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   83b96:	4630      	mov	r0, r6
   83b98:	47a8      	blx	r5
	return true;
   83b9a:	e7ec      	b.n	83b76 <XMEGANVM_WriteByteMemory+0x12>
   83b9c:	000839d5 	.word	0x000839d5
   83ba0:	00084205 	.word	0x00084205
   83ba4:	00083991 	.word	0x00083991
   83ba8:	00083971 	.word	0x00083971

00083bac <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   83bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83bb0:	4681      	mov	r9, r0
   83bb2:	4617      	mov	r7, r2
   83bb4:	461d      	mov	r5, r3
   83bb6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   83bba:	f013 0f01 	tst.w	r3, #1
   83bbe:	d107      	bne.n	83bd0 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   83bc0:	b9e6      	cbnz	r6, 83bfc <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   83bc2:	f015 0f02 	tst.w	r5, #2
   83bc6:	d13f      	bne.n	83c48 <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   83bc8:	2401      	movs	r4, #1
}
   83bca:	4620      	mov	r0, r4
   83bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83bd0:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83bd2:	4b28      	ldr	r3, [pc, #160]	; (83c74 <XMEGANVM_WritePageMemory+0xc8>)
   83bd4:	4798      	blx	r3
   83bd6:	4604      	mov	r4, r0
   83bd8:	2800      	cmp	r0, #0
   83bda:	d0f6      	beq.n	83bca <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83bdc:	204c      	movs	r0, #76	; 0x4c
   83bde:	4c26      	ldr	r4, [pc, #152]	; (83c78 <XMEGANVM_WritePageMemory+0xcc>)
   83be0:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83be2:	200a      	movs	r0, #10
   83be4:	f8df a094 	ldr.w	sl, [pc, #148]	; 83c7c <XMEGANVM_WritePageMemory+0xd0>
   83be8:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   83bea:	4640      	mov	r0, r8
   83bec:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83bee:	204c      	movs	r0, #76	; 0x4c
   83bf0:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83bf2:	200b      	movs	r0, #11
   83bf4:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83bf6:	2001      	movs	r0, #1
   83bf8:	47a0      	blx	r4
   83bfa:	e7e1      	b.n	83bc0 <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83bfc:	4b1d      	ldr	r3, [pc, #116]	; (83c74 <XMEGANVM_WritePageMemory+0xc8>)
   83bfe:	4798      	blx	r3
   83c00:	4604      	mov	r4, r0
   83c02:	2800      	cmp	r0, #0
   83c04:	d0e1      	beq.n	83bca <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c06:	204c      	movs	r0, #76	; 0x4c
   83c08:	4c1b      	ldr	r4, [pc, #108]	; (83c78 <XMEGANVM_WritePageMemory+0xcc>)
   83c0a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83c0c:	200a      	movs	r0, #10
   83c0e:	4b1b      	ldr	r3, [pc, #108]	; (83c7c <XMEGANVM_WritePageMemory+0xd0>)
   83c10:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   83c12:	4648      	mov	r0, r9
   83c14:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83c16:	206b      	movs	r0, #107	; 0x6b
   83c18:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   83c1a:	9808      	ldr	r0, [sp, #32]
   83c1c:	4b18      	ldr	r3, [pc, #96]	; (83c80 <XMEGANVM_WritePageMemory+0xd4>)
   83c1e:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83c20:	20a0      	movs	r0, #160	; 0xa0
   83c22:	47a0      	blx	r4
		XPROGTarget_SendByte(WriteSize - 1);
   83c24:	1e70      	subs	r0, r6, #1
   83c26:	b2c0      	uxtb	r0, r0
   83c28:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83c2a:	2064      	movs	r0, #100	; 0x64
   83c2c:	47a0      	blx	r4
   83c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83c30:	1e5c      	subs	r4, r3, #1
		while (WriteSize--)
   83c32:	3e01      	subs	r6, #1
   83c34:	b2b6      	uxth	r6, r6
   83c36:	441e      	add	r6, r3
		  XPROGTarget_SendByte(*(WriteBuffer++));
   83c38:	f8df 803c 	ldr.w	r8, [pc, #60]	; 83c78 <XMEGANVM_WritePageMemory+0xcc>
   83c3c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   83c40:	47c0      	blx	r8
		while (WriteSize--)
   83c42:	42b4      	cmp	r4, r6
   83c44:	d1fa      	bne.n	83c3c <XMEGANVM_WritePageMemory+0x90>
   83c46:	e7bc      	b.n	83bc2 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83c48:	4b0a      	ldr	r3, [pc, #40]	; (83c74 <XMEGANVM_WritePageMemory+0xc8>)
   83c4a:	4798      	blx	r3
   83c4c:	4604      	mov	r4, r0
   83c4e:	2800      	cmp	r0, #0
   83c50:	d0bb      	beq.n	83bca <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c52:	204c      	movs	r0, #76	; 0x4c
   83c54:	4d08      	ldr	r5, [pc, #32]	; (83c78 <XMEGANVM_WritePageMemory+0xcc>)
   83c56:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83c58:	200a      	movs	r0, #10
   83c5a:	4b08      	ldr	r3, [pc, #32]	; (83c7c <XMEGANVM_WritePageMemory+0xd0>)
   83c5c:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   83c5e:	4638      	mov	r0, r7
   83c60:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c62:	204c      	movs	r0, #76	; 0x4c
   83c64:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   83c66:	9808      	ldr	r0, [sp, #32]
   83c68:	4b05      	ldr	r3, [pc, #20]	; (83c80 <XMEGANVM_WritePageMemory+0xd4>)
   83c6a:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83c6c:	2000      	movs	r0, #0
   83c6e:	47a8      	blx	r5
   83c70:	e7ab      	b.n	83bca <XMEGANVM_WritePageMemory+0x1e>
   83c72:	bf00      	nop
   83c74:	000839d5 	.word	0x000839d5
   83c78:	00084205 	.word	0x00084205
   83c7c:	00083991 	.word	0x00083991
   83c80:	00083971 	.word	0x00083971

00083c84 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   83c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c86:	4604      	mov	r4, r0
   83c88:	460e      	mov	r6, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83c8a:	4b36      	ldr	r3, [pc, #216]	; (83d64 <XMEGANVM_EraseMemory+0xe0>)
   83c8c:	4798      	blx	r3
   83c8e:	4603      	mov	r3, r0
   83c90:	b1a8      	cbz	r0, 83cbe <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   83c92:	2c40      	cmp	r4, #64	; 0x40
   83c94:	d015      	beq.n	83cc2 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   83c96:	2c30      	cmp	r4, #48	; 0x30
   83c98:	d022      	beq.n	83ce0 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c9a:	204c      	movs	r0, #76	; 0x4c
   83c9c:	4d32      	ldr	r5, [pc, #200]	; (83d68 <XMEGANVM_EraseMemory+0xe4>)
   83c9e:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83ca0:	200a      	movs	r0, #10
   83ca2:	4b32      	ldr	r3, [pc, #200]	; (83d6c <XMEGANVM_EraseMemory+0xe8>)
   83ca4:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   83ca6:	4620      	mov	r0, r4
   83ca8:	47a8      	blx	r5

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83caa:	204c      	movs	r0, #76	; 0x4c
   83cac:	47a8      	blx	r5
		XMEGANVM_SendAddress(Address);
   83cae:	4630      	mov	r0, r6
   83cb0:	4b2f      	ldr	r3, [pc, #188]	; (83d70 <XMEGANVM_EraseMemory+0xec>)
   83cb2:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83cb4:	2000      	movs	r0, #0
   83cb6:	47a8      	blx	r5
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   83cb8:	4b2e      	ldr	r3, [pc, #184]	; (83d74 <XMEGANVM_EraseMemory+0xf0>)
   83cba:	4798      	blx	r3
   83cbc:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   83cbe:	4618      	mov	r0, r3
   83cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83cc2:	204c      	movs	r0, #76	; 0x4c
   83cc4:	4c28      	ldr	r4, [pc, #160]	; (83d68 <XMEGANVM_EraseMemory+0xe4>)
   83cc6:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83cc8:	200a      	movs	r0, #10
   83cca:	4d28      	ldr	r5, [pc, #160]	; (83d6c <XMEGANVM_EraseMemory+0xe8>)
   83ccc:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83cce:	2040      	movs	r0, #64	; 0x40
   83cd0:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83cd2:	204c      	movs	r0, #76	; 0x4c
   83cd4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83cd6:	200b      	movs	r0, #11
   83cd8:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83cda:	2001      	movs	r0, #1
   83cdc:	47a0      	blx	r4
   83cde:	e7eb      	b.n	83cb8 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ce0:	204c      	movs	r0, #76	; 0x4c
   83ce2:	4c21      	ldr	r4, [pc, #132]	; (83d68 <XMEGANVM_EraseMemory+0xe4>)
   83ce4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83ce6:	200a      	movs	r0, #10
   83ce8:	4d20      	ldr	r5, [pc, #128]	; (83d6c <XMEGANVM_EraseMemory+0xe8>)
   83cea:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   83cec:	2036      	movs	r0, #54	; 0x36
   83cee:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83cf0:	204c      	movs	r0, #76	; 0x4c
   83cf2:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83cf4:	200b      	movs	r0, #11
   83cf6:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83cf8:	2001      	movs	r0, #1
   83cfa:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83cfc:	4b19      	ldr	r3, [pc, #100]	; (83d64 <XMEGANVM_EraseMemory+0xe0>)
   83cfe:	4798      	blx	r3
   83d00:	4603      	mov	r3, r0
   83d02:	2800      	cmp	r0, #0
   83d04:	d0db      	beq.n	83cbe <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d06:	204c      	movs	r0, #76	; 0x4c
   83d08:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d0a:	200a      	movs	r0, #10
   83d0c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   83d0e:	2033      	movs	r0, #51	; 0x33
   83d10:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83d12:	206b      	movs	r0, #107	; 0x6b
   83d14:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   83d16:	4630      	mov	r0, r6
   83d18:	4b15      	ldr	r3, [pc, #84]	; (83d70 <XMEGANVM_EraseMemory+0xec>)
   83d1a:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83d1c:	20a0      	movs	r0, #160	; 0xa0
   83d1e:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   83d20:	4d15      	ldr	r5, [pc, #84]	; (83d78 <XMEGANVM_EraseMemory+0xf4>)
   83d22:	7828      	ldrb	r0, [r5, #0]
   83d24:	3801      	subs	r0, #1
   83d26:	b2c0      	uxtb	r0, r0
   83d28:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83d2a:	2064      	movs	r0, #100	; 0x64
   83d2c:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83d2e:	882b      	ldrh	r3, [r5, #0]
   83d30:	b14b      	cbz	r3, 83d46 <XMEGANVM_EraseMemory+0xc2>
   83d32:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   83d34:	4627      	mov	r7, r4
   83d36:	4e0c      	ldr	r6, [pc, #48]	; (83d68 <XMEGANVM_EraseMemory+0xe4>)
   83d38:	4638      	mov	r0, r7
   83d3a:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83d3c:	3401      	adds	r4, #1
   83d3e:	b2e4      	uxtb	r4, r4
   83d40:	882b      	ldrh	r3, [r5, #0]
   83d42:	42a3      	cmp	r3, r4
   83d44:	d8f8      	bhi.n	83d38 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d46:	204c      	movs	r0, #76	; 0x4c
   83d48:	4c07      	ldr	r4, [pc, #28]	; (83d68 <XMEGANVM_EraseMemory+0xe4>)
   83d4a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d4c:	200a      	movs	r0, #10
   83d4e:	4d07      	ldr	r5, [pc, #28]	; (83d6c <XMEGANVM_EraseMemory+0xe8>)
   83d50:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83d52:	2030      	movs	r0, #48	; 0x30
   83d54:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d56:	204c      	movs	r0, #76	; 0x4c
   83d58:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83d5a:	200b      	movs	r0, #11
   83d5c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83d5e:	2001      	movs	r0, #1
   83d60:	47a0      	blx	r4
   83d62:	e7a9      	b.n	83cb8 <XMEGANVM_EraseMemory+0x34>
   83d64:	000839d5 	.word	0x000839d5
   83d68:	00084205 	.word	0x00084205
   83d6c:	00083991 	.word	0x00083991
   83d70:	00083971 	.word	0x00083971
   83d74:	000839a9 	.word	0x000839a9
   83d78:	200005ac 	.word	0x200005ac

00083d7c <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   83d7c:	b570      	push	{r4, r5, r6, lr}
   83d7e:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   83d80:	4b8e      	ldr	r3, [pc, #568]	; (83fbc <XPROGProtocol_Command+0x240>)
   83d82:	8858      	ldrh	r0, [r3, #2]
   83d84:	b2c3      	uxtb	r3, r0
   83d86:	4a8e      	ldr	r2, [pc, #568]	; (83fc0 <XPROGProtocol_Command+0x244>)
   83d88:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   83d8a:	3b01      	subs	r3, #1
   83d8c:	2b21      	cmp	r3, #33	; 0x21
   83d8e:	d82b      	bhi.n	83de8 <XPROGProtocol_Command+0x6c>
   83d90:	e8df f013 	tbh	[pc, r3, lsl #1]
   83d94:	002f0022 	.word	0x002f0022
   83d98:	00730037 	.word	0x00730037
   83d9c:	00c900a5 	.word	0x00c900a5
   83da0:	002a00cc 	.word	0x002a00cc
   83da4:	002a002a 	.word	0x002a002a
   83da8:	002a002a 	.word	0x002a002a
   83dac:	002a002a 	.word	0x002a002a
   83db0:	002a002a 	.word	0x002a002a
   83db4:	002a002a 	.word	0x002a002a
   83db8:	002a002a 	.word	0x002a002a
   83dbc:	002a002a 	.word	0x002a002a
   83dc0:	002a002a 	.word	0x002a002a
   83dc4:	002a002a 	.word	0x002a002a
   83dc8:	002a002a 	.word	0x002a002a
   83dcc:	002a002a 	.word	0x002a002a
   83dd0:	0160002a 	.word	0x0160002a
   83dd4:	014f0141 	.word	0x014f0141
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83dd8:	4b7a      	ldr	r3, [pc, #488]	; (83fc4 <XPROGProtocol_Command+0x248>)
   83dda:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83ddc:	4b7a      	ldr	r3, [pc, #488]	; (83fc8 <XPROGProtocol_Command+0x24c>)
   83dde:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83de0:	f080 0001 	eor.w	r0, r0, #1
   83de4:	4b79      	ldr	r3, [pc, #484]	; (83fcc <XPROGProtocol_Command+0x250>)
   83de6:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83de8:	4b79      	ldr	r3, [pc, #484]	; (83fd0 <XPROGProtocol_Command+0x254>)
   83dea:	4798      	blx	r3
	return false;
   83dec:	2000      	movs	r0, #0
}
   83dee:	b004      	add	sp, #16
   83df0:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   83df2:	4b74      	ldr	r3, [pc, #464]	; (83fc4 <XPROGProtocol_Command+0x248>)
   83df4:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   83df6:	4b77      	ldr	r3, [pc, #476]	; (83fd4 <XPROGProtocol_Command+0x258>)
   83df8:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83dfa:	2200      	movs	r2, #0
   83dfc:	4b73      	ldr	r3, [pc, #460]	; (83fcc <XPROGProtocol_Command+0x250>)
   83dfe:	701a      	strb	r2, [r3, #0]
   83e00:	e7f2      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83e02:	4b70      	ldr	r3, [pc, #448]	; (83fc4 <XPROGProtocol_Command+0x248>)
   83e04:	4798      	blx	r3
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83e06:	2200      	movs	r2, #0
   83e08:	4b70      	ldr	r3, [pc, #448]	; (83fcc <XPROGProtocol_Command+0x250>)
   83e0a:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83e0c:	4b6b      	ldr	r3, [pc, #428]	; (83fbc <XPROGProtocol_Command+0x240>)
   83e0e:	899b      	ldrh	r3, [r3, #12]
   83e10:	2b04      	cmp	r3, #4
   83e12:	d915      	bls.n	83e40 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   83e14:	4b69      	ldr	r3, [pc, #420]	; (83fbc <XPROGProtocol_Command+0x240>)
   83e16:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83e18:	791a      	ldrb	r2, [r3, #4]
   83e1a:	78d9      	ldrb	r1, [r3, #3]
   83e1c:	0409      	lsls	r1, r1, #16
   83e1e:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83e22:	785a      	ldrb	r2, [r3, #1]
   83e24:	4311      	orrs	r1, r2
   83e26:	789a      	ldrb	r2, [r3, #2]
   83e28:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83e2c:	781b      	ldrb	r3, [r3, #0]
   83e2e:	3b01      	subs	r3, #1
   83e30:	2b07      	cmp	r3, #7
   83e32:	d817      	bhi.n	83e64 <XPROGProtocol_Command+0xe8>
   83e34:	e8df f003 	tbb	[pc, r3]
   83e38:	0c0a0818 	.word	0x0c0a0818
   83e3c:	1412100e 	.word	0x1412100e
		XPROG_Status = XPROG_ERR_FAILED;
   83e40:	2201      	movs	r2, #1
   83e42:	4b62      	ldr	r3, [pc, #392]	; (83fcc <XPROGProtocol_Command+0x250>)
   83e44:	701a      	strb	r2, [r3, #0]
   83e46:	e7cf      	b.n	83de8 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_ERASE_CHIP:
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
		break;
		case XPROG_ERASE_APP:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   83e48:	2020      	movs	r0, #32
   83e4a:	e00e      	b.n	83e6a <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   83e4c:	2068      	movs	r0, #104	; 0x68
   83e4e:	e00c      	b.n	83e6a <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   83e50:	2030      	movs	r0, #48	; 0x30
   83e52:	e00a      	b.n	83e6a <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_APP_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   83e54:	2022      	movs	r0, #34	; 0x22
   83e56:	e008      	b.n	83e6a <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   83e58:	202a      	movs	r0, #42	; 0x2a
   83e5a:	e006      	b.n	83e6a <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   83e5c:	2032      	movs	r0, #50	; 0x32
   83e5e:	e004      	b.n	83e6a <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_USERSIG:
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   83e60:	2018      	movs	r0, #24
   83e62:	e002      	b.n	83e6a <XPROGProtocol_Command+0xee>
		break;
		default:
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   83e64:	2000      	movs	r0, #0
   83e66:	e000      	b.n	83e6a <XPROGProtocol_Command+0xee>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   83e68:	2040      	movs	r0, #64	; 0x40
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83e6a:	4b5b      	ldr	r3, [pc, #364]	; (83fd8 <XPROGProtocol_Command+0x25c>)
   83e6c:	4798      	blx	r3
   83e6e:	2800      	cmp	r0, #0
   83e70:	d1ba      	bne.n	83de8 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   83e72:	2203      	movs	r2, #3
   83e74:	4b55      	ldr	r3, [pc, #340]	; (83fcc <XPROGProtocol_Command+0x250>)
   83e76:	701a      	strb	r2, [r3, #0]
   83e78:	e7b6      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83e7a:	4b52      	ldr	r3, [pc, #328]	; (83fc4 <XPROGProtocol_Command+0x248>)
   83e7c:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83e7e:	2200      	movs	r2, #0
   83e80:	4b52      	ldr	r3, [pc, #328]	; (83fcc <XPROGProtocol_Command+0x250>)
   83e82:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   83e84:	4b4d      	ldr	r3, [pc, #308]	; (83fbc <XPROGProtocol_Command+0x240>)
   83e86:	88db      	ldrh	r3, [r3, #6]
   83e88:	2b07      	cmp	r3, #7
   83e8a:	d802      	bhi.n	83e92 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   83e8c:	2201      	movs	r2, #1
   83e8e:	4b4f      	ldr	r3, [pc, #316]	; (83fcc <XPROGProtocol_Command+0x250>)
   83e90:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   83e92:	4b4a      	ldr	r3, [pc, #296]	; (83fbc <XPROGProtocol_Command+0x240>)
   83e94:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   83e96:	795a      	ldrb	r2, [r3, #5]
   83e98:	7919      	ldrb	r1, [r3, #4]
   83e9a:	0409      	lsls	r1, r1, #16
   83e9c:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83ea0:	789a      	ldrb	r2, [r3, #2]
   83ea2:	4311      	orrs	r1, r2
   83ea4:	78da      	ldrb	r2, [r3, #3]
   83ea6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   83eaa:	781a      	ldrb	r2, [r3, #0]
   83eac:	3a01      	subs	r2, #1
   83eae:	2a05      	cmp	r2, #5
   83eb0:	d811      	bhi.n	83ed6 <XPROGProtocol_Command+0x15a>
   83eb2:	e8df f012 	tbh	[pc, r2, lsl #1]
   83eb6:	00e1      	.short	0x00e1
   83eb8:	00e50008 	.word	0x00e50008
   83ebc:	000600fd 	.word	0x000600fd
   83ec0:	000c      	.short	0x000c
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
		PagedMemory      = false;
		break;
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   83ec2:	2008      	movs	r0, #8
   83ec4:	e0f5      	b.n	840b2 <XPROGProtocol_Command+0x336>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83ec6:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83ec8:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   83eca:	222c      	movs	r2, #44	; 0x2c
   83ecc:	e0db      	b.n	84086 <XPROGProtocol_Command+0x30a>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83ece:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83ed0:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   83ed2:	221a      	movs	r2, #26
   83ed4:	e0d7      	b.n	84086 <XPROGProtocol_Command+0x30a>
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
   83ed6:	222e      	movs	r2, #46	; 0x2e
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83ed8:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83eda:	2023      	movs	r0, #35	; 0x23
   83edc:	e0d3      	b.n	84086 <XPROGProtocol_Command+0x30a>
			start_timeoutcnt();
   83ede:	4b39      	ldr	r3, [pc, #228]	; (83fc4 <XPROGProtocol_Command+0x248>)
   83ee0:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83ee2:	2200      	movs	r2, #0
   83ee4:	4b39      	ldr	r3, [pc, #228]	; (83fcc <XPROGProtocol_Command+0x250>)
   83ee6:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83ee8:	4b34      	ldr	r3, [pc, #208]	; (83fbc <XPROGProtocol_Command+0x240>)
   83eea:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   83eec:	798b      	ldrb	r3, [r1, #6]
   83eee:	794a      	ldrb	r2, [r1, #5]
   83ef0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83ef4:	7908      	ldrb	r0, [r1, #4]
   83ef6:	78cb      	ldrb	r3, [r1, #3]
   83ef8:	041b      	lsls	r3, r3, #16
   83efa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   83efe:	7848      	ldrb	r0, [r1, #1]
   83f00:	4303      	orrs	r3, r0
   83f02:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   83f04:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   83f08:	bf28      	it	cs
   83f0a:	f44f 7280 	movcs.w	r2, #256	; 0x100
   83f0e:	4933      	ldr	r1, [pc, #204]	; (83fdc <XPROGProtocol_Command+0x260>)
   83f10:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   83f14:	4b32      	ldr	r3, [pc, #200]	; (83fe0 <XPROGProtocol_Command+0x264>)
   83f16:	4798      	blx	r3
   83f18:	2800      	cmp	r0, #0
   83f1a:	f47f af65 	bne.w	83de8 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   83f1e:	2203      	movs	r2, #3
   83f20:	4b2a      	ldr	r3, [pc, #168]	; (83fcc <XPROGProtocol_Command+0x250>)
   83f22:	701a      	strb	r2, [r3, #0]
   83f24:	e760      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83f26:	4b27      	ldr	r3, [pc, #156]	; (83fc4 <XPROGProtocol_Command+0x248>)
   83f28:	4798      	blx	r3
			break;
   83f2a:	e75d      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83f2c:	4b25      	ldr	r3, [pc, #148]	; (83fc4 <XPROGProtocol_Command+0x248>)
   83f2e:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83f30:	2200      	movs	r2, #0
   83f32:	4b26      	ldr	r3, [pc, #152]	; (83fcc <XPROGProtocol_Command+0x250>)
   83f34:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   83f36:	4b21      	ldr	r3, [pc, #132]	; (83fbc <XPROGProtocol_Command+0x240>)
   83f38:	8999      	ldrh	r1, [r3, #12]
   83f3a:	2901      	cmp	r1, #1
   83f3c:	d90b      	bls.n	83f56 <XPROGProtocol_Command+0x1da>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   83f3e:	4b1f      	ldr	r3, [pc, #124]	; (83fbc <XPROGProtocol_Command+0x240>)
   83f40:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   83f42:	7813      	ldrb	r3, [r2, #0]
   83f44:	3b01      	subs	r3, #1
   83f46:	2b07      	cmp	r3, #7
   83f48:	d861      	bhi.n	8400e <XPROGProtocol_Command+0x292>
   83f4a:	e8df f003 	tbb	[pc, r3]
   83f4e:	1b08      	.short	0x1b08
   83f50:	60602c28 	.word	0x60602c28
   83f54:	3060      	.short	0x3060
		XPROG_Status = XPROG_ERR_FAILED;
   83f56:	2201      	movs	r2, #1
   83f58:	4b1c      	ldr	r3, [pc, #112]	; (83fcc <XPROGProtocol_Command+0x250>)
   83f5a:	701a      	strb	r2, [r3, #0]
   83f5c:	e744      	b.n	83de8 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   83f5e:	2904      	cmp	r1, #4
   83f60:	d803      	bhi.n	83f6a <XPROGProtocol_Command+0x1ee>
				XPROG_Status = XPROG_ERR_FAILED;
   83f62:	2201      	movs	r2, #1
   83f64:	4b19      	ldr	r3, [pc, #100]	; (83fcc <XPROGProtocol_Command+0x250>)
   83f66:	701a      	strb	r2, [r3, #0]
   83f68:	e73e      	b.n	83de8 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83f6a:	7911      	ldrb	r1, [r2, #4]
   83f6c:	78d3      	ldrb	r3, [r2, #3]
   83f6e:	041b      	lsls	r3, r3, #16
   83f70:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83f74:	7851      	ldrb	r1, [r2, #1]
   83f76:	430b      	orrs	r3, r1
   83f78:	7892      	ldrb	r2, [r2, #2]
   83f7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   83f7e:	4a19      	ldr	r2, [pc, #100]	; (83fe4 <XPROGProtocol_Command+0x268>)
   83f80:	6013      	str	r3, [r2, #0]
   83f82:	e731      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   83f84:	2902      	cmp	r1, #2
   83f86:	d803      	bhi.n	83f90 <XPROGProtocol_Command+0x214>
				XPROG_Status = XPROG_ERR_FAILED;
   83f88:	2201      	movs	r2, #1
   83f8a:	4b10      	ldr	r3, [pc, #64]	; (83fcc <XPROGProtocol_Command+0x250>)
   83f8c:	701a      	strb	r2, [r3, #0]
   83f8e:	e72b      	b.n	83de8 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   83f90:	7891      	ldrb	r1, [r2, #2]
   83f92:	7853      	ldrb	r3, [r2, #1]
   83f94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   83f98:	4a13      	ldr	r2, [pc, #76]	; (83fe8 <XPROGProtocol_Command+0x26c>)
   83f9a:	8013      	strh	r3, [r2, #0]
   83f9c:	e724      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   83f9e:	7852      	ldrb	r2, [r2, #1]
   83fa0:	4b12      	ldr	r3, [pc, #72]	; (83fec <XPROGProtocol_Command+0x270>)
   83fa2:	701a      	strb	r2, [r3, #0]
   83fa4:	e720      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   83fa6:	7852      	ldrb	r2, [r2, #1]
   83fa8:	4b11      	ldr	r3, [pc, #68]	; (83ff0 <XPROGProtocol_Command+0x274>)
   83faa:	701a      	strb	r2, [r3, #0]
   83fac:	e71c      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   83fae:	2904      	cmp	r1, #4
   83fb0:	d820      	bhi.n	83ff4 <XPROGProtocol_Command+0x278>
				XPROG_Status = XPROG_ERR_FAILED;
   83fb2:	2201      	movs	r2, #1
   83fb4:	4b05      	ldr	r3, [pc, #20]	; (83fcc <XPROGProtocol_Command+0x250>)
   83fb6:	701a      	strb	r2, [r3, #0]
   83fb8:	e716      	b.n	83de8 <XPROGProtocol_Command+0x6c>
   83fba:	bf00      	nop
   83fbc:	20002dec 	.word	0x20002dec
   83fc0:	20002170 	.word	0x20002170
   83fc4:	00083409 	.word	0x00083409
   83fc8:	00083a11 	.word	0x00083a11
   83fcc:	20002dd4 	.word	0x20002dd4
   83fd0:	00083451 	.word	0x00083451
   83fd4:	00083a8d 	.word	0x00083a8d
   83fd8:	00083c85 	.word	0x00083c85
   83fdc:	20002174 	.word	0x20002174
   83fe0:	00083ac9 	.word	0x00083ac9
   83fe4:	200005b0 	.word	0x200005b0
   83fe8:	200005ac 	.word	0x200005ac
   83fec:	200005b4 	.word	0x200005b4
   83ff0:	200005b5 	.word	0x200005b5
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   83ff4:	7911      	ldrb	r1, [r2, #4]
   83ff6:	78d3      	ldrb	r3, [r2, #3]
   83ff8:	041b      	lsls	r3, r3, #16
   83ffa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83ffe:	7851      	ldrb	r1, [r2, #1]
   84000:	430b      	orrs	r3, r1
   84002:	7890      	ldrb	r0, [r2, #2]
   84004:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   84008:	4b2f      	ldr	r3, [pc, #188]	; (840c8 <XPROGProtocol_Command+0x34c>)
   8400a:	4798      	blx	r3
   8400c:	e6ec      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   8400e:	2201      	movs	r2, #1
   84010:	4b2e      	ldr	r3, [pc, #184]	; (840cc <XPROGProtocol_Command+0x350>)
   84012:	701a      	strb	r2, [r3, #0]
   84014:	e6e8      	b.n	83de8 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   84016:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   84018:	4b2d      	ldr	r3, [pc, #180]	; (840d0 <XPROGProtocol_Command+0x354>)
   8401a:	88db      	ldrh	r3, [r3, #6]
   8401c:	18c2      	adds	r2, r0, r3
   8401e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   84022:	dc27      	bgt.n	84074 <XPROGProtocol_Command+0x2f8>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   84024:	492a      	ldr	r1, [pc, #168]	; (840d0 <XPROGProtocol_Command+0x354>)
   84026:	4a2b      	ldr	r2, [pc, #172]	; (840d4 <XPROGProtocol_Command+0x358>)
   84028:	4410      	add	r0, r2
   8402a:	6088      	str	r0, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8402c:	818b      	strh	r3, [r1, #12]
			return true;
   8402e:	2001      	movs	r0, #1
   84030:	e6dd      	b.n	83dee <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   84032:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   84034:	4b26      	ldr	r3, [pc, #152]	; (840d0 <XPROGProtocol_Command+0x354>)
   84036:	88da      	ldrh	r2, [r3, #6]
   84038:	1883      	adds	r3, r0, r2
   8403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   8403e:	dd01      	ble.n	84044 <XPROGProtocol_Command+0x2c8>
				return false;
   84040:	2000      	movs	r0, #0
   84042:	e6d4      	b.n	83dee <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   84044:	4b22      	ldr	r3, [pc, #136]	; (840d0 <XPROGProtocol_Command+0x354>)
   84046:	6899      	ldr	r1, [r3, #8]
   84048:	4b22      	ldr	r3, [pc, #136]	; (840d4 <XPROGProtocol_Command+0x358>)
   8404a:	4418      	add	r0, r3
   8404c:	4b22      	ldr	r3, [pc, #136]	; (840d8 <XPROGProtocol_Command+0x35c>)
   8404e:	4798      	blx	r3
			return true;
   84050:	2001      	movs	r0, #1
   84052:	e6cc      	b.n	83dee <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   84054:	4a21      	ldr	r2, [pc, #132]	; (840dc <XPROGProtocol_Command+0x360>)
   84056:	4b1d      	ldr	r3, [pc, #116]	; (840cc <XPROGProtocol_Command+0x350>)
   84058:	781b      	ldrb	r3, [r3, #0]
   8405a:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   8405c:	4b20      	ldr	r3, [pc, #128]	; (840e0 <XPROGProtocol_Command+0x364>)
   8405e:	681b      	ldr	r3, [r3, #0]
   84060:	fab3 f383 	clz	r3, r3
   84064:	095b      	lsrs	r3, r3, #5
   84066:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   84068:	4b19      	ldr	r3, [pc, #100]	; (840d0 <XPROGProtocol_Command+0x354>)
   8406a:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   8406c:	2203      	movs	r2, #3
   8406e:	819a      	strh	r2, [r3, #12]
			return true;
   84070:	2001      	movs	r0, #1
   84072:	e6bc      	b.n	83dee <XPROGProtocol_Command+0x72>
				return false;
   84074:	2000      	movs	r0, #0
   84076:	e6ba      	b.n	83dee <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   84078:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8407a:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   8407c:	2224      	movs	r2, #36	; 0x24
   8407e:	e002      	b.n	84086 <XPROGProtocol_Command+0x30a>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   84080:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   84082:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   84084:	2235      	movs	r2, #53	; 0x35
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   84086:	79de      	ldrb	r6, [r3, #7]
   84088:	799c      	ldrb	r4, [r3, #6]
   8408a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   8408e:	785b      	ldrb	r3, [r3, #1]
   84090:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   84094:	bf28      	it	cs
   84096:	f44f 7480 	movcs.w	r4, #256	; 0x100
   8409a:	9402      	str	r4, [sp, #8]
   8409c:	4c0d      	ldr	r4, [pc, #52]	; (840d4 <XPROGProtocol_Command+0x358>)
   8409e:	9401      	str	r4, [sp, #4]
   840a0:	9100      	str	r1, [sp, #0]
   840a2:	4629      	mov	r1, r5
   840a4:	4c0f      	ldr	r4, [pc, #60]	; (840e4 <XPROGProtocol_Command+0x368>)
   840a6:	47a0      	blx	r4
   840a8:	2800      	cmp	r0, #0
   840aa:	f47f ae9d 	bne.w	83de8 <XPROGProtocol_Command+0x6c>
   840ae:	e007      	b.n	840c0 <XPROGProtocol_Command+0x344>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   840b0:	204c      	movs	r0, #76	; 0x4c
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   840b2:	4b08      	ldr	r3, [pc, #32]	; (840d4 <XPROGProtocol_Command+0x358>)
   840b4:	781a      	ldrb	r2, [r3, #0]
   840b6:	4b0c      	ldr	r3, [pc, #48]	; (840e8 <XPROGProtocol_Command+0x36c>)
   840b8:	4798      	blx	r3
   840ba:	2800      	cmp	r0, #0
   840bc:	f47f ae94 	bne.w	83de8 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   840c0:	2203      	movs	r2, #3
   840c2:	4b02      	ldr	r3, [pc, #8]	; (840cc <XPROGProtocol_Command+0x350>)
   840c4:	701a      	strb	r2, [r3, #0]
   840c6:	e68f      	b.n	83de8 <XPROGProtocol_Command+0x6c>
   840c8:	00083399 	.word	0x00083399
   840cc:	20002dd4 	.word	0x20002dd4
   840d0:	20002dec 	.word	0x20002dec
   840d4:	20002174 	.word	0x20002174
   840d8:	00087a85 	.word	0x00087a85
   840dc:	20002170 	.word	0x20002170
   840e0:	2000265c 	.word	0x2000265c
   840e4:	00083bad 	.word	0x00083bad
   840e8:	00083b65 	.word	0x00083b65

000840ec <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   840ec:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   840ee:	4d0b      	ldr	r5, [pc, #44]	; (8411c <XPROGTarget_SetRxMode+0x30>)
   840f0:	4c0b      	ldr	r4, [pc, #44]	; (84120 <XPROGTarget_SetRxMode+0x34>)
   840f2:	4628      	mov	r0, r5
   840f4:	47a0      	blx	r4
   840f6:	2800      	cmp	r0, #0
   840f8:	d0fb      	beq.n	840f2 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   840fa:	4c08      	ldr	r4, [pc, #32]	; (8411c <XPROGTarget_SetRxMode+0x30>)
   840fc:	4620      	mov	r0, r4
   840fe:	4b09      	ldr	r3, [pc, #36]	; (84124 <XPROGTarget_SetRxMode+0x38>)
   84100:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   84102:	4620      	mov	r0, r4
   84104:	4b08      	ldr	r3, [pc, #32]	; (84128 <XPROGTarget_SetRxMode+0x3c>)
   84106:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84108:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8410c:	2014      	movs	r0, #20
   8410e:	4b07      	ldr	r3, [pc, #28]	; (8412c <XPROGTarget_SetRxMode+0x40>)
   84110:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   84112:	2200      	movs	r2, #0
   84114:	4b06      	ldr	r3, [pc, #24]	; (84130 <XPROGTarget_SetRxMode+0x44>)
   84116:	701a      	strb	r2, [r3, #0]
   84118:	bd38      	pop	{r3, r4, r5, pc}
   8411a:	bf00      	nop
   8411c:	40094000 	.word	0x40094000
   84120:	00086fe1 	.word	0x00086fe1
   84124:	00086fa3 	.word	0x00086fa3
   84128:	00086fad 	.word	0x00086fad
   8412c:	00085081 	.word	0x00085081
   84130:	20002274 	.word	0x20002274

00084134 <XPROGTarget_SetTxMode>:
{
   84134:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84136:	2518      	movs	r5, #24
   84138:	4c14      	ldr	r4, [pc, #80]	; (8418c <XPROGTarget_SetTxMode+0x58>)
   8413a:	4e15      	ldr	r6, [pc, #84]	; (84190 <XPROGTarget_SetTxMode+0x5c>)
   8413c:	4628      	mov	r0, r5
   8413e:	47a0      	blx	r4
   84140:	b110      	cbz	r0, 84148 <XPROGTarget_SetTxMode+0x14>
   84142:	6833      	ldr	r3, [r6, #0]
   84144:	2b00      	cmp	r3, #0
   84146:	d1f9      	bne.n	8413c <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84148:	2518      	movs	r5, #24
   8414a:	4c10      	ldr	r4, [pc, #64]	; (8418c <XPROGTarget_SetTxMode+0x58>)
   8414c:	4e10      	ldr	r6, [pc, #64]	; (84190 <XPROGTarget_SetTxMode+0x5c>)
   8414e:	4628      	mov	r0, r5
   84150:	47a0      	blx	r4
   84152:	b910      	cbnz	r0, 8415a <XPROGTarget_SetTxMode+0x26>
   84154:	6833      	ldr	r3, [r6, #0]
   84156:	2b00      	cmp	r3, #0
   84158:	d1f9      	bne.n	8414e <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8415a:	2518      	movs	r5, #24
   8415c:	4c0b      	ldr	r4, [pc, #44]	; (8418c <XPROGTarget_SetTxMode+0x58>)
   8415e:	4e0c      	ldr	r6, [pc, #48]	; (84190 <XPROGTarget_SetTxMode+0x5c>)
   84160:	4628      	mov	r0, r5
   84162:	47a0      	blx	r4
   84164:	b110      	cbz	r0, 8416c <XPROGTarget_SetTxMode+0x38>
   84166:	6833      	ldr	r3, [r6, #0]
   84168:	2b00      	cmp	r3, #0
   8416a:	d1f9      	bne.n	84160 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   8416c:	4c09      	ldr	r4, [pc, #36]	; (84194 <XPROGTarget_SetTxMode+0x60>)
   8416e:	4620      	mov	r0, r4
   84170:	4b09      	ldr	r3, [pc, #36]	; (84198 <XPROGTarget_SetTxMode+0x64>)
   84172:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   84174:	4620      	mov	r0, r4
   84176:	4b09      	ldr	r3, [pc, #36]	; (8419c <XPROGTarget_SetTxMode+0x68>)
   84178:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   8417a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8417e:	2014      	movs	r0, #20
   84180:	4b07      	ldr	r3, [pc, #28]	; (841a0 <XPROGTarget_SetTxMode+0x6c>)
   84182:	4798      	blx	r3
	IsSending = true;
   84184:	2201      	movs	r2, #1
   84186:	4b07      	ldr	r3, [pc, #28]	; (841a4 <XPROGTarget_SetTxMode+0x70>)
   84188:	701a      	strb	r2, [r3, #0]
   8418a:	bd70      	pop	{r4, r5, r6, pc}
   8418c:	0008502f 	.word	0x0008502f
   84190:	2000265c 	.word	0x2000265c
   84194:	40094000 	.word	0x40094000
   84198:	00086fb3 	.word	0x00086fb3
   8419c:	00086f9d 	.word	0x00086f9d
   841a0:	00085081 	.word	0x00085081
   841a4:	20002274 	.word	0x20002274

000841a8 <XPROGTarget_DisableTargetPDI>:
{
   841a8:	b510      	push	{r4, lr}
	if (IsSending)
   841aa:	4b0f      	ldr	r3, [pc, #60]	; (841e8 <XPROGTarget_DisableTargetPDI+0x40>)
   841ac:	781b      	ldrb	r3, [r3, #0]
   841ae:	b9bb      	cbnz	r3, 841e0 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   841b0:	4c0e      	ldr	r4, [pc, #56]	; (841ec <XPROGTarget_DisableTargetPDI+0x44>)
   841b2:	4620      	mov	r0, r4
   841b4:	4b0e      	ldr	r3, [pc, #56]	; (841f0 <XPROGTarget_DisableTargetPDI+0x48>)
   841b6:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   841b8:	4620      	mov	r0, r4
   841ba:	4b0e      	ldr	r3, [pc, #56]	; (841f4 <XPROGTarget_DisableTargetPDI+0x4c>)
   841bc:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   841be:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   841c2:	2018      	movs	r0, #24
   841c4:	4c0c      	ldr	r4, [pc, #48]	; (841f8 <XPROGTarget_DisableTargetPDI+0x50>)
   841c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   841c8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   841cc:	2015      	movs	r0, #21
   841ce:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   841d0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   841d4:	2014      	movs	r0, #20
   841d6:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   841d8:	200e      	movs	r0, #14
   841da:	4b08      	ldr	r3, [pc, #32]	; (841fc <XPROGTarget_DisableTargetPDI+0x54>)
   841dc:	4798      	blx	r3
   841de:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   841e0:	4b07      	ldr	r3, [pc, #28]	; (84200 <XPROGTarget_DisableTargetPDI+0x58>)
   841e2:	4798      	blx	r3
   841e4:	e7e4      	b.n	841b0 <XPROGTarget_DisableTargetPDI+0x8>
   841e6:	bf00      	nop
   841e8:	20002274 	.word	0x20002274
   841ec:	40094000 	.word	0x40094000
   841f0:	00086fb3 	.word	0x00086fb3
   841f4:	00086fa3 	.word	0x00086fa3
   841f8:	00085081 	.word	0x00085081
   841fc:	00085409 	.word	0x00085409
   84200:	000840ed 	.word	0x000840ed

00084204 <XPROGTarget_SendByte>:
{
   84204:	b510      	push	{r4, lr}
   84206:	4604      	mov	r4, r0
	if (!(IsSending))
   84208:	4b05      	ldr	r3, [pc, #20]	; (84220 <XPROGTarget_SendByte+0x1c>)
   8420a:	781b      	ldrb	r3, [r3, #0]
   8420c:	b123      	cbz	r3, 84218 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   8420e:	4621      	mov	r1, r4
   84210:	4804      	ldr	r0, [pc, #16]	; (84224 <XPROGTarget_SendByte+0x20>)
   84212:	4b05      	ldr	r3, [pc, #20]	; (84228 <XPROGTarget_SendByte+0x24>)
   84214:	4798      	blx	r3
   84216:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   84218:	4b04      	ldr	r3, [pc, #16]	; (8422c <XPROGTarget_SendByte+0x28>)
   8421a:	4798      	blx	r3
   8421c:	e7f7      	b.n	8420e <XPROGTarget_SendByte+0xa>
   8421e:	bf00      	nop
   84220:	20002274 	.word	0x20002274
   84224:	40094000 	.word	0x40094000
   84228:	00086ffd 	.word	0x00086ffd
   8422c:	00084135 	.word	0x00084135

00084230 <XPROGTarget_ReceiveByte>:
{
   84230:	b570      	push	{r4, r5, r6, lr}
   84232:	b082      	sub	sp, #8
	if (IsSending)
   84234:	4b0a      	ldr	r3, [pc, #40]	; (84260 <XPROGTarget_ReceiveByte+0x30>)
   84236:	781b      	ldrb	r3, [r3, #0]
   84238:	b973      	cbnz	r3, 84258 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   8423a:	4d0a      	ldr	r5, [pc, #40]	; (84264 <XPROGTarget_ReceiveByte+0x34>)
   8423c:	4c0a      	ldr	r4, [pc, #40]	; (84268 <XPROGTarget_ReceiveByte+0x38>)
   8423e:	4e0b      	ldr	r6, [pc, #44]	; (8426c <XPROGTarget_ReceiveByte+0x3c>)
   84240:	a901      	add	r1, sp, #4
   84242:	4628      	mov	r0, r5
   84244:	47a0      	blx	r4
   84246:	2801      	cmp	r0, #1
   84248:	d102      	bne.n	84250 <XPROGTarget_ReceiveByte+0x20>
   8424a:	6833      	ldr	r3, [r6, #0]
   8424c:	2b00      	cmp	r3, #0
   8424e:	d1f7      	bne.n	84240 <XPROGTarget_ReceiveByte+0x10>
}
   84250:	f89d 0004 	ldrb.w	r0, [sp, #4]
   84254:	b002      	add	sp, #8
   84256:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   84258:	4b05      	ldr	r3, [pc, #20]	; (84270 <XPROGTarget_ReceiveByte+0x40>)
   8425a:	4798      	blx	r3
   8425c:	e7ed      	b.n	8423a <XPROGTarget_ReceiveByte+0xa>
   8425e:	bf00      	nop
   84260:	20002274 	.word	0x20002274
   84264:	40094000 	.word	0x40094000
   84268:	0008700f 	.word	0x0008700f
   8426c:	2000265c 	.word	0x2000265c
   84270:	000840ed 	.word	0x000840ed

00084274 <XPROGTarget_SendIdle>:
{
   84274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   84276:	4b12      	ldr	r3, [pc, #72]	; (842c0 <XPROGTarget_SendIdle+0x4c>)
   84278:	781b      	ldrb	r3, [r3, #0]
   8427a:	b123      	cbz	r3, 84286 <XPROGTarget_SendIdle+0x12>
{
   8427c:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8427e:	2518      	movs	r5, #24
   84280:	4c10      	ldr	r4, [pc, #64]	; (842c4 <XPROGTarget_SendIdle+0x50>)
   84282:	4e11      	ldr	r6, [pc, #68]	; (842c8 <XPROGTarget_SendIdle+0x54>)
   84284:	e006      	b.n	84294 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   84286:	4b11      	ldr	r3, [pc, #68]	; (842cc <XPROGTarget_SendIdle+0x58>)
   84288:	4798      	blx	r3
   8428a:	e7f7      	b.n	8427c <XPROGTarget_SendIdle+0x8>
   8428c:	1e7b      	subs	r3, r7, #1
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   8428e:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   84292:	d013      	beq.n	842bc <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84294:	4628      	mov	r0, r5
   84296:	47a0      	blx	r4
   84298:	b110      	cbz	r0, 842a0 <XPROGTarget_SendIdle+0x2c>
   8429a:	6833      	ldr	r3, [r6, #0]
   8429c:	2b00      	cmp	r3, #0
   8429e:	d1f9      	bne.n	84294 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842a0:	4628      	mov	r0, r5
   842a2:	47a0      	blx	r4
   842a4:	b910      	cbnz	r0, 842ac <XPROGTarget_SendIdle+0x38>
   842a6:	6833      	ldr	r3, [r6, #0]
   842a8:	2b00      	cmp	r3, #0
   842aa:	d1f9      	bne.n	842a0 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842ac:	4628      	mov	r0, r5
   842ae:	47a0      	blx	r4
   842b0:	2800      	cmp	r0, #0
   842b2:	d0eb      	beq.n	8428c <XPROGTarget_SendIdle+0x18>
   842b4:	6833      	ldr	r3, [r6, #0]
   842b6:	2b00      	cmp	r3, #0
   842b8:	d1f8      	bne.n	842ac <XPROGTarget_SendIdle+0x38>
   842ba:	e7e7      	b.n	8428c <XPROGTarget_SendIdle+0x18>
}
   842bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   842be:	bf00      	nop
   842c0:	20002274 	.word	0x20002274
   842c4:	0008502f 	.word	0x0008502f
   842c8:	2000265c 	.word	0x2000265c
   842cc:	00084135 	.word	0x00084135

000842d0 <XPROGTarget_EnableTargetPDI>:
{
   842d0:	b570      	push	{r4, r5, r6, lr}
   842d2:	b086      	sub	sp, #24
	IsSending = false;
   842d4:	2500      	movs	r5, #0
   842d6:	4b19      	ldr	r3, [pc, #100]	; (8433c <XPROGTarget_EnableTargetPDI+0x6c>)
   842d8:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   842da:	200e      	movs	r0, #14
   842dc:	4b18      	ldr	r3, [pc, #96]	; (84340 <XPROGTarget_EnableTargetPDI+0x70>)
   842de:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   842e0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   842e4:	2014      	movs	r0, #20
   842e6:	4c17      	ldr	r4, [pc, #92]	; (84344 <XPROGTarget_EnableTargetPDI+0x74>)
   842e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   842ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   842ee:	2015      	movs	r0, #21
   842f0:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   842f2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   842f6:	2018      	movs	r0, #24
   842f8:	47a0      	blx	r4
	delay_us(50);
   842fa:	f240 1057 	movw	r0, #343	; 0x157
   842fe:	4e12      	ldr	r6, [pc, #72]	; (84348 <XPROGTarget_EnableTargetPDI+0x78>)
   84300:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   84302:	2014      	movs	r0, #20
   84304:	4b11      	ldr	r3, [pc, #68]	; (8434c <XPROGTarget_EnableTargetPDI+0x7c>)
   84306:	4798      	blx	r3
	delay_us(10);
   84308:	2045      	movs	r0, #69	; 0x45
   8430a:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   8430c:	9502      	str	r5, [sp, #8]
   8430e:	9504      	str	r5, [sp, #16]
   84310:	9505      	str	r5, [sp, #20]
   84312:	4b0f      	ldr	r3, [pc, #60]	; (84350 <XPROGTarget_EnableTargetPDI+0x80>)
   84314:	9300      	str	r3, [sp, #0]
   84316:	23c0      	movs	r3, #192	; 0xc0
   84318:	9301      	str	r3, [sp, #4]
   8431a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8431e:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   84320:	4a0c      	ldr	r2, [pc, #48]	; (84354 <XPROGTarget_EnableTargetPDI+0x84>)
   84322:	4669      	mov	r1, sp
   84324:	480c      	ldr	r0, [pc, #48]	; (84358 <XPROGTarget_EnableTargetPDI+0x88>)
   84326:	4b0d      	ldr	r3, [pc, #52]	; (8435c <XPROGTarget_EnableTargetPDI+0x8c>)
   84328:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   8432a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8432e:	2018      	movs	r0, #24
   84330:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   84332:	4c0b      	ldr	r4, [pc, #44]	; (84360 <XPROGTarget_EnableTargetPDI+0x90>)
   84334:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   84336:	47a0      	blx	r4
}
   84338:	b006      	add	sp, #24
   8433a:	bd70      	pop	{r4, r5, r6, pc}
   8433c:	20002274 	.word	0x20002274
   84340:	000853d5 	.word	0x000853d5
   84344:	00085081 	.word	0x00085081
   84348:	20000089 	.word	0x20000089
   8434c:	0008504b 	.word	0x0008504b
   84350:	0007a120 	.word	0x0007a120
   84354:	0b71b000 	.word	0x0b71b000
   84358:	40094000 	.word	0x40094000
   8435c:	00086cfd 	.word	0x00086cfd
   84360:	00084275 	.word	0x00084275

00084364 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   84364:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   84366:	2006      	movs	r0, #6
   84368:	4c02      	ldr	r4, [pc, #8]	; (84374 <ui_init+0x10>)
   8436a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   8436c:	2007      	movs	r0, #7
   8436e:	47a0      	blx	r4
   84370:	bd10      	pop	{r4, pc}
   84372:	bf00      	nop
   84374:	00084f0d 	.word	0x00084f0d

00084378 <ui_powerdown>:
}

void ui_powerdown(void)
{
   84378:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   8437a:	2006      	movs	r0, #6
   8437c:	4c03      	ldr	r4, [pc, #12]	; (8438c <ui_powerdown+0x14>)
   8437e:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84380:	2007      	movs	r0, #7
   84382:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   84384:	201d      	movs	r0, #29
   84386:	4b02      	ldr	r3, [pc, #8]	; (84390 <ui_powerdown+0x18>)
   84388:	4798      	blx	r3
   8438a:	bd10      	pop	{r4, pc}
   8438c:	00084f0d 	.word	0x00084f0d
   84390:	00085065 	.word	0x00085065

00084394 <ui_wakeup>:
		
}

void ui_wakeup(void)
{
   84394:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   84396:	2006      	movs	r0, #6
   84398:	4b02      	ldr	r3, [pc, #8]	; (843a4 <ui_wakeup+0x10>)
   8439a:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   8439c:	201d      	movs	r0, #29
   8439e:	4b02      	ldr	r3, [pc, #8]	; (843a8 <ui_wakeup+0x14>)
   843a0:	4798      	blx	r3
   843a2:	bd08      	pop	{r3, pc}
   843a4:	00084f31 	.word	0x00084f31
   843a8:	0008504b 	.word	0x0008504b

000843ac <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   843ac:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   843ae:	4b0b      	ldr	r3, [pc, #44]	; (843dc <ui_process+0x30>)
   843b0:	fba3 2300 	umull	r2, r3, r3, r0
   843b4:	099b      	lsrs	r3, r3, #6
   843b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   843ba:	fb02 0013 	mls	r0, r2, r3, r0
   843be:	b280      	uxth	r0, r0
   843c0:	b118      	cbz	r0, 843ca <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   843c2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   843c6:	d004      	beq.n	843d2 <ui_process+0x26>
   843c8:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   843ca:	2006      	movs	r0, #6
   843cc:	4b04      	ldr	r3, [pc, #16]	; (843e0 <ui_process+0x34>)
   843ce:	4798      	blx	r3
   843d0:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   843d2:	2006      	movs	r0, #6
   843d4:	4b03      	ldr	r3, [pc, #12]	; (843e4 <ui_process+0x38>)
   843d6:	4798      	blx	r3
	}
}
   843d8:	e7f6      	b.n	843c8 <ui_process+0x1c>
   843da:	bf00      	nop
   843dc:	10624dd3 	.word	0x10624dd3
   843e0:	00084f31 	.word	0x00084f31
   843e4:	00084f0d 	.word	0x00084f0d

000843e8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   843e8:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   843ea:	203e      	movs	r0, #62	; 0x3e
   843ec:	4b07      	ldr	r3, [pc, #28]	; (8440c <sysclk_enable_usb+0x24>)
   843ee:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   843f0:	4c07      	ldr	r4, [pc, #28]	; (84410 <sysclk_enable_usb+0x28>)
   843f2:	47a0      	blx	r4
   843f4:	2800      	cmp	r0, #0
   843f6:	d0fc      	beq.n	843f2 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   843f8:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   843fc:	4b05      	ldr	r3, [pc, #20]	; (84414 <sysclk_enable_usb+0x2c>)
   843fe:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   84400:	4c05      	ldr	r4, [pc, #20]	; (84418 <sysclk_enable_usb+0x30>)
   84402:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84404:	2800      	cmp	r0, #0
   84406:	d0fc      	beq.n	84402 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   84408:	bd10      	pop	{r4, pc}
   8440a:	bf00      	nop
   8440c:	0008532d 	.word	0x0008532d
   84410:	00085355 	.word	0x00085355
   84414:	400e0400 	.word	0x400e0400
   84418:	000853c5 	.word	0x000853c5

0008441c <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   8441c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8441e:	4812      	ldr	r0, [pc, #72]	; (84468 <sysclk_init+0x4c>)
   84420:	4b12      	ldr	r3, [pc, #72]	; (8446c <sysclk_init+0x50>)
   84422:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84424:	203e      	movs	r0, #62	; 0x3e
   84426:	4b12      	ldr	r3, [pc, #72]	; (84470 <sysclk_init+0x54>)
   84428:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   8442a:	4c12      	ldr	r4, [pc, #72]	; (84474 <sysclk_init+0x58>)
   8442c:	47a0      	blx	r4
   8442e:	2800      	cmp	r0, #0
   84430:	d0fc      	beq.n	8442c <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   84432:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   84436:	4b10      	ldr	r3, [pc, #64]	; (84478 <sysclk_init+0x5c>)
   84438:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8443a:	4c10      	ldr	r4, [pc, #64]	; (8447c <sysclk_init+0x60>)
   8443c:	47a0      	blx	r4
   8443e:	2800      	cmp	r0, #0
   84440:	d0fc      	beq.n	8443c <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   84442:	4b0f      	ldr	r3, [pc, #60]	; (84480 <sysclk_init+0x64>)
   84444:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   84446:	4a0f      	ldr	r2, [pc, #60]	; (84484 <sysclk_init+0x68>)
   84448:	4b0f      	ldr	r3, [pc, #60]	; (84488 <sysclk_init+0x6c>)
   8444a:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   8444c:	4c0f      	ldr	r4, [pc, #60]	; (8448c <sysclk_init+0x70>)
   8444e:	47a0      	blx	r4
   84450:	2800      	cmp	r0, #0
   84452:	d0fc      	beq.n	8444e <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84454:	2010      	movs	r0, #16
   84456:	4b0e      	ldr	r3, [pc, #56]	; (84490 <sysclk_init+0x74>)
   84458:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8445a:	4b0e      	ldr	r3, [pc, #56]	; (84494 <sysclk_init+0x78>)
   8445c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8445e:	4802      	ldr	r0, [pc, #8]	; (84468 <sysclk_init+0x4c>)
   84460:	4b02      	ldr	r3, [pc, #8]	; (8446c <sysclk_init+0x50>)
   84462:	4798      	blx	r3
   84464:	bd10      	pop	{r4, pc}
   84466:	bf00      	nop
   84468:	05b8d800 	.word	0x05b8d800
   8446c:	2000013d 	.word	0x2000013d
   84470:	0008532d 	.word	0x0008532d
   84474:	00085355 	.word	0x00085355
   84478:	00085375 	.word	0x00085375
   8447c:	00085365 	.word	0x00085365
   84480:	00085395 	.word	0x00085395
   84484:	200f3f01 	.word	0x200f3f01
   84488:	400e0400 	.word	0x400e0400
   8448c:	000853a5 	.word	0x000853a5
   84490:	000852c9 	.word	0x000852c9
   84494:	0008712d 	.word	0x0008712d

00084498 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   84498:	4b01      	ldr	r3, [pc, #4]	; (844a0 <udi_vendor_getsetting+0x8>)
   8449a:	7818      	ldrb	r0, [r3, #0]
   8449c:	4770      	bx	lr
   8449e:	bf00      	nop
   844a0:	20002275 	.word	0x20002275

000844a4 <udi_vendor_enable>:
{
   844a4:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   844a6:	4b05      	ldr	r3, [pc, #20]	; (844bc <udi_vendor_enable+0x18>)
   844a8:	4798      	blx	r3
   844aa:	78c3      	ldrb	r3, [r0, #3]
   844ac:	4a04      	ldr	r2, [pc, #16]	; (844c0 <udi_vendor_enable+0x1c>)
   844ae:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   844b0:	b10b      	cbz	r3, 844b6 <udi_vendor_enable+0x12>
	return true;
   844b2:	2001      	movs	r0, #1
}
   844b4:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   844b6:	4b03      	ldr	r3, [pc, #12]	; (844c4 <udi_vendor_enable+0x20>)
   844b8:	4798      	blx	r3
   844ba:	bd08      	pop	{r3, pc}
   844bc:	000846f1 	.word	0x000846f1
   844c0:	20002275 	.word	0x20002275
   844c4:	00083069 	.word	0x00083069

000844c8 <udi_vendor_disable>:
{
   844c8:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   844ca:	4b03      	ldr	r3, [pc, #12]	; (844d8 <udi_vendor_disable+0x10>)
   844cc:	781b      	ldrb	r3, [r3, #0]
   844ce:	b103      	cbz	r3, 844d2 <udi_vendor_disable+0xa>
   844d0:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   844d2:	4b02      	ldr	r3, [pc, #8]	; (844dc <udi_vendor_disable+0x14>)
   844d4:	4798      	blx	r3
}
   844d6:	e7fb      	b.n	844d0 <udi_vendor_disable+0x8>
   844d8:	20002275 	.word	0x20002275
   844dc:	00083099 	.word	0x00083099

000844e0 <udi_vendor_setup>:
{
   844e0:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   844e2:	4b0b      	ldr	r3, [pc, #44]	; (84510 <udi_vendor_setup+0x30>)
   844e4:	781b      	ldrb	r3, [r3, #0]
   844e6:	f013 0f80 	tst.w	r3, #128	; 0x80
   844ea:	d105      	bne.n	844f8 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   844ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
   844f0:	2b40      	cmp	r3, #64	; 0x40
   844f2:	d00a      	beq.n	8450a <udi_vendor_setup+0x2a>
	return false; // Not supported request
   844f4:	2000      	movs	r0, #0
}
   844f6:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   844f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   844fc:	2b40      	cmp	r3, #64	; 0x40
   844fe:	d001      	beq.n	84504 <udi_vendor_setup+0x24>
	return false; // Not supported request
   84500:	2000      	movs	r0, #0
   84502:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84504:	4b03      	ldr	r3, [pc, #12]	; (84514 <udi_vendor_setup+0x34>)
   84506:	4798      	blx	r3
   84508:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8450a:	4b03      	ldr	r3, [pc, #12]	; (84518 <udi_vendor_setup+0x38>)
   8450c:	4798      	blx	r3
   8450e:	bd08      	pop	{r3, pc}
   84510:	20002dec 	.word	0x20002dec
   84514:	000831ed 	.word	0x000831ed
   84518:	000830a5 	.word	0x000830a5

0008451c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8451c:	b510      	push	{r4, lr}
   8451e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84520:	9200      	str	r2, [sp, #0]
   84522:	460b      	mov	r3, r1
   84524:	4602      	mov	r2, r0
   84526:	2100      	movs	r1, #0
   84528:	2085      	movs	r0, #133	; 0x85
   8452a:	4c02      	ldr	r4, [pc, #8]	; (84534 <udi_vendor_bulk_in_run+0x18>)
   8452c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8452e:	b002      	add	sp, #8
   84530:	bd10      	pop	{r4, pc}
   84532:	bf00      	nop
   84534:	00086731 	.word	0x00086731

00084538 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84538:	b510      	push	{r4, lr}
   8453a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   8453c:	9200      	str	r2, [sp, #0]
   8453e:	460b      	mov	r3, r1
   84540:	4602      	mov	r2, r0
   84542:	2100      	movs	r1, #0
   84544:	2006      	movs	r0, #6
   84546:	4c02      	ldr	r4, [pc, #8]	; (84550 <udi_vendor_bulk_out_run+0x18>)
   84548:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8454a:	b002      	add	sp, #8
   8454c:	bd10      	pop	{r4, pc}
   8454e:	bf00      	nop
   84550:	00086731 	.word	0x00086731

00084554 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   84554:	4b10      	ldr	r3, [pc, #64]	; (84598 <udc_next_desc_in_iface+0x44>)
   84556:	681b      	ldr	r3, [r3, #0]
   84558:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8455a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8455c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8455e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84560:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   84562:	4290      	cmp	r0, r2
   84564:	d211      	bcs.n	8458a <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   84566:	7843      	ldrb	r3, [r0, #1]
   84568:	2b04      	cmp	r3, #4
   8456a:	d010      	beq.n	8458e <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8456c:	428b      	cmp	r3, r1
   8456e:	d009      	beq.n	84584 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   84570:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84572:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   84574:	4290      	cmp	r0, r2
   84576:	d206      	bcs.n	84586 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   84578:	7843      	ldrb	r3, [r0, #1]
   8457a:	2b04      	cmp	r3, #4
   8457c:	d009      	beq.n	84592 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   8457e:	428b      	cmp	r3, r1
   84580:	d1f6      	bne.n	84570 <udc_next_desc_in_iface+0x1c>
   84582:	e007      	b.n	84594 <udc_next_desc_in_iface+0x40>
   84584:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   84586:	2000      	movs	r0, #0
   84588:	4770      	bx	lr
   8458a:	2000      	movs	r0, #0
   8458c:	4770      	bx	lr
   8458e:	2000      	movs	r0, #0
   84590:	4770      	bx	lr
   84592:	2000      	movs	r0, #0
}
   84594:	4770      	bx	lr
   84596:	bf00      	nop
   84598:	2000227c 	.word	0x2000227c

0008459c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   8459c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8459e:	4b03      	ldr	r3, [pc, #12]	; (845ac <udc_valid_address+0x10>)
   845a0:	7898      	ldrb	r0, [r3, #2]
   845a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   845a6:	4b02      	ldr	r3, [pc, #8]	; (845b0 <udc_valid_address+0x14>)
   845a8:	4798      	blx	r3
   845aa:	bd08      	pop	{r3, pc}
   845ac:	20002dec 	.word	0x20002dec
   845b0:	00086485 	.word	0x00086485

000845b4 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   845b4:	4b19      	ldr	r3, [pc, #100]	; (8461c <udc_update_iface_desc+0x68>)
   845b6:	781b      	ldrb	r3, [r3, #0]
   845b8:	b34b      	cbz	r3, 8460e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   845ba:	4b19      	ldr	r3, [pc, #100]	; (84620 <udc_update_iface_desc+0x6c>)
   845bc:	681b      	ldr	r3, [r3, #0]
   845be:	681b      	ldr	r3, [r3, #0]
   845c0:	791a      	ldrb	r2, [r3, #4]
   845c2:	4282      	cmp	r2, r0
   845c4:	d925      	bls.n	84612 <udc_update_iface_desc+0x5e>
{
   845c6:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   845c8:	4a16      	ldr	r2, [pc, #88]	; (84624 <udc_update_iface_desc+0x70>)
   845ca:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   845cc:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   845ce:	441c      	add	r4, r3
	while (ptr_end_desc >
   845d0:	42a3      	cmp	r3, r4
   845d2:	d220      	bcs.n	84616 <udc_update_iface_desc+0x62>
   845d4:	2500      	movs	r5, #0
   845d6:	2601      	movs	r6, #1
   845d8:	e007      	b.n	845ea <udc_update_iface_desc+0x36>
   845da:	4a12      	ldr	r2, [pc, #72]	; (84624 <udc_update_iface_desc+0x70>)
   845dc:	6013      	str	r3, [r2, #0]
   845de:	e00f      	b.n	84600 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   845e0:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   845e2:	4413      	add	r3, r2
   845e4:	4635      	mov	r5, r6
	while (ptr_end_desc >
   845e6:	42a3      	cmp	r3, r4
   845e8:	d20c      	bcs.n	84604 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   845ea:	785a      	ldrb	r2, [r3, #1]
   845ec:	2a04      	cmp	r2, #4
   845ee:	d1f7      	bne.n	845e0 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   845f0:	789a      	ldrb	r2, [r3, #2]
   845f2:	4282      	cmp	r2, r0
   845f4:	d1f4      	bne.n	845e0 <udc_update_iface_desc+0x2c>
   845f6:	78da      	ldrb	r2, [r3, #3]
   845f8:	428a      	cmp	r2, r1
   845fa:	d1f1      	bne.n	845e0 <udc_update_iface_desc+0x2c>
   845fc:	2d00      	cmp	r5, #0
   845fe:	d1ec      	bne.n	845da <udc_update_iface_desc+0x26>
				return true; // Interface found
   84600:	2001      	movs	r0, #1
   84602:	e002      	b.n	8460a <udc_update_iface_desc+0x56>
   84604:	4a07      	ldr	r2, [pc, #28]	; (84624 <udc_update_iface_desc+0x70>)
   84606:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   84608:	2000      	movs	r0, #0
}
   8460a:	bc70      	pop	{r4, r5, r6}
   8460c:	4770      	bx	lr
		return false;
   8460e:	2000      	movs	r0, #0
   84610:	4770      	bx	lr
		return false;
   84612:	2000      	movs	r0, #0
   84614:	4770      	bx	lr
	return false; // Interface not found
   84616:	2000      	movs	r0, #0
   84618:	e7f7      	b.n	8460a <udc_update_iface_desc+0x56>
   8461a:	bf00      	nop
   8461c:	2000227b 	.word	0x2000227b
   84620:	2000227c 	.word	0x2000227c
   84624:	20002280 	.word	0x20002280

00084628 <udc_iface_disable>:
{
   84628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8462c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   8462e:	2100      	movs	r1, #0
   84630:	4b13      	ldr	r3, [pc, #76]	; (84680 <udc_iface_disable+0x58>)
   84632:	4798      	blx	r3
   84634:	4680      	mov	r8, r0
   84636:	b910      	cbnz	r0, 8463e <udc_iface_disable+0x16>
}
   84638:	4640      	mov	r0, r8
   8463a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8463e:	4b11      	ldr	r3, [pc, #68]	; (84684 <udc_iface_disable+0x5c>)
   84640:	681b      	ldr	r3, [r3, #0]
   84642:	685b      	ldr	r3, [r3, #4]
   84644:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84648:	f8d9 300c 	ldr.w	r3, [r9, #12]
   8464c:	4798      	blx	r3
   8464e:	4601      	mov	r1, r0
   84650:	4620      	mov	r0, r4
   84652:	4b0b      	ldr	r3, [pc, #44]	; (84680 <udc_iface_disable+0x58>)
   84654:	4798      	blx	r3
   84656:	4680      	mov	r8, r0
   84658:	2800      	cmp	r0, #0
   8465a:	d0ed      	beq.n	84638 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8465c:	4b0a      	ldr	r3, [pc, #40]	; (84688 <udc_iface_disable+0x60>)
   8465e:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   84660:	2605      	movs	r6, #5
   84662:	4d0a      	ldr	r5, [pc, #40]	; (8468c <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   84664:	4f0a      	ldr	r7, [pc, #40]	; (84690 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   84666:	4631      	mov	r1, r6
   84668:	4620      	mov	r0, r4
   8466a:	47a8      	blx	r5
			if (NULL == ep_desc) {
   8466c:	4604      	mov	r4, r0
   8466e:	b110      	cbz	r0, 84676 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   84670:	7880      	ldrb	r0, [r0, #2]
   84672:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   84674:	e7f7      	b.n	84666 <udc_iface_disable+0x3e>
	udi_api->disable();
   84676:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8467a:	4798      	blx	r3
	return true;
   8467c:	e7dc      	b.n	84638 <udc_iface_disable+0x10>
   8467e:	bf00      	nop
   84680:	000845b5 	.word	0x000845b5
   84684:	2000227c 	.word	0x2000227c
   84688:	20002280 	.word	0x20002280
   8468c:	00084555 	.word	0x00084555
   84690:	000864e9 	.word	0x000864e9

00084694 <udc_iface_enable>:
{
   84694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84698:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8469a:	4b10      	ldr	r3, [pc, #64]	; (846dc <udc_iface_enable+0x48>)
   8469c:	4798      	blx	r3
   8469e:	4603      	mov	r3, r0
   846a0:	b1c8      	cbz	r0, 846d6 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   846a2:	4b0f      	ldr	r3, [pc, #60]	; (846e0 <udc_iface_enable+0x4c>)
   846a4:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   846a6:	2605      	movs	r6, #5
   846a8:	4d0e      	ldr	r5, [pc, #56]	; (846e4 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   846aa:	4f0f      	ldr	r7, [pc, #60]	; (846e8 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   846ac:	4631      	mov	r1, r6
   846ae:	4620      	mov	r0, r4
   846b0:	47a8      	blx	r5
		if (NULL == ep_desc)
   846b2:	4604      	mov	r4, r0
   846b4:	b138      	cbz	r0, 846c6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   846b6:	8882      	ldrh	r2, [r0, #4]
   846b8:	78c1      	ldrb	r1, [r0, #3]
   846ba:	7880      	ldrb	r0, [r0, #2]
   846bc:	47b8      	blx	r7
   846be:	4603      	mov	r3, r0
   846c0:	2800      	cmp	r0, #0
   846c2:	d1f3      	bne.n	846ac <udc_iface_enable+0x18>
   846c4:	e007      	b.n	846d6 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   846c6:	4b09      	ldr	r3, [pc, #36]	; (846ec <udc_iface_enable+0x58>)
   846c8:	681b      	ldr	r3, [r3, #0]
   846ca:	685b      	ldr	r3, [r3, #4]
   846cc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   846d0:	681b      	ldr	r3, [r3, #0]
   846d2:	4798      	blx	r3
   846d4:	4603      	mov	r3, r0
}
   846d6:	4618      	mov	r0, r3
   846d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   846dc:	000845b5 	.word	0x000845b5
   846e0:	20002280 	.word	0x20002280
   846e4:	00084555 	.word	0x00084555
   846e8:	0008681d 	.word	0x0008681d
   846ec:	2000227c 	.word	0x2000227c

000846f0 <udc_get_interface_desc>:
}
   846f0:	4b01      	ldr	r3, [pc, #4]	; (846f8 <udc_get_interface_desc+0x8>)
   846f2:	6818      	ldr	r0, [r3, #0]
   846f4:	4770      	bx	lr
   846f6:	bf00      	nop
   846f8:	20002280 	.word	0x20002280

000846fc <udc_start>:
{
   846fc:	b508      	push	{r3, lr}
	udd_enable();
   846fe:	4b01      	ldr	r3, [pc, #4]	; (84704 <udc_start+0x8>)
   84700:	4798      	blx	r3
   84702:	bd08      	pop	{r3, pc}
   84704:	00086369 	.word	0x00086369

00084708 <udc_reset>:
{
   84708:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   8470a:	4b0d      	ldr	r3, [pc, #52]	; (84740 <udc_reset+0x38>)
   8470c:	781b      	ldrb	r3, [r3, #0]
   8470e:	b183      	cbz	r3, 84732 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84710:	4b0c      	ldr	r3, [pc, #48]	; (84744 <udc_reset+0x3c>)
   84712:	681b      	ldr	r3, [r3, #0]
   84714:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   84716:	791b      	ldrb	r3, [r3, #4]
   84718:	b15b      	cbz	r3, 84732 <udc_reset+0x2a>
   8471a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   8471c:	4e0a      	ldr	r6, [pc, #40]	; (84748 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8471e:	4d09      	ldr	r5, [pc, #36]	; (84744 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   84720:	4620      	mov	r0, r4
   84722:	47b0      	blx	r6
				iface_num++) {
   84724:	3401      	adds	r4, #1
   84726:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84728:	682b      	ldr	r3, [r5, #0]
   8472a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8472c:	791b      	ldrb	r3, [r3, #4]
   8472e:	42a3      	cmp	r3, r4
   84730:	d8f6      	bhi.n	84720 <udc_reset+0x18>
	udc_num_configuration = 0;
   84732:	2300      	movs	r3, #0
   84734:	4a02      	ldr	r2, [pc, #8]	; (84740 <udc_reset+0x38>)
   84736:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   84738:	4a04      	ldr	r2, [pc, #16]	; (8474c <udc_reset+0x44>)
   8473a:	8013      	strh	r3, [r2, #0]
   8473c:	bd70      	pop	{r4, r5, r6, pc}
   8473e:	bf00      	nop
   84740:	2000227b 	.word	0x2000227b
   84744:	2000227c 	.word	0x2000227c
   84748:	00084629 	.word	0x00084629
   8474c:	20002276 	.word	0x20002276

00084750 <udc_sof_notify>:
{
   84750:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   84752:	4b0d      	ldr	r3, [pc, #52]	; (84788 <udc_sof_notify+0x38>)
   84754:	781b      	ldrb	r3, [r3, #0]
   84756:	b1b3      	cbz	r3, 84786 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84758:	4b0c      	ldr	r3, [pc, #48]	; (8478c <udc_sof_notify+0x3c>)
   8475a:	681b      	ldr	r3, [r3, #0]
   8475c:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   8475e:	7912      	ldrb	r2, [r2, #4]
   84760:	b18a      	cbz	r2, 84786 <udc_sof_notify+0x36>
   84762:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84764:	4d09      	ldr	r5, [pc, #36]	; (8478c <udc_sof_notify+0x3c>)
   84766:	e006      	b.n	84776 <udc_sof_notify+0x26>
				iface_num++) {
   84768:	3401      	adds	r4, #1
   8476a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8476c:	682b      	ldr	r3, [r5, #0]
   8476e:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   84770:	7912      	ldrb	r2, [r2, #4]
   84772:	42a2      	cmp	r2, r4
   84774:	d907      	bls.n	84786 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   84776:	685b      	ldr	r3, [r3, #4]
   84778:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   8477c:	691b      	ldr	r3, [r3, #16]
   8477e:	2b00      	cmp	r3, #0
   84780:	d0f2      	beq.n	84768 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   84782:	4798      	blx	r3
   84784:	e7f0      	b.n	84768 <udc_sof_notify+0x18>
   84786:	bd38      	pop	{r3, r4, r5, pc}
   84788:	2000227b 	.word	0x2000227b
   8478c:	2000227c 	.word	0x2000227c

00084790 <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   84790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   84792:	4b95      	ldr	r3, [pc, #596]	; (849e8 <udc_process_setup+0x258>)
   84794:	2200      	movs	r2, #0
   84796:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   84798:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8479a:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8479c:	881b      	ldrh	r3, [r3, #0]
   8479e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   847a2:	d019      	beq.n	847d8 <udc_process_setup+0x48>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   847a4:	4b90      	ldr	r3, [pc, #576]	; (849e8 <udc_process_setup+0x258>)
   847a6:	781b      	ldrb	r3, [r3, #0]
   847a8:	f013 0f80 	tst.w	r3, #128	; 0x80
   847ac:	d11a      	bne.n	847e4 <udc_process_setup+0x54>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   847ae:	f013 0f60 	tst.w	r3, #96	; 0x60
   847b2:	f000 8145 	beq.w	84a40 <udc_process_setup+0x2b0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   847b6:	4b8c      	ldr	r3, [pc, #560]	; (849e8 <udc_process_setup+0x258>)
   847b8:	781b      	ldrb	r3, [r3, #0]
   847ba:	f003 031f 	and.w	r3, r3, #31
   847be:	2b01      	cmp	r3, #1
   847c0:	f000 8211 	beq.w	84be6 <udc_process_setup+0x456>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   847c4:	4b88      	ldr	r3, [pc, #544]	; (849e8 <udc_process_setup+0x258>)
   847c6:	781b      	ldrb	r3, [r3, #0]
   847c8:	f003 031f 	and.w	r3, r3, #31
   847cc:	2b02      	cmp	r3, #2
   847ce:	f000 8295 	beq.w	84cfc <udc_process_setup+0x56c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   847d2:	2300      	movs	r3, #0
#endif
}
   847d4:	4618      	mov	r0, r3
   847d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   847d8:	21ae      	movs	r1, #174	; 0xae
   847da:	4884      	ldr	r0, [pc, #528]	; (849ec <udc_process_setup+0x25c>)
   847dc:	4b84      	ldr	r3, [pc, #528]	; (849f0 <udc_process_setup+0x260>)
   847de:	4798      	blx	r3
		return true;
   847e0:	2301      	movs	r3, #1
   847e2:	e7f7      	b.n	847d4 <udc_process_setup+0x44>
		if (udd_g_ctrlreq.req.wLength == 0) {
   847e4:	4a80      	ldr	r2, [pc, #512]	; (849e8 <udc_process_setup+0x258>)
   847e6:	88d2      	ldrh	r2, [r2, #6]
   847e8:	2a00      	cmp	r2, #0
   847ea:	f000 82b0 	beq.w	84d4e <udc_process_setup+0x5be>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   847ee:	f013 0f60 	tst.w	r3, #96	; 0x60
   847f2:	d1e0      	bne.n	847b6 <udc_process_setup+0x26>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   847f4:	f013 031f 	ands.w	r3, r3, #31
   847f8:	d107      	bne.n	8480a <udc_process_setup+0x7a>
			switch (udd_g_ctrlreq.req.bRequest) {
   847fa:	497b      	ldr	r1, [pc, #492]	; (849e8 <udc_process_setup+0x258>)
   847fc:	7849      	ldrb	r1, [r1, #1]
   847fe:	2906      	cmp	r1, #6
   84800:	d016      	beq.n	84830 <udc_process_setup+0xa0>
   84802:	2908      	cmp	r1, #8
   84804:	f000 80bf 	beq.w	84986 <udc_process_setup+0x1f6>
   84808:	b159      	cbz	r1, 84822 <udc_process_setup+0x92>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8480a:	2b01      	cmp	r3, #1
   8480c:	f000 80c3 	beq.w	84996 <udc_process_setup+0x206>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84810:	2b02      	cmp	r3, #2
   84812:	d1d0      	bne.n	847b6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   84814:	4b74      	ldr	r3, [pc, #464]	; (849e8 <udc_process_setup+0x258>)
   84816:	785b      	ldrb	r3, [r3, #1]
   84818:	2b00      	cmp	r3, #0
   8481a:	f000 8103 	beq.w	84a24 <udc_process_setup+0x294>
	return false;
   8481e:	2300      	movs	r3, #0
   84820:	e1d3      	b.n	84bca <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   84822:	2a02      	cmp	r2, #2
   84824:	d1ce      	bne.n	847c4 <udc_process_setup+0x34>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   84826:	2102      	movs	r1, #2
   84828:	4872      	ldr	r0, [pc, #456]	; (849f4 <udc_process_setup+0x264>)
   8482a:	4b71      	ldr	r3, [pc, #452]	; (849f0 <udc_process_setup+0x260>)
   8482c:	4798      	blx	r3
   8482e:	e124      	b.n	84a7a <udc_process_setup+0x2ea>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84830:	4b6d      	ldr	r3, [pc, #436]	; (849e8 <udc_process_setup+0x258>)
   84832:	885a      	ldrh	r2, [r3, #2]
   84834:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84836:	0a13      	lsrs	r3, r2, #8
   84838:	3b01      	subs	r3, #1
   8483a:	2b0e      	cmp	r3, #14
   8483c:	f200 8214 	bhi.w	84c68 <udc_process_setup+0x4d8>
   84840:	e8df f013 	tbh	[pc, r3, lsl #1]
   84844:	0023000f 	.word	0x0023000f
   84848:	0212007b 	.word	0x0212007b
   8484c:	00450212 	.word	0x00450212
   84850:	02120053 	.word	0x02120053
   84854:	02120212 	.word	0x02120212
   84858:	02120212 	.word	0x02120212
   8485c:	02120212 	.word	0x02120212
   84860:	0076      	.short	0x0076
		if (!udd_is_high_speed()) {
   84862:	4b65      	ldr	r3, [pc, #404]	; (849f8 <udc_process_setup+0x268>)
   84864:	4798      	blx	r3
   84866:	b928      	cbnz	r0, 84874 <udc_process_setup+0xe4>
				(uint8_t *) udc_config.confdev_hs,
   84868:	4b64      	ldr	r3, [pc, #400]	; (849fc <udc_process_setup+0x26c>)
   8486a:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   8486c:	7801      	ldrb	r1, [r0, #0]
   8486e:	4b60      	ldr	r3, [pc, #384]	; (849f0 <udc_process_setup+0x260>)
   84870:	4798      	blx	r3
   84872:	e031      	b.n	848d8 <udc_process_setup+0x148>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   84874:	4b61      	ldr	r3, [pc, #388]	; (849fc <udc_process_setup+0x26c>)
   84876:	681a      	ldr	r2, [r3, #0]
   84878:	2110      	movs	r1, #16
   8487a:	7091      	strb	r1, [r2, #2]
   8487c:	2102      	movs	r1, #2
   8487e:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   84880:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   84882:	7801      	ldrb	r1, [r0, #0]
   84884:	4b5a      	ldr	r3, [pc, #360]	; (849f0 <udc_process_setup+0x260>)
   84886:	4798      	blx	r3
   84888:	e026      	b.n	848d8 <udc_process_setup+0x148>
		if (udd_is_high_speed()) {
   8488a:	4b5b      	ldr	r3, [pc, #364]	; (849f8 <udc_process_setup+0x268>)
   8488c:	4798      	blx	r3
   8488e:	b180      	cbz	r0, 848b2 <udc_process_setup+0x122>
			if (conf_num >= udc_config.confdev_hs->
   84890:	4b5a      	ldr	r3, [pc, #360]	; (849fc <udc_process_setup+0x26c>)
   84892:	689b      	ldr	r3, [r3, #8]
   84894:	7c5b      	ldrb	r3, [r3, #17]
   84896:	42a3      	cmp	r3, r4
   84898:	d98d      	bls.n	847b6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8489a:	4b58      	ldr	r3, [pc, #352]	; (849fc <udc_process_setup+0x26c>)
   8489c:	691b      	ldr	r3, [r3, #16]
   8489e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   848a2:	8841      	ldrh	r1, [r0, #2]
   848a4:	4b52      	ldr	r3, [pc, #328]	; (849f0 <udc_process_setup+0x260>)
   848a6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   848a8:	4b4f      	ldr	r3, [pc, #316]	; (849e8 <udc_process_setup+0x258>)
   848aa:	689b      	ldr	r3, [r3, #8]
   848ac:	2202      	movs	r2, #2
   848ae:	705a      	strb	r2, [r3, #1]
   848b0:	e012      	b.n	848d8 <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   848b2:	4b52      	ldr	r3, [pc, #328]	; (849fc <udc_process_setup+0x26c>)
   848b4:	681b      	ldr	r3, [r3, #0]
   848b6:	7c5b      	ldrb	r3, [r3, #17]
   848b8:	42a3      	cmp	r3, r4
   848ba:	f67f af7c 	bls.w	847b6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   848be:	4b4f      	ldr	r3, [pc, #316]	; (849fc <udc_process_setup+0x26c>)
   848c0:	685b      	ldr	r3, [r3, #4]
   848c2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   848c6:	8841      	ldrh	r1, [r0, #2]
   848c8:	4b49      	ldr	r3, [pc, #292]	; (849f0 <udc_process_setup+0x260>)
   848ca:	4798      	blx	r3
   848cc:	e7ec      	b.n	848a8 <udc_process_setup+0x118>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   848ce:	4b4b      	ldr	r3, [pc, #300]	; (849fc <udc_process_setup+0x26c>)
   848d0:	68d8      	ldr	r0, [r3, #12]
   848d2:	7801      	ldrb	r1, [r0, #0]
   848d4:	4b46      	ldr	r3, [pc, #280]	; (849f0 <udc_process_setup+0x260>)
   848d6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   848d8:	4b43      	ldr	r3, [pc, #268]	; (849e8 <udc_process_setup+0x258>)
   848da:	88da      	ldrh	r2, [r3, #6]
   848dc:	899b      	ldrh	r3, [r3, #12]
   848de:	4293      	cmp	r3, r2
   848e0:	f240 80cb 	bls.w	84a7a <udc_process_setup+0x2ea>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   848e4:	4b40      	ldr	r3, [pc, #256]	; (849e8 <udc_process_setup+0x258>)
   848e6:	819a      	strh	r2, [r3, #12]
   848e8:	e0c7      	b.n	84a7a <udc_process_setup+0x2ea>
		if (!udd_is_high_speed()) {
   848ea:	4b43      	ldr	r3, [pc, #268]	; (849f8 <udc_process_setup+0x268>)
   848ec:	4798      	blx	r3
   848ee:	b988      	cbnz	r0, 84914 <udc_process_setup+0x184>
			if (conf_num >= udc_config.confdev_hs->
   848f0:	4b42      	ldr	r3, [pc, #264]	; (849fc <udc_process_setup+0x26c>)
   848f2:	689b      	ldr	r3, [r3, #8]
   848f4:	7c5b      	ldrb	r3, [r3, #17]
   848f6:	42a3      	cmp	r3, r4
   848f8:	f67f af5d 	bls.w	847b6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   848fc:	4b3f      	ldr	r3, [pc, #252]	; (849fc <udc_process_setup+0x26c>)
   848fe:	691b      	ldr	r3, [r3, #16]
   84900:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84904:	8841      	ldrh	r1, [r0, #2]
   84906:	4b3a      	ldr	r3, [pc, #232]	; (849f0 <udc_process_setup+0x260>)
   84908:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8490a:	4b37      	ldr	r3, [pc, #220]	; (849e8 <udc_process_setup+0x258>)
   8490c:	689b      	ldr	r3, [r3, #8]
   8490e:	2207      	movs	r2, #7
   84910:	705a      	strb	r2, [r3, #1]
   84912:	e7e1      	b.n	848d8 <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   84914:	4b39      	ldr	r3, [pc, #228]	; (849fc <udc_process_setup+0x26c>)
   84916:	681b      	ldr	r3, [r3, #0]
   84918:	7c5b      	ldrb	r3, [r3, #17]
   8491a:	42a3      	cmp	r3, r4
   8491c:	f67f af4b 	bls.w	847b6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84920:	4b36      	ldr	r3, [pc, #216]	; (849fc <udc_process_setup+0x26c>)
   84922:	685b      	ldr	r3, [r3, #4]
   84924:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84928:	8841      	ldrh	r1, [r0, #2]
   8492a:	4b31      	ldr	r3, [pc, #196]	; (849f0 <udc_process_setup+0x260>)
   8492c:	4798      	blx	r3
   8492e:	e7ec      	b.n	8490a <udc_process_setup+0x17a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84930:	2121      	movs	r1, #33	; 0x21
   84932:	4833      	ldr	r0, [pc, #204]	; (84a00 <udc_process_setup+0x270>)
   84934:	4b2e      	ldr	r3, [pc, #184]	; (849f0 <udc_process_setup+0x260>)
   84936:	4798      	blx	r3
   84938:	e7ce      	b.n	848d8 <udc_process_setup+0x148>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8493a:	b2d2      	uxtb	r2, r2
   8493c:	2a03      	cmp	r2, #3
   8493e:	f63f af3a 	bhi.w	847b6 <udc_process_setup+0x26>
   84942:	e8df f012 	tbh	[pc, r2, lsl #1]
   84946:	0007      	.short	0x0007
   84948:	0208000c 	.word	0x0208000c
   8494c:	0004      	.short	0x0004
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   8494e:	2420      	movs	r4, #32
		str = udc_get_string_serial_name();
   84950:	4a2c      	ldr	r2, [pc, #176]	; (84a04 <udc_process_setup+0x274>)
   84952:	e006      	b.n	84962 <udc_process_setup+0x1d2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84954:	2104      	movs	r1, #4
   84956:	482c      	ldr	r0, [pc, #176]	; (84a08 <udc_process_setup+0x278>)
   84958:	4b25      	ldr	r3, [pc, #148]	; (849f0 <udc_process_setup+0x260>)
   8495a:	4798      	blx	r3
   8495c:	e7bc      	b.n	848d8 <udc_process_setup+0x148>
		str = udc_string_manufacturer_name;
   8495e:	4a2b      	ldr	r2, [pc, #172]	; (84a0c <udc_process_setup+0x27c>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84960:	2415      	movs	r4, #21
   84962:	3a01      	subs	r2, #1
   84964:	492a      	ldr	r1, [pc, #168]	; (84a10 <udc_process_setup+0x280>)
   84966:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84968:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   8496c:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   84970:	3301      	adds	r3, #1
   84972:	b2db      	uxtb	r3, r3
   84974:	429c      	cmp	r4, r3
   84976:	d8f7      	bhi.n	84968 <udc_process_setup+0x1d8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84978:	0061      	lsls	r1, r4, #1
   8497a:	3102      	adds	r1, #2
   8497c:	4824      	ldr	r0, [pc, #144]	; (84a10 <udc_process_setup+0x280>)
   8497e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   84980:	4b1b      	ldr	r3, [pc, #108]	; (849f0 <udc_process_setup+0x260>)
   84982:	4798      	blx	r3
   84984:	e7a8      	b.n	848d8 <udc_process_setup+0x148>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84986:	2a01      	cmp	r2, #1
   84988:	f47f af1c 	bne.w	847c4 <udc_process_setup+0x34>
	udd_set_setup_payload(&udc_num_configuration,1);
   8498c:	2101      	movs	r1, #1
   8498e:	4821      	ldr	r0, [pc, #132]	; (84a14 <udc_process_setup+0x284>)
   84990:	4b17      	ldr	r3, [pc, #92]	; (849f0 <udc_process_setup+0x260>)
   84992:	4798      	blx	r3
   84994:	e071      	b.n	84a7a <udc_process_setup+0x2ea>
			switch (udd_g_ctrlreq.req.bRequest) {
   84996:	4914      	ldr	r1, [pc, #80]	; (849e8 <udc_process_setup+0x258>)
   84998:	7849      	ldrb	r1, [r1, #1]
   8499a:	290a      	cmp	r1, #10
   8499c:	f47f af38 	bne.w	84810 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wLength != 1) {
   849a0:	2a01      	cmp	r2, #1
   849a2:	f040 8120 	bne.w	84be6 <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   849a6:	4b1b      	ldr	r3, [pc, #108]	; (84a14 <udc_process_setup+0x284>)
   849a8:	781b      	ldrb	r3, [r3, #0]
   849aa:	2b00      	cmp	r3, #0
   849ac:	f000 811b 	beq.w	84be6 <udc_process_setup+0x456>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   849b0:	4b0d      	ldr	r3, [pc, #52]	; (849e8 <udc_process_setup+0x258>)
   849b2:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   849b4:	4b18      	ldr	r3, [pc, #96]	; (84a18 <udc_process_setup+0x288>)
   849b6:	681d      	ldr	r5, [r3, #0]
   849b8:	682b      	ldr	r3, [r5, #0]
   849ba:	791b      	ldrb	r3, [r3, #4]
   849bc:	42a3      	cmp	r3, r4
   849be:	f240 8112 	bls.w	84be6 <udc_process_setup+0x456>
	if (!udc_update_iface_desc(iface_num, 0)) {
   849c2:	2100      	movs	r1, #0
   849c4:	4620      	mov	r0, r4
   849c6:	4b15      	ldr	r3, [pc, #84]	; (84a1c <udc_process_setup+0x28c>)
   849c8:	4798      	blx	r3
   849ca:	2800      	cmp	r0, #0
   849cc:	f43f aef3 	beq.w	847b6 <udc_process_setup+0x26>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   849d0:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   849d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   849d6:	68db      	ldr	r3, [r3, #12]
   849d8:	4798      	blx	r3
   849da:	4b11      	ldr	r3, [pc, #68]	; (84a20 <udc_process_setup+0x290>)
   849dc:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   849de:	2101      	movs	r1, #1
   849e0:	4618      	mov	r0, r3
   849e2:	4b03      	ldr	r3, [pc, #12]	; (849f0 <udc_process_setup+0x260>)
   849e4:	4798      	blx	r3
   849e6:	e048      	b.n	84a7a <udc_process_setup+0x2ea>
   849e8:	20002dec 	.word	0x20002dec
   849ec:	20000640 	.word	0x20000640
   849f0:	000864dd 	.word	0x000864dd
   849f4:	20002276 	.word	0x20002276
   849f8:	00086475 	.word	0x00086475
   849fc:	200001d4 	.word	0x200001d4
   84a00:	0008dc34 	.word	0x0008dc34
   84a04:	200006f0 	.word	0x200006f0
   84a08:	20000610 	.word	0x20000610
   84a0c:	20000614 	.word	0x20000614
   84a10:	200005cc 	.word	0x200005cc
   84a14:	2000227b 	.word	0x2000227b
   84a18:	2000227c 	.word	0x2000227c
   84a1c:	000845b5 	.word	0x000845b5
   84a20:	2000227a 	.word	0x2000227a
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84a24:	2a02      	cmp	r2, #2
   84a26:	f47f aecd 	bne.w	847c4 <udc_process_setup+0x34>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84a2a:	4b92      	ldr	r3, [pc, #584]	; (84c74 <udc_process_setup+0x4e4>)
   84a2c:	7918      	ldrb	r0, [r3, #4]
   84a2e:	4b92      	ldr	r3, [pc, #584]	; (84c78 <udc_process_setup+0x4e8>)
   84a30:	4798      	blx	r3
   84a32:	4b92      	ldr	r3, [pc, #584]	; (84c7c <udc_process_setup+0x4ec>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84a34:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84a36:	2102      	movs	r1, #2
   84a38:	4618      	mov	r0, r3
   84a3a:	4b91      	ldr	r3, [pc, #580]	; (84c80 <udc_process_setup+0x4f0>)
   84a3c:	4798      	blx	r3
   84a3e:	e01c      	b.n	84a7a <udc_process_setup+0x2ea>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84a40:	f013 031f 	ands.w	r3, r3, #31
   84a44:	f040 80b5 	bne.w	84bb2 <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   84a48:	4a8a      	ldr	r2, [pc, #552]	; (84c74 <udc_process_setup+0x4e4>)
   84a4a:	7852      	ldrb	r2, [r2, #1]
   84a4c:	3a01      	subs	r2, #1
   84a4e:	2a08      	cmp	r2, #8
   84a50:	f200 80af 	bhi.w	84bb2 <udc_process_setup+0x422>
   84a54:	e8df f012 	tbh	[pc, r2, lsl #1]
   84a58:	00ad0013 	.word	0x00ad0013
   84a5c:	00ad0023 	.word	0x00ad0023
   84a60:	00ad0009 	.word	0x00ad0009
   84a64:	00ad00ad 	.word	0x00ad00ad
   84a68:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   84a6a:	4b82      	ldr	r3, [pc, #520]	; (84c74 <udc_process_setup+0x4e4>)
   84a6c:	88db      	ldrh	r3, [r3, #6]
   84a6e:	2b00      	cmp	r3, #0
   84a70:	f47f aea8 	bne.w	847c4 <udc_process_setup+0x34>
	udd_g_ctrlreq.callback = udc_valid_address;
   84a74:	4a83      	ldr	r2, [pc, #524]	; (84c84 <udc_process_setup+0x4f4>)
   84a76:	4b7f      	ldr	r3, [pc, #508]	; (84c74 <udc_process_setup+0x4e4>)
   84a78:	611a      	str	r2, [r3, #16]
			return true;
   84a7a:	2301      	movs	r3, #1
   84a7c:	e6aa      	b.n	847d4 <udc_process_setup+0x44>
	if (udd_g_ctrlreq.req.wLength) {
   84a7e:	4b7d      	ldr	r3, [pc, #500]	; (84c74 <udc_process_setup+0x4e4>)
   84a80:	88db      	ldrh	r3, [r3, #6]
   84a82:	2b00      	cmp	r3, #0
   84a84:	f47f ae9e 	bne.w	847c4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84a88:	4b7a      	ldr	r3, [pc, #488]	; (84c74 <udc_process_setup+0x4e4>)
   84a8a:	885b      	ldrh	r3, [r3, #2]
   84a8c:	2b01      	cmp	r3, #1
   84a8e:	f47f ae99 	bne.w	847c4 <udc_process_setup+0x34>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84a92:	4a7d      	ldr	r2, [pc, #500]	; (84c88 <udc_process_setup+0x4f8>)
   84a94:	8813      	ldrh	r3, [r2, #0]
   84a96:	f023 0302 	bic.w	r3, r3, #2
   84a9a:	8013      	strh	r3, [r2, #0]
   84a9c:	e7ed      	b.n	84a7a <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   84a9e:	4b75      	ldr	r3, [pc, #468]	; (84c74 <udc_process_setup+0x4e4>)
   84aa0:	88db      	ldrh	r3, [r3, #6]
   84aa2:	2b00      	cmp	r3, #0
   84aa4:	f47f ae8e 	bne.w	847c4 <udc_process_setup+0x34>
	switch (udd_g_ctrlreq.req.wValue) {
   84aa8:	4b72      	ldr	r3, [pc, #456]	; (84c74 <udc_process_setup+0x4e4>)
   84aaa:	885b      	ldrh	r3, [r3, #2]
   84aac:	2b02      	cmp	r3, #2
   84aae:	f040 80dd 	bne.w	84c6c <udc_process_setup+0x4dc>
		if (!udd_is_high_speed()) {
   84ab2:	4b76      	ldr	r3, [pc, #472]	; (84c8c <udc_process_setup+0x4fc>)
   84ab4:	4798      	blx	r3
   84ab6:	2800      	cmp	r0, #0
   84ab8:	f43f ae7d 	beq.w	847b6 <udc_process_setup+0x26>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84abc:	4b6d      	ldr	r3, [pc, #436]	; (84c74 <udc_process_setup+0x4e4>)
   84abe:	791b      	ldrb	r3, [r3, #4]
   84ac0:	2b00      	cmp	r3, #0
   84ac2:	f47f ae78 	bne.w	847b6 <udc_process_setup+0x26>
		udc_reset();
   84ac6:	4b72      	ldr	r3, [pc, #456]	; (84c90 <udc_process_setup+0x500>)
   84ac8:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84aca:	4b6a      	ldr	r3, [pc, #424]	; (84c74 <udc_process_setup+0x4e4>)
   84acc:	889b      	ldrh	r3, [r3, #4]
   84ace:	0a1b      	lsrs	r3, r3, #8
   84ad0:	3b01      	subs	r3, #1
   84ad2:	2b03      	cmp	r3, #3
   84ad4:	f200 80cc 	bhi.w	84c70 <udc_process_setup+0x4e0>
   84ad8:	e8df f003 	tbb	[pc, r3]
   84adc:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84ae0:	4a6c      	ldr	r2, [pc, #432]	; (84c94 <udc_process_setup+0x504>)
   84ae2:	4b64      	ldr	r3, [pc, #400]	; (84c74 <udc_process_setup+0x4e4>)
   84ae4:	611a      	str	r2, [r3, #16]
   84ae6:	e7c8      	b.n	84a7a <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84ae8:	4a6b      	ldr	r2, [pc, #428]	; (84c98 <udc_process_setup+0x508>)
   84aea:	4b62      	ldr	r3, [pc, #392]	; (84c74 <udc_process_setup+0x4e4>)
   84aec:	611a      	str	r2, [r3, #16]
   84aee:	e7c4      	b.n	84a7a <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84af0:	4a6a      	ldr	r2, [pc, #424]	; (84c9c <udc_process_setup+0x50c>)
   84af2:	4b60      	ldr	r3, [pc, #384]	; (84c74 <udc_process_setup+0x4e4>)
   84af4:	611a      	str	r2, [r3, #16]
   84af6:	e7c0      	b.n	84a7a <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84af8:	4a69      	ldr	r2, [pc, #420]	; (84ca0 <udc_process_setup+0x510>)
   84afa:	4b5e      	ldr	r3, [pc, #376]	; (84c74 <udc_process_setup+0x4e4>)
   84afc:	611a      	str	r2, [r3, #16]
   84afe:	e7bc      	b.n	84a7a <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   84b00:	4b5c      	ldr	r3, [pc, #368]	; (84c74 <udc_process_setup+0x4e4>)
   84b02:	88db      	ldrh	r3, [r3, #6]
   84b04:	2b00      	cmp	r3, #0
   84b06:	f47f ae5d 	bne.w	847c4 <udc_process_setup+0x34>
	if (!udd_getaddress()) {
   84b0a:	4b66      	ldr	r3, [pc, #408]	; (84ca4 <udc_process_setup+0x514>)
   84b0c:	4798      	blx	r3
   84b0e:	2800      	cmp	r0, #0
   84b10:	f43f ae51 	beq.w	847b6 <udc_process_setup+0x26>
	if (udd_is_high_speed()) {
   84b14:	4b5d      	ldr	r3, [pc, #372]	; (84c8c <udc_process_setup+0x4fc>)
   84b16:	4798      	blx	r3
   84b18:	2800      	cmp	r0, #0
   84b1a:	d036      	beq.n	84b8a <udc_process_setup+0x3fa>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84b1c:	4b55      	ldr	r3, [pc, #340]	; (84c74 <udc_process_setup+0x4e4>)
   84b1e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   84b20:	4b61      	ldr	r3, [pc, #388]	; (84ca8 <udc_process_setup+0x518>)
   84b22:	689b      	ldr	r3, [r3, #8]
   84b24:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84b26:	429a      	cmp	r2, r3
   84b28:	f73f ae45 	bgt.w	847b6 <udc_process_setup+0x26>
	udc_reset();
   84b2c:	4b58      	ldr	r3, [pc, #352]	; (84c90 <udc_process_setup+0x500>)
   84b2e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84b30:	4b50      	ldr	r3, [pc, #320]	; (84c74 <udc_process_setup+0x4e4>)
   84b32:	789b      	ldrb	r3, [r3, #2]
   84b34:	4a5d      	ldr	r2, [pc, #372]	; (84cac <udc_process_setup+0x51c>)
   84b36:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   84b38:	2b00      	cmp	r3, #0
   84b3a:	d09e      	beq.n	84a7a <udc_process_setup+0x2ea>
	if (udd_is_high_speed()) {
   84b3c:	4b53      	ldr	r3, [pc, #332]	; (84c8c <udc_process_setup+0x4fc>)
   84b3e:	4798      	blx	r3
   84b40:	2800      	cmp	r0, #0
   84b42:	d02a      	beq.n	84b9a <udc_process_setup+0x40a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84b44:	4b59      	ldr	r3, [pc, #356]	; (84cac <udc_process_setup+0x51c>)
   84b46:	781b      	ldrb	r3, [r3, #0]
   84b48:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84b4c:	3b01      	subs	r3, #1
   84b4e:	4a56      	ldr	r2, [pc, #344]	; (84ca8 <udc_process_setup+0x518>)
   84b50:	6912      	ldr	r2, [r2, #16]
   84b52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84b56:	4a56      	ldr	r2, [pc, #344]	; (84cb0 <udc_process_setup+0x520>)
   84b58:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84b5a:	4b55      	ldr	r3, [pc, #340]	; (84cb0 <udc_process_setup+0x520>)
   84b5c:	681b      	ldr	r3, [r3, #0]
   84b5e:	681b      	ldr	r3, [r3, #0]
   84b60:	791b      	ldrb	r3, [r3, #4]
   84b62:	2b00      	cmp	r3, #0
   84b64:	d089      	beq.n	84a7a <udc_process_setup+0x2ea>
   84b66:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   84b68:	4627      	mov	r7, r4
   84b6a:	4e52      	ldr	r6, [pc, #328]	; (84cb4 <udc_process_setup+0x524>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84b6c:	4d50      	ldr	r5, [pc, #320]	; (84cb0 <udc_process_setup+0x520>)
		if (!udc_iface_enable(iface_num, 0)) {
   84b6e:	4639      	mov	r1, r7
   84b70:	4620      	mov	r0, r4
   84b72:	47b0      	blx	r6
   84b74:	2800      	cmp	r0, #0
   84b76:	f43f ae1e 	beq.w	847b6 <udc_process_setup+0x26>
			iface_num++) {
   84b7a:	3401      	adds	r4, #1
   84b7c:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84b7e:	682b      	ldr	r3, [r5, #0]
   84b80:	681b      	ldr	r3, [r3, #0]
   84b82:	791b      	ldrb	r3, [r3, #4]
   84b84:	42a3      	cmp	r3, r4
   84b86:	d8f2      	bhi.n	84b6e <udc_process_setup+0x3de>
   84b88:	e777      	b.n	84a7a <udc_process_setup+0x2ea>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84b8a:	4b3a      	ldr	r3, [pc, #232]	; (84c74 <udc_process_setup+0x4e4>)
   84b8c:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   84b8e:	4b46      	ldr	r3, [pc, #280]	; (84ca8 <udc_process_setup+0x518>)
   84b90:	681b      	ldr	r3, [r3, #0]
   84b92:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84b94:	429a      	cmp	r2, r3
   84b96:	ddc9      	ble.n	84b2c <udc_process_setup+0x39c>
   84b98:	e60d      	b.n	847b6 <udc_process_setup+0x26>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84b9a:	4b44      	ldr	r3, [pc, #272]	; (84cac <udc_process_setup+0x51c>)
   84b9c:	781b      	ldrb	r3, [r3, #0]
   84b9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84ba2:	3b01      	subs	r3, #1
   84ba4:	4a40      	ldr	r2, [pc, #256]	; (84ca8 <udc_process_setup+0x518>)
   84ba6:	6852      	ldr	r2, [r2, #4]
   84ba8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84bac:	4a40      	ldr	r2, [pc, #256]	; (84cb0 <udc_process_setup+0x520>)
   84bae:	6013      	str	r3, [r2, #0]
   84bb0:	e7d3      	b.n	84b5a <udc_process_setup+0x3ca>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84bb2:	2b01      	cmp	r3, #1
   84bb4:	d00d      	beq.n	84bd2 <udc_process_setup+0x442>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84bb6:	2b02      	cmp	r3, #2
   84bb8:	f47f adfd 	bne.w	847b6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   84bbc:	4b2d      	ldr	r3, [pc, #180]	; (84c74 <udc_process_setup+0x4e4>)
   84bbe:	785b      	ldrb	r3, [r3, #1]
   84bc0:	2b01      	cmp	r3, #1
   84bc2:	d02e      	beq.n	84c22 <udc_process_setup+0x492>
   84bc4:	2b03      	cmp	r3, #3
   84bc6:	d03c      	beq.n	84c42 <udc_process_setup+0x4b2>
	return false;
   84bc8:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   84bca:	2b00      	cmp	r3, #0
   84bcc:	f47f ae02 	bne.w	847d4 <udc_process_setup+0x44>
   84bd0:	e5f1      	b.n	847b6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   84bd2:	4a28      	ldr	r2, [pc, #160]	; (84c74 <udc_process_setup+0x4e4>)
   84bd4:	7852      	ldrb	r2, [r2, #1]
   84bd6:	2a0b      	cmp	r2, #11
   84bd8:	d1ed      	bne.n	84bb6 <udc_process_setup+0x426>
	if (udd_g_ctrlreq.req.wLength) {
   84bda:	4b26      	ldr	r3, [pc, #152]	; (84c74 <udc_process_setup+0x4e4>)
   84bdc:	88db      	ldrh	r3, [r3, #6]
   84bde:	b913      	cbnz	r3, 84be6 <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   84be0:	4b32      	ldr	r3, [pc, #200]	; (84cac <udc_process_setup+0x51c>)
   84be2:	781b      	ldrb	r3, [r3, #0]
   84be4:	b973      	cbnz	r3, 84c04 <udc_process_setup+0x474>
	if (0 == udc_num_configuration) {
   84be6:	4b31      	ldr	r3, [pc, #196]	; (84cac <udc_process_setup+0x51c>)
   84be8:	781b      	ldrb	r3, [r3, #0]
   84bea:	2b00      	cmp	r3, #0
   84bec:	f000 80b1 	beq.w	84d52 <udc_process_setup+0x5c2>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84bf0:	4b20      	ldr	r3, [pc, #128]	; (84c74 <udc_process_setup+0x4e4>)
   84bf2:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84bf4:	4b2e      	ldr	r3, [pc, #184]	; (84cb0 <udc_process_setup+0x520>)
   84bf6:	681d      	ldr	r5, [r3, #0]
   84bf8:	682b      	ldr	r3, [r5, #0]
   84bfa:	791b      	ldrb	r3, [r3, #4]
   84bfc:	42a3      	cmp	r3, r4
   84bfe:	d863      	bhi.n	84cc8 <udc_process_setup+0x538>
	return false;
   84c00:	2300      	movs	r3, #0
   84c02:	e5e7      	b.n	847d4 <udc_process_setup+0x44>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84c04:	4b1b      	ldr	r3, [pc, #108]	; (84c74 <udc_process_setup+0x4e4>)
   84c06:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84c08:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   84c0a:	4620      	mov	r0, r4
   84c0c:	4b2a      	ldr	r3, [pc, #168]	; (84cb8 <udc_process_setup+0x528>)
   84c0e:	4798      	blx	r3
   84c10:	2800      	cmp	r0, #0
   84c12:	f43f add0 	beq.w	847b6 <udc_process_setup+0x26>
	return udc_iface_enable(iface_num, setting_num);
   84c16:	b2e9      	uxtb	r1, r5
   84c18:	4620      	mov	r0, r4
   84c1a:	4b26      	ldr	r3, [pc, #152]	; (84cb4 <udc_process_setup+0x524>)
   84c1c:	4798      	blx	r3
   84c1e:	4603      	mov	r3, r0
   84c20:	e7d3      	b.n	84bca <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   84c22:	4b14      	ldr	r3, [pc, #80]	; (84c74 <udc_process_setup+0x4e4>)
   84c24:	88db      	ldrh	r3, [r3, #6]
   84c26:	2b00      	cmp	r3, #0
   84c28:	f47f adcc 	bne.w	847c4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84c2c:	4b11      	ldr	r3, [pc, #68]	; (84c74 <udc_process_setup+0x4e4>)
   84c2e:	885b      	ldrh	r3, [r3, #2]
   84c30:	2b00      	cmp	r3, #0
   84c32:	f47f adc7 	bne.w	847c4 <udc_process_setup+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84c36:	4b0f      	ldr	r3, [pc, #60]	; (84c74 <udc_process_setup+0x4e4>)
   84c38:	7918      	ldrb	r0, [r3, #4]
   84c3a:	4b20      	ldr	r3, [pc, #128]	; (84cbc <udc_process_setup+0x52c>)
   84c3c:	4798      	blx	r3
   84c3e:	4603      	mov	r3, r0
   84c40:	e7c3      	b.n	84bca <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   84c42:	4b0c      	ldr	r3, [pc, #48]	; (84c74 <udc_process_setup+0x4e4>)
   84c44:	88db      	ldrh	r3, [r3, #6]
   84c46:	2b00      	cmp	r3, #0
   84c48:	f47f adbc 	bne.w	847c4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84c4c:	4b09      	ldr	r3, [pc, #36]	; (84c74 <udc_process_setup+0x4e4>)
   84c4e:	885b      	ldrh	r3, [r3, #2]
   84c50:	2b00      	cmp	r3, #0
   84c52:	f47f adb7 	bne.w	847c4 <udc_process_setup+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84c56:	4c07      	ldr	r4, [pc, #28]	; (84c74 <udc_process_setup+0x4e4>)
   84c58:	7920      	ldrb	r0, [r4, #4]
   84c5a:	4b19      	ldr	r3, [pc, #100]	; (84cc0 <udc_process_setup+0x530>)
   84c5c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84c5e:	7920      	ldrb	r0, [r4, #4]
   84c60:	4b18      	ldr	r3, [pc, #96]	; (84cc4 <udc_process_setup+0x534>)
   84c62:	4798      	blx	r3
   84c64:	4603      	mov	r3, r0
   84c66:	e7b0      	b.n	84bca <udc_process_setup+0x43a>
		return false;
   84c68:	2300      	movs	r3, #0
   84c6a:	e7ae      	b.n	84bca <udc_process_setup+0x43a>
		return false;
   84c6c:	2300      	movs	r3, #0
   84c6e:	e7ac      	b.n	84bca <udc_process_setup+0x43a>
	return false;
   84c70:	2300      	movs	r3, #0
   84c72:	e7aa      	b.n	84bca <udc_process_setup+0x43a>
   84c74:	20002dec 	.word	0x20002dec
   84c78:	0008653d 	.word	0x0008653d
   84c7c:	20002278 	.word	0x20002278
   84c80:	000864dd 	.word	0x000864dd
   84c84:	0008459d 	.word	0x0008459d
   84c88:	20002276 	.word	0x20002276
   84c8c:	00086475 	.word	0x00086475
   84c90:	00084709 	.word	0x00084709
   84c94:	00086b2d 	.word	0x00086b2d
   84c98:	00086b51 	.word	0x00086b51
   84c9c:	00086b75 	.word	0x00086b75
   84ca0:	00086b8d 	.word	0x00086b8d
   84ca4:	000864ad 	.word	0x000864ad
   84ca8:	200001d4 	.word	0x200001d4
   84cac:	2000227b 	.word	0x2000227b
   84cb0:	2000227c 	.word	0x2000227c
   84cb4:	00084695 	.word	0x00084695
   84cb8:	00084629 	.word	0x00084629
   84cbc:	00086639 	.word	0x00086639
   84cc0:	00086ac9 	.word	0x00086ac9
   84cc4:	00086571 	.word	0x00086571
	if (!udc_update_iface_desc(iface_num, 0)) {
   84cc8:	2100      	movs	r1, #0
   84cca:	4620      	mov	r0, r4
   84ccc:	4b23      	ldr	r3, [pc, #140]	; (84d5c <udc_process_setup+0x5cc>)
   84cce:	4798      	blx	r3
   84cd0:	2800      	cmp	r0, #0
   84cd2:	f43f ad77 	beq.w	847c4 <udc_process_setup+0x34>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84cd6:	686b      	ldr	r3, [r5, #4]
   84cd8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84cdc:	68eb      	ldr	r3, [r5, #12]
   84cde:	4798      	blx	r3
   84ce0:	4601      	mov	r1, r0
   84ce2:	4620      	mov	r0, r4
   84ce4:	4b1d      	ldr	r3, [pc, #116]	; (84d5c <udc_process_setup+0x5cc>)
   84ce6:	4798      	blx	r3
   84ce8:	2800      	cmp	r0, #0
   84cea:	f43f ad6b 	beq.w	847c4 <udc_process_setup+0x34>
	return udi_api->setup();
   84cee:	68ab      	ldr	r3, [r5, #8]
   84cf0:	4798      	blx	r3
		if (udc_req_iface()) {
   84cf2:	4603      	mov	r3, r0
   84cf4:	2800      	cmp	r0, #0
   84cf6:	f47f ad6d 	bne.w	847d4 <udc_process_setup+0x44>
   84cfa:	e563      	b.n	847c4 <udc_process_setup+0x34>
	if (0 == udc_num_configuration) {
   84cfc:	4b18      	ldr	r3, [pc, #96]	; (84d60 <udc_process_setup+0x5d0>)
   84cfe:	781b      	ldrb	r3, [r3, #0]
   84d00:	b30b      	cbz	r3, 84d46 <udc_process_setup+0x5b6>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84d02:	4b18      	ldr	r3, [pc, #96]	; (84d64 <udc_process_setup+0x5d4>)
   84d04:	681a      	ldr	r2, [r3, #0]
   84d06:	6813      	ldr	r3, [r2, #0]
   84d08:	791b      	ldrb	r3, [r3, #4]
   84d0a:	b1f3      	cbz	r3, 84d4a <udc_process_setup+0x5ba>
   84d0c:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84d0e:	4e13      	ldr	r6, [pc, #76]	; (84d5c <udc_process_setup+0x5cc>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84d10:	4f14      	ldr	r7, [pc, #80]	; (84d64 <udc_process_setup+0x5d4>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84d12:	6853      	ldr	r3, [r2, #4]
   84d14:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84d18:	68eb      	ldr	r3, [r5, #12]
   84d1a:	4798      	blx	r3
   84d1c:	4601      	mov	r1, r0
   84d1e:	4620      	mov	r0, r4
   84d20:	47b0      	blx	r6
   84d22:	4603      	mov	r3, r0
   84d24:	2800      	cmp	r0, #0
   84d26:	f43f ad55 	beq.w	847d4 <udc_process_setup+0x44>
		if (udi_api->setup()) {
   84d2a:	68ab      	ldr	r3, [r5, #8]
   84d2c:	4798      	blx	r3
   84d2e:	4603      	mov	r3, r0
   84d30:	2800      	cmp	r0, #0
   84d32:	f47f ad4f 	bne.w	847d4 <udc_process_setup+0x44>
			iface_num++) {
   84d36:	3401      	adds	r4, #1
   84d38:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84d3a:	683a      	ldr	r2, [r7, #0]
   84d3c:	6811      	ldr	r1, [r2, #0]
   84d3e:	7909      	ldrb	r1, [r1, #4]
   84d40:	42a1      	cmp	r1, r4
   84d42:	d8e6      	bhi.n	84d12 <udc_process_setup+0x582>
   84d44:	e546      	b.n	847d4 <udc_process_setup+0x44>
		return false; // The device is not is configured state yet
   84d46:	2300      	movs	r3, #0
   84d48:	e544      	b.n	847d4 <udc_process_setup+0x44>
	return false;
   84d4a:	2300      	movs	r3, #0
   84d4c:	e542      	b.n	847d4 <udc_process_setup+0x44>
			return false; // Error from USB host
   84d4e:	2300      	movs	r3, #0
   84d50:	e540      	b.n	847d4 <udc_process_setup+0x44>
	return false;
   84d52:	2300      	movs	r3, #0
   84d54:	e53e      	b.n	847d4 <udc_process_setup+0x44>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84d56:	2412      	movs	r4, #18
		str = udc_string_product_name;
   84d58:	4a03      	ldr	r2, [pc, #12]	; (84d68 <udc_process_setup+0x5d8>)
   84d5a:	e602      	b.n	84962 <udc_process_setup+0x1d2>
   84d5c:	000845b5 	.word	0x000845b5
   84d60:	2000227b 	.word	0x2000227b
   84d64:	2000227c 	.word	0x2000227c
   84d68:	2000062c 	.word	0x2000062c

00084d6c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84d6c:	4b0b      	ldr	r3, [pc, #44]	; (84d9c <cpu_irq_enter_critical+0x30>)
   84d6e:	681b      	ldr	r3, [r3, #0]
   84d70:	b92b      	cbnz	r3, 84d7e <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d72:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   84d76:	b13b      	cbz	r3, 84d88 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84d78:	2200      	movs	r2, #0
   84d7a:	4b09      	ldr	r3, [pc, #36]	; (84da0 <cpu_irq_enter_critical+0x34>)
   84d7c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84d7e:	4a07      	ldr	r2, [pc, #28]	; (84d9c <cpu_irq_enter_critical+0x30>)
   84d80:	6813      	ldr	r3, [r2, #0]
   84d82:	3301      	adds	r3, #1
   84d84:	6013      	str	r3, [r2, #0]
   84d86:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   84d88:	b672      	cpsid	i
   84d8a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84d8e:	2200      	movs	r2, #0
   84d90:	4b04      	ldr	r3, [pc, #16]	; (84da4 <cpu_irq_enter_critical+0x38>)
   84d92:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   84d94:	2201      	movs	r2, #1
   84d96:	4b02      	ldr	r3, [pc, #8]	; (84da0 <cpu_irq_enter_critical+0x34>)
   84d98:	701a      	strb	r2, [r3, #0]
   84d9a:	e7f0      	b.n	84d7e <cpu_irq_enter_critical+0x12>
   84d9c:	20002284 	.word	0x20002284
   84da0:	20002288 	.word	0x20002288
   84da4:	200006ea 	.word	0x200006ea

00084da8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84da8:	4b07      	ldr	r3, [pc, #28]	; (84dc8 <cpu_irq_leave_critical+0x20>)
   84daa:	681a      	ldr	r2, [r3, #0]
   84dac:	3a01      	subs	r2, #1
   84dae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84db0:	681b      	ldr	r3, [r3, #0]
   84db2:	b943      	cbnz	r3, 84dc6 <cpu_irq_leave_critical+0x1e>
   84db4:	4b05      	ldr	r3, [pc, #20]	; (84dcc <cpu_irq_leave_critical+0x24>)
   84db6:	781b      	ldrb	r3, [r3, #0]
   84db8:	b12b      	cbz	r3, 84dc6 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84dba:	2201      	movs	r2, #1
   84dbc:	4b04      	ldr	r3, [pc, #16]	; (84dd0 <cpu_irq_leave_critical+0x28>)
   84dbe:	701a      	strb	r2, [r3, #0]
   84dc0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84dc4:	b662      	cpsie	i
   84dc6:	4770      	bx	lr
   84dc8:	20002284 	.word	0x20002284
   84dcc:	20002288 	.word	0x20002288
   84dd0:	200006ea 	.word	0x200006ea

00084dd4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   84dd8:	b980      	cbnz	r0, 84dfc <_read+0x28>
   84dda:	460c      	mov	r4, r1
   84ddc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   84dde:	2a00      	cmp	r2, #0
   84de0:	dd0f      	ble.n	84e02 <_read+0x2e>
   84de2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   84de4:	4e08      	ldr	r6, [pc, #32]	; (84e08 <_read+0x34>)
   84de6:	4d09      	ldr	r5, [pc, #36]	; (84e0c <_read+0x38>)
   84de8:	6830      	ldr	r0, [r6, #0]
   84dea:	4621      	mov	r1, r4
   84dec:	682b      	ldr	r3, [r5, #0]
   84dee:	4798      	blx	r3
		ptr++;
   84df0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   84df2:	42bc      	cmp	r4, r7
   84df4:	d1f8      	bne.n	84de8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   84df6:	4640      	mov	r0, r8
   84df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84dfc:	f04f 38ff 	mov.w	r8, #4294967295
   84e00:	e7f9      	b.n	84df6 <_read+0x22>
	for (; len > 0; --len) {
   84e02:	4680      	mov	r8, r0
   84e04:	e7f7      	b.n	84df6 <_read+0x22>
   84e06:	bf00      	nop
   84e08:	20002de8 	.word	0x20002de8
   84e0c:	20002de0 	.word	0x20002de0

00084e10 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84e10:	3801      	subs	r0, #1
   84e12:	2802      	cmp	r0, #2
   84e14:	d815      	bhi.n	84e42 <_write+0x32>
{
   84e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e1a:	460e      	mov	r6, r1
   84e1c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   84e1e:	b19a      	cbz	r2, 84e48 <_write+0x38>
   84e20:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84e22:	f8df 8038 	ldr.w	r8, [pc, #56]	; 84e5c <_write+0x4c>
   84e26:	4f0c      	ldr	r7, [pc, #48]	; (84e58 <_write+0x48>)
   84e28:	f8d8 0000 	ldr.w	r0, [r8]
   84e2c:	f815 1b01 	ldrb.w	r1, [r5], #1
   84e30:	683b      	ldr	r3, [r7, #0]
   84e32:	4798      	blx	r3
   84e34:	2800      	cmp	r0, #0
   84e36:	db0a      	blt.n	84e4e <_write+0x3e>
   84e38:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   84e3a:	3c01      	subs	r4, #1
   84e3c:	d1f4      	bne.n	84e28 <_write+0x18>
   84e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84e42:	f04f 30ff 	mov.w	r0, #4294967295
   84e46:	4770      	bx	lr
	for (; len != 0; --len) {
   84e48:	4610      	mov	r0, r2
   84e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   84e4e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   84e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e56:	bf00      	nop
   84e58:	20002de4 	.word	0x20002de4
   84e5c:	20002de8 	.word	0x20002de8

00084e60 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   84e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84e62:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84e66:	2006      	movs	r0, #6
   84e68:	4c17      	ldr	r4, [pc, #92]	; (84ec8 <iopins_normal+0x68>)
   84e6a:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84e6c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84e70:	2007      	movs	r0, #7
   84e72:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   84e74:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84e78:	201d      	movs	r0, #29
   84e7a:	47a0      	blx	r4
	board_power(0);
   84e7c:	201d      	movs	r0, #29
   84e7e:	4b13      	ldr	r3, [pc, #76]	; (84ecc <iopins_normal+0x6c>)
   84e80:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   84e82:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84e86:	2008      	movs	r0, #8
   84e88:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   84e8a:	2008      	movs	r0, #8
   84e8c:	4e10      	ldr	r6, [pc, #64]	; (84ed0 <iopins_normal+0x70>)
   84e8e:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   84e90:	4f10      	ldr	r7, [pc, #64]	; (84ed4 <iopins_normal+0x74>)
   84e92:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   84e96:	21ff      	movs	r1, #255	; 0xff
   84e98:	4638      	mov	r0, r7
   84e9a:	4d0f      	ldr	r5, [pc, #60]	; (84ed8 <iopins_normal+0x78>)
   84e9c:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   84e9e:	21ff      	movs	r1, #255	; 0xff
   84ea0:	4638      	mov	r0, r7
   84ea2:	4b0e      	ldr	r3, [pc, #56]	; (84edc <iopins_normal+0x7c>)
   84ea4:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   84ea6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84eaa:	2035      	movs	r0, #53	; 0x35
   84eac:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   84eae:	2035      	movs	r0, #53	; 0x35
   84eb0:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   84eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   84eb6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   84eba:	4809      	ldr	r0, [pc, #36]	; (84ee0 <iopins_normal+0x80>)
   84ebc:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   84ebe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84ec2:	201b      	movs	r0, #27
   84ec4:	47a0      	blx	r4
   84ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84ec8:	00085081 	.word	0x00085081
   84ecc:	00085065 	.word	0x00085065
   84ed0:	0008504b 	.word	0x0008504b
   84ed4:	400e0e00 	.word	0x400e0e00
   84ed8:	00085151 	.word	0x00085151
   84edc:	0008501d 	.word	0x0008501d
   84ee0:	400e0c00 	.word	0x400e0c00

00084ee4 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   84ee4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   84ee6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84eea:	4b05      	ldr	r3, [pc, #20]	; (84f00 <board_init+0x1c>)
   84eec:	605a      	str	r2, [r3, #4]
   84eee:	200a      	movs	r0, #10
   84ef0:	4c04      	ldr	r4, [pc, #16]	; (84f04 <board_init+0x20>)
   84ef2:	47a0      	blx	r4
   84ef4:	200b      	movs	r0, #11
   84ef6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   84ef8:	4b03      	ldr	r3, [pc, #12]	; (84f08 <board_init+0x24>)
   84efa:	4798      	blx	r3
   84efc:	bd10      	pop	{r4, pc}
   84efe:	bf00      	nop
   84f00:	400e1250 	.word	0x400e1250
   84f04:	000853d5 	.word	0x000853d5
   84f08:	00084e61 	.word	0x00084e61

00084f0c <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   84f0c:	b510      	push	{r4, lr}
   84f0e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84f10:	2806      	cmp	r0, #6
   84f12:	d002      	beq.n	84f1a <LED_Off+0xe>
   84f14:	2c07      	cmp	r4, #7
   84f16:	d004      	beq.n	84f22 <LED_Off+0x16>
   84f18:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   84f1a:	2006      	movs	r0, #6
   84f1c:	4b03      	ldr	r3, [pc, #12]	; (84f2c <LED_Off+0x20>)
   84f1e:	4798      	blx	r3
   84f20:	e7f8      	b.n	84f14 <LED_Off+0x8>
   84f22:	2007      	movs	r0, #7
   84f24:	4b01      	ldr	r3, [pc, #4]	; (84f2c <LED_Off+0x20>)
   84f26:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   84f28:	e7f6      	b.n	84f18 <LED_Off+0xc>
   84f2a:	bf00      	nop
   84f2c:	00085065 	.word	0x00085065

00084f30 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   84f30:	b510      	push	{r4, lr}
   84f32:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84f34:	2806      	cmp	r0, #6
   84f36:	d002      	beq.n	84f3e <LED_On+0xe>
   84f38:	2c07      	cmp	r4, #7
   84f3a:	d004      	beq.n	84f46 <LED_On+0x16>
   84f3c:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   84f3e:	2006      	movs	r0, #6
   84f40:	4b03      	ldr	r3, [pc, #12]	; (84f50 <LED_On+0x20>)
   84f42:	4798      	blx	r3
   84f44:	e7f8      	b.n	84f38 <LED_On+0x8>
   84f46:	2007      	movs	r0, #7
   84f48:	4b01      	ldr	r3, [pc, #4]	; (84f50 <LED_On+0x20>)
   84f4a:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   84f4c:	e7f6      	b.n	84f3c <LED_On+0xc>
   84f4e:	bf00      	nop
   84f50:	0008504b 	.word	0x0008504b

00084f54 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   84f54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84f58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84f5c:	670a      	str	r2, [r1, #112]	; 0x70
   84f5e:	4770      	bx	lr

00084f60 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   84f60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84f64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84f68:	674a      	str	r2, [r1, #116]	; 0x74
   84f6a:	4770      	bx	lr

00084f6c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   84f6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84f70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84f74:	678a      	str	r2, [r1, #120]	; 0x78
   84f76:	4770      	bx	lr

00084f78 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   84f78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84f7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84f80:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   84f84:	4770      	bx	lr

00084f86 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   84f86:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84f88:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   84f8c:	d016      	beq.n	84fbc <pio_set_peripheral+0x36>
   84f8e:	d80b      	bhi.n	84fa8 <pio_set_peripheral+0x22>
   84f90:	b149      	cbz	r1, 84fa6 <pio_set_peripheral+0x20>
   84f92:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   84f96:	d105      	bne.n	84fa4 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   84f98:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84f9a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   84f9c:	400b      	ands	r3, r1
   84f9e:	ea23 0302 	bic.w	r3, r3, r2
   84fa2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   84fa4:	6042      	str	r2, [r0, #4]
   84fa6:	4770      	bx	lr
	switch (ul_type) {
   84fa8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   84fac:	d0fb      	beq.n	84fa6 <pio_set_peripheral+0x20>
   84fae:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   84fb2:	d0f8      	beq.n	84fa6 <pio_set_peripheral+0x20>
   84fb4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   84fb8:	d1f4      	bne.n	84fa4 <pio_set_peripheral+0x1e>
   84fba:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   84fbc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   84fbe:	4313      	orrs	r3, r2
   84fc0:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   84fc2:	e7ef      	b.n	84fa4 <pio_set_peripheral+0x1e>

00084fc4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   84fc4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   84fc6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   84fca:	bf14      	ite	ne
   84fcc:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84fce:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   84fd0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   84fd4:	bf14      	ite	ne
   84fd6:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   84fd8:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   84fda:	f012 0f02 	tst.w	r2, #2
   84fde:	d107      	bne.n	84ff0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   84fe0:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   84fe4:	bf18      	it	ne
   84fe6:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   84fea:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   84fec:	6001      	str	r1, [r0, #0]
   84fee:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   84ff0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   84ff4:	e7f9      	b.n	84fea <pio_set_input+0x26>

00084ff6 <pio_set_output>:
{
   84ff6:	b410      	push	{r4}
   84ff8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   84ffa:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   84ffc:	b944      	cbnz	r4, 85010 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   84ffe:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   85000:	b143      	cbz	r3, 85014 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   85002:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   85004:	b942      	cbnz	r2, 85018 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   85006:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   85008:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8500a:	6001      	str	r1, [r0, #0]
}
   8500c:	bc10      	pop	{r4}
   8500e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   85010:	6641      	str	r1, [r0, #100]	; 0x64
   85012:	e7f5      	b.n	85000 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   85014:	6541      	str	r1, [r0, #84]	; 0x54
   85016:	e7f5      	b.n	85004 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   85018:	6301      	str	r1, [r0, #48]	; 0x30
   8501a:	e7f5      	b.n	85008 <pio_set_output+0x12>

0008501c <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   8501c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   85020:	4770      	bx	lr

00085022 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   85022:	6381      	str	r1, [r0, #56]	; 0x38
   85024:	4770      	bx	lr

00085026 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   85026:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   85028:	4770      	bx	lr

0008502a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8502a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8502c:	4770      	bx	lr

0008502e <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8502e:	0943      	lsrs	r3, r0, #5
   85030:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85034:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85038:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8503c:	f000 001f 	and.w	r0, r0, #31
   85040:	fa23 f000 	lsr.w	r0, r3, r0
}
   85044:	f000 0001 	and.w	r0, r0, #1
   85048:	4770      	bx	lr

0008504a <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8504a:	0943      	lsrs	r3, r0, #5
   8504c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85050:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85054:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85056:	f000 001f 	and.w	r0, r0, #31
   8505a:	2201      	movs	r2, #1
   8505c:	fa02 f000 	lsl.w	r0, r2, r0
   85060:	6318      	str	r0, [r3, #48]	; 0x30
   85062:	4770      	bx	lr

00085064 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85064:	0943      	lsrs	r3, r0, #5
   85066:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8506a:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8506e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85070:	f000 001f 	and.w	r0, r0, #31
   85074:	2201      	movs	r2, #1
   85076:	fa02 f000 	lsl.w	r0, r2, r0
   8507a:	6358      	str	r0, [r3, #52]	; 0x34
   8507c:	4770      	bx	lr
	...

00085080 <pio_configure_pin>:
{
   85080:	b570      	push	{r4, r5, r6, lr}
   85082:	b082      	sub	sp, #8
   85084:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85086:	0943      	lsrs	r3, r0, #5
   85088:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8508c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85090:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   85092:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   85096:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8509a:	d031      	beq.n	85100 <pio_configure_pin+0x80>
   8509c:	d816      	bhi.n	850cc <pio_configure_pin+0x4c>
   8509e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   850a2:	d01b      	beq.n	850dc <pio_configure_pin+0x5c>
   850a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   850a8:	d116      	bne.n	850d8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   850aa:	f000 001f 	and.w	r0, r0, #31
   850ae:	2601      	movs	r6, #1
   850b0:	4086      	lsls	r6, r0
   850b2:	4632      	mov	r2, r6
   850b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   850b8:	4620      	mov	r0, r4
   850ba:	4b22      	ldr	r3, [pc, #136]	; (85144 <pio_configure_pin+0xc4>)
   850bc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   850be:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   850c2:	bf14      	ite	ne
   850c4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   850c6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   850c8:	2001      	movs	r0, #1
   850ca:	e017      	b.n	850fc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   850cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   850d0:	d021      	beq.n	85116 <pio_configure_pin+0x96>
   850d2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   850d6:	d01e      	beq.n	85116 <pio_configure_pin+0x96>
		return 0;
   850d8:	2000      	movs	r0, #0
   850da:	e00f      	b.n	850fc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   850dc:	f000 001f 	and.w	r0, r0, #31
   850e0:	2601      	movs	r6, #1
   850e2:	4086      	lsls	r6, r0
   850e4:	4632      	mov	r2, r6
   850e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   850ea:	4620      	mov	r0, r4
   850ec:	4b15      	ldr	r3, [pc, #84]	; (85144 <pio_configure_pin+0xc4>)
   850ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
   850f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   850f4:	bf14      	ite	ne
   850f6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   850f8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   850fa:	2001      	movs	r0, #1
}
   850fc:	b002      	add	sp, #8
   850fe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   85100:	f000 011f 	and.w	r1, r0, #31
   85104:	2601      	movs	r6, #1
   85106:	462a      	mov	r2, r5
   85108:	fa06 f101 	lsl.w	r1, r6, r1
   8510c:	4620      	mov	r0, r4
   8510e:	4b0e      	ldr	r3, [pc, #56]	; (85148 <pio_configure_pin+0xc8>)
   85110:	4798      	blx	r3
	return 1;
   85112:	4630      	mov	r0, r6
		break;
   85114:	e7f2      	b.n	850fc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85116:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8511a:	f000 011f 	and.w	r1, r0, #31
   8511e:	2601      	movs	r6, #1
   85120:	ea05 0306 	and.w	r3, r5, r6
   85124:	9300      	str	r3, [sp, #0]
   85126:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8512a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8512e:	bf14      	ite	ne
   85130:	2200      	movne	r2, #0
   85132:	2201      	moveq	r2, #1
   85134:	fa06 f101 	lsl.w	r1, r6, r1
   85138:	4620      	mov	r0, r4
   8513a:	4c04      	ldr	r4, [pc, #16]	; (8514c <pio_configure_pin+0xcc>)
   8513c:	47a0      	blx	r4
	return 1;
   8513e:	4630      	mov	r0, r6
		break;
   85140:	e7dc      	b.n	850fc <pio_configure_pin+0x7c>
   85142:	bf00      	nop
   85144:	00084f87 	.word	0x00084f87
   85148:	00084fc5 	.word	0x00084fc5
   8514c:	00084ff7 	.word	0x00084ff7

00085150 <pio_configure_pin_group>:
{
   85150:	b570      	push	{r4, r5, r6, lr}
   85152:	b082      	sub	sp, #8
   85154:	4605      	mov	r5, r0
   85156:	460e      	mov	r6, r1
   85158:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8515a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8515e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85162:	d027      	beq.n	851b4 <pio_configure_pin_group+0x64>
   85164:	d811      	bhi.n	8518a <pio_configure_pin_group+0x3a>
   85166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8516a:	d016      	beq.n	8519a <pio_configure_pin_group+0x4a>
   8516c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85170:	d111      	bne.n	85196 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   85172:	460a      	mov	r2, r1
   85174:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85178:	4b19      	ldr	r3, [pc, #100]	; (851e0 <pio_configure_pin_group+0x90>)
   8517a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8517c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   85180:	bf14      	ite	ne
   85182:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85184:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   85186:	2001      	movs	r0, #1
   85188:	e012      	b.n	851b0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8518a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8518e:	d015      	beq.n	851bc <pio_configure_pin_group+0x6c>
   85190:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85194:	d012      	beq.n	851bc <pio_configure_pin_group+0x6c>
		return 0;
   85196:	2000      	movs	r0, #0
   85198:	e00a      	b.n	851b0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8519a:	460a      	mov	r2, r1
   8519c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   851a0:	4b0f      	ldr	r3, [pc, #60]	; (851e0 <pio_configure_pin_group+0x90>)
   851a2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   851a4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   851a8:	bf14      	ite	ne
   851aa:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   851ac:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   851ae:	2001      	movs	r0, #1
}
   851b0:	b002      	add	sp, #8
   851b2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   851b4:	4b0b      	ldr	r3, [pc, #44]	; (851e4 <pio_configure_pin_group+0x94>)
   851b6:	4798      	blx	r3
	return 1;
   851b8:	2001      	movs	r0, #1
		break;
   851ba:	e7f9      	b.n	851b0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   851bc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   851c0:	f004 0301 	and.w	r3, r4, #1
   851c4:	9300      	str	r3, [sp, #0]
   851c6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   851ca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   851ce:	bf14      	ite	ne
   851d0:	2200      	movne	r2, #0
   851d2:	2201      	moveq	r2, #1
   851d4:	4631      	mov	r1, r6
   851d6:	4628      	mov	r0, r5
   851d8:	4c03      	ldr	r4, [pc, #12]	; (851e8 <pio_configure_pin_group+0x98>)
   851da:	47a0      	blx	r4
	return 1;
   851dc:	2001      	movs	r0, #1
		break;
   851de:	e7e7      	b.n	851b0 <pio_configure_pin_group+0x60>
   851e0:	00084f87 	.word	0x00084f87
   851e4:	00084fc5 	.word	0x00084fc5
   851e8:	00084ff7 	.word	0x00084ff7

000851ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   851ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   851f0:	4604      	mov	r4, r0
   851f2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   851f4:	4b0e      	ldr	r3, [pc, #56]	; (85230 <pio_handler_process+0x44>)
   851f6:	4798      	blx	r3
   851f8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   851fa:	4620      	mov	r0, r4
   851fc:	4b0d      	ldr	r3, [pc, #52]	; (85234 <pio_handler_process+0x48>)
   851fe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   85200:	4005      	ands	r5, r0
   85202:	d013      	beq.n	8522c <pio_handler_process+0x40>
   85204:	4c0c      	ldr	r4, [pc, #48]	; (85238 <pio_handler_process+0x4c>)
   85206:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8520a:	e003      	b.n	85214 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8520c:	42b4      	cmp	r4, r6
   8520e:	d00d      	beq.n	8522c <pio_handler_process+0x40>
   85210:	3410      	adds	r4, #16
		while (status != 0) {
   85212:	b15d      	cbz	r5, 8522c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   85214:	6820      	ldr	r0, [r4, #0]
   85216:	4540      	cmp	r0, r8
   85218:	d1f8      	bne.n	8520c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8521a:	6861      	ldr	r1, [r4, #4]
   8521c:	4229      	tst	r1, r5
   8521e:	d0f5      	beq.n	8520c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   85220:	68e3      	ldr	r3, [r4, #12]
   85222:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   85224:	6863      	ldr	r3, [r4, #4]
   85226:	ea25 0503 	bic.w	r5, r5, r3
   8522a:	e7ef      	b.n	8520c <pio_handler_process+0x20>
   8522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85230:	00085027 	.word	0x00085027
   85234:	0008502b 	.word	0x0008502b
   85238:	2000228c 	.word	0x2000228c

0008523c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8523c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8523e:	210a      	movs	r1, #10
   85240:	4801      	ldr	r0, [pc, #4]	; (85248 <PIOA_Handler+0xc>)
   85242:	4b02      	ldr	r3, [pc, #8]	; (8524c <PIOA_Handler+0x10>)
   85244:	4798      	blx	r3
   85246:	bd08      	pop	{r3, pc}
   85248:	400e0c00 	.word	0x400e0c00
   8524c:	000851ed 	.word	0x000851ed

00085250 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   85250:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   85252:	210b      	movs	r1, #11
   85254:	4801      	ldr	r0, [pc, #4]	; (8525c <PIOB_Handler+0xc>)
   85256:	4b02      	ldr	r3, [pc, #8]	; (85260 <PIOB_Handler+0x10>)
   85258:	4798      	blx	r3
   8525a:	bd08      	pop	{r3, pc}
   8525c:	400e0e00 	.word	0x400e0e00
   85260:	000851ed 	.word	0x000851ed

00085264 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85264:	4a17      	ldr	r2, [pc, #92]	; (852c4 <pmc_switch_mck_to_mainck+0x60>)
   85266:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85268:	f023 0303 	bic.w	r3, r3, #3
   8526c:	f043 0301 	orr.w	r3, r3, #1
   85270:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85272:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85274:	f013 0f08 	tst.w	r3, #8
   85278:	d10a      	bne.n	85290 <pmc_switch_mck_to_mainck+0x2c>
   8527a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8527e:	4911      	ldr	r1, [pc, #68]	; (852c4 <pmc_switch_mck_to_mainck+0x60>)
   85280:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85282:	f012 0f08 	tst.w	r2, #8
   85286:	d103      	bne.n	85290 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85288:	3b01      	subs	r3, #1
   8528a:	d1f9      	bne.n	85280 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   8528c:	2001      	movs	r0, #1
   8528e:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   85290:	4a0c      	ldr	r2, [pc, #48]	; (852c4 <pmc_switch_mck_to_mainck+0x60>)
   85292:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85298:	4318      	orrs	r0, r3
   8529a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8529c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8529e:	f013 0f08 	tst.w	r3, #8
   852a2:	d10a      	bne.n	852ba <pmc_switch_mck_to_mainck+0x56>
   852a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   852a8:	4906      	ldr	r1, [pc, #24]	; (852c4 <pmc_switch_mck_to_mainck+0x60>)
   852aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   852ac:	f012 0f08 	tst.w	r2, #8
   852b0:	d105      	bne.n	852be <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   852b2:	3b01      	subs	r3, #1
   852b4:	d1f9      	bne.n	852aa <pmc_switch_mck_to_mainck+0x46>
			return 1;
   852b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   852b8:	4770      	bx	lr
	return 0;
   852ba:	2000      	movs	r0, #0
   852bc:	4770      	bx	lr
   852be:	2000      	movs	r0, #0
   852c0:	4770      	bx	lr
   852c2:	bf00      	nop
   852c4:	400e0400 	.word	0x400e0400

000852c8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   852c8:	4a17      	ldr	r2, [pc, #92]	; (85328 <pmc_switch_mck_to_pllack+0x60>)
   852ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   852cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   852d0:	4318      	orrs	r0, r3
   852d2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   852d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   852d6:	f013 0f08 	tst.w	r3, #8
   852da:	d10a      	bne.n	852f2 <pmc_switch_mck_to_pllack+0x2a>
   852dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   852e0:	4911      	ldr	r1, [pc, #68]	; (85328 <pmc_switch_mck_to_pllack+0x60>)
   852e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   852e4:	f012 0f08 	tst.w	r2, #8
   852e8:	d103      	bne.n	852f2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   852ea:	3b01      	subs	r3, #1
   852ec:	d1f9      	bne.n	852e2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   852ee:	2001      	movs	r0, #1
   852f0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   852f2:	4a0d      	ldr	r2, [pc, #52]	; (85328 <pmc_switch_mck_to_pllack+0x60>)
   852f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   852f6:	f023 0303 	bic.w	r3, r3, #3
   852fa:	f043 0302 	orr.w	r3, r3, #2
   852fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85300:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85302:	f013 0f08 	tst.w	r3, #8
   85306:	d10a      	bne.n	8531e <pmc_switch_mck_to_pllack+0x56>
   85308:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8530c:	4906      	ldr	r1, [pc, #24]	; (85328 <pmc_switch_mck_to_pllack+0x60>)
   8530e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85310:	f012 0f08 	tst.w	r2, #8
   85314:	d105      	bne.n	85322 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85316:	3b01      	subs	r3, #1
   85318:	d1f9      	bne.n	8530e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8531a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8531c:	4770      	bx	lr
	return 0;
   8531e:	2000      	movs	r0, #0
   85320:	4770      	bx	lr
   85322:	2000      	movs	r0, #0
   85324:	4770      	bx	lr
   85326:	bf00      	nop
   85328:	400e0400 	.word	0x400e0400

0008532c <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   8532c:	4a08      	ldr	r2, [pc, #32]	; (85350 <pmc_osc_enable_main_xtal+0x24>)
   8532e:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   85330:	f023 0303 	bic.w	r3, r3, #3
   85334:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85338:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8533c:	0200      	lsls	r0, r0, #8
   8533e:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   85340:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   85342:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   85344:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85346:	f013 0f01 	tst.w	r3, #1
   8534a:	d0fb      	beq.n	85344 <pmc_osc_enable_main_xtal+0x18>
}
   8534c:	4770      	bx	lr
   8534e:	bf00      	nop
   85350:	400e0400 	.word	0x400e0400

00085354 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   85354:	4b02      	ldr	r3, [pc, #8]	; (85360 <pmc_osc_is_ready_main_xtal+0xc>)
   85356:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85358:	f000 0001 	and.w	r0, r0, #1
   8535c:	4770      	bx	lr
   8535e:	bf00      	nop
   85360:	400e0400 	.word	0x400e0400

00085364 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   85364:	4b02      	ldr	r3, [pc, #8]	; (85370 <pmc_osc_is_ready_mainck+0xc>)
   85366:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85368:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8536c:	4770      	bx	lr
   8536e:	bf00      	nop
   85370:	400e0400 	.word	0x400e0400

00085374 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   85374:	4b06      	ldr	r3, [pc, #24]	; (85390 <pmc_mainck_osc_select+0x1c>)
   85376:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   85378:	b930      	cbnz	r0, 85388 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   8537a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8537e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85382:	4a03      	ldr	r2, [pc, #12]	; (85390 <pmc_mainck_osc_select+0x1c>)
   85384:	6213      	str	r3, [r2, #32]
   85386:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   85388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8538c:	e7f7      	b.n	8537e <pmc_mainck_osc_select+0xa>
   8538e:	bf00      	nop
   85390:	400e0400 	.word	0x400e0400

00085394 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   85394:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   85398:	4b01      	ldr	r3, [pc, #4]	; (853a0 <pmc_disable_pllack+0xc>)
   8539a:	629a      	str	r2, [r3, #40]	; 0x28
   8539c:	4770      	bx	lr
   8539e:	bf00      	nop
   853a0:	400e0400 	.word	0x400e0400

000853a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   853a4:	4b02      	ldr	r3, [pc, #8]	; (853b0 <pmc_is_locked_pllack+0xc>)
   853a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   853a8:	f000 0002 	and.w	r0, r0, #2
   853ac:	4770      	bx	lr
   853ae:	bf00      	nop
   853b0:	400e0400 	.word	0x400e0400

000853b4 <pmc_disable_upll_clock>:
/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   853b4:	4a02      	ldr	r2, [pc, #8]	; (853c0 <pmc_disable_upll_clock+0xc>)
   853b6:	69d3      	ldr	r3, [r2, #28]
   853b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   853bc:	61d3      	str	r3, [r2, #28]
   853be:	4770      	bx	lr
   853c0:	400e0400 	.word	0x400e0400

000853c4 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   853c4:	4b02      	ldr	r3, [pc, #8]	; (853d0 <pmc_is_locked_upll+0xc>)
   853c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   853c8:	f000 0040 	and.w	r0, r0, #64	; 0x40
   853cc:	4770      	bx	lr
   853ce:	bf00      	nop
   853d0:	400e0400 	.word	0x400e0400

000853d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   853d4:	281d      	cmp	r0, #29
   853d6:	d80e      	bhi.n	853f6 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   853d8:	281f      	cmp	r0, #31
   853da:	d80e      	bhi.n	853fa <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   853dc:	4b09      	ldr	r3, [pc, #36]	; (85404 <pmc_enable_periph_clk+0x30>)
   853de:	699a      	ldr	r2, [r3, #24]
   853e0:	2301      	movs	r3, #1
   853e2:	4083      	lsls	r3, r0
   853e4:	4393      	bics	r3, r2
   853e6:	d00a      	beq.n	853fe <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   853e8:	2301      	movs	r3, #1
   853ea:	fa03 f000 	lsl.w	r0, r3, r0
   853ee:	4b05      	ldr	r3, [pc, #20]	; (85404 <pmc_enable_periph_clk+0x30>)
   853f0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   853f2:	2000      	movs	r0, #0
   853f4:	4770      	bx	lr
		return 1;
   853f6:	2001      	movs	r0, #1
   853f8:	4770      	bx	lr
	return 0;
   853fa:	2000      	movs	r0, #0
   853fc:	4770      	bx	lr
   853fe:	2000      	movs	r0, #0
}
   85400:	4770      	bx	lr
   85402:	bf00      	nop
   85404:	400e0400 	.word	0x400e0400

00085408 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85408:	281d      	cmp	r0, #29
   8540a:	d810      	bhi.n	8542e <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   8540c:	281f      	cmp	r0, #31
   8540e:	d810      	bhi.n	85432 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   85410:	4b09      	ldr	r3, [pc, #36]	; (85438 <pmc_disable_periph_clk+0x30>)
   85412:	699a      	ldr	r2, [r3, #24]
   85414:	2301      	movs	r3, #1
   85416:	4083      	lsls	r3, r0
   85418:	4393      	bics	r3, r2
   8541a:	d001      	beq.n	85420 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   8541c:	2000      	movs	r0, #0
}
   8541e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   85420:	2301      	movs	r3, #1
   85422:	fa03 f000 	lsl.w	r0, r3, r0
   85426:	4b04      	ldr	r3, [pc, #16]	; (85438 <pmc_disable_periph_clk+0x30>)
   85428:	6158      	str	r0, [r3, #20]
	return 0;
   8542a:	2000      	movs	r0, #0
   8542c:	4770      	bx	lr
		return 1;
   8542e:	2001      	movs	r0, #1
   85430:	4770      	bx	lr
	return 0;
   85432:	2000      	movs	r0, #0
   85434:	4770      	bx	lr
   85436:	bf00      	nop
   85438:	400e0400 	.word	0x400e0400

0008543c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   8543c:	f44f 7380 	mov.w	r3, #256	; 0x100
   85440:	fa03 f000 	lsl.w	r0, r3, r0
   85444:	4b01      	ldr	r3, [pc, #4]	; (8544c <pmc_enable_pck+0x10>)
   85446:	6018      	str	r0, [r3, #0]
   85448:	4770      	bx	lr
   8544a:	bf00      	nop
   8544c:	400e0400 	.word	0x400e0400

00085450 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   85450:	4b03      	ldr	r3, [pc, #12]	; (85460 <pmc_set_fast_startup_input+0x10>)
   85452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   85454:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   85458:	4310      	orrs	r0, r2
   8545a:	6718      	str	r0, [r3, #112]	; 0x70
   8545c:	4770      	bx	lr
   8545e:	bf00      	nop
   85460:	400e0400 	.word	0x400e0400

00085464 <pmc_enable_waitmode>:
 */
void pmc_enable_waitmode(void)
{
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   85464:	4a0a      	ldr	r2, [pc, #40]	; (85490 <pmc_enable_waitmode+0x2c>)
   85466:	6f13      	ldr	r3, [r2, #112]	; 0x70
   85468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8546c:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   8546e:	4a09      	ldr	r2, [pc, #36]	; (85494 <pmc_enable_waitmode+0x30>)
   85470:	6913      	ldr	r3, [r2, #16]
   85472:	f023 0304 	bic.w	r3, r3, #4
   85476:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   85478:	bf20      	wfe
   8547a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
   8547e:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   85480:	3b01      	subs	r3, #1
   85482:	d1fc      	bne.n	8547e <pmc_enable_waitmode+0x1a>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   85484:	4a02      	ldr	r2, [pc, #8]	; (85490 <pmc_enable_waitmode+0x2c>)
   85486:	6a13      	ldr	r3, [r2, #32]
   85488:	f013 0f08 	tst.w	r3, #8
   8548c:	d0fb      	beq.n	85486 <pmc_enable_waitmode+0x22>

}
   8548e:	4770      	bx	lr
   85490:	400e0400 	.word	0x400e0400
   85494:	e000ed00 	.word	0xe000ed00

00085498 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   85498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (sleep_mode) {
   8549c:	1e43      	subs	r3, r0, #1
   8549e:	2b04      	cmp	r3, #4
   854a0:	f200 8135 	bhi.w	8570e <pmc_sleep+0x276>
   854a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   854a8:	00050005 	.word	0x00050005
   854ac:	001d001d 	.word	0x001d001d
   854b0:	0127      	.short	0x0127
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   854b2:	4a98      	ldr	r2, [pc, #608]	; (85714 <pmc_sleep+0x27c>)
   854b4:	6f13      	ldr	r3, [r2, #112]	; 0x70
   854b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   854ba:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   854bc:	4a96      	ldr	r2, [pc, #600]	; (85718 <pmc_sleep+0x280>)
   854be:	6913      	ldr	r3, [r2, #16]
   854c0:	f023 0304 	bic.w	r3, r3, #4
   854c4:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   854c6:	2201      	movs	r2, #1
   854c8:	4b94      	ldr	r3, [pc, #592]	; (8571c <pmc_sleep+0x284>)
   854ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   854cc:	f3bf 8f5f 	dmb	sy
   854d0:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   854d2:	2802      	cmp	r0, #2
   854d4:	d002      	beq.n	854dc <pmc_sleep+0x44>
  __ASM volatile ("wfe");
   854d6:	bf20      	wfe
   854d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("wfi");
   854dc:	bf30      	wfi
   854de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("cpsid i");
   854e2:	b672      	cpsid	i
  __ASM volatile ("dmb");
   854e4:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   854e8:	2200      	movs	r2, #0
   854ea:	4b8c      	ldr	r3, [pc, #560]	; (8571c <pmc_sleep+0x284>)
   854ec:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   854ee:	2201      	movs	r2, #1
   854f0:	4b8b      	ldr	r3, [pc, #556]	; (85720 <pmc_sleep+0x288>)
   854f2:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
   854f4:	4b87      	ldr	r3, [pc, #540]	; (85714 <pmc_sleep+0x27c>)
   854f6:	f8d3 8020 	ldr.w	r8, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
   854fa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
   854fc:	4a89      	ldr	r2, [pc, #548]	; (85724 <pmc_sleep+0x28c>)
   854fe:	f8d2 a000 	ldr.w	sl, [r2]
	uint32_t fmr1 = EFC1->EEFC_FMR;
   85502:	f502 7200 	add.w	r2, r2, #512	; 0x200
   85506:	f8d2 9000 	ldr.w	r9, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
   8550a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
		*p_pll1_setting = PMC->CKGR_UCKR;
   8550c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   85510:	f448 125c 	orr.w	r2, r8, #3604480	; 0x370000
   85514:	f042 0208 	orr.w	r2, r2, #8
   85518:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   8551a:	f005 0603 	and.w	r6, r5, #3
   8551e:	2e01      	cmp	r6, #1
   85520:	f240 809d 	bls.w	8565e <pmc_sleep+0x1c6>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   85524:	f025 0103 	bic.w	r1, r5, #3
   85528:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
   8552c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8552e:	461a      	mov	r2, r3
   85530:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85532:	f013 0f08 	tst.w	r3, #8
   85536:	d0fb      	beq.n	85530 <pmc_sleep+0x98>
	if (mckr & PMC_MCKR_PRES_Msk) {
   85538:	f011 0f70 	tst.w	r1, #112	; 0x70
   8553c:	d008      	beq.n	85550 <pmc_sleep+0xb8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   8553e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
   85542:	4b74      	ldr	r3, [pc, #464]	; (85714 <pmc_sleep+0x27c>)
   85544:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85546:	461a      	mov	r2, r3
   85548:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8554a:	f013 0f08 	tst.w	r3, #8
   8554e:	d0fb      	beq.n	85548 <pmc_sleep+0xb0>
   85550:	4604      	mov	r4, r0
	pmc_disable_pllack();
   85552:	4b75      	ldr	r3, [pc, #468]	; (85728 <pmc_sleep+0x290>)
   85554:	4798      	blx	r3
	pmc_disable_upll_clock();
   85556:	4b75      	ldr	r3, [pc, #468]	; (8572c <pmc_sleep+0x294>)
   85558:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8555a:	4a6e      	ldr	r2, [pc, #440]	; (85714 <pmc_sleep+0x27c>)
   8555c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8555e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   85562:	d0fb      	beq.n	8555c <pmc_sleep+0xc4>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   85564:	4a6b      	ldr	r2, [pc, #428]	; (85714 <pmc_sleep+0x27c>)
   85566:	6a13      	ldr	r3, [r2, #32]
   85568:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8556c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85570:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85574:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   85576:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85578:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8557c:	d0fb      	beq.n	85576 <pmc_sleep+0xde>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   8557e:	f42a 6370 	bic.w	r3, sl, #3840	; 0xf00
   85582:	4a68      	ldr	r2, [pc, #416]	; (85724 <pmc_sleep+0x28c>)
   85584:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   85586:	f429 6370 	bic.w	r3, r9, #3840	; 0xf00
   8558a:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8558e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   85590:	2c04      	cmp	r4, #4
   85592:	d066      	beq.n	85662 <pmc_sleep+0x1ca>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   85594:	4c61      	ldr	r4, [pc, #388]	; (8571c <pmc_sleep+0x284>)
   85596:	2301      	movs	r3, #1
   85598:	7023      	strb	r3, [r4, #0]
   8559a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8559e:	b662      	cpsie	i

		pmc_enable_waitmode();
   855a0:	4b63      	ldr	r3, [pc, #396]	; (85730 <pmc_sleep+0x298>)
   855a2:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   855a4:	b672      	cpsid	i
   855a6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   855aa:	2300      	movs	r3, #0
   855ac:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   855ae:	f018 0f02 	tst.w	r8, #2
   855b2:	d061      	beq.n	85678 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   855b4:	4a57      	ldr	r2, [pc, #348]	; (85714 <pmc_sleep+0x27c>)
   855b6:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   855b8:	495e      	ldr	r1, [pc, #376]	; (85734 <pmc_sleep+0x29c>)
   855ba:	4019      	ands	r1, r3
   855bc:	4b5e      	ldr	r3, [pc, #376]	; (85738 <pmc_sleep+0x2a0>)
   855be:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   855c0:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   855c2:	6a13      	ldr	r3, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
   855c4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   855c8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   855cc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   855d0:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   855d2:	4b5a      	ldr	r3, [pc, #360]	; (8573c <pmc_sleep+0x2a4>)
   855d4:	403b      	ands	r3, r7
   855d6:	2b00      	cmp	r3, #0
   855d8:	d07f      	beq.n	856da <pmc_sleep+0x242>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   855da:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
   855de:	4b4d      	ldr	r3, [pc, #308]	; (85714 <pmc_sleep+0x27c>)
   855e0:	629f      	str	r7, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   855e2:	2202      	movs	r2, #2
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   855e4:	f41b 3f80 	tst.w	fp, #65536	; 0x10000
   855e8:	d004      	beq.n	855f4 <pmc_sleep+0x15c>
		PMC->CKGR_UCKR = pll1_setting;
   855ea:	4b4a      	ldr	r3, [pc, #296]	; (85714 <pmc_sleep+0x27c>)
   855ec:	f8c3 b01c 	str.w	fp, [r3, #28]
		pll_sr |= PMC_SR_LOCKU;
   855f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   855f4:	2e02      	cmp	r6, #2
   855f6:	d072      	beq.n	856de <pmc_sleep+0x246>
   855f8:	2e03      	cmp	r6, #3
   855fa:	d076      	beq.n	856ea <pmc_sleep+0x252>
	mckr = PMC->PMC_MCKR;
   855fc:	4945      	ldr	r1, [pc, #276]	; (85714 <pmc_sleep+0x27c>)
   855fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   85600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   85604:	f005 0070 	and.w	r0, r5, #112	; 0x70
   85608:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8560a:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8560c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8560e:	f013 0f08 	tst.w	r3, #8
   85612:	d0fb      	beq.n	8560c <pmc_sleep+0x174>
	EFC0->EEFC_FMR = fmr_setting;
   85614:	4b43      	ldr	r3, [pc, #268]	; (85724 <pmc_sleep+0x28c>)
   85616:	f8c3 a000 	str.w	sl, [r3]
	EFC1->EEFC_FMR = fmr_setting1;
   8561a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   8561e:	f8c3 9000 	str.w	r9, [r3]
	PMC->PMC_MCKR = mck_setting;
   85622:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
   85626:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85628:	4619      	mov	r1, r3
   8562a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8562c:	f013 0f08 	tst.w	r3, #8
   85630:	d0fb      	beq.n	8562a <pmc_sleep+0x192>
	while (!(PMC->PMC_SR & pll_sr));
   85632:	4938      	ldr	r1, [pc, #224]	; (85714 <pmc_sleep+0x27c>)
   85634:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   85636:	4213      	tst	r3, r2
   85638:	d0fc      	beq.n	85634 <pmc_sleep+0x19c>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   8563a:	2200      	movs	r2, #0
   8563c:	4b38      	ldr	r3, [pc, #224]	; (85720 <pmc_sleep+0x288>)
   8563e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   85640:	4b3f      	ldr	r3, [pc, #252]	; (85740 <pmc_sleep+0x2a8>)
   85642:	681b      	ldr	r3, [r3, #0]
   85644:	b11b      	cbz	r3, 8564e <pmc_sleep+0x1b6>
			callback_clocks_restored();
   85646:	4798      	blx	r3
			callback_clocks_restored = NULL;
   85648:	2200      	movs	r2, #0
   8564a:	4b3d      	ldr	r3, [pc, #244]	; (85740 <pmc_sleep+0x2a8>)
   8564c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   8564e:	2201      	movs	r2, #1
   85650:	4b32      	ldr	r3, [pc, #200]	; (8571c <pmc_sleep+0x284>)
   85652:	701a      	strb	r2, [r3, #0]
   85654:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85658:	b662      	cpsie	i
   8565a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t mckr = PMC->PMC_MCKR;
   8565e:	4629      	mov	r1, r5
   85660:	e76a      	b.n	85538 <pmc_sleep+0xa0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85662:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
   85666:	6a13      	ldr	r3, [r2, #32]
   85668:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8566c:	f023 0301 	bic.w	r3, r3, #1
   85670:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85674:	6213      	str	r3, [r2, #32]
   85676:	e78d      	b.n	85594 <pmc_sleep+0xfc>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   85678:	f018 0f01 	tst.w	r8, #1
   8567c:	d0a9      	beq.n	855d2 <pmc_sleep+0x13a>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   8567e:	4b25      	ldr	r3, [pc, #148]	; (85714 <pmc_sleep+0x27c>)
   85680:	6a1b      	ldr	r3, [r3, #32]
   85682:	f013 0f01 	tst.w	r3, #1
   85686:	d10e      	bne.n	856a6 <pmc_sleep+0x20e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   85688:	4a22      	ldr	r2, [pc, #136]	; (85714 <pmc_sleep+0x27c>)
   8568a:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   8568c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85690:	f023 0303 	bic.w	r3, r3, #3
   85694:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85698:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8569c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8569e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   856a0:	f013 0f01 	tst.w	r3, #1
   856a4:	d0fb      	beq.n	8569e <pmc_sleep+0x206>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   856a6:	4b1b      	ldr	r3, [pc, #108]	; (85714 <pmc_sleep+0x27c>)
   856a8:	6a1b      	ldr	r3, [r3, #32]
   856aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   856ae:	d10a      	bne.n	856c6 <pmc_sleep+0x22e>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   856b0:	4a18      	ldr	r2, [pc, #96]	; (85714 <pmc_sleep+0x27c>)
   856b2:	6a13      	ldr	r3, [r2, #32]
   856b4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   856b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   856bc:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   856be:	6e93      	ldr	r3, [r2, #104]	; 0x68
   856c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   856c4:	d0fb      	beq.n	856be <pmc_sleep+0x226>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   856c6:	4a13      	ldr	r2, [pc, #76]	; (85714 <pmc_sleep+0x27c>)
   856c8:	6a13      	ldr	r3, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
   856ca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   856ce:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   856d2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   856d6:	6213      	str	r3, [r2, #32]
   856d8:	e77b      	b.n	855d2 <pmc_sleep+0x13a>
	uint32_t pll_sr = 0;
   856da:	2200      	movs	r2, #0
   856dc:	e782      	b.n	855e4 <pmc_sleep+0x14c>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   856de:	490d      	ldr	r1, [pc, #52]	; (85714 <pmc_sleep+0x27c>)
   856e0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   856e2:	f013 0f02 	tst.w	r3, #2
   856e6:	d0fb      	beq.n	856e0 <pmc_sleep+0x248>
   856e8:	e788      	b.n	855fc <pmc_sleep+0x164>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   856ea:	490a      	ldr	r1, [pc, #40]	; (85714 <pmc_sleep+0x27c>)
   856ec:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   856ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   856f2:	d0fb      	beq.n	856ec <pmc_sleep+0x254>
   856f4:	e782      	b.n	855fc <pmc_sleep+0x164>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   856f6:	4a08      	ldr	r2, [pc, #32]	; (85718 <pmc_sleep+0x280>)
   856f8:	6913      	ldr	r3, [r2, #16]
   856fa:	f043 0304 	orr.w	r3, r3, #4
   856fe:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   85700:	2201      	movs	r2, #1
   85702:	4b06      	ldr	r3, [pc, #24]	; (8571c <pmc_sleep+0x284>)
   85704:	701a      	strb	r2, [r3, #0]
   85706:	f3bf 8f5f 	dmb	sy
   8570a:	b662      	cpsie	i
  __ASM volatile ("wfe");
   8570c:	bf20      	wfe
   8570e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85712:	bf00      	nop
   85714:	400e0400 	.word	0x400e0400
   85718:	e000ed00 	.word	0xe000ed00
   8571c:	200006ea 	.word	0x200006ea
   85720:	200022fc 	.word	0x200022fc
   85724:	400e0800 	.word	0x400e0800
   85728:	00085395 	.word	0x00085395
   8572c:	000853b5 	.word	0x000853b5
   85730:	00085465 	.word	0x00085465
   85734:	fec8fffc 	.word	0xfec8fffc
   85738:	01370002 	.word	0x01370002
   8573c:	07ff0000 	.word	0x07ff0000
   85740:	20002300 	.word	0x20002300

00085744 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   85744:	4b02      	ldr	r3, [pc, #8]	; (85750 <pmc_is_wakeup_clocks_restored+0xc>)
   85746:	7818      	ldrb	r0, [r3, #0]
}
   85748:	f080 0001 	eor.w	r0, r0, #1
   8574c:	4770      	bx	lr
   8574e:	bf00      	nop
   85750:	200022fc 	.word	0x200022fc

00085754 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   85754:	b508      	push	{r3, lr}
   85756:	2014      	movs	r0, #20
   85758:	4b01      	ldr	r3, [pc, #4]	; (85760 <spi_enable_clock+0xc>)
   8575a:	4798      	blx	r3
   8575c:	bd08      	pop	{r3, pc}
   8575e:	bf00      	nop
   85760:	000853d5 	.word	0x000853d5

00085764 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   85764:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   85766:	2014      	movs	r0, #20
   85768:	4b01      	ldr	r3, [pc, #4]	; (85770 <spi_disable_clock+0xc>)
   8576a:	4798      	blx	r3
   8576c:	bd08      	pop	{r3, pc}
   8576e:	bf00      	nop
   85770:	00085409 	.word	0x00085409

00085774 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   85774:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   85776:	f643 2399 	movw	r3, #15001	; 0x3a99
   8577a:	6904      	ldr	r4, [r0, #16]
   8577c:	f014 0f01 	tst.w	r4, #1
   85780:	d103      	bne.n	8578a <spi_read+0x16>
		if (!timeout--) {
   85782:	3b01      	subs	r3, #1
   85784:	d1f9      	bne.n	8577a <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   85786:	2001      	movs	r0, #1
   85788:	e009      	b.n	8579e <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   8578a:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   8578c:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   8578e:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   85792:	bf1c      	itt	ne
   85794:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   85798:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   8579a:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   8579c:	2000      	movs	r0, #0
}
   8579e:	bc10      	pop	{r4}
   857a0:	4770      	bx	lr

000857a2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   857a2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   857a4:	f643 2499 	movw	r4, #15001	; 0x3a99
   857a8:	6905      	ldr	r5, [r0, #16]
   857aa:	f015 0f02 	tst.w	r5, #2
   857ae:	d103      	bne.n	857b8 <spi_write+0x16>
		if (!timeout--) {
   857b0:	3c01      	subs	r4, #1
   857b2:	d1f9      	bne.n	857a8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   857b4:	2001      	movs	r0, #1
   857b6:	e00c      	b.n	857d2 <spi_write+0x30>
   857b8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   857ba:	f014 0f02 	tst.w	r4, #2
   857be:	d006      	beq.n	857ce <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   857c0:	0412      	lsls	r2, r2, #16
   857c2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   857c6:	4311      	orrs	r1, r2
		if (uc_last) {
   857c8:	b10b      	cbz	r3, 857ce <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   857ca:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   857ce:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   857d0:	2000      	movs	r0, #0
}
   857d2:	bc30      	pop	{r4, r5}
   857d4:	4770      	bx	lr

000857d6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   857d6:	b932      	cbnz	r2, 857e6 <spi_set_clock_polarity+0x10>
   857d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   857dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   857de:	f023 0301 	bic.w	r3, r3, #1
   857e2:	6303      	str	r3, [r0, #48]	; 0x30
   857e4:	4770      	bx	lr
   857e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   857ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
   857ec:	f043 0301 	orr.w	r3, r3, #1
   857f0:	6303      	str	r3, [r0, #48]	; 0x30
   857f2:	4770      	bx	lr

000857f4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   857f4:	b932      	cbnz	r2, 85804 <spi_set_clock_phase+0x10>
   857f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   857fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
   857fc:	f023 0302 	bic.w	r3, r3, #2
   85800:	6303      	str	r3, [r0, #48]	; 0x30
   85802:	4770      	bx	lr
   85804:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   85808:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8580a:	f043 0302 	orr.w	r3, r3, #2
   8580e:	6303      	str	r3, [r0, #48]	; 0x30
   85810:	4770      	bx	lr

00085812 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   85812:	1e43      	subs	r3, r0, #1
   85814:	4419      	add	r1, r3
   85816:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8581a:	1e43      	subs	r3, r0, #1
   8581c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   8581e:	bf94      	ite	ls
   85820:	b200      	sxthls	r0, r0
		return -1;
   85822:	f04f 30ff 	movhi.w	r0, #4294967295
}
   85826:	4770      	bx	lr

00085828 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   85828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8582c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8582e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   85832:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   85834:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85836:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   8583a:	630a      	str	r2, [r1, #48]	; 0x30
   8583c:	4770      	bx	lr
	...

00085840 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   85840:	4603      	mov	r3, r0
   85842:	b9a8      	cbnz	r0, 85870 <udd_sleep_mode+0x30>
   85844:	4a17      	ldr	r2, [pc, #92]	; (858a4 <udd_sleep_mode+0x64>)
   85846:	7812      	ldrb	r2, [r2, #0]
   85848:	b342      	cbz	r2, 8589c <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8584a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   8584e:	b672      	cpsid	i
  __ASM volatile ("dmb");
   85850:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85854:	4914      	ldr	r1, [pc, #80]	; (858a8 <udd_sleep_mode+0x68>)
   85856:	7008      	strb	r0, [r1, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   85858:	4814      	ldr	r0, [pc, #80]	; (858ac <udd_sleep_mode+0x6c>)
   8585a:	7881      	ldrb	r1, [r0, #2]
   8585c:	3901      	subs	r1, #1
   8585e:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   85860:	b9e2      	cbnz	r2, 8589c <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   85862:	2101      	movs	r1, #1
   85864:	4a10      	ldr	r2, [pc, #64]	; (858a8 <udd_sleep_mode+0x68>)
   85866:	7011      	strb	r1, [r2, #0]
   85868:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8586c:	b662      	cpsie	i
   8586e:	e015      	b.n	8589c <udd_sleep_mode+0x5c>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   85870:	4a0c      	ldr	r2, [pc, #48]	; (858a4 <udd_sleep_mode+0x64>)
   85872:	7812      	ldrb	r2, [r2, #0]
   85874:	b992      	cbnz	r2, 8589c <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85876:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   8587a:	b672      	cpsid	i
   8587c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85880:	2000      	movs	r0, #0
   85882:	4909      	ldr	r1, [pc, #36]	; (858a8 <udd_sleep_mode+0x68>)
   85884:	7008      	strb	r0, [r1, #0]
	++sleepmgr_locks[mode];
   85886:	4809      	ldr	r0, [pc, #36]	; (858ac <udd_sleep_mode+0x6c>)
   85888:	7881      	ldrb	r1, [r0, #2]
   8588a:	3101      	adds	r1, #1
   8588c:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8588e:	b92a      	cbnz	r2, 8589c <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   85890:	2101      	movs	r1, #1
   85892:	4a05      	ldr	r2, [pc, #20]	; (858a8 <udd_sleep_mode+0x68>)
   85894:	7011      	strb	r1, [r2, #0]
   85896:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8589a:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8589c:	4a01      	ldr	r2, [pc, #4]	; (858a4 <udd_sleep_mode+0x64>)
   8589e:	7013      	strb	r3, [r2, #0]
}
   858a0:	4770      	bx	lr
   858a2:	bf00      	nop
   858a4:	20002305 	.word	0x20002305
   858a8:	200006ea 	.word	0x200006ea
   858ac:	20002dd8 	.word	0x20002dd8

000858b0 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   858b0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   858b4:	b672      	cpsid	i
   858b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   858ba:	2100      	movs	r1, #0
   858bc:	4a0d      	ldr	r2, [pc, #52]	; (858f4 <udd_ctrl_init+0x44>)
   858be:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   858c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   858c4:	4a0c      	ldr	r2, [pc, #48]	; (858f8 <udd_ctrl_init+0x48>)
   858c6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   858ca:	b92b      	cbnz	r3, 858d8 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   858cc:	2201      	movs	r2, #1
   858ce:	4b09      	ldr	r3, [pc, #36]	; (858f4 <udd_ctrl_init+0x44>)
   858d0:	701a      	strb	r2, [r3, #0]
   858d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   858d6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   858d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   858dc:	4b06      	ldr	r3, [pc, #24]	; (858f8 <udd_ctrl_init+0x48>)
   858de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   858e2:	4a06      	ldr	r2, [pc, #24]	; (858fc <udd_ctrl_init+0x4c>)
   858e4:	2300      	movs	r3, #0
   858e6:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   858e8:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   858ea:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   858ec:	4a04      	ldr	r2, [pc, #16]	; (85900 <udd_ctrl_init+0x50>)
   858ee:	7013      	strb	r3, [r2, #0]
   858f0:	4770      	bx	lr
   858f2:	bf00      	nop
   858f4:	200006ea 	.word	0x200006ea
   858f8:	400a4000 	.word	0x400a4000
   858fc:	20002dec 	.word	0x20002dec
   85900:	2000230a 	.word	0x2000230a

00085904 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85904:	2205      	movs	r2, #5
   85906:	4b03      	ldr	r3, [pc, #12]	; (85914 <udd_ctrl_stall_data+0x10>)
   85908:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8590a:	2220      	movs	r2, #32
   8590c:	4b02      	ldr	r3, [pc, #8]	; (85918 <udd_ctrl_stall_data+0x14>)
   8590e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85912:	4770      	bx	lr
   85914:	2000230a 	.word	0x2000230a
   85918:	400a4000 	.word	0x400a4000

0008591c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8591c:	2203      	movs	r2, #3
   8591e:	4b11      	ldr	r3, [pc, #68]	; (85964 <udd_ctrl_send_zlp_in+0x48>)
   85920:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85922:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   85926:	b672      	cpsid	i
   85928:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8592c:	2100      	movs	r1, #0
   8592e:	4b0e      	ldr	r3, [pc, #56]	; (85968 <udd_ctrl_send_zlp_in+0x4c>)
   85930:	7019      	strb	r1, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   85932:	4b0e      	ldr	r3, [pc, #56]	; (8596c <udd_ctrl_send_zlp_in+0x50>)
   85934:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85938:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8593c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   85940:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85944:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   85948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8594c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   85950:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85954:	b92a      	cbnz	r2, 85962 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   85956:	2201      	movs	r2, #1
   85958:	4b03      	ldr	r3, [pc, #12]	; (85968 <udd_ctrl_send_zlp_in+0x4c>)
   8595a:	701a      	strb	r2, [r3, #0]
   8595c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85960:	b662      	cpsie	i
   85962:	4770      	bx	lr
   85964:	2000230a 	.word	0x2000230a
   85968:	200006ea 	.word	0x200006ea
   8596c:	400a4000 	.word	0x400a4000

00085970 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   85970:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   85972:	4b02      	ldr	r3, [pc, #8]	; (8597c <udd_ctrl_endofrequest+0xc>)
   85974:	691b      	ldr	r3, [r3, #16]
   85976:	b103      	cbz	r3, 8597a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   85978:	4798      	blx	r3
   8597a:	bd08      	pop	{r3, pc}
   8597c:	20002dec 	.word	0x20002dec

00085980 <udd_ctrl_in_sent>:
{
   85980:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85982:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85986:	b672      	cpsid	i
   85988:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8598c:	2100      	movs	r1, #0
   8598e:	4a4c      	ldr	r2, [pc, #304]	; (85ac0 <udd_ctrl_in_sent+0x140>)
   85990:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   85992:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85996:	4a4b      	ldr	r2, [pc, #300]	; (85ac4 <udd_ctrl_in_sent+0x144>)
   85998:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8599c:	b92b      	cbnz	r3, 859aa <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   8599e:	2201      	movs	r2, #1
   859a0:	4b47      	ldr	r3, [pc, #284]	; (85ac0 <udd_ctrl_in_sent+0x140>)
   859a2:	701a      	strb	r2, [r3, #0]
   859a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   859a8:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   859aa:	4b47      	ldr	r3, [pc, #284]	; (85ac8 <udd_ctrl_in_sent+0x148>)
   859ac:	781b      	ldrb	r3, [r3, #0]
   859ae:	2b03      	cmp	r3, #3
   859b0:	d057      	beq.n	85a62 <udd_ctrl_in_sent+0xe2>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   859b2:	4b46      	ldr	r3, [pc, #280]	; (85acc <udd_ctrl_in_sent+0x14c>)
   859b4:	881b      	ldrh	r3, [r3, #0]
   859b6:	4a46      	ldr	r2, [pc, #280]	; (85ad0 <udd_ctrl_in_sent+0x150>)
   859b8:	8994      	ldrh	r4, [r2, #12]
   859ba:	1ae4      	subs	r4, r4, r3
   859bc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   859be:	b9c4      	cbnz	r4, 859f2 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   859c0:	4a44      	ldr	r2, [pc, #272]	; (85ad4 <udd_ctrl_in_sent+0x154>)
   859c2:	8811      	ldrh	r1, [r2, #0]
   859c4:	440b      	add	r3, r1
   859c6:	b29b      	uxth	r3, r3
   859c8:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   859ca:	4a41      	ldr	r2, [pc, #260]	; (85ad0 <udd_ctrl_in_sent+0x150>)
   859cc:	88d2      	ldrh	r2, [r2, #6]
   859ce:	429a      	cmp	r2, r3
   859d0:	d04c      	beq.n	85a6c <udd_ctrl_in_sent+0xec>
				|| b_shortpacket) {
   859d2:	4b41      	ldr	r3, [pc, #260]	; (85ad8 <udd_ctrl_in_sent+0x158>)
   859d4:	781b      	ldrb	r3, [r3, #0]
   859d6:	2b00      	cmp	r3, #0
   859d8:	d148      	bne.n	85a6c <udd_ctrl_in_sent+0xec>
		if ((!udd_g_ctrlreq.over_under_run)
   859da:	4b3d      	ldr	r3, [pc, #244]	; (85ad0 <udd_ctrl_in_sent+0x150>)
   859dc:	695b      	ldr	r3, [r3, #20]
   859de:	2b00      	cmp	r3, #0
   859e0:	d05f      	beq.n	85aa2 <udd_ctrl_in_sent+0x122>
				|| (!udd_g_ctrlreq.over_under_run())) {
   859e2:	4798      	blx	r3
   859e4:	2800      	cmp	r0, #0
   859e6:	d05c      	beq.n	85aa2 <udd_ctrl_in_sent+0x122>
			udd_ctrl_payload_buf_cnt = 0;
   859e8:	2200      	movs	r2, #0
   859ea:	4b38      	ldr	r3, [pc, #224]	; (85acc <udd_ctrl_in_sent+0x14c>)
   859ec:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   859ee:	4b38      	ldr	r3, [pc, #224]	; (85ad0 <udd_ctrl_in_sent+0x150>)
   859f0:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   859f2:	2c3f      	cmp	r4, #63	; 0x3f
   859f4:	d955      	bls.n	85aa2 <udd_ctrl_in_sent+0x122>
		b_shortpacket = false;
   859f6:	2200      	movs	r2, #0
   859f8:	4b37      	ldr	r3, [pc, #220]	; (85ad8 <udd_ctrl_in_sent+0x158>)
   859fa:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   859fc:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   859fe:	4b34      	ldr	r3, [pc, #208]	; (85ad0 <udd_ctrl_in_sent+0x150>)
   85a00:	689a      	ldr	r2, [r3, #8]
   85a02:	4b32      	ldr	r3, [pc, #200]	; (85acc <udd_ctrl_in_sent+0x14c>)
   85a04:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85a06:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   85a0a:	b672      	cpsid	i
   85a0c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85a10:	2100      	movs	r1, #0
   85a12:	4b2b      	ldr	r3, [pc, #172]	; (85ac0 <udd_ctrl_in_sent+0x140>)
   85a14:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   85a16:	4b2b      	ldr	r3, [pc, #172]	; (85ac4 <udd_ctrl_in_sent+0x144>)
   85a18:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85a1c:	f413 7f00 	tst.w	r3, #512	; 0x200
   85a20:	d143      	bne.n	85aaa <udd_ctrl_in_sent+0x12a>
	for (i = 0; i < nb_remain; i++) {
   85a22:	b144      	cbz	r4, 85a36 <udd_ctrl_in_sent+0xb6>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85a24:	442a      	add	r2, r5
   85a26:	4b2d      	ldr	r3, [pc, #180]	; (85adc <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   85a28:	f812 1b01 	ldrb.w	r1, [r2], #1
   85a2c:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   85a30:	b2d9      	uxtb	r1, r3
   85a32:	42a1      	cmp	r1, r4
   85a34:	d3f8      	bcc.n	85a28 <udd_ctrl_in_sent+0xa8>
	udd_ctrl_payload_buf_cnt += nb_remain;
   85a36:	442c      	add	r4, r5
   85a38:	4b24      	ldr	r3, [pc, #144]	; (85acc <udd_ctrl_in_sent+0x14c>)
   85a3a:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   85a3c:	4b21      	ldr	r3, [pc, #132]	; (85ac4 <udd_ctrl_in_sent+0x144>)
   85a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85a42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
   85a4a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85a4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85a52:	b928      	cbnz	r0, 85a60 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   85a54:	2201      	movs	r2, #1
   85a56:	4b1a      	ldr	r3, [pc, #104]	; (85ac0 <udd_ctrl_in_sent+0x140>)
   85a58:	701a      	strb	r2, [r3, #0]
   85a5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85a5e:	b662      	cpsie	i
   85a60:	bd38      	pop	{r3, r4, r5, pc}
		udd_ctrl_endofrequest();
   85a62:	4b1f      	ldr	r3, [pc, #124]	; (85ae0 <udd_ctrl_in_sent+0x160>)
   85a64:	4798      	blx	r3
		udd_ctrl_init();
   85a66:	4b1f      	ldr	r3, [pc, #124]	; (85ae4 <udd_ctrl_in_sent+0x164>)
   85a68:	4798      	blx	r3
		return;
   85a6a:	bd38      	pop	{r3, r4, r5, pc}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85a6c:	2204      	movs	r2, #4
   85a6e:	4b16      	ldr	r3, [pc, #88]	; (85ac8 <udd_ctrl_in_sent+0x148>)
   85a70:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85a72:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85a76:	b672      	cpsid	i
   85a78:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85a7c:	2100      	movs	r1, #0
   85a7e:	4a10      	ldr	r2, [pc, #64]	; (85ac0 <udd_ctrl_in_sent+0x140>)
   85a80:	7011      	strb	r1, [r2, #0]
	udd_ack_nak_in(0);
   85a82:	4a10      	ldr	r2, [pc, #64]	; (85ac4 <udd_ctrl_in_sent+0x144>)
   85a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85a88:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   85a8c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85a90:	2b00      	cmp	r3, #0
   85a92:	d1e5      	bne.n	85a60 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   85a94:	2201      	movs	r2, #1
   85a96:	4b0a      	ldr	r3, [pc, #40]	; (85ac0 <udd_ctrl_in_sent+0x140>)
   85a98:	701a      	strb	r2, [r3, #0]
   85a9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85a9e:	b662      	cpsie	i
   85aa0:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   85aa2:	2201      	movs	r2, #1
   85aa4:	4b0c      	ldr	r3, [pc, #48]	; (85ad8 <udd_ctrl_in_sent+0x158>)
   85aa6:	701a      	strb	r2, [r3, #0]
   85aa8:	e7a9      	b.n	859fe <udd_ctrl_in_sent+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
   85aaa:	b928      	cbnz	r0, 85ab8 <udd_ctrl_in_sent+0x138>
		cpu_irq_enable();
   85aac:	2201      	movs	r2, #1
   85aae:	4b04      	ldr	r3, [pc, #16]	; (85ac0 <udd_ctrl_in_sent+0x140>)
   85ab0:	701a      	strb	r2, [r3, #0]
   85ab2:	f3bf 8f5f 	dmb	sy
   85ab6:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85ab8:	2204      	movs	r2, #4
   85aba:	4b03      	ldr	r3, [pc, #12]	; (85ac8 <udd_ctrl_in_sent+0x148>)
   85abc:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   85abe:	bd38      	pop	{r3, r4, r5, pc}
   85ac0:	200006ea 	.word	0x200006ea
   85ac4:	400a4000 	.word	0x400a4000
   85ac8:	2000230a 	.word	0x2000230a
   85acc:	20002306 	.word	0x20002306
   85ad0:	20002dec 	.word	0x20002dec
   85ad4:	20002308 	.word	0x20002308
   85ad8:	20002304 	.word	0x20002304
   85adc:	20180000 	.word	0x20180000
   85ae0:	00085971 	.word	0x00085971
   85ae4:	000858b1 	.word	0x000858b1

00085ae8 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85ae8:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
   85aea:	7d03      	ldrb	r3, [r0, #20]
   85aec:	f013 0f01 	tst.w	r3, #1
   85af0:	d013      	beq.n	85b1a <udd_ep_finish_job+0x32>
   85af2:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
   85af4:	7d03      	ldrb	r3, [r0, #20]
   85af6:	f36f 0300 	bfc	r3, #0, #1
   85afa:	7503      	strb	r3, [r0, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   85afc:	6804      	ldr	r4, [r0, #0]
   85afe:	b164      	cbz	r4, 85b1a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85b00:	f102 0308 	add.w	r3, r2, #8
   85b04:	015b      	lsls	r3, r3, #5
   85b06:	4905      	ldr	r1, [pc, #20]	; (85b1c <udd_ep_finish_job+0x34>)
   85b08:	58cb      	ldr	r3, [r1, r3]
   85b0a:	f013 0f08 	tst.w	r3, #8
		ep_num |= USB_EP_DIR_IN;
   85b0e:	bf18      	it	ne
   85b10:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85b14:	6881      	ldr	r1, [r0, #8]
   85b16:	4628      	mov	r0, r5
   85b18:	47a0      	blx	r4
   85b1a:	bd38      	pop	{r3, r4, r5, pc}
   85b1c:	400a4000 	.word	0x400a4000

00085b20 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85b22:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   85b24:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85b28:	4a59      	ldr	r2, [pc, #356]	; (85c90 <udd_ep_trans_done+0x170>)
   85b2a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   85b2e:	7d12      	ldrb	r2, [r2, #20]
   85b30:	f012 0f01 	tst.w	r2, #1
   85b34:	f000 809e 	beq.w	85c74 <udd_ep_trans_done+0x154>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85b38:	460a      	mov	r2, r1
   85b3a:	4955      	ldr	r1, [pc, #340]	; (85c90 <udd_ep_trans_done+0x170>)
   85b3c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   85b40:	68d4      	ldr	r4, [r2, #12]
   85b42:	6892      	ldr	r2, [r2, #8]
   85b44:	4294      	cmp	r4, r2
   85b46:	d079      	beq.n	85c3c <udd_ep_trans_done+0x11c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   85b48:	1b12      	subs	r2, r2, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   85b4a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   85b4e:	bf92      	itee	ls
   85b50:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85b52:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85b56:	2700      	movhi	r7, #0
   85b58:	0141      	lsls	r1, r0, #5
   85b5a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85b5e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   85b62:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   85b66:	f015 0f08 	tst.w	r5, #8
   85b6a:	d014      	beq.n	85b96 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85b6c:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   85b70:	f005 0507 	and.w	r5, r5, #7
   85b74:	2108      	movs	r1, #8
   85b76:	40a9      	lsls	r1, r5
   85b78:	3901      	subs	r1, #1
   85b7a:	4211      	tst	r1, r2
   85b7c:	d013      	beq.n	85ba6 <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   85b7e:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85b82:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85b86:	4d42      	ldr	r5, [pc, #264]	; (85c90 <udd_ep_trans_done+0x170>)
   85b88:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   85b8c:	7d0d      	ldrb	r5, [r1, #20]
   85b8e:	f36f 0541 	bfc	r5, #1, #1
   85b92:	750d      	strb	r5, [r1, #20]
   85b94:	e007      	b.n	85ba6 <udd_ep_trans_done+0x86>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85b96:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   85b9a:	f3c5 1501 	ubfx	r5, r5, #4, #2
   85b9e:	2d01      	cmp	r5, #1
   85ba0:	d035      	beq.n	85c0e <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85ba2:	f047 0714 	orr.w	r7, r7, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85ba6:	493b      	ldr	r1, [pc, #236]	; (85c94 <udd_ep_trans_done+0x174>)
   85ba8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   85bac:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   85bb0:	4e37      	ldr	r6, [pc, #220]	; (85c90 <udd_ep_trans_done+0x170>)
   85bb2:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85bb6:	686d      	ldr	r5, [r5, #4]
   85bb8:	442c      	add	r4, r5
   85bba:	604c      	str	r4, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85bbc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   85bc0:	b672      	cpsid	i
   85bc2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85bc6:	2600      	movs	r6, #0
   85bc8:	4c33      	ldr	r4, [pc, #204]	; (85c98 <udd_ep_trans_done+0x178>)
   85bca:	7026      	strb	r6, [r4, #0]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   85bcc:	68cc      	ldr	r4, [r1, #12]
   85bce:	f014 0f10 	tst.w	r4, #16
   85bd2:	d125      	bne.n	85c20 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85bd4:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85bd8:	608f      	str	r7, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   85bda:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   85bde:	492c      	ldr	r1, [pc, #176]	; (85c90 <udd_ep_trans_done+0x170>)
   85be0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   85be4:	68c8      	ldr	r0, [r1, #12]
   85be6:	4410      	add	r0, r2
   85be8:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   85bea:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85bec:	4a2b      	ldr	r2, [pc, #172]	; (85c9c <udd_ep_trans_done+0x17c>)
   85bee:	6911      	ldr	r1, [r2, #16]
   85bf0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   85bf4:	fa00 f303 	lsl.w	r3, r0, r3
   85bf8:	430b      	orrs	r3, r1
   85bfa:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85bfc:	2d00      	cmp	r5, #0
   85bfe:	d139      	bne.n	85c74 <udd_ep_trans_done+0x154>
		cpu_irq_enable();
   85c00:	2201      	movs	r2, #1
   85c02:	4b25      	ldr	r3, [pc, #148]	; (85c98 <udd_ep_trans_done+0x178>)
   85c04:	701a      	strb	r2, [r3, #0]
   85c06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85c0a:	b662      	cpsie	i
   85c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85c0e:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   85c12:	f005 0507 	and.w	r5, r5, #7
   85c16:	2108      	movs	r1, #8
   85c18:	40a9      	lsls	r1, r5
   85c1a:	428a      	cmp	r2, r1
   85c1c:	d8c3      	bhi.n	85ba6 <udd_ep_trans_done+0x86>
   85c1e:	e7c0      	b.n	85ba2 <udd_ep_trans_done+0x82>
	if (cpu_irq_is_enabled_flags(flags))
   85c20:	b92d      	cbnz	r5, 85c2e <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
   85c22:	2101      	movs	r1, #1
   85c24:	4a1c      	ldr	r2, [pc, #112]	; (85c98 <udd_ep_trans_done+0x178>)
   85c26:	7011      	strb	r1, [r2, #0]
   85c28:	f3bf 8f5f 	dmb	sy
   85c2c:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   85c2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   85c32:	4917      	ldr	r1, [pc, #92]	; (85c90 <udd_ep_trans_done+0x170>)
   85c34:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   85c38:	68d1      	ldr	r1, [r2, #12]
   85c3a:	6091      	str	r1, [r2, #8]
   85c3c:	0142      	lsls	r2, r0, #5
   85c3e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85c42:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
	}
	if (Is_udd_endpoint_in(ep)) {
   85c46:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   85c4a:	f011 0f08 	tst.w	r1, #8
   85c4e:	d008      	beq.n	85c62 <udd_ep_trans_done+0x142>
		if (ptr_job->b_shortpacket) {
   85c50:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85c54:	4c0e      	ldr	r4, [pc, #56]	; (85c90 <udd_ep_trans_done+0x170>)
   85c56:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   85c5a:	7d09      	ldrb	r1, [r1, #20]
   85c5c:	f011 0f02 	tst.w	r1, #2
   85c60:	d109      	bne.n	85c76 <udd_ep_trans_done+0x156>
   85c62:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   85c64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   85c68:	2100      	movs	r1, #0
   85c6a:	4809      	ldr	r0, [pc, #36]	; (85c90 <udd_ep_trans_done+0x170>)
   85c6c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   85c70:	4b0b      	ldr	r3, [pc, #44]	; (85ca0 <udd_ep_trans_done+0x180>)
   85c72:	4798      	blx	r3
   85c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			udd_enable_tx_pkt_ready_interrupt(ep);
   85c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85c7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   85c7e:	4b07      	ldr	r3, [pc, #28]	; (85c9c <udd_ep_trans_done+0x17c>)
   85c80:	6919      	ldr	r1, [r3, #16]
   85c82:	f44f 7280 	mov.w	r2, #256	; 0x100
   85c86:	fa02 f000 	lsl.w	r0, r2, r0
   85c8a:	4308      	orrs	r0, r1
   85c8c:	6118      	str	r0, [r3, #16]
			return;
   85c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c90:	2000230c 	.word	0x2000230c
   85c94:	400a4300 	.word	0x400a4300
   85c98:	200006ea 	.word	0x200006ea
   85c9c:	400a4000 	.word	0x400a4000
   85ca0:	00085ae9 	.word	0x00085ae9

00085ca4 <UDPHS_Handler>:
{
   85ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   85ca8:	201d      	movs	r0, #29
   85caa:	4ba6      	ldr	r3, [pc, #664]	; (85f44 <UDPHS_Handler+0x2a0>)
   85cac:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   85cae:	4ba6      	ldr	r3, [pc, #664]	; (85f48 <UDPHS_Handler+0x2a4>)
   85cb0:	4798      	blx	r3
   85cb2:	b920      	cbnz	r0, 85cbe <UDPHS_Handler+0x1a>
   85cb4:	4ba5      	ldr	r3, [pc, #660]	; (85f4c <UDPHS_Handler+0x2a8>)
   85cb6:	695b      	ldr	r3, [r3, #20]
   85cb8:	f013 0f02 	tst.w	r3, #2
   85cbc:	d00f      	beq.n	85cde <UDPHS_Handler+0x3a>
	if (Is_udd_sof()) {
   85cbe:	4ba3      	ldr	r3, [pc, #652]	; (85f4c <UDPHS_Handler+0x2a8>)
   85cc0:	695b      	ldr	r3, [r3, #20]
   85cc2:	f013 0f08 	tst.w	r3, #8
   85cc6:	d015      	beq.n	85cf4 <UDPHS_Handler+0x50>
		udd_ack_sof();
   85cc8:	4ba0      	ldr	r3, [pc, #640]	; (85f4c <UDPHS_Handler+0x2a8>)
   85cca:	2208      	movs	r2, #8
   85ccc:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   85cce:	695b      	ldr	r3, [r3, #20]
   85cd0:	f013 0f01 	tst.w	r3, #1
   85cd4:	d00b      	beq.n	85cee <UDPHS_Handler+0x4a>
		UDC_SOF_EVENT();
   85cd6:	4b9e      	ldr	r3, [pc, #632]	; (85f50 <UDPHS_Handler+0x2ac>)
   85cd8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("cpsid i");
   85cde:	b672      	cpsid	i
   85ce0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85ce4:	2200      	movs	r2, #0
   85ce6:	4b9b      	ldr	r3, [pc, #620]	; (85f54 <UDPHS_Handler+0x2b0>)
   85ce8:	701a      	strb	r2, [r3, #0]
		return;
   85cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   85cee:	4b9a      	ldr	r3, [pc, #616]	; (85f58 <UDPHS_Handler+0x2b4>)
   85cf0:	4798      	blx	r3
   85cf2:	e7f0      	b.n	85cd6 <UDPHS_Handler+0x32>
	if (Is_udd_msof()) {
   85cf4:	4b95      	ldr	r3, [pc, #596]	; (85f4c <UDPHS_Handler+0x2a8>)
   85cf6:	695b      	ldr	r3, [r3, #20]
   85cf8:	f013 0f04 	tst.w	r3, #4
   85cfc:	d137      	bne.n	85d6e <UDPHS_Handler+0xca>
	uint32_t status = udd_get_endpoint_status(0);
   85cfe:	4a93      	ldr	r2, [pc, #588]	; (85f4c <UDPHS_Handler+0x2a8>)
   85d00:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   85d04:	6952      	ldr	r2, [r2, #20]
   85d06:	f412 7f80 	tst.w	r2, #256	; 0x100
   85d0a:	d029      	beq.n	85d60 <UDPHS_Handler+0xbc>
	udd_disable_nak_in_interrupt(0);
   85d0c:	4a8f      	ldr	r2, [pc, #572]	; (85f4c <UDPHS_Handler+0x2a8>)
   85d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85d12:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   85d1a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   85d1e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   85d22:	d12b      	bne.n	85d7c <UDPHS_Handler+0xd8>
	if (Is_udd_endpoint_status_in_sent(status)
   85d24:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85d28:	d006      	beq.n	85d38 <UDPHS_Handler+0x94>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85d2a:	4a88      	ldr	r2, [pc, #544]	; (85f4c <UDPHS_Handler+0x2a8>)
   85d2c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85d30:	f412 6f80 	tst.w	r2, #1024	; 0x400
   85d34:	f040 808f 	bne.w	85e56 <UDPHS_Handler+0x1b2>
	if (Is_udd_endpoint_status_out_received(status)) {
   85d38:	f413 7f00 	tst.w	r3, #512	; 0x200
   85d3c:	f040 808f 	bne.w	85e5e <UDPHS_Handler+0x1ba>
	if (Is_udd_endpoint_status_stall(status)) {
   85d40:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85d44:	d004      	beq.n	85d50 <UDPHS_Handler+0xac>
		udd_ack_stall(0);
   85d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85d4a:	4a80      	ldr	r2, [pc, #512]	; (85f4c <UDPHS_Handler+0x2a8>)
   85d4c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   85d50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   85d54:	f040 813c 	bne.w	85fd0 <UDPHS_Handler+0x32c>
	if (Is_udd_endpoint_status_nak_in(status)) {
   85d58:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   85d5c:	f040 814e 	bne.w	85ffc <UDPHS_Handler+0x358>
	for (i = 0; i < nb_data; i++) {
   85d60:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85d62:	497a      	ldr	r1, [pc, #488]	; (85f4c <UDPHS_Handler+0x2a8>)
   85d64:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85d68:	f44f 7c80 	mov.w	ip, #256	; 0x100
   85d6c:	e199      	b.n	860a2 <UDPHS_Handler+0x3fe>
		udd_ack_msof();
   85d6e:	2204      	movs	r2, #4
   85d70:	4b76      	ldr	r3, [pc, #472]	; (85f4c <UDPHS_Handler+0x2a8>)
   85d72:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   85d74:	4b78      	ldr	r3, [pc, #480]	; (85f58 <UDPHS_Handler+0x2b4>)
   85d76:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85d7c:	4b77      	ldr	r3, [pc, #476]	; (85f5c <UDPHS_Handler+0x2b8>)
   85d7e:	781b      	ldrb	r3, [r3, #0]
   85d80:	2b00      	cmp	r3, #0
   85d82:	d141      	bne.n	85e08 <UDPHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
   85d84:	4b71      	ldr	r3, [pc, #452]	; (85f4c <UDPHS_Handler+0x2a8>)
   85d86:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85d8a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   85d8e:	2b08      	cmp	r3, #8
   85d90:	d13f      	bne.n	85e12 <UDPHS_Handler+0x16e>
   85d92:	4a73      	ldr	r2, [pc, #460]	; (85f60 <UDPHS_Handler+0x2bc>)
   85d94:	4b73      	ldr	r3, [pc, #460]	; (85f64 <UDPHS_Handler+0x2c0>)
	for (i = 0; i < 8; i++) {
   85d96:	4874      	ldr	r0, [pc, #464]	; (85f68 <UDPHS_Handler+0x2c4>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85d98:	f813 1b01 	ldrb.w	r1, [r3], #1
   85d9c:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   85da0:	4283      	cmp	r3, r0
   85da2:	d1f9      	bne.n	85d98 <UDPHS_Handler+0xf4>
	if (udc_process_setup() == false) {
   85da4:	4b71      	ldr	r3, [pc, #452]	; (85f6c <UDPHS_Handler+0x2c8>)
   85da6:	4798      	blx	r3
   85da8:	2800      	cmp	r0, #0
   85daa:	d03b      	beq.n	85e24 <UDPHS_Handler+0x180>
	udd_ack_setup_received(0);
   85dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85db0:	4b66      	ldr	r3, [pc, #408]	; (85f4c <UDPHS_Handler+0x2a8>)
   85db2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   85db6:	4b6e      	ldr	r3, [pc, #440]	; (85f70 <UDPHS_Handler+0x2cc>)
   85db8:	f993 3000 	ldrsb.w	r3, [r3]
   85dbc:	2b00      	cmp	r3, #0
   85dbe:	db3a      	blt.n	85e36 <UDPHS_Handler+0x192>
		if (0 == udd_g_ctrlreq.req.wLength) {
   85dc0:	4b6b      	ldr	r3, [pc, #428]	; (85f70 <UDPHS_Handler+0x2cc>)
   85dc2:	88db      	ldrh	r3, [r3, #6]
   85dc4:	2b00      	cmp	r3, #0
   85dc6:	d042      	beq.n	85e4e <UDPHS_Handler+0x1aa>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85dc8:	2200      	movs	r2, #0
   85dca:	4b6a      	ldr	r3, [pc, #424]	; (85f74 <UDPHS_Handler+0x2d0>)
   85dcc:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85dce:	4b6a      	ldr	r3, [pc, #424]	; (85f78 <UDPHS_Handler+0x2d4>)
   85dd0:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85dd2:	2101      	movs	r1, #1
   85dd4:	4b61      	ldr	r3, [pc, #388]	; (85f5c <UDPHS_Handler+0x2b8>)
   85dd6:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   85dd8:	495c      	ldr	r1, [pc, #368]	; (85f4c <UDPHS_Handler+0x2a8>)
   85dda:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   85dde:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85de2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85de6:	b672      	cpsid	i
   85de8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85dec:	4c59      	ldr	r4, [pc, #356]	; (85f54 <UDPHS_Handler+0x2b0>)
   85dee:	7022      	strb	r2, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   85df0:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85df4:	2b00      	cmp	r3, #0
   85df6:	f040 8266 	bne.w	862c6 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   85dfa:	2201      	movs	r2, #1
   85dfc:	7022      	strb	r2, [r4, #0]
   85dfe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85e02:	b662      	cpsie	i
   85e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_endofrequest();
   85e08:	4b5c      	ldr	r3, [pc, #368]	; (85f7c <UDPHS_Handler+0x2d8>)
   85e0a:	4798      	blx	r3
		udd_ctrl_init();
   85e0c:	4b5c      	ldr	r3, [pc, #368]	; (85f80 <UDPHS_Handler+0x2dc>)
   85e0e:	4798      	blx	r3
   85e10:	e7b8      	b.n	85d84 <UDPHS_Handler+0xe0>
		udd_ctrl_stall_data();
   85e12:	4b5c      	ldr	r3, [pc, #368]	; (85f84 <UDPHS_Handler+0x2e0>)
   85e14:	4798      	blx	r3
		udd_ack_setup_received(0);
   85e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85e1a:	4b4c      	ldr	r3, [pc, #304]	; (85f4c <UDPHS_Handler+0x2a8>)
   85e1c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_stall_data();
   85e24:	4b57      	ldr	r3, [pc, #348]	; (85f84 <UDPHS_Handler+0x2e0>)
   85e26:	4798      	blx	r3
		udd_ack_setup_received(0);
   85e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85e2c:	4b47      	ldr	r3, [pc, #284]	; (85f4c <UDPHS_Handler+0x2a8>)
   85e2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_prev_payload_buf_cnt = 0;
   85e36:	2300      	movs	r3, #0
   85e38:	4a4e      	ldr	r2, [pc, #312]	; (85f74 <UDPHS_Handler+0x2d0>)
   85e3a:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85e3c:	4a4e      	ldr	r2, [pc, #312]	; (85f78 <UDPHS_Handler+0x2d4>)
   85e3e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85e40:	2202      	movs	r2, #2
   85e42:	4b46      	ldr	r3, [pc, #280]	; (85f5c <UDPHS_Handler+0x2b8>)
   85e44:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   85e46:	4b50      	ldr	r3, [pc, #320]	; (85f88 <UDPHS_Handler+0x2e4>)
   85e48:	4798      	blx	r3
   85e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_send_zlp_in();
   85e4e:	4b4f      	ldr	r3, [pc, #316]	; (85f8c <UDPHS_Handler+0x2e8>)
   85e50:	4798      	blx	r3
   85e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_in_sent();
   85e56:	4b4c      	ldr	r3, [pc, #304]	; (85f88 <UDPHS_Handler+0x2e4>)
   85e58:	4798      	blx	r3
   85e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85e5e:	4b3f      	ldr	r3, [pc, #252]	; (85f5c <UDPHS_Handler+0x2b8>)
   85e60:	781b      	ldrb	r3, [r3, #0]
   85e62:	2b01      	cmp	r3, #1
   85e64:	d00c      	beq.n	85e80 <UDPHS_Handler+0x1dc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85e66:	2b02      	cmp	r3, #2
   85e68:	d004      	beq.n	85e74 <UDPHS_Handler+0x1d0>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85e6a:	2b04      	cmp	r3, #4
   85e6c:	d002      	beq.n	85e74 <UDPHS_Handler+0x1d0>
			udd_ctrl_stall_data();
   85e6e:	4b45      	ldr	r3, [pc, #276]	; (85f84 <UDPHS_Handler+0x2e0>)
   85e70:	4798      	blx	r3
   85e72:	e001      	b.n	85e78 <UDPHS_Handler+0x1d4>
			udd_ctrl_endofrequest();
   85e74:	4b41      	ldr	r3, [pc, #260]	; (85f7c <UDPHS_Handler+0x2d8>)
   85e76:	4798      	blx	r3
		udd_ctrl_init();
   85e78:	4b41      	ldr	r3, [pc, #260]	; (85f80 <UDPHS_Handler+0x2dc>)
   85e7a:	4798      	blx	r3
   85e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nb_data = udd_byte_count(0);
   85e80:	4b32      	ldr	r3, [pc, #200]	; (85f4c <UDPHS_Handler+0x2a8>)
   85e82:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   85e86:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85e8a:	4b39      	ldr	r3, [pc, #228]	; (85f70 <UDPHS_Handler+0x2cc>)
   85e8c:	899b      	ldrh	r3, [r3, #12]
   85e8e:	4a3a      	ldr	r2, [pc, #232]	; (85f78 <UDPHS_Handler+0x2d4>)
   85e90:	8814      	ldrh	r4, [r2, #0]
   85e92:	1822      	adds	r2, r4, r0
   85e94:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85e96:	bfbc      	itt	lt
   85e98:	1b1b      	sublt	r3, r3, r4
   85e9a:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85e9c:	4b34      	ldr	r3, [pc, #208]	; (85f70 <UDPHS_Handler+0x2cc>)
   85e9e:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   85ea0:	b178      	cbz	r0, 85ec2 <UDPHS_Handler+0x21e>
   85ea2:	1e63      	subs	r3, r4, #1
   85ea4:	441a      	add	r2, r3
   85ea6:	4b2f      	ldr	r3, [pc, #188]	; (85f64 <UDPHS_Handler+0x2c0>)
		*ptr_dest++ = *ptr_src++;
   85ea8:	f813 1b01 	ldrb.w	r1, [r3], #1
   85eac:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   85eb0:	b2d9      	uxtb	r1, r3
   85eb2:	4281      	cmp	r1, r0
   85eb4:	d3f8      	bcc.n	85ea8 <UDPHS_Handler+0x204>
	udd_ctrl_payload_buf_cnt += nb_data;
   85eb6:	4404      	add	r4, r0
   85eb8:	b2a4      	uxth	r4, r4
   85eba:	4b2f      	ldr	r3, [pc, #188]	; (85f78 <UDPHS_Handler+0x2d4>)
   85ebc:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85ebe:	2840      	cmp	r0, #64	; 0x40
   85ec0:	d00e      	beq.n	85ee0 <UDPHS_Handler+0x23c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85ec2:	4b2b      	ldr	r3, [pc, #172]	; (85f70 <UDPHS_Handler+0x2cc>)
   85ec4:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85ec6:	695b      	ldr	r3, [r3, #20]
   85ec8:	b10b      	cbz	r3, 85ece <UDPHS_Handler+0x22a>
			if (!udd_g_ctrlreq.over_under_run()) {
   85eca:	4798      	blx	r3
   85ecc:	b380      	cbz	r0, 85f30 <UDPHS_Handler+0x28c>
		udd_ack_out_received(0);
   85ece:	f44f 7200 	mov.w	r2, #512	; 0x200
   85ed2:	4b1e      	ldr	r3, [pc, #120]	; (85f4c <UDPHS_Handler+0x2a8>)
   85ed4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85ed8:	4b2c      	ldr	r3, [pc, #176]	; (85f8c <UDPHS_Handler+0x2e8>)
   85eda:	4798      	blx	r3
   85edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (udd_g_ctrlreq.req.wLength <=
   85ee0:	4b23      	ldr	r3, [pc, #140]	; (85f70 <UDPHS_Handler+0x2cc>)
   85ee2:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   85ee4:	4b23      	ldr	r3, [pc, #140]	; (85f74 <UDPHS_Handler+0x2d0>)
   85ee6:	881b      	ldrh	r3, [r3, #0]
   85ee8:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   85eea:	429a      	cmp	r2, r3
   85eec:	dde9      	ble.n	85ec2 <UDPHS_Handler+0x21e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85eee:	4b20      	ldr	r3, [pc, #128]	; (85f70 <UDPHS_Handler+0x2cc>)
   85ef0:	899b      	ldrh	r3, [r3, #12]
   85ef2:	42a3      	cmp	r3, r4
   85ef4:	d04c      	beq.n	85f90 <UDPHS_Handler+0x2ec>
	udd_ack_out_received(0);
   85ef6:	4a15      	ldr	r2, [pc, #84]	; (85f4c <UDPHS_Handler+0x2a8>)
   85ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
   85efc:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_ack_nak_in(0);
   85f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85f04:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85f08:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85f0c:	b672      	cpsid	i
   85f0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85f12:	2400      	movs	r4, #0
   85f14:	480f      	ldr	r0, [pc, #60]	; (85f54 <UDPHS_Handler+0x2b0>)
   85f16:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   85f18:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85f1c:	2b00      	cmp	r3, #0
   85f1e:	f040 81d2 	bne.w	862c6 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   85f22:	2201      	movs	r2, #1
   85f24:	7002      	strb	r2, [r0, #0]
   85f26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85f2a:	b662      	cpsie	i
   85f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				udd_ctrl_stall_data();
   85f30:	4b14      	ldr	r3, [pc, #80]	; (85f84 <UDPHS_Handler+0x2e0>)
   85f32:	4798      	blx	r3
				udd_ack_out_received(0);
   85f34:	f44f 7200 	mov.w	r2, #512	; 0x200
   85f38:	4b04      	ldr	r3, [pc, #16]	; (85f4c <UDPHS_Handler+0x2a8>)
   85f3a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f42:	bf00      	nop
   85f44:	000853d5 	.word	0x000853d5
   85f48:	00085745 	.word	0x00085745
   85f4c:	400a4000 	.word	0x400a4000
   85f50:	00083049 	.word	0x00083049
   85f54:	200006ea 	.word	0x200006ea
   85f58:	00084751 	.word	0x00084751
   85f5c:	2000230a 	.word	0x2000230a
   85f60:	20002deb 	.word	0x20002deb
   85f64:	20180000 	.word	0x20180000
   85f68:	20180008 	.word	0x20180008
   85f6c:	00084791 	.word	0x00084791
   85f70:	20002dec 	.word	0x20002dec
   85f74:	20002308 	.word	0x20002308
   85f78:	20002306 	.word	0x20002306
   85f7c:	00085971 	.word	0x00085971
   85f80:	000858b1 	.word	0x000858b1
   85f84:	00085905 	.word	0x00085905
   85f88:	00085981 	.word	0x00085981
   85f8c:	0008591d 	.word	0x0008591d
		if (!udd_g_ctrlreq.over_under_run) {
   85f90:	4bb0      	ldr	r3, [pc, #704]	; (86254 <UDPHS_Handler+0x5b0>)
   85f92:	695b      	ldr	r3, [r3, #20]
   85f94:	b153      	cbz	r3, 85fac <UDPHS_Handler+0x308>
		if (!udd_g_ctrlreq.over_under_run()) {
   85f96:	4798      	blx	r3
   85f98:	b188      	cbz	r0, 85fbe <UDPHS_Handler+0x31a>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85f9a:	49af      	ldr	r1, [pc, #700]	; (86258 <UDPHS_Handler+0x5b4>)
   85f9c:	4aaf      	ldr	r2, [pc, #700]	; (8625c <UDPHS_Handler+0x5b8>)
   85f9e:	880b      	ldrh	r3, [r1, #0]
   85fa0:	8810      	ldrh	r0, [r2, #0]
   85fa2:	4403      	add	r3, r0
   85fa4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85fa6:	2300      	movs	r3, #0
   85fa8:	8013      	strh	r3, [r2, #0]
   85faa:	e7a4      	b.n	85ef6 <UDPHS_Handler+0x252>
			udd_ctrl_stall_data();
   85fac:	4bac      	ldr	r3, [pc, #688]	; (86260 <UDPHS_Handler+0x5bc>)
   85fae:	4798      	blx	r3
			udd_ack_out_received(0);
   85fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
   85fb4:	4bab      	ldr	r3, [pc, #684]	; (86264 <UDPHS_Handler+0x5c0>)
   85fb6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_stall_data();
   85fbe:	4ba8      	ldr	r3, [pc, #672]	; (86260 <UDPHS_Handler+0x5bc>)
   85fc0:	4798      	blx	r3
			udd_ack_out_received(0);
   85fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
   85fc6:	4ba7      	ldr	r3, [pc, #668]	; (86264 <UDPHS_Handler+0x5c0>)
   85fc8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_out(0);
   85fd0:	4ba4      	ldr	r3, [pc, #656]	; (86264 <UDPHS_Handler+0x5c0>)
   85fd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85fd6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   85fda:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85fde:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85fe2:	f040 8170 	bne.w	862c6 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85fe6:	4ba0      	ldr	r3, [pc, #640]	; (86268 <UDPHS_Handler+0x5c4>)
   85fe8:	781b      	ldrb	r3, [r3, #0]
   85fea:	2b03      	cmp	r3, #3
   85fec:	f040 816b 	bne.w	862c6 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   85ff0:	2220      	movs	r2, #32
   85ff2:	4b9c      	ldr	r3, [pc, #624]	; (86264 <UDPHS_Handler+0x5c0>)
   85ff4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_in(0);
   85ffc:	4b99      	ldr	r3, [pc, #612]	; (86264 <UDPHS_Handler+0x5c0>)
   85ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   86002:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   86006:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8600a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8600e:	f040 815a 	bne.w	862c6 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   86012:	4b95      	ldr	r3, [pc, #596]	; (86268 <UDPHS_Handler+0x5c4>)
   86014:	781b      	ldrb	r3, [r3, #0]
   86016:	2b01      	cmp	r3, #1
   86018:	d008      	beq.n	8602c <UDPHS_Handler+0x388>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   8601a:	2b04      	cmp	r3, #4
   8601c:	f040 8153 	bne.w	862c6 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   86020:	2220      	movs	r2, #32
   86022:	4b90      	ldr	r3, [pc, #576]	; (86264 <UDPHS_Handler+0x5c0>)
   86024:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   86028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_send_zlp_in();
   8602c:	4b8f      	ldr	r3, [pc, #572]	; (8626c <UDPHS_Handler+0x5c8>)
   8602e:	4798      	blx	r3
   86030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (udd_endpoint_dma_get_status(ep)
   86034:	4b8e      	ldr	r3, [pc, #568]	; (86270 <UDPHS_Handler+0x5cc>)
   86036:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   8603a:	68da      	ldr	r2, [r3, #12]
   8603c:	f012 0f01 	tst.w	r2, #1
   86040:	f040 8141 	bne.w	862c6 <UDPHS_Handler+0x622>
			udd_disable_endpoint_dma_interrupt(ep);
   86044:	4987      	ldr	r1, [pc, #540]	; (86264 <UDPHS_Handler+0x5c0>)
   86046:	690a      	ldr	r2, [r1, #16]
   86048:	ea22 0606 	bic.w	r6, r2, r6
   8604c:	610e      	str	r6, [r1, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8604e:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   86050:	0c1b      	lsrs	r3, r3, #16
   86052:	d008      	beq.n	86066 <UDPHS_Handler+0x3c2>
				ptr_job->buf_cnt -= nb_remaining;
   86054:	4a87      	ldr	r2, [pc, #540]	; (86274 <UDPHS_Handler+0x5d0>)
   86056:	006c      	lsls	r4, r5, #1
   86058:	1965      	adds	r5, r4, r5
   8605a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   8605e:	68e9      	ldr	r1, [r5, #12]
   86060:	1acb      	subs	r3, r1, r3
   86062:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   86064:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
   86066:	4b84      	ldr	r3, [pc, #528]	; (86278 <UDPHS_Handler+0x5d4>)
   86068:	4798      	blx	r3
   8606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   8606e:	0163      	lsls	r3, r4, #5
   86070:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86074:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86078:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8607c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   86080:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   86084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   86088:	4602      	mov	r2, r0
   8608a:	2100      	movs	r1, #0
   8608c:	4879      	ldr	r0, [pc, #484]	; (86274 <UDPHS_Handler+0x5d0>)
   8608e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   86092:	4b7a      	ldr	r3, [pc, #488]	; (8627c <UDPHS_Handler+0x5d8>)
   86094:	4798      	blx	r3
   86096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8609a:	3301      	adds	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8609c:	2b07      	cmp	r3, #7
   8609e:	f000 80fd 	beq.w	8629c <UDPHS_Handler+0x5f8>
   860a2:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   860a4:	461c      	mov	r4, r3
   860a6:	1e5d      	subs	r5, r3, #1
   860a8:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   860aa:	690f      	ldr	r7, [r1, #16]
   860ac:	fa0e f605 	lsl.w	r6, lr, r5
   860b0:	4237      	tst	r7, r6
   860b2:	d002      	beq.n	860ba <UDPHS_Handler+0x416>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   860b4:	694a      	ldr	r2, [r1, #20]
   860b6:	4216      	tst	r6, r2
   860b8:	d1bc      	bne.n	86034 <UDPHS_Handler+0x390>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   860ba:	690f      	ldr	r7, [r1, #16]
   860bc:	fa0c f604 	lsl.w	r6, ip, r4
   860c0:	4237      	tst	r7, r6
   860c2:	d0ea      	beq.n	8609a <UDPHS_Handler+0x3f6>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   860c4:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   860c8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   860cc:	f412 6f00 	tst.w	r2, #2048	; 0x800
   860d0:	d006      	beq.n	860e0 <UDPHS_Handler+0x43c>
					&& !Is_udd_tx_pkt_ready(ep)) {
   860d2:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   860d6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   860da:	f412 6f00 	tst.w	r2, #2048	; 0x800
   860de:	d0c6      	beq.n	8606e <UDPHS_Handler+0x3ca>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   860e0:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   860e4:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   860e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   860ec:	d0d5      	beq.n	8609a <UDPHS_Handler+0x3f6>
					&& (0 == udd_nb_busy_bank(ep))) {
   860ee:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   860f2:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   860f6:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   860fa:	d1ce      	bne.n	8609a <UDPHS_Handler+0x3f6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   860fc:	4b59      	ldr	r3, [pc, #356]	; (86264 <UDPHS_Handler+0x5c0>)
   860fe:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   86102:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   86106:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   8610a:	691a      	ldr	r2, [r3, #16]
   8610c:	ea22 0606 	bic.w	r6, r2, r6
   86110:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   86112:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   86116:	4b57      	ldr	r3, [pc, #348]	; (86274 <UDPHS_Handler+0x5d0>)
   86118:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   8611c:	f898 2014 	ldrb.w	r2, [r8, #20]
   86120:	f36f 0282 	bfc	r2, #2, #1
   86124:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   86128:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   8612c:	f023 0302 	bic.w	r3, r3, #2
   86130:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   86134:	2320      	movs	r3, #32
   86136:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   8613a:	2340      	movs	r3, #64	; 0x40
   8613c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   86140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_reset();
   86144:	2210      	movs	r2, #16
   86146:	4b47      	ldr	r3, [pc, #284]	; (86264 <UDPHS_Handler+0x5c0>)
   86148:	619a      	str	r2, [r3, #24]
   8614a:	4d4a      	ldr	r5, [pc, #296]	; (86274 <UDPHS_Handler+0x5d0>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8614c:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8614e:	2701      	movs	r7, #1
   86150:	4e4a      	ldr	r6, [pc, #296]	; (8627c <UDPHS_Handler+0x5d8>)
   86152:	3401      	adds	r4, #1
   86154:	b2e4      	uxtb	r4, r4
   86156:	4622      	mov	r2, r4
   86158:	4639      	mov	r1, r7
   8615a:	4628      	mov	r0, r5
   8615c:	47b0      	blx	r6
   8615e:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   86160:	2c06      	cmp	r4, #6
   86162:	d1f6      	bne.n	86152 <UDPHS_Handler+0x4ae>
		udc_reset();
   86164:	4b46      	ldr	r3, [pc, #280]	; (86280 <UDPHS_Handler+0x5dc>)
   86166:	4798      	blx	r3
	udd_configure_address(0);
   86168:	4b3e      	ldr	r3, [pc, #248]	; (86264 <UDPHS_Handler+0x5c0>)
   8616a:	681a      	ldr	r2, [r3, #0]
   8616c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86170:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   86172:	681a      	ldr	r2, [r3, #0]
   86174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   86178:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   8617a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8617e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   86182:	f022 0203 	bic.w	r2, r2, #3
   86186:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   8618a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   8618e:	2201      	movs	r2, #1
   86190:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86194:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   86198:	b672      	cpsid	i
   8619a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8619e:	2000      	movs	r0, #0
   861a0:	4938      	ldr	r1, [pc, #224]	; (86284 <UDPHS_Handler+0x5e0>)
   861a2:	7008      	strb	r0, [r1, #0]
	udd_enable_setup_received_interrupt(0);
   861a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   861a8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   861ac:	f44f 7100 	mov.w	r1, #512	; 0x200
   861b0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   861b4:	6919      	ldr	r1, [r3, #16]
   861b6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   861ba:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   861bc:	b92a      	cbnz	r2, 861ca <UDPHS_Handler+0x526>
		cpu_irq_enable();
   861be:	2201      	movs	r2, #1
   861c0:	4b30      	ldr	r3, [pc, #192]	; (86284 <UDPHS_Handler+0x5e0>)
   861c2:	701a      	strb	r2, [r3, #0]
   861c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   861c8:	b662      	cpsie	i
		udd_ctrl_init();
   861ca:	4b2f      	ldr	r3, [pc, #188]	; (86288 <UDPHS_Handler+0x5e4>)
   861cc:	4798      	blx	r3
		udd_enable_sof_interrupt();
   861ce:	4b25      	ldr	r3, [pc, #148]	; (86264 <UDPHS_Handler+0x5c0>)
   861d0:	691a      	ldr	r2, [r3, #16]
   861d2:	f042 0208 	orr.w	r2, r2, #8
   861d6:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   861d8:	691a      	ldr	r2, [r3, #16]
   861da:	f042 0204 	orr.w	r2, r2, #4
   861de:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   861e0:	691a      	ldr	r2, [r3, #16]
   861e2:	f042 0202 	orr.w	r2, r2, #2
   861e6:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   861e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_wake_up();
   861ec:	4b1d      	ldr	r3, [pc, #116]	; (86264 <UDPHS_Handler+0x5c0>)
   861ee:	2220      	movs	r2, #32
   861f0:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   861f2:	691a      	ldr	r2, [r3, #16]
   861f4:	f022 0202 	bic.w	r2, r2, #2
   861f8:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   861fa:	691a      	ldr	r2, [r3, #16]
   861fc:	f042 0220 	orr.w	r2, r2, #32
   86200:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   86202:	2202      	movs	r2, #2
   86204:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   86206:	201d      	movs	r0, #29
   86208:	4b20      	ldr	r3, [pc, #128]	; (8628c <UDPHS_Handler+0x5e8>)
   8620a:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   8620c:	4b20      	ldr	r3, [pc, #128]	; (86290 <UDPHS_Handler+0x5ec>)
   8620e:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   86210:	2000      	movs	r0, #0
   86212:	4b20      	ldr	r3, [pc, #128]	; (86294 <UDPHS_Handler+0x5f0>)
   86214:	4798      	blx	r3
		goto udd_interrupt_end;
   86216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_sleep_mode(true); // Enter in IDLE mode
   8621a:	2001      	movs	r0, #1
   8621c:	4b1d      	ldr	r3, [pc, #116]	; (86294 <UDPHS_Handler+0x5f0>)
   8621e:	4798      	blx	r3
		udd_ack_suspend();
   86220:	4b10      	ldr	r3, [pc, #64]	; (86264 <UDPHS_Handler+0x5c0>)
   86222:	2202      	movs	r2, #2
   86224:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   86226:	2220      	movs	r2, #32
   86228:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   8622a:	691a      	ldr	r2, [r3, #16]
   8622c:	f022 0220 	bic.w	r2, r2, #32
   86230:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   86232:	691a      	ldr	r2, [r3, #16]
   86234:	f042 0202 	orr.w	r2, r2, #2
   86238:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   8623a:	691a      	ldr	r2, [r3, #16]
   8623c:	f042 0208 	orr.w	r2, r2, #8
   86240:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   86242:	691a      	ldr	r2, [r3, #16]
   86244:	f042 0204 	orr.w	r2, r2, #4
   86248:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   8624a:	4b13      	ldr	r3, [pc, #76]	; (86298 <UDPHS_Handler+0x5f4>)
   8624c:	4798      	blx	r3
		goto udd_interrupt_end;
   8624e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86252:	bf00      	nop
   86254:	20002dec 	.word	0x20002dec
   86258:	20002308 	.word	0x20002308
   8625c:	20002306 	.word	0x20002306
   86260:	00085905 	.word	0x00085905
   86264:	400a4000 	.word	0x400a4000
   86268:	2000230a 	.word	0x2000230a
   8626c:	0008591d 	.word	0x0008591d
   86270:	400a4300 	.word	0x400a4300
   86274:	2000230c 	.word	0x2000230c
   86278:	00085b21 	.word	0x00085b21
   8627c:	00085ae9 	.word	0x00085ae9
   86280:	00084709 	.word	0x00084709
   86284:	200006ea 	.word	0x200006ea
   86288:	000858b1 	.word	0x000858b1
   8628c:	00085409 	.word	0x00085409
   86290:	00083025 	.word	0x00083025
   86294:	00085841 	.word	0x00085841
   86298:	0008303d 	.word	0x0008303d
	if (Is_udd_reset()) {
   8629c:	4b0b      	ldr	r3, [pc, #44]	; (862cc <UDPHS_Handler+0x628>)
   8629e:	695b      	ldr	r3, [r3, #20]
   862a0:	f013 0f10 	tst.w	r3, #16
   862a4:	f47f af4e 	bne.w	86144 <UDPHS_Handler+0x4a0>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   862a8:	4b08      	ldr	r3, [pc, #32]	; (862cc <UDPHS_Handler+0x628>)
   862aa:	691b      	ldr	r3, [r3, #16]
   862ac:	f013 0f02 	tst.w	r3, #2
   862b0:	d004      	beq.n	862bc <UDPHS_Handler+0x618>
   862b2:	4b06      	ldr	r3, [pc, #24]	; (862cc <UDPHS_Handler+0x628>)
   862b4:	695b      	ldr	r3, [r3, #20]
   862b6:	f013 0f02 	tst.w	r3, #2
   862ba:	d197      	bne.n	861ec <UDPHS_Handler+0x548>
	if (Is_udd_wake_up()) {
   862bc:	4b03      	ldr	r3, [pc, #12]	; (862cc <UDPHS_Handler+0x628>)
   862be:	695b      	ldr	r3, [r3, #20]
   862c0:	f013 0f20 	tst.w	r3, #32
   862c4:	d1a9      	bne.n	8621a <UDPHS_Handler+0x576>
   862c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   862ca:	bf00      	nop
   862cc:	400a4000 	.word	0x400a4000

000862d0 <udd_attach>:
{
   862d0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   862d2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   862d6:	b672      	cpsid	i
   862d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   862dc:	2200      	movs	r2, #0
   862de:	4b1d      	ldr	r3, [pc, #116]	; (86354 <udd_attach+0x84>)
   862e0:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   862e2:	2001      	movs	r0, #1
   862e4:	4b1c      	ldr	r3, [pc, #112]	; (86358 <udd_attach+0x88>)
   862e6:	4798      	blx	r3
	udd_enable_periph_ck();
   862e8:	201d      	movs	r0, #29
   862ea:	4b1c      	ldr	r3, [pc, #112]	; (8635c <udd_attach+0x8c>)
   862ec:	4798      	blx	r3
	udd_attach_device();
   862ee:	4b1c      	ldr	r3, [pc, #112]	; (86360 <udd_attach+0x90>)
   862f0:	681a      	ldr	r2, [r3, #0]
   862f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   862f6:	601a      	str	r2, [r3, #0]
   862f8:	681a      	ldr	r2, [r3, #0]
   862fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   862fe:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   86300:	691a      	ldr	r2, [r3, #16]
   86302:	f042 0210 	orr.w	r2, r2, #16
   86306:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   86308:	691a      	ldr	r2, [r3, #16]
   8630a:	f042 0202 	orr.w	r2, r2, #2
   8630e:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   86310:	691a      	ldr	r2, [r3, #16]
   86312:	f042 0220 	orr.w	r2, r2, #32
   86316:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   86318:	691a      	ldr	r2, [r3, #16]
   8631a:	f042 0208 	orr.w	r2, r2, #8
   8631e:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   86320:	691a      	ldr	r2, [r3, #16]
   86322:	f042 0204 	orr.w	r2, r2, #4
   86326:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   86328:	2208      	movs	r2, #8
   8632a:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   8632c:	2204      	movs	r2, #4
   8632e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   86330:	2210      	movs	r2, #16
   86332:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   86334:	2202      	movs	r2, #2
   86336:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   86338:	2220      	movs	r2, #32
   8633a:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   8633c:	201d      	movs	r0, #29
   8633e:	4b09      	ldr	r3, [pc, #36]	; (86364 <udd_attach+0x94>)
   86340:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   86342:	b92c      	cbnz	r4, 86350 <udd_attach+0x80>
		cpu_irq_enable();
   86344:	2201      	movs	r2, #1
   86346:	4b03      	ldr	r3, [pc, #12]	; (86354 <udd_attach+0x84>)
   86348:	701a      	strb	r2, [r3, #0]
   8634a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8634e:	b662      	cpsie	i
   86350:	bd10      	pop	{r4, pc}
   86352:	bf00      	nop
   86354:	200006ea 	.word	0x200006ea
   86358:	00085841 	.word	0x00085841
   8635c:	000853d5 	.word	0x000853d5
   86360:	400a4000 	.word	0x400a4000
   86364:	00085409 	.word	0x00085409

00086368 <udd_enable>:
{
   86368:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   8636a:	4b2a      	ldr	r3, [pc, #168]	; (86414 <udd_enable+0xac>)
   8636c:	4798      	blx	r3
	udd_enable_periph_ck();
   8636e:	201d      	movs	r0, #29
   86370:	4b29      	ldr	r3, [pc, #164]	; (86418 <udd_enable+0xb0>)
   86372:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86374:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   86378:	b672      	cpsid	i
   8637a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8637e:	2200      	movs	r2, #0
   86380:	4b26      	ldr	r3, [pc, #152]	; (8641c <udd_enable+0xb4>)
   86382:	701a      	strb	r2, [r3, #0]
	udd_enable_periph();
   86384:	4926      	ldr	r1, [pc, #152]	; (86420 <udd_enable+0xb8>)
   86386:	680b      	ldr	r3, [r1, #0]
   86388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8638c:	600b      	str	r3, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8638e:	4b25      	ldr	r3, [pc, #148]	; (86424 <udd_enable+0xbc>)
   86390:	2150      	movs	r1, #80	; 0x50
   86392:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   86396:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8639a:	6019      	str	r1, [r3, #0]
		udd_ep_job[i].busy = false;
   8639c:	4822      	ldr	r0, [pc, #136]	; (86428 <udd_enable+0xc0>)
   8639e:	0053      	lsls	r3, r2, #1
   863a0:	1899      	adds	r1, r3, r2
   863a2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   863a6:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   863a8:	4413      	add	r3, r2
   863aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   863ae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   863b2:	f36f 0182 	bfc	r1, #2, #1
   863b6:	7519      	strb	r1, [r3, #20]
   863b8:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   863ba:	2a06      	cmp	r2, #6
   863bc:	d1ef      	bne.n	8639e <udd_enable+0x36>
	udd_high_speed_enable();
   863be:	4a18      	ldr	r2, [pc, #96]	; (86420 <udd_enable+0xb8>)
   863c0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   863c4:	f023 0303 	bic.w	r3, r3, #3
   863c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   863cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   863d0:	4b16      	ldr	r3, [pc, #88]	; (8642c <udd_enable+0xc4>)
   863d2:	4798      	blx	r3
	udd_b_idle = false;
   863d4:	2200      	movs	r2, #0
   863d6:	4b16      	ldr	r3, [pc, #88]	; (86430 <udd_enable+0xc8>)
   863d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   863da:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   863de:	b672      	cpsid	i
   863e0:	f3bf 8f5f 	dmb	sy
   863e4:	490d      	ldr	r1, [pc, #52]	; (8641c <udd_enable+0xb4>)
   863e6:	700a      	strb	r2, [r1, #0]
   863e8:	4912      	ldr	r1, [pc, #72]	; (86434 <udd_enable+0xcc>)
   863ea:	78ca      	ldrb	r2, [r1, #3]
   863ec:	3201      	adds	r2, #1
   863ee:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   863f0:	b92b      	cbnz	r3, 863fe <udd_enable+0x96>
		cpu_irq_enable();
   863f2:	2201      	movs	r2, #1
   863f4:	4b09      	ldr	r3, [pc, #36]	; (8641c <udd_enable+0xb4>)
   863f6:	701a      	strb	r2, [r3, #0]
   863f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   863fc:	b662      	cpsie	i
	udd_attach();
   863fe:	4b0e      	ldr	r3, [pc, #56]	; (86438 <udd_enable+0xd0>)
   86400:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   86402:	b92c      	cbnz	r4, 86410 <udd_enable+0xa8>
		cpu_irq_enable();
   86404:	2201      	movs	r2, #1
   86406:	4b05      	ldr	r3, [pc, #20]	; (8641c <udd_enable+0xb4>)
   86408:	701a      	strb	r2, [r3, #0]
   8640a:	f3bf 8f5f 	dmb	sy
   8640e:	b662      	cpsie	i
   86410:	bd10      	pop	{r4, pc}
   86412:	bf00      	nop
   86414:	000843e9 	.word	0x000843e9
   86418:	000853d5 	.word	0x000853d5
   8641c:	200006ea 	.word	0x200006ea
   86420:	400a4000 	.word	0x400a4000
   86424:	e000e100 	.word	0xe000e100
   86428:	2000230c 	.word	0x2000230c
   8642c:	00085451 	.word	0x00085451
   86430:	20002305 	.word	0x20002305
   86434:	20002dd8 	.word	0x20002dd8
   86438:	000862d1 	.word	0x000862d1

0008643c <udd_detach>:
{
   8643c:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   8643e:	201d      	movs	r0, #29
   86440:	4b08      	ldr	r3, [pc, #32]	; (86464 <udd_detach+0x28>)
   86442:	4798      	blx	r3
	udd_detach_device();
   86444:	4b08      	ldr	r3, [pc, #32]	; (86468 <udd_detach+0x2c>)
   86446:	681a      	ldr	r2, [r3, #0]
   86448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8644c:	601a      	str	r2, [r3, #0]
   8644e:	681a      	ldr	r2, [r3, #0]
   86450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   86454:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   86456:	201d      	movs	r0, #29
   86458:	4b04      	ldr	r3, [pc, #16]	; (8646c <udd_detach+0x30>)
   8645a:	4798      	blx	r3
	udd_sleep_mode(false);
   8645c:	2000      	movs	r0, #0
   8645e:	4b04      	ldr	r3, [pc, #16]	; (86470 <udd_detach+0x34>)
   86460:	4798      	blx	r3
   86462:	bd08      	pop	{r3, pc}
   86464:	000853d5 	.word	0x000853d5
   86468:	400a4000 	.word	0x400a4000
   8646c:	00085409 	.word	0x00085409
   86470:	00085841 	.word	0x00085841

00086474 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   86474:	4b02      	ldr	r3, [pc, #8]	; (86480 <udd_is_high_speed+0xc>)
   86476:	6958      	ldr	r0, [r3, #20]
}
   86478:	f000 0001 	and.w	r0, r0, #1
   8647c:	4770      	bx	lr
   8647e:	bf00      	nop
   86480:	400a4000 	.word	0x400a4000

00086484 <udd_set_address>:
	udd_disable_address();
   86484:	4b08      	ldr	r3, [pc, #32]	; (864a8 <udd_set_address+0x24>)
   86486:	681a      	ldr	r2, [r3, #0]
   86488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   8648c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   8648e:	681a      	ldr	r2, [r3, #0]
   86490:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86494:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86498:	4302      	orrs	r2, r0
   8649a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8649c:	681a      	ldr	r2, [r3, #0]
   8649e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   864a2:	601a      	str	r2, [r3, #0]
   864a4:	4770      	bx	lr
   864a6:	bf00      	nop
   864a8:	400a4000 	.word	0x400a4000

000864ac <udd_getaddress>:
	return udd_get_configured_address();
   864ac:	4b02      	ldr	r3, [pc, #8]	; (864b8 <udd_getaddress+0xc>)
   864ae:	6818      	ldr	r0, [r3, #0]
}
   864b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   864b4:	4770      	bx	lr
   864b6:	bf00      	nop
   864b8:	400a4000 	.word	0x400a4000

000864bc <udd_get_frame_number>:
	return udd_frame_number();
   864bc:	4b02      	ldr	r3, [pc, #8]	; (864c8 <udd_get_frame_number+0xc>)
   864be:	6858      	ldr	r0, [r3, #4]
}
   864c0:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   864c4:	4770      	bx	lr
   864c6:	bf00      	nop
   864c8:	400a4000 	.word	0x400a4000

000864cc <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   864cc:	4b02      	ldr	r3, [pc, #8]	; (864d8 <udd_get_micro_frame_number+0xc>)
   864ce:	6858      	ldr	r0, [r3, #4]
}
   864d0:	f000 0007 	and.w	r0, r0, #7
   864d4:	4770      	bx	lr
   864d6:	bf00      	nop
   864d8:	400a4000 	.word	0x400a4000

000864dc <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   864dc:	4b01      	ldr	r3, [pc, #4]	; (864e4 <udd_set_setup_payload+0x8>)
   864de:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   864e0:	8199      	strh	r1, [r3, #12]
   864e2:	4770      	bx	lr
   864e4:	20002dec 	.word	0x20002dec

000864e8 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   864e8:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   864ec:	2a06      	cmp	r2, #6
   864ee:	d900      	bls.n	864f2 <udd_ep_free+0xa>
   864f0:	4770      	bx	lr
{
   864f2:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   864f4:	0153      	lsls	r3, r2, #5
   864f6:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   864fa:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   864fe:	2101      	movs	r1, #1
   86500:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   86504:	4603      	mov	r3, r0
	udd_configure_endpoint_bank(ep_index, 0);
   86506:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   8650a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   8650e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   86512:	1e56      	subs	r6, r2, #1
   86514:	4c07      	ldr	r4, [pc, #28]	; (86534 <udd_ep_free+0x4c>)
   86516:	fa06 f501 	lsl.w	r5, r6, r1
   8651a:	19a8      	adds	r0, r5, r6
   8651c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   86520:	4b05      	ldr	r3, [pc, #20]	; (86538 <udd_ep_free+0x50>)
   86522:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   86524:	4435      	add	r5, r6
   86526:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   8652a:	7d23      	ldrb	r3, [r4, #20]
   8652c:	f36f 0382 	bfc	r3, #2, #1
   86530:	7523      	strb	r3, [r4, #20]
   86532:	bd70      	pop	{r4, r5, r6, pc}
   86534:	2000230c 	.word	0x2000230c
   86538:	00085ae9 	.word	0x00085ae9

0008653c <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8653c:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   86540:	0143      	lsls	r3, r0, #5
   86542:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86546:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8654a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   8654e:	f013 0f20 	tst.w	r3, #32
   86552:	d109      	bne.n	86568 <udd_ep_is_halted+0x2c>
   86554:	3801      	subs	r0, #1
   86556:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8655a:	4b04      	ldr	r3, [pc, #16]	; (8656c <udd_ep_is_halted+0x30>)
   8655c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   86560:	7d00      	ldrb	r0, [r0, #20]
   86562:	f3c0 0080 	ubfx	r0, r0, #2, #1
   86566:	4770      	bx	lr
   86568:	2001      	movs	r0, #1
}
   8656a:	4770      	bx	lr
   8656c:	2000230c 	.word	0x2000230c

00086570 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86570:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   86574:	2b06      	cmp	r3, #6
   86576:	d852      	bhi.n	8661e <udd_ep_set_halt+0xae>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   86578:	015a      	lsls	r2, r3, #5
   8657a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8657e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   86582:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   86586:	f012 0f20 	tst.w	r2, #32
   8658a:	d14a      	bne.n	86622 <udd_ep_set_halt+0xb2>
{
   8658c:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   8658e:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   86590:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   86594:	4a26      	ldr	r2, [pc, #152]	; (86630 <udd_ep_set_halt+0xc0>)
   86596:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   8659a:	7d12      	ldrb	r2, [r2, #20]
   8659c:	f012 0f04 	tst.w	r2, #4
   865a0:	d141      	bne.n	86626 <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   865a2:	f012 0f01 	tst.w	r2, #1
   865a6:	d141      	bne.n	8662c <udd_ep_set_halt+0xbc>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   865a8:	f010 0f80 	tst.w	r0, #128	; 0x80
   865ac:	d113      	bne.n	865d6 <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   865ae:	015b      	lsls	r3, r3, #5
   865b0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   865b4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   865b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   865bc:	f022 0202 	bic.w	r2, r2, #2
   865c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   865c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   865c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   865cc:	2220      	movs	r2, #32
   865ce:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   865d2:	2001      	movs	r0, #1
   865d4:	e028      	b.n	86628 <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   865d6:	015a      	lsls	r2, r3, #5
   865d8:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   865dc:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   865e0:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   865e4:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   865e8:	d0e1      	beq.n	865ae <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   865ea:	4a11      	ldr	r2, [pc, #68]	; (86630 <udd_ep_set_halt+0xc0>)
   865ec:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   865f0:	f101 0210 	add.w	r2, r1, #16
   865f4:	7d09      	ldrb	r1, [r1, #20]
   865f6:	f041 0104 	orr.w	r1, r1, #4
   865fa:	7111      	strb	r1, [r2, #4]
			udd_enable_bank_interrupt(ep_index);
   865fc:	490d      	ldr	r1, [pc, #52]	; (86634 <udd_ep_set_halt+0xc4>)
   865fe:	f103 0208 	add.w	r2, r3, #8
   86602:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   86606:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8660a:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   8660c:	6908      	ldr	r0, [r1, #16]
   8660e:	f44f 7280 	mov.w	r2, #256	; 0x100
   86612:	fa02 f303 	lsl.w	r3, r2, r3
   86616:	4303      	orrs	r3, r0
   86618:	610b      	str	r3, [r1, #16]
			return true;
   8661a:	2001      	movs	r0, #1
   8661c:	e004      	b.n	86628 <udd_ep_set_halt+0xb8>
		return false;
   8661e:	2000      	movs	r0, #0
   86620:	4770      	bx	lr
		return true; // Already STALL
   86622:	2001      	movs	r0, #1
   86624:	4770      	bx	lr
   86626:	2001      	movs	r0, #1
}
   86628:	bc10      	pop	{r4}
   8662a:	4770      	bx	lr
		return false; // Job on going, stall impossible
   8662c:	2000      	movs	r0, #0
   8662e:	e7fb      	b.n	86628 <udd_ep_set_halt+0xb8>
   86630:	2000230c 	.word	0x2000230c
   86634:	400a4000 	.word	0x400a4000

00086638 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   86638:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   8663c:	2806      	cmp	r0, #6
   8663e:	d864      	bhi.n	8670a <udd_ep_clear_halt+0xd2>
{
   86640:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   86642:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   86644:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   86648:	4b37      	ldr	r3, [pc, #220]	; (86728 <udd_ep_clear_halt+0xf0>)
   8664a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   8664e:	7d1b      	ldrb	r3, [r3, #20]
   86650:	f013 0f04 	tst.w	r3, #4
   86654:	d05b      	beq.n	8670e <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   86656:	460b      	mov	r3, r1
   86658:	4933      	ldr	r1, [pc, #204]	; (86728 <udd_ep_clear_halt+0xf0>)
   8665a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   8665e:	7d19      	ldrb	r1, [r3, #20]
   86660:	f36f 0182 	bfc	r1, #2, #1
   86664:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   86666:	4b31      	ldr	r3, [pc, #196]	; (8672c <udd_ep_clear_halt+0xf4>)
   86668:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   8666c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   86670:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   86674:	6919      	ldr	r1, [r3, #16]
   86676:	f44f 7480 	mov.w	r4, #256	; 0x100
   8667a:	4084      	lsls	r4, r0
   8667c:	ea21 0104 	bic.w	r1, r1, r4
   86680:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   86682:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   86686:	f013 0f20 	tst.w	r3, #32
   8668a:	d024      	beq.n	866d6 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   8668c:	0143      	lsls	r3, r0, #5
   8668e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86692:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86696:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8669a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8669e:	d00b      	beq.n	866b8 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   866a0:	0143      	lsls	r3, r0, #5
   866a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   866a6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   866aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   866ae:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   866b2:	2140      	movs	r1, #64	; 0x40
   866b4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   866b8:	0143      	lsls	r3, r0, #5
   866ba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   866be:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   866c2:	2120      	movs	r1, #32
   866c4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   866c8:	4618      	mov	r0, r3
		udd_enable_endpoint_bank_autoswitch(ep);
   866ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   866ce:	f043 0302 	orr.w	r3, r3, #2
   866d2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   866d6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   866da:	4913      	ldr	r1, [pc, #76]	; (86728 <udd_ep_clear_halt+0xf0>)
   866dc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   866e0:	7d1b      	ldrb	r3, [r3, #20]
   866e2:	f013 0f01 	tst.w	r3, #1
   866e6:	d101      	bne.n	866ec <udd_ep_clear_halt+0xb4>
	return true;
   866e8:	2001      	movs	r0, #1
   866ea:	bd38      	pop	{r3, r4, r5, pc}
			ptr_job->busy = false;
   866ec:	4608      	mov	r0, r1
   866ee:	0051      	lsls	r1, r2, #1
   866f0:	188b      	adds	r3, r1, r2
   866f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   866f6:	7d1c      	ldrb	r4, [r3, #20]
   866f8:	f36f 0400 	bfc	r4, #0, #1
   866fc:	751c      	strb	r4, [r3, #20]
			ptr_job->call_nohalt();
   866fe:	440a      	add	r2, r1
   86700:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
   86704:	4798      	blx	r3
	return true;
   86706:	2001      	movs	r0, #1
   86708:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   8670a:	2000      	movs	r0, #0
   8670c:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep)) {
   8670e:	0143      	lsls	r3, r0, #5
   86710:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86714:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86718:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8671c:	f013 0f20 	tst.w	r3, #32
   86720:	d1b4      	bne.n	8668c <udd_ep_clear_halt+0x54>
	return true;
   86722:	2001      	movs	r0, #1
}
   86724:	bd38      	pop	{r3, r4, r5, pc}
   86726:	bf00      	nop
   86728:	2000230c 	.word	0x2000230c
   8672c:	400a4000 	.word	0x400a4000

00086730 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   86730:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   86734:	2806      	cmp	r0, #6
   86736:	d861      	bhi.n	867fc <udd_ep_run+0xcc>
{
   86738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   8673a:	0144      	lsls	r4, r0, #5
   8673c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   86740:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   86744:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   86748:	f014 0f01 	tst.w	r4, #1
   8674c:	d058      	beq.n	86800 <udd_ep_run+0xd0>
			|| Is_udd_endpoint_stall_requested(ep)
   8674e:	0144      	lsls	r4, r0, #5
   86750:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   86754:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   86758:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   8675c:	f014 0f20 	tst.w	r4, #32
   86760:	d150      	bne.n	86804 <udd_ep_run+0xd4>
	ptr_job = &udd_ep_job[ep - 1];
   86762:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   86764:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   86768:	4d29      	ldr	r5, [pc, #164]	; (86810 <udd_ep_run+0xe0>)
   8676a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   8676e:	7d2d      	ldrb	r5, [r5, #20]
   86770:	f015 0f04 	tst.w	r5, #4
   86774:	d148      	bne.n	86808 <udd_ep_run+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86776:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   8677a:	b672      	cpsid	i
   8677c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86780:	f04f 0e00 	mov.w	lr, #0
   86784:	4e23      	ldr	r6, [pc, #140]	; (86814 <udd_ep_run+0xe4>)
   86786:	f886 e000 	strb.w	lr, [r6]
	if (ptr_job->busy == true) {
   8678a:	f015 0f01 	tst.w	r5, #1
   8678e:	d008      	beq.n	867a2 <udd_ep_run+0x72>
	if (cpu_irq_is_enabled_flags(flags))
   86790:	2f00      	cmp	r7, #0
   86792:	d13b      	bne.n	8680c <udd_ep_run+0xdc>
		cpu_irq_enable();
   86794:	2201      	movs	r2, #1
   86796:	7032      	strb	r2, [r6, #0]
   86798:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8679c:	b662      	cpsie	i
		return false; // Job already on going
   8679e:	4670      	mov	r0, lr
   867a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job->busy = true;
   867a2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   867a6:	4e1a      	ldr	r6, [pc, #104]	; (86810 <udd_ep_run+0xe0>)
   867a8:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   867ac:	7d2e      	ldrb	r6, [r5, #20]
   867ae:	f046 0601 	orr.w	r6, r6, #1
   867b2:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   867b4:	b92f      	cbnz	r7, 867c2 <udd_ep_run+0x92>
		cpu_irq_enable();
   867b6:	2601      	movs	r6, #1
   867b8:	4d16      	ldr	r5, [pc, #88]	; (86814 <udd_ep_run+0xe4>)
   867ba:	702e      	strb	r6, [r5, #0]
   867bc:	f3bf 8f5f 	dmb	sy
   867c0:	b662      	cpsie	i
	ptr_job->buf = buf;
   867c2:	4f13      	ldr	r7, [pc, #76]	; (86810 <udd_ep_run+0xe0>)
   867c4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   867c8:	00ed      	lsls	r5, r5, #3
   867ca:	197e      	adds	r6, r7, r5
   867cc:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   867ce:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   867d0:	2200      	movs	r2, #0
   867d2:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   867d4:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   867d6:	9a06      	ldr	r2, [sp, #24]
   867d8:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   867da:	b911      	cbnz	r1, 867e2 <udd_ep_run+0xb2>
   867dc:	fab3 f183 	clz	r1, r3
   867e0:	0949      	lsrs	r1, r1, #5
   867e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   867e6:	4b0a      	ldr	r3, [pc, #40]	; (86810 <udd_ep_run+0xe0>)
   867e8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   867ec:	7d23      	ldrb	r3, [r4, #20]
   867ee:	f361 0341 	bfi	r3, r1, #1, #1
   867f2:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   867f4:	4b08      	ldr	r3, [pc, #32]	; (86818 <udd_ep_run+0xe8>)
   867f6:	4798      	blx	r3
	return true;
   867f8:	2001      	movs	r0, #1
   867fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   867fc:	2000      	movs	r0, #0
   867fe:	4770      	bx	lr
		return false; // Endpoint is halted
   86800:	2000      	movs	r0, #0
   86802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86804:	2000      	movs	r0, #0
   86806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86808:	2000      	movs	r0, #0
   8680a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Job already on going
   8680c:	2000      	movs	r0, #0
}
   8680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86810:	2000230c 	.word	0x2000230c
   86814:	200006ea 	.word	0x200006ea
   86818:	00085b21 	.word	0x00085b21

0008681c <udd_ep_alloc>:
{
   8681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86820:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   86822:	f000 060f 	and.w	r6, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   86826:	2e06      	cmp	r6, #6
   86828:	f200 8130 	bhi.w	86a8c <udd_ep_alloc+0x270>
	if (Is_udd_endpoint_enabled(ep)) {
   8682c:	0173      	lsls	r3, r6, #5
   8682e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86832:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86836:	f8d3 510c 	ldr.w	r5, [r3, #268]	; 0x10c
   8683a:	f015 0501 	ands.w	r5, r5, #1
   8683e:	f040 812a 	bne.w	86a96 <udd_ep_alloc+0x27a>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   86842:	f001 0403 	and.w	r4, r1, #3
   86846:	2c02      	cmp	r4, #2
   86848:	d047      	beq.n	868da <udd_ep_alloc+0xbe>
   8684a:	2c03      	cmp	r4, #3
   8684c:	d050      	beq.n	868f0 <udd_ep_alloc+0xd4>
   8684e:	2c01      	cmp	r4, #1
   86850:	d001      	beq.n	86856 <udd_ep_alloc+0x3a>
		return false;
   86852:	2300      	movs	r3, #0
   86854:	e11b      	b.n	86a8e <udd_ep_alloc+0x272>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   86856:	b15e      	cbz	r6, 86870 <udd_ep_alloc+0x54>
   86858:	f1a6 0e03 	sub.w	lr, r6, #3
   8685c:	fa5f fe8e 	uxtb.w	lr, lr
   86860:	f1be 0f01 	cmp.w	lr, #1
   86864:	bf94      	ite	ls
   86866:	f04f 0e00 	movls.w	lr, #0
   8686a:	f04f 0e01 	movhi.w	lr, #1
   8686e:	e001      	b.n	86874 <udd_ep_alloc+0x58>
   86870:	f04f 0e00 	mov.w	lr, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86874:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   86878:	f1be 0f00 	cmp.w	lr, #0
   8687c:	f000 8115 	beq.w	86aaa <udd_ep_alloc+0x28e>
		switch(MaxEndpointSize & (0x3u << 11)) {
   86880:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   86884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   86888:	d037      	beq.n	868fa <udd_ep_alloc+0xde>
			nb_tran = 1;
   8688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8688e:	bf0c      	ite	eq
   86890:	f04f 0c03 	moveq.w	ip, #3
   86894:	f04f 0c01 	movne.w	ip, #1
		MaxEndpointSize &= ~(0x3u << 11);
   86898:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   8689c:	b292      	uxth	r2, r2
   8689e:	0174      	lsls	r4, r6, #5
   868a0:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   868a4:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   868a8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
   868ac:	f427 777f 	bic.w	r7, r7, #1020	; 0x3fc
   868b0:	f027 0703 	bic.w	r7, r7, #3
   868b4:	0109      	lsls	r1, r1, #4
   868b6:	f001 0130 	and.w	r1, r1, #48	; 0x30
   868ba:	b240      	sxtb	r0, r0
   868bc:	2800      	cmp	r0, #0
   868be:	bfac      	ite	ge
   868c0:	4628      	movge	r0, r5
   868c2:	2008      	movlt	r0, #8
   868c4:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   868c8:	b29b      	uxth	r3, r3
   868ca:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   868ce:	d317      	bcc.n	86900 <udd_ep_alloc+0xe4>
   868d0:	2a08      	cmp	r2, #8
   868d2:	d930      	bls.n	86936 <udd_ep_alloc+0x11a>
   868d4:	0052      	lsls	r2, r2, #1
   868d6:	3a01      	subs	r2, #1
   868d8:	e014      	b.n	86904 <udd_ep_alloc+0xe8>
		nb_bank = UDD_BULK_NB_BANK(ep);
   868da:	2e04      	cmp	r6, #4
   868dc:	f240 80e1 	bls.w	86aa2 <udd_ep_alloc+0x286>
   868e0:	2e06      	cmp	r6, #6
   868e2:	f000 80e8 	beq.w	86ab6 <udd_ep_alloc+0x29a>
	bool b_iso_hbw = false;
   868e6:	f04f 0e00 	mov.w	lr, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   868ea:	f04f 0802 	mov.w	r8, #2
   868ee:	e0dc      	b.n	86aaa <udd_ep_alloc+0x28e>
	bool b_iso_hbw = false;
   868f0:	f04f 0e00 	mov.w	lr, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   868f4:	f04f 0801 	mov.w	r8, #1
   868f8:	e7be      	b.n	86878 <udd_ep_alloc+0x5c>
			nb_tran = 2;
   868fa:	f04f 0c02 	mov.w	ip, #2
   868fe:	e7cb      	b.n	86898 <udd_ep_alloc+0x7c>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   86900:	f240 72ff 	movw	r2, #2047	; 0x7ff
   86904:	fab2 f282 	clz	r2, r2
   86908:	ea41 1388 	orr.w	r3, r1, r8, lsl #6
   8690c:	4303      	orrs	r3, r0
   8690e:	f1c2 021c 	rsb	r2, r2, #28
   86912:	4313      	orrs	r3, r2
   86914:	f1be 0f00 	cmp.w	lr, #0
   86918:	d001      	beq.n	8691e <udd_ep_alloc+0x102>
   8691a:	ea4f 250c 	mov.w	r5, ip, lsl #8
   8691e:	432b      	orrs	r3, r5
   86920:	f3c3 0309 	ubfx	r3, r3, #0, #10
   86924:	433b      	orrs	r3, r7
   86926:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   8692a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   8692e:	2b00      	cmp	r3, #0
   86930:	db03      	blt.n	8693a <udd_ep_alloc+0x11e>
		return false;
   86932:	2300      	movs	r3, #0
   86934:	e0ab      	b.n	86a8e <udd_ep_alloc+0x272>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   86936:	220f      	movs	r2, #15
   86938:	e7e4      	b.n	86904 <udd_ep_alloc+0xe8>
	udd_enable_endpoint(ep);
   8693a:	2301      	movs	r3, #1
   8693c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   86940:	2306      	movs	r3, #6
   86942:	2700      	movs	r7, #0
		if (Is_udd_endpoint_enabled(i)) {
   86944:	485d      	ldr	r0, [pc, #372]	; (86abc <udd_ep_alloc+0x2a0>)
			udd_disable_endpoint(i);
   86946:	2401      	movs	r4, #1
   86948:	e003      	b.n	86952 <udd_ep_alloc+0x136>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8694a:	3b01      	subs	r3, #1
   8694c:	b2db      	uxtb	r3, r3
   8694e:	429e      	cmp	r6, r3
   86950:	d81e      	bhi.n	86990 <udd_ep_alloc+0x174>
		if (Is_udd_endpoint_enabled(i)) {
   86952:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   86956:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8695a:	f012 0f01 	tst.w	r2, #1
   8695e:	d0f4      	beq.n	8694a <udd_ep_alloc+0x12e>
   86960:	015a      	lsls	r2, r3, #5
   86962:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   86966:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   8696a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   8696e:	f3c1 1181 	ubfx	r1, r1, #6, #2
   86972:	005d      	lsls	r5, r3, #1
   86974:	40a9      	lsls	r1, r5
   86976:	430f      	orrs	r7, r1
   86978:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   8697a:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   8697e:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   86982:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   86986:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   8698a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   8698e:	e7dc      	b.n	8694a <udd_ep_alloc+0x12e>
   86990:	0075      	lsls	r5, r6, #1
   86992:	4634      	mov	r4, r6
   86994:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   86998:	4b49      	ldr	r3, [pc, #292]	; (86ac0 <udd_ep_alloc+0x2a4>)
   8699a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
		bool b_restart = ptr_job->busy;
   8699e:	4698      	mov	r8, r3
		udd_enable_endpoint(i);
   869a0:	f04f 0901 	mov.w	r9, #1
			b_restart = udd_ep_run(i,
   869a4:	f8df a11c 	ldr.w	sl, [pc, #284]	; 86ac4 <udd_ep_alloc+0x2a8>
   869a8:	e021      	b.n	869ee <udd_ep_alloc+0x1d2>
			if (NULL == ptr_job->call_trans) {
   869aa:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   869ae:	4a44      	ldr	r2, [pc, #272]	; (86ac0 <udd_ep_alloc+0x2a4>)
   869b0:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   869b4:	2c00      	cmp	r4, #0
   869b6:	d072      	beq.n	86a9e <udd_ep_alloc+0x282>
			if (Is_udd_endpoint_in(i)) {
   869b8:	f10e 0308 	add.w	r3, lr, #8
   869bc:	015b      	lsls	r3, r3, #5
   869be:	4a3f      	ldr	r2, [pc, #252]	; (86abc <udd_ep_alloc+0x2a0>)
   869c0:	58d3      	ldr	r3, [r2, r3]
   869c2:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   869c6:	bf18      	it	ne
   869c8:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   869cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   869d0:	4b3b      	ldr	r3, [pc, #236]	; (86ac0 <udd_ep_alloc+0x2a4>)
   869d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   869d6:	4602      	mov	r2, r0
   869d8:	68c9      	ldr	r1, [r1, #12]
   869da:	2001      	movs	r0, #1
   869dc:	47a0      	blx	r4
			return false;
   869de:	2300      	movs	r3, #0
   869e0:	e055      	b.n	86a8e <udd_ep_alloc+0x272>
   869e2:	3502      	adds	r5, #2
   869e4:	3401      	adds	r4, #1
   869e6:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   869e8:	b2e3      	uxtb	r3, r4
   869ea:	2b06      	cmp	r3, #6
   869ec:	d84c      	bhi.n	86a88 <udd_ep_alloc+0x26c>
   869ee:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   869f0:	46a6      	mov	lr, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   869f2:	fa47 f205 	asr.w	r2, r7, r5
		if (bank == 0) {
   869f6:	f012 0203 	ands.w	r2, r2, #3
   869fa:	d0f2      	beq.n	869e2 <udd_ep_alloc+0x1c6>
   869fc:	1e61      	subs	r1, r4, #1
		bool b_restart = ptr_job->busy;
   869fe:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   86a02:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   86a06:	f893 b014 	ldrb.w	fp, [r3, #20]
   86a0a:	f00b 0c01 	and.w	ip, fp, #1
		ptr_job->busy = false;
   86a0e:	f36f 0b00 	bfc	fp, #0, #1
   86a12:	f883 b014 	strb.w	fp, [r3, #20]
   86a16:	0163      	lsls	r3, r4, #5
   86a18:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86a1c:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   86a20:	f8d3 b100 	ldr.w	fp, [r3, #256]	; 0x100
   86a24:	f02b 0bc0 	bic.w	fp, fp, #192	; 0xc0
   86a28:	ea4b 1282 	orr.w	r2, fp, r2, lsl #6
   86a2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   86a30:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   86a34:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   86a38:	2a00      	cmp	r2, #0
   86a3a:	dab6      	bge.n	869aa <udd_ep_alloc+0x18e>
		udd_enable_endpoint_bank_autoswitch(i);
   86a3c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   86a40:	f042 0202 	orr.w	r2, r2, #2
   86a44:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   86a48:	f1bc 0f00 	cmp.w	ip, #0
   86a4c:	d0c9      	beq.n	869e2 <udd_ep_alloc+0x1c6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   86a4e:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   86a52:	f856 2c08 	ldr.w	r2, [r6, #-8]
   86a56:	1a9a      	subs	r2, r3, r2
   86a58:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   86a5c:	f856 3c10 	ldr.w	r3, [r6, #-16]
					ptr_job->b_shortpacket,
   86a60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   86a64:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   86a68:	f891 e014 	ldrb.w	lr, [r1, #20]
			b_restart = udd_ep_run(i,
   86a6c:	f856 1c18 	ldr.w	r1, [r6, #-24]
   86a70:	9100      	str	r1, [sp, #0]
   86a72:	1a9b      	subs	r3, r3, r2
   86a74:	f856 1c14 	ldr.w	r1, [r6, #-20]
   86a78:	440a      	add	r2, r1
   86a7a:	f3ce 0140 	ubfx	r1, lr, #1, #1
   86a7e:	47d0      	blx	sl
			if (!b_restart) {
   86a80:	4603      	mov	r3, r0
   86a82:	2800      	cmp	r0, #0
   86a84:	d1ad      	bne.n	869e2 <udd_ep_alloc+0x1c6>
   86a86:	e002      	b.n	86a8e <udd_ep_alloc+0x272>
	return true;
   86a88:	2301      	movs	r3, #1
   86a8a:	e000      	b.n	86a8e <udd_ep_alloc+0x272>
		return false;
   86a8c:	2300      	movs	r3, #0
}
   86a8e:	4618      	mov	r0, r3
   86a90:	b003      	add	sp, #12
   86a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   86a96:	2300      	movs	r3, #0
   86a98:	e7f9      	b.n	86a8e <udd_ep_alloc+0x272>
		return false;
   86a9a:	2300      	movs	r3, #0
   86a9c:	e7f7      	b.n	86a8e <udd_ep_alloc+0x272>
				return false;
   86a9e:	2300      	movs	r3, #0
   86aa0:	e7f5      	b.n	86a8e <udd_ep_alloc+0x272>
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86aa2:	f04f 0801 	mov.w	r8, #1
			nb_tran = 1;
   86aa6:	f04f 0e00 	mov.w	lr, #0
	} else if (MaxEndpointSize & (0x3u << 11)) {
   86aaa:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   86aae:	d1f4      	bne.n	86a9a <udd_ep_alloc+0x27e>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   86ab0:	f04f 0c00 	mov.w	ip, #0
   86ab4:	e6f3      	b.n	8689e <udd_ep_alloc+0x82>
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86ab6:	f04f 0803 	mov.w	r8, #3
   86aba:	e7f4      	b.n	86aa6 <udd_ep_alloc+0x28a>
   86abc:	400a4000 	.word	0x400a4000
   86ac0:	2000230c 	.word	0x2000230c
   86ac4:	00086731 	.word	0x00086731

00086ac8 <udd_ep_abort>:
{
   86ac8:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86aca:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   86ace:	4b13      	ldr	r3, [pc, #76]	; (86b1c <udd_ep_abort+0x54>)
   86ad0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   86ad4:	2100      	movs	r1, #0
   86ad6:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   86ad8:	f010 0f80 	tst.w	r0, #128	; 0x80
   86adc:	d116      	bne.n	86b0c <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   86ade:	1e50      	subs	r0, r2, #1
   86ae0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   86ae4:	2101      	movs	r1, #1
   86ae6:	4b0e      	ldr	r3, [pc, #56]	; (86b20 <udd_ep_abort+0x58>)
   86ae8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   86aec:	4b0d      	ldr	r3, [pc, #52]	; (86b24 <udd_ep_abort+0x5c>)
   86aee:	4798      	blx	r3
   86af0:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   86af2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   86af6:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   86afa:	f413 7f00 	tst.w	r3, #512	; 0x200
   86afe:	d1fa      	bne.n	86af6 <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   86b00:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   86b04:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   86b08:	d1f3      	bne.n	86af2 <udd_ep_abort+0x2a>
   86b0a:	e7e8      	b.n	86ade <udd_ep_abort+0x16>
   86b0c:	4906      	ldr	r1, [pc, #24]	; (86b28 <udd_ep_abort+0x60>)
   86b0e:	eb01 1042 	add.w	r0, r1, r2, lsl #5
			udd_kill_last_in_bank(ep_index);
   86b12:	f44f 7400 	mov.w	r4, #512	; 0x200
			while(Is_udd_kill_last(ep_index));
   86b16:	4601      	mov	r1, r0
   86b18:	e7f2      	b.n	86b00 <udd_ep_abort+0x38>
   86b1a:	bf00      	nop
   86b1c:	400a4300 	.word	0x400a4300
   86b20:	2000230c 	.word	0x2000230c
   86b24:	00085ae9 	.word	0x00085ae9
   86b28:	400a4000 	.word	0x400a4000

00086b2c <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   86b2c:	4a07      	ldr	r2, [pc, #28]	; (86b4c <udd_test_mode_j+0x20>)
   86b2e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86b32:	f023 0303 	bic.w	r3, r3, #3
   86b36:	f043 0302 	orr.w	r3, r3, #2
   86b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   86b3e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86b42:	f043 0304 	orr.w	r3, r3, #4
   86b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   86b4a:	4770      	bx	lr
   86b4c:	400a4000 	.word	0x400a4000

00086b50 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   86b50:	4a07      	ldr	r2, [pc, #28]	; (86b70 <udd_test_mode_k+0x20>)
   86b52:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86b56:	f023 0303 	bic.w	r3, r3, #3
   86b5a:	f043 0302 	orr.w	r3, r3, #2
   86b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   86b62:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86b66:	f043 0308 	orr.w	r3, r3, #8
   86b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   86b6e:	4770      	bx	lr
   86b70:	400a4000 	.word	0x400a4000

00086b74 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   86b74:	4a04      	ldr	r2, [pc, #16]	; (86b88 <udd_test_mode_se0_nak+0x14>)
   86b76:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86b7a:	f023 0303 	bic.w	r3, r3, #3
   86b7e:	f043 0302 	orr.w	r3, r3, #2
   86b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   86b86:	4770      	bx	lr
   86b88:	400a4000 	.word	0x400a4000

00086b8c <udd_test_mode_packet>:
{
   86b8c:	b430      	push	{r4, r5}
   86b8e:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   86b90:	466c      	mov	r4, sp
   86b92:	4d20      	ldr	r5, [pc, #128]	; (86c14 <udd_test_mode_packet+0x88>)
   86b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86ba0:	e895 0003 	ldmia.w	r5, {r0, r1}
   86ba4:	f844 0b04 	str.w	r0, [r4], #4
   86ba8:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   86baa:	4b1b      	ldr	r3, [pc, #108]	; (86c18 <udd_test_mode_packet+0x8c>)
   86bac:	2101      	movs	r1, #1
   86bae:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   86bb2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   86bb6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   86bba:	f022 0203 	bic.w	r2, r2, #3
   86bbe:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   86bc2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   86bc6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   86bca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86bce:	f022 0203 	bic.w	r2, r2, #3
   86bd2:	f042 0202 	orr.w	r2, r2, #2
   86bd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   86bda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86bde:	f042 0210 	orr.w	r2, r2, #16
   86be2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   86be6:	4a0d      	ldr	r2, [pc, #52]	; (86c1c <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   86be8:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   86bea:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   86bee:	f813 1b01 	ldrb.w	r1, [r3], #1
   86bf2:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   86bf6:	4283      	cmp	r3, r0
   86bf8:	d1f9      	bne.n	86bee <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   86bfa:	4b07      	ldr	r3, [pc, #28]	; (86c18 <udd_test_mode_packet+0x8c>)
   86bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86c00:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86c08:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   86c0c:	b00e      	add	sp, #56	; 0x38
   86c0e:	bc30      	pop	{r4, r5}
   86c10:	4770      	bx	lr
   86c12:	bf00      	nop
   86c14:	0008dc58 	.word	0x0008dc58
   86c18:	400a4000 	.word	0x400a4000
   86c1c:	2017ffff 	.word	0x2017ffff

00086c20 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86c20:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86c22:	010b      	lsls	r3, r1, #4
   86c24:	4293      	cmp	r3, r2
   86c26:	d914      	bls.n	86c52 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86c28:	00c9      	lsls	r1, r1, #3
   86c2a:	084b      	lsrs	r3, r1, #1
   86c2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   86c30:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   86c34:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86c36:	1e5c      	subs	r4, r3, #1
   86c38:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86c3c:	428c      	cmp	r4, r1
   86c3e:	d901      	bls.n	86c44 <usart_set_async_baudrate+0x24>
		return 1;
   86c40:	2001      	movs	r0, #1
   86c42:	e017      	b.n	86c74 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   86c44:	6841      	ldr	r1, [r0, #4]
   86c46:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   86c4a:	6041      	str	r1, [r0, #4]
   86c4c:	e00c      	b.n	86c68 <usart_set_async_baudrate+0x48>
		return 1;
   86c4e:	2001      	movs	r0, #1
   86c50:	e010      	b.n	86c74 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86c52:	0859      	lsrs	r1, r3, #1
   86c54:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   86c58:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   86c5c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86c5e:	1e5c      	subs	r4, r3, #1
   86c60:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86c64:	428c      	cmp	r4, r1
   86c66:	d8f2      	bhi.n	86c4e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86c68:	0412      	lsls	r2, r2, #16
   86c6a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   86c6e:	431a      	orrs	r2, r3
   86c70:	6202      	str	r2, [r0, #32]

	return 0;
   86c72:	2000      	movs	r0, #0
}
   86c74:	bc10      	pop	{r4}
   86c76:	4770      	bx	lr

00086c78 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86c78:	4b0a      	ldr	r3, [pc, #40]	; (86ca4 <usart_reset+0x2c>)
   86c7a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   86c7e:	2300      	movs	r3, #0
   86c80:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   86c82:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86c84:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86c86:	2388      	movs	r3, #136	; 0x88
   86c88:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86c8a:	2324      	movs	r3, #36	; 0x24
   86c8c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   86c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
   86c92:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   86c94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   86c98:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   86c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   86c9e:	6003      	str	r3, [r0, #0]
   86ca0:	4770      	bx	lr
   86ca2:	bf00      	nop
   86ca4:	55534100 	.word	0x55534100

00086ca8 <usart_init_rs232>:
{
   86ca8:	b570      	push	{r4, r5, r6, lr}
   86caa:	4605      	mov	r5, r0
   86cac:	460c      	mov	r4, r1
   86cae:	4616      	mov	r6, r2
	usart_reset(p_usart);
   86cb0:	4b0f      	ldr	r3, [pc, #60]	; (86cf0 <usart_init_rs232+0x48>)
   86cb2:	4798      	blx	r3
	ul_reg_val = 0;
   86cb4:	2200      	movs	r2, #0
   86cb6:	4b0f      	ldr	r3, [pc, #60]	; (86cf4 <usart_init_rs232+0x4c>)
   86cb8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86cba:	b1a4      	cbz	r4, 86ce6 <usart_init_rs232+0x3e>
   86cbc:	4632      	mov	r2, r6
   86cbe:	6821      	ldr	r1, [r4, #0]
   86cc0:	4628      	mov	r0, r5
   86cc2:	4b0d      	ldr	r3, [pc, #52]	; (86cf8 <usart_init_rs232+0x50>)
   86cc4:	4798      	blx	r3
   86cc6:	4602      	mov	r2, r0
   86cc8:	b978      	cbnz	r0, 86cea <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86cca:	6863      	ldr	r3, [r4, #4]
   86ccc:	68a1      	ldr	r1, [r4, #8]
   86cce:	430b      	orrs	r3, r1
   86cd0:	6921      	ldr	r1, [r4, #16]
   86cd2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86cd4:	68e1      	ldr	r1, [r4, #12]
   86cd6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86cd8:	4906      	ldr	r1, [pc, #24]	; (86cf4 <usart_init_rs232+0x4c>)
   86cda:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   86cdc:	6869      	ldr	r1, [r5, #4]
   86cde:	430b      	orrs	r3, r1
   86ce0:	606b      	str	r3, [r5, #4]
}
   86ce2:	4610      	mov	r0, r2
   86ce4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86ce6:	2201      	movs	r2, #1
   86ce8:	e7fb      	b.n	86ce2 <usart_init_rs232+0x3a>
   86cea:	2201      	movs	r2, #1
   86cec:	e7f9      	b.n	86ce2 <usart_init_rs232+0x3a>
   86cee:	bf00      	nop
   86cf0:	00086c79 	.word	0x00086c79
   86cf4:	2000239c 	.word	0x2000239c
   86cf8:	00086c21 	.word	0x00086c21

00086cfc <usart_init_sync_master>:
{
   86cfc:	b570      	push	{r4, r5, r6, lr}
   86cfe:	4604      	mov	r4, r0
   86d00:	460e      	mov	r6, r1
   86d02:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86d04:	4b15      	ldr	r3, [pc, #84]	; (86d5c <usart_init_sync_master+0x60>)
   86d06:	4798      	blx	r3
	ul_reg_val = 0;
   86d08:	2200      	movs	r2, #0
   86d0a:	4b15      	ldr	r3, [pc, #84]	; (86d60 <usart_init_sync_master+0x64>)
   86d0c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   86d0e:	b306      	cbz	r6, 86d52 <usart_init_sync_master+0x56>
   86d10:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86d12:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   86d16:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86d1a:	1e51      	subs	r1, r2, #1
   86d1c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86d20:	4299      	cmp	r1, r3
   86d22:	d818      	bhi.n	86d56 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86d24:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86d26:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   86d28:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86d30:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86d32:	6873      	ldr	r3, [r6, #4]
   86d34:	68b2      	ldr	r2, [r6, #8]
   86d36:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   86d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86d3c:	6932      	ldr	r2, [r6, #16]
   86d3e:	4313      	orrs	r3, r2
   86d40:	68f2      	ldr	r2, [r6, #12]
   86d42:	4313      	orrs	r3, r2
   86d44:	4a06      	ldr	r2, [pc, #24]	; (86d60 <usart_init_sync_master+0x64>)
   86d46:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86d48:	6862      	ldr	r2, [r4, #4]
   86d4a:	4313      	orrs	r3, r2
   86d4c:	6063      	str	r3, [r4, #4]
	return 0;
   86d4e:	2000      	movs	r0, #0
   86d50:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86d52:	2001      	movs	r0, #1
   86d54:	bd70      	pop	{r4, r5, r6, pc}
   86d56:	2001      	movs	r0, #1
}
   86d58:	bd70      	pop	{r4, r5, r6, pc}
   86d5a:	bf00      	nop
   86d5c:	00086c79 	.word	0x00086c79
   86d60:	200023a0 	.word	0x200023a0

00086d64 <usart_init_iso7816>:
{
   86d64:	b570      	push	{r4, r5, r6, lr}
   86d66:	4606      	mov	r6, r0
   86d68:	460c      	mov	r4, r1
   86d6a:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86d6c:	4b30      	ldr	r3, [pc, #192]	; (86e30 <usart_init_iso7816+0xcc>)
   86d6e:	4798      	blx	r3
	ul_reg_val = 0;
   86d70:	2200      	movs	r2, #0
   86d72:	4b30      	ldr	r3, [pc, #192]	; (86e34 <usart_init_iso7816+0xd0>)
   86d74:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
   86d76:	2c00      	cmp	r4, #0
   86d78:	d04f      	beq.n	86e1a <usart_init_iso7816+0xb6>
   86d7a:	68a3      	ldr	r3, [r4, #8]
   86d7c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
   86d80:	d14d      	bne.n	86e1e <usart_init_iso7816+0xba>
	if (p_usart_opt->protocol_type == ISO7816_T_0) {
   86d82:	69e3      	ldr	r3, [r4, #28]
   86d84:	2b00      	cmp	r3, #0
   86d86:	d13c      	bne.n	86e02 <usart_init_iso7816+0x9e>
				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
   86d88:	6963      	ldr	r3, [r4, #20]
   86d8a:	061b      	lsls	r3, r3, #24
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
   86d8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
   86d90:	f042 0204 	orr.w	r2, r2, #4
   86d94:	4927      	ldr	r1, [pc, #156]	; (86e34 <usart_init_iso7816+0xd0>)
   86d96:	600a      	str	r2, [r1, #0]
		if (p_usart_opt->bit_order) {
   86d98:	69a2      	ldr	r2, [r4, #24]
   86d9a:	b122      	cbz	r2, 86da6 <usart_init_iso7816+0x42>
			ul_reg_val |= US_MR_MSBF;
   86d9c:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   86da0:	f043 0304 	orr.w	r3, r3, #4
   86da4:	600b      	str	r3, [r1, #0]
	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
   86da6:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + clock / 2) / clock;
   86da8:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86dac:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86db0:	1e6a      	subs	r2, r5, #1
   86db2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86db6:	429a      	cmp	r2, r3
   86db8:	d837      	bhi.n	86e2a <usart_init_iso7816+0xc6>
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86dba:	6873      	ldr	r3, [r6, #4]
			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
   86dbc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
   86dc0:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86dc8:	6073      	str	r3, [r6, #4]
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86dca:	6235      	str	r5, [r6, #32]
	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
   86dcc:	6863      	ldr	r3, [r4, #4]
   86dce:	6433      	str	r3, [r6, #64]	; 0x40
	ul_reg_val |= p_usart_opt->parity_type;
   86dd0:	4a18      	ldr	r2, [pc, #96]	; (86e34 <usart_init_iso7816+0xd0>)
   86dd2:	68a3      	ldr	r3, [r4, #8]
   86dd4:	6811      	ldr	r1, [r2, #0]
   86dd6:	430b      	orrs	r3, r1
   86dd8:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->inhibit_nack) {
   86dda:	68e2      	ldr	r2, [r4, #12]
   86ddc:	b11a      	cbz	r2, 86de6 <usart_init_iso7816+0x82>
		ul_reg_val |= US_MR_INACK;
   86dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   86de2:	4a14      	ldr	r2, [pc, #80]	; (86e34 <usart_init_iso7816+0xd0>)
   86de4:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->dis_suc_nack) {
   86de6:	6923      	ldr	r3, [r4, #16]
   86de8:	b123      	cbz	r3, 86df4 <usart_init_iso7816+0x90>
		ul_reg_val |= US_MR_DSNACK;
   86dea:	4a12      	ldr	r2, [pc, #72]	; (86e34 <usart_init_iso7816+0xd0>)
   86dec:	6813      	ldr	r3, [r2, #0]
   86dee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   86df2:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86df4:	6873      	ldr	r3, [r6, #4]
   86df6:	4a0f      	ldr	r2, [pc, #60]	; (86e34 <usart_init_iso7816+0xd0>)
   86df8:	6812      	ldr	r2, [r2, #0]
   86dfa:	4313      	orrs	r3, r2
   86dfc:	6073      	str	r3, [r6, #4]
	return 0;
   86dfe:	2000      	movs	r0, #0
   86e00:	bd70      	pop	{r4, r5, r6, pc}
	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
   86e02:	2b01      	cmp	r3, #1
   86e04:	d001      	beq.n	86e0a <usart_init_iso7816+0xa6>
		return 1;
   86e06:	2001      	movs	r0, #1
   86e08:	bd70      	pop	{r4, r5, r6, pc}
		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
   86e0a:	69a3      	ldr	r3, [r4, #24]
   86e0c:	b94b      	cbnz	r3, 86e22 <usart_init_iso7816+0xbe>
   86e0e:	6963      	ldr	r3, [r4, #20]
   86e10:	b94b      	cbnz	r3, 86e26 <usart_init_iso7816+0xc2>
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
   86e12:	2206      	movs	r2, #6
   86e14:	4b07      	ldr	r3, [pc, #28]	; (86e34 <usart_init_iso7816+0xd0>)
   86e16:	601a      	str	r2, [r3, #0]
   86e18:	e7c5      	b.n	86da6 <usart_init_iso7816+0x42>
		return 1;
   86e1a:	2001      	movs	r0, #1
   86e1c:	bd70      	pop	{r4, r5, r6, pc}
   86e1e:	2001      	movs	r0, #1
   86e20:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   86e22:	2001      	movs	r0, #1
   86e24:	bd70      	pop	{r4, r5, r6, pc}
   86e26:	2001      	movs	r0, #1
   86e28:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86e2a:	2001      	movs	r0, #1
}
   86e2c:	bd70      	pop	{r4, r5, r6, pc}
   86e2e:	bf00      	nop
   86e30:	00086c79 	.word	0x00086c79
   86e34:	200023a4 	.word	0x200023a4

00086e38 <usart_init_spi_master>:
{
   86e38:	b570      	push	{r4, r5, r6, lr}
   86e3a:	4606      	mov	r6, r0
   86e3c:	460c      	mov	r4, r1
   86e3e:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86e40:	4b2a      	ldr	r3, [pc, #168]	; (86eec <usart_init_spi_master+0xb4>)
   86e42:	4798      	blx	r3
	ul_reg_val = 0;
   86e44:	2200      	movs	r2, #0
   86e46:	4b2a      	ldr	r3, [pc, #168]	; (86ef0 <usart_init_spi_master+0xb8>)
   86e48:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86e4a:	2c00      	cmp	r4, #0
   86e4c:	d049      	beq.n	86ee2 <usart_init_spi_master+0xaa>
   86e4e:	68a3      	ldr	r3, [r4, #8]
   86e50:	2b03      	cmp	r3, #3
   86e52:	d901      	bls.n	86e58 <usart_init_spi_master+0x20>
		return 1;
   86e54:	2001      	movs	r0, #1
   86e56:	bd70      	pop	{r4, r5, r6, pc}
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   86e58:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86e5a:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86e5e:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86e62:	1f2a      	subs	r2, r5, #4
   86e64:	f64f 73fb 	movw	r3, #65531	; 0xfffb
   86e68:	429a      	cmp	r2, r3
   86e6a:	d83c      	bhi.n	86ee6 <usart_init_spi_master+0xae>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86e6c:	6235      	str	r5, [r6, #32]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86e6e:	6863      	ldr	r3, [r4, #4]
   86e70:	68e2      	ldr	r2, [r4, #12]
   86e72:	4313      	orrs	r3, r2
   86e74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   86e78:	f042 020e 	orr.w	r2, r2, #14
   86e7c:	491c      	ldr	r1, [pc, #112]	; (86ef0 <usart_init_spi_master+0xb8>)
   86e7e:	600a      	str	r2, [r1, #0]
	switch (p_usart_opt->spi_mode) {
   86e80:	68a2      	ldr	r2, [r4, #8]
   86e82:	2a03      	cmp	r2, #3
   86e84:	d80b      	bhi.n	86e9e <usart_init_spi_master+0x66>
   86e86:	e8df f002 	tbb	[pc, r2]
   86e8a:	1102      	.short	0x1102
   86e8c:	231c      	.short	0x231c
		ul_reg_val &= ~US_MR_CPOL;
   86e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86e96:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86e9a:	4a15      	ldr	r2, [pc, #84]	; (86ef0 <usart_init_spi_master+0xb8>)
   86e9c:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86e9e:	6873      	ldr	r3, [r6, #4]
   86ea0:	4a13      	ldr	r2, [pc, #76]	; (86ef0 <usart_init_spi_master+0xb8>)
   86ea2:	6812      	ldr	r2, [r2, #0]
   86ea4:	4313      	orrs	r3, r2
   86ea6:	6073      	str	r3, [r6, #4]
	return 0;
   86ea8:	2000      	movs	r0, #0
   86eaa:	bd70      	pop	{r4, r5, r6, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86eb8:	f043 030e 	orr.w	r3, r3, #14
   86ebc:	4a0c      	ldr	r2, [pc, #48]	; (86ef0 <usart_init_spi_master+0xb8>)
   86ebe:	6013      	str	r3, [r2, #0]
		break;
   86ec0:	e7ed      	b.n	86e9e <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86ec2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86ec6:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86eca:	4a09      	ldr	r2, [pc, #36]	; (86ef0 <usart_init_spi_master+0xb8>)
   86ecc:	6013      	str	r3, [r2, #0]
		break;
   86ece:	e7e6      	b.n	86e9e <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86ed4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86ed8:	f043 030e 	orr.w	r3, r3, #14
   86edc:	4a04      	ldr	r2, [pc, #16]	; (86ef0 <usart_init_spi_master+0xb8>)
   86ede:	6013      	str	r3, [r2, #0]
		break;
   86ee0:	e7dd      	b.n	86e9e <usart_init_spi_master+0x66>
		return 1;
   86ee2:	2001      	movs	r0, #1
   86ee4:	bd70      	pop	{r4, r5, r6, pc}
   86ee6:	2001      	movs	r0, #1
}
   86ee8:	bd70      	pop	{r4, r5, r6, pc}
   86eea:	bf00      	nop
   86eec:	00086c79 	.word	0x00086c79
   86ef0:	200023a8 	.word	0x200023a8

00086ef4 <usart_init_spi_slave>:
{
   86ef4:	b538      	push	{r3, r4, r5, lr}
   86ef6:	4604      	mov	r4, r0
   86ef8:	460d      	mov	r5, r1
	usart_reset(p_usart);
   86efa:	4b25      	ldr	r3, [pc, #148]	; (86f90 <usart_init_spi_slave+0x9c>)
   86efc:	4798      	blx	r3
	ul_reg_val = 0;
   86efe:	2200      	movs	r2, #0
   86f00:	4b24      	ldr	r3, [pc, #144]	; (86f94 <usart_init_spi_slave+0xa0>)
   86f02:	601a      	str	r2, [r3, #0]
	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
   86f04:	6863      	ldr	r3, [r4, #4]
   86f06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   86f0a:	6063      	str	r3, [r4, #4]
	p_usart->US_MR |= US_MR_USCLKS_SCK;
   86f0c:	6863      	ldr	r3, [r4, #4]
   86f0e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   86f12:	6063      	str	r3, [r4, #4]
	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
   86f14:	2d00      	cmp	r5, #0
   86f16:	d036      	beq.n	86f86 <usart_init_spi_slave+0x92>
   86f18:	68aa      	ldr	r2, [r5, #8]
   86f1a:	2a03      	cmp	r2, #3
   86f1c:	d835      	bhi.n	86f8a <usart_init_spi_slave+0x96>
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86f1e:	686b      	ldr	r3, [r5, #4]
   86f20:	68e9      	ldr	r1, [r5, #12]
   86f22:	430b      	orrs	r3, r1
	switch (p_usart_opt->spi_mode) {
   86f24:	2a03      	cmp	r2, #3
   86f26:	d803      	bhi.n	86f30 <usart_init_spi_slave+0x3c>
   86f28:	e8df f002 	tbb	[pc, r2]
   86f2c:	241f160d 	.word	0x241f160d
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86f30:	f043 030f 	orr.w	r3, r3, #15
   86f34:	4a17      	ldr	r2, [pc, #92]	; (86f94 <usart_init_spi_slave+0xa0>)
   86f36:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86f38:	6863      	ldr	r3, [r4, #4]
   86f3a:	4a16      	ldr	r2, [pc, #88]	; (86f94 <usart_init_spi_slave+0xa0>)
   86f3c:	6812      	ldr	r2, [r2, #0]
   86f3e:	4313      	orrs	r3, r2
   86f40:	6063      	str	r3, [r4, #4]
	return 0;
   86f42:	2000      	movs	r0, #0
   86f44:	bd38      	pop	{r3, r4, r5, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86f4a:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86f4e:	f043 0301 	orr.w	r3, r3, #1
   86f52:	4a10      	ldr	r2, [pc, #64]	; (86f94 <usart_init_spi_slave+0xa0>)
   86f54:	6013      	str	r3, [r2, #0]
		break;
   86f56:	e7ef      	b.n	86f38 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPOL;
   86f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86f60:	f043 030f 	orr.w	r3, r3, #15
   86f64:	4a0b      	ldr	r2, [pc, #44]	; (86f94 <usart_init_spi_slave+0xa0>)
   86f66:	6013      	str	r3, [r2, #0]
		break;
   86f68:	e7e6      	b.n	86f38 <usart_init_spi_slave+0x44>
		ul_reg_val |= US_MR_CPOL;
   86f6a:	4a0b      	ldr	r2, [pc, #44]	; (86f98 <usart_init_spi_slave+0xa4>)
   86f6c:	431a      	orrs	r2, r3
   86f6e:	4b09      	ldr	r3, [pc, #36]	; (86f94 <usart_init_spi_slave+0xa0>)
   86f70:	601a      	str	r2, [r3, #0]
		break;
   86f72:	e7e1      	b.n	86f38 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPHA;
   86f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86f7c:	f043 030f 	orr.w	r3, r3, #15
   86f80:	4a04      	ldr	r2, [pc, #16]	; (86f94 <usart_init_spi_slave+0xa0>)
   86f82:	6013      	str	r3, [r2, #0]
		break;
   86f84:	e7d8      	b.n	86f38 <usart_init_spi_slave+0x44>
		return 1;
   86f86:	2001      	movs	r0, #1
   86f88:	bd38      	pop	{r3, r4, r5, pc}
   86f8a:	2001      	movs	r0, #1
}
   86f8c:	bd38      	pop	{r3, r4, r5, pc}
   86f8e:	bf00      	nop
   86f90:	00086c79 	.word	0x00086c79
   86f94:	200023ac 	.word	0x200023ac
   86f98:	0001010f 	.word	0x0001010f

00086f9c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   86f9c:	2340      	movs	r3, #64	; 0x40
   86f9e:	6003      	str	r3, [r0, #0]
   86fa0:	4770      	bx	lr

00086fa2 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   86fa2:	2380      	movs	r3, #128	; 0x80
   86fa4:	6003      	str	r3, [r0, #0]
   86fa6:	4770      	bx	lr

00086fa8 <usart_set_tx_timeguard>:
	p_usart->US_TTGR = timeguard;
   86fa8:	6281      	str	r1, [r0, #40]	; 0x28
   86faa:	4770      	bx	lr

00086fac <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   86fac:	2310      	movs	r3, #16
   86fae:	6003      	str	r3, [r0, #0]
   86fb0:	4770      	bx	lr

00086fb2 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   86fb2:	2320      	movs	r3, #32
   86fb4:	6003      	str	r3, [r0, #0]
   86fb6:	4770      	bx	lr

00086fb8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   86fb8:	6081      	str	r1, [r0, #8]
   86fba:	4770      	bx	lr

00086fbc <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   86fbc:	60c1      	str	r1, [r0, #12]
   86fbe:	4770      	bx	lr

00086fc0 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   86fc0:	6900      	ldr	r0, [r0, #16]
}
   86fc2:	4770      	bx	lr

00086fc4 <usart_get_status>:
	return p_usart->US_CSR;
   86fc4:	6940      	ldr	r0, [r0, #20]
}
   86fc6:	4770      	bx	lr

00086fc8 <usart_reset_status>:
	p_usart->US_CR = US_CR_RSTSTA;
   86fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
   86fcc:	6003      	str	r3, [r0, #0]
   86fce:	4770      	bx	lr

00086fd0 <usart_reset_iterations>:
	p_usart->US_CR = US_CR_RSTIT;
   86fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   86fd4:	6003      	str	r3, [r0, #0]
   86fd6:	4770      	bx	lr

00086fd8 <usart_reset_nack>:
	p_usart->US_CR = US_CR_RSTNACK;
   86fd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   86fdc:	6003      	str	r3, [r0, #0]
   86fde:	4770      	bx	lr

00086fe0 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   86fe0:	6940      	ldr	r0, [r0, #20]
}
   86fe2:	f3c0 2040 	ubfx	r0, r0, #9, #1
   86fe6:	4770      	bx	lr

00086fe8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86fe8:	6943      	ldr	r3, [r0, #20]
   86fea:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   86fee:	bf1d      	ittte	ne
   86ff0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   86ff4:	61c1      	strne	r1, [r0, #28]
	return 0;
   86ff6:	2000      	movne	r0, #0
		return 1;
   86ff8:	2001      	moveq	r0, #1
}
   86ffa:	4770      	bx	lr

00086ffc <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86ffc:	6943      	ldr	r3, [r0, #20]
   86ffe:	f013 0f02 	tst.w	r3, #2
   87002:	d0fb      	beq.n	86ffc <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   87004:	f3c1 0108 	ubfx	r1, r1, #0, #9
   87008:	61c1      	str	r1, [r0, #28]
}
   8700a:	2000      	movs	r0, #0
   8700c:	4770      	bx	lr

0008700e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8700e:	6943      	ldr	r3, [r0, #20]
   87010:	f013 0f01 	tst.w	r3, #1
   87014:	d005      	beq.n	87022 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   87016:	6983      	ldr	r3, [r0, #24]
   87018:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8701c:	600b      	str	r3, [r1, #0]
	return 0;
   8701e:	2000      	movs	r0, #0
   87020:	4770      	bx	lr
		return 1;
   87022:	2001      	movs	r0, #1
}
   87024:	4770      	bx	lr

00087026 <usart_getchar>:
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   87026:	6943      	ldr	r3, [r0, #20]
   87028:	f013 0f01 	tst.w	r3, #1
   8702c:	d0fb      	beq.n	87026 <usart_getchar>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8702e:	6983      	ldr	r3, [r0, #24]
   87030:	f3c3 0308 	ubfx	r3, r3, #0, #9
   87034:	600b      	str	r3, [r1, #0]
}
   87036:	2000      	movs	r0, #0
   87038:	4770      	bx	lr

0008703a <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8703a:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8703c:	23ac      	movs	r3, #172	; 0xac
   8703e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   87040:	680b      	ldr	r3, [r1, #0]
   87042:	684a      	ldr	r2, [r1, #4]
   87044:	fbb3 f3f2 	udiv	r3, r3, r2
   87048:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8704a:	1e5c      	subs	r4, r3, #1
   8704c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   87050:	4294      	cmp	r4, r2
   87052:	d80b      	bhi.n	8706c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   87054:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   87056:	688b      	ldr	r3, [r1, #8]
   87058:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8705a:	f240 2302 	movw	r3, #514	; 0x202
   8705e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   87062:	2350      	movs	r3, #80	; 0x50
   87064:	6003      	str	r3, [r0, #0]

	return 0;
   87066:	2000      	movs	r0, #0
}
   87068:	bc10      	pop	{r4}
   8706a:	4770      	bx	lr
		return 1;
   8706c:	2001      	movs	r0, #1
   8706e:	e7fb      	b.n	87068 <uart_init+0x2e>

00087070 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   87070:	6943      	ldr	r3, [r0, #20]
   87072:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   87076:	bf1a      	itte	ne
   87078:	61c1      	strne	r1, [r0, #28]
	return 0;
   8707a:	2000      	movne	r0, #0
		return 1;
   8707c:	2001      	moveq	r0, #1
}
   8707e:	4770      	bx	lr

00087080 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   87080:	6943      	ldr	r3, [r0, #20]
   87082:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   87086:	bf1d      	ittte	ne
   87088:	6983      	ldrne	r3, [r0, #24]
   8708a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8708c:	2000      	movne	r0, #0
		return 1;
   8708e:	2001      	moveq	r0, #1
}
   87090:	4770      	bx	lr

00087092 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   87092:	e7fe      	b.n	87092 <Dummy_Handler>

00087094 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   87094:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   87096:	4b1c      	ldr	r3, [pc, #112]	; (87108 <Reset_Handler+0x74>)
   87098:	4a1c      	ldr	r2, [pc, #112]	; (8710c <Reset_Handler+0x78>)
   8709a:	429a      	cmp	r2, r3
   8709c:	d010      	beq.n	870c0 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8709e:	4b1c      	ldr	r3, [pc, #112]	; (87110 <Reset_Handler+0x7c>)
   870a0:	4a19      	ldr	r2, [pc, #100]	; (87108 <Reset_Handler+0x74>)
   870a2:	429a      	cmp	r2, r3
   870a4:	d20c      	bcs.n	870c0 <Reset_Handler+0x2c>
   870a6:	3b01      	subs	r3, #1
   870a8:	1a9b      	subs	r3, r3, r2
   870aa:	f023 0303 	bic.w	r3, r3, #3
   870ae:	3304      	adds	r3, #4
   870b0:	4413      	add	r3, r2
   870b2:	4916      	ldr	r1, [pc, #88]	; (8710c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   870b4:	f851 0b04 	ldr.w	r0, [r1], #4
   870b8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   870bc:	429a      	cmp	r2, r3
   870be:	d1f9      	bne.n	870b4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   870c0:	4b14      	ldr	r3, [pc, #80]	; (87114 <Reset_Handler+0x80>)
   870c2:	4a15      	ldr	r2, [pc, #84]	; (87118 <Reset_Handler+0x84>)
   870c4:	429a      	cmp	r2, r3
   870c6:	d20a      	bcs.n	870de <Reset_Handler+0x4a>
   870c8:	3b01      	subs	r3, #1
   870ca:	1a9b      	subs	r3, r3, r2
   870cc:	f023 0303 	bic.w	r3, r3, #3
   870d0:	3304      	adds	r3, #4
   870d2:	4413      	add	r3, r2
		*pDest++ = 0;
   870d4:	2100      	movs	r1, #0
   870d6:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   870da:	4293      	cmp	r3, r2
   870dc:	d1fb      	bne.n	870d6 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   870de:	4b0f      	ldr	r3, [pc, #60]	; (8711c <Reset_Handler+0x88>)
   870e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   870e4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   870e8:	490d      	ldr	r1, [pc, #52]	; (87120 <Reset_Handler+0x8c>)
   870ea:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   870ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   870f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   870f4:	d203      	bcs.n	870fe <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   870f6:	688b      	ldr	r3, [r1, #8]
   870f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   870fc:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   870fe:	4b09      	ldr	r3, [pc, #36]	; (87124 <Reset_Handler+0x90>)
   87100:	4798      	blx	r3

	/* Branch to main function */
	main();
   87102:	4b09      	ldr	r3, [pc, #36]	; (87128 <Reset_Handler+0x94>)
   87104:	4798      	blx	r3
   87106:	e7fe      	b.n	87106 <Reset_Handler+0x72>
   87108:	20000000 	.word	0x20000000
   8710c:	0008e00c 	.word	0x0008e00c
   87110:	200010c0 	.word	0x200010c0
   87114:	20002e2c 	.word	0x20002e2c
   87118:	200010c0 	.word	0x200010c0
   8711c:	00080000 	.word	0x00080000
   87120:	e000ed00 	.word	0xe000ed00
   87124:	00087a0d 	.word	0x00087a0d
   87128:	0008745d 	.word	0x0008745d

0008712c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8712c:	4b3d      	ldr	r3, [pc, #244]	; (87224 <SystemCoreClockUpdate+0xf8>)
   8712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   87130:	f003 0303 	and.w	r3, r3, #3
   87134:	2b03      	cmp	r3, #3
   87136:	d80e      	bhi.n	87156 <SystemCoreClockUpdate+0x2a>
   87138:	e8df f003 	tbb	[pc, r3]
   8713c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   87140:	4b39      	ldr	r3, [pc, #228]	; (87228 <SystemCoreClockUpdate+0xfc>)
   87142:	695b      	ldr	r3, [r3, #20]
   87144:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   87148:	bf14      	ite	ne
   8714a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8714e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   87152:	4b36      	ldr	r3, [pc, #216]	; (8722c <SystemCoreClockUpdate+0x100>)
   87154:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   87156:	4b33      	ldr	r3, [pc, #204]	; (87224 <SystemCoreClockUpdate+0xf8>)
   87158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8715a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8715e:	2b70      	cmp	r3, #112	; 0x70
   87160:	d057      	beq.n	87212 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   87162:	4b30      	ldr	r3, [pc, #192]	; (87224 <SystemCoreClockUpdate+0xf8>)
   87164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   87166:	4931      	ldr	r1, [pc, #196]	; (8722c <SystemCoreClockUpdate+0x100>)
   87168:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8716c:	680b      	ldr	r3, [r1, #0]
   8716e:	40d3      	lsrs	r3, r2
   87170:	600b      	str	r3, [r1, #0]
   87172:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   87174:	4b2b      	ldr	r3, [pc, #172]	; (87224 <SystemCoreClockUpdate+0xf8>)
   87176:	6a1b      	ldr	r3, [r3, #32]
   87178:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8717c:	d003      	beq.n	87186 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8717e:	4a2c      	ldr	r2, [pc, #176]	; (87230 <SystemCoreClockUpdate+0x104>)
   87180:	4b2a      	ldr	r3, [pc, #168]	; (8722c <SystemCoreClockUpdate+0x100>)
   87182:	601a      	str	r2, [r3, #0]
   87184:	e7e7      	b.n	87156 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   87186:	4a2b      	ldr	r2, [pc, #172]	; (87234 <SystemCoreClockUpdate+0x108>)
   87188:	4b28      	ldr	r3, [pc, #160]	; (8722c <SystemCoreClockUpdate+0x100>)
   8718a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8718c:	4b25      	ldr	r3, [pc, #148]	; (87224 <SystemCoreClockUpdate+0xf8>)
   8718e:	6a1b      	ldr	r3, [r3, #32]
   87190:	f003 0370 	and.w	r3, r3, #112	; 0x70
   87194:	2b10      	cmp	r3, #16
   87196:	d005      	beq.n	871a4 <SystemCoreClockUpdate+0x78>
   87198:	2b20      	cmp	r3, #32
   8719a:	d1dc      	bne.n	87156 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8719c:	4a24      	ldr	r2, [pc, #144]	; (87230 <SystemCoreClockUpdate+0x104>)
   8719e:	4b23      	ldr	r3, [pc, #140]	; (8722c <SystemCoreClockUpdate+0x100>)
   871a0:	601a      	str	r2, [r3, #0]
				break;
   871a2:	e7d8      	b.n	87156 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   871a4:	4a24      	ldr	r2, [pc, #144]	; (87238 <SystemCoreClockUpdate+0x10c>)
   871a6:	4b21      	ldr	r3, [pc, #132]	; (8722c <SystemCoreClockUpdate+0x100>)
   871a8:	601a      	str	r2, [r3, #0]
				break;
   871aa:	e7d4      	b.n	87156 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   871ac:	4b1d      	ldr	r3, [pc, #116]	; (87224 <SystemCoreClockUpdate+0xf8>)
   871ae:	6a1b      	ldr	r3, [r3, #32]
   871b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   871b4:	d00c      	beq.n	871d0 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   871b6:	4a1e      	ldr	r2, [pc, #120]	; (87230 <SystemCoreClockUpdate+0x104>)
   871b8:	4b1c      	ldr	r3, [pc, #112]	; (8722c <SystemCoreClockUpdate+0x100>)
   871ba:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   871bc:	4b19      	ldr	r3, [pc, #100]	; (87224 <SystemCoreClockUpdate+0xf8>)
   871be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   871c0:	f003 0303 	and.w	r3, r3, #3
   871c4:	2b02      	cmp	r3, #2
   871c6:	d016      	beq.n	871f6 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   871c8:	4a1c      	ldr	r2, [pc, #112]	; (8723c <SystemCoreClockUpdate+0x110>)
   871ca:	4b18      	ldr	r3, [pc, #96]	; (8722c <SystemCoreClockUpdate+0x100>)
   871cc:	601a      	str	r2, [r3, #0]
   871ce:	e7c2      	b.n	87156 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   871d0:	4a18      	ldr	r2, [pc, #96]	; (87234 <SystemCoreClockUpdate+0x108>)
   871d2:	4b16      	ldr	r3, [pc, #88]	; (8722c <SystemCoreClockUpdate+0x100>)
   871d4:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   871d6:	4b13      	ldr	r3, [pc, #76]	; (87224 <SystemCoreClockUpdate+0xf8>)
   871d8:	6a1b      	ldr	r3, [r3, #32]
   871da:	f003 0370 	and.w	r3, r3, #112	; 0x70
   871de:	2b10      	cmp	r3, #16
   871e0:	d005      	beq.n	871ee <SystemCoreClockUpdate+0xc2>
   871e2:	2b20      	cmp	r3, #32
   871e4:	d1ea      	bne.n	871bc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   871e6:	4a12      	ldr	r2, [pc, #72]	; (87230 <SystemCoreClockUpdate+0x104>)
   871e8:	4b10      	ldr	r3, [pc, #64]	; (8722c <SystemCoreClockUpdate+0x100>)
   871ea:	601a      	str	r2, [r3, #0]
				break;
   871ec:	e7e6      	b.n	871bc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   871ee:	4a12      	ldr	r2, [pc, #72]	; (87238 <SystemCoreClockUpdate+0x10c>)
   871f0:	4b0e      	ldr	r3, [pc, #56]	; (8722c <SystemCoreClockUpdate+0x100>)
   871f2:	601a      	str	r2, [r3, #0]
				break;
   871f4:	e7e2      	b.n	871bc <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   871f6:	4a0b      	ldr	r2, [pc, #44]	; (87224 <SystemCoreClockUpdate+0xf8>)
   871f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   871fa:	6a92      	ldr	r2, [r2, #40]	; 0x28
   871fc:	480b      	ldr	r0, [pc, #44]	; (8722c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   871fe:	f3c1 410a 	ubfx	r1, r1, #16, #11
   87202:	6803      	ldr	r3, [r0, #0]
   87204:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   87208:	b2d2      	uxtb	r2, r2
   8720a:	fbb3 f3f2 	udiv	r3, r3, r2
   8720e:	6003      	str	r3, [r0, #0]
   87210:	e7a1      	b.n	87156 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   87212:	4a06      	ldr	r2, [pc, #24]	; (8722c <SystemCoreClockUpdate+0x100>)
   87214:	6813      	ldr	r3, [r2, #0]
   87216:	490a      	ldr	r1, [pc, #40]	; (87240 <SystemCoreClockUpdate+0x114>)
   87218:	fba1 1303 	umull	r1, r3, r1, r3
   8721c:	085b      	lsrs	r3, r3, #1
   8721e:	6013      	str	r3, [r2, #0]
   87220:	4770      	bx	lr
   87222:	bf00      	nop
   87224:	400e0400 	.word	0x400e0400
   87228:	400e1210 	.word	0x400e1210
   8722c:	200006ec 	.word	0x200006ec
   87230:	00b71b00 	.word	0x00b71b00
   87234:	003d0900 	.word	0x003d0900
   87238:	007a1200 	.word	0x007a1200
   8723c:	0e4e1c00 	.word	0x0e4e1c00
   87240:	aaaaaaab 	.word	0xaaaaaaab

00087244 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   87244:	4b0a      	ldr	r3, [pc, #40]	; (87270 <_sbrk+0x2c>)
   87246:	681b      	ldr	r3, [r3, #0]
   87248:	b153      	cbz	r3, 87260 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8724a:	4b09      	ldr	r3, [pc, #36]	; (87270 <_sbrk+0x2c>)
   8724c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8724e:	181a      	adds	r2, r3, r0
   87250:	4908      	ldr	r1, [pc, #32]	; (87274 <_sbrk+0x30>)
   87252:	4291      	cmp	r1, r2
   87254:	db08      	blt.n	87268 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   87256:	4610      	mov	r0, r2
   87258:	4a05      	ldr	r2, [pc, #20]	; (87270 <_sbrk+0x2c>)
   8725a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8725c:	4618      	mov	r0, r3
   8725e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   87260:	4a05      	ldr	r2, [pc, #20]	; (87278 <_sbrk+0x34>)
   87262:	4b03      	ldr	r3, [pc, #12]	; (87270 <_sbrk+0x2c>)
   87264:	601a      	str	r2, [r3, #0]
   87266:	e7f0      	b.n	8724a <_sbrk+0x6>
		return (caddr_t) -1;	
   87268:	f04f 30ff 	mov.w	r0, #4294967295
}
   8726c:	4770      	bx	lr
   8726e:	bf00      	nop
   87270:	200023b0 	.word	0x200023b0
   87274:	2007fffc 	.word	0x2007fffc
   87278:	20082000 	.word	0x20082000

0008727c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8727c:	f04f 30ff 	mov.w	r0, #4294967295
   87280:	4770      	bx	lr

00087282 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   87282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   87286:	604b      	str	r3, [r1, #4]

	return 0;
}
   87288:	2000      	movs	r0, #0
   8728a:	4770      	bx	lr

0008728c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8728c:	2001      	movs	r0, #1
   8728e:	4770      	bx	lr

00087290 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   87290:	2000      	movs	r0, #0
   87292:	4770      	bx	lr

00087294 <fpga_program_setup1>:
	FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   87294:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   87296:	2008      	movs	r0, #8
   87298:	4b19      	ldr	r3, [pc, #100]	; (87300 <fpga_program_setup1+0x6c>)
   8729a:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);	
	usart_enable_tx(FPGA_PROG_USART);
#else
				
	spi_enable_clock(SPI);
   8729c:	4c19      	ldr	r4, [pc, #100]	; (87304 <fpga_program_setup1+0x70>)
   8729e:	4620      	mov	r0, r4
   872a0:	4b19      	ldr	r3, [pc, #100]	; (87308 <fpga_program_setup1+0x74>)
   872a2:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   872a4:	2380      	movs	r3, #128	; 0x80
   872a6:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   872a8:	6863      	ldr	r3, [r4, #4]
   872aa:	f043 0301 	orr.w	r3, r3, #1
   872ae:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   872b0:	6863      	ldr	r3, [r4, #4]
   872b2:	f043 0310 	orr.w	r3, r3, #16
   872b6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   872b8:	6863      	ldr	r3, [r4, #4]
   872ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   872be:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
				
	spi_set_clock_polarity(SPI, 0, 0);
   872c0:	2200      	movs	r2, #0
   872c2:	4611      	mov	r1, r2
   872c4:	4620      	mov	r0, r4
   872c6:	4b11      	ldr	r3, [pc, #68]	; (8730c <fpga_program_setup1+0x78>)
   872c8:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   872ca:	2201      	movs	r2, #1
   872cc:	2100      	movs	r1, #0
   872ce:	4620      	mov	r0, r4
   872d0:	4b0f      	ldr	r3, [pc, #60]	; (87310 <fpga_program_setup1+0x7c>)
   872d2:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   872d4:	490f      	ldr	r1, [pc, #60]	; (87314 <fpga_program_setup1+0x80>)
   872d6:	4810      	ldr	r0, [pc, #64]	; (87318 <fpga_program_setup1+0x84>)
   872d8:	4b10      	ldr	r3, [pc, #64]	; (8731c <fpga_program_setup1+0x88>)
   872da:	4798      	blx	r3
   872dc:	b2c2      	uxtb	r2, r0
   872de:	2100      	movs	r1, #0
   872e0:	4620      	mov	r0, r4
   872e2:	4b0f      	ldr	r3, [pc, #60]	; (87320 <fpga_program_setup1+0x8c>)
   872e4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   872e6:	2301      	movs	r3, #1
   872e8:	6023      	str	r3, [r4, #0]
				
	spi_enable(SPI);
				
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   872ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   872ee:	200e      	movs	r0, #14
   872f0:	4c0c      	ldr	r4, [pc, #48]	; (87324 <fpga_program_setup1+0x90>)
   872f2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);			
   872f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   872f8:	200f      	movs	r0, #15
   872fa:	47a0      	blx	r4
   872fc:	bd10      	pop	{r4, pc}
   872fe:	bf00      	nop
   87300:	00085065 	.word	0x00085065
   87304:	40008000 	.word	0x40008000
   87308:	00085755 	.word	0x00085755
   8730c:	000857d7 	.word	0x000857d7
   87310:	000857f5 	.word	0x000857f5
   87314:	05b8d800 	.word	0x05b8d800
   87318:	000f4240 	.word	0x000f4240
   8731c:	00085813 	.word	0x00085813
   87320:	00085829 	.word	0x00085829
   87324:	00085081 	.word	0x00085081

00087328 <fpga_program_setup2>:
#endif
}

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   87328:	b508      	push	{r3, lr}
	FPGA_NPROG_HIGH();	
   8732a:	2008      	movs	r0, #8
   8732c:	4b01      	ldr	r3, [pc, #4]	; (87334 <fpga_program_setup2+0xc>)
   8732e:	4798      	blx	r3
   87330:	bd08      	pop	{r3, pc}
   87332:	bf00      	nop
   87334:	0008504b 	.word	0x0008504b

00087338 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   87338:	b510      	push	{r4, lr}
		databyte = databyte >> 1;
	}
	#elif FPGA_USE_USART
	usart_putchar(FPGA_PROG_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   8733a:	2300      	movs	r3, #0
   8733c:	461a      	mov	r2, r3
   8733e:	4601      	mov	r1, r0
   87340:	4801      	ldr	r0, [pc, #4]	; (87348 <fpga_program_sendbyte+0x10>)
   87342:	4c02      	ldr	r4, [pc, #8]	; (8734c <fpga_program_sendbyte+0x14>)
   87344:	47a0      	blx	r4
   87346:	bd10      	pop	{r4, pc}
   87348:	40008000 	.word	0x40008000
   8734c:	000857a3 	.word	0x000857a3

00087350 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   87350:	b5f0      	push	{r4, r5, r6, r7, lr}
   87352:	b083      	sub	sp, #12
   87354:	4604      	mov	r4, r0
   87356:	460d      	mov	r5, r1
	uint32_t val = 0;
   87358:	2300      	movs	r3, #0
   8735a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8735c:	4b19      	ldr	r3, [pc, #100]	; (873c4 <usart_serial_getchar+0x74>)
   8735e:	4298      	cmp	r0, r3
   87360:	d00a      	beq.n	87378 <usart_serial_getchar+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   87362:	4b19      	ldr	r3, [pc, #100]	; (873c8 <usart_serial_getchar+0x78>)
   87364:	4298      	cmp	r0, r3
   87366:	d00f      	beq.n	87388 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   87368:	4b18      	ldr	r3, [pc, #96]	; (873cc <usart_serial_getchar+0x7c>)
   8736a:	4298      	cmp	r0, r3
   8736c:	d016      	beq.n	8739c <usart_serial_getchar+0x4c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8736e:	4b18      	ldr	r3, [pc, #96]	; (873d0 <usart_serial_getchar+0x80>)
   87370:	429c      	cmp	r4, r3
   87372:	d01d      	beq.n	873b0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   87374:	b003      	add	sp, #12
   87376:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   87378:	461f      	mov	r7, r3
   8737a:	4e16      	ldr	r6, [pc, #88]	; (873d4 <usart_serial_getchar+0x84>)
   8737c:	4629      	mov	r1, r5
   8737e:	4638      	mov	r0, r7
   87380:	47b0      	blx	r6
   87382:	2800      	cmp	r0, #0
   87384:	d1fa      	bne.n	8737c <usart_serial_getchar+0x2c>
   87386:	e7f2      	b.n	8736e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   87388:	461e      	mov	r6, r3
   8738a:	4c13      	ldr	r4, [pc, #76]	; (873d8 <usart_serial_getchar+0x88>)
   8738c:	a901      	add	r1, sp, #4
   8738e:	4630      	mov	r0, r6
   87390:	47a0      	blx	r4
   87392:	2800      	cmp	r0, #0
   87394:	d1fa      	bne.n	8738c <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   87396:	9b01      	ldr	r3, [sp, #4]
   87398:	702b      	strb	r3, [r5, #0]
   8739a:	e7eb      	b.n	87374 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8739c:	461e      	mov	r6, r3
   8739e:	4c0e      	ldr	r4, [pc, #56]	; (873d8 <usart_serial_getchar+0x88>)
   873a0:	a901      	add	r1, sp, #4
   873a2:	4630      	mov	r0, r6
   873a4:	47a0      	blx	r4
   873a6:	2800      	cmp	r0, #0
   873a8:	d1fa      	bne.n	873a0 <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   873aa:	9b01      	ldr	r3, [sp, #4]
   873ac:	702b      	strb	r3, [r5, #0]
   873ae:	e7e1      	b.n	87374 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   873b0:	461e      	mov	r6, r3
   873b2:	4c09      	ldr	r4, [pc, #36]	; (873d8 <usart_serial_getchar+0x88>)
   873b4:	a901      	add	r1, sp, #4
   873b6:	4630      	mov	r0, r6
   873b8:	47a0      	blx	r4
   873ba:	2800      	cmp	r0, #0
   873bc:	d1fa      	bne.n	873b4 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   873be:	9b01      	ldr	r3, [sp, #4]
   873c0:	702b      	strb	r3, [r5, #0]
}
   873c2:	e7d7      	b.n	87374 <usart_serial_getchar+0x24>
   873c4:	400e0600 	.word	0x400e0600
   873c8:	40090000 	.word	0x40090000
   873cc:	40094000 	.word	0x40094000
   873d0:	40098000 	.word	0x40098000
   873d4:	00087081 	.word	0x00087081
   873d8:	0008700f 	.word	0x0008700f

000873dc <usart_serial_putchar>:
{
   873dc:	b570      	push	{r4, r5, r6, lr}
   873de:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   873e0:	4b18      	ldr	r3, [pc, #96]	; (87444 <usart_serial_putchar+0x68>)
   873e2:	4298      	cmp	r0, r3
   873e4:	d00a      	beq.n	873fc <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   873e6:	4b18      	ldr	r3, [pc, #96]	; (87448 <usart_serial_putchar+0x6c>)
   873e8:	4298      	cmp	r0, r3
   873ea:	d010      	beq.n	8740e <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   873ec:	4b17      	ldr	r3, [pc, #92]	; (8744c <usart_serial_putchar+0x70>)
   873ee:	4298      	cmp	r0, r3
   873f0:	d016      	beq.n	87420 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   873f2:	4b17      	ldr	r3, [pc, #92]	; (87450 <usart_serial_putchar+0x74>)
   873f4:	4298      	cmp	r0, r3
   873f6:	d01c      	beq.n	87432 <usart_serial_putchar+0x56>
	return 0;
   873f8:	2000      	movs	r0, #0
}
   873fa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   873fc:	461e      	mov	r6, r3
   873fe:	4d15      	ldr	r5, [pc, #84]	; (87454 <usart_serial_putchar+0x78>)
   87400:	4621      	mov	r1, r4
   87402:	4630      	mov	r0, r6
   87404:	47a8      	blx	r5
   87406:	2800      	cmp	r0, #0
   87408:	d1fa      	bne.n	87400 <usart_serial_putchar+0x24>
		return 1;
   8740a:	2001      	movs	r0, #1
   8740c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8740e:	461e      	mov	r6, r3
   87410:	4d11      	ldr	r5, [pc, #68]	; (87458 <usart_serial_putchar+0x7c>)
   87412:	4621      	mov	r1, r4
   87414:	4630      	mov	r0, r6
   87416:	47a8      	blx	r5
   87418:	2800      	cmp	r0, #0
   8741a:	d1fa      	bne.n	87412 <usart_serial_putchar+0x36>
		return 1;
   8741c:	2001      	movs	r0, #1
   8741e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   87420:	461e      	mov	r6, r3
   87422:	4d0d      	ldr	r5, [pc, #52]	; (87458 <usart_serial_putchar+0x7c>)
   87424:	4621      	mov	r1, r4
   87426:	4630      	mov	r0, r6
   87428:	47a8      	blx	r5
   8742a:	2800      	cmp	r0, #0
   8742c:	d1fa      	bne.n	87424 <usart_serial_putchar+0x48>
		return 1;
   8742e:	2001      	movs	r0, #1
   87430:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   87432:	461e      	mov	r6, r3
   87434:	4d08      	ldr	r5, [pc, #32]	; (87458 <usart_serial_putchar+0x7c>)
   87436:	4621      	mov	r1, r4
   87438:	4630      	mov	r0, r6
   8743a:	47a8      	blx	r5
   8743c:	2800      	cmp	r0, #0
   8743e:	d1fa      	bne.n	87436 <usart_serial_putchar+0x5a>
		return 1;
   87440:	2001      	movs	r0, #1
   87442:	bd70      	pop	{r4, r5, r6, pc}
   87444:	400e0600 	.word	0x400e0600
   87448:	40090000 	.word	0x40090000
   8744c:	40094000 	.word	0x40094000
   87450:	40098000 	.word	0x40098000
   87454:	00087071 	.word	0x00087071
   87458:	00086fe9 	.word	0x00086fe9

0008745c <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87460:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   87464:	2110      	movs	r1, #16
   87466:	a880      	add	r0, sp, #512	; 0x200
   87468:	4b74      	ldr	r3, [pc, #464]	; (8763c <main+0x1e0>)
   8746a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8746c:	2008      	movs	r0, #8
   8746e:	4d74      	ldr	r5, [pc, #464]	; (87640 <main+0x1e4>)
   87470:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   87472:	4c74      	ldr	r4, [pc, #464]	; (87644 <main+0x1e8>)
   87474:	4b74      	ldr	r3, [pc, #464]	; (87648 <main+0x1ec>)
   87476:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   87478:	4a74      	ldr	r2, [pc, #464]	; (8764c <main+0x1f0>)
   8747a:	4b75      	ldr	r3, [pc, #468]	; (87650 <main+0x1f4>)
   8747c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8747e:	4a75      	ldr	r2, [pc, #468]	; (87654 <main+0x1f8>)
   87480:	4b75      	ldr	r3, [pc, #468]	; (87658 <main+0x1fc>)
   87482:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   87484:	4b75      	ldr	r3, [pc, #468]	; (8765c <main+0x200>)
   87486:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   87488:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8748c:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   8748e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   87492:	9302      	str	r3, [sp, #8]
   87494:	2008      	movs	r0, #8
   87496:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   87498:	4669      	mov	r1, sp
   8749a:	4620      	mov	r0, r4
   8749c:	4b70      	ldr	r3, [pc, #448]	; (87660 <main+0x204>)
   8749e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   874a0:	4d70      	ldr	r5, [pc, #448]	; (87664 <main+0x208>)
   874a2:	682b      	ldr	r3, [r5, #0]
   874a4:	2100      	movs	r1, #0
   874a6:	6898      	ldr	r0, [r3, #8]
   874a8:	4c6f      	ldr	r4, [pc, #444]	; (87668 <main+0x20c>)
   874aa:	47a0      	blx	r4
	setbuf(stdin, NULL);
   874ac:	682b      	ldr	r3, [r5, #0]
   874ae:	2100      	movs	r1, #0
   874b0:	6858      	ldr	r0, [r3, #4]
   874b2:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   874b4:	2101      	movs	r1, #1
   874b6:	4b6d      	ldr	r3, [pc, #436]	; (8766c <main+0x210>)
   874b8:	7019      	strb	r1, [r3, #0]
   874ba:	f3bf 8f5f 	dmb	sy
   874be:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   874c0:	4b6b      	ldr	r3, [pc, #428]	; (87670 <main+0x214>)
   874c2:	2200      	movs	r2, #0
   874c4:	701a      	strb	r2, [r3, #0]
   874c6:	705a      	strb	r2, [r3, #1]
   874c8:	709a      	strb	r2, [r3, #2]
   874ca:	70da      	strb	r2, [r3, #3]
   874cc:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   874ce:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   874d0:	4b68      	ldr	r3, [pc, #416]	; (87674 <main+0x218>)
   874d2:	4798      	blx	r3
	board_init();
   874d4:	4b68      	ldr	r3, [pc, #416]	; (87678 <main+0x21c>)
   874d6:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   874d8:	4b68      	ldr	r3, [pc, #416]	; (8767c <main+0x220>)
   874da:	4798      	blx	r3
   874dc:	ad80      	add	r5, sp, #512	; 0x200
   874de:	4c68      	ldr	r4, [pc, #416]	; (87680 <main+0x224>)
   874e0:	f104 0820 	add.w	r8, r4, #32

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   874e4:	4f67      	ldr	r7, [pc, #412]	; (87684 <main+0x228>)
   874e6:	4e68      	ldr	r6, [pc, #416]	; (87688 <main+0x22c>)
   874e8:	f855 2b04 	ldr.w	r2, [r5], #4
   874ec:	4639      	mov	r1, r7
   874ee:	4620      	mov	r0, r4
   874f0:	47b0      	blx	r6
   874f2:	3408      	adds	r4, #8
	for(unsigned int i = 0; i < 4; i++){
   874f4:	45a0      	cmp	r8, r4
   874f6:	d1f7      	bne.n	874e8 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   874f8:	4c61      	ldr	r4, [pc, #388]	; (87680 <main+0x224>)
   874fa:	2600      	movs	r6, #0
   874fc:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   87500:	4a62      	ldr	r2, [pc, #392]	; (8768c <main+0x230>)
   87502:	4963      	ldr	r1, [pc, #396]	; (87690 <main+0x234>)
   87504:	4863      	ldr	r0, [pc, #396]	; (87694 <main+0x238>)
   87506:	4f64      	ldr	r7, [pc, #400]	; (87698 <main+0x23c>)
   87508:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   8750a:	4621      	mov	r1, r4
   8750c:	4863      	ldr	r0, [pc, #396]	; (8769c <main+0x240>)
   8750e:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   87510:	2009      	movs	r0, #9
   87512:	4b4b      	ldr	r3, [pc, #300]	; (87640 <main+0x1e4>)
   87514:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   87516:	4d62      	ldr	r5, [pc, #392]	; (876a0 <main+0x244>)
   87518:	4629      	mov	r1, r5
   8751a:	2029      	movs	r0, #41	; 0x29
   8751c:	4c61      	ldr	r4, [pc, #388]	; (876a4 <main+0x248>)
   8751e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   87520:	4629      	mov	r1, r5
   87522:	202a      	movs	r0, #42	; 0x2a
   87524:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   87526:	4629      	mov	r1, r5
   87528:	202b      	movs	r0, #43	; 0x2b
   8752a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   8752c:	4629      	mov	r1, r5
   8752e:	202c      	movs	r0, #44	; 0x2c
   87530:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   87532:	4629      	mov	r1, r5
   87534:	202d      	movs	r0, #45	; 0x2d
   87536:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   87538:	4629      	mov	r1, r5
   8753a:	202e      	movs	r0, #46	; 0x2e
   8753c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8753e:	4629      	mov	r1, r5
   87540:	202f      	movs	r0, #47	; 0x2f
   87542:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   87544:	4629      	mov	r1, r5
   87546:	2030      	movs	r0, #48	; 0x30
   87548:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8754a:	4629      	mov	r1, r5
   8754c:	2033      	movs	r0, #51	; 0x33
   8754e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   87550:	4629      	mov	r1, r5
   87552:	2037      	movs	r0, #55	; 0x37
   87554:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   87556:	4629      	mov	r1, r5
   87558:	2034      	movs	r0, #52	; 0x34
   8755a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   8755c:	4852      	ldr	r0, [pc, #328]	; (876a8 <main+0x24c>)
   8755e:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   87560:	4c52      	ldr	r4, [pc, #328]	; (876ac <main+0x250>)
   87562:	4a53      	ldr	r2, [pc, #332]	; (876b0 <main+0x254>)
   87564:	4631      	mov	r1, r6
   87566:	4620      	mov	r0, r4
   87568:	4b52      	ldr	r3, [pc, #328]	; (876b4 <main+0x258>)
   8756a:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   8756c:	4a52      	ldr	r2, [pc, #328]	; (876b8 <main+0x25c>)
   8756e:	4631      	mov	r1, r6
   87570:	4620      	mov	r0, r4
   87572:	4b52      	ldr	r3, [pc, #328]	; (876bc <main+0x260>)
   87574:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   87576:	4a52      	ldr	r2, [pc, #328]	; (876c0 <main+0x264>)
   87578:	4631      	mov	r1, r6
   8757a:	4620      	mov	r0, r4
   8757c:	4b51      	ldr	r3, [pc, #324]	; (876c4 <main+0x268>)
   8757e:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   87580:	2203      	movs	r2, #3
   87582:	4631      	mov	r1, r6
   87584:	4620      	mov	r0, r4
   87586:	4b50      	ldr	r3, [pc, #320]	; (876c8 <main+0x26c>)
   87588:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   8758a:	4b50      	ldr	r3, [pc, #320]	; (876cc <main+0x270>)
   8758c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8758e:	4b50      	ldr	r3, [pc, #320]	; (876d0 <main+0x274>)
   87590:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   87592:	2204      	movs	r2, #4
   87594:	4b4f      	ldr	r3, [pc, #316]	; (876d4 <main+0x278>)
   87596:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   87598:	4630      	mov	r0, r6
   8759a:	4b4f      	ldr	r3, [pc, #316]	; (876d8 <main+0x27c>)
   8759c:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   8759e:	484f      	ldr	r0, [pc, #316]	; (876dc <main+0x280>)
   875a0:	47b8      	blx	r7
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	extern bool enable_cdc_transfer[2];
	extern tcirc_buf usb_usart_circ_buf;
	init_circ_buf(&usb_usart_circ_buf);
   875a2:	484f      	ldr	r0, [pc, #316]	; (876e0 <main+0x284>)
   875a4:	4b4f      	ldr	r3, [pc, #316]	; (876e4 <main+0x288>)
   875a6:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
   875a8:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8766c <main+0x210>
		if (enable_cdc_transfer[0]) {
			uint8_t chr_buf[512];
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
				uint16_t i = 0;
				for (i = 0; circ_buf_has_char(&usb_usart_circ_buf) && (i < 512); i++) {
					chr_buf[i] = get_from_circ_buf(&usb_usart_circ_buf);
   875ac:	f8df a148 	ldr.w	sl, [pc, #328]	; 876f8 <main+0x29c>
   875b0:	2400      	movs	r4, #0
   875b2:	4625      	mov	r5, r4
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   875b4:	4e4c      	ldr	r6, [pc, #304]	; (876e8 <main+0x28c>)
   875b6:	e009      	b.n	875cc <main+0x170>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
   875b8:	2301      	movs	r3, #1
   875ba:	f88b 3000 	strb.w	r3, [fp]
   875be:	f3bf 8f5f 	dmb	sy
   875c2:	b662      	cpsie	i
		if (enable_cdc_transfer[0]) {
   875c4:	4b49      	ldr	r3, [pc, #292]	; (876ec <main+0x290>)
   875c6:	781b      	ldrb	r3, [r3, #0]
   875c8:	2b00      	cmp	r3, #0
   875ca:	d134      	bne.n	87636 <main+0x1da>
  __ASM volatile ("cpsid i");
   875cc:	b672      	cpsid	i
   875ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   875d2:	f88b 5000 	strb.w	r5, [fp]
	while (!(*lock_ptr)) {
   875d6:	4b26      	ldr	r3, [pc, #152]	; (87670 <main+0x214>)
   875d8:	781b      	ldrb	r3, [r3, #0]
   875da:	2b00      	cmp	r3, #0
   875dc:	d1ec      	bne.n	875b8 <main+0x15c>
   875de:	4b24      	ldr	r3, [pc, #144]	; (87670 <main+0x214>)
   875e0:	4620      	mov	r0, r4
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   875e2:	3001      	adds	r0, #1
   875e4:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
   875e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   875ea:	2a00      	cmp	r2, #0
   875ec:	d0f9      	beq.n	875e2 <main+0x186>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   875ee:	2800      	cmp	r0, #0
   875f0:	d0e2      	beq.n	875b8 <main+0x15c>
   875f2:	b672      	cpsid	i
   875f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   875f8:	f88b 4000 	strb.w	r4, [fp]
	pmc_sleep(sleep_mode);
   875fc:	47b0      	blx	r6
   875fe:	e7e1      	b.n	875c4 <main+0x168>
					chr_buf[i] = get_from_circ_buf(&usb_usart_circ_buf);
   87600:	4640      	mov	r0, r8
   87602:	47d0      	blx	sl
   87604:	f804 0b01 	strb.w	r0, [r4], #1
   87608:	1be5      	subs	r5, r4, r7
   8760a:	b2ad      	uxth	r5, r5
				for (i = 0; circ_buf_has_char(&usb_usart_circ_buf) && (i < 512); i++) {
   8760c:	4640      	mov	r0, r8
   8760e:	47b0      	blx	r6
   87610:	b108      	cbz	r0, 87616 <main+0x1ba>
   87612:	454c      	cmp	r4, r9
   87614:	d1f4      	bne.n	87600 <main+0x1a4>
				}
				udi_cdc_multi_write_buf(0, chr_buf, i);
   87616:	462a      	mov	r2, r5
   87618:	4669      	mov	r1, sp
   8761a:	2000      	movs	r0, #0
   8761c:	4b34      	ldr	r3, [pc, #208]	; (876f0 <main+0x294>)
   8761e:	4798      	blx	r3
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   87620:	4640      	mov	r0, r8
   87622:	4b34      	ldr	r3, [pc, #208]	; (876f4 <main+0x298>)
   87624:	4798      	blx	r3
   87626:	2800      	cmp	r0, #0
   87628:	d0c2      	beq.n	875b0 <main+0x154>
   8762a:	466f      	mov	r7, sp
   8762c:	f50d 7900 	add.w	r9, sp, #512	; 0x200
   87630:	466c      	mov	r4, sp
				for (i = 0; circ_buf_has_char(&usb_usart_circ_buf) && (i < 512); i++) {
   87632:	4e30      	ldr	r6, [pc, #192]	; (876f4 <main+0x298>)
   87634:	e7e8      	b.n	87608 <main+0x1ac>
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   87636:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 876e0 <main+0x284>
   8763a:	e7f1      	b.n	87620 <main+0x1c4>
   8763c:	00081ea9 	.word	0x00081ea9
   87640:	000853d5 	.word	0x000853d5
   87644:	400e0600 	.word	0x400e0600
   87648:	20002de8 	.word	0x20002de8
   8764c:	000873dd 	.word	0x000873dd
   87650:	20002de4 	.word	0x20002de4
   87654:	00087351 	.word	0x00087351
   87658:	20002de0 	.word	0x20002de0
   8765c:	05b8d800 	.word	0x05b8d800
   87660:	0008703b 	.word	0x0008703b
   87664:	20000714 	.word	0x20000714
   87668:	00087c0d 	.word	0x00087c0d
   8766c:	200006ea 	.word	0x200006ea
   87670:	20002dd8 	.word	0x20002dd8
   87674:	0008441d 	.word	0x0008441d
   87678:	00084ee5 	.word	0x00084ee5
   8767c:	000841a9 	.word	0x000841a9
   87680:	200006f0 	.word	0x200006f0
   87684:	0008dc90 	.word	0x0008dc90
   87688:	00087dad 	.word	0x00087dad
   8768c:	0008dc98 	.word	0x0008dc98
   87690:	0008dca4 	.word	0x0008dca4
   87694:	0008dcb0 	.word	0x0008dcb0
   87698:	00087a5d 	.word	0x00087a5d
   8769c:	0008dce4 	.word	0x0008dce4
   876a0:	08000001 	.word	0x08000001
   876a4:	00085081 	.word	0x00085081
   876a8:	0008dcf8 	.word	0x0008dcf8
   876ac:	400e0000 	.word	0x400e0000
   876b0:	01010100 	.word	0x01010100
   876b4:	00084f55 	.word	0x00084f55
   876b8:	01030101 	.word	0x01030101
   876bc:	00084f61 	.word	0x00084f61
   876c0:	00040002 	.word	0x00040002
   876c4:	00084f6d 	.word	0x00084f6d
   876c8:	00084f79 	.word	0x00084f79
   876cc:	00084365 	.word	0x00084365
   876d0:	000846fd 	.word	0x000846fd
   876d4:	400e0400 	.word	0x400e0400
   876d8:	0008543d 	.word	0x0008543d
   876dc:	0008dd18 	.word	0x0008dd18
   876e0:	200029b0 	.word	0x200029b0
   876e4:	00081ef9 	.word	0x00081ef9
   876e8:	00085499 	.word	0x00085499
   876ec:	20001a90 	.word	0x20001a90
   876f0:	00080715 	.word	0x00080715
   876f4:	00081fa1 	.word	0x00081fa1
   876f8:	00081f59 	.word	0x00081f59

000876fc <__aeabi_uldivmod>:
   876fc:	b953      	cbnz	r3, 87714 <__aeabi_uldivmod+0x18>
   876fe:	b94a      	cbnz	r2, 87714 <__aeabi_uldivmod+0x18>
   87700:	2900      	cmp	r1, #0
   87702:	bf08      	it	eq
   87704:	2800      	cmpeq	r0, #0
   87706:	bf1c      	itt	ne
   87708:	f04f 31ff 	movne.w	r1, #4294967295
   8770c:	f04f 30ff 	movne.w	r0, #4294967295
   87710:	f000 b97a 	b.w	87a08 <__aeabi_idiv0>
   87714:	f1ad 0c08 	sub.w	ip, sp, #8
   87718:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8771c:	f000 f806 	bl	8772c <__udivmoddi4>
   87720:	f8dd e004 	ldr.w	lr, [sp, #4]
   87724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87728:	b004      	add	sp, #16
   8772a:	4770      	bx	lr

0008772c <__udivmoddi4>:
   8772c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87730:	468c      	mov	ip, r1
   87732:	460e      	mov	r6, r1
   87734:	4604      	mov	r4, r0
   87736:	9d08      	ldr	r5, [sp, #32]
   87738:	2b00      	cmp	r3, #0
   8773a:	d150      	bne.n	877de <__udivmoddi4+0xb2>
   8773c:	428a      	cmp	r2, r1
   8773e:	4617      	mov	r7, r2
   87740:	d96c      	bls.n	8781c <__udivmoddi4+0xf0>
   87742:	fab2 fe82 	clz	lr, r2
   87746:	f1be 0f00 	cmp.w	lr, #0
   8774a:	d00b      	beq.n	87764 <__udivmoddi4+0x38>
   8774c:	f1ce 0c20 	rsb	ip, lr, #32
   87750:	fa01 f60e 	lsl.w	r6, r1, lr
   87754:	fa20 fc0c 	lsr.w	ip, r0, ip
   87758:	fa02 f70e 	lsl.w	r7, r2, lr
   8775c:	ea4c 0c06 	orr.w	ip, ip, r6
   87760:	fa00 f40e 	lsl.w	r4, r0, lr
   87764:	0c3a      	lsrs	r2, r7, #16
   87766:	fbbc f9f2 	udiv	r9, ip, r2
   8776a:	b2bb      	uxth	r3, r7
   8776c:	fb02 cc19 	mls	ip, r2, r9, ip
   87770:	fb09 fa03 	mul.w	sl, r9, r3
   87774:	ea4f 4814 	mov.w	r8, r4, lsr #16
   87778:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8777c:	45b2      	cmp	sl, r6
   8777e:	d90a      	bls.n	87796 <__udivmoddi4+0x6a>
   87780:	19f6      	adds	r6, r6, r7
   87782:	f109 31ff 	add.w	r1, r9, #4294967295
   87786:	f080 8125 	bcs.w	879d4 <__udivmoddi4+0x2a8>
   8778a:	45b2      	cmp	sl, r6
   8778c:	f240 8122 	bls.w	879d4 <__udivmoddi4+0x2a8>
   87790:	f1a9 0902 	sub.w	r9, r9, #2
   87794:	443e      	add	r6, r7
   87796:	eba6 060a 	sub.w	r6, r6, sl
   8779a:	fbb6 f0f2 	udiv	r0, r6, r2
   8779e:	fb02 6610 	mls	r6, r2, r0, r6
   877a2:	fb00 f303 	mul.w	r3, r0, r3
   877a6:	b2a4      	uxth	r4, r4
   877a8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   877ac:	42a3      	cmp	r3, r4
   877ae:	d909      	bls.n	877c4 <__udivmoddi4+0x98>
   877b0:	19e4      	adds	r4, r4, r7
   877b2:	f100 32ff 	add.w	r2, r0, #4294967295
   877b6:	f080 810b 	bcs.w	879d0 <__udivmoddi4+0x2a4>
   877ba:	42a3      	cmp	r3, r4
   877bc:	f240 8108 	bls.w	879d0 <__udivmoddi4+0x2a4>
   877c0:	3802      	subs	r0, #2
   877c2:	443c      	add	r4, r7
   877c4:	2100      	movs	r1, #0
   877c6:	1ae4      	subs	r4, r4, r3
   877c8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   877cc:	2d00      	cmp	r5, #0
   877ce:	d062      	beq.n	87896 <__udivmoddi4+0x16a>
   877d0:	2300      	movs	r3, #0
   877d2:	fa24 f40e 	lsr.w	r4, r4, lr
   877d6:	602c      	str	r4, [r5, #0]
   877d8:	606b      	str	r3, [r5, #4]
   877da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   877de:	428b      	cmp	r3, r1
   877e0:	d907      	bls.n	877f2 <__udivmoddi4+0xc6>
   877e2:	2d00      	cmp	r5, #0
   877e4:	d055      	beq.n	87892 <__udivmoddi4+0x166>
   877e6:	2100      	movs	r1, #0
   877e8:	e885 0041 	stmia.w	r5, {r0, r6}
   877ec:	4608      	mov	r0, r1
   877ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   877f2:	fab3 f183 	clz	r1, r3
   877f6:	2900      	cmp	r1, #0
   877f8:	f040 808f 	bne.w	8791a <__udivmoddi4+0x1ee>
   877fc:	42b3      	cmp	r3, r6
   877fe:	d302      	bcc.n	87806 <__udivmoddi4+0xda>
   87800:	4282      	cmp	r2, r0
   87802:	f200 80fc 	bhi.w	879fe <__udivmoddi4+0x2d2>
   87806:	1a84      	subs	r4, r0, r2
   87808:	eb66 0603 	sbc.w	r6, r6, r3
   8780c:	2001      	movs	r0, #1
   8780e:	46b4      	mov	ip, r6
   87810:	2d00      	cmp	r5, #0
   87812:	d040      	beq.n	87896 <__udivmoddi4+0x16a>
   87814:	e885 1010 	stmia.w	r5, {r4, ip}
   87818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8781c:	b912      	cbnz	r2, 87824 <__udivmoddi4+0xf8>
   8781e:	2701      	movs	r7, #1
   87820:	fbb7 f7f2 	udiv	r7, r7, r2
   87824:	fab7 fe87 	clz	lr, r7
   87828:	f1be 0f00 	cmp.w	lr, #0
   8782c:	d135      	bne.n	8789a <__udivmoddi4+0x16e>
   8782e:	2101      	movs	r1, #1
   87830:	1bf6      	subs	r6, r6, r7
   87832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   87836:	fa1f f887 	uxth.w	r8, r7
   8783a:	fbb6 f2fc 	udiv	r2, r6, ip
   8783e:	fb0c 6612 	mls	r6, ip, r2, r6
   87842:	fb08 f002 	mul.w	r0, r8, r2
   87846:	0c23      	lsrs	r3, r4, #16
   87848:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8784c:	42b0      	cmp	r0, r6
   8784e:	d907      	bls.n	87860 <__udivmoddi4+0x134>
   87850:	19f6      	adds	r6, r6, r7
   87852:	f102 33ff 	add.w	r3, r2, #4294967295
   87856:	d202      	bcs.n	8785e <__udivmoddi4+0x132>
   87858:	42b0      	cmp	r0, r6
   8785a:	f200 80d2 	bhi.w	87a02 <__udivmoddi4+0x2d6>
   8785e:	461a      	mov	r2, r3
   87860:	1a36      	subs	r6, r6, r0
   87862:	fbb6 f0fc 	udiv	r0, r6, ip
   87866:	fb0c 6610 	mls	r6, ip, r0, r6
   8786a:	fb08 f800 	mul.w	r8, r8, r0
   8786e:	b2a3      	uxth	r3, r4
   87870:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   87874:	45a0      	cmp	r8, r4
   87876:	d907      	bls.n	87888 <__udivmoddi4+0x15c>
   87878:	19e4      	adds	r4, r4, r7
   8787a:	f100 33ff 	add.w	r3, r0, #4294967295
   8787e:	d202      	bcs.n	87886 <__udivmoddi4+0x15a>
   87880:	45a0      	cmp	r8, r4
   87882:	f200 80b9 	bhi.w	879f8 <__udivmoddi4+0x2cc>
   87886:	4618      	mov	r0, r3
   87888:	eba4 0408 	sub.w	r4, r4, r8
   8788c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   87890:	e79c      	b.n	877cc <__udivmoddi4+0xa0>
   87892:	4629      	mov	r1, r5
   87894:	4628      	mov	r0, r5
   87896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8789a:	fa07 f70e 	lsl.w	r7, r7, lr
   8789e:	f1ce 0320 	rsb	r3, lr, #32
   878a2:	fa26 f203 	lsr.w	r2, r6, r3
   878a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   878aa:	fbb2 f1fc 	udiv	r1, r2, ip
   878ae:	fa1f f887 	uxth.w	r8, r7
   878b2:	fb0c 2211 	mls	r2, ip, r1, r2
   878b6:	fa06 f60e 	lsl.w	r6, r6, lr
   878ba:	fa20 f303 	lsr.w	r3, r0, r3
   878be:	fb01 f908 	mul.w	r9, r1, r8
   878c2:	4333      	orrs	r3, r6
   878c4:	0c1e      	lsrs	r6, r3, #16
   878c6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   878ca:	45b1      	cmp	r9, r6
   878cc:	fa00 f40e 	lsl.w	r4, r0, lr
   878d0:	d909      	bls.n	878e6 <__udivmoddi4+0x1ba>
   878d2:	19f6      	adds	r6, r6, r7
   878d4:	f101 32ff 	add.w	r2, r1, #4294967295
   878d8:	f080 808c 	bcs.w	879f4 <__udivmoddi4+0x2c8>
   878dc:	45b1      	cmp	r9, r6
   878de:	f240 8089 	bls.w	879f4 <__udivmoddi4+0x2c8>
   878e2:	3902      	subs	r1, #2
   878e4:	443e      	add	r6, r7
   878e6:	eba6 0609 	sub.w	r6, r6, r9
   878ea:	fbb6 f0fc 	udiv	r0, r6, ip
   878ee:	fb0c 6210 	mls	r2, ip, r0, r6
   878f2:	fb00 f908 	mul.w	r9, r0, r8
   878f6:	b29e      	uxth	r6, r3
   878f8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   878fc:	45b1      	cmp	r9, r6
   878fe:	d907      	bls.n	87910 <__udivmoddi4+0x1e4>
   87900:	19f6      	adds	r6, r6, r7
   87902:	f100 33ff 	add.w	r3, r0, #4294967295
   87906:	d271      	bcs.n	879ec <__udivmoddi4+0x2c0>
   87908:	45b1      	cmp	r9, r6
   8790a:	d96f      	bls.n	879ec <__udivmoddi4+0x2c0>
   8790c:	3802      	subs	r0, #2
   8790e:	443e      	add	r6, r7
   87910:	eba6 0609 	sub.w	r6, r6, r9
   87914:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   87918:	e78f      	b.n	8783a <__udivmoddi4+0x10e>
   8791a:	f1c1 0720 	rsb	r7, r1, #32
   8791e:	fa22 f807 	lsr.w	r8, r2, r7
   87922:	408b      	lsls	r3, r1
   87924:	ea48 0303 	orr.w	r3, r8, r3
   87928:	fa26 f407 	lsr.w	r4, r6, r7
   8792c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   87930:	fbb4 f9fe 	udiv	r9, r4, lr
   87934:	fa1f fc83 	uxth.w	ip, r3
   87938:	fb0e 4419 	mls	r4, lr, r9, r4
   8793c:	408e      	lsls	r6, r1
   8793e:	fa20 f807 	lsr.w	r8, r0, r7
   87942:	fb09 fa0c 	mul.w	sl, r9, ip
   87946:	ea48 0806 	orr.w	r8, r8, r6
   8794a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8794e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   87952:	45a2      	cmp	sl, r4
   87954:	fa02 f201 	lsl.w	r2, r2, r1
   87958:	fa00 f601 	lsl.w	r6, r0, r1
   8795c:	d908      	bls.n	87970 <__udivmoddi4+0x244>
   8795e:	18e4      	adds	r4, r4, r3
   87960:	f109 30ff 	add.w	r0, r9, #4294967295
   87964:	d244      	bcs.n	879f0 <__udivmoddi4+0x2c4>
   87966:	45a2      	cmp	sl, r4
   87968:	d942      	bls.n	879f0 <__udivmoddi4+0x2c4>
   8796a:	f1a9 0902 	sub.w	r9, r9, #2
   8796e:	441c      	add	r4, r3
   87970:	eba4 040a 	sub.w	r4, r4, sl
   87974:	fbb4 f0fe 	udiv	r0, r4, lr
   87978:	fb0e 4410 	mls	r4, lr, r0, r4
   8797c:	fb00 fc0c 	mul.w	ip, r0, ip
   87980:	fa1f f888 	uxth.w	r8, r8
   87984:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   87988:	45a4      	cmp	ip, r4
   8798a:	d907      	bls.n	8799c <__udivmoddi4+0x270>
   8798c:	18e4      	adds	r4, r4, r3
   8798e:	f100 3eff 	add.w	lr, r0, #4294967295
   87992:	d229      	bcs.n	879e8 <__udivmoddi4+0x2bc>
   87994:	45a4      	cmp	ip, r4
   87996:	d927      	bls.n	879e8 <__udivmoddi4+0x2bc>
   87998:	3802      	subs	r0, #2
   8799a:	441c      	add	r4, r3
   8799c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   879a0:	fba0 8902 	umull	r8, r9, r0, r2
   879a4:	eba4 0c0c 	sub.w	ip, r4, ip
   879a8:	45cc      	cmp	ip, r9
   879aa:	46c2      	mov	sl, r8
   879ac:	46ce      	mov	lr, r9
   879ae:	d315      	bcc.n	879dc <__udivmoddi4+0x2b0>
   879b0:	d012      	beq.n	879d8 <__udivmoddi4+0x2ac>
   879b2:	b155      	cbz	r5, 879ca <__udivmoddi4+0x29e>
   879b4:	ebb6 030a 	subs.w	r3, r6, sl
   879b8:	eb6c 060e 	sbc.w	r6, ip, lr
   879bc:	fa06 f707 	lsl.w	r7, r6, r7
   879c0:	40cb      	lsrs	r3, r1
   879c2:	431f      	orrs	r7, r3
   879c4:	40ce      	lsrs	r6, r1
   879c6:	602f      	str	r7, [r5, #0]
   879c8:	606e      	str	r6, [r5, #4]
   879ca:	2100      	movs	r1, #0
   879cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   879d0:	4610      	mov	r0, r2
   879d2:	e6f7      	b.n	877c4 <__udivmoddi4+0x98>
   879d4:	4689      	mov	r9, r1
   879d6:	e6de      	b.n	87796 <__udivmoddi4+0x6a>
   879d8:	4546      	cmp	r6, r8
   879da:	d2ea      	bcs.n	879b2 <__udivmoddi4+0x286>
   879dc:	ebb8 0a02 	subs.w	sl, r8, r2
   879e0:	eb69 0e03 	sbc.w	lr, r9, r3
   879e4:	3801      	subs	r0, #1
   879e6:	e7e4      	b.n	879b2 <__udivmoddi4+0x286>
   879e8:	4670      	mov	r0, lr
   879ea:	e7d7      	b.n	8799c <__udivmoddi4+0x270>
   879ec:	4618      	mov	r0, r3
   879ee:	e78f      	b.n	87910 <__udivmoddi4+0x1e4>
   879f0:	4681      	mov	r9, r0
   879f2:	e7bd      	b.n	87970 <__udivmoddi4+0x244>
   879f4:	4611      	mov	r1, r2
   879f6:	e776      	b.n	878e6 <__udivmoddi4+0x1ba>
   879f8:	3802      	subs	r0, #2
   879fa:	443c      	add	r4, r7
   879fc:	e744      	b.n	87888 <__udivmoddi4+0x15c>
   879fe:	4608      	mov	r0, r1
   87a00:	e706      	b.n	87810 <__udivmoddi4+0xe4>
   87a02:	3a02      	subs	r2, #2
   87a04:	443e      	add	r6, r7
   87a06:	e72b      	b.n	87860 <__udivmoddi4+0x134>

00087a08 <__aeabi_idiv0>:
   87a08:	4770      	bx	lr
   87a0a:	bf00      	nop

00087a0c <__libc_init_array>:
   87a0c:	b570      	push	{r4, r5, r6, lr}
   87a0e:	4e0f      	ldr	r6, [pc, #60]	; (87a4c <__libc_init_array+0x40>)
   87a10:	4d0f      	ldr	r5, [pc, #60]	; (87a50 <__libc_init_array+0x44>)
   87a12:	1b76      	subs	r6, r6, r5
   87a14:	10b6      	asrs	r6, r6, #2
   87a16:	bf18      	it	ne
   87a18:	2400      	movne	r4, #0
   87a1a:	d005      	beq.n	87a28 <__libc_init_array+0x1c>
   87a1c:	3401      	adds	r4, #1
   87a1e:	f855 3b04 	ldr.w	r3, [r5], #4
   87a22:	4798      	blx	r3
   87a24:	42a6      	cmp	r6, r4
   87a26:	d1f9      	bne.n	87a1c <__libc_init_array+0x10>
   87a28:	4e0a      	ldr	r6, [pc, #40]	; (87a54 <__libc_init_array+0x48>)
   87a2a:	4d0b      	ldr	r5, [pc, #44]	; (87a58 <__libc_init_array+0x4c>)
   87a2c:	f006 fad8 	bl	8dfe0 <_init>
   87a30:	1b76      	subs	r6, r6, r5
   87a32:	10b6      	asrs	r6, r6, #2
   87a34:	bf18      	it	ne
   87a36:	2400      	movne	r4, #0
   87a38:	d006      	beq.n	87a48 <__libc_init_array+0x3c>
   87a3a:	3401      	adds	r4, #1
   87a3c:	f855 3b04 	ldr.w	r3, [r5], #4
   87a40:	4798      	blx	r3
   87a42:	42a6      	cmp	r6, r4
   87a44:	d1f9      	bne.n	87a3a <__libc_init_array+0x2e>
   87a46:	bd70      	pop	{r4, r5, r6, pc}
   87a48:	bd70      	pop	{r4, r5, r6, pc}
   87a4a:	bf00      	nop
   87a4c:	0008dfec 	.word	0x0008dfec
   87a50:	0008dfec 	.word	0x0008dfec
   87a54:	0008dff4 	.word	0x0008dff4
   87a58:	0008dfec 	.word	0x0008dfec

00087a5c <iprintf>:
   87a5c:	b40f      	push	{r0, r1, r2, r3}
   87a5e:	b510      	push	{r4, lr}
   87a60:	4b07      	ldr	r3, [pc, #28]	; (87a80 <iprintf+0x24>)
   87a62:	b082      	sub	sp, #8
   87a64:	ac04      	add	r4, sp, #16
   87a66:	f854 2b04 	ldr.w	r2, [r4], #4
   87a6a:	6818      	ldr	r0, [r3, #0]
   87a6c:	4623      	mov	r3, r4
   87a6e:	6881      	ldr	r1, [r0, #8]
   87a70:	9401      	str	r4, [sp, #4]
   87a72:	f001 fc81 	bl	89378 <_vfiprintf_r>
   87a76:	b002      	add	sp, #8
   87a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   87a7c:	b004      	add	sp, #16
   87a7e:	4770      	bx	lr
   87a80:	20000714 	.word	0x20000714

00087a84 <memcpy>:
   87a84:	4684      	mov	ip, r0
   87a86:	ea41 0300 	orr.w	r3, r1, r0
   87a8a:	f013 0303 	ands.w	r3, r3, #3
   87a8e:	d149      	bne.n	87b24 <memcpy+0xa0>
   87a90:	3a40      	subs	r2, #64	; 0x40
   87a92:	d323      	bcc.n	87adc <memcpy+0x58>
   87a94:	680b      	ldr	r3, [r1, #0]
   87a96:	6003      	str	r3, [r0, #0]
   87a98:	684b      	ldr	r3, [r1, #4]
   87a9a:	6043      	str	r3, [r0, #4]
   87a9c:	688b      	ldr	r3, [r1, #8]
   87a9e:	6083      	str	r3, [r0, #8]
   87aa0:	68cb      	ldr	r3, [r1, #12]
   87aa2:	60c3      	str	r3, [r0, #12]
   87aa4:	690b      	ldr	r3, [r1, #16]
   87aa6:	6103      	str	r3, [r0, #16]
   87aa8:	694b      	ldr	r3, [r1, #20]
   87aaa:	6143      	str	r3, [r0, #20]
   87aac:	698b      	ldr	r3, [r1, #24]
   87aae:	6183      	str	r3, [r0, #24]
   87ab0:	69cb      	ldr	r3, [r1, #28]
   87ab2:	61c3      	str	r3, [r0, #28]
   87ab4:	6a0b      	ldr	r3, [r1, #32]
   87ab6:	6203      	str	r3, [r0, #32]
   87ab8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87aba:	6243      	str	r3, [r0, #36]	; 0x24
   87abc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87abe:	6283      	str	r3, [r0, #40]	; 0x28
   87ac0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   87ac2:	62c3      	str	r3, [r0, #44]	; 0x2c
   87ac4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   87ac6:	6303      	str	r3, [r0, #48]	; 0x30
   87ac8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   87aca:	6343      	str	r3, [r0, #52]	; 0x34
   87acc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   87ace:	6383      	str	r3, [r0, #56]	; 0x38
   87ad0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   87ad2:	63c3      	str	r3, [r0, #60]	; 0x3c
   87ad4:	3040      	adds	r0, #64	; 0x40
   87ad6:	3140      	adds	r1, #64	; 0x40
   87ad8:	3a40      	subs	r2, #64	; 0x40
   87ada:	d2db      	bcs.n	87a94 <memcpy+0x10>
   87adc:	3230      	adds	r2, #48	; 0x30
   87ade:	d30b      	bcc.n	87af8 <memcpy+0x74>
   87ae0:	680b      	ldr	r3, [r1, #0]
   87ae2:	6003      	str	r3, [r0, #0]
   87ae4:	684b      	ldr	r3, [r1, #4]
   87ae6:	6043      	str	r3, [r0, #4]
   87ae8:	688b      	ldr	r3, [r1, #8]
   87aea:	6083      	str	r3, [r0, #8]
   87aec:	68cb      	ldr	r3, [r1, #12]
   87aee:	60c3      	str	r3, [r0, #12]
   87af0:	3010      	adds	r0, #16
   87af2:	3110      	adds	r1, #16
   87af4:	3a10      	subs	r2, #16
   87af6:	d2f3      	bcs.n	87ae0 <memcpy+0x5c>
   87af8:	320c      	adds	r2, #12
   87afa:	d305      	bcc.n	87b08 <memcpy+0x84>
   87afc:	f851 3b04 	ldr.w	r3, [r1], #4
   87b00:	f840 3b04 	str.w	r3, [r0], #4
   87b04:	3a04      	subs	r2, #4
   87b06:	d2f9      	bcs.n	87afc <memcpy+0x78>
   87b08:	3204      	adds	r2, #4
   87b0a:	d008      	beq.n	87b1e <memcpy+0x9a>
   87b0c:	07d2      	lsls	r2, r2, #31
   87b0e:	bf1c      	itt	ne
   87b10:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87b14:	f800 3b01 	strbne.w	r3, [r0], #1
   87b18:	d301      	bcc.n	87b1e <memcpy+0x9a>
   87b1a:	880b      	ldrh	r3, [r1, #0]
   87b1c:	8003      	strh	r3, [r0, #0]
   87b1e:	4660      	mov	r0, ip
   87b20:	4770      	bx	lr
   87b22:	bf00      	nop
   87b24:	2a08      	cmp	r2, #8
   87b26:	d313      	bcc.n	87b50 <memcpy+0xcc>
   87b28:	078b      	lsls	r3, r1, #30
   87b2a:	d0b1      	beq.n	87a90 <memcpy+0xc>
   87b2c:	f010 0303 	ands.w	r3, r0, #3
   87b30:	d0ae      	beq.n	87a90 <memcpy+0xc>
   87b32:	f1c3 0304 	rsb	r3, r3, #4
   87b36:	1ad2      	subs	r2, r2, r3
   87b38:	07db      	lsls	r3, r3, #31
   87b3a:	bf1c      	itt	ne
   87b3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87b40:	f800 3b01 	strbne.w	r3, [r0], #1
   87b44:	d3a4      	bcc.n	87a90 <memcpy+0xc>
   87b46:	f831 3b02 	ldrh.w	r3, [r1], #2
   87b4a:	f820 3b02 	strh.w	r3, [r0], #2
   87b4e:	e79f      	b.n	87a90 <memcpy+0xc>
   87b50:	3a04      	subs	r2, #4
   87b52:	d3d9      	bcc.n	87b08 <memcpy+0x84>
   87b54:	3a01      	subs	r2, #1
   87b56:	f811 3b01 	ldrb.w	r3, [r1], #1
   87b5a:	f800 3b01 	strb.w	r3, [r0], #1
   87b5e:	d2f9      	bcs.n	87b54 <memcpy+0xd0>
   87b60:	780b      	ldrb	r3, [r1, #0]
   87b62:	7003      	strb	r3, [r0, #0]
   87b64:	784b      	ldrb	r3, [r1, #1]
   87b66:	7043      	strb	r3, [r0, #1]
   87b68:	788b      	ldrb	r3, [r1, #2]
   87b6a:	7083      	strb	r3, [r0, #2]
   87b6c:	4660      	mov	r0, ip
   87b6e:	4770      	bx	lr

00087b70 <memset>:
   87b70:	b470      	push	{r4, r5, r6}
   87b72:	0786      	lsls	r6, r0, #30
   87b74:	d046      	beq.n	87c04 <memset+0x94>
   87b76:	1e54      	subs	r4, r2, #1
   87b78:	2a00      	cmp	r2, #0
   87b7a:	d041      	beq.n	87c00 <memset+0x90>
   87b7c:	b2ca      	uxtb	r2, r1
   87b7e:	4603      	mov	r3, r0
   87b80:	e002      	b.n	87b88 <memset+0x18>
   87b82:	f114 34ff 	adds.w	r4, r4, #4294967295
   87b86:	d33b      	bcc.n	87c00 <memset+0x90>
   87b88:	f803 2b01 	strb.w	r2, [r3], #1
   87b8c:	079d      	lsls	r5, r3, #30
   87b8e:	d1f8      	bne.n	87b82 <memset+0x12>
   87b90:	2c03      	cmp	r4, #3
   87b92:	d92e      	bls.n	87bf2 <memset+0x82>
   87b94:	b2cd      	uxtb	r5, r1
   87b96:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   87b9a:	2c0f      	cmp	r4, #15
   87b9c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   87ba0:	d919      	bls.n	87bd6 <memset+0x66>
   87ba2:	4626      	mov	r6, r4
   87ba4:	f103 0210 	add.w	r2, r3, #16
   87ba8:	3e10      	subs	r6, #16
   87baa:	2e0f      	cmp	r6, #15
   87bac:	f842 5c10 	str.w	r5, [r2, #-16]
   87bb0:	f842 5c0c 	str.w	r5, [r2, #-12]
   87bb4:	f842 5c08 	str.w	r5, [r2, #-8]
   87bb8:	f842 5c04 	str.w	r5, [r2, #-4]
   87bbc:	f102 0210 	add.w	r2, r2, #16
   87bc0:	d8f2      	bhi.n	87ba8 <memset+0x38>
   87bc2:	f1a4 0210 	sub.w	r2, r4, #16
   87bc6:	f022 020f 	bic.w	r2, r2, #15
   87bca:	f004 040f 	and.w	r4, r4, #15
   87bce:	3210      	adds	r2, #16
   87bd0:	2c03      	cmp	r4, #3
   87bd2:	4413      	add	r3, r2
   87bd4:	d90d      	bls.n	87bf2 <memset+0x82>
   87bd6:	461e      	mov	r6, r3
   87bd8:	4622      	mov	r2, r4
   87bda:	3a04      	subs	r2, #4
   87bdc:	2a03      	cmp	r2, #3
   87bde:	f846 5b04 	str.w	r5, [r6], #4
   87be2:	d8fa      	bhi.n	87bda <memset+0x6a>
   87be4:	1f22      	subs	r2, r4, #4
   87be6:	f022 0203 	bic.w	r2, r2, #3
   87bea:	3204      	adds	r2, #4
   87bec:	4413      	add	r3, r2
   87bee:	f004 0403 	and.w	r4, r4, #3
   87bf2:	b12c      	cbz	r4, 87c00 <memset+0x90>
   87bf4:	b2c9      	uxtb	r1, r1
   87bf6:	441c      	add	r4, r3
   87bf8:	f803 1b01 	strb.w	r1, [r3], #1
   87bfc:	429c      	cmp	r4, r3
   87bfe:	d1fb      	bne.n	87bf8 <memset+0x88>
   87c00:	bc70      	pop	{r4, r5, r6}
   87c02:	4770      	bx	lr
   87c04:	4614      	mov	r4, r2
   87c06:	4603      	mov	r3, r0
   87c08:	e7c2      	b.n	87b90 <memset+0x20>
   87c0a:	bf00      	nop

00087c0c <setbuf>:
   87c0c:	2900      	cmp	r1, #0
   87c0e:	bf0c      	ite	eq
   87c10:	2202      	moveq	r2, #2
   87c12:	2200      	movne	r2, #0
   87c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
   87c18:	f000 b800 	b.w	87c1c <setvbuf>

00087c1c <setvbuf>:
   87c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   87c20:	4d61      	ldr	r5, [pc, #388]	; (87da8 <setvbuf+0x18c>)
   87c22:	b083      	sub	sp, #12
   87c24:	682d      	ldr	r5, [r5, #0]
   87c26:	4604      	mov	r4, r0
   87c28:	460f      	mov	r7, r1
   87c2a:	4690      	mov	r8, r2
   87c2c:	461e      	mov	r6, r3
   87c2e:	b115      	cbz	r5, 87c36 <setvbuf+0x1a>
   87c30:	6bab      	ldr	r3, [r5, #56]	; 0x38
   87c32:	2b00      	cmp	r3, #0
   87c34:	d064      	beq.n	87d00 <setvbuf+0xe4>
   87c36:	f1b8 0f02 	cmp.w	r8, #2
   87c3a:	d006      	beq.n	87c4a <setvbuf+0x2e>
   87c3c:	f1b8 0f01 	cmp.w	r8, #1
   87c40:	f200 809f 	bhi.w	87d82 <setvbuf+0x166>
   87c44:	2e00      	cmp	r6, #0
   87c46:	f2c0 809c 	blt.w	87d82 <setvbuf+0x166>
   87c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87c4c:	07d8      	lsls	r0, r3, #31
   87c4e:	d534      	bpl.n	87cba <setvbuf+0x9e>
   87c50:	4621      	mov	r1, r4
   87c52:	4628      	mov	r0, r5
   87c54:	f003 fade 	bl	8b214 <_fflush_r>
   87c58:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87c5a:	b141      	cbz	r1, 87c6e <setvbuf+0x52>
   87c5c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87c60:	4299      	cmp	r1, r3
   87c62:	d002      	beq.n	87c6a <setvbuf+0x4e>
   87c64:	4628      	mov	r0, r5
   87c66:	f003 fc53 	bl	8b510 <_free_r>
   87c6a:	2300      	movs	r3, #0
   87c6c:	6323      	str	r3, [r4, #48]	; 0x30
   87c6e:	2200      	movs	r2, #0
   87c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87c74:	61a2      	str	r2, [r4, #24]
   87c76:	6062      	str	r2, [r4, #4]
   87c78:	061a      	lsls	r2, r3, #24
   87c7a:	d43a      	bmi.n	87cf2 <setvbuf+0xd6>
   87c7c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   87c80:	f023 0303 	bic.w	r3, r3, #3
   87c84:	f1b8 0f02 	cmp.w	r8, #2
   87c88:	81a3      	strh	r3, [r4, #12]
   87c8a:	d01d      	beq.n	87cc8 <setvbuf+0xac>
   87c8c:	ab01      	add	r3, sp, #4
   87c8e:	466a      	mov	r2, sp
   87c90:	4621      	mov	r1, r4
   87c92:	4628      	mov	r0, r5
   87c94:	f003 fee8 	bl	8ba68 <__swhatbuf_r>
   87c98:	89a3      	ldrh	r3, [r4, #12]
   87c9a:	4318      	orrs	r0, r3
   87c9c:	81a0      	strh	r0, [r4, #12]
   87c9e:	2e00      	cmp	r6, #0
   87ca0:	d132      	bne.n	87d08 <setvbuf+0xec>
   87ca2:	9e00      	ldr	r6, [sp, #0]
   87ca4:	4630      	mov	r0, r6
   87ca6:	f003 ff57 	bl	8bb58 <malloc>
   87caa:	4607      	mov	r7, r0
   87cac:	2800      	cmp	r0, #0
   87cae:	d06b      	beq.n	87d88 <setvbuf+0x16c>
   87cb0:	89a3      	ldrh	r3, [r4, #12]
   87cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87cb6:	81a3      	strh	r3, [r4, #12]
   87cb8:	e028      	b.n	87d0c <setvbuf+0xf0>
   87cba:	89a3      	ldrh	r3, [r4, #12]
   87cbc:	0599      	lsls	r1, r3, #22
   87cbe:	d4c7      	bmi.n	87c50 <setvbuf+0x34>
   87cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87cc2:	f003 fecd 	bl	8ba60 <__retarget_lock_acquire_recursive>
   87cc6:	e7c3      	b.n	87c50 <setvbuf+0x34>
   87cc8:	2500      	movs	r5, #0
   87cca:	2600      	movs	r6, #0
   87ccc:	2001      	movs	r0, #1
   87cce:	6e61      	ldr	r1, [r4, #100]	; 0x64
   87cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   87cd4:	f043 0302 	orr.w	r3, r3, #2
   87cd8:	60a6      	str	r6, [r4, #8]
   87cda:	07ce      	lsls	r6, r1, #31
   87cdc:	81a3      	strh	r3, [r4, #12]
   87cde:	6160      	str	r0, [r4, #20]
   87ce0:	6022      	str	r2, [r4, #0]
   87ce2:	6122      	str	r2, [r4, #16]
   87ce4:	d401      	bmi.n	87cea <setvbuf+0xce>
   87ce6:	0598      	lsls	r0, r3, #22
   87ce8:	d53e      	bpl.n	87d68 <setvbuf+0x14c>
   87cea:	4628      	mov	r0, r5
   87cec:	b003      	add	sp, #12
   87cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87cf2:	6921      	ldr	r1, [r4, #16]
   87cf4:	4628      	mov	r0, r5
   87cf6:	f003 fc0b 	bl	8b510 <_free_r>
   87cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87cfe:	e7bd      	b.n	87c7c <setvbuf+0x60>
   87d00:	4628      	mov	r0, r5
   87d02:	f003 fadf 	bl	8b2c4 <__sinit>
   87d06:	e796      	b.n	87c36 <setvbuf+0x1a>
   87d08:	2f00      	cmp	r7, #0
   87d0a:	d0cb      	beq.n	87ca4 <setvbuf+0x88>
   87d0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   87d0e:	2b00      	cmp	r3, #0
   87d10:	d033      	beq.n	87d7a <setvbuf+0x15e>
   87d12:	9b00      	ldr	r3, [sp, #0]
   87d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   87d18:	429e      	cmp	r6, r3
   87d1a:	bf1c      	itt	ne
   87d1c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   87d20:	81a2      	strhne	r2, [r4, #12]
   87d22:	f1b8 0f01 	cmp.w	r8, #1
   87d26:	bf04      	itt	eq
   87d28:	f042 0201 	orreq.w	r2, r2, #1
   87d2c:	81a2      	strheq	r2, [r4, #12]
   87d2e:	b292      	uxth	r2, r2
   87d30:	f012 0308 	ands.w	r3, r2, #8
   87d34:	6027      	str	r7, [r4, #0]
   87d36:	6127      	str	r7, [r4, #16]
   87d38:	6166      	str	r6, [r4, #20]
   87d3a:	d00e      	beq.n	87d5a <setvbuf+0x13e>
   87d3c:	07d1      	lsls	r1, r2, #31
   87d3e:	d51a      	bpl.n	87d76 <setvbuf+0x15a>
   87d40:	2300      	movs	r3, #0
   87d42:	6e65      	ldr	r5, [r4, #100]	; 0x64
   87d44:	4276      	negs	r6, r6
   87d46:	f015 0501 	ands.w	r5, r5, #1
   87d4a:	61a6      	str	r6, [r4, #24]
   87d4c:	60a3      	str	r3, [r4, #8]
   87d4e:	d009      	beq.n	87d64 <setvbuf+0x148>
   87d50:	2500      	movs	r5, #0
   87d52:	4628      	mov	r0, r5
   87d54:	b003      	add	sp, #12
   87d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87d5a:	60a3      	str	r3, [r4, #8]
   87d5c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   87d5e:	f015 0501 	ands.w	r5, r5, #1
   87d62:	d1f5      	bne.n	87d50 <setvbuf+0x134>
   87d64:	0593      	lsls	r3, r2, #22
   87d66:	d4c0      	bmi.n	87cea <setvbuf+0xce>
   87d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87d6a:	f003 fe7b 	bl	8ba64 <__retarget_lock_release_recursive>
   87d6e:	4628      	mov	r0, r5
   87d70:	b003      	add	sp, #12
   87d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87d76:	60a6      	str	r6, [r4, #8]
   87d78:	e7f0      	b.n	87d5c <setvbuf+0x140>
   87d7a:	4628      	mov	r0, r5
   87d7c:	f003 faa2 	bl	8b2c4 <__sinit>
   87d80:	e7c7      	b.n	87d12 <setvbuf+0xf6>
   87d82:	f04f 35ff 	mov.w	r5, #4294967295
   87d86:	e7b0      	b.n	87cea <setvbuf+0xce>
   87d88:	f8dd 9000 	ldr.w	r9, [sp]
   87d8c:	45b1      	cmp	r9, r6
   87d8e:	d004      	beq.n	87d9a <setvbuf+0x17e>
   87d90:	4648      	mov	r0, r9
   87d92:	f003 fee1 	bl	8bb58 <malloc>
   87d96:	4607      	mov	r7, r0
   87d98:	b920      	cbnz	r0, 87da4 <setvbuf+0x188>
   87d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87d9e:	f04f 35ff 	mov.w	r5, #4294967295
   87da2:	e792      	b.n	87cca <setvbuf+0xae>
   87da4:	464e      	mov	r6, r9
   87da6:	e783      	b.n	87cb0 <setvbuf+0x94>
   87da8:	20000714 	.word	0x20000714

00087dac <sprintf>:
   87dac:	b40e      	push	{r1, r2, r3}
   87dae:	4601      	mov	r1, r0
   87db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   87db2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   87db6:	f44f 7702 	mov.w	r7, #520	; 0x208
   87dba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   87dbe:	b09c      	sub	sp, #112	; 0x70
   87dc0:	ac21      	add	r4, sp, #132	; 0x84
   87dc2:	f854 2b04 	ldr.w	r2, [r4], #4
   87dc6:	4b0b      	ldr	r3, [pc, #44]	; (87df4 <sprintf+0x48>)
   87dc8:	9102      	str	r1, [sp, #8]
   87dca:	9106      	str	r1, [sp, #24]
   87dcc:	6818      	ldr	r0, [r3, #0]
   87dce:	a902      	add	r1, sp, #8
   87dd0:	4623      	mov	r3, r4
   87dd2:	9401      	str	r4, [sp, #4]
   87dd4:	f8ad 7014 	strh.w	r7, [sp, #20]
   87dd8:	9504      	str	r5, [sp, #16]
   87dda:	9507      	str	r5, [sp, #28]
   87ddc:	f8ad 6016 	strh.w	r6, [sp, #22]
   87de0:	f000 f80a 	bl	87df8 <_svfprintf_r>
   87de4:	2200      	movs	r2, #0
   87de6:	9b02      	ldr	r3, [sp, #8]
   87de8:	701a      	strb	r2, [r3, #0]
   87dea:	b01c      	add	sp, #112	; 0x70
   87dec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   87df0:	b003      	add	sp, #12
   87df2:	4770      	bx	lr
   87df4:	20000714 	.word	0x20000714

00087df8 <_svfprintf_r>:
   87df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87dfc:	b0c3      	sub	sp, #268	; 0x10c
   87dfe:	460c      	mov	r4, r1
   87e00:	910b      	str	r1, [sp, #44]	; 0x2c
   87e02:	4692      	mov	sl, r2
   87e04:	930f      	str	r3, [sp, #60]	; 0x3c
   87e06:	900c      	str	r0, [sp, #48]	; 0x30
   87e08:	f003 fe18 	bl	8ba3c <_localeconv_r>
   87e0c:	6803      	ldr	r3, [r0, #0]
   87e0e:	4618      	mov	r0, r3
   87e10:	931a      	str	r3, [sp, #104]	; 0x68
   87e12:	f004 ff1f 	bl	8cc54 <strlen>
   87e16:	89a3      	ldrh	r3, [r4, #12]
   87e18:	9019      	str	r0, [sp, #100]	; 0x64
   87e1a:	0619      	lsls	r1, r3, #24
   87e1c:	d503      	bpl.n	87e26 <_svfprintf_r+0x2e>
   87e1e:	6923      	ldr	r3, [r4, #16]
   87e20:	2b00      	cmp	r3, #0
   87e22:	f001 8035 	beq.w	88e90 <_svfprintf_r+0x1098>
   87e26:	2300      	movs	r3, #0
   87e28:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   87e2c:	46c8      	mov	r8, r9
   87e2e:	9315      	str	r3, [sp, #84]	; 0x54
   87e30:	9313      	str	r3, [sp, #76]	; 0x4c
   87e32:	9314      	str	r3, [sp, #80]	; 0x50
   87e34:	9318      	str	r3, [sp, #96]	; 0x60
   87e36:	931b      	str	r3, [sp, #108]	; 0x6c
   87e38:	9309      	str	r3, [sp, #36]	; 0x24
   87e3a:	9316      	str	r3, [sp, #88]	; 0x58
   87e3c:	9317      	str	r3, [sp, #92]	; 0x5c
   87e3e:	9327      	str	r3, [sp, #156]	; 0x9c
   87e40:	9326      	str	r3, [sp, #152]	; 0x98
   87e42:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   87e46:	f89a 3000 	ldrb.w	r3, [sl]
   87e4a:	4654      	mov	r4, sl
   87e4c:	b1eb      	cbz	r3, 87e8a <_svfprintf_r+0x92>
   87e4e:	2b25      	cmp	r3, #37	; 0x25
   87e50:	d102      	bne.n	87e58 <_svfprintf_r+0x60>
   87e52:	e01a      	b.n	87e8a <_svfprintf_r+0x92>
   87e54:	2b25      	cmp	r3, #37	; 0x25
   87e56:	d003      	beq.n	87e60 <_svfprintf_r+0x68>
   87e58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87e5c:	2b00      	cmp	r3, #0
   87e5e:	d1f9      	bne.n	87e54 <_svfprintf_r+0x5c>
   87e60:	eba4 050a 	sub.w	r5, r4, sl
   87e64:	b18d      	cbz	r5, 87e8a <_svfprintf_r+0x92>
   87e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87e68:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87e6a:	3301      	adds	r3, #1
   87e6c:	442a      	add	r2, r5
   87e6e:	2b07      	cmp	r3, #7
   87e70:	f8c8 a000 	str.w	sl, [r8]
   87e74:	f8c8 5004 	str.w	r5, [r8, #4]
   87e78:	9227      	str	r2, [sp, #156]	; 0x9c
   87e7a:	9326      	str	r3, [sp, #152]	; 0x98
   87e7c:	f300 808a 	bgt.w	87f94 <_svfprintf_r+0x19c>
   87e80:	f108 0808 	add.w	r8, r8, #8
   87e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87e86:	442b      	add	r3, r5
   87e88:	9309      	str	r3, [sp, #36]	; 0x24
   87e8a:	7823      	ldrb	r3, [r4, #0]
   87e8c:	2b00      	cmp	r3, #0
   87e8e:	f000 8089 	beq.w	87fa4 <_svfprintf_r+0x1ac>
   87e92:	2300      	movs	r3, #0
   87e94:	f04f 30ff 	mov.w	r0, #4294967295
   87e98:	461a      	mov	r2, r3
   87e9a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   87e9e:	4619      	mov	r1, r3
   87ea0:	930d      	str	r3, [sp, #52]	; 0x34
   87ea2:	469b      	mov	fp, r3
   87ea4:	7863      	ldrb	r3, [r4, #1]
   87ea6:	f104 0a01 	add.w	sl, r4, #1
   87eaa:	900a      	str	r0, [sp, #40]	; 0x28
   87eac:	f10a 0a01 	add.w	sl, sl, #1
   87eb0:	f1a3 0020 	sub.w	r0, r3, #32
   87eb4:	2858      	cmp	r0, #88	; 0x58
   87eb6:	f200 83b7 	bhi.w	88628 <_svfprintf_r+0x830>
   87eba:	e8df f010 	tbh	[pc, r0, lsl #1]
   87ebe:	034c      	.short	0x034c
   87ec0:	03b503b5 	.word	0x03b503b5
   87ec4:	03b50354 	.word	0x03b50354
   87ec8:	03b503b5 	.word	0x03b503b5
   87ecc:	03b503b5 	.word	0x03b503b5
   87ed0:	005903b5 	.word	0x005903b5
   87ed4:	03b50359 	.word	0x03b50359
   87ed8:	02140066 	.word	0x02140066
   87edc:	022f03b5 	.word	0x022f03b5
   87ee0:	03a503a5 	.word	0x03a503a5
   87ee4:	03a503a5 	.word	0x03a503a5
   87ee8:	03a503a5 	.word	0x03a503a5
   87eec:	03a503a5 	.word	0x03a503a5
   87ef0:	03b503a5 	.word	0x03b503a5
   87ef4:	03b503b5 	.word	0x03b503b5
   87ef8:	03b503b5 	.word	0x03b503b5
   87efc:	03b503b5 	.word	0x03b503b5
   87f00:	03b503b5 	.word	0x03b503b5
   87f04:	028b03b5 	.word	0x028b03b5
   87f08:	03b502d3 	.word	0x03b502d3
   87f0c:	03b502d3 	.word	0x03b502d3
   87f10:	03b503b5 	.word	0x03b503b5
   87f14:	031b03b5 	.word	0x031b03b5
   87f18:	03b503b5 	.word	0x03b503b5
   87f1c:	03b50320 	.word	0x03b50320
   87f20:	03b503b5 	.word	0x03b503b5
   87f24:	03b503b5 	.word	0x03b503b5
   87f28:	03b50234 	.word	0x03b50234
   87f2c:	024b03b5 	.word	0x024b03b5
   87f30:	03b503b5 	.word	0x03b503b5
   87f34:	03b503b5 	.word	0x03b503b5
   87f38:	03b503b5 	.word	0x03b503b5
   87f3c:	03b503b5 	.word	0x03b503b5
   87f40:	03b503b5 	.word	0x03b503b5
   87f44:	039e0276 	.word	0x039e0276
   87f48:	02d302d3 	.word	0x02d302d3
   87f4c:	036302d3 	.word	0x036302d3
   87f50:	03b5039e 	.word	0x03b5039e
   87f54:	036803b5 	.word	0x036803b5
   87f58:	037503b5 	.word	0x037503b5
   87f5c:	038c01dd 	.word	0x038c01dd
   87f60:	03b5035e 	.word	0x03b5035e
   87f64:	03b501f2 	.word	0x03b501f2
   87f68:	03b50087 	.word	0x03b50087
   87f6c:	033203b5 	.word	0x033203b5
   87f70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87f72:	6823      	ldr	r3, [r4, #0]
   87f74:	4618      	mov	r0, r3
   87f76:	930d      	str	r3, [sp, #52]	; 0x34
   87f78:	4623      	mov	r3, r4
   87f7a:	2800      	cmp	r0, #0
   87f7c:	f103 0304 	add.w	r3, r3, #4
   87f80:	930f      	str	r3, [sp, #60]	; 0x3c
   87f82:	da04      	bge.n	87f8e <_svfprintf_r+0x196>
   87f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87f86:	425b      	negs	r3, r3
   87f88:	930d      	str	r3, [sp, #52]	; 0x34
   87f8a:	f04b 0b04 	orr.w	fp, fp, #4
   87f8e:	f89a 3000 	ldrb.w	r3, [sl]
   87f92:	e78b      	b.n	87eac <_svfprintf_r+0xb4>
   87f94:	aa25      	add	r2, sp, #148	; 0x94
   87f96:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f98:	980c      	ldr	r0, [sp, #48]	; 0x30
   87f9a:	f004 fe89 	bl	8ccb0 <__ssprint_r>
   87f9e:	b940      	cbnz	r0, 87fb2 <_svfprintf_r+0x1ba>
   87fa0:	46c8      	mov	r8, r9
   87fa2:	e76f      	b.n	87e84 <_svfprintf_r+0x8c>
   87fa4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   87fa6:	b123      	cbz	r3, 87fb2 <_svfprintf_r+0x1ba>
   87fa8:	980c      	ldr	r0, [sp, #48]	; 0x30
   87faa:	aa25      	add	r2, sp, #148	; 0x94
   87fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87fae:	f004 fe7f 	bl	8ccb0 <__ssprint_r>
   87fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87fb4:	899b      	ldrh	r3, [r3, #12]
   87fb6:	f013 0f40 	tst.w	r3, #64	; 0x40
   87fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87fbc:	bf18      	it	ne
   87fbe:	f04f 33ff 	movne.w	r3, #4294967295
   87fc2:	9309      	str	r3, [sp, #36]	; 0x24
   87fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   87fc6:	b043      	add	sp, #268	; 0x10c
   87fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87fcc:	f01b 0f20 	tst.w	fp, #32
   87fd0:	9311      	str	r3, [sp, #68]	; 0x44
   87fd2:	f040 81af 	bne.w	88334 <_svfprintf_r+0x53c>
   87fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87fd8:	f01b 0f10 	tst.w	fp, #16
   87fdc:	4613      	mov	r3, r2
   87fde:	f040 859a 	bne.w	88b16 <_svfprintf_r+0xd1e>
   87fe2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   87fe6:	f000 8596 	beq.w	88b16 <_svfprintf_r+0xd1e>
   87fea:	2500      	movs	r5, #0
   87fec:	2301      	movs	r3, #1
   87fee:	8814      	ldrh	r4, [r2, #0]
   87ff0:	3204      	adds	r2, #4
   87ff2:	920f      	str	r2, [sp, #60]	; 0x3c
   87ff4:	2200      	movs	r2, #0
   87ff6:	4617      	mov	r7, r2
   87ff8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   87ffc:	990a      	ldr	r1, [sp, #40]	; 0x28
   87ffe:	1c4a      	adds	r2, r1, #1
   88000:	f000 8210 	beq.w	88424 <_svfprintf_r+0x62c>
   88004:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   88008:	9207      	str	r2, [sp, #28]
   8800a:	ea54 0205 	orrs.w	r2, r4, r5
   8800e:	f040 820f 	bne.w	88430 <_svfprintf_r+0x638>
   88012:	2900      	cmp	r1, #0
   88014:	f040 8431 	bne.w	8887a <_svfprintf_r+0xa82>
   88018:	2b00      	cmp	r3, #0
   8801a:	f040 8539 	bne.w	88a90 <_svfprintf_r+0xc98>
   8801e:	f01b 0301 	ands.w	r3, fp, #1
   88022:	930e      	str	r3, [sp, #56]	; 0x38
   88024:	f000 8662 	beq.w	88cec <_svfprintf_r+0xef4>
   88028:	2330      	movs	r3, #48	; 0x30
   8802a:	ae42      	add	r6, sp, #264	; 0x108
   8802c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   88030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88034:	4293      	cmp	r3, r2
   88036:	bfb8      	it	lt
   88038:	4613      	movlt	r3, r2
   8803a:	9308      	str	r3, [sp, #32]
   8803c:	2300      	movs	r3, #0
   8803e:	9312      	str	r3, [sp, #72]	; 0x48
   88040:	b117      	cbz	r7, 88048 <_svfprintf_r+0x250>
   88042:	9b08      	ldr	r3, [sp, #32]
   88044:	3301      	adds	r3, #1
   88046:	9308      	str	r3, [sp, #32]
   88048:	9b07      	ldr	r3, [sp, #28]
   8804a:	f013 0302 	ands.w	r3, r3, #2
   8804e:	9310      	str	r3, [sp, #64]	; 0x40
   88050:	d002      	beq.n	88058 <_svfprintf_r+0x260>
   88052:	9b08      	ldr	r3, [sp, #32]
   88054:	3302      	adds	r3, #2
   88056:	9308      	str	r3, [sp, #32]
   88058:	9b07      	ldr	r3, [sp, #28]
   8805a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8805e:	f040 8310 	bne.w	88682 <_svfprintf_r+0x88a>
   88062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88064:	9a08      	ldr	r2, [sp, #32]
   88066:	eba3 0b02 	sub.w	fp, r3, r2
   8806a:	f1bb 0f00 	cmp.w	fp, #0
   8806e:	f340 8308 	ble.w	88682 <_svfprintf_r+0x88a>
   88072:	f1bb 0f10 	cmp.w	fp, #16
   88076:	f340 87b2 	ble.w	88fde <_svfprintf_r+0x11e6>
   8807a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8807c:	4643      	mov	r3, r8
   8807e:	4621      	mov	r1, r4
   88080:	46a8      	mov	r8, r5
   88082:	2710      	movs	r7, #16
   88084:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88086:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   88088:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8808a:	e006      	b.n	8809a <_svfprintf_r+0x2a2>
   8808c:	f1ab 0b10 	sub.w	fp, fp, #16
   88090:	f1bb 0f10 	cmp.w	fp, #16
   88094:	f103 0308 	add.w	r3, r3, #8
   88098:	dd18      	ble.n	880cc <_svfprintf_r+0x2d4>
   8809a:	3201      	adds	r2, #1
   8809c:	48ab      	ldr	r0, [pc, #684]	; (8834c <_svfprintf_r+0x554>)
   8809e:	3110      	adds	r1, #16
   880a0:	2a07      	cmp	r2, #7
   880a2:	9127      	str	r1, [sp, #156]	; 0x9c
   880a4:	9226      	str	r2, [sp, #152]	; 0x98
   880a6:	e883 0081 	stmia.w	r3, {r0, r7}
   880aa:	ddef      	ble.n	8808c <_svfprintf_r+0x294>
   880ac:	aa25      	add	r2, sp, #148	; 0x94
   880ae:	4629      	mov	r1, r5
   880b0:	4620      	mov	r0, r4
   880b2:	f004 fdfd 	bl	8ccb0 <__ssprint_r>
   880b6:	2800      	cmp	r0, #0
   880b8:	f47f af7b 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   880bc:	f1ab 0b10 	sub.w	fp, fp, #16
   880c0:	f1bb 0f10 	cmp.w	fp, #16
   880c4:	464b      	mov	r3, r9
   880c6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   880c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   880ca:	dce6      	bgt.n	8809a <_svfprintf_r+0x2a2>
   880cc:	4645      	mov	r5, r8
   880ce:	460c      	mov	r4, r1
   880d0:	4698      	mov	r8, r3
   880d2:	3201      	adds	r2, #1
   880d4:	4b9d      	ldr	r3, [pc, #628]	; (8834c <_svfprintf_r+0x554>)
   880d6:	445c      	add	r4, fp
   880d8:	2a07      	cmp	r2, #7
   880da:	9427      	str	r4, [sp, #156]	; 0x9c
   880dc:	9226      	str	r2, [sp, #152]	; 0x98
   880de:	e888 0808 	stmia.w	r8, {r3, fp}
   880e2:	f300 82c3 	bgt.w	8866c <_svfprintf_r+0x874>
   880e6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   880ea:	f108 0808 	add.w	r8, r8, #8
   880ee:	b187      	cbz	r7, 88112 <_svfprintf_r+0x31a>
   880f0:	2101      	movs	r1, #1
   880f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   880f4:	440c      	add	r4, r1
   880f6:	440b      	add	r3, r1
   880f8:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   880fc:	2b07      	cmp	r3, #7
   880fe:	9427      	str	r4, [sp, #156]	; 0x9c
   88100:	9326      	str	r3, [sp, #152]	; 0x98
   88102:	f8c8 1004 	str.w	r1, [r8, #4]
   88106:	f8c8 2000 	str.w	r2, [r8]
   8810a:	f300 83cd 	bgt.w	888a8 <_svfprintf_r+0xab0>
   8810e:	f108 0808 	add.w	r8, r8, #8
   88112:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88114:	b17b      	cbz	r3, 88136 <_svfprintf_r+0x33e>
   88116:	2102      	movs	r1, #2
   88118:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8811a:	440c      	add	r4, r1
   8811c:	3301      	adds	r3, #1
   8811e:	aa1e      	add	r2, sp, #120	; 0x78
   88120:	2b07      	cmp	r3, #7
   88122:	9427      	str	r4, [sp, #156]	; 0x9c
   88124:	9326      	str	r3, [sp, #152]	; 0x98
   88126:	f8c8 1004 	str.w	r1, [r8, #4]
   8812a:	f8c8 2000 	str.w	r2, [r8]
   8812e:	f300 8411 	bgt.w	88954 <_svfprintf_r+0xb5c>
   88132:	f108 0808 	add.w	r8, r8, #8
   88136:	2d80      	cmp	r5, #128	; 0x80
   88138:	f000 8304 	beq.w	88744 <_svfprintf_r+0x94c>
   8813c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8813e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88140:	1a9f      	subs	r7, r3, r2
   88142:	2f00      	cmp	r7, #0
   88144:	dd37      	ble.n	881b6 <_svfprintf_r+0x3be>
   88146:	2f10      	cmp	r7, #16
   88148:	f340 8679 	ble.w	88e3e <_svfprintf_r+0x1046>
   8814c:	4d80      	ldr	r5, [pc, #512]	; (88350 <_svfprintf_r+0x558>)
   8814e:	4642      	mov	r2, r8
   88150:	4621      	mov	r1, r4
   88152:	46b0      	mov	r8, r6
   88154:	f04f 0b10 	mov.w	fp, #16
   88158:	462e      	mov	r6, r5
   8815a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8815c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8815e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   88160:	e004      	b.n	8816c <_svfprintf_r+0x374>
   88162:	3f10      	subs	r7, #16
   88164:	2f10      	cmp	r7, #16
   88166:	f102 0208 	add.w	r2, r2, #8
   8816a:	dd15      	ble.n	88198 <_svfprintf_r+0x3a0>
   8816c:	3301      	adds	r3, #1
   8816e:	3110      	adds	r1, #16
   88170:	2b07      	cmp	r3, #7
   88172:	9127      	str	r1, [sp, #156]	; 0x9c
   88174:	9326      	str	r3, [sp, #152]	; 0x98
   88176:	e882 0840 	stmia.w	r2, {r6, fp}
   8817a:	ddf2      	ble.n	88162 <_svfprintf_r+0x36a>
   8817c:	aa25      	add	r2, sp, #148	; 0x94
   8817e:	4629      	mov	r1, r5
   88180:	4620      	mov	r0, r4
   88182:	f004 fd95 	bl	8ccb0 <__ssprint_r>
   88186:	2800      	cmp	r0, #0
   88188:	f47f af13 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   8818c:	3f10      	subs	r7, #16
   8818e:	2f10      	cmp	r7, #16
   88190:	464a      	mov	r2, r9
   88192:	9927      	ldr	r1, [sp, #156]	; 0x9c
   88194:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88196:	dce9      	bgt.n	8816c <_svfprintf_r+0x374>
   88198:	4635      	mov	r5, r6
   8819a:	460c      	mov	r4, r1
   8819c:	4646      	mov	r6, r8
   8819e:	4690      	mov	r8, r2
   881a0:	3301      	adds	r3, #1
   881a2:	443c      	add	r4, r7
   881a4:	2b07      	cmp	r3, #7
   881a6:	9427      	str	r4, [sp, #156]	; 0x9c
   881a8:	9326      	str	r3, [sp, #152]	; 0x98
   881aa:	e888 00a0 	stmia.w	r8, {r5, r7}
   881ae:	f300 8370 	bgt.w	88892 <_svfprintf_r+0xa9a>
   881b2:	f108 0808 	add.w	r8, r8, #8
   881b6:	9b07      	ldr	r3, [sp, #28]
   881b8:	05df      	lsls	r7, r3, #23
   881ba:	f100 8264 	bmi.w	88686 <_svfprintf_r+0x88e>
   881be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   881c0:	990e      	ldr	r1, [sp, #56]	; 0x38
   881c2:	3301      	adds	r3, #1
   881c4:	440c      	add	r4, r1
   881c6:	2b07      	cmp	r3, #7
   881c8:	9427      	str	r4, [sp, #156]	; 0x9c
   881ca:	f8c8 6000 	str.w	r6, [r8]
   881ce:	f8c8 1004 	str.w	r1, [r8, #4]
   881d2:	9326      	str	r3, [sp, #152]	; 0x98
   881d4:	f300 83b3 	bgt.w	8893e <_svfprintf_r+0xb46>
   881d8:	f108 0808 	add.w	r8, r8, #8
   881dc:	9b07      	ldr	r3, [sp, #28]
   881de:	075b      	lsls	r3, r3, #29
   881e0:	d53b      	bpl.n	8825a <_svfprintf_r+0x462>
   881e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   881e4:	9a08      	ldr	r2, [sp, #32]
   881e6:	1a9d      	subs	r5, r3, r2
   881e8:	2d00      	cmp	r5, #0
   881ea:	dd36      	ble.n	8825a <_svfprintf_r+0x462>
   881ec:	2d10      	cmp	r5, #16
   881ee:	f340 8721 	ble.w	89034 <_svfprintf_r+0x123c>
   881f2:	2610      	movs	r6, #16
   881f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   881f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   881f8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   881fc:	e004      	b.n	88208 <_svfprintf_r+0x410>
   881fe:	3d10      	subs	r5, #16
   88200:	2d10      	cmp	r5, #16
   88202:	f108 0808 	add.w	r8, r8, #8
   88206:	dd16      	ble.n	88236 <_svfprintf_r+0x43e>
   88208:	3301      	adds	r3, #1
   8820a:	4a50      	ldr	r2, [pc, #320]	; (8834c <_svfprintf_r+0x554>)
   8820c:	3410      	adds	r4, #16
   8820e:	2b07      	cmp	r3, #7
   88210:	9427      	str	r4, [sp, #156]	; 0x9c
   88212:	9326      	str	r3, [sp, #152]	; 0x98
   88214:	e888 0044 	stmia.w	r8, {r2, r6}
   88218:	ddf1      	ble.n	881fe <_svfprintf_r+0x406>
   8821a:	aa25      	add	r2, sp, #148	; 0x94
   8821c:	4659      	mov	r1, fp
   8821e:	4638      	mov	r0, r7
   88220:	f004 fd46 	bl	8ccb0 <__ssprint_r>
   88224:	2800      	cmp	r0, #0
   88226:	f47f aec4 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   8822a:	3d10      	subs	r5, #16
   8822c:	2d10      	cmp	r5, #16
   8822e:	46c8      	mov	r8, r9
   88230:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88232:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88234:	dce8      	bgt.n	88208 <_svfprintf_r+0x410>
   88236:	3301      	adds	r3, #1
   88238:	4a44      	ldr	r2, [pc, #272]	; (8834c <_svfprintf_r+0x554>)
   8823a:	442c      	add	r4, r5
   8823c:	2b07      	cmp	r3, #7
   8823e:	9427      	str	r4, [sp, #156]	; 0x9c
   88240:	9326      	str	r3, [sp, #152]	; 0x98
   88242:	e888 0024 	stmia.w	r8, {r2, r5}
   88246:	dd08      	ble.n	8825a <_svfprintf_r+0x462>
   88248:	aa25      	add	r2, sp, #148	; 0x94
   8824a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8824c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8824e:	f004 fd2f 	bl	8ccb0 <__ssprint_r>
   88252:	2800      	cmp	r0, #0
   88254:	f47f aead 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88258:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8825a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8825c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8825e:	9908      	ldr	r1, [sp, #32]
   88260:	428a      	cmp	r2, r1
   88262:	bfac      	ite	ge
   88264:	189b      	addge	r3, r3, r2
   88266:	185b      	addlt	r3, r3, r1
   88268:	9309      	str	r3, [sp, #36]	; 0x24
   8826a:	2c00      	cmp	r4, #0
   8826c:	f040 82fb 	bne.w	88866 <_svfprintf_r+0xa6e>
   88270:	2300      	movs	r3, #0
   88272:	46c8      	mov	r8, r9
   88274:	9326      	str	r3, [sp, #152]	; 0x98
   88276:	e5e6      	b.n	87e46 <_svfprintf_r+0x4e>
   88278:	9311      	str	r3, [sp, #68]	; 0x44
   8827a:	f01b 0320 	ands.w	r3, fp, #32
   8827e:	f040 8145 	bne.w	8850c <_svfprintf_r+0x714>
   88282:	f01b 0210 	ands.w	r2, fp, #16
   88286:	f040 8466 	bne.w	88b56 <_svfprintf_r+0xd5e>
   8828a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   8828e:	f000 8462 	beq.w	88b56 <_svfprintf_r+0xd5e>
   88292:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88294:	4613      	mov	r3, r2
   88296:	460a      	mov	r2, r1
   88298:	3204      	adds	r2, #4
   8829a:	880c      	ldrh	r4, [r1, #0]
   8829c:	2500      	movs	r5, #0
   8829e:	920f      	str	r2, [sp, #60]	; 0x3c
   882a0:	e6a8      	b.n	87ff4 <_svfprintf_r+0x1fc>
   882a2:	2500      	movs	r5, #0
   882a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   882a6:	9311      	str	r3, [sp, #68]	; 0x44
   882a8:	6816      	ldr	r6, [r2, #0]
   882aa:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   882ae:	1d14      	adds	r4, r2, #4
   882b0:	2e00      	cmp	r6, #0
   882b2:	f000 86cd 	beq.w	89050 <_svfprintf_r+0x1258>
   882b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   882b8:	1c53      	adds	r3, r2, #1
   882ba:	f000 861b 	beq.w	88ef4 <_svfprintf_r+0x10fc>
   882be:	4629      	mov	r1, r5
   882c0:	4630      	mov	r0, r6
   882c2:	f003 ff09 	bl	8c0d8 <memchr>
   882c6:	2800      	cmp	r0, #0
   882c8:	f000 870d 	beq.w	890e6 <_svfprintf_r+0x12ee>
   882cc:	1b83      	subs	r3, r0, r6
   882ce:	950a      	str	r5, [sp, #40]	; 0x28
   882d0:	930e      	str	r3, [sp, #56]	; 0x38
   882d2:	940f      	str	r4, [sp, #60]	; 0x3c
   882d4:	f8cd b01c 	str.w	fp, [sp, #28]
   882d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   882dc:	9308      	str	r3, [sp, #32]
   882de:	9512      	str	r5, [sp, #72]	; 0x48
   882e0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   882e4:	e6ac      	b.n	88040 <_svfprintf_r+0x248>
   882e6:	f89a 3000 	ldrb.w	r3, [sl]
   882ea:	f10a 0401 	add.w	r4, sl, #1
   882ee:	2b2a      	cmp	r3, #42	; 0x2a
   882f0:	f000 87c2 	beq.w	89278 <_svfprintf_r+0x1480>
   882f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   882f8:	2809      	cmp	r0, #9
   882fa:	46a2      	mov	sl, r4
   882fc:	f200 8718 	bhi.w	89130 <_svfprintf_r+0x1338>
   88300:	2300      	movs	r3, #0
   88302:	461c      	mov	r4, r3
   88304:	f81a 3b01 	ldrb.w	r3, [sl], #1
   88308:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8830c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   88310:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   88314:	2809      	cmp	r0, #9
   88316:	d9f5      	bls.n	88304 <_svfprintf_r+0x50c>
   88318:	940a      	str	r4, [sp, #40]	; 0x28
   8831a:	e5c9      	b.n	87eb0 <_svfprintf_r+0xb8>
   8831c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   88320:	f89a 3000 	ldrb.w	r3, [sl]
   88324:	e5c2      	b.n	87eac <_svfprintf_r+0xb4>
   88326:	f04b 0b10 	orr.w	fp, fp, #16
   8832a:	f01b 0f20 	tst.w	fp, #32
   8832e:	9311      	str	r3, [sp, #68]	; 0x44
   88330:	f43f ae51 	beq.w	87fd6 <_svfprintf_r+0x1de>
   88334:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   88336:	3407      	adds	r4, #7
   88338:	f024 0307 	bic.w	r3, r4, #7
   8833c:	f103 0208 	add.w	r2, r3, #8
   88340:	e9d3 4500 	ldrd	r4, r5, [r3]
   88344:	920f      	str	r2, [sp, #60]	; 0x3c
   88346:	2301      	movs	r3, #1
   88348:	e654      	b.n	87ff4 <_svfprintf_r+0x1fc>
   8834a:	bf00      	nop
   8834c:	0008dd80 	.word	0x0008dd80
   88350:	0008dd90 	.word	0x0008dd90
   88354:	9311      	str	r3, [sp, #68]	; 0x44
   88356:	2a00      	cmp	r2, #0
   88358:	f040 87ad 	bne.w	892b6 <_svfprintf_r+0x14be>
   8835c:	4bbe      	ldr	r3, [pc, #760]	; (88658 <_svfprintf_r+0x860>)
   8835e:	f01b 0f20 	tst.w	fp, #32
   88362:	9318      	str	r3, [sp, #96]	; 0x60
   88364:	f040 80e7 	bne.w	88536 <_svfprintf_r+0x73e>
   88368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8836a:	f01b 0f10 	tst.w	fp, #16
   8836e:	4613      	mov	r3, r2
   88370:	f040 83d8 	bne.w	88b24 <_svfprintf_r+0xd2c>
   88374:	f01b 0f40 	tst.w	fp, #64	; 0x40
   88378:	f000 83d4 	beq.w	88b24 <_svfprintf_r+0xd2c>
   8837c:	2500      	movs	r5, #0
   8837e:	3304      	adds	r3, #4
   88380:	8814      	ldrh	r4, [r2, #0]
   88382:	930f      	str	r3, [sp, #60]	; 0x3c
   88384:	f01b 0f01 	tst.w	fp, #1
   88388:	f000 80e3 	beq.w	88552 <_svfprintf_r+0x75a>
   8838c:	ea54 0305 	orrs.w	r3, r4, r5
   88390:	f000 80df 	beq.w	88552 <_svfprintf_r+0x75a>
   88394:	2330      	movs	r3, #48	; 0x30
   88396:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8839a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   8839e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   883a2:	f04b 0b02 	orr.w	fp, fp, #2
   883a6:	2302      	movs	r3, #2
   883a8:	e624      	b.n	87ff4 <_svfprintf_r+0x1fc>
   883aa:	2201      	movs	r2, #1
   883ac:	9311      	str	r3, [sp, #68]	; 0x44
   883ae:	2300      	movs	r3, #0
   883b0:	4611      	mov	r1, r2
   883b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   883b4:	9208      	str	r2, [sp, #32]
   883b6:	6802      	ldr	r2, [r0, #0]
   883b8:	461f      	mov	r7, r3
   883ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   883be:	930a      	str	r3, [sp, #40]	; 0x28
   883c0:	9312      	str	r3, [sp, #72]	; 0x48
   883c2:	1d03      	adds	r3, r0, #4
   883c4:	f8cd b01c 	str.w	fp, [sp, #28]
   883c8:	910e      	str	r1, [sp, #56]	; 0x38
   883ca:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   883ce:	930f      	str	r3, [sp, #60]	; 0x3c
   883d0:	ae28      	add	r6, sp, #160	; 0xa0
   883d2:	e639      	b.n	88048 <_svfprintf_r+0x250>
   883d4:	9311      	str	r3, [sp, #68]	; 0x44
   883d6:	2a00      	cmp	r2, #0
   883d8:	f040 8784 	bne.w	892e4 <_svfprintf_r+0x14ec>
   883dc:	f04b 0b10 	orr.w	fp, fp, #16
   883e0:	f01b 0f20 	tst.w	fp, #32
   883e4:	f040 8475 	bne.w	88cd2 <_svfprintf_r+0xeda>
   883e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   883ea:	f01b 0f10 	tst.w	fp, #16
   883ee:	4613      	mov	r3, r2
   883f0:	f040 839d 	bne.w	88b2e <_svfprintf_r+0xd36>
   883f4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   883f8:	f000 8399 	beq.w	88b2e <_svfprintf_r+0xd36>
   883fc:	f9b2 4000 	ldrsh.w	r4, [r2]
   88400:	3304      	adds	r3, #4
   88402:	17e5      	asrs	r5, r4, #31
   88404:	930f      	str	r3, [sp, #60]	; 0x3c
   88406:	4622      	mov	r2, r4
   88408:	462b      	mov	r3, r5
   8840a:	2a00      	cmp	r2, #0
   8840c:	f173 0300 	sbcs.w	r3, r3, #0
   88410:	f2c0 8398 	blt.w	88b44 <_svfprintf_r+0xd4c>
   88414:	990a      	ldr	r1, [sp, #40]	; 0x28
   88416:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8841a:	1c4a      	adds	r2, r1, #1
   8841c:	f04f 0301 	mov.w	r3, #1
   88420:	f47f adf0 	bne.w	88004 <_svfprintf_r+0x20c>
   88424:	ea54 0205 	orrs.w	r2, r4, r5
   88428:	f000 8229 	beq.w	8887e <_svfprintf_r+0xa86>
   8842c:	f8cd b01c 	str.w	fp, [sp, #28]
   88430:	2b01      	cmp	r3, #1
   88432:	f000 830e 	beq.w	88a52 <_svfprintf_r+0xc5a>
   88436:	2b02      	cmp	r3, #2
   88438:	f040 829c 	bne.w	88974 <_svfprintf_r+0xb7c>
   8843c:	464e      	mov	r6, r9
   8843e:	9818      	ldr	r0, [sp, #96]	; 0x60
   88440:	0923      	lsrs	r3, r4, #4
   88442:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88446:	0929      	lsrs	r1, r5, #4
   88448:	f004 020f 	and.w	r2, r4, #15
   8844c:	460d      	mov	r5, r1
   8844e:	461c      	mov	r4, r3
   88450:	5c83      	ldrb	r3, [r0, r2]
   88452:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88456:	ea54 0305 	orrs.w	r3, r4, r5
   8845a:	d1f1      	bne.n	88440 <_svfprintf_r+0x648>
   8845c:	eba9 0306 	sub.w	r3, r9, r6
   88460:	930e      	str	r3, [sp, #56]	; 0x38
   88462:	e5e5      	b.n	88030 <_svfprintf_r+0x238>
   88464:	9311      	str	r3, [sp, #68]	; 0x44
   88466:	2a00      	cmp	r2, #0
   88468:	f040 8738 	bne.w	892dc <_svfprintf_r+0x14e4>
   8846c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8846e:	f01b 0f08 	tst.w	fp, #8
   88472:	f104 0407 	add.w	r4, r4, #7
   88476:	f000 84cf 	beq.w	88e18 <_svfprintf_r+0x1020>
   8847a:	f024 0307 	bic.w	r3, r4, #7
   8847e:	f103 0208 	add.w	r2, r3, #8
   88482:	920f      	str	r2, [sp, #60]	; 0x3c
   88484:	681a      	ldr	r2, [r3, #0]
   88486:	685b      	ldr	r3, [r3, #4]
   88488:	9215      	str	r2, [sp, #84]	; 0x54
   8848a:	9314      	str	r3, [sp, #80]	; 0x50
   8848c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8848e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   88490:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   88494:	4628      	mov	r0, r5
   88496:	4621      	mov	r1, r4
   88498:	f04f 32ff 	mov.w	r2, #4294967295
   8849c:	4b6f      	ldr	r3, [pc, #444]	; (8865c <_svfprintf_r+0x864>)
   8849e:	f005 fad3 	bl	8da48 <__aeabi_dcmpun>
   884a2:	2800      	cmp	r0, #0
   884a4:	f040 8434 	bne.w	88d10 <_svfprintf_r+0xf18>
   884a8:	4628      	mov	r0, r5
   884aa:	4621      	mov	r1, r4
   884ac:	f04f 32ff 	mov.w	r2, #4294967295
   884b0:	4b6a      	ldr	r3, [pc, #424]	; (8865c <_svfprintf_r+0x864>)
   884b2:	f005 faab 	bl	8da0c <__aeabi_dcmple>
   884b6:	2800      	cmp	r0, #0
   884b8:	f040 842a 	bne.w	88d10 <_svfprintf_r+0xf18>
   884bc:	a815      	add	r0, sp, #84	; 0x54
   884be:	c80d      	ldmia	r0, {r0, r2, r3}
   884c0:	9914      	ldr	r1, [sp, #80]	; 0x50
   884c2:	f005 fa99 	bl	8d9f8 <__aeabi_dcmplt>
   884c6:	2800      	cmp	r0, #0
   884c8:	f040 85d4 	bne.w	89074 <_svfprintf_r+0x127c>
   884cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   884d0:	2303      	movs	r3, #3
   884d2:	461a      	mov	r2, r3
   884d4:	9308      	str	r3, [sp, #32]
   884d6:	2300      	movs	r3, #0
   884d8:	4e61      	ldr	r6, [pc, #388]	; (88660 <_svfprintf_r+0x868>)
   884da:	4619      	mov	r1, r3
   884dc:	930a      	str	r3, [sp, #40]	; 0x28
   884de:	4b61      	ldr	r3, [pc, #388]	; (88664 <_svfprintf_r+0x86c>)
   884e0:	920e      	str	r2, [sp, #56]	; 0x38
   884e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   884e4:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   884e8:	9007      	str	r0, [sp, #28]
   884ea:	9112      	str	r1, [sp, #72]	; 0x48
   884ec:	2a47      	cmp	r2, #71	; 0x47
   884ee:	bfd8      	it	le
   884f0:	461e      	movle	r6, r3
   884f2:	e5a5      	b.n	88040 <_svfprintf_r+0x248>
   884f4:	f04b 0b08 	orr.w	fp, fp, #8
   884f8:	f89a 3000 	ldrb.w	r3, [sl]
   884fc:	e4d6      	b.n	87eac <_svfprintf_r+0xb4>
   884fe:	f04b 0b10 	orr.w	fp, fp, #16
   88502:	9311      	str	r3, [sp, #68]	; 0x44
   88504:	f01b 0320 	ands.w	r3, fp, #32
   88508:	f43f aebb 	beq.w	88282 <_svfprintf_r+0x48a>
   8850c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8850e:	3407      	adds	r4, #7
   88510:	f024 0307 	bic.w	r3, r4, #7
   88514:	f103 0208 	add.w	r2, r3, #8
   88518:	e9d3 4500 	ldrd	r4, r5, [r3]
   8851c:	920f      	str	r2, [sp, #60]	; 0x3c
   8851e:	2300      	movs	r3, #0
   88520:	e568      	b.n	87ff4 <_svfprintf_r+0x1fc>
   88522:	9311      	str	r3, [sp, #68]	; 0x44
   88524:	2a00      	cmp	r2, #0
   88526:	f040 86c2 	bne.w	892ae <_svfprintf_r+0x14b6>
   8852a:	4b4f      	ldr	r3, [pc, #316]	; (88668 <_svfprintf_r+0x870>)
   8852c:	f01b 0f20 	tst.w	fp, #32
   88530:	9318      	str	r3, [sp, #96]	; 0x60
   88532:	f43f af19 	beq.w	88368 <_svfprintf_r+0x570>
   88536:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   88538:	f01b 0f01 	tst.w	fp, #1
   8853c:	f104 0407 	add.w	r4, r4, #7
   88540:	f024 0307 	bic.w	r3, r4, #7
   88544:	f103 0208 	add.w	r2, r3, #8
   88548:	920f      	str	r2, [sp, #60]	; 0x3c
   8854a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8854e:	f47f af1d 	bne.w	8838c <_svfprintf_r+0x594>
   88552:	2302      	movs	r3, #2
   88554:	e54e      	b.n	87ff4 <_svfprintf_r+0x1fc>
   88556:	f89a 3000 	ldrb.w	r3, [sl]
   8855a:	2900      	cmp	r1, #0
   8855c:	f47f aca6 	bne.w	87eac <_svfprintf_r+0xb4>
   88560:	2201      	movs	r2, #1
   88562:	2120      	movs	r1, #32
   88564:	e4a2      	b.n	87eac <_svfprintf_r+0xb4>
   88566:	f04b 0b01 	orr.w	fp, fp, #1
   8856a:	f89a 3000 	ldrb.w	r3, [sl]
   8856e:	e49d      	b.n	87eac <_svfprintf_r+0xb4>
   88570:	f89a 3000 	ldrb.w	r3, [sl]
   88574:	2201      	movs	r2, #1
   88576:	212b      	movs	r1, #43	; 0x2b
   88578:	e498      	b.n	87eac <_svfprintf_r+0xb4>
   8857a:	f04b 0b20 	orr.w	fp, fp, #32
   8857e:	f89a 3000 	ldrb.w	r3, [sl]
   88582:	e493      	b.n	87eac <_svfprintf_r+0xb4>
   88584:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   88588:	f89a 3000 	ldrb.w	r3, [sl]
   8858c:	e48e      	b.n	87eac <_svfprintf_r+0xb4>
   8858e:	f89a 3000 	ldrb.w	r3, [sl]
   88592:	2b6c      	cmp	r3, #108	; 0x6c
   88594:	bf03      	ittte	eq
   88596:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   8859a:	f04b 0b20 	orreq.w	fp, fp, #32
   8859e:	f10a 0a01 	addeq.w	sl, sl, #1
   885a2:	f04b 0b10 	orrne.w	fp, fp, #16
   885a6:	e481      	b.n	87eac <_svfprintf_r+0xb4>
   885a8:	2a00      	cmp	r2, #0
   885aa:	f040 867c 	bne.w	892a6 <_svfprintf_r+0x14ae>
   885ae:	f01b 0f20 	tst.w	fp, #32
   885b2:	f040 8452 	bne.w	88e5a <_svfprintf_r+0x1062>
   885b6:	f01b 0f10 	tst.w	fp, #16
   885ba:	f040 8438 	bne.w	88e2e <_svfprintf_r+0x1036>
   885be:	f01b 0f40 	tst.w	fp, #64	; 0x40
   885c2:	f000 8434 	beq.w	88e2e <_svfprintf_r+0x1036>
   885c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   885c8:	6813      	ldr	r3, [r2, #0]
   885ca:	3204      	adds	r2, #4
   885cc:	920f      	str	r2, [sp, #60]	; 0x3c
   885ce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   885d2:	801a      	strh	r2, [r3, #0]
   885d4:	e437      	b.n	87e46 <_svfprintf_r+0x4e>
   885d6:	2378      	movs	r3, #120	; 0x78
   885d8:	2230      	movs	r2, #48	; 0x30
   885da:	980f      	ldr	r0, [sp, #60]	; 0x3c
   885dc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   885e0:	9311      	str	r3, [sp, #68]	; 0x44
   885e2:	1d03      	adds	r3, r0, #4
   885e4:	930f      	str	r3, [sp, #60]	; 0x3c
   885e6:	4b20      	ldr	r3, [pc, #128]	; (88668 <_svfprintf_r+0x870>)
   885e8:	6804      	ldr	r4, [r0, #0]
   885ea:	9318      	str	r3, [sp, #96]	; 0x60
   885ec:	f04b 0b02 	orr.w	fp, fp, #2
   885f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   885f4:	2500      	movs	r5, #0
   885f6:	2302      	movs	r3, #2
   885f8:	e4fc      	b.n	87ff4 <_svfprintf_r+0x1fc>
   885fa:	9311      	str	r3, [sp, #68]	; 0x44
   885fc:	2a00      	cmp	r2, #0
   885fe:	f43f aeef 	beq.w	883e0 <_svfprintf_r+0x5e8>
   88602:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   88606:	e6eb      	b.n	883e0 <_svfprintf_r+0x5e8>
   88608:	2000      	movs	r0, #0
   8860a:	4604      	mov	r4, r0
   8860c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   88610:	f81a 3b01 	ldrb.w	r3, [sl], #1
   88614:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   88618:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   8861c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   88620:	2809      	cmp	r0, #9
   88622:	d9f5      	bls.n	88610 <_svfprintf_r+0x818>
   88624:	940d      	str	r4, [sp, #52]	; 0x34
   88626:	e443      	b.n	87eb0 <_svfprintf_r+0xb8>
   88628:	9311      	str	r3, [sp, #68]	; 0x44
   8862a:	2a00      	cmp	r2, #0
   8862c:	f040 864a 	bne.w	892c4 <_svfprintf_r+0x14cc>
   88630:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88632:	2a00      	cmp	r2, #0
   88634:	f43f acb6 	beq.w	87fa4 <_svfprintf_r+0x1ac>
   88638:	2300      	movs	r3, #0
   8863a:	2101      	movs	r1, #1
   8863c:	461f      	mov	r7, r3
   8863e:	9108      	str	r1, [sp, #32]
   88640:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   88644:	f8cd b01c 	str.w	fp, [sp, #28]
   88648:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8864c:	930a      	str	r3, [sp, #40]	; 0x28
   8864e:	9312      	str	r3, [sp, #72]	; 0x48
   88650:	910e      	str	r1, [sp, #56]	; 0x38
   88652:	ae28      	add	r6, sp, #160	; 0xa0
   88654:	e4f8      	b.n	88048 <_svfprintf_r+0x250>
   88656:	bf00      	nop
   88658:	0008dd4c 	.word	0x0008dd4c
   8865c:	7fefffff 	.word	0x7fefffff
   88660:	0008dd40 	.word	0x0008dd40
   88664:	0008dd3c 	.word	0x0008dd3c
   88668:	0008dd60 	.word	0x0008dd60
   8866c:	aa25      	add	r2, sp, #148	; 0x94
   8866e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88670:	980c      	ldr	r0, [sp, #48]	; 0x30
   88672:	f004 fb1d 	bl	8ccb0 <__ssprint_r>
   88676:	2800      	cmp	r0, #0
   88678:	f47f ac9b 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   8867c:	46c8      	mov	r8, r9
   8867e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   88682:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88684:	e533      	b.n	880ee <_svfprintf_r+0x2f6>
   88686:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88688:	2b65      	cmp	r3, #101	; 0x65
   8868a:	f340 809a 	ble.w	887c2 <_svfprintf_r+0x9ca>
   8868e:	a815      	add	r0, sp, #84	; 0x54
   88690:	c80d      	ldmia	r0, {r0, r2, r3}
   88692:	9914      	ldr	r1, [sp, #80]	; 0x50
   88694:	f005 f9a6 	bl	8d9e4 <__aeabi_dcmpeq>
   88698:	2800      	cmp	r0, #0
   8869a:	f000 8193 	beq.w	889c4 <_svfprintf_r+0xbcc>
   8869e:	2101      	movs	r1, #1
   886a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   886a2:	4ab5      	ldr	r2, [pc, #724]	; (88978 <_svfprintf_r+0xb80>)
   886a4:	440b      	add	r3, r1
   886a6:	440c      	add	r4, r1
   886a8:	2b07      	cmp	r3, #7
   886aa:	9427      	str	r4, [sp, #156]	; 0x9c
   886ac:	9326      	str	r3, [sp, #152]	; 0x98
   886ae:	f8c8 1004 	str.w	r1, [r8, #4]
   886b2:	f8c8 2000 	str.w	r2, [r8]
   886b6:	f300 83c6 	bgt.w	88e46 <_svfprintf_r+0x104e>
   886ba:	f108 0808 	add.w	r8, r8, #8
   886be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   886c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   886c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   886c4:	4293      	cmp	r3, r2
   886c6:	db03      	blt.n	886d0 <_svfprintf_r+0x8d8>
   886c8:	9b07      	ldr	r3, [sp, #28]
   886ca:	07dd      	lsls	r5, r3, #31
   886cc:	f57f ad86 	bpl.w	881dc <_svfprintf_r+0x3e4>
   886d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   886d2:	9919      	ldr	r1, [sp, #100]	; 0x64
   886d4:	3301      	adds	r3, #1
   886d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   886d8:	440c      	add	r4, r1
   886da:	2b07      	cmp	r3, #7
   886dc:	f8c8 2000 	str.w	r2, [r8]
   886e0:	f8c8 1004 	str.w	r1, [r8, #4]
   886e4:	9427      	str	r4, [sp, #156]	; 0x9c
   886e6:	9326      	str	r3, [sp, #152]	; 0x98
   886e8:	f300 83c4 	bgt.w	88e74 <_svfprintf_r+0x107c>
   886ec:	f108 0808 	add.w	r8, r8, #8
   886f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   886f2:	1e5e      	subs	r6, r3, #1
   886f4:	2e00      	cmp	r6, #0
   886f6:	f77f ad71 	ble.w	881dc <_svfprintf_r+0x3e4>
   886fa:	2e10      	cmp	r6, #16
   886fc:	f340 8575 	ble.w	891ea <_svfprintf_r+0x13f2>
   88700:	4622      	mov	r2, r4
   88702:	2710      	movs	r7, #16
   88704:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88706:	4d9d      	ldr	r5, [pc, #628]	; (8897c <_svfprintf_r+0xb84>)
   88708:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8870c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8870e:	e005      	b.n	8871c <_svfprintf_r+0x924>
   88710:	f108 0808 	add.w	r8, r8, #8
   88714:	3e10      	subs	r6, #16
   88716:	2e10      	cmp	r6, #16
   88718:	f340 8225 	ble.w	88b66 <_svfprintf_r+0xd6e>
   8871c:	3301      	adds	r3, #1
   8871e:	3210      	adds	r2, #16
   88720:	2b07      	cmp	r3, #7
   88722:	9227      	str	r2, [sp, #156]	; 0x9c
   88724:	9326      	str	r3, [sp, #152]	; 0x98
   88726:	e888 00a0 	stmia.w	r8, {r5, r7}
   8872a:	ddf1      	ble.n	88710 <_svfprintf_r+0x918>
   8872c:	aa25      	add	r2, sp, #148	; 0x94
   8872e:	4621      	mov	r1, r4
   88730:	4658      	mov	r0, fp
   88732:	f004 fabd 	bl	8ccb0 <__ssprint_r>
   88736:	2800      	cmp	r0, #0
   88738:	f47f ac3b 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   8873c:	46c8      	mov	r8, r9
   8873e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88740:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88742:	e7e7      	b.n	88714 <_svfprintf_r+0x91c>
   88744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88746:	9a08      	ldr	r2, [sp, #32]
   88748:	1a9f      	subs	r7, r3, r2
   8874a:	2f00      	cmp	r7, #0
   8874c:	f77f acf6 	ble.w	8813c <_svfprintf_r+0x344>
   88750:	2f10      	cmp	r7, #16
   88752:	f340 84a8 	ble.w	890a6 <_svfprintf_r+0x12ae>
   88756:	4d89      	ldr	r5, [pc, #548]	; (8897c <_svfprintf_r+0xb84>)
   88758:	4642      	mov	r2, r8
   8875a:	4621      	mov	r1, r4
   8875c:	46b0      	mov	r8, r6
   8875e:	f04f 0b10 	mov.w	fp, #16
   88762:	462e      	mov	r6, r5
   88764:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88766:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   88768:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8876a:	e004      	b.n	88776 <_svfprintf_r+0x97e>
   8876c:	3f10      	subs	r7, #16
   8876e:	2f10      	cmp	r7, #16
   88770:	f102 0208 	add.w	r2, r2, #8
   88774:	dd15      	ble.n	887a2 <_svfprintf_r+0x9aa>
   88776:	3301      	adds	r3, #1
   88778:	3110      	adds	r1, #16
   8877a:	2b07      	cmp	r3, #7
   8877c:	9127      	str	r1, [sp, #156]	; 0x9c
   8877e:	9326      	str	r3, [sp, #152]	; 0x98
   88780:	e882 0840 	stmia.w	r2, {r6, fp}
   88784:	ddf2      	ble.n	8876c <_svfprintf_r+0x974>
   88786:	aa25      	add	r2, sp, #148	; 0x94
   88788:	4629      	mov	r1, r5
   8878a:	4620      	mov	r0, r4
   8878c:	f004 fa90 	bl	8ccb0 <__ssprint_r>
   88790:	2800      	cmp	r0, #0
   88792:	f47f ac0e 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88796:	3f10      	subs	r7, #16
   88798:	2f10      	cmp	r7, #16
   8879a:	464a      	mov	r2, r9
   8879c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8879e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   887a0:	dce9      	bgt.n	88776 <_svfprintf_r+0x97e>
   887a2:	4635      	mov	r5, r6
   887a4:	460c      	mov	r4, r1
   887a6:	4646      	mov	r6, r8
   887a8:	4690      	mov	r8, r2
   887aa:	3301      	adds	r3, #1
   887ac:	443c      	add	r4, r7
   887ae:	2b07      	cmp	r3, #7
   887b0:	9427      	str	r4, [sp, #156]	; 0x9c
   887b2:	9326      	str	r3, [sp, #152]	; 0x98
   887b4:	e888 00a0 	stmia.w	r8, {r5, r7}
   887b8:	f300 829e 	bgt.w	88cf8 <_svfprintf_r+0xf00>
   887bc:	f108 0808 	add.w	r8, r8, #8
   887c0:	e4bc      	b.n	8813c <_svfprintf_r+0x344>
   887c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   887c4:	2b01      	cmp	r3, #1
   887c6:	f340 824f 	ble.w	88c68 <_svfprintf_r+0xe70>
   887ca:	2301      	movs	r3, #1
   887cc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   887ce:	441c      	add	r4, r3
   887d0:	441f      	add	r7, r3
   887d2:	2f07      	cmp	r7, #7
   887d4:	9427      	str	r4, [sp, #156]	; 0x9c
   887d6:	f8c8 6000 	str.w	r6, [r8]
   887da:	9726      	str	r7, [sp, #152]	; 0x98
   887dc:	f8c8 3004 	str.w	r3, [r8, #4]
   887e0:	f300 825f 	bgt.w	88ca2 <_svfprintf_r+0xeaa>
   887e4:	f108 0808 	add.w	r8, r8, #8
   887e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   887ea:	3701      	adds	r7, #1
   887ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   887ee:	4414      	add	r4, r2
   887f0:	2f07      	cmp	r7, #7
   887f2:	9427      	str	r4, [sp, #156]	; 0x9c
   887f4:	9726      	str	r7, [sp, #152]	; 0x98
   887f6:	f8c8 3000 	str.w	r3, [r8]
   887fa:	f8c8 2004 	str.w	r2, [r8, #4]
   887fe:	f300 825c 	bgt.w	88cba <_svfprintf_r+0xec2>
   88802:	f108 0808 	add.w	r8, r8, #8
   88806:	a815      	add	r0, sp, #84	; 0x54
   88808:	c80d      	ldmia	r0, {r0, r2, r3}
   8880a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8880c:	f005 f8ea 	bl	8d9e4 <__aeabi_dcmpeq>
   88810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88812:	2800      	cmp	r0, #0
   88814:	f040 8141 	bne.w	88a9a <_svfprintf_r+0xca2>
   88818:	3b01      	subs	r3, #1
   8881a:	3701      	adds	r7, #1
   8881c:	3601      	adds	r6, #1
   8881e:	441c      	add	r4, r3
   88820:	2f07      	cmp	r7, #7
   88822:	f8c8 6000 	str.w	r6, [r8]
   88826:	9726      	str	r7, [sp, #152]	; 0x98
   88828:	9427      	str	r4, [sp, #156]	; 0x9c
   8882a:	f8c8 3004 	str.w	r3, [r8, #4]
   8882e:	f300 8166 	bgt.w	88afe <_svfprintf_r+0xd06>
   88832:	f108 0808 	add.w	r8, r8, #8
   88836:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88838:	3701      	adds	r7, #1
   8883a:	4414      	add	r4, r2
   8883c:	ab21      	add	r3, sp, #132	; 0x84
   8883e:	2f07      	cmp	r7, #7
   88840:	9427      	str	r4, [sp, #156]	; 0x9c
   88842:	9726      	str	r7, [sp, #152]	; 0x98
   88844:	f8c8 2004 	str.w	r2, [r8, #4]
   88848:	f8c8 3000 	str.w	r3, [r8]
   8884c:	f77f acc4 	ble.w	881d8 <_svfprintf_r+0x3e0>
   88850:	aa25      	add	r2, sp, #148	; 0x94
   88852:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88854:	980c      	ldr	r0, [sp, #48]	; 0x30
   88856:	f004 fa2b 	bl	8ccb0 <__ssprint_r>
   8885a:	2800      	cmp	r0, #0
   8885c:	f47f aba9 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88860:	46c8      	mov	r8, r9
   88862:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88864:	e4ba      	b.n	881dc <_svfprintf_r+0x3e4>
   88866:	aa25      	add	r2, sp, #148	; 0x94
   88868:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8886a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8886c:	f004 fa20 	bl	8ccb0 <__ssprint_r>
   88870:	2800      	cmp	r0, #0
   88872:	f43f acfd 	beq.w	88270 <_svfprintf_r+0x478>
   88876:	f7ff bb9c 	b.w	87fb2 <_svfprintf_r+0x1ba>
   8887a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8887e:	2b01      	cmp	r3, #1
   88880:	f000 817e 	beq.w	88b80 <_svfprintf_r+0xd88>
   88884:	2b02      	cmp	r3, #2
   88886:	d171      	bne.n	8896c <_svfprintf_r+0xb74>
   88888:	f8cd b01c 	str.w	fp, [sp, #28]
   8888c:	2400      	movs	r4, #0
   8888e:	2500      	movs	r5, #0
   88890:	e5d4      	b.n	8843c <_svfprintf_r+0x644>
   88892:	aa25      	add	r2, sp, #148	; 0x94
   88894:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88896:	980c      	ldr	r0, [sp, #48]	; 0x30
   88898:	f004 fa0a 	bl	8ccb0 <__ssprint_r>
   8889c:	2800      	cmp	r0, #0
   8889e:	f47f ab88 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   888a2:	46c8      	mov	r8, r9
   888a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   888a6:	e486      	b.n	881b6 <_svfprintf_r+0x3be>
   888a8:	aa25      	add	r2, sp, #148	; 0x94
   888aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   888ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   888ae:	f004 f9ff 	bl	8ccb0 <__ssprint_r>
   888b2:	2800      	cmp	r0, #0
   888b4:	f47f ab7d 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   888b8:	46c8      	mov	r8, r9
   888ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   888bc:	e429      	b.n	88112 <_svfprintf_r+0x31a>
   888be:	2001      	movs	r0, #1
   888c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   888c2:	4a2d      	ldr	r2, [pc, #180]	; (88978 <_svfprintf_r+0xb80>)
   888c4:	4403      	add	r3, r0
   888c6:	4404      	add	r4, r0
   888c8:	2b07      	cmp	r3, #7
   888ca:	9427      	str	r4, [sp, #156]	; 0x9c
   888cc:	9326      	str	r3, [sp, #152]	; 0x98
   888ce:	f8c8 0004 	str.w	r0, [r8, #4]
   888d2:	f8c8 2000 	str.w	r2, [r8]
   888d6:	f340 82d8 	ble.w	88e8a <_svfprintf_r+0x1092>
   888da:	aa25      	add	r2, sp, #148	; 0x94
   888dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   888de:	980c      	ldr	r0, [sp, #48]	; 0x30
   888e0:	f004 f9e6 	bl	8ccb0 <__ssprint_r>
   888e4:	2800      	cmp	r0, #0
   888e6:	f47f ab64 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   888ea:	46c8      	mov	r8, r9
   888ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
   888ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   888f0:	b929      	cbnz	r1, 888fe <_svfprintf_r+0xb06>
   888f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   888f4:	b91b      	cbnz	r3, 888fe <_svfprintf_r+0xb06>
   888f6:	9b07      	ldr	r3, [sp, #28]
   888f8:	07d8      	lsls	r0, r3, #31
   888fa:	f57f ac6f 	bpl.w	881dc <_svfprintf_r+0x3e4>
   888fe:	9819      	ldr	r0, [sp, #100]	; 0x64
   88900:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88902:	4602      	mov	r2, r0
   88904:	3301      	adds	r3, #1
   88906:	4422      	add	r2, r4
   88908:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8890a:	2b07      	cmp	r3, #7
   8890c:	9227      	str	r2, [sp, #156]	; 0x9c
   8890e:	f8c8 4000 	str.w	r4, [r8]
   88912:	f8c8 0004 	str.w	r0, [r8, #4]
   88916:	9326      	str	r3, [sp, #152]	; 0x98
   88918:	f300 8431 	bgt.w	8917e <_svfprintf_r+0x1386>
   8891c:	f108 0808 	add.w	r8, r8, #8
   88920:	2900      	cmp	r1, #0
   88922:	f2c0 8409 	blt.w	89138 <_svfprintf_r+0x1340>
   88926:	9913      	ldr	r1, [sp, #76]	; 0x4c
   88928:	3301      	adds	r3, #1
   8892a:	188c      	adds	r4, r1, r2
   8892c:	2b07      	cmp	r3, #7
   8892e:	9427      	str	r4, [sp, #156]	; 0x9c
   88930:	9326      	str	r3, [sp, #152]	; 0x98
   88932:	f8c8 6000 	str.w	r6, [r8]
   88936:	f8c8 1004 	str.w	r1, [r8, #4]
   8893a:	f77f ac4d 	ble.w	881d8 <_svfprintf_r+0x3e0>
   8893e:	aa25      	add	r2, sp, #148	; 0x94
   88940:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88942:	980c      	ldr	r0, [sp, #48]	; 0x30
   88944:	f004 f9b4 	bl	8ccb0 <__ssprint_r>
   88948:	2800      	cmp	r0, #0
   8894a:	f47f ab32 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   8894e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88950:	46c8      	mov	r8, r9
   88952:	e443      	b.n	881dc <_svfprintf_r+0x3e4>
   88954:	aa25      	add	r2, sp, #148	; 0x94
   88956:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88958:	980c      	ldr	r0, [sp, #48]	; 0x30
   8895a:	f004 f9a9 	bl	8ccb0 <__ssprint_r>
   8895e:	2800      	cmp	r0, #0
   88960:	f47f ab27 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88964:	46c8      	mov	r8, r9
   88966:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88968:	f7ff bbe5 	b.w	88136 <_svfprintf_r+0x33e>
   8896c:	2400      	movs	r4, #0
   8896e:	2500      	movs	r5, #0
   88970:	f8cd b01c 	str.w	fp, [sp, #28]
   88974:	4649      	mov	r1, r9
   88976:	e004      	b.n	88982 <_svfprintf_r+0xb8a>
   88978:	0008dd7c 	.word	0x0008dd7c
   8897c:	0008dd90 	.word	0x0008dd90
   88980:	4631      	mov	r1, r6
   88982:	08e2      	lsrs	r2, r4, #3
   88984:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88988:	08e8      	lsrs	r0, r5, #3
   8898a:	f004 0307 	and.w	r3, r4, #7
   8898e:	4605      	mov	r5, r0
   88990:	4614      	mov	r4, r2
   88992:	3330      	adds	r3, #48	; 0x30
   88994:	ea54 0205 	orrs.w	r2, r4, r5
   88998:	f801 3c01 	strb.w	r3, [r1, #-1]
   8899c:	f101 36ff 	add.w	r6, r1, #4294967295
   889a0:	d1ee      	bne.n	88980 <_svfprintf_r+0xb88>
   889a2:	9a07      	ldr	r2, [sp, #28]
   889a4:	07d2      	lsls	r2, r2, #31
   889a6:	f57f ad59 	bpl.w	8845c <_svfprintf_r+0x664>
   889aa:	2b30      	cmp	r3, #48	; 0x30
   889ac:	f43f ad56 	beq.w	8845c <_svfprintf_r+0x664>
   889b0:	2330      	movs	r3, #48	; 0x30
   889b2:	3902      	subs	r1, #2
   889b4:	f806 3c01 	strb.w	r3, [r6, #-1]
   889b8:	eba9 0301 	sub.w	r3, r9, r1
   889bc:	930e      	str	r3, [sp, #56]	; 0x38
   889be:	460e      	mov	r6, r1
   889c0:	f7ff bb36 	b.w	88030 <_svfprintf_r+0x238>
   889c4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   889c6:	2900      	cmp	r1, #0
   889c8:	f77f af79 	ble.w	888be <_svfprintf_r+0xac6>
   889cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   889ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   889d0:	4293      	cmp	r3, r2
   889d2:	bfa8      	it	ge
   889d4:	4613      	movge	r3, r2
   889d6:	2b00      	cmp	r3, #0
   889d8:	461f      	mov	r7, r3
   889da:	dd0b      	ble.n	889f4 <_svfprintf_r+0xbfc>
   889dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   889de:	443c      	add	r4, r7
   889e0:	3301      	adds	r3, #1
   889e2:	2b07      	cmp	r3, #7
   889e4:	9427      	str	r4, [sp, #156]	; 0x9c
   889e6:	e888 00c0 	stmia.w	r8, {r6, r7}
   889ea:	9326      	str	r3, [sp, #152]	; 0x98
   889ec:	f300 82fb 	bgt.w	88fe6 <_svfprintf_r+0x11ee>
   889f0:	f108 0808 	add.w	r8, r8, #8
   889f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   889f6:	2f00      	cmp	r7, #0
   889f8:	bfa8      	it	ge
   889fa:	1bdb      	subge	r3, r3, r7
   889fc:	2b00      	cmp	r3, #0
   889fe:	461f      	mov	r7, r3
   88a00:	f340 80d7 	ble.w	88bb2 <_svfprintf_r+0xdba>
   88a04:	2b10      	cmp	r3, #16
   88a06:	f340 8434 	ble.w	89272 <_svfprintf_r+0x147a>
   88a0a:	4dba      	ldr	r5, [pc, #744]	; (88cf4 <_svfprintf_r+0xefc>)
   88a0c:	4642      	mov	r2, r8
   88a0e:	4621      	mov	r1, r4
   88a10:	46b0      	mov	r8, r6
   88a12:	f04f 0b10 	mov.w	fp, #16
   88a16:	462e      	mov	r6, r5
   88a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88a1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   88a1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   88a1e:	e004      	b.n	88a2a <_svfprintf_r+0xc32>
   88a20:	3208      	adds	r2, #8
   88a22:	3f10      	subs	r7, #16
   88a24:	2f10      	cmp	r7, #16
   88a26:	f340 80b5 	ble.w	88b94 <_svfprintf_r+0xd9c>
   88a2a:	3301      	adds	r3, #1
   88a2c:	3110      	adds	r1, #16
   88a2e:	2b07      	cmp	r3, #7
   88a30:	9127      	str	r1, [sp, #156]	; 0x9c
   88a32:	9326      	str	r3, [sp, #152]	; 0x98
   88a34:	e882 0840 	stmia.w	r2, {r6, fp}
   88a38:	ddf2      	ble.n	88a20 <_svfprintf_r+0xc28>
   88a3a:	aa25      	add	r2, sp, #148	; 0x94
   88a3c:	4629      	mov	r1, r5
   88a3e:	4620      	mov	r0, r4
   88a40:	f004 f936 	bl	8ccb0 <__ssprint_r>
   88a44:	2800      	cmp	r0, #0
   88a46:	f47f aab4 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88a4a:	464a      	mov	r2, r9
   88a4c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   88a4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88a50:	e7e7      	b.n	88a22 <_svfprintf_r+0xc2a>
   88a52:	2d00      	cmp	r5, #0
   88a54:	bf08      	it	eq
   88a56:	2c0a      	cmpeq	r4, #10
   88a58:	f0c0 8090 	bcc.w	88b7c <_svfprintf_r+0xd84>
   88a5c:	464e      	mov	r6, r9
   88a5e:	4620      	mov	r0, r4
   88a60:	4629      	mov	r1, r5
   88a62:	220a      	movs	r2, #10
   88a64:	2300      	movs	r3, #0
   88a66:	f7fe fe49 	bl	876fc <__aeabi_uldivmod>
   88a6a:	3230      	adds	r2, #48	; 0x30
   88a6c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   88a70:	4620      	mov	r0, r4
   88a72:	4629      	mov	r1, r5
   88a74:	2300      	movs	r3, #0
   88a76:	220a      	movs	r2, #10
   88a78:	f7fe fe40 	bl	876fc <__aeabi_uldivmod>
   88a7c:	4604      	mov	r4, r0
   88a7e:	460d      	mov	r5, r1
   88a80:	ea54 0305 	orrs.w	r3, r4, r5
   88a84:	d1eb      	bne.n	88a5e <_svfprintf_r+0xc66>
   88a86:	eba9 0306 	sub.w	r3, r9, r6
   88a8a:	930e      	str	r3, [sp, #56]	; 0x38
   88a8c:	f7ff bad0 	b.w	88030 <_svfprintf_r+0x238>
   88a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88a92:	464e      	mov	r6, r9
   88a94:	930e      	str	r3, [sp, #56]	; 0x38
   88a96:	f7ff bacb 	b.w	88030 <_svfprintf_r+0x238>
   88a9a:	1e5e      	subs	r6, r3, #1
   88a9c:	2e00      	cmp	r6, #0
   88a9e:	f77f aeca 	ble.w	88836 <_svfprintf_r+0xa3e>
   88aa2:	2e10      	cmp	r6, #16
   88aa4:	f340 83e3 	ble.w	8926e <_svfprintf_r+0x1476>
   88aa8:	4622      	mov	r2, r4
   88aaa:	f04f 0b10 	mov.w	fp, #16
   88aae:	4d91      	ldr	r5, [pc, #580]	; (88cf4 <_svfprintf_r+0xefc>)
   88ab0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   88ab2:	e004      	b.n	88abe <_svfprintf_r+0xcc6>
   88ab4:	3e10      	subs	r6, #16
   88ab6:	2e10      	cmp	r6, #16
   88ab8:	f108 0808 	add.w	r8, r8, #8
   88abc:	dd15      	ble.n	88aea <_svfprintf_r+0xcf2>
   88abe:	3701      	adds	r7, #1
   88ac0:	3210      	adds	r2, #16
   88ac2:	2f07      	cmp	r7, #7
   88ac4:	9227      	str	r2, [sp, #156]	; 0x9c
   88ac6:	9726      	str	r7, [sp, #152]	; 0x98
   88ac8:	e888 0820 	stmia.w	r8, {r5, fp}
   88acc:	ddf2      	ble.n	88ab4 <_svfprintf_r+0xcbc>
   88ace:	aa25      	add	r2, sp, #148	; 0x94
   88ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88ad2:	4620      	mov	r0, r4
   88ad4:	f004 f8ec 	bl	8ccb0 <__ssprint_r>
   88ad8:	2800      	cmp	r0, #0
   88ada:	f47f aa6a 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88ade:	3e10      	subs	r6, #16
   88ae0:	2e10      	cmp	r6, #16
   88ae2:	46c8      	mov	r8, r9
   88ae4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88ae6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88ae8:	dce9      	bgt.n	88abe <_svfprintf_r+0xcc6>
   88aea:	4614      	mov	r4, r2
   88aec:	3701      	adds	r7, #1
   88aee:	4434      	add	r4, r6
   88af0:	2f07      	cmp	r7, #7
   88af2:	9427      	str	r4, [sp, #156]	; 0x9c
   88af4:	9726      	str	r7, [sp, #152]	; 0x98
   88af6:	e888 0060 	stmia.w	r8, {r5, r6}
   88afa:	f77f ae9a 	ble.w	88832 <_svfprintf_r+0xa3a>
   88afe:	aa25      	add	r2, sp, #148	; 0x94
   88b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88b02:	980c      	ldr	r0, [sp, #48]	; 0x30
   88b04:	f004 f8d4 	bl	8ccb0 <__ssprint_r>
   88b08:	2800      	cmp	r0, #0
   88b0a:	f47f aa52 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88b0e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88b10:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88b12:	46c8      	mov	r8, r9
   88b14:	e68f      	b.n	88836 <_svfprintf_r+0xa3e>
   88b16:	3204      	adds	r2, #4
   88b18:	681c      	ldr	r4, [r3, #0]
   88b1a:	2500      	movs	r5, #0
   88b1c:	2301      	movs	r3, #1
   88b1e:	920f      	str	r2, [sp, #60]	; 0x3c
   88b20:	f7ff ba68 	b.w	87ff4 <_svfprintf_r+0x1fc>
   88b24:	681c      	ldr	r4, [r3, #0]
   88b26:	3304      	adds	r3, #4
   88b28:	930f      	str	r3, [sp, #60]	; 0x3c
   88b2a:	2500      	movs	r5, #0
   88b2c:	e42a      	b.n	88384 <_svfprintf_r+0x58c>
   88b2e:	681c      	ldr	r4, [r3, #0]
   88b30:	3304      	adds	r3, #4
   88b32:	17e5      	asrs	r5, r4, #31
   88b34:	4622      	mov	r2, r4
   88b36:	930f      	str	r3, [sp, #60]	; 0x3c
   88b38:	462b      	mov	r3, r5
   88b3a:	2a00      	cmp	r2, #0
   88b3c:	f173 0300 	sbcs.w	r3, r3, #0
   88b40:	f6bf ac68 	bge.w	88414 <_svfprintf_r+0x61c>
   88b44:	272d      	movs	r7, #45	; 0x2d
   88b46:	4264      	negs	r4, r4
   88b48:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88b4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   88b50:	2301      	movs	r3, #1
   88b52:	f7ff ba53 	b.w	87ffc <_svfprintf_r+0x204>
   88b56:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88b58:	2500      	movs	r5, #0
   88b5a:	460a      	mov	r2, r1
   88b5c:	3204      	adds	r2, #4
   88b5e:	680c      	ldr	r4, [r1, #0]
   88b60:	920f      	str	r2, [sp, #60]	; 0x3c
   88b62:	f7ff ba47 	b.w	87ff4 <_svfprintf_r+0x1fc>
   88b66:	4614      	mov	r4, r2
   88b68:	3301      	adds	r3, #1
   88b6a:	4434      	add	r4, r6
   88b6c:	2b07      	cmp	r3, #7
   88b6e:	9427      	str	r4, [sp, #156]	; 0x9c
   88b70:	9326      	str	r3, [sp, #152]	; 0x98
   88b72:	e888 0060 	stmia.w	r8, {r5, r6}
   88b76:	f77f ab2f 	ble.w	881d8 <_svfprintf_r+0x3e0>
   88b7a:	e6e0      	b.n	8893e <_svfprintf_r+0xb46>
   88b7c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88b80:	2301      	movs	r3, #1
   88b82:	ae42      	add	r6, sp, #264	; 0x108
   88b84:	3430      	adds	r4, #48	; 0x30
   88b86:	f8cd b01c 	str.w	fp, [sp, #28]
   88b8a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   88b8e:	930e      	str	r3, [sp, #56]	; 0x38
   88b90:	f7ff ba4e 	b.w	88030 <_svfprintf_r+0x238>
   88b94:	4635      	mov	r5, r6
   88b96:	460c      	mov	r4, r1
   88b98:	4646      	mov	r6, r8
   88b9a:	4690      	mov	r8, r2
   88b9c:	3301      	adds	r3, #1
   88b9e:	443c      	add	r4, r7
   88ba0:	2b07      	cmp	r3, #7
   88ba2:	9427      	str	r4, [sp, #156]	; 0x9c
   88ba4:	9326      	str	r3, [sp, #152]	; 0x98
   88ba6:	e888 00a0 	stmia.w	r8, {r5, r7}
   88baa:	f300 8246 	bgt.w	8903a <_svfprintf_r+0x1242>
   88bae:	f108 0808 	add.w	r8, r8, #8
   88bb2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   88bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88bb6:	429a      	cmp	r2, r3
   88bb8:	db45      	blt.n	88c46 <_svfprintf_r+0xe4e>
   88bba:	9b07      	ldr	r3, [sp, #28]
   88bbc:	07d9      	lsls	r1, r3, #31
   88bbe:	d442      	bmi.n	88c46 <_svfprintf_r+0xe4e>
   88bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88bc2:	9812      	ldr	r0, [sp, #72]	; 0x48
   88bc4:	1a9a      	subs	r2, r3, r2
   88bc6:	1a1d      	subs	r5, r3, r0
   88bc8:	4295      	cmp	r5, r2
   88bca:	bfa8      	it	ge
   88bcc:	4615      	movge	r5, r2
   88bce:	2d00      	cmp	r5, #0
   88bd0:	dd0e      	ble.n	88bf0 <_svfprintf_r+0xdf8>
   88bd2:	9926      	ldr	r1, [sp, #152]	; 0x98
   88bd4:	4406      	add	r6, r0
   88bd6:	3101      	adds	r1, #1
   88bd8:	442c      	add	r4, r5
   88bda:	2907      	cmp	r1, #7
   88bdc:	f8c8 6000 	str.w	r6, [r8]
   88be0:	9427      	str	r4, [sp, #156]	; 0x9c
   88be2:	f8c8 5004 	str.w	r5, [r8, #4]
   88be6:	9126      	str	r1, [sp, #152]	; 0x98
   88be8:	f300 8216 	bgt.w	89018 <_svfprintf_r+0x1220>
   88bec:	f108 0808 	add.w	r8, r8, #8
   88bf0:	2d00      	cmp	r5, #0
   88bf2:	bfb4      	ite	lt
   88bf4:	4616      	movlt	r6, r2
   88bf6:	1b56      	subge	r6, r2, r5
   88bf8:	2e00      	cmp	r6, #0
   88bfa:	f77f aaef 	ble.w	881dc <_svfprintf_r+0x3e4>
   88bfe:	2e10      	cmp	r6, #16
   88c00:	f340 82f3 	ble.w	891ea <_svfprintf_r+0x13f2>
   88c04:	4622      	mov	r2, r4
   88c06:	2710      	movs	r7, #16
   88c08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88c0a:	4d3a      	ldr	r5, [pc, #232]	; (88cf4 <_svfprintf_r+0xefc>)
   88c0c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88c10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   88c12:	e004      	b.n	88c1e <_svfprintf_r+0xe26>
   88c14:	f108 0808 	add.w	r8, r8, #8
   88c18:	3e10      	subs	r6, #16
   88c1a:	2e10      	cmp	r6, #16
   88c1c:	dda3      	ble.n	88b66 <_svfprintf_r+0xd6e>
   88c1e:	3301      	adds	r3, #1
   88c20:	3210      	adds	r2, #16
   88c22:	2b07      	cmp	r3, #7
   88c24:	9227      	str	r2, [sp, #156]	; 0x9c
   88c26:	9326      	str	r3, [sp, #152]	; 0x98
   88c28:	e888 00a0 	stmia.w	r8, {r5, r7}
   88c2c:	ddf2      	ble.n	88c14 <_svfprintf_r+0xe1c>
   88c2e:	aa25      	add	r2, sp, #148	; 0x94
   88c30:	4621      	mov	r1, r4
   88c32:	4658      	mov	r0, fp
   88c34:	f004 f83c 	bl	8ccb0 <__ssprint_r>
   88c38:	2800      	cmp	r0, #0
   88c3a:	f47f a9ba 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88c3e:	46c8      	mov	r8, r9
   88c40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88c42:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88c44:	e7e8      	b.n	88c18 <_svfprintf_r+0xe20>
   88c46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88c48:	9819      	ldr	r0, [sp, #100]	; 0x64
   88c4a:	3301      	adds	r3, #1
   88c4c:	991a      	ldr	r1, [sp, #104]	; 0x68
   88c4e:	4404      	add	r4, r0
   88c50:	2b07      	cmp	r3, #7
   88c52:	9427      	str	r4, [sp, #156]	; 0x9c
   88c54:	f8c8 1000 	str.w	r1, [r8]
   88c58:	f8c8 0004 	str.w	r0, [r8, #4]
   88c5c:	9326      	str	r3, [sp, #152]	; 0x98
   88c5e:	f300 81cf 	bgt.w	89000 <_svfprintf_r+0x1208>
   88c62:	f108 0808 	add.w	r8, r8, #8
   88c66:	e7ab      	b.n	88bc0 <_svfprintf_r+0xdc8>
   88c68:	9b07      	ldr	r3, [sp, #28]
   88c6a:	07da      	lsls	r2, r3, #31
   88c6c:	f53f adad 	bmi.w	887ca <_svfprintf_r+0x9d2>
   88c70:	2301      	movs	r3, #1
   88c72:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88c74:	441c      	add	r4, r3
   88c76:	441f      	add	r7, r3
   88c78:	2f07      	cmp	r7, #7
   88c7a:	9427      	str	r4, [sp, #156]	; 0x9c
   88c7c:	f8c8 6000 	str.w	r6, [r8]
   88c80:	9726      	str	r7, [sp, #152]	; 0x98
   88c82:	f8c8 3004 	str.w	r3, [r8, #4]
   88c86:	f77f add4 	ble.w	88832 <_svfprintf_r+0xa3a>
   88c8a:	aa25      	add	r2, sp, #148	; 0x94
   88c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88c90:	f004 f80e 	bl	8ccb0 <__ssprint_r>
   88c94:	2800      	cmp	r0, #0
   88c96:	f47f a98c 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88c9a:	46c8      	mov	r8, r9
   88c9c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88c9e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88ca0:	e5c9      	b.n	88836 <_svfprintf_r+0xa3e>
   88ca2:	aa25      	add	r2, sp, #148	; 0x94
   88ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
   88ca8:	f004 f802 	bl	8ccb0 <__ssprint_r>
   88cac:	2800      	cmp	r0, #0
   88cae:	f47f a980 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88cb2:	46c8      	mov	r8, r9
   88cb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88cb6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88cb8:	e596      	b.n	887e8 <_svfprintf_r+0x9f0>
   88cba:	aa25      	add	r2, sp, #148	; 0x94
   88cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88cbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   88cc0:	f003 fff6 	bl	8ccb0 <__ssprint_r>
   88cc4:	2800      	cmp	r0, #0
   88cc6:	f47f a974 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88cca:	46c8      	mov	r8, r9
   88ccc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88cce:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88cd0:	e599      	b.n	88806 <_svfprintf_r+0xa0e>
   88cd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   88cd4:	3407      	adds	r4, #7
   88cd6:	f024 0407 	bic.w	r4, r4, #7
   88cda:	f104 0108 	add.w	r1, r4, #8
   88cde:	e9d4 2300 	ldrd	r2, r3, [r4]
   88ce2:	910f      	str	r1, [sp, #60]	; 0x3c
   88ce4:	4614      	mov	r4, r2
   88ce6:	461d      	mov	r5, r3
   88ce8:	f7ff bb8f 	b.w	8840a <_svfprintf_r+0x612>
   88cec:	464e      	mov	r6, r9
   88cee:	f7ff b99f 	b.w	88030 <_svfprintf_r+0x238>
   88cf2:	bf00      	nop
   88cf4:	0008dd90 	.word	0x0008dd90
   88cf8:	aa25      	add	r2, sp, #148	; 0x94
   88cfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
   88cfe:	f003 ffd7 	bl	8ccb0 <__ssprint_r>
   88d02:	2800      	cmp	r0, #0
   88d04:	f47f a955 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88d08:	46c8      	mov	r8, r9
   88d0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88d0c:	f7ff ba16 	b.w	8813c <_svfprintf_r+0x344>
   88d10:	9c15      	ldr	r4, [sp, #84]	; 0x54
   88d12:	4622      	mov	r2, r4
   88d14:	4620      	mov	r0, r4
   88d16:	9c14      	ldr	r4, [sp, #80]	; 0x50
   88d18:	4623      	mov	r3, r4
   88d1a:	4621      	mov	r1, r4
   88d1c:	f004 fe94 	bl	8da48 <__aeabi_dcmpun>
   88d20:	2800      	cmp	r0, #0
   88d22:	f040 8273 	bne.w	8920c <_svfprintf_r+0x1414>
   88d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88d28:	3301      	adds	r3, #1
   88d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88d2c:	f023 0320 	bic.w	r3, r3, #32
   88d30:	930e      	str	r3, [sp, #56]	; 0x38
   88d32:	f000 819c 	beq.w	8906e <_svfprintf_r+0x1276>
   88d36:	2b47      	cmp	r3, #71	; 0x47
   88d38:	f000 80d6 	beq.w	88ee8 <_svfprintf_r+0x10f0>
   88d3c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   88d40:	9307      	str	r3, [sp, #28]
   88d42:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88d44:	1e1f      	subs	r7, r3, #0
   88d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88d48:	9308      	str	r3, [sp, #32]
   88d4a:	bfb7      	itett	lt
   88d4c:	463b      	movlt	r3, r7
   88d4e:	2300      	movge	r3, #0
   88d50:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   88d54:	232d      	movlt	r3, #45	; 0x2d
   88d56:	9310      	str	r3, [sp, #64]	; 0x40
   88d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88d5a:	2b66      	cmp	r3, #102	; 0x66
   88d5c:	f000 8190 	beq.w	89080 <_svfprintf_r+0x1288>
   88d60:	2b46      	cmp	r3, #70	; 0x46
   88d62:	f000 80a4 	beq.w	88eae <_svfprintf_r+0x10b6>
   88d66:	2002      	movs	r0, #2
   88d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88d6a:	a923      	add	r1, sp, #140	; 0x8c
   88d6c:	2b45      	cmp	r3, #69	; 0x45
   88d6e:	bf0a      	itet	eq
   88d70:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   88d72:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   88d74:	1c5d      	addeq	r5, r3, #1
   88d76:	e88d 0021 	stmia.w	sp, {r0, r5}
   88d7a:	9104      	str	r1, [sp, #16]
   88d7c:	a820      	add	r0, sp, #128	; 0x80
   88d7e:	a91f      	add	r1, sp, #124	; 0x7c
   88d80:	463b      	mov	r3, r7
   88d82:	9003      	str	r0, [sp, #12]
   88d84:	9a08      	ldr	r2, [sp, #32]
   88d86:	9102      	str	r1, [sp, #8]
   88d88:	980c      	ldr	r0, [sp, #48]	; 0x30
   88d8a:	f001 fa85 	bl	8a298 <_dtoa_r>
   88d8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88d90:	4606      	mov	r6, r0
   88d92:	2b67      	cmp	r3, #103	; 0x67
   88d94:	f040 81ba 	bne.w	8910c <_svfprintf_r+0x1314>
   88d98:	f01b 0f01 	tst.w	fp, #1
   88d9c:	f000 8223 	beq.w	891e6 <_svfprintf_r+0x13ee>
   88da0:	1974      	adds	r4, r6, r5
   88da2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   88da4:	9808      	ldr	r0, [sp, #32]
   88da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88da8:	4639      	mov	r1, r7
   88daa:	f004 fe1b 	bl	8d9e4 <__aeabi_dcmpeq>
   88dae:	2800      	cmp	r0, #0
   88db0:	f040 8124 	bne.w	88ffc <_svfprintf_r+0x1204>
   88db4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88db6:	42a3      	cmp	r3, r4
   88db8:	d206      	bcs.n	88dc8 <_svfprintf_r+0xfd0>
   88dba:	2130      	movs	r1, #48	; 0x30
   88dbc:	1c5a      	adds	r2, r3, #1
   88dbe:	9223      	str	r2, [sp, #140]	; 0x8c
   88dc0:	7019      	strb	r1, [r3, #0]
   88dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88dc4:	429c      	cmp	r4, r3
   88dc6:	d8f9      	bhi.n	88dbc <_svfprintf_r+0xfc4>
   88dc8:	1b9b      	subs	r3, r3, r6
   88dca:	9313      	str	r3, [sp, #76]	; 0x4c
   88dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88dce:	2b47      	cmp	r3, #71	; 0x47
   88dd0:	f000 80a2 	beq.w	88f18 <_svfprintf_r+0x1120>
   88dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88dd6:	2b65      	cmp	r3, #101	; 0x65
   88dd8:	f340 81a7 	ble.w	8912a <_svfprintf_r+0x1332>
   88ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88dde:	2b66      	cmp	r3, #102	; 0x66
   88de0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88de2:	9312      	str	r3, [sp, #72]	; 0x48
   88de4:	f000 8171 	beq.w	890ca <_svfprintf_r+0x12d2>
   88de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88dea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88dec:	4619      	mov	r1, r3
   88dee:	4291      	cmp	r1, r2
   88df0:	f300 815d 	bgt.w	890ae <_svfprintf_r+0x12b6>
   88df4:	f01b 0f01 	tst.w	fp, #1
   88df8:	f040 81f0 	bne.w	891dc <_svfprintf_r+0x13e4>
   88dfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88e00:	9308      	str	r3, [sp, #32]
   88e02:	2367      	movs	r3, #103	; 0x67
   88e04:	920e      	str	r2, [sp, #56]	; 0x38
   88e06:	9311      	str	r3, [sp, #68]	; 0x44
   88e08:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88e0a:	2b00      	cmp	r3, #0
   88e0c:	d17d      	bne.n	88f0a <_svfprintf_r+0x1112>
   88e0e:	930a      	str	r3, [sp, #40]	; 0x28
   88e10:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   88e14:	f7ff b914 	b.w	88040 <_svfprintf_r+0x248>
   88e18:	f024 0407 	bic.w	r4, r4, #7
   88e1c:	6823      	ldr	r3, [r4, #0]
   88e1e:	9315      	str	r3, [sp, #84]	; 0x54
   88e20:	6863      	ldr	r3, [r4, #4]
   88e22:	9314      	str	r3, [sp, #80]	; 0x50
   88e24:	f104 0308 	add.w	r3, r4, #8
   88e28:	930f      	str	r3, [sp, #60]	; 0x3c
   88e2a:	f7ff bb2f 	b.w	8848c <_svfprintf_r+0x694>
   88e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88e30:	6813      	ldr	r3, [r2, #0]
   88e32:	3204      	adds	r2, #4
   88e34:	920f      	str	r2, [sp, #60]	; 0x3c
   88e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88e38:	601a      	str	r2, [r3, #0]
   88e3a:	f7ff b804 	b.w	87e46 <_svfprintf_r+0x4e>
   88e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88e40:	4daf      	ldr	r5, [pc, #700]	; (89100 <_svfprintf_r+0x1308>)
   88e42:	f7ff b9ad 	b.w	881a0 <_svfprintf_r+0x3a8>
   88e46:	aa25      	add	r2, sp, #148	; 0x94
   88e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   88e4c:	f003 ff30 	bl	8ccb0 <__ssprint_r>
   88e50:	2800      	cmp	r0, #0
   88e52:	f47f a8ae 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88e56:	46c8      	mov	r8, r9
   88e58:	e431      	b.n	886be <_svfprintf_r+0x8c6>
   88e5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88e5c:	4613      	mov	r3, r2
   88e5e:	3304      	adds	r3, #4
   88e60:	930f      	str	r3, [sp, #60]	; 0x3c
   88e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88e64:	6811      	ldr	r1, [r2, #0]
   88e66:	17dd      	asrs	r5, r3, #31
   88e68:	461a      	mov	r2, r3
   88e6a:	462b      	mov	r3, r5
   88e6c:	e9c1 2300 	strd	r2, r3, [r1]
   88e70:	f7fe bfe9 	b.w	87e46 <_svfprintf_r+0x4e>
   88e74:	aa25      	add	r2, sp, #148	; 0x94
   88e76:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88e78:	980c      	ldr	r0, [sp, #48]	; 0x30
   88e7a:	f003 ff19 	bl	8ccb0 <__ssprint_r>
   88e7e:	2800      	cmp	r0, #0
   88e80:	f47f a897 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88e84:	46c8      	mov	r8, r9
   88e86:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88e88:	e432      	b.n	886f0 <_svfprintf_r+0x8f8>
   88e8a:	f108 0808 	add.w	r8, r8, #8
   88e8e:	e52f      	b.n	888f0 <_svfprintf_r+0xaf8>
   88e90:	2140      	movs	r1, #64	; 0x40
   88e92:	980c      	ldr	r0, [sp, #48]	; 0x30
   88e94:	f002 fe68 	bl	8bb68 <_malloc_r>
   88e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   88e9a:	6010      	str	r0, [r2, #0]
   88e9c:	6110      	str	r0, [r2, #16]
   88e9e:	2800      	cmp	r0, #0
   88ea0:	f000 8214 	beq.w	892cc <_svfprintf_r+0x14d4>
   88ea4:	2340      	movs	r3, #64	; 0x40
   88ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   88ea8:	6153      	str	r3, [r2, #20]
   88eaa:	f7fe bfbc 	b.w	87e26 <_svfprintf_r+0x2e>
   88eae:	2003      	movs	r0, #3
   88eb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   88eb2:	a923      	add	r1, sp, #140	; 0x8c
   88eb4:	e88d 0011 	stmia.w	sp, {r0, r4}
   88eb8:	9104      	str	r1, [sp, #16]
   88eba:	a820      	add	r0, sp, #128	; 0x80
   88ebc:	a91f      	add	r1, sp, #124	; 0x7c
   88ebe:	9003      	str	r0, [sp, #12]
   88ec0:	9a08      	ldr	r2, [sp, #32]
   88ec2:	463b      	mov	r3, r7
   88ec4:	9102      	str	r1, [sp, #8]
   88ec6:	980c      	ldr	r0, [sp, #48]	; 0x30
   88ec8:	f001 f9e6 	bl	8a298 <_dtoa_r>
   88ecc:	4625      	mov	r5, r4
   88ece:	4606      	mov	r6, r0
   88ed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88ed2:	1974      	adds	r4, r6, r5
   88ed4:	2b46      	cmp	r3, #70	; 0x46
   88ed6:	f47f af64 	bne.w	88da2 <_svfprintf_r+0xfaa>
   88eda:	7833      	ldrb	r3, [r6, #0]
   88edc:	2b30      	cmp	r3, #48	; 0x30
   88ede:	f000 8187 	beq.w	891f0 <_svfprintf_r+0x13f8>
   88ee2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   88ee4:	442c      	add	r4, r5
   88ee6:	e75c      	b.n	88da2 <_svfprintf_r+0xfaa>
   88ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88eea:	2b00      	cmp	r3, #0
   88eec:	bf08      	it	eq
   88eee:	2301      	moveq	r3, #1
   88ef0:	930a      	str	r3, [sp, #40]	; 0x28
   88ef2:	e723      	b.n	88d3c <_svfprintf_r+0xf44>
   88ef4:	4630      	mov	r0, r6
   88ef6:	950a      	str	r5, [sp, #40]	; 0x28
   88ef8:	f003 feac 	bl	8cc54 <strlen>
   88efc:	940f      	str	r4, [sp, #60]	; 0x3c
   88efe:	900e      	str	r0, [sp, #56]	; 0x38
   88f00:	f8cd b01c 	str.w	fp, [sp, #28]
   88f04:	4603      	mov	r3, r0
   88f06:	f7ff b9e7 	b.w	882d8 <_svfprintf_r+0x4e0>
   88f0a:	272d      	movs	r7, #45	; 0x2d
   88f0c:	2300      	movs	r3, #0
   88f0e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   88f12:	930a      	str	r3, [sp, #40]	; 0x28
   88f14:	f7ff b895 	b.w	88042 <_svfprintf_r+0x24a>
   88f18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88f1a:	461a      	mov	r2, r3
   88f1c:	9312      	str	r3, [sp, #72]	; 0x48
   88f1e:	3303      	adds	r3, #3
   88f20:	db04      	blt.n	88f2c <_svfprintf_r+0x1134>
   88f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88f24:	4619      	mov	r1, r3
   88f26:	4291      	cmp	r1, r2
   88f28:	f6bf af5e 	bge.w	88de8 <_svfprintf_r+0xff0>
   88f2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88f2e:	3b02      	subs	r3, #2
   88f30:	9311      	str	r3, [sp, #68]	; 0x44
   88f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88f34:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   88f38:	3b01      	subs	r3, #1
   88f3a:	2b00      	cmp	r3, #0
   88f3c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   88f40:	bfb4      	ite	lt
   88f42:	222d      	movlt	r2, #45	; 0x2d
   88f44:	222b      	movge	r2, #43	; 0x2b
   88f46:	931f      	str	r3, [sp, #124]	; 0x7c
   88f48:	bfb8      	it	lt
   88f4a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   88f4c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   88f50:	bfb8      	it	lt
   88f52:	f1c3 0301 	rsblt	r3, r3, #1
   88f56:	2b09      	cmp	r3, #9
   88f58:	f340 811f 	ble.w	8919a <_svfprintf_r+0x13a2>
   88f5c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   88f60:	4601      	mov	r1, r0
   88f62:	4c68      	ldr	r4, [pc, #416]	; (89104 <_svfprintf_r+0x130c>)
   88f64:	e000      	b.n	88f68 <_svfprintf_r+0x1170>
   88f66:	4611      	mov	r1, r2
   88f68:	fb84 5203 	smull	r5, r2, r4, r3
   88f6c:	17dd      	asrs	r5, r3, #31
   88f6e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   88f72:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   88f76:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   88f7a:	3230      	adds	r2, #48	; 0x30
   88f7c:	2d09      	cmp	r5, #9
   88f7e:	f801 2c01 	strb.w	r2, [r1, #-1]
   88f82:	462b      	mov	r3, r5
   88f84:	f101 32ff 	add.w	r2, r1, #4294967295
   88f88:	dced      	bgt.n	88f66 <_svfprintf_r+0x116e>
   88f8a:	3330      	adds	r3, #48	; 0x30
   88f8c:	3902      	subs	r1, #2
   88f8e:	b2dc      	uxtb	r4, r3
   88f90:	4288      	cmp	r0, r1
   88f92:	f802 4c01 	strb.w	r4, [r2, #-1]
   88f96:	f240 8192 	bls.w	892be <_svfprintf_r+0x14c6>
   88f9a:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   88f9e:	4613      	mov	r3, r2
   88fa0:	e001      	b.n	88fa6 <_svfprintf_r+0x11ae>
   88fa2:	f813 4b01 	ldrb.w	r4, [r3], #1
   88fa6:	4283      	cmp	r3, r0
   88fa8:	f801 4b01 	strb.w	r4, [r1], #1
   88fac:	d1f9      	bne.n	88fa2 <_svfprintf_r+0x11aa>
   88fae:	3301      	adds	r3, #1
   88fb0:	1a9b      	subs	r3, r3, r2
   88fb2:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   88fb6:	4413      	add	r3, r2
   88fb8:	aa21      	add	r2, sp, #132	; 0x84
   88fba:	1a9b      	subs	r3, r3, r2
   88fbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88fbe:	931b      	str	r3, [sp, #108]	; 0x6c
   88fc0:	2a01      	cmp	r2, #1
   88fc2:	4413      	add	r3, r2
   88fc4:	930e      	str	r3, [sp, #56]	; 0x38
   88fc6:	f340 8148 	ble.w	8925a <_svfprintf_r+0x1462>
   88fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88fcc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88fce:	4413      	add	r3, r2
   88fd0:	930e      	str	r3, [sp, #56]	; 0x38
   88fd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88fd6:	9308      	str	r3, [sp, #32]
   88fd8:	2300      	movs	r3, #0
   88fda:	9312      	str	r3, [sp, #72]	; 0x48
   88fdc:	e714      	b.n	88e08 <_svfprintf_r+0x1010>
   88fde:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88fe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88fe2:	f7ff b876 	b.w	880d2 <_svfprintf_r+0x2da>
   88fe6:	aa25      	add	r2, sp, #148	; 0x94
   88fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88fea:	980c      	ldr	r0, [sp, #48]	; 0x30
   88fec:	f003 fe60 	bl	8ccb0 <__ssprint_r>
   88ff0:	2800      	cmp	r0, #0
   88ff2:	f47e afde 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   88ff6:	46c8      	mov	r8, r9
   88ff8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88ffa:	e4fb      	b.n	889f4 <_svfprintf_r+0xbfc>
   88ffc:	4623      	mov	r3, r4
   88ffe:	e6e3      	b.n	88dc8 <_svfprintf_r+0xfd0>
   89000:	aa25      	add	r2, sp, #148	; 0x94
   89002:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89004:	980c      	ldr	r0, [sp, #48]	; 0x30
   89006:	f003 fe53 	bl	8ccb0 <__ssprint_r>
   8900a:	2800      	cmp	r0, #0
   8900c:	f47e afd1 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   89010:	46c8      	mov	r8, r9
   89012:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   89014:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   89016:	e5d3      	b.n	88bc0 <_svfprintf_r+0xdc8>
   89018:	aa25      	add	r2, sp, #148	; 0x94
   8901a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8901c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8901e:	f003 fe47 	bl	8ccb0 <__ssprint_r>
   89022:	2800      	cmp	r0, #0
   89024:	f47e afc5 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   89028:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8902a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8902c:	46c8      	mov	r8, r9
   8902e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   89030:	1a9a      	subs	r2, r3, r2
   89032:	e5dd      	b.n	88bf0 <_svfprintf_r+0xdf8>
   89034:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89036:	f7ff b8fe 	b.w	88236 <_svfprintf_r+0x43e>
   8903a:	aa25      	add	r2, sp, #148	; 0x94
   8903c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8903e:	980c      	ldr	r0, [sp, #48]	; 0x30
   89040:	f003 fe36 	bl	8ccb0 <__ssprint_r>
   89044:	2800      	cmp	r0, #0
   89046:	f47e afb4 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   8904a:	46c8      	mov	r8, r9
   8904c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8904e:	e5b0      	b.n	88bb2 <_svfprintf_r+0xdba>
   89050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89052:	4637      	mov	r7, r6
   89054:	2b06      	cmp	r3, #6
   89056:	bf28      	it	cs
   89058:	2306      	movcs	r3, #6
   8905a:	960a      	str	r6, [sp, #40]	; 0x28
   8905c:	9612      	str	r6, [sp, #72]	; 0x48
   8905e:	9308      	str	r3, [sp, #32]
   89060:	940f      	str	r4, [sp, #60]	; 0x3c
   89062:	f8cd b01c 	str.w	fp, [sp, #28]
   89066:	930e      	str	r3, [sp, #56]	; 0x38
   89068:	4e27      	ldr	r6, [pc, #156]	; (89108 <_svfprintf_r+0x1310>)
   8906a:	f7fe bfe9 	b.w	88040 <_svfprintf_r+0x248>
   8906e:	2306      	movs	r3, #6
   89070:	930a      	str	r3, [sp, #40]	; 0x28
   89072:	e663      	b.n	88d3c <_svfprintf_r+0xf44>
   89074:	232d      	movs	r3, #45	; 0x2d
   89076:	461f      	mov	r7, r3
   89078:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8907c:	f7ff ba28 	b.w	884d0 <_svfprintf_r+0x6d8>
   89080:	2003      	movs	r0, #3
   89082:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   89084:	a923      	add	r1, sp, #140	; 0x8c
   89086:	e88d 0011 	stmia.w	sp, {r0, r4}
   8908a:	9104      	str	r1, [sp, #16]
   8908c:	a820      	add	r0, sp, #128	; 0x80
   8908e:	a91f      	add	r1, sp, #124	; 0x7c
   89090:	9003      	str	r0, [sp, #12]
   89092:	9a08      	ldr	r2, [sp, #32]
   89094:	463b      	mov	r3, r7
   89096:	9102      	str	r1, [sp, #8]
   89098:	980c      	ldr	r0, [sp, #48]	; 0x30
   8909a:	f001 f8fd 	bl	8a298 <_dtoa_r>
   8909e:	4625      	mov	r5, r4
   890a0:	4606      	mov	r6, r0
   890a2:	1904      	adds	r4, r0, r4
   890a4:	e719      	b.n	88eda <_svfprintf_r+0x10e2>
   890a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   890a8:	4d15      	ldr	r5, [pc, #84]	; (89100 <_svfprintf_r+0x1308>)
   890aa:	f7ff bb7e 	b.w	887aa <_svfprintf_r+0x9b2>
   890ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
   890b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   890b2:	4413      	add	r3, r2
   890b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   890b6:	930e      	str	r3, [sp, #56]	; 0x38
   890b8:	2a00      	cmp	r2, #0
   890ba:	f340 80c7 	ble.w	8924c <_svfprintf_r+0x1454>
   890be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   890c2:	9308      	str	r3, [sp, #32]
   890c4:	2367      	movs	r3, #103	; 0x67
   890c6:	9311      	str	r3, [sp, #68]	; 0x44
   890c8:	e69e      	b.n	88e08 <_svfprintf_r+0x1010>
   890ca:	2b00      	cmp	r3, #0
   890cc:	f340 80e1 	ble.w	89292 <_svfprintf_r+0x149a>
   890d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   890d2:	2a00      	cmp	r2, #0
   890d4:	f040 80b0 	bne.w	89238 <_svfprintf_r+0x1440>
   890d8:	f01b 0f01 	tst.w	fp, #1
   890dc:	f040 80ac 	bne.w	89238 <_svfprintf_r+0x1440>
   890e0:	9308      	str	r3, [sp, #32]
   890e2:	930e      	str	r3, [sp, #56]	; 0x38
   890e4:	e690      	b.n	88e08 <_svfprintf_r+0x1010>
   890e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   890e8:	940f      	str	r4, [sp, #60]	; 0x3c
   890ea:	9308      	str	r3, [sp, #32]
   890ec:	930e      	str	r3, [sp, #56]	; 0x38
   890ee:	900a      	str	r0, [sp, #40]	; 0x28
   890f0:	f8cd b01c 	str.w	fp, [sp, #28]
   890f4:	9012      	str	r0, [sp, #72]	; 0x48
   890f6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   890fa:	f7fe bfa1 	b.w	88040 <_svfprintf_r+0x248>
   890fe:	bf00      	nop
   89100:	0008dd90 	.word	0x0008dd90
   89104:	66666667 	.word	0x66666667
   89108:	0008dd74 	.word	0x0008dd74
   8910c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8910e:	2b47      	cmp	r3, #71	; 0x47
   89110:	f47f ae46 	bne.w	88da0 <_svfprintf_r+0xfa8>
   89114:	f01b 0f01 	tst.w	fp, #1
   89118:	f47f aeda 	bne.w	88ed0 <_svfprintf_r+0x10d8>
   8911c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8911e:	1b9b      	subs	r3, r3, r6
   89120:	9313      	str	r3, [sp, #76]	; 0x4c
   89122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89124:	2b47      	cmp	r3, #71	; 0x47
   89126:	f43f aef7 	beq.w	88f18 <_svfprintf_r+0x1120>
   8912a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8912c:	9312      	str	r3, [sp, #72]	; 0x48
   8912e:	e700      	b.n	88f32 <_svfprintf_r+0x113a>
   89130:	2000      	movs	r0, #0
   89132:	900a      	str	r0, [sp, #40]	; 0x28
   89134:	f7fe bebc 	b.w	87eb0 <_svfprintf_r+0xb8>
   89138:	424f      	negs	r7, r1
   8913a:	3110      	adds	r1, #16
   8913c:	da35      	bge.n	891aa <_svfprintf_r+0x13b2>
   8913e:	2410      	movs	r4, #16
   89140:	4d6a      	ldr	r5, [pc, #424]	; (892ec <_svfprintf_r+0x14f4>)
   89142:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   89146:	e004      	b.n	89152 <_svfprintf_r+0x135a>
   89148:	f108 0808 	add.w	r8, r8, #8
   8914c:	3f10      	subs	r7, #16
   8914e:	2f10      	cmp	r7, #16
   89150:	dd2c      	ble.n	891ac <_svfprintf_r+0x13b4>
   89152:	3301      	adds	r3, #1
   89154:	3210      	adds	r2, #16
   89156:	2b07      	cmp	r3, #7
   89158:	9227      	str	r2, [sp, #156]	; 0x9c
   8915a:	9326      	str	r3, [sp, #152]	; 0x98
   8915c:	f8c8 5000 	str.w	r5, [r8]
   89160:	f8c8 4004 	str.w	r4, [r8, #4]
   89164:	ddf0      	ble.n	89148 <_svfprintf_r+0x1350>
   89166:	aa25      	add	r2, sp, #148	; 0x94
   89168:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8916a:	4658      	mov	r0, fp
   8916c:	f003 fda0 	bl	8ccb0 <__ssprint_r>
   89170:	2800      	cmp	r0, #0
   89172:	f47e af1e 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   89176:	46c8      	mov	r8, r9
   89178:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8917a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8917c:	e7e6      	b.n	8914c <_svfprintf_r+0x1354>
   8917e:	aa25      	add	r2, sp, #148	; 0x94
   89180:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89182:	980c      	ldr	r0, [sp, #48]	; 0x30
   89184:	f003 fd94 	bl	8ccb0 <__ssprint_r>
   89188:	2800      	cmp	r0, #0
   8918a:	f47e af12 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   8918e:	46c8      	mov	r8, r9
   89190:	991f      	ldr	r1, [sp, #124]	; 0x7c
   89192:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   89194:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89196:	f7ff bbc3 	b.w	88920 <_svfprintf_r+0xb28>
   8919a:	2230      	movs	r2, #48	; 0x30
   8919c:	4413      	add	r3, r2
   8919e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   891a2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   891a6:	ab22      	add	r3, sp, #136	; 0x88
   891a8:	e706      	b.n	88fb8 <_svfprintf_r+0x11c0>
   891aa:	4d50      	ldr	r5, [pc, #320]	; (892ec <_svfprintf_r+0x14f4>)
   891ac:	3301      	adds	r3, #1
   891ae:	443a      	add	r2, r7
   891b0:	2b07      	cmp	r3, #7
   891b2:	e888 00a0 	stmia.w	r8, {r5, r7}
   891b6:	9227      	str	r2, [sp, #156]	; 0x9c
   891b8:	9326      	str	r3, [sp, #152]	; 0x98
   891ba:	f108 0808 	add.w	r8, r8, #8
   891be:	f77f abb2 	ble.w	88926 <_svfprintf_r+0xb2e>
   891c2:	aa25      	add	r2, sp, #148	; 0x94
   891c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   891c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   891c8:	f003 fd72 	bl	8ccb0 <__ssprint_r>
   891cc:	2800      	cmp	r0, #0
   891ce:	f47e aef0 	bne.w	87fb2 <_svfprintf_r+0x1ba>
   891d2:	46c8      	mov	r8, r9
   891d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   891d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   891d8:	f7ff bba5 	b.w	88926 <_svfprintf_r+0xb2e>
   891dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   891de:	9a19      	ldr	r2, [sp, #100]	; 0x64
   891e0:	4413      	add	r3, r2
   891e2:	930e      	str	r3, [sp, #56]	; 0x38
   891e4:	e76b      	b.n	890be <_svfprintf_r+0x12c6>
   891e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   891e8:	e5ee      	b.n	88dc8 <_svfprintf_r+0xfd0>
   891ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   891ec:	4d3f      	ldr	r5, [pc, #252]	; (892ec <_svfprintf_r+0x14f4>)
   891ee:	e4bb      	b.n	88b68 <_svfprintf_r+0xd70>
   891f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   891f2:	9808      	ldr	r0, [sp, #32]
   891f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   891f6:	4639      	mov	r1, r7
   891f8:	f004 fbf4 	bl	8d9e4 <__aeabi_dcmpeq>
   891fc:	2800      	cmp	r0, #0
   891fe:	f47f ae70 	bne.w	88ee2 <_svfprintf_r+0x10ea>
   89202:	f1c5 0501 	rsb	r5, r5, #1
   89206:	951f      	str	r5, [sp, #124]	; 0x7c
   89208:	442c      	add	r4, r5
   8920a:	e5ca      	b.n	88da2 <_svfprintf_r+0xfaa>
   8920c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8920e:	4e38      	ldr	r6, [pc, #224]	; (892f0 <_svfprintf_r+0x14f8>)
   89210:	2b00      	cmp	r3, #0
   89212:	bfbe      	ittt	lt
   89214:	232d      	movlt	r3, #45	; 0x2d
   89216:	461f      	movlt	r7, r3
   89218:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   8921c:	f04f 0303 	mov.w	r3, #3
   89220:	461a      	mov	r2, r3
   89222:	9308      	str	r3, [sp, #32]
   89224:	f04f 0300 	mov.w	r3, #0
   89228:	bfa8      	it	ge
   8922a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8922e:	4619      	mov	r1, r3
   89230:	930a      	str	r3, [sp, #40]	; 0x28
   89232:	4b30      	ldr	r3, [pc, #192]	; (892f4 <_svfprintf_r+0x14fc>)
   89234:	f7ff b954 	b.w	884e0 <_svfprintf_r+0x6e8>
   89238:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8923a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8923c:	4413      	add	r3, r2
   8923e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89240:	441a      	add	r2, r3
   89242:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   89246:	920e      	str	r2, [sp, #56]	; 0x38
   89248:	9308      	str	r3, [sp, #32]
   8924a:	e5dd      	b.n	88e08 <_svfprintf_r+0x1010>
   8924c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8924e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   89250:	f1c3 0301 	rsb	r3, r3, #1
   89254:	441a      	add	r2, r3
   89256:	4613      	mov	r3, r2
   89258:	e7c3      	b.n	891e2 <_svfprintf_r+0x13ea>
   8925a:	f01b 0301 	ands.w	r3, fp, #1
   8925e:	9312      	str	r3, [sp, #72]	; 0x48
   89260:	f47f aeb3 	bne.w	88fca <_svfprintf_r+0x11d2>
   89264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8926a:	9308      	str	r3, [sp, #32]
   8926c:	e5cc      	b.n	88e08 <_svfprintf_r+0x1010>
   8926e:	4d1f      	ldr	r5, [pc, #124]	; (892ec <_svfprintf_r+0x14f4>)
   89270:	e43c      	b.n	88aec <_svfprintf_r+0xcf4>
   89272:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89274:	4d1d      	ldr	r5, [pc, #116]	; (892ec <_svfprintf_r+0x14f4>)
   89276:	e491      	b.n	88b9c <_svfprintf_r+0xda4>
   89278:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8927a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   8927e:	6828      	ldr	r0, [r5, #0]
   89280:	46a2      	mov	sl, r4
   89282:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   89286:	900a      	str	r0, [sp, #40]	; 0x28
   89288:	4628      	mov	r0, r5
   8928a:	3004      	adds	r0, #4
   8928c:	900f      	str	r0, [sp, #60]	; 0x3c
   8928e:	f7fe be0d 	b.w	87eac <_svfprintf_r+0xb4>
   89292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89294:	b913      	cbnz	r3, 8929c <_svfprintf_r+0x14a4>
   89296:	f01b 0f01 	tst.w	fp, #1
   8929a:	d002      	beq.n	892a2 <_svfprintf_r+0x14aa>
   8929c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8929e:	3301      	adds	r3, #1
   892a0:	e7cd      	b.n	8923e <_svfprintf_r+0x1446>
   892a2:	2301      	movs	r3, #1
   892a4:	e71c      	b.n	890e0 <_svfprintf_r+0x12e8>
   892a6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   892aa:	f7ff b980 	b.w	885ae <_svfprintf_r+0x7b6>
   892ae:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   892b2:	f7ff b93a 	b.w	8852a <_svfprintf_r+0x732>
   892b6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   892ba:	f7ff b84f 	b.w	8835c <_svfprintf_r+0x564>
   892be:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   892c2:	e679      	b.n	88fb8 <_svfprintf_r+0x11c0>
   892c4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   892c8:	f7ff b9b2 	b.w	88630 <_svfprintf_r+0x838>
   892cc:	f04f 32ff 	mov.w	r2, #4294967295
   892d0:	230c      	movs	r3, #12
   892d2:	9209      	str	r2, [sp, #36]	; 0x24
   892d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   892d6:	6013      	str	r3, [r2, #0]
   892d8:	f7fe be74 	b.w	87fc4 <_svfprintf_r+0x1cc>
   892dc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   892e0:	f7ff b8c4 	b.w	8846c <_svfprintf_r+0x674>
   892e4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   892e8:	f7ff b878 	b.w	883dc <_svfprintf_r+0x5e4>
   892ec:	0008dd90 	.word	0x0008dd90
   892f0:	0008dd48 	.word	0x0008dd48
   892f4:	0008dd44 	.word	0x0008dd44

000892f8 <__sprint_r.part.0>:
   892f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   892fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   892fe:	4693      	mov	fp, r2
   89300:	049c      	lsls	r4, r3, #18
   89302:	d52f      	bpl.n	89364 <__sprint_r.part.0+0x6c>
   89304:	6893      	ldr	r3, [r2, #8]
   89306:	6812      	ldr	r2, [r2, #0]
   89308:	b353      	cbz	r3, 89360 <__sprint_r.part.0+0x68>
   8930a:	460e      	mov	r6, r1
   8930c:	4607      	mov	r7, r0
   8930e:	f102 0908 	add.w	r9, r2, #8
   89312:	e919 0420 	ldmdb	r9, {r5, sl}
   89316:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8931a:	d017      	beq.n	8934c <__sprint_r.part.0+0x54>
   8931c:	2400      	movs	r4, #0
   8931e:	3d04      	subs	r5, #4
   89320:	e001      	b.n	89326 <__sprint_r.part.0+0x2e>
   89322:	45a0      	cmp	r8, r4
   89324:	d010      	beq.n	89348 <__sprint_r.part.0+0x50>
   89326:	4632      	mov	r2, r6
   89328:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8932c:	4638      	mov	r0, r7
   8932e:	f002 f86b 	bl	8b408 <_fputwc_r>
   89332:	1c43      	adds	r3, r0, #1
   89334:	f104 0401 	add.w	r4, r4, #1
   89338:	d1f3      	bne.n	89322 <__sprint_r.part.0+0x2a>
   8933a:	2300      	movs	r3, #0
   8933c:	f8cb 3008 	str.w	r3, [fp, #8]
   89340:	f8cb 3004 	str.w	r3, [fp, #4]
   89344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89348:	f8db 3008 	ldr.w	r3, [fp, #8]
   8934c:	f02a 0a03 	bic.w	sl, sl, #3
   89350:	eba3 030a 	sub.w	r3, r3, sl
   89354:	f8cb 3008 	str.w	r3, [fp, #8]
   89358:	f109 0908 	add.w	r9, r9, #8
   8935c:	2b00      	cmp	r3, #0
   8935e:	d1d8      	bne.n	89312 <__sprint_r.part.0+0x1a>
   89360:	2000      	movs	r0, #0
   89362:	e7ea      	b.n	8933a <__sprint_r.part.0+0x42>
   89364:	f002 f9ba 	bl	8b6dc <__sfvwrite_r>
   89368:	2300      	movs	r3, #0
   8936a:	f8cb 3008 	str.w	r3, [fp, #8]
   8936e:	f8cb 3004 	str.w	r3, [fp, #4]
   89372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89376:	bf00      	nop

00089378 <_vfiprintf_r>:
   89378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8937c:	b0ad      	sub	sp, #180	; 0xb4
   8937e:	461d      	mov	r5, r3
   89380:	468b      	mov	fp, r1
   89382:	4690      	mov	r8, r2
   89384:	9307      	str	r3, [sp, #28]
   89386:	9006      	str	r0, [sp, #24]
   89388:	b118      	cbz	r0, 89392 <_vfiprintf_r+0x1a>
   8938a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8938c:	2b00      	cmp	r3, #0
   8938e:	f000 80f3 	beq.w	89578 <_vfiprintf_r+0x200>
   89392:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   89396:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8939a:	07df      	lsls	r7, r3, #31
   8939c:	b281      	uxth	r1, r0
   8939e:	d402      	bmi.n	893a6 <_vfiprintf_r+0x2e>
   893a0:	058e      	lsls	r6, r1, #22
   893a2:	f140 80fc 	bpl.w	8959e <_vfiprintf_r+0x226>
   893a6:	048c      	lsls	r4, r1, #18
   893a8:	d40a      	bmi.n	893c0 <_vfiprintf_r+0x48>
   893aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   893ae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   893b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   893b6:	f8ab 100c 	strh.w	r1, [fp, #12]
   893ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   893be:	b289      	uxth	r1, r1
   893c0:	0708      	lsls	r0, r1, #28
   893c2:	f140 80b3 	bpl.w	8952c <_vfiprintf_r+0x1b4>
   893c6:	f8db 3010 	ldr.w	r3, [fp, #16]
   893ca:	2b00      	cmp	r3, #0
   893cc:	f000 80ae 	beq.w	8952c <_vfiprintf_r+0x1b4>
   893d0:	f001 031a 	and.w	r3, r1, #26
   893d4:	2b0a      	cmp	r3, #10
   893d6:	f000 80b5 	beq.w	89544 <_vfiprintf_r+0x1cc>
   893da:	2300      	movs	r3, #0
   893dc:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   893e0:	46d1      	mov	r9, sl
   893e2:	930b      	str	r3, [sp, #44]	; 0x2c
   893e4:	9303      	str	r3, [sp, #12]
   893e6:	9311      	str	r3, [sp, #68]	; 0x44
   893e8:	9310      	str	r3, [sp, #64]	; 0x40
   893ea:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   893ee:	f8cd b010 	str.w	fp, [sp, #16]
   893f2:	f898 3000 	ldrb.w	r3, [r8]
   893f6:	4644      	mov	r4, r8
   893f8:	b1fb      	cbz	r3, 8943a <_vfiprintf_r+0xc2>
   893fa:	2b25      	cmp	r3, #37	; 0x25
   893fc:	d102      	bne.n	89404 <_vfiprintf_r+0x8c>
   893fe:	e01c      	b.n	8943a <_vfiprintf_r+0xc2>
   89400:	2b25      	cmp	r3, #37	; 0x25
   89402:	d003      	beq.n	8940c <_vfiprintf_r+0x94>
   89404:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   89408:	2b00      	cmp	r3, #0
   8940a:	d1f9      	bne.n	89400 <_vfiprintf_r+0x88>
   8940c:	eba4 0508 	sub.w	r5, r4, r8
   89410:	b19d      	cbz	r5, 8943a <_vfiprintf_r+0xc2>
   89412:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89414:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89416:	3301      	adds	r3, #1
   89418:	442a      	add	r2, r5
   8941a:	2b07      	cmp	r3, #7
   8941c:	f8c9 8000 	str.w	r8, [r9]
   89420:	f8c9 5004 	str.w	r5, [r9, #4]
   89424:	9211      	str	r2, [sp, #68]	; 0x44
   89426:	9310      	str	r3, [sp, #64]	; 0x40
   89428:	dd7a      	ble.n	89520 <_vfiprintf_r+0x1a8>
   8942a:	2a00      	cmp	r2, #0
   8942c:	f040 84b5 	bne.w	89d9a <_vfiprintf_r+0xa22>
   89430:	46d1      	mov	r9, sl
   89432:	9b03      	ldr	r3, [sp, #12]
   89434:	9210      	str	r2, [sp, #64]	; 0x40
   89436:	442b      	add	r3, r5
   89438:	9303      	str	r3, [sp, #12]
   8943a:	7823      	ldrb	r3, [r4, #0]
   8943c:	2b00      	cmp	r3, #0
   8943e:	f000 83e5 	beq.w	89c0c <_vfiprintf_r+0x894>
   89442:	2000      	movs	r0, #0
   89444:	f04f 0300 	mov.w	r3, #0
   89448:	f104 0801 	add.w	r8, r4, #1
   8944c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   89450:	7862      	ldrb	r2, [r4, #1]
   89452:	4606      	mov	r6, r0
   89454:	4605      	mov	r5, r0
   89456:	4603      	mov	r3, r0
   89458:	f04f 34ff 	mov.w	r4, #4294967295
   8945c:	f108 0801 	add.w	r8, r8, #1
   89460:	f1a2 0120 	sub.w	r1, r2, #32
   89464:	2958      	cmp	r1, #88	; 0x58
   89466:	f200 82d9 	bhi.w	89a1c <_vfiprintf_r+0x6a4>
   8946a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8946e:	0228      	.short	0x0228
   89470:	02d702d7 	.word	0x02d702d7
   89474:	02d70230 	.word	0x02d70230
   89478:	02d702d7 	.word	0x02d702d7
   8947c:	02d702d7 	.word	0x02d702d7
   89480:	00a002d7 	.word	0x00a002d7
   89484:	02d70288 	.word	0x02d70288
   89488:	02b800a8 	.word	0x02b800a8
   8948c:	01a602d7 	.word	0x01a602d7
   89490:	01ab01ab 	.word	0x01ab01ab
   89494:	01ab01ab 	.word	0x01ab01ab
   89498:	01ab01ab 	.word	0x01ab01ab
   8949c:	01ab01ab 	.word	0x01ab01ab
   894a0:	02d701ab 	.word	0x02d701ab
   894a4:	02d702d7 	.word	0x02d702d7
   894a8:	02d702d7 	.word	0x02d702d7
   894ac:	02d702d7 	.word	0x02d702d7
   894b0:	02d702d7 	.word	0x02d702d7
   894b4:	01b902d7 	.word	0x01b902d7
   894b8:	02d702d7 	.word	0x02d702d7
   894bc:	02d702d7 	.word	0x02d702d7
   894c0:	02d702d7 	.word	0x02d702d7
   894c4:	02d702d7 	.word	0x02d702d7
   894c8:	02d702d7 	.word	0x02d702d7
   894cc:	02d7019e 	.word	0x02d7019e
   894d0:	02d702d7 	.word	0x02d702d7
   894d4:	02d702d7 	.word	0x02d702d7
   894d8:	02d701a2 	.word	0x02d701a2
   894dc:	025a02d7 	.word	0x025a02d7
   894e0:	02d702d7 	.word	0x02d702d7
   894e4:	02d702d7 	.word	0x02d702d7
   894e8:	02d702d7 	.word	0x02d702d7
   894ec:	02d702d7 	.word	0x02d702d7
   894f0:	02d702d7 	.word	0x02d702d7
   894f4:	02220261 	.word	0x02220261
   894f8:	02d702d7 	.word	0x02d702d7
   894fc:	027602d7 	.word	0x027602d7
   89500:	02d70222 	.word	0x02d70222
   89504:	027b02d7 	.word	0x027b02d7
   89508:	01fc02d7 	.word	0x01fc02d7
   8950c:	02100189 	.word	0x02100189
   89510:	02d702d2 	.word	0x02d702d2
   89514:	02d70295 	.word	0x02d70295
   89518:	02d700ad 	.word	0x02d700ad
   8951c:	023502d7 	.word	0x023502d7
   89520:	f109 0908 	add.w	r9, r9, #8
   89524:	9b03      	ldr	r3, [sp, #12]
   89526:	442b      	add	r3, r5
   89528:	9303      	str	r3, [sp, #12]
   8952a:	e786      	b.n	8943a <_vfiprintf_r+0xc2>
   8952c:	4659      	mov	r1, fp
   8952e:	9806      	ldr	r0, [sp, #24]
   89530:	f000 fdaa 	bl	8a088 <__swsetup_r>
   89534:	bb18      	cbnz	r0, 8957e <_vfiprintf_r+0x206>
   89536:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8953a:	f001 031a 	and.w	r3, r1, #26
   8953e:	2b0a      	cmp	r3, #10
   89540:	f47f af4b 	bne.w	893da <_vfiprintf_r+0x62>
   89544:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   89548:	2b00      	cmp	r3, #0
   8954a:	f6ff af46 	blt.w	893da <_vfiprintf_r+0x62>
   8954e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   89552:	07db      	lsls	r3, r3, #31
   89554:	d405      	bmi.n	89562 <_vfiprintf_r+0x1ea>
   89556:	058f      	lsls	r7, r1, #22
   89558:	d403      	bmi.n	89562 <_vfiprintf_r+0x1ea>
   8955a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8955e:	f002 fa81 	bl	8ba64 <__retarget_lock_release_recursive>
   89562:	462b      	mov	r3, r5
   89564:	4642      	mov	r2, r8
   89566:	4659      	mov	r1, fp
   89568:	9806      	ldr	r0, [sp, #24]
   8956a:	f000 fd49 	bl	8a000 <__sbprintf>
   8956e:	9003      	str	r0, [sp, #12]
   89570:	9803      	ldr	r0, [sp, #12]
   89572:	b02d      	add	sp, #180	; 0xb4
   89574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89578:	f001 fea4 	bl	8b2c4 <__sinit>
   8957c:	e709      	b.n	89392 <_vfiprintf_r+0x1a>
   8957e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   89582:	07d9      	lsls	r1, r3, #31
   89584:	d404      	bmi.n	89590 <_vfiprintf_r+0x218>
   89586:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8958a:	059a      	lsls	r2, r3, #22
   8958c:	f140 84ae 	bpl.w	89eec <_vfiprintf_r+0xb74>
   89590:	f04f 33ff 	mov.w	r3, #4294967295
   89594:	9303      	str	r3, [sp, #12]
   89596:	9803      	ldr	r0, [sp, #12]
   89598:	b02d      	add	sp, #180	; 0xb4
   8959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8959e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   895a2:	f002 fa5d 	bl	8ba60 <__retarget_lock_acquire_recursive>
   895a6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   895aa:	b281      	uxth	r1, r0
   895ac:	e6fb      	b.n	893a6 <_vfiprintf_r+0x2e>
   895ae:	9907      	ldr	r1, [sp, #28]
   895b0:	460a      	mov	r2, r1
   895b2:	680d      	ldr	r5, [r1, #0]
   895b4:	3204      	adds	r2, #4
   895b6:	2d00      	cmp	r5, #0
   895b8:	9207      	str	r2, [sp, #28]
   895ba:	da02      	bge.n	895c2 <_vfiprintf_r+0x24a>
   895bc:	426d      	negs	r5, r5
   895be:	f043 0304 	orr.w	r3, r3, #4
   895c2:	f898 2000 	ldrb.w	r2, [r8]
   895c6:	e749      	b.n	8945c <_vfiprintf_r+0xe4>
   895c8:	9508      	str	r5, [sp, #32]
   895ca:	069e      	lsls	r6, r3, #26
   895cc:	f100 845a 	bmi.w	89e84 <_vfiprintf_r+0xb0c>
   895d0:	9907      	ldr	r1, [sp, #28]
   895d2:	06dd      	lsls	r5, r3, #27
   895d4:	460a      	mov	r2, r1
   895d6:	f100 83ef 	bmi.w	89db8 <_vfiprintf_r+0xa40>
   895da:	0658      	lsls	r0, r3, #25
   895dc:	f140 83ec 	bpl.w	89db8 <_vfiprintf_r+0xa40>
   895e0:	2700      	movs	r7, #0
   895e2:	2201      	movs	r2, #1
   895e4:	880e      	ldrh	r6, [r1, #0]
   895e6:	3104      	adds	r1, #4
   895e8:	9107      	str	r1, [sp, #28]
   895ea:	f04f 0100 	mov.w	r1, #0
   895ee:	2500      	movs	r5, #0
   895f0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   895f4:	1c61      	adds	r1, r4, #1
   895f6:	f000 8117 	beq.w	89828 <_vfiprintf_r+0x4b0>
   895fa:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   895fe:	9102      	str	r1, [sp, #8]
   89600:	ea56 0107 	orrs.w	r1, r6, r7
   89604:	f040 8115 	bne.w	89832 <_vfiprintf_r+0x4ba>
   89608:	2c00      	cmp	r4, #0
   8960a:	f040 835b 	bne.w	89cc4 <_vfiprintf_r+0x94c>
   8960e:	2a00      	cmp	r2, #0
   89610:	f040 83b6 	bne.w	89d80 <_vfiprintf_r+0xa08>
   89614:	f013 0301 	ands.w	r3, r3, #1
   89618:	9305      	str	r3, [sp, #20]
   8961a:	f000 8455 	beq.w	89ec8 <_vfiprintf_r+0xb50>
   8961e:	2330      	movs	r3, #48	; 0x30
   89620:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   89624:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   89628:	9b05      	ldr	r3, [sp, #20]
   8962a:	42a3      	cmp	r3, r4
   8962c:	bfb8      	it	lt
   8962e:	4623      	movlt	r3, r4
   89630:	9301      	str	r3, [sp, #4]
   89632:	b10d      	cbz	r5, 89638 <_vfiprintf_r+0x2c0>
   89634:	3301      	adds	r3, #1
   89636:	9301      	str	r3, [sp, #4]
   89638:	9b02      	ldr	r3, [sp, #8]
   8963a:	f013 0302 	ands.w	r3, r3, #2
   8963e:	9309      	str	r3, [sp, #36]	; 0x24
   89640:	d002      	beq.n	89648 <_vfiprintf_r+0x2d0>
   89642:	9b01      	ldr	r3, [sp, #4]
   89644:	3302      	adds	r3, #2
   89646:	9301      	str	r3, [sp, #4]
   89648:	9b02      	ldr	r3, [sp, #8]
   8964a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8964e:	930a      	str	r3, [sp, #40]	; 0x28
   89650:	f040 8215 	bne.w	89a7e <_vfiprintf_r+0x706>
   89654:	9b08      	ldr	r3, [sp, #32]
   89656:	9a01      	ldr	r2, [sp, #4]
   89658:	1a9d      	subs	r5, r3, r2
   8965a:	2d00      	cmp	r5, #0
   8965c:	f340 820f 	ble.w	89a7e <_vfiprintf_r+0x706>
   89660:	2d10      	cmp	r5, #16
   89662:	f340 8484 	ble.w	89f6e <_vfiprintf_r+0xbf6>
   89666:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89668:	46ce      	mov	lr, r9
   8966a:	2710      	movs	r7, #16
   8966c:	46a1      	mov	r9, r4
   8966e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89670:	4ec5      	ldr	r6, [pc, #788]	; (89988 <_vfiprintf_r+0x610>)
   89672:	4619      	mov	r1, r3
   89674:	9c06      	ldr	r4, [sp, #24]
   89676:	e007      	b.n	89688 <_vfiprintf_r+0x310>
   89678:	f101 0c02 	add.w	ip, r1, #2
   8967c:	4601      	mov	r1, r0
   8967e:	f10e 0e08 	add.w	lr, lr, #8
   89682:	3d10      	subs	r5, #16
   89684:	2d10      	cmp	r5, #16
   89686:	dd11      	ble.n	896ac <_vfiprintf_r+0x334>
   89688:	1c48      	adds	r0, r1, #1
   8968a:	3210      	adds	r2, #16
   8968c:	2807      	cmp	r0, #7
   8968e:	9211      	str	r2, [sp, #68]	; 0x44
   89690:	e88e 00c0 	stmia.w	lr, {r6, r7}
   89694:	9010      	str	r0, [sp, #64]	; 0x40
   89696:	ddef      	ble.n	89678 <_vfiprintf_r+0x300>
   89698:	2a00      	cmp	r2, #0
   8969a:	f040 81d9 	bne.w	89a50 <_vfiprintf_r+0x6d8>
   8969e:	3d10      	subs	r5, #16
   896a0:	2d10      	cmp	r5, #16
   896a2:	4611      	mov	r1, r2
   896a4:	f04f 0c01 	mov.w	ip, #1
   896a8:	46d6      	mov	lr, sl
   896aa:	dced      	bgt.n	89688 <_vfiprintf_r+0x310>
   896ac:	464c      	mov	r4, r9
   896ae:	4661      	mov	r1, ip
   896b0:	46f1      	mov	r9, lr
   896b2:	442a      	add	r2, r5
   896b4:	2907      	cmp	r1, #7
   896b6:	9211      	str	r2, [sp, #68]	; 0x44
   896b8:	f8c9 6000 	str.w	r6, [r9]
   896bc:	f8c9 5004 	str.w	r5, [r9, #4]
   896c0:	9110      	str	r1, [sp, #64]	; 0x40
   896c2:	f300 82eb 	bgt.w	89c9c <_vfiprintf_r+0x924>
   896c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   896ca:	f109 0908 	add.w	r9, r9, #8
   896ce:	1c48      	adds	r0, r1, #1
   896d0:	2d00      	cmp	r5, #0
   896d2:	f040 81dc 	bne.w	89a8e <_vfiprintf_r+0x716>
   896d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   896d8:	2b00      	cmp	r3, #0
   896da:	f000 81f6 	beq.w	89aca <_vfiprintf_r+0x752>
   896de:	2102      	movs	r1, #2
   896e0:	ab0e      	add	r3, sp, #56	; 0x38
   896e2:	440a      	add	r2, r1
   896e4:	2807      	cmp	r0, #7
   896e6:	9211      	str	r2, [sp, #68]	; 0x44
   896e8:	9010      	str	r0, [sp, #64]	; 0x40
   896ea:	f8c9 1004 	str.w	r1, [r9, #4]
   896ee:	f8c9 3000 	str.w	r3, [r9]
   896f2:	f340 81e6 	ble.w	89ac2 <_vfiprintf_r+0x74a>
   896f6:	2a00      	cmp	r2, #0
   896f8:	f040 8395 	bne.w	89e26 <_vfiprintf_r+0xaae>
   896fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   896fe:	2001      	movs	r0, #1
   89700:	2b80      	cmp	r3, #128	; 0x80
   89702:	4611      	mov	r1, r2
   89704:	46d1      	mov	r9, sl
   89706:	f040 81e4 	bne.w	89ad2 <_vfiprintf_r+0x75a>
   8970a:	9b08      	ldr	r3, [sp, #32]
   8970c:	9d01      	ldr	r5, [sp, #4]
   8970e:	1b5e      	subs	r6, r3, r5
   89710:	2e00      	cmp	r6, #0
   89712:	f340 81de 	ble.w	89ad2 <_vfiprintf_r+0x75a>
   89716:	2e10      	cmp	r6, #16
   89718:	f340 843c 	ble.w	89f94 <_vfiprintf_r+0xc1c>
   8971c:	46cc      	mov	ip, r9
   8971e:	2710      	movs	r7, #16
   89720:	46a1      	mov	r9, r4
   89722:	4d9a      	ldr	r5, [pc, #616]	; (8998c <_vfiprintf_r+0x614>)
   89724:	9c06      	ldr	r4, [sp, #24]
   89726:	e007      	b.n	89738 <_vfiprintf_r+0x3c0>
   89728:	f101 0e02 	add.w	lr, r1, #2
   8972c:	4601      	mov	r1, r0
   8972e:	f10c 0c08 	add.w	ip, ip, #8
   89732:	3e10      	subs	r6, #16
   89734:	2e10      	cmp	r6, #16
   89736:	dd11      	ble.n	8975c <_vfiprintf_r+0x3e4>
   89738:	1c48      	adds	r0, r1, #1
   8973a:	3210      	adds	r2, #16
   8973c:	2807      	cmp	r0, #7
   8973e:	9211      	str	r2, [sp, #68]	; 0x44
   89740:	e88c 00a0 	stmia.w	ip, {r5, r7}
   89744:	9010      	str	r0, [sp, #64]	; 0x40
   89746:	ddef      	ble.n	89728 <_vfiprintf_r+0x3b0>
   89748:	2a00      	cmp	r2, #0
   8974a:	f040 829b 	bne.w	89c84 <_vfiprintf_r+0x90c>
   8974e:	3e10      	subs	r6, #16
   89750:	2e10      	cmp	r6, #16
   89752:	f04f 0e01 	mov.w	lr, #1
   89756:	4611      	mov	r1, r2
   89758:	46d4      	mov	ip, sl
   8975a:	dced      	bgt.n	89738 <_vfiprintf_r+0x3c0>
   8975c:	464c      	mov	r4, r9
   8975e:	46e1      	mov	r9, ip
   89760:	4432      	add	r2, r6
   89762:	f1be 0f07 	cmp.w	lr, #7
   89766:	9211      	str	r2, [sp, #68]	; 0x44
   89768:	e889 0060 	stmia.w	r9, {r5, r6}
   8976c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   89770:	f300 8366 	bgt.w	89e40 <_vfiprintf_r+0xac8>
   89774:	f109 0908 	add.w	r9, r9, #8
   89778:	f10e 0001 	add.w	r0, lr, #1
   8977c:	4671      	mov	r1, lr
   8977e:	e1a8      	b.n	89ad2 <_vfiprintf_r+0x75a>
   89780:	9508      	str	r5, [sp, #32]
   89782:	f013 0220 	ands.w	r2, r3, #32
   89786:	f040 8389 	bne.w	89e9c <_vfiprintf_r+0xb24>
   8978a:	f013 0110 	ands.w	r1, r3, #16
   8978e:	f040 8319 	bne.w	89dc4 <_vfiprintf_r+0xa4c>
   89792:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   89796:	f000 8315 	beq.w	89dc4 <_vfiprintf_r+0xa4c>
   8979a:	9807      	ldr	r0, [sp, #28]
   8979c:	460a      	mov	r2, r1
   8979e:	4601      	mov	r1, r0
   897a0:	3104      	adds	r1, #4
   897a2:	8806      	ldrh	r6, [r0, #0]
   897a4:	2700      	movs	r7, #0
   897a6:	9107      	str	r1, [sp, #28]
   897a8:	e71f      	b.n	895ea <_vfiprintf_r+0x272>
   897aa:	9508      	str	r5, [sp, #32]
   897ac:	f043 0310 	orr.w	r3, r3, #16
   897b0:	e7e7      	b.n	89782 <_vfiprintf_r+0x40a>
   897b2:	9508      	str	r5, [sp, #32]
   897b4:	f043 0310 	orr.w	r3, r3, #16
   897b8:	e707      	b.n	895ca <_vfiprintf_r+0x252>
   897ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   897be:	f898 2000 	ldrb.w	r2, [r8]
   897c2:	e64b      	b.n	8945c <_vfiprintf_r+0xe4>
   897c4:	2500      	movs	r5, #0
   897c6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   897ca:	f818 2b01 	ldrb.w	r2, [r8], #1
   897ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   897d2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   897d6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   897da:	2909      	cmp	r1, #9
   897dc:	d9f5      	bls.n	897ca <_vfiprintf_r+0x452>
   897de:	e63f      	b.n	89460 <_vfiprintf_r+0xe8>
   897e0:	9508      	str	r5, [sp, #32]
   897e2:	2800      	cmp	r0, #0
   897e4:	f040 8402 	bne.w	89fec <_vfiprintf_r+0xc74>
   897e8:	f043 0310 	orr.w	r3, r3, #16
   897ec:	069e      	lsls	r6, r3, #26
   897ee:	f100 833d 	bmi.w	89e6c <_vfiprintf_r+0xaf4>
   897f2:	9907      	ldr	r1, [sp, #28]
   897f4:	06dd      	lsls	r5, r3, #27
   897f6:	460a      	mov	r2, r1
   897f8:	f100 82f0 	bmi.w	89ddc <_vfiprintf_r+0xa64>
   897fc:	0658      	lsls	r0, r3, #25
   897fe:	f140 82ed 	bpl.w	89ddc <_vfiprintf_r+0xa64>
   89802:	f9b1 6000 	ldrsh.w	r6, [r1]
   89806:	3204      	adds	r2, #4
   89808:	17f7      	asrs	r7, r6, #31
   8980a:	4630      	mov	r0, r6
   8980c:	4639      	mov	r1, r7
   8980e:	9207      	str	r2, [sp, #28]
   89810:	2800      	cmp	r0, #0
   89812:	f171 0200 	sbcs.w	r2, r1, #0
   89816:	f2c0 835a 	blt.w	89ece <_vfiprintf_r+0xb56>
   8981a:	1c61      	adds	r1, r4, #1
   8981c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   89820:	f04f 0201 	mov.w	r2, #1
   89824:	f47f aee9 	bne.w	895fa <_vfiprintf_r+0x282>
   89828:	ea56 0107 	orrs.w	r1, r6, r7
   8982c:	f000 824b 	beq.w	89cc6 <_vfiprintf_r+0x94e>
   89830:	9302      	str	r3, [sp, #8]
   89832:	2a01      	cmp	r2, #1
   89834:	f000 828a 	beq.w	89d4c <_vfiprintf_r+0x9d4>
   89838:	2a02      	cmp	r2, #2
   8983a:	f040 825a 	bne.w	89cf2 <_vfiprintf_r+0x97a>
   8983e:	46d3      	mov	fp, sl
   89840:	980b      	ldr	r0, [sp, #44]	; 0x2c
   89842:	0933      	lsrs	r3, r6, #4
   89844:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   89848:	0939      	lsrs	r1, r7, #4
   8984a:	f006 020f 	and.w	r2, r6, #15
   8984e:	460f      	mov	r7, r1
   89850:	461e      	mov	r6, r3
   89852:	5c83      	ldrb	r3, [r0, r2]
   89854:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   89858:	ea56 0307 	orrs.w	r3, r6, r7
   8985c:	d1f1      	bne.n	89842 <_vfiprintf_r+0x4ca>
   8985e:	ebaa 030b 	sub.w	r3, sl, fp
   89862:	9305      	str	r3, [sp, #20]
   89864:	e6e0      	b.n	89628 <_vfiprintf_r+0x2b0>
   89866:	2800      	cmp	r0, #0
   89868:	f040 83bd 	bne.w	89fe6 <_vfiprintf_r+0xc6e>
   8986c:	0699      	lsls	r1, r3, #26
   8986e:	f100 8359 	bmi.w	89f24 <_vfiprintf_r+0xbac>
   89872:	06da      	lsls	r2, r3, #27
   89874:	f100 80e5 	bmi.w	89a42 <_vfiprintf_r+0x6ca>
   89878:	065b      	lsls	r3, r3, #25
   8987a:	f140 80e2 	bpl.w	89a42 <_vfiprintf_r+0x6ca>
   8987e:	9a07      	ldr	r2, [sp, #28]
   89880:	6813      	ldr	r3, [r2, #0]
   89882:	3204      	adds	r2, #4
   89884:	9207      	str	r2, [sp, #28]
   89886:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8988a:	801a      	strh	r2, [r3, #0]
   8988c:	e5b1      	b.n	893f2 <_vfiprintf_r+0x7a>
   8988e:	2278      	movs	r2, #120	; 0x78
   89890:	2130      	movs	r1, #48	; 0x30
   89892:	9508      	str	r5, [sp, #32]
   89894:	9d07      	ldr	r5, [sp, #28]
   89896:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8989a:	1d2a      	adds	r2, r5, #4
   8989c:	9207      	str	r2, [sp, #28]
   8989e:	4a3c      	ldr	r2, [pc, #240]	; (89990 <_vfiprintf_r+0x618>)
   898a0:	682e      	ldr	r6, [r5, #0]
   898a2:	920b      	str	r2, [sp, #44]	; 0x2c
   898a4:	f043 0302 	orr.w	r3, r3, #2
   898a8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   898ac:	2700      	movs	r7, #0
   898ae:	2202      	movs	r2, #2
   898b0:	e69b      	b.n	895ea <_vfiprintf_r+0x272>
   898b2:	9508      	str	r5, [sp, #32]
   898b4:	2800      	cmp	r0, #0
   898b6:	d099      	beq.n	897ec <_vfiprintf_r+0x474>
   898b8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   898bc:	e796      	b.n	897ec <_vfiprintf_r+0x474>
   898be:	f898 2000 	ldrb.w	r2, [r8]
   898c2:	2e00      	cmp	r6, #0
   898c4:	f47f adca 	bne.w	8945c <_vfiprintf_r+0xe4>
   898c8:	2001      	movs	r0, #1
   898ca:	2620      	movs	r6, #32
   898cc:	e5c6      	b.n	8945c <_vfiprintf_r+0xe4>
   898ce:	f043 0301 	orr.w	r3, r3, #1
   898d2:	f898 2000 	ldrb.w	r2, [r8]
   898d6:	e5c1      	b.n	8945c <_vfiprintf_r+0xe4>
   898d8:	9508      	str	r5, [sp, #32]
   898da:	2800      	cmp	r0, #0
   898dc:	f040 8380 	bne.w	89fe0 <_vfiprintf_r+0xc68>
   898e0:	492b      	ldr	r1, [pc, #172]	; (89990 <_vfiprintf_r+0x618>)
   898e2:	910b      	str	r1, [sp, #44]	; 0x2c
   898e4:	069f      	lsls	r7, r3, #26
   898e6:	f100 82e5 	bmi.w	89eb4 <_vfiprintf_r+0xb3c>
   898ea:	9807      	ldr	r0, [sp, #28]
   898ec:	06de      	lsls	r6, r3, #27
   898ee:	4601      	mov	r1, r0
   898f0:	f100 826f 	bmi.w	89dd2 <_vfiprintf_r+0xa5a>
   898f4:	065d      	lsls	r5, r3, #25
   898f6:	f140 826c 	bpl.w	89dd2 <_vfiprintf_r+0xa5a>
   898fa:	2700      	movs	r7, #0
   898fc:	3104      	adds	r1, #4
   898fe:	8806      	ldrh	r6, [r0, #0]
   89900:	9107      	str	r1, [sp, #28]
   89902:	07d8      	lsls	r0, r3, #31
   89904:	f140 8220 	bpl.w	89d48 <_vfiprintf_r+0x9d0>
   89908:	ea56 0107 	orrs.w	r1, r6, r7
   8990c:	f000 821c 	beq.w	89d48 <_vfiprintf_r+0x9d0>
   89910:	2130      	movs	r1, #48	; 0x30
   89912:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   89916:	f043 0302 	orr.w	r3, r3, #2
   8991a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8991e:	2202      	movs	r2, #2
   89920:	e663      	b.n	895ea <_vfiprintf_r+0x272>
   89922:	9508      	str	r5, [sp, #32]
   89924:	2800      	cmp	r0, #0
   89926:	f040 8355 	bne.w	89fd4 <_vfiprintf_r+0xc5c>
   8992a:	491a      	ldr	r1, [pc, #104]	; (89994 <_vfiprintf_r+0x61c>)
   8992c:	910b      	str	r1, [sp, #44]	; 0x2c
   8992e:	e7d9      	b.n	898e4 <_vfiprintf_r+0x56c>
   89930:	2201      	movs	r2, #1
   89932:	9807      	ldr	r0, [sp, #28]
   89934:	4611      	mov	r1, r2
   89936:	9201      	str	r2, [sp, #4]
   89938:	6802      	ldr	r2, [r0, #0]
   8993a:	f04f 0400 	mov.w	r4, #0
   8993e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   89942:	4602      	mov	r2, r0
   89944:	3204      	adds	r2, #4
   89946:	9508      	str	r5, [sp, #32]
   89948:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   8994c:	9105      	str	r1, [sp, #20]
   8994e:	9207      	str	r2, [sp, #28]
   89950:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   89954:	9302      	str	r3, [sp, #8]
   89956:	2400      	movs	r4, #0
   89958:	e66e      	b.n	89638 <_vfiprintf_r+0x2c0>
   8995a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8995e:	f898 2000 	ldrb.w	r2, [r8]
   89962:	e57b      	b.n	8945c <_vfiprintf_r+0xe4>
   89964:	f898 2000 	ldrb.w	r2, [r8]
   89968:	2a6c      	cmp	r2, #108	; 0x6c
   8996a:	bf03      	ittte	eq
   8996c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   89970:	f043 0320 	orreq.w	r3, r3, #32
   89974:	f108 0801 	addeq.w	r8, r8, #1
   89978:	f043 0310 	orrne.w	r3, r3, #16
   8997c:	e56e      	b.n	8945c <_vfiprintf_r+0xe4>
   8997e:	f898 2000 	ldrb.w	r2, [r8]
   89982:	2001      	movs	r0, #1
   89984:	262b      	movs	r6, #43	; 0x2b
   89986:	e569      	b.n	8945c <_vfiprintf_r+0xe4>
   89988:	0008dda0 	.word	0x0008dda0
   8998c:	0008ddb0 	.word	0x0008ddb0
   89990:	0008dd60 	.word	0x0008dd60
   89994:	0008dd4c 	.word	0x0008dd4c
   89998:	f04f 0200 	mov.w	r2, #0
   8999c:	9907      	ldr	r1, [sp, #28]
   8999e:	9508      	str	r5, [sp, #32]
   899a0:	f8d1 b000 	ldr.w	fp, [r1]
   899a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   899a8:	1d0d      	adds	r5, r1, #4
   899aa:	f1bb 0f00 	cmp.w	fp, #0
   899ae:	f000 82e4 	beq.w	89f7a <_vfiprintf_r+0xc02>
   899b2:	1c67      	adds	r7, r4, #1
   899b4:	f000 82c3 	beq.w	89f3e <_vfiprintf_r+0xbc6>
   899b8:	4622      	mov	r2, r4
   899ba:	2100      	movs	r1, #0
   899bc:	4658      	mov	r0, fp
   899be:	9301      	str	r3, [sp, #4]
   899c0:	f002 fb8a 	bl	8c0d8 <memchr>
   899c4:	9b01      	ldr	r3, [sp, #4]
   899c6:	2800      	cmp	r0, #0
   899c8:	f000 82e8 	beq.w	89f9c <_vfiprintf_r+0xc24>
   899cc:	eba0 020b 	sub.w	r2, r0, fp
   899d0:	9507      	str	r5, [sp, #28]
   899d2:	9205      	str	r2, [sp, #20]
   899d4:	9302      	str	r3, [sp, #8]
   899d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   899da:	2400      	movs	r4, #0
   899dc:	e624      	b.n	89628 <_vfiprintf_r+0x2b0>
   899de:	f898 2000 	ldrb.w	r2, [r8]
   899e2:	f108 0701 	add.w	r7, r8, #1
   899e6:	2a2a      	cmp	r2, #42	; 0x2a
   899e8:	f000 82e9 	beq.w	89fbe <_vfiprintf_r+0xc46>
   899ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   899f0:	2909      	cmp	r1, #9
   899f2:	46b8      	mov	r8, r7
   899f4:	f04f 0400 	mov.w	r4, #0
   899f8:	f63f ad32 	bhi.w	89460 <_vfiprintf_r+0xe8>
   899fc:	f818 2b01 	ldrb.w	r2, [r8], #1
   89a00:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   89a04:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   89a08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   89a0c:	2909      	cmp	r1, #9
   89a0e:	d9f5      	bls.n	899fc <_vfiprintf_r+0x684>
   89a10:	e526      	b.n	89460 <_vfiprintf_r+0xe8>
   89a12:	f043 0320 	orr.w	r3, r3, #32
   89a16:	f898 2000 	ldrb.w	r2, [r8]
   89a1a:	e51f      	b.n	8945c <_vfiprintf_r+0xe4>
   89a1c:	9508      	str	r5, [sp, #32]
   89a1e:	2800      	cmp	r0, #0
   89a20:	f040 82db 	bne.w	89fda <_vfiprintf_r+0xc62>
   89a24:	2a00      	cmp	r2, #0
   89a26:	f000 80f1 	beq.w	89c0c <_vfiprintf_r+0x894>
   89a2a:	2101      	movs	r1, #1
   89a2c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   89a30:	f04f 0200 	mov.w	r2, #0
   89a34:	9101      	str	r1, [sp, #4]
   89a36:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   89a3a:	9105      	str	r1, [sp, #20]
   89a3c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   89a40:	e788      	b.n	89954 <_vfiprintf_r+0x5dc>
   89a42:	9a07      	ldr	r2, [sp, #28]
   89a44:	6813      	ldr	r3, [r2, #0]
   89a46:	3204      	adds	r2, #4
   89a48:	9207      	str	r2, [sp, #28]
   89a4a:	9a03      	ldr	r2, [sp, #12]
   89a4c:	601a      	str	r2, [r3, #0]
   89a4e:	e4d0      	b.n	893f2 <_vfiprintf_r+0x7a>
   89a50:	aa0f      	add	r2, sp, #60	; 0x3c
   89a52:	9904      	ldr	r1, [sp, #16]
   89a54:	4620      	mov	r0, r4
   89a56:	f7ff fc4f 	bl	892f8 <__sprint_r.part.0>
   89a5a:	2800      	cmp	r0, #0
   89a5c:	f040 8143 	bne.w	89ce6 <_vfiprintf_r+0x96e>
   89a60:	9910      	ldr	r1, [sp, #64]	; 0x40
   89a62:	46d6      	mov	lr, sl
   89a64:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89a66:	f101 0c01 	add.w	ip, r1, #1
   89a6a:	e60a      	b.n	89682 <_vfiprintf_r+0x30a>
   89a6c:	aa0f      	add	r2, sp, #60	; 0x3c
   89a6e:	9904      	ldr	r1, [sp, #16]
   89a70:	9806      	ldr	r0, [sp, #24]
   89a72:	f7ff fc41 	bl	892f8 <__sprint_r.part.0>
   89a76:	2800      	cmp	r0, #0
   89a78:	f040 8135 	bne.w	89ce6 <_vfiprintf_r+0x96e>
   89a7c:	46d1      	mov	r9, sl
   89a7e:	9910      	ldr	r1, [sp, #64]	; 0x40
   89a80:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   89a84:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89a86:	1c48      	adds	r0, r1, #1
   89a88:	2d00      	cmp	r5, #0
   89a8a:	f43f ae24 	beq.w	896d6 <_vfiprintf_r+0x35e>
   89a8e:	2101      	movs	r1, #1
   89a90:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   89a94:	440a      	add	r2, r1
   89a96:	2807      	cmp	r0, #7
   89a98:	9211      	str	r2, [sp, #68]	; 0x44
   89a9a:	9010      	str	r0, [sp, #64]	; 0x40
   89a9c:	f8c9 1004 	str.w	r1, [r9, #4]
   89aa0:	f8c9 5000 	str.w	r5, [r9]
   89aa4:	f340 8109 	ble.w	89cba <_vfiprintf_r+0x942>
   89aa8:	2a00      	cmp	r2, #0
   89aaa:	f040 81af 	bne.w	89e0c <_vfiprintf_r+0xa94>
   89aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89ab0:	2b00      	cmp	r3, #0
   89ab2:	f43f ae23 	beq.w	896fc <_vfiprintf_r+0x384>
   89ab6:	2202      	movs	r2, #2
   89ab8:	4608      	mov	r0, r1
   89aba:	46d1      	mov	r9, sl
   89abc:	ab0e      	add	r3, sp, #56	; 0x38
   89abe:	921d      	str	r2, [sp, #116]	; 0x74
   89ac0:	931c      	str	r3, [sp, #112]	; 0x70
   89ac2:	4601      	mov	r1, r0
   89ac4:	f109 0908 	add.w	r9, r9, #8
   89ac8:	3001      	adds	r0, #1
   89aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89acc:	2b80      	cmp	r3, #128	; 0x80
   89ace:	f43f ae1c 	beq.w	8970a <_vfiprintf_r+0x392>
   89ad2:	9b05      	ldr	r3, [sp, #20]
   89ad4:	1ae4      	subs	r4, r4, r3
   89ad6:	2c00      	cmp	r4, #0
   89ad8:	dd2f      	ble.n	89b3a <_vfiprintf_r+0x7c2>
   89ada:	2c10      	cmp	r4, #16
   89adc:	f340 8220 	ble.w	89f20 <_vfiprintf_r+0xba8>
   89ae0:	46ce      	mov	lr, r9
   89ae2:	2610      	movs	r6, #16
   89ae4:	4db2      	ldr	r5, [pc, #712]	; (89db0 <_vfiprintf_r+0xa38>)
   89ae6:	9f06      	ldr	r7, [sp, #24]
   89ae8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   89aec:	e006      	b.n	89afc <_vfiprintf_r+0x784>
   89aee:	1c88      	adds	r0, r1, #2
   89af0:	4619      	mov	r1, r3
   89af2:	f10e 0e08 	add.w	lr, lr, #8
   89af6:	3c10      	subs	r4, #16
   89af8:	2c10      	cmp	r4, #16
   89afa:	dd10      	ble.n	89b1e <_vfiprintf_r+0x7a6>
   89afc:	1c4b      	adds	r3, r1, #1
   89afe:	3210      	adds	r2, #16
   89b00:	2b07      	cmp	r3, #7
   89b02:	9211      	str	r2, [sp, #68]	; 0x44
   89b04:	e88e 0060 	stmia.w	lr, {r5, r6}
   89b08:	9310      	str	r3, [sp, #64]	; 0x40
   89b0a:	ddf0      	ble.n	89aee <_vfiprintf_r+0x776>
   89b0c:	2a00      	cmp	r2, #0
   89b0e:	d165      	bne.n	89bdc <_vfiprintf_r+0x864>
   89b10:	3c10      	subs	r4, #16
   89b12:	2c10      	cmp	r4, #16
   89b14:	f04f 0001 	mov.w	r0, #1
   89b18:	4611      	mov	r1, r2
   89b1a:	46d6      	mov	lr, sl
   89b1c:	dcee      	bgt.n	89afc <_vfiprintf_r+0x784>
   89b1e:	46f1      	mov	r9, lr
   89b20:	4422      	add	r2, r4
   89b22:	2807      	cmp	r0, #7
   89b24:	9211      	str	r2, [sp, #68]	; 0x44
   89b26:	f8c9 5000 	str.w	r5, [r9]
   89b2a:	f8c9 4004 	str.w	r4, [r9, #4]
   89b2e:	9010      	str	r0, [sp, #64]	; 0x40
   89b30:	f300 8085 	bgt.w	89c3e <_vfiprintf_r+0x8c6>
   89b34:	f109 0908 	add.w	r9, r9, #8
   89b38:	3001      	adds	r0, #1
   89b3a:	9905      	ldr	r1, [sp, #20]
   89b3c:	2807      	cmp	r0, #7
   89b3e:	440a      	add	r2, r1
   89b40:	9211      	str	r2, [sp, #68]	; 0x44
   89b42:	f8c9 b000 	str.w	fp, [r9]
   89b46:	f8c9 1004 	str.w	r1, [r9, #4]
   89b4a:	9010      	str	r0, [sp, #64]	; 0x40
   89b4c:	f340 8082 	ble.w	89c54 <_vfiprintf_r+0x8dc>
   89b50:	2a00      	cmp	r2, #0
   89b52:	f040 8118 	bne.w	89d86 <_vfiprintf_r+0xa0e>
   89b56:	9b02      	ldr	r3, [sp, #8]
   89b58:	9210      	str	r2, [sp, #64]	; 0x40
   89b5a:	0758      	lsls	r0, r3, #29
   89b5c:	d535      	bpl.n	89bca <_vfiprintf_r+0x852>
   89b5e:	9b08      	ldr	r3, [sp, #32]
   89b60:	9901      	ldr	r1, [sp, #4]
   89b62:	1a5c      	subs	r4, r3, r1
   89b64:	2c00      	cmp	r4, #0
   89b66:	f340 80e7 	ble.w	89d38 <_vfiprintf_r+0x9c0>
   89b6a:	46d1      	mov	r9, sl
   89b6c:	2c10      	cmp	r4, #16
   89b6e:	f340 820d 	ble.w	89f8c <_vfiprintf_r+0xc14>
   89b72:	2510      	movs	r5, #16
   89b74:	9910      	ldr	r1, [sp, #64]	; 0x40
   89b76:	4e8f      	ldr	r6, [pc, #572]	; (89db4 <_vfiprintf_r+0xa3c>)
   89b78:	9f06      	ldr	r7, [sp, #24]
   89b7a:	f8dd b010 	ldr.w	fp, [sp, #16]
   89b7e:	e006      	b.n	89b8e <_vfiprintf_r+0x816>
   89b80:	1c88      	adds	r0, r1, #2
   89b82:	4619      	mov	r1, r3
   89b84:	f109 0908 	add.w	r9, r9, #8
   89b88:	3c10      	subs	r4, #16
   89b8a:	2c10      	cmp	r4, #16
   89b8c:	dd11      	ble.n	89bb2 <_vfiprintf_r+0x83a>
   89b8e:	1c4b      	adds	r3, r1, #1
   89b90:	3210      	adds	r2, #16
   89b92:	2b07      	cmp	r3, #7
   89b94:	9211      	str	r2, [sp, #68]	; 0x44
   89b96:	f8c9 6000 	str.w	r6, [r9]
   89b9a:	f8c9 5004 	str.w	r5, [r9, #4]
   89b9e:	9310      	str	r3, [sp, #64]	; 0x40
   89ba0:	ddee      	ble.n	89b80 <_vfiprintf_r+0x808>
   89ba2:	bb42      	cbnz	r2, 89bf6 <_vfiprintf_r+0x87e>
   89ba4:	3c10      	subs	r4, #16
   89ba6:	2c10      	cmp	r4, #16
   89ba8:	f04f 0001 	mov.w	r0, #1
   89bac:	4611      	mov	r1, r2
   89bae:	46d1      	mov	r9, sl
   89bb0:	dced      	bgt.n	89b8e <_vfiprintf_r+0x816>
   89bb2:	4422      	add	r2, r4
   89bb4:	2807      	cmp	r0, #7
   89bb6:	9211      	str	r2, [sp, #68]	; 0x44
   89bb8:	f8c9 6000 	str.w	r6, [r9]
   89bbc:	f8c9 4004 	str.w	r4, [r9, #4]
   89bc0:	9010      	str	r0, [sp, #64]	; 0x40
   89bc2:	dd51      	ble.n	89c68 <_vfiprintf_r+0x8f0>
   89bc4:	2a00      	cmp	r2, #0
   89bc6:	f040 819a 	bne.w	89efe <_vfiprintf_r+0xb86>
   89bca:	9b03      	ldr	r3, [sp, #12]
   89bcc:	9a08      	ldr	r2, [sp, #32]
   89bce:	9901      	ldr	r1, [sp, #4]
   89bd0:	428a      	cmp	r2, r1
   89bd2:	bfac      	ite	ge
   89bd4:	189b      	addge	r3, r3, r2
   89bd6:	185b      	addlt	r3, r3, r1
   89bd8:	9303      	str	r3, [sp, #12]
   89bda:	e04e      	b.n	89c7a <_vfiprintf_r+0x902>
   89bdc:	aa0f      	add	r2, sp, #60	; 0x3c
   89bde:	4649      	mov	r1, r9
   89be0:	4638      	mov	r0, r7
   89be2:	f7ff fb89 	bl	892f8 <__sprint_r.part.0>
   89be6:	2800      	cmp	r0, #0
   89be8:	f040 813e 	bne.w	89e68 <_vfiprintf_r+0xaf0>
   89bec:	9910      	ldr	r1, [sp, #64]	; 0x40
   89bee:	46d6      	mov	lr, sl
   89bf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89bf2:	1c48      	adds	r0, r1, #1
   89bf4:	e77f      	b.n	89af6 <_vfiprintf_r+0x77e>
   89bf6:	aa0f      	add	r2, sp, #60	; 0x3c
   89bf8:	4659      	mov	r1, fp
   89bfa:	4638      	mov	r0, r7
   89bfc:	f7ff fb7c 	bl	892f8 <__sprint_r.part.0>
   89c00:	b960      	cbnz	r0, 89c1c <_vfiprintf_r+0x8a4>
   89c02:	9910      	ldr	r1, [sp, #64]	; 0x40
   89c04:	46d1      	mov	r9, sl
   89c06:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89c08:	1c48      	adds	r0, r1, #1
   89c0a:	e7bd      	b.n	89b88 <_vfiprintf_r+0x810>
   89c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   89c0e:	f8dd b010 	ldr.w	fp, [sp, #16]
   89c12:	2b00      	cmp	r3, #0
   89c14:	f040 81ca 	bne.w	89fac <_vfiprintf_r+0xc34>
   89c18:	2300      	movs	r3, #0
   89c1a:	9310      	str	r3, [sp, #64]	; 0x40
   89c1c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   89c20:	f013 0f01 	tst.w	r3, #1
   89c24:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   89c28:	d102      	bne.n	89c30 <_vfiprintf_r+0x8b8>
   89c2a:	059a      	lsls	r2, r3, #22
   89c2c:	f140 80dd 	bpl.w	89dea <_vfiprintf_r+0xa72>
   89c30:	065b      	lsls	r3, r3, #25
   89c32:	f53f acad 	bmi.w	89590 <_vfiprintf_r+0x218>
   89c36:	9803      	ldr	r0, [sp, #12]
   89c38:	b02d      	add	sp, #180	; 0xb4
   89c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89c3e:	2a00      	cmp	r2, #0
   89c40:	f040 8105 	bne.w	89e4e <_vfiprintf_r+0xad6>
   89c44:	2301      	movs	r3, #1
   89c46:	46d1      	mov	r9, sl
   89c48:	9a05      	ldr	r2, [sp, #20]
   89c4a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   89c4e:	921d      	str	r2, [sp, #116]	; 0x74
   89c50:	9211      	str	r2, [sp, #68]	; 0x44
   89c52:	9310      	str	r3, [sp, #64]	; 0x40
   89c54:	f109 0908 	add.w	r9, r9, #8
   89c58:	9b02      	ldr	r3, [sp, #8]
   89c5a:	0759      	lsls	r1, r3, #29
   89c5c:	d504      	bpl.n	89c68 <_vfiprintf_r+0x8f0>
   89c5e:	9b08      	ldr	r3, [sp, #32]
   89c60:	9901      	ldr	r1, [sp, #4]
   89c62:	1a5c      	subs	r4, r3, r1
   89c64:	2c00      	cmp	r4, #0
   89c66:	dc81      	bgt.n	89b6c <_vfiprintf_r+0x7f4>
   89c68:	9b03      	ldr	r3, [sp, #12]
   89c6a:	9908      	ldr	r1, [sp, #32]
   89c6c:	9801      	ldr	r0, [sp, #4]
   89c6e:	4281      	cmp	r1, r0
   89c70:	bfac      	ite	ge
   89c72:	185b      	addge	r3, r3, r1
   89c74:	181b      	addlt	r3, r3, r0
   89c76:	9303      	str	r3, [sp, #12]
   89c78:	bb72      	cbnz	r2, 89cd8 <_vfiprintf_r+0x960>
   89c7a:	2300      	movs	r3, #0
   89c7c:	46d1      	mov	r9, sl
   89c7e:	9310      	str	r3, [sp, #64]	; 0x40
   89c80:	f7ff bbb7 	b.w	893f2 <_vfiprintf_r+0x7a>
   89c84:	aa0f      	add	r2, sp, #60	; 0x3c
   89c86:	9904      	ldr	r1, [sp, #16]
   89c88:	4620      	mov	r0, r4
   89c8a:	f7ff fb35 	bl	892f8 <__sprint_r.part.0>
   89c8e:	bb50      	cbnz	r0, 89ce6 <_vfiprintf_r+0x96e>
   89c90:	9910      	ldr	r1, [sp, #64]	; 0x40
   89c92:	46d4      	mov	ip, sl
   89c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89c96:	f101 0e01 	add.w	lr, r1, #1
   89c9a:	e54a      	b.n	89732 <_vfiprintf_r+0x3ba>
   89c9c:	2a00      	cmp	r2, #0
   89c9e:	f47f aee5 	bne.w	89a6c <_vfiprintf_r+0x6f4>
   89ca2:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   89ca6:	2900      	cmp	r1, #0
   89ca8:	f000 811a 	beq.w	89ee0 <_vfiprintf_r+0xb68>
   89cac:	2201      	movs	r2, #1
   89cae:	46d1      	mov	r9, sl
   89cb0:	4610      	mov	r0, r2
   89cb2:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   89cb6:	921d      	str	r2, [sp, #116]	; 0x74
   89cb8:	911c      	str	r1, [sp, #112]	; 0x70
   89cba:	4601      	mov	r1, r0
   89cbc:	f109 0908 	add.w	r9, r9, #8
   89cc0:	3001      	adds	r0, #1
   89cc2:	e508      	b.n	896d6 <_vfiprintf_r+0x35e>
   89cc4:	9b02      	ldr	r3, [sp, #8]
   89cc6:	2a01      	cmp	r2, #1
   89cc8:	f000 8097 	beq.w	89dfa <_vfiprintf_r+0xa82>
   89ccc:	2a02      	cmp	r2, #2
   89cce:	d10d      	bne.n	89cec <_vfiprintf_r+0x974>
   89cd0:	9302      	str	r3, [sp, #8]
   89cd2:	2600      	movs	r6, #0
   89cd4:	2700      	movs	r7, #0
   89cd6:	e5b2      	b.n	8983e <_vfiprintf_r+0x4c6>
   89cd8:	aa0f      	add	r2, sp, #60	; 0x3c
   89cda:	9904      	ldr	r1, [sp, #16]
   89cdc:	9806      	ldr	r0, [sp, #24]
   89cde:	f7ff fb0b 	bl	892f8 <__sprint_r.part.0>
   89ce2:	2800      	cmp	r0, #0
   89ce4:	d0c9      	beq.n	89c7a <_vfiprintf_r+0x902>
   89ce6:	f8dd b010 	ldr.w	fp, [sp, #16]
   89cea:	e797      	b.n	89c1c <_vfiprintf_r+0x8a4>
   89cec:	2600      	movs	r6, #0
   89cee:	2700      	movs	r7, #0
   89cf0:	9302      	str	r3, [sp, #8]
   89cf2:	4651      	mov	r1, sl
   89cf4:	e000      	b.n	89cf8 <_vfiprintf_r+0x980>
   89cf6:	4659      	mov	r1, fp
   89cf8:	08f2      	lsrs	r2, r6, #3
   89cfa:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   89cfe:	08f8      	lsrs	r0, r7, #3
   89d00:	f006 0307 	and.w	r3, r6, #7
   89d04:	4607      	mov	r7, r0
   89d06:	4616      	mov	r6, r2
   89d08:	3330      	adds	r3, #48	; 0x30
   89d0a:	ea56 0207 	orrs.w	r2, r6, r7
   89d0e:	f801 3c01 	strb.w	r3, [r1, #-1]
   89d12:	f101 3bff 	add.w	fp, r1, #4294967295
   89d16:	d1ee      	bne.n	89cf6 <_vfiprintf_r+0x97e>
   89d18:	9a02      	ldr	r2, [sp, #8]
   89d1a:	07d6      	lsls	r6, r2, #31
   89d1c:	f57f ad9f 	bpl.w	8985e <_vfiprintf_r+0x4e6>
   89d20:	2b30      	cmp	r3, #48	; 0x30
   89d22:	f43f ad9c 	beq.w	8985e <_vfiprintf_r+0x4e6>
   89d26:	2330      	movs	r3, #48	; 0x30
   89d28:	3902      	subs	r1, #2
   89d2a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   89d2e:	ebaa 0301 	sub.w	r3, sl, r1
   89d32:	9305      	str	r3, [sp, #20]
   89d34:	468b      	mov	fp, r1
   89d36:	e477      	b.n	89628 <_vfiprintf_r+0x2b0>
   89d38:	9b03      	ldr	r3, [sp, #12]
   89d3a:	9a08      	ldr	r2, [sp, #32]
   89d3c:	428a      	cmp	r2, r1
   89d3e:	bfac      	ite	ge
   89d40:	189b      	addge	r3, r3, r2
   89d42:	185b      	addlt	r3, r3, r1
   89d44:	9303      	str	r3, [sp, #12]
   89d46:	e798      	b.n	89c7a <_vfiprintf_r+0x902>
   89d48:	2202      	movs	r2, #2
   89d4a:	e44e      	b.n	895ea <_vfiprintf_r+0x272>
   89d4c:	2f00      	cmp	r7, #0
   89d4e:	bf08      	it	eq
   89d50:	2e0a      	cmpeq	r6, #10
   89d52:	d351      	bcc.n	89df8 <_vfiprintf_r+0xa80>
   89d54:	46d3      	mov	fp, sl
   89d56:	4630      	mov	r0, r6
   89d58:	4639      	mov	r1, r7
   89d5a:	220a      	movs	r2, #10
   89d5c:	2300      	movs	r3, #0
   89d5e:	f7fd fccd 	bl	876fc <__aeabi_uldivmod>
   89d62:	3230      	adds	r2, #48	; 0x30
   89d64:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   89d68:	4630      	mov	r0, r6
   89d6a:	4639      	mov	r1, r7
   89d6c:	2300      	movs	r3, #0
   89d6e:	220a      	movs	r2, #10
   89d70:	f7fd fcc4 	bl	876fc <__aeabi_uldivmod>
   89d74:	4606      	mov	r6, r0
   89d76:	460f      	mov	r7, r1
   89d78:	ea56 0307 	orrs.w	r3, r6, r7
   89d7c:	d1eb      	bne.n	89d56 <_vfiprintf_r+0x9de>
   89d7e:	e56e      	b.n	8985e <_vfiprintf_r+0x4e6>
   89d80:	9405      	str	r4, [sp, #20]
   89d82:	46d3      	mov	fp, sl
   89d84:	e450      	b.n	89628 <_vfiprintf_r+0x2b0>
   89d86:	aa0f      	add	r2, sp, #60	; 0x3c
   89d88:	9904      	ldr	r1, [sp, #16]
   89d8a:	9806      	ldr	r0, [sp, #24]
   89d8c:	f7ff fab4 	bl	892f8 <__sprint_r.part.0>
   89d90:	2800      	cmp	r0, #0
   89d92:	d1a8      	bne.n	89ce6 <_vfiprintf_r+0x96e>
   89d94:	46d1      	mov	r9, sl
   89d96:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89d98:	e75e      	b.n	89c58 <_vfiprintf_r+0x8e0>
   89d9a:	aa0f      	add	r2, sp, #60	; 0x3c
   89d9c:	9904      	ldr	r1, [sp, #16]
   89d9e:	9806      	ldr	r0, [sp, #24]
   89da0:	f7ff faaa 	bl	892f8 <__sprint_r.part.0>
   89da4:	2800      	cmp	r0, #0
   89da6:	d19e      	bne.n	89ce6 <_vfiprintf_r+0x96e>
   89da8:	46d1      	mov	r9, sl
   89daa:	f7ff bbbb 	b.w	89524 <_vfiprintf_r+0x1ac>
   89dae:	bf00      	nop
   89db0:	0008ddb0 	.word	0x0008ddb0
   89db4:	0008dda0 	.word	0x0008dda0
   89db8:	3104      	adds	r1, #4
   89dba:	6816      	ldr	r6, [r2, #0]
   89dbc:	2700      	movs	r7, #0
   89dbe:	2201      	movs	r2, #1
   89dc0:	9107      	str	r1, [sp, #28]
   89dc2:	e412      	b.n	895ea <_vfiprintf_r+0x272>
   89dc4:	9807      	ldr	r0, [sp, #28]
   89dc6:	2700      	movs	r7, #0
   89dc8:	4601      	mov	r1, r0
   89dca:	3104      	adds	r1, #4
   89dcc:	6806      	ldr	r6, [r0, #0]
   89dce:	9107      	str	r1, [sp, #28]
   89dd0:	e40b      	b.n	895ea <_vfiprintf_r+0x272>
   89dd2:	680e      	ldr	r6, [r1, #0]
   89dd4:	3104      	adds	r1, #4
   89dd6:	9107      	str	r1, [sp, #28]
   89dd8:	2700      	movs	r7, #0
   89dda:	e592      	b.n	89902 <_vfiprintf_r+0x58a>
   89ddc:	6816      	ldr	r6, [r2, #0]
   89dde:	3204      	adds	r2, #4
   89de0:	17f7      	asrs	r7, r6, #31
   89de2:	9207      	str	r2, [sp, #28]
   89de4:	4630      	mov	r0, r6
   89de6:	4639      	mov	r1, r7
   89de8:	e512      	b.n	89810 <_vfiprintf_r+0x498>
   89dea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   89dee:	f001 fe39 	bl	8ba64 <__retarget_lock_release_recursive>
   89df2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   89df6:	e71b      	b.n	89c30 <_vfiprintf_r+0x8b8>
   89df8:	9b02      	ldr	r3, [sp, #8]
   89dfa:	9302      	str	r3, [sp, #8]
   89dfc:	2301      	movs	r3, #1
   89dfe:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   89e02:	3630      	adds	r6, #48	; 0x30
   89e04:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   89e08:	9305      	str	r3, [sp, #20]
   89e0a:	e40d      	b.n	89628 <_vfiprintf_r+0x2b0>
   89e0c:	aa0f      	add	r2, sp, #60	; 0x3c
   89e0e:	9904      	ldr	r1, [sp, #16]
   89e10:	9806      	ldr	r0, [sp, #24]
   89e12:	f7ff fa71 	bl	892f8 <__sprint_r.part.0>
   89e16:	2800      	cmp	r0, #0
   89e18:	f47f af65 	bne.w	89ce6 <_vfiprintf_r+0x96e>
   89e1c:	9910      	ldr	r1, [sp, #64]	; 0x40
   89e1e:	46d1      	mov	r9, sl
   89e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89e22:	1c48      	adds	r0, r1, #1
   89e24:	e457      	b.n	896d6 <_vfiprintf_r+0x35e>
   89e26:	aa0f      	add	r2, sp, #60	; 0x3c
   89e28:	9904      	ldr	r1, [sp, #16]
   89e2a:	9806      	ldr	r0, [sp, #24]
   89e2c:	f7ff fa64 	bl	892f8 <__sprint_r.part.0>
   89e30:	2800      	cmp	r0, #0
   89e32:	f47f af58 	bne.w	89ce6 <_vfiprintf_r+0x96e>
   89e36:	9910      	ldr	r1, [sp, #64]	; 0x40
   89e38:	46d1      	mov	r9, sl
   89e3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89e3c:	1c48      	adds	r0, r1, #1
   89e3e:	e644      	b.n	89aca <_vfiprintf_r+0x752>
   89e40:	2a00      	cmp	r2, #0
   89e42:	f040 8087 	bne.w	89f54 <_vfiprintf_r+0xbdc>
   89e46:	2001      	movs	r0, #1
   89e48:	4611      	mov	r1, r2
   89e4a:	46d1      	mov	r9, sl
   89e4c:	e641      	b.n	89ad2 <_vfiprintf_r+0x75a>
   89e4e:	aa0f      	add	r2, sp, #60	; 0x3c
   89e50:	9904      	ldr	r1, [sp, #16]
   89e52:	9806      	ldr	r0, [sp, #24]
   89e54:	f7ff fa50 	bl	892f8 <__sprint_r.part.0>
   89e58:	2800      	cmp	r0, #0
   89e5a:	f47f af44 	bne.w	89ce6 <_vfiprintf_r+0x96e>
   89e5e:	9810      	ldr	r0, [sp, #64]	; 0x40
   89e60:	46d1      	mov	r9, sl
   89e62:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89e64:	3001      	adds	r0, #1
   89e66:	e668      	b.n	89b3a <_vfiprintf_r+0x7c2>
   89e68:	46cb      	mov	fp, r9
   89e6a:	e6d7      	b.n	89c1c <_vfiprintf_r+0x8a4>
   89e6c:	9d07      	ldr	r5, [sp, #28]
   89e6e:	3507      	adds	r5, #7
   89e70:	f025 0507 	bic.w	r5, r5, #7
   89e74:	f105 0208 	add.w	r2, r5, #8
   89e78:	e9d5 0100 	ldrd	r0, r1, [r5]
   89e7c:	9207      	str	r2, [sp, #28]
   89e7e:	4606      	mov	r6, r0
   89e80:	460f      	mov	r7, r1
   89e82:	e4c5      	b.n	89810 <_vfiprintf_r+0x498>
   89e84:	9d07      	ldr	r5, [sp, #28]
   89e86:	3507      	adds	r5, #7
   89e88:	f025 0207 	bic.w	r2, r5, #7
   89e8c:	f102 0108 	add.w	r1, r2, #8
   89e90:	e9d2 6700 	ldrd	r6, r7, [r2]
   89e94:	9107      	str	r1, [sp, #28]
   89e96:	2201      	movs	r2, #1
   89e98:	f7ff bba7 	b.w	895ea <_vfiprintf_r+0x272>
   89e9c:	9d07      	ldr	r5, [sp, #28]
   89e9e:	3507      	adds	r5, #7
   89ea0:	f025 0207 	bic.w	r2, r5, #7
   89ea4:	f102 0108 	add.w	r1, r2, #8
   89ea8:	e9d2 6700 	ldrd	r6, r7, [r2]
   89eac:	9107      	str	r1, [sp, #28]
   89eae:	2200      	movs	r2, #0
   89eb0:	f7ff bb9b 	b.w	895ea <_vfiprintf_r+0x272>
   89eb4:	9d07      	ldr	r5, [sp, #28]
   89eb6:	3507      	adds	r5, #7
   89eb8:	f025 0107 	bic.w	r1, r5, #7
   89ebc:	f101 0008 	add.w	r0, r1, #8
   89ec0:	9007      	str	r0, [sp, #28]
   89ec2:	e9d1 6700 	ldrd	r6, r7, [r1]
   89ec6:	e51c      	b.n	89902 <_vfiprintf_r+0x58a>
   89ec8:	46d3      	mov	fp, sl
   89eca:	f7ff bbad 	b.w	89628 <_vfiprintf_r+0x2b0>
   89ece:	252d      	movs	r5, #45	; 0x2d
   89ed0:	4276      	negs	r6, r6
   89ed2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   89ed6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   89eda:	2201      	movs	r2, #1
   89edc:	f7ff bb8a 	b.w	895f4 <_vfiprintf_r+0x27c>
   89ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89ee2:	b9b3      	cbnz	r3, 89f12 <_vfiprintf_r+0xb9a>
   89ee4:	4611      	mov	r1, r2
   89ee6:	2001      	movs	r0, #1
   89ee8:	46d1      	mov	r9, sl
   89eea:	e5f2      	b.n	89ad2 <_vfiprintf_r+0x75a>
   89eec:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   89ef0:	f001 fdb8 	bl	8ba64 <__retarget_lock_release_recursive>
   89ef4:	f04f 33ff 	mov.w	r3, #4294967295
   89ef8:	9303      	str	r3, [sp, #12]
   89efa:	f7ff bb4c 	b.w	89596 <_vfiprintf_r+0x21e>
   89efe:	aa0f      	add	r2, sp, #60	; 0x3c
   89f00:	9904      	ldr	r1, [sp, #16]
   89f02:	9806      	ldr	r0, [sp, #24]
   89f04:	f7ff f9f8 	bl	892f8 <__sprint_r.part.0>
   89f08:	2800      	cmp	r0, #0
   89f0a:	f47f aeec 	bne.w	89ce6 <_vfiprintf_r+0x96e>
   89f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89f10:	e6aa      	b.n	89c68 <_vfiprintf_r+0x8f0>
   89f12:	2202      	movs	r2, #2
   89f14:	ab0e      	add	r3, sp, #56	; 0x38
   89f16:	921d      	str	r2, [sp, #116]	; 0x74
   89f18:	931c      	str	r3, [sp, #112]	; 0x70
   89f1a:	2001      	movs	r0, #1
   89f1c:	46d1      	mov	r9, sl
   89f1e:	e5d0      	b.n	89ac2 <_vfiprintf_r+0x74a>
   89f20:	4d34      	ldr	r5, [pc, #208]	; (89ff4 <_vfiprintf_r+0xc7c>)
   89f22:	e5fd      	b.n	89b20 <_vfiprintf_r+0x7a8>
   89f24:	9a07      	ldr	r2, [sp, #28]
   89f26:	4613      	mov	r3, r2
   89f28:	3304      	adds	r3, #4
   89f2a:	9307      	str	r3, [sp, #28]
   89f2c:	9b03      	ldr	r3, [sp, #12]
   89f2e:	6811      	ldr	r1, [r2, #0]
   89f30:	17dd      	asrs	r5, r3, #31
   89f32:	461a      	mov	r2, r3
   89f34:	462b      	mov	r3, r5
   89f36:	e9c1 2300 	strd	r2, r3, [r1]
   89f3a:	f7ff ba5a 	b.w	893f2 <_vfiprintf_r+0x7a>
   89f3e:	4658      	mov	r0, fp
   89f40:	9507      	str	r5, [sp, #28]
   89f42:	9302      	str	r3, [sp, #8]
   89f44:	f002 fe86 	bl	8cc54 <strlen>
   89f48:	2400      	movs	r4, #0
   89f4a:	9005      	str	r0, [sp, #20]
   89f4c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   89f50:	f7ff bb6a 	b.w	89628 <_vfiprintf_r+0x2b0>
   89f54:	aa0f      	add	r2, sp, #60	; 0x3c
   89f56:	9904      	ldr	r1, [sp, #16]
   89f58:	9806      	ldr	r0, [sp, #24]
   89f5a:	f7ff f9cd 	bl	892f8 <__sprint_r.part.0>
   89f5e:	2800      	cmp	r0, #0
   89f60:	f47f aec1 	bne.w	89ce6 <_vfiprintf_r+0x96e>
   89f64:	9910      	ldr	r1, [sp, #64]	; 0x40
   89f66:	46d1      	mov	r9, sl
   89f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89f6a:	1c48      	adds	r0, r1, #1
   89f6c:	e5b1      	b.n	89ad2 <_vfiprintf_r+0x75a>
   89f6e:	9910      	ldr	r1, [sp, #64]	; 0x40
   89f70:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89f72:	3101      	adds	r1, #1
   89f74:	4e20      	ldr	r6, [pc, #128]	; (89ff8 <_vfiprintf_r+0xc80>)
   89f76:	f7ff bb9c 	b.w	896b2 <_vfiprintf_r+0x33a>
   89f7a:	2c06      	cmp	r4, #6
   89f7c:	bf28      	it	cs
   89f7e:	2406      	movcs	r4, #6
   89f80:	9507      	str	r5, [sp, #28]
   89f82:	9405      	str	r4, [sp, #20]
   89f84:	9401      	str	r4, [sp, #4]
   89f86:	f8df b074 	ldr.w	fp, [pc, #116]	; 89ffc <_vfiprintf_r+0xc84>
   89f8a:	e4e3      	b.n	89954 <_vfiprintf_r+0x5dc>
   89f8c:	9810      	ldr	r0, [sp, #64]	; 0x40
   89f8e:	4e1a      	ldr	r6, [pc, #104]	; (89ff8 <_vfiprintf_r+0xc80>)
   89f90:	3001      	adds	r0, #1
   89f92:	e60e      	b.n	89bb2 <_vfiprintf_r+0x83a>
   89f94:	4686      	mov	lr, r0
   89f96:	4d17      	ldr	r5, [pc, #92]	; (89ff4 <_vfiprintf_r+0xc7c>)
   89f98:	f7ff bbe2 	b.w	89760 <_vfiprintf_r+0x3e8>
   89f9c:	9405      	str	r4, [sp, #20]
   89f9e:	9507      	str	r5, [sp, #28]
   89fa0:	9302      	str	r3, [sp, #8]
   89fa2:	4604      	mov	r4, r0
   89fa4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   89fa8:	f7ff bb3e 	b.w	89628 <_vfiprintf_r+0x2b0>
   89fac:	9806      	ldr	r0, [sp, #24]
   89fae:	aa0f      	add	r2, sp, #60	; 0x3c
   89fb0:	4659      	mov	r1, fp
   89fb2:	f7ff f9a1 	bl	892f8 <__sprint_r.part.0>
   89fb6:	2800      	cmp	r0, #0
   89fb8:	f43f ae2e 	beq.w	89c18 <_vfiprintf_r+0x8a0>
   89fbc:	e62e      	b.n	89c1c <_vfiprintf_r+0x8a4>
   89fbe:	9907      	ldr	r1, [sp, #28]
   89fc0:	f898 2001 	ldrb.w	r2, [r8, #1]
   89fc4:	680c      	ldr	r4, [r1, #0]
   89fc6:	3104      	adds	r1, #4
   89fc8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   89fcc:	46b8      	mov	r8, r7
   89fce:	9107      	str	r1, [sp, #28]
   89fd0:	f7ff ba44 	b.w	8945c <_vfiprintf_r+0xe4>
   89fd4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89fd8:	e4a7      	b.n	8992a <_vfiprintf_r+0x5b2>
   89fda:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89fde:	e521      	b.n	89a24 <_vfiprintf_r+0x6ac>
   89fe0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89fe4:	e47c      	b.n	898e0 <_vfiprintf_r+0x568>
   89fe6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89fea:	e43f      	b.n	8986c <_vfiprintf_r+0x4f4>
   89fec:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89ff0:	f7ff bbfa 	b.w	897e8 <_vfiprintf_r+0x470>
   89ff4:	0008ddb0 	.word	0x0008ddb0
   89ff8:	0008dda0 	.word	0x0008dda0
   89ffc:	0008dd74 	.word	0x0008dd74

0008a000 <__sbprintf>:
   8a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a004:	460c      	mov	r4, r1
   8a006:	f04f 0e00 	mov.w	lr, #0
   8a00a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8a00e:	4606      	mov	r6, r0
   8a010:	4617      	mov	r7, r2
   8a012:	4698      	mov	r8, r3
   8a014:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a016:	89e3      	ldrh	r3, [r4, #14]
   8a018:	8989      	ldrh	r1, [r1, #12]
   8a01a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8a01e:	f021 0102 	bic.w	r1, r1, #2
   8a022:	9219      	str	r2, [sp, #100]	; 0x64
   8a024:	f8ad 300e 	strh.w	r3, [sp, #14]
   8a028:	69e2      	ldr	r2, [r4, #28]
   8a02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8a02c:	f8ad 100c 	strh.w	r1, [sp, #12]
   8a030:	a816      	add	r0, sp, #88	; 0x58
   8a032:	a91a      	add	r1, sp, #104	; 0x68
   8a034:	f8cd e018 	str.w	lr, [sp, #24]
   8a038:	9207      	str	r2, [sp, #28]
   8a03a:	9309      	str	r3, [sp, #36]	; 0x24
   8a03c:	9100      	str	r1, [sp, #0]
   8a03e:	9104      	str	r1, [sp, #16]
   8a040:	9502      	str	r5, [sp, #8]
   8a042:	9505      	str	r5, [sp, #20]
   8a044:	f001 fd08 	bl	8ba58 <__retarget_lock_init_recursive>
   8a048:	4643      	mov	r3, r8
   8a04a:	463a      	mov	r2, r7
   8a04c:	4669      	mov	r1, sp
   8a04e:	4630      	mov	r0, r6
   8a050:	f7ff f992 	bl	89378 <_vfiprintf_r>
   8a054:	1e05      	subs	r5, r0, #0
   8a056:	db07      	blt.n	8a068 <__sbprintf+0x68>
   8a058:	4630      	mov	r0, r6
   8a05a:	4669      	mov	r1, sp
   8a05c:	f001 f8da 	bl	8b214 <_fflush_r>
   8a060:	2800      	cmp	r0, #0
   8a062:	bf18      	it	ne
   8a064:	f04f 35ff 	movne.w	r5, #4294967295
   8a068:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8a06c:	065b      	lsls	r3, r3, #25
   8a06e:	d503      	bpl.n	8a078 <__sbprintf+0x78>
   8a070:	89a3      	ldrh	r3, [r4, #12]
   8a072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a076:	81a3      	strh	r3, [r4, #12]
   8a078:	9816      	ldr	r0, [sp, #88]	; 0x58
   8a07a:	f001 fcef 	bl	8ba5c <__retarget_lock_close_recursive>
   8a07e:	4628      	mov	r0, r5
   8a080:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008a088 <__swsetup_r>:
   8a088:	b538      	push	{r3, r4, r5, lr}
   8a08a:	4b30      	ldr	r3, [pc, #192]	; (8a14c <__swsetup_r+0xc4>)
   8a08c:	4605      	mov	r5, r0
   8a08e:	6818      	ldr	r0, [r3, #0]
   8a090:	460c      	mov	r4, r1
   8a092:	b110      	cbz	r0, 8a09a <__swsetup_r+0x12>
   8a094:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a096:	2b00      	cmp	r3, #0
   8a098:	d038      	beq.n	8a10c <__swsetup_r+0x84>
   8a09a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a09e:	b293      	uxth	r3, r2
   8a0a0:	0718      	lsls	r0, r3, #28
   8a0a2:	d50c      	bpl.n	8a0be <__swsetup_r+0x36>
   8a0a4:	6920      	ldr	r0, [r4, #16]
   8a0a6:	b1a8      	cbz	r0, 8a0d4 <__swsetup_r+0x4c>
   8a0a8:	f013 0201 	ands.w	r2, r3, #1
   8a0ac:	d01e      	beq.n	8a0ec <__swsetup_r+0x64>
   8a0ae:	2200      	movs	r2, #0
   8a0b0:	6963      	ldr	r3, [r4, #20]
   8a0b2:	60a2      	str	r2, [r4, #8]
   8a0b4:	425b      	negs	r3, r3
   8a0b6:	61a3      	str	r3, [r4, #24]
   8a0b8:	b1f0      	cbz	r0, 8a0f8 <__swsetup_r+0x70>
   8a0ba:	2000      	movs	r0, #0
   8a0bc:	bd38      	pop	{r3, r4, r5, pc}
   8a0be:	06d9      	lsls	r1, r3, #27
   8a0c0:	d53b      	bpl.n	8a13a <__swsetup_r+0xb2>
   8a0c2:	0758      	lsls	r0, r3, #29
   8a0c4:	d425      	bmi.n	8a112 <__swsetup_r+0x8a>
   8a0c6:	6920      	ldr	r0, [r4, #16]
   8a0c8:	f042 0308 	orr.w	r3, r2, #8
   8a0cc:	81a3      	strh	r3, [r4, #12]
   8a0ce:	b29b      	uxth	r3, r3
   8a0d0:	2800      	cmp	r0, #0
   8a0d2:	d1e9      	bne.n	8a0a8 <__swsetup_r+0x20>
   8a0d4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8a0d8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8a0dc:	d0e4      	beq.n	8a0a8 <__swsetup_r+0x20>
   8a0de:	4628      	mov	r0, r5
   8a0e0:	4621      	mov	r1, r4
   8a0e2:	f001 fcef 	bl	8bac4 <__smakebuf_r>
   8a0e6:	89a3      	ldrh	r3, [r4, #12]
   8a0e8:	6920      	ldr	r0, [r4, #16]
   8a0ea:	e7dd      	b.n	8a0a8 <__swsetup_r+0x20>
   8a0ec:	0799      	lsls	r1, r3, #30
   8a0ee:	bf58      	it	pl
   8a0f0:	6962      	ldrpl	r2, [r4, #20]
   8a0f2:	60a2      	str	r2, [r4, #8]
   8a0f4:	2800      	cmp	r0, #0
   8a0f6:	d1e0      	bne.n	8a0ba <__swsetup_r+0x32>
   8a0f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a0fc:	061a      	lsls	r2, r3, #24
   8a0fe:	d5dd      	bpl.n	8a0bc <__swsetup_r+0x34>
   8a100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a104:	81a3      	strh	r3, [r4, #12]
   8a106:	f04f 30ff 	mov.w	r0, #4294967295
   8a10a:	bd38      	pop	{r3, r4, r5, pc}
   8a10c:	f001 f8da 	bl	8b2c4 <__sinit>
   8a110:	e7c3      	b.n	8a09a <__swsetup_r+0x12>
   8a112:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8a114:	b151      	cbz	r1, 8a12c <__swsetup_r+0xa4>
   8a116:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8a11a:	4299      	cmp	r1, r3
   8a11c:	d004      	beq.n	8a128 <__swsetup_r+0xa0>
   8a11e:	4628      	mov	r0, r5
   8a120:	f001 f9f6 	bl	8b510 <_free_r>
   8a124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a128:	2300      	movs	r3, #0
   8a12a:	6323      	str	r3, [r4, #48]	; 0x30
   8a12c:	2300      	movs	r3, #0
   8a12e:	6920      	ldr	r0, [r4, #16]
   8a130:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8a134:	e884 0009 	stmia.w	r4, {r0, r3}
   8a138:	e7c6      	b.n	8a0c8 <__swsetup_r+0x40>
   8a13a:	2309      	movs	r3, #9
   8a13c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8a140:	602b      	str	r3, [r5, #0]
   8a142:	f04f 30ff 	mov.w	r0, #4294967295
   8a146:	81a2      	strh	r2, [r4, #12]
   8a148:	bd38      	pop	{r3, r4, r5, pc}
   8a14a:	bf00      	nop
   8a14c:	20000714 	.word	0x20000714

0008a150 <register_fini>:
   8a150:	4b02      	ldr	r3, [pc, #8]	; (8a15c <register_fini+0xc>)
   8a152:	b113      	cbz	r3, 8a15a <register_fini+0xa>
   8a154:	4802      	ldr	r0, [pc, #8]	; (8a160 <register_fini+0x10>)
   8a156:	f000 b805 	b.w	8a164 <atexit>
   8a15a:	4770      	bx	lr
   8a15c:	00000000 	.word	0x00000000
   8a160:	0008b33d 	.word	0x0008b33d

0008a164 <atexit>:
   8a164:	2300      	movs	r3, #0
   8a166:	4601      	mov	r1, r0
   8a168:	461a      	mov	r2, r3
   8a16a:	4618      	mov	r0, r3
   8a16c:	f002 bec2 	b.w	8cef4 <__register_exitproc>

0008a170 <quorem>:
   8a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a174:	6903      	ldr	r3, [r0, #16]
   8a176:	690f      	ldr	r7, [r1, #16]
   8a178:	b083      	sub	sp, #12
   8a17a:	429f      	cmp	r7, r3
   8a17c:	f300 8088 	bgt.w	8a290 <quorem+0x120>
   8a180:	3f01      	subs	r7, #1
   8a182:	f101 0614 	add.w	r6, r1, #20
   8a186:	f100 0a14 	add.w	sl, r0, #20
   8a18a:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   8a18e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8a192:	3301      	adds	r3, #1
   8a194:	fbb2 f8f3 	udiv	r8, r2, r3
   8a198:	00bb      	lsls	r3, r7, #2
   8a19a:	9300      	str	r3, [sp, #0]
   8a19c:	eb06 0903 	add.w	r9, r6, r3
   8a1a0:	4453      	add	r3, sl
   8a1a2:	9301      	str	r3, [sp, #4]
   8a1a4:	f1b8 0f00 	cmp.w	r8, #0
   8a1a8:	d03b      	beq.n	8a222 <quorem+0xb2>
   8a1aa:	2300      	movs	r3, #0
   8a1ac:	46b4      	mov	ip, r6
   8a1ae:	461c      	mov	r4, r3
   8a1b0:	46d6      	mov	lr, sl
   8a1b2:	f85c 2b04 	ldr.w	r2, [ip], #4
   8a1b6:	f8de 5000 	ldr.w	r5, [lr]
   8a1ba:	fa1f fb82 	uxth.w	fp, r2
   8a1be:	fb08 330b 	mla	r3, r8, fp, r3
   8a1c2:	0c12      	lsrs	r2, r2, #16
   8a1c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   8a1c8:	fb08 bb02 	mla	fp, r8, r2, fp
   8a1cc:	b29a      	uxth	r2, r3
   8a1ce:	1aa2      	subs	r2, r4, r2
   8a1d0:	b2ab      	uxth	r3, r5
   8a1d2:	fa1f f48b 	uxth.w	r4, fp
   8a1d6:	441a      	add	r2, r3
   8a1d8:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   8a1dc:	eb04 4422 	add.w	r4, r4, r2, asr #16
   8a1e0:	b292      	uxth	r2, r2
   8a1e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8a1e6:	45e1      	cmp	r9, ip
   8a1e8:	f84e 2b04 	str.w	r2, [lr], #4
   8a1ec:	ea4f 4424 	mov.w	r4, r4, asr #16
   8a1f0:	ea4f 431b 	mov.w	r3, fp, lsr #16
   8a1f4:	d2dd      	bcs.n	8a1b2 <quorem+0x42>
   8a1f6:	9b00      	ldr	r3, [sp, #0]
   8a1f8:	f85a 3003 	ldr.w	r3, [sl, r3]
   8a1fc:	b98b      	cbnz	r3, 8a222 <quorem+0xb2>
   8a1fe:	9c01      	ldr	r4, [sp, #4]
   8a200:	1f23      	subs	r3, r4, #4
   8a202:	459a      	cmp	sl, r3
   8a204:	d20c      	bcs.n	8a220 <quorem+0xb0>
   8a206:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a20a:	b94b      	cbnz	r3, 8a220 <quorem+0xb0>
   8a20c:	f1a4 0308 	sub.w	r3, r4, #8
   8a210:	e002      	b.n	8a218 <quorem+0xa8>
   8a212:	681a      	ldr	r2, [r3, #0]
   8a214:	3b04      	subs	r3, #4
   8a216:	b91a      	cbnz	r2, 8a220 <quorem+0xb0>
   8a218:	459a      	cmp	sl, r3
   8a21a:	f107 37ff 	add.w	r7, r7, #4294967295
   8a21e:	d3f8      	bcc.n	8a212 <quorem+0xa2>
   8a220:	6107      	str	r7, [r0, #16]
   8a222:	4604      	mov	r4, r0
   8a224:	f002 fa0c 	bl	8c640 <__mcmp>
   8a228:	2800      	cmp	r0, #0
   8a22a:	db2d      	blt.n	8a288 <quorem+0x118>
   8a22c:	4655      	mov	r5, sl
   8a22e:	2300      	movs	r3, #0
   8a230:	f108 0801 	add.w	r8, r8, #1
   8a234:	f856 1b04 	ldr.w	r1, [r6], #4
   8a238:	6828      	ldr	r0, [r5, #0]
   8a23a:	b28a      	uxth	r2, r1
   8a23c:	1a9a      	subs	r2, r3, r2
   8a23e:	0c0b      	lsrs	r3, r1, #16
   8a240:	b281      	uxth	r1, r0
   8a242:	440a      	add	r2, r1
   8a244:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   8a248:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8a24c:	b292      	uxth	r2, r2
   8a24e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8a252:	45b1      	cmp	r9, r6
   8a254:	f845 2b04 	str.w	r2, [r5], #4
   8a258:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a25c:	d2ea      	bcs.n	8a234 <quorem+0xc4>
   8a25e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8a262:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   8a266:	b97a      	cbnz	r2, 8a288 <quorem+0x118>
   8a268:	1f1a      	subs	r2, r3, #4
   8a26a:	4592      	cmp	sl, r2
   8a26c:	d20b      	bcs.n	8a286 <quorem+0x116>
   8a26e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8a272:	b942      	cbnz	r2, 8a286 <quorem+0x116>
   8a274:	3b08      	subs	r3, #8
   8a276:	e002      	b.n	8a27e <quorem+0x10e>
   8a278:	681a      	ldr	r2, [r3, #0]
   8a27a:	3b04      	subs	r3, #4
   8a27c:	b91a      	cbnz	r2, 8a286 <quorem+0x116>
   8a27e:	459a      	cmp	sl, r3
   8a280:	f107 37ff 	add.w	r7, r7, #4294967295
   8a284:	d3f8      	bcc.n	8a278 <quorem+0x108>
   8a286:	6127      	str	r7, [r4, #16]
   8a288:	4640      	mov	r0, r8
   8a28a:	b003      	add	sp, #12
   8a28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a290:	2000      	movs	r0, #0
   8a292:	b003      	add	sp, #12
   8a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008a298 <_dtoa_r>:
   8a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a29c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8a29e:	b09b      	sub	sp, #108	; 0x6c
   8a2a0:	4604      	mov	r4, r0
   8a2a2:	4692      	mov	sl, r2
   8a2a4:	469b      	mov	fp, r3
   8a2a6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   8a2a8:	b14d      	cbz	r5, 8a2be <_dtoa_r+0x26>
   8a2aa:	2301      	movs	r3, #1
   8a2ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8a2ae:	4629      	mov	r1, r5
   8a2b0:	4093      	lsls	r3, r2
   8a2b2:	60ab      	str	r3, [r5, #8]
   8a2b4:	606a      	str	r2, [r5, #4]
   8a2b6:	f001 ffeb 	bl	8c290 <_Bfree>
   8a2ba:	2300      	movs	r3, #0
   8a2bc:	6423      	str	r3, [r4, #64]	; 0x40
   8a2be:	f1bb 0f00 	cmp.w	fp, #0
   8a2c2:	465d      	mov	r5, fp
   8a2c4:	db35      	blt.n	8a332 <_dtoa_r+0x9a>
   8a2c6:	2300      	movs	r3, #0
   8a2c8:	6033      	str	r3, [r6, #0]
   8a2ca:	4b9d      	ldr	r3, [pc, #628]	; (8a540 <_dtoa_r+0x2a8>)
   8a2cc:	43ab      	bics	r3, r5
   8a2ce:	d015      	beq.n	8a2fc <_dtoa_r+0x64>
   8a2d0:	2200      	movs	r2, #0
   8a2d2:	2300      	movs	r3, #0
   8a2d4:	4650      	mov	r0, sl
   8a2d6:	4659      	mov	r1, fp
   8a2d8:	f003 fb84 	bl	8d9e4 <__aeabi_dcmpeq>
   8a2dc:	4680      	mov	r8, r0
   8a2de:	2800      	cmp	r0, #0
   8a2e0:	d02d      	beq.n	8a33e <_dtoa_r+0xa6>
   8a2e2:	2301      	movs	r3, #1
   8a2e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a2e6:	6013      	str	r3, [r2, #0]
   8a2e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a2ea:	2b00      	cmp	r3, #0
   8a2ec:	f000 80bd 	beq.w	8a46a <_dtoa_r+0x1d2>
   8a2f0:	4894      	ldr	r0, [pc, #592]	; (8a544 <_dtoa_r+0x2ac>)
   8a2f2:	6018      	str	r0, [r3, #0]
   8a2f4:	3801      	subs	r0, #1
   8a2f6:	b01b      	add	sp, #108	; 0x6c
   8a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a2fc:	f242 730f 	movw	r3, #9999	; 0x270f
   8a300:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a302:	6013      	str	r3, [r2, #0]
   8a304:	f1ba 0f00 	cmp.w	sl, #0
   8a308:	d10d      	bne.n	8a326 <_dtoa_r+0x8e>
   8a30a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8a30e:	b955      	cbnz	r5, 8a326 <_dtoa_r+0x8e>
   8a310:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a312:	488d      	ldr	r0, [pc, #564]	; (8a548 <_dtoa_r+0x2b0>)
   8a314:	2b00      	cmp	r3, #0
   8a316:	d0ee      	beq.n	8a2f6 <_dtoa_r+0x5e>
   8a318:	f100 0308 	add.w	r3, r0, #8
   8a31c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8a31e:	6013      	str	r3, [r2, #0]
   8a320:	b01b      	add	sp, #108	; 0x6c
   8a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a326:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a328:	4888      	ldr	r0, [pc, #544]	; (8a54c <_dtoa_r+0x2b4>)
   8a32a:	2b00      	cmp	r3, #0
   8a32c:	d0e3      	beq.n	8a2f6 <_dtoa_r+0x5e>
   8a32e:	1cc3      	adds	r3, r0, #3
   8a330:	e7f4      	b.n	8a31c <_dtoa_r+0x84>
   8a332:	2301      	movs	r3, #1
   8a334:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   8a338:	6033      	str	r3, [r6, #0]
   8a33a:	46ab      	mov	fp, r5
   8a33c:	e7c5      	b.n	8a2ca <_dtoa_r+0x32>
   8a33e:	aa18      	add	r2, sp, #96	; 0x60
   8a340:	ab19      	add	r3, sp, #100	; 0x64
   8a342:	9201      	str	r2, [sp, #4]
   8a344:	9300      	str	r3, [sp, #0]
   8a346:	4652      	mov	r2, sl
   8a348:	465b      	mov	r3, fp
   8a34a:	4620      	mov	r0, r4
   8a34c:	f002 fa22 	bl	8c794 <__d2b>
   8a350:	0d2b      	lsrs	r3, r5, #20
   8a352:	4681      	mov	r9, r0
   8a354:	d071      	beq.n	8a43a <_dtoa_r+0x1a2>
   8a356:	4650      	mov	r0, sl
   8a358:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8a35c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   8a360:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8a362:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8a366:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8a36a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8a36e:	2200      	movs	r2, #0
   8a370:	4b77      	ldr	r3, [pc, #476]	; (8a550 <_dtoa_r+0x2b8>)
   8a372:	f002 ff1b 	bl	8d1ac <__aeabi_dsub>
   8a376:	a36c      	add	r3, pc, #432	; (adr r3, 8a528 <_dtoa_r+0x290>)
   8a378:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a37c:	f003 f8ca 	bl	8d514 <__aeabi_dmul>
   8a380:	a36b      	add	r3, pc, #428	; (adr r3, 8a530 <_dtoa_r+0x298>)
   8a382:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a386:	f002 ff13 	bl	8d1b0 <__adddf3>
   8a38a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8a38e:	4630      	mov	r0, r6
   8a390:	f003 f85a 	bl	8d448 <__aeabi_i2d>
   8a394:	a368      	add	r3, pc, #416	; (adr r3, 8a538 <_dtoa_r+0x2a0>)
   8a396:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a39a:	f003 f8bb 	bl	8d514 <__aeabi_dmul>
   8a39e:	4602      	mov	r2, r0
   8a3a0:	460b      	mov	r3, r1
   8a3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8a3a6:	f002 ff03 	bl	8d1b0 <__adddf3>
   8a3aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8a3ae:	f003 fb61 	bl	8da74 <__aeabi_d2iz>
   8a3b2:	2200      	movs	r2, #0
   8a3b4:	9002      	str	r0, [sp, #8]
   8a3b6:	2300      	movs	r3, #0
   8a3b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8a3bc:	f003 fb1c 	bl	8d9f8 <__aeabi_dcmplt>
   8a3c0:	2800      	cmp	r0, #0
   8a3c2:	f040 816d 	bne.w	8a6a0 <_dtoa_r+0x408>
   8a3c6:	9d02      	ldr	r5, [sp, #8]
   8a3c8:	2d16      	cmp	r5, #22
   8a3ca:	f200 8157 	bhi.w	8a67c <_dtoa_r+0x3e4>
   8a3ce:	4961      	ldr	r1, [pc, #388]	; (8a554 <_dtoa_r+0x2bc>)
   8a3d0:	4652      	mov	r2, sl
   8a3d2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   8a3d6:	465b      	mov	r3, fp
   8a3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   8a3dc:	f003 fb2a 	bl	8da34 <__aeabi_dcmpgt>
   8a3e0:	2800      	cmp	r0, #0
   8a3e2:	f000 81be 	beq.w	8a762 <_dtoa_r+0x4ca>
   8a3e6:	1e6b      	subs	r3, r5, #1
   8a3e8:	9302      	str	r3, [sp, #8]
   8a3ea:	2300      	movs	r3, #0
   8a3ec:	930e      	str	r3, [sp, #56]	; 0x38
   8a3ee:	1bbf      	subs	r7, r7, r6
   8a3f0:	1e7b      	subs	r3, r7, #1
   8a3f2:	9308      	str	r3, [sp, #32]
   8a3f4:	f100 814e 	bmi.w	8a694 <_dtoa_r+0x3fc>
   8a3f8:	2300      	movs	r3, #0
   8a3fa:	930a      	str	r3, [sp, #40]	; 0x28
   8a3fc:	9b02      	ldr	r3, [sp, #8]
   8a3fe:	2b00      	cmp	r3, #0
   8a400:	f2c0 813f 	blt.w	8a682 <_dtoa_r+0x3ea>
   8a404:	9a08      	ldr	r2, [sp, #32]
   8a406:	930d      	str	r3, [sp, #52]	; 0x34
   8a408:	4611      	mov	r1, r2
   8a40a:	4419      	add	r1, r3
   8a40c:	2300      	movs	r3, #0
   8a40e:	9108      	str	r1, [sp, #32]
   8a410:	930c      	str	r3, [sp, #48]	; 0x30
   8a412:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a414:	2b09      	cmp	r3, #9
   8a416:	d82a      	bhi.n	8a46e <_dtoa_r+0x1d6>
   8a418:	2b05      	cmp	r3, #5
   8a41a:	f340 8658 	ble.w	8b0ce <_dtoa_r+0xe36>
   8a41e:	2500      	movs	r5, #0
   8a420:	3b04      	subs	r3, #4
   8a422:	9324      	str	r3, [sp, #144]	; 0x90
   8a424:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a426:	3b02      	subs	r3, #2
   8a428:	2b03      	cmp	r3, #3
   8a42a:	f200 863f 	bhi.w	8b0ac <_dtoa_r+0xe14>
   8a42e:	e8df f013 	tbh	[pc, r3, lsl #1]
   8a432:	03ce      	.short	0x03ce
   8a434:	03d902c3 	.word	0x03d902c3
   8a438:	045b      	.short	0x045b
   8a43a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8a43c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   8a43e:	443e      	add	r6, r7
   8a440:	f206 4332 	addw	r3, r6, #1074	; 0x432
   8a444:	2b20      	cmp	r3, #32
   8a446:	f340 8187 	ble.w	8a758 <_dtoa_r+0x4c0>
   8a44a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   8a44e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   8a452:	409d      	lsls	r5, r3
   8a454:	fa2a f000 	lsr.w	r0, sl, r0
   8a458:	4328      	orrs	r0, r5
   8a45a:	f002 ffe5 	bl	8d428 <__aeabi_ui2d>
   8a45e:	2301      	movs	r3, #1
   8a460:	3e01      	subs	r6, #1
   8a462:	9314      	str	r3, [sp, #80]	; 0x50
   8a464:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8a468:	e781      	b.n	8a36e <_dtoa_r+0xd6>
   8a46a:	483b      	ldr	r0, [pc, #236]	; (8a558 <_dtoa_r+0x2c0>)
   8a46c:	e743      	b.n	8a2f6 <_dtoa_r+0x5e>
   8a46e:	2100      	movs	r1, #0
   8a470:	4620      	mov	r0, r4
   8a472:	6461      	str	r1, [r4, #68]	; 0x44
   8a474:	9125      	str	r1, [sp, #148]	; 0x94
   8a476:	f001 fee5 	bl	8c244 <_Balloc>
   8a47a:	f04f 33ff 	mov.w	r3, #4294967295
   8a47e:	9307      	str	r3, [sp, #28]
   8a480:	930f      	str	r3, [sp, #60]	; 0x3c
   8a482:	2301      	movs	r3, #1
   8a484:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8a486:	9004      	str	r0, [sp, #16]
   8a488:	6420      	str	r0, [r4, #64]	; 0x40
   8a48a:	9224      	str	r2, [sp, #144]	; 0x90
   8a48c:	930b      	str	r3, [sp, #44]	; 0x2c
   8a48e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8a490:	2b00      	cmp	r3, #0
   8a492:	f2c0 80d3 	blt.w	8a63c <_dtoa_r+0x3a4>
   8a496:	9a02      	ldr	r2, [sp, #8]
   8a498:	2a0e      	cmp	r2, #14
   8a49a:	f300 80cf 	bgt.w	8a63c <_dtoa_r+0x3a4>
   8a49e:	4b2d      	ldr	r3, [pc, #180]	; (8a554 <_dtoa_r+0x2bc>)
   8a4a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a4a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   8a4ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a4ae:	2b00      	cmp	r3, #0
   8a4b0:	f2c0 83b4 	blt.w	8ac1c <_dtoa_r+0x984>
   8a4b4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   8a4b8:	4650      	mov	r0, sl
   8a4ba:	462a      	mov	r2, r5
   8a4bc:	4633      	mov	r3, r6
   8a4be:	4659      	mov	r1, fp
   8a4c0:	f003 f952 	bl	8d768 <__aeabi_ddiv>
   8a4c4:	f003 fad6 	bl	8da74 <__aeabi_d2iz>
   8a4c8:	4680      	mov	r8, r0
   8a4ca:	f002 ffbd 	bl	8d448 <__aeabi_i2d>
   8a4ce:	462a      	mov	r2, r5
   8a4d0:	4633      	mov	r3, r6
   8a4d2:	f003 f81f 	bl	8d514 <__aeabi_dmul>
   8a4d6:	4602      	mov	r2, r0
   8a4d8:	460b      	mov	r3, r1
   8a4da:	4650      	mov	r0, sl
   8a4dc:	4659      	mov	r1, fp
   8a4de:	f002 fe65 	bl	8d1ac <__aeabi_dsub>
   8a4e2:	9e07      	ldr	r6, [sp, #28]
   8a4e4:	9f04      	ldr	r7, [sp, #16]
   8a4e6:	f108 0530 	add.w	r5, r8, #48	; 0x30
   8a4ea:	2e01      	cmp	r6, #1
   8a4ec:	703d      	strb	r5, [r7, #0]
   8a4ee:	4602      	mov	r2, r0
   8a4f0:	460b      	mov	r3, r1
   8a4f2:	f107 0501 	add.w	r5, r7, #1
   8a4f6:	d064      	beq.n	8a5c2 <_dtoa_r+0x32a>
   8a4f8:	2200      	movs	r2, #0
   8a4fa:	4b18      	ldr	r3, [pc, #96]	; (8a55c <_dtoa_r+0x2c4>)
   8a4fc:	f003 f80a 	bl	8d514 <__aeabi_dmul>
   8a500:	2200      	movs	r2, #0
   8a502:	2300      	movs	r3, #0
   8a504:	4606      	mov	r6, r0
   8a506:	460f      	mov	r7, r1
   8a508:	f003 fa6c 	bl	8d9e4 <__aeabi_dcmpeq>
   8a50c:	2800      	cmp	r0, #0
   8a50e:	f040 8082 	bne.w	8a616 <_dtoa_r+0x37e>
   8a512:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8a516:	f04f 0a00 	mov.w	sl, #0
   8a51a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   8a51e:	f04f 0b00 	mov.w	fp, #0
   8a522:	940b      	str	r4, [sp, #44]	; 0x2c
   8a524:	e029      	b.n	8a57a <_dtoa_r+0x2e2>
   8a526:	bf00      	nop
   8a528:	636f4361 	.word	0x636f4361
   8a52c:	3fd287a7 	.word	0x3fd287a7
   8a530:	8b60c8b3 	.word	0x8b60c8b3
   8a534:	3fc68a28 	.word	0x3fc68a28
   8a538:	509f79fb 	.word	0x509f79fb
   8a53c:	3fd34413 	.word	0x3fd34413
   8a540:	7ff00000 	.word	0x7ff00000
   8a544:	0008dd7d 	.word	0x0008dd7d
   8a548:	0008ddc0 	.word	0x0008ddc0
   8a54c:	0008ddcc 	.word	0x0008ddcc
   8a550:	3ff80000 	.word	0x3ff80000
   8a554:	0008de08 	.word	0x0008de08
   8a558:	0008dd7c 	.word	0x0008dd7c
   8a55c:	40240000 	.word	0x40240000
   8a560:	2200      	movs	r2, #0
   8a562:	4b81      	ldr	r3, [pc, #516]	; (8a768 <_dtoa_r+0x4d0>)
   8a564:	f002 ffd6 	bl	8d514 <__aeabi_dmul>
   8a568:	4652      	mov	r2, sl
   8a56a:	465b      	mov	r3, fp
   8a56c:	4606      	mov	r6, r0
   8a56e:	460f      	mov	r7, r1
   8a570:	f003 fa38 	bl	8d9e4 <__aeabi_dcmpeq>
   8a574:	2800      	cmp	r0, #0
   8a576:	f040 83ba 	bne.w	8acee <_dtoa_r+0xa56>
   8a57a:	4642      	mov	r2, r8
   8a57c:	464b      	mov	r3, r9
   8a57e:	4630      	mov	r0, r6
   8a580:	4639      	mov	r1, r7
   8a582:	f003 f8f1 	bl	8d768 <__aeabi_ddiv>
   8a586:	f003 fa75 	bl	8da74 <__aeabi_d2iz>
   8a58a:	4604      	mov	r4, r0
   8a58c:	f002 ff5c 	bl	8d448 <__aeabi_i2d>
   8a590:	4642      	mov	r2, r8
   8a592:	464b      	mov	r3, r9
   8a594:	f002 ffbe 	bl	8d514 <__aeabi_dmul>
   8a598:	4602      	mov	r2, r0
   8a59a:	460b      	mov	r3, r1
   8a59c:	4630      	mov	r0, r6
   8a59e:	4639      	mov	r1, r7
   8a5a0:	f002 fe04 	bl	8d1ac <__aeabi_dsub>
   8a5a4:	f104 0630 	add.w	r6, r4, #48	; 0x30
   8a5a8:	f805 6b01 	strb.w	r6, [r5], #1
   8a5ac:	9e04      	ldr	r6, [sp, #16]
   8a5ae:	9f07      	ldr	r7, [sp, #28]
   8a5b0:	1bae      	subs	r6, r5, r6
   8a5b2:	42be      	cmp	r6, r7
   8a5b4:	4602      	mov	r2, r0
   8a5b6:	460b      	mov	r3, r1
   8a5b8:	d1d2      	bne.n	8a560 <_dtoa_r+0x2c8>
   8a5ba:	46a0      	mov	r8, r4
   8a5bc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8a5c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8a5c2:	4610      	mov	r0, r2
   8a5c4:	4619      	mov	r1, r3
   8a5c6:	f002 fdf3 	bl	8d1b0 <__adddf3>
   8a5ca:	4606      	mov	r6, r0
   8a5cc:	460f      	mov	r7, r1
   8a5ce:	4602      	mov	r2, r0
   8a5d0:	460b      	mov	r3, r1
   8a5d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a5d6:	f003 fa0f 	bl	8d9f8 <__aeabi_dcmplt>
   8a5da:	b948      	cbnz	r0, 8a5f0 <_dtoa_r+0x358>
   8a5dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a5e0:	4632      	mov	r2, r6
   8a5e2:	463b      	mov	r3, r7
   8a5e4:	f003 f9fe 	bl	8d9e4 <__aeabi_dcmpeq>
   8a5e8:	b1a8      	cbz	r0, 8a616 <_dtoa_r+0x37e>
   8a5ea:	f018 0f01 	tst.w	r8, #1
   8a5ee:	d012      	beq.n	8a616 <_dtoa_r+0x37e>
   8a5f0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8a5f4:	1e6b      	subs	r3, r5, #1
   8a5f6:	9a04      	ldr	r2, [sp, #16]
   8a5f8:	e004      	b.n	8a604 <_dtoa_r+0x36c>
   8a5fa:	429a      	cmp	r2, r3
   8a5fc:	f000 8402 	beq.w	8ae04 <_dtoa_r+0xb6c>
   8a600:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   8a604:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   8a608:	f103 0501 	add.w	r5, r3, #1
   8a60c:	d0f5      	beq.n	8a5fa <_dtoa_r+0x362>
   8a60e:	f108 0801 	add.w	r8, r8, #1
   8a612:	f883 8000 	strb.w	r8, [r3]
   8a616:	4649      	mov	r1, r9
   8a618:	4620      	mov	r0, r4
   8a61a:	f001 fe39 	bl	8c290 <_Bfree>
   8a61e:	2200      	movs	r2, #0
   8a620:	9b02      	ldr	r3, [sp, #8]
   8a622:	702a      	strb	r2, [r5, #0]
   8a624:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a626:	3301      	adds	r3, #1
   8a628:	6013      	str	r3, [r2, #0]
   8a62a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a62c:	2b00      	cmp	r3, #0
   8a62e:	f000 839f 	beq.w	8ad70 <_dtoa_r+0xad8>
   8a632:	9804      	ldr	r0, [sp, #16]
   8a634:	601d      	str	r5, [r3, #0]
   8a636:	b01b      	add	sp, #108	; 0x6c
   8a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a63c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a63e:	2a00      	cmp	r2, #0
   8a640:	d03e      	beq.n	8a6c0 <_dtoa_r+0x428>
   8a642:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8a644:	2a01      	cmp	r2, #1
   8a646:	f340 8311 	ble.w	8ac6c <_dtoa_r+0x9d4>
   8a64a:	9b07      	ldr	r3, [sp, #28]
   8a64c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a64e:	1e5f      	subs	r7, r3, #1
   8a650:	42ba      	cmp	r2, r7
   8a652:	f2c0 8390 	blt.w	8ad76 <_dtoa_r+0xade>
   8a656:	1bd7      	subs	r7, r2, r7
   8a658:	9b07      	ldr	r3, [sp, #28]
   8a65a:	2b00      	cmp	r3, #0
   8a65c:	f2c0 848c 	blt.w	8af78 <_dtoa_r+0xce0>
   8a660:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8a662:	9b07      	ldr	r3, [sp, #28]
   8a664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a666:	2101      	movs	r1, #1
   8a668:	441a      	add	r2, r3
   8a66a:	920a      	str	r2, [sp, #40]	; 0x28
   8a66c:	9a08      	ldr	r2, [sp, #32]
   8a66e:	4620      	mov	r0, r4
   8a670:	441a      	add	r2, r3
   8a672:	9208      	str	r2, [sp, #32]
   8a674:	f001 fea8 	bl	8c3c8 <__i2b>
   8a678:	4606      	mov	r6, r0
   8a67a:	e023      	b.n	8a6c4 <_dtoa_r+0x42c>
   8a67c:	2301      	movs	r3, #1
   8a67e:	930e      	str	r3, [sp, #56]	; 0x38
   8a680:	e6b5      	b.n	8a3ee <_dtoa_r+0x156>
   8a682:	2300      	movs	r3, #0
   8a684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a686:	930d      	str	r3, [sp, #52]	; 0x34
   8a688:	9b02      	ldr	r3, [sp, #8]
   8a68a:	1ad2      	subs	r2, r2, r3
   8a68c:	425b      	negs	r3, r3
   8a68e:	920a      	str	r2, [sp, #40]	; 0x28
   8a690:	930c      	str	r3, [sp, #48]	; 0x30
   8a692:	e6be      	b.n	8a412 <_dtoa_r+0x17a>
   8a694:	f1c7 0301 	rsb	r3, r7, #1
   8a698:	930a      	str	r3, [sp, #40]	; 0x28
   8a69a:	2300      	movs	r3, #0
   8a69c:	9308      	str	r3, [sp, #32]
   8a69e:	e6ad      	b.n	8a3fc <_dtoa_r+0x164>
   8a6a0:	9d02      	ldr	r5, [sp, #8]
   8a6a2:	4628      	mov	r0, r5
   8a6a4:	f002 fed0 	bl	8d448 <__aeabi_i2d>
   8a6a8:	4602      	mov	r2, r0
   8a6aa:	460b      	mov	r3, r1
   8a6ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8a6b0:	f003 f998 	bl	8d9e4 <__aeabi_dcmpeq>
   8a6b4:	2800      	cmp	r0, #0
   8a6b6:	f47f ae86 	bne.w	8a3c6 <_dtoa_r+0x12e>
   8a6ba:	1e6b      	subs	r3, r5, #1
   8a6bc:	9302      	str	r3, [sp, #8]
   8a6be:	e682      	b.n	8a3c6 <_dtoa_r+0x12e>
   8a6c0:	ad0a      	add	r5, sp, #40	; 0x28
   8a6c2:	cde0      	ldmia	r5, {r5, r6, r7}
   8a6c4:	2d00      	cmp	r5, #0
   8a6c6:	dd0c      	ble.n	8a6e2 <_dtoa_r+0x44a>
   8a6c8:	9908      	ldr	r1, [sp, #32]
   8a6ca:	2900      	cmp	r1, #0
   8a6cc:	460b      	mov	r3, r1
   8a6ce:	dd08      	ble.n	8a6e2 <_dtoa_r+0x44a>
   8a6d0:	42a9      	cmp	r1, r5
   8a6d2:	bfa8      	it	ge
   8a6d4:	462b      	movge	r3, r5
   8a6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a6d8:	1aed      	subs	r5, r5, r3
   8a6da:	1ad2      	subs	r2, r2, r3
   8a6dc:	1acb      	subs	r3, r1, r3
   8a6de:	920a      	str	r2, [sp, #40]	; 0x28
   8a6e0:	9308      	str	r3, [sp, #32]
   8a6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a6e4:	b1d3      	cbz	r3, 8a71c <_dtoa_r+0x484>
   8a6e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a6e8:	2b00      	cmp	r3, #0
   8a6ea:	f000 82b8 	beq.w	8ac5e <_dtoa_r+0x9c6>
   8a6ee:	2f00      	cmp	r7, #0
   8a6f0:	dd10      	ble.n	8a714 <_dtoa_r+0x47c>
   8a6f2:	4631      	mov	r1, r6
   8a6f4:	463a      	mov	r2, r7
   8a6f6:	4620      	mov	r0, r4
   8a6f8:	f001 ff02 	bl	8c500 <__pow5mult>
   8a6fc:	464a      	mov	r2, r9
   8a6fe:	4601      	mov	r1, r0
   8a700:	4606      	mov	r6, r0
   8a702:	4620      	mov	r0, r4
   8a704:	f001 fe6a 	bl	8c3dc <__multiply>
   8a708:	4603      	mov	r3, r0
   8a70a:	4649      	mov	r1, r9
   8a70c:	4620      	mov	r0, r4
   8a70e:	4699      	mov	r9, r3
   8a710:	f001 fdbe 	bl	8c290 <_Bfree>
   8a714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a716:	1bda      	subs	r2, r3, r7
   8a718:	f040 82a2 	bne.w	8ac60 <_dtoa_r+0x9c8>
   8a71c:	2101      	movs	r1, #1
   8a71e:	4620      	mov	r0, r4
   8a720:	f001 fe52 	bl	8c3c8 <__i2b>
   8a724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a726:	4680      	mov	r8, r0
   8a728:	2b00      	cmp	r3, #0
   8a72a:	dd1f      	ble.n	8a76c <_dtoa_r+0x4d4>
   8a72c:	4601      	mov	r1, r0
   8a72e:	461a      	mov	r2, r3
   8a730:	4620      	mov	r0, r4
   8a732:	f001 fee5 	bl	8c500 <__pow5mult>
   8a736:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a738:	4680      	mov	r8, r0
   8a73a:	2b01      	cmp	r3, #1
   8a73c:	f340 8255 	ble.w	8abea <_dtoa_r+0x952>
   8a740:	2300      	movs	r3, #0
   8a742:	930c      	str	r3, [sp, #48]	; 0x30
   8a744:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8a748:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8a74c:	6918      	ldr	r0, [r3, #16]
   8a74e:	f001 fdeb 	bl	8c328 <__hi0bits>
   8a752:	f1c0 0020 	rsb	r0, r0, #32
   8a756:	e013      	b.n	8a780 <_dtoa_r+0x4e8>
   8a758:	f1c3 0520 	rsb	r5, r3, #32
   8a75c:	fa0a f005 	lsl.w	r0, sl, r5
   8a760:	e67b      	b.n	8a45a <_dtoa_r+0x1c2>
   8a762:	900e      	str	r0, [sp, #56]	; 0x38
   8a764:	e643      	b.n	8a3ee <_dtoa_r+0x156>
   8a766:	bf00      	nop
   8a768:	40240000 	.word	0x40240000
   8a76c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a76e:	2b01      	cmp	r3, #1
   8a770:	f340 8285 	ble.w	8ac7e <_dtoa_r+0x9e6>
   8a774:	2300      	movs	r3, #0
   8a776:	930c      	str	r3, [sp, #48]	; 0x30
   8a778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a77a:	2001      	movs	r0, #1
   8a77c:	2b00      	cmp	r3, #0
   8a77e:	d1e1      	bne.n	8a744 <_dtoa_r+0x4ac>
   8a780:	9a08      	ldr	r2, [sp, #32]
   8a782:	4410      	add	r0, r2
   8a784:	f010 001f 	ands.w	r0, r0, #31
   8a788:	f000 80a1 	beq.w	8a8ce <_dtoa_r+0x636>
   8a78c:	f1c0 0320 	rsb	r3, r0, #32
   8a790:	2b04      	cmp	r3, #4
   8a792:	f340 8486 	ble.w	8b0a2 <_dtoa_r+0xe0a>
   8a796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a798:	f1c0 001c 	rsb	r0, r0, #28
   8a79c:	4403      	add	r3, r0
   8a79e:	930a      	str	r3, [sp, #40]	; 0x28
   8a7a0:	4613      	mov	r3, r2
   8a7a2:	4403      	add	r3, r0
   8a7a4:	4405      	add	r5, r0
   8a7a6:	9308      	str	r3, [sp, #32]
   8a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a7aa:	2b00      	cmp	r3, #0
   8a7ac:	dd05      	ble.n	8a7ba <_dtoa_r+0x522>
   8a7ae:	4649      	mov	r1, r9
   8a7b0:	461a      	mov	r2, r3
   8a7b2:	4620      	mov	r0, r4
   8a7b4:	f001 fef4 	bl	8c5a0 <__lshift>
   8a7b8:	4681      	mov	r9, r0
   8a7ba:	9b08      	ldr	r3, [sp, #32]
   8a7bc:	2b00      	cmp	r3, #0
   8a7be:	dd05      	ble.n	8a7cc <_dtoa_r+0x534>
   8a7c0:	4641      	mov	r1, r8
   8a7c2:	461a      	mov	r2, r3
   8a7c4:	4620      	mov	r0, r4
   8a7c6:	f001 feeb 	bl	8c5a0 <__lshift>
   8a7ca:	4680      	mov	r8, r0
   8a7cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a7ce:	2b00      	cmp	r3, #0
   8a7d0:	f040 8086 	bne.w	8a8e0 <_dtoa_r+0x648>
   8a7d4:	9b07      	ldr	r3, [sp, #28]
   8a7d6:	2b00      	cmp	r3, #0
   8a7d8:	f340 8264 	ble.w	8aca4 <_dtoa_r+0xa0c>
   8a7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a7de:	2b00      	cmp	r3, #0
   8a7e0:	f000 8098 	beq.w	8a914 <_dtoa_r+0x67c>
   8a7e4:	2d00      	cmp	r5, #0
   8a7e6:	dd05      	ble.n	8a7f4 <_dtoa_r+0x55c>
   8a7e8:	4631      	mov	r1, r6
   8a7ea:	462a      	mov	r2, r5
   8a7ec:	4620      	mov	r0, r4
   8a7ee:	f001 fed7 	bl	8c5a0 <__lshift>
   8a7f2:	4606      	mov	r6, r0
   8a7f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a7f6:	2b00      	cmp	r3, #0
   8a7f8:	f040 8336 	bne.w	8ae68 <_dtoa_r+0xbd0>
   8a7fc:	9608      	str	r6, [sp, #32]
   8a7fe:	9b07      	ldr	r3, [sp, #28]
   8a800:	9a04      	ldr	r2, [sp, #16]
   8a802:	3b01      	subs	r3, #1
   8a804:	18d3      	adds	r3, r2, r3
   8a806:	930b      	str	r3, [sp, #44]	; 0x2c
   8a808:	4617      	mov	r7, r2
   8a80a:	f00a 0301 	and.w	r3, sl, #1
   8a80e:	46c2      	mov	sl, r8
   8a810:	f8dd b020 	ldr.w	fp, [sp, #32]
   8a814:	930c      	str	r3, [sp, #48]	; 0x30
   8a816:	4651      	mov	r1, sl
   8a818:	4648      	mov	r0, r9
   8a81a:	f7ff fca9 	bl	8a170 <quorem>
   8a81e:	4631      	mov	r1, r6
   8a820:	4605      	mov	r5, r0
   8a822:	4648      	mov	r0, r9
   8a824:	f001 ff0c 	bl	8c640 <__mcmp>
   8a828:	465a      	mov	r2, fp
   8a82a:	9007      	str	r0, [sp, #28]
   8a82c:	4651      	mov	r1, sl
   8a82e:	4620      	mov	r0, r4
   8a830:	f001 ff22 	bl	8c678 <__mdiff>
   8a834:	68c2      	ldr	r2, [r0, #12]
   8a836:	4680      	mov	r8, r0
   8a838:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8a83c:	2a00      	cmp	r2, #0
   8a83e:	f040 8229 	bne.w	8ac94 <_dtoa_r+0x9fc>
   8a842:	4601      	mov	r1, r0
   8a844:	4648      	mov	r0, r9
   8a846:	930a      	str	r3, [sp, #40]	; 0x28
   8a848:	f001 fefa 	bl	8c640 <__mcmp>
   8a84c:	4641      	mov	r1, r8
   8a84e:	9008      	str	r0, [sp, #32]
   8a850:	4620      	mov	r0, r4
   8a852:	f001 fd1d 	bl	8c290 <_Bfree>
   8a856:	9a08      	ldr	r2, [sp, #32]
   8a858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a85a:	b932      	cbnz	r2, 8a86a <_dtoa_r+0x5d2>
   8a85c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a85e:	b921      	cbnz	r1, 8a86a <_dtoa_r+0x5d2>
   8a860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a862:	2a00      	cmp	r2, #0
   8a864:	f000 83ee 	beq.w	8b044 <_dtoa_r+0xdac>
   8a868:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8a86a:	9907      	ldr	r1, [sp, #28]
   8a86c:	2900      	cmp	r1, #0
   8a86e:	f2c0 829f 	blt.w	8adb0 <_dtoa_r+0xb18>
   8a872:	d105      	bne.n	8a880 <_dtoa_r+0x5e8>
   8a874:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a876:	b919      	cbnz	r1, 8a880 <_dtoa_r+0x5e8>
   8a878:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a87a:	2900      	cmp	r1, #0
   8a87c:	f000 8298 	beq.w	8adb0 <_dtoa_r+0xb18>
   8a880:	2a00      	cmp	r2, #0
   8a882:	f300 8305 	bgt.w	8ae90 <_dtoa_r+0xbf8>
   8a886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a888:	f107 0801 	add.w	r8, r7, #1
   8a88c:	4297      	cmp	r7, r2
   8a88e:	703b      	strb	r3, [r7, #0]
   8a890:	4645      	mov	r5, r8
   8a892:	f000 830b 	beq.w	8aeac <_dtoa_r+0xc14>
   8a896:	4649      	mov	r1, r9
   8a898:	2300      	movs	r3, #0
   8a89a:	220a      	movs	r2, #10
   8a89c:	4620      	mov	r0, r4
   8a89e:	f001 fd01 	bl	8c2a4 <__multadd>
   8a8a2:	455e      	cmp	r6, fp
   8a8a4:	4681      	mov	r9, r0
   8a8a6:	4631      	mov	r1, r6
   8a8a8:	f04f 0300 	mov.w	r3, #0
   8a8ac:	f04f 020a 	mov.w	r2, #10
   8a8b0:	4620      	mov	r0, r4
   8a8b2:	f000 81e9 	beq.w	8ac88 <_dtoa_r+0x9f0>
   8a8b6:	f001 fcf5 	bl	8c2a4 <__multadd>
   8a8ba:	4659      	mov	r1, fp
   8a8bc:	4606      	mov	r6, r0
   8a8be:	2300      	movs	r3, #0
   8a8c0:	220a      	movs	r2, #10
   8a8c2:	4620      	mov	r0, r4
   8a8c4:	f001 fcee 	bl	8c2a4 <__multadd>
   8a8c8:	4647      	mov	r7, r8
   8a8ca:	4683      	mov	fp, r0
   8a8cc:	e7a3      	b.n	8a816 <_dtoa_r+0x57e>
   8a8ce:	201c      	movs	r0, #28
   8a8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a8d2:	4405      	add	r5, r0
   8a8d4:	4403      	add	r3, r0
   8a8d6:	930a      	str	r3, [sp, #40]	; 0x28
   8a8d8:	9b08      	ldr	r3, [sp, #32]
   8a8da:	4403      	add	r3, r0
   8a8dc:	9308      	str	r3, [sp, #32]
   8a8de:	e763      	b.n	8a7a8 <_dtoa_r+0x510>
   8a8e0:	4641      	mov	r1, r8
   8a8e2:	4648      	mov	r0, r9
   8a8e4:	f001 feac 	bl	8c640 <__mcmp>
   8a8e8:	2800      	cmp	r0, #0
   8a8ea:	f6bf af73 	bge.w	8a7d4 <_dtoa_r+0x53c>
   8a8ee:	9f02      	ldr	r7, [sp, #8]
   8a8f0:	4649      	mov	r1, r9
   8a8f2:	2300      	movs	r3, #0
   8a8f4:	220a      	movs	r2, #10
   8a8f6:	4620      	mov	r0, r4
   8a8f8:	3f01      	subs	r7, #1
   8a8fa:	9702      	str	r7, [sp, #8]
   8a8fc:	f001 fcd2 	bl	8c2a4 <__multadd>
   8a900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a902:	4681      	mov	r9, r0
   8a904:	2b00      	cmp	r3, #0
   8a906:	f040 83b5 	bne.w	8b074 <_dtoa_r+0xddc>
   8a90a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a90c:	2b00      	cmp	r3, #0
   8a90e:	f340 83be 	ble.w	8b08e <_dtoa_r+0xdf6>
   8a912:	9307      	str	r3, [sp, #28]
   8a914:	f8dd a010 	ldr.w	sl, [sp, #16]
   8a918:	9f07      	ldr	r7, [sp, #28]
   8a91a:	4655      	mov	r5, sl
   8a91c:	e006      	b.n	8a92c <_dtoa_r+0x694>
   8a91e:	4649      	mov	r1, r9
   8a920:	2300      	movs	r3, #0
   8a922:	220a      	movs	r2, #10
   8a924:	4620      	mov	r0, r4
   8a926:	f001 fcbd 	bl	8c2a4 <__multadd>
   8a92a:	4681      	mov	r9, r0
   8a92c:	4641      	mov	r1, r8
   8a92e:	4648      	mov	r0, r9
   8a930:	f7ff fc1e 	bl	8a170 <quorem>
   8a934:	3030      	adds	r0, #48	; 0x30
   8a936:	f805 0b01 	strb.w	r0, [r5], #1
   8a93a:	eba5 030a 	sub.w	r3, r5, sl
   8a93e:	42bb      	cmp	r3, r7
   8a940:	dbed      	blt.n	8a91e <_dtoa_r+0x686>
   8a942:	9b04      	ldr	r3, [sp, #16]
   8a944:	9a07      	ldr	r2, [sp, #28]
   8a946:	4682      	mov	sl, r0
   8a948:	2a01      	cmp	r2, #1
   8a94a:	bfac      	ite	ge
   8a94c:	189b      	addge	r3, r3, r2
   8a94e:	3301      	addlt	r3, #1
   8a950:	f04f 0b00 	mov.w	fp, #0
   8a954:	461d      	mov	r5, r3
   8a956:	4649      	mov	r1, r9
   8a958:	2201      	movs	r2, #1
   8a95a:	4620      	mov	r0, r4
   8a95c:	f001 fe20 	bl	8c5a0 <__lshift>
   8a960:	4641      	mov	r1, r8
   8a962:	4681      	mov	r9, r0
   8a964:	f001 fe6c 	bl	8c640 <__mcmp>
   8a968:	2800      	cmp	r0, #0
   8a96a:	f340 823f 	ble.w	8adec <_dtoa_r+0xb54>
   8a96e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8a972:	1e6b      	subs	r3, r5, #1
   8a974:	9904      	ldr	r1, [sp, #16]
   8a976:	e004      	b.n	8a982 <_dtoa_r+0x6ea>
   8a978:	428b      	cmp	r3, r1
   8a97a:	f000 81ae 	beq.w	8acda <_dtoa_r+0xa42>
   8a97e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8a982:	2a39      	cmp	r2, #57	; 0x39
   8a984:	f103 0501 	add.w	r5, r3, #1
   8a988:	d0f6      	beq.n	8a978 <_dtoa_r+0x6e0>
   8a98a:	3201      	adds	r2, #1
   8a98c:	701a      	strb	r2, [r3, #0]
   8a98e:	4641      	mov	r1, r8
   8a990:	4620      	mov	r0, r4
   8a992:	f001 fc7d 	bl	8c290 <_Bfree>
   8a996:	2e00      	cmp	r6, #0
   8a998:	f43f ae3d 	beq.w	8a616 <_dtoa_r+0x37e>
   8a99c:	f1bb 0f00 	cmp.w	fp, #0
   8a9a0:	d005      	beq.n	8a9ae <_dtoa_r+0x716>
   8a9a2:	45b3      	cmp	fp, r6
   8a9a4:	d003      	beq.n	8a9ae <_dtoa_r+0x716>
   8a9a6:	4659      	mov	r1, fp
   8a9a8:	4620      	mov	r0, r4
   8a9aa:	f001 fc71 	bl	8c290 <_Bfree>
   8a9ae:	4631      	mov	r1, r6
   8a9b0:	4620      	mov	r0, r4
   8a9b2:	f001 fc6d 	bl	8c290 <_Bfree>
   8a9b6:	e62e      	b.n	8a616 <_dtoa_r+0x37e>
   8a9b8:	2300      	movs	r3, #0
   8a9ba:	930b      	str	r3, [sp, #44]	; 0x2c
   8a9bc:	9b02      	ldr	r3, [sp, #8]
   8a9be:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8a9c0:	4413      	add	r3, r2
   8a9c2:	930f      	str	r3, [sp, #60]	; 0x3c
   8a9c4:	3301      	adds	r3, #1
   8a9c6:	2b01      	cmp	r3, #1
   8a9c8:	461f      	mov	r7, r3
   8a9ca:	461e      	mov	r6, r3
   8a9cc:	bfb8      	it	lt
   8a9ce:	2701      	movlt	r7, #1
   8a9d0:	9307      	str	r3, [sp, #28]
   8a9d2:	2100      	movs	r1, #0
   8a9d4:	2f17      	cmp	r7, #23
   8a9d6:	6461      	str	r1, [r4, #68]	; 0x44
   8a9d8:	d90a      	bls.n	8a9f0 <_dtoa_r+0x758>
   8a9da:	2201      	movs	r2, #1
   8a9dc:	2304      	movs	r3, #4
   8a9de:	005b      	lsls	r3, r3, #1
   8a9e0:	f103 0014 	add.w	r0, r3, #20
   8a9e4:	4287      	cmp	r7, r0
   8a9e6:	4611      	mov	r1, r2
   8a9e8:	f102 0201 	add.w	r2, r2, #1
   8a9ec:	d2f7      	bcs.n	8a9de <_dtoa_r+0x746>
   8a9ee:	6461      	str	r1, [r4, #68]	; 0x44
   8a9f0:	4620      	mov	r0, r4
   8a9f2:	f001 fc27 	bl	8c244 <_Balloc>
   8a9f6:	2e0e      	cmp	r6, #14
   8a9f8:	9004      	str	r0, [sp, #16]
   8a9fa:	6420      	str	r0, [r4, #64]	; 0x40
   8a9fc:	f63f ad47 	bhi.w	8a48e <_dtoa_r+0x1f6>
   8aa00:	2d00      	cmp	r5, #0
   8aa02:	f43f ad44 	beq.w	8a48e <_dtoa_r+0x1f6>
   8aa06:	9902      	ldr	r1, [sp, #8]
   8aa08:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   8aa0c:	2900      	cmp	r1, #0
   8aa0e:	f340 8203 	ble.w	8ae18 <_dtoa_r+0xb80>
   8aa12:	4bb9      	ldr	r3, [pc, #740]	; (8acf8 <_dtoa_r+0xa60>)
   8aa14:	f001 020f 	and.w	r2, r1, #15
   8aa18:	110d      	asrs	r5, r1, #4
   8aa1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8aa1e:	06e9      	lsls	r1, r5, #27
   8aa20:	e9d3 6700 	ldrd	r6, r7, [r3]
   8aa24:	f140 81af 	bpl.w	8ad86 <_dtoa_r+0xaee>
   8aa28:	4bb4      	ldr	r3, [pc, #720]	; (8acfc <_dtoa_r+0xa64>)
   8aa2a:	4650      	mov	r0, sl
   8aa2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8aa30:	4659      	mov	r1, fp
   8aa32:	f002 fe99 	bl	8d768 <__aeabi_ddiv>
   8aa36:	f04f 0a03 	mov.w	sl, #3
   8aa3a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   8aa3e:	f005 050f 	and.w	r5, r5, #15
   8aa42:	b18d      	cbz	r5, 8aa68 <_dtoa_r+0x7d0>
   8aa44:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8acfc <_dtoa_r+0xa64>
   8aa48:	07ea      	lsls	r2, r5, #31
   8aa4a:	d509      	bpl.n	8aa60 <_dtoa_r+0x7c8>
   8aa4c:	e9d8 2300 	ldrd	r2, r3, [r8]
   8aa50:	4630      	mov	r0, r6
   8aa52:	4639      	mov	r1, r7
   8aa54:	f002 fd5e 	bl	8d514 <__aeabi_dmul>
   8aa58:	4606      	mov	r6, r0
   8aa5a:	460f      	mov	r7, r1
   8aa5c:	f10a 0a01 	add.w	sl, sl, #1
   8aa60:	106d      	asrs	r5, r5, #1
   8aa62:	f108 0808 	add.w	r8, r8, #8
   8aa66:	d1ef      	bne.n	8aa48 <_dtoa_r+0x7b0>
   8aa68:	463b      	mov	r3, r7
   8aa6a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8aa6e:	4632      	mov	r2, r6
   8aa70:	f002 fe7a 	bl	8d768 <__aeabi_ddiv>
   8aa74:	4607      	mov	r7, r0
   8aa76:	4688      	mov	r8, r1
   8aa78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8aa7a:	b143      	cbz	r3, 8aa8e <_dtoa_r+0x7f6>
   8aa7c:	2200      	movs	r2, #0
   8aa7e:	4ba0      	ldr	r3, [pc, #640]	; (8ad00 <_dtoa_r+0xa68>)
   8aa80:	4638      	mov	r0, r7
   8aa82:	4641      	mov	r1, r8
   8aa84:	f002 ffb8 	bl	8d9f8 <__aeabi_dcmplt>
   8aa88:	2800      	cmp	r0, #0
   8aa8a:	f040 8287 	bne.w	8af9c <_dtoa_r+0xd04>
   8aa8e:	4650      	mov	r0, sl
   8aa90:	f002 fcda 	bl	8d448 <__aeabi_i2d>
   8aa94:	463a      	mov	r2, r7
   8aa96:	4643      	mov	r3, r8
   8aa98:	f002 fd3c 	bl	8d514 <__aeabi_dmul>
   8aa9c:	4b99      	ldr	r3, [pc, #612]	; (8ad04 <_dtoa_r+0xa6c>)
   8aa9e:	2200      	movs	r2, #0
   8aaa0:	f002 fb86 	bl	8d1b0 <__adddf3>
   8aaa4:	9b07      	ldr	r3, [sp, #28]
   8aaa6:	4605      	mov	r5, r0
   8aaa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8aaac:	2b00      	cmp	r3, #0
   8aaae:	f000 813f 	beq.w	8ad30 <_dtoa_r+0xa98>
   8aab2:	9b02      	ldr	r3, [sp, #8]
   8aab4:	9315      	str	r3, [sp, #84]	; 0x54
   8aab6:	9b07      	ldr	r3, [sp, #28]
   8aab8:	9312      	str	r3, [sp, #72]	; 0x48
   8aaba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8aabc:	2b00      	cmp	r3, #0
   8aabe:	f000 81fb 	beq.w	8aeb8 <_dtoa_r+0xc20>
   8aac2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8aac4:	4b8c      	ldr	r3, [pc, #560]	; (8acf8 <_dtoa_r+0xa60>)
   8aac6:	2000      	movs	r0, #0
   8aac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8aacc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8aad0:	498d      	ldr	r1, [pc, #564]	; (8ad08 <_dtoa_r+0xa70>)
   8aad2:	f002 fe49 	bl	8d768 <__aeabi_ddiv>
   8aad6:	462a      	mov	r2, r5
   8aad8:	4633      	mov	r3, r6
   8aada:	f002 fb67 	bl	8d1ac <__aeabi_dsub>
   8aade:	4682      	mov	sl, r0
   8aae0:	468b      	mov	fp, r1
   8aae2:	4638      	mov	r0, r7
   8aae4:	4641      	mov	r1, r8
   8aae6:	f002 ffc5 	bl	8da74 <__aeabi_d2iz>
   8aaea:	4605      	mov	r5, r0
   8aaec:	f002 fcac 	bl	8d448 <__aeabi_i2d>
   8aaf0:	4602      	mov	r2, r0
   8aaf2:	460b      	mov	r3, r1
   8aaf4:	4638      	mov	r0, r7
   8aaf6:	4641      	mov	r1, r8
   8aaf8:	f002 fb58 	bl	8d1ac <__aeabi_dsub>
   8aafc:	3530      	adds	r5, #48	; 0x30
   8aafe:	fa5f f885 	uxtb.w	r8, r5
   8ab02:	9d04      	ldr	r5, [sp, #16]
   8ab04:	4606      	mov	r6, r0
   8ab06:	460f      	mov	r7, r1
   8ab08:	f885 8000 	strb.w	r8, [r5]
   8ab0c:	4602      	mov	r2, r0
   8ab0e:	460b      	mov	r3, r1
   8ab10:	4650      	mov	r0, sl
   8ab12:	4659      	mov	r1, fp
   8ab14:	3501      	adds	r5, #1
   8ab16:	f002 ff8d 	bl	8da34 <__aeabi_dcmpgt>
   8ab1a:	2800      	cmp	r0, #0
   8ab1c:	d154      	bne.n	8abc8 <_dtoa_r+0x930>
   8ab1e:	4632      	mov	r2, r6
   8ab20:	463b      	mov	r3, r7
   8ab22:	2000      	movs	r0, #0
   8ab24:	4976      	ldr	r1, [pc, #472]	; (8ad00 <_dtoa_r+0xa68>)
   8ab26:	f002 fb41 	bl	8d1ac <__aeabi_dsub>
   8ab2a:	4602      	mov	r2, r0
   8ab2c:	460b      	mov	r3, r1
   8ab2e:	4650      	mov	r0, sl
   8ab30:	4659      	mov	r1, fp
   8ab32:	f002 ff7f 	bl	8da34 <__aeabi_dcmpgt>
   8ab36:	2800      	cmp	r0, #0
   8ab38:	f040 8270 	bne.w	8b01c <_dtoa_r+0xd84>
   8ab3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8ab3e:	2a01      	cmp	r2, #1
   8ab40:	f000 8112 	beq.w	8ad68 <_dtoa_r+0xad0>
   8ab44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8ab46:	9a04      	ldr	r2, [sp, #16]
   8ab48:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8ab4c:	4413      	add	r3, r2
   8ab4e:	4699      	mov	r9, r3
   8ab50:	e00f      	b.n	8ab72 <_dtoa_r+0x8da>
   8ab52:	4632      	mov	r2, r6
   8ab54:	463b      	mov	r3, r7
   8ab56:	2000      	movs	r0, #0
   8ab58:	4969      	ldr	r1, [pc, #420]	; (8ad00 <_dtoa_r+0xa68>)
   8ab5a:	f002 fb27 	bl	8d1ac <__aeabi_dsub>
   8ab5e:	4652      	mov	r2, sl
   8ab60:	465b      	mov	r3, fp
   8ab62:	f002 ff49 	bl	8d9f8 <__aeabi_dcmplt>
   8ab66:	2800      	cmp	r0, #0
   8ab68:	f040 8256 	bne.w	8b018 <_dtoa_r+0xd80>
   8ab6c:	454d      	cmp	r5, r9
   8ab6e:	f000 80f9 	beq.w	8ad64 <_dtoa_r+0xacc>
   8ab72:	4650      	mov	r0, sl
   8ab74:	4659      	mov	r1, fp
   8ab76:	2200      	movs	r2, #0
   8ab78:	4b64      	ldr	r3, [pc, #400]	; (8ad0c <_dtoa_r+0xa74>)
   8ab7a:	f002 fccb 	bl	8d514 <__aeabi_dmul>
   8ab7e:	2200      	movs	r2, #0
   8ab80:	4b62      	ldr	r3, [pc, #392]	; (8ad0c <_dtoa_r+0xa74>)
   8ab82:	4682      	mov	sl, r0
   8ab84:	468b      	mov	fp, r1
   8ab86:	4630      	mov	r0, r6
   8ab88:	4639      	mov	r1, r7
   8ab8a:	f002 fcc3 	bl	8d514 <__aeabi_dmul>
   8ab8e:	460f      	mov	r7, r1
   8ab90:	4606      	mov	r6, r0
   8ab92:	f002 ff6f 	bl	8da74 <__aeabi_d2iz>
   8ab96:	4680      	mov	r8, r0
   8ab98:	f002 fc56 	bl	8d448 <__aeabi_i2d>
   8ab9c:	4602      	mov	r2, r0
   8ab9e:	460b      	mov	r3, r1
   8aba0:	4630      	mov	r0, r6
   8aba2:	4639      	mov	r1, r7
   8aba4:	f002 fb02 	bl	8d1ac <__aeabi_dsub>
   8aba8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8abac:	fa5f f888 	uxtb.w	r8, r8
   8abb0:	f805 8b01 	strb.w	r8, [r5], #1
   8abb4:	4652      	mov	r2, sl
   8abb6:	465b      	mov	r3, fp
   8abb8:	4606      	mov	r6, r0
   8abba:	460f      	mov	r7, r1
   8abbc:	f002 ff1c 	bl	8d9f8 <__aeabi_dcmplt>
   8abc0:	2800      	cmp	r0, #0
   8abc2:	d0c6      	beq.n	8ab52 <_dtoa_r+0x8ba>
   8abc4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8abc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8abca:	9302      	str	r3, [sp, #8]
   8abcc:	e523      	b.n	8a616 <_dtoa_r+0x37e>
   8abce:	2300      	movs	r3, #0
   8abd0:	930b      	str	r3, [sp, #44]	; 0x2c
   8abd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8abd4:	2b00      	cmp	r3, #0
   8abd6:	f340 80dd 	ble.w	8ad94 <_dtoa_r+0xafc>
   8abda:	461f      	mov	r7, r3
   8abdc:	461e      	mov	r6, r3
   8abde:	930f      	str	r3, [sp, #60]	; 0x3c
   8abe0:	9307      	str	r3, [sp, #28]
   8abe2:	e6f6      	b.n	8a9d2 <_dtoa_r+0x73a>
   8abe4:	2301      	movs	r3, #1
   8abe6:	930b      	str	r3, [sp, #44]	; 0x2c
   8abe8:	e7f3      	b.n	8abd2 <_dtoa_r+0x93a>
   8abea:	f1ba 0f00 	cmp.w	sl, #0
   8abee:	f47f ada7 	bne.w	8a740 <_dtoa_r+0x4a8>
   8abf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8abf6:	2b00      	cmp	r3, #0
   8abf8:	f47f adbc 	bne.w	8a774 <_dtoa_r+0x4dc>
   8abfc:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   8ac00:	0d3f      	lsrs	r7, r7, #20
   8ac02:	053f      	lsls	r7, r7, #20
   8ac04:	2f00      	cmp	r7, #0
   8ac06:	f000 820d 	beq.w	8b024 <_dtoa_r+0xd8c>
   8ac0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ac0c:	3301      	adds	r3, #1
   8ac0e:	930a      	str	r3, [sp, #40]	; 0x28
   8ac10:	9b08      	ldr	r3, [sp, #32]
   8ac12:	3301      	adds	r3, #1
   8ac14:	9308      	str	r3, [sp, #32]
   8ac16:	2301      	movs	r3, #1
   8ac18:	930c      	str	r3, [sp, #48]	; 0x30
   8ac1a:	e5ad      	b.n	8a778 <_dtoa_r+0x4e0>
   8ac1c:	9b07      	ldr	r3, [sp, #28]
   8ac1e:	2b00      	cmp	r3, #0
   8ac20:	f73f ac48 	bgt.w	8a4b4 <_dtoa_r+0x21c>
   8ac24:	f040 8222 	bne.w	8b06c <_dtoa_r+0xdd4>
   8ac28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8ac2c:	2200      	movs	r2, #0
   8ac2e:	4b38      	ldr	r3, [pc, #224]	; (8ad10 <_dtoa_r+0xa78>)
   8ac30:	f002 fc70 	bl	8d514 <__aeabi_dmul>
   8ac34:	4652      	mov	r2, sl
   8ac36:	465b      	mov	r3, fp
   8ac38:	f002 fef2 	bl	8da20 <__aeabi_dcmpge>
   8ac3c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   8ac40:	4646      	mov	r6, r8
   8ac42:	2800      	cmp	r0, #0
   8ac44:	d041      	beq.n	8acca <_dtoa_r+0xa32>
   8ac46:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ac48:	9d04      	ldr	r5, [sp, #16]
   8ac4a:	43db      	mvns	r3, r3
   8ac4c:	9302      	str	r3, [sp, #8]
   8ac4e:	4641      	mov	r1, r8
   8ac50:	4620      	mov	r0, r4
   8ac52:	f001 fb1d 	bl	8c290 <_Bfree>
   8ac56:	2e00      	cmp	r6, #0
   8ac58:	f43f acdd 	beq.w	8a616 <_dtoa_r+0x37e>
   8ac5c:	e6a7      	b.n	8a9ae <_dtoa_r+0x716>
   8ac5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ac60:	4649      	mov	r1, r9
   8ac62:	4620      	mov	r0, r4
   8ac64:	f001 fc4c 	bl	8c500 <__pow5mult>
   8ac68:	4681      	mov	r9, r0
   8ac6a:	e557      	b.n	8a71c <_dtoa_r+0x484>
   8ac6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8ac6e:	2a00      	cmp	r2, #0
   8ac70:	f000 8188 	beq.w	8af84 <_dtoa_r+0xcec>
   8ac74:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8ac78:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8ac7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8ac7c:	e4f2      	b.n	8a664 <_dtoa_r+0x3cc>
   8ac7e:	f1ba 0f00 	cmp.w	sl, #0
   8ac82:	f47f ad77 	bne.w	8a774 <_dtoa_r+0x4dc>
   8ac86:	e7b4      	b.n	8abf2 <_dtoa_r+0x95a>
   8ac88:	f001 fb0c 	bl	8c2a4 <__multadd>
   8ac8c:	4647      	mov	r7, r8
   8ac8e:	4606      	mov	r6, r0
   8ac90:	4683      	mov	fp, r0
   8ac92:	e5c0      	b.n	8a816 <_dtoa_r+0x57e>
   8ac94:	4601      	mov	r1, r0
   8ac96:	4620      	mov	r0, r4
   8ac98:	9308      	str	r3, [sp, #32]
   8ac9a:	f001 faf9 	bl	8c290 <_Bfree>
   8ac9e:	2201      	movs	r2, #1
   8aca0:	9b08      	ldr	r3, [sp, #32]
   8aca2:	e5e2      	b.n	8a86a <_dtoa_r+0x5d2>
   8aca4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8aca6:	2b02      	cmp	r3, #2
   8aca8:	f77f ad98 	ble.w	8a7dc <_dtoa_r+0x544>
   8acac:	9b07      	ldr	r3, [sp, #28]
   8acae:	2b00      	cmp	r3, #0
   8acb0:	d1c9      	bne.n	8ac46 <_dtoa_r+0x9ae>
   8acb2:	4641      	mov	r1, r8
   8acb4:	2205      	movs	r2, #5
   8acb6:	4620      	mov	r0, r4
   8acb8:	f001 faf4 	bl	8c2a4 <__multadd>
   8acbc:	4601      	mov	r1, r0
   8acbe:	4680      	mov	r8, r0
   8acc0:	4648      	mov	r0, r9
   8acc2:	f001 fcbd 	bl	8c640 <__mcmp>
   8acc6:	2800      	cmp	r0, #0
   8acc8:	ddbd      	ble.n	8ac46 <_dtoa_r+0x9ae>
   8acca:	2331      	movs	r3, #49	; 0x31
   8accc:	9a02      	ldr	r2, [sp, #8]
   8acce:	9904      	ldr	r1, [sp, #16]
   8acd0:	3201      	adds	r2, #1
   8acd2:	9202      	str	r2, [sp, #8]
   8acd4:	700b      	strb	r3, [r1, #0]
   8acd6:	1c4d      	adds	r5, r1, #1
   8acd8:	e7b9      	b.n	8ac4e <_dtoa_r+0x9b6>
   8acda:	2331      	movs	r3, #49	; 0x31
   8acdc:	9a02      	ldr	r2, [sp, #8]
   8acde:	3201      	adds	r2, #1
   8ace0:	9202      	str	r2, [sp, #8]
   8ace2:	9a04      	ldr	r2, [sp, #16]
   8ace4:	7013      	strb	r3, [r2, #0]
   8ace6:	e652      	b.n	8a98e <_dtoa_r+0x6f6>
   8ace8:	2301      	movs	r3, #1
   8acea:	930b      	str	r3, [sp, #44]	; 0x2c
   8acec:	e666      	b.n	8a9bc <_dtoa_r+0x724>
   8acee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8acf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8acf4:	e48f      	b.n	8a616 <_dtoa_r+0x37e>
   8acf6:	bf00      	nop
   8acf8:	0008de08 	.word	0x0008de08
   8acfc:	0008dde0 	.word	0x0008dde0
   8ad00:	3ff00000 	.word	0x3ff00000
   8ad04:	401c0000 	.word	0x401c0000
   8ad08:	3fe00000 	.word	0x3fe00000
   8ad0c:	40240000 	.word	0x40240000
   8ad10:	40140000 	.word	0x40140000
   8ad14:	4650      	mov	r0, sl
   8ad16:	f002 fb97 	bl	8d448 <__aeabi_i2d>
   8ad1a:	463a      	mov	r2, r7
   8ad1c:	4643      	mov	r3, r8
   8ad1e:	f002 fbf9 	bl	8d514 <__aeabi_dmul>
   8ad22:	2200      	movs	r2, #0
   8ad24:	4bc1      	ldr	r3, [pc, #772]	; (8b02c <_dtoa_r+0xd94>)
   8ad26:	f002 fa43 	bl	8d1b0 <__adddf3>
   8ad2a:	4605      	mov	r5, r0
   8ad2c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8ad30:	4641      	mov	r1, r8
   8ad32:	2200      	movs	r2, #0
   8ad34:	4bbe      	ldr	r3, [pc, #760]	; (8b030 <_dtoa_r+0xd98>)
   8ad36:	4638      	mov	r0, r7
   8ad38:	f002 fa38 	bl	8d1ac <__aeabi_dsub>
   8ad3c:	462a      	mov	r2, r5
   8ad3e:	4633      	mov	r3, r6
   8ad40:	4682      	mov	sl, r0
   8ad42:	468b      	mov	fp, r1
   8ad44:	f002 fe76 	bl	8da34 <__aeabi_dcmpgt>
   8ad48:	4680      	mov	r8, r0
   8ad4a:	2800      	cmp	r0, #0
   8ad4c:	f040 8110 	bne.w	8af70 <_dtoa_r+0xcd8>
   8ad50:	462a      	mov	r2, r5
   8ad52:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8ad56:	4650      	mov	r0, sl
   8ad58:	4659      	mov	r1, fp
   8ad5a:	f002 fe4d 	bl	8d9f8 <__aeabi_dcmplt>
   8ad5e:	b118      	cbz	r0, 8ad68 <_dtoa_r+0xad0>
   8ad60:	4646      	mov	r6, r8
   8ad62:	e770      	b.n	8ac46 <_dtoa_r+0x9ae>
   8ad64:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8ad68:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8ad6c:	f7ff bb8f 	b.w	8a48e <_dtoa_r+0x1f6>
   8ad70:	9804      	ldr	r0, [sp, #16]
   8ad72:	f7ff bac0 	b.w	8a2f6 <_dtoa_r+0x5e>
   8ad76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ad78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8ad7a:	1afb      	subs	r3, r7, r3
   8ad7c:	441a      	add	r2, r3
   8ad7e:	970c      	str	r7, [sp, #48]	; 0x30
   8ad80:	920d      	str	r2, [sp, #52]	; 0x34
   8ad82:	2700      	movs	r7, #0
   8ad84:	e468      	b.n	8a658 <_dtoa_r+0x3c0>
   8ad86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8ad8a:	f04f 0a02 	mov.w	sl, #2
   8ad8e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8ad92:	e656      	b.n	8aa42 <_dtoa_r+0x7aa>
   8ad94:	2100      	movs	r1, #0
   8ad96:	2301      	movs	r3, #1
   8ad98:	4620      	mov	r0, r4
   8ad9a:	6461      	str	r1, [r4, #68]	; 0x44
   8ad9c:	9325      	str	r3, [sp, #148]	; 0x94
   8ad9e:	f001 fa51 	bl	8c244 <_Balloc>
   8ada2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ada4:	9004      	str	r0, [sp, #16]
   8ada6:	9307      	str	r3, [sp, #28]
   8ada8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8adaa:	6420      	str	r0, [r4, #64]	; 0x40
   8adac:	930f      	str	r3, [sp, #60]	; 0x3c
   8adae:	e627      	b.n	8aa00 <_dtoa_r+0x768>
   8adb0:	2a00      	cmp	r2, #0
   8adb2:	46d0      	mov	r8, sl
   8adb4:	f8cd b020 	str.w	fp, [sp, #32]
   8adb8:	469a      	mov	sl, r3
   8adba:	dd11      	ble.n	8ade0 <_dtoa_r+0xb48>
   8adbc:	4649      	mov	r1, r9
   8adbe:	2201      	movs	r2, #1
   8adc0:	4620      	mov	r0, r4
   8adc2:	f001 fbed 	bl	8c5a0 <__lshift>
   8adc6:	4641      	mov	r1, r8
   8adc8:	4681      	mov	r9, r0
   8adca:	f001 fc39 	bl	8c640 <__mcmp>
   8adce:	2800      	cmp	r0, #0
   8add0:	f340 8145 	ble.w	8b05e <_dtoa_r+0xdc6>
   8add4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   8add8:	f000 8105 	beq.w	8afe6 <_dtoa_r+0xd4e>
   8addc:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   8ade0:	46b3      	mov	fp, r6
   8ade2:	f887 a000 	strb.w	sl, [r7]
   8ade6:	1c7d      	adds	r5, r7, #1
   8ade8:	9e08      	ldr	r6, [sp, #32]
   8adea:	e5d0      	b.n	8a98e <_dtoa_r+0x6f6>
   8adec:	d104      	bne.n	8adf8 <_dtoa_r+0xb60>
   8adee:	f01a 0f01 	tst.w	sl, #1
   8adf2:	d001      	beq.n	8adf8 <_dtoa_r+0xb60>
   8adf4:	e5bb      	b.n	8a96e <_dtoa_r+0x6d6>
   8adf6:	4615      	mov	r5, r2
   8adf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8adfc:	1e6a      	subs	r2, r5, #1
   8adfe:	2b30      	cmp	r3, #48	; 0x30
   8ae00:	d0f9      	beq.n	8adf6 <_dtoa_r+0xb5e>
   8ae02:	e5c4      	b.n	8a98e <_dtoa_r+0x6f6>
   8ae04:	2230      	movs	r2, #48	; 0x30
   8ae06:	9904      	ldr	r1, [sp, #16]
   8ae08:	700a      	strb	r2, [r1, #0]
   8ae0a:	9a02      	ldr	r2, [sp, #8]
   8ae0c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8ae10:	3201      	adds	r2, #1
   8ae12:	9202      	str	r2, [sp, #8]
   8ae14:	f7ff bbfb 	b.w	8a60e <_dtoa_r+0x376>
   8ae18:	f000 80bb 	beq.w	8af92 <_dtoa_r+0xcfa>
   8ae1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8ae20:	9b02      	ldr	r3, [sp, #8]
   8ae22:	f04f 0a02 	mov.w	sl, #2
   8ae26:	425d      	negs	r5, r3
   8ae28:	4b82      	ldr	r3, [pc, #520]	; (8b034 <_dtoa_r+0xd9c>)
   8ae2a:	f005 020f 	and.w	r2, r5, #15
   8ae2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ae36:	f002 fb6d 	bl	8d514 <__aeabi_dmul>
   8ae3a:	112d      	asrs	r5, r5, #4
   8ae3c:	4607      	mov	r7, r0
   8ae3e:	4688      	mov	r8, r1
   8ae40:	f43f ae1a 	beq.w	8aa78 <_dtoa_r+0x7e0>
   8ae44:	4e7c      	ldr	r6, [pc, #496]	; (8b038 <_dtoa_r+0xda0>)
   8ae46:	07eb      	lsls	r3, r5, #31
   8ae48:	d509      	bpl.n	8ae5e <_dtoa_r+0xbc6>
   8ae4a:	e9d6 2300 	ldrd	r2, r3, [r6]
   8ae4e:	4638      	mov	r0, r7
   8ae50:	4641      	mov	r1, r8
   8ae52:	f002 fb5f 	bl	8d514 <__aeabi_dmul>
   8ae56:	4607      	mov	r7, r0
   8ae58:	4688      	mov	r8, r1
   8ae5a:	f10a 0a01 	add.w	sl, sl, #1
   8ae5e:	106d      	asrs	r5, r5, #1
   8ae60:	f106 0608 	add.w	r6, r6, #8
   8ae64:	d1ef      	bne.n	8ae46 <_dtoa_r+0xbae>
   8ae66:	e607      	b.n	8aa78 <_dtoa_r+0x7e0>
   8ae68:	6871      	ldr	r1, [r6, #4]
   8ae6a:	4620      	mov	r0, r4
   8ae6c:	f001 f9ea 	bl	8c244 <_Balloc>
   8ae70:	4605      	mov	r5, r0
   8ae72:	6933      	ldr	r3, [r6, #16]
   8ae74:	f106 010c 	add.w	r1, r6, #12
   8ae78:	3302      	adds	r3, #2
   8ae7a:	009a      	lsls	r2, r3, #2
   8ae7c:	300c      	adds	r0, #12
   8ae7e:	f7fc fe01 	bl	87a84 <memcpy>
   8ae82:	4629      	mov	r1, r5
   8ae84:	2201      	movs	r2, #1
   8ae86:	4620      	mov	r0, r4
   8ae88:	f001 fb8a 	bl	8c5a0 <__lshift>
   8ae8c:	9008      	str	r0, [sp, #32]
   8ae8e:	e4b6      	b.n	8a7fe <_dtoa_r+0x566>
   8ae90:	2b39      	cmp	r3, #57	; 0x39
   8ae92:	f8cd b020 	str.w	fp, [sp, #32]
   8ae96:	46d0      	mov	r8, sl
   8ae98:	f000 80a5 	beq.w	8afe6 <_dtoa_r+0xd4e>
   8ae9c:	f103 0a01 	add.w	sl, r3, #1
   8aea0:	46b3      	mov	fp, r6
   8aea2:	f887 a000 	strb.w	sl, [r7]
   8aea6:	1c7d      	adds	r5, r7, #1
   8aea8:	9e08      	ldr	r6, [sp, #32]
   8aeaa:	e570      	b.n	8a98e <_dtoa_r+0x6f6>
   8aeac:	465a      	mov	r2, fp
   8aeae:	46d0      	mov	r8, sl
   8aeb0:	46b3      	mov	fp, r6
   8aeb2:	469a      	mov	sl, r3
   8aeb4:	4616      	mov	r6, r2
   8aeb6:	e54e      	b.n	8a956 <_dtoa_r+0x6be>
   8aeb8:	9812      	ldr	r0, [sp, #72]	; 0x48
   8aeba:	495e      	ldr	r1, [pc, #376]	; (8b034 <_dtoa_r+0xd9c>)
   8aebc:	462a      	mov	r2, r5
   8aebe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8aec2:	4633      	mov	r3, r6
   8aec4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8aec8:	f002 fb24 	bl	8d514 <__aeabi_dmul>
   8aecc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   8aed0:	4638      	mov	r0, r7
   8aed2:	4641      	mov	r1, r8
   8aed4:	f002 fdce 	bl	8da74 <__aeabi_d2iz>
   8aed8:	4605      	mov	r5, r0
   8aeda:	f002 fab5 	bl	8d448 <__aeabi_i2d>
   8aede:	4602      	mov	r2, r0
   8aee0:	460b      	mov	r3, r1
   8aee2:	4638      	mov	r0, r7
   8aee4:	4641      	mov	r1, r8
   8aee6:	f002 f961 	bl	8d1ac <__aeabi_dsub>
   8aeea:	4606      	mov	r6, r0
   8aeec:	9812      	ldr	r0, [sp, #72]	; 0x48
   8aeee:	9a04      	ldr	r2, [sp, #16]
   8aef0:	3530      	adds	r5, #48	; 0x30
   8aef2:	2801      	cmp	r0, #1
   8aef4:	7015      	strb	r5, [r2, #0]
   8aef6:	460f      	mov	r7, r1
   8aef8:	f102 0501 	add.w	r5, r2, #1
   8aefc:	d026      	beq.n	8af4c <_dtoa_r+0xcb4>
   8aefe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8af00:	9a04      	ldr	r2, [sp, #16]
   8af02:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8af06:	4413      	add	r3, r2
   8af08:	f04f 0a00 	mov.w	sl, #0
   8af0c:	4699      	mov	r9, r3
   8af0e:	f8df b130 	ldr.w	fp, [pc, #304]	; 8b040 <_dtoa_r+0xda8>
   8af12:	4652      	mov	r2, sl
   8af14:	465b      	mov	r3, fp
   8af16:	4630      	mov	r0, r6
   8af18:	4639      	mov	r1, r7
   8af1a:	f002 fafb 	bl	8d514 <__aeabi_dmul>
   8af1e:	460f      	mov	r7, r1
   8af20:	4606      	mov	r6, r0
   8af22:	f002 fda7 	bl	8da74 <__aeabi_d2iz>
   8af26:	4680      	mov	r8, r0
   8af28:	f002 fa8e 	bl	8d448 <__aeabi_i2d>
   8af2c:	4602      	mov	r2, r0
   8af2e:	460b      	mov	r3, r1
   8af30:	4630      	mov	r0, r6
   8af32:	4639      	mov	r1, r7
   8af34:	f002 f93a 	bl	8d1ac <__aeabi_dsub>
   8af38:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8af3c:	f805 8b01 	strb.w	r8, [r5], #1
   8af40:	454d      	cmp	r5, r9
   8af42:	4606      	mov	r6, r0
   8af44:	460f      	mov	r7, r1
   8af46:	d1e4      	bne.n	8af12 <_dtoa_r+0xc7a>
   8af48:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8af4c:	2200      	movs	r2, #0
   8af4e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8af52:	4b3a      	ldr	r3, [pc, #232]	; (8b03c <_dtoa_r+0xda4>)
   8af54:	f002 f92c 	bl	8d1b0 <__adddf3>
   8af58:	4632      	mov	r2, r6
   8af5a:	463b      	mov	r3, r7
   8af5c:	f002 fd4c 	bl	8d9f8 <__aeabi_dcmplt>
   8af60:	2800      	cmp	r0, #0
   8af62:	d046      	beq.n	8aff2 <_dtoa_r+0xd5a>
   8af64:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8af66:	9302      	str	r3, [sp, #8]
   8af68:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8af6c:	f7ff bb42 	b.w	8a5f4 <_dtoa_r+0x35c>
   8af70:	f04f 0800 	mov.w	r8, #0
   8af74:	4646      	mov	r6, r8
   8af76:	e6a8      	b.n	8acca <_dtoa_r+0xa32>
   8af78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8af7a:	9a07      	ldr	r2, [sp, #28]
   8af7c:	1a9d      	subs	r5, r3, r2
   8af7e:	2300      	movs	r3, #0
   8af80:	f7ff bb70 	b.w	8a664 <_dtoa_r+0x3cc>
   8af84:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8af86:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8af88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8af8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8af8e:	f7ff bb69 	b.w	8a664 <_dtoa_r+0x3cc>
   8af92:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8af96:	f04f 0a02 	mov.w	sl, #2
   8af9a:	e56d      	b.n	8aa78 <_dtoa_r+0x7e0>
   8af9c:	9b07      	ldr	r3, [sp, #28]
   8af9e:	2b00      	cmp	r3, #0
   8afa0:	f43f aeb8 	beq.w	8ad14 <_dtoa_r+0xa7c>
   8afa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8afa6:	2b00      	cmp	r3, #0
   8afa8:	f77f aede 	ble.w	8ad68 <_dtoa_r+0xad0>
   8afac:	2200      	movs	r2, #0
   8afae:	4b24      	ldr	r3, [pc, #144]	; (8b040 <_dtoa_r+0xda8>)
   8afb0:	4638      	mov	r0, r7
   8afb2:	4641      	mov	r1, r8
   8afb4:	f002 faae 	bl	8d514 <__aeabi_dmul>
   8afb8:	4607      	mov	r7, r0
   8afba:	4688      	mov	r8, r1
   8afbc:	f10a 0001 	add.w	r0, sl, #1
   8afc0:	f002 fa42 	bl	8d448 <__aeabi_i2d>
   8afc4:	463a      	mov	r2, r7
   8afc6:	4643      	mov	r3, r8
   8afc8:	f002 faa4 	bl	8d514 <__aeabi_dmul>
   8afcc:	2200      	movs	r2, #0
   8afce:	4b17      	ldr	r3, [pc, #92]	; (8b02c <_dtoa_r+0xd94>)
   8afd0:	f002 f8ee 	bl	8d1b0 <__adddf3>
   8afd4:	9a02      	ldr	r2, [sp, #8]
   8afd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8afd8:	3a01      	subs	r2, #1
   8afda:	4605      	mov	r5, r0
   8afdc:	9215      	str	r2, [sp, #84]	; 0x54
   8afde:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8afe2:	9312      	str	r3, [sp, #72]	; 0x48
   8afe4:	e569      	b.n	8aaba <_dtoa_r+0x822>
   8afe6:	2239      	movs	r2, #57	; 0x39
   8afe8:	46b3      	mov	fp, r6
   8afea:	703a      	strb	r2, [r7, #0]
   8afec:	9e08      	ldr	r6, [sp, #32]
   8afee:	1c7d      	adds	r5, r7, #1
   8aff0:	e4bf      	b.n	8a972 <_dtoa_r+0x6da>
   8aff2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8aff6:	2000      	movs	r0, #0
   8aff8:	4910      	ldr	r1, [pc, #64]	; (8b03c <_dtoa_r+0xda4>)
   8affa:	f002 f8d7 	bl	8d1ac <__aeabi_dsub>
   8affe:	4632      	mov	r2, r6
   8b000:	463b      	mov	r3, r7
   8b002:	f002 fd17 	bl	8da34 <__aeabi_dcmpgt>
   8b006:	b908      	cbnz	r0, 8b00c <_dtoa_r+0xd74>
   8b008:	e6ae      	b.n	8ad68 <_dtoa_r+0xad0>
   8b00a:	4615      	mov	r5, r2
   8b00c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8b010:	1e6a      	subs	r2, r5, #1
   8b012:	2b30      	cmp	r3, #48	; 0x30
   8b014:	d0f9      	beq.n	8b00a <_dtoa_r+0xd72>
   8b016:	e5d7      	b.n	8abc8 <_dtoa_r+0x930>
   8b018:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8b01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8b01e:	9302      	str	r3, [sp, #8]
   8b020:	f7ff bae8 	b.w	8a5f4 <_dtoa_r+0x35c>
   8b024:	970c      	str	r7, [sp, #48]	; 0x30
   8b026:	f7ff bba7 	b.w	8a778 <_dtoa_r+0x4e0>
   8b02a:	bf00      	nop
   8b02c:	401c0000 	.word	0x401c0000
   8b030:	40140000 	.word	0x40140000
   8b034:	0008de08 	.word	0x0008de08
   8b038:	0008dde0 	.word	0x0008dde0
   8b03c:	3fe00000 	.word	0x3fe00000
   8b040:	40240000 	.word	0x40240000
   8b044:	2b39      	cmp	r3, #57	; 0x39
   8b046:	f8cd b020 	str.w	fp, [sp, #32]
   8b04a:	46d0      	mov	r8, sl
   8b04c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8b050:	469a      	mov	sl, r3
   8b052:	d0c8      	beq.n	8afe6 <_dtoa_r+0xd4e>
   8b054:	f1bb 0f00 	cmp.w	fp, #0
   8b058:	f73f aec0 	bgt.w	8addc <_dtoa_r+0xb44>
   8b05c:	e6c0      	b.n	8ade0 <_dtoa_r+0xb48>
   8b05e:	f47f aebf 	bne.w	8ade0 <_dtoa_r+0xb48>
   8b062:	f01a 0f01 	tst.w	sl, #1
   8b066:	f43f aebb 	beq.w	8ade0 <_dtoa_r+0xb48>
   8b06a:	e6b3      	b.n	8add4 <_dtoa_r+0xb3c>
   8b06c:	f04f 0800 	mov.w	r8, #0
   8b070:	4646      	mov	r6, r8
   8b072:	e5e8      	b.n	8ac46 <_dtoa_r+0x9ae>
   8b074:	4631      	mov	r1, r6
   8b076:	2300      	movs	r3, #0
   8b078:	220a      	movs	r2, #10
   8b07a:	4620      	mov	r0, r4
   8b07c:	f001 f912 	bl	8c2a4 <__multadd>
   8b080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8b082:	4606      	mov	r6, r0
   8b084:	2b00      	cmp	r3, #0
   8b086:	dd07      	ble.n	8b098 <_dtoa_r+0xe00>
   8b088:	9307      	str	r3, [sp, #28]
   8b08a:	f7ff bbab 	b.w	8a7e4 <_dtoa_r+0x54c>
   8b08e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b090:	2b02      	cmp	r3, #2
   8b092:	dc1f      	bgt.n	8b0d4 <_dtoa_r+0xe3c>
   8b094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8b096:	e43c      	b.n	8a912 <_dtoa_r+0x67a>
   8b098:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b09a:	2b02      	cmp	r3, #2
   8b09c:	dc1a      	bgt.n	8b0d4 <_dtoa_r+0xe3c>
   8b09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8b0a0:	e7f2      	b.n	8b088 <_dtoa_r+0xdf0>
   8b0a2:	f43f ab81 	beq.w	8a7a8 <_dtoa_r+0x510>
   8b0a6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8b0aa:	e411      	b.n	8a8d0 <_dtoa_r+0x638>
   8b0ac:	2500      	movs	r5, #0
   8b0ae:	4620      	mov	r0, r4
   8b0b0:	6465      	str	r5, [r4, #68]	; 0x44
   8b0b2:	4629      	mov	r1, r5
   8b0b4:	f001 f8c6 	bl	8c244 <_Balloc>
   8b0b8:	f04f 33ff 	mov.w	r3, #4294967295
   8b0bc:	9307      	str	r3, [sp, #28]
   8b0be:	930f      	str	r3, [sp, #60]	; 0x3c
   8b0c0:	2301      	movs	r3, #1
   8b0c2:	9004      	str	r0, [sp, #16]
   8b0c4:	9525      	str	r5, [sp, #148]	; 0x94
   8b0c6:	6420      	str	r0, [r4, #64]	; 0x40
   8b0c8:	930b      	str	r3, [sp, #44]	; 0x2c
   8b0ca:	f7ff b9e0 	b.w	8a48e <_dtoa_r+0x1f6>
   8b0ce:	2501      	movs	r5, #1
   8b0d0:	f7ff b9a8 	b.w	8a424 <_dtoa_r+0x18c>
   8b0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8b0d6:	9307      	str	r3, [sp, #28]
   8b0d8:	e5e8      	b.n	8acac <_dtoa_r+0xa14>
   8b0da:	bf00      	nop

0008b0dc <__sflush_r>:
   8b0dc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b0e4:	b29a      	uxth	r2, r3
   8b0e6:	460d      	mov	r5, r1
   8b0e8:	0711      	lsls	r1, r2, #28
   8b0ea:	4680      	mov	r8, r0
   8b0ec:	d43a      	bmi.n	8b164 <__sflush_r+0x88>
   8b0ee:	686a      	ldr	r2, [r5, #4]
   8b0f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8b0f4:	2a00      	cmp	r2, #0
   8b0f6:	81ab      	strh	r3, [r5, #12]
   8b0f8:	dd70      	ble.n	8b1dc <__sflush_r+0x100>
   8b0fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b0fc:	2c00      	cmp	r4, #0
   8b0fe:	d04a      	beq.n	8b196 <__sflush_r+0xba>
   8b100:	2200      	movs	r2, #0
   8b102:	b29b      	uxth	r3, r3
   8b104:	f8d8 6000 	ldr.w	r6, [r8]
   8b108:	f8c8 2000 	str.w	r2, [r8]
   8b10c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   8b110:	d068      	beq.n	8b1e4 <__sflush_r+0x108>
   8b112:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8b114:	075f      	lsls	r7, r3, #29
   8b116:	d505      	bpl.n	8b124 <__sflush_r+0x48>
   8b118:	6869      	ldr	r1, [r5, #4]
   8b11a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8b11c:	1a52      	subs	r2, r2, r1
   8b11e:	b10b      	cbz	r3, 8b124 <__sflush_r+0x48>
   8b120:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8b122:	1ad2      	subs	r2, r2, r3
   8b124:	2300      	movs	r3, #0
   8b126:	69e9      	ldr	r1, [r5, #28]
   8b128:	4640      	mov	r0, r8
   8b12a:	47a0      	blx	r4
   8b12c:	1c44      	adds	r4, r0, #1
   8b12e:	d03d      	beq.n	8b1ac <__sflush_r+0xd0>
   8b130:	2100      	movs	r1, #0
   8b132:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8b136:	692a      	ldr	r2, [r5, #16]
   8b138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b13c:	81ab      	strh	r3, [r5, #12]
   8b13e:	04db      	lsls	r3, r3, #19
   8b140:	6069      	str	r1, [r5, #4]
   8b142:	602a      	str	r2, [r5, #0]
   8b144:	d448      	bmi.n	8b1d8 <__sflush_r+0xfc>
   8b146:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8b148:	f8c8 6000 	str.w	r6, [r8]
   8b14c:	b319      	cbz	r1, 8b196 <__sflush_r+0xba>
   8b14e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8b152:	4299      	cmp	r1, r3
   8b154:	d002      	beq.n	8b15c <__sflush_r+0x80>
   8b156:	4640      	mov	r0, r8
   8b158:	f000 f9da 	bl	8b510 <_free_r>
   8b15c:	2000      	movs	r0, #0
   8b15e:	6328      	str	r0, [r5, #48]	; 0x30
   8b160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b164:	692e      	ldr	r6, [r5, #16]
   8b166:	b1b6      	cbz	r6, 8b196 <__sflush_r+0xba>
   8b168:	0791      	lsls	r1, r2, #30
   8b16a:	bf18      	it	ne
   8b16c:	2300      	movne	r3, #0
   8b16e:	682c      	ldr	r4, [r5, #0]
   8b170:	bf08      	it	eq
   8b172:	696b      	ldreq	r3, [r5, #20]
   8b174:	602e      	str	r6, [r5, #0]
   8b176:	1ba4      	subs	r4, r4, r6
   8b178:	60ab      	str	r3, [r5, #8]
   8b17a:	e00a      	b.n	8b192 <__sflush_r+0xb6>
   8b17c:	4623      	mov	r3, r4
   8b17e:	4632      	mov	r2, r6
   8b180:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8b182:	69e9      	ldr	r1, [r5, #28]
   8b184:	4640      	mov	r0, r8
   8b186:	47b8      	blx	r7
   8b188:	2800      	cmp	r0, #0
   8b18a:	eba4 0400 	sub.w	r4, r4, r0
   8b18e:	4406      	add	r6, r0
   8b190:	dd04      	ble.n	8b19c <__sflush_r+0xc0>
   8b192:	2c00      	cmp	r4, #0
   8b194:	dcf2      	bgt.n	8b17c <__sflush_r+0xa0>
   8b196:	2000      	movs	r0, #0
   8b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b19c:	89ab      	ldrh	r3, [r5, #12]
   8b19e:	f04f 30ff 	mov.w	r0, #4294967295
   8b1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b1a6:	81ab      	strh	r3, [r5, #12]
   8b1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b1ac:	f8d8 4000 	ldr.w	r4, [r8]
   8b1b0:	2c1d      	cmp	r4, #29
   8b1b2:	d8f3      	bhi.n	8b19c <__sflush_r+0xc0>
   8b1b4:	4b16      	ldr	r3, [pc, #88]	; (8b210 <__sflush_r+0x134>)
   8b1b6:	40e3      	lsrs	r3, r4
   8b1b8:	43db      	mvns	r3, r3
   8b1ba:	f013 0301 	ands.w	r3, r3, #1
   8b1be:	d1ed      	bne.n	8b19c <__sflush_r+0xc0>
   8b1c0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8b1c4:	6929      	ldr	r1, [r5, #16]
   8b1c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8b1ca:	81aa      	strh	r2, [r5, #12]
   8b1cc:	04d2      	lsls	r2, r2, #19
   8b1ce:	606b      	str	r3, [r5, #4]
   8b1d0:	6029      	str	r1, [r5, #0]
   8b1d2:	d5b8      	bpl.n	8b146 <__sflush_r+0x6a>
   8b1d4:	2c00      	cmp	r4, #0
   8b1d6:	d1b6      	bne.n	8b146 <__sflush_r+0x6a>
   8b1d8:	6528      	str	r0, [r5, #80]	; 0x50
   8b1da:	e7b4      	b.n	8b146 <__sflush_r+0x6a>
   8b1dc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8b1de:	2a00      	cmp	r2, #0
   8b1e0:	dc8b      	bgt.n	8b0fa <__sflush_r+0x1e>
   8b1e2:	e7d8      	b.n	8b196 <__sflush_r+0xba>
   8b1e4:	2301      	movs	r3, #1
   8b1e6:	69e9      	ldr	r1, [r5, #28]
   8b1e8:	4640      	mov	r0, r8
   8b1ea:	47a0      	blx	r4
   8b1ec:	1c43      	adds	r3, r0, #1
   8b1ee:	4602      	mov	r2, r0
   8b1f0:	d002      	beq.n	8b1f8 <__sflush_r+0x11c>
   8b1f2:	89ab      	ldrh	r3, [r5, #12]
   8b1f4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b1f6:	e78d      	b.n	8b114 <__sflush_r+0x38>
   8b1f8:	f8d8 3000 	ldr.w	r3, [r8]
   8b1fc:	2b00      	cmp	r3, #0
   8b1fe:	d0f8      	beq.n	8b1f2 <__sflush_r+0x116>
   8b200:	2b1d      	cmp	r3, #29
   8b202:	d001      	beq.n	8b208 <__sflush_r+0x12c>
   8b204:	2b16      	cmp	r3, #22
   8b206:	d1c9      	bne.n	8b19c <__sflush_r+0xc0>
   8b208:	f8c8 6000 	str.w	r6, [r8]
   8b20c:	e7c3      	b.n	8b196 <__sflush_r+0xba>
   8b20e:	bf00      	nop
   8b210:	20400001 	.word	0x20400001

0008b214 <_fflush_r>:
   8b214:	b538      	push	{r3, r4, r5, lr}
   8b216:	460d      	mov	r5, r1
   8b218:	4604      	mov	r4, r0
   8b21a:	b108      	cbz	r0, 8b220 <_fflush_r+0xc>
   8b21c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b21e:	b1bb      	cbz	r3, 8b250 <_fflush_r+0x3c>
   8b220:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8b224:	b188      	cbz	r0, 8b24a <_fflush_r+0x36>
   8b226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8b228:	07db      	lsls	r3, r3, #31
   8b22a:	d401      	bmi.n	8b230 <_fflush_r+0x1c>
   8b22c:	0581      	lsls	r1, r0, #22
   8b22e:	d517      	bpl.n	8b260 <_fflush_r+0x4c>
   8b230:	4620      	mov	r0, r4
   8b232:	4629      	mov	r1, r5
   8b234:	f7ff ff52 	bl	8b0dc <__sflush_r>
   8b238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8b23a:	4604      	mov	r4, r0
   8b23c:	07da      	lsls	r2, r3, #31
   8b23e:	d402      	bmi.n	8b246 <_fflush_r+0x32>
   8b240:	89ab      	ldrh	r3, [r5, #12]
   8b242:	059b      	lsls	r3, r3, #22
   8b244:	d507      	bpl.n	8b256 <_fflush_r+0x42>
   8b246:	4620      	mov	r0, r4
   8b248:	bd38      	pop	{r3, r4, r5, pc}
   8b24a:	4604      	mov	r4, r0
   8b24c:	4620      	mov	r0, r4
   8b24e:	bd38      	pop	{r3, r4, r5, pc}
   8b250:	f000 f838 	bl	8b2c4 <__sinit>
   8b254:	e7e4      	b.n	8b220 <_fflush_r+0xc>
   8b256:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8b258:	f000 fc04 	bl	8ba64 <__retarget_lock_release_recursive>
   8b25c:	4620      	mov	r0, r4
   8b25e:	bd38      	pop	{r3, r4, r5, pc}
   8b260:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8b262:	f000 fbfd 	bl	8ba60 <__retarget_lock_acquire_recursive>
   8b266:	e7e3      	b.n	8b230 <_fflush_r+0x1c>

0008b268 <_cleanup_r>:
   8b268:	4901      	ldr	r1, [pc, #4]	; (8b270 <_cleanup_r+0x8>)
   8b26a:	f000 bbb1 	b.w	8b9d0 <_fwalk_reent>
   8b26e:	bf00      	nop
   8b270:	0008d03d 	.word	0x0008d03d

0008b274 <std.isra.0>:
   8b274:	2300      	movs	r3, #0
   8b276:	b510      	push	{r4, lr}
   8b278:	4604      	mov	r4, r0
   8b27a:	8181      	strh	r1, [r0, #12]
   8b27c:	81c2      	strh	r2, [r0, #14]
   8b27e:	6003      	str	r3, [r0, #0]
   8b280:	6043      	str	r3, [r0, #4]
   8b282:	6083      	str	r3, [r0, #8]
   8b284:	6643      	str	r3, [r0, #100]	; 0x64
   8b286:	6103      	str	r3, [r0, #16]
   8b288:	6143      	str	r3, [r0, #20]
   8b28a:	6183      	str	r3, [r0, #24]
   8b28c:	4619      	mov	r1, r3
   8b28e:	2208      	movs	r2, #8
   8b290:	305c      	adds	r0, #92	; 0x5c
   8b292:	f7fc fc6d 	bl	87b70 <memset>
   8b296:	4807      	ldr	r0, [pc, #28]	; (8b2b4 <std.isra.0+0x40>)
   8b298:	4907      	ldr	r1, [pc, #28]	; (8b2b8 <std.isra.0+0x44>)
   8b29a:	4a08      	ldr	r2, [pc, #32]	; (8b2bc <std.isra.0+0x48>)
   8b29c:	4b08      	ldr	r3, [pc, #32]	; (8b2c0 <std.isra.0+0x4c>)
   8b29e:	6220      	str	r0, [r4, #32]
   8b2a0:	61e4      	str	r4, [r4, #28]
   8b2a2:	6261      	str	r1, [r4, #36]	; 0x24
   8b2a4:	62a2      	str	r2, [r4, #40]	; 0x28
   8b2a6:	62e3      	str	r3, [r4, #44]	; 0x2c
   8b2a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8b2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b2b0:	f000 bbd2 	b.w	8ba58 <__retarget_lock_init_recursive>
   8b2b4:	0008cbcd 	.word	0x0008cbcd
   8b2b8:	0008cbf1 	.word	0x0008cbf1
   8b2bc:	0008cc2d 	.word	0x0008cc2d
   8b2c0:	0008cc4d 	.word	0x0008cc4d

0008b2c4 <__sinit>:
   8b2c4:	b510      	push	{r4, lr}
   8b2c6:	4604      	mov	r4, r0
   8b2c8:	4814      	ldr	r0, [pc, #80]	; (8b31c <__sinit+0x58>)
   8b2ca:	f000 fbc9 	bl	8ba60 <__retarget_lock_acquire_recursive>
   8b2ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8b2d0:	b9fa      	cbnz	r2, 8b312 <__sinit+0x4e>
   8b2d2:	2003      	movs	r0, #3
   8b2d4:	4912      	ldr	r1, [pc, #72]	; (8b320 <__sinit+0x5c>)
   8b2d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8b2da:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8b2de:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8b2e2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8b2e6:	63e1      	str	r1, [r4, #60]	; 0x3c
   8b2e8:	6860      	ldr	r0, [r4, #4]
   8b2ea:	2104      	movs	r1, #4
   8b2ec:	f7ff ffc2 	bl	8b274 <std.isra.0>
   8b2f0:	68a0      	ldr	r0, [r4, #8]
   8b2f2:	2201      	movs	r2, #1
   8b2f4:	2109      	movs	r1, #9
   8b2f6:	f7ff ffbd 	bl	8b274 <std.isra.0>
   8b2fa:	68e0      	ldr	r0, [r4, #12]
   8b2fc:	2202      	movs	r2, #2
   8b2fe:	2112      	movs	r1, #18
   8b300:	f7ff ffb8 	bl	8b274 <std.isra.0>
   8b304:	2301      	movs	r3, #1
   8b306:	4805      	ldr	r0, [pc, #20]	; (8b31c <__sinit+0x58>)
   8b308:	63a3      	str	r3, [r4, #56]	; 0x38
   8b30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b30e:	f000 bba9 	b.w	8ba64 <__retarget_lock_release_recursive>
   8b312:	4802      	ldr	r0, [pc, #8]	; (8b31c <__sinit+0x58>)
   8b314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b318:	f000 bba4 	b.w	8ba64 <__retarget_lock_release_recursive>
   8b31c:	20002e10 	.word	0x20002e10
   8b320:	0008b269 	.word	0x0008b269

0008b324 <__sfp_lock_acquire>:
   8b324:	4801      	ldr	r0, [pc, #4]	; (8b32c <__sfp_lock_acquire+0x8>)
   8b326:	f000 bb9b 	b.w	8ba60 <__retarget_lock_acquire_recursive>
   8b32a:	bf00      	nop
   8b32c:	20002e24 	.word	0x20002e24

0008b330 <__sfp_lock_release>:
   8b330:	4801      	ldr	r0, [pc, #4]	; (8b338 <__sfp_lock_release+0x8>)
   8b332:	f000 bb97 	b.w	8ba64 <__retarget_lock_release_recursive>
   8b336:	bf00      	nop
   8b338:	20002e24 	.word	0x20002e24

0008b33c <__libc_fini_array>:
   8b33c:	b538      	push	{r3, r4, r5, lr}
   8b33e:	4c0a      	ldr	r4, [pc, #40]	; (8b368 <__libc_fini_array+0x2c>)
   8b340:	4d0a      	ldr	r5, [pc, #40]	; (8b36c <__libc_fini_array+0x30>)
   8b342:	1b64      	subs	r4, r4, r5
   8b344:	10a4      	asrs	r4, r4, #2
   8b346:	d00a      	beq.n	8b35e <__libc_fini_array+0x22>
   8b348:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8b34c:	3b01      	subs	r3, #1
   8b34e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8b352:	3c01      	subs	r4, #1
   8b354:	f855 3904 	ldr.w	r3, [r5], #-4
   8b358:	4798      	blx	r3
   8b35a:	2c00      	cmp	r4, #0
   8b35c:	d1f9      	bne.n	8b352 <__libc_fini_array+0x16>
   8b35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b362:	f002 be47 	b.w	8dff4 <_fini>
   8b366:	bf00      	nop
   8b368:	0008e004 	.word	0x0008e004
   8b36c:	0008e000 	.word	0x0008e000

0008b370 <__fputwc>:
   8b370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b374:	b083      	sub	sp, #12
   8b376:	4607      	mov	r7, r0
   8b378:	4688      	mov	r8, r1
   8b37a:	4614      	mov	r4, r2
   8b37c:	f000 fb50 	bl	8ba20 <__locale_mb_cur_max>
   8b380:	2801      	cmp	r0, #1
   8b382:	d033      	beq.n	8b3ec <__fputwc+0x7c>
   8b384:	4642      	mov	r2, r8
   8b386:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b38a:	a901      	add	r1, sp, #4
   8b38c:	4638      	mov	r0, r7
   8b38e:	f001 fd65 	bl	8ce5c <_wcrtomb_r>
   8b392:	1c42      	adds	r2, r0, #1
   8b394:	4606      	mov	r6, r0
   8b396:	d022      	beq.n	8b3de <__fputwc+0x6e>
   8b398:	b390      	cbz	r0, 8b400 <__fputwc+0x90>
   8b39a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b39e:	2500      	movs	r5, #0
   8b3a0:	f10d 0904 	add.w	r9, sp, #4
   8b3a4:	e008      	b.n	8b3b8 <__fputwc+0x48>
   8b3a6:	6823      	ldr	r3, [r4, #0]
   8b3a8:	1c5a      	adds	r2, r3, #1
   8b3aa:	6022      	str	r2, [r4, #0]
   8b3ac:	7019      	strb	r1, [r3, #0]
   8b3ae:	3501      	adds	r5, #1
   8b3b0:	42b5      	cmp	r5, r6
   8b3b2:	d225      	bcs.n	8b400 <__fputwc+0x90>
   8b3b4:	f815 1009 	ldrb.w	r1, [r5, r9]
   8b3b8:	68a3      	ldr	r3, [r4, #8]
   8b3ba:	3b01      	subs	r3, #1
   8b3bc:	2b00      	cmp	r3, #0
   8b3be:	60a3      	str	r3, [r4, #8]
   8b3c0:	daf1      	bge.n	8b3a6 <__fputwc+0x36>
   8b3c2:	69a2      	ldr	r2, [r4, #24]
   8b3c4:	4293      	cmp	r3, r2
   8b3c6:	db01      	blt.n	8b3cc <__fputwc+0x5c>
   8b3c8:	290a      	cmp	r1, #10
   8b3ca:	d1ec      	bne.n	8b3a6 <__fputwc+0x36>
   8b3cc:	4622      	mov	r2, r4
   8b3ce:	4638      	mov	r0, r7
   8b3d0:	f001 fcec 	bl	8cdac <__swbuf_r>
   8b3d4:	1c43      	adds	r3, r0, #1
   8b3d6:	d1ea      	bne.n	8b3ae <__fputwc+0x3e>
   8b3d8:	b003      	add	sp, #12
   8b3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b3de:	89a3      	ldrh	r3, [r4, #12]
   8b3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b3e4:	81a3      	strh	r3, [r4, #12]
   8b3e6:	b003      	add	sp, #12
   8b3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b3ec:	f108 33ff 	add.w	r3, r8, #4294967295
   8b3f0:	2bfe      	cmp	r3, #254	; 0xfe
   8b3f2:	d8c7      	bhi.n	8b384 <__fputwc+0x14>
   8b3f4:	fa5f f188 	uxtb.w	r1, r8
   8b3f8:	4606      	mov	r6, r0
   8b3fa:	f88d 1004 	strb.w	r1, [sp, #4]
   8b3fe:	e7ce      	b.n	8b39e <__fputwc+0x2e>
   8b400:	4640      	mov	r0, r8
   8b402:	b003      	add	sp, #12
   8b404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b408 <_fputwc_r>:
   8b408:	b530      	push	{r4, r5, lr}
   8b40a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b40c:	4614      	mov	r4, r2
   8b40e:	f013 0f01 	tst.w	r3, #1
   8b412:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b416:	b083      	sub	sp, #12
   8b418:	4605      	mov	r5, r0
   8b41a:	b29a      	uxth	r2, r3
   8b41c:	d101      	bne.n	8b422 <_fputwc_r+0x1a>
   8b41e:	0590      	lsls	r0, r2, #22
   8b420:	d51c      	bpl.n	8b45c <_fputwc_r+0x54>
   8b422:	0490      	lsls	r0, r2, #18
   8b424:	d406      	bmi.n	8b434 <_fputwc_r+0x2c>
   8b426:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b42c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b430:	81a3      	strh	r3, [r4, #12]
   8b432:	6662      	str	r2, [r4, #100]	; 0x64
   8b434:	4628      	mov	r0, r5
   8b436:	4622      	mov	r2, r4
   8b438:	f7ff ff9a 	bl	8b370 <__fputwc>
   8b43c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b43e:	4605      	mov	r5, r0
   8b440:	07da      	lsls	r2, r3, #31
   8b442:	d402      	bmi.n	8b44a <_fputwc_r+0x42>
   8b444:	89a3      	ldrh	r3, [r4, #12]
   8b446:	059b      	lsls	r3, r3, #22
   8b448:	d502      	bpl.n	8b450 <_fputwc_r+0x48>
   8b44a:	4628      	mov	r0, r5
   8b44c:	b003      	add	sp, #12
   8b44e:	bd30      	pop	{r4, r5, pc}
   8b450:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b452:	f000 fb07 	bl	8ba64 <__retarget_lock_release_recursive>
   8b456:	4628      	mov	r0, r5
   8b458:	b003      	add	sp, #12
   8b45a:	bd30      	pop	{r4, r5, pc}
   8b45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b45e:	9101      	str	r1, [sp, #4]
   8b460:	f000 fafe 	bl	8ba60 <__retarget_lock_acquire_recursive>
   8b464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b468:	9901      	ldr	r1, [sp, #4]
   8b46a:	b29a      	uxth	r2, r3
   8b46c:	e7d9      	b.n	8b422 <_fputwc_r+0x1a>
   8b46e:	bf00      	nop

0008b470 <_malloc_trim_r>:
   8b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b472:	460c      	mov	r4, r1
   8b474:	4f23      	ldr	r7, [pc, #140]	; (8b504 <_malloc_trim_r+0x94>)
   8b476:	4606      	mov	r6, r0
   8b478:	f000 fed8 	bl	8c22c <__malloc_lock>
   8b47c:	68bb      	ldr	r3, [r7, #8]
   8b47e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8b482:	685d      	ldr	r5, [r3, #4]
   8b484:	310f      	adds	r1, #15
   8b486:	f025 0503 	bic.w	r5, r5, #3
   8b48a:	4429      	add	r1, r5
   8b48c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8b490:	f021 010f 	bic.w	r1, r1, #15
   8b494:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8b498:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8b49c:	db07      	blt.n	8b4ae <_malloc_trim_r+0x3e>
   8b49e:	2100      	movs	r1, #0
   8b4a0:	4630      	mov	r0, r6
   8b4a2:	f001 fb81 	bl	8cba8 <_sbrk_r>
   8b4a6:	68bb      	ldr	r3, [r7, #8]
   8b4a8:	442b      	add	r3, r5
   8b4aa:	4298      	cmp	r0, r3
   8b4ac:	d004      	beq.n	8b4b8 <_malloc_trim_r+0x48>
   8b4ae:	4630      	mov	r0, r6
   8b4b0:	f000 fec2 	bl	8c238 <__malloc_unlock>
   8b4b4:	2000      	movs	r0, #0
   8b4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b4b8:	4261      	negs	r1, r4
   8b4ba:	4630      	mov	r0, r6
   8b4bc:	f001 fb74 	bl	8cba8 <_sbrk_r>
   8b4c0:	3001      	adds	r0, #1
   8b4c2:	d00d      	beq.n	8b4e0 <_malloc_trim_r+0x70>
   8b4c4:	4b10      	ldr	r3, [pc, #64]	; (8b508 <_malloc_trim_r+0x98>)
   8b4c6:	68ba      	ldr	r2, [r7, #8]
   8b4c8:	6819      	ldr	r1, [r3, #0]
   8b4ca:	1b2d      	subs	r5, r5, r4
   8b4cc:	f045 0501 	orr.w	r5, r5, #1
   8b4d0:	4630      	mov	r0, r6
   8b4d2:	1b09      	subs	r1, r1, r4
   8b4d4:	6055      	str	r5, [r2, #4]
   8b4d6:	6019      	str	r1, [r3, #0]
   8b4d8:	f000 feae 	bl	8c238 <__malloc_unlock>
   8b4dc:	2001      	movs	r0, #1
   8b4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b4e0:	2100      	movs	r1, #0
   8b4e2:	4630      	mov	r0, r6
   8b4e4:	f001 fb60 	bl	8cba8 <_sbrk_r>
   8b4e8:	68ba      	ldr	r2, [r7, #8]
   8b4ea:	1a83      	subs	r3, r0, r2
   8b4ec:	2b0f      	cmp	r3, #15
   8b4ee:	ddde      	ble.n	8b4ae <_malloc_trim_r+0x3e>
   8b4f0:	4c06      	ldr	r4, [pc, #24]	; (8b50c <_malloc_trim_r+0x9c>)
   8b4f2:	4905      	ldr	r1, [pc, #20]	; (8b508 <_malloc_trim_r+0x98>)
   8b4f4:	6824      	ldr	r4, [r4, #0]
   8b4f6:	f043 0301 	orr.w	r3, r3, #1
   8b4fa:	1b00      	subs	r0, r0, r4
   8b4fc:	6053      	str	r3, [r2, #4]
   8b4fe:	6008      	str	r0, [r1, #0]
   8b500:	e7d5      	b.n	8b4ae <_malloc_trim_r+0x3e>
   8b502:	bf00      	nop
   8b504:	20000cb0 	.word	0x20000cb0
   8b508:	200023b4 	.word	0x200023b4
   8b50c:	200010b8 	.word	0x200010b8

0008b510 <_free_r>:
   8b510:	2900      	cmp	r1, #0
   8b512:	d044      	beq.n	8b59e <_free_r+0x8e>
   8b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b518:	460d      	mov	r5, r1
   8b51a:	4680      	mov	r8, r0
   8b51c:	f000 fe86 	bl	8c22c <__malloc_lock>
   8b520:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8b524:	4969      	ldr	r1, [pc, #420]	; (8b6cc <_free_r+0x1bc>)
   8b526:	f1a5 0408 	sub.w	r4, r5, #8
   8b52a:	f027 0301 	bic.w	r3, r7, #1
   8b52e:	18e2      	adds	r2, r4, r3
   8b530:	688e      	ldr	r6, [r1, #8]
   8b532:	6850      	ldr	r0, [r2, #4]
   8b534:	42b2      	cmp	r2, r6
   8b536:	f020 0003 	bic.w	r0, r0, #3
   8b53a:	d05e      	beq.n	8b5fa <_free_r+0xea>
   8b53c:	07fe      	lsls	r6, r7, #31
   8b53e:	6050      	str	r0, [r2, #4]
   8b540:	d40b      	bmi.n	8b55a <_free_r+0x4a>
   8b542:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8b546:	f101 0e08 	add.w	lr, r1, #8
   8b54a:	1be4      	subs	r4, r4, r7
   8b54c:	68a5      	ldr	r5, [r4, #8]
   8b54e:	443b      	add	r3, r7
   8b550:	4575      	cmp	r5, lr
   8b552:	d06d      	beq.n	8b630 <_free_r+0x120>
   8b554:	68e7      	ldr	r7, [r4, #12]
   8b556:	60ef      	str	r7, [r5, #12]
   8b558:	60bd      	str	r5, [r7, #8]
   8b55a:	1815      	adds	r5, r2, r0
   8b55c:	686d      	ldr	r5, [r5, #4]
   8b55e:	07ed      	lsls	r5, r5, #31
   8b560:	d53e      	bpl.n	8b5e0 <_free_r+0xd0>
   8b562:	f043 0201 	orr.w	r2, r3, #1
   8b566:	6062      	str	r2, [r4, #4]
   8b568:	50e3      	str	r3, [r4, r3]
   8b56a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8b56e:	d217      	bcs.n	8b5a0 <_free_r+0x90>
   8b570:	2201      	movs	r2, #1
   8b572:	08db      	lsrs	r3, r3, #3
   8b574:	1098      	asrs	r0, r3, #2
   8b576:	684d      	ldr	r5, [r1, #4]
   8b578:	4413      	add	r3, r2
   8b57a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8b57e:	4082      	lsls	r2, r0
   8b580:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8b584:	432a      	orrs	r2, r5
   8b586:	3808      	subs	r0, #8
   8b588:	60e0      	str	r0, [r4, #12]
   8b58a:	60a7      	str	r7, [r4, #8]
   8b58c:	604a      	str	r2, [r1, #4]
   8b58e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8b592:	60fc      	str	r4, [r7, #12]
   8b594:	4640      	mov	r0, r8
   8b596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8b59a:	f000 be4d 	b.w	8c238 <__malloc_unlock>
   8b59e:	4770      	bx	lr
   8b5a0:	0a5a      	lsrs	r2, r3, #9
   8b5a2:	2a04      	cmp	r2, #4
   8b5a4:	d852      	bhi.n	8b64c <_free_r+0x13c>
   8b5a6:	099a      	lsrs	r2, r3, #6
   8b5a8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8b5ac:	00ff      	lsls	r7, r7, #3
   8b5ae:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8b5b2:	19c8      	adds	r0, r1, r7
   8b5b4:	59ca      	ldr	r2, [r1, r7]
   8b5b6:	3808      	subs	r0, #8
   8b5b8:	4290      	cmp	r0, r2
   8b5ba:	d04f      	beq.n	8b65c <_free_r+0x14c>
   8b5bc:	6851      	ldr	r1, [r2, #4]
   8b5be:	f021 0103 	bic.w	r1, r1, #3
   8b5c2:	428b      	cmp	r3, r1
   8b5c4:	d232      	bcs.n	8b62c <_free_r+0x11c>
   8b5c6:	6892      	ldr	r2, [r2, #8]
   8b5c8:	4290      	cmp	r0, r2
   8b5ca:	d1f7      	bne.n	8b5bc <_free_r+0xac>
   8b5cc:	68c3      	ldr	r3, [r0, #12]
   8b5ce:	60a0      	str	r0, [r4, #8]
   8b5d0:	60e3      	str	r3, [r4, #12]
   8b5d2:	609c      	str	r4, [r3, #8]
   8b5d4:	60c4      	str	r4, [r0, #12]
   8b5d6:	4640      	mov	r0, r8
   8b5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8b5dc:	f000 be2c 	b.w	8c238 <__malloc_unlock>
   8b5e0:	6895      	ldr	r5, [r2, #8]
   8b5e2:	4f3b      	ldr	r7, [pc, #236]	; (8b6d0 <_free_r+0x1c0>)
   8b5e4:	4403      	add	r3, r0
   8b5e6:	42bd      	cmp	r5, r7
   8b5e8:	d040      	beq.n	8b66c <_free_r+0x15c>
   8b5ea:	68d0      	ldr	r0, [r2, #12]
   8b5ec:	f043 0201 	orr.w	r2, r3, #1
   8b5f0:	60e8      	str	r0, [r5, #12]
   8b5f2:	6085      	str	r5, [r0, #8]
   8b5f4:	6062      	str	r2, [r4, #4]
   8b5f6:	50e3      	str	r3, [r4, r3]
   8b5f8:	e7b7      	b.n	8b56a <_free_r+0x5a>
   8b5fa:	07ff      	lsls	r7, r7, #31
   8b5fc:	4403      	add	r3, r0
   8b5fe:	d407      	bmi.n	8b610 <_free_r+0x100>
   8b600:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8b604:	1b64      	subs	r4, r4, r5
   8b606:	68e2      	ldr	r2, [r4, #12]
   8b608:	68a0      	ldr	r0, [r4, #8]
   8b60a:	442b      	add	r3, r5
   8b60c:	60c2      	str	r2, [r0, #12]
   8b60e:	6090      	str	r0, [r2, #8]
   8b610:	4a30      	ldr	r2, [pc, #192]	; (8b6d4 <_free_r+0x1c4>)
   8b612:	f043 0001 	orr.w	r0, r3, #1
   8b616:	6812      	ldr	r2, [r2, #0]
   8b618:	6060      	str	r0, [r4, #4]
   8b61a:	4293      	cmp	r3, r2
   8b61c:	608c      	str	r4, [r1, #8]
   8b61e:	d3b9      	bcc.n	8b594 <_free_r+0x84>
   8b620:	4b2d      	ldr	r3, [pc, #180]	; (8b6d8 <_free_r+0x1c8>)
   8b622:	4640      	mov	r0, r8
   8b624:	6819      	ldr	r1, [r3, #0]
   8b626:	f7ff ff23 	bl	8b470 <_malloc_trim_r>
   8b62a:	e7b3      	b.n	8b594 <_free_r+0x84>
   8b62c:	4610      	mov	r0, r2
   8b62e:	e7cd      	b.n	8b5cc <_free_r+0xbc>
   8b630:	1811      	adds	r1, r2, r0
   8b632:	6849      	ldr	r1, [r1, #4]
   8b634:	07c9      	lsls	r1, r1, #31
   8b636:	d444      	bmi.n	8b6c2 <_free_r+0x1b2>
   8b638:	6891      	ldr	r1, [r2, #8]
   8b63a:	4403      	add	r3, r0
   8b63c:	68d2      	ldr	r2, [r2, #12]
   8b63e:	f043 0001 	orr.w	r0, r3, #1
   8b642:	60ca      	str	r2, [r1, #12]
   8b644:	6091      	str	r1, [r2, #8]
   8b646:	6060      	str	r0, [r4, #4]
   8b648:	50e3      	str	r3, [r4, r3]
   8b64a:	e7a3      	b.n	8b594 <_free_r+0x84>
   8b64c:	2a14      	cmp	r2, #20
   8b64e:	d816      	bhi.n	8b67e <_free_r+0x16e>
   8b650:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8b654:	00ff      	lsls	r7, r7, #3
   8b656:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8b65a:	e7aa      	b.n	8b5b2 <_free_r+0xa2>
   8b65c:	2301      	movs	r3, #1
   8b65e:	10aa      	asrs	r2, r5, #2
   8b660:	684d      	ldr	r5, [r1, #4]
   8b662:	4093      	lsls	r3, r2
   8b664:	432b      	orrs	r3, r5
   8b666:	604b      	str	r3, [r1, #4]
   8b668:	4603      	mov	r3, r0
   8b66a:	e7b0      	b.n	8b5ce <_free_r+0xbe>
   8b66c:	f043 0201 	orr.w	r2, r3, #1
   8b670:	614c      	str	r4, [r1, #20]
   8b672:	610c      	str	r4, [r1, #16]
   8b674:	60e5      	str	r5, [r4, #12]
   8b676:	60a5      	str	r5, [r4, #8]
   8b678:	6062      	str	r2, [r4, #4]
   8b67a:	50e3      	str	r3, [r4, r3]
   8b67c:	e78a      	b.n	8b594 <_free_r+0x84>
   8b67e:	2a54      	cmp	r2, #84	; 0x54
   8b680:	d806      	bhi.n	8b690 <_free_r+0x180>
   8b682:	0b1a      	lsrs	r2, r3, #12
   8b684:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8b688:	00ff      	lsls	r7, r7, #3
   8b68a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8b68e:	e790      	b.n	8b5b2 <_free_r+0xa2>
   8b690:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8b694:	d806      	bhi.n	8b6a4 <_free_r+0x194>
   8b696:	0bda      	lsrs	r2, r3, #15
   8b698:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8b69c:	00ff      	lsls	r7, r7, #3
   8b69e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8b6a2:	e786      	b.n	8b5b2 <_free_r+0xa2>
   8b6a4:	f240 5054 	movw	r0, #1364	; 0x554
   8b6a8:	4282      	cmp	r2, r0
   8b6aa:	d806      	bhi.n	8b6ba <_free_r+0x1aa>
   8b6ac:	0c9a      	lsrs	r2, r3, #18
   8b6ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8b6b2:	00ff      	lsls	r7, r7, #3
   8b6b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8b6b8:	e77b      	b.n	8b5b2 <_free_r+0xa2>
   8b6ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8b6be:	257e      	movs	r5, #126	; 0x7e
   8b6c0:	e777      	b.n	8b5b2 <_free_r+0xa2>
   8b6c2:	f043 0101 	orr.w	r1, r3, #1
   8b6c6:	6061      	str	r1, [r4, #4]
   8b6c8:	6013      	str	r3, [r2, #0]
   8b6ca:	e763      	b.n	8b594 <_free_r+0x84>
   8b6cc:	20000cb0 	.word	0x20000cb0
   8b6d0:	20000cb8 	.word	0x20000cb8
   8b6d4:	200010bc 	.word	0x200010bc
   8b6d8:	200023e4 	.word	0x200023e4

0008b6dc <__sfvwrite_r>:
   8b6dc:	6893      	ldr	r3, [r2, #8]
   8b6de:	2b00      	cmp	r3, #0
   8b6e0:	d071      	beq.n	8b7c6 <__sfvwrite_r+0xea>
   8b6e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b6e6:	898b      	ldrh	r3, [r1, #12]
   8b6e8:	b083      	sub	sp, #12
   8b6ea:	460c      	mov	r4, r1
   8b6ec:	0719      	lsls	r1, r3, #28
   8b6ee:	9000      	str	r0, [sp, #0]
   8b6f0:	4616      	mov	r6, r2
   8b6f2:	d525      	bpl.n	8b740 <__sfvwrite_r+0x64>
   8b6f4:	6922      	ldr	r2, [r4, #16]
   8b6f6:	b31a      	cbz	r2, 8b740 <__sfvwrite_r+0x64>
   8b6f8:	f013 0002 	ands.w	r0, r3, #2
   8b6fc:	6835      	ldr	r5, [r6, #0]
   8b6fe:	d02b      	beq.n	8b758 <__sfvwrite_r+0x7c>
   8b700:	f04f 0900 	mov.w	r9, #0
   8b704:	46b0      	mov	r8, r6
   8b706:	464f      	mov	r7, r9
   8b708:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8b9cc <__sfvwrite_r+0x2f0>
   8b70c:	2f00      	cmp	r7, #0
   8b70e:	d055      	beq.n	8b7bc <__sfvwrite_r+0xe0>
   8b710:	4557      	cmp	r7, sl
   8b712:	463b      	mov	r3, r7
   8b714:	464a      	mov	r2, r9
   8b716:	bf28      	it	cs
   8b718:	4653      	movcs	r3, sl
   8b71a:	69e1      	ldr	r1, [r4, #28]
   8b71c:	9800      	ldr	r0, [sp, #0]
   8b71e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8b720:	47b0      	blx	r6
   8b722:	2800      	cmp	r0, #0
   8b724:	dd56      	ble.n	8b7d4 <__sfvwrite_r+0xf8>
   8b726:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b72a:	4481      	add	r9, r0
   8b72c:	1a1b      	subs	r3, r3, r0
   8b72e:	1a3f      	subs	r7, r7, r0
   8b730:	f8c8 3008 	str.w	r3, [r8, #8]
   8b734:	2b00      	cmp	r3, #0
   8b736:	d1e9      	bne.n	8b70c <__sfvwrite_r+0x30>
   8b738:	2000      	movs	r0, #0
   8b73a:	b003      	add	sp, #12
   8b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b740:	4621      	mov	r1, r4
   8b742:	9800      	ldr	r0, [sp, #0]
   8b744:	f7fe fca0 	bl	8a088 <__swsetup_r>
   8b748:	2800      	cmp	r0, #0
   8b74a:	f040 8135 	bne.w	8b9b8 <__sfvwrite_r+0x2dc>
   8b74e:	89a3      	ldrh	r3, [r4, #12]
   8b750:	6835      	ldr	r5, [r6, #0]
   8b752:	f013 0002 	ands.w	r0, r3, #2
   8b756:	d1d3      	bne.n	8b700 <__sfvwrite_r+0x24>
   8b758:	f013 0901 	ands.w	r9, r3, #1
   8b75c:	d144      	bne.n	8b7e8 <__sfvwrite_r+0x10c>
   8b75e:	464f      	mov	r7, r9
   8b760:	9601      	str	r6, [sp, #4]
   8b762:	b337      	cbz	r7, 8b7b2 <__sfvwrite_r+0xd6>
   8b764:	059a      	lsls	r2, r3, #22
   8b766:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8b76a:	f140 8085 	bpl.w	8b878 <__sfvwrite_r+0x19c>
   8b76e:	4547      	cmp	r7, r8
   8b770:	46c3      	mov	fp, r8
   8b772:	f0c0 80ad 	bcc.w	8b8d0 <__sfvwrite_r+0x1f4>
   8b776:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8b77a:	f040 80ae 	bne.w	8b8da <__sfvwrite_r+0x1fe>
   8b77e:	46ba      	mov	sl, r7
   8b780:	6820      	ldr	r0, [r4, #0]
   8b782:	465a      	mov	r2, fp
   8b784:	4649      	mov	r1, r9
   8b786:	f000 fced 	bl	8c164 <memmove>
   8b78a:	68a2      	ldr	r2, [r4, #8]
   8b78c:	6823      	ldr	r3, [r4, #0]
   8b78e:	eba2 0208 	sub.w	r2, r2, r8
   8b792:	445b      	add	r3, fp
   8b794:	60a2      	str	r2, [r4, #8]
   8b796:	6023      	str	r3, [r4, #0]
   8b798:	9a01      	ldr	r2, [sp, #4]
   8b79a:	44d1      	add	r9, sl
   8b79c:	6893      	ldr	r3, [r2, #8]
   8b79e:	eba7 070a 	sub.w	r7, r7, sl
   8b7a2:	eba3 030a 	sub.w	r3, r3, sl
   8b7a6:	6093      	str	r3, [r2, #8]
   8b7a8:	2b00      	cmp	r3, #0
   8b7aa:	d0c5      	beq.n	8b738 <__sfvwrite_r+0x5c>
   8b7ac:	89a3      	ldrh	r3, [r4, #12]
   8b7ae:	2f00      	cmp	r7, #0
   8b7b0:	d1d8      	bne.n	8b764 <__sfvwrite_r+0x88>
   8b7b2:	f8d5 9000 	ldr.w	r9, [r5]
   8b7b6:	686f      	ldr	r7, [r5, #4]
   8b7b8:	3508      	adds	r5, #8
   8b7ba:	e7d2      	b.n	8b762 <__sfvwrite_r+0x86>
   8b7bc:	f8d5 9000 	ldr.w	r9, [r5]
   8b7c0:	686f      	ldr	r7, [r5, #4]
   8b7c2:	3508      	adds	r5, #8
   8b7c4:	e7a2      	b.n	8b70c <__sfvwrite_r+0x30>
   8b7c6:	2000      	movs	r0, #0
   8b7c8:	4770      	bx	lr
   8b7ca:	4621      	mov	r1, r4
   8b7cc:	9800      	ldr	r0, [sp, #0]
   8b7ce:	f7ff fd21 	bl	8b214 <_fflush_r>
   8b7d2:	b378      	cbz	r0, 8b834 <__sfvwrite_r+0x158>
   8b7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b7d8:	f04f 30ff 	mov.w	r0, #4294967295
   8b7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b7e0:	81a3      	strh	r3, [r4, #12]
   8b7e2:	b003      	add	sp, #12
   8b7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b7e8:	4681      	mov	r9, r0
   8b7ea:	4633      	mov	r3, r6
   8b7ec:	464e      	mov	r6, r9
   8b7ee:	46a8      	mov	r8, r5
   8b7f0:	469a      	mov	sl, r3
   8b7f2:	464d      	mov	r5, r9
   8b7f4:	b356      	cbz	r6, 8b84c <__sfvwrite_r+0x170>
   8b7f6:	2800      	cmp	r0, #0
   8b7f8:	d032      	beq.n	8b860 <__sfvwrite_r+0x184>
   8b7fa:	45b1      	cmp	r9, r6
   8b7fc:	46cb      	mov	fp, r9
   8b7fe:	bf28      	it	cs
   8b800:	46b3      	movcs	fp, r6
   8b802:	6820      	ldr	r0, [r4, #0]
   8b804:	6923      	ldr	r3, [r4, #16]
   8b806:	465f      	mov	r7, fp
   8b808:	4298      	cmp	r0, r3
   8b80a:	6962      	ldr	r2, [r4, #20]
   8b80c:	d904      	bls.n	8b818 <__sfvwrite_r+0x13c>
   8b80e:	68a3      	ldr	r3, [r4, #8]
   8b810:	4413      	add	r3, r2
   8b812:	459b      	cmp	fp, r3
   8b814:	f300 80a8 	bgt.w	8b968 <__sfvwrite_r+0x28c>
   8b818:	4593      	cmp	fp, r2
   8b81a:	db4d      	blt.n	8b8b8 <__sfvwrite_r+0x1dc>
   8b81c:	4613      	mov	r3, r2
   8b81e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b820:	462a      	mov	r2, r5
   8b822:	69e1      	ldr	r1, [r4, #28]
   8b824:	9800      	ldr	r0, [sp, #0]
   8b826:	47b8      	blx	r7
   8b828:	1e07      	subs	r7, r0, #0
   8b82a:	ddd3      	ble.n	8b7d4 <__sfvwrite_r+0xf8>
   8b82c:	ebb9 0907 	subs.w	r9, r9, r7
   8b830:	d0cb      	beq.n	8b7ca <__sfvwrite_r+0xee>
   8b832:	2001      	movs	r0, #1
   8b834:	f8da 3008 	ldr.w	r3, [sl, #8]
   8b838:	443d      	add	r5, r7
   8b83a:	1bdb      	subs	r3, r3, r7
   8b83c:	1bf6      	subs	r6, r6, r7
   8b83e:	f8ca 3008 	str.w	r3, [sl, #8]
   8b842:	2b00      	cmp	r3, #0
   8b844:	f43f af78 	beq.w	8b738 <__sfvwrite_r+0x5c>
   8b848:	2e00      	cmp	r6, #0
   8b84a:	d1d4      	bne.n	8b7f6 <__sfvwrite_r+0x11a>
   8b84c:	f108 0308 	add.w	r3, r8, #8
   8b850:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b854:	4698      	mov	r8, r3
   8b856:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b85a:	3308      	adds	r3, #8
   8b85c:	2e00      	cmp	r6, #0
   8b85e:	d0f7      	beq.n	8b850 <__sfvwrite_r+0x174>
   8b860:	4632      	mov	r2, r6
   8b862:	210a      	movs	r1, #10
   8b864:	4628      	mov	r0, r5
   8b866:	f000 fc37 	bl	8c0d8 <memchr>
   8b86a:	2800      	cmp	r0, #0
   8b86c:	f000 80a1 	beq.w	8b9b2 <__sfvwrite_r+0x2d6>
   8b870:	3001      	adds	r0, #1
   8b872:	eba0 0905 	sub.w	r9, r0, r5
   8b876:	e7c0      	b.n	8b7fa <__sfvwrite_r+0x11e>
   8b878:	6820      	ldr	r0, [r4, #0]
   8b87a:	6923      	ldr	r3, [r4, #16]
   8b87c:	4298      	cmp	r0, r3
   8b87e:	d802      	bhi.n	8b886 <__sfvwrite_r+0x1aa>
   8b880:	6963      	ldr	r3, [r4, #20]
   8b882:	429f      	cmp	r7, r3
   8b884:	d25d      	bcs.n	8b942 <__sfvwrite_r+0x266>
   8b886:	45b8      	cmp	r8, r7
   8b888:	bf28      	it	cs
   8b88a:	46b8      	movcs	r8, r7
   8b88c:	4649      	mov	r1, r9
   8b88e:	4642      	mov	r2, r8
   8b890:	f000 fc68 	bl	8c164 <memmove>
   8b894:	68a3      	ldr	r3, [r4, #8]
   8b896:	6822      	ldr	r2, [r4, #0]
   8b898:	eba3 0308 	sub.w	r3, r3, r8
   8b89c:	4442      	add	r2, r8
   8b89e:	60a3      	str	r3, [r4, #8]
   8b8a0:	6022      	str	r2, [r4, #0]
   8b8a2:	b10b      	cbz	r3, 8b8a8 <__sfvwrite_r+0x1cc>
   8b8a4:	46c2      	mov	sl, r8
   8b8a6:	e777      	b.n	8b798 <__sfvwrite_r+0xbc>
   8b8a8:	4621      	mov	r1, r4
   8b8aa:	9800      	ldr	r0, [sp, #0]
   8b8ac:	f7ff fcb2 	bl	8b214 <_fflush_r>
   8b8b0:	2800      	cmp	r0, #0
   8b8b2:	d18f      	bne.n	8b7d4 <__sfvwrite_r+0xf8>
   8b8b4:	46c2      	mov	sl, r8
   8b8b6:	e76f      	b.n	8b798 <__sfvwrite_r+0xbc>
   8b8b8:	465a      	mov	r2, fp
   8b8ba:	4629      	mov	r1, r5
   8b8bc:	f000 fc52 	bl	8c164 <memmove>
   8b8c0:	68a2      	ldr	r2, [r4, #8]
   8b8c2:	6823      	ldr	r3, [r4, #0]
   8b8c4:	eba2 020b 	sub.w	r2, r2, fp
   8b8c8:	445b      	add	r3, fp
   8b8ca:	60a2      	str	r2, [r4, #8]
   8b8cc:	6023      	str	r3, [r4, #0]
   8b8ce:	e7ad      	b.n	8b82c <__sfvwrite_r+0x150>
   8b8d0:	46b8      	mov	r8, r7
   8b8d2:	46ba      	mov	sl, r7
   8b8d4:	46bb      	mov	fp, r7
   8b8d6:	6820      	ldr	r0, [r4, #0]
   8b8d8:	e753      	b.n	8b782 <__sfvwrite_r+0xa6>
   8b8da:	6962      	ldr	r2, [r4, #20]
   8b8dc:	6820      	ldr	r0, [r4, #0]
   8b8de:	6921      	ldr	r1, [r4, #16]
   8b8e0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8b8e4:	eba0 0a01 	sub.w	sl, r0, r1
   8b8e8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8b8ec:	f10a 0001 	add.w	r0, sl, #1
   8b8f0:	ea4f 0868 	mov.w	r8, r8, asr #1
   8b8f4:	4438      	add	r0, r7
   8b8f6:	4540      	cmp	r0, r8
   8b8f8:	4642      	mov	r2, r8
   8b8fa:	bf84      	itt	hi
   8b8fc:	4680      	movhi	r8, r0
   8b8fe:	4642      	movhi	r2, r8
   8b900:	055b      	lsls	r3, r3, #21
   8b902:	d544      	bpl.n	8b98e <__sfvwrite_r+0x2b2>
   8b904:	4611      	mov	r1, r2
   8b906:	9800      	ldr	r0, [sp, #0]
   8b908:	f000 f92e 	bl	8bb68 <_malloc_r>
   8b90c:	4683      	mov	fp, r0
   8b90e:	2800      	cmp	r0, #0
   8b910:	d055      	beq.n	8b9be <__sfvwrite_r+0x2e2>
   8b912:	4652      	mov	r2, sl
   8b914:	6921      	ldr	r1, [r4, #16]
   8b916:	f7fc f8b5 	bl	87a84 <memcpy>
   8b91a:	89a3      	ldrh	r3, [r4, #12]
   8b91c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8b920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b924:	81a3      	strh	r3, [r4, #12]
   8b926:	eb0b 000a 	add.w	r0, fp, sl
   8b92a:	eba8 030a 	sub.w	r3, r8, sl
   8b92e:	f8c4 b010 	str.w	fp, [r4, #16]
   8b932:	f8c4 8014 	str.w	r8, [r4, #20]
   8b936:	6020      	str	r0, [r4, #0]
   8b938:	60a3      	str	r3, [r4, #8]
   8b93a:	46b8      	mov	r8, r7
   8b93c:	46ba      	mov	sl, r7
   8b93e:	46bb      	mov	fp, r7
   8b940:	e71f      	b.n	8b782 <__sfvwrite_r+0xa6>
   8b942:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8b946:	42ba      	cmp	r2, r7
   8b948:	bf28      	it	cs
   8b94a:	463a      	movcs	r2, r7
   8b94c:	fb92 f2f3 	sdiv	r2, r2, r3
   8b950:	69e1      	ldr	r1, [r4, #28]
   8b952:	fb03 f302 	mul.w	r3, r3, r2
   8b956:	9800      	ldr	r0, [sp, #0]
   8b958:	464a      	mov	r2, r9
   8b95a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8b95c:	47b0      	blx	r6
   8b95e:	f1b0 0a00 	subs.w	sl, r0, #0
   8b962:	f73f af19 	bgt.w	8b798 <__sfvwrite_r+0xbc>
   8b966:	e735      	b.n	8b7d4 <__sfvwrite_r+0xf8>
   8b968:	461a      	mov	r2, r3
   8b96a:	4629      	mov	r1, r5
   8b96c:	9301      	str	r3, [sp, #4]
   8b96e:	f000 fbf9 	bl	8c164 <memmove>
   8b972:	6822      	ldr	r2, [r4, #0]
   8b974:	9b01      	ldr	r3, [sp, #4]
   8b976:	4621      	mov	r1, r4
   8b978:	441a      	add	r2, r3
   8b97a:	6022      	str	r2, [r4, #0]
   8b97c:	9800      	ldr	r0, [sp, #0]
   8b97e:	f7ff fc49 	bl	8b214 <_fflush_r>
   8b982:	9b01      	ldr	r3, [sp, #4]
   8b984:	2800      	cmp	r0, #0
   8b986:	f47f af25 	bne.w	8b7d4 <__sfvwrite_r+0xf8>
   8b98a:	461f      	mov	r7, r3
   8b98c:	e74e      	b.n	8b82c <__sfvwrite_r+0x150>
   8b98e:	9800      	ldr	r0, [sp, #0]
   8b990:	f000 ff54 	bl	8c83c <_realloc_r>
   8b994:	4683      	mov	fp, r0
   8b996:	2800      	cmp	r0, #0
   8b998:	d1c5      	bne.n	8b926 <__sfvwrite_r+0x24a>
   8b99a:	9d00      	ldr	r5, [sp, #0]
   8b99c:	6921      	ldr	r1, [r4, #16]
   8b99e:	4628      	mov	r0, r5
   8b9a0:	f7ff fdb6 	bl	8b510 <_free_r>
   8b9a4:	220c      	movs	r2, #12
   8b9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b9aa:	602a      	str	r2, [r5, #0]
   8b9ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b9b0:	e712      	b.n	8b7d8 <__sfvwrite_r+0xfc>
   8b9b2:	f106 0901 	add.w	r9, r6, #1
   8b9b6:	e720      	b.n	8b7fa <__sfvwrite_r+0x11e>
   8b9b8:	f04f 30ff 	mov.w	r0, #4294967295
   8b9bc:	e6bd      	b.n	8b73a <__sfvwrite_r+0x5e>
   8b9be:	220c      	movs	r2, #12
   8b9c0:	9900      	ldr	r1, [sp, #0]
   8b9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b9c6:	600a      	str	r2, [r1, #0]
   8b9c8:	e706      	b.n	8b7d8 <__sfvwrite_r+0xfc>
   8b9ca:	bf00      	nop
   8b9cc:	7ffffc00 	.word	0x7ffffc00

0008b9d0 <_fwalk_reent>:
   8b9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b9d4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8b9d8:	d01e      	beq.n	8ba18 <_fwalk_reent+0x48>
   8b9da:	4688      	mov	r8, r1
   8b9dc:	4607      	mov	r7, r0
   8b9de:	f04f 0900 	mov.w	r9, #0
   8b9e2:	6875      	ldr	r5, [r6, #4]
   8b9e4:	68b4      	ldr	r4, [r6, #8]
   8b9e6:	3d01      	subs	r5, #1
   8b9e8:	d410      	bmi.n	8ba0c <_fwalk_reent+0x3c>
   8b9ea:	89a3      	ldrh	r3, [r4, #12]
   8b9ec:	3d01      	subs	r5, #1
   8b9ee:	2b01      	cmp	r3, #1
   8b9f0:	d908      	bls.n	8ba04 <_fwalk_reent+0x34>
   8b9f2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b9f6:	3301      	adds	r3, #1
   8b9f8:	d004      	beq.n	8ba04 <_fwalk_reent+0x34>
   8b9fa:	4621      	mov	r1, r4
   8b9fc:	4638      	mov	r0, r7
   8b9fe:	47c0      	blx	r8
   8ba00:	ea49 0900 	orr.w	r9, r9, r0
   8ba04:	1c6b      	adds	r3, r5, #1
   8ba06:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8ba0a:	d1ee      	bne.n	8b9ea <_fwalk_reent+0x1a>
   8ba0c:	6836      	ldr	r6, [r6, #0]
   8ba0e:	2e00      	cmp	r6, #0
   8ba10:	d1e7      	bne.n	8b9e2 <_fwalk_reent+0x12>
   8ba12:	4648      	mov	r0, r9
   8ba14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ba18:	46b1      	mov	r9, r6
   8ba1a:	4648      	mov	r0, r9
   8ba1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008ba20 <__locale_mb_cur_max>:
   8ba20:	4b04      	ldr	r3, [pc, #16]	; (8ba34 <__locale_mb_cur_max+0x14>)
   8ba22:	4a05      	ldr	r2, [pc, #20]	; (8ba38 <__locale_mb_cur_max+0x18>)
   8ba24:	681b      	ldr	r3, [r3, #0]
   8ba26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8ba28:	2b00      	cmp	r3, #0
   8ba2a:	bf08      	it	eq
   8ba2c:	4613      	moveq	r3, r2
   8ba2e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8ba32:	4770      	bx	lr
   8ba34:	20000714 	.word	0x20000714
   8ba38:	20000b44 	.word	0x20000b44

0008ba3c <_localeconv_r>:
   8ba3c:	4a04      	ldr	r2, [pc, #16]	; (8ba50 <_localeconv_r+0x14>)
   8ba3e:	4b05      	ldr	r3, [pc, #20]	; (8ba54 <_localeconv_r+0x18>)
   8ba40:	6812      	ldr	r2, [r2, #0]
   8ba42:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8ba44:	2800      	cmp	r0, #0
   8ba46:	bf08      	it	eq
   8ba48:	4618      	moveq	r0, r3
   8ba4a:	30f0      	adds	r0, #240	; 0xf0
   8ba4c:	4770      	bx	lr
   8ba4e:	bf00      	nop
   8ba50:	20000714 	.word	0x20000714
   8ba54:	20000b44 	.word	0x20000b44

0008ba58 <__retarget_lock_init_recursive>:
   8ba58:	4770      	bx	lr
   8ba5a:	bf00      	nop

0008ba5c <__retarget_lock_close_recursive>:
   8ba5c:	4770      	bx	lr
   8ba5e:	bf00      	nop

0008ba60 <__retarget_lock_acquire_recursive>:
   8ba60:	4770      	bx	lr
   8ba62:	bf00      	nop

0008ba64 <__retarget_lock_release_recursive>:
   8ba64:	4770      	bx	lr
   8ba66:	bf00      	nop

0008ba68 <__swhatbuf_r>:
   8ba68:	b570      	push	{r4, r5, r6, lr}
   8ba6a:	460c      	mov	r4, r1
   8ba6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ba70:	b090      	sub	sp, #64	; 0x40
   8ba72:	2900      	cmp	r1, #0
   8ba74:	4615      	mov	r5, r2
   8ba76:	461e      	mov	r6, r3
   8ba78:	db14      	blt.n	8baa4 <__swhatbuf_r+0x3c>
   8ba7a:	aa01      	add	r2, sp, #4
   8ba7c:	f001 fb40 	bl	8d100 <_fstat_r>
   8ba80:	2800      	cmp	r0, #0
   8ba82:	db0f      	blt.n	8baa4 <__swhatbuf_r+0x3c>
   8ba84:	9a02      	ldr	r2, [sp, #8]
   8ba86:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8ba8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8ba8e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8ba92:	fab2 f282 	clz	r2, r2
   8ba96:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8ba9a:	0952      	lsrs	r2, r2, #5
   8ba9c:	6032      	str	r2, [r6, #0]
   8ba9e:	602b      	str	r3, [r5, #0]
   8baa0:	b010      	add	sp, #64	; 0x40
   8baa2:	bd70      	pop	{r4, r5, r6, pc}
   8baa4:	2300      	movs	r3, #0
   8baa6:	89a2      	ldrh	r2, [r4, #12]
   8baa8:	6033      	str	r3, [r6, #0]
   8baaa:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8baae:	d004      	beq.n	8baba <__swhatbuf_r+0x52>
   8bab0:	2240      	movs	r2, #64	; 0x40
   8bab2:	4618      	mov	r0, r3
   8bab4:	602a      	str	r2, [r5, #0]
   8bab6:	b010      	add	sp, #64	; 0x40
   8bab8:	bd70      	pop	{r4, r5, r6, pc}
   8baba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8babe:	602b      	str	r3, [r5, #0]
   8bac0:	b010      	add	sp, #64	; 0x40
   8bac2:	bd70      	pop	{r4, r5, r6, pc}

0008bac4 <__smakebuf_r>:
   8bac4:	898a      	ldrh	r2, [r1, #12]
   8bac6:	460b      	mov	r3, r1
   8bac8:	0792      	lsls	r2, r2, #30
   8baca:	d506      	bpl.n	8bada <__smakebuf_r+0x16>
   8bacc:	2101      	movs	r1, #1
   8bace:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8bad2:	6159      	str	r1, [r3, #20]
   8bad4:	601a      	str	r2, [r3, #0]
   8bad6:	611a      	str	r2, [r3, #16]
   8bad8:	4770      	bx	lr
   8bada:	b5f0      	push	{r4, r5, r6, r7, lr}
   8badc:	b083      	sub	sp, #12
   8bade:	ab01      	add	r3, sp, #4
   8bae0:	466a      	mov	r2, sp
   8bae2:	460c      	mov	r4, r1
   8bae4:	4606      	mov	r6, r0
   8bae6:	f7ff ffbf 	bl	8ba68 <__swhatbuf_r>
   8baea:	9900      	ldr	r1, [sp, #0]
   8baec:	4605      	mov	r5, r0
   8baee:	4630      	mov	r0, r6
   8baf0:	f000 f83a 	bl	8bb68 <_malloc_r>
   8baf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8baf8:	b1d8      	cbz	r0, 8bb32 <__smakebuf_r+0x6e>
   8bafa:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8bafe:	4f15      	ldr	r7, [pc, #84]	; (8bb54 <__smakebuf_r+0x90>)
   8bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8bb04:	63f7      	str	r7, [r6, #60]	; 0x3c
   8bb06:	81a3      	strh	r3, [r4, #12]
   8bb08:	6020      	str	r0, [r4, #0]
   8bb0a:	6120      	str	r0, [r4, #16]
   8bb0c:	6161      	str	r1, [r4, #20]
   8bb0e:	b91a      	cbnz	r2, 8bb18 <__smakebuf_r+0x54>
   8bb10:	432b      	orrs	r3, r5
   8bb12:	81a3      	strh	r3, [r4, #12]
   8bb14:	b003      	add	sp, #12
   8bb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8bb18:	4630      	mov	r0, r6
   8bb1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bb1e:	f001 fb03 	bl	8d128 <_isatty_r>
   8bb22:	b1a0      	cbz	r0, 8bb4e <__smakebuf_r+0x8a>
   8bb24:	89a3      	ldrh	r3, [r4, #12]
   8bb26:	f023 0303 	bic.w	r3, r3, #3
   8bb2a:	f043 0301 	orr.w	r3, r3, #1
   8bb2e:	b21b      	sxth	r3, r3
   8bb30:	e7ee      	b.n	8bb10 <__smakebuf_r+0x4c>
   8bb32:	059a      	lsls	r2, r3, #22
   8bb34:	d4ee      	bmi.n	8bb14 <__smakebuf_r+0x50>
   8bb36:	2101      	movs	r1, #1
   8bb38:	f023 0303 	bic.w	r3, r3, #3
   8bb3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8bb40:	f043 0302 	orr.w	r3, r3, #2
   8bb44:	81a3      	strh	r3, [r4, #12]
   8bb46:	6161      	str	r1, [r4, #20]
   8bb48:	6022      	str	r2, [r4, #0]
   8bb4a:	6122      	str	r2, [r4, #16]
   8bb4c:	e7e2      	b.n	8bb14 <__smakebuf_r+0x50>
   8bb4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bb52:	e7dd      	b.n	8bb10 <__smakebuf_r+0x4c>
   8bb54:	0008b269 	.word	0x0008b269

0008bb58 <malloc>:
   8bb58:	4b02      	ldr	r3, [pc, #8]	; (8bb64 <malloc+0xc>)
   8bb5a:	4601      	mov	r1, r0
   8bb5c:	6818      	ldr	r0, [r3, #0]
   8bb5e:	f000 b803 	b.w	8bb68 <_malloc_r>
   8bb62:	bf00      	nop
   8bb64:	20000714 	.word	0x20000714

0008bb68 <_malloc_r>:
   8bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb6c:	f101 060b 	add.w	r6, r1, #11
   8bb70:	2e16      	cmp	r6, #22
   8bb72:	b083      	sub	sp, #12
   8bb74:	4605      	mov	r5, r0
   8bb76:	f240 809e 	bls.w	8bcb6 <_malloc_r+0x14e>
   8bb7a:	f036 0607 	bics.w	r6, r6, #7
   8bb7e:	f100 80bd 	bmi.w	8bcfc <_malloc_r+0x194>
   8bb82:	42b1      	cmp	r1, r6
   8bb84:	f200 80ba 	bhi.w	8bcfc <_malloc_r+0x194>
   8bb88:	f000 fb50 	bl	8c22c <__malloc_lock>
   8bb8c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8bb90:	f0c0 8285 	bcc.w	8c09e <_malloc_r+0x536>
   8bb94:	0a73      	lsrs	r3, r6, #9
   8bb96:	f000 80b8 	beq.w	8bd0a <_malloc_r+0x1a2>
   8bb9a:	2b04      	cmp	r3, #4
   8bb9c:	f200 816c 	bhi.w	8be78 <_malloc_r+0x310>
   8bba0:	09b3      	lsrs	r3, r6, #6
   8bba2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8bba6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8bbaa:	00c1      	lsls	r1, r0, #3
   8bbac:	4fb8      	ldr	r7, [pc, #736]	; (8be90 <_malloc_r+0x328>)
   8bbae:	4439      	add	r1, r7
   8bbb0:	684c      	ldr	r4, [r1, #4]
   8bbb2:	3908      	subs	r1, #8
   8bbb4:	42a1      	cmp	r1, r4
   8bbb6:	d106      	bne.n	8bbc6 <_malloc_r+0x5e>
   8bbb8:	e00c      	b.n	8bbd4 <_malloc_r+0x6c>
   8bbba:	2a00      	cmp	r2, #0
   8bbbc:	f280 80ab 	bge.w	8bd16 <_malloc_r+0x1ae>
   8bbc0:	68e4      	ldr	r4, [r4, #12]
   8bbc2:	42a1      	cmp	r1, r4
   8bbc4:	d006      	beq.n	8bbd4 <_malloc_r+0x6c>
   8bbc6:	6863      	ldr	r3, [r4, #4]
   8bbc8:	f023 0303 	bic.w	r3, r3, #3
   8bbcc:	1b9a      	subs	r2, r3, r6
   8bbce:	2a0f      	cmp	r2, #15
   8bbd0:	ddf3      	ble.n	8bbba <_malloc_r+0x52>
   8bbd2:	4670      	mov	r0, lr
   8bbd4:	693c      	ldr	r4, [r7, #16]
   8bbd6:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8bea4 <_malloc_r+0x33c>
   8bbda:	4574      	cmp	r4, lr
   8bbdc:	f000 819e 	beq.w	8bf1c <_malloc_r+0x3b4>
   8bbe0:	6863      	ldr	r3, [r4, #4]
   8bbe2:	f023 0303 	bic.w	r3, r3, #3
   8bbe6:	1b9a      	subs	r2, r3, r6
   8bbe8:	2a0f      	cmp	r2, #15
   8bbea:	f300 8183 	bgt.w	8bef4 <_malloc_r+0x38c>
   8bbee:	2a00      	cmp	r2, #0
   8bbf0:	f8c7 e014 	str.w	lr, [r7, #20]
   8bbf4:	f8c7 e010 	str.w	lr, [r7, #16]
   8bbf8:	f280 8091 	bge.w	8bd1e <_malloc_r+0x1b6>
   8bbfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8bc00:	f080 8154 	bcs.w	8beac <_malloc_r+0x344>
   8bc04:	2201      	movs	r2, #1
   8bc06:	08db      	lsrs	r3, r3, #3
   8bc08:	6879      	ldr	r1, [r7, #4]
   8bc0a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8bc0e:	4413      	add	r3, r2
   8bc10:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8bc14:	fa02 f20c 	lsl.w	r2, r2, ip
   8bc18:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8bc1c:	430a      	orrs	r2, r1
   8bc1e:	f1ac 0108 	sub.w	r1, ip, #8
   8bc22:	60e1      	str	r1, [r4, #12]
   8bc24:	f8c4 8008 	str.w	r8, [r4, #8]
   8bc28:	607a      	str	r2, [r7, #4]
   8bc2a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8bc2e:	f8c8 400c 	str.w	r4, [r8, #12]
   8bc32:	2401      	movs	r4, #1
   8bc34:	1083      	asrs	r3, r0, #2
   8bc36:	409c      	lsls	r4, r3
   8bc38:	4294      	cmp	r4, r2
   8bc3a:	d87d      	bhi.n	8bd38 <_malloc_r+0x1d0>
   8bc3c:	4214      	tst	r4, r2
   8bc3e:	d106      	bne.n	8bc4e <_malloc_r+0xe6>
   8bc40:	f020 0003 	bic.w	r0, r0, #3
   8bc44:	0064      	lsls	r4, r4, #1
   8bc46:	4214      	tst	r4, r2
   8bc48:	f100 0004 	add.w	r0, r0, #4
   8bc4c:	d0fa      	beq.n	8bc44 <_malloc_r+0xdc>
   8bc4e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8bc52:	46cc      	mov	ip, r9
   8bc54:	4680      	mov	r8, r0
   8bc56:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8bc5a:	459c      	cmp	ip, r3
   8bc5c:	d107      	bne.n	8bc6e <_malloc_r+0x106>
   8bc5e:	e15f      	b.n	8bf20 <_malloc_r+0x3b8>
   8bc60:	2a00      	cmp	r2, #0
   8bc62:	f280 816d 	bge.w	8bf40 <_malloc_r+0x3d8>
   8bc66:	68db      	ldr	r3, [r3, #12]
   8bc68:	459c      	cmp	ip, r3
   8bc6a:	f000 8159 	beq.w	8bf20 <_malloc_r+0x3b8>
   8bc6e:	6859      	ldr	r1, [r3, #4]
   8bc70:	f021 0103 	bic.w	r1, r1, #3
   8bc74:	1b8a      	subs	r2, r1, r6
   8bc76:	2a0f      	cmp	r2, #15
   8bc78:	ddf2      	ble.n	8bc60 <_malloc_r+0xf8>
   8bc7a:	68dc      	ldr	r4, [r3, #12]
   8bc7c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8bc80:	f046 0801 	orr.w	r8, r6, #1
   8bc84:	4628      	mov	r0, r5
   8bc86:	441e      	add	r6, r3
   8bc88:	f042 0501 	orr.w	r5, r2, #1
   8bc8c:	f8c3 8004 	str.w	r8, [r3, #4]
   8bc90:	f8cc 400c 	str.w	r4, [ip, #12]
   8bc94:	f8c4 c008 	str.w	ip, [r4, #8]
   8bc98:	617e      	str	r6, [r7, #20]
   8bc9a:	613e      	str	r6, [r7, #16]
   8bc9c:	f8c6 e00c 	str.w	lr, [r6, #12]
   8bca0:	f8c6 e008 	str.w	lr, [r6, #8]
   8bca4:	6075      	str	r5, [r6, #4]
   8bca6:	505a      	str	r2, [r3, r1]
   8bca8:	9300      	str	r3, [sp, #0]
   8bcaa:	f000 fac5 	bl	8c238 <__malloc_unlock>
   8bcae:	9b00      	ldr	r3, [sp, #0]
   8bcb0:	f103 0408 	add.w	r4, r3, #8
   8bcb4:	e01e      	b.n	8bcf4 <_malloc_r+0x18c>
   8bcb6:	2910      	cmp	r1, #16
   8bcb8:	d820      	bhi.n	8bcfc <_malloc_r+0x194>
   8bcba:	f000 fab7 	bl	8c22c <__malloc_lock>
   8bcbe:	2610      	movs	r6, #16
   8bcc0:	2318      	movs	r3, #24
   8bcc2:	2002      	movs	r0, #2
   8bcc4:	4f72      	ldr	r7, [pc, #456]	; (8be90 <_malloc_r+0x328>)
   8bcc6:	443b      	add	r3, r7
   8bcc8:	685c      	ldr	r4, [r3, #4]
   8bcca:	f1a3 0208 	sub.w	r2, r3, #8
   8bcce:	4294      	cmp	r4, r2
   8bcd0:	f000 812f 	beq.w	8bf32 <_malloc_r+0x3ca>
   8bcd4:	6863      	ldr	r3, [r4, #4]
   8bcd6:	68e1      	ldr	r1, [r4, #12]
   8bcd8:	f023 0303 	bic.w	r3, r3, #3
   8bcdc:	4423      	add	r3, r4
   8bcde:	685a      	ldr	r2, [r3, #4]
   8bce0:	68a6      	ldr	r6, [r4, #8]
   8bce2:	f042 0201 	orr.w	r2, r2, #1
   8bce6:	60f1      	str	r1, [r6, #12]
   8bce8:	4628      	mov	r0, r5
   8bcea:	608e      	str	r6, [r1, #8]
   8bcec:	605a      	str	r2, [r3, #4]
   8bcee:	f000 faa3 	bl	8c238 <__malloc_unlock>
   8bcf2:	3408      	adds	r4, #8
   8bcf4:	4620      	mov	r0, r4
   8bcf6:	b003      	add	sp, #12
   8bcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bcfc:	2400      	movs	r4, #0
   8bcfe:	230c      	movs	r3, #12
   8bd00:	4620      	mov	r0, r4
   8bd02:	602b      	str	r3, [r5, #0]
   8bd04:	b003      	add	sp, #12
   8bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bd0a:	2040      	movs	r0, #64	; 0x40
   8bd0c:	f44f 7100 	mov.w	r1, #512	; 0x200
   8bd10:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8bd14:	e74a      	b.n	8bbac <_malloc_r+0x44>
   8bd16:	4423      	add	r3, r4
   8bd18:	685a      	ldr	r2, [r3, #4]
   8bd1a:	68e1      	ldr	r1, [r4, #12]
   8bd1c:	e7e0      	b.n	8bce0 <_malloc_r+0x178>
   8bd1e:	4423      	add	r3, r4
   8bd20:	685a      	ldr	r2, [r3, #4]
   8bd22:	4628      	mov	r0, r5
   8bd24:	f042 0201 	orr.w	r2, r2, #1
   8bd28:	605a      	str	r2, [r3, #4]
   8bd2a:	3408      	adds	r4, #8
   8bd2c:	f000 fa84 	bl	8c238 <__malloc_unlock>
   8bd30:	4620      	mov	r0, r4
   8bd32:	b003      	add	sp, #12
   8bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bd38:	68bc      	ldr	r4, [r7, #8]
   8bd3a:	6863      	ldr	r3, [r4, #4]
   8bd3c:	f023 0803 	bic.w	r8, r3, #3
   8bd40:	45b0      	cmp	r8, r6
   8bd42:	d304      	bcc.n	8bd4e <_malloc_r+0x1e6>
   8bd44:	eba8 0306 	sub.w	r3, r8, r6
   8bd48:	2b0f      	cmp	r3, #15
   8bd4a:	f300 8085 	bgt.w	8be58 <_malloc_r+0x2f0>
   8bd4e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8bea8 <_malloc_r+0x340>
   8bd52:	4b50      	ldr	r3, [pc, #320]	; (8be94 <_malloc_r+0x32c>)
   8bd54:	f8d9 2000 	ldr.w	r2, [r9]
   8bd58:	681b      	ldr	r3, [r3, #0]
   8bd5a:	3201      	adds	r2, #1
   8bd5c:	4433      	add	r3, r6
   8bd5e:	eb04 0a08 	add.w	sl, r4, r8
   8bd62:	f000 8154 	beq.w	8c00e <_malloc_r+0x4a6>
   8bd66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8bd6a:	330f      	adds	r3, #15
   8bd6c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8bd70:	f02b 0b0f 	bic.w	fp, fp, #15
   8bd74:	4659      	mov	r1, fp
   8bd76:	4628      	mov	r0, r5
   8bd78:	f000 ff16 	bl	8cba8 <_sbrk_r>
   8bd7c:	1c41      	adds	r1, r0, #1
   8bd7e:	4602      	mov	r2, r0
   8bd80:	f000 80fb 	beq.w	8bf7a <_malloc_r+0x412>
   8bd84:	4582      	cmp	sl, r0
   8bd86:	f200 80f6 	bhi.w	8bf76 <_malloc_r+0x40e>
   8bd8a:	4b43      	ldr	r3, [pc, #268]	; (8be98 <_malloc_r+0x330>)
   8bd8c:	6819      	ldr	r1, [r3, #0]
   8bd8e:	4459      	add	r1, fp
   8bd90:	6019      	str	r1, [r3, #0]
   8bd92:	f000 814c 	beq.w	8c02e <_malloc_r+0x4c6>
   8bd96:	f8d9 0000 	ldr.w	r0, [r9]
   8bd9a:	3001      	adds	r0, #1
   8bd9c:	bf1b      	ittet	ne
   8bd9e:	eba2 0a0a 	subne.w	sl, r2, sl
   8bda2:	4451      	addne	r1, sl
   8bda4:	f8c9 2000 	streq.w	r2, [r9]
   8bda8:	6019      	strne	r1, [r3, #0]
   8bdaa:	f012 0107 	ands.w	r1, r2, #7
   8bdae:	f000 8114 	beq.w	8bfda <_malloc_r+0x472>
   8bdb2:	f1c1 0008 	rsb	r0, r1, #8
   8bdb6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8bdba:	4402      	add	r2, r0
   8bdbc:	3108      	adds	r1, #8
   8bdbe:	eb02 090b 	add.w	r9, r2, fp
   8bdc2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8bdc6:	eba1 0909 	sub.w	r9, r1, r9
   8bdca:	4649      	mov	r1, r9
   8bdcc:	4628      	mov	r0, r5
   8bdce:	9301      	str	r3, [sp, #4]
   8bdd0:	9200      	str	r2, [sp, #0]
   8bdd2:	f000 fee9 	bl	8cba8 <_sbrk_r>
   8bdd6:	1c43      	adds	r3, r0, #1
   8bdd8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8bddc:	f000 8142 	beq.w	8c064 <_malloc_r+0x4fc>
   8bde0:	1a80      	subs	r0, r0, r2
   8bde2:	4448      	add	r0, r9
   8bde4:	f040 0001 	orr.w	r0, r0, #1
   8bde8:	6819      	ldr	r1, [r3, #0]
   8bdea:	42bc      	cmp	r4, r7
   8bdec:	4449      	add	r1, r9
   8bdee:	60ba      	str	r2, [r7, #8]
   8bdf0:	6019      	str	r1, [r3, #0]
   8bdf2:	6050      	str	r0, [r2, #4]
   8bdf4:	d017      	beq.n	8be26 <_malloc_r+0x2be>
   8bdf6:	f1b8 0f0f 	cmp.w	r8, #15
   8bdfa:	f240 80fa 	bls.w	8bff2 <_malloc_r+0x48a>
   8bdfe:	f04f 0c05 	mov.w	ip, #5
   8be02:	6862      	ldr	r2, [r4, #4]
   8be04:	f1a8 000c 	sub.w	r0, r8, #12
   8be08:	f020 0007 	bic.w	r0, r0, #7
   8be0c:	f002 0201 	and.w	r2, r2, #1
   8be10:	eb04 0e00 	add.w	lr, r4, r0
   8be14:	4302      	orrs	r2, r0
   8be16:	280f      	cmp	r0, #15
   8be18:	6062      	str	r2, [r4, #4]
   8be1a:	f8ce c004 	str.w	ip, [lr, #4]
   8be1e:	f8ce c008 	str.w	ip, [lr, #8]
   8be22:	f200 8116 	bhi.w	8c052 <_malloc_r+0x4ea>
   8be26:	4b1d      	ldr	r3, [pc, #116]	; (8be9c <_malloc_r+0x334>)
   8be28:	68bc      	ldr	r4, [r7, #8]
   8be2a:	681a      	ldr	r2, [r3, #0]
   8be2c:	4291      	cmp	r1, r2
   8be2e:	bf88      	it	hi
   8be30:	6019      	strhi	r1, [r3, #0]
   8be32:	4b1b      	ldr	r3, [pc, #108]	; (8bea0 <_malloc_r+0x338>)
   8be34:	681a      	ldr	r2, [r3, #0]
   8be36:	4291      	cmp	r1, r2
   8be38:	6862      	ldr	r2, [r4, #4]
   8be3a:	bf88      	it	hi
   8be3c:	6019      	strhi	r1, [r3, #0]
   8be3e:	f022 0203 	bic.w	r2, r2, #3
   8be42:	4296      	cmp	r6, r2
   8be44:	eba2 0306 	sub.w	r3, r2, r6
   8be48:	d801      	bhi.n	8be4e <_malloc_r+0x2e6>
   8be4a:	2b0f      	cmp	r3, #15
   8be4c:	dc04      	bgt.n	8be58 <_malloc_r+0x2f0>
   8be4e:	4628      	mov	r0, r5
   8be50:	f000 f9f2 	bl	8c238 <__malloc_unlock>
   8be54:	2400      	movs	r4, #0
   8be56:	e74d      	b.n	8bcf4 <_malloc_r+0x18c>
   8be58:	f046 0201 	orr.w	r2, r6, #1
   8be5c:	f043 0301 	orr.w	r3, r3, #1
   8be60:	4426      	add	r6, r4
   8be62:	6062      	str	r2, [r4, #4]
   8be64:	4628      	mov	r0, r5
   8be66:	60be      	str	r6, [r7, #8]
   8be68:	3408      	adds	r4, #8
   8be6a:	6073      	str	r3, [r6, #4]
   8be6c:	f000 f9e4 	bl	8c238 <__malloc_unlock>
   8be70:	4620      	mov	r0, r4
   8be72:	b003      	add	sp, #12
   8be74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be78:	2b14      	cmp	r3, #20
   8be7a:	d970      	bls.n	8bf5e <_malloc_r+0x3f6>
   8be7c:	2b54      	cmp	r3, #84	; 0x54
   8be7e:	f200 80a2 	bhi.w	8bfc6 <_malloc_r+0x45e>
   8be82:	0b33      	lsrs	r3, r6, #12
   8be84:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8be88:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8be8c:	00c1      	lsls	r1, r0, #3
   8be8e:	e68d      	b.n	8bbac <_malloc_r+0x44>
   8be90:	20000cb0 	.word	0x20000cb0
   8be94:	200023e4 	.word	0x200023e4
   8be98:	200023b4 	.word	0x200023b4
   8be9c:	200023dc 	.word	0x200023dc
   8bea0:	200023e0 	.word	0x200023e0
   8bea4:	20000cb8 	.word	0x20000cb8
   8bea8:	200010b8 	.word	0x200010b8
   8beac:	0a5a      	lsrs	r2, r3, #9
   8beae:	2a04      	cmp	r2, #4
   8beb0:	d95b      	bls.n	8bf6a <_malloc_r+0x402>
   8beb2:	2a14      	cmp	r2, #20
   8beb4:	f200 80ae 	bhi.w	8c014 <_malloc_r+0x4ac>
   8beb8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8bebc:	00c9      	lsls	r1, r1, #3
   8bebe:	325b      	adds	r2, #91	; 0x5b
   8bec0:	eb07 0c01 	add.w	ip, r7, r1
   8bec4:	5879      	ldr	r1, [r7, r1]
   8bec6:	f1ac 0c08 	sub.w	ip, ip, #8
   8beca:	458c      	cmp	ip, r1
   8becc:	f000 8088 	beq.w	8bfe0 <_malloc_r+0x478>
   8bed0:	684a      	ldr	r2, [r1, #4]
   8bed2:	f022 0203 	bic.w	r2, r2, #3
   8bed6:	4293      	cmp	r3, r2
   8bed8:	d273      	bcs.n	8bfc2 <_malloc_r+0x45a>
   8beda:	6889      	ldr	r1, [r1, #8]
   8bedc:	458c      	cmp	ip, r1
   8bede:	d1f7      	bne.n	8bed0 <_malloc_r+0x368>
   8bee0:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8bee4:	687a      	ldr	r2, [r7, #4]
   8bee6:	60e3      	str	r3, [r4, #12]
   8bee8:	f8c4 c008 	str.w	ip, [r4, #8]
   8beec:	609c      	str	r4, [r3, #8]
   8beee:	f8cc 400c 	str.w	r4, [ip, #12]
   8bef2:	e69e      	b.n	8bc32 <_malloc_r+0xca>
   8bef4:	f046 0c01 	orr.w	ip, r6, #1
   8bef8:	f042 0101 	orr.w	r1, r2, #1
   8befc:	4426      	add	r6, r4
   8befe:	f8c4 c004 	str.w	ip, [r4, #4]
   8bf02:	4628      	mov	r0, r5
   8bf04:	617e      	str	r6, [r7, #20]
   8bf06:	613e      	str	r6, [r7, #16]
   8bf08:	f8c6 e00c 	str.w	lr, [r6, #12]
   8bf0c:	f8c6 e008 	str.w	lr, [r6, #8]
   8bf10:	6071      	str	r1, [r6, #4]
   8bf12:	50e2      	str	r2, [r4, r3]
   8bf14:	f000 f990 	bl	8c238 <__malloc_unlock>
   8bf18:	3408      	adds	r4, #8
   8bf1a:	e6eb      	b.n	8bcf4 <_malloc_r+0x18c>
   8bf1c:	687a      	ldr	r2, [r7, #4]
   8bf1e:	e688      	b.n	8bc32 <_malloc_r+0xca>
   8bf20:	f108 0801 	add.w	r8, r8, #1
   8bf24:	f018 0f03 	tst.w	r8, #3
   8bf28:	f10c 0c08 	add.w	ip, ip, #8
   8bf2c:	f47f ae93 	bne.w	8bc56 <_malloc_r+0xee>
   8bf30:	e02d      	b.n	8bf8e <_malloc_r+0x426>
   8bf32:	68dc      	ldr	r4, [r3, #12]
   8bf34:	42a3      	cmp	r3, r4
   8bf36:	bf08      	it	eq
   8bf38:	3002      	addeq	r0, #2
   8bf3a:	f43f ae4b 	beq.w	8bbd4 <_malloc_r+0x6c>
   8bf3e:	e6c9      	b.n	8bcd4 <_malloc_r+0x16c>
   8bf40:	461c      	mov	r4, r3
   8bf42:	4419      	add	r1, r3
   8bf44:	684a      	ldr	r2, [r1, #4]
   8bf46:	68db      	ldr	r3, [r3, #12]
   8bf48:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8bf4c:	f042 0201 	orr.w	r2, r2, #1
   8bf50:	604a      	str	r2, [r1, #4]
   8bf52:	4628      	mov	r0, r5
   8bf54:	60f3      	str	r3, [r6, #12]
   8bf56:	609e      	str	r6, [r3, #8]
   8bf58:	f000 f96e 	bl	8c238 <__malloc_unlock>
   8bf5c:	e6ca      	b.n	8bcf4 <_malloc_r+0x18c>
   8bf5e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8bf62:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8bf66:	00c1      	lsls	r1, r0, #3
   8bf68:	e620      	b.n	8bbac <_malloc_r+0x44>
   8bf6a:	099a      	lsrs	r2, r3, #6
   8bf6c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8bf70:	00c9      	lsls	r1, r1, #3
   8bf72:	3238      	adds	r2, #56	; 0x38
   8bf74:	e7a4      	b.n	8bec0 <_malloc_r+0x358>
   8bf76:	42bc      	cmp	r4, r7
   8bf78:	d054      	beq.n	8c024 <_malloc_r+0x4bc>
   8bf7a:	68bc      	ldr	r4, [r7, #8]
   8bf7c:	6862      	ldr	r2, [r4, #4]
   8bf7e:	f022 0203 	bic.w	r2, r2, #3
   8bf82:	e75e      	b.n	8be42 <_malloc_r+0x2da>
   8bf84:	f859 3908 	ldr.w	r3, [r9], #-8
   8bf88:	4599      	cmp	r9, r3
   8bf8a:	f040 8086 	bne.w	8c09a <_malloc_r+0x532>
   8bf8e:	f010 0f03 	tst.w	r0, #3
   8bf92:	f100 30ff 	add.w	r0, r0, #4294967295
   8bf96:	d1f5      	bne.n	8bf84 <_malloc_r+0x41c>
   8bf98:	687b      	ldr	r3, [r7, #4]
   8bf9a:	ea23 0304 	bic.w	r3, r3, r4
   8bf9e:	607b      	str	r3, [r7, #4]
   8bfa0:	0064      	lsls	r4, r4, #1
   8bfa2:	429c      	cmp	r4, r3
   8bfa4:	f63f aec8 	bhi.w	8bd38 <_malloc_r+0x1d0>
   8bfa8:	2c00      	cmp	r4, #0
   8bfaa:	f43f aec5 	beq.w	8bd38 <_malloc_r+0x1d0>
   8bfae:	421c      	tst	r4, r3
   8bfb0:	4640      	mov	r0, r8
   8bfb2:	f47f ae4c 	bne.w	8bc4e <_malloc_r+0xe6>
   8bfb6:	0064      	lsls	r4, r4, #1
   8bfb8:	421c      	tst	r4, r3
   8bfba:	f100 0004 	add.w	r0, r0, #4
   8bfbe:	d0fa      	beq.n	8bfb6 <_malloc_r+0x44e>
   8bfc0:	e645      	b.n	8bc4e <_malloc_r+0xe6>
   8bfc2:	468c      	mov	ip, r1
   8bfc4:	e78c      	b.n	8bee0 <_malloc_r+0x378>
   8bfc6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bfca:	d815      	bhi.n	8bff8 <_malloc_r+0x490>
   8bfcc:	0bf3      	lsrs	r3, r6, #15
   8bfce:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8bfd2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8bfd6:	00c1      	lsls	r1, r0, #3
   8bfd8:	e5e8      	b.n	8bbac <_malloc_r+0x44>
   8bfda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8bfde:	e6ee      	b.n	8bdbe <_malloc_r+0x256>
   8bfe0:	2101      	movs	r1, #1
   8bfe2:	687b      	ldr	r3, [r7, #4]
   8bfe4:	1092      	asrs	r2, r2, #2
   8bfe6:	fa01 f202 	lsl.w	r2, r1, r2
   8bfea:	431a      	orrs	r2, r3
   8bfec:	607a      	str	r2, [r7, #4]
   8bfee:	4663      	mov	r3, ip
   8bff0:	e779      	b.n	8bee6 <_malloc_r+0x37e>
   8bff2:	2301      	movs	r3, #1
   8bff4:	6053      	str	r3, [r2, #4]
   8bff6:	e72a      	b.n	8be4e <_malloc_r+0x2e6>
   8bff8:	f240 5254 	movw	r2, #1364	; 0x554
   8bffc:	4293      	cmp	r3, r2
   8bffe:	d822      	bhi.n	8c046 <_malloc_r+0x4de>
   8c000:	0cb3      	lsrs	r3, r6, #18
   8c002:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8c006:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8c00a:	00c1      	lsls	r1, r0, #3
   8c00c:	e5ce      	b.n	8bbac <_malloc_r+0x44>
   8c00e:	f103 0b10 	add.w	fp, r3, #16
   8c012:	e6af      	b.n	8bd74 <_malloc_r+0x20c>
   8c014:	2a54      	cmp	r2, #84	; 0x54
   8c016:	d829      	bhi.n	8c06c <_malloc_r+0x504>
   8c018:	0b1a      	lsrs	r2, r3, #12
   8c01a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8c01e:	00c9      	lsls	r1, r1, #3
   8c020:	326e      	adds	r2, #110	; 0x6e
   8c022:	e74d      	b.n	8bec0 <_malloc_r+0x358>
   8c024:	4b20      	ldr	r3, [pc, #128]	; (8c0a8 <_malloc_r+0x540>)
   8c026:	6819      	ldr	r1, [r3, #0]
   8c028:	4459      	add	r1, fp
   8c02a:	6019      	str	r1, [r3, #0]
   8c02c:	e6b3      	b.n	8bd96 <_malloc_r+0x22e>
   8c02e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8c032:	2800      	cmp	r0, #0
   8c034:	f47f aeaf 	bne.w	8bd96 <_malloc_r+0x22e>
   8c038:	eb08 030b 	add.w	r3, r8, fp
   8c03c:	68ba      	ldr	r2, [r7, #8]
   8c03e:	f043 0301 	orr.w	r3, r3, #1
   8c042:	6053      	str	r3, [r2, #4]
   8c044:	e6ef      	b.n	8be26 <_malloc_r+0x2be>
   8c046:	207f      	movs	r0, #127	; 0x7f
   8c048:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c04c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8c050:	e5ac      	b.n	8bbac <_malloc_r+0x44>
   8c052:	f104 0108 	add.w	r1, r4, #8
   8c056:	4628      	mov	r0, r5
   8c058:	9300      	str	r3, [sp, #0]
   8c05a:	f7ff fa59 	bl	8b510 <_free_r>
   8c05e:	9b00      	ldr	r3, [sp, #0]
   8c060:	6819      	ldr	r1, [r3, #0]
   8c062:	e6e0      	b.n	8be26 <_malloc_r+0x2be>
   8c064:	2001      	movs	r0, #1
   8c066:	f04f 0900 	mov.w	r9, #0
   8c06a:	e6bd      	b.n	8bde8 <_malloc_r+0x280>
   8c06c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8c070:	d805      	bhi.n	8c07e <_malloc_r+0x516>
   8c072:	0bda      	lsrs	r2, r3, #15
   8c074:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8c078:	00c9      	lsls	r1, r1, #3
   8c07a:	3277      	adds	r2, #119	; 0x77
   8c07c:	e720      	b.n	8bec0 <_malloc_r+0x358>
   8c07e:	f240 5154 	movw	r1, #1364	; 0x554
   8c082:	428a      	cmp	r2, r1
   8c084:	d805      	bhi.n	8c092 <_malloc_r+0x52a>
   8c086:	0c9a      	lsrs	r2, r3, #18
   8c088:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8c08c:	00c9      	lsls	r1, r1, #3
   8c08e:	327c      	adds	r2, #124	; 0x7c
   8c090:	e716      	b.n	8bec0 <_malloc_r+0x358>
   8c092:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c096:	227e      	movs	r2, #126	; 0x7e
   8c098:	e712      	b.n	8bec0 <_malloc_r+0x358>
   8c09a:	687b      	ldr	r3, [r7, #4]
   8c09c:	e780      	b.n	8bfa0 <_malloc_r+0x438>
   8c09e:	08f0      	lsrs	r0, r6, #3
   8c0a0:	f106 0308 	add.w	r3, r6, #8
   8c0a4:	e60e      	b.n	8bcc4 <_malloc_r+0x15c>
   8c0a6:	bf00      	nop
   8c0a8:	200023b4 	.word	0x200023b4

0008c0ac <__ascii_mbtowc>:
   8c0ac:	b082      	sub	sp, #8
   8c0ae:	b149      	cbz	r1, 8c0c4 <__ascii_mbtowc+0x18>
   8c0b0:	b15a      	cbz	r2, 8c0ca <__ascii_mbtowc+0x1e>
   8c0b2:	b16b      	cbz	r3, 8c0d0 <__ascii_mbtowc+0x24>
   8c0b4:	7813      	ldrb	r3, [r2, #0]
   8c0b6:	600b      	str	r3, [r1, #0]
   8c0b8:	7812      	ldrb	r2, [r2, #0]
   8c0ba:	1c10      	adds	r0, r2, #0
   8c0bc:	bf18      	it	ne
   8c0be:	2001      	movne	r0, #1
   8c0c0:	b002      	add	sp, #8
   8c0c2:	4770      	bx	lr
   8c0c4:	a901      	add	r1, sp, #4
   8c0c6:	2a00      	cmp	r2, #0
   8c0c8:	d1f3      	bne.n	8c0b2 <__ascii_mbtowc+0x6>
   8c0ca:	4610      	mov	r0, r2
   8c0cc:	b002      	add	sp, #8
   8c0ce:	4770      	bx	lr
   8c0d0:	f06f 0001 	mvn.w	r0, #1
   8c0d4:	e7f4      	b.n	8c0c0 <__ascii_mbtowc+0x14>
   8c0d6:	bf00      	nop

0008c0d8 <memchr>:
   8c0d8:	0783      	lsls	r3, r0, #30
   8c0da:	b470      	push	{r4, r5, r6}
   8c0dc:	b2cd      	uxtb	r5, r1
   8c0de:	d03d      	beq.n	8c15c <memchr+0x84>
   8c0e0:	1e54      	subs	r4, r2, #1
   8c0e2:	b30a      	cbz	r2, 8c128 <memchr+0x50>
   8c0e4:	7803      	ldrb	r3, [r0, #0]
   8c0e6:	42ab      	cmp	r3, r5
   8c0e8:	d01f      	beq.n	8c12a <memchr+0x52>
   8c0ea:	1c43      	adds	r3, r0, #1
   8c0ec:	e005      	b.n	8c0fa <memchr+0x22>
   8c0ee:	f114 34ff 	adds.w	r4, r4, #4294967295
   8c0f2:	d319      	bcc.n	8c128 <memchr+0x50>
   8c0f4:	7802      	ldrb	r2, [r0, #0]
   8c0f6:	42aa      	cmp	r2, r5
   8c0f8:	d017      	beq.n	8c12a <memchr+0x52>
   8c0fa:	f013 0f03 	tst.w	r3, #3
   8c0fe:	4618      	mov	r0, r3
   8c100:	f103 0301 	add.w	r3, r3, #1
   8c104:	d1f3      	bne.n	8c0ee <memchr+0x16>
   8c106:	2c03      	cmp	r4, #3
   8c108:	d811      	bhi.n	8c12e <memchr+0x56>
   8c10a:	b34c      	cbz	r4, 8c160 <memchr+0x88>
   8c10c:	7803      	ldrb	r3, [r0, #0]
   8c10e:	42ab      	cmp	r3, r5
   8c110:	d00b      	beq.n	8c12a <memchr+0x52>
   8c112:	4404      	add	r4, r0
   8c114:	1c43      	adds	r3, r0, #1
   8c116:	e002      	b.n	8c11e <memchr+0x46>
   8c118:	7802      	ldrb	r2, [r0, #0]
   8c11a:	42aa      	cmp	r2, r5
   8c11c:	d005      	beq.n	8c12a <memchr+0x52>
   8c11e:	429c      	cmp	r4, r3
   8c120:	4618      	mov	r0, r3
   8c122:	f103 0301 	add.w	r3, r3, #1
   8c126:	d1f7      	bne.n	8c118 <memchr+0x40>
   8c128:	2000      	movs	r0, #0
   8c12a:	bc70      	pop	{r4, r5, r6}
   8c12c:	4770      	bx	lr
   8c12e:	0209      	lsls	r1, r1, #8
   8c130:	b289      	uxth	r1, r1
   8c132:	4329      	orrs	r1, r5
   8c134:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   8c138:	6803      	ldr	r3, [r0, #0]
   8c13a:	4606      	mov	r6, r0
   8c13c:	404b      	eors	r3, r1
   8c13e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8c142:	ea22 0303 	bic.w	r3, r2, r3
   8c146:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8c14a:	f100 0004 	add.w	r0, r0, #4
   8c14e:	d103      	bne.n	8c158 <memchr+0x80>
   8c150:	3c04      	subs	r4, #4
   8c152:	2c03      	cmp	r4, #3
   8c154:	d8f0      	bhi.n	8c138 <memchr+0x60>
   8c156:	e7d8      	b.n	8c10a <memchr+0x32>
   8c158:	4630      	mov	r0, r6
   8c15a:	e7d7      	b.n	8c10c <memchr+0x34>
   8c15c:	4614      	mov	r4, r2
   8c15e:	e7d2      	b.n	8c106 <memchr+0x2e>
   8c160:	4620      	mov	r0, r4
   8c162:	e7e2      	b.n	8c12a <memchr+0x52>

0008c164 <memmove>:
   8c164:	4288      	cmp	r0, r1
   8c166:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c168:	d90d      	bls.n	8c186 <memmove+0x22>
   8c16a:	188b      	adds	r3, r1, r2
   8c16c:	4298      	cmp	r0, r3
   8c16e:	d20a      	bcs.n	8c186 <memmove+0x22>
   8c170:	1884      	adds	r4, r0, r2
   8c172:	2a00      	cmp	r2, #0
   8c174:	d051      	beq.n	8c21a <memmove+0xb6>
   8c176:	4622      	mov	r2, r4
   8c178:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8c17c:	4299      	cmp	r1, r3
   8c17e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8c182:	d1f9      	bne.n	8c178 <memmove+0x14>
   8c184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c186:	2a0f      	cmp	r2, #15
   8c188:	d948      	bls.n	8c21c <memmove+0xb8>
   8c18a:	ea41 0300 	orr.w	r3, r1, r0
   8c18e:	079b      	lsls	r3, r3, #30
   8c190:	d146      	bne.n	8c220 <memmove+0xbc>
   8c192:	4615      	mov	r5, r2
   8c194:	f100 0410 	add.w	r4, r0, #16
   8c198:	f101 0310 	add.w	r3, r1, #16
   8c19c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8c1a0:	3d10      	subs	r5, #16
   8c1a2:	f844 6c10 	str.w	r6, [r4, #-16]
   8c1a6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8c1aa:	2d0f      	cmp	r5, #15
   8c1ac:	f844 6c0c 	str.w	r6, [r4, #-12]
   8c1b0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8c1b4:	f104 0410 	add.w	r4, r4, #16
   8c1b8:	f844 6c18 	str.w	r6, [r4, #-24]
   8c1bc:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8c1c0:	f103 0310 	add.w	r3, r3, #16
   8c1c4:	f844 6c14 	str.w	r6, [r4, #-20]
   8c1c8:	d8e8      	bhi.n	8c19c <memmove+0x38>
   8c1ca:	f1a2 0310 	sub.w	r3, r2, #16
   8c1ce:	f023 030f 	bic.w	r3, r3, #15
   8c1d2:	f002 0e0f 	and.w	lr, r2, #15
   8c1d6:	3310      	adds	r3, #16
   8c1d8:	f1be 0f03 	cmp.w	lr, #3
   8c1dc:	4419      	add	r1, r3
   8c1de:	4403      	add	r3, r0
   8c1e0:	d921      	bls.n	8c226 <memmove+0xc2>
   8c1e2:	460e      	mov	r6, r1
   8c1e4:	4674      	mov	r4, lr
   8c1e6:	1f1d      	subs	r5, r3, #4
   8c1e8:	f856 7b04 	ldr.w	r7, [r6], #4
   8c1ec:	3c04      	subs	r4, #4
   8c1ee:	2c03      	cmp	r4, #3
   8c1f0:	f845 7f04 	str.w	r7, [r5, #4]!
   8c1f4:	d8f8      	bhi.n	8c1e8 <memmove+0x84>
   8c1f6:	f1ae 0404 	sub.w	r4, lr, #4
   8c1fa:	f024 0403 	bic.w	r4, r4, #3
   8c1fe:	3404      	adds	r4, #4
   8c200:	4421      	add	r1, r4
   8c202:	4423      	add	r3, r4
   8c204:	f002 0203 	and.w	r2, r2, #3
   8c208:	b162      	cbz	r2, 8c224 <memmove+0xc0>
   8c20a:	3b01      	subs	r3, #1
   8c20c:	440a      	add	r2, r1
   8c20e:	f811 4b01 	ldrb.w	r4, [r1], #1
   8c212:	428a      	cmp	r2, r1
   8c214:	f803 4f01 	strb.w	r4, [r3, #1]!
   8c218:	d1f9      	bne.n	8c20e <memmove+0xaa>
   8c21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c21c:	4603      	mov	r3, r0
   8c21e:	e7f3      	b.n	8c208 <memmove+0xa4>
   8c220:	4603      	mov	r3, r0
   8c222:	e7f2      	b.n	8c20a <memmove+0xa6>
   8c224:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c226:	4672      	mov	r2, lr
   8c228:	e7ee      	b.n	8c208 <memmove+0xa4>
   8c22a:	bf00      	nop

0008c22c <__malloc_lock>:
   8c22c:	4801      	ldr	r0, [pc, #4]	; (8c234 <__malloc_lock+0x8>)
   8c22e:	f7ff bc17 	b.w	8ba60 <__retarget_lock_acquire_recursive>
   8c232:	bf00      	nop
   8c234:	20002e14 	.word	0x20002e14

0008c238 <__malloc_unlock>:
   8c238:	4801      	ldr	r0, [pc, #4]	; (8c240 <__malloc_unlock+0x8>)
   8c23a:	f7ff bc13 	b.w	8ba64 <__retarget_lock_release_recursive>
   8c23e:	bf00      	nop
   8c240:	20002e14 	.word	0x20002e14

0008c244 <_Balloc>:
   8c244:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c246:	b570      	push	{r4, r5, r6, lr}
   8c248:	4605      	mov	r5, r0
   8c24a:	460c      	mov	r4, r1
   8c24c:	b14b      	cbz	r3, 8c262 <_Balloc+0x1e>
   8c24e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8c252:	b180      	cbz	r0, 8c276 <_Balloc+0x32>
   8c254:	6802      	ldr	r2, [r0, #0]
   8c256:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8c25a:	2300      	movs	r3, #0
   8c25c:	6103      	str	r3, [r0, #16]
   8c25e:	60c3      	str	r3, [r0, #12]
   8c260:	bd70      	pop	{r4, r5, r6, pc}
   8c262:	2221      	movs	r2, #33	; 0x21
   8c264:	2104      	movs	r1, #4
   8c266:	f000 fea7 	bl	8cfb8 <_calloc_r>
   8c26a:	64e8      	str	r0, [r5, #76]	; 0x4c
   8c26c:	4603      	mov	r3, r0
   8c26e:	2800      	cmp	r0, #0
   8c270:	d1ed      	bne.n	8c24e <_Balloc+0xa>
   8c272:	2000      	movs	r0, #0
   8c274:	bd70      	pop	{r4, r5, r6, pc}
   8c276:	2101      	movs	r1, #1
   8c278:	fa01 f604 	lsl.w	r6, r1, r4
   8c27c:	1d72      	adds	r2, r6, #5
   8c27e:	4628      	mov	r0, r5
   8c280:	0092      	lsls	r2, r2, #2
   8c282:	f000 fe99 	bl	8cfb8 <_calloc_r>
   8c286:	2800      	cmp	r0, #0
   8c288:	d0f3      	beq.n	8c272 <_Balloc+0x2e>
   8c28a:	6044      	str	r4, [r0, #4]
   8c28c:	6086      	str	r6, [r0, #8]
   8c28e:	e7e4      	b.n	8c25a <_Balloc+0x16>

0008c290 <_Bfree>:
   8c290:	b131      	cbz	r1, 8c2a0 <_Bfree+0x10>
   8c292:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c294:	684a      	ldr	r2, [r1, #4]
   8c296:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8c29a:	6008      	str	r0, [r1, #0]
   8c29c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8c2a0:	4770      	bx	lr
   8c2a2:	bf00      	nop

0008c2a4 <__multadd>:
   8c2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c2a6:	460c      	mov	r4, r1
   8c2a8:	4605      	mov	r5, r0
   8c2aa:	f04f 0e00 	mov.w	lr, #0
   8c2ae:	690e      	ldr	r6, [r1, #16]
   8c2b0:	b083      	sub	sp, #12
   8c2b2:	f101 0714 	add.w	r7, r1, #20
   8c2b6:	6838      	ldr	r0, [r7, #0]
   8c2b8:	f10e 0e01 	add.w	lr, lr, #1
   8c2bc:	b281      	uxth	r1, r0
   8c2be:	fb02 3301 	mla	r3, r2, r1, r3
   8c2c2:	0c01      	lsrs	r1, r0, #16
   8c2c4:	0c18      	lsrs	r0, r3, #16
   8c2c6:	fb02 0101 	mla	r1, r2, r1, r0
   8c2ca:	b29b      	uxth	r3, r3
   8c2cc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8c2d0:	4576      	cmp	r6, lr
   8c2d2:	f847 3b04 	str.w	r3, [r7], #4
   8c2d6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8c2da:	dcec      	bgt.n	8c2b6 <__multadd+0x12>
   8c2dc:	b13b      	cbz	r3, 8c2ee <__multadd+0x4a>
   8c2de:	68a2      	ldr	r2, [r4, #8]
   8c2e0:	4296      	cmp	r6, r2
   8c2e2:	da07      	bge.n	8c2f4 <__multadd+0x50>
   8c2e4:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   8c2e8:	3601      	adds	r6, #1
   8c2ea:	6153      	str	r3, [r2, #20]
   8c2ec:	6126      	str	r6, [r4, #16]
   8c2ee:	4620      	mov	r0, r4
   8c2f0:	b003      	add	sp, #12
   8c2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c2f4:	6861      	ldr	r1, [r4, #4]
   8c2f6:	4628      	mov	r0, r5
   8c2f8:	3101      	adds	r1, #1
   8c2fa:	9301      	str	r3, [sp, #4]
   8c2fc:	f7ff ffa2 	bl	8c244 <_Balloc>
   8c300:	4607      	mov	r7, r0
   8c302:	6922      	ldr	r2, [r4, #16]
   8c304:	f104 010c 	add.w	r1, r4, #12
   8c308:	3202      	adds	r2, #2
   8c30a:	0092      	lsls	r2, r2, #2
   8c30c:	300c      	adds	r0, #12
   8c30e:	f7fb fbb9 	bl	87a84 <memcpy>
   8c312:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8c314:	6861      	ldr	r1, [r4, #4]
   8c316:	9b01      	ldr	r3, [sp, #4]
   8c318:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8c31c:	6020      	str	r0, [r4, #0]
   8c31e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8c322:	463c      	mov	r4, r7
   8c324:	e7de      	b.n	8c2e4 <__multadd+0x40>
   8c326:	bf00      	nop

0008c328 <__hi0bits>:
   8c328:	0c02      	lsrs	r2, r0, #16
   8c32a:	0412      	lsls	r2, r2, #16
   8c32c:	4603      	mov	r3, r0
   8c32e:	b9b2      	cbnz	r2, 8c35e <__hi0bits+0x36>
   8c330:	0403      	lsls	r3, r0, #16
   8c332:	2010      	movs	r0, #16
   8c334:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8c338:	bf04      	itt	eq
   8c33a:	021b      	lsleq	r3, r3, #8
   8c33c:	3008      	addeq	r0, #8
   8c33e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8c342:	bf04      	itt	eq
   8c344:	011b      	lsleq	r3, r3, #4
   8c346:	3004      	addeq	r0, #4
   8c348:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8c34c:	bf04      	itt	eq
   8c34e:	009b      	lsleq	r3, r3, #2
   8c350:	3002      	addeq	r0, #2
   8c352:	2b00      	cmp	r3, #0
   8c354:	db02      	blt.n	8c35c <__hi0bits+0x34>
   8c356:	005b      	lsls	r3, r3, #1
   8c358:	d403      	bmi.n	8c362 <__hi0bits+0x3a>
   8c35a:	2020      	movs	r0, #32
   8c35c:	4770      	bx	lr
   8c35e:	2000      	movs	r0, #0
   8c360:	e7e8      	b.n	8c334 <__hi0bits+0xc>
   8c362:	3001      	adds	r0, #1
   8c364:	4770      	bx	lr
   8c366:	bf00      	nop

0008c368 <__lo0bits>:
   8c368:	6803      	ldr	r3, [r0, #0]
   8c36a:	4601      	mov	r1, r0
   8c36c:	f013 0207 	ands.w	r2, r3, #7
   8c370:	d007      	beq.n	8c382 <__lo0bits+0x1a>
   8c372:	07da      	lsls	r2, r3, #31
   8c374:	d421      	bmi.n	8c3ba <__lo0bits+0x52>
   8c376:	0798      	lsls	r0, r3, #30
   8c378:	d421      	bmi.n	8c3be <__lo0bits+0x56>
   8c37a:	089b      	lsrs	r3, r3, #2
   8c37c:	600b      	str	r3, [r1, #0]
   8c37e:	2002      	movs	r0, #2
   8c380:	4770      	bx	lr
   8c382:	b298      	uxth	r0, r3
   8c384:	b198      	cbz	r0, 8c3ae <__lo0bits+0x46>
   8c386:	4610      	mov	r0, r2
   8c388:	f013 0fff 	tst.w	r3, #255	; 0xff
   8c38c:	bf04      	itt	eq
   8c38e:	0a1b      	lsreq	r3, r3, #8
   8c390:	3008      	addeq	r0, #8
   8c392:	071a      	lsls	r2, r3, #28
   8c394:	bf04      	itt	eq
   8c396:	091b      	lsreq	r3, r3, #4
   8c398:	3004      	addeq	r0, #4
   8c39a:	079a      	lsls	r2, r3, #30
   8c39c:	bf04      	itt	eq
   8c39e:	089b      	lsreq	r3, r3, #2
   8c3a0:	3002      	addeq	r0, #2
   8c3a2:	07da      	lsls	r2, r3, #31
   8c3a4:	d407      	bmi.n	8c3b6 <__lo0bits+0x4e>
   8c3a6:	085b      	lsrs	r3, r3, #1
   8c3a8:	d104      	bne.n	8c3b4 <__lo0bits+0x4c>
   8c3aa:	2020      	movs	r0, #32
   8c3ac:	4770      	bx	lr
   8c3ae:	0c1b      	lsrs	r3, r3, #16
   8c3b0:	2010      	movs	r0, #16
   8c3b2:	e7e9      	b.n	8c388 <__lo0bits+0x20>
   8c3b4:	3001      	adds	r0, #1
   8c3b6:	600b      	str	r3, [r1, #0]
   8c3b8:	4770      	bx	lr
   8c3ba:	2000      	movs	r0, #0
   8c3bc:	4770      	bx	lr
   8c3be:	085b      	lsrs	r3, r3, #1
   8c3c0:	600b      	str	r3, [r1, #0]
   8c3c2:	2001      	movs	r0, #1
   8c3c4:	4770      	bx	lr
   8c3c6:	bf00      	nop

0008c3c8 <__i2b>:
   8c3c8:	b510      	push	{r4, lr}
   8c3ca:	460c      	mov	r4, r1
   8c3cc:	2101      	movs	r1, #1
   8c3ce:	f7ff ff39 	bl	8c244 <_Balloc>
   8c3d2:	2201      	movs	r2, #1
   8c3d4:	6144      	str	r4, [r0, #20]
   8c3d6:	6102      	str	r2, [r0, #16]
   8c3d8:	bd10      	pop	{r4, pc}
   8c3da:	bf00      	nop

0008c3dc <__multiply>:
   8c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c3e0:	690c      	ldr	r4, [r1, #16]
   8c3e2:	6915      	ldr	r5, [r2, #16]
   8c3e4:	b083      	sub	sp, #12
   8c3e6:	42ac      	cmp	r4, r5
   8c3e8:	468b      	mov	fp, r1
   8c3ea:	4616      	mov	r6, r2
   8c3ec:	da04      	bge.n	8c3f8 <__multiply+0x1c>
   8c3ee:	4622      	mov	r2, r4
   8c3f0:	46b3      	mov	fp, r6
   8c3f2:	462c      	mov	r4, r5
   8c3f4:	460e      	mov	r6, r1
   8c3f6:	4615      	mov	r5, r2
   8c3f8:	f8db 3008 	ldr.w	r3, [fp, #8]
   8c3fc:	eb04 0805 	add.w	r8, r4, r5
   8c400:	f8db 1004 	ldr.w	r1, [fp, #4]
   8c404:	4598      	cmp	r8, r3
   8c406:	bfc8      	it	gt
   8c408:	3101      	addgt	r1, #1
   8c40a:	f7ff ff1b 	bl	8c244 <_Balloc>
   8c40e:	f100 0914 	add.w	r9, r0, #20
   8c412:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8c416:	45d1      	cmp	r9, sl
   8c418:	9000      	str	r0, [sp, #0]
   8c41a:	d205      	bcs.n	8c428 <__multiply+0x4c>
   8c41c:	464b      	mov	r3, r9
   8c41e:	2100      	movs	r1, #0
   8c420:	f843 1b04 	str.w	r1, [r3], #4
   8c424:	459a      	cmp	sl, r3
   8c426:	d8fb      	bhi.n	8c420 <__multiply+0x44>
   8c428:	f106 0c14 	add.w	ip, r6, #20
   8c42c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8c430:	f10b 0b14 	add.w	fp, fp, #20
   8c434:	459c      	cmp	ip, r3
   8c436:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8c43a:	d24b      	bcs.n	8c4d4 <__multiply+0xf8>
   8c43c:	f8cd a004 	str.w	sl, [sp, #4]
   8c440:	469a      	mov	sl, r3
   8c442:	f8dc 5000 	ldr.w	r5, [ip]
   8c446:	b2af      	uxth	r7, r5
   8c448:	b1e7      	cbz	r7, 8c484 <__multiply+0xa8>
   8c44a:	464d      	mov	r5, r9
   8c44c:	465e      	mov	r6, fp
   8c44e:	2100      	movs	r1, #0
   8c450:	f856 2b04 	ldr.w	r2, [r6], #4
   8c454:	6828      	ldr	r0, [r5, #0]
   8c456:	b293      	uxth	r3, r2
   8c458:	b284      	uxth	r4, r0
   8c45a:	0c12      	lsrs	r2, r2, #16
   8c45c:	fb07 4303 	mla	r3, r7, r3, r4
   8c460:	0c00      	lsrs	r0, r0, #16
   8c462:	fb07 0202 	mla	r2, r7, r2, r0
   8c466:	440b      	add	r3, r1
   8c468:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8c46c:	b29b      	uxth	r3, r3
   8c46e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8c472:	45b6      	cmp	lr, r6
   8c474:	f845 3b04 	str.w	r3, [r5], #4
   8c478:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8c47c:	d8e8      	bhi.n	8c450 <__multiply+0x74>
   8c47e:	6029      	str	r1, [r5, #0]
   8c480:	f8dc 5000 	ldr.w	r5, [ip]
   8c484:	0c2d      	lsrs	r5, r5, #16
   8c486:	d01d      	beq.n	8c4c4 <__multiply+0xe8>
   8c488:	f8d9 3000 	ldr.w	r3, [r9]
   8c48c:	4648      	mov	r0, r9
   8c48e:	461c      	mov	r4, r3
   8c490:	4659      	mov	r1, fp
   8c492:	2200      	movs	r2, #0
   8c494:	880e      	ldrh	r6, [r1, #0]
   8c496:	0c24      	lsrs	r4, r4, #16
   8c498:	fb05 4406 	mla	r4, r5, r6, r4
   8c49c:	b29b      	uxth	r3, r3
   8c49e:	4422      	add	r2, r4
   8c4a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8c4a4:	f840 3b04 	str.w	r3, [r0], #4
   8c4a8:	f851 3b04 	ldr.w	r3, [r1], #4
   8c4ac:	6804      	ldr	r4, [r0, #0]
   8c4ae:	0c1b      	lsrs	r3, r3, #16
   8c4b0:	b2a6      	uxth	r6, r4
   8c4b2:	fb05 6303 	mla	r3, r5, r3, r6
   8c4b6:	458e      	cmp	lr, r1
   8c4b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8c4bc:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8c4c0:	d8e8      	bhi.n	8c494 <__multiply+0xb8>
   8c4c2:	6003      	str	r3, [r0, #0]
   8c4c4:	f10c 0c04 	add.w	ip, ip, #4
   8c4c8:	45e2      	cmp	sl, ip
   8c4ca:	f109 0904 	add.w	r9, r9, #4
   8c4ce:	d8b8      	bhi.n	8c442 <__multiply+0x66>
   8c4d0:	f8dd a004 	ldr.w	sl, [sp, #4]
   8c4d4:	f1b8 0f00 	cmp.w	r8, #0
   8c4d8:	dd0b      	ble.n	8c4f2 <__multiply+0x116>
   8c4da:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8c4de:	f1aa 0a04 	sub.w	sl, sl, #4
   8c4e2:	b11b      	cbz	r3, 8c4ec <__multiply+0x110>
   8c4e4:	e005      	b.n	8c4f2 <__multiply+0x116>
   8c4e6:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8c4ea:	b913      	cbnz	r3, 8c4f2 <__multiply+0x116>
   8c4ec:	f1b8 0801 	subs.w	r8, r8, #1
   8c4f0:	d1f9      	bne.n	8c4e6 <__multiply+0x10a>
   8c4f2:	9800      	ldr	r0, [sp, #0]
   8c4f4:	f8c0 8010 	str.w	r8, [r0, #16]
   8c4f8:	b003      	add	sp, #12
   8c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c4fe:	bf00      	nop

0008c500 <__pow5mult>:
   8c500:	f012 0303 	ands.w	r3, r2, #3
   8c504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c508:	4614      	mov	r4, r2
   8c50a:	4607      	mov	r7, r0
   8c50c:	d12e      	bne.n	8c56c <__pow5mult+0x6c>
   8c50e:	460d      	mov	r5, r1
   8c510:	10a4      	asrs	r4, r4, #2
   8c512:	d01c      	beq.n	8c54e <__pow5mult+0x4e>
   8c514:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8c516:	b396      	cbz	r6, 8c57e <__pow5mult+0x7e>
   8c518:	07e3      	lsls	r3, r4, #31
   8c51a:	f04f 0800 	mov.w	r8, #0
   8c51e:	d406      	bmi.n	8c52e <__pow5mult+0x2e>
   8c520:	1064      	asrs	r4, r4, #1
   8c522:	d014      	beq.n	8c54e <__pow5mult+0x4e>
   8c524:	6830      	ldr	r0, [r6, #0]
   8c526:	b1a8      	cbz	r0, 8c554 <__pow5mult+0x54>
   8c528:	4606      	mov	r6, r0
   8c52a:	07e3      	lsls	r3, r4, #31
   8c52c:	d5f8      	bpl.n	8c520 <__pow5mult+0x20>
   8c52e:	4632      	mov	r2, r6
   8c530:	4629      	mov	r1, r5
   8c532:	4638      	mov	r0, r7
   8c534:	f7ff ff52 	bl	8c3dc <__multiply>
   8c538:	b1b5      	cbz	r5, 8c568 <__pow5mult+0x68>
   8c53a:	686a      	ldr	r2, [r5, #4]
   8c53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c53e:	1064      	asrs	r4, r4, #1
   8c540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c544:	6029      	str	r1, [r5, #0]
   8c546:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8c54a:	4605      	mov	r5, r0
   8c54c:	d1ea      	bne.n	8c524 <__pow5mult+0x24>
   8c54e:	4628      	mov	r0, r5
   8c550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c554:	4632      	mov	r2, r6
   8c556:	4631      	mov	r1, r6
   8c558:	4638      	mov	r0, r7
   8c55a:	f7ff ff3f 	bl	8c3dc <__multiply>
   8c55e:	6030      	str	r0, [r6, #0]
   8c560:	f8c0 8000 	str.w	r8, [r0]
   8c564:	4606      	mov	r6, r0
   8c566:	e7e0      	b.n	8c52a <__pow5mult+0x2a>
   8c568:	4605      	mov	r5, r0
   8c56a:	e7d9      	b.n	8c520 <__pow5mult+0x20>
   8c56c:	4a0b      	ldr	r2, [pc, #44]	; (8c59c <__pow5mult+0x9c>)
   8c56e:	3b01      	subs	r3, #1
   8c570:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8c574:	2300      	movs	r3, #0
   8c576:	f7ff fe95 	bl	8c2a4 <__multadd>
   8c57a:	4605      	mov	r5, r0
   8c57c:	e7c8      	b.n	8c510 <__pow5mult+0x10>
   8c57e:	2101      	movs	r1, #1
   8c580:	4638      	mov	r0, r7
   8c582:	f7ff fe5f 	bl	8c244 <_Balloc>
   8c586:	f240 2171 	movw	r1, #625	; 0x271
   8c58a:	2201      	movs	r2, #1
   8c58c:	2300      	movs	r3, #0
   8c58e:	6141      	str	r1, [r0, #20]
   8c590:	6102      	str	r2, [r0, #16]
   8c592:	4606      	mov	r6, r0
   8c594:	64b8      	str	r0, [r7, #72]	; 0x48
   8c596:	6003      	str	r3, [r0, #0]
   8c598:	e7be      	b.n	8c518 <__pow5mult+0x18>
   8c59a:	bf00      	nop
   8c59c:	0008ded0 	.word	0x0008ded0

0008c5a0 <__lshift>:
   8c5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8c5a4:	690b      	ldr	r3, [r1, #16]
   8c5a6:	1154      	asrs	r4, r2, #5
   8c5a8:	eb04 0803 	add.w	r8, r4, r3
   8c5ac:	688b      	ldr	r3, [r1, #8]
   8c5ae:	f108 0501 	add.w	r5, r8, #1
   8c5b2:	429d      	cmp	r5, r3
   8c5b4:	460e      	mov	r6, r1
   8c5b6:	4691      	mov	r9, r2
   8c5b8:	4607      	mov	r7, r0
   8c5ba:	6849      	ldr	r1, [r1, #4]
   8c5bc:	dd04      	ble.n	8c5c8 <__lshift+0x28>
   8c5be:	005b      	lsls	r3, r3, #1
   8c5c0:	429d      	cmp	r5, r3
   8c5c2:	f101 0101 	add.w	r1, r1, #1
   8c5c6:	dcfa      	bgt.n	8c5be <__lshift+0x1e>
   8c5c8:	4638      	mov	r0, r7
   8c5ca:	f7ff fe3b 	bl	8c244 <_Balloc>
   8c5ce:	2c00      	cmp	r4, #0
   8c5d0:	f100 0314 	add.w	r3, r0, #20
   8c5d4:	dd06      	ble.n	8c5e4 <__lshift+0x44>
   8c5d6:	2100      	movs	r1, #0
   8c5d8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   8c5dc:	f843 1b04 	str.w	r1, [r3], #4
   8c5e0:	429a      	cmp	r2, r3
   8c5e2:	d1fb      	bne.n	8c5dc <__lshift+0x3c>
   8c5e4:	6934      	ldr	r4, [r6, #16]
   8c5e6:	f106 0114 	add.w	r1, r6, #20
   8c5ea:	f019 091f 	ands.w	r9, r9, #31
   8c5ee:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8c5f2:	d01d      	beq.n	8c630 <__lshift+0x90>
   8c5f4:	2200      	movs	r2, #0
   8c5f6:	f1c9 0c20 	rsb	ip, r9, #32
   8c5fa:	680c      	ldr	r4, [r1, #0]
   8c5fc:	fa04 f409 	lsl.w	r4, r4, r9
   8c600:	4314      	orrs	r4, r2
   8c602:	f843 4b04 	str.w	r4, [r3], #4
   8c606:	f851 2b04 	ldr.w	r2, [r1], #4
   8c60a:	458e      	cmp	lr, r1
   8c60c:	fa22 f20c 	lsr.w	r2, r2, ip
   8c610:	d8f3      	bhi.n	8c5fa <__lshift+0x5a>
   8c612:	601a      	str	r2, [r3, #0]
   8c614:	b10a      	cbz	r2, 8c61a <__lshift+0x7a>
   8c616:	f108 0502 	add.w	r5, r8, #2
   8c61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c61c:	6872      	ldr	r2, [r6, #4]
   8c61e:	3d01      	subs	r5, #1
   8c620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c624:	6105      	str	r5, [r0, #16]
   8c626:	6031      	str	r1, [r6, #0]
   8c628:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8c62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c630:	3b04      	subs	r3, #4
   8c632:	f851 2b04 	ldr.w	r2, [r1], #4
   8c636:	458e      	cmp	lr, r1
   8c638:	f843 2f04 	str.w	r2, [r3, #4]!
   8c63c:	d8f9      	bhi.n	8c632 <__lshift+0x92>
   8c63e:	e7ec      	b.n	8c61a <__lshift+0x7a>

0008c640 <__mcmp>:
   8c640:	b430      	push	{r4, r5}
   8c642:	690b      	ldr	r3, [r1, #16]
   8c644:	4605      	mov	r5, r0
   8c646:	6900      	ldr	r0, [r0, #16]
   8c648:	1ac0      	subs	r0, r0, r3
   8c64a:	d10f      	bne.n	8c66c <__mcmp+0x2c>
   8c64c:	009b      	lsls	r3, r3, #2
   8c64e:	3514      	adds	r5, #20
   8c650:	3114      	adds	r1, #20
   8c652:	4419      	add	r1, r3
   8c654:	442b      	add	r3, r5
   8c656:	e001      	b.n	8c65c <__mcmp+0x1c>
   8c658:	429d      	cmp	r5, r3
   8c65a:	d207      	bcs.n	8c66c <__mcmp+0x2c>
   8c65c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8c660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8c664:	4294      	cmp	r4, r2
   8c666:	d0f7      	beq.n	8c658 <__mcmp+0x18>
   8c668:	d302      	bcc.n	8c670 <__mcmp+0x30>
   8c66a:	2001      	movs	r0, #1
   8c66c:	bc30      	pop	{r4, r5}
   8c66e:	4770      	bx	lr
   8c670:	f04f 30ff 	mov.w	r0, #4294967295
   8c674:	e7fa      	b.n	8c66c <__mcmp+0x2c>
   8c676:	bf00      	nop

0008c678 <__mdiff>:
   8c678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c67c:	690c      	ldr	r4, [r1, #16]
   8c67e:	4689      	mov	r9, r1
   8c680:	6911      	ldr	r1, [r2, #16]
   8c682:	4692      	mov	sl, r2
   8c684:	1a64      	subs	r4, r4, r1
   8c686:	2c00      	cmp	r4, #0
   8c688:	d117      	bne.n	8c6ba <__mdiff+0x42>
   8c68a:	0089      	lsls	r1, r1, #2
   8c68c:	f109 0714 	add.w	r7, r9, #20
   8c690:	f102 0614 	add.w	r6, r2, #20
   8c694:	187b      	adds	r3, r7, r1
   8c696:	4431      	add	r1, r6
   8c698:	e001      	b.n	8c69e <__mdiff+0x26>
   8c69a:	429f      	cmp	r7, r3
   8c69c:	d265      	bcs.n	8c76a <__mdiff+0xf2>
   8c69e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8c6a2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8c6a6:	4295      	cmp	r5, r2
   8c6a8:	d0f7      	beq.n	8c69a <__mdiff+0x22>
   8c6aa:	d267      	bcs.n	8c77c <__mdiff+0x104>
   8c6ac:	464b      	mov	r3, r9
   8c6ae:	46bb      	mov	fp, r7
   8c6b0:	46d1      	mov	r9, sl
   8c6b2:	4637      	mov	r7, r6
   8c6b4:	469a      	mov	sl, r3
   8c6b6:	2401      	movs	r4, #1
   8c6b8:	e005      	b.n	8c6c6 <__mdiff+0x4e>
   8c6ba:	db61      	blt.n	8c780 <__mdiff+0x108>
   8c6bc:	2400      	movs	r4, #0
   8c6be:	f109 0714 	add.w	r7, r9, #20
   8c6c2:	f10a 0b14 	add.w	fp, sl, #20
   8c6c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8c6ca:	f7ff fdbb 	bl	8c244 <_Balloc>
   8c6ce:	465d      	mov	r5, fp
   8c6d0:	f04f 0800 	mov.w	r8, #0
   8c6d4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   8c6d8:	f8da 3010 	ldr.w	r3, [sl, #16]
   8c6dc:	463e      	mov	r6, r7
   8c6de:	60c4      	str	r4, [r0, #12]
   8c6e0:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8c6e4:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   8c6e8:	f100 0414 	add.w	r4, r0, #20
   8c6ec:	f856 9b04 	ldr.w	r9, [r6], #4
   8c6f0:	f855 2b04 	ldr.w	r2, [r5], #4
   8c6f4:	fa1f f389 	uxth.w	r3, r9
   8c6f8:	4443      	add	r3, r8
   8c6fa:	fa1f f882 	uxth.w	r8, r2
   8c6fe:	0c12      	lsrs	r2, r2, #16
   8c700:	eba3 0308 	sub.w	r3, r3, r8
   8c704:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   8c708:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8c70c:	b29b      	uxth	r3, r3
   8c70e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8c712:	45ac      	cmp	ip, r5
   8c714:	f844 3b04 	str.w	r3, [r4], #4
   8c718:	ea4f 4822 	mov.w	r8, r2, asr #16
   8c71c:	d8e6      	bhi.n	8c6ec <__mdiff+0x74>
   8c71e:	42b7      	cmp	r7, r6
   8c720:	d917      	bls.n	8c752 <__mdiff+0xda>
   8c722:	46a4      	mov	ip, r4
   8c724:	4635      	mov	r5, r6
   8c726:	f855 3b04 	ldr.w	r3, [r5], #4
   8c72a:	b299      	uxth	r1, r3
   8c72c:	4441      	add	r1, r8
   8c72e:	140a      	asrs	r2, r1, #16
   8c730:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8c734:	b289      	uxth	r1, r1
   8c736:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8c73a:	42af      	cmp	r7, r5
   8c73c:	f84c 3b04 	str.w	r3, [ip], #4
   8c740:	ea4f 4822 	mov.w	r8, r2, asr #16
   8c744:	d8ef      	bhi.n	8c726 <__mdiff+0xae>
   8c746:	43f6      	mvns	r6, r6
   8c748:	4437      	add	r7, r6
   8c74a:	f027 0703 	bic.w	r7, r7, #3
   8c74e:	3704      	adds	r7, #4
   8c750:	443c      	add	r4, r7
   8c752:	3c04      	subs	r4, #4
   8c754:	b92b      	cbnz	r3, 8c762 <__mdiff+0xea>
   8c756:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8c75a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8c75e:	2b00      	cmp	r3, #0
   8c760:	d0f9      	beq.n	8c756 <__mdiff+0xde>
   8c762:	f8c0 e010 	str.w	lr, [r0, #16]
   8c766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c76a:	2100      	movs	r1, #0
   8c76c:	f7ff fd6a 	bl	8c244 <_Balloc>
   8c770:	2201      	movs	r2, #1
   8c772:	2300      	movs	r3, #0
   8c774:	6102      	str	r2, [r0, #16]
   8c776:	6143      	str	r3, [r0, #20]
   8c778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c77c:	46b3      	mov	fp, r6
   8c77e:	e7a2      	b.n	8c6c6 <__mdiff+0x4e>
   8c780:	464b      	mov	r3, r9
   8c782:	f109 0b14 	add.w	fp, r9, #20
   8c786:	f102 0714 	add.w	r7, r2, #20
   8c78a:	4691      	mov	r9, r2
   8c78c:	2401      	movs	r4, #1
   8c78e:	469a      	mov	sl, r3
   8c790:	e799      	b.n	8c6c6 <__mdiff+0x4e>
   8c792:	bf00      	nop

0008c794 <__d2b>:
   8c794:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c796:	2101      	movs	r1, #1
   8c798:	b083      	sub	sp, #12
   8c79a:	461c      	mov	r4, r3
   8c79c:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8c7a0:	4616      	mov	r6, r2
   8c7a2:	f7ff fd4f 	bl	8c244 <_Balloc>
   8c7a6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8c7aa:	4607      	mov	r7, r0
   8c7ac:	b10d      	cbz	r5, 8c7b2 <__d2b+0x1e>
   8c7ae:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8c7b2:	9401      	str	r4, [sp, #4]
   8c7b4:	b306      	cbz	r6, 8c7f8 <__d2b+0x64>
   8c7b6:	a802      	add	r0, sp, #8
   8c7b8:	f840 6d08 	str.w	r6, [r0, #-8]!
   8c7bc:	f7ff fdd4 	bl	8c368 <__lo0bits>
   8c7c0:	2800      	cmp	r0, #0
   8c7c2:	d130      	bne.n	8c826 <__d2b+0x92>
   8c7c4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8c7c8:	617a      	str	r2, [r7, #20]
   8c7ca:	2b00      	cmp	r3, #0
   8c7cc:	bf0c      	ite	eq
   8c7ce:	2101      	moveq	r1, #1
   8c7d0:	2102      	movne	r1, #2
   8c7d2:	61bb      	str	r3, [r7, #24]
   8c7d4:	6139      	str	r1, [r7, #16]
   8c7d6:	b9d5      	cbnz	r5, 8c80e <__d2b+0x7a>
   8c7d8:	9a08      	ldr	r2, [sp, #32]
   8c7da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8c7de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8c7e2:	6010      	str	r0, [r2, #0]
   8c7e4:	6918      	ldr	r0, [r3, #16]
   8c7e6:	f7ff fd9f 	bl	8c328 <__hi0bits>
   8c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8c7ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8c7f0:	6018      	str	r0, [r3, #0]
   8c7f2:	4638      	mov	r0, r7
   8c7f4:	b003      	add	sp, #12
   8c7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c7f8:	a801      	add	r0, sp, #4
   8c7fa:	f7ff fdb5 	bl	8c368 <__lo0bits>
   8c7fe:	2201      	movs	r2, #1
   8c800:	9b01      	ldr	r3, [sp, #4]
   8c802:	4611      	mov	r1, r2
   8c804:	3020      	adds	r0, #32
   8c806:	613a      	str	r2, [r7, #16]
   8c808:	617b      	str	r3, [r7, #20]
   8c80a:	2d00      	cmp	r5, #0
   8c80c:	d0e4      	beq.n	8c7d8 <__d2b+0x44>
   8c80e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8c812:	9a08      	ldr	r2, [sp, #32]
   8c814:	4403      	add	r3, r0
   8c816:	6013      	str	r3, [r2, #0]
   8c818:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8c81a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8c81e:	6018      	str	r0, [r3, #0]
   8c820:	4638      	mov	r0, r7
   8c822:	b003      	add	sp, #12
   8c824:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c826:	9b01      	ldr	r3, [sp, #4]
   8c828:	f1c0 0220 	rsb	r2, r0, #32
   8c82c:	9900      	ldr	r1, [sp, #0]
   8c82e:	fa03 f202 	lsl.w	r2, r3, r2
   8c832:	430a      	orrs	r2, r1
   8c834:	40c3      	lsrs	r3, r0
   8c836:	9301      	str	r3, [sp, #4]
   8c838:	617a      	str	r2, [r7, #20]
   8c83a:	e7c6      	b.n	8c7ca <__d2b+0x36>

0008c83c <_realloc_r>:
   8c83c:	2900      	cmp	r1, #0
   8c83e:	f000 8094 	beq.w	8c96a <_realloc_r+0x12e>
   8c842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c846:	460c      	mov	r4, r1
   8c848:	4615      	mov	r5, r2
   8c84a:	b083      	sub	sp, #12
   8c84c:	4680      	mov	r8, r0
   8c84e:	f105 060b 	add.w	r6, r5, #11
   8c852:	f7ff fceb 	bl	8c22c <__malloc_lock>
   8c856:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8c85a:	2e16      	cmp	r6, #22
   8c85c:	f02e 0703 	bic.w	r7, lr, #3
   8c860:	f1a4 0908 	sub.w	r9, r4, #8
   8c864:	d83c      	bhi.n	8c8e0 <_realloc_r+0xa4>
   8c866:	2210      	movs	r2, #16
   8c868:	4616      	mov	r6, r2
   8c86a:	42b5      	cmp	r5, r6
   8c86c:	d83d      	bhi.n	8c8ea <_realloc_r+0xae>
   8c86e:	4297      	cmp	r7, r2
   8c870:	da43      	bge.n	8c8fa <_realloc_r+0xbe>
   8c872:	4bc6      	ldr	r3, [pc, #792]	; (8cb8c <_realloc_r+0x350>)
   8c874:	eb09 0007 	add.w	r0, r9, r7
   8c878:	6899      	ldr	r1, [r3, #8]
   8c87a:	4288      	cmp	r0, r1
   8c87c:	f000 80c3 	beq.w	8ca06 <_realloc_r+0x1ca>
   8c880:	6843      	ldr	r3, [r0, #4]
   8c882:	f023 0101 	bic.w	r1, r3, #1
   8c886:	4401      	add	r1, r0
   8c888:	6849      	ldr	r1, [r1, #4]
   8c88a:	07c9      	lsls	r1, r1, #31
   8c88c:	d54d      	bpl.n	8c92a <_realloc_r+0xee>
   8c88e:	f01e 0f01 	tst.w	lr, #1
   8c892:	f000 809b 	beq.w	8c9cc <_realloc_r+0x190>
   8c896:	4629      	mov	r1, r5
   8c898:	4640      	mov	r0, r8
   8c89a:	f7ff f965 	bl	8bb68 <_malloc_r>
   8c89e:	4605      	mov	r5, r0
   8c8a0:	2800      	cmp	r0, #0
   8c8a2:	d03b      	beq.n	8c91c <_realloc_r+0xe0>
   8c8a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c8a8:	f1a0 0208 	sub.w	r2, r0, #8
   8c8ac:	f023 0301 	bic.w	r3, r3, #1
   8c8b0:	444b      	add	r3, r9
   8c8b2:	429a      	cmp	r2, r3
   8c8b4:	f000 812b 	beq.w	8cb0e <_realloc_r+0x2d2>
   8c8b8:	1f3a      	subs	r2, r7, #4
   8c8ba:	2a24      	cmp	r2, #36	; 0x24
   8c8bc:	f200 8118 	bhi.w	8caf0 <_realloc_r+0x2b4>
   8c8c0:	2a13      	cmp	r2, #19
   8c8c2:	f200 80eb 	bhi.w	8ca9c <_realloc_r+0x260>
   8c8c6:	4603      	mov	r3, r0
   8c8c8:	4622      	mov	r2, r4
   8c8ca:	6811      	ldr	r1, [r2, #0]
   8c8cc:	6019      	str	r1, [r3, #0]
   8c8ce:	6851      	ldr	r1, [r2, #4]
   8c8d0:	6059      	str	r1, [r3, #4]
   8c8d2:	6892      	ldr	r2, [r2, #8]
   8c8d4:	609a      	str	r2, [r3, #8]
   8c8d6:	4621      	mov	r1, r4
   8c8d8:	4640      	mov	r0, r8
   8c8da:	f7fe fe19 	bl	8b510 <_free_r>
   8c8de:	e01d      	b.n	8c91c <_realloc_r+0xe0>
   8c8e0:	f026 0607 	bic.w	r6, r6, #7
   8c8e4:	2e00      	cmp	r6, #0
   8c8e6:	4632      	mov	r2, r6
   8c8e8:	dabf      	bge.n	8c86a <_realloc_r+0x2e>
   8c8ea:	2500      	movs	r5, #0
   8c8ec:	230c      	movs	r3, #12
   8c8ee:	4628      	mov	r0, r5
   8c8f0:	f8c8 3000 	str.w	r3, [r8]
   8c8f4:	b003      	add	sp, #12
   8c8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c8fa:	4625      	mov	r5, r4
   8c8fc:	1bbb      	subs	r3, r7, r6
   8c8fe:	2b0f      	cmp	r3, #15
   8c900:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8c904:	d81d      	bhi.n	8c942 <_realloc_r+0x106>
   8c906:	f002 0201 	and.w	r2, r2, #1
   8c90a:	433a      	orrs	r2, r7
   8c90c:	eb09 0107 	add.w	r1, r9, r7
   8c910:	f8c9 2004 	str.w	r2, [r9, #4]
   8c914:	684b      	ldr	r3, [r1, #4]
   8c916:	f043 0301 	orr.w	r3, r3, #1
   8c91a:	604b      	str	r3, [r1, #4]
   8c91c:	4640      	mov	r0, r8
   8c91e:	f7ff fc8b 	bl	8c238 <__malloc_unlock>
   8c922:	4628      	mov	r0, r5
   8c924:	b003      	add	sp, #12
   8c926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c92a:	f023 0303 	bic.w	r3, r3, #3
   8c92e:	18f9      	adds	r1, r7, r3
   8c930:	4291      	cmp	r1, r2
   8c932:	db1d      	blt.n	8c970 <_realloc_r+0x134>
   8c934:	68c3      	ldr	r3, [r0, #12]
   8c936:	6882      	ldr	r2, [r0, #8]
   8c938:	4625      	mov	r5, r4
   8c93a:	60d3      	str	r3, [r2, #12]
   8c93c:	460f      	mov	r7, r1
   8c93e:	609a      	str	r2, [r3, #8]
   8c940:	e7dc      	b.n	8c8fc <_realloc_r+0xc0>
   8c942:	f002 0201 	and.w	r2, r2, #1
   8c946:	eb09 0106 	add.w	r1, r9, r6
   8c94a:	f043 0301 	orr.w	r3, r3, #1
   8c94e:	4332      	orrs	r2, r6
   8c950:	f8c9 2004 	str.w	r2, [r9, #4]
   8c954:	444f      	add	r7, r9
   8c956:	604b      	str	r3, [r1, #4]
   8c958:	687b      	ldr	r3, [r7, #4]
   8c95a:	3108      	adds	r1, #8
   8c95c:	f043 0301 	orr.w	r3, r3, #1
   8c960:	607b      	str	r3, [r7, #4]
   8c962:	4640      	mov	r0, r8
   8c964:	f7fe fdd4 	bl	8b510 <_free_r>
   8c968:	e7d8      	b.n	8c91c <_realloc_r+0xe0>
   8c96a:	4611      	mov	r1, r2
   8c96c:	f7ff b8fc 	b.w	8bb68 <_malloc_r>
   8c970:	f01e 0f01 	tst.w	lr, #1
   8c974:	d18f      	bne.n	8c896 <_realloc_r+0x5a>
   8c976:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c97a:	eba9 0a01 	sub.w	sl, r9, r1
   8c97e:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c982:	f021 0103 	bic.w	r1, r1, #3
   8c986:	440b      	add	r3, r1
   8c988:	443b      	add	r3, r7
   8c98a:	4293      	cmp	r3, r2
   8c98c:	db26      	blt.n	8c9dc <_realloc_r+0x1a0>
   8c98e:	4655      	mov	r5, sl
   8c990:	68c1      	ldr	r1, [r0, #12]
   8c992:	6880      	ldr	r0, [r0, #8]
   8c994:	1f3a      	subs	r2, r7, #4
   8c996:	60c1      	str	r1, [r0, #12]
   8c998:	6088      	str	r0, [r1, #8]
   8c99a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8c99e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c9a2:	2a24      	cmp	r2, #36	; 0x24
   8c9a4:	60c1      	str	r1, [r0, #12]
   8c9a6:	6088      	str	r0, [r1, #8]
   8c9a8:	d826      	bhi.n	8c9f8 <_realloc_r+0x1bc>
   8c9aa:	2a13      	cmp	r2, #19
   8c9ac:	f240 8081 	bls.w	8cab2 <_realloc_r+0x276>
   8c9b0:	6821      	ldr	r1, [r4, #0]
   8c9b2:	2a1b      	cmp	r2, #27
   8c9b4:	f8ca 1008 	str.w	r1, [sl, #8]
   8c9b8:	6861      	ldr	r1, [r4, #4]
   8c9ba:	f8ca 100c 	str.w	r1, [sl, #12]
   8c9be:	f200 80ad 	bhi.w	8cb1c <_realloc_r+0x2e0>
   8c9c2:	f104 0008 	add.w	r0, r4, #8
   8c9c6:	f10a 0210 	add.w	r2, sl, #16
   8c9ca:	e074      	b.n	8cab6 <_realloc_r+0x27a>
   8c9cc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c9d0:	eba9 0a03 	sub.w	sl, r9, r3
   8c9d4:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c9d8:	f021 0103 	bic.w	r1, r1, #3
   8c9dc:	187b      	adds	r3, r7, r1
   8c9de:	4293      	cmp	r3, r2
   8c9e0:	f6ff af59 	blt.w	8c896 <_realloc_r+0x5a>
   8c9e4:	4655      	mov	r5, sl
   8c9e6:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c9ea:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8c9ee:	1f3a      	subs	r2, r7, #4
   8c9f0:	2a24      	cmp	r2, #36	; 0x24
   8c9f2:	60c1      	str	r1, [r0, #12]
   8c9f4:	6088      	str	r0, [r1, #8]
   8c9f6:	d9d8      	bls.n	8c9aa <_realloc_r+0x16e>
   8c9f8:	4621      	mov	r1, r4
   8c9fa:	4628      	mov	r0, r5
   8c9fc:	461f      	mov	r7, r3
   8c9fe:	46d1      	mov	r9, sl
   8ca00:	f7ff fbb0 	bl	8c164 <memmove>
   8ca04:	e77a      	b.n	8c8fc <_realloc_r+0xc0>
   8ca06:	6841      	ldr	r1, [r0, #4]
   8ca08:	f106 0010 	add.w	r0, r6, #16
   8ca0c:	f021 0b03 	bic.w	fp, r1, #3
   8ca10:	44bb      	add	fp, r7
   8ca12:	4583      	cmp	fp, r0
   8ca14:	da58      	bge.n	8cac8 <_realloc_r+0x28c>
   8ca16:	f01e 0f01 	tst.w	lr, #1
   8ca1a:	f47f af3c 	bne.w	8c896 <_realloc_r+0x5a>
   8ca1e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8ca22:	eba9 0a01 	sub.w	sl, r9, r1
   8ca26:	f8da 1004 	ldr.w	r1, [sl, #4]
   8ca2a:	f021 0103 	bic.w	r1, r1, #3
   8ca2e:	448b      	add	fp, r1
   8ca30:	4558      	cmp	r0, fp
   8ca32:	dcd3      	bgt.n	8c9dc <_realloc_r+0x1a0>
   8ca34:	4655      	mov	r5, sl
   8ca36:	f8da 100c 	ldr.w	r1, [sl, #12]
   8ca3a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8ca3e:	1f3a      	subs	r2, r7, #4
   8ca40:	2a24      	cmp	r2, #36	; 0x24
   8ca42:	60c1      	str	r1, [r0, #12]
   8ca44:	6088      	str	r0, [r1, #8]
   8ca46:	f200 808d 	bhi.w	8cb64 <_realloc_r+0x328>
   8ca4a:	2a13      	cmp	r2, #19
   8ca4c:	f240 8087 	bls.w	8cb5e <_realloc_r+0x322>
   8ca50:	6821      	ldr	r1, [r4, #0]
   8ca52:	2a1b      	cmp	r2, #27
   8ca54:	f8ca 1008 	str.w	r1, [sl, #8]
   8ca58:	6861      	ldr	r1, [r4, #4]
   8ca5a:	f8ca 100c 	str.w	r1, [sl, #12]
   8ca5e:	f200 8088 	bhi.w	8cb72 <_realloc_r+0x336>
   8ca62:	f104 0108 	add.w	r1, r4, #8
   8ca66:	f10a 0210 	add.w	r2, sl, #16
   8ca6a:	6808      	ldr	r0, [r1, #0]
   8ca6c:	6010      	str	r0, [r2, #0]
   8ca6e:	6848      	ldr	r0, [r1, #4]
   8ca70:	6050      	str	r0, [r2, #4]
   8ca72:	6889      	ldr	r1, [r1, #8]
   8ca74:	6091      	str	r1, [r2, #8]
   8ca76:	ebab 0206 	sub.w	r2, fp, r6
   8ca7a:	eb0a 0106 	add.w	r1, sl, r6
   8ca7e:	f042 0201 	orr.w	r2, r2, #1
   8ca82:	6099      	str	r1, [r3, #8]
   8ca84:	604a      	str	r2, [r1, #4]
   8ca86:	f8da 3004 	ldr.w	r3, [sl, #4]
   8ca8a:	4640      	mov	r0, r8
   8ca8c:	f003 0301 	and.w	r3, r3, #1
   8ca90:	431e      	orrs	r6, r3
   8ca92:	f8ca 6004 	str.w	r6, [sl, #4]
   8ca96:	f7ff fbcf 	bl	8c238 <__malloc_unlock>
   8ca9a:	e742      	b.n	8c922 <_realloc_r+0xe6>
   8ca9c:	6823      	ldr	r3, [r4, #0]
   8ca9e:	2a1b      	cmp	r2, #27
   8caa0:	6003      	str	r3, [r0, #0]
   8caa2:	6863      	ldr	r3, [r4, #4]
   8caa4:	6043      	str	r3, [r0, #4]
   8caa6:	d827      	bhi.n	8caf8 <_realloc_r+0x2bc>
   8caa8:	f100 0308 	add.w	r3, r0, #8
   8caac:	f104 0208 	add.w	r2, r4, #8
   8cab0:	e70b      	b.n	8c8ca <_realloc_r+0x8e>
   8cab2:	4620      	mov	r0, r4
   8cab4:	462a      	mov	r2, r5
   8cab6:	6801      	ldr	r1, [r0, #0]
   8cab8:	461f      	mov	r7, r3
   8caba:	6011      	str	r1, [r2, #0]
   8cabc:	6841      	ldr	r1, [r0, #4]
   8cabe:	46d1      	mov	r9, sl
   8cac0:	6051      	str	r1, [r2, #4]
   8cac2:	6883      	ldr	r3, [r0, #8]
   8cac4:	6093      	str	r3, [r2, #8]
   8cac6:	e719      	b.n	8c8fc <_realloc_r+0xc0>
   8cac8:	ebab 0b06 	sub.w	fp, fp, r6
   8cacc:	eb09 0106 	add.w	r1, r9, r6
   8cad0:	f04b 0201 	orr.w	r2, fp, #1
   8cad4:	6099      	str	r1, [r3, #8]
   8cad6:	604a      	str	r2, [r1, #4]
   8cad8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8cadc:	4640      	mov	r0, r8
   8cade:	f003 0301 	and.w	r3, r3, #1
   8cae2:	431e      	orrs	r6, r3
   8cae4:	f844 6c04 	str.w	r6, [r4, #-4]
   8cae8:	f7ff fba6 	bl	8c238 <__malloc_unlock>
   8caec:	4625      	mov	r5, r4
   8caee:	e718      	b.n	8c922 <_realloc_r+0xe6>
   8caf0:	4621      	mov	r1, r4
   8caf2:	f7ff fb37 	bl	8c164 <memmove>
   8caf6:	e6ee      	b.n	8c8d6 <_realloc_r+0x9a>
   8caf8:	68a3      	ldr	r3, [r4, #8]
   8cafa:	2a24      	cmp	r2, #36	; 0x24
   8cafc:	6083      	str	r3, [r0, #8]
   8cafe:	68e3      	ldr	r3, [r4, #12]
   8cb00:	60c3      	str	r3, [r0, #12]
   8cb02:	d018      	beq.n	8cb36 <_realloc_r+0x2fa>
   8cb04:	f100 0310 	add.w	r3, r0, #16
   8cb08:	f104 0210 	add.w	r2, r4, #16
   8cb0c:	e6dd      	b.n	8c8ca <_realloc_r+0x8e>
   8cb0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8cb12:	4625      	mov	r5, r4
   8cb14:	f023 0303 	bic.w	r3, r3, #3
   8cb18:	441f      	add	r7, r3
   8cb1a:	e6ef      	b.n	8c8fc <_realloc_r+0xc0>
   8cb1c:	68a1      	ldr	r1, [r4, #8]
   8cb1e:	2a24      	cmp	r2, #36	; 0x24
   8cb20:	f8ca 1010 	str.w	r1, [sl, #16]
   8cb24:	68e1      	ldr	r1, [r4, #12]
   8cb26:	f8ca 1014 	str.w	r1, [sl, #20]
   8cb2a:	d00d      	beq.n	8cb48 <_realloc_r+0x30c>
   8cb2c:	f104 0010 	add.w	r0, r4, #16
   8cb30:	f10a 0218 	add.w	r2, sl, #24
   8cb34:	e7bf      	b.n	8cab6 <_realloc_r+0x27a>
   8cb36:	6922      	ldr	r2, [r4, #16]
   8cb38:	f100 0318 	add.w	r3, r0, #24
   8cb3c:	6102      	str	r2, [r0, #16]
   8cb3e:	6961      	ldr	r1, [r4, #20]
   8cb40:	f104 0218 	add.w	r2, r4, #24
   8cb44:	6141      	str	r1, [r0, #20]
   8cb46:	e6c0      	b.n	8c8ca <_realloc_r+0x8e>
   8cb48:	6922      	ldr	r2, [r4, #16]
   8cb4a:	f104 0018 	add.w	r0, r4, #24
   8cb4e:	f8ca 2018 	str.w	r2, [sl, #24]
   8cb52:	6961      	ldr	r1, [r4, #20]
   8cb54:	f10a 0220 	add.w	r2, sl, #32
   8cb58:	f8ca 101c 	str.w	r1, [sl, #28]
   8cb5c:	e7ab      	b.n	8cab6 <_realloc_r+0x27a>
   8cb5e:	4621      	mov	r1, r4
   8cb60:	462a      	mov	r2, r5
   8cb62:	e782      	b.n	8ca6a <_realloc_r+0x22e>
   8cb64:	4621      	mov	r1, r4
   8cb66:	4628      	mov	r0, r5
   8cb68:	9301      	str	r3, [sp, #4]
   8cb6a:	f7ff fafb 	bl	8c164 <memmove>
   8cb6e:	9b01      	ldr	r3, [sp, #4]
   8cb70:	e781      	b.n	8ca76 <_realloc_r+0x23a>
   8cb72:	68a1      	ldr	r1, [r4, #8]
   8cb74:	2a24      	cmp	r2, #36	; 0x24
   8cb76:	f8ca 1010 	str.w	r1, [sl, #16]
   8cb7a:	68e1      	ldr	r1, [r4, #12]
   8cb7c:	f8ca 1014 	str.w	r1, [sl, #20]
   8cb80:	d006      	beq.n	8cb90 <_realloc_r+0x354>
   8cb82:	f104 0110 	add.w	r1, r4, #16
   8cb86:	f10a 0218 	add.w	r2, sl, #24
   8cb8a:	e76e      	b.n	8ca6a <_realloc_r+0x22e>
   8cb8c:	20000cb0 	.word	0x20000cb0
   8cb90:	6922      	ldr	r2, [r4, #16]
   8cb92:	f104 0118 	add.w	r1, r4, #24
   8cb96:	f8ca 2018 	str.w	r2, [sl, #24]
   8cb9a:	6960      	ldr	r0, [r4, #20]
   8cb9c:	f10a 0220 	add.w	r2, sl, #32
   8cba0:	f8ca 001c 	str.w	r0, [sl, #28]
   8cba4:	e761      	b.n	8ca6a <_realloc_r+0x22e>
   8cba6:	bf00      	nop

0008cba8 <_sbrk_r>:
   8cba8:	b538      	push	{r3, r4, r5, lr}
   8cbaa:	2300      	movs	r3, #0
   8cbac:	4c06      	ldr	r4, [pc, #24]	; (8cbc8 <_sbrk_r+0x20>)
   8cbae:	4605      	mov	r5, r0
   8cbb0:	4608      	mov	r0, r1
   8cbb2:	6023      	str	r3, [r4, #0]
   8cbb4:	f7fa fb46 	bl	87244 <_sbrk>
   8cbb8:	1c43      	adds	r3, r0, #1
   8cbba:	d000      	beq.n	8cbbe <_sbrk_r+0x16>
   8cbbc:	bd38      	pop	{r3, r4, r5, pc}
   8cbbe:	6823      	ldr	r3, [r4, #0]
   8cbc0:	2b00      	cmp	r3, #0
   8cbc2:	d0fb      	beq.n	8cbbc <_sbrk_r+0x14>
   8cbc4:	602b      	str	r3, [r5, #0]
   8cbc6:	bd38      	pop	{r3, r4, r5, pc}
   8cbc8:	20002e28 	.word	0x20002e28

0008cbcc <__sread>:
   8cbcc:	b510      	push	{r4, lr}
   8cbce:	460c      	mov	r4, r1
   8cbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8cbd4:	f000 fad0 	bl	8d178 <_read_r>
   8cbd8:	2800      	cmp	r0, #0
   8cbda:	db03      	blt.n	8cbe4 <__sread+0x18>
   8cbdc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8cbde:	4403      	add	r3, r0
   8cbe0:	6523      	str	r3, [r4, #80]	; 0x50
   8cbe2:	bd10      	pop	{r4, pc}
   8cbe4:	89a3      	ldrh	r3, [r4, #12]
   8cbe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8cbea:	81a3      	strh	r3, [r4, #12]
   8cbec:	bd10      	pop	{r4, pc}
   8cbee:	bf00      	nop

0008cbf0 <__swrite>:
   8cbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cbf4:	460c      	mov	r4, r1
   8cbf6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8cbfa:	461f      	mov	r7, r3
   8cbfc:	05cb      	lsls	r3, r1, #23
   8cbfe:	4616      	mov	r6, r2
   8cc00:	4605      	mov	r5, r0
   8cc02:	d507      	bpl.n	8cc14 <__swrite+0x24>
   8cc04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8cc08:	2302      	movs	r3, #2
   8cc0a:	2200      	movs	r2, #0
   8cc0c:	f000 fa9e 	bl	8d14c <_lseek_r>
   8cc10:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8cc14:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8cc18:	81a1      	strh	r1, [r4, #12]
   8cc1a:	463b      	mov	r3, r7
   8cc1c:	4632      	mov	r2, r6
   8cc1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8cc22:	4628      	mov	r0, r5
   8cc24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8cc28:	f000 b94e 	b.w	8cec8 <_write_r>

0008cc2c <__sseek>:
   8cc2c:	b510      	push	{r4, lr}
   8cc2e:	460c      	mov	r4, r1
   8cc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8cc34:	f000 fa8a 	bl	8d14c <_lseek_r>
   8cc38:	89a3      	ldrh	r3, [r4, #12]
   8cc3a:	1c42      	adds	r2, r0, #1
   8cc3c:	bf0e      	itee	eq
   8cc3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8cc42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8cc46:	6520      	strne	r0, [r4, #80]	; 0x50
   8cc48:	81a3      	strh	r3, [r4, #12]
   8cc4a:	bd10      	pop	{r4, pc}

0008cc4c <__sclose>:
   8cc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8cc50:	f000 b9e2 	b.w	8d018 <_close_r>

0008cc54 <strlen>:
   8cc54:	f020 0103 	bic.w	r1, r0, #3
   8cc58:	f010 0003 	ands.w	r0, r0, #3
   8cc5c:	f1c0 0000 	rsb	r0, r0, #0
   8cc60:	f851 3b04 	ldr.w	r3, [r1], #4
   8cc64:	f100 0c04 	add.w	ip, r0, #4
   8cc68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8cc6c:	f06f 0200 	mvn.w	r2, #0
   8cc70:	bf1c      	itt	ne
   8cc72:	fa22 f20c 	lsrne.w	r2, r2, ip
   8cc76:	4313      	orrne	r3, r2
   8cc78:	f04f 0c01 	mov.w	ip, #1
   8cc7c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8cc80:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8cc84:	eba3 020c 	sub.w	r2, r3, ip
   8cc88:	ea22 0203 	bic.w	r2, r2, r3
   8cc8c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8cc90:	bf04      	itt	eq
   8cc92:	f851 3b04 	ldreq.w	r3, [r1], #4
   8cc96:	3004      	addeq	r0, #4
   8cc98:	d0f4      	beq.n	8cc84 <strlen+0x30>
   8cc9a:	f1c2 0100 	rsb	r1, r2, #0
   8cc9e:	ea02 0201 	and.w	r2, r2, r1
   8cca2:	fab2 f282 	clz	r2, r2
   8cca6:	f1c2 021f 	rsb	r2, r2, #31
   8ccaa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8ccae:	4770      	bx	lr

0008ccb0 <__ssprint_r>:
   8ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ccb4:	6893      	ldr	r3, [r2, #8]
   8ccb6:	b083      	sub	sp, #12
   8ccb8:	4690      	mov	r8, r2
   8ccba:	2b00      	cmp	r3, #0
   8ccbc:	d070      	beq.n	8cda0 <__ssprint_r+0xf0>
   8ccbe:	4682      	mov	sl, r0
   8ccc0:	460c      	mov	r4, r1
   8ccc2:	6817      	ldr	r7, [r2, #0]
   8ccc4:	688d      	ldr	r5, [r1, #8]
   8ccc6:	6808      	ldr	r0, [r1, #0]
   8ccc8:	e042      	b.n	8cd50 <__ssprint_r+0xa0>
   8ccca:	89a3      	ldrh	r3, [r4, #12]
   8cccc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8ccd0:	d02e      	beq.n	8cd30 <__ssprint_r+0x80>
   8ccd2:	6965      	ldr	r5, [r4, #20]
   8ccd4:	6921      	ldr	r1, [r4, #16]
   8ccd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8ccda:	eba0 0b01 	sub.w	fp, r0, r1
   8ccde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8cce2:	f10b 0001 	add.w	r0, fp, #1
   8cce6:	106d      	asrs	r5, r5, #1
   8cce8:	4430      	add	r0, r6
   8ccea:	42a8      	cmp	r0, r5
   8ccec:	462a      	mov	r2, r5
   8ccee:	bf84      	itt	hi
   8ccf0:	4605      	movhi	r5, r0
   8ccf2:	462a      	movhi	r2, r5
   8ccf4:	055b      	lsls	r3, r3, #21
   8ccf6:	d538      	bpl.n	8cd6a <__ssprint_r+0xba>
   8ccf8:	4611      	mov	r1, r2
   8ccfa:	4650      	mov	r0, sl
   8ccfc:	f7fe ff34 	bl	8bb68 <_malloc_r>
   8cd00:	2800      	cmp	r0, #0
   8cd02:	d03c      	beq.n	8cd7e <__ssprint_r+0xce>
   8cd04:	465a      	mov	r2, fp
   8cd06:	6921      	ldr	r1, [r4, #16]
   8cd08:	9001      	str	r0, [sp, #4]
   8cd0a:	f7fa febb 	bl	87a84 <memcpy>
   8cd0e:	89a2      	ldrh	r2, [r4, #12]
   8cd10:	9b01      	ldr	r3, [sp, #4]
   8cd12:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8cd16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8cd1a:	81a2      	strh	r2, [r4, #12]
   8cd1c:	eba5 020b 	sub.w	r2, r5, fp
   8cd20:	eb03 000b 	add.w	r0, r3, fp
   8cd24:	6165      	str	r5, [r4, #20]
   8cd26:	46b3      	mov	fp, r6
   8cd28:	4635      	mov	r5, r6
   8cd2a:	6123      	str	r3, [r4, #16]
   8cd2c:	6020      	str	r0, [r4, #0]
   8cd2e:	60a2      	str	r2, [r4, #8]
   8cd30:	465a      	mov	r2, fp
   8cd32:	4649      	mov	r1, r9
   8cd34:	f7ff fa16 	bl	8c164 <memmove>
   8cd38:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8cd3c:	68a2      	ldr	r2, [r4, #8]
   8cd3e:	6820      	ldr	r0, [r4, #0]
   8cd40:	1b55      	subs	r5, r2, r5
   8cd42:	4458      	add	r0, fp
   8cd44:	1b9e      	subs	r6, r3, r6
   8cd46:	60a5      	str	r5, [r4, #8]
   8cd48:	6020      	str	r0, [r4, #0]
   8cd4a:	f8c8 6008 	str.w	r6, [r8, #8]
   8cd4e:	b33e      	cbz	r6, 8cda0 <__ssprint_r+0xf0>
   8cd50:	687e      	ldr	r6, [r7, #4]
   8cd52:	463b      	mov	r3, r7
   8cd54:	3708      	adds	r7, #8
   8cd56:	2e00      	cmp	r6, #0
   8cd58:	d0fa      	beq.n	8cd50 <__ssprint_r+0xa0>
   8cd5a:	42ae      	cmp	r6, r5
   8cd5c:	f8d3 9000 	ldr.w	r9, [r3]
   8cd60:	46ab      	mov	fp, r5
   8cd62:	d2b2      	bcs.n	8ccca <__ssprint_r+0x1a>
   8cd64:	4635      	mov	r5, r6
   8cd66:	46b3      	mov	fp, r6
   8cd68:	e7e2      	b.n	8cd30 <__ssprint_r+0x80>
   8cd6a:	4650      	mov	r0, sl
   8cd6c:	f7ff fd66 	bl	8c83c <_realloc_r>
   8cd70:	4603      	mov	r3, r0
   8cd72:	2800      	cmp	r0, #0
   8cd74:	d1d2      	bne.n	8cd1c <__ssprint_r+0x6c>
   8cd76:	6921      	ldr	r1, [r4, #16]
   8cd78:	4650      	mov	r0, sl
   8cd7a:	f7fe fbc9 	bl	8b510 <_free_r>
   8cd7e:	230c      	movs	r3, #12
   8cd80:	2200      	movs	r2, #0
   8cd82:	f04f 30ff 	mov.w	r0, #4294967295
   8cd86:	f8ca 3000 	str.w	r3, [sl]
   8cd8a:	89a3      	ldrh	r3, [r4, #12]
   8cd8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8cd90:	81a3      	strh	r3, [r4, #12]
   8cd92:	f8c8 2008 	str.w	r2, [r8, #8]
   8cd96:	f8c8 2004 	str.w	r2, [r8, #4]
   8cd9a:	b003      	add	sp, #12
   8cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cda0:	2000      	movs	r0, #0
   8cda2:	f8c8 0004 	str.w	r0, [r8, #4]
   8cda6:	b003      	add	sp, #12
   8cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008cdac <__swbuf_r>:
   8cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cdae:	460d      	mov	r5, r1
   8cdb0:	4614      	mov	r4, r2
   8cdb2:	4606      	mov	r6, r0
   8cdb4:	b110      	cbz	r0, 8cdbc <__swbuf_r+0x10>
   8cdb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cdb8:	2b00      	cmp	r3, #0
   8cdba:	d04b      	beq.n	8ce54 <__swbuf_r+0xa8>
   8cdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cdc0:	69a3      	ldr	r3, [r4, #24]
   8cdc2:	b291      	uxth	r1, r2
   8cdc4:	0708      	lsls	r0, r1, #28
   8cdc6:	60a3      	str	r3, [r4, #8]
   8cdc8:	d539      	bpl.n	8ce3e <__swbuf_r+0x92>
   8cdca:	6923      	ldr	r3, [r4, #16]
   8cdcc:	2b00      	cmp	r3, #0
   8cdce:	d036      	beq.n	8ce3e <__swbuf_r+0x92>
   8cdd0:	b2ed      	uxtb	r5, r5
   8cdd2:	0489      	lsls	r1, r1, #18
   8cdd4:	462f      	mov	r7, r5
   8cdd6:	d515      	bpl.n	8ce04 <__swbuf_r+0x58>
   8cdd8:	6822      	ldr	r2, [r4, #0]
   8cdda:	6961      	ldr	r1, [r4, #20]
   8cddc:	1ad3      	subs	r3, r2, r3
   8cdde:	428b      	cmp	r3, r1
   8cde0:	da1c      	bge.n	8ce1c <__swbuf_r+0x70>
   8cde2:	3301      	adds	r3, #1
   8cde4:	68a1      	ldr	r1, [r4, #8]
   8cde6:	1c50      	adds	r0, r2, #1
   8cde8:	3901      	subs	r1, #1
   8cdea:	60a1      	str	r1, [r4, #8]
   8cdec:	6020      	str	r0, [r4, #0]
   8cdee:	7015      	strb	r5, [r2, #0]
   8cdf0:	6962      	ldr	r2, [r4, #20]
   8cdf2:	429a      	cmp	r2, r3
   8cdf4:	d01a      	beq.n	8ce2c <__swbuf_r+0x80>
   8cdf6:	89a3      	ldrh	r3, [r4, #12]
   8cdf8:	07db      	lsls	r3, r3, #31
   8cdfa:	d501      	bpl.n	8ce00 <__swbuf_r+0x54>
   8cdfc:	2d0a      	cmp	r5, #10
   8cdfe:	d015      	beq.n	8ce2c <__swbuf_r+0x80>
   8ce00:	4638      	mov	r0, r7
   8ce02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ce04:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8ce06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8ce0a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8ce0e:	81a2      	strh	r2, [r4, #12]
   8ce10:	6822      	ldr	r2, [r4, #0]
   8ce12:	6661      	str	r1, [r4, #100]	; 0x64
   8ce14:	6961      	ldr	r1, [r4, #20]
   8ce16:	1ad3      	subs	r3, r2, r3
   8ce18:	428b      	cmp	r3, r1
   8ce1a:	dbe2      	blt.n	8cde2 <__swbuf_r+0x36>
   8ce1c:	4621      	mov	r1, r4
   8ce1e:	4630      	mov	r0, r6
   8ce20:	f7fe f9f8 	bl	8b214 <_fflush_r>
   8ce24:	b940      	cbnz	r0, 8ce38 <__swbuf_r+0x8c>
   8ce26:	2301      	movs	r3, #1
   8ce28:	6822      	ldr	r2, [r4, #0]
   8ce2a:	e7db      	b.n	8cde4 <__swbuf_r+0x38>
   8ce2c:	4621      	mov	r1, r4
   8ce2e:	4630      	mov	r0, r6
   8ce30:	f7fe f9f0 	bl	8b214 <_fflush_r>
   8ce34:	2800      	cmp	r0, #0
   8ce36:	d0e3      	beq.n	8ce00 <__swbuf_r+0x54>
   8ce38:	f04f 37ff 	mov.w	r7, #4294967295
   8ce3c:	e7e0      	b.n	8ce00 <__swbuf_r+0x54>
   8ce3e:	4621      	mov	r1, r4
   8ce40:	4630      	mov	r0, r6
   8ce42:	f7fd f921 	bl	8a088 <__swsetup_r>
   8ce46:	2800      	cmp	r0, #0
   8ce48:	d1f6      	bne.n	8ce38 <__swbuf_r+0x8c>
   8ce4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8ce4e:	6923      	ldr	r3, [r4, #16]
   8ce50:	b291      	uxth	r1, r2
   8ce52:	e7bd      	b.n	8cdd0 <__swbuf_r+0x24>
   8ce54:	f7fe fa36 	bl	8b2c4 <__sinit>
   8ce58:	e7b0      	b.n	8cdbc <__swbuf_r+0x10>
   8ce5a:	bf00      	nop

0008ce5c <_wcrtomb_r>:
   8ce5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8ce5e:	4606      	mov	r6, r0
   8ce60:	b085      	sub	sp, #20
   8ce62:	461f      	mov	r7, r3
   8ce64:	b189      	cbz	r1, 8ce8a <_wcrtomb_r+0x2e>
   8ce66:	4c10      	ldr	r4, [pc, #64]	; (8cea8 <_wcrtomb_r+0x4c>)
   8ce68:	4d10      	ldr	r5, [pc, #64]	; (8ceac <_wcrtomb_r+0x50>)
   8ce6a:	6824      	ldr	r4, [r4, #0]
   8ce6c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8ce6e:	2c00      	cmp	r4, #0
   8ce70:	bf08      	it	eq
   8ce72:	462c      	moveq	r4, r5
   8ce74:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8ce78:	47a0      	blx	r4
   8ce7a:	1c43      	adds	r3, r0, #1
   8ce7c:	d103      	bne.n	8ce86 <_wcrtomb_r+0x2a>
   8ce7e:	2200      	movs	r2, #0
   8ce80:	238a      	movs	r3, #138	; 0x8a
   8ce82:	603a      	str	r2, [r7, #0]
   8ce84:	6033      	str	r3, [r6, #0]
   8ce86:	b005      	add	sp, #20
   8ce88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ce8a:	460c      	mov	r4, r1
   8ce8c:	4a06      	ldr	r2, [pc, #24]	; (8cea8 <_wcrtomb_r+0x4c>)
   8ce8e:	4d07      	ldr	r5, [pc, #28]	; (8ceac <_wcrtomb_r+0x50>)
   8ce90:	6811      	ldr	r1, [r2, #0]
   8ce92:	4622      	mov	r2, r4
   8ce94:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8ce96:	a901      	add	r1, sp, #4
   8ce98:	2c00      	cmp	r4, #0
   8ce9a:	bf08      	it	eq
   8ce9c:	462c      	moveq	r4, r5
   8ce9e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8cea2:	47a0      	blx	r4
   8cea4:	e7e9      	b.n	8ce7a <_wcrtomb_r+0x1e>
   8cea6:	bf00      	nop
   8cea8:	20000714 	.word	0x20000714
   8ceac:	20000b44 	.word	0x20000b44

0008ceb0 <__ascii_wctomb>:
   8ceb0:	b119      	cbz	r1, 8ceba <__ascii_wctomb+0xa>
   8ceb2:	2aff      	cmp	r2, #255	; 0xff
   8ceb4:	d803      	bhi.n	8cebe <__ascii_wctomb+0xe>
   8ceb6:	700a      	strb	r2, [r1, #0]
   8ceb8:	2101      	movs	r1, #1
   8ceba:	4608      	mov	r0, r1
   8cebc:	4770      	bx	lr
   8cebe:	238a      	movs	r3, #138	; 0x8a
   8cec0:	f04f 31ff 	mov.w	r1, #4294967295
   8cec4:	6003      	str	r3, [r0, #0]
   8cec6:	e7f8      	b.n	8ceba <__ascii_wctomb+0xa>

0008cec8 <_write_r>:
   8cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ceca:	460e      	mov	r6, r1
   8cecc:	2500      	movs	r5, #0
   8cece:	4c08      	ldr	r4, [pc, #32]	; (8cef0 <_write_r+0x28>)
   8ced0:	4611      	mov	r1, r2
   8ced2:	4607      	mov	r7, r0
   8ced4:	461a      	mov	r2, r3
   8ced6:	4630      	mov	r0, r6
   8ced8:	6025      	str	r5, [r4, #0]
   8ceda:	f7f7 ff99 	bl	84e10 <_write>
   8cede:	1c43      	adds	r3, r0, #1
   8cee0:	d000      	beq.n	8cee4 <_write_r+0x1c>
   8cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cee4:	6823      	ldr	r3, [r4, #0]
   8cee6:	2b00      	cmp	r3, #0
   8cee8:	d0fb      	beq.n	8cee2 <_write_r+0x1a>
   8ceea:	603b      	str	r3, [r7, #0]
   8ceec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ceee:	bf00      	nop
   8cef0:	20002e28 	.word	0x20002e28

0008cef4 <__register_exitproc>:
   8cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8cef8:	4d2c      	ldr	r5, [pc, #176]	; (8cfac <__register_exitproc+0xb8>)
   8cefa:	4606      	mov	r6, r0
   8cefc:	6828      	ldr	r0, [r5, #0]
   8cefe:	4698      	mov	r8, r3
   8cf00:	460f      	mov	r7, r1
   8cf02:	4691      	mov	r9, r2
   8cf04:	f7fe fdac 	bl	8ba60 <__retarget_lock_acquire_recursive>
   8cf08:	4b29      	ldr	r3, [pc, #164]	; (8cfb0 <__register_exitproc+0xbc>)
   8cf0a:	681c      	ldr	r4, [r3, #0]
   8cf0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8cf10:	2b00      	cmp	r3, #0
   8cf12:	d03e      	beq.n	8cf92 <__register_exitproc+0x9e>
   8cf14:	685a      	ldr	r2, [r3, #4]
   8cf16:	2a1f      	cmp	r2, #31
   8cf18:	dc1c      	bgt.n	8cf54 <__register_exitproc+0x60>
   8cf1a:	f102 0e01 	add.w	lr, r2, #1
   8cf1e:	b176      	cbz	r6, 8cf3e <__register_exitproc+0x4a>
   8cf20:	2101      	movs	r1, #1
   8cf22:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8cf26:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8cf2a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8cf2e:	4091      	lsls	r1, r2
   8cf30:	4308      	orrs	r0, r1
   8cf32:	2e02      	cmp	r6, #2
   8cf34:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8cf38:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8cf3c:	d023      	beq.n	8cf86 <__register_exitproc+0x92>
   8cf3e:	3202      	adds	r2, #2
   8cf40:	f8c3 e004 	str.w	lr, [r3, #4]
   8cf44:	6828      	ldr	r0, [r5, #0]
   8cf46:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8cf4a:	f7fe fd8b 	bl	8ba64 <__retarget_lock_release_recursive>
   8cf4e:	2000      	movs	r0, #0
   8cf50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8cf54:	4b17      	ldr	r3, [pc, #92]	; (8cfb4 <__register_exitproc+0xc0>)
   8cf56:	b30b      	cbz	r3, 8cf9c <__register_exitproc+0xa8>
   8cf58:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8cf5c:	f7fe fdfc 	bl	8bb58 <malloc>
   8cf60:	4603      	mov	r3, r0
   8cf62:	b1d8      	cbz	r0, 8cf9c <__register_exitproc+0xa8>
   8cf64:	2000      	movs	r0, #0
   8cf66:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8cf6a:	f04f 0e01 	mov.w	lr, #1
   8cf6e:	6058      	str	r0, [r3, #4]
   8cf70:	6019      	str	r1, [r3, #0]
   8cf72:	4602      	mov	r2, r0
   8cf74:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8cf78:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8cf7c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8cf80:	2e00      	cmp	r6, #0
   8cf82:	d0dc      	beq.n	8cf3e <__register_exitproc+0x4a>
   8cf84:	e7cc      	b.n	8cf20 <__register_exitproc+0x2c>
   8cf86:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8cf8a:	4301      	orrs	r1, r0
   8cf8c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8cf90:	e7d5      	b.n	8cf3e <__register_exitproc+0x4a>
   8cf92:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8cf96:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8cf9a:	e7bb      	b.n	8cf14 <__register_exitproc+0x20>
   8cf9c:	6828      	ldr	r0, [r5, #0]
   8cf9e:	f7fe fd61 	bl	8ba64 <__retarget_lock_release_recursive>
   8cfa2:	f04f 30ff 	mov.w	r0, #4294967295
   8cfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8cfaa:	bf00      	nop
   8cfac:	20000b40 	.word	0x20000b40
   8cfb0:	0008dd38 	.word	0x0008dd38
   8cfb4:	0008bb59 	.word	0x0008bb59

0008cfb8 <_calloc_r>:
   8cfb8:	b510      	push	{r4, lr}
   8cfba:	fb02 f101 	mul.w	r1, r2, r1
   8cfbe:	f7fe fdd3 	bl	8bb68 <_malloc_r>
   8cfc2:	4604      	mov	r4, r0
   8cfc4:	b1d8      	cbz	r0, 8cffe <_calloc_r+0x46>
   8cfc6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8cfca:	f022 0203 	bic.w	r2, r2, #3
   8cfce:	3a04      	subs	r2, #4
   8cfd0:	2a24      	cmp	r2, #36	; 0x24
   8cfd2:	d818      	bhi.n	8d006 <_calloc_r+0x4e>
   8cfd4:	2a13      	cmp	r2, #19
   8cfd6:	d914      	bls.n	8d002 <_calloc_r+0x4a>
   8cfd8:	2300      	movs	r3, #0
   8cfda:	2a1b      	cmp	r2, #27
   8cfdc:	6003      	str	r3, [r0, #0]
   8cfde:	6043      	str	r3, [r0, #4]
   8cfe0:	d916      	bls.n	8d010 <_calloc_r+0x58>
   8cfe2:	2a24      	cmp	r2, #36	; 0x24
   8cfe4:	6083      	str	r3, [r0, #8]
   8cfe6:	60c3      	str	r3, [r0, #12]
   8cfe8:	bf11      	iteee	ne
   8cfea:	f100 0210 	addne.w	r2, r0, #16
   8cfee:	6103      	streq	r3, [r0, #16]
   8cff0:	6143      	streq	r3, [r0, #20]
   8cff2:	f100 0218 	addeq.w	r2, r0, #24
   8cff6:	2300      	movs	r3, #0
   8cff8:	6013      	str	r3, [r2, #0]
   8cffa:	6053      	str	r3, [r2, #4]
   8cffc:	6093      	str	r3, [r2, #8]
   8cffe:	4620      	mov	r0, r4
   8d000:	bd10      	pop	{r4, pc}
   8d002:	4602      	mov	r2, r0
   8d004:	e7f7      	b.n	8cff6 <_calloc_r+0x3e>
   8d006:	2100      	movs	r1, #0
   8d008:	f7fa fdb2 	bl	87b70 <memset>
   8d00c:	4620      	mov	r0, r4
   8d00e:	bd10      	pop	{r4, pc}
   8d010:	f100 0208 	add.w	r2, r0, #8
   8d014:	e7ef      	b.n	8cff6 <_calloc_r+0x3e>
   8d016:	bf00      	nop

0008d018 <_close_r>:
   8d018:	b538      	push	{r3, r4, r5, lr}
   8d01a:	2300      	movs	r3, #0
   8d01c:	4c06      	ldr	r4, [pc, #24]	; (8d038 <_close_r+0x20>)
   8d01e:	4605      	mov	r5, r0
   8d020:	4608      	mov	r0, r1
   8d022:	6023      	str	r3, [r4, #0]
   8d024:	f7fa f92a 	bl	8727c <_close>
   8d028:	1c43      	adds	r3, r0, #1
   8d02a:	d000      	beq.n	8d02e <_close_r+0x16>
   8d02c:	bd38      	pop	{r3, r4, r5, pc}
   8d02e:	6823      	ldr	r3, [r4, #0]
   8d030:	2b00      	cmp	r3, #0
   8d032:	d0fb      	beq.n	8d02c <_close_r+0x14>
   8d034:	602b      	str	r3, [r5, #0]
   8d036:	bd38      	pop	{r3, r4, r5, pc}
   8d038:	20002e28 	.word	0x20002e28

0008d03c <_fclose_r>:
   8d03c:	b570      	push	{r4, r5, r6, lr}
   8d03e:	b159      	cbz	r1, 8d058 <_fclose_r+0x1c>
   8d040:	4605      	mov	r5, r0
   8d042:	460c      	mov	r4, r1
   8d044:	b110      	cbz	r0, 8d04c <_fclose_r+0x10>
   8d046:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8d048:	2b00      	cmp	r3, #0
   8d04a:	d03c      	beq.n	8d0c6 <_fclose_r+0x8a>
   8d04c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d04e:	07d8      	lsls	r0, r3, #31
   8d050:	d505      	bpl.n	8d05e <_fclose_r+0x22>
   8d052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d056:	b92b      	cbnz	r3, 8d064 <_fclose_r+0x28>
   8d058:	2600      	movs	r6, #0
   8d05a:	4630      	mov	r0, r6
   8d05c:	bd70      	pop	{r4, r5, r6, pc}
   8d05e:	89a3      	ldrh	r3, [r4, #12]
   8d060:	0599      	lsls	r1, r3, #22
   8d062:	d53c      	bpl.n	8d0de <_fclose_r+0xa2>
   8d064:	4621      	mov	r1, r4
   8d066:	4628      	mov	r0, r5
   8d068:	f7fe f838 	bl	8b0dc <__sflush_r>
   8d06c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8d06e:	4606      	mov	r6, r0
   8d070:	b133      	cbz	r3, 8d080 <_fclose_r+0x44>
   8d072:	69e1      	ldr	r1, [r4, #28]
   8d074:	4628      	mov	r0, r5
   8d076:	4798      	blx	r3
   8d078:	2800      	cmp	r0, #0
   8d07a:	bfb8      	it	lt
   8d07c:	f04f 36ff 	movlt.w	r6, #4294967295
   8d080:	89a3      	ldrh	r3, [r4, #12]
   8d082:	061a      	lsls	r2, r3, #24
   8d084:	d422      	bmi.n	8d0cc <_fclose_r+0x90>
   8d086:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8d088:	b141      	cbz	r1, 8d09c <_fclose_r+0x60>
   8d08a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8d08e:	4299      	cmp	r1, r3
   8d090:	d002      	beq.n	8d098 <_fclose_r+0x5c>
   8d092:	4628      	mov	r0, r5
   8d094:	f7fe fa3c 	bl	8b510 <_free_r>
   8d098:	2300      	movs	r3, #0
   8d09a:	6323      	str	r3, [r4, #48]	; 0x30
   8d09c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8d09e:	b121      	cbz	r1, 8d0aa <_fclose_r+0x6e>
   8d0a0:	4628      	mov	r0, r5
   8d0a2:	f7fe fa35 	bl	8b510 <_free_r>
   8d0a6:	2300      	movs	r3, #0
   8d0a8:	6463      	str	r3, [r4, #68]	; 0x44
   8d0aa:	f7fe f93b 	bl	8b324 <__sfp_lock_acquire>
   8d0ae:	2200      	movs	r2, #0
   8d0b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d0b2:	81a2      	strh	r2, [r4, #12]
   8d0b4:	07db      	lsls	r3, r3, #31
   8d0b6:	d50e      	bpl.n	8d0d6 <_fclose_r+0x9a>
   8d0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d0ba:	f7fe fccf 	bl	8ba5c <__retarget_lock_close_recursive>
   8d0be:	f7fe f937 	bl	8b330 <__sfp_lock_release>
   8d0c2:	4630      	mov	r0, r6
   8d0c4:	bd70      	pop	{r4, r5, r6, pc}
   8d0c6:	f7fe f8fd 	bl	8b2c4 <__sinit>
   8d0ca:	e7bf      	b.n	8d04c <_fclose_r+0x10>
   8d0cc:	6921      	ldr	r1, [r4, #16]
   8d0ce:	4628      	mov	r0, r5
   8d0d0:	f7fe fa1e 	bl	8b510 <_free_r>
   8d0d4:	e7d7      	b.n	8d086 <_fclose_r+0x4a>
   8d0d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d0d8:	f7fe fcc4 	bl	8ba64 <__retarget_lock_release_recursive>
   8d0dc:	e7ec      	b.n	8d0b8 <_fclose_r+0x7c>
   8d0de:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d0e0:	f7fe fcbe 	bl	8ba60 <__retarget_lock_acquire_recursive>
   8d0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d0e8:	2b00      	cmp	r3, #0
   8d0ea:	d1bb      	bne.n	8d064 <_fclose_r+0x28>
   8d0ec:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8d0ee:	f016 0601 	ands.w	r6, r6, #1
   8d0f2:	d1b1      	bne.n	8d058 <_fclose_r+0x1c>
   8d0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d0f6:	f7fe fcb5 	bl	8ba64 <__retarget_lock_release_recursive>
   8d0fa:	4630      	mov	r0, r6
   8d0fc:	bd70      	pop	{r4, r5, r6, pc}
   8d0fe:	bf00      	nop

0008d100 <_fstat_r>:
   8d100:	b570      	push	{r4, r5, r6, lr}
   8d102:	460d      	mov	r5, r1
   8d104:	2300      	movs	r3, #0
   8d106:	4c07      	ldr	r4, [pc, #28]	; (8d124 <_fstat_r+0x24>)
   8d108:	4606      	mov	r6, r0
   8d10a:	4611      	mov	r1, r2
   8d10c:	4628      	mov	r0, r5
   8d10e:	6023      	str	r3, [r4, #0]
   8d110:	f7fa f8b7 	bl	87282 <_fstat>
   8d114:	1c43      	adds	r3, r0, #1
   8d116:	d000      	beq.n	8d11a <_fstat_r+0x1a>
   8d118:	bd70      	pop	{r4, r5, r6, pc}
   8d11a:	6823      	ldr	r3, [r4, #0]
   8d11c:	2b00      	cmp	r3, #0
   8d11e:	d0fb      	beq.n	8d118 <_fstat_r+0x18>
   8d120:	6033      	str	r3, [r6, #0]
   8d122:	bd70      	pop	{r4, r5, r6, pc}
   8d124:	20002e28 	.word	0x20002e28

0008d128 <_isatty_r>:
   8d128:	b538      	push	{r3, r4, r5, lr}
   8d12a:	2300      	movs	r3, #0
   8d12c:	4c06      	ldr	r4, [pc, #24]	; (8d148 <_isatty_r+0x20>)
   8d12e:	4605      	mov	r5, r0
   8d130:	4608      	mov	r0, r1
   8d132:	6023      	str	r3, [r4, #0]
   8d134:	f7fa f8aa 	bl	8728c <_isatty>
   8d138:	1c43      	adds	r3, r0, #1
   8d13a:	d000      	beq.n	8d13e <_isatty_r+0x16>
   8d13c:	bd38      	pop	{r3, r4, r5, pc}
   8d13e:	6823      	ldr	r3, [r4, #0]
   8d140:	2b00      	cmp	r3, #0
   8d142:	d0fb      	beq.n	8d13c <_isatty_r+0x14>
   8d144:	602b      	str	r3, [r5, #0]
   8d146:	bd38      	pop	{r3, r4, r5, pc}
   8d148:	20002e28 	.word	0x20002e28

0008d14c <_lseek_r>:
   8d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d14e:	460e      	mov	r6, r1
   8d150:	2500      	movs	r5, #0
   8d152:	4c08      	ldr	r4, [pc, #32]	; (8d174 <_lseek_r+0x28>)
   8d154:	4611      	mov	r1, r2
   8d156:	4607      	mov	r7, r0
   8d158:	461a      	mov	r2, r3
   8d15a:	4630      	mov	r0, r6
   8d15c:	6025      	str	r5, [r4, #0]
   8d15e:	f7fa f897 	bl	87290 <_lseek>
   8d162:	1c43      	adds	r3, r0, #1
   8d164:	d000      	beq.n	8d168 <_lseek_r+0x1c>
   8d166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d168:	6823      	ldr	r3, [r4, #0]
   8d16a:	2b00      	cmp	r3, #0
   8d16c:	d0fb      	beq.n	8d166 <_lseek_r+0x1a>
   8d16e:	603b      	str	r3, [r7, #0]
   8d170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d172:	bf00      	nop
   8d174:	20002e28 	.word	0x20002e28

0008d178 <_read_r>:
   8d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d17a:	460e      	mov	r6, r1
   8d17c:	2500      	movs	r5, #0
   8d17e:	4c08      	ldr	r4, [pc, #32]	; (8d1a0 <_read_r+0x28>)
   8d180:	4611      	mov	r1, r2
   8d182:	4607      	mov	r7, r0
   8d184:	461a      	mov	r2, r3
   8d186:	4630      	mov	r0, r6
   8d188:	6025      	str	r5, [r4, #0]
   8d18a:	f7f7 fe23 	bl	84dd4 <_read>
   8d18e:	1c43      	adds	r3, r0, #1
   8d190:	d000      	beq.n	8d194 <_read_r+0x1c>
   8d192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d194:	6823      	ldr	r3, [r4, #0]
   8d196:	2b00      	cmp	r3, #0
   8d198:	d0fb      	beq.n	8d192 <_read_r+0x1a>
   8d19a:	603b      	str	r3, [r7, #0]
   8d19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d19e:	bf00      	nop
   8d1a0:	20002e28 	.word	0x20002e28

0008d1a4 <__aeabi_drsub>:
   8d1a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8d1a8:	e002      	b.n	8d1b0 <__adddf3>
   8d1aa:	bf00      	nop

0008d1ac <__aeabi_dsub>:
   8d1ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008d1b0 <__adddf3>:
   8d1b0:	b530      	push	{r4, r5, lr}
   8d1b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8d1b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8d1ba:	ea94 0f05 	teq	r4, r5
   8d1be:	bf08      	it	eq
   8d1c0:	ea90 0f02 	teqeq	r0, r2
   8d1c4:	bf1f      	itttt	ne
   8d1c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   8d1ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   8d1ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8d1d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d1d6:	f000 80e2 	beq.w	8d39e <__adddf3+0x1ee>
   8d1da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8d1de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8d1e2:	bfb8      	it	lt
   8d1e4:	426d      	neglt	r5, r5
   8d1e6:	dd0c      	ble.n	8d202 <__adddf3+0x52>
   8d1e8:	442c      	add	r4, r5
   8d1ea:	ea80 0202 	eor.w	r2, r0, r2
   8d1ee:	ea81 0303 	eor.w	r3, r1, r3
   8d1f2:	ea82 0000 	eor.w	r0, r2, r0
   8d1f6:	ea83 0101 	eor.w	r1, r3, r1
   8d1fa:	ea80 0202 	eor.w	r2, r0, r2
   8d1fe:	ea81 0303 	eor.w	r3, r1, r3
   8d202:	2d36      	cmp	r5, #54	; 0x36
   8d204:	bf88      	it	hi
   8d206:	bd30      	pophi	{r4, r5, pc}
   8d208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d20c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8d214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8d218:	d002      	beq.n	8d220 <__adddf3+0x70>
   8d21a:	4240      	negs	r0, r0
   8d21c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8d224:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8d22c:	d002      	beq.n	8d234 <__adddf3+0x84>
   8d22e:	4252      	negs	r2, r2
   8d230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8d234:	ea94 0f05 	teq	r4, r5
   8d238:	f000 80a7 	beq.w	8d38a <__adddf3+0x1da>
   8d23c:	f1a4 0401 	sub.w	r4, r4, #1
   8d240:	f1d5 0e20 	rsbs	lr, r5, #32
   8d244:	db0d      	blt.n	8d262 <__adddf3+0xb2>
   8d246:	fa02 fc0e 	lsl.w	ip, r2, lr
   8d24a:	fa22 f205 	lsr.w	r2, r2, r5
   8d24e:	1880      	adds	r0, r0, r2
   8d250:	f141 0100 	adc.w	r1, r1, #0
   8d254:	fa03 f20e 	lsl.w	r2, r3, lr
   8d258:	1880      	adds	r0, r0, r2
   8d25a:	fa43 f305 	asr.w	r3, r3, r5
   8d25e:	4159      	adcs	r1, r3
   8d260:	e00e      	b.n	8d280 <__adddf3+0xd0>
   8d262:	f1a5 0520 	sub.w	r5, r5, #32
   8d266:	f10e 0e20 	add.w	lr, lr, #32
   8d26a:	2a01      	cmp	r2, #1
   8d26c:	fa03 fc0e 	lsl.w	ip, r3, lr
   8d270:	bf28      	it	cs
   8d272:	f04c 0c02 	orrcs.w	ip, ip, #2
   8d276:	fa43 f305 	asr.w	r3, r3, r5
   8d27a:	18c0      	adds	r0, r0, r3
   8d27c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8d280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d284:	d507      	bpl.n	8d296 <__adddf3+0xe6>
   8d286:	f04f 0e00 	mov.w	lr, #0
   8d28a:	f1dc 0c00 	rsbs	ip, ip, #0
   8d28e:	eb7e 0000 	sbcs.w	r0, lr, r0
   8d292:	eb6e 0101 	sbc.w	r1, lr, r1
   8d296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8d29a:	d31b      	bcc.n	8d2d4 <__adddf3+0x124>
   8d29c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8d2a0:	d30c      	bcc.n	8d2bc <__adddf3+0x10c>
   8d2a2:	0849      	lsrs	r1, r1, #1
   8d2a4:	ea5f 0030 	movs.w	r0, r0, rrx
   8d2a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8d2ac:	f104 0401 	add.w	r4, r4, #1
   8d2b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8d2b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8d2b8:	f080 809a 	bcs.w	8d3f0 <__adddf3+0x240>
   8d2bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8d2c0:	bf08      	it	eq
   8d2c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d2c6:	f150 0000 	adcs.w	r0, r0, #0
   8d2ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d2ce:	ea41 0105 	orr.w	r1, r1, r5
   8d2d2:	bd30      	pop	{r4, r5, pc}
   8d2d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8d2d8:	4140      	adcs	r0, r0
   8d2da:	eb41 0101 	adc.w	r1, r1, r1
   8d2de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d2e2:	f1a4 0401 	sub.w	r4, r4, #1
   8d2e6:	d1e9      	bne.n	8d2bc <__adddf3+0x10c>
   8d2e8:	f091 0f00 	teq	r1, #0
   8d2ec:	bf04      	itt	eq
   8d2ee:	4601      	moveq	r1, r0
   8d2f0:	2000      	moveq	r0, #0
   8d2f2:	fab1 f381 	clz	r3, r1
   8d2f6:	bf08      	it	eq
   8d2f8:	3320      	addeq	r3, #32
   8d2fa:	f1a3 030b 	sub.w	r3, r3, #11
   8d2fe:	f1b3 0220 	subs.w	r2, r3, #32
   8d302:	da0c      	bge.n	8d31e <__adddf3+0x16e>
   8d304:	320c      	adds	r2, #12
   8d306:	dd08      	ble.n	8d31a <__adddf3+0x16a>
   8d308:	f102 0c14 	add.w	ip, r2, #20
   8d30c:	f1c2 020c 	rsb	r2, r2, #12
   8d310:	fa01 f00c 	lsl.w	r0, r1, ip
   8d314:	fa21 f102 	lsr.w	r1, r1, r2
   8d318:	e00c      	b.n	8d334 <__adddf3+0x184>
   8d31a:	f102 0214 	add.w	r2, r2, #20
   8d31e:	bfd8      	it	le
   8d320:	f1c2 0c20 	rsble	ip, r2, #32
   8d324:	fa01 f102 	lsl.w	r1, r1, r2
   8d328:	fa20 fc0c 	lsr.w	ip, r0, ip
   8d32c:	bfdc      	itt	le
   8d32e:	ea41 010c 	orrle.w	r1, r1, ip
   8d332:	4090      	lslle	r0, r2
   8d334:	1ae4      	subs	r4, r4, r3
   8d336:	bfa2      	ittt	ge
   8d338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8d33c:	4329      	orrge	r1, r5
   8d33e:	bd30      	popge	{r4, r5, pc}
   8d340:	ea6f 0404 	mvn.w	r4, r4
   8d344:	3c1f      	subs	r4, #31
   8d346:	da1c      	bge.n	8d382 <__adddf3+0x1d2>
   8d348:	340c      	adds	r4, #12
   8d34a:	dc0e      	bgt.n	8d36a <__adddf3+0x1ba>
   8d34c:	f104 0414 	add.w	r4, r4, #20
   8d350:	f1c4 0220 	rsb	r2, r4, #32
   8d354:	fa20 f004 	lsr.w	r0, r0, r4
   8d358:	fa01 f302 	lsl.w	r3, r1, r2
   8d35c:	ea40 0003 	orr.w	r0, r0, r3
   8d360:	fa21 f304 	lsr.w	r3, r1, r4
   8d364:	ea45 0103 	orr.w	r1, r5, r3
   8d368:	bd30      	pop	{r4, r5, pc}
   8d36a:	f1c4 040c 	rsb	r4, r4, #12
   8d36e:	f1c4 0220 	rsb	r2, r4, #32
   8d372:	fa20 f002 	lsr.w	r0, r0, r2
   8d376:	fa01 f304 	lsl.w	r3, r1, r4
   8d37a:	ea40 0003 	orr.w	r0, r0, r3
   8d37e:	4629      	mov	r1, r5
   8d380:	bd30      	pop	{r4, r5, pc}
   8d382:	fa21 f004 	lsr.w	r0, r1, r4
   8d386:	4629      	mov	r1, r5
   8d388:	bd30      	pop	{r4, r5, pc}
   8d38a:	f094 0f00 	teq	r4, #0
   8d38e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8d392:	bf06      	itte	eq
   8d394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8d398:	3401      	addeq	r4, #1
   8d39a:	3d01      	subne	r5, #1
   8d39c:	e74e      	b.n	8d23c <__adddf3+0x8c>
   8d39e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d3a2:	bf18      	it	ne
   8d3a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d3a8:	d029      	beq.n	8d3fe <__adddf3+0x24e>
   8d3aa:	ea94 0f05 	teq	r4, r5
   8d3ae:	bf08      	it	eq
   8d3b0:	ea90 0f02 	teqeq	r0, r2
   8d3b4:	d005      	beq.n	8d3c2 <__adddf3+0x212>
   8d3b6:	ea54 0c00 	orrs.w	ip, r4, r0
   8d3ba:	bf04      	itt	eq
   8d3bc:	4619      	moveq	r1, r3
   8d3be:	4610      	moveq	r0, r2
   8d3c0:	bd30      	pop	{r4, r5, pc}
   8d3c2:	ea91 0f03 	teq	r1, r3
   8d3c6:	bf1e      	ittt	ne
   8d3c8:	2100      	movne	r1, #0
   8d3ca:	2000      	movne	r0, #0
   8d3cc:	bd30      	popne	{r4, r5, pc}
   8d3ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8d3d2:	d105      	bne.n	8d3e0 <__adddf3+0x230>
   8d3d4:	0040      	lsls	r0, r0, #1
   8d3d6:	4149      	adcs	r1, r1
   8d3d8:	bf28      	it	cs
   8d3da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8d3de:	bd30      	pop	{r4, r5, pc}
   8d3e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8d3e4:	bf3c      	itt	cc
   8d3e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8d3ea:	bd30      	popcc	{r4, r5, pc}
   8d3ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d3f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8d3f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d3f8:	f04f 0000 	mov.w	r0, #0
   8d3fc:	bd30      	pop	{r4, r5, pc}
   8d3fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d402:	bf1a      	itte	ne
   8d404:	4619      	movne	r1, r3
   8d406:	4610      	movne	r0, r2
   8d408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8d40c:	bf1c      	itt	ne
   8d40e:	460b      	movne	r3, r1
   8d410:	4602      	movne	r2, r0
   8d412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d416:	bf06      	itte	eq
   8d418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8d41c:	ea91 0f03 	teqeq	r1, r3
   8d420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8d424:	bd30      	pop	{r4, r5, pc}
   8d426:	bf00      	nop

0008d428 <__aeabi_ui2d>:
   8d428:	f090 0f00 	teq	r0, #0
   8d42c:	bf04      	itt	eq
   8d42e:	2100      	moveq	r1, #0
   8d430:	4770      	bxeq	lr
   8d432:	b530      	push	{r4, r5, lr}
   8d434:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d438:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d43c:	f04f 0500 	mov.w	r5, #0
   8d440:	f04f 0100 	mov.w	r1, #0
   8d444:	e750      	b.n	8d2e8 <__adddf3+0x138>
   8d446:	bf00      	nop

0008d448 <__aeabi_i2d>:
   8d448:	f090 0f00 	teq	r0, #0
   8d44c:	bf04      	itt	eq
   8d44e:	2100      	moveq	r1, #0
   8d450:	4770      	bxeq	lr
   8d452:	b530      	push	{r4, r5, lr}
   8d454:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d458:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d45c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8d460:	bf48      	it	mi
   8d462:	4240      	negmi	r0, r0
   8d464:	f04f 0100 	mov.w	r1, #0
   8d468:	e73e      	b.n	8d2e8 <__adddf3+0x138>
   8d46a:	bf00      	nop

0008d46c <__aeabi_f2d>:
   8d46c:	0042      	lsls	r2, r0, #1
   8d46e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8d472:	ea4f 0131 	mov.w	r1, r1, rrx
   8d476:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8d47a:	bf1f      	itttt	ne
   8d47c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8d480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8d488:	4770      	bxne	lr
   8d48a:	f092 0f00 	teq	r2, #0
   8d48e:	bf14      	ite	ne
   8d490:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d494:	4770      	bxeq	lr
   8d496:	b530      	push	{r4, r5, lr}
   8d498:	f44f 7460 	mov.w	r4, #896	; 0x380
   8d49c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d4a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d4a4:	e720      	b.n	8d2e8 <__adddf3+0x138>
   8d4a6:	bf00      	nop

0008d4a8 <__aeabi_ul2d>:
   8d4a8:	ea50 0201 	orrs.w	r2, r0, r1
   8d4ac:	bf08      	it	eq
   8d4ae:	4770      	bxeq	lr
   8d4b0:	b530      	push	{r4, r5, lr}
   8d4b2:	f04f 0500 	mov.w	r5, #0
   8d4b6:	e00a      	b.n	8d4ce <__aeabi_l2d+0x16>

0008d4b8 <__aeabi_l2d>:
   8d4b8:	ea50 0201 	orrs.w	r2, r0, r1
   8d4bc:	bf08      	it	eq
   8d4be:	4770      	bxeq	lr
   8d4c0:	b530      	push	{r4, r5, lr}
   8d4c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8d4c6:	d502      	bpl.n	8d4ce <__aeabi_l2d+0x16>
   8d4c8:	4240      	negs	r0, r0
   8d4ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d4ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d4d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d4d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8d4da:	f43f aedc 	beq.w	8d296 <__adddf3+0xe6>
   8d4de:	f04f 0203 	mov.w	r2, #3
   8d4e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d4e6:	bf18      	it	ne
   8d4e8:	3203      	addne	r2, #3
   8d4ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d4ee:	bf18      	it	ne
   8d4f0:	3203      	addne	r2, #3
   8d4f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8d4f6:	f1c2 0320 	rsb	r3, r2, #32
   8d4fa:	fa00 fc03 	lsl.w	ip, r0, r3
   8d4fe:	fa20 f002 	lsr.w	r0, r0, r2
   8d502:	fa01 fe03 	lsl.w	lr, r1, r3
   8d506:	ea40 000e 	orr.w	r0, r0, lr
   8d50a:	fa21 f102 	lsr.w	r1, r1, r2
   8d50e:	4414      	add	r4, r2
   8d510:	e6c1      	b.n	8d296 <__adddf3+0xe6>
   8d512:	bf00      	nop

0008d514 <__aeabi_dmul>:
   8d514:	b570      	push	{r4, r5, r6, lr}
   8d516:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d51a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d51e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d522:	bf1d      	ittte	ne
   8d524:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d528:	ea94 0f0c 	teqne	r4, ip
   8d52c:	ea95 0f0c 	teqne	r5, ip
   8d530:	f000 f8de 	bleq	8d6f0 <__aeabi_dmul+0x1dc>
   8d534:	442c      	add	r4, r5
   8d536:	ea81 0603 	eor.w	r6, r1, r3
   8d53a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8d53e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8d542:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8d546:	bf18      	it	ne
   8d548:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8d54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d554:	d038      	beq.n	8d5c8 <__aeabi_dmul+0xb4>
   8d556:	fba0 ce02 	umull	ip, lr, r0, r2
   8d55a:	f04f 0500 	mov.w	r5, #0
   8d55e:	fbe1 e502 	umlal	lr, r5, r1, r2
   8d562:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8d566:	fbe0 e503 	umlal	lr, r5, r0, r3
   8d56a:	f04f 0600 	mov.w	r6, #0
   8d56e:	fbe1 5603 	umlal	r5, r6, r1, r3
   8d572:	f09c 0f00 	teq	ip, #0
   8d576:	bf18      	it	ne
   8d578:	f04e 0e01 	orrne.w	lr, lr, #1
   8d57c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8d580:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8d584:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8d588:	d204      	bcs.n	8d594 <__aeabi_dmul+0x80>
   8d58a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8d58e:	416d      	adcs	r5, r5
   8d590:	eb46 0606 	adc.w	r6, r6, r6
   8d594:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8d598:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8d59c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8d5a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8d5a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8d5a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d5ac:	bf88      	it	hi
   8d5ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d5b2:	d81e      	bhi.n	8d5f2 <__aeabi_dmul+0xde>
   8d5b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8d5b8:	bf08      	it	eq
   8d5ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8d5be:	f150 0000 	adcs.w	r0, r0, #0
   8d5c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d5c6:	bd70      	pop	{r4, r5, r6, pc}
   8d5c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8d5cc:	ea46 0101 	orr.w	r1, r6, r1
   8d5d0:	ea40 0002 	orr.w	r0, r0, r2
   8d5d4:	ea81 0103 	eor.w	r1, r1, r3
   8d5d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8d5dc:	bfc2      	ittt	gt
   8d5de:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d5e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d5e6:	bd70      	popgt	{r4, r5, r6, pc}
   8d5e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d5ec:	f04f 0e00 	mov.w	lr, #0
   8d5f0:	3c01      	subs	r4, #1
   8d5f2:	f300 80ab 	bgt.w	8d74c <__aeabi_dmul+0x238>
   8d5f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8d5fa:	bfde      	ittt	le
   8d5fc:	2000      	movle	r0, #0
   8d5fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8d602:	bd70      	pople	{r4, r5, r6, pc}
   8d604:	f1c4 0400 	rsb	r4, r4, #0
   8d608:	3c20      	subs	r4, #32
   8d60a:	da35      	bge.n	8d678 <__aeabi_dmul+0x164>
   8d60c:	340c      	adds	r4, #12
   8d60e:	dc1b      	bgt.n	8d648 <__aeabi_dmul+0x134>
   8d610:	f104 0414 	add.w	r4, r4, #20
   8d614:	f1c4 0520 	rsb	r5, r4, #32
   8d618:	fa00 f305 	lsl.w	r3, r0, r5
   8d61c:	fa20 f004 	lsr.w	r0, r0, r4
   8d620:	fa01 f205 	lsl.w	r2, r1, r5
   8d624:	ea40 0002 	orr.w	r0, r0, r2
   8d628:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8d62c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d634:	fa21 f604 	lsr.w	r6, r1, r4
   8d638:	eb42 0106 	adc.w	r1, r2, r6
   8d63c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d640:	bf08      	it	eq
   8d642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d646:	bd70      	pop	{r4, r5, r6, pc}
   8d648:	f1c4 040c 	rsb	r4, r4, #12
   8d64c:	f1c4 0520 	rsb	r5, r4, #32
   8d650:	fa00 f304 	lsl.w	r3, r0, r4
   8d654:	fa20 f005 	lsr.w	r0, r0, r5
   8d658:	fa01 f204 	lsl.w	r2, r1, r4
   8d65c:	ea40 0002 	orr.w	r0, r0, r2
   8d660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d668:	f141 0100 	adc.w	r1, r1, #0
   8d66c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d670:	bf08      	it	eq
   8d672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d676:	bd70      	pop	{r4, r5, r6, pc}
   8d678:	f1c4 0520 	rsb	r5, r4, #32
   8d67c:	fa00 f205 	lsl.w	r2, r0, r5
   8d680:	ea4e 0e02 	orr.w	lr, lr, r2
   8d684:	fa20 f304 	lsr.w	r3, r0, r4
   8d688:	fa01 f205 	lsl.w	r2, r1, r5
   8d68c:	ea43 0302 	orr.w	r3, r3, r2
   8d690:	fa21 f004 	lsr.w	r0, r1, r4
   8d694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d698:	fa21 f204 	lsr.w	r2, r1, r4
   8d69c:	ea20 0002 	bic.w	r0, r0, r2
   8d6a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d6a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d6a8:	bf08      	it	eq
   8d6aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d6ae:	bd70      	pop	{r4, r5, r6, pc}
   8d6b0:	f094 0f00 	teq	r4, #0
   8d6b4:	d10f      	bne.n	8d6d6 <__aeabi_dmul+0x1c2>
   8d6b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d6ba:	0040      	lsls	r0, r0, #1
   8d6bc:	eb41 0101 	adc.w	r1, r1, r1
   8d6c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d6c4:	bf08      	it	eq
   8d6c6:	3c01      	subeq	r4, #1
   8d6c8:	d0f7      	beq.n	8d6ba <__aeabi_dmul+0x1a6>
   8d6ca:	ea41 0106 	orr.w	r1, r1, r6
   8d6ce:	f095 0f00 	teq	r5, #0
   8d6d2:	bf18      	it	ne
   8d6d4:	4770      	bxne	lr
   8d6d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d6da:	0052      	lsls	r2, r2, #1
   8d6dc:	eb43 0303 	adc.w	r3, r3, r3
   8d6e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d6e4:	bf08      	it	eq
   8d6e6:	3d01      	subeq	r5, #1
   8d6e8:	d0f7      	beq.n	8d6da <__aeabi_dmul+0x1c6>
   8d6ea:	ea43 0306 	orr.w	r3, r3, r6
   8d6ee:	4770      	bx	lr
   8d6f0:	ea94 0f0c 	teq	r4, ip
   8d6f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d6f8:	bf18      	it	ne
   8d6fa:	ea95 0f0c 	teqne	r5, ip
   8d6fe:	d00c      	beq.n	8d71a <__aeabi_dmul+0x206>
   8d700:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d704:	bf18      	it	ne
   8d706:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d70a:	d1d1      	bne.n	8d6b0 <__aeabi_dmul+0x19c>
   8d70c:	ea81 0103 	eor.w	r1, r1, r3
   8d710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d714:	f04f 0000 	mov.w	r0, #0
   8d718:	bd70      	pop	{r4, r5, r6, pc}
   8d71a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d71e:	bf06      	itte	eq
   8d720:	4610      	moveq	r0, r2
   8d722:	4619      	moveq	r1, r3
   8d724:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d728:	d019      	beq.n	8d75e <__aeabi_dmul+0x24a>
   8d72a:	ea94 0f0c 	teq	r4, ip
   8d72e:	d102      	bne.n	8d736 <__aeabi_dmul+0x222>
   8d730:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d734:	d113      	bne.n	8d75e <__aeabi_dmul+0x24a>
   8d736:	ea95 0f0c 	teq	r5, ip
   8d73a:	d105      	bne.n	8d748 <__aeabi_dmul+0x234>
   8d73c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d740:	bf1c      	itt	ne
   8d742:	4610      	movne	r0, r2
   8d744:	4619      	movne	r1, r3
   8d746:	d10a      	bne.n	8d75e <__aeabi_dmul+0x24a>
   8d748:	ea81 0103 	eor.w	r1, r1, r3
   8d74c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d750:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d758:	f04f 0000 	mov.w	r0, #0
   8d75c:	bd70      	pop	{r4, r5, r6, pc}
   8d75e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d762:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d766:	bd70      	pop	{r4, r5, r6, pc}

0008d768 <__aeabi_ddiv>:
   8d768:	b570      	push	{r4, r5, r6, lr}
   8d76a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d76e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d772:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d776:	bf1d      	ittte	ne
   8d778:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d77c:	ea94 0f0c 	teqne	r4, ip
   8d780:	ea95 0f0c 	teqne	r5, ip
   8d784:	f000 f8a7 	bleq	8d8d6 <__aeabi_ddiv+0x16e>
   8d788:	eba4 0405 	sub.w	r4, r4, r5
   8d78c:	ea81 0e03 	eor.w	lr, r1, r3
   8d790:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d794:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d798:	f000 8088 	beq.w	8d8ac <__aeabi_ddiv+0x144>
   8d79c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d7a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d7a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d7a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d7ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d7b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d7b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d7b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d7bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d7c0:	429d      	cmp	r5, r3
   8d7c2:	bf08      	it	eq
   8d7c4:	4296      	cmpeq	r6, r2
   8d7c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d7ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d7ce:	d202      	bcs.n	8d7d6 <__aeabi_ddiv+0x6e>
   8d7d0:	085b      	lsrs	r3, r3, #1
   8d7d2:	ea4f 0232 	mov.w	r2, r2, rrx
   8d7d6:	1ab6      	subs	r6, r6, r2
   8d7d8:	eb65 0503 	sbc.w	r5, r5, r3
   8d7dc:	085b      	lsrs	r3, r3, #1
   8d7de:	ea4f 0232 	mov.w	r2, r2, rrx
   8d7e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d7e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d7ea:	ebb6 0e02 	subs.w	lr, r6, r2
   8d7ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d7f2:	bf22      	ittt	cs
   8d7f4:	1ab6      	subcs	r6, r6, r2
   8d7f6:	4675      	movcs	r5, lr
   8d7f8:	ea40 000c 	orrcs.w	r0, r0, ip
   8d7fc:	085b      	lsrs	r3, r3, #1
   8d7fe:	ea4f 0232 	mov.w	r2, r2, rrx
   8d802:	ebb6 0e02 	subs.w	lr, r6, r2
   8d806:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d80a:	bf22      	ittt	cs
   8d80c:	1ab6      	subcs	r6, r6, r2
   8d80e:	4675      	movcs	r5, lr
   8d810:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d814:	085b      	lsrs	r3, r3, #1
   8d816:	ea4f 0232 	mov.w	r2, r2, rrx
   8d81a:	ebb6 0e02 	subs.w	lr, r6, r2
   8d81e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d822:	bf22      	ittt	cs
   8d824:	1ab6      	subcs	r6, r6, r2
   8d826:	4675      	movcs	r5, lr
   8d828:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d82c:	085b      	lsrs	r3, r3, #1
   8d82e:	ea4f 0232 	mov.w	r2, r2, rrx
   8d832:	ebb6 0e02 	subs.w	lr, r6, r2
   8d836:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d83a:	bf22      	ittt	cs
   8d83c:	1ab6      	subcs	r6, r6, r2
   8d83e:	4675      	movcs	r5, lr
   8d840:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d844:	ea55 0e06 	orrs.w	lr, r5, r6
   8d848:	d018      	beq.n	8d87c <__aeabi_ddiv+0x114>
   8d84a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d84e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d852:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d856:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d85a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d85e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d862:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d866:	d1c0      	bne.n	8d7ea <__aeabi_ddiv+0x82>
   8d868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d86c:	d10b      	bne.n	8d886 <__aeabi_ddiv+0x11e>
   8d86e:	ea41 0100 	orr.w	r1, r1, r0
   8d872:	f04f 0000 	mov.w	r0, #0
   8d876:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d87a:	e7b6      	b.n	8d7ea <__aeabi_ddiv+0x82>
   8d87c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d880:	bf04      	itt	eq
   8d882:	4301      	orreq	r1, r0
   8d884:	2000      	moveq	r0, #0
   8d886:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d88a:	bf88      	it	hi
   8d88c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d890:	f63f aeaf 	bhi.w	8d5f2 <__aeabi_dmul+0xde>
   8d894:	ebb5 0c03 	subs.w	ip, r5, r3
   8d898:	bf04      	itt	eq
   8d89a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d89e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d8a2:	f150 0000 	adcs.w	r0, r0, #0
   8d8a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d8aa:	bd70      	pop	{r4, r5, r6, pc}
   8d8ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d8b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d8b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d8b8:	bfc2      	ittt	gt
   8d8ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d8be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d8c2:	bd70      	popgt	{r4, r5, r6, pc}
   8d8c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d8c8:	f04f 0e00 	mov.w	lr, #0
   8d8cc:	3c01      	subs	r4, #1
   8d8ce:	e690      	b.n	8d5f2 <__aeabi_dmul+0xde>
   8d8d0:	ea45 0e06 	orr.w	lr, r5, r6
   8d8d4:	e68d      	b.n	8d5f2 <__aeabi_dmul+0xde>
   8d8d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d8da:	ea94 0f0c 	teq	r4, ip
   8d8de:	bf08      	it	eq
   8d8e0:	ea95 0f0c 	teqeq	r5, ip
   8d8e4:	f43f af3b 	beq.w	8d75e <__aeabi_dmul+0x24a>
   8d8e8:	ea94 0f0c 	teq	r4, ip
   8d8ec:	d10a      	bne.n	8d904 <__aeabi_ddiv+0x19c>
   8d8ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d8f2:	f47f af34 	bne.w	8d75e <__aeabi_dmul+0x24a>
   8d8f6:	ea95 0f0c 	teq	r5, ip
   8d8fa:	f47f af25 	bne.w	8d748 <__aeabi_dmul+0x234>
   8d8fe:	4610      	mov	r0, r2
   8d900:	4619      	mov	r1, r3
   8d902:	e72c      	b.n	8d75e <__aeabi_dmul+0x24a>
   8d904:	ea95 0f0c 	teq	r5, ip
   8d908:	d106      	bne.n	8d918 <__aeabi_ddiv+0x1b0>
   8d90a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d90e:	f43f aefd 	beq.w	8d70c <__aeabi_dmul+0x1f8>
   8d912:	4610      	mov	r0, r2
   8d914:	4619      	mov	r1, r3
   8d916:	e722      	b.n	8d75e <__aeabi_dmul+0x24a>
   8d918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d91c:	bf18      	it	ne
   8d91e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d922:	f47f aec5 	bne.w	8d6b0 <__aeabi_dmul+0x19c>
   8d926:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d92a:	f47f af0d 	bne.w	8d748 <__aeabi_dmul+0x234>
   8d92e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d932:	f47f aeeb 	bne.w	8d70c <__aeabi_dmul+0x1f8>
   8d936:	e712      	b.n	8d75e <__aeabi_dmul+0x24a>

0008d938 <__gedf2>:
   8d938:	f04f 3cff 	mov.w	ip, #4294967295
   8d93c:	e006      	b.n	8d94c <__cmpdf2+0x4>
   8d93e:	bf00      	nop

0008d940 <__ledf2>:
   8d940:	f04f 0c01 	mov.w	ip, #1
   8d944:	e002      	b.n	8d94c <__cmpdf2+0x4>
   8d946:	bf00      	nop

0008d948 <__cmpdf2>:
   8d948:	f04f 0c01 	mov.w	ip, #1
   8d94c:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d95c:	bf18      	it	ne
   8d95e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d962:	d01b      	beq.n	8d99c <__cmpdf2+0x54>
   8d964:	b001      	add	sp, #4
   8d966:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d96a:	bf0c      	ite	eq
   8d96c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d970:	ea91 0f03 	teqne	r1, r3
   8d974:	bf02      	ittt	eq
   8d976:	ea90 0f02 	teqeq	r0, r2
   8d97a:	2000      	moveq	r0, #0
   8d97c:	4770      	bxeq	lr
   8d97e:	f110 0f00 	cmn.w	r0, #0
   8d982:	ea91 0f03 	teq	r1, r3
   8d986:	bf58      	it	pl
   8d988:	4299      	cmppl	r1, r3
   8d98a:	bf08      	it	eq
   8d98c:	4290      	cmpeq	r0, r2
   8d98e:	bf2c      	ite	cs
   8d990:	17d8      	asrcs	r0, r3, #31
   8d992:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d996:	f040 0001 	orr.w	r0, r0, #1
   8d99a:	4770      	bx	lr
   8d99c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d9a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d9a4:	d102      	bne.n	8d9ac <__cmpdf2+0x64>
   8d9a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d9aa:	d107      	bne.n	8d9bc <__cmpdf2+0x74>
   8d9ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d9b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d9b4:	d1d6      	bne.n	8d964 <__cmpdf2+0x1c>
   8d9b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d9ba:	d0d3      	beq.n	8d964 <__cmpdf2+0x1c>
   8d9bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d9c0:	4770      	bx	lr
   8d9c2:	bf00      	nop

0008d9c4 <__aeabi_cdrcmple>:
   8d9c4:	4684      	mov	ip, r0
   8d9c6:	4610      	mov	r0, r2
   8d9c8:	4662      	mov	r2, ip
   8d9ca:	468c      	mov	ip, r1
   8d9cc:	4619      	mov	r1, r3
   8d9ce:	4663      	mov	r3, ip
   8d9d0:	e000      	b.n	8d9d4 <__aeabi_cdcmpeq>
   8d9d2:	bf00      	nop

0008d9d4 <__aeabi_cdcmpeq>:
   8d9d4:	b501      	push	{r0, lr}
   8d9d6:	f7ff ffb7 	bl	8d948 <__cmpdf2>
   8d9da:	2800      	cmp	r0, #0
   8d9dc:	bf48      	it	mi
   8d9de:	f110 0f00 	cmnmi.w	r0, #0
   8d9e2:	bd01      	pop	{r0, pc}

0008d9e4 <__aeabi_dcmpeq>:
   8d9e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d9e8:	f7ff fff4 	bl	8d9d4 <__aeabi_cdcmpeq>
   8d9ec:	bf0c      	ite	eq
   8d9ee:	2001      	moveq	r0, #1
   8d9f0:	2000      	movne	r0, #0
   8d9f2:	f85d fb08 	ldr.w	pc, [sp], #8
   8d9f6:	bf00      	nop

0008d9f8 <__aeabi_dcmplt>:
   8d9f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d9fc:	f7ff ffea 	bl	8d9d4 <__aeabi_cdcmpeq>
   8da00:	bf34      	ite	cc
   8da02:	2001      	movcc	r0, #1
   8da04:	2000      	movcs	r0, #0
   8da06:	f85d fb08 	ldr.w	pc, [sp], #8
   8da0a:	bf00      	nop

0008da0c <__aeabi_dcmple>:
   8da0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8da10:	f7ff ffe0 	bl	8d9d4 <__aeabi_cdcmpeq>
   8da14:	bf94      	ite	ls
   8da16:	2001      	movls	r0, #1
   8da18:	2000      	movhi	r0, #0
   8da1a:	f85d fb08 	ldr.w	pc, [sp], #8
   8da1e:	bf00      	nop

0008da20 <__aeabi_dcmpge>:
   8da20:	f84d ed08 	str.w	lr, [sp, #-8]!
   8da24:	f7ff ffce 	bl	8d9c4 <__aeabi_cdrcmple>
   8da28:	bf94      	ite	ls
   8da2a:	2001      	movls	r0, #1
   8da2c:	2000      	movhi	r0, #0
   8da2e:	f85d fb08 	ldr.w	pc, [sp], #8
   8da32:	bf00      	nop

0008da34 <__aeabi_dcmpgt>:
   8da34:	f84d ed08 	str.w	lr, [sp, #-8]!
   8da38:	f7ff ffc4 	bl	8d9c4 <__aeabi_cdrcmple>
   8da3c:	bf34      	ite	cc
   8da3e:	2001      	movcc	r0, #1
   8da40:	2000      	movcs	r0, #0
   8da42:	f85d fb08 	ldr.w	pc, [sp], #8
   8da46:	bf00      	nop

0008da48 <__aeabi_dcmpun>:
   8da48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8da4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8da50:	d102      	bne.n	8da58 <__aeabi_dcmpun+0x10>
   8da52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8da56:	d10a      	bne.n	8da6e <__aeabi_dcmpun+0x26>
   8da58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8da5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8da60:	d102      	bne.n	8da68 <__aeabi_dcmpun+0x20>
   8da62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8da66:	d102      	bne.n	8da6e <__aeabi_dcmpun+0x26>
   8da68:	f04f 0000 	mov.w	r0, #0
   8da6c:	4770      	bx	lr
   8da6e:	f04f 0001 	mov.w	r0, #1
   8da72:	4770      	bx	lr

0008da74 <__aeabi_d2iz>:
   8da74:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8da78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8da7c:	d215      	bcs.n	8daaa <__aeabi_d2iz+0x36>
   8da7e:	d511      	bpl.n	8daa4 <__aeabi_d2iz+0x30>
   8da80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8da84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8da88:	d912      	bls.n	8dab0 <__aeabi_d2iz+0x3c>
   8da8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8da8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8da92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8da96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8da9a:	fa23 f002 	lsr.w	r0, r3, r2
   8da9e:	bf18      	it	ne
   8daa0:	4240      	negne	r0, r0
   8daa2:	4770      	bx	lr
   8daa4:	f04f 0000 	mov.w	r0, #0
   8daa8:	4770      	bx	lr
   8daaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8daae:	d105      	bne.n	8dabc <__aeabi_d2iz+0x48>
   8dab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8dab4:	bf08      	it	eq
   8dab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8daba:	4770      	bx	lr
   8dabc:	f04f 0000 	mov.w	r0, #0
   8dac0:	4770      	bx	lr
   8dac2:	bf00      	nop
   8dac4:	0000ffff 	.word	0x0000ffff
   8dac8:	706d696c 	.word	0x706d696c
   8dacc:	006e696b 	.word	0x006e696b
   8dad0:	00000000 	.word	0x00000000
   8dad4:	00000174 	.word	0x00000174
   8dad8:	0000022e 	.word	0x0000022e
   8dadc:	000002e8 	.word	0x000002e8
   8dae0:	0000045c 	.word	0x0000045c
   8dae4:	000005d0 	.word	0x000005d0
   8dae8:	00000744 	.word	0x00000744
	...
   8daf4:	00000200 	.word	0x00000200
   8daf8:	00000300 	.word	0x00000300
   8dafc:	00000400 	.word	0x00000400
   8db00:	00000600 	.word	0x00000600
   8db04:	00000800 	.word	0x00000800
	...
   8db14:	00000001 	.word	0x00000001
   8db18:	00000002 	.word	0x00000002
   8db1c:	00000004 	.word	0x00000004
   8db20:	00000008 	.word	0x00000008
   8db24:	00000010 	.word	0x00000010
   8db28:	00000020 	.word	0x00000020
   8db2c:	00000040 	.word	0x00000040
   8db30:	0000000c 	.word	0x0000000c
   8db34:	00000014 	.word	0x00000014
   8db38:	000a7825 	.word	0x000a7825
   8db3c:	20525441 	.word	0x20525441
   8db40:	20642528 	.word	0x20642528
   8db44:	296e656c 	.word	0x296e656c
   8db48:	0000203a 	.word	0x0000203a
   8db4c:	78323025 	.word	0x78323025
   8db50:	00000020 	.word	0x00000020
   8db54:	50525641 	.word	0x50525641
   8db58:	3a474f52 	.word	0x3a474f52
   8db5c:	61724520 	.word	0x61724520
   8db60:	203a6573 	.word	0x203a6573
   8db64:	6c796150 	.word	0x6c796150
   8db68:	2064616f 	.word	0x2064616f
   8db6c:	657a6973 	.word	0x657a6973
   8db70:	25203d20 	.word	0x25203d20
   8db74:	65202c64 	.word	0x65202c64
   8db78:	726f7272 	.word	0x726f7272
   8db7c:	000a3f21 	.word	0x000a3f21
   8db80:	50525641 	.word	0x50525641
   8db84:	3a474f52 	.word	0x3a474f52
   8db88:	746e4520 	.word	0x746e4520
   8db8c:	49207265 	.word	0x49207265
   8db90:	4d205053 	.word	0x4d205053
   8db94:	3a65646f 	.word	0x3a65646f
   8db98:	0a782520 	.word	0x0a782520
   8db9c:	00000000 	.word	0x00000000
   8dba0:	50525641 	.word	0x50525641
   8dba4:	3a474f52 	.word	0x3a474f52
   8dba8:	79615020 	.word	0x79615020
   8dbac:	64616f6c 	.word	0x64616f6c
   8dbb0:	7a697320 	.word	0x7a697320
   8dbb4:	203d2065 	.word	0x203d2065
   8dbb8:	202c6425 	.word	0x202c6425
   8dbbc:	6f727265 	.word	0x6f727265
   8dbc0:	0a3f2172 	.word	0x0a3f2172
   8dbc4:	00000000 	.word	0x00000000
   8dbc8:	494c5743 	.word	0x494c5743
   8dbcc:	415f4554 	.word	0x415f4554
   8dbd0:	53495256 	.word	0x53495256
   8dbd4:	00000050 	.word	0x00000050
   8dbd8:	50525641 	.word	0x50525641
   8dbdc:	3a474f52 	.word	0x3a474f52
   8dbe0:	64644120 	.word	0x64644120
   8dbe4:	73736572 	.word	0x73736572
   8dbe8:	25203d20 	.word	0x25203d20
   8dbec:	0a783230 	.word	0x0a783230
   8dbf0:	00000000 	.word	0x00000000
   8dbf4:	62616e45 	.word	0x62616e45
   8dbf8:	676e696c 	.word	0x676e696c
   8dbfc:	41535520 	.word	0x41535520
   8dc00:	0a305452 	.word	0x0a305452
   8dc04:	00000000 	.word	0x00000000
   8dc08:	3a525245 	.word	0x3a525245
   8dc0c:	766e4920 	.word	0x766e4920
   8dc10:	64696c61 	.word	0x64696c61
   8dc14:	41535520 	.word	0x41535520
   8dc18:	43205452 	.word	0x43205452
   8dc1c:	69666e6f 	.word	0x69666e6f
   8dc20:	61727567 	.word	0x61727567
   8dc24:	6e6f6974 	.word	0x6e6f6974
   8dc28:	63617020 	.word	0x63617020
   8dc2c:	3f74656b 	.word	0x3f74656b
   8dc30:	0000000a 	.word	0x0000000a

0008dc34 <BOS_DESC>:
   8dc34:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8dc44:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8dc60:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8dc70:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8dc80:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8dc90:	78383025 00000000 20626546 32203632     %08x....Feb 26 2
   8dca0:	00313230 323a3631 32323a34 00000000     021.16:24:22....
   8dcb0:	70696843 73696857 65726570 694c2d72     ChipWhisperer-Li
   8dcc0:	4f206574 6e696c6e 46202e65 776d7269     te Online. Firmw
   8dcd0:	20657261 6c697562 25203a64 73252f73     are build: %s/%s
   8dce0:	0000000a 69726553 6e206c61 65626d75     ....Serial numbe
   8dcf0:	25203a72 00000a73 74746553 20676e69     r: %s...Setting 
   8dd00:	46207075 20414750 6d6d6f43 63696e75     up FPGA Communic
   8dd10:	6f697461 00000a6e 6e657645 6f4c2074     ation...Event Lo
   8dd20:	4520706f 7265746e 202c6465 74696177     op Entered, wait
   8dd30:	2e676e69 000a2e2e                       ing.....

0008dd38 <_global_impure_ptr>:
   8dd38:	20000718 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8dd48:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8dd58:	46454443 00000000 33323130 37363534     CDEF....01234567
   8dd68:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8dd78:	0000296c 00000030                       l)..0...

0008dd80 <blanks.7223>:
   8dd80:	20202020 20202020 20202020 20202020                     

0008dd90 <zeroes.7224>:
   8dd90:	30303030 30303030 30303030 30303030     0000000000000000

0008dda0 <blanks.7217>:
   8dda0:	20202020 20202020 20202020 20202020                     

0008ddb0 <zeroes.7218>:
   8ddb0:	30303030 30303030 30303030 30303030     0000000000000000
   8ddc0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8ddd0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008dde0 <__mprec_bigtens>:
   8dde0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8ddf0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8de00:	7f73bf3c 75154fdd                       <.s..O.u

0008de08 <__mprec_tens>:
   8de08:	00000000 3ff00000 00000000 40240000     .......?......$@
   8de18:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8de28:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8de38:	00000000 412e8480 00000000 416312d0     .......A......cA
   8de48:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8de58:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8de68:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8de78:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8de88:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8de98:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8dea8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8deb8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8dec8:	79d99db4 44ea7843                       ...yCx.D

0008ded0 <p05.6055>:
   8ded0:	00000005 00000019 0000007d              ........}...

0008dedc <_ctype_>:
   8dedc:	20202000 20202020 28282020 20282828     .         ((((( 
   8deec:	20202020 20202020 20202020 20202020                     
   8defc:	10108820 10101010 10101010 10101010      ...............
   8df0c:	04040410 04040404 10040404 10101010     ................
   8df1c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8df2c:	01010101 01010101 01010101 10101010     ................
   8df3c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8df4c:	02020202 02020202 02020202 10101010     ................
   8df5c:	00000020 00000000 00000000 00000000      ...............
	...

0008dfe0 <_init>:
   8dfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8dfe2:	bf00      	nop
   8dfe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8dfe6:	bc08      	pop	{r3}
   8dfe8:	469e      	mov	lr, r3
   8dfea:	4770      	bx	lr

0008dfec <__init_array_start>:
   8dfec:	0008a151 	.word	0x0008a151

0008dff0 <__frame_dummy_init_array_entry>:
   8dff0:	000800e1                                ....

0008dff4 <_fini>:
   8dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8dff6:	bf00      	nop
   8dff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8dffa:	bc08      	pop	{r3}
   8dffc:	469e      	mov	lr, r3
   8dffe:	4770      	bx	lr

0008e000 <__fini_array_start>:
   8e000:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	200006ec 	.word	0x200006ec

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	000801c9 00080129 00080141 0008013d     ....)...A...=...
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	000804f1 000803ad 00080139 0008013d     ........9...=...
200001d0:	0008039d                                ....

200001d4 <udc_config>:
200001d4:	200002c4 200001f4 200002c4 200002d8     ... ... ... ... 
200001e4:	200001ec 00000000                       ... ....

200001ec <udc_config_hs>:
200001ec:	20000260 200002e4                       `.. ... 

200001f4 <udc_config_lsfs>:
200001f4:	200001fc 200002e4                       ... ... 

200001fc <udc_desc_fs>:
200001fc:	00620209 80000103 000409fa ffff0200     ..b.............
2000020c:	050700ff 00400285 06050700 00004002     ......@......@..
2000021c:	02010b08 00010202 00010409 01020201     ................
2000022c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000023c:	02030124 03830507 09100040 02000204     $.......@.......
2000024c:	0000000a 02810507 07000040 40020205     ........@......@
2000025c:	00000000                                ....

20000260 <udc_desc_hs>:
20000260:	00620209 80000103 000409fa ffff0200     ..b.............
20000270:	050700ff 02000285 06050700 00020002     ................
20000280:	02010b08 00010202 00010409 01020201     ................
20000290:	00240500 24040110 24050202 05020106     ..$....$...$....
200002a0:	02030124 03830507 09100040 02000204     $.......@.......
200002b0:	0000000a 02810507 07000200 00020205     ................
200002c0:	00000002                                ....

200002c4 <udc_device_desc>:
200002c4:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d4:	00000103                                ....

200002d8 <udc_device_qual>:
200002d8:	0200060a 40000000 00000001              .......@....

200002e4 <udi_apis>:
200002e4:	200005b8 200001ac 200001c0              ... ... ... 

200002f0 <gs_uc_state>:
200002f0:	00000201                                         .

200002f1 <scard_protocol_version.8872>:
200002f1:	00000002                                         ...

200002f4 <xram>:
200002f4:	60000000                                ...`

200002f8 <avrispmkIIfreqs>:
200002f8:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
20000308:	0007a120 0003d090 0001e848 00017882      .......H....x..
20000318:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000328:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000338:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000348:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000358:	000099f1 00009586 00008d68 0000861f     ........h.......
20000368:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000378:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000388:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000398:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
200003a8:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003b8:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003c8:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003d8:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003e8:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003f8:	000016f7 000015e7 000014ef 000013e5     ................
20000408:	00001306 00001219 00001142 00001071     ........B...q...
20000418:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000428:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000438:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000448:	000008d1 00000868 00000804 000007a4     ....h...........
20000458:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000468:	00000603 000005bc 00000576 00000535     ........v...5...
20000478:	000004f7 000004bc 00000483 0000044d     ............M...
20000488:	00000419 000003e8 000003b9 0000038d     ................
20000498:	00000362 0000033a 00000313 000002ee     b...:...........
200004a8:	000002cb 000002aa 0000028a 0000026b     ............k...
200004b8:	0000024e 00000233 00000218 000001ff     N...3...........
200004c8:	000001e7 000001d1 000001bb 000001a6     ................
200004d8:	00000192 00000180 0000016e 0000015d     ........n...]...
200004e8:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004f8:	00000112 00000105 000000f9 000000ee     ................
20000508:	000000e2 000000d8 000000ce 000000c4     ................
20000518:	000000bb 000000b2 000000aa 000000a2     ................
20000528:	0000009a 00000093 0000008c 00000086     ................
20000538:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000548:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000558:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000568:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000578:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000588 <ParameterTable>:
20000588:	81000180 01900001 01019100 94170192     ................
20000598:	03982101 01039e06 a40001a1 00010003              .!............

200005a6 <main_b_vendor_enable>:
200005a6:	01f40001                                         ..

200005a8 <defaultTimeoutTicks>:
200005a8:	000001f4                                ....

200005ac <XPROG_Param_EEPageSize>:
200005ac:	00000020                                 ...

200005b0 <XPROG_Param_NVMBase>:
200005b0:	010001c0                                ....

200005b4 <XPROG_Param_NVMCMDRegAddr>:
200005b4:	00003233                                         3

200005b5 <XPROG_Param_NVMCSRRegAddr>:
200005b5:	a5000032                                         2..

200005b8 <udi_api_vendor>:
200005b8:	000844a5 000844c9 000844e1 00084499     .D...D...D...D..
200005c8:	00000000                                ....

200005cc <udc_string_desc>:
200005cc:	00000300 00000000 00000000 00000000     ................
	...

20000610 <udc_string_desc_languageid>:
20000610:	04090304                                ....

20000614 <udc_string_manufacturer_name>:
20000614:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000624:	636e4920 0000002e                        Inc....

2000062c <udc_string_product_name>:
2000062c:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
2000063c:	00006574                                te..

20000640 <winusb_20_desc>:
20000640:	0000000a 06030000 000800ae 00000002     ................
20000650:	001400a4 49570003 4253554e 00000000     ......WINUSB....
20000660:	00000000 00880000 00070004 0044002a     ............*.D.
20000670:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000680:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000690:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
200006a0:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
200006b0:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
200006c0:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
200006d0:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
200006e0:	00390045 0000007d 00010000                       E.9.}.....

200006ea <g_interrupt_enabled>:
200006ea:	09000001                                         ..

200006ec <SystemCoreClock>:
200006ec:	003d0900                                ..=.

200006f0 <usb_serial_number>:
200006f0:	30303030 30303030 30303030 44414544     000000000000DEAD
20000700:	46454542 00000000 00000000 00000000     BEEF............
20000710:	00000000                                ....

20000714 <_impure_ptr>:
20000714:	20000718                                ... 

20000718 <impure_data>:
20000718:	00000000 20000a04 20000a6c 20000ad4     ....... l.. ... 
	...
200007c0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200007d0:	0005deec 0000000b 00000000 00000000     ................
	...

20000b40 <__atexit_recursive_mutex>:
20000b40:	20002e04                                ... 

20000b44 <__global_locale>:
20000b44:	00000043 00000000 00000000 00000000     C...............
	...
20000b64:	00000043 00000000 00000000 00000000     C...............
	...
20000b84:	00000043 00000000 00000000 00000000     C...............
	...
20000ba4:	00000043 00000000 00000000 00000000     C...............
	...
20000bc4:	00000043 00000000 00000000 00000000     C...............
	...
20000be4:	00000043 00000000 00000000 00000000     C...............
	...
20000c04:	00000043 00000000 00000000 00000000     C...............
	...
20000c24:	0008ceb1 0008c0ad 00000000 0008dedc     ................
20000c34:	0008dddc 0008dc04 0008dc04 0008dc04     ................
20000c44:	0008dc04 0008dc04 0008dc04 0008dc04     ................
20000c54:	0008dc04 0008dc04 ffffffff ffffffff     ................
20000c64:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000c8c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000cb0 <__malloc_av_>:
	...
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0 20000dd8 20000dd8     ... ... ... ... 
20000de8:	20000de0 20000de0 20000de8 20000de8     ... ... ... ... 
20000df8:	20000df0 20000df0 20000df8 20000df8     ... ... ... ... 
20000e08:	20000e00 20000e00 20000e08 20000e08     ... ... ... ... 
20000e18:	20000e10 20000e10 20000e18 20000e18     ... ... ... ... 
20000e28:	20000e20 20000e20 20000e28 20000e28      ..  .. (.. (.. 
20000e38:	20000e30 20000e30 20000e38 20000e38     0.. 0.. 8.. 8.. 
20000e48:	20000e40 20000e40 20000e48 20000e48     @.. @.. H.. H.. 
20000e58:	20000e50 20000e50 20000e58 20000e58     P.. P.. X.. X.. 
20000e68:	20000e60 20000e60 20000e68 20000e68     `.. `.. h.. h.. 
20000e78:	20000e70 20000e70 20000e78 20000e78     p.. p.. x.. x.. 
20000e88:	20000e80 20000e80 20000e88 20000e88     ... ... ... ... 
20000e98:	20000e90 20000e90 20000e98 20000e98     ... ... ... ... 
20000ea8:	20000ea0 20000ea0 20000ea8 20000ea8     ... ... ... ... 
20000eb8:	20000eb0 20000eb0 20000eb8 20000eb8     ... ... ... ... 
20000ec8:	20000ec0 20000ec0 20000ec8 20000ec8     ... ... ... ... 
20000ed8:	20000ed0 20000ed0 20000ed8 20000ed8     ... ... ... ... 
20000ee8:	20000ee0 20000ee0 20000ee8 20000ee8     ... ... ... ... 
20000ef8:	20000ef0 20000ef0 20000ef8 20000ef8     ... ... ... ... 
20000f08:	20000f00 20000f00 20000f08 20000f08     ... ... ... ... 
20000f18:	20000f10 20000f10 20000f18 20000f18     ... ... ... ... 
20000f28:	20000f20 20000f20 20000f28 20000f28      ..  .. (.. (.. 
20000f38:	20000f30 20000f30 20000f38 20000f38     0.. 0.. 8.. 8.. 
20000f48:	20000f40 20000f40 20000f48 20000f48     @.. @.. H.. H.. 
20000f58:	20000f50 20000f50 20000f58 20000f58     P.. P.. X.. X.. 
20000f68:	20000f60 20000f60 20000f68 20000f68     `.. `.. h.. h.. 
20000f78:	20000f70 20000f70 20000f78 20000f78     p.. p.. x.. x.. 
20000f88:	20000f80 20000f80 20000f88 20000f88     ... ... ... ... 
20000f98:	20000f90 20000f90 20000f98 20000f98     ... ... ... ... 
20000fa8:	20000fa0 20000fa0 20000fa8 20000fa8     ... ... ... ... 
20000fb8:	20000fb0 20000fb0 20000fb8 20000fb8     ... ... ... ... 
20000fc8:	20000fc0 20000fc0 20000fc8 20000fc8     ... ... ... ... 
20000fd8:	20000fd0 20000fd0 20000fd8 20000fd8     ... ... ... ... 
20000fe8:	20000fe0 20000fe0 20000fe8 20000fe8     ... ... ... ... 
20000ff8:	20000ff0 20000ff0 20000ff8 20000ff8     ... ... ... ... 
20001008:	20001000 20001000 20001008 20001008     ... ... ... ... 
20001018:	20001010 20001010 20001018 20001018     ... ... ... ... 
20001028:	20001020 20001020 20001028 20001028      ..  .. (.. (.. 
20001038:	20001030 20001030 20001038 20001038     0.. 0.. 8.. 8.. 
20001048:	20001040 20001040 20001048 20001048     @.. @.. H.. H.. 
20001058:	20001050 20001050 20001058 20001058     P.. P.. X.. X.. 
20001068:	20001060 20001060 20001068 20001068     `.. `.. h.. h.. 
20001078:	20001070 20001070 20001078 20001078     p.. p.. x.. x.. 
20001088:	20001080 20001080 20001088 20001088     ... ... ... ... 
20001098:	20001090 20001090 20001098 20001098     ... ... ... ... 
200010a8:	200010a0 200010a0 200010a8 200010a8     ... ... ... ... 

200010b8 <__malloc_sbrk_base>:
200010b8:	ffffffff                                ....

200010bc <__malloc_trim_threshold>:
200010bc:	00020000                                ....
