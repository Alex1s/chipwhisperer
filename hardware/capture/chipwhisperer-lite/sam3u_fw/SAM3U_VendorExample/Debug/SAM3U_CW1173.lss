
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ea5c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008ea5c  0008ea5c  0001ea5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000010c8  20000000  0008ea64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001d6c  200010c8  0008fb2c  000210c8  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000210c8  2**0
                  CONTENTS, READONLY
  6 .comment      000000a5  00000000  00000000  000210f1  2**0
                  CONTENTS, READONLY
  7 .debug_info   000436a7  00000000  00000000  00021196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00009658  00000000  00000000  0006483d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000f635  00000000  00000000  0006de95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001700  00000000  00000000  0007d4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00002820  00000000  00000000  0007ebca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0002278a  00000000  00000000  000813ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000319af  00000000  00000000  000a3b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000626a6  00000000  00000000  000d5523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004e2c  00000000  00000000  00137bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 35 6f 08 00 33 6f 08 00 33 6f 08 00     . . 5o..3o..3o..
   80010:	33 6f 08 00 33 6f 08 00 33 6f 08 00 00 00 00 00     3o..3o..3o......
	...
   8002c:	33 6f 08 00 33 6f 08 00 00 00 00 00 33 6f 08 00     3o..3o......3o..
   8003c:	33 6f 08 00 33 6f 08 00 33 6f 08 00 33 6f 08 00     3o..3o..3o..3o..
   8004c:	33 6f 08 00 33 6f 08 00 33 6f 08 00 33 6f 08 00     3o..3o..3o..3o..
   8005c:	33 6f 08 00 33 6f 08 00 33 6f 08 00 a9 53 08 00     3o..3o..3o...S..
   8006c:	bd 53 08 00 33 6f 08 00 a1 3a 08 00 c1 3a 08 00     .S..3o...:...:..
   8007c:	e1 3a 08 00 33 6f 08 00 33 6f 08 00 33 6f 08 00     .:..3o..3o..3o..
   8008c:	33 6f 08 00 33 6f 08 00 33 6f 08 00 d5 35 08 00     3o..3o..3o...5..
   8009c:	33 6f 08 00 33 6f 08 00 33 6f 08 00 33 6f 08 00     3o..3o..3o..3o..
   800ac:	33 6f 08 00 33 6f 08 00 71 5b 08 00 33 6f 08 00     3o..3o..q[..3o..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200010c8 	.word	0x200010c8
   800d8:	00000000 	.word	0x00000000
   800dc:	0008ea64 	.word	0x0008ea64

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	200010cc 	.word	0x200010cc
   800f8:	0008ea64 	.word	0x0008ea64

000800fc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   800fc:	4a02      	ldr	r2, [pc, #8]	; (80108 <udi_cdc_comm_disable+0xc>)
   800fe:	7813      	ldrb	r3, [r2, #0]
   80100:	3b01      	subs	r3, #1
   80102:	b2db      	uxtb	r3, r3
   80104:	7013      	strb	r3, [r2, #0]
}
   80106:	4770      	bx	lr
   80108:	200010ef 	.word	0x200010ef

0008010c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   8010c:	2000      	movs	r0, #0
   8010e:	4770      	bx	lr

00080110 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80110:	2000      	movs	r0, #0
   80112:	4770      	bx	lr

00080114 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80114:	4a1e      	ldr	r2, [pc, #120]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80116:	7813      	ldrb	r3, [r2, #0]
   80118:	f992 2000 	ldrsb.w	r2, [r2]
   8011c:	2a00      	cmp	r2, #0
   8011e:	db05      	blt.n	8012c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80120:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80124:	2b20      	cmp	r3, #32
   80126:	d01a      	beq.n	8015e <udi_cdc_comm_setup+0x4a>
	return false;  // request Not supported
   80128:	2000      	movs	r0, #0
   8012a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8012c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80130:	2b20      	cmp	r3, #32
   80132:	d001      	beq.n	80138 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
   80134:	2000      	movs	r0, #0
   80136:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80138:	4b15      	ldr	r3, [pc, #84]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8013a:	785b      	ldrb	r3, [r3, #1]
   8013c:	2b21      	cmp	r3, #33	; 0x21
   8013e:	d001      	beq.n	80144 <udi_cdc_comm_setup+0x30>
	return false;  // request Not supported
   80140:	2000      	movs	r0, #0
   80142:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80144:	4b12      	ldr	r3, [pc, #72]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80146:	88db      	ldrh	r3, [r3, #6]
   80148:	2b07      	cmp	r3, #7
   8014a:	d001      	beq.n	80150 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
   8014c:	2000      	movs	r0, #0
   8014e:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80150:	4b0f      	ldr	r3, [pc, #60]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80152:	4a10      	ldr	r2, [pc, #64]	; (80194 <udi_cdc_comm_setup+0x80>)
   80154:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80156:	2207      	movs	r2, #7
   80158:	819a      	strh	r2, [r3, #12]
				return true;
   8015a:	2001      	movs	r0, #1
   8015c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   8015e:	4b0c      	ldr	r3, [pc, #48]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80160:	7858      	ldrb	r0, [r3, #1]
   80162:	2820      	cmp	r0, #32
   80164:	d004      	beq.n	80170 <udi_cdc_comm_setup+0x5c>
   80166:	2822      	cmp	r0, #34	; 0x22
   80168:	bf14      	ite	ne
   8016a:	2000      	movne	r0, #0
   8016c:	2001      	moveq	r0, #1
   8016e:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80170:	4b07      	ldr	r3, [pc, #28]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80172:	88db      	ldrh	r3, [r3, #6]
   80174:	2b07      	cmp	r3, #7
   80176:	d001      	beq.n	8017c <udi_cdc_comm_setup+0x68>
					return false; // Error for USB host
   80178:	2000      	movs	r0, #0
}
   8017a:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   8017c:	4b04      	ldr	r3, [pc, #16]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8017e:	4a06      	ldr	r2, [pc, #24]	; (80198 <udi_cdc_comm_setup+0x84>)
   80180:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   80182:	4a04      	ldr	r2, [pc, #16]	; (80194 <udi_cdc_comm_setup+0x80>)
   80184:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80186:	2207      	movs	r2, #7
   80188:	819a      	strh	r2, [r3, #12]
				return true;
   8018a:	2001      	movs	r0, #1
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	20002df4 	.word	0x20002df4
   80194:	200010e8 	.word	0x200010e8
   80198:	000803b1 	.word	0x000803b1

0008019c <udi_cdc_comm_enable>:
{
   8019c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   8019e:	2400      	movs	r4, #0
   801a0:	4b11      	ldr	r3, [pc, #68]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801a4:	4b11      	ldr	r3, [pc, #68]	; (801ec <udi_cdc_comm_enable+0x50>)
   801a6:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <udi_cdc_comm_enable+0x54>)
   801aa:	22a1      	movs	r2, #161	; 0xa1
   801ac:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801ae:	2220      	movs	r2, #32
   801b0:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801b2:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801b4:	2201      	movs	r2, #1
   801b6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801b8:	2202      	movs	r2, #2
   801ba:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801bc:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <udi_cdc_comm_enable+0x58>)
   801c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801c4:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801c6:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801c8:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801ca:	2308      	movs	r3, #8
   801cc:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801ce:	4620      	mov	r0, r4
   801d0:	4b09      	ldr	r3, [pc, #36]	; (801f8 <udi_cdc_comm_enable+0x5c>)
   801d2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801d4:	4620      	mov	r0, r4
   801d6:	4b09      	ldr	r3, [pc, #36]	; (801fc <udi_cdc_comm_enable+0x60>)
   801d8:	4798      	blx	r3
   801da:	b120      	cbz	r0, 801e6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
   801dc:	4a02      	ldr	r2, [pc, #8]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801de:	7813      	ldrb	r3, [r2, #0]
   801e0:	3301      	adds	r3, #1
   801e2:	b2db      	uxtb	r3, r3
   801e4:	7013      	strb	r3, [r2, #0]
}
   801e6:	bd10      	pop	{r4, pc}
   801e8:	200010ef 	.word	0x200010ef
   801ec:	20001504 	.word	0x20001504
   801f0:	2000191c 	.word	0x2000191c
   801f4:	200010e8 	.word	0x200010e8
   801f8:	000833f9 	.word	0x000833f9
   801fc:	00083355 	.word	0x00083355

00080200 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80200:	4b42      	ldr	r3, [pc, #264]	; (8030c <udi_cdc_tx_send+0x10c>)
   80202:	781b      	ldrb	r3, [r3, #0]
   80204:	b103      	cbz	r3, 80208 <udi_cdc_tx_send+0x8>
   80206:	4770      	bx	lr
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8020c:	4b40      	ldr	r3, [pc, #256]	; (80310 <udi_cdc_tx_send+0x110>)
   8020e:	4798      	blx	r3
   80210:	2800      	cmp	r0, #0
   80212:	d045      	beq.n	802a0 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80214:	4b3f      	ldr	r3, [pc, #252]	; (80314 <udi_cdc_tx_send+0x114>)
   80216:	881c      	ldrh	r4, [r3, #0]
   80218:	4b3f      	ldr	r3, [pc, #252]	; (80318 <udi_cdc_tx_send+0x118>)
   8021a:	4798      	blx	r3
   8021c:	4284      	cmp	r4, r0
   8021e:	d03d      	beq.n	8029c <udi_cdc_tx_send+0x9c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80220:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80224:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80226:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8022a:	4b3c      	ldr	r3, [pc, #240]	; (8031c <udi_cdc_tx_send+0x11c>)
   8022c:	2200      	movs	r2, #0
   8022e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80230:	4b3b      	ldr	r3, [pc, #236]	; (80320 <udi_cdc_tx_send+0x120>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2dc      	uxtb	r4, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80236:	4a3b      	ldr	r2, [pc, #236]	; (80324 <udi_cdc_tx_send+0x124>)
   80238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8023c:	2b00      	cmp	r3, #0
   8023e:	d036      	beq.n	802ae <udi_cdc_tx_send+0xae>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80240:	4b39      	ldr	r3, [pc, #228]	; (80328 <udi_cdc_tx_send+0x128>)
   80242:	2200      	movs	r2, #0
   80244:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80246:	4b39      	ldr	r3, [pc, #228]	; (8032c <udi_cdc_tx_send+0x12c>)
   80248:	781b      	ldrb	r3, [r3, #0]
   8024a:	2b00      	cmp	r3, #0
   8024c:	d14c      	bne.n	802e8 <udi_cdc_tx_send+0xe8>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8024e:	fab4 f384 	clz	r3, r4
   80252:	095b      	lsrs	r3, r3, #5
   80254:	4a32      	ldr	r2, [pc, #200]	; (80320 <udi_cdc_tx_send+0x120>)
   80256:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80258:	4b2c      	ldr	r3, [pc, #176]	; (8030c <udi_cdc_tx_send+0x10c>)
   8025a:	2201      	movs	r2, #1
   8025c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8025e:	b925      	cbnz	r5, 8026a <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80260:	4b2e      	ldr	r3, [pc, #184]	; (8031c <udi_cdc_tx_send+0x11c>)
   80262:	701a      	strb	r2, [r3, #0]
   80264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80268:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8026a:	4626      	mov	r6, r4
   8026c:	4b2d      	ldr	r3, [pc, #180]	; (80324 <udi_cdc_tx_send+0x124>)
   8026e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80276:	bf14      	ite	ne
   80278:	2501      	movne	r5, #1
   8027a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8027c:	d138      	bne.n	802f0 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8027e:	4b25      	ldr	r3, [pc, #148]	; (80314 <udi_cdc_tx_send+0x114>)
   80280:	2200      	movs	r2, #0
   80282:	801a      	strh	r2, [r3, #0]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80284:	4b2a      	ldr	r3, [pc, #168]	; (80330 <udi_cdc_tx_send+0x130>)
   80286:	9300      	str	r3, [sp, #0]
   80288:	4b26      	ldr	r3, [pc, #152]	; (80324 <udi_cdc_tx_send+0x124>)
   8028a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   8028e:	4a29      	ldr	r2, [pc, #164]	; (80334 <udi_cdc_tx_send+0x134>)
   80290:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80294:	4629      	mov	r1, r5
   80296:	2085      	movs	r0, #133	; 0x85
   80298:	4c27      	ldr	r4, [pc, #156]	; (80338 <udi_cdc_tx_send+0x138>)
   8029a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8029c:	b002      	add	sp, #8
   8029e:	bd70      	pop	{r4, r5, r6, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802a0:	4b1c      	ldr	r3, [pc, #112]	; (80314 <udi_cdc_tx_send+0x114>)
   802a2:	881c      	ldrh	r4, [r3, #0]
   802a4:	4b25      	ldr	r3, [pc, #148]	; (8033c <udi_cdc_tx_send+0x13c>)
   802a6:	4798      	blx	r3
   802a8:	4284      	cmp	r4, r0
   802aa:	d1b9      	bne.n	80220 <udi_cdc_tx_send+0x20>
   802ac:	e7f6      	b.n	8029c <udi_cdc_tx_send+0x9c>
		sof_zlp_counter++;
   802ae:	4a1e      	ldr	r2, [pc, #120]	; (80328 <udi_cdc_tx_send+0x128>)
   802b0:	8813      	ldrh	r3, [r2, #0]
   802b2:	3301      	adds	r3, #1
   802b4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802b6:	4b16      	ldr	r3, [pc, #88]	; (80310 <udi_cdc_tx_send+0x110>)
   802b8:	4798      	blx	r3
   802ba:	b918      	cbnz	r0, 802c4 <udi_cdc_tx_send+0xc4>
   802bc:	4b1a      	ldr	r3, [pc, #104]	; (80328 <udi_cdc_tx_send+0x128>)
   802be:	881b      	ldrh	r3, [r3, #0]
   802c0:	2b63      	cmp	r3, #99	; 0x63
   802c2:	d908      	bls.n	802d6 <udi_cdc_tx_send+0xd6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802c4:	4b12      	ldr	r3, [pc, #72]	; (80310 <udi_cdc_tx_send+0x110>)
   802c6:	4798      	blx	r3
   802c8:	2800      	cmp	r0, #0
   802ca:	d0b9      	beq.n	80240 <udi_cdc_tx_send+0x40>
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <udi_cdc_tx_send+0x128>)
   802ce:	881b      	ldrh	r3, [r3, #0]
   802d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802d4:	d2b4      	bcs.n	80240 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802d6:	2d00      	cmp	r5, #0
   802d8:	d1e0      	bne.n	8029c <udi_cdc_tx_send+0x9c>
		cpu_irq_enable();
   802da:	4b10      	ldr	r3, [pc, #64]	; (8031c <udi_cdc_tx_send+0x11c>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	f3bf 8f5f 	dmb	sy
   802e4:	b662      	cpsie	i
}
   802e6:	e7d9      	b.n	8029c <udi_cdc_tx_send+0x9c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802e8:	fab4 f484 	clz	r4, r4
   802ec:	0964      	lsrs	r4, r4, #5
   802ee:	e7b3      	b.n	80258 <udi_cdc_tx_send+0x58>
		if (udd_is_high_speed()) {
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_cdc_tx_send+0x110>)
   802f2:	4798      	blx	r3
   802f4:	b120      	cbz	r0, 80300 <udi_cdc_tx_send+0x100>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802f6:	4b08      	ldr	r3, [pc, #32]	; (80318 <udi_cdc_tx_send+0x118>)
   802f8:	4798      	blx	r3
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <udi_cdc_tx_send+0x114>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	e7c1      	b.n	80284 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <udi_cdc_tx_send+0x13c>)
   80302:	4798      	blx	r3
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <udi_cdc_tx_send+0x114>)
   80306:	8018      	strh	r0, [r3, #0]
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x84>
   8030a:	bf00      	nop
   8030c:	20001918 	.word	0x20001918
   80310:	00086315 	.word	0x00086315
   80314:	20001914 	.word	0x20001914
   80318:	0008636d 	.word	0x0008636d
   8031c:	200006ee 	.word	0x200006ee
   80320:	20001910 	.word	0x20001910
   80324:	2000190c 	.word	0x2000190c
   80328:	200010e4 	.word	0x200010e4
   8032c:	20001508 	.word	0x20001508
   80330:	00080341 	.word	0x00080341
   80334:	2000150c 	.word	0x2000150c
   80338:	000865d1 	.word	0x000865d1
   8033c:	0008635d 	.word	0x0008635d

00080340 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80340:	b100      	cbz	r0, 80344 <udi_cdc_data_sent+0x4>
   80342:	4770      	bx	lr
{
   80344:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <udi_cdc_data_sent+0x24>)
   80348:	781b      	ldrb	r3, [r3, #0]
   8034a:	fab3 f383 	clz	r3, r3
   8034e:	095b      	lsrs	r3, r3, #5
   80350:	4a05      	ldr	r2, [pc, #20]	; (80368 <udi_cdc_data_sent+0x28>)
   80352:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <udi_cdc_data_sent+0x2c>)
   80358:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <udi_cdc_data_sent+0x30>)
   8035c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <udi_cdc_data_sent+0x34>)
   80360:	4798      	blx	r3
}
   80362:	bd08      	pop	{r3, pc}
   80364:	20001910 	.word	0x20001910
   80368:	2000190c 	.word	0x2000190c
   8036c:	20001508 	.word	0x20001508
   80370:	20001918 	.word	0x20001918
   80374:	00080201 	.word	0x00080201

00080378 <udi_cdc_data_sof_notify>:
{
   80378:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8037a:	2000      	movs	r0, #0
   8037c:	4b01      	ldr	r3, [pc, #4]	; (80384 <udi_cdc_data_sof_notify+0xc>)
   8037e:	4798      	blx	r3
}
   80380:	bd08      	pop	{r3, pc}
   80382:	bf00      	nop
   80384:	00080201 	.word	0x00080201

00080388 <udi_cdc_data_disable>:
{
   80388:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8038a:	4a06      	ldr	r2, [pc, #24]	; (803a4 <udi_cdc_data_disable+0x1c>)
   8038c:	7813      	ldrb	r3, [r2, #0]
   8038e:	3b01      	subs	r3, #1
   80390:	b2db      	uxtb	r3, r3
   80392:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80394:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   80396:	4b04      	ldr	r3, [pc, #16]	; (803a8 <udi_cdc_data_disable+0x20>)
   80398:	4798      	blx	r3
	udi_cdc_data_running = false;
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <udi_cdc_data_disable+0x24>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
}
   803a0:	bd08      	pop	{r3, pc}
   803a2:	bf00      	nop
   803a4:	200010f0 	.word	0x200010f0
   803a8:	00083365 	.word	0x00083365
   803ac:	200010e6 	.word	0x200010e6

000803b0 <udi_cdc_line_coding_received>:
{
   803b0:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803b2:	4902      	ldr	r1, [pc, #8]	; (803bc <udi_cdc_line_coding_received+0xc>)
   803b4:	2000      	movs	r0, #0
   803b6:	4b02      	ldr	r3, [pc, #8]	; (803c0 <udi_cdc_line_coding_received+0x10>)
   803b8:	4798      	blx	r3
}
   803ba:	bd08      	pop	{r3, pc}
   803bc:	200010e8 	.word	0x200010e8
   803c0:	000833f9 	.word	0x000833f9

000803c4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   803c8:	b672      	cpsid	i
   803ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803ce:	4b0b      	ldr	r3, [pc, #44]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803d4:	4b0a      	ldr	r3, [pc, #40]	; (80400 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803d6:	8818      	ldrh	r0, [r3, #0]
   803d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803da:	4a0a      	ldr	r2, [pc, #40]	; (80404 <udi_cdc_multi_get_nb_received_data+0x40>)
   803dc:	7812      	ldrb	r2, [r2, #0]
   803de:	b2d2      	uxtb	r2, r2
   803e0:	4809      	ldr	r0, [pc, #36]	; (80408 <udi_cdc_multi_get_nb_received_data+0x44>)
   803e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   803e6:	b280      	uxth	r0, r0
   803e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   803ea:	b929      	cbnz	r1, 803f8 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   803f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop
   803fc:	200006ee 	.word	0x200006ee
   80400:	200014fc 	.word	0x200014fc
   80404:	200014f8 	.word	0x200014f8
   80408:	200014f4 	.word	0x200014f4

0008040c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8040c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8040e:	4b03      	ldr	r3, [pc, #12]	; (8041c <udi_cdc_multi_is_rx_ready+0x10>)
   80410:	4798      	blx	r3
}
   80412:	3800      	subs	r0, #0
   80414:	bf18      	it	ne
   80416:	2001      	movne	r0, #1
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	000803c5 	.word	0x000803c5

00080420 <udi_cdc_rx_start>:
{
   80420:	b510      	push	{r4, lr}
   80422:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80424:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
   8042a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8042e:	4b21      	ldr	r3, [pc, #132]	; (804b4 <udi_cdc_rx_start+0x94>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80434:	4b20      	ldr	r3, [pc, #128]	; (804b8 <udi_cdc_rx_start+0x98>)
   80436:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80438:	4b20      	ldr	r3, [pc, #128]	; (804bc <udi_cdc_rx_start+0x9c>)
   8043a:	781b      	ldrb	r3, [r3, #0]
   8043c:	bb5b      	cbnz	r3, 80496 <udi_cdc_rx_start+0x76>
   8043e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80440:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80442:	881a      	ldrh	r2, [r3, #0]
   80444:	b292      	uxth	r2, r2
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <udi_cdc_rx_start+0xa4>)
   80448:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8044c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8044e:	429a      	cmp	r2, r3
   80450:	d321      	bcc.n	80496 <udi_cdc_rx_start+0x76>
	udi_cdc_rx_pos[port] = 0;
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80454:	2200      	movs	r2, #0
   80456:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80458:	fab4 f384 	clz	r3, r4
   8045c:	095b      	lsrs	r3, r3, #5
   8045e:	4a16      	ldr	r2, [pc, #88]	; (804b8 <udi_cdc_rx_start+0x98>)
   80460:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <udi_cdc_rx_start+0x9c>)
   80464:	2201      	movs	r2, #1
   80466:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80468:	b921      	cbnz	r1, 80474 <udi_cdc_rx_start+0x54>
		cpu_irq_enable();
   8046a:	4b12      	ldr	r3, [pc, #72]	; (804b4 <udi_cdc_rx_start+0x94>)
   8046c:	701a      	strb	r2, [r3, #0]
   8046e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80472:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80474:	2000      	movs	r0, #0
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <udi_cdc_rx_start+0xa8>)
   80478:	4798      	blx	r3
   8047a:	b9a8      	cbnz	r0, 804a8 <udi_cdc_rx_start+0x88>
	return udd_ep_run(ep,
   8047c:	4b13      	ldr	r3, [pc, #76]	; (804cc <udi_cdc_rx_start+0xac>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	f44f 7300 	mov.w	r3, #512	; 0x200
   80484:	4a12      	ldr	r2, [pc, #72]	; (804d0 <udi_cdc_rx_start+0xb0>)
   80486:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8048a:	2101      	movs	r1, #1
   8048c:	2006      	movs	r0, #6
   8048e:	4c11      	ldr	r4, [pc, #68]	; (804d4 <udi_cdc_rx_start+0xb4>)
   80490:	47a0      	blx	r4
}
   80492:	b002      	add	sp, #8
   80494:	bd10      	pop	{r4, pc}
	if (cpu_irq_is_enabled_flags(flags))
   80496:	b959      	cbnz	r1, 804b0 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <udi_cdc_rx_start+0x94>)
   8049a:	2201      	movs	r2, #1
   8049c:	701a      	strb	r2, [r3, #0]
   8049e:	f3bf 8f5f 	dmb	sy
   804a2:	b662      	cpsie	i
		return false;
   804a4:	2000      	movs	r0, #0
}
   804a6:	e7f4      	b.n	80492 <udi_cdc_rx_start+0x72>
		UDI_CDC_RX_NOTIFY(port);
   804a8:	2000      	movs	r0, #0
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <udi_cdc_rx_start+0xb8>)
   804ac:	4798      	blx	r3
   804ae:	e7e5      	b.n	8047c <udi_cdc_rx_start+0x5c>
		return false;
   804b0:	2000      	movs	r0, #0
   804b2:	e7ee      	b.n	80492 <udi_cdc_rx_start+0x72>
   804b4:	200006ee 	.word	0x200006ee
   804b8:	200014f8 	.word	0x200014f8
   804bc:	20001500 	.word	0x20001500
   804c0:	200014fc 	.word	0x200014fc
   804c4:	200014f4 	.word	0x200014f4
   804c8:	0008040d 	.word	0x0008040d
   804cc:	0008056d 	.word	0x0008056d
   804d0:	200010f4 	.word	0x200010f4
   804d4:	000865d1 	.word	0x000865d1
   804d8:	00083371 	.word	0x00083371

000804dc <udi_cdc_data_enable>:
{
   804dc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804de:	2400      	movs	r4, #0
   804e0:	4b15      	ldr	r3, [pc, #84]	; (80538 <udi_cdc_data_enable+0x5c>)
   804e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804e4:	4b15      	ldr	r3, [pc, #84]	; (8053c <udi_cdc_data_enable+0x60>)
   804e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804e8:	4b15      	ldr	r3, [pc, #84]	; (80540 <udi_cdc_data_enable+0x64>)
   804ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   804ec:	4b15      	ldr	r3, [pc, #84]	; (80544 <udi_cdc_data_enable+0x68>)
   804ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   804f0:	4b15      	ldr	r3, [pc, #84]	; (80548 <udi_cdc_data_enable+0x6c>)
   804f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   804f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <udi_cdc_data_enable+0x70>)
   804f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   804fa:	4620      	mov	r0, r4
   804fc:	4b14      	ldr	r3, [pc, #80]	; (80550 <udi_cdc_data_enable+0x74>)
   804fe:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <udi_cdc_data_enable+0x78>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <udi_cdc_data_enable+0x7c>)
   80506:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80508:	4b14      	ldr	r3, [pc, #80]	; (8055c <udi_cdc_data_enable+0x80>)
   8050a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8050c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8050e:	4b14      	ldr	r3, [pc, #80]	; (80560 <udi_cdc_data_enable+0x84>)
   80510:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80512:	4620      	mov	r0, r4
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <udi_cdc_data_enable+0x88>)
   80516:	4798      	blx	r3
   80518:	b140      	cbz	r0, 8052c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
   8051a:	4a07      	ldr	r2, [pc, #28]	; (80538 <udi_cdc_data_enable+0x5c>)
   8051c:	7813      	ldrb	r3, [r2, #0]
   8051e:	3301      	adds	r3, #1
   80520:	b2db      	uxtb	r3, r3
   80522:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80524:	7813      	ldrb	r3, [r2, #0]
   80526:	b2db      	uxtb	r3, r3
   80528:	2b01      	cmp	r3, #1
   8052a:	d000      	beq.n	8052e <udi_cdc_data_enable+0x52>
}
   8052c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   8052e:	4b0e      	ldr	r3, [pc, #56]	; (80568 <udi_cdc_data_enable+0x8c>)
   80530:	2201      	movs	r2, #1
   80532:	701a      	strb	r2, [r3, #0]
   80534:	e7fa      	b.n	8052c <udi_cdc_data_enable+0x50>
   80536:	bf00      	nop
   80538:	200010f0 	.word	0x200010f0
   8053c:	20001918 	.word	0x20001918
   80540:	20001508 	.word	0x20001508
   80544:	20001910 	.word	0x20001910
   80548:	2000190c 	.word	0x2000190c
   8054c:	20001914 	.word	0x20001914
   80550:	00080201 	.word	0x00080201
   80554:	20001500 	.word	0x20001500
   80558:	200014f8 	.word	0x200014f8
   8055c:	200014f4 	.word	0x200014f4
   80560:	200014fc 	.word	0x200014fc
   80564:	00080421 	.word	0x00080421
   80568:	200010e6 	.word	0x200010e6

0008056c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8056c:	b9f8      	cbnz	r0, 805ae <udi_cdc_data_received+0x42>
{
   8056e:	b530      	push	{r4, r5, lr}
   80570:	b083      	sub	sp, #12
   80572:	4615      	mov	r5, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <udi_cdc_data_received+0x44>)
   80576:	781c      	ldrb	r4, [r3, #0]
   80578:	fab4 f484 	clz	r4, r4
   8057c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8057e:	b151      	cbz	r1, 80596 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80580:	b289      	uxth	r1, r1
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <udi_cdc_data_received+0x48>)
   80584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80588:	2000      	movs	r0, #0
   8058a:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <udi_cdc_data_received+0x4c>)
   8058c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8058e:	4b0b      	ldr	r3, [pc, #44]	; (805bc <udi_cdc_data_received+0x50>)
   80590:	4798      	blx	r3
}
   80592:	b003      	add	sp, #12
   80594:	bd30      	pop	{r4, r5, pc}
		udd_ep_run( ep,
   80596:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <udi_cdc_data_received+0x54>)
   80598:	9300      	str	r3, [sp, #0]
   8059a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8059e:	4a09      	ldr	r2, [pc, #36]	; (805c4 <udi_cdc_data_received+0x58>)
   805a0:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805a4:	2101      	movs	r1, #1
   805a6:	4628      	mov	r0, r5
   805a8:	4c07      	ldr	r4, [pc, #28]	; (805c8 <udi_cdc_data_received+0x5c>)
   805aa:	47a0      	blx	r4
		return;
   805ac:	e7f1      	b.n	80592 <udi_cdc_data_received+0x26>
   805ae:	4770      	bx	lr
   805b0:	200014f8 	.word	0x200014f8
   805b4:	200014f4 	.word	0x200014f4
   805b8:	20001500 	.word	0x20001500
   805bc:	00080421 	.word	0x00080421
   805c0:	0008056d 	.word	0x0008056d
   805c4:	200010f4 	.word	0x200010f4
   805c8:	000865d1 	.word	0x000865d1

000805cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805d0:	4688      	mov	r8, r1
   805d2:	4617      	mov	r7, r2
	cpu_irq_disable();
   805d4:	4e21      	ldr	r6, [pc, #132]	; (8065c <udi_cdc_multi_read_buf+0x90>)
   805d6:	f04f 0b00 	mov.w	fp, #0
   805da:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805dc:	4d20      	ldr	r5, [pc, #128]	; (80660 <udi_cdc_multi_read_buf+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80678 <udi_cdc_multi_read_buf+0xac>
   805e2:	e00a      	b.n	805fa <udi_cdc_multi_read_buf+0x2e>
		cpu_irq_enable();
   805e4:	2001      	movs	r0, #1
   805e6:	7030      	strb	r0, [r6, #0]
   805e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ec:	b662      	cpsie	i
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   805ee:	428a      	cmp	r2, r1
   805f0:	d816      	bhi.n	80620 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
   805f2:	4b1c      	ldr	r3, [pc, #112]	; (80664 <udi_cdc_multi_read_buf+0x98>)
   805f4:	781b      	ldrb	r3, [r3, #0]
   805f6:	2b00      	cmp	r3, #0
   805f8:	d02d      	beq.n	80656 <udi_cdc_multi_read_buf+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   805fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80604:	f886 a000 	strb.w	sl, [r6]
	pos = udi_cdc_rx_pos[port];
   80608:	8829      	ldrh	r1, [r5, #0]
   8060a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8060c:	f899 3000 	ldrb.w	r3, [r9]
   80610:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80612:	4a15      	ldr	r2, [pc, #84]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   80618:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8061a:	2800      	cmp	r0, #0
   8061c:	d1e7      	bne.n	805ee <udi_cdc_multi_read_buf+0x22>
   8061e:	e7e1      	b.n	805e4 <udi_cdc_multi_read_buf+0x18>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80620:	4a11      	ldr	r2, [pc, #68]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80622:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80626:	b2a4      	uxth	r4, r4
   80628:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
   8062a:	42bc      	cmp	r4, r7
   8062c:	bf28      	it	cs
   8062e:	463c      	movcs	r4, r7
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80630:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80634:	4622      	mov	r2, r4
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <udi_cdc_multi_read_buf+0xa0>)
   80638:	4419      	add	r1, r3
   8063a:	4640      	mov	r0, r8
   8063c:	4b0c      	ldr	r3, [pc, #48]	; (80670 <udi_cdc_multi_read_buf+0xa4>)
   8063e:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80640:	882b      	ldrh	r3, [r5, #0]
   80642:	4423      	add	r3, r4
   80644:	b29b      	uxth	r3, r3
   80646:	802b      	strh	r3, [r5, #0]
	ptr_buf += copy_nb;
   80648:	44a0      	add	r8, r4
	size -= copy_nb;
   8064a:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_start(port);
   8064c:	4658      	mov	r0, fp
   8064e:	4b09      	ldr	r3, [pc, #36]	; (80674 <udi_cdc_multi_read_buf+0xa8>)
   80650:	4798      	blx	r3

	if (size) {
   80652:	2f00      	cmp	r7, #0
   80654:	d1d1      	bne.n	805fa <udi_cdc_multi_read_buf+0x2e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80656:	4638      	mov	r0, r7
   80658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8065c:	200006ee 	.word	0x200006ee
   80660:	200014fc 	.word	0x200014fc
   80664:	200010e6 	.word	0x200010e6
   80668:	200014f4 	.word	0x200014f4
   8066c:	200010f4 	.word	0x200010f4
   80670:	000878b5 	.word	0x000878b5
   80674:	00080421 	.word	0x00080421
   80678:	200014f8 	.word	0x200014f8

0008067c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8067c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8067e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80682:	b672      	cpsid	i
   80684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80688:	4b14      	ldr	r3, [pc, #80]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   8068a:	2100      	movs	r1, #0
   8068c:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   80690:	781b      	ldrb	r3, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80692:	4914      	ldr	r1, [pc, #80]	; (806e4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80694:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80698:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8069c:	d00a      	beq.n	806b4 <udi_cdc_multi_get_free_tx_buffer+0x38>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8069e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806a2:	b92a      	cbnz	r2, 806b0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a6:	2201      	movs	r2, #1
   806a8:	701a      	strb	r2, [r3, #0]
   806aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806b0:	bc10      	pop	{r4}
   806b2:	4770      	bx	lr
   806b4:	b2dc      	uxtb	r4, r3
		if ((!udi_cdc_tx_trans_ongoing[port])
   806b6:	4b0c      	ldr	r3, [pc, #48]	; (806e8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d1ef      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806be:	4b0b      	ldr	r3, [pc, #44]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c0:	781b      	ldrb	r3, [r3, #0]
   806c2:	2b00      	cmp	r3, #0
   806c4:	d1eb      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c8:	2101      	movs	r1, #1
   806ca:	7019      	strb	r1, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806cc:	fab4 f484 	clz	r4, r4
   806d0:	0964      	lsrs	r4, r4, #5
   806d2:	4b03      	ldr	r3, [pc, #12]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806d4:	701c      	strb	r4, [r3, #0]
			buf_sel_nb = 0;
   806d6:	2000      	movs	r0, #0
   806d8:	e7e1      	b.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
   806da:	bf00      	nop
   806dc:	200006ee 	.word	0x200006ee
   806e0:	20001910 	.word	0x20001910
   806e4:	2000190c 	.word	0x2000190c
   806e8:	20001918 	.word	0x20001918
   806ec:	20001508 	.word	0x20001508

000806f0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   806f0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   806f2:	4b03      	ldr	r3, [pc, #12]	; (80700 <udi_cdc_multi_is_tx_ready+0x10>)
   806f4:	4798      	blx	r3
}
   806f6:	3800      	subs	r0, #0
   806f8:	bf18      	it	ne
   806fa:	2001      	movne	r0, #1
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	0008067d 	.word	0x0008067d

00080704 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80708:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8070a:	4b1a      	ldr	r3, [pc, #104]	; (80774 <udi_cdc_multi_putc+0x70>)
   8070c:	799d      	ldrb	r5, [r3, #6]
   8070e:	2d09      	cmp	r5, #9
   80710:	bf14      	ite	ne
   80712:	2500      	movne	r5, #0
   80714:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80716:	4e18      	ldr	r6, [pc, #96]	; (80778 <udi_cdc_multi_putc+0x74>)
	cpu_irq_disable();
   80718:	4f18      	ldr	r7, [pc, #96]	; (8077c <udi_cdc_multi_putc+0x78>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8071a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8078c <udi_cdc_multi_putc+0x88>
   8071e:	e01d      	b.n	8075c <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80720:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80724:	b672      	cpsid	i
   80726:	f3bf 8f5f 	dmb	sy
   8072a:	2300      	movs	r3, #0
   8072c:	703b      	strb	r3, [r7, #0]
   8072e:	f898 2000 	ldrb.w	r2, [r8]
   80732:	b2d1      	uxtb	r1, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <udi_cdc_multi_putc+0x7c>)
   80736:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   8073a:	f102 0c01 	add.w	ip, r2, #1
   8073e:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
   80742:	4b10      	ldr	r3, [pc, #64]	; (80784 <udi_cdc_multi_putc+0x80>)
   80744:	eb03 2341 	add.w	r3, r3, r1, lsl #9
   80748:	549c      	strb	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
   8074a:	b920      	cbnz	r0, 80756 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   8074c:	2301      	movs	r3, #1
   8074e:	703b      	strb	r3, [r7, #0]
   80750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80754:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80756:	b15d      	cbz	r5, 80770 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80758:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   8075a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8075c:	2000      	movs	r0, #0
   8075e:	47b0      	blx	r6
   80760:	2800      	cmp	r0, #0
   80762:	d1dd      	bne.n	80720 <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <udi_cdc_multi_putc+0x84>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	2b00      	cmp	r3, #0
   8076a:	d1f7      	bne.n	8075c <udi_cdc_multi_putc+0x58>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   8076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80770:	2001      	movs	r0, #1
   80772:	e7fb      	b.n	8076c <udi_cdc_multi_putc+0x68>
   80774:	200010e8 	.word	0x200010e8
   80778:	000806f1 	.word	0x000806f1
   8077c:	200006ee 	.word	0x200006ee
   80780:	2000190c 	.word	0x2000190c
   80784:	2000150c 	.word	0x2000150c
   80788:	200010e6 	.word	0x200010e6
   8078c:	20001910 	.word	0x20001910

00080790 <readFabricationZone>:
*   \brief  Read the fabrication zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readFabricationZone(uint8_t* buffer)
{
   80790:	b510      	push	{r4, lr}
   80792:	4604      	mov	r4, r0
    readSMC(2, 0, buffer);
   80794:	4602      	mov	r2, r0
   80796:	2100      	movs	r1, #0
   80798:	2002      	movs	r0, #2
   8079a:	4b02      	ldr	r3, [pc, #8]	; (807a4 <readFabricationZone+0x14>)
   8079c:	4798      	blx	r3
    return buffer;
}
   8079e:	4620      	mov	r0, r4
   807a0:	bd10      	pop	{r4, pc}
   807a2:	bf00      	nop
   807a4:	00080e5d 	.word	0x00080e5d

000807a8 <writeIssuerZone>:
/*! \fn     writeIssuerZone(uint8_t* buffer)
*   \brief  Write in the issuer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (8 bytes required)
*/
void writeIssuerZone(uint8_t* buffer)
{
   807a8:	b508      	push	{r3, lr}
   807aa:	4602      	mov	r2, r0
    writeSMC(16, 64, buffer);
   807ac:	2140      	movs	r1, #64	; 0x40
   807ae:	2010      	movs	r0, #16
   807b0:	4b01      	ldr	r3, [pc, #4]	; (807b8 <writeIssuerZone+0x10>)
   807b2:	4798      	blx	r3
}
   807b4:	bd08      	pop	{r3, pc}
   807b6:	bf00      	nop
   807b8:	00080d8d 	.word	0x00080d8d

000807bc <readSecurityCodeAttemptsCounters>:
*   \brief  Read the number of code attempts left (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readSecurityCodeAttemptsCounters(uint8_t* buffer)
{
   807bc:	b510      	push	{r4, lr}
   807be:	4604      	mov	r4, r0
    readSMC(14, 12, buffer);
   807c0:	4602      	mov	r2, r0
   807c2:	210c      	movs	r1, #12
   807c4:	200e      	movs	r0, #14
   807c6:	4b02      	ldr	r3, [pc, #8]	; (807d0 <readSecurityCodeAttemptsCounters+0x14>)
   807c8:	4798      	blx	r3
    return buffer;
}
   807ca:	4620      	mov	r0, r4
   807cc:	bd10      	pop	{r4, pc}
   807ce:	bf00      	nop
   807d0:	00080e5d 	.word	0x00080e5d

000807d4 <readMemoryTestZone>:
*   \brief  Read the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readMemoryTestZone(uint8_t* buffer)
{
   807d4:	b510      	push	{r4, lr}
   807d6:	4604      	mov	r4, r0
    readSMC(178, 176, buffer);
   807d8:	4602      	mov	r2, r0
   807da:	21b0      	movs	r1, #176	; 0xb0
   807dc:	20b2      	movs	r0, #178	; 0xb2
   807de:	4b02      	ldr	r3, [pc, #8]	; (807e8 <readMemoryTestZone+0x14>)
   807e0:	4798      	blx	r3
    return buffer;
}
   807e2:	4620      	mov	r0, r4
   807e4:	bd10      	pop	{r4, pc}
   807e6:	bf00      	nop
   807e8:	00080e5d 	.word	0x00080e5d

000807ec <writeMemoryTestZone>:
/*! \fn     writeMemoryTestZone(uint8_t* buffer)
*   \brief  Write in the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeMemoryTestZone(uint8_t* buffer)
{
   807ec:	b508      	push	{r3, lr}
   807ee:	4602      	mov	r2, r0
    writeSMC(1408, 16, buffer);
   807f0:	2110      	movs	r1, #16
   807f2:	f44f 60b0 	mov.w	r0, #1408	; 0x580
   807f6:	4b01      	ldr	r3, [pc, #4]	; (807fc <writeMemoryTestZone+0x10>)
   807f8:	4798      	blx	r3
}
   807fa:	bd08      	pop	{r3, pc}
   807fc:	00080d8d 	.word	0x00080d8d

00080800 <readManufacturerZone>:
*   \brief  Read the manufacturer zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readManufacturerZone(uint8_t* buffer)
{
   80800:	b510      	push	{r4, lr}
   80802:	4604      	mov	r4, r0
    readSMC(180, 178, buffer);
   80804:	4602      	mov	r2, r0
   80806:	21b2      	movs	r1, #178	; 0xb2
   80808:	20b4      	movs	r0, #180	; 0xb4
   8080a:	4b02      	ldr	r3, [pc, #8]	; (80814 <readManufacturerZone+0x14>)
   8080c:	4798      	blx	r3
    return buffer;
}
   8080e:	4620      	mov	r0, r4
   80810:	bd10      	pop	{r4, pc}
   80812:	bf00      	nop
   80814:	00080e5d 	.word	0x00080e5d

00080818 <writeManufacturerZone>:
/*! \fn     writeManufacturerZone(uint8_t* buffer)
*   \brief  Write in the manufacturer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeManufacturerZone(uint8_t* buffer)
{
   80818:	b508      	push	{r3, lr}
   8081a:	4602      	mov	r2, r0
    writeSMC(1424, 16, buffer);
   8081c:	2110      	movs	r1, #16
   8081e:	f44f 60b2 	mov.w	r0, #1424	; 0x590
   80822:	4b01      	ldr	r3, [pc, #4]	; (80828 <writeManufacturerZone+0x10>)
   80824:	4798      	blx	r3
}
   80826:	bd08      	pop	{r3, pc}
   80828:	00080d8d 	.word	0x00080d8d

0008082c <writeManufacturerFuse>:

/*! \fn     writeManufacturerFuse(void)
*   \brief  Write manufacturer fuse, controlling access to the MFZ
*/
void writeManufacturerFuse(void)
{
   8082c:	b508      	push	{r3, lr}
    blowFuse(MAN_FUSE);
   8082e:	2000      	movs	r0, #0
   80830:	4b01      	ldr	r3, [pc, #4]	; (80838 <writeManufacturerFuse+0xc>)
   80832:	4798      	blx	r3
}
   80834:	bd08      	pop	{r3, pc}
   80836:	bf00      	nop
   80838:	00080ba5 	.word	0x00080ba5

0008083c <write_issuers_fuse>:

/*! \fn     write_issuers_fuse(void)
*   \brief  Write issuers fuse, setting the AT88SC102 into Security Mode 2, we need to be authenticated here
*/
void write_issuers_fuse(void)
{
   8083c:	b508      	push	{r3, lr}
    blowFuse(ISSUER_FUSE);
   8083e:	2002      	movs	r0, #2
   80840:	4b01      	ldr	r3, [pc, #4]	; (80848 <write_issuers_fuse+0xc>)
   80842:	4798      	blx	r3
}
   80844:	bd08      	pop	{r3, pc}
   80846:	bf00      	nop
   80848:	00080ba5 	.word	0x00080ba5

0008084c <write_ec2en_fuse>:

/*! \fn     write_ec2en_fuse(void)
*   \brief  Write ec2en fuse, to be done before blowing issuer fuse
*/
void write_ec2en_fuse(void)
{
   8084c:	b508      	push	{r3, lr}
    blowFuse(EC2EN_FUSE);
   8084e:	2001      	movs	r0, #1
   80850:	4b01      	ldr	r3, [pc, #4]	; (80858 <write_ec2en_fuse+0xc>)
   80852:	4798      	blx	r3
}
   80854:	bd08      	pop	{r3, pc}
   80856:	bf00      	nop
   80858:	00080ba5 	.word	0x00080ba5

0008085c <checkSecurityMode2>:
/*! \fn     checkSecurityMode2(void)
*   \brief  Check that the smartcard is in mode two by trying to write his manufacturer zone
*   \return Success status
*/
RET_TYPE checkSecurityMode2(void)
{
   8085c:	b510      	push	{r4, lr}
   8085e:	b082      	sub	sp, #8
    uint16_t manZoneRead, temp_uint;
    
    // Read manufacturer zone, set temp_uint to its opposite
    readManufacturerZone((uint8_t*)&manZoneRead);
   80860:	f10d 0006 	add.w	r0, sp, #6
   80864:	4c0b      	ldr	r4, [pc, #44]	; (80894 <checkSecurityMode2+0x38>)
   80866:	47a0      	blx	r4
    temp_uint = ~manZoneRead;
   80868:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8086c:	43db      	mvns	r3, r3
   8086e:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    // Perform test write
    writeManufacturerZone((uint8_t*)&temp_uint);
   80872:	a801      	add	r0, sp, #4
   80874:	4b08      	ldr	r3, [pc, #32]	; (80898 <checkSecurityMode2+0x3c>)
   80876:	4798      	blx	r3
    readManufacturerZone((uint8_t*)&manZoneRead);
   80878:	f10d 0006 	add.w	r0, sp, #6
   8087c:	47a0      	blx	r4
    
    if (temp_uint != manZoneRead)
   8087e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   80882:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    } 
    else
    {
        return RETURN_NOK;
    }
}
   80886:	4298      	cmp	r0, r3
   80888:	f04f 30ff 	mov.w	r0, #4294967295
   8088c:	bf18      	it	ne
   8088e:	2000      	movne	r0, #0
   80890:	b002      	add	sp, #8
   80892:	bd10      	pop	{r4, pc}
   80894:	00080801 	.word	0x00080801
   80898:	00080819 	.word	0x00080819

0008089c <writeSecurityCode>:
/*! \fn     writeSecurityCode(uint16_t* code)
*   \brief  Write a new security code (security mode 1&2 - Authenticated!)
*   \param  code  The pin code
*/
void writeSecurityCode(volatile uint16_t* code)
{
   8089c:	b510      	push	{r4, lr}
   8089e:	4604      	mov	r4, r0
    *code = swap16(*code);
   808a0:	8803      	ldrh	r3, [r0, #0]
   808a2:	8802      	ldrh	r2, [r0, #0]
   808a4:	b292      	uxth	r2, r2
   808a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808ae:	b29b      	uxth	r3, r3
   808b0:	8003      	strh	r3, [r0, #0]
    writeSMC(80, 16, (uint8_t*)code);
   808b2:	4602      	mov	r2, r0
   808b4:	2110      	movs	r1, #16
   808b6:	2050      	movs	r0, #80	; 0x50
   808b8:	4b05      	ldr	r3, [pc, #20]	; (808d0 <writeSecurityCode+0x34>)
   808ba:	4798      	blx	r3
    *code = swap16(*code);
   808bc:	8823      	ldrh	r3, [r4, #0]
   808be:	8822      	ldrh	r2, [r4, #0]
   808c0:	b292      	uxth	r2, r2
   808c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808ca:	b29b      	uxth	r3, r3
   808cc:	8023      	strh	r3, [r4, #0]
}
   808ce:	bd10      	pop	{r4, pc}
   808d0:	00080d8d 	.word	0x00080d8d

000808d4 <resetBlankCard>:
{
   808d4:	b500      	push	{lr}
   808d6:	b083      	sub	sp, #12
    uint16_t default_pin = SMARTCARD_FACTORY_PIN;
   808d8:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   808dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint8_t data_buffer[2] = {0xFF, 0xFF};
   808e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   808e4:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeSMC(1441, 1, data_buffer);
   808e8:	aa01      	add	r2, sp, #4
   808ea:	2101      	movs	r1, #1
   808ec:	f240 50a1 	movw	r0, #1441	; 0x5a1
   808f0:	4b04      	ldr	r3, [pc, #16]	; (80904 <resetBlankCard+0x30>)
   808f2:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   808f4:	f10d 0006 	add.w	r0, sp, #6
   808f8:	4b03      	ldr	r3, [pc, #12]	; (80908 <resetBlankCard+0x34>)
   808fa:	4798      	blx	r3
}
   808fc:	b003      	add	sp, #12
   808fe:	f85d fb04 	ldr.w	pc, [sp], #4
   80902:	bf00      	nop
   80904:	00080d8d 	.word	0x00080d8d
   80908:	0008089d 	.word	0x0008089d

0008090c <setAuthenticatedReadWriteAccessToZone1and2>:

/*! \fn     setAuthenticatedReadWriteAccessToZone1and2(void)
*   \brief  Function called to only allow reads and writes to the application zone 1 & 2 when authenticated
*/
void setAuthenticatedReadWriteAccessToZone1and2(void)
{
   8090c:	b510      	push	{r4, lr}
   8090e:	b082      	sub	sp, #8
    uint8_t temp_buffer[2] = {0x80, 0x00};
   80910:	2380      	movs	r3, #128	; 0x80
   80912:	f8ad 3004 	strh.w	r3, [sp, #4]
    // Set P1 to 1 to allow write, remove R1 to prevent non authenticated reads
    writeSMC(176, 16, temp_buffer);
   80916:	aa01      	add	r2, sp, #4
   80918:	2110      	movs	r1, #16
   8091a:	20b0      	movs	r0, #176	; 0xb0
   8091c:	4c04      	ldr	r4, [pc, #16]	; (80930 <setAuthenticatedReadWriteAccessToZone1and2+0x24>)
   8091e:	47a0      	blx	r4
    // Set P2 to 1 to allow write, remove R2 to prevent non authenticated reads
    writeSMC(736, 16, temp_buffer);
   80920:	aa01      	add	r2, sp, #4
   80922:	2110      	movs	r1, #16
   80924:	f44f 7038 	mov.w	r0, #736	; 0x2e0
   80928:	47a0      	blx	r4
}
   8092a:	b002      	add	sp, #8
   8092c:	bd10      	pop	{r4, pc}
   8092e:	bf00      	nop
   80930:	00080d8d 	.word	0x00080d8d

00080934 <transformBlankCardIntoMooltipass>:
{
   80934:	b510      	push	{r4, lr}
   80936:	b086      	sub	sp, #24
    uint16_t default_pin = SMARTCARD_DEFAULT_PIN;
   80938:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   8093c:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (checkSecurityMode2() == RETURN_OK)
   80940:	4b13      	ldr	r3, [pc, #76]	; (80990 <transformBlankCardIntoMooltipass+0x5c>)
   80942:	4798      	blx	r3
   80944:	b300      	cbz	r0, 80988 <transformBlankCardIntoMooltipass+0x54>
    resetBlankCard();
   80946:	4b13      	ldr	r3, [pc, #76]	; (80994 <transformBlankCardIntoMooltipass+0x60>)
   80948:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   8094a:	f10d 0002 	add.w	r0, sp, #2
   8094e:	4b12      	ldr	r3, [pc, #72]	; (80998 <transformBlankCardIntoMooltipass+0x64>)
   80950:	4798      	blx	r3
    strcpy((char*)temp_buffer, "limpkin");
   80952:	ac01      	add	r4, sp, #4
   80954:	4b11      	ldr	r3, [pc, #68]	; (8099c <transformBlankCardIntoMooltipass+0x68>)
   80956:	e893 0003 	ldmia.w	r3, {r0, r1}
   8095a:	e884 0003 	stmia.w	r4, {r0, r1}
    writeIssuerZone(temp_buffer);
   8095e:	4620      	mov	r0, r4
   80960:	4b0f      	ldr	r3, [pc, #60]	; (809a0 <transformBlankCardIntoMooltipass+0x6c>)
   80962:	4798      	blx	r3
    *temp_buf16 = swap16(2014);
   80964:	f64d 6307 	movw	r3, #56839	; 0xde07
   80968:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeManufacturerZone(temp_buffer);
   8096c:	4620      	mov	r0, r4
   8096e:	4b0d      	ldr	r3, [pc, #52]	; (809a4 <transformBlankCardIntoMooltipass+0x70>)
   80970:	4798      	blx	r3
    setAuthenticatedReadWriteAccessToZone1and2();
   80972:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <transformBlankCardIntoMooltipass+0x74>)
   80974:	4798      	blx	r3
    writeManufacturerFuse();
   80976:	4b0d      	ldr	r3, [pc, #52]	; (809ac <transformBlankCardIntoMooltipass+0x78>)
   80978:	4798      	blx	r3
    write_ec2en_fuse();
   8097a:	4b0d      	ldr	r3, [pc, #52]	; (809b0 <transformBlankCardIntoMooltipass+0x7c>)
   8097c:	4798      	blx	r3
    write_issuers_fuse();
   8097e:	4b0d      	ldr	r3, [pc, #52]	; (809b4 <transformBlankCardIntoMooltipass+0x80>)
   80980:	4798      	blx	r3
    return RETURN_OK;
   80982:	2000      	movs	r0, #0
}
   80984:	b006      	add	sp, #24
   80986:	bd10      	pop	{r4, pc}
        return RETURN_NOK;
   80988:	f04f 30ff 	mov.w	r0, #4294967295
   8098c:	e7fa      	b.n	80984 <transformBlankCardIntoMooltipass+0x50>
   8098e:	bf00      	nop
   80990:	0008085d 	.word	0x0008085d
   80994:	000808d5 	.word	0x000808d5
   80998:	0008089d 	.word	0x0008089d
   8099c:	0008e3b0 	.word	0x0008e3b0
   809a0:	000807a9 	.word	0x000807a9
   809a4:	00080819 	.word	0x00080819
   809a8:	0008090d 	.word	0x0008090d
   809ac:	0008082d 	.word	0x0008082d
   809b0:	0008084d 	.word	0x0008084d
   809b4:	0008083d 	.word	0x0008083d

000809b8 <getNumberOfSecurityCodeTriesLeft>:
/*! \fn     getNumberOfSecurityCodeTriesLeft(void)
*   \brief  Get the number of security code tries left
*   \return Number of tries left
*/
uint8_t getNumberOfSecurityCodeTriesLeft(void)
{
   809b8:	b500      	push	{lr}
   809ba:	b083      	sub	sp, #12
    uint8_t temp_buffer[2];
    uint8_t return_val = 0;
    uint8_t i;

    readSecurityCodeAttemptsCounters(temp_buffer);
   809bc:	a801      	add	r0, sp, #4
   809be:	4b09      	ldr	r3, [pc, #36]	; (809e4 <getNumberOfSecurityCodeTriesLeft+0x2c>)
   809c0:	4798      	blx	r3
    for(i = 0; i < 4; i++)
    {
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   809c6:	2304      	movs	r3, #4
    uint8_t return_val = 0;
   809c8:	2000      	movs	r0, #0
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809ca:	fa41 f203 	asr.w	r2, r1, r3
   809ce:	f012 0f01 	tst.w	r2, #1
        {
            return_val++;
   809d2:	bf1c      	itt	ne
   809d4:	3001      	addne	r0, #1
   809d6:	b2c0      	uxtbne	r0, r0
    for(i = 0; i < 4; i++)
   809d8:	3301      	adds	r3, #1
   809da:	2b08      	cmp	r3, #8
   809dc:	d1f5      	bne.n	809ca <getNumberOfSecurityCodeTriesLeft+0x12>
        }
    }

    return return_val;
}
   809de:	b003      	add	sp, #12
   809e0:	f85d fb04 	ldr.w	pc, [sp], #4
   809e4:	000807bd 	.word	0x000807bd

000809e8 <smartcardHPulseDelay>:

/*! \fn     smartcardHPulseDelay(void)
*   \brief  2us half pulse delay, specified by datasheet (min 3.3us/2)
*/
void smartcardHPulseDelay(void)
{
   809e8:	b508      	push	{r3, lr}
    delay_us(2);
   809ea:	200e      	movs	r0, #14
   809ec:	4b01      	ldr	r3, [pc, #4]	; (809f4 <smartcardHPulseDelay+0xc>)
   809ee:	4798      	blx	r3
}
   809f0:	bd08      	pop	{r3, pc}
   809f2:	bf00      	nop
   809f4:	20000089 	.word	0x20000089

000809f8 <smartcardPowerDelay>:

/*! \fn     smartcardPowerDelay(void)
*   \brief  Delay to let the card come online/offline
*/
void smartcardPowerDelay(void)
{
   809f8:	b508      	push	{r3, lr}
    delay_ms(130);
   809fa:	4802      	ldr	r0, [pc, #8]	; (80a04 <smartcardPowerDelay+0xc>)
   809fc:	4b02      	ldr	r3, [pc, #8]	; (80a08 <smartcardPowerDelay+0x10>)
   809fe:	4798      	blx	r3
}
   80a00:	bd08      	pop	{r3, pc}
   80a02:	bf00      	nop
   80a04:	000d9a25 	.word	0x000d9a25
   80a08:	20000089 	.word	0x20000089

00080a0c <clockPulseSMC>:

/*! \fn     clockPulseSMC(void)
*   \brief  Send a 4us H->L clock pulse (datasheet: min 3.3us)
*/
void clockPulseSMC(void)
{
   80a0c:	b570      	push	{r4, r5, r6, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a0e:	4d04      	ldr	r5, [pc, #16]	; (80a20 <clockPulseSMC+0x14>)
   80a10:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a14:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a16:	4c03      	ldr	r4, [pc, #12]	; (80a24 <clockPulseSMC+0x18>)
   80a18:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a1a:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a1c:	47a0      	blx	r4
}
   80a1e:	bd70      	pop	{r4, r5, r6, pc}
   80a20:	400e0c00 	.word	0x400e0c00
   80a24:	000809e9 	.word	0x000809e9

00080a28 <invertedClockPulseSMC>:

/*! \fn     invertedClockPulseSMC(void)
*   \brief  Send a 4us L->H clock pulse (datasheet: min 3.3us)
*/
void invertedClockPulseSMC(void)
{
   80a28:	b570      	push	{r4, r5, r6, lr}
   80a2a:	4d04      	ldr	r5, [pc, #16]	; (80a3c <invertedClockPulseSMC+0x14>)
   80a2c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a30:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a32:	4c03      	ldr	r4, [pc, #12]	; (80a40 <invertedClockPulseSMC+0x18>)
   80a34:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a36:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a38:	47a0      	blx	r4
}
   80a3a:	bd70      	pop	{r4, r5, r6, pc}
   80a3c:	400e0c00 	.word	0x400e0c00
   80a40:	000809e9 	.word	0x000809e9

00080a44 <clearPgmRstSignals>:

/*! \fn     clearPgmRstSignals(void)
*   \brief  Clear PGM / RST signal for normal operation mode
*/
void clearPgmRstSignals(void)
{
   80a44:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a46:	4b04      	ldr	r3, [pc, #16]	; (80a58 <clearPgmRstSignals+0x14>)
   80a48:	2220      	movs	r2, #32
   80a4a:	635a      	str	r2, [r3, #52]	; 0x34
   80a4c:	2208      	movs	r2, #8
   80a4e:	635a      	str	r2, [r3, #52]	; 0x34
	scard_pgm_low();
	scard_rst_low();
    smartcardHPulseDelay();
   80a50:	4c02      	ldr	r4, [pc, #8]	; (80a5c <clearPgmRstSignals+0x18>)
   80a52:	47a0      	blx	r4
	smartcardHPulseDelay();
   80a54:	47a0      	blx	r4
}
   80a56:	bd10      	pop	{r4, pc}
   80a58:	400e0c00 	.word	0x400e0c00
   80a5c:	000809e9 	.word	0x000809e9

00080a60 <setPgmRstSignals>:

/*! \fn     setPgmRstSignals(void)
*   \brief  Set PGM / RST signal for standby mode
*/
void setPgmRstSignals(void)
{
   80a60:	b508      	push	{r3, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <setPgmRstSignals+0x14>)
   80a64:	2208      	movs	r2, #8
   80a66:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a68:	2220      	movs	r2, #32
   80a6a:	635a      	str	r2, [r3, #52]	; 0x34
	scard_rst_high();
	scard_pgm_low();
    smartcardHPulseDelay();
   80a6c:	4b02      	ldr	r3, [pc, #8]	; (80a78 <setPgmRstSignals+0x18>)
   80a6e:	4798      	blx	r3
}
   80a70:	bd08      	pop	{r3, pc}
   80a72:	bf00      	nop
   80a74:	400e0c00 	.word	0x400e0c00
   80a78:	000809e9 	.word	0x000809e9

00080a7c <performLowLevelWriteNErase>:
/*! \fn     performLowLevelWriteNErase(uint8_t is_write)
*   \brief  Perform a write or erase operation on the smart card
*   \param  is_write    Boolean to indicate if it is a write
*/
void performLowLevelWriteNErase(uint8_t is_write)
{
   80a7c:	b570      	push	{r4, r5, r6, lr}
   80a7e:	4604      	mov	r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a80:	4b11      	ldr	r3, [pc, #68]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a82:	2220      	movs	r2, #32
   80a84:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set programming control signal */
	scard_pgm_high();
    smartcardHPulseDelay();
   80a86:	4b11      	ldr	r3, [pc, #68]	; (80acc <performLowLevelWriteNErase+0x50>)
   80a88:	4798      	blx	r3

    /* Set data according to write / erase */
    if (is_write != FALSE)
   80a8a:	b1bc      	cbz	r4, 80abc <performLowLevelWriteNErase+0x40>
   80a8c:	4b0e      	ldr	r3, [pc, #56]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a8e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80a92:	631a      	str	r2, [r3, #48]	; 0x30
    }
    else
    {
		scard_io_low();
    }
    smartcardHPulseDelay();
   80a94:	4c0d      	ldr	r4, [pc, #52]	; (80acc <performLowLevelWriteNErase+0x50>)
   80a96:	47a0      	blx	r4
   80a98:	4d0b      	ldr	r5, [pc, #44]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a9a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a9e:	632e      	str	r6, [r5, #48]	; 0x30

    /* Set clock */
	scard_sck_high();
    smartcardHPulseDelay();
   80aa0:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80aa2:	2320      	movs	r3, #32
   80aa4:	636b      	str	r3, [r5, #52]	; 0x34
    delay_ms(4);
   80aa6:	f646 3025 	movw	r0, #27429	; 0x6b25
   80aaa:	4b09      	ldr	r3, [pc, #36]	; (80ad0 <performLowLevelWriteNErase+0x54>)
   80aac:	4798      	blx	r3
   80aae:	636e      	str	r6, [r5, #52]	; 0x34
    scard_pgm_low();
    smartcardTchpDelay();

    /* Release clock */
    scard_sck_low();
    smartcardHPulseDelay();
   80ab0:	47a0      	blx	r4
   80ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ab6:	636b      	str	r3, [r5, #52]	; 0x34

    /* Release data */
    scard_io_low();
    smartcardHPulseDelay();
   80ab8:	47a0      	blx	r4
}
   80aba:	bd70      	pop	{r4, r5, r6, pc}
   80abc:	4b02      	ldr	r3, [pc, #8]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80abe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80ac2:	635a      	str	r2, [r3, #52]	; 0x34
   80ac4:	e7e6      	b.n	80a94 <performLowLevelWriteNErase+0x18>
   80ac6:	bf00      	nop
   80ac8:	400e0c00 	.word	0x400e0c00
   80acc:	000809e9 	.word	0x000809e9
   80ad0:	20000089 	.word	0x20000089

00080ad4 <setSPIModeSMC>:

/*! \fn     setSPIModeSMC(void)
*   \brief  Activate SPI controller for the SMC
*/
void setSPIModeSMC(void)
{
   80ad4:	b530      	push	{r4, r5, lr}
   80ad6:	b085      	sub	sp, #20
	usart_spi_opt_t opts;
	
	opts.baudrate = 125000;
   80ad8:	4b12      	ldr	r3, [pc, #72]	; (80b24 <setSPIModeSMC+0x50>)
   80ada:	9300      	str	r3, [sp, #0]
	opts.char_length = US_MR_CHRL_8_BIT;
   80adc:	23c0      	movs	r3, #192	; 0xc0
   80ade:	9301      	str	r3, [sp, #4]
	opts.channel_mode = US_MR_CHMODE_NORMAL;
   80ae0:	2300      	movs	r3, #0
   80ae2:	9303      	str	r3, [sp, #12]
	opts.spi_mode = SPI_MODE_0;
   80ae4:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80ae6:	200f      	movs	r0, #15
   80ae8:	4b0f      	ldr	r3, [pc, #60]	; (80b28 <setSPIModeSMC+0x54>)
   80aea:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	usart_init_spi_master(SCARD_USART, &opts ,sysclk_get_cpu_hz());
   80aec:	4c0f      	ldr	r4, [pc, #60]	; (80b2c <setSPIModeSMC+0x58>)
   80aee:	4a10      	ldr	r2, [pc, #64]	; (80b30 <setSPIModeSMC+0x5c>)
   80af0:	4669      	mov	r1, sp
   80af2:	4620      	mov	r0, r4
   80af4:	4b0f      	ldr	r3, [pc, #60]	; (80b34 <setSPIModeSMC+0x60>)
   80af6:	4798      	blx	r3
	gpio_configure_pin(SCARD_IOTX_IDX, PIO_PERIPH_A);
   80af8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80afc:	2016      	movs	r0, #22
   80afe:	4d0e      	ldr	r5, [pc, #56]	; (80b38 <setSPIModeSMC+0x64>)
   80b00:	47a8      	blx	r5
	gpio_configure_pin(SCARD_IORX_IDX, PIO_PERIPH_A);
   80b02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b06:	2017      	movs	r0, #23
   80b08:	47a8      	blx	r5
	gpio_configure_pin(SCARD_SCK_IDX, SCK_PERIPH);
   80b0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b0e:	2019      	movs	r0, #25
   80b10:	47a8      	blx	r5
	
	usart_enable_rx(SCARD_USART);
   80b12:	4620      	mov	r0, r4
   80b14:	4b09      	ldr	r3, [pc, #36]	; (80b3c <setSPIModeSMC+0x68>)
   80b16:	4798      	blx	r3
	usart_enable_tx(SCARD_USART);
   80b18:	4620      	mov	r0, r4
   80b1a:	4b09      	ldr	r3, [pc, #36]	; (80b40 <setSPIModeSMC+0x6c>)
   80b1c:	4798      	blx	r3
	
}
   80b1e:	b005      	add	sp, #20
   80b20:	bd30      	pop	{r4, r5, pc}
   80b22:	bf00      	nop
   80b24:	0001e848 	.word	0x0001e848
   80b28:	00085531 	.word	0x00085531
   80b2c:	40098000 	.word	0x40098000
   80b30:	05b8d800 	.word	0x05b8d800
   80b34:	00086cd9 	.word	0x00086cd9
   80b38:	000851ed 	.word	0x000851ed
   80b3c:	00086e4d 	.word	0x00086e4d
   80b40:	00086e3d 	.word	0x00086e3d

00080b44 <setBBModeAndPgmRstSMC>:

/*! \fn     setBBModeAndPgmRstSMC(void)
*   \brief  Switch to big banging, and clear pgm/rst signal for normal operation
*/
void setBBModeAndPgmRstSMC(void)
{
   80b44:	b510      	push	{r4, lr}
    /* Deactivate SPI port */
    usart_disable_rx(SCARD_USART);
   80b46:	4c10      	ldr	r4, [pc, #64]	; (80b88 <setBBModeAndPgmRstSMC+0x44>)
   80b48:	4620      	mov	r0, r4
   80b4a:	4b10      	ldr	r3, [pc, #64]	; (80b8c <setBBModeAndPgmRstSMC+0x48>)
   80b4c:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80b4e:	4620      	mov	r0, r4
   80b50:	4b0f      	ldr	r3, [pc, #60]	; (80b90 <setBBModeAndPgmRstSMC+0x4c>)
   80b52:	4798      	blx	r3

    /* Clock & data low */
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b54:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b58:	2016      	movs	r0, #22
   80b5a:	4c0e      	ldr	r4, [pc, #56]	; (80b94 <setBBModeAndPgmRstSMC+0x50>)
   80b5c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80b5e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80b62:	2017      	movs	r0, #23
   80b64:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b66:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b6a:	2019      	movs	r0, #25
   80b6c:	47a0      	blx	r4
   80b6e:	4b0a      	ldr	r3, [pc, #40]	; (80b98 <setBBModeAndPgmRstSMC+0x54>)
   80b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80b74:	635a      	str	r2, [r3, #52]	; 0x34
   80b76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80b7a:	635a      	str	r2, [r3, #52]	; 0x34
    scard_sck_low();
    scard_io_low();
	
    smartcardHPulseDelay();
   80b7c:	4b07      	ldr	r3, [pc, #28]	; (80b9c <setBBModeAndPgmRstSMC+0x58>)
   80b7e:	4798      	blx	r3

    /* Clear PGM and RST signals */
    clearPgmRstSignals();
   80b80:	4b07      	ldr	r3, [pc, #28]	; (80ba0 <setBBModeAndPgmRstSMC+0x5c>)
   80b82:	4798      	blx	r3
}
   80b84:	bd10      	pop	{r4, pc}
   80b86:	bf00      	nop
   80b88:	40098000 	.word	0x40098000
   80b8c:	00086e53 	.word	0x00086e53
   80b90:	00086e43 	.word	0x00086e43
   80b94:	000851ed 	.word	0x000851ed
   80b98:	400e0c00 	.word	0x400e0c00
   80b9c:	000809e9 	.word	0x000809e9
   80ba0:	00080a45 	.word	0x00080a45

00080ba4 <blowFuse>:
/*! \fn     blowFuse(uint8_t fuse_name)
*   \brief  Blow the manufacturer or issuer fuse
*   \param  fuse_name    Which fuse to blow
*/
void blowFuse(uint8_t fuse_name)
{
   80ba4:	b570      	push	{r4, r5, r6, lr}
    uint16_t i;

    /* Set the index to write */
    if (fuse_name == MAN_FUSE)
   80ba6:	b130      	cbz	r0, 80bb6 <blowFuse+0x12>
    {
        i = 1460;
    }
    else if (fuse_name == ISSUER_FUSE)
   80ba8:	2802      	cmp	r0, #2
   80baa:	d01d      	beq.n	80be8 <blowFuse+0x44>
    {
        i = 1560;
    }
    else if (fuse_name == EC2EN_FUSE)
   80bac:	2801      	cmp	r0, #1
   80bae:	d01e      	beq.n	80bee <blowFuse+0x4a>
    {
        i = 0;
    }

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80bb0:	4b10      	ldr	r3, [pc, #64]	; (80bf4 <blowFuse+0x50>)
   80bb2:	4798      	blx	r3

    /* Get to the good index */
    while(i--)clockPulseSMC();
   80bb4:	e00d      	b.n	80bd2 <blowFuse+0x2e>
        i = 1460;
   80bb6:	f240 54b4 	movw	r4, #1460	; 0x5b4
    setBBModeAndPgmRstSMC();
   80bba:	4b0e      	ldr	r3, [pc, #56]	; (80bf4 <blowFuse+0x50>)
   80bbc:	4798      	blx	r3
    while(i--)clockPulseSMC();
   80bbe:	3c01      	subs	r4, #1
   80bc0:	b2a4      	uxth	r4, r4
   80bc2:	4e0d      	ldr	r6, [pc, #52]	; (80bf8 <blowFuse+0x54>)
   80bc4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   80bc8:	47b0      	blx	r6
   80bca:	3c01      	subs	r4, #1
   80bcc:	b2a4      	uxth	r4, r4
   80bce:	42ac      	cmp	r4, r5
   80bd0:	d1fa      	bne.n	80bc8 <blowFuse+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80bd2:	4b0a      	ldr	r3, [pc, #40]	; (80bfc <blowFuse+0x58>)
   80bd4:	2208      	movs	r2, #8
   80bd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set RST signal */
	scard_rst_high();

    /* Perform a write */
    performLowLevelWriteNErase(TRUE);
   80bd8:	2001      	movs	r0, #1
   80bda:	4b09      	ldr	r3, [pc, #36]	; (80c00 <blowFuse+0x5c>)
   80bdc:	4798      	blx	r3

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80bde:	4b09      	ldr	r3, [pc, #36]	; (80c04 <blowFuse+0x60>)
   80be0:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80be2:	4b09      	ldr	r3, [pc, #36]	; (80c08 <blowFuse+0x64>)
   80be4:	4798      	blx	r3
}
   80be6:	bd70      	pop	{r4, r5, r6, pc}
        i = 1560;
   80be8:	f44f 64c3 	mov.w	r4, #1560	; 0x618
   80bec:	e7e5      	b.n	80bba <blowFuse+0x16>
        i = 1529;
   80bee:	f240 54f9 	movw	r4, #1529	; 0x5f9
   80bf2:	e7e2      	b.n	80bba <blowFuse+0x16>
   80bf4:	00080b45 	.word	0x00080b45
   80bf8:	00080a0d 	.word	0x00080a0d
   80bfc:	400e0c00 	.word	0x400e0c00
   80c00:	00080a7d 	.word	0x00080a7d
   80c04:	00080a61 	.word	0x00080a61
   80c08:	00080ad5 	.word	0x00080ad5

00080c0c <securityValidationSMC>:
*   \brief  Check security code
*   \param  code    The code
*   \return success_status (see card_detect_return_t)
*/
RET_TYPE securityValidationSMC(uint16_t code, uint8_t reset_after_send)
{
   80c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80c10:	4607      	mov	r7, r0
   80c12:	460e      	mov	r6, r1
    RET_TYPE return_val = RETURN_PIN_NOK_0;
    uint8_t temp_bool;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80c14:	4b54      	ldr	r3, [pc, #336]	; (80d68 <securityValidationSMC+0x15c>)
   80c16:	4798      	blx	r3
   80c18:	2450      	movs	r4, #80	; 0x50

    /* Get to the SC */
    for(i = 0; i < 80; i++)
        invertedClockPulseSMC();
   80c1a:	4d54      	ldr	r5, [pc, #336]	; (80d6c <securityValidationSMC+0x160>)
   80c1c:	47a8      	blx	r5
    for(i = 0; i < 80; i++)
   80c1e:	3c01      	subs	r4, #1
   80c20:	b2a4      	uxth	r4, r4
   80c22:	2c00      	cmp	r4, #0
   80c24:	d1fa      	bne.n	80c1c <securityValidationSMC+0x10>
   80c26:	4b52      	ldr	r3, [pc, #328]	; (80d70 <securityValidationSMC+0x164>)
   80c28:	2210      	movs	r2, #16
   80c2a:	631a      	str	r2, [r3, #48]	; 0x30

	scard_aux1_high();	

    /* Clock is at high level now, as input must be switched during this time */
    /* Enter the SC */
    smartcardHPulseDelay();
   80c2c:	4b51      	ldr	r3, [pc, #324]	; (80d74 <securityValidationSMC+0x168>)
   80c2e:	4798      	blx	r3
   80c30:	250f      	movs	r5, #15
   80c32:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80d70 <securityValidationSMC+0x164>
        }
        else
        {
            scard_io_high();
        }
        smartcardHPulseDelay();
   80c36:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80d74 <securityValidationSMC+0x168>

        /* Inverted clock pulse */
        invertedClockPulseSMC();
   80c3a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80d6c <securityValidationSMC+0x160>
        if (((code >> (15-i)) & 0x0001) != 0x0000)
   80c3e:	fa47 f305 	asr.w	r3, r7, r5
   80c42:	f013 0f01 	tst.w	r3, #1
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c4a:	bf14      	ite	ne
   80c4c:	f8ca 3034 	strne.w	r3, [sl, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c50:	f8ca 3030 	streq.w	r3, [sl, #48]	; 0x30
        smartcardHPulseDelay();
   80c54:	47c8      	blx	r9
        invertedClockPulseSMC();
   80c56:	47c0      	blx	r8
    for(i = 0; i < 16; i++)
   80c58:	3d01      	subs	r5, #1
   80c5a:	f1b5 3fff 	cmp.w	r5, #4294967295
   80c5e:	d1ee      	bne.n	80c3e <securityValidationSMC+0x32>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c60:	4f43      	ldr	r7, [pc, #268]	; (80d70 <securityValidationSMC+0x164>)
   80c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80c66:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   80c68:	4d42      	ldr	r5, [pc, #264]	; (80d74 <securityValidationSMC+0x168>)
   80c6a:	47a8      	blx	r5
	smartcardHPulseDelay();
   80c6c:	47a8      	blx	r5
   80c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c72:	637b      	str	r3, [r7, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();	
   80c74:	47a8      	blx	r5
	smartcardHPulseDelay();
   80c76:	47a8      	blx	r5
	
	if (reset_after_send == 1){
   80c78:	2e01      	cmp	r6, #1
   80c7a:	d002      	beq.n	80c82 <securityValidationSMC+0x76>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80c7c:	463d      	mov	r5, r7
            temp_bool = FALSE;
        }
        else
        {
            /* Clock pulse */
            clockPulseSMC();
   80c7e:	4f3e      	ldr	r7, [pc, #248]	; (80d78 <securityValidationSMC+0x16c>)
   80c80:	e051      	b.n	80d26 <securityValidationSMC+0x11a>
		delay_us(10);
   80c82:	2045      	movs	r0, #69	; 0x45
   80c84:	4b3d      	ldr	r3, [pc, #244]	; (80d7c <securityValidationSMC+0x170>)
   80c86:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c88:	4b39      	ldr	r3, [pc, #228]	; (80d70 <securityValidationSMC+0x164>)
   80c8a:	2210      	movs	r2, #16
   80c8c:	635a      	str	r2, [r3, #52]	; 0x34
		setPgmRstSignals();
   80c8e:	4b3c      	ldr	r3, [pc, #240]	; (80d80 <securityValidationSMC+0x174>)
   80c90:	4798      	blx	r3
		setSPIModeSMC();
   80c92:	4b3c      	ldr	r3, [pc, #240]	; (80d84 <securityValidationSMC+0x178>)
   80c94:	4798      	blx	r3
		return RETURN_PIN_NOK_0;
   80c96:	2520      	movs	r5, #32
   80c98:	e060      	b.n	80d5c <securityValidationSMC+0x150>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c9a:	4c35      	ldr	r4, [pc, #212]	; (80d70 <securityValidationSMC+0x164>)
   80c9c:	2520      	movs	r5, #32
   80c9e:	6325      	str	r5, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80ca0:	4e34      	ldr	r6, [pc, #208]	; (80d74 <securityValidationSMC+0x168>)
   80ca2:	47b0      	blx	r6
   80ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ca8:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80caa:	47b0      	blx	r6
   80cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80cb0:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cb2:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cb4:	2310      	movs	r3, #16
   80cb6:	6363      	str	r3, [r4, #52]	; 0x34
				setPgmRstSignals();
   80cb8:	4b31      	ldr	r3, [pc, #196]	; (80d80 <securityValidationSMC+0x174>)
   80cba:	4798      	blx	r3
				setSPIModeSMC();
   80cbc:	4b31      	ldr	r3, [pc, #196]	; (80d84 <securityValidationSMC+0x178>)
   80cbe:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80cc0:	e04c      	b.n	80d5c <securityValidationSMC+0x150>
			if (reset_after_send == 3){			
   80cc2:	2e03      	cmp	r6, #3
   80cc4:	d00f      	beq.n	80ce6 <securityValidationSMC+0xda>
            performLowLevelWriteNErase(FALSE);
   80cc6:	2000      	movs	r0, #0
   80cc8:	4b2f      	ldr	r3, [pc, #188]	; (80d88 <securityValidationSMC+0x17c>)
   80cca:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80ccc:	4b28      	ldr	r3, [pc, #160]	; (80d70 <securityValidationSMC+0x164>)
   80cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            if (scard_io_read())
   80cd0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80cd4:	d110      	bne.n	80cf8 <securityValidationSMC+0xec>
                if (i == 0)
   80cd6:	b1ec      	cbz	r4, 80d14 <securityValidationSMC+0x108>
                else if (i == 1)
   80cd8:	2c01      	cmp	r4, #1
   80cda:	d01d      	beq.n	80d18 <securityValidationSMC+0x10c>
                else if (i == 2)
   80cdc:	2c02      	cmp	r4, #2
   80cde:	bf0c      	ite	eq
   80ce0:	2521      	moveq	r5, #33	; 0x21
   80ce2:	2520      	movne	r5, #32
   80ce4:	e009      	b.n	80cfa <securityValidationSMC+0xee>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ce6:	4b22      	ldr	r3, [pc, #136]	; (80d70 <securityValidationSMC+0x164>)
   80ce8:	2210      	movs	r2, #16
   80cea:	635a      	str	r2, [r3, #52]	; 0x34
				setPgmRstSignals();
   80cec:	4b24      	ldr	r3, [pc, #144]	; (80d80 <securityValidationSMC+0x174>)
   80cee:	4798      	blx	r3
				setSPIModeSMC();
   80cf0:	4b24      	ldr	r3, [pc, #144]	; (80d84 <securityValidationSMC+0x178>)
   80cf2:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80cf4:	2520      	movs	r5, #32
   80cf6:	e031      	b.n	80d5c <securityValidationSMC+0x150>
                return_val = RETURN_PIN_OK;
   80cf8:	2524      	movs	r5, #36	; 0x24
            clockPulseSMC();
   80cfa:	4b1f      	ldr	r3, [pc, #124]	; (80d78 <securityValidationSMC+0x16c>)
   80cfc:	4798      	blx	r3
    }

    /* If we couldn't find a spot to write, no tries left */
    if (i == 4)
    {
        return_val = RETURN_PIN_NOK_0;
   80cfe:	2c04      	cmp	r4, #4
   80d00:	bf08      	it	eq
   80d02:	2520      	moveq	r5, #32
   80d04:	4b1a      	ldr	r3, [pc, #104]	; (80d70 <securityValidationSMC+0x164>)
   80d06:	2210      	movs	r2, #16
   80d08:	635a      	str	r2, [r3, #52]	; 0x34


	scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80d0a:	4b1d      	ldr	r3, [pc, #116]	; (80d80 <securityValidationSMC+0x174>)
   80d0c:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80d0e:	4b1d      	ldr	r3, [pc, #116]	; (80d84 <securityValidationSMC+0x178>)
   80d10:	4798      	blx	r3

    return return_val;
   80d12:	e023      	b.n	80d5c <securityValidationSMC+0x150>
                    return_val = RETURN_PIN_NOK_3;
   80d14:	2523      	movs	r5, #35	; 0x23
   80d16:	e7f0      	b.n	80cfa <securityValidationSMC+0xee>
                    return_val = RETURN_PIN_NOK_2;
   80d18:	2522      	movs	r5, #34	; 0x22
   80d1a:	e7ee      	b.n	80cfa <securityValidationSMC+0xee>
            clockPulseSMC();
   80d1c:	47b8      	blx	r7
            i++;
   80d1e:	3401      	adds	r4, #1
   80d20:	b2a4      	uxth	r4, r4
    while((temp_bool == TRUE) && (i < 4))
   80d22:	2c04      	cmp	r4, #4
   80d24:	d01d      	beq.n	80d62 <securityValidationSMC+0x156>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80d26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        if (scard_io_read())
   80d28:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80d2c:	d0f6      	beq.n	80d1c <securityValidationSMC+0x110>
			if (reset_after_send == 2){			
   80d2e:	2e02      	cmp	r6, #2
   80d30:	d0b3      	beq.n	80c9a <securityValidationSMC+0x8e>
            performLowLevelWriteNErase(TRUE);
   80d32:	2001      	movs	r0, #1
   80d34:	4b14      	ldr	r3, [pc, #80]	; (80d88 <securityValidationSMC+0x17c>)
   80d36:	4798      	blx	r3
            while(scard_io_read())
   80d38:	2320      	movs	r3, #32
   80d3a:	490d      	ldr	r1, [pc, #52]	; (80d70 <securityValidationSMC+0x164>)
   80d3c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   80d3e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   80d42:	d0be      	beq.n	80cc2 <securityValidationSMC+0xb6>
				if(timeout == 0)
   80d44:	3b01      	subs	r3, #1
   80d46:	b29b      	uxth	r3, r3
   80d48:	2b00      	cmp	r3, #0
   80d4a:	d1f7      	bne.n	80d3c <securityValidationSMC+0x130>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d4c:	4b08      	ldr	r3, [pc, #32]	; (80d70 <securityValidationSMC+0x164>)
   80d4e:	2210      	movs	r2, #16
   80d50:	635a      	str	r2, [r3, #52]	; 0x34
					setPgmRstSignals();
   80d52:	4b0b      	ldr	r3, [pc, #44]	; (80d80 <securityValidationSMC+0x174>)
   80d54:	4798      	blx	r3
					setSPIModeSMC();
   80d56:	4b0b      	ldr	r3, [pc, #44]	; (80d84 <securityValidationSMC+0x178>)
   80d58:	4798      	blx	r3
					return RETURN_PIN_TIMEOUT;
   80d5a:	2525      	movs	r5, #37	; 0x25
}
   80d5c:	4628      	mov	r0, r5
   80d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return_val = RETURN_PIN_NOK_0;
   80d62:	2520      	movs	r5, #32
   80d64:	e7ce      	b.n	80d04 <securityValidationSMC+0xf8>
   80d66:	bf00      	nop
   80d68:	00080b45 	.word	0x00080b45
   80d6c:	00080a29 	.word	0x00080a29
   80d70:	400e0c00 	.word	0x400e0c00
   80d74:	000809e9 	.word	0x000809e9
   80d78:	00080a0d 	.word	0x00080a0d
   80d7c:	20000089 	.word	0x20000089
   80d80:	00080a61 	.word	0x00080a61
   80d84:	00080ad5 	.word	0x00080ad5
   80d88:	00080a7d 	.word	0x00080a7d

00080d8c <writeSMC>:
*   \param  start_index_bit         Where to start writing bits
*   \param  nb_bits                 Number of bits to write
*   \param  data_to_write           Pointer to the buffer
*/
void writeSMC(uint16_t start_index_bit, uint16_t nb_bits, uint8_t* data_to_write)
{
   80d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d90:	4606      	mov	r6, r0
   80d92:	460f      	mov	r7, r1
   80d94:	4690      	mov	r8, r2
    uint16_t current_written_bit = 0;
    uint8_t masked_bit_to_write = 0;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80d96:	4b2b      	ldr	r3, [pc, #172]	; (80e44 <writeSMC+0xb8>)
   80d98:	4798      	blx	r3

    /* Try to not erase AZ1 if EZ1 is 0xFFFFFFF... and we're writing the first bit of the AZ2 */
    if (start_index_bit >= SMARTCARD_AZ2_BIT_START)
   80d9a:	f5b6 7f38 	cmp.w	r6, #736	; 0x2e0
   80d9e:	d208      	bcs.n	80db2 <writeSMC+0x26>
        }                
    }
    else
    {
        /* Get to the good index, clock pulses */
        for(i = 0; i < start_index_bit; i++)
   80da0:	b31e      	cbz	r6, 80dea <writeSMC+0x5e>
   80da2:	2400      	movs	r4, #0
        {
            clockPulseSMC();
   80da4:	4d28      	ldr	r5, [pc, #160]	; (80e48 <writeSMC+0xbc>)
   80da6:	47a8      	blx	r5
        for(i = 0; i < start_index_bit; i++)
   80da8:	3401      	adds	r4, #1
   80daa:	b2a4      	uxth	r4, r4
   80dac:	42a6      	cmp	r6, r4
   80dae:	d1fa      	bne.n	80da6 <writeSMC+0x1a>
   80db0:	e01b      	b.n	80dea <writeSMC+0x5e>
   80db2:	f240 24df 	movw	r4, #735	; 0x2df
            clockPulseSMC();            
   80db6:	4d24      	ldr	r5, [pc, #144]	; (80e48 <writeSMC+0xbc>)
   80db8:	47a8      	blx	r5
        for(i = 0; i < SMARTCARD_AZ2_BIT_START - 1; i++)
   80dba:	3c01      	subs	r4, #1
   80dbc:	b2a4      	uxth	r4, r4
   80dbe:	2c00      	cmp	r4, #0
   80dc0:	d1fa      	bne.n	80db8 <writeSMC+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80dc2:	4d22      	ldr	r5, [pc, #136]	; (80e4c <writeSMC+0xc0>)
   80dc4:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
   80dc8:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
        clockPulseSMC();
   80dcc:	4b1e      	ldr	r3, [pc, #120]	; (80e48 <writeSMC+0xbc>)
   80dce:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80dd0:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80dd4:	f5a6 7538 	sub.w	r5, r6, #736	; 0x2e0
   80dd8:	2d00      	cmp	r5, #0
   80dda:	dd06      	ble.n	80dea <writeSMC+0x5e>
            clockPulseSMC();            
   80ddc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80e48 <writeSMC+0xbc>
   80de0:	47c8      	blx	r9
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80de2:	3401      	adds	r4, #1
   80de4:	b2a4      	uxth	r4, r4
   80de6:	42ac      	cmp	r4, r5
   80de8:	dbfa      	blt.n	80de0 <writeSMC+0x54>
        }                
    }

    /* Start writing */
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80dea:	b327      	cbz	r7, 80e36 <writeSMC+0xaa>
   80dec:	3f01      	subs	r7, #1
   80dee:	b2bf      	uxth	r7, r7
   80df0:	2500      	movs	r5, #0
    {
        /* If we are at the start of a 16bits word or writing our first bit, erase the word */
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
        {
            performLowLevelWriteNErase(FALSE);
   80df2:	46ab      	mov	fp, r5
   80df4:	f8df a060 	ldr.w	sl, [pc, #96]	; 80e58 <writeSMC+0xcc>
        {
            performLowLevelWriteNErase(TRUE);
        }

        /* Go to next address */
        clockPulseSMC();
   80df8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80e48 <writeSMC+0xbc>
   80dfc:	e010      	b.n	80e20 <writeSMC+0x94>
            performLowLevelWriteNErase(FALSE);
   80dfe:	4658      	mov	r0, fp
   80e00:	47d0      	blx	sl
        masked_bit_to_write = (data_to_write[(current_written_bit>>3)] >> (7 - (current_written_bit & 0x0007))) & 0x01;
   80e02:	08e4      	lsrs	r4, r4, #3
   80e04:	f818 3004 	ldrb.w	r3, [r8, r4]
   80e08:	43ea      	mvns	r2, r5
   80e0a:	f002 0207 	and.w	r2, r2, #7
   80e0e:	4113      	asrs	r3, r2
        if (masked_bit_to_write == 0x00)
   80e10:	f013 0f01 	tst.w	r3, #1
   80e14:	d00c      	beq.n	80e30 <writeSMC+0xa4>
        clockPulseSMC();
   80e16:	47c8      	blx	r9
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80e18:	1c6b      	adds	r3, r5, #1
   80e1a:	42bd      	cmp	r5, r7
   80e1c:	d00b      	beq.n	80e36 <writeSMC+0xaa>
   80e1e:	461d      	mov	r5, r3
   80e20:	b2ac      	uxth	r4, r5
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
   80e22:	19a3      	adds	r3, r4, r6
   80e24:	f013 0f0f 	tst.w	r3, #15
   80e28:	d0e9      	beq.n	80dfe <writeSMC+0x72>
   80e2a:	2c00      	cmp	r4, #0
   80e2c:	d1e9      	bne.n	80e02 <writeSMC+0x76>
   80e2e:	e7e6      	b.n	80dfe <writeSMC+0x72>
            performLowLevelWriteNErase(TRUE);
   80e30:	2001      	movs	r0, #1
   80e32:	47d0      	blx	sl
   80e34:	e7ef      	b.n	80e16 <writeSMC+0x8a>
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80e36:	4b06      	ldr	r3, [pc, #24]	; (80e50 <writeSMC+0xc4>)
   80e38:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80e3a:	4b06      	ldr	r3, [pc, #24]	; (80e54 <writeSMC+0xc8>)
   80e3c:	4798      	blx	r3
}
   80e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e42:	bf00      	nop
   80e44:	00080b45 	.word	0x00080b45
   80e48:	00080a0d 	.word	0x00080a0d
   80e4c:	400e0c00 	.word	0x400e0c00
   80e50:	00080a61 	.word	0x00080a61
   80e54:	00080ad5 	.word	0x00080ad5
   80e58:	00080a7d 	.word	0x00080a7d

00080e5c <readSMC>:
*   \param  start_record_index      The index at which we start recording the answer
*   \param  data_to_receive        Pointer to the buffer
*   \return The buffer
*/
uint8_t* readSMC(uint8_t nb_bytes_total_read, uint8_t start_record_index, uint8_t* data_to_receive)
{
   80e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e60:	b083      	sub	sp, #12
   80e62:	4607      	mov	r7, r0
   80e64:	4688      	mov	r8, r1
   80e66:	4693      	mov	fp, r2
    uint8_t* return_val = data_to_receive;
    uint8_t i;

    /* Set PGM / RST signals for operation */
    clearPgmRstSignals();
   80e68:	4b11      	ldr	r3, [pc, #68]	; (80eb0 <readSMC+0x54>)
   80e6a:	4798      	blx	r3
	
	/* Read */
	uint32_t temp;
    for(i = 0; i < nb_bytes_total_read; i++)
   80e6c:	b1cf      	cbz	r7, 80ea2 <readSMC+0x46>
   80e6e:	465e      	mov	r6, fp
   80e70:	2500      	movs	r5, #0
    {
        /* Start transmission */
		usart_putchar(SCARD_USART, 0x00);
   80e72:	4c10      	ldr	r4, [pc, #64]	; (80eb4 <readSMC+0x58>)
   80e74:	f8df a044 	ldr.w	sl, [pc, #68]	; 80ebc <readSMC+0x60>
        /* Store data in buffer or discard it*/
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
				
		usart_getchar(SCARD_USART, &temp);
   80e78:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80ec0 <readSMC+0x64>
		usart_putchar(SCARD_USART, 0x00);
   80e7c:	2100      	movs	r1, #0
   80e7e:	4620      	mov	r0, r4
   80e80:	47d0      	blx	sl
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
   80e82:	6963      	ldr	r3, [r4, #20]
   80e84:	f013 0f02 	tst.w	r3, #2
   80e88:	d0fb      	beq.n	80e82 <readSMC+0x26>
		usart_getchar(SCARD_USART, &temp);
   80e8a:	a901      	add	r1, sp, #4
   80e8c:	4620      	mov	r0, r4
   80e8e:	47c8      	blx	r9
		
        if (i >= start_record_index)
   80e90:	45a8      	cmp	r8, r5
        {			
			*(data_to_receive++) = (uint8_t)temp;
   80e92:	bf9c      	itt	ls
   80e94:	9b01      	ldrls	r3, [sp, #4]
   80e96:	f806 3b01 	strbls.w	r3, [r6], #1
    for(i = 0; i < nb_bytes_total_read; i++)
   80e9a:	3501      	adds	r5, #1
   80e9c:	b2ed      	uxtb	r5, r5
   80e9e:	42af      	cmp	r7, r5
   80ea0:	d1ec      	bne.n	80e7c <readSMC+0x20>
        }
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80ea2:	4b05      	ldr	r3, [pc, #20]	; (80eb8 <readSMC+0x5c>)
   80ea4:	4798      	blx	r3

    return return_val;
}
   80ea6:	4658      	mov	r0, fp
   80ea8:	b003      	add	sp, #12
   80eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80eae:	bf00      	nop
   80eb0:	00080a45 	.word	0x00080a45
   80eb4:	40098000 	.word	0x40098000
   80eb8:	00080a61 	.word	0x00080a61
   80ebc:	00086e9d 	.word	0x00086e9d
   80ec0:	00086ec7 	.word	0x00086ec7

00080ec4 <firstDetectFunctionSMC>:
/*! \fn     firstDetectFunctionSMC(void)
*   \brief  functions performed once the smart card is detected
*   \return The detection result (see card_detect_return_t)
*/
RET_TYPE firstDetectFunctionSMC(void)
{
   80ec4:	b510      	push	{r4, lr}
   80ec6:	b082      	sub	sp, #8
    uint8_t data_buffer[2];
    uint16_t *data_buf16 = (uint16_t*)data_buffer;
    uint16_t temp_uint;

	/* Fuse pin low */
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ec8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ecc:	2004      	movs	r0, #4
   80ece:	4c27      	ldr	r4, [pc, #156]	; (80f6c <firstDetectFunctionSMC+0xa8>)
   80ed0:	47a0      	blx	r4

    /* Default state: PGM to 0 and RST to 1 */
	gpio_configure_pin(SCARD_PGM_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ed2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ed6:	2005      	movs	r0, #5
   80ed8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   80eda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ede:	2003      	movs	r0, #3
   80ee0:	47a0      	blx	r4
   80ee2:	4b23      	ldr	r3, [pc, #140]	; (80f70 <firstDetectFunctionSMC+0xac>)
   80ee4:	2220      	movs	r2, #32
   80ee6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ee8:	2208      	movs	r2, #8
   80eea:	631a      	str	r2, [r3, #48]	; 0x30
    scard_pgm_low();
	scard_rst_high();

    /* Activate SPI port */
    setSPIModeSMC();
   80eec:	4b21      	ldr	r3, [pc, #132]	; (80f74 <firstDetectFunctionSMC+0xb0>)
   80eee:	4798      	blx	r3
    
    /* Let the card come online */
    smartcardPowerDelay();
   80ef0:	4b21      	ldr	r3, [pc, #132]	; (80f78 <firstDetectFunctionSMC+0xb4>)
   80ef2:	4798      	blx	r3

    /* Check smart card FZ */
    readFabricationZone(data_buffer);
   80ef4:	a801      	add	r0, sp, #4
   80ef6:	4b21      	ldr	r3, [pc, #132]	; (80f7c <firstDetectFunctionSMC+0xb8>)
   80ef8:	4798      	blx	r3
    if ((swap16(*data_buf16)) != SMARTCARD_FABRICATION_ZONE)
   80efa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   80efe:	0213      	lsls	r3, r2, #8
   80f00:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80f04:	b21b      	sxth	r3, r3
   80f06:	f640 720f 	movw	r2, #3855	; 0xf0f
   80f0a:	4293      	cmp	r3, r2
   80f0c:	d002      	beq.n	80f14 <firstDetectFunctionSMC+0x50>
    {
        return RETURN_CARD_NDET;
   80f0e:	2001      	movs	r0, #1
        case 2: return RETURN_CARD_2_TRIES_LEFT;
        case 1: return RETURN_CARD_1_TRIES_LEFT;
        case 0: return RETURN_CARD_0_TRIES_LEFT;
        default: return RETURN_CARD_0_TRIES_LEFT;
    }
}
   80f10:	b002      	add	sp, #8
   80f12:	bd10      	pop	{r4, pc}
    readMemoryTestZone((uint8_t*)&temp_uint);
   80f14:	f10d 0002 	add.w	r0, sp, #2
   80f18:	4c19      	ldr	r4, [pc, #100]	; (80f80 <firstDetectFunctionSMC+0xbc>)
   80f1a:	47a0      	blx	r4
    temp_uint = temp_uint + 5;
   80f1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f20:	3305      	adds	r3, #5
   80f22:	f8ad 3002 	strh.w	r3, [sp, #2]
    writeMemoryTestZone((uint8_t*)&temp_uint);
   80f26:	f10d 0002 	add.w	r0, sp, #2
   80f2a:	4b16      	ldr	r3, [pc, #88]	; (80f84 <firstDetectFunctionSMC+0xc0>)
   80f2c:	4798      	blx	r3
    if (*(uint16_t*)readMemoryTestZone(data_buffer) != temp_uint)
   80f2e:	a801      	add	r0, sp, #4
   80f30:	47a0      	blx	r4
   80f32:	8802      	ldrh	r2, [r0, #0]
   80f34:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f38:	429a      	cmp	r2, r3
   80f3a:	d001      	beq.n	80f40 <firstDetectFunctionSMC+0x7c>
        return RETURN_CARD_TEST_PB;
   80f3c:	2002      	movs	r0, #2
   80f3e:	e7e7      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
    switch(getNumberOfSecurityCodeTriesLeft())
   80f40:	4b11      	ldr	r3, [pc, #68]	; (80f88 <firstDetectFunctionSMC+0xc4>)
   80f42:	4798      	blx	r3
   80f44:	2804      	cmp	r0, #4
   80f46:	d80c      	bhi.n	80f62 <firstDetectFunctionSMC+0x9e>
   80f48:	e8df f000 	tbb	[pc, r0]
   80f4c:	03050709 	.word	0x03050709
   80f50:	0d          	.byte	0x0d
   80f51:	00          	.byte	0x00
   80f52:	2013      	movs	r0, #19
   80f54:	e7dc      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 2: return RETURN_CARD_2_TRIES_LEFT;
   80f56:	2012      	movs	r0, #18
   80f58:	e7da      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 1: return RETURN_CARD_1_TRIES_LEFT;
   80f5a:	2011      	movs	r0, #17
   80f5c:	e7d8      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 0: return RETURN_CARD_0_TRIES_LEFT;
   80f5e:	2010      	movs	r0, #16
   80f60:	e7d6      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        default: return RETURN_CARD_0_TRIES_LEFT;
   80f62:	2010      	movs	r0, #16
   80f64:	e7d4      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 4: return RETURN_CARD_4_TRIES_LEFT;
   80f66:	2014      	movs	r0, #20
   80f68:	e7d2      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
   80f6a:	bf00      	nop
   80f6c:	000851ed 	.word	0x000851ed
   80f70:	400e0c00 	.word	0x400e0c00
   80f74:	00080ad5 	.word	0x00080ad5
   80f78:	000809f9 	.word	0x000809f9
   80f7c:	00080791 	.word	0x00080791
   80f80:	000807d5 	.word	0x000807d5
   80f84:	000807ed 	.word	0x000807ed
   80f88:	000809b9 	.word	0x000809b9

00080f8c <removeFunctionSMC>:

/*! \fn     removeFunctionSMC(void)
*   \brief  functions performed once the smart card is removed
*/
void removeFunctionSMC(void)
{
   80f8c:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80f8e:	4b12      	ldr	r3, [pc, #72]	; (80fd8 <removeFunctionSMC+0x4c>)
   80f90:	2220      	movs	r2, #32
   80f92:	635a      	str	r2, [r3, #52]	; 0x34
    /* Setup all output pins as tri-state */
    scard_pgm_low();
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80f94:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80f98:	2004      	movs	r0, #4
   80f9a:	4c10      	ldr	r4, [pc, #64]	; (80fdc <removeFunctionSMC+0x50>)
   80f9c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_AUX2_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80f9e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fa2:	2005      	movs	r0, #5
   80fa4:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fa6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80faa:	2003      	movs	r0, #3
   80fac:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fb2:	2016      	movs	r0, #22
   80fb4:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fb6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fba:	2017      	movs	r0, #23
   80fbc:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fbe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fc2:	2019      	movs	r0, #25
   80fc4:	47a0      	blx	r4
	
    /* Deactivate port */
	usart_disable_rx(SCARD_USART);
   80fc6:	4c06      	ldr	r4, [pc, #24]	; (80fe0 <removeFunctionSMC+0x54>)
   80fc8:	4620      	mov	r0, r4
   80fca:	4b06      	ldr	r3, [pc, #24]	; (80fe4 <removeFunctionSMC+0x58>)
   80fcc:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80fce:	4620      	mov	r0, r4
   80fd0:	4b05      	ldr	r3, [pc, #20]	; (80fe8 <removeFunctionSMC+0x5c>)
   80fd2:	4798      	blx	r3
}
   80fd4:	bd10      	pop	{r4, pc}
   80fd6:	bf00      	nop
   80fd8:	400e0c00 	.word	0x400e0c00
   80fdc:	000851ed 	.word	0x000851ed
   80fe0:	40098000 	.word	0x40098000
   80fe4:	00086e53 	.word	0x00086e53
   80fe8:	00086e43 	.word	0x00086e43

00080fec <initPortSMC>:

/*! \fn     initPortSMC(void)
*   \brief  Initialize smart card port
*/
void initPortSMC(void)
{
   80fec:	b508      	push	{r3, lr}
    /* Setup card detection input with pull-up */
	gpio_configure_pin(SCARD_PRESENT_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT | PIO_PULLUP));
   80fee:	4904      	ldr	r1, [pc, #16]	; (81000 <initPortSMC+0x14>)
   80ff0:	2002      	movs	r0, #2
   80ff2:	4b04      	ldr	r3, [pc, #16]	; (81004 <initPortSMC+0x18>)
   80ff4:	4798      	blx	r3
        PORT_SPI_NATIVE &= ~(1 << MISO_SPI_NATIVE);
        PORT_SPI_NATIVE |= (1 << SS_SPI_NATIVE);
    #endif

    /* Set all output pins as tri-state */
    removeFunctionSMC();
   80ff6:	4b04      	ldr	r3, [pc, #16]	; (81008 <initPortSMC+0x1c>)
   80ff8:	4798      	blx	r3
	setPgmRstSignals();
   80ffa:	4b04      	ldr	r3, [pc, #16]	; (8100c <initPortSMC+0x20>)
   80ffc:	4798      	blx	r3
}
   80ffe:	bd08      	pop	{r3, pc}
   81000:	28000001 	.word	0x28000001
   81004:	000851ed 	.word	0x000851ed
   81008:	00080f8d 	.word	0x00080f8d
   8100c:	00080a61 	.word	0x00080a61

00081010 <compareBit>:


// Greg's function
// Walk up to the security code register, enter a bit in the right place, then reset.
void compareBit(uint16_t bit, uint16_t value)
{
   81010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81012:	4605      	mov	r5, r0
   81014:	460f      	mov	r7, r1
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   81016:	4b18      	ldr	r3, [pc, #96]	; (81078 <compareBit+0x68>)
   81018:	4798      	blx	r3

    /* Get to the SC */
    for(i = 0; i < 80 + bit; i++)
   8101a:	354f      	adds	r5, #79	; 0x4f
   8101c:	2400      	movs	r4, #0
		invertedClockPulseSMC();
   8101e:	4e17      	ldr	r6, [pc, #92]	; (8107c <compareBit+0x6c>)
   81020:	47b0      	blx	r6
    for(i = 0; i < 80 + bit; i++)
   81022:	3401      	adds	r4, #1
   81024:	b2a4      	uxth	r4, r4
   81026:	42ac      	cmp	r4, r5
   81028:	ddfa      	ble.n	81020 <compareBit+0x10>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8102a:	4b15      	ldr	r3, [pc, #84]	; (81080 <compareBit+0x70>)
   8102c:	2210      	movs	r2, #16
   8102e:	631a      	str	r2, [r3, #48]	; 0x30

    scard_aux1_high();

    // Clock is at high level now, as input must be switched during this time */
    // Enter test value
    smartcardHPulseDelay();
   81030:	4b14      	ldr	r3, [pc, #80]	; (81084 <compareBit+0x74>)
   81032:	4798      	blx	r3
	if (value)
   81034:	b1df      	cbz	r7, 8106e <compareBit+0x5e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81036:	4b12      	ldr	r3, [pc, #72]	; (81080 <compareBit+0x70>)
   81038:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8103c:	635a      	str	r2, [r3, #52]	; 0x34
    }
    else
    {
	    scard_io_high();
    }
    smartcardHPulseDelay();
   8103e:	4c11      	ldr	r4, [pc, #68]	; (81084 <compareBit+0x74>)
   81040:	47a0      	blx	r4
    invertedClockPulseSMC();
   81042:	4b0e      	ldr	r3, [pc, #56]	; (8107c <compareBit+0x6c>)
   81044:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81046:	4d0e      	ldr	r5, [pc, #56]	; (81080 <compareBit+0x70>)
   81048:	2308      	movs	r3, #8
   8104a:	632b      	str	r3, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8104c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   81050:	636b      	str	r3, [r5, #52]	; 0x34
	// Bring reset high
	scard_rst_high();

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   81052:	47a0      	blx	r4
    smartcardHPulseDelay();
   81054:	47a0      	blx	r4
   81056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   8105a:	636b      	str	r3, [r5, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();
   8105c:	47a0      	blx	r4
    smartcardHPulseDelay();
   8105e:	47a0      	blx	r4
   81060:	2310      	movs	r3, #16
   81062:	636b      	str	r3, [r5, #52]	; 0x34
    
	// Cleanup
    scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   81064:	4b08      	ldr	r3, [pc, #32]	; (81088 <compareBit+0x78>)
   81066:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   81068:	4b08      	ldr	r3, [pc, #32]	; (8108c <compareBit+0x7c>)
   8106a:	4798      	blx	r3

    return;	
   8106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8106e:	4b04      	ldr	r3, [pc, #16]	; (81080 <compareBit+0x70>)
   81070:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81074:	631a      	str	r2, [r3, #48]	; 0x30
   81076:	e7e2      	b.n	8103e <compareBit+0x2e>
   81078:	00080b45 	.word	0x00080b45
   8107c:	00080a29 	.word	0x00080a29
   81080:	400e0c00 	.word	0x400e0c00
   81084:	000809e9 	.word	0x000809e9
   81088:	00080a61 	.word	0x00080a61
   8108c:	00080ad5 	.word	0x00080ad5

00081090 <iso7816_update_crc>:
 * \param crc CRC result.
 *
 * \return CRC value.
 */
static uint16_t iso7816_update_crc(uint8_t data, uint16_t crc)
{
   81090:	b410      	push	{r4}
	uint8_t idx;
	uint16_t tmp = (uint16_t)data << 8;
   81092:	0200      	lsls	r0, r0, #8
   81094:	2308      	movs	r3, #8

	for (idx = 0; idx < 8; idx++) {
		if ((crc ^ tmp) & 0x8000) {
			crc <<= 1;
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   81096:	f241 0421 	movw	r4, #4129	; 0x1021
		if ((crc ^ tmp) & 0x8000) {
   8109a:	ea81 0200 	eor.w	r2, r1, r0
   8109e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
			crc <<= 1;
   810a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   810a6:	b289      	uxth	r1, r1
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   810a8:	bf18      	it	ne
   810aa:	4061      	eorne	r1, r4
		} else {
			crc <<= 1;
		}

		tmp <<= 1;
   810ac:	0040      	lsls	r0, r0, #1
   810ae:	b280      	uxth	r0, r0
   810b0:	3b01      	subs	r3, #1
	for (idx = 0; idx < 8; idx++) {
   810b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   810b6:	d1f0      	bne.n	8109a <iso7816_update_crc+0xa>
	}

	return crc;
}
   810b8:	4608      	mov	r0, r1
   810ba:	bc10      	pop	{r4}
   810bc:	4770      	bx	lr
	...

000810c0 <iso7816_icc_power_off>:
{
   810c0:	b508      	push	{r3, lr}
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   810c2:	4b02      	ldr	r3, [pc, #8]	; (810cc <iso7816_icc_power_off+0xc>)
   810c4:	6818      	ldr	r0, [r3, #0]
   810c6:	4b02      	ldr	r3, [pc, #8]	; (810d0 <iso7816_icc_power_off+0x10>)
   810c8:	4798      	blx	r3
   810ca:	bd08      	pop	{r3, pc}
   810cc:	200023f4 	.word	0x200023f4
   810d0:	000851d1 	.word	0x000851d1

000810d4 <iso7816_get_char>:
 * \param p_char_received Pointer for store the received char.
 *
 * \return 0xff: if timeout else status of US_CSR.
 */
uint32_t iso7816_get_char(Usart* p_usart, uint8_t *p_char_received)
{
   810d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   810d8:	b083      	sub	sp, #12
   810da:	4605      	mov	r5, r0
   810dc:	4689      	mov	r9, r1
	uint32_t ul_data;
	uint32_t ul_status;
	uint32_t ul_timeout = 0;

	if (gs_uc_state == USART_SEND) {		
   810de:	4b1d      	ldr	r3, [pc, #116]	; (81154 <iso7816_get_char+0x80>)
   810e0:	781b      	ldrb	r3, [r3, #0]
   810e2:	b943      	cbnz	r3, 810f6 <iso7816_get_char+0x22>
		while ((usart_get_status(p_usart) & US_CSR_TXEMPTY) ==
   810e4:	4c1c      	ldr	r4, [pc, #112]	; (81158 <iso7816_get_char+0x84>)
   810e6:	4628      	mov	r0, r5
   810e8:	47a0      	blx	r4
   810ea:	f410 7f00 	tst.w	r0, #512	; 0x200
   810ee:	d0fa      	beq.n	810e6 <iso7816_get_char+0x12>
		/*
		usart_reset_status(p_usart);
		usart_reset_iterations(p_usart);
		usart_reset_nack(p_usart);
		*/
		gs_uc_state = USART_RCV;
   810f0:	2201      	movs	r2, #1
   810f2:	4b18      	ldr	r3, [pc, #96]	; (81154 <iso7816_get_char+0x80>)
   810f4:	701a      	strb	r2, [r3, #0]
{
   810f6:	2400      	movs	r4, #0
		//iso7816_icc_power_off();
		//iso7816_icc_power_on();	
	}

	/* Wait USART ready for reception. */
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   810f8:	4e17      	ldr	r6, [pc, #92]	; (81158 <iso7816_get_char+0x84>)
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   810fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81168 <iso7816_get_char+0x94>
   810fe:	4f17      	ldr	r7, [pc, #92]	; (8115c <iso7816_get_char+0x88>)
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   81100:	4628      	mov	r0, r5
   81102:	47b0      	blx	r6
   81104:	f010 0f01 	tst.w	r0, #1
   81108:	d10d      	bne.n	81126 <iso7816_get_char+0x52>
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   8110a:	1c61      	adds	r1, r4, #1
   8110c:	f8d8 3000 	ldr.w	r3, [r8]
   81110:	fba7 2303 	umull	r2, r3, r7, r3
   81114:	0c9b      	lsrs	r3, r3, #18
   81116:	f642 62e0 	movw	r2, #12000	; 0x2ee0
   8111a:	fb02 f303 	mul.w	r3, r2, r3
   8111e:	429c      	cmp	r4, r3
   81120:	d813      	bhi.n	8114a <iso7816_get_char+0x76>
   81122:	460c      	mov	r4, r1
   81124:	e7ec      	b.n	81100 <iso7816_get_char+0x2c>
		}
	}

	/* At least one complete character has been received and US_RHR has not
	 * yet been read. */
	usart_read(p_usart, &ul_data);
   81126:	a901      	add	r1, sp, #4
   81128:	4628      	mov	r0, r5
   8112a:	4b0d      	ldr	r3, [pc, #52]	; (81160 <iso7816_get_char+0x8c>)
   8112c:	4798      	blx	r3
	/* ISO7816 only has 8 bits data. */
	*p_char_received = 0xFF & ul_data;
   8112e:	9b01      	ldr	r3, [sp, #4]
   81130:	f889 3000 	strb.w	r3, [r9]

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   81134:	4628      	mov	r0, r5
   81136:	4b08      	ldr	r3, [pc, #32]	; (81158 <iso7816_get_char+0x84>)
   81138:	4798      	blx	r3
   8113a:	f242 54e0 	movw	r4, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   8113e:	4004      	ands	r4, r0
   81140:	d004      	beq.n	8114c <iso7816_get_char+0x78>
		usart_reset_status(p_usart);
   81142:	4628      	mov	r0, r5
   81144:	4b07      	ldr	r3, [pc, #28]	; (81164 <iso7816_get_char+0x90>)
   81146:	4798      	blx	r3
   81148:	e000      	b.n	8114c <iso7816_get_char+0x78>
			return (0xff);
   8114a:	24ff      	movs	r4, #255	; 0xff
	}

	/* Return status. */
	return (ul_status);
}
   8114c:	4620      	mov	r0, r4
   8114e:	b003      	add	sp, #12
   81150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81154:	200002f0 	.word	0x200002f0
   81158:	00086e65 	.word	0x00086e65
   8115c:	431bde83 	.word	0x431bde83
   81160:	00086eaf 	.word	0x00086eaf
   81164:	00086e69 	.word	0x00086e69
   81168:	200023f0 	.word	0x200023f0

0008116c <iso7816_send_char>:
 * \param uc_char Char to be sent.
 *
 * \return status of US_CSR.
 */
uint32_t iso7816_send_char(Usart* p_usart, uint8_t uc_char)
{
   8116c:	b570      	push	{r4, r5, r6, lr}
   8116e:	4604      	mov	r4, r0
   81170:	460e      	mov	r6, r1
	uint32_t ul_status;

	if (USART_RCV == gs_uc_state) {
   81172:	4b14      	ldr	r3, [pc, #80]	; (811c4 <iso7816_send_char+0x58>)
   81174:	781b      	ldrb	r3, [r3, #0]
   81176:	2b01      	cmp	r3, #1
   81178:	d013      	beq.n	811a2 <iso7816_send_char+0x36>
		usart_reset_nack(p_usart);
		gs_uc_state = USART_SEND;
	}

	/* Wait USART ready for transmit. */
	while ((usart_get_status(p_usart) & US_CSR_TXRDY) == 0) {
   8117a:	4d13      	ldr	r5, [pc, #76]	; (811c8 <iso7816_send_char+0x5c>)
   8117c:	4620      	mov	r0, r4
   8117e:	47a8      	blx	r5
   81180:	f010 0f02 	tst.w	r0, #2
   81184:	d0fa      	beq.n	8117c <iso7816_send_char+0x10>
	}

	/* There is no character in the US_THR, transmit a char. */
	usart_write(p_usart, uc_char);
   81186:	4631      	mov	r1, r6
   81188:	4620      	mov	r0, r4
   8118a:	4b10      	ldr	r3, [pc, #64]	; (811cc <iso7816_send_char+0x60>)
   8118c:	4798      	blx	r3

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   8118e:	4620      	mov	r0, r4
   81190:	4b0d      	ldr	r3, [pc, #52]	; (811c8 <iso7816_send_char+0x5c>)
   81192:	4798      	blx	r3
   81194:	f242 53e0 	movw	r3, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   81198:	ea10 0503 	ands.w	r5, r0, r3
   8119c:	d10d      	bne.n	811ba <iso7816_send_char+0x4e>
		usart_reset_status(p_usart);
	}

	/* Return status. */
	return (ul_status);
}
   8119e:	4628      	mov	r0, r5
   811a0:	bd70      	pop	{r4, r5, r6, pc}
		usart_reset_status(p_usart);
   811a2:	4b0b      	ldr	r3, [pc, #44]	; (811d0 <iso7816_send_char+0x64>)
   811a4:	4798      	blx	r3
		usart_reset_iterations(p_usart);
   811a6:	4620      	mov	r0, r4
   811a8:	4b0a      	ldr	r3, [pc, #40]	; (811d4 <iso7816_send_char+0x68>)
   811aa:	4798      	blx	r3
		usart_reset_nack(p_usart);
   811ac:	4620      	mov	r0, r4
   811ae:	4b0a      	ldr	r3, [pc, #40]	; (811d8 <iso7816_send_char+0x6c>)
   811b0:	4798      	blx	r3
		gs_uc_state = USART_SEND;
   811b2:	2200      	movs	r2, #0
   811b4:	4b03      	ldr	r3, [pc, #12]	; (811c4 <iso7816_send_char+0x58>)
   811b6:	701a      	strb	r2, [r3, #0]
   811b8:	e7df      	b.n	8117a <iso7816_send_char+0xe>
		usart_reset_status(p_usart);
   811ba:	4620      	mov	r0, r4
   811bc:	4b04      	ldr	r3, [pc, #16]	; (811d0 <iso7816_send_char+0x64>)
   811be:	4798      	blx	r3
	return (ul_status);
   811c0:	e7ed      	b.n	8119e <iso7816_send_char+0x32>
   811c2:	bf00      	nop
   811c4:	200002f0 	.word	0x200002f0
   811c8:	00086e65 	.word	0x00086e65
   811cc:	00086e89 	.word	0x00086e89
   811d0:	00086e69 	.word	0x00086e69
   811d4:	00086e71 	.word	0x00086e71
   811d8:	00086e79 	.word	0x00086e79

000811dc <iso7816_xfr_block_apdu_t0>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t0(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   811dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811e0:	b087      	sub	sp, #28
   811e2:	4607      	mov	r7, r0
   811e4:	9001      	str	r0, [sp, #4]
   811e6:	4689      	mov	r9, r1
   811e8:	4692      	mov	sl, r2
   811ea:	461c      	mov	r4, r3
	uint8_t uc_proc_byte;
	uint8_t uc_cmd_case;
	
	uint32_t status = 0;

	status |= iso7816_send_char(p_usart, p_apdu[0]); /* CLA */
   811ec:	7809      	ldrb	r1, [r1, #0]
   811ee:	4e6e      	ldr	r6, [pc, #440]	; (813a8 <iso7816_xfr_block_apdu_t0+0x1cc>)
   811f0:	47b0      	blx	r6
   811f2:	4605      	mov	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[1]); /* INS */	
   811f4:	f899 1001 	ldrb.w	r1, [r9, #1]
   811f8:	4638      	mov	r0, r7
   811fa:	47b0      	blx	r6
   811fc:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[2]); /* P1 */
   811fe:	f899 1002 	ldrb.w	r1, [r9, #2]
   81202:	4638      	mov	r0, r7
   81204:	47b0      	blx	r6
   81206:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[3]); /* P2 */
   81208:	f899 1003 	ldrb.w	r1, [r9, #3]
   8120c:	4638      	mov	r0, r7
   8120e:	47b0      	blx	r6
   81210:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[4]); /* P3 */
   81212:	f899 1004 	ldrb.w	r1, [r9, #4]
   81216:	4638      	mov	r0, r7
   81218:	47b0      	blx	r6
   8121a:	4305      	orrs	r5, r0

	/* Handle the four structures of command APDU. */
	us_apdu_index = 5;

	/* Check transfer cases */
	if (us_length == 4) {
   8121c:	2c04      	cmp	r4, #4
   8121e:	d02c      	beq.n	8127a <iso7816_xfr_block_apdu_t0+0x9e>
		uc_cmd_case = CASE1;
		us_ne_nc = 0;
	} else if (us_length == 5) {
   81220:	2c05      	cmp	r4, #5
   81222:	d010      	beq.n	81246 <iso7816_xfr_block_apdu_t0+0x6a>
		uc_cmd_case = CASE2;
		us_ne_nc = p_apdu[4];
		if (us_ne_nc == 0) {
			us_ne_nc = 256;
		}
	} else if (us_length == 6) {
   81224:	2c06      	cmp	r4, #6
   81226:	d016      	beq.n	81256 <iso7816_xfr_block_apdu_t0+0x7a>
		us_ne_nc = p_apdu[4];
		uc_cmd_case = CASE3;
	} else if (us_length == 7) {
   81228:	2c07      	cmp	r4, #7
   8122a:	d019      	beq.n	81260 <iso7816_xfr_block_apdu_t0+0x84>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
		} else {
			uc_cmd_case = CASE3;
		}
	} else {
		us_ne_nc = p_apdu[4];
   8122c:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81230:	bb94      	cbnz	r4, 81298 <iso7816_xfr_block_apdu_t0+0xbc>
			uc_cmd_case = CASE3;
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81232:	f899 3005 	ldrb.w	r3, [r9, #5]
   81236:	f899 4006 	ldrb.w	r4, [r9, #6]
   8123a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   8123e:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE3;
   81240:	f04f 0803 	mov.w	r8, #3
   81244:	e01c      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81246:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   8124a:	b9fc      	cbnz	r4, 8128c <iso7816_xfr_block_apdu_t0+0xb0>
		uc_cmd_case = CASE2;
   8124c:	f04f 0802 	mov.w	r8, #2
			us_ne_nc = 256;
   81250:	f44f 7480 	mov.w	r4, #256	; 0x100
   81254:	e014      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81256:	f899 4004 	ldrb.w	r4, [r9, #4]
		uc_cmd_case = CASE3;
   8125a:	f04f 0803 	mov.w	r8, #3
   8125e:	e00f      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81260:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81264:	b9ac      	cbnz	r4, 81292 <iso7816_xfr_block_apdu_t0+0xb6>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81266:	f899 3005 	ldrb.w	r3, [r9, #5]
   8126a:	f899 4006 	ldrb.w	r4, [r9, #6]
   8126e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   81272:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE2;
   81274:	f04f 0802 	mov.w	r8, #2
   81278:	e002      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		uc_cmd_case = CASE1;
   8127a:	f04f 0801 	mov.w	r8, #1
		us_ne_nc = 0;
   8127e:	2400      	movs	r4, #0
		uc_cmd_case = CASE2;
   81280:	2300      	movs	r3, #0
   81282:	9302      	str	r3, [sp, #8]
   81284:	9303      	str	r3, [sp, #12]
   81286:	2705      	movs	r7, #5
		}
	}

	/* Handle procedure bytes. */
	do {
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   81288:	4e48      	ldr	r6, [pc, #288]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   8128a:	e056      	b.n	8133a <iso7816_xfr_block_apdu_t0+0x15e>
		uc_cmd_case = CASE2;
   8128c:	f04f 0802 	mov.w	r8, #2
   81290:	e7f6      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   81292:	f04f 0803 	mov.w	r8, #3
   81296:	e7f3      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   81298:	f04f 0803 	mov.w	r8, #3
   8129c:	e7f0      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
				((uc_proc_byte & 0xF0) == 0x90)) {
			uc_sw1 = 1;
		}
		/* Handle INS. */
		else if (p_apdu[1] == uc_proc_byte) {
			if (uc_cmd_case == CASE2) {
   8129e:	f1b8 0f02 	cmp.w	r8, #2
   812a2:	d026      	beq.n	812f2 <iso7816_xfr_block_apdu_t0+0x116>
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
				} while (0 != --us_ne_nc);
			} else {
				/* Send data. */
				do {
					status |= iso7816_send_char(p_usart,
   812a4:	f8df b100 	ldr.w	fp, [pc, #256]	; 813a8 <iso7816_xfr_block_apdu_t0+0x1cc>
							p_apdu[us_apdu_index++]);
   812a8:	1c7e      	adds	r6, r7, #1
   812aa:	b2b6      	uxth	r6, r6
					status |= iso7816_send_char(p_usart,
   812ac:	f819 1007 	ldrb.w	r1, [r9, r7]
   812b0:	9801      	ldr	r0, [sp, #4]
   812b2:	47d8      	blx	fp
   812b4:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   812b6:	3c01      	subs	r4, #1
   812b8:	b2a4      	uxth	r4, r4
							p_apdu[us_apdu_index++]);
   812ba:	4637      	mov	r7, r6
				} while (0 != --us_ne_nc);
   812bc:	2c00      	cmp	r4, #0
   812be:	d1f3      	bne.n	812a8 <iso7816_xfr_block_apdu_t0+0xcc>
			break;
		}
	} while (us_ne_nc != 0);

	/* Status Bytes. */
	if (uc_sw1 == 0) {
   812c0:	9b02      	ldr	r3, [sp, #8]
   812c2:	2b00      	cmp	r3, #0
   812c4:	d065      	beq.n	81392 <iso7816_xfr_block_apdu_t0+0x1b6>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
	} else {
		p_message[us_message_index++] = uc_proc_byte;
   812c6:	9a03      	ldr	r2, [sp, #12]
   812c8:	1c54      	adds	r4, r2, #1
   812ca:	b2a4      	uxth	r4, r4
   812cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   812d0:	f80a 3002 	strb.w	r3, [sl, r2]
	}

	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   812d4:	eb0a 0104 	add.w	r1, sl, r4
   812d8:	9801      	ldr	r0, [sp, #4]
   812da:	4b34      	ldr	r3, [pc, #208]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   812dc:	4798      	blx	r3
	
	printf("%x\n", (unsigned int)status);
   812de:	ea45 0100 	orr.w	r1, r5, r0
   812e2:	4833      	ldr	r0, [pc, #204]	; (813b0 <iso7816_xfr_block_apdu_t0+0x1d4>)
   812e4:	4b33      	ldr	r3, [pc, #204]	; (813b4 <iso7816_xfr_block_apdu_t0+0x1d8>)
   812e6:	4798      	blx	r3
	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   812e8:	1c60      	adds	r0, r4, #1

	return (us_message_index);
   812ea:	b280      	uxth	r0, r0
}
   812ec:	b007      	add	sp, #28
   812ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812f2:	9903      	ldr	r1, [sp, #12]
   812f4:	4626      	mov	r6, r4
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   812f6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 813ac <iso7816_xfr_block_apdu_t0+0x1d0>
   812fa:	1c4f      	adds	r7, r1, #1
   812fc:	b2bf      	uxth	r7, r7
   812fe:	4451      	add	r1, sl
   81300:	9801      	ldr	r0, [sp, #4]
   81302:	47c8      	blx	r9
   81304:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   81306:	3e01      	subs	r6, #1
   81308:	b2b6      	uxth	r6, r6
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8130a:	4639      	mov	r1, r7
				} while (0 != --us_ne_nc);
   8130c:	2e00      	cmp	r6, #0
   8130e:	d1f4      	bne.n	812fa <iso7816_xfr_block_apdu_t0+0x11e>
   81310:	9b03      	ldr	r3, [sp, #12]
   81312:	441c      	add	r4, r3
   81314:	b2a3      	uxth	r3, r4
   81316:	9303      	str	r3, [sp, #12]
   81318:	e7d2      	b.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
				status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8131a:	9a03      	ldr	r2, [sp, #12]
   8131c:	f102 0b01 	add.w	fp, r2, #1
   81320:	fa1f fb8b 	uxth.w	fp, fp
   81324:	eb0a 0102 	add.w	r1, sl, r2
   81328:	9801      	ldr	r0, [sp, #4]
   8132a:	47b0      	blx	r6
   8132c:	4305      	orrs	r5, r0
   8132e:	f8cd b00c 	str.w	fp, [sp, #12]
			us_ne_nc--;
   81332:	3c01      	subs	r4, #1
   81334:	b2a4      	uxth	r4, r4
	} while (us_ne_nc != 0);
   81336:	2c00      	cmp	r4, #0
   81338:	d0c2      	beq.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   8133a:	f10d 0117 	add.w	r1, sp, #23
   8133e:	9801      	ldr	r0, [sp, #4]
   81340:	47b0      	blx	r6
   81342:	4305      	orrs	r5, r0
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81344:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if (ISO_NULL_VAL == uc_proc_byte) {
   81348:	2b60      	cmp	r3, #96	; 0x60
   8134a:	d0f4      	beq.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
   8134c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
		else if (((uc_proc_byte & 0xF0) == 0x60) ||
   81350:	2a60      	cmp	r2, #96	; 0x60
   81352:	d018      	beq.n	81386 <iso7816_xfr_block_apdu_t0+0x1aa>
   81354:	2a90      	cmp	r2, #144	; 0x90
   81356:	d019      	beq.n	8138c <iso7816_xfr_block_apdu_t0+0x1b0>
		else if (p_apdu[1] == uc_proc_byte) {
   81358:	f899 2001 	ldrb.w	r2, [r9, #1]
   8135c:	4293      	cmp	r3, r2
   8135e:	d09e      	beq.n	8129e <iso7816_xfr_block_apdu_t0+0xc2>
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81360:	43db      	mvns	r3, r3
		else if (p_apdu[1] == uc_proc_byte_x) {
   81362:	b2db      	uxtb	r3, r3
   81364:	4293      	cmp	r3, r2
   81366:	d1ab      	bne.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
			if (uc_cmd_case == CASE2) {
   81368:	f1b8 0f02 	cmp.w	r8, #2
   8136c:	d0d5      	beq.n	8131a <iso7816_xfr_block_apdu_t0+0x13e>
				status |= iso7816_send_char(p_usart, p_apdu[us_apdu_index++]);
   8136e:	f107 0b01 	add.w	fp, r7, #1
   81372:	fa1f fb8b 	uxth.w	fp, fp
   81376:	f819 1007 	ldrb.w	r1, [r9, r7]
   8137a:	9801      	ldr	r0, [sp, #4]
   8137c:	4b0a      	ldr	r3, [pc, #40]	; (813a8 <iso7816_xfr_block_apdu_t0+0x1cc>)
   8137e:	4798      	blx	r3
   81380:	4305      	orrs	r5, r0
   81382:	465f      	mov	r7, fp
   81384:	e7d5      	b.n	81332 <iso7816_xfr_block_apdu_t0+0x156>
			uc_sw1 = 1;
   81386:	2301      	movs	r3, #1
   81388:	9302      	str	r3, [sp, #8]
   8138a:	e7d4      	b.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
   8138c:	2301      	movs	r3, #1
   8138e:	9302      	str	r3, [sp, #8]
   81390:	e7d1      	b.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
   81392:	9b03      	ldr	r3, [sp, #12]
   81394:	1c5c      	adds	r4, r3, #1
   81396:	b2a4      	uxth	r4, r4
   81398:	eb0a 0103 	add.w	r1, sl, r3
   8139c:	9801      	ldr	r0, [sp, #4]
   8139e:	4b03      	ldr	r3, [pc, #12]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   813a0:	4798      	blx	r3
   813a2:	4305      	orrs	r5, r0
   813a4:	e796      	b.n	812d4 <iso7816_xfr_block_apdu_t0+0xf8>
   813a6:	bf00      	nop
   813a8:	0008116d 	.word	0x0008116d
   813ac:	000810d5 	.word	0x000810d5
   813b0:	0008e420 	.word	0x0008e420
   813b4:	0008788d 	.word	0x0008788d

000813b8 <iso7816_xfr_block_apdu_t1>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t1(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   813b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index;
	uint16_t edc;
	uint32_t rx_len;
	uint16_t us_message_index = 0;

	if (us_length <= 0) {
   813bc:	2b00      	cmp	r3, #0
   813be:	f000 80a4 	beq.w	8150a <iso7816_xfr_block_apdu_t1+0x152>
   813c2:	4690      	mov	r8, r2
   813c4:	460d      	mov	r5, r1
   813c6:	4683      	mov	fp, r0
		return false;
	}

	if (tc3 & 0x1) {
   813c8:	4b72      	ldr	r3, [pc, #456]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   813ca:	781e      	ldrb	r6, [r3, #0]
   813cc:	f006 0a01 	and.w	sl, r6, #1
   813d0:	f346 0600 	sbfx	r6, r6, #0, #1
   813d4:	b2b6      	uxth	r6, r6
	} else {
		edc = 0;
	}

	/* Update the edc for the data to be transmitted */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   813d6:	f891 9002 	ldrb.w	r9, [r1, #2]
   813da:	f109 0903 	add.w	r9, r9, #3
   813de:	2400      	movs	r4, #0
		*edc = iso7816_update_crc(data, *edc);
   813e0:	4f6d      	ldr	r7, [pc, #436]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   813e2:	e006      	b.n	813f2 <iso7816_xfr_block_apdu_t1+0x3a>
   813e4:	4631      	mov	r1, r6
   813e6:	47b8      	blx	r7
   813e8:	4606      	mov	r6, r0
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   813ea:	3401      	adds	r4, #1
   813ec:	b2e4      	uxtb	r4, r4
   813ee:	454c      	cmp	r4, r9
   813f0:	da06      	bge.n	81400 <iso7816_xfr_block_apdu_t1+0x48>
		iso7816_update_edc(p_apdu[index], &edc);
   813f2:	5d28      	ldrb	r0, [r5, r4]
	if (tc3 & 0x1) {  /* type = CRC */
   813f4:	f1ba 0f00 	cmp.w	sl, #0
   813f8:	d1f4      	bne.n	813e4 <iso7816_xfr_block_apdu_t1+0x2c>
		*edc = *edc ^ data;
   813fa:	4046      	eors	r6, r0
   813fc:	b2b6      	uxth	r6, r6
   813fe:	e7f4      	b.n	813ea <iso7816_xfr_block_apdu_t1+0x32>
   81400:	2400      	movs	r4, #0
	}

	/* Transmit Data Bytes */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
		iso7816_send_char(p_usart, p_apdu[index]);
   81402:	4f66      	ldr	r7, [pc, #408]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   81404:	5d29      	ldrb	r1, [r5, r4]
   81406:	4658      	mov	r0, fp
   81408:	47b8      	blx	r7
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   8140a:	3401      	adds	r4, #1
   8140c:	b2e4      	uxtb	r4, r4
   8140e:	78ab      	ldrb	r3, [r5, #2]
   81410:	3303      	adds	r3, #3
   81412:	429c      	cmp	r4, r3
   81414:	dbf6      	blt.n	81404 <iso7816_xfr_block_apdu_t1+0x4c>
	}

	/* Transmit EDC */
	iso7816_send_char(p_usart, (uint8_t)edc);
   81416:	b2f1      	uxtb	r1, r6
   81418:	4658      	mov	r0, fp
   8141a:	4b60      	ldr	r3, [pc, #384]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   8141c:	4798      	blx	r3

	if (tc3 & 0x1) {
   8141e:	4b5d      	ldr	r3, [pc, #372]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81420:	781b      	ldrb	r3, [r3, #0]
   81422:	f013 0f01 	tst.w	r3, #1
   81426:	d14f      	bne.n	814c8 <iso7816_xfr_block_apdu_t1+0x110>
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
	}

	if (iso7816_get_char(p_usart, &p_message[0]) == 0xff) {
   81428:	4641      	mov	r1, r8
   8142a:	4658      	mov	r0, fp
   8142c:	4b5c      	ldr	r3, [pc, #368]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8142e:	4798      	blx	r3
   81430:	28ff      	cmp	r0, #255	; 0xff
   81432:	d06d      	beq.n	81510 <iso7816_xfr_block_apdu_t1+0x158>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[1]) == 0xff) {
   81434:	f108 0101 	add.w	r1, r8, #1
   81438:	4658      	mov	r0, fp
   8143a:	4b59      	ldr	r3, [pc, #356]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8143c:	4798      	blx	r3
   8143e:	28ff      	cmp	r0, #255	; 0xff
   81440:	d069      	beq.n	81516 <iso7816_xfr_block_apdu_t1+0x15e>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[2]) == 0xff) {
   81442:	f108 0102 	add.w	r1, r8, #2
   81446:	4658      	mov	r0, fp
   81448:	4b55      	ldr	r3, [pc, #340]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8144a:	4798      	blx	r3
   8144c:	28ff      	cmp	r0, #255	; 0xff
   8144e:	d065      	beq.n	8151c <iso7816_xfr_block_apdu_t1+0x164>
		return us_message_index;
	}

	us_message_index++;

	rx_len = p_message[2] + 1;
   81450:	f898 4002 	ldrb.w	r4, [r8, #2]
   81454:	1c65      	adds	r5, r4, #1

	if (tc3 & 0x1) {
   81456:	4b4f      	ldr	r3, [pc, #316]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81458:	781b      	ldrb	r3, [r3, #0]
   8145a:	f013 0301 	ands.w	r3, r3, #1
   8145e:	d038      	beq.n	814d2 <iso7816_xfr_block_apdu_t1+0x11a>
		rx_len++;
   81460:	f105 0901 	add.w	r9, r5, #1
	}

	for (index = 3; index < (rx_len + 3); index++) {
   81464:	1d2e      	adds	r6, r5, #4
   81466:	2e03      	cmp	r6, #3
		rx_len++;
   81468:	bf88      	it	hi
   8146a:	464d      	movhi	r5, r9
	for (index = 3; index < (rx_len + 3); index++) {
   8146c:	f240 8082 	bls.w	81574 <iso7816_xfr_block_apdu_t1+0x1bc>
		rx_len++;
   81470:	2103      	movs	r1, #3
   81472:	460c      	mov	r4, r1
		if (iso7816_get_char(p_usart, &p_message[index]) == 0xff) {
   81474:	f8df 9128 	ldr.w	r9, [pc, #296]	; 815a0 <iso7816_xfr_block_apdu_t1+0x1e8>
   81478:	4441      	add	r1, r8
   8147a:	4658      	mov	r0, fp
   8147c:	47c8      	blx	r9
   8147e:	28ff      	cmp	r0, #255	; 0xff
   81480:	d04f      	beq.n	81522 <iso7816_xfr_block_apdu_t1+0x16a>
	for (index = 3; index < (rx_len + 3); index++) {
   81482:	3401      	adds	r4, #1
   81484:	b2e4      	uxtb	r4, r4
   81486:	4621      	mov	r1, r4
   81488:	42b4      	cmp	r4, r6
   8148a:	d3f5      	bcc.n	81478 <iso7816_xfr_block_apdu_t1+0xc0>
			return us_message_index;
		}
	}

	/* Check for the CRC Error */
	if (tc3 & 0x1) {
   8148c:	4b41      	ldr	r3, [pc, #260]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   8148e:	781b      	ldrb	r3, [r3, #0]
   81490:	f013 0f01 	tst.w	r3, #1
   81494:	d148      	bne.n	81528 <iso7816_xfr_block_apdu_t1+0x170>
		}
	} else {
		edc = 0;
		edc = edc ^ p_message[0];
		edc = edc ^ p_message[1];
		edc = edc ^ p_message[2];
   81496:	f898 2001 	ldrb.w	r2, [r8, #1]
   8149a:	f898 3000 	ldrb.w	r3, [r8]
   8149e:	405a      	eors	r2, r3
   814a0:	f898 3002 	ldrb.w	r3, [r8, #2]
   814a4:	405a      	eors	r2, r3
   814a6:	2103      	movs	r1, #3
   814a8:	460b      	mov	r3, r1

		for (index = 3; index < (rx_len + 3); index++) {
			edc = edc ^ p_message[index];
   814aa:	f818 1001 	ldrb.w	r1, [r8, r1]
   814ae:	404a      	eors	r2, r1
		for (index = 3; index < (rx_len + 3); index++) {
   814b0:	3301      	adds	r3, #1
   814b2:	b2db      	uxtb	r3, r3
   814b4:	4619      	mov	r1, r3
   814b6:	42b3      	cmp	r3, r6
   814b8:	d3f7      	bcc.n	814aa <iso7816_xfr_block_apdu_t1+0xf2>
		}

		if (edc != p_message[index + 1]) {
   814ba:	4441      	add	r1, r8
   814bc:	784b      	ldrb	r3, [r1, #1]
   814be:	4293      	cmp	r3, r2
   814c0:	d01f      	beq.n	81502 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814c2:	2003      	movs	r0, #3
   814c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
   814c8:	2100      	movs	r1, #0
   814ca:	4658      	mov	r0, fp
   814cc:	4b33      	ldr	r3, [pc, #204]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   814ce:	4798      	blx	r3
   814d0:	e7aa      	b.n	81428 <iso7816_xfr_block_apdu_t1+0x70>
	for (index = 3; index < (rx_len + 3); index++) {
   814d2:	1cee      	adds	r6, r5, #3
   814d4:	2e03      	cmp	r6, #3
   814d6:	d8cb      	bhi.n	81470 <iso7816_xfr_block_apdu_t1+0xb8>
	if (tc3 & 0x1) {
   814d8:	2b00      	cmp	r3, #0
   814da:	d14a      	bne.n	81572 <iso7816_xfr_block_apdu_t1+0x1ba>
		edc = edc ^ p_message[2];
   814dc:	f898 2000 	ldrb.w	r2, [r8]
   814e0:	f898 3001 	ldrb.w	r3, [r8, #1]
   814e4:	405a      	eors	r2, r3
   814e6:	f898 3002 	ldrb.w	r3, [r8, #2]
   814ea:	405a      	eors	r2, r3
		for (index = 3; index < (rx_len + 3); index++) {
   814ec:	2103      	movs	r1, #3
   814ee:	e7e4      	b.n	814ba <iso7816_xfr_block_apdu_t1+0x102>
				((edc & 0xFF) != p_message[rx_len - 1])) {
   814f0:	44a8      	add	r8, r5
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   814f2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   814f6:	b2c0      	uxtb	r0, r0
   814f8:	4283      	cmp	r3, r0
   814fa:	d002      	beq.n	81502 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814fc:	2003      	movs	r0, #3
   814fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	us_message_index += rx_len;
   81502:	1ce8      	adds	r0, r5, #3
   81504:	b280      	uxth	r0, r0
	return us_message_index;
   81506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8150a:	4618      	mov	r0, r3
   8150c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81510:	2000      	movs	r0, #0
   81512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81516:	2001      	movs	r0, #1
   81518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   8151c:	2002      	movs	r0, #2
   8151e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return us_message_index;
   81522:	2003      	movs	r0, #3
   81524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		edc = iso7816_update_crc(p_message[0], edc);
   81528:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8152c:	f898 0000 	ldrb.w	r0, [r8]
   81530:	4c19      	ldr	r4, [pc, #100]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   81532:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[1], edc);
   81534:	4601      	mov	r1, r0
   81536:	f898 0001 	ldrb.w	r0, [r8, #1]
   8153a:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[2], edc);
   8153c:	4601      	mov	r1, r0
   8153e:	f898 0002 	ldrb.w	r0, [r8, #2]
   81542:	47a0      	blx	r4
   81544:	2303      	movs	r3, #3
   81546:	461c      	mov	r4, r3
			edc = iso7816_update_crc(p_message[index], edc);
   81548:	4f13      	ldr	r7, [pc, #76]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8154a:	4601      	mov	r1, r0
   8154c:	f818 0003 	ldrb.w	r0, [r8, r3]
   81550:	47b8      	blx	r7
		for (index = 3; index < (rx_len + 3); index++) {
   81552:	3401      	adds	r4, #1
   81554:	b2e4      	uxtb	r4, r4
   81556:	4623      	mov	r3, r4
   81558:	42b4      	cmp	r4, r6
   8155a:	d3f6      	bcc.n	8154a <iso7816_xfr_block_apdu_t1+0x192>
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   8155c:	eb08 0305 	add.w	r3, r8, r5
   81560:	f813 2c02 	ldrb.w	r2, [r3, #-2]
   81564:	f3c0 230f 	ubfx	r3, r0, #8, #16
   81568:	429a      	cmp	r2, r3
   8156a:	d0c1      	beq.n	814f0 <iso7816_xfr_block_apdu_t1+0x138>
			return us_message_index;
   8156c:	2003      	movs	r0, #3
   8156e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx_len = p_message[2] + 1;
   81572:	46a9      	mov	r9, r5
		edc = iso7816_update_crc(p_message[0], edc);
   81574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81578:	f898 0000 	ldrb.w	r0, [r8]
   8157c:	4d06      	ldr	r5, [pc, #24]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8157e:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[1], edc);
   81580:	4601      	mov	r1, r0
   81582:	f898 0001 	ldrb.w	r0, [r8, #1]
   81586:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[2], edc);
   81588:	4601      	mov	r1, r0
   8158a:	4620      	mov	r0, r4
   8158c:	47a8      	blx	r5
   8158e:	464d      	mov	r5, r9
   81590:	e7e4      	b.n	8155c <iso7816_xfr_block_apdu_t1+0x1a4>
   81592:	bf00      	nop
   81594:	20001927 	.word	0x20001927
   81598:	00081091 	.word	0x00081091
   8159c:	0008116d 	.word	0x0008116d
   815a0:	000810d5 	.word	0x000810d5

000815a4 <iso7816_data_block_atr>:
 * \param p_usart Pointer to the usart device.
 * \param p_atr    Pointer to ATR buffer.
 * \param p_length Pointer for store the ATR length.
 */
void iso7816_data_block_atr(Usart* p_usart, uint8_t *p_atr, uint8_t *p_length)
{
   815a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815a8:	4607      	mov	r7, r0
   815aa:	460e      	mov	r6, r1
   815ac:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t j;
	uint8_t uc_value;

	*p_length = 0;
   815ae:	2300      	movs	r3, #0
   815b0:	7013      	strb	r3, [r2, #0]

	ta1=0;
   815b2:	4a55      	ldr	r2, [pc, #340]	; (81708 <iso7816_data_block_atr+0x164>)
   815b4:	7013      	strb	r3, [r2, #0]
	td1=0;
   815b6:	4a55      	ldr	r2, [pc, #340]	; (8170c <iso7816_data_block_atr+0x168>)
   815b8:	7013      	strb	r3, [r2, #0]
	tc3=0;
   815ba:	4a55      	ldr	r2, [pc, #340]	; (81710 <iso7816_data_block_atr+0x16c>)
   815bc:	7013      	strb	r3, [r2, #0]

	/* Read ATR TS. */
	iso7816_get_char(p_usart, &p_atr[0]);
   815be:	4c55      	ldr	r4, [pc, #340]	; (81714 <iso7816_data_block_atr+0x170>)
   815c0:	47a0      	blx	r4

	/* Read ATR T0. */
	iso7816_get_char(p_usart, &p_atr[1]);
   815c2:	1c71      	adds	r1, r6, #1
   815c4:	4638      	mov	r0, r7
   815c6:	47a0      	blx	r4

	uc_value = p_atr[1] & 0xF0;
   815c8:	7874      	ldrb	r4, [r6, #1]
   815ca:	f004 09f0 	and.w	r9, r4, #240	; 0xf0
	i = 2;

	/* Read ATR T1. */
	if (uc_value & 0x10) { /* TA[1] */
   815ce:	f014 0f10 	tst.w	r4, #16
   815d2:	d11d      	bne.n	81610 <iso7816_data_block_atr+0x6c>
	i = 2;
   815d4:	2502      	movs	r5, #2
		iso7816_get_char(p_usart, &p_atr[i++]);
		ta1 = p_atr[2];
	}

	if (uc_value & 0x20) { /* TB[1] */
   815d6:	f014 0f20 	tst.w	r4, #32
   815da:	d122      	bne.n	81622 <iso7816_data_block_atr+0x7e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x40) { /* TC[1] */
   815dc:	f014 0f40 	tst.w	r4, #64	; 0x40
   815e0:	d127      	bne.n	81632 <iso7816_data_block_atr+0x8e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x80) { /* TD[1] */
   815e2:	f019 0f80 	tst.w	r9, #128	; 0x80
   815e6:	d12b      	bne.n	81640 <iso7816_data_block_atr+0x9c>
			uc_value = 0;
		}
	}

	/* Historical Bytes. */
	uc_value = p_atr[1] & 0x0F;
   815e8:	7873      	ldrb	r3, [r6, #1]
	for (j = 0; j < uc_value; j++) {
   815ea:	f013 030f 	ands.w	r3, r3, #15
   815ee:	d00b      	beq.n	81608 <iso7816_data_block_atr+0x64>
   815f0:	1974      	adds	r4, r6, r5
   815f2:	eb05 0903 	add.w	r9, r5, r3
   815f6:	444e      	add	r6, r9
		iso7816_get_char(p_usart, &p_atr[i++]);
   815f8:	4d46      	ldr	r5, [pc, #280]	; (81714 <iso7816_data_block_atr+0x170>)
   815fa:	4621      	mov	r1, r4
   815fc:	4638      	mov	r0, r7
   815fe:	47a8      	blx	r5
   81600:	3401      	adds	r4, #1
	for (j = 0; j < uc_value; j++) {
   81602:	42b4      	cmp	r4, r6
   81604:	d1f9      	bne.n	815fa <iso7816_data_block_atr+0x56>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81606:	464d      	mov	r5, r9
	}

	*p_length = i;
   81608:	f888 5000 	strb.w	r5, [r8]
}
   8160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		iso7816_get_char(p_usart, &p_atr[i++]);
   81610:	1cb1      	adds	r1, r6, #2
   81612:	4638      	mov	r0, r7
   81614:	4b3f      	ldr	r3, [pc, #252]	; (81714 <iso7816_data_block_atr+0x170>)
   81616:	4798      	blx	r3
		ta1 = p_atr[2];
   81618:	78b2      	ldrb	r2, [r6, #2]
   8161a:	4b3b      	ldr	r3, [pc, #236]	; (81708 <iso7816_data_block_atr+0x164>)
   8161c:	701a      	strb	r2, [r3, #0]
		iso7816_get_char(p_usart, &p_atr[i++]);
   8161e:	2503      	movs	r5, #3
   81620:	e7d9      	b.n	815d6 <iso7816_data_block_atr+0x32>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81622:	f105 0a01 	add.w	sl, r5, #1
   81626:	1971      	adds	r1, r6, r5
   81628:	4638      	mov	r0, r7
   8162a:	4b3a      	ldr	r3, [pc, #232]	; (81714 <iso7816_data_block_atr+0x170>)
   8162c:	4798      	blx	r3
   8162e:	4655      	mov	r5, sl
   81630:	e7d4      	b.n	815dc <iso7816_data_block_atr+0x38>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81632:	1c6c      	adds	r4, r5, #1
   81634:	1971      	adds	r1, r6, r5
   81636:	4638      	mov	r0, r7
   81638:	4b36      	ldr	r3, [pc, #216]	; (81714 <iso7816_data_block_atr+0x170>)
   8163a:	4798      	blx	r3
   8163c:	4625      	mov	r5, r4
   8163e:	e7d0      	b.n	815e2 <iso7816_data_block_atr+0x3e>
		iso7816_get_char(p_usart, &p_atr[i]);
   81640:	1971      	adds	r1, r6, r5
   81642:	4638      	mov	r0, r7
   81644:	4b33      	ldr	r3, [pc, #204]	; (81714 <iso7816_data_block_atr+0x170>)
   81646:	4798      	blx	r3
		td1 = p_atr[i];
   81648:	f816 9005 	ldrb.w	r9, [r6, r5]
   8164c:	4b2f      	ldr	r3, [pc, #188]	; (8170c <iso7816_data_block_atr+0x168>)
   8164e:	f883 9000 	strb.w	r9, [r3]
		uc_value = p_atr[i++] & 0xF0;
   81652:	1c6c      	adds	r4, r5, #1
	if (uc_value) {
   81654:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   81658:	d00b      	beq.n	81672 <iso7816_data_block_atr+0xce>
		if (uc_value & 0x10) { /* TA[2] */
   8165a:	f019 0f10 	tst.w	r9, #16
   8165e:	d10a      	bne.n	81676 <iso7816_data_block_atr+0xd2>
		if (uc_value & 0x20) { /* TB[2] */
   81660:	f019 0f20 	tst.w	r9, #32
   81664:	d10e      	bne.n	81684 <iso7816_data_block_atr+0xe0>
		if (uc_value & 0x40) { /* TC[2] */
   81666:	f019 0f40 	tst.w	r9, #64	; 0x40
   8166a:	d112      	bne.n	81692 <iso7816_data_block_atr+0xee>
		if (uc_value & 0x80) { /* TD[2] */
   8166c:	f01a 0f80 	tst.w	sl, #128	; 0x80
   81670:	d116      	bne.n	816a0 <iso7816_data_block_atr+0xfc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81672:	4625      	mov	r5, r4
   81674:	e7b8      	b.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81676:	3502      	adds	r5, #2
   81678:	1931      	adds	r1, r6, r4
   8167a:	4638      	mov	r0, r7
   8167c:	4b25      	ldr	r3, [pc, #148]	; (81714 <iso7816_data_block_atr+0x170>)
   8167e:	4798      	blx	r3
   81680:	462c      	mov	r4, r5
   81682:	e7ed      	b.n	81660 <iso7816_data_block_atr+0xbc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81684:	1c65      	adds	r5, r4, #1
   81686:	1931      	adds	r1, r6, r4
   81688:	4638      	mov	r0, r7
   8168a:	4b22      	ldr	r3, [pc, #136]	; (81714 <iso7816_data_block_atr+0x170>)
   8168c:	4798      	blx	r3
   8168e:	462c      	mov	r4, r5
   81690:	e7e9      	b.n	81666 <iso7816_data_block_atr+0xc2>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81692:	1c65      	adds	r5, r4, #1
   81694:	1931      	adds	r1, r6, r4
   81696:	4638      	mov	r0, r7
   81698:	4b1e      	ldr	r3, [pc, #120]	; (81714 <iso7816_data_block_atr+0x170>)
   8169a:	4798      	blx	r3
   8169c:	462c      	mov	r4, r5
   8169e:	e7e5      	b.n	8166c <iso7816_data_block_atr+0xc8>
			iso7816_get_char(p_usart, &p_atr[i]);
   816a0:	1931      	adds	r1, r6, r4
   816a2:	4638      	mov	r0, r7
   816a4:	4b1b      	ldr	r3, [pc, #108]	; (81714 <iso7816_data_block_atr+0x170>)
   816a6:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816a8:	1c65      	adds	r5, r4, #1
   816aa:	f816 9004 	ldrb.w	r9, [r6, r4]
	if (uc_value) {
   816ae:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   816b2:	d099      	beq.n	815e8 <iso7816_data_block_atr+0x44>
		if (uc_value & 0x10) { /* TA[3] */
   816b4:	f019 0f10 	tst.w	r9, #16
   816b8:	d10e      	bne.n	816d8 <iso7816_data_block_atr+0x134>
		if (uc_value & 0x20) { /* TB[3] */
   816ba:	f019 0f20 	tst.w	r9, #32
   816be:	d112      	bne.n	816e6 <iso7816_data_block_atr+0x142>
		if (uc_value & 0x40) { /* TC[3] */
   816c0:	f019 0f40 	tst.w	r9, #64	; 0x40
   816c4:	d116      	bne.n	816f4 <iso7816_data_block_atr+0x150>
		if (uc_value & 0x80) { /* TD[3] */
   816c6:	f01a 0f80 	tst.w	sl, #128	; 0x80
   816ca:	d08d      	beq.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i]);
   816cc:	1971      	adds	r1, r6, r5
   816ce:	4638      	mov	r0, r7
   816d0:	4b10      	ldr	r3, [pc, #64]	; (81714 <iso7816_data_block_atr+0x170>)
   816d2:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816d4:	3501      	adds	r5, #1
   816d6:	e787      	b.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816d8:	3402      	adds	r4, #2
   816da:	1971      	adds	r1, r6, r5
   816dc:	4638      	mov	r0, r7
   816de:	4b0d      	ldr	r3, [pc, #52]	; (81714 <iso7816_data_block_atr+0x170>)
   816e0:	4798      	blx	r3
   816e2:	4625      	mov	r5, r4
   816e4:	e7e9      	b.n	816ba <iso7816_data_block_atr+0x116>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816e6:	1c6c      	adds	r4, r5, #1
   816e8:	1971      	adds	r1, r6, r5
   816ea:	4638      	mov	r0, r7
   816ec:	4b09      	ldr	r3, [pc, #36]	; (81714 <iso7816_data_block_atr+0x170>)
   816ee:	4798      	blx	r3
   816f0:	4625      	mov	r5, r4
   816f2:	e7e5      	b.n	816c0 <iso7816_data_block_atr+0x11c>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816f4:	1c6c      	adds	r4, r5, #1
   816f6:	1971      	adds	r1, r6, r5
   816f8:	4638      	mov	r0, r7
   816fa:	4b06      	ldr	r3, [pc, #24]	; (81714 <iso7816_data_block_atr+0x170>)
   816fc:	4798      	blx	r3
			tc3 = p_atr[i - 1];
   816fe:	5d72      	ldrb	r2, [r6, r5]
   81700:	4b03      	ldr	r3, [pc, #12]	; (81710 <iso7816_data_block_atr+0x16c>)
   81702:	701a      	strb	r2, [r3, #0]
			iso7816_get_char(p_usart, &p_atr[i++]);
   81704:	4625      	mov	r5, r4
   81706:	e7de      	b.n	816c6 <iso7816_data_block_atr+0x122>
   81708:	20001926 	.word	0x20001926
   8170c:	20001928 	.word	0x20001928
   81710:	20001927 	.word	0x20001927
   81714:	000810d5 	.word	0x000810d5

00081718 <iso7816_warm_reset>:
 * \brief Warm reset.
 *
 * \param p_usart Pointer to the usart device.
 */
void iso7816_warm_reset(Usart* p_usart)
{
   81718:	b510      	push	{r4, lr}
   8171a:	b082      	sub	sp, #8
   8171c:	4604      	mov	r4, r0
	uint32_t i;
	uint32_t ul_data;

	iso7816_icc_power_off();
   8171e:	4b16      	ldr	r3, [pc, #88]	; (81778 <iso7816_warm_reset+0x60>)
   81720:	4798      	blx	r3

	/* tb: wait 400 cycles. */
	for (i = 0; i < (RST_WAIT_TIME * (g_ul_clk / 1000000)); i++) {
   81722:	4b16      	ldr	r3, [pc, #88]	; (8177c <iso7816_warm_reset+0x64>)
   81724:	681b      	ldr	r3, [r3, #0]
   81726:	4a16      	ldr	r2, [pc, #88]	; (81780 <iso7816_warm_reset+0x68>)
   81728:	fba2 2303 	umull	r2, r3, r2, r3
   8172c:	0c9b      	lsrs	r3, r3, #18
   8172e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   81732:	00db      	lsls	r3, r3, #3
   81734:	d00c      	beq.n	81750 <iso7816_warm_reset+0x38>
   81736:	2200      	movs	r2, #0
   81738:	4810      	ldr	r0, [pc, #64]	; (8177c <iso7816_warm_reset+0x64>)
   8173a:	4911      	ldr	r1, [pc, #68]	; (81780 <iso7816_warm_reset+0x68>)
   8173c:	3201      	adds	r2, #1
   8173e:	6803      	ldr	r3, [r0, #0]
   81740:	fba1 e303 	umull	lr, r3, r1, r3
   81744:	0c9b      	lsrs	r3, r3, #18
   81746:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   8174a:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   8174e:	d3f5      	bcc.n	8173c <iso7816_warm_reset+0x24>
	}

	usart_read(p_usart, &ul_data);
   81750:	a901      	add	r1, sp, #4
   81752:	4620      	mov	r0, r4
   81754:	4b0b      	ldr	r3, [pc, #44]	; (81784 <iso7816_warm_reset+0x6c>)
   81756:	4798      	blx	r3
	usart_reset_status(p_usart);
   81758:	4620      	mov	r0, r4
   8175a:	4b0b      	ldr	r3, [pc, #44]	; (81788 <iso7816_warm_reset+0x70>)
   8175c:	4798      	blx	r3
	usart_reset_iterations(p_usart);
   8175e:	4620      	mov	r0, r4
   81760:	4b0a      	ldr	r3, [pc, #40]	; (8178c <iso7816_warm_reset+0x74>)
   81762:	4798      	blx	r3
	usart_reset_nack(p_usart);
   81764:	4620      	mov	r0, r4
   81766:	4b0a      	ldr	r3, [pc, #40]	; (81790 <iso7816_warm_reset+0x78>)
   81768:	4798      	blx	r3
	gpio_set_pin_high(gs_ul_rst_pin_idx);
   8176a:	4b0a      	ldr	r3, [pc, #40]	; (81794 <iso7816_warm_reset+0x7c>)
   8176c:	6818      	ldr	r0, [r3, #0]
   8176e:	4b0a      	ldr	r3, [pc, #40]	; (81798 <iso7816_warm_reset+0x80>)
   81770:	4798      	blx	r3

	iso7816_icc_power_on();
}
   81772:	b002      	add	sp, #8
   81774:	bd10      	pop	{r4, pc}
   81776:	bf00      	nop
   81778:	000810c1 	.word	0x000810c1
   8177c:	200023f0 	.word	0x200023f0
   81780:	431bde83 	.word	0x431bde83
   81784:	00086eaf 	.word	0x00086eaf
   81788:	00086e69 	.word	0x00086e69
   8178c:	00086e71 	.word	0x00086e71
   81790:	00086e79 	.word	0x00086e79
   81794:	200023f4 	.word	0x200023f4
   81798:	000851b7 	.word	0x000851b7

0008179c <iso7816_decode_atr>:
 *
 * \param p_usart Pointer to the usart device.
 * \param p_atr Pinter on ATR buffer.
 */
uint8_t iso7816_decode_atr(Usart* p_usart, uint8_t *p_atr)
{
   8179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817a0:	b09c      	sub	sp, #112	; 0x70
   817a2:	4686      	mov	lr, r0
   817a4:	4688      	mov	r8, r1
	uint32_t ftable[16] = {0, 372, 558, 744, 1116, 1488, 1860, 0,
   817a6:	4e65      	ldr	r6, [pc, #404]	; (8193c <iso7816_decode_atr+0x1a0>)
   817a8:	ac0c      	add	r4, sp, #48	; 0x30
   817aa:	4635      	mov	r5, r6
   817ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   817bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			       0, 512, 768, 1024, 1536, 2048, 0, 0};
	uint32_t dtable[10] = {0, 1, 2, 4, 8, 16, 32, 64, 12, 20};
   817c0:	ad02      	add	r5, sp, #8
   817c2:	f106 0440 	add.w	r4, r6, #64	; 0x40
   817c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817ce:	e894 0003 	ldmia.w	r4, {r0, r1}
   817d2:	e885 0003 	stmia.w	r5, {r0, r1}
	uint8_t ppss[4] = {0,0,0,0};
   817d6:	2300      	movs	r3, #0
   817d8:	9301      	str	r3, [sp, #4]
	uint32_t y;
	uint8_t uc_offset;
	uint32_t fidi = 0;

	i = 2;
	y = p_atr[1] & 0xF0;
   817da:	f898 1001 	ldrb.w	r1, [r8, #1]

	/* Read ATR Ti. */
	uc_offset = 1;

	if (y & 0x10) {
   817de:	f011 0f10 	tst.w	r1, #16
   817e2:	d018      	beq.n	81816 <iso7816_decode_atr+0x7a>
	y = p_atr[1] & 0xF0;
   817e4:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   817e8:	2202      	movs	r2, #2
   817ea:	e004      	b.n	817f6 <iso7816_decode_atr+0x5a>
			if (y & 0x40) { /* TC[i] */
				i++;
			}

			if (y & 0x80) { /* TD[i] */
				y = p_atr[i++] & 0xF0;
   817ec:	f818 3002 	ldrb.w	r3, [r8, r2]
   817f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   817f4:	3201      	adds	r2, #1
		while (y) {
   817f6:	b173      	cbz	r3, 81816 <iso7816_decode_atr+0x7a>
			if (y & 0x10) { /* TA[i] */
   817f8:	f013 0f10 	tst.w	r3, #16
				i++;
   817fc:	bf18      	it	ne
   817fe:	3201      	addne	r2, #1
			if (y & 0x20) { /* TB[i] */
   81800:	f013 0f20 	tst.w	r3, #32
				i++;
   81804:	bf18      	it	ne
   81806:	3201      	addne	r2, #1
			if (y & 0x40) { /* TC[i] */
   81808:	f013 0f40 	tst.w	r3, #64	; 0x40
				i++;
   8180c:	bf18      	it	ne
   8180e:	3201      	addne	r2, #1
			if (y & 0x80) { /* TD[i] */
   81810:	f013 0f80 	tst.w	r3, #128	; 0x80
   81814:	d1ea      	bne.n	817ec <iso7816_decode_atr+0x50>
			uc_offset++;
		}
	}

	y = p_atr[1] & 0x0F;
	for (j = 0; j < y; j++) {
   81816:	f011 020f 	ands.w	r2, r1, #15
   8181a:	d003      	beq.n	81824 <iso7816_decode_atr+0x88>
   8181c:	2300      	movs	r3, #0
   8181e:	3301      	adds	r3, #1
   81820:	429a      	cmp	r2, r3
   81822:	d1fc      	bne.n	8181e <iso7816_decode_atr+0x82>
		i++;
	}

	if (td1 & 0x10) {
   81824:	4b46      	ldr	r3, [pc, #280]	; (81940 <iso7816_decode_atr+0x1a4>)
   81826:	7818      	ldrb	r0, [r3, #0]
   81828:	f010 0f10 	tst.w	r0, #16
   8182c:	f040 8081 	bne.w	81932 <iso7816_decode_atr+0x196>
		return 0;
	}

	if (ta1 && ((ta1 & 0xf) != 0)) {
   81830:	4b44      	ldr	r3, [pc, #272]	; (81944 <iso7816_decode_atr+0x1a8>)
   81832:	781b      	ldrb	r3, [r3, #0]
   81834:	b17b      	cbz	r3, 81856 <iso7816_decode_atr+0xba>
   81836:	f013 020f 	ands.w	r2, r3, #15
   8183a:	d044      	beq.n	818c6 <iso7816_decode_atr+0x12a>
		fidi = ftable[(ta1 >> 4) & 0xf] / dtable[ta1 & 0xf];
   8183c:	091b      	lsrs	r3, r3, #4
   8183e:	a91c      	add	r1, sp, #112	; 0x70
   81840:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81844:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   81848:	f853 6c40 	ldr.w	r6, [r3, #-64]
   8184c:	f852 3c68 	ldr.w	r3, [r2, #-104]
   81850:	fbb6 f6f3 	udiv	r6, r6, r3
   81854:	e000      	b.n	81858 <iso7816_decode_atr+0xbc>
	uint32_t fidi = 0;
   81856:	2600      	movs	r6, #0
	}

	if (td1 & 0xf) {
   81858:	f010 000f 	ands.w	r0, r0, #15
   8185c:	d16a      	bne.n	81934 <iso7816_decode_atr+0x198>
   8185e:	4674      	mov	r4, lr
		return (td1 & 0xf);
	}
	
	// Propose speeds to card
	iso7816_send_char(p_usart, 0xff);
   81860:	21ff      	movs	r1, #255	; 0xff
   81862:	4670      	mov	r0, lr
   81864:	4d38      	ldr	r5, [pc, #224]	; (81948 <iso7816_decode_atr+0x1ac>)
   81866:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0x10);
   81868:	2110      	movs	r1, #16
   8186a:	4620      	mov	r0, r4
   8186c:	47a8      	blx	r5
	iso7816_send_char(p_usart, ta1);
   8186e:	4f35      	ldr	r7, [pc, #212]	; (81944 <iso7816_decode_atr+0x1a8>)
   81870:	7839      	ldrb	r1, [r7, #0]
   81872:	4620      	mov	r0, r4
   81874:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0xff ^ 0x10 ^ ta1);
   81876:	7839      	ldrb	r1, [r7, #0]
   81878:	f081 01ef 	eor.w	r1, r1, #239	; 0xef
   8187c:	4620      	mov	r0, r4
   8187e:	47a8      	blx	r5

	iso7816_get_char(p_usart, &ppss[0]);
   81880:	a901      	add	r1, sp, #4
   81882:	4620      	mov	r0, r4
   81884:	4d31      	ldr	r5, [pc, #196]	; (8194c <iso7816_decode_atr+0x1b0>)
   81886:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[1]);
   81888:	f10d 0105 	add.w	r1, sp, #5
   8188c:	4620      	mov	r0, r4
   8188e:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[2]);
   81890:	f10d 0106 	add.w	r1, sp, #6
   81894:	4620      	mov	r0, r4
   81896:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[3]);
   81898:	f10d 0107 	add.w	r1, sp, #7
   8189c:	4620      	mov	r0, r4
   8189e:	47a8      	blx	r5

	if ((ppss[0] != 0xff) || (ppss[1] != 0x10)) {
   818a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818a4:	2bff      	cmp	r3, #255	; 0xff
   818a6:	d103      	bne.n	818b0 <iso7816_decode_atr+0x114>
   818a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   818ac:	2b10      	cmp	r3, #16
   818ae:	d00c      	beq.n	818ca <iso7816_decode_atr+0x12e>
		// Fail - if card doesn't support this we reset card again
		iso7816_warm_reset(p_usart);
   818b0:	4620      	mov	r0, r4
   818b2:	4b27      	ldr	r3, [pc, #156]	; (81950 <iso7816_decode_atr+0x1b4>)
   818b4:	4798      	blx	r3
		// Read ATR to clear buffer
		uint8_t plength;
		iso7816_data_block_atr(p_usart, p_atr, &plength);
   818b6:	f10d 0203 	add.w	r2, sp, #3
   818ba:	4641      	mov	r1, r8
   818bc:	4620      	mov	r0, r4
   818be:	4b25      	ldr	r3, [pc, #148]	; (81954 <iso7816_decode_atr+0x1b8>)
   818c0:	4798      	blx	r3
		return 0;
   818c2:	2000      	movs	r0, #0
   818c4:	e036      	b.n	81934 <iso7816_decode_atr+0x198>
	uint32_t fidi = 0;
   818c6:	2600      	movs	r6, #0
   818c8:	e7c6      	b.n	81858 <iso7816_decode_atr+0xbc>
	}

	if (ppss[2] != ta1) {
   818ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
   818ce:	4b1d      	ldr	r3, [pc, #116]	; (81944 <iso7816_decode_atr+0x1a8>)
   818d0:	781b      	ldrb	r3, [r3, #0]
   818d2:	4293      	cmp	r3, r2
   818d4:	d013      	beq.n	818fe <iso7816_decode_atr+0x162>
		if (ppss[3] == (0xff ^ 0x10 ^ ppss[2])) {
   818d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   818da:	f082 02ef 	eor.w	r2, r2, #239	; 0xef
   818de:	4293      	cmp	r3, r2
   818e0:	d11c      	bne.n	8191c <iso7816_decode_atr+0x180>
			fidi = ftable[(ppss[3] >>
					4) & 0xf] / dtable[ppss[3] & 0xf];
   818e2:	091a      	lsrs	r2, r3, #4
			fidi = ftable[(ppss[3] >>
   818e4:	a91c      	add	r1, sp, #112	; 0x70
   818e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
					4) & 0xf] / dtable[ppss[3] & 0xf];
   818ea:	f003 030f 	and.w	r3, r3, #15
   818ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
			fidi = ftable[(ppss[3] >>
   818f2:	f852 6c40 	ldr.w	r6, [r2, #-64]
   818f6:	f853 3c68 	ldr.w	r3, [r3, #-104]
   818fa:	fbb6 f6f3 	udiv	r6, r6, r3
			return 0;
		}
	}

	/* Enable TX and RX. */
	usart_disable_rx(p_usart);
   818fe:	4620      	mov	r0, r4
   81900:	4b15      	ldr	r3, [pc, #84]	; (81958 <iso7816_decode_atr+0x1bc>)
   81902:	4798      	blx	r3
	usart_disable_tx(p_usart);
   81904:	4620      	mov	r0, r4
   81906:	4b15      	ldr	r3, [pc, #84]	; (8195c <iso7816_decode_atr+0x1c0>)
   81908:	4798      	blx	r3

	p_usart->US_FIDI = fidi;
   8190a:	6426      	str	r6, [r4, #64]	; 0x40

	usart_enable_rx(p_usart);
   8190c:	4620      	mov	r0, r4
   8190e:	4b14      	ldr	r3, [pc, #80]	; (81960 <iso7816_decode_atr+0x1c4>)
   81910:	4798      	blx	r3
	usart_enable_tx(p_usart);
   81912:	4620      	mov	r0, r4
   81914:	4b13      	ldr	r3, [pc, #76]	; (81964 <iso7816_decode_atr+0x1c8>)
   81916:	4798      	blx	r3

	return 0;
   81918:	2000      	movs	r0, #0
   8191a:	e00b      	b.n	81934 <iso7816_decode_atr+0x198>
			iso7816_warm_reset(p_usart);
   8191c:	4620      	mov	r0, r4
   8191e:	4b0c      	ldr	r3, [pc, #48]	; (81950 <iso7816_decode_atr+0x1b4>)
   81920:	4798      	blx	r3
			iso7816_data_block_atr(p_usart, p_atr, &plength);
   81922:	f10d 0203 	add.w	r2, sp, #3
   81926:	4641      	mov	r1, r8
   81928:	4620      	mov	r0, r4
   8192a:	4b0a      	ldr	r3, [pc, #40]	; (81954 <iso7816_decode_atr+0x1b8>)
   8192c:	4798      	blx	r3
			return 0;
   8192e:	2000      	movs	r0, #0
   81930:	e000      	b.n	81934 <iso7816_decode_atr+0x198>
		return 0;
   81932:	2000      	movs	r0, #0
}
   81934:	b01c      	add	sp, #112	; 0x70
   81936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8193a:	bf00      	nop
   8193c:	0008e3b8 	.word	0x0008e3b8
   81940:	20001928 	.word	0x20001928
   81944:	20001926 	.word	0x20001926
   81948:	0008116d 	.word	0x0008116d
   8194c:	000810d5 	.word	0x000810d5
   81950:	00081719 	.word	0x00081719
   81954:	000815a5 	.word	0x000815a5
   81958:	00086e53 	.word	0x00086e53
   8195c:	00086e43 	.word	0x00086e43
   81960:	00086e4d 	.word	0x00086e4d
   81964:	00086e3d 	.word	0x00086e3d

00081968 <iso7816_init>:
 * \param ul_mck          USART module input clock frequency.
 * \param ul_rst_pin_idx  Control smart card RST pin index.
 */
void iso7816_init(Usart* p_usart, const usart_iso7816_opt_t *p_usart_opt,
		uint32_t ul_mck, uint32_t ul_rst_pin_idx)
{
   81968:	b570      	push	{r4, r5, r6, lr}
   8196a:	4604      	mov	r4, r0
   8196c:	460d      	mov	r5, r1
   8196e:	4616      	mov	r6, r2
	/* Pin RST of ISO7816 initialize. */
	gs_ul_rst_pin_idx = ul_rst_pin_idx;
   81970:	4a0d      	ldr	r2, [pc, #52]	; (819a8 <iso7816_init+0x40>)
   81972:	6013      	str	r3, [r2, #0]
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   81974:	4618      	mov	r0, r3
   81976:	4b0d      	ldr	r3, [pc, #52]	; (819ac <iso7816_init+0x44>)
   81978:	4798      	blx	r3

	/* Init the global variable for ISO7816. */
	g_ul_clk = ul_mck;
   8197a:	4b0d      	ldr	r3, [pc, #52]	; (819b0 <iso7816_init+0x48>)
   8197c:	601e      	str	r6, [r3, #0]

	usart_init_iso7816(p_usart, p_usart_opt, g_ul_clk);
   8197e:	681a      	ldr	r2, [r3, #0]
   81980:	4629      	mov	r1, r5
   81982:	4620      	mov	r0, r4
   81984:	4b0b      	ldr	r3, [pc, #44]	; (819b4 <iso7816_init+0x4c>)
   81986:	4798      	blx	r3

	/* Disable interrupts. */
	usart_disable_interrupt(p_usart, 0xffffffff);
   81988:	f04f 31ff 	mov.w	r1, #4294967295
   8198c:	4620      	mov	r0, r4
   8198e:	4b0a      	ldr	r3, [pc, #40]	; (819b8 <iso7816_init+0x50>)
   81990:	4798      	blx	r3

	/* Write the Timeguard Register. */
	usart_set_tx_timeguard(p_usart, 5);
   81992:	2105      	movs	r1, #5
   81994:	4620      	mov	r0, r4
   81996:	4b09      	ldr	r3, [pc, #36]	; (819bc <iso7816_init+0x54>)
   81998:	4798      	blx	r3

	/* Enable TX and RX. */
	usart_enable_rx(p_usart);
   8199a:	4620      	mov	r0, r4
   8199c:	4b08      	ldr	r3, [pc, #32]	; (819c0 <iso7816_init+0x58>)
   8199e:	4798      	blx	r3
	usart_enable_tx(p_usart);
   819a0:	4620      	mov	r0, r4
   819a2:	4b08      	ldr	r3, [pc, #32]	; (819c4 <iso7816_init+0x5c>)
   819a4:	4798      	blx	r3
   819a6:	bd70      	pop	{r4, r5, r6, pc}
   819a8:	200023f4 	.word	0x200023f4
   819ac:	000851d1 	.word	0x000851d1
   819b0:	200023f0 	.word	0x200023f0
   819b4:	00086c05 	.word	0x00086c05
   819b8:	00086e5d 	.word	0x00086e5d
   819bc:	00086e49 	.word	0x00086e49
   819c0:	00086e4d 	.word	0x00086e4d
   819c4:	00086e3d 	.word	0x00086e3d

000819c8 <ctrl_scarddata_req>:
#define SCARD_MODE_AT88SC102_COMPAREBIT 0x08

/* Handle "Smartcard Data" request */
bool ctrl_scarddata_req(void)
{
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819c8:	4b0c      	ldr	r3, [pc, #48]	; (819fc <ctrl_scarddata_req+0x34>)
   819ca:	8859      	ldrh	r1, [r3, #2]
   819cc:	0a0b      	lsrs	r3, r1, #8
	uint8_t datalen = (udd_g_ctrlreq.req.wValue) & 0xFF;
	uint16_t rxlen;
	
	if (offset > scard_rx_buffer_size){
   819ce:	4a0c      	ldr	r2, [pc, #48]	; (81a00 <ctrl_scarddata_req+0x38>)
   819d0:	8812      	ldrh	r2, [r2, #0]
   819d2:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   819d6:	d30d      	bcc.n	819f4 <ctrl_scarddata_req+0x2c>
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819d8:	b2d8      	uxtb	r0, r3
		/* No data to send - point our buffer to memory actually used to prevent errors */
		rxlen = 0;
		offset = 0;
	} else {
		rxlen = scard_rx_buffer_size - offset;
   819da:	1ad3      	subs	r3, r2, r3
   819dc:	b29b      	uxth	r3, r3
   819de:	b2c9      	uxtb	r1, r1
   819e0:	428b      	cmp	r3, r1
   819e2:	bf28      	it	cs
   819e4:	460b      	movcs	r3, r1
		if (rxlen > datalen){
			rxlen = datalen;
		}
	}
	
	udd_g_ctrlreq.payload = scard_rx_buffer + offset;
   819e6:	4905      	ldr	r1, [pc, #20]	; (819fc <ctrl_scarddata_req+0x34>)
   819e8:	4a06      	ldr	r2, [pc, #24]	; (81a04 <ctrl_scarddata_req+0x3c>)
   819ea:	4402      	add	r2, r0
   819ec:	608a      	str	r2, [r1, #8]
	udd_g_ctrlreq.payload_size = rxlen;
   819ee:	818b      	strh	r3, [r1, #12]
	
	return true;
}
   819f0:	2001      	movs	r0, #1
   819f2:	4770      	bx	lr
		rxlen = 0;
   819f4:	2300      	movs	r3, #0
		offset = 0;
   819f6:	4618      	mov	r0, r3
   819f8:	e7f5      	b.n	819e6 <ctrl_scarddata_req+0x1e>
   819fa:	bf00      	nop
   819fc:	20002df4 	.word	0x20002df4
   81a00:	200024f8 	.word	0x200024f8
   81a04:	200024fc 	.word	0x200024fc

00081a08 <ctrl_scardconfig_req>:
{
	/* Version information, used to indicate to host computer what the firmware in the CW-Lite 
	   supports. */
	static uint8_t scard_protocol_version = 02;
	
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81a08:	4b0e      	ldr	r3, [pc, #56]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a0a:	789b      	ldrb	r3, [r3, #2]
   81a0c:	2b01      	cmp	r3, #1
   81a0e:	d004      	beq.n	81a1a <ctrl_scardconfig_req+0x12>
   81a10:	2b02      	cmp	r3, #2
   81a12:	d00a      	beq.n	81a2a <ctrl_scardconfig_req+0x22>
   81a14:	b17b      	cbz	r3, 81a36 <ctrl_scardconfig_req+0x2e>
   81a16:	2000      	movs	r0, #0
   81a18:	4770      	bx	lr
		case SCARD_CFG_ATR:
			udd_g_ctrlreq.payload = scard_atr;
   81a1a:	4b0a      	ldr	r3, [pc, #40]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a1c:	4a0a      	ldr	r2, [pc, #40]	; (81a48 <ctrl_scardconfig_req+0x40>)
   81a1e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = scard_atr_size;
   81a20:	4a0a      	ldr	r2, [pc, #40]	; (81a4c <ctrl_scardconfig_req+0x44>)
   81a22:	7812      	ldrb	r2, [r2, #0]
   81a24:	819a      	strh	r2, [r3, #12]
			return true;
   81a26:	2001      	movs	r0, #1
   81a28:	4770      	bx	lr
			break;
			
		case SCARD_CFG_PROTOCOL:
			udd_g_ctrlreq.payload = &scard_protocol;
   81a2a:	4b06      	ldr	r3, [pc, #24]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a2c:	4a08      	ldr	r2, [pc, #32]	; (81a50 <ctrl_scardconfig_req+0x48>)
   81a2e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a30:	2001      	movs	r0, #1
   81a32:	8198      	strh	r0, [r3, #12]
			return true;
   81a34:	4770      	bx	lr
			break;
			
		case SCARD_CFG_VERSION:
			udd_g_ctrlreq.payload = &scard_protocol_version;
   81a36:	4b03      	ldr	r3, [pc, #12]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a38:	4a06      	ldr	r2, [pc, #24]	; (81a54 <ctrl_scardconfig_req+0x4c>)
   81a3a:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a3c:	2001      	movs	r0, #1
   81a3e:	8198      	strh	r0, [r3, #12]
		default:
			return false;
			break;
	}
	
}
   81a40:	4770      	bx	lr
   81a42:	bf00      	nop
   81a44:	20002df4 	.word	0x20002df4
   81a48:	20002600 	.word	0x20002600
   81a4c:	200025fc 	.word	0x200025fc
   81a50:	20002638 	.word	0x20002638
   81a54:	200002f1 	.word	0x200002f1

00081a58 <ctrl_scardaux_req>:

/* Handle "Smartcard Auxilary" request */
bool ctrl_scardaux_req(void)
{
	if(udd_g_ctrlreq.req.wValue == SCARD_MODE_AT88SC102_IN)
   81a58:	4b05      	ldr	r3, [pc, #20]	; (81a70 <ctrl_scardaux_req+0x18>)
   81a5a:	885b      	ldrh	r3, [r3, #2]
   81a5c:	2b02      	cmp	r3, #2
   81a5e:	d001      	beq.n	81a64 <ctrl_scardaux_req+0xc>
	{	
		udd_g_ctrlreq.payload = &at88sc102_status;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
   81a60:	2000      	movs	r0, #0
}
   81a62:	4770      	bx	lr
		udd_g_ctrlreq.payload = &at88sc102_status;
   81a64:	4b02      	ldr	r3, [pc, #8]	; (81a70 <ctrl_scardaux_req+0x18>)
   81a66:	4a03      	ldr	r2, [pc, #12]	; (81a74 <ctrl_scardaux_req+0x1c>)
   81a68:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size = 1;
   81a6a:	2001      	movs	r0, #1
   81a6c:	8198      	strh	r0, [r3, #12]
		return true;
   81a6e:	4770      	bx	lr
   81a70:	20002df4 	.word	0x20002df4
   81a74:	20002637 	.word	0x20002637

00081a78 <ctrl_scarddata_cb>:

/* Handle "Smartcard Data" Output from Computer */
void ctrl_scarddata_cb(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81a78:	4b11      	ldr	r3, [pc, #68]	; (81ac0 <ctrl_scarddata_cb+0x48>)
   81a7a:	88d8      	ldrh	r0, [r3, #6]
   81a7c:	899b      	ldrh	r3, [r3, #12]
   81a7e:	4283      	cmp	r3, r0
   81a80:	d31d      	bcc.n	81abe <ctrl_scarddata_cb+0x46>
	
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a82:	b1e0      	cbz	r0, 81abe <ctrl_scarddata_cb+0x46>
{
   81a84:	b5f0      	push	{r4, r5, r6, r7, lr}
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81a86:	4b0e      	ldr	r3, [pc, #56]	; (81ac0 <ctrl_scarddata_cb+0x48>)
   81a88:	885c      	ldrh	r4, [r3, #2]
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81a8a:	f8d3 e008 	ldr.w	lr, [r3, #8]
   81a8e:	1c66      	adds	r6, r4, #1
   81a90:	b2b6      	uxth	r6, r6
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a92:	2200      	movs	r2, #0
   81a94:	4613      	mov	r3, r2
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81a96:	f8df c030 	ldr.w	ip, [pc, #48]	; 81ac8 <ctrl_scarddata_cb+0x50>
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81a9a:	4f0a      	ldr	r7, [pc, #40]	; (81ac4 <ctrl_scarddata_cb+0x4c>)
   81a9c:	e004      	b.n	81aa8 <ctrl_scarddata_cb+0x30>
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a9e:	1c53      	adds	r3, r2, #1
   81aa0:	b2da      	uxtb	r2, r3
   81aa2:	4613      	mov	r3, r2
   81aa4:	4290      	cmp	r0, r2
   81aa6:	d909      	bls.n	81abc <ctrl_scarddata_cb+0x44>
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81aa8:	1911      	adds	r1, r2, r4
   81aaa:	29ff      	cmp	r1, #255	; 0xff
   81aac:	dcf7      	bgt.n	81a9e <ctrl_scarddata_cb+0x26>
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81aae:	f81e 5002 	ldrb.w	r5, [lr, r2]
   81ab2:	f80c 5001 	strb.w	r5, [ip, r1]
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81ab6:	4433      	add	r3, r6
   81ab8:	803b      	strh	r3, [r7, #0]
   81aba:	e7f0      	b.n	81a9e <ctrl_scarddata_cb+0x26>
		}
	}
}
   81abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81abe:	4770      	bx	lr
   81ac0:	20002df4 	.word	0x20002df4
   81ac4:	2000263a 	.word	0x2000263a
   81ac8:	200023f8 	.word	0x200023f8

00081acc <ctrl_scardaux_cb>:
	}
}

/* Handle "Smartcard Aux" Output from Computer */
void ctrl_scardaux_cb(void)
{
   81acc:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81ace:	4a2d      	ldr	r2, [pc, #180]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81ad0:	88d3      	ldrh	r3, [r2, #6]
   81ad2:	8992      	ldrh	r2, [r2, #12]
   81ad4:	429a      	cmp	r2, r3
   81ad6:	d303      	bcc.n	81ae0 <ctrl_scardaux_cb+0x14>
	
	if((udd_g_ctrlreq.req.wValue & 0xFF) == SCARD_MODE_AT88SC102_OUT)
   81ad8:	4a2a      	ldr	r2, [pc, #168]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81ada:	7892      	ldrb	r2, [r2, #2]
   81adc:	2a03      	cmp	r2, #3
   81ade:	d000      	beq.n	81ae2 <ctrl_scardaux_cb+0x16>
				break;
		}
		
	}
	return;
}
   81ae0:	bd08      	pop	{r3, pc}
		at88sc102_status = 0;
   81ae2:	4a29      	ldr	r2, [pc, #164]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81ae4:	2100      	movs	r1, #0
   81ae6:	7011      	strb	r1, [r2, #0]
		if (udd_g_ctrlreq.req.wLength < 1) return;
   81ae8:	2b00      	cmp	r3, #0
   81aea:	d0f9      	beq.n	81ae0 <ctrl_scardaux_cb+0x14>
		udd_g_ctrlreq.req.wLength--;
   81aec:	3b01      	subs	r3, #1
   81aee:	b29b      	uxth	r3, r3
   81af0:	4a24      	ldr	r2, [pc, #144]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81af2:	80d3      	strh	r3, [r2, #6]
		switch(udd_g_ctrlreq.payload[0]) {
   81af4:	6890      	ldr	r0, [r2, #8]
   81af6:	7802      	ldrb	r2, [r0, #0]
   81af8:	3a02      	subs	r2, #2
   81afa:	2a06      	cmp	r2, #6
   81afc:	d8f0      	bhi.n	81ae0 <ctrl_scardaux_cb+0x14>
   81afe:	e8df f002 	tbb	[pc, r2]
   81b02:	0b04      	.short	0x0b04
   81b04:	2f261e15 	.word	0x2f261e15
   81b08:	38          	.byte	0x38
   81b09:	00          	.byte	0x00
				initPortSMC();
   81b0a:	4b20      	ldr	r3, [pc, #128]	; (81b8c <ctrl_scardaux_cb+0xc0>)
   81b0c:	4798      	blx	r3
				at88sc102_status = firstDetectFunctionSMC();
   81b0e:	4b20      	ldr	r3, [pc, #128]	; (81b90 <ctrl_scardaux_cb+0xc4>)
   81b10:	4798      	blx	r3
   81b12:	4b1d      	ldr	r3, [pc, #116]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b14:	7018      	strb	r0, [r3, #0]
				break;
   81b16:	e7e3      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b18:	2b01      	cmp	r3, #1
   81b1a:	d9e1      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+1)), FALSE);
   81b1c:	2100      	movs	r1, #0
   81b1e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   81b22:	4b1c      	ldr	r3, [pc, #112]	; (81b94 <ctrl_scardaux_cb+0xc8>)
   81b24:	4798      	blx	r3
   81b26:	4b18      	ldr	r3, [pc, #96]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b28:	7018      	strb	r0, [r3, #0]
				break;
   81b2a:	e7d9      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b2c:	2b01      	cmp	r3, #1
   81b2e:	d9d7      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				writeSecurityCode(((uint16_t *)(udd_g_ctrlreq.payload+1)));
   81b30:	3001      	adds	r0, #1
   81b32:	4b19      	ldr	r3, [pc, #100]	; (81b98 <ctrl_scardaux_cb+0xcc>)
   81b34:	4798      	blx	r3
				at88sc102_status = 1;
   81b36:	4b14      	ldr	r3, [pc, #80]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b38:	2201      	movs	r2, #1
   81b3a:	701a      	strb	r2, [r3, #0]
				break;
   81b3c:	e7d0      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (transformBlankCardIntoMooltipass() == RETURN_OK){
   81b3e:	4b17      	ldr	r3, [pc, #92]	; (81b9c <ctrl_scardaux_cb+0xd0>)
   81b40:	4798      	blx	r3
   81b42:	2800      	cmp	r0, #0
   81b44:	d1cc      	bne.n	81ae0 <ctrl_scardaux_cb+0x14>
					at88sc102_status = 1;
   81b46:	4b10      	ldr	r3, [pc, #64]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b48:	2201      	movs	r2, #1
   81b4a:	701a      	strb	r2, [r3, #0]
   81b4c:	e7c8      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 3) return;
   81b4e:	2b02      	cmp	r3, #2
   81b50:	d9c6      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+2)), *(udd_g_ctrlreq.payload+1));
   81b52:	7841      	ldrb	r1, [r0, #1]
   81b54:	8840      	ldrh	r0, [r0, #2]
   81b56:	4b0f      	ldr	r3, [pc, #60]	; (81b94 <ctrl_scardaux_cb+0xc8>)
   81b58:	4798      	blx	r3
   81b5a:	4b0b      	ldr	r3, [pc, #44]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b5c:	7018      	strb	r0, [r3, #0]
				break;
   81b5e:	e7bf      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = getNumberOfSecurityCodeTriesLeft();
   81b60:	4b0f      	ldr	r3, [pc, #60]	; (81ba0 <ctrl_scardaux_cb+0xd4>)
   81b62:	4798      	blx	r3
   81b64:	4a08      	ldr	r2, [pc, #32]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b66:	7010      	strb	r0, [r2, #0]
				udd_g_ctrlreq.payload = &at88sc102_status;
   81b68:	4b06      	ldr	r3, [pc, #24]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81b6a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
   81b6c:	2201      	movs	r2, #1
   81b6e:	819a      	strh	r2, [r3, #12]
				break;
   81b70:	e7b6      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				compareBit(15, 1);
   81b72:	2101      	movs	r1, #1
   81b74:	200f      	movs	r0, #15
   81b76:	4b0b      	ldr	r3, [pc, #44]	; (81ba4 <ctrl_scardaux_cb+0xd8>)
   81b78:	4798      	blx	r3
				at88sc102_status = 1; 
   81b7a:	4b03      	ldr	r3, [pc, #12]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b7c:	2201      	movs	r2, #1
   81b7e:	701a      	strb	r2, [r3, #0]
				break;
   81b80:	e7ae      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
   81b82:	bf00      	nop
   81b84:	20002df4 	.word	0x20002df4
   81b88:	20002637 	.word	0x20002637
   81b8c:	00080fed 	.word	0x00080fed
   81b90:	00080ec5 	.word	0x00080ec5
   81b94:	00080c0d 	.word	0x00080c0d
   81b98:	0008089d 	.word	0x0008089d
   81b9c:	00080935 	.word	0x00080935
   81ba0:	000809b9 	.word	0x000809b9
   81ba4:	00081011 	.word	0x00081011

00081ba8 <scard_reset_init>:

/* Reset Smart-Card Interface on SAM3U Device */
void scard_reset_init(void)
{
   81ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81bac:	b088      	sub	sp, #32
	usart_iso7816_opt_t conf_iso7816_t;
	conf_iso7816_t.iso7816_hz = ISO7816_BAUDRATE *ISO7816_FI_DI; //4000000UL;
   81bae:	4b31      	ldr	r3, [pc, #196]	; (81c74 <scard_reset_init+0xcc>)
   81bb0:	9300      	str	r3, [sp, #0]
	conf_iso7816_t.fidi_ratio = ISO7816_FI_DI;
   81bb2:	f44f 73ba 	mov.w	r3, #372	; 0x174
   81bb6:	9301      	str	r3, [sp, #4]
	conf_iso7816_t.parity_type= US_MR_PAR_EVEN;
   81bb8:	2300      	movs	r3, #0
   81bba:	9302      	str	r3, [sp, #8]
	conf_iso7816_t.inhibit_nack = 0x00;
   81bbc:	9303      	str	r3, [sp, #12]
	conf_iso7816_t.dis_suc_nack = 0x00;
   81bbe:	9304      	str	r3, [sp, #16]
	conf_iso7816_t.max_iterations = 0x03;
   81bc0:	2503      	movs	r5, #3
   81bc2:	9505      	str	r5, [sp, #20]
	conf_iso7816_t.bit_order = 0x00;
   81bc4:	9306      	str	r3, [sp, #24]
	conf_iso7816_t.protocol_type = 0x00;	/* T=0 Protocol */
   81bc6:	9307      	str	r3, [sp, #28]
   81bc8:	200f      	movs	r0, #15
   81bca:	4b2b      	ldr	r3, [pc, #172]	; (81c78 <scard_reset_init+0xd0>)
   81bcc:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	gpio_configure_pin(PIN_USART2_TXD, PIN_USART2_TXD_FLAGS);
   81bce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bd2:	2016      	movs	r0, #22
   81bd4:	4c29      	ldr	r4, [pc, #164]	; (81c7c <scard_reset_init+0xd4>)
   81bd6:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART2_SCK, PIN_USART2_SCK_FLAGS);
   81bd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81bdc:	2019      	movs	r0, #25
   81bde:	47a0      	blx	r4
	gpio_configure_pin(PIN_ISO7816_RST_IDX, PIN_ISO7816_RST_FLAG);
   81be0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81be4:	4628      	mov	r0, r5
   81be6:	47a0      	blx	r4
	iso7816_init(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz(), PIN_ISO7816_RST_IDX);
   81be8:	4c25      	ldr	r4, [pc, #148]	; (81c80 <scard_reset_init+0xd8>)
   81bea:	462b      	mov	r3, r5
   81bec:	4a25      	ldr	r2, [pc, #148]	; (81c84 <scard_reset_init+0xdc>)
   81bee:	4669      	mov	r1, sp
   81bf0:	4620      	mov	r0, r4
   81bf2:	4d25      	ldr	r5, [pc, #148]	; (81c88 <scard_reset_init+0xe0>)
   81bf4:	47a8      	blx	r5
	
	/* Reset (includes power off/on */
	iso7816_warm_reset(SCARD_USART);
   81bf6:	4620      	mov	r0, r4
   81bf8:	4b24      	ldr	r3, [pc, #144]	; (81c8c <scard_reset_init+0xe4>)
   81bfa:	4798      	blx	r3
	
	iso7816_data_block_atr(SCARD_USART, scard_atr, &scard_atr_size);
   81bfc:	4d24      	ldr	r5, [pc, #144]	; (81c90 <scard_reset_init+0xe8>)
   81bfe:	4e25      	ldr	r6, [pc, #148]	; (81c94 <scard_reset_init+0xec>)
   81c00:	462a      	mov	r2, r5
   81c02:	4631      	mov	r1, r6
   81c04:	4620      	mov	r0, r4
   81c06:	4b24      	ldr	r3, [pc, #144]	; (81c98 <scard_reset_init+0xf0>)
   81c08:	4798      	blx	r3
	scard_protocol = iso7816_decode_atr(SCARD_USART, scard_atr);
   81c0a:	4631      	mov	r1, r6
   81c0c:	4620      	mov	r0, r4
   81c0e:	4b23      	ldr	r3, [pc, #140]	; (81c9c <scard_reset_init+0xf4>)
   81c10:	4798      	blx	r3
   81c12:	4b23      	ldr	r3, [pc, #140]	; (81ca0 <scard_reset_init+0xf8>)
   81c14:	7018      	strb	r0, [r3, #0]
	
	printf("ATR (%d len): ", scard_atr_size);
   81c16:	7829      	ldrb	r1, [r5, #0]
   81c18:	4822      	ldr	r0, [pc, #136]	; (81ca4 <scard_reset_init+0xfc>)
   81c1a:	4b23      	ldr	r3, [pc, #140]	; (81ca8 <scard_reset_init+0x100>)
   81c1c:	4798      	blx	r3
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c1e:	782b      	ldrb	r3, [r5, #0]
   81c20:	b16b      	cbz	r3, 81c3e <scard_reset_init+0x96>
   81c22:	4635      	mov	r5, r6
   81c24:	2400      	movs	r4, #0
		printf("%02x ", scard_atr[i]);
   81c26:	f8df 8094 	ldr.w	r8, [pc, #148]	; 81cbc <scard_reset_init+0x114>
   81c2a:	4f1f      	ldr	r7, [pc, #124]	; (81ca8 <scard_reset_init+0x100>)
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c2c:	4e18      	ldr	r6, [pc, #96]	; (81c90 <scard_reset_init+0xe8>)
		printf("%02x ", scard_atr[i]);
   81c2e:	f815 1b01 	ldrb.w	r1, [r5], #1
   81c32:	4640      	mov	r0, r8
   81c34:	47b8      	blx	r7
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c36:	3401      	adds	r4, #1
   81c38:	7833      	ldrb	r3, [r6, #0]
   81c3a:	42a3      	cmp	r3, r4
   81c3c:	d8f7      	bhi.n	81c2e <scard_reset_init+0x86>
	}
	printf("\n");
   81c3e:	481b      	ldr	r0, [pc, #108]	; (81cac <scard_reset_init+0x104>)
   81c40:	4b19      	ldr	r3, [pc, #100]	; (81ca8 <scard_reset_init+0x100>)
   81c42:	4798      	blx	r3
	
	if (scard_protocol == 1) {
   81c44:	4b16      	ldr	r3, [pc, #88]	; (81ca0 <scard_reset_init+0xf8>)
   81c46:	781b      	ldrb	r3, [r3, #0]
   81c48:	2b01      	cmp	r3, #1
   81c4a:	d002      	beq.n	81c52 <scard_reset_init+0xaa>
		/* Enable TX and RX. */
		usart_enable_rx(SCARD_USART);
		usart_enable_tx(SCARD_USART);
	}

}
   81c4c:	b008      	add	sp, #32
   81c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conf_iso7816_t.protocol_type  = 1;
   81c52:	9307      	str	r3, [sp, #28]
		conf_iso7816_t.max_iterations = 0;
   81c54:	2300      	movs	r3, #0
   81c56:	9305      	str	r3, [sp, #20]
		usart_init_iso7816(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz());
   81c58:	4c09      	ldr	r4, [pc, #36]	; (81c80 <scard_reset_init+0xd8>)
   81c5a:	4a0a      	ldr	r2, [pc, #40]	; (81c84 <scard_reset_init+0xdc>)
   81c5c:	4669      	mov	r1, sp
   81c5e:	4620      	mov	r0, r4
   81c60:	4b13      	ldr	r3, [pc, #76]	; (81cb0 <scard_reset_init+0x108>)
   81c62:	4798      	blx	r3
		usart_enable_rx(SCARD_USART);
   81c64:	4620      	mov	r0, r4
   81c66:	4b13      	ldr	r3, [pc, #76]	; (81cb4 <scard_reset_init+0x10c>)
   81c68:	4798      	blx	r3
		usart_enable_tx(SCARD_USART);
   81c6a:	4620      	mov	r0, r4
   81c6c:	4b12      	ldr	r3, [pc, #72]	; (81cb8 <scard_reset_init+0x110>)
   81c6e:	4798      	blx	r3
}
   81c70:	e7ec      	b.n	81c4c <scard_reset_init+0xa4>
   81c72:	bf00      	nop
   81c74:	00367e00 	.word	0x00367e00
   81c78:	00085531 	.word	0x00085531
   81c7c:	000851ed 	.word	0x000851ed
   81c80:	40098000 	.word	0x40098000
   81c84:	05b8d800 	.word	0x05b8d800
   81c88:	00081969 	.word	0x00081969
   81c8c:	00081719 	.word	0x00081719
   81c90:	200025fc 	.word	0x200025fc
   81c94:	20002600 	.word	0x20002600
   81c98:	000815a5 	.word	0x000815a5
   81c9c:	0008179d 	.word	0x0008179d
   81ca0:	20002638 	.word	0x20002638
   81ca4:	0008e424 	.word	0x0008e424
   81ca8:	0008788d 	.word	0x0008788d
   81cac:	0008e518 	.word	0x0008e518
   81cb0:	00086c05 	.word	0x00086c05
   81cb4:	00086e4d 	.word	0x00086e4d
   81cb8:	00086e3d 	.word	0x00086e3d
   81cbc:	0008e434 	.word	0x0008e434

00081cc0 <ctrl_scardconfig_cb>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81cc0:	4b15      	ldr	r3, [pc, #84]	; (81d18 <ctrl_scardconfig_cb+0x58>)
   81cc2:	88da      	ldrh	r2, [r3, #6]
   81cc4:	899b      	ldrh	r3, [r3, #12]
   81cc6:	429a      	cmp	r2, r3
   81cc8:	d824      	bhi.n	81d14 <ctrl_scardconfig_cb+0x54>
{
   81cca:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81ccc:	4b12      	ldr	r3, [pc, #72]	; (81d18 <ctrl_scardconfig_cb+0x58>)
   81cce:	789b      	ldrb	r3, [r3, #2]
   81cd0:	2b01      	cmp	r3, #1
   81cd2:	d002      	beq.n	81cda <ctrl_scardconfig_cb+0x1a>
   81cd4:	2b05      	cmp	r3, #5
   81cd6:	d003      	beq.n	81ce0 <ctrl_scardconfig_cb+0x20>
}
   81cd8:	bd10      	pop	{r4, pc}
			scard_reset_init();
   81cda:	4b10      	ldr	r3, [pc, #64]	; (81d1c <ctrl_scardconfig_cb+0x5c>)
   81cdc:	4798      	blx	r3
			break;
   81cde:	e7fb      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
			scard_rx_buffer_size = 0;
   81ce0:	4b0f      	ldr	r3, [pc, #60]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81ce2:	2200      	movs	r2, #0
   81ce4:	801a      	strh	r2, [r3, #0]
			if (scard_protocol){
   81ce6:	4b0f      	ldr	r3, [pc, #60]	; (81d24 <ctrl_scardconfig_cb+0x64>)
   81ce8:	781b      	ldrb	r3, [r3, #0]
   81cea:	b14b      	cbz	r3, 81d00 <ctrl_scardconfig_cb+0x40>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t1(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81cec:	4b0e      	ldr	r3, [pc, #56]	; (81d28 <ctrl_scardconfig_cb+0x68>)
   81cee:	881b      	ldrh	r3, [r3, #0]
   81cf0:	4a0e      	ldr	r2, [pc, #56]	; (81d2c <ctrl_scardconfig_cb+0x6c>)
   81cf2:	490f      	ldr	r1, [pc, #60]	; (81d30 <ctrl_scardconfig_cb+0x70>)
   81cf4:	480f      	ldr	r0, [pc, #60]	; (81d34 <ctrl_scardconfig_cb+0x74>)
   81cf6:	4c10      	ldr	r4, [pc, #64]	; (81d38 <ctrl_scardconfig_cb+0x78>)
   81cf8:	47a0      	blx	r4
   81cfa:	4b09      	ldr	r3, [pc, #36]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81cfc:	8018      	strh	r0, [r3, #0]
   81cfe:	e7eb      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t0(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81d00:	4b09      	ldr	r3, [pc, #36]	; (81d28 <ctrl_scardconfig_cb+0x68>)
   81d02:	881b      	ldrh	r3, [r3, #0]
   81d04:	4a09      	ldr	r2, [pc, #36]	; (81d2c <ctrl_scardconfig_cb+0x6c>)
   81d06:	490a      	ldr	r1, [pc, #40]	; (81d30 <ctrl_scardconfig_cb+0x70>)
   81d08:	480a      	ldr	r0, [pc, #40]	; (81d34 <ctrl_scardconfig_cb+0x74>)
   81d0a:	4c0c      	ldr	r4, [pc, #48]	; (81d3c <ctrl_scardconfig_cb+0x7c>)
   81d0c:	47a0      	blx	r4
   81d0e:	4b04      	ldr	r3, [pc, #16]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81d10:	8018      	strh	r0, [r3, #0]
   81d12:	e7e1      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
   81d14:	4770      	bx	lr
   81d16:	bf00      	nop
   81d18:	20002df4 	.word	0x20002df4
   81d1c:	00081ba9 	.word	0x00081ba9
   81d20:	200024f8 	.word	0x200024f8
   81d24:	20002638 	.word	0x20002638
   81d28:	2000263a 	.word	0x2000263a
   81d2c:	200024fc 	.word	0x200024fc
   81d30:	200023f8 	.word	0x200023f8
   81d34:	40098000 	.word	0x40098000
   81d38:	000813b9 	.word	0x000813b9
   81d3c:	000811dd 	.word	0x000811dd

00081d40 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81d40:	b510      	push	{r4, lr}
   81d42:	4604      	mov	r4, r0
	int ret = 0;
	cpu_irq_enter_critical();
   81d44:	4b06      	ldr	r3, [pc, #24]	; (81d60 <FPGA_setlock+0x20>)
   81d46:	4798      	blx	r3
	if (_fpga_locked == fpga_unlocked)
   81d48:	4b06      	ldr	r3, [pc, #24]	; (81d64 <FPGA_setlock+0x24>)
   81d4a:	781b      	ldrb	r3, [r3, #0]
   81d4c:	b933      	cbnz	r3, 81d5c <FPGA_setlock+0x1c>
	{
		ret = 1;
		_fpga_locked = lockstatus;	
   81d4e:	4b05      	ldr	r3, [pc, #20]	; (81d64 <FPGA_setlock+0x24>)
   81d50:	701c      	strb	r4, [r3, #0]
		ret = 1;
   81d52:	2401      	movs	r4, #1
	}
	cpu_irq_leave_critical();
   81d54:	4b04      	ldr	r3, [pc, #16]	; (81d68 <FPGA_setlock+0x28>)
   81d56:	4798      	blx	r3
	return ret;
}
   81d58:	4620      	mov	r0, r4
   81d5a:	bd10      	pop	{r4, pc}
	int ret = 0;
   81d5c:	2400      	movs	r4, #0
   81d5e:	e7f9      	b.n	81d54 <FPGA_setlock+0x14>
   81d60:	00084ed9 	.word	0x00084ed9
   81d64:	20001929 	.word	0x20001929
   81d68:	00084f15 	.word	0x00084f15

00081d6c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
	_fpga_locked = fpga_unlocked;
   81d6c:	4b01      	ldr	r3, [pc, #4]	; (81d74 <FPGA_releaselock+0x8>)
   81d6e:	2200      	movs	r2, #0
   81d70:	701a      	strb	r2, [r3, #0]
}
   81d72:	4770      	bx	lr
   81d74:	20001929 	.word	0x20001929

00081d78 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
	return _fpga_locked;
   81d78:	4b01      	ldr	r3, [pc, #4]	; (81d80 <FPGA_lockstatus+0x8>)
   81d7a:	7818      	ldrb	r0, [r3, #0]
}
   81d7c:	4770      	bx	lr
   81d7e:	bf00      	nop
   81d80:	20001929 	.word	0x20001929

00081d84 <FPGA_setaddr>:
	FPGA_releaselock();
	cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81d84:	b508      	push	{r3, lr}
   81d86:	4601      	mov	r1, r0
	pio_sync_output_write(FPGA_ADDR_PORT, addr);
   81d88:	4804      	ldr	r0, [pc, #16]	; (81d9c <FPGA_setaddr+0x18>)
   81d8a:	4b05      	ldr	r3, [pc, #20]	; (81da0 <FPGA_setaddr+0x1c>)
   81d8c:	4798      	blx	r3
	gpio_set_pin_low(FPGA_ALE_GPIO);
   81d8e:	2035      	movs	r0, #53	; 0x35
   81d90:	4b04      	ldr	r3, [pc, #16]	; (81da4 <FPGA_setaddr+0x20>)
   81d92:	4798      	blx	r3
	gpio_set_pin_high(FPGA_ALE_GPIO);
   81d94:	2035      	movs	r0, #53	; 0x35
   81d96:	4b04      	ldr	r3, [pc, #16]	; (81da8 <FPGA_setaddr+0x24>)
   81d98:	4798      	blx	r3
}
   81d9a:	bd08      	pop	{r3, pc}
   81d9c:	400e0e00 	.word	0x400e0e00
   81da0:	0008518f 	.word	0x0008518f
   81da4:	000851d1 	.word	0x000851d1
   81da8:	000851b7 	.word	0x000851b7

00081dac <smc_normaltiming>:
		*(xram+i) = data[i];
	}
}

//Set timing for normal mode
void smc_normaltiming(void){
   81dac:	b510      	push	{r4, lr}
	smc_set_setup_timing(SMC, 0,
   81dae:	4c0b      	ldr	r4, [pc, #44]	; (81ddc <smc_normaltiming+0x30>)
   81db0:	f44f 7280 	mov.w	r2, #256	; 0x100
   81db4:	2100      	movs	r1, #0
   81db6:	4620      	mov	r0, r4
   81db8:	4b09      	ldr	r3, [pc, #36]	; (81de0 <smc_normaltiming+0x34>)
   81dba:	4798      	blx	r3
	SMC_SETUP_NCS_WR_SETUP(1) |
	SMC_SETUP_NRD_SETUP(0) |
	SMC_SETUP_NCS_RD_SETUP(0)
	);
	
	smc_set_pulse_timing(SMC, 0,
   81dbc:	4a09      	ldr	r2, [pc, #36]	; (81de4 <smc_normaltiming+0x38>)
   81dbe:	2100      	movs	r1, #0
   81dc0:	4620      	mov	r0, r4
   81dc2:	4b09      	ldr	r3, [pc, #36]	; (81de8 <smc_normaltiming+0x3c>)
   81dc4:	4798      	blx	r3
	SMC_PULSE_NCS_WR_PULSE(1) |
	SMC_PULSE_NRD_PULSE(4) |
	SMC_PULSE_NCS_RD_PULSE(4)
	);
	
	smc_set_cycle_timing(SMC, 0,
   81dc6:	4a09      	ldr	r2, [pc, #36]	; (81dec <smc_normaltiming+0x40>)
   81dc8:	2100      	movs	r1, #0
   81dca:	4620      	mov	r0, r4
   81dcc:	4b08      	ldr	r3, [pc, #32]	; (81df0 <smc_normaltiming+0x44>)
   81dce:	4798      	blx	r3
	SMC_CYCLE_NWE_CYCLE(2) |
	SMC_CYCLE_NRD_CYCLE(5)
	);
	
	smc_set_mode(SMC, 0,
   81dd0:	2203      	movs	r2, #3
   81dd2:	2100      	movs	r1, #0
   81dd4:	4620      	mov	r0, r4
   81dd6:	4b07      	ldr	r3, [pc, #28]	; (81df4 <smc_normaltiming+0x48>)
   81dd8:	4798      	blx	r3
	SMC_MODE_READ_MODE_NRD_CTRL |
	SMC_MODE_WRITE_MODE_NWE_CTRL |
	SMC_MODE_DBW_BIT_8
	);
}
   81dda:	bd10      	pop	{r4, pc}
   81ddc:	400e0000 	.word	0x400e0000
   81de0:	000850c1 	.word	0x000850c1
   81de4:	04040101 	.word	0x04040101
   81de8:	000850cd 	.word	0x000850cd
   81dec:	00050002 	.word	0x00050002
   81df0:	000850d9 	.word	0x000850d9
   81df4:	000850e5 	.word	0x000850e5

00081df8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81df8:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81dfa:	f1a1 030e 	sub.w	r3, r1, #14
   81dfe:	2b01      	cmp	r3, #1
   81e00:	d802      	bhi.n	81e08 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   81e02:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   81e06:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e08:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   81e0c:	b672      	cpsid	i
   81e0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81e12:	2500      	movs	r5, #0
   81e14:	4b0a      	ldr	r3, [pc, #40]	; (81e40 <efc_perform_command+0x48>)
   81e16:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81e18:	0212      	lsls	r2, r2, #8
   81e1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   81e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   81e22:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   81e26:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   81e28:	4311      	orrs	r1, r2
   81e2a:	4b06      	ldr	r3, [pc, #24]	; (81e44 <efc_perform_command+0x4c>)
   81e2c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   81e2e:	2c00      	cmp	r4, #0
   81e30:	d1e9      	bne.n	81e06 <efc_perform_command+0xe>
		cpu_irq_enable();
   81e32:	2201      	movs	r2, #1
   81e34:	4b02      	ldr	r3, [pc, #8]	; (81e40 <efc_perform_command+0x48>)
   81e36:	701a      	strb	r2, [r3, #0]
   81e38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81e3c:	b662      	cpsie	i
   81e3e:	bd38      	pop	{r3, r4, r5, pc}
   81e40:	200006ee 	.word	0x200006ee
   81e44:	2000006d 	.word	0x2000006d

00081e48 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81e48:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e4a:	0189      	lsls	r1, r1, #6
   81e4c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81e4e:	2402      	movs	r4, #2
   81e50:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81e52:	f04f 31ff 	mov.w	r1, #4294967295
   81e56:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81e58:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81e5a:	605a      	str	r2, [r3, #4]
}
   81e5c:	bc10      	pop	{r4}
   81e5e:	4770      	bx	lr

00081e60 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81e60:	0189      	lsls	r1, r1, #6
   81e62:	2305      	movs	r3, #5
   81e64:	5043      	str	r3, [r0, r1]
   81e66:	4770      	bx	lr

00081e68 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81e68:	0189      	lsls	r1, r1, #6
   81e6a:	2302      	movs	r3, #2
   81e6c:	5043      	str	r3, [r0, r1]
   81e6e:	4770      	bx	lr

00081e70 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81e70:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81e74:	61ca      	str	r2, [r1, #28]
   81e76:	4770      	bx	lr

00081e78 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e78:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81e7c:	624a      	str	r2, [r1, #36]	; 0x24
   81e7e:	4770      	bx	lr

00081e80 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e80:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81e84:	6a08      	ldr	r0, [r1, #32]
}
   81e86:	4770      	bx	lr

00081e88 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81e88:	b570      	push	{r4, r5, r6, lr}
   81e8a:	b086      	sub	sp, #24
   81e8c:	4604      	mov	r4, r0
   81e8e:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81e90:	2304      	movs	r3, #4
   81e92:	9300      	str	r3, [sp, #0]
   81e94:	ab02      	add	r3, sp, #8
   81e96:	220f      	movs	r2, #15
   81e98:	210e      	movs	r1, #14
   81e9a:	480d      	ldr	r0, [pc, #52]	; (81ed0 <flash_read_unique_id+0x48>)
   81e9c:	4d0d      	ldr	r5, [pc, #52]	; (81ed4 <flash_read_unique_id+0x4c>)
   81e9e:	47a8      	blx	r5
   81ea0:	b118      	cbz	r0, 81eaa <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81ea2:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   81ea4:	4628      	mov	r0, r5
   81ea6:	b006      	add	sp, #24
   81ea8:	bd70      	pop	{r4, r5, r6, pc}
   81eaa:	4605      	mov	r5, r0
   81eac:	2e04      	cmp	r6, #4
   81eae:	bf28      	it	cs
   81eb0:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81eb2:	b156      	cbz	r6, 81eca <flash_read_unique_id+0x42>
   81eb4:	aa02      	add	r2, sp, #8
   81eb6:	4623      	mov	r3, r4
   81eb8:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   81ebc:	f852 0b04 	ldr.w	r0, [r2], #4
   81ec0:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81ec4:	428b      	cmp	r3, r1
   81ec6:	d1f9      	bne.n	81ebc <flash_read_unique_id+0x34>
   81ec8:	e7ec      	b.n	81ea4 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   81eca:	4635      	mov	r5, r6
   81ecc:	e7ea      	b.n	81ea4 <flash_read_unique_id+0x1c>
   81ece:	bf00      	nop
   81ed0:	400e0800 	.word	0x400e0800
   81ed4:	20000001 	.word	0x20000001

00081ed8 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   81ed8:	2300      	movs	r3, #0
   81eda:	6043      	str	r3, [r0, #4]
   81edc:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   81ede:	6083      	str	r3, [r0, #8]
}
   81ee0:	4770      	bx	lr
	...

00081ee4 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81ee4:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   81ee6:	b672      	cpsid	i
   81ee8:	f3bf 8f5f 	dmb	sy
    // Add char to buffer
	cpu_irq_disable();
   81eec:	4b11      	ldr	r3, [pc, #68]	; (81f34 <add_to_circ_buf+0x50>)
   81eee:	2400      	movs	r4, #0
   81ef0:	701c      	strb	r4, [r3, #0]
    unsigned int newhead = cbuf->head;
   81ef2:	6804      	ldr	r4, [r0, #0]
    newhead++;
   81ef4:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   81ef6:	2cc8      	cmp	r4, #200	; 0xc8
   81ef8:	bf28      	it	cs
   81efa:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   81efc:	6843      	ldr	r3, [r0, #4]
   81efe:	42a3      	cmp	r3, r4
   81f00:	d10b      	bne.n	81f1a <add_to_circ_buf+0x36>
    {
        if (!block)
   81f02:	2a00      	cmp	r2, #0
   81f04:	d1fa      	bne.n	81efc <add_to_circ_buf+0x18>
        {
            cbuf->dropped++;
   81f06:	6883      	ldr	r3, [r0, #8]
   81f08:	3301      	adds	r3, #1
   81f0a:	6083      	str	r3, [r0, #8]
			cpu_irq_enable();
   81f0c:	4b09      	ldr	r3, [pc, #36]	; (81f34 <add_to_circ_buf+0x50>)
   81f0e:	2201      	movs	r2, #1
   81f10:	701a      	strb	r2, [r3, #0]
   81f12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f16:	b662      	cpsie	i
            return;
   81f18:	e009      	b.n	81f2e <add_to_circ_buf+0x4a>
        //TODO: Need to add processing here if you want a blocking
		//      function.
        
    }

    cbuf->buf[cbuf->head] = ch;
   81f1a:	6803      	ldr	r3, [r0, #0]
   81f1c:	4403      	add	r3, r0
   81f1e:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   81f20:	6004      	str	r4, [r0, #0]
	cpu_irq_enable();
   81f22:	4b04      	ldr	r3, [pc, #16]	; (81f34 <add_to_circ_buf+0x50>)
   81f24:	2201      	movs	r2, #1
   81f26:	701a      	strb	r2, [r3, #0]
   81f28:	f3bf 8f5f 	dmb	sy
   81f2c:	b662      	cpsie	i
}
   81f2e:	bc10      	pop	{r4}
   81f30:	4770      	bx	lr
   81f32:	bf00      	nop
   81f34:	200006ee 	.word	0x200006ee

00081f38 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81f38:	4602      	mov	r2, r0
  __ASM volatile ("cpsid i");
   81f3a:	b672      	cpsid	i
   81f3c:	f3bf 8f5f 	dmb	sy
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
	cpu_irq_disable();
   81f40:	4b0e      	ldr	r3, [pc, #56]	; (81f7c <get_from_circ_buf+0x44>)
   81f42:	2100      	movs	r1, #0
   81f44:	7019      	strb	r1, [r3, #0]
    unsigned int newtail = cbuf->tail;
   81f46:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   81f48:	18c1      	adds	r1, r0, r3
   81f4a:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head) {
   81f4c:	6811      	ldr	r1, [r2, #0]
   81f4e:	4299      	cmp	r1, r3
   81f50:	d00b      	beq.n	81f6a <get_from_circ_buf+0x32>
		cpu_irq_enable();
        return SERIAL_ERR;
	}

    newtail++;
   81f52:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   81f54:	2bc8      	cmp	r3, #200	; 0xc8
   81f56:	bf28      	it	cs
   81f58:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   81f5a:	6053      	str	r3, [r2, #4]

	cpu_irq_enable();
   81f5c:	4b07      	ldr	r3, [pc, #28]	; (81f7c <get_from_circ_buf+0x44>)
   81f5e:	2201      	movs	r2, #1
   81f60:	701a      	strb	r2, [r3, #0]
   81f62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f66:	b662      	cpsie	i
    return retval;
}
   81f68:	4770      	bx	lr
		cpu_irq_enable();
   81f6a:	4b04      	ldr	r3, [pc, #16]	; (81f7c <get_from_circ_buf+0x44>)
   81f6c:	2201      	movs	r2, #1
   81f6e:	701a      	strb	r2, [r3, #0]
   81f70:	f3bf 8f5f 	dmb	sy
   81f74:	b662      	cpsie	i
        return SERIAL_ERR;
   81f76:	20ff      	movs	r0, #255	; 0xff
   81f78:	4770      	bx	lr
   81f7a:	bf00      	nop
   81f7c:	200006ee 	.word	0x200006ee

00081f80 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81f80:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   81f82:	6840      	ldr	r0, [r0, #4]
}
   81f84:	1ac0      	subs	r0, r0, r3
   81f86:	bf18      	it	ne
   81f88:	2001      	movne	r0, #1
   81f8a:	4770      	bx	lr

00081f8c <circ_buf_count>:
  __ASM volatile ("cpsid i");
   81f8c:	b672      	cpsid	i
   81f8e:	f3bf 8f5f 	dmb	sy
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

	cpu_irq_disable();
   81f92:	4b07      	ldr	r3, [pc, #28]	; (81fb0 <circ_buf_count+0x24>)
   81f94:	2200      	movs	r2, #0
   81f96:	701a      	strb	r2, [r3, #0]
    count = cbuf->head;
   81f98:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   81f9a:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   81f9c:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   81f9e:	bf48      	it	mi
   81fa0:	30c8      	addmi	r0, #200	; 0xc8
		
	cpu_irq_enable();
   81fa2:	4b03      	ldr	r3, [pc, #12]	; (81fb0 <circ_buf_count+0x24>)
   81fa4:	2201      	movs	r2, #1
   81fa6:	701a      	strb	r2, [r3, #0]
   81fa8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81fac:	b662      	cpsie	i
    return (unsigned int)count;
}
   81fae:	4770      	bx	lr
   81fb0:	200006ee 	.word	0x200006ee

00081fb4 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   81fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fb8:	b08d      	sub	sp, #52	; 0x34
   81fba:	9103      	str	r1, [sp, #12]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   81fbc:	4b92      	ldr	r3, [pc, #584]	; (82208 <ISPProtocol_ProgramMemory+0x254>)
   81fbe:	8999      	ldrh	r1, [r3, #12]
   81fc0:	2909      	cmp	r1, #9
   81fc2:	d005      	beq.n	81fd0 <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   81fc4:	4891      	ldr	r0, [pc, #580]	; (8220c <ISPProtocol_ProgramMemory+0x258>)
   81fc6:	4b92      	ldr	r3, [pc, #584]	; (82210 <ISPProtocol_ProgramMemory+0x25c>)
   81fc8:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   81fca:	b00d      	add	sp, #52	; 0x34
   81fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fd0:	4683      	mov	fp, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   81fd2:	4b8d      	ldr	r3, [pc, #564]	; (82208 <ISPProtocol_ProgramMemory+0x254>)
   81fd4:	689a      	ldr	r2, [r3, #8]
   81fd6:	ab09      	add	r3, sp, #36	; 0x24
   81fd8:	6810      	ldr	r0, [r2, #0]
   81fda:	6851      	ldr	r1, [r2, #4]
   81fdc:	c303      	stmia	r3!, {r0, r1}
   81fde:	8912      	ldrh	r2, [r2, #8]
   81fe0:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   81fe2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   81fe6:	9305      	str	r3, [sp, #20]
   81fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   81fec:	d813      	bhi.n	82016 <ISPProtocol_ProgramMemory+0x62>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   81fee:	f1bb 0f13 	cmp.w	fp, #19
   81ff2:	bf0c      	ite	eq
   81ff4:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   81ff8:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   81ffc:	9306      	str	r3, [sp, #24]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   81ffe:	4b85      	ldr	r3, [pc, #532]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   82000:	681b      	ldr	r3, [r3, #0]
   82002:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   82004:	9b05      	ldr	r3, [sp, #20]
   82006:	2b00      	cmp	r3, #0
   82008:	d043      	beq.n	82092 <ISPProtocol_ProgramMemory+0xde>
   8200a:	2400      	movs	r4, #0
	uint16_t PollAddress       = 0;
   8200c:	9404      	str	r4, [sp, #16]
			MustLoadExtendedAddress = false;
   8200e:	4627      	mov	r7, r4
   82010:	f8cd b008 	str.w	fp, [sp, #8]
   82014:	e0a6      	b.n	82164 <ISPProtocol_ProgramMemory+0x1b0>
		avrisp_status_payload[0] = V2Command;
   82016:	4b80      	ldr	r3, [pc, #512]	; (82218 <ISPProtocol_ProgramMemory+0x264>)
   82018:	f883 b000 	strb.w	fp, [r3]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8201c:	22c0      	movs	r2, #192	; 0xc0
   8201e:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   82020:	4b7e      	ldr	r3, [pc, #504]	; (8221c <ISPProtocol_ProgramMemory+0x268>)
   82022:	2202      	movs	r2, #2
   82024:	801a      	strh	r2, [r3, #0]
		return;
   82026:	e7d0      	b.n	81fca <ISPProtocol_ProgramMemory+0x16>
			ISPTarget_LoadExtendedAddress();
   82028:	4b7d      	ldr	r3, [pc, #500]	; (82220 <ISPProtocol_ProgramMemory+0x26c>)
   8202a:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   8202c:	4b7d      	ldr	r3, [pc, #500]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   8202e:	701f      	strb	r7, [r3, #0]
   82030:	e0a3      	b.n	8217a <ISPProtocol_ProgramMemory+0x1c6>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   82032:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82036:	f043 0308 	orr.w	r3, r3, #8
   8203a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   8203e:	4b75      	ldr	r3, [pc, #468]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   82040:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82042:	f018 0f01 	tst.w	r8, #1
   82046:	f000 80d4 	beq.w	821f2 <ISPProtocol_ProgramMemory+0x23e>
			PollAddress = (CurrentAddress & 0xFFFF);
   8204a:	9304      	str	r3, [sp, #16]
			CurrentAddress++;
   8204c:	4a71      	ldr	r2, [pc, #452]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8204e:	6813      	ldr	r3, [r2, #0]
   82050:	3301      	adds	r3, #1
   82052:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82054:	9a02      	ldr	r2, [sp, #8]
   82056:	2a13      	cmp	r2, #19
   82058:	d17f      	bne.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
   8205a:	b29b      	uxth	r3, r3
   8205c:	2b00      	cmp	r3, #0
   8205e:	d17c      	bne.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
			  MustLoadExtendedAddress = true;
   82060:	2301      	movs	r3, #1
   82062:	4a70      	ldr	r2, [pc, #448]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82064:	7013      	strb	r3, [r2, #0]
   82066:	e078      	b.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
   82068:	9304      	str	r3, [sp, #16]
   8206a:	e061      	b.n	82130 <ISPProtocol_ProgramMemory+0x17c>
			PollAddress = (CurrentAddress & 0xFFFF);
   8206c:	9304      	str	r3, [sp, #16]
   8206e:	e06d      	b.n	8214c <ISPProtocol_ProgramMemory+0x198>
   82070:	f8dd b008 	ldr.w	fp, [sp, #8]
   82074:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   82076:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
   8207a:	f99d 4026 	ldrsb.w	r4, [sp, #38]	; 0x26
   8207e:	2c00      	cmp	r4, #0
   82080:	db0e      	blt.n	820a0 <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   82082:	4a65      	ldr	r2, [pc, #404]	; (82218 <ISPProtocol_ProgramMemory+0x264>)
   82084:	f882 b000 	strb.w	fp, [r2]
	avrisp_status_payload[1] = ProgrammingStatus;
   82088:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   8208a:	4b64      	ldr	r3, [pc, #400]	; (8221c <ISPProtocol_ProgramMemory+0x268>)
   8208c:	2202      	movs	r2, #2
   8208e:	801a      	strh	r2, [r3, #0]
   82090:	e79b      	b.n	81fca <ISPProtocol_ProgramMemory+0x16>
	uint16_t PollAddress       = 0;
   82092:	9b05      	ldr	r3, [sp, #20]
   82094:	9304      	str	r3, [sp, #16]
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   82096:	2300      	movs	r3, #0
   82098:	e7ed      	b.n	82076 <ISPProtocol_ProgramMemory+0xc2>
   8209a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8209e:	e7ea      	b.n	82076 <ISPProtocol_ProgramMemory+0xc2>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   820a0:	4f61      	ldr	r7, [pc, #388]	; (82228 <ISPProtocol_ProgramMemory+0x274>)
   820a2:	2300      	movs	r3, #0
   820a4:	461a      	mov	r2, r3
   820a6:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   820aa:	4638      	mov	r0, r7
   820ac:	4e5f      	ldr	r6, [pc, #380]	; (8222c <ISPProtocol_ProgramMemory+0x278>)
   820ae:	47b0      	blx	r6
   820b0:	2300      	movs	r3, #0
   820b2:	461a      	mov	r2, r3
   820b4:	9907      	ldr	r1, [sp, #28]
   820b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   820ba:	4638      	mov	r0, r7
   820bc:	47b0      	blx	r6
   820be:	2300      	movs	r3, #0
   820c0:	461a      	mov	r2, r3
   820c2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   820c6:	4638      	mov	r0, r7
   820c8:	47b0      	blx	r6
   820ca:	2300      	movs	r3, #0
   820cc:	461a      	mov	r2, r3
   820ce:	4619      	mov	r1, r3
   820d0:	4638      	mov	r0, r7
   820d2:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   820d4:	f015 0f20 	tst.w	r5, #32
   820d8:	d007      	beq.n	820ea <ISPProtocol_ProgramMemory+0x136>
   820da:	9b04      	ldr	r3, [sp, #16]
   820dc:	b92b      	cbnz	r3, 820ea <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   820de:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   820e2:	f043 0310 	orr.w	r3, r3, #16
   820e6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   820ea:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   820ee:	9300      	str	r3, [sp, #0]
   820f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   820f4:	9a06      	ldr	r2, [sp, #24]
   820f6:	9904      	ldr	r1, [sp, #16]
   820f8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   820fc:	4c4c      	ldr	r4, [pc, #304]	; (82230 <ISPProtocol_ProgramMemory+0x27c>)
   820fe:	47a0      	blx	r4
   82100:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82102:	f1bb 0f13 	cmp.w	fp, #19
   82106:	d1bc      	bne.n	82082 <ISPProtocol_ProgramMemory+0xce>
   82108:	4a42      	ldr	r2, [pc, #264]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8210a:	8812      	ldrh	r2, [r2, #0]
   8210c:	2a00      	cmp	r2, #0
   8210e:	d1b8      	bne.n	82082 <ISPProtocol_ProgramMemory+0xce>
		  MustLoadExtendedAddress = true;
   82110:	4a44      	ldr	r2, [pc, #272]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82112:	2101      	movs	r1, #1
   82114:	7011      	strb	r1, [r2, #0]
   82116:	e7b4      	b.n	82082 <ISPProtocol_ProgramMemory+0xce>
			CurrentAddress++;
   82118:	4a3e      	ldr	r2, [pc, #248]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8211a:	6813      	ldr	r3, [r2, #0]
   8211c:	3301      	adds	r3, #1
   8211e:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82120:	e01b      	b.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82122:	f018 0f01 	tst.w	r8, #1
   82126:	d067      	beq.n	821f8 <ISPProtocol_ProgramMemory+0x244>
   82128:	e010      	b.n	8214c <ISPProtocol_ProgramMemory+0x198>
   8212a:	f018 0f01 	tst.w	r8, #1
   8212e:	d10d      	bne.n	8214c <ISPProtocol_ProgramMemory+0x198>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   82130:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82134:	9300      	str	r3, [sp, #0]
   82136:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8213a:	9a06      	ldr	r2, [sp, #24]
   8213c:	9904      	ldr	r1, [sp, #16]
   8213e:	4640      	mov	r0, r8
   82140:	4d3b      	ldr	r5, [pc, #236]	; (82230 <ISPProtocol_ProgramMemory+0x27c>)
   82142:	47a8      	blx	r5
			if (ProgrammingStatus != STATUS_CMD_OK)
   82144:	4603      	mov	r3, r0
   82146:	2800      	cmp	r0, #0
   82148:	d1a7      	bne.n	8209a <ISPProtocol_ProgramMemory+0xe6>
			PollAddress = 0;
   8214a:	9704      	str	r7, [sp, #16]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   8214c:	f014 0f01 	tst.w	r4, #1
   82150:	f47f af7c 	bne.w	8204c <ISPProtocol_ProgramMemory+0x98>
   82154:	9b02      	ldr	r3, [sp, #8]
   82156:	2b15      	cmp	r3, #21
   82158:	d0de      	beq.n	82118 <ISPProtocol_ProgramMemory+0x164>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   8215a:	3401      	adds	r4, #1
   8215c:	b2a4      	uxth	r4, r4
   8215e:	9b05      	ldr	r3, [sp, #20]
   82160:	42a3      	cmp	r3, r4
   82162:	d085      	beq.n	82070 <ISPProtocol_ProgramMemory+0xbc>
		uint8_t ByteToWrite     = *(NextWriteByte++);
   82164:	9b03      	ldr	r3, [sp, #12]
   82166:	f813 bb01 	ldrb.w	fp, [r3], #1
   8216a:	9303      	str	r3, [sp, #12]
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   8216c:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   82170:	4b2c      	ldr	r3, [pc, #176]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82172:	781b      	ldrb	r3, [r3, #0]
   82174:	2b00      	cmp	r3, #0
   82176:	f47f af57 	bne.w	82028 <ISPProtocol_ProgramMemory+0x74>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   8217a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   8217e:	4e2a      	ldr	r6, [pc, #168]	; (82228 <ISPProtocol_ProgramMemory+0x274>)
   82180:	463b      	mov	r3, r7
   82182:	463a      	mov	r2, r7
   82184:	4649      	mov	r1, r9
   82186:	4630      	mov	r0, r6
   82188:	4d28      	ldr	r5, [pc, #160]	; (8222c <ISPProtocol_ProgramMemory+0x278>)
   8218a:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   8218c:	f8df a084 	ldr.w	sl, [pc, #132]	; 82214 <ISPProtocol_ProgramMemory+0x260>
   82190:	463b      	mov	r3, r7
   82192:	463a      	mov	r2, r7
   82194:	f89a 1001 	ldrb.w	r1, [sl, #1]
   82198:	4630      	mov	r0, r6
   8219a:	47a8      	blx	r5
   8219c:	463b      	mov	r3, r7
   8219e:	463a      	mov	r2, r7
   821a0:	f89a 1000 	ldrb.w	r1, [sl]
   821a4:	4630      	mov	r0, r6
   821a6:	47a8      	blx	r5
   821a8:	463b      	mov	r3, r7
   821aa:	463a      	mov	r2, r7
   821ac:	4659      	mov	r1, fp
   821ae:	4630      	mov	r0, r6
   821b0:	47a8      	blx	r5
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   821b2:	9b02      	ldr	r3, [sp, #8]
   821b4:	2b13      	cmp	r3, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   821b6:	bf04      	itt	eq
   821b8:	f089 0908 	eoreq.w	r9, r9, #8
   821bc:	f88d 9028 	strbeq.w	r9, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   821c0:	9b04      	ldr	r3, [sp, #16]
   821c2:	2b00      	cmp	r3, #0
   821c4:	d1b1      	bne.n	8212a <ISPProtocol_ProgramMemory+0x176>
   821c6:	9b06      	ldr	r3, [sp, #24]
   821c8:	455b      	cmp	r3, fp
   821ca:	d0aa      	beq.n	82122 <ISPProtocol_ProgramMemory+0x16e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   821cc:	f014 0f01 	tst.w	r4, #1
   821d0:	d003      	beq.n	821da <ISPProtocol_ProgramMemory+0x226>
   821d2:	9b02      	ldr	r3, [sp, #8]
   821d4:	2b13      	cmp	r3, #19
   821d6:	f43f af2c 	beq.w	82032 <ISPProtocol_ProgramMemory+0x7e>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   821da:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   821de:	f023 0308 	bic.w	r3, r3, #8
   821e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   821e6:	4b0b      	ldr	r3, [pc, #44]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   821e8:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   821ea:	f018 0f01 	tst.w	r8, #1
   821ee:	f47f af3d 	bne.w	8206c <ISPProtocol_ProgramMemory+0xb8>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   821f2:	2b00      	cmp	r3, #0
   821f4:	f47f af38 	bne.w	82068 <ISPProtocol_ProgramMemory+0xb4>
   821f8:	f018 0f08 	tst.w	r8, #8
   821fc:	d198      	bne.n	82130 <ISPProtocol_ProgramMemory+0x17c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   821fe:	f028 0806 	bic.w	r8, r8, #6
   82202:	f048 0802 	orr.w	r8, r8, #2
   82206:	e793      	b.n	82130 <ISPProtocol_ProgramMemory+0x17c>
   82208:	20002df4 	.word	0x20002df4
   8220c:	0008e494 	.word	0x0008e494
   82210:	0008788d 	.word	0x0008788d
   82214:	20002660 	.word	0x20002660
   82218:	20002640 	.word	0x20002640
   8221c:	2000263e 	.word	0x2000263e
   82220:	00082895 	.word	0x00082895
   82224:	2000263c 	.word	0x2000263c
   82228:	40008000 	.word	0x40008000
   8222c:	0008561f 	.word	0x0008561f
   82230:	000828d5 	.word	0x000828d5

00082234 <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   82234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82238:	b085      	sub	sp, #20
   8223a:	9000      	str	r0, [sp, #0]
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   8223c:	4b45      	ldr	r3, [pc, #276]	; (82354 <ISPProtocol_ReadMemory+0x120>)
   8223e:	899b      	ldrh	r3, [r3, #12]
   82240:	2b03      	cmp	r3, #3
   82242:	d118      	bne.n	82276 <ISPProtocol_ReadMemory+0x42>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   82244:	4b43      	ldr	r3, [pc, #268]	; (82354 <ISPProtocol_ReadMemory+0x120>)
   82246:	689b      	ldr	r3, [r3, #8]
   82248:	681b      	ldr	r3, [r3, #0]
   8224a:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   8224c:	4a42      	ldr	r2, [pc, #264]	; (82358 <ISPProtocol_ReadMemory+0x124>)
   8224e:	9800      	ldr	r0, [sp, #0]
   82250:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82252:	20c0      	movs	r0, #192	; 0xc0
   82254:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   82256:	4a41      	ldr	r2, [pc, #260]	; (8235c <ISPProtocol_ReadMemory+0x128>)
   82258:	2002      	movs	r0, #2
   8225a:	8010      	strh	r0, [r2, #0]
		
	//printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   8225c:	b29b      	uxth	r3, r3
   8225e:	9301      	str	r3, [sp, #4]
   82260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82264:	d872      	bhi.n	8234c <ISPProtocol_ReadMemory+0x118>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   82266:	2b00      	cmp	r3, #0
   82268:	d06a      	beq.n	82340 <ISPProtocol_ReadMemory+0x10c>
   8226a:	f101 38ff 	add.w	r8, r1, #4294967295
   8226e:	2700      	movs	r7, #0
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
   82270:	463e      	mov	r6, r7
   82272:	4c3b      	ldr	r4, [pc, #236]	; (82360 <ISPProtocol_ReadMemory+0x12c>)
   82274:	e026      	b.n	822c4 <ISPProtocol_ReadMemory+0x90>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82276:	4619      	mov	r1, r3
   82278:	483a      	ldr	r0, [pc, #232]	; (82364 <ISPProtocol_ReadMemory+0x130>)
   8227a:	4b3b      	ldr	r3, [pc, #236]	; (82368 <ISPProtocol_ReadMemory+0x134>)
   8227c:	4798      	blx	r3
		return;
   8227e:	e065      	b.n	8234c <ISPProtocol_ReadMemory+0x118>
			ISPTarget_LoadExtendedAddress();
   82280:	4b3a      	ldr	r3, [pc, #232]	; (8236c <ISPProtocol_ReadMemory+0x138>)
   82282:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   82284:	4b3a      	ldr	r3, [pc, #232]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   82286:	701e      	strb	r6, [r3, #0]
   82288:	e022      	b.n	822d0 <ISPProtocol_ReadMemory+0x9c>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   8228a:	f089 0908 	eor.w	r9, r9, #8
   8228e:	f88d 900e 	strb.w	r9, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   82292:	f01b 0f01 	tst.w	fp, #1
   82296:	d010      	beq.n	822ba <ISPProtocol_ReadMemory+0x86>
		{
			CurrentAddress++;
   82298:	4a36      	ldr	r2, [pc, #216]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   8229a:	6813      	ldr	r3, [r2, #0]
   8229c:	3301      	adds	r3, #1
   8229e:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822a0:	e006      	b.n	822b0 <ISPProtocol_ReadMemory+0x7c>
			CurrentAddress++;
   822a2:	4a34      	ldr	r2, [pc, #208]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   822a4:	6813      	ldr	r3, [r2, #0]
   822a6:	3301      	adds	r3, #1
   822a8:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822aa:	9a00      	ldr	r2, [sp, #0]
   822ac:	2a16      	cmp	r2, #22
   822ae:	d004      	beq.n	822ba <ISPProtocol_ReadMemory+0x86>
   822b0:	b29b      	uxth	r3, r3
   822b2:	b913      	cbnz	r3, 822ba <ISPProtocol_ReadMemory+0x86>
			  MustLoadExtendedAddress = true;
   822b4:	2301      	movs	r3, #1
   822b6:	4a2e      	ldr	r2, [pc, #184]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   822b8:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   822ba:	3701      	adds	r7, #1
   822bc:	b2bb      	uxth	r3, r7
   822be:	9a01      	ldr	r2, [sp, #4]
   822c0:	429a      	cmp	r2, r3
   822c2:	d93d      	bls.n	82340 <ISPProtocol_ReadMemory+0x10c>
   822c4:	fa1f fb87 	uxth.w	fp, r7
		if (MustLoadExtendedAddress)
   822c8:	4b29      	ldr	r3, [pc, #164]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   822ca:	781b      	ldrb	r3, [r3, #0]
   822cc:	2b00      	cmp	r3, #0
   822ce:	d1d7      	bne.n	82280 <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   822d0:	f89d 900e 	ldrb.w	r9, [sp, #14]
   822d4:	4633      	mov	r3, r6
   822d6:	4632      	mov	r2, r6
   822d8:	4649      	mov	r1, r9
   822da:	4620      	mov	r0, r4
   822dc:	4d26      	ldr	r5, [pc, #152]	; (82378 <ISPProtocol_ReadMemory+0x144>)
   822de:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   822e0:	f8df a090 	ldr.w	sl, [pc, #144]	; 82374 <ISPProtocol_ReadMemory+0x140>
   822e4:	4633      	mov	r3, r6
   822e6:	4632      	mov	r2, r6
   822e8:	f89a 1001 	ldrb.w	r1, [sl, #1]
   822ec:	4620      	mov	r0, r4
   822ee:	47a8      	blx	r5
   822f0:	4633      	mov	r3, r6
   822f2:	4632      	mov	r2, r6
   822f4:	f89a 1000 	ldrb.w	r1, [sl]
   822f8:	4620      	mov	r0, r4
   822fa:	47a8      	blx	r5
   822fc:	4633      	mov	r3, r6
   822fe:	4632      	mov	r2, r6
   82300:	4631      	mov	r1, r6
   82302:	4620      	mov	r0, r4
   82304:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   82306:	6923      	ldr	r3, [r4, #16]
   82308:	f413 7f00 	tst.w	r3, #512	; 0x200
   8230c:	d0fb      	beq.n	82306 <ISPProtocol_ReadMemory+0xd2>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   8230e:	f10d 0209 	add.w	r2, sp, #9
   82312:	f10d 010a 	add.w	r1, sp, #10
   82316:	4620      	mov	r0, r4
   82318:	4b18      	ldr	r3, [pc, #96]	; (8237c <ISPProtocol_ReadMemory+0x148>)
   8231a:	4798      	blx	r3
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   8231c:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   82320:	f808 3f01 	strb.w	r3, [r8, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   82324:	9b00      	ldr	r3, [sp, #0]
   82326:	2b14      	cmp	r3, #20
   82328:	d0af      	beq.n	8228a <ISPProtocol_ReadMemory+0x56>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   8232a:	f01b 0f01 	tst.w	fp, #1
   8232e:	d1b8      	bne.n	822a2 <ISPProtocol_ReadMemory+0x6e>
   82330:	9b00      	ldr	r3, [sp, #0]
   82332:	2b16      	cmp	r3, #22
   82334:	d1c1      	bne.n	822ba <ISPProtocol_ReadMemory+0x86>
			CurrentAddress++;
   82336:	4a0f      	ldr	r2, [pc, #60]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   82338:	6813      	ldr	r3, [r2, #0]
   8233a:	3301      	adds	r3, #1
   8233c:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   8233e:	e7bc      	b.n	822ba <ISPProtocol_ReadMemory+0x86>
		}
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82340:	4b05      	ldr	r3, [pc, #20]	; (82358 <ISPProtocol_ReadMemory+0x124>)
   82342:	2200      	movs	r2, #0
   82344:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82346:	4b05      	ldr	r3, [pc, #20]	; (8235c <ISPProtocol_ReadMemory+0x128>)
   82348:	2202      	movs	r2, #2
   8234a:	801a      	strh	r2, [r3, #0]
}
   8234c:	b005      	add	sp, #20
   8234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82352:	bf00      	nop
   82354:	20002df4 	.word	0x20002df4
   82358:	20002640 	.word	0x20002640
   8235c:	2000263e 	.word	0x2000263e
   82360:	40008000 	.word	0x40008000
   82364:	0008e43c 	.word	0x0008e43c
   82368:	0008788d 	.word	0x0008788d
   8236c:	00082895 	.word	0x00082895
   82370:	2000263c 	.word	0x2000263c
   82374:	20002660 	.word	0x20002660
   82378:	0008561f 	.word	0x0008561f
   8237c:	000855f1 	.word	0x000855f1

00082380 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   82380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82384:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   82386:	4b21      	ldr	r3, [pc, #132]	; (8240c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   82388:	8999      	ldrh	r1, [r3, #12]
   8238a:	2905      	cmp	r1, #5
   8238c:	d139      	bne.n	82402 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   8238e:	4607      	mov	r7, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   82390:	4b1e      	ldr	r3, [pc, #120]	; (8240c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   82392:	689b      	ldr	r3, [r3, #8]
   82394:	6818      	ldr	r0, [r3, #0]
   82396:	9002      	str	r0, [sp, #8]
   82398:	791a      	ldrb	r2, [r3, #4]
   8239a:	f88d 200c 	strb.w	r2, [sp, #12]
   8239e:	f893 b000 	ldrb.w	fp, [r3]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823a2:	f10d 0609 	add.w	r6, sp, #9
   823a6:	ad01      	add	r5, sp, #4
   823a8:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   823ac:	4c18      	ldr	r4, [pc, #96]	; (82410 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   823ae:	f8df 9074 	ldr.w	r9, [pc, #116]	; 82424 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   823b2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 82428 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
		  spi_write(SPI, data, 0, 0);
   823b6:	2300      	movs	r3, #0
   823b8:	461a      	mov	r2, r3
   823ba:	f816 1b01 	ldrb.w	r1, [r6], #1
   823be:	4620      	mov	r0, r4
   823c0:	47c8      	blx	r9
   823c2:	6923      	ldr	r3, [r4, #16]
   823c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   823c8:	d0fb      	beq.n	823c2 <ISPProtocol_ReadFuseLockSigOSCCAL+0x42>
			spi_read(SPI, &ReceivedByte, &_);
   823ca:	f10d 0201 	add.w	r2, sp, #1
   823ce:	f10d 0102 	add.w	r1, sp, #2
   823d2:	4620      	mov	r0, r4
   823d4:	47c0      	blx	r8
			return  ReceivedByte;
   823d6:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   823da:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823de:	4555      	cmp	r5, sl
   823e0:	d1e9      	bne.n	823b6 <ISPProtocol_ReadFuseLockSigOSCCAL+0x36>

	avrisp_status_payload[0] = V2Command;
   823e2:	4b0c      	ldr	r3, [pc, #48]	; (82414 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
   823e4:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   823e6:	2200      	movs	r2, #0
   823e8:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   823ea:	a904      	add	r1, sp, #16
   823ec:	448b      	add	fp, r1
   823ee:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   823f2:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   823f4:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   823f6:	4b08      	ldr	r3, [pc, #32]	; (82418 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   823f8:	2204      	movs	r2, #4
   823fa:	801a      	strh	r2, [r3, #0]
}
   823fc:	b005      	add	sp, #20
   823fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82402:	4806      	ldr	r0, [pc, #24]	; (8241c <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   82404:	4b06      	ldr	r3, [pc, #24]	; (82420 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   82406:	4798      	blx	r3
		return;
   82408:	e7f8      	b.n	823fc <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   8240a:	bf00      	nop
   8240c:	20002df4 	.word	0x20002df4
   82410:	40008000 	.word	0x40008000
   82414:	20002640 	.word	0x20002640
   82418:	2000263e 	.word	0x2000263e
   8241c:	0008e494 	.word	0x0008e494
   82420:	0008788d 	.word	0x0008788d
   82424:	0008561f 	.word	0x0008561f
   82428:	000855f1 	.word	0x000855f1

0008242c <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   8242c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82430:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   82432:	4b13      	ldr	r3, [pc, #76]	; (82480 <ISPProtocol_WriteFuseLock+0x54>)
   82434:	8999      	ldrh	r1, [r3, #12]
   82436:	2904      	cmp	r1, #4
   82438:	d11d      	bne.n	82476 <ISPProtocol_WriteFuseLock+0x4a>
   8243a:	4605      	mov	r5, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   8243c:	4b10      	ldr	r3, [pc, #64]	; (82480 <ISPProtocol_WriteFuseLock+0x54>)
   8243e:	689b      	ldr	r3, [r3, #8]
   82440:	681b      	ldr	r3, [r3, #0]
   82442:	9301      	str	r3, [sp, #4]

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   82444:	ac01      	add	r4, sp, #4
   82446:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   8244a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 82498 <ISPProtocol_WriteFuseLock+0x6c>
   8244e:	2700      	movs	r7, #0
   82450:	4e0c      	ldr	r6, [pc, #48]	; (82484 <ISPProtocol_WriteFuseLock+0x58>)
   82452:	463b      	mov	r3, r7
   82454:	463a      	mov	r2, r7
   82456:	f814 1b01 	ldrb.w	r1, [r4], #1
   8245a:	4640      	mov	r0, r8
   8245c:	47b0      	blx	r6
   8245e:	454c      	cmp	r4, r9
   82460:	d1f7      	bne.n	82452 <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   82462:	4b09      	ldr	r3, [pc, #36]	; (82488 <ISPProtocol_WriteFuseLock+0x5c>)
   82464:	701d      	strb	r5, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82466:	2200      	movs	r2, #0
   82468:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   8246a:	4b08      	ldr	r3, [pc, #32]	; (8248c <ISPProtocol_WriteFuseLock+0x60>)
   8246c:	2202      	movs	r2, #2
   8246e:	801a      	strh	r2, [r3, #0]
}
   82470:	b003      	add	sp, #12
   82472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82476:	4806      	ldr	r0, [pc, #24]	; (82490 <ISPProtocol_WriteFuseLock+0x64>)
   82478:	4b06      	ldr	r3, [pc, #24]	; (82494 <ISPProtocol_WriteFuseLock+0x68>)
   8247a:	4798      	blx	r3
		return;
   8247c:	e7f8      	b.n	82470 <ISPProtocol_WriteFuseLock+0x44>
   8247e:	bf00      	nop
   82480:	20002df4 	.word	0x20002df4
   82484:	0008561f 	.word	0x0008561f
   82488:	20002640 	.word	0x20002640
   8248c:	2000263e 	.word	0x2000263e
   82490:	0008e494 	.word	0x0008e494
   82494:	0008788d 	.word	0x0008788d
   82498:	40008000 	.word	0x40008000

0008249c <ISPProtocol_SPIMulti>:
/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
	//Not implemented for this device, alternative methods of accessing SPI interface present
	;
}
   8249c:	4770      	bx	lr
	...

000824a0 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   824a0:	b900      	cbnz	r0, 824a4 <ISPProtocol_DelayMS+0x4>
   824a2:	4770      	bx	lr
{
   824a4:	b538      	push	{r3, r4, r5, lr}
   824a6:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   824a8:	f243 62b0 	movw	r2, #14000	; 0x36b0
   824ac:	2300      	movs	r3, #0
   824ae:	4806      	ldr	r0, [pc, #24]	; (824c8 <ISPProtocol_DelayMS+0x28>)
   824b0:	f243 64af 	movw	r4, #13999	; 0x36af
   824b4:	2500      	movs	r5, #0
   824b6:	fbe0 4501 	umlal	r4, r5, r0, r1
   824ba:	4620      	mov	r0, r4
   824bc:	4629      	mov	r1, r5
   824be:	4c03      	ldr	r4, [pc, #12]	; (824cc <ISPProtocol_DelayMS+0x2c>)
   824c0:	47a0      	blx	r4
   824c2:	4b03      	ldr	r3, [pc, #12]	; (824d0 <ISPProtocol_DelayMS+0x30>)
   824c4:	4798      	blx	r3
}
   824c6:	bd38      	pop	{r3, r4, r5, pc}
   824c8:	05b8d800 	.word	0x05b8d800
   824cc:	0008754d 	.word	0x0008754d
   824d0:	20000089 	.word	0x20000089

000824d4 <ISPProtocol_EnterISPMode>:
{
   824d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824d8:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   824da:	4b42      	ldr	r3, [pc, #264]	; (825e4 <ISPProtocol_EnterISPMode+0x110>)
   824dc:	8999      	ldrh	r1, [r3, #12]
   824de:	290b      	cmp	r1, #11
   824e0:	d003      	beq.n	824ea <ISPProtocol_EnterISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   824e2:	4841      	ldr	r0, [pc, #260]	; (825e8 <ISPProtocol_EnterISPMode+0x114>)
   824e4:	4b41      	ldr	r3, [pc, #260]	; (825ec <ISPProtocol_EnterISPMode+0x118>)
   824e6:	4798      	blx	r3
		return;
   824e8:	e074      	b.n	825d4 <ISPProtocol_EnterISPMode+0x100>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   824ea:	4b3e      	ldr	r3, [pc, #248]	; (825e4 <ISPProtocol_EnterISPMode+0x110>)
   824ec:	689b      	ldr	r3, [r3, #8]
   824ee:	aa07      	add	r2, sp, #28
   824f0:	6818      	ldr	r0, [r3, #0]
   824f2:	6859      	ldr	r1, [r3, #4]
   824f4:	c203      	stmia	r2!, {r0, r1}
   824f6:	8918      	ldrh	r0, [r3, #8]
   824f8:	7a99      	ldrb	r1, [r3, #10]
   824fa:	8010      	strh	r0, [r2, #0]
   824fc:	7091      	strb	r1, [r2, #2]
   824fe:	785e      	ldrb	r6, [r3, #1]
   82500:	9603      	str	r6, [sp, #12]
   82502:	7898      	ldrb	r0, [r3, #2]
   82504:	78dc      	ldrb	r4, [r3, #3]
   82506:	f893 b004 	ldrb.w	fp, [r3, #4]
   8250a:	795a      	ldrb	r2, [r3, #5]
   8250c:	9202      	str	r2, [sp, #8]
   8250e:	799b      	ldrb	r3, [r3, #6]
   82510:	9301      	str	r3, [sp, #4]
	CurrentAddress = 0;
   82512:	4b37      	ldr	r3, [pc, #220]	; (825f0 <ISPProtocol_EnterISPMode+0x11c>)
   82514:	2200      	movs	r2, #0
   82516:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   82518:	4d36      	ldr	r5, [pc, #216]	; (825f4 <ISPProtocol_EnterISPMode+0x120>)
   8251a:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   8251c:	4b36      	ldr	r3, [pc, #216]	; (825f8 <ISPProtocol_EnterISPMode+0x124>)
   8251e:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   82520:	2001      	movs	r0, #1
   82522:	4b36      	ldr	r3, [pc, #216]	; (825fc <ISPProtocol_EnterISPMode+0x128>)
   82524:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82526:	4630      	mov	r0, r6
   82528:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   8252a:	f104 38ff 	add.w	r8, r4, #4294967295
   8252e:	fa5f f888 	uxtb.w	r8, r8
   82532:	b114      	cbz	r4, 8253a <ISPProtocol_EnterISPMode+0x66>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   82534:	462f      	mov	r7, r5
   82536:	4c32      	ldr	r4, [pc, #200]	; (82600 <ISPProtocol_EnterISPMode+0x12c>)
   82538:	e01c      	b.n	82574 <ISPProtocol_EnterISPMode+0xa0>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   8253a:	24c0      	movs	r4, #192	; 0xc0
   8253c:	e03f      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   8253e:	9b01      	ldr	r3, [sp, #4]
   82540:	2b00      	cmp	r3, #0
   82542:	d03b      	beq.n	825bc <ISPProtocol_EnterISPMode+0xe8>
   82544:	aa0a      	add	r2, sp, #40	; 0x28
   82546:	18d3      	adds	r3, r2, r3
   82548:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   8254c:	9a02      	ldr	r2, [sp, #8]
   8254e:	4293      	cmp	r3, r2
   82550:	d034      	beq.n	825bc <ISPProtocol_EnterISPMode+0xe8>
			ISPTarget_ChangeTargetResetLine(false);
   82552:	2000      	movs	r0, #0
   82554:	4d29      	ldr	r5, [pc, #164]	; (825fc <ISPProtocol_EnterISPMode+0x128>)
   82556:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82558:	9e03      	ldr	r6, [sp, #12]
   8255a:	4630      	mov	r0, r6
   8255c:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   8255e:	2001      	movs	r0, #1
   82560:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82562:	4630      	mov	r0, r6
   82564:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82566:	f108 38ff 	add.w	r8, r8, #4294967295
   8256a:	fa5f f888 	uxtb.w	r8, r8
   8256e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   82572:	d034      	beq.n	825de <ISPProtocol_EnterISPMode+0x10a>
   82574:	4b23      	ldr	r3, [pc, #140]	; (82604 <ISPProtocol_EnterISPMode+0x130>)
   82576:	681b      	ldr	r3, [r3, #0]
   82578:	b37b      	cbz	r3, 825da <ISPProtocol_EnterISPMode+0x106>
   8257a:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   8257e:	ad06      	add	r5, sp, #24
   82580:	f10d 0a1c 	add.w	sl, sp, #28
   82584:	f8df 9090 	ldr.w	r9, [pc, #144]	; 82618 <ISPProtocol_EnterISPMode+0x144>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   82588:	4658      	mov	r0, fp
   8258a:	47b8      	blx	r7
   8258c:	2300      	movs	r3, #0
   8258e:	461a      	mov	r2, r3
   82590:	f816 1b01 	ldrb.w	r1, [r6], #1
   82594:	4620      	mov	r0, r4
   82596:	47c8      	blx	r9
   82598:	6923      	ldr	r3, [r4, #16]
   8259a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8259e:	d0fb      	beq.n	82598 <ISPProtocol_EnterISPMode+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   825a0:	f10d 0215 	add.w	r2, sp, #21
   825a4:	f10d 0116 	add.w	r1, sp, #22
   825a8:	4620      	mov	r0, r4
   825aa:	4b17      	ldr	r3, [pc, #92]	; (82608 <ISPProtocol_EnterISPMode+0x134>)
   825ac:	4798      	blx	r3
			return  ReceivedByte;
   825ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   825b2:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   825b6:	4555      	cmp	r5, sl
   825b8:	d1e6      	bne.n	82588 <ISPProtocol_EnterISPMode+0xb4>
   825ba:	e7c0      	b.n	8253e <ISPProtocol_EnterISPMode+0x6a>
			ResponseStatus = STATUS_CMD_OK;
   825bc:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   825be:	4621      	mov	r1, r4
   825c0:	4812      	ldr	r0, [pc, #72]	; (8260c <ISPProtocol_EnterISPMode+0x138>)
   825c2:	4b0a      	ldr	r3, [pc, #40]	; (825ec <ISPProtocol_EnterISPMode+0x118>)
   825c4:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   825c6:	4b12      	ldr	r3, [pc, #72]	; (82610 <ISPProtocol_EnterISPMode+0x13c>)
   825c8:	2210      	movs	r2, #16
   825ca:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   825cc:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   825ce:	4b11      	ldr	r3, [pc, #68]	; (82614 <ISPProtocol_EnterISPMode+0x140>)
   825d0:	2202      	movs	r2, #2
   825d2:	801a      	strh	r2, [r3, #0]
}
   825d4:	b00b      	add	sp, #44	; 0x2c
   825d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   825da:	24c0      	movs	r4, #192	; 0xc0
   825dc:	e7ef      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
   825de:	24c0      	movs	r4, #192	; 0xc0
   825e0:	e7ed      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
   825e2:	bf00      	nop
   825e4:	20002df4 	.word	0x20002df4
   825e8:	0008e494 	.word	0x0008e494
   825ec:	0008788d 	.word	0x0008788d
   825f0:	20002660 	.word	0x20002660
   825f4:	000824a1 	.word	0x000824a1
   825f8:	00082715 	.word	0x00082715
   825fc:	000827d5 	.word	0x000827d5
   82600:	40008000 	.word	0x40008000
   82604:	20002664 	.word	0x20002664
   82608:	000855f1 	.word	0x000855f1
   8260c:	0008e464 	.word	0x0008e464
   82610:	20002640 	.word	0x20002640
   82614:	2000263e 	.word	0x2000263e
   82618:	0008561f 	.word	0x0008561f

0008261c <ISPProtocol_LeaveISPMode>:
{
   8261c:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   8261e:	4b0f      	ldr	r3, [pc, #60]	; (8265c <ISPProtocol_LeaveISPMode+0x40>)
   82620:	8999      	ldrh	r1, [r3, #12]
   82622:	2902      	cmp	r1, #2
   82624:	d003      	beq.n	8262e <ISPProtocol_LeaveISPMode+0x12>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82626:	480e      	ldr	r0, [pc, #56]	; (82660 <ISPProtocol_LeaveISPMode+0x44>)
   82628:	4b0e      	ldr	r3, [pc, #56]	; (82664 <ISPProtocol_LeaveISPMode+0x48>)
   8262a:	4798      	blx	r3
}
   8262c:	bd38      	pop	{r3, r4, r5, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   8262e:	4b0b      	ldr	r3, [pc, #44]	; (8265c <ISPProtocol_LeaveISPMode+0x40>)
   82630:	689b      	ldr	r3, [r3, #8]
   82632:	881d      	ldrh	r5, [r3, #0]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   82634:	b2e8      	uxtb	r0, r5
   82636:	4c0c      	ldr	r4, [pc, #48]	; (82668 <ISPProtocol_LeaveISPMode+0x4c>)
   82638:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   8263a:	2000      	movs	r0, #0
   8263c:	4b0b      	ldr	r3, [pc, #44]	; (8266c <ISPProtocol_LeaveISPMode+0x50>)
   8263e:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   82640:	4b0b      	ldr	r3, [pc, #44]	; (82670 <ISPProtocol_LeaveISPMode+0x54>)
   82642:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   82644:	0a28      	lsrs	r0, r5, #8
   82646:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   82648:	4b0a      	ldr	r3, [pc, #40]	; (82674 <ISPProtocol_LeaveISPMode+0x58>)
   8264a:	2211      	movs	r2, #17
   8264c:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8264e:	2200      	movs	r2, #0
   82650:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82652:	4b09      	ldr	r3, [pc, #36]	; (82678 <ISPProtocol_LeaveISPMode+0x5c>)
   82654:	2202      	movs	r2, #2
   82656:	801a      	strh	r2, [r3, #0]
   82658:	e7e8      	b.n	8262c <ISPProtocol_LeaveISPMode+0x10>
   8265a:	bf00      	nop
   8265c:	20002df4 	.word	0x20002df4
   82660:	0008e494 	.word	0x0008e494
   82664:	0008788d 	.word	0x0008788d
   82668:	000824a1 	.word	0x000824a1
   8266c:	000827d5 	.word	0x000827d5
   82670:	000827bd 	.word	0x000827bd
   82674:	20002640 	.word	0x20002640
   82678:	2000263e 	.word	0x2000263e

0008267c <ISPProtocol_ChipErase>:
{
   8267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82680:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   82682:	4b1b      	ldr	r3, [pc, #108]	; (826f0 <ISPProtocol_ChipErase+0x74>)
   82684:	8999      	ldrh	r1, [r3, #12]
   82686:	2906      	cmp	r1, #6
   82688:	d12a      	bne.n	826e0 <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   8268a:	4b19      	ldr	r3, [pc, #100]	; (826f0 <ISPProtocol_ChipErase+0x74>)
   8268c:	689b      	ldr	r3, [r3, #8]
   8268e:	6818      	ldr	r0, [r3, #0]
   82690:	9000      	str	r0, [sp, #0]
   82692:	889a      	ldrh	r2, [r3, #4]
   82694:	f8ad 2004 	strh.w	r2, [sp, #4]
   82698:	f893 a000 	ldrb.w	sl, [r3]
   8269c:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   826a0:	f10d 0402 	add.w	r4, sp, #2
   826a4:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   826a8:	4f12      	ldr	r7, [pc, #72]	; (826f4 <ISPProtocol_ChipErase+0x78>)
   826aa:	2600      	movs	r6, #0
   826ac:	4d12      	ldr	r5, [pc, #72]	; (826f8 <ISPProtocol_ChipErase+0x7c>)
   826ae:	4633      	mov	r3, r6
   826b0:	4632      	mov	r2, r6
   826b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   826b6:	4638      	mov	r0, r7
   826b8:	47a8      	blx	r5
   826ba:	4544      	cmp	r4, r8
   826bc:	d1f7      	bne.n	826ae <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   826be:	f1b9 0f00 	cmp.w	r9, #0
   826c2:	d111      	bne.n	826e8 <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   826c4:	4650      	mov	r0, sl
   826c6:	4b0d      	ldr	r3, [pc, #52]	; (826fc <ISPProtocol_ChipErase+0x80>)
   826c8:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   826ca:	4b0d      	ldr	r3, [pc, #52]	; (82700 <ISPProtocol_ChipErase+0x84>)
   826cc:	2212      	movs	r2, #18
   826ce:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   826d0:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   826d4:	4b0b      	ldr	r3, [pc, #44]	; (82704 <ISPProtocol_ChipErase+0x88>)
   826d6:	2202      	movs	r2, #2
   826d8:	801a      	strh	r2, [r3, #0]
}
   826da:	b002      	add	sp, #8
   826dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   826e0:	4809      	ldr	r0, [pc, #36]	; (82708 <ISPProtocol_ChipErase+0x8c>)
   826e2:	4b0a      	ldr	r3, [pc, #40]	; (8270c <ISPProtocol_ChipErase+0x90>)
   826e4:	4798      	blx	r3
		return;
   826e6:	e7f8      	b.n	826da <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   826e8:	4b09      	ldr	r3, [pc, #36]	; (82710 <ISPProtocol_ChipErase+0x94>)
   826ea:	4798      	blx	r3
   826ec:	4681      	mov	r9, r0
   826ee:	e7ec      	b.n	826ca <ISPProtocol_ChipErase+0x4e>
   826f0:	20002df4 	.word	0x20002df4
   826f4:	40008000 	.word	0x40008000
   826f8:	0008561f 	.word	0x0008561f
   826fc:	000824a1 	.word	0x000824a1
   82700:	20002640 	.word	0x20002640
   82704:	2000263e 	.word	0x2000263e
   82708:	0008e484 	.word	0x0008e484
   8270c:	0008788d 	.word	0x0008788d
   82710:	00082819 	.word	0x00082819

00082714 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   82714:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   82716:	2098      	movs	r0, #152	; 0x98
   82718:	4b1e      	ldr	r3, [pc, #120]	; (82794 <ISPTarget_EnableTargetISP+0x80>)
   8271a:	4798      	blx	r3
   8271c:	4b1e      	ldr	r3, [pc, #120]	; (82798 <ISPTarget_EnableTargetISP+0x84>)
   8271e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   82722:	4c1e      	ldr	r4, [pc, #120]	; (8279c <ISPTarget_EnableTargetISP+0x88>)
   82724:	4620      	mov	r0, r4
   82726:	4b1e      	ldr	r3, [pc, #120]	; (827a0 <ISPTarget_EnableTargetISP+0x8c>)
   82728:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8272a:	2380      	movs	r3, #128	; 0x80
   8272c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8272e:	6863      	ldr	r3, [r4, #4]
   82730:	f043 0301 	orr.w	r3, r3, #1
   82734:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   82736:	6863      	ldr	r3, [r4, #4]
   82738:	f043 0310 	orr.w	r3, r3, #16
   8273c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8273e:	6863      	ldr	r3, [r4, #4]
   82740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82744:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   82746:	4917      	ldr	r1, [pc, #92]	; (827a4 <ISPTarget_EnableTargetISP+0x90>)
   82748:	4628      	mov	r0, r5
   8274a:	4b17      	ldr	r3, [pc, #92]	; (827a8 <ISPTarget_EnableTargetISP+0x94>)
   8274c:	4798      	blx	r3
	if (bauddiv < 0){
		bauddiv = 255;
   8274e:	1e04      	subs	r4, r0, #0
   82750:	bfb8      	it	lt
   82752:	24ff      	movlt	r4, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   82754:	4d11      	ldr	r5, [pc, #68]	; (8279c <ISPTarget_EnableTargetISP+0x88>)
   82756:	2200      	movs	r2, #0
   82758:	4611      	mov	r1, r2
   8275a:	4628      	mov	r0, r5
   8275c:	4b13      	ldr	r3, [pc, #76]	; (827ac <ISPTarget_EnableTargetISP+0x98>)
   8275e:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   82760:	2201      	movs	r2, #1
   82762:	2100      	movs	r1, #0
   82764:	4628      	mov	r0, r5
   82766:	4b12      	ldr	r3, [pc, #72]	; (827b0 <ISPTarget_EnableTargetISP+0x9c>)
   82768:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   8276a:	b2e2      	uxtb	r2, r4
   8276c:	2100      	movs	r1, #0
   8276e:	4628      	mov	r0, r5
   82770:	4b10      	ldr	r3, [pc, #64]	; (827b4 <ISPTarget_EnableTargetISP+0xa0>)
   82772:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   82774:	2301      	movs	r3, #1
   82776:	602b      	str	r3, [r5, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   82778:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8277c:	200e      	movs	r0, #14
   8277e:	4c0e      	ldr	r4, [pc, #56]	; (827b8 <ISPTarget_EnableTargetISP+0xa4>)
   82780:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   82782:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82786:	200d      	movs	r0, #13
   82788:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8278a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8278e:	200f      	movs	r0, #15
   82790:	47a0      	blx	r4
#endif

}
   82792:	bd38      	pop	{r3, r4, r5, pc}
   82794:	00082c51 	.word	0x00082c51
   82798:	200002f8 	.word	0x200002f8
   8279c:	40008000 	.word	0x40008000
   827a0:	000855d1 	.word	0x000855d1
   827a4:	05b8d800 	.word	0x05b8d800
   827a8:	0008568f 	.word	0x0008568f
   827ac:	00085653 	.word	0x00085653
   827b0:	00085671 	.word	0x00085671
   827b4:	000856a5 	.word	0x000856a5
   827b8:	000851ed 	.word	0x000851ed

000827bc <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   827bc:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   827be:	4803      	ldr	r0, [pc, #12]	; (827cc <ISPTarget_DisableTargetISP+0x10>)
   827c0:	2302      	movs	r3, #2
   827c2:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   827c4:	4b02      	ldr	r3, [pc, #8]	; (827d0 <ISPTarget_DisableTargetISP+0x14>)
   827c6:	4798      	blx	r3
#endif
}
   827c8:	bd08      	pop	{r3, pc}
   827ca:	bf00      	nop
   827cc:	40008000 	.word	0x40008000
   827d0:	000855e1 	.word	0x000855e1

000827d4 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   827d4:	b508      	push	{r3, lr}
	if (ResetTarget)
   827d6:	b180      	cbz	r0, 827fa <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   827d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827dc:	2011      	movs	r0, #17
   827de:	4b0a      	ldr	r3, [pc, #40]	; (82808 <ISPTarget_ChangeTargetResetLine+0x34>)
   827e0:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   827e2:	209e      	movs	r0, #158	; 0x9e
   827e4:	4b09      	ldr	r3, [pc, #36]	; (8280c <ISPTarget_ChangeTargetResetLine+0x38>)
   827e6:	4798      	blx	r3
   827e8:	b918      	cbnz	r0, 827f2 <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   827ea:	2011      	movs	r0, #17
   827ec:	4b08      	ldr	r3, [pc, #32]	; (82810 <ISPTarget_ChangeTargetResetLine+0x3c>)
   827ee:	4798      	blx	r3
   827f0:	e008      	b.n	82804 <ISPTarget_ChangeTargetResetLine+0x30>
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   827f2:	2011      	movs	r0, #17
   827f4:	4b07      	ldr	r3, [pc, #28]	; (82814 <ISPTarget_ChangeTargetResetLine+0x40>)
   827f6:	4798      	blx	r3
   827f8:	e004      	b.n	82804 <ISPTarget_ChangeTargetResetLine+0x30>
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   827fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   827fe:	2011      	movs	r0, #17
   82800:	4b01      	ldr	r3, [pc, #4]	; (82808 <ISPTarget_ChangeTargetResetLine+0x34>)
   82802:	4798      	blx	r3
	}
}
   82804:	bd08      	pop	{r3, pc}
   82806:	bf00      	nop
   82808:	000851ed 	.word	0x000851ed
   8280c:	00082c51 	.word	0x00082c51
   82810:	000851b7 	.word	0x000851b7
   82814:	000851d1 	.word	0x000851d1

00082818 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   82818:	b570      	push	{r4, r5, r6, lr}
   8281a:	b082      	sub	sp, #8
   8281c:	4c19      	ldr	r4, [pc, #100]	; (82884 <ISPTarget_WaitWhileTargetBusy+0x6c>)
   8281e:	2600      	movs	r6, #0
   82820:	4d19      	ldr	r5, [pc, #100]	; (82888 <ISPTarget_WaitWhileTargetBusy+0x70>)
   82822:	4633      	mov	r3, r6
   82824:	4632      	mov	r2, r6
   82826:	21f0      	movs	r1, #240	; 0xf0
   82828:	4620      	mov	r0, r4
   8282a:	47a8      	blx	r5
   8282c:	4633      	mov	r3, r6
   8282e:	4632      	mov	r2, r6
   82830:	4631      	mov	r1, r6
   82832:	4620      	mov	r0, r4
   82834:	47a8      	blx	r5
   82836:	4633      	mov	r3, r6
   82838:	4632      	mov	r2, r6
   8283a:	4631      	mov	r1, r6
   8283c:	4620      	mov	r0, r4
   8283e:	47a8      	blx	r5
   82840:	4633      	mov	r3, r6
   82842:	4632      	mov	r2, r6
   82844:	4631      	mov	r1, r6
   82846:	4620      	mov	r0, r4
   82848:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8284a:	6923      	ldr	r3, [r4, #16]
   8284c:	f413 7f00 	tst.w	r3, #512	; 0x200
   82850:	d0fb      	beq.n	8284a <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   82852:	f10d 0205 	add.w	r2, sp, #5
   82856:	f10d 0106 	add.w	r1, sp, #6
   8285a:	4620      	mov	r0, r4
   8285c:	4b0b      	ldr	r3, [pc, #44]	; (8288c <ISPTarget_WaitWhileTargetBusy+0x74>)
   8285e:	4798      	blx	r3
			return  ReceivedByte;
   82860:	f89d 0006 	ldrb.w	r0, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   82864:	f010 0001 	ands.w	r0, r0, #1
   82868:	d005      	beq.n	82876 <ISPTarget_WaitWhileTargetBusy+0x5e>
   8286a:	4b09      	ldr	r3, [pc, #36]	; (82890 <ISPTarget_WaitWhileTargetBusy+0x78>)
   8286c:	681b      	ldr	r3, [r3, #0]
   8286e:	2b00      	cmp	r3, #0
   82870:	d1d7      	bne.n	82822 <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   82872:	2081      	movs	r0, #129	; 0x81
   82874:	e004      	b.n	82880 <ISPTarget_WaitWhileTargetBusy+0x68>
   82876:	4b06      	ldr	r3, [pc, #24]	; (82890 <ISPTarget_WaitWhileTargetBusy+0x78>)
   82878:	681b      	ldr	r3, [r3, #0]
   8287a:	2b00      	cmp	r3, #0
   8287c:	bf08      	it	eq
   8287e:	2081      	moveq	r0, #129	; 0x81
}
   82880:	b002      	add	sp, #8
   82882:	bd70      	pop	{r4, r5, r6, pc}
   82884:	40008000 	.word	0x40008000
   82888:	0008561f 	.word	0x0008561f
   8288c:	000855f1 	.word	0x000855f1
   82890:	20002664 	.word	0x20002664

00082894 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   82894:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   82896:	4d0c      	ldr	r5, [pc, #48]	; (828c8 <ISPTarget_LoadExtendedAddress+0x34>)
   82898:	2300      	movs	r3, #0
   8289a:	461a      	mov	r2, r3
   8289c:	214d      	movs	r1, #77	; 0x4d
   8289e:	4628      	mov	r0, r5
   828a0:	4c0a      	ldr	r4, [pc, #40]	; (828cc <ISPTarget_LoadExtendedAddress+0x38>)
   828a2:	47a0      	blx	r4
   828a4:	2300      	movs	r3, #0
   828a6:	461a      	mov	r2, r3
   828a8:	4619      	mov	r1, r3
   828aa:	4628      	mov	r0, r5
   828ac:	47a0      	blx	r4
   828ae:	2300      	movs	r3, #0
   828b0:	461a      	mov	r2, r3
   828b2:	4907      	ldr	r1, [pc, #28]	; (828d0 <ISPTarget_LoadExtendedAddress+0x3c>)
   828b4:	7889      	ldrb	r1, [r1, #2]
   828b6:	4628      	mov	r0, r5
   828b8:	47a0      	blx	r4
   828ba:	2300      	movs	r3, #0
   828bc:	461a      	mov	r2, r3
   828be:	4619      	mov	r1, r3
   828c0:	4628      	mov	r0, r5
   828c2:	47a0      	blx	r4
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
	ISPTarget_SendByte(0x00);
}
   828c4:	bd38      	pop	{r3, r4, r5, pc}
   828c6:	bf00      	nop
   828c8:	40008000 	.word	0x40008000
   828cc:	0008561f 	.word	0x0008561f
   828d0:	20002660 	.word	0x20002660

000828d4 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   828d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   828d8:	b082      	sub	sp, #8
   828da:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   828de:	f000 047e 	and.w	r4, r0, #126	; 0x7e
   828e2:	2c20      	cmp	r4, #32
   828e4:	dc18      	bgt.n	82918 <ISPTarget_WaitForProgComplete+0x44>
   828e6:	460e      	mov	r6, r1
   828e8:	4617      	mov	r7, r2
   828ea:	2c01      	cmp	r4, #1
   828ec:	dd5b      	ble.n	829a6 <ISPTarget_WaitForProgComplete+0xd2>
   828ee:	3c02      	subs	r4, #2
   828f0:	2c1e      	cmp	r4, #30
   828f2:	d85a      	bhi.n	829aa <ISPTarget_WaitForProgComplete+0xd6>
   828f4:	e8df f004 	tbb	[pc, r4]
   828f8:	591e5919 	.word	0x591e5919
   828fc:	59545959 	.word	0x59545959
   82900:	59595959 	.word	0x59595959
   82904:	59195959 	.word	0x59195959
   82908:	59595959 	.word	0x59595959
   8290c:	59595959 	.word	0x59595959
   82910:	59595959 	.word	0x59595959
   82914:	5959      	.short	0x5959
   82916:	1e          	.byte	0x1e
   82917:	00          	.byte	0x00
   82918:	2c40      	cmp	r4, #64	; 0x40
   8291a:	d041      	beq.n	829a0 <ISPTarget_WaitForProgComplete+0xcc>
   8291c:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   8291e:	4b24      	ldr	r3, [pc, #144]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82920:	2264      	movs	r2, #100	; 0x64
   82922:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   82924:	b002      	add	sp, #8
   82926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ISPProtocol_DelayMS(DelayMS);
   8292a:	4618      	mov	r0, r3
   8292c:	4b21      	ldr	r3, [pc, #132]	; (829b4 <ISPTarget_WaitForProgComplete+0xe0>)
   8292e:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   82930:	2000      	movs	r0, #0
			break;
   82932:	e7f4      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
				ISPTarget_SendByte(PollAddress >> 8);
   82934:	ea4f 2a11 	mov.w	sl, r1, lsr #8
   82938:	4c1f      	ldr	r4, [pc, #124]	; (829b8 <ISPTarget_WaitForProgComplete+0xe4>)
   8293a:	f04f 0900 	mov.w	r9, #0
   8293e:	4d1f      	ldr	r5, [pc, #124]	; (829bc <ISPTarget_WaitForProgComplete+0xe8>)
   82940:	464b      	mov	r3, r9
   82942:	464a      	mov	r2, r9
   82944:	4641      	mov	r1, r8
   82946:	4620      	mov	r0, r4
   82948:	47a8      	blx	r5
   8294a:	464b      	mov	r3, r9
   8294c:	464a      	mov	r2, r9
   8294e:	4651      	mov	r1, sl
   82950:	4620      	mov	r0, r4
   82952:	47a8      	blx	r5
   82954:	464b      	mov	r3, r9
   82956:	464a      	mov	r2, r9
   82958:	b2f1      	uxtb	r1, r6
   8295a:	4620      	mov	r0, r4
   8295c:	47a8      	blx	r5
   8295e:	464b      	mov	r3, r9
   82960:	464a      	mov	r2, r9
   82962:	4649      	mov	r1, r9
   82964:	4620      	mov	r0, r4
   82966:	47a8      	blx	r5
   82968:	6923      	ldr	r3, [r4, #16]
   8296a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8296e:	d0fb      	beq.n	82968 <ISPTarget_WaitForProgComplete+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   82970:	f10d 0205 	add.w	r2, sp, #5
   82974:	f10d 0106 	add.w	r1, sp, #6
   82978:	4620      	mov	r0, r4
   8297a:	4b11      	ldr	r3, [pc, #68]	; (829c0 <ISPTarget_WaitForProgComplete+0xec>)
   8297c:	4798      	blx	r3
			return  ReceivedByte;
   8297e:	f89d 3006 	ldrb.w	r3, [sp, #6]
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   82982:	429f      	cmp	r7, r3
   82984:	d105      	bne.n	82992 <ISPTarget_WaitForProgComplete+0xbe>
   82986:	4b0a      	ldr	r3, [pc, #40]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82988:	681b      	ldr	r3, [r3, #0]
   8298a:	2b00      	cmp	r3, #0
   8298c:	d1d8      	bne.n	82940 <ISPTarget_WaitForProgComplete+0x6c>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8298e:	2080      	movs	r0, #128	; 0x80
   82990:	e7c5      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
			if (!(TimeoutTicksRemaining))
   82992:	4b07      	ldr	r3, [pc, #28]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82994:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   82996:	2b00      	cmp	r3, #0
   82998:	bf14      	ite	ne
   8299a:	2000      	movne	r0, #0
   8299c:	2080      	moveq	r0, #128	; 0x80
   8299e:	e7be      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   829a0:	4b08      	ldr	r3, [pc, #32]	; (829c4 <ISPTarget_WaitForProgComplete+0xf0>)
   829a2:	4798      	blx	r3
			break;
   829a4:	e7bb      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   829a6:	2000      	movs	r0, #0
   829a8:	e7b9      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
   829aa:	2000      	movs	r0, #0
   829ac:	e7b7      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
   829ae:	bf00      	nop
   829b0:	20002664 	.word	0x20002664
   829b4:	000824a1 	.word	0x000824a1
   829b8:	40008000 	.word	0x40008000
   829bc:	0008561f 	.word	0x0008561f
   829c0:	000855f1 	.word	0x000855f1
   829c4:	00082819 	.word	0x00082819

000829c8 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   829c8:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   829ca:	4b7e      	ldr	r3, [pc, #504]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   829cc:	789c      	ldrb	r4, [r3, #2]
   829ce:	4b7e      	ldr	r3, [pc, #504]	; (82bc8 <V2Protocol_ProcessCommand+0x200>)
   829d0:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   829d2:	4b7e      	ldr	r3, [pc, #504]	; (82bcc <V2Protocol_ProcessCommand+0x204>)
   829d4:	4798      	blx	r3

	switch (V2Command)
   829d6:	1e63      	subs	r3, r4, #1
   829d8:	2b21      	cmp	r3, #33	; 0x21
   829da:	f200 80e8 	bhi.w	82bae <V2Protocol_ProcessCommand+0x1e6>
   829de:	e8df f013 	tbh	[pc, r3, lsl #1]
   829e2:	0022      	.short	0x0022
   829e4:	00370037 	.word	0x00370037
   829e8:	00e600e6 	.word	0x00e600e6
   829ec:	00e6006c 	.word	0x00e6006c
   829f0:	00e600e6 	.word	0x00e600e6
   829f4:	00e6008b 	.word	0x00e6008b
   829f8:	00e600e6 	.word	0x00e600e6
   829fc:	00e600e6 	.word	0x00e600e6
   82a00:	00970093 	.word	0x00970093
   82a04:	009b00a7 	.word	0x009b00a7
   82a08:	009b00a1 	.word	0x009b00a1
   82a0c:	00b000a1 	.word	0x00b000a1
   82a10:	00b000ab 	.word	0x00b000ab
   82a14:	00ab00ab 	.word	0x00ab00ab
   82a18:	00b500ab 	.word	0x00b500ab
   82a1c:	00e600e6 	.word	0x00e600e6
   82a20:	00d300b9 	.word	0x00d300b9
   82a24:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82a26:	4b68      	ldr	r3, [pc, #416]	; (82bc8 <V2Protocol_ProcessCommand+0x200>)
   82a28:	2200      	movs	r2, #0
   82a2a:	705a      	strb	r2, [r3, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82a2c:	220d      	movs	r2, #13
   82a2e:	709a      	strb	r2, [r3, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82a30:	4c67      	ldr	r4, [pc, #412]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82a32:	cc07      	ldmia	r4!, {r0, r1, r2}
   82a34:	f8c3 0003 	str.w	r0, [r3, #3]
   82a38:	f8c3 1007 	str.w	r1, [r3, #7]
   82a3c:	f8c3 200b 	str.w	r2, [r3, #11]
   82a40:	7822      	ldrb	r2, [r4, #0]
   82a42:	73da      	strb	r2, [r3, #15]
	udd_g_ctrlreq.payload = status_payload;
   82a44:	4a5f      	ldr	r2, [pc, #380]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82a46:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   82a48:	2310      	movs	r3, #16
   82a4a:	8193      	strh	r3, [r2, #12]
	return true;
   82a4c:	2001      	movs	r0, #1
}
   82a4e:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82a50:	4b5c      	ldr	r3, [pc, #368]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82a52:	689b      	ldr	r3, [r3, #8]
   82a54:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   82a56:	2c02      	cmp	r4, #2
   82a58:	d00c      	beq.n	82a74 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   82a5a:	4b5e      	ldr	r3, [pc, #376]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a5c:	2202      	movs	r2, #2
   82a5e:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a60:	4628      	mov	r0, r5
   82a62:	4b5d      	ldr	r3, [pc, #372]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a64:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a66:	2c03      	cmp	r4, #3
   82a68:	d017      	beq.n	82a9a <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82a6a:	4b5c      	ldr	r3, [pc, #368]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82a6c:	22c0      	movs	r2, #192	; 0xc0
   82a6e:	705a      	strb	r2, [r3, #1]
	return true;
   82a70:	2001      	movs	r0, #1
   82a72:	e7ec      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   82a74:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   82a76:	4b57      	ldr	r3, [pc, #348]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a78:	2202      	movs	r2, #2
   82a7a:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a7c:	4628      	mov	r0, r5
   82a7e:	4b56      	ldr	r3, [pc, #344]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a80:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82a82:	f010 0f02 	tst.w	r0, #2
   82a86:	d0f0      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82a88:	4b54      	ldr	r3, [pc, #336]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82a8a:	2200      	movs	r2, #0
   82a8c:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a8e:	4621      	mov	r1, r4
   82a90:	4628      	mov	r0, r5
   82a92:	4b53      	ldr	r3, [pc, #332]	; (82be0 <V2Protocol_ProcessCommand+0x218>)
   82a94:	4798      	blx	r3
	return true;
   82a96:	2001      	movs	r0, #1
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a98:	e7d9      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a9a:	f010 0f01 	tst.w	r0, #1
   82a9e:	d0e4      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82aa0:	4c4e      	ldr	r4, [pc, #312]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82aa2:	2300      	movs	r3, #0
   82aa4:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82aa6:	4628      	mov	r0, r5
   82aa8:	4b4e      	ldr	r3, [pc, #312]	; (82be4 <V2Protocol_ProcessCommand+0x21c>)
   82aaa:	4798      	blx	r3
   82aac:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   82aae:	4a49      	ldr	r2, [pc, #292]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82ab0:	8813      	ldrh	r3, [r2, #0]
   82ab2:	3301      	adds	r3, #1
   82ab4:	8013      	strh	r3, [r2, #0]
	return true;
   82ab6:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   82ab8:	e7c9      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82aba:	4b42      	ldr	r3, [pc, #264]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82abc:	689b      	ldr	r3, [r3, #8]
   82abe:	78da      	ldrb	r2, [r3, #3]
   82ac0:	7899      	ldrb	r1, [r3, #2]
   82ac2:	0409      	lsls	r1, r1, #16
   82ac4:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82ac8:	781a      	ldrb	r2, [r3, #0]
   82aca:	4311      	orrs	r1, r2
   82acc:	785b      	ldrb	r3, [r3, #1]
   82ace:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   82ad2:	4b45      	ldr	r3, [pc, #276]	; (82be8 <V2Protocol_ProcessCommand+0x220>)
   82ad4:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   82ad6:	2900      	cmp	r1, #0
   82ad8:	db0a      	blt.n	82af0 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   82ada:	4844      	ldr	r0, [pc, #272]	; (82bec <V2Protocol_ProcessCommand+0x224>)
   82adc:	4b44      	ldr	r3, [pc, #272]	; (82bf0 <V2Protocol_ProcessCommand+0x228>)
   82ade:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82ae0:	4b3e      	ldr	r3, [pc, #248]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82ae2:	2200      	movs	r2, #0
   82ae4:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82ae6:	4b3b      	ldr	r3, [pc, #236]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82ae8:	2202      	movs	r2, #2
   82aea:	801a      	strh	r2, [r3, #0]
	return true;
   82aec:	2001      	movs	r0, #1
}
   82aee:	e7ae      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	  MustLoadExtendedAddress = true;
   82af0:	4b40      	ldr	r3, [pc, #256]	; (82bf4 <V2Protocol_ProcessCommand+0x22c>)
   82af2:	2201      	movs	r2, #1
   82af4:	701a      	strb	r2, [r3, #0]
   82af6:	e7f0      	b.n	82ada <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82af8:	4b38      	ldr	r3, [pc, #224]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82afa:	2200      	movs	r2, #0
   82afc:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82afe:	4b35      	ldr	r3, [pc, #212]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82b00:	2202      	movs	r2, #2
   82b02:	801a      	strh	r2, [r3, #0]
	return true;
   82b04:	2001      	movs	r0, #1
}
   82b06:	e7a2      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_EnterISPMode();
   82b08:	4b3b      	ldr	r3, [pc, #236]	; (82bf8 <V2Protocol_ProcessCommand+0x230>)
   82b0a:	4798      	blx	r3
	return true;
   82b0c:	2001      	movs	r0, #1
			break;
   82b0e:	e79e      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_LeaveISPMode();
   82b10:	4b3a      	ldr	r3, [pc, #232]	; (82bfc <V2Protocol_ProcessCommand+0x234>)
   82b12:	4798      	blx	r3
	return true;
   82b14:	2001      	movs	r0, #1
			break;
   82b16:	e79a      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82b18:	4939      	ldr	r1, [pc, #228]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b1a:	4620      	mov	r0, r4
   82b1c:	4b39      	ldr	r3, [pc, #228]	; (82c04 <V2Protocol_ProcessCommand+0x23c>)
   82b1e:	4798      	blx	r3
	return true;
   82b20:	2001      	movs	r0, #1
			break;
   82b22:	e794      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82b24:	4936      	ldr	r1, [pc, #216]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b26:	4620      	mov	r0, r4
   82b28:	4b37      	ldr	r3, [pc, #220]	; (82c08 <V2Protocol_ProcessCommand+0x240>)
   82b2a:	4798      	blx	r3
	return true;
   82b2c:	2001      	movs	r0, #1
			break;
   82b2e:	e78e      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ChipErase();
   82b30:	4b36      	ldr	r3, [pc, #216]	; (82c0c <V2Protocol_ProcessCommand+0x244>)
   82b32:	4798      	blx	r3
	return true;
   82b34:	2001      	movs	r0, #1
			break;
   82b36:	e78a      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   82b38:	4620      	mov	r0, r4
   82b3a:	4b35      	ldr	r3, [pc, #212]	; (82c10 <V2Protocol_ProcessCommand+0x248>)
   82b3c:	4798      	blx	r3
	return true;
   82b3e:	2001      	movs	r0, #1
			break;
   82b40:	e785      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_WriteFuseLock(V2Command);
   82b42:	4620      	mov	r0, r4
   82b44:	4b33      	ldr	r3, [pc, #204]	; (82c14 <V2Protocol_ProcessCommand+0x24c>)
   82b46:	4798      	blx	r3
	return true;
   82b48:	2001      	movs	r0, #1
			break;
   82b4a:	e780      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_SPIMulti();
   82b4c:	4b32      	ldr	r3, [pc, #200]	; (82c18 <V2Protocol_ProcessCommand+0x250>)
   82b4e:	4798      	blx	r3
	return true;
   82b50:	2001      	movs	r0, #1
			break;
   82b52:	e77c      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82b54:	4a1b      	ldr	r2, [pc, #108]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b56:	4b21      	ldr	r3, [pc, #132]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82b58:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   82b5a:	4b1e      	ldr	r3, [pc, #120]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82b5c:	8819      	ldrh	r1, [r3, #0]
   82b5e:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   82b60:	2200      	movs	r2, #0
   82b62:	801a      	strh	r2, [r3, #0]
			return true;
   82b64:	2001      	movs	r0, #1
   82b66:	e772      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b68:	4a16      	ldr	r2, [pc, #88]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b6a:	8853      	ldrh	r3, [r2, #2]
   82b6c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b6e:	88d2      	ldrh	r2, [r2, #6]
   82b70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82b78:	dc21      	bgt.n	82bbe <V2Protocol_ProcessCommand+0x1f6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   82b7a:	4912      	ldr	r1, [pc, #72]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b7c:	4b20      	ldr	r3, [pc, #128]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b7e:	4403      	add	r3, r0
   82b80:	608b      	str	r3, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82b82:	818a      	strh	r2, [r1, #12]
			return true;
   82b84:	2001      	movs	r0, #1
   82b86:	e762      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b88:	4a0e      	ldr	r2, [pc, #56]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b8a:	8853      	ldrh	r3, [r2, #2]
   82b8c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b8e:	88d2      	ldrh	r2, [r2, #6]
   82b90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82b98:	dd01      	ble.n	82b9e <V2Protocol_ProcessCommand+0x1d6>
				return false;
   82b9a:	2000      	movs	r0, #0
   82b9c:	e757      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82b9e:	4b09      	ldr	r3, [pc, #36]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82ba0:	6899      	ldr	r1, [r3, #8]
   82ba2:	4b17      	ldr	r3, [pc, #92]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82ba4:	4418      	add	r0, r3
   82ba6:	4b1d      	ldr	r3, [pc, #116]	; (82c1c <V2Protocol_ProcessCommand+0x254>)
   82ba8:	4798      	blx	r3
			return true;
   82baa:	2001      	movs	r0, #1
   82bac:	e74f      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   82bae:	4b0b      	ldr	r3, [pc, #44]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82bb0:	22c9      	movs	r2, #201	; 0xc9
   82bb2:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82bb4:	4b07      	ldr	r3, [pc, #28]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82bb6:	2202      	movs	r2, #2
   82bb8:	801a      	strh	r2, [r3, #0]
	return true;
   82bba:	2001      	movs	r0, #1
}
   82bbc:	e747      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
				return false;
   82bbe:	2000      	movs	r0, #0
   82bc0:	e745      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
   82bc2:	bf00      	nop
   82bc4:	20002df4 	.word	0x20002df4
   82bc8:	20001a2c 	.word	0x20001a2c
   82bcc:	00083579 	.word	0x00083579
   82bd0:	0008e4b0 	.word	0x0008e4b0
   82bd4:	2000263e 	.word	0x2000263e
   82bd8:	00082c3d 	.word	0x00082c3d
   82bdc:	20002640 	.word	0x20002640
   82be0:	00082c65 	.word	0x00082c65
   82be4:	00082c51 	.word	0x00082c51
   82be8:	20002660 	.word	0x20002660
   82bec:	0008e4c0 	.word	0x0008e4c0
   82bf0:	0008788d 	.word	0x0008788d
   82bf4:	2000263c 	.word	0x2000263c
   82bf8:	000824d5 	.word	0x000824d5
   82bfc:	0008261d 	.word	0x0008261d
   82c00:	2000192c 	.word	0x2000192c
   82c04:	00081fb5 	.word	0x00081fb5
   82c08:	00082235 	.word	0x00082235
   82c0c:	0008267d 	.word	0x0008267d
   82c10:	00082381 	.word	0x00082381
   82c14:	0008242d 	.word	0x0008242d
   82c18:	0008249d 	.word	0x0008249d
   82c1c:	000878b5 	.word	0x000878b5

00082c20 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
   82c20:	4602      	mov	r2, r0
	ParameterItem_t* CurrTableItem = ParameterTable;
   82c22:	4805      	ldr	r0, [pc, #20]	; (82c38 <V2Params_GetParamFromTable+0x18>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c24:	f100 011e 	add.w	r1, r0, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   82c28:	7803      	ldrb	r3, [r0, #0]
   82c2a:	4293      	cmp	r3, r2
   82c2c:	d003      	beq.n	82c36 <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   82c2e:	3003      	adds	r0, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c30:	4288      	cmp	r0, r1
   82c32:	d1f9      	bne.n	82c28 <V2Params_GetParamFromTable+0x8>
	}

	return NULL;
   82c34:	2000      	movs	r0, #0
}
   82c36:	4770      	bx	lr
   82c38:	20000588 	.word	0x20000588

00082c3c <V2Params_GetParameterPrivileges>:
{
   82c3c:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c3e:	4b03      	ldr	r3, [pc, #12]	; (82c4c <V2Params_GetParameterPrivileges+0x10>)
   82c40:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c42:	b108      	cbz	r0, 82c48 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   82c44:	7840      	ldrb	r0, [r0, #1]
}
   82c46:	bd08      	pop	{r3, pc}
	  return 0;
   82c48:	2000      	movs	r0, #0
   82c4a:	e7fc      	b.n	82c46 <V2Params_GetParameterPrivileges+0xa>
   82c4c:	00082c21 	.word	0x00082c21

00082c50 <V2Params_GetParameterValue>:
{
   82c50:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c52:	4b03      	ldr	r3, [pc, #12]	; (82c60 <V2Params_GetParameterValue+0x10>)
   82c54:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c56:	b108      	cbz	r0, 82c5c <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   82c58:	7880      	ldrb	r0, [r0, #2]
}
   82c5a:	bd08      	pop	{r3, pc}
	  return 0;
   82c5c:	2000      	movs	r0, #0
   82c5e:	e7fc      	b.n	82c5a <V2Params_GetParameterValue+0xa>
   82c60:	00082c21 	.word	0x00082c21

00082c64 <V2Params_SetParameterValue>:
{
   82c64:	b510      	push	{r4, lr}
   82c66:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c68:	4b02      	ldr	r3, [pc, #8]	; (82c74 <V2Params_SetParameterValue+0x10>)
   82c6a:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c6c:	b100      	cbz	r0, 82c70 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   82c6e:	7084      	strb	r4, [r0, #2]
}
   82c70:	bd10      	pop	{r4, pc}
   82c72:	bf00      	nop
   82c74:	00082c21 	.word	0x00082c21

00082c78 <ctrl_cdc_settings_cb>:

}

static void ctrl_cdc_settings_cb(void)
{
    if (udd_g_ctrlreq.req.wValue & 0x01) {
   82c78:	4b08      	ldr	r3, [pc, #32]	; (82c9c <ctrl_cdc_settings_cb+0x24>)
   82c7a:	885b      	ldrh	r3, [r3, #2]
   82c7c:	f013 0f01 	tst.w	r3, #1
        cdc_settings_change[0] = 1;
   82c80:	4a07      	ldr	r2, [pc, #28]	; (82ca0 <ctrl_cdc_settings_cb+0x28>)
   82c82:	bf14      	ite	ne
   82c84:	2101      	movne	r1, #1
    } else {
        cdc_settings_change[0] = 0;
   82c86:	2100      	moveq	r1, #0
   82c88:	7011      	strb	r1, [r2, #0]
    }
    if (udd_g_ctrlreq.req.wValue & 0x02) {
   82c8a:	f013 0f02 	tst.w	r3, #2
        cdc_settings_change[1] = 1;
   82c8e:	4b04      	ldr	r3, [pc, #16]	; (82ca0 <ctrl_cdc_settings_cb+0x28>)
   82c90:	bf14      	ite	ne
   82c92:	2201      	movne	r2, #1
    } else {
        cdc_settings_change[1] = 0;
   82c94:	2200      	moveq	r2, #0
   82c96:	705a      	strb	r2, [r3, #1]
    }
}
   82c98:	4770      	bx	lr
   82c9a:	bf00      	nop
   82c9c:	20002df4 	.word	0x20002df4
   82ca0:	200005a8 	.word	0x200005a8

00082ca4 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   82ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82ca6:	4b0a      	ldr	r3, [pc, #40]	; (82cd0 <ctrl_readmem_ctrl+0x2c>)
   82ca8:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82caa:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82cac:	4b09      	ldr	r3, [pc, #36]	; (82cd4 <ctrl_readmem_ctrl+0x30>)
   82cae:	4798      	blx	r3
	while(!FPGA_setlock(fpga_ctrlmem));
   82cb0:	2505      	movs	r5, #5
   82cb2:	4c09      	ldr	r4, [pc, #36]	; (82cd8 <ctrl_readmem_ctrl+0x34>)
   82cb4:	4628      	mov	r0, r5
   82cb6:	47a0      	blx	r4
   82cb8:	2800      	cmp	r0, #0
   82cba:	d0fb      	beq.n	82cb4 <ctrl_readmem_ctrl+0x10>
	FPGA_setaddr(address);
   82cbc:	4638      	mov	r0, r7
   82cbe:	4b07      	ldr	r3, [pc, #28]	; (82cdc <ctrl_readmem_ctrl+0x38>)
   82cc0:	4798      	blx	r3
	ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82cc2:	4b07      	ldr	r3, [pc, #28]	; (82ce0 <ctrl_readmem_ctrl+0x3c>)
   82cc4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   82cc8:	601a      	str	r2, [r3, #0]
	ctrlmemread_size = buflen;
   82cca:	4b06      	ldr	r3, [pc, #24]	; (82ce4 <ctrl_readmem_ctrl+0x40>)
   82ccc:	601e      	str	r6, [r3, #0]
}
   82cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cd0:	20001a50 	.word	0x20001a50
   82cd4:	00081d6d 	.word	0x00081d6d
   82cd8:	00081d41 	.word	0x00081d41
   82cdc:	00081d85 	.word	0x00081d85
   82ce0:	20001a90 	.word	0x20001a90
   82ce4:	20001a94 	.word	0x20001a94

00082ce8 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   82ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82cea:	4b0e      	ldr	r3, [pc, #56]	; (82d24 <ctrl_writemem_ctrl+0x3c>)
   82cec:	681c      	ldr	r4, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82cee:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82cf0:	4b0d      	ldr	r3, [pc, #52]	; (82d28 <ctrl_writemem_ctrl+0x40>)
   82cf2:	4798      	blx	r3
	while(!FPGA_setlock(fpga_generic));
   82cf4:	2601      	movs	r6, #1
   82cf6:	4d0d      	ldr	r5, [pc, #52]	; (82d2c <ctrl_writemem_ctrl+0x44>)
   82cf8:	4630      	mov	r0, r6
   82cfa:	47a8      	blx	r5
   82cfc:	2800      	cmp	r0, #0
   82cfe:	d0fb      	beq.n	82cf8 <ctrl_writemem_ctrl+0x10>
	FPGA_setaddr(address);
   82d00:	4638      	mov	r0, r7
   82d02:	4b0b      	ldr	r3, [pc, #44]	; (82d30 <ctrl_writemem_ctrl+0x48>)
   82d04:	4798      	blx	r3
	for(unsigned int i = 0; i < buflen; i++){
   82d06:	b14c      	cbz	r4, 82d1c <ctrl_writemem_ctrl+0x34>
   82d08:	4a0a      	ldr	r2, [pc, #40]	; (82d34 <ctrl_writemem_ctrl+0x4c>)
   82d0a:	2300      	movs	r3, #0
		xram[i] = ctrlbuf_payload[i];
   82d0c:	4d0a      	ldr	r5, [pc, #40]	; (82d38 <ctrl_writemem_ctrl+0x50>)
   82d0e:	6829      	ldr	r1, [r5, #0]
   82d10:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82d14:	54c8      	strb	r0, [r1, r3]
	for(unsigned int i = 0; i < buflen; i++){
   82d16:	3301      	adds	r3, #1
   82d18:	429c      	cmp	r4, r3
   82d1a:	d1f8      	bne.n	82d0e <ctrl_writemem_ctrl+0x26>
	FPGA_releaselock();
   82d1c:	4b02      	ldr	r3, [pc, #8]	; (82d28 <ctrl_writemem_ctrl+0x40>)
   82d1e:	4798      	blx	r3
}
   82d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d22:	bf00      	nop
   82d24:	20001a50 	.word	0x20001a50
   82d28:	00081d6d 	.word	0x00081d6d
   82d2c:	00081d41 	.word	0x00081d41
   82d30:	00081d85 	.word	0x00081d85
   82d34:	20001a57 	.word	0x20001a57
   82d38:	200002f4 	.word	0x200002f4

00082d3c <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   82d3c:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d3e:	4b07      	ldr	r3, [pc, #28]	; (82d5c <ctrl_writemem_bulk+0x20>)
   82d40:	685e      	ldr	r6, [r3, #4]
	FPGA_releaselock();
   82d42:	4b07      	ldr	r3, [pc, #28]	; (82d60 <ctrl_writemem_bulk+0x24>)
   82d44:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockout));
   82d46:	2504      	movs	r5, #4
   82d48:	4c06      	ldr	r4, [pc, #24]	; (82d64 <ctrl_writemem_bulk+0x28>)
   82d4a:	4628      	mov	r0, r5
   82d4c:	47a0      	blx	r4
   82d4e:	2800      	cmp	r0, #0
   82d50:	d0fb      	beq.n	82d4a <ctrl_writemem_bulk+0xe>
	FPGA_setaddr(address);
   82d52:	4630      	mov	r0, r6
   82d54:	4b04      	ldr	r3, [pc, #16]	; (82d68 <ctrl_writemem_bulk+0x2c>)
   82d56:	4798      	blx	r3
}
   82d58:	bd70      	pop	{r4, r5, r6, pc}
   82d5a:	bf00      	nop
   82d5c:	20001a50 	.word	0x20001a50
   82d60:	00081d6d 	.word	0x00081d6d
   82d64:	00081d41 	.word	0x00081d41
   82d68:	00081d85 	.word	0x00081d85

00082d6c <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   82d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   82d6e:	4b0a      	ldr	r3, [pc, #40]	; (82d98 <ctrl_readmem_bulk+0x2c>)
   82d70:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d72:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82d74:	4b09      	ldr	r3, [pc, #36]	; (82d9c <ctrl_readmem_bulk+0x30>)
   82d76:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockin));
   82d78:	2502      	movs	r5, #2
   82d7a:	4c09      	ldr	r4, [pc, #36]	; (82da0 <ctrl_readmem_bulk+0x34>)
   82d7c:	4628      	mov	r0, r5
   82d7e:	47a0      	blx	r4
   82d80:	2800      	cmp	r0, #0
   82d82:	d0fb      	beq.n	82d7c <ctrl_readmem_bulk+0x10>
	FPGA_setaddr(address);
   82d84:	4638      	mov	r0, r7
   82d86:	4b07      	ldr	r3, [pc, #28]	; (82da4 <ctrl_readmem_bulk+0x38>)
   82d88:	4798      	blx	r3
	udi_vendor_bulk_in_run(
   82d8a:	4a07      	ldr	r2, [pc, #28]	; (82da8 <ctrl_readmem_bulk+0x3c>)
   82d8c:	4631      	mov	r1, r6
   82d8e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   82d92:	4b06      	ldr	r3, [pc, #24]	; (82dac <ctrl_readmem_bulk+0x40>)
   82d94:	4798      	blx	r3
}
   82d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d98:	20001a50 	.word	0x20001a50
   82d9c:	00081d6d 	.word	0x00081d6d
   82da0:	00081d41 	.word	0x00081d41
   82da4:	00081d85 	.word	0x00081d85
   82da8:	00082efd 	.word	0x00082efd
   82dac:	000846a9 	.word	0x000846a9

00082db0 <ctrl_xmega_program_void>:
{
   82db0:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   82db2:	4b01      	ldr	r3, [pc, #4]	; (82db8 <ctrl_xmega_program_void+0x8>)
   82db4:	4798      	blx	r3
}
   82db6:	bd08      	pop	{r3, pc}
   82db8:	00083f05 	.word	0x00083f05

00082dbc <ctrl_avr_program_void>:
{
   82dbc:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   82dbe:	4b01      	ldr	r3, [pc, #4]	; (82dc4 <ctrl_avr_program_void+0x8>)
   82dc0:	4798      	blx	r3
}
   82dc2:	bd08      	pop	{r3, pc}
   82dc4:	000829c9 	.word	0x000829c9

00082dc8 <ctrl_usart2_enabledump>:
{
   82dc8:	b510      	push	{r4, lr}
   82dca:	b084      	sub	sp, #16
	switch(udd_g_ctrlreq.req.wValue & 0xFF){
   82dcc:	4b1e      	ldr	r3, [pc, #120]	; (82e48 <ctrl_usart2_enabledump+0x80>)
   82dce:	789b      	ldrb	r3, [r3, #2]
   82dd0:	b11b      	cbz	r3, 82dda <ctrl_usart2_enabledump+0x12>
   82dd2:	2b01      	cmp	r3, #1
   82dd4:	d012      	beq.n	82dfc <ctrl_usart2_enabledump+0x34>
}
   82dd6:	b004      	add	sp, #16
   82dd8:	bd10      	pop	{r4, pc}
			usart_disable_rx(USART2);
   82dda:	4c1c      	ldr	r4, [pc, #112]	; (82e4c <ctrl_usart2_enabledump+0x84>)
   82ddc:	4620      	mov	r0, r4
   82dde:	4b1c      	ldr	r3, [pc, #112]	; (82e50 <ctrl_usart2_enabledump+0x88>)
   82de0:	4798      	blx	r3
			usart_disable_tx(USART2);
   82de2:	4620      	mov	r0, r4
   82de4:	4b1b      	ldr	r3, [pc, #108]	; (82e54 <ctrl_usart2_enabledump+0x8c>)
   82de6:	4798      	blx	r3
			usart_enable_interrupt(USART2, 0);
   82de8:	2100      	movs	r1, #0
   82dea:	4620      	mov	r0, r4
   82dec:	4b1a      	ldr	r3, [pc, #104]	; (82e58 <ctrl_usart2_enabledump+0x90>)
   82dee:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82df0:	4b1a      	ldr	r3, [pc, #104]	; (82e5c <ctrl_usart2_enabledump+0x94>)
   82df2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   82dfa:	e7ec      	b.n	82dd6 <ctrl_usart2_enabledump+0xe>
			pmc_enable_periph_clk(ID_USART2);
   82dfc:	200f      	movs	r0, #15
   82dfe:	4b18      	ldr	r3, [pc, #96]	; (82e60 <ctrl_usart2_enabledump+0x98>)
   82e00:	4798      	blx	r3
			opts.channel_mode = US_MR_CHMODE_NORMAL;
   82e02:	2300      	movs	r3, #0
   82e04:	9303      	str	r3, [sp, #12]
			opts.spi_mode = SPI_MODE_0;
   82e06:	9302      	str	r3, [sp, #8]
			opts.char_length = US_MR_CHRL_8_BIT;
   82e08:	23c0      	movs	r3, #192	; 0xc0
   82e0a:	9301      	str	r3, [sp, #4]
			usart_init_spi_slave(USART2, &opts);
   82e0c:	4c0f      	ldr	r4, [pc, #60]	; (82e4c <ctrl_usart2_enabledump+0x84>)
   82e0e:	4669      	mov	r1, sp
   82e10:	4620      	mov	r0, r4
   82e12:	4b14      	ldr	r3, [pc, #80]	; (82e64 <ctrl_usart2_enabledump+0x9c>)
   82e14:	4798      	blx	r3
			usart_enable_rx(USART2);
   82e16:	4620      	mov	r0, r4
   82e18:	4b13      	ldr	r3, [pc, #76]	; (82e68 <ctrl_usart2_enabledump+0xa0>)
   82e1a:	4798      	blx	r3
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82e1c:	4b0f      	ldr	r3, [pc, #60]	; (82e5c <ctrl_usart2_enabledump+0x94>)
   82e1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82e22:	601a      	str	r2, [r3, #0]
			usart_enable_interrupt(USART2, US_IER_RXRDY);
   82e24:	2101      	movs	r1, #1
   82e26:	4620      	mov	r0, r4
   82e28:	4b0b      	ldr	r3, [pc, #44]	; (82e58 <ctrl_usart2_enabledump+0x90>)
   82e2a:	4798      	blx	r3
			gpio_configure_pin(PIO_PA23_IDX, (PIO_PERIPH_A | PIO_DEFAULT));
   82e2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e30:	2017      	movs	r0, #23
   82e32:	4c0e      	ldr	r4, [pc, #56]	; (82e6c <ctrl_usart2_enabledump+0xa4>)
   82e34:	47a0      	blx	r4
			gpio_configure_pin(PIO_PB22_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e3a:	2036      	movs	r0, #54	; 0x36
   82e3c:	47a0      	blx	r4
			gpio_configure_pin(PIO_PA25_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e42:	2019      	movs	r0, #25
   82e44:	47a0      	blx	r4
}
   82e46:	e7c6      	b.n	82dd6 <ctrl_usart2_enabledump+0xe>
   82e48:	20002df4 	.word	0x20002df4
   82e4c:	40098000 	.word	0x40098000
   82e50:	00086e53 	.word	0x00086e53
   82e54:	00086e43 	.word	0x00086e43
   82e58:	00086e59 	.word	0x00086e59
   82e5c:	e000e100 	.word	0xe000e100
   82e60:	00085531 	.word	0x00085531
   82e64:	00086d95 	.word	0x00086d95
   82e68:	00086e4d 	.word	0x00086e4d
   82e6c:	000851ed 	.word	0x000851ed

00082e70 <ctrl_usart_cb_data>:
{
	ctrl_usart(USART_TARGET, false);
}

static void ctrl_usart_cb_data(void)
{		
   82e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82e72:	4b0a      	ldr	r3, [pc, #40]	; (82e9c <ctrl_usart_cb_data+0x2c>)
   82e74:	88da      	ldrh	r2, [r3, #6]
   82e76:	899b      	ldrh	r3, [r3, #12]
   82e78:	4293      	cmp	r3, r2
   82e7a:	d30d      	bcc.n	82e98 <ctrl_usart_cb_data+0x28>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e7c:	b162      	cbz	r2, 82e98 <ctrl_usart_cb_data+0x28>
   82e7e:	2400      	movs	r4, #0
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   82e80:	4d06      	ldr	r5, [pc, #24]	; (82e9c <ctrl_usart_cb_data+0x2c>)
   82e82:	4f07      	ldr	r7, [pc, #28]	; (82ea0 <ctrl_usart_cb_data+0x30>)
   82e84:	4e07      	ldr	r6, [pc, #28]	; (82ea4 <ctrl_usart_cb_data+0x34>)
   82e86:	68ab      	ldr	r3, [r5, #8]
   82e88:	5d1a      	ldrb	r2, [r3, r4]
   82e8a:	2100      	movs	r1, #0
   82e8c:	4638      	mov	r0, r7
   82e8e:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e90:	3401      	adds	r4, #1
   82e92:	88eb      	ldrh	r3, [r5, #6]
   82e94:	42a3      	cmp	r3, r4
   82e96:	dcf6      	bgt.n	82e86 <ctrl_usart_cb_data+0x16>
	}
}
   82e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e9a:	bf00      	nop
   82e9c:	20002df4 	.word	0x20002df4
   82ea0:	40090000 	.word	0x40090000
   82ea4:	00083955 	.word	0x00083955

00082ea8 <ctrl_usart_cb>:
{
   82ea8:	b508      	push	{r3, lr}
	ctrl_usart(USART_TARGET, false);
   82eaa:	2100      	movs	r1, #0
   82eac:	4801      	ldr	r0, [pc, #4]	; (82eb4 <ctrl_usart_cb+0xc>)
   82eae:	4b02      	ldr	r3, [pc, #8]	; (82eb8 <ctrl_usart_cb+0x10>)
   82eb0:	4798      	blx	r3
}
   82eb2:	bd08      	pop	{r3, pc}
   82eb4:	40090000 	.word	0x40090000
   82eb8:	000835f9 	.word	0x000835f9

00082ebc <ctrl_progfpga_bulk>:
	// If any of the above failed...
	return false;		
}


void ctrl_progfpga_bulk(void){
   82ebc:	b508      	push	{r3, lr}
	
	switch(udd_g_ctrlreq.req.wValue){
   82ebe:	4b0b      	ldr	r3, [pc, #44]	; (82eec <ctrl_progfpga_bulk+0x30>)
   82ec0:	885b      	ldrh	r3, [r3, #2]
   82ec2:	2ba1      	cmp	r3, #161	; 0xa1
   82ec4:	d007      	beq.n	82ed6 <ctrl_progfpga_bulk+0x1a>
   82ec6:	2ba2      	cmp	r3, #162	; 0xa2
   82ec8:	d00b      	beq.n	82ee2 <ctrl_progfpga_bulk+0x26>
   82eca:	2ba0      	cmp	r3, #160	; 0xa0
   82ecc:	d000      	beq.n	82ed0 <ctrl_progfpga_bulk+0x14>
			break;
			
		default:
			break;
	}
}
   82ece:	bd08      	pop	{r3, pc}
			fpga_program_setup1();			
   82ed0:	4b07      	ldr	r3, [pc, #28]	; (82ef0 <ctrl_progfpga_bulk+0x34>)
   82ed2:	4798      	blx	r3
			break;
   82ed4:	e7fb      	b.n	82ece <ctrl_progfpga_bulk+0x12>
			fpga_program_setup2();
   82ed6:	4b07      	ldr	r3, [pc, #28]	; (82ef4 <ctrl_progfpga_bulk+0x38>)
   82ed8:	4798      	blx	r3
			blockendpoint_usage = bep_fpgabitstream;
   82eda:	4b07      	ldr	r3, [pc, #28]	; (82ef8 <ctrl_progfpga_bulk+0x3c>)
   82edc:	220a      	movs	r2, #10
   82ede:	701a      	strb	r2, [r3, #0]
			break;
   82ee0:	e7f5      	b.n	82ece <ctrl_progfpga_bulk+0x12>
			blockendpoint_usage = bep_emem;
   82ee2:	4b05      	ldr	r3, [pc, #20]	; (82ef8 <ctrl_progfpga_bulk+0x3c>)
   82ee4:	2200      	movs	r2, #0
   82ee6:	701a      	strb	r2, [r3, #0]
}
   82ee8:	e7f1      	b.n	82ece <ctrl_progfpga_bulk+0x12>
   82eea:	bf00      	nop
   82eec:	20002df4 	.word	0x20002df4
   82ef0:	00087151 	.word	0x00087151
   82ef4:	000871e5 	.word	0x000871e5
   82ef8:	20001a4d 	.word	0x20001a4d

00082efc <main_vendor_bulk_in_received>:
	return false;
}

void main_vendor_bulk_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82efc:	b508      	push	{r3, lr}
	UNUSED(nb_transfered);
	UNUSED(ep);
	
	if (FPGA_lockstatus() == fpga_blockin){		
   82efe:	4b08      	ldr	r3, [pc, #32]	; (82f20 <main_vendor_bulk_in_received+0x24>)
   82f00:	4798      	blx	r3
   82f02:	2802      	cmp	r0, #2
   82f04:	d004      	beq.n	82f10 <main_vendor_bulk_in_received+0x14>
		FPGA_releaselock();
	} else 	if (FPGA_lockstatus() == fpga_streamin) {
   82f06:	4b06      	ldr	r3, [pc, #24]	; (82f20 <main_vendor_bulk_in_received+0x24>)
   82f08:	4798      	blx	r3
   82f0a:	2803      	cmp	r0, #3
   82f0c:	d003      	beq.n	82f16 <main_vendor_bulk_in_received+0x1a>

	if (UDD_EP_TRANSFER_OK != status) {
		return; // Transfer aborted/error
	}	

}
   82f0e:	bd08      	pop	{r3, pc}
		FPGA_releaselock();
   82f10:	4b04      	ldr	r3, [pc, #16]	; (82f24 <main_vendor_bulk_in_received+0x28>)
   82f12:	4798      	blx	r3
   82f14:	e7fb      	b.n	82f0e <main_vendor_bulk_in_received+0x12>
		smc_normaltiming();
   82f16:	4b04      	ldr	r3, [pc, #16]	; (82f28 <main_vendor_bulk_in_received+0x2c>)
   82f18:	4798      	blx	r3
		FPGA_releaselock();
   82f1a:	4b02      	ldr	r3, [pc, #8]	; (82f24 <main_vendor_bulk_in_received+0x28>)
   82f1c:	4798      	blx	r3
	if (UDD_EP_TRANSFER_OK != status) {
   82f1e:	e7f6      	b.n	82f0e <main_vendor_bulk_in_received+0x12>
   82f20:	00081d79 	.word	0x00081d79
   82f24:	00081d6d 	.word	0x00081d6d
   82f28:	00081dad 	.word	0x00081dad

00082f2c <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82f2c:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   82f2e:	b9b8      	cbnz	r0, 82f60 <main_vendor_bulk_out_received+0x34>
		main_vendor_bulk_out_received);
		
		return;
	}
	
	if (blockendpoint_usage == bep_emem){
   82f30:	4b17      	ldr	r3, [pc, #92]	; (82f90 <main_vendor_bulk_out_received+0x64>)
   82f32:	781b      	ldrb	r3, [r3, #0]
   82f34:	b9f3      	cbnz	r3, 82f74 <main_vendor_bulk_out_received+0x48>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f36:	b141      	cbz	r1, 82f4a <main_vendor_bulk_out_received+0x1e>
   82f38:	4a16      	ldr	r2, [pc, #88]	; (82f94 <main_vendor_bulk_out_received+0x68>)
			xram[i] = main_buf_loopback[i];
   82f3a:	4d17      	ldr	r5, [pc, #92]	; (82f98 <main_vendor_bulk_out_received+0x6c>)
   82f3c:	6828      	ldr	r0, [r5, #0]
   82f3e:	f812 4b01 	ldrb.w	r4, [r2], #1
   82f42:	54c4      	strb	r4, [r0, r3]
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f44:	3301      	adds	r3, #1
   82f46:	4299      	cmp	r1, r3
   82f48:	d1f8      	bne.n	82f3c <main_vendor_bulk_out_received+0x10>
		}
		
		if (FPGA_lockstatus() == fpga_blockout){
   82f4a:	4b14      	ldr	r3, [pc, #80]	; (82f9c <main_vendor_bulk_out_received+0x70>)
   82f4c:	4798      	blx	r3
   82f4e:	2804      	cmp	r0, #4
   82f50:	d00d      	beq.n	82f6e <main_vendor_bulk_out_received+0x42>
#endif
	}
	
	//printf("BULKOUT: %d bytes\n", (int)nb_transfered);
	
	udi_vendor_bulk_out_run(
   82f52:	4a13      	ldr	r2, [pc, #76]	; (82fa0 <main_vendor_bulk_out_received+0x74>)
   82f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f58:	480e      	ldr	r0, [pc, #56]	; (82f94 <main_vendor_bulk_out_received+0x68>)
   82f5a:	4b12      	ldr	r3, [pc, #72]	; (82fa4 <main_vendor_bulk_out_received+0x78>)
   82f5c:	4798      	blx	r3
	main_buf_loopback,
	sizeof(main_buf_loopback),
	main_vendor_bulk_out_received);
}
   82f5e:	bd70      	pop	{r4, r5, r6, pc}
		udi_vendor_bulk_out_run(
   82f60:	4a0f      	ldr	r2, [pc, #60]	; (82fa0 <main_vendor_bulk_out_received+0x74>)
   82f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f66:	480b      	ldr	r0, [pc, #44]	; (82f94 <main_vendor_bulk_out_received+0x68>)
   82f68:	4b0e      	ldr	r3, [pc, #56]	; (82fa4 <main_vendor_bulk_out_received+0x78>)
   82f6a:	4798      	blx	r3
		return;
   82f6c:	e7f7      	b.n	82f5e <main_vendor_bulk_out_received+0x32>
			FPGA_releaselock();
   82f6e:	4b0e      	ldr	r3, [pc, #56]	; (82fa8 <main_vendor_bulk_out_received+0x7c>)
   82f70:	4798      	blx	r3
   82f72:	e7ee      	b.n	82f52 <main_vendor_bulk_out_received+0x26>
	} else if (blockendpoint_usage == bep_fpgabitstream){
   82f74:	2b0a      	cmp	r3, #10
   82f76:	d1ec      	bne.n	82f52 <main_vendor_bulk_out_received+0x26>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f78:	2900      	cmp	r1, #0
   82f7a:	d0ea      	beq.n	82f52 <main_vendor_bulk_out_received+0x26>
   82f7c:	4d05      	ldr	r5, [pc, #20]	; (82f94 <main_vendor_bulk_out_received+0x68>)
   82f7e:	194c      	adds	r4, r1, r5
			fpga_program_sendbyte(main_buf_loopback[i]);
   82f80:	4e0a      	ldr	r6, [pc, #40]	; (82fac <main_vendor_bulk_out_received+0x80>)
   82f82:	f815 0b01 	ldrb.w	r0, [r5], #1
   82f86:	47b0      	blx	r6
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f88:	42a5      	cmp	r5, r4
   82f8a:	d1fa      	bne.n	82f82 <main_vendor_bulk_out_received+0x56>
   82f8c:	e7e1      	b.n	82f52 <main_vendor_bulk_out_received+0x26>
   82f8e:	bf00      	nop
   82f90:	20001a4d 	.word	0x20001a4d
   82f94:	20001a9c 	.word	0x20001a9c
   82f98:	200002f4 	.word	0x200002f4
   82f9c:	00081d79 	.word	0x00081d79
   82fa0:	00082f2d 	.word	0x00082f2d
   82fa4:	000846c5 	.word	0x000846c5
   82fa8:	00081d6d 	.word	0x00081d6d
   82fac:	000871f5 	.word	0x000871f5

00082fb0 <ctrl_sam3ucfg_cb>:
{
   82fb0:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   82fb2:	4b17      	ldr	r3, [pc, #92]	; (83010 <ctrl_sam3ucfg_cb+0x60>)
   82fb4:	789b      	ldrb	r3, [r3, #2]
   82fb6:	2b02      	cmp	r3, #2
   82fb8:	d00f      	beq.n	82fda <ctrl_sam3ucfg_cb+0x2a>
   82fba:	2b03      	cmp	r3, #3
   82fbc:	d011      	beq.n	82fe2 <ctrl_sam3ucfg_cb+0x32>
   82fbe:	2b01      	cmp	r3, #1
   82fc0:	d000      	beq.n	82fc4 <ctrl_sam3ucfg_cb+0x14>
}
   82fc2:	bd10      	pop	{r4, pc}
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82fc4:	203e      	movs	r0, #62	; 0x3e
   82fc6:	4b13      	ldr	r3, [pc, #76]	; (83014 <ctrl_sam3ucfg_cb+0x64>)
   82fc8:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   82fca:	4c13      	ldr	r4, [pc, #76]	; (83018 <ctrl_sam3ucfg_cb+0x68>)
   82fcc:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82fce:	2800      	cmp	r0, #0
   82fd0:	d0fc      	beq.n	82fcc <ctrl_sam3ucfg_cb+0x1c>
			pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   82fd2:	2010      	movs	r0, #16
   82fd4:	4b11      	ldr	r3, [pc, #68]	; (8301c <ctrl_sam3ucfg_cb+0x6c>)
   82fd6:	4798      	blx	r3
			break;
   82fd8:	e7f3      	b.n	82fc2 <ctrl_sam3ucfg_cb+0x12>
			pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fda:	2010      	movs	r0, #16
   82fdc:	4b10      	ldr	r3, [pc, #64]	; (83020 <ctrl_sam3ucfg_cb+0x70>)
   82fde:	4798      	blx	r3
			break;
   82fe0:	e7ef      	b.n	82fc2 <ctrl_sam3ucfg_cb+0x12>
			board_power(0);
   82fe2:	201d      	movs	r0, #29
   82fe4:	4b0f      	ldr	r3, [pc, #60]	; (83024 <ctrl_sam3ucfg_cb+0x74>)
   82fe6:	4798      	blx	r3
			efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);	
   82fe8:	2201      	movs	r2, #1
   82fea:	210c      	movs	r1, #12
   82fec:	480e      	ldr	r0, [pc, #56]	; (83028 <ctrl_sam3ucfg_cb+0x78>)
   82fee:	4b0f      	ldr	r3, [pc, #60]	; (8302c <ctrl_sam3ucfg_cb+0x7c>)
   82ff0:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82ff2:	4b0f      	ldr	r3, [pc, #60]	; (83030 <ctrl_sam3ucfg_cb+0x80>)
   82ff4:	4798      	blx	r3
			while (RSTC->RSTC_SR & RSTC_SR_SRCMP);			
   82ff6:	4b0f      	ldr	r3, [pc, #60]	; (83034 <ctrl_sam3ucfg_cb+0x84>)
   82ff8:	685a      	ldr	r2, [r3, #4]
   82ffa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   82ffe:	d1fb      	bne.n	82ff8 <ctrl_sam3ucfg_cb+0x48>
			RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;				
   83000:	4a0c      	ldr	r2, [pc, #48]	; (83034 <ctrl_sam3ucfg_cb+0x84>)
   83002:	6813      	ldr	r3, [r2, #0]
   83004:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83008:	f043 0305 	orr.w	r3, r3, #5
   8300c:	6013      	str	r3, [r2, #0]
			while(1);
   8300e:	e7fe      	b.n	8300e <ctrl_sam3ucfg_cb+0x5e>
   83010:	20002df4 	.word	0x20002df4
   83014:	00085499 	.word	0x00085499
   83018:	000854c1 	.word	0x000854c1
   8301c:	000853d1 	.word	0x000853d1
   83020:	00085435 	.word	0x00085435
   83024:	000851d1 	.word	0x000851d1
   83028:	400e0800 	.word	0x400e0800
   8302c:	00081df9 	.word	0x00081df9
   83030:	000862dd 	.word	0x000862dd
   83034:	400e1200 	.word	0x400e1200

00083038 <main_suspend_action>:
{
   83038:	b508      	push	{r3, lr}
	active = false;
   8303a:	4b03      	ldr	r3, [pc, #12]	; (83048 <main_suspend_action+0x10>)
   8303c:	2200      	movs	r2, #0
   8303e:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   83040:	4b02      	ldr	r3, [pc, #8]	; (8304c <main_suspend_action+0x14>)
   83042:	4798      	blx	r3
}
   83044:	bd08      	pop	{r3, pc}
   83046:	bf00      	nop
   83048:	20001a4c 	.word	0x20001a4c
   8304c:	00084501 	.word	0x00084501

00083050 <main_resume_action>:
{
   83050:	b508      	push	{r3, lr}
	ui_wakeup();
   83052:	4b01      	ldr	r3, [pc, #4]	; (83058 <main_resume_action+0x8>)
   83054:	4798      	blx	r3
}
   83056:	bd08      	pop	{r3, pc}
   83058:	0008451d 	.word	0x0008451d

0008305c <main_sof_action>:
{
   8305c:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
   8305e:	4b04      	ldr	r3, [pc, #16]	; (83070 <main_sof_action+0x14>)
   83060:	781b      	ldrb	r3, [r3, #0]
   83062:	b903      	cbnz	r3, 83066 <main_sof_action+0xa>
}
   83064:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
   83066:	4b03      	ldr	r3, [pc, #12]	; (83074 <main_sof_action+0x18>)
   83068:	4798      	blx	r3
   8306a:	4b03      	ldr	r3, [pc, #12]	; (83078 <main_sof_action+0x1c>)
   8306c:	4798      	blx	r3
   8306e:	e7f9      	b.n	83064 <main_sof_action+0x8>
   83070:	200005aa 	.word	0x200005aa
   83074:	0008635d 	.word	0x0008635d
   83078:	00084535 	.word	0x00084535

0008307c <main_vendor_enable>:
{
   8307c:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
   8307e:	2401      	movs	r4, #1
   83080:	4b05      	ldr	r3, [pc, #20]	; (83098 <main_vendor_enable+0x1c>)
   83082:	701c      	strb	r4, [r3, #0]
	active = true;
   83084:	4b05      	ldr	r3, [pc, #20]	; (8309c <main_vendor_enable+0x20>)
   83086:	701c      	strb	r4, [r3, #0]
	udi_vendor_bulk_out_run(
   83088:	4a05      	ldr	r2, [pc, #20]	; (830a0 <main_vendor_enable+0x24>)
   8308a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8308e:	4805      	ldr	r0, [pc, #20]	; (830a4 <main_vendor_enable+0x28>)
   83090:	4b05      	ldr	r3, [pc, #20]	; (830a8 <main_vendor_enable+0x2c>)
   83092:	4798      	blx	r3
}
   83094:	4620      	mov	r0, r4
   83096:	bd10      	pop	{r4, pc}
   83098:	200005aa 	.word	0x200005aa
   8309c:	20001a4c 	.word	0x20001a4c
   830a0:	00082f2d 	.word	0x00082f2d
   830a4:	20001a9c 	.word	0x20001a9c
   830a8:	000846c5 	.word	0x000846c5

000830ac <main_vendor_disable>:
	main_b_vendor_enable = false;
   830ac:	4b01      	ldr	r3, [pc, #4]	; (830b4 <main_vendor_disable+0x8>)
   830ae:	2200      	movs	r2, #0
   830b0:	701a      	strb	r2, [r3, #0]
}
   830b2:	4770      	bx	lr
   830b4:	200005aa 	.word	0x200005aa

000830b8 <main_setup_out_received>:
{
   830b8:	b508      	push	{r3, lr}
	udd_g_ctrlreq.payload = ctrlbuffer;
   830ba:	4b43      	ldr	r3, [pc, #268]	; (831c8 <main_setup_out_received+0x110>)
   830bc:	4a43      	ldr	r2, [pc, #268]	; (831cc <main_setup_out_received+0x114>)
   830be:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   830c0:	88da      	ldrh	r2, [r3, #6]
   830c2:	2a40      	cmp	r2, #64	; 0x40
   830c4:	bf28      	it	cs
   830c6:	2240      	movcs	r2, #64	; 0x40
   830c8:	819a      	strh	r2, [r3, #12]
	blockendpoint_usage = bep_emem;
   830ca:	4a41      	ldr	r2, [pc, #260]	; (831d0 <main_setup_out_received+0x118>)
   830cc:	2100      	movs	r1, #0
   830ce:	7011      	strb	r1, [r2, #0]
	switch(udd_g_ctrlreq.req.bRequest){
   830d0:	785b      	ldrb	r3, [r3, #1]
   830d2:	3b10      	subs	r3, #16
   830d4:	2b21      	cmp	r3, #33	; 0x21
   830d6:	d875      	bhi.n	831c4 <main_setup_out_received+0x10c>
   830d8:	e8df f003 	tbb	[pc, r3]
   830dc:	321c2711 	.word	0x321c2711
   830e0:	745b7474 	.word	0x745b7474
   830e4:	3d427474 	.word	0x3d427474
   830e8:	5651474c 	.word	0x5651474c
   830ec:	746a6560 	.word	0x746a6560
   830f0:	74747474 	.word	0x74747474
   830f4:	74747474 	.word	0x74747474
   830f8:	74747474 	.word	0x74747474
   830fc:	6f74      	.short	0x6f74
			if (FPGA_setlock(fpga_usblocked)){
   830fe:	2006      	movs	r0, #6
   83100:	4b34      	ldr	r3, [pc, #208]	; (831d4 <main_setup_out_received+0x11c>)
   83102:	4798      	blx	r3
   83104:	b908      	cbnz	r0, 8310a <main_setup_out_received+0x52>
	return false;		
   83106:	2000      	movs	r0, #0
   83108:	e05d      	b.n	831c6 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   8310a:	4b2f      	ldr	r3, [pc, #188]	; (831c8 <main_setup_out_received+0x110>)
   8310c:	4a32      	ldr	r2, [pc, #200]	; (831d8 <main_setup_out_received+0x120>)
   8310e:	611a      	str	r2, [r3, #16]
				return true;
   83110:	2001      	movs	r0, #1
   83112:	e058      	b.n	831c6 <main_setup_out_received+0x10e>
			if (FPGA_setlock(fpga_usblocked)){
   83114:	2006      	movs	r0, #6
   83116:	4b2f      	ldr	r3, [pc, #188]	; (831d4 <main_setup_out_received+0x11c>)
   83118:	4798      	blx	r3
   8311a:	b908      	cbnz	r0, 83120 <main_setup_out_received+0x68>
	return false;		
   8311c:	2000      	movs	r0, #0
   8311e:	e052      	b.n	831c6 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   83120:	4b29      	ldr	r3, [pc, #164]	; (831c8 <main_setup_out_received+0x110>)
   83122:	4a2e      	ldr	r2, [pc, #184]	; (831dc <main_setup_out_received+0x124>)
   83124:	611a      	str	r2, [r3, #16]
				return true;	
   83126:	2001      	movs	r0, #1
   83128:	e04d      	b.n	831c6 <main_setup_out_received+0x10e>
			if (FPGA_setlock(fpga_usblocked)){
   8312a:	2006      	movs	r0, #6
   8312c:	4b29      	ldr	r3, [pc, #164]	; (831d4 <main_setup_out_received+0x11c>)
   8312e:	4798      	blx	r3
   83130:	b908      	cbnz	r0, 83136 <main_setup_out_received+0x7e>
	return false;		
   83132:	2000      	movs	r0, #0
   83134:	e047      	b.n	831c6 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   83136:	4b24      	ldr	r3, [pc, #144]	; (831c8 <main_setup_out_received+0x110>)
   83138:	4a29      	ldr	r2, [pc, #164]	; (831e0 <main_setup_out_received+0x128>)
   8313a:	611a      	str	r2, [r3, #16]
				return true;
   8313c:	2001      	movs	r0, #1
   8313e:	e042      	b.n	831c6 <main_setup_out_received+0x10e>
			if (FPGA_setlock(fpga_usblocked)){
   83140:	2006      	movs	r0, #6
   83142:	4b24      	ldr	r3, [pc, #144]	; (831d4 <main_setup_out_received+0x11c>)
   83144:	4798      	blx	r3
   83146:	b908      	cbnz	r0, 8314c <main_setup_out_received+0x94>
	return false;		
   83148:	2000      	movs	r0, #0
   8314a:	e03c      	b.n	831c6 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8314c:	4b1e      	ldr	r3, [pc, #120]	; (831c8 <main_setup_out_received+0x110>)
   8314e:	4a25      	ldr	r2, [pc, #148]	; (831e4 <main_setup_out_received+0x12c>)
   83150:	611a      	str	r2, [r3, #16]
				return true;
   83152:	2001      	movs	r0, #1
   83154:	e037      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_usart_cb;
   83156:	4b1c      	ldr	r3, [pc, #112]	; (831c8 <main_setup_out_received+0x110>)
   83158:	4a23      	ldr	r2, [pc, #140]	; (831e8 <main_setup_out_received+0x130>)
   8315a:	611a      	str	r2, [r3, #16]
			return true;
   8315c:	2001      	movs	r0, #1
   8315e:	e032      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   83160:	4b19      	ldr	r3, [pc, #100]	; (831c8 <main_setup_out_received+0x110>)
   83162:	4a22      	ldr	r2, [pc, #136]	; (831ec <main_setup_out_received+0x134>)
   83164:	611a      	str	r2, [r3, #16]
			return true;
   83166:	2001      	movs	r0, #1
   83168:	e02d      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_scardconfig_cb;
   8316a:	4b17      	ldr	r3, [pc, #92]	; (831c8 <main_setup_out_received+0x110>)
   8316c:	4a20      	ldr	r2, [pc, #128]	; (831f0 <main_setup_out_received+0x138>)
   8316e:	611a      	str	r2, [r3, #16]
			return true;
   83170:	2001      	movs	r0, #1
   83172:	e028      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_scarddata_cb;
   83174:	4b14      	ldr	r3, [pc, #80]	; (831c8 <main_setup_out_received+0x110>)
   83176:	4a1f      	ldr	r2, [pc, #124]	; (831f4 <main_setup_out_received+0x13c>)
   83178:	611a      	str	r2, [r3, #16]
			return true;
   8317a:	2001      	movs	r0, #1
   8317c:	e023      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_scardaux_cb;
   8317e:	4b12      	ldr	r3, [pc, #72]	; (831c8 <main_setup_out_received+0x110>)
   83180:	4a1d      	ldr	r2, [pc, #116]	; (831f8 <main_setup_out_received+0x140>)
   83182:	611a      	str	r2, [r3, #16]
			return true;
   83184:	2001      	movs	r0, #1
   83186:	e01e      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_usart2_enabledump;
   83188:	4b0f      	ldr	r3, [pc, #60]	; (831c8 <main_setup_out_received+0x110>)
   8318a:	4a1c      	ldr	r2, [pc, #112]	; (831fc <main_setup_out_received+0x144>)
   8318c:	611a      	str	r2, [r3, #16]
			return true;
   8318e:	2001      	movs	r0, #1
   83190:	e019      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   83192:	4b0d      	ldr	r3, [pc, #52]	; (831c8 <main_setup_out_received+0x110>)
   83194:	4a1a      	ldr	r2, [pc, #104]	; (83200 <main_setup_out_received+0x148>)
   83196:	611a      	str	r2, [r3, #16]
			return true;
   83198:	2001      	movs	r0, #1
   8319a:	e014      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   8319c:	4b0a      	ldr	r3, [pc, #40]	; (831c8 <main_setup_out_received+0x110>)
   8319e:	4a19      	ldr	r2, [pc, #100]	; (83204 <main_setup_out_received+0x14c>)
   831a0:	611a      	str	r2, [r3, #16]
			return true;
   831a2:	2001      	movs	r0, #1
   831a4:	e00f      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_avr_program_void;
   831a6:	4b08      	ldr	r3, [pc, #32]	; (831c8 <main_setup_out_received+0x110>)
   831a8:	4a17      	ldr	r2, [pc, #92]	; (83208 <main_setup_out_received+0x150>)
   831aa:	611a      	str	r2, [r3, #16]
			return true;
   831ac:	2001      	movs	r0, #1
   831ae:	e00a      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   831b0:	4b05      	ldr	r3, [pc, #20]	; (831c8 <main_setup_out_received+0x110>)
   831b2:	4a16      	ldr	r2, [pc, #88]	; (8320c <main_setup_out_received+0x154>)
   831b4:	611a      	str	r2, [r3, #16]
			return true;
   831b6:	2001      	movs	r0, #1
   831b8:	e005      	b.n	831c6 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_cdc_settings_cb;
   831ba:	4b03      	ldr	r3, [pc, #12]	; (831c8 <main_setup_out_received+0x110>)
   831bc:	4a14      	ldr	r2, [pc, #80]	; (83210 <main_setup_out_received+0x158>)
   831be:	611a      	str	r2, [r3, #16]
			return true;
   831c0:	2001      	movs	r0, #1
   831c2:	e000      	b.n	831c6 <main_setup_out_received+0x10e>
	switch(udd_g_ctrlreq.req.bRequest){
   831c4:	2000      	movs	r0, #0
}
   831c6:	bd08      	pop	{r3, pc}
   831c8:	20002df4 	.word	0x20002df4
   831cc:	20001a50 	.word	0x20001a50
   831d0:	20001a4d 	.word	0x20001a4d
   831d4:	00081d41 	.word	0x00081d41
   831d8:	00082d6d 	.word	0x00082d6d
   831dc:	00082ca5 	.word	0x00082ca5
   831e0:	00082d3d 	.word	0x00082d3d
   831e4:	00082ce9 	.word	0x00082ce9
   831e8:	00082ea9 	.word	0x00082ea9
   831ec:	00082e71 	.word	0x00082e71
   831f0:	00081cc1 	.word	0x00081cc1
   831f4:	00081a79 	.word	0x00081a79
   831f8:	00081acd 	.word	0x00081acd
   831fc:	00082dc9 	.word	0x00082dc9
   83200:	00082ebd 	.word	0x00082ebd
   83204:	00082db1 	.word	0x00082db1
   83208:	00082dbd 	.word	0x00082dbd
   8320c:	00082fb1 	.word	0x00082fb1
   83210:	00082c79 	.word	0x00082c79

00083214 <main_setup_in_received>:
	if (udd_g_ctrlreq.req.wLength > sizeof(respbuf)){
   83214:	4b40      	ldr	r3, [pc, #256]	; (83318 <main_setup_in_received+0x104>)
   83216:	88da      	ldrh	r2, [r3, #6]
   83218:	2ac8      	cmp	r2, #200	; 0xc8
   8321a:	d878      	bhi.n	8330e <main_setup_in_received+0xfa>
{
   8321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.bRequest){
   83220:	785b      	ldrb	r3, [r3, #1]
   83222:	3b12      	subs	r3, #18
   83224:	2b1f      	cmp	r3, #31
   83226:	d874      	bhi.n	83312 <main_setup_in_received+0xfe>
   83228:	e8df f003 	tbb	[pc, r3]
   8322c:	33737326 	.word	0x33737326
   83230:	73735073 	.word	0x73735073
   83234:	5c5f4b10 	.word	0x5c5f4b10
   83238:	48457362 	.word	0x48457362
   8323c:	73737373 	.word	0x73737373
   83240:	73737373 	.word	0x73737373
   83244:	73737373 	.word	0x73737373
   83248:	65737373 	.word	0x65737373
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8324c:	2400      	movs	r4, #0
   8324e:	b16a      	cbz	r2, 8326c <main_setup_in_received+0x58>
   83250:	4d32      	ldr	r5, [pc, #200]	; (8331c <main_setup_in_received+0x108>)
   83252:	2400      	movs	r4, #0
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   83254:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8333c <main_setup_in_received+0x128>
   83258:	4f31      	ldr	r7, [pc, #196]	; (83320 <main_setup_in_received+0x10c>)
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8325a:	4e2f      	ldr	r6, [pc, #188]	; (83318 <main_setup_in_received+0x104>)
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   8325c:	4640      	mov	r0, r8
   8325e:	47b8      	blx	r7
   83260:	f805 0b01 	strb.w	r0, [r5], #1
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83264:	3401      	adds	r4, #1
   83266:	88f3      	ldrh	r3, [r6, #6]
   83268:	42a3      	cmp	r3, r4
   8326a:	d8f7      	bhi.n	8325c <main_setup_in_received+0x48>
			udd_g_ctrlreq.payload = respbuf;
   8326c:	4b2a      	ldr	r3, [pc, #168]	; (83318 <main_setup_in_received+0x104>)
   8326e:	4a2b      	ldr	r2, [pc, #172]	; (8331c <main_setup_in_received+0x108>)
   83270:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = cnt;
   83272:	819c      	strh	r4, [r3, #12]
			return true;
   83274:	2001      	movs	r0, #1
   83276:	e04d      	b.n	83314 <main_setup_in_received+0x100>
			udd_g_ctrlreq.payload = ctrlmemread_buf;
   83278:	4a27      	ldr	r2, [pc, #156]	; (83318 <main_setup_in_received+0x104>)
   8327a:	4b2a      	ldr	r3, [pc, #168]	; (83324 <main_setup_in_received+0x110>)
   8327c:	681b      	ldr	r3, [r3, #0]
   8327e:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = ctrlmemread_size;
   83280:	4b29      	ldr	r3, [pc, #164]	; (83328 <main_setup_in_received+0x114>)
   83282:	6819      	ldr	r1, [r3, #0]
   83284:	8191      	strh	r1, [r2, #12]
			ctrlmemread_size = 0;
   83286:	2200      	movs	r2, #0
   83288:	601a      	str	r2, [r3, #0]
			FPGA_releaselock();
   8328a:	4b28      	ldr	r3, [pc, #160]	; (8332c <main_setup_in_received+0x118>)
   8328c:	4798      	blx	r3
			return true;
   8328e:	2001      	movs	r0, #1
   83290:	e040      	b.n	83314 <main_setup_in_received+0x100>
			respbuf[0] = FPGA_ISDONE();
   83292:	200a      	movs	r0, #10
   83294:	4b26      	ldr	r3, [pc, #152]	; (83330 <main_setup_in_received+0x11c>)
   83296:	4798      	blx	r3
   83298:	4b20      	ldr	r3, [pc, #128]	; (8331c <main_setup_in_received+0x108>)
   8329a:	3800      	subs	r0, #0
   8329c:	bf18      	it	ne
   8329e:	2001      	movne	r0, #1
   832a0:	7018      	strb	r0, [r3, #0]
			respbuf[1] = 0;
   832a2:	2200      	movs	r2, #0
   832a4:	705a      	strb	r2, [r3, #1]
			respbuf[2] = 0;
   832a6:	709a      	strb	r2, [r3, #2]
			respbuf[3] = 0;
   832a8:	70da      	strb	r2, [r3, #3]
			udd_g_ctrlreq.payload = respbuf;
   832aa:	4a1b      	ldr	r2, [pc, #108]	; (83318 <main_setup_in_received+0x104>)
   832ac:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 4;
   832ae:	2304      	movs	r3, #4
   832b0:	8193      	strh	r3, [r2, #12]
			return true;
   832b2:	2001      	movs	r0, #1
   832b4:	e02e      	b.n	83314 <main_setup_in_received+0x100>
			return XPROGProtocol_Command();
   832b6:	4b1f      	ldr	r3, [pc, #124]	; (83334 <main_setup_in_received+0x120>)
   832b8:	4798      	blx	r3
   832ba:	e02b      	b.n	83314 <main_setup_in_received+0x100>
			return V2Protocol_ProcessCommand();
   832bc:	4b1e      	ldr	r3, [pc, #120]	; (83338 <main_setup_in_received+0x124>)
   832be:	4798      	blx	r3
   832c0:	e028      	b.n	83314 <main_setup_in_received+0x100>
			return ctrl_usart(USART_TARGET, true);
   832c2:	2101      	movs	r1, #1
   832c4:	481d      	ldr	r0, [pc, #116]	; (8333c <main_setup_in_received+0x128>)
   832c6:	4b1e      	ldr	r3, [pc, #120]	; (83340 <main_setup_in_received+0x12c>)
   832c8:	4798      	blx	r3
   832ca:	e023      	b.n	83314 <main_setup_in_received+0x100>
			respbuf[0] = FW_VER_MAJOR;
   832cc:	4b13      	ldr	r3, [pc, #76]	; (8331c <main_setup_in_received+0x108>)
   832ce:	2200      	movs	r2, #0
   832d0:	701a      	strb	r2, [r3, #0]
			respbuf[1] = FW_VER_MINOR;
   832d2:	211e      	movs	r1, #30
   832d4:	7059      	strb	r1, [r3, #1]
			respbuf[2] = FW_VER_DEBUG;
   832d6:	709a      	strb	r2, [r3, #2]
			udd_g_ctrlreq.payload = respbuf;
   832d8:	4a0f      	ldr	r2, [pc, #60]	; (83318 <main_setup_in_received+0x104>)
   832da:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 3;
   832dc:	2303      	movs	r3, #3
   832de:	8193      	strh	r3, [r2, #12]
			return true;
   832e0:	2001      	movs	r0, #1
   832e2:	e017      	b.n	83314 <main_setup_in_received+0x100>
			return ctrl_scardconfig_req();
   832e4:	4b17      	ldr	r3, [pc, #92]	; (83344 <main_setup_in_received+0x130>)
   832e6:	4798      	blx	r3
   832e8:	e014      	b.n	83314 <main_setup_in_received+0x100>
			return ctrl_scarddata_req();
   832ea:	4b17      	ldr	r3, [pc, #92]	; (83348 <main_setup_in_received+0x134>)
   832ec:	4798      	blx	r3
   832ee:	e011      	b.n	83314 <main_setup_in_received+0x100>
			return ctrl_scardaux_req();
   832f0:	4b16      	ldr	r3, [pc, #88]	; (8334c <main_setup_in_received+0x138>)
   832f2:	4798      	blx	r3
   832f4:	e00e      	b.n	83314 <main_setup_in_received+0x100>
            respbuf[0] = cdc_settings_change[0];
   832f6:	4a16      	ldr	r2, [pc, #88]	; (83350 <main_setup_in_received+0x13c>)
   832f8:	7811      	ldrb	r1, [r2, #0]
   832fa:	4b08      	ldr	r3, [pc, #32]	; (8331c <main_setup_in_received+0x108>)
   832fc:	7019      	strb	r1, [r3, #0]
            respbuf[1] = cdc_settings_change[1];
   832fe:	7852      	ldrb	r2, [r2, #1]
   83300:	705a      	strb	r2, [r3, #1]
            udd_g_ctrlreq.payload = respbuf;
   83302:	4a05      	ldr	r2, [pc, #20]	; (83318 <main_setup_in_received+0x104>)
   83304:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 2;
   83306:	2302      	movs	r3, #2
   83308:	8193      	strh	r3, [r2, #12]
            return true;
   8330a:	2001      	movs	r0, #1
   8330c:	e002      	b.n	83314 <main_setup_in_received+0x100>
		return false;
   8330e:	2000      	movs	r0, #0
}
   83310:	4770      	bx	lr
	switch(udd_g_ctrlreq.req.bRequest){
   83312:	2000      	movs	r0, #0
}
   83314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83318:	20002df4 	.word	0x20002df4
   8331c:	20001e9c 	.word	0x20001e9c
   83320:	000839e9 	.word	0x000839e9
   83324:	20001a90 	.word	0x20001a90
   83328:	20001a94 	.word	0x20001a94
   8332c:	00081d6d 	.word	0x00081d6d
   83330:	0008519b 	.word	0x0008519b
   83334:	00083f05 	.word	0x00083f05
   83338:	000829c9 	.word	0x000829c9
   8333c:	40090000 	.word	0x40090000
   83340:	000835f9 	.word	0x000835f9
   83344:	00081a09 	.word	0x00081a09
   83348:	000819c9 	.word	0x000819c9
   8334c:	00081a59 	.word	0x00081a59
   83350:	200005a8 	.word	0x200005a8

00083354 <cdc_enable>:
/////////////////////////////////////////////////////////
#include "usb_protocol_cdc.h"
volatile bool enable_cdc_transfer[2] = {false, false};
	extern volatile bool usart_x_enabled[4];
bool cdc_enable(uint8_t port)
{
   83354:	4603      	mov	r3, r0
	enable_cdc_transfer[port] = true;
   83356:	2001      	movs	r0, #1
   83358:	4a01      	ldr	r2, [pc, #4]	; (83360 <cdc_enable+0xc>)
   8335a:	54d0      	strb	r0, [r2, r3]
	return true;
}
   8335c:	4770      	bx	lr
   8335e:	bf00      	nop
   83360:	20001a98 	.word	0x20001a98

00083364 <cdc_disable>:

void cdc_disable(uint8_t port)
{
	enable_cdc_transfer[port] = false;
   83364:	4b01      	ldr	r3, [pc, #4]	; (8336c <cdc_disable+0x8>)
   83366:	2200      	movs	r2, #0
   83368:	541a      	strb	r2, [r3, r0]
}
   8336a:	4770      	bx	lr
   8336c:	20001a98 	.word	0x20001a98

00083370 <my_callback_rx_notify>:
static uint8_t uart_buf[512] = {0};
void my_callback_rx_notify(uint8_t port)
{
	//iram_size_t udi_cdc_multi_get_nb_received_data
	
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   83370:	4b1a      	ldr	r3, [pc, #104]	; (833dc <my_callback_rx_notify+0x6c>)
   83372:	5c1b      	ldrb	r3, [r3, r0]
   83374:	2b00      	cmp	r3, #0
   83376:	d02f      	beq.n	833d8 <my_callback_rx_notify+0x68>
{
   83378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8337c:	4681      	mov	r9, r0
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   8337e:	4b18      	ldr	r3, [pc, #96]	; (833e0 <my_callback_rx_notify+0x70>)
   83380:	781b      	ldrb	r3, [r3, #0]
   83382:	b90b      	cbnz	r3, 83388 <my_callback_rx_notify+0x18>
		while (*st) {
			udi_cdc_putc(*st++);
		}
		#endif
	}
}
   83384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   83388:	4b16      	ldr	r3, [pc, #88]	; (833e4 <my_callback_rx_notify+0x74>)
   8338a:	4798      	blx	r3
		while (num_char > 0) {
   8338c:	4604      	mov	r4, r0
   8338e:	2800      	cmp	r0, #0
   83390:	d0f8      	beq.n	83384 <my_callback_rx_notify+0x14>
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   83392:	4e15      	ldr	r6, [pc, #84]	; (833e8 <my_callback_rx_notify+0x78>)
   83394:	f8df a058 	ldr.w	sl, [pc, #88]	; 833f0 <my_callback_rx_notify+0x80>
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   83398:	f8df 8058 	ldr.w	r8, [pc, #88]	; 833f4 <my_callback_rx_notify+0x84>
   8339c:	e005      	b.n	833aa <my_callback_rx_notify+0x3a>
			num_char = udi_cdc_multi_get_nb_received_data(port);
   8339e:	4648      	mov	r0, r9
   833a0:	4b10      	ldr	r3, [pc, #64]	; (833e4 <my_callback_rx_notify+0x74>)
   833a2:	4798      	blx	r3
		while (num_char > 0) {
   833a4:	4604      	mov	r4, r0
   833a6:	2800      	cmp	r0, #0
   833a8:	d0ec      	beq.n	83384 <my_callback_rx_notify+0x14>
			num_char = (num_char > 512) ? 512 : num_char;
   833aa:	4625      	mov	r5, r4
   833ac:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   833b0:	bf28      	it	cs
   833b2:	f44f 7500 	movcs.w	r5, #512	; 0x200
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   833b6:	462a      	mov	r2, r5
   833b8:	4631      	mov	r1, r6
   833ba:	4648      	mov	r0, r9
   833bc:	47d0      	blx	sl
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   833be:	2c00      	cmp	r4, #0
   833c0:	d0ed      	beq.n	8339e <my_callback_rx_notify+0x2e>
   833c2:	2400      	movs	r4, #0
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   833c4:	4f09      	ldr	r7, [pc, #36]	; (833ec <my_callback_rx_notify+0x7c>)
   833c6:	5d32      	ldrb	r2, [r6, r4]
   833c8:	2100      	movs	r1, #0
   833ca:	4640      	mov	r0, r8
   833cc:	47b8      	blx	r7
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   833ce:	3401      	adds	r4, #1
   833d0:	b2a4      	uxth	r4, r4
   833d2:	42ac      	cmp	r4, r5
   833d4:	d3f7      	bcc.n	833c6 <my_callback_rx_notify+0x56>
   833d6:	e7e2      	b.n	8339e <my_callback_rx_notify+0x2e>
   833d8:	4770      	bx	lr
   833da:	bf00      	nop
   833dc:	20001a98 	.word	0x20001a98
   833e0:	20002178 	.word	0x20002178
   833e4:	000803c5 	.word	0x000803c5
   833e8:	20001f64 	.word	0x20001f64
   833ec:	00083955 	.word	0x00083955
   833f0:	000805cd 	.word	0x000805cd
   833f4:	40090000 	.word	0x40090000

000833f8 <my_callback_config>:
extern tcirc_buf rx0buf, tx0buf;
extern tcirc_buf usb_usart_circ_buf;

void my_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	if (enable_cdc_transfer[port] && cdc_settings_change[port]) {
   833f8:	4b33      	ldr	r3, [pc, #204]	; (834c8 <my_callback_config+0xd0>)
   833fa:	5c1b      	ldrb	r3, [r3, r0]
   833fc:	2b00      	cmp	r3, #0
   833fe:	d061      	beq.n	834c4 <my_callback_config+0xcc>
   83400:	4b32      	ldr	r3, [pc, #200]	; (834cc <my_callback_config+0xd4>)
   83402:	5c1b      	ldrb	r3, [r3, r0]
   83404:	2b00      	cmp	r3, #0
   83406:	d05d      	beq.n	834c4 <my_callback_config+0xcc>
        usart_x_enabled[0] = true;
   83408:	4b31      	ldr	r3, [pc, #196]	; (834d0 <my_callback_config+0xd8>)
   8340a:	2201      	movs	r2, #1
   8340c:	701a      	strb	r2, [r3, #0]
		sam_usart_opt_t usartopts;
		if (port != 0){
   8340e:	2800      	cmp	r0, #0
   83410:	d158      	bne.n	834c4 <my_callback_config+0xcc>
			return;
		}
		if (cfg->bDataBits < 5)
   83412:	798b      	ldrb	r3, [r1, #6]
   83414:	2b04      	cmp	r3, #4
   83416:	d955      	bls.n	834c4 <my_callback_config+0xcc>
			return;
		if (cfg->bCharFormat > 2)
   83418:	790a      	ldrb	r2, [r1, #4]
   8341a:	2a02      	cmp	r2, #2
   8341c:	d852      	bhi.n	834c4 <my_callback_config+0xcc>
{
   8341e:	b510      	push	{r4, lr}
   83420:	b086      	sub	sp, #24
			return;
	
		usartopts.baudrate = cfg->dwDTERate;
   83422:	6808      	ldr	r0, [r1, #0]
   83424:	9000      	str	r0, [sp, #0]
		usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   83426:	2000      	movs	r0, #0
   83428:	9004      	str	r0, [sp, #16]
		usartopts.stop_bits = ((uint32_t)cfg->bCharFormat) << 12;
   8342a:	0312      	lsls	r2, r2, #12
   8342c:	9203      	str	r2, [sp, #12]
		usartopts.char_length = ((uint32_t)cfg->bDataBits - 5) << 6;
   8342e:	3b05      	subs	r3, #5
   83430:	019b      	lsls	r3, r3, #6
   83432:	9301      	str	r3, [sp, #4]
		switch(cfg->bParityType) {
   83434:	794b      	ldrb	r3, [r1, #5]
   83436:	2b04      	cmp	r3, #4
   83438:	d833      	bhi.n	834a2 <my_callback_config+0xaa>
   8343a:	e8df f003 	tbb	[pc, r3]
   8343e:	3403      	.short	0x3403
   83440:	3b38      	.short	0x3b38
   83442:	3f          	.byte	0x3f
   83443:	00          	.byte	0x00
			case CDC_PAR_NONE:
			usartopts.parity_type = US_MR_PAR_NO;
   83444:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83448:	9302      	str	r3, [sp, #8]
   8344a:	200d      	movs	r0, #13
   8344c:	4b21      	ldr	r3, [pc, #132]	; (834d4 <my_callback_config+0xdc>)
   8344e:	4798      	blx	r3
		}
		if (port == 0)
		{
			//completely restart USART - otherwise breaks tx or stalls
			sysclk_enable_peripheral_clock(ID_USART0);
			init_circ_buf(&usb_usart_circ_buf);
   83450:	4821      	ldr	r0, [pc, #132]	; (834d8 <my_callback_config+0xe0>)
   83452:	4c22      	ldr	r4, [pc, #136]	; (834dc <my_callback_config+0xe4>)
   83454:	47a0      	blx	r4
			init_circ_buf(&tx0buf);
   83456:	4822      	ldr	r0, [pc, #136]	; (834e0 <my_callback_config+0xe8>)
   83458:	47a0      	blx	r4
			init_circ_buf(&rx0buf);
   8345a:	4822      	ldr	r0, [pc, #136]	; (834e4 <my_callback_config+0xec>)
   8345c:	47a0      	blx	r4
			usart_init_rs232(USART0, &usartopts,  sysclk_get_cpu_hz());
   8345e:	4c22      	ldr	r4, [pc, #136]	; (834e8 <my_callback_config+0xf0>)
   83460:	4a22      	ldr	r2, [pc, #136]	; (834ec <my_callback_config+0xf4>)
   83462:	4669      	mov	r1, sp
   83464:	4620      	mov	r0, r4
   83466:	4b22      	ldr	r3, [pc, #136]	; (834f0 <my_callback_config+0xf8>)
   83468:	4798      	blx	r3
			
			usart_enable_rx(USART0);
   8346a:	4620      	mov	r0, r4
   8346c:	4b21      	ldr	r3, [pc, #132]	; (834f4 <my_callback_config+0xfc>)
   8346e:	4798      	blx	r3
			usart_enable_tx(USART0);
   83470:	4620      	mov	r0, r4
   83472:	4b21      	ldr	r3, [pc, #132]	; (834f8 <my_callback_config+0x100>)
   83474:	4798      	blx	r3
			
			usart_enable_interrupt(USART0, UART_IER_RXRDY);
   83476:	2101      	movs	r1, #1
   83478:	4620      	mov	r0, r4
   8347a:	4b20      	ldr	r3, [pc, #128]	; (834fc <my_callback_config+0x104>)
   8347c:	4798      	blx	r3
			
			gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   8347e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83482:	2013      	movs	r0, #19
   83484:	4c1e      	ldr	r4, [pc, #120]	; (83500 <my_callback_config+0x108>)
   83486:	47a0      	blx	r4
			gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   83488:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8348c:	2012      	movs	r0, #18
   8348e:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83490:	4b1c      	ldr	r3, [pc, #112]	; (83504 <my_callback_config+0x10c>)
   83492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83496:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8349a:	2150      	movs	r1, #80	; 0x50
   8349c:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   834a0:	601a      	str	r2, [r3, #0]
			irq_register_handler(USART0_IRQn, 5);
		}
	}
		
   834a2:	b006      	add	sp, #24
   834a4:	bd10      	pop	{r4, pc}
			usartopts.parity_type = US_MR_PAR_ODD;
   834a6:	f44f 7300 	mov.w	r3, #512	; 0x200
   834aa:	9302      	str	r3, [sp, #8]
			break;
   834ac:	e7cd      	b.n	8344a <my_callback_config+0x52>
			usartopts.parity_type = US_MR_PAR_EVEN;
   834ae:	2300      	movs	r3, #0
   834b0:	9302      	str	r3, [sp, #8]
			break;
   834b2:	e7ca      	b.n	8344a <my_callback_config+0x52>
			usartopts.parity_type = US_MR_PAR_MARK;
   834b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   834b8:	9302      	str	r3, [sp, #8]
			break;
   834ba:	e7c6      	b.n	8344a <my_callback_config+0x52>
			usartopts.parity_type = US_MR_PAR_SPACE;
   834bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   834c0:	9302      	str	r3, [sp, #8]
			break;
   834c2:	e7c2      	b.n	8344a <my_callback_config+0x52>
   834c4:	4770      	bx	lr
   834c6:	bf00      	nop
   834c8:	20001a98 	.word	0x20001a98
   834cc:	200005a8 	.word	0x200005a8
   834d0:	20002178 	.word	0x20002178
   834d4:	00085531 	.word	0x00085531
   834d8:	200029b8 	.word	0x200029b8
   834dc:	00081ed9 	.word	0x00081ed9
   834e0:	20002d08 	.word	0x20002d08
   834e4:	2000273c 	.word	0x2000273c
   834e8:	40090000 	.word	0x40090000
   834ec:	05b8d800 	.word	0x05b8d800
   834f0:	00086b49 	.word	0x00086b49
   834f4:	00086e4d 	.word	0x00086e4d
   834f8:	00086e3d 	.word	0x00086e3d
   834fc:	00086e59 	.word	0x00086e59
   83500:	000851ed 	.word	0x000851ed
   83504:	e000e100 	.word	0xe000e100

00083508 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   83508:	4b01      	ldr	r3, [pc, #4]	; (83510 <set_timeout+0x8>)
   8350a:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   8350c:	4770      	bx	lr
   8350e:	bf00      	nop
   83510:	200005ac 	.word	0x200005ac

00083514 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   83514:	b538      	push	{r3, r4, r5, lr}
   83516:	2016      	movs	r0, #22
   83518:	4b10      	ldr	r3, [pc, #64]	; (8355c <setup_timeoutcnt+0x48>)
   8351a:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8351c:	4b10      	ldr	r3, [pc, #64]	; (83560 <setup_timeoutcnt+0x4c>)
   8351e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   83522:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83526:	2510      	movs	r5, #16
   83528:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8352c:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   8352e:	4c0d      	ldr	r4, [pc, #52]	; (83564 <setup_timeoutcnt+0x50>)
   83530:	f24c 0201 	movw	r2, #49153	; 0xc001
   83534:	2100      	movs	r1, #0
   83536:	4620      	mov	r0, r4
   83538:	4b0b      	ldr	r3, [pc, #44]	; (83568 <setup_timeoutcnt+0x54>)
   8353a:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   8353c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   83540:	2100      	movs	r1, #0
   83542:	4620      	mov	r0, r4
   83544:	4b09      	ldr	r3, [pc, #36]	; (8356c <setup_timeoutcnt+0x58>)
   83546:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   83548:	462a      	mov	r2, r5
   8354a:	2100      	movs	r1, #0
   8354c:	4620      	mov	r0, r4
   8354e:	4b08      	ldr	r3, [pc, #32]	; (83570 <setup_timeoutcnt+0x5c>)
   83550:	4798      	blx	r3
	
	timerEnabled = true;
   83552:	4b08      	ldr	r3, [pc, #32]	; (83574 <setup_timeoutcnt+0x60>)
   83554:	2201      	movs	r2, #1
   83556:	701a      	strb	r2, [r3, #0]
}
   83558:	bd38      	pop	{r3, r4, r5, pc}
   8355a:	bf00      	nop
   8355c:	00085531 	.word	0x00085531
   83560:	e000e100 	.word	0xe000e100
   83564:	40080000 	.word	0x40080000
   83568:	00081e49 	.word	0x00081e49
   8356c:	00081e71 	.word	0x00081e71
   83570:	00081e79 	.word	0x00081e79
   83574:	20002164 	.word	0x20002164

00083578 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   83578:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   8357a:	4b0a      	ldr	r3, [pc, #40]	; (835a4 <start_timeoutcnt+0x2c>)
   8357c:	781b      	ldrb	r3, [r3, #0]
   8357e:	b16b      	cbz	r3, 8359c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83580:	4c09      	ldr	r4, [pc, #36]	; (835a8 <start_timeoutcnt+0x30>)
   83582:	2100      	movs	r1, #0
   83584:	4620      	mov	r0, r4
   83586:	4b09      	ldr	r3, [pc, #36]	; (835ac <start_timeoutcnt+0x34>)
   83588:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   8358a:	4b09      	ldr	r3, [pc, #36]	; (835b0 <start_timeoutcnt+0x38>)
   8358c:	681a      	ldr	r2, [r3, #0]
   8358e:	4b09      	ldr	r3, [pc, #36]	; (835b4 <start_timeoutcnt+0x3c>)
   83590:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   83592:	2100      	movs	r1, #0
   83594:	4620      	mov	r0, r4
   83596:	4b08      	ldr	r3, [pc, #32]	; (835b8 <start_timeoutcnt+0x40>)
   83598:	4798      	blx	r3
}
   8359a:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   8359c:	4b07      	ldr	r3, [pc, #28]	; (835bc <start_timeoutcnt+0x44>)
   8359e:	4798      	blx	r3
   835a0:	e7ee      	b.n	83580 <start_timeoutcnt+0x8>
   835a2:	bf00      	nop
   835a4:	20002164 	.word	0x20002164
   835a8:	40080000 	.word	0x40080000
   835ac:	00081e69 	.word	0x00081e69
   835b0:	200005ac 	.word	0x200005ac
   835b4:	20002664 	.word	0x20002664
   835b8:	00081e61 	.word	0x00081e61
   835bc:	00083515 	.word	0x00083515

000835c0 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   835c0:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   835c2:	2100      	movs	r1, #0
   835c4:	4801      	ldr	r0, [pc, #4]	; (835cc <stop_timeoutcnt+0xc>)
   835c6:	4b02      	ldr	r3, [pc, #8]	; (835d0 <stop_timeoutcnt+0x10>)
   835c8:	4798      	blx	r3
}
   835ca:	bd08      	pop	{r3, pc}
   835cc:	40080000 	.word	0x40080000
   835d0:	00081e69 	.word	0x00081e69

000835d4 <TC0_Handler>:

ISR(TC0_Handler)
{
   835d4:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   835d6:	4b05      	ldr	r3, [pc, #20]	; (835ec <TC0_Handler+0x18>)
   835d8:	681b      	ldr	r3, [r3, #0]
   835da:	b113      	cbz	r3, 835e2 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   835dc:	3b01      	subs	r3, #1
   835de:	4a03      	ldr	r2, [pc, #12]	; (835ec <TC0_Handler+0x18>)
   835e0:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   835e2:	2100      	movs	r1, #0
   835e4:	4802      	ldr	r0, [pc, #8]	; (835f0 <TC0_Handler+0x1c>)
   835e6:	4b03      	ldr	r3, [pc, #12]	; (835f4 <TC0_Handler+0x20>)
   835e8:	4798      	blx	r3
}
   835ea:	bd08      	pop	{r3, pc}
   835ec:	20002664 	.word	0x20002664
   835f0:	40080000 	.word	0x40080000
   835f4:	00081e81 	.word	0x00081e81

000835f8 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   835f8:	b570      	push	{r4, r5, r6, lr}
   835fa:	b086      	sub	sp, #24
   835fc:	4605      	mov	r5, r0
   835fe:	460c      	mov	r4, r1
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   83600:	4b96      	ldr	r3, [pc, #600]	; (8385c <ctrl_usart+0x264>)
   83602:	789b      	ldrb	r3, [r3, #2]
   83604:	3b10      	subs	r3, #16
   83606:	2b08      	cmp	r3, #8
   83608:	f200 818a 	bhi.w	83920 <ctrl_usart+0x328>
   8360c:	e8df f013 	tbh	[pc, r3, lsl #1]
   83610:	009c0009 	.word	0x009c0009
   83614:	018800dd 	.word	0x018800dd
   83618:	018800ea 	.word	0x018800ea
   8361c:	01880188 	.word	0x01880188
   83620:	011d      	.short	0x011d
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   83622:	b134      	cbz	r4, 83632 <ctrl_usart+0x3a>
				if (udd_g_ctrlreq.req.wLength == 4){
   83624:	4b8d      	ldr	r3, [pc, #564]	; (8385c <ctrl_usart+0x264>)
   83626:	88dc      	ldrh	r4, [r3, #6]
   83628:	2c04      	cmp	r4, #4
   8362a:	bf14      	ite	ne
   8362c:	2000      	movne	r0, #0
   8362e:	2001      	moveq	r0, #1
   83630:	e177      	b.n	83922 <ctrl_usart+0x32a>
					word2buf(ctrlbuffer, baud);
					*/
					return true;
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   83632:	4b8a      	ldr	r3, [pc, #552]	; (8385c <ctrl_usart+0x264>)
   83634:	88db      	ldrh	r3, [r3, #6]
   83636:	2b07      	cmp	r3, #7
   83638:	f040 8081 	bne.w	8373e <ctrl_usart+0x146>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   8363c:	4b87      	ldr	r3, [pc, #540]	; (8385c <ctrl_usart+0x264>)
   8363e:	689b      	ldr	r3, [r3, #8]
   83640:	681a      	ldr	r2, [r3, #0]
					
						usartopts.baudrate = baud;
   83642:	9200      	str	r2, [sp, #0]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   83644:	791a      	ldrb	r2, [r3, #4]
   83646:	2a01      	cmp	r2, #1
   83648:	d00e      	beq.n	83668 <ctrl_usart+0x70>
   8364a:	2a02      	cmp	r2, #2
   8364c:	d010      	beq.n	83670 <ctrl_usart+0x78>
   8364e:	b112      	cbz	r2, 83656 <ctrl_usart+0x5e>
								break;
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
								break;
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   83650:	2200      	movs	r2, #0
   83652:	9203      	str	r2, [sp, #12]
   83654:	e000      	b.n	83658 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   83656:	9203      	str	r2, [sp, #12]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   83658:	795a      	ldrb	r2, [r3, #5]
   8365a:	2a04      	cmp	r2, #4
   8365c:	d828      	bhi.n	836b0 <ctrl_usart+0xb8>
   8365e:	e8df f002 	tbb	[pc, r2]
   83662:	180b      	.short	0x180b
   83664:	1f1c      	.short	0x1f1c
   83666:	23          	.byte	0x23
   83667:	00          	.byte	0x00
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   83668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8366c:	9203      	str	r2, [sp, #12]
								break;
   8366e:	e7f3      	b.n	83658 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   83670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83674:	9203      	str	r2, [sp, #12]
								break;
   83676:	e7ef      	b.n	83658 <ctrl_usart+0x60>
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   83678:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8367c:	9202      	str	r2, [sp, #8]
							default:
								usartopts.parity_type = US_MR_PAR_NO;
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   8367e:	799b      	ldrb	r3, [r3, #6]
   83680:	2b06      	cmp	r3, #6
   83682:	d02d      	beq.n	836e0 <ctrl_usart+0xe8>
   83684:	2b07      	cmp	r3, #7
   83686:	d02e      	beq.n	836e6 <ctrl_usart+0xee>
   83688:	2b05      	cmp	r3, #5
   8368a:	d015      	beq.n	836b8 <ctrl_usart+0xc0>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
								break;					
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   8368c:	23c0      	movs	r3, #192	; 0xc0
   8368e:	9301      	str	r3, [sp, #4]
   83690:	e014      	b.n	836bc <ctrl_usart+0xc4>
								usartopts.parity_type = US_MR_PAR_ODD;
   83692:	f44f 7200 	mov.w	r2, #512	; 0x200
   83696:	9202      	str	r2, [sp, #8]
								break;
   83698:	e7f1      	b.n	8367e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_EVEN;
   8369a:	2200      	movs	r2, #0
   8369c:	9202      	str	r2, [sp, #8]
								break;
   8369e:	e7ee      	b.n	8367e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_MARK;
   836a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   836a4:	9202      	str	r2, [sp, #8]
								break;
   836a6:	e7ea      	b.n	8367e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_SPACE;
   836a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   836ac:	9202      	str	r2, [sp, #8]
								break;							
   836ae:	e7e6      	b.n	8367e <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_NO;
   836b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   836b4:	9202      	str	r2, [sp, #8]
   836b6:	e7e2      	b.n	8367e <ctrl_usart+0x86>
								usartopts.char_length = US_MR_CHRL_5_BIT;
   836b8:	2300      	movs	r3, #0
   836ba:	9301      	str	r3, [sp, #4]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   836bc:	2300      	movs	r3, #0
   836be:	9304      	str	r3, [sp, #16]

						if (usart == USART0)
   836c0:	4b67      	ldr	r3, [pc, #412]	; (83860 <ctrl_usart+0x268>)
   836c2:	429d      	cmp	r5, r3
   836c4:	d012      	beq.n	836ec <ctrl_usart+0xf4>
							init_circ_buf(&usb_usart_circ_buf);
							init_circ_buf(&tx0buf);
							init_circ_buf(&rx0buf);
							usart_x_enabled[0] = true;
							printf("Enabling USART0\n");
						} else if (usart == USART1)
   836c6:	4b67      	ldr	r3, [pc, #412]	; (83864 <ctrl_usart+0x26c>)
   836c8:	429d      	cmp	r5, r3
   836ca:	d020      	beq.n	8370e <ctrl_usart+0x116>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
							init_circ_buf(&tx1buf);
							init_circ_buf(&rx1buf);
							usart_x_enabled[1] = true;
						} else if (usart == USART2)
   836cc:	4b66      	ldr	r3, [pc, #408]	; (83868 <ctrl_usart+0x270>)
   836ce:	429d      	cmp	r5, r3
   836d0:	d029      	beq.n	83726 <ctrl_usart+0x12e>
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
							usart_x_enabled[3] = true;
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   836d2:	4a66      	ldr	r2, [pc, #408]	; (8386c <ctrl_usart+0x274>)
   836d4:	4669      	mov	r1, sp
   836d6:	4628      	mov	r0, r5
   836d8:	4b65      	ldr	r3, [pc, #404]	; (83870 <ctrl_usart+0x278>)
   836da:	4798      	blx	r3
				}
			}
			break;		
	}
	
	return false;
   836dc:	4620      	mov	r0, r4
   836de:	e120      	b.n	83922 <ctrl_usart+0x32a>
								usartopts.char_length = US_MR_CHRL_6_BIT;
   836e0:	2340      	movs	r3, #64	; 0x40
   836e2:	9301      	str	r3, [sp, #4]
								break;
   836e4:	e7ea      	b.n	836bc <ctrl_usart+0xc4>
								usartopts.char_length = US_MR_CHRL_7_BIT;
   836e6:	2380      	movs	r3, #128	; 0x80
   836e8:	9301      	str	r3, [sp, #4]
								break;					
   836ea:	e7e7      	b.n	836bc <ctrl_usart+0xc4>
   836ec:	200d      	movs	r0, #13
   836ee:	4b61      	ldr	r3, [pc, #388]	; (83874 <ctrl_usart+0x27c>)
   836f0:	4798      	blx	r3
							init_circ_buf(&usb_usart_circ_buf);
   836f2:	4861      	ldr	r0, [pc, #388]	; (83878 <ctrl_usart+0x280>)
   836f4:	4e61      	ldr	r6, [pc, #388]	; (8387c <ctrl_usart+0x284>)
   836f6:	47b0      	blx	r6
							init_circ_buf(&tx0buf);
   836f8:	4861      	ldr	r0, [pc, #388]	; (83880 <ctrl_usart+0x288>)
   836fa:	47b0      	blx	r6
							init_circ_buf(&rx0buf);
   836fc:	4861      	ldr	r0, [pc, #388]	; (83884 <ctrl_usart+0x28c>)
   836fe:	47b0      	blx	r6
							usart_x_enabled[0] = true;
   83700:	4b61      	ldr	r3, [pc, #388]	; (83888 <ctrl_usart+0x290>)
   83702:	2201      	movs	r2, #1
   83704:	701a      	strb	r2, [r3, #0]
							printf("Enabling USART0\n");
   83706:	4861      	ldr	r0, [pc, #388]	; (8388c <ctrl_usart+0x294>)
   83708:	4b61      	ldr	r3, [pc, #388]	; (83890 <ctrl_usart+0x298>)
   8370a:	4798      	blx	r3
   8370c:	e7e1      	b.n	836d2 <ctrl_usart+0xda>
   8370e:	200e      	movs	r0, #14
   83710:	4b58      	ldr	r3, [pc, #352]	; (83874 <ctrl_usart+0x27c>)
   83712:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   83714:	485f      	ldr	r0, [pc, #380]	; (83894 <ctrl_usart+0x29c>)
   83716:	4e59      	ldr	r6, [pc, #356]	; (8387c <ctrl_usart+0x284>)
   83718:	47b0      	blx	r6
							init_circ_buf(&rx1buf);
   8371a:	485f      	ldr	r0, [pc, #380]	; (83898 <ctrl_usart+0x2a0>)
   8371c:	47b0      	blx	r6
							usart_x_enabled[1] = true;
   8371e:	4b5a      	ldr	r3, [pc, #360]	; (83888 <ctrl_usart+0x290>)
   83720:	2201      	movs	r2, #1
   83722:	705a      	strb	r2, [r3, #1]
   83724:	e7d5      	b.n	836d2 <ctrl_usart+0xda>
   83726:	200f      	movs	r0, #15
   83728:	4b52      	ldr	r3, [pc, #328]	; (83874 <ctrl_usart+0x27c>)
   8372a:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   8372c:	485b      	ldr	r0, [pc, #364]	; (8389c <ctrl_usart+0x2a4>)
   8372e:	4e53      	ldr	r6, [pc, #332]	; (8387c <ctrl_usart+0x284>)
   83730:	47b0      	blx	r6
							init_circ_buf(&rx2buf);
   83732:	485b      	ldr	r0, [pc, #364]	; (838a0 <ctrl_usart+0x2a8>)
   83734:	47b0      	blx	r6
							usart_x_enabled[2] = true;
   83736:	4b54      	ldr	r3, [pc, #336]	; (83888 <ctrl_usart+0x290>)
   83738:	2201      	movs	r2, #1
   8373a:	709a      	strb	r2, [r3, #2]
   8373c:	e7c9      	b.n	836d2 <ctrl_usart+0xda>
						printf("ERR: Invalid USART Configuration packet?\n");
   8373e:	4859      	ldr	r0, [pc, #356]	; (838a4 <ctrl_usart+0x2ac>)
   83740:	4b53      	ldr	r3, [pc, #332]	; (83890 <ctrl_usart+0x298>)
   83742:	4798      	blx	r3
	return false;
   83744:	4620      	mov	r0, r4
   83746:	e0ec      	b.n	83922 <ctrl_usart+0x32a>
			if (directionIn == false){
   83748:	b10c      	cbz	r4, 8374e <ctrl_usart+0x156>
	return false;
   8374a:	2000      	movs	r0, #0
   8374c:	e0e9      	b.n	83922 <ctrl_usart+0x32a>
				usart_enable_rx(usart);
   8374e:	4b56      	ldr	r3, [pc, #344]	; (838a8 <ctrl_usart+0x2b0>)
   83750:	4798      	blx	r3
				usart_enable_tx(usart);
   83752:	4628      	mov	r0, r5
   83754:	4b55      	ldr	r3, [pc, #340]	; (838ac <ctrl_usart+0x2b4>)
   83756:	4798      	blx	r3
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   83758:	2101      	movs	r1, #1
   8375a:	4628      	mov	r0, r5
   8375c:	4b54      	ldr	r3, [pc, #336]	; (838b0 <ctrl_usart+0x2b8>)
   8375e:	4798      	blx	r3
				if (usart == USART0){
   83760:	4b3f      	ldr	r3, [pc, #252]	; (83860 <ctrl_usart+0x268>)
   83762:	429d      	cmp	r5, r3
   83764:	d007      	beq.n	83776 <ctrl_usart+0x17e>
				} else if (usart == USART1) {
   83766:	4b3f      	ldr	r3, [pc, #252]	; (83864 <ctrl_usart+0x26c>)
   83768:	429d      	cmp	r5, r3
   8376a:	d018      	beq.n	8379e <ctrl_usart+0x1a6>
				} else if (usart == USART2) {
   8376c:	4b3e      	ldr	r3, [pc, #248]	; (83868 <ctrl_usart+0x270>)
   8376e:	429d      	cmp	r5, r3
   83770:	d020      	beq.n	837b4 <ctrl_usart+0x1bc>
	return false;
   83772:	4620      	mov	r0, r4
   83774:	e0d5      	b.n	83922 <ctrl_usart+0x32a>
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   83776:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8377a:	2013      	movs	r0, #19
   8377c:	4d4d      	ldr	r5, [pc, #308]	; (838b4 <ctrl_usart+0x2bc>)
   8377e:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   83780:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83784:	2012      	movs	r0, #18
   83786:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83788:	4b4b      	ldr	r3, [pc, #300]	; (838b8 <ctrl_usart+0x2c0>)
   8378a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8378e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83792:	2150      	movs	r1, #80	; 0x50
   83794:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83798:	601a      	str	r2, [r3, #0]
	return false;
   8379a:	4620      	mov	r0, r4
}
   8379c:	e0c1      	b.n	83922 <ctrl_usart+0x32a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8379e:	4b46      	ldr	r3, [pc, #280]	; (838b8 <ctrl_usart+0x2c0>)
   837a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   837a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   837a8:	2150      	movs	r1, #80	; 0x50
   837aa:	f883 130e 	strb.w	r1, [r3, #782]	; 0x30e
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   837ae:	601a      	str	r2, [r3, #0]
   837b0:	4620      	mov	r0, r4
}
   837b2:	e0b6      	b.n	83922 <ctrl_usart+0x32a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   837b4:	4b40      	ldr	r3, [pc, #256]	; (838b8 <ctrl_usart+0x2c0>)
   837b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   837ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   837be:	2150      	movs	r1, #80	; 0x50
   837c0:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   837c4:	601a      	str	r2, [r3, #0]
   837c6:	4620      	mov	r0, r4
}
   837c8:	e0ab      	b.n	83922 <ctrl_usart+0x32a>
			if (directionIn == false){
   837ca:	b10c      	cbz	r4, 837d0 <ctrl_usart+0x1d8>
	return false;
   837cc:	2000      	movs	r0, #0
   837ce:	e0a8      	b.n	83922 <ctrl_usart+0x32a>
				usart_disable_rx(usart);
   837d0:	4e3a      	ldr	r6, [pc, #232]	; (838bc <ctrl_usart+0x2c4>)
   837d2:	47b0      	blx	r6
				usart_disable_rx(usart);
   837d4:	4628      	mov	r0, r5
   837d6:	47b0      	blx	r6
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   837d8:	2103      	movs	r1, #3
   837da:	4628      	mov	r0, r5
   837dc:	4b38      	ldr	r3, [pc, #224]	; (838c0 <ctrl_usart+0x2c8>)
   837de:	4798      	blx	r3
	return false;
   837e0:	4620      	mov	r0, r4
   837e2:	e09e      	b.n	83922 <ctrl_usart+0x32a>
			if (directionIn){
   837e4:	2c00      	cmp	r4, #0
   837e6:	f000 809e 	beq.w	83926 <ctrl_usart+0x32e>
				if (udd_g_ctrlreq.req.wLength == 4){
   837ea:	4b1c      	ldr	r3, [pc, #112]	; (8385c <ctrl_usart+0x264>)
   837ec:	88db      	ldrh	r3, [r3, #6]
   837ee:	2b04      	cmp	r3, #4
   837f0:	d001      	beq.n	837f6 <ctrl_usart+0x1fe>
	return false;
   837f2:	2000      	movs	r0, #0
   837f4:	e095      	b.n	83922 <ctrl_usart+0x32a>
					udd_g_ctrlreq.payload = ctrlbuffer;
   837f6:	4b19      	ldr	r3, [pc, #100]	; (8385c <ctrl_usart+0x264>)
   837f8:	4932      	ldr	r1, [pc, #200]	; (838c4 <ctrl_usart+0x2cc>)
   837fa:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   837fc:	2104      	movs	r1, #4
   837fe:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   83800:	4b17      	ldr	r3, [pc, #92]	; (83860 <ctrl_usart+0x268>)
   83802:	4298      	cmp	r0, r3
   83804:	d012      	beq.n	8382c <ctrl_usart+0x234>
					} else if (usart == USART1){
   83806:	4b17      	ldr	r3, [pc, #92]	; (83864 <ctrl_usart+0x26c>)
   83808:	4298      	cmp	r0, r3
   8380a:	d014      	beq.n	83836 <ctrl_usart+0x23e>
					} else if (usart == USART2){
   8380c:	4b16      	ldr	r3, [pc, #88]	; (83868 <ctrl_usart+0x270>)
   8380e:	4298      	cmp	r0, r3
   83810:	d016      	beq.n	83840 <ctrl_usart+0x248>
					word2buf(ctrlbuffer, cnt);
   83812:	4b2c      	ldr	r3, [pc, #176]	; (838c4 <ctrl_usart+0x2cc>)
   83814:	701a      	strb	r2, [r3, #0]
   83816:	f3c2 2107 	ubfx	r1, r2, #8, #8
   8381a:	7059      	strb	r1, [r3, #1]
   8381c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   83820:	7099      	strb	r1, [r3, #2]
   83822:	f3c2 6007 	ubfx	r0, r2, #24, #8
   83826:	70d8      	strb	r0, [r3, #3]
					return true;
   83828:	4620      	mov	r0, r4
   8382a:	e07a      	b.n	83922 <ctrl_usart+0x32a>
						cnt = circ_buf_count(&rx0buf);
   8382c:	4815      	ldr	r0, [pc, #84]	; (83884 <ctrl_usart+0x28c>)
   8382e:	4b26      	ldr	r3, [pc, #152]	; (838c8 <ctrl_usart+0x2d0>)
   83830:	4798      	blx	r3
   83832:	4602      	mov	r2, r0
   83834:	e7ed      	b.n	83812 <ctrl_usart+0x21a>
						cnt = circ_buf_count(&rx1buf);
   83836:	4818      	ldr	r0, [pc, #96]	; (83898 <ctrl_usart+0x2a0>)
   83838:	4b23      	ldr	r3, [pc, #140]	; (838c8 <ctrl_usart+0x2d0>)
   8383a:	4798      	blx	r3
   8383c:	4602      	mov	r2, r0
   8383e:	e7e8      	b.n	83812 <ctrl_usart+0x21a>
						cnt = circ_buf_count(&rx2buf);
   83840:	4817      	ldr	r0, [pc, #92]	; (838a0 <ctrl_usart+0x2a8>)
   83842:	4b21      	ldr	r3, [pc, #132]	; (838c8 <ctrl_usart+0x2d0>)
   83844:	4798      	blx	r3
   83846:	4602      	mov	r2, r0
   83848:	e7e3      	b.n	83812 <ctrl_usart+0x21a>
			if (directionIn){
   8384a:	2c00      	cmp	r4, #0
   8384c:	d06d      	beq.n	8392a <ctrl_usart+0x332>
				if (udd_g_ctrlreq.req.wLength == 4){
   8384e:	4b03      	ldr	r3, [pc, #12]	; (8385c <ctrl_usart+0x264>)
   83850:	88db      	ldrh	r3, [r3, #6]
   83852:	2b04      	cmp	r3, #4
   83854:	d03a      	beq.n	838cc <ctrl_usart+0x2d4>
	return false;
   83856:	2000      	movs	r0, #0
   83858:	e063      	b.n	83922 <ctrl_usart+0x32a>
   8385a:	bf00      	nop
   8385c:	20002df4 	.word	0x20002df4
   83860:	40090000 	.word	0x40090000
   83864:	40094000 	.word	0x40094000
   83868:	40098000 	.word	0x40098000
   8386c:	05b8d800 	.word	0x05b8d800
   83870:	00086b49 	.word	0x00086b49
   83874:	00085531 	.word	0x00085531
   83878:	200029b8 	.word	0x200029b8
   8387c:	00081ed9 	.word	0x00081ed9
   83880:	20002d08 	.word	0x20002d08
   83884:	2000273c 	.word	0x2000273c
   83888:	20002178 	.word	0x20002178
   8388c:	0008e4dc 	.word	0x0008e4dc
   83890:	0008788d 	.word	0x0008788d
   83894:	200028e4 	.word	0x200028e4
   83898:	20002c34 	.word	0x20002c34
   8389c:	20002668 	.word	0x20002668
   838a0:	20002b60 	.word	0x20002b60
   838a4:	0008e4f0 	.word	0x0008e4f0
   838a8:	00086e4d 	.word	0x00086e4d
   838ac:	00086e3d 	.word	0x00086e3d
   838b0:	00086e59 	.word	0x00086e59
   838b4:	000851ed 	.word	0x000851ed
   838b8:	e000e100 	.word	0xe000e100
   838bc:	00086e53 	.word	0x00086e53
   838c0:	00086e5d 	.word	0x00086e5d
   838c4:	20002168 	.word	0x20002168
   838c8:	00081f8d 	.word	0x00081f8d
					udd_g_ctrlreq.payload = ctrlbuffer;
   838cc:	4b18      	ldr	r3, [pc, #96]	; (83930 <ctrl_usart+0x338>)
   838ce:	4919      	ldr	r1, [pc, #100]	; (83934 <ctrl_usart+0x33c>)
   838d0:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   838d2:	2104      	movs	r1, #4
   838d4:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   838d6:	4b18      	ldr	r3, [pc, #96]	; (83938 <ctrl_usart+0x340>)
   838d8:	4298      	cmp	r0, r3
   838da:	d012      	beq.n	83902 <ctrl_usart+0x30a>
					} else if (usart == USART1){
   838dc:	4b17      	ldr	r3, [pc, #92]	; (8393c <ctrl_usart+0x344>)
   838de:	4298      	cmp	r0, r3
   838e0:	d014      	beq.n	8390c <ctrl_usart+0x314>
					} else if (usart == USART2){
   838e2:	4b17      	ldr	r3, [pc, #92]	; (83940 <ctrl_usart+0x348>)
   838e4:	4298      	cmp	r0, r3
   838e6:	d016      	beq.n	83916 <ctrl_usart+0x31e>
					word2buf(ctrlbuffer, cnt);
   838e8:	4b12      	ldr	r3, [pc, #72]	; (83934 <ctrl_usart+0x33c>)
   838ea:	701a      	strb	r2, [r3, #0]
   838ec:	f3c2 2107 	ubfx	r1, r2, #8, #8
   838f0:	7059      	strb	r1, [r3, #1]
   838f2:	f3c2 4107 	ubfx	r1, r2, #16, #8
   838f6:	7099      	strb	r1, [r3, #2]
   838f8:	f3c2 6007 	ubfx	r0, r2, #24, #8
   838fc:	70d8      	strb	r0, [r3, #3]
					return true;
   838fe:	4620      	mov	r0, r4
   83900:	e00f      	b.n	83922 <ctrl_usart+0x32a>
						cnt = circ_buf_count(&tx0buf);
   83902:	4810      	ldr	r0, [pc, #64]	; (83944 <ctrl_usart+0x34c>)
   83904:	4b10      	ldr	r3, [pc, #64]	; (83948 <ctrl_usart+0x350>)
   83906:	4798      	blx	r3
   83908:	4602      	mov	r2, r0
   8390a:	e7ed      	b.n	838e8 <ctrl_usart+0x2f0>
						cnt = circ_buf_count(&tx1buf);
   8390c:	480f      	ldr	r0, [pc, #60]	; (8394c <ctrl_usart+0x354>)
   8390e:	4b0e      	ldr	r3, [pc, #56]	; (83948 <ctrl_usart+0x350>)
   83910:	4798      	blx	r3
   83912:	4602      	mov	r2, r0
   83914:	e7e8      	b.n	838e8 <ctrl_usart+0x2f0>
						cnt = circ_buf_count(&tx2buf);
   83916:	480e      	ldr	r0, [pc, #56]	; (83950 <ctrl_usart+0x358>)
   83918:	4b0b      	ldr	r3, [pc, #44]	; (83948 <ctrl_usart+0x350>)
   8391a:	4798      	blx	r3
   8391c:	4602      	mov	r2, r0
   8391e:	e7e3      	b.n	838e8 <ctrl_usart+0x2f0>
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   83920:	2000      	movs	r0, #0
}
   83922:	b006      	add	sp, #24
   83924:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   83926:	4620      	mov	r0, r4
   83928:	e7fb      	b.n	83922 <ctrl_usart+0x32a>
   8392a:	4620      	mov	r0, r4
   8392c:	e7f9      	b.n	83922 <ctrl_usart+0x32a>
   8392e:	bf00      	nop
   83930:	20002df4 	.word	0x20002df4
   83934:	20002168 	.word	0x20002168
   83938:	40090000 	.word	0x40090000
   8393c:	40094000 	.word	0x40094000
   83940:	40098000 	.word	0x40098000
   83944:	20002d08 	.word	0x20002d08
   83948:	00081f8d 	.word	0x00081f8d
   8394c:	200028e4 	.word	0x200028e4
   83950:	20002668 	.word	0x20002668

00083954 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   83954:	b538      	push	{r3, r4, r5, lr}
   83956:	4604      	mov	r4, r0
   83958:	4613      	mov	r3, r2
	if (txbuf == NULL){
   8395a:	460d      	mov	r5, r1
   8395c:	b159      	cbz	r1, 83976 <usart_driver_putchar+0x22>
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   8395e:	2200      	movs	r2, #0
   83960:	4619      	mov	r1, r3
   83962:	4628      	mov	r0, r5
   83964:	4b16      	ldr	r3, [pc, #88]	; (839c0 <usart_driver_putchar+0x6c>)
   83966:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   83968:	4620      	mov	r0, r4
   8396a:	4b16      	ldr	r3, [pc, #88]	; (839c4 <usart_driver_putchar+0x70>)
   8396c:	4798      	blx	r3
   8396e:	f010 0f02 	tst.w	r0, #2
   83972:	d011      	beq.n	83998 <usart_driver_putchar+0x44>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
			usart_putchar(usart, get_from_circ_buf(txbuf));
		usart_enable_interrupt(usart, US_CSR_TXRDY);
	}
}
   83974:	bd38      	pop	{r3, r4, r5, pc}
		if (usart == USART0) txbuf = &tx0buf;
   83976:	4a14      	ldr	r2, [pc, #80]	; (839c8 <usart_driver_putchar+0x74>)
   83978:	4290      	cmp	r0, r2
   8397a:	d009      	beq.n	83990 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   8397c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   83980:	4290      	cmp	r0, r2
   83982:	d007      	beq.n	83994 <usart_driver_putchar+0x40>
		else if (usart == USART2) txbuf = &tx2buf;
   83984:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   83988:	4290      	cmp	r0, r2
   8398a:	d1f3      	bne.n	83974 <usart_driver_putchar+0x20>
   8398c:	4d0f      	ldr	r5, [pc, #60]	; (839cc <usart_driver_putchar+0x78>)
   8398e:	e7e6      	b.n	8395e <usart_driver_putchar+0xa>
		if (usart == USART0) txbuf = &tx0buf;
   83990:	4d0f      	ldr	r5, [pc, #60]	; (839d0 <usart_driver_putchar+0x7c>)
   83992:	e7e4      	b.n	8395e <usart_driver_putchar+0xa>
		else if (usart == USART1) txbuf = &tx1buf;
   83994:	4d0f      	ldr	r5, [pc, #60]	; (839d4 <usart_driver_putchar+0x80>)
   83996:	e7e2      	b.n	8395e <usart_driver_putchar+0xa>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
   83998:	4620      	mov	r0, r4
   8399a:	4b0f      	ldr	r3, [pc, #60]	; (839d8 <usart_driver_putchar+0x84>)
   8399c:	4798      	blx	r3
   8399e:	f010 0f02 	tst.w	r0, #2
   839a2:	d104      	bne.n	839ae <usart_driver_putchar+0x5a>
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   839a4:	2102      	movs	r1, #2
   839a6:	4620      	mov	r0, r4
   839a8:	4b0c      	ldr	r3, [pc, #48]	; (839dc <usart_driver_putchar+0x88>)
   839aa:	4798      	blx	r3
   839ac:	e7e2      	b.n	83974 <usart_driver_putchar+0x20>
			usart_putchar(usart, get_from_circ_buf(txbuf));
   839ae:	4628      	mov	r0, r5
   839b0:	4b0b      	ldr	r3, [pc, #44]	; (839e0 <usart_driver_putchar+0x8c>)
   839b2:	4798      	blx	r3
   839b4:	4601      	mov	r1, r0
   839b6:	4620      	mov	r0, r4
   839b8:	4b0a      	ldr	r3, [pc, #40]	; (839e4 <usart_driver_putchar+0x90>)
   839ba:	4798      	blx	r3
   839bc:	e7f2      	b.n	839a4 <usart_driver_putchar+0x50>
   839be:	bf00      	nop
   839c0:	00081ee5 	.word	0x00081ee5
   839c4:	00086e61 	.word	0x00086e61
   839c8:	40090000 	.word	0x40090000
   839cc:	20002668 	.word	0x20002668
   839d0:	20002d08 	.word	0x20002d08
   839d4:	200028e4 	.word	0x200028e4
   839d8:	00086e65 	.word	0x00086e65
   839dc:	00086e59 	.word	0x00086e59
   839e0:	00081f39 	.word	0x00081f39
   839e4:	00086e9d 	.word	0x00086e9d

000839e8 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   839e8:	b508      	push	{r3, lr}
	tcirc_buf * rxbuf = NULL;	 
	if (rxbuf == NULL){
			if (usart == USART0) rxbuf = &rx0buf;
   839ea:	4b0a      	ldr	r3, [pc, #40]	; (83a14 <usart_driver_getchar+0x2c>)
   839ec:	4298      	cmp	r0, r3
   839ee:	d00b      	beq.n	83a08 <usart_driver_getchar+0x20>
			else if (usart == USART1) rxbuf = &rx1buf;
   839f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   839f4:	4298      	cmp	r0, r3
   839f6:	d009      	beq.n	83a0c <usart_driver_getchar+0x24>
			else if (usart == USART2) rxbuf = &rx2buf;
   839f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   839fc:	4298      	cmp	r0, r3
   839fe:	d107      	bne.n	83a10 <usart_driver_getchar+0x28>
   83a00:	4805      	ldr	r0, [pc, #20]	; (83a18 <usart_driver_getchar+0x30>)
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
	}
	return get_from_circ_buf(rxbuf);
   83a02:	4b06      	ldr	r3, [pc, #24]	; (83a1c <usart_driver_getchar+0x34>)
   83a04:	4798      	blx	r3
}
   83a06:	bd08      	pop	{r3, pc}
			if (usart == USART0) rxbuf = &rx0buf;
   83a08:	4805      	ldr	r0, [pc, #20]	; (83a20 <usart_driver_getchar+0x38>)
   83a0a:	e7fa      	b.n	83a02 <usart_driver_getchar+0x1a>
			else if (usart == USART1) rxbuf = &rx1buf;
   83a0c:	4805      	ldr	r0, [pc, #20]	; (83a24 <usart_driver_getchar+0x3c>)
   83a0e:	e7f8      	b.n	83a02 <usart_driver_getchar+0x1a>
			else return 0xFF;
   83a10:	20ff      	movs	r0, #255	; 0xff
   83a12:	e7f8      	b.n	83a06 <usart_driver_getchar+0x1e>
   83a14:	40090000 	.word	0x40090000
   83a18:	20002b60 	.word	0x20002b60
   83a1c:	00081f39 	.word	0x00081f39
   83a20:	2000273c 	.word	0x2000273c
   83a24:	20002c34 	.word	0x20002c34

00083a28 <generic_isr>:


void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   83a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a2c:	4607      	mov	r7, r0
   83a2e:	460e      	mov	r6, r1
   83a30:	4615      	mov	r5, r2
	uint32_t status;
	status = usart_get_status(usart);
   83a32:	4b14      	ldr	r3, [pc, #80]	; (83a84 <generic_isr+0x5c>)
   83a34:	4798      	blx	r3
   83a36:	4604      	mov	r4, r0
	if (status & US_CSR_RXRDY){
   83a38:	f010 0f01 	tst.w	r0, #1
   83a3c:	d104      	bne.n	83a48 <generic_isr+0x20>
		add_to_circ_buf(rxbuf, temp, false);
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
		//udi_cdc_multi_putc(0, temp);
	}
	
	if (status & US_CSR_TXRDY){
   83a3e:	f014 0f02 	tst.w	r4, #2
   83a42:	d10e      	bne.n	83a62 <generic_isr+0x3a>
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   83a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   83a48:	69bb      	ldr	r3, [r7, #24]
		add_to_circ_buf(rxbuf, temp, false);
   83a4a:	fa5f f883 	uxtb.w	r8, r3
   83a4e:	2200      	movs	r2, #0
   83a50:	4641      	mov	r1, r8
   83a52:	4630      	mov	r0, r6
   83a54:	4e0c      	ldr	r6, [pc, #48]	; (83a88 <generic_isr+0x60>)
   83a56:	47b0      	blx	r6
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
   83a58:	2200      	movs	r2, #0
   83a5a:	4641      	mov	r1, r8
   83a5c:	480b      	ldr	r0, [pc, #44]	; (83a8c <generic_isr+0x64>)
   83a5e:	47b0      	blx	r6
   83a60:	e7ed      	b.n	83a3e <generic_isr+0x16>
		if (circ_buf_has_char(txbuf)){
   83a62:	4628      	mov	r0, r5
   83a64:	4b0a      	ldr	r3, [pc, #40]	; (83a90 <generic_isr+0x68>)
   83a66:	4798      	blx	r3
   83a68:	b138      	cbz	r0, 83a7a <generic_isr+0x52>
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   83a6a:	4628      	mov	r0, r5
   83a6c:	4b09      	ldr	r3, [pc, #36]	; (83a94 <generic_isr+0x6c>)
   83a6e:	4798      	blx	r3
   83a70:	4601      	mov	r1, r0
   83a72:	4638      	mov	r0, r7
   83a74:	4b08      	ldr	r3, [pc, #32]	; (83a98 <generic_isr+0x70>)
   83a76:	4798      	blx	r3
   83a78:	e7e4      	b.n	83a44 <generic_isr+0x1c>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   83a7a:	2102      	movs	r1, #2
   83a7c:	4638      	mov	r0, r7
   83a7e:	4b07      	ldr	r3, [pc, #28]	; (83a9c <generic_isr+0x74>)
   83a80:	4798      	blx	r3
}
   83a82:	e7df      	b.n	83a44 <generic_isr+0x1c>
   83a84:	00086e65 	.word	0x00086e65
   83a88:	00081ee5 	.word	0x00081ee5
   83a8c:	200029b8 	.word	0x200029b8
   83a90:	00081f81 	.word	0x00081f81
   83a94:	00081f39 	.word	0x00081f39
   83a98:	00086e9d 	.word	0x00086e9d
   83a9c:	00086e5d 	.word	0x00086e5d

00083aa0 <USART0_Handler>:

ISR(USART0_Handler)
{
   83aa0:	b508      	push	{r3, lr}
	generic_isr(USART0, &rx0buf, &tx0buf);
   83aa2:	4a03      	ldr	r2, [pc, #12]	; (83ab0 <USART0_Handler+0x10>)
   83aa4:	4903      	ldr	r1, [pc, #12]	; (83ab4 <USART0_Handler+0x14>)
   83aa6:	4804      	ldr	r0, [pc, #16]	; (83ab8 <USART0_Handler+0x18>)
   83aa8:	4b04      	ldr	r3, [pc, #16]	; (83abc <USART0_Handler+0x1c>)
   83aaa:	4798      	blx	r3
}
   83aac:	bd08      	pop	{r3, pc}
   83aae:	bf00      	nop
   83ab0:	20002d08 	.word	0x20002d08
   83ab4:	2000273c 	.word	0x2000273c
   83ab8:	40090000 	.word	0x40090000
   83abc:	00083a29 	.word	0x00083a29

00083ac0 <USART1_Handler>:

ISR(USART1_Handler)
{
   83ac0:	b508      	push	{r3, lr}
	generic_isr(USART1, &rx1buf, &tx1buf);
   83ac2:	4a03      	ldr	r2, [pc, #12]	; (83ad0 <USART1_Handler+0x10>)
   83ac4:	4903      	ldr	r1, [pc, #12]	; (83ad4 <USART1_Handler+0x14>)
   83ac6:	4804      	ldr	r0, [pc, #16]	; (83ad8 <USART1_Handler+0x18>)
   83ac8:	4b04      	ldr	r3, [pc, #16]	; (83adc <USART1_Handler+0x1c>)
   83aca:	4798      	blx	r3
}
   83acc:	bd08      	pop	{r3, pc}
   83ace:	bf00      	nop
   83ad0:	200028e4 	.word	0x200028e4
   83ad4:	20002c34 	.word	0x20002c34
   83ad8:	40094000 	.word	0x40094000
   83adc:	00083a29 	.word	0x00083a29

00083ae0 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   83ae0:	b508      	push	{r3, lr}
	generic_isr(USART2, &rx2buf, &tx2buf);
   83ae2:	4a03      	ldr	r2, [pc, #12]	; (83af0 <USART2_Handler+0x10>)
   83ae4:	4903      	ldr	r1, [pc, #12]	; (83af4 <USART2_Handler+0x14>)
   83ae6:	4804      	ldr	r0, [pc, #16]	; (83af8 <USART2_Handler+0x18>)
   83ae8:	4b04      	ldr	r3, [pc, #16]	; (83afc <USART2_Handler+0x1c>)
   83aea:	4798      	blx	r3
}
   83aec:	bd08      	pop	{r3, pc}
   83aee:	bf00      	nop
   83af0:	20002668 	.word	0x20002668
   83af4:	20002b60 	.word	0x20002b60
   83af8:	40098000 	.word	0x40098000
   83afc:	00083a29 	.word	0x00083a29

00083b00 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   83b00:	b538      	push	{r3, r4, r5, lr}
   83b02:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   83b04:	b2c0      	uxtb	r0, r0
   83b06:	4d05      	ldr	r5, [pc, #20]	; (83b1c <XMEGANVM_SendAddress+0x1c>)
   83b08:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   83b0a:	f3c4 2007 	ubfx	r0, r4, #8, #8
   83b0e:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   83b10:	f3c4 4007 	ubfx	r0, r4, #16, #8
   83b14:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   83b16:	0e20      	lsrs	r0, r4, #24
   83b18:	47a8      	blx	r5
}
   83b1a:	bd38      	pop	{r3, r4, r5, pc}
   83b1c:	0008438d 	.word	0x0008438d

00083b20 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   83b20:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   83b22:	4b03      	ldr	r3, [pc, #12]	; (83b30 <XMEGANVM_SendNVMRegAddress+0x10>)
   83b24:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   83b26:	4318      	orrs	r0, r3
   83b28:	4b02      	ldr	r3, [pc, #8]	; (83b34 <XMEGANVM_SendNVMRegAddress+0x14>)
   83b2a:	4798      	blx	r3
}
   83b2c:	bd08      	pop	{r3, pc}
   83b2e:	bf00      	nop
   83b30:	200005b4 	.word	0x200005b4
   83b34:	00083b01 	.word	0x00083b01

00083b38 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   83b38:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83b3a:	4e07      	ldr	r6, [pc, #28]	; (83b58 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b3c:	4d07      	ldr	r5, [pc, #28]	; (83b5c <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   83b3e:	4c08      	ldr	r4, [pc, #32]	; (83b60 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83b40:	2080      	movs	r0, #128	; 0x80
   83b42:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b44:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   83b46:	6823      	ldr	r3, [r4, #0]
   83b48:	b123      	cbz	r3, 83b54 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   83b4a:	f010 0f02 	tst.w	r0, #2
   83b4e:	d0f7      	beq.n	83b40 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   83b50:	2001      	movs	r0, #1
   83b52:	e000      	b.n	83b56 <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   83b54:	2000      	movs	r0, #0
		}
	}
}
   83b56:	bd70      	pop	{r4, r5, r6, pc}
   83b58:	0008438d 	.word	0x0008438d
   83b5c:	000843b9 	.word	0x000843b9
   83b60:	20002664 	.word	0x20002664

00083b64 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   83b64:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83b66:	206b      	movs	r0, #107	; 0x6b
   83b68:	4b09      	ldr	r3, [pc, #36]	; (83b90 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   83b6a:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   83b6c:	200f      	movs	r0, #15
   83b6e:	4b09      	ldr	r3, [pc, #36]	; (83b94 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   83b70:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83b72:	4e07      	ldr	r6, [pc, #28]	; (83b90 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b74:	4d08      	ldr	r5, [pc, #32]	; (83b98 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   83b76:	4c09      	ldr	r4, [pc, #36]	; (83b9c <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83b78:	2020      	movs	r0, #32
   83b7a:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b7c:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   83b7e:	6823      	ldr	r3, [r4, #0]
   83b80:	b123      	cbz	r3, 83b8c <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   83b82:	f010 0f80 	tst.w	r0, #128	; 0x80
   83b86:	d1f7      	bne.n	83b78 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   83b88:	2001      	movs	r0, #1
   83b8a:	e000      	b.n	83b8e <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   83b8c:	2000      	movs	r0, #0
		}
	}
}
   83b8e:	bd70      	pop	{r4, r5, r6, pc}
   83b90:	0008438d 	.word	0x0008438d
   83b94:	00083b21 	.word	0x00083b21
   83b98:	000843b9 	.word	0x000843b9
   83b9c:	20002664 	.word	0x20002664

00083ba0 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   83ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83ba4:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   83ba6:	4b1a      	ldr	r3, [pc, #104]	; (83c10 <XMEGANVM_EnablePDI+0x70>)
   83ba8:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83baa:	20c1      	movs	r0, #193	; 0xc1
   83bac:	4c19      	ldr	r4, [pc, #100]	; (83c14 <XMEGANVM_EnablePDI+0x74>)
   83bae:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   83bb0:	2059      	movs	r0, #89	; 0x59
   83bb2:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   83bb4:	20c2      	movs	r0, #194	; 0xc2
   83bb6:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   83bb8:	2002      	movs	r0, #2
   83bba:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   83bbc:	20e0      	movs	r0, #224	; 0xe0
   83bbe:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83bc0:	f10d 0407 	add.w	r4, sp, #7
   83bc4:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   83bc6:	f04f 0812 	mov.w	r8, #18
   83bca:	2789      	movs	r7, #137	; 0x89
   83bcc:	4e11      	ldr	r6, [pc, #68]	; (83c14 <XMEGANVM_EnablePDI+0x74>)
   83bce:	f88d 8000 	strb.w	r8, [sp]
   83bd2:	f88d 7001 	strb.w	r7, [sp, #1]
   83bd6:	23ab      	movs	r3, #171	; 0xab
   83bd8:	f88d 3002 	strb.w	r3, [sp, #2]
   83bdc:	2345      	movs	r3, #69	; 0x45
   83bde:	f88d 3003 	strb.w	r3, [sp, #3]
   83be2:	23cd      	movs	r3, #205	; 0xcd
   83be4:	f88d 3004 	strb.w	r3, [sp, #4]
   83be8:	23d8      	movs	r3, #216	; 0xd8
   83bea:	f88d 3005 	strb.w	r3, [sp, #5]
   83bee:	2388      	movs	r3, #136	; 0x88
   83bf0:	f88d 3006 	strb.w	r3, [sp, #6]
   83bf4:	23ff      	movs	r3, #255	; 0xff
   83bf6:	f88d 3007 	strb.w	r3, [sp, #7]
   83bfa:	7820      	ldrb	r0, [r4, #0]
   83bfc:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83bfe:	454c      	cmp	r4, r9
   83c00:	f104 34ff 	add.w	r4, r4, #4294967295
   83c04:	d1e3      	bne.n	83bce <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   83c06:	4b04      	ldr	r3, [pc, #16]	; (83c18 <XMEGANVM_EnablePDI+0x78>)
   83c08:	4798      	blx	r3
}
   83c0a:	b003      	add	sp, #12
   83c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83c10:	00084459 	.word	0x00084459
   83c14:	0008438d 	.word	0x0008438d
   83c18:	00083b39 	.word	0x00083b39

00083c1c <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   83c1c:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   83c1e:	4b09      	ldr	r3, [pc, #36]	; (83c44 <XMEGANVM_DisablePDI+0x28>)
   83c20:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83c22:	4c09      	ldr	r4, [pc, #36]	; (83c48 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83c24:	4d09      	ldr	r5, [pc, #36]	; (83c4c <XMEGANVM_DisablePDI+0x30>)
   83c26:	4e0a      	ldr	r6, [pc, #40]	; (83c50 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83c28:	20c1      	movs	r0, #193	; 0xc1
   83c2a:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   83c2c:	2000      	movs	r0, #0
   83c2e:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   83c30:	2081      	movs	r0, #129	; 0x81
   83c32:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83c34:	47a8      	blx	r5
   83c36:	b110      	cbz	r0, 83c3e <XMEGANVM_DisablePDI+0x22>
   83c38:	6833      	ldr	r3, [r6, #0]
   83c3a:	2b00      	cmp	r3, #0
   83c3c:	d1f4      	bne.n	83c28 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   83c3e:	4b05      	ldr	r3, [pc, #20]	; (83c54 <XMEGANVM_DisablePDI+0x38>)
   83c40:	4798      	blx	r3
}
   83c42:	bd70      	pop	{r4, r5, r6, pc}
   83c44:	00083b39 	.word	0x00083b39
   83c48:	0008438d 	.word	0x0008438d
   83c4c:	000843b9 	.word	0x000843b9
   83c50:	20002664 	.word	0x20002664
   83c54:	00084331 	.word	0x00084331

00083c58 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   83c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c5a:	4606      	mov	r6, r0
   83c5c:	460c      	mov	r4, r1
   83c5e:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83c60:	4b1c      	ldr	r3, [pc, #112]	; (83cd4 <XMEGANVM_ReadMemory+0x7c>)
   83c62:	4798      	blx	r3
   83c64:	4603      	mov	r3, r0
   83c66:	b908      	cbnz	r0, 83c6c <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   83c68:	4618      	mov	r0, r3
   83c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c6c:	204c      	movs	r0, #76	; 0x4c
   83c6e:	4f1a      	ldr	r7, [pc, #104]	; (83cd8 <XMEGANVM_ReadMemory+0x80>)
   83c70:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83c72:	200a      	movs	r0, #10
   83c74:	4b19      	ldr	r3, [pc, #100]	; (83cdc <XMEGANVM_ReadMemory+0x84>)
   83c76:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   83c78:	2043      	movs	r0, #67	; 0x43
   83c7a:	47b8      	blx	r7
	if (ReadSize > 1)
   83c7c:	2d01      	cmp	r5, #1
   83c7e:	d919      	bls.n	83cb4 <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83c80:	206b      	movs	r0, #107	; 0x6b
   83c82:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   83c84:	4630      	mov	r0, r6
   83c86:	4b16      	ldr	r3, [pc, #88]	; (83ce0 <XMEGANVM_ReadMemory+0x88>)
   83c88:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83c8a:	20a0      	movs	r0, #160	; 0xa0
   83c8c:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   83c8e:	1e68      	subs	r0, r5, #1
   83c90:	b2c0      	uxtb	r0, r0
   83c92:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83c94:	2024      	movs	r0, #36	; 0x24
   83c96:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   83c98:	3d01      	subs	r5, #1
   83c9a:	b2ad      	uxth	r5, r5
   83c9c:	3501      	adds	r5, #1
   83c9e:	4425      	add	r5, r4
   83ca0:	4e10      	ldr	r6, [pc, #64]	; (83ce4 <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83ca2:	4f11      	ldr	r7, [pc, #68]	; (83ce8 <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   83ca4:	6833      	ldr	r3, [r6, #0]
   83ca6:	b173      	cbz	r3, 83cc6 <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83ca8:	47b8      	blx	r7
   83caa:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   83cae:	42ac      	cmp	r4, r5
   83cb0:	d1f8      	bne.n	83ca4 <XMEGANVM_ReadMemory+0x4c>
   83cb2:	e008      	b.n	83cc6 <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83cb4:	200c      	movs	r0, #12
   83cb6:	4b08      	ldr	r3, [pc, #32]	; (83cd8 <XMEGANVM_ReadMemory+0x80>)
   83cb8:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   83cba:	4630      	mov	r0, r6
   83cbc:	4b08      	ldr	r3, [pc, #32]	; (83ce0 <XMEGANVM_ReadMemory+0x88>)
   83cbe:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83cc0:	4b09      	ldr	r3, [pc, #36]	; (83ce8 <XMEGANVM_ReadMemory+0x90>)
   83cc2:	4798      	blx	r3
   83cc4:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   83cc6:	4b07      	ldr	r3, [pc, #28]	; (83ce4 <XMEGANVM_ReadMemory+0x8c>)
   83cc8:	681b      	ldr	r3, [r3, #0]
   83cca:	3b00      	subs	r3, #0
   83ccc:	bf18      	it	ne
   83cce:	2301      	movne	r3, #1
   83cd0:	e7ca      	b.n	83c68 <XMEGANVM_ReadMemory+0x10>
   83cd2:	bf00      	nop
   83cd4:	00083b65 	.word	0x00083b65
   83cd8:	0008438d 	.word	0x0008438d
   83cdc:	00083b21 	.word	0x00083b21
   83ce0:	00083b01 	.word	0x00083b01
   83ce4:	20002664 	.word	0x20002664
   83ce8:	000843b9 	.word	0x000843b9

00083cec <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   83cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83cf0:	4607      	mov	r7, r0
   83cf2:	4688      	mov	r8, r1
   83cf4:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83cf6:	4b0b      	ldr	r3, [pc, #44]	; (83d24 <XMEGANVM_WriteByteMemory+0x38>)
   83cf8:	4798      	blx	r3
   83cfa:	4605      	mov	r5, r0
   83cfc:	b910      	cbnz	r0, 83d04 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   83cfe:	4628      	mov	r0, r5
   83d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d04:	204c      	movs	r0, #76	; 0x4c
   83d06:	4c08      	ldr	r4, [pc, #32]	; (83d28 <XMEGANVM_WriteByteMemory+0x3c>)
   83d08:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d0a:	200a      	movs	r0, #10
   83d0c:	4b07      	ldr	r3, [pc, #28]	; (83d2c <XMEGANVM_WriteByteMemory+0x40>)
   83d0e:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   83d10:	4638      	mov	r0, r7
   83d12:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d14:	204c      	movs	r0, #76	; 0x4c
   83d16:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   83d18:	4640      	mov	r0, r8
   83d1a:	4b05      	ldr	r3, [pc, #20]	; (83d30 <XMEGANVM_WriteByteMemory+0x44>)
   83d1c:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   83d1e:	4630      	mov	r0, r6
   83d20:	47a0      	blx	r4
	return true;
   83d22:	e7ec      	b.n	83cfe <XMEGANVM_WriteByteMemory+0x12>
   83d24:	00083b65 	.word	0x00083b65
   83d28:	0008438d 	.word	0x0008438d
   83d2c:	00083b21 	.word	0x00083b21
   83d30:	00083b01 	.word	0x00083b01

00083d34 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   83d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d38:	4681      	mov	r9, r0
   83d3a:	4617      	mov	r7, r2
   83d3c:	461c      	mov	r4, r3
   83d3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83d40:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   83d44:	f013 0f01 	tst.w	r3, #1
   83d48:	d108      	bne.n	83d5c <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   83d4a:	b9f6      	cbnz	r6, 83d8a <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   83d4c:	f014 0f02 	tst.w	r4, #2
   83d50:	d13f      	bne.n	83dd2 <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   83d52:	f04f 0a01 	mov.w	sl, #1
}
   83d56:	4650      	mov	r0, sl
   83d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d5c:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d5e:	4b27      	ldr	r3, [pc, #156]	; (83dfc <XMEGANVM_WritePageMemory+0xc8>)
   83d60:	4798      	blx	r3
   83d62:	4682      	mov	sl, r0
   83d64:	2800      	cmp	r0, #0
   83d66:	d0f6      	beq.n	83d56 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d68:	204c      	movs	r0, #76	; 0x4c
   83d6a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 83e08 <XMEGANVM_WritePageMemory+0xd4>
   83d6e:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d70:	200a      	movs	r0, #10
   83d72:	f8df b08c 	ldr.w	fp, [pc, #140]	; 83e00 <XMEGANVM_WritePageMemory+0xcc>
   83d76:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   83d78:	4640      	mov	r0, r8
   83d7a:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d7c:	204c      	movs	r0, #76	; 0x4c
   83d7e:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83d80:	200b      	movs	r0, #11
   83d82:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83d84:	2001      	movs	r0, #1
   83d86:	47d0      	blx	sl
   83d88:	e7df      	b.n	83d4a <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d8a:	4b1c      	ldr	r3, [pc, #112]	; (83dfc <XMEGANVM_WritePageMemory+0xc8>)
   83d8c:	4798      	blx	r3
   83d8e:	4682      	mov	sl, r0
   83d90:	2800      	cmp	r0, #0
   83d92:	d0e0      	beq.n	83d56 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d94:	204c      	movs	r0, #76	; 0x4c
   83d96:	f8df 8070 	ldr.w	r8, [pc, #112]	; 83e08 <XMEGANVM_WritePageMemory+0xd4>
   83d9a:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d9c:	200a      	movs	r0, #10
   83d9e:	4b18      	ldr	r3, [pc, #96]	; (83e00 <XMEGANVM_WritePageMemory+0xcc>)
   83da0:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   83da2:	4648      	mov	r0, r9
   83da4:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83da6:	206b      	movs	r0, #107	; 0x6b
   83da8:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   83daa:	980a      	ldr	r0, [sp, #40]	; 0x28
   83dac:	4b15      	ldr	r3, [pc, #84]	; (83e04 <XMEGANVM_WritePageMemory+0xd0>)
   83dae:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83db0:	20a0      	movs	r0, #160	; 0xa0
   83db2:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   83db4:	1e70      	subs	r0, r6, #1
   83db6:	b2c0      	uxtb	r0, r0
   83db8:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83dba:	2064      	movs	r0, #100	; 0x64
   83dbc:	47c0      	blx	r8
		while (WriteSize--)
   83dbe:	3e01      	subs	r6, #1
   83dc0:	b2b6      	uxth	r6, r6
   83dc2:	3601      	adds	r6, #1
   83dc4:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   83dc6:	f815 0b01 	ldrb.w	r0, [r5], #1
   83dca:	47c0      	blx	r8
		while (WriteSize--)
   83dcc:	42b5      	cmp	r5, r6
   83dce:	d1fa      	bne.n	83dc6 <XMEGANVM_WritePageMemory+0x92>
   83dd0:	e7bc      	b.n	83d4c <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83dd2:	4b0a      	ldr	r3, [pc, #40]	; (83dfc <XMEGANVM_WritePageMemory+0xc8>)
   83dd4:	4798      	blx	r3
   83dd6:	4682      	mov	sl, r0
   83dd8:	2800      	cmp	r0, #0
   83dda:	d0bc      	beq.n	83d56 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ddc:	204c      	movs	r0, #76	; 0x4c
   83dde:	4c0a      	ldr	r4, [pc, #40]	; (83e08 <XMEGANVM_WritePageMemory+0xd4>)
   83de0:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83de2:	200a      	movs	r0, #10
   83de4:	4b06      	ldr	r3, [pc, #24]	; (83e00 <XMEGANVM_WritePageMemory+0xcc>)
   83de6:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   83de8:	4638      	mov	r0, r7
   83dea:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83dec:	204c      	movs	r0, #76	; 0x4c
   83dee:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   83df0:	980a      	ldr	r0, [sp, #40]	; 0x28
   83df2:	4b04      	ldr	r3, [pc, #16]	; (83e04 <XMEGANVM_WritePageMemory+0xd0>)
   83df4:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83df6:	2000      	movs	r0, #0
   83df8:	47a0      	blx	r4
   83dfa:	e7ac      	b.n	83d56 <XMEGANVM_WritePageMemory+0x22>
   83dfc:	00083b65 	.word	0x00083b65
   83e00:	00083b21 	.word	0x00083b21
   83e04:	00083b01 	.word	0x00083b01
   83e08:	0008438d 	.word	0x0008438d

00083e0c <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   83e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e0e:	4604      	mov	r4, r0
   83e10:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83e12:	4b36      	ldr	r3, [pc, #216]	; (83eec <XMEGANVM_EraseMemory+0xe0>)
   83e14:	4798      	blx	r3
   83e16:	4603      	mov	r3, r0
   83e18:	b1a8      	cbz	r0, 83e46 <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   83e1a:	2c40      	cmp	r4, #64	; 0x40
   83e1c:	d015      	beq.n	83e4a <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   83e1e:	2c30      	cmp	r4, #48	; 0x30
   83e20:	d022      	beq.n	83e68 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e22:	204c      	movs	r0, #76	; 0x4c
   83e24:	4e32      	ldr	r6, [pc, #200]	; (83ef0 <XMEGANVM_EraseMemory+0xe4>)
   83e26:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e28:	200a      	movs	r0, #10
   83e2a:	4b32      	ldr	r3, [pc, #200]	; (83ef4 <XMEGANVM_EraseMemory+0xe8>)
   83e2c:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   83e2e:	4620      	mov	r0, r4
   83e30:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e32:	204c      	movs	r0, #76	; 0x4c
   83e34:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   83e36:	4628      	mov	r0, r5
   83e38:	4b2f      	ldr	r3, [pc, #188]	; (83ef8 <XMEGANVM_EraseMemory+0xec>)
   83e3a:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83e3c:	2000      	movs	r0, #0
   83e3e:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   83e40:	4b2e      	ldr	r3, [pc, #184]	; (83efc <XMEGANVM_EraseMemory+0xf0>)
   83e42:	4798      	blx	r3
   83e44:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   83e46:	4618      	mov	r0, r3
   83e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e4a:	204c      	movs	r0, #76	; 0x4c
   83e4c:	4c28      	ldr	r4, [pc, #160]	; (83ef0 <XMEGANVM_EraseMemory+0xe4>)
   83e4e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e50:	200a      	movs	r0, #10
   83e52:	4d28      	ldr	r5, [pc, #160]	; (83ef4 <XMEGANVM_EraseMemory+0xe8>)
   83e54:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83e56:	2040      	movs	r0, #64	; 0x40
   83e58:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e5a:	204c      	movs	r0, #76	; 0x4c
   83e5c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83e5e:	200b      	movs	r0, #11
   83e60:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83e62:	2001      	movs	r0, #1
   83e64:	47a0      	blx	r4
   83e66:	e7eb      	b.n	83e40 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e68:	204c      	movs	r0, #76	; 0x4c
   83e6a:	4c21      	ldr	r4, [pc, #132]	; (83ef0 <XMEGANVM_EraseMemory+0xe4>)
   83e6c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e6e:	200a      	movs	r0, #10
   83e70:	4e20      	ldr	r6, [pc, #128]	; (83ef4 <XMEGANVM_EraseMemory+0xe8>)
   83e72:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   83e74:	2036      	movs	r0, #54	; 0x36
   83e76:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e78:	204c      	movs	r0, #76	; 0x4c
   83e7a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83e7c:	200b      	movs	r0, #11
   83e7e:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83e80:	2001      	movs	r0, #1
   83e82:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83e84:	4b19      	ldr	r3, [pc, #100]	; (83eec <XMEGANVM_EraseMemory+0xe0>)
   83e86:	4798      	blx	r3
   83e88:	4603      	mov	r3, r0
   83e8a:	2800      	cmp	r0, #0
   83e8c:	d0db      	beq.n	83e46 <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e8e:	204c      	movs	r0, #76	; 0x4c
   83e90:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e92:	200a      	movs	r0, #10
   83e94:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   83e96:	2033      	movs	r0, #51	; 0x33
   83e98:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83e9a:	206b      	movs	r0, #107	; 0x6b
   83e9c:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   83e9e:	4628      	mov	r0, r5
   83ea0:	4b15      	ldr	r3, [pc, #84]	; (83ef8 <XMEGANVM_EraseMemory+0xec>)
   83ea2:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83ea4:	20a0      	movs	r0, #160	; 0xa0
   83ea6:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   83ea8:	4d15      	ldr	r5, [pc, #84]	; (83f00 <XMEGANVM_EraseMemory+0xf4>)
   83eaa:	7828      	ldrb	r0, [r5, #0]
   83eac:	3801      	subs	r0, #1
   83eae:	b2c0      	uxtb	r0, r0
   83eb0:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83eb2:	2064      	movs	r0, #100	; 0x64
   83eb4:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83eb6:	882b      	ldrh	r3, [r5, #0]
   83eb8:	b14b      	cbz	r3, 83ece <XMEGANVM_EraseMemory+0xc2>
   83eba:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   83ebc:	4627      	mov	r7, r4
   83ebe:	4e0c      	ldr	r6, [pc, #48]	; (83ef0 <XMEGANVM_EraseMemory+0xe4>)
   83ec0:	4638      	mov	r0, r7
   83ec2:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83ec4:	1c63      	adds	r3, r4, #1
   83ec6:	b2dc      	uxtb	r4, r3
   83ec8:	882a      	ldrh	r2, [r5, #0]
   83eca:	42a2      	cmp	r2, r4
   83ecc:	d8f8      	bhi.n	83ec0 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ece:	204c      	movs	r0, #76	; 0x4c
   83ed0:	4c07      	ldr	r4, [pc, #28]	; (83ef0 <XMEGANVM_EraseMemory+0xe4>)
   83ed2:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83ed4:	200a      	movs	r0, #10
   83ed6:	4d07      	ldr	r5, [pc, #28]	; (83ef4 <XMEGANVM_EraseMemory+0xe8>)
   83ed8:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83eda:	2030      	movs	r0, #48	; 0x30
   83edc:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ede:	204c      	movs	r0, #76	; 0x4c
   83ee0:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83ee2:	200b      	movs	r0, #11
   83ee4:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83ee6:	2001      	movs	r0, #1
   83ee8:	47a0      	blx	r4
   83eea:	e7a9      	b.n	83e40 <XMEGANVM_EraseMemory+0x34>
   83eec:	00083b65 	.word	0x00083b65
   83ef0:	0008438d 	.word	0x0008438d
   83ef4:	00083b21 	.word	0x00083b21
   83ef8:	00083b01 	.word	0x00083b01
   83efc:	00083b39 	.word	0x00083b39
   83f00:	200005b0 	.word	0x200005b0

00083f04 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   83f04:	b570      	push	{r4, r5, r6, lr}
   83f06:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   83f08:	4b8f      	ldr	r3, [pc, #572]	; (84148 <XPROGProtocol_Command+0x244>)
   83f0a:	8859      	ldrh	r1, [r3, #2]
   83f0c:	b2cb      	uxtb	r3, r1
   83f0e:	4a8f      	ldr	r2, [pc, #572]	; (8414c <XPROGProtocol_Command+0x248>)
   83f10:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   83f12:	3b01      	subs	r3, #1
   83f14:	2b21      	cmp	r3, #33	; 0x21
   83f16:	d82b      	bhi.n	83f70 <XPROGProtocol_Command+0x6c>
   83f18:	e8df f013 	tbh	[pc, r3, lsl #1]
   83f1c:	002f0022 	.word	0x002f0022
   83f20:	00730037 	.word	0x00730037
   83f24:	00e600c2 	.word	0x00e600c2
   83f28:	002a00e9 	.word	0x002a00e9
   83f2c:	002a002a 	.word	0x002a002a
   83f30:	002a002a 	.word	0x002a002a
   83f34:	002a002a 	.word	0x002a002a
   83f38:	002a002a 	.word	0x002a002a
   83f3c:	002a002a 	.word	0x002a002a
   83f40:	002a002a 	.word	0x002a002a
   83f44:	002a002a 	.word	0x002a002a
   83f48:	002a002a 	.word	0x002a002a
   83f4c:	002a002a 	.word	0x002a002a
   83f50:	002a002a 	.word	0x002a002a
   83f54:	002a002a 	.word	0x002a002a
   83f58:	017c002a 	.word	0x017c002a
   83f5c:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83f60:	4b7b      	ldr	r3, [pc, #492]	; (84150 <XPROGProtocol_Command+0x24c>)
   83f62:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83f64:	4b7b      	ldr	r3, [pc, #492]	; (84154 <XPROGProtocol_Command+0x250>)
   83f66:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83f68:	f080 0001 	eor.w	r0, r0, #1
   83f6c:	4b7a      	ldr	r3, [pc, #488]	; (84158 <XPROGProtocol_Command+0x254>)
   83f6e:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83f70:	4b7a      	ldr	r3, [pc, #488]	; (8415c <XPROGProtocol_Command+0x258>)
   83f72:	4798      	blx	r3
	return false;
   83f74:	2000      	movs	r0, #0
}
   83f76:	b004      	add	sp, #16
   83f78:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   83f7a:	4b75      	ldr	r3, [pc, #468]	; (84150 <XPROGProtocol_Command+0x24c>)
   83f7c:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   83f7e:	4b78      	ldr	r3, [pc, #480]	; (84160 <XPROGProtocol_Command+0x25c>)
   83f80:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83f82:	4b75      	ldr	r3, [pc, #468]	; (84158 <XPROGProtocol_Command+0x254>)
   83f84:	2200      	movs	r2, #0
   83f86:	701a      	strb	r2, [r3, #0]
}
   83f88:	e7f2      	b.n	83f70 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83f8a:	4b71      	ldr	r3, [pc, #452]	; (84150 <XPROGProtocol_Command+0x24c>)
   83f8c:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83f8e:	4b72      	ldr	r3, [pc, #456]	; (84158 <XPROGProtocol_Command+0x254>)
   83f90:	2200      	movs	r2, #0
   83f92:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83f94:	4b6c      	ldr	r3, [pc, #432]	; (84148 <XPROGProtocol_Command+0x244>)
   83f96:	899b      	ldrh	r3, [r3, #12]
   83f98:	2b04      	cmp	r3, #4
   83f9a:	d915      	bls.n	83fc8 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   83f9c:	4b6a      	ldr	r3, [pc, #424]	; (84148 <XPROGProtocol_Command+0x244>)
   83f9e:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83fa0:	791a      	ldrb	r2, [r3, #4]
   83fa2:	78d9      	ldrb	r1, [r3, #3]
   83fa4:	0409      	lsls	r1, r1, #16
   83fa6:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83faa:	785a      	ldrb	r2, [r3, #1]
   83fac:	4311      	orrs	r1, r2
   83fae:	789a      	ldrb	r2, [r3, #2]
   83fb0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83fb4:	781b      	ldrb	r3, [r3, #0]
   83fb6:	3b01      	subs	r3, #1
   83fb8:	2b07      	cmp	r3, #7
   83fba:	d81e      	bhi.n	83ffa <XPROGProtocol_Command+0xf6>
   83fbc:	e8df f003 	tbb	[pc, r3]
   83fc0:	1311081f 	.word	0x1311081f
   83fc4:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   83fc8:	4b63      	ldr	r3, [pc, #396]	; (84158 <XPROGProtocol_Command+0x254>)
   83fca:	2201      	movs	r2, #1
   83fcc:	701a      	strb	r2, [r3, #0]
		return;
   83fce:	e7cf      	b.n	83f70 <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83fd0:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83fd2:	4b64      	ldr	r3, [pc, #400]	; (84164 <XPROGProtocol_Command+0x260>)
   83fd4:	4798      	blx	r3
   83fd6:	2800      	cmp	r0, #0
   83fd8:	d1ca      	bne.n	83f70 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   83fda:	4b5f      	ldr	r3, [pc, #380]	; (84158 <XPROGProtocol_Command+0x254>)
   83fdc:	2203      	movs	r2, #3
   83fde:	701a      	strb	r2, [r3, #0]
   83fe0:	e7c6      	b.n	83f70 <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   83fe2:	2068      	movs	r0, #104	; 0x68
		break;
   83fe4:	e7f5      	b.n	83fd2 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   83fe6:	2030      	movs	r0, #48	; 0x30
		break;
   83fe8:	e7f3      	b.n	83fd2 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   83fea:	2022      	movs	r0, #34	; 0x22
		break;
   83fec:	e7f1      	b.n	83fd2 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   83fee:	202a      	movs	r0, #42	; 0x2a
		break;
   83ff0:	e7ef      	b.n	83fd2 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   83ff2:	2032      	movs	r0, #50	; 0x32
		break;
   83ff4:	e7ed      	b.n	83fd2 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   83ff6:	2018      	movs	r0, #24
		break;
   83ff8:	e7eb      	b.n	83fd2 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   83ffa:	2000      	movs	r0, #0
		break;
   83ffc:	e7e9      	b.n	83fd2 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   83ffe:	2040      	movs	r0, #64	; 0x40
   84000:	e7e7      	b.n	83fd2 <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   84002:	4b53      	ldr	r3, [pc, #332]	; (84150 <XPROGProtocol_Command+0x24c>)
   84004:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   84006:	4b54      	ldr	r3, [pc, #336]	; (84158 <XPROGProtocol_Command+0x254>)
   84008:	2200      	movs	r2, #0
   8400a:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   8400c:	4b4e      	ldr	r3, [pc, #312]	; (84148 <XPROGProtocol_Command+0x244>)
   8400e:	88db      	ldrh	r3, [r3, #6]
   84010:	2b07      	cmp	r3, #7
   84012:	d802      	bhi.n	8401a <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   84014:	4b50      	ldr	r3, [pc, #320]	; (84158 <XPROGProtocol_Command+0x254>)
   84016:	2201      	movs	r2, #1
   84018:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   8401a:	4b4b      	ldr	r3, [pc, #300]	; (84148 <XPROGProtocol_Command+0x244>)
   8401c:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8401e:	795a      	ldrb	r2, [r3, #5]
   84020:	7919      	ldrb	r1, [r3, #4]
   84022:	0409      	lsls	r1, r1, #16
   84024:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   84028:	789a      	ldrb	r2, [r3, #2]
   8402a:	4311      	orrs	r1, r2
   8402c:	78da      	ldrb	r2, [r3, #3]
   8402e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   84032:	781a      	ldrb	r2, [r3, #0]
   84034:	3a01      	subs	r2, #1
   84036:	2a05      	cmp	r2, #5
   84038:	d82e      	bhi.n	84098 <XPROGProtocol_Command+0x194>
   8403a:	e8df f012 	tbh	[pc, r2, lsl #1]
   8403e:	00fd      	.short	0x00fd
   84040:	0101000e 	.word	0x0101000e
   84044:	00060105 	.word	0x00060105
   84048:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8404a:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   8404c:	4b46      	ldr	r3, [pc, #280]	; (84168 <XPROGProtocol_Command+0x264>)
   8404e:	781a      	ldrb	r2, [r3, #0]
   84050:	4b46      	ldr	r3, [pc, #280]	; (8416c <XPROGProtocol_Command+0x268>)
   84052:	4798      	blx	r3
   84054:	2800      	cmp	r0, #0
   84056:	d18b      	bne.n	83f70 <XPROGProtocol_Command+0x6c>
   84058:	e016      	b.n	84088 <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8405a:	2526      	movs	r5, #38	; 0x26
   8405c:	2023      	movs	r0, #35	; 0x23
   8405e:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   84060:	79de      	ldrb	r6, [r3, #7]
   84062:	799c      	ldrb	r4, [r3, #6]
   84064:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   84068:	785b      	ldrb	r3, [r3, #1]
   8406a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8406e:	bf28      	it	cs
   84070:	f44f 7480 	movcs.w	r4, #256	; 0x100
   84074:	9402      	str	r4, [sp, #8]
   84076:	4c3c      	ldr	r4, [pc, #240]	; (84168 <XPROGProtocol_Command+0x264>)
   84078:	9401      	str	r4, [sp, #4]
   8407a:	9100      	str	r1, [sp, #0]
   8407c:	4629      	mov	r1, r5
   8407e:	4c3c      	ldr	r4, [pc, #240]	; (84170 <XPROGProtocol_Command+0x26c>)
   84080:	47a0      	blx	r4
   84082:	2800      	cmp	r0, #0
   84084:	f47f af74 	bne.w	83f70 <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   84088:	4b33      	ldr	r3, [pc, #204]	; (84158 <XPROGProtocol_Command+0x254>)
   8408a:	2203      	movs	r2, #3
   8408c:	701a      	strb	r2, [r3, #0]
   8408e:	e76f      	b.n	83f70 <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   84090:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   84092:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   84094:	221a      	movs	r2, #26
		break;
   84096:	e7e3      	b.n	84060 <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   84098:	222e      	movs	r2, #46	; 0x2e
   8409a:	2526      	movs	r5, #38	; 0x26
   8409c:	2023      	movs	r0, #35	; 0x23
   8409e:	e7df      	b.n	84060 <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   840a0:	4b2b      	ldr	r3, [pc, #172]	; (84150 <XPROGProtocol_Command+0x24c>)
   840a2:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   840a4:	4b2c      	ldr	r3, [pc, #176]	; (84158 <XPROGProtocol_Command+0x254>)
   840a6:	2200      	movs	r2, #0
   840a8:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   840aa:	4b27      	ldr	r3, [pc, #156]	; (84148 <XPROGProtocol_Command+0x244>)
   840ac:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   840ae:	798b      	ldrb	r3, [r1, #6]
   840b0:	794a      	ldrb	r2, [r1, #5]
   840b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   840b6:	7908      	ldrb	r0, [r1, #4]
   840b8:	78cb      	ldrb	r3, [r1, #3]
   840ba:	041b      	lsls	r3, r3, #16
   840bc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   840c0:	7848      	ldrb	r0, [r1, #1]
   840c2:	4303      	orrs	r3, r0
   840c4:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   840c6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   840ca:	bf28      	it	cs
   840cc:	f44f 7280 	movcs.w	r2, #256	; 0x100
   840d0:	4925      	ldr	r1, [pc, #148]	; (84168 <XPROGProtocol_Command+0x264>)
   840d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   840d6:	4b27      	ldr	r3, [pc, #156]	; (84174 <XPROGProtocol_Command+0x270>)
   840d8:	4798      	blx	r3
   840da:	2800      	cmp	r0, #0
   840dc:	f47f af48 	bne.w	83f70 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   840e0:	4b1d      	ldr	r3, [pc, #116]	; (84158 <XPROGProtocol_Command+0x254>)
   840e2:	2203      	movs	r2, #3
   840e4:	701a      	strb	r2, [r3, #0]
   840e6:	e743      	b.n	83f70 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   840e8:	4b19      	ldr	r3, [pc, #100]	; (84150 <XPROGProtocol_Command+0x24c>)
   840ea:	4798      	blx	r3
			break;
   840ec:	e740      	b.n	83f70 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   840ee:	4b18      	ldr	r3, [pc, #96]	; (84150 <XPROGProtocol_Command+0x24c>)
   840f0:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   840f2:	4b19      	ldr	r3, [pc, #100]	; (84158 <XPROGProtocol_Command+0x254>)
   840f4:	2200      	movs	r2, #0
   840f6:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   840f8:	4b13      	ldr	r3, [pc, #76]	; (84148 <XPROGProtocol_Command+0x244>)
   840fa:	8999      	ldrh	r1, [r3, #12]
   840fc:	2901      	cmp	r1, #1
   840fe:	d90b      	bls.n	84118 <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   84100:	4b11      	ldr	r3, [pc, #68]	; (84148 <XPROGProtocol_Command+0x244>)
   84102:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   84104:	7813      	ldrb	r3, [r2, #0]
   84106:	3b01      	subs	r3, #1
   84108:	2b07      	cmp	r3, #7
   8410a:	d85f      	bhi.n	841cc <XPROGProtocol_Command+0x2c8>
   8410c:	e8df f003 	tbb	[pc, r3]
   84110:	47433608 	.word	0x47433608
   84114:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   84118:	4b0f      	ldr	r3, [pc, #60]	; (84158 <XPROGProtocol_Command+0x254>)
   8411a:	2201      	movs	r2, #1
   8411c:	701a      	strb	r2, [r3, #0]
		return;
   8411e:	e727      	b.n	83f70 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   84120:	2904      	cmp	r1, #4
   84122:	d90c      	bls.n	8413e <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   84124:	7911      	ldrb	r1, [r2, #4]
   84126:	78d3      	ldrb	r3, [r2, #3]
   84128:	041b      	lsls	r3, r3, #16
   8412a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   8412e:	7851      	ldrb	r1, [r2, #1]
   84130:	430b      	orrs	r3, r1
   84132:	7892      	ldrb	r2, [r2, #2]
   84134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   84138:	4a0f      	ldr	r2, [pc, #60]	; (84178 <XPROGProtocol_Command+0x274>)
   8413a:	6013      	str	r3, [r2, #0]
			break;
   8413c:	e718      	b.n	83f70 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   8413e:	4b06      	ldr	r3, [pc, #24]	; (84158 <XPROGProtocol_Command+0x254>)
   84140:	2201      	movs	r2, #1
   84142:	701a      	strb	r2, [r3, #0]
				return;
   84144:	e714      	b.n	83f70 <XPROGProtocol_Command+0x6c>
   84146:	bf00      	nop
   84148:	20002df4 	.word	0x20002df4
   8414c:	2000217c 	.word	0x2000217c
   84150:	00083579 	.word	0x00083579
   84154:	00083ba1 	.word	0x00083ba1
   84158:	20002ddc 	.word	0x20002ddc
   8415c:	000835c1 	.word	0x000835c1
   84160:	00083c1d 	.word	0x00083c1d
   84164:	00083e0d 	.word	0x00083e0d
   84168:	20002180 	.word	0x20002180
   8416c:	00083ced 	.word	0x00083ced
   84170:	00083d35 	.word	0x00083d35
   84174:	00083c59 	.word	0x00083c59
   84178:	200005b4 	.word	0x200005b4
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   8417c:	2902      	cmp	r1, #2
   8417e:	d906      	bls.n	8418e <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   84180:	7891      	ldrb	r1, [r2, #2]
   84182:	7853      	ldrb	r3, [r2, #1]
   84184:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   84188:	4a30      	ldr	r2, [pc, #192]	; (8424c <XPROGProtocol_Command+0x348>)
   8418a:	8013      	strh	r3, [r2, #0]
			break;
   8418c:	e6f0      	b.n	83f70 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   8418e:	4b30      	ldr	r3, [pc, #192]	; (84250 <XPROGProtocol_Command+0x34c>)
   84190:	2201      	movs	r2, #1
   84192:	701a      	strb	r2, [r3, #0]
				return;
   84194:	e6ec      	b.n	83f70 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   84196:	7852      	ldrb	r2, [r2, #1]
   84198:	4b2e      	ldr	r3, [pc, #184]	; (84254 <XPROGProtocol_Command+0x350>)
   8419a:	701a      	strb	r2, [r3, #0]
			break;
   8419c:	e6e8      	b.n	83f70 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   8419e:	7852      	ldrb	r2, [r2, #1]
   841a0:	4b2d      	ldr	r3, [pc, #180]	; (84258 <XPROGProtocol_Command+0x354>)
   841a2:	701a      	strb	r2, [r3, #0]
			break;
   841a4:	e6e4      	b.n	83f70 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   841a6:	2904      	cmp	r1, #4
   841a8:	d803      	bhi.n	841b2 <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   841aa:	4b29      	ldr	r3, [pc, #164]	; (84250 <XPROGProtocol_Command+0x34c>)
   841ac:	2201      	movs	r2, #1
   841ae:	701a      	strb	r2, [r3, #0]
				return;
   841b0:	e6de      	b.n	83f70 <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   841b2:	7911      	ldrb	r1, [r2, #4]
   841b4:	78d3      	ldrb	r3, [r2, #3]
   841b6:	041b      	lsls	r3, r3, #16
   841b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   841bc:	7851      	ldrb	r1, [r2, #1]
   841be:	430b      	orrs	r3, r1
   841c0:	7890      	ldrb	r0, [r2, #2]
   841c2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   841c6:	4b25      	ldr	r3, [pc, #148]	; (8425c <XPROGProtocol_Command+0x358>)
   841c8:	4798      	blx	r3
			break;
   841ca:	e6d1      	b.n	83f70 <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   841cc:	4b20      	ldr	r3, [pc, #128]	; (84250 <XPROGProtocol_Command+0x34c>)
   841ce:	2201      	movs	r2, #1
   841d0:	701a      	strb	r2, [r3, #0]
			break;
   841d2:	e6cd      	b.n	83f70 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   841d4:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   841d6:	4b22      	ldr	r3, [pc, #136]	; (84260 <XPROGProtocol_Command+0x35c>)
   841d8:	88db      	ldrh	r3, [r3, #6]
   841da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   841de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   841e2:	dc27      	bgt.n	84234 <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   841e4:	491e      	ldr	r1, [pc, #120]	; (84260 <XPROGProtocol_Command+0x35c>)
   841e6:	4a1f      	ldr	r2, [pc, #124]	; (84264 <XPROGProtocol_Command+0x360>)
   841e8:	4402      	add	r2, r0
   841ea:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   841ec:	818b      	strh	r3, [r1, #12]
			return true;
   841ee:	2001      	movs	r0, #1
   841f0:	e6c1      	b.n	83f76 <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   841f2:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   841f4:	4b1a      	ldr	r3, [pc, #104]	; (84260 <XPROGProtocol_Command+0x35c>)
   841f6:	88da      	ldrh	r2, [r3, #6]
   841f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   841fc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   84200:	dd01      	ble.n	84206 <XPROGProtocol_Command+0x302>
				return false;
   84202:	2000      	movs	r0, #0
   84204:	e6b7      	b.n	83f76 <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   84206:	6899      	ldr	r1, [r3, #8]
   84208:	4b16      	ldr	r3, [pc, #88]	; (84264 <XPROGProtocol_Command+0x360>)
   8420a:	4418      	add	r0, r3
   8420c:	4b16      	ldr	r3, [pc, #88]	; (84268 <XPROGProtocol_Command+0x364>)
   8420e:	4798      	blx	r3
			return true;
   84210:	2001      	movs	r0, #1
   84212:	e6b0      	b.n	83f76 <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   84214:	4a15      	ldr	r2, [pc, #84]	; (8426c <XPROGProtocol_Command+0x368>)
   84216:	4b0e      	ldr	r3, [pc, #56]	; (84250 <XPROGProtocol_Command+0x34c>)
   84218:	781b      	ldrb	r3, [r3, #0]
   8421a:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   8421c:	4b14      	ldr	r3, [pc, #80]	; (84270 <XPROGProtocol_Command+0x36c>)
   8421e:	681b      	ldr	r3, [r3, #0]
   84220:	fab3 f383 	clz	r3, r3
   84224:	095b      	lsrs	r3, r3, #5
   84226:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   84228:	4b0d      	ldr	r3, [pc, #52]	; (84260 <XPROGProtocol_Command+0x35c>)
   8422a:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   8422c:	2203      	movs	r2, #3
   8422e:	819a      	strh	r2, [r3, #12]
			return true;
   84230:	2001      	movs	r0, #1
   84232:	e6a0      	b.n	83f76 <XPROGProtocol_Command+0x72>
				return false;
   84234:	2000      	movs	r0, #0
   84236:	e69e      	b.n	83f76 <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   84238:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8423a:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   8423c:	2224      	movs	r2, #36	; 0x24
   8423e:	e70f      	b.n	84060 <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   84240:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   84242:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   84244:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   84246:	e70b      	b.n	84060 <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   84248:	204c      	movs	r0, #76	; 0x4c
   8424a:	e6ff      	b.n	8404c <XPROGProtocol_Command+0x148>
   8424c:	200005b0 	.word	0x200005b0
   84250:	20002ddc 	.word	0x20002ddc
   84254:	200005b8 	.word	0x200005b8
   84258:	200005b9 	.word	0x200005b9
   8425c:	00083509 	.word	0x00083509
   84260:	20002df4 	.word	0x20002df4
   84264:	20002180 	.word	0x20002180
   84268:	000878b5 	.word	0x000878b5
   8426c:	2000217c 	.word	0x2000217c
   84270:	20002664 	.word	0x20002664

00084274 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   84274:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   84276:	4d0b      	ldr	r5, [pc, #44]	; (842a4 <XPROGTarget_SetRxMode+0x30>)
   84278:	4c0b      	ldr	r4, [pc, #44]	; (842a8 <XPROGTarget_SetRxMode+0x34>)
   8427a:	4628      	mov	r0, r5
   8427c:	47a0      	blx	r4
   8427e:	2800      	cmp	r0, #0
   84280:	d0fb      	beq.n	8427a <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   84282:	4c08      	ldr	r4, [pc, #32]	; (842a4 <XPROGTarget_SetRxMode+0x30>)
   84284:	4620      	mov	r0, r4
   84286:	4b09      	ldr	r3, [pc, #36]	; (842ac <XPROGTarget_SetRxMode+0x38>)
   84288:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   8428a:	4620      	mov	r0, r4
   8428c:	4b08      	ldr	r3, [pc, #32]	; (842b0 <XPROGTarget_SetRxMode+0x3c>)
   8428e:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84290:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84294:	2014      	movs	r0, #20
   84296:	4b07      	ldr	r3, [pc, #28]	; (842b4 <XPROGTarget_SetRxMode+0x40>)
   84298:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   8429a:	4b07      	ldr	r3, [pc, #28]	; (842b8 <XPROGTarget_SetRxMode+0x44>)
   8429c:	2200      	movs	r2, #0
   8429e:	701a      	strb	r2, [r3, #0]
}
   842a0:	bd38      	pop	{r3, r4, r5, pc}
   842a2:	bf00      	nop
   842a4:	40094000 	.word	0x40094000
   842a8:	00086e81 	.word	0x00086e81
   842ac:	00086e43 	.word	0x00086e43
   842b0:	00086e4d 	.word	0x00086e4d
   842b4:	000851ed 	.word	0x000851ed
   842b8:	20002280 	.word	0x20002280

000842bc <XPROGTarget_SetTxMode>:
{
   842bc:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842be:	2518      	movs	r5, #24
   842c0:	4c14      	ldr	r4, [pc, #80]	; (84314 <XPROGTarget_SetTxMode+0x58>)
   842c2:	4e15      	ldr	r6, [pc, #84]	; (84318 <XPROGTarget_SetTxMode+0x5c>)
   842c4:	4628      	mov	r0, r5
   842c6:	47a0      	blx	r4
   842c8:	b110      	cbz	r0, 842d0 <XPROGTarget_SetTxMode+0x14>
   842ca:	6833      	ldr	r3, [r6, #0]
   842cc:	2b00      	cmp	r3, #0
   842ce:	d1f9      	bne.n	842c4 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842d0:	2518      	movs	r5, #24
   842d2:	4c10      	ldr	r4, [pc, #64]	; (84314 <XPROGTarget_SetTxMode+0x58>)
   842d4:	4e10      	ldr	r6, [pc, #64]	; (84318 <XPROGTarget_SetTxMode+0x5c>)
   842d6:	4628      	mov	r0, r5
   842d8:	47a0      	blx	r4
   842da:	b910      	cbnz	r0, 842e2 <XPROGTarget_SetTxMode+0x26>
   842dc:	6833      	ldr	r3, [r6, #0]
   842de:	2b00      	cmp	r3, #0
   842e0:	d1f9      	bne.n	842d6 <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842e2:	2518      	movs	r5, #24
   842e4:	4c0b      	ldr	r4, [pc, #44]	; (84314 <XPROGTarget_SetTxMode+0x58>)
   842e6:	4e0c      	ldr	r6, [pc, #48]	; (84318 <XPROGTarget_SetTxMode+0x5c>)
   842e8:	4628      	mov	r0, r5
   842ea:	47a0      	blx	r4
   842ec:	b110      	cbz	r0, 842f4 <XPROGTarget_SetTxMode+0x38>
   842ee:	6833      	ldr	r3, [r6, #0]
   842f0:	2b00      	cmp	r3, #0
   842f2:	d1f9      	bne.n	842e8 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   842f4:	4c09      	ldr	r4, [pc, #36]	; (8431c <XPROGTarget_SetTxMode+0x60>)
   842f6:	4620      	mov	r0, r4
   842f8:	4b09      	ldr	r3, [pc, #36]	; (84320 <XPROGTarget_SetTxMode+0x64>)
   842fa:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   842fc:	4620      	mov	r0, r4
   842fe:	4b09      	ldr	r3, [pc, #36]	; (84324 <XPROGTarget_SetTxMode+0x68>)
   84300:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   84302:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84306:	2014      	movs	r0, #20
   84308:	4b07      	ldr	r3, [pc, #28]	; (84328 <XPROGTarget_SetTxMode+0x6c>)
   8430a:	4798      	blx	r3
	IsSending = true;
   8430c:	4b07      	ldr	r3, [pc, #28]	; (8432c <XPROGTarget_SetTxMode+0x70>)
   8430e:	2201      	movs	r2, #1
   84310:	701a      	strb	r2, [r3, #0]
}
   84312:	bd70      	pop	{r4, r5, r6, pc}
   84314:	0008519b 	.word	0x0008519b
   84318:	20002664 	.word	0x20002664
   8431c:	40094000 	.word	0x40094000
   84320:	00086e53 	.word	0x00086e53
   84324:	00086e3d 	.word	0x00086e3d
   84328:	000851ed 	.word	0x000851ed
   8432c:	20002280 	.word	0x20002280

00084330 <XPROGTarget_DisableTargetPDI>:
{
   84330:	b510      	push	{r4, lr}
	if (IsSending)
   84332:	4b0f      	ldr	r3, [pc, #60]	; (84370 <XPROGTarget_DisableTargetPDI+0x40>)
   84334:	781b      	ldrb	r3, [r3, #0]
   84336:	b9bb      	cbnz	r3, 84368 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   84338:	4c0e      	ldr	r4, [pc, #56]	; (84374 <XPROGTarget_DisableTargetPDI+0x44>)
   8433a:	4620      	mov	r0, r4
   8433c:	4b0e      	ldr	r3, [pc, #56]	; (84378 <XPROGTarget_DisableTargetPDI+0x48>)
   8433e:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   84340:	4620      	mov	r0, r4
   84342:	4b0e      	ldr	r3, [pc, #56]	; (8437c <XPROGTarget_DisableTargetPDI+0x4c>)
   84344:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   84346:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8434a:	2018      	movs	r0, #24
   8434c:	4c0c      	ldr	r4, [pc, #48]	; (84380 <XPROGTarget_DisableTargetPDI+0x50>)
   8434e:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   84350:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84354:	2015      	movs	r0, #21
   84356:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84358:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8435c:	2014      	movs	r0, #20
   8435e:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   84360:	200e      	movs	r0, #14
   84362:	4b08      	ldr	r3, [pc, #32]	; (84384 <XPROGTarget_DisableTargetPDI+0x54>)
   84364:	4798      	blx	r3
}
   84366:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   84368:	4b07      	ldr	r3, [pc, #28]	; (84388 <XPROGTarget_DisableTargetPDI+0x58>)
   8436a:	4798      	blx	r3
   8436c:	e7e4      	b.n	84338 <XPROGTarget_DisableTargetPDI+0x8>
   8436e:	bf00      	nop
   84370:	20002280 	.word	0x20002280
   84374:	40094000 	.word	0x40094000
   84378:	00086e53 	.word	0x00086e53
   8437c:	00086e43 	.word	0x00086e43
   84380:	000851ed 	.word	0x000851ed
   84384:	00085565 	.word	0x00085565
   84388:	00084275 	.word	0x00084275

0008438c <XPROGTarget_SendByte>:
{
   8438c:	b510      	push	{r4, lr}
   8438e:	4604      	mov	r4, r0
	if (!(IsSending))
   84390:	4b05      	ldr	r3, [pc, #20]	; (843a8 <XPROGTarget_SendByte+0x1c>)
   84392:	781b      	ldrb	r3, [r3, #0]
   84394:	b123      	cbz	r3, 843a0 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   84396:	4621      	mov	r1, r4
   84398:	4804      	ldr	r0, [pc, #16]	; (843ac <XPROGTarget_SendByte+0x20>)
   8439a:	4b05      	ldr	r3, [pc, #20]	; (843b0 <XPROGTarget_SendByte+0x24>)
   8439c:	4798      	blx	r3
}
   8439e:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   843a0:	4b04      	ldr	r3, [pc, #16]	; (843b4 <XPROGTarget_SendByte+0x28>)
   843a2:	4798      	blx	r3
   843a4:	e7f7      	b.n	84396 <XPROGTarget_SendByte+0xa>
   843a6:	bf00      	nop
   843a8:	20002280 	.word	0x20002280
   843ac:	40094000 	.word	0x40094000
   843b0:	00086e9d 	.word	0x00086e9d
   843b4:	000842bd 	.word	0x000842bd

000843b8 <XPROGTarget_ReceiveByte>:
{
   843b8:	b570      	push	{r4, r5, r6, lr}
   843ba:	b082      	sub	sp, #8
	if (IsSending)
   843bc:	4b0a      	ldr	r3, [pc, #40]	; (843e8 <XPROGTarget_ReceiveByte+0x30>)
   843be:	781b      	ldrb	r3, [r3, #0]
   843c0:	b973      	cbnz	r3, 843e0 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   843c2:	4d0a      	ldr	r5, [pc, #40]	; (843ec <XPROGTarget_ReceiveByte+0x34>)
   843c4:	4c0a      	ldr	r4, [pc, #40]	; (843f0 <XPROGTarget_ReceiveByte+0x38>)
   843c6:	4e0b      	ldr	r6, [pc, #44]	; (843f4 <XPROGTarget_ReceiveByte+0x3c>)
   843c8:	a901      	add	r1, sp, #4
   843ca:	4628      	mov	r0, r5
   843cc:	47a0      	blx	r4
   843ce:	2801      	cmp	r0, #1
   843d0:	d102      	bne.n	843d8 <XPROGTarget_ReceiveByte+0x20>
   843d2:	6833      	ldr	r3, [r6, #0]
   843d4:	2b00      	cmp	r3, #0
   843d6:	d1f7      	bne.n	843c8 <XPROGTarget_ReceiveByte+0x10>
}
   843d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   843dc:	b002      	add	sp, #8
   843de:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   843e0:	4b05      	ldr	r3, [pc, #20]	; (843f8 <XPROGTarget_ReceiveByte+0x40>)
   843e2:	4798      	blx	r3
   843e4:	e7ed      	b.n	843c2 <XPROGTarget_ReceiveByte+0xa>
   843e6:	bf00      	nop
   843e8:	20002280 	.word	0x20002280
   843ec:	40094000 	.word	0x40094000
   843f0:	00086eaf 	.word	0x00086eaf
   843f4:	20002664 	.word	0x20002664
   843f8:	00084275 	.word	0x00084275

000843fc <XPROGTarget_SendIdle>:
{
   843fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   843fe:	4b12      	ldr	r3, [pc, #72]	; (84448 <XPROGTarget_SendIdle+0x4c>)
   84400:	781b      	ldrb	r3, [r3, #0]
   84402:	b123      	cbz	r3, 8440e <XPROGTarget_SendIdle+0x12>
{
   84404:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84406:	2518      	movs	r5, #24
   84408:	4c10      	ldr	r4, [pc, #64]	; (8444c <XPROGTarget_SendIdle+0x50>)
   8440a:	4e11      	ldr	r6, [pc, #68]	; (84450 <XPROGTarget_SendIdle+0x54>)
   8440c:	e006      	b.n	8441c <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   8440e:	4b11      	ldr	r3, [pc, #68]	; (84454 <XPROGTarget_SendIdle+0x58>)
   84410:	4798      	blx	r3
   84412:	e7f7      	b.n	84404 <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   84414:	3f01      	subs	r7, #1
   84416:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   8441a:	d013      	beq.n	84444 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8441c:	4628      	mov	r0, r5
   8441e:	47a0      	blx	r4
   84420:	b110      	cbz	r0, 84428 <XPROGTarget_SendIdle+0x2c>
   84422:	6833      	ldr	r3, [r6, #0]
   84424:	2b00      	cmp	r3, #0
   84426:	d1f9      	bne.n	8441c <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84428:	4628      	mov	r0, r5
   8442a:	47a0      	blx	r4
   8442c:	b910      	cbnz	r0, 84434 <XPROGTarget_SendIdle+0x38>
   8442e:	6833      	ldr	r3, [r6, #0]
   84430:	2b00      	cmp	r3, #0
   84432:	d1f9      	bne.n	84428 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84434:	4628      	mov	r0, r5
   84436:	47a0      	blx	r4
   84438:	2800      	cmp	r0, #0
   8443a:	d0eb      	beq.n	84414 <XPROGTarget_SendIdle+0x18>
   8443c:	6833      	ldr	r3, [r6, #0]
   8443e:	2b00      	cmp	r3, #0
   84440:	d1f8      	bne.n	84434 <XPROGTarget_SendIdle+0x38>
   84442:	e7e7      	b.n	84414 <XPROGTarget_SendIdle+0x18>
}
   84444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84446:	bf00      	nop
   84448:	20002280 	.word	0x20002280
   8444c:	0008519b 	.word	0x0008519b
   84450:	20002664 	.word	0x20002664
   84454:	000842bd 	.word	0x000842bd

00084458 <XPROGTarget_EnableTargetPDI>:
{
   84458:	b570      	push	{r4, r5, r6, lr}
   8445a:	b086      	sub	sp, #24
	IsSending = false;
   8445c:	2500      	movs	r5, #0
   8445e:	4b19      	ldr	r3, [pc, #100]	; (844c4 <XPROGTarget_EnableTargetPDI+0x6c>)
   84460:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   84462:	200e      	movs	r0, #14
   84464:	4b18      	ldr	r3, [pc, #96]	; (844c8 <XPROGTarget_EnableTargetPDI+0x70>)
   84466:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   84468:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8446c:	2014      	movs	r0, #20
   8446e:	4c17      	ldr	r4, [pc, #92]	; (844cc <XPROGTarget_EnableTargetPDI+0x74>)
   84470:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   84472:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84476:	2015      	movs	r0, #21
   84478:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   8447a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8447e:	2018      	movs	r0, #24
   84480:	47a0      	blx	r4
	delay_us(50);
   84482:	f240 1057 	movw	r0, #343	; 0x157
   84486:	4e12      	ldr	r6, [pc, #72]	; (844d0 <XPROGTarget_EnableTargetPDI+0x78>)
   84488:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   8448a:	2014      	movs	r0, #20
   8448c:	4b11      	ldr	r3, [pc, #68]	; (844d4 <XPROGTarget_EnableTargetPDI+0x7c>)
   8448e:	4798      	blx	r3
	delay_us(10);
   84490:	2045      	movs	r0, #69	; 0x45
   84492:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   84494:	9502      	str	r5, [sp, #8]
   84496:	9504      	str	r5, [sp, #16]
   84498:	9505      	str	r5, [sp, #20]
   8449a:	4b0f      	ldr	r3, [pc, #60]	; (844d8 <XPROGTarget_EnableTargetPDI+0x80>)
   8449c:	9300      	str	r3, [sp, #0]
   8449e:	23c0      	movs	r3, #192	; 0xc0
   844a0:	9301      	str	r3, [sp, #4]
   844a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   844a6:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   844a8:	4a0c      	ldr	r2, [pc, #48]	; (844dc <XPROGTarget_EnableTargetPDI+0x84>)
   844aa:	4669      	mov	r1, sp
   844ac:	480c      	ldr	r0, [pc, #48]	; (844e0 <XPROGTarget_EnableTargetPDI+0x88>)
   844ae:	4b0d      	ldr	r3, [pc, #52]	; (844e4 <XPROGTarget_EnableTargetPDI+0x8c>)
   844b0:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   844b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   844b6:	2018      	movs	r0, #24
   844b8:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   844ba:	4c0b      	ldr	r4, [pc, #44]	; (844e8 <XPROGTarget_EnableTargetPDI+0x90>)
   844bc:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   844be:	47a0      	blx	r4
}
   844c0:	b006      	add	sp, #24
   844c2:	bd70      	pop	{r4, r5, r6, pc}
   844c4:	20002280 	.word	0x20002280
   844c8:	00085531 	.word	0x00085531
   844cc:	000851ed 	.word	0x000851ed
   844d0:	20000089 	.word	0x20000089
   844d4:	000851b7 	.word	0x000851b7
   844d8:	0007a120 	.word	0x0007a120
   844dc:	0b71b000 	.word	0x0b71b000
   844e0:	40094000 	.word	0x40094000
   844e4:	00086b9d 	.word	0x00086b9d
   844e8:	000843fd 	.word	0x000843fd

000844ec <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   844ec:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   844ee:	2006      	movs	r0, #6
   844f0:	4c02      	ldr	r4, [pc, #8]	; (844fc <ui_init+0x10>)
   844f2:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   844f4:	2007      	movs	r0, #7
   844f6:	47a0      	blx	r4
}
   844f8:	bd10      	pop	{r4, pc}
   844fa:	bf00      	nop
   844fc:	00085079 	.word	0x00085079

00084500 <ui_powerdown>:

void ui_powerdown(void)
{
   84500:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   84502:	2006      	movs	r0, #6
   84504:	4c03      	ldr	r4, [pc, #12]	; (84514 <ui_powerdown+0x14>)
   84506:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84508:	2007      	movs	r0, #7
   8450a:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   8450c:	201d      	movs	r0, #29
   8450e:	4b02      	ldr	r3, [pc, #8]	; (84518 <ui_powerdown+0x18>)
   84510:	4798      	blx	r3
		
}
   84512:	bd10      	pop	{r4, pc}
   84514:	00085079 	.word	0x00085079
   84518:	000851d1 	.word	0x000851d1

0008451c <ui_wakeup>:

void ui_wakeup(void)
{
   8451c:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   8451e:	2006      	movs	r0, #6
   84520:	4b02      	ldr	r3, [pc, #8]	; (8452c <ui_wakeup+0x10>)
   84522:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   84524:	201d      	movs	r0, #29
   84526:	4b02      	ldr	r3, [pc, #8]	; (84530 <ui_wakeup+0x14>)
   84528:	4798      	blx	r3
}
   8452a:	bd08      	pop	{r3, pc}
   8452c:	0008509d 	.word	0x0008509d
   84530:	000851b7 	.word	0x000851b7

00084534 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   84534:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   84536:	4b0b      	ldr	r3, [pc, #44]	; (84564 <ui_process+0x30>)
   84538:	fba3 2300 	umull	r2, r3, r3, r0
   8453c:	099b      	lsrs	r3, r3, #6
   8453e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   84542:	fb02 0013 	mls	r0, r2, r3, r0
   84546:	b280      	uxth	r0, r0
   84548:	b118      	cbz	r0, 84552 <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   8454a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   8454e:	d004      	beq.n	8455a <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
}
   84550:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   84552:	2006      	movs	r0, #6
   84554:	4b04      	ldr	r3, [pc, #16]	; (84568 <ui_process+0x34>)
   84556:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   84558:	e7fa      	b.n	84550 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   8455a:	2006      	movs	r0, #6
   8455c:	4b03      	ldr	r3, [pc, #12]	; (8456c <ui_process+0x38>)
   8455e:	4798      	blx	r3
}
   84560:	e7f6      	b.n	84550 <ui_process+0x1c>
   84562:	bf00      	nop
   84564:	10624dd3 	.word	0x10624dd3
   84568:	0008509d 	.word	0x0008509d
   8456c:	00085079 	.word	0x00085079

00084570 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   84570:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84572:	203e      	movs	r0, #62	; 0x3e
   84574:	4b07      	ldr	r3, [pc, #28]	; (84594 <sysclk_enable_usb+0x24>)
   84576:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   84578:	4c07      	ldr	r4, [pc, #28]	; (84598 <sysclk_enable_usb+0x28>)
   8457a:	47a0      	blx	r4
   8457c:	2800      	cmp	r0, #0
   8457e:	d0fc      	beq.n	8457a <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   84580:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   84584:	4b05      	ldr	r3, [pc, #20]	; (8459c <sysclk_enable_usb+0x2c>)
   84586:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   84588:	4c05      	ldr	r4, [pc, #20]	; (845a0 <sysclk_enable_usb+0x30>)
   8458a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8458c:	2800      	cmp	r0, #0
   8458e:	d0fc      	beq.n	8458a <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   84590:	bd10      	pop	{r4, pc}
   84592:	bf00      	nop
   84594:	00085499 	.word	0x00085499
   84598:	000854c1 	.word	0x000854c1
   8459c:	400e0400 	.word	0x400e0400
   845a0:	00085521 	.word	0x00085521

000845a4 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   845a4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   845a6:	4812      	ldr	r0, [pc, #72]	; (845f0 <sysclk_init+0x4c>)
   845a8:	4b12      	ldr	r3, [pc, #72]	; (845f4 <sysclk_init+0x50>)
   845aa:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   845ac:	203e      	movs	r0, #62	; 0x3e
   845ae:	4b12      	ldr	r3, [pc, #72]	; (845f8 <sysclk_init+0x54>)
   845b0:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   845b2:	4c12      	ldr	r4, [pc, #72]	; (845fc <sysclk_init+0x58>)
   845b4:	47a0      	blx	r4
   845b6:	2800      	cmp	r0, #0
   845b8:	d0fc      	beq.n	845b4 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   845ba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   845be:	4b10      	ldr	r3, [pc, #64]	; (84600 <sysclk_init+0x5c>)
   845c0:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   845c2:	4c10      	ldr	r4, [pc, #64]	; (84604 <sysclk_init+0x60>)
   845c4:	47a0      	blx	r4
   845c6:	2800      	cmp	r0, #0
   845c8:	d0fc      	beq.n	845c4 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   845ca:	4b0f      	ldr	r3, [pc, #60]	; (84608 <sysclk_init+0x64>)
   845cc:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   845ce:	4a0f      	ldr	r2, [pc, #60]	; (8460c <sysclk_init+0x68>)
   845d0:	4b0f      	ldr	r3, [pc, #60]	; (84610 <sysclk_init+0x6c>)
   845d2:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   845d4:	4c0f      	ldr	r4, [pc, #60]	; (84614 <sysclk_init+0x70>)
   845d6:	47a0      	blx	r4
   845d8:	2800      	cmp	r0, #0
   845da:	d0fc      	beq.n	845d6 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   845dc:	2010      	movs	r0, #16
   845de:	4b0e      	ldr	r3, [pc, #56]	; (84618 <sysclk_init+0x74>)
   845e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   845e2:	4b0e      	ldr	r3, [pc, #56]	; (8461c <sysclk_init+0x78>)
   845e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   845e6:	4802      	ldr	r0, [pc, #8]	; (845f0 <sysclk_init+0x4c>)
   845e8:	4b02      	ldr	r3, [pc, #8]	; (845f4 <sysclk_init+0x50>)
   845ea:	4798      	blx	r3
   845ec:	bd10      	pop	{r4, pc}
   845ee:	bf00      	nop
   845f0:	05b8d800 	.word	0x05b8d800
   845f4:	2000013d 	.word	0x2000013d
   845f8:	00085499 	.word	0x00085499
   845fc:	000854c1 	.word	0x000854c1
   84600:	000854e1 	.word	0x000854e1
   84604:	000854d1 	.word	0x000854d1
   84608:	00085501 	.word	0x00085501
   8460c:	200f3f01 	.word	0x200f3f01
   84610:	400e0400 	.word	0x400e0400
   84614:	00085511 	.word	0x00085511
   84618:	00085435 	.word	0x00085435
   8461c:	00086fcd 	.word	0x00086fcd

00084620 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   84620:	4b01      	ldr	r3, [pc, #4]	; (84628 <udi_vendor_getsetting+0x8>)
   84622:	7818      	ldrb	r0, [r3, #0]
   84624:	4770      	bx	lr
   84626:	bf00      	nop
   84628:	20002281 	.word	0x20002281

0008462c <udi_vendor_enable>:
{
   8462c:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8462e:	4b05      	ldr	r3, [pc, #20]	; (84644 <udi_vendor_enable+0x18>)
   84630:	4798      	blx	r3
   84632:	78c3      	ldrb	r3, [r0, #3]
   84634:	4a04      	ldr	r2, [pc, #16]	; (84648 <udi_vendor_enable+0x1c>)
   84636:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   84638:	b10b      	cbz	r3, 8463e <udi_vendor_enable+0x12>
	return true;
   8463a:	2001      	movs	r0, #1
}
   8463c:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8463e:	4b03      	ldr	r3, [pc, #12]	; (8464c <udi_vendor_enable+0x20>)
   84640:	4798      	blx	r3
   84642:	e7fb      	b.n	8463c <udi_vendor_enable+0x10>
   84644:	00084861 	.word	0x00084861
   84648:	20002281 	.word	0x20002281
   8464c:	0008307d 	.word	0x0008307d

00084650 <udi_vendor_disable>:
{
   84650:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   84652:	4b03      	ldr	r3, [pc, #12]	; (84660 <udi_vendor_disable+0x10>)
   84654:	781b      	ldrb	r3, [r3, #0]
   84656:	b103      	cbz	r3, 8465a <udi_vendor_disable+0xa>
}
   84658:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   8465a:	4b02      	ldr	r3, [pc, #8]	; (84664 <udi_vendor_disable+0x14>)
   8465c:	4798      	blx	r3
}
   8465e:	e7fb      	b.n	84658 <udi_vendor_disable+0x8>
   84660:	20002281 	.word	0x20002281
   84664:	000830ad 	.word	0x000830ad

00084668 <udi_vendor_setup>:
{
   84668:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   8466a:	4a0c      	ldr	r2, [pc, #48]	; (8469c <udi_vendor_setup+0x34>)
   8466c:	7813      	ldrb	r3, [r2, #0]
   8466e:	f992 2000 	ldrsb.w	r2, [r2]
   84672:	2a00      	cmp	r2, #0
   84674:	db06      	blt.n	84684 <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84676:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8467a:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   8467c:	bf18      	it	ne
   8467e:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84680:	d009      	beq.n	84696 <udi_vendor_setup+0x2e>
}
   84682:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84684:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84688:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   8468a:	bf18      	it	ne
   8468c:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8468e:	d1f8      	bne.n	84682 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84690:	4b03      	ldr	r3, [pc, #12]	; (846a0 <udi_vendor_setup+0x38>)
   84692:	4798      	blx	r3
   84694:	e7f5      	b.n	84682 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84696:	4b03      	ldr	r3, [pc, #12]	; (846a4 <udi_vendor_setup+0x3c>)
   84698:	4798      	blx	r3
   8469a:	e7f2      	b.n	84682 <udi_vendor_setup+0x1a>
   8469c:	20002df4 	.word	0x20002df4
   846a0:	00083215 	.word	0x00083215
   846a4:	000830b9 	.word	0x000830b9

000846a8 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   846a8:	b510      	push	{r4, lr}
   846aa:	b082      	sub	sp, #8
   846ac:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   846ae:	9200      	str	r2, [sp, #0]
   846b0:	4602      	mov	r2, r0
   846b2:	2100      	movs	r1, #0
   846b4:	2081      	movs	r0, #129	; 0x81
   846b6:	4c02      	ldr	r4, [pc, #8]	; (846c0 <udi_vendor_bulk_in_run+0x18>)
   846b8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   846ba:	b002      	add	sp, #8
   846bc:	bd10      	pop	{r4, pc}
   846be:	bf00      	nop
   846c0:	000865d1 	.word	0x000865d1

000846c4 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   846c4:	b510      	push	{r4, lr}
   846c6:	b082      	sub	sp, #8
   846c8:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   846ca:	9200      	str	r2, [sp, #0]
   846cc:	4602      	mov	r2, r0
   846ce:	2100      	movs	r1, #0
   846d0:	2002      	movs	r0, #2
   846d2:	4c02      	ldr	r4, [pc, #8]	; (846dc <udi_vendor_bulk_out_run+0x18>)
   846d4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   846d6:	b002      	add	sp, #8
   846d8:	bd10      	pop	{r4, pc}
   846da:	bf00      	nop
   846dc:	000865d1 	.word	0x000865d1

000846e0 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   846e0:	4b0b      	ldr	r3, [pc, #44]	; (84710 <udc_next_desc_in_iface+0x30>)
   846e2:	681b      	ldr	r3, [r3, #0]
   846e4:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   846e6:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   846e8:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   846ea:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   846ec:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   846ee:	4290      	cmp	r0, r2
   846f0:	d20a      	bcs.n	84708 <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   846f2:	7843      	ldrb	r3, [r0, #1]
   846f4:	2b04      	cmp	r3, #4
   846f6:	d009      	beq.n	8470c <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   846f8:	428b      	cmp	r3, r1
   846fa:	d008      	beq.n	8470e <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   846fc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   846fe:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   84700:	4290      	cmp	r0, r2
   84702:	d3f6      	bcc.n	846f2 <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   84704:	2000      	movs	r0, #0
   84706:	4770      	bx	lr
   84708:	2000      	movs	r0, #0
   8470a:	4770      	bx	lr
   8470c:	2000      	movs	r0, #0
}
   8470e:	4770      	bx	lr
   84710:	20002288 	.word	0x20002288

00084714 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   84714:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   84716:	4b03      	ldr	r3, [pc, #12]	; (84724 <udc_valid_address+0x10>)
   84718:	7898      	ldrb	r0, [r3, #2]
   8471a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8471e:	4b02      	ldr	r3, [pc, #8]	; (84728 <udc_valid_address+0x14>)
   84720:	4798      	blx	r3
}
   84722:	bd08      	pop	{r3, pc}
   84724:	20002df4 	.word	0x20002df4
   84728:	00086325 	.word	0x00086325

0008472c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   8472c:	4b18      	ldr	r3, [pc, #96]	; (84790 <udc_update_iface_desc+0x64>)
   8472e:	781b      	ldrb	r3, [r3, #0]
   84730:	b33b      	cbz	r3, 84782 <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84732:	4b18      	ldr	r3, [pc, #96]	; (84794 <udc_update_iface_desc+0x68>)
   84734:	681b      	ldr	r3, [r3, #0]
   84736:	681b      	ldr	r3, [r3, #0]
   84738:	791a      	ldrb	r2, [r3, #4]
   8473a:	4282      	cmp	r2, r0
   8473c:	d923      	bls.n	84786 <udc_update_iface_desc+0x5a>
{
   8473e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84740:	4a15      	ldr	r2, [pc, #84]	; (84798 <udc_update_iface_desc+0x6c>)
   84742:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   84744:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   84746:	441c      	add	r4, r3
	while (ptr_end_desc >
   84748:	42a3      	cmp	r3, r4
   8474a:	d21e      	bcs.n	8478a <udc_update_iface_desc+0x5e>
   8474c:	2500      	movs	r5, #0
   8474e:	2601      	movs	r6, #1
   84750:	e004      	b.n	8475c <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   84752:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   84754:	4413      	add	r3, r2
	while (ptr_end_desc >
   84756:	4635      	mov	r5, r6
   84758:	42a3      	cmp	r3, r4
   8475a:	d20d      	bcs.n	84778 <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8475c:	785a      	ldrb	r2, [r3, #1]
   8475e:	2a04      	cmp	r2, #4
   84760:	d1f7      	bne.n	84752 <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   84762:	789a      	ldrb	r2, [r3, #2]
   84764:	4282      	cmp	r2, r0
   84766:	d1f4      	bne.n	84752 <udc_update_iface_desc+0x26>
   84768:	78da      	ldrb	r2, [r3, #3]
   8476a:	428a      	cmp	r2, r1
   8476c:	d1f1      	bne.n	84752 <udc_update_iface_desc+0x26>
   8476e:	b10d      	cbz	r5, 84774 <udc_update_iface_desc+0x48>
   84770:	4a09      	ldr	r2, [pc, #36]	; (84798 <udc_update_iface_desc+0x6c>)
   84772:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   84774:	2001      	movs	r0, #1
   84776:	e002      	b.n	8477e <udc_update_iface_desc+0x52>
   84778:	4a07      	ldr	r2, [pc, #28]	; (84798 <udc_update_iface_desc+0x6c>)
   8477a:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   8477c:	2000      	movs	r0, #0
}
   8477e:	bc70      	pop	{r4, r5, r6}
   84780:	4770      	bx	lr
		return false;
   84782:	2000      	movs	r0, #0
   84784:	4770      	bx	lr
		return false;
   84786:	2000      	movs	r0, #0
}
   84788:	4770      	bx	lr
	return false; // Interface not found
   8478a:	2000      	movs	r0, #0
   8478c:	e7f7      	b.n	8477e <udc_update_iface_desc+0x52>
   8478e:	bf00      	nop
   84790:	20002287 	.word	0x20002287
   84794:	20002288 	.word	0x20002288
   84798:	2000228c 	.word	0x2000228c

0008479c <udc_iface_disable>:
{
   8479c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   847a0:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   847a2:	2100      	movs	r1, #0
   847a4:	4b12      	ldr	r3, [pc, #72]	; (847f0 <udc_iface_disable+0x54>)
   847a6:	4798      	blx	r3
   847a8:	4680      	mov	r8, r0
   847aa:	b1f0      	cbz	r0, 847ea <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   847ac:	4b11      	ldr	r3, [pc, #68]	; (847f4 <udc_iface_disable+0x58>)
   847ae:	681b      	ldr	r3, [r3, #0]
   847b0:	685b      	ldr	r3, [r3, #4]
   847b2:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   847b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   847ba:	4798      	blx	r3
   847bc:	4601      	mov	r1, r0
   847be:	4620      	mov	r0, r4
   847c0:	4b0b      	ldr	r3, [pc, #44]	; (847f0 <udc_iface_disable+0x54>)
   847c2:	4798      	blx	r3
   847c4:	4680      	mov	r8, r0
   847c6:	b180      	cbz	r0, 847ea <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   847c8:	4b0b      	ldr	r3, [pc, #44]	; (847f8 <udc_iface_disable+0x5c>)
   847ca:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   847cc:	2605      	movs	r6, #5
   847ce:	4d0b      	ldr	r5, [pc, #44]	; (847fc <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   847d0:	4f0b      	ldr	r7, [pc, #44]	; (84800 <udc_iface_disable+0x64>)
   847d2:	e001      	b.n	847d8 <udc_iface_disable+0x3c>
   847d4:	7880      	ldrb	r0, [r0, #2]
   847d6:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   847d8:	4631      	mov	r1, r6
   847da:	4620      	mov	r0, r4
   847dc:	47a8      	blx	r5
			if (NULL == ep_desc) {
   847de:	4604      	mov	r4, r0
   847e0:	2800      	cmp	r0, #0
   847e2:	d1f7      	bne.n	847d4 <udc_iface_disable+0x38>
	udi_api->disable();
   847e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   847e8:	4798      	blx	r3
}
   847ea:	4640      	mov	r0, r8
   847ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   847f0:	0008472d 	.word	0x0008472d
   847f4:	20002288 	.word	0x20002288
   847f8:	2000228c 	.word	0x2000228c
   847fc:	000846e1 	.word	0x000846e1
   84800:	00086389 	.word	0x00086389

00084804 <udc_iface_enable>:
{
   84804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84808:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8480a:	4b10      	ldr	r3, [pc, #64]	; (8484c <udc_iface_enable+0x48>)
   8480c:	4798      	blx	r3
   8480e:	4603      	mov	r3, r0
   84810:	b1c8      	cbz	r0, 84846 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84812:	4b0f      	ldr	r3, [pc, #60]	; (84850 <udc_iface_enable+0x4c>)
   84814:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   84816:	2605      	movs	r6, #5
   84818:	4d0e      	ldr	r5, [pc, #56]	; (84854 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8481a:	4f0f      	ldr	r7, [pc, #60]	; (84858 <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8481c:	4631      	mov	r1, r6
   8481e:	4620      	mov	r0, r4
   84820:	47a8      	blx	r5
		if (NULL == ep_desc)
   84822:	4604      	mov	r4, r0
   84824:	b138      	cbz	r0, 84836 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   84826:	8882      	ldrh	r2, [r0, #4]
   84828:	78c1      	ldrb	r1, [r0, #3]
   8482a:	7880      	ldrb	r0, [r0, #2]
   8482c:	47b8      	blx	r7
   8482e:	4603      	mov	r3, r0
   84830:	2800      	cmp	r0, #0
   84832:	d1f3      	bne.n	8481c <udc_iface_enable+0x18>
   84834:	e007      	b.n	84846 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   84836:	4b09      	ldr	r3, [pc, #36]	; (8485c <udc_iface_enable+0x58>)
   84838:	681b      	ldr	r3, [r3, #0]
   8483a:	685b      	ldr	r3, [r3, #4]
   8483c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   84840:	681b      	ldr	r3, [r3, #0]
   84842:	4798      	blx	r3
   84844:	4603      	mov	r3, r0
}
   84846:	4618      	mov	r0, r3
   84848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8484c:	0008472d 	.word	0x0008472d
   84850:	2000228c 	.word	0x2000228c
   84854:	000846e1 	.word	0x000846e1
   84858:	000866cd 	.word	0x000866cd
   8485c:	20002288 	.word	0x20002288

00084860 <udc_get_interface_desc>:
}
   84860:	4b01      	ldr	r3, [pc, #4]	; (84868 <udc_get_interface_desc+0x8>)
   84862:	6818      	ldr	r0, [r3, #0]
   84864:	4770      	bx	lr
   84866:	bf00      	nop
   84868:	2000228c 	.word	0x2000228c

0008486c <udc_start>:
{
   8486c:	b508      	push	{r3, lr}
	udd_enable();
   8486e:	4b01      	ldr	r3, [pc, #4]	; (84874 <udc_start+0x8>)
   84870:	4798      	blx	r3
}
   84872:	bd08      	pop	{r3, pc}
   84874:	00086209 	.word	0x00086209

00084878 <udc_reset>:
{
   84878:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   8487a:	4b0d      	ldr	r3, [pc, #52]	; (848b0 <udc_reset+0x38>)
   8487c:	781b      	ldrb	r3, [r3, #0]
   8487e:	b183      	cbz	r3, 848a2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84880:	4b0c      	ldr	r3, [pc, #48]	; (848b4 <udc_reset+0x3c>)
   84882:	681b      	ldr	r3, [r3, #0]
   84884:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   84886:	791b      	ldrb	r3, [r3, #4]
   84888:	b15b      	cbz	r3, 848a2 <udc_reset+0x2a>
   8488a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   8488c:	4e0a      	ldr	r6, [pc, #40]	; (848b8 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8488e:	4d09      	ldr	r5, [pc, #36]	; (848b4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   84890:	b2e0      	uxtb	r0, r4
   84892:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84894:	3401      	adds	r4, #1
   84896:	682b      	ldr	r3, [r5, #0]
   84898:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8489a:	791a      	ldrb	r2, [r3, #4]
   8489c:	b2e3      	uxtb	r3, r4
   8489e:	429a      	cmp	r2, r3
   848a0:	d8f6      	bhi.n	84890 <udc_reset+0x18>
	udc_num_configuration = 0;
   848a2:	2300      	movs	r3, #0
   848a4:	4a02      	ldr	r2, [pc, #8]	; (848b0 <udc_reset+0x38>)
   848a6:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   848a8:	4a04      	ldr	r2, [pc, #16]	; (848bc <udc_reset+0x44>)
   848aa:	8013      	strh	r3, [r2, #0]
}
   848ac:	bd70      	pop	{r4, r5, r6, pc}
   848ae:	bf00      	nop
   848b0:	20002287 	.word	0x20002287
   848b4:	20002288 	.word	0x20002288
   848b8:	0008479d 	.word	0x0008479d
   848bc:	20002282 	.word	0x20002282

000848c0 <udc_sof_notify>:
{
   848c0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   848c2:	4b0e      	ldr	r3, [pc, #56]	; (848fc <udc_sof_notify+0x3c>)
   848c4:	781b      	ldrb	r3, [r3, #0]
   848c6:	b1bb      	cbz	r3, 848f8 <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848c8:	4b0d      	ldr	r3, [pc, #52]	; (84900 <udc_sof_notify+0x40>)
   848ca:	681a      	ldr	r2, [r3, #0]
   848cc:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   848ce:	791b      	ldrb	r3, [r3, #4]
   848d0:	b193      	cbz	r3, 848f8 <udc_sof_notify+0x38>
   848d2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848d4:	4d0a      	ldr	r5, [pc, #40]	; (84900 <udc_sof_notify+0x40>)
   848d6:	e006      	b.n	848e6 <udc_sof_notify+0x26>
   848d8:	682a      	ldr	r2, [r5, #0]
   848da:	3401      	adds	r4, #1
   848dc:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   848de:	7919      	ldrb	r1, [r3, #4]
   848e0:	b2e3      	uxtb	r3, r4
   848e2:	4299      	cmp	r1, r3
   848e4:	d908      	bls.n	848f8 <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   848e6:	b2e3      	uxtb	r3, r4
   848e8:	6852      	ldr	r2, [r2, #4]
   848ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   848ee:	691b      	ldr	r3, [r3, #16]
   848f0:	2b00      	cmp	r3, #0
   848f2:	d0f1      	beq.n	848d8 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   848f4:	4798      	blx	r3
   848f6:	e7ef      	b.n	848d8 <udc_sof_notify+0x18>
}
   848f8:	bd38      	pop	{r3, r4, r5, pc}
   848fa:	bf00      	nop
   848fc:	20002287 	.word	0x20002287
   84900:	20002288 	.word	0x20002288

00084904 <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   84904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   84908:	4b91      	ldr	r3, [pc, #580]	; (84b50 <udc_process_setup+0x24c>)
   8490a:	2200      	movs	r2, #0
   8490c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   8490e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84910:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   84912:	881b      	ldrh	r3, [r3, #0]
   84914:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   84918:	d01b      	beq.n	84952 <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   8491a:	4b8d      	ldr	r3, [pc, #564]	; (84b50 <udc_process_setup+0x24c>)
   8491c:	781a      	ldrb	r2, [r3, #0]
   8491e:	f993 3000 	ldrsb.w	r3, [r3]
   84922:	2b00      	cmp	r3, #0
   84924:	db1b      	blt.n	8495e <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   84926:	f012 0f60 	tst.w	r2, #96	; 0x60
   8492a:	f000 8147 	beq.w	84bbc <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   8492e:	4b88      	ldr	r3, [pc, #544]	; (84b50 <udc_process_setup+0x24c>)
   84930:	781b      	ldrb	r3, [r3, #0]
   84932:	f003 031f 	and.w	r3, r3, #31
   84936:	2b01      	cmp	r3, #1
   84938:	f000 8245 	beq.w	84dc6 <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8493c:	4b84      	ldr	r3, [pc, #528]	; (84b50 <udc_process_setup+0x24c>)
   8493e:	781b      	ldrb	r3, [r3, #0]
   84940:	f003 031f 	and.w	r3, r3, #31
   84944:	2b02      	cmp	r3, #2
   84946:	f000 8291 	beq.w	84e6c <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8494a:	2300      	movs	r3, #0
#endif
}
   8494c:	4618      	mov	r0, r3
   8494e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   84952:	21ae      	movs	r1, #174	; 0xae
   84954:	487f      	ldr	r0, [pc, #508]	; (84b54 <udc_process_setup+0x250>)
   84956:	4b80      	ldr	r3, [pc, #512]	; (84b58 <udc_process_setup+0x254>)
   84958:	4798      	blx	r3
		return true;
   8495a:	2301      	movs	r3, #1
   8495c:	e7f6      	b.n	8494c <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   8495e:	4b7c      	ldr	r3, [pc, #496]	; (84b50 <udc_process_setup+0x24c>)
   84960:	88db      	ldrh	r3, [r3, #6]
   84962:	2b00      	cmp	r3, #0
   84964:	f000 82ae 	beq.w	84ec4 <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   84968:	f012 0f60 	tst.w	r2, #96	; 0x60
   8496c:	d1df      	bne.n	8492e <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8496e:	f012 021f 	ands.w	r2, r2, #31
   84972:	f040 80c1 	bne.w	84af8 <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   84976:	4a76      	ldr	r2, [pc, #472]	; (84b50 <udc_process_setup+0x24c>)
   84978:	7852      	ldrb	r2, [r2, #1]
   8497a:	2a06      	cmp	r2, #6
   8497c:	d00b      	beq.n	84996 <udc_process_setup+0x92>
   8497e:	2a08      	cmp	r2, #8
   84980:	f000 80b2 	beq.w	84ae8 <udc_process_setup+0x1e4>
   84984:	2a00      	cmp	r2, #0
   84986:	d1d2      	bne.n	8492e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   84988:	2b02      	cmp	r3, #2
   8498a:	d1d0      	bne.n	8492e <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8498c:	2102      	movs	r1, #2
   8498e:	4873      	ldr	r0, [pc, #460]	; (84b5c <udc_process_setup+0x258>)
   84990:	4b71      	ldr	r3, [pc, #452]	; (84b58 <udc_process_setup+0x254>)
   84992:	4798      	blx	r3
	return true;
   84994:	e12f      	b.n	84bf6 <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84996:	4b6e      	ldr	r3, [pc, #440]	; (84b50 <udc_process_setup+0x24c>)
   84998:	885a      	ldrh	r2, [r3, #2]
   8499a:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8499c:	0a13      	lsrs	r3, r2, #8
   8499e:	3b01      	subs	r3, #1
   849a0:	2b0e      	cmp	r3, #14
   849a2:	f200 8209 	bhi.w	84db8 <udc_process_setup+0x4b4>
   849a6:	e8df f013 	tbh	[pc, r3, lsl #1]
   849aa:	000f      	.short	0x000f
   849ac:	007a0023 	.word	0x007a0023
   849b0:	02070207 	.word	0x02070207
   849b4:	00520044 	.word	0x00520044
   849b8:	02070207 	.word	0x02070207
   849bc:	02070207 	.word	0x02070207
   849c0:	02070207 	.word	0x02070207
   849c4:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   849c8:	4b65      	ldr	r3, [pc, #404]	; (84b60 <udc_process_setup+0x25c>)
   849ca:	4798      	blx	r3
   849cc:	b928      	cbnz	r0, 849da <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   849ce:	4b65      	ldr	r3, [pc, #404]	; (84b64 <udc_process_setup+0x260>)
   849d0:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   849d2:	7801      	ldrb	r1, [r0, #0]
   849d4:	4b60      	ldr	r3, [pc, #384]	; (84b58 <udc_process_setup+0x254>)
   849d6:	4798      	blx	r3
   849d8:	e030      	b.n	84a3c <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   849da:	4b62      	ldr	r3, [pc, #392]	; (84b64 <udc_process_setup+0x260>)
   849dc:	681a      	ldr	r2, [r3, #0]
   849de:	2110      	movs	r1, #16
   849e0:	7091      	strb	r1, [r2, #2]
   849e2:	2102      	movs	r1, #2
   849e4:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   849e6:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   849e8:	7801      	ldrb	r1, [r0, #0]
   849ea:	4b5b      	ldr	r3, [pc, #364]	; (84b58 <udc_process_setup+0x254>)
   849ec:	4798      	blx	r3
   849ee:	e025      	b.n	84a3c <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   849f0:	4b5b      	ldr	r3, [pc, #364]	; (84b60 <udc_process_setup+0x25c>)
   849f2:	4798      	blx	r3
   849f4:	b180      	cbz	r0, 84a18 <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   849f6:	4b5b      	ldr	r3, [pc, #364]	; (84b64 <udc_process_setup+0x260>)
   849f8:	689b      	ldr	r3, [r3, #8]
   849fa:	7c5b      	ldrb	r3, [r3, #17]
   849fc:	42a3      	cmp	r3, r4
   849fe:	d996      	bls.n	8492e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84a00:	4b58      	ldr	r3, [pc, #352]	; (84b64 <udc_process_setup+0x260>)
   84a02:	691b      	ldr	r3, [r3, #16]
   84a04:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a08:	8841      	ldrh	r1, [r0, #2]
   84a0a:	4b53      	ldr	r3, [pc, #332]	; (84b58 <udc_process_setup+0x254>)
   84a0c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84a0e:	4b50      	ldr	r3, [pc, #320]	; (84b50 <udc_process_setup+0x24c>)
   84a10:	689b      	ldr	r3, [r3, #8]
   84a12:	2202      	movs	r2, #2
   84a14:	705a      	strb	r2, [r3, #1]
		break;
   84a16:	e011      	b.n	84a3c <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   84a18:	4b52      	ldr	r3, [pc, #328]	; (84b64 <udc_process_setup+0x260>)
   84a1a:	681b      	ldr	r3, [r3, #0]
   84a1c:	7c5b      	ldrb	r3, [r3, #17]
   84a1e:	42a3      	cmp	r3, r4
   84a20:	d985      	bls.n	8492e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84a22:	4b50      	ldr	r3, [pc, #320]	; (84b64 <udc_process_setup+0x260>)
   84a24:	685b      	ldr	r3, [r3, #4]
   84a26:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a2a:	8841      	ldrh	r1, [r0, #2]
   84a2c:	4b4a      	ldr	r3, [pc, #296]	; (84b58 <udc_process_setup+0x254>)
   84a2e:	4798      	blx	r3
   84a30:	e7ed      	b.n	84a0e <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84a32:	4b4c      	ldr	r3, [pc, #304]	; (84b64 <udc_process_setup+0x260>)
   84a34:	68d8      	ldr	r0, [r3, #12]
   84a36:	7801      	ldrb	r1, [r0, #0]
   84a38:	4b47      	ldr	r3, [pc, #284]	; (84b58 <udc_process_setup+0x254>)
   84a3a:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84a3c:	4b44      	ldr	r3, [pc, #272]	; (84b50 <udc_process_setup+0x24c>)
   84a3e:	88da      	ldrh	r2, [r3, #6]
   84a40:	899b      	ldrh	r3, [r3, #12]
   84a42:	4293      	cmp	r3, r2
   84a44:	f240 80d7 	bls.w	84bf6 <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84a48:	4b41      	ldr	r3, [pc, #260]	; (84b50 <udc_process_setup+0x24c>)
   84a4a:	819a      	strh	r2, [r3, #12]
   84a4c:	e0d3      	b.n	84bf6 <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   84a4e:	4b44      	ldr	r3, [pc, #272]	; (84b60 <udc_process_setup+0x25c>)
   84a50:	4798      	blx	r3
   84a52:	b988      	cbnz	r0, 84a78 <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   84a54:	4b43      	ldr	r3, [pc, #268]	; (84b64 <udc_process_setup+0x260>)
   84a56:	689b      	ldr	r3, [r3, #8]
   84a58:	7c5b      	ldrb	r3, [r3, #17]
   84a5a:	42a3      	cmp	r3, r4
   84a5c:	f67f af67 	bls.w	8492e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84a60:	4b40      	ldr	r3, [pc, #256]	; (84b64 <udc_process_setup+0x260>)
   84a62:	691b      	ldr	r3, [r3, #16]
   84a64:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a68:	8841      	ldrh	r1, [r0, #2]
   84a6a:	4b3b      	ldr	r3, [pc, #236]	; (84b58 <udc_process_setup+0x254>)
   84a6c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84a6e:	4b38      	ldr	r3, [pc, #224]	; (84b50 <udc_process_setup+0x24c>)
   84a70:	689b      	ldr	r3, [r3, #8]
   84a72:	2207      	movs	r2, #7
   84a74:	705a      	strb	r2, [r3, #1]
		break;
   84a76:	e7e1      	b.n	84a3c <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   84a78:	4b3a      	ldr	r3, [pc, #232]	; (84b64 <udc_process_setup+0x260>)
   84a7a:	681b      	ldr	r3, [r3, #0]
   84a7c:	7c5b      	ldrb	r3, [r3, #17]
   84a7e:	42a3      	cmp	r3, r4
   84a80:	f67f af55 	bls.w	8492e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84a84:	4b37      	ldr	r3, [pc, #220]	; (84b64 <udc_process_setup+0x260>)
   84a86:	685b      	ldr	r3, [r3, #4]
   84a88:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a8c:	8841      	ldrh	r1, [r0, #2]
   84a8e:	4b32      	ldr	r3, [pc, #200]	; (84b58 <udc_process_setup+0x254>)
   84a90:	4798      	blx	r3
   84a92:	e7ec      	b.n	84a6e <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84a94:	2121      	movs	r1, #33	; 0x21
   84a96:	4834      	ldr	r0, [pc, #208]	; (84b68 <udc_process_setup+0x264>)
   84a98:	4b2f      	ldr	r3, [pc, #188]	; (84b58 <udc_process_setup+0x254>)
   84a9a:	4798      	blx	r3
		break;
   84a9c:	e7ce      	b.n	84a3c <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84a9e:	b2d2      	uxtb	r2, r2
   84aa0:	2a03      	cmp	r2, #3
   84aa2:	f63f af44 	bhi.w	8492e <udc_process_setup+0x2a>
   84aa6:	e8df f002 	tbb	[pc, r2]
   84aaa:	1914      	.short	0x1914
   84aac:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84aae:	2020      	movs	r0, #32
   84ab0:	4a2e      	ldr	r2, [pc, #184]	; (84b6c <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   84ab2:	4613      	mov	r3, r2
   84ab4:	492e      	ldr	r1, [pc, #184]	; (84b70 <udc_process_setup+0x26c>)
   84ab6:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84ab8:	f813 4b01 	ldrb.w	r4, [r3], #1
   84abc:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   84ac0:	429a      	cmp	r2, r3
   84ac2:	d1f9      	bne.n	84ab8 <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84ac4:	0041      	lsls	r1, r0, #1
   84ac6:	3102      	adds	r1, #2
   84ac8:	4829      	ldr	r0, [pc, #164]	; (84b70 <udc_process_setup+0x26c>)
   84aca:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   84acc:	4b22      	ldr	r3, [pc, #136]	; (84b58 <udc_process_setup+0x254>)
   84ace:	4798      	blx	r3
   84ad0:	e7b4      	b.n	84a3c <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84ad2:	2104      	movs	r1, #4
   84ad4:	4827      	ldr	r0, [pc, #156]	; (84b74 <udc_process_setup+0x270>)
   84ad6:	4b20      	ldr	r3, [pc, #128]	; (84b58 <udc_process_setup+0x254>)
   84ad8:	4798      	blx	r3
	if (str_length) {
   84ada:	e7af      	b.n	84a3c <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84adc:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   84ade:	4a26      	ldr	r2, [pc, #152]	; (84b78 <udc_process_setup+0x274>)
   84ae0:	e7e7      	b.n	84ab2 <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84ae2:	2012      	movs	r0, #18
		str = udc_string_product_name;
   84ae4:	4a25      	ldr	r2, [pc, #148]	; (84b7c <udc_process_setup+0x278>)
   84ae6:	e7e4      	b.n	84ab2 <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84ae8:	2b01      	cmp	r3, #1
   84aea:	f47f af20 	bne.w	8492e <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   84aee:	2101      	movs	r1, #1
   84af0:	4823      	ldr	r0, [pc, #140]	; (84b80 <udc_process_setup+0x27c>)
   84af2:	4b19      	ldr	r3, [pc, #100]	; (84b58 <udc_process_setup+0x254>)
   84af4:	4798      	blx	r3
	return true;
   84af6:	e07e      	b.n	84bf6 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84af8:	2a01      	cmp	r2, #1
   84afa:	d149      	bne.n	84b90 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   84afc:	4a14      	ldr	r2, [pc, #80]	; (84b50 <udc_process_setup+0x24c>)
   84afe:	7852      	ldrb	r2, [r2, #1]
   84b00:	2a0a      	cmp	r2, #10
   84b02:	f47f af14 	bne.w	8492e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84b06:	2b01      	cmp	r3, #1
   84b08:	f47f af11 	bne.w	8492e <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   84b0c:	4b1c      	ldr	r3, [pc, #112]	; (84b80 <udc_process_setup+0x27c>)
   84b0e:	781b      	ldrb	r3, [r3, #0]
   84b10:	2b00      	cmp	r3, #0
   84b12:	f43f af0c 	beq.w	8492e <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84b16:	4b0e      	ldr	r3, [pc, #56]	; (84b50 <udc_process_setup+0x24c>)
   84b18:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84b1a:	4b1a      	ldr	r3, [pc, #104]	; (84b84 <udc_process_setup+0x280>)
   84b1c:	681d      	ldr	r5, [r3, #0]
   84b1e:	682b      	ldr	r3, [r5, #0]
   84b20:	791b      	ldrb	r3, [r3, #4]
   84b22:	42a3      	cmp	r3, r4
   84b24:	f67f af03 	bls.w	8492e <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   84b28:	2100      	movs	r1, #0
   84b2a:	4620      	mov	r0, r4
   84b2c:	4b16      	ldr	r3, [pc, #88]	; (84b88 <udc_process_setup+0x284>)
   84b2e:	4798      	blx	r3
   84b30:	2800      	cmp	r0, #0
   84b32:	f43f aefc 	beq.w	8492e <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84b36:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   84b38:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   84b3c:	68db      	ldr	r3, [r3, #12]
   84b3e:	4798      	blx	r3
   84b40:	4b12      	ldr	r3, [pc, #72]	; (84b8c <udc_process_setup+0x288>)
   84b42:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   84b44:	2101      	movs	r1, #1
   84b46:	4618      	mov	r0, r3
   84b48:	4b03      	ldr	r3, [pc, #12]	; (84b58 <udc_process_setup+0x254>)
   84b4a:	4798      	blx	r3
	return true;
   84b4c:	e053      	b.n	84bf6 <udc_process_setup+0x2f2>
   84b4e:	bf00      	nop
   84b50:	20002df4 	.word	0x20002df4
   84b54:	20000644 	.word	0x20000644
   84b58:	0008637d 	.word	0x0008637d
   84b5c:	20002282 	.word	0x20002282
   84b60:	00086315 	.word	0x00086315
   84b64:	200001d4 	.word	0x200001d4
   84b68:	0008e51c 	.word	0x0008e51c
   84b6c:	200006f4 	.word	0x200006f4
   84b70:	200005d0 	.word	0x200005d0
   84b74:	20000614 	.word	0x20000614
   84b78:	20000618 	.word	0x20000618
   84b7c:	20000630 	.word	0x20000630
   84b80:	20002287 	.word	0x20002287
   84b84:	20002288 	.word	0x20002288
   84b88:	0008472d 	.word	0x0008472d
   84b8c:	20002286 	.word	0x20002286
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84b90:	2a02      	cmp	r2, #2
   84b92:	f47f aecc 	bne.w	8492e <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   84b96:	4a93      	ldr	r2, [pc, #588]	; (84de4 <udc_process_setup+0x4e0>)
   84b98:	7852      	ldrb	r2, [r2, #1]
   84b9a:	2a00      	cmp	r2, #0
   84b9c:	f47f aec7 	bne.w	8492e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84ba0:	2b02      	cmp	r3, #2
   84ba2:	f47f aec4 	bne.w	8492e <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84ba6:	4b8f      	ldr	r3, [pc, #572]	; (84de4 <udc_process_setup+0x4e0>)
   84ba8:	7918      	ldrb	r0, [r3, #4]
   84baa:	4b8f      	ldr	r3, [pc, #572]	; (84de8 <udc_process_setup+0x4e4>)
   84bac:	4798      	blx	r3
   84bae:	4b8f      	ldr	r3, [pc, #572]	; (84dec <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84bb0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84bb2:	2102      	movs	r1, #2
   84bb4:	4618      	mov	r0, r3
   84bb6:	4b8e      	ldr	r3, [pc, #568]	; (84df0 <udc_process_setup+0x4ec>)
   84bb8:	4798      	blx	r3
	return true;
   84bba:	e01c      	b.n	84bf6 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84bbc:	f012 021f 	ands.w	r2, r2, #31
   84bc0:	f040 80b1 	bne.w	84d26 <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   84bc4:	4b87      	ldr	r3, [pc, #540]	; (84de4 <udc_process_setup+0x4e0>)
   84bc6:	785b      	ldrb	r3, [r3, #1]
   84bc8:	3b01      	subs	r3, #1
   84bca:	2b08      	cmp	r3, #8
   84bcc:	f200 80ab 	bhi.w	84d26 <udc_process_setup+0x422>
   84bd0:	e8df f013 	tbh	[pc, r3, lsl #1]
   84bd4:	00a90013 	.word	0x00a90013
   84bd8:	00a90023 	.word	0x00a90023
   84bdc:	00a90009 	.word	0x00a90009
   84be0:	00a900a9 	.word	0x00a900a9
   84be4:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   84be6:	4b7f      	ldr	r3, [pc, #508]	; (84de4 <udc_process_setup+0x4e0>)
   84be8:	88db      	ldrh	r3, [r3, #6]
   84bea:	2b00      	cmp	r3, #0
   84bec:	f47f ae9f 	bne.w	8492e <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   84bf0:	4b7c      	ldr	r3, [pc, #496]	; (84de4 <udc_process_setup+0x4e0>)
   84bf2:	4a80      	ldr	r2, [pc, #512]	; (84df4 <udc_process_setup+0x4f0>)
   84bf4:	611a      	str	r2, [r3, #16]
			return true;
   84bf6:	2301      	movs	r3, #1
   84bf8:	e6a8      	b.n	8494c <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   84bfa:	4b7a      	ldr	r3, [pc, #488]	; (84de4 <udc_process_setup+0x4e0>)
   84bfc:	88db      	ldrh	r3, [r3, #6]
   84bfe:	2b00      	cmp	r3, #0
   84c00:	f47f ae95 	bne.w	8492e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84c04:	4b77      	ldr	r3, [pc, #476]	; (84de4 <udc_process_setup+0x4e0>)
   84c06:	885b      	ldrh	r3, [r3, #2]
   84c08:	2b01      	cmp	r3, #1
   84c0a:	f47f ae90 	bne.w	8492e <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84c0e:	4a7a      	ldr	r2, [pc, #488]	; (84df8 <udc_process_setup+0x4f4>)
   84c10:	8813      	ldrh	r3, [r2, #0]
   84c12:	f023 0302 	bic.w	r3, r3, #2
   84c16:	8013      	strh	r3, [r2, #0]
		return true;
   84c18:	e7ed      	b.n	84bf6 <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   84c1a:	4b72      	ldr	r3, [pc, #456]	; (84de4 <udc_process_setup+0x4e0>)
   84c1c:	88db      	ldrh	r3, [r3, #6]
   84c1e:	2b00      	cmp	r3, #0
   84c20:	f47f ae85 	bne.w	8492e <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   84c24:	4b6f      	ldr	r3, [pc, #444]	; (84de4 <udc_process_setup+0x4e0>)
   84c26:	885b      	ldrh	r3, [r3, #2]
   84c28:	2b02      	cmp	r3, #2
   84c2a:	f47f ae80 	bne.w	8492e <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   84c2e:	4b73      	ldr	r3, [pc, #460]	; (84dfc <udc_process_setup+0x4f8>)
   84c30:	4798      	blx	r3
   84c32:	2800      	cmp	r0, #0
   84c34:	f43f ae7b 	beq.w	8492e <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84c38:	4b6a      	ldr	r3, [pc, #424]	; (84de4 <udc_process_setup+0x4e0>)
   84c3a:	791b      	ldrb	r3, [r3, #4]
   84c3c:	2b00      	cmp	r3, #0
   84c3e:	f47f ae76 	bne.w	8492e <udc_process_setup+0x2a>
		udc_reset();
   84c42:	4b6f      	ldr	r3, [pc, #444]	; (84e00 <udc_process_setup+0x4fc>)
   84c44:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84c46:	4b67      	ldr	r3, [pc, #412]	; (84de4 <udc_process_setup+0x4e0>)
   84c48:	889b      	ldrh	r3, [r3, #4]
   84c4a:	0a1b      	lsrs	r3, r3, #8
   84c4c:	3b01      	subs	r3, #1
   84c4e:	2b03      	cmp	r3, #3
   84c50:	f200 80b7 	bhi.w	84dc2 <udc_process_setup+0x4be>
   84c54:	e8df f003 	tbb	[pc, r3]
   84c58:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84c5c:	4b61      	ldr	r3, [pc, #388]	; (84de4 <udc_process_setup+0x4e0>)
   84c5e:	4a69      	ldr	r2, [pc, #420]	; (84e04 <udc_process_setup+0x500>)
   84c60:	611a      	str	r2, [r3, #16]
			return true;
   84c62:	e7c8      	b.n	84bf6 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84c64:	4b5f      	ldr	r3, [pc, #380]	; (84de4 <udc_process_setup+0x4e0>)
   84c66:	4a68      	ldr	r2, [pc, #416]	; (84e08 <udc_process_setup+0x504>)
   84c68:	611a      	str	r2, [r3, #16]
			return true;
   84c6a:	e7c4      	b.n	84bf6 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84c6c:	4b5d      	ldr	r3, [pc, #372]	; (84de4 <udc_process_setup+0x4e0>)
   84c6e:	4a67      	ldr	r2, [pc, #412]	; (84e0c <udc_process_setup+0x508>)
   84c70:	611a      	str	r2, [r3, #16]
			return true;
   84c72:	e7c0      	b.n	84bf6 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84c74:	4b5b      	ldr	r3, [pc, #364]	; (84de4 <udc_process_setup+0x4e0>)
   84c76:	4a66      	ldr	r2, [pc, #408]	; (84e10 <udc_process_setup+0x50c>)
   84c78:	611a      	str	r2, [r3, #16]
			return true;
   84c7a:	e7bc      	b.n	84bf6 <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   84c7c:	4b59      	ldr	r3, [pc, #356]	; (84de4 <udc_process_setup+0x4e0>)
   84c7e:	88db      	ldrh	r3, [r3, #6]
   84c80:	2b00      	cmp	r3, #0
   84c82:	f47f ae54 	bne.w	8492e <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   84c86:	4b63      	ldr	r3, [pc, #396]	; (84e14 <udc_process_setup+0x510>)
   84c88:	4798      	blx	r3
   84c8a:	2800      	cmp	r0, #0
   84c8c:	f43f ae4f 	beq.w	8492e <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   84c90:	4b5a      	ldr	r3, [pc, #360]	; (84dfc <udc_process_setup+0x4f8>)
   84c92:	4798      	blx	r3
   84c94:	2800      	cmp	r0, #0
   84c96:	d034      	beq.n	84d02 <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   84c98:	4b5f      	ldr	r3, [pc, #380]	; (84e18 <udc_process_setup+0x514>)
   84c9a:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84c9c:	7c5a      	ldrb	r2, [r3, #17]
   84c9e:	4b51      	ldr	r3, [pc, #324]	; (84de4 <udc_process_setup+0x4e0>)
   84ca0:	789b      	ldrb	r3, [r3, #2]
   84ca2:	429a      	cmp	r2, r3
   84ca4:	f4ff ae43 	bcc.w	8492e <udc_process_setup+0x2a>
	udc_reset();
   84ca8:	4b55      	ldr	r3, [pc, #340]	; (84e00 <udc_process_setup+0x4fc>)
   84caa:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84cac:	4b4d      	ldr	r3, [pc, #308]	; (84de4 <udc_process_setup+0x4e0>)
   84cae:	789b      	ldrb	r3, [r3, #2]
   84cb0:	4a5a      	ldr	r2, [pc, #360]	; (84e1c <udc_process_setup+0x518>)
   84cb2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   84cb4:	2b00      	cmp	r3, #0
   84cb6:	d09e      	beq.n	84bf6 <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   84cb8:	4b50      	ldr	r3, [pc, #320]	; (84dfc <udc_process_setup+0x4f8>)
   84cba:	4798      	blx	r3
   84cbc:	2800      	cmp	r0, #0
   84cbe:	d028      	beq.n	84d12 <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84cc0:	4b56      	ldr	r3, [pc, #344]	; (84e1c <udc_process_setup+0x518>)
   84cc2:	781b      	ldrb	r3, [r3, #0]
   84cc4:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   84cc8:	3a01      	subs	r2, #1
   84cca:	4b53      	ldr	r3, [pc, #332]	; (84e18 <udc_process_setup+0x514>)
   84ccc:	691b      	ldr	r3, [r3, #16]
   84cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84cd2:	4a53      	ldr	r2, [pc, #332]	; (84e20 <udc_process_setup+0x51c>)
   84cd4:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84cd6:	681b      	ldr	r3, [r3, #0]
   84cd8:	791b      	ldrb	r3, [r3, #4]
   84cda:	2b00      	cmp	r3, #0
   84cdc:	d08b      	beq.n	84bf6 <udc_process_setup+0x2f2>
   84cde:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   84ce0:	4626      	mov	r6, r4
   84ce2:	4d50      	ldr	r5, [pc, #320]	; (84e24 <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84ce4:	4f4e      	ldr	r7, [pc, #312]	; (84e20 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   84ce6:	4631      	mov	r1, r6
   84ce8:	b2e0      	uxtb	r0, r4
   84cea:	47a8      	blx	r5
   84cec:	2800      	cmp	r0, #0
   84cee:	f43f ae1e 	beq.w	8492e <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84cf2:	3401      	adds	r4, #1
   84cf4:	683b      	ldr	r3, [r7, #0]
   84cf6:	681b      	ldr	r3, [r3, #0]
   84cf8:	791a      	ldrb	r2, [r3, #4]
   84cfa:	b2e3      	uxtb	r3, r4
   84cfc:	429a      	cmp	r2, r3
   84cfe:	d8f2      	bhi.n	84ce6 <udc_process_setup+0x3e2>
   84d00:	e779      	b.n	84bf6 <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   84d02:	4b45      	ldr	r3, [pc, #276]	; (84e18 <udc_process_setup+0x514>)
   84d04:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84d06:	7c5a      	ldrb	r2, [r3, #17]
   84d08:	4b36      	ldr	r3, [pc, #216]	; (84de4 <udc_process_setup+0x4e0>)
   84d0a:	789b      	ldrb	r3, [r3, #2]
   84d0c:	429a      	cmp	r2, r3
   84d0e:	d2cb      	bcs.n	84ca8 <udc_process_setup+0x3a4>
   84d10:	e60d      	b.n	8492e <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84d12:	4b42      	ldr	r3, [pc, #264]	; (84e1c <udc_process_setup+0x518>)
   84d14:	781b      	ldrb	r3, [r3, #0]
   84d16:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   84d1a:	3a01      	subs	r2, #1
   84d1c:	4b3e      	ldr	r3, [pc, #248]	; (84e18 <udc_process_setup+0x514>)
   84d1e:	685b      	ldr	r3, [r3, #4]
   84d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84d24:	e7d5      	b.n	84cd2 <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84d26:	2a01      	cmp	r2, #1
   84d28:	d01a      	beq.n	84d60 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84d2a:	2a02      	cmp	r2, #2
   84d2c:	f47f adff 	bne.w	8492e <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   84d30:	4b2c      	ldr	r3, [pc, #176]	; (84de4 <udc_process_setup+0x4e0>)
   84d32:	785b      	ldrb	r3, [r3, #1]
   84d34:	2b01      	cmp	r3, #1
   84d36:	d031      	beq.n	84d9c <udc_process_setup+0x498>
   84d38:	2b03      	cmp	r3, #3
   84d3a:	f47f adf8 	bne.w	8492e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   84d3e:	4a29      	ldr	r2, [pc, #164]	; (84de4 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84d40:	88d3      	ldrh	r3, [r2, #6]
   84d42:	8852      	ldrh	r2, [r2, #2]
   84d44:	4313      	orrs	r3, r2
   84d46:	b29b      	uxth	r3, r3
   84d48:	2b00      	cmp	r3, #0
   84d4a:	f47f adf0 	bne.w	8492e <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84d4e:	4c25      	ldr	r4, [pc, #148]	; (84de4 <udc_process_setup+0x4e0>)
   84d50:	7920      	ldrb	r0, [r4, #4]
   84d52:	4b35      	ldr	r3, [pc, #212]	; (84e28 <udc_process_setup+0x524>)
   84d54:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84d56:	7920      	ldrb	r0, [r4, #4]
   84d58:	4b34      	ldr	r3, [pc, #208]	; (84e2c <udc_process_setup+0x528>)
   84d5a:	4798      	blx	r3
   84d5c:	4603      	mov	r3, r0
   84d5e:	e02c      	b.n	84dba <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   84d60:	4b20      	ldr	r3, [pc, #128]	; (84de4 <udc_process_setup+0x4e0>)
   84d62:	785b      	ldrb	r3, [r3, #1]
   84d64:	2b0b      	cmp	r3, #11
   84d66:	f47f ade2 	bne.w	8492e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   84d6a:	4b1e      	ldr	r3, [pc, #120]	; (84de4 <udc_process_setup+0x4e0>)
   84d6c:	88db      	ldrh	r3, [r3, #6]
   84d6e:	2b00      	cmp	r3, #0
   84d70:	f47f addd 	bne.w	8492e <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   84d74:	4b29      	ldr	r3, [pc, #164]	; (84e1c <udc_process_setup+0x518>)
   84d76:	781b      	ldrb	r3, [r3, #0]
   84d78:	2b00      	cmp	r3, #0
   84d7a:	f43f add8 	beq.w	8492e <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84d7e:	4b19      	ldr	r3, [pc, #100]	; (84de4 <udc_process_setup+0x4e0>)
   84d80:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84d82:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   84d84:	4620      	mov	r0, r4
   84d86:	4b2a      	ldr	r3, [pc, #168]	; (84e30 <udc_process_setup+0x52c>)
   84d88:	4798      	blx	r3
   84d8a:	2800      	cmp	r0, #0
   84d8c:	f43f adcf 	beq.w	8492e <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   84d90:	b2e9      	uxtb	r1, r5
   84d92:	4620      	mov	r0, r4
   84d94:	4b23      	ldr	r3, [pc, #140]	; (84e24 <udc_process_setup+0x520>)
   84d96:	4798      	blx	r3
   84d98:	4603      	mov	r3, r0
   84d9a:	e00e      	b.n	84dba <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   84d9c:	4a11      	ldr	r2, [pc, #68]	; (84de4 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84d9e:	88d3      	ldrh	r3, [r2, #6]
   84da0:	8852      	ldrh	r2, [r2, #2]
   84da2:	4313      	orrs	r3, r2
   84da4:	b29b      	uxth	r3, r3
   84da6:	2b00      	cmp	r3, #0
   84da8:	f47f adc1 	bne.w	8492e <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84dac:	4b0d      	ldr	r3, [pc, #52]	; (84de4 <udc_process_setup+0x4e0>)
   84dae:	7918      	ldrb	r0, [r3, #4]
   84db0:	4b20      	ldr	r3, [pc, #128]	; (84e34 <udc_process_setup+0x530>)
   84db2:	4798      	blx	r3
   84db4:	4603      	mov	r3, r0
   84db6:	e000      	b.n	84dba <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84db8:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   84dba:	2b00      	cmp	r3, #0
   84dbc:	f47f adc6 	bne.w	8494c <udc_process_setup+0x48>
   84dc0:	e5b5      	b.n	8492e <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84dc2:	2300      	movs	r3, #0
   84dc4:	e7f9      	b.n	84dba <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   84dc6:	4b15      	ldr	r3, [pc, #84]	; (84e1c <udc_process_setup+0x518>)
   84dc8:	781b      	ldrb	r3, [r3, #0]
   84dca:	2b00      	cmp	r3, #0
   84dcc:	d07c      	beq.n	84ec8 <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84dce:	4b05      	ldr	r3, [pc, #20]	; (84de4 <udc_process_setup+0x4e0>)
   84dd0:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84dd2:	4b13      	ldr	r3, [pc, #76]	; (84e20 <udc_process_setup+0x51c>)
   84dd4:	681d      	ldr	r5, [r3, #0]
   84dd6:	682b      	ldr	r3, [r5, #0]
   84dd8:	791b      	ldrb	r3, [r3, #4]
   84dda:	42a3      	cmp	r3, r4
   84ddc:	d82c      	bhi.n	84e38 <udc_process_setup+0x534>
	return false;
   84dde:	2300      	movs	r3, #0
   84de0:	e5b4      	b.n	8494c <udc_process_setup+0x48>
   84de2:	bf00      	nop
   84de4:	20002df4 	.word	0x20002df4
   84de8:	000863e1 	.word	0x000863e1
   84dec:	20002284 	.word	0x20002284
   84df0:	0008637d 	.word	0x0008637d
   84df4:	00084715 	.word	0x00084715
   84df8:	20002282 	.word	0x20002282
   84dfc:	00086315 	.word	0x00086315
   84e00:	00084879 	.word	0x00084879
   84e04:	000869c9 	.word	0x000869c9
   84e08:	000869ed 	.word	0x000869ed
   84e0c:	00086a11 	.word	0x00086a11
   84e10:	00086a29 	.word	0x00086a29
   84e14:	0008634d 	.word	0x0008634d
   84e18:	200001d4 	.word	0x200001d4
   84e1c:	20002287 	.word	0x20002287
   84e20:	20002288 	.word	0x20002288
   84e24:	00084805 	.word	0x00084805
   84e28:	00086955 	.word	0x00086955
   84e2c:	00086415 	.word	0x00086415
   84e30:	0008479d 	.word	0x0008479d
   84e34:	000864d9 	.word	0x000864d9
	if (!udc_update_iface_desc(iface_num, 0)) {
   84e38:	2100      	movs	r1, #0
   84e3a:	4620      	mov	r0, r4
   84e3c:	4b23      	ldr	r3, [pc, #140]	; (84ecc <udc_process_setup+0x5c8>)
   84e3e:	4798      	blx	r3
   84e40:	2800      	cmp	r0, #0
   84e42:	f43f ad7b 	beq.w	8493c <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84e46:	686b      	ldr	r3, [r5, #4]
   84e48:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e4c:	68eb      	ldr	r3, [r5, #12]
   84e4e:	4798      	blx	r3
   84e50:	4601      	mov	r1, r0
   84e52:	4620      	mov	r0, r4
   84e54:	4b1d      	ldr	r3, [pc, #116]	; (84ecc <udc_process_setup+0x5c8>)
   84e56:	4798      	blx	r3
   84e58:	2800      	cmp	r0, #0
   84e5a:	f43f ad6f 	beq.w	8493c <udc_process_setup+0x38>
	return udi_api->setup();
   84e5e:	68ab      	ldr	r3, [r5, #8]
   84e60:	4798      	blx	r3
		if (udc_req_iface()) {
   84e62:	4603      	mov	r3, r0
   84e64:	2800      	cmp	r0, #0
   84e66:	f47f ad71 	bne.w	8494c <udc_process_setup+0x48>
   84e6a:	e567      	b.n	8493c <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   84e6c:	4b18      	ldr	r3, [pc, #96]	; (84ed0 <udc_process_setup+0x5cc>)
   84e6e:	781b      	ldrb	r3, [r3, #0]
   84e70:	b323      	cbz	r3, 84ebc <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e72:	4b18      	ldr	r3, [pc, #96]	; (84ed4 <udc_process_setup+0x5d0>)
   84e74:	681a      	ldr	r2, [r3, #0]
   84e76:	6813      	ldr	r3, [r2, #0]
   84e78:	791b      	ldrb	r3, [r3, #4]
   84e7a:	b30b      	cbz	r3, 84ec0 <udc_process_setup+0x5bc>
   84e7c:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e7e:	4e13      	ldr	r6, [pc, #76]	; (84ecc <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e80:	4f14      	ldr	r7, [pc, #80]	; (84ed4 <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84e82:	b2ec      	uxtb	r4, r5
   84e84:	6853      	ldr	r3, [r2, #4]
   84e86:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   84e8e:	4798      	blx	r3
   84e90:	4601      	mov	r1, r0
   84e92:	4620      	mov	r0, r4
   84e94:	47b0      	blx	r6
   84e96:	4603      	mov	r3, r0
   84e98:	2800      	cmp	r0, #0
   84e9a:	f43f ad57 	beq.w	8494c <udc_process_setup+0x48>
		if (udi_api->setup()) {
   84e9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   84ea2:	4798      	blx	r3
   84ea4:	4603      	mov	r3, r0
   84ea6:	2800      	cmp	r0, #0
   84ea8:	f47f ad50 	bne.w	8494c <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84eac:	683a      	ldr	r2, [r7, #0]
   84eae:	3501      	adds	r5, #1
   84eb0:	6811      	ldr	r1, [r2, #0]
   84eb2:	7908      	ldrb	r0, [r1, #4]
   84eb4:	b2e9      	uxtb	r1, r5
   84eb6:	4288      	cmp	r0, r1
   84eb8:	d8e3      	bhi.n	84e82 <udc_process_setup+0x57e>
   84eba:	e547      	b.n	8494c <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   84ebc:	2300      	movs	r3, #0
   84ebe:	e545      	b.n	8494c <udc_process_setup+0x48>
	return false;
   84ec0:	2300      	movs	r3, #0
   84ec2:	e543      	b.n	8494c <udc_process_setup+0x48>
			return false; // Error from USB host
   84ec4:	2300      	movs	r3, #0
   84ec6:	e541      	b.n	8494c <udc_process_setup+0x48>
	return false;
   84ec8:	2300      	movs	r3, #0
   84eca:	e53f      	b.n	8494c <udc_process_setup+0x48>
   84ecc:	0008472d 	.word	0x0008472d
   84ed0:	20002287 	.word	0x20002287
   84ed4:	20002288 	.word	0x20002288

00084ed8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84ed8:	4b0b      	ldr	r3, [pc, #44]	; (84f08 <cpu_irq_enter_critical+0x30>)
   84eda:	681b      	ldr	r3, [r3, #0]
   84edc:	b92b      	cbnz	r3, 84eea <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84ede:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   84ee2:	b13b      	cbz	r3, 84ef4 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84ee4:	2200      	movs	r2, #0
   84ee6:	4b09      	ldr	r3, [pc, #36]	; (84f0c <cpu_irq_enter_critical+0x34>)
   84ee8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84eea:	4a07      	ldr	r2, [pc, #28]	; (84f08 <cpu_irq_enter_critical+0x30>)
   84eec:	6813      	ldr	r3, [r2, #0]
   84eee:	3301      	adds	r3, #1
   84ef0:	6013      	str	r3, [r2, #0]
   84ef2:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   84ef4:	b672      	cpsid	i
   84ef6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84efa:	2200      	movs	r2, #0
   84efc:	4b04      	ldr	r3, [pc, #16]	; (84f10 <cpu_irq_enter_critical+0x38>)
   84efe:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   84f00:	2201      	movs	r2, #1
   84f02:	4b02      	ldr	r3, [pc, #8]	; (84f0c <cpu_irq_enter_critical+0x34>)
   84f04:	701a      	strb	r2, [r3, #0]
   84f06:	e7f0      	b.n	84eea <cpu_irq_enter_critical+0x12>
   84f08:	20002290 	.word	0x20002290
   84f0c:	20002294 	.word	0x20002294
   84f10:	200006ee 	.word	0x200006ee

00084f14 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84f14:	4b07      	ldr	r3, [pc, #28]	; (84f34 <cpu_irq_leave_critical+0x20>)
   84f16:	681a      	ldr	r2, [r3, #0]
   84f18:	3a01      	subs	r2, #1
   84f1a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84f1c:	681b      	ldr	r3, [r3, #0]
   84f1e:	b943      	cbnz	r3, 84f32 <cpu_irq_leave_critical+0x1e>
   84f20:	4b05      	ldr	r3, [pc, #20]	; (84f38 <cpu_irq_leave_critical+0x24>)
   84f22:	781b      	ldrb	r3, [r3, #0]
   84f24:	b12b      	cbz	r3, 84f32 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84f26:	2201      	movs	r2, #1
   84f28:	4b04      	ldr	r3, [pc, #16]	; (84f3c <cpu_irq_leave_critical+0x28>)
   84f2a:	701a      	strb	r2, [r3, #0]
   84f2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84f30:	b662      	cpsie	i
   84f32:	4770      	bx	lr
   84f34:	20002290 	.word	0x20002290
   84f38:	20002294 	.word	0x20002294
   84f3c:	200006ee 	.word	0x200006ee

00084f40 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   84f44:	b980      	cbnz	r0, 84f68 <_read+0x28>
   84f46:	460c      	mov	r4, r1
   84f48:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   84f4a:	2a00      	cmp	r2, #0
   84f4c:	dd0f      	ble.n	84f6e <_read+0x2e>
   84f4e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   84f50:	4e08      	ldr	r6, [pc, #32]	; (84f74 <_read+0x34>)
   84f52:	4d09      	ldr	r5, [pc, #36]	; (84f78 <_read+0x38>)
   84f54:	6830      	ldr	r0, [r6, #0]
   84f56:	4621      	mov	r1, r4
   84f58:	682b      	ldr	r3, [r5, #0]
   84f5a:	4798      	blx	r3
		ptr++;
   84f5c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   84f5e:	42bc      	cmp	r4, r7
   84f60:	d1f8      	bne.n	84f54 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   84f62:	4640      	mov	r0, r8
   84f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84f68:	f04f 38ff 	mov.w	r8, #4294967295
   84f6c:	e7f9      	b.n	84f62 <_read+0x22>
	for (; len > 0; --len) {
   84f6e:	4680      	mov	r8, r0
   84f70:	e7f7      	b.n	84f62 <_read+0x22>
   84f72:	bf00      	nop
   84f74:	20002df0 	.word	0x20002df0
   84f78:	20002de8 	.word	0x20002de8

00084f7c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84f7c:	3801      	subs	r0, #1
   84f7e:	2802      	cmp	r0, #2
   84f80:	d815      	bhi.n	84fae <_write+0x32>
{
   84f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84f86:	460e      	mov	r6, r1
   84f88:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   84f8a:	b19a      	cbz	r2, 84fb4 <_write+0x38>
   84f8c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84f8e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 84fc8 <_write+0x4c>
   84f92:	4f0c      	ldr	r7, [pc, #48]	; (84fc4 <_write+0x48>)
   84f94:	f8d8 0000 	ldr.w	r0, [r8]
   84f98:	f815 1b01 	ldrb.w	r1, [r5], #1
   84f9c:	683b      	ldr	r3, [r7, #0]
   84f9e:	4798      	blx	r3
   84fa0:	2800      	cmp	r0, #0
   84fa2:	db0a      	blt.n	84fba <_write+0x3e>
   84fa4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   84fa6:	3c01      	subs	r4, #1
   84fa8:	d1f4      	bne.n	84f94 <_write+0x18>
   84faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84fae:	f04f 30ff 	mov.w	r0, #4294967295
   84fb2:	4770      	bx	lr
	for (; len != 0; --len) {
   84fb4:	4610      	mov	r0, r2
   84fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   84fba:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   84fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84fc2:	bf00      	nop
   84fc4:	20002dec 	.word	0x20002dec
   84fc8:	20002df0 	.word	0x20002df0

00084fcc <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   84fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84fce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84fd2:	2006      	movs	r0, #6
   84fd4:	4c17      	ldr	r4, [pc, #92]	; (85034 <iopins_normal+0x68>)
   84fd6:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84fd8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84fdc:	2007      	movs	r0, #7
   84fde:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   84fe0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84fe4:	201d      	movs	r0, #29
   84fe6:	47a0      	blx	r4
	board_power(0);
   84fe8:	201d      	movs	r0, #29
   84fea:	4b13      	ldr	r3, [pc, #76]	; (85038 <iopins_normal+0x6c>)
   84fec:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   84fee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84ff2:	2008      	movs	r0, #8
   84ff4:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   84ff6:	2008      	movs	r0, #8
   84ff8:	4e10      	ldr	r6, [pc, #64]	; (8503c <iopins_normal+0x70>)
   84ffa:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   84ffc:	4f10      	ldr	r7, [pc, #64]	; (85040 <iopins_normal+0x74>)
   84ffe:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   85002:	21ff      	movs	r1, #255	; 0xff
   85004:	4638      	mov	r0, r7
   85006:	4d0f      	ldr	r5, [pc, #60]	; (85044 <iopins_normal+0x78>)
   85008:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   8500a:	21ff      	movs	r1, #255	; 0xff
   8500c:	4638      	mov	r0, r7
   8500e:	4b0e      	ldr	r3, [pc, #56]	; (85048 <iopins_normal+0x7c>)
   85010:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   85012:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85016:	2035      	movs	r0, #53	; 0x35
   85018:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   8501a:	2035      	movs	r0, #53	; 0x35
   8501c:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8501e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   85022:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   85026:	4809      	ldr	r0, [pc, #36]	; (8504c <iopins_normal+0x80>)
   85028:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   8502a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8502e:	201b      	movs	r0, #27
   85030:	47a0      	blx	r4
   85032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85034:	000851ed 	.word	0x000851ed
   85038:	000851d1 	.word	0x000851d1
   8503c:	000851b7 	.word	0x000851b7
   85040:	400e0e00 	.word	0x400e0e00
   85044:	000852bd 	.word	0x000852bd
   85048:	00085189 	.word	0x00085189
   8504c:	400e0c00 	.word	0x400e0c00

00085050 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   85050:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   85052:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85056:	4b05      	ldr	r3, [pc, #20]	; (8506c <board_init+0x1c>)
   85058:	605a      	str	r2, [r3, #4]
   8505a:	200a      	movs	r0, #10
   8505c:	4c04      	ldr	r4, [pc, #16]	; (85070 <board_init+0x20>)
   8505e:	47a0      	blx	r4
   85060:	200b      	movs	r0, #11
   85062:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   85064:	4b03      	ldr	r3, [pc, #12]	; (85074 <board_init+0x24>)
   85066:	4798      	blx	r3
   85068:	bd10      	pop	{r4, pc}
   8506a:	bf00      	nop
   8506c:	400e1250 	.word	0x400e1250
   85070:	00085531 	.word	0x00085531
   85074:	00084fcd 	.word	0x00084fcd

00085078 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   85078:	b510      	push	{r4, lr}
   8507a:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8507c:	2806      	cmp	r0, #6
   8507e:	d002      	beq.n	85086 <LED_Off+0xe>
   85080:	2c07      	cmp	r4, #7
   85082:	d004      	beq.n	8508e <LED_Off+0x16>
   85084:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   85086:	2006      	movs	r0, #6
   85088:	4b03      	ldr	r3, [pc, #12]	; (85098 <LED_Off+0x20>)
   8508a:	4798      	blx	r3
   8508c:	e7f8      	b.n	85080 <LED_Off+0x8>
   8508e:	2007      	movs	r0, #7
   85090:	4b01      	ldr	r3, [pc, #4]	; (85098 <LED_Off+0x20>)
   85092:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   85094:	e7f6      	b.n	85084 <LED_Off+0xc>
   85096:	bf00      	nop
   85098:	000851d1 	.word	0x000851d1

0008509c <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   8509c:	b510      	push	{r4, lr}
   8509e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   850a0:	2806      	cmp	r0, #6
   850a2:	d002      	beq.n	850aa <LED_On+0xe>
   850a4:	2c07      	cmp	r4, #7
   850a6:	d004      	beq.n	850b2 <LED_On+0x16>
   850a8:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   850aa:	2006      	movs	r0, #6
   850ac:	4b03      	ldr	r3, [pc, #12]	; (850bc <LED_On+0x20>)
   850ae:	4798      	blx	r3
   850b0:	e7f8      	b.n	850a4 <LED_On+0x8>
   850b2:	2007      	movs	r0, #7
   850b4:	4b01      	ldr	r3, [pc, #4]	; (850bc <LED_On+0x20>)
   850b6:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   850b8:	e7f6      	b.n	850a8 <LED_On+0xc>
   850ba:	bf00      	nop
   850bc:	000851b7 	.word	0x000851b7

000850c0 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   850c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850c8:	670a      	str	r2, [r1, #112]	; 0x70
   850ca:	4770      	bx	lr

000850cc <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   850cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850d4:	674a      	str	r2, [r1, #116]	; 0x74
   850d6:	4770      	bx	lr

000850d8 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   850d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850e0:	678a      	str	r2, [r1, #120]	; 0x78
   850e2:	4770      	bx	lr

000850e4 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   850e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850ec:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   850f0:	4770      	bx	lr

000850f2 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   850f2:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   850f4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   850f8:	d016      	beq.n	85128 <pio_set_peripheral+0x36>
   850fa:	d80b      	bhi.n	85114 <pio_set_peripheral+0x22>
   850fc:	b149      	cbz	r1, 85112 <pio_set_peripheral+0x20>
   850fe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   85102:	d105      	bne.n	85110 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   85104:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   85106:	6f01      	ldr	r1, [r0, #112]	; 0x70
   85108:	400b      	ands	r3, r1
   8510a:	ea23 0302 	bic.w	r3, r3, r2
   8510e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   85110:	6042      	str	r2, [r0, #4]
   85112:	4770      	bx	lr
	switch (ul_type) {
   85114:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   85118:	d0fb      	beq.n	85112 <pio_set_peripheral+0x20>
   8511a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8511e:	d0f8      	beq.n	85112 <pio_set_peripheral+0x20>
   85120:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   85124:	d1f4      	bne.n	85110 <pio_set_peripheral+0x1e>
   85126:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   85128:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8512a:	4313      	orrs	r3, r2
   8512c:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8512e:	e7ef      	b.n	85110 <pio_set_peripheral+0x1e>

00085130 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   85130:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   85132:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   85136:	bf14      	ite	ne
   85138:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8513a:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8513c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   85140:	bf14      	ite	ne
   85142:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   85144:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   85146:	f012 0f02 	tst.w	r2, #2
   8514a:	d107      	bne.n	8515c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8514c:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   85150:	bf18      	it	ne
   85152:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   85156:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   85158:	6001      	str	r1, [r0, #0]
   8515a:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8515c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   85160:	e7f9      	b.n	85156 <pio_set_input+0x26>

00085162 <pio_set_output>:
{
   85162:	b410      	push	{r4}
   85164:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   85166:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   85168:	b944      	cbnz	r4, 8517c <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8516a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8516c:	b143      	cbz	r3, 85180 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8516e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   85170:	b942      	cbnz	r2, 85184 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   85172:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   85174:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   85176:	6001      	str	r1, [r0, #0]
}
   85178:	bc10      	pop	{r4}
   8517a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8517c:	6641      	str	r1, [r0, #100]	; 0x64
   8517e:	e7f5      	b.n	8516c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   85180:	6541      	str	r1, [r0, #84]	; 0x54
   85182:	e7f5      	b.n	85170 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   85184:	6301      	str	r1, [r0, #48]	; 0x30
   85186:	e7f5      	b.n	85174 <pio_set_output+0x12>

00085188 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   85188:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   8518c:	4770      	bx	lr

0008518e <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   8518e:	6381      	str	r1, [r0, #56]	; 0x38
   85190:	4770      	bx	lr

00085192 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   85192:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   85194:	4770      	bx	lr

00085196 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   85196:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   85198:	4770      	bx	lr

0008519a <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8519a:	0943      	lsrs	r3, r0, #5
   8519c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851a0:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851a4:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   851a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   851a8:	f000 001f 	and.w	r0, r0, #31
   851ac:	fa23 f000 	lsr.w	r0, r3, r0
}
   851b0:	f000 0001 	and.w	r0, r0, #1
   851b4:	4770      	bx	lr

000851b6 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851b6:	0943      	lsrs	r3, r0, #5
   851b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851bc:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851c0:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   851c2:	f000 001f 	and.w	r0, r0, #31
   851c6:	2201      	movs	r2, #1
   851c8:	fa02 f000 	lsl.w	r0, r2, r0
   851cc:	6318      	str	r0, [r3, #48]	; 0x30
   851ce:	4770      	bx	lr

000851d0 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851d0:	0943      	lsrs	r3, r0, #5
   851d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851d6:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851da:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   851dc:	f000 001f 	and.w	r0, r0, #31
   851e0:	2201      	movs	r2, #1
   851e2:	fa02 f000 	lsl.w	r0, r2, r0
   851e6:	6358      	str	r0, [r3, #52]	; 0x34
   851e8:	4770      	bx	lr
	...

000851ec <pio_configure_pin>:
{
   851ec:	b570      	push	{r4, r5, r6, lr}
   851ee:	b082      	sub	sp, #8
   851f0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851f2:	0943      	lsrs	r3, r0, #5
   851f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851f8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851fc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   851fe:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   85202:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85206:	d031      	beq.n	8526c <pio_configure_pin+0x80>
   85208:	d816      	bhi.n	85238 <pio_configure_pin+0x4c>
   8520a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8520e:	d01b      	beq.n	85248 <pio_configure_pin+0x5c>
   85210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85214:	d116      	bne.n	85244 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   85216:	f000 001f 	and.w	r0, r0, #31
   8521a:	2601      	movs	r6, #1
   8521c:	4086      	lsls	r6, r0
   8521e:	4632      	mov	r2, r6
   85220:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85224:	4620      	mov	r0, r4
   85226:	4b22      	ldr	r3, [pc, #136]	; (852b0 <pio_configure_pin+0xc4>)
   85228:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8522a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8522e:	bf14      	ite	ne
   85230:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85232:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   85234:	2001      	movs	r0, #1
   85236:	e017      	b.n	85268 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   85238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8523c:	d021      	beq.n	85282 <pio_configure_pin+0x96>
   8523e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85242:	d01e      	beq.n	85282 <pio_configure_pin+0x96>
		return 0;
   85244:	2000      	movs	r0, #0
   85246:	e00f      	b.n	85268 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   85248:	f000 001f 	and.w	r0, r0, #31
   8524c:	2601      	movs	r6, #1
   8524e:	4086      	lsls	r6, r0
   85250:	4632      	mov	r2, r6
   85252:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85256:	4620      	mov	r0, r4
   85258:	4b15      	ldr	r3, [pc, #84]	; (852b0 <pio_configure_pin+0xc4>)
   8525a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8525c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   85260:	bf14      	ite	ne
   85262:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85264:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   85266:	2001      	movs	r0, #1
}
   85268:	b002      	add	sp, #8
   8526a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8526c:	f000 011f 	and.w	r1, r0, #31
   85270:	2601      	movs	r6, #1
   85272:	462a      	mov	r2, r5
   85274:	fa06 f101 	lsl.w	r1, r6, r1
   85278:	4620      	mov	r0, r4
   8527a:	4b0e      	ldr	r3, [pc, #56]	; (852b4 <pio_configure_pin+0xc8>)
   8527c:	4798      	blx	r3
	return 1;
   8527e:	4630      	mov	r0, r6
		break;
   85280:	e7f2      	b.n	85268 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85282:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85286:	f000 011f 	and.w	r1, r0, #31
   8528a:	2601      	movs	r6, #1
   8528c:	ea05 0306 	and.w	r3, r5, r6
   85290:	9300      	str	r3, [sp, #0]
   85292:	f3c5 0380 	ubfx	r3, r5, #2, #1
   85296:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8529a:	bf14      	ite	ne
   8529c:	2200      	movne	r2, #0
   8529e:	2201      	moveq	r2, #1
   852a0:	fa06 f101 	lsl.w	r1, r6, r1
   852a4:	4620      	mov	r0, r4
   852a6:	4c04      	ldr	r4, [pc, #16]	; (852b8 <pio_configure_pin+0xcc>)
   852a8:	47a0      	blx	r4
	return 1;
   852aa:	4630      	mov	r0, r6
		break;
   852ac:	e7dc      	b.n	85268 <pio_configure_pin+0x7c>
   852ae:	bf00      	nop
   852b0:	000850f3 	.word	0x000850f3
   852b4:	00085131 	.word	0x00085131
   852b8:	00085163 	.word	0x00085163

000852bc <pio_configure_pin_group>:
{
   852bc:	b570      	push	{r4, r5, r6, lr}
   852be:	b082      	sub	sp, #8
   852c0:	4605      	mov	r5, r0
   852c2:	460e      	mov	r6, r1
   852c4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   852c6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   852ca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   852ce:	d027      	beq.n	85320 <pio_configure_pin_group+0x64>
   852d0:	d811      	bhi.n	852f6 <pio_configure_pin_group+0x3a>
   852d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   852d6:	d016      	beq.n	85306 <pio_configure_pin_group+0x4a>
   852d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   852dc:	d111      	bne.n	85302 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   852de:	460a      	mov	r2, r1
   852e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   852e4:	4b19      	ldr	r3, [pc, #100]	; (8534c <pio_configure_pin_group+0x90>)
   852e6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   852e8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   852ec:	bf14      	ite	ne
   852ee:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   852f0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   852f2:	2001      	movs	r0, #1
   852f4:	e012      	b.n	8531c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   852f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   852fa:	d015      	beq.n	85328 <pio_configure_pin_group+0x6c>
   852fc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85300:	d012      	beq.n	85328 <pio_configure_pin_group+0x6c>
		return 0;
   85302:	2000      	movs	r0, #0
   85304:	e00a      	b.n	8531c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   85306:	460a      	mov	r2, r1
   85308:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8530c:	4b0f      	ldr	r3, [pc, #60]	; (8534c <pio_configure_pin_group+0x90>)
   8530e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85310:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   85314:	bf14      	ite	ne
   85316:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85318:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8531a:	2001      	movs	r0, #1
}
   8531c:	b002      	add	sp, #8
   8531e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   85320:	4b0b      	ldr	r3, [pc, #44]	; (85350 <pio_configure_pin_group+0x94>)
   85322:	4798      	blx	r3
	return 1;
   85324:	2001      	movs	r0, #1
		break;
   85326:	e7f9      	b.n	8531c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85328:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8532c:	f004 0301 	and.w	r3, r4, #1
   85330:	9300      	str	r3, [sp, #0]
   85332:	f3c4 0380 	ubfx	r3, r4, #2, #1
   85336:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8533a:	bf14      	ite	ne
   8533c:	2200      	movne	r2, #0
   8533e:	2201      	moveq	r2, #1
   85340:	4631      	mov	r1, r6
   85342:	4628      	mov	r0, r5
   85344:	4c03      	ldr	r4, [pc, #12]	; (85354 <pio_configure_pin_group+0x98>)
   85346:	47a0      	blx	r4
	return 1;
   85348:	2001      	movs	r0, #1
		break;
   8534a:	e7e7      	b.n	8531c <pio_configure_pin_group+0x60>
   8534c:	000850f3 	.word	0x000850f3
   85350:	00085131 	.word	0x00085131
   85354:	00085163 	.word	0x00085163

00085358 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   85358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8535c:	4604      	mov	r4, r0
   8535e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   85360:	4b0e      	ldr	r3, [pc, #56]	; (8539c <pio_handler_process+0x44>)
   85362:	4798      	blx	r3
   85364:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   85366:	4620      	mov	r0, r4
   85368:	4b0d      	ldr	r3, [pc, #52]	; (853a0 <pio_handler_process+0x48>)
   8536a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8536c:	4005      	ands	r5, r0
   8536e:	d013      	beq.n	85398 <pio_handler_process+0x40>
   85370:	4c0c      	ldr	r4, [pc, #48]	; (853a4 <pio_handler_process+0x4c>)
   85372:	f104 0660 	add.w	r6, r4, #96	; 0x60
   85376:	e003      	b.n	85380 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   85378:	42b4      	cmp	r4, r6
   8537a:	d00d      	beq.n	85398 <pio_handler_process+0x40>
   8537c:	3410      	adds	r4, #16
		while (status != 0) {
   8537e:	b15d      	cbz	r5, 85398 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   85380:	6820      	ldr	r0, [r4, #0]
   85382:	4540      	cmp	r0, r8
   85384:	d1f8      	bne.n	85378 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   85386:	6861      	ldr	r1, [r4, #4]
   85388:	4229      	tst	r1, r5
   8538a:	d0f5      	beq.n	85378 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8538c:	68e3      	ldr	r3, [r4, #12]
   8538e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   85390:	6863      	ldr	r3, [r4, #4]
   85392:	ea25 0503 	bic.w	r5, r5, r3
   85396:	e7ef      	b.n	85378 <pio_handler_process+0x20>
   85398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8539c:	00085193 	.word	0x00085193
   853a0:	00085197 	.word	0x00085197
   853a4:	20002298 	.word	0x20002298

000853a8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   853a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   853aa:	210a      	movs	r1, #10
   853ac:	4801      	ldr	r0, [pc, #4]	; (853b4 <PIOA_Handler+0xc>)
   853ae:	4b02      	ldr	r3, [pc, #8]	; (853b8 <PIOA_Handler+0x10>)
   853b0:	4798      	blx	r3
   853b2:	bd08      	pop	{r3, pc}
   853b4:	400e0c00 	.word	0x400e0c00
   853b8:	00085359 	.word	0x00085359

000853bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   853bc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   853be:	210b      	movs	r1, #11
   853c0:	4801      	ldr	r0, [pc, #4]	; (853c8 <PIOB_Handler+0xc>)
   853c2:	4b02      	ldr	r3, [pc, #8]	; (853cc <PIOB_Handler+0x10>)
   853c4:	4798      	blx	r3
   853c6:	bd08      	pop	{r3, pc}
   853c8:	400e0e00 	.word	0x400e0e00
   853cc:	00085359 	.word	0x00085359

000853d0 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   853d0:	4a17      	ldr	r2, [pc, #92]	; (85430 <pmc_switch_mck_to_mainck+0x60>)
   853d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   853d4:	f023 0303 	bic.w	r3, r3, #3
   853d8:	f043 0301 	orr.w	r3, r3, #1
   853dc:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   853de:	6e93      	ldr	r3, [r2, #104]	; 0x68
   853e0:	f013 0f08 	tst.w	r3, #8
   853e4:	d10a      	bne.n	853fc <pmc_switch_mck_to_mainck+0x2c>
   853e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   853ea:	4911      	ldr	r1, [pc, #68]	; (85430 <pmc_switch_mck_to_mainck+0x60>)
   853ec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   853ee:	f012 0f08 	tst.w	r2, #8
   853f2:	d103      	bne.n	853fc <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   853f4:	3b01      	subs	r3, #1
   853f6:	d1f9      	bne.n	853ec <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   853f8:	2001      	movs	r0, #1
   853fa:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   853fc:	4a0c      	ldr	r2, [pc, #48]	; (85430 <pmc_switch_mck_to_mainck+0x60>)
   853fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85404:	4318      	orrs	r0, r3
   85406:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85408:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8540a:	f013 0f08 	tst.w	r3, #8
   8540e:	d10a      	bne.n	85426 <pmc_switch_mck_to_mainck+0x56>
   85410:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85414:	4906      	ldr	r1, [pc, #24]	; (85430 <pmc_switch_mck_to_mainck+0x60>)
   85416:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85418:	f012 0f08 	tst.w	r2, #8
   8541c:	d105      	bne.n	8542a <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8541e:	3b01      	subs	r3, #1
   85420:	d1f9      	bne.n	85416 <pmc_switch_mck_to_mainck+0x46>
			return 1;
   85422:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   85424:	4770      	bx	lr
	return 0;
   85426:	2000      	movs	r0, #0
   85428:	4770      	bx	lr
   8542a:	2000      	movs	r0, #0
   8542c:	4770      	bx	lr
   8542e:	bf00      	nop
   85430:	400e0400 	.word	0x400e0400

00085434 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   85434:	4a17      	ldr	r2, [pc, #92]	; (85494 <pmc_switch_mck_to_pllack+0x60>)
   85436:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8543c:	4318      	orrs	r0, r3
   8543e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85440:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85442:	f013 0f08 	tst.w	r3, #8
   85446:	d10a      	bne.n	8545e <pmc_switch_mck_to_pllack+0x2a>
   85448:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8544c:	4911      	ldr	r1, [pc, #68]	; (85494 <pmc_switch_mck_to_pllack+0x60>)
   8544e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85450:	f012 0f08 	tst.w	r2, #8
   85454:	d103      	bne.n	8545e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85456:	3b01      	subs	r3, #1
   85458:	d1f9      	bne.n	8544e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8545a:	2001      	movs	r0, #1
   8545c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8545e:	4a0d      	ldr	r2, [pc, #52]	; (85494 <pmc_switch_mck_to_pllack+0x60>)
   85460:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85462:	f023 0303 	bic.w	r3, r3, #3
   85466:	f043 0302 	orr.w	r3, r3, #2
   8546a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8546c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8546e:	f013 0f08 	tst.w	r3, #8
   85472:	d10a      	bne.n	8548a <pmc_switch_mck_to_pllack+0x56>
   85474:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85478:	4906      	ldr	r1, [pc, #24]	; (85494 <pmc_switch_mck_to_pllack+0x60>)
   8547a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8547c:	f012 0f08 	tst.w	r2, #8
   85480:	d105      	bne.n	8548e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85482:	3b01      	subs	r3, #1
   85484:	d1f9      	bne.n	8547a <pmc_switch_mck_to_pllack+0x46>
			return 1;
   85486:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   85488:	4770      	bx	lr
	return 0;
   8548a:	2000      	movs	r0, #0
   8548c:	4770      	bx	lr
   8548e:	2000      	movs	r0, #0
   85490:	4770      	bx	lr
   85492:	bf00      	nop
   85494:	400e0400 	.word	0x400e0400

00085498 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   85498:	4a08      	ldr	r2, [pc, #32]	; (854bc <pmc_osc_enable_main_xtal+0x24>)
   8549a:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   8549c:	f023 0303 	bic.w	r3, r3, #3
   854a0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   854a4:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   854a8:	0200      	lsls	r0, r0, #8
   854aa:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   854ac:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   854ae:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   854b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   854b2:	f013 0f01 	tst.w	r3, #1
   854b6:	d0fb      	beq.n	854b0 <pmc_osc_enable_main_xtal+0x18>
}
   854b8:	4770      	bx	lr
   854ba:	bf00      	nop
   854bc:	400e0400 	.word	0x400e0400

000854c0 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   854c0:	4b02      	ldr	r3, [pc, #8]	; (854cc <pmc_osc_is_ready_main_xtal+0xc>)
   854c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854c4:	f000 0001 	and.w	r0, r0, #1
   854c8:	4770      	bx	lr
   854ca:	bf00      	nop
   854cc:	400e0400 	.word	0x400e0400

000854d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   854d0:	4b02      	ldr	r3, [pc, #8]	; (854dc <pmc_osc_is_ready_mainck+0xc>)
   854d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   854d8:	4770      	bx	lr
   854da:	bf00      	nop
   854dc:	400e0400 	.word	0x400e0400

000854e0 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   854e0:	4b06      	ldr	r3, [pc, #24]	; (854fc <pmc_mainck_osc_select+0x1c>)
   854e2:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   854e4:	b930      	cbnz	r0, 854f4 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   854e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   854ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   854ee:	4a03      	ldr	r2, [pc, #12]	; (854fc <pmc_mainck_osc_select+0x1c>)
   854f0:	6213      	str	r3, [r2, #32]
   854f2:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   854f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   854f8:	e7f7      	b.n	854ea <pmc_mainck_osc_select+0xa>
   854fa:	bf00      	nop
   854fc:	400e0400 	.word	0x400e0400

00085500 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   85500:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   85504:	4b01      	ldr	r3, [pc, #4]	; (8550c <pmc_disable_pllack+0xc>)
   85506:	629a      	str	r2, [r3, #40]	; 0x28
   85508:	4770      	bx	lr
   8550a:	bf00      	nop
   8550c:	400e0400 	.word	0x400e0400

00085510 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   85510:	4b02      	ldr	r3, [pc, #8]	; (8551c <pmc_is_locked_pllack+0xc>)
   85512:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85514:	f000 0002 	and.w	r0, r0, #2
   85518:	4770      	bx	lr
   8551a:	bf00      	nop
   8551c:	400e0400 	.word	0x400e0400

00085520 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   85520:	4b02      	ldr	r3, [pc, #8]	; (8552c <pmc_is_locked_upll+0xc>)
   85522:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85524:	f000 0040 	and.w	r0, r0, #64	; 0x40
   85528:	4770      	bx	lr
   8552a:	bf00      	nop
   8552c:	400e0400 	.word	0x400e0400

00085530 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85530:	281d      	cmp	r0, #29
   85532:	d80e      	bhi.n	85552 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   85534:	281f      	cmp	r0, #31
   85536:	d80e      	bhi.n	85556 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   85538:	4b09      	ldr	r3, [pc, #36]	; (85560 <pmc_enable_periph_clk+0x30>)
   8553a:	699a      	ldr	r2, [r3, #24]
   8553c:	2301      	movs	r3, #1
   8553e:	4083      	lsls	r3, r0
   85540:	4393      	bics	r3, r2
   85542:	d00a      	beq.n	8555a <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   85544:	2301      	movs	r3, #1
   85546:	fa03 f000 	lsl.w	r0, r3, r0
   8554a:	4b05      	ldr	r3, [pc, #20]	; (85560 <pmc_enable_periph_clk+0x30>)
   8554c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8554e:	2000      	movs	r0, #0
   85550:	4770      	bx	lr
		return 1;
   85552:	2001      	movs	r0, #1
   85554:	4770      	bx	lr
	return 0;
   85556:	2000      	movs	r0, #0
   85558:	4770      	bx	lr
   8555a:	2000      	movs	r0, #0
}
   8555c:	4770      	bx	lr
   8555e:	bf00      	nop
   85560:	400e0400 	.word	0x400e0400

00085564 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85564:	281d      	cmp	r0, #29
   85566:	d810      	bhi.n	8558a <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   85568:	281f      	cmp	r0, #31
   8556a:	d810      	bhi.n	8558e <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   8556c:	4b09      	ldr	r3, [pc, #36]	; (85594 <pmc_disable_periph_clk+0x30>)
   8556e:	699a      	ldr	r2, [r3, #24]
   85570:	2301      	movs	r3, #1
   85572:	4083      	lsls	r3, r0
   85574:	4393      	bics	r3, r2
   85576:	d001      	beq.n	8557c <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   85578:	2000      	movs	r0, #0
}
   8557a:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   8557c:	2301      	movs	r3, #1
   8557e:	fa03 f000 	lsl.w	r0, r3, r0
   85582:	4b04      	ldr	r3, [pc, #16]	; (85594 <pmc_disable_periph_clk+0x30>)
   85584:	6158      	str	r0, [r3, #20]
	return 0;
   85586:	2000      	movs	r0, #0
   85588:	4770      	bx	lr
		return 1;
   8558a:	2001      	movs	r0, #1
   8558c:	4770      	bx	lr
	return 0;
   8558e:	2000      	movs	r0, #0
   85590:	4770      	bx	lr
   85592:	bf00      	nop
   85594:	400e0400 	.word	0x400e0400

00085598 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   85598:	f44f 7380 	mov.w	r3, #256	; 0x100
   8559c:	fa03 f000 	lsl.w	r0, r3, r0
   855a0:	4b01      	ldr	r3, [pc, #4]	; (855a8 <pmc_enable_pck+0x10>)
   855a2:	6018      	str	r0, [r3, #0]
   855a4:	4770      	bx	lr
   855a6:	bf00      	nop
   855a8:	400e0400 	.word	0x400e0400

000855ac <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   855ac:	4b03      	ldr	r3, [pc, #12]	; (855bc <pmc_set_fast_startup_input+0x10>)
   855ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   855b0:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   855b4:	4310      	orrs	r0, r2
   855b6:	6718      	str	r0, [r3, #112]	; 0x70
   855b8:	4770      	bx	lr
   855ba:	bf00      	nop
   855bc:	400e0400 	.word	0x400e0400

000855c0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   855c0:	4b02      	ldr	r3, [pc, #8]	; (855cc <pmc_is_wakeup_clocks_restored+0xc>)
   855c2:	7818      	ldrb	r0, [r3, #0]
}
   855c4:	f080 0001 	eor.w	r0, r0, #1
   855c8:	4770      	bx	lr
   855ca:	bf00      	nop
   855cc:	20002308 	.word	0x20002308

000855d0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   855d0:	b508      	push	{r3, lr}
   855d2:	2014      	movs	r0, #20
   855d4:	4b01      	ldr	r3, [pc, #4]	; (855dc <spi_enable_clock+0xc>)
   855d6:	4798      	blx	r3
   855d8:	bd08      	pop	{r3, pc}
   855da:	bf00      	nop
   855dc:	00085531 	.word	0x00085531

000855e0 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   855e0:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   855e2:	2014      	movs	r0, #20
   855e4:	4b01      	ldr	r3, [pc, #4]	; (855ec <spi_disable_clock+0xc>)
   855e6:	4798      	blx	r3
   855e8:	bd08      	pop	{r3, pc}
   855ea:	bf00      	nop
   855ec:	00085565 	.word	0x00085565

000855f0 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   855f0:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   855f2:	f643 2399 	movw	r3, #15001	; 0x3a99
   855f6:	6904      	ldr	r4, [r0, #16]
   855f8:	f014 0f01 	tst.w	r4, #1
   855fc:	d103      	bne.n	85606 <spi_read+0x16>
		if (!timeout--) {
   855fe:	3b01      	subs	r3, #1
   85600:	d1f9      	bne.n	855f6 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   85602:	2001      	movs	r0, #1
   85604:	e009      	b.n	8561a <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   85606:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   85608:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   8560a:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   8560e:	bf1c      	itt	ne
   85610:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   85614:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   85616:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   85618:	2000      	movs	r0, #0
}
   8561a:	bc10      	pop	{r4}
   8561c:	4770      	bx	lr

0008561e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   8561e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   85620:	f643 2499 	movw	r4, #15001	; 0x3a99
   85624:	6905      	ldr	r5, [r0, #16]
   85626:	f015 0f02 	tst.w	r5, #2
   8562a:	d103      	bne.n	85634 <spi_write+0x16>
		if (!timeout--) {
   8562c:	3c01      	subs	r4, #1
   8562e:	d1f9      	bne.n	85624 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   85630:	2001      	movs	r0, #1
   85632:	e00c      	b.n	8564e <spi_write+0x30>
   85634:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   85636:	f014 0f02 	tst.w	r4, #2
   8563a:	d006      	beq.n	8564a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   8563c:	0412      	lsls	r2, r2, #16
   8563e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   85642:	4311      	orrs	r1, r2
		if (uc_last) {
   85644:	b10b      	cbz	r3, 8564a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   85646:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   8564a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   8564c:	2000      	movs	r0, #0
}
   8564e:	bc30      	pop	{r4, r5}
   85650:	4770      	bx	lr

00085652 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   85652:	b932      	cbnz	r2, 85662 <spi_set_clock_polarity+0x10>
   85654:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   85658:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8565a:	f023 0301 	bic.w	r3, r3, #1
   8565e:	6303      	str	r3, [r0, #48]	; 0x30
   85660:	4770      	bx	lr
   85662:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   85666:	6b03      	ldr	r3, [r0, #48]	; 0x30
   85668:	f043 0301 	orr.w	r3, r3, #1
   8566c:	6303      	str	r3, [r0, #48]	; 0x30
   8566e:	4770      	bx	lr

00085670 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   85670:	b932      	cbnz	r2, 85680 <spi_set_clock_phase+0x10>
   85672:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   85676:	6b03      	ldr	r3, [r0, #48]	; 0x30
   85678:	f023 0302 	bic.w	r3, r3, #2
   8567c:	6303      	str	r3, [r0, #48]	; 0x30
   8567e:	4770      	bx	lr
   85680:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   85684:	6b03      	ldr	r3, [r0, #48]	; 0x30
   85686:	f043 0302 	orr.w	r3, r3, #2
   8568a:	6303      	str	r3, [r0, #48]	; 0x30
   8568c:	4770      	bx	lr

0008568e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   8568e:	1e43      	subs	r3, r0, #1
   85690:	4419      	add	r1, r3
   85692:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   85696:	1e43      	subs	r3, r0, #1
   85698:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   8569a:	bf94      	ite	ls
   8569c:	b200      	sxthls	r0, r0
		return -1;
   8569e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   856a2:	4770      	bx	lr

000856a4 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   856a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   856a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   856aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   856ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   856b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   856b2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   856b6:	630a      	str	r2, [r1, #48]	; 0x30
   856b8:	4770      	bx	lr
	...

000856bc <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   856bc:	4603      	mov	r3, r0
   856be:	b9c0      	cbnz	r0, 856f2 <udd_sleep_mode+0x36>
   856c0:	4a18      	ldr	r2, [pc, #96]	; (85724 <udd_sleep_mode+0x68>)
   856c2:	7812      	ldrb	r2, [r2, #0]
   856c4:	b192      	cbz	r2, 856ec <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856c6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   856ca:	b672      	cpsid	i
   856cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856d0:	4a15      	ldr	r2, [pc, #84]	; (85728 <udd_sleep_mode+0x6c>)
   856d2:	2100      	movs	r1, #0
   856d4:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   856d6:	4915      	ldr	r1, [pc, #84]	; (8572c <udd_sleep_mode+0x70>)
   856d8:	788a      	ldrb	r2, [r1, #2]
   856da:	3a01      	subs	r2, #1
   856dc:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   856de:	b928      	cbnz	r0, 856ec <udd_sleep_mode+0x30>
		cpu_irq_enable();
   856e0:	4a11      	ldr	r2, [pc, #68]	; (85728 <udd_sleep_mode+0x6c>)
   856e2:	2101      	movs	r1, #1
   856e4:	7011      	strb	r1, [r2, #0]
   856e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   856ea:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   856ec:	4a0d      	ldr	r2, [pc, #52]	; (85724 <udd_sleep_mode+0x68>)
   856ee:	7013      	strb	r3, [r2, #0]
}
   856f0:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   856f2:	4a0c      	ldr	r2, [pc, #48]	; (85724 <udd_sleep_mode+0x68>)
   856f4:	7812      	ldrb	r2, [r2, #0]
   856f6:	2a00      	cmp	r2, #0
   856f8:	d1f8      	bne.n	856ec <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   856fe:	b672      	cpsid	i
   85700:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85704:	4a08      	ldr	r2, [pc, #32]	; (85728 <udd_sleep_mode+0x6c>)
   85706:	2100      	movs	r1, #0
   85708:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   8570a:	4908      	ldr	r1, [pc, #32]	; (8572c <udd_sleep_mode+0x70>)
   8570c:	788a      	ldrb	r2, [r1, #2]
   8570e:	3201      	adds	r2, #1
   85710:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   85712:	2800      	cmp	r0, #0
   85714:	d1ea      	bne.n	856ec <udd_sleep_mode+0x30>
		cpu_irq_enable();
   85716:	4a04      	ldr	r2, [pc, #16]	; (85728 <udd_sleep_mode+0x6c>)
   85718:	2101      	movs	r1, #1
   8571a:	7011      	strb	r1, [r2, #0]
   8571c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85720:	b662      	cpsie	i
}
   85722:	e7e3      	b.n	856ec <udd_sleep_mode+0x30>
   85724:	2000230a 	.word	0x2000230a
   85728:	200006ee 	.word	0x200006ee
   8572c:	20002de0 	.word	0x20002de0

00085730 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85730:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85734:	b672      	cpsid	i
   85736:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8573a:	4a0e      	ldr	r2, [pc, #56]	; (85774 <udd_ctrl_init+0x44>)
   8573c:	2100      	movs	r1, #0
   8573e:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   85740:	4a0d      	ldr	r2, [pc, #52]	; (85778 <udd_ctrl_init+0x48>)
   85742:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85746:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8574a:	b92b      	cbnz	r3, 85758 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   8574c:	4b09      	ldr	r3, [pc, #36]	; (85774 <udd_ctrl_init+0x44>)
   8574e:	2201      	movs	r2, #1
   85750:	701a      	strb	r2, [r3, #0]
   85752:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85756:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   85758:	4b07      	ldr	r3, [pc, #28]	; (85778 <udd_ctrl_init+0x48>)
   8575a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8575e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   85762:	4a06      	ldr	r2, [pc, #24]	; (8577c <udd_ctrl_init+0x4c>)
   85764:	2300      	movs	r3, #0
   85766:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85768:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   8576a:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   8576c:	4a04      	ldr	r2, [pc, #16]	; (85780 <udd_ctrl_init+0x50>)
   8576e:	7013      	strb	r3, [r2, #0]
}
   85770:	4770      	bx	lr
   85772:	bf00      	nop
   85774:	200006ee 	.word	0x200006ee
   85778:	400a4000 	.word	0x400a4000
   8577c:	20002df4 	.word	0x20002df4
   85780:	20002310 	.word	0x20002310

00085784 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85784:	4b03      	ldr	r3, [pc, #12]	; (85794 <udd_ctrl_stall_data+0x10>)
   85786:	2205      	movs	r2, #5
   85788:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8578a:	4b03      	ldr	r3, [pc, #12]	; (85798 <udd_ctrl_stall_data+0x14>)
   8578c:	2220      	movs	r2, #32
   8578e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85792:	4770      	bx	lr
   85794:	20002310 	.word	0x20002310
   85798:	400a4000 	.word	0x400a4000

0008579c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8579c:	4b11      	ldr	r3, [pc, #68]	; (857e4 <udd_ctrl_send_zlp_in+0x48>)
   8579e:	2203      	movs	r2, #3
   857a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   857a2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   857a6:	b672      	cpsid	i
   857a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   857ac:	4b0e      	ldr	r3, [pc, #56]	; (857e8 <udd_ctrl_send_zlp_in+0x4c>)
   857ae:	2200      	movs	r2, #0
   857b0:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   857b2:	4b0e      	ldr	r3, [pc, #56]	; (857ec <udd_ctrl_send_zlp_in+0x50>)
   857b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   857b8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   857bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
   857c0:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   857c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   857c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   857cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   857d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   857d4:	b929      	cbnz	r1, 857e2 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   857d6:	4b04      	ldr	r3, [pc, #16]	; (857e8 <udd_ctrl_send_zlp_in+0x4c>)
   857d8:	2201      	movs	r2, #1
   857da:	701a      	strb	r2, [r3, #0]
   857dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   857e0:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   857e2:	4770      	bx	lr
   857e4:	20002310 	.word	0x20002310
   857e8:	200006ee 	.word	0x200006ee
   857ec:	400a4000 	.word	0x400a4000

000857f0 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   857f0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   857f2:	4b02      	ldr	r3, [pc, #8]	; (857fc <udd_ctrl_endofrequest+0xc>)
   857f4:	691b      	ldr	r3, [r3, #16]
   857f6:	b103      	cbz	r3, 857fa <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   857f8:	4798      	blx	r3
	}
}
   857fa:	bd08      	pop	{r3, pc}
   857fc:	20002df4 	.word	0x20002df4

00085800 <udd_ctrl_in_sent>:
{
   85800:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85802:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85806:	b672      	cpsid	i
   85808:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8580c:	4a4c      	ldr	r2, [pc, #304]	; (85940 <udd_ctrl_in_sent+0x140>)
   8580e:	2100      	movs	r1, #0
   85810:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   85812:	4a4c      	ldr	r2, [pc, #304]	; (85944 <udd_ctrl_in_sent+0x144>)
   85814:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85818:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8581c:	b92b      	cbnz	r3, 8582a <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   8581e:	4b48      	ldr	r3, [pc, #288]	; (85940 <udd_ctrl_in_sent+0x140>)
   85820:	2201      	movs	r2, #1
   85822:	701a      	strb	r2, [r3, #0]
   85824:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85828:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8582a:	4b47      	ldr	r3, [pc, #284]	; (85948 <udd_ctrl_in_sent+0x148>)
   8582c:	781b      	ldrb	r3, [r3, #0]
   8582e:	2b03      	cmp	r3, #3
   85830:	d05a      	beq.n	858e8 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85832:	4b46      	ldr	r3, [pc, #280]	; (8594c <udd_ctrl_in_sent+0x14c>)
   85834:	881b      	ldrh	r3, [r3, #0]
   85836:	4a46      	ldr	r2, [pc, #280]	; (85950 <udd_ctrl_in_sent+0x150>)
   85838:	8994      	ldrh	r4, [r2, #12]
   8583a:	1ae4      	subs	r4, r4, r3
   8583c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   8583e:	b9c4      	cbnz	r4, 85872 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85840:	4a44      	ldr	r2, [pc, #272]	; (85954 <udd_ctrl_in_sent+0x154>)
   85842:	8811      	ldrh	r1, [r2, #0]
   85844:	440b      	add	r3, r1
   85846:	b29b      	uxth	r3, r3
   85848:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8584a:	4a41      	ldr	r2, [pc, #260]	; (85950 <udd_ctrl_in_sent+0x150>)
   8584c:	88d2      	ldrh	r2, [r2, #6]
   8584e:	429a      	cmp	r2, r3
   85850:	d04f      	beq.n	858f2 <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   85852:	4b41      	ldr	r3, [pc, #260]	; (85958 <udd_ctrl_in_sent+0x158>)
   85854:	781b      	ldrb	r3, [r3, #0]
   85856:	2b00      	cmp	r3, #0
   85858:	d14b      	bne.n	858f2 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   8585a:	4b3d      	ldr	r3, [pc, #244]	; (85950 <udd_ctrl_in_sent+0x150>)
   8585c:	695b      	ldr	r3, [r3, #20]
   8585e:	2b00      	cmp	r3, #0
   85860:	d06c      	beq.n	8593c <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   85862:	4798      	blx	r3
   85864:	2800      	cmp	r0, #0
   85866:	d069      	beq.n	8593c <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   85868:	4b38      	ldr	r3, [pc, #224]	; (8594c <udd_ctrl_in_sent+0x14c>)
   8586a:	2200      	movs	r2, #0
   8586c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8586e:	4b38      	ldr	r3, [pc, #224]	; (85950 <udd_ctrl_in_sent+0x150>)
   85870:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   85872:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   85874:	bf92      	itee	ls
   85876:	2201      	movls	r2, #1
		b_shortpacket = false;
   85878:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8587a:	2440      	movhi	r4, #64	; 0x40
   8587c:	4b36      	ldr	r3, [pc, #216]	; (85958 <udd_ctrl_in_sent+0x158>)
   8587e:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85880:	4b33      	ldr	r3, [pc, #204]	; (85950 <udd_ctrl_in_sent+0x150>)
   85882:	689a      	ldr	r2, [r3, #8]
   85884:	4b31      	ldr	r3, [pc, #196]	; (8594c <udd_ctrl_in_sent+0x14c>)
   85886:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85888:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   8588c:	b672      	cpsid	i
   8588e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85892:	4b2b      	ldr	r3, [pc, #172]	; (85940 <udd_ctrl_in_sent+0x140>)
   85894:	2100      	movs	r1, #0
   85896:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   85898:	4b2a      	ldr	r3, [pc, #168]	; (85944 <udd_ctrl_in_sent+0x144>)
   8589a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8589e:	f413 7f00 	tst.w	r3, #512	; 0x200
   858a2:	d140      	bne.n	85926 <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   858a4:	b14c      	cbz	r4, 858ba <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   858a6:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   858a8:	4b2c      	ldr	r3, [pc, #176]	; (8595c <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   858aa:	4619      	mov	r1, r3
   858ac:	3301      	adds	r3, #1
   858ae:	f812 0b01 	ldrb.w	r0, [r2], #1
   858b2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   858b4:	b2d9      	uxtb	r1, r3
   858b6:	42a1      	cmp	r1, r4
   858b8:	d3f7      	bcc.n	858aa <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   858ba:	4a24      	ldr	r2, [pc, #144]	; (8594c <udd_ctrl_in_sent+0x14c>)
   858bc:	8813      	ldrh	r3, [r2, #0]
   858be:	441c      	add	r4, r3
   858c0:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   858c2:	4b20      	ldr	r3, [pc, #128]	; (85944 <udd_ctrl_in_sent+0x144>)
   858c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   858c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   858cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   858d0:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   858d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   858d8:	bb7d      	cbnz	r5, 8593a <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   858da:	4b19      	ldr	r3, [pc, #100]	; (85940 <udd_ctrl_in_sent+0x140>)
   858dc:	2201      	movs	r2, #1
   858de:	701a      	strb	r2, [r3, #0]
   858e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   858e4:	b662      	cpsie	i
}
   858e6:	e028      	b.n	8593a <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   858e8:	4b1d      	ldr	r3, [pc, #116]	; (85960 <udd_ctrl_in_sent+0x160>)
   858ea:	4798      	blx	r3
		udd_ctrl_init();
   858ec:	4b1d      	ldr	r3, [pc, #116]	; (85964 <udd_ctrl_in_sent+0x164>)
   858ee:	4798      	blx	r3
		return;
   858f0:	e023      	b.n	8593a <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   858f2:	4b15      	ldr	r3, [pc, #84]	; (85948 <udd_ctrl_in_sent+0x148>)
   858f4:	2204      	movs	r2, #4
   858f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   858f8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   858fc:	b672      	cpsid	i
   858fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85902:	4b0f      	ldr	r3, [pc, #60]	; (85940 <udd_ctrl_in_sent+0x140>)
   85904:	2200      	movs	r2, #0
   85906:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   85908:	4b0e      	ldr	r3, [pc, #56]	; (85944 <udd_ctrl_in_sent+0x144>)
   8590a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8590e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   85912:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85916:	b981      	cbnz	r1, 8593a <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   85918:	4b09      	ldr	r3, [pc, #36]	; (85940 <udd_ctrl_in_sent+0x140>)
   8591a:	2201      	movs	r2, #1
   8591c:	701a      	strb	r2, [r3, #0]
   8591e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85922:	b662      	cpsie	i
}
   85924:	e009      	b.n	8593a <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   85926:	b92d      	cbnz	r5, 85934 <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   85928:	4b05      	ldr	r3, [pc, #20]	; (85940 <udd_ctrl_in_sent+0x140>)
   8592a:	2201      	movs	r2, #1
   8592c:	701a      	strb	r2, [r3, #0]
   8592e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85932:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85934:	4b04      	ldr	r3, [pc, #16]	; (85948 <udd_ctrl_in_sent+0x148>)
   85936:	2204      	movs	r2, #4
   85938:	701a      	strb	r2, [r3, #0]
}
   8593a:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   8593c:	2201      	movs	r2, #1
   8593e:	e79d      	b.n	8587c <udd_ctrl_in_sent+0x7c>
   85940:	200006ee 	.word	0x200006ee
   85944:	400a4000 	.word	0x400a4000
   85948:	20002310 	.word	0x20002310
   8594c:	2000230c 	.word	0x2000230c
   85950:	20002df4 	.word	0x20002df4
   85954:	2000230e 	.word	0x2000230e
   85958:	20002309 	.word	0x20002309
   8595c:	20180000 	.word	0x20180000
   85960:	000857f1 	.word	0x000857f1
   85964:	00085731 	.word	0x00085731

00085968 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85968:	b538      	push	{r3, r4, r5, lr}
   8596a:	4603      	mov	r3, r0
   8596c:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   8596e:	7d19      	ldrb	r1, [r3, #20]
   85970:	f011 0f01 	tst.w	r1, #1
   85974:	d011      	beq.n	8599a <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   85976:	7d19      	ldrb	r1, [r3, #20]
   85978:	f36f 0100 	bfc	r1, #0, #1
   8597c:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   8597e:	681c      	ldr	r4, [r3, #0]
   85980:	b15c      	cbz	r4, 8599a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85982:	f102 0108 	add.w	r1, r2, #8
   85986:	0149      	lsls	r1, r1, #5
   85988:	4d04      	ldr	r5, [pc, #16]	; (8599c <udd_ep_finish_job+0x34>)
   8598a:	5869      	ldr	r1, [r5, r1]
   8598c:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   85990:	bf18      	it	ne
   85992:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85996:	6899      	ldr	r1, [r3, #8]
   85998:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   8599a:	bd38      	pop	{r3, r4, r5, pc}
   8599c:	400a4000 	.word	0x400a4000

000859a0 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   859a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   859a2:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   859a4:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   859a6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   859aa:	496c      	ldr	r1, [pc, #432]	; (85b5c <udd_ep_trans_done+0x1bc>)
   859ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   859b0:	7d09      	ldrb	r1, [r1, #20]
   859b2:	f011 0f01 	tst.w	r1, #1
   859b6:	f000 80ca 	beq.w	85b4e <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   859ba:	4601      	mov	r1, r0
   859bc:	4867      	ldr	r0, [pc, #412]	; (85b5c <udd_ep_trans_done+0x1bc>)
   859be:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   859c2:	68cd      	ldr	r5, [r1, #12]
   859c4:	6888      	ldr	r0, [r1, #8]
   859c6:	4285      	cmp	r5, r0
   859c8:	f000 80a6 	beq.w	85b18 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   859cc:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   859ce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   859d2:	d863      	bhi.n	85a9c <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   859d4:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   859d6:	0151      	lsls	r1, r2, #5
   859d8:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   859dc:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   859e0:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   859e4:	f016 0f08 	tst.w	r6, #8
   859e8:	d014      	beq.n	85a14 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   859ea:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   859ee:	f006 0607 	and.w	r6, r6, #7
   859f2:	2108      	movs	r1, #8
   859f4:	40b1      	lsls	r1, r6
   859f6:	3901      	subs	r1, #1
   859f8:	4201      	tst	r1, r0
   859fa:	d068      	beq.n	85ace <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   859fc:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85a00:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85a04:	4e55      	ldr	r6, [pc, #340]	; (85b5c <udd_ep_trans_done+0x1bc>)
   85a06:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   85a0a:	7d0e      	ldrb	r6, [r1, #20]
   85a0c:	f36f 0641 	bfc	r6, #1, #1
   85a10:	750e      	strb	r6, [r1, #20]
   85a12:	e05c      	b.n	85ace <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85a14:	0151      	lsls	r1, r2, #5
   85a16:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85a1a:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85a1e:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   85a22:	f3c6 1601 	ubfx	r6, r6, #4, #2
   85a26:	2e01      	cmp	r6, #1
   85a28:	d14f      	bne.n	85aca <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85a2a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   85a2e:	f006 0607 	and.w	r6, r6, #7
   85a32:	2108      	movs	r1, #8
   85a34:	40b1      	lsls	r1, r6
   85a36:	4281      	cmp	r1, r0
   85a38:	d247      	bcs.n	85aca <udd_ep_trans_done+0x12a>
   85a3a:	e048      	b.n	85ace <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85a3c:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85a40:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   85a42:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85a46:	4a45      	ldr	r2, [pc, #276]	; (85b5c <udd_ep_trans_done+0x1bc>)
   85a48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   85a4c:	68d1      	ldr	r1, [r2, #12]
   85a4e:	4401      	add	r1, r0
   85a50:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   85a52:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85a54:	4a42      	ldr	r2, [pc, #264]	; (85b60 <udd_ep_trans_done+0x1c0>)
   85a56:	6911      	ldr	r1, [r2, #16]
   85a58:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   85a5c:	fa00 f303 	lsl.w	r3, r0, r3
   85a60:	430b      	orrs	r3, r1
   85a62:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85a64:	2d00      	cmp	r5, #0
   85a66:	d172      	bne.n	85b4e <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   85a68:	4b3e      	ldr	r3, [pc, #248]	; (85b64 <udd_ep_trans_done+0x1c4>)
   85a6a:	2201      	movs	r2, #1
   85a6c:	701a      	strb	r2, [r3, #0]
   85a6e:	f3bf 8f5f 	dmb	sy
   85a72:	b662      	cpsie	i
}
   85a74:	e06b      	b.n	85b4e <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   85a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85a7a:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   85a7e:	4b38      	ldr	r3, [pc, #224]	; (85b60 <udd_ep_trans_done+0x1c0>)
   85a80:	6919      	ldr	r1, [r3, #16]
   85a82:	f44f 7080 	mov.w	r0, #256	; 0x100
   85a86:	fa00 f202 	lsl.w	r2, r0, r2
   85a8a:	430a      	orrs	r2, r1
   85a8c:	611a      	str	r2, [r3, #16]
			return;
   85a8e:	e05e      	b.n	85b4e <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85a90:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85a94:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85a98:	2400      	movs	r4, #0
   85a9a:	e018      	b.n	85ace <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   85a9c:	0151      	lsls	r1, r2, #5
   85a9e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85aa2:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85aa6:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   85aaa:	f014 0408 	ands.w	r4, r4, #8
   85aae:	d1ef      	bne.n	85a90 <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85ab0:	0151      	lsls	r1, r2, #5
   85ab2:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85ab6:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85aba:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   85abe:	f3c0 1001 	ubfx	r0, r0, #4, #2
   85ac2:	2801      	cmp	r0, #1
   85ac4:	d044      	beq.n	85b50 <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85ac6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85aca:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85ace:	4926      	ldr	r1, [pc, #152]	; (85b68 <udd_ep_trans_done+0x1c8>)
   85ad0:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   85ad4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   85ad8:	4f20      	ldr	r7, [pc, #128]	; (85b5c <udd_ep_trans_done+0x1bc>)
   85ada:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   85ade:	6876      	ldr	r6, [r6, #4]
   85ae0:	4435      	add	r5, r6
   85ae2:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85ae4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   85ae8:	b672      	cpsid	i
   85aea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85aee:	4e1d      	ldr	r6, [pc, #116]	; (85b64 <udd_ep_trans_done+0x1c4>)
   85af0:	2700      	movs	r7, #0
   85af2:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   85af4:	68ce      	ldr	r6, [r1, #12]
   85af6:	f016 0f10 	tst.w	r6, #16
   85afa:	d09f      	beq.n	85a3c <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   85afc:	b92d      	cbnz	r5, 85b0a <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   85afe:	4919      	ldr	r1, [pc, #100]	; (85b64 <udd_ep_trans_done+0x1c4>)
   85b00:	2001      	movs	r0, #1
   85b02:	7008      	strb	r0, [r1, #0]
   85b04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85b08:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   85b0a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85b0e:	4813      	ldr	r0, [pc, #76]	; (85b5c <udd_ep_trans_done+0x1bc>)
   85b10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   85b14:	68c8      	ldr	r0, [r1, #12]
   85b16:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   85b18:	0151      	lsls	r1, r2, #5
   85b1a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85b1e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85b22:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   85b26:	f010 0f08 	tst.w	r0, #8
   85b2a:	d008      	beq.n	85b3e <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   85b2c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   85b30:	4c0a      	ldr	r4, [pc, #40]	; (85b5c <udd_ep_trans_done+0x1bc>)
   85b32:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   85b36:	7d00      	ldrb	r0, [r0, #20]
   85b38:	f010 0f02 	tst.w	r0, #2
   85b3c:	d19b      	bne.n	85a76 <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   85b3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   85b42:	2100      	movs	r1, #0
   85b44:	4805      	ldr	r0, [pc, #20]	; (85b5c <udd_ep_trans_done+0x1bc>)
   85b46:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   85b4a:	4b08      	ldr	r3, [pc, #32]	; (85b6c <udd_ep_trans_done+0x1cc>)
   85b4c:	4798      	blx	r3
}
   85b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85b50:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85b54:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   85b58:	e7b9      	b.n	85ace <udd_ep_trans_done+0x12e>
   85b5a:	bf00      	nop
   85b5c:	20002314 	.word	0x20002314
   85b60:	400a4000 	.word	0x400a4000
   85b64:	200006ee 	.word	0x200006ee
   85b68:	400a4300 	.word	0x400a4300
   85b6c:	00085969 	.word	0x00085969

00085b70 <UDPHS_Handler>:
{
   85b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   85b74:	201d      	movs	r0, #29
   85b76:	4ba0      	ldr	r3, [pc, #640]	; (85df8 <UDPHS_Handler+0x288>)
   85b78:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   85b7a:	4ba0      	ldr	r3, [pc, #640]	; (85dfc <UDPHS_Handler+0x28c>)
   85b7c:	4798      	blx	r3
   85b7e:	b920      	cbnz	r0, 85b8a <UDPHS_Handler+0x1a>
   85b80:	4b9f      	ldr	r3, [pc, #636]	; (85e00 <UDPHS_Handler+0x290>)
   85b82:	695b      	ldr	r3, [r3, #20]
   85b84:	f013 0f02 	tst.w	r3, #2
   85b88:	d041      	beq.n	85c0e <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   85b8a:	4b9d      	ldr	r3, [pc, #628]	; (85e00 <UDPHS_Handler+0x290>)
   85b8c:	695b      	ldr	r3, [r3, #20]
   85b8e:	f013 0f08 	tst.w	r3, #8
   85b92:	d143      	bne.n	85c1c <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   85b94:	4b9a      	ldr	r3, [pc, #616]	; (85e00 <UDPHS_Handler+0x290>)
   85b96:	695b      	ldr	r3, [r3, #20]
   85b98:	f013 0f04 	tst.w	r3, #4
   85b9c:	d14c      	bne.n	85c38 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   85b9e:	4a98      	ldr	r2, [pc, #608]	; (85e00 <UDPHS_Handler+0x290>)
   85ba0:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   85ba4:	6952      	ldr	r2, [r2, #20]
   85ba6:	f412 7f80 	tst.w	r2, #256	; 0x100
   85baa:	d029      	beq.n	85c00 <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   85bac:	4a94      	ldr	r2, [pc, #592]	; (85e00 <UDPHS_Handler+0x290>)
   85bae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85bb2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   85bba:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   85bbe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   85bc2:	d13f      	bne.n	85c44 <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   85bc4:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85bc8:	d006      	beq.n	85bd8 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85bca:	4a8d      	ldr	r2, [pc, #564]	; (85e00 <UDPHS_Handler+0x290>)
   85bcc:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85bd0:	f412 6f80 	tst.w	r2, #1024	; 0x400
   85bd4:	f040 809e 	bne.w	85d14 <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   85bd8:	f413 7f00 	tst.w	r3, #512	; 0x200
   85bdc:	f040 809d 	bne.w	85d1a <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   85be0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85be4:	d004      	beq.n	85bf0 <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   85be6:	4a86      	ldr	r2, [pc, #536]	; (85e00 <UDPHS_Handler+0x290>)
   85be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85bec:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   85bf0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   85bf4:	f040 8144 	bne.w	85e80 <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   85bf8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   85bfc:	f040 8155 	bne.w	85eaa <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85c00:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85c02:	497f      	ldr	r1, [pc, #508]	; (85e00 <UDPHS_Handler+0x290>)
   85c04:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85c08:	f44f 7e80 	mov.w	lr, #256	; 0x100
   85c0c:	e19c      	b.n	85f48 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   85c0e:	b672      	cpsid	i
   85c10:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85c14:	4b7b      	ldr	r3, [pc, #492]	; (85e04 <UDPHS_Handler+0x294>)
   85c16:	2200      	movs	r2, #0
   85c18:	701a      	strb	r2, [r3, #0]
		return;
   85c1a:	e008      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ack_sof();
   85c1c:	4b78      	ldr	r3, [pc, #480]	; (85e00 <UDPHS_Handler+0x290>)
   85c1e:	2208      	movs	r2, #8
   85c20:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   85c22:	695b      	ldr	r3, [r3, #20]
   85c24:	f013 0f01 	tst.w	r3, #1
   85c28:	d003      	beq.n	85c32 <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   85c2a:	4b77      	ldr	r3, [pc, #476]	; (85e08 <UDPHS_Handler+0x298>)
   85c2c:	4798      	blx	r3
}
   85c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   85c32:	4b76      	ldr	r3, [pc, #472]	; (85e0c <UDPHS_Handler+0x29c>)
   85c34:	4798      	blx	r3
   85c36:	e7f8      	b.n	85c2a <UDPHS_Handler+0xba>
		udd_ack_msof();
   85c38:	4b71      	ldr	r3, [pc, #452]	; (85e00 <UDPHS_Handler+0x290>)
   85c3a:	2204      	movs	r2, #4
   85c3c:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   85c3e:	4b73      	ldr	r3, [pc, #460]	; (85e0c <UDPHS_Handler+0x29c>)
   85c40:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85c42:	e7f4      	b.n	85c2e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85c44:	4b72      	ldr	r3, [pc, #456]	; (85e10 <UDPHS_Handler+0x2a0>)
   85c46:	781b      	ldrb	r3, [r3, #0]
   85c48:	2b00      	cmp	r3, #0
   85c4a:	d140      	bne.n	85cce <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   85c4c:	4b6c      	ldr	r3, [pc, #432]	; (85e00 <UDPHS_Handler+0x290>)
   85c4e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85c52:	f3c3 530a 	ubfx	r3, r3, #20, #11
   85c56:	2b08      	cmp	r3, #8
   85c58:	d13e      	bne.n	85cd8 <UDPHS_Handler+0x168>
   85c5a:	4a6e      	ldr	r2, [pc, #440]	; (85e14 <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85c5c:	4b6e      	ldr	r3, [pc, #440]	; (85e18 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   85c5e:	486f      	ldr	r0, [pc, #444]	; (85e1c <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85c60:	4619      	mov	r1, r3
   85c62:	3301      	adds	r3, #1
   85c64:	7809      	ldrb	r1, [r1, #0]
   85c66:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   85c6a:	4283      	cmp	r3, r0
   85c6c:	d1f8      	bne.n	85c60 <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   85c6e:	4b6c      	ldr	r3, [pc, #432]	; (85e20 <UDPHS_Handler+0x2b0>)
   85c70:	4798      	blx	r3
   85c72:	2800      	cmp	r0, #0
   85c74:	d038      	beq.n	85ce8 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   85c76:	4b62      	ldr	r3, [pc, #392]	; (85e00 <UDPHS_Handler+0x290>)
   85c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   85c80:	4b68      	ldr	r3, [pc, #416]	; (85e24 <UDPHS_Handler+0x2b4>)
   85c82:	f993 3000 	ldrsb.w	r3, [r3]
   85c86:	2b00      	cmp	r3, #0
   85c88:	db36      	blt.n	85cf8 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   85c8a:	4b66      	ldr	r3, [pc, #408]	; (85e24 <UDPHS_Handler+0x2b4>)
   85c8c:	88db      	ldrh	r3, [r3, #6]
   85c8e:	2b00      	cmp	r3, #0
   85c90:	d03d      	beq.n	85d0e <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c92:	2300      	movs	r3, #0
   85c94:	4a64      	ldr	r2, [pc, #400]	; (85e28 <UDPHS_Handler+0x2b8>)
   85c96:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85c98:	4a64      	ldr	r2, [pc, #400]	; (85e2c <UDPHS_Handler+0x2bc>)
   85c9a:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85c9c:	4a5c      	ldr	r2, [pc, #368]	; (85e10 <UDPHS_Handler+0x2a0>)
   85c9e:	2101      	movs	r1, #1
   85ca0:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   85ca2:	4a57      	ldr	r2, [pc, #348]	; (85e00 <UDPHS_Handler+0x290>)
   85ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85ca8:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85cac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   85cb0:	b672      	cpsid	i
   85cb2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85cb6:	4c53      	ldr	r4, [pc, #332]	; (85e04 <UDPHS_Handler+0x294>)
   85cb8:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   85cba:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85cbe:	2800      	cmp	r0, #0
   85cc0:	d1b5      	bne.n	85c2e <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   85cc2:	2201      	movs	r2, #1
   85cc4:	7022      	strb	r2, [r4, #0]
   85cc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85cca:	b662      	cpsie	i
}
   85ccc:	e7af      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   85cce:	4b58      	ldr	r3, [pc, #352]	; (85e30 <UDPHS_Handler+0x2c0>)
   85cd0:	4798      	blx	r3
		udd_ctrl_init();
   85cd2:	4b58      	ldr	r3, [pc, #352]	; (85e34 <UDPHS_Handler+0x2c4>)
   85cd4:	4798      	blx	r3
   85cd6:	e7b9      	b.n	85c4c <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   85cd8:	4b57      	ldr	r3, [pc, #348]	; (85e38 <UDPHS_Handler+0x2c8>)
   85cda:	4798      	blx	r3
		udd_ack_setup_received(0);
   85cdc:	4b48      	ldr	r3, [pc, #288]	; (85e00 <UDPHS_Handler+0x290>)
   85cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85ce2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85ce6:	e7a2      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   85ce8:	4b53      	ldr	r3, [pc, #332]	; (85e38 <UDPHS_Handler+0x2c8>)
   85cea:	4798      	blx	r3
		udd_ack_setup_received(0);
   85cec:	4b44      	ldr	r3, [pc, #272]	; (85e00 <UDPHS_Handler+0x290>)
   85cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85cf2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   85cf6:	e79a      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85cf8:	2300      	movs	r3, #0
   85cfa:	4a4b      	ldr	r2, [pc, #300]	; (85e28 <UDPHS_Handler+0x2b8>)
   85cfc:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85cfe:	4a4b      	ldr	r2, [pc, #300]	; (85e2c <UDPHS_Handler+0x2bc>)
   85d00:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85d02:	4b43      	ldr	r3, [pc, #268]	; (85e10 <UDPHS_Handler+0x2a0>)
   85d04:	2202      	movs	r2, #2
   85d06:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   85d08:	4b4c      	ldr	r3, [pc, #304]	; (85e3c <UDPHS_Handler+0x2cc>)
   85d0a:	4798      	blx	r3
   85d0c:	e78f      	b.n	85c2e <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   85d0e:	4b4c      	ldr	r3, [pc, #304]	; (85e40 <UDPHS_Handler+0x2d0>)
   85d10:	4798      	blx	r3
			return;
   85d12:	e78c      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   85d14:	4b49      	ldr	r3, [pc, #292]	; (85e3c <UDPHS_Handler+0x2cc>)
   85d16:	4798      	blx	r3
		return true;
   85d18:	e789      	b.n	85c2e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85d1a:	4b3d      	ldr	r3, [pc, #244]	; (85e10 <UDPHS_Handler+0x2a0>)
   85d1c:	781b      	ldrb	r3, [r3, #0]
   85d1e:	2b01      	cmp	r3, #1
   85d20:	d00b      	beq.n	85d3a <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85d22:	2b02      	cmp	r3, #2
   85d24:	d001      	beq.n	85d2a <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85d26:	2b04      	cmp	r3, #4
   85d28:	d104      	bne.n	85d34 <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   85d2a:	4b41      	ldr	r3, [pc, #260]	; (85e30 <UDPHS_Handler+0x2c0>)
   85d2c:	4798      	blx	r3
		udd_ctrl_init();
   85d2e:	4b41      	ldr	r3, [pc, #260]	; (85e34 <UDPHS_Handler+0x2c4>)
   85d30:	4798      	blx	r3
		return;
   85d32:	e77c      	b.n	85c2e <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   85d34:	4b40      	ldr	r3, [pc, #256]	; (85e38 <UDPHS_Handler+0x2c8>)
   85d36:	4798      	blx	r3
   85d38:	e7f9      	b.n	85d2e <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   85d3a:	4b31      	ldr	r3, [pc, #196]	; (85e00 <UDPHS_Handler+0x290>)
   85d3c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   85d40:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85d44:	4b37      	ldr	r3, [pc, #220]	; (85e24 <UDPHS_Handler+0x2b4>)
   85d46:	899b      	ldrh	r3, [r3, #12]
   85d48:	4a38      	ldr	r2, [pc, #224]	; (85e2c <UDPHS_Handler+0x2bc>)
   85d4a:	8814      	ldrh	r4, [r2, #0]
   85d4c:	1822      	adds	r2, r4, r0
   85d4e:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85d50:	bfbc      	itt	lt
   85d52:	1b1b      	sublt	r3, r3, r4
   85d54:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85d56:	4b33      	ldr	r3, [pc, #204]	; (85e24 <UDPHS_Handler+0x2b4>)
   85d58:	689a      	ldr	r2, [r3, #8]
   85d5a:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   85d5c:	b170      	cbz	r0, 85d7c <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85d5e:	4b2e      	ldr	r3, [pc, #184]	; (85e18 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   85d60:	4619      	mov	r1, r3
   85d62:	3301      	adds	r3, #1
   85d64:	7809      	ldrb	r1, [r1, #0]
   85d66:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   85d6a:	b2d9      	uxtb	r1, r3
   85d6c:	4281      	cmp	r1, r0
   85d6e:	d3f7      	bcc.n	85d60 <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   85d70:	4404      	add	r4, r0
   85d72:	b2a4      	uxth	r4, r4
   85d74:	4b2d      	ldr	r3, [pc, #180]	; (85e2c <UDPHS_Handler+0x2bc>)
   85d76:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85d78:	2840      	cmp	r0, #64	; 0x40
   85d7a:	d00d      	beq.n	85d98 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85d7c:	4b29      	ldr	r3, [pc, #164]	; (85e24 <UDPHS_Handler+0x2b4>)
   85d7e:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85d80:	695b      	ldr	r3, [r3, #20]
   85d82:	b10b      	cbz	r3, 85d88 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   85d84:	4798      	blx	r3
   85d86:	b370      	cbz	r0, 85de6 <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   85d88:	4b1d      	ldr	r3, [pc, #116]	; (85e00 <UDPHS_Handler+0x290>)
   85d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   85d8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85d92:	4b2b      	ldr	r3, [pc, #172]	; (85e40 <UDPHS_Handler+0x2d0>)
   85d94:	4798      	blx	r3
		return;
   85d96:	e74a      	b.n	85c2e <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85d98:	4b22      	ldr	r3, [pc, #136]	; (85e24 <UDPHS_Handler+0x2b4>)
   85d9a:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   85d9c:	4b22      	ldr	r3, [pc, #136]	; (85e28 <UDPHS_Handler+0x2b8>)
   85d9e:	881b      	ldrh	r3, [r3, #0]
   85da0:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   85da2:	429a      	cmp	r2, r3
   85da4:	ddea      	ble.n	85d7c <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85da6:	4b1f      	ldr	r3, [pc, #124]	; (85e24 <UDPHS_Handler+0x2b4>)
   85da8:	899b      	ldrh	r3, [r3, #12]
   85daa:	42a3      	cmp	r3, r4
   85dac:	d04a      	beq.n	85e44 <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   85dae:	4b14      	ldr	r3, [pc, #80]	; (85e00 <UDPHS_Handler+0x290>)
   85db0:	f44f 7200 	mov.w	r2, #512	; 0x200
   85db4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   85db8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85dbc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85dc0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   85dc4:	b672      	cpsid	i
   85dc6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85dca:	480e      	ldr	r0, [pc, #56]	; (85e04 <UDPHS_Handler+0x294>)
   85dcc:	2400      	movs	r4, #0
   85dce:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   85dd0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85dd4:	2900      	cmp	r1, #0
   85dd6:	f47f af2a 	bne.w	85c2e <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   85dda:	2201      	movs	r2, #1
   85ddc:	7002      	strb	r2, [r0, #0]
   85dde:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85de2:	b662      	cpsie	i
}
   85de4:	e723      	b.n	85c2e <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   85de6:	4b14      	ldr	r3, [pc, #80]	; (85e38 <UDPHS_Handler+0x2c8>)
   85de8:	4798      	blx	r3
				udd_ack_out_received(0);
   85dea:	4b05      	ldr	r3, [pc, #20]	; (85e00 <UDPHS_Handler+0x290>)
   85dec:	f44f 7200 	mov.w	r2, #512	; 0x200
   85df0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   85df4:	e71b      	b.n	85c2e <UDPHS_Handler+0xbe>
   85df6:	bf00      	nop
   85df8:	00085531 	.word	0x00085531
   85dfc:	000855c1 	.word	0x000855c1
   85e00:	400a4000 	.word	0x400a4000
   85e04:	200006ee 	.word	0x200006ee
   85e08:	0008305d 	.word	0x0008305d
   85e0c:	000848c1 	.word	0x000848c1
   85e10:	20002310 	.word	0x20002310
   85e14:	20002df3 	.word	0x20002df3
   85e18:	20180000 	.word	0x20180000
   85e1c:	20180008 	.word	0x20180008
   85e20:	00084905 	.word	0x00084905
   85e24:	20002df4 	.word	0x20002df4
   85e28:	2000230e 	.word	0x2000230e
   85e2c:	2000230c 	.word	0x2000230c
   85e30:	000857f1 	.word	0x000857f1
   85e34:	00085731 	.word	0x00085731
   85e38:	00085785 	.word	0x00085785
   85e3c:	00085801 	.word	0x00085801
   85e40:	0008579d 	.word	0x0008579d
		if (!udd_g_ctrlreq.over_under_run) {
   85e44:	4b9d      	ldr	r3, [pc, #628]	; (860bc <UDPHS_Handler+0x54c>)
   85e46:	695b      	ldr	r3, [r3, #20]
   85e48:	b153      	cbz	r3, 85e60 <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   85e4a:	4798      	blx	r3
   85e4c:	b180      	cbz	r0, 85e70 <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85e4e:	499c      	ldr	r1, [pc, #624]	; (860c0 <UDPHS_Handler+0x550>)
   85e50:	4a9c      	ldr	r2, [pc, #624]	; (860c4 <UDPHS_Handler+0x554>)
   85e52:	880b      	ldrh	r3, [r1, #0]
   85e54:	8810      	ldrh	r0, [r2, #0]
   85e56:	4403      	add	r3, r0
   85e58:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85e5a:	2300      	movs	r3, #0
   85e5c:	8013      	strh	r3, [r2, #0]
   85e5e:	e7a6      	b.n	85dae <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   85e60:	4b99      	ldr	r3, [pc, #612]	; (860c8 <UDPHS_Handler+0x558>)
   85e62:	4798      	blx	r3
			udd_ack_out_received(0);
   85e64:	4b99      	ldr	r3, [pc, #612]	; (860cc <UDPHS_Handler+0x55c>)
   85e66:	f44f 7200 	mov.w	r2, #512	; 0x200
   85e6a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85e6e:	e6de      	b.n	85c2e <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   85e70:	4b95      	ldr	r3, [pc, #596]	; (860c8 <UDPHS_Handler+0x558>)
   85e72:	4798      	blx	r3
			udd_ack_out_received(0);
   85e74:	4b95      	ldr	r3, [pc, #596]	; (860cc <UDPHS_Handler+0x55c>)
   85e76:	f44f 7200 	mov.w	r2, #512	; 0x200
   85e7a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85e7e:	e6d6      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   85e80:	4b92      	ldr	r3, [pc, #584]	; (860cc <UDPHS_Handler+0x55c>)
   85e82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85e86:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   85e8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85e8e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85e92:	f47f aecc 	bne.w	85c2e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85e96:	4b8e      	ldr	r3, [pc, #568]	; (860d0 <UDPHS_Handler+0x560>)
   85e98:	781b      	ldrb	r3, [r3, #0]
   85e9a:	2b03      	cmp	r3, #3
   85e9c:	f47f aec7 	bne.w	85c2e <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   85ea0:	4b8a      	ldr	r3, [pc, #552]	; (860cc <UDPHS_Handler+0x55c>)
   85ea2:	2220      	movs	r2, #32
   85ea4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85ea8:	e6c1      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   85eaa:	4b88      	ldr	r3, [pc, #544]	; (860cc <UDPHS_Handler+0x55c>)
   85eac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85eb0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   85eb4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85eb8:	f413 7f00 	tst.w	r3, #512	; 0x200
   85ebc:	f47f aeb7 	bne.w	85c2e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85ec0:	4b83      	ldr	r3, [pc, #524]	; (860d0 <UDPHS_Handler+0x560>)
   85ec2:	781b      	ldrb	r3, [r3, #0]
   85ec4:	2b01      	cmp	r3, #1
   85ec6:	d007      	beq.n	85ed8 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85ec8:	2b04      	cmp	r3, #4
   85eca:	f47f aeb0 	bne.w	85c2e <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   85ece:	4b7f      	ldr	r3, [pc, #508]	; (860cc <UDPHS_Handler+0x55c>)
   85ed0:	2220      	movs	r2, #32
   85ed2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85ed6:	e6aa      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   85ed8:	4b7e      	ldr	r3, [pc, #504]	; (860d4 <UDPHS_Handler+0x564>)
   85eda:	4798      	blx	r3
   85edc:	e6a7      	b.n	85c2e <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   85ede:	4b7e      	ldr	r3, [pc, #504]	; (860d8 <UDPHS_Handler+0x568>)
   85ee0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   85ee4:	68d9      	ldr	r1, [r3, #12]
   85ee6:	f011 0f01 	tst.w	r1, #1
   85eea:	f47f aea0 	bne.w	85c2e <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   85eee:	4877      	ldr	r0, [pc, #476]	; (860cc <UDPHS_Handler+0x55c>)
   85ef0:	6901      	ldr	r1, [r0, #16]
   85ef2:	ea21 0606 	bic.w	r6, r1, r6
   85ef6:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85ef8:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   85efa:	0c1b      	lsrs	r3, r3, #16
   85efc:	d008      	beq.n	85f10 <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   85efe:	4977      	ldr	r1, [pc, #476]	; (860dc <UDPHS_Handler+0x56c>)
   85f00:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   85f04:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   85f08:	68e0      	ldr	r0, [r4, #12]
   85f0a:	1ac3      	subs	r3, r0, r3
   85f0c:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   85f0e:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   85f10:	4610      	mov	r0, r2
   85f12:	4b73      	ldr	r3, [pc, #460]	; (860e0 <UDPHS_Handler+0x570>)
   85f14:	4798      	blx	r3
			return true;
   85f16:	e68a      	b.n	85c2e <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   85f18:	0163      	lsls	r3, r4, #5
   85f1a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85f1e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
   85f26:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   85f2a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   85f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   85f32:	2100      	movs	r1, #0
   85f34:	4869      	ldr	r0, [pc, #420]	; (860dc <UDPHS_Handler+0x56c>)
   85f36:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   85f3a:	4b6a      	ldr	r3, [pc, #424]	; (860e4 <UDPHS_Handler+0x574>)
   85f3c:	4798      	blx	r3
				return true;
   85f3e:	e676      	b.n	85c2e <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85f40:	3301      	adds	r3, #1
   85f42:	2b07      	cmp	r3, #7
   85f44:	f000 80dc 	beq.w	86100 <UDPHS_Handler+0x590>
   85f48:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   85f4a:	461c      	mov	r4, r3
   85f4c:	1e5d      	subs	r5, r3, #1
   85f4e:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85f50:	690f      	ldr	r7, [r1, #16]
   85f52:	fa0c f605 	lsl.w	r6, ip, r5
   85f56:	4237      	tst	r7, r6
   85f58:	d002      	beq.n	85f60 <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85f5a:	6948      	ldr	r0, [r1, #20]
   85f5c:	4206      	tst	r6, r0
   85f5e:	d1be      	bne.n	85ede <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85f60:	690f      	ldr	r7, [r1, #16]
   85f62:	fa0e f604 	lsl.w	r6, lr, r4
   85f66:	4237      	tst	r7, r6
   85f68:	d0ea      	beq.n	85f40 <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   85f6a:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   85f6e:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   85f72:	f410 6f00 	tst.w	r0, #2048	; 0x800
   85f76:	d006      	beq.n	85f86 <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   85f78:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   85f7c:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   85f80:	f410 6f00 	tst.w	r0, #2048	; 0x800
   85f84:	d0c8      	beq.n	85f18 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   85f86:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f8a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85f8e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   85f92:	d0d5      	beq.n	85f40 <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   85f94:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f98:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85f9c:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   85fa0:	d1ce      	bne.n	85f40 <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   85fa2:	4b4a      	ldr	r3, [pc, #296]	; (860cc <UDPHS_Handler+0x55c>)
   85fa4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   85fa8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85fac:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   85fb0:	691a      	ldr	r2, [r3, #16]
   85fb2:	ea22 0606 	bic.w	r6, r2, r6
   85fb6:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   85fb8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   85fbc:	4b47      	ldr	r3, [pc, #284]	; (860dc <UDPHS_Handler+0x56c>)
   85fbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   85fc2:	f898 3014 	ldrb.w	r3, [r8, #20]
   85fc6:	f36f 0382 	bfc	r3, #2, #1
   85fca:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   85fce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   85fd2:	f023 0302 	bic.w	r3, r3, #2
   85fd6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   85fda:	2320      	movs	r3, #32
   85fdc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   85fe0:	2340      	movs	r3, #64	; 0x40
   85fe2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   85fe6:	e622      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ack_reset();
   85fe8:	4b38      	ldr	r3, [pc, #224]	; (860cc <UDPHS_Handler+0x55c>)
   85fea:	2210      	movs	r2, #16
   85fec:	619a      	str	r2, [r3, #24]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85fee:	4d3b      	ldr	r5, [pc, #236]	; (860dc <UDPHS_Handler+0x56c>)
   85ff0:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85ff2:	2701      	movs	r7, #1
   85ff4:	4e3b      	ldr	r6, [pc, #236]	; (860e4 <UDPHS_Handler+0x574>)
   85ff6:	3401      	adds	r4, #1
   85ff8:	b2e4      	uxtb	r4, r4
   85ffa:	4622      	mov	r2, r4
   85ffc:	4639      	mov	r1, r7
   85ffe:	4628      	mov	r0, r5
   86000:	47b0      	blx	r6
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   86002:	3518      	adds	r5, #24
   86004:	2c06      	cmp	r4, #6
   86006:	d1f6      	bne.n	85ff6 <UDPHS_Handler+0x486>
		udc_reset();
   86008:	4b37      	ldr	r3, [pc, #220]	; (860e8 <UDPHS_Handler+0x578>)
   8600a:	4798      	blx	r3
	udd_configure_address(0);
   8600c:	4b2f      	ldr	r3, [pc, #188]	; (860cc <UDPHS_Handler+0x55c>)
   8600e:	681a      	ldr	r2, [r3, #0]
   86010:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86014:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   86016:	681a      	ldr	r2, [r3, #0]
   86018:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8601c:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   8601e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   86022:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   86026:	f022 0203 	bic.w	r2, r2, #3
   8602a:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   8602e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   86032:	2201      	movs	r2, #1
   86034:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86038:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   8603c:	b672      	cpsid	i
   8603e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86042:	4a2a      	ldr	r2, [pc, #168]	; (860ec <UDPHS_Handler+0x57c>)
   86044:	2000      	movs	r0, #0
   86046:	7010      	strb	r0, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   86048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8604c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   86050:	f44f 7200 	mov.w	r2, #512	; 0x200
   86054:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   86058:	691a      	ldr	r2, [r3, #16]
   8605a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8605e:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   86060:	b929      	cbnz	r1, 8606e <UDPHS_Handler+0x4fe>
		cpu_irq_enable();
   86062:	4b22      	ldr	r3, [pc, #136]	; (860ec <UDPHS_Handler+0x57c>)
   86064:	2201      	movs	r2, #1
   86066:	701a      	strb	r2, [r3, #0]
   86068:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8606c:	b662      	cpsie	i
		udd_ctrl_init();
   8606e:	4b20      	ldr	r3, [pc, #128]	; (860f0 <UDPHS_Handler+0x580>)
   86070:	4798      	blx	r3
		udd_enable_sof_interrupt();
   86072:	4b16      	ldr	r3, [pc, #88]	; (860cc <UDPHS_Handler+0x55c>)
   86074:	691a      	ldr	r2, [r3, #16]
   86076:	f042 0208 	orr.w	r2, r2, #8
   8607a:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   8607c:	691a      	ldr	r2, [r3, #16]
   8607e:	f042 0204 	orr.w	r2, r2, #4
   86082:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   86084:	691a      	ldr	r2, [r3, #16]
   86086:	f042 0202 	orr.w	r2, r2, #2
   8608a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   8608c:	e5cf      	b.n	85c2e <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   8608e:	4b0f      	ldr	r3, [pc, #60]	; (860cc <UDPHS_Handler+0x55c>)
   86090:	2220      	movs	r2, #32
   86092:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   86094:	691a      	ldr	r2, [r3, #16]
   86096:	f022 0202 	bic.w	r2, r2, #2
   8609a:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   8609c:	691a      	ldr	r2, [r3, #16]
   8609e:	f042 0220 	orr.w	r2, r2, #32
   860a2:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   860a4:	2202      	movs	r2, #2
   860a6:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   860a8:	201d      	movs	r0, #29
   860aa:	4b12      	ldr	r3, [pc, #72]	; (860f4 <UDPHS_Handler+0x584>)
   860ac:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   860ae:	4b12      	ldr	r3, [pc, #72]	; (860f8 <UDPHS_Handler+0x588>)
   860b0:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   860b2:	2000      	movs	r0, #0
   860b4:	4b11      	ldr	r3, [pc, #68]	; (860fc <UDPHS_Handler+0x58c>)
   860b6:	4798      	blx	r3
		goto udd_interrupt_end;
   860b8:	e5b9      	b.n	85c2e <UDPHS_Handler+0xbe>
   860ba:	bf00      	nop
   860bc:	20002df4 	.word	0x20002df4
   860c0:	2000230e 	.word	0x2000230e
   860c4:	2000230c 	.word	0x2000230c
   860c8:	00085785 	.word	0x00085785
   860cc:	400a4000 	.word	0x400a4000
   860d0:	20002310 	.word	0x20002310
   860d4:	0008579d 	.word	0x0008579d
   860d8:	400a4300 	.word	0x400a4300
   860dc:	20002314 	.word	0x20002314
   860e0:	000859a1 	.word	0x000859a1
   860e4:	00085969 	.word	0x00085969
   860e8:	00084879 	.word	0x00084879
   860ec:	200006ee 	.word	0x200006ee
   860f0:	00085731 	.word	0x00085731
   860f4:	00085565 	.word	0x00085565
   860f8:	00083039 	.word	0x00083039
   860fc:	000856bd 	.word	0x000856bd
	if (Is_udd_reset()) {
   86100:	4b18      	ldr	r3, [pc, #96]	; (86164 <UDPHS_Handler+0x5f4>)
   86102:	695b      	ldr	r3, [r3, #20]
   86104:	f013 0f10 	tst.w	r3, #16
   86108:	f47f af6e 	bne.w	85fe8 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8610c:	4b15      	ldr	r3, [pc, #84]	; (86164 <UDPHS_Handler+0x5f4>)
   8610e:	691b      	ldr	r3, [r3, #16]
   86110:	f013 0f02 	tst.w	r3, #2
   86114:	d004      	beq.n	86120 <UDPHS_Handler+0x5b0>
   86116:	4b13      	ldr	r3, [pc, #76]	; (86164 <UDPHS_Handler+0x5f4>)
   86118:	695b      	ldr	r3, [r3, #20]
   8611a:	f013 0f02 	tst.w	r3, #2
   8611e:	d1b6      	bne.n	8608e <UDPHS_Handler+0x51e>
	if (Is_udd_wake_up()) {
   86120:	4b10      	ldr	r3, [pc, #64]	; (86164 <UDPHS_Handler+0x5f4>)
   86122:	695b      	ldr	r3, [r3, #20]
   86124:	f013 0f20 	tst.w	r3, #32
   86128:	f43f ad81 	beq.w	85c2e <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   8612c:	2001      	movs	r0, #1
   8612e:	4b0e      	ldr	r3, [pc, #56]	; (86168 <UDPHS_Handler+0x5f8>)
   86130:	4798      	blx	r3
		udd_ack_suspend();
   86132:	4b0c      	ldr	r3, [pc, #48]	; (86164 <UDPHS_Handler+0x5f4>)
   86134:	2202      	movs	r2, #2
   86136:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   86138:	2220      	movs	r2, #32
   8613a:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   8613c:	691a      	ldr	r2, [r3, #16]
   8613e:	f022 0220 	bic.w	r2, r2, #32
   86142:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   86144:	691a      	ldr	r2, [r3, #16]
   86146:	f042 0202 	orr.w	r2, r2, #2
   8614a:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   8614c:	691a      	ldr	r2, [r3, #16]
   8614e:	f042 0208 	orr.w	r2, r2, #8
   86152:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   86154:	691a      	ldr	r2, [r3, #16]
   86156:	f042 0204 	orr.w	r2, r2, #4
   8615a:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   8615c:	4b03      	ldr	r3, [pc, #12]	; (8616c <UDPHS_Handler+0x5fc>)
   8615e:	4798      	blx	r3
		goto udd_interrupt_end;
   86160:	e565      	b.n	85c2e <UDPHS_Handler+0xbe>
   86162:	bf00      	nop
   86164:	400a4000 	.word	0x400a4000
   86168:	000856bd 	.word	0x000856bd
   8616c:	00083051 	.word	0x00083051

00086170 <udd_attach>:
{
   86170:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86172:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   86176:	b672      	cpsid	i
   86178:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8617c:	4b1d      	ldr	r3, [pc, #116]	; (861f4 <udd_attach+0x84>)
   8617e:	2200      	movs	r2, #0
   86180:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   86182:	2001      	movs	r0, #1
   86184:	4b1c      	ldr	r3, [pc, #112]	; (861f8 <udd_attach+0x88>)
   86186:	4798      	blx	r3
	udd_enable_periph_ck();
   86188:	201d      	movs	r0, #29
   8618a:	4b1c      	ldr	r3, [pc, #112]	; (861fc <udd_attach+0x8c>)
   8618c:	4798      	blx	r3
	udd_attach_device();
   8618e:	4b1c      	ldr	r3, [pc, #112]	; (86200 <udd_attach+0x90>)
   86190:	681a      	ldr	r2, [r3, #0]
   86192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   86196:	601a      	str	r2, [r3, #0]
   86198:	681a      	ldr	r2, [r3, #0]
   8619a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8619e:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   861a0:	691a      	ldr	r2, [r3, #16]
   861a2:	f042 0210 	orr.w	r2, r2, #16
   861a6:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   861a8:	691a      	ldr	r2, [r3, #16]
   861aa:	f042 0202 	orr.w	r2, r2, #2
   861ae:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   861b0:	691a      	ldr	r2, [r3, #16]
   861b2:	f042 0220 	orr.w	r2, r2, #32
   861b6:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   861b8:	691a      	ldr	r2, [r3, #16]
   861ba:	f042 0208 	orr.w	r2, r2, #8
   861be:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   861c0:	691a      	ldr	r2, [r3, #16]
   861c2:	f042 0204 	orr.w	r2, r2, #4
   861c6:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   861c8:	2208      	movs	r2, #8
   861ca:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   861cc:	2204      	movs	r2, #4
   861ce:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   861d0:	2210      	movs	r2, #16
   861d2:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   861d4:	2202      	movs	r2, #2
   861d6:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   861d8:	2220      	movs	r2, #32
   861da:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   861dc:	201d      	movs	r0, #29
   861de:	4b09      	ldr	r3, [pc, #36]	; (86204 <udd_attach+0x94>)
   861e0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   861e2:	b92c      	cbnz	r4, 861f0 <udd_attach+0x80>
		cpu_irq_enable();
   861e4:	4b03      	ldr	r3, [pc, #12]	; (861f4 <udd_attach+0x84>)
   861e6:	2201      	movs	r2, #1
   861e8:	701a      	strb	r2, [r3, #0]
   861ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   861ee:	b662      	cpsie	i
}
   861f0:	bd10      	pop	{r4, pc}
   861f2:	bf00      	nop
   861f4:	200006ee 	.word	0x200006ee
   861f8:	000856bd 	.word	0x000856bd
   861fc:	00085531 	.word	0x00085531
   86200:	400a4000 	.word	0x400a4000
   86204:	00085565 	.word	0x00085565

00086208 <udd_enable>:
{
   86208:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   8620a:	4b2a      	ldr	r3, [pc, #168]	; (862b4 <udd_enable+0xac>)
   8620c:	4798      	blx	r3
	udd_enable_periph_ck();
   8620e:	201d      	movs	r0, #29
   86210:	4b29      	ldr	r3, [pc, #164]	; (862b8 <udd_enable+0xb0>)
   86212:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86214:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   86218:	b672      	cpsid	i
   8621a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8621e:	2300      	movs	r3, #0
   86220:	4a26      	ldr	r2, [pc, #152]	; (862bc <udd_enable+0xb4>)
   86222:	7013      	strb	r3, [r2, #0]
	udd_enable_periph();
   86224:	4926      	ldr	r1, [pc, #152]	; (862c0 <udd_enable+0xb8>)
   86226:	680a      	ldr	r2, [r1, #0]
   86228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8622c:	600a      	str	r2, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8622e:	4a25      	ldr	r2, [pc, #148]	; (862c4 <udd_enable+0xbc>)
   86230:	2150      	movs	r1, #80	; 0x50
   86232:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   86236:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8623a:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   8623c:	4822      	ldr	r0, [pc, #136]	; (862c8 <udd_enable+0xc0>)
   8623e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   86242:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   86246:	7d12      	ldrb	r2, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   86248:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8624c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   86250:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   86254:	f36f 0282 	bfc	r2, #2, #1
   86258:	750a      	strb	r2, [r1, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8625a:	3301      	adds	r3, #1
   8625c:	2b06      	cmp	r3, #6
   8625e:	d1ee      	bne.n	8623e <udd_enable+0x36>
	udd_high_speed_enable();
   86260:	4a17      	ldr	r2, [pc, #92]	; (862c0 <udd_enable+0xb8>)
   86262:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86266:	f023 0303 	bic.w	r3, r3, #3
   8626a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8626e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   86272:	4b16      	ldr	r3, [pc, #88]	; (862cc <udd_enable+0xc4>)
   86274:	4798      	blx	r3
	udd_b_idle = false;
   86276:	2300      	movs	r3, #0
   86278:	4a15      	ldr	r2, [pc, #84]	; (862d0 <udd_enable+0xc8>)
   8627a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8627c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   86280:	b672      	cpsid	i
   86282:	f3bf 8f5f 	dmb	sy
   86286:	4a0d      	ldr	r2, [pc, #52]	; (862bc <udd_enable+0xb4>)
   86288:	7013      	strb	r3, [r2, #0]
   8628a:	4a12      	ldr	r2, [pc, #72]	; (862d4 <udd_enable+0xcc>)
   8628c:	78d3      	ldrb	r3, [r2, #3]
   8628e:	3301      	adds	r3, #1
   86290:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   86292:	b929      	cbnz	r1, 862a0 <udd_enable+0x98>
		cpu_irq_enable();
   86294:	4b09      	ldr	r3, [pc, #36]	; (862bc <udd_enable+0xb4>)
   86296:	2201      	movs	r2, #1
   86298:	701a      	strb	r2, [r3, #0]
   8629a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8629e:	b662      	cpsie	i
	udd_attach();
   862a0:	4b0d      	ldr	r3, [pc, #52]	; (862d8 <udd_enable+0xd0>)
   862a2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   862a4:	b92c      	cbnz	r4, 862b2 <udd_enable+0xaa>
		cpu_irq_enable();
   862a6:	4b05      	ldr	r3, [pc, #20]	; (862bc <udd_enable+0xb4>)
   862a8:	2201      	movs	r2, #1
   862aa:	701a      	strb	r2, [r3, #0]
   862ac:	f3bf 8f5f 	dmb	sy
   862b0:	b662      	cpsie	i
}
   862b2:	bd10      	pop	{r4, pc}
   862b4:	00084571 	.word	0x00084571
   862b8:	00085531 	.word	0x00085531
   862bc:	200006ee 	.word	0x200006ee
   862c0:	400a4000 	.word	0x400a4000
   862c4:	e000e100 	.word	0xe000e100
   862c8:	20002314 	.word	0x20002314
   862cc:	000855ad 	.word	0x000855ad
   862d0:	2000230a 	.word	0x2000230a
   862d4:	20002de0 	.word	0x20002de0
   862d8:	00086171 	.word	0x00086171

000862dc <udd_detach>:
{
   862dc:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   862de:	201d      	movs	r0, #29
   862e0:	4b08      	ldr	r3, [pc, #32]	; (86304 <udd_detach+0x28>)
   862e2:	4798      	blx	r3
	udd_detach_device();
   862e4:	4b08      	ldr	r3, [pc, #32]	; (86308 <udd_detach+0x2c>)
   862e6:	681a      	ldr	r2, [r3, #0]
   862e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   862ec:	601a      	str	r2, [r3, #0]
   862ee:	681a      	ldr	r2, [r3, #0]
   862f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   862f4:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   862f6:	201d      	movs	r0, #29
   862f8:	4b04      	ldr	r3, [pc, #16]	; (8630c <udd_detach+0x30>)
   862fa:	4798      	blx	r3
	udd_sleep_mode(false);
   862fc:	2000      	movs	r0, #0
   862fe:	4b04      	ldr	r3, [pc, #16]	; (86310 <udd_detach+0x34>)
   86300:	4798      	blx	r3
}
   86302:	bd08      	pop	{r3, pc}
   86304:	00085531 	.word	0x00085531
   86308:	400a4000 	.word	0x400a4000
   8630c:	00085565 	.word	0x00085565
   86310:	000856bd 	.word	0x000856bd

00086314 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   86314:	4b02      	ldr	r3, [pc, #8]	; (86320 <udd_is_high_speed+0xc>)
   86316:	6958      	ldr	r0, [r3, #20]
}
   86318:	f000 0001 	and.w	r0, r0, #1
   8631c:	4770      	bx	lr
   8631e:	bf00      	nop
   86320:	400a4000 	.word	0x400a4000

00086324 <udd_set_address>:
	udd_disable_address();
   86324:	4b08      	ldr	r3, [pc, #32]	; (86348 <udd_set_address+0x24>)
   86326:	681a      	ldr	r2, [r3, #0]
   86328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   8632c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   8632e:	681a      	ldr	r2, [r3, #0]
   86330:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86334:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86338:	4302      	orrs	r2, r0
   8633a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8633c:	681a      	ldr	r2, [r3, #0]
   8633e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   86342:	601a      	str	r2, [r3, #0]
}
   86344:	4770      	bx	lr
   86346:	bf00      	nop
   86348:	400a4000 	.word	0x400a4000

0008634c <udd_getaddress>:
	return udd_get_configured_address();
   8634c:	4b02      	ldr	r3, [pc, #8]	; (86358 <udd_getaddress+0xc>)
   8634e:	6818      	ldr	r0, [r3, #0]
}
   86350:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86354:	4770      	bx	lr
   86356:	bf00      	nop
   86358:	400a4000 	.word	0x400a4000

0008635c <udd_get_frame_number>:
	return udd_frame_number();
   8635c:	4b02      	ldr	r3, [pc, #8]	; (86368 <udd_get_frame_number+0xc>)
   8635e:	6858      	ldr	r0, [r3, #4]
}
   86360:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   86364:	4770      	bx	lr
   86366:	bf00      	nop
   86368:	400a4000 	.word	0x400a4000

0008636c <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   8636c:	4b02      	ldr	r3, [pc, #8]	; (86378 <udd_get_micro_frame_number+0xc>)
   8636e:	6858      	ldr	r0, [r3, #4]
}
   86370:	f000 0007 	and.w	r0, r0, #7
   86374:	4770      	bx	lr
   86376:	bf00      	nop
   86378:	400a4000 	.word	0x400a4000

0008637c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   8637c:	4b01      	ldr	r3, [pc, #4]	; (86384 <udd_set_setup_payload+0x8>)
   8637e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   86380:	8199      	strh	r1, [r3, #12]
}
   86382:	4770      	bx	lr
   86384:	20002df4 	.word	0x20002df4

00086388 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86388:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8638c:	2a06      	cmp	r2, #6
   8638e:	d900      	bls.n	86392 <udd_ep_free+0xa>
   86390:	4770      	bx	lr
{
   86392:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   86394:	0153      	lsls	r3, r2, #5
   86396:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   8639a:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   8639e:	2101      	movs	r1, #1
   863a0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   863a4:	4603      	mov	r3, r0
   863a6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   863aa:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   863ae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   863b2:	1e55      	subs	r5, r2, #1
   863b4:	4c08      	ldr	r4, [pc, #32]	; (863d8 <udd_ep_free+0x50>)
   863b6:	fa05 f601 	lsl.w	r6, r5, r1
   863ba:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   863be:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   863c2:	4b06      	ldr	r3, [pc, #24]	; (863dc <udd_ep_free+0x54>)
   863c4:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   863c6:	4435      	add	r5, r6
   863c8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   863cc:	7d23      	ldrb	r3, [r4, #20]
   863ce:	f36f 0382 	bfc	r3, #2, #1
   863d2:	7523      	strb	r3, [r4, #20]
}
   863d4:	bd70      	pop	{r4, r5, r6, pc}
   863d6:	bf00      	nop
   863d8:	20002314 	.word	0x20002314
   863dc:	00085969 	.word	0x00085969

000863e0 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   863e0:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   863e4:	0143      	lsls	r3, r0, #5
   863e6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   863ea:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   863ee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   863f2:	f013 0f20 	tst.w	r3, #32
   863f6:	d109      	bne.n	8640c <udd_ep_is_halted+0x2c>
   863f8:	3801      	subs	r0, #1
   863fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   863fe:	4b04      	ldr	r3, [pc, #16]	; (86410 <udd_ep_is_halted+0x30>)
   86400:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   86404:	7d00      	ldrb	r0, [r0, #20]
   86406:	f3c0 0080 	ubfx	r0, r0, #2, #1
   8640a:	4770      	bx	lr
   8640c:	2001      	movs	r0, #1
}
   8640e:	4770      	bx	lr
   86410:	20002314 	.word	0x20002314

00086414 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86414:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   86418:	2b06      	cmp	r3, #6
   8641a:	d851      	bhi.n	864c0 <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8641c:	015a      	lsls	r2, r3, #5
   8641e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   86422:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   86426:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8642a:	f012 0f20 	tst.w	r2, #32
   8642e:	d149      	bne.n	864c4 <udd_ep_set_halt+0xb0>
{
   86430:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   86432:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   86434:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   86438:	4a25      	ldr	r2, [pc, #148]	; (864d0 <udd_ep_set_halt+0xbc>)
   8643a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   8643e:	7d12      	ldrb	r2, [r2, #20]
   86440:	f012 0f04 	tst.w	r2, #4
   86444:	d140      	bne.n	864c8 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   86446:	f012 0f01 	tst.w	r2, #1
   8644a:	d13f      	bne.n	864cc <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8644c:	f010 0f80 	tst.w	r0, #128	; 0x80
   86450:	d114      	bne.n	8647c <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   86452:	015b      	lsls	r3, r3, #5
   86454:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86458:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8645c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   86460:	f022 0202 	bic.w	r2, r2, #2
   86464:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   86468:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8646c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   86470:	2220      	movs	r2, #32
   86472:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   86476:	2001      	movs	r0, #1
}
   86478:	bc10      	pop	{r4}
   8647a:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8647c:	015a      	lsls	r2, r3, #5
   8647e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   86482:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   86486:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8648a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   8648e:	d0e0      	beq.n	86452 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   86490:	4a0f      	ldr	r2, [pc, #60]	; (864d0 <udd_ep_set_halt+0xbc>)
   86492:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   86496:	7d0a      	ldrb	r2, [r1, #20]
   86498:	f042 0204 	orr.w	r2, r2, #4
   8649c:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   8649e:	490d      	ldr	r1, [pc, #52]	; (864d4 <udd_ep_set_halt+0xc0>)
   864a0:	f103 0208 	add.w	r2, r3, #8
   864a4:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   864a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   864ac:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   864ae:	6908      	ldr	r0, [r1, #16]
   864b0:	f44f 7280 	mov.w	r2, #256	; 0x100
   864b4:	fa02 f303 	lsl.w	r3, r2, r3
   864b8:	4303      	orrs	r3, r0
   864ba:	610b      	str	r3, [r1, #16]
			return true;
   864bc:	2001      	movs	r0, #1
   864be:	e7db      	b.n	86478 <udd_ep_set_halt+0x64>
		return false;
   864c0:	2000      	movs	r0, #0
   864c2:	4770      	bx	lr
		return true; // Already STALL
   864c4:	2001      	movs	r0, #1
}
   864c6:	4770      	bx	lr
		return true; // Already STALL
   864c8:	2001      	movs	r0, #1
   864ca:	e7d5      	b.n	86478 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   864cc:	2000      	movs	r0, #0
   864ce:	e7d3      	b.n	86478 <udd_ep_set_halt+0x64>
   864d0:	20002314 	.word	0x20002314
   864d4:	400a4000 	.word	0x400a4000

000864d8 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   864d8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   864dc:	2806      	cmp	r0, #6
   864de:	d862      	bhi.n	865a6 <udd_ep_clear_halt+0xce>
{
   864e0:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   864e2:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   864e4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   864e8:	4b37      	ldr	r3, [pc, #220]	; (865c8 <udd_ep_clear_halt+0xf0>)
   864ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   864ee:	7d1b      	ldrb	r3, [r3, #20]
   864f0:	f013 0f04 	tst.w	r3, #4
   864f4:	d05b      	beq.n	865ae <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   864f6:	460b      	mov	r3, r1
   864f8:	4933      	ldr	r1, [pc, #204]	; (865c8 <udd_ep_clear_halt+0xf0>)
   864fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   864fe:	7d19      	ldrb	r1, [r3, #20]
   86500:	f36f 0182 	bfc	r1, #2, #1
   86504:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   86506:	4b31      	ldr	r3, [pc, #196]	; (865cc <udd_ep_clear_halt+0xf4>)
   86508:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   8650c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   86510:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   86514:	6919      	ldr	r1, [r3, #16]
   86516:	f44f 7480 	mov.w	r4, #256	; 0x100
   8651a:	4084      	lsls	r4, r0
   8651c:	ea21 0104 	bic.w	r1, r1, r4
   86520:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   86522:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   86526:	f013 0f20 	tst.w	r3, #32
   8652a:	d024      	beq.n	86576 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   8652c:	0143      	lsls	r3, r0, #5
   8652e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86532:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86536:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8653a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8653e:	d00b      	beq.n	86558 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   86540:	0143      	lsls	r3, r0, #5
   86542:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86546:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8654a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8654e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   86552:	2140      	movs	r1, #64	; 0x40
   86554:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   86558:	0143      	lsls	r3, r0, #5
   8655a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8655e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86562:	2120      	movs	r1, #32
   86564:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   86568:	4618      	mov	r0, r3
   8656a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   8656e:	f043 0302 	orr.w	r3, r3, #2
   86572:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   86576:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   8657a:	4913      	ldr	r1, [pc, #76]	; (865c8 <udd_ep_clear_halt+0xf0>)
   8657c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   86580:	7d1b      	ldrb	r3, [r3, #20]
   86582:	f013 0f01 	tst.w	r3, #1
   86586:	d010      	beq.n	865aa <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   86588:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   8658c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   86590:	7d18      	ldrb	r0, [r3, #20]
   86592:	f36f 0000 	bfc	r0, #0, #1
   86596:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   86598:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   8659c:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   865a0:	4798      	blx	r3
	return true;
   865a2:	2001      	movs	r0, #1
   865a4:	e002      	b.n	865ac <udd_ep_clear_halt+0xd4>
		return false;
   865a6:	2000      	movs	r0, #0
}
   865a8:	4770      	bx	lr
	return true;
   865aa:	2001      	movs	r0, #1
}
   865ac:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   865ae:	0143      	lsls	r3, r0, #5
   865b0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   865b4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   865b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   865bc:	f013 0f20 	tst.w	r3, #32
   865c0:	d1b4      	bne.n	8652c <udd_ep_clear_halt+0x54>
	return true;
   865c2:	2001      	movs	r0, #1
   865c4:	e7f2      	b.n	865ac <udd_ep_clear_halt+0xd4>
   865c6:	bf00      	nop
   865c8:	20002314 	.word	0x20002314
   865cc:	400a4000 	.word	0x400a4000

000865d0 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   865d0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   865d4:	2806      	cmp	r0, #6
   865d6:	d868      	bhi.n	866aa <udd_ep_run+0xda>
{
   865d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   865da:	0144      	lsls	r4, r0, #5
   865dc:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   865e0:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   865e4:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   865e8:	f014 0f01 	tst.w	r4, #1
   865ec:	d05f      	beq.n	866ae <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   865ee:	0144      	lsls	r4, r0, #5
   865f0:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   865f4:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   865f8:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   865fc:	f014 0f20 	tst.w	r4, #32
   86600:	d157      	bne.n	866b2 <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   86602:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   86604:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   86608:	4d2d      	ldr	r5, [pc, #180]	; (866c0 <udd_ep_run+0xf0>)
   8660a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   8660e:	7d2d      	ldrb	r5, [r5, #20]
   86610:	f015 0f04 	tst.w	r5, #4
   86614:	d14f      	bne.n	866b6 <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86616:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   8661a:	b672      	cpsid	i
   8661c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86620:	4d28      	ldr	r5, [pc, #160]	; (866c4 <udd_ep_run+0xf4>)
   86622:	2600      	movs	r6, #0
   86624:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   86626:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8662a:	4e25      	ldr	r6, [pc, #148]	; (866c0 <udd_ep_run+0xf0>)
   8662c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   86630:	7d2d      	ldrb	r5, [r5, #20]
   86632:	f015 0f01 	tst.w	r5, #1
   86636:	d121      	bne.n	8667c <udd_ep_run+0xac>
	ptr_job->busy = true;
   86638:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8663c:	4e20      	ldr	r6, [pc, #128]	; (866c0 <udd_ep_run+0xf0>)
   8663e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   86642:	7d2e      	ldrb	r6, [r5, #20]
   86644:	f046 0601 	orr.w	r6, r6, #1
   86648:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8664a:	b92f      	cbnz	r7, 86658 <udd_ep_run+0x88>
		cpu_irq_enable();
   8664c:	4d1d      	ldr	r5, [pc, #116]	; (866c4 <udd_ep_run+0xf4>)
   8664e:	2601      	movs	r6, #1
   86650:	702e      	strb	r6, [r5, #0]
   86652:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   86656:	b662      	cpsie	i
	ptr_job->buf = buf;
   86658:	4e19      	ldr	r6, [pc, #100]	; (866c0 <udd_ep_run+0xf0>)
   8665a:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   8665e:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   86662:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   86664:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   86666:	2200      	movs	r2, #0
   86668:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   8666a:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   8666c:	9a06      	ldr	r2, [sp, #24]
   8666e:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   86672:	b961      	cbnz	r1, 8668e <udd_ep_run+0xbe>
   86674:	fab3 f383 	clz	r3, r3
   86678:	095b      	lsrs	r3, r3, #5
   8667a:	e009      	b.n	86690 <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   8667c:	b9ef      	cbnz	r7, 866ba <udd_ep_run+0xea>
		cpu_irq_enable();
   8667e:	4b11      	ldr	r3, [pc, #68]	; (866c4 <udd_ep_run+0xf4>)
   86680:	2201      	movs	r2, #1
   86682:	701a      	strb	r2, [r3, #0]
   86684:	f3bf 8f5f 	dmb	sy
   86688:	b662      	cpsie	i
		return false; // Job already on going
   8668a:	2000      	movs	r0, #0
}
   8668c:	e010      	b.n	866b0 <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8668e:	2301      	movs	r3, #1
   86690:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   86694:	4a0a      	ldr	r2, [pc, #40]	; (866c0 <udd_ep_run+0xf0>)
   86696:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   8669a:	7d22      	ldrb	r2, [r4, #20]
   8669c:	f363 0241 	bfi	r2, r3, #1, #1
   866a0:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   866a2:	4b09      	ldr	r3, [pc, #36]	; (866c8 <udd_ep_run+0xf8>)
   866a4:	4798      	blx	r3
	return true;
   866a6:	2001      	movs	r0, #1
   866a8:	e002      	b.n	866b0 <udd_ep_run+0xe0>
		return false;
   866aa:	2000      	movs	r0, #0
}
   866ac:	4770      	bx	lr
		return false; // Endpoint is halted
   866ae:	2000      	movs	r0, #0
}
   866b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   866b2:	2000      	movs	r0, #0
   866b4:	e7fc      	b.n	866b0 <udd_ep_run+0xe0>
   866b6:	2000      	movs	r0, #0
   866b8:	e7fa      	b.n	866b0 <udd_ep_run+0xe0>
		return false; // Job already on going
   866ba:	2000      	movs	r0, #0
   866bc:	e7f8      	b.n	866b0 <udd_ep_run+0xe0>
   866be:	bf00      	nop
   866c0:	20002314 	.word	0x20002314
   866c4:	200006ee 	.word	0x200006ee
   866c8:	000859a1 	.word	0x000859a1

000866cc <udd_ep_alloc>:
{
   866cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   866d0:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   866d2:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   866d6:	2d06      	cmp	r5, #6
   866d8:	f200 812a 	bhi.w	86930 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   866dc:	016c      	lsls	r4, r5, #5
   866de:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   866e2:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   866e6:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   866ea:	f014 0401 	ands.w	r4, r4, #1
   866ee:	f040 8123 	bne.w	86938 <udd_ep_alloc+0x26c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   866f2:	f001 0c03 	and.w	ip, r1, #3
   866f6:	f1bc 0f02 	cmp.w	ip, #2
   866fa:	d05e      	beq.n	867ba <udd_ep_alloc+0xee>
   866fc:	f1bc 0f03 	cmp.w	ip, #3
   86700:	d064      	beq.n	867cc <udd_ep_alloc+0x100>
   86702:	f1bc 0f01 	cmp.w	ip, #1
   86706:	d001      	beq.n	8670c <udd_ep_alloc+0x40>
   86708:	2000      	movs	r0, #0
   8670a:	e112      	b.n	86932 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   8670c:	2d00      	cmp	r5, #0
   8670e:	d052      	beq.n	867b6 <udd_ep_alloc+0xea>
   86710:	1eeb      	subs	r3, r5, #3
   86712:	b2db      	uxtb	r3, r3
   86714:	2b01      	cmp	r3, #1
   86716:	bf94      	ite	ls
   86718:	2300      	movls	r3, #0
   8671a:	2301      	movhi	r3, #1
	if (b_iso_hbw) {
   8671c:	469e      	mov	lr, r3
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8671e:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   86722:	2b00      	cmp	r3, #0
   86724:	d054      	beq.n	867d0 <udd_ep_alloc+0x104>
		switch(MaxEndpointSize & (0x3u << 11)) {
   86726:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   8672a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   8672e:	d04a      	beq.n	867c6 <udd_ep_alloc+0xfa>
   86730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   86734:	bf08      	it	eq
   86736:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   8673a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   8673e:	b292      	uxth	r2, r2
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86740:	f04f 0802 	mov.w	r8, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   86744:	016f      	lsls	r7, r5, #5
   86746:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
   8674a:	f507 2720 	add.w	r7, r7, #655360	; 0xa0000
   8674e:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
   86752:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   86756:	f026 0603 	bic.w	r6, r6, #3
   8675a:	010b      	lsls	r3, r1, #4
   8675c:	f003 0330 	and.w	r3, r3, #48	; 0x30
   86760:	f010 0f80 	tst.w	r0, #128	; 0x80
   86764:	bf0c      	ite	eq
   86766:	4621      	moveq	r1, r4
   86768:	2108      	movne	r1, #8
   8676a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8676e:	d237      	bcs.n	867e0 <udd_ep_alloc+0x114>
   86770:	2a08      	cmp	r2, #8
   86772:	bf38      	it	cc
   86774:	2208      	movcc	r2, #8
   86776:	0052      	lsls	r2, r2, #1
   86778:	3a01      	subs	r2, #1
   8677a:	fab2 f282 	clz	r2, r2
   8677e:	f1c2 021c 	rsb	r2, r2, #28
   86782:	4333      	orrs	r3, r6
   86784:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   86788:	430b      	orrs	r3, r1
   8678a:	f1be 0f00 	cmp.w	lr, #0
   8678e:	d001      	beq.n	86794 <udd_ep_alloc+0xc8>
   86790:	ea4f 240c 	mov.w	r4, ip, lsl #8
   86794:	431a      	orrs	r2, r3
   86796:	4322      	orrs	r2, r4
   86798:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   8679c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   867a0:	2b00      	cmp	r3, #0
   867a2:	f280 80cd 	bge.w	86940 <udd_ep_alloc+0x274>
	udd_enable_endpoint(ep);
   867a6:	2301      	movs	r3, #1
   867a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   867ac:	2306      	movs	r3, #6
	ep_allocated = 0;
   867ae:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   867b0:	4865      	ldr	r0, [pc, #404]	; (86948 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   867b2:	2401      	movs	r4, #1
   867b4:	e01b      	b.n	867ee <udd_ep_alloc+0x122>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   867b6:	2300      	movs	r3, #0
   867b8:	e7b0      	b.n	8671c <udd_ep_alloc+0x50>
		nb_bank = UDD_BULK_NB_BANK(ep);
   867ba:	2d03      	cmp	r5, #3
   867bc:	bf34      	ite	cc
   867be:	46e0      	movcc	r8, ip
   867c0:	f04f 0801 	movcs.w	r8, #1
   867c4:	e004      	b.n	867d0 <udd_ep_alloc+0x104>
			nb_tran = 2;
   867c6:	f04f 0c02 	mov.w	ip, #2
   867ca:	e7b6      	b.n	8673a <udd_ep_alloc+0x6e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   867cc:	f04f 0801 	mov.w	r8, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   867d0:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   867d4:	f040 80b2 	bne.w	8693c <udd_ep_alloc+0x270>
   867d8:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   867dc:	46f4      	mov	ip, lr
   867de:	e7b1      	b.n	86744 <udd_ep_alloc+0x78>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   867e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
   867e4:	e7c9      	b.n	8677a <udd_ep_alloc+0xae>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   867e6:	3b01      	subs	r3, #1
   867e8:	b2db      	uxtb	r3, r3
   867ea:	429d      	cmp	r5, r3
   867ec:	d81e      	bhi.n	8682c <udd_ep_alloc+0x160>
		if (Is_udd_endpoint_enabled(i)) {
   867ee:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   867f2:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   867f6:	f012 0f01 	tst.w	r2, #1
   867fa:	d0f4      	beq.n	867e6 <udd_ep_alloc+0x11a>
			bank = udd_get_endpoint_bank(i);
   867fc:	015a      	lsls	r2, r3, #5
   867fe:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   86802:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   86806:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   8680a:	f3c1 1181 	ubfx	r1, r1, #6, #2
   8680e:	005f      	lsls	r7, r3, #1
   86810:	40b9      	lsls	r1, r7
   86812:	430e      	orrs	r6, r1
   86814:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   86816:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   8681a:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   8681e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   86822:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   86826:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   8682a:	e7dc      	b.n	867e6 <udd_ep_alloc+0x11a>
   8682c:	462c      	mov	r4, r5
   8682e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   86832:	4d46      	ldr	r5, [pc, #280]	; (8694c <udd_ep_alloc+0x280>)
   86834:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		bool b_restart = ptr_job->busy;
   86838:	4f44      	ldr	r7, [pc, #272]	; (8694c <udd_ep_alloc+0x280>)
		udd_enable_endpoint(i);
   8683a:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   8683e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 86950 <udd_ep_alloc+0x284>
   86842:	e023      	b.n	8688c <udd_ep_alloc+0x1c0>
			if (NULL == ptr_job->call_trans) {
   86844:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   86848:	4a40      	ldr	r2, [pc, #256]	; (8694c <udd_ep_alloc+0x280>)
   8684a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   8684e:	2c00      	cmp	r4, #0
   86850:	d078      	beq.n	86944 <udd_ep_alloc+0x278>
			if (Is_udd_endpoint_in(i)) {
   86852:	f10c 0c08 	add.w	ip, ip, #8
   86856:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   8685a:	4b3b      	ldr	r3, [pc, #236]	; (86948 <udd_ep_alloc+0x27c>)
   8685c:	f853 300c 	ldr.w	r3, [r3, ip]
   86860:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   86864:	bf18      	it	ne
   86866:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8686a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   8686e:	4b37      	ldr	r3, [pc, #220]	; (8694c <udd_ep_alloc+0x280>)
   86870:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   86874:	4602      	mov	r2, r0
   86876:	f8de 100c 	ldr.w	r1, [lr, #12]
   8687a:	2001      	movs	r0, #1
   8687c:	47a0      	blx	r4
			return false;
   8687e:	2000      	movs	r0, #0
   86880:	e057      	b.n	86932 <udd_ep_alloc+0x266>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   86882:	3401      	adds	r4, #1
   86884:	3518      	adds	r5, #24
   86886:	b2e3      	uxtb	r3, r4
   86888:	2b06      	cmp	r3, #6
   8688a:	d84f      	bhi.n	8692c <udd_ep_alloc+0x260>
   8688c:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8688e:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   86890:	0063      	lsls	r3, r4, #1
   86892:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   86896:	f013 0203 	ands.w	r2, r3, #3
   8689a:	d0f2      	beq.n	86882 <udd_ep_alloc+0x1b6>
   8689c:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   868a0:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   868a4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   868a8:	7d0b      	ldrb	r3, [r1, #20]
   868aa:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   868ae:	f36f 0300 	bfc	r3, #0, #1
   868b2:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   868b4:	0163      	lsls	r3, r4, #5
   868b6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   868ba:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   868be:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   868c2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   868c6:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   868ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   868ce:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   868d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   868d6:	2a00      	cmp	r2, #0
   868d8:	dab4      	bge.n	86844 <udd_ep_alloc+0x178>
		udd_enable_endpoint_bank_autoswitch(i);
   868da:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   868de:	f042 0202 	orr.w	r2, r2, #2
   868e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   868e6:	f1ba 0f00 	cmp.w	sl, #0
   868ea:	d0ca      	beq.n	86882 <udd_ep_alloc+0x1b6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   868ec:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   868f0:	f855 2c08 	ldr.w	r2, [r5, #-8]
   868f4:	ebab 0102 	sub.w	r1, fp, r2
   868f8:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   868fc:	f855 3c10 	ldr.w	r3, [r5, #-16]
   86900:	eb02 0a03 	add.w	sl, r2, r3
   86904:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   86908:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   8690c:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   86910:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   86914:	f855 3c18 	ldr.w	r3, [r5, #-24]
   86918:	9300      	str	r3, [sp, #0]
   8691a:	ebaa 030b 	sub.w	r3, sl, fp
   8691e:	440a      	add	r2, r1
   86920:	f3cc 0140 	ubfx	r1, ip, #1, #1
   86924:	47c8      	blx	r9
			if (!b_restart) {
   86926:	2800      	cmp	r0, #0
   86928:	d1ab      	bne.n	86882 <udd_ep_alloc+0x1b6>
   8692a:	e002      	b.n	86932 <udd_ep_alloc+0x266>
	return true;
   8692c:	2001      	movs	r0, #1
   8692e:	e000      	b.n	86932 <udd_ep_alloc+0x266>
		return false;
   86930:	2000      	movs	r0, #0
}
   86932:	b003      	add	sp, #12
   86934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   86938:	2000      	movs	r0, #0
   8693a:	e7fa      	b.n	86932 <udd_ep_alloc+0x266>
		return false;
   8693c:	2000      	movs	r0, #0
   8693e:	e7f8      	b.n	86932 <udd_ep_alloc+0x266>
		return false;
   86940:	2000      	movs	r0, #0
   86942:	e7f6      	b.n	86932 <udd_ep_alloc+0x266>
				return false;
   86944:	2000      	movs	r0, #0
   86946:	e7f4      	b.n	86932 <udd_ep_alloc+0x266>
   86948:	400a4000 	.word	0x400a4000
   8694c:	20002314 	.word	0x20002314
   86950:	000865d1 	.word	0x000865d1

00086954 <udd_ep_abort>:
{
   86954:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86956:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   8695a:	4b18      	ldr	r3, [pc, #96]	; (869bc <udd_ep_abort+0x68>)
   8695c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   86960:	2100      	movs	r1, #0
   86962:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   86964:	f010 0f80 	tst.w	r0, #128	; 0x80
   86968:	d109      	bne.n	8697e <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8696a:	1e50      	subs	r0, r2, #1
   8696c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   86970:	2101      	movs	r1, #1
   86972:	4b13      	ldr	r3, [pc, #76]	; (869c0 <udd_ep_abort+0x6c>)
   86974:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   86978:	4b12      	ldr	r3, [pc, #72]	; (869c4 <udd_ep_abort+0x70>)
   8697a:	4798      	blx	r3
}
   8697c:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   8697e:	0151      	lsls	r1, r2, #5
   86980:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   86984:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   86988:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   8698c:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   86990:	d0eb      	beq.n	8696a <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   86992:	0153      	lsls	r3, r2, #5
   86994:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   86998:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8699c:	f501 748a 	add.w	r4, r1, #276	; 0x114
   869a0:	f44f 7000 	mov.w	r0, #512	; 0x200
   869a4:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   869a6:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   869aa:	f413 7f00 	tst.w	r3, #512	; 0x200
   869ae:	d1fa      	bne.n	869a6 <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   869b0:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   869b4:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   869b8:	d1f4      	bne.n	869a4 <udd_ep_abort+0x50>
   869ba:	e7d6      	b.n	8696a <udd_ep_abort+0x16>
   869bc:	400a4300 	.word	0x400a4300
   869c0:	20002314 	.word	0x20002314
   869c4:	00085969 	.word	0x00085969

000869c8 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   869c8:	4a07      	ldr	r2, [pc, #28]	; (869e8 <udd_test_mode_j+0x20>)
   869ca:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   869ce:	f023 0303 	bic.w	r3, r3, #3
   869d2:	f043 0302 	orr.w	r3, r3, #2
   869d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   869da:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   869de:	f043 0304 	orr.w	r3, r3, #4
   869e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   869e6:	4770      	bx	lr
   869e8:	400a4000 	.word	0x400a4000

000869ec <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   869ec:	4a07      	ldr	r2, [pc, #28]	; (86a0c <udd_test_mode_k+0x20>)
   869ee:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   869f2:	f023 0303 	bic.w	r3, r3, #3
   869f6:	f043 0302 	orr.w	r3, r3, #2
   869fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   869fe:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86a02:	f043 0308 	orr.w	r3, r3, #8
   86a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86a0a:	4770      	bx	lr
   86a0c:	400a4000 	.word	0x400a4000

00086a10 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   86a10:	4a04      	ldr	r2, [pc, #16]	; (86a24 <udd_test_mode_se0_nak+0x14>)
   86a12:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86a16:	f023 0303 	bic.w	r3, r3, #3
   86a1a:	f043 0302 	orr.w	r3, r3, #2
   86a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86a22:	4770      	bx	lr
   86a24:	400a4000 	.word	0x400a4000

00086a28 <udd_test_mode_packet>:
{
   86a28:	b430      	push	{r4, r5}
   86a2a:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   86a2c:	466c      	mov	r4, sp
   86a2e:	4d21      	ldr	r5, [pc, #132]	; (86ab4 <udd_test_mode_packet+0x8c>)
   86a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86a3c:	e895 0003 	ldmia.w	r5, {r0, r1}
   86a40:	f844 0b04 	str.w	r0, [r4], #4
   86a44:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   86a46:	4b1c      	ldr	r3, [pc, #112]	; (86ab8 <udd_test_mode_packet+0x90>)
   86a48:	2101      	movs	r1, #1
   86a4a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   86a4e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   86a52:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   86a56:	f022 0203 	bic.w	r2, r2, #3
   86a5a:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   86a5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   86a62:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   86a66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86a6a:	f022 0203 	bic.w	r2, r2, #3
   86a6e:	f042 0202 	orr.w	r2, r2, #2
   86a72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   86a76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86a7a:	f042 0210 	orr.w	r2, r2, #16
   86a7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   86a82:	466b      	mov	r3, sp
   86a84:	480d      	ldr	r0, [pc, #52]	; (86abc <udd_test_mode_packet+0x94>)
   86a86:	aa0e      	add	r2, sp, #56	; 0x38
   86a88:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   86a8a:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   86a8e:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   86a90:	f813 1b01 	ldrb.w	r1, [r3], #1
   86a94:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   86a96:	42a3      	cmp	r3, r4
   86a98:	d1f9      	bne.n	86a8e <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   86a9a:	4b07      	ldr	r3, [pc, #28]	; (86ab8 <udd_test_mode_packet+0x90>)
   86a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86aa0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86aa8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   86aac:	b00e      	add	sp, #56	; 0x38
   86aae:	bc30      	pop	{r4, r5}
   86ab0:	4770      	bx	lr
   86ab2:	bf00      	nop
   86ab4:	0008e540 	.word	0x0008e540
   86ab8:	400a4000 	.word	0x400a4000
   86abc:	20180038 	.word	0x20180038

00086ac0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86ac0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86ac2:	010b      	lsls	r3, r1, #4
   86ac4:	4293      	cmp	r3, r2
   86ac6:	d914      	bls.n	86af2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86ac8:	00c9      	lsls	r1, r1, #3
   86aca:	084b      	lsrs	r3, r1, #1
   86acc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   86ad0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   86ad4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86ad6:	1e5c      	subs	r4, r3, #1
   86ad8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86adc:	428c      	cmp	r4, r1
   86ade:	d901      	bls.n	86ae4 <usart_set_async_baudrate+0x24>
		return 1;
   86ae0:	2001      	movs	r0, #1
   86ae2:	e017      	b.n	86b14 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   86ae4:	6841      	ldr	r1, [r0, #4]
   86ae6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   86aea:	6041      	str	r1, [r0, #4]
   86aec:	e00c      	b.n	86b08 <usart_set_async_baudrate+0x48>
		return 1;
   86aee:	2001      	movs	r0, #1
   86af0:	e010      	b.n	86b14 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86af2:	0859      	lsrs	r1, r3, #1
   86af4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   86af8:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   86afc:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86afe:	1e5c      	subs	r4, r3, #1
   86b00:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86b04:	428c      	cmp	r4, r1
   86b06:	d8f2      	bhi.n	86aee <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86b08:	0412      	lsls	r2, r2, #16
   86b0a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   86b0e:	431a      	orrs	r2, r3
   86b10:	6202      	str	r2, [r0, #32]

	return 0;
   86b12:	2000      	movs	r0, #0
}
   86b14:	bc10      	pop	{r4}
   86b16:	4770      	bx	lr

00086b18 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86b18:	4b0a      	ldr	r3, [pc, #40]	; (86b44 <usart_reset+0x2c>)
   86b1a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   86b1e:	2300      	movs	r3, #0
   86b20:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   86b22:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86b24:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86b26:	2388      	movs	r3, #136	; 0x88
   86b28:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86b2a:	2324      	movs	r3, #36	; 0x24
   86b2c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   86b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
   86b32:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   86b34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   86b38:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   86b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   86b3e:	6003      	str	r3, [r0, #0]
   86b40:	4770      	bx	lr
   86b42:	bf00      	nop
   86b44:	55534100 	.word	0x55534100

00086b48 <usart_init_rs232>:
{
   86b48:	b570      	push	{r4, r5, r6, lr}
   86b4a:	4605      	mov	r5, r0
   86b4c:	460c      	mov	r4, r1
   86b4e:	4616      	mov	r6, r2
	usart_reset(p_usart);
   86b50:	4b0f      	ldr	r3, [pc, #60]	; (86b90 <usart_init_rs232+0x48>)
   86b52:	4798      	blx	r3
	ul_reg_val = 0;
   86b54:	2200      	movs	r2, #0
   86b56:	4b0f      	ldr	r3, [pc, #60]	; (86b94 <usart_init_rs232+0x4c>)
   86b58:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86b5a:	b1a4      	cbz	r4, 86b86 <usart_init_rs232+0x3e>
   86b5c:	4632      	mov	r2, r6
   86b5e:	6821      	ldr	r1, [r4, #0]
   86b60:	4628      	mov	r0, r5
   86b62:	4b0d      	ldr	r3, [pc, #52]	; (86b98 <usart_init_rs232+0x50>)
   86b64:	4798      	blx	r3
   86b66:	4602      	mov	r2, r0
   86b68:	b978      	cbnz	r0, 86b8a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86b6a:	6863      	ldr	r3, [r4, #4]
   86b6c:	68a1      	ldr	r1, [r4, #8]
   86b6e:	430b      	orrs	r3, r1
   86b70:	6921      	ldr	r1, [r4, #16]
   86b72:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86b74:	68e1      	ldr	r1, [r4, #12]
   86b76:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86b78:	4906      	ldr	r1, [pc, #24]	; (86b94 <usart_init_rs232+0x4c>)
   86b7a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   86b7c:	6869      	ldr	r1, [r5, #4]
   86b7e:	430b      	orrs	r3, r1
   86b80:	606b      	str	r3, [r5, #4]
}
   86b82:	4610      	mov	r0, r2
   86b84:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86b86:	2201      	movs	r2, #1
   86b88:	e7fb      	b.n	86b82 <usart_init_rs232+0x3a>
   86b8a:	2201      	movs	r2, #1
   86b8c:	e7f9      	b.n	86b82 <usart_init_rs232+0x3a>
   86b8e:	bf00      	nop
   86b90:	00086b19 	.word	0x00086b19
   86b94:	200023a4 	.word	0x200023a4
   86b98:	00086ac1 	.word	0x00086ac1

00086b9c <usart_init_sync_master>:
{
   86b9c:	b570      	push	{r4, r5, r6, lr}
   86b9e:	4604      	mov	r4, r0
   86ba0:	460e      	mov	r6, r1
   86ba2:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86ba4:	4b15      	ldr	r3, [pc, #84]	; (86bfc <usart_init_sync_master+0x60>)
   86ba6:	4798      	blx	r3
	ul_reg_val = 0;
   86ba8:	2200      	movs	r2, #0
   86baa:	4b15      	ldr	r3, [pc, #84]	; (86c00 <usart_init_sync_master+0x64>)
   86bac:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   86bae:	b306      	cbz	r6, 86bf2 <usart_init_sync_master+0x56>
   86bb0:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86bb2:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   86bb6:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86bba:	1e51      	subs	r1, r2, #1
   86bbc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86bc0:	4299      	cmp	r1, r3
   86bc2:	d818      	bhi.n	86bf6 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86bc4:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86bc6:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   86bc8:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86bd0:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86bd2:	6873      	ldr	r3, [r6, #4]
   86bd4:	68b2      	ldr	r2, [r6, #8]
   86bd6:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   86bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86bdc:	6932      	ldr	r2, [r6, #16]
   86bde:	4313      	orrs	r3, r2
   86be0:	68f2      	ldr	r2, [r6, #12]
   86be2:	4313      	orrs	r3, r2
   86be4:	4a06      	ldr	r2, [pc, #24]	; (86c00 <usart_init_sync_master+0x64>)
   86be6:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86be8:	6862      	ldr	r2, [r4, #4]
   86bea:	4313      	orrs	r3, r2
   86bec:	6063      	str	r3, [r4, #4]
	return 0;
   86bee:	2000      	movs	r0, #0
   86bf0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86bf2:	2001      	movs	r0, #1
   86bf4:	bd70      	pop	{r4, r5, r6, pc}
   86bf6:	2001      	movs	r0, #1
}
   86bf8:	bd70      	pop	{r4, r5, r6, pc}
   86bfa:	bf00      	nop
   86bfc:	00086b19 	.word	0x00086b19
   86c00:	200023a8 	.word	0x200023a8

00086c04 <usart_init_iso7816>:
{
   86c04:	b570      	push	{r4, r5, r6, lr}
   86c06:	4606      	mov	r6, r0
   86c08:	460c      	mov	r4, r1
   86c0a:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86c0c:	4b30      	ldr	r3, [pc, #192]	; (86cd0 <usart_init_iso7816+0xcc>)
   86c0e:	4798      	blx	r3
	ul_reg_val = 0;
   86c10:	2200      	movs	r2, #0
   86c12:	4b30      	ldr	r3, [pc, #192]	; (86cd4 <usart_init_iso7816+0xd0>)
   86c14:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
   86c16:	2c00      	cmp	r4, #0
   86c18:	d04f      	beq.n	86cba <usart_init_iso7816+0xb6>
   86c1a:	68a3      	ldr	r3, [r4, #8]
   86c1c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
   86c20:	d14d      	bne.n	86cbe <usart_init_iso7816+0xba>
	if (p_usart_opt->protocol_type == ISO7816_T_0) {
   86c22:	69e3      	ldr	r3, [r4, #28]
   86c24:	2b00      	cmp	r3, #0
   86c26:	d13c      	bne.n	86ca2 <usart_init_iso7816+0x9e>
				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
   86c28:	6963      	ldr	r3, [r4, #20]
   86c2a:	061b      	lsls	r3, r3, #24
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
   86c2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
   86c30:	f042 0204 	orr.w	r2, r2, #4
   86c34:	4927      	ldr	r1, [pc, #156]	; (86cd4 <usart_init_iso7816+0xd0>)
   86c36:	600a      	str	r2, [r1, #0]
		if (p_usart_opt->bit_order) {
   86c38:	69a2      	ldr	r2, [r4, #24]
   86c3a:	b122      	cbz	r2, 86c46 <usart_init_iso7816+0x42>
			ul_reg_val |= US_MR_MSBF;
   86c3c:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   86c40:	f043 0304 	orr.w	r3, r3, #4
   86c44:	600b      	str	r3, [r1, #0]
	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
   86c46:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + clock / 2) / clock;
   86c48:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86c4c:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86c50:	1e6a      	subs	r2, r5, #1
   86c52:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86c56:	429a      	cmp	r2, r3
   86c58:	d837      	bhi.n	86cca <usart_init_iso7816+0xc6>
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86c5a:	6873      	ldr	r3, [r6, #4]
			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
   86c5c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
   86c60:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86c68:	6073      	str	r3, [r6, #4]
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86c6a:	6235      	str	r5, [r6, #32]
	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
   86c6c:	6863      	ldr	r3, [r4, #4]
   86c6e:	6433      	str	r3, [r6, #64]	; 0x40
	ul_reg_val |= p_usart_opt->parity_type;
   86c70:	4a18      	ldr	r2, [pc, #96]	; (86cd4 <usart_init_iso7816+0xd0>)
   86c72:	68a3      	ldr	r3, [r4, #8]
   86c74:	6811      	ldr	r1, [r2, #0]
   86c76:	430b      	orrs	r3, r1
   86c78:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->inhibit_nack) {
   86c7a:	68e2      	ldr	r2, [r4, #12]
   86c7c:	b11a      	cbz	r2, 86c86 <usart_init_iso7816+0x82>
		ul_reg_val |= US_MR_INACK;
   86c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   86c82:	4a14      	ldr	r2, [pc, #80]	; (86cd4 <usart_init_iso7816+0xd0>)
   86c84:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->dis_suc_nack) {
   86c86:	6923      	ldr	r3, [r4, #16]
   86c88:	b123      	cbz	r3, 86c94 <usart_init_iso7816+0x90>
		ul_reg_val |= US_MR_DSNACK;
   86c8a:	4a12      	ldr	r2, [pc, #72]	; (86cd4 <usart_init_iso7816+0xd0>)
   86c8c:	6813      	ldr	r3, [r2, #0]
   86c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   86c92:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86c94:	6873      	ldr	r3, [r6, #4]
   86c96:	4a0f      	ldr	r2, [pc, #60]	; (86cd4 <usart_init_iso7816+0xd0>)
   86c98:	6812      	ldr	r2, [r2, #0]
   86c9a:	4313      	orrs	r3, r2
   86c9c:	6073      	str	r3, [r6, #4]
	return 0;
   86c9e:	2000      	movs	r0, #0
   86ca0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
   86ca2:	2b01      	cmp	r3, #1
   86ca4:	d001      	beq.n	86caa <usart_init_iso7816+0xa6>
		return 1;
   86ca6:	2001      	movs	r0, #1
   86ca8:	bd70      	pop	{r4, r5, r6, pc}
		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
   86caa:	69a3      	ldr	r3, [r4, #24]
   86cac:	b94b      	cbnz	r3, 86cc2 <usart_init_iso7816+0xbe>
   86cae:	6963      	ldr	r3, [r4, #20]
   86cb0:	b94b      	cbnz	r3, 86cc6 <usart_init_iso7816+0xc2>
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
   86cb2:	2206      	movs	r2, #6
   86cb4:	4b07      	ldr	r3, [pc, #28]	; (86cd4 <usart_init_iso7816+0xd0>)
   86cb6:	601a      	str	r2, [r3, #0]
   86cb8:	e7c5      	b.n	86c46 <usart_init_iso7816+0x42>
		return 1;
   86cba:	2001      	movs	r0, #1
   86cbc:	bd70      	pop	{r4, r5, r6, pc}
   86cbe:	2001      	movs	r0, #1
   86cc0:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   86cc2:	2001      	movs	r0, #1
   86cc4:	bd70      	pop	{r4, r5, r6, pc}
   86cc6:	2001      	movs	r0, #1
   86cc8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86cca:	2001      	movs	r0, #1
}
   86ccc:	bd70      	pop	{r4, r5, r6, pc}
   86cce:	bf00      	nop
   86cd0:	00086b19 	.word	0x00086b19
   86cd4:	200023ac 	.word	0x200023ac

00086cd8 <usart_init_spi_master>:
{
   86cd8:	b570      	push	{r4, r5, r6, lr}
   86cda:	4606      	mov	r6, r0
   86cdc:	460c      	mov	r4, r1
   86cde:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86ce0:	4b2a      	ldr	r3, [pc, #168]	; (86d8c <usart_init_spi_master+0xb4>)
   86ce2:	4798      	blx	r3
	ul_reg_val = 0;
   86ce4:	2200      	movs	r2, #0
   86ce6:	4b2a      	ldr	r3, [pc, #168]	; (86d90 <usart_init_spi_master+0xb8>)
   86ce8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86cea:	2c00      	cmp	r4, #0
   86cec:	d049      	beq.n	86d82 <usart_init_spi_master+0xaa>
   86cee:	68a3      	ldr	r3, [r4, #8]
   86cf0:	2b03      	cmp	r3, #3
   86cf2:	d901      	bls.n	86cf8 <usart_init_spi_master+0x20>
		return 1;
   86cf4:	2001      	movs	r0, #1
   86cf6:	bd70      	pop	{r4, r5, r6, pc}
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   86cf8:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86cfa:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86cfe:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86d02:	1f2a      	subs	r2, r5, #4
   86d04:	f64f 73fb 	movw	r3, #65531	; 0xfffb
   86d08:	429a      	cmp	r2, r3
   86d0a:	d83c      	bhi.n	86d86 <usart_init_spi_master+0xae>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86d0c:	6235      	str	r5, [r6, #32]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86d0e:	6863      	ldr	r3, [r4, #4]
   86d10:	68e2      	ldr	r2, [r4, #12]
   86d12:	4313      	orrs	r3, r2
   86d14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   86d18:	f042 020e 	orr.w	r2, r2, #14
   86d1c:	491c      	ldr	r1, [pc, #112]	; (86d90 <usart_init_spi_master+0xb8>)
   86d1e:	600a      	str	r2, [r1, #0]
	switch (p_usart_opt->spi_mode) {
   86d20:	68a2      	ldr	r2, [r4, #8]
   86d22:	2a03      	cmp	r2, #3
   86d24:	d80b      	bhi.n	86d3e <usart_init_spi_master+0x66>
   86d26:	e8df f002 	tbb	[pc, r2]
   86d2a:	1102      	.short	0x1102
   86d2c:	231c      	.short	0x231c
		ul_reg_val &= ~US_MR_CPOL;
   86d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86d36:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86d3a:	4a15      	ldr	r2, [pc, #84]	; (86d90 <usart_init_spi_master+0xb8>)
   86d3c:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86d3e:	6873      	ldr	r3, [r6, #4]
   86d40:	4a13      	ldr	r2, [pc, #76]	; (86d90 <usart_init_spi_master+0xb8>)
   86d42:	6812      	ldr	r2, [r2, #0]
   86d44:	4313      	orrs	r3, r2
   86d46:	6073      	str	r3, [r6, #4]
	return 0;
   86d48:	2000      	movs	r0, #0
   86d4a:	bd70      	pop	{r4, r5, r6, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86d58:	f043 030e 	orr.w	r3, r3, #14
   86d5c:	4a0c      	ldr	r2, [pc, #48]	; (86d90 <usart_init_spi_master+0xb8>)
   86d5e:	6013      	str	r3, [r2, #0]
		break;
   86d60:	e7ed      	b.n	86d3e <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86d62:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86d66:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86d6a:	4a09      	ldr	r2, [pc, #36]	; (86d90 <usart_init_spi_master+0xb8>)
   86d6c:	6013      	str	r3, [r2, #0]
		break;
   86d6e:	e7e6      	b.n	86d3e <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d74:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86d78:	f043 030e 	orr.w	r3, r3, #14
   86d7c:	4a04      	ldr	r2, [pc, #16]	; (86d90 <usart_init_spi_master+0xb8>)
   86d7e:	6013      	str	r3, [r2, #0]
		break;
   86d80:	e7dd      	b.n	86d3e <usart_init_spi_master+0x66>
		return 1;
   86d82:	2001      	movs	r0, #1
   86d84:	bd70      	pop	{r4, r5, r6, pc}
   86d86:	2001      	movs	r0, #1
}
   86d88:	bd70      	pop	{r4, r5, r6, pc}
   86d8a:	bf00      	nop
   86d8c:	00086b19 	.word	0x00086b19
   86d90:	200023b0 	.word	0x200023b0

00086d94 <usart_init_spi_slave>:
{
   86d94:	b538      	push	{r3, r4, r5, lr}
   86d96:	4604      	mov	r4, r0
   86d98:	460d      	mov	r5, r1
	usart_reset(p_usart);
   86d9a:	4b25      	ldr	r3, [pc, #148]	; (86e30 <usart_init_spi_slave+0x9c>)
   86d9c:	4798      	blx	r3
	ul_reg_val = 0;
   86d9e:	2200      	movs	r2, #0
   86da0:	4b24      	ldr	r3, [pc, #144]	; (86e34 <usart_init_spi_slave+0xa0>)
   86da2:	601a      	str	r2, [r3, #0]
	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
   86da4:	6863      	ldr	r3, [r4, #4]
   86da6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   86daa:	6063      	str	r3, [r4, #4]
	p_usart->US_MR |= US_MR_USCLKS_SCK;
   86dac:	6863      	ldr	r3, [r4, #4]
   86dae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   86db2:	6063      	str	r3, [r4, #4]
	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
   86db4:	2d00      	cmp	r5, #0
   86db6:	d036      	beq.n	86e26 <usart_init_spi_slave+0x92>
   86db8:	68aa      	ldr	r2, [r5, #8]
   86dba:	2a03      	cmp	r2, #3
   86dbc:	d835      	bhi.n	86e2a <usart_init_spi_slave+0x96>
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86dbe:	686b      	ldr	r3, [r5, #4]
   86dc0:	68e9      	ldr	r1, [r5, #12]
   86dc2:	430b      	orrs	r3, r1
	switch (p_usart_opt->spi_mode) {
   86dc4:	2a03      	cmp	r2, #3
   86dc6:	d803      	bhi.n	86dd0 <usart_init_spi_slave+0x3c>
   86dc8:	e8df f002 	tbb	[pc, r2]
   86dcc:	241f160d 	.word	0x241f160d
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86dd0:	f043 030f 	orr.w	r3, r3, #15
   86dd4:	4a17      	ldr	r2, [pc, #92]	; (86e34 <usart_init_spi_slave+0xa0>)
   86dd6:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86dd8:	6863      	ldr	r3, [r4, #4]
   86dda:	4a16      	ldr	r2, [pc, #88]	; (86e34 <usart_init_spi_slave+0xa0>)
   86ddc:	6812      	ldr	r2, [r2, #0]
   86dde:	4313      	orrs	r3, r2
   86de0:	6063      	str	r3, [r4, #4]
	return 0;
   86de2:	2000      	movs	r0, #0
   86de4:	bd38      	pop	{r3, r4, r5, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86dea:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86dee:	f043 0301 	orr.w	r3, r3, #1
   86df2:	4a10      	ldr	r2, [pc, #64]	; (86e34 <usart_init_spi_slave+0xa0>)
   86df4:	6013      	str	r3, [r2, #0]
		break;
   86df6:	e7ef      	b.n	86dd8 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPOL;
   86df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86e00:	f043 030f 	orr.w	r3, r3, #15
   86e04:	4a0b      	ldr	r2, [pc, #44]	; (86e34 <usart_init_spi_slave+0xa0>)
   86e06:	6013      	str	r3, [r2, #0]
		break;
   86e08:	e7e6      	b.n	86dd8 <usart_init_spi_slave+0x44>
		ul_reg_val |= US_MR_CPOL;
   86e0a:	4a0b      	ldr	r2, [pc, #44]	; (86e38 <usart_init_spi_slave+0xa4>)
   86e0c:	431a      	orrs	r2, r3
   86e0e:	4b09      	ldr	r3, [pc, #36]	; (86e34 <usart_init_spi_slave+0xa0>)
   86e10:	601a      	str	r2, [r3, #0]
		break;
   86e12:	e7e1      	b.n	86dd8 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPHA;
   86e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86e1c:	f043 030f 	orr.w	r3, r3, #15
   86e20:	4a04      	ldr	r2, [pc, #16]	; (86e34 <usart_init_spi_slave+0xa0>)
   86e22:	6013      	str	r3, [r2, #0]
		break;
   86e24:	e7d8      	b.n	86dd8 <usart_init_spi_slave+0x44>
		return 1;
   86e26:	2001      	movs	r0, #1
   86e28:	bd38      	pop	{r3, r4, r5, pc}
   86e2a:	2001      	movs	r0, #1
}
   86e2c:	bd38      	pop	{r3, r4, r5, pc}
   86e2e:	bf00      	nop
   86e30:	00086b19 	.word	0x00086b19
   86e34:	200023b4 	.word	0x200023b4
   86e38:	0001010f 	.word	0x0001010f

00086e3c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   86e3c:	2340      	movs	r3, #64	; 0x40
   86e3e:	6003      	str	r3, [r0, #0]
   86e40:	4770      	bx	lr

00086e42 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   86e42:	2380      	movs	r3, #128	; 0x80
   86e44:	6003      	str	r3, [r0, #0]
   86e46:	4770      	bx	lr

00086e48 <usart_set_tx_timeguard>:
	p_usart->US_TTGR = timeguard;
   86e48:	6281      	str	r1, [r0, #40]	; 0x28
   86e4a:	4770      	bx	lr

00086e4c <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   86e4c:	2310      	movs	r3, #16
   86e4e:	6003      	str	r3, [r0, #0]
   86e50:	4770      	bx	lr

00086e52 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   86e52:	2320      	movs	r3, #32
   86e54:	6003      	str	r3, [r0, #0]
   86e56:	4770      	bx	lr

00086e58 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   86e58:	6081      	str	r1, [r0, #8]
   86e5a:	4770      	bx	lr

00086e5c <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   86e5c:	60c1      	str	r1, [r0, #12]
   86e5e:	4770      	bx	lr

00086e60 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   86e60:	6900      	ldr	r0, [r0, #16]
}
   86e62:	4770      	bx	lr

00086e64 <usart_get_status>:
	return p_usart->US_CSR;
   86e64:	6940      	ldr	r0, [r0, #20]
}
   86e66:	4770      	bx	lr

00086e68 <usart_reset_status>:
	p_usart->US_CR = US_CR_RSTSTA;
   86e68:	f44f 7380 	mov.w	r3, #256	; 0x100
   86e6c:	6003      	str	r3, [r0, #0]
   86e6e:	4770      	bx	lr

00086e70 <usart_reset_iterations>:
	p_usart->US_CR = US_CR_RSTIT;
   86e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   86e74:	6003      	str	r3, [r0, #0]
   86e76:	4770      	bx	lr

00086e78 <usart_reset_nack>:
	p_usart->US_CR = US_CR_RSTNACK;
   86e78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   86e7c:	6003      	str	r3, [r0, #0]
   86e7e:	4770      	bx	lr

00086e80 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   86e80:	6940      	ldr	r0, [r0, #20]
}
   86e82:	f3c0 2040 	ubfx	r0, r0, #9, #1
   86e86:	4770      	bx	lr

00086e88 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86e88:	6943      	ldr	r3, [r0, #20]
   86e8a:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   86e8e:	bf1d      	ittte	ne
   86e90:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   86e94:	61c1      	strne	r1, [r0, #28]
	return 0;
   86e96:	2000      	movne	r0, #0
		return 1;
   86e98:	2001      	moveq	r0, #1
}
   86e9a:	4770      	bx	lr

00086e9c <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86e9c:	6943      	ldr	r3, [r0, #20]
   86e9e:	f013 0f02 	tst.w	r3, #2
   86ea2:	d0fb      	beq.n	86e9c <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   86ea4:	f3c1 0108 	ubfx	r1, r1, #0, #9
   86ea8:	61c1      	str	r1, [r0, #28]
}
   86eaa:	2000      	movs	r0, #0
   86eac:	4770      	bx	lr

00086eae <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86eae:	6943      	ldr	r3, [r0, #20]
   86eb0:	f013 0f01 	tst.w	r3, #1
   86eb4:	d005      	beq.n	86ec2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86eb6:	6983      	ldr	r3, [r0, #24]
   86eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86ebc:	600b      	str	r3, [r1, #0]
	return 0;
   86ebe:	2000      	movs	r0, #0
   86ec0:	4770      	bx	lr
		return 1;
   86ec2:	2001      	movs	r0, #1
}
   86ec4:	4770      	bx	lr

00086ec6 <usart_getchar>:
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86ec6:	6943      	ldr	r3, [r0, #20]
   86ec8:	f013 0f01 	tst.w	r3, #1
   86ecc:	d0fb      	beq.n	86ec6 <usart_getchar>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86ece:	6983      	ldr	r3, [r0, #24]
   86ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86ed4:	600b      	str	r3, [r1, #0]
}
   86ed6:	2000      	movs	r0, #0
   86ed8:	4770      	bx	lr

00086eda <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   86eda:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   86edc:	23ac      	movs	r3, #172	; 0xac
   86ede:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   86ee0:	680b      	ldr	r3, [r1, #0]
   86ee2:	684a      	ldr	r2, [r1, #4]
   86ee4:	fbb3 f3f2 	udiv	r3, r3, r2
   86ee8:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   86eea:	1e5c      	subs	r4, r3, #1
   86eec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   86ef0:	4294      	cmp	r4, r2
   86ef2:	d80b      	bhi.n	86f0c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   86ef4:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   86ef6:	688b      	ldr	r3, [r1, #8]
   86ef8:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   86efa:	f240 2302 	movw	r3, #514	; 0x202
   86efe:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   86f02:	2350      	movs	r3, #80	; 0x50
   86f04:	6003      	str	r3, [r0, #0]

	return 0;
   86f06:	2000      	movs	r0, #0
}
   86f08:	bc10      	pop	{r4}
   86f0a:	4770      	bx	lr
		return 1;
   86f0c:	2001      	movs	r0, #1
   86f0e:	e7fb      	b.n	86f08 <uart_init+0x2e>

00086f10 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   86f10:	6943      	ldr	r3, [r0, #20]
   86f12:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   86f16:	bf1a      	itte	ne
   86f18:	61c1      	strne	r1, [r0, #28]
	return 0;
   86f1a:	2000      	movne	r0, #0
		return 1;
   86f1c:	2001      	moveq	r0, #1
}
   86f1e:	4770      	bx	lr

00086f20 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   86f20:	6943      	ldr	r3, [r0, #20]
   86f22:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   86f26:	bf1d      	ittte	ne
   86f28:	6983      	ldrne	r3, [r0, #24]
   86f2a:	700b      	strbne	r3, [r1, #0]
	return 0;
   86f2c:	2000      	movne	r0, #0
		return 1;
   86f2e:	2001      	moveq	r0, #1
}
   86f30:	4770      	bx	lr

00086f32 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   86f32:	e7fe      	b.n	86f32 <Dummy_Handler>

00086f34 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   86f34:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   86f36:	4b1c      	ldr	r3, [pc, #112]	; (86fa8 <Reset_Handler+0x74>)
   86f38:	4a1c      	ldr	r2, [pc, #112]	; (86fac <Reset_Handler+0x78>)
   86f3a:	429a      	cmp	r2, r3
   86f3c:	d010      	beq.n	86f60 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   86f3e:	4b1c      	ldr	r3, [pc, #112]	; (86fb0 <Reset_Handler+0x7c>)
   86f40:	4a19      	ldr	r2, [pc, #100]	; (86fa8 <Reset_Handler+0x74>)
   86f42:	429a      	cmp	r2, r3
   86f44:	d20c      	bcs.n	86f60 <Reset_Handler+0x2c>
   86f46:	3b01      	subs	r3, #1
   86f48:	1a9b      	subs	r3, r3, r2
   86f4a:	f023 0303 	bic.w	r3, r3, #3
   86f4e:	3304      	adds	r3, #4
   86f50:	4413      	add	r3, r2
   86f52:	4916      	ldr	r1, [pc, #88]	; (86fac <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   86f54:	f851 0b04 	ldr.w	r0, [r1], #4
   86f58:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   86f5c:	429a      	cmp	r2, r3
   86f5e:	d1f9      	bne.n	86f54 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   86f60:	4b14      	ldr	r3, [pc, #80]	; (86fb4 <Reset_Handler+0x80>)
   86f62:	4a15      	ldr	r2, [pc, #84]	; (86fb8 <Reset_Handler+0x84>)
   86f64:	429a      	cmp	r2, r3
   86f66:	d20a      	bcs.n	86f7e <Reset_Handler+0x4a>
   86f68:	3b01      	subs	r3, #1
   86f6a:	1a9b      	subs	r3, r3, r2
   86f6c:	f023 0303 	bic.w	r3, r3, #3
   86f70:	3304      	adds	r3, #4
   86f72:	4413      	add	r3, r2
		*pDest++ = 0;
   86f74:	2100      	movs	r1, #0
   86f76:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   86f7a:	4293      	cmp	r3, r2
   86f7c:	d1fb      	bne.n	86f76 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   86f7e:	4b0f      	ldr	r3, [pc, #60]	; (86fbc <Reset_Handler+0x88>)
   86f80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   86f84:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86f88:	490d      	ldr	r1, [pc, #52]	; (86fc0 <Reset_Handler+0x8c>)
   86f8a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   86f8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   86f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   86f94:	d203      	bcs.n	86f9e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   86f96:	688b      	ldr	r3, [r1, #8]
   86f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   86f9c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   86f9e:	4b09      	ldr	r3, [pc, #36]	; (86fc4 <Reset_Handler+0x90>)
   86fa0:	4798      	blx	r3

	/* Branch to main function */
	main();
   86fa2:	4b09      	ldr	r3, [pc, #36]	; (86fc8 <Reset_Handler+0x94>)
   86fa4:	4798      	blx	r3
   86fa6:	e7fe      	b.n	86fa6 <Reset_Handler+0x72>
   86fa8:	20000000 	.word	0x20000000
   86fac:	0008ea64 	.word	0x0008ea64
   86fb0:	200010c8 	.word	0x200010c8
   86fb4:	20002e34 	.word	0x20002e34
   86fb8:	200010c8 	.word	0x200010c8
   86fbc:	00080000 	.word	0x00080000
   86fc0:	e000ed00 	.word	0xe000ed00
   86fc4:	00087845 	.word	0x00087845
   86fc8:	00087315 	.word	0x00087315

00086fcc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   86fcc:	4b3d      	ldr	r3, [pc, #244]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   86fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86fd0:	f003 0303 	and.w	r3, r3, #3
   86fd4:	2b03      	cmp	r3, #3
   86fd6:	d80e      	bhi.n	86ff6 <SystemCoreClockUpdate+0x2a>
   86fd8:	e8df f003 	tbb	[pc, r3]
   86fdc:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   86fe0:	4b39      	ldr	r3, [pc, #228]	; (870c8 <SystemCoreClockUpdate+0xfc>)
   86fe2:	695b      	ldr	r3, [r3, #20]
   86fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   86fe8:	bf14      	ite	ne
   86fea:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   86fee:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   86ff2:	4b36      	ldr	r3, [pc, #216]	; (870cc <SystemCoreClockUpdate+0x100>)
   86ff4:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   86ff6:	4b33      	ldr	r3, [pc, #204]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   86ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86ffe:	2b70      	cmp	r3, #112	; 0x70
   87000:	d057      	beq.n	870b2 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   87002:	4b30      	ldr	r3, [pc, #192]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   87004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   87006:	4931      	ldr	r1, [pc, #196]	; (870cc <SystemCoreClockUpdate+0x100>)
   87008:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8700c:	680b      	ldr	r3, [r1, #0]
   8700e:	40d3      	lsrs	r3, r2
   87010:	600b      	str	r3, [r1, #0]
   87012:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   87014:	4b2b      	ldr	r3, [pc, #172]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   87016:	6a1b      	ldr	r3, [r3, #32]
   87018:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8701c:	d003      	beq.n	87026 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8701e:	4a2c      	ldr	r2, [pc, #176]	; (870d0 <SystemCoreClockUpdate+0x104>)
   87020:	4b2a      	ldr	r3, [pc, #168]	; (870cc <SystemCoreClockUpdate+0x100>)
   87022:	601a      	str	r2, [r3, #0]
   87024:	e7e7      	b.n	86ff6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   87026:	4a2b      	ldr	r2, [pc, #172]	; (870d4 <SystemCoreClockUpdate+0x108>)
   87028:	4b28      	ldr	r3, [pc, #160]	; (870cc <SystemCoreClockUpdate+0x100>)
   8702a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8702c:	4b25      	ldr	r3, [pc, #148]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   8702e:	6a1b      	ldr	r3, [r3, #32]
   87030:	f003 0370 	and.w	r3, r3, #112	; 0x70
   87034:	2b10      	cmp	r3, #16
   87036:	d005      	beq.n	87044 <SystemCoreClockUpdate+0x78>
   87038:	2b20      	cmp	r3, #32
   8703a:	d1dc      	bne.n	86ff6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8703c:	4a24      	ldr	r2, [pc, #144]	; (870d0 <SystemCoreClockUpdate+0x104>)
   8703e:	4b23      	ldr	r3, [pc, #140]	; (870cc <SystemCoreClockUpdate+0x100>)
   87040:	601a      	str	r2, [r3, #0]
				break;
   87042:	e7d8      	b.n	86ff6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   87044:	4a24      	ldr	r2, [pc, #144]	; (870d8 <SystemCoreClockUpdate+0x10c>)
   87046:	4b21      	ldr	r3, [pc, #132]	; (870cc <SystemCoreClockUpdate+0x100>)
   87048:	601a      	str	r2, [r3, #0]
				break;
   8704a:	e7d4      	b.n	86ff6 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8704c:	4b1d      	ldr	r3, [pc, #116]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   8704e:	6a1b      	ldr	r3, [r3, #32]
   87050:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   87054:	d00c      	beq.n	87070 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   87056:	4a1e      	ldr	r2, [pc, #120]	; (870d0 <SystemCoreClockUpdate+0x104>)
   87058:	4b1c      	ldr	r3, [pc, #112]	; (870cc <SystemCoreClockUpdate+0x100>)
   8705a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8705c:	4b19      	ldr	r3, [pc, #100]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   8705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   87060:	f003 0303 	and.w	r3, r3, #3
   87064:	2b02      	cmp	r3, #2
   87066:	d016      	beq.n	87096 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   87068:	4a1c      	ldr	r2, [pc, #112]	; (870dc <SystemCoreClockUpdate+0x110>)
   8706a:	4b18      	ldr	r3, [pc, #96]	; (870cc <SystemCoreClockUpdate+0x100>)
   8706c:	601a      	str	r2, [r3, #0]
   8706e:	e7c2      	b.n	86ff6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   87070:	4a18      	ldr	r2, [pc, #96]	; (870d4 <SystemCoreClockUpdate+0x108>)
   87072:	4b16      	ldr	r3, [pc, #88]	; (870cc <SystemCoreClockUpdate+0x100>)
   87074:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   87076:	4b13      	ldr	r3, [pc, #76]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   87078:	6a1b      	ldr	r3, [r3, #32]
   8707a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8707e:	2b10      	cmp	r3, #16
   87080:	d005      	beq.n	8708e <SystemCoreClockUpdate+0xc2>
   87082:	2b20      	cmp	r3, #32
   87084:	d1ea      	bne.n	8705c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   87086:	4a12      	ldr	r2, [pc, #72]	; (870d0 <SystemCoreClockUpdate+0x104>)
   87088:	4b10      	ldr	r3, [pc, #64]	; (870cc <SystemCoreClockUpdate+0x100>)
   8708a:	601a      	str	r2, [r3, #0]
				break;
   8708c:	e7e6      	b.n	8705c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8708e:	4a12      	ldr	r2, [pc, #72]	; (870d8 <SystemCoreClockUpdate+0x10c>)
   87090:	4b0e      	ldr	r3, [pc, #56]	; (870cc <SystemCoreClockUpdate+0x100>)
   87092:	601a      	str	r2, [r3, #0]
				break;
   87094:	e7e2      	b.n	8705c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   87096:	4a0b      	ldr	r2, [pc, #44]	; (870c4 <SystemCoreClockUpdate+0xf8>)
   87098:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8709a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8709c:	480b      	ldr	r0, [pc, #44]	; (870cc <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8709e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   870a2:	6803      	ldr	r3, [r0, #0]
   870a4:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   870a8:	b2d2      	uxtb	r2, r2
   870aa:	fbb3 f3f2 	udiv	r3, r3, r2
   870ae:	6003      	str	r3, [r0, #0]
   870b0:	e7a1      	b.n	86ff6 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   870b2:	4a06      	ldr	r2, [pc, #24]	; (870cc <SystemCoreClockUpdate+0x100>)
   870b4:	6813      	ldr	r3, [r2, #0]
   870b6:	490a      	ldr	r1, [pc, #40]	; (870e0 <SystemCoreClockUpdate+0x114>)
   870b8:	fba1 1303 	umull	r1, r3, r1, r3
   870bc:	085b      	lsrs	r3, r3, #1
   870be:	6013      	str	r3, [r2, #0]
   870c0:	4770      	bx	lr
   870c2:	bf00      	nop
   870c4:	400e0400 	.word	0x400e0400
   870c8:	400e1210 	.word	0x400e1210
   870cc:	200006f0 	.word	0x200006f0
   870d0:	00b71b00 	.word	0x00b71b00
   870d4:	003d0900 	.word	0x003d0900
   870d8:	007a1200 	.word	0x007a1200
   870dc:	0e4e1c00 	.word	0x0e4e1c00
   870e0:	aaaaaaab 	.word	0xaaaaaaab

000870e4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   870e4:	4b0a      	ldr	r3, [pc, #40]	; (87110 <_sbrk+0x2c>)
   870e6:	681b      	ldr	r3, [r3, #0]
   870e8:	b153      	cbz	r3, 87100 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   870ea:	4b09      	ldr	r3, [pc, #36]	; (87110 <_sbrk+0x2c>)
   870ec:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   870ee:	181a      	adds	r2, r3, r0
   870f0:	4908      	ldr	r1, [pc, #32]	; (87114 <_sbrk+0x30>)
   870f2:	4291      	cmp	r1, r2
   870f4:	db08      	blt.n	87108 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   870f6:	4610      	mov	r0, r2
   870f8:	4a05      	ldr	r2, [pc, #20]	; (87110 <_sbrk+0x2c>)
   870fa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   870fc:	4618      	mov	r0, r3
   870fe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   87100:	4a05      	ldr	r2, [pc, #20]	; (87118 <_sbrk+0x34>)
   87102:	4b03      	ldr	r3, [pc, #12]	; (87110 <_sbrk+0x2c>)
   87104:	601a      	str	r2, [r3, #0]
   87106:	e7f0      	b.n	870ea <_sbrk+0x6>
		return (caddr_t) -1;	
   87108:	f04f 30ff 	mov.w	r0, #4294967295
}
   8710c:	4770      	bx	lr
   8710e:	bf00      	nop
   87110:	200023b8 	.word	0x200023b8
   87114:	2007fffc 	.word	0x2007fffc
   87118:	20082000 	.word	0x20082000

0008711c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8711c:	f04f 30ff 	mov.w	r0, #4294967295
   87120:	4770      	bx	lr

00087122 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   87122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   87126:	604b      	str	r3, [r1, #4]

	return 0;
}
   87128:	2000      	movs	r0, #0
   8712a:	4770      	bx	lr

0008712c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8712c:	2001      	movs	r0, #1
   8712e:	4770      	bx	lr

00087130 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   87130:	2000      	movs	r0, #0
   87132:	4770      	bx	lr

00087134 <_exit>:

extern void _exit(int status)
{
   87134:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
   87136:	4601      	mov	r1, r0
   87138:	4801      	ldr	r0, [pc, #4]	; (87140 <_exit+0xc>)
   8713a:	4b02      	ldr	r3, [pc, #8]	; (87144 <_exit+0x10>)
   8713c:	4798      	blx	r3
   8713e:	e7fe      	b.n	8713e <_exit+0xa>
   87140:	0008e578 	.word	0x0008e578
   87144:	0008788d 	.word	0x0008788d

00087148 <_kill>:

	for (;;);
}

extern void _kill(int pid, int sig)
{
   87148:	4770      	bx	lr

0008714a <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
   8714a:	f04f 30ff 	mov.w	r0, #4294967295
   8714e:	4770      	bx	lr

00087150 <fpga_program_setup1>:
	FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   87150:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   87152:	2008      	movs	r0, #8
   87154:	4b19      	ldr	r3, [pc, #100]	; (871bc <fpga_program_setup1+0x6c>)
   87156:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);	
	usart_enable_tx(FPGA_PROG_USART);
#else
				
	spi_enable_clock(SPI);
   87158:	4c19      	ldr	r4, [pc, #100]	; (871c0 <fpga_program_setup1+0x70>)
   8715a:	4620      	mov	r0, r4
   8715c:	4b19      	ldr	r3, [pc, #100]	; (871c4 <fpga_program_setup1+0x74>)
   8715e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   87160:	2380      	movs	r3, #128	; 0x80
   87162:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   87164:	6863      	ldr	r3, [r4, #4]
   87166:	f043 0301 	orr.w	r3, r3, #1
   8716a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8716c:	6863      	ldr	r3, [r4, #4]
   8716e:	f043 0310 	orr.w	r3, r3, #16
   87172:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   87174:	6863      	ldr	r3, [r4, #4]
   87176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8717a:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
				
	spi_set_clock_polarity(SPI, 0, 0);
   8717c:	2200      	movs	r2, #0
   8717e:	4611      	mov	r1, r2
   87180:	4620      	mov	r0, r4
   87182:	4b11      	ldr	r3, [pc, #68]	; (871c8 <fpga_program_setup1+0x78>)
   87184:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   87186:	2201      	movs	r2, #1
   87188:	2100      	movs	r1, #0
   8718a:	4620      	mov	r0, r4
   8718c:	4b0f      	ldr	r3, [pc, #60]	; (871cc <fpga_program_setup1+0x7c>)
   8718e:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   87190:	490f      	ldr	r1, [pc, #60]	; (871d0 <fpga_program_setup1+0x80>)
   87192:	4810      	ldr	r0, [pc, #64]	; (871d4 <fpga_program_setup1+0x84>)
   87194:	4b10      	ldr	r3, [pc, #64]	; (871d8 <fpga_program_setup1+0x88>)
   87196:	4798      	blx	r3
   87198:	b2c2      	uxtb	r2, r0
   8719a:	2100      	movs	r1, #0
   8719c:	4620      	mov	r0, r4
   8719e:	4b0f      	ldr	r3, [pc, #60]	; (871dc <fpga_program_setup1+0x8c>)
   871a0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   871a2:	2301      	movs	r3, #1
   871a4:	6023      	str	r3, [r4, #0]
				
	spi_enable(SPI);
				
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   871a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   871aa:	200e      	movs	r0, #14
   871ac:	4c0c      	ldr	r4, [pc, #48]	; (871e0 <fpga_program_setup1+0x90>)
   871ae:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);			
   871b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   871b4:	200f      	movs	r0, #15
   871b6:	47a0      	blx	r4
#endif
}
   871b8:	bd10      	pop	{r4, pc}
   871ba:	bf00      	nop
   871bc:	000851d1 	.word	0x000851d1
   871c0:	40008000 	.word	0x40008000
   871c4:	000855d1 	.word	0x000855d1
   871c8:	00085653 	.word	0x00085653
   871cc:	00085671 	.word	0x00085671
   871d0:	05b8d800 	.word	0x05b8d800
   871d4:	000f4240 	.word	0x000f4240
   871d8:	0008568f 	.word	0x0008568f
   871dc:	000856a5 	.word	0x000856a5
   871e0:	000851ed 	.word	0x000851ed

000871e4 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   871e4:	b508      	push	{r3, lr}
	FPGA_NPROG_HIGH();	
   871e6:	2008      	movs	r0, #8
   871e8:	4b01      	ldr	r3, [pc, #4]	; (871f0 <fpga_program_setup2+0xc>)
   871ea:	4798      	blx	r3
}
   871ec:	bd08      	pop	{r3, pc}
   871ee:	bf00      	nop
   871f0:	000851b7 	.word	0x000851b7

000871f4 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   871f4:	b510      	push	{r4, lr}
   871f6:	4601      	mov	r1, r0
		databyte = databyte >> 1;
	}
	#elif FPGA_USE_USART
	usart_putchar(FPGA_PROG_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   871f8:	2300      	movs	r3, #0
   871fa:	461a      	mov	r2, r3
   871fc:	4801      	ldr	r0, [pc, #4]	; (87204 <fpga_program_sendbyte+0x10>)
   871fe:	4c02      	ldr	r4, [pc, #8]	; (87208 <fpga_program_sendbyte+0x14>)
   87200:	47a0      	blx	r4
	#endif
}
   87202:	bd10      	pop	{r4, pc}
   87204:	40008000 	.word	0x40008000
   87208:	0008561f 	.word	0x0008561f

0008720c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8720c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8720e:	b083      	sub	sp, #12
   87210:	4605      	mov	r5, r0
   87212:	460c      	mov	r4, r1
	uint32_t val = 0;
   87214:	2300      	movs	r3, #0
   87216:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   87218:	4b18      	ldr	r3, [pc, #96]	; (8727c <usart_serial_getchar+0x70>)
   8721a:	4298      	cmp	r0, r3
   8721c:	d010      	beq.n	87240 <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8721e:	4b18      	ldr	r3, [pc, #96]	; (87280 <usart_serial_getchar+0x74>)
   87220:	4298      	cmp	r0, r3
   87222:	d021      	beq.n	87268 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   87224:	4b17      	ldr	r3, [pc, #92]	; (87284 <usart_serial_getchar+0x78>)
   87226:	4298      	cmp	r0, r3
   87228:	d111      	bne.n	8724e <usart_serial_getchar+0x42>
		while (usart_read(p_usart, &val));
   8722a:	461e      	mov	r6, r3
   8722c:	4d16      	ldr	r5, [pc, #88]	; (87288 <usart_serial_getchar+0x7c>)
   8722e:	a901      	add	r1, sp, #4
   87230:	4630      	mov	r0, r6
   87232:	47a8      	blx	r5
   87234:	2800      	cmp	r0, #0
   87236:	d1fa      	bne.n	8722e <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   87238:	9b01      	ldr	r3, [sp, #4]
   8723a:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8723c:	b003      	add	sp, #12
   8723e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   87240:	461f      	mov	r7, r3
   87242:	4e12      	ldr	r6, [pc, #72]	; (8728c <usart_serial_getchar+0x80>)
   87244:	4621      	mov	r1, r4
   87246:	4638      	mov	r0, r7
   87248:	47b0      	blx	r6
   8724a:	2800      	cmp	r0, #0
   8724c:	d1fa      	bne.n	87244 <usart_serial_getchar+0x38>
	if (USART2 == p_usart) {
   8724e:	4b10      	ldr	r3, [pc, #64]	; (87290 <usart_serial_getchar+0x84>)
   87250:	429d      	cmp	r5, r3
   87252:	d1f3      	bne.n	8723c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   87254:	461e      	mov	r6, r3
   87256:	4d0c      	ldr	r5, [pc, #48]	; (87288 <usart_serial_getchar+0x7c>)
   87258:	a901      	add	r1, sp, #4
   8725a:	4630      	mov	r0, r6
   8725c:	47a8      	blx	r5
   8725e:	2800      	cmp	r0, #0
   87260:	d1fa      	bne.n	87258 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   87262:	9b01      	ldr	r3, [sp, #4]
   87264:	7023      	strb	r3, [r4, #0]
}
   87266:	e7e9      	b.n	8723c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   87268:	461e      	mov	r6, r3
   8726a:	4d07      	ldr	r5, [pc, #28]	; (87288 <usart_serial_getchar+0x7c>)
   8726c:	a901      	add	r1, sp, #4
   8726e:	4630      	mov	r0, r6
   87270:	47a8      	blx	r5
   87272:	2800      	cmp	r0, #0
   87274:	d1fa      	bne.n	8726c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   87276:	9b01      	ldr	r3, [sp, #4]
   87278:	7023      	strb	r3, [r4, #0]
	if (USART2 == p_usart) {
   8727a:	e7df      	b.n	8723c <usart_serial_getchar+0x30>
   8727c:	400e0600 	.word	0x400e0600
   87280:	40090000 	.word	0x40090000
   87284:	40094000 	.word	0x40094000
   87288:	00086eaf 	.word	0x00086eaf
   8728c:	00086f21 	.word	0x00086f21
   87290:	40098000 	.word	0x40098000

00087294 <usart_serial_putchar>:
{
   87294:	b570      	push	{r4, r5, r6, lr}
   87296:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   87298:	4b18      	ldr	r3, [pc, #96]	; (872fc <usart_serial_putchar+0x68>)
   8729a:	4298      	cmp	r0, r3
   8729c:	d00a      	beq.n	872b4 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   8729e:	4b18      	ldr	r3, [pc, #96]	; (87300 <usart_serial_putchar+0x6c>)
   872a0:	4298      	cmp	r0, r3
   872a2:	d010      	beq.n	872c6 <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   872a4:	4b17      	ldr	r3, [pc, #92]	; (87304 <usart_serial_putchar+0x70>)
   872a6:	4298      	cmp	r0, r3
   872a8:	d016      	beq.n	872d8 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   872aa:	4b17      	ldr	r3, [pc, #92]	; (87308 <usart_serial_putchar+0x74>)
   872ac:	4298      	cmp	r0, r3
   872ae:	d01c      	beq.n	872ea <usart_serial_putchar+0x56>
	return 0;
   872b0:	2000      	movs	r0, #0
}
   872b2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   872b4:	461e      	mov	r6, r3
   872b6:	4d15      	ldr	r5, [pc, #84]	; (8730c <usart_serial_putchar+0x78>)
   872b8:	4621      	mov	r1, r4
   872ba:	4630      	mov	r0, r6
   872bc:	47a8      	blx	r5
   872be:	2800      	cmp	r0, #0
   872c0:	d1fa      	bne.n	872b8 <usart_serial_putchar+0x24>
		return 1;
   872c2:	2001      	movs	r0, #1
   872c4:	e7f5      	b.n	872b2 <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   872c6:	461e      	mov	r6, r3
   872c8:	4d11      	ldr	r5, [pc, #68]	; (87310 <usart_serial_putchar+0x7c>)
   872ca:	4621      	mov	r1, r4
   872cc:	4630      	mov	r0, r6
   872ce:	47a8      	blx	r5
   872d0:	2800      	cmp	r0, #0
   872d2:	d1fa      	bne.n	872ca <usart_serial_putchar+0x36>
		return 1;
   872d4:	2001      	movs	r0, #1
   872d6:	e7ec      	b.n	872b2 <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   872d8:	461e      	mov	r6, r3
   872da:	4d0d      	ldr	r5, [pc, #52]	; (87310 <usart_serial_putchar+0x7c>)
   872dc:	4621      	mov	r1, r4
   872de:	4630      	mov	r0, r6
   872e0:	47a8      	blx	r5
   872e2:	2800      	cmp	r0, #0
   872e4:	d1fa      	bne.n	872dc <usart_serial_putchar+0x48>
		return 1;
   872e6:	2001      	movs	r0, #1
   872e8:	e7e3      	b.n	872b2 <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   872ea:	461e      	mov	r6, r3
   872ec:	4d08      	ldr	r5, [pc, #32]	; (87310 <usart_serial_putchar+0x7c>)
   872ee:	4621      	mov	r1, r4
   872f0:	4630      	mov	r0, r6
   872f2:	47a8      	blx	r5
   872f4:	2800      	cmp	r0, #0
   872f6:	d1fa      	bne.n	872ee <usart_serial_putchar+0x5a>
		return 1;
   872f8:	2001      	movs	r0, #1
   872fa:	e7da      	b.n	872b2 <usart_serial_putchar+0x1e>
   872fc:	400e0600 	.word	0x400e0600
   87300:	40090000 	.word	0x40090000
   87304:	40094000 	.word	0x40094000
   87308:	40098000 	.word	0x40098000
   8730c:	00086f11 	.word	0x00086f11
   87310:	00086e89 	.word	0x00086e89

00087314 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   87314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87318:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   8731a:	2110      	movs	r1, #16
   8731c:	eb0d 0001 	add.w	r0, sp, r1
   87320:	4b5a      	ldr	r3, [pc, #360]	; (8748c <main+0x178>)
   87322:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   87324:	2008      	movs	r0, #8
   87326:	4d5a      	ldr	r5, [pc, #360]	; (87490 <main+0x17c>)
   87328:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8732a:	4c5a      	ldr	r4, [pc, #360]	; (87494 <main+0x180>)
   8732c:	4b5a      	ldr	r3, [pc, #360]	; (87498 <main+0x184>)
   8732e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   87330:	4b5a      	ldr	r3, [pc, #360]	; (8749c <main+0x188>)
   87332:	4a5b      	ldr	r2, [pc, #364]	; (874a0 <main+0x18c>)
   87334:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   87336:	4b5b      	ldr	r3, [pc, #364]	; (874a4 <main+0x190>)
   87338:	4a5b      	ldr	r2, [pc, #364]	; (874a8 <main+0x194>)
   8733a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8733c:	4b5b      	ldr	r3, [pc, #364]	; (874ac <main+0x198>)
   8733e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   87340:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   87344:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   87346:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8734a:	9303      	str	r3, [sp, #12]
   8734c:	2008      	movs	r0, #8
   8734e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   87350:	a901      	add	r1, sp, #4
   87352:	4620      	mov	r0, r4
   87354:	4b56      	ldr	r3, [pc, #344]	; (874b0 <main+0x19c>)
   87356:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   87358:	4d56      	ldr	r5, [pc, #344]	; (874b4 <main+0x1a0>)
   8735a:	682b      	ldr	r3, [r5, #0]
   8735c:	2100      	movs	r1, #0
   8735e:	6898      	ldr	r0, [r3, #8]
   87360:	4c55      	ldr	r4, [pc, #340]	; (874b8 <main+0x1a4>)
   87362:	47a0      	blx	r4
	setbuf(stdin, NULL);
   87364:	682b      	ldr	r3, [r5, #0]
   87366:	2100      	movs	r1, #0
   87368:	6858      	ldr	r0, [r3, #4]
   8736a:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   8736c:	2101      	movs	r1, #1
   8736e:	4b53      	ldr	r3, [pc, #332]	; (874bc <main+0x1a8>)
   87370:	7019      	strb	r1, [r3, #0]
   87372:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   87376:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   87378:	4b51      	ldr	r3, [pc, #324]	; (874c0 <main+0x1ac>)
   8737a:	2200      	movs	r2, #0
   8737c:	701a      	strb	r2, [r3, #0]
   8737e:	705a      	strb	r2, [r3, #1]
   87380:	709a      	strb	r2, [r3, #2]
   87382:	70da      	strb	r2, [r3, #3]
   87384:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   87386:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   87388:	4b4e      	ldr	r3, [pc, #312]	; (874c4 <main+0x1b0>)
   8738a:	4798      	blx	r3
	board_init();
   8738c:	4b4e      	ldr	r3, [pc, #312]	; (874c8 <main+0x1b4>)
   8738e:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   87390:	4b4e      	ldr	r3, [pc, #312]	; (874cc <main+0x1b8>)
   87392:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   87394:	ac04      	add	r4, sp, #16
   87396:	4d4e      	ldr	r5, [pc, #312]	; (874d0 <main+0x1bc>)
   87398:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   8739c:	4f4d      	ldr	r7, [pc, #308]	; (874d4 <main+0x1c0>)
   8739e:	4e4e      	ldr	r6, [pc, #312]	; (874d8 <main+0x1c4>)
   873a0:	f854 2b04 	ldr.w	r2, [r4], #4
   873a4:	4639      	mov	r1, r7
   873a6:	4628      	mov	r0, r5
   873a8:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   873aa:	3508      	adds	r5, #8
   873ac:	4544      	cmp	r4, r8
   873ae:	d1f7      	bne.n	873a0 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   873b0:	4c47      	ldr	r4, [pc, #284]	; (874d0 <main+0x1bc>)
   873b2:	2600      	movs	r6, #0
   873b4:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   873b8:	4a48      	ldr	r2, [pc, #288]	; (874dc <main+0x1c8>)
   873ba:	4949      	ldr	r1, [pc, #292]	; (874e0 <main+0x1cc>)
   873bc:	4849      	ldr	r0, [pc, #292]	; (874e4 <main+0x1d0>)
   873be:	4f4a      	ldr	r7, [pc, #296]	; (874e8 <main+0x1d4>)
   873c0:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   873c2:	4621      	mov	r1, r4
   873c4:	4849      	ldr	r0, [pc, #292]	; (874ec <main+0x1d8>)
   873c6:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   873c8:	2009      	movs	r0, #9
   873ca:	4b31      	ldr	r3, [pc, #196]	; (87490 <main+0x17c>)
   873cc:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   873ce:	4d48      	ldr	r5, [pc, #288]	; (874f0 <main+0x1dc>)
   873d0:	4629      	mov	r1, r5
   873d2:	2029      	movs	r0, #41	; 0x29
   873d4:	4c47      	ldr	r4, [pc, #284]	; (874f4 <main+0x1e0>)
   873d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   873d8:	4629      	mov	r1, r5
   873da:	202a      	movs	r0, #42	; 0x2a
   873dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   873de:	4629      	mov	r1, r5
   873e0:	202b      	movs	r0, #43	; 0x2b
   873e2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   873e4:	4629      	mov	r1, r5
   873e6:	202c      	movs	r0, #44	; 0x2c
   873e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   873ea:	4629      	mov	r1, r5
   873ec:	202d      	movs	r0, #45	; 0x2d
   873ee:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   873f0:	4629      	mov	r1, r5
   873f2:	202e      	movs	r0, #46	; 0x2e
   873f4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   873f6:	4629      	mov	r1, r5
   873f8:	202f      	movs	r0, #47	; 0x2f
   873fa:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   873fc:	4629      	mov	r1, r5
   873fe:	2030      	movs	r0, #48	; 0x30
   87400:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   87402:	4629      	mov	r1, r5
   87404:	2033      	movs	r0, #51	; 0x33
   87406:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   87408:	4629      	mov	r1, r5
   8740a:	2037      	movs	r0, #55	; 0x37
   8740c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8740e:	4629      	mov	r1, r5
   87410:	2034      	movs	r0, #52	; 0x34
   87412:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   87414:	4838      	ldr	r0, [pc, #224]	; (874f8 <main+0x1e4>)
   87416:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   87418:	4c38      	ldr	r4, [pc, #224]	; (874fc <main+0x1e8>)
   8741a:	4a39      	ldr	r2, [pc, #228]	; (87500 <main+0x1ec>)
   8741c:	4631      	mov	r1, r6
   8741e:	4620      	mov	r0, r4
   87420:	4b38      	ldr	r3, [pc, #224]	; (87504 <main+0x1f0>)
   87422:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   87424:	4a38      	ldr	r2, [pc, #224]	; (87508 <main+0x1f4>)
   87426:	4631      	mov	r1, r6
   87428:	4620      	mov	r0, r4
   8742a:	4b38      	ldr	r3, [pc, #224]	; (8750c <main+0x1f8>)
   8742c:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   8742e:	4a38      	ldr	r2, [pc, #224]	; (87510 <main+0x1fc>)
   87430:	4631      	mov	r1, r6
   87432:	4620      	mov	r0, r4
   87434:	4b37      	ldr	r3, [pc, #220]	; (87514 <main+0x200>)
   87436:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   87438:	2203      	movs	r2, #3
   8743a:	4631      	mov	r1, r6
   8743c:	4620      	mov	r0, r4
   8743e:	4b36      	ldr	r3, [pc, #216]	; (87518 <main+0x204>)
   87440:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   87442:	4b36      	ldr	r3, [pc, #216]	; (8751c <main+0x208>)
   87444:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   87446:	4b36      	ldr	r3, [pc, #216]	; (87520 <main+0x20c>)
   87448:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   8744a:	4b36      	ldr	r3, [pc, #216]	; (87524 <main+0x210>)
   8744c:	2204      	movs	r2, #4
   8744e:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   87450:	4630      	mov	r0, r6
   87452:	4b35      	ldr	r3, [pc, #212]	; (87528 <main+0x214>)
   87454:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   87456:	4835      	ldr	r0, [pc, #212]	; (8752c <main+0x218>)
   87458:	47b8      	blx	r7
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	extern volatile bool enable_cdc_transfer[2];
	extern volatile bool usart_x_enabled[4];
	extern tcirc_buf usb_usart_circ_buf;
	init_circ_buf(&usb_usart_circ_buf);
   8745a:	4835      	ldr	r0, [pc, #212]	; (87530 <main+0x21c>)
   8745c:	4b35      	ldr	r3, [pc, #212]	; (87534 <main+0x220>)
   8745e:	4798      	blx	r3
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   87460:	4c35      	ldr	r4, [pc, #212]	; (87538 <main+0x224>)
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
				uint16_t i = 0;
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   87462:	4f36      	ldr	r7, [pc, #216]	; (8753c <main+0x228>)
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   87464:	4a36      	ldr	r2, [pc, #216]	; (87540 <main+0x22c>)
   87466:	7823      	ldrb	r3, [r4, #0]
   87468:	2b00      	cmp	r3, #0
   8746a:	d0fc      	beq.n	87466 <main+0x152>
   8746c:	7813      	ldrb	r3, [r2, #0]
   8746e:	2b00      	cmp	r3, #0
   87470:	d0f9      	beq.n	87466 <main+0x152>
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   87472:	4d2f      	ldr	r5, [pc, #188]	; (87530 <main+0x21c>)
   87474:	4e33      	ldr	r6, [pc, #204]	; (87544 <main+0x230>)
   87476:	4628      	mov	r0, r5
   87478:	47b0      	blx	r6
   8747a:	2800      	cmp	r0, #0
   8747c:	d0f2      	beq.n	87464 <main+0x150>
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   8747e:	4628      	mov	r0, r5
   87480:	47b8      	blx	r7
   87482:	4601      	mov	r1, r0
   87484:	2000      	movs	r0, #0
   87486:	4b30      	ldr	r3, [pc, #192]	; (87548 <main+0x234>)
   87488:	4798      	blx	r3
   8748a:	e7f4      	b.n	87476 <main+0x162>
   8748c:	00081e89 	.word	0x00081e89
   87490:	00085531 	.word	0x00085531
   87494:	400e0600 	.word	0x400e0600
   87498:	20002df0 	.word	0x20002df0
   8749c:	20002dec 	.word	0x20002dec
   874a0:	00087295 	.word	0x00087295
   874a4:	20002de8 	.word	0x20002de8
   874a8:	0008720d 	.word	0x0008720d
   874ac:	05b8d800 	.word	0x05b8d800
   874b0:	00086edb 	.word	0x00086edb
   874b4:	20000718 	.word	0x20000718
   874b8:	00087a41 	.word	0x00087a41
   874bc:	200006ee 	.word	0x200006ee
   874c0:	20002de0 	.word	0x20002de0
   874c4:	000845a5 	.word	0x000845a5
   874c8:	00085051 	.word	0x00085051
   874cc:	00084331 	.word	0x00084331
   874d0:	200006f4 	.word	0x200006f4
   874d4:	0008e594 	.word	0x0008e594
   874d8:	00087bf1 	.word	0x00087bf1
   874dc:	0008e59c 	.word	0x0008e59c
   874e0:	0008e5a8 	.word	0x0008e5a8
   874e4:	0008e5b4 	.word	0x0008e5b4
   874e8:	0008788d 	.word	0x0008788d
   874ec:	0008e5e8 	.word	0x0008e5e8
   874f0:	08000001 	.word	0x08000001
   874f4:	000851ed 	.word	0x000851ed
   874f8:	0008e5fc 	.word	0x0008e5fc
   874fc:	400e0000 	.word	0x400e0000
   87500:	01010100 	.word	0x01010100
   87504:	000850c1 	.word	0x000850c1
   87508:	01030101 	.word	0x01030101
   8750c:	000850cd 	.word	0x000850cd
   87510:	00040002 	.word	0x00040002
   87514:	000850d9 	.word	0x000850d9
   87518:	000850e5 	.word	0x000850e5
   8751c:	000844ed 	.word	0x000844ed
   87520:	0008486d 	.word	0x0008486d
   87524:	400e0400 	.word	0x400e0400
   87528:	00085599 	.word	0x00085599
   8752c:	0008e61c 	.word	0x0008e61c
   87530:	200029b8 	.word	0x200029b8
   87534:	00081ed9 	.word	0x00081ed9
   87538:	20001a98 	.word	0x20001a98
   8753c:	00081f39 	.word	0x00081f39
   87540:	20002178 	.word	0x20002178
   87544:	00081f81 	.word	0x00081f81
   87548:	00080705 	.word	0x00080705

0008754c <__aeabi_uldivmod>:
   8754c:	b953      	cbnz	r3, 87564 <__aeabi_uldivmod+0x18>
   8754e:	b94a      	cbnz	r2, 87564 <__aeabi_uldivmod+0x18>
   87550:	2900      	cmp	r1, #0
   87552:	bf08      	it	eq
   87554:	2800      	cmpeq	r0, #0
   87556:	bf1c      	itt	ne
   87558:	f04f 31ff 	movne.w	r1, #4294967295
   8755c:	f04f 30ff 	movne.w	r0, #4294967295
   87560:	f000 b96e 	b.w	87840 <__aeabi_idiv0>
   87564:	f1ad 0c08 	sub.w	ip, sp, #8
   87568:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8756c:	f000 f806 	bl	8757c <__udivmoddi4>
   87570:	f8dd e004 	ldr.w	lr, [sp, #4]
   87574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87578:	b004      	add	sp, #16
   8757a:	4770      	bx	lr

0008757c <__udivmoddi4>:
   8757c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87580:	9e08      	ldr	r6, [sp, #32]
   87582:	460d      	mov	r5, r1
   87584:	4604      	mov	r4, r0
   87586:	468e      	mov	lr, r1
   87588:	2b00      	cmp	r3, #0
   8758a:	f040 8083 	bne.w	87694 <__udivmoddi4+0x118>
   8758e:	428a      	cmp	r2, r1
   87590:	4617      	mov	r7, r2
   87592:	d947      	bls.n	87624 <__udivmoddi4+0xa8>
   87594:	fab2 f382 	clz	r3, r2
   87598:	b14b      	cbz	r3, 875ae <__udivmoddi4+0x32>
   8759a:	f1c3 0120 	rsb	r1, r3, #32
   8759e:	fa05 fe03 	lsl.w	lr, r5, r3
   875a2:	fa20 f101 	lsr.w	r1, r0, r1
   875a6:	409f      	lsls	r7, r3
   875a8:	ea41 0e0e 	orr.w	lr, r1, lr
   875ac:	409c      	lsls	r4, r3
   875ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
   875b2:	fbbe fcf8 	udiv	ip, lr, r8
   875b6:	fa1f f987 	uxth.w	r9, r7
   875ba:	fb08 e21c 	mls	r2, r8, ip, lr
   875be:	fb0c f009 	mul.w	r0, ip, r9
   875c2:	0c21      	lsrs	r1, r4, #16
   875c4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   875c8:	4290      	cmp	r0, r2
   875ca:	d90a      	bls.n	875e2 <__udivmoddi4+0x66>
   875cc:	18ba      	adds	r2, r7, r2
   875ce:	f10c 31ff 	add.w	r1, ip, #4294967295
   875d2:	f080 8118 	bcs.w	87806 <__udivmoddi4+0x28a>
   875d6:	4290      	cmp	r0, r2
   875d8:	f240 8115 	bls.w	87806 <__udivmoddi4+0x28a>
   875dc:	f1ac 0c02 	sub.w	ip, ip, #2
   875e0:	443a      	add	r2, r7
   875e2:	1a12      	subs	r2, r2, r0
   875e4:	fbb2 f0f8 	udiv	r0, r2, r8
   875e8:	fb08 2210 	mls	r2, r8, r0, r2
   875ec:	fb00 f109 	mul.w	r1, r0, r9
   875f0:	b2a4      	uxth	r4, r4
   875f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   875f6:	42a1      	cmp	r1, r4
   875f8:	d909      	bls.n	8760e <__udivmoddi4+0x92>
   875fa:	193c      	adds	r4, r7, r4
   875fc:	f100 32ff 	add.w	r2, r0, #4294967295
   87600:	f080 8103 	bcs.w	8780a <__udivmoddi4+0x28e>
   87604:	42a1      	cmp	r1, r4
   87606:	f240 8100 	bls.w	8780a <__udivmoddi4+0x28e>
   8760a:	3802      	subs	r0, #2
   8760c:	443c      	add	r4, r7
   8760e:	1a64      	subs	r4, r4, r1
   87610:	2100      	movs	r1, #0
   87612:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   87616:	b11e      	cbz	r6, 87620 <__udivmoddi4+0xa4>
   87618:	2200      	movs	r2, #0
   8761a:	40dc      	lsrs	r4, r3
   8761c:	e9c6 4200 	strd	r4, r2, [r6]
   87620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87624:	b902      	cbnz	r2, 87628 <__udivmoddi4+0xac>
   87626:	deff      	udf	#255	; 0xff
   87628:	fab2 f382 	clz	r3, r2
   8762c:	2b00      	cmp	r3, #0
   8762e:	d14f      	bne.n	876d0 <__udivmoddi4+0x154>
   87630:	1a8d      	subs	r5, r1, r2
   87632:	2101      	movs	r1, #1
   87634:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   87638:	fa1f f882 	uxth.w	r8, r2
   8763c:	fbb5 fcfe 	udiv	ip, r5, lr
   87640:	fb0e 551c 	mls	r5, lr, ip, r5
   87644:	fb08 f00c 	mul.w	r0, r8, ip
   87648:	0c22      	lsrs	r2, r4, #16
   8764a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8764e:	42a8      	cmp	r0, r5
   87650:	d907      	bls.n	87662 <__udivmoddi4+0xe6>
   87652:	197d      	adds	r5, r7, r5
   87654:	f10c 32ff 	add.w	r2, ip, #4294967295
   87658:	d202      	bcs.n	87660 <__udivmoddi4+0xe4>
   8765a:	42a8      	cmp	r0, r5
   8765c:	f200 80e9 	bhi.w	87832 <__udivmoddi4+0x2b6>
   87660:	4694      	mov	ip, r2
   87662:	1a2d      	subs	r5, r5, r0
   87664:	fbb5 f0fe 	udiv	r0, r5, lr
   87668:	fb0e 5510 	mls	r5, lr, r0, r5
   8766c:	fb08 f800 	mul.w	r8, r8, r0
   87670:	b2a4      	uxth	r4, r4
   87672:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   87676:	45a0      	cmp	r8, r4
   87678:	d907      	bls.n	8768a <__udivmoddi4+0x10e>
   8767a:	193c      	adds	r4, r7, r4
   8767c:	f100 32ff 	add.w	r2, r0, #4294967295
   87680:	d202      	bcs.n	87688 <__udivmoddi4+0x10c>
   87682:	45a0      	cmp	r8, r4
   87684:	f200 80d9 	bhi.w	8783a <__udivmoddi4+0x2be>
   87688:	4610      	mov	r0, r2
   8768a:	eba4 0408 	sub.w	r4, r4, r8
   8768e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   87692:	e7c0      	b.n	87616 <__udivmoddi4+0x9a>
   87694:	428b      	cmp	r3, r1
   87696:	d908      	bls.n	876aa <__udivmoddi4+0x12e>
   87698:	2e00      	cmp	r6, #0
   8769a:	f000 80b1 	beq.w	87800 <__udivmoddi4+0x284>
   8769e:	2100      	movs	r1, #0
   876a0:	e9c6 0500 	strd	r0, r5, [r6]
   876a4:	4608      	mov	r0, r1
   876a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   876aa:	fab3 f183 	clz	r1, r3
   876ae:	2900      	cmp	r1, #0
   876b0:	d14b      	bne.n	8774a <__udivmoddi4+0x1ce>
   876b2:	42ab      	cmp	r3, r5
   876b4:	d302      	bcc.n	876bc <__udivmoddi4+0x140>
   876b6:	4282      	cmp	r2, r0
   876b8:	f200 80b9 	bhi.w	8782e <__udivmoddi4+0x2b2>
   876bc:	1a84      	subs	r4, r0, r2
   876be:	eb65 0303 	sbc.w	r3, r5, r3
   876c2:	2001      	movs	r0, #1
   876c4:	469e      	mov	lr, r3
   876c6:	2e00      	cmp	r6, #0
   876c8:	d0aa      	beq.n	87620 <__udivmoddi4+0xa4>
   876ca:	e9c6 4e00 	strd	r4, lr, [r6]
   876ce:	e7a7      	b.n	87620 <__udivmoddi4+0xa4>
   876d0:	409f      	lsls	r7, r3
   876d2:	f1c3 0220 	rsb	r2, r3, #32
   876d6:	40d1      	lsrs	r1, r2
   876d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   876dc:	fbb1 f0fe 	udiv	r0, r1, lr
   876e0:	fa1f f887 	uxth.w	r8, r7
   876e4:	fb0e 1110 	mls	r1, lr, r0, r1
   876e8:	fa24 f202 	lsr.w	r2, r4, r2
   876ec:	409d      	lsls	r5, r3
   876ee:	fb00 fc08 	mul.w	ip, r0, r8
   876f2:	432a      	orrs	r2, r5
   876f4:	0c15      	lsrs	r5, r2, #16
   876f6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   876fa:	45ac      	cmp	ip, r5
   876fc:	fa04 f403 	lsl.w	r4, r4, r3
   87700:	d909      	bls.n	87716 <__udivmoddi4+0x19a>
   87702:	197d      	adds	r5, r7, r5
   87704:	f100 31ff 	add.w	r1, r0, #4294967295
   87708:	f080 808f 	bcs.w	8782a <__udivmoddi4+0x2ae>
   8770c:	45ac      	cmp	ip, r5
   8770e:	f240 808c 	bls.w	8782a <__udivmoddi4+0x2ae>
   87712:	3802      	subs	r0, #2
   87714:	443d      	add	r5, r7
   87716:	eba5 050c 	sub.w	r5, r5, ip
   8771a:	fbb5 f1fe 	udiv	r1, r5, lr
   8771e:	fb0e 5c11 	mls	ip, lr, r1, r5
   87722:	fb01 f908 	mul.w	r9, r1, r8
   87726:	b295      	uxth	r5, r2
   87728:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8772c:	45a9      	cmp	r9, r5
   8772e:	d907      	bls.n	87740 <__udivmoddi4+0x1c4>
   87730:	197d      	adds	r5, r7, r5
   87732:	f101 32ff 	add.w	r2, r1, #4294967295
   87736:	d274      	bcs.n	87822 <__udivmoddi4+0x2a6>
   87738:	45a9      	cmp	r9, r5
   8773a:	d972      	bls.n	87822 <__udivmoddi4+0x2a6>
   8773c:	3902      	subs	r1, #2
   8773e:	443d      	add	r5, r7
   87740:	eba5 0509 	sub.w	r5, r5, r9
   87744:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   87748:	e778      	b.n	8763c <__udivmoddi4+0xc0>
   8774a:	f1c1 0720 	rsb	r7, r1, #32
   8774e:	408b      	lsls	r3, r1
   87750:	fa22 fc07 	lsr.w	ip, r2, r7
   87754:	ea4c 0c03 	orr.w	ip, ip, r3
   87758:	fa25 f407 	lsr.w	r4, r5, r7
   8775c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   87760:	fbb4 f9fe 	udiv	r9, r4, lr
   87764:	fa1f f88c 	uxth.w	r8, ip
   87768:	fb0e 4419 	mls	r4, lr, r9, r4
   8776c:	fa20 f307 	lsr.w	r3, r0, r7
   87770:	fb09 fa08 	mul.w	sl, r9, r8
   87774:	408d      	lsls	r5, r1
   87776:	431d      	orrs	r5, r3
   87778:	0c2b      	lsrs	r3, r5, #16
   8777a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8777e:	45a2      	cmp	sl, r4
   87780:	fa02 f201 	lsl.w	r2, r2, r1
   87784:	fa00 f301 	lsl.w	r3, r0, r1
   87788:	d909      	bls.n	8779e <__udivmoddi4+0x222>
   8778a:	eb1c 0404 	adds.w	r4, ip, r4
   8778e:	f109 30ff 	add.w	r0, r9, #4294967295
   87792:	d248      	bcs.n	87826 <__udivmoddi4+0x2aa>
   87794:	45a2      	cmp	sl, r4
   87796:	d946      	bls.n	87826 <__udivmoddi4+0x2aa>
   87798:	f1a9 0902 	sub.w	r9, r9, #2
   8779c:	4464      	add	r4, ip
   8779e:	eba4 040a 	sub.w	r4, r4, sl
   877a2:	fbb4 f0fe 	udiv	r0, r4, lr
   877a6:	fb0e 4410 	mls	r4, lr, r0, r4
   877aa:	fb00 fa08 	mul.w	sl, r0, r8
   877ae:	b2ad      	uxth	r5, r5
   877b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   877b4:	45a2      	cmp	sl, r4
   877b6:	d908      	bls.n	877ca <__udivmoddi4+0x24e>
   877b8:	eb1c 0404 	adds.w	r4, ip, r4
   877bc:	f100 35ff 	add.w	r5, r0, #4294967295
   877c0:	d22d      	bcs.n	8781e <__udivmoddi4+0x2a2>
   877c2:	45a2      	cmp	sl, r4
   877c4:	d92b      	bls.n	8781e <__udivmoddi4+0x2a2>
   877c6:	3802      	subs	r0, #2
   877c8:	4464      	add	r4, ip
   877ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   877ce:	fba0 8902 	umull	r8, r9, r0, r2
   877d2:	eba4 040a 	sub.w	r4, r4, sl
   877d6:	454c      	cmp	r4, r9
   877d8:	46c6      	mov	lr, r8
   877da:	464d      	mov	r5, r9
   877dc:	d319      	bcc.n	87812 <__udivmoddi4+0x296>
   877de:	d016      	beq.n	8780e <__udivmoddi4+0x292>
   877e0:	b15e      	cbz	r6, 877fa <__udivmoddi4+0x27e>
   877e2:	ebb3 020e 	subs.w	r2, r3, lr
   877e6:	eb64 0405 	sbc.w	r4, r4, r5
   877ea:	fa04 f707 	lsl.w	r7, r4, r7
   877ee:	fa22 f301 	lsr.w	r3, r2, r1
   877f2:	431f      	orrs	r7, r3
   877f4:	40cc      	lsrs	r4, r1
   877f6:	e9c6 7400 	strd	r7, r4, [r6]
   877fa:	2100      	movs	r1, #0
   877fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87800:	4631      	mov	r1, r6
   87802:	4630      	mov	r0, r6
   87804:	e70c      	b.n	87620 <__udivmoddi4+0xa4>
   87806:	468c      	mov	ip, r1
   87808:	e6eb      	b.n	875e2 <__udivmoddi4+0x66>
   8780a:	4610      	mov	r0, r2
   8780c:	e6ff      	b.n	8760e <__udivmoddi4+0x92>
   8780e:	4543      	cmp	r3, r8
   87810:	d2e6      	bcs.n	877e0 <__udivmoddi4+0x264>
   87812:	ebb8 0e02 	subs.w	lr, r8, r2
   87816:	eb69 050c 	sbc.w	r5, r9, ip
   8781a:	3801      	subs	r0, #1
   8781c:	e7e0      	b.n	877e0 <__udivmoddi4+0x264>
   8781e:	4628      	mov	r0, r5
   87820:	e7d3      	b.n	877ca <__udivmoddi4+0x24e>
   87822:	4611      	mov	r1, r2
   87824:	e78c      	b.n	87740 <__udivmoddi4+0x1c4>
   87826:	4681      	mov	r9, r0
   87828:	e7b9      	b.n	8779e <__udivmoddi4+0x222>
   8782a:	4608      	mov	r0, r1
   8782c:	e773      	b.n	87716 <__udivmoddi4+0x19a>
   8782e:	4608      	mov	r0, r1
   87830:	e749      	b.n	876c6 <__udivmoddi4+0x14a>
   87832:	f1ac 0c02 	sub.w	ip, ip, #2
   87836:	443d      	add	r5, r7
   87838:	e713      	b.n	87662 <__udivmoddi4+0xe6>
   8783a:	3802      	subs	r0, #2
   8783c:	443c      	add	r4, r7
   8783e:	e724      	b.n	8768a <__udivmoddi4+0x10e>

00087840 <__aeabi_idiv0>:
   87840:	4770      	bx	lr
   87842:	bf00      	nop

00087844 <__libc_init_array>:
   87844:	b570      	push	{r4, r5, r6, lr}
   87846:	4e0d      	ldr	r6, [pc, #52]	; (8787c <__libc_init_array+0x38>)
   87848:	4d0d      	ldr	r5, [pc, #52]	; (87880 <__libc_init_array+0x3c>)
   8784a:	1b76      	subs	r6, r6, r5
   8784c:	10b6      	asrs	r6, r6, #2
   8784e:	d006      	beq.n	8785e <__libc_init_array+0x1a>
   87850:	2400      	movs	r4, #0
   87852:	f855 3b04 	ldr.w	r3, [r5], #4
   87856:	3401      	adds	r4, #1
   87858:	4798      	blx	r3
   8785a:	42a6      	cmp	r6, r4
   8785c:	d1f9      	bne.n	87852 <__libc_init_array+0xe>
   8785e:	4e09      	ldr	r6, [pc, #36]	; (87884 <__libc_init_array+0x40>)
   87860:	4d09      	ldr	r5, [pc, #36]	; (87888 <__libc_init_array+0x44>)
   87862:	f007 f8e9 	bl	8ea38 <_init>
   87866:	1b76      	subs	r6, r6, r5
   87868:	10b6      	asrs	r6, r6, #2
   8786a:	d006      	beq.n	8787a <__libc_init_array+0x36>
   8786c:	2400      	movs	r4, #0
   8786e:	f855 3b04 	ldr.w	r3, [r5], #4
   87872:	3401      	adds	r4, #1
   87874:	4798      	blx	r3
   87876:	42a6      	cmp	r6, r4
   87878:	d1f9      	bne.n	8786e <__libc_init_array+0x2a>
   8787a:	bd70      	pop	{r4, r5, r6, pc}
   8787c:	0008ea44 	.word	0x0008ea44
   87880:	0008ea44 	.word	0x0008ea44
   87884:	0008ea4c 	.word	0x0008ea4c
   87888:	0008ea44 	.word	0x0008ea44

0008788c <iprintf>:
   8788c:	b40f      	push	{r0, r1, r2, r3}
   8788e:	b500      	push	{lr}
   87890:	4907      	ldr	r1, [pc, #28]	; (878b0 <iprintf+0x24>)
   87892:	b083      	sub	sp, #12
   87894:	ab04      	add	r3, sp, #16
   87896:	6808      	ldr	r0, [r1, #0]
   87898:	f853 2b04 	ldr.w	r2, [r3], #4
   8789c:	6881      	ldr	r1, [r0, #8]
   8789e:	9301      	str	r3, [sp, #4]
   878a0:	f001 ffac 	bl	897fc <_vfiprintf_r>
   878a4:	b003      	add	sp, #12
   878a6:	f85d eb04 	ldr.w	lr, [sp], #4
   878aa:	b004      	add	sp, #16
   878ac:	4770      	bx	lr
   878ae:	bf00      	nop
   878b0:	20000718 	.word	0x20000718

000878b4 <memcpy>:
   878b4:	4684      	mov	ip, r0
   878b6:	ea41 0300 	orr.w	r3, r1, r0
   878ba:	f013 0303 	ands.w	r3, r3, #3
   878be:	d149      	bne.n	87954 <memcpy+0xa0>
   878c0:	3a40      	subs	r2, #64	; 0x40
   878c2:	d323      	bcc.n	8790c <memcpy+0x58>
   878c4:	680b      	ldr	r3, [r1, #0]
   878c6:	6003      	str	r3, [r0, #0]
   878c8:	684b      	ldr	r3, [r1, #4]
   878ca:	6043      	str	r3, [r0, #4]
   878cc:	688b      	ldr	r3, [r1, #8]
   878ce:	6083      	str	r3, [r0, #8]
   878d0:	68cb      	ldr	r3, [r1, #12]
   878d2:	60c3      	str	r3, [r0, #12]
   878d4:	690b      	ldr	r3, [r1, #16]
   878d6:	6103      	str	r3, [r0, #16]
   878d8:	694b      	ldr	r3, [r1, #20]
   878da:	6143      	str	r3, [r0, #20]
   878dc:	698b      	ldr	r3, [r1, #24]
   878de:	6183      	str	r3, [r0, #24]
   878e0:	69cb      	ldr	r3, [r1, #28]
   878e2:	61c3      	str	r3, [r0, #28]
   878e4:	6a0b      	ldr	r3, [r1, #32]
   878e6:	6203      	str	r3, [r0, #32]
   878e8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   878ea:	6243      	str	r3, [r0, #36]	; 0x24
   878ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   878ee:	6283      	str	r3, [r0, #40]	; 0x28
   878f0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   878f2:	62c3      	str	r3, [r0, #44]	; 0x2c
   878f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   878f6:	6303      	str	r3, [r0, #48]	; 0x30
   878f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   878fa:	6343      	str	r3, [r0, #52]	; 0x34
   878fc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   878fe:	6383      	str	r3, [r0, #56]	; 0x38
   87900:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   87902:	63c3      	str	r3, [r0, #60]	; 0x3c
   87904:	3040      	adds	r0, #64	; 0x40
   87906:	3140      	adds	r1, #64	; 0x40
   87908:	3a40      	subs	r2, #64	; 0x40
   8790a:	d2db      	bcs.n	878c4 <memcpy+0x10>
   8790c:	3230      	adds	r2, #48	; 0x30
   8790e:	d30b      	bcc.n	87928 <memcpy+0x74>
   87910:	680b      	ldr	r3, [r1, #0]
   87912:	6003      	str	r3, [r0, #0]
   87914:	684b      	ldr	r3, [r1, #4]
   87916:	6043      	str	r3, [r0, #4]
   87918:	688b      	ldr	r3, [r1, #8]
   8791a:	6083      	str	r3, [r0, #8]
   8791c:	68cb      	ldr	r3, [r1, #12]
   8791e:	60c3      	str	r3, [r0, #12]
   87920:	3010      	adds	r0, #16
   87922:	3110      	adds	r1, #16
   87924:	3a10      	subs	r2, #16
   87926:	d2f3      	bcs.n	87910 <memcpy+0x5c>
   87928:	320c      	adds	r2, #12
   8792a:	d305      	bcc.n	87938 <memcpy+0x84>
   8792c:	f851 3b04 	ldr.w	r3, [r1], #4
   87930:	f840 3b04 	str.w	r3, [r0], #4
   87934:	3a04      	subs	r2, #4
   87936:	d2f9      	bcs.n	8792c <memcpy+0x78>
   87938:	3204      	adds	r2, #4
   8793a:	d008      	beq.n	8794e <memcpy+0x9a>
   8793c:	07d2      	lsls	r2, r2, #31
   8793e:	bf1c      	itt	ne
   87940:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87944:	f800 3b01 	strbne.w	r3, [r0], #1
   87948:	d301      	bcc.n	8794e <memcpy+0x9a>
   8794a:	880b      	ldrh	r3, [r1, #0]
   8794c:	8003      	strh	r3, [r0, #0]
   8794e:	4660      	mov	r0, ip
   87950:	4770      	bx	lr
   87952:	bf00      	nop
   87954:	2a08      	cmp	r2, #8
   87956:	d313      	bcc.n	87980 <memcpy+0xcc>
   87958:	078b      	lsls	r3, r1, #30
   8795a:	d0b1      	beq.n	878c0 <memcpy+0xc>
   8795c:	f010 0303 	ands.w	r3, r0, #3
   87960:	d0ae      	beq.n	878c0 <memcpy+0xc>
   87962:	f1c3 0304 	rsb	r3, r3, #4
   87966:	1ad2      	subs	r2, r2, r3
   87968:	07db      	lsls	r3, r3, #31
   8796a:	bf1c      	itt	ne
   8796c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87970:	f800 3b01 	strbne.w	r3, [r0], #1
   87974:	d3a4      	bcc.n	878c0 <memcpy+0xc>
   87976:	f831 3b02 	ldrh.w	r3, [r1], #2
   8797a:	f820 3b02 	strh.w	r3, [r0], #2
   8797e:	e79f      	b.n	878c0 <memcpy+0xc>
   87980:	3a04      	subs	r2, #4
   87982:	d3d9      	bcc.n	87938 <memcpy+0x84>
   87984:	3a01      	subs	r2, #1
   87986:	f811 3b01 	ldrb.w	r3, [r1], #1
   8798a:	f800 3b01 	strb.w	r3, [r0], #1
   8798e:	d2f9      	bcs.n	87984 <memcpy+0xd0>
   87990:	780b      	ldrb	r3, [r1, #0]
   87992:	7003      	strb	r3, [r0, #0]
   87994:	784b      	ldrb	r3, [r1, #1]
   87996:	7043      	strb	r3, [r0, #1]
   87998:	788b      	ldrb	r3, [r1, #2]
   8799a:	7083      	strb	r3, [r0, #2]
   8799c:	4660      	mov	r0, ip
   8799e:	4770      	bx	lr

000879a0 <memset>:
   879a0:	b4f0      	push	{r4, r5, r6, r7}
   879a2:	0786      	lsls	r6, r0, #30
   879a4:	d046      	beq.n	87a34 <memset+0x94>
   879a6:	1e54      	subs	r4, r2, #1
   879a8:	2a00      	cmp	r2, #0
   879aa:	d03c      	beq.n	87a26 <memset+0x86>
   879ac:	4603      	mov	r3, r0
   879ae:	b2ca      	uxtb	r2, r1
   879b0:	e001      	b.n	879b6 <memset+0x16>
   879b2:	3c01      	subs	r4, #1
   879b4:	d337      	bcc.n	87a26 <memset+0x86>
   879b6:	f803 2b01 	strb.w	r2, [r3], #1
   879ba:	079d      	lsls	r5, r3, #30
   879bc:	d1f9      	bne.n	879b2 <memset+0x12>
   879be:	2c03      	cmp	r4, #3
   879c0:	d92a      	bls.n	87a18 <memset+0x78>
   879c2:	b2cd      	uxtb	r5, r1
   879c4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   879c8:	2c0f      	cmp	r4, #15
   879ca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   879ce:	d934      	bls.n	87a3a <memset+0x9a>
   879d0:	f1a4 0210 	sub.w	r2, r4, #16
   879d4:	f022 0c0f 	bic.w	ip, r2, #15
   879d8:	f103 0720 	add.w	r7, r3, #32
   879dc:	0916      	lsrs	r6, r2, #4
   879de:	4467      	add	r7, ip
   879e0:	f103 0210 	add.w	r2, r3, #16
   879e4:	e942 5504 	strd	r5, r5, [r2, #-16]
   879e8:	e942 5502 	strd	r5, r5, [r2, #-8]
   879ec:	3210      	adds	r2, #16
   879ee:	42ba      	cmp	r2, r7
   879f0:	d1f8      	bne.n	879e4 <memset+0x44>
   879f2:	1c72      	adds	r2, r6, #1
   879f4:	f014 0f0c 	tst.w	r4, #12
   879f8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   879fc:	f004 060f 	and.w	r6, r4, #15
   87a00:	d013      	beq.n	87a2a <memset+0x8a>
   87a02:	1f33      	subs	r3, r6, #4
   87a04:	f023 0303 	bic.w	r3, r3, #3
   87a08:	3304      	adds	r3, #4
   87a0a:	4413      	add	r3, r2
   87a0c:	f842 5b04 	str.w	r5, [r2], #4
   87a10:	4293      	cmp	r3, r2
   87a12:	d1fb      	bne.n	87a0c <memset+0x6c>
   87a14:	f006 0403 	and.w	r4, r6, #3
   87a18:	b12c      	cbz	r4, 87a26 <memset+0x86>
   87a1a:	b2ca      	uxtb	r2, r1
   87a1c:	441c      	add	r4, r3
   87a1e:	f803 2b01 	strb.w	r2, [r3], #1
   87a22:	429c      	cmp	r4, r3
   87a24:	d1fb      	bne.n	87a1e <memset+0x7e>
   87a26:	bcf0      	pop	{r4, r5, r6, r7}
   87a28:	4770      	bx	lr
   87a2a:	4634      	mov	r4, r6
   87a2c:	4613      	mov	r3, r2
   87a2e:	2c00      	cmp	r4, #0
   87a30:	d1f3      	bne.n	87a1a <memset+0x7a>
   87a32:	e7f8      	b.n	87a26 <memset+0x86>
   87a34:	4614      	mov	r4, r2
   87a36:	4603      	mov	r3, r0
   87a38:	e7c1      	b.n	879be <memset+0x1e>
   87a3a:	461a      	mov	r2, r3
   87a3c:	4626      	mov	r6, r4
   87a3e:	e7e0      	b.n	87a02 <memset+0x62>

00087a40 <setbuf>:
   87a40:	2900      	cmp	r1, #0
   87a42:	bf0c      	ite	eq
   87a44:	2202      	moveq	r2, #2
   87a46:	2200      	movne	r2, #0
   87a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
   87a4c:	f000 b800 	b.w	87a50 <setvbuf>

00087a50 <setvbuf>:
   87a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   87a54:	4d65      	ldr	r5, [pc, #404]	; (87bec <setvbuf+0x19c>)
   87a56:	4604      	mov	r4, r0
   87a58:	f8d5 9000 	ldr.w	r9, [r5]
   87a5c:	460f      	mov	r7, r1
   87a5e:	4690      	mov	r8, r2
   87a60:	461e      	mov	r6, r3
   87a62:	b083      	sub	sp, #12
   87a64:	f1b9 0f00 	cmp.w	r9, #0
   87a68:	d003      	beq.n	87a72 <setvbuf+0x22>
   87a6a:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87a6e:	2b00      	cmp	r3, #0
   87a70:	d079      	beq.n	87b66 <setvbuf+0x116>
   87a72:	f1b8 0f02 	cmp.w	r8, #2
   87a76:	d006      	beq.n	87a86 <setvbuf+0x36>
   87a78:	f1b8 0f01 	cmp.w	r8, #1
   87a7c:	f200 80a3 	bhi.w	87bc6 <setvbuf+0x176>
   87a80:	2e00      	cmp	r6, #0
   87a82:	f2c0 80a0 	blt.w	87bc6 <setvbuf+0x176>
   87a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87a88:	07d9      	lsls	r1, r3, #31
   87a8a:	d552      	bpl.n	87b32 <setvbuf+0xe2>
   87a8c:	4621      	mov	r1, r4
   87a8e:	4648      	mov	r0, r9
   87a90:	f003 fe92 	bl	8b7b8 <_fflush_r>
   87a94:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87a96:	b141      	cbz	r1, 87aaa <setvbuf+0x5a>
   87a98:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87a9c:	4299      	cmp	r1, r3
   87a9e:	d002      	beq.n	87aa6 <setvbuf+0x56>
   87aa0:	4648      	mov	r0, r9
   87aa2:	f004 f809 	bl	8bab8 <_free_r>
   87aa6:	2300      	movs	r3, #0
   87aa8:	6323      	str	r3, [r4, #48]	; 0x30
   87aaa:	2300      	movs	r3, #0
   87aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87ab0:	61a3      	str	r3, [r4, #24]
   87ab2:	6063      	str	r3, [r4, #4]
   87ab4:	062b      	lsls	r3, r5, #24
   87ab6:	d465      	bmi.n	87b84 <setvbuf+0x134>
   87ab8:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   87abc:	f025 0503 	bic.w	r5, r5, #3
   87ac0:	f1b8 0f02 	cmp.w	r8, #2
   87ac4:	81a5      	strh	r5, [r4, #12]
   87ac6:	d064      	beq.n	87b92 <setvbuf+0x142>
   87ac8:	ab01      	add	r3, sp, #4
   87aca:	466a      	mov	r2, sp
   87acc:	4621      	mov	r1, r4
   87ace:	4648      	mov	r0, r9
   87ad0:	f004 faa4 	bl	8c01c <__swhatbuf_r>
   87ad4:	89a3      	ldrh	r3, [r4, #12]
   87ad6:	4318      	orrs	r0, r3
   87ad8:	81a0      	strh	r0, [r4, #12]
   87ada:	2e00      	cmp	r6, #0
   87adc:	d030      	beq.n	87b40 <setvbuf+0xf0>
   87ade:	2f00      	cmp	r7, #0
   87ae0:	d02f      	beq.n	87b42 <setvbuf+0xf2>
   87ae2:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87ae6:	2b00      	cmp	r3, #0
   87ae8:	d039      	beq.n	87b5e <setvbuf+0x10e>
   87aea:	9b00      	ldr	r3, [sp, #0]
   87aec:	e9c4 7604 	strd	r7, r6, [r4, #16]
   87af0:	42b3      	cmp	r3, r6
   87af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87af6:	6027      	str	r7, [r4, #0]
   87af8:	bf1c      	itt	ne
   87afa:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   87afe:	81a3      	strhne	r3, [r4, #12]
   87b00:	f1b8 0f01 	cmp.w	r8, #1
   87b04:	bf04      	itt	eq
   87b06:	f043 0301 	orreq.w	r3, r3, #1
   87b0a:	81a3      	strheq	r3, [r4, #12]
   87b0c:	b29a      	uxth	r2, r3
   87b0e:	f013 0308 	ands.w	r3, r3, #8
   87b12:	d02c      	beq.n	87b6e <setvbuf+0x11e>
   87b14:	07d1      	lsls	r1, r2, #31
   87b16:	d554      	bpl.n	87bc2 <setvbuf+0x172>
   87b18:	2100      	movs	r1, #0
   87b1a:	4276      	negs	r6, r6
   87b1c:	61a6      	str	r6, [r4, #24]
   87b1e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   87b20:	60a1      	str	r1, [r4, #8]
   87b22:	f016 0601 	ands.w	r6, r6, #1
   87b26:	d027      	beq.n	87b78 <setvbuf+0x128>
   87b28:	2600      	movs	r6, #0
   87b2a:	4630      	mov	r0, r6
   87b2c:	b003      	add	sp, #12
   87b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87b32:	89a3      	ldrh	r3, [r4, #12]
   87b34:	059a      	lsls	r2, r3, #22
   87b36:	d4a9      	bmi.n	87a8c <setvbuf+0x3c>
   87b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87b3a:	f004 fa6b 	bl	8c014 <__retarget_lock_acquire_recursive>
   87b3e:	e7a5      	b.n	87a8c <setvbuf+0x3c>
   87b40:	9e00      	ldr	r6, [sp, #0]
   87b42:	4630      	mov	r0, r6
   87b44:	f004 fae2 	bl	8c10c <malloc>
   87b48:	4607      	mov	r7, r0
   87b4a:	2800      	cmp	r0, #0
   87b4c:	d03e      	beq.n	87bcc <setvbuf+0x17c>
   87b4e:	89a3      	ldrh	r3, [r4, #12]
   87b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87b54:	81a3      	strh	r3, [r4, #12]
   87b56:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87b5a:	2b00      	cmp	r3, #0
   87b5c:	d1c5      	bne.n	87aea <setvbuf+0x9a>
   87b5e:	4648      	mov	r0, r9
   87b60:	f003 fe86 	bl	8b870 <__sinit>
   87b64:	e7c1      	b.n	87aea <setvbuf+0x9a>
   87b66:	4648      	mov	r0, r9
   87b68:	f003 fe82 	bl	8b870 <__sinit>
   87b6c:	e781      	b.n	87a72 <setvbuf+0x22>
   87b6e:	60a3      	str	r3, [r4, #8]
   87b70:	6e66      	ldr	r6, [r4, #100]	; 0x64
   87b72:	f016 0601 	ands.w	r6, r6, #1
   87b76:	d1d7      	bne.n	87b28 <setvbuf+0xd8>
   87b78:	0593      	lsls	r3, r2, #22
   87b7a:	d51b      	bpl.n	87bb4 <setvbuf+0x164>
   87b7c:	4630      	mov	r0, r6
   87b7e:	b003      	add	sp, #12
   87b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87b84:	4648      	mov	r0, r9
   87b86:	6921      	ldr	r1, [r4, #16]
   87b88:	f003 ff96 	bl	8bab8 <_free_r>
   87b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87b90:	e792      	b.n	87ab8 <setvbuf+0x68>
   87b92:	2600      	movs	r6, #0
   87b94:	2300      	movs	r3, #0
   87b96:	2101      	movs	r1, #1
   87b98:	6e62      	ldr	r2, [r4, #100]	; 0x64
   87b9a:	f045 0502 	orr.w	r5, r5, #2
   87b9e:	60a3      	str	r3, [r4, #8]
   87ba0:	07d7      	lsls	r7, r2, #31
   87ba2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   87ba6:	81a5      	strh	r5, [r4, #12]
   87ba8:	6161      	str	r1, [r4, #20]
   87baa:	6023      	str	r3, [r4, #0]
   87bac:	6123      	str	r3, [r4, #16]
   87bae:	d4e5      	bmi.n	87b7c <setvbuf+0x12c>
   87bb0:	05a8      	lsls	r0, r5, #22
   87bb2:	d4e3      	bmi.n	87b7c <setvbuf+0x12c>
   87bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87bb6:	f004 fa2f 	bl	8c018 <__retarget_lock_release_recursive>
   87bba:	4630      	mov	r0, r6
   87bbc:	b003      	add	sp, #12
   87bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87bc2:	60a6      	str	r6, [r4, #8]
   87bc4:	e7d4      	b.n	87b70 <setvbuf+0x120>
   87bc6:	f04f 36ff 	mov.w	r6, #4294967295
   87bca:	e7d7      	b.n	87b7c <setvbuf+0x12c>
   87bcc:	9d00      	ldr	r5, [sp, #0]
   87bce:	42b5      	cmp	r5, r6
   87bd0:	d004      	beq.n	87bdc <setvbuf+0x18c>
   87bd2:	4628      	mov	r0, r5
   87bd4:	f004 fa9a 	bl	8c10c <malloc>
   87bd8:	4607      	mov	r7, r0
   87bda:	b920      	cbnz	r0, 87be6 <setvbuf+0x196>
   87bdc:	f04f 36ff 	mov.w	r6, #4294967295
   87be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87be4:	e7d6      	b.n	87b94 <setvbuf+0x144>
   87be6:	462e      	mov	r6, r5
   87be8:	e7b1      	b.n	87b4e <setvbuf+0xfe>
   87bea:	bf00      	nop
   87bec:	20000718 	.word	0x20000718

00087bf0 <sprintf>:
   87bf0:	b40e      	push	{r1, r2, r3}
   87bf2:	4601      	mov	r1, r0
   87bf4:	b530      	push	{r4, r5, lr}
   87bf6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   87bfa:	b09c      	sub	sp, #112	; 0x70
   87bfc:	ab1f      	add	r3, sp, #124	; 0x7c
   87bfe:	480b      	ldr	r0, [pc, #44]	; (87c2c <sprintf+0x3c>)
   87c00:	f853 2b04 	ldr.w	r2, [r3], #4
   87c04:	4d0a      	ldr	r5, [pc, #40]	; (87c30 <sprintf+0x40>)
   87c06:	9102      	str	r1, [sp, #8]
   87c08:	9106      	str	r1, [sp, #24]
   87c0a:	6800      	ldr	r0, [r0, #0]
   87c0c:	a902      	add	r1, sp, #8
   87c0e:	9301      	str	r3, [sp, #4]
   87c10:	e9cd 4504 	strd	r4, r5, [sp, #16]
   87c14:	9407      	str	r4, [sp, #28]
   87c16:	f000 f80d 	bl	87c34 <_svfprintf_r>
   87c1a:	2200      	movs	r2, #0
   87c1c:	9b02      	ldr	r3, [sp, #8]
   87c1e:	701a      	strb	r2, [r3, #0]
   87c20:	b01c      	add	sp, #112	; 0x70
   87c22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   87c26:	b003      	add	sp, #12
   87c28:	4770      	bx	lr
   87c2a:	bf00      	nop
   87c2c:	20000718 	.word	0x20000718
   87c30:	ffff0208 	.word	0xffff0208

00087c34 <_svfprintf_r>:
   87c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87c38:	b0d7      	sub	sp, #348	; 0x15c
   87c3a:	468b      	mov	fp, r1
   87c3c:	4617      	mov	r7, r2
   87c3e:	930e      	str	r3, [sp, #56]	; 0x38
   87c40:	4681      	mov	r9, r0
   87c42:	f004 f9df 	bl	8c004 <_localeconv_r>
   87c46:	6803      	ldr	r3, [r0, #0]
   87c48:	4618      	mov	r0, r3
   87c4a:	9318      	str	r3, [sp, #96]	; 0x60
   87c4c:	f005 fbdc 	bl	8d408 <strlen>
   87c50:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87c54:	9017      	str	r0, [sp, #92]	; 0x5c
   87c56:	061d      	lsls	r5, r3, #24
   87c58:	d504      	bpl.n	87c64 <_svfprintf_r+0x30>
   87c5a:	f8db 3010 	ldr.w	r3, [fp, #16]
   87c5e:	2b00      	cmp	r3, #0
   87c60:	f000 87df 	beq.w	88c22 <_svfprintf_r+0xfee>
   87c64:	2300      	movs	r3, #0
   87c66:	2100      	movs	r1, #0
   87c68:	2200      	movs	r2, #0
   87c6a:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   87c6e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   87c72:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   87c76:	9313      	str	r3, [sp, #76]	; 0x4c
   87c78:	9319      	str	r3, [sp, #100]	; 0x64
   87c7a:	930a      	str	r3, [sp, #40]	; 0x28
   87c7c:	ab2d      	add	r3, sp, #180	; 0xb4
   87c7e:	4698      	mov	r8, r3
   87c80:	932a      	str	r3, [sp, #168]	; 0xa8
   87c82:	783b      	ldrb	r3, [r7, #0]
   87c84:	46da      	mov	sl, fp
   87c86:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   87c8a:	2b00      	cmp	r3, #0
   87c8c:	f000 81a4 	beq.w	87fd8 <_svfprintf_r+0x3a4>
   87c90:	463c      	mov	r4, r7
   87c92:	e004      	b.n	87c9e <_svfprintf_r+0x6a>
   87c94:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87c98:	2b00      	cmp	r3, #0
   87c9a:	f000 80fd 	beq.w	87e98 <_svfprintf_r+0x264>
   87c9e:	2b25      	cmp	r3, #37	; 0x25
   87ca0:	d1f8      	bne.n	87c94 <_svfprintf_r+0x60>
   87ca2:	1be5      	subs	r5, r4, r7
   87ca4:	f040 80fb 	bne.w	87e9e <_svfprintf_r+0x26a>
   87ca8:	7823      	ldrb	r3, [r4, #0]
   87caa:	2b00      	cmp	r3, #0
   87cac:	f000 8194 	beq.w	87fd8 <_svfprintf_r+0x3a4>
   87cb0:	2300      	movs	r3, #0
   87cb2:	930b      	str	r3, [sp, #44]	; 0x2c
   87cb4:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87cb8:	9307      	str	r3, [sp, #28]
   87cba:	f04f 33ff 	mov.w	r3, #4294967295
   87cbe:	7866      	ldrb	r6, [r4, #1]
   87cc0:	f104 0b01 	add.w	fp, r4, #1
   87cc4:	2120      	movs	r1, #32
   87cc6:	242b      	movs	r4, #43	; 0x2b
   87cc8:	9309      	str	r3, [sp, #36]	; 0x24
   87cca:	f10b 0b01 	add.w	fp, fp, #1
   87cce:	f1a6 0320 	sub.w	r3, r6, #32
   87cd2:	2b5a      	cmp	r3, #90	; 0x5a
   87cd4:	f200 80ff 	bhi.w	87ed6 <_svfprintf_r+0x2a2>
   87cd8:	e8df f013 	tbh	[pc, r3, lsl #1]
   87cdc:	00fd02bc 	.word	0x00fd02bc
   87ce0:	02b500fd 	.word	0x02b500fd
   87ce4:	00fd00fd 	.word	0x00fd00fd
   87ce8:	029100fd 	.word	0x029100fd
   87cec:	00fd00fd 	.word	0x00fd00fd
   87cf0:	02e7006a 	.word	0x02e7006a
   87cf4:	023400fd 	.word	0x023400fd
   87cf8:	00fd02cd 	.word	0x00fd02cd
   87cfc:	005b02c6 	.word	0x005b02c6
   87d00:	005b005b 	.word	0x005b005b
   87d04:	005b005b 	.word	0x005b005b
   87d08:	005b005b 	.word	0x005b005b
   87d0c:	005b005b 	.word	0x005b005b
   87d10:	00fd00fd 	.word	0x00fd00fd
   87d14:	00fd00fd 	.word	0x00fd00fd
   87d18:	00fd00fd 	.word	0x00fd00fd
   87d1c:	019000fd 	.word	0x019000fd
   87d20:	01f700fd 	.word	0x01f700fd
   87d24:	0190007c 	.word	0x0190007c
   87d28:	01900190 	.word	0x01900190
   87d2c:	00fd00fd 	.word	0x00fd00fd
   87d30:	00fd00fd 	.word	0x00fd00fd
   87d34:	00fd028a 	.word	0x00fd028a
   87d38:	00a900fd 	.word	0x00a900fd
   87d3c:	00fd00fd 	.word	0x00fd00fd
   87d40:	020b00fd 	.word	0x020b00fd
   87d44:	023b00fd 	.word	0x023b00fd
   87d48:	00fd00fd 	.word	0x00fd00fd
   87d4c:	00fd0781 	.word	0x00fd0781
   87d50:	00fd00fd 	.word	0x00fd00fd
   87d54:	00fd00fd 	.word	0x00fd00fd
   87d58:	00fd00fd 	.word	0x00fd00fd
   87d5c:	019000fd 	.word	0x019000fd
   87d60:	01f700fd 	.word	0x01f700fd
   87d64:	01900080 	.word	0x01900080
   87d68:	01900190 	.word	0x01900190
   87d6c:	00800280 	.word	0x00800280
   87d70:	00fd0075 	.word	0x00fd0075
   87d74:	00fd0276 	.word	0x00fd0276
   87d78:	00ad025e 	.word	0x00ad025e
   87d7c:	0075024c 	.word	0x0075024c
   87d80:	020b00fd 	.word	0x020b00fd
   87d84:	075b0072 	.word	0x075b0072
   87d88:	00fd00fd 	.word	0x00fd00fd
   87d8c:	00fd075f 	.word	0x00fd075f
   87d90:	0072      	.short	0x0072
   87d92:	2200      	movs	r2, #0
   87d94:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87d98:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87d9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87da0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87da4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87da8:	2b09      	cmp	r3, #9
   87daa:	d9f5      	bls.n	87d98 <_svfprintf_r+0x164>
   87dac:	920b      	str	r2, [sp, #44]	; 0x2c
   87dae:	e78e      	b.n	87cce <_svfprintf_r+0x9a>
   87db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87db2:	f853 2b04 	ldr.w	r2, [r3], #4
   87db6:	2a00      	cmp	r2, #0
   87db8:	920b      	str	r2, [sp, #44]	; 0x2c
   87dba:	930e      	str	r3, [sp, #56]	; 0x38
   87dbc:	f2c0 81bf 	blt.w	8813e <_svfprintf_r+0x50a>
   87dc0:	f89b 6000 	ldrb.w	r6, [fp]
   87dc4:	e781      	b.n	87cca <_svfprintf_r+0x96>
   87dc6:	9b07      	ldr	r3, [sp, #28]
   87dc8:	f89b 6000 	ldrb.w	r6, [fp]
   87dcc:	f043 0320 	orr.w	r3, r3, #32
   87dd0:	9307      	str	r3, [sp, #28]
   87dd2:	e77a      	b.n	87cca <_svfprintf_r+0x96>
   87dd4:	9b07      	ldr	r3, [sp, #28]
   87dd6:	f043 0310 	orr.w	r3, r3, #16
   87dda:	9307      	str	r3, [sp, #28]
   87ddc:	9b07      	ldr	r3, [sp, #28]
   87dde:	069c      	lsls	r4, r3, #26
   87de0:	f140 8162 	bpl.w	880a8 <_svfprintf_r+0x474>
   87de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87de6:	3307      	adds	r3, #7
   87de8:	f023 0307 	bic.w	r3, r3, #7
   87dec:	4619      	mov	r1, r3
   87dee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   87df2:	4614      	mov	r4, r2
   87df4:	461d      	mov	r5, r3
   87df6:	910e      	str	r1, [sp, #56]	; 0x38
   87df8:	2a00      	cmp	r2, #0
   87dfa:	f173 0300 	sbcs.w	r3, r3, #0
   87dfe:	f2c0 85ab 	blt.w	88958 <_svfprintf_r+0xd24>
   87e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87e04:	3301      	adds	r3, #1
   87e06:	9b07      	ldr	r3, [sp, #28]
   87e08:	f000 8414 	beq.w	88634 <_svfprintf_r+0xa00>
   87e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   87e10:	ea54 0205 	orrs.w	r2, r4, r5
   87e14:	9308      	str	r3, [sp, #32]
   87e16:	f040 840e 	bne.w	88636 <_svfprintf_r+0xa02>
   87e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87e1c:	2a00      	cmp	r2, #0
   87e1e:	f040 840f 	bne.w	88640 <_svfprintf_r+0xa0c>
   87e22:	9307      	str	r3, [sp, #28]
   87e24:	2300      	movs	r3, #0
   87e26:	af56      	add	r7, sp, #344	; 0x158
   87e28:	9309      	str	r3, [sp, #36]	; 0x24
   87e2a:	930c      	str	r3, [sp, #48]	; 0x30
   87e2c:	e26b      	b.n	88306 <_svfprintf_r+0x6d2>
   87e2e:	9b07      	ldr	r3, [sp, #28]
   87e30:	f043 0310 	orr.w	r3, r3, #16
   87e34:	9307      	str	r3, [sp, #28]
   87e36:	9b07      	ldr	r3, [sp, #28]
   87e38:	069a      	lsls	r2, r3, #26
   87e3a:	f140 8126 	bpl.w	8808a <_svfprintf_r+0x456>
   87e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e40:	3307      	adds	r3, #7
   87e42:	f023 0307 	bic.w	r3, r3, #7
   87e46:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87e4a:	930e      	str	r3, [sp, #56]	; 0x38
   87e4c:	9b07      	ldr	r3, [sp, #28]
   87e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   87e52:	9308      	str	r3, [sp, #32]
   87e54:	2300      	movs	r3, #0
   87e56:	2200      	movs	r2, #0
   87e58:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87e5e:	4611      	mov	r1, r2
   87e60:	3101      	adds	r1, #1
   87e62:	f000 8231 	beq.w	882c8 <_svfprintf_r+0x694>
   87e66:	9908      	ldr	r1, [sp, #32]
   87e68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   87e6c:	9107      	str	r1, [sp, #28]
   87e6e:	ea54 0105 	orrs.w	r1, r4, r5
   87e72:	f040 8227 	bne.w	882c4 <_svfprintf_r+0x690>
   87e76:	2a00      	cmp	r2, #0
   87e78:	f040 837d 	bne.w	88576 <_svfprintf_r+0x942>
   87e7c:	2b00      	cmp	r3, #0
   87e7e:	d1d1      	bne.n	87e24 <_svfprintf_r+0x1f0>
   87e80:	9b08      	ldr	r3, [sp, #32]
   87e82:	f013 0301 	ands.w	r3, r3, #1
   87e86:	930c      	str	r3, [sp, #48]	; 0x30
   87e88:	f000 8590 	beq.w	889ac <_svfprintf_r+0xd78>
   87e8c:	2330      	movs	r3, #48	; 0x30
   87e8e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   87e92:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   87e96:	e236      	b.n	88306 <_svfprintf_r+0x6d2>
   87e98:	1be5      	subs	r5, r4, r7
   87e9a:	f000 809d 	beq.w	87fd8 <_svfprintf_r+0x3a4>
   87e9e:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   87ea2:	3301      	adds	r3, #1
   87ea4:	442a      	add	r2, r5
   87ea6:	2b07      	cmp	r3, #7
   87ea8:	e9c8 7500 	strd	r7, r5, [r8]
   87eac:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   87eb0:	dc06      	bgt.n	87ec0 <_svfprintf_r+0x28c>
   87eb2:	f108 0808 	add.w	r8, r8, #8
   87eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87eb8:	7823      	ldrb	r3, [r4, #0]
   87eba:	442a      	add	r2, r5
   87ebc:	920a      	str	r2, [sp, #40]	; 0x28
   87ebe:	e6f4      	b.n	87caa <_svfprintf_r+0x76>
   87ec0:	4651      	mov	r1, sl
   87ec2:	4648      	mov	r0, r9
   87ec4:	aa2a      	add	r2, sp, #168	; 0xa8
   87ec6:	f005 fb01 	bl	8d4cc <__ssprint_r>
   87eca:	2800      	cmp	r0, #0
   87ecc:	f041 83ce 	bne.w	8966c <_svfprintf_r+0x1a38>
   87ed0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87ed4:	e7ef      	b.n	87eb6 <_svfprintf_r+0x282>
   87ed6:	2e00      	cmp	r6, #0
   87ed8:	d07e      	beq.n	87fd8 <_svfprintf_r+0x3a4>
   87eda:	2300      	movs	r3, #0
   87edc:	2101      	movs	r1, #1
   87ede:	461a      	mov	r2, r3
   87ee0:	9108      	str	r1, [sp, #32]
   87ee2:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   87ee6:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87eea:	930d      	str	r3, [sp, #52]	; 0x34
   87eec:	9309      	str	r3, [sp, #36]	; 0x24
   87eee:	9312      	str	r3, [sp, #72]	; 0x48
   87ef0:	9316      	str	r3, [sp, #88]	; 0x58
   87ef2:	9310      	str	r3, [sp, #64]	; 0x40
   87ef4:	910c      	str	r1, [sp, #48]	; 0x30
   87ef6:	af3d      	add	r7, sp, #244	; 0xf4
   87ef8:	9b07      	ldr	r3, [sp, #28]
   87efa:	f013 0302 	ands.w	r3, r3, #2
   87efe:	d002      	beq.n	87f06 <_svfprintf_r+0x2d2>
   87f00:	9908      	ldr	r1, [sp, #32]
   87f02:	3102      	adds	r1, #2
   87f04:	9108      	str	r1, [sp, #32]
   87f06:	9907      	ldr	r1, [sp, #28]
   87f08:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   87f0c:	910f      	str	r1, [sp, #60]	; 0x3c
   87f0e:	d105      	bne.n	87f1c <_svfprintf_r+0x2e8>
   87f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f12:	9808      	ldr	r0, [sp, #32]
   87f14:	1a0d      	subs	r5, r1, r0
   87f16:	2d00      	cmp	r5, #0
   87f18:	f300 834b 	bgt.w	885b2 <_svfprintf_r+0x97e>
   87f1c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f1e:	b172      	cbz	r2, 87f3e <_svfprintf_r+0x30a>
   87f20:	2001      	movs	r0, #1
   87f22:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87f24:	4404      	add	r4, r0
   87f26:	4402      	add	r2, r0
   87f28:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   87f2c:	2a07      	cmp	r2, #7
   87f2e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87f32:	e9c8 1000 	strd	r1, r0, [r8]
   87f36:	f300 83cd 	bgt.w	886d4 <_svfprintf_r+0xaa0>
   87f3a:	f108 0808 	add.w	r8, r8, #8
   87f3e:	b16b      	cbz	r3, 87f5c <_svfprintf_r+0x328>
   87f40:	2102      	movs	r1, #2
   87f42:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87f44:	440c      	add	r4, r1
   87f46:	3301      	adds	r3, #1
   87f48:	aa23      	add	r2, sp, #140	; 0x8c
   87f4a:	2b07      	cmp	r3, #7
   87f4c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87f50:	e9c8 2100 	strd	r2, r1, [r8]
   87f54:	f300 83cc 	bgt.w	886f0 <_svfprintf_r+0xabc>
   87f58:	f108 0808 	add.w	r8, r8, #8
   87f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87f5e:	2b80      	cmp	r3, #128	; 0x80
   87f60:	f000 8234 	beq.w	883cc <_svfprintf_r+0x798>
   87f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87f68:	1a9d      	subs	r5, r3, r2
   87f6a:	2d00      	cmp	r5, #0
   87f6c:	f300 826e 	bgt.w	8844c <_svfprintf_r+0x818>
   87f70:	9b07      	ldr	r3, [sp, #28]
   87f72:	05d9      	lsls	r1, r3, #23
   87f74:	f100 81d5 	bmi.w	88322 <_svfprintf_r+0x6ee>
   87f78:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87f7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87f7c:	3301      	adds	r3, #1
   87f7e:	4414      	add	r4, r2
   87f80:	2b07      	cmp	r3, #7
   87f82:	e9c8 7200 	strd	r7, r2, [r8]
   87f86:	942c      	str	r4, [sp, #176]	; 0xb0
   87f88:	932b      	str	r3, [sp, #172]	; 0xac
   87f8a:	f300 8397 	bgt.w	886bc <_svfprintf_r+0xa88>
   87f8e:	f108 0808 	add.w	r8, r8, #8
   87f92:	9b07      	ldr	r3, [sp, #28]
   87f94:	0759      	lsls	r1, r3, #29
   87f96:	d505      	bpl.n	87fa4 <_svfprintf_r+0x370>
   87f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87f9a:	9a08      	ldr	r2, [sp, #32]
   87f9c:	1a9d      	subs	r5, r3, r2
   87f9e:	2d00      	cmp	r5, #0
   87fa0:	f300 83b2 	bgt.w	88708 <_svfprintf_r+0xad4>
   87fa4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   87fa8:	9908      	ldr	r1, [sp, #32]
   87faa:	428a      	cmp	r2, r1
   87fac:	bfac      	ite	ge
   87fae:	189b      	addge	r3, r3, r2
   87fb0:	185b      	addlt	r3, r3, r1
   87fb2:	930a      	str	r3, [sp, #40]	; 0x28
   87fb4:	2c00      	cmp	r4, #0
   87fb6:	f040 827d 	bne.w	884b4 <_svfprintf_r+0x880>
   87fba:	2300      	movs	r3, #0
   87fbc:	932b      	str	r3, [sp, #172]	; 0xac
   87fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87fc0:	b11b      	cbz	r3, 87fca <_svfprintf_r+0x396>
   87fc2:	4648      	mov	r0, r9
   87fc4:	990d      	ldr	r1, [sp, #52]	; 0x34
   87fc6:	f003 fd77 	bl	8bab8 <_free_r>
   87fca:	465f      	mov	r7, fp
   87fcc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87fd0:	783b      	ldrb	r3, [r7, #0]
   87fd2:	2b00      	cmp	r3, #0
   87fd4:	f47f ae5c 	bne.w	87c90 <_svfprintf_r+0x5c>
   87fd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   87fda:	46d3      	mov	fp, sl
   87fdc:	2b00      	cmp	r3, #0
   87fde:	f041 824b 	bne.w	89478 <_svfprintf_r+0x1844>
   87fe2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87fe6:	f013 0f40 	tst.w	r3, #64	; 0x40
   87fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87fec:	bf18      	it	ne
   87fee:	f04f 33ff 	movne.w	r3, #4294967295
   87ff2:	930a      	str	r3, [sp, #40]	; 0x28
   87ff4:	980a      	ldr	r0, [sp, #40]	; 0x28
   87ff6:	b057      	add	sp, #348	; 0x15c
   87ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ffe:	3307      	adds	r3, #7
   88000:	f023 0307 	bic.w	r3, r3, #7
   88004:	4619      	mov	r1, r3
   88006:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8800a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8800e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   88012:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   88016:	461d      	mov	r5, r3
   88018:	4618      	mov	r0, r3
   8801a:	910e      	str	r1, [sp, #56]	; 0x38
   8801c:	f04f 32ff 	mov.w	r2, #4294967295
   88020:	4621      	mov	r1, r4
   88022:	4ba4      	ldr	r3, [pc, #656]	; (882b4 <_svfprintf_r+0x680>)
   88024:	f006 f986 	bl	8e334 <__aeabi_dcmpun>
   88028:	2800      	cmp	r0, #0
   8802a:	f040 84d9 	bne.w	889e0 <_svfprintf_r+0xdac>
   8802e:	4628      	mov	r0, r5
   88030:	4621      	mov	r1, r4
   88032:	f04f 32ff 	mov.w	r2, #4294967295
   88036:	4b9f      	ldr	r3, [pc, #636]	; (882b4 <_svfprintf_r+0x680>)
   88038:	f006 f95e 	bl	8e2f8 <__aeabi_dcmple>
   8803c:	2800      	cmp	r0, #0
   8803e:	f040 84cf 	bne.w	889e0 <_svfprintf_r+0xdac>
   88042:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88046:	2200      	movs	r2, #0
   88048:	2300      	movs	r3, #0
   8804a:	f006 f94b 	bl	8e2e4 <__aeabi_dcmplt>
   8804e:	2800      	cmp	r0, #0
   88050:	f041 800e 	bne.w	89070 <_svfprintf_r+0x143c>
   88054:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88058:	2003      	movs	r0, #3
   8805a:	2100      	movs	r1, #0
   8805c:	4f96      	ldr	r7, [pc, #600]	; (882b8 <_svfprintf_r+0x684>)
   8805e:	4b97      	ldr	r3, [pc, #604]	; (882bc <_svfprintf_r+0x688>)
   88060:	9008      	str	r0, [sp, #32]
   88062:	910d      	str	r1, [sp, #52]	; 0x34
   88064:	2e47      	cmp	r6, #71	; 0x47
   88066:	bfc8      	it	gt
   88068:	461f      	movgt	r7, r3
   8806a:	9c07      	ldr	r4, [sp, #28]
   8806c:	900c      	str	r0, [sp, #48]	; 0x30
   8806e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   88072:	9407      	str	r4, [sp, #28]
   88074:	9109      	str	r1, [sp, #36]	; 0x24
   88076:	9112      	str	r1, [sp, #72]	; 0x48
   88078:	9116      	str	r1, [sp, #88]	; 0x58
   8807a:	9110      	str	r1, [sp, #64]	; 0x40
   8807c:	2a00      	cmp	r2, #0
   8807e:	f43f af3b 	beq.w	87ef8 <_svfprintf_r+0x2c4>
   88082:	9b08      	ldr	r3, [sp, #32]
   88084:	3301      	adds	r3, #1
   88086:	9308      	str	r3, [sp, #32]
   88088:	e736      	b.n	87ef8 <_svfprintf_r+0x2c4>
   8808a:	9b07      	ldr	r3, [sp, #28]
   8808c:	06db      	lsls	r3, r3, #27
   8808e:	f100 849c 	bmi.w	889ca <_svfprintf_r+0xd96>
   88092:	9b07      	ldr	r3, [sp, #28]
   88094:	065f      	lsls	r7, r3, #25
   88096:	f140 87b2 	bpl.w	88ffe <_svfprintf_r+0x13ca>
   8809a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8809c:	2500      	movs	r5, #0
   8809e:	f853 4b04 	ldr.w	r4, [r3], #4
   880a2:	930e      	str	r3, [sp, #56]	; 0x38
   880a4:	b2a4      	uxth	r4, r4
   880a6:	e6d1      	b.n	87e4c <_svfprintf_r+0x218>
   880a8:	9b07      	ldr	r3, [sp, #28]
   880aa:	06d8      	lsls	r0, r3, #27
   880ac:	f100 8568 	bmi.w	88b80 <_svfprintf_r+0xf4c>
   880b0:	9b07      	ldr	r3, [sp, #28]
   880b2:	0659      	lsls	r1, r3, #25
   880b4:	f140 87be 	bpl.w	89034 <_svfprintf_r+0x1400>
   880b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880ba:	f853 4b04 	ldr.w	r4, [r3], #4
   880be:	b224      	sxth	r4, r4
   880c0:	17e5      	asrs	r5, r4, #31
   880c2:	930e      	str	r3, [sp, #56]	; 0x38
   880c4:	4622      	mov	r2, r4
   880c6:	462b      	mov	r3, r5
   880c8:	e696      	b.n	87df8 <_svfprintf_r+0x1c4>
   880ca:	2100      	movs	r1, #0
   880cc:	2401      	movs	r4, #1
   880ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880d0:	460a      	mov	r2, r1
   880d2:	f853 0b04 	ldr.w	r0, [r3], #4
   880d6:	9408      	str	r4, [sp, #32]
   880d8:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   880dc:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   880e0:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   880e4:	9109      	str	r1, [sp, #36]	; 0x24
   880e6:	9112      	str	r1, [sp, #72]	; 0x48
   880e8:	9116      	str	r1, [sp, #88]	; 0x58
   880ea:	9110      	str	r1, [sp, #64]	; 0x40
   880ec:	940c      	str	r4, [sp, #48]	; 0x30
   880ee:	af3d      	add	r7, sp, #244	; 0xf4
   880f0:	e702      	b.n	87ef8 <_svfprintf_r+0x2c4>
   880f2:	2500      	movs	r5, #0
   880f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   880f6:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   880fa:	f854 7b04 	ldr.w	r7, [r4], #4
   880fe:	2f00      	cmp	r7, #0
   88100:	f000 859f 	beq.w	88c42 <_svfprintf_r+0x100e>
   88104:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88106:	4613      	mov	r3, r2
   88108:	3301      	adds	r3, #1
   8810a:	f000 8770 	beq.w	88fee <_svfprintf_r+0x13ba>
   8810e:	4629      	mov	r1, r5
   88110:	4638      	mov	r0, r7
   88112:	f004 fac7 	bl	8c6a4 <memchr>
   88116:	900d      	str	r0, [sp, #52]	; 0x34
   88118:	2800      	cmp	r0, #0
   8811a:	f001 80b9 	beq.w	89290 <_svfprintf_r+0x165c>
   8811e:	462b      	mov	r3, r5
   88120:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   88122:	9509      	str	r5, [sp, #36]	; 0x24
   88124:	1bd2      	subs	r2, r2, r7
   88126:	920c      	str	r2, [sp, #48]	; 0x30
   88128:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   8812c:	9208      	str	r2, [sp, #32]
   8812e:	940e      	str	r4, [sp, #56]	; 0x38
   88130:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88134:	930d      	str	r3, [sp, #52]	; 0x34
   88136:	9312      	str	r3, [sp, #72]	; 0x48
   88138:	9316      	str	r3, [sp, #88]	; 0x58
   8813a:	9310      	str	r3, [sp, #64]	; 0x40
   8813c:	e79e      	b.n	8807c <_svfprintf_r+0x448>
   8813e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88140:	425b      	negs	r3, r3
   88142:	930b      	str	r3, [sp, #44]	; 0x2c
   88144:	9b07      	ldr	r3, [sp, #28]
   88146:	f89b 6000 	ldrb.w	r6, [fp]
   8814a:	f043 0304 	orr.w	r3, r3, #4
   8814e:	9307      	str	r3, [sp, #28]
   88150:	e5bb      	b.n	87cca <_svfprintf_r+0x96>
   88152:	9b07      	ldr	r3, [sp, #28]
   88154:	f043 0310 	orr.w	r3, r3, #16
   88158:	9308      	str	r3, [sp, #32]
   8815a:	9b08      	ldr	r3, [sp, #32]
   8815c:	069d      	lsls	r5, r3, #26
   8815e:	f140 83ea 	bpl.w	88936 <_svfprintf_r+0xd02>
   88162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88164:	3307      	adds	r3, #7
   88166:	f023 0307 	bic.w	r3, r3, #7
   8816a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8816e:	930e      	str	r3, [sp, #56]	; 0x38
   88170:	2301      	movs	r3, #1
   88172:	e670      	b.n	87e56 <_svfprintf_r+0x222>
   88174:	f647 0230 	movw	r2, #30768	; 0x7830
   88178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8817a:	9907      	ldr	r1, [sp, #28]
   8817c:	f853 4b04 	ldr.w	r4, [r3], #4
   88180:	f041 0102 	orr.w	r1, r1, #2
   88184:	930e      	str	r3, [sp, #56]	; 0x38
   88186:	4b4e      	ldr	r3, [pc, #312]	; (882c0 <_svfprintf_r+0x68c>)
   88188:	2500      	movs	r5, #0
   8818a:	9319      	str	r3, [sp, #100]	; 0x64
   8818c:	2678      	movs	r6, #120	; 0x78
   8818e:	2302      	movs	r3, #2
   88190:	9108      	str	r1, [sp, #32]
   88192:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   88196:	e65e      	b.n	87e56 <_svfprintf_r+0x222>
   88198:	9b07      	ldr	r3, [sp, #28]
   8819a:	069d      	lsls	r5, r3, #26
   8819c:	f100 8408 	bmi.w	889b0 <_svfprintf_r+0xd7c>
   881a0:	9b07      	ldr	r3, [sp, #28]
   881a2:	06dc      	lsls	r4, r3, #27
   881a4:	f100 86e1 	bmi.w	88f6a <_svfprintf_r+0x1336>
   881a8:	9b07      	ldr	r3, [sp, #28]
   881aa:	0658      	lsls	r0, r3, #25
   881ac:	f100 8795 	bmi.w	890da <_svfprintf_r+0x14a6>
   881b0:	9b07      	ldr	r3, [sp, #28]
   881b2:	0599      	lsls	r1, r3, #22
   881b4:	f140 86d9 	bpl.w	88f6a <_svfprintf_r+0x1336>
   881b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881ba:	990a      	ldr	r1, [sp, #40]	; 0x28
   881bc:	f853 2b04 	ldr.w	r2, [r3], #4
   881c0:	465f      	mov	r7, fp
   881c2:	7011      	strb	r1, [r2, #0]
   881c4:	930e      	str	r3, [sp, #56]	; 0x38
   881c6:	e703      	b.n	87fd0 <_svfprintf_r+0x39c>
   881c8:	f89b 6000 	ldrb.w	r6, [fp]
   881cc:	9b07      	ldr	r3, [sp, #28]
   881ce:	2e6c      	cmp	r6, #108	; 0x6c
   881d0:	f000 8508 	beq.w	88be4 <_svfprintf_r+0xfb0>
   881d4:	f043 0310 	orr.w	r3, r3, #16
   881d8:	9307      	str	r3, [sp, #28]
   881da:	e576      	b.n	87cca <_svfprintf_r+0x96>
   881dc:	f89b 6000 	ldrb.w	r6, [fp]
   881e0:	9b07      	ldr	r3, [sp, #28]
   881e2:	2e68      	cmp	r6, #104	; 0x68
   881e4:	f000 8507 	beq.w	88bf6 <_svfprintf_r+0xfc2>
   881e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   881ec:	9307      	str	r3, [sp, #28]
   881ee:	e56c      	b.n	87cca <_svfprintf_r+0x96>
   881f0:	9b07      	ldr	r3, [sp, #28]
   881f2:	f89b 6000 	ldrb.w	r6, [fp]
   881f6:	f043 0308 	orr.w	r3, r3, #8
   881fa:	9307      	str	r3, [sp, #28]
   881fc:	e565      	b.n	87cca <_svfprintf_r+0x96>
   881fe:	4648      	mov	r0, r9
   88200:	f003 ff00 	bl	8c004 <_localeconv_r>
   88204:	6843      	ldr	r3, [r0, #4]
   88206:	4618      	mov	r0, r3
   88208:	931c      	str	r3, [sp, #112]	; 0x70
   8820a:	f005 f8fd 	bl	8d408 <strlen>
   8820e:	4603      	mov	r3, r0
   88210:	4648      	mov	r0, r9
   88212:	461d      	mov	r5, r3
   88214:	931d      	str	r3, [sp, #116]	; 0x74
   88216:	f003 fef5 	bl	8c004 <_localeconv_r>
   8821a:	6882      	ldr	r2, [r0, #8]
   8821c:	2120      	movs	r1, #32
   8821e:	921a      	str	r2, [sp, #104]	; 0x68
   88220:	2d00      	cmp	r5, #0
   88222:	f43f adcd 	beq.w	87dc0 <_svfprintf_r+0x18c>
   88226:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   88228:	2b00      	cmp	r3, #0
   8822a:	f43f adc9 	beq.w	87dc0 <_svfprintf_r+0x18c>
   8822e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   88230:	781b      	ldrb	r3, [r3, #0]
   88232:	2b00      	cmp	r3, #0
   88234:	f43f adc4 	beq.w	87dc0 <_svfprintf_r+0x18c>
   88238:	9b07      	ldr	r3, [sp, #28]
   8823a:	f89b 6000 	ldrb.w	r6, [fp]
   8823e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   88242:	9307      	str	r3, [sp, #28]
   88244:	e541      	b.n	87cca <_svfprintf_r+0x96>
   88246:	9b07      	ldr	r3, [sp, #28]
   88248:	f89b 6000 	ldrb.w	r6, [fp]
   8824c:	f043 0301 	orr.w	r3, r3, #1
   88250:	9307      	str	r3, [sp, #28]
   88252:	e53a      	b.n	87cca <_svfprintf_r+0x96>
   88254:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   88258:	2b00      	cmp	r3, #0
   8825a:	f47f adb1 	bne.w	87dc0 <_svfprintf_r+0x18c>
   8825e:	f89b 6000 	ldrb.w	r6, [fp]
   88262:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   88266:	e530      	b.n	87cca <_svfprintf_r+0x96>
   88268:	9b07      	ldr	r3, [sp, #28]
   8826a:	f89b 6000 	ldrb.w	r6, [fp]
   8826e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   88272:	9307      	str	r3, [sp, #28]
   88274:	e529      	b.n	87cca <_svfprintf_r+0x96>
   88276:	465a      	mov	r2, fp
   88278:	f812 6b01 	ldrb.w	r6, [r2], #1
   8827c:	2e2a      	cmp	r6, #42	; 0x2a
   8827e:	f001 8251 	beq.w	89724 <_svfprintf_r+0x1af0>
   88282:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   88286:	2b09      	cmp	r3, #9
   88288:	4693      	mov	fp, r2
   8828a:	bf98      	it	ls
   8828c:	2200      	movls	r2, #0
   8828e:	f201 80ef 	bhi.w	89470 <_svfprintf_r+0x183c>
   88292:	f81b 6b01 	ldrb.w	r6, [fp], #1
   88296:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8829a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8829e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   882a2:	2b09      	cmp	r3, #9
   882a4:	d9f5      	bls.n	88292 <_svfprintf_r+0x65e>
   882a6:	9209      	str	r2, [sp, #36]	; 0x24
   882a8:	e511      	b.n	87cce <_svfprintf_r+0x9a>
   882aa:	f89b 6000 	ldrb.w	r6, [fp]
   882ae:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   882b2:	e50a      	b.n	87cca <_svfprintf_r+0x96>
   882b4:	7fefffff 	.word	0x7fefffff
   882b8:	0008e640 	.word	0x0008e640
   882bc:	0008e644 	.word	0x0008e644
   882c0:	0008e650 	.word	0x0008e650
   882c4:	9a07      	ldr	r2, [sp, #28]
   882c6:	9208      	str	r2, [sp, #32]
   882c8:	2b01      	cmp	r3, #1
   882ca:	f000 81b4 	beq.w	88636 <_svfprintf_r+0xa02>
   882ce:	2b02      	cmp	r3, #2
   882d0:	f000 8159 	beq.w	88586 <_svfprintf_r+0x952>
   882d4:	af56      	add	r7, sp, #344	; 0x158
   882d6:	08e2      	lsrs	r2, r4, #3
   882d8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   882dc:	08e9      	lsrs	r1, r5, #3
   882de:	f004 0307 	and.w	r3, r4, #7
   882e2:	460d      	mov	r5, r1
   882e4:	4614      	mov	r4, r2
   882e6:	3330      	adds	r3, #48	; 0x30
   882e8:	ea54 0105 	orrs.w	r1, r4, r5
   882ec:	463a      	mov	r2, r7
   882ee:	f807 3d01 	strb.w	r3, [r7, #-1]!
   882f2:	d1f0      	bne.n	882d6 <_svfprintf_r+0x6a2>
   882f4:	9908      	ldr	r1, [sp, #32]
   882f6:	4608      	mov	r0, r1
   882f8:	07c0      	lsls	r0, r0, #31
   882fa:	f100 82b8 	bmi.w	8886e <_svfprintf_r+0xc3a>
   882fe:	ab56      	add	r3, sp, #344	; 0x158
   88300:	1bdb      	subs	r3, r3, r7
   88302:	9107      	str	r1, [sp, #28]
   88304:	930c      	str	r3, [sp, #48]	; 0x30
   88306:	2300      	movs	r3, #0
   88308:	9909      	ldr	r1, [sp, #36]	; 0x24
   8830a:	930d      	str	r3, [sp, #52]	; 0x34
   8830c:	9312      	str	r3, [sp, #72]	; 0x48
   8830e:	9316      	str	r3, [sp, #88]	; 0x58
   88310:	9310      	str	r3, [sp, #64]	; 0x40
   88312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88314:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88318:	428b      	cmp	r3, r1
   8831a:	bfb8      	it	lt
   8831c:	460b      	movlt	r3, r1
   8831e:	9308      	str	r3, [sp, #32]
   88320:	e6ac      	b.n	8807c <_svfprintf_r+0x448>
   88322:	2e65      	cmp	r6, #101	; 0x65
   88324:	f340 80d8 	ble.w	884d8 <_svfprintf_r+0x8a4>
   88328:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8832c:	2200      	movs	r2, #0
   8832e:	2300      	movs	r3, #0
   88330:	f005 ffce 	bl	8e2d0 <__aeabi_dcmpeq>
   88334:	2800      	cmp	r0, #0
   88336:	f000 821e 	beq.w	88776 <_svfprintf_r+0xb42>
   8833a:	2101      	movs	r1, #1
   8833c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8833e:	4ac5      	ldr	r2, [pc, #788]	; (88654 <_svfprintf_r+0xa20>)
   88340:	440b      	add	r3, r1
   88342:	440c      	add	r4, r1
   88344:	2b07      	cmp	r3, #7
   88346:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8834a:	e9c8 2100 	strd	r2, r1, [r8]
   8834e:	f300 85bb 	bgt.w	88ec8 <_svfprintf_r+0x1294>
   88352:	f108 0808 	add.w	r8, r8, #8
   88356:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8835a:	4293      	cmp	r3, r2
   8835c:	f280 8321 	bge.w	889a2 <_svfprintf_r+0xd6e>
   88360:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88364:	3301      	adds	r3, #1
   88366:	9918      	ldr	r1, [sp, #96]	; 0x60
   88368:	4414      	add	r4, r2
   8836a:	2b07      	cmp	r3, #7
   8836c:	e9c8 1200 	strd	r1, r2, [r8]
   88370:	942c      	str	r4, [sp, #176]	; 0xb0
   88372:	932b      	str	r3, [sp, #172]	; 0xac
   88374:	f300 8448 	bgt.w	88c08 <_svfprintf_r+0xfd4>
   88378:	f108 0808 	add.w	r8, r8, #8
   8837c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8837e:	1e5d      	subs	r5, r3, #1
   88380:	2d00      	cmp	r5, #0
   88382:	f77f ae06 	ble.w	87f92 <_svfprintf_r+0x35e>
   88386:	2d10      	cmp	r5, #16
   88388:	f340 85c7 	ble.w	88f1a <_svfprintf_r+0x12e6>
   8838c:	4fb2      	ldr	r7, [pc, #712]	; (88658 <_svfprintf_r+0xa24>)
   8838e:	2610      	movs	r6, #16
   88390:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88392:	970f      	str	r7, [sp, #60]	; 0x3c
   88394:	e005      	b.n	883a2 <_svfprintf_r+0x76e>
   88396:	f108 0808 	add.w	r8, r8, #8
   8839a:	3d10      	subs	r5, #16
   8839c:	2d10      	cmp	r5, #16
   8839e:	f340 85bf 	ble.w	88f20 <_svfprintf_r+0x12ec>
   883a2:	3301      	adds	r3, #1
   883a4:	3410      	adds	r4, #16
   883a6:	2b07      	cmp	r3, #7
   883a8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   883ac:	e9c8 7600 	strd	r7, r6, [r8]
   883b0:	ddf1      	ble.n	88396 <_svfprintf_r+0x762>
   883b2:	4651      	mov	r1, sl
   883b4:	4648      	mov	r0, r9
   883b6:	aa2a      	add	r2, sp, #168	; 0xa8
   883b8:	f005 f888 	bl	8d4cc <__ssprint_r>
   883bc:	2800      	cmp	r0, #0
   883be:	f040 8081 	bne.w	884c4 <_svfprintf_r+0x890>
   883c2:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   883c6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   883ca:	e7e6      	b.n	8839a <_svfprintf_r+0x766>
   883cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   883ce:	9a08      	ldr	r2, [sp, #32]
   883d0:	1a9d      	subs	r5, r3, r2
   883d2:	2d00      	cmp	r5, #0
   883d4:	f77f adc6 	ble.w	87f64 <_svfprintf_r+0x330>
   883d8:	2d10      	cmp	r5, #16
   883da:	f341 8069 	ble.w	894b0 <_svfprintf_r+0x187c>
   883de:	489e      	ldr	r0, [pc, #632]	; (88658 <_svfprintf_r+0xa24>)
   883e0:	4621      	mov	r1, r4
   883e2:	2310      	movs	r3, #16
   883e4:	4604      	mov	r4, r0
   883e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   883e8:	900f      	str	r0, [sp, #60]	; 0x3c
   883ea:	e004      	b.n	883f6 <_svfprintf_r+0x7c2>
   883ec:	3d10      	subs	r5, #16
   883ee:	2d10      	cmp	r5, #16
   883f0:	f108 0808 	add.w	r8, r8, #8
   883f4:	dd17      	ble.n	88426 <_svfprintf_r+0x7f2>
   883f6:	3201      	adds	r2, #1
   883f8:	3110      	adds	r1, #16
   883fa:	2a07      	cmp	r2, #7
   883fc:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   88400:	e9c8 4300 	strd	r4, r3, [r8]
   88404:	ddf2      	ble.n	883ec <_svfprintf_r+0x7b8>
   88406:	4651      	mov	r1, sl
   88408:	4648      	mov	r0, r9
   8840a:	aa2a      	add	r2, sp, #168	; 0xa8
   8840c:	f005 f85e 	bl	8d4cc <__ssprint_r>
   88410:	2800      	cmp	r0, #0
   88412:	d157      	bne.n	884c4 <_svfprintf_r+0x890>
   88414:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88418:	3d10      	subs	r5, #16
   8841a:	2d10      	cmp	r5, #16
   8841c:	f04f 0310 	mov.w	r3, #16
   88420:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88424:	dce7      	bgt.n	883f6 <_svfprintf_r+0x7c2>
   88426:	460c      	mov	r4, r1
   88428:	3201      	adds	r2, #1
   8842a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8842c:	442c      	add	r4, r5
   8842e:	2a07      	cmp	r2, #7
   88430:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   88434:	e9c8 3500 	strd	r3, r5, [r8]
   88438:	f300 858a 	bgt.w	88f50 <_svfprintf_r+0x131c>
   8843c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8843e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88440:	f108 0808 	add.w	r8, r8, #8
   88444:	1a9d      	subs	r5, r3, r2
   88446:	2d00      	cmp	r5, #0
   88448:	f77f ad92 	ble.w	87f70 <_svfprintf_r+0x33c>
   8844c:	2d10      	cmp	r5, #16
   8844e:	f340 860a 	ble.w	89066 <_svfprintf_r+0x1432>
   88452:	4881      	ldr	r0, [pc, #516]	; (88658 <_svfprintf_r+0xa24>)
   88454:	4621      	mov	r1, r4
   88456:	2310      	movs	r3, #16
   88458:	4604      	mov	r4, r0
   8845a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8845c:	900f      	str	r0, [sp, #60]	; 0x3c
   8845e:	e004      	b.n	8846a <_svfprintf_r+0x836>
   88460:	3d10      	subs	r5, #16
   88462:	2d10      	cmp	r5, #16
   88464:	f108 0808 	add.w	r8, r8, #8
   88468:	dd16      	ble.n	88498 <_svfprintf_r+0x864>
   8846a:	3201      	adds	r2, #1
   8846c:	3110      	adds	r1, #16
   8846e:	2a07      	cmp	r2, #7
   88470:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   88474:	e9c8 4300 	strd	r4, r3, [r8]
   88478:	ddf2      	ble.n	88460 <_svfprintf_r+0x82c>
   8847a:	4651      	mov	r1, sl
   8847c:	4648      	mov	r0, r9
   8847e:	aa2a      	add	r2, sp, #168	; 0xa8
   88480:	f005 f824 	bl	8d4cc <__ssprint_r>
   88484:	b9f0      	cbnz	r0, 884c4 <_svfprintf_r+0x890>
   88486:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8848a:	3d10      	subs	r5, #16
   8848c:	2d10      	cmp	r5, #16
   8848e:	f04f 0310 	mov.w	r3, #16
   88492:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88496:	dce8      	bgt.n	8846a <_svfprintf_r+0x836>
   88498:	460c      	mov	r4, r1
   8849a:	3201      	adds	r2, #1
   8849c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8849e:	442c      	add	r4, r5
   884a0:	2a07      	cmp	r2, #7
   884a2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   884a6:	e9c8 3500 	strd	r3, r5, [r8]
   884aa:	f300 8237 	bgt.w	8891c <_svfprintf_r+0xce8>
   884ae:	f108 0808 	add.w	r8, r8, #8
   884b2:	e55d      	b.n	87f70 <_svfprintf_r+0x33c>
   884b4:	4651      	mov	r1, sl
   884b6:	4648      	mov	r0, r9
   884b8:	aa2a      	add	r2, sp, #168	; 0xa8
   884ba:	f005 f807 	bl	8d4cc <__ssprint_r>
   884be:	2800      	cmp	r0, #0
   884c0:	f43f ad7b 	beq.w	87fba <_svfprintf_r+0x386>
   884c4:	46d3      	mov	fp, sl
   884c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   884c8:	2b00      	cmp	r3, #0
   884ca:	f43f ad8a 	beq.w	87fe2 <_svfprintf_r+0x3ae>
   884ce:	4648      	mov	r0, r9
   884d0:	990d      	ldr	r1, [sp, #52]	; 0x34
   884d2:	f003 faf1 	bl	8bab8 <_free_r>
   884d6:	e584      	b.n	87fe2 <_svfprintf_r+0x3ae>
   884d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   884da:	2b01      	cmp	r3, #1
   884dc:	f340 81d5 	ble.w	8888a <_svfprintf_r+0xc56>
   884e0:	2301      	movs	r3, #1
   884e2:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   884e4:	441c      	add	r4, r3
   884e6:	441d      	add	r5, r3
   884e8:	2d07      	cmp	r5, #7
   884ea:	942c      	str	r4, [sp, #176]	; 0xb0
   884ec:	f8c8 7000 	str.w	r7, [r8]
   884f0:	952b      	str	r5, [sp, #172]	; 0xac
   884f2:	f8c8 3004 	str.w	r3, [r8, #4]
   884f6:	f300 823a 	bgt.w	8896e <_svfprintf_r+0xd3a>
   884fa:	f108 0808 	add.w	r8, r8, #8
   884fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88500:	3501      	adds	r5, #1
   88502:	9a18      	ldr	r2, [sp, #96]	; 0x60
   88504:	441c      	add	r4, r3
   88506:	2d07      	cmp	r5, #7
   88508:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8850c:	e9c8 2300 	strd	r2, r3, [r8]
   88510:	f300 823a 	bgt.w	88988 <_svfprintf_r+0xd54>
   88514:	f108 0808 	add.w	r8, r8, #8
   88518:	2300      	movs	r3, #0
   8851a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8851e:	2200      	movs	r2, #0
   88520:	f005 fed6 	bl	8e2d0 <__aeabi_dcmpeq>
   88524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88526:	2800      	cmp	r0, #0
   88528:	f040 81cd 	bne.w	888c6 <_svfprintf_r+0xc92>
   8852c:	3b01      	subs	r3, #1
   8852e:	3501      	adds	r5, #1
   88530:	3701      	adds	r7, #1
   88532:	441c      	add	r4, r3
   88534:	2d07      	cmp	r5, #7
   88536:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8853a:	f8c8 7000 	str.w	r7, [r8]
   8853e:	f8c8 3004 	str.w	r3, [r8, #4]
   88542:	f300 84dc 	bgt.w	88efe <_svfprintf_r+0x12ca>
   88546:	f108 0808 	add.w	r8, r8, #8
   8854a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8854c:	3501      	adds	r5, #1
   8854e:	4414      	add	r4, r2
   88550:	ab26      	add	r3, sp, #152	; 0x98
   88552:	2d07      	cmp	r5, #7
   88554:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88558:	e9c8 3200 	strd	r3, r2, [r8]
   8855c:	f77f ad17 	ble.w	87f8e <_svfprintf_r+0x35a>
   88560:	4651      	mov	r1, sl
   88562:	4648      	mov	r0, r9
   88564:	aa2a      	add	r2, sp, #168	; 0xa8
   88566:	f004 ffb1 	bl	8d4cc <__ssprint_r>
   8856a:	2800      	cmp	r0, #0
   8856c:	d1aa      	bne.n	884c4 <_svfprintf_r+0x890>
   8856e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88570:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88574:	e50d      	b.n	87f92 <_svfprintf_r+0x35e>
   88576:	2b01      	cmp	r3, #1
   88578:	f000 87ca 	beq.w	89510 <_svfprintf_r+0x18dc>
   8857c:	2b02      	cmp	r3, #2
   8857e:	9b07      	ldr	r3, [sp, #28]
   88580:	9308      	str	r3, [sp, #32]
   88582:	f47f aea7 	bne.w	882d4 <_svfprintf_r+0x6a0>
   88586:	9819      	ldr	r0, [sp, #100]	; 0x64
   88588:	af56      	add	r7, sp, #344	; 0x158
   8858a:	0923      	lsrs	r3, r4, #4
   8858c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88590:	0929      	lsrs	r1, r5, #4
   88592:	f004 020f 	and.w	r2, r4, #15
   88596:	460d      	mov	r5, r1
   88598:	461c      	mov	r4, r3
   8859a:	5c83      	ldrb	r3, [r0, r2]
   8859c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   885a0:	ea54 0305 	orrs.w	r3, r4, r5
   885a4:	d1f1      	bne.n	8858a <_svfprintf_r+0x956>
   885a6:	9b08      	ldr	r3, [sp, #32]
   885a8:	9307      	str	r3, [sp, #28]
   885aa:	ab56      	add	r3, sp, #344	; 0x158
   885ac:	1bdb      	subs	r3, r3, r7
   885ae:	930c      	str	r3, [sp, #48]	; 0x30
   885b0:	e6a9      	b.n	88306 <_svfprintf_r+0x6d2>
   885b2:	2d10      	cmp	r5, #16
   885b4:	f340 8668 	ble.w	89288 <_svfprintf_r+0x1654>
   885b8:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   885bc:	931e      	str	r3, [sp, #120]	; 0x78
   885be:	460b      	mov	r3, r1
   885c0:	4639      	mov	r1, r7
   885c2:	2410      	movs	r4, #16
   885c4:	4637      	mov	r7, r6
   885c6:	4656      	mov	r6, sl
   885c8:	46ca      	mov	sl, r9
   885ca:	4689      	mov	r9, r1
   885cc:	e004      	b.n	885d8 <_svfprintf_r+0x9a4>
   885ce:	3d10      	subs	r5, #16
   885d0:	2d10      	cmp	r5, #16
   885d2:	f108 0808 	add.w	r8, r8, #8
   885d6:	dd17      	ble.n	88608 <_svfprintf_r+0x9d4>
   885d8:	3201      	adds	r2, #1
   885da:	4920      	ldr	r1, [pc, #128]	; (8865c <_svfprintf_r+0xa28>)
   885dc:	3310      	adds	r3, #16
   885de:	2a07      	cmp	r2, #7
   885e0:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   885e4:	e9c8 1400 	strd	r1, r4, [r8]
   885e8:	ddf1      	ble.n	885ce <_svfprintf_r+0x99a>
   885ea:	4631      	mov	r1, r6
   885ec:	4650      	mov	r0, sl
   885ee:	aa2a      	add	r2, sp, #168	; 0xa8
   885f0:	f004 ff6c 	bl	8d4cc <__ssprint_r>
   885f4:	2800      	cmp	r0, #0
   885f6:	f040 8458 	bne.w	88eaa <_svfprintf_r+0x1276>
   885fa:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   885fe:	3d10      	subs	r5, #16
   88600:	2d10      	cmp	r5, #16
   88602:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88606:	dce7      	bgt.n	885d8 <_svfprintf_r+0x9a4>
   88608:	4648      	mov	r0, r9
   8860a:	46d1      	mov	r9, sl
   8860c:	46b2      	mov	sl, r6
   8860e:	463e      	mov	r6, r7
   88610:	4607      	mov	r7, r0
   88612:	4619      	mov	r1, r3
   88614:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88616:	194c      	adds	r4, r1, r5
   88618:	3201      	adds	r2, #1
   8861a:	4910      	ldr	r1, [pc, #64]	; (8865c <_svfprintf_r+0xa28>)
   8861c:	2a07      	cmp	r2, #7
   8861e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   88622:	e9c8 1500 	strd	r1, r5, [r8]
   88626:	f300 841f 	bgt.w	88e68 <_svfprintf_r+0x1234>
   8862a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8862e:	f108 0808 	add.w	r8, r8, #8
   88632:	e474      	b.n	87f1e <_svfprintf_r+0x2ea>
   88634:	9308      	str	r3, [sp, #32]
   88636:	2d00      	cmp	r5, #0
   88638:	bf08      	it	eq
   8863a:	2c0a      	cmpeq	r4, #10
   8863c:	f080 83d0 	bcs.w	88de0 <_svfprintf_r+0x11ac>
   88640:	9b08      	ldr	r3, [sp, #32]
   88642:	3430      	adds	r4, #48	; 0x30
   88644:	9307      	str	r3, [sp, #28]
   88646:	2301      	movs	r3, #1
   88648:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   8864c:	930c      	str	r3, [sp, #48]	; 0x30
   8864e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   88652:	e658      	b.n	88306 <_svfprintf_r+0x6d2>
   88654:	0008e680 	.word	0x0008e680
   88658:	0008e694 	.word	0x0008e694
   8865c:	0008e684 	.word	0x0008e684
   88660:	4651      	mov	r1, sl
   88662:	4648      	mov	r0, r9
   88664:	aa2a      	add	r2, sp, #168	; 0xa8
   88666:	f004 ff31 	bl	8d4cc <__ssprint_r>
   8866a:	2800      	cmp	r0, #0
   8866c:	f47f af2a 	bne.w	884c4 <_svfprintf_r+0x890>
   88670:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88672:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88674:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88678:	2a00      	cmp	r2, #0
   8867a:	f040 847f 	bne.w	88f7c <_svfprintf_r+0x1348>
   8867e:	9b07      	ldr	r3, [sp, #28]
   88680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88682:	f003 0301 	and.w	r3, r3, #1
   88686:	4313      	orrs	r3, r2
   88688:	f43f ac83 	beq.w	87f92 <_svfprintf_r+0x35e>
   8868c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8868e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88690:	3301      	adds	r3, #1
   88692:	9918      	ldr	r1, [sp, #96]	; 0x60
   88694:	4414      	add	r4, r2
   88696:	2b07      	cmp	r3, #7
   88698:	e9c8 1200 	strd	r1, r2, [r8]
   8869c:	942c      	str	r4, [sp, #176]	; 0xb0
   8869e:	932b      	str	r3, [sp, #172]	; 0xac
   886a0:	f300 8524 	bgt.w	890ec <_svfprintf_r+0x14b8>
   886a4:	f108 0808 	add.w	r8, r8, #8
   886a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   886aa:	3301      	adds	r3, #1
   886ac:	4414      	add	r4, r2
   886ae:	2b07      	cmp	r3, #7
   886b0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   886b4:	e9c8 7200 	strd	r7, r2, [r8]
   886b8:	f77f ac69 	ble.w	87f8e <_svfprintf_r+0x35a>
   886bc:	4651      	mov	r1, sl
   886be:	4648      	mov	r0, r9
   886c0:	aa2a      	add	r2, sp, #168	; 0xa8
   886c2:	f004 ff03 	bl	8d4cc <__ssprint_r>
   886c6:	2800      	cmp	r0, #0
   886c8:	f47f aefc 	bne.w	884c4 <_svfprintf_r+0x890>
   886cc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   886ce:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   886d2:	e45e      	b.n	87f92 <_svfprintf_r+0x35e>
   886d4:	4651      	mov	r1, sl
   886d6:	4648      	mov	r0, r9
   886d8:	aa2a      	add	r2, sp, #168	; 0xa8
   886da:	931e      	str	r3, [sp, #120]	; 0x78
   886dc:	f004 fef6 	bl	8d4cc <__ssprint_r>
   886e0:	2800      	cmp	r0, #0
   886e2:	f47f aeef 	bne.w	884c4 <_svfprintf_r+0x890>
   886e6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   886e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   886ea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   886ee:	e426      	b.n	87f3e <_svfprintf_r+0x30a>
   886f0:	4651      	mov	r1, sl
   886f2:	4648      	mov	r0, r9
   886f4:	aa2a      	add	r2, sp, #168	; 0xa8
   886f6:	f004 fee9 	bl	8d4cc <__ssprint_r>
   886fa:	2800      	cmp	r0, #0
   886fc:	f47f aee2 	bne.w	884c4 <_svfprintf_r+0x890>
   88700:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88702:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88706:	e429      	b.n	87f5c <_svfprintf_r+0x328>
   88708:	2d10      	cmp	r5, #16
   8870a:	f340 86be 	ble.w	8948a <_svfprintf_r+0x1856>
   8870e:	2610      	movs	r6, #16
   88710:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88712:	e004      	b.n	8871e <_svfprintf_r+0xaea>
   88714:	3d10      	subs	r5, #16
   88716:	2d10      	cmp	r5, #16
   88718:	f108 0808 	add.w	r8, r8, #8
   8871c:	dd17      	ble.n	8874e <_svfprintf_r+0xb1a>
   8871e:	3301      	adds	r3, #1
   88720:	4aad      	ldr	r2, [pc, #692]	; (889d8 <_svfprintf_r+0xda4>)
   88722:	3410      	adds	r4, #16
   88724:	2b07      	cmp	r3, #7
   88726:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8872a:	e9c8 2600 	strd	r2, r6, [r8]
   8872e:	ddf1      	ble.n	88714 <_svfprintf_r+0xae0>
   88730:	4651      	mov	r1, sl
   88732:	4648      	mov	r0, r9
   88734:	aa2a      	add	r2, sp, #168	; 0xa8
   88736:	f004 fec9 	bl	8d4cc <__ssprint_r>
   8873a:	2800      	cmp	r0, #0
   8873c:	f47f aec2 	bne.w	884c4 <_svfprintf_r+0x890>
   88740:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88744:	3d10      	subs	r5, #16
   88746:	2d10      	cmp	r5, #16
   88748:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8874c:	dce7      	bgt.n	8871e <_svfprintf_r+0xaea>
   8874e:	3301      	adds	r3, #1
   88750:	4aa1      	ldr	r2, [pc, #644]	; (889d8 <_svfprintf_r+0xda4>)
   88752:	442c      	add	r4, r5
   88754:	2b07      	cmp	r3, #7
   88756:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8875a:	e9c8 2500 	strd	r2, r5, [r8]
   8875e:	f77f ac21 	ble.w	87fa4 <_svfprintf_r+0x370>
   88762:	4651      	mov	r1, sl
   88764:	4648      	mov	r0, r9
   88766:	aa2a      	add	r2, sp, #168	; 0xa8
   88768:	f004 feb0 	bl	8d4cc <__ssprint_r>
   8876c:	2800      	cmp	r0, #0
   8876e:	f47f aea9 	bne.w	884c4 <_svfprintf_r+0x890>
   88772:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88774:	e416      	b.n	87fa4 <_svfprintf_r+0x370>
   88776:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88778:	2a00      	cmp	r2, #0
   8877a:	f340 8386 	ble.w	88e8a <_svfprintf_r+0x1256>
   8877e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88782:	4293      	cmp	r3, r2
   88784:	bfa8      	it	ge
   88786:	4613      	movge	r3, r2
   88788:	2b00      	cmp	r3, #0
   8878a:	461d      	mov	r5, r3
   8878c:	dd0b      	ble.n	887a6 <_svfprintf_r+0xb72>
   8878e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88790:	442c      	add	r4, r5
   88792:	3301      	adds	r3, #1
   88794:	2b07      	cmp	r3, #7
   88796:	e9c8 7500 	strd	r7, r5, [r8]
   8879a:	942c      	str	r4, [sp, #176]	; 0xb0
   8879c:	932b      	str	r3, [sp, #172]	; 0xac
   8879e:	f300 851e 	bgt.w	891de <_svfprintf_r+0x15aa>
   887a2:	f108 0808 	add.w	r8, r8, #8
   887a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   887a8:	2d00      	cmp	r5, #0
   887aa:	bfa8      	it	ge
   887ac:	1b5b      	subge	r3, r3, r5
   887ae:	2b00      	cmp	r3, #0
   887b0:	461d      	mov	r5, r3
   887b2:	f300 8256 	bgt.w	88c62 <_svfprintf_r+0x102e>
   887b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   887b8:	443b      	add	r3, r7
   887ba:	461e      	mov	r6, r3
   887bc:	9b07      	ldr	r3, [sp, #28]
   887be:	055b      	lsls	r3, r3, #21
   887c0:	f100 8277 	bmi.w	88cb2 <_svfprintf_r+0x107e>
   887c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   887c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   887c8:	4293      	cmp	r3, r2
   887ca:	db03      	blt.n	887d4 <_svfprintf_r+0xba0>
   887cc:	9a07      	ldr	r2, [sp, #28]
   887ce:	07d5      	lsls	r5, r2, #31
   887d0:	f140 847a 	bpl.w	890c8 <_svfprintf_r+0x1494>
   887d4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   887d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   887d8:	3201      	adds	r2, #1
   887da:	9818      	ldr	r0, [sp, #96]	; 0x60
   887dc:	440c      	add	r4, r1
   887de:	2a07      	cmp	r2, #7
   887e0:	e9c8 0100 	strd	r0, r1, [r8]
   887e4:	942c      	str	r4, [sp, #176]	; 0xb0
   887e6:	922b      	str	r2, [sp, #172]	; 0xac
   887e8:	f300 8506 	bgt.w	891f8 <_svfprintf_r+0x15c4>
   887ec:	f108 0808 	add.w	r8, r8, #8
   887f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   887f2:	18bd      	adds	r5, r7, r2
   887f4:	1bad      	subs	r5, r5, r6
   887f6:	1ad3      	subs	r3, r2, r3
   887f8:	429d      	cmp	r5, r3
   887fa:	bfa8      	it	ge
   887fc:	461d      	movge	r5, r3
   887fe:	2d00      	cmp	r5, #0
   88800:	dd0b      	ble.n	8881a <_svfprintf_r+0xbe6>
   88802:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88804:	442c      	add	r4, r5
   88806:	3201      	adds	r2, #1
   88808:	2a07      	cmp	r2, #7
   8880a:	e9c8 6500 	strd	r6, r5, [r8]
   8880e:	942c      	str	r4, [sp, #176]	; 0xb0
   88810:	922b      	str	r2, [sp, #172]	; 0xac
   88812:	f300 855f 	bgt.w	892d4 <_svfprintf_r+0x16a0>
   88816:	f108 0808 	add.w	r8, r8, #8
   8881a:	2d00      	cmp	r5, #0
   8881c:	bfb4      	ite	lt
   8881e:	461d      	movlt	r5, r3
   88820:	1b5d      	subge	r5, r3, r5
   88822:	2d00      	cmp	r5, #0
   88824:	f77f abb5 	ble.w	87f92 <_svfprintf_r+0x35e>
   88828:	2d10      	cmp	r5, #16
   8882a:	f340 8376 	ble.w	88f1a <_svfprintf_r+0x12e6>
   8882e:	4f6b      	ldr	r7, [pc, #428]	; (889dc <_svfprintf_r+0xda8>)
   88830:	2610      	movs	r6, #16
   88832:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88834:	970f      	str	r7, [sp, #60]	; 0x3c
   88836:	e005      	b.n	88844 <_svfprintf_r+0xc10>
   88838:	f108 0808 	add.w	r8, r8, #8
   8883c:	3d10      	subs	r5, #16
   8883e:	2d10      	cmp	r5, #16
   88840:	f340 836e 	ble.w	88f20 <_svfprintf_r+0x12ec>
   88844:	3301      	adds	r3, #1
   88846:	3410      	adds	r4, #16
   88848:	2b07      	cmp	r3, #7
   8884a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8884e:	e9c8 7600 	strd	r7, r6, [r8]
   88852:	ddf1      	ble.n	88838 <_svfprintf_r+0xc04>
   88854:	4651      	mov	r1, sl
   88856:	4648      	mov	r0, r9
   88858:	aa2a      	add	r2, sp, #168	; 0xa8
   8885a:	f004 fe37 	bl	8d4cc <__ssprint_r>
   8885e:	2800      	cmp	r0, #0
   88860:	f47f ae30 	bne.w	884c4 <_svfprintf_r+0x890>
   88864:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88868:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8886c:	e7e6      	b.n	8883c <_svfprintf_r+0xc08>
   8886e:	2b30      	cmp	r3, #48	; 0x30
   88870:	f43f ae99 	beq.w	885a6 <_svfprintf_r+0x972>
   88874:	2330      	movs	r3, #48	; 0x30
   88876:	3a02      	subs	r2, #2
   88878:	f807 3c01 	strb.w	r3, [r7, #-1]
   8887c:	9908      	ldr	r1, [sp, #32]
   8887e:	ab56      	add	r3, sp, #344	; 0x158
   88880:	1a9b      	subs	r3, r3, r2
   88882:	4617      	mov	r7, r2
   88884:	9107      	str	r1, [sp, #28]
   88886:	930c      	str	r3, [sp, #48]	; 0x30
   88888:	e53d      	b.n	88306 <_svfprintf_r+0x6d2>
   8888a:	9b07      	ldr	r3, [sp, #28]
   8888c:	07d8      	lsls	r0, r3, #31
   8888e:	f53f ae27 	bmi.w	884e0 <_svfprintf_r+0x8ac>
   88892:	2301      	movs	r3, #1
   88894:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   88896:	441c      	add	r4, r3
   88898:	441d      	add	r5, r3
   8889a:	2d07      	cmp	r5, #7
   8889c:	942c      	str	r4, [sp, #176]	; 0xb0
   8889e:	f8c8 7000 	str.w	r7, [r8]
   888a2:	952b      	str	r5, [sp, #172]	; 0xac
   888a4:	f8c8 3004 	str.w	r3, [r8, #4]
   888a8:	f77f ae4d 	ble.w	88546 <_svfprintf_r+0x912>
   888ac:	4651      	mov	r1, sl
   888ae:	4648      	mov	r0, r9
   888b0:	aa2a      	add	r2, sp, #168	; 0xa8
   888b2:	f004 fe0b 	bl	8d4cc <__ssprint_r>
   888b6:	2800      	cmp	r0, #0
   888b8:	f47f ae04 	bne.w	884c4 <_svfprintf_r+0x890>
   888bc:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   888c0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   888c4:	e641      	b.n	8854a <_svfprintf_r+0x916>
   888c6:	1e5e      	subs	r6, r3, #1
   888c8:	2e00      	cmp	r6, #0
   888ca:	f77f ae3e 	ble.w	8854a <_svfprintf_r+0x916>
   888ce:	2e10      	cmp	r6, #16
   888d0:	f340 871e 	ble.w	89710 <_svfprintf_r+0x1adc>
   888d4:	4b41      	ldr	r3, [pc, #260]	; (889dc <_svfprintf_r+0xda8>)
   888d6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   888da:	2710      	movs	r7, #16
   888dc:	46d3      	mov	fp, sl
   888de:	930f      	str	r3, [sp, #60]	; 0x3c
   888e0:	46ca      	mov	sl, r9
   888e2:	4699      	mov	r9, r3
   888e4:	e005      	b.n	888f2 <_svfprintf_r+0xcbe>
   888e6:	f108 0808 	add.w	r8, r8, #8
   888ea:	3e10      	subs	r6, #16
   888ec:	2e10      	cmp	r6, #16
   888ee:	f340 82f8 	ble.w	88ee2 <_svfprintf_r+0x12ae>
   888f2:	3501      	adds	r5, #1
   888f4:	3410      	adds	r4, #16
   888f6:	2d07      	cmp	r5, #7
   888f8:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   888fc:	e9c8 9700 	strd	r9, r7, [r8]
   88900:	ddf1      	ble.n	888e6 <_svfprintf_r+0xcb2>
   88902:	4659      	mov	r1, fp
   88904:	4650      	mov	r0, sl
   88906:	aa2a      	add	r2, sp, #168	; 0xa8
   88908:	f004 fde0 	bl	8d4cc <__ssprint_r>
   8890c:	2800      	cmp	r0, #0
   8890e:	f040 85cc 	bne.w	894aa <_svfprintf_r+0x1876>
   88912:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88916:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8891a:	e7e6      	b.n	888ea <_svfprintf_r+0xcb6>
   8891c:	4651      	mov	r1, sl
   8891e:	4648      	mov	r0, r9
   88920:	aa2a      	add	r2, sp, #168	; 0xa8
   88922:	f004 fdd3 	bl	8d4cc <__ssprint_r>
   88926:	2800      	cmp	r0, #0
   88928:	f47f adcc 	bne.w	884c4 <_svfprintf_r+0x890>
   8892c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8892e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88932:	f7ff bb1d 	b.w	87f70 <_svfprintf_r+0x33c>
   88936:	9b08      	ldr	r3, [sp, #32]
   88938:	06dc      	lsls	r4, r3, #27
   8893a:	f100 8119 	bmi.w	88b70 <_svfprintf_r+0xf3c>
   8893e:	9b08      	ldr	r3, [sp, #32]
   88940:	0658      	lsls	r0, r3, #25
   88942:	f140 8368 	bpl.w	89016 <_svfprintf_r+0x13e2>
   88946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88948:	2301      	movs	r3, #1
   8894a:	f852 4b04 	ldr.w	r4, [r2], #4
   8894e:	2500      	movs	r5, #0
   88950:	920e      	str	r2, [sp, #56]	; 0x38
   88952:	b2a4      	uxth	r4, r4
   88954:	f7ff ba7f 	b.w	87e56 <_svfprintf_r+0x222>
   88958:	232d      	movs	r3, #45	; 0x2d
   8895a:	9a07      	ldr	r2, [sp, #28]
   8895c:	4264      	negs	r4, r4
   8895e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   88962:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88966:	2301      	movs	r3, #1
   88968:	9208      	str	r2, [sp, #32]
   8896a:	f7ff ba77 	b.w	87e5c <_svfprintf_r+0x228>
   8896e:	4651      	mov	r1, sl
   88970:	4648      	mov	r0, r9
   88972:	aa2a      	add	r2, sp, #168	; 0xa8
   88974:	f004 fdaa 	bl	8d4cc <__ssprint_r>
   88978:	2800      	cmp	r0, #0
   8897a:	f47f ada3 	bne.w	884c4 <_svfprintf_r+0x890>
   8897e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88982:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88986:	e5ba      	b.n	884fe <_svfprintf_r+0x8ca>
   88988:	4651      	mov	r1, sl
   8898a:	4648      	mov	r0, r9
   8898c:	aa2a      	add	r2, sp, #168	; 0xa8
   8898e:	f004 fd9d 	bl	8d4cc <__ssprint_r>
   88992:	2800      	cmp	r0, #0
   88994:	f47f ad96 	bne.w	884c4 <_svfprintf_r+0x890>
   88998:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8899c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   889a0:	e5ba      	b.n	88518 <_svfprintf_r+0x8e4>
   889a2:	9b07      	ldr	r3, [sp, #28]
   889a4:	07da      	lsls	r2, r3, #31
   889a6:	f57f aaf4 	bpl.w	87f92 <_svfprintf_r+0x35e>
   889aa:	e4d9      	b.n	88360 <_svfprintf_r+0x72c>
   889ac:	af56      	add	r7, sp, #344	; 0x158
   889ae:	e4aa      	b.n	88306 <_svfprintf_r+0x6d2>
   889b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   889b2:	465f      	mov	r7, fp
   889b4:	f853 1b04 	ldr.w	r1, [r3], #4
   889b8:	930e      	str	r3, [sp, #56]	; 0x38
   889ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   889bc:	17dd      	asrs	r5, r3, #31
   889be:	461a      	mov	r2, r3
   889c0:	462b      	mov	r3, r5
   889c2:	e9c1 2300 	strd	r2, r3, [r1]
   889c6:	f7ff bb03 	b.w	87fd0 <_svfprintf_r+0x39c>
   889ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   889cc:	2500      	movs	r5, #0
   889ce:	f853 4b04 	ldr.w	r4, [r3], #4
   889d2:	930e      	str	r3, [sp, #56]	; 0x38
   889d4:	f7ff ba3a 	b.w	87e4c <_svfprintf_r+0x218>
   889d8:	0008e684 	.word	0x0008e684
   889dc:	0008e694 	.word	0x0008e694
   889e0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   889e4:	460b      	mov	r3, r1
   889e6:	4602      	mov	r2, r0
   889e8:	f005 fca4 	bl	8e334 <__aeabi_dcmpun>
   889ec:	4601      	mov	r1, r0
   889ee:	2800      	cmp	r0, #0
   889f0:	f040 8643 	bne.w	8967a <_svfprintf_r+0x1a46>
   889f4:	2e61      	cmp	r6, #97	; 0x61
   889f6:	f000 8586 	beq.w	89506 <_svfprintf_r+0x18d2>
   889fa:	2e41      	cmp	r6, #65	; 0x41
   889fc:	f000 847a 	beq.w	892f4 <_svfprintf_r+0x16c0>
   88a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a02:	f026 0520 	bic.w	r5, r6, #32
   88a06:	1c5a      	adds	r2, r3, #1
   88a08:	9508      	str	r5, [sp, #32]
   88a0a:	f000 837d 	beq.w	89108 <_svfprintf_r+0x14d4>
   88a0e:	2d47      	cmp	r5, #71	; 0x47
   88a10:	f000 859e 	beq.w	89550 <_svfprintf_r+0x191c>
   88a14:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88a18:	9b07      	ldr	r3, [sp, #28]
   88a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   88a1e:	9312      	str	r3, [sp, #72]	; 0x48
   88a20:	460b      	mov	r3, r1
   88a22:	2b00      	cmp	r3, #0
   88a24:	f2c0 85ba 	blt.w	8959c <_svfprintf_r+0x1968>
   88a28:	2200      	movs	r2, #0
   88a2a:	930f      	str	r3, [sp, #60]	; 0x3c
   88a2c:	921e      	str	r2, [sp, #120]	; 0x78
   88a2e:	920d      	str	r2, [sp, #52]	; 0x34
   88a30:	900c      	str	r0, [sp, #48]	; 0x30
   88a32:	2d46      	cmp	r5, #70	; 0x46
   88a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88a36:	f000 8407 	beq.w	89248 <_svfprintf_r+0x1614>
   88a3a:	2d45      	cmp	r5, #69	; 0x45
   88a3c:	f04f 0002 	mov.w	r0, #2
   88a40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88a42:	f040 83e7 	bne.w	89214 <_svfprintf_r+0x15e0>
   88a46:	9909      	ldr	r1, [sp, #36]	; 0x24
   88a48:	9000      	str	r0, [sp, #0]
   88a4a:	1c4c      	adds	r4, r1, #1
   88a4c:	a928      	add	r1, sp, #160	; 0xa0
   88a4e:	a825      	add	r0, sp, #148	; 0x94
   88a50:	9104      	str	r1, [sp, #16]
   88a52:	a924      	add	r1, sp, #144	; 0x90
   88a54:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88a58:	9401      	str	r4, [sp, #4]
   88a5a:	4648      	mov	r0, r9
   88a5c:	f001 feb0 	bl	8a7c0 <_dtoa_r>
   88a60:	4607      	mov	r7, r0
   88a62:	4404      	add	r4, r0
   88a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a66:	9d07      	ldr	r5, [sp, #28]
   88a68:	9307      	str	r3, [sp, #28]
   88a6a:	2200      	movs	r2, #0
   88a6c:	2300      	movs	r3, #0
   88a6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88a70:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88a72:	f005 fc2d 	bl	8e2d0 <__aeabi_dcmpeq>
   88a76:	2800      	cmp	r0, #0
   88a78:	f000 8398 	beq.w	891ac <_svfprintf_r+0x1578>
   88a7c:	4623      	mov	r3, r4
   88a7e:	1bdb      	subs	r3, r3, r7
   88a80:	9313      	str	r3, [sp, #76]	; 0x4c
   88a82:	9b08      	ldr	r3, [sp, #32]
   88a84:	2b47      	cmp	r3, #71	; 0x47
   88a86:	f000 835e 	beq.w	89146 <_svfprintf_r+0x1512>
   88a8a:	9b08      	ldr	r3, [sp, #32]
   88a8c:	2b46      	cmp	r3, #70	; 0x46
   88a8e:	f000 840b 	beq.w	892a8 <_svfprintf_r+0x1674>
   88a92:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88a94:	9310      	str	r3, [sp, #64]	; 0x40
   88a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88a98:	9a08      	ldr	r2, [sp, #32]
   88a9a:	3b01      	subs	r3, #1
   88a9c:	2a41      	cmp	r2, #65	; 0x41
   88a9e:	9324      	str	r3, [sp, #144]	; 0x90
   88aa0:	f000 85ad 	beq.w	895fe <_svfprintf_r+0x19ca>
   88aa4:	2100      	movs	r1, #0
   88aa6:	b2f2      	uxtb	r2, r6
   88aa8:	2b00      	cmp	r3, #0
   88aaa:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   88aae:	bfb6      	itet	lt
   88ab0:	222d      	movlt	r2, #45	; 0x2d
   88ab2:	222b      	movge	r2, #43	; 0x2b
   88ab4:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   88ab6:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   88aba:	bfb8      	it	lt
   88abc:	f1c3 0301 	rsblt	r3, r3, #1
   88ac0:	2b09      	cmp	r3, #9
   88ac2:	f340 85a2 	ble.w	8960a <_svfprintf_r+0x19d6>
   88ac6:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   88aca:	4672      	mov	r2, lr
   88acc:	469c      	mov	ip, r3
   88ace:	4cbf      	ldr	r4, [pc, #764]	; (88dcc <_svfprintf_r+0x1198>)
   88ad0:	4660      	mov	r0, ip
   88ad2:	4611      	mov	r1, r2
   88ad4:	fb84 230c 	smull	r2, r3, r4, ip
   88ad8:	ea4f 72ec 	mov.w	r2, ip, asr #31
   88adc:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   88ae0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   88ae4:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   88ae8:	3330      	adds	r3, #48	; 0x30
   88aea:	2863      	cmp	r0, #99	; 0x63
   88aec:	4694      	mov	ip, r2
   88aee:	f801 3c01 	strb.w	r3, [r1, #-1]
   88af2:	f101 32ff 	add.w	r2, r1, #4294967295
   88af6:	dceb      	bgt.n	88ad0 <_svfprintf_r+0xe9c>
   88af8:	4663      	mov	r3, ip
   88afa:	3330      	adds	r3, #48	; 0x30
   88afc:	b2d8      	uxtb	r0, r3
   88afe:	1e8b      	subs	r3, r1, #2
   88b00:	459e      	cmp	lr, r3
   88b02:	f802 0c01 	strb.w	r0, [r2, #-1]
   88b06:	f240 862c 	bls.w	89762 <_svfprintf_r+0x1b2e>
   88b0a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   88b0e:	e001      	b.n	88b14 <_svfprintf_r+0xee0>
   88b10:	f812 0b01 	ldrb.w	r0, [r2], #1
   88b14:	4596      	cmp	lr, r2
   88b16:	f803 0b01 	strb.w	r0, [r3], #1
   88b1a:	d1f9      	bne.n	88b10 <_svfprintf_r+0xedc>
   88b1c:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   88b20:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88b24:	1a5b      	subs	r3, r3, r1
   88b26:	4413      	add	r3, r2
   88b28:	aa26      	add	r2, sp, #152	; 0x98
   88b2a:	1a9b      	subs	r3, r3, r2
   88b2c:	931b      	str	r3, [sp, #108]	; 0x6c
   88b2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88b30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88b32:	2b01      	cmp	r3, #1
   88b34:	441a      	add	r2, r3
   88b36:	920c      	str	r2, [sp, #48]	; 0x30
   88b38:	f340 85cc 	ble.w	896d4 <_svfprintf_r+0x1aa0>
   88b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88b3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88b40:	4413      	add	r3, r2
   88b42:	930c      	str	r3, [sp, #48]	; 0x30
   88b44:	2300      	movs	r3, #0
   88b46:	9312      	str	r3, [sp, #72]	; 0x48
   88b48:	9316      	str	r3, [sp, #88]	; 0x58
   88b4a:	9310      	str	r3, [sp, #64]	; 0x40
   88b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88b4e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   88b52:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   88b56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88b5a:	9207      	str	r2, [sp, #28]
   88b5c:	9308      	str	r3, [sp, #32]
   88b5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88b60:	2b00      	cmp	r3, #0
   88b62:	f040 8317 	bne.w	89194 <_svfprintf_r+0x1560>
   88b66:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88b6a:	9309      	str	r3, [sp, #36]	; 0x24
   88b6c:	f7ff ba86 	b.w	8807c <_svfprintf_r+0x448>
   88b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88b72:	2301      	movs	r3, #1
   88b74:	f852 4b04 	ldr.w	r4, [r2], #4
   88b78:	2500      	movs	r5, #0
   88b7a:	920e      	str	r2, [sp, #56]	; 0x38
   88b7c:	f7ff b96b 	b.w	87e56 <_svfprintf_r+0x222>
   88b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88b82:	f853 4b04 	ldr.w	r4, [r3], #4
   88b86:	17e5      	asrs	r5, r4, #31
   88b88:	930e      	str	r3, [sp, #56]	; 0x38
   88b8a:	4622      	mov	r2, r4
   88b8c:	462b      	mov	r3, r5
   88b8e:	f7ff b933 	b.w	87df8 <_svfprintf_r+0x1c4>
   88b92:	9b07      	ldr	r3, [sp, #28]
   88b94:	9308      	str	r3, [sp, #32]
   88b96:	f7ff bae0 	b.w	8815a <_svfprintf_r+0x526>
   88b9a:	4b8d      	ldr	r3, [pc, #564]	; (88dd0 <_svfprintf_r+0x119c>)
   88b9c:	9319      	str	r3, [sp, #100]	; 0x64
   88b9e:	9b07      	ldr	r3, [sp, #28]
   88ba0:	0699      	lsls	r1, r3, #26
   88ba2:	f140 80fe 	bpl.w	88da2 <_svfprintf_r+0x116e>
   88ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88ba8:	3307      	adds	r3, #7
   88baa:	f023 0307 	bic.w	r3, r3, #7
   88bae:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88bb2:	930e      	str	r3, [sp, #56]	; 0x38
   88bb4:	9a07      	ldr	r2, [sp, #28]
   88bb6:	07d7      	lsls	r7, r2, #31
   88bb8:	d50a      	bpl.n	88bd0 <_svfprintf_r+0xf9c>
   88bba:	ea54 0305 	orrs.w	r3, r4, r5
   88bbe:	d007      	beq.n	88bd0 <_svfprintf_r+0xf9c>
   88bc0:	2330      	movs	r3, #48	; 0x30
   88bc2:	f042 0202 	orr.w	r2, r2, #2
   88bc6:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   88bca:	9207      	str	r2, [sp, #28]
   88bcc:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88bd0:	9a07      	ldr	r2, [sp, #28]
   88bd2:	2302      	movs	r3, #2
   88bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   88bd8:	9208      	str	r2, [sp, #32]
   88bda:	f7ff b93c 	b.w	87e56 <_svfprintf_r+0x222>
   88bde:	4b7d      	ldr	r3, [pc, #500]	; (88dd4 <_svfprintf_r+0x11a0>)
   88be0:	9319      	str	r3, [sp, #100]	; 0x64
   88be2:	e7dc      	b.n	88b9e <_svfprintf_r+0xf6a>
   88be4:	f043 0320 	orr.w	r3, r3, #32
   88be8:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88bec:	9307      	str	r3, [sp, #28]
   88bee:	f10b 0b01 	add.w	fp, fp, #1
   88bf2:	f7ff b86a 	b.w	87cca <_svfprintf_r+0x96>
   88bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   88bfa:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88bfe:	9307      	str	r3, [sp, #28]
   88c00:	f10b 0b01 	add.w	fp, fp, #1
   88c04:	f7ff b861 	b.w	87cca <_svfprintf_r+0x96>
   88c08:	4651      	mov	r1, sl
   88c0a:	4648      	mov	r0, r9
   88c0c:	aa2a      	add	r2, sp, #168	; 0xa8
   88c0e:	f004 fc5d 	bl	8d4cc <__ssprint_r>
   88c12:	2800      	cmp	r0, #0
   88c14:	f47f ac56 	bne.w	884c4 <_svfprintf_r+0x890>
   88c18:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88c1a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88c1e:	f7ff bbad 	b.w	8837c <_svfprintf_r+0x748>
   88c22:	2140      	movs	r1, #64	; 0x40
   88c24:	4648      	mov	r0, r9
   88c26:	f003 fa79 	bl	8c11c <_malloc_r>
   88c2a:	f8cb 0000 	str.w	r0, [fp]
   88c2e:	f8cb 0010 	str.w	r0, [fp, #16]
   88c32:	2800      	cmp	r0, #0
   88c34:	f000 858d 	beq.w	89752 <_svfprintf_r+0x1b1e>
   88c38:	2340      	movs	r3, #64	; 0x40
   88c3a:	f8cb 3014 	str.w	r3, [fp, #20]
   88c3e:	f7ff b811 	b.w	87c64 <_svfprintf_r+0x30>
   88c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88c44:	463a      	mov	r2, r7
   88c46:	2b06      	cmp	r3, #6
   88c48:	bf28      	it	cs
   88c4a:	2306      	movcs	r3, #6
   88c4c:	9709      	str	r7, [sp, #36]	; 0x24
   88c4e:	9712      	str	r7, [sp, #72]	; 0x48
   88c50:	9716      	str	r7, [sp, #88]	; 0x58
   88c52:	9710      	str	r7, [sp, #64]	; 0x40
   88c54:	970d      	str	r7, [sp, #52]	; 0x34
   88c56:	9308      	str	r3, [sp, #32]
   88c58:	4f5f      	ldr	r7, [pc, #380]	; (88dd8 <_svfprintf_r+0x11a4>)
   88c5a:	940e      	str	r4, [sp, #56]	; 0x38
   88c5c:	930c      	str	r3, [sp, #48]	; 0x30
   88c5e:	f7ff ba0d 	b.w	8807c <_svfprintf_r+0x448>
   88c62:	2b10      	cmp	r3, #16
   88c64:	f340 8558 	ble.w	89718 <_svfprintf_r+0x1ae4>
   88c68:	4651      	mov	r1, sl
   88c6a:	4a5c      	ldr	r2, [pc, #368]	; (88ddc <_svfprintf_r+0x11a8>)
   88c6c:	46ca      	mov	sl, r9
   88c6e:	9709      	str	r7, [sp, #36]	; 0x24
   88c70:	2610      	movs	r6, #16
   88c72:	4617      	mov	r7, r2
   88c74:	4689      	mov	r9, r1
   88c76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88c78:	920f      	str	r2, [sp, #60]	; 0x3c
   88c7a:	e005      	b.n	88c88 <_svfprintf_r+0x1054>
   88c7c:	f108 0808 	add.w	r8, r8, #8
   88c80:	3d10      	subs	r5, #16
   88c82:	2d10      	cmp	r5, #16
   88c84:	f340 81fa 	ble.w	8907c <_svfprintf_r+0x1448>
   88c88:	3301      	adds	r3, #1
   88c8a:	3410      	adds	r4, #16
   88c8c:	2b07      	cmp	r3, #7
   88c8e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88c92:	e9c8 7600 	strd	r7, r6, [r8]
   88c96:	ddf1      	ble.n	88c7c <_svfprintf_r+0x1048>
   88c98:	4649      	mov	r1, r9
   88c9a:	4650      	mov	r0, sl
   88c9c:	aa2a      	add	r2, sp, #168	; 0xa8
   88c9e:	f004 fc15 	bl	8d4cc <__ssprint_r>
   88ca2:	2800      	cmp	r0, #0
   88ca4:	f040 83fd 	bne.w	894a2 <_svfprintf_r+0x186e>
   88ca8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88cac:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88cb0:	e7e6      	b.n	88c80 <_svfprintf_r+0x104c>
   88cb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88cb4:	4642      	mov	r2, r8
   88cb6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88cba:	18fb      	adds	r3, r7, r3
   88cbc:	9309      	str	r3, [sp, #36]	; 0x24
   88cbe:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   88cc2:	970f      	str	r7, [sp, #60]	; 0x3c
   88cc4:	4620      	mov	r0, r4
   88cc6:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   88cca:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   88ccc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88cce:	f1b8 0f00 	cmp.w	r8, #0
   88cd2:	d02d      	beq.n	88d30 <_svfprintf_r+0x10fc>
   88cd4:	bb7b      	cbnz	r3, 88d36 <_svfprintf_r+0x1102>
   88cd6:	3f01      	subs	r7, #1
   88cd8:	f108 38ff 	add.w	r8, r8, #4294967295
   88cdc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88cde:	991c      	ldr	r1, [sp, #112]	; 0x70
   88ce0:	3301      	adds	r3, #1
   88ce2:	4458      	add	r0, fp
   88ce4:	2b07      	cmp	r3, #7
   88ce6:	e9c2 1b00 	strd	r1, fp, [r2]
   88cea:	902c      	str	r0, [sp, #176]	; 0xb0
   88cec:	932b      	str	r3, [sp, #172]	; 0xac
   88cee:	dc62      	bgt.n	88db6 <_svfprintf_r+0x1182>
   88cf0:	3208      	adds	r2, #8
   88cf2:	9909      	ldr	r1, [sp, #36]	; 0x24
   88cf4:	783b      	ldrb	r3, [r7, #0]
   88cf6:	1b8d      	subs	r5, r1, r6
   88cf8:	429d      	cmp	r5, r3
   88cfa:	bfa8      	it	ge
   88cfc:	461d      	movge	r5, r3
   88cfe:	2d00      	cmp	r5, #0
   88d00:	dd0b      	ble.n	88d1a <_svfprintf_r+0x10e6>
   88d02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88d04:	4428      	add	r0, r5
   88d06:	3301      	adds	r3, #1
   88d08:	2b07      	cmp	r3, #7
   88d0a:	e9c2 6500 	strd	r6, r5, [r2]
   88d0e:	902c      	str	r0, [sp, #176]	; 0xb0
   88d10:	932b      	str	r3, [sp, #172]	; 0xac
   88d12:	f300 8111 	bgt.w	88f38 <_svfprintf_r+0x1304>
   88d16:	783b      	ldrb	r3, [r7, #0]
   88d18:	3208      	adds	r2, #8
   88d1a:	2d00      	cmp	r5, #0
   88d1c:	bfb4      	ite	lt
   88d1e:	461d      	movlt	r5, r3
   88d20:	1b5d      	subge	r5, r3, r5
   88d22:	2d00      	cmp	r5, #0
   88d24:	dc0b      	bgt.n	88d3e <_svfprintf_r+0x110a>
   88d26:	441e      	add	r6, r3
   88d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88d2a:	f1b8 0f00 	cmp.w	r8, #0
   88d2e:	d1d1      	bne.n	88cd4 <_svfprintf_r+0x10a0>
   88d30:	2b00      	cmp	r3, #0
   88d32:	f000 81f9 	beq.w	89128 <_svfprintf_r+0x14f4>
   88d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88d38:	3b01      	subs	r3, #1
   88d3a:	9312      	str	r3, [sp, #72]	; 0x48
   88d3c:	e7ce      	b.n	88cdc <_svfprintf_r+0x10a8>
   88d3e:	2d10      	cmp	r5, #16
   88d40:	f340 84c5 	ble.w	896ce <_svfprintf_r+0x1a9a>
   88d44:	992b      	ldr	r1, [sp, #172]	; 0xac
   88d46:	2410      	movs	r4, #16
   88d48:	460b      	mov	r3, r1
   88d4a:	e004      	b.n	88d56 <_svfprintf_r+0x1122>
   88d4c:	3d10      	subs	r5, #16
   88d4e:	2d10      	cmp	r5, #16
   88d50:	f102 0208 	add.w	r2, r2, #8
   88d54:	dd16      	ble.n	88d84 <_svfprintf_r+0x1150>
   88d56:	3301      	adds	r3, #1
   88d58:	4920      	ldr	r1, [pc, #128]	; (88ddc <_svfprintf_r+0x11a8>)
   88d5a:	3010      	adds	r0, #16
   88d5c:	2b07      	cmp	r3, #7
   88d5e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   88d62:	e9c2 1400 	strd	r1, r4, [r2]
   88d66:	ddf1      	ble.n	88d4c <_svfprintf_r+0x1118>
   88d68:	4651      	mov	r1, sl
   88d6a:	4648      	mov	r0, r9
   88d6c:	aa2a      	add	r2, sp, #168	; 0xa8
   88d6e:	f004 fbad 	bl	8d4cc <__ssprint_r>
   88d72:	2800      	cmp	r0, #0
   88d74:	f47f aba6 	bne.w	884c4 <_svfprintf_r+0x890>
   88d78:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   88d7c:	3d10      	subs	r5, #16
   88d7e:	2d10      	cmp	r5, #16
   88d80:	aa2d      	add	r2, sp, #180	; 0xb4
   88d82:	dce8      	bgt.n	88d56 <_svfprintf_r+0x1122>
   88d84:	4619      	mov	r1, r3
   88d86:	1c4b      	adds	r3, r1, #1
   88d88:	4914      	ldr	r1, [pc, #80]	; (88ddc <_svfprintf_r+0x11a8>)
   88d8a:	4428      	add	r0, r5
   88d8c:	2b07      	cmp	r3, #7
   88d8e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   88d92:	e9c2 1500 	strd	r1, r5, [r2]
   88d96:	f300 8215 	bgt.w	891c4 <_svfprintf_r+0x1590>
   88d9a:	783b      	ldrb	r3, [r7, #0]
   88d9c:	3208      	adds	r2, #8
   88d9e:	441e      	add	r6, r3
   88da0:	e7c2      	b.n	88d28 <_svfprintf_r+0x10f4>
   88da2:	9b07      	ldr	r3, [sp, #28]
   88da4:	06da      	lsls	r2, r3, #27
   88da6:	f140 8084 	bpl.w	88eb2 <_svfprintf_r+0x127e>
   88daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88dac:	2500      	movs	r5, #0
   88dae:	f853 4b04 	ldr.w	r4, [r3], #4
   88db2:	930e      	str	r3, [sp, #56]	; 0x38
   88db4:	e6fe      	b.n	88bb4 <_svfprintf_r+0xf80>
   88db6:	4651      	mov	r1, sl
   88db8:	4648      	mov	r0, r9
   88dba:	aa2a      	add	r2, sp, #168	; 0xa8
   88dbc:	f004 fb86 	bl	8d4cc <__ssprint_r>
   88dc0:	2800      	cmp	r0, #0
   88dc2:	f47f ab7f 	bne.w	884c4 <_svfprintf_r+0x890>
   88dc6:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88dc8:	aa2d      	add	r2, sp, #180	; 0xb4
   88dca:	e792      	b.n	88cf2 <_svfprintf_r+0x10be>
   88dcc:	66666667 	.word	0x66666667
   88dd0:	0008e650 	.word	0x0008e650
   88dd4:	0008e664 	.word	0x0008e664
   88dd8:	0008e678 	.word	0x0008e678
   88ddc:	0008e694 	.word	0x0008e694
   88de0:	2200      	movs	r2, #0
   88de2:	9b08      	ldr	r3, [sp, #32]
   88de4:	f8cd b01c 	str.w	fp, [sp, #28]
   88de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   88dec:	960c      	str	r6, [sp, #48]	; 0x30
   88dee:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   88df2:	4693      	mov	fp, r2
   88df4:	46ca      	mov	sl, r9
   88df6:	461e      	mov	r6, r3
   88df8:	46c1      	mov	r9, r8
   88dfa:	af56      	add	r7, sp, #344	; 0x158
   88dfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   88e00:	e00b      	b.n	88e1a <_svfprintf_r+0x11e6>
   88e02:	220a      	movs	r2, #10
   88e04:	2300      	movs	r3, #0
   88e06:	4620      	mov	r0, r4
   88e08:	4629      	mov	r1, r5
   88e0a:	f7fe fb9f 	bl	8754c <__aeabi_uldivmod>
   88e0e:	2d00      	cmp	r5, #0
   88e10:	bf08      	it	eq
   88e12:	2c0a      	cmpeq	r4, #10
   88e14:	d31b      	bcc.n	88e4e <_svfprintf_r+0x121a>
   88e16:	4604      	mov	r4, r0
   88e18:	460d      	mov	r5, r1
   88e1a:	220a      	movs	r2, #10
   88e1c:	2300      	movs	r3, #0
   88e1e:	4620      	mov	r0, r4
   88e20:	4629      	mov	r1, r5
   88e22:	f7fe fb93 	bl	8754c <__aeabi_uldivmod>
   88e26:	3230      	adds	r2, #48	; 0x30
   88e28:	f807 2c01 	strb.w	r2, [r7, #-1]
   88e2c:	f10b 0b01 	add.w	fp, fp, #1
   88e30:	3f01      	subs	r7, #1
   88e32:	2e00      	cmp	r6, #0
   88e34:	d0e5      	beq.n	88e02 <_svfprintf_r+0x11ce>
   88e36:	f898 3000 	ldrb.w	r3, [r8]
   88e3a:	459b      	cmp	fp, r3
   88e3c:	d1e1      	bne.n	88e02 <_svfprintf_r+0x11ce>
   88e3e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   88e42:	d0de      	beq.n	88e02 <_svfprintf_r+0x11ce>
   88e44:	2d00      	cmp	r5, #0
   88e46:	bf08      	it	eq
   88e48:	2c0a      	cmpeq	r4, #10
   88e4a:	f080 8128 	bcs.w	8909e <_svfprintf_r+0x146a>
   88e4e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   88e52:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   88e56:	46c8      	mov	r8, r9
   88e58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   88e5a:	46d1      	mov	r9, sl
   88e5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88e60:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   88e64:	f7ff bb9f 	b.w	885a6 <_svfprintf_r+0x972>
   88e68:	4651      	mov	r1, sl
   88e6a:	4648      	mov	r0, r9
   88e6c:	aa2a      	add	r2, sp, #168	; 0xa8
   88e6e:	931e      	str	r3, [sp, #120]	; 0x78
   88e70:	f004 fb2c 	bl	8d4cc <__ssprint_r>
   88e74:	2800      	cmp	r0, #0
   88e76:	f47f ab25 	bne.w	884c4 <_svfprintf_r+0x890>
   88e7a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88e7e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88e80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88e82:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88e86:	f7ff b84a 	b.w	87f1e <_svfprintf_r+0x2ea>
   88e8a:	2001      	movs	r0, #1
   88e8c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88e8e:	49c5      	ldr	r1, [pc, #788]	; (891a4 <_svfprintf_r+0x1570>)
   88e90:	4403      	add	r3, r0
   88e92:	4404      	add	r4, r0
   88e94:	2b07      	cmp	r3, #7
   88e96:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88e9a:	e9c8 1000 	strd	r1, r0, [r8]
   88e9e:	f73f abdf 	bgt.w	88660 <_svfprintf_r+0xa2c>
   88ea2:	f108 0808 	add.w	r8, r8, #8
   88ea6:	f7ff bbe7 	b.w	88678 <_svfprintf_r+0xa44>
   88eaa:	46d1      	mov	r9, sl
   88eac:	46b3      	mov	fp, r6
   88eae:	f7ff bb0a 	b.w	884c6 <_svfprintf_r+0x892>
   88eb2:	9b07      	ldr	r3, [sp, #28]
   88eb4:	065b      	lsls	r3, r3, #25
   88eb6:	f140 80cb 	bpl.w	89050 <_svfprintf_r+0x141c>
   88eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88ebc:	2500      	movs	r5, #0
   88ebe:	f853 4b04 	ldr.w	r4, [r3], #4
   88ec2:	930e      	str	r3, [sp, #56]	; 0x38
   88ec4:	b2a4      	uxth	r4, r4
   88ec6:	e675      	b.n	88bb4 <_svfprintf_r+0xf80>
   88ec8:	4651      	mov	r1, sl
   88eca:	4648      	mov	r0, r9
   88ecc:	aa2a      	add	r2, sp, #168	; 0xa8
   88ece:	f004 fafd 	bl	8d4cc <__ssprint_r>
   88ed2:	2800      	cmp	r0, #0
   88ed4:	f47f aaf6 	bne.w	884c4 <_svfprintf_r+0x890>
   88ed8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88eda:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88ede:	f7ff ba3a 	b.w	88356 <_svfprintf_r+0x722>
   88ee2:	46d1      	mov	r9, sl
   88ee4:	46da      	mov	sl, fp
   88ee6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   88eea:	3501      	adds	r5, #1
   88eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88eee:	4434      	add	r4, r6
   88ef0:	2d07      	cmp	r5, #7
   88ef2:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88ef6:	e9c8 3600 	strd	r3, r6, [r8]
   88efa:	f77f ab24 	ble.w	88546 <_svfprintf_r+0x912>
   88efe:	4651      	mov	r1, sl
   88f00:	4648      	mov	r0, r9
   88f02:	aa2a      	add	r2, sp, #168	; 0xa8
   88f04:	f004 fae2 	bl	8d4cc <__ssprint_r>
   88f08:	2800      	cmp	r0, #0
   88f0a:	f47f aadb 	bne.w	884c4 <_svfprintf_r+0x890>
   88f0e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88f12:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f16:	f7ff bb18 	b.w	8854a <_svfprintf_r+0x916>
   88f1a:	4aa3      	ldr	r2, [pc, #652]	; (891a8 <_svfprintf_r+0x1574>)
   88f1c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88f1e:	920f      	str	r2, [sp, #60]	; 0x3c
   88f20:	3301      	adds	r3, #1
   88f22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88f24:	442c      	add	r4, r5
   88f26:	2b07      	cmp	r3, #7
   88f28:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88f2c:	e9c8 2500 	strd	r2, r5, [r8]
   88f30:	f77f a82d 	ble.w	87f8e <_svfprintf_r+0x35a>
   88f34:	f7ff bbc2 	b.w	886bc <_svfprintf_r+0xa88>
   88f38:	4651      	mov	r1, sl
   88f3a:	4648      	mov	r0, r9
   88f3c:	aa2a      	add	r2, sp, #168	; 0xa8
   88f3e:	f004 fac5 	bl	8d4cc <__ssprint_r>
   88f42:	2800      	cmp	r0, #0
   88f44:	f47f aabe 	bne.w	884c4 <_svfprintf_r+0x890>
   88f48:	783b      	ldrb	r3, [r7, #0]
   88f4a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88f4c:	aa2d      	add	r2, sp, #180	; 0xb4
   88f4e:	e6e4      	b.n	88d1a <_svfprintf_r+0x10e6>
   88f50:	4651      	mov	r1, sl
   88f52:	4648      	mov	r0, r9
   88f54:	aa2a      	add	r2, sp, #168	; 0xa8
   88f56:	f004 fab9 	bl	8d4cc <__ssprint_r>
   88f5a:	2800      	cmp	r0, #0
   88f5c:	f47f aab2 	bne.w	884c4 <_svfprintf_r+0x890>
   88f60:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88f62:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f66:	f7fe bffd 	b.w	87f64 <_svfprintf_r+0x330>
   88f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
   88f6e:	f853 2b04 	ldr.w	r2, [r3], #4
   88f72:	465f      	mov	r7, fp
   88f74:	6011      	str	r1, [r2, #0]
   88f76:	930e      	str	r3, [sp, #56]	; 0x38
   88f78:	f7ff b82a 	b.w	87fd0 <_svfprintf_r+0x39c>
   88f7c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88f7e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88f80:	3301      	adds	r3, #1
   88f82:	9818      	ldr	r0, [sp, #96]	; 0x60
   88f84:	440c      	add	r4, r1
   88f86:	2b07      	cmp	r3, #7
   88f88:	e9c8 0100 	strd	r0, r1, [r8]
   88f8c:	942c      	str	r4, [sp, #176]	; 0xb0
   88f8e:	932b      	str	r3, [sp, #172]	; 0xac
   88f90:	f300 80ac 	bgt.w	890ec <_svfprintf_r+0x14b8>
   88f94:	f108 0808 	add.w	r8, r8, #8
   88f98:	2a00      	cmp	r2, #0
   88f9a:	f6bf ab85 	bge.w	886a8 <_svfprintf_r+0xa74>
   88f9e:	4255      	negs	r5, r2
   88fa0:	3210      	adds	r2, #16
   88fa2:	f280 83d3 	bge.w	8974c <_svfprintf_r+0x1b18>
   88fa6:	4651      	mov	r1, sl
   88fa8:	4a7f      	ldr	r2, [pc, #508]	; (891a8 <_svfprintf_r+0x1574>)
   88faa:	46ca      	mov	sl, r9
   88fac:	9709      	str	r7, [sp, #36]	; 0x24
   88fae:	2610      	movs	r6, #16
   88fb0:	4617      	mov	r7, r2
   88fb2:	4689      	mov	r9, r1
   88fb4:	920f      	str	r2, [sp, #60]	; 0x3c
   88fb6:	e005      	b.n	88fc4 <_svfprintf_r+0x1390>
   88fb8:	f108 0808 	add.w	r8, r8, #8
   88fbc:	3d10      	subs	r5, #16
   88fbe:	2d10      	cmp	r5, #16
   88fc0:	f340 82aa 	ble.w	89518 <_svfprintf_r+0x18e4>
   88fc4:	3301      	adds	r3, #1
   88fc6:	3410      	adds	r4, #16
   88fc8:	2b07      	cmp	r3, #7
   88fca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88fce:	e9c8 7600 	strd	r7, r6, [r8]
   88fd2:	ddf1      	ble.n	88fb8 <_svfprintf_r+0x1384>
   88fd4:	4649      	mov	r1, r9
   88fd6:	4650      	mov	r0, sl
   88fd8:	aa2a      	add	r2, sp, #168	; 0xa8
   88fda:	f004 fa77 	bl	8d4cc <__ssprint_r>
   88fde:	2800      	cmp	r0, #0
   88fe0:	f040 825f 	bne.w	894a2 <_svfprintf_r+0x186e>
   88fe4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88fe8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88fec:	e7e6      	b.n	88fbc <_svfprintf_r+0x1388>
   88fee:	4638      	mov	r0, r7
   88ff0:	f004 fa0a 	bl	8d408 <strlen>
   88ff4:	462b      	mov	r3, r5
   88ff6:	4602      	mov	r2, r0
   88ff8:	9509      	str	r5, [sp, #36]	; 0x24
   88ffa:	f7ff b894 	b.w	88126 <_svfprintf_r+0x4f2>
   88ffe:	9b07      	ldr	r3, [sp, #28]
   89000:	2500      	movs	r5, #0
   89002:	f413 7f00 	tst.w	r3, #512	; 0x200
   89006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89008:	f853 4b04 	ldr.w	r4, [r3], #4
   8900c:	930e      	str	r3, [sp, #56]	; 0x38
   8900e:	bf18      	it	ne
   89010:	b2e4      	uxtbne	r4, r4
   89012:	f7fe bf1b 	b.w	87e4c <_svfprintf_r+0x218>
   89016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   89018:	9b08      	ldr	r3, [sp, #32]
   8901a:	f852 4b04 	ldr.w	r4, [r2], #4
   8901e:	f413 7f00 	tst.w	r3, #512	; 0x200
   89022:	f04f 0500 	mov.w	r5, #0
   89026:	f04f 0301 	mov.w	r3, #1
   8902a:	920e      	str	r2, [sp, #56]	; 0x38
   8902c:	bf18      	it	ne
   8902e:	b2e4      	uxtbne	r4, r4
   89030:	f7fe bf11 	b.w	87e56 <_svfprintf_r+0x222>
   89034:	9b07      	ldr	r3, [sp, #28]
   89036:	f413 7f00 	tst.w	r3, #512	; 0x200
   8903a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8903c:	f853 4b04 	ldr.w	r4, [r3], #4
   89040:	bf18      	it	ne
   89042:	b264      	sxtbne	r4, r4
   89044:	17e5      	asrs	r5, r4, #31
   89046:	930e      	str	r3, [sp, #56]	; 0x38
   89048:	4622      	mov	r2, r4
   8904a:	462b      	mov	r3, r5
   8904c:	f7fe bed4 	b.w	87df8 <_svfprintf_r+0x1c4>
   89050:	9b07      	ldr	r3, [sp, #28]
   89052:	2500      	movs	r5, #0
   89054:	f413 7f00 	tst.w	r3, #512	; 0x200
   89058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8905a:	f853 4b04 	ldr.w	r4, [r3], #4
   8905e:	930e      	str	r3, [sp, #56]	; 0x38
   89060:	bf18      	it	ne
   89062:	b2e4      	uxtbne	r4, r4
   89064:	e5a6      	b.n	88bb4 <_svfprintf_r+0xf80>
   89066:	4b50      	ldr	r3, [pc, #320]	; (891a8 <_svfprintf_r+0x1574>)
   89068:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8906a:	930f      	str	r3, [sp, #60]	; 0x3c
   8906c:	f7ff ba15 	b.w	8849a <_svfprintf_r+0x866>
   89070:	232d      	movs	r3, #45	; 0x2d
   89072:	461a      	mov	r2, r3
   89074:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   89078:	f7fe bfee 	b.w	88058 <_svfprintf_r+0x424>
   8907c:	464a      	mov	r2, r9
   8907e:	46d1      	mov	r9, sl
   89080:	4692      	mov	sl, r2
   89082:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89084:	3301      	adds	r3, #1
   89086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89088:	442c      	add	r4, r5
   8908a:	2b07      	cmp	r3, #7
   8908c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   89090:	e9c8 2500 	strd	r2, r5, [r8]
   89094:	dc3b      	bgt.n	8910e <_svfprintf_r+0x14da>
   89096:	f108 0808 	add.w	r8, r8, #8
   8909a:	f7ff bb8c 	b.w	887b6 <_svfprintf_r+0xb82>
   8909e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   890a0:	991c      	ldr	r1, [sp, #112]	; 0x70
   890a2:	1aff      	subs	r7, r7, r3
   890a4:	461a      	mov	r2, r3
   890a6:	4638      	mov	r0, r7
   890a8:	f004 f9dc 	bl	8d464 <strncpy>
   890ac:	f898 3001 	ldrb.w	r3, [r8, #1]
   890b0:	b10b      	cbz	r3, 890b6 <_svfprintf_r+0x1482>
   890b2:	f108 0801 	add.w	r8, r8, #1
   890b6:	220a      	movs	r2, #10
   890b8:	2300      	movs	r3, #0
   890ba:	4620      	mov	r0, r4
   890bc:	4629      	mov	r1, r5
   890be:	f7fe fa45 	bl	8754c <__aeabi_uldivmod>
   890c2:	f04f 0b00 	mov.w	fp, #0
   890c6:	e6a6      	b.n	88e16 <_svfprintf_r+0x11e2>
   890c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   890ca:	18bd      	adds	r5, r7, r2
   890cc:	1bad      	subs	r5, r5, r6
   890ce:	1ad3      	subs	r3, r2, r3
   890d0:	429d      	cmp	r5, r3
   890d2:	bfa8      	it	ge
   890d4:	461d      	movge	r5, r3
   890d6:	f7ff bba0 	b.w	8881a <_svfprintf_r+0xbe6>
   890da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   890dc:	990a      	ldr	r1, [sp, #40]	; 0x28
   890de:	f853 2b04 	ldr.w	r2, [r3], #4
   890e2:	465f      	mov	r7, fp
   890e4:	8011      	strh	r1, [r2, #0]
   890e6:	930e      	str	r3, [sp, #56]	; 0x38
   890e8:	f7fe bf72 	b.w	87fd0 <_svfprintf_r+0x39c>
   890ec:	4651      	mov	r1, sl
   890ee:	4648      	mov	r0, r9
   890f0:	aa2a      	add	r2, sp, #168	; 0xa8
   890f2:	f004 f9eb 	bl	8d4cc <__ssprint_r>
   890f6:	2800      	cmp	r0, #0
   890f8:	f47f a9e4 	bne.w	884c4 <_svfprintf_r+0x890>
   890fc:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89100:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89102:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89106:	e747      	b.n	88f98 <_svfprintf_r+0x1364>
   89108:	2306      	movs	r3, #6
   8910a:	9309      	str	r3, [sp, #36]	; 0x24
   8910c:	e482      	b.n	88a14 <_svfprintf_r+0xde0>
   8910e:	4651      	mov	r1, sl
   89110:	4648      	mov	r0, r9
   89112:	aa2a      	add	r2, sp, #168	; 0xa8
   89114:	f004 f9da 	bl	8d4cc <__ssprint_r>
   89118:	2800      	cmp	r0, #0
   8911a:	f47f a9d3 	bne.w	884c4 <_svfprintf_r+0x890>
   8911e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89120:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89124:	f7ff bb47 	b.w	887b6 <_svfprintf_r+0xb82>
   89128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8912a:	971a      	str	r7, [sp, #104]	; 0x68
   8912c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8912e:	4690      	mov	r8, r2
   89130:	18fb      	adds	r3, r7, r3
   89132:	429e      	cmp	r6, r3
   89134:	4632      	mov	r2, r6
   89136:	bf28      	it	cs
   89138:	461a      	movcs	r2, r3
   8913a:	4604      	mov	r4, r0
   8913c:	4616      	mov	r6, r2
   8913e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   89142:	f7ff bb3f 	b.w	887c4 <_svfprintf_r+0xb90>
   89146:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89148:	1cd8      	adds	r0, r3, #3
   8914a:	9310      	str	r3, [sp, #64]	; 0x40
   8914c:	db02      	blt.n	89154 <_svfprintf_r+0x1520>
   8914e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89150:	4293      	cmp	r3, r2
   89152:	dd04      	ble.n	8915e <_svfprintf_r+0x152a>
   89154:	3e02      	subs	r6, #2
   89156:	f026 0320 	bic.w	r3, r6, #32
   8915a:	9308      	str	r3, [sp, #32]
   8915c:	e49b      	b.n	88a96 <_svfprintf_r+0xe62>
   8915e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89160:	9913      	ldr	r1, [sp, #76]	; 0x4c
   89162:	428b      	cmp	r3, r1
   89164:	f2c0 817a 	blt.w	8945c <_svfprintf_r+0x1828>
   89168:	07ea      	lsls	r2, r5, #31
   8916a:	f140 8283 	bpl.w	89674 <_svfprintf_r+0x1a40>
   8916e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   89170:	4413      	add	r3, r2
   89172:	930c      	str	r3, [sp, #48]	; 0x30
   89174:	056e      	lsls	r6, r5, #21
   89176:	f140 8277 	bpl.w	89668 <_svfprintf_r+0x1a34>
   8917a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8917c:	2b00      	cmp	r3, #0
   8917e:	f300 8210 	bgt.w	895a2 <_svfprintf_r+0x196e>
   89182:	2667      	movs	r6, #103	; 0x67
   89184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8918a:	9308      	str	r3, [sp, #32]
   8918c:	2300      	movs	r3, #0
   8918e:	9312      	str	r3, [sp, #72]	; 0x48
   89190:	9316      	str	r3, [sp, #88]	; 0x58
   89192:	e4e4      	b.n	88b5e <_svfprintf_r+0xf2a>
   89194:	222d      	movs	r2, #45	; 0x2d
   89196:	2300      	movs	r3, #0
   89198:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   8919c:	9309      	str	r3, [sp, #36]	; 0x24
   8919e:	f7fe bf70 	b.w	88082 <_svfprintf_r+0x44e>
   891a2:	bf00      	nop
   891a4:	0008e680 	.word	0x0008e680
   891a8:	0008e694 	.word	0x0008e694
   891ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   891ae:	42a3      	cmp	r3, r4
   891b0:	f4bf ac65 	bcs.w	88a7e <_svfprintf_r+0xe4a>
   891b4:	2130      	movs	r1, #48	; 0x30
   891b6:	1c5a      	adds	r2, r3, #1
   891b8:	9228      	str	r2, [sp, #160]	; 0xa0
   891ba:	7019      	strb	r1, [r3, #0]
   891bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   891be:	429c      	cmp	r4, r3
   891c0:	d8f9      	bhi.n	891b6 <_svfprintf_r+0x1582>
   891c2:	e45c      	b.n	88a7e <_svfprintf_r+0xe4a>
   891c4:	4651      	mov	r1, sl
   891c6:	4648      	mov	r0, r9
   891c8:	aa2a      	add	r2, sp, #168	; 0xa8
   891ca:	f004 f97f 	bl	8d4cc <__ssprint_r>
   891ce:	2800      	cmp	r0, #0
   891d0:	f47f a978 	bne.w	884c4 <_svfprintf_r+0x890>
   891d4:	783b      	ldrb	r3, [r7, #0]
   891d6:	982c      	ldr	r0, [sp, #176]	; 0xb0
   891d8:	aa2d      	add	r2, sp, #180	; 0xb4
   891da:	441e      	add	r6, r3
   891dc:	e5a4      	b.n	88d28 <_svfprintf_r+0x10f4>
   891de:	4651      	mov	r1, sl
   891e0:	4648      	mov	r0, r9
   891e2:	aa2a      	add	r2, sp, #168	; 0xa8
   891e4:	f004 f972 	bl	8d4cc <__ssprint_r>
   891e8:	2800      	cmp	r0, #0
   891ea:	f47f a96b 	bne.w	884c4 <_svfprintf_r+0x890>
   891ee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   891f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   891f4:	f7ff bad7 	b.w	887a6 <_svfprintf_r+0xb72>
   891f8:	4651      	mov	r1, sl
   891fa:	4648      	mov	r0, r9
   891fc:	aa2a      	add	r2, sp, #168	; 0xa8
   891fe:	f004 f965 	bl	8d4cc <__ssprint_r>
   89202:	2800      	cmp	r0, #0
   89204:	f47f a95e 	bne.w	884c4 <_svfprintf_r+0x890>
   89208:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8920a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8920c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89210:	f7ff baee 	b.w	887f0 <_svfprintf_r+0xbbc>
   89214:	9c09      	ldr	r4, [sp, #36]	; 0x24
   89216:	a928      	add	r1, sp, #160	; 0xa0
   89218:	e9cd 0400 	strd	r0, r4, [sp]
   8921c:	9104      	str	r1, [sp, #16]
   8921e:	a825      	add	r0, sp, #148	; 0x94
   89220:	a924      	add	r1, sp, #144	; 0x90
   89222:	e9cd 1002 	strd	r1, r0, [sp, #8]
   89226:	4648      	mov	r0, r9
   89228:	f001 faca 	bl	8a7c0 <_dtoa_r>
   8922c:	2d47      	cmp	r5, #71	; 0x47
   8922e:	4607      	mov	r7, r0
   89230:	d119      	bne.n	89266 <_svfprintf_r+0x1632>
   89232:	9d07      	ldr	r5, [sp, #28]
   89234:	462b      	mov	r3, r5
   89236:	07db      	lsls	r3, r3, #31
   89238:	f100 812a 	bmi.w	89490 <_svfprintf_r+0x185c>
   8923c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8923e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89240:	9207      	str	r2, [sp, #28]
   89242:	2247      	movs	r2, #71	; 0x47
   89244:	9208      	str	r2, [sp, #32]
   89246:	e41a      	b.n	88a7e <_svfprintf_r+0xe4a>
   89248:	2003      	movs	r0, #3
   8924a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8924c:	a928      	add	r1, sp, #160	; 0xa0
   8924e:	e9cd 0400 	strd	r0, r4, [sp]
   89252:	9104      	str	r1, [sp, #16]
   89254:	a825      	add	r0, sp, #148	; 0x94
   89256:	a924      	add	r1, sp, #144	; 0x90
   89258:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8925c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8925e:	4648      	mov	r0, r9
   89260:	f001 faae 	bl	8a7c0 <_dtoa_r>
   89264:	4607      	mov	r7, r0
   89266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89268:	2d46      	cmp	r5, #70	; 0x46
   8926a:	eb07 0403 	add.w	r4, r7, r3
   8926e:	f47f abf9 	bne.w	88a64 <_svfprintf_r+0xe30>
   89272:	783b      	ldrb	r3, [r7, #0]
   89274:	2b30      	cmp	r3, #48	; 0x30
   89276:	f000 821c 	beq.w	896b2 <_svfprintf_r+0x1a7e>
   8927a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8927c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8927e:	9d07      	ldr	r5, [sp, #28]
   89280:	441c      	add	r4, r3
   89282:	9207      	str	r2, [sp, #28]
   89284:	f7ff bbf1 	b.w	88a6a <_svfprintf_r+0xe36>
   89288:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8928c:	f7ff b9c3 	b.w	88616 <_svfprintf_r+0x9e2>
   89290:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89292:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   89296:	9308      	str	r3, [sp, #32]
   89298:	930c      	str	r3, [sp, #48]	; 0x30
   8929a:	9009      	str	r0, [sp, #36]	; 0x24
   8929c:	940e      	str	r4, [sp, #56]	; 0x38
   8929e:	9012      	str	r0, [sp, #72]	; 0x48
   892a0:	9016      	str	r0, [sp, #88]	; 0x58
   892a2:	9010      	str	r0, [sp, #64]	; 0x40
   892a4:	f7fe beea 	b.w	8807c <_svfprintf_r+0x448>
   892a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   892aa:	2a00      	cmp	r2, #0
   892ac:	9210      	str	r2, [sp, #64]	; 0x40
   892ae:	f340 821b 	ble.w	896e8 <_svfprintf_r+0x1ab4>
   892b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   892b4:	f005 0301 	and.w	r3, r5, #1
   892b8:	430b      	orrs	r3, r1
   892ba:	f040 819a 	bne.w	895f2 <_svfprintf_r+0x19be>
   892be:	2666      	movs	r6, #102	; 0x66
   892c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   892c2:	930c      	str	r3, [sp, #48]	; 0x30
   892c4:	056a      	lsls	r2, r5, #21
   892c6:	f100 816d 	bmi.w	895a4 <_svfprintf_r+0x1970>
   892ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   892cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   892d0:	9308      	str	r3, [sp, #32]
   892d2:	e75b      	b.n	8918c <_svfprintf_r+0x1558>
   892d4:	4651      	mov	r1, sl
   892d6:	4648      	mov	r0, r9
   892d8:	aa2a      	add	r2, sp, #168	; 0xa8
   892da:	f004 f8f7 	bl	8d4cc <__ssprint_r>
   892de:	2800      	cmp	r0, #0
   892e0:	f47f a8f0 	bne.w	884c4 <_svfprintf_r+0x890>
   892e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   892e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   892e8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   892ea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   892ee:	1ad3      	subs	r3, r2, r3
   892f0:	f7ff ba93 	b.w	8881a <_svfprintf_r+0xbe6>
   892f4:	2330      	movs	r3, #48	; 0x30
   892f6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   892fa:	2358      	movs	r3, #88	; 0x58
   892fc:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   89300:	9b07      	ldr	r3, [sp, #28]
   89302:	f043 0402 	orr.w	r4, r3, #2
   89306:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89308:	2b63      	cmp	r3, #99	; 0x63
   8930a:	f300 80f2 	bgt.w	894f2 <_svfprintf_r+0x18be>
   8930e:	2300      	movs	r3, #0
   89310:	af3d      	add	r7, sp, #244	; 0xf4
   89312:	930d      	str	r3, [sp, #52]	; 0x34
   89314:	9b07      	ldr	r3, [sp, #28]
   89316:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   8931a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   8931e:	9312      	str	r3, [sp, #72]	; 0x48
   89320:	4613      	mov	r3, r2
   89322:	2b00      	cmp	r3, #0
   89324:	f026 0520 	bic.w	r5, r6, #32
   89328:	9407      	str	r4, [sp, #28]
   8932a:	f2c0 808d 	blt.w	89448 <_svfprintf_r+0x1814>
   8932e:	930f      	str	r3, [sp, #60]	; 0x3c
   89330:	2300      	movs	r3, #0
   89332:	9508      	str	r5, [sp, #32]
   89334:	910c      	str	r1, [sp, #48]	; 0x30
   89336:	931e      	str	r3, [sp, #120]	; 0x78
   89338:	2e61      	cmp	r6, #97	; 0x61
   8933a:	f000 817d 	beq.w	89638 <_svfprintf_r+0x1a04>
   8933e:	2e41      	cmp	r6, #65	; 0x41
   89340:	f47f ab77 	bne.w	88a32 <_svfprintf_r+0xdfe>
   89344:	aa24      	add	r2, sp, #144	; 0x90
   89346:	980c      	ldr	r0, [sp, #48]	; 0x30
   89348:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8934a:	f003 ffcd 	bl	8d2e8 <frexp>
   8934e:	2200      	movs	r2, #0
   89350:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   89354:	f004 fd54 	bl	8de00 <__aeabi_dmul>
   89358:	4604      	mov	r4, r0
   8935a:	460d      	mov	r5, r1
   8935c:	2200      	movs	r2, #0
   8935e:	2300      	movs	r3, #0
   89360:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   89364:	f004 ffb4 	bl	8e2d0 <__aeabi_dcmpeq>
   89368:	b108      	cbz	r0, 8936e <_svfprintf_r+0x173a>
   8936a:	2301      	movs	r3, #1
   8936c:	9324      	str	r3, [sp, #144]	; 0x90
   8936e:	4bae      	ldr	r3, [pc, #696]	; (89628 <_svfprintf_r+0x19f4>)
   89370:	930c      	str	r3, [sp, #48]	; 0x30
   89372:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89374:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   89378:	3b01      	subs	r3, #1
   8937a:	9613      	str	r6, [sp, #76]	; 0x4c
   8937c:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   89380:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   89384:	9721      	str	r7, [sp, #132]	; 0x84
   89386:	46ba      	mov	sl, r7
   89388:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   8938c:	4699      	mov	r9, r3
   8938e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   89392:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   89396:	e006      	b.n	893a6 <_svfprintf_r+0x1772>
   89398:	2200      	movs	r2, #0
   8939a:	2300      	movs	r3, #0
   8939c:	f004 ff98 	bl	8e2d0 <__aeabi_dcmpeq>
   893a0:	f109 39ff 	add.w	r9, r9, #4294967295
   893a4:	b9e8      	cbnz	r0, 893e2 <_svfprintf_r+0x17ae>
   893a6:	2200      	movs	r2, #0
   893a8:	4ba0      	ldr	r3, [pc, #640]	; (8962c <_svfprintf_r+0x19f8>)
   893aa:	4630      	mov	r0, r6
   893ac:	4639      	mov	r1, r7
   893ae:	f004 fd27 	bl	8de00 <__aeabi_dmul>
   893b2:	460d      	mov	r5, r1
   893b4:	4604      	mov	r4, r0
   893b6:	f004 ffd3 	bl	8e360 <__aeabi_d2iz>
   893ba:	4680      	mov	r8, r0
   893bc:	f004 fcb6 	bl	8dd2c <__aeabi_i2d>
   893c0:	460b      	mov	r3, r1
   893c2:	4602      	mov	r2, r0
   893c4:	4629      	mov	r1, r5
   893c6:	4620      	mov	r0, r4
   893c8:	f004 fb62 	bl	8da90 <__aeabi_dsub>
   893cc:	f81b 3008 	ldrb.w	r3, [fp, r8]
   893d0:	f1b9 3fff 	cmp.w	r9, #4294967295
   893d4:	4655      	mov	r5, sl
   893d6:	4606      	mov	r6, r0
   893d8:	460f      	mov	r7, r1
   893da:	464c      	mov	r4, r9
   893dc:	f80a 3b01 	strb.w	r3, [sl], #1
   893e0:	d1da      	bne.n	89398 <_svfprintf_r+0x1764>
   893e2:	4630      	mov	r0, r6
   893e4:	4639      	mov	r1, r7
   893e6:	2200      	movs	r2, #0
   893e8:	4b91      	ldr	r3, [pc, #580]	; (89630 <_svfprintf_r+0x19fc>)
   893ea:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   893ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   893f0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   893f4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   893f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   893fc:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   89400:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   89404:	9f21      	ldr	r7, [sp, #132]	; 0x84
   89406:	f004 ff8b 	bl	8e320 <__aeabi_dcmpgt>
   8940a:	2800      	cmp	r0, #0
   8940c:	d155      	bne.n	894ba <_svfprintf_r+0x1886>
   8940e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89412:	2200      	movs	r2, #0
   89414:	4b86      	ldr	r3, [pc, #536]	; (89630 <_svfprintf_r+0x19fc>)
   89416:	f004 ff5b 	bl	8e2d0 <__aeabi_dcmpeq>
   8941a:	b110      	cbz	r0, 89422 <_svfprintf_r+0x17ee>
   8941c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8941e:	07db      	lsls	r3, r3, #31
   89420:	d44b      	bmi.n	894ba <_svfprintf_r+0x1886>
   89422:	2c00      	cmp	r4, #0
   89424:	db08      	blt.n	89438 <_svfprintf_r+0x1804>
   89426:	2230      	movs	r2, #48	; 0x30
   89428:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8942a:	1c63      	adds	r3, r4, #1
   8942c:	440b      	add	r3, r1
   8942e:	f801 2b01 	strb.w	r2, [r1], #1
   89432:	428b      	cmp	r3, r1
   89434:	d1fb      	bne.n	8942e <_svfprintf_r+0x17fa>
   89436:	910f      	str	r1, [sp, #60]	; 0x3c
   89438:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8943a:	9d07      	ldr	r5, [sp, #28]
   8943c:	1bdb      	subs	r3, r3, r7
   8943e:	9313      	str	r3, [sp, #76]	; 0x4c
   89440:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89442:	9307      	str	r3, [sp, #28]
   89444:	f7ff bb1d 	b.w	88a82 <_svfprintf_r+0xe4e>
   89448:	9508      	str	r5, [sp, #32]
   8944a:	232d      	movs	r3, #45	; 0x2d
   8944c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   89450:	931e      	str	r3, [sp, #120]	; 0x78
   89452:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   89456:	910c      	str	r1, [sp, #48]	; 0x30
   89458:	930f      	str	r3, [sp, #60]	; 0x3c
   8945a:	e76d      	b.n	89338 <_svfprintf_r+0x1704>
   8945c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8945e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   89460:	189a      	adds	r2, r3, r2
   89462:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89464:	920c      	str	r2, [sp, #48]	; 0x30
   89466:	2b00      	cmp	r3, #0
   89468:	f340 811a 	ble.w	896a0 <_svfprintf_r+0x1a6c>
   8946c:	2667      	movs	r6, #103	; 0x67
   8946e:	e729      	b.n	892c4 <_svfprintf_r+0x1690>
   89470:	2300      	movs	r3, #0
   89472:	9309      	str	r3, [sp, #36]	; 0x24
   89474:	f7fe bc2b 	b.w	87cce <_svfprintf_r+0x9a>
   89478:	4648      	mov	r0, r9
   8947a:	4651      	mov	r1, sl
   8947c:	aa2a      	add	r2, sp, #168	; 0xa8
   8947e:	f004 f825 	bl	8d4cc <__ssprint_r>
   89482:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89486:	f7fe bdae 	b.w	87fe6 <_svfprintf_r+0x3b2>
   8948a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8948c:	f7ff b95f 	b.w	8874e <_svfprintf_r+0xb1a>
   89490:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89492:	9d07      	ldr	r5, [sp, #28]
   89494:	18fc      	adds	r4, r7, r3
   89496:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89498:	9307      	str	r3, [sp, #28]
   8949a:	2347      	movs	r3, #71	; 0x47
   8949c:	9308      	str	r3, [sp, #32]
   8949e:	f7ff bae4 	b.w	88a6a <_svfprintf_r+0xe36>
   894a2:	46cb      	mov	fp, r9
   894a4:	46d1      	mov	r9, sl
   894a6:	f7ff b80e 	b.w	884c6 <_svfprintf_r+0x892>
   894aa:	46d1      	mov	r9, sl
   894ac:	f7ff b80b 	b.w	884c6 <_svfprintf_r+0x892>
   894b0:	4b60      	ldr	r3, [pc, #384]	; (89634 <_svfprintf_r+0x1a00>)
   894b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   894b4:	930f      	str	r3, [sp, #60]	; 0x3c
   894b6:	f7fe bfb7 	b.w	88428 <_svfprintf_r+0x7f4>
   894ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   894bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   894be:	9528      	str	r5, [sp, #160]	; 0xa0
   894c0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   894c4:	7bc9      	ldrb	r1, [r1, #15]
   894c6:	428a      	cmp	r2, r1
   894c8:	f040 812a 	bne.w	89720 <_svfprintf_r+0x1aec>
   894cc:	2030      	movs	r0, #48	; 0x30
   894ce:	f803 0c01 	strb.w	r0, [r3, #-1]
   894d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   894d4:	1e5a      	subs	r2, r3, #1
   894d6:	9228      	str	r2, [sp, #160]	; 0xa0
   894d8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   894dc:	4291      	cmp	r1, r2
   894de:	d0f6      	beq.n	894ce <_svfprintf_r+0x189a>
   894e0:	2a39      	cmp	r2, #57	; 0x39
   894e2:	bf0b      	itete	eq
   894e4:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   894e6:	3201      	addne	r2, #1
   894e8:	7a92      	ldrbeq	r2, [r2, #10]
   894ea:	b2d2      	uxtbne	r2, r2
   894ec:	f803 2c01 	strb.w	r2, [r3, #-1]
   894f0:	e7a2      	b.n	89438 <_svfprintf_r+0x1804>
   894f2:	4648      	mov	r0, r9
   894f4:	1c59      	adds	r1, r3, #1
   894f6:	f002 fe11 	bl	8c11c <_malloc_r>
   894fa:	4607      	mov	r7, r0
   894fc:	2800      	cmp	r0, #0
   894fe:	f000 811d 	beq.w	8973c <_svfprintf_r+0x1b08>
   89502:	900d      	str	r0, [sp, #52]	; 0x34
   89504:	e706      	b.n	89314 <_svfprintf_r+0x16e0>
   89506:	2330      	movs	r3, #48	; 0x30
   89508:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8950c:	2378      	movs	r3, #120	; 0x78
   8950e:	e6f5      	b.n	892fc <_svfprintf_r+0x16c8>
   89510:	9b07      	ldr	r3, [sp, #28]
   89512:	9308      	str	r3, [sp, #32]
   89514:	f7ff b894 	b.w	88640 <_svfprintf_r+0xa0c>
   89518:	464a      	mov	r2, r9
   8951a:	46d1      	mov	r9, sl
   8951c:	4692      	mov	sl, r2
   8951e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89520:	3301      	adds	r3, #1
   89522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89524:	442c      	add	r4, r5
   89526:	2b07      	cmp	r3, #7
   89528:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8952c:	e9c8 2500 	strd	r2, r5, [r8]
   89530:	f77f a8b8 	ble.w	886a4 <_svfprintf_r+0xa70>
   89534:	4651      	mov	r1, sl
   89536:	4648      	mov	r0, r9
   89538:	aa2a      	add	r2, sp, #168	; 0xa8
   8953a:	f003 ffc7 	bl	8d4cc <__ssprint_r>
   8953e:	2800      	cmp	r0, #0
   89540:	f47e afc0 	bne.w	884c4 <_svfprintf_r+0x890>
   89544:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89548:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8954c:	f7ff b8ac 	b.w	886a8 <_svfprintf_r+0xa74>
   89550:	2b00      	cmp	r3, #0
   89552:	bf08      	it	eq
   89554:	2301      	moveq	r3, #1
   89556:	9309      	str	r3, [sp, #36]	; 0x24
   89558:	9b07      	ldr	r3, [sp, #28]
   8955a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8955e:	9312      	str	r3, [sp, #72]	; 0x48
   89560:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89562:	2b00      	cmp	r3, #0
   89564:	930c      	str	r3, [sp, #48]	; 0x30
   89566:	f2c0 80bd 	blt.w	896e4 <_svfprintf_r+0x1ab0>
   8956a:	2402      	movs	r4, #2
   8956c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8956e:	a828      	add	r0, sp, #160	; 0xa0
   89570:	aa25      	add	r2, sp, #148	; 0x94
   89572:	ab24      	add	r3, sp, #144	; 0x90
   89574:	e9cd 2003 	strd	r2, r0, [sp, #12]
   89578:	e9cd 4500 	strd	r4, r5, [sp]
   8957c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   89580:	9302      	str	r3, [sp, #8]
   89582:	4622      	mov	r2, r4
   89584:	462b      	mov	r3, r5
   89586:	4648      	mov	r0, r9
   89588:	911e      	str	r1, [sp, #120]	; 0x78
   8958a:	f001 f919 	bl	8a7c0 <_dtoa_r>
   8958e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89590:	4607      	mov	r7, r0
   89592:	930f      	str	r3, [sp, #60]	; 0x3c
   89594:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   89596:	940c      	str	r4, [sp, #48]	; 0x30
   89598:	930d      	str	r3, [sp, #52]	; 0x34
   8959a:	e64a      	b.n	89232 <_svfprintf_r+0x15fe>
   8959c:	2300      	movs	r3, #0
   8959e:	930d      	str	r3, [sp, #52]	; 0x34
   895a0:	e753      	b.n	8944a <_svfprintf_r+0x1816>
   895a2:	2667      	movs	r6, #103	; 0x67
   895a4:	991a      	ldr	r1, [sp, #104]	; 0x68
   895a6:	780b      	ldrb	r3, [r1, #0]
   895a8:	2bff      	cmp	r3, #255	; 0xff
   895aa:	f000 80de 	beq.w	8976a <_svfprintf_r+0x1b36>
   895ae:	2400      	movs	r4, #0
   895b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   895b2:	4620      	mov	r0, r4
   895b4:	e003      	b.n	895be <_svfprintf_r+0x198a>
   895b6:	3001      	adds	r0, #1
   895b8:	3101      	adds	r1, #1
   895ba:	2bff      	cmp	r3, #255	; 0xff
   895bc:	d008      	beq.n	895d0 <_svfprintf_r+0x199c>
   895be:	4293      	cmp	r3, r2
   895c0:	da06      	bge.n	895d0 <_svfprintf_r+0x199c>
   895c2:	1ad2      	subs	r2, r2, r3
   895c4:	784b      	ldrb	r3, [r1, #1]
   895c6:	2b00      	cmp	r3, #0
   895c8:	d1f5      	bne.n	895b6 <_svfprintf_r+0x1982>
   895ca:	780b      	ldrb	r3, [r1, #0]
   895cc:	3401      	adds	r4, #1
   895ce:	e7f4      	b.n	895ba <_svfprintf_r+0x1986>
   895d0:	911a      	str	r1, [sp, #104]	; 0x68
   895d2:	9210      	str	r2, [sp, #64]	; 0x40
   895d4:	9016      	str	r0, [sp, #88]	; 0x58
   895d6:	9412      	str	r4, [sp, #72]	; 0x48
   895d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   895da:	9b16      	ldr	r3, [sp, #88]	; 0x58
   895dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   895de:	4413      	add	r3, r2
   895e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   895e2:	fb02 1303 	mla	r3, r2, r3, r1
   895e6:	930c      	str	r3, [sp, #48]	; 0x30
   895e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   895ec:	9308      	str	r3, [sp, #32]
   895ee:	f7ff bab6 	b.w	88b5e <_svfprintf_r+0xf2a>
   895f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   895f4:	2666      	movs	r6, #102	; 0x66
   895f6:	18d3      	adds	r3, r2, r3
   895f8:	4419      	add	r1, r3
   895fa:	910c      	str	r1, [sp, #48]	; 0x30
   895fc:	e662      	b.n	892c4 <_svfprintf_r+0x1690>
   895fe:	f106 020f 	add.w	r2, r6, #15
   89602:	2101      	movs	r1, #1
   89604:	b2d2      	uxtb	r2, r2
   89606:	f7ff ba4f 	b.w	88aa8 <_svfprintf_r+0xe74>
   8960a:	2900      	cmp	r1, #0
   8960c:	d167      	bne.n	896de <_svfprintf_r+0x1aaa>
   8960e:	2230      	movs	r2, #48	; 0x30
   89610:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   89614:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   89618:	3330      	adds	r3, #48	; 0x30
   8961a:	f802 3b01 	strb.w	r3, [r2], #1
   8961e:	ab26      	add	r3, sp, #152	; 0x98
   89620:	1ad3      	subs	r3, r2, r3
   89622:	931b      	str	r3, [sp, #108]	; 0x6c
   89624:	f7ff ba83 	b.w	88b2e <_svfprintf_r+0xefa>
   89628:	0008e664 	.word	0x0008e664
   8962c:	40300000 	.word	0x40300000
   89630:	3fe00000 	.word	0x3fe00000
   89634:	0008e694 	.word	0x0008e694
   89638:	aa24      	add	r2, sp, #144	; 0x90
   8963a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8963c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8963e:	f003 fe53 	bl	8d2e8 <frexp>
   89642:	2200      	movs	r2, #0
   89644:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   89648:	f004 fbda 	bl	8de00 <__aeabi_dmul>
   8964c:	4604      	mov	r4, r0
   8964e:	460d      	mov	r5, r1
   89650:	2200      	movs	r2, #0
   89652:	2300      	movs	r3, #0
   89654:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   89658:	f004 fe3a 	bl	8e2d0 <__aeabi_dcmpeq>
   8965c:	b108      	cbz	r0, 89662 <_svfprintf_r+0x1a2e>
   8965e:	2301      	movs	r3, #1
   89660:	9324      	str	r3, [sp, #144]	; 0x90
   89662:	4b44      	ldr	r3, [pc, #272]	; (89774 <_svfprintf_r+0x1b40>)
   89664:	930c      	str	r3, [sp, #48]	; 0x30
   89666:	e684      	b.n	89372 <_svfprintf_r+0x173e>
   89668:	2667      	movs	r6, #103	; 0x67
   8966a:	e62e      	b.n	892ca <_svfprintf_r+0x1696>
   8966c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89670:	f7fe bcb9 	b.w	87fe6 <_svfprintf_r+0x3b2>
   89674:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89676:	930c      	str	r3, [sp, #48]	; 0x30
   89678:	e57c      	b.n	89174 <_svfprintf_r+0x1540>
   8967a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8967c:	2003      	movs	r0, #3
   8967e:	2b00      	cmp	r3, #0
   89680:	bfb8      	it	lt
   89682:	232d      	movlt	r3, #45	; 0x2d
   89684:	f04f 0100 	mov.w	r1, #0
   89688:	bfba      	itte	lt
   8968a:	461a      	movlt	r2, r3
   8968c:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   89690:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   89694:	4f38      	ldr	r7, [pc, #224]	; (89778 <_svfprintf_r+0x1b44>)
   89696:	4b39      	ldr	r3, [pc, #228]	; (8977c <_svfprintf_r+0x1b48>)
   89698:	9008      	str	r0, [sp, #32]
   8969a:	910d      	str	r1, [sp, #52]	; 0x34
   8969c:	f7fe bce2 	b.w	88064 <_svfprintf_r+0x430>
   896a0:	f1c3 0301 	rsb	r3, r3, #1
   896a4:	441a      	add	r2, r3
   896a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   896aa:	2667      	movs	r6, #103	; 0x67
   896ac:	920c      	str	r2, [sp, #48]	; 0x30
   896ae:	9308      	str	r3, [sp, #32]
   896b0:	e56c      	b.n	8918c <_svfprintf_r+0x1558>
   896b2:	2200      	movs	r2, #0
   896b4:	2300      	movs	r3, #0
   896b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   896b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   896ba:	f004 fe09 	bl	8e2d0 <__aeabi_dcmpeq>
   896be:	2800      	cmp	r0, #0
   896c0:	f47f addb 	bne.w	8927a <_svfprintf_r+0x1646>
   896c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   896c6:	f1c3 0301 	rsb	r3, r3, #1
   896ca:	9324      	str	r3, [sp, #144]	; 0x90
   896cc:	e5d6      	b.n	8927c <_svfprintf_r+0x1648>
   896ce:	992b      	ldr	r1, [sp, #172]	; 0xac
   896d0:	f7ff bb59 	b.w	88d86 <_svfprintf_r+0x1152>
   896d4:	07e9      	lsls	r1, r5, #31
   896d6:	f57f aa35 	bpl.w	88b44 <_svfprintf_r+0xf10>
   896da:	f7ff ba2f 	b.w	88b3c <_svfprintf_r+0xf08>
   896de:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   896e2:	e799      	b.n	89618 <_svfprintf_r+0x19e4>
   896e4:	900d      	str	r0, [sp, #52]	; 0x34
   896e6:	e6b0      	b.n	8944a <_svfprintf_r+0x1816>
   896e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   896ea:	f005 0501 	and.w	r5, r5, #1
   896ee:	4613      	mov	r3, r2
   896f0:	432b      	orrs	r3, r5
   896f2:	d104      	bne.n	896fe <_svfprintf_r+0x1aca>
   896f4:	2301      	movs	r3, #1
   896f6:	2666      	movs	r6, #102	; 0x66
   896f8:	9308      	str	r3, [sp, #32]
   896fa:	930c      	str	r3, [sp, #48]	; 0x30
   896fc:	e546      	b.n	8918c <_svfprintf_r+0x1558>
   896fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89700:	2666      	movs	r6, #102	; 0x66
   89702:	3301      	adds	r3, #1
   89704:	441a      	add	r2, r3
   89706:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8970a:	920c      	str	r2, [sp, #48]	; 0x30
   8970c:	9308      	str	r3, [sp, #32]
   8970e:	e53d      	b.n	8918c <_svfprintf_r+0x1558>
   89710:	4b1b      	ldr	r3, [pc, #108]	; (89780 <_svfprintf_r+0x1b4c>)
   89712:	930f      	str	r3, [sp, #60]	; 0x3c
   89714:	f7ff bbe9 	b.w	88eea <_svfprintf_r+0x12b6>
   89718:	4a19      	ldr	r2, [pc, #100]	; (89780 <_svfprintf_r+0x1b4c>)
   8971a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8971c:	920f      	str	r2, [sp, #60]	; 0x3c
   8971e:	e4b1      	b.n	89084 <_svfprintf_r+0x1450>
   89720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89722:	e6dd      	b.n	894e0 <_svfprintf_r+0x18ac>
   89724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89726:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8972a:	f853 0b04 	ldr.w	r0, [r3], #4
   8972e:	4693      	mov	fp, r2
   89730:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   89734:	9009      	str	r0, [sp, #36]	; 0x24
   89736:	930e      	str	r3, [sp, #56]	; 0x38
   89738:	f7fe bac7 	b.w	87cca <_svfprintf_r+0x96>
   8973c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89744:	f8aa 300c 	strh.w	r3, [sl, #12]
   89748:	f7fe bc4d 	b.w	87fe6 <_svfprintf_r+0x3b2>
   8974c:	4a0c      	ldr	r2, [pc, #48]	; (89780 <_svfprintf_r+0x1b4c>)
   8974e:	920f      	str	r2, [sp, #60]	; 0x3c
   89750:	e6e6      	b.n	89520 <_svfprintf_r+0x18ec>
   89752:	230c      	movs	r3, #12
   89754:	f04f 32ff 	mov.w	r2, #4294967295
   89758:	f8c9 3000 	str.w	r3, [r9]
   8975c:	920a      	str	r2, [sp, #40]	; 0x28
   8975e:	f7fe bc49 	b.w	87ff4 <_svfprintf_r+0x3c0>
   89762:	2302      	movs	r3, #2
   89764:	931b      	str	r3, [sp, #108]	; 0x6c
   89766:	f7ff b9e2 	b.w	88b2e <_svfprintf_r+0xefa>
   8976a:	2300      	movs	r3, #0
   8976c:	9312      	str	r3, [sp, #72]	; 0x48
   8976e:	9316      	str	r3, [sp, #88]	; 0x58
   89770:	e732      	b.n	895d8 <_svfprintf_r+0x19a4>
   89772:	bf00      	nop
   89774:	0008e650 	.word	0x0008e650
   89778:	0008e648 	.word	0x0008e648
   8977c:	0008e64c 	.word	0x0008e64c
   89780:	0008e694 	.word	0x0008e694

00089784 <__sprint_r.part.0>:
   89784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89788:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8978a:	4690      	mov	r8, r2
   8978c:	049c      	lsls	r4, r3, #18
   8978e:	d52d      	bpl.n	897ec <__sprint_r.part.0+0x68>
   89790:	6893      	ldr	r3, [r2, #8]
   89792:	6812      	ldr	r2, [r2, #0]
   89794:	b343      	cbz	r3, 897e8 <__sprint_r.part.0+0x64>
   89796:	468b      	mov	fp, r1
   89798:	4606      	mov	r6, r0
   8979a:	f102 0908 	add.w	r9, r2, #8
   8979e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   897a2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   897a6:	d015      	beq.n	897d4 <__sprint_r.part.0+0x50>
   897a8:	2400      	movs	r4, #0
   897aa:	3d04      	subs	r5, #4
   897ac:	e001      	b.n	897b2 <__sprint_r.part.0+0x2e>
   897ae:	42a7      	cmp	r7, r4
   897b0:	d00e      	beq.n	897d0 <__sprint_r.part.0+0x4c>
   897b2:	465a      	mov	r2, fp
   897b4:	4630      	mov	r0, r6
   897b6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   897ba:	f002 f8f9 	bl	8b9b0 <_fputwc_r>
   897be:	1c43      	adds	r3, r0, #1
   897c0:	f104 0401 	add.w	r4, r4, #1
   897c4:	d1f3      	bne.n	897ae <__sprint_r.part.0+0x2a>
   897c6:	2300      	movs	r3, #0
   897c8:	e9c8 3301 	strd	r3, r3, [r8, #4]
   897cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   897d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   897d4:	f02a 0a03 	bic.w	sl, sl, #3
   897d8:	eba3 030a 	sub.w	r3, r3, sl
   897dc:	f8c8 3008 	str.w	r3, [r8, #8]
   897e0:	f109 0908 	add.w	r9, r9, #8
   897e4:	2b00      	cmp	r3, #0
   897e6:	d1da      	bne.n	8979e <__sprint_r.part.0+0x1a>
   897e8:	2000      	movs	r0, #0
   897ea:	e7ec      	b.n	897c6 <__sprint_r.part.0+0x42>
   897ec:	f002 fa6a 	bl	8bcc4 <__sfvwrite_r>
   897f0:	2300      	movs	r3, #0
   897f2:	e9c8 3301 	strd	r3, r3, [r8, #4]
   897f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   897fa:	bf00      	nop

000897fc <_vfiprintf_r>:
   897fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89800:	b0bb      	sub	sp, #236	; 0xec
   89802:	461c      	mov	r4, r3
   89804:	4689      	mov	r9, r1
   89806:	4690      	mov	r8, r2
   89808:	e9cd 3004 	strd	r3, r0, [sp, #16]
   8980c:	b118      	cbz	r0, 89816 <_vfiprintf_r+0x1a>
   8980e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89810:	2b00      	cmp	r3, #0
   89812:	f000 827a 	beq.w	89d0a <_vfiprintf_r+0x50e>
   89816:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8981a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8981e:	07de      	lsls	r6, r3, #31
   89820:	b28a      	uxth	r2, r1
   89822:	d402      	bmi.n	8982a <_vfiprintf_r+0x2e>
   89824:	058d      	lsls	r5, r1, #22
   89826:	f140 851a 	bpl.w	8a25e <_vfiprintf_r+0xa62>
   8982a:	0490      	lsls	r0, r2, #18
   8982c:	d40a      	bmi.n	89844 <_vfiprintf_r+0x48>
   8982e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89832:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   89836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8983a:	f8a9 200c 	strh.w	r2, [r9, #12]
   8983e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   89842:	b292      	uxth	r2, r2
   89844:	0711      	lsls	r1, r2, #28
   89846:	f140 80f6 	bpl.w	89a36 <_vfiprintf_r+0x23a>
   8984a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8984e:	2b00      	cmp	r3, #0
   89850:	f000 80f1 	beq.w	89a36 <_vfiprintf_r+0x23a>
   89854:	f002 031a 	and.w	r3, r2, #26
   89858:	2b0a      	cmp	r3, #10
   8985a:	f000 80fa 	beq.w	89a52 <_vfiprintf_r+0x256>
   8985e:	2300      	movs	r3, #0
   89860:	46cb      	mov	fp, r9
   89862:	e9cd 3308 	strd	r3, r3, [sp, #32]
   89866:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   8986a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   8986e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89872:	9303      	str	r3, [sp, #12]
   89874:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   89878:	f898 3000 	ldrb.w	r3, [r8]
   8987c:	2b00      	cmp	r3, #0
   8987e:	f000 81ed 	beq.w	89c5c <_vfiprintf_r+0x460>
   89882:	4644      	mov	r4, r8
   89884:	e004      	b.n	89890 <_vfiprintf_r+0x94>
   89886:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8988a:	2b00      	cmp	r3, #0
   8988c:	f000 8127 	beq.w	89ade <_vfiprintf_r+0x2e2>
   89890:	2b25      	cmp	r3, #37	; 0x25
   89892:	d1f8      	bne.n	89886 <_vfiprintf_r+0x8a>
   89894:	ebb4 0508 	subs.w	r5, r4, r8
   89898:	f040 8125 	bne.w	89ae6 <_vfiprintf_r+0x2ea>
   8989c:	7823      	ldrb	r3, [r4, #0]
   8989e:	2b00      	cmp	r3, #0
   898a0:	f000 81dc 	beq.w	89c5c <_vfiprintf_r+0x460>
   898a4:	f04f 0200 	mov.w	r2, #0
   898a8:	2300      	movs	r3, #0
   898aa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   898ae:	f04f 32ff 	mov.w	r2, #4294967295
   898b2:	252b      	movs	r5, #43	; 0x2b
   898b4:	461f      	mov	r7, r3
   898b6:	9302      	str	r3, [sp, #8]
   898b8:	7863      	ldrb	r3, [r4, #1]
   898ba:	f104 0801 	add.w	r8, r4, #1
   898be:	9200      	str	r2, [sp, #0]
   898c0:	f108 0801 	add.w	r8, r8, #1
   898c4:	f1a3 0220 	sub.w	r2, r3, #32
   898c8:	2a5a      	cmp	r2, #90	; 0x5a
   898ca:	f200 8141 	bhi.w	89b50 <_vfiprintf_r+0x354>
   898ce:	e8df f012 	tbh	[pc, r2, lsl #1]
   898d2:	0272      	.short	0x0272
   898d4:	013f013f 	.word	0x013f013f
   898d8:	013f026d 	.word	0x013f026d
   898dc:	013f013f 	.word	0x013f013f
   898e0:	013f024b 	.word	0x013f024b
   898e4:	006a013f 	.word	0x006a013f
   898e8:	013f0227 	.word	0x013f0227
   898ec:	02310222 	.word	0x02310222
   898f0:	022c013f 	.word	0x022c013f
   898f4:	005b005b 	.word	0x005b005b
   898f8:	005b005b 	.word	0x005b005b
   898fc:	005b005b 	.word	0x005b005b
   89900:	005b005b 	.word	0x005b005b
   89904:	013f005b 	.word	0x013f005b
   89908:	013f013f 	.word	0x013f013f
   8990c:	013f013f 	.word	0x013f013f
   89910:	013f013f 	.word	0x013f013f
   89914:	013f013f 	.word	0x013f013f
   89918:	007a020e 	.word	0x007a020e
   8991c:	013f013f 	.word	0x013f013f
   89920:	013f013f 	.word	0x013f013f
   89924:	013f013f 	.word	0x013f013f
   89928:	013f013f 	.word	0x013f013f
   8992c:	013f013f 	.word	0x013f013f
   89930:	013f00d7 	.word	0x013f00d7
   89934:	013f013f 	.word	0x013f013f
   89938:	013f01f2 	.word	0x013f01f2
   8993c:	013f0297 	.word	0x013f0297
   89940:	0500013f 	.word	0x0500013f
   89944:	013f013f 	.word	0x013f013f
   89948:	013f013f 	.word	0x013f013f
   8994c:	013f013f 	.word	0x013f013f
   89950:	013f013f 	.word	0x013f013f
   89954:	013f013f 	.word	0x013f013f
   89958:	007c020e 	.word	0x007c020e
   8995c:	013f013f 	.word	0x013f013f
   89960:	028a013f 	.word	0x028a013f
   89964:	0075007c 	.word	0x0075007c
   89968:	027d013f 	.word	0x027d013f
   8996c:	02b6013f 	.word	0x02b6013f
   89970:	02a600d9 	.word	0x02a600d9
   89974:	013f0075 	.word	0x013f0075
   89978:	007201f2 	.word	0x007201f2
   8997c:	013f04fe 	.word	0x013f04fe
   89980:	051c013f 	.word	0x051c013f
   89984:	0072013f 	.word	0x0072013f
   89988:	2100      	movs	r1, #0
   8998a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8998e:	f818 3b01 	ldrb.w	r3, [r8], #1
   89992:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89996:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8999a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8999e:	2a09      	cmp	r2, #9
   899a0:	d9f5      	bls.n	8998e <_vfiprintf_r+0x192>
   899a2:	9102      	str	r1, [sp, #8]
   899a4:	e78e      	b.n	898c4 <_vfiprintf_r+0xc8>
   899a6:	9b04      	ldr	r3, [sp, #16]
   899a8:	f853 2b04 	ldr.w	r2, [r3], #4
   899ac:	2a00      	cmp	r2, #0
   899ae:	9202      	str	r2, [sp, #8]
   899b0:	9304      	str	r3, [sp, #16]
   899b2:	f2c0 81ad 	blt.w	89d10 <_vfiprintf_r+0x514>
   899b6:	f898 3000 	ldrb.w	r3, [r8]
   899ba:	e781      	b.n	898c0 <_vfiprintf_r+0xc4>
   899bc:	f898 3000 	ldrb.w	r3, [r8]
   899c0:	f047 0720 	orr.w	r7, r7, #32
   899c4:	e77c      	b.n	898c0 <_vfiprintf_r+0xc4>
   899c6:	f047 0710 	orr.w	r7, r7, #16
   899ca:	06bc      	lsls	r4, r7, #26
   899cc:	f140 8158 	bpl.w	89c80 <_vfiprintf_r+0x484>
   899d0:	9c04      	ldr	r4, [sp, #16]
   899d2:	3407      	adds	r4, #7
   899d4:	f024 0307 	bic.w	r3, r4, #7
   899d8:	4619      	mov	r1, r3
   899da:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   899de:	4614      	mov	r4, r2
   899e0:	461d      	mov	r5, r3
   899e2:	9104      	str	r1, [sp, #16]
   899e4:	2a00      	cmp	r2, #0
   899e6:	f173 0300 	sbcs.w	r3, r3, #0
   899ea:	f2c0 841e 	blt.w	8a22a <_vfiprintf_r+0xa2e>
   899ee:	9b00      	ldr	r3, [sp, #0]
   899f0:	3301      	adds	r3, #1
   899f2:	f000 84f0 	beq.w	8a3d6 <_vfiprintf_r+0xbda>
   899f6:	ea54 0305 	orrs.w	r3, r4, r5
   899fa:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   899fe:	f000 83fc 	beq.w	8a1fa <_vfiprintf_r+0x9fe>
   89a02:	2d00      	cmp	r5, #0
   89a04:	bf08      	it	eq
   89a06:	2c0a      	cmpeq	r4, #10
   89a08:	f080 84a9 	bcs.w	8a35e <_vfiprintf_r+0xb62>
   89a0c:	2301      	movs	r3, #1
   89a0e:	464f      	mov	r7, r9
   89a10:	3430      	adds	r4, #48	; 0x30
   89a12:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   89a16:	9301      	str	r3, [sp, #4]
   89a18:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   89a1c:	e9dd 2100 	ldrd	r2, r1, [sp]
   89a20:	428a      	cmp	r2, r1
   89a22:	bfb8      	it	lt
   89a24:	460a      	movlt	r2, r1
   89a26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   89a2a:	4615      	mov	r5, r2
   89a2c:	2b00      	cmp	r3, #0
   89a2e:	f000 809d 	beq.w	89b6c <_vfiprintf_r+0x370>
   89a32:	3501      	adds	r5, #1
   89a34:	e09a      	b.n	89b6c <_vfiprintf_r+0x370>
   89a36:	4649      	mov	r1, r9
   89a38:	9805      	ldr	r0, [sp, #20]
   89a3a:	f000 fdb9 	bl	8a5b0 <__swsetup_r>
   89a3e:	2800      	cmp	r0, #0
   89a40:	f040 854a 	bne.w	8a4d8 <_vfiprintf_r+0xcdc>
   89a44:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89a48:	f002 031a 	and.w	r3, r2, #26
   89a4c:	2b0a      	cmp	r3, #10
   89a4e:	f47f af06 	bne.w	8985e <_vfiprintf_r+0x62>
   89a52:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   89a56:	2b00      	cmp	r3, #0
   89a58:	f6ff af01 	blt.w	8985e <_vfiprintf_r+0x62>
   89a5c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89a60:	07de      	lsls	r6, r3, #31
   89a62:	d402      	bmi.n	89a6a <_vfiprintf_r+0x26e>
   89a64:	0595      	lsls	r5, r2, #22
   89a66:	f140 850e 	bpl.w	8a486 <_vfiprintf_r+0xc8a>
   89a6a:	4623      	mov	r3, r4
   89a6c:	4642      	mov	r2, r8
   89a6e:	4649      	mov	r1, r9
   89a70:	9805      	ldr	r0, [sp, #20]
   89a72:	f000 fd59 	bl	8a528 <__sbprintf>
   89a76:	9003      	str	r0, [sp, #12]
   89a78:	9803      	ldr	r0, [sp, #12]
   89a7a:	b03b      	add	sp, #236	; 0xec
   89a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a80:	f047 0710 	orr.w	r7, r7, #16
   89a84:	06b8      	lsls	r0, r7, #26
   89a86:	9c04      	ldr	r4, [sp, #16]
   89a88:	f140 8109 	bpl.w	89c9e <_vfiprintf_r+0x4a2>
   89a8c:	3407      	adds	r4, #7
   89a8e:	f024 0307 	bic.w	r3, r4, #7
   89a92:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89a96:	9304      	str	r3, [sp, #16]
   89a98:	2300      	movs	r3, #0
   89a9a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89a9e:	f04f 0200 	mov.w	r2, #0
   89aa2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   89aa6:	9a00      	ldr	r2, [sp, #0]
   89aa8:	4611      	mov	r1, r2
   89aaa:	3101      	adds	r1, #1
   89aac:	f000 81db 	beq.w	89e66 <_vfiprintf_r+0x66a>
   89ab0:	ea54 0105 	orrs.w	r1, r4, r5
   89ab4:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   89ab8:	f040 81d4 	bne.w	89e64 <_vfiprintf_r+0x668>
   89abc:	2a00      	cmp	r2, #0
   89abe:	f040 848d 	bne.w	8a3dc <_vfiprintf_r+0xbe0>
   89ac2:	2b00      	cmp	r3, #0
   89ac4:	f040 839e 	bne.w	8a204 <_vfiprintf_r+0xa08>
   89ac8:	f019 0301 	ands.w	r3, r9, #1
   89acc:	9301      	str	r3, [sp, #4]
   89ace:	f000 83c3 	beq.w	8a258 <_vfiprintf_r+0xa5c>
   89ad2:	2330      	movs	r3, #48	; 0x30
   89ad4:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   89ad8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   89adc:	e79e      	b.n	89a1c <_vfiprintf_r+0x220>
   89ade:	ebb4 0508 	subs.w	r5, r4, r8
   89ae2:	f000 80bb 	beq.w	89c5c <_vfiprintf_r+0x460>
   89ae6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   89aea:	3301      	adds	r3, #1
   89aec:	442a      	add	r2, r5
   89aee:	2b07      	cmp	r3, #7
   89af0:	e9ca 8500 	strd	r8, r5, [sl]
   89af4:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   89af8:	dc06      	bgt.n	89b08 <_vfiprintf_r+0x30c>
   89afa:	f10a 0a08 	add.w	sl, sl, #8
   89afe:	9a03      	ldr	r2, [sp, #12]
   89b00:	7823      	ldrb	r3, [r4, #0]
   89b02:	442a      	add	r2, r5
   89b04:	9203      	str	r2, [sp, #12]
   89b06:	e6ca      	b.n	8989e <_vfiprintf_r+0xa2>
   89b08:	2a00      	cmp	r2, #0
   89b0a:	f000 8372 	beq.w	8a1f2 <_vfiprintf_r+0x9f6>
   89b0e:	4659      	mov	r1, fp
   89b10:	9805      	ldr	r0, [sp, #20]
   89b12:	aa0e      	add	r2, sp, #56	; 0x38
   89b14:	f7ff fe36 	bl	89784 <__sprint_r.part.0>
   89b18:	b950      	cbnz	r0, 89b30 <_vfiprintf_r+0x334>
   89b1a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89b1e:	e7ee      	b.n	89afe <_vfiprintf_r+0x302>
   89b20:	4659      	mov	r1, fp
   89b22:	9805      	ldr	r0, [sp, #20]
   89b24:	aa0e      	add	r2, sp, #56	; 0x38
   89b26:	f7ff fe2d 	bl	89784 <__sprint_r.part.0>
   89b2a:	2800      	cmp	r0, #0
   89b2c:	f000 808d 	beq.w	89c4a <_vfiprintf_r+0x44e>
   89b30:	46d9      	mov	r9, fp
   89b32:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89b36:	f013 0f01 	tst.w	r3, #1
   89b3a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89b3e:	f000 8095 	beq.w	89c6c <_vfiprintf_r+0x470>
   89b42:	065b      	lsls	r3, r3, #25
   89b44:	f100 84d4 	bmi.w	8a4f0 <_vfiprintf_r+0xcf4>
   89b48:	9803      	ldr	r0, [sp, #12]
   89b4a:	b03b      	add	sp, #236	; 0xec
   89b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b50:	2b00      	cmp	r3, #0
   89b52:	f000 8083 	beq.w	89c5c <_vfiprintf_r+0x460>
   89b56:	2501      	movs	r5, #1
   89b58:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89b5c:	f04f 0300 	mov.w	r3, #0
   89b60:	9501      	str	r5, [sp, #4]
   89b62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89b66:	ae21      	add	r6, sp, #132	; 0x84
   89b68:	2300      	movs	r3, #0
   89b6a:	9300      	str	r3, [sp, #0]
   89b6c:	f017 0302 	ands.w	r3, r7, #2
   89b70:	9307      	str	r3, [sp, #28]
   89b72:	bf18      	it	ne
   89b74:	3502      	addne	r5, #2
   89b76:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   89b7a:	9306      	str	r3, [sp, #24]
   89b7c:	d104      	bne.n	89b88 <_vfiprintf_r+0x38c>
   89b7e:	9b02      	ldr	r3, [sp, #8]
   89b80:	1b5c      	subs	r4, r3, r5
   89b82:	2c00      	cmp	r4, #0
   89b84:	f300 8274 	bgt.w	8a070 <_vfiprintf_r+0x874>
   89b88:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89b8c:	1c48      	adds	r0, r1, #1
   89b8e:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   89b92:	b174      	cbz	r4, 89bb2 <_vfiprintf_r+0x3b6>
   89b94:	2101      	movs	r1, #1
   89b96:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   89b9a:	440a      	add	r2, r1
   89b9c:	2807      	cmp	r0, #7
   89b9e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   89ba2:	e9ca 4100 	strd	r4, r1, [sl]
   89ba6:	f300 8246 	bgt.w	8a036 <_vfiprintf_r+0x83a>
   89baa:	4601      	mov	r1, r0
   89bac:	f10a 0a08 	add.w	sl, sl, #8
   89bb0:	3001      	adds	r0, #1
   89bb2:	9b07      	ldr	r3, [sp, #28]
   89bb4:	b1c3      	cbz	r3, 89be8 <_vfiprintf_r+0x3ec>
   89bb6:	2102      	movs	r1, #2
   89bb8:	ab0d      	add	r3, sp, #52	; 0x34
   89bba:	440a      	add	r2, r1
   89bbc:	2807      	cmp	r0, #7
   89bbe:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   89bc2:	e9ca 3100 	strd	r3, r1, [sl]
   89bc6:	f340 824e 	ble.w	8a066 <_vfiprintf_r+0x86a>
   89bca:	2a00      	cmp	r2, #0
   89bcc:	f000 830c 	beq.w	8a1e8 <_vfiprintf_r+0x9ec>
   89bd0:	4659      	mov	r1, fp
   89bd2:	9805      	ldr	r0, [sp, #20]
   89bd4:	aa0e      	add	r2, sp, #56	; 0x38
   89bd6:	f7ff fdd5 	bl	89784 <__sprint_r.part.0>
   89bda:	2800      	cmp	r0, #0
   89bdc:	d1a8      	bne.n	89b30 <_vfiprintf_r+0x334>
   89bde:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89be2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89be6:	1c48      	adds	r0, r1, #1
   89be8:	9b06      	ldr	r3, [sp, #24]
   89bea:	2b80      	cmp	r3, #128	; 0x80
   89bec:	f000 817e 	beq.w	89eec <_vfiprintf_r+0x6f0>
   89bf0:	e9dd 3400 	ldrd	r3, r4, [sp]
   89bf4:	1b1c      	subs	r4, r3, r4
   89bf6:	2c00      	cmp	r4, #0
   89bf8:	f300 81d3 	bgt.w	89fa2 <_vfiprintf_r+0x7a6>
   89bfc:	9b01      	ldr	r3, [sp, #4]
   89bfe:	2807      	cmp	r0, #7
   89c00:	441a      	add	r2, r3
   89c02:	e9ca 6300 	strd	r6, r3, [sl]
   89c06:	9210      	str	r2, [sp, #64]	; 0x40
   89c08:	900f      	str	r0, [sp, #60]	; 0x3c
   89c0a:	f340 816c 	ble.w	89ee6 <_vfiprintf_r+0x6ea>
   89c0e:	2a00      	cmp	r2, #0
   89c10:	f000 8276 	beq.w	8a100 <_vfiprintf_r+0x904>
   89c14:	4659      	mov	r1, fp
   89c16:	9805      	ldr	r0, [sp, #20]
   89c18:	aa0e      	add	r2, sp, #56	; 0x38
   89c1a:	f7ff fdb3 	bl	89784 <__sprint_r.part.0>
   89c1e:	2800      	cmp	r0, #0
   89c20:	d186      	bne.n	89b30 <_vfiprintf_r+0x334>
   89c22:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89c24:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89c28:	0779      	lsls	r1, r7, #29
   89c2a:	d504      	bpl.n	89c36 <_vfiprintf_r+0x43a>
   89c2c:	9b02      	ldr	r3, [sp, #8]
   89c2e:	1b5c      	subs	r4, r3, r5
   89c30:	2c00      	cmp	r4, #0
   89c32:	f300 826e 	bgt.w	8a112 <_vfiprintf_r+0x916>
   89c36:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   89c3a:	42a9      	cmp	r1, r5
   89c3c:	bfac      	ite	ge
   89c3e:	185b      	addge	r3, r3, r1
   89c40:	195b      	addlt	r3, r3, r5
   89c42:	9303      	str	r3, [sp, #12]
   89c44:	2a00      	cmp	r2, #0
   89c46:	f47f af6b 	bne.w	89b20 <_vfiprintf_r+0x324>
   89c4a:	2300      	movs	r3, #0
   89c4c:	930f      	str	r3, [sp, #60]	; 0x3c
   89c4e:	f898 3000 	ldrb.w	r3, [r8]
   89c52:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89c56:	2b00      	cmp	r3, #0
   89c58:	f47f ae13 	bne.w	89882 <_vfiprintf_r+0x86>
   89c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89c5e:	46d9      	mov	r9, fp
   89c60:	2b00      	cmp	r3, #0
   89c62:	f040 8426 	bne.w	8a4b2 <_vfiprintf_r+0xcb6>
   89c66:	2300      	movs	r3, #0
   89c68:	930f      	str	r3, [sp, #60]	; 0x3c
   89c6a:	e762      	b.n	89b32 <_vfiprintf_r+0x336>
   89c6c:	059a      	lsls	r2, r3, #22
   89c6e:	f53f af68 	bmi.w	89b42 <_vfiprintf_r+0x346>
   89c72:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89c76:	f002 f9cf 	bl	8c018 <__retarget_lock_release_recursive>
   89c7a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89c7e:	e760      	b.n	89b42 <_vfiprintf_r+0x346>
   89c80:	9b04      	ldr	r3, [sp, #16]
   89c82:	06f8      	lsls	r0, r7, #27
   89c84:	f853 4b04 	ldr.w	r4, [r3], #4
   89c88:	f100 8308 	bmi.w	8a29c <_vfiprintf_r+0xaa0>
   89c8c:	0679      	lsls	r1, r7, #25
   89c8e:	f140 8302 	bpl.w	8a296 <_vfiprintf_r+0xa9a>
   89c92:	b224      	sxth	r4, r4
   89c94:	17e5      	asrs	r5, r4, #31
   89c96:	9304      	str	r3, [sp, #16]
   89c98:	4622      	mov	r2, r4
   89c9a:	462b      	mov	r3, r5
   89c9c:	e6a2      	b.n	899e4 <_vfiprintf_r+0x1e8>
   89c9e:	f854 3b04 	ldr.w	r3, [r4], #4
   89ca2:	06f9      	lsls	r1, r7, #27
   89ca4:	9404      	str	r4, [sp, #16]
   89ca6:	f100 82f3 	bmi.w	8a290 <_vfiprintf_r+0xa94>
   89caa:	067a      	lsls	r2, r7, #25
   89cac:	f140 82ed 	bpl.w	8a28a <_vfiprintf_r+0xa8e>
   89cb0:	2500      	movs	r5, #0
   89cb2:	b29c      	uxth	r4, r3
   89cb4:	e6f0      	b.n	89a98 <_vfiprintf_r+0x29c>
   89cb6:	f04f 0300 	mov.w	r3, #0
   89cba:	9c04      	ldr	r4, [sp, #16]
   89cbc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89cc0:	f854 6b04 	ldr.w	r6, [r4], #4
   89cc4:	2e00      	cmp	r6, #0
   89cc6:	f000 8397 	beq.w	8a3f8 <_vfiprintf_r+0xbfc>
   89cca:	9a00      	ldr	r2, [sp, #0]
   89ccc:	4613      	mov	r3, r2
   89cce:	3301      	adds	r3, #1
   89cd0:	f000 831e 	beq.w	8a310 <_vfiprintf_r+0xb14>
   89cd4:	2100      	movs	r1, #0
   89cd6:	4630      	mov	r0, r6
   89cd8:	f002 fce4 	bl	8c6a4 <memchr>
   89cdc:	2800      	cmp	r0, #0
   89cde:	f000 83d8 	beq.w	8a492 <_vfiprintf_r+0xc96>
   89ce2:	1b83      	subs	r3, r0, r6
   89ce4:	9301      	str	r3, [sp, #4]
   89ce6:	2300      	movs	r3, #0
   89ce8:	9404      	str	r4, [sp, #16]
   89cea:	9300      	str	r3, [sp, #0]
   89cec:	e696      	b.n	89a1c <_vfiprintf_r+0x220>
   89cee:	2501      	movs	r5, #1
   89cf0:	f04f 0200 	mov.w	r2, #0
   89cf4:	9c04      	ldr	r4, [sp, #16]
   89cf6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   89cfa:	f854 3b04 	ldr.w	r3, [r4], #4
   89cfe:	9501      	str	r5, [sp, #4]
   89d00:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89d04:	9404      	str	r4, [sp, #16]
   89d06:	ae21      	add	r6, sp, #132	; 0x84
   89d08:	e72e      	b.n	89b68 <_vfiprintf_r+0x36c>
   89d0a:	f001 fdb1 	bl	8b870 <__sinit>
   89d0e:	e582      	b.n	89816 <_vfiprintf_r+0x1a>
   89d10:	9b02      	ldr	r3, [sp, #8]
   89d12:	425b      	negs	r3, r3
   89d14:	9302      	str	r3, [sp, #8]
   89d16:	f898 3000 	ldrb.w	r3, [r8]
   89d1a:	f047 0704 	orr.w	r7, r7, #4
   89d1e:	e5cf      	b.n	898c0 <_vfiprintf_r+0xc4>
   89d20:	f898 3000 	ldrb.w	r3, [r8]
   89d24:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   89d28:	e5ca      	b.n	898c0 <_vfiprintf_r+0xc4>
   89d2a:	f898 3000 	ldrb.w	r3, [r8]
   89d2e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   89d32:	e5c5      	b.n	898c0 <_vfiprintf_r+0xc4>
   89d34:	4641      	mov	r1, r8
   89d36:	f811 3b01 	ldrb.w	r3, [r1], #1
   89d3a:	2b2a      	cmp	r3, #42	; 0x2a
   89d3c:	f000 83dd 	beq.w	8a4fa <_vfiprintf_r+0xcfe>
   89d40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89d44:	2a09      	cmp	r2, #9
   89d46:	4688      	mov	r8, r1
   89d48:	bf98      	it	ls
   89d4a:	2100      	movls	r1, #0
   89d4c:	f200 83ad 	bhi.w	8a4aa <_vfiprintf_r+0xcae>
   89d50:	f818 3b01 	ldrb.w	r3, [r8], #1
   89d54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89d58:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   89d5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89d60:	2a09      	cmp	r2, #9
   89d62:	d9f5      	bls.n	89d50 <_vfiprintf_r+0x554>
   89d64:	9100      	str	r1, [sp, #0]
   89d66:	e5ad      	b.n	898c4 <_vfiprintf_r+0xc8>
   89d68:	9c05      	ldr	r4, [sp, #20]
   89d6a:	4620      	mov	r0, r4
   89d6c:	f002 f94a 	bl	8c004 <_localeconv_r>
   89d70:	6843      	ldr	r3, [r0, #4]
   89d72:	4618      	mov	r0, r3
   89d74:	930a      	str	r3, [sp, #40]	; 0x28
   89d76:	f003 fb47 	bl	8d408 <strlen>
   89d7a:	4603      	mov	r3, r0
   89d7c:	4620      	mov	r0, r4
   89d7e:	930b      	str	r3, [sp, #44]	; 0x2c
   89d80:	461c      	mov	r4, r3
   89d82:	f002 f93f 	bl	8c004 <_localeconv_r>
   89d86:	6882      	ldr	r2, [r0, #8]
   89d88:	9209      	str	r2, [sp, #36]	; 0x24
   89d8a:	2c00      	cmp	r4, #0
   89d8c:	f43f ae13 	beq.w	899b6 <_vfiprintf_r+0x1ba>
   89d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89d92:	2b00      	cmp	r3, #0
   89d94:	f43f ae0f 	beq.w	899b6 <_vfiprintf_r+0x1ba>
   89d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89d9a:	781b      	ldrb	r3, [r3, #0]
   89d9c:	2b00      	cmp	r3, #0
   89d9e:	f43f ae0a 	beq.w	899b6 <_vfiprintf_r+0x1ba>
   89da2:	f898 3000 	ldrb.w	r3, [r8]
   89da6:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   89daa:	e589      	b.n	898c0 <_vfiprintf_r+0xc4>
   89dac:	f898 3000 	ldrb.w	r3, [r8]
   89db0:	f047 0701 	orr.w	r7, r7, #1
   89db4:	e584      	b.n	898c0 <_vfiprintf_r+0xc4>
   89db6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   89dba:	2b00      	cmp	r3, #0
   89dbc:	f47f adfb 	bne.w	899b6 <_vfiprintf_r+0x1ba>
   89dc0:	2320      	movs	r3, #32
   89dc2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89dc6:	f898 3000 	ldrb.w	r3, [r8]
   89dca:	e579      	b.n	898c0 <_vfiprintf_r+0xc4>
   89dcc:	f898 3000 	ldrb.w	r3, [r8]
   89dd0:	2b6c      	cmp	r3, #108	; 0x6c
   89dd2:	bf03      	ittte	eq
   89dd4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   89dd8:	f047 0720 	orreq.w	r7, r7, #32
   89ddc:	f108 0801 	addeq.w	r8, r8, #1
   89de0:	f047 0710 	orrne.w	r7, r7, #16
   89de4:	e56c      	b.n	898c0 <_vfiprintf_r+0xc4>
   89de6:	f898 3000 	ldrb.w	r3, [r8]
   89dea:	2b68      	cmp	r3, #104	; 0x68
   89dec:	bf03      	ittte	eq
   89dee:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   89df2:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   89df6:	f108 0801 	addeq.w	r8, r8, #1
   89dfa:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   89dfe:	e55f      	b.n	898c0 <_vfiprintf_r+0xc4>
   89e00:	f047 0910 	orr.w	r9, r7, #16
   89e04:	f019 0f20 	tst.w	r9, #32
   89e08:	9c04      	ldr	r4, [sp, #16]
   89e0a:	f000 8200 	beq.w	8a20e <_vfiprintf_r+0xa12>
   89e0e:	3407      	adds	r4, #7
   89e10:	f024 0307 	bic.w	r3, r4, #7
   89e14:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89e18:	9304      	str	r3, [sp, #16]
   89e1a:	2301      	movs	r3, #1
   89e1c:	e63f      	b.n	89a9e <_vfiprintf_r+0x2a2>
   89e1e:	f647 0330 	movw	r3, #30768	; 0x7830
   89e22:	9c04      	ldr	r4, [sp, #16]
   89e24:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   89e28:	f854 2b04 	ldr.w	r2, [r4], #4
   89e2c:	4bbf      	ldr	r3, [pc, #764]	; (8a12c <_vfiprintf_r+0x930>)
   89e2e:	9404      	str	r4, [sp, #16]
   89e30:	9308      	str	r3, [sp, #32]
   89e32:	4614      	mov	r4, r2
   89e34:	2500      	movs	r5, #0
   89e36:	2302      	movs	r3, #2
   89e38:	f047 0902 	orr.w	r9, r7, #2
   89e3c:	e62f      	b.n	89a9e <_vfiprintf_r+0x2a2>
   89e3e:	06bb      	lsls	r3, r7, #26
   89e40:	f100 8232 	bmi.w	8a2a8 <_vfiprintf_r+0xaac>
   89e44:	06fe      	lsls	r6, r7, #27
   89e46:	f100 82cf 	bmi.w	8a3e8 <_vfiprintf_r+0xbec>
   89e4a:	067d      	lsls	r5, r7, #25
   89e4c:	f100 8301 	bmi.w	8a452 <_vfiprintf_r+0xc56>
   89e50:	05bc      	lsls	r4, r7, #22
   89e52:	f140 82c9 	bpl.w	8a3e8 <_vfiprintf_r+0xbec>
   89e56:	9c04      	ldr	r4, [sp, #16]
   89e58:	9a03      	ldr	r2, [sp, #12]
   89e5a:	f854 3b04 	ldr.w	r3, [r4], #4
   89e5e:	701a      	strb	r2, [r3, #0]
   89e60:	9404      	str	r4, [sp, #16]
   89e62:	e509      	b.n	89878 <_vfiprintf_r+0x7c>
   89e64:	46b9      	mov	r9, r7
   89e66:	2b01      	cmp	r3, #1
   89e68:	f43f adcb 	beq.w	89a02 <_vfiprintf_r+0x206>
   89e6c:	2b02      	cmp	r3, #2
   89e6e:	ae3a      	add	r6, sp, #232	; 0xe8
   89e70:	d113      	bne.n	89e9a <_vfiprintf_r+0x69e>
   89e72:	9808      	ldr	r0, [sp, #32]
   89e74:	0923      	lsrs	r3, r4, #4
   89e76:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   89e7a:	0929      	lsrs	r1, r5, #4
   89e7c:	f004 020f 	and.w	r2, r4, #15
   89e80:	460d      	mov	r5, r1
   89e82:	461c      	mov	r4, r3
   89e84:	5c83      	ldrb	r3, [r0, r2]
   89e86:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89e8a:	ea54 0305 	orrs.w	r3, r4, r5
   89e8e:	d1f1      	bne.n	89e74 <_vfiprintf_r+0x678>
   89e90:	ab3a      	add	r3, sp, #232	; 0xe8
   89e92:	1b9b      	subs	r3, r3, r6
   89e94:	464f      	mov	r7, r9
   89e96:	9301      	str	r3, [sp, #4]
   89e98:	e5c0      	b.n	89a1c <_vfiprintf_r+0x220>
   89e9a:	08e2      	lsrs	r2, r4, #3
   89e9c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   89ea0:	08e9      	lsrs	r1, r5, #3
   89ea2:	f004 0307 	and.w	r3, r4, #7
   89ea6:	460d      	mov	r5, r1
   89ea8:	4614      	mov	r4, r2
   89eaa:	3330      	adds	r3, #48	; 0x30
   89eac:	ea54 0105 	orrs.w	r1, r4, r5
   89eb0:	4632      	mov	r2, r6
   89eb2:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89eb6:	d1f0      	bne.n	89e9a <_vfiprintf_r+0x69e>
   89eb8:	f019 0f01 	tst.w	r9, #1
   89ebc:	d0e8      	beq.n	89e90 <_vfiprintf_r+0x694>
   89ebe:	2b30      	cmp	r3, #48	; 0x30
   89ec0:	d0e6      	beq.n	89e90 <_vfiprintf_r+0x694>
   89ec2:	2330      	movs	r3, #48	; 0x30
   89ec4:	3a02      	subs	r2, #2
   89ec6:	f806 3c01 	strb.w	r3, [r6, #-1]
   89eca:	ab3a      	add	r3, sp, #232	; 0xe8
   89ecc:	1a9b      	subs	r3, r3, r2
   89ece:	464f      	mov	r7, r9
   89ed0:	4616      	mov	r6, r2
   89ed2:	9301      	str	r3, [sp, #4]
   89ed4:	e5a2      	b.n	89a1c <_vfiprintf_r+0x220>
   89ed6:	2301      	movs	r3, #1
   89ed8:	9a01      	ldr	r2, [sp, #4]
   89eda:	930f      	str	r3, [sp, #60]	; 0x3c
   89edc:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   89ee0:	9212      	str	r2, [sp, #72]	; 0x48
   89ee2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89ee6:	f10a 0a08 	add.w	sl, sl, #8
   89eea:	e69d      	b.n	89c28 <_vfiprintf_r+0x42c>
   89eec:	9b02      	ldr	r3, [sp, #8]
   89eee:	1b5c      	subs	r4, r3, r5
   89ef0:	2c00      	cmp	r4, #0
   89ef2:	f77f ae7d 	ble.w	89bf0 <_vfiprintf_r+0x3f4>
   89ef6:	2c10      	cmp	r4, #16
   89ef8:	f340 82ea 	ble.w	8a4d0 <_vfiprintf_r+0xcd4>
   89efc:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8a130 <_vfiprintf_r+0x934>
   89f00:	4650      	mov	r0, sl
   89f02:	9706      	str	r7, [sp, #24]
   89f04:	46b2      	mov	sl, r6
   89f06:	464e      	mov	r6, r9
   89f08:	46c1      	mov	r9, r8
   89f0a:	46a8      	mov	r8, r5
   89f0c:	9d05      	ldr	r5, [sp, #20]
   89f0e:	e006      	b.n	89f1e <_vfiprintf_r+0x722>
   89f10:	f101 0c02 	add.w	ip, r1, #2
   89f14:	4619      	mov	r1, r3
   89f16:	3008      	adds	r0, #8
   89f18:	3c10      	subs	r4, #16
   89f1a:	2c10      	cmp	r4, #16
   89f1c:	dd1a      	ble.n	89f54 <_vfiprintf_r+0x758>
   89f1e:	2710      	movs	r7, #16
   89f20:	1c4b      	adds	r3, r1, #1
   89f22:	3210      	adds	r2, #16
   89f24:	2b07      	cmp	r3, #7
   89f26:	9210      	str	r2, [sp, #64]	; 0x40
   89f28:	6006      	str	r6, [r0, #0]
   89f2a:	6047      	str	r7, [r0, #4]
   89f2c:	930f      	str	r3, [sp, #60]	; 0x3c
   89f2e:	ddef      	ble.n	89f10 <_vfiprintf_r+0x714>
   89f30:	2a00      	cmp	r2, #0
   89f32:	d07b      	beq.n	8a02c <_vfiprintf_r+0x830>
   89f34:	4659      	mov	r1, fp
   89f36:	4628      	mov	r0, r5
   89f38:	aa0e      	add	r2, sp, #56	; 0x38
   89f3a:	f7ff fc23 	bl	89784 <__sprint_r.part.0>
   89f3e:	2800      	cmp	r0, #0
   89f40:	f47f adf6 	bne.w	89b30 <_vfiprintf_r+0x334>
   89f44:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89f48:	3c10      	subs	r4, #16
   89f4a:	2c10      	cmp	r4, #16
   89f4c:	a811      	add	r0, sp, #68	; 0x44
   89f4e:	f101 0c01 	add.w	ip, r1, #1
   89f52:	dce4      	bgt.n	89f1e <_vfiprintf_r+0x722>
   89f54:	4645      	mov	r5, r8
   89f56:	46c8      	mov	r8, r9
   89f58:	46b1      	mov	r9, r6
   89f5a:	4656      	mov	r6, sl
   89f5c:	4682      	mov	sl, r0
   89f5e:	9f06      	ldr	r7, [sp, #24]
   89f60:	4422      	add	r2, r4
   89f62:	f1bc 0f07 	cmp.w	ip, #7
   89f66:	e9ca 9400 	strd	r9, r4, [sl]
   89f6a:	9210      	str	r2, [sp, #64]	; 0x40
   89f6c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   89f70:	f340 817e 	ble.w	8a270 <_vfiprintf_r+0xa74>
   89f74:	2a00      	cmp	r2, #0
   89f76:	f000 825c 	beq.w	8a432 <_vfiprintf_r+0xc36>
   89f7a:	4659      	mov	r1, fp
   89f7c:	9805      	ldr	r0, [sp, #20]
   89f7e:	aa0e      	add	r2, sp, #56	; 0x38
   89f80:	f7ff fc00 	bl	89784 <__sprint_r.part.0>
   89f84:	2800      	cmp	r0, #0
   89f86:	f47f add3 	bne.w	89b30 <_vfiprintf_r+0x334>
   89f8a:	e9dd 3400 	ldrd	r3, r4, [sp]
   89f8e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89f92:	1b1c      	subs	r4, r3, r4
   89f94:	2c00      	cmp	r4, #0
   89f96:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89f9a:	f101 0001 	add.w	r0, r1, #1
   89f9e:	f77f ae2d 	ble.w	89bfc <_vfiprintf_r+0x400>
   89fa2:	2c10      	cmp	r4, #16
   89fa4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8a130 <_vfiprintf_r+0x934>
   89fa8:	dd2f      	ble.n	8a00a <_vfiprintf_r+0x80e>
   89faa:	46d4      	mov	ip, sl
   89fac:	46b2      	mov	sl, r6
   89fae:	464e      	mov	r6, r9
   89fb0:	46c1      	mov	r9, r8
   89fb2:	46a8      	mov	r8, r5
   89fb4:	9d05      	ldr	r5, [sp, #20]
   89fb6:	e006      	b.n	89fc6 <_vfiprintf_r+0x7ca>
   89fb8:	1c88      	adds	r0, r1, #2
   89fba:	4619      	mov	r1, r3
   89fbc:	f10c 0c08 	add.w	ip, ip, #8
   89fc0:	3c10      	subs	r4, #16
   89fc2:	2c10      	cmp	r4, #16
   89fc4:	dd1c      	ble.n	8a000 <_vfiprintf_r+0x804>
   89fc6:	2010      	movs	r0, #16
   89fc8:	1c4b      	adds	r3, r1, #1
   89fca:	3210      	adds	r2, #16
   89fcc:	2b07      	cmp	r3, #7
   89fce:	9210      	str	r2, [sp, #64]	; 0x40
   89fd0:	f8cc 6000 	str.w	r6, [ip]
   89fd4:	f8cc 0004 	str.w	r0, [ip, #4]
   89fd8:	930f      	str	r3, [sp, #60]	; 0x3c
   89fda:	dded      	ble.n	89fb8 <_vfiprintf_r+0x7bc>
   89fdc:	b30a      	cbz	r2, 8a022 <_vfiprintf_r+0x826>
   89fde:	4659      	mov	r1, fp
   89fe0:	4628      	mov	r0, r5
   89fe2:	aa0e      	add	r2, sp, #56	; 0x38
   89fe4:	f7ff fbce 	bl	89784 <__sprint_r.part.0>
   89fe8:	2800      	cmp	r0, #0
   89fea:	f47f ada1 	bne.w	89b30 <_vfiprintf_r+0x334>
   89fee:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89ff2:	3c10      	subs	r4, #16
   89ff4:	2c10      	cmp	r4, #16
   89ff6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   89ffa:	f101 0001 	add.w	r0, r1, #1
   89ffe:	dce2      	bgt.n	89fc6 <_vfiprintf_r+0x7ca>
   8a000:	4645      	mov	r5, r8
   8a002:	46c8      	mov	r8, r9
   8a004:	46b1      	mov	r9, r6
   8a006:	4656      	mov	r6, sl
   8a008:	46e2      	mov	sl, ip
   8a00a:	4422      	add	r2, r4
   8a00c:	2807      	cmp	r0, #7
   8a00e:	e9ca 9400 	strd	r9, r4, [sl]
   8a012:	9210      	str	r2, [sp, #64]	; 0x40
   8a014:	900f      	str	r0, [sp, #60]	; 0x3c
   8a016:	f300 80d3 	bgt.w	8a1c0 <_vfiprintf_r+0x9c4>
   8a01a:	f10a 0a08 	add.w	sl, sl, #8
   8a01e:	3001      	adds	r0, #1
   8a020:	e5ec      	b.n	89bfc <_vfiprintf_r+0x400>
   8a022:	2001      	movs	r0, #1
   8a024:	4611      	mov	r1, r2
   8a026:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a02a:	e7c9      	b.n	89fc0 <_vfiprintf_r+0x7c4>
   8a02c:	f04f 0c01 	mov.w	ip, #1
   8a030:	4611      	mov	r1, r2
   8a032:	a811      	add	r0, sp, #68	; 0x44
   8a034:	e770      	b.n	89f18 <_vfiprintf_r+0x71c>
   8a036:	2a00      	cmp	r2, #0
   8a038:	f000 80d3 	beq.w	8a1e2 <_vfiprintf_r+0x9e6>
   8a03c:	4659      	mov	r1, fp
   8a03e:	9805      	ldr	r0, [sp, #20]
   8a040:	aa0e      	add	r2, sp, #56	; 0x38
   8a042:	f7ff fb9f 	bl	89784 <__sprint_r.part.0>
   8a046:	2800      	cmp	r0, #0
   8a048:	f47f ad72 	bne.w	89b30 <_vfiprintf_r+0x334>
   8a04c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a050:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a054:	1c48      	adds	r0, r1, #1
   8a056:	e5ac      	b.n	89bb2 <_vfiprintf_r+0x3b6>
   8a058:	2202      	movs	r2, #2
   8a05a:	2001      	movs	r0, #1
   8a05c:	ab0d      	add	r3, sp, #52	; 0x34
   8a05e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8a062:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a066:	4601      	mov	r1, r0
   8a068:	f10a 0a08 	add.w	sl, sl, #8
   8a06c:	1c48      	adds	r0, r1, #1
   8a06e:	e5bb      	b.n	89be8 <_vfiprintf_r+0x3ec>
   8a070:	2c10      	cmp	r4, #16
   8a072:	f340 8214 	ble.w	8a49e <_vfiprintf_r+0xca2>
   8a076:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a07a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8a134 <_vfiprintf_r+0x938>
   8a07e:	46d4      	mov	ip, sl
   8a080:	46b2      	mov	sl, r6
   8a082:	464e      	mov	r6, r9
   8a084:	46c1      	mov	r9, r8
   8a086:	46a8      	mov	r8, r5
   8a088:	9d05      	ldr	r5, [sp, #20]
   8a08a:	e006      	b.n	8a09a <_vfiprintf_r+0x89e>
   8a08c:	1c99      	adds	r1, r3, #2
   8a08e:	4603      	mov	r3, r0
   8a090:	f10c 0c08 	add.w	ip, ip, #8
   8a094:	3c10      	subs	r4, #16
   8a096:	2c10      	cmp	r4, #16
   8a098:	dd1c      	ble.n	8a0d4 <_vfiprintf_r+0x8d8>
   8a09a:	2110      	movs	r1, #16
   8a09c:	1c58      	adds	r0, r3, #1
   8a09e:	3210      	adds	r2, #16
   8a0a0:	2807      	cmp	r0, #7
   8a0a2:	9210      	str	r2, [sp, #64]	; 0x40
   8a0a4:	f8cc 6000 	str.w	r6, [ip]
   8a0a8:	f8cc 1004 	str.w	r1, [ip, #4]
   8a0ac:	900f      	str	r0, [sp, #60]	; 0x3c
   8a0ae:	dded      	ble.n	8a08c <_vfiprintf_r+0x890>
   8a0b0:	b30a      	cbz	r2, 8a0f6 <_vfiprintf_r+0x8fa>
   8a0b2:	4659      	mov	r1, fp
   8a0b4:	4628      	mov	r0, r5
   8a0b6:	aa0e      	add	r2, sp, #56	; 0x38
   8a0b8:	f7ff fb64 	bl	89784 <__sprint_r.part.0>
   8a0bc:	2800      	cmp	r0, #0
   8a0be:	f47f ad37 	bne.w	89b30 <_vfiprintf_r+0x334>
   8a0c2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a0c6:	3c10      	subs	r4, #16
   8a0c8:	2c10      	cmp	r4, #16
   8a0ca:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a0ce:	f103 0101 	add.w	r1, r3, #1
   8a0d2:	dce2      	bgt.n	8a09a <_vfiprintf_r+0x89e>
   8a0d4:	4645      	mov	r5, r8
   8a0d6:	46c8      	mov	r8, r9
   8a0d8:	46b1      	mov	r9, r6
   8a0da:	4656      	mov	r6, sl
   8a0dc:	46e2      	mov	sl, ip
   8a0de:	4422      	add	r2, r4
   8a0e0:	2907      	cmp	r1, #7
   8a0e2:	e9ca 9400 	strd	r9, r4, [sl]
   8a0e6:	9210      	str	r2, [sp, #64]	; 0x40
   8a0e8:	910f      	str	r1, [sp, #60]	; 0x3c
   8a0ea:	f300 80a8 	bgt.w	8a23e <_vfiprintf_r+0xa42>
   8a0ee:	f10a 0a08 	add.w	sl, sl, #8
   8a0f2:	1c48      	adds	r0, r1, #1
   8a0f4:	e54b      	b.n	89b8e <_vfiprintf_r+0x392>
   8a0f6:	4613      	mov	r3, r2
   8a0f8:	2101      	movs	r1, #1
   8a0fa:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a0fe:	e7c9      	b.n	8a094 <_vfiprintf_r+0x898>
   8a100:	0778      	lsls	r0, r7, #29
   8a102:	920f      	str	r2, [sp, #60]	; 0x3c
   8a104:	d554      	bpl.n	8a1b0 <_vfiprintf_r+0x9b4>
   8a106:	9b02      	ldr	r3, [sp, #8]
   8a108:	1b5c      	subs	r4, r3, r5
   8a10a:	2c00      	cmp	r4, #0
   8a10c:	dd50      	ble.n	8a1b0 <_vfiprintf_r+0x9b4>
   8a10e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a112:	2c10      	cmp	r4, #16
   8a114:	f340 81d7 	ble.w	8a4c6 <_vfiprintf_r+0xcca>
   8a118:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8a134 <_vfiprintf_r+0x938>
   8a11c:	2610      	movs	r6, #16
   8a11e:	464b      	mov	r3, r9
   8a120:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8a122:	46a9      	mov	r9, r5
   8a124:	9f05      	ldr	r7, [sp, #20]
   8a126:	461d      	mov	r5, r3
   8a128:	e00d      	b.n	8a146 <_vfiprintf_r+0x94a>
   8a12a:	bf00      	nop
   8a12c:	0008e650 	.word	0x0008e650
   8a130:	0008e6b4 	.word	0x0008e6b4
   8a134:	0008e6a4 	.word	0x0008e6a4
   8a138:	1c88      	adds	r0, r1, #2
   8a13a:	4619      	mov	r1, r3
   8a13c:	f10a 0a08 	add.w	sl, sl, #8
   8a140:	3c10      	subs	r4, #16
   8a142:	2c10      	cmp	r4, #16
   8a144:	dd19      	ble.n	8a17a <_vfiprintf_r+0x97e>
   8a146:	1c4b      	adds	r3, r1, #1
   8a148:	3210      	adds	r2, #16
   8a14a:	2b07      	cmp	r3, #7
   8a14c:	e9ca 5600 	strd	r5, r6, [sl]
   8a150:	9210      	str	r2, [sp, #64]	; 0x40
   8a152:	930f      	str	r3, [sp, #60]	; 0x3c
   8a154:	ddf0      	ble.n	8a138 <_vfiprintf_r+0x93c>
   8a156:	b332      	cbz	r2, 8a1a6 <_vfiprintf_r+0x9aa>
   8a158:	4659      	mov	r1, fp
   8a15a:	4638      	mov	r0, r7
   8a15c:	aa0e      	add	r2, sp, #56	; 0x38
   8a15e:	f7ff fb11 	bl	89784 <__sprint_r.part.0>
   8a162:	2800      	cmp	r0, #0
   8a164:	f47f ace4 	bne.w	89b30 <_vfiprintf_r+0x334>
   8a168:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a16c:	3c10      	subs	r4, #16
   8a16e:	2c10      	cmp	r4, #16
   8a170:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a174:	f101 0001 	add.w	r0, r1, #1
   8a178:	dce5      	bgt.n	8a146 <_vfiprintf_r+0x94a>
   8a17a:	462b      	mov	r3, r5
   8a17c:	464d      	mov	r5, r9
   8a17e:	4699      	mov	r9, r3
   8a180:	4422      	add	r2, r4
   8a182:	2807      	cmp	r0, #7
   8a184:	e9ca 9400 	strd	r9, r4, [sl]
   8a188:	9210      	str	r2, [sp, #64]	; 0x40
   8a18a:	900f      	str	r0, [sp, #60]	; 0x3c
   8a18c:	f77f ad53 	ble.w	89c36 <_vfiprintf_r+0x43a>
   8a190:	b172      	cbz	r2, 8a1b0 <_vfiprintf_r+0x9b4>
   8a192:	4659      	mov	r1, fp
   8a194:	9805      	ldr	r0, [sp, #20]
   8a196:	aa0e      	add	r2, sp, #56	; 0x38
   8a198:	f7ff faf4 	bl	89784 <__sprint_r.part.0>
   8a19c:	2800      	cmp	r0, #0
   8a19e:	f47f acc7 	bne.w	89b30 <_vfiprintf_r+0x334>
   8a1a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a1a4:	e547      	b.n	89c36 <_vfiprintf_r+0x43a>
   8a1a6:	2001      	movs	r0, #1
   8a1a8:	4611      	mov	r1, r2
   8a1aa:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a1ae:	e7c7      	b.n	8a140 <_vfiprintf_r+0x944>
   8a1b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a1b4:	42aa      	cmp	r2, r5
   8a1b6:	bfac      	ite	ge
   8a1b8:	189b      	addge	r3, r3, r2
   8a1ba:	195b      	addlt	r3, r3, r5
   8a1bc:	9303      	str	r3, [sp, #12]
   8a1be:	e544      	b.n	89c4a <_vfiprintf_r+0x44e>
   8a1c0:	2a00      	cmp	r2, #0
   8a1c2:	f43f ae88 	beq.w	89ed6 <_vfiprintf_r+0x6da>
   8a1c6:	4659      	mov	r1, fp
   8a1c8:	9805      	ldr	r0, [sp, #20]
   8a1ca:	aa0e      	add	r2, sp, #56	; 0x38
   8a1cc:	f7ff fada 	bl	89784 <__sprint_r.part.0>
   8a1d0:	2800      	cmp	r0, #0
   8a1d2:	f47f acad 	bne.w	89b30 <_vfiprintf_r+0x334>
   8a1d6:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   8a1da:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a1de:	3001      	adds	r0, #1
   8a1e0:	e50c      	b.n	89bfc <_vfiprintf_r+0x400>
   8a1e2:	9b07      	ldr	r3, [sp, #28]
   8a1e4:	2b00      	cmp	r3, #0
   8a1e6:	d16b      	bne.n	8a2c0 <_vfiprintf_r+0xac4>
   8a1e8:	2001      	movs	r0, #1
   8a1ea:	4611      	mov	r1, r2
   8a1ec:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a1f0:	e4fa      	b.n	89be8 <_vfiprintf_r+0x3ec>
   8a1f2:	920f      	str	r2, [sp, #60]	; 0x3c
   8a1f4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a1f8:	e481      	b.n	89afe <_vfiprintf_r+0x302>
   8a1fa:	9b00      	ldr	r3, [sp, #0]
   8a1fc:	2b00      	cmp	r3, #0
   8a1fe:	f47f ac05 	bne.w	89a0c <_vfiprintf_r+0x210>
   8a202:	464f      	mov	r7, r9
   8a204:	2300      	movs	r3, #0
   8a206:	ae3a      	add	r6, sp, #232	; 0xe8
   8a208:	9300      	str	r3, [sp, #0]
   8a20a:	9301      	str	r3, [sp, #4]
   8a20c:	e406      	b.n	89a1c <_vfiprintf_r+0x220>
   8a20e:	f854 2b04 	ldr.w	r2, [r4], #4
   8a212:	f019 0f10 	tst.w	r9, #16
   8a216:	f04f 0301 	mov.w	r3, #1
   8a21a:	9404      	str	r4, [sp, #16]
   8a21c:	d132      	bne.n	8a284 <_vfiprintf_r+0xa88>
   8a21e:	f019 0f40 	tst.w	r9, #64	; 0x40
   8a222:	d02b      	beq.n	8a27c <_vfiprintf_r+0xa80>
   8a224:	2500      	movs	r5, #0
   8a226:	b294      	uxth	r4, r2
   8a228:	e439      	b.n	89a9e <_vfiprintf_r+0x2a2>
   8a22a:	232d      	movs	r3, #45	; 0x2d
   8a22c:	4264      	negs	r4, r4
   8a22e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8a232:	46b9      	mov	r9, r7
   8a234:	f04f 0301 	mov.w	r3, #1
   8a238:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8a23c:	e433      	b.n	89aa6 <_vfiprintf_r+0x2aa>
   8a23e:	2a00      	cmp	r2, #0
   8a240:	d06f      	beq.n	8a322 <_vfiprintf_r+0xb26>
   8a242:	4659      	mov	r1, fp
   8a244:	9805      	ldr	r0, [sp, #20]
   8a246:	aa0e      	add	r2, sp, #56	; 0x38
   8a248:	f7ff fa9c 	bl	89784 <__sprint_r.part.0>
   8a24c:	2800      	cmp	r0, #0
   8a24e:	f47f ac6f 	bne.w	89b30 <_vfiprintf_r+0x334>
   8a252:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a256:	e497      	b.n	89b88 <_vfiprintf_r+0x38c>
   8a258:	ae3a      	add	r6, sp, #232	; 0xe8
   8a25a:	f7ff bbdf 	b.w	89a1c <_vfiprintf_r+0x220>
   8a25e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a262:	f001 fed7 	bl	8c014 <__retarget_lock_acquire_recursive>
   8a266:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8a26a:	b28a      	uxth	r2, r1
   8a26c:	f7ff badd 	b.w	8982a <_vfiprintf_r+0x2e>
   8a270:	4661      	mov	r1, ip
   8a272:	f10a 0a08 	add.w	sl, sl, #8
   8a276:	f10c 0001 	add.w	r0, ip, #1
   8a27a:	e4b9      	b.n	89bf0 <_vfiprintf_r+0x3f4>
   8a27c:	f419 7f00 	tst.w	r9, #512	; 0x200
   8a280:	f040 80ef 	bne.w	8a462 <_vfiprintf_r+0xc66>
   8a284:	4614      	mov	r4, r2
   8a286:	2500      	movs	r5, #0
   8a288:	e409      	b.n	89a9e <_vfiprintf_r+0x2a2>
   8a28a:	05be      	lsls	r6, r7, #22
   8a28c:	f100 80f7 	bmi.w	8a47e <_vfiprintf_r+0xc82>
   8a290:	461c      	mov	r4, r3
   8a292:	2500      	movs	r5, #0
   8a294:	e400      	b.n	89a98 <_vfiprintf_r+0x29c>
   8a296:	05ba      	lsls	r2, r7, #22
   8a298:	f100 80ea 	bmi.w	8a470 <_vfiprintf_r+0xc74>
   8a29c:	17e5      	asrs	r5, r4, #31
   8a29e:	9304      	str	r3, [sp, #16]
   8a2a0:	4622      	mov	r2, r4
   8a2a2:	462b      	mov	r3, r5
   8a2a4:	f7ff bb9e 	b.w	899e4 <_vfiprintf_r+0x1e8>
   8a2a8:	9b03      	ldr	r3, [sp, #12]
   8a2aa:	9c04      	ldr	r4, [sp, #16]
   8a2ac:	17dd      	asrs	r5, r3, #31
   8a2ae:	461a      	mov	r2, r3
   8a2b0:	462b      	mov	r3, r5
   8a2b2:	f854 1b04 	ldr.w	r1, [r4], #4
   8a2b6:	e9c1 2300 	strd	r2, r3, [r1]
   8a2ba:	9404      	str	r4, [sp, #16]
   8a2bc:	f7ff badc 	b.w	89878 <_vfiprintf_r+0x7c>
   8a2c0:	2202      	movs	r2, #2
   8a2c2:	ab0d      	add	r3, sp, #52	; 0x34
   8a2c4:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8a2c8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a2cc:	e6cc      	b.n	8a068 <_vfiprintf_r+0x86c>
   8a2ce:	46b9      	mov	r9, r7
   8a2d0:	e598      	b.n	89e04 <_vfiprintf_r+0x608>
   8a2d2:	4a90      	ldr	r2, [pc, #576]	; (8a514 <_vfiprintf_r+0xd18>)
   8a2d4:	9208      	str	r2, [sp, #32]
   8a2d6:	06bd      	lsls	r5, r7, #26
   8a2d8:	9c04      	ldr	r4, [sp, #16]
   8a2da:	d530      	bpl.n	8a33e <_vfiprintf_r+0xb42>
   8a2dc:	3407      	adds	r4, #7
   8a2de:	f024 0207 	bic.w	r2, r4, #7
   8a2e2:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   8a2e6:	9204      	str	r2, [sp, #16]
   8a2e8:	07fe      	lsls	r6, r7, #31
   8a2ea:	d509      	bpl.n	8a300 <_vfiprintf_r+0xb04>
   8a2ec:	ea54 0205 	orrs.w	r2, r4, r5
   8a2f0:	d006      	beq.n	8a300 <_vfiprintf_r+0xb04>
   8a2f2:	2230      	movs	r2, #48	; 0x30
   8a2f4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   8a2f8:	f047 0702 	orr.w	r7, r7, #2
   8a2fc:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   8a300:	2302      	movs	r3, #2
   8a302:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8a306:	f7ff bbca 	b.w	89a9e <_vfiprintf_r+0x2a2>
   8a30a:	4a83      	ldr	r2, [pc, #524]	; (8a518 <_vfiprintf_r+0xd1c>)
   8a30c:	9208      	str	r2, [sp, #32]
   8a30e:	e7e2      	b.n	8a2d6 <_vfiprintf_r+0xada>
   8a310:	4630      	mov	r0, r6
   8a312:	f003 f879 	bl	8d408 <strlen>
   8a316:	2300      	movs	r3, #0
   8a318:	9404      	str	r4, [sp, #16]
   8a31a:	9001      	str	r0, [sp, #4]
   8a31c:	9300      	str	r3, [sp, #0]
   8a31e:	f7ff bb7d 	b.w	89a1c <_vfiprintf_r+0x220>
   8a322:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   8a326:	2900      	cmp	r1, #0
   8a328:	f040 8089 	bne.w	8a43e <_vfiprintf_r+0xc42>
   8a32c:	9b07      	ldr	r3, [sp, #28]
   8a32e:	2b00      	cmp	r3, #0
   8a330:	f47f ae92 	bne.w	8a058 <_vfiprintf_r+0x85c>
   8a334:	4611      	mov	r1, r2
   8a336:	2001      	movs	r0, #1
   8a338:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a33c:	e458      	b.n	89bf0 <_vfiprintf_r+0x3f4>
   8a33e:	f854 2b04 	ldr.w	r2, [r4], #4
   8a342:	9404      	str	r4, [sp, #16]
   8a344:	06fc      	lsls	r4, r7, #27
   8a346:	d407      	bmi.n	8a358 <_vfiprintf_r+0xb5c>
   8a348:	0678      	lsls	r0, r7, #25
   8a34a:	d502      	bpl.n	8a352 <_vfiprintf_r+0xb56>
   8a34c:	2500      	movs	r5, #0
   8a34e:	b294      	uxth	r4, r2
   8a350:	e7ca      	b.n	8a2e8 <_vfiprintf_r+0xaec>
   8a352:	05b9      	lsls	r1, r7, #22
   8a354:	f100 8089 	bmi.w	8a46a <_vfiprintf_r+0xc6e>
   8a358:	4614      	mov	r4, r2
   8a35a:	2500      	movs	r5, #0
   8a35c:	e7c4      	b.n	8a2e8 <_vfiprintf_r+0xaec>
   8a35e:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   8a362:	f8cd 9004 	str.w	r9, [sp, #4]
   8a366:	f8cd 8018 	str.w	r8, [sp, #24]
   8a36a:	2700      	movs	r7, #0
   8a36c:	4698      	mov	r8, r3
   8a36e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   8a372:	ae3a      	add	r6, sp, #232	; 0xe8
   8a374:	e00b      	b.n	8a38e <_vfiprintf_r+0xb92>
   8a376:	220a      	movs	r2, #10
   8a378:	2300      	movs	r3, #0
   8a37a:	4620      	mov	r0, r4
   8a37c:	4629      	mov	r1, r5
   8a37e:	f7fd f8e5 	bl	8754c <__aeabi_uldivmod>
   8a382:	2d00      	cmp	r5, #0
   8a384:	bf08      	it	eq
   8a386:	2c0a      	cmpeq	r4, #10
   8a388:	d319      	bcc.n	8a3be <_vfiprintf_r+0xbc2>
   8a38a:	4604      	mov	r4, r0
   8a38c:	460d      	mov	r5, r1
   8a38e:	220a      	movs	r2, #10
   8a390:	2300      	movs	r3, #0
   8a392:	4620      	mov	r0, r4
   8a394:	4629      	mov	r1, r5
   8a396:	f7fd f8d9 	bl	8754c <__aeabi_uldivmod>
   8a39a:	3230      	adds	r2, #48	; 0x30
   8a39c:	f806 2c01 	strb.w	r2, [r6, #-1]
   8a3a0:	3701      	adds	r7, #1
   8a3a2:	3e01      	subs	r6, #1
   8a3a4:	f1b8 0f00 	cmp.w	r8, #0
   8a3a8:	d0e5      	beq.n	8a376 <_vfiprintf_r+0xb7a>
   8a3aa:	f899 3000 	ldrb.w	r3, [r9]
   8a3ae:	42bb      	cmp	r3, r7
   8a3b0:	d1e1      	bne.n	8a376 <_vfiprintf_r+0xb7a>
   8a3b2:	2fff      	cmp	r7, #255	; 0xff
   8a3b4:	d0df      	beq.n	8a376 <_vfiprintf_r+0xb7a>
   8a3b6:	2d00      	cmp	r5, #0
   8a3b8:	bf08      	it	eq
   8a3ba:	2c0a      	cmpeq	r4, #10
   8a3bc:	d225      	bcs.n	8a40a <_vfiprintf_r+0xc0e>
   8a3be:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   8a3c2:	ab3a      	add	r3, sp, #232	; 0xe8
   8a3c4:	f8dd 9004 	ldr.w	r9, [sp, #4]
   8a3c8:	1b9b      	subs	r3, r3, r6
   8a3ca:	464f      	mov	r7, r9
   8a3cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   8a3d0:	9301      	str	r3, [sp, #4]
   8a3d2:	f7ff bb23 	b.w	89a1c <_vfiprintf_r+0x220>
   8a3d6:	46b9      	mov	r9, r7
   8a3d8:	f7ff bb13 	b.w	89a02 <_vfiprintf_r+0x206>
   8a3dc:	2b01      	cmp	r3, #1
   8a3de:	46b9      	mov	r9, r7
   8a3e0:	f47f ad44 	bne.w	89e6c <_vfiprintf_r+0x670>
   8a3e4:	f7ff bb12 	b.w	89a0c <_vfiprintf_r+0x210>
   8a3e8:	9c04      	ldr	r4, [sp, #16]
   8a3ea:	9a03      	ldr	r2, [sp, #12]
   8a3ec:	f854 3b04 	ldr.w	r3, [r4], #4
   8a3f0:	601a      	str	r2, [r3, #0]
   8a3f2:	9404      	str	r4, [sp, #16]
   8a3f4:	f7ff ba40 	b.w	89878 <_vfiprintf_r+0x7c>
   8a3f8:	9d00      	ldr	r5, [sp, #0]
   8a3fa:	4e48      	ldr	r6, [pc, #288]	; (8a51c <_vfiprintf_r+0xd20>)
   8a3fc:	2d06      	cmp	r5, #6
   8a3fe:	bf28      	it	cs
   8a400:	2506      	movcs	r5, #6
   8a402:	9404      	str	r4, [sp, #16]
   8a404:	9501      	str	r5, [sp, #4]
   8a406:	f7ff bbaf 	b.w	89b68 <_vfiprintf_r+0x36c>
   8a40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a40c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8a40e:	1af6      	subs	r6, r6, r3
   8a410:	461a      	mov	r2, r3
   8a412:	4630      	mov	r0, r6
   8a414:	f003 f826 	bl	8d464 <strncpy>
   8a418:	f899 3001 	ldrb.w	r3, [r9, #1]
   8a41c:	b10b      	cbz	r3, 8a422 <_vfiprintf_r+0xc26>
   8a41e:	f109 0901 	add.w	r9, r9, #1
   8a422:	220a      	movs	r2, #10
   8a424:	2300      	movs	r3, #0
   8a426:	4620      	mov	r0, r4
   8a428:	4629      	mov	r1, r5
   8a42a:	f7fd f88f 	bl	8754c <__aeabi_uldivmod>
   8a42e:	2700      	movs	r7, #0
   8a430:	e7ab      	b.n	8a38a <_vfiprintf_r+0xb8e>
   8a432:	2001      	movs	r0, #1
   8a434:	4611      	mov	r1, r2
   8a436:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a43a:	f7ff bbd9 	b.w	89bf0 <_vfiprintf_r+0x3f4>
   8a43e:	2201      	movs	r2, #1
   8a440:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   8a444:	4610      	mov	r0, r2
   8a446:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8a44a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a44e:	f7ff bbac 	b.w	89baa <_vfiprintf_r+0x3ae>
   8a452:	9c04      	ldr	r4, [sp, #16]
   8a454:	9a03      	ldr	r2, [sp, #12]
   8a456:	f854 3b04 	ldr.w	r3, [r4], #4
   8a45a:	801a      	strh	r2, [r3, #0]
   8a45c:	9404      	str	r4, [sp, #16]
   8a45e:	f7ff ba0b 	b.w	89878 <_vfiprintf_r+0x7c>
   8a462:	2500      	movs	r5, #0
   8a464:	b2d4      	uxtb	r4, r2
   8a466:	f7ff bb1a 	b.w	89a9e <_vfiprintf_r+0x2a2>
   8a46a:	2500      	movs	r5, #0
   8a46c:	b2d4      	uxtb	r4, r2
   8a46e:	e73b      	b.n	8a2e8 <_vfiprintf_r+0xaec>
   8a470:	b264      	sxtb	r4, r4
   8a472:	17e5      	asrs	r5, r4, #31
   8a474:	9304      	str	r3, [sp, #16]
   8a476:	4622      	mov	r2, r4
   8a478:	462b      	mov	r3, r5
   8a47a:	f7ff bab3 	b.w	899e4 <_vfiprintf_r+0x1e8>
   8a47e:	2500      	movs	r5, #0
   8a480:	b2dc      	uxtb	r4, r3
   8a482:	f7ff bb09 	b.w	89a98 <_vfiprintf_r+0x29c>
   8a486:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a48a:	f001 fdc5 	bl	8c018 <__retarget_lock_release_recursive>
   8a48e:	f7ff baec 	b.w	89a6a <_vfiprintf_r+0x26e>
   8a492:	9b00      	ldr	r3, [sp, #0]
   8a494:	9404      	str	r4, [sp, #16]
   8a496:	9301      	str	r3, [sp, #4]
   8a498:	9000      	str	r0, [sp, #0]
   8a49a:	f7ff babf 	b.w	89a1c <_vfiprintf_r+0x220>
   8a49e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a4a2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8a520 <_vfiprintf_r+0xd24>
   8a4a6:	3101      	adds	r1, #1
   8a4a8:	e619      	b.n	8a0de <_vfiprintf_r+0x8e2>
   8a4aa:	2200      	movs	r2, #0
   8a4ac:	9200      	str	r2, [sp, #0]
   8a4ae:	f7ff ba09 	b.w	898c4 <_vfiprintf_r+0xc8>
   8a4b2:	4659      	mov	r1, fp
   8a4b4:	9805      	ldr	r0, [sp, #20]
   8a4b6:	aa0e      	add	r2, sp, #56	; 0x38
   8a4b8:	f7ff f964 	bl	89784 <__sprint_r.part.0>
   8a4bc:	2800      	cmp	r0, #0
   8a4be:	f43f abd2 	beq.w	89c66 <_vfiprintf_r+0x46a>
   8a4c2:	f7ff bb36 	b.w	89b32 <_vfiprintf_r+0x336>
   8a4c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8a4c8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8a520 <_vfiprintf_r+0xd24>
   8a4cc:	3001      	adds	r0, #1
   8a4ce:	e657      	b.n	8a180 <_vfiprintf_r+0x984>
   8a4d0:	4684      	mov	ip, r0
   8a4d2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8a524 <_vfiprintf_r+0xd28>
   8a4d6:	e543      	b.n	89f60 <_vfiprintf_r+0x764>
   8a4d8:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8a4dc:	07db      	lsls	r3, r3, #31
   8a4de:	d407      	bmi.n	8a4f0 <_vfiprintf_r+0xcf4>
   8a4e0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8a4e4:	059f      	lsls	r7, r3, #22
   8a4e6:	d403      	bmi.n	8a4f0 <_vfiprintf_r+0xcf4>
   8a4e8:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a4ec:	f001 fd94 	bl	8c018 <__retarget_lock_release_recursive>
   8a4f0:	f04f 33ff 	mov.w	r3, #4294967295
   8a4f4:	9303      	str	r3, [sp, #12]
   8a4f6:	f7ff bb27 	b.w	89b48 <_vfiprintf_r+0x34c>
   8a4fa:	9a04      	ldr	r2, [sp, #16]
   8a4fc:	f898 3001 	ldrb.w	r3, [r8, #1]
   8a500:	f852 0b04 	ldr.w	r0, [r2], #4
   8a504:	4688      	mov	r8, r1
   8a506:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8a50a:	9000      	str	r0, [sp, #0]
   8a50c:	9204      	str	r2, [sp, #16]
   8a50e:	f7ff b9d7 	b.w	898c0 <_vfiprintf_r+0xc4>
   8a512:	bf00      	nop
   8a514:	0008e664 	.word	0x0008e664
   8a518:	0008e650 	.word	0x0008e650
   8a51c:	0008e678 	.word	0x0008e678
   8a520:	0008e6a4 	.word	0x0008e6a4
   8a524:	0008e6b4 	.word	0x0008e6b4

0008a528 <__sbprintf>:
   8a528:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a52a:	460c      	mov	r4, r1
   8a52c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8a530:	f04f 0e00 	mov.w	lr, #0
   8a534:	4615      	mov	r5, r2
   8a536:	4606      	mov	r6, r0
   8a538:	461f      	mov	r7, r3
   8a53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a53c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8a540:	89e2      	ldrh	r2, [r4, #14]
   8a542:	8989      	ldrh	r1, [r1, #12]
   8a544:	9319      	str	r3, [sp, #100]	; 0x64
   8a546:	69e3      	ldr	r3, [r4, #28]
   8a548:	f8ad 200e 	strh.w	r2, [sp, #14]
   8a54c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   8a54e:	f021 0102 	bic.w	r1, r1, #2
   8a552:	9307      	str	r3, [sp, #28]
   8a554:	a816      	add	r0, sp, #88	; 0x58
   8a556:	ab1a      	add	r3, sp, #104	; 0x68
   8a558:	f8ad 100c 	strh.w	r1, [sp, #12]
   8a55c:	f8cd e018 	str.w	lr, [sp, #24]
   8a560:	9209      	str	r2, [sp, #36]	; 0x24
   8a562:	9300      	str	r3, [sp, #0]
   8a564:	9304      	str	r3, [sp, #16]
   8a566:	f8cd c008 	str.w	ip, [sp, #8]
   8a56a:	f8cd c014 	str.w	ip, [sp, #20]
   8a56e:	f001 fd4d 	bl	8c00c <__retarget_lock_init_recursive>
   8a572:	462a      	mov	r2, r5
   8a574:	463b      	mov	r3, r7
   8a576:	4669      	mov	r1, sp
   8a578:	4630      	mov	r0, r6
   8a57a:	f7ff f93f 	bl	897fc <_vfiprintf_r>
   8a57e:	1e05      	subs	r5, r0, #0
   8a580:	db07      	blt.n	8a592 <__sbprintf+0x6a>
   8a582:	4630      	mov	r0, r6
   8a584:	4669      	mov	r1, sp
   8a586:	f001 f917 	bl	8b7b8 <_fflush_r>
   8a58a:	2800      	cmp	r0, #0
   8a58c:	bf18      	it	ne
   8a58e:	f04f 35ff 	movne.w	r5, #4294967295
   8a592:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8a596:	065b      	lsls	r3, r3, #25
   8a598:	d503      	bpl.n	8a5a2 <__sbprintf+0x7a>
   8a59a:	89a3      	ldrh	r3, [r4, #12]
   8a59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a5a0:	81a3      	strh	r3, [r4, #12]
   8a5a2:	9816      	ldr	r0, [sp, #88]	; 0x58
   8a5a4:	f001 fd34 	bl	8c010 <__retarget_lock_close_recursive>
   8a5a8:	4628      	mov	r0, r5
   8a5aa:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8a5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008a5b0 <__swsetup_r>:
   8a5b0:	b538      	push	{r3, r4, r5, lr}
   8a5b2:	4b32      	ldr	r3, [pc, #200]	; (8a67c <__swsetup_r+0xcc>)
   8a5b4:	4605      	mov	r5, r0
   8a5b6:	6818      	ldr	r0, [r3, #0]
   8a5b8:	460c      	mov	r4, r1
   8a5ba:	b110      	cbz	r0, 8a5c2 <__swsetup_r+0x12>
   8a5bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a5be:	2b00      	cmp	r3, #0
   8a5c0:	d03c      	beq.n	8a63c <__swsetup_r+0x8c>
   8a5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a5c6:	0718      	lsls	r0, r3, #28
   8a5c8:	b29a      	uxth	r2, r3
   8a5ca:	d50c      	bpl.n	8a5e6 <__swsetup_r+0x36>
   8a5cc:	6921      	ldr	r1, [r4, #16]
   8a5ce:	b1a9      	cbz	r1, 8a5fc <__swsetup_r+0x4c>
   8a5d0:	f012 0001 	ands.w	r0, r2, #1
   8a5d4:	d022      	beq.n	8a61c <__swsetup_r+0x6c>
   8a5d6:	2500      	movs	r5, #0
   8a5d8:	6960      	ldr	r0, [r4, #20]
   8a5da:	60a5      	str	r5, [r4, #8]
   8a5dc:	4240      	negs	r0, r0
   8a5de:	61a0      	str	r0, [r4, #24]
   8a5e0:	b311      	cbz	r1, 8a628 <__swsetup_r+0x78>
   8a5e2:	2000      	movs	r0, #0
   8a5e4:	bd38      	pop	{r3, r4, r5, pc}
   8a5e6:	06d1      	lsls	r1, r2, #27
   8a5e8:	d53f      	bpl.n	8a66a <__swsetup_r+0xba>
   8a5ea:	0752      	lsls	r2, r2, #29
   8a5ec:	d429      	bmi.n	8a642 <__swsetup_r+0x92>
   8a5ee:	6921      	ldr	r1, [r4, #16]
   8a5f0:	f043 0308 	orr.w	r3, r3, #8
   8a5f4:	81a3      	strh	r3, [r4, #12]
   8a5f6:	b29a      	uxth	r2, r3
   8a5f8:	2900      	cmp	r1, #0
   8a5fa:	d1e9      	bne.n	8a5d0 <__swsetup_r+0x20>
   8a5fc:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8a600:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8a604:	d0e4      	beq.n	8a5d0 <__swsetup_r+0x20>
   8a606:	4628      	mov	r0, r5
   8a608:	4621      	mov	r1, r4
   8a60a:	f001 fd35 	bl	8c078 <__smakebuf_r>
   8a60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a612:	6921      	ldr	r1, [r4, #16]
   8a614:	b29a      	uxth	r2, r3
   8a616:	f012 0001 	ands.w	r0, r2, #1
   8a61a:	d1dc      	bne.n	8a5d6 <__swsetup_r+0x26>
   8a61c:	0795      	lsls	r5, r2, #30
   8a61e:	bf58      	it	pl
   8a620:	6960      	ldrpl	r0, [r4, #20]
   8a622:	60a0      	str	r0, [r4, #8]
   8a624:	2900      	cmp	r1, #0
   8a626:	d1dc      	bne.n	8a5e2 <__swsetup_r+0x32>
   8a628:	0612      	lsls	r2, r2, #24
   8a62a:	bf58      	it	pl
   8a62c:	4608      	movpl	r0, r1
   8a62e:	d5d9      	bpl.n	8a5e4 <__swsetup_r+0x34>
   8a630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a634:	f04f 30ff 	mov.w	r0, #4294967295
   8a638:	81a3      	strh	r3, [r4, #12]
   8a63a:	bd38      	pop	{r3, r4, r5, pc}
   8a63c:	f001 f918 	bl	8b870 <__sinit>
   8a640:	e7bf      	b.n	8a5c2 <__swsetup_r+0x12>
   8a642:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8a644:	b151      	cbz	r1, 8a65c <__swsetup_r+0xac>
   8a646:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8a64a:	4291      	cmp	r1, r2
   8a64c:	d004      	beq.n	8a658 <__swsetup_r+0xa8>
   8a64e:	4628      	mov	r0, r5
   8a650:	f001 fa32 	bl	8bab8 <_free_r>
   8a654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a658:	2200      	movs	r2, #0
   8a65a:	6322      	str	r2, [r4, #48]	; 0x30
   8a65c:	2200      	movs	r2, #0
   8a65e:	6921      	ldr	r1, [r4, #16]
   8a660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8a664:	e9c4 1200 	strd	r1, r2, [r4]
   8a668:	e7c2      	b.n	8a5f0 <__swsetup_r+0x40>
   8a66a:	2209      	movs	r2, #9
   8a66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a670:	602a      	str	r2, [r5, #0]
   8a672:	f04f 30ff 	mov.w	r0, #4294967295
   8a676:	81a3      	strh	r3, [r4, #12]
   8a678:	bd38      	pop	{r3, r4, r5, pc}
   8a67a:	bf00      	nop
   8a67c:	20000718 	.word	0x20000718

0008a680 <register_fini>:
   8a680:	4b02      	ldr	r3, [pc, #8]	; (8a68c <register_fini+0xc>)
   8a682:	b113      	cbz	r3, 8a68a <register_fini+0xa>
   8a684:	4802      	ldr	r0, [pc, #8]	; (8a690 <register_fini+0x10>)
   8a686:	f000 b805 	b.w	8a694 <atexit>
   8a68a:	4770      	bx	lr
   8a68c:	00000000 	.word	0x00000000
   8a690:	0008b8e5 	.word	0x0008b8e5

0008a694 <atexit>:
   8a694:	2300      	movs	r3, #0
   8a696:	4601      	mov	r1, r0
   8a698:	461a      	mov	r2, r3
   8a69a:	4618      	mov	r0, r3
   8a69c:	f003 b82c 	b.w	8d6f8 <__register_exitproc>

0008a6a0 <quorem>:
   8a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a6a4:	6903      	ldr	r3, [r0, #16]
   8a6a6:	690d      	ldr	r5, [r1, #16]
   8a6a8:	b083      	sub	sp, #12
   8a6aa:	42ab      	cmp	r3, r5
   8a6ac:	f2c0 8084 	blt.w	8a7b8 <quorem+0x118>
   8a6b0:	3d01      	subs	r5, #1
   8a6b2:	f101 0614 	add.w	r6, r1, #20
   8a6b6:	f100 0914 	add.w	r9, r0, #20
   8a6ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   8a6be:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8a6c2:	3301      	adds	r3, #1
   8a6c4:	468e      	mov	lr, r1
   8a6c6:	00a9      	lsls	r1, r5, #2
   8a6c8:	9100      	str	r1, [sp, #0]
   8a6ca:	429a      	cmp	r2, r3
   8a6cc:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   8a6d0:	4682      	mov	sl, r0
   8a6d2:	fbb2 f7f3 	udiv	r7, r2, r3
   8a6d6:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8a6da:	9101      	str	r1, [sp, #4]
   8a6dc:	d337      	bcc.n	8a74e <quorem+0xae>
   8a6de:	2200      	movs	r2, #0
   8a6e0:	46b4      	mov	ip, r6
   8a6e2:	4614      	mov	r4, r2
   8a6e4:	4648      	mov	r0, r9
   8a6e6:	f85c 3b04 	ldr.w	r3, [ip], #4
   8a6ea:	6801      	ldr	r1, [r0, #0]
   8a6ec:	fa1f fb83 	uxth.w	fp, r3
   8a6f0:	fb07 220b 	mla	r2, r7, fp, r2
   8a6f4:	0c1b      	lsrs	r3, r3, #16
   8a6f6:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8a6fa:	fb07 bb03 	mla	fp, r7, r3, fp
   8a6fe:	b293      	uxth	r3, r2
   8a700:	1ae3      	subs	r3, r4, r3
   8a702:	b28a      	uxth	r2, r1
   8a704:	fa1f f48b 	uxth.w	r4, fp
   8a708:	4413      	add	r3, r2
   8a70a:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   8a70e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   8a712:	b29b      	uxth	r3, r3
   8a714:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   8a718:	45e0      	cmp	r8, ip
   8a71a:	f840 3b04 	str.w	r3, [r0], #4
   8a71e:	ea4f 4424 	mov.w	r4, r4, asr #16
   8a722:	ea4f 421b 	mov.w	r2, fp, lsr #16
   8a726:	d2de      	bcs.n	8a6e6 <quorem+0x46>
   8a728:	9b00      	ldr	r3, [sp, #0]
   8a72a:	f859 3003 	ldr.w	r3, [r9, r3]
   8a72e:	b973      	cbnz	r3, 8a74e <quorem+0xae>
   8a730:	9b01      	ldr	r3, [sp, #4]
   8a732:	3b04      	subs	r3, #4
   8a734:	4599      	cmp	r9, r3
   8a736:	d304      	bcc.n	8a742 <quorem+0xa2>
   8a738:	e007      	b.n	8a74a <quorem+0xaa>
   8a73a:	4599      	cmp	r9, r3
   8a73c:	f105 35ff 	add.w	r5, r5, #4294967295
   8a740:	d203      	bcs.n	8a74a <quorem+0xaa>
   8a742:	f853 2904 	ldr.w	r2, [r3], #-4
   8a746:	2a00      	cmp	r2, #0
   8a748:	d0f7      	beq.n	8a73a <quorem+0x9a>
   8a74a:	f8ca 5010 	str.w	r5, [sl, #16]
   8a74e:	4671      	mov	r1, lr
   8a750:	4650      	mov	r0, sl
   8a752:	f002 fab1 	bl	8ccb8 <__mcmp>
   8a756:	2800      	cmp	r0, #0
   8a758:	db2a      	blt.n	8a7b0 <quorem+0x110>
   8a75a:	4648      	mov	r0, r9
   8a75c:	2300      	movs	r3, #0
   8a75e:	3701      	adds	r7, #1
   8a760:	f856 1b04 	ldr.w	r1, [r6], #4
   8a764:	6804      	ldr	r4, [r0, #0]
   8a766:	b28a      	uxth	r2, r1
   8a768:	1a9a      	subs	r2, r3, r2
   8a76a:	0c0b      	lsrs	r3, r1, #16
   8a76c:	b2a1      	uxth	r1, r4
   8a76e:	440a      	add	r2, r1
   8a770:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   8a774:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8a778:	b292      	uxth	r2, r2
   8a77a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8a77e:	45b0      	cmp	r8, r6
   8a780:	f840 2b04 	str.w	r2, [r0], #4
   8a784:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a788:	d2ea      	bcs.n	8a760 <quorem+0xc0>
   8a78a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8a78e:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   8a792:	b96a      	cbnz	r2, 8a7b0 <quorem+0x110>
   8a794:	3b04      	subs	r3, #4
   8a796:	4599      	cmp	r9, r3
   8a798:	d304      	bcc.n	8a7a4 <quorem+0x104>
   8a79a:	e007      	b.n	8a7ac <quorem+0x10c>
   8a79c:	4599      	cmp	r9, r3
   8a79e:	f105 35ff 	add.w	r5, r5, #4294967295
   8a7a2:	d203      	bcs.n	8a7ac <quorem+0x10c>
   8a7a4:	f853 2904 	ldr.w	r2, [r3], #-4
   8a7a8:	2a00      	cmp	r2, #0
   8a7aa:	d0f7      	beq.n	8a79c <quorem+0xfc>
   8a7ac:	f8ca 5010 	str.w	r5, [sl, #16]
   8a7b0:	4638      	mov	r0, r7
   8a7b2:	b003      	add	sp, #12
   8a7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a7b8:	2000      	movs	r0, #0
   8a7ba:	b003      	add	sp, #12
   8a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008a7c0 <_dtoa_r>:
   8a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a7c4:	4616      	mov	r6, r2
   8a7c6:	461f      	mov	r7, r3
   8a7c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8a7ca:	b09b      	sub	sp, #108	; 0x6c
   8a7cc:	4604      	mov	r4, r0
   8a7ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8a7d2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8a7d4:	b141      	cbz	r1, 8a7e8 <_dtoa_r+0x28>
   8a7d6:	2301      	movs	r3, #1
   8a7d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8a7da:	4093      	lsls	r3, r2
   8a7dc:	e9c1 2301 	strd	r2, r3, [r1, #4]
   8a7e0:	f002 f83c 	bl	8c85c <_Bfree>
   8a7e4:	2300      	movs	r3, #0
   8a7e6:	6423      	str	r3, [r4, #64]	; 0x40
   8a7e8:	f1b7 0900 	subs.w	r9, r7, #0
   8a7ec:	bfb4      	ite	lt
   8a7ee:	2301      	movlt	r3, #1
   8a7f0:	2300      	movge	r3, #0
   8a7f2:	602b      	str	r3, [r5, #0]
   8a7f4:	4b76      	ldr	r3, [pc, #472]	; (8a9d0 <_dtoa_r+0x210>)
   8a7f6:	bfbc      	itt	lt
   8a7f8:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   8a7fc:	f8cd 9014 	strlt.w	r9, [sp, #20]
   8a800:	ea33 0309 	bics.w	r3, r3, r9
   8a804:	f000 80ab 	beq.w	8a95e <_dtoa_r+0x19e>
   8a808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a80c:	4610      	mov	r0, r2
   8a80e:	4619      	mov	r1, r3
   8a810:	2200      	movs	r2, #0
   8a812:	2300      	movs	r3, #0
   8a814:	e9cd 0108 	strd	r0, r1, [sp, #32]
   8a818:	f003 fd5a 	bl	8e2d0 <__aeabi_dcmpeq>
   8a81c:	4680      	mov	r8, r0
   8a81e:	b170      	cbz	r0, 8a83e <_dtoa_r+0x7e>
   8a820:	2301      	movs	r3, #1
   8a822:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a824:	6013      	str	r3, [r2, #0]
   8a826:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a828:	2b00      	cmp	r3, #0
   8a82a:	f000 82c2 	beq.w	8adb2 <_dtoa_r+0x5f2>
   8a82e:	4869      	ldr	r0, [pc, #420]	; (8a9d4 <_dtoa_r+0x214>)
   8a830:	6018      	str	r0, [r3, #0]
   8a832:	1e43      	subs	r3, r0, #1
   8a834:	9303      	str	r3, [sp, #12]
   8a836:	9803      	ldr	r0, [sp, #12]
   8a838:	b01b      	add	sp, #108	; 0x6c
   8a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a83e:	aa18      	add	r2, sp, #96	; 0x60
   8a840:	ab19      	add	r3, sp, #100	; 0x64
   8a842:	e9cd 3200 	strd	r3, r2, [sp]
   8a846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a84a:	4620      	mov	r0, r4
   8a84c:	f002 fafa 	bl	8ce44 <__d2b>
   8a850:	ea5f 5519 	movs.w	r5, r9, lsr #20
   8a854:	4682      	mov	sl, r0
   8a856:	f040 8098 	bne.w	8a98a <_dtoa_r+0x1ca>
   8a85a:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   8a85e:	4445      	add	r5, r8
   8a860:	f205 4032 	addw	r0, r5, #1074	; 0x432
   8a864:	2820      	cmp	r0, #32
   8a866:	f340 8390 	ble.w	8af8a <_dtoa_r+0x7ca>
   8a86a:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   8a86e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   8a872:	fa09 f903 	lsl.w	r9, r9, r3
   8a876:	fa26 f000 	lsr.w	r0, r6, r0
   8a87a:	ea49 0000 	orr.w	r0, r9, r0
   8a87e:	f003 fa45 	bl	8dd0c <__aeabi_ui2d>
   8a882:	2201      	movs	r2, #1
   8a884:	3d01      	subs	r5, #1
   8a886:	920f      	str	r2, [sp, #60]	; 0x3c
   8a888:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8a88c:	2200      	movs	r2, #0
   8a88e:	4b52      	ldr	r3, [pc, #328]	; (8a9d8 <_dtoa_r+0x218>)
   8a890:	f003 f8fe 	bl	8da90 <__aeabi_dsub>
   8a894:	a348      	add	r3, pc, #288	; (adr r3, 8a9b8 <_dtoa_r+0x1f8>)
   8a896:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a89a:	f003 fab1 	bl	8de00 <__aeabi_dmul>
   8a89e:	a348      	add	r3, pc, #288	; (adr r3, 8a9c0 <_dtoa_r+0x200>)
   8a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8a4:	f003 f8f6 	bl	8da94 <__adddf3>
   8a8a8:	4606      	mov	r6, r0
   8a8aa:	4628      	mov	r0, r5
   8a8ac:	460f      	mov	r7, r1
   8a8ae:	f003 fa3d 	bl	8dd2c <__aeabi_i2d>
   8a8b2:	a345      	add	r3, pc, #276	; (adr r3, 8a9c8 <_dtoa_r+0x208>)
   8a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8b8:	f003 faa2 	bl	8de00 <__aeabi_dmul>
   8a8bc:	4602      	mov	r2, r0
   8a8be:	460b      	mov	r3, r1
   8a8c0:	4630      	mov	r0, r6
   8a8c2:	4639      	mov	r1, r7
   8a8c4:	f003 f8e6 	bl	8da94 <__adddf3>
   8a8c8:	4606      	mov	r6, r0
   8a8ca:	460f      	mov	r7, r1
   8a8cc:	f003 fd48 	bl	8e360 <__aeabi_d2iz>
   8a8d0:	2200      	movs	r2, #0
   8a8d2:	4683      	mov	fp, r0
   8a8d4:	2300      	movs	r3, #0
   8a8d6:	4630      	mov	r0, r6
   8a8d8:	4639      	mov	r1, r7
   8a8da:	f003 fd03 	bl	8e2e4 <__aeabi_dcmplt>
   8a8de:	2800      	cmp	r0, #0
   8a8e0:	f040 825a 	bne.w	8ad98 <_dtoa_r+0x5d8>
   8a8e4:	f1bb 0f16 	cmp.w	fp, #22
   8a8e8:	f200 8248 	bhi.w	8ad7c <_dtoa_r+0x5bc>
   8a8ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a8f0:	4b3a      	ldr	r3, [pc, #232]	; (8a9dc <_dtoa_r+0x21c>)
   8a8f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8fa:	f003 fcf3 	bl	8e2e4 <__aeabi_dcmplt>
   8a8fe:	2800      	cmp	r0, #0
   8a900:	d072      	beq.n	8a9e8 <_dtoa_r+0x228>
   8a902:	2300      	movs	r3, #0
   8a904:	eba8 0505 	sub.w	r5, r8, r5
   8a908:	930e      	str	r3, [sp, #56]	; 0x38
   8a90a:	1e6b      	subs	r3, r5, #1
   8a90c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a910:	9306      	str	r3, [sp, #24]
   8a912:	f100 823b 	bmi.w	8ad8c <_dtoa_r+0x5cc>
   8a916:	2300      	movs	r3, #0
   8a918:	930b      	str	r3, [sp, #44]	; 0x2c
   8a91a:	f1bb 0f00 	cmp.w	fp, #0
   8a91e:	da6b      	bge.n	8a9f8 <_dtoa_r+0x238>
   8a920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a922:	f8cd b01c 	str.w	fp, [sp, #28]
   8a926:	eba3 030b 	sub.w	r3, r3, fp
   8a92a:	930b      	str	r3, [sp, #44]	; 0x2c
   8a92c:	f1cb 0300 	rsb	r3, fp, #0
   8a930:	930d      	str	r3, [sp, #52]	; 0x34
   8a932:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a934:	f04f 0b00 	mov.w	fp, #0
   8a938:	2b09      	cmp	r3, #9
   8a93a:	d866      	bhi.n	8aa0a <_dtoa_r+0x24a>
   8a93c:	2b05      	cmp	r3, #5
   8a93e:	f340 8322 	ble.w	8af86 <_dtoa_r+0x7c6>
   8a942:	2500      	movs	r5, #0
   8a944:	3b04      	subs	r3, #4
   8a946:	9324      	str	r3, [sp, #144]	; 0x90
   8a948:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a94a:	3b02      	subs	r3, #2
   8a94c:	2b03      	cmp	r3, #3
   8a94e:	f200 866e 	bhi.w	8b62e <_dtoa_r+0xe6e>
   8a952:	e8df f013 	tbh	[pc, r3, lsl #1]
   8a956:	043b      	.short	0x043b
   8a958:	042f0438 	.word	0x042f0438
   8a95c:	0412      	.short	0x0412
   8a95e:	f242 730f 	movw	r3, #9999	; 0x270f
   8a962:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a964:	f3c9 0913 	ubfx	r9, r9, #0, #20
   8a968:	6013      	str	r3, [r2, #0]
   8a96a:	ea59 0306 	orrs.w	r3, r9, r6
   8a96e:	d11c      	bne.n	8a9aa <_dtoa_r+0x1ea>
   8a970:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a972:	2b00      	cmp	r3, #0
   8a974:	f000 8657 	beq.w	8b626 <_dtoa_r+0xe66>
   8a978:	4b19      	ldr	r3, [pc, #100]	; (8a9e0 <_dtoa_r+0x220>)
   8a97a:	9303      	str	r3, [sp, #12]
   8a97c:	3308      	adds	r3, #8
   8a97e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8a980:	9803      	ldr	r0, [sp, #12]
   8a982:	6013      	str	r3, [r2, #0]
   8a984:	b01b      	add	sp, #108	; 0x6c
   8a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a98a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   8a98e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a992:	4608      	mov	r0, r1
   8a994:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   8a998:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   8a99c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   8a9a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8a9a4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8a9a8:	e770      	b.n	8a88c <_dtoa_r+0xcc>
   8a9aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a9ac:	2b00      	cmp	r3, #0
   8a9ae:	f040 83c8 	bne.w	8b142 <_dtoa_r+0x982>
   8a9b2:	4b0c      	ldr	r3, [pc, #48]	; (8a9e4 <_dtoa_r+0x224>)
   8a9b4:	9303      	str	r3, [sp, #12]
   8a9b6:	e73e      	b.n	8a836 <_dtoa_r+0x76>
   8a9b8:	636f4361 	.word	0x636f4361
   8a9bc:	3fd287a7 	.word	0x3fd287a7
   8a9c0:	8b60c8b3 	.word	0x8b60c8b3
   8a9c4:	3fc68a28 	.word	0x3fc68a28
   8a9c8:	509f79fb 	.word	0x509f79fb
   8a9cc:	3fd34413 	.word	0x3fd34413
   8a9d0:	7ff00000 	.word	0x7ff00000
   8a9d4:	0008e681 	.word	0x0008e681
   8a9d8:	3ff80000 	.word	0x3ff80000
   8a9dc:	0008e820 	.word	0x0008e820
   8a9e0:	0008e6c8 	.word	0x0008e6c8
   8a9e4:	0008e6c4 	.word	0x0008e6c4
   8a9e8:	eba8 0505 	sub.w	r5, r8, r5
   8a9ec:	1e6b      	subs	r3, r5, #1
   8a9ee:	9306      	str	r3, [sp, #24]
   8a9f0:	f100 84a9 	bmi.w	8b346 <_dtoa_r+0xb86>
   8a9f4:	900e      	str	r0, [sp, #56]	; 0x38
   8a9f6:	900b      	str	r0, [sp, #44]	; 0x2c
   8a9f8:	9b06      	ldr	r3, [sp, #24]
   8a9fa:	445b      	add	r3, fp
   8a9fc:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   8aa00:	2300      	movs	r3, #0
   8aa02:	930d      	str	r3, [sp, #52]	; 0x34
   8aa04:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8aa06:	2b09      	cmp	r3, #9
   8aa08:	d998      	bls.n	8a93c <_dtoa_r+0x17c>
   8aa0a:	2300      	movs	r3, #0
   8aa0c:	2501      	movs	r5, #1
   8aa0e:	9324      	str	r3, [sp, #144]	; 0x90
   8aa10:	9325      	str	r3, [sp, #148]	; 0x94
   8aa12:	f04f 33ff 	mov.w	r3, #4294967295
   8aa16:	950c      	str	r5, [sp, #48]	; 0x30
   8aa18:	930a      	str	r3, [sp, #40]	; 0x28
   8aa1a:	2100      	movs	r1, #0
   8aa1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa1e:	6461      	str	r1, [r4, #68]	; 0x44
   8aa20:	9312      	str	r3, [sp, #72]	; 0x48
   8aa22:	4620      	mov	r0, r4
   8aa24:	f001 fef4 	bl	8c810 <_Balloc>
   8aa28:	9003      	str	r0, [sp, #12]
   8aa2a:	2800      	cmp	r0, #0
   8aa2c:	f000 8607 	beq.w	8b63e <_dtoa_r+0xe7e>
   8aa30:	9b03      	ldr	r3, [sp, #12]
   8aa32:	6423      	str	r3, [r4, #64]	; 0x40
   8aa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa36:	2b0e      	cmp	r3, #14
   8aa38:	f200 80e9 	bhi.w	8ac0e <_dtoa_r+0x44e>
   8aa3c:	2d00      	cmp	r5, #0
   8aa3e:	f000 80e6 	beq.w	8ac0e <_dtoa_r+0x44e>
   8aa42:	9907      	ldr	r1, [sp, #28]
   8aa44:	2900      	cmp	r1, #0
   8aa46:	f340 8452 	ble.w	8b2ee <_dtoa_r+0xb2e>
   8aa4a:	4bb5      	ldr	r3, [pc, #724]	; (8ad20 <_dtoa_r+0x560>)
   8aa4c:	f001 020f 	and.w	r2, r1, #15
   8aa50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8aa54:	05c8      	lsls	r0, r1, #23
   8aa56:	ea4f 1521 	mov.w	r5, r1, asr #4
   8aa5a:	e9d3 6700 	ldrd	r6, r7, [r3]
   8aa5e:	f140 83ee 	bpl.w	8b23e <_dtoa_r+0xa7e>
   8aa62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8aa66:	4baf      	ldr	r3, [pc, #700]	; (8ad24 <_dtoa_r+0x564>)
   8aa68:	f04f 0903 	mov.w	r9, #3
   8aa6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8aa70:	f003 faf0 	bl	8e054 <__aeabi_ddiv>
   8aa74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8aa78:	f005 050f 	and.w	r5, r5, #15
   8aa7c:	b18d      	cbz	r5, 8aaa2 <_dtoa_r+0x2e2>
   8aa7e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8ad24 <_dtoa_r+0x564>
   8aa82:	07e9      	lsls	r1, r5, #31
   8aa84:	d509      	bpl.n	8aa9a <_dtoa_r+0x2da>
   8aa86:	e9d8 2300 	ldrd	r2, r3, [r8]
   8aa8a:	4630      	mov	r0, r6
   8aa8c:	4639      	mov	r1, r7
   8aa8e:	f003 f9b7 	bl	8de00 <__aeabi_dmul>
   8aa92:	4606      	mov	r6, r0
   8aa94:	460f      	mov	r7, r1
   8aa96:	f109 0901 	add.w	r9, r9, #1
   8aa9a:	106d      	asrs	r5, r5, #1
   8aa9c:	f108 0808 	add.w	r8, r8, #8
   8aaa0:	d1ef      	bne.n	8aa82 <_dtoa_r+0x2c2>
   8aaa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8aaa6:	4632      	mov	r2, r6
   8aaa8:	463b      	mov	r3, r7
   8aaaa:	f003 fad3 	bl	8e054 <__aeabi_ddiv>
   8aaae:	4606      	mov	r6, r0
   8aab0:	460f      	mov	r7, r1
   8aab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8aab4:	b143      	cbz	r3, 8aac8 <_dtoa_r+0x308>
   8aab6:	2200      	movs	r2, #0
   8aab8:	4630      	mov	r0, r6
   8aaba:	4639      	mov	r1, r7
   8aabc:	4b9a      	ldr	r3, [pc, #616]	; (8ad28 <_dtoa_r+0x568>)
   8aabe:	f003 fc11 	bl	8e2e4 <__aeabi_dcmplt>
   8aac2:	2800      	cmp	r0, #0
   8aac4:	f040 853b 	bne.w	8b53e <_dtoa_r+0xd7e>
   8aac8:	4648      	mov	r0, r9
   8aaca:	f003 f92f 	bl	8dd2c <__aeabi_i2d>
   8aace:	4632      	mov	r2, r6
   8aad0:	463b      	mov	r3, r7
   8aad2:	f003 f995 	bl	8de00 <__aeabi_dmul>
   8aad6:	4b95      	ldr	r3, [pc, #596]	; (8ad2c <_dtoa_r+0x56c>)
   8aad8:	2200      	movs	r2, #0
   8aada:	f002 ffdb 	bl	8da94 <__adddf3>
   8aade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aae0:	4680      	mov	r8, r0
   8aae2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8aae6:	2b00      	cmp	r3, #0
   8aae8:	f000 83ce 	beq.w	8b288 <_dtoa_r+0xac8>
   8aaec:	9b07      	ldr	r3, [sp, #28]
   8aaee:	9313      	str	r3, [sp, #76]	; 0x4c
   8aaf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aaf2:	9310      	str	r3, [sp, #64]	; 0x40
   8aaf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8aaf6:	2b00      	cmp	r3, #0
   8aaf8:	f000 84b7 	beq.w	8b46a <_dtoa_r+0xcaa>
   8aafc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8aafe:	4b88      	ldr	r3, [pc, #544]	; (8ad20 <_dtoa_r+0x560>)
   8ab00:	2000      	movs	r0, #0
   8ab02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8ab06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8ab0a:	4989      	ldr	r1, [pc, #548]	; (8ad30 <_dtoa_r+0x570>)
   8ab0c:	f003 faa2 	bl	8e054 <__aeabi_ddiv>
   8ab10:	4642      	mov	r2, r8
   8ab12:	464b      	mov	r3, r9
   8ab14:	f002 ffbc 	bl	8da90 <__aeabi_dsub>
   8ab18:	4602      	mov	r2, r0
   8ab1a:	460b      	mov	r3, r1
   8ab1c:	4630      	mov	r0, r6
   8ab1e:	4639      	mov	r1, r7
   8ab20:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8ab24:	f003 fc1c 	bl	8e360 <__aeabi_d2iz>
   8ab28:	4680      	mov	r8, r0
   8ab2a:	f003 f8ff 	bl	8dd2c <__aeabi_i2d>
   8ab2e:	4602      	mov	r2, r0
   8ab30:	460b      	mov	r3, r1
   8ab32:	4630      	mov	r0, r6
   8ab34:	4639      	mov	r1, r7
   8ab36:	f002 ffab 	bl	8da90 <__aeabi_dsub>
   8ab3a:	9d03      	ldr	r5, [sp, #12]
   8ab3c:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8ab40:	4606      	mov	r6, r0
   8ab42:	460f      	mov	r7, r1
   8ab44:	4602      	mov	r2, r0
   8ab46:	f805 3b01 	strb.w	r3, [r5], #1
   8ab4a:	460b      	mov	r3, r1
   8ab4c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8ab50:	f003 fbe6 	bl	8e320 <__aeabi_dcmpgt>
   8ab54:	2800      	cmp	r0, #0
   8ab56:	f040 853b 	bne.w	8b5d0 <_dtoa_r+0xe10>
   8ab5a:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8ab5e:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8ab62:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8ab66:	f04f 0900 	mov.w	r9, #0
   8ab6a:	9410      	str	r4, [sp, #64]	; 0x40
   8ab6c:	e02a      	b.n	8abc4 <_dtoa_r+0x404>
   8ab6e:	f109 0901 	add.w	r9, r9, #1
   8ab72:	45c1      	cmp	r9, r8
   8ab74:	da48      	bge.n	8ac08 <_dtoa_r+0x448>
   8ab76:	4650      	mov	r0, sl
   8ab78:	4659      	mov	r1, fp
   8ab7a:	2200      	movs	r2, #0
   8ab7c:	4b6d      	ldr	r3, [pc, #436]	; (8ad34 <_dtoa_r+0x574>)
   8ab7e:	f003 f93f 	bl	8de00 <__aeabi_dmul>
   8ab82:	2200      	movs	r2, #0
   8ab84:	4b6b      	ldr	r3, [pc, #428]	; (8ad34 <_dtoa_r+0x574>)
   8ab86:	4682      	mov	sl, r0
   8ab88:	468b      	mov	fp, r1
   8ab8a:	4630      	mov	r0, r6
   8ab8c:	4639      	mov	r1, r7
   8ab8e:	f003 f937 	bl	8de00 <__aeabi_dmul>
   8ab92:	460f      	mov	r7, r1
   8ab94:	4606      	mov	r6, r0
   8ab96:	f003 fbe3 	bl	8e360 <__aeabi_d2iz>
   8ab9a:	4604      	mov	r4, r0
   8ab9c:	f003 f8c6 	bl	8dd2c <__aeabi_i2d>
   8aba0:	4602      	mov	r2, r0
   8aba2:	460b      	mov	r3, r1
   8aba4:	4630      	mov	r0, r6
   8aba6:	4639      	mov	r1, r7
   8aba8:	f002 ff72 	bl	8da90 <__aeabi_dsub>
   8abac:	3430      	adds	r4, #48	; 0x30
   8abae:	4652      	mov	r2, sl
   8abb0:	465b      	mov	r3, fp
   8abb2:	f805 4b01 	strb.w	r4, [r5], #1
   8abb6:	4606      	mov	r6, r0
   8abb8:	460f      	mov	r7, r1
   8abba:	f003 fb93 	bl	8e2e4 <__aeabi_dcmplt>
   8abbe:	2800      	cmp	r0, #0
   8abc0:	f040 8503 	bne.w	8b5ca <_dtoa_r+0xe0a>
   8abc4:	4632      	mov	r2, r6
   8abc6:	463b      	mov	r3, r7
   8abc8:	2000      	movs	r0, #0
   8abca:	4957      	ldr	r1, [pc, #348]	; (8ad28 <_dtoa_r+0x568>)
   8abcc:	f002 ff60 	bl	8da90 <__aeabi_dsub>
   8abd0:	4652      	mov	r2, sl
   8abd2:	465b      	mov	r3, fp
   8abd4:	f003 fb86 	bl	8e2e4 <__aeabi_dcmplt>
   8abd8:	2800      	cmp	r0, #0
   8abda:	d0c8      	beq.n	8ab6e <_dtoa_r+0x3ae>
   8abdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abde:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8abe2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8abe4:	9a03      	ldr	r2, [sp, #12]
   8abe6:	9307      	str	r3, [sp, #28]
   8abe8:	e002      	b.n	8abf0 <_dtoa_r+0x430>
   8abea:	4295      	cmp	r5, r2
   8abec:	f000 84d2 	beq.w	8b594 <_dtoa_r+0xdd4>
   8abf0:	46a9      	mov	r9, r5
   8abf2:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8abf6:	2b39      	cmp	r3, #57	; 0x39
   8abf8:	d0f7      	beq.n	8abea <_dtoa_r+0x42a>
   8abfa:	3301      	adds	r3, #1
   8abfc:	b2db      	uxtb	r3, r3
   8abfe:	702b      	strb	r3, [r5, #0]
   8ac00:	9b07      	ldr	r3, [sp, #28]
   8ac02:	3301      	adds	r3, #1
   8ac04:	9307      	str	r3, [sp, #28]
   8ac06:	e1a0      	b.n	8af4a <_dtoa_r+0x78a>
   8ac08:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8ac0a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8ac0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8ac10:	2b00      	cmp	r3, #0
   8ac12:	f2c0 8093 	blt.w	8ad3c <_dtoa_r+0x57c>
   8ac16:	9a07      	ldr	r2, [sp, #28]
   8ac18:	2a0e      	cmp	r2, #14
   8ac1a:	f300 808f 	bgt.w	8ad3c <_dtoa_r+0x57c>
   8ac1e:	4b40      	ldr	r3, [pc, #256]	; (8ad20 <_dtoa_r+0x560>)
   8ac20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ac28:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8ac2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ac2e:	2b00      	cmp	r3, #0
   8ac30:	da1a      	bge.n	8ac68 <_dtoa_r+0x4a8>
   8ac32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ac34:	2b00      	cmp	r3, #0
   8ac36:	dc17      	bgt.n	8ac68 <_dtoa_r+0x4a8>
   8ac38:	f040 833f 	bne.w	8b2ba <_dtoa_r+0xafa>
   8ac3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8ac40:	2200      	movs	r2, #0
   8ac42:	4b3d      	ldr	r3, [pc, #244]	; (8ad38 <_dtoa_r+0x578>)
   8ac44:	f003 f8dc 	bl	8de00 <__aeabi_dmul>
   8ac48:	4602      	mov	r2, r0
   8ac4a:	460b      	mov	r3, r1
   8ac4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8ac50:	f003 fb52 	bl	8e2f8 <__aeabi_dcmple>
   8ac54:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   8ac58:	4645      	mov	r5, r8
   8ac5a:	2800      	cmp	r0, #0
   8ac5c:	f000 82cd 	beq.w	8b1fa <_dtoa_r+0xa3a>
   8ac60:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ac62:	9f03      	ldr	r7, [sp, #12]
   8ac64:	43de      	mvns	r6, r3
   8ac66:	e2d0      	b.n	8b20a <_dtoa_r+0xa4a>
   8ac68:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8ac6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8ac70:	4632      	mov	r2, r6
   8ac72:	463b      	mov	r3, r7
   8ac74:	f003 f9ee 	bl	8e054 <__aeabi_ddiv>
   8ac78:	f003 fb72 	bl	8e360 <__aeabi_d2iz>
   8ac7c:	4680      	mov	r8, r0
   8ac7e:	f003 f855 	bl	8dd2c <__aeabi_i2d>
   8ac82:	4632      	mov	r2, r6
   8ac84:	463b      	mov	r3, r7
   8ac86:	f003 f8bb 	bl	8de00 <__aeabi_dmul>
   8ac8a:	460b      	mov	r3, r1
   8ac8c:	4602      	mov	r2, r0
   8ac8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8ac92:	f002 fefd 	bl	8da90 <__aeabi_dsub>
   8ac96:	9d03      	ldr	r5, [sp, #12]
   8ac98:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8ac9c:	f805 3b01 	strb.w	r3, [r5], #1
   8aca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aca2:	2b01      	cmp	r3, #1
   8aca4:	f000 837f 	beq.w	8b3a6 <_dtoa_r+0xbe6>
   8aca8:	f8cd a018 	str.w	sl, [sp, #24]
   8acac:	f04f 0901 	mov.w	r9, #1
   8acb0:	469b      	mov	fp, r3
   8acb2:	46aa      	mov	sl, r5
   8acb4:	9408      	str	r4, [sp, #32]
   8acb6:	e01d      	b.n	8acf4 <_dtoa_r+0x534>
   8acb8:	4632      	mov	r2, r6
   8acba:	463b      	mov	r3, r7
   8acbc:	4620      	mov	r0, r4
   8acbe:	4629      	mov	r1, r5
   8acc0:	f003 f9c8 	bl	8e054 <__aeabi_ddiv>
   8acc4:	f003 fb4c 	bl	8e360 <__aeabi_d2iz>
   8acc8:	4680      	mov	r8, r0
   8acca:	f003 f82f 	bl	8dd2c <__aeabi_i2d>
   8acce:	4632      	mov	r2, r6
   8acd0:	463b      	mov	r3, r7
   8acd2:	f003 f895 	bl	8de00 <__aeabi_dmul>
   8acd6:	f109 0901 	add.w	r9, r9, #1
   8acda:	460b      	mov	r3, r1
   8acdc:	4602      	mov	r2, r0
   8acde:	4629      	mov	r1, r5
   8ace0:	4620      	mov	r0, r4
   8ace2:	f002 fed5 	bl	8da90 <__aeabi_dsub>
   8ace6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8acea:	45cb      	cmp	fp, r9
   8acec:	f80a 3b01 	strb.w	r3, [sl], #1
   8acf0:	f000 8355 	beq.w	8b39e <_dtoa_r+0xbde>
   8acf4:	2200      	movs	r2, #0
   8acf6:	4b0f      	ldr	r3, [pc, #60]	; (8ad34 <_dtoa_r+0x574>)
   8acf8:	f003 f882 	bl	8de00 <__aeabi_dmul>
   8acfc:	2200      	movs	r2, #0
   8acfe:	2300      	movs	r3, #0
   8ad00:	4604      	mov	r4, r0
   8ad02:	460d      	mov	r5, r1
   8ad04:	f003 fae4 	bl	8e2d0 <__aeabi_dcmpeq>
   8ad08:	2800      	cmp	r0, #0
   8ad0a:	d0d5      	beq.n	8acb8 <_dtoa_r+0x4f8>
   8ad0c:	4655      	mov	r5, sl
   8ad0e:	9c08      	ldr	r4, [sp, #32]
   8ad10:	f8dd a018 	ldr.w	sl, [sp, #24]
   8ad14:	9b07      	ldr	r3, [sp, #28]
   8ad16:	46a9      	mov	r9, r5
   8ad18:	3301      	adds	r3, #1
   8ad1a:	9307      	str	r3, [sp, #28]
   8ad1c:	e115      	b.n	8af4a <_dtoa_r+0x78a>
   8ad1e:	bf00      	nop
   8ad20:	0008e820 	.word	0x0008e820
   8ad24:	0008e7f8 	.word	0x0008e7f8
   8ad28:	3ff00000 	.word	0x3ff00000
   8ad2c:	401c0000 	.word	0x401c0000
   8ad30:	3fe00000 	.word	0x3fe00000
   8ad34:	40240000 	.word	0x40240000
   8ad38:	40140000 	.word	0x40140000
   8ad3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ad3e:	2a00      	cmp	r2, #0
   8ad40:	d03d      	beq.n	8adbe <_dtoa_r+0x5fe>
   8ad42:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8ad44:	2a01      	cmp	r2, #1
   8ad46:	f340 82bc 	ble.w	8b2c2 <_dtoa_r+0xb02>
   8ad4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ad4c:	1e5f      	subs	r7, r3, #1
   8ad4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ad50:	42bb      	cmp	r3, r7
   8ad52:	f2c0 826e 	blt.w	8b232 <_dtoa_r+0xa72>
   8ad56:	1bdf      	subs	r7, r3, r7
   8ad58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ad5a:	2b00      	cmp	r3, #0
   8ad5c:	f2c0 8354 	blt.w	8b408 <_dtoa_r+0xc48>
   8ad60:	9a06      	ldr	r2, [sp, #24]
   8ad62:	4611      	mov	r1, r2
   8ad64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8ad66:	4419      	add	r1, r3
   8ad68:	4616      	mov	r6, r2
   8ad6a:	441a      	add	r2, r3
   8ad6c:	9106      	str	r1, [sp, #24]
   8ad6e:	920b      	str	r2, [sp, #44]	; 0x2c
   8ad70:	2101      	movs	r1, #1
   8ad72:	4620      	mov	r0, r4
   8ad74:	f001 fe1a 	bl	8c9ac <__i2b>
   8ad78:	4605      	mov	r5, r0
   8ad7a:	e023      	b.n	8adc4 <_dtoa_r+0x604>
   8ad7c:	2301      	movs	r3, #1
   8ad7e:	eba8 0505 	sub.w	r5, r8, r5
   8ad82:	930e      	str	r3, [sp, #56]	; 0x38
   8ad84:	1e6b      	subs	r3, r5, #1
   8ad86:	9306      	str	r3, [sp, #24]
   8ad88:	f57f adc5 	bpl.w	8a916 <_dtoa_r+0x156>
   8ad8c:	f1c5 0301 	rsb	r3, r5, #1
   8ad90:	930b      	str	r3, [sp, #44]	; 0x2c
   8ad92:	2300      	movs	r3, #0
   8ad94:	9306      	str	r3, [sp, #24]
   8ad96:	e5c0      	b.n	8a91a <_dtoa_r+0x15a>
   8ad98:	4658      	mov	r0, fp
   8ad9a:	f002 ffc7 	bl	8dd2c <__aeabi_i2d>
   8ad9e:	4632      	mov	r2, r6
   8ada0:	463b      	mov	r3, r7
   8ada2:	f003 fa95 	bl	8e2d0 <__aeabi_dcmpeq>
   8ada6:	2800      	cmp	r0, #0
   8ada8:	f47f ad9c 	bne.w	8a8e4 <_dtoa_r+0x124>
   8adac:	f10b 3bff 	add.w	fp, fp, #4294967295
   8adb0:	e598      	b.n	8a8e4 <_dtoa_r+0x124>
   8adb2:	4bc7      	ldr	r3, [pc, #796]	; (8b0d0 <_dtoa_r+0x910>)
   8adb4:	9303      	str	r3, [sp, #12]
   8adb6:	9803      	ldr	r0, [sp, #12]
   8adb8:	b01b      	add	sp, #108	; 0x6c
   8adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8adbe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8adc0:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8adc4:	2e00      	cmp	r6, #0
   8adc6:	dd0c      	ble.n	8ade2 <_dtoa_r+0x622>
   8adc8:	9a06      	ldr	r2, [sp, #24]
   8adca:	2a00      	cmp	r2, #0
   8adcc:	dd09      	ble.n	8ade2 <_dtoa_r+0x622>
   8adce:	42b2      	cmp	r2, r6
   8add0:	4613      	mov	r3, r2
   8add2:	bfa8      	it	ge
   8add4:	4633      	movge	r3, r6
   8add6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8add8:	1af6      	subs	r6, r6, r3
   8adda:	1ac9      	subs	r1, r1, r3
   8addc:	1ad3      	subs	r3, r2, r3
   8adde:	910b      	str	r1, [sp, #44]	; 0x2c
   8ade0:	9306      	str	r3, [sp, #24]
   8ade2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ade4:	b1d3      	cbz	r3, 8ae1c <_dtoa_r+0x65c>
   8ade6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ade8:	2b00      	cmp	r3, #0
   8adea:	f000 81a3 	beq.w	8b134 <_dtoa_r+0x974>
   8adee:	2f00      	cmp	r7, #0
   8adf0:	dd10      	ble.n	8ae14 <_dtoa_r+0x654>
   8adf2:	4629      	mov	r1, r5
   8adf4:	463a      	mov	r2, r7
   8adf6:	4620      	mov	r0, r4
   8adf8:	f001 fe9e 	bl	8cb38 <__pow5mult>
   8adfc:	4652      	mov	r2, sl
   8adfe:	4601      	mov	r1, r0
   8ae00:	4605      	mov	r5, r0
   8ae02:	4620      	mov	r0, r4
   8ae04:	f001 fde8 	bl	8c9d8 <__multiply>
   8ae08:	4603      	mov	r3, r0
   8ae0a:	4651      	mov	r1, sl
   8ae0c:	4620      	mov	r0, r4
   8ae0e:	469a      	mov	sl, r3
   8ae10:	f001 fd24 	bl	8c85c <_Bfree>
   8ae14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ae16:	1bda      	subs	r2, r3, r7
   8ae18:	f040 818d 	bne.w	8b136 <_dtoa_r+0x976>
   8ae1c:	2101      	movs	r1, #1
   8ae1e:	4620      	mov	r0, r4
   8ae20:	f001 fdc4 	bl	8c9ac <__i2b>
   8ae24:	f1bb 0f00 	cmp.w	fp, #0
   8ae28:	4680      	mov	r8, r0
   8ae2a:	f300 80b3 	bgt.w	8af94 <_dtoa_r+0x7d4>
   8ae2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8ae30:	2b01      	cmp	r3, #1
   8ae32:	f340 818a 	ble.w	8b14a <_dtoa_r+0x98a>
   8ae36:	f04f 0900 	mov.w	r9, #0
   8ae3a:	2001      	movs	r0, #1
   8ae3c:	f1bb 0f00 	cmp.w	fp, #0
   8ae40:	f040 80b4 	bne.w	8afac <_dtoa_r+0x7ec>
   8ae44:	9a06      	ldr	r2, [sp, #24]
   8ae46:	4410      	add	r0, r2
   8ae48:	f010 001f 	ands.w	r0, r0, #31
   8ae4c:	f000 8092 	beq.w	8af74 <_dtoa_r+0x7b4>
   8ae50:	f1c0 0320 	rsb	r3, r0, #32
   8ae54:	2b04      	cmp	r3, #4
   8ae56:	f340 83f9 	ble.w	8b64c <_dtoa_r+0xe8c>
   8ae5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8ae5c:	f1c0 001c 	rsb	r0, r0, #28
   8ae60:	4403      	add	r3, r0
   8ae62:	4402      	add	r2, r0
   8ae64:	930b      	str	r3, [sp, #44]	; 0x2c
   8ae66:	4406      	add	r6, r0
   8ae68:	9206      	str	r2, [sp, #24]
   8ae6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8ae6c:	2b00      	cmp	r3, #0
   8ae6e:	dd05      	ble.n	8ae7c <_dtoa_r+0x6bc>
   8ae70:	4651      	mov	r1, sl
   8ae72:	461a      	mov	r2, r3
   8ae74:	4620      	mov	r0, r4
   8ae76:	f001 feab 	bl	8cbd0 <__lshift>
   8ae7a:	4682      	mov	sl, r0
   8ae7c:	9b06      	ldr	r3, [sp, #24]
   8ae7e:	2b00      	cmp	r3, #0
   8ae80:	dd05      	ble.n	8ae8e <_dtoa_r+0x6ce>
   8ae82:	4641      	mov	r1, r8
   8ae84:	461a      	mov	r2, r3
   8ae86:	4620      	mov	r0, r4
   8ae88:	f001 fea2 	bl	8cbd0 <__lshift>
   8ae8c:	4680      	mov	r8, r0
   8ae8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8ae90:	2b00      	cmp	r3, #0
   8ae92:	f040 8135 	bne.w	8b100 <_dtoa_r+0x940>
   8ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ae98:	2b00      	cmp	r3, #0
   8ae9a:	f340 811b 	ble.w	8b0d4 <_dtoa_r+0x914>
   8ae9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8aea0:	2b00      	cmp	r3, #0
   8aea2:	f040 809a 	bne.w	8afda <_dtoa_r+0x81a>
   8aea6:	9b07      	ldr	r3, [sp, #28]
   8aea8:	3301      	adds	r3, #1
   8aeaa:	9307      	str	r3, [sp, #28]
   8aeac:	2601      	movs	r6, #1
   8aeae:	9f03      	ldr	r7, [sp, #12]
   8aeb0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8aeb4:	e007      	b.n	8aec6 <_dtoa_r+0x706>
   8aeb6:	4651      	mov	r1, sl
   8aeb8:	2300      	movs	r3, #0
   8aeba:	220a      	movs	r2, #10
   8aebc:	4620      	mov	r0, r4
   8aebe:	f001 fcd7 	bl	8c870 <__multadd>
   8aec2:	4682      	mov	sl, r0
   8aec4:	3601      	adds	r6, #1
   8aec6:	4641      	mov	r1, r8
   8aec8:	4650      	mov	r0, sl
   8aeca:	f7ff fbe9 	bl	8a6a0 <quorem>
   8aece:	454e      	cmp	r6, r9
   8aed0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8aed4:	f807 3b01 	strb.w	r3, [r7], #1
   8aed8:	dbed      	blt.n	8aeb6 <_dtoa_r+0x6f6>
   8aeda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8aedc:	2600      	movs	r6, #0
   8aede:	2a00      	cmp	r2, #0
   8aee0:	bfcc      	ite	gt
   8aee2:	4693      	movgt	fp, r2
   8aee4:	f04f 0b01 	movle.w	fp, #1
   8aee8:	9a03      	ldr	r2, [sp, #12]
   8aeea:	4493      	add	fp, r2
   8aeec:	4651      	mov	r1, sl
   8aeee:	2201      	movs	r2, #1
   8aef0:	4620      	mov	r0, r4
   8aef2:	9304      	str	r3, [sp, #16]
   8aef4:	f001 fe6c 	bl	8cbd0 <__lshift>
   8aef8:	4641      	mov	r1, r8
   8aefa:	4682      	mov	sl, r0
   8aefc:	f001 fedc 	bl	8ccb8 <__mcmp>
   8af00:	2800      	cmp	r0, #0
   8af02:	f340 81a8 	ble.w	8b256 <_dtoa_r+0xa96>
   8af06:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8af0a:	9a03      	ldr	r2, [sp, #12]
   8af0c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8af10:	e004      	b.n	8af1c <_dtoa_r+0x75c>
   8af12:	455a      	cmp	r2, fp
   8af14:	f000 81e4 	beq.w	8b2e0 <_dtoa_r+0xb20>
   8af18:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8af1c:	2b39      	cmp	r3, #57	; 0x39
   8af1e:	f10b 0901 	add.w	r9, fp, #1
   8af22:	d0f6      	beq.n	8af12 <_dtoa_r+0x752>
   8af24:	3301      	adds	r3, #1
   8af26:	f88b 3000 	strb.w	r3, [fp]
   8af2a:	4641      	mov	r1, r8
   8af2c:	4620      	mov	r0, r4
   8af2e:	f001 fc95 	bl	8c85c <_Bfree>
   8af32:	b155      	cbz	r5, 8af4a <_dtoa_r+0x78a>
   8af34:	b12e      	cbz	r6, 8af42 <_dtoa_r+0x782>
   8af36:	42ae      	cmp	r6, r5
   8af38:	d003      	beq.n	8af42 <_dtoa_r+0x782>
   8af3a:	4631      	mov	r1, r6
   8af3c:	4620      	mov	r0, r4
   8af3e:	f001 fc8d 	bl	8c85c <_Bfree>
   8af42:	4629      	mov	r1, r5
   8af44:	4620      	mov	r0, r4
   8af46:	f001 fc89 	bl	8c85c <_Bfree>
   8af4a:	4651      	mov	r1, sl
   8af4c:	4620      	mov	r0, r4
   8af4e:	f001 fc85 	bl	8c85c <_Bfree>
   8af52:	2300      	movs	r3, #0
   8af54:	f889 3000 	strb.w	r3, [r9]
   8af58:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8af5a:	461a      	mov	r2, r3
   8af5c:	9b07      	ldr	r3, [sp, #28]
   8af5e:	6013      	str	r3, [r2, #0]
   8af60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8af62:	2b00      	cmp	r3, #0
   8af64:	f43f ac67 	beq.w	8a836 <_dtoa_r+0x76>
   8af68:	9803      	ldr	r0, [sp, #12]
   8af6a:	f8c3 9000 	str.w	r9, [r3]
   8af6e:	b01b      	add	sp, #108	; 0x6c
   8af70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af74:	201c      	movs	r0, #28
   8af76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8af78:	4406      	add	r6, r0
   8af7a:	4403      	add	r3, r0
   8af7c:	930b      	str	r3, [sp, #44]	; 0x2c
   8af7e:	9b06      	ldr	r3, [sp, #24]
   8af80:	4403      	add	r3, r0
   8af82:	9306      	str	r3, [sp, #24]
   8af84:	e771      	b.n	8ae6a <_dtoa_r+0x6aa>
   8af86:	2501      	movs	r5, #1
   8af88:	e4de      	b.n	8a948 <_dtoa_r+0x188>
   8af8a:	f1c0 0020 	rsb	r0, r0, #32
   8af8e:	fa06 f000 	lsl.w	r0, r6, r0
   8af92:	e474      	b.n	8a87e <_dtoa_r+0xbe>
   8af94:	4601      	mov	r1, r0
   8af96:	465a      	mov	r2, fp
   8af98:	4620      	mov	r0, r4
   8af9a:	f001 fdcd 	bl	8cb38 <__pow5mult>
   8af9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8afa0:	4680      	mov	r8, r0
   8afa2:	2b01      	cmp	r3, #1
   8afa4:	f340 81d1 	ble.w	8b34a <_dtoa_r+0xb8a>
   8afa8:	f04f 0900 	mov.w	r9, #0
   8afac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8afb0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8afb4:	6918      	ldr	r0, [r3, #16]
   8afb6:	f001 fca9 	bl	8c90c <__hi0bits>
   8afba:	f1c0 0020 	rsb	r0, r0, #32
   8afbe:	e741      	b.n	8ae44 <_dtoa_r+0x684>
   8afc0:	4629      	mov	r1, r5
   8afc2:	2300      	movs	r3, #0
   8afc4:	220a      	movs	r2, #10
   8afc6:	4620      	mov	r0, r4
   8afc8:	f001 fc52 	bl	8c870 <__multadd>
   8afcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8afce:	4605      	mov	r5, r0
   8afd0:	2b00      	cmp	r3, #0
   8afd2:	f340 8315 	ble.w	8b600 <_dtoa_r+0xe40>
   8afd6:	9707      	str	r7, [sp, #28]
   8afd8:	930a      	str	r3, [sp, #40]	; 0x28
   8afda:	2e00      	cmp	r6, #0
   8afdc:	f300 8122 	bgt.w	8b224 <_dtoa_r+0xa64>
   8afe0:	f1b9 0f00 	cmp.w	r9, #0
   8afe4:	f040 81f9 	bne.w	8b3da <_dtoa_r+0xc1a>
   8afe8:	462f      	mov	r7, r5
   8afea:	9903      	ldr	r1, [sp, #12]
   8afec:	9b04      	ldr	r3, [sp, #16]
   8afee:	460e      	mov	r6, r1
   8aff0:	f003 0201 	and.w	r2, r3, #1
   8aff4:	1e4b      	subs	r3, r1, #1
   8aff6:	9924      	ldr	r1, [sp, #144]	; 0x90
   8aff8:	920c      	str	r2, [sp, #48]	; 0x30
   8affa:	430a      	orrs	r2, r1
   8affc:	920b      	str	r2, [sp, #44]	; 0x2c
   8affe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8b000:	441a      	add	r2, r3
   8b002:	920a      	str	r2, [sp, #40]	; 0x28
   8b004:	4641      	mov	r1, r8
   8b006:	4650      	mov	r0, sl
   8b008:	f7ff fb4a 	bl	8a6a0 <quorem>
   8b00c:	4629      	mov	r1, r5
   8b00e:	4683      	mov	fp, r0
   8b010:	4650      	mov	r0, sl
   8b012:	f001 fe51 	bl	8ccb8 <__mcmp>
   8b016:	463a      	mov	r2, r7
   8b018:	4641      	mov	r1, r8
   8b01a:	4681      	mov	r9, r0
   8b01c:	4620      	mov	r0, r4
   8b01e:	f001 fe69 	bl	8ccf4 <__mdiff>
   8b022:	68c2      	ldr	r2, [r0, #12]
   8b024:	4601      	mov	r1, r0
   8b026:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8b02a:	2a00      	cmp	r2, #0
   8b02c:	d142      	bne.n	8b0b4 <_dtoa_r+0x8f4>
   8b02e:	9006      	str	r0, [sp, #24]
   8b030:	4650      	mov	r0, sl
   8b032:	9308      	str	r3, [sp, #32]
   8b034:	f001 fe40 	bl	8ccb8 <__mcmp>
   8b038:	9906      	ldr	r1, [sp, #24]
   8b03a:	9004      	str	r0, [sp, #16]
   8b03c:	4620      	mov	r0, r4
   8b03e:	f001 fc0d 	bl	8c85c <_Bfree>
   8b042:	9a04      	ldr	r2, [sp, #16]
   8b044:	9b08      	ldr	r3, [sp, #32]
   8b046:	b91a      	cbnz	r2, 8b050 <_dtoa_r+0x890>
   8b048:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b04a:	2900      	cmp	r1, #0
   8b04c:	f000 82cb 	beq.w	8b5e6 <_dtoa_r+0xe26>
   8b050:	f1b9 0f00 	cmp.w	r9, #0
   8b054:	f2c0 8185 	blt.w	8b362 <_dtoa_r+0xba2>
   8b058:	9924      	ldr	r1, [sp, #144]	; 0x90
   8b05a:	ea41 0909 	orr.w	r9, r1, r9
   8b05e:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b060:	ea51 0109 	orrs.w	r1, r1, r9
   8b064:	f000 817d 	beq.w	8b362 <_dtoa_r+0xba2>
   8b068:	2a00      	cmp	r2, #0
   8b06a:	f300 81d1 	bgt.w	8b410 <_dtoa_r+0xc50>
   8b06e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8b070:	f106 0901 	add.w	r9, r6, #1
   8b074:	4296      	cmp	r6, r2
   8b076:	46cb      	mov	fp, r9
   8b078:	7033      	strb	r3, [r6, #0]
   8b07a:	f000 81e3 	beq.w	8b444 <_dtoa_r+0xc84>
   8b07e:	4651      	mov	r1, sl
   8b080:	2300      	movs	r3, #0
   8b082:	220a      	movs	r2, #10
   8b084:	4620      	mov	r0, r4
   8b086:	f001 fbf3 	bl	8c870 <__multadd>
   8b08a:	42bd      	cmp	r5, r7
   8b08c:	4682      	mov	sl, r0
   8b08e:	4629      	mov	r1, r5
   8b090:	f04f 0300 	mov.w	r3, #0
   8b094:	f04f 020a 	mov.w	r2, #10
   8b098:	4620      	mov	r0, r4
   8b09a:	d012      	beq.n	8b0c2 <_dtoa_r+0x902>
   8b09c:	f001 fbe8 	bl	8c870 <__multadd>
   8b0a0:	4639      	mov	r1, r7
   8b0a2:	4605      	mov	r5, r0
   8b0a4:	2300      	movs	r3, #0
   8b0a6:	220a      	movs	r2, #10
   8b0a8:	4620      	mov	r0, r4
   8b0aa:	f001 fbe1 	bl	8c870 <__multadd>
   8b0ae:	464e      	mov	r6, r9
   8b0b0:	4607      	mov	r7, r0
   8b0b2:	e7a7      	b.n	8b004 <_dtoa_r+0x844>
   8b0b4:	4620      	mov	r0, r4
   8b0b6:	9304      	str	r3, [sp, #16]
   8b0b8:	f001 fbd0 	bl	8c85c <_Bfree>
   8b0bc:	2201      	movs	r2, #1
   8b0be:	9b04      	ldr	r3, [sp, #16]
   8b0c0:	e7c6      	b.n	8b050 <_dtoa_r+0x890>
   8b0c2:	f001 fbd5 	bl	8c870 <__multadd>
   8b0c6:	464e      	mov	r6, r9
   8b0c8:	4605      	mov	r5, r0
   8b0ca:	4607      	mov	r7, r0
   8b0cc:	e79a      	b.n	8b004 <_dtoa_r+0x844>
   8b0ce:	bf00      	nop
   8b0d0:	0008e680 	.word	0x0008e680
   8b0d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b0d6:	2b02      	cmp	r3, #2
   8b0d8:	dc7e      	bgt.n	8b1d8 <_dtoa_r+0xa18>
   8b0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b0dc:	2b00      	cmp	r3, #0
   8b0de:	f47f af7c 	bne.w	8afda <_dtoa_r+0x81a>
   8b0e2:	4641      	mov	r1, r8
   8b0e4:	4650      	mov	r0, sl
   8b0e6:	f7ff fadb 	bl	8a6a0 <quorem>
   8b0ea:	9a07      	ldr	r2, [sp, #28]
   8b0ec:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8b0f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8b0f4:	3201      	adds	r2, #1
   8b0f6:	2600      	movs	r6, #0
   8b0f8:	9207      	str	r2, [sp, #28]
   8b0fa:	f80b 3b01 	strb.w	r3, [fp], #1
   8b0fe:	e6f5      	b.n	8aeec <_dtoa_r+0x72c>
   8b100:	4641      	mov	r1, r8
   8b102:	4650      	mov	r0, sl
   8b104:	f001 fdd8 	bl	8ccb8 <__mcmp>
   8b108:	2800      	cmp	r0, #0
   8b10a:	f6bf aec4 	bge.w	8ae96 <_dtoa_r+0x6d6>
   8b10e:	4651      	mov	r1, sl
   8b110:	2300      	movs	r3, #0
   8b112:	220a      	movs	r2, #10
   8b114:	4620      	mov	r0, r4
   8b116:	f001 fbab 	bl	8c870 <__multadd>
   8b11a:	9b07      	ldr	r3, [sp, #28]
   8b11c:	4682      	mov	sl, r0
   8b11e:	1e5f      	subs	r7, r3, #1
   8b120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b122:	2b00      	cmp	r3, #0
   8b124:	f47f af4c 	bne.w	8afc0 <_dtoa_r+0x800>
   8b128:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b12a:	2b00      	cmp	r3, #0
   8b12c:	f340 8262 	ble.w	8b5f4 <_dtoa_r+0xe34>
   8b130:	930a      	str	r3, [sp, #40]	; 0x28
   8b132:	e6bb      	b.n	8aeac <_dtoa_r+0x6ec>
   8b134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b136:	4651      	mov	r1, sl
   8b138:	4620      	mov	r0, r4
   8b13a:	f001 fcfd 	bl	8cb38 <__pow5mult>
   8b13e:	4682      	mov	sl, r0
   8b140:	e66c      	b.n	8ae1c <_dtoa_r+0x65c>
   8b142:	4bba      	ldr	r3, [pc, #744]	; (8b42c <_dtoa_r+0xc6c>)
   8b144:	9303      	str	r3, [sp, #12]
   8b146:	3303      	adds	r3, #3
   8b148:	e419      	b.n	8a97e <_dtoa_r+0x1be>
   8b14a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b14e:	2900      	cmp	r1, #0
   8b150:	f47f ae71 	bne.w	8ae36 <_dtoa_r+0x676>
   8b154:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b158:	2b00      	cmp	r3, #0
   8b15a:	f47f ae6c 	bne.w	8ae36 <_dtoa_r+0x676>
   8b15e:	4bb4      	ldr	r3, [pc, #720]	; (8b430 <_dtoa_r+0xc70>)
   8b160:	4013      	ands	r3, r2
   8b162:	2b00      	cmp	r3, #0
   8b164:	f000 822a 	beq.w	8b5bc <_dtoa_r+0xdfc>
   8b168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b16a:	f04f 0901 	mov.w	r9, #1
   8b16e:	3301      	adds	r3, #1
   8b170:	930b      	str	r3, [sp, #44]	; 0x2c
   8b172:	9b06      	ldr	r3, [sp, #24]
   8b174:	3301      	adds	r3, #1
   8b176:	9306      	str	r3, [sp, #24]
   8b178:	e65f      	b.n	8ae3a <_dtoa_r+0x67a>
   8b17a:	2301      	movs	r3, #1
   8b17c:	930c      	str	r3, [sp, #48]	; 0x30
   8b17e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b180:	9a07      	ldr	r2, [sp, #28]
   8b182:	4413      	add	r3, r2
   8b184:	9312      	str	r3, [sp, #72]	; 0x48
   8b186:	3301      	adds	r3, #1
   8b188:	2b01      	cmp	r3, #1
   8b18a:	461e      	mov	r6, r3
   8b18c:	bfb8      	it	lt
   8b18e:	2601      	movlt	r6, #1
   8b190:	930a      	str	r3, [sp, #40]	; 0x28
   8b192:	2100      	movs	r1, #0
   8b194:	2e17      	cmp	r6, #23
   8b196:	6461      	str	r1, [r4, #68]	; 0x44
   8b198:	f77f ac43 	ble.w	8aa22 <_dtoa_r+0x262>
   8b19c:	2201      	movs	r2, #1
   8b19e:	2304      	movs	r3, #4
   8b1a0:	005b      	lsls	r3, r3, #1
   8b1a2:	f103 0014 	add.w	r0, r3, #20
   8b1a6:	42b0      	cmp	r0, r6
   8b1a8:	4611      	mov	r1, r2
   8b1aa:	f102 0201 	add.w	r2, r2, #1
   8b1ae:	d9f7      	bls.n	8b1a0 <_dtoa_r+0x9e0>
   8b1b0:	6461      	str	r1, [r4, #68]	; 0x44
   8b1b2:	e436      	b.n	8aa22 <_dtoa_r+0x262>
   8b1b4:	2301      	movs	r3, #1
   8b1b6:	930c      	str	r3, [sp, #48]	; 0x30
   8b1b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b1ba:	2b00      	cmp	r3, #0
   8b1bc:	dd46      	ble.n	8b24c <_dtoa_r+0xa8c>
   8b1be:	461e      	mov	r6, r3
   8b1c0:	9312      	str	r3, [sp, #72]	; 0x48
   8b1c2:	930a      	str	r3, [sp, #40]	; 0x28
   8b1c4:	e7e5      	b.n	8b192 <_dtoa_r+0x9d2>
   8b1c6:	2300      	movs	r3, #0
   8b1c8:	930c      	str	r3, [sp, #48]	; 0x30
   8b1ca:	e7d8      	b.n	8b17e <_dtoa_r+0x9be>
   8b1cc:	2300      	movs	r3, #0
   8b1ce:	930c      	str	r3, [sp, #48]	; 0x30
   8b1d0:	e7f2      	b.n	8b1b8 <_dtoa_r+0x9f8>
   8b1d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b1d4:	9707      	str	r7, [sp, #28]
   8b1d6:	930a      	str	r3, [sp, #40]	; 0x28
   8b1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b1da:	2b00      	cmp	r3, #0
   8b1dc:	f47f ad40 	bne.w	8ac60 <_dtoa_r+0x4a0>
   8b1e0:	4641      	mov	r1, r8
   8b1e2:	2205      	movs	r2, #5
   8b1e4:	4620      	mov	r0, r4
   8b1e6:	f001 fb43 	bl	8c870 <__multadd>
   8b1ea:	4680      	mov	r8, r0
   8b1ec:	4650      	mov	r0, sl
   8b1ee:	4641      	mov	r1, r8
   8b1f0:	f001 fd62 	bl	8ccb8 <__mcmp>
   8b1f4:	2800      	cmp	r0, #0
   8b1f6:	f77f ad33 	ble.w	8ac60 <_dtoa_r+0x4a0>
   8b1fa:	9f03      	ldr	r7, [sp, #12]
   8b1fc:	2231      	movs	r2, #49	; 0x31
   8b1fe:	463b      	mov	r3, r7
   8b200:	9e07      	ldr	r6, [sp, #28]
   8b202:	f803 2b01 	strb.w	r2, [r3], #1
   8b206:	3601      	adds	r6, #1
   8b208:	9303      	str	r3, [sp, #12]
   8b20a:	4641      	mov	r1, r8
   8b20c:	4620      	mov	r0, r4
   8b20e:	f001 fb25 	bl	8c85c <_Bfree>
   8b212:	1c73      	adds	r3, r6, #1
   8b214:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8b218:	9307      	str	r3, [sp, #28]
   8b21a:	9703      	str	r7, [sp, #12]
   8b21c:	2d00      	cmp	r5, #0
   8b21e:	f47f ae90 	bne.w	8af42 <_dtoa_r+0x782>
   8b222:	e692      	b.n	8af4a <_dtoa_r+0x78a>
   8b224:	4629      	mov	r1, r5
   8b226:	4632      	mov	r2, r6
   8b228:	4620      	mov	r0, r4
   8b22a:	f001 fcd1 	bl	8cbd0 <__lshift>
   8b22e:	4605      	mov	r5, r0
   8b230:	e6d6      	b.n	8afe0 <_dtoa_r+0x820>
   8b232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b234:	970d      	str	r7, [sp, #52]	; 0x34
   8b236:	1afb      	subs	r3, r7, r3
   8b238:	449b      	add	fp, r3
   8b23a:	2700      	movs	r7, #0
   8b23c:	e58c      	b.n	8ad58 <_dtoa_r+0x598>
   8b23e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8b242:	f04f 0902 	mov.w	r9, #2
   8b246:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8b24a:	e417      	b.n	8aa7c <_dtoa_r+0x2bc>
   8b24c:	2301      	movs	r3, #1
   8b24e:	9325      	str	r3, [sp, #148]	; 0x94
   8b250:	930a      	str	r3, [sp, #40]	; 0x28
   8b252:	f7ff bbe2 	b.w	8aa1a <_dtoa_r+0x25a>
   8b256:	d103      	bne.n	8b260 <_dtoa_r+0xaa0>
   8b258:	9b04      	ldr	r3, [sp, #16]
   8b25a:	07db      	lsls	r3, r3, #31
   8b25c:	f53f ae53 	bmi.w	8af06 <_dtoa_r+0x746>
   8b260:	46d9      	mov	r9, fp
   8b262:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8b266:	2b30      	cmp	r3, #48	; 0x30
   8b268:	d0fa      	beq.n	8b260 <_dtoa_r+0xaa0>
   8b26a:	e65e      	b.n	8af2a <_dtoa_r+0x76a>
   8b26c:	4648      	mov	r0, r9
   8b26e:	f002 fd5d 	bl	8dd2c <__aeabi_i2d>
   8b272:	4632      	mov	r2, r6
   8b274:	463b      	mov	r3, r7
   8b276:	f002 fdc3 	bl	8de00 <__aeabi_dmul>
   8b27a:	2200      	movs	r2, #0
   8b27c:	4b6d      	ldr	r3, [pc, #436]	; (8b434 <_dtoa_r+0xc74>)
   8b27e:	f002 fc09 	bl	8da94 <__adddf3>
   8b282:	4680      	mov	r8, r0
   8b284:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b288:	4630      	mov	r0, r6
   8b28a:	4639      	mov	r1, r7
   8b28c:	2200      	movs	r2, #0
   8b28e:	4b6a      	ldr	r3, [pc, #424]	; (8b438 <_dtoa_r+0xc78>)
   8b290:	f002 fbfe 	bl	8da90 <__aeabi_dsub>
   8b294:	4642      	mov	r2, r8
   8b296:	464b      	mov	r3, r9
   8b298:	4606      	mov	r6, r0
   8b29a:	460f      	mov	r7, r1
   8b29c:	f003 f840 	bl	8e320 <__aeabi_dcmpgt>
   8b2a0:	2800      	cmp	r0, #0
   8b2a2:	f040 8187 	bne.w	8b5b4 <_dtoa_r+0xdf4>
   8b2a6:	4642      	mov	r2, r8
   8b2a8:	4630      	mov	r0, r6
   8b2aa:	4639      	mov	r1, r7
   8b2ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8b2b0:	f003 f818 	bl	8e2e4 <__aeabi_dcmplt>
   8b2b4:	2800      	cmp	r0, #0
   8b2b6:	f43f acaa 	beq.w	8ac0e <_dtoa_r+0x44e>
   8b2ba:	f04f 0800 	mov.w	r8, #0
   8b2be:	4645      	mov	r5, r8
   8b2c0:	e4ce      	b.n	8ac60 <_dtoa_r+0x4a0>
   8b2c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8b2c4:	2a00      	cmp	r2, #0
   8b2c6:	f000 80c3 	beq.w	8b450 <_dtoa_r+0xc90>
   8b2ca:	9a06      	ldr	r2, [sp, #24]
   8b2cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8b2d0:	441a      	add	r2, r3
   8b2d2:	9206      	str	r2, [sp, #24]
   8b2d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8b2d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b2d8:	4616      	mov	r6, r2
   8b2da:	441a      	add	r2, r3
   8b2dc:	920b      	str	r2, [sp, #44]	; 0x2c
   8b2de:	e547      	b.n	8ad70 <_dtoa_r+0x5b0>
   8b2e0:	2331      	movs	r3, #49	; 0x31
   8b2e2:	9a07      	ldr	r2, [sp, #28]
   8b2e4:	3201      	adds	r2, #1
   8b2e6:	9207      	str	r2, [sp, #28]
   8b2e8:	9a03      	ldr	r2, [sp, #12]
   8b2ea:	7013      	strb	r3, [r2, #0]
   8b2ec:	e61d      	b.n	8af2a <_dtoa_r+0x76a>
   8b2ee:	f000 814b 	beq.w	8b588 <_dtoa_r+0xdc8>
   8b2f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b2f6:	9b07      	ldr	r3, [sp, #28]
   8b2f8:	425d      	negs	r5, r3
   8b2fa:	4b50      	ldr	r3, [pc, #320]	; (8b43c <_dtoa_r+0xc7c>)
   8b2fc:	f005 020f 	and.w	r2, r5, #15
   8b300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8b304:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b308:	f002 fd7a 	bl	8de00 <__aeabi_dmul>
   8b30c:	112d      	asrs	r5, r5, #4
   8b30e:	4606      	mov	r6, r0
   8b310:	460f      	mov	r7, r1
   8b312:	f000 817d 	beq.w	8b610 <_dtoa_r+0xe50>
   8b316:	2300      	movs	r3, #0
   8b318:	f04f 0902 	mov.w	r9, #2
   8b31c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8b440 <_dtoa_r+0xc80>
   8b320:	07ea      	lsls	r2, r5, #31
   8b322:	d505      	bpl.n	8b330 <_dtoa_r+0xb70>
   8b324:	e9d8 2300 	ldrd	r2, r3, [r8]
   8b328:	f002 fd6a 	bl	8de00 <__aeabi_dmul>
   8b32c:	2301      	movs	r3, #1
   8b32e:	4499      	add	r9, r3
   8b330:	106d      	asrs	r5, r5, #1
   8b332:	f108 0808 	add.w	r8, r8, #8
   8b336:	d1f3      	bne.n	8b320 <_dtoa_r+0xb60>
   8b338:	2b00      	cmp	r3, #0
   8b33a:	f43f abba 	beq.w	8aab2 <_dtoa_r+0x2f2>
   8b33e:	4606      	mov	r6, r0
   8b340:	460f      	mov	r7, r1
   8b342:	f7ff bbb6 	b.w	8aab2 <_dtoa_r+0x2f2>
   8b346:	900e      	str	r0, [sp, #56]	; 0x38
   8b348:	e520      	b.n	8ad8c <_dtoa_r+0x5cc>
   8b34a:	9b04      	ldr	r3, [sp, #16]
   8b34c:	2b00      	cmp	r3, #0
   8b34e:	f47f ae2b 	bne.w	8afa8 <_dtoa_r+0x7e8>
   8b352:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b356:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b35a:	2b00      	cmp	r3, #0
   8b35c:	f43f aeff 	beq.w	8b15e <_dtoa_r+0x99e>
   8b360:	e622      	b.n	8afa8 <_dtoa_r+0x7e8>
   8b362:	2a00      	cmp	r2, #0
   8b364:	dd12      	ble.n	8b38c <_dtoa_r+0xbcc>
   8b366:	4651      	mov	r1, sl
   8b368:	2201      	movs	r2, #1
   8b36a:	4620      	mov	r0, r4
   8b36c:	9304      	str	r3, [sp, #16]
   8b36e:	f001 fc2f 	bl	8cbd0 <__lshift>
   8b372:	4641      	mov	r1, r8
   8b374:	4682      	mov	sl, r0
   8b376:	f001 fc9f 	bl	8ccb8 <__mcmp>
   8b37a:	2800      	cmp	r0, #0
   8b37c:	9b04      	ldr	r3, [sp, #16]
   8b37e:	f340 812c 	ble.w	8b5da <_dtoa_r+0xe1a>
   8b382:	2b39      	cmp	r3, #57	; 0x39
   8b384:	f000 810c 	beq.w	8b5a0 <_dtoa_r+0xde0>
   8b388:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8b38c:	46b1      	mov	r9, r6
   8b38e:	f809 3b01 	strb.w	r3, [r9], #1
   8b392:	9b07      	ldr	r3, [sp, #28]
   8b394:	462e      	mov	r6, r5
   8b396:	3301      	adds	r3, #1
   8b398:	463d      	mov	r5, r7
   8b39a:	9307      	str	r3, [sp, #28]
   8b39c:	e5c5      	b.n	8af2a <_dtoa_r+0x76a>
   8b39e:	4655      	mov	r5, sl
   8b3a0:	9c08      	ldr	r4, [sp, #32]
   8b3a2:	f8dd a018 	ldr.w	sl, [sp, #24]
   8b3a6:	4602      	mov	r2, r0
   8b3a8:	460b      	mov	r3, r1
   8b3aa:	f002 fb73 	bl	8da94 <__adddf3>
   8b3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8b3b2:	4606      	mov	r6, r0
   8b3b4:	460f      	mov	r7, r1
   8b3b6:	f002 ffb3 	bl	8e320 <__aeabi_dcmpgt>
   8b3ba:	b960      	cbnz	r0, 8b3d6 <_dtoa_r+0xc16>
   8b3bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8b3c0:	4630      	mov	r0, r6
   8b3c2:	4639      	mov	r1, r7
   8b3c4:	f002 ff84 	bl	8e2d0 <__aeabi_dcmpeq>
   8b3c8:	2800      	cmp	r0, #0
   8b3ca:	f43f aca3 	beq.w	8ad14 <_dtoa_r+0x554>
   8b3ce:	f018 0f01 	tst.w	r8, #1
   8b3d2:	f43f ac9f 	beq.w	8ad14 <_dtoa_r+0x554>
   8b3d6:	9a03      	ldr	r2, [sp, #12]
   8b3d8:	e40a      	b.n	8abf0 <_dtoa_r+0x430>
   8b3da:	4620      	mov	r0, r4
   8b3dc:	6869      	ldr	r1, [r5, #4]
   8b3de:	f001 fa17 	bl	8c810 <_Balloc>
   8b3e2:	4606      	mov	r6, r0
   8b3e4:	2800      	cmp	r0, #0
   8b3e6:	f000 8117 	beq.w	8b618 <_dtoa_r+0xe58>
   8b3ea:	692b      	ldr	r3, [r5, #16]
   8b3ec:	f105 010c 	add.w	r1, r5, #12
   8b3f0:	3302      	adds	r3, #2
   8b3f2:	009a      	lsls	r2, r3, #2
   8b3f4:	300c      	adds	r0, #12
   8b3f6:	f7fc fa5d 	bl	878b4 <memcpy>
   8b3fa:	4631      	mov	r1, r6
   8b3fc:	2201      	movs	r2, #1
   8b3fe:	4620      	mov	r0, r4
   8b400:	f001 fbe6 	bl	8cbd0 <__lshift>
   8b404:	4607      	mov	r7, r0
   8b406:	e5f0      	b.n	8afea <_dtoa_r+0x82a>
   8b408:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8b40c:	1a9e      	subs	r6, r3, r2
   8b40e:	e4af      	b.n	8ad70 <_dtoa_r+0x5b0>
   8b410:	2b39      	cmp	r3, #57	; 0x39
   8b412:	f000 80c5 	beq.w	8b5a0 <_dtoa_r+0xde0>
   8b416:	46b1      	mov	r9, r6
   8b418:	3301      	adds	r3, #1
   8b41a:	f809 3b01 	strb.w	r3, [r9], #1
   8b41e:	9b07      	ldr	r3, [sp, #28]
   8b420:	462e      	mov	r6, r5
   8b422:	3301      	adds	r3, #1
   8b424:	463d      	mov	r5, r7
   8b426:	9307      	str	r3, [sp, #28]
   8b428:	e57f      	b.n	8af2a <_dtoa_r+0x76a>
   8b42a:	bf00      	nop
   8b42c:	0008e6c4 	.word	0x0008e6c4
   8b430:	7ff00000 	.word	0x7ff00000
   8b434:	401c0000 	.word	0x401c0000
   8b438:	40140000 	.word	0x40140000
   8b43c:	0008e820 	.word	0x0008e820
   8b440:	0008e7f8 	.word	0x0008e7f8
   8b444:	9a07      	ldr	r2, [sp, #28]
   8b446:	462e      	mov	r6, r5
   8b448:	3201      	adds	r2, #1
   8b44a:	463d      	mov	r5, r7
   8b44c:	9207      	str	r2, [sp, #28]
   8b44e:	e54d      	b.n	8aeec <_dtoa_r+0x72c>
   8b450:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8b452:	9a06      	ldr	r2, [sp, #24]
   8b454:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8b45a:	441a      	add	r2, r3
   8b45c:	9206      	str	r2, [sp, #24]
   8b45e:	460a      	mov	r2, r1
   8b460:	441a      	add	r2, r3
   8b462:	460e      	mov	r6, r1
   8b464:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b466:	920b      	str	r2, [sp, #44]	; 0x2c
   8b468:	e482      	b.n	8ad70 <_dtoa_r+0x5b0>
   8b46a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8b46c:	497f      	ldr	r1, [pc, #508]	; (8b66c <_dtoa_r+0xeac>)
   8b46e:	4642      	mov	r2, r8
   8b470:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8b474:	464b      	mov	r3, r9
   8b476:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8b47a:	f002 fcc1 	bl	8de00 <__aeabi_dmul>
   8b47e:	4602      	mov	r2, r0
   8b480:	460b      	mov	r3, r1
   8b482:	4630      	mov	r0, r6
   8b484:	4639      	mov	r1, r7
   8b486:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8b48a:	f002 ff69 	bl	8e360 <__aeabi_d2iz>
   8b48e:	4680      	mov	r8, r0
   8b490:	f002 fc4c 	bl	8dd2c <__aeabi_i2d>
   8b494:	460b      	mov	r3, r1
   8b496:	4602      	mov	r2, r0
   8b498:	4639      	mov	r1, r7
   8b49a:	4630      	mov	r0, r6
   8b49c:	f002 faf8 	bl	8da90 <__aeabi_dsub>
   8b4a0:	4606      	mov	r6, r0
   8b4a2:	9810      	ldr	r0, [sp, #64]	; 0x40
   8b4a4:	9d03      	ldr	r5, [sp, #12]
   8b4a6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8b4aa:	2801      	cmp	r0, #1
   8b4ac:	460f      	mov	r7, r1
   8b4ae:	f805 3b01 	strb.w	r3, [r5], #1
   8b4b2:	d01e      	beq.n	8b4f2 <_dtoa_r+0xd32>
   8b4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8b4b6:	9a03      	ldr	r2, [sp, #12]
   8b4b8:	4413      	add	r3, r2
   8b4ba:	4698      	mov	r8, r3
   8b4bc:	2200      	movs	r2, #0
   8b4be:	4b6c      	ldr	r3, [pc, #432]	; (8b670 <_dtoa_r+0xeb0>)
   8b4c0:	4630      	mov	r0, r6
   8b4c2:	4639      	mov	r1, r7
   8b4c4:	f002 fc9c 	bl	8de00 <__aeabi_dmul>
   8b4c8:	460f      	mov	r7, r1
   8b4ca:	4606      	mov	r6, r0
   8b4cc:	f002 ff48 	bl	8e360 <__aeabi_d2iz>
   8b4d0:	4681      	mov	r9, r0
   8b4d2:	f002 fc2b 	bl	8dd2c <__aeabi_i2d>
   8b4d6:	4602      	mov	r2, r0
   8b4d8:	460b      	mov	r3, r1
   8b4da:	4630      	mov	r0, r6
   8b4dc:	4639      	mov	r1, r7
   8b4de:	f002 fad7 	bl	8da90 <__aeabi_dsub>
   8b4e2:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8b4e6:	f805 9b01 	strb.w	r9, [r5], #1
   8b4ea:	4545      	cmp	r5, r8
   8b4ec:	4606      	mov	r6, r0
   8b4ee:	460f      	mov	r7, r1
   8b4f0:	d1e4      	bne.n	8b4bc <_dtoa_r+0xcfc>
   8b4f2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8b4f6:	2200      	movs	r2, #0
   8b4f8:	4b5e      	ldr	r3, [pc, #376]	; (8b674 <_dtoa_r+0xeb4>)
   8b4fa:	4640      	mov	r0, r8
   8b4fc:	4649      	mov	r1, r9
   8b4fe:	f002 fac9 	bl	8da94 <__adddf3>
   8b502:	4632      	mov	r2, r6
   8b504:	463b      	mov	r3, r7
   8b506:	f002 feed 	bl	8e2e4 <__aeabi_dcmplt>
   8b50a:	2800      	cmp	r0, #0
   8b50c:	d158      	bne.n	8b5c0 <_dtoa_r+0xe00>
   8b50e:	4642      	mov	r2, r8
   8b510:	464b      	mov	r3, r9
   8b512:	2000      	movs	r0, #0
   8b514:	4957      	ldr	r1, [pc, #348]	; (8b674 <_dtoa_r+0xeb4>)
   8b516:	f002 fabb 	bl	8da90 <__aeabi_dsub>
   8b51a:	4632      	mov	r2, r6
   8b51c:	463b      	mov	r3, r7
   8b51e:	f002 feff 	bl	8e320 <__aeabi_dcmpgt>
   8b522:	2800      	cmp	r0, #0
   8b524:	f43f ab73 	beq.w	8ac0e <_dtoa_r+0x44e>
   8b528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8b52c:	46a9      	mov	r9, r5
   8b52e:	2b30      	cmp	r3, #48	; 0x30
   8b530:	f105 35ff 	add.w	r5, r5, #4294967295
   8b534:	d0f8      	beq.n	8b528 <_dtoa_r+0xd68>
   8b536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b538:	3301      	adds	r3, #1
   8b53a:	9307      	str	r3, [sp, #28]
   8b53c:	e505      	b.n	8af4a <_dtoa_r+0x78a>
   8b53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b540:	2b00      	cmp	r3, #0
   8b542:	f43f ae93 	beq.w	8b26c <_dtoa_r+0xaac>
   8b546:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8b548:	2d00      	cmp	r5, #0
   8b54a:	f77f ab60 	ble.w	8ac0e <_dtoa_r+0x44e>
   8b54e:	2200      	movs	r2, #0
   8b550:	4b47      	ldr	r3, [pc, #284]	; (8b670 <_dtoa_r+0xeb0>)
   8b552:	4630      	mov	r0, r6
   8b554:	4639      	mov	r1, r7
   8b556:	f002 fc53 	bl	8de00 <__aeabi_dmul>
   8b55a:	4606      	mov	r6, r0
   8b55c:	460f      	mov	r7, r1
   8b55e:	f109 0001 	add.w	r0, r9, #1
   8b562:	f002 fbe3 	bl	8dd2c <__aeabi_i2d>
   8b566:	4632      	mov	r2, r6
   8b568:	463b      	mov	r3, r7
   8b56a:	f002 fc49 	bl	8de00 <__aeabi_dmul>
   8b56e:	2200      	movs	r2, #0
   8b570:	4b41      	ldr	r3, [pc, #260]	; (8b678 <_dtoa_r+0xeb8>)
   8b572:	f002 fa8f 	bl	8da94 <__adddf3>
   8b576:	9a07      	ldr	r2, [sp, #28]
   8b578:	4680      	mov	r8, r0
   8b57a:	3a01      	subs	r2, #1
   8b57c:	9213      	str	r2, [sp, #76]	; 0x4c
   8b57e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b582:	9510      	str	r5, [sp, #64]	; 0x40
   8b584:	f7ff bab6 	b.w	8aaf4 <_dtoa_r+0x334>
   8b588:	f04f 0902 	mov.w	r9, #2
   8b58c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8b590:	f7ff ba8f 	b.w	8aab2 <_dtoa_r+0x2f2>
   8b594:	9b07      	ldr	r3, [sp, #28]
   8b596:	3301      	adds	r3, #1
   8b598:	9307      	str	r3, [sp, #28]
   8b59a:	2331      	movs	r3, #49	; 0x31
   8b59c:	f7ff bb2f 	b.w	8abfe <_dtoa_r+0x43e>
   8b5a0:	46b3      	mov	fp, r6
   8b5a2:	2339      	movs	r3, #57	; 0x39
   8b5a4:	9a07      	ldr	r2, [sp, #28]
   8b5a6:	462e      	mov	r6, r5
   8b5a8:	3201      	adds	r2, #1
   8b5aa:	463d      	mov	r5, r7
   8b5ac:	9207      	str	r2, [sp, #28]
   8b5ae:	f80b 3b01 	strb.w	r3, [fp], #1
   8b5b2:	e4aa      	b.n	8af0a <_dtoa_r+0x74a>
   8b5b4:	f04f 0800 	mov.w	r8, #0
   8b5b8:	4645      	mov	r5, r8
   8b5ba:	e61e      	b.n	8b1fa <_dtoa_r+0xa3a>
   8b5bc:	4699      	mov	r9, r3
   8b5be:	e43c      	b.n	8ae3a <_dtoa_r+0x67a>
   8b5c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b5c2:	9a03      	ldr	r2, [sp, #12]
   8b5c4:	9307      	str	r3, [sp, #28]
   8b5c6:	f7ff bb13 	b.w	8abf0 <_dtoa_r+0x430>
   8b5ca:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8b5ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8b5d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b5d2:	46a9      	mov	r9, r5
   8b5d4:	3301      	adds	r3, #1
   8b5d6:	9307      	str	r3, [sp, #28]
   8b5d8:	e4b7      	b.n	8af4a <_dtoa_r+0x78a>
   8b5da:	f47f aed7 	bne.w	8b38c <_dtoa_r+0xbcc>
   8b5de:	07da      	lsls	r2, r3, #31
   8b5e0:	f57f aed4 	bpl.w	8b38c <_dtoa_r+0xbcc>
   8b5e4:	e6cd      	b.n	8b382 <_dtoa_r+0xbc2>
   8b5e6:	2b39      	cmp	r3, #57	; 0x39
   8b5e8:	d0da      	beq.n	8b5a0 <_dtoa_r+0xde0>
   8b5ea:	f1b9 0f00 	cmp.w	r9, #0
   8b5ee:	f73f aecb 	bgt.w	8b388 <_dtoa_r+0xbc8>
   8b5f2:	e6cb      	b.n	8b38c <_dtoa_r+0xbcc>
   8b5f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b5f6:	2b02      	cmp	r3, #2
   8b5f8:	f73f adeb 	bgt.w	8b1d2 <_dtoa_r+0xa12>
   8b5fc:	9707      	str	r7, [sp, #28]
   8b5fe:	e570      	b.n	8b0e2 <_dtoa_r+0x922>
   8b600:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b602:	2b02      	cmp	r3, #2
   8b604:	f73f ade5 	bgt.w	8b1d2 <_dtoa_r+0xa12>
   8b608:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b60a:	9707      	str	r7, [sp, #28]
   8b60c:	930a      	str	r3, [sp, #40]	; 0x28
   8b60e:	e4e4      	b.n	8afda <_dtoa_r+0x81a>
   8b610:	f04f 0902 	mov.w	r9, #2
   8b614:	f7ff ba4d 	b.w	8aab2 <_dtoa_r+0x2f2>
   8b618:	4602      	mov	r2, r0
   8b61a:	f240 21ea 	movw	r1, #746	; 0x2ea
   8b61e:	4b17      	ldr	r3, [pc, #92]	; (8b67c <_dtoa_r+0xebc>)
   8b620:	4817      	ldr	r0, [pc, #92]	; (8b680 <_dtoa_r+0xec0>)
   8b622:	f002 f8af 	bl	8d784 <__assert_func>
   8b626:	4b17      	ldr	r3, [pc, #92]	; (8b684 <_dtoa_r+0xec4>)
   8b628:	9303      	str	r3, [sp, #12]
   8b62a:	f7ff b904 	b.w	8a836 <_dtoa_r+0x76>
   8b62e:	2500      	movs	r5, #0
   8b630:	4620      	mov	r0, r4
   8b632:	4629      	mov	r1, r5
   8b634:	6465      	str	r5, [r4, #68]	; 0x44
   8b636:	f001 f8eb 	bl	8c810 <_Balloc>
   8b63a:	9003      	str	r0, [sp, #12]
   8b63c:	b958      	cbnz	r0, 8b656 <_dtoa_r+0xe96>
   8b63e:	2200      	movs	r2, #0
   8b640:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8b644:	4b0d      	ldr	r3, [pc, #52]	; (8b67c <_dtoa_r+0xebc>)
   8b646:	480e      	ldr	r0, [pc, #56]	; (8b680 <_dtoa_r+0xec0>)
   8b648:	f002 f89c 	bl	8d784 <__assert_func>
   8b64c:	f43f ac0d 	beq.w	8ae6a <_dtoa_r+0x6aa>
   8b650:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8b654:	e48f      	b.n	8af76 <_dtoa_r+0x7b6>
   8b656:	f04f 33ff 	mov.w	r3, #4294967295
   8b65a:	9312      	str	r3, [sp, #72]	; 0x48
   8b65c:	930a      	str	r3, [sp, #40]	; 0x28
   8b65e:	2301      	movs	r3, #1
   8b660:	9a03      	ldr	r2, [sp, #12]
   8b662:	9525      	str	r5, [sp, #148]	; 0x94
   8b664:	6422      	str	r2, [r4, #64]	; 0x40
   8b666:	930c      	str	r3, [sp, #48]	; 0x30
   8b668:	f7ff bad1 	b.w	8ac0e <_dtoa_r+0x44e>
   8b66c:	0008e820 	.word	0x0008e820
   8b670:	40240000 	.word	0x40240000
   8b674:	3fe00000 	.word	0x3fe00000
   8b678:	401c0000 	.word	0x401c0000
   8b67c:	0008e6d4 	.word	0x0008e6d4
   8b680:	0008e6e8 	.word	0x0008e6e8
   8b684:	0008e6c8 	.word	0x0008e6c8

0008b688 <__sflush_r>:
   8b688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b690:	460d      	mov	r5, r1
   8b692:	0711      	lsls	r1, r2, #28
   8b694:	4680      	mov	r8, r0
   8b696:	d447      	bmi.n	8b728 <__sflush_r+0xa0>
   8b698:	686b      	ldr	r3, [r5, #4]
   8b69a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8b69e:	2b00      	cmp	r3, #0
   8b6a0:	81aa      	strh	r2, [r5, #12]
   8b6a2:	dd5e      	ble.n	8b762 <__sflush_r+0xda>
   8b6a4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b6a6:	2c00      	cmp	r4, #0
   8b6a8:	d058      	beq.n	8b75c <__sflush_r+0xd4>
   8b6aa:	2300      	movs	r3, #0
   8b6ac:	f8d8 6000 	ldr.w	r6, [r8]
   8b6b0:	f8c8 3000 	str.w	r3, [r8]
   8b6b4:	b293      	uxth	r3, r2
   8b6b6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8b6ba:	d156      	bne.n	8b76a <__sflush_r+0xe2>
   8b6bc:	2301      	movs	r3, #1
   8b6be:	4640      	mov	r0, r8
   8b6c0:	69e9      	ldr	r1, [r5, #28]
   8b6c2:	47a0      	blx	r4
   8b6c4:	1c43      	adds	r3, r0, #1
   8b6c6:	d067      	beq.n	8b798 <__sflush_r+0x110>
   8b6c8:	89ab      	ldrh	r3, [r5, #12]
   8b6ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b6cc:	075f      	lsls	r7, r3, #29
   8b6ce:	d505      	bpl.n	8b6dc <__sflush_r+0x54>
   8b6d0:	686a      	ldr	r2, [r5, #4]
   8b6d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8b6d4:	1a80      	subs	r0, r0, r2
   8b6d6:	b10b      	cbz	r3, 8b6dc <__sflush_r+0x54>
   8b6d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8b6da:	1ac0      	subs	r0, r0, r3
   8b6dc:	4602      	mov	r2, r0
   8b6de:	69e9      	ldr	r1, [r5, #28]
   8b6e0:	2300      	movs	r3, #0
   8b6e2:	4640      	mov	r0, r8
   8b6e4:	47a0      	blx	r4
   8b6e6:	1c41      	adds	r1, r0, #1
   8b6e8:	d141      	bne.n	8b76e <__sflush_r+0xe6>
   8b6ea:	f8d8 3000 	ldr.w	r3, [r8]
   8b6ee:	2b00      	cmp	r3, #0
   8b6f0:	d03d      	beq.n	8b76e <__sflush_r+0xe6>
   8b6f2:	2b1d      	cmp	r3, #29
   8b6f4:	d001      	beq.n	8b6fa <__sflush_r+0x72>
   8b6f6:	2b16      	cmp	r3, #22
   8b6f8:	d156      	bne.n	8b7a8 <__sflush_r+0x120>
   8b6fa:	2100      	movs	r1, #0
   8b6fc:	692a      	ldr	r2, [r5, #16]
   8b6fe:	89ab      	ldrh	r3, [r5, #12]
   8b700:	e9c5 2100 	strd	r2, r1, [r5]
   8b704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b708:	81ab      	strh	r3, [r5, #12]
   8b70a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8b70c:	f8c8 6000 	str.w	r6, [r8]
   8b710:	b321      	cbz	r1, 8b75c <__sflush_r+0xd4>
   8b712:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8b716:	4299      	cmp	r1, r3
   8b718:	d002      	beq.n	8b720 <__sflush_r+0x98>
   8b71a:	4640      	mov	r0, r8
   8b71c:	f000 f9cc 	bl	8bab8 <_free_r>
   8b720:	2000      	movs	r0, #0
   8b722:	6328      	str	r0, [r5, #48]	; 0x30
   8b724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b728:	692f      	ldr	r7, [r5, #16]
   8b72a:	b1bf      	cbz	r7, 8b75c <__sflush_r+0xd4>
   8b72c:	b293      	uxth	r3, r2
   8b72e:	079a      	lsls	r2, r3, #30
   8b730:	bf18      	it	ne
   8b732:	2300      	movne	r3, #0
   8b734:	682e      	ldr	r6, [r5, #0]
   8b736:	bf08      	it	eq
   8b738:	696b      	ldreq	r3, [r5, #20]
   8b73a:	602f      	str	r7, [r5, #0]
   8b73c:	1bf6      	subs	r6, r6, r7
   8b73e:	60ab      	str	r3, [r5, #8]
   8b740:	e00a      	b.n	8b758 <__sflush_r+0xd0>
   8b742:	4633      	mov	r3, r6
   8b744:	463a      	mov	r2, r7
   8b746:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8b748:	4640      	mov	r0, r8
   8b74a:	69e9      	ldr	r1, [r5, #28]
   8b74c:	47a0      	blx	r4
   8b74e:	1e04      	subs	r4, r0, #0
   8b750:	eba6 0604 	sub.w	r6, r6, r4
   8b754:	4427      	add	r7, r4
   8b756:	dd17      	ble.n	8b788 <__sflush_r+0x100>
   8b758:	2e00      	cmp	r6, #0
   8b75a:	dcf2      	bgt.n	8b742 <__sflush_r+0xba>
   8b75c:	2000      	movs	r0, #0
   8b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b762:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8b764:	2b00      	cmp	r3, #0
   8b766:	dc9d      	bgt.n	8b6a4 <__sflush_r+0x1c>
   8b768:	e7f8      	b.n	8b75c <__sflush_r+0xd4>
   8b76a:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8b76c:	e7ae      	b.n	8b6cc <__sflush_r+0x44>
   8b76e:	2100      	movs	r1, #0
   8b770:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8b774:	692a      	ldr	r2, [r5, #16]
   8b776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b77a:	81ab      	strh	r3, [r5, #12]
   8b77c:	04db      	lsls	r3, r3, #19
   8b77e:	e9c5 2100 	strd	r2, r1, [r5]
   8b782:	d5c2      	bpl.n	8b70a <__sflush_r+0x82>
   8b784:	6528      	str	r0, [r5, #80]	; 0x50
   8b786:	e7c0      	b.n	8b70a <__sflush_r+0x82>
   8b788:	89ab      	ldrh	r3, [r5, #12]
   8b78a:	f04f 30ff 	mov.w	r0, #4294967295
   8b78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b792:	81ab      	strh	r3, [r5, #12]
   8b794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b798:	f8d8 3000 	ldr.w	r3, [r8]
   8b79c:	2b00      	cmp	r3, #0
   8b79e:	d093      	beq.n	8b6c8 <__sflush_r+0x40>
   8b7a0:	2b1d      	cmp	r3, #29
   8b7a2:	d006      	beq.n	8b7b2 <__sflush_r+0x12a>
   8b7a4:	2b16      	cmp	r3, #22
   8b7a6:	d004      	beq.n	8b7b2 <__sflush_r+0x12a>
   8b7a8:	89ab      	ldrh	r3, [r5, #12]
   8b7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b7ae:	81ab      	strh	r3, [r5, #12]
   8b7b0:	e7d5      	b.n	8b75e <__sflush_r+0xd6>
   8b7b2:	f8c8 6000 	str.w	r6, [r8]
   8b7b6:	e7d1      	b.n	8b75c <__sflush_r+0xd4>

0008b7b8 <_fflush_r>:
   8b7b8:	b538      	push	{r3, r4, r5, lr}
   8b7ba:	460c      	mov	r4, r1
   8b7bc:	4605      	mov	r5, r0
   8b7be:	b108      	cbz	r0, 8b7c4 <_fflush_r+0xc>
   8b7c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b7c2:	b1a3      	cbz	r3, 8b7ee <_fflush_r+0x36>
   8b7c4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b7c8:	b1b8      	cbz	r0, 8b7fa <_fflush_r+0x42>
   8b7ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b7cc:	07db      	lsls	r3, r3, #31
   8b7ce:	d401      	bmi.n	8b7d4 <_fflush_r+0x1c>
   8b7d0:	0581      	lsls	r1, r0, #22
   8b7d2:	d515      	bpl.n	8b800 <_fflush_r+0x48>
   8b7d4:	4628      	mov	r0, r5
   8b7d6:	4621      	mov	r1, r4
   8b7d8:	f7ff ff56 	bl	8b688 <__sflush_r>
   8b7dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b7de:	4605      	mov	r5, r0
   8b7e0:	07da      	lsls	r2, r3, #31
   8b7e2:	d402      	bmi.n	8b7ea <_fflush_r+0x32>
   8b7e4:	89a3      	ldrh	r3, [r4, #12]
   8b7e6:	059b      	lsls	r3, r3, #22
   8b7e8:	d50e      	bpl.n	8b808 <_fflush_r+0x50>
   8b7ea:	4628      	mov	r0, r5
   8b7ec:	bd38      	pop	{r3, r4, r5, pc}
   8b7ee:	f000 f83f 	bl	8b870 <__sinit>
   8b7f2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b7f6:	2800      	cmp	r0, #0
   8b7f8:	d1e7      	bne.n	8b7ca <_fflush_r+0x12>
   8b7fa:	4605      	mov	r5, r0
   8b7fc:	4628      	mov	r0, r5
   8b7fe:	bd38      	pop	{r3, r4, r5, pc}
   8b800:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b802:	f000 fc07 	bl	8c014 <__retarget_lock_acquire_recursive>
   8b806:	e7e5      	b.n	8b7d4 <_fflush_r+0x1c>
   8b808:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b80a:	f000 fc05 	bl	8c018 <__retarget_lock_release_recursive>
   8b80e:	4628      	mov	r0, r5
   8b810:	bd38      	pop	{r3, r4, r5, pc}
   8b812:	bf00      	nop

0008b814 <std>:
   8b814:	2300      	movs	r3, #0
   8b816:	b510      	push	{r4, lr}
   8b818:	4604      	mov	r4, r0
   8b81a:	e9c0 3300 	strd	r3, r3, [r0]
   8b81e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8b822:	8181      	strh	r1, [r0, #12]
   8b824:	81c2      	strh	r2, [r0, #14]
   8b826:	4619      	mov	r1, r3
   8b828:	6083      	str	r3, [r0, #8]
   8b82a:	6643      	str	r3, [r0, #100]	; 0x64
   8b82c:	6183      	str	r3, [r0, #24]
   8b82e:	2208      	movs	r2, #8
   8b830:	305c      	adds	r0, #92	; 0x5c
   8b832:	f7fc f8b5 	bl	879a0 <memset>
   8b836:	4807      	ldr	r0, [pc, #28]	; (8b854 <std+0x40>)
   8b838:	4907      	ldr	r1, [pc, #28]	; (8b858 <std+0x44>)
   8b83a:	4a08      	ldr	r2, [pc, #32]	; (8b85c <std+0x48>)
   8b83c:	4b08      	ldr	r3, [pc, #32]	; (8b860 <std+0x4c>)
   8b83e:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8b842:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8b846:	62e3      	str	r3, [r4, #44]	; 0x2c
   8b848:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b850:	f000 bbdc 	b.w	8c00c <__retarget_lock_init_recursive>
   8b854:	0008d37d 	.word	0x0008d37d
   8b858:	0008d3a1 	.word	0x0008d3a1
   8b85c:	0008d3e1 	.word	0x0008d3e1
   8b860:	0008d401 	.word	0x0008d401

0008b864 <_cleanup_r>:
   8b864:	4901      	ldr	r1, [pc, #4]	; (8b86c <_cleanup_r+0x8>)
   8b866:	f000 bba3 	b.w	8bfb0 <_fwalk_reent>
   8b86a:	bf00      	nop
   8b86c:	0008d845 	.word	0x0008d845

0008b870 <__sinit>:
   8b870:	b510      	push	{r4, lr}
   8b872:	4604      	mov	r4, r0
   8b874:	4813      	ldr	r0, [pc, #76]	; (8b8c4 <__sinit+0x54>)
   8b876:	f000 fbcd 	bl	8c014 <__retarget_lock_acquire_recursive>
   8b87a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8b87c:	b9ea      	cbnz	r2, 8b8ba <__sinit+0x4a>
   8b87e:	2003      	movs	r0, #3
   8b880:	4911      	ldr	r1, [pc, #68]	; (8b8c8 <__sinit+0x58>)
   8b882:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8b886:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8b88a:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8b88e:	63e1      	str	r1, [r4, #60]	; 0x3c
   8b890:	6860      	ldr	r0, [r4, #4]
   8b892:	2104      	movs	r1, #4
   8b894:	f7ff ffbe 	bl	8b814 <std>
   8b898:	68a0      	ldr	r0, [r4, #8]
   8b89a:	2201      	movs	r2, #1
   8b89c:	2109      	movs	r1, #9
   8b89e:	f7ff ffb9 	bl	8b814 <std>
   8b8a2:	68e0      	ldr	r0, [r4, #12]
   8b8a4:	2202      	movs	r2, #2
   8b8a6:	2112      	movs	r1, #18
   8b8a8:	f7ff ffb4 	bl	8b814 <std>
   8b8ac:	2301      	movs	r3, #1
   8b8ae:	4805      	ldr	r0, [pc, #20]	; (8b8c4 <__sinit+0x54>)
   8b8b0:	63a3      	str	r3, [r4, #56]	; 0x38
   8b8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b8b6:	f000 bbaf 	b.w	8c018 <__retarget_lock_release_recursive>
   8b8ba:	4802      	ldr	r0, [pc, #8]	; (8b8c4 <__sinit+0x54>)
   8b8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b8c0:	f000 bbaa 	b.w	8c018 <__retarget_lock_release_recursive>
   8b8c4:	20002e18 	.word	0x20002e18
   8b8c8:	0008b865 	.word	0x0008b865

0008b8cc <__sfp_lock_acquire>:
   8b8cc:	4801      	ldr	r0, [pc, #4]	; (8b8d4 <__sfp_lock_acquire+0x8>)
   8b8ce:	f000 bba1 	b.w	8c014 <__retarget_lock_acquire_recursive>
   8b8d2:	bf00      	nop
   8b8d4:	20002e2c 	.word	0x20002e2c

0008b8d8 <__sfp_lock_release>:
   8b8d8:	4801      	ldr	r0, [pc, #4]	; (8b8e0 <__sfp_lock_release+0x8>)
   8b8da:	f000 bb9d 	b.w	8c018 <__retarget_lock_release_recursive>
   8b8de:	bf00      	nop
   8b8e0:	20002e2c 	.word	0x20002e2c

0008b8e4 <__libc_fini_array>:
   8b8e4:	b538      	push	{r3, r4, r5, lr}
   8b8e6:	4b08      	ldr	r3, [pc, #32]	; (8b908 <__libc_fini_array+0x24>)
   8b8e8:	4d08      	ldr	r5, [pc, #32]	; (8b90c <__libc_fini_array+0x28>)
   8b8ea:	1b5b      	subs	r3, r3, r5
   8b8ec:	109c      	asrs	r4, r3, #2
   8b8ee:	d007      	beq.n	8b900 <__libc_fini_array+0x1c>
   8b8f0:	3b04      	subs	r3, #4
   8b8f2:	441d      	add	r5, r3
   8b8f4:	3c01      	subs	r4, #1
   8b8f6:	f855 3904 	ldr.w	r3, [r5], #-4
   8b8fa:	4798      	blx	r3
   8b8fc:	2c00      	cmp	r4, #0
   8b8fe:	d1f9      	bne.n	8b8f4 <__libc_fini_array+0x10>
   8b900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b904:	f003 b8a2 	b.w	8ea4c <_fini>
   8b908:	0008ea5c 	.word	0x0008ea5c
   8b90c:	0008ea58 	.word	0x0008ea58

0008b910 <__fputwc>:
   8b910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b914:	b083      	sub	sp, #12
   8b916:	4607      	mov	r7, r0
   8b918:	4688      	mov	r8, r1
   8b91a:	4614      	mov	r4, r2
   8b91c:	f000 fb6c 	bl	8bff8 <__locale_mb_cur_max>
   8b920:	2801      	cmp	r0, #1
   8b922:	d103      	bne.n	8b92c <__fputwc+0x1c>
   8b924:	f108 33ff 	add.w	r3, r8, #4294967295
   8b928:	2bfe      	cmp	r3, #254	; 0xfe
   8b92a:	d933      	bls.n	8b994 <__fputwc+0x84>
   8b92c:	4642      	mov	r2, r8
   8b92e:	4638      	mov	r0, r7
   8b930:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b934:	a901      	add	r1, sp, #4
   8b936:	f001 fe9d 	bl	8d674 <_wcrtomb_r>
   8b93a:	1c42      	adds	r2, r0, #1
   8b93c:	4606      	mov	r6, r0
   8b93e:	d02f      	beq.n	8b9a0 <__fputwc+0x90>
   8b940:	b318      	cbz	r0, 8b98a <__fputwc+0x7a>
   8b942:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b946:	2500      	movs	r5, #0
   8b948:	f10d 0904 	add.w	r9, sp, #4
   8b94c:	e008      	b.n	8b960 <__fputwc+0x50>
   8b94e:	6823      	ldr	r3, [r4, #0]
   8b950:	1c5a      	adds	r2, r3, #1
   8b952:	6022      	str	r2, [r4, #0]
   8b954:	7019      	strb	r1, [r3, #0]
   8b956:	3501      	adds	r5, #1
   8b958:	42b5      	cmp	r5, r6
   8b95a:	d216      	bcs.n	8b98a <__fputwc+0x7a>
   8b95c:	f815 1009 	ldrb.w	r1, [r5, r9]
   8b960:	68a3      	ldr	r3, [r4, #8]
   8b962:	3b01      	subs	r3, #1
   8b964:	2b00      	cmp	r3, #0
   8b966:	60a3      	str	r3, [r4, #8]
   8b968:	daf1      	bge.n	8b94e <__fputwc+0x3e>
   8b96a:	69a2      	ldr	r2, [r4, #24]
   8b96c:	4293      	cmp	r3, r2
   8b96e:	db01      	blt.n	8b974 <__fputwc+0x64>
   8b970:	290a      	cmp	r1, #10
   8b972:	d1ec      	bne.n	8b94e <__fputwc+0x3e>
   8b974:	4622      	mov	r2, r4
   8b976:	4638      	mov	r0, r7
   8b978:	f001 fe24 	bl	8d5c4 <__swbuf_r>
   8b97c:	1c43      	adds	r3, r0, #1
   8b97e:	d1ea      	bne.n	8b956 <__fputwc+0x46>
   8b980:	4606      	mov	r6, r0
   8b982:	4630      	mov	r0, r6
   8b984:	b003      	add	sp, #12
   8b986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b98a:	4646      	mov	r6, r8
   8b98c:	4630      	mov	r0, r6
   8b98e:	b003      	add	sp, #12
   8b990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b994:	fa5f f188 	uxtb.w	r1, r8
   8b998:	4606      	mov	r6, r0
   8b99a:	f88d 1004 	strb.w	r1, [sp, #4]
   8b99e:	e7d2      	b.n	8b946 <__fputwc+0x36>
   8b9a0:	4630      	mov	r0, r6
   8b9a2:	89a3      	ldrh	r3, [r4, #12]
   8b9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b9a8:	81a3      	strh	r3, [r4, #12]
   8b9aa:	b003      	add	sp, #12
   8b9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b9b0 <_fputwc_r>:
   8b9b0:	b530      	push	{r4, r5, lr}
   8b9b2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b9b4:	4614      	mov	r4, r2
   8b9b6:	f013 0f01 	tst.w	r3, #1
   8b9ba:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b9be:	4605      	mov	r5, r0
   8b9c0:	b083      	sub	sp, #12
   8b9c2:	b29a      	uxth	r2, r3
   8b9c4:	d101      	bne.n	8b9ca <_fputwc_r+0x1a>
   8b9c6:	0598      	lsls	r0, r3, #22
   8b9c8:	d51c      	bpl.n	8ba04 <_fputwc_r+0x54>
   8b9ca:	0490      	lsls	r0, r2, #18
   8b9cc:	d406      	bmi.n	8b9dc <_fputwc_r+0x2c>
   8b9ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b9d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b9d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b9d8:	81a3      	strh	r3, [r4, #12]
   8b9da:	6662      	str	r2, [r4, #100]	; 0x64
   8b9dc:	4628      	mov	r0, r5
   8b9de:	4622      	mov	r2, r4
   8b9e0:	f7ff ff96 	bl	8b910 <__fputwc>
   8b9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b9e6:	4605      	mov	r5, r0
   8b9e8:	07da      	lsls	r2, r3, #31
   8b9ea:	d402      	bmi.n	8b9f2 <_fputwc_r+0x42>
   8b9ec:	89a3      	ldrh	r3, [r4, #12]
   8b9ee:	059b      	lsls	r3, r3, #22
   8b9f0:	d502      	bpl.n	8b9f8 <_fputwc_r+0x48>
   8b9f2:	4628      	mov	r0, r5
   8b9f4:	b003      	add	sp, #12
   8b9f6:	bd30      	pop	{r4, r5, pc}
   8b9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b9fa:	f000 fb0d 	bl	8c018 <__retarget_lock_release_recursive>
   8b9fe:	4628      	mov	r0, r5
   8ba00:	b003      	add	sp, #12
   8ba02:	bd30      	pop	{r4, r5, pc}
   8ba04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ba06:	9101      	str	r1, [sp, #4]
   8ba08:	f000 fb04 	bl	8c014 <__retarget_lock_acquire_recursive>
   8ba0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ba10:	9901      	ldr	r1, [sp, #4]
   8ba12:	b29a      	uxth	r2, r3
   8ba14:	e7d9      	b.n	8b9ca <_fputwc_r+0x1a>
   8ba16:	bf00      	nop

0008ba18 <_malloc_trim_r>:
   8ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ba1a:	460c      	mov	r4, r1
   8ba1c:	4f23      	ldr	r7, [pc, #140]	; (8baac <_malloc_trim_r+0x94>)
   8ba1e:	4606      	mov	r6, r0
   8ba20:	f000 feea 	bl	8c7f8 <__malloc_lock>
   8ba24:	68bb      	ldr	r3, [r7, #8]
   8ba26:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8ba2a:	685d      	ldr	r5, [r3, #4]
   8ba2c:	310f      	adds	r1, #15
   8ba2e:	f025 0503 	bic.w	r5, r5, #3
   8ba32:	194b      	adds	r3, r1, r5
   8ba34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8ba38:	f023 030f 	bic.w	r3, r3, #15
   8ba3c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8ba40:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8ba44:	db07      	blt.n	8ba56 <_malloc_trim_r+0x3e>
   8ba46:	2100      	movs	r1, #0
   8ba48:	4630      	mov	r0, r6
   8ba4a:	f001 fc85 	bl	8d358 <_sbrk_r>
   8ba4e:	68bb      	ldr	r3, [r7, #8]
   8ba50:	442b      	add	r3, r5
   8ba52:	4298      	cmp	r0, r3
   8ba54:	d004      	beq.n	8ba60 <_malloc_trim_r+0x48>
   8ba56:	4630      	mov	r0, r6
   8ba58:	f000 fed4 	bl	8c804 <__malloc_unlock>
   8ba5c:	2000      	movs	r0, #0
   8ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ba60:	4630      	mov	r0, r6
   8ba62:	4261      	negs	r1, r4
   8ba64:	f001 fc78 	bl	8d358 <_sbrk_r>
   8ba68:	3001      	adds	r0, #1
   8ba6a:	d00d      	beq.n	8ba88 <_malloc_trim_r+0x70>
   8ba6c:	4a10      	ldr	r2, [pc, #64]	; (8bab0 <_malloc_trim_r+0x98>)
   8ba6e:	68b9      	ldr	r1, [r7, #8]
   8ba70:	6813      	ldr	r3, [r2, #0]
   8ba72:	1b2d      	subs	r5, r5, r4
   8ba74:	f045 0501 	orr.w	r5, r5, #1
   8ba78:	4630      	mov	r0, r6
   8ba7a:	1b1b      	subs	r3, r3, r4
   8ba7c:	604d      	str	r5, [r1, #4]
   8ba7e:	6013      	str	r3, [r2, #0]
   8ba80:	f000 fec0 	bl	8c804 <__malloc_unlock>
   8ba84:	2001      	movs	r0, #1
   8ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ba88:	2100      	movs	r1, #0
   8ba8a:	4630      	mov	r0, r6
   8ba8c:	f001 fc64 	bl	8d358 <_sbrk_r>
   8ba90:	68ba      	ldr	r2, [r7, #8]
   8ba92:	1a83      	subs	r3, r0, r2
   8ba94:	2b0f      	cmp	r3, #15
   8ba96:	ddde      	ble.n	8ba56 <_malloc_trim_r+0x3e>
   8ba98:	4906      	ldr	r1, [pc, #24]	; (8bab4 <_malloc_trim_r+0x9c>)
   8ba9a:	f043 0301 	orr.w	r3, r3, #1
   8ba9e:	680c      	ldr	r4, [r1, #0]
   8baa0:	4903      	ldr	r1, [pc, #12]	; (8bab0 <_malloc_trim_r+0x98>)
   8baa2:	1b00      	subs	r0, r0, r4
   8baa4:	6053      	str	r3, [r2, #4]
   8baa6:	6008      	str	r0, [r1, #0]
   8baa8:	e7d5      	b.n	8ba56 <_malloc_trim_r+0x3e>
   8baaa:	bf00      	nop
   8baac:	20000cb8 	.word	0x20000cb8
   8bab0:	200023bc 	.word	0x200023bc
   8bab4:	200010c0 	.word	0x200010c0

0008bab8 <_free_r>:
   8bab8:	2900      	cmp	r1, #0
   8baba:	d05f      	beq.n	8bb7c <_free_r+0xc4>
   8babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8babe:	460c      	mov	r4, r1
   8bac0:	4606      	mov	r6, r0
   8bac2:	f000 fe99 	bl	8c7f8 <__malloc_lock>
   8bac6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8baca:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8bcc0 <_free_r+0x208>
   8bace:	f1a4 0008 	sub.w	r0, r4, #8
   8bad2:	f023 0101 	bic.w	r1, r3, #1
   8bad6:	1842      	adds	r2, r0, r1
   8bad8:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8badc:	6855      	ldr	r5, [r2, #4]
   8bade:	4297      	cmp	r7, r2
   8bae0:	f025 0503 	bic.w	r5, r5, #3
   8bae4:	f000 8089 	beq.w	8bbfa <_free_r+0x142>
   8bae8:	07df      	lsls	r7, r3, #31
   8baea:	6055      	str	r5, [r2, #4]
   8baec:	d434      	bmi.n	8bb58 <_free_r+0xa0>
   8baee:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8baf2:	f10c 0408 	add.w	r4, ip, #8
   8baf6:	1bc0      	subs	r0, r0, r7
   8baf8:	6883      	ldr	r3, [r0, #8]
   8bafa:	4439      	add	r1, r7
   8bafc:	42a3      	cmp	r3, r4
   8bafe:	d06a      	beq.n	8bbd6 <_free_r+0x11e>
   8bb00:	1957      	adds	r7, r2, r5
   8bb02:	687f      	ldr	r7, [r7, #4]
   8bb04:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8bb08:	f8c3 e00c 	str.w	lr, [r3, #12]
   8bb0c:	f8ce 3008 	str.w	r3, [lr, #8]
   8bb10:	07fb      	lsls	r3, r7, #31
   8bb12:	f140 8097 	bpl.w	8bc44 <_free_r+0x18c>
   8bb16:	f041 0301 	orr.w	r3, r1, #1
   8bb1a:	6043      	str	r3, [r0, #4]
   8bb1c:	6011      	str	r1, [r2, #0]
   8bb1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8bb22:	d234      	bcs.n	8bb8e <_free_r+0xd6>
   8bb24:	2201      	movs	r2, #1
   8bb26:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8bb2a:	08cb      	lsrs	r3, r1, #3
   8bb2c:	0949      	lsrs	r1, r1, #5
   8bb2e:	4413      	add	r3, r2
   8bb30:	fa02 f101 	lsl.w	r1, r2, r1
   8bb34:	4321      	orrs	r1, r4
   8bb36:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8bb3a:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8bb3e:	3a08      	subs	r2, #8
   8bb40:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8bb44:	f8cc 1004 	str.w	r1, [ip, #4]
   8bb48:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8bb4c:	60e0      	str	r0, [r4, #12]
   8bb4e:	4630      	mov	r0, r6
   8bb50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bb54:	f000 be56 	b.w	8c804 <__malloc_unlock>
   8bb58:	1953      	adds	r3, r2, r5
   8bb5a:	685b      	ldr	r3, [r3, #4]
   8bb5c:	07df      	lsls	r7, r3, #31
   8bb5e:	d40e      	bmi.n	8bb7e <_free_r+0xc6>
   8bb60:	4429      	add	r1, r5
   8bb62:	f10c 0408 	add.w	r4, ip, #8
   8bb66:	6893      	ldr	r3, [r2, #8]
   8bb68:	42a3      	cmp	r3, r4
   8bb6a:	d073      	beq.n	8bc54 <_free_r+0x19c>
   8bb6c:	68d4      	ldr	r4, [r2, #12]
   8bb6e:	f041 0201 	orr.w	r2, r1, #1
   8bb72:	60dc      	str	r4, [r3, #12]
   8bb74:	60a3      	str	r3, [r4, #8]
   8bb76:	6042      	str	r2, [r0, #4]
   8bb78:	5041      	str	r1, [r0, r1]
   8bb7a:	e7d0      	b.n	8bb1e <_free_r+0x66>
   8bb7c:	4770      	bx	lr
   8bb7e:	f041 0301 	orr.w	r3, r1, #1
   8bb82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8bb86:	f844 3c04 	str.w	r3, [r4, #-4]
   8bb8a:	6011      	str	r1, [r2, #0]
   8bb8c:	d3ca      	bcc.n	8bb24 <_free_r+0x6c>
   8bb8e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8bb92:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8bb96:	d24a      	bcs.n	8bc2e <_free_r+0x176>
   8bb98:	098b      	lsrs	r3, r1, #6
   8bb9a:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8bb9e:	00ed      	lsls	r5, r5, #3
   8bba0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8bba4:	f85c 3005 	ldr.w	r3, [ip, r5]
   8bba8:	eb0c 0405 	add.w	r4, ip, r5
   8bbac:	3c08      	subs	r4, #8
   8bbae:	429c      	cmp	r4, r3
   8bbb0:	d059      	beq.n	8bc66 <_free_r+0x1ae>
   8bbb2:	685a      	ldr	r2, [r3, #4]
   8bbb4:	f022 0203 	bic.w	r2, r2, #3
   8bbb8:	428a      	cmp	r2, r1
   8bbba:	d902      	bls.n	8bbc2 <_free_r+0x10a>
   8bbbc:	689b      	ldr	r3, [r3, #8]
   8bbbe:	429c      	cmp	r4, r3
   8bbc0:	d1f7      	bne.n	8bbb2 <_free_r+0xfa>
   8bbc2:	68dc      	ldr	r4, [r3, #12]
   8bbc4:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8bbc8:	60a0      	str	r0, [r4, #8]
   8bbca:	60d8      	str	r0, [r3, #12]
   8bbcc:	4630      	mov	r0, r6
   8bbce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bbd2:	f000 be17 	b.w	8c804 <__malloc_unlock>
   8bbd6:	1953      	adds	r3, r2, r5
   8bbd8:	685b      	ldr	r3, [r3, #4]
   8bbda:	07db      	lsls	r3, r3, #31
   8bbdc:	d466      	bmi.n	8bcac <_free_r+0x1f4>
   8bbde:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8bbe2:	4429      	add	r1, r5
   8bbe4:	f041 0401 	orr.w	r4, r1, #1
   8bbe8:	60d3      	str	r3, [r2, #12]
   8bbea:	609a      	str	r2, [r3, #8]
   8bbec:	6044      	str	r4, [r0, #4]
   8bbee:	5041      	str	r1, [r0, r1]
   8bbf0:	4630      	mov	r0, r6
   8bbf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bbf6:	f000 be05 	b.w	8c804 <__malloc_unlock>
   8bbfa:	07db      	lsls	r3, r3, #31
   8bbfc:	4429      	add	r1, r5
   8bbfe:	d407      	bmi.n	8bc10 <_free_r+0x158>
   8bc00:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8bc04:	1b00      	subs	r0, r0, r4
   8bc06:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8bc0a:	4421      	add	r1, r4
   8bc0c:	60d3      	str	r3, [r2, #12]
   8bc0e:	609a      	str	r2, [r3, #8]
   8bc10:	4b29      	ldr	r3, [pc, #164]	; (8bcb8 <_free_r+0x200>)
   8bc12:	f041 0201 	orr.w	r2, r1, #1
   8bc16:	681b      	ldr	r3, [r3, #0]
   8bc18:	6042      	str	r2, [r0, #4]
   8bc1a:	428b      	cmp	r3, r1
   8bc1c:	f8cc 0008 	str.w	r0, [ip, #8]
   8bc20:	d895      	bhi.n	8bb4e <_free_r+0x96>
   8bc22:	4b26      	ldr	r3, [pc, #152]	; (8bcbc <_free_r+0x204>)
   8bc24:	4630      	mov	r0, r6
   8bc26:	6819      	ldr	r1, [r3, #0]
   8bc28:	f7ff fef6 	bl	8ba18 <_malloc_trim_r>
   8bc2c:	e78f      	b.n	8bb4e <_free_r+0x96>
   8bc2e:	2b14      	cmp	r3, #20
   8bc30:	d90a      	bls.n	8bc48 <_free_r+0x190>
   8bc32:	2b54      	cmp	r3, #84	; 0x54
   8bc34:	d821      	bhi.n	8bc7a <_free_r+0x1c2>
   8bc36:	0b0b      	lsrs	r3, r1, #12
   8bc38:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8bc3c:	00ed      	lsls	r5, r5, #3
   8bc3e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8bc42:	e7af      	b.n	8bba4 <_free_r+0xec>
   8bc44:	4429      	add	r1, r5
   8bc46:	e78e      	b.n	8bb66 <_free_r+0xae>
   8bc48:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8bc4c:	00ed      	lsls	r5, r5, #3
   8bc4e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8bc52:	e7a7      	b.n	8bba4 <_free_r+0xec>
   8bc54:	f041 0301 	orr.w	r3, r1, #1
   8bc58:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8bc5c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8bc60:	6043      	str	r3, [r0, #4]
   8bc62:	5041      	str	r1, [r0, r1]
   8bc64:	e773      	b.n	8bb4e <_free_r+0x96>
   8bc66:	2501      	movs	r5, #1
   8bc68:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8bc6c:	1092      	asrs	r2, r2, #2
   8bc6e:	fa05 f202 	lsl.w	r2, r5, r2
   8bc72:	430a      	orrs	r2, r1
   8bc74:	f8cc 2004 	str.w	r2, [ip, #4]
   8bc78:	e7a4      	b.n	8bbc4 <_free_r+0x10c>
   8bc7a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bc7e:	d806      	bhi.n	8bc8e <_free_r+0x1d6>
   8bc80:	0bcb      	lsrs	r3, r1, #15
   8bc82:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8bc86:	00ed      	lsls	r5, r5, #3
   8bc88:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8bc8c:	e78a      	b.n	8bba4 <_free_r+0xec>
   8bc8e:	f240 5254 	movw	r2, #1364	; 0x554
   8bc92:	4293      	cmp	r3, r2
   8bc94:	d806      	bhi.n	8bca4 <_free_r+0x1ec>
   8bc96:	0c8b      	lsrs	r3, r1, #18
   8bc98:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8bc9c:	00ed      	lsls	r5, r5, #3
   8bc9e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8bca2:	e77f      	b.n	8bba4 <_free_r+0xec>
   8bca4:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8bca8:	227e      	movs	r2, #126	; 0x7e
   8bcaa:	e77b      	b.n	8bba4 <_free_r+0xec>
   8bcac:	f041 0301 	orr.w	r3, r1, #1
   8bcb0:	6043      	str	r3, [r0, #4]
   8bcb2:	6011      	str	r1, [r2, #0]
   8bcb4:	e74b      	b.n	8bb4e <_free_r+0x96>
   8bcb6:	bf00      	nop
   8bcb8:	200010c4 	.word	0x200010c4
   8bcbc:	200023ec 	.word	0x200023ec
   8bcc0:	20000cb8 	.word	0x20000cb8

0008bcc4 <__sfvwrite_r>:
   8bcc4:	6893      	ldr	r3, [r2, #8]
   8bcc6:	2b00      	cmp	r3, #0
   8bcc8:	f000 80bd 	beq.w	8be46 <__sfvwrite_r+0x182>
   8bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bcd0:	4690      	mov	r8, r2
   8bcd2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8bcd6:	460c      	mov	r4, r1
   8bcd8:	0711      	lsls	r1, r2, #28
   8bcda:	4681      	mov	r9, r0
   8bcdc:	b083      	sub	sp, #12
   8bcde:	b293      	uxth	r3, r2
   8bce0:	d527      	bpl.n	8bd32 <__sfvwrite_r+0x6e>
   8bce2:	6922      	ldr	r2, [r4, #16]
   8bce4:	b32a      	cbz	r2, 8bd32 <__sfvwrite_r+0x6e>
   8bce6:	f013 0702 	ands.w	r7, r3, #2
   8bcea:	f8d8 5000 	ldr.w	r5, [r8]
   8bcee:	d02f      	beq.n	8bd50 <__sfvwrite_r+0x8c>
   8bcf0:	f04f 0b00 	mov.w	fp, #0
   8bcf4:	465f      	mov	r7, fp
   8bcf6:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8bfac <__sfvwrite_r+0x2e8>
   8bcfa:	2f00      	cmp	r7, #0
   8bcfc:	f000 8089 	beq.w	8be12 <__sfvwrite_r+0x14e>
   8bd00:	4557      	cmp	r7, sl
   8bd02:	463b      	mov	r3, r7
   8bd04:	465a      	mov	r2, fp
   8bd06:	bf28      	it	cs
   8bd08:	4653      	movcs	r3, sl
   8bd0a:	4648      	mov	r0, r9
   8bd0c:	69e1      	ldr	r1, [r4, #28]
   8bd0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8bd10:	47b0      	blx	r6
   8bd12:	2800      	cmp	r0, #0
   8bd14:	f340 808d 	ble.w	8be32 <__sfvwrite_r+0x16e>
   8bd18:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8bd1c:	4483      	add	fp, r0
   8bd1e:	1a1b      	subs	r3, r3, r0
   8bd20:	1a3f      	subs	r7, r7, r0
   8bd22:	f8c8 3008 	str.w	r3, [r8, #8]
   8bd26:	2b00      	cmp	r3, #0
   8bd28:	d1e7      	bne.n	8bcfa <__sfvwrite_r+0x36>
   8bd2a:	2000      	movs	r0, #0
   8bd2c:	b003      	add	sp, #12
   8bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bd32:	4621      	mov	r1, r4
   8bd34:	4648      	mov	r0, r9
   8bd36:	f7fe fc3b 	bl	8a5b0 <__swsetup_r>
   8bd3a:	2800      	cmp	r0, #0
   8bd3c:	f040 8132 	bne.w	8bfa4 <__sfvwrite_r+0x2e0>
   8bd40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bd44:	f8d8 5000 	ldr.w	r5, [r8]
   8bd48:	b293      	uxth	r3, r2
   8bd4a:	f013 0702 	ands.w	r7, r3, #2
   8bd4e:	d1cf      	bne.n	8bcf0 <__sfvwrite_r+0x2c>
   8bd50:	f013 0a01 	ands.w	sl, r3, #1
   8bd54:	d179      	bne.n	8be4a <__sfvwrite_r+0x186>
   8bd56:	4656      	mov	r6, sl
   8bd58:	2e00      	cmp	r6, #0
   8bd5a:	d056      	beq.n	8be0a <__sfvwrite_r+0x146>
   8bd5c:	059a      	lsls	r2, r3, #22
   8bd5e:	68a7      	ldr	r7, [r4, #8]
   8bd60:	f140 80bd 	bpl.w	8bede <__sfvwrite_r+0x21a>
   8bd64:	42b7      	cmp	r7, r6
   8bd66:	46bb      	mov	fp, r7
   8bd68:	f200 80d2 	bhi.w	8bf10 <__sfvwrite_r+0x24c>
   8bd6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bd70:	f000 80d0 	beq.w	8bf14 <__sfvwrite_r+0x250>
   8bd74:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8bd78:	6822      	ldr	r2, [r4, #0]
   8bd7a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8bd7e:	eba2 0b01 	sub.w	fp, r2, r1
   8bd82:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8bd86:	f10b 0001 	add.w	r0, fp, #1
   8bd8a:	107f      	asrs	r7, r7, #1
   8bd8c:	4430      	add	r0, r6
   8bd8e:	42b8      	cmp	r0, r7
   8bd90:	463a      	mov	r2, r7
   8bd92:	bf84      	itt	hi
   8bd94:	4607      	movhi	r7, r0
   8bd96:	463a      	movhi	r2, r7
   8bd98:	055b      	lsls	r3, r3, #21
   8bd9a:	f140 80e7 	bpl.w	8bf6c <__sfvwrite_r+0x2a8>
   8bd9e:	4611      	mov	r1, r2
   8bda0:	4648      	mov	r0, r9
   8bda2:	f000 f9bb 	bl	8c11c <_malloc_r>
   8bda6:	2800      	cmp	r0, #0
   8bda8:	f000 80f6 	beq.w	8bf98 <__sfvwrite_r+0x2d4>
   8bdac:	465a      	mov	r2, fp
   8bdae:	6921      	ldr	r1, [r4, #16]
   8bdb0:	9000      	str	r0, [sp, #0]
   8bdb2:	f7fb fd7f 	bl	878b4 <memcpy>
   8bdb6:	89a2      	ldrh	r2, [r4, #12]
   8bdb8:	9b00      	ldr	r3, [sp, #0]
   8bdba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bdbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bdc2:	81a2      	strh	r2, [r4, #12]
   8bdc4:	eba7 020b 	sub.w	r2, r7, fp
   8bdc8:	eb03 000b 	add.w	r0, r3, fp
   8bdcc:	6167      	str	r7, [r4, #20]
   8bdce:	46b3      	mov	fp, r6
   8bdd0:	4637      	mov	r7, r6
   8bdd2:	6123      	str	r3, [r4, #16]
   8bdd4:	6020      	str	r0, [r4, #0]
   8bdd6:	60a2      	str	r2, [r4, #8]
   8bdd8:	465a      	mov	r2, fp
   8bdda:	4651      	mov	r1, sl
   8bddc:	f000 fca2 	bl	8c724 <memmove>
   8bde0:	68a2      	ldr	r2, [r4, #8]
   8bde2:	6823      	ldr	r3, [r4, #0]
   8bde4:	1bd2      	subs	r2, r2, r7
   8bde6:	4637      	mov	r7, r6
   8bde8:	2600      	movs	r6, #0
   8bdea:	445b      	add	r3, fp
   8bdec:	60a2      	str	r2, [r4, #8]
   8bdee:	6023      	str	r3, [r4, #0]
   8bdf0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8bdf4:	44ba      	add	sl, r7
   8bdf6:	1bd7      	subs	r7, r2, r7
   8bdf8:	f8c8 7008 	str.w	r7, [r8, #8]
   8bdfc:	2f00      	cmp	r7, #0
   8bdfe:	d094      	beq.n	8bd2a <__sfvwrite_r+0x66>
   8be00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8be04:	b29b      	uxth	r3, r3
   8be06:	2e00      	cmp	r6, #0
   8be08:	d1a8      	bne.n	8bd5c <__sfvwrite_r+0x98>
   8be0a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8be0e:	3508      	adds	r5, #8
   8be10:	e7a2      	b.n	8bd58 <__sfvwrite_r+0x94>
   8be12:	e9d5 b700 	ldrd	fp, r7, [r5]
   8be16:	3508      	adds	r5, #8
   8be18:	e76f      	b.n	8bcfa <__sfvwrite_r+0x36>
   8be1a:	4629      	mov	r1, r5
   8be1c:	465a      	mov	r2, fp
   8be1e:	f000 fc81 	bl	8c724 <memmove>
   8be22:	6823      	ldr	r3, [r4, #0]
   8be24:	4621      	mov	r1, r4
   8be26:	445b      	add	r3, fp
   8be28:	4648      	mov	r0, r9
   8be2a:	6023      	str	r3, [r4, #0]
   8be2c:	f7ff fcc4 	bl	8b7b8 <_fflush_r>
   8be30:	b358      	cbz	r0, 8be8a <__sfvwrite_r+0x1c6>
   8be32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8be36:	f04f 30ff 	mov.w	r0, #4294967295
   8be3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8be3e:	81a3      	strh	r3, [r4, #12]
   8be40:	b003      	add	sp, #12
   8be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be46:	2000      	movs	r0, #0
   8be48:	4770      	bx	lr
   8be4a:	463e      	mov	r6, r7
   8be4c:	46aa      	mov	sl, r5
   8be4e:	4638      	mov	r0, r7
   8be50:	463d      	mov	r5, r7
   8be52:	9700      	str	r7, [sp, #0]
   8be54:	b36e      	cbz	r6, 8beb2 <__sfvwrite_r+0x1ee>
   8be56:	2800      	cmp	r0, #0
   8be58:	d035      	beq.n	8bec6 <__sfvwrite_r+0x202>
   8be5a:	9a00      	ldr	r2, [sp, #0]
   8be5c:	6820      	ldr	r0, [r4, #0]
   8be5e:	6921      	ldr	r1, [r4, #16]
   8be60:	42b2      	cmp	r2, r6
   8be62:	bf28      	it	cs
   8be64:	4632      	movcs	r2, r6
   8be66:	4288      	cmp	r0, r1
   8be68:	6963      	ldr	r3, [r4, #20]
   8be6a:	d904      	bls.n	8be76 <__sfvwrite_r+0x1b2>
   8be6c:	68a1      	ldr	r1, [r4, #8]
   8be6e:	eb03 0b01 	add.w	fp, r3, r1
   8be72:	455a      	cmp	r2, fp
   8be74:	dcd1      	bgt.n	8be1a <__sfvwrite_r+0x156>
   8be76:	4293      	cmp	r3, r2
   8be78:	dc6b      	bgt.n	8bf52 <__sfvwrite_r+0x28e>
   8be7a:	462a      	mov	r2, r5
   8be7c:	4648      	mov	r0, r9
   8be7e:	69e1      	ldr	r1, [r4, #28]
   8be80:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8be82:	47b8      	blx	r7
   8be84:	f1b0 0b00 	subs.w	fp, r0, #0
   8be88:	ddd3      	ble.n	8be32 <__sfvwrite_r+0x16e>
   8be8a:	9b00      	ldr	r3, [sp, #0]
   8be8c:	ebb3 030b 	subs.w	r3, r3, fp
   8be90:	9300      	str	r3, [sp, #0]
   8be92:	d057      	beq.n	8bf44 <__sfvwrite_r+0x280>
   8be94:	2001      	movs	r0, #1
   8be96:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8be9a:	445d      	add	r5, fp
   8be9c:	eba3 030b 	sub.w	r3, r3, fp
   8bea0:	eba6 060b 	sub.w	r6, r6, fp
   8bea4:	f8c8 3008 	str.w	r3, [r8, #8]
   8bea8:	2b00      	cmp	r3, #0
   8beaa:	f43f af3e 	beq.w	8bd2a <__sfvwrite_r+0x66>
   8beae:	2e00      	cmp	r6, #0
   8beb0:	d1d1      	bne.n	8be56 <__sfvwrite_r+0x192>
   8beb2:	f10a 0308 	add.w	r3, sl, #8
   8beb6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8beba:	469a      	mov	sl, r3
   8bebc:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8bec0:	3308      	adds	r3, #8
   8bec2:	2e00      	cmp	r6, #0
   8bec4:	d0f7      	beq.n	8beb6 <__sfvwrite_r+0x1f2>
   8bec6:	4632      	mov	r2, r6
   8bec8:	210a      	movs	r1, #10
   8beca:	4628      	mov	r0, r5
   8becc:	f000 fbea 	bl	8c6a4 <memchr>
   8bed0:	2800      	cmp	r0, #0
   8bed2:	d05e      	beq.n	8bf92 <__sfvwrite_r+0x2ce>
   8bed4:	3001      	adds	r0, #1
   8bed6:	1b43      	subs	r3, r0, r5
   8bed8:	461a      	mov	r2, r3
   8beda:	9300      	str	r3, [sp, #0]
   8bedc:	e7be      	b.n	8be5c <__sfvwrite_r+0x198>
   8bede:	6820      	ldr	r0, [r4, #0]
   8bee0:	6923      	ldr	r3, [r4, #16]
   8bee2:	4298      	cmp	r0, r3
   8bee4:	d818      	bhi.n	8bf18 <__sfvwrite_r+0x254>
   8bee6:	6962      	ldr	r2, [r4, #20]
   8bee8:	42b2      	cmp	r2, r6
   8beea:	d815      	bhi.n	8bf18 <__sfvwrite_r+0x254>
   8beec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8bef0:	42b3      	cmp	r3, r6
   8bef2:	bf28      	it	cs
   8bef4:	4633      	movcs	r3, r6
   8bef6:	fb93 f3f2 	sdiv	r3, r3, r2
   8befa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8befc:	fb02 f303 	mul.w	r3, r2, r3
   8bf00:	4648      	mov	r0, r9
   8bf02:	4652      	mov	r2, sl
   8bf04:	69e1      	ldr	r1, [r4, #28]
   8bf06:	47b8      	blx	r7
   8bf08:	1e07      	subs	r7, r0, #0
   8bf0a:	dd92      	ble.n	8be32 <__sfvwrite_r+0x16e>
   8bf0c:	1bf6      	subs	r6, r6, r7
   8bf0e:	e76f      	b.n	8bdf0 <__sfvwrite_r+0x12c>
   8bf10:	4637      	mov	r7, r6
   8bf12:	46b3      	mov	fp, r6
   8bf14:	6820      	ldr	r0, [r4, #0]
   8bf16:	e75f      	b.n	8bdd8 <__sfvwrite_r+0x114>
   8bf18:	42b7      	cmp	r7, r6
   8bf1a:	bf28      	it	cs
   8bf1c:	4637      	movcs	r7, r6
   8bf1e:	4651      	mov	r1, sl
   8bf20:	463a      	mov	r2, r7
   8bf22:	f000 fbff 	bl	8c724 <memmove>
   8bf26:	68a3      	ldr	r3, [r4, #8]
   8bf28:	6822      	ldr	r2, [r4, #0]
   8bf2a:	1bdb      	subs	r3, r3, r7
   8bf2c:	443a      	add	r2, r7
   8bf2e:	60a3      	str	r3, [r4, #8]
   8bf30:	6022      	str	r2, [r4, #0]
   8bf32:	2b00      	cmp	r3, #0
   8bf34:	d1ea      	bne.n	8bf0c <__sfvwrite_r+0x248>
   8bf36:	4621      	mov	r1, r4
   8bf38:	4648      	mov	r0, r9
   8bf3a:	f7ff fc3d 	bl	8b7b8 <_fflush_r>
   8bf3e:	2800      	cmp	r0, #0
   8bf40:	d0e4      	beq.n	8bf0c <__sfvwrite_r+0x248>
   8bf42:	e776      	b.n	8be32 <__sfvwrite_r+0x16e>
   8bf44:	4621      	mov	r1, r4
   8bf46:	4648      	mov	r0, r9
   8bf48:	f7ff fc36 	bl	8b7b8 <_fflush_r>
   8bf4c:	2800      	cmp	r0, #0
   8bf4e:	d0a2      	beq.n	8be96 <__sfvwrite_r+0x1d2>
   8bf50:	e76f      	b.n	8be32 <__sfvwrite_r+0x16e>
   8bf52:	4629      	mov	r1, r5
   8bf54:	4693      	mov	fp, r2
   8bf56:	9201      	str	r2, [sp, #4]
   8bf58:	f000 fbe4 	bl	8c724 <memmove>
   8bf5c:	68a1      	ldr	r1, [r4, #8]
   8bf5e:	6823      	ldr	r3, [r4, #0]
   8bf60:	9a01      	ldr	r2, [sp, #4]
   8bf62:	1a89      	subs	r1, r1, r2
   8bf64:	441a      	add	r2, r3
   8bf66:	60a1      	str	r1, [r4, #8]
   8bf68:	6022      	str	r2, [r4, #0]
   8bf6a:	e78e      	b.n	8be8a <__sfvwrite_r+0x1c6>
   8bf6c:	4648      	mov	r0, r9
   8bf6e:	f000 ffcb 	bl	8cf08 <_realloc_r>
   8bf72:	4603      	mov	r3, r0
   8bf74:	2800      	cmp	r0, #0
   8bf76:	f47f af25 	bne.w	8bdc4 <__sfvwrite_r+0x100>
   8bf7a:	4648      	mov	r0, r9
   8bf7c:	6921      	ldr	r1, [r4, #16]
   8bf7e:	f7ff fd9b 	bl	8bab8 <_free_r>
   8bf82:	220c      	movs	r2, #12
   8bf84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf88:	f8c9 2000 	str.w	r2, [r9]
   8bf8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8bf90:	e751      	b.n	8be36 <__sfvwrite_r+0x172>
   8bf92:	1c72      	adds	r2, r6, #1
   8bf94:	9200      	str	r2, [sp, #0]
   8bf96:	e761      	b.n	8be5c <__sfvwrite_r+0x198>
   8bf98:	220c      	movs	r2, #12
   8bf9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf9e:	f8c9 2000 	str.w	r2, [r9]
   8bfa2:	e748      	b.n	8be36 <__sfvwrite_r+0x172>
   8bfa4:	f04f 30ff 	mov.w	r0, #4294967295
   8bfa8:	e6c0      	b.n	8bd2c <__sfvwrite_r+0x68>
   8bfaa:	bf00      	nop
   8bfac:	7ffffc00 	.word	0x7ffffc00

0008bfb0 <_fwalk_reent>:
   8bfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8bfb4:	4607      	mov	r7, r0
   8bfb6:	4688      	mov	r8, r1
   8bfb8:	f04f 0900 	mov.w	r9, #0
   8bfbc:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8bfc0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8bfc4:	3d01      	subs	r5, #1
   8bfc6:	d410      	bmi.n	8bfea <_fwalk_reent+0x3a>
   8bfc8:	89a3      	ldrh	r3, [r4, #12]
   8bfca:	3d01      	subs	r5, #1
   8bfcc:	2b01      	cmp	r3, #1
   8bfce:	d908      	bls.n	8bfe2 <_fwalk_reent+0x32>
   8bfd0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8bfd4:	3301      	adds	r3, #1
   8bfd6:	d004      	beq.n	8bfe2 <_fwalk_reent+0x32>
   8bfd8:	4621      	mov	r1, r4
   8bfda:	4638      	mov	r0, r7
   8bfdc:	47c0      	blx	r8
   8bfde:	ea49 0900 	orr.w	r9, r9, r0
   8bfe2:	1c6b      	adds	r3, r5, #1
   8bfe4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8bfe8:	d1ee      	bne.n	8bfc8 <_fwalk_reent+0x18>
   8bfea:	6836      	ldr	r6, [r6, #0]
   8bfec:	2e00      	cmp	r6, #0
   8bfee:	d1e7      	bne.n	8bfc0 <_fwalk_reent+0x10>
   8bff0:	4648      	mov	r0, r9
   8bff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8bff6:	bf00      	nop

0008bff8 <__locale_mb_cur_max>:
   8bff8:	4b01      	ldr	r3, [pc, #4]	; (8c000 <__locale_mb_cur_max+0x8>)
   8bffa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8bffe:	4770      	bx	lr
   8c000:	20000b4c 	.word	0x20000b4c

0008c004 <_localeconv_r>:
   8c004:	4800      	ldr	r0, [pc, #0]	; (8c008 <_localeconv_r+0x4>)
   8c006:	4770      	bx	lr
   8c008:	20000c3c 	.word	0x20000c3c

0008c00c <__retarget_lock_init_recursive>:
   8c00c:	4770      	bx	lr
   8c00e:	bf00      	nop

0008c010 <__retarget_lock_close_recursive>:
   8c010:	4770      	bx	lr
   8c012:	bf00      	nop

0008c014 <__retarget_lock_acquire_recursive>:
   8c014:	4770      	bx	lr
   8c016:	bf00      	nop

0008c018 <__retarget_lock_release_recursive>:
   8c018:	4770      	bx	lr
   8c01a:	bf00      	nop

0008c01c <__swhatbuf_r>:
   8c01c:	b570      	push	{r4, r5, r6, lr}
   8c01e:	460c      	mov	r4, r1
   8c020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c024:	4615      	mov	r5, r2
   8c026:	2900      	cmp	r1, #0
   8c028:	461e      	mov	r6, r3
   8c02a:	b096      	sub	sp, #88	; 0x58
   8c02c:	db14      	blt.n	8c058 <__swhatbuf_r+0x3c>
   8c02e:	466a      	mov	r2, sp
   8c030:	f001 fc82 	bl	8d938 <_fstat_r>
   8c034:	2800      	cmp	r0, #0
   8c036:	db0f      	blt.n	8c058 <__swhatbuf_r+0x3c>
   8c038:	9a01      	ldr	r2, [sp, #4]
   8c03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8c03e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8c042:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8c046:	fab2 f282 	clz	r2, r2
   8c04a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8c04e:	0952      	lsrs	r2, r2, #5
   8c050:	6032      	str	r2, [r6, #0]
   8c052:	602b      	str	r3, [r5, #0]
   8c054:	b016      	add	sp, #88	; 0x58
   8c056:	bd70      	pop	{r4, r5, r6, pc}
   8c058:	2300      	movs	r3, #0
   8c05a:	89a1      	ldrh	r1, [r4, #12]
   8c05c:	6033      	str	r3, [r6, #0]
   8c05e:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8c062:	d004      	beq.n	8c06e <__swhatbuf_r+0x52>
   8c064:	2240      	movs	r2, #64	; 0x40
   8c066:	4618      	mov	r0, r3
   8c068:	602a      	str	r2, [r5, #0]
   8c06a:	b016      	add	sp, #88	; 0x58
   8c06c:	bd70      	pop	{r4, r5, r6, pc}
   8c06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8c072:	602b      	str	r3, [r5, #0]
   8c074:	b016      	add	sp, #88	; 0x58
   8c076:	bd70      	pop	{r4, r5, r6, pc}

0008c078 <__smakebuf_r>:
   8c078:	b570      	push	{r4, r5, r6, lr}
   8c07a:	898b      	ldrh	r3, [r1, #12]
   8c07c:	460c      	mov	r4, r1
   8c07e:	079d      	lsls	r5, r3, #30
   8c080:	b082      	sub	sp, #8
   8c082:	d507      	bpl.n	8c094 <__smakebuf_r+0x1c>
   8c084:	2201      	movs	r2, #1
   8c086:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8c08a:	614a      	str	r2, [r1, #20]
   8c08c:	600b      	str	r3, [r1, #0]
   8c08e:	610b      	str	r3, [r1, #16]
   8c090:	b002      	add	sp, #8
   8c092:	bd70      	pop	{r4, r5, r6, pc}
   8c094:	ab01      	add	r3, sp, #4
   8c096:	466a      	mov	r2, sp
   8c098:	4606      	mov	r6, r0
   8c09a:	f7ff ffbf 	bl	8c01c <__swhatbuf_r>
   8c09e:	9900      	ldr	r1, [sp, #0]
   8c0a0:	4605      	mov	r5, r0
   8c0a2:	4630      	mov	r0, r6
   8c0a4:	f000 f83a 	bl	8c11c <_malloc_r>
   8c0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c0ac:	b170      	cbz	r0, 8c0cc <__smakebuf_r+0x54>
   8c0ae:	4916      	ldr	r1, [pc, #88]	; (8c108 <__smakebuf_r+0x90>)
   8c0b0:	9a00      	ldr	r2, [sp, #0]
   8c0b2:	63f1      	str	r1, [r6, #60]	; 0x3c
   8c0b4:	9901      	ldr	r1, [sp, #4]
   8c0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8c0ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8c0be:	81a3      	strh	r3, [r4, #12]
   8c0c0:	6020      	str	r0, [r4, #0]
   8c0c2:	b989      	cbnz	r1, 8c0e8 <__smakebuf_r+0x70>
   8c0c4:	432b      	orrs	r3, r5
   8c0c6:	81a3      	strh	r3, [r4, #12]
   8c0c8:	b002      	add	sp, #8
   8c0ca:	bd70      	pop	{r4, r5, r6, pc}
   8c0cc:	059a      	lsls	r2, r3, #22
   8c0ce:	d4df      	bmi.n	8c090 <__smakebuf_r+0x18>
   8c0d0:	2101      	movs	r1, #1
   8c0d2:	f023 0303 	bic.w	r3, r3, #3
   8c0d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8c0da:	f043 0302 	orr.w	r3, r3, #2
   8c0de:	81a3      	strh	r3, [r4, #12]
   8c0e0:	6161      	str	r1, [r4, #20]
   8c0e2:	6022      	str	r2, [r4, #0]
   8c0e4:	6122      	str	r2, [r4, #16]
   8c0e6:	e7d3      	b.n	8c090 <__smakebuf_r+0x18>
   8c0e8:	4630      	mov	r0, r6
   8c0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c0ee:	f001 fc39 	bl	8d964 <_isatty_r>
   8c0f2:	b910      	cbnz	r0, 8c0fa <__smakebuf_r+0x82>
   8c0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c0f8:	e7e4      	b.n	8c0c4 <__smakebuf_r+0x4c>
   8c0fa:	89a2      	ldrh	r2, [r4, #12]
   8c0fc:	f022 0203 	bic.w	r2, r2, #3
   8c100:	f042 0201 	orr.w	r2, r2, #1
   8c104:	b213      	sxth	r3, r2
   8c106:	e7dd      	b.n	8c0c4 <__smakebuf_r+0x4c>
   8c108:	0008b865 	.word	0x0008b865

0008c10c <malloc>:
   8c10c:	4b02      	ldr	r3, [pc, #8]	; (8c118 <malloc+0xc>)
   8c10e:	4601      	mov	r1, r0
   8c110:	6818      	ldr	r0, [r3, #0]
   8c112:	f000 b803 	b.w	8c11c <_malloc_r>
   8c116:	bf00      	nop
   8c118:	20000718 	.word	0x20000718

0008c11c <_malloc_r>:
   8c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c120:	f101 050b 	add.w	r5, r1, #11
   8c124:	2d16      	cmp	r5, #22
   8c126:	4606      	mov	r6, r0
   8c128:	b083      	sub	sp, #12
   8c12a:	d824      	bhi.n	8c176 <_malloc_r+0x5a>
   8c12c:	2910      	cmp	r1, #16
   8c12e:	f200 80b6 	bhi.w	8c29e <_malloc_r+0x182>
   8c132:	f000 fb61 	bl	8c7f8 <__malloc_lock>
   8c136:	2510      	movs	r5, #16
   8c138:	2002      	movs	r0, #2
   8c13a:	2318      	movs	r3, #24
   8c13c:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8c628 <_malloc_r+0x50c>
   8c140:	4443      	add	r3, r8
   8c142:	685c      	ldr	r4, [r3, #4]
   8c144:	f1a3 0208 	sub.w	r2, r3, #8
   8c148:	4294      	cmp	r4, r2
   8c14a:	f000 80b4 	beq.w	8c2b6 <_malloc_r+0x19a>
   8c14e:	6863      	ldr	r3, [r4, #4]
   8c150:	68e1      	ldr	r1, [r4, #12]
   8c152:	f023 0303 	bic.w	r3, r3, #3
   8c156:	4423      	add	r3, r4
   8c158:	685a      	ldr	r2, [r3, #4]
   8c15a:	68a5      	ldr	r5, [r4, #8]
   8c15c:	f042 0201 	orr.w	r2, r2, #1
   8c160:	60e9      	str	r1, [r5, #12]
   8c162:	4630      	mov	r0, r6
   8c164:	608d      	str	r5, [r1, #8]
   8c166:	3408      	adds	r4, #8
   8c168:	605a      	str	r2, [r3, #4]
   8c16a:	f000 fb4b 	bl	8c804 <__malloc_unlock>
   8c16e:	4620      	mov	r0, r4
   8c170:	b003      	add	sp, #12
   8c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c176:	f035 0507 	bics.w	r5, r5, #7
   8c17a:	f100 8090 	bmi.w	8c29e <_malloc_r+0x182>
   8c17e:	42a9      	cmp	r1, r5
   8c180:	f200 808d 	bhi.w	8c29e <_malloc_r+0x182>
   8c184:	f000 fb38 	bl	8c7f8 <__malloc_lock>
   8c188:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8c18c:	f0c0 8185 	bcc.w	8c49a <_malloc_r+0x37e>
   8c190:	0a6b      	lsrs	r3, r5, #9
   8c192:	f000 808b 	beq.w	8c2ac <_malloc_r+0x190>
   8c196:	2b04      	cmp	r3, #4
   8c198:	f200 815b 	bhi.w	8c452 <_malloc_r+0x336>
   8c19c:	09ab      	lsrs	r3, r5, #6
   8c19e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8c1a2:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8c1a6:	00c1      	lsls	r1, r0, #3
   8c1a8:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8c628 <_malloc_r+0x50c>
   8c1ac:	4441      	add	r1, r8
   8c1ae:	684c      	ldr	r4, [r1, #4]
   8c1b0:	3908      	subs	r1, #8
   8c1b2:	42a1      	cmp	r1, r4
   8c1b4:	d106      	bne.n	8c1c4 <_malloc_r+0xa8>
   8c1b6:	e00c      	b.n	8c1d2 <_malloc_r+0xb6>
   8c1b8:	2a00      	cmp	r2, #0
   8c1ba:	f280 8122 	bge.w	8c402 <_malloc_r+0x2e6>
   8c1be:	68e4      	ldr	r4, [r4, #12]
   8c1c0:	42a1      	cmp	r1, r4
   8c1c2:	d006      	beq.n	8c1d2 <_malloc_r+0xb6>
   8c1c4:	6863      	ldr	r3, [r4, #4]
   8c1c6:	f023 0303 	bic.w	r3, r3, #3
   8c1ca:	1b5a      	subs	r2, r3, r5
   8c1cc:	2a0f      	cmp	r2, #15
   8c1ce:	ddf3      	ble.n	8c1b8 <_malloc_r+0x9c>
   8c1d0:	4638      	mov	r0, r7
   8c1d2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c1d6:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8c62c <_malloc_r+0x510>
   8c1da:	4564      	cmp	r4, ip
   8c1dc:	d077      	beq.n	8c2ce <_malloc_r+0x1b2>
   8c1de:	6862      	ldr	r2, [r4, #4]
   8c1e0:	f022 0203 	bic.w	r2, r2, #3
   8c1e4:	1b53      	subs	r3, r2, r5
   8c1e6:	2b0f      	cmp	r3, #15
   8c1e8:	f300 8165 	bgt.w	8c4b6 <_malloc_r+0x39a>
   8c1ec:	2b00      	cmp	r3, #0
   8c1ee:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8c1f2:	f280 8156 	bge.w	8c4a2 <_malloc_r+0x386>
   8c1f6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8c1fa:	f080 8106 	bcs.w	8c40a <_malloc_r+0x2ee>
   8c1fe:	2101      	movs	r1, #1
   8c200:	08d3      	lsrs	r3, r2, #3
   8c202:	0952      	lsrs	r2, r2, #5
   8c204:	440b      	add	r3, r1
   8c206:	fa01 f202 	lsl.w	r2, r1, r2
   8c20a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8c20e:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8c212:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8c216:	430a      	orrs	r2, r1
   8c218:	f1ae 0108 	sub.w	r1, lr, #8
   8c21c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8c220:	f8c8 2004 	str.w	r2, [r8, #4]
   8c224:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8c228:	60fc      	str	r4, [r7, #12]
   8c22a:	2101      	movs	r1, #1
   8c22c:	1083      	asrs	r3, r0, #2
   8c22e:	4099      	lsls	r1, r3
   8c230:	4291      	cmp	r1, r2
   8c232:	d853      	bhi.n	8c2dc <_malloc_r+0x1c0>
   8c234:	4211      	tst	r1, r2
   8c236:	d106      	bne.n	8c246 <_malloc_r+0x12a>
   8c238:	f020 0003 	bic.w	r0, r0, #3
   8c23c:	0049      	lsls	r1, r1, #1
   8c23e:	4211      	tst	r1, r2
   8c240:	f100 0004 	add.w	r0, r0, #4
   8c244:	d0fa      	beq.n	8c23c <_malloc_r+0x120>
   8c246:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8c24a:	464c      	mov	r4, r9
   8c24c:	4686      	mov	lr, r0
   8c24e:	68e7      	ldr	r7, [r4, #12]
   8c250:	42bc      	cmp	r4, r7
   8c252:	d107      	bne.n	8c264 <_malloc_r+0x148>
   8c254:	e109      	b.n	8c46a <_malloc_r+0x34e>
   8c256:	2b00      	cmp	r3, #0
   8c258:	f280 8110 	bge.w	8c47c <_malloc_r+0x360>
   8c25c:	68ff      	ldr	r7, [r7, #12]
   8c25e:	42bc      	cmp	r4, r7
   8c260:	f000 8103 	beq.w	8c46a <_malloc_r+0x34e>
   8c264:	687a      	ldr	r2, [r7, #4]
   8c266:	f022 0203 	bic.w	r2, r2, #3
   8c26a:	1b53      	subs	r3, r2, r5
   8c26c:	2b0f      	cmp	r3, #15
   8c26e:	ddf2      	ble.n	8c256 <_malloc_r+0x13a>
   8c270:	f045 0e01 	orr.w	lr, r5, #1
   8c274:	4630      	mov	r0, r6
   8c276:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8c27a:	443d      	add	r5, r7
   8c27c:	f043 0601 	orr.w	r6, r3, #1
   8c280:	f8c7 e004 	str.w	lr, [r7, #4]
   8c284:	60e1      	str	r1, [r4, #12]
   8c286:	608c      	str	r4, [r1, #8]
   8c288:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8c28c:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8c290:	606e      	str	r6, [r5, #4]
   8c292:	50bb      	str	r3, [r7, r2]
   8c294:	f000 fab6 	bl	8c804 <__malloc_unlock>
   8c298:	f107 0408 	add.w	r4, r7, #8
   8c29c:	e002      	b.n	8c2a4 <_malloc_r+0x188>
   8c29e:	230c      	movs	r3, #12
   8c2a0:	2400      	movs	r4, #0
   8c2a2:	6033      	str	r3, [r6, #0]
   8c2a4:	4620      	mov	r0, r4
   8c2a6:	b003      	add	sp, #12
   8c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c2ac:	f44f 7100 	mov.w	r1, #512	; 0x200
   8c2b0:	2040      	movs	r0, #64	; 0x40
   8c2b2:	273f      	movs	r7, #63	; 0x3f
   8c2b4:	e778      	b.n	8c1a8 <_malloc_r+0x8c>
   8c2b6:	68dc      	ldr	r4, [r3, #12]
   8c2b8:	42a3      	cmp	r3, r4
   8c2ba:	bf08      	it	eq
   8c2bc:	3002      	addeq	r0, #2
   8c2be:	f47f af46 	bne.w	8c14e <_malloc_r+0x32>
   8c2c2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c2c6:	f8df c364 	ldr.w	ip, [pc, #868]	; 8c62c <_malloc_r+0x510>
   8c2ca:	4564      	cmp	r4, ip
   8c2cc:	d187      	bne.n	8c1de <_malloc_r+0xc2>
   8c2ce:	2101      	movs	r1, #1
   8c2d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8c2d4:	1083      	asrs	r3, r0, #2
   8c2d6:	4099      	lsls	r1, r3
   8c2d8:	4291      	cmp	r1, r2
   8c2da:	d9ab      	bls.n	8c234 <_malloc_r+0x118>
   8c2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c2e0:	6867      	ldr	r7, [r4, #4]
   8c2e2:	f027 0703 	bic.w	r7, r7, #3
   8c2e6:	42bd      	cmp	r5, r7
   8c2e8:	d802      	bhi.n	8c2f0 <_malloc_r+0x1d4>
   8c2ea:	1b7b      	subs	r3, r7, r5
   8c2ec:	2b0f      	cmp	r3, #15
   8c2ee:	dc77      	bgt.n	8c3e0 <_malloc_r+0x2c4>
   8c2f0:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8c630 <_malloc_r+0x514>
   8c2f4:	4bc8      	ldr	r3, [pc, #800]	; (8c618 <_malloc_r+0x4fc>)
   8c2f6:	f8d9 2000 	ldr.w	r2, [r9]
   8c2fa:	681b      	ldr	r3, [r3, #0]
   8c2fc:	3201      	adds	r2, #1
   8c2fe:	442b      	add	r3, r5
   8c300:	eb04 0a07 	add.w	sl, r4, r7
   8c304:	f000 8124 	beq.w	8c550 <_malloc_r+0x434>
   8c308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8c30c:	330f      	adds	r3, #15
   8c30e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8c312:	f02b 0b0f 	bic.w	fp, fp, #15
   8c316:	4659      	mov	r1, fp
   8c318:	4630      	mov	r0, r6
   8c31a:	f001 f81d 	bl	8d358 <_sbrk_r>
   8c31e:	1c41      	adds	r1, r0, #1
   8c320:	4602      	mov	r2, r0
   8c322:	f000 80e1 	beq.w	8c4e8 <_malloc_r+0x3cc>
   8c326:	4582      	cmp	sl, r0
   8c328:	f200 80dc 	bhi.w	8c4e4 <_malloc_r+0x3c8>
   8c32c:	4bbb      	ldr	r3, [pc, #748]	; (8c61c <_malloc_r+0x500>)
   8c32e:	6819      	ldr	r1, [r3, #0]
   8c330:	4459      	add	r1, fp
   8c332:	4608      	mov	r0, r1
   8c334:	6019      	str	r1, [r3, #0]
   8c336:	f000 8141 	beq.w	8c5bc <_malloc_r+0x4a0>
   8c33a:	f8d9 1000 	ldr.w	r1, [r9]
   8c33e:	9301      	str	r3, [sp, #4]
   8c340:	3101      	adds	r1, #1
   8c342:	bf1b      	ittet	ne
   8c344:	eba2 0a0a 	subne.w	sl, r2, sl
   8c348:	4450      	addne	r0, sl
   8c34a:	f8c9 2000 	streq.w	r2, [r9]
   8c34e:	6018      	strne	r0, [r3, #0]
   8c350:	f012 0a07 	ands.w	sl, r2, #7
   8c354:	f000 810a 	beq.w	8c56c <_malloc_r+0x450>
   8c358:	f1ca 0108 	rsb	r1, sl, #8
   8c35c:	440a      	add	r2, r1
   8c35e:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8c362:	4493      	add	fp, r2
   8c364:	3108      	adds	r1, #8
   8c366:	eba1 010b 	sub.w	r1, r1, fp
   8c36a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8c36e:	4649      	mov	r1, r9
   8c370:	4630      	mov	r0, r6
   8c372:	9200      	str	r2, [sp, #0]
   8c374:	f000 fff0 	bl	8d358 <_sbrk_r>
   8c378:	1c42      	adds	r2, r0, #1
   8c37a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c37e:	f000 8143 	beq.w	8c608 <_malloc_r+0x4ec>
   8c382:	1a80      	subs	r0, r0, r2
   8c384:	eb00 0b09 	add.w	fp, r0, r9
   8c388:	6819      	ldr	r1, [r3, #0]
   8c38a:	f04b 0001 	orr.w	r0, fp, #1
   8c38e:	4449      	add	r1, r9
   8c390:	4544      	cmp	r4, r8
   8c392:	f8c8 2008 	str.w	r2, [r8, #8]
   8c396:	6019      	str	r1, [r3, #0]
   8c398:	6050      	str	r0, [r2, #4]
   8c39a:	f000 811c 	beq.w	8c5d6 <_malloc_r+0x4ba>
   8c39e:	2f0f      	cmp	r7, #15
   8c3a0:	f240 811b 	bls.w	8c5da <_malloc_r+0x4be>
   8c3a4:	f04f 0c05 	mov.w	ip, #5
   8c3a8:	6860      	ldr	r0, [r4, #4]
   8c3aa:	3f0c      	subs	r7, #12
   8c3ac:	f027 0707 	bic.w	r7, r7, #7
   8c3b0:	f000 0001 	and.w	r0, r0, #1
   8c3b4:	4338      	orrs	r0, r7
   8c3b6:	eb04 0e07 	add.w	lr, r4, r7
   8c3ba:	2f0f      	cmp	r7, #15
   8c3bc:	6060      	str	r0, [r4, #4]
   8c3be:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8c3c2:	f200 8137 	bhi.w	8c634 <_malloc_r+0x518>
   8c3c6:	4614      	mov	r4, r2
   8c3c8:	6850      	ldr	r0, [r2, #4]
   8c3ca:	4b95      	ldr	r3, [pc, #596]	; (8c620 <_malloc_r+0x504>)
   8c3cc:	681a      	ldr	r2, [r3, #0]
   8c3ce:	428a      	cmp	r2, r1
   8c3d0:	bf38      	it	cc
   8c3d2:	6019      	strcc	r1, [r3, #0]
   8c3d4:	4b93      	ldr	r3, [pc, #588]	; (8c624 <_malloc_r+0x508>)
   8c3d6:	681a      	ldr	r2, [r3, #0]
   8c3d8:	428a      	cmp	r2, r1
   8c3da:	bf38      	it	cc
   8c3dc:	6019      	strcc	r1, [r3, #0]
   8c3de:	e086      	b.n	8c4ee <_malloc_r+0x3d2>
   8c3e0:	f045 0201 	orr.w	r2, r5, #1
   8c3e4:	f043 0301 	orr.w	r3, r3, #1
   8c3e8:	4425      	add	r5, r4
   8c3ea:	6062      	str	r2, [r4, #4]
   8c3ec:	4630      	mov	r0, r6
   8c3ee:	f8c8 5008 	str.w	r5, [r8, #8]
   8c3f2:	3408      	adds	r4, #8
   8c3f4:	606b      	str	r3, [r5, #4]
   8c3f6:	f000 fa05 	bl	8c804 <__malloc_unlock>
   8c3fa:	4620      	mov	r0, r4
   8c3fc:	b003      	add	sp, #12
   8c3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c402:	4423      	add	r3, r4
   8c404:	685a      	ldr	r2, [r3, #4]
   8c406:	68e1      	ldr	r1, [r4, #12]
   8c408:	e6a7      	b.n	8c15a <_malloc_r+0x3e>
   8c40a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8c40e:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8c412:	d361      	bcc.n	8c4d8 <_malloc_r+0x3bc>
   8c414:	2b14      	cmp	r3, #20
   8c416:	f200 80ba 	bhi.w	8c58e <_malloc_r+0x472>
   8c41a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8c41e:	00c9      	lsls	r1, r1, #3
   8c420:	335b      	adds	r3, #91	; 0x5b
   8c422:	eb08 0701 	add.w	r7, r8, r1
   8c426:	f858 1001 	ldr.w	r1, [r8, r1]
   8c42a:	3f08      	subs	r7, #8
   8c42c:	428f      	cmp	r7, r1
   8c42e:	f000 8092 	beq.w	8c556 <_malloc_r+0x43a>
   8c432:	684b      	ldr	r3, [r1, #4]
   8c434:	f023 0303 	bic.w	r3, r3, #3
   8c438:	4293      	cmp	r3, r2
   8c43a:	d902      	bls.n	8c442 <_malloc_r+0x326>
   8c43c:	6889      	ldr	r1, [r1, #8]
   8c43e:	428f      	cmp	r7, r1
   8c440:	d1f7      	bne.n	8c432 <_malloc_r+0x316>
   8c442:	68cf      	ldr	r7, [r1, #12]
   8c444:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8c448:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8c44c:	60bc      	str	r4, [r7, #8]
   8c44e:	60cc      	str	r4, [r1, #12]
   8c450:	e6eb      	b.n	8c22a <_malloc_r+0x10e>
   8c452:	2b14      	cmp	r3, #20
   8c454:	d959      	bls.n	8c50a <_malloc_r+0x3ee>
   8c456:	2b54      	cmp	r3, #84	; 0x54
   8c458:	f200 80a1 	bhi.w	8c59e <_malloc_r+0x482>
   8c45c:	0b2b      	lsrs	r3, r5, #12
   8c45e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8c462:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8c466:	00c1      	lsls	r1, r0, #3
   8c468:	e69e      	b.n	8c1a8 <_malloc_r+0x8c>
   8c46a:	f10e 0e01 	add.w	lr, lr, #1
   8c46e:	f01e 0f03 	tst.w	lr, #3
   8c472:	f104 0408 	add.w	r4, r4, #8
   8c476:	f47f aeea 	bne.w	8c24e <_malloc_r+0x132>
   8c47a:	e051      	b.n	8c520 <_malloc_r+0x404>
   8c47c:	463c      	mov	r4, r7
   8c47e:	443a      	add	r2, r7
   8c480:	6853      	ldr	r3, [r2, #4]
   8c482:	68f9      	ldr	r1, [r7, #12]
   8c484:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8c488:	f043 0301 	orr.w	r3, r3, #1
   8c48c:	6053      	str	r3, [r2, #4]
   8c48e:	4630      	mov	r0, r6
   8c490:	60e9      	str	r1, [r5, #12]
   8c492:	608d      	str	r5, [r1, #8]
   8c494:	f000 f9b6 	bl	8c804 <__malloc_unlock>
   8c498:	e704      	b.n	8c2a4 <_malloc_r+0x188>
   8c49a:	08e8      	lsrs	r0, r5, #3
   8c49c:	f105 0308 	add.w	r3, r5, #8
   8c4a0:	e64c      	b.n	8c13c <_malloc_r+0x20>
   8c4a2:	4422      	add	r2, r4
   8c4a4:	6853      	ldr	r3, [r2, #4]
   8c4a6:	4630      	mov	r0, r6
   8c4a8:	f043 0301 	orr.w	r3, r3, #1
   8c4ac:	6053      	str	r3, [r2, #4]
   8c4ae:	3408      	adds	r4, #8
   8c4b0:	f000 f9a8 	bl	8c804 <__malloc_unlock>
   8c4b4:	e6f6      	b.n	8c2a4 <_malloc_r+0x188>
   8c4b6:	f045 0701 	orr.w	r7, r5, #1
   8c4ba:	f043 0101 	orr.w	r1, r3, #1
   8c4be:	4425      	add	r5, r4
   8c4c0:	6067      	str	r7, [r4, #4]
   8c4c2:	4630      	mov	r0, r6
   8c4c4:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8c4c8:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8c4cc:	6069      	str	r1, [r5, #4]
   8c4ce:	50a3      	str	r3, [r4, r2]
   8c4d0:	f000 f998 	bl	8c804 <__malloc_unlock>
   8c4d4:	3408      	adds	r4, #8
   8c4d6:	e6e5      	b.n	8c2a4 <_malloc_r+0x188>
   8c4d8:	0993      	lsrs	r3, r2, #6
   8c4da:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8c4de:	00c9      	lsls	r1, r1, #3
   8c4e0:	3338      	adds	r3, #56	; 0x38
   8c4e2:	e79e      	b.n	8c422 <_malloc_r+0x306>
   8c4e4:	4544      	cmp	r4, r8
   8c4e6:	d064      	beq.n	8c5b2 <_malloc_r+0x496>
   8c4e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c4ec:	6860      	ldr	r0, [r4, #4]
   8c4ee:	f020 0b03 	bic.w	fp, r0, #3
   8c4f2:	455d      	cmp	r5, fp
   8c4f4:	ebab 0305 	sub.w	r3, fp, r5
   8c4f8:	d802      	bhi.n	8c500 <_malloc_r+0x3e4>
   8c4fa:	2b0f      	cmp	r3, #15
   8c4fc:	f73f af70 	bgt.w	8c3e0 <_malloc_r+0x2c4>
   8c500:	4630      	mov	r0, r6
   8c502:	f000 f97f 	bl	8c804 <__malloc_unlock>
   8c506:	2400      	movs	r4, #0
   8c508:	e6cc      	b.n	8c2a4 <_malloc_r+0x188>
   8c50a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8c50e:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8c512:	00c1      	lsls	r1, r0, #3
   8c514:	e648      	b.n	8c1a8 <_malloc_r+0x8c>
   8c516:	f859 3908 	ldr.w	r3, [r9], #-8
   8c51a:	454b      	cmp	r3, r9
   8c51c:	f040 80a9 	bne.w	8c672 <_malloc_r+0x556>
   8c520:	f010 0f03 	tst.w	r0, #3
   8c524:	f100 30ff 	add.w	r0, r0, #4294967295
   8c528:	d1f5      	bne.n	8c516 <_malloc_r+0x3fa>
   8c52a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c52e:	ea23 0301 	bic.w	r3, r3, r1
   8c532:	f8c8 3004 	str.w	r3, [r8, #4]
   8c536:	0049      	lsls	r1, r1, #1
   8c538:	4299      	cmp	r1, r3
   8c53a:	f63f aecf 	bhi.w	8c2dc <_malloc_r+0x1c0>
   8c53e:	b919      	cbnz	r1, 8c548 <_malloc_r+0x42c>
   8c540:	e6cc      	b.n	8c2dc <_malloc_r+0x1c0>
   8c542:	0049      	lsls	r1, r1, #1
   8c544:	f10e 0e04 	add.w	lr, lr, #4
   8c548:	4219      	tst	r1, r3
   8c54a:	d0fa      	beq.n	8c542 <_malloc_r+0x426>
   8c54c:	4670      	mov	r0, lr
   8c54e:	e67a      	b.n	8c246 <_malloc_r+0x12a>
   8c550:	f103 0b10 	add.w	fp, r3, #16
   8c554:	e6df      	b.n	8c316 <_malloc_r+0x1fa>
   8c556:	f04f 0e01 	mov.w	lr, #1
   8c55a:	109a      	asrs	r2, r3, #2
   8c55c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c560:	fa0e f202 	lsl.w	r2, lr, r2
   8c564:	431a      	orrs	r2, r3
   8c566:	f8c8 2004 	str.w	r2, [r8, #4]
   8c56a:	e76d      	b.n	8c448 <_malloc_r+0x32c>
   8c56c:	eb02 010b 	add.w	r1, r2, fp
   8c570:	4249      	negs	r1, r1
   8c572:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8c576:	4649      	mov	r1, r9
   8c578:	4630      	mov	r0, r6
   8c57a:	9200      	str	r2, [sp, #0]
   8c57c:	f000 feec 	bl	8d358 <_sbrk_r>
   8c580:	1c43      	adds	r3, r0, #1
   8c582:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c586:	f47f aefc 	bne.w	8c382 <_malloc_r+0x266>
   8c58a:	46d1      	mov	r9, sl
   8c58c:	e6fc      	b.n	8c388 <_malloc_r+0x26c>
   8c58e:	2b54      	cmp	r3, #84	; 0x54
   8c590:	d826      	bhi.n	8c5e0 <_malloc_r+0x4c4>
   8c592:	0b13      	lsrs	r3, r2, #12
   8c594:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8c598:	00c9      	lsls	r1, r1, #3
   8c59a:	336e      	adds	r3, #110	; 0x6e
   8c59c:	e741      	b.n	8c422 <_malloc_r+0x306>
   8c59e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8c5a2:	d826      	bhi.n	8c5f2 <_malloc_r+0x4d6>
   8c5a4:	0beb      	lsrs	r3, r5, #15
   8c5a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8c5aa:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8c5ae:	00c1      	lsls	r1, r0, #3
   8c5b0:	e5fa      	b.n	8c1a8 <_malloc_r+0x8c>
   8c5b2:	4b1a      	ldr	r3, [pc, #104]	; (8c61c <_malloc_r+0x500>)
   8c5b4:	6818      	ldr	r0, [r3, #0]
   8c5b6:	4458      	add	r0, fp
   8c5b8:	6018      	str	r0, [r3, #0]
   8c5ba:	e6be      	b.n	8c33a <_malloc_r+0x21e>
   8c5bc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8c5c0:	f1bc 0f00 	cmp.w	ip, #0
   8c5c4:	f47f aeb9 	bne.w	8c33a <_malloc_r+0x21e>
   8c5c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c5cc:	44bb      	add	fp, r7
   8c5ce:	f04b 0001 	orr.w	r0, fp, #1
   8c5d2:	6060      	str	r0, [r4, #4]
   8c5d4:	e6f9      	b.n	8c3ca <_malloc_r+0x2ae>
   8c5d6:	4614      	mov	r4, r2
   8c5d8:	e6f7      	b.n	8c3ca <_malloc_r+0x2ae>
   8c5da:	2301      	movs	r3, #1
   8c5dc:	6053      	str	r3, [r2, #4]
   8c5de:	e78f      	b.n	8c500 <_malloc_r+0x3e4>
   8c5e0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8c5e4:	d832      	bhi.n	8c64c <_malloc_r+0x530>
   8c5e6:	0bd3      	lsrs	r3, r2, #15
   8c5e8:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8c5ec:	00c9      	lsls	r1, r1, #3
   8c5ee:	3377      	adds	r3, #119	; 0x77
   8c5f0:	e717      	b.n	8c422 <_malloc_r+0x306>
   8c5f2:	f240 5254 	movw	r2, #1364	; 0x554
   8c5f6:	4293      	cmp	r3, r2
   8c5f8:	d832      	bhi.n	8c660 <_malloc_r+0x544>
   8c5fa:	0cab      	lsrs	r3, r5, #18
   8c5fc:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8c600:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8c604:	00c1      	lsls	r1, r0, #3
   8c606:	e5cf      	b.n	8c1a8 <_malloc_r+0x8c>
   8c608:	f1aa 0a08 	sub.w	sl, sl, #8
   8c60c:	44d3      	add	fp, sl
   8c60e:	f04f 0900 	mov.w	r9, #0
   8c612:	ebab 0b02 	sub.w	fp, fp, r2
   8c616:	e6b7      	b.n	8c388 <_malloc_r+0x26c>
   8c618:	200023ec 	.word	0x200023ec
   8c61c:	200023bc 	.word	0x200023bc
   8c620:	200023e4 	.word	0x200023e4
   8c624:	200023e8 	.word	0x200023e8
   8c628:	20000cb8 	.word	0x20000cb8
   8c62c:	20000cc0 	.word	0x20000cc0
   8c630:	200010c0 	.word	0x200010c0
   8c634:	f104 0108 	add.w	r1, r4, #8
   8c638:	4630      	mov	r0, r6
   8c63a:	9300      	str	r3, [sp, #0]
   8c63c:	f7ff fa3c 	bl	8bab8 <_free_r>
   8c640:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c644:	9b00      	ldr	r3, [sp, #0]
   8c646:	6860      	ldr	r0, [r4, #4]
   8c648:	6819      	ldr	r1, [r3, #0]
   8c64a:	e6be      	b.n	8c3ca <_malloc_r+0x2ae>
   8c64c:	f240 5154 	movw	r1, #1364	; 0x554
   8c650:	428b      	cmp	r3, r1
   8c652:	d80a      	bhi.n	8c66a <_malloc_r+0x54e>
   8c654:	0c93      	lsrs	r3, r2, #18
   8c656:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8c65a:	00c9      	lsls	r1, r1, #3
   8c65c:	337c      	adds	r3, #124	; 0x7c
   8c65e:	e6e0      	b.n	8c422 <_malloc_r+0x306>
   8c660:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c664:	207f      	movs	r0, #127	; 0x7f
   8c666:	277e      	movs	r7, #126	; 0x7e
   8c668:	e59e      	b.n	8c1a8 <_malloc_r+0x8c>
   8c66a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c66e:	237e      	movs	r3, #126	; 0x7e
   8c670:	e6d7      	b.n	8c422 <_malloc_r+0x306>
   8c672:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c676:	e75e      	b.n	8c536 <_malloc_r+0x41a>

0008c678 <__ascii_mbtowc>:
   8c678:	b082      	sub	sp, #8
   8c67a:	b149      	cbz	r1, 8c690 <__ascii_mbtowc+0x18>
   8c67c:	b15a      	cbz	r2, 8c696 <__ascii_mbtowc+0x1e>
   8c67e:	b16b      	cbz	r3, 8c69c <__ascii_mbtowc+0x24>
   8c680:	7813      	ldrb	r3, [r2, #0]
   8c682:	600b      	str	r3, [r1, #0]
   8c684:	7812      	ldrb	r2, [r2, #0]
   8c686:	1e10      	subs	r0, r2, #0
   8c688:	bf18      	it	ne
   8c68a:	2001      	movne	r0, #1
   8c68c:	b002      	add	sp, #8
   8c68e:	4770      	bx	lr
   8c690:	a901      	add	r1, sp, #4
   8c692:	2a00      	cmp	r2, #0
   8c694:	d1f3      	bne.n	8c67e <__ascii_mbtowc+0x6>
   8c696:	4610      	mov	r0, r2
   8c698:	b002      	add	sp, #8
   8c69a:	4770      	bx	lr
   8c69c:	f06f 0001 	mvn.w	r0, #1
   8c6a0:	e7f4      	b.n	8c68c <__ascii_mbtowc+0x14>
   8c6a2:	bf00      	nop

0008c6a4 <memchr>:
   8c6a4:	b470      	push	{r4, r5, r6}
   8c6a6:	0784      	lsls	r4, r0, #30
   8c6a8:	b2cd      	uxtb	r5, r1
   8c6aa:	d012      	beq.n	8c6d2 <memchr+0x2e>
   8c6ac:	4603      	mov	r3, r0
   8c6ae:	1e54      	subs	r4, r2, #1
   8c6b0:	b92a      	cbnz	r2, 8c6be <memchr+0x1a>
   8c6b2:	e00b      	b.n	8c6cc <memchr+0x28>
   8c6b4:	079a      	lsls	r2, r3, #30
   8c6b6:	4618      	mov	r0, r3
   8c6b8:	d00c      	beq.n	8c6d4 <memchr+0x30>
   8c6ba:	3c01      	subs	r4, #1
   8c6bc:	d306      	bcc.n	8c6cc <memchr+0x28>
   8c6be:	4618      	mov	r0, r3
   8c6c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   8c6c4:	42aa      	cmp	r2, r5
   8c6c6:	d1f5      	bne.n	8c6b4 <memchr+0x10>
   8c6c8:	bc70      	pop	{r4, r5, r6}
   8c6ca:	4770      	bx	lr
   8c6cc:	2000      	movs	r0, #0
   8c6ce:	bc70      	pop	{r4, r5, r6}
   8c6d0:	4770      	bx	lr
   8c6d2:	4614      	mov	r4, r2
   8c6d4:	2c03      	cmp	r4, #3
   8c6d6:	d80d      	bhi.n	8c6f4 <memchr+0x50>
   8c6d8:	2c00      	cmp	r4, #0
   8c6da:	d0f7      	beq.n	8c6cc <memchr+0x28>
   8c6dc:	4602      	mov	r2, r0
   8c6de:	1903      	adds	r3, r0, r4
   8c6e0:	e001      	b.n	8c6e6 <memchr+0x42>
   8c6e2:	429a      	cmp	r2, r3
   8c6e4:	d0f2      	beq.n	8c6cc <memchr+0x28>
   8c6e6:	4610      	mov	r0, r2
   8c6e8:	f812 1b01 	ldrb.w	r1, [r2], #1
   8c6ec:	42a9      	cmp	r1, r5
   8c6ee:	d1f8      	bne.n	8c6e2 <memchr+0x3e>
   8c6f0:	bc70      	pop	{r4, r5, r6}
   8c6f2:	4770      	bx	lr
   8c6f4:	4606      	mov	r6, r0
   8c6f6:	020a      	lsls	r2, r1, #8
   8c6f8:	b292      	uxth	r2, r2
   8c6fa:	432a      	orrs	r2, r5
   8c6fc:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8c700:	6833      	ldr	r3, [r6, #0]
   8c702:	4630      	mov	r0, r6
   8c704:	4053      	eors	r3, r2
   8c706:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8c70a:	ea21 0303 	bic.w	r3, r1, r3
   8c70e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8c712:	f106 0604 	add.w	r6, r6, #4
   8c716:	d1e1      	bne.n	8c6dc <memchr+0x38>
   8c718:	3c04      	subs	r4, #4
   8c71a:	2c03      	cmp	r4, #3
   8c71c:	4630      	mov	r0, r6
   8c71e:	d8ef      	bhi.n	8c700 <memchr+0x5c>
   8c720:	e7da      	b.n	8c6d8 <memchr+0x34>
   8c722:	bf00      	nop

0008c724 <memmove>:
   8c724:	4288      	cmp	r0, r1
   8c726:	b4f0      	push	{r4, r5, r6, r7}
   8c728:	d90d      	bls.n	8c746 <memmove+0x22>
   8c72a:	188b      	adds	r3, r1, r2
   8c72c:	4283      	cmp	r3, r0
   8c72e:	d90a      	bls.n	8c746 <memmove+0x22>
   8c730:	1884      	adds	r4, r0, r2
   8c732:	b132      	cbz	r2, 8c742 <memmove+0x1e>
   8c734:	4622      	mov	r2, r4
   8c736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8c73a:	4299      	cmp	r1, r3
   8c73c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8c740:	d1f9      	bne.n	8c736 <memmove+0x12>
   8c742:	bcf0      	pop	{r4, r5, r6, r7}
   8c744:	4770      	bx	lr
   8c746:	2a0f      	cmp	r2, #15
   8c748:	d80e      	bhi.n	8c768 <memmove+0x44>
   8c74a:	4603      	mov	r3, r0
   8c74c:	1e54      	subs	r4, r2, #1
   8c74e:	2a00      	cmp	r2, #0
   8c750:	d0f7      	beq.n	8c742 <memmove+0x1e>
   8c752:	3401      	adds	r4, #1
   8c754:	440c      	add	r4, r1
   8c756:	3b01      	subs	r3, #1
   8c758:	f811 2b01 	ldrb.w	r2, [r1], #1
   8c75c:	42a1      	cmp	r1, r4
   8c75e:	f803 2f01 	strb.w	r2, [r3, #1]!
   8c762:	d1f9      	bne.n	8c758 <memmove+0x34>
   8c764:	bcf0      	pop	{r4, r5, r6, r7}
   8c766:	4770      	bx	lr
   8c768:	ea40 0301 	orr.w	r3, r0, r1
   8c76c:	079b      	lsls	r3, r3, #30
   8c76e:	d13e      	bne.n	8c7ee <memmove+0xca>
   8c770:	f1a2 0310 	sub.w	r3, r2, #16
   8c774:	f023 040f 	bic.w	r4, r3, #15
   8c778:	f101 0720 	add.w	r7, r1, #32
   8c77c:	4427      	add	r7, r4
   8c77e:	091b      	lsrs	r3, r3, #4
   8c780:	f101 0410 	add.w	r4, r1, #16
   8c784:	f100 0510 	add.w	r5, r0, #16
   8c788:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8c78c:	3410      	adds	r4, #16
   8c78e:	f845 6c10 	str.w	r6, [r5, #-16]
   8c792:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8c796:	3510      	adds	r5, #16
   8c798:	f845 6c1c 	str.w	r6, [r5, #-28]
   8c79c:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8c7a0:	f845 6c18 	str.w	r6, [r5, #-24]
   8c7a4:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8c7a8:	42bc      	cmp	r4, r7
   8c7aa:	f845 6c14 	str.w	r6, [r5, #-20]
   8c7ae:	d1eb      	bne.n	8c788 <memmove+0x64>
   8c7b0:	3301      	adds	r3, #1
   8c7b2:	f012 0f0c 	tst.w	r2, #12
   8c7b6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8c7ba:	f002 040f 	and.w	r4, r2, #15
   8c7be:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8c7c2:	d017      	beq.n	8c7f4 <memmove+0xd0>
   8c7c4:	460e      	mov	r6, r1
   8c7c6:	3c04      	subs	r4, #4
   8c7c8:	f024 0c03 	bic.w	ip, r4, #3
   8c7cc:	08a5      	lsrs	r5, r4, #2
   8c7ce:	449c      	add	ip, r3
   8c7d0:	1f1c      	subs	r4, r3, #4
   8c7d2:	f856 7b04 	ldr.w	r7, [r6], #4
   8c7d6:	f844 7f04 	str.w	r7, [r4, #4]!
   8c7da:	4564      	cmp	r4, ip
   8c7dc:	d1f9      	bne.n	8c7d2 <memmove+0xae>
   8c7de:	1c6c      	adds	r4, r5, #1
   8c7e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8c7e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8c7e8:	f002 0203 	and.w	r2, r2, #3
   8c7ec:	e7ae      	b.n	8c74c <memmove+0x28>
   8c7ee:	4603      	mov	r3, r0
   8c7f0:	1e54      	subs	r4, r2, #1
   8c7f2:	e7ae      	b.n	8c752 <memmove+0x2e>
   8c7f4:	4622      	mov	r2, r4
   8c7f6:	e7a9      	b.n	8c74c <memmove+0x28>

0008c7f8 <__malloc_lock>:
   8c7f8:	4801      	ldr	r0, [pc, #4]	; (8c800 <__malloc_lock+0x8>)
   8c7fa:	f7ff bc0b 	b.w	8c014 <__retarget_lock_acquire_recursive>
   8c7fe:	bf00      	nop
   8c800:	20002e1c 	.word	0x20002e1c

0008c804 <__malloc_unlock>:
   8c804:	4801      	ldr	r0, [pc, #4]	; (8c80c <__malloc_unlock+0x8>)
   8c806:	f7ff bc07 	b.w	8c018 <__retarget_lock_release_recursive>
   8c80a:	bf00      	nop
   8c80c:	20002e1c 	.word	0x20002e1c

0008c810 <_Balloc>:
   8c810:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c812:	b570      	push	{r4, r5, r6, lr}
   8c814:	4605      	mov	r5, r0
   8c816:	460c      	mov	r4, r1
   8c818:	b14b      	cbz	r3, 8c82e <_Balloc+0x1e>
   8c81a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8c81e:	b180      	cbz	r0, 8c842 <_Balloc+0x32>
   8c820:	6802      	ldr	r2, [r0, #0]
   8c822:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8c826:	2300      	movs	r3, #0
   8c828:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8c82c:	bd70      	pop	{r4, r5, r6, pc}
   8c82e:	2221      	movs	r2, #33	; 0x21
   8c830:	2104      	movs	r1, #4
   8c832:	f000 ffc5 	bl	8d7c0 <_calloc_r>
   8c836:	4603      	mov	r3, r0
   8c838:	64e8      	str	r0, [r5, #76]	; 0x4c
   8c83a:	2800      	cmp	r0, #0
   8c83c:	d1ed      	bne.n	8c81a <_Balloc+0xa>
   8c83e:	2000      	movs	r0, #0
   8c840:	bd70      	pop	{r4, r5, r6, pc}
   8c842:	2101      	movs	r1, #1
   8c844:	fa01 f604 	lsl.w	r6, r1, r4
   8c848:	1d72      	adds	r2, r6, #5
   8c84a:	4628      	mov	r0, r5
   8c84c:	0092      	lsls	r2, r2, #2
   8c84e:	f000 ffb7 	bl	8d7c0 <_calloc_r>
   8c852:	2800      	cmp	r0, #0
   8c854:	d0f3      	beq.n	8c83e <_Balloc+0x2e>
   8c856:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8c85a:	e7e4      	b.n	8c826 <_Balloc+0x16>

0008c85c <_Bfree>:
   8c85c:	b131      	cbz	r1, 8c86c <_Bfree+0x10>
   8c85e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c860:	684a      	ldr	r2, [r1, #4]
   8c862:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8c866:	6008      	str	r0, [r1, #0]
   8c868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8c86c:	4770      	bx	lr
   8c86e:	bf00      	nop

0008c870 <__multadd>:
   8c870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c874:	4680      	mov	r8, r0
   8c876:	461c      	mov	r4, r3
   8c878:	2000      	movs	r0, #0
   8c87a:	460f      	mov	r7, r1
   8c87c:	690e      	ldr	r6, [r1, #16]
   8c87e:	3114      	adds	r1, #20
   8c880:	680d      	ldr	r5, [r1, #0]
   8c882:	3001      	adds	r0, #1
   8c884:	b2ab      	uxth	r3, r5
   8c886:	fb02 4303 	mla	r3, r2, r3, r4
   8c88a:	0c2c      	lsrs	r4, r5, #16
   8c88c:	0c1d      	lsrs	r5, r3, #16
   8c88e:	fb02 5404 	mla	r4, r2, r4, r5
   8c892:	b29b      	uxth	r3, r3
   8c894:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8c898:	4286      	cmp	r6, r0
   8c89a:	f841 3b04 	str.w	r3, [r1], #4
   8c89e:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8c8a2:	dced      	bgt.n	8c880 <__multadd+0x10>
   8c8a4:	b13c      	cbz	r4, 8c8b6 <__multadd+0x46>
   8c8a6:	68bb      	ldr	r3, [r7, #8]
   8c8a8:	42b3      	cmp	r3, r6
   8c8aa:	dd07      	ble.n	8c8bc <__multadd+0x4c>
   8c8ac:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8c8b0:	3601      	adds	r6, #1
   8c8b2:	615c      	str	r4, [r3, #20]
   8c8b4:	613e      	str	r6, [r7, #16]
   8c8b6:	4638      	mov	r0, r7
   8c8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c8bc:	6879      	ldr	r1, [r7, #4]
   8c8be:	4640      	mov	r0, r8
   8c8c0:	3101      	adds	r1, #1
   8c8c2:	f7ff ffa5 	bl	8c810 <_Balloc>
   8c8c6:	4605      	mov	r5, r0
   8c8c8:	b1b0      	cbz	r0, 8c8f8 <__multadd+0x88>
   8c8ca:	693a      	ldr	r2, [r7, #16]
   8c8cc:	f107 010c 	add.w	r1, r7, #12
   8c8d0:	3202      	adds	r2, #2
   8c8d2:	0092      	lsls	r2, r2, #2
   8c8d4:	300c      	adds	r0, #12
   8c8d6:	f7fa ffed 	bl	878b4 <memcpy>
   8c8da:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8c8de:	687a      	ldr	r2, [r7, #4]
   8c8e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c8e4:	6039      	str	r1, [r7, #0]
   8c8e6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8c8ea:	462f      	mov	r7, r5
   8c8ec:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8c8f0:	3601      	adds	r6, #1
   8c8f2:	615c      	str	r4, [r3, #20]
   8c8f4:	613e      	str	r6, [r7, #16]
   8c8f6:	e7de      	b.n	8c8b6 <__multadd+0x46>
   8c8f8:	4602      	mov	r2, r0
   8c8fa:	21b5      	movs	r1, #181	; 0xb5
   8c8fc:	4b01      	ldr	r3, [pc, #4]	; (8c904 <__multadd+0x94>)
   8c8fe:	4802      	ldr	r0, [pc, #8]	; (8c908 <__multadd+0x98>)
   8c900:	f000 ff40 	bl	8d784 <__assert_func>
   8c904:	0008e6d4 	.word	0x0008e6d4
   8c908:	0008e774 	.word	0x0008e774

0008c90c <__hi0bits>:
   8c90c:	0c02      	lsrs	r2, r0, #16
   8c90e:	0412      	lsls	r2, r2, #16
   8c910:	4603      	mov	r3, r0
   8c912:	b9ca      	cbnz	r2, 8c948 <__hi0bits+0x3c>
   8c914:	0403      	lsls	r3, r0, #16
   8c916:	2010      	movs	r0, #16
   8c918:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8c91c:	bf04      	itt	eq
   8c91e:	021b      	lsleq	r3, r3, #8
   8c920:	3008      	addeq	r0, #8
   8c922:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8c926:	bf04      	itt	eq
   8c928:	011b      	lsleq	r3, r3, #4
   8c92a:	3004      	addeq	r0, #4
   8c92c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8c930:	bf04      	itt	eq
   8c932:	009b      	lsleq	r3, r3, #2
   8c934:	3002      	addeq	r0, #2
   8c936:	2b00      	cmp	r3, #0
   8c938:	db05      	blt.n	8c946 <__hi0bits+0x3a>
   8c93a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8c93e:	f100 0001 	add.w	r0, r0, #1
   8c942:	bf08      	it	eq
   8c944:	2020      	moveq	r0, #32
   8c946:	4770      	bx	lr
   8c948:	2000      	movs	r0, #0
   8c94a:	e7e5      	b.n	8c918 <__hi0bits+0xc>

0008c94c <__lo0bits>:
   8c94c:	6803      	ldr	r3, [r0, #0]
   8c94e:	4601      	mov	r1, r0
   8c950:	f013 0207 	ands.w	r2, r3, #7
   8c954:	d007      	beq.n	8c966 <__lo0bits+0x1a>
   8c956:	07da      	lsls	r2, r3, #31
   8c958:	d420      	bmi.n	8c99c <__lo0bits+0x50>
   8c95a:	0798      	lsls	r0, r3, #30
   8c95c:	d522      	bpl.n	8c9a4 <__lo0bits+0x58>
   8c95e:	085b      	lsrs	r3, r3, #1
   8c960:	2001      	movs	r0, #1
   8c962:	600b      	str	r3, [r1, #0]
   8c964:	4770      	bx	lr
   8c966:	b298      	uxth	r0, r3
   8c968:	b1a8      	cbz	r0, 8c996 <__lo0bits+0x4a>
   8c96a:	4610      	mov	r0, r2
   8c96c:	f013 0fff 	tst.w	r3, #255	; 0xff
   8c970:	bf04      	itt	eq
   8c972:	0a1b      	lsreq	r3, r3, #8
   8c974:	3008      	addeq	r0, #8
   8c976:	071a      	lsls	r2, r3, #28
   8c978:	bf04      	itt	eq
   8c97a:	091b      	lsreq	r3, r3, #4
   8c97c:	3004      	addeq	r0, #4
   8c97e:	079a      	lsls	r2, r3, #30
   8c980:	bf04      	itt	eq
   8c982:	089b      	lsreq	r3, r3, #2
   8c984:	3002      	addeq	r0, #2
   8c986:	07da      	lsls	r2, r3, #31
   8c988:	d403      	bmi.n	8c992 <__lo0bits+0x46>
   8c98a:	085b      	lsrs	r3, r3, #1
   8c98c:	f100 0001 	add.w	r0, r0, #1
   8c990:	d006      	beq.n	8c9a0 <__lo0bits+0x54>
   8c992:	600b      	str	r3, [r1, #0]
   8c994:	4770      	bx	lr
   8c996:	2010      	movs	r0, #16
   8c998:	0c1b      	lsrs	r3, r3, #16
   8c99a:	e7e7      	b.n	8c96c <__lo0bits+0x20>
   8c99c:	2000      	movs	r0, #0
   8c99e:	4770      	bx	lr
   8c9a0:	2020      	movs	r0, #32
   8c9a2:	4770      	bx	lr
   8c9a4:	089b      	lsrs	r3, r3, #2
   8c9a6:	2002      	movs	r0, #2
   8c9a8:	600b      	str	r3, [r1, #0]
   8c9aa:	4770      	bx	lr

0008c9ac <__i2b>:
   8c9ac:	b510      	push	{r4, lr}
   8c9ae:	460c      	mov	r4, r1
   8c9b0:	2101      	movs	r1, #1
   8c9b2:	f7ff ff2d 	bl	8c810 <_Balloc>
   8c9b6:	4602      	mov	r2, r0
   8c9b8:	b118      	cbz	r0, 8c9c2 <__i2b+0x16>
   8c9ba:	2301      	movs	r3, #1
   8c9bc:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8c9c0:	bd10      	pop	{r4, pc}
   8c9c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8c9c6:	4b02      	ldr	r3, [pc, #8]	; (8c9d0 <__i2b+0x24>)
   8c9c8:	4802      	ldr	r0, [pc, #8]	; (8c9d4 <__i2b+0x28>)
   8c9ca:	f000 fedb 	bl	8d784 <__assert_func>
   8c9ce:	bf00      	nop
   8c9d0:	0008e6d4 	.word	0x0008e6d4
   8c9d4:	0008e774 	.word	0x0008e774

0008c9d8 <__multiply>:
   8c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c9dc:	690d      	ldr	r5, [r1, #16]
   8c9de:	6917      	ldr	r7, [r2, #16]
   8c9e0:	460e      	mov	r6, r1
   8c9e2:	42bd      	cmp	r5, r7
   8c9e4:	4614      	mov	r4, r2
   8c9e6:	b085      	sub	sp, #20
   8c9e8:	db05      	blt.n	8c9f6 <__multiply+0x1e>
   8c9ea:	463a      	mov	r2, r7
   8c9ec:	4623      	mov	r3, r4
   8c9ee:	462f      	mov	r7, r5
   8c9f0:	460c      	mov	r4, r1
   8c9f2:	4615      	mov	r5, r2
   8c9f4:	461e      	mov	r6, r3
   8c9f6:	68a3      	ldr	r3, [r4, #8]
   8c9f8:	6861      	ldr	r1, [r4, #4]
   8c9fa:	eb07 0805 	add.w	r8, r7, r5
   8c9fe:	4543      	cmp	r3, r8
   8ca00:	bfb8      	it	lt
   8ca02:	3101      	addlt	r1, #1
   8ca04:	f7ff ff04 	bl	8c810 <_Balloc>
   8ca08:	9001      	str	r0, [sp, #4]
   8ca0a:	2800      	cmp	r0, #0
   8ca0c:	f000 8088 	beq.w	8cb20 <__multiply+0x148>
   8ca10:	9b01      	ldr	r3, [sp, #4]
   8ca12:	f103 0914 	add.w	r9, r3, #20
   8ca16:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8ca1a:	45d1      	cmp	r9, sl
   8ca1c:	d205      	bcs.n	8ca2a <__multiply+0x52>
   8ca1e:	464b      	mov	r3, r9
   8ca20:	2200      	movs	r2, #0
   8ca22:	f843 2b04 	str.w	r2, [r3], #4
   8ca26:	459a      	cmp	sl, r3
   8ca28:	d8fb      	bhi.n	8ca22 <__multiply+0x4a>
   8ca2a:	f106 0e14 	add.w	lr, r6, #20
   8ca2e:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8ca32:	f104 0314 	add.w	r3, r4, #20
   8ca36:	45de      	cmp	lr, fp
   8ca38:	461a      	mov	r2, r3
   8ca3a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8ca3e:	d23e      	bcs.n	8cabe <__multiply+0xe6>
   8ca40:	1b3b      	subs	r3, r7, r4
   8ca42:	3b15      	subs	r3, #21
   8ca44:	f023 0303 	bic.w	r3, r3, #3
   8ca48:	3304      	adds	r3, #4
   8ca4a:	3415      	adds	r4, #21
   8ca4c:	42a7      	cmp	r7, r4
   8ca4e:	bf38      	it	cc
   8ca50:	2304      	movcc	r3, #4
   8ca52:	e9cd a802 	strd	sl, r8, [sp, #8]
   8ca56:	4698      	mov	r8, r3
   8ca58:	4692      	mov	sl, r2
   8ca5a:	e003      	b.n	8ca64 <__multiply+0x8c>
   8ca5c:	45f3      	cmp	fp, lr
   8ca5e:	f109 0904 	add.w	r9, r9, #4
   8ca62:	d92a      	bls.n	8caba <__multiply+0xe2>
   8ca64:	f85e 0b04 	ldr.w	r0, [lr], #4
   8ca68:	b286      	uxth	r6, r0
   8ca6a:	2e00      	cmp	r6, #0
   8ca6c:	d138      	bne.n	8cae0 <__multiply+0x108>
   8ca6e:	0c00      	lsrs	r0, r0, #16
   8ca70:	d0f4      	beq.n	8ca5c <__multiply+0x84>
   8ca72:	f8d9 3000 	ldr.w	r3, [r9]
   8ca76:	4654      	mov	r4, sl
   8ca78:	461e      	mov	r6, r3
   8ca7a:	464d      	mov	r5, r9
   8ca7c:	f04f 0c00 	mov.w	ip, #0
   8ca80:	8822      	ldrh	r2, [r4, #0]
   8ca82:	0c36      	lsrs	r6, r6, #16
   8ca84:	fb00 6602 	mla	r6, r0, r2, r6
   8ca88:	b29b      	uxth	r3, r3
   8ca8a:	44b4      	add	ip, r6
   8ca8c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8ca90:	f845 3b04 	str.w	r3, [r5], #4
   8ca94:	f854 3b04 	ldr.w	r3, [r4], #4
   8ca98:	682e      	ldr	r6, [r5, #0]
   8ca9a:	0c1b      	lsrs	r3, r3, #16
   8ca9c:	b2b2      	uxth	r2, r6
   8ca9e:	fb00 2303 	mla	r3, r0, r3, r2
   8caa2:	42a7      	cmp	r7, r4
   8caa4:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8caa8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8caac:	d8e8      	bhi.n	8ca80 <__multiply+0xa8>
   8caae:	45f3      	cmp	fp, lr
   8cab0:	f849 3008 	str.w	r3, [r9, r8]
   8cab4:	f109 0904 	add.w	r9, r9, #4
   8cab8:	d8d4      	bhi.n	8ca64 <__multiply+0x8c>
   8caba:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8cabe:	f1b8 0f00 	cmp.w	r8, #0
   8cac2:	dc03      	bgt.n	8cacc <__multiply+0xf4>
   8cac4:	e006      	b.n	8cad4 <__multiply+0xfc>
   8cac6:	f1b8 0801 	subs.w	r8, r8, #1
   8caca:	d003      	beq.n	8cad4 <__multiply+0xfc>
   8cacc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8cad0:	2b00      	cmp	r3, #0
   8cad2:	d0f8      	beq.n	8cac6 <__multiply+0xee>
   8cad4:	9801      	ldr	r0, [sp, #4]
   8cad6:	f8c0 8010 	str.w	r8, [r0, #16]
   8cada:	b005      	add	sp, #20
   8cadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cae0:	4655      	mov	r5, sl
   8cae2:	464c      	mov	r4, r9
   8cae4:	2300      	movs	r3, #0
   8cae6:	f855 1b04 	ldr.w	r1, [r5], #4
   8caea:	6820      	ldr	r0, [r4, #0]
   8caec:	b28a      	uxth	r2, r1
   8caee:	fa1f fc80 	uxth.w	ip, r0
   8caf2:	fb06 c202 	mla	r2, r6, r2, ip
   8caf6:	0c09      	lsrs	r1, r1, #16
   8caf8:	0c00      	lsrs	r0, r0, #16
   8cafa:	fb06 0101 	mla	r1, r6, r1, r0
   8cafe:	4413      	add	r3, r2
   8cb00:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8cb04:	b29b      	uxth	r3, r3
   8cb06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8cb0a:	42af      	cmp	r7, r5
   8cb0c:	f844 3b04 	str.w	r3, [r4], #4
   8cb10:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8cb14:	d8e7      	bhi.n	8cae6 <__multiply+0x10e>
   8cb16:	f849 3008 	str.w	r3, [r9, r8]
   8cb1a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8cb1e:	e7a6      	b.n	8ca6e <__multiply+0x96>
   8cb20:	4602      	mov	r2, r0
   8cb22:	f240 115d 	movw	r1, #349	; 0x15d
   8cb26:	4b02      	ldr	r3, [pc, #8]	; (8cb30 <__multiply+0x158>)
   8cb28:	4802      	ldr	r0, [pc, #8]	; (8cb34 <__multiply+0x15c>)
   8cb2a:	f000 fe2b 	bl	8d784 <__assert_func>
   8cb2e:	bf00      	nop
   8cb30:	0008e6d4 	.word	0x0008e6d4
   8cb34:	0008e774 	.word	0x0008e774

0008cb38 <__pow5mult>:
   8cb38:	f012 0303 	ands.w	r3, r2, #3
   8cb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cb40:	4614      	mov	r4, r2
   8cb42:	4607      	mov	r7, r0
   8cb44:	d12e      	bne.n	8cba4 <__pow5mult+0x6c>
   8cb46:	460e      	mov	r6, r1
   8cb48:	10a4      	asrs	r4, r4, #2
   8cb4a:	d01c      	beq.n	8cb86 <__pow5mult+0x4e>
   8cb4c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8cb4e:	b395      	cbz	r5, 8cbb6 <__pow5mult+0x7e>
   8cb50:	07e3      	lsls	r3, r4, #31
   8cb52:	f04f 0800 	mov.w	r8, #0
   8cb56:	d406      	bmi.n	8cb66 <__pow5mult+0x2e>
   8cb58:	1064      	asrs	r4, r4, #1
   8cb5a:	d014      	beq.n	8cb86 <__pow5mult+0x4e>
   8cb5c:	6828      	ldr	r0, [r5, #0]
   8cb5e:	b1a8      	cbz	r0, 8cb8c <__pow5mult+0x54>
   8cb60:	4605      	mov	r5, r0
   8cb62:	07e3      	lsls	r3, r4, #31
   8cb64:	d5f8      	bpl.n	8cb58 <__pow5mult+0x20>
   8cb66:	462a      	mov	r2, r5
   8cb68:	4631      	mov	r1, r6
   8cb6a:	4638      	mov	r0, r7
   8cb6c:	f7ff ff34 	bl	8c9d8 <__multiply>
   8cb70:	b1b6      	cbz	r6, 8cba0 <__pow5mult+0x68>
   8cb72:	6871      	ldr	r1, [r6, #4]
   8cb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8cb76:	1064      	asrs	r4, r4, #1
   8cb78:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8cb7c:	6032      	str	r2, [r6, #0]
   8cb7e:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8cb82:	4606      	mov	r6, r0
   8cb84:	d1ea      	bne.n	8cb5c <__pow5mult+0x24>
   8cb86:	4630      	mov	r0, r6
   8cb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cb8c:	462a      	mov	r2, r5
   8cb8e:	4629      	mov	r1, r5
   8cb90:	4638      	mov	r0, r7
   8cb92:	f7ff ff21 	bl	8c9d8 <__multiply>
   8cb96:	6028      	str	r0, [r5, #0]
   8cb98:	4605      	mov	r5, r0
   8cb9a:	f8c0 8000 	str.w	r8, [r0]
   8cb9e:	e7e0      	b.n	8cb62 <__pow5mult+0x2a>
   8cba0:	4606      	mov	r6, r0
   8cba2:	e7d9      	b.n	8cb58 <__pow5mult+0x20>
   8cba4:	4a09      	ldr	r2, [pc, #36]	; (8cbcc <__pow5mult+0x94>)
   8cba6:	3b01      	subs	r3, #1
   8cba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8cbac:	2300      	movs	r3, #0
   8cbae:	f7ff fe5f 	bl	8c870 <__multadd>
   8cbb2:	4606      	mov	r6, r0
   8cbb4:	e7c8      	b.n	8cb48 <__pow5mult+0x10>
   8cbb6:	f240 2171 	movw	r1, #625	; 0x271
   8cbba:	4638      	mov	r0, r7
   8cbbc:	f7ff fef6 	bl	8c9ac <__i2b>
   8cbc0:	2300      	movs	r3, #0
   8cbc2:	64b8      	str	r0, [r7, #72]	; 0x48
   8cbc4:	4605      	mov	r5, r0
   8cbc6:	6003      	str	r3, [r0, #0]
   8cbc8:	e7c2      	b.n	8cb50 <__pow5mult+0x18>
   8cbca:	bf00      	nop
   8cbcc:	0008e8e8 	.word	0x0008e8e8

0008cbd0 <__lshift>:
   8cbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8cbd4:	690f      	ldr	r7, [r1, #16]
   8cbd6:	688b      	ldr	r3, [r1, #8]
   8cbd8:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8cbdc:	1c7e      	adds	r6, r7, #1
   8cbde:	429e      	cmp	r6, r3
   8cbe0:	460d      	mov	r5, r1
   8cbe2:	4691      	mov	r9, r2
   8cbe4:	4680      	mov	r8, r0
   8cbe6:	6849      	ldr	r1, [r1, #4]
   8cbe8:	ea4f 1462 	mov.w	r4, r2, asr #5
   8cbec:	dd04      	ble.n	8cbf8 <__lshift+0x28>
   8cbee:	005b      	lsls	r3, r3, #1
   8cbf0:	429e      	cmp	r6, r3
   8cbf2:	f101 0101 	add.w	r1, r1, #1
   8cbf6:	dcfa      	bgt.n	8cbee <__lshift+0x1e>
   8cbf8:	4640      	mov	r0, r8
   8cbfa:	f7ff fe09 	bl	8c810 <_Balloc>
   8cbfe:	2800      	cmp	r0, #0
   8cc00:	d04f      	beq.n	8cca2 <__lshift+0xd2>
   8cc02:	2c00      	cmp	r4, #0
   8cc04:	f100 0114 	add.w	r1, r0, #20
   8cc08:	dd0d      	ble.n	8cc26 <__lshift+0x56>
   8cc0a:	460b      	mov	r3, r1
   8cc0c:	2200      	movs	r2, #0
   8cc0e:	3405      	adds	r4, #5
   8cc10:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8cc14:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8cc18:	f843 2b04 	str.w	r2, [r3], #4
   8cc1c:	42a3      	cmp	r3, r4
   8cc1e:	d1fb      	bne.n	8cc18 <__lshift+0x48>
   8cc20:	f1ac 0314 	sub.w	r3, ip, #20
   8cc24:	4419      	add	r1, r3
   8cc26:	692c      	ldr	r4, [r5, #16]
   8cc28:	f105 0314 	add.w	r3, r5, #20
   8cc2c:	f019 091f 	ands.w	r9, r9, #31
   8cc30:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8cc34:	d02d      	beq.n	8cc92 <__lshift+0xc2>
   8cc36:	468e      	mov	lr, r1
   8cc38:	f04f 0a00 	mov.w	sl, #0
   8cc3c:	f1c9 0220 	rsb	r2, r9, #32
   8cc40:	681c      	ldr	r4, [r3, #0]
   8cc42:	fa04 f409 	lsl.w	r4, r4, r9
   8cc46:	ea44 040a 	orr.w	r4, r4, sl
   8cc4a:	f84e 4b04 	str.w	r4, [lr], #4
   8cc4e:	f853 4b04 	ldr.w	r4, [r3], #4
   8cc52:	459c      	cmp	ip, r3
   8cc54:	fa24 fa02 	lsr.w	sl, r4, r2
   8cc58:	d8f2      	bhi.n	8cc40 <__lshift+0x70>
   8cc5a:	ebac 0305 	sub.w	r3, ip, r5
   8cc5e:	3b15      	subs	r3, #21
   8cc60:	f023 0303 	bic.w	r3, r3, #3
   8cc64:	3304      	adds	r3, #4
   8cc66:	f105 0215 	add.w	r2, r5, #21
   8cc6a:	4594      	cmp	ip, r2
   8cc6c:	bf38      	it	cc
   8cc6e:	2304      	movcc	r3, #4
   8cc70:	f1ba 0f00 	cmp.w	sl, #0
   8cc74:	bf18      	it	ne
   8cc76:	4637      	movne	r7, r6
   8cc78:	f841 a003 	str.w	sl, [r1, r3]
   8cc7c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8cc80:	686a      	ldr	r2, [r5, #4]
   8cc82:	6107      	str	r7, [r0, #16]
   8cc84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8cc88:	6029      	str	r1, [r5, #0]
   8cc8a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cc92:	3904      	subs	r1, #4
   8cc94:	f853 2b04 	ldr.w	r2, [r3], #4
   8cc98:	459c      	cmp	ip, r3
   8cc9a:	f841 2f04 	str.w	r2, [r1, #4]!
   8cc9e:	d8f9      	bhi.n	8cc94 <__lshift+0xc4>
   8cca0:	e7ec      	b.n	8cc7c <__lshift+0xac>
   8cca2:	4602      	mov	r2, r0
   8cca4:	f240 11d9 	movw	r1, #473	; 0x1d9
   8cca8:	4b01      	ldr	r3, [pc, #4]	; (8ccb0 <__lshift+0xe0>)
   8ccaa:	4802      	ldr	r0, [pc, #8]	; (8ccb4 <__lshift+0xe4>)
   8ccac:	f000 fd6a 	bl	8d784 <__assert_func>
   8ccb0:	0008e6d4 	.word	0x0008e6d4
   8ccb4:	0008e774 	.word	0x0008e774

0008ccb8 <__mcmp>:
   8ccb8:	b430      	push	{r4, r5}
   8ccba:	690b      	ldr	r3, [r1, #16]
   8ccbc:	4605      	mov	r5, r0
   8ccbe:	6900      	ldr	r0, [r0, #16]
   8ccc0:	1ac0      	subs	r0, r0, r3
   8ccc2:	d111      	bne.n	8cce8 <__mcmp+0x30>
   8ccc4:	3514      	adds	r5, #20
   8ccc6:	3114      	adds	r1, #20
   8ccc8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8cccc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8ccd0:	e001      	b.n	8ccd6 <__mcmp+0x1e>
   8ccd2:	429d      	cmp	r5, r3
   8ccd4:	d208      	bcs.n	8cce8 <__mcmp+0x30>
   8ccd6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8ccda:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8ccde:	428c      	cmp	r4, r1
   8cce0:	d0f7      	beq.n	8ccd2 <__mcmp+0x1a>
   8cce2:	d203      	bcs.n	8ccec <__mcmp+0x34>
   8cce4:	f04f 30ff 	mov.w	r0, #4294967295
   8cce8:	bc30      	pop	{r4, r5}
   8ccea:	4770      	bx	lr
   8ccec:	2001      	movs	r0, #1
   8ccee:	bc30      	pop	{r4, r5}
   8ccf0:	4770      	bx	lr
   8ccf2:	bf00      	nop

0008ccf4 <__mdiff>:
   8ccf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ccf8:	690b      	ldr	r3, [r1, #16]
   8ccfa:	460c      	mov	r4, r1
   8ccfc:	6911      	ldr	r1, [r2, #16]
   8ccfe:	4690      	mov	r8, r2
   8cd00:	eba3 0b01 	sub.w	fp, r3, r1
   8cd04:	f1bb 0f00 	cmp.w	fp, #0
   8cd08:	d17c      	bne.n	8ce04 <__mdiff+0x110>
   8cd0a:	f104 0614 	add.w	r6, r4, #20
   8cd0e:	3214      	adds	r2, #20
   8cd10:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8cd14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8cd18:	e001      	b.n	8cd1e <__mdiff+0x2a>
   8cd1a:	429e      	cmp	r6, r3
   8cd1c:	d276      	bcs.n	8ce0c <__mdiff+0x118>
   8cd1e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8cd22:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8cd26:	428d      	cmp	r5, r1
   8cd28:	d0f7      	beq.n	8cd1a <__mdiff+0x26>
   8cd2a:	d365      	bcc.n	8cdf8 <__mdiff+0x104>
   8cd2c:	6861      	ldr	r1, [r4, #4]
   8cd2e:	f7ff fd6f 	bl	8c810 <_Balloc>
   8cd32:	2800      	cmp	r0, #0
   8cd34:	d074      	beq.n	8ce20 <__mdiff+0x12c>
   8cd36:	f100 0614 	add.w	r6, r0, #20
   8cd3a:	46b4      	mov	ip, r6
   8cd3c:	2300      	movs	r3, #0
   8cd3e:	6927      	ldr	r7, [r4, #16]
   8cd40:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8cd44:	f104 0a14 	add.w	sl, r4, #20
   8cd48:	f108 0514 	add.w	r5, r8, #20
   8cd4c:	f8c0 b00c 	str.w	fp, [r0, #12]
   8cd50:	3410      	adds	r4, #16
   8cd52:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8cd56:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8cd5a:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8cd5e:	f855 bb04 	ldr.w	fp, [r5], #4
   8cd62:	b291      	uxth	r1, r2
   8cd64:	440b      	add	r3, r1
   8cd66:	fa1f f18b 	uxth.w	r1, fp
   8cd6a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8cd6e:	1a59      	subs	r1, r3, r1
   8cd70:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8cd74:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8cd78:	b289      	uxth	r1, r1
   8cd7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8cd7e:	45a9      	cmp	r9, r5
   8cd80:	f84c 1b04 	str.w	r1, [ip], #4
   8cd84:	ea4f 4323 	mov.w	r3, r3, asr #16
   8cd88:	d8e7      	bhi.n	8cd5a <__mdiff+0x66>
   8cd8a:	eba9 0208 	sub.w	r2, r9, r8
   8cd8e:	3a15      	subs	r2, #21
   8cd90:	f108 0815 	add.w	r8, r8, #21
   8cd94:	45c1      	cmp	r9, r8
   8cd96:	f022 0403 	bic.w	r4, r2, #3
   8cd9a:	f104 0404 	add.w	r4, r4, #4
   8cd9e:	bf38      	it	cc
   8cda0:	2404      	movcc	r4, #4
   8cda2:	f022 0203 	bic.w	r2, r2, #3
   8cda6:	bf38      	it	cc
   8cda8:	2200      	movcc	r2, #0
   8cdaa:	44a2      	add	sl, r4
   8cdac:	45d6      	cmp	lr, sl
   8cdae:	4434      	add	r4, r6
   8cdb0:	4416      	add	r6, r2
   8cdb2:	d918      	bls.n	8cde6 <__mdiff+0xf2>
   8cdb4:	4625      	mov	r5, r4
   8cdb6:	4652      	mov	r2, sl
   8cdb8:	f852 6b04 	ldr.w	r6, [r2], #4
   8cdbc:	b2b1      	uxth	r1, r6
   8cdbe:	4419      	add	r1, r3
   8cdc0:	140b      	asrs	r3, r1, #16
   8cdc2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8cdc6:	b289      	uxth	r1, r1
   8cdc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8cdcc:	4596      	cmp	lr, r2
   8cdce:	f845 1b04 	str.w	r1, [r5], #4
   8cdd2:	ea4f 4323 	mov.w	r3, r3, asr #16
   8cdd6:	d8ef      	bhi.n	8cdb8 <__mdiff+0xc4>
   8cdd8:	f10e 36ff 	add.w	r6, lr, #4294967295
   8cddc:	eba6 060a 	sub.w	r6, r6, sl
   8cde0:	f026 0603 	bic.w	r6, r6, #3
   8cde4:	4426      	add	r6, r4
   8cde6:	b921      	cbnz	r1, 8cdf2 <__mdiff+0xfe>
   8cde8:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8cdec:	3f01      	subs	r7, #1
   8cdee:	2b00      	cmp	r3, #0
   8cdf0:	d0fa      	beq.n	8cde8 <__mdiff+0xf4>
   8cdf2:	6107      	str	r7, [r0, #16]
   8cdf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cdf8:	4623      	mov	r3, r4
   8cdfa:	f04f 0b01 	mov.w	fp, #1
   8cdfe:	4644      	mov	r4, r8
   8ce00:	4698      	mov	r8, r3
   8ce02:	e793      	b.n	8cd2c <__mdiff+0x38>
   8ce04:	dbf8      	blt.n	8cdf8 <__mdiff+0x104>
   8ce06:	f04f 0b00 	mov.w	fp, #0
   8ce0a:	e78f      	b.n	8cd2c <__mdiff+0x38>
   8ce0c:	2100      	movs	r1, #0
   8ce0e:	f7ff fcff 	bl	8c810 <_Balloc>
   8ce12:	b160      	cbz	r0, 8ce2e <__mdiff+0x13a>
   8ce14:	2201      	movs	r2, #1
   8ce16:	2300      	movs	r3, #0
   8ce18:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8ce1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ce20:	4602      	mov	r2, r0
   8ce22:	f44f 7110 	mov.w	r1, #576	; 0x240
   8ce26:	4b05      	ldr	r3, [pc, #20]	; (8ce3c <__mdiff+0x148>)
   8ce28:	4805      	ldr	r0, [pc, #20]	; (8ce40 <__mdiff+0x14c>)
   8ce2a:	f000 fcab 	bl	8d784 <__assert_func>
   8ce2e:	4602      	mov	r2, r0
   8ce30:	f240 2132 	movw	r1, #562	; 0x232
   8ce34:	4b01      	ldr	r3, [pc, #4]	; (8ce3c <__mdiff+0x148>)
   8ce36:	4802      	ldr	r0, [pc, #8]	; (8ce40 <__mdiff+0x14c>)
   8ce38:	f000 fca4 	bl	8d784 <__assert_func>
   8ce3c:	0008e6d4 	.word	0x0008e6d4
   8ce40:	0008e774 	.word	0x0008e774

0008ce44 <__d2b>:
   8ce44:	b570      	push	{r4, r5, r6, lr}
   8ce46:	2101      	movs	r1, #1
   8ce48:	b082      	sub	sp, #8
   8ce4a:	4616      	mov	r6, r2
   8ce4c:	461d      	mov	r5, r3
   8ce4e:	f7ff fcdf 	bl	8c810 <_Balloc>
   8ce52:	4604      	mov	r4, r0
   8ce54:	2800      	cmp	r0, #0
   8ce56:	d04c      	beq.n	8cef2 <__d2b+0xae>
   8ce58:	462b      	mov	r3, r5
   8ce5a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8ce5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8ce62:	b10d      	cbz	r5, 8ce68 <__d2b+0x24>
   8ce64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8ce68:	2e00      	cmp	r6, #0
   8ce6a:	9301      	str	r3, [sp, #4]
   8ce6c:	d022      	beq.n	8ceb4 <__d2b+0x70>
   8ce6e:	4668      	mov	r0, sp
   8ce70:	9600      	str	r6, [sp, #0]
   8ce72:	f7ff fd6b 	bl	8c94c <__lo0bits>
   8ce76:	2800      	cmp	r0, #0
   8ce78:	d037      	beq.n	8ceea <__d2b+0xa6>
   8ce7a:	9b01      	ldr	r3, [sp, #4]
   8ce7c:	9900      	ldr	r1, [sp, #0]
   8ce7e:	f1c0 0220 	rsb	r2, r0, #32
   8ce82:	fa03 f202 	lsl.w	r2, r3, r2
   8ce86:	430a      	orrs	r2, r1
   8ce88:	40c3      	lsrs	r3, r0
   8ce8a:	9301      	str	r3, [sp, #4]
   8ce8c:	6162      	str	r2, [r4, #20]
   8ce8e:	2b00      	cmp	r3, #0
   8ce90:	bf14      	ite	ne
   8ce92:	2102      	movne	r1, #2
   8ce94:	2101      	moveq	r1, #1
   8ce96:	61a3      	str	r3, [r4, #24]
   8ce98:	6121      	str	r1, [r4, #16]
   8ce9a:	b1b5      	cbz	r5, 8ceca <__d2b+0x86>
   8ce9c:	9a06      	ldr	r2, [sp, #24]
   8ce9e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8cea2:	4403      	add	r3, r0
   8cea4:	6013      	str	r3, [r2, #0]
   8cea6:	9b07      	ldr	r3, [sp, #28]
   8cea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8ceac:	6018      	str	r0, [r3, #0]
   8ceae:	4620      	mov	r0, r4
   8ceb0:	b002      	add	sp, #8
   8ceb2:	bd70      	pop	{r4, r5, r6, pc}
   8ceb4:	a801      	add	r0, sp, #4
   8ceb6:	f7ff fd49 	bl	8c94c <__lo0bits>
   8ceba:	2301      	movs	r3, #1
   8cebc:	9a01      	ldr	r2, [sp, #4]
   8cebe:	4619      	mov	r1, r3
   8cec0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8cec4:	3020      	adds	r0, #32
   8cec6:	2d00      	cmp	r5, #0
   8cec8:	d1e8      	bne.n	8ce9c <__d2b+0x58>
   8ceca:	9a06      	ldr	r2, [sp, #24]
   8cecc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8ced0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8ced4:	6010      	str	r0, [r2, #0]
   8ced6:	6918      	ldr	r0, [r3, #16]
   8ced8:	f7ff fd18 	bl	8c90c <__hi0bits>
   8cedc:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8cee0:	4620      	mov	r0, r4
   8cee2:	9b07      	ldr	r3, [sp, #28]
   8cee4:	6019      	str	r1, [r3, #0]
   8cee6:	b002      	add	sp, #8
   8cee8:	bd70      	pop	{r4, r5, r6, pc}
   8ceea:	e9dd 2300 	ldrd	r2, r3, [sp]
   8ceee:	6162      	str	r2, [r4, #20]
   8cef0:	e7cd      	b.n	8ce8e <__d2b+0x4a>
   8cef2:	4602      	mov	r2, r0
   8cef4:	f240 310a 	movw	r1, #778	; 0x30a
   8cef8:	4b01      	ldr	r3, [pc, #4]	; (8cf00 <__d2b+0xbc>)
   8cefa:	4802      	ldr	r0, [pc, #8]	; (8cf04 <__d2b+0xc0>)
   8cefc:	f000 fc42 	bl	8d784 <__assert_func>
   8cf00:	0008e6d4 	.word	0x0008e6d4
   8cf04:	0008e774 	.word	0x0008e774

0008cf08 <_realloc_r>:
   8cf08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8cf0c:	4616      	mov	r6, r2
   8cf0e:	2900      	cmp	r1, #0
   8cf10:	f000 80bd 	beq.w	8d08e <_realloc_r+0x186>
   8cf14:	f106 050b 	add.w	r5, r6, #11
   8cf18:	460c      	mov	r4, r1
   8cf1a:	4680      	mov	r8, r0
   8cf1c:	f7ff fc6c 	bl	8c7f8 <__malloc_lock>
   8cf20:	2d16      	cmp	r5, #22
   8cf22:	d85f      	bhi.n	8cfe4 <_realloc_r+0xdc>
   8cf24:	2510      	movs	r5, #16
   8cf26:	462a      	mov	r2, r5
   8cf28:	42ae      	cmp	r6, r5
   8cf2a:	d860      	bhi.n	8cfee <_realloc_r+0xe6>
   8cf2c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8cf30:	f1a4 0908 	sub.w	r9, r4, #8
   8cf34:	f021 0703 	bic.w	r7, r1, #3
   8cf38:	4297      	cmp	r7, r2
   8cf3a:	f280 8086 	bge.w	8d04a <_realloc_r+0x142>
   8cf3e:	4bc9      	ldr	r3, [pc, #804]	; (8d264 <_realloc_r+0x35c>)
   8cf40:	eb09 0007 	add.w	r0, r9, r7
   8cf44:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8cf48:	4584      	cmp	ip, r0
   8cf4a:	f000 80b9 	beq.w	8d0c0 <_realloc_r+0x1b8>
   8cf4e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8cf52:	f02c 0301 	bic.w	r3, ip, #1
   8cf56:	4403      	add	r3, r0
   8cf58:	685b      	ldr	r3, [r3, #4]
   8cf5a:	07db      	lsls	r3, r3, #31
   8cf5c:	f100 808c 	bmi.w	8d078 <_realloc_r+0x170>
   8cf60:	f02c 0c03 	bic.w	ip, ip, #3
   8cf64:	eb07 030c 	add.w	r3, r7, ip
   8cf68:	4293      	cmp	r3, r2
   8cf6a:	f280 8115 	bge.w	8d198 <_realloc_r+0x290>
   8cf6e:	07cb      	lsls	r3, r1, #31
   8cf70:	d40f      	bmi.n	8cf92 <_realloc_r+0x8a>
   8cf72:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8cf76:	eba9 0a03 	sub.w	sl, r9, r3
   8cf7a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8cf7e:	f023 0103 	bic.w	r1, r3, #3
   8cf82:	448c      	add	ip, r1
   8cf84:	44bc      	add	ip, r7
   8cf86:	4594      	cmp	ip, r2
   8cf88:	da38      	bge.n	8cffc <_realloc_r+0xf4>
   8cf8a:	187b      	adds	r3, r7, r1
   8cf8c:	4293      	cmp	r3, r2
   8cf8e:	f280 810f 	bge.w	8d1b0 <_realloc_r+0x2a8>
   8cf92:	4631      	mov	r1, r6
   8cf94:	4640      	mov	r0, r8
   8cf96:	f7ff f8c1 	bl	8c11c <_malloc_r>
   8cf9a:	4606      	mov	r6, r0
   8cf9c:	b1e0      	cbz	r0, 8cfd8 <_realloc_r+0xd0>
   8cf9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8cfa2:	f1a0 0208 	sub.w	r2, r0, #8
   8cfa6:	f023 0301 	bic.w	r3, r3, #1
   8cfaa:	444b      	add	r3, r9
   8cfac:	4293      	cmp	r3, r2
   8cfae:	f000 80f9 	beq.w	8d1a4 <_realloc_r+0x29c>
   8cfb2:	1f3a      	subs	r2, r7, #4
   8cfb4:	2a24      	cmp	r2, #36	; 0x24
   8cfb6:	f200 811c 	bhi.w	8d1f2 <_realloc_r+0x2ea>
   8cfba:	2a13      	cmp	r2, #19
   8cfbc:	f200 80cd 	bhi.w	8d15a <_realloc_r+0x252>
   8cfc0:	4603      	mov	r3, r0
   8cfc2:	4622      	mov	r2, r4
   8cfc4:	6811      	ldr	r1, [r2, #0]
   8cfc6:	6019      	str	r1, [r3, #0]
   8cfc8:	6851      	ldr	r1, [r2, #4]
   8cfca:	6059      	str	r1, [r3, #4]
   8cfcc:	6892      	ldr	r2, [r2, #8]
   8cfce:	609a      	str	r2, [r3, #8]
   8cfd0:	4621      	mov	r1, r4
   8cfd2:	4640      	mov	r0, r8
   8cfd4:	f7fe fd70 	bl	8bab8 <_free_r>
   8cfd8:	4640      	mov	r0, r8
   8cfda:	f7ff fc13 	bl	8c804 <__malloc_unlock>
   8cfde:	4630      	mov	r0, r6
   8cfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cfe4:	f025 0507 	bic.w	r5, r5, #7
   8cfe8:	2d00      	cmp	r5, #0
   8cfea:	462a      	mov	r2, r5
   8cfec:	da9c      	bge.n	8cf28 <_realloc_r+0x20>
   8cfee:	230c      	movs	r3, #12
   8cff0:	2600      	movs	r6, #0
   8cff2:	f8c8 3000 	str.w	r3, [r8]
   8cff6:	4630      	mov	r0, r6
   8cff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cffc:	4656      	mov	r6, sl
   8cffe:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8d002:	60cb      	str	r3, [r1, #12]
   8d004:	6099      	str	r1, [r3, #8]
   8d006:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8d00a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8d00e:	1f3a      	subs	r2, r7, #4
   8d010:	2a24      	cmp	r2, #36	; 0x24
   8d012:	60cb      	str	r3, [r1, #12]
   8d014:	6099      	str	r1, [r3, #8]
   8d016:	f200 8107 	bhi.w	8d228 <_realloc_r+0x320>
   8d01a:	2a13      	cmp	r2, #19
   8d01c:	f240 8102 	bls.w	8d224 <_realloc_r+0x31c>
   8d020:	6823      	ldr	r3, [r4, #0]
   8d022:	2a1b      	cmp	r2, #27
   8d024:	f8ca 3008 	str.w	r3, [sl, #8]
   8d028:	6863      	ldr	r3, [r4, #4]
   8d02a:	f8ca 300c 	str.w	r3, [sl, #12]
   8d02e:	f200 811b 	bhi.w	8d268 <_realloc_r+0x360>
   8d032:	3408      	adds	r4, #8
   8d034:	f10a 0310 	add.w	r3, sl, #16
   8d038:	6822      	ldr	r2, [r4, #0]
   8d03a:	4667      	mov	r7, ip
   8d03c:	601a      	str	r2, [r3, #0]
   8d03e:	6862      	ldr	r2, [r4, #4]
   8d040:	46d1      	mov	r9, sl
   8d042:	605a      	str	r2, [r3, #4]
   8d044:	68a2      	ldr	r2, [r4, #8]
   8d046:	4634      	mov	r4, r6
   8d048:	609a      	str	r2, [r3, #8]
   8d04a:	1b7b      	subs	r3, r7, r5
   8d04c:	2b0f      	cmp	r3, #15
   8d04e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8d052:	d821      	bhi.n	8d098 <_realloc_r+0x190>
   8d054:	f002 0201 	and.w	r2, r2, #1
   8d058:	433a      	orrs	r2, r7
   8d05a:	eb09 0107 	add.w	r1, r9, r7
   8d05e:	f8c9 2004 	str.w	r2, [r9, #4]
   8d062:	684b      	ldr	r3, [r1, #4]
   8d064:	f043 0301 	orr.w	r3, r3, #1
   8d068:	604b      	str	r3, [r1, #4]
   8d06a:	4626      	mov	r6, r4
   8d06c:	4640      	mov	r0, r8
   8d06e:	f7ff fbc9 	bl	8c804 <__malloc_unlock>
   8d072:	4630      	mov	r0, r6
   8d074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d078:	07c9      	lsls	r1, r1, #31
   8d07a:	d48a      	bmi.n	8cf92 <_realloc_r+0x8a>
   8d07c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8d080:	eba9 0a03 	sub.w	sl, r9, r3
   8d084:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d088:	f021 0103 	bic.w	r1, r1, #3
   8d08c:	e77d      	b.n	8cf8a <_realloc_r+0x82>
   8d08e:	4611      	mov	r1, r2
   8d090:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d094:	f7ff b842 	b.w	8c11c <_malloc_r>
   8d098:	f002 0201 	and.w	r2, r2, #1
   8d09c:	eb09 0105 	add.w	r1, r9, r5
   8d0a0:	f043 0301 	orr.w	r3, r3, #1
   8d0a4:	432a      	orrs	r2, r5
   8d0a6:	f8c9 2004 	str.w	r2, [r9, #4]
   8d0aa:	444f      	add	r7, r9
   8d0ac:	604b      	str	r3, [r1, #4]
   8d0ae:	687b      	ldr	r3, [r7, #4]
   8d0b0:	4640      	mov	r0, r8
   8d0b2:	f043 0301 	orr.w	r3, r3, #1
   8d0b6:	3108      	adds	r1, #8
   8d0b8:	607b      	str	r3, [r7, #4]
   8d0ba:	f7fe fcfd 	bl	8bab8 <_free_r>
   8d0be:	e7d4      	b.n	8d06a <_realloc_r+0x162>
   8d0c0:	f8dc b004 	ldr.w	fp, [ip, #4]
   8d0c4:	f105 0010 	add.w	r0, r5, #16
   8d0c8:	f02b 0b03 	bic.w	fp, fp, #3
   8d0cc:	eb07 0c0b 	add.w	ip, r7, fp
   8d0d0:	4584      	cmp	ip, r0
   8d0d2:	da4d      	bge.n	8d170 <_realloc_r+0x268>
   8d0d4:	07c9      	lsls	r1, r1, #31
   8d0d6:	f53f af5c 	bmi.w	8cf92 <_realloc_r+0x8a>
   8d0da:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8d0de:	eba9 0a01 	sub.w	sl, r9, r1
   8d0e2:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d0e6:	f021 0103 	bic.w	r1, r1, #3
   8d0ea:	448b      	add	fp, r1
   8d0ec:	44bb      	add	fp, r7
   8d0ee:	4558      	cmp	r0, fp
   8d0f0:	f73f af4b 	bgt.w	8cf8a <_realloc_r+0x82>
   8d0f4:	4656      	mov	r6, sl
   8d0f6:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d0fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d0fe:	1f3a      	subs	r2, r7, #4
   8d100:	2a24      	cmp	r2, #36	; 0x24
   8d102:	60c1      	str	r1, [r0, #12]
   8d104:	6088      	str	r0, [r1, #8]
   8d106:	f200 80bd 	bhi.w	8d284 <_realloc_r+0x37c>
   8d10a:	2a13      	cmp	r2, #19
   8d10c:	f240 80b8 	bls.w	8d280 <_realloc_r+0x378>
   8d110:	6821      	ldr	r1, [r4, #0]
   8d112:	2a1b      	cmp	r2, #27
   8d114:	f8ca 1008 	str.w	r1, [sl, #8]
   8d118:	6861      	ldr	r1, [r4, #4]
   8d11a:	f8ca 100c 	str.w	r1, [sl, #12]
   8d11e:	f200 80c1 	bhi.w	8d2a4 <_realloc_r+0x39c>
   8d122:	3408      	adds	r4, #8
   8d124:	f10a 0210 	add.w	r2, sl, #16
   8d128:	6821      	ldr	r1, [r4, #0]
   8d12a:	6011      	str	r1, [r2, #0]
   8d12c:	6861      	ldr	r1, [r4, #4]
   8d12e:	6051      	str	r1, [r2, #4]
   8d130:	68a1      	ldr	r1, [r4, #8]
   8d132:	6091      	str	r1, [r2, #8]
   8d134:	ebab 0205 	sub.w	r2, fp, r5
   8d138:	eb0a 0105 	add.w	r1, sl, r5
   8d13c:	f042 0201 	orr.w	r2, r2, #1
   8d140:	6099      	str	r1, [r3, #8]
   8d142:	604a      	str	r2, [r1, #4]
   8d144:	f8da 3004 	ldr.w	r3, [sl, #4]
   8d148:	4640      	mov	r0, r8
   8d14a:	f003 0301 	and.w	r3, r3, #1
   8d14e:	431d      	orrs	r5, r3
   8d150:	f8ca 5004 	str.w	r5, [sl, #4]
   8d154:	f7ff fb56 	bl	8c804 <__malloc_unlock>
   8d158:	e74d      	b.n	8cff6 <_realloc_r+0xee>
   8d15a:	6823      	ldr	r3, [r4, #0]
   8d15c:	2a1b      	cmp	r2, #27
   8d15e:	6003      	str	r3, [r0, #0]
   8d160:	6863      	ldr	r3, [r4, #4]
   8d162:	6043      	str	r3, [r0, #4]
   8d164:	d849      	bhi.n	8d1fa <_realloc_r+0x2f2>
   8d166:	f104 0208 	add.w	r2, r4, #8
   8d16a:	f100 0308 	add.w	r3, r0, #8
   8d16e:	e729      	b.n	8cfc4 <_realloc_r+0xbc>
   8d170:	ebac 0205 	sub.w	r2, ip, r5
   8d174:	eb09 0105 	add.w	r1, r9, r5
   8d178:	f042 0201 	orr.w	r2, r2, #1
   8d17c:	6099      	str	r1, [r3, #8]
   8d17e:	604a      	str	r2, [r1, #4]
   8d180:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8d184:	4640      	mov	r0, r8
   8d186:	f003 0301 	and.w	r3, r3, #1
   8d18a:	431d      	orrs	r5, r3
   8d18c:	f844 5c04 	str.w	r5, [r4, #-4]
   8d190:	f7ff fb38 	bl	8c804 <__malloc_unlock>
   8d194:	4626      	mov	r6, r4
   8d196:	e72e      	b.n	8cff6 <_realloc_r+0xee>
   8d198:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8d19c:	461f      	mov	r7, r3
   8d19e:	60ca      	str	r2, [r1, #12]
   8d1a0:	6091      	str	r1, [r2, #8]
   8d1a2:	e752      	b.n	8d04a <_realloc_r+0x142>
   8d1a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8d1a8:	f023 0303 	bic.w	r3, r3, #3
   8d1ac:	441f      	add	r7, r3
   8d1ae:	e74c      	b.n	8d04a <_realloc_r+0x142>
   8d1b0:	4656      	mov	r6, sl
   8d1b2:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d1b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d1ba:	1f3a      	subs	r2, r7, #4
   8d1bc:	2a24      	cmp	r2, #36	; 0x24
   8d1be:	60c1      	str	r1, [r0, #12]
   8d1c0:	6088      	str	r0, [r1, #8]
   8d1c2:	d827      	bhi.n	8d214 <_realloc_r+0x30c>
   8d1c4:	2a13      	cmp	r2, #19
   8d1c6:	d923      	bls.n	8d210 <_realloc_r+0x308>
   8d1c8:	6821      	ldr	r1, [r4, #0]
   8d1ca:	2a1b      	cmp	r2, #27
   8d1cc:	f8ca 1008 	str.w	r1, [sl, #8]
   8d1d0:	6861      	ldr	r1, [r4, #4]
   8d1d2:	f8ca 100c 	str.w	r1, [sl, #12]
   8d1d6:	d82f      	bhi.n	8d238 <_realloc_r+0x330>
   8d1d8:	3408      	adds	r4, #8
   8d1da:	f10a 0210 	add.w	r2, sl, #16
   8d1de:	6821      	ldr	r1, [r4, #0]
   8d1e0:	461f      	mov	r7, r3
   8d1e2:	6011      	str	r1, [r2, #0]
   8d1e4:	6863      	ldr	r3, [r4, #4]
   8d1e6:	46d1      	mov	r9, sl
   8d1e8:	6053      	str	r3, [r2, #4]
   8d1ea:	68a3      	ldr	r3, [r4, #8]
   8d1ec:	4634      	mov	r4, r6
   8d1ee:	6093      	str	r3, [r2, #8]
   8d1f0:	e72b      	b.n	8d04a <_realloc_r+0x142>
   8d1f2:	4621      	mov	r1, r4
   8d1f4:	f7ff fa96 	bl	8c724 <memmove>
   8d1f8:	e6ea      	b.n	8cfd0 <_realloc_r+0xc8>
   8d1fa:	68a3      	ldr	r3, [r4, #8]
   8d1fc:	2a24      	cmp	r2, #36	; 0x24
   8d1fe:	6083      	str	r3, [r0, #8]
   8d200:	68e3      	ldr	r3, [r4, #12]
   8d202:	60c3      	str	r3, [r0, #12]
   8d204:	d024      	beq.n	8d250 <_realloc_r+0x348>
   8d206:	f104 0210 	add.w	r2, r4, #16
   8d20a:	f100 0310 	add.w	r3, r0, #16
   8d20e:	e6d9      	b.n	8cfc4 <_realloc_r+0xbc>
   8d210:	4632      	mov	r2, r6
   8d212:	e7e4      	b.n	8d1de <_realloc_r+0x2d6>
   8d214:	4621      	mov	r1, r4
   8d216:	4630      	mov	r0, r6
   8d218:	461f      	mov	r7, r3
   8d21a:	46d1      	mov	r9, sl
   8d21c:	f7ff fa82 	bl	8c724 <memmove>
   8d220:	4634      	mov	r4, r6
   8d222:	e712      	b.n	8d04a <_realloc_r+0x142>
   8d224:	4633      	mov	r3, r6
   8d226:	e707      	b.n	8d038 <_realloc_r+0x130>
   8d228:	4621      	mov	r1, r4
   8d22a:	4630      	mov	r0, r6
   8d22c:	4667      	mov	r7, ip
   8d22e:	46d1      	mov	r9, sl
   8d230:	f7ff fa78 	bl	8c724 <memmove>
   8d234:	4634      	mov	r4, r6
   8d236:	e708      	b.n	8d04a <_realloc_r+0x142>
   8d238:	68a1      	ldr	r1, [r4, #8]
   8d23a:	2a24      	cmp	r2, #36	; 0x24
   8d23c:	f8ca 1010 	str.w	r1, [sl, #16]
   8d240:	68e1      	ldr	r1, [r4, #12]
   8d242:	f8ca 1014 	str.w	r1, [sl, #20]
   8d246:	d023      	beq.n	8d290 <_realloc_r+0x388>
   8d248:	3410      	adds	r4, #16
   8d24a:	f10a 0218 	add.w	r2, sl, #24
   8d24e:	e7c6      	b.n	8d1de <_realloc_r+0x2d6>
   8d250:	6923      	ldr	r3, [r4, #16]
   8d252:	f104 0218 	add.w	r2, r4, #24
   8d256:	6103      	str	r3, [r0, #16]
   8d258:	6961      	ldr	r1, [r4, #20]
   8d25a:	f100 0318 	add.w	r3, r0, #24
   8d25e:	6141      	str	r1, [r0, #20]
   8d260:	e6b0      	b.n	8cfc4 <_realloc_r+0xbc>
   8d262:	bf00      	nop
   8d264:	20000cb8 	.word	0x20000cb8
   8d268:	68a3      	ldr	r3, [r4, #8]
   8d26a:	2a24      	cmp	r2, #36	; 0x24
   8d26c:	f8ca 3010 	str.w	r3, [sl, #16]
   8d270:	68e3      	ldr	r3, [r4, #12]
   8d272:	f8ca 3014 	str.w	r3, [sl, #20]
   8d276:	d021      	beq.n	8d2bc <_realloc_r+0x3b4>
   8d278:	3410      	adds	r4, #16
   8d27a:	f10a 0318 	add.w	r3, sl, #24
   8d27e:	e6db      	b.n	8d038 <_realloc_r+0x130>
   8d280:	4632      	mov	r2, r6
   8d282:	e751      	b.n	8d128 <_realloc_r+0x220>
   8d284:	4621      	mov	r1, r4
   8d286:	4630      	mov	r0, r6
   8d288:	f7ff fa4c 	bl	8c724 <memmove>
   8d28c:	4b15      	ldr	r3, [pc, #84]	; (8d2e4 <_realloc_r+0x3dc>)
   8d28e:	e751      	b.n	8d134 <_realloc_r+0x22c>
   8d290:	6921      	ldr	r1, [r4, #16]
   8d292:	f10a 0220 	add.w	r2, sl, #32
   8d296:	f8ca 1018 	str.w	r1, [sl, #24]
   8d29a:	6961      	ldr	r1, [r4, #20]
   8d29c:	3418      	adds	r4, #24
   8d29e:	f8ca 101c 	str.w	r1, [sl, #28]
   8d2a2:	e79c      	b.n	8d1de <_realloc_r+0x2d6>
   8d2a4:	68a1      	ldr	r1, [r4, #8]
   8d2a6:	2a24      	cmp	r2, #36	; 0x24
   8d2a8:	f8ca 1010 	str.w	r1, [sl, #16]
   8d2ac:	68e1      	ldr	r1, [r4, #12]
   8d2ae:	f8ca 1014 	str.w	r1, [sl, #20]
   8d2b2:	d00d      	beq.n	8d2d0 <_realloc_r+0x3c8>
   8d2b4:	3410      	adds	r4, #16
   8d2b6:	f10a 0218 	add.w	r2, sl, #24
   8d2ba:	e735      	b.n	8d128 <_realloc_r+0x220>
   8d2bc:	6922      	ldr	r2, [r4, #16]
   8d2be:	f10a 0320 	add.w	r3, sl, #32
   8d2c2:	f8ca 2018 	str.w	r2, [sl, #24]
   8d2c6:	6962      	ldr	r2, [r4, #20]
   8d2c8:	3418      	adds	r4, #24
   8d2ca:	f8ca 201c 	str.w	r2, [sl, #28]
   8d2ce:	e6b3      	b.n	8d038 <_realloc_r+0x130>
   8d2d0:	6921      	ldr	r1, [r4, #16]
   8d2d2:	f10a 0220 	add.w	r2, sl, #32
   8d2d6:	f8ca 1018 	str.w	r1, [sl, #24]
   8d2da:	6961      	ldr	r1, [r4, #20]
   8d2dc:	3418      	adds	r4, #24
   8d2de:	f8ca 101c 	str.w	r1, [sl, #28]
   8d2e2:	e721      	b.n	8d128 <_realloc_r+0x220>
   8d2e4:	20000cb8 	.word	0x20000cb8

0008d2e8 <frexp>:
   8d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d2ea:	4617      	mov	r7, r2
   8d2ec:	2200      	movs	r2, #0
   8d2ee:	f8df c060 	ldr.w	ip, [pc, #96]	; 8d350 <frexp+0x68>
   8d2f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d2f6:	4563      	cmp	r3, ip
   8d2f8:	4604      	mov	r4, r0
   8d2fa:	460d      	mov	r5, r1
   8d2fc:	603a      	str	r2, [r7, #0]
   8d2fe:	dc22      	bgt.n	8d346 <frexp+0x5e>
   8d300:	4684      	mov	ip, r0
   8d302:	ea53 0c0c 	orrs.w	ip, r3, ip
   8d306:	d01e      	beq.n	8d346 <frexp+0x5e>
   8d308:	f8df c048 	ldr.w	ip, [pc, #72]	; 8d354 <frexp+0x6c>
   8d30c:	460e      	mov	r6, r1
   8d30e:	ea01 0c0c 	and.w	ip, r1, ip
   8d312:	f1bc 0f00 	cmp.w	ip, #0
   8d316:	d109      	bne.n	8d32c <frexp+0x44>
   8d318:	2200      	movs	r2, #0
   8d31a:	4b0c      	ldr	r3, [pc, #48]	; (8d34c <frexp+0x64>)
   8d31c:	f000 fd70 	bl	8de00 <__aeabi_dmul>
   8d320:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8d324:	4604      	mov	r4, r0
   8d326:	460e      	mov	r6, r1
   8d328:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d32c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8d330:	151b      	asrs	r3, r3, #20
   8d332:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8d336:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8d33a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8d33e:	4413      	add	r3, r2
   8d340:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8d344:	603b      	str	r3, [r7, #0]
   8d346:	4620      	mov	r0, r4
   8d348:	4629      	mov	r1, r5
   8d34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d34c:	43500000 	.word	0x43500000
   8d350:	7fefffff 	.word	0x7fefffff
   8d354:	7ff00000 	.word	0x7ff00000

0008d358 <_sbrk_r>:
   8d358:	2200      	movs	r2, #0
   8d35a:	b538      	push	{r3, r4, r5, lr}
   8d35c:	4d06      	ldr	r5, [pc, #24]	; (8d378 <_sbrk_r+0x20>)
   8d35e:	4604      	mov	r4, r0
   8d360:	4608      	mov	r0, r1
   8d362:	602a      	str	r2, [r5, #0]
   8d364:	f7f9 febe 	bl	870e4 <_sbrk>
   8d368:	1c43      	adds	r3, r0, #1
   8d36a:	d000      	beq.n	8d36e <_sbrk_r+0x16>
   8d36c:	bd38      	pop	{r3, r4, r5, pc}
   8d36e:	682b      	ldr	r3, [r5, #0]
   8d370:	2b00      	cmp	r3, #0
   8d372:	d0fb      	beq.n	8d36c <_sbrk_r+0x14>
   8d374:	6023      	str	r3, [r4, #0]
   8d376:	bd38      	pop	{r3, r4, r5, pc}
   8d378:	20002e30 	.word	0x20002e30

0008d37c <__sread>:
   8d37c:	b510      	push	{r4, lr}
   8d37e:	460c      	mov	r4, r1
   8d380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d384:	f000 fb16 	bl	8d9b4 <_read_r>
   8d388:	2800      	cmp	r0, #0
   8d38a:	db03      	blt.n	8d394 <__sread+0x18>
   8d38c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8d38e:	4403      	add	r3, r0
   8d390:	6523      	str	r3, [r4, #80]	; 0x50
   8d392:	bd10      	pop	{r4, pc}
   8d394:	89a3      	ldrh	r3, [r4, #12]
   8d396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8d39a:	81a3      	strh	r3, [r4, #12]
   8d39c:	bd10      	pop	{r4, pc}
   8d39e:	bf00      	nop

0008d3a0 <__swrite>:
   8d3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8d3a4:	460c      	mov	r4, r1
   8d3a6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8d3aa:	461f      	mov	r7, r3
   8d3ac:	05cb      	lsls	r3, r1, #23
   8d3ae:	4616      	mov	r6, r2
   8d3b0:	4605      	mov	r5, r0
   8d3b2:	d40b      	bmi.n	8d3cc <__swrite+0x2c>
   8d3b4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8d3b8:	81a1      	strh	r1, [r4, #12]
   8d3ba:	463b      	mov	r3, r7
   8d3bc:	4632      	mov	r2, r6
   8d3be:	4628      	mov	r0, r5
   8d3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8d3c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8d3c8:	f000 b980 	b.w	8d6cc <_write_r>
   8d3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8d3d0:	2302      	movs	r3, #2
   8d3d2:	2200      	movs	r2, #0
   8d3d4:	f000 fad8 	bl	8d988 <_lseek_r>
   8d3d8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8d3dc:	e7ea      	b.n	8d3b4 <__swrite+0x14>
   8d3de:	bf00      	nop

0008d3e0 <__sseek>:
   8d3e0:	b510      	push	{r4, lr}
   8d3e2:	460c      	mov	r4, r1
   8d3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d3e8:	f000 face 	bl	8d988 <_lseek_r>
   8d3ec:	89a3      	ldrh	r3, [r4, #12]
   8d3ee:	1c42      	adds	r2, r0, #1
   8d3f0:	bf0e      	itee	eq
   8d3f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8d3f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8d3fa:	6520      	strne	r0, [r4, #80]	; 0x50
   8d3fc:	81a3      	strh	r3, [r4, #12]
   8d3fe:	bd10      	pop	{r4, pc}

0008d400 <__sclose>:
   8d400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d404:	f000 ba0c 	b.w	8d820 <_close_r>

0008d408 <strlen>:
   8d408:	f020 0103 	bic.w	r1, r0, #3
   8d40c:	f010 0003 	ands.w	r0, r0, #3
   8d410:	f1c0 0000 	rsb	r0, r0, #0
   8d414:	f851 3b04 	ldr.w	r3, [r1], #4
   8d418:	f100 0c04 	add.w	ip, r0, #4
   8d41c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8d420:	f06f 0200 	mvn.w	r2, #0
   8d424:	bf1c      	itt	ne
   8d426:	fa22 f20c 	lsrne.w	r2, r2, ip
   8d42a:	4313      	orrne	r3, r2
   8d42c:	f04f 0c01 	mov.w	ip, #1
   8d430:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8d434:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8d438:	eba3 020c 	sub.w	r2, r3, ip
   8d43c:	ea22 0203 	bic.w	r2, r2, r3
   8d440:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8d444:	bf04      	itt	eq
   8d446:	f851 3b04 	ldreq.w	r3, [r1], #4
   8d44a:	3004      	addeq	r0, #4
   8d44c:	d0f4      	beq.n	8d438 <strlen+0x30>
   8d44e:	f1c2 0100 	rsb	r1, r2, #0
   8d452:	ea02 0201 	and.w	r2, r2, r1
   8d456:	fab2 f282 	clz	r2, r2
   8d45a:	f1c2 021f 	rsb	r2, r2, #31
   8d45e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8d462:	4770      	bx	lr

0008d464 <strncpy>:
   8d464:	b470      	push	{r4, r5, r6}
   8d466:	ea40 0401 	orr.w	r4, r0, r1
   8d46a:	07a3      	lsls	r3, r4, #30
   8d46c:	d122      	bne.n	8d4b4 <strncpy+0x50>
   8d46e:	2a03      	cmp	r2, #3
   8d470:	d920      	bls.n	8d4b4 <strncpy+0x50>
   8d472:	460b      	mov	r3, r1
   8d474:	4604      	mov	r4, r0
   8d476:	4619      	mov	r1, r3
   8d478:	f853 6b04 	ldr.w	r6, [r3], #4
   8d47c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8d480:	ea25 0506 	bic.w	r5, r5, r6
   8d484:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8d488:	d115      	bne.n	8d4b6 <strncpy+0x52>
   8d48a:	3a04      	subs	r2, #4
   8d48c:	2a03      	cmp	r2, #3
   8d48e:	4619      	mov	r1, r3
   8d490:	f844 6b04 	str.w	r6, [r4], #4
   8d494:	d8ef      	bhi.n	8d476 <strncpy+0x12>
   8d496:	1e4d      	subs	r5, r1, #1
   8d498:	b152      	cbz	r2, 8d4b0 <strncpy+0x4c>
   8d49a:	4623      	mov	r3, r4
   8d49c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8d4a0:	1e56      	subs	r6, r2, #1
   8d4a2:	f803 1b01 	strb.w	r1, [r3], #1
   8d4a6:	b141      	cbz	r1, 8d4ba <strncpy+0x56>
   8d4a8:	4632      	mov	r2, r6
   8d4aa:	461c      	mov	r4, r3
   8d4ac:	2a00      	cmp	r2, #0
   8d4ae:	d1f4      	bne.n	8d49a <strncpy+0x36>
   8d4b0:	bc70      	pop	{r4, r5, r6}
   8d4b2:	4770      	bx	lr
   8d4b4:	4604      	mov	r4, r0
   8d4b6:	1e4d      	subs	r5, r1, #1
   8d4b8:	e7ee      	b.n	8d498 <strncpy+0x34>
   8d4ba:	4422      	add	r2, r4
   8d4bc:	2e00      	cmp	r6, #0
   8d4be:	d0f7      	beq.n	8d4b0 <strncpy+0x4c>
   8d4c0:	f803 1b01 	strb.w	r1, [r3], #1
   8d4c4:	4293      	cmp	r3, r2
   8d4c6:	d1fb      	bne.n	8d4c0 <strncpy+0x5c>
   8d4c8:	bc70      	pop	{r4, r5, r6}
   8d4ca:	4770      	bx	lr

0008d4cc <__ssprint_r>:
   8d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d4d0:	6893      	ldr	r3, [r2, #8]
   8d4d2:	4691      	mov	r9, r2
   8d4d4:	b083      	sub	sp, #12
   8d4d6:	2b00      	cmp	r3, #0
   8d4d8:	d06d      	beq.n	8d5b6 <__ssprint_r+0xea>
   8d4da:	6817      	ldr	r7, [r2, #0]
   8d4dc:	4680      	mov	r8, r0
   8d4de:	460c      	mov	r4, r1
   8d4e0:	6808      	ldr	r0, [r1, #0]
   8d4e2:	688d      	ldr	r5, [r1, #8]
   8d4e4:	3708      	adds	r7, #8
   8d4e6:	e043      	b.n	8d570 <__ssprint_r+0xa4>
   8d4e8:	89a3      	ldrh	r3, [r4, #12]
   8d4ea:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8d4ee:	d02e      	beq.n	8d54e <__ssprint_r+0x82>
   8d4f0:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8d4f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8d4f8:	eba0 0a01 	sub.w	sl, r0, r1
   8d4fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8d500:	eb0a 0006 	add.w	r0, sl, r6
   8d504:	106d      	asrs	r5, r5, #1
   8d506:	3001      	adds	r0, #1
   8d508:	42a8      	cmp	r0, r5
   8d50a:	462a      	mov	r2, r5
   8d50c:	bf84      	itt	hi
   8d50e:	4605      	movhi	r5, r0
   8d510:	462a      	movhi	r2, r5
   8d512:	055b      	lsls	r3, r3, #21
   8d514:	d536      	bpl.n	8d584 <__ssprint_r+0xb8>
   8d516:	4611      	mov	r1, r2
   8d518:	4640      	mov	r0, r8
   8d51a:	f7fe fdff 	bl	8c11c <_malloc_r>
   8d51e:	2800      	cmp	r0, #0
   8d520:	d03a      	beq.n	8d598 <__ssprint_r+0xcc>
   8d522:	4652      	mov	r2, sl
   8d524:	6921      	ldr	r1, [r4, #16]
   8d526:	9001      	str	r0, [sp, #4]
   8d528:	f7fa f9c4 	bl	878b4 <memcpy>
   8d52c:	89a2      	ldrh	r2, [r4, #12]
   8d52e:	9b01      	ldr	r3, [sp, #4]
   8d530:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8d534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8d538:	81a2      	strh	r2, [r4, #12]
   8d53a:	eba5 020a 	sub.w	r2, r5, sl
   8d53e:	eb03 000a 	add.w	r0, r3, sl
   8d542:	6165      	str	r5, [r4, #20]
   8d544:	46b2      	mov	sl, r6
   8d546:	4635      	mov	r5, r6
   8d548:	6123      	str	r3, [r4, #16]
   8d54a:	6020      	str	r0, [r4, #0]
   8d54c:	60a2      	str	r2, [r4, #8]
   8d54e:	4659      	mov	r1, fp
   8d550:	4652      	mov	r2, sl
   8d552:	f7ff f8e7 	bl	8c724 <memmove>
   8d556:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8d55a:	68a1      	ldr	r1, [r4, #8]
   8d55c:	6820      	ldr	r0, [r4, #0]
   8d55e:	1b4d      	subs	r5, r1, r5
   8d560:	4450      	add	r0, sl
   8d562:	1b9e      	subs	r6, r3, r6
   8d564:	60a5      	str	r5, [r4, #8]
   8d566:	6020      	str	r0, [r4, #0]
   8d568:	f8c9 6008 	str.w	r6, [r9, #8]
   8d56c:	b31e      	cbz	r6, 8d5b6 <__ssprint_r+0xea>
   8d56e:	3708      	adds	r7, #8
   8d570:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8d574:	2e00      	cmp	r6, #0
   8d576:	d0fa      	beq.n	8d56e <__ssprint_r+0xa2>
   8d578:	42b5      	cmp	r5, r6
   8d57a:	46aa      	mov	sl, r5
   8d57c:	d9b4      	bls.n	8d4e8 <__ssprint_r+0x1c>
   8d57e:	4635      	mov	r5, r6
   8d580:	46b2      	mov	sl, r6
   8d582:	e7e4      	b.n	8d54e <__ssprint_r+0x82>
   8d584:	4640      	mov	r0, r8
   8d586:	f7ff fcbf 	bl	8cf08 <_realloc_r>
   8d58a:	4603      	mov	r3, r0
   8d58c:	2800      	cmp	r0, #0
   8d58e:	d1d4      	bne.n	8d53a <__ssprint_r+0x6e>
   8d590:	4640      	mov	r0, r8
   8d592:	6921      	ldr	r1, [r4, #16]
   8d594:	f7fe fa90 	bl	8bab8 <_free_r>
   8d598:	230c      	movs	r3, #12
   8d59a:	2200      	movs	r2, #0
   8d59c:	f04f 30ff 	mov.w	r0, #4294967295
   8d5a0:	f8c8 3000 	str.w	r3, [r8]
   8d5a4:	89a3      	ldrh	r3, [r4, #12]
   8d5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8d5aa:	81a3      	strh	r3, [r4, #12]
   8d5ac:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8d5b0:	b003      	add	sp, #12
   8d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d5b6:	2000      	movs	r0, #0
   8d5b8:	f8c9 0004 	str.w	r0, [r9, #4]
   8d5bc:	b003      	add	sp, #12
   8d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d5c2:	bf00      	nop

0008d5c4 <__swbuf_r>:
   8d5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d5c6:	460d      	mov	r5, r1
   8d5c8:	4614      	mov	r4, r2
   8d5ca:	4606      	mov	r6, r0
   8d5cc:	b110      	cbz	r0, 8d5d4 <__swbuf_r+0x10>
   8d5ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8d5d0:	2b00      	cmp	r3, #0
   8d5d2:	d043      	beq.n	8d65c <__swbuf_r+0x98>
   8d5d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8d5d8:	69a3      	ldr	r3, [r4, #24]
   8d5da:	0717      	lsls	r7, r2, #28
   8d5dc:	60a3      	str	r3, [r4, #8]
   8d5de:	b290      	uxth	r0, r2
   8d5e0:	d51b      	bpl.n	8d61a <__swbuf_r+0x56>
   8d5e2:	6923      	ldr	r3, [r4, #16]
   8d5e4:	b1cb      	cbz	r3, 8d61a <__swbuf_r+0x56>
   8d5e6:	b2ed      	uxtb	r5, r5
   8d5e8:	0481      	lsls	r1, r0, #18
   8d5ea:	462f      	mov	r7, r5
   8d5ec:	d522      	bpl.n	8d634 <__swbuf_r+0x70>
   8d5ee:	6822      	ldr	r2, [r4, #0]
   8d5f0:	6961      	ldr	r1, [r4, #20]
   8d5f2:	1ad3      	subs	r3, r2, r3
   8d5f4:	4299      	cmp	r1, r3
   8d5f6:	dd29      	ble.n	8d64c <__swbuf_r+0x88>
   8d5f8:	3301      	adds	r3, #1
   8d5fa:	68a1      	ldr	r1, [r4, #8]
   8d5fc:	1c50      	adds	r0, r2, #1
   8d5fe:	3901      	subs	r1, #1
   8d600:	60a1      	str	r1, [r4, #8]
   8d602:	6020      	str	r0, [r4, #0]
   8d604:	7015      	strb	r5, [r2, #0]
   8d606:	6962      	ldr	r2, [r4, #20]
   8d608:	429a      	cmp	r2, r3
   8d60a:	d02a      	beq.n	8d662 <__swbuf_r+0x9e>
   8d60c:	89a3      	ldrh	r3, [r4, #12]
   8d60e:	07db      	lsls	r3, r3, #31
   8d610:	d501      	bpl.n	8d616 <__swbuf_r+0x52>
   8d612:	2d0a      	cmp	r5, #10
   8d614:	d025      	beq.n	8d662 <__swbuf_r+0x9e>
   8d616:	4638      	mov	r0, r7
   8d618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d61a:	4621      	mov	r1, r4
   8d61c:	4630      	mov	r0, r6
   8d61e:	f7fc ffc7 	bl	8a5b0 <__swsetup_r>
   8d622:	bb20      	cbnz	r0, 8d66e <__swbuf_r+0xaa>
   8d624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8d628:	b2ed      	uxtb	r5, r5
   8d62a:	b290      	uxth	r0, r2
   8d62c:	0481      	lsls	r1, r0, #18
   8d62e:	462f      	mov	r7, r5
   8d630:	6923      	ldr	r3, [r4, #16]
   8d632:	d4dc      	bmi.n	8d5ee <__swbuf_r+0x2a>
   8d634:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8d636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8d63a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8d63e:	81a2      	strh	r2, [r4, #12]
   8d640:	6822      	ldr	r2, [r4, #0]
   8d642:	6661      	str	r1, [r4, #100]	; 0x64
   8d644:	6961      	ldr	r1, [r4, #20]
   8d646:	1ad3      	subs	r3, r2, r3
   8d648:	4299      	cmp	r1, r3
   8d64a:	dcd5      	bgt.n	8d5f8 <__swbuf_r+0x34>
   8d64c:	4621      	mov	r1, r4
   8d64e:	4630      	mov	r0, r6
   8d650:	f7fe f8b2 	bl	8b7b8 <_fflush_r>
   8d654:	b958      	cbnz	r0, 8d66e <__swbuf_r+0xaa>
   8d656:	2301      	movs	r3, #1
   8d658:	6822      	ldr	r2, [r4, #0]
   8d65a:	e7ce      	b.n	8d5fa <__swbuf_r+0x36>
   8d65c:	f7fe f908 	bl	8b870 <__sinit>
   8d660:	e7b8      	b.n	8d5d4 <__swbuf_r+0x10>
   8d662:	4621      	mov	r1, r4
   8d664:	4630      	mov	r0, r6
   8d666:	f7fe f8a7 	bl	8b7b8 <_fflush_r>
   8d66a:	2800      	cmp	r0, #0
   8d66c:	d0d3      	beq.n	8d616 <__swbuf_r+0x52>
   8d66e:	f04f 37ff 	mov.w	r7, #4294967295
   8d672:	e7d0      	b.n	8d616 <__swbuf_r+0x52>

0008d674 <_wcrtomb_r>:
   8d674:	b570      	push	{r4, r5, r6, lr}
   8d676:	4606      	mov	r6, r0
   8d678:	461d      	mov	r5, r3
   8d67a:	b084      	sub	sp, #16
   8d67c:	b139      	cbz	r1, 8d68e <_wcrtomb_r+0x1a>
   8d67e:	4c0b      	ldr	r4, [pc, #44]	; (8d6ac <_wcrtomb_r+0x38>)
   8d680:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8d684:	47a0      	blx	r4
   8d686:	1c43      	adds	r3, r0, #1
   8d688:	d00a      	beq.n	8d6a0 <_wcrtomb_r+0x2c>
   8d68a:	b004      	add	sp, #16
   8d68c:	bd70      	pop	{r4, r5, r6, pc}
   8d68e:	460c      	mov	r4, r1
   8d690:	4906      	ldr	r1, [pc, #24]	; (8d6ac <_wcrtomb_r+0x38>)
   8d692:	4622      	mov	r2, r4
   8d694:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8d698:	a901      	add	r1, sp, #4
   8d69a:	47a0      	blx	r4
   8d69c:	1c43      	adds	r3, r0, #1
   8d69e:	d1f4      	bne.n	8d68a <_wcrtomb_r+0x16>
   8d6a0:	2200      	movs	r2, #0
   8d6a2:	238a      	movs	r3, #138	; 0x8a
   8d6a4:	602a      	str	r2, [r5, #0]
   8d6a6:	6033      	str	r3, [r6, #0]
   8d6a8:	b004      	add	sp, #16
   8d6aa:	bd70      	pop	{r4, r5, r6, pc}
   8d6ac:	20000b4c 	.word	0x20000b4c

0008d6b0 <__ascii_wctomb>:
   8d6b0:	4603      	mov	r3, r0
   8d6b2:	b149      	cbz	r1, 8d6c8 <__ascii_wctomb+0x18>
   8d6b4:	2aff      	cmp	r2, #255	; 0xff
   8d6b6:	d802      	bhi.n	8d6be <__ascii_wctomb+0xe>
   8d6b8:	2001      	movs	r0, #1
   8d6ba:	700a      	strb	r2, [r1, #0]
   8d6bc:	4770      	bx	lr
   8d6be:	228a      	movs	r2, #138	; 0x8a
   8d6c0:	f04f 30ff 	mov.w	r0, #4294967295
   8d6c4:	601a      	str	r2, [r3, #0]
   8d6c6:	4770      	bx	lr
   8d6c8:	4608      	mov	r0, r1
   8d6ca:	4770      	bx	lr

0008d6cc <_write_r>:
   8d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d6ce:	460f      	mov	r7, r1
   8d6d0:	2600      	movs	r6, #0
   8d6d2:	4d08      	ldr	r5, [pc, #32]	; (8d6f4 <_write_r+0x28>)
   8d6d4:	4611      	mov	r1, r2
   8d6d6:	4604      	mov	r4, r0
   8d6d8:	461a      	mov	r2, r3
   8d6da:	4638      	mov	r0, r7
   8d6dc:	602e      	str	r6, [r5, #0]
   8d6de:	f7f7 fc4d 	bl	84f7c <_write>
   8d6e2:	1c43      	adds	r3, r0, #1
   8d6e4:	d000      	beq.n	8d6e8 <_write_r+0x1c>
   8d6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d6e8:	682b      	ldr	r3, [r5, #0]
   8d6ea:	2b00      	cmp	r3, #0
   8d6ec:	d0fb      	beq.n	8d6e6 <_write_r+0x1a>
   8d6ee:	6023      	str	r3, [r4, #0]
   8d6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d6f2:	bf00      	nop
   8d6f4:	20002e30 	.word	0x20002e30

0008d6f8 <__register_exitproc>:
   8d6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d6fc:	f8df a080 	ldr.w	sl, [pc, #128]	; 8d780 <__register_exitproc+0x88>
   8d700:	4606      	mov	r6, r0
   8d702:	f8da 0000 	ldr.w	r0, [sl]
   8d706:	4698      	mov	r8, r3
   8d708:	460f      	mov	r7, r1
   8d70a:	4691      	mov	r9, r2
   8d70c:	f7fe fc82 	bl	8c014 <__retarget_lock_acquire_recursive>
   8d710:	4b1a      	ldr	r3, [pc, #104]	; (8d77c <__register_exitproc+0x84>)
   8d712:	681b      	ldr	r3, [r3, #0]
   8d714:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8d718:	b324      	cbz	r4, 8d764 <__register_exitproc+0x6c>
   8d71a:	6865      	ldr	r5, [r4, #4]
   8d71c:	2d1f      	cmp	r5, #31
   8d71e:	dc26      	bgt.n	8d76e <__register_exitproc+0x76>
   8d720:	b95e      	cbnz	r6, 8d73a <__register_exitproc+0x42>
   8d722:	1c6b      	adds	r3, r5, #1
   8d724:	3502      	adds	r5, #2
   8d726:	f8da 0000 	ldr.w	r0, [sl]
   8d72a:	6063      	str	r3, [r4, #4]
   8d72c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8d730:	f7fe fc72 	bl	8c018 <__retarget_lock_release_recursive>
   8d734:	2000      	movs	r0, #0
   8d736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d73a:	2301      	movs	r3, #1
   8d73c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8d740:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8d744:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8d748:	40ab      	lsls	r3, r5
   8d74a:	431a      	orrs	r2, r3
   8d74c:	2e02      	cmp	r6, #2
   8d74e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8d752:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8d756:	d1e4      	bne.n	8d722 <__register_exitproc+0x2a>
   8d758:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8d75c:	4313      	orrs	r3, r2
   8d75e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8d762:	e7de      	b.n	8d722 <__register_exitproc+0x2a>
   8d764:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8d768:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8d76c:	e7d5      	b.n	8d71a <__register_exitproc+0x22>
   8d76e:	f8da 0000 	ldr.w	r0, [sl]
   8d772:	f7fe fc51 	bl	8c018 <__retarget_lock_release_recursive>
   8d776:	f04f 30ff 	mov.w	r0, #4294967295
   8d77a:	e7dc      	b.n	8d736 <__register_exitproc+0x3e>
   8d77c:	0008e63c 	.word	0x0008e63c
   8d780:	20000b48 	.word	0x20000b48

0008d784 <__assert_func>:
   8d784:	4614      	mov	r4, r2
   8d786:	b500      	push	{lr}
   8d788:	4d09      	ldr	r5, [pc, #36]	; (8d7b0 <__assert_func+0x2c>)
   8d78a:	461a      	mov	r2, r3
   8d78c:	4603      	mov	r3, r0
   8d78e:	6828      	ldr	r0, [r5, #0]
   8d790:	b085      	sub	sp, #20
   8d792:	68c0      	ldr	r0, [r0, #12]
   8d794:	b144      	cbz	r4, 8d7a8 <__assert_func+0x24>
   8d796:	4d07      	ldr	r5, [pc, #28]	; (8d7b4 <__assert_func+0x30>)
   8d798:	9100      	str	r1, [sp, #0]
   8d79a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8d79e:	4906      	ldr	r1, [pc, #24]	; (8d7b8 <__assert_func+0x34>)
   8d7a0:	f000 f8b6 	bl	8d910 <fiprintf>
   8d7a4:	f000 f91c 	bl	8d9e0 <abort>
   8d7a8:	4d04      	ldr	r5, [pc, #16]	; (8d7bc <__assert_func+0x38>)
   8d7aa:	462c      	mov	r4, r5
   8d7ac:	e7f4      	b.n	8d798 <__assert_func+0x14>
   8d7ae:	bf00      	nop
   8d7b0:	20000718 	.word	0x20000718
   8d7b4:	0008e8f4 	.word	0x0008e8f4
   8d7b8:	0008e904 	.word	0x0008e904
   8d7bc:	0008e590 	.word	0x0008e590

0008d7c0 <_calloc_r>:
   8d7c0:	b510      	push	{r4, lr}
   8d7c2:	fb02 f101 	mul.w	r1, r2, r1
   8d7c6:	f7fe fca9 	bl	8c11c <_malloc_r>
   8d7ca:	4604      	mov	r4, r0
   8d7cc:	b168      	cbz	r0, 8d7ea <_calloc_r+0x2a>
   8d7ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8d7d2:	f022 0203 	bic.w	r2, r2, #3
   8d7d6:	3a04      	subs	r2, #4
   8d7d8:	2a24      	cmp	r2, #36	; 0x24
   8d7da:	d818      	bhi.n	8d80e <_calloc_r+0x4e>
   8d7dc:	2a13      	cmp	r2, #19
   8d7de:	d806      	bhi.n	8d7ee <_calloc_r+0x2e>
   8d7e0:	4602      	mov	r2, r0
   8d7e2:	2300      	movs	r3, #0
   8d7e4:	e9c2 3300 	strd	r3, r3, [r2]
   8d7e8:	6093      	str	r3, [r2, #8]
   8d7ea:	4620      	mov	r0, r4
   8d7ec:	bd10      	pop	{r4, pc}
   8d7ee:	2300      	movs	r3, #0
   8d7f0:	2a1b      	cmp	r2, #27
   8d7f2:	e9c0 3300 	strd	r3, r3, [r0]
   8d7f6:	d90f      	bls.n	8d818 <_calloc_r+0x58>
   8d7f8:	2a24      	cmp	r2, #36	; 0x24
   8d7fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8d7fe:	bf0a      	itet	eq
   8d800:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8d804:	f100 0210 	addne.w	r2, r0, #16
   8d808:	f100 0218 	addeq.w	r2, r0, #24
   8d80c:	e7e9      	b.n	8d7e2 <_calloc_r+0x22>
   8d80e:	2100      	movs	r1, #0
   8d810:	f7fa f8c6 	bl	879a0 <memset>
   8d814:	4620      	mov	r0, r4
   8d816:	bd10      	pop	{r4, pc}
   8d818:	f100 0208 	add.w	r2, r0, #8
   8d81c:	e7e1      	b.n	8d7e2 <_calloc_r+0x22>
   8d81e:	bf00      	nop

0008d820 <_close_r>:
   8d820:	2200      	movs	r2, #0
   8d822:	b538      	push	{r3, r4, r5, lr}
   8d824:	4d06      	ldr	r5, [pc, #24]	; (8d840 <_close_r+0x20>)
   8d826:	4604      	mov	r4, r0
   8d828:	4608      	mov	r0, r1
   8d82a:	602a      	str	r2, [r5, #0]
   8d82c:	f7f9 fc76 	bl	8711c <_close>
   8d830:	1c43      	adds	r3, r0, #1
   8d832:	d000      	beq.n	8d836 <_close_r+0x16>
   8d834:	bd38      	pop	{r3, r4, r5, pc}
   8d836:	682b      	ldr	r3, [r5, #0]
   8d838:	2b00      	cmp	r3, #0
   8d83a:	d0fb      	beq.n	8d834 <_close_r+0x14>
   8d83c:	6023      	str	r3, [r4, #0]
   8d83e:	bd38      	pop	{r3, r4, r5, pc}
   8d840:	20002e30 	.word	0x20002e30

0008d844 <_fclose_r>:
   8d844:	b570      	push	{r4, r5, r6, lr}
   8d846:	2900      	cmp	r1, #0
   8d848:	d04b      	beq.n	8d8e2 <_fclose_r+0x9e>
   8d84a:	460c      	mov	r4, r1
   8d84c:	4605      	mov	r5, r0
   8d84e:	b110      	cbz	r0, 8d856 <_fclose_r+0x12>
   8d850:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8d852:	2b00      	cmp	r3, #0
   8d854:	d048      	beq.n	8d8e8 <_fclose_r+0xa4>
   8d856:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d858:	07d8      	lsls	r0, r3, #31
   8d85a:	d534      	bpl.n	8d8c6 <_fclose_r+0x82>
   8d85c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d860:	2b00      	cmp	r3, #0
   8d862:	d03e      	beq.n	8d8e2 <_fclose_r+0x9e>
   8d864:	4621      	mov	r1, r4
   8d866:	4628      	mov	r0, r5
   8d868:	f7fd ff0e 	bl	8b688 <__sflush_r>
   8d86c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8d86e:	4606      	mov	r6, r0
   8d870:	b133      	cbz	r3, 8d880 <_fclose_r+0x3c>
   8d872:	4628      	mov	r0, r5
   8d874:	69e1      	ldr	r1, [r4, #28]
   8d876:	4798      	blx	r3
   8d878:	2800      	cmp	r0, #0
   8d87a:	bfb8      	it	lt
   8d87c:	f04f 36ff 	movlt.w	r6, #4294967295
   8d880:	89a3      	ldrh	r3, [r4, #12]
   8d882:	061a      	lsls	r2, r3, #24
   8d884:	d43b      	bmi.n	8d8fe <_fclose_r+0xba>
   8d886:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8d888:	b141      	cbz	r1, 8d89c <_fclose_r+0x58>
   8d88a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8d88e:	4299      	cmp	r1, r3
   8d890:	d002      	beq.n	8d898 <_fclose_r+0x54>
   8d892:	4628      	mov	r0, r5
   8d894:	f7fe f910 	bl	8bab8 <_free_r>
   8d898:	2300      	movs	r3, #0
   8d89a:	6323      	str	r3, [r4, #48]	; 0x30
   8d89c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8d89e:	b121      	cbz	r1, 8d8aa <_fclose_r+0x66>
   8d8a0:	4628      	mov	r0, r5
   8d8a2:	f7fe f909 	bl	8bab8 <_free_r>
   8d8a6:	2300      	movs	r3, #0
   8d8a8:	6463      	str	r3, [r4, #68]	; 0x44
   8d8aa:	f7fe f80f 	bl	8b8cc <__sfp_lock_acquire>
   8d8ae:	2200      	movs	r2, #0
   8d8b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d8b2:	81a2      	strh	r2, [r4, #12]
   8d8b4:	07db      	lsls	r3, r3, #31
   8d8b6:	d527      	bpl.n	8d908 <_fclose_r+0xc4>
   8d8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d8ba:	f7fe fba9 	bl	8c010 <__retarget_lock_close_recursive>
   8d8be:	f7fe f80b 	bl	8b8d8 <__sfp_lock_release>
   8d8c2:	4630      	mov	r0, r6
   8d8c4:	bd70      	pop	{r4, r5, r6, pc}
   8d8c6:	89a3      	ldrh	r3, [r4, #12]
   8d8c8:	0599      	lsls	r1, r3, #22
   8d8ca:	d4cb      	bmi.n	8d864 <_fclose_r+0x20>
   8d8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d8ce:	f7fe fba1 	bl	8c014 <__retarget_lock_acquire_recursive>
   8d8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d8d6:	2b00      	cmp	r3, #0
   8d8d8:	d1c4      	bne.n	8d864 <_fclose_r+0x20>
   8d8da:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8d8dc:	f016 0601 	ands.w	r6, r6, #1
   8d8e0:	d008      	beq.n	8d8f4 <_fclose_r+0xb0>
   8d8e2:	2600      	movs	r6, #0
   8d8e4:	4630      	mov	r0, r6
   8d8e6:	bd70      	pop	{r4, r5, r6, pc}
   8d8e8:	f7fd ffc2 	bl	8b870 <__sinit>
   8d8ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d8ee:	07d8      	lsls	r0, r3, #31
   8d8f0:	d4b4      	bmi.n	8d85c <_fclose_r+0x18>
   8d8f2:	e7e8      	b.n	8d8c6 <_fclose_r+0x82>
   8d8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d8f6:	f7fe fb8f 	bl	8c018 <__retarget_lock_release_recursive>
   8d8fa:	4630      	mov	r0, r6
   8d8fc:	bd70      	pop	{r4, r5, r6, pc}
   8d8fe:	4628      	mov	r0, r5
   8d900:	6921      	ldr	r1, [r4, #16]
   8d902:	f7fe f8d9 	bl	8bab8 <_free_r>
   8d906:	e7be      	b.n	8d886 <_fclose_r+0x42>
   8d908:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d90a:	f7fe fb85 	bl	8c018 <__retarget_lock_release_recursive>
   8d90e:	e7d3      	b.n	8d8b8 <_fclose_r+0x74>

0008d910 <fiprintf>:
   8d910:	b40e      	push	{r1, r2, r3}
   8d912:	b510      	push	{r4, lr}
   8d914:	b083      	sub	sp, #12
   8d916:	ab05      	add	r3, sp, #20
   8d918:	4c06      	ldr	r4, [pc, #24]	; (8d934 <fiprintf+0x24>)
   8d91a:	f853 2b04 	ldr.w	r2, [r3], #4
   8d91e:	4601      	mov	r1, r0
   8d920:	6820      	ldr	r0, [r4, #0]
   8d922:	9301      	str	r3, [sp, #4]
   8d924:	f7fb ff6a 	bl	897fc <_vfiprintf_r>
   8d928:	b003      	add	sp, #12
   8d92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8d92e:	b003      	add	sp, #12
   8d930:	4770      	bx	lr
   8d932:	bf00      	nop
   8d934:	20000718 	.word	0x20000718

0008d938 <_fstat_r>:
   8d938:	b570      	push	{r4, r5, r6, lr}
   8d93a:	460c      	mov	r4, r1
   8d93c:	4603      	mov	r3, r0
   8d93e:	2600      	movs	r6, #0
   8d940:	4d07      	ldr	r5, [pc, #28]	; (8d960 <_fstat_r+0x28>)
   8d942:	4620      	mov	r0, r4
   8d944:	4611      	mov	r1, r2
   8d946:	461c      	mov	r4, r3
   8d948:	602e      	str	r6, [r5, #0]
   8d94a:	f7f9 fbea 	bl	87122 <_fstat>
   8d94e:	1c43      	adds	r3, r0, #1
   8d950:	d000      	beq.n	8d954 <_fstat_r+0x1c>
   8d952:	bd70      	pop	{r4, r5, r6, pc}
   8d954:	682b      	ldr	r3, [r5, #0]
   8d956:	2b00      	cmp	r3, #0
   8d958:	d0fb      	beq.n	8d952 <_fstat_r+0x1a>
   8d95a:	6023      	str	r3, [r4, #0]
   8d95c:	bd70      	pop	{r4, r5, r6, pc}
   8d95e:	bf00      	nop
   8d960:	20002e30 	.word	0x20002e30

0008d964 <_isatty_r>:
   8d964:	2200      	movs	r2, #0
   8d966:	b538      	push	{r3, r4, r5, lr}
   8d968:	4d06      	ldr	r5, [pc, #24]	; (8d984 <_isatty_r+0x20>)
   8d96a:	4604      	mov	r4, r0
   8d96c:	4608      	mov	r0, r1
   8d96e:	602a      	str	r2, [r5, #0]
   8d970:	f7f9 fbdc 	bl	8712c <_isatty>
   8d974:	1c43      	adds	r3, r0, #1
   8d976:	d000      	beq.n	8d97a <_isatty_r+0x16>
   8d978:	bd38      	pop	{r3, r4, r5, pc}
   8d97a:	682b      	ldr	r3, [r5, #0]
   8d97c:	2b00      	cmp	r3, #0
   8d97e:	d0fb      	beq.n	8d978 <_isatty_r+0x14>
   8d980:	6023      	str	r3, [r4, #0]
   8d982:	bd38      	pop	{r3, r4, r5, pc}
   8d984:	20002e30 	.word	0x20002e30

0008d988 <_lseek_r>:
   8d988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d98a:	460f      	mov	r7, r1
   8d98c:	2600      	movs	r6, #0
   8d98e:	4d08      	ldr	r5, [pc, #32]	; (8d9b0 <_lseek_r+0x28>)
   8d990:	4611      	mov	r1, r2
   8d992:	4604      	mov	r4, r0
   8d994:	461a      	mov	r2, r3
   8d996:	4638      	mov	r0, r7
   8d998:	602e      	str	r6, [r5, #0]
   8d99a:	f7f9 fbc9 	bl	87130 <_lseek>
   8d99e:	1c43      	adds	r3, r0, #1
   8d9a0:	d000      	beq.n	8d9a4 <_lseek_r+0x1c>
   8d9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9a4:	682b      	ldr	r3, [r5, #0]
   8d9a6:	2b00      	cmp	r3, #0
   8d9a8:	d0fb      	beq.n	8d9a2 <_lseek_r+0x1a>
   8d9aa:	6023      	str	r3, [r4, #0]
   8d9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9ae:	bf00      	nop
   8d9b0:	20002e30 	.word	0x20002e30

0008d9b4 <_read_r>:
   8d9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d9b6:	460f      	mov	r7, r1
   8d9b8:	2600      	movs	r6, #0
   8d9ba:	4d08      	ldr	r5, [pc, #32]	; (8d9dc <_read_r+0x28>)
   8d9bc:	4611      	mov	r1, r2
   8d9be:	4604      	mov	r4, r0
   8d9c0:	461a      	mov	r2, r3
   8d9c2:	4638      	mov	r0, r7
   8d9c4:	602e      	str	r6, [r5, #0]
   8d9c6:	f7f7 fabb 	bl	84f40 <_read>
   8d9ca:	1c43      	adds	r3, r0, #1
   8d9cc:	d000      	beq.n	8d9d0 <_read_r+0x1c>
   8d9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9d0:	682b      	ldr	r3, [r5, #0]
   8d9d2:	2b00      	cmp	r3, #0
   8d9d4:	d0fb      	beq.n	8d9ce <_read_r+0x1a>
   8d9d6:	6023      	str	r3, [r4, #0]
   8d9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9da:	bf00      	nop
   8d9dc:	20002e30 	.word	0x20002e30

0008d9e0 <abort>:
   8d9e0:	2006      	movs	r0, #6
   8d9e2:	b508      	push	{r3, lr}
   8d9e4:	f000 f830 	bl	8da48 <raise>
   8d9e8:	2001      	movs	r0, #1
   8d9ea:	f7f9 fba3 	bl	87134 <_exit>
   8d9ee:	bf00      	nop

0008d9f0 <_raise_r>:
   8d9f0:	291f      	cmp	r1, #31
   8d9f2:	b538      	push	{r3, r4, r5, lr}
   8d9f4:	4605      	mov	r5, r0
   8d9f6:	d821      	bhi.n	8da3c <_raise_r+0x4c>
   8d9f8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8d9fc:	460c      	mov	r4, r1
   8d9fe:	b16a      	cbz	r2, 8da1c <_raise_r+0x2c>
   8da00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8da04:	b153      	cbz	r3, 8da1c <_raise_r+0x2c>
   8da06:	2b01      	cmp	r3, #1
   8da08:	d016      	beq.n	8da38 <_raise_r+0x48>
   8da0a:	1c59      	adds	r1, r3, #1
   8da0c:	d010      	beq.n	8da30 <_raise_r+0x40>
   8da0e:	2500      	movs	r5, #0
   8da10:	4620      	mov	r0, r4
   8da12:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8da16:	4798      	blx	r3
   8da18:	4628      	mov	r0, r5
   8da1a:	bd38      	pop	{r3, r4, r5, pc}
   8da1c:	4628      	mov	r0, r5
   8da1e:	f000 f831 	bl	8da84 <_getpid_r>
   8da22:	4622      	mov	r2, r4
   8da24:	4601      	mov	r1, r0
   8da26:	4628      	mov	r0, r5
   8da28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8da2c:	f000 b814 	b.w	8da58 <_kill_r>
   8da30:	2316      	movs	r3, #22
   8da32:	2001      	movs	r0, #1
   8da34:	602b      	str	r3, [r5, #0]
   8da36:	bd38      	pop	{r3, r4, r5, pc}
   8da38:	2000      	movs	r0, #0
   8da3a:	bd38      	pop	{r3, r4, r5, pc}
   8da3c:	2316      	movs	r3, #22
   8da3e:	f04f 30ff 	mov.w	r0, #4294967295
   8da42:	602b      	str	r3, [r5, #0]
   8da44:	bd38      	pop	{r3, r4, r5, pc}
   8da46:	bf00      	nop

0008da48 <raise>:
   8da48:	4b02      	ldr	r3, [pc, #8]	; (8da54 <raise+0xc>)
   8da4a:	4601      	mov	r1, r0
   8da4c:	6818      	ldr	r0, [r3, #0]
   8da4e:	f7ff bfcf 	b.w	8d9f0 <_raise_r>
   8da52:	bf00      	nop
   8da54:	20000718 	.word	0x20000718

0008da58 <_kill_r>:
   8da58:	b570      	push	{r4, r5, r6, lr}
   8da5a:	460c      	mov	r4, r1
   8da5c:	4603      	mov	r3, r0
   8da5e:	2600      	movs	r6, #0
   8da60:	4d07      	ldr	r5, [pc, #28]	; (8da80 <_kill_r+0x28>)
   8da62:	4620      	mov	r0, r4
   8da64:	4611      	mov	r1, r2
   8da66:	461c      	mov	r4, r3
   8da68:	602e      	str	r6, [r5, #0]
   8da6a:	f7f9 fb6d 	bl	87148 <_kill>
   8da6e:	1c43      	adds	r3, r0, #1
   8da70:	d000      	beq.n	8da74 <_kill_r+0x1c>
   8da72:	bd70      	pop	{r4, r5, r6, pc}
   8da74:	682b      	ldr	r3, [r5, #0]
   8da76:	2b00      	cmp	r3, #0
   8da78:	d0fb      	beq.n	8da72 <_kill_r+0x1a>
   8da7a:	6023      	str	r3, [r4, #0]
   8da7c:	bd70      	pop	{r4, r5, r6, pc}
   8da7e:	bf00      	nop
   8da80:	20002e30 	.word	0x20002e30

0008da84 <_getpid_r>:
   8da84:	f7f9 bb61 	b.w	8714a <_getpid>

0008da88 <__aeabi_drsub>:
   8da88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8da8c:	e002      	b.n	8da94 <__adddf3>
   8da8e:	bf00      	nop

0008da90 <__aeabi_dsub>:
   8da90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008da94 <__adddf3>:
   8da94:	b530      	push	{r4, r5, lr}
   8da96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8da9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8da9e:	ea94 0f05 	teq	r4, r5
   8daa2:	bf08      	it	eq
   8daa4:	ea90 0f02 	teqeq	r0, r2
   8daa8:	bf1f      	itttt	ne
   8daaa:	ea54 0c00 	orrsne.w	ip, r4, r0
   8daae:	ea55 0c02 	orrsne.w	ip, r5, r2
   8dab2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8dab6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8daba:	f000 80e2 	beq.w	8dc82 <__adddf3+0x1ee>
   8dabe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8dac2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8dac6:	bfb8      	it	lt
   8dac8:	426d      	neglt	r5, r5
   8daca:	dd0c      	ble.n	8dae6 <__adddf3+0x52>
   8dacc:	442c      	add	r4, r5
   8dace:	ea80 0202 	eor.w	r2, r0, r2
   8dad2:	ea81 0303 	eor.w	r3, r1, r3
   8dad6:	ea82 0000 	eor.w	r0, r2, r0
   8dada:	ea83 0101 	eor.w	r1, r3, r1
   8dade:	ea80 0202 	eor.w	r2, r0, r2
   8dae2:	ea81 0303 	eor.w	r3, r1, r3
   8dae6:	2d36      	cmp	r5, #54	; 0x36
   8dae8:	bf88      	it	hi
   8daea:	bd30      	pophi	{r4, r5, pc}
   8daec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8daf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8daf4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8daf8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8dafc:	d002      	beq.n	8db04 <__adddf3+0x70>
   8dafe:	4240      	negs	r0, r0
   8db00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8db04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8db08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8db0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8db10:	d002      	beq.n	8db18 <__adddf3+0x84>
   8db12:	4252      	negs	r2, r2
   8db14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8db18:	ea94 0f05 	teq	r4, r5
   8db1c:	f000 80a7 	beq.w	8dc6e <__adddf3+0x1da>
   8db20:	f1a4 0401 	sub.w	r4, r4, #1
   8db24:	f1d5 0e20 	rsbs	lr, r5, #32
   8db28:	db0d      	blt.n	8db46 <__adddf3+0xb2>
   8db2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8db2e:	fa22 f205 	lsr.w	r2, r2, r5
   8db32:	1880      	adds	r0, r0, r2
   8db34:	f141 0100 	adc.w	r1, r1, #0
   8db38:	fa03 f20e 	lsl.w	r2, r3, lr
   8db3c:	1880      	adds	r0, r0, r2
   8db3e:	fa43 f305 	asr.w	r3, r3, r5
   8db42:	4159      	adcs	r1, r3
   8db44:	e00e      	b.n	8db64 <__adddf3+0xd0>
   8db46:	f1a5 0520 	sub.w	r5, r5, #32
   8db4a:	f10e 0e20 	add.w	lr, lr, #32
   8db4e:	2a01      	cmp	r2, #1
   8db50:	fa03 fc0e 	lsl.w	ip, r3, lr
   8db54:	bf28      	it	cs
   8db56:	f04c 0c02 	orrcs.w	ip, ip, #2
   8db5a:	fa43 f305 	asr.w	r3, r3, r5
   8db5e:	18c0      	adds	r0, r0, r3
   8db60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8db64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8db68:	d507      	bpl.n	8db7a <__adddf3+0xe6>
   8db6a:	f04f 0e00 	mov.w	lr, #0
   8db6e:	f1dc 0c00 	rsbs	ip, ip, #0
   8db72:	eb7e 0000 	sbcs.w	r0, lr, r0
   8db76:	eb6e 0101 	sbc.w	r1, lr, r1
   8db7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8db7e:	d31b      	bcc.n	8dbb8 <__adddf3+0x124>
   8db80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8db84:	d30c      	bcc.n	8dba0 <__adddf3+0x10c>
   8db86:	0849      	lsrs	r1, r1, #1
   8db88:	ea5f 0030 	movs.w	r0, r0, rrx
   8db8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8db90:	f104 0401 	add.w	r4, r4, #1
   8db94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8db98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8db9c:	f080 809a 	bcs.w	8dcd4 <__adddf3+0x240>
   8dba0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8dba4:	bf08      	it	eq
   8dba6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8dbaa:	f150 0000 	adcs.w	r0, r0, #0
   8dbae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8dbb2:	ea41 0105 	orr.w	r1, r1, r5
   8dbb6:	bd30      	pop	{r4, r5, pc}
   8dbb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8dbbc:	4140      	adcs	r0, r0
   8dbbe:	eb41 0101 	adc.w	r1, r1, r1
   8dbc2:	3c01      	subs	r4, #1
   8dbc4:	bf28      	it	cs
   8dbc6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8dbca:	d2e9      	bcs.n	8dba0 <__adddf3+0x10c>
   8dbcc:	f091 0f00 	teq	r1, #0
   8dbd0:	bf04      	itt	eq
   8dbd2:	4601      	moveq	r1, r0
   8dbd4:	2000      	moveq	r0, #0
   8dbd6:	fab1 f381 	clz	r3, r1
   8dbda:	bf08      	it	eq
   8dbdc:	3320      	addeq	r3, #32
   8dbde:	f1a3 030b 	sub.w	r3, r3, #11
   8dbe2:	f1b3 0220 	subs.w	r2, r3, #32
   8dbe6:	da0c      	bge.n	8dc02 <__adddf3+0x16e>
   8dbe8:	320c      	adds	r2, #12
   8dbea:	dd08      	ble.n	8dbfe <__adddf3+0x16a>
   8dbec:	f102 0c14 	add.w	ip, r2, #20
   8dbf0:	f1c2 020c 	rsb	r2, r2, #12
   8dbf4:	fa01 f00c 	lsl.w	r0, r1, ip
   8dbf8:	fa21 f102 	lsr.w	r1, r1, r2
   8dbfc:	e00c      	b.n	8dc18 <__adddf3+0x184>
   8dbfe:	f102 0214 	add.w	r2, r2, #20
   8dc02:	bfd8      	it	le
   8dc04:	f1c2 0c20 	rsble	ip, r2, #32
   8dc08:	fa01 f102 	lsl.w	r1, r1, r2
   8dc0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8dc10:	bfdc      	itt	le
   8dc12:	ea41 010c 	orrle.w	r1, r1, ip
   8dc16:	4090      	lslle	r0, r2
   8dc18:	1ae4      	subs	r4, r4, r3
   8dc1a:	bfa2      	ittt	ge
   8dc1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8dc20:	4329      	orrge	r1, r5
   8dc22:	bd30      	popge	{r4, r5, pc}
   8dc24:	ea6f 0404 	mvn.w	r4, r4
   8dc28:	3c1f      	subs	r4, #31
   8dc2a:	da1c      	bge.n	8dc66 <__adddf3+0x1d2>
   8dc2c:	340c      	adds	r4, #12
   8dc2e:	dc0e      	bgt.n	8dc4e <__adddf3+0x1ba>
   8dc30:	f104 0414 	add.w	r4, r4, #20
   8dc34:	f1c4 0220 	rsb	r2, r4, #32
   8dc38:	fa20 f004 	lsr.w	r0, r0, r4
   8dc3c:	fa01 f302 	lsl.w	r3, r1, r2
   8dc40:	ea40 0003 	orr.w	r0, r0, r3
   8dc44:	fa21 f304 	lsr.w	r3, r1, r4
   8dc48:	ea45 0103 	orr.w	r1, r5, r3
   8dc4c:	bd30      	pop	{r4, r5, pc}
   8dc4e:	f1c4 040c 	rsb	r4, r4, #12
   8dc52:	f1c4 0220 	rsb	r2, r4, #32
   8dc56:	fa20 f002 	lsr.w	r0, r0, r2
   8dc5a:	fa01 f304 	lsl.w	r3, r1, r4
   8dc5e:	ea40 0003 	orr.w	r0, r0, r3
   8dc62:	4629      	mov	r1, r5
   8dc64:	bd30      	pop	{r4, r5, pc}
   8dc66:	fa21 f004 	lsr.w	r0, r1, r4
   8dc6a:	4629      	mov	r1, r5
   8dc6c:	bd30      	pop	{r4, r5, pc}
   8dc6e:	f094 0f00 	teq	r4, #0
   8dc72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8dc76:	bf06      	itte	eq
   8dc78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8dc7c:	3401      	addeq	r4, #1
   8dc7e:	3d01      	subne	r5, #1
   8dc80:	e74e      	b.n	8db20 <__adddf3+0x8c>
   8dc82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8dc86:	bf18      	it	ne
   8dc88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8dc8c:	d029      	beq.n	8dce2 <__adddf3+0x24e>
   8dc8e:	ea94 0f05 	teq	r4, r5
   8dc92:	bf08      	it	eq
   8dc94:	ea90 0f02 	teqeq	r0, r2
   8dc98:	d005      	beq.n	8dca6 <__adddf3+0x212>
   8dc9a:	ea54 0c00 	orrs.w	ip, r4, r0
   8dc9e:	bf04      	itt	eq
   8dca0:	4619      	moveq	r1, r3
   8dca2:	4610      	moveq	r0, r2
   8dca4:	bd30      	pop	{r4, r5, pc}
   8dca6:	ea91 0f03 	teq	r1, r3
   8dcaa:	bf1e      	ittt	ne
   8dcac:	2100      	movne	r1, #0
   8dcae:	2000      	movne	r0, #0
   8dcb0:	bd30      	popne	{r4, r5, pc}
   8dcb2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8dcb6:	d105      	bne.n	8dcc4 <__adddf3+0x230>
   8dcb8:	0040      	lsls	r0, r0, #1
   8dcba:	4149      	adcs	r1, r1
   8dcbc:	bf28      	it	cs
   8dcbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8dcc2:	bd30      	pop	{r4, r5, pc}
   8dcc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8dcc8:	bf3c      	itt	cc
   8dcca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8dcce:	bd30      	popcc	{r4, r5, pc}
   8dcd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8dcd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8dcd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8dcdc:	f04f 0000 	mov.w	r0, #0
   8dce0:	bd30      	pop	{r4, r5, pc}
   8dce2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8dce6:	bf1a      	itte	ne
   8dce8:	4619      	movne	r1, r3
   8dcea:	4610      	movne	r0, r2
   8dcec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8dcf0:	bf1c      	itt	ne
   8dcf2:	460b      	movne	r3, r1
   8dcf4:	4602      	movne	r2, r0
   8dcf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8dcfa:	bf06      	itte	eq
   8dcfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8dd00:	ea91 0f03 	teqeq	r1, r3
   8dd04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8dd08:	bd30      	pop	{r4, r5, pc}
   8dd0a:	bf00      	nop

0008dd0c <__aeabi_ui2d>:
   8dd0c:	f090 0f00 	teq	r0, #0
   8dd10:	bf04      	itt	eq
   8dd12:	2100      	moveq	r1, #0
   8dd14:	4770      	bxeq	lr
   8dd16:	b530      	push	{r4, r5, lr}
   8dd18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dd1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8dd20:	f04f 0500 	mov.w	r5, #0
   8dd24:	f04f 0100 	mov.w	r1, #0
   8dd28:	e750      	b.n	8dbcc <__adddf3+0x138>
   8dd2a:	bf00      	nop

0008dd2c <__aeabi_i2d>:
   8dd2c:	f090 0f00 	teq	r0, #0
   8dd30:	bf04      	itt	eq
   8dd32:	2100      	moveq	r1, #0
   8dd34:	4770      	bxeq	lr
   8dd36:	b530      	push	{r4, r5, lr}
   8dd38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dd3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8dd40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8dd44:	bf48      	it	mi
   8dd46:	4240      	negmi	r0, r0
   8dd48:	f04f 0100 	mov.w	r1, #0
   8dd4c:	e73e      	b.n	8dbcc <__adddf3+0x138>
   8dd4e:	bf00      	nop

0008dd50 <__aeabi_f2d>:
   8dd50:	0042      	lsls	r2, r0, #1
   8dd52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8dd56:	ea4f 0131 	mov.w	r1, r1, rrx
   8dd5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8dd5e:	bf1f      	itttt	ne
   8dd60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8dd64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8dd68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8dd6c:	4770      	bxne	lr
   8dd6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8dd72:	bf08      	it	eq
   8dd74:	4770      	bxeq	lr
   8dd76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8dd7a:	bf04      	itt	eq
   8dd7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8dd80:	4770      	bxeq	lr
   8dd82:	b530      	push	{r4, r5, lr}
   8dd84:	f44f 7460 	mov.w	r4, #896	; 0x380
   8dd88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8dd8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8dd90:	e71c      	b.n	8dbcc <__adddf3+0x138>
   8dd92:	bf00      	nop

0008dd94 <__aeabi_ul2d>:
   8dd94:	ea50 0201 	orrs.w	r2, r0, r1
   8dd98:	bf08      	it	eq
   8dd9a:	4770      	bxeq	lr
   8dd9c:	b530      	push	{r4, r5, lr}
   8dd9e:	f04f 0500 	mov.w	r5, #0
   8dda2:	e00a      	b.n	8ddba <__aeabi_l2d+0x16>

0008dda4 <__aeabi_l2d>:
   8dda4:	ea50 0201 	orrs.w	r2, r0, r1
   8dda8:	bf08      	it	eq
   8ddaa:	4770      	bxeq	lr
   8ddac:	b530      	push	{r4, r5, lr}
   8ddae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8ddb2:	d502      	bpl.n	8ddba <__aeabi_l2d+0x16>
   8ddb4:	4240      	negs	r0, r0
   8ddb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8ddba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ddbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ddc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8ddc6:	f43f aed8 	beq.w	8db7a <__adddf3+0xe6>
   8ddca:	f04f 0203 	mov.w	r2, #3
   8ddce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ddd2:	bf18      	it	ne
   8ddd4:	3203      	addne	r2, #3
   8ddd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ddda:	bf18      	it	ne
   8dddc:	3203      	addne	r2, #3
   8ddde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8dde2:	f1c2 0320 	rsb	r3, r2, #32
   8dde6:	fa00 fc03 	lsl.w	ip, r0, r3
   8ddea:	fa20 f002 	lsr.w	r0, r0, r2
   8ddee:	fa01 fe03 	lsl.w	lr, r1, r3
   8ddf2:	ea40 000e 	orr.w	r0, r0, lr
   8ddf6:	fa21 f102 	lsr.w	r1, r1, r2
   8ddfa:	4414      	add	r4, r2
   8ddfc:	e6bd      	b.n	8db7a <__adddf3+0xe6>
   8ddfe:	bf00      	nop

0008de00 <__aeabi_dmul>:
   8de00:	b570      	push	{r4, r5, r6, lr}
   8de02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8de06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8de0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8de0e:	bf1d      	ittte	ne
   8de10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8de14:	ea94 0f0c 	teqne	r4, ip
   8de18:	ea95 0f0c 	teqne	r5, ip
   8de1c:	f000 f8de 	bleq	8dfdc <__aeabi_dmul+0x1dc>
   8de20:	442c      	add	r4, r5
   8de22:	ea81 0603 	eor.w	r6, r1, r3
   8de26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8de2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8de2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8de32:	bf18      	it	ne
   8de34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8de38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8de3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8de40:	d038      	beq.n	8deb4 <__aeabi_dmul+0xb4>
   8de42:	fba0 ce02 	umull	ip, lr, r0, r2
   8de46:	f04f 0500 	mov.w	r5, #0
   8de4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8de4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8de52:	fbe0 e503 	umlal	lr, r5, r0, r3
   8de56:	f04f 0600 	mov.w	r6, #0
   8de5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8de5e:	f09c 0f00 	teq	ip, #0
   8de62:	bf18      	it	ne
   8de64:	f04e 0e01 	orrne.w	lr, lr, #1
   8de68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8de6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8de70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8de74:	d204      	bcs.n	8de80 <__aeabi_dmul+0x80>
   8de76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8de7a:	416d      	adcs	r5, r5
   8de7c:	eb46 0606 	adc.w	r6, r6, r6
   8de80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8de84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8de88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8de8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8de90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8de94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8de98:	bf88      	it	hi
   8de9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8de9e:	d81e      	bhi.n	8dede <__aeabi_dmul+0xde>
   8dea0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8dea4:	bf08      	it	eq
   8dea6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8deaa:	f150 0000 	adcs.w	r0, r0, #0
   8deae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8deb2:	bd70      	pop	{r4, r5, r6, pc}
   8deb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8deb8:	ea46 0101 	orr.w	r1, r6, r1
   8debc:	ea40 0002 	orr.w	r0, r0, r2
   8dec0:	ea81 0103 	eor.w	r1, r1, r3
   8dec4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8dec8:	bfc2      	ittt	gt
   8deca:	ebd4 050c 	rsbsgt	r5, r4, ip
   8dece:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8ded2:	bd70      	popgt	{r4, r5, r6, pc}
   8ded4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8ded8:	f04f 0e00 	mov.w	lr, #0
   8dedc:	3c01      	subs	r4, #1
   8dede:	f300 80ab 	bgt.w	8e038 <__aeabi_dmul+0x238>
   8dee2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8dee6:	bfde      	ittt	le
   8dee8:	2000      	movle	r0, #0
   8deea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8deee:	bd70      	pople	{r4, r5, r6, pc}
   8def0:	f1c4 0400 	rsb	r4, r4, #0
   8def4:	3c20      	subs	r4, #32
   8def6:	da35      	bge.n	8df64 <__aeabi_dmul+0x164>
   8def8:	340c      	adds	r4, #12
   8defa:	dc1b      	bgt.n	8df34 <__aeabi_dmul+0x134>
   8defc:	f104 0414 	add.w	r4, r4, #20
   8df00:	f1c4 0520 	rsb	r5, r4, #32
   8df04:	fa00 f305 	lsl.w	r3, r0, r5
   8df08:	fa20 f004 	lsr.w	r0, r0, r4
   8df0c:	fa01 f205 	lsl.w	r2, r1, r5
   8df10:	ea40 0002 	orr.w	r0, r0, r2
   8df14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8df18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8df1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8df20:	fa21 f604 	lsr.w	r6, r1, r4
   8df24:	eb42 0106 	adc.w	r1, r2, r6
   8df28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8df2c:	bf08      	it	eq
   8df2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8df32:	bd70      	pop	{r4, r5, r6, pc}
   8df34:	f1c4 040c 	rsb	r4, r4, #12
   8df38:	f1c4 0520 	rsb	r5, r4, #32
   8df3c:	fa00 f304 	lsl.w	r3, r0, r4
   8df40:	fa20 f005 	lsr.w	r0, r0, r5
   8df44:	fa01 f204 	lsl.w	r2, r1, r4
   8df48:	ea40 0002 	orr.w	r0, r0, r2
   8df4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8df50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8df54:	f141 0100 	adc.w	r1, r1, #0
   8df58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8df5c:	bf08      	it	eq
   8df5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8df62:	bd70      	pop	{r4, r5, r6, pc}
   8df64:	f1c4 0520 	rsb	r5, r4, #32
   8df68:	fa00 f205 	lsl.w	r2, r0, r5
   8df6c:	ea4e 0e02 	orr.w	lr, lr, r2
   8df70:	fa20 f304 	lsr.w	r3, r0, r4
   8df74:	fa01 f205 	lsl.w	r2, r1, r5
   8df78:	ea43 0302 	orr.w	r3, r3, r2
   8df7c:	fa21 f004 	lsr.w	r0, r1, r4
   8df80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8df84:	fa21 f204 	lsr.w	r2, r1, r4
   8df88:	ea20 0002 	bic.w	r0, r0, r2
   8df8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8df90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8df94:	bf08      	it	eq
   8df96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8df9a:	bd70      	pop	{r4, r5, r6, pc}
   8df9c:	f094 0f00 	teq	r4, #0
   8dfa0:	d10f      	bne.n	8dfc2 <__aeabi_dmul+0x1c2>
   8dfa2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8dfa6:	0040      	lsls	r0, r0, #1
   8dfa8:	eb41 0101 	adc.w	r1, r1, r1
   8dfac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8dfb0:	bf08      	it	eq
   8dfb2:	3c01      	subeq	r4, #1
   8dfb4:	d0f7      	beq.n	8dfa6 <__aeabi_dmul+0x1a6>
   8dfb6:	ea41 0106 	orr.w	r1, r1, r6
   8dfba:	f095 0f00 	teq	r5, #0
   8dfbe:	bf18      	it	ne
   8dfc0:	4770      	bxne	lr
   8dfc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8dfc6:	0052      	lsls	r2, r2, #1
   8dfc8:	eb43 0303 	adc.w	r3, r3, r3
   8dfcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8dfd0:	bf08      	it	eq
   8dfd2:	3d01      	subeq	r5, #1
   8dfd4:	d0f7      	beq.n	8dfc6 <__aeabi_dmul+0x1c6>
   8dfd6:	ea43 0306 	orr.w	r3, r3, r6
   8dfda:	4770      	bx	lr
   8dfdc:	ea94 0f0c 	teq	r4, ip
   8dfe0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8dfe4:	bf18      	it	ne
   8dfe6:	ea95 0f0c 	teqne	r5, ip
   8dfea:	d00c      	beq.n	8e006 <__aeabi_dmul+0x206>
   8dfec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8dff0:	bf18      	it	ne
   8dff2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8dff6:	d1d1      	bne.n	8df9c <__aeabi_dmul+0x19c>
   8dff8:	ea81 0103 	eor.w	r1, r1, r3
   8dffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e000:	f04f 0000 	mov.w	r0, #0
   8e004:	bd70      	pop	{r4, r5, r6, pc}
   8e006:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e00a:	bf06      	itte	eq
   8e00c:	4610      	moveq	r0, r2
   8e00e:	4619      	moveq	r1, r3
   8e010:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e014:	d019      	beq.n	8e04a <__aeabi_dmul+0x24a>
   8e016:	ea94 0f0c 	teq	r4, ip
   8e01a:	d102      	bne.n	8e022 <__aeabi_dmul+0x222>
   8e01c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8e020:	d113      	bne.n	8e04a <__aeabi_dmul+0x24a>
   8e022:	ea95 0f0c 	teq	r5, ip
   8e026:	d105      	bne.n	8e034 <__aeabi_dmul+0x234>
   8e028:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8e02c:	bf1c      	itt	ne
   8e02e:	4610      	movne	r0, r2
   8e030:	4619      	movne	r1, r3
   8e032:	d10a      	bne.n	8e04a <__aeabi_dmul+0x24a>
   8e034:	ea81 0103 	eor.w	r1, r1, r3
   8e038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e03c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8e040:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8e044:	f04f 0000 	mov.w	r0, #0
   8e048:	bd70      	pop	{r4, r5, r6, pc}
   8e04a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8e04e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8e052:	bd70      	pop	{r4, r5, r6, pc}

0008e054 <__aeabi_ddiv>:
   8e054:	b570      	push	{r4, r5, r6, lr}
   8e056:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8e05a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8e05e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8e062:	bf1d      	ittte	ne
   8e064:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8e068:	ea94 0f0c 	teqne	r4, ip
   8e06c:	ea95 0f0c 	teqne	r5, ip
   8e070:	f000 f8a7 	bleq	8e1c2 <__aeabi_ddiv+0x16e>
   8e074:	eba4 0405 	sub.w	r4, r4, r5
   8e078:	ea81 0e03 	eor.w	lr, r1, r3
   8e07c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e080:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8e084:	f000 8088 	beq.w	8e198 <__aeabi_ddiv+0x144>
   8e088:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8e08c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8e090:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8e094:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8e098:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8e09c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8e0a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8e0a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8e0a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8e0ac:	429d      	cmp	r5, r3
   8e0ae:	bf08      	it	eq
   8e0b0:	4296      	cmpeq	r6, r2
   8e0b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8e0b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8e0ba:	d202      	bcs.n	8e0c2 <__aeabi_ddiv+0x6e>
   8e0bc:	085b      	lsrs	r3, r3, #1
   8e0be:	ea4f 0232 	mov.w	r2, r2, rrx
   8e0c2:	1ab6      	subs	r6, r6, r2
   8e0c4:	eb65 0503 	sbc.w	r5, r5, r3
   8e0c8:	085b      	lsrs	r3, r3, #1
   8e0ca:	ea4f 0232 	mov.w	r2, r2, rrx
   8e0ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8e0d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8e0d6:	ebb6 0e02 	subs.w	lr, r6, r2
   8e0da:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e0de:	bf22      	ittt	cs
   8e0e0:	1ab6      	subcs	r6, r6, r2
   8e0e2:	4675      	movcs	r5, lr
   8e0e4:	ea40 000c 	orrcs.w	r0, r0, ip
   8e0e8:	085b      	lsrs	r3, r3, #1
   8e0ea:	ea4f 0232 	mov.w	r2, r2, rrx
   8e0ee:	ebb6 0e02 	subs.w	lr, r6, r2
   8e0f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e0f6:	bf22      	ittt	cs
   8e0f8:	1ab6      	subcs	r6, r6, r2
   8e0fa:	4675      	movcs	r5, lr
   8e0fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8e100:	085b      	lsrs	r3, r3, #1
   8e102:	ea4f 0232 	mov.w	r2, r2, rrx
   8e106:	ebb6 0e02 	subs.w	lr, r6, r2
   8e10a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e10e:	bf22      	ittt	cs
   8e110:	1ab6      	subcs	r6, r6, r2
   8e112:	4675      	movcs	r5, lr
   8e114:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8e118:	085b      	lsrs	r3, r3, #1
   8e11a:	ea4f 0232 	mov.w	r2, r2, rrx
   8e11e:	ebb6 0e02 	subs.w	lr, r6, r2
   8e122:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e126:	bf22      	ittt	cs
   8e128:	1ab6      	subcs	r6, r6, r2
   8e12a:	4675      	movcs	r5, lr
   8e12c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8e130:	ea55 0e06 	orrs.w	lr, r5, r6
   8e134:	d018      	beq.n	8e168 <__aeabi_ddiv+0x114>
   8e136:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8e13a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8e13e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8e142:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8e146:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8e14a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8e14e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8e152:	d1c0      	bne.n	8e0d6 <__aeabi_ddiv+0x82>
   8e154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e158:	d10b      	bne.n	8e172 <__aeabi_ddiv+0x11e>
   8e15a:	ea41 0100 	orr.w	r1, r1, r0
   8e15e:	f04f 0000 	mov.w	r0, #0
   8e162:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8e166:	e7b6      	b.n	8e0d6 <__aeabi_ddiv+0x82>
   8e168:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e16c:	bf04      	itt	eq
   8e16e:	4301      	orreq	r1, r0
   8e170:	2000      	moveq	r0, #0
   8e172:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8e176:	bf88      	it	hi
   8e178:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8e17c:	f63f aeaf 	bhi.w	8dede <__aeabi_dmul+0xde>
   8e180:	ebb5 0c03 	subs.w	ip, r5, r3
   8e184:	bf04      	itt	eq
   8e186:	ebb6 0c02 	subseq.w	ip, r6, r2
   8e18a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8e18e:	f150 0000 	adcs.w	r0, r0, #0
   8e192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8e196:	bd70      	pop	{r4, r5, r6, pc}
   8e198:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8e19c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8e1a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8e1a4:	bfc2      	ittt	gt
   8e1a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8e1aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8e1ae:	bd70      	popgt	{r4, r5, r6, pc}
   8e1b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8e1b4:	f04f 0e00 	mov.w	lr, #0
   8e1b8:	3c01      	subs	r4, #1
   8e1ba:	e690      	b.n	8dede <__aeabi_dmul+0xde>
   8e1bc:	ea45 0e06 	orr.w	lr, r5, r6
   8e1c0:	e68d      	b.n	8dede <__aeabi_dmul+0xde>
   8e1c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8e1c6:	ea94 0f0c 	teq	r4, ip
   8e1ca:	bf08      	it	eq
   8e1cc:	ea95 0f0c 	teqeq	r5, ip
   8e1d0:	f43f af3b 	beq.w	8e04a <__aeabi_dmul+0x24a>
   8e1d4:	ea94 0f0c 	teq	r4, ip
   8e1d8:	d10a      	bne.n	8e1f0 <__aeabi_ddiv+0x19c>
   8e1da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8e1de:	f47f af34 	bne.w	8e04a <__aeabi_dmul+0x24a>
   8e1e2:	ea95 0f0c 	teq	r5, ip
   8e1e6:	f47f af25 	bne.w	8e034 <__aeabi_dmul+0x234>
   8e1ea:	4610      	mov	r0, r2
   8e1ec:	4619      	mov	r1, r3
   8e1ee:	e72c      	b.n	8e04a <__aeabi_dmul+0x24a>
   8e1f0:	ea95 0f0c 	teq	r5, ip
   8e1f4:	d106      	bne.n	8e204 <__aeabi_ddiv+0x1b0>
   8e1f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e1fa:	f43f aefd 	beq.w	8dff8 <__aeabi_dmul+0x1f8>
   8e1fe:	4610      	mov	r0, r2
   8e200:	4619      	mov	r1, r3
   8e202:	e722      	b.n	8e04a <__aeabi_dmul+0x24a>
   8e204:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e208:	bf18      	it	ne
   8e20a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e20e:	f47f aec5 	bne.w	8df9c <__aeabi_dmul+0x19c>
   8e212:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8e216:	f47f af0d 	bne.w	8e034 <__aeabi_dmul+0x234>
   8e21a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8e21e:	f47f aeeb 	bne.w	8dff8 <__aeabi_dmul+0x1f8>
   8e222:	e712      	b.n	8e04a <__aeabi_dmul+0x24a>

0008e224 <__gedf2>:
   8e224:	f04f 3cff 	mov.w	ip, #4294967295
   8e228:	e006      	b.n	8e238 <__cmpdf2+0x4>
   8e22a:	bf00      	nop

0008e22c <__ledf2>:
   8e22c:	f04f 0c01 	mov.w	ip, #1
   8e230:	e002      	b.n	8e238 <__cmpdf2+0x4>
   8e232:	bf00      	nop

0008e234 <__cmpdf2>:
   8e234:	f04f 0c01 	mov.w	ip, #1
   8e238:	f84d cd04 	str.w	ip, [sp, #-4]!
   8e23c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e244:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e248:	bf18      	it	ne
   8e24a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8e24e:	d01b      	beq.n	8e288 <__cmpdf2+0x54>
   8e250:	b001      	add	sp, #4
   8e252:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8e256:	bf0c      	ite	eq
   8e258:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8e25c:	ea91 0f03 	teqne	r1, r3
   8e260:	bf02      	ittt	eq
   8e262:	ea90 0f02 	teqeq	r0, r2
   8e266:	2000      	moveq	r0, #0
   8e268:	4770      	bxeq	lr
   8e26a:	f110 0f00 	cmn.w	r0, #0
   8e26e:	ea91 0f03 	teq	r1, r3
   8e272:	bf58      	it	pl
   8e274:	4299      	cmppl	r1, r3
   8e276:	bf08      	it	eq
   8e278:	4290      	cmpeq	r0, r2
   8e27a:	bf2c      	ite	cs
   8e27c:	17d8      	asrcs	r0, r3, #31
   8e27e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8e282:	f040 0001 	orr.w	r0, r0, #1
   8e286:	4770      	bx	lr
   8e288:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e28c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e290:	d102      	bne.n	8e298 <__cmpdf2+0x64>
   8e292:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e296:	d107      	bne.n	8e2a8 <__cmpdf2+0x74>
   8e298:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e29c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e2a0:	d1d6      	bne.n	8e250 <__cmpdf2+0x1c>
   8e2a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e2a6:	d0d3      	beq.n	8e250 <__cmpdf2+0x1c>
   8e2a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   8e2ac:	4770      	bx	lr
   8e2ae:	bf00      	nop

0008e2b0 <__aeabi_cdrcmple>:
   8e2b0:	4684      	mov	ip, r0
   8e2b2:	4610      	mov	r0, r2
   8e2b4:	4662      	mov	r2, ip
   8e2b6:	468c      	mov	ip, r1
   8e2b8:	4619      	mov	r1, r3
   8e2ba:	4663      	mov	r3, ip
   8e2bc:	e000      	b.n	8e2c0 <__aeabi_cdcmpeq>
   8e2be:	bf00      	nop

0008e2c0 <__aeabi_cdcmpeq>:
   8e2c0:	b501      	push	{r0, lr}
   8e2c2:	f7ff ffb7 	bl	8e234 <__cmpdf2>
   8e2c6:	2800      	cmp	r0, #0
   8e2c8:	bf48      	it	mi
   8e2ca:	f110 0f00 	cmnmi.w	r0, #0
   8e2ce:	bd01      	pop	{r0, pc}

0008e2d0 <__aeabi_dcmpeq>:
   8e2d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e2d4:	f7ff fff4 	bl	8e2c0 <__aeabi_cdcmpeq>
   8e2d8:	bf0c      	ite	eq
   8e2da:	2001      	moveq	r0, #1
   8e2dc:	2000      	movne	r0, #0
   8e2de:	f85d fb08 	ldr.w	pc, [sp], #8
   8e2e2:	bf00      	nop

0008e2e4 <__aeabi_dcmplt>:
   8e2e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e2e8:	f7ff ffea 	bl	8e2c0 <__aeabi_cdcmpeq>
   8e2ec:	bf34      	ite	cc
   8e2ee:	2001      	movcc	r0, #1
   8e2f0:	2000      	movcs	r0, #0
   8e2f2:	f85d fb08 	ldr.w	pc, [sp], #8
   8e2f6:	bf00      	nop

0008e2f8 <__aeabi_dcmple>:
   8e2f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e2fc:	f7ff ffe0 	bl	8e2c0 <__aeabi_cdcmpeq>
   8e300:	bf94      	ite	ls
   8e302:	2001      	movls	r0, #1
   8e304:	2000      	movhi	r0, #0
   8e306:	f85d fb08 	ldr.w	pc, [sp], #8
   8e30a:	bf00      	nop

0008e30c <__aeabi_dcmpge>:
   8e30c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e310:	f7ff ffce 	bl	8e2b0 <__aeabi_cdrcmple>
   8e314:	bf94      	ite	ls
   8e316:	2001      	movls	r0, #1
   8e318:	2000      	movhi	r0, #0
   8e31a:	f85d fb08 	ldr.w	pc, [sp], #8
   8e31e:	bf00      	nop

0008e320 <__aeabi_dcmpgt>:
   8e320:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e324:	f7ff ffc4 	bl	8e2b0 <__aeabi_cdrcmple>
   8e328:	bf34      	ite	cc
   8e32a:	2001      	movcc	r0, #1
   8e32c:	2000      	movcs	r0, #0
   8e32e:	f85d fb08 	ldr.w	pc, [sp], #8
   8e332:	bf00      	nop

0008e334 <__aeabi_dcmpun>:
   8e334:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e33c:	d102      	bne.n	8e344 <__aeabi_dcmpun+0x10>
   8e33e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e342:	d10a      	bne.n	8e35a <__aeabi_dcmpun+0x26>
   8e344:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e34c:	d102      	bne.n	8e354 <__aeabi_dcmpun+0x20>
   8e34e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e352:	d102      	bne.n	8e35a <__aeabi_dcmpun+0x26>
   8e354:	f04f 0000 	mov.w	r0, #0
   8e358:	4770      	bx	lr
   8e35a:	f04f 0001 	mov.w	r0, #1
   8e35e:	4770      	bx	lr

0008e360 <__aeabi_d2iz>:
   8e360:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8e364:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8e368:	d215      	bcs.n	8e396 <__aeabi_d2iz+0x36>
   8e36a:	d511      	bpl.n	8e390 <__aeabi_d2iz+0x30>
   8e36c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8e370:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8e374:	d912      	bls.n	8e39c <__aeabi_d2iz+0x3c>
   8e376:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8e37a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8e37e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8e382:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8e386:	fa23 f002 	lsr.w	r0, r3, r2
   8e38a:	bf18      	it	ne
   8e38c:	4240      	negne	r0, r0
   8e38e:	4770      	bx	lr
   8e390:	f04f 0000 	mov.w	r0, #0
   8e394:	4770      	bx	lr
   8e396:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8e39a:	d105      	bne.n	8e3a8 <__aeabi_d2iz+0x48>
   8e39c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8e3a0:	bf08      	it	eq
   8e3a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8e3a6:	4770      	bx	lr
   8e3a8:	f04f 0000 	mov.w	r0, #0
   8e3ac:	4770      	bx	lr
   8e3ae:	bf00      	nop
   8e3b0:	706d696c 	.word	0x706d696c
   8e3b4:	006e696b 	.word	0x006e696b
   8e3b8:	00000000 	.word	0x00000000
   8e3bc:	00000174 	.word	0x00000174
   8e3c0:	0000022e 	.word	0x0000022e
   8e3c4:	000002e8 	.word	0x000002e8
   8e3c8:	0000045c 	.word	0x0000045c
   8e3cc:	000005d0 	.word	0x000005d0
   8e3d0:	00000744 	.word	0x00000744
	...
   8e3dc:	00000200 	.word	0x00000200
   8e3e0:	00000300 	.word	0x00000300
   8e3e4:	00000400 	.word	0x00000400
   8e3e8:	00000600 	.word	0x00000600
   8e3ec:	00000800 	.word	0x00000800
	...
   8e3fc:	00000001 	.word	0x00000001
   8e400:	00000002 	.word	0x00000002
   8e404:	00000004 	.word	0x00000004
   8e408:	00000008 	.word	0x00000008
   8e40c:	00000010 	.word	0x00000010
   8e410:	00000020 	.word	0x00000020
   8e414:	00000040 	.word	0x00000040
   8e418:	0000000c 	.word	0x0000000c
   8e41c:	00000014 	.word	0x00000014
   8e420:	000a7825 	.word	0x000a7825
   8e424:	20525441 	.word	0x20525441
   8e428:	20642528 	.word	0x20642528
   8e42c:	296e656c 	.word	0x296e656c
   8e430:	0000203a 	.word	0x0000203a
   8e434:	78323025 	.word	0x78323025
   8e438:	00000020 	.word	0x00000020
   8e43c:	50525641 	.word	0x50525641
   8e440:	3a474f52 	.word	0x3a474f52
   8e444:	79615020 	.word	0x79615020
   8e448:	64616f6c 	.word	0x64616f6c
   8e44c:	7a697320 	.word	0x7a697320
   8e450:	203d2065 	.word	0x203d2065
   8e454:	202c6425 	.word	0x202c6425
   8e458:	6f727265 	.word	0x6f727265
   8e45c:	0a3f2172 	.word	0x0a3f2172
   8e460:	00000000 	.word	0x00000000
   8e464:	50525641 	.word	0x50525641
   8e468:	3a474f52 	.word	0x3a474f52
   8e46c:	746e4520 	.word	0x746e4520
   8e470:	49207265 	.word	0x49207265
   8e474:	4d205053 	.word	0x4d205053
   8e478:	3a65646f 	.word	0x3a65646f
   8e47c:	0a782520 	.word	0x0a782520
   8e480:	00000000 	.word	0x00000000
   8e484:	50525641 	.word	0x50525641
   8e488:	3a474f52 	.word	0x3a474f52
   8e48c:	61724520 	.word	0x61724520
   8e490:	203a6573 	.word	0x203a6573
   8e494:	6c796150 	.word	0x6c796150
   8e498:	2064616f 	.word	0x2064616f
   8e49c:	657a6973 	.word	0x657a6973
   8e4a0:	25203d20 	.word	0x25203d20
   8e4a4:	65202c64 	.word	0x65202c64
   8e4a8:	726f7272 	.word	0x726f7272
   8e4ac:	000a3f21 	.word	0x000a3f21
   8e4b0:	494c5743 	.word	0x494c5743
   8e4b4:	415f4554 	.word	0x415f4554
   8e4b8:	53495256 	.word	0x53495256
   8e4bc:	00000050 	.word	0x00000050
   8e4c0:	50525641 	.word	0x50525641
   8e4c4:	3a474f52 	.word	0x3a474f52
   8e4c8:	64644120 	.word	0x64644120
   8e4cc:	73736572 	.word	0x73736572
   8e4d0:	25203d20 	.word	0x25203d20
   8e4d4:	0a783230 	.word	0x0a783230
   8e4d8:	00000000 	.word	0x00000000
   8e4dc:	62616e45 	.word	0x62616e45
   8e4e0:	676e696c 	.word	0x676e696c
   8e4e4:	41535520 	.word	0x41535520
   8e4e8:	0a305452 	.word	0x0a305452
   8e4ec:	00000000 	.word	0x00000000
   8e4f0:	3a525245 	.word	0x3a525245
   8e4f4:	766e4920 	.word	0x766e4920
   8e4f8:	64696c61 	.word	0x64696c61
   8e4fc:	41535520 	.word	0x41535520
   8e500:	43205452 	.word	0x43205452
   8e504:	69666e6f 	.word	0x69666e6f
   8e508:	61727567 	.word	0x61727567
   8e50c:	6e6f6974 	.word	0x6e6f6974
   8e510:	63617020 	.word	0x63617020
   8e514:	3f74656b 	.word	0x3f74656b
   8e518:	0000000a 	.word	0x0000000a

0008e51c <BOS_DESC>:
   8e51c:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8e52c:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8e548:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8e558:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8e568:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8e578:	74697845 20676e69 68746977 61747320     Exiting with sta
   8e588:	20737574 0a2e6425 00000000 78383025     tus %d......%08x
   8e598:	00000000 2072614d 32203232 00313230     ....Mar 22 2021.
   8e5a8:	313a3731 31353a31 00000000 70696843     17:11:51....Chip
   8e5b8:	73696857 65726570 694c2d72 4f206574     Whisperer-Lite O
   8e5c8:	6e696c6e 46202e65 776d7269 20657261     nline. Firmware 
   8e5d8:	6c697562 25203a64 73252f73 0000000a     build: %s/%s....
   8e5e8:	69726553 6e206c61 65626d75 25203a72     Serial number: %
   8e5f8:	00000a73 74746553 20676e69 46207075     s...Setting up F
   8e608:	20414750 6d6d6f43 63696e75 6f697461     PGA Communicatio
   8e618:	00000a6e 6e657645 6f4c2074 4520706f     n...Event Loop E
   8e628:	7265746e 202c6465 74696177 2e676e69     ntered, waiting.
   8e638:	000a2e2e                                ....

0008e63c <_global_impure_ptr>:
   8e63c:	20000720 00464e49 00666e69 004e414e      .. INF.inf.NAN.
   8e64c:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8e65c:	66656463 00000000 33323130 37363534     cdef....01234567
   8e66c:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8e67c:	0000296c 00000030                       l)..0...

0008e684 <blanks.7335>:
   8e684:	20202020 20202020 20202020 20202020                     

0008e694 <zeroes.7336>:
   8e694:	30303030 30303030 30303030 30303030     0000000000000000

0008e6a4 <blanks.7328>:
   8e6a4:	20202020 20202020 20202020 20202020                     

0008e6b4 <zeroes.7329>:
   8e6b4:	30303030 30303030 30303030 30303030     0000000000000000
   8e6c4:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8e6d4:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8e6e4:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8e6f4:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8e704:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8e714:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8e724:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8e734:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8e744:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8e754:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8e764:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8e774:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8e784:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8e794:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8e7a4:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8e7b4:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8e7c4:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8e7d4:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8e7e4:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8e7f4:	00000000                                ....

0008e7f8 <__mprec_bigtens>:
   8e7f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8e808:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8e818:	7f73bf3c 75154fdd                       <.s..O.u

0008e820 <__mprec_tens>:
   8e820:	00000000 3ff00000 00000000 40240000     .......?......$@
   8e830:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8e840:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8e850:	00000000 412e8480 00000000 416312d0     .......A......cA
   8e860:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8e870:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8e880:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8e890:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8e8a0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8e8b0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8e8c0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8e8d0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8e8e0:	79d99db4 44ea7843                       ...yCx.D

0008e8e8 <p05.6122>:
   8e8e8:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8e8f8:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8e908:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8e918:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8e928:	2520656e 25732564 00000a73              ne %d%s%s...

0008e934 <_ctype_>:
   8e934:	20202000 20202020 28282020 20282828     .         ((((( 
   8e944:	20202020 20202020 20202020 20202020                     
   8e954:	10108820 10101010 10101010 10101010      ...............
   8e964:	04040410 04040404 10040404 10101010     ................
   8e974:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8e984:	01010101 01010101 01010101 10101010     ................
   8e994:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8e9a4:	02020202 02020202 02020202 10101010     ................
   8e9b4:	00000020 00000000 00000000 00000000      ...............
	...

0008ea38 <_init>:
   8ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ea3a:	bf00      	nop
   8ea3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ea3e:	bc08      	pop	{r3}
   8ea40:	469e      	mov	lr, r3
   8ea42:	4770      	bx	lr

0008ea44 <__init_array_start>:
   8ea44:	0008a681 	.word	0x0008a681

0008ea48 <__frame_dummy_init_array_entry>:
   8ea48:	000800e1                                ....

0008ea4c <_fini>:
   8ea4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ea4e:	bf00      	nop
   8ea50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ea52:	bc08      	pop	{r3}
   8ea54:	469e      	mov	lr, r3
   8ea56:	4770      	bx	lr

0008ea58 <__do_global_dtors_aux_fini_array_entry>:
   8ea58:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	200006f0 	.word	0x200006f0

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	0008019d 000800fd 00080115 00080111     ................
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	000804dd 00080389 0008010d 00080111     ................
200001d0:	00080379                                y...

200001d4 <udc_config>:
200001d4:	200002c4 200001f4 200002c4 200002d8     ... ... ... ... 
200001e4:	200001ec 00000000                       ... ....

200001ec <udc_config_hs>:
200001ec:	20000260 200002e4                       `.. ... 

200001f4 <udc_config_lsfs>:
200001f4:	200001fc 200002e4                       ... ... 

200001fc <udc_desc_fs>:
200001fc:	00620209 80000103 000409fa ffff0200     ..b.............
2000020c:	050700ff 00400281 02050700 00004002     ......@......@..
2000021c:	02010b08 00010202 00010409 01020201     ................
2000022c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000023c:	02030124 03830507 09100040 02000204     $.......@.......
2000024c:	0000000a 02850507 07000040 40020605     ........@......@
2000025c:	00000000                                ....

20000260 <udc_desc_hs>:
20000260:	00620209 80000103 000409fa ffff0200     ..b.............
20000270:	050700ff 02000281 02050700 00020002     ................
20000280:	02010b08 00010202 00010409 01020201     ................
20000290:	00240500 24040110 24050202 05020106     ..$....$...$....
200002a0:	02030124 03830507 09100040 02000204     $.......@.......
200002b0:	0000000a 02850507 07000200 00020605     ................
200002c0:	00000002                                ....

200002c4 <udc_device_desc>:
200002c4:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d4:	00000103                                ....

200002d8 <udc_device_qual>:
200002d8:	0200060a 40000000 00000001              .......@....

200002e4 <udi_apis>:
200002e4:	200005bc 200001ac 200001c0              ... ... ... 

200002f0 <gs_uc_state>:
200002f0:	                                         .

200002f1 <scard_protocol_version.8943>:
200002f1:	                                         ...

200002f4 <xram>:
200002f4:	60000000                                ...`

200002f8 <avrispmkIIfreqs>:
200002f8:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
20000308:	0007a120 0003d090 0001e848 00017882      .......H....x..
20000318:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000328:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000338:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000348:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000358:	000099f1 00009586 00008d68 0000861f     ........h.......
20000368:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000378:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000388:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000398:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
200003a8:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003b8:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003c8:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003d8:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003e8:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003f8:	000016f7 000015e7 000014ef 000013e5     ................
20000408:	00001306 00001219 00001142 00001071     ........B...q...
20000418:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000428:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000438:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000448:	000008d1 00000868 00000804 000007a4     ....h...........
20000458:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000468:	00000603 000005bc 00000576 00000535     ........v...5...
20000478:	000004f7 000004bc 00000483 0000044d     ............M...
20000488:	00000419 000003e8 000003b9 0000038d     ................
20000498:	00000362 0000033a 00000313 000002ee     b...:...........
200004a8:	000002cb 000002aa 0000028a 0000026b     ............k...
200004b8:	0000024e 00000233 00000218 000001ff     N...3...........
200004c8:	000001e7 000001d1 000001bb 000001a6     ................
200004d8:	00000192 00000180 0000016e 0000015d     ........n...]...
200004e8:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004f8:	00000112 00000105 000000f9 000000ee     ................
20000508:	000000e2 000000d8 000000ce 000000c4     ................
20000518:	000000bb 000000b2 000000aa 000000a2     ................
20000528:	0000009a 00000093 0000008c 00000086     ................
20000538:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000548:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000558:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000568:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000578:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000588 <ParameterTable>:
20000588:	81000180 01900001 01019100 94170192     ................
20000598:	03982101 01039e06 a40001a1 00000003     .!..............

200005a8 <cdc_settings_change>:
200005a8:	                                         ..

200005aa <main_b_vendor_enable>:
200005aa:	                                         ..

200005ac <defaultTimeoutTicks>:
200005ac:	000001f4                                ....

200005b0 <XPROG_Param_EEPageSize>:
200005b0:	00000020                                 ...

200005b4 <XPROG_Param_NVMBase>:
200005b4:	010001c0                                ....

200005b8 <XPROG_Param_NVMCMDRegAddr>:
200005b8:	                                         3

200005b9 <XPROG_Param_NVMCSRRegAddr>:
200005b9:	                                         2..

200005bc <udi_api_vendor>:
200005bc:	0008462d 00084651 00084669 00084621     -F..QF..iF..!F..
200005cc:	00000000                                ....

200005d0 <udc_string_desc>:
200005d0:	00000300 00000000 00000000 00000000     ................
	...

20000614 <udc_string_desc_languageid>:
20000614:	04090304                                ....

20000618 <udc_string_manufacturer_name>:
20000618:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000628:	636e4920 0000002e                        Inc....

20000630 <udc_string_product_name>:
20000630:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
20000640:	00006574                                te..

20000644 <winusb_20_desc>:
20000644:	0000000a 06030000 000800ae 00000002     ................
20000654:	001400a4 49570003 4253554e 00000000     ......WINUSB....
20000664:	00000000 00880000 00070004 0044002a     ............*.D.
20000674:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000684:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000694:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
200006a4:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
200006b4:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
200006c4:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
200006d4:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
200006e4:	00390045 0000007d                        E.9.}.....

200006ee <g_interrupt_enabled>:
200006ee:	                                         ..

200006f0 <SystemCoreClock>:
200006f0:	003d0900                                ..=.

200006f4 <usb_serial_number>:
200006f4:	30303030 30303030 30303030 44414544     000000000000DEAD
20000704:	46454542 00000000 00000000 00000000     BEEF............
20000714:	00000000                                ....

20000718 <_impure_ptr>:
20000718:	20000720 00000000                        .. ....

20000720 <impure_data>:
20000720:	00000000 20000a0c 20000a74 20000adc     ....... t.. ... 
	...
200007c8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200007d8:	0005deec 0000000b 00000000 00000000     ................
	...

20000b48 <__atexit_recursive_mutex>:
20000b48:	20002e0c                                ... 

20000b4c <__global_locale>:
20000b4c:	00000043 00000000 00000000 00000000     C...............
	...
20000b6c:	00000043 00000000 00000000 00000000     C...............
	...
20000b8c:	00000043 00000000 00000000 00000000     C...............
	...
20000bac:	00000043 00000000 00000000 00000000     C...............
	...
20000bcc:	00000043 00000000 00000000 00000000     C...............
	...
20000bec:	00000043 00000000 00000000 00000000     C...............
	...
20000c0c:	00000043 00000000 00000000 00000000     C...............
	...
20000c2c:	0008d6b1 0008c679 00000000 0008e934     ....y.......4...
20000c3c:	0008e770 0008e590 0008e590 0008e590     p...............
20000c4c:	0008e590 0008e590 0008e590 0008e590     ................
20000c5c:	0008e590 0008e590 ffffffff ffffffff     ................
20000c6c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000c94:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000cb8 <__malloc_av_>:
	...
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8 20000de0 20000de0     ... ... ... ... 
20000df0:	20000de8 20000de8 20000df0 20000df0     ... ... ... ... 
20000e00:	20000df8 20000df8 20000e00 20000e00     ... ... ... ... 
20000e10:	20000e08 20000e08 20000e10 20000e10     ... ... ... ... 
20000e20:	20000e18 20000e18 20000e20 20000e20     ... ...  ..  .. 
20000e30:	20000e28 20000e28 20000e30 20000e30     (.. (.. 0.. 0.. 
20000e40:	20000e38 20000e38 20000e40 20000e40     8.. 8.. @.. @.. 
20000e50:	20000e48 20000e48 20000e50 20000e50     H.. H.. P.. P.. 
20000e60:	20000e58 20000e58 20000e60 20000e60     X.. X.. `.. `.. 
20000e70:	20000e68 20000e68 20000e70 20000e70     h.. h.. p.. p.. 
20000e80:	20000e78 20000e78 20000e80 20000e80     x.. x.. ... ... 
20000e90:	20000e88 20000e88 20000e90 20000e90     ... ... ... ... 
20000ea0:	20000e98 20000e98 20000ea0 20000ea0     ... ... ... ... 
20000eb0:	20000ea8 20000ea8 20000eb0 20000eb0     ... ... ... ... 
20000ec0:	20000eb8 20000eb8 20000ec0 20000ec0     ... ... ... ... 
20000ed0:	20000ec8 20000ec8 20000ed0 20000ed0     ... ... ... ... 
20000ee0:	20000ed8 20000ed8 20000ee0 20000ee0     ... ... ... ... 
20000ef0:	20000ee8 20000ee8 20000ef0 20000ef0     ... ... ... ... 
20000f00:	20000ef8 20000ef8 20000f00 20000f00     ... ... ... ... 
20000f10:	20000f08 20000f08 20000f10 20000f10     ... ... ... ... 
20000f20:	20000f18 20000f18 20000f20 20000f20     ... ...  ..  .. 
20000f30:	20000f28 20000f28 20000f30 20000f30     (.. (.. 0.. 0.. 
20000f40:	20000f38 20000f38 20000f40 20000f40     8.. 8.. @.. @.. 
20000f50:	20000f48 20000f48 20000f50 20000f50     H.. H.. P.. P.. 
20000f60:	20000f58 20000f58 20000f60 20000f60     X.. X.. `.. `.. 
20000f70:	20000f68 20000f68 20000f70 20000f70     h.. h.. p.. p.. 
20000f80:	20000f78 20000f78 20000f80 20000f80     x.. x.. ... ... 
20000f90:	20000f88 20000f88 20000f90 20000f90     ... ... ... ... 
20000fa0:	20000f98 20000f98 20000fa0 20000fa0     ... ... ... ... 
20000fb0:	20000fa8 20000fa8 20000fb0 20000fb0     ... ... ... ... 
20000fc0:	20000fb8 20000fb8 20000fc0 20000fc0     ... ... ... ... 
20000fd0:	20000fc8 20000fc8 20000fd0 20000fd0     ... ... ... ... 
20000fe0:	20000fd8 20000fd8 20000fe0 20000fe0     ... ... ... ... 
20000ff0:	20000fe8 20000fe8 20000ff0 20000ff0     ... ... ... ... 
20001000:	20000ff8 20000ff8 20001000 20001000     ... ... ... ... 
20001010:	20001008 20001008 20001010 20001010     ... ... ... ... 
20001020:	20001018 20001018 20001020 20001020     ... ...  ..  .. 
20001030:	20001028 20001028 20001030 20001030     (.. (.. 0.. 0.. 
20001040:	20001038 20001038 20001040 20001040     8.. 8.. @.. @.. 
20001050:	20001048 20001048 20001050 20001050     H.. H.. P.. P.. 
20001060:	20001058 20001058 20001060 20001060     X.. X.. `.. `.. 
20001070:	20001068 20001068 20001070 20001070     h.. h.. p.. p.. 
20001080:	20001078 20001078 20001080 20001080     x.. x.. ... ... 
20001090:	20001088 20001088 20001090 20001090     ... ... ... ... 
200010a0:	20001098 20001098 200010a0 200010a0     ... ... ... ... 
200010b0:	200010a8 200010a8 200010b0 200010b0     ... ... ... ... 

200010c0 <__malloc_sbrk_base>:
200010c0:	ffffffff                                ....

200010c4 <__malloc_trim_threshold>:
200010c4:	00020000                                ....
