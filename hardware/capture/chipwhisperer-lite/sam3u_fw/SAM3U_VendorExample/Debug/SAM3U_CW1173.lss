
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dddc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008dddc  0008dddc  0001dddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000010c0  20000000  0008dde4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001d6c  200010c0  0008eea4  000210c0  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000210e9  2**0
                  CONTENTS, READONLY
  7 .debug_info   00043408  00000000  00000000  00021142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008abd  00000000  00000000  0006454a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f49a  00000000  00000000  0006d007  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016f8  00000000  00000000  0007c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001800  00000000  00000000  0007db99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022469  00000000  00000000  0007f399  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002b201  00000000  00000000  000a1802  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006153f  00000000  00000000  000cca03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004ba8  00000000  00000000  0012df44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 d1 6e 08 00 cf 6e 08 00 cf 6e 08 00     . . .n...n...n..
   80010:	cf 6e 08 00 cf 6e 08 00 cf 6e 08 00 00 00 00 00     .n...n...n......
	...
   8002c:	cf 6e 08 00 cf 6e 08 00 00 00 00 00 cf 6e 08 00     .n...n.......n..
   8003c:	cf 6e 08 00 cf 6e 08 00 cf 6e 08 00 cf 6e 08 00     .n...n...n...n..
   8004c:	cf 6e 08 00 cf 6e 08 00 cf 6e 08 00 cf 6e 08 00     .n...n...n...n..
   8005c:	cf 6e 08 00 cf 6e 08 00 cf 6e 08 00 8d 53 08 00     .n...n...n...S..
   8006c:	a1 53 08 00 cf 6e 08 00 61 3a 08 00 81 3a 08 00     .S...n..a:...:..
   8007c:	a1 3a 08 00 cf 6e 08 00 cf 6e 08 00 cf 6e 08 00     .:...n...n...n..
   8008c:	cf 6e 08 00 cf 6e 08 00 cf 6e 08 00 89 35 08 00     .n...n...n...5..
   8009c:	cf 6e 08 00 cf 6e 08 00 cf 6e 08 00 cf 6e 08 00     .n...n...n...n..
   800ac:	cf 6e 08 00 cf 6e 08 00 05 5b 08 00 cf 6e 08 00     .n...n...[...n..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200010c0 	.word	0x200010c0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008dde4 	.word	0x0008dde4

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008dde4 	.word	0x0008dde4
   8011c:	200010c4 	.word	0x200010c4
   80120:	0008dde4 	.word	0x0008dde4
   80124:	00000000 	.word	0x00000000

00080128 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80128:	4a02      	ldr	r2, [pc, #8]	; (80134 <udi_cdc_comm_disable+0xc>)
   8012a:	7813      	ldrb	r3, [r2, #0]
   8012c:	3b01      	subs	r3, #1
   8012e:	b2db      	uxtb	r3, r3
   80130:	7013      	strb	r3, [r2, #0]
   80132:	4770      	bx	lr
   80134:	200010e7 	.word	0x200010e7

00080138 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80138:	2000      	movs	r0, #0
   8013a:	4770      	bx	lr

0008013c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8013c:	2000      	movs	r0, #0
   8013e:	4770      	bx	lr

00080140 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80140:	4b1d      	ldr	r3, [pc, #116]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80142:	781b      	ldrb	r3, [r3, #0]
   80144:	f013 0f80 	tst.w	r3, #128	; 0x80
   80148:	d105      	bne.n	80156 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8014a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8014e:	2b20      	cmp	r3, #32
   80150:	d018      	beq.n	80184 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80152:	2000      	movs	r0, #0
   80154:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80156:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8015a:	2b20      	cmp	r3, #32
   8015c:	d001      	beq.n	80162 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   8015e:	2000      	movs	r0, #0
   80160:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80162:	4b15      	ldr	r3, [pc, #84]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80164:	785b      	ldrb	r3, [r3, #1]
   80166:	2b21      	cmp	r3, #33	; 0x21
   80168:	d124      	bne.n	801b4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   8016a:	4b13      	ldr	r3, [pc, #76]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8016c:	88db      	ldrh	r3, [r3, #6]
   8016e:	2b07      	cmp	r3, #7
   80170:	d001      	beq.n	80176 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   80172:	2000      	movs	r0, #0
   80174:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80176:	4b10      	ldr	r3, [pc, #64]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80178:	4a10      	ldr	r2, [pc, #64]	; (801bc <udi_cdc_comm_setup+0x7c>)
   8017a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   8017c:	2207      	movs	r2, #7
   8017e:	819a      	strh	r2, [r3, #12]
				return true;
   80180:	2001      	movs	r0, #1
   80182:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80184:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80186:	7858      	ldrb	r0, [r3, #1]
   80188:	2820      	cmp	r0, #32
   8018a:	d004      	beq.n	80196 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   8018c:	2822      	cmp	r0, #34	; 0x22
   8018e:	bf14      	ite	ne
   80190:	2000      	movne	r0, #0
   80192:	2001      	moveq	r0, #1
   80194:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80196:	4b08      	ldr	r3, [pc, #32]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80198:	88db      	ldrh	r3, [r3, #6]
   8019a:	2b07      	cmp	r3, #7
   8019c:	d001      	beq.n	801a2 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   8019e:	2000      	movs	r0, #0
}
   801a0:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   801a2:	4b05      	ldr	r3, [pc, #20]	; (801b8 <udi_cdc_comm_setup+0x78>)
   801a4:	4a06      	ldr	r2, [pc, #24]	; (801c0 <udi_cdc_comm_setup+0x80>)
   801a6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   801a8:	4a04      	ldr	r2, [pc, #16]	; (801bc <udi_cdc_comm_setup+0x7c>)
   801aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   801ac:	2207      	movs	r2, #7
   801ae:	819a      	strh	r2, [r3, #12]
				return true;
   801b0:	2001      	movs	r0, #1
   801b2:	4770      	bx	lr
	return false;  // request Not supported
   801b4:	2000      	movs	r0, #0
   801b6:	4770      	bx	lr
   801b8:	20002dec 	.word	0x20002dec
   801bc:	200010e0 	.word	0x200010e0
   801c0:	000803dd 	.word	0x000803dd

000801c4 <udi_cdc_comm_enable>:
{
   801c4:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   801c6:	2400      	movs	r4, #0
   801c8:	4b12      	ldr	r3, [pc, #72]	; (80214 <udi_cdc_comm_enable+0x50>)
   801ca:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801cc:	4b12      	ldr	r3, [pc, #72]	; (80218 <udi_cdc_comm_enable+0x54>)
   801ce:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801d0:	4b12      	ldr	r3, [pc, #72]	; (8021c <udi_cdc_comm_enable+0x58>)
   801d2:	22a1      	movs	r2, #161	; 0xa1
   801d4:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801d6:	2220      	movs	r2, #32
   801d8:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801da:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801dc:	2201      	movs	r2, #1
   801de:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801e0:	2202      	movs	r2, #2
   801e2:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801e4:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801e6:	490e      	ldr	r1, [pc, #56]	; (80220 <udi_cdc_comm_enable+0x5c>)
   801e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801ec:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801ee:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801f0:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801f2:	2308      	movs	r3, #8
   801f4:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801f6:	4620      	mov	r0, r4
   801f8:	4b0a      	ldr	r3, [pc, #40]	; (80224 <udi_cdc_comm_enable+0x60>)
   801fa:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801fc:	4620      	mov	r0, r4
   801fe:	4b0a      	ldr	r3, [pc, #40]	; (80228 <udi_cdc_comm_enable+0x64>)
   80200:	4798      	blx	r3
   80202:	4602      	mov	r2, r0
   80204:	b120      	cbz	r0, 80210 <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
   80206:	4903      	ldr	r1, [pc, #12]	; (80214 <udi_cdc_comm_enable+0x50>)
   80208:	780b      	ldrb	r3, [r1, #0]
   8020a:	3301      	adds	r3, #1
   8020c:	b2db      	uxtb	r3, r3
   8020e:	700b      	strb	r3, [r1, #0]
}
   80210:	4610      	mov	r0, r2
   80212:	bd10      	pop	{r4, pc}
   80214:	200010e7 	.word	0x200010e7
   80218:	200014fc 	.word	0x200014fc
   8021c:	20001914 	.word	0x20001914
   80220:	200010e0 	.word	0x200010e0
   80224:	000833b9 	.word	0x000833b9
   80228:	00083321 	.word	0x00083321

0008022c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8022c:	4b42      	ldr	r3, [pc, #264]	; (80338 <udi_cdc_tx_send+0x10c>)
   8022e:	781b      	ldrb	r3, [r3, #0]
   80230:	b103      	cbz	r3, 80234 <udi_cdc_tx_send+0x8>
   80232:	4770      	bx	lr
{
   80234:	b570      	push	{r4, r5, r6, lr}
   80236:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80238:	4b40      	ldr	r3, [pc, #256]	; (8033c <udi_cdc_tx_send+0x110>)
   8023a:	4798      	blx	r3
   8023c:	2800      	cmp	r0, #0
   8023e:	d03d      	beq.n	802bc <udi_cdc_tx_send+0x90>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80240:	4b3f      	ldr	r3, [pc, #252]	; (80340 <udi_cdc_tx_send+0x114>)
   80242:	881c      	ldrh	r4, [r3, #0]
   80244:	4b3f      	ldr	r3, [pc, #252]	; (80344 <udi_cdc_tx_send+0x118>)
   80246:	4798      	blx	r3
   80248:	4284      	cmp	r4, r0
   8024a:	d072      	beq.n	80332 <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8024c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80250:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80252:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   80256:	2200      	movs	r2, #0
   80258:	4b3b      	ldr	r3, [pc, #236]	; (80348 <udi_cdc_tx_send+0x11c>)
   8025a:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8025c:	4b3b      	ldr	r3, [pc, #236]	; (8034c <udi_cdc_tx_send+0x120>)
   8025e:	781c      	ldrb	r4, [r3, #0]
   80260:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80262:	4b3b      	ldr	r3, [pc, #236]	; (80350 <udi_cdc_tx_send+0x124>)
   80264:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80268:	2b00      	cmp	r3, #0
   8026a:	d02e      	beq.n	802ca <udi_cdc_tx_send+0x9e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   8026c:	2200      	movs	r2, #0
   8026e:	4b39      	ldr	r3, [pc, #228]	; (80354 <udi_cdc_tx_send+0x128>)
   80270:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80272:	4b39      	ldr	r3, [pc, #228]	; (80358 <udi_cdc_tx_send+0x12c>)
   80274:	781b      	ldrb	r3, [r3, #0]
   80276:	2b00      	cmp	r3, #0
   80278:	d143      	bne.n	80302 <udi_cdc_tx_send+0xd6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8027a:	fab4 f384 	clz	r3, r4
   8027e:	095b      	lsrs	r3, r3, #5
   80280:	4a32      	ldr	r2, [pc, #200]	; (8034c <udi_cdc_tx_send+0x120>)
   80282:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80284:	2201      	movs	r2, #1
   80286:	4b2c      	ldr	r3, [pc, #176]	; (80338 <udi_cdc_tx_send+0x10c>)
   80288:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8028a:	b925      	cbnz	r5, 80296 <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   8028c:	4b2e      	ldr	r3, [pc, #184]	; (80348 <udi_cdc_tx_send+0x11c>)
   8028e:	701a      	strb	r2, [r3, #0]
   80290:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80294:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   80296:	4626      	mov	r6, r4
   80298:	4b2d      	ldr	r3, [pc, #180]	; (80350 <udi_cdc_tx_send+0x124>)
   8029a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8029e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   802a2:	bf14      	ite	ne
   802a4:	2501      	movne	r5, #1
   802a6:	2500      	moveq	r5, #0
	if (b_short_packet) {
   802a8:	d034      	beq.n	80314 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   802aa:	4b24      	ldr	r3, [pc, #144]	; (8033c <udi_cdc_tx_send+0x110>)
   802ac:	4798      	blx	r3
   802ae:	2800      	cmp	r0, #0
   802b0:	d02b      	beq.n	8030a <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802b2:	4b24      	ldr	r3, [pc, #144]	; (80344 <udi_cdc_tx_send+0x118>)
   802b4:	4798      	blx	r3
   802b6:	4b22      	ldr	r3, [pc, #136]	; (80340 <udi_cdc_tx_send+0x114>)
   802b8:	8018      	strh	r0, [r3, #0]
   802ba:	e02e      	b.n	8031a <udi_cdc_tx_send+0xee>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802bc:	4b20      	ldr	r3, [pc, #128]	; (80340 <udi_cdc_tx_send+0x114>)
   802be:	881c      	ldrh	r4, [r3, #0]
   802c0:	4b26      	ldr	r3, [pc, #152]	; (8035c <udi_cdc_tx_send+0x130>)
   802c2:	4798      	blx	r3
   802c4:	4284      	cmp	r4, r0
   802c6:	d1c1      	bne.n	8024c <udi_cdc_tx_send+0x20>
   802c8:	e033      	b.n	80332 <udi_cdc_tx_send+0x106>
		sof_zlp_counter++;
   802ca:	4a22      	ldr	r2, [pc, #136]	; (80354 <udi_cdc_tx_send+0x128>)
   802cc:	8813      	ldrh	r3, [r2, #0]
   802ce:	3301      	adds	r3, #1
   802d0:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802d2:	4b1a      	ldr	r3, [pc, #104]	; (8033c <udi_cdc_tx_send+0x110>)
   802d4:	4798      	blx	r3
   802d6:	b918      	cbnz	r0, 802e0 <udi_cdc_tx_send+0xb4>
   802d8:	4b1e      	ldr	r3, [pc, #120]	; (80354 <udi_cdc_tx_send+0x128>)
   802da:	881b      	ldrh	r3, [r3, #0]
   802dc:	2b63      	cmp	r3, #99	; 0x63
   802de:	d908      	bls.n	802f2 <udi_cdc_tx_send+0xc6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802e0:	4b16      	ldr	r3, [pc, #88]	; (8033c <udi_cdc_tx_send+0x110>)
   802e2:	4798      	blx	r3
   802e4:	2800      	cmp	r0, #0
   802e6:	d0c1      	beq.n	8026c <udi_cdc_tx_send+0x40>
   802e8:	4b1a      	ldr	r3, [pc, #104]	; (80354 <udi_cdc_tx_send+0x128>)
   802ea:	881b      	ldrh	r3, [r3, #0]
   802ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802f0:	d2bc      	bcs.n	8026c <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802f2:	b9f5      	cbnz	r5, 80332 <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802f4:	2201      	movs	r2, #1
   802f6:	4b14      	ldr	r3, [pc, #80]	; (80348 <udi_cdc_tx_send+0x11c>)
   802f8:	701a      	strb	r2, [r3, #0]
   802fa:	f3bf 8f5f 	dmb	sy
   802fe:	b662      	cpsie	i
   80300:	e017      	b.n	80332 <udi_cdc_tx_send+0x106>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80302:	fab4 f484 	clz	r4, r4
   80306:	0964      	lsrs	r4, r4, #5
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x58>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8030a:	4b14      	ldr	r3, [pc, #80]	; (8035c <udi_cdc_tx_send+0x130>)
   8030c:	4798      	blx	r3
   8030e:	4b0c      	ldr	r3, [pc, #48]	; (80340 <udi_cdc_tx_send+0x114>)
   80310:	8018      	strh	r0, [r3, #0]
   80312:	e002      	b.n	8031a <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80314:	2200      	movs	r2, #0
   80316:	4b0a      	ldr	r3, [pc, #40]	; (80340 <udi_cdc_tx_send+0x114>)
   80318:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <udi_cdc_tx_send+0x124>)
	udd_ep_run( ep,
   8031c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   80320:	4a0f      	ldr	r2, [pc, #60]	; (80360 <udi_cdc_tx_send+0x134>)
   80322:	9200      	str	r2, [sp, #0]
   80324:	4a0f      	ldr	r2, [pc, #60]	; (80364 <udi_cdc_tx_send+0x138>)
   80326:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8032a:	4629      	mov	r1, r5
   8032c:	2085      	movs	r0, #133	; 0x85
   8032e:	4c0e      	ldr	r4, [pc, #56]	; (80368 <udi_cdc_tx_send+0x13c>)
   80330:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   80332:	b002      	add	sp, #8
   80334:	bd70      	pop	{r4, r5, r6, pc}
   80336:	bf00      	nop
   80338:	20001910 	.word	0x20001910
   8033c:	000862d5 	.word	0x000862d5
   80340:	2000190c 	.word	0x2000190c
   80344:	0008632d 	.word	0x0008632d
   80348:	200006ea 	.word	0x200006ea
   8034c:	20001908 	.word	0x20001908
   80350:	20001904 	.word	0x20001904
   80354:	200010dc 	.word	0x200010dc
   80358:	20001500 	.word	0x20001500
   8035c:	0008631d 	.word	0x0008631d
   80360:	0008036d 	.word	0x0008036d
   80364:	20001504 	.word	0x20001504
   80368:	00086591 	.word	0x00086591

0008036c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   8036c:	b100      	cbz	r0, 80370 <udi_cdc_data_sent+0x4>
   8036e:	4770      	bx	lr
{
   80370:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80372:	4b07      	ldr	r3, [pc, #28]	; (80390 <udi_cdc_data_sent+0x24>)
   80374:	781b      	ldrb	r3, [r3, #0]
   80376:	fab3 f383 	clz	r3, r3
   8037a:	095b      	lsrs	r3, r3, #5
   8037c:	4a05      	ldr	r2, [pc, #20]	; (80394 <udi_cdc_data_sent+0x28>)
   8037e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80382:	4b05      	ldr	r3, [pc, #20]	; (80398 <udi_cdc_data_sent+0x2c>)
   80384:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80386:	4b05      	ldr	r3, [pc, #20]	; (8039c <udi_cdc_data_sent+0x30>)
   80388:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <udi_cdc_data_sent+0x34>)
   8038c:	4798      	blx	r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	20001908 	.word	0x20001908
   80394:	20001904 	.word	0x20001904
   80398:	20001500 	.word	0x20001500
   8039c:	20001910 	.word	0x20001910
   803a0:	0008022d 	.word	0x0008022d

000803a4 <udi_cdc_data_sof_notify>:
{
   803a4:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   803a6:	2000      	movs	r0, #0
   803a8:	4b01      	ldr	r3, [pc, #4]	; (803b0 <udi_cdc_data_sof_notify+0xc>)
   803aa:	4798      	blx	r3
   803ac:	bd08      	pop	{r3, pc}
   803ae:	bf00      	nop
   803b0:	0008022d 	.word	0x0008022d

000803b4 <udi_cdc_data_disable>:
{
   803b4:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   803b6:	4a06      	ldr	r2, [pc, #24]	; (803d0 <udi_cdc_data_disable+0x1c>)
   803b8:	7813      	ldrb	r3, [r2, #0]
   803ba:	3b01      	subs	r3, #1
   803bc:	b2db      	uxtb	r3, r3
   803be:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803c0:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803c2:	4b04      	ldr	r3, [pc, #16]	; (803d4 <udi_cdc_data_disable+0x20>)
   803c4:	4798      	blx	r3
	udi_cdc_data_running = false;
   803c6:	2200      	movs	r2, #0
   803c8:	4b03      	ldr	r3, [pc, #12]	; (803d8 <udi_cdc_data_disable+0x24>)
   803ca:	701a      	strb	r2, [r3, #0]
   803cc:	bd08      	pop	{r3, pc}
   803ce:	bf00      	nop
   803d0:	200010e8 	.word	0x200010e8
   803d4:	00083331 	.word	0x00083331
   803d8:	200010de 	.word	0x200010de

000803dc <udi_cdc_line_coding_received>:
{
   803dc:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803de:	4902      	ldr	r1, [pc, #8]	; (803e8 <udi_cdc_line_coding_received+0xc>)
   803e0:	2000      	movs	r0, #0
   803e2:	4b02      	ldr	r3, [pc, #8]	; (803ec <udi_cdc_line_coding_received+0x10>)
   803e4:	4798      	blx	r3
   803e6:	bd08      	pop	{r3, pc}
   803e8:	200010e0 	.word	0x200010e0
   803ec:	000833b9 	.word	0x000833b9

000803f0 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   803f4:	b672      	cpsid	i
   803f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803fa:	2100      	movs	r1, #0
   803fc:	4a0a      	ldr	r2, [pc, #40]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   803fe:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80400:	4a0a      	ldr	r2, [pc, #40]	; (8042c <udi_cdc_multi_get_nb_received_data+0x3c>)
   80402:	8810      	ldrh	r0, [r2, #0]
   80404:	b282      	uxth	r2, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   80406:	490a      	ldr	r1, [pc, #40]	; (80430 <udi_cdc_multi_get_nb_received_data+0x40>)
   80408:	7809      	ldrb	r1, [r1, #0]
   8040a:	b2c9      	uxtb	r1, r1
   8040c:	4809      	ldr	r0, [pc, #36]	; (80434 <udi_cdc_multi_get_nb_received_data+0x44>)
   8040e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
   80412:	b280      	uxth	r0, r0
   80414:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
   80416:	b92b      	cbnz	r3, 80424 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80418:	2201      	movs	r2, #1
   8041a:	4b03      	ldr	r3, [pc, #12]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   8041c:	701a      	strb	r2, [r3, #0]
   8041e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80422:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80424:	4770      	bx	lr
   80426:	bf00      	nop
   80428:	200006ea 	.word	0x200006ea
   8042c:	200014f4 	.word	0x200014f4
   80430:	200014f0 	.word	0x200014f0
   80434:	200014ec 	.word	0x200014ec

00080438 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80438:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8043a:	4b03      	ldr	r3, [pc, #12]	; (80448 <udi_cdc_multi_is_rx_ready+0x10>)
   8043c:	4798      	blx	r3
}
   8043e:	3000      	adds	r0, #0
   80440:	bf18      	it	ne
   80442:	2001      	movne	r0, #1
   80444:	bd08      	pop	{r3, pc}
   80446:	bf00      	nop
   80448:	000803f1 	.word	0x000803f1

0008044c <udi_cdc_rx_start>:
{
   8044c:	b510      	push	{r4, lr}
   8044e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80450:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   80454:	b672      	cpsid	i
   80456:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8045a:	2100      	movs	r1, #0
   8045c:	4a21      	ldr	r2, [pc, #132]	; (804e4 <udi_cdc_rx_start+0x98>)
   8045e:	7011      	strb	r1, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80460:	4a21      	ldr	r2, [pc, #132]	; (804e8 <udi_cdc_rx_start+0x9c>)
   80462:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80464:	4a21      	ldr	r2, [pc, #132]	; (804ec <udi_cdc_rx_start+0xa0>)
   80466:	7812      	ldrb	r2, [r2, #0]
   80468:	b94a      	cbnz	r2, 8047e <udi_cdc_rx_start+0x32>
   8046a:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8046c:	4a20      	ldr	r2, [pc, #128]	; (804f0 <udi_cdc_rx_start+0xa4>)
   8046e:	8811      	ldrh	r1, [r2, #0]
   80470:	b289      	uxth	r1, r1
   80472:	4a20      	ldr	r2, [pc, #128]	; (804f4 <udi_cdc_rx_start+0xa8>)
   80474:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80478:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8047a:	4291      	cmp	r1, r2
   8047c:	d20a      	bcs.n	80494 <udi_cdc_rx_start+0x48>
	if (cpu_irq_is_enabled_flags(flags))
   8047e:	2b00      	cmp	r3, #0
   80480:	d12d      	bne.n	804de <udi_cdc_rx_start+0x92>
		cpu_irq_enable();
   80482:	2201      	movs	r2, #1
   80484:	4b17      	ldr	r3, [pc, #92]	; (804e4 <udi_cdc_rx_start+0x98>)
   80486:	701a      	strb	r2, [r3, #0]
   80488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8048c:	b662      	cpsie	i
		return false;
   8048e:	2000      	movs	r0, #0
}
   80490:	b002      	add	sp, #8
   80492:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   80494:	2100      	movs	r1, #0
   80496:	4a16      	ldr	r2, [pc, #88]	; (804f0 <udi_cdc_rx_start+0xa4>)
   80498:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8049a:	fab4 f284 	clz	r2, r4
   8049e:	0952      	lsrs	r2, r2, #5
   804a0:	4911      	ldr	r1, [pc, #68]	; (804e8 <udi_cdc_rx_start+0x9c>)
   804a2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   804a4:	2101      	movs	r1, #1
   804a6:	4a11      	ldr	r2, [pc, #68]	; (804ec <udi_cdc_rx_start+0xa0>)
   804a8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   804aa:	b923      	cbnz	r3, 804b6 <udi_cdc_rx_start+0x6a>
		cpu_irq_enable();
   804ac:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <udi_cdc_rx_start+0x98>)
   804ae:	7019      	strb	r1, [r3, #0]
   804b0:	f3bf 8f5f 	dmb	sy
   804b4:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   804b6:	2000      	movs	r0, #0
   804b8:	4b0f      	ldr	r3, [pc, #60]	; (804f8 <udi_cdc_rx_start+0xac>)
   804ba:	4798      	blx	r3
   804bc:	b958      	cbnz	r0, 804d6 <udi_cdc_rx_start+0x8a>
	return udd_ep_run(ep,
   804be:	4b0f      	ldr	r3, [pc, #60]	; (804fc <udi_cdc_rx_start+0xb0>)
   804c0:	9300      	str	r3, [sp, #0]
   804c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   804c6:	4a0e      	ldr	r2, [pc, #56]	; (80500 <udi_cdc_rx_start+0xb4>)
   804c8:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   804cc:	2101      	movs	r1, #1
   804ce:	2006      	movs	r0, #6
   804d0:	4c0c      	ldr	r4, [pc, #48]	; (80504 <udi_cdc_rx_start+0xb8>)
   804d2:	47a0      	blx	r4
   804d4:	e7dc      	b.n	80490 <udi_cdc_rx_start+0x44>
		UDI_CDC_RX_NOTIFY(port);
   804d6:	2000      	movs	r0, #0
   804d8:	4b0b      	ldr	r3, [pc, #44]	; (80508 <udi_cdc_rx_start+0xbc>)
   804da:	4798      	blx	r3
   804dc:	e7ef      	b.n	804be <udi_cdc_rx_start+0x72>
		return false;
   804de:	2000      	movs	r0, #0
   804e0:	e7d6      	b.n	80490 <udi_cdc_rx_start+0x44>
   804e2:	bf00      	nop
   804e4:	200006ea 	.word	0x200006ea
   804e8:	200014f0 	.word	0x200014f0
   804ec:	200014f8 	.word	0x200014f8
   804f0:	200014f4 	.word	0x200014f4
   804f4:	200014ec 	.word	0x200014ec
   804f8:	00080439 	.word	0x00080439
   804fc:	000805a1 	.word	0x000805a1
   80500:	200010ec 	.word	0x200010ec
   80504:	00086591 	.word	0x00086591
   80508:	0008333d 	.word	0x0008333d

0008050c <udi_cdc_data_enable>:
{
   8050c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   8050e:	2400      	movs	r4, #0
   80510:	4b16      	ldr	r3, [pc, #88]	; (8056c <udi_cdc_data_enable+0x60>)
   80512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80514:	4b16      	ldr	r3, [pc, #88]	; (80570 <udi_cdc_data_enable+0x64>)
   80516:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80518:	4b16      	ldr	r3, [pc, #88]	; (80574 <udi_cdc_data_enable+0x68>)
   8051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   8051c:	4b16      	ldr	r3, [pc, #88]	; (80578 <udi_cdc_data_enable+0x6c>)
   8051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80520:	4b16      	ldr	r3, [pc, #88]	; (8057c <udi_cdc_data_enable+0x70>)
   80522:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80524:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   80526:	4b16      	ldr	r3, [pc, #88]	; (80580 <udi_cdc_data_enable+0x74>)
   80528:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8052a:	4620      	mov	r0, r4
   8052c:	4b15      	ldr	r3, [pc, #84]	; (80584 <udi_cdc_data_enable+0x78>)
   8052e:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80530:	4b15      	ldr	r3, [pc, #84]	; (80588 <udi_cdc_data_enable+0x7c>)
   80532:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80534:	4b15      	ldr	r3, [pc, #84]	; (8058c <udi_cdc_data_enable+0x80>)
   80536:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80538:	4b15      	ldr	r3, [pc, #84]	; (80590 <udi_cdc_data_enable+0x84>)
   8053a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8053c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8053e:	4b15      	ldr	r3, [pc, #84]	; (80594 <udi_cdc_data_enable+0x88>)
   80540:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80542:	4620      	mov	r0, r4
   80544:	4b14      	ldr	r3, [pc, #80]	; (80598 <udi_cdc_data_enable+0x8c>)
   80546:	4798      	blx	r3
   80548:	4601      	mov	r1, r0
   8054a:	b140      	cbz	r0, 8055e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   8054c:	4a07      	ldr	r2, [pc, #28]	; (8056c <udi_cdc_data_enable+0x60>)
   8054e:	7813      	ldrb	r3, [r2, #0]
   80550:	3301      	adds	r3, #1
   80552:	b2db      	uxtb	r3, r3
   80554:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80556:	7813      	ldrb	r3, [r2, #0]
   80558:	b2db      	uxtb	r3, r3
   8055a:	2b01      	cmp	r3, #1
   8055c:	d001      	beq.n	80562 <udi_cdc_data_enable+0x56>
}
   8055e:	4608      	mov	r0, r1
   80560:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   80562:	2201      	movs	r2, #1
   80564:	4b0d      	ldr	r3, [pc, #52]	; (8059c <udi_cdc_data_enable+0x90>)
   80566:	701a      	strb	r2, [r3, #0]
   80568:	e7f9      	b.n	8055e <udi_cdc_data_enable+0x52>
   8056a:	bf00      	nop
   8056c:	200010e8 	.word	0x200010e8
   80570:	20001910 	.word	0x20001910
   80574:	20001500 	.word	0x20001500
   80578:	20001908 	.word	0x20001908
   8057c:	20001904 	.word	0x20001904
   80580:	2000190c 	.word	0x2000190c
   80584:	0008022d 	.word	0x0008022d
   80588:	200014f8 	.word	0x200014f8
   8058c:	200014f0 	.word	0x200014f0
   80590:	200014ec 	.word	0x200014ec
   80594:	200014f4 	.word	0x200014f4
   80598:	0008044d 	.word	0x0008044d
   8059c:	200010de 	.word	0x200010de

000805a0 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   805a0:	b9f0      	cbnz	r0, 805e0 <udi_cdc_data_received+0x40>
{
   805a2:	b510      	push	{r4, lr}
   805a4:	b082      	sub	sp, #8
   805a6:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   805a8:	4b0e      	ldr	r3, [pc, #56]	; (805e4 <udi_cdc_data_received+0x44>)
   805aa:	781c      	ldrb	r4, [r3, #0]
   805ac:	fab4 f484 	clz	r4, r4
   805b0:	0964      	lsrs	r4, r4, #5
	if (!n) {
   805b2:	b151      	cbz	r1, 805ca <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   805b4:	b289      	uxth	r1, r1
   805b6:	4b0c      	ldr	r3, [pc, #48]	; (805e8 <udi_cdc_data_received+0x48>)
   805b8:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805bc:	2000      	movs	r0, #0
   805be:	4b0b      	ldr	r3, [pc, #44]	; (805ec <udi_cdc_data_received+0x4c>)
   805c0:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805c2:	4b0b      	ldr	r3, [pc, #44]	; (805f0 <udi_cdc_data_received+0x50>)
   805c4:	4798      	blx	r3
}
   805c6:	b002      	add	sp, #8
   805c8:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   805ca:	4b0a      	ldr	r3, [pc, #40]	; (805f4 <udi_cdc_data_received+0x54>)
   805cc:	9300      	str	r3, [sp, #0]
   805ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   805d2:	4a09      	ldr	r2, [pc, #36]	; (805f8 <udi_cdc_data_received+0x58>)
   805d4:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805d8:	2101      	movs	r1, #1
   805da:	4c08      	ldr	r4, [pc, #32]	; (805fc <udi_cdc_data_received+0x5c>)
   805dc:	47a0      	blx	r4
		return;
   805de:	e7f2      	b.n	805c6 <udi_cdc_data_received+0x26>
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop
   805e4:	200014f0 	.word	0x200014f0
   805e8:	200014ec 	.word	0x200014ec
   805ec:	200014f8 	.word	0x200014f8
   805f0:	0008044d 	.word	0x0008044d
   805f4:	000805a1 	.word	0x000805a1
   805f8:	200010ec 	.word	0x200010ec
   805fc:	00086591 	.word	0x00086591

00080600 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   80600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80604:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   80606:	4688      	mov	r8, r1
	cpu_irq_disable();
   80608:	4f20      	ldr	r7, [pc, #128]	; (8068c <udi_cdc_multi_read_buf+0x8c>)
   8060a:	f04f 0b00 	mov.w	fp, #0
   8060e:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80610:	4e1f      	ldr	r6, [pc, #124]	; (80690 <udi_cdc_multi_read_buf+0x90>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   80612:	f8df 9094 	ldr.w	r9, [pc, #148]	; 806a8 <udi_cdc_multi_read_buf+0xa8>
   80616:	e019      	b.n	8064c <udi_cdc_multi_read_buf+0x4c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80618:	4a1e      	ldr	r2, [pc, #120]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   8061a:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   8061e:	b2a4      	uxth	r4, r4
   80620:	1a64      	subs	r4, r4, r1
   80622:	42ac      	cmp	r4, r5
   80624:	bf28      	it	cs
   80626:	462c      	movcs	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80628:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   8062c:	4622      	mov	r2, r4
   8062e:	4b1a      	ldr	r3, [pc, #104]	; (80698 <udi_cdc_multi_read_buf+0x98>)
   80630:	4419      	add	r1, r3
   80632:	4640      	mov	r0, r8
   80634:	4b19      	ldr	r3, [pc, #100]	; (8069c <udi_cdc_multi_read_buf+0x9c>)
   80636:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80638:	8833      	ldrh	r3, [r6, #0]
   8063a:	4423      	add	r3, r4
   8063c:	b29b      	uxth	r3, r3
   8063e:	8033      	strh	r3, [r6, #0]
	ptr_buf += copy_nb;
   80640:	44a0      	add	r8, r4
	size -= copy_nb;
   80642:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   80644:	4658      	mov	r0, fp
   80646:	4b16      	ldr	r3, [pc, #88]	; (806a0 <udi_cdc_multi_read_buf+0xa0>)
   80648:	4798      	blx	r3

	if (size) {
   8064a:	b1dd      	cbz	r5, 80684 <udi_cdc_multi_read_buf+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8064c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80650:	b672      	cpsid	i
   80652:	f3bf 8f5f 	dmb	sy
   80656:	f887 a000 	strb.w	sl, [r7]
	pos = udi_cdc_rx_pos[port];
   8065a:	8831      	ldrh	r1, [r6, #0]
   8065c:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8065e:	f899 3000 	ldrb.w	r3, [r9]
   80662:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80664:	4a0b      	ldr	r2, [pc, #44]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   80666:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   8066a:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8066c:	b920      	cbnz	r0, 80678 <udi_cdc_multi_read_buf+0x78>
		cpu_irq_enable();
   8066e:	2001      	movs	r0, #1
   80670:	7038      	strb	r0, [r7, #0]
   80672:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80676:	b662      	cpsie	i
	while (again) {
   80678:	4291      	cmp	r1, r2
   8067a:	d3cd      	bcc.n	80618 <udi_cdc_multi_read_buf+0x18>
		if (!udi_cdc_data_running) {
   8067c:	4b09      	ldr	r3, [pc, #36]	; (806a4 <udi_cdc_multi_read_buf+0xa4>)
   8067e:	781b      	ldrb	r3, [r3, #0]
   80680:	2b00      	cmp	r3, #0
   80682:	d1e3      	bne.n	8064c <udi_cdc_multi_read_buf+0x4c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80684:	4628      	mov	r0, r5
   80686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8068a:	bf00      	nop
   8068c:	200006ea 	.word	0x200006ea
   80690:	200014f4 	.word	0x200014f4
   80694:	200014ec 	.word	0x200014ec
   80698:	200010ec 	.word	0x200010ec
   8069c:	0008785d 	.word	0x0008785d
   806a0:	0008044d 	.word	0x0008044d
   806a4:	200010de 	.word	0x200010de
   806a8:	200014f0 	.word	0x200014f0

000806ac <udi_cdc_multi_get_free_tx_buffer>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   806ac:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   806b0:	b672      	cpsid	i
   806b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   806b6:	2100      	movs	r1, #0
   806b8:	4b13      	ldr	r3, [pc, #76]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806ba:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   806bc:	4b13      	ldr	r3, [pc, #76]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806be:	781b      	ldrb	r3, [r3, #0]
   806c0:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   806c2:	4913      	ldr	r1, [pc, #76]	; (80710 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806c4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   806c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   806cc:	d009      	beq.n	806e2 <udi_cdc_multi_get_free_tx_buffer+0x36>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   806ce:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806d2:	b92a      	cbnz	r2, 806e0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806d4:	2201      	movs	r2, #1
   806d6:	4b0c      	ldr	r3, [pc, #48]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806d8:	701a      	strb	r2, [r3, #0]
   806da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806de:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806e0:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   806e2:	490c      	ldr	r1, [pc, #48]	; (80714 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   806e4:	7809      	ldrb	r1, [r1, #0]
   806e6:	2900      	cmp	r1, #0
   806e8:	d1f1      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806ea:	490b      	ldr	r1, [pc, #44]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806ec:	7809      	ldrb	r1, [r1, #0]
   806ee:	2900      	cmp	r1, #0
   806f0:	d1ed      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806f2:	2001      	movs	r0, #1
   806f4:	4908      	ldr	r1, [pc, #32]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806f6:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806f8:	fab3 f383 	clz	r3, r3
   806fc:	095b      	lsrs	r3, r3, #5
   806fe:	4903      	ldr	r1, [pc, #12]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   80700:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   80702:	2000      	movs	r0, #0
   80704:	e7e3      	b.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
   80706:	bf00      	nop
   80708:	200006ea 	.word	0x200006ea
   8070c:	20001908 	.word	0x20001908
   80710:	20001904 	.word	0x20001904
   80714:	20001910 	.word	0x20001910
   80718:	20001500 	.word	0x20001500

0008071c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   8071c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   8071e:	4b03      	ldr	r3, [pc, #12]	; (8072c <udi_cdc_multi_is_tx_ready+0x10>)
   80720:	4798      	blx	r3
}
   80722:	3000      	adds	r0, #0
   80724:	bf18      	it	ne
   80726:	2001      	movne	r0, #1
   80728:	bd08      	pop	{r3, pc}
   8072a:	bf00      	nop
   8072c:	000806ad 	.word	0x000806ad

00080730 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80734:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   80736:	4b1b      	ldr	r3, [pc, #108]	; (807a4 <udi_cdc_multi_putc+0x74>)
   80738:	799d      	ldrb	r5, [r3, #6]
   8073a:	2d09      	cmp	r5, #9
   8073c:	bf14      	ite	ne
   8073e:	2500      	movne	r5, #0
   80740:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80742:	4e19      	ldr	r6, [pc, #100]	; (807a8 <udi_cdc_multi_putc+0x78>)
	cpu_irq_disable();
   80744:	4f19      	ldr	r7, [pc, #100]	; (807ac <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80746:	f8df 8074 	ldr.w	r8, [pc, #116]	; 807bc <udi_cdc_multi_putc+0x8c>
   8074a:	e01d      	b.n	80788 <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8074c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80750:	b672      	cpsid	i
   80752:	f3bf 8f5f 	dmb	sy
   80756:	2300      	movs	r3, #0
   80758:	703b      	strb	r3, [r7, #0]
   8075a:	f898 3000 	ldrb.w	r3, [r8]
   8075e:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80760:	4913      	ldr	r1, [pc, #76]	; (807b0 <udi_cdc_multi_putc+0x80>)
   80762:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
   80766:	f100 0e01 	add.w	lr, r0, #1
   8076a:	f821 e013 	strh.w	lr, [r1, r3, lsl #1]
   8076e:	4911      	ldr	r1, [pc, #68]	; (807b4 <udi_cdc_multi_putc+0x84>)
   80770:	eb01 2343 	add.w	r3, r1, r3, lsl #9
   80774:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   80776:	b922      	cbnz	r2, 80782 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   80778:	2301      	movs	r3, #1
   8077a:	703b      	strb	r3, [r7, #0]
   8077c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80780:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80782:	b15d      	cbz	r5, 8079c <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80784:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   80786:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80788:	2000      	movs	r0, #0
   8078a:	47b0      	blx	r6
   8078c:	2800      	cmp	r0, #0
   8078e:	d1dd      	bne.n	8074c <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80790:	4b09      	ldr	r3, [pc, #36]	; (807b8 <udi_cdc_multi_putc+0x88>)
   80792:	781b      	ldrb	r3, [r3, #0]
   80794:	2b00      	cmp	r3, #0
   80796:	d1f7      	bne.n	80788 <udi_cdc_multi_putc+0x58>
   80798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
   8079c:	2001      	movs	r0, #1
}
   8079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a2:	bf00      	nop
   807a4:	200010e0 	.word	0x200010e0
   807a8:	0008071d 	.word	0x0008071d
   807ac:	200006ea 	.word	0x200006ea
   807b0:	20001904 	.word	0x20001904
   807b4:	20001504 	.word	0x20001504
   807b8:	200010de 	.word	0x200010de
   807bc:	20001908 	.word	0x20001908

000807c0 <readFabricationZone>:
*   \brief  Read the fabrication zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readFabricationZone(uint8_t* buffer)
{
   807c0:	b510      	push	{r4, lr}
   807c2:	4604      	mov	r4, r0
    readSMC(2, 0, buffer);
   807c4:	4602      	mov	r2, r0
   807c6:	2100      	movs	r1, #0
   807c8:	2002      	movs	r0, #2
   807ca:	4b02      	ldr	r3, [pc, #8]	; (807d4 <readFabricationZone+0x14>)
   807cc:	4798      	blx	r3
    return buffer;
}
   807ce:	4620      	mov	r0, r4
   807d0:	bd10      	pop	{r4, pc}
   807d2:	bf00      	nop
   807d4:	00080e85 	.word	0x00080e85

000807d8 <writeIssuerZone>:
/*! \fn     writeIssuerZone(uint8_t* buffer)
*   \brief  Write in the issuer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (8 bytes required)
*/
void writeIssuerZone(uint8_t* buffer)
{
   807d8:	b508      	push	{r3, lr}
    writeSMC(16, 64, buffer);
   807da:	4602      	mov	r2, r0
   807dc:	2140      	movs	r1, #64	; 0x40
   807de:	2010      	movs	r0, #16
   807e0:	4b01      	ldr	r3, [pc, #4]	; (807e8 <writeIssuerZone+0x10>)
   807e2:	4798      	blx	r3
   807e4:	bd08      	pop	{r3, pc}
   807e6:	bf00      	nop
   807e8:	00080db9 	.word	0x00080db9

000807ec <readSecurityCodeAttemptsCounters>:
*   \brief  Read the number of code attempts left (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readSecurityCodeAttemptsCounters(uint8_t* buffer)
{
   807ec:	b510      	push	{r4, lr}
   807ee:	4604      	mov	r4, r0
    readSMC(14, 12, buffer);
   807f0:	4602      	mov	r2, r0
   807f2:	210c      	movs	r1, #12
   807f4:	200e      	movs	r0, #14
   807f6:	4b02      	ldr	r3, [pc, #8]	; (80800 <readSecurityCodeAttemptsCounters+0x14>)
   807f8:	4798      	blx	r3
    return buffer;
}
   807fa:	4620      	mov	r0, r4
   807fc:	bd10      	pop	{r4, pc}
   807fe:	bf00      	nop
   80800:	00080e85 	.word	0x00080e85

00080804 <readMemoryTestZone>:
*   \brief  Read the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readMemoryTestZone(uint8_t* buffer)
{
   80804:	b510      	push	{r4, lr}
   80806:	4604      	mov	r4, r0
    readSMC(178, 176, buffer);
   80808:	4602      	mov	r2, r0
   8080a:	21b0      	movs	r1, #176	; 0xb0
   8080c:	20b2      	movs	r0, #178	; 0xb2
   8080e:	4b02      	ldr	r3, [pc, #8]	; (80818 <readMemoryTestZone+0x14>)
   80810:	4798      	blx	r3
    return buffer;
}
   80812:	4620      	mov	r0, r4
   80814:	bd10      	pop	{r4, pc}
   80816:	bf00      	nop
   80818:	00080e85 	.word	0x00080e85

0008081c <writeMemoryTestZone>:
/*! \fn     writeMemoryTestZone(uint8_t* buffer)
*   \brief  Write in the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeMemoryTestZone(uint8_t* buffer)
{
   8081c:	b508      	push	{r3, lr}
    writeSMC(1408, 16, buffer);
   8081e:	4602      	mov	r2, r0
   80820:	2110      	movs	r1, #16
   80822:	f44f 60b0 	mov.w	r0, #1408	; 0x580
   80826:	4b01      	ldr	r3, [pc, #4]	; (8082c <writeMemoryTestZone+0x10>)
   80828:	4798      	blx	r3
   8082a:	bd08      	pop	{r3, pc}
   8082c:	00080db9 	.word	0x00080db9

00080830 <readManufacturerZone>:
*   \brief  Read the manufacturer zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readManufacturerZone(uint8_t* buffer)
{
   80830:	b510      	push	{r4, lr}
   80832:	4604      	mov	r4, r0
    readSMC(180, 178, buffer);
   80834:	4602      	mov	r2, r0
   80836:	21b2      	movs	r1, #178	; 0xb2
   80838:	20b4      	movs	r0, #180	; 0xb4
   8083a:	4b02      	ldr	r3, [pc, #8]	; (80844 <readManufacturerZone+0x14>)
   8083c:	4798      	blx	r3
    return buffer;
}
   8083e:	4620      	mov	r0, r4
   80840:	bd10      	pop	{r4, pc}
   80842:	bf00      	nop
   80844:	00080e85 	.word	0x00080e85

00080848 <writeManufacturerZone>:
/*! \fn     writeManufacturerZone(uint8_t* buffer)
*   \brief  Write in the manufacturer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeManufacturerZone(uint8_t* buffer)
{
   80848:	b508      	push	{r3, lr}
    writeSMC(1424, 16, buffer);
   8084a:	4602      	mov	r2, r0
   8084c:	2110      	movs	r1, #16
   8084e:	f44f 60b2 	mov.w	r0, #1424	; 0x590
   80852:	4b01      	ldr	r3, [pc, #4]	; (80858 <writeManufacturerZone+0x10>)
   80854:	4798      	blx	r3
   80856:	bd08      	pop	{r3, pc}
   80858:	00080db9 	.word	0x00080db9

0008085c <writeManufacturerFuse>:

/*! \fn     writeManufacturerFuse(void)
*   \brief  Write manufacturer fuse, controlling access to the MFZ
*/
void writeManufacturerFuse(void)
{
   8085c:	b508      	push	{r3, lr}
    blowFuse(MAN_FUSE);
   8085e:	2000      	movs	r0, #0
   80860:	4b01      	ldr	r3, [pc, #4]	; (80868 <writeManufacturerFuse+0xc>)
   80862:	4798      	blx	r3
   80864:	bd08      	pop	{r3, pc}
   80866:	bf00      	nop
   80868:	00080bdd 	.word	0x00080bdd

0008086c <write_issuers_fuse>:

/*! \fn     write_issuers_fuse(void)
*   \brief  Write issuers fuse, setting the AT88SC102 into Security Mode 2, we need to be authenticated here
*/
void write_issuers_fuse(void)
{
   8086c:	b508      	push	{r3, lr}
    blowFuse(ISSUER_FUSE);
   8086e:	2002      	movs	r0, #2
   80870:	4b01      	ldr	r3, [pc, #4]	; (80878 <write_issuers_fuse+0xc>)
   80872:	4798      	blx	r3
   80874:	bd08      	pop	{r3, pc}
   80876:	bf00      	nop
   80878:	00080bdd 	.word	0x00080bdd

0008087c <write_ec2en_fuse>:

/*! \fn     write_ec2en_fuse(void)
*   \brief  Write ec2en fuse, to be done before blowing issuer fuse
*/
void write_ec2en_fuse(void)
{
   8087c:	b508      	push	{r3, lr}
    blowFuse(EC2EN_FUSE);
   8087e:	2001      	movs	r0, #1
   80880:	4b01      	ldr	r3, [pc, #4]	; (80888 <write_ec2en_fuse+0xc>)
   80882:	4798      	blx	r3
   80884:	bd08      	pop	{r3, pc}
   80886:	bf00      	nop
   80888:	00080bdd 	.word	0x00080bdd

0008088c <checkSecurityMode2>:
/*! \fn     checkSecurityMode2(void)
*   \brief  Check that the smartcard is in mode two by trying to write his manufacturer zone
*   \return Success status
*/
RET_TYPE checkSecurityMode2(void)
{
   8088c:	b510      	push	{r4, lr}
   8088e:	b082      	sub	sp, #8
    uint16_t manZoneRead, temp_uint;
    
    // Read manufacturer zone, set temp_uint to its opposite
    readManufacturerZone((uint8_t*)&manZoneRead);
   80890:	f10d 0006 	add.w	r0, sp, #6
   80894:	4c0b      	ldr	r4, [pc, #44]	; (808c4 <checkSecurityMode2+0x38>)
   80896:	47a0      	blx	r4
    temp_uint = ~manZoneRead;
   80898:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8089c:	43db      	mvns	r3, r3
   8089e:	a802      	add	r0, sp, #8
   808a0:	f820 3d04 	strh.w	r3, [r0, #-4]!
    
    // Perform test write
    writeManufacturerZone((uint8_t*)&temp_uint);
   808a4:	4b08      	ldr	r3, [pc, #32]	; (808c8 <checkSecurityMode2+0x3c>)
   808a6:	4798      	blx	r3
    readManufacturerZone((uint8_t*)&manZoneRead);
   808a8:	f10d 0006 	add.w	r0, sp, #6
   808ac:	47a0      	blx	r4
    
    if (temp_uint != manZoneRead)
   808ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   808b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    } 
    else
    {
        return RETURN_NOK;
    }
}
   808b6:	4298      	cmp	r0, r3
   808b8:	f04f 30ff 	mov.w	r0, #4294967295
   808bc:	bf18      	it	ne
   808be:	2000      	movne	r0, #0
   808c0:	b002      	add	sp, #8
   808c2:	bd10      	pop	{r4, pc}
   808c4:	00080831 	.word	0x00080831
   808c8:	00080849 	.word	0x00080849

000808cc <writeSecurityCode>:
/*! \fn     writeSecurityCode(uint16_t* code)
*   \brief  Write a new security code (security mode 1&2 - Authenticated!)
*   \param  code  The pin code
*/
void writeSecurityCode(volatile uint16_t* code)
{
   808cc:	b510      	push	{r4, lr}
   808ce:	4604      	mov	r4, r0
    *code = swap16(*code);
   808d0:	8803      	ldrh	r3, [r0, #0]
   808d2:	8802      	ldrh	r2, [r0, #0]
   808d4:	b292      	uxth	r2, r2
   808d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808de:	b29b      	uxth	r3, r3
   808e0:	8003      	strh	r3, [r0, #0]
    writeSMC(80, 16, (uint8_t*)code);
   808e2:	4602      	mov	r2, r0
   808e4:	2110      	movs	r1, #16
   808e6:	2050      	movs	r0, #80	; 0x50
   808e8:	4b05      	ldr	r3, [pc, #20]	; (80900 <writeSecurityCode+0x34>)
   808ea:	4798      	blx	r3
    *code = swap16(*code);
   808ec:	8823      	ldrh	r3, [r4, #0]
   808ee:	8822      	ldrh	r2, [r4, #0]
   808f0:	b292      	uxth	r2, r2
   808f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808fa:	b29b      	uxth	r3, r3
   808fc:	8023      	strh	r3, [r4, #0]
   808fe:	bd10      	pop	{r4, pc}
   80900:	00080db9 	.word	0x00080db9

00080904 <resetBlankCard>:
{
   80904:	b500      	push	{lr}
   80906:	b083      	sub	sp, #12
    uint16_t default_pin = SMARTCARD_FACTORY_PIN;
   80908:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   8090c:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint8_t data_buffer[2] = {0xFF, 0xFF};
   80910:	4b08      	ldr	r3, [pc, #32]	; (80934 <resetBlankCard+0x30>)
   80912:	881b      	ldrh	r3, [r3, #0]
   80914:	aa02      	add	r2, sp, #8
   80916:	f822 3d04 	strh.w	r3, [r2, #-4]!
    writeSMC(1441, 1, data_buffer);
   8091a:	2101      	movs	r1, #1
   8091c:	f240 50a1 	movw	r0, #1441	; 0x5a1
   80920:	4b05      	ldr	r3, [pc, #20]	; (80938 <resetBlankCard+0x34>)
   80922:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   80924:	f10d 0006 	add.w	r0, sp, #6
   80928:	4b04      	ldr	r3, [pc, #16]	; (8093c <resetBlankCard+0x38>)
   8092a:	4798      	blx	r3
}
   8092c:	b003      	add	sp, #12
   8092e:	f85d fb04 	ldr.w	pc, [sp], #4
   80932:	bf00      	nop
   80934:	0008d89c 	.word	0x0008d89c
   80938:	00080db9 	.word	0x00080db9
   8093c:	000808cd 	.word	0x000808cd

00080940 <setAuthenticatedReadWriteAccessToZone1and2>:

/*! \fn     setAuthenticatedReadWriteAccessToZone1and2(void)
*   \brief  Function called to only allow reads and writes to the application zone 1 & 2 when authenticated
*/
void setAuthenticatedReadWriteAccessToZone1and2(void)
{
   80940:	b510      	push	{r4, lr}
   80942:	b082      	sub	sp, #8
    uint8_t temp_buffer[2] = {0x80, 0x00};
   80944:	2380      	movs	r3, #128	; 0x80
   80946:	f88d 3004 	strb.w	r3, [sp, #4]
   8094a:	2300      	movs	r3, #0
   8094c:	f88d 3005 	strb.w	r3, [sp, #5]
    // Set P1 to 1 to allow write, remove R1 to prevent non authenticated reads
    writeSMC(176, 16, temp_buffer);
   80950:	aa01      	add	r2, sp, #4
   80952:	2110      	movs	r1, #16
   80954:	20b0      	movs	r0, #176	; 0xb0
   80956:	4c04      	ldr	r4, [pc, #16]	; (80968 <setAuthenticatedReadWriteAccessToZone1and2+0x28>)
   80958:	47a0      	blx	r4
    // Set P2 to 1 to allow write, remove R2 to prevent non authenticated reads
    writeSMC(736, 16, temp_buffer);
   8095a:	aa01      	add	r2, sp, #4
   8095c:	2110      	movs	r1, #16
   8095e:	f44f 7038 	mov.w	r0, #736	; 0x2e0
   80962:	47a0      	blx	r4
}
   80964:	b002      	add	sp, #8
   80966:	bd10      	pop	{r4, pc}
   80968:	00080db9 	.word	0x00080db9

0008096c <transformBlankCardIntoMooltipass>:
{
   8096c:	b510      	push	{r4, lr}
   8096e:	b086      	sub	sp, #24
    uint16_t default_pin = SMARTCARD_DEFAULT_PIN;
   80970:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   80974:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (checkSecurityMode2() == RETURN_OK)
   80978:	4b13      	ldr	r3, [pc, #76]	; (809c8 <transformBlankCardIntoMooltipass+0x5c>)
   8097a:	4798      	blx	r3
   8097c:	b300      	cbz	r0, 809c0 <transformBlankCardIntoMooltipass+0x54>
    resetBlankCard();
   8097e:	4b13      	ldr	r3, [pc, #76]	; (809cc <transformBlankCardIntoMooltipass+0x60>)
   80980:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   80982:	f10d 0002 	add.w	r0, sp, #2
   80986:	4b12      	ldr	r3, [pc, #72]	; (809d0 <transformBlankCardIntoMooltipass+0x64>)
   80988:	4798      	blx	r3
    strcpy((char*)temp_buffer, "limpkin");
   8098a:	ac01      	add	r4, sp, #4
   8098c:	4b11      	ldr	r3, [pc, #68]	; (809d4 <transformBlankCardIntoMooltipass+0x68>)
   8098e:	e893 0003 	ldmia.w	r3, {r0, r1}
   80992:	e884 0003 	stmia.w	r4, {r0, r1}
    writeIssuerZone(temp_buffer);
   80996:	4620      	mov	r0, r4
   80998:	4b0f      	ldr	r3, [pc, #60]	; (809d8 <transformBlankCardIntoMooltipass+0x6c>)
   8099a:	4798      	blx	r3
    *temp_buf16 = swap16(2014);
   8099c:	f64d 6307 	movw	r3, #56839	; 0xde07
   809a0:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeManufacturerZone(temp_buffer);
   809a4:	4620      	mov	r0, r4
   809a6:	4b0d      	ldr	r3, [pc, #52]	; (809dc <transformBlankCardIntoMooltipass+0x70>)
   809a8:	4798      	blx	r3
    setAuthenticatedReadWriteAccessToZone1and2();
   809aa:	4b0d      	ldr	r3, [pc, #52]	; (809e0 <transformBlankCardIntoMooltipass+0x74>)
   809ac:	4798      	blx	r3
    writeManufacturerFuse();
   809ae:	4b0d      	ldr	r3, [pc, #52]	; (809e4 <transformBlankCardIntoMooltipass+0x78>)
   809b0:	4798      	blx	r3
    write_ec2en_fuse();
   809b2:	4b0d      	ldr	r3, [pc, #52]	; (809e8 <transformBlankCardIntoMooltipass+0x7c>)
   809b4:	4798      	blx	r3
    write_issuers_fuse();
   809b6:	4b0d      	ldr	r3, [pc, #52]	; (809ec <transformBlankCardIntoMooltipass+0x80>)
   809b8:	4798      	blx	r3
    return RETURN_OK;
   809ba:	2000      	movs	r0, #0
}
   809bc:	b006      	add	sp, #24
   809be:	bd10      	pop	{r4, pc}
        return RETURN_NOK;
   809c0:	f04f 30ff 	mov.w	r0, #4294967295
   809c4:	e7fa      	b.n	809bc <transformBlankCardIntoMooltipass+0x50>
   809c6:	bf00      	nop
   809c8:	0008088d 	.word	0x0008088d
   809cc:	00080905 	.word	0x00080905
   809d0:	000808cd 	.word	0x000808cd
   809d4:	0008d8a0 	.word	0x0008d8a0
   809d8:	000807d9 	.word	0x000807d9
   809dc:	00080849 	.word	0x00080849
   809e0:	00080941 	.word	0x00080941
   809e4:	0008085d 	.word	0x0008085d
   809e8:	0008087d 	.word	0x0008087d
   809ec:	0008086d 	.word	0x0008086d

000809f0 <getNumberOfSecurityCodeTriesLeft>:
/*! \fn     getNumberOfSecurityCodeTriesLeft(void)
*   \brief  Get the number of security code tries left
*   \return Number of tries left
*/
uint8_t getNumberOfSecurityCodeTriesLeft(void)
{
   809f0:	b500      	push	{lr}
   809f2:	b083      	sub	sp, #12
    uint8_t temp_buffer[2];
    uint8_t return_val = 0;
    uint8_t i;

    readSecurityCodeAttemptsCounters(temp_buffer);
   809f4:	a801      	add	r0, sp, #4
   809f6:	4b09      	ldr	r3, [pc, #36]	; (80a1c <getNumberOfSecurityCodeTriesLeft+0x2c>)
   809f8:	4798      	blx	r3
    for(i = 0; i < 4; i++)
    {
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   809fe:	2304      	movs	r3, #4
    uint8_t return_val = 0;
   80a00:	2000      	movs	r0, #0
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   80a02:	fa41 f203 	asr.w	r2, r1, r3
   80a06:	f012 0f01 	tst.w	r2, #1
        {
            return_val++;
   80a0a:	bf1c      	itt	ne
   80a0c:	3001      	addne	r0, #1
   80a0e:	b2c0      	uxtbne	r0, r0
   80a10:	3301      	adds	r3, #1
    for(i = 0; i < 4; i++)
   80a12:	2b08      	cmp	r3, #8
   80a14:	d1f5      	bne.n	80a02 <getNumberOfSecurityCodeTriesLeft+0x12>
        }
    }

    return return_val;
}
   80a16:	b003      	add	sp, #12
   80a18:	f85d fb04 	ldr.w	pc, [sp], #4
   80a1c:	000807ed 	.word	0x000807ed

00080a20 <smartcardHPulseDelay>:

/*! \fn     smartcardHPulseDelay(void)
*   \brief  2us half pulse delay, specified by datasheet (min 3.3us/2)
*/
void smartcardHPulseDelay(void)
{
   80a20:	b508      	push	{r3, lr}
    delay_us(2);
   80a22:	200e      	movs	r0, #14
   80a24:	4b01      	ldr	r3, [pc, #4]	; (80a2c <smartcardHPulseDelay+0xc>)
   80a26:	4798      	blx	r3
   80a28:	bd08      	pop	{r3, pc}
   80a2a:	bf00      	nop
   80a2c:	20000089 	.word	0x20000089

00080a30 <smartcardPowerDelay>:

/*! \fn     smartcardPowerDelay(void)
*   \brief  Delay to let the card come online/offline
*/
void smartcardPowerDelay(void)
{
   80a30:	b508      	push	{r3, lr}
    delay_ms(130);
   80a32:	4802      	ldr	r0, [pc, #8]	; (80a3c <smartcardPowerDelay+0xc>)
   80a34:	4b02      	ldr	r3, [pc, #8]	; (80a40 <smartcardPowerDelay+0x10>)
   80a36:	4798      	blx	r3
   80a38:	bd08      	pop	{r3, pc}
   80a3a:	bf00      	nop
   80a3c:	000d9a25 	.word	0x000d9a25
   80a40:	20000089 	.word	0x20000089

00080a44 <clockPulseSMC>:

/*! \fn     clockPulseSMC(void)
*   \brief  Send a 4us H->L clock pulse (datasheet: min 3.3us)
*/
void clockPulseSMC(void)
{
   80a44:	b570      	push	{r4, r5, r6, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a46:	4d04      	ldr	r5, [pc, #16]	; (80a58 <clockPulseSMC+0x14>)
   80a48:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a4c:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a4e:	4c03      	ldr	r4, [pc, #12]	; (80a5c <clockPulseSMC+0x18>)
   80a50:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a52:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a54:	47a0      	blx	r4
   80a56:	bd70      	pop	{r4, r5, r6, pc}
   80a58:	400e0c00 	.word	0x400e0c00
   80a5c:	00080a21 	.word	0x00080a21

00080a60 <invertedClockPulseSMC>:

/*! \fn     invertedClockPulseSMC(void)
*   \brief  Send a 4us L->H clock pulse (datasheet: min 3.3us)
*/
void invertedClockPulseSMC(void)
{
   80a60:	b570      	push	{r4, r5, r6, lr}
   80a62:	4d04      	ldr	r5, [pc, #16]	; (80a74 <invertedClockPulseSMC+0x14>)
   80a64:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a68:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a6a:	4c03      	ldr	r4, [pc, #12]	; (80a78 <invertedClockPulseSMC+0x18>)
   80a6c:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a6e:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a70:	47a0      	blx	r4
   80a72:	bd70      	pop	{r4, r5, r6, pc}
   80a74:	400e0c00 	.word	0x400e0c00
   80a78:	00080a21 	.word	0x00080a21

00080a7c <clearPgmRstSignals>:

/*! \fn     clearPgmRstSignals(void)
*   \brief  Clear PGM / RST signal for normal operation mode
*/
void clearPgmRstSignals(void)
{
   80a7c:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a7e:	4b04      	ldr	r3, [pc, #16]	; (80a90 <clearPgmRstSignals+0x14>)
   80a80:	2220      	movs	r2, #32
   80a82:	635a      	str	r2, [r3, #52]	; 0x34
   80a84:	2208      	movs	r2, #8
   80a86:	635a      	str	r2, [r3, #52]	; 0x34
	scard_pgm_low();
	scard_rst_low();
    smartcardHPulseDelay();
   80a88:	4c02      	ldr	r4, [pc, #8]	; (80a94 <clearPgmRstSignals+0x18>)
   80a8a:	47a0      	blx	r4
	smartcardHPulseDelay();
   80a8c:	47a0      	blx	r4
   80a8e:	bd10      	pop	{r4, pc}
   80a90:	400e0c00 	.word	0x400e0c00
   80a94:	00080a21 	.word	0x00080a21

00080a98 <setPgmRstSignals>:

/*! \fn     setPgmRstSignals(void)
*   \brief  Set PGM / RST signal for standby mode
*/
void setPgmRstSignals(void)
{
   80a98:	b508      	push	{r3, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a9a:	4b04      	ldr	r3, [pc, #16]	; (80aac <setPgmRstSignals+0x14>)
   80a9c:	2208      	movs	r2, #8
   80a9e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80aa0:	2220      	movs	r2, #32
   80aa2:	635a      	str	r2, [r3, #52]	; 0x34
	scard_rst_high();
	scard_pgm_low();
    smartcardHPulseDelay();
   80aa4:	4b02      	ldr	r3, [pc, #8]	; (80ab0 <setPgmRstSignals+0x18>)
   80aa6:	4798      	blx	r3
   80aa8:	bd08      	pop	{r3, pc}
   80aaa:	bf00      	nop
   80aac:	400e0c00 	.word	0x400e0c00
   80ab0:	00080a21 	.word	0x00080a21

00080ab4 <performLowLevelWriteNErase>:
/*! \fn     performLowLevelWriteNErase(uint8_t is_write)
*   \brief  Perform a write or erase operation on the smart card
*   \param  is_write    Boolean to indicate if it is a write
*/
void performLowLevelWriteNErase(uint8_t is_write)
{
   80ab4:	b570      	push	{r4, r5, r6, lr}
   80ab6:	4604      	mov	r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ab8:	2220      	movs	r2, #32
   80aba:	4b11      	ldr	r3, [pc, #68]	; (80b00 <performLowLevelWriteNErase+0x4c>)
   80abc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set programming control signal */
	scard_pgm_high();
    smartcardHPulseDelay();
   80abe:	4b11      	ldr	r3, [pc, #68]	; (80b04 <performLowLevelWriteNErase+0x50>)
   80ac0:	4798      	blx	r3

    /* Set data according to write / erase */
    if (is_write != FALSE)
   80ac2:	b9bc      	cbnz	r4, 80af4 <performLowLevelWriteNErase+0x40>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ac4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80ac8:	4b0d      	ldr	r3, [pc, #52]	; (80b00 <performLowLevelWriteNErase+0x4c>)
   80aca:	635a      	str	r2, [r3, #52]	; 0x34
    }
    else
    {
		scard_io_low();
    }
    smartcardHPulseDelay();
   80acc:	4c0d      	ldr	r4, [pc, #52]	; (80b04 <performLowLevelWriteNErase+0x50>)
   80ace:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ad0:	4d0b      	ldr	r5, [pc, #44]	; (80b00 <performLowLevelWriteNErase+0x4c>)
   80ad2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80ad6:	632e      	str	r6, [r5, #48]	; 0x30

    /* Set clock */
	scard_sck_high();
    smartcardHPulseDelay();
   80ad8:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ada:	2320      	movs	r3, #32
   80adc:	636b      	str	r3, [r5, #52]	; 0x34
    delay_ms(4);
   80ade:	f646 3025 	movw	r0, #27429	; 0x6b25
   80ae2:	4b09      	ldr	r3, [pc, #36]	; (80b08 <performLowLevelWriteNErase+0x54>)
   80ae4:	4798      	blx	r3
   80ae6:	636e      	str	r6, [r5, #52]	; 0x34
    scard_pgm_low();
    smartcardTchpDelay();

    /* Release clock */
    scard_sck_low();
    smartcardHPulseDelay();
   80ae8:	47a0      	blx	r4
   80aea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80aee:	636b      	str	r3, [r5, #52]	; 0x34

    /* Release data */
    scard_io_low();
    smartcardHPulseDelay();
   80af0:	47a0      	blx	r4
   80af2:	bd70      	pop	{r4, r5, r6, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80af4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80af8:	4b01      	ldr	r3, [pc, #4]	; (80b00 <performLowLevelWriteNErase+0x4c>)
   80afa:	631a      	str	r2, [r3, #48]	; 0x30
   80afc:	e7e6      	b.n	80acc <performLowLevelWriteNErase+0x18>
   80afe:	bf00      	nop
   80b00:	400e0c00 	.word	0x400e0c00
   80b04:	00080a21 	.word	0x00080a21
   80b08:	20000089 	.word	0x20000089

00080b0c <setSPIModeSMC>:

/*! \fn     setSPIModeSMC(void)
*   \brief  Activate SPI controller for the SMC
*/
void setSPIModeSMC(void)
{
   80b0c:	b530      	push	{r4, r5, lr}
   80b0e:	b085      	sub	sp, #20
	usart_spi_opt_t opts;
	
	opts.baudrate = 125000;
   80b10:	4b12      	ldr	r3, [pc, #72]	; (80b5c <setSPIModeSMC+0x50>)
   80b12:	9300      	str	r3, [sp, #0]
	opts.char_length = US_MR_CHRL_8_BIT;
   80b14:	23c0      	movs	r3, #192	; 0xc0
   80b16:	9301      	str	r3, [sp, #4]
	opts.channel_mode = US_MR_CHMODE_NORMAL;
   80b18:	2300      	movs	r3, #0
   80b1a:	9303      	str	r3, [sp, #12]
	opts.spi_mode = SPI_MODE_0;
   80b1c:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80b1e:	200f      	movs	r0, #15
   80b20:	4b0f      	ldr	r3, [pc, #60]	; (80b60 <setSPIModeSMC+0x54>)
   80b22:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	usart_init_spi_master(SCARD_USART, &opts ,sysclk_get_cpu_hz());
   80b24:	4c0f      	ldr	r4, [pc, #60]	; (80b64 <setSPIModeSMC+0x58>)
   80b26:	4a10      	ldr	r2, [pc, #64]	; (80b68 <setSPIModeSMC+0x5c>)
   80b28:	4669      	mov	r1, sp
   80b2a:	4620      	mov	r0, r4
   80b2c:	4b0f      	ldr	r3, [pc, #60]	; (80b6c <setSPIModeSMC+0x60>)
   80b2e:	4798      	blx	r3
	gpio_configure_pin(SCARD_IOTX_IDX, PIO_PERIPH_A);
   80b30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b34:	2016      	movs	r0, #22
   80b36:	4d0e      	ldr	r5, [pc, #56]	; (80b70 <setSPIModeSMC+0x64>)
   80b38:	47a8      	blx	r5
	gpio_configure_pin(SCARD_IORX_IDX, PIO_PERIPH_A);
   80b3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b3e:	2017      	movs	r0, #23
   80b40:	47a8      	blx	r5
	gpio_configure_pin(SCARD_SCK_IDX, SCK_PERIPH);
   80b42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b46:	2019      	movs	r0, #25
   80b48:	47a8      	blx	r5
	
	usart_enable_rx(SCARD_USART);
   80b4a:	4620      	mov	r0, r4
   80b4c:	4b09      	ldr	r3, [pc, #36]	; (80b74 <setSPIModeSMC+0x68>)
   80b4e:	4798      	blx	r3
	usart_enable_tx(SCARD_USART);
   80b50:	4620      	mov	r0, r4
   80b52:	4b09      	ldr	r3, [pc, #36]	; (80b78 <setSPIModeSMC+0x6c>)
   80b54:	4798      	blx	r3
	
}
   80b56:	b005      	add	sp, #20
   80b58:	bd30      	pop	{r4, r5, pc}
   80b5a:	bf00      	nop
   80b5c:	0001e848 	.word	0x0001e848
   80b60:	00085515 	.word	0x00085515
   80b64:	40098000 	.word	0x40098000
   80b68:	05b8d800 	.word	0x05b8d800
   80b6c:	00086c75 	.word	0x00086c75
   80b70:	000851d1 	.word	0x000851d1
   80b74:	00086de9 	.word	0x00086de9
   80b78:	00086dd9 	.word	0x00086dd9

00080b7c <setBBModeAndPgmRstSMC>:

/*! \fn     setBBModeAndPgmRstSMC(void)
*   \brief  Switch to big banging, and clear pgm/rst signal for normal operation
*/
void setBBModeAndPgmRstSMC(void)
{
   80b7c:	b510      	push	{r4, lr}
    /* Deactivate SPI port */
    usart_disable_rx(SCARD_USART);
   80b7e:	4c10      	ldr	r4, [pc, #64]	; (80bc0 <setBBModeAndPgmRstSMC+0x44>)
   80b80:	4620      	mov	r0, r4
   80b82:	4b10      	ldr	r3, [pc, #64]	; (80bc4 <setBBModeAndPgmRstSMC+0x48>)
   80b84:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80b86:	4620      	mov	r0, r4
   80b88:	4b0f      	ldr	r3, [pc, #60]	; (80bc8 <setBBModeAndPgmRstSMC+0x4c>)
   80b8a:	4798      	blx	r3

    /* Clock & data low */
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b8c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b90:	2016      	movs	r0, #22
   80b92:	4c0e      	ldr	r4, [pc, #56]	; (80bcc <setBBModeAndPgmRstSMC+0x50>)
   80b94:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80b96:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80b9a:	2017      	movs	r0, #23
   80b9c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b9e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ba2:	2019      	movs	r0, #25
   80ba4:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ba6:	4b0a      	ldr	r3, [pc, #40]	; (80bd0 <setBBModeAndPgmRstSMC+0x54>)
   80ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80bac:	635a      	str	r2, [r3, #52]	; 0x34
   80bae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80bb2:	635a      	str	r2, [r3, #52]	; 0x34
    scard_sck_low();
    scard_io_low();
	
    smartcardHPulseDelay();
   80bb4:	4b07      	ldr	r3, [pc, #28]	; (80bd4 <setBBModeAndPgmRstSMC+0x58>)
   80bb6:	4798      	blx	r3

    /* Clear PGM and RST signals */
    clearPgmRstSignals();
   80bb8:	4b07      	ldr	r3, [pc, #28]	; (80bd8 <setBBModeAndPgmRstSMC+0x5c>)
   80bba:	4798      	blx	r3
   80bbc:	bd10      	pop	{r4, pc}
   80bbe:	bf00      	nop
   80bc0:	40098000 	.word	0x40098000
   80bc4:	00086def 	.word	0x00086def
   80bc8:	00086ddf 	.word	0x00086ddf
   80bcc:	000851d1 	.word	0x000851d1
   80bd0:	400e0c00 	.word	0x400e0c00
   80bd4:	00080a21 	.word	0x00080a21
   80bd8:	00080a7d 	.word	0x00080a7d

00080bdc <blowFuse>:
/*! \fn     blowFuse(uint8_t fuse_name)
*   \brief  Blow the manufacturer or issuer fuse
*   \param  fuse_name    Which fuse to blow
*/
void blowFuse(uint8_t fuse_name)
{
   80bdc:	b538      	push	{r3, r4, r5, lr}
    uint16_t i;

    /* Set the index to write */
    if (fuse_name == MAN_FUSE)
   80bde:	b130      	cbz	r0, 80bee <blowFuse+0x12>
    {
        i = 1460;
    }
    else if (fuse_name == ISSUER_FUSE)
   80be0:	2802      	cmp	r0, #2
   80be2:	d019      	beq.n	80c18 <blowFuse+0x3c>
    {
        i = 1560;
    }
    else if (fuse_name == EC2EN_FUSE)
   80be4:	2801      	cmp	r0, #1
   80be6:	d01a      	beq.n	80c1e <blowFuse+0x42>
    {
        i = 0;
    }

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80be8:	4b0e      	ldr	r3, [pc, #56]	; (80c24 <blowFuse+0x48>)
   80bea:	4798      	blx	r3
   80bec:	e009      	b.n	80c02 <blowFuse+0x26>
        i = 1460;
   80bee:	f240 54b4 	movw	r4, #1460	; 0x5b4
    setBBModeAndPgmRstSMC();
   80bf2:	4b0c      	ldr	r3, [pc, #48]	; (80c24 <blowFuse+0x48>)
   80bf4:	4798      	blx	r3

    /* Get to the good index */
    while(i--)clockPulseSMC();
   80bf6:	4d0c      	ldr	r5, [pc, #48]	; (80c28 <blowFuse+0x4c>)
   80bf8:	47a8      	blx	r5
   80bfa:	3c01      	subs	r4, #1
   80bfc:	b2a4      	uxth	r4, r4
   80bfe:	2c00      	cmp	r4, #0
   80c00:	d1fa      	bne.n	80bf8 <blowFuse+0x1c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c02:	2208      	movs	r2, #8
   80c04:	4b09      	ldr	r3, [pc, #36]	; (80c2c <blowFuse+0x50>)
   80c06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set RST signal */
	scard_rst_high();

    /* Perform a write */
    performLowLevelWriteNErase(TRUE);
   80c08:	2001      	movs	r0, #1
   80c0a:	4b09      	ldr	r3, [pc, #36]	; (80c30 <blowFuse+0x54>)
   80c0c:	4798      	blx	r3

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80c0e:	4b09      	ldr	r3, [pc, #36]	; (80c34 <blowFuse+0x58>)
   80c10:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80c12:	4b09      	ldr	r3, [pc, #36]	; (80c38 <blowFuse+0x5c>)
   80c14:	4798      	blx	r3
}
   80c16:	bd38      	pop	{r3, r4, r5, pc}
        i = 1560;
   80c18:	f44f 64c3 	mov.w	r4, #1560	; 0x618
   80c1c:	e7e9      	b.n	80bf2 <blowFuse+0x16>
        i = 1529;
   80c1e:	f240 54f9 	movw	r4, #1529	; 0x5f9
   80c22:	e7e6      	b.n	80bf2 <blowFuse+0x16>
   80c24:	00080b7d 	.word	0x00080b7d
   80c28:	00080a45 	.word	0x00080a45
   80c2c:	400e0c00 	.word	0x400e0c00
   80c30:	00080ab5 	.word	0x00080ab5
   80c34:	00080a99 	.word	0x00080a99
   80c38:	00080b0d 	.word	0x00080b0d

00080c3c <securityValidationSMC>:
*   \brief  Check security code
*   \param  code    The code
*   \return success_status (see card_detect_return_t)
*/
RET_TYPE securityValidationSMC(uint16_t code, uint8_t reset_after_send)
{
   80c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80c40:	4607      	mov	r7, r0
   80c42:	460e      	mov	r6, r1
    RET_TYPE return_val = RETURN_PIN_NOK_0;
    uint8_t temp_bool;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80c44:	4b53      	ldr	r3, [pc, #332]	; (80d94 <securityValidationSMC+0x158>)
   80c46:	4798      	blx	r3
   80c48:	2450      	movs	r4, #80	; 0x50

    /* Get to the SC */
    for(i = 0; i < 80; i++)
        invertedClockPulseSMC();
   80c4a:	4d53      	ldr	r5, [pc, #332]	; (80d98 <securityValidationSMC+0x15c>)
   80c4c:	47a8      	blx	r5
   80c4e:	3c01      	subs	r4, #1
   80c50:	b2a4      	uxth	r4, r4
    for(i = 0; i < 80; i++)
   80c52:	2c00      	cmp	r4, #0
   80c54:	d1fa      	bne.n	80c4c <securityValidationSMC+0x10>
   80c56:	2210      	movs	r2, #16
   80c58:	4b50      	ldr	r3, [pc, #320]	; (80d9c <securityValidationSMC+0x160>)
   80c5a:	631a      	str	r2, [r3, #48]	; 0x30

	scard_aux1_high();	

    /* Clock is at high level now, as input must be switched during this time */
    /* Enter the SC */
    smartcardHPulseDelay();
   80c5c:	4b50      	ldr	r3, [pc, #320]	; (80da0 <securityValidationSMC+0x164>)
   80c5e:	4798      	blx	r3
   80c60:	240f      	movs	r4, #15
   80c62:	f8df 9138 	ldr.w	r9, [pc, #312]	; 80d9c <securityValidationSMC+0x160>
        }
        else
        {
            scard_io_high();
        }
        smartcardHPulseDelay();
   80c66:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80da0 <securityValidationSMC+0x164>

        /* Inverted clock pulse */
        invertedClockPulseSMC();
   80c6a:	4d4b      	ldr	r5, [pc, #300]	; (80d98 <securityValidationSMC+0x15c>)
        if (((code >> (15-i)) & 0x0001) != 0x0000)
   80c6c:	fa47 f304 	asr.w	r3, r7, r4
   80c70:	f013 0f01 	tst.w	r3, #1
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c78:	bf14      	ite	ne
   80c7a:	f8c9 3034 	strne.w	r3, [r9, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c7e:	f8c9 3030 	streq.w	r3, [r9, #48]	; 0x30
        smartcardHPulseDelay();
   80c82:	47c0      	blx	r8
        invertedClockPulseSMC();
   80c84:	47a8      	blx	r5
   80c86:	3c01      	subs	r4, #1
    for(i = 0; i < 16; i++)
   80c88:	f1b4 3fff 	cmp.w	r4, #4294967295
   80c8c:	d1ee      	bne.n	80c6c <securityValidationSMC+0x30>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c8e:	4d43      	ldr	r5, [pc, #268]	; (80d9c <securityValidationSMC+0x160>)
   80c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80c94:	636b      	str	r3, [r5, #52]	; 0x34
    }

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   80c96:	4c42      	ldr	r4, [pc, #264]	; (80da0 <securityValidationSMC+0x164>)
   80c98:	47a0      	blx	r4
	smartcardHPulseDelay();
   80c9a:	47a0      	blx	r4
   80c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ca0:	636b      	str	r3, [r5, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();	
   80ca2:	47a0      	blx	r4
	smartcardHPulseDelay();
   80ca4:	47a0      	blx	r4
	
	if (reset_after_send == 1){
   80ca6:	2e01      	cmp	r6, #1
   80ca8:	d003      	beq.n	80cb2 <securityValidationSMC+0x76>
   80caa:	2400      	movs	r4, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80cac:	4d3b      	ldr	r5, [pc, #236]	; (80d9c <securityValidationSMC+0x160>)
            temp_bool = FALSE;
        }
        else
        {
            /* Clock pulse */
            clockPulseSMC();
   80cae:	4f3d      	ldr	r7, [pc, #244]	; (80da4 <securityValidationSMC+0x168>)
   80cb0:	e050      	b.n	80d54 <securityValidationSMC+0x118>
		delay_us(10);
   80cb2:	2045      	movs	r0, #69	; 0x45
   80cb4:	4b3c      	ldr	r3, [pc, #240]	; (80da8 <securityValidationSMC+0x16c>)
   80cb6:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cb8:	2210      	movs	r2, #16
   80cba:	636a      	str	r2, [r5, #52]	; 0x34
		setPgmRstSignals();
   80cbc:	4b3b      	ldr	r3, [pc, #236]	; (80dac <securityValidationSMC+0x170>)
   80cbe:	4798      	blx	r3
		setSPIModeSMC();
   80cc0:	4b3b      	ldr	r3, [pc, #236]	; (80db0 <securityValidationSMC+0x174>)
   80cc2:	4798      	blx	r3
		return RETURN_PIN_NOK_0;
   80cc4:	2520      	movs	r5, #32
   80cc6:	e060      	b.n	80d8a <securityValidationSMC+0x14e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80cc8:	4c34      	ldr	r4, [pc, #208]	; (80d9c <securityValidationSMC+0x160>)
   80cca:	2520      	movs	r5, #32
   80ccc:	6325      	str	r5, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cce:	4e34      	ldr	r6, [pc, #208]	; (80da0 <securityValidationSMC+0x164>)
   80cd0:	47b0      	blx	r6
   80cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80cd6:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cd8:	47b0      	blx	r6
   80cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80cde:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80ce0:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ce2:	2310      	movs	r3, #16
   80ce4:	6363      	str	r3, [r4, #52]	; 0x34
				setPgmRstSignals();
   80ce6:	4b31      	ldr	r3, [pc, #196]	; (80dac <securityValidationSMC+0x170>)
   80ce8:	4798      	blx	r3
				setSPIModeSMC();
   80cea:	4b31      	ldr	r3, [pc, #196]	; (80db0 <securityValidationSMC+0x174>)
   80cec:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80cee:	e04c      	b.n	80d8a <securityValidationSMC+0x14e>
			if (reset_after_send == 3){			
   80cf0:	2e03      	cmp	r6, #3
   80cf2:	d00f      	beq.n	80d14 <securityValidationSMC+0xd8>
            performLowLevelWriteNErase(FALSE);
   80cf4:	2000      	movs	r0, #0
   80cf6:	4b2f      	ldr	r3, [pc, #188]	; (80db4 <securityValidationSMC+0x178>)
   80cf8:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80cfa:	4b28      	ldr	r3, [pc, #160]	; (80d9c <securityValidationSMC+0x160>)
   80cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            if (scard_io_read())
   80cfe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80d02:	d110      	bne.n	80d26 <securityValidationSMC+0xea>
                if (i == 0)
   80d04:	b1ec      	cbz	r4, 80d42 <securityValidationSMC+0x106>
                else if (i == 1)
   80d06:	2c01      	cmp	r4, #1
   80d08:	d01d      	beq.n	80d46 <securityValidationSMC+0x10a>
                else if (i == 2)
   80d0a:	2c02      	cmp	r4, #2
   80d0c:	bf0c      	ite	eq
   80d0e:	2521      	moveq	r5, #33	; 0x21
   80d10:	2520      	movne	r5, #32
   80d12:	e009      	b.n	80d28 <securityValidationSMC+0xec>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d14:	2210      	movs	r2, #16
   80d16:	4b21      	ldr	r3, [pc, #132]	; (80d9c <securityValidationSMC+0x160>)
   80d18:	635a      	str	r2, [r3, #52]	; 0x34
				setPgmRstSignals();
   80d1a:	4b24      	ldr	r3, [pc, #144]	; (80dac <securityValidationSMC+0x170>)
   80d1c:	4798      	blx	r3
				setSPIModeSMC();
   80d1e:	4b24      	ldr	r3, [pc, #144]	; (80db0 <securityValidationSMC+0x174>)
   80d20:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80d22:	2520      	movs	r5, #32
   80d24:	e031      	b.n	80d8a <securityValidationSMC+0x14e>
                return_val = RETURN_PIN_OK;
   80d26:	2524      	movs	r5, #36	; 0x24
            clockPulseSMC();
   80d28:	4b1e      	ldr	r3, [pc, #120]	; (80da4 <securityValidationSMC+0x168>)
   80d2a:	4798      	blx	r3
    }

    /* If we couldn't find a spot to write, no tries left */
    if (i == 4)
    {
        return_val = RETURN_PIN_NOK_0;
   80d2c:	2c04      	cmp	r4, #4
   80d2e:	bf08      	it	eq
   80d30:	2520      	moveq	r5, #32
   80d32:	2210      	movs	r2, #16
   80d34:	4b19      	ldr	r3, [pc, #100]	; (80d9c <securityValidationSMC+0x160>)
   80d36:	635a      	str	r2, [r3, #52]	; 0x34


	scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80d38:	4b1c      	ldr	r3, [pc, #112]	; (80dac <securityValidationSMC+0x170>)
   80d3a:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80d3c:	4b1c      	ldr	r3, [pc, #112]	; (80db0 <securityValidationSMC+0x174>)
   80d3e:	4798      	blx	r3

    return return_val;
   80d40:	e023      	b.n	80d8a <securityValidationSMC+0x14e>
                    return_val = RETURN_PIN_NOK_3;
   80d42:	2523      	movs	r5, #35	; 0x23
   80d44:	e7f0      	b.n	80d28 <securityValidationSMC+0xec>
                    return_val = RETURN_PIN_NOK_2;
   80d46:	2522      	movs	r5, #34	; 0x22
   80d48:	e7ee      	b.n	80d28 <securityValidationSMC+0xec>
            clockPulseSMC();
   80d4a:	47b8      	blx	r7
            i++;
   80d4c:	3401      	adds	r4, #1
   80d4e:	b2a4      	uxth	r4, r4
    while((temp_bool == TRUE) && (i < 4))
   80d50:	2c04      	cmp	r4, #4
   80d52:	d01d      	beq.n	80d90 <securityValidationSMC+0x154>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80d54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        if (scard_io_read())
   80d56:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80d5a:	d0f6      	beq.n	80d4a <securityValidationSMC+0x10e>
			if (reset_after_send == 2){			
   80d5c:	2e02      	cmp	r6, #2
   80d5e:	d0b3      	beq.n	80cc8 <securityValidationSMC+0x8c>
            performLowLevelWriteNErase(TRUE);
   80d60:	2001      	movs	r0, #1
   80d62:	4b14      	ldr	r3, [pc, #80]	; (80db4 <securityValidationSMC+0x178>)
   80d64:	4798      	blx	r3
            while(scard_io_read())
   80d66:	2320      	movs	r3, #32
   80d68:	490c      	ldr	r1, [pc, #48]	; (80d9c <securityValidationSMC+0x160>)
   80d6a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   80d6c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   80d70:	d0be      	beq.n	80cf0 <securityValidationSMC+0xb4>
   80d72:	3b01      	subs	r3, #1
   80d74:	b29b      	uxth	r3, r3
				if(timeout == 0)
   80d76:	2b00      	cmp	r3, #0
   80d78:	d1f7      	bne.n	80d6a <securityValidationSMC+0x12e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d7a:	2210      	movs	r2, #16
   80d7c:	4b07      	ldr	r3, [pc, #28]	; (80d9c <securityValidationSMC+0x160>)
   80d7e:	635a      	str	r2, [r3, #52]	; 0x34
					setPgmRstSignals();
   80d80:	4b0a      	ldr	r3, [pc, #40]	; (80dac <securityValidationSMC+0x170>)
   80d82:	4798      	blx	r3
					setSPIModeSMC();
   80d84:	4b0a      	ldr	r3, [pc, #40]	; (80db0 <securityValidationSMC+0x174>)
   80d86:	4798      	blx	r3
					return RETURN_PIN_TIMEOUT;
   80d88:	2525      	movs	r5, #37	; 0x25
}
   80d8a:	4628      	mov	r0, r5
   80d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return_val = RETURN_PIN_NOK_0;
   80d90:	2520      	movs	r5, #32
   80d92:	e7ce      	b.n	80d32 <securityValidationSMC+0xf6>
   80d94:	00080b7d 	.word	0x00080b7d
   80d98:	00080a61 	.word	0x00080a61
   80d9c:	400e0c00 	.word	0x400e0c00
   80da0:	00080a21 	.word	0x00080a21
   80da4:	00080a45 	.word	0x00080a45
   80da8:	20000089 	.word	0x20000089
   80dac:	00080a99 	.word	0x00080a99
   80db0:	00080b0d 	.word	0x00080b0d
   80db4:	00080ab5 	.word	0x00080ab5

00080db8 <writeSMC>:
*   \param  start_index_bit         Where to start writing bits
*   \param  nb_bits                 Number of bits to write
*   \param  data_to_write           Pointer to the buffer
*/
void writeSMC(uint16_t start_index_bit, uint16_t nb_bits, uint8_t* data_to_write)
{
   80db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80dbc:	4606      	mov	r6, r0
   80dbe:	460f      	mov	r7, r1
   80dc0:	4690      	mov	r8, r2
    uint16_t current_written_bit = 0;
    uint8_t masked_bit_to_write = 0;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80dc2:	4b2a      	ldr	r3, [pc, #168]	; (80e6c <writeSMC+0xb4>)
   80dc4:	4798      	blx	r3

    /* Try to not erase AZ1 if EZ1 is 0xFFFFFFF... and we're writing the first bit of the AZ2 */
    if (start_index_bit >= SMARTCARD_AZ2_BIT_START)
   80dc6:	f5b6 7f38 	cmp.w	r6, #736	; 0x2e0
   80dca:	d208      	bcs.n	80dde <writeSMC+0x26>
        }                
    }
    else
    {
        /* Get to the good index, clock pulses */
        for(i = 0; i < start_index_bit; i++)
   80dcc:	b316      	cbz	r6, 80e14 <writeSMC+0x5c>
   80dce:	2400      	movs	r4, #0
        {
            clockPulseSMC();
   80dd0:	4d27      	ldr	r5, [pc, #156]	; (80e70 <writeSMC+0xb8>)
   80dd2:	47a8      	blx	r5
        for(i = 0; i < start_index_bit; i++)
   80dd4:	3401      	adds	r4, #1
   80dd6:	b2a4      	uxth	r4, r4
   80dd8:	42a6      	cmp	r6, r4
   80dda:	d1fa      	bne.n	80dd2 <writeSMC+0x1a>
   80ddc:	e01a      	b.n	80e14 <writeSMC+0x5c>
   80dde:	f240 24df 	movw	r4, #735	; 0x2df
            clockPulseSMC();            
   80de2:	4d23      	ldr	r5, [pc, #140]	; (80e70 <writeSMC+0xb8>)
   80de4:	47a8      	blx	r5
   80de6:	3c01      	subs	r4, #1
   80de8:	b2a4      	uxth	r4, r4
        for(i = 0; i < SMARTCARD_AZ2_BIT_START - 1; i++)
   80dea:	2c00      	cmp	r4, #0
   80dec:	d1fa      	bne.n	80de4 <writeSMC+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80dee:	4c21      	ldr	r4, [pc, #132]	; (80e74 <writeSMC+0xbc>)
   80df0:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
   80df4:	6325      	str	r5, [r4, #48]	; 0x30
        clockPulseSMC();
   80df6:	4b1e      	ldr	r3, [pc, #120]	; (80e70 <writeSMC+0xb8>)
   80df8:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80dfa:	6365      	str	r5, [r4, #52]	; 0x34
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80dfc:	f5a6 7538 	sub.w	r5, r6, #736	; 0x2e0
   80e00:	2d00      	cmp	r5, #0
   80e02:	dd07      	ble.n	80e14 <writeSMC+0x5c>
   80e04:	2400      	movs	r4, #0
            clockPulseSMC();            
   80e06:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80e70 <writeSMC+0xb8>
   80e0a:	47c8      	blx	r9
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80e0c:	3401      	adds	r4, #1
   80e0e:	b2a4      	uxth	r4, r4
   80e10:	42ac      	cmp	r4, r5
   80e12:	dbfa      	blt.n	80e0a <writeSMC+0x52>
        }                
    }

    /* Start writing */
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80e14:	b327      	cbz	r7, 80e60 <writeSMC+0xa8>
   80e16:	3f01      	subs	r7, #1
   80e18:	b2bf      	uxth	r7, r7
   80e1a:	3701      	adds	r7, #1
   80e1c:	2500      	movs	r5, #0
    {
        /* If we are at the start of a 16bits word or writing our first bit, erase the word */
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
        {
            performLowLevelWriteNErase(FALSE);
   80e1e:	46ab      	mov	fp, r5
   80e20:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80e80 <writeSMC+0xc8>
        {
            performLowLevelWriteNErase(TRUE);
        }

        /* Go to next address */
        clockPulseSMC();
   80e24:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80e70 <writeSMC+0xb8>
   80e28:	e00f      	b.n	80e4a <writeSMC+0x92>
            performLowLevelWriteNErase(FALSE);
   80e2a:	4658      	mov	r0, fp
   80e2c:	47d0      	blx	sl
        masked_bit_to_write = (data_to_write[(current_written_bit>>3)] >> (7 - (current_written_bit & 0x0007))) & 0x01;
   80e2e:	08e4      	lsrs	r4, r4, #3
   80e30:	f818 3004 	ldrb.w	r3, [r8, r4]
   80e34:	43ea      	mvns	r2, r5
   80e36:	f002 0207 	and.w	r2, r2, #7
   80e3a:	4113      	asrs	r3, r2
        if (masked_bit_to_write == 0x00)
   80e3c:	f013 0f01 	tst.w	r3, #1
   80e40:	d00b      	beq.n	80e5a <writeSMC+0xa2>
        clockPulseSMC();
   80e42:	47c8      	blx	r9
   80e44:	3501      	adds	r5, #1
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80e46:	42bd      	cmp	r5, r7
   80e48:	d00a      	beq.n	80e60 <writeSMC+0xa8>
   80e4a:	b2ac      	uxth	r4, r5
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
   80e4c:	1933      	adds	r3, r6, r4
   80e4e:	f013 0f0f 	tst.w	r3, #15
   80e52:	d0ea      	beq.n	80e2a <writeSMC+0x72>
   80e54:	2c00      	cmp	r4, #0
   80e56:	d1ea      	bne.n	80e2e <writeSMC+0x76>
   80e58:	e7e7      	b.n	80e2a <writeSMC+0x72>
            performLowLevelWriteNErase(TRUE);
   80e5a:	2001      	movs	r0, #1
   80e5c:	47d0      	blx	sl
   80e5e:	e7f0      	b.n	80e42 <writeSMC+0x8a>
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80e60:	4b05      	ldr	r3, [pc, #20]	; (80e78 <writeSMC+0xc0>)
   80e62:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80e64:	4b05      	ldr	r3, [pc, #20]	; (80e7c <writeSMC+0xc4>)
   80e66:	4798      	blx	r3
   80e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e6c:	00080b7d 	.word	0x00080b7d
   80e70:	00080a45 	.word	0x00080a45
   80e74:	400e0c00 	.word	0x400e0c00
   80e78:	00080a99 	.word	0x00080a99
   80e7c:	00080b0d 	.word	0x00080b0d
   80e80:	00080ab5 	.word	0x00080ab5

00080e84 <readSMC>:
*   \param  start_record_index      The index at which we start recording the answer
*   \param  data_to_receive        Pointer to the buffer
*   \return The buffer
*/
uint8_t* readSMC(uint8_t nb_bytes_total_read, uint8_t start_record_index, uint8_t* data_to_receive)
{
   80e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e88:	b083      	sub	sp, #12
   80e8a:	4607      	mov	r7, r0
   80e8c:	468a      	mov	sl, r1
   80e8e:	4693      	mov	fp, r2
    uint8_t* return_val = data_to_receive;
    uint8_t i;

    /* Set PGM / RST signals for operation */
    clearPgmRstSignals();
   80e90:	4b12      	ldr	r3, [pc, #72]	; (80edc <readSMC+0x58>)
   80e92:	4798      	blx	r3
	
	/* Read */
	uint32_t temp;
    for(i = 0; i < nb_bytes_total_read; i++)
   80e94:	b1df      	cbz	r7, 80ece <readSMC+0x4a>
   80e96:	465e      	mov	r6, fp
   80e98:	2500      	movs	r5, #0
    {
        /* Start transmission */
		usart_putchar(SCARD_USART, 0x00);
   80e9a:	4c11      	ldr	r4, [pc, #68]	; (80ee0 <readSMC+0x5c>)
   80e9c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80ee8 <readSMC+0x64>
        /* Store data in buffer or discard it*/
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
				
		usart_getchar(SCARD_USART, &temp);
   80ea0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80eec <readSMC+0x68>
   80ea4:	e003      	b.n	80eae <readSMC+0x2a>
    for(i = 0; i < nb_bytes_total_read; i++)
   80ea6:	3501      	adds	r5, #1
   80ea8:	b2ed      	uxtb	r5, r5
   80eaa:	42af      	cmp	r7, r5
   80eac:	d00f      	beq.n	80ece <readSMC+0x4a>
		usart_putchar(SCARD_USART, 0x00);
   80eae:	2100      	movs	r1, #0
   80eb0:	4620      	mov	r0, r4
   80eb2:	47c8      	blx	r9
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
   80eb4:	6963      	ldr	r3, [r4, #20]
   80eb6:	f013 0f02 	tst.w	r3, #2
   80eba:	d0fb      	beq.n	80eb4 <readSMC+0x30>
		usart_getchar(SCARD_USART, &temp);
   80ebc:	a901      	add	r1, sp, #4
   80ebe:	4620      	mov	r0, r4
   80ec0:	47c0      	blx	r8
		
        if (i >= start_record_index)
   80ec2:	45aa      	cmp	sl, r5
   80ec4:	d8ef      	bhi.n	80ea6 <readSMC+0x22>
        {			
			*(data_to_receive++) = (uint8_t)temp;
   80ec6:	9b01      	ldr	r3, [sp, #4]
   80ec8:	7033      	strb	r3, [r6, #0]
   80eca:	3601      	adds	r6, #1
   80ecc:	e7eb      	b.n	80ea6 <readSMC+0x22>
        }
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80ece:	4b05      	ldr	r3, [pc, #20]	; (80ee4 <readSMC+0x60>)
   80ed0:	4798      	blx	r3

    return return_val;
}
   80ed2:	4658      	mov	r0, fp
   80ed4:	b003      	add	sp, #12
   80ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80eda:	bf00      	nop
   80edc:	00080a7d 	.word	0x00080a7d
   80ee0:	40098000 	.word	0x40098000
   80ee4:	00080a99 	.word	0x00080a99
   80ee8:	00086e39 	.word	0x00086e39
   80eec:	00086e63 	.word	0x00086e63

00080ef0 <firstDetectFunctionSMC>:
/*! \fn     firstDetectFunctionSMC(void)
*   \brief  functions performed once the smart card is detected
*   \return The detection result (see card_detect_return_t)
*/
RET_TYPE firstDetectFunctionSMC(void)
{
   80ef0:	b510      	push	{r4, lr}
   80ef2:	b082      	sub	sp, #8
    uint8_t data_buffer[2];
    uint16_t *data_buf16 = (uint16_t*)data_buffer;
    uint16_t temp_uint;

	/* Fuse pin low */
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ef4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ef8:	2004      	movs	r0, #4
   80efa:	4c27      	ldr	r4, [pc, #156]	; (80f98 <firstDetectFunctionSMC+0xa8>)
   80efc:	47a0      	blx	r4

    /* Default state: PGM to 0 and RST to 1 */
	gpio_configure_pin(SCARD_PGM_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80efe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80f02:	2005      	movs	r0, #5
   80f04:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   80f06:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f0a:	2003      	movs	r0, #3
   80f0c:	47a0      	blx	r4
   80f0e:	4b23      	ldr	r3, [pc, #140]	; (80f9c <firstDetectFunctionSMC+0xac>)
   80f10:	2220      	movs	r2, #32
   80f12:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80f14:	2208      	movs	r2, #8
   80f16:	631a      	str	r2, [r3, #48]	; 0x30
    scard_pgm_low();
	scard_rst_high();

    /* Activate SPI port */
    setSPIModeSMC();
   80f18:	4b21      	ldr	r3, [pc, #132]	; (80fa0 <firstDetectFunctionSMC+0xb0>)
   80f1a:	4798      	blx	r3
    
    /* Let the card come online */
    smartcardPowerDelay();
   80f1c:	4b21      	ldr	r3, [pc, #132]	; (80fa4 <firstDetectFunctionSMC+0xb4>)
   80f1e:	4798      	blx	r3

    /* Check smart card FZ */
    readFabricationZone(data_buffer);
   80f20:	a801      	add	r0, sp, #4
   80f22:	4b21      	ldr	r3, [pc, #132]	; (80fa8 <firstDetectFunctionSMC+0xb8>)
   80f24:	4798      	blx	r3
    if ((swap16(*data_buf16)) != SMARTCARD_FABRICATION_ZONE)
   80f26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   80f2a:	0213      	lsls	r3, r2, #8
   80f2c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80f30:	b21b      	sxth	r3, r3
   80f32:	f640 720f 	movw	r2, #3855	; 0xf0f
   80f36:	4293      	cmp	r3, r2
   80f38:	d002      	beq.n	80f40 <firstDetectFunctionSMC+0x50>
    {
        return RETURN_CARD_NDET;
   80f3a:	2001      	movs	r0, #1
        case 2: return RETURN_CARD_2_TRIES_LEFT;
        case 1: return RETURN_CARD_1_TRIES_LEFT;
        case 0: return RETURN_CARD_0_TRIES_LEFT;
        default: return RETURN_CARD_0_TRIES_LEFT;
    }
}
   80f3c:	b002      	add	sp, #8
   80f3e:	bd10      	pop	{r4, pc}
    readMemoryTestZone((uint8_t*)&temp_uint);
   80f40:	f10d 0002 	add.w	r0, sp, #2
   80f44:	4c19      	ldr	r4, [pc, #100]	; (80fac <firstDetectFunctionSMC+0xbc>)
   80f46:	47a0      	blx	r4
    temp_uint = temp_uint + 5;
   80f48:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f4c:	3305      	adds	r3, #5
   80f4e:	f8ad 3002 	strh.w	r3, [sp, #2]
    writeMemoryTestZone((uint8_t*)&temp_uint);
   80f52:	f10d 0002 	add.w	r0, sp, #2
   80f56:	4b16      	ldr	r3, [pc, #88]	; (80fb0 <firstDetectFunctionSMC+0xc0>)
   80f58:	4798      	blx	r3
    if (*(uint16_t*)readMemoryTestZone(data_buffer) != temp_uint)
   80f5a:	a801      	add	r0, sp, #4
   80f5c:	47a0      	blx	r4
   80f5e:	8802      	ldrh	r2, [r0, #0]
   80f60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f64:	429a      	cmp	r2, r3
        return RETURN_CARD_TEST_PB;
   80f66:	bf18      	it	ne
   80f68:	2002      	movne	r0, #2
    if (*(uint16_t*)readMemoryTestZone(data_buffer) != temp_uint)
   80f6a:	d1e7      	bne.n	80f3c <firstDetectFunctionSMC+0x4c>
    switch(getNumberOfSecurityCodeTriesLeft())
   80f6c:	4b11      	ldr	r3, [pc, #68]	; (80fb4 <firstDetectFunctionSMC+0xc4>)
   80f6e:	4798      	blx	r3
   80f70:	2804      	cmp	r0, #4
   80f72:	d80c      	bhi.n	80f8e <firstDetectFunctionSMC+0x9e>
   80f74:	e8df f000 	tbb	[pc, r0]
   80f78:	03050709 	.word	0x03050709
   80f7c:	0d          	.byte	0x0d
   80f7d:	00          	.byte	0x00
        case 3: return RETURN_CARD_3_TRIES_LEFT;
   80f7e:	2013      	movs	r0, #19
   80f80:	e7dc      	b.n	80f3c <firstDetectFunctionSMC+0x4c>
        case 2: return RETURN_CARD_2_TRIES_LEFT;
   80f82:	2012      	movs	r0, #18
   80f84:	e7da      	b.n	80f3c <firstDetectFunctionSMC+0x4c>
        case 1: return RETURN_CARD_1_TRIES_LEFT;
   80f86:	2011      	movs	r0, #17
   80f88:	e7d8      	b.n	80f3c <firstDetectFunctionSMC+0x4c>
        case 0: return RETURN_CARD_0_TRIES_LEFT;
   80f8a:	2010      	movs	r0, #16
   80f8c:	e7d6      	b.n	80f3c <firstDetectFunctionSMC+0x4c>
        default: return RETURN_CARD_0_TRIES_LEFT;
   80f8e:	2010      	movs	r0, #16
   80f90:	e7d4      	b.n	80f3c <firstDetectFunctionSMC+0x4c>
        case 4: return RETURN_CARD_4_TRIES_LEFT;
   80f92:	2014      	movs	r0, #20
   80f94:	e7d2      	b.n	80f3c <firstDetectFunctionSMC+0x4c>
   80f96:	bf00      	nop
   80f98:	000851d1 	.word	0x000851d1
   80f9c:	400e0c00 	.word	0x400e0c00
   80fa0:	00080b0d 	.word	0x00080b0d
   80fa4:	00080a31 	.word	0x00080a31
   80fa8:	000807c1 	.word	0x000807c1
   80fac:	00080805 	.word	0x00080805
   80fb0:	0008081d 	.word	0x0008081d
   80fb4:	000809f1 	.word	0x000809f1

00080fb8 <removeFunctionSMC>:

/*! \fn     removeFunctionSMC(void)
*   \brief  functions performed once the smart card is removed
*/
void removeFunctionSMC(void)
{
   80fb8:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80fba:	2220      	movs	r2, #32
   80fbc:	4b11      	ldr	r3, [pc, #68]	; (81004 <removeFunctionSMC+0x4c>)
   80fbe:	635a      	str	r2, [r3, #52]	; 0x34
    /* Setup all output pins as tri-state */
    scard_pgm_low();
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fc0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fc4:	2004      	movs	r0, #4
   80fc6:	4c10      	ldr	r4, [pc, #64]	; (81008 <removeFunctionSMC+0x50>)
   80fc8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_AUX2_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fce:	2005      	movs	r0, #5
   80fd0:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fd2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fd6:	2003      	movs	r0, #3
   80fd8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fda:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fde:	2016      	movs	r0, #22
   80fe0:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fe2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fe6:	2017      	movs	r0, #23
   80fe8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fee:	2019      	movs	r0, #25
   80ff0:	47a0      	blx	r4
	
    /* Deactivate port */
	usart_disable_rx(SCARD_USART);
   80ff2:	4c06      	ldr	r4, [pc, #24]	; (8100c <removeFunctionSMC+0x54>)
   80ff4:	4620      	mov	r0, r4
   80ff6:	4b06      	ldr	r3, [pc, #24]	; (81010 <removeFunctionSMC+0x58>)
   80ff8:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80ffa:	4620      	mov	r0, r4
   80ffc:	4b05      	ldr	r3, [pc, #20]	; (81014 <removeFunctionSMC+0x5c>)
   80ffe:	4798      	blx	r3
   81000:	bd10      	pop	{r4, pc}
   81002:	bf00      	nop
   81004:	400e0c00 	.word	0x400e0c00
   81008:	000851d1 	.word	0x000851d1
   8100c:	40098000 	.word	0x40098000
   81010:	00086def 	.word	0x00086def
   81014:	00086ddf 	.word	0x00086ddf

00081018 <initPortSMC>:

/*! \fn     initPortSMC(void)
*   \brief  Initialize smart card port
*/
void initPortSMC(void)
{
   81018:	b508      	push	{r3, lr}
    /* Setup card detection input with pull-up */
	gpio_configure_pin(SCARD_PRESENT_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT | PIO_PULLUP));
   8101a:	4904      	ldr	r1, [pc, #16]	; (8102c <initPortSMC+0x14>)
   8101c:	2002      	movs	r0, #2
   8101e:	4b04      	ldr	r3, [pc, #16]	; (81030 <initPortSMC+0x18>)
   81020:	4798      	blx	r3
        PORT_SPI_NATIVE &= ~(1 << MISO_SPI_NATIVE);
        PORT_SPI_NATIVE |= (1 << SS_SPI_NATIVE);
    #endif

    /* Set all output pins as tri-state */
    removeFunctionSMC();
   81022:	4b04      	ldr	r3, [pc, #16]	; (81034 <initPortSMC+0x1c>)
   81024:	4798      	blx	r3
	setPgmRstSignals();
   81026:	4b04      	ldr	r3, [pc, #16]	; (81038 <initPortSMC+0x20>)
   81028:	4798      	blx	r3
   8102a:	bd08      	pop	{r3, pc}
   8102c:	28000001 	.word	0x28000001
   81030:	000851d1 	.word	0x000851d1
   81034:	00080fb9 	.word	0x00080fb9
   81038:	00080a99 	.word	0x00080a99

0008103c <compareBit>:


// Greg's function
// Walk up to the security code register, enter a bit in the right place, then reset.
void compareBit(uint16_t bit, uint16_t value)
{
   8103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8103e:	4605      	mov	r5, r0
   81040:	460f      	mov	r7, r1
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   81042:	4b18      	ldr	r3, [pc, #96]	; (810a4 <compareBit+0x68>)
   81044:	4798      	blx	r3

    /* Get to the SC */
    for(i = 0; i < 80 + bit; i++)
   81046:	3550      	adds	r5, #80	; 0x50
   81048:	2400      	movs	r4, #0
		invertedClockPulseSMC();
   8104a:	4e17      	ldr	r6, [pc, #92]	; (810a8 <compareBit+0x6c>)
   8104c:	47b0      	blx	r6
    for(i = 0; i < 80 + bit; i++)
   8104e:	3401      	adds	r4, #1
   81050:	b2a4      	uxth	r4, r4
   81052:	42ac      	cmp	r4, r5
   81054:	dbfa      	blt.n	8104c <compareBit+0x10>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81056:	2210      	movs	r2, #16
   81058:	4b14      	ldr	r3, [pc, #80]	; (810ac <compareBit+0x70>)
   8105a:	631a      	str	r2, [r3, #48]	; 0x30

    scard_aux1_high();

    // Clock is at high level now, as input must be switched during this time */
    // Enter test value
    smartcardHPulseDelay();
   8105c:	4b14      	ldr	r3, [pc, #80]	; (810b0 <compareBit+0x74>)
   8105e:	4798      	blx	r3
	if (value)
   81060:	b9df      	cbnz	r7, 8109a <compareBit+0x5e>
   81062:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81066:	4b11      	ldr	r3, [pc, #68]	; (810ac <compareBit+0x70>)
   81068:	631a      	str	r2, [r3, #48]	; 0x30
    }
    else
    {
	    scard_io_high();
    }
    smartcardHPulseDelay();
   8106a:	4c11      	ldr	r4, [pc, #68]	; (810b0 <compareBit+0x74>)
   8106c:	47a0      	blx	r4
    invertedClockPulseSMC();
   8106e:	4b0e      	ldr	r3, [pc, #56]	; (810a8 <compareBit+0x6c>)
   81070:	4798      	blx	r3
   81072:	4d0e      	ldr	r5, [pc, #56]	; (810ac <compareBit+0x70>)
   81074:	2308      	movs	r3, #8
   81076:	632b      	str	r3, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   8107c:	636b      	str	r3, [r5, #52]	; 0x34
	// Bring reset high
	scard_rst_high();

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   8107e:	47a0      	blx	r4
    smartcardHPulseDelay();
   81080:	47a0      	blx	r4
   81082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   81086:	636b      	str	r3, [r5, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();
   81088:	47a0      	blx	r4
    smartcardHPulseDelay();
   8108a:	47a0      	blx	r4
   8108c:	2310      	movs	r3, #16
   8108e:	636b      	str	r3, [r5, #52]	; 0x34
    
	// Cleanup
    scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   81090:	4b08      	ldr	r3, [pc, #32]	; (810b4 <compareBit+0x78>)
   81092:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   81094:	4b08      	ldr	r3, [pc, #32]	; (810b8 <compareBit+0x7c>)
   81096:	4798      	blx	r3
   81098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8109a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8109e:	4b03      	ldr	r3, [pc, #12]	; (810ac <compareBit+0x70>)
   810a0:	635a      	str	r2, [r3, #52]	; 0x34
   810a2:	e7e2      	b.n	8106a <compareBit+0x2e>
   810a4:	00080b7d 	.word	0x00080b7d
   810a8:	00080a61 	.word	0x00080a61
   810ac:	400e0c00 	.word	0x400e0c00
   810b0:	00080a21 	.word	0x00080a21
   810b4:	00080a99 	.word	0x00080a99
   810b8:	00080b0d 	.word	0x00080b0d

000810bc <iso7816_update_crc>:
 * \param crc CRC result.
 *
 * \return CRC value.
 */
static uint16_t iso7816_update_crc(uint8_t data, uint16_t crc)
{
   810bc:	b410      	push	{r4}
	uint8_t idx;
	uint16_t tmp = (uint16_t)data << 8;
   810be:	0200      	lsls	r0, r0, #8
   810c0:	2308      	movs	r3, #8

	for (idx = 0; idx < 8; idx++) {
		if ((crc ^ tmp) & 0x8000) {
			crc <<= 1;
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   810c2:	f241 0421 	movw	r4, #4129	; 0x1021
		if ((crc ^ tmp) & 0x8000) {
   810c6:	ea81 0200 	eor.w	r2, r1, r0
   810ca:	f412 4f00 	tst.w	r2, #32768	; 0x8000
			crc <<= 1;
   810ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
   810d2:	b289      	uxth	r1, r1
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   810d4:	bf18      	it	ne
   810d6:	4061      	eorne	r1, r4
		} else {
			crc <<= 1;
		}

		tmp <<= 1;
   810d8:	0040      	lsls	r0, r0, #1
   810da:	b280      	uxth	r0, r0
   810dc:	3b01      	subs	r3, #1
	for (idx = 0; idx < 8; idx++) {
   810de:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   810e2:	d1f0      	bne.n	810c6 <iso7816_update_crc+0xa>
	}

	return crc;
}
   810e4:	4608      	mov	r0, r1
   810e6:	bc10      	pop	{r4}
   810e8:	4770      	bx	lr
	...

000810ec <iso7816_icc_power_off>:
{
   810ec:	b508      	push	{r3, lr}
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   810ee:	4b02      	ldr	r3, [pc, #8]	; (810f8 <iso7816_icc_power_off+0xc>)
   810f0:	6818      	ldr	r0, [r3, #0]
   810f2:	4b02      	ldr	r3, [pc, #8]	; (810fc <iso7816_icc_power_off+0x10>)
   810f4:	4798      	blx	r3
   810f6:	bd08      	pop	{r3, pc}
   810f8:	200023ec 	.word	0x200023ec
   810fc:	000851b5 	.word	0x000851b5

00081100 <iso7816_get_char>:
 * \param p_char_received Pointer for store the received char.
 *
 * \return 0xff: if timeout else status of US_CSR.
 */
uint32_t iso7816_get_char(Usart* p_usart, uint8_t *p_char_received)
{
   81100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81104:	b083      	sub	sp, #12
   81106:	4605      	mov	r5, r0
   81108:	4689      	mov	r9, r1
	uint32_t ul_data;
	uint32_t ul_status;
	uint32_t ul_timeout = 0;

	if (gs_uc_state == USART_SEND) {		
   8110a:	4b1d      	ldr	r3, [pc, #116]	; (81180 <iso7816_get_char+0x80>)
   8110c:	781b      	ldrb	r3, [r3, #0]
   8110e:	b943      	cbnz	r3, 81122 <iso7816_get_char+0x22>
		while ((usart_get_status(p_usart) & US_CSR_TXEMPTY) ==
   81110:	4c1c      	ldr	r4, [pc, #112]	; (81184 <iso7816_get_char+0x84>)
   81112:	4628      	mov	r0, r5
   81114:	47a0      	blx	r4
   81116:	f410 7f00 	tst.w	r0, #512	; 0x200
   8111a:	d0fa      	beq.n	81112 <iso7816_get_char+0x12>
		/*
		usart_reset_status(p_usart);
		usart_reset_iterations(p_usart);
		usart_reset_nack(p_usart);
		*/
		gs_uc_state = USART_RCV;
   8111c:	2201      	movs	r2, #1
   8111e:	4b18      	ldr	r3, [pc, #96]	; (81180 <iso7816_get_char+0x80>)
   81120:	701a      	strb	r2, [r3, #0]
{
   81122:	2400      	movs	r4, #0
		//iso7816_icc_power_off();
		//iso7816_icc_power_on();	
	}

	/* Wait USART ready for reception. */
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   81124:	4e17      	ldr	r6, [pc, #92]	; (81184 <iso7816_get_char+0x84>)
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   81126:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81194 <iso7816_get_char+0x94>
   8112a:	4f17      	ldr	r7, [pc, #92]	; (81188 <iso7816_get_char+0x88>)
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   8112c:	4628      	mov	r0, r5
   8112e:	47b0      	blx	r6
   81130:	f010 0f01 	tst.w	r0, #1
   81134:	d10d      	bne.n	81152 <iso7816_get_char+0x52>
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   81136:	1c61      	adds	r1, r4, #1
   81138:	f8d8 3000 	ldr.w	r3, [r8]
   8113c:	fba7 2303 	umull	r2, r3, r7, r3
   81140:	0c9b      	lsrs	r3, r3, #18
   81142:	f642 62e0 	movw	r2, #12000	; 0x2ee0
   81146:	fb02 f303 	mul.w	r3, r2, r3
   8114a:	429c      	cmp	r4, r3
   8114c:	d813      	bhi.n	81176 <iso7816_get_char+0x76>
   8114e:	460c      	mov	r4, r1
   81150:	e7ec      	b.n	8112c <iso7816_get_char+0x2c>
		}
	}

	/* At least one complete character has been received and US_RHR has not
	 * yet been read. */
	usart_read(p_usart, &ul_data);
   81152:	a901      	add	r1, sp, #4
   81154:	4628      	mov	r0, r5
   81156:	4b0d      	ldr	r3, [pc, #52]	; (8118c <iso7816_get_char+0x8c>)
   81158:	4798      	blx	r3
	/* ISO7816 only has 8 bits data. */
	*p_char_received = 0xFF & ul_data;
   8115a:	9b01      	ldr	r3, [sp, #4]
   8115c:	f889 3000 	strb.w	r3, [r9]

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   81160:	4628      	mov	r0, r5
   81162:	4b08      	ldr	r3, [pc, #32]	; (81184 <iso7816_get_char+0x84>)
   81164:	4798      	blx	r3
   81166:	f242 54e0 	movw	r4, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   8116a:	4004      	ands	r4, r0
   8116c:	d004      	beq.n	81178 <iso7816_get_char+0x78>
		usart_reset_status(p_usart);
   8116e:	4628      	mov	r0, r5
   81170:	4b07      	ldr	r3, [pc, #28]	; (81190 <iso7816_get_char+0x90>)
   81172:	4798      	blx	r3
   81174:	e000      	b.n	81178 <iso7816_get_char+0x78>
			return (0xff);
   81176:	24ff      	movs	r4, #255	; 0xff
	}

	/* Return status. */
	return (ul_status);
}
   81178:	4620      	mov	r0, r4
   8117a:	b003      	add	sp, #12
   8117c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81180:	200002f0 	.word	0x200002f0
   81184:	00086e01 	.word	0x00086e01
   81188:	431bde83 	.word	0x431bde83
   8118c:	00086e4b 	.word	0x00086e4b
   81190:	00086e05 	.word	0x00086e05
   81194:	200023e8 	.word	0x200023e8

00081198 <iso7816_send_char>:
 * \param uc_char Char to be sent.
 *
 * \return status of US_CSR.
 */
uint32_t iso7816_send_char(Usart* p_usart, uint8_t uc_char)
{
   81198:	b570      	push	{r4, r5, r6, lr}
   8119a:	4604      	mov	r4, r0
   8119c:	460e      	mov	r6, r1
	uint32_t ul_status;

	if (USART_RCV == gs_uc_state) {
   8119e:	4b14      	ldr	r3, [pc, #80]	; (811f0 <iso7816_send_char+0x58>)
   811a0:	781b      	ldrb	r3, [r3, #0]
   811a2:	2b01      	cmp	r3, #1
   811a4:	d013      	beq.n	811ce <iso7816_send_char+0x36>
		usart_reset_nack(p_usart);
		gs_uc_state = USART_SEND;
	}

	/* Wait USART ready for transmit. */
	while ((usart_get_status(p_usart) & US_CSR_TXRDY) == 0) {
   811a6:	4d13      	ldr	r5, [pc, #76]	; (811f4 <iso7816_send_char+0x5c>)
   811a8:	4620      	mov	r0, r4
   811aa:	47a8      	blx	r5
   811ac:	f010 0f02 	tst.w	r0, #2
   811b0:	d0fa      	beq.n	811a8 <iso7816_send_char+0x10>
	}

	/* There is no character in the US_THR, transmit a char. */
	usart_write(p_usart, uc_char);
   811b2:	4631      	mov	r1, r6
   811b4:	4620      	mov	r0, r4
   811b6:	4b10      	ldr	r3, [pc, #64]	; (811f8 <iso7816_send_char+0x60>)
   811b8:	4798      	blx	r3

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   811ba:	4620      	mov	r0, r4
   811bc:	4b0d      	ldr	r3, [pc, #52]	; (811f4 <iso7816_send_char+0x5c>)
   811be:	4798      	blx	r3
   811c0:	f242 53e0 	movw	r3, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   811c4:	ea10 0503 	ands.w	r5, r0, r3
   811c8:	d10d      	bne.n	811e6 <iso7816_send_char+0x4e>
		usart_reset_status(p_usart);
	}

	/* Return status. */
	return (ul_status);
}
   811ca:	4628      	mov	r0, r5
   811cc:	bd70      	pop	{r4, r5, r6, pc}
		usart_reset_status(p_usart);
   811ce:	4b0b      	ldr	r3, [pc, #44]	; (811fc <iso7816_send_char+0x64>)
   811d0:	4798      	blx	r3
		usart_reset_iterations(p_usart);
   811d2:	4620      	mov	r0, r4
   811d4:	4b0a      	ldr	r3, [pc, #40]	; (81200 <iso7816_send_char+0x68>)
   811d6:	4798      	blx	r3
		usart_reset_nack(p_usart);
   811d8:	4620      	mov	r0, r4
   811da:	4b0a      	ldr	r3, [pc, #40]	; (81204 <iso7816_send_char+0x6c>)
   811dc:	4798      	blx	r3
		gs_uc_state = USART_SEND;
   811de:	2200      	movs	r2, #0
   811e0:	4b03      	ldr	r3, [pc, #12]	; (811f0 <iso7816_send_char+0x58>)
   811e2:	701a      	strb	r2, [r3, #0]
   811e4:	e7df      	b.n	811a6 <iso7816_send_char+0xe>
		usart_reset_status(p_usart);
   811e6:	4620      	mov	r0, r4
   811e8:	4b04      	ldr	r3, [pc, #16]	; (811fc <iso7816_send_char+0x64>)
   811ea:	4798      	blx	r3
	return (ul_status);
   811ec:	e7ed      	b.n	811ca <iso7816_send_char+0x32>
   811ee:	bf00      	nop
   811f0:	200002f0 	.word	0x200002f0
   811f4:	00086e01 	.word	0x00086e01
   811f8:	00086e25 	.word	0x00086e25
   811fc:	00086e05 	.word	0x00086e05
   81200:	00086e0d 	.word	0x00086e0d
   81204:	00086e15 	.word	0x00086e15

00081208 <iso7816_xfr_block_apdu_t0>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t0(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   81208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8120c:	b087      	sub	sp, #28
   8120e:	4607      	mov	r7, r0
   81210:	9001      	str	r0, [sp, #4]
   81212:	4689      	mov	r9, r1
   81214:	4692      	mov	sl, r2
   81216:	461c      	mov	r4, r3
	uint8_t uc_proc_byte;
	uint8_t uc_cmd_case;
	
	uint32_t status = 0;

	status |= iso7816_send_char(p_usart, p_apdu[0]); /* CLA */
   81218:	7809      	ldrb	r1, [r1, #0]
   8121a:	4e6e      	ldr	r6, [pc, #440]	; (813d4 <iso7816_xfr_block_apdu_t0+0x1cc>)
   8121c:	47b0      	blx	r6
   8121e:	4605      	mov	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[1]); /* INS */	
   81220:	f899 1001 	ldrb.w	r1, [r9, #1]
   81224:	4638      	mov	r0, r7
   81226:	47b0      	blx	r6
   81228:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[2]); /* P1 */
   8122a:	f899 1002 	ldrb.w	r1, [r9, #2]
   8122e:	4638      	mov	r0, r7
   81230:	47b0      	blx	r6
   81232:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[3]); /* P2 */
   81234:	f899 1003 	ldrb.w	r1, [r9, #3]
   81238:	4638      	mov	r0, r7
   8123a:	47b0      	blx	r6
   8123c:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[4]); /* P3 */
   8123e:	f899 1004 	ldrb.w	r1, [r9, #4]
   81242:	4638      	mov	r0, r7
   81244:	47b0      	blx	r6
   81246:	4305      	orrs	r5, r0

	/* Handle the four structures of command APDU. */
	us_apdu_index = 5;

	/* Check transfer cases */
	if (us_length == 4) {
   81248:	2c04      	cmp	r4, #4
   8124a:	d02c      	beq.n	812a6 <iso7816_xfr_block_apdu_t0+0x9e>
		uc_cmd_case = CASE1;
		us_ne_nc = 0;
	} else if (us_length == 5) {
   8124c:	2c05      	cmp	r4, #5
   8124e:	d010      	beq.n	81272 <iso7816_xfr_block_apdu_t0+0x6a>
		uc_cmd_case = CASE2;
		us_ne_nc = p_apdu[4];
		if (us_ne_nc == 0) {
			us_ne_nc = 256;
		}
	} else if (us_length == 6) {
   81250:	2c06      	cmp	r4, #6
   81252:	d016      	beq.n	81282 <iso7816_xfr_block_apdu_t0+0x7a>
		us_ne_nc = p_apdu[4];
		uc_cmd_case = CASE3;
	} else if (us_length == 7) {
   81254:	2c07      	cmp	r4, #7
   81256:	d019      	beq.n	8128c <iso7816_xfr_block_apdu_t0+0x84>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
		} else {
			uc_cmd_case = CASE3;
		}
	} else {
		us_ne_nc = p_apdu[4];
   81258:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   8125c:	bb94      	cbnz	r4, 812c4 <iso7816_xfr_block_apdu_t0+0xbc>
			uc_cmd_case = CASE3;
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   8125e:	f899 3005 	ldrb.w	r3, [r9, #5]
   81262:	f899 4006 	ldrb.w	r4, [r9, #6]
   81266:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   8126a:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE3;
   8126c:	f04f 0803 	mov.w	r8, #3
   81270:	e01c      	b.n	812ac <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81272:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81276:	b9fc      	cbnz	r4, 812b8 <iso7816_xfr_block_apdu_t0+0xb0>
		uc_cmd_case = CASE2;
   81278:	f04f 0802 	mov.w	r8, #2
			us_ne_nc = 256;
   8127c:	f44f 7480 	mov.w	r4, #256	; 0x100
   81280:	e014      	b.n	812ac <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81282:	f899 4004 	ldrb.w	r4, [r9, #4]
		uc_cmd_case = CASE3;
   81286:	f04f 0803 	mov.w	r8, #3
   8128a:	e00f      	b.n	812ac <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   8128c:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81290:	b9ac      	cbnz	r4, 812be <iso7816_xfr_block_apdu_t0+0xb6>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81292:	f899 3005 	ldrb.w	r3, [r9, #5]
   81296:	f899 4006 	ldrb.w	r4, [r9, #6]
   8129a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   8129e:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE2;
   812a0:	f04f 0802 	mov.w	r8, #2
   812a4:	e002      	b.n	812ac <iso7816_xfr_block_apdu_t0+0xa4>
		uc_cmd_case = CASE1;
   812a6:	f04f 0801 	mov.w	r8, #1
		us_ne_nc = 0;
   812aa:	2400      	movs	r4, #0
		uc_cmd_case = CASE2;
   812ac:	2300      	movs	r3, #0
   812ae:	9302      	str	r3, [sp, #8]
   812b0:	9303      	str	r3, [sp, #12]
   812b2:	2705      	movs	r7, #5
		}
	}

	/* Handle procedure bytes. */
	do {
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   812b4:	4e48      	ldr	r6, [pc, #288]	; (813d8 <iso7816_xfr_block_apdu_t0+0x1d0>)
   812b6:	e056      	b.n	81366 <iso7816_xfr_block_apdu_t0+0x15e>
		uc_cmd_case = CASE2;
   812b8:	f04f 0802 	mov.w	r8, #2
   812bc:	e7f6      	b.n	812ac <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   812be:	f04f 0803 	mov.w	r8, #3
   812c2:	e7f3      	b.n	812ac <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   812c4:	f04f 0803 	mov.w	r8, #3
   812c8:	e7f0      	b.n	812ac <iso7816_xfr_block_apdu_t0+0xa4>
				((uc_proc_byte & 0xF0) == 0x90)) {
			uc_sw1 = 1;
		}
		/* Handle INS. */
		else if (p_apdu[1] == uc_proc_byte) {
			if (uc_cmd_case == CASE2) {
   812ca:	f1b8 0f02 	cmp.w	r8, #2
   812ce:	d026      	beq.n	8131e <iso7816_xfr_block_apdu_t0+0x116>
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
				} while (0 != --us_ne_nc);
			} else {
				/* Send data. */
				do {
					status |= iso7816_send_char(p_usart,
   812d0:	f8df b100 	ldr.w	fp, [pc, #256]	; 813d4 <iso7816_xfr_block_apdu_t0+0x1cc>
							p_apdu[us_apdu_index++]);
   812d4:	1c7e      	adds	r6, r7, #1
   812d6:	b2b6      	uxth	r6, r6
					status |= iso7816_send_char(p_usart,
   812d8:	f819 1007 	ldrb.w	r1, [r9, r7]
   812dc:	9801      	ldr	r0, [sp, #4]
   812de:	47d8      	blx	fp
   812e0:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   812e2:	3c01      	subs	r4, #1
   812e4:	b2a4      	uxth	r4, r4
							p_apdu[us_apdu_index++]);
   812e6:	4637      	mov	r7, r6
				} while (0 != --us_ne_nc);
   812e8:	2c00      	cmp	r4, #0
   812ea:	d1f3      	bne.n	812d4 <iso7816_xfr_block_apdu_t0+0xcc>
			break;
		}
	} while (us_ne_nc != 0);

	/* Status Bytes. */
	if (uc_sw1 == 0) {
   812ec:	9b02      	ldr	r3, [sp, #8]
   812ee:	2b00      	cmp	r3, #0
   812f0:	d065      	beq.n	813be <iso7816_xfr_block_apdu_t0+0x1b6>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
	} else {
		p_message[us_message_index++] = uc_proc_byte;
   812f2:	9a03      	ldr	r2, [sp, #12]
   812f4:	1c54      	adds	r4, r2, #1
   812f6:	b2a4      	uxth	r4, r4
   812f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   812fc:	f80a 3002 	strb.w	r3, [sl, r2]
	}

	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   81300:	eb0a 0104 	add.w	r1, sl, r4
   81304:	9801      	ldr	r0, [sp, #4]
   81306:	4b34      	ldr	r3, [pc, #208]	; (813d8 <iso7816_xfr_block_apdu_t0+0x1d0>)
   81308:	4798      	blx	r3
	
	printf("%x\n", (unsigned int)status);
   8130a:	ea45 0100 	orr.w	r1, r5, r0
   8130e:	4833      	ldr	r0, [pc, #204]	; (813dc <iso7816_xfr_block_apdu_t0+0x1d4>)
   81310:	4b33      	ldr	r3, [pc, #204]	; (813e0 <iso7816_xfr_block_apdu_t0+0x1d8>)
   81312:	4798      	blx	r3
	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   81314:	1c60      	adds	r0, r4, #1

	return (us_message_index);
   81316:	b280      	uxth	r0, r0
}
   81318:	b007      	add	sp, #28
   8131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8131e:	9903      	ldr	r1, [sp, #12]
   81320:	4626      	mov	r6, r4
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   81322:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 813d8 <iso7816_xfr_block_apdu_t0+0x1d0>
   81326:	1c4f      	adds	r7, r1, #1
   81328:	b2bf      	uxth	r7, r7
   8132a:	4451      	add	r1, sl
   8132c:	9801      	ldr	r0, [sp, #4]
   8132e:	47c8      	blx	r9
   81330:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   81332:	3e01      	subs	r6, #1
   81334:	b2b6      	uxth	r6, r6
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   81336:	4639      	mov	r1, r7
				} while (0 != --us_ne_nc);
   81338:	2e00      	cmp	r6, #0
   8133a:	d1f4      	bne.n	81326 <iso7816_xfr_block_apdu_t0+0x11e>
   8133c:	9b03      	ldr	r3, [sp, #12]
   8133e:	441c      	add	r4, r3
   81340:	b2a3      	uxth	r3, r4
   81342:	9303      	str	r3, [sp, #12]
   81344:	e7d2      	b.n	812ec <iso7816_xfr_block_apdu_t0+0xe4>
				status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   81346:	9a03      	ldr	r2, [sp, #12]
   81348:	f102 0b01 	add.w	fp, r2, #1
   8134c:	fa1f fb8b 	uxth.w	fp, fp
   81350:	eb0a 0102 	add.w	r1, sl, r2
   81354:	9801      	ldr	r0, [sp, #4]
   81356:	47b0      	blx	r6
   81358:	4305      	orrs	r5, r0
   8135a:	f8cd b00c 	str.w	fp, [sp, #12]
			us_ne_nc--;
   8135e:	3c01      	subs	r4, #1
   81360:	b2a4      	uxth	r4, r4
	} while (us_ne_nc != 0);
   81362:	2c00      	cmp	r4, #0
   81364:	d0c2      	beq.n	812ec <iso7816_xfr_block_apdu_t0+0xe4>
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   81366:	f10d 0117 	add.w	r1, sp, #23
   8136a:	9801      	ldr	r0, [sp, #4]
   8136c:	47b0      	blx	r6
   8136e:	4305      	orrs	r5, r0
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81370:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if (ISO_NULL_VAL == uc_proc_byte) {
   81374:	2b60      	cmp	r3, #96	; 0x60
   81376:	d0f4      	beq.n	81362 <iso7816_xfr_block_apdu_t0+0x15a>
   81378:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
		else if (((uc_proc_byte & 0xF0) == 0x60) ||
   8137c:	2a60      	cmp	r2, #96	; 0x60
   8137e:	d018      	beq.n	813b2 <iso7816_xfr_block_apdu_t0+0x1aa>
   81380:	2a90      	cmp	r2, #144	; 0x90
   81382:	d019      	beq.n	813b8 <iso7816_xfr_block_apdu_t0+0x1b0>
		else if (p_apdu[1] == uc_proc_byte) {
   81384:	f899 2001 	ldrb.w	r2, [r9, #1]
   81388:	4293      	cmp	r3, r2
   8138a:	d09e      	beq.n	812ca <iso7816_xfr_block_apdu_t0+0xc2>
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   8138c:	43db      	mvns	r3, r3
		else if (p_apdu[1] == uc_proc_byte_x) {
   8138e:	b2db      	uxtb	r3, r3
   81390:	4293      	cmp	r3, r2
   81392:	d1ab      	bne.n	812ec <iso7816_xfr_block_apdu_t0+0xe4>
			if (uc_cmd_case == CASE2) {
   81394:	f1b8 0f02 	cmp.w	r8, #2
   81398:	d0d5      	beq.n	81346 <iso7816_xfr_block_apdu_t0+0x13e>
				status |= iso7816_send_char(p_usart, p_apdu[us_apdu_index++]);
   8139a:	f107 0b01 	add.w	fp, r7, #1
   8139e:	fa1f fb8b 	uxth.w	fp, fp
   813a2:	f819 1007 	ldrb.w	r1, [r9, r7]
   813a6:	9801      	ldr	r0, [sp, #4]
   813a8:	4b0a      	ldr	r3, [pc, #40]	; (813d4 <iso7816_xfr_block_apdu_t0+0x1cc>)
   813aa:	4798      	blx	r3
   813ac:	4305      	orrs	r5, r0
   813ae:	465f      	mov	r7, fp
   813b0:	e7d5      	b.n	8135e <iso7816_xfr_block_apdu_t0+0x156>
			uc_sw1 = 1;
   813b2:	2301      	movs	r3, #1
   813b4:	9302      	str	r3, [sp, #8]
   813b6:	e7d4      	b.n	81362 <iso7816_xfr_block_apdu_t0+0x15a>
   813b8:	2301      	movs	r3, #1
   813ba:	9302      	str	r3, [sp, #8]
   813bc:	e7d1      	b.n	81362 <iso7816_xfr_block_apdu_t0+0x15a>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
   813be:	9b03      	ldr	r3, [sp, #12]
   813c0:	1c5c      	adds	r4, r3, #1
   813c2:	b2a4      	uxth	r4, r4
   813c4:	eb0a 0103 	add.w	r1, sl, r3
   813c8:	9801      	ldr	r0, [sp, #4]
   813ca:	4b03      	ldr	r3, [pc, #12]	; (813d8 <iso7816_xfr_block_apdu_t0+0x1d0>)
   813cc:	4798      	blx	r3
   813ce:	4305      	orrs	r5, r0
   813d0:	e796      	b.n	81300 <iso7816_xfr_block_apdu_t0+0xf8>
   813d2:	bf00      	nop
   813d4:	00081199 	.word	0x00081199
   813d8:	00081101 	.word	0x00081101
   813dc:	0008d910 	.word	0x0008d910
   813e0:	00087835 	.word	0x00087835

000813e4 <iso7816_xfr_block_apdu_t1>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t1(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   813e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index;
	uint16_t edc;
	uint32_t rx_len;
	uint16_t us_message_index = 0;

	if (us_length <= 0) {
   813e8:	2b00      	cmp	r3, #0
   813ea:	f000 80a4 	beq.w	81536 <iso7816_xfr_block_apdu_t1+0x152>
   813ee:	4690      	mov	r8, r2
   813f0:	460d      	mov	r5, r1
   813f2:	4683      	mov	fp, r0
		return false;
	}

	if (tc3 & 0x1) {
   813f4:	4b72      	ldr	r3, [pc, #456]	; (815c0 <iso7816_xfr_block_apdu_t1+0x1dc>)
   813f6:	781e      	ldrb	r6, [r3, #0]
   813f8:	f006 0a01 	and.w	sl, r6, #1
   813fc:	f346 0600 	sbfx	r6, r6, #0, #1
   81400:	b2b6      	uxth	r6, r6
	} else {
		edc = 0;
	}

	/* Update the edc for the data to be transmitted */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   81402:	f891 9002 	ldrb.w	r9, [r1, #2]
   81406:	f109 0903 	add.w	r9, r9, #3
   8140a:	2400      	movs	r4, #0
		*edc = iso7816_update_crc(data, *edc);
   8140c:	4f6d      	ldr	r7, [pc, #436]	; (815c4 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8140e:	e006      	b.n	8141e <iso7816_xfr_block_apdu_t1+0x3a>
   81410:	4631      	mov	r1, r6
   81412:	47b8      	blx	r7
   81414:	4606      	mov	r6, r0
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   81416:	3401      	adds	r4, #1
   81418:	b2e4      	uxtb	r4, r4
   8141a:	454c      	cmp	r4, r9
   8141c:	da06      	bge.n	8142c <iso7816_xfr_block_apdu_t1+0x48>
		iso7816_update_edc(p_apdu[index], &edc);
   8141e:	5d28      	ldrb	r0, [r5, r4]
	if (tc3 & 0x1) {  /* type = CRC */
   81420:	f1ba 0f00 	cmp.w	sl, #0
   81424:	d1f4      	bne.n	81410 <iso7816_xfr_block_apdu_t1+0x2c>
		*edc = *edc ^ data;
   81426:	4046      	eors	r6, r0
   81428:	b2b6      	uxth	r6, r6
   8142a:	e7f4      	b.n	81416 <iso7816_xfr_block_apdu_t1+0x32>
   8142c:	2400      	movs	r4, #0
	}

	/* Transmit Data Bytes */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
		iso7816_send_char(p_usart, p_apdu[index]);
   8142e:	4f66      	ldr	r7, [pc, #408]	; (815c8 <iso7816_xfr_block_apdu_t1+0x1e4>)
   81430:	5d29      	ldrb	r1, [r5, r4]
   81432:	4658      	mov	r0, fp
   81434:	47b8      	blx	r7
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   81436:	3401      	adds	r4, #1
   81438:	b2e4      	uxtb	r4, r4
   8143a:	78ab      	ldrb	r3, [r5, #2]
   8143c:	3303      	adds	r3, #3
   8143e:	429c      	cmp	r4, r3
   81440:	dbf6      	blt.n	81430 <iso7816_xfr_block_apdu_t1+0x4c>
	}

	/* Transmit EDC */
	iso7816_send_char(p_usart, (uint8_t)edc);
   81442:	b2f1      	uxtb	r1, r6
   81444:	4658      	mov	r0, fp
   81446:	4b60      	ldr	r3, [pc, #384]	; (815c8 <iso7816_xfr_block_apdu_t1+0x1e4>)
   81448:	4798      	blx	r3

	if (tc3 & 0x1) {
   8144a:	4b5d      	ldr	r3, [pc, #372]	; (815c0 <iso7816_xfr_block_apdu_t1+0x1dc>)
   8144c:	781b      	ldrb	r3, [r3, #0]
   8144e:	f013 0f01 	tst.w	r3, #1
   81452:	d14f      	bne.n	814f4 <iso7816_xfr_block_apdu_t1+0x110>
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
	}

	if (iso7816_get_char(p_usart, &p_message[0]) == 0xff) {
   81454:	4641      	mov	r1, r8
   81456:	4658      	mov	r0, fp
   81458:	4b5c      	ldr	r3, [pc, #368]	; (815cc <iso7816_xfr_block_apdu_t1+0x1e8>)
   8145a:	4798      	blx	r3
   8145c:	28ff      	cmp	r0, #255	; 0xff
   8145e:	d06d      	beq.n	8153c <iso7816_xfr_block_apdu_t1+0x158>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[1]) == 0xff) {
   81460:	f108 0101 	add.w	r1, r8, #1
   81464:	4658      	mov	r0, fp
   81466:	4b59      	ldr	r3, [pc, #356]	; (815cc <iso7816_xfr_block_apdu_t1+0x1e8>)
   81468:	4798      	blx	r3
   8146a:	28ff      	cmp	r0, #255	; 0xff
   8146c:	d069      	beq.n	81542 <iso7816_xfr_block_apdu_t1+0x15e>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[2]) == 0xff) {
   8146e:	f108 0102 	add.w	r1, r8, #2
   81472:	4658      	mov	r0, fp
   81474:	4b55      	ldr	r3, [pc, #340]	; (815cc <iso7816_xfr_block_apdu_t1+0x1e8>)
   81476:	4798      	blx	r3
   81478:	28ff      	cmp	r0, #255	; 0xff
   8147a:	d065      	beq.n	81548 <iso7816_xfr_block_apdu_t1+0x164>
		return us_message_index;
	}

	us_message_index++;

	rx_len = p_message[2] + 1;
   8147c:	f898 4002 	ldrb.w	r4, [r8, #2]
   81480:	1c65      	adds	r5, r4, #1

	if (tc3 & 0x1) {
   81482:	4b4f      	ldr	r3, [pc, #316]	; (815c0 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81484:	781b      	ldrb	r3, [r3, #0]
   81486:	f013 0301 	ands.w	r3, r3, #1
   8148a:	d038      	beq.n	814fe <iso7816_xfr_block_apdu_t1+0x11a>
		rx_len++;
   8148c:	f105 0901 	add.w	r9, r5, #1
	}

	for (index = 3; index < (rx_len + 3); index++) {
   81490:	1d2e      	adds	r6, r5, #4
   81492:	2e03      	cmp	r6, #3
		rx_len++;
   81494:	bf88      	it	hi
   81496:	464d      	movhi	r5, r9
	for (index = 3; index < (rx_len + 3); index++) {
   81498:	f240 8082 	bls.w	815a0 <iso7816_xfr_block_apdu_t1+0x1bc>
		rx_len++;
   8149c:	2103      	movs	r1, #3
   8149e:	460c      	mov	r4, r1
		if (iso7816_get_char(p_usart, &p_message[index]) == 0xff) {
   814a0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 815cc <iso7816_xfr_block_apdu_t1+0x1e8>
   814a4:	4441      	add	r1, r8
   814a6:	4658      	mov	r0, fp
   814a8:	47c8      	blx	r9
   814aa:	28ff      	cmp	r0, #255	; 0xff
   814ac:	d04f      	beq.n	8154e <iso7816_xfr_block_apdu_t1+0x16a>
	for (index = 3; index < (rx_len + 3); index++) {
   814ae:	3401      	adds	r4, #1
   814b0:	b2e4      	uxtb	r4, r4
   814b2:	4621      	mov	r1, r4
   814b4:	42b4      	cmp	r4, r6
   814b6:	d3f5      	bcc.n	814a4 <iso7816_xfr_block_apdu_t1+0xc0>
			return us_message_index;
		}
	}

	/* Check for the CRC Error */
	if (tc3 & 0x1) {
   814b8:	4b41      	ldr	r3, [pc, #260]	; (815c0 <iso7816_xfr_block_apdu_t1+0x1dc>)
   814ba:	781b      	ldrb	r3, [r3, #0]
   814bc:	f013 0f01 	tst.w	r3, #1
   814c0:	d148      	bne.n	81554 <iso7816_xfr_block_apdu_t1+0x170>
		}
	} else {
		edc = 0;
		edc = edc ^ p_message[0];
		edc = edc ^ p_message[1];
		edc = edc ^ p_message[2];
   814c2:	f898 2001 	ldrb.w	r2, [r8, #1]
   814c6:	f898 3000 	ldrb.w	r3, [r8]
   814ca:	405a      	eors	r2, r3
   814cc:	f898 3002 	ldrb.w	r3, [r8, #2]
   814d0:	405a      	eors	r2, r3
   814d2:	2103      	movs	r1, #3
   814d4:	460b      	mov	r3, r1

		for (index = 3; index < (rx_len + 3); index++) {
			edc = edc ^ p_message[index];
   814d6:	f818 1001 	ldrb.w	r1, [r8, r1]
   814da:	404a      	eors	r2, r1
		for (index = 3; index < (rx_len + 3); index++) {
   814dc:	3301      	adds	r3, #1
   814de:	b2db      	uxtb	r3, r3
   814e0:	4619      	mov	r1, r3
   814e2:	42b3      	cmp	r3, r6
   814e4:	d3f7      	bcc.n	814d6 <iso7816_xfr_block_apdu_t1+0xf2>
		}

		if (edc != p_message[index + 1]) {
   814e6:	4441      	add	r1, r8
   814e8:	784b      	ldrb	r3, [r1, #1]
   814ea:	4293      	cmp	r3, r2
   814ec:	d01f      	beq.n	8152e <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814ee:	2003      	movs	r0, #3
   814f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
   814f4:	2100      	movs	r1, #0
   814f6:	4658      	mov	r0, fp
   814f8:	4b33      	ldr	r3, [pc, #204]	; (815c8 <iso7816_xfr_block_apdu_t1+0x1e4>)
   814fa:	4798      	blx	r3
   814fc:	e7aa      	b.n	81454 <iso7816_xfr_block_apdu_t1+0x70>
	for (index = 3; index < (rx_len + 3); index++) {
   814fe:	1cee      	adds	r6, r5, #3
   81500:	2e03      	cmp	r6, #3
   81502:	d8cb      	bhi.n	8149c <iso7816_xfr_block_apdu_t1+0xb8>
	if (tc3 & 0x1) {
   81504:	2b00      	cmp	r3, #0
   81506:	d14a      	bne.n	8159e <iso7816_xfr_block_apdu_t1+0x1ba>
		edc = edc ^ p_message[2];
   81508:	f898 2000 	ldrb.w	r2, [r8]
   8150c:	f898 3001 	ldrb.w	r3, [r8, #1]
   81510:	405a      	eors	r2, r3
   81512:	f898 3002 	ldrb.w	r3, [r8, #2]
   81516:	405a      	eors	r2, r3
		for (index = 3; index < (rx_len + 3); index++) {
   81518:	2103      	movs	r1, #3
   8151a:	e7e4      	b.n	814e6 <iso7816_xfr_block_apdu_t1+0x102>
				((edc & 0xFF) != p_message[rx_len - 1])) {
   8151c:	44a8      	add	r8, r5
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   8151e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   81522:	b2c0      	uxtb	r0, r0
   81524:	4283      	cmp	r3, r0
   81526:	d002      	beq.n	8152e <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   81528:	2003      	movs	r0, #3
   8152a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	us_message_index += rx_len;
   8152e:	1ce8      	adds	r0, r5, #3
   81530:	b280      	uxth	r0, r0
	return us_message_index;
   81532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   81536:	4618      	mov	r0, r3
   81538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   8153c:	2000      	movs	r0, #0
   8153e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81542:	2001      	movs	r0, #1
   81544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81548:	2002      	movs	r0, #2
   8154a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return us_message_index;
   8154e:	2003      	movs	r0, #3
   81550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		edc = iso7816_update_crc(p_message[0], edc);
   81554:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81558:	f898 0000 	ldrb.w	r0, [r8]
   8155c:	4c19      	ldr	r4, [pc, #100]	; (815c4 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8155e:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[1], edc);
   81560:	4601      	mov	r1, r0
   81562:	f898 0001 	ldrb.w	r0, [r8, #1]
   81566:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[2], edc);
   81568:	4601      	mov	r1, r0
   8156a:	f898 0002 	ldrb.w	r0, [r8, #2]
   8156e:	47a0      	blx	r4
   81570:	2303      	movs	r3, #3
   81572:	461c      	mov	r4, r3
			edc = iso7816_update_crc(p_message[index], edc);
   81574:	4f13      	ldr	r7, [pc, #76]	; (815c4 <iso7816_xfr_block_apdu_t1+0x1e0>)
   81576:	4601      	mov	r1, r0
   81578:	f818 0003 	ldrb.w	r0, [r8, r3]
   8157c:	47b8      	blx	r7
		for (index = 3; index < (rx_len + 3); index++) {
   8157e:	3401      	adds	r4, #1
   81580:	b2e4      	uxtb	r4, r4
   81582:	4623      	mov	r3, r4
   81584:	42b4      	cmp	r4, r6
   81586:	d3f6      	bcc.n	81576 <iso7816_xfr_block_apdu_t1+0x192>
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   81588:	eb08 0305 	add.w	r3, r8, r5
   8158c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
   81590:	f3c0 230f 	ubfx	r3, r0, #8, #16
   81594:	429a      	cmp	r2, r3
   81596:	d0c1      	beq.n	8151c <iso7816_xfr_block_apdu_t1+0x138>
			return us_message_index;
   81598:	2003      	movs	r0, #3
   8159a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx_len = p_message[2] + 1;
   8159e:	46a9      	mov	r9, r5
		edc = iso7816_update_crc(p_message[0], edc);
   815a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   815a4:	f898 0000 	ldrb.w	r0, [r8]
   815a8:	4d06      	ldr	r5, [pc, #24]	; (815c4 <iso7816_xfr_block_apdu_t1+0x1e0>)
   815aa:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[1], edc);
   815ac:	4601      	mov	r1, r0
   815ae:	f898 0001 	ldrb.w	r0, [r8, #1]
   815b2:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[2], edc);
   815b4:	4601      	mov	r1, r0
   815b6:	4620      	mov	r0, r4
   815b8:	47a8      	blx	r5
   815ba:	464d      	mov	r5, r9
   815bc:	e7e4      	b.n	81588 <iso7816_xfr_block_apdu_t1+0x1a4>
   815be:	bf00      	nop
   815c0:	2000191f 	.word	0x2000191f
   815c4:	000810bd 	.word	0x000810bd
   815c8:	00081199 	.word	0x00081199
   815cc:	00081101 	.word	0x00081101

000815d0 <iso7816_data_block_atr>:
 * \param p_usart Pointer to the usart device.
 * \param p_atr    Pointer to ATR buffer.
 * \param p_length Pointer for store the ATR length.
 */
void iso7816_data_block_atr(Usart* p_usart, uint8_t *p_atr, uint8_t *p_length)
{
   815d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815d4:	4607      	mov	r7, r0
   815d6:	460e      	mov	r6, r1
   815d8:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t j;
	uint8_t uc_value;

	*p_length = 0;
   815da:	2300      	movs	r3, #0
   815dc:	7013      	strb	r3, [r2, #0]

	ta1=0;
   815de:	4a55      	ldr	r2, [pc, #340]	; (81734 <iso7816_data_block_atr+0x164>)
   815e0:	7013      	strb	r3, [r2, #0]
	td1=0;
   815e2:	4a55      	ldr	r2, [pc, #340]	; (81738 <iso7816_data_block_atr+0x168>)
   815e4:	7013      	strb	r3, [r2, #0]
	tc3=0;
   815e6:	4a55      	ldr	r2, [pc, #340]	; (8173c <iso7816_data_block_atr+0x16c>)
   815e8:	7013      	strb	r3, [r2, #0]

	/* Read ATR TS. */
	iso7816_get_char(p_usart, &p_atr[0]);
   815ea:	4c55      	ldr	r4, [pc, #340]	; (81740 <iso7816_data_block_atr+0x170>)
   815ec:	47a0      	blx	r4

	/* Read ATR T0. */
	iso7816_get_char(p_usart, &p_atr[1]);
   815ee:	1c71      	adds	r1, r6, #1
   815f0:	4638      	mov	r0, r7
   815f2:	47a0      	blx	r4

	uc_value = p_atr[1] & 0xF0;
   815f4:	7874      	ldrb	r4, [r6, #1]
   815f6:	f004 09f0 	and.w	r9, r4, #240	; 0xf0
	i = 2;

	/* Read ATR T1. */
	if (uc_value & 0x10) { /* TA[1] */
   815fa:	f014 0f10 	tst.w	r4, #16
   815fe:	d11d      	bne.n	8163c <iso7816_data_block_atr+0x6c>
	i = 2;
   81600:	2502      	movs	r5, #2
		iso7816_get_char(p_usart, &p_atr[i++]);
		ta1 = p_atr[2];
	}

	if (uc_value & 0x20) { /* TB[1] */
   81602:	f014 0f20 	tst.w	r4, #32
   81606:	d122      	bne.n	8164e <iso7816_data_block_atr+0x7e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x40) { /* TC[1] */
   81608:	f014 0f40 	tst.w	r4, #64	; 0x40
   8160c:	d127      	bne.n	8165e <iso7816_data_block_atr+0x8e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x80) { /* TD[1] */
   8160e:	f019 0f80 	tst.w	r9, #128	; 0x80
   81612:	d12b      	bne.n	8166c <iso7816_data_block_atr+0x9c>
			uc_value = 0;
		}
	}

	/* Historical Bytes. */
	uc_value = p_atr[1] & 0x0F;
   81614:	7873      	ldrb	r3, [r6, #1]
	for (j = 0; j < uc_value; j++) {
   81616:	f013 030f 	ands.w	r3, r3, #15
   8161a:	d00b      	beq.n	81634 <iso7816_data_block_atr+0x64>
   8161c:	1974      	adds	r4, r6, r5
   8161e:	eb05 0903 	add.w	r9, r5, r3
   81622:	444e      	add	r6, r9
		iso7816_get_char(p_usart, &p_atr[i++]);
   81624:	4d46      	ldr	r5, [pc, #280]	; (81740 <iso7816_data_block_atr+0x170>)
   81626:	4621      	mov	r1, r4
   81628:	4638      	mov	r0, r7
   8162a:	47a8      	blx	r5
   8162c:	3401      	adds	r4, #1
	for (j = 0; j < uc_value; j++) {
   8162e:	42b4      	cmp	r4, r6
   81630:	d1f9      	bne.n	81626 <iso7816_data_block_atr+0x56>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81632:	464d      	mov	r5, r9
	}

	*p_length = i;
   81634:	f888 5000 	strb.w	r5, [r8]
}
   81638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		iso7816_get_char(p_usart, &p_atr[i++]);
   8163c:	1cb1      	adds	r1, r6, #2
   8163e:	4638      	mov	r0, r7
   81640:	4b3f      	ldr	r3, [pc, #252]	; (81740 <iso7816_data_block_atr+0x170>)
   81642:	4798      	blx	r3
		ta1 = p_atr[2];
   81644:	78b2      	ldrb	r2, [r6, #2]
   81646:	4b3b      	ldr	r3, [pc, #236]	; (81734 <iso7816_data_block_atr+0x164>)
   81648:	701a      	strb	r2, [r3, #0]
		iso7816_get_char(p_usart, &p_atr[i++]);
   8164a:	2503      	movs	r5, #3
   8164c:	e7d9      	b.n	81602 <iso7816_data_block_atr+0x32>
		iso7816_get_char(p_usart, &p_atr[i++]);
   8164e:	f105 0a01 	add.w	sl, r5, #1
   81652:	1971      	adds	r1, r6, r5
   81654:	4638      	mov	r0, r7
   81656:	4b3a      	ldr	r3, [pc, #232]	; (81740 <iso7816_data_block_atr+0x170>)
   81658:	4798      	blx	r3
   8165a:	4655      	mov	r5, sl
   8165c:	e7d4      	b.n	81608 <iso7816_data_block_atr+0x38>
		iso7816_get_char(p_usart, &p_atr[i++]);
   8165e:	1c6c      	adds	r4, r5, #1
   81660:	1971      	adds	r1, r6, r5
   81662:	4638      	mov	r0, r7
   81664:	4b36      	ldr	r3, [pc, #216]	; (81740 <iso7816_data_block_atr+0x170>)
   81666:	4798      	blx	r3
   81668:	4625      	mov	r5, r4
   8166a:	e7d0      	b.n	8160e <iso7816_data_block_atr+0x3e>
		iso7816_get_char(p_usart, &p_atr[i]);
   8166c:	1971      	adds	r1, r6, r5
   8166e:	4638      	mov	r0, r7
   81670:	4b33      	ldr	r3, [pc, #204]	; (81740 <iso7816_data_block_atr+0x170>)
   81672:	4798      	blx	r3
		td1 = p_atr[i];
   81674:	f816 9005 	ldrb.w	r9, [r6, r5]
   81678:	4b2f      	ldr	r3, [pc, #188]	; (81738 <iso7816_data_block_atr+0x168>)
   8167a:	f883 9000 	strb.w	r9, [r3]
		uc_value = p_atr[i++] & 0xF0;
   8167e:	1c6c      	adds	r4, r5, #1
	if (uc_value) {
   81680:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   81684:	d00b      	beq.n	8169e <iso7816_data_block_atr+0xce>
		if (uc_value & 0x10) { /* TA[2] */
   81686:	f019 0f10 	tst.w	r9, #16
   8168a:	d10a      	bne.n	816a2 <iso7816_data_block_atr+0xd2>
		if (uc_value & 0x20) { /* TB[2] */
   8168c:	f019 0f20 	tst.w	r9, #32
   81690:	d10e      	bne.n	816b0 <iso7816_data_block_atr+0xe0>
		if (uc_value & 0x40) { /* TC[2] */
   81692:	f019 0f40 	tst.w	r9, #64	; 0x40
   81696:	d112      	bne.n	816be <iso7816_data_block_atr+0xee>
		if (uc_value & 0x80) { /* TD[2] */
   81698:	f01a 0f80 	tst.w	sl, #128	; 0x80
   8169c:	d116      	bne.n	816cc <iso7816_data_block_atr+0xfc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   8169e:	4625      	mov	r5, r4
   816a0:	e7b8      	b.n	81614 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816a2:	3502      	adds	r5, #2
   816a4:	1931      	adds	r1, r6, r4
   816a6:	4638      	mov	r0, r7
   816a8:	4b25      	ldr	r3, [pc, #148]	; (81740 <iso7816_data_block_atr+0x170>)
   816aa:	4798      	blx	r3
   816ac:	462c      	mov	r4, r5
   816ae:	e7ed      	b.n	8168c <iso7816_data_block_atr+0xbc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816b0:	1c65      	adds	r5, r4, #1
   816b2:	1931      	adds	r1, r6, r4
   816b4:	4638      	mov	r0, r7
   816b6:	4b22      	ldr	r3, [pc, #136]	; (81740 <iso7816_data_block_atr+0x170>)
   816b8:	4798      	blx	r3
   816ba:	462c      	mov	r4, r5
   816bc:	e7e9      	b.n	81692 <iso7816_data_block_atr+0xc2>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816be:	1c65      	adds	r5, r4, #1
   816c0:	1931      	adds	r1, r6, r4
   816c2:	4638      	mov	r0, r7
   816c4:	4b1e      	ldr	r3, [pc, #120]	; (81740 <iso7816_data_block_atr+0x170>)
   816c6:	4798      	blx	r3
   816c8:	462c      	mov	r4, r5
   816ca:	e7e5      	b.n	81698 <iso7816_data_block_atr+0xc8>
			iso7816_get_char(p_usart, &p_atr[i]);
   816cc:	1931      	adds	r1, r6, r4
   816ce:	4638      	mov	r0, r7
   816d0:	4b1b      	ldr	r3, [pc, #108]	; (81740 <iso7816_data_block_atr+0x170>)
   816d2:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816d4:	1c65      	adds	r5, r4, #1
   816d6:	f816 9004 	ldrb.w	r9, [r6, r4]
	if (uc_value) {
   816da:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   816de:	d099      	beq.n	81614 <iso7816_data_block_atr+0x44>
		if (uc_value & 0x10) { /* TA[3] */
   816e0:	f019 0f10 	tst.w	r9, #16
   816e4:	d10e      	bne.n	81704 <iso7816_data_block_atr+0x134>
		if (uc_value & 0x20) { /* TB[3] */
   816e6:	f019 0f20 	tst.w	r9, #32
   816ea:	d112      	bne.n	81712 <iso7816_data_block_atr+0x142>
		if (uc_value & 0x40) { /* TC[3] */
   816ec:	f019 0f40 	tst.w	r9, #64	; 0x40
   816f0:	d116      	bne.n	81720 <iso7816_data_block_atr+0x150>
		if (uc_value & 0x80) { /* TD[3] */
   816f2:	f01a 0f80 	tst.w	sl, #128	; 0x80
   816f6:	d08d      	beq.n	81614 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i]);
   816f8:	1971      	adds	r1, r6, r5
   816fa:	4638      	mov	r0, r7
   816fc:	4b10      	ldr	r3, [pc, #64]	; (81740 <iso7816_data_block_atr+0x170>)
   816fe:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   81700:	3501      	adds	r5, #1
   81702:	e787      	b.n	81614 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81704:	3402      	adds	r4, #2
   81706:	1971      	adds	r1, r6, r5
   81708:	4638      	mov	r0, r7
   8170a:	4b0d      	ldr	r3, [pc, #52]	; (81740 <iso7816_data_block_atr+0x170>)
   8170c:	4798      	blx	r3
   8170e:	4625      	mov	r5, r4
   81710:	e7e9      	b.n	816e6 <iso7816_data_block_atr+0x116>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81712:	1c6c      	adds	r4, r5, #1
   81714:	1971      	adds	r1, r6, r5
   81716:	4638      	mov	r0, r7
   81718:	4b09      	ldr	r3, [pc, #36]	; (81740 <iso7816_data_block_atr+0x170>)
   8171a:	4798      	blx	r3
   8171c:	4625      	mov	r5, r4
   8171e:	e7e5      	b.n	816ec <iso7816_data_block_atr+0x11c>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81720:	1c6c      	adds	r4, r5, #1
   81722:	1971      	adds	r1, r6, r5
   81724:	4638      	mov	r0, r7
   81726:	4b06      	ldr	r3, [pc, #24]	; (81740 <iso7816_data_block_atr+0x170>)
   81728:	4798      	blx	r3
			tc3 = p_atr[i - 1];
   8172a:	5d72      	ldrb	r2, [r6, r5]
   8172c:	4b03      	ldr	r3, [pc, #12]	; (8173c <iso7816_data_block_atr+0x16c>)
   8172e:	701a      	strb	r2, [r3, #0]
			iso7816_get_char(p_usart, &p_atr[i++]);
   81730:	4625      	mov	r5, r4
   81732:	e7de      	b.n	816f2 <iso7816_data_block_atr+0x122>
   81734:	2000191e 	.word	0x2000191e
   81738:	20001920 	.word	0x20001920
   8173c:	2000191f 	.word	0x2000191f
   81740:	00081101 	.word	0x00081101

00081744 <iso7816_warm_reset>:
 * \brief Warm reset.
 *
 * \param p_usart Pointer to the usart device.
 */
void iso7816_warm_reset(Usart* p_usart)
{
   81744:	b510      	push	{r4, lr}
   81746:	b082      	sub	sp, #8
   81748:	4604      	mov	r4, r0
	uint32_t i;
	uint32_t ul_data;

	iso7816_icc_power_off();
   8174a:	4b16      	ldr	r3, [pc, #88]	; (817a4 <iso7816_warm_reset+0x60>)
   8174c:	4798      	blx	r3

	/* tb: wait 400 cycles. */
	for (i = 0; i < (RST_WAIT_TIME * (g_ul_clk / 1000000)); i++) {
   8174e:	4b16      	ldr	r3, [pc, #88]	; (817a8 <iso7816_warm_reset+0x64>)
   81750:	681b      	ldr	r3, [r3, #0]
   81752:	4a16      	ldr	r2, [pc, #88]	; (817ac <iso7816_warm_reset+0x68>)
   81754:	fba2 2303 	umull	r2, r3, r2, r3
   81758:	0c9b      	lsrs	r3, r3, #18
   8175a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   8175e:	00db      	lsls	r3, r3, #3
   81760:	d00c      	beq.n	8177c <iso7816_warm_reset+0x38>
   81762:	2200      	movs	r2, #0
   81764:	4810      	ldr	r0, [pc, #64]	; (817a8 <iso7816_warm_reset+0x64>)
   81766:	4911      	ldr	r1, [pc, #68]	; (817ac <iso7816_warm_reset+0x68>)
   81768:	3201      	adds	r2, #1
   8176a:	6803      	ldr	r3, [r0, #0]
   8176c:	fba1 e303 	umull	lr, r3, r1, r3
   81770:	0c9b      	lsrs	r3, r3, #18
   81772:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   81776:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   8177a:	d3f5      	bcc.n	81768 <iso7816_warm_reset+0x24>
	}

	usart_read(p_usart, &ul_data);
   8177c:	a901      	add	r1, sp, #4
   8177e:	4620      	mov	r0, r4
   81780:	4b0b      	ldr	r3, [pc, #44]	; (817b0 <iso7816_warm_reset+0x6c>)
   81782:	4798      	blx	r3
	usart_reset_status(p_usart);
   81784:	4620      	mov	r0, r4
   81786:	4b0b      	ldr	r3, [pc, #44]	; (817b4 <iso7816_warm_reset+0x70>)
   81788:	4798      	blx	r3
	usart_reset_iterations(p_usart);
   8178a:	4620      	mov	r0, r4
   8178c:	4b0a      	ldr	r3, [pc, #40]	; (817b8 <iso7816_warm_reset+0x74>)
   8178e:	4798      	blx	r3
	usart_reset_nack(p_usart);
   81790:	4620      	mov	r0, r4
   81792:	4b0a      	ldr	r3, [pc, #40]	; (817bc <iso7816_warm_reset+0x78>)
   81794:	4798      	blx	r3
	gpio_set_pin_high(gs_ul_rst_pin_idx);
   81796:	4b0a      	ldr	r3, [pc, #40]	; (817c0 <iso7816_warm_reset+0x7c>)
   81798:	6818      	ldr	r0, [r3, #0]
   8179a:	4b0a      	ldr	r3, [pc, #40]	; (817c4 <iso7816_warm_reset+0x80>)
   8179c:	4798      	blx	r3

	iso7816_icc_power_on();
}
   8179e:	b002      	add	sp, #8
   817a0:	bd10      	pop	{r4, pc}
   817a2:	bf00      	nop
   817a4:	000810ed 	.word	0x000810ed
   817a8:	200023e8 	.word	0x200023e8
   817ac:	431bde83 	.word	0x431bde83
   817b0:	00086e4b 	.word	0x00086e4b
   817b4:	00086e05 	.word	0x00086e05
   817b8:	00086e0d 	.word	0x00086e0d
   817bc:	00086e15 	.word	0x00086e15
   817c0:	200023ec 	.word	0x200023ec
   817c4:	0008519b 	.word	0x0008519b

000817c8 <iso7816_decode_atr>:
 *
 * \param p_usart Pointer to the usart device.
 * \param p_atr Pinter on ATR buffer.
 */
uint8_t iso7816_decode_atr(Usart* p_usart, uint8_t *p_atr)
{
   817c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817cc:	b09c      	sub	sp, #112	; 0x70
   817ce:	4686      	mov	lr, r0
   817d0:	4688      	mov	r8, r1
	uint32_t ftable[16] = {0, 372, 558, 744, 1116, 1488, 1860, 0,
   817d2:	4e65      	ldr	r6, [pc, #404]	; (81968 <iso7816_decode_atr+0x1a0>)
   817d4:	ac0c      	add	r4, sp, #48	; 0x30
   817d6:	4635      	mov	r5, r6
   817d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   817e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			       0, 512, 768, 1024, 1536, 2048, 0, 0};
	uint32_t dtable[10] = {0, 1, 2, 4, 8, 16, 32, 64, 12, 20};
   817ec:	ad02      	add	r5, sp, #8
   817ee:	f106 0440 	add.w	r4, r6, #64	; 0x40
   817f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817fa:	e894 0003 	ldmia.w	r4, {r0, r1}
   817fe:	e885 0003 	stmia.w	r5, {r0, r1}
	uint8_t ppss[4] = {0,0,0,0};
   81802:	2300      	movs	r3, #0
   81804:	9301      	str	r3, [sp, #4]
	uint32_t y;
	uint8_t uc_offset;
	uint32_t fidi = 0;

	i = 2;
	y = p_atr[1] & 0xF0;
   81806:	f898 1001 	ldrb.w	r1, [r8, #1]

	/* Read ATR Ti. */
	uc_offset = 1;

	if (y & 0x10) {
   8180a:	f011 0f10 	tst.w	r1, #16
   8180e:	d018      	beq.n	81842 <iso7816_decode_atr+0x7a>
	y = p_atr[1] & 0xF0;
   81810:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   81814:	2202      	movs	r2, #2
   81816:	e004      	b.n	81822 <iso7816_decode_atr+0x5a>
			if (y & 0x40) { /* TC[i] */
				i++;
			}

			if (y & 0x80) { /* TD[i] */
				y = p_atr[i++] & 0xF0;
   81818:	f818 3002 	ldrb.w	r3, [r8, r2]
   8181c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   81820:	3201      	adds	r2, #1
		while (y) {
   81822:	b173      	cbz	r3, 81842 <iso7816_decode_atr+0x7a>
			if (y & 0x10) { /* TA[i] */
   81824:	f013 0f10 	tst.w	r3, #16
				i++;
   81828:	bf18      	it	ne
   8182a:	3201      	addne	r2, #1
			if (y & 0x20) { /* TB[i] */
   8182c:	f013 0f20 	tst.w	r3, #32
				i++;
   81830:	bf18      	it	ne
   81832:	3201      	addne	r2, #1
			if (y & 0x40) { /* TC[i] */
   81834:	f013 0f40 	tst.w	r3, #64	; 0x40
				i++;
   81838:	bf18      	it	ne
   8183a:	3201      	addne	r2, #1
			if (y & 0x80) { /* TD[i] */
   8183c:	f013 0f80 	tst.w	r3, #128	; 0x80
   81840:	d1ea      	bne.n	81818 <iso7816_decode_atr+0x50>
			uc_offset++;
		}
	}

	y = p_atr[1] & 0x0F;
	for (j = 0; j < y; j++) {
   81842:	f011 020f 	ands.w	r2, r1, #15
   81846:	d003      	beq.n	81850 <iso7816_decode_atr+0x88>
   81848:	2300      	movs	r3, #0
   8184a:	3301      	adds	r3, #1
   8184c:	429a      	cmp	r2, r3
   8184e:	d1fc      	bne.n	8184a <iso7816_decode_atr+0x82>
		i++;
	}

	if (td1 & 0x10) {
   81850:	4b46      	ldr	r3, [pc, #280]	; (8196c <iso7816_decode_atr+0x1a4>)
   81852:	7818      	ldrb	r0, [r3, #0]
   81854:	f010 0f10 	tst.w	r0, #16
   81858:	f040 8081 	bne.w	8195e <iso7816_decode_atr+0x196>
		return 0;
	}

	if (ta1 && ((ta1 & 0xf) != 0)) {
   8185c:	4b44      	ldr	r3, [pc, #272]	; (81970 <iso7816_decode_atr+0x1a8>)
   8185e:	781b      	ldrb	r3, [r3, #0]
   81860:	b17b      	cbz	r3, 81882 <iso7816_decode_atr+0xba>
   81862:	f013 020f 	ands.w	r2, r3, #15
   81866:	d044      	beq.n	818f2 <iso7816_decode_atr+0x12a>
		fidi = ftable[(ta1 >> 4) & 0xf] / dtable[ta1 & 0xf];
   81868:	091b      	lsrs	r3, r3, #4
   8186a:	a91c      	add	r1, sp, #112	; 0x70
   8186c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81870:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   81874:	f853 6c40 	ldr.w	r6, [r3, #-64]
   81878:	f852 3c68 	ldr.w	r3, [r2, #-104]
   8187c:	fbb6 f6f3 	udiv	r6, r6, r3
   81880:	e000      	b.n	81884 <iso7816_decode_atr+0xbc>
	uint32_t fidi = 0;
   81882:	2600      	movs	r6, #0
	}

	if (td1 & 0xf) {
   81884:	f010 000f 	ands.w	r0, r0, #15
   81888:	d16a      	bne.n	81960 <iso7816_decode_atr+0x198>
   8188a:	4674      	mov	r4, lr
		return (td1 & 0xf);
	}
	
	// Propose speeds to card
	iso7816_send_char(p_usart, 0xff);
   8188c:	21ff      	movs	r1, #255	; 0xff
   8188e:	4670      	mov	r0, lr
   81890:	4d38      	ldr	r5, [pc, #224]	; (81974 <iso7816_decode_atr+0x1ac>)
   81892:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0x10);
   81894:	2110      	movs	r1, #16
   81896:	4620      	mov	r0, r4
   81898:	47a8      	blx	r5
	iso7816_send_char(p_usart, ta1);
   8189a:	4f35      	ldr	r7, [pc, #212]	; (81970 <iso7816_decode_atr+0x1a8>)
   8189c:	7839      	ldrb	r1, [r7, #0]
   8189e:	4620      	mov	r0, r4
   818a0:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0xff ^ 0x10 ^ ta1);
   818a2:	7839      	ldrb	r1, [r7, #0]
   818a4:	f081 01ef 	eor.w	r1, r1, #239	; 0xef
   818a8:	4620      	mov	r0, r4
   818aa:	47a8      	blx	r5

	iso7816_get_char(p_usart, &ppss[0]);
   818ac:	a901      	add	r1, sp, #4
   818ae:	4620      	mov	r0, r4
   818b0:	4d31      	ldr	r5, [pc, #196]	; (81978 <iso7816_decode_atr+0x1b0>)
   818b2:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[1]);
   818b4:	f10d 0105 	add.w	r1, sp, #5
   818b8:	4620      	mov	r0, r4
   818ba:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[2]);
   818bc:	f10d 0106 	add.w	r1, sp, #6
   818c0:	4620      	mov	r0, r4
   818c2:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[3]);
   818c4:	f10d 0107 	add.w	r1, sp, #7
   818c8:	4620      	mov	r0, r4
   818ca:	47a8      	blx	r5

	if ((ppss[0] != 0xff) || (ppss[1] != 0x10)) {
   818cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818d0:	2bff      	cmp	r3, #255	; 0xff
   818d2:	d103      	bne.n	818dc <iso7816_decode_atr+0x114>
   818d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   818d8:	2b10      	cmp	r3, #16
   818da:	d00c      	beq.n	818f6 <iso7816_decode_atr+0x12e>
		// Fail - if card doesn't support this we reset card again
		iso7816_warm_reset(p_usart);
   818dc:	4620      	mov	r0, r4
   818de:	4b27      	ldr	r3, [pc, #156]	; (8197c <iso7816_decode_atr+0x1b4>)
   818e0:	4798      	blx	r3
		// Read ATR to clear buffer
		uint8_t plength;
		iso7816_data_block_atr(p_usart, p_atr, &plength);
   818e2:	f10d 0203 	add.w	r2, sp, #3
   818e6:	4641      	mov	r1, r8
   818e8:	4620      	mov	r0, r4
   818ea:	4b25      	ldr	r3, [pc, #148]	; (81980 <iso7816_decode_atr+0x1b8>)
   818ec:	4798      	blx	r3
		return 0;
   818ee:	2000      	movs	r0, #0
   818f0:	e036      	b.n	81960 <iso7816_decode_atr+0x198>
	uint32_t fidi = 0;
   818f2:	2600      	movs	r6, #0
   818f4:	e7c6      	b.n	81884 <iso7816_decode_atr+0xbc>
	}

	if (ppss[2] != ta1) {
   818f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
   818fa:	4b1d      	ldr	r3, [pc, #116]	; (81970 <iso7816_decode_atr+0x1a8>)
   818fc:	781b      	ldrb	r3, [r3, #0]
   818fe:	4293      	cmp	r3, r2
   81900:	d013      	beq.n	8192a <iso7816_decode_atr+0x162>
		if (ppss[3] == (0xff ^ 0x10 ^ ppss[2])) {
   81902:	f89d 3007 	ldrb.w	r3, [sp, #7]
   81906:	f082 02ef 	eor.w	r2, r2, #239	; 0xef
   8190a:	4293      	cmp	r3, r2
   8190c:	d11c      	bne.n	81948 <iso7816_decode_atr+0x180>
			fidi = ftable[(ppss[3] >>
					4) & 0xf] / dtable[ppss[3] & 0xf];
   8190e:	091a      	lsrs	r2, r3, #4
			fidi = ftable[(ppss[3] >>
   81910:	a91c      	add	r1, sp, #112	; 0x70
   81912:	eb01 0282 	add.w	r2, r1, r2, lsl #2
					4) & 0xf] / dtable[ppss[3] & 0xf];
   81916:	f003 030f 	and.w	r3, r3, #15
   8191a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
			fidi = ftable[(ppss[3] >>
   8191e:	f852 6c40 	ldr.w	r6, [r2, #-64]
   81922:	f853 3c68 	ldr.w	r3, [r3, #-104]
   81926:	fbb6 f6f3 	udiv	r6, r6, r3
			return 0;
		}
	}

	/* Enable TX and RX. */
	usart_disable_rx(p_usart);
   8192a:	4620      	mov	r0, r4
   8192c:	4b15      	ldr	r3, [pc, #84]	; (81984 <iso7816_decode_atr+0x1bc>)
   8192e:	4798      	blx	r3
	usart_disable_tx(p_usart);
   81930:	4620      	mov	r0, r4
   81932:	4b15      	ldr	r3, [pc, #84]	; (81988 <iso7816_decode_atr+0x1c0>)
   81934:	4798      	blx	r3

	p_usart->US_FIDI = fidi;
   81936:	6426      	str	r6, [r4, #64]	; 0x40

	usart_enable_rx(p_usart);
   81938:	4620      	mov	r0, r4
   8193a:	4b14      	ldr	r3, [pc, #80]	; (8198c <iso7816_decode_atr+0x1c4>)
   8193c:	4798      	blx	r3
	usart_enable_tx(p_usart);
   8193e:	4620      	mov	r0, r4
   81940:	4b13      	ldr	r3, [pc, #76]	; (81990 <iso7816_decode_atr+0x1c8>)
   81942:	4798      	blx	r3

	return 0;
   81944:	2000      	movs	r0, #0
   81946:	e00b      	b.n	81960 <iso7816_decode_atr+0x198>
			iso7816_warm_reset(p_usart);
   81948:	4620      	mov	r0, r4
   8194a:	4b0c      	ldr	r3, [pc, #48]	; (8197c <iso7816_decode_atr+0x1b4>)
   8194c:	4798      	blx	r3
			iso7816_data_block_atr(p_usart, p_atr, &plength);
   8194e:	f10d 0203 	add.w	r2, sp, #3
   81952:	4641      	mov	r1, r8
   81954:	4620      	mov	r0, r4
   81956:	4b0a      	ldr	r3, [pc, #40]	; (81980 <iso7816_decode_atr+0x1b8>)
   81958:	4798      	blx	r3
			return 0;
   8195a:	2000      	movs	r0, #0
   8195c:	e000      	b.n	81960 <iso7816_decode_atr+0x198>
		return 0;
   8195e:	2000      	movs	r0, #0
}
   81960:	b01c      	add	sp, #112	; 0x70
   81962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81966:	bf00      	nop
   81968:	0008d8a8 	.word	0x0008d8a8
   8196c:	20001920 	.word	0x20001920
   81970:	2000191e 	.word	0x2000191e
   81974:	00081199 	.word	0x00081199
   81978:	00081101 	.word	0x00081101
   8197c:	00081745 	.word	0x00081745
   81980:	000815d1 	.word	0x000815d1
   81984:	00086def 	.word	0x00086def
   81988:	00086ddf 	.word	0x00086ddf
   8198c:	00086de9 	.word	0x00086de9
   81990:	00086dd9 	.word	0x00086dd9

00081994 <iso7816_init>:
 * \param ul_mck          USART module input clock frequency.
 * \param ul_rst_pin_idx  Control smart card RST pin index.
 */
void iso7816_init(Usart* p_usart, const usart_iso7816_opt_t *p_usart_opt,
		uint32_t ul_mck, uint32_t ul_rst_pin_idx)
{
   81994:	b570      	push	{r4, r5, r6, lr}
   81996:	4604      	mov	r4, r0
   81998:	460d      	mov	r5, r1
   8199a:	4616      	mov	r6, r2
	/* Pin RST of ISO7816 initialize. */
	gs_ul_rst_pin_idx = ul_rst_pin_idx;
   8199c:	4a0d      	ldr	r2, [pc, #52]	; (819d4 <iso7816_init+0x40>)
   8199e:	6013      	str	r3, [r2, #0]
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   819a0:	4618      	mov	r0, r3
   819a2:	4b0d      	ldr	r3, [pc, #52]	; (819d8 <iso7816_init+0x44>)
   819a4:	4798      	blx	r3

	/* Init the global variable for ISO7816. */
	g_ul_clk = ul_mck;
   819a6:	4b0d      	ldr	r3, [pc, #52]	; (819dc <iso7816_init+0x48>)
   819a8:	601e      	str	r6, [r3, #0]

	usart_init_iso7816(p_usart, p_usart_opt, g_ul_clk);
   819aa:	681a      	ldr	r2, [r3, #0]
   819ac:	4629      	mov	r1, r5
   819ae:	4620      	mov	r0, r4
   819b0:	4b0b      	ldr	r3, [pc, #44]	; (819e0 <iso7816_init+0x4c>)
   819b2:	4798      	blx	r3

	/* Disable interrupts. */
	usart_disable_interrupt(p_usart, 0xffffffff);
   819b4:	f04f 31ff 	mov.w	r1, #4294967295
   819b8:	4620      	mov	r0, r4
   819ba:	4b0a      	ldr	r3, [pc, #40]	; (819e4 <iso7816_init+0x50>)
   819bc:	4798      	blx	r3

	/* Write the Timeguard Register. */
	usart_set_tx_timeguard(p_usart, 5);
   819be:	2105      	movs	r1, #5
   819c0:	4620      	mov	r0, r4
   819c2:	4b09      	ldr	r3, [pc, #36]	; (819e8 <iso7816_init+0x54>)
   819c4:	4798      	blx	r3

	/* Enable TX and RX. */
	usart_enable_rx(p_usart);
   819c6:	4620      	mov	r0, r4
   819c8:	4b08      	ldr	r3, [pc, #32]	; (819ec <iso7816_init+0x58>)
   819ca:	4798      	blx	r3
	usart_enable_tx(p_usart);
   819cc:	4620      	mov	r0, r4
   819ce:	4b08      	ldr	r3, [pc, #32]	; (819f0 <iso7816_init+0x5c>)
   819d0:	4798      	blx	r3
   819d2:	bd70      	pop	{r4, r5, r6, pc}
   819d4:	200023ec 	.word	0x200023ec
   819d8:	000851b5 	.word	0x000851b5
   819dc:	200023e8 	.word	0x200023e8
   819e0:	00086ba1 	.word	0x00086ba1
   819e4:	00086df9 	.word	0x00086df9
   819e8:	00086de5 	.word	0x00086de5
   819ec:	00086de9 	.word	0x00086de9
   819f0:	00086dd9 	.word	0x00086dd9

000819f4 <ctrl_scarddata_req>:
#define SCARD_MODE_AT88SC102_COMPAREBIT 0x08

/* Handle "Smartcard Data" request */
bool ctrl_scarddata_req(void)
{
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819f4:	4b0b      	ldr	r3, [pc, #44]	; (81a24 <ctrl_scarddata_req+0x30>)
   819f6:	885b      	ldrh	r3, [r3, #2]
   819f8:	0a18      	lsrs	r0, r3, #8
	uint8_t datalen = (udd_g_ctrlreq.req.wValue) & 0xFF;
	uint16_t rxlen;
	
	if (offset > scard_rx_buffer_size){
   819fa:	4a0b      	ldr	r2, [pc, #44]	; (81a28 <ctrl_scarddata_req+0x34>)
   819fc:	8812      	ldrh	r2, [r2, #0]
   819fe:	4290      	cmp	r0, r2
   81a00:	d80d      	bhi.n	81a1e <ctrl_scarddata_req+0x2a>
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   81a02:	b2c1      	uxtb	r1, r0
		/* No data to send - point our buffer to memory actually used to prevent errors */
		rxlen = 0;
		offset = 0;
	} else {
		rxlen = scard_rx_buffer_size - offset;
   81a04:	1a12      	subs	r2, r2, r0
   81a06:	b2db      	uxtb	r3, r3
   81a08:	b292      	uxth	r2, r2
   81a0a:	4293      	cmp	r3, r2
   81a0c:	bf28      	it	cs
   81a0e:	4613      	movcs	r3, r2
		if (rxlen > datalen){
			rxlen = datalen;
		}
	}
	
	udd_g_ctrlreq.payload = scard_rx_buffer + offset;
   81a10:	4804      	ldr	r0, [pc, #16]	; (81a24 <ctrl_scarddata_req+0x30>)
   81a12:	4a06      	ldr	r2, [pc, #24]	; (81a2c <ctrl_scarddata_req+0x38>)
   81a14:	440a      	add	r2, r1
   81a16:	6082      	str	r2, [r0, #8]
	udd_g_ctrlreq.payload_size = rxlen;
   81a18:	8183      	strh	r3, [r0, #12]
	
	return true;
}
   81a1a:	2001      	movs	r0, #1
   81a1c:	4770      	bx	lr
		rxlen = 0;
   81a1e:	2300      	movs	r3, #0
		offset = 0;
   81a20:	4619      	mov	r1, r3
   81a22:	e7f5      	b.n	81a10 <ctrl_scarddata_req+0x1c>
   81a24:	20002dec 	.word	0x20002dec
   81a28:	200024f0 	.word	0x200024f0
   81a2c:	200024f4 	.word	0x200024f4

00081a30 <ctrl_scardconfig_req>:
{
	/* Version information, used to indicate to host computer what the firmware in the CW-Lite 
	   supports. */
	static uint8_t scard_protocol_version = 02;
	
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81a30:	4b0e      	ldr	r3, [pc, #56]	; (81a6c <ctrl_scardconfig_req+0x3c>)
   81a32:	789b      	ldrb	r3, [r3, #2]
   81a34:	2b01      	cmp	r3, #1
   81a36:	d004      	beq.n	81a42 <ctrl_scardconfig_req+0x12>
   81a38:	b18b      	cbz	r3, 81a5e <ctrl_scardconfig_req+0x2e>
   81a3a:	2b02      	cmp	r3, #2
   81a3c:	d009      	beq.n	81a52 <ctrl_scardconfig_req+0x22>
			udd_g_ctrlreq.payload_size = 1;
			return true;
			break;
			
		default:
			return false;
   81a3e:	2000      	movs	r0, #0
			break;
	}
	
}
   81a40:	4770      	bx	lr
			udd_g_ctrlreq.payload = scard_atr;
   81a42:	4b0a      	ldr	r3, [pc, #40]	; (81a6c <ctrl_scardconfig_req+0x3c>)
   81a44:	4a0a      	ldr	r2, [pc, #40]	; (81a70 <ctrl_scardconfig_req+0x40>)
   81a46:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = scard_atr_size;
   81a48:	4a0a      	ldr	r2, [pc, #40]	; (81a74 <ctrl_scardconfig_req+0x44>)
   81a4a:	7812      	ldrb	r2, [r2, #0]
   81a4c:	819a      	strh	r2, [r3, #12]
			return true;
   81a4e:	2001      	movs	r0, #1
   81a50:	4770      	bx	lr
			udd_g_ctrlreq.payload = &scard_protocol;
   81a52:	4b06      	ldr	r3, [pc, #24]	; (81a6c <ctrl_scardconfig_req+0x3c>)
   81a54:	4a08      	ldr	r2, [pc, #32]	; (81a78 <ctrl_scardconfig_req+0x48>)
   81a56:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a58:	2001      	movs	r0, #1
   81a5a:	8198      	strh	r0, [r3, #12]
			return true;
   81a5c:	4770      	bx	lr
			udd_g_ctrlreq.payload = &scard_protocol_version;
   81a5e:	4b03      	ldr	r3, [pc, #12]	; (81a6c <ctrl_scardconfig_req+0x3c>)
   81a60:	4a06      	ldr	r2, [pc, #24]	; (81a7c <ctrl_scardconfig_req+0x4c>)
   81a62:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a64:	2001      	movs	r0, #1
   81a66:	8198      	strh	r0, [r3, #12]
			return true;
   81a68:	4770      	bx	lr
   81a6a:	bf00      	nop
   81a6c:	20002dec 	.word	0x20002dec
   81a70:	200025f8 	.word	0x200025f8
   81a74:	200025f4 	.word	0x200025f4
   81a78:	20002630 	.word	0x20002630
   81a7c:	200002f1 	.word	0x200002f1

00081a80 <ctrl_scardaux_req>:

/* Handle "Smartcard Auxilary" request */
bool ctrl_scardaux_req(void)
{
	if(udd_g_ctrlreq.req.wValue == SCARD_MODE_AT88SC102_IN)
   81a80:	4b05      	ldr	r3, [pc, #20]	; (81a98 <ctrl_scardaux_req+0x18>)
   81a82:	885b      	ldrh	r3, [r3, #2]
   81a84:	2b02      	cmp	r3, #2
   81a86:	d001      	beq.n	81a8c <ctrl_scardaux_req+0xc>
	{	
		udd_g_ctrlreq.payload = &at88sc102_status;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
   81a88:	2000      	movs	r0, #0
}
   81a8a:	4770      	bx	lr
		udd_g_ctrlreq.payload = &at88sc102_status;
   81a8c:	4b02      	ldr	r3, [pc, #8]	; (81a98 <ctrl_scardaux_req+0x18>)
   81a8e:	4a03      	ldr	r2, [pc, #12]	; (81a9c <ctrl_scardaux_req+0x1c>)
   81a90:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size = 1;
   81a92:	2001      	movs	r0, #1
   81a94:	8198      	strh	r0, [r3, #12]
		return true;
   81a96:	4770      	bx	lr
   81a98:	20002dec 	.word	0x20002dec
   81a9c:	2000262f 	.word	0x2000262f

00081aa0 <ctrl_scarddata_cb>:

/* Handle "Smartcard Data" Output from Computer */
void ctrl_scarddata_cb(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81aa0:	4b11      	ldr	r3, [pc, #68]	; (81ae8 <ctrl_scarddata_cb+0x48>)
   81aa2:	88d8      	ldrh	r0, [r3, #6]
   81aa4:	899b      	ldrh	r3, [r3, #12]
   81aa6:	4283      	cmp	r3, r0
   81aa8:	d31d      	bcc.n	81ae6 <ctrl_scarddata_cb+0x46>
	
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81aaa:	b1e0      	cbz	r0, 81ae6 <ctrl_scarddata_cb+0x46>
{
   81aac:	b5f0      	push	{r4, r5, r6, r7, lr}
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81aae:	4b0e      	ldr	r3, [pc, #56]	; (81ae8 <ctrl_scarddata_cb+0x48>)
   81ab0:	885c      	ldrh	r4, [r3, #2]
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81ab2:	f8d3 c008 	ldr.w	ip, [r3, #8]
   81ab6:	1c66      	adds	r6, r4, #1
   81ab8:	b2b6      	uxth	r6, r6
   81aba:	2200      	movs	r2, #0
   81abc:	4613      	mov	r3, r2
   81abe:	f8df e030 	ldr.w	lr, [pc, #48]	; 81af0 <ctrl_scarddata_cb+0x50>
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81ac2:	4f0a      	ldr	r7, [pc, #40]	; (81aec <ctrl_scarddata_cb+0x4c>)
   81ac4:	e004      	b.n	81ad0 <ctrl_scarddata_cb+0x30>
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81ac6:	3301      	adds	r3, #1
   81ac8:	b2db      	uxtb	r3, r3
   81aca:	b29a      	uxth	r2, r3
   81acc:	4290      	cmp	r0, r2
   81ace:	d909      	bls.n	81ae4 <ctrl_scarddata_cb+0x44>
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81ad0:	1919      	adds	r1, r3, r4
   81ad2:	29ff      	cmp	r1, #255	; 0xff
   81ad4:	dcf7      	bgt.n	81ac6 <ctrl_scarddata_cb+0x26>
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81ad6:	f81c 5003 	ldrb.w	r5, [ip, r3]
   81ada:	f80e 5001 	strb.w	r5, [lr, r1]
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81ade:	4432      	add	r2, r6
   81ae0:	803a      	strh	r2, [r7, #0]
   81ae2:	e7f0      	b.n	81ac6 <ctrl_scarddata_cb+0x26>
   81ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81ae6:	4770      	bx	lr
   81ae8:	20002dec 	.word	0x20002dec
   81aec:	20002632 	.word	0x20002632
   81af0:	200023f0 	.word	0x200023f0

00081af4 <ctrl_scardaux_cb>:
	}
}

/* Handle "Smartcard Aux" Output from Computer */
void ctrl_scardaux_cb(void)
{
   81af4:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81af6:	4b2d      	ldr	r3, [pc, #180]	; (81bac <ctrl_scardaux_cb+0xb8>)
   81af8:	88da      	ldrh	r2, [r3, #6]
   81afa:	899b      	ldrh	r3, [r3, #12]
   81afc:	4293      	cmp	r3, r2
   81afe:	d303      	bcc.n	81b08 <ctrl_scardaux_cb+0x14>
	
	if((udd_g_ctrlreq.req.wValue & 0xFF) == SCARD_MODE_AT88SC102_OUT)
   81b00:	4b2a      	ldr	r3, [pc, #168]	; (81bac <ctrl_scardaux_cb+0xb8>)
   81b02:	789b      	ldrb	r3, [r3, #2]
   81b04:	2b03      	cmp	r3, #3
   81b06:	d000      	beq.n	81b0a <ctrl_scardaux_cb+0x16>
   81b08:	bd08      	pop	{r3, pc}
	{
		at88sc102_status = 0;
   81b0a:	2100      	movs	r1, #0
   81b0c:	4b28      	ldr	r3, [pc, #160]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81b0e:	7019      	strb	r1, [r3, #0]
		if (udd_g_ctrlreq.req.wLength < 1) return;
   81b10:	2a00      	cmp	r2, #0
   81b12:	d0f9      	beq.n	81b08 <ctrl_scardaux_cb+0x14>
		
		udd_g_ctrlreq.req.wLength--;
   81b14:	3a01      	subs	r2, #1
   81b16:	b292      	uxth	r2, r2
   81b18:	4b24      	ldr	r3, [pc, #144]	; (81bac <ctrl_scardaux_cb+0xb8>)
   81b1a:	80da      	strh	r2, [r3, #6]
		switch(udd_g_ctrlreq.payload[0]) {
   81b1c:	6898      	ldr	r0, [r3, #8]
   81b1e:	7803      	ldrb	r3, [r0, #0]
   81b20:	3b02      	subs	r3, #2
   81b22:	2b06      	cmp	r3, #6
   81b24:	d8f0      	bhi.n	81b08 <ctrl_scardaux_cb+0x14>
   81b26:	e8df f003 	tbb	[pc, r3]
   81b2a:	0b04      	.short	0x0b04
   81b2c:	2f261e15 	.word	0x2f261e15
   81b30:	38          	.byte	0x38
   81b31:	00          	.byte	0x00
			case SCARD_MODE_AT88SC102_INIT:
				/* FPGA must have been switched into proper mode as well */
				initPortSMC();
   81b32:	4b20      	ldr	r3, [pc, #128]	; (81bb4 <ctrl_scardaux_cb+0xc0>)
   81b34:	4798      	blx	r3
				at88sc102_status = firstDetectFunctionSMC();
   81b36:	4b20      	ldr	r3, [pc, #128]	; (81bb8 <ctrl_scardaux_cb+0xc4>)
   81b38:	4798      	blx	r3
   81b3a:	4b1d      	ldr	r3, [pc, #116]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81b3c:	7018      	strb	r0, [r3, #0]
				break;
   81b3e:	bd08      	pop	{r3, pc}
			
			case SCARD_MODE_AT88SC102_SENDPIN:
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b40:	2a01      	cmp	r2, #1
   81b42:	d9e1      	bls.n	81b08 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+1)), FALSE);
   81b44:	2100      	movs	r1, #0
   81b46:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   81b4a:	4b1c      	ldr	r3, [pc, #112]	; (81bbc <ctrl_scardaux_cb+0xc8>)
   81b4c:	4798      	blx	r3
   81b4e:	4b18      	ldr	r3, [pc, #96]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81b50:	7018      	strb	r0, [r3, #0]
				break;
   81b52:	bd08      	pop	{r3, pc}
			
			case SCARD_MODE_AT88SC102_CHANGEPIN:
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b54:	2a01      	cmp	r2, #1
   81b56:	d9d7      	bls.n	81b08 <ctrl_scardaux_cb+0x14>
				writeSecurityCode(((uint16_t *)(udd_g_ctrlreq.payload+1)));
   81b58:	3001      	adds	r0, #1
   81b5a:	4b19      	ldr	r3, [pc, #100]	; (81bc0 <ctrl_scardaux_cb+0xcc>)
   81b5c:	4798      	blx	r3
				at88sc102_status = 1;
   81b5e:	2201      	movs	r2, #1
   81b60:	4b13      	ldr	r3, [pc, #76]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81b62:	701a      	strb	r2, [r3, #0]
				break;
   81b64:	bd08      	pop	{r3, pc}
			
			case SCARD_MODE_AT88SC102_MOOLTIPASS:
				if (transformBlankCardIntoMooltipass() == RETURN_OK){
   81b66:	4b17      	ldr	r3, [pc, #92]	; (81bc4 <ctrl_scardaux_cb+0xd0>)
   81b68:	4798      	blx	r3
   81b6a:	2800      	cmp	r0, #0
   81b6c:	d1cc      	bne.n	81b08 <ctrl_scardaux_cb+0x14>
					at88sc102_status = 1;
   81b6e:	2201      	movs	r2, #1
   81b70:	4b0f      	ldr	r3, [pc, #60]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81b72:	701a      	strb	r2, [r3, #0]
   81b74:	bd08      	pop	{r3, pc}
				}
				break;
			
			case SCARD_MODE_AT88SC102_TESTPIN:
				if (udd_g_ctrlreq.req.wLength < 3) return;
   81b76:	2a02      	cmp	r2, #2
   81b78:	d9c6      	bls.n	81b08 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+2)), *(udd_g_ctrlreq.payload+1));
   81b7a:	7841      	ldrb	r1, [r0, #1]
   81b7c:	8840      	ldrh	r0, [r0, #2]
   81b7e:	4b0f      	ldr	r3, [pc, #60]	; (81bbc <ctrl_scardaux_cb+0xc8>)
   81b80:	4798      	blx	r3
   81b82:	4b0b      	ldr	r3, [pc, #44]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81b84:	7018      	strb	r0, [r3, #0]
				break;
   81b86:	bd08      	pop	{r3, pc}
				
			case SCARD_MODE_AT88SC102_TRIESLEFT:
				at88sc102_status = getNumberOfSecurityCodeTriesLeft();
   81b88:	4b0f      	ldr	r3, [pc, #60]	; (81bc8 <ctrl_scardaux_cb+0xd4>)
   81b8a:	4798      	blx	r3
   81b8c:	4a08      	ldr	r2, [pc, #32]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81b8e:	7010      	strb	r0, [r2, #0]
				udd_g_ctrlreq.payload = &at88sc102_status;
   81b90:	4b06      	ldr	r3, [pc, #24]	; (81bac <ctrl_scardaux_cb+0xb8>)
   81b92:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
   81b94:	2201      	movs	r2, #1
   81b96:	819a      	strh	r2, [r3, #12]
				break;
   81b98:	bd08      	pop	{r3, pc}
				
			case SCARD_MODE_AT88SC102_COMPAREBIT:
				// TODO: put in args
				compareBit(15, 1);
   81b9a:	2101      	movs	r1, #1
   81b9c:	200f      	movs	r0, #15
   81b9e:	4b0b      	ldr	r3, [pc, #44]	; (81bcc <ctrl_scardaux_cb+0xd8>)
   81ba0:	4798      	blx	r3
				at88sc102_status = 1; 
   81ba2:	2201      	movs	r2, #1
   81ba4:	4b02      	ldr	r3, [pc, #8]	; (81bb0 <ctrl_scardaux_cb+0xbc>)
   81ba6:	701a      	strb	r2, [r3, #0]
				break;
   81ba8:	e7ae      	b.n	81b08 <ctrl_scardaux_cb+0x14>
   81baa:	bf00      	nop
   81bac:	20002dec 	.word	0x20002dec
   81bb0:	2000262f 	.word	0x2000262f
   81bb4:	00081019 	.word	0x00081019
   81bb8:	00080ef1 	.word	0x00080ef1
   81bbc:	00080c3d 	.word	0x00080c3d
   81bc0:	000808cd 	.word	0x000808cd
   81bc4:	0008096d 	.word	0x0008096d
   81bc8:	000809f1 	.word	0x000809f1
   81bcc:	0008103d 	.word	0x0008103d

00081bd0 <scard_reset_init>:
	return;
}

/* Reset Smart-Card Interface on SAM3U Device */
void scard_reset_init(void)
{
   81bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81bd4:	b088      	sub	sp, #32
	usart_iso7816_opt_t conf_iso7816_t;
	conf_iso7816_t.iso7816_hz = ISO7816_BAUDRATE *ISO7816_FI_DI; //4000000UL;
   81bd6:	4b31      	ldr	r3, [pc, #196]	; (81c9c <scard_reset_init+0xcc>)
   81bd8:	9300      	str	r3, [sp, #0]
	conf_iso7816_t.fidi_ratio = ISO7816_FI_DI;
   81bda:	f44f 73ba 	mov.w	r3, #372	; 0x174
   81bde:	9301      	str	r3, [sp, #4]
	conf_iso7816_t.parity_type= US_MR_PAR_EVEN;
   81be0:	2300      	movs	r3, #0
   81be2:	9302      	str	r3, [sp, #8]
	conf_iso7816_t.inhibit_nack = 0x00;
   81be4:	9303      	str	r3, [sp, #12]
	conf_iso7816_t.dis_suc_nack = 0x00;
   81be6:	9304      	str	r3, [sp, #16]
	conf_iso7816_t.max_iterations = 0x03;
   81be8:	2503      	movs	r5, #3
   81bea:	9505      	str	r5, [sp, #20]
	conf_iso7816_t.bit_order = 0x00;
   81bec:	9306      	str	r3, [sp, #24]
	conf_iso7816_t.protocol_type = 0x00;	/* T=0 Protocol */
   81bee:	9307      	str	r3, [sp, #28]
   81bf0:	200f      	movs	r0, #15
   81bf2:	4b2b      	ldr	r3, [pc, #172]	; (81ca0 <scard_reset_init+0xd0>)
   81bf4:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	gpio_configure_pin(PIN_USART2_TXD, PIN_USART2_TXD_FLAGS);
   81bf6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bfa:	2016      	movs	r0, #22
   81bfc:	4c29      	ldr	r4, [pc, #164]	; (81ca4 <scard_reset_init+0xd4>)
   81bfe:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART2_SCK, PIN_USART2_SCK_FLAGS);
   81c00:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81c04:	2019      	movs	r0, #25
   81c06:	47a0      	blx	r4
	gpio_configure_pin(PIN_ISO7816_RST_IDX, PIN_ISO7816_RST_FLAG);
   81c08:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81c0c:	4628      	mov	r0, r5
   81c0e:	47a0      	blx	r4
	iso7816_init(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz(), PIN_ISO7816_RST_IDX);
   81c10:	4c25      	ldr	r4, [pc, #148]	; (81ca8 <scard_reset_init+0xd8>)
   81c12:	462b      	mov	r3, r5
   81c14:	4a25      	ldr	r2, [pc, #148]	; (81cac <scard_reset_init+0xdc>)
   81c16:	4669      	mov	r1, sp
   81c18:	4620      	mov	r0, r4
   81c1a:	4d25      	ldr	r5, [pc, #148]	; (81cb0 <scard_reset_init+0xe0>)
   81c1c:	47a8      	blx	r5
	
	/* Reset (includes power off/on */
	iso7816_warm_reset(SCARD_USART);
   81c1e:	4620      	mov	r0, r4
   81c20:	4b24      	ldr	r3, [pc, #144]	; (81cb4 <scard_reset_init+0xe4>)
   81c22:	4798      	blx	r3
	
	iso7816_data_block_atr(SCARD_USART, scard_atr, &scard_atr_size);
   81c24:	4d24      	ldr	r5, [pc, #144]	; (81cb8 <scard_reset_init+0xe8>)
   81c26:	4e25      	ldr	r6, [pc, #148]	; (81cbc <scard_reset_init+0xec>)
   81c28:	462a      	mov	r2, r5
   81c2a:	4631      	mov	r1, r6
   81c2c:	4620      	mov	r0, r4
   81c2e:	4b24      	ldr	r3, [pc, #144]	; (81cc0 <scard_reset_init+0xf0>)
   81c30:	4798      	blx	r3
	scard_protocol = iso7816_decode_atr(SCARD_USART, scard_atr);
   81c32:	4631      	mov	r1, r6
   81c34:	4620      	mov	r0, r4
   81c36:	4b23      	ldr	r3, [pc, #140]	; (81cc4 <scard_reset_init+0xf4>)
   81c38:	4798      	blx	r3
   81c3a:	4b23      	ldr	r3, [pc, #140]	; (81cc8 <scard_reset_init+0xf8>)
   81c3c:	7018      	strb	r0, [r3, #0]
	
	printf("ATR (%d len): ", scard_atr_size);
   81c3e:	7829      	ldrb	r1, [r5, #0]
   81c40:	4822      	ldr	r0, [pc, #136]	; (81ccc <scard_reset_init+0xfc>)
   81c42:	4b23      	ldr	r3, [pc, #140]	; (81cd0 <scard_reset_init+0x100>)
   81c44:	4798      	blx	r3
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c46:	782b      	ldrb	r3, [r5, #0]
   81c48:	b16b      	cbz	r3, 81c66 <scard_reset_init+0x96>
   81c4a:	1e75      	subs	r5, r6, #1
   81c4c:	2400      	movs	r4, #0
		printf("%02x ", scard_atr[i]);
   81c4e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 81ce4 <scard_reset_init+0x114>
   81c52:	4f1f      	ldr	r7, [pc, #124]	; (81cd0 <scard_reset_init+0x100>)
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c54:	4e18      	ldr	r6, [pc, #96]	; (81cb8 <scard_reset_init+0xe8>)
		printf("%02x ", scard_atr[i]);
   81c56:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   81c5a:	4640      	mov	r0, r8
   81c5c:	47b8      	blx	r7
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c5e:	3401      	adds	r4, #1
   81c60:	7833      	ldrb	r3, [r6, #0]
   81c62:	42a3      	cmp	r3, r4
   81c64:	d8f7      	bhi.n	81c56 <scard_reset_init+0x86>
	}
	printf("\n");
   81c66:	481b      	ldr	r0, [pc, #108]	; (81cd4 <scard_reset_init+0x104>)
   81c68:	4b19      	ldr	r3, [pc, #100]	; (81cd0 <scard_reset_init+0x100>)
   81c6a:	4798      	blx	r3
	
	if (scard_protocol == 1) {
   81c6c:	4b16      	ldr	r3, [pc, #88]	; (81cc8 <scard_reset_init+0xf8>)
   81c6e:	781b      	ldrb	r3, [r3, #0]
   81c70:	2b01      	cmp	r3, #1
   81c72:	d002      	beq.n	81c7a <scard_reset_init+0xaa>
		/* Enable TX and RX. */
		usart_enable_rx(SCARD_USART);
		usart_enable_tx(SCARD_USART);
	}

}
   81c74:	b008      	add	sp, #32
   81c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conf_iso7816_t.protocol_type  = 1;
   81c7a:	9307      	str	r3, [sp, #28]
		conf_iso7816_t.max_iterations = 0;
   81c7c:	2300      	movs	r3, #0
   81c7e:	9305      	str	r3, [sp, #20]
		usart_init_iso7816(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz());
   81c80:	4c09      	ldr	r4, [pc, #36]	; (81ca8 <scard_reset_init+0xd8>)
   81c82:	4a0a      	ldr	r2, [pc, #40]	; (81cac <scard_reset_init+0xdc>)
   81c84:	4669      	mov	r1, sp
   81c86:	4620      	mov	r0, r4
   81c88:	4b13      	ldr	r3, [pc, #76]	; (81cd8 <scard_reset_init+0x108>)
   81c8a:	4798      	blx	r3
		usart_enable_rx(SCARD_USART);
   81c8c:	4620      	mov	r0, r4
   81c8e:	4b13      	ldr	r3, [pc, #76]	; (81cdc <scard_reset_init+0x10c>)
   81c90:	4798      	blx	r3
		usart_enable_tx(SCARD_USART);
   81c92:	4620      	mov	r0, r4
   81c94:	4b12      	ldr	r3, [pc, #72]	; (81ce0 <scard_reset_init+0x110>)
   81c96:	4798      	blx	r3
}
   81c98:	e7ec      	b.n	81c74 <scard_reset_init+0xa4>
   81c9a:	bf00      	nop
   81c9c:	00367e00 	.word	0x00367e00
   81ca0:	00085515 	.word	0x00085515
   81ca4:	000851d1 	.word	0x000851d1
   81ca8:	40098000 	.word	0x40098000
   81cac:	05b8d800 	.word	0x05b8d800
   81cb0:	00081995 	.word	0x00081995
   81cb4:	00081745 	.word	0x00081745
   81cb8:	200025f4 	.word	0x200025f4
   81cbc:	200025f8 	.word	0x200025f8
   81cc0:	000815d1 	.word	0x000815d1
   81cc4:	000817c9 	.word	0x000817c9
   81cc8:	20002630 	.word	0x20002630
   81ccc:	0008d914 	.word	0x0008d914
   81cd0:	00087835 	.word	0x00087835
   81cd4:	0008da08 	.word	0x0008da08
   81cd8:	00086ba1 	.word	0x00086ba1
   81cdc:	00086de9 	.word	0x00086de9
   81ce0:	00086dd9 	.word	0x00086dd9
   81ce4:	0008d924 	.word	0x0008d924

00081ce8 <ctrl_scardconfig_cb>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81ce8:	4b15      	ldr	r3, [pc, #84]	; (81d40 <ctrl_scardconfig_cb+0x58>)
   81cea:	88da      	ldrh	r2, [r3, #6]
   81cec:	899b      	ldrh	r3, [r3, #12]
   81cee:	429a      	cmp	r2, r3
   81cf0:	d824      	bhi.n	81d3c <ctrl_scardconfig_cb+0x54>
{
   81cf2:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81cf4:	4b12      	ldr	r3, [pc, #72]	; (81d40 <ctrl_scardconfig_cb+0x58>)
   81cf6:	789b      	ldrb	r3, [r3, #2]
   81cf8:	2b01      	cmp	r3, #1
   81cfa:	d002      	beq.n	81d02 <ctrl_scardconfig_cb+0x1a>
   81cfc:	2b05      	cmp	r3, #5
   81cfe:	d003      	beq.n	81d08 <ctrl_scardconfig_cb+0x20>
   81d00:	bd10      	pop	{r4, pc}
			scard_reset_init();
   81d02:	4b10      	ldr	r3, [pc, #64]	; (81d44 <ctrl_scardconfig_cb+0x5c>)
   81d04:	4798      	blx	r3
			break;
   81d06:	bd10      	pop	{r4, pc}
			scard_rx_buffer_size = 0;
   81d08:	2200      	movs	r2, #0
   81d0a:	4b0f      	ldr	r3, [pc, #60]	; (81d48 <ctrl_scardconfig_cb+0x60>)
   81d0c:	801a      	strh	r2, [r3, #0]
			if (scard_protocol){
   81d0e:	4b0f      	ldr	r3, [pc, #60]	; (81d4c <ctrl_scardconfig_cb+0x64>)
   81d10:	781b      	ldrb	r3, [r3, #0]
   81d12:	b94b      	cbnz	r3, 81d28 <ctrl_scardconfig_cb+0x40>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t0(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81d14:	4b0e      	ldr	r3, [pc, #56]	; (81d50 <ctrl_scardconfig_cb+0x68>)
   81d16:	881b      	ldrh	r3, [r3, #0]
   81d18:	4a0e      	ldr	r2, [pc, #56]	; (81d54 <ctrl_scardconfig_cb+0x6c>)
   81d1a:	490f      	ldr	r1, [pc, #60]	; (81d58 <ctrl_scardconfig_cb+0x70>)
   81d1c:	480f      	ldr	r0, [pc, #60]	; (81d5c <ctrl_scardconfig_cb+0x74>)
   81d1e:	4c10      	ldr	r4, [pc, #64]	; (81d60 <ctrl_scardconfig_cb+0x78>)
   81d20:	47a0      	blx	r4
   81d22:	4b09      	ldr	r3, [pc, #36]	; (81d48 <ctrl_scardconfig_cb+0x60>)
   81d24:	8018      	strh	r0, [r3, #0]
   81d26:	bd10      	pop	{r4, pc}
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t1(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81d28:	4b09      	ldr	r3, [pc, #36]	; (81d50 <ctrl_scardconfig_cb+0x68>)
   81d2a:	881b      	ldrh	r3, [r3, #0]
   81d2c:	4a09      	ldr	r2, [pc, #36]	; (81d54 <ctrl_scardconfig_cb+0x6c>)
   81d2e:	490a      	ldr	r1, [pc, #40]	; (81d58 <ctrl_scardconfig_cb+0x70>)
   81d30:	480a      	ldr	r0, [pc, #40]	; (81d5c <ctrl_scardconfig_cb+0x74>)
   81d32:	4c0c      	ldr	r4, [pc, #48]	; (81d64 <ctrl_scardconfig_cb+0x7c>)
   81d34:	47a0      	blx	r4
   81d36:	4b04      	ldr	r3, [pc, #16]	; (81d48 <ctrl_scardconfig_cb+0x60>)
   81d38:	8018      	strh	r0, [r3, #0]
   81d3a:	bd10      	pop	{r4, pc}
   81d3c:	4770      	bx	lr
   81d3e:	bf00      	nop
   81d40:	20002dec 	.word	0x20002dec
   81d44:	00081bd1 	.word	0x00081bd1
   81d48:	200024f0 	.word	0x200024f0
   81d4c:	20002630 	.word	0x20002630
   81d50:	20002632 	.word	0x20002632
   81d54:	200024f4 	.word	0x200024f4
   81d58:	200023f0 	.word	0x200023f0
   81d5c:	40098000 	.word	0x40098000
   81d60:	00081209 	.word	0x00081209
   81d64:	000813e5 	.word	0x000813e5

00081d68 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81d68:	b510      	push	{r4, lr}
   81d6a:	4604      	mov	r4, r0
	int ret = 0;
	cpu_irq_enter_critical();
   81d6c:	4b06      	ldr	r3, [pc, #24]	; (81d88 <FPGA_setlock+0x20>)
   81d6e:	4798      	blx	r3
	if (_fpga_locked == fpga_unlocked)
   81d70:	4b06      	ldr	r3, [pc, #24]	; (81d8c <FPGA_setlock+0x24>)
   81d72:	781b      	ldrb	r3, [r3, #0]
   81d74:	b933      	cbnz	r3, 81d84 <FPGA_setlock+0x1c>
	{
		ret = 1;
		_fpga_locked = lockstatus;	
   81d76:	4b05      	ldr	r3, [pc, #20]	; (81d8c <FPGA_setlock+0x24>)
   81d78:	701c      	strb	r4, [r3, #0]
		ret = 1;
   81d7a:	2401      	movs	r4, #1
	}
	cpu_irq_leave_critical();
   81d7c:	4b04      	ldr	r3, [pc, #16]	; (81d90 <FPGA_setlock+0x28>)
   81d7e:	4798      	blx	r3
	return ret;
}
   81d80:	4620      	mov	r0, r4
   81d82:	bd10      	pop	{r4, pc}
	int ret = 0;
   81d84:	2400      	movs	r4, #0
   81d86:	e7f9      	b.n	81d7c <FPGA_setlock+0x14>
   81d88:	00084ebd 	.word	0x00084ebd
   81d8c:	20001921 	.word	0x20001921
   81d90:	00084ef9 	.word	0x00084ef9

00081d94 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
	_fpga_locked = fpga_unlocked;
   81d94:	2200      	movs	r2, #0
   81d96:	4b01      	ldr	r3, [pc, #4]	; (81d9c <FPGA_releaselock+0x8>)
   81d98:	701a      	strb	r2, [r3, #0]
   81d9a:	4770      	bx	lr
   81d9c:	20001921 	.word	0x20001921

00081da0 <FPGA_lockstatus>:
}

fpga_lockstatus_t FPGA_lockstatus(void)
{
	return _fpga_locked;
   81da0:	4b01      	ldr	r3, [pc, #4]	; (81da8 <FPGA_lockstatus+0x8>)
   81da2:	7818      	ldrb	r0, [r3, #0]
}
   81da4:	4770      	bx	lr
   81da6:	bf00      	nop
   81da8:	20001921 	.word	0x20001921

00081dac <FPGA_setaddr>:
	FPGA_releaselock();
	cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81dac:	b508      	push	{r3, lr}
	pio_sync_output_write(FPGA_ADDR_PORT, addr);
   81dae:	4601      	mov	r1, r0
   81db0:	4804      	ldr	r0, [pc, #16]	; (81dc4 <FPGA_setaddr+0x18>)
   81db2:	4b05      	ldr	r3, [pc, #20]	; (81dc8 <FPGA_setaddr+0x1c>)
   81db4:	4798      	blx	r3
	gpio_set_pin_low(FPGA_ALE_GPIO);
   81db6:	2035      	movs	r0, #53	; 0x35
   81db8:	4b04      	ldr	r3, [pc, #16]	; (81dcc <FPGA_setaddr+0x20>)
   81dba:	4798      	blx	r3
	gpio_set_pin_high(FPGA_ALE_GPIO);
   81dbc:	2035      	movs	r0, #53	; 0x35
   81dbe:	4b04      	ldr	r3, [pc, #16]	; (81dd0 <FPGA_setaddr+0x24>)
   81dc0:	4798      	blx	r3
   81dc2:	bd08      	pop	{r3, pc}
   81dc4:	400e0e00 	.word	0x400e0e00
   81dc8:	00085173 	.word	0x00085173
   81dcc:	000851b5 	.word	0x000851b5
   81dd0:	0008519b 	.word	0x0008519b

00081dd4 <smc_normaltiming>:
		*(xram+i) = data[i];
	}
}

//Set timing for normal mode
void smc_normaltiming(void){
   81dd4:	b510      	push	{r4, lr}
	smc_set_setup_timing(SMC, 0,
   81dd6:	4c0b      	ldr	r4, [pc, #44]	; (81e04 <smc_normaltiming+0x30>)
   81dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
   81ddc:	2100      	movs	r1, #0
   81dde:	4620      	mov	r0, r4
   81de0:	4b09      	ldr	r3, [pc, #36]	; (81e08 <smc_normaltiming+0x34>)
   81de2:	4798      	blx	r3
	SMC_SETUP_NCS_WR_SETUP(1) |
	SMC_SETUP_NRD_SETUP(0) |
	SMC_SETUP_NCS_RD_SETUP(0)
	);
	
	smc_set_pulse_timing(SMC, 0,
   81de4:	4a09      	ldr	r2, [pc, #36]	; (81e0c <smc_normaltiming+0x38>)
   81de6:	2100      	movs	r1, #0
   81de8:	4620      	mov	r0, r4
   81dea:	4b09      	ldr	r3, [pc, #36]	; (81e10 <smc_normaltiming+0x3c>)
   81dec:	4798      	blx	r3
	SMC_PULSE_NCS_WR_PULSE(1) |
	SMC_PULSE_NRD_PULSE(4) |
	SMC_PULSE_NCS_RD_PULSE(4)
	);
	
	smc_set_cycle_timing(SMC, 0,
   81dee:	4a09      	ldr	r2, [pc, #36]	; (81e14 <smc_normaltiming+0x40>)
   81df0:	2100      	movs	r1, #0
   81df2:	4620      	mov	r0, r4
   81df4:	4b08      	ldr	r3, [pc, #32]	; (81e18 <smc_normaltiming+0x44>)
   81df6:	4798      	blx	r3
	SMC_CYCLE_NWE_CYCLE(2) |
	SMC_CYCLE_NRD_CYCLE(5)
	);
	
	smc_set_mode(SMC, 0,
   81df8:	2203      	movs	r2, #3
   81dfa:	2100      	movs	r1, #0
   81dfc:	4620      	mov	r0, r4
   81dfe:	4b07      	ldr	r3, [pc, #28]	; (81e1c <smc_normaltiming+0x48>)
   81e00:	4798      	blx	r3
   81e02:	bd10      	pop	{r4, pc}
   81e04:	400e0000 	.word	0x400e0000
   81e08:	000850a5 	.word	0x000850a5
   81e0c:	04040101 	.word	0x04040101
   81e10:	000850b1 	.word	0x000850b1
   81e14:	00050002 	.word	0x00050002
   81e18:	000850bd 	.word	0x000850bd
   81e1c:	000850c9 	.word	0x000850c9

00081e20 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81e20:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81e22:	f1a1 030e 	sub.w	r3, r1, #14
   81e26:	2b01      	cmp	r3, #1
   81e28:	d802      	bhi.n	81e30 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   81e2a:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   81e2e:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e30:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   81e34:	b672      	cpsid	i
   81e36:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81e3a:	2500      	movs	r5, #0
   81e3c:	4b0a      	ldr	r3, [pc, #40]	; (81e68 <efc_perform_command+0x48>)
   81e3e:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81e40:	0212      	lsls	r2, r2, #8
   81e42:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   81e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   81e4a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   81e4e:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   81e50:	4311      	orrs	r1, r2
   81e52:	4b06      	ldr	r3, [pc, #24]	; (81e6c <efc_perform_command+0x4c>)
   81e54:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   81e56:	2c00      	cmp	r4, #0
   81e58:	d1e9      	bne.n	81e2e <efc_perform_command+0xe>
		cpu_irq_enable();
   81e5a:	2201      	movs	r2, #1
   81e5c:	4b02      	ldr	r3, [pc, #8]	; (81e68 <efc_perform_command+0x48>)
   81e5e:	701a      	strb	r2, [r3, #0]
   81e60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81e64:	b662      	cpsie	i
   81e66:	bd38      	pop	{r3, r4, r5, pc}
   81e68:	200006ea 	.word	0x200006ea
   81e6c:	2000006d 	.word	0x2000006d

00081e70 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81e70:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e72:	0189      	lsls	r1, r1, #6
   81e74:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81e76:	2402      	movs	r4, #2
   81e78:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81e7a:	f04f 31ff 	mov.w	r1, #4294967295
   81e7e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81e80:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81e82:	605a      	str	r2, [r3, #4]
}
   81e84:	bc10      	pop	{r4}
   81e86:	4770      	bx	lr

00081e88 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81e88:	0189      	lsls	r1, r1, #6
   81e8a:	2305      	movs	r3, #5
   81e8c:	5043      	str	r3, [r0, r1]
   81e8e:	4770      	bx	lr

00081e90 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81e90:	0189      	lsls	r1, r1, #6
   81e92:	2302      	movs	r3, #2
   81e94:	5043      	str	r3, [r0, r1]
   81e96:	4770      	bx	lr

00081e98 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81e98:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81e9c:	61ca      	str	r2, [r1, #28]
   81e9e:	4770      	bx	lr

00081ea0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81ea0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81ea4:	624a      	str	r2, [r1, #36]	; 0x24
   81ea6:	4770      	bx	lr

00081ea8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81ea8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81eac:	6a08      	ldr	r0, [r1, #32]
}
   81eae:	4770      	bx	lr

00081eb0 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81eb0:	b570      	push	{r4, r5, r6, lr}
   81eb2:	b086      	sub	sp, #24
   81eb4:	4604      	mov	r4, r0
   81eb6:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81eb8:	2304      	movs	r3, #4
   81eba:	9300      	str	r3, [sp, #0]
   81ebc:	ab02      	add	r3, sp, #8
   81ebe:	220f      	movs	r2, #15
   81ec0:	210e      	movs	r1, #14
   81ec2:	480d      	ldr	r0, [pc, #52]	; (81ef8 <flash_read_unique_id+0x48>)
   81ec4:	4d0d      	ldr	r5, [pc, #52]	; (81efc <flash_read_unique_id+0x4c>)
   81ec6:	47a8      	blx	r5
   81ec8:	b118      	cbz	r0, 81ed2 <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81eca:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   81ecc:	4628      	mov	r0, r5
   81ece:	b006      	add	sp, #24
   81ed0:	bd70      	pop	{r4, r5, r6, pc}
   81ed2:	4605      	mov	r5, r0
   81ed4:	2e04      	cmp	r6, #4
   81ed6:	bf28      	it	cs
   81ed8:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81eda:	b156      	cbz	r6, 81ef2 <flash_read_unique_id+0x42>
   81edc:	aa02      	add	r2, sp, #8
   81ede:	4623      	mov	r3, r4
   81ee0:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   81ee4:	f852 0b04 	ldr.w	r0, [r2], #4
   81ee8:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81eec:	428b      	cmp	r3, r1
   81eee:	d1f9      	bne.n	81ee4 <flash_read_unique_id+0x34>
   81ef0:	e7ec      	b.n	81ecc <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   81ef2:	4635      	mov	r5, r6
   81ef4:	e7ea      	b.n	81ecc <flash_read_unique_id+0x1c>
   81ef6:	bf00      	nop
   81ef8:	400e0800 	.word	0x400e0800
   81efc:	20000001 	.word	0x20000001

00081f00 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   81f00:	2300      	movs	r3, #0
   81f02:	6043      	str	r3, [r0, #4]
   81f04:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   81f06:	6083      	str	r3, [r0, #8]
   81f08:	4770      	bx	lr
	...

00081f0c <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81f0c:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   81f0e:	b672      	cpsid	i
   81f10:	f3bf 8f5f 	dmb	sy
    // Add char to buffer
	cpu_irq_disable();
   81f14:	2400      	movs	r4, #0
   81f16:	4b11      	ldr	r3, [pc, #68]	; (81f5c <add_to_circ_buf+0x50>)
   81f18:	701c      	strb	r4, [r3, #0]
    unsigned int newhead = cbuf->head;
   81f1a:	6804      	ldr	r4, [r0, #0]
    newhead++;
   81f1c:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   81f1e:	2cc8      	cmp	r4, #200	; 0xc8
   81f20:	bf28      	it	cs
   81f22:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   81f24:	6843      	ldr	r3, [r0, #4]
   81f26:	42a3      	cmp	r3, r4
   81f28:	d10b      	bne.n	81f42 <add_to_circ_buf+0x36>
    {
        if (!block)
   81f2a:	2a00      	cmp	r2, #0
   81f2c:	d1fa      	bne.n	81f24 <add_to_circ_buf+0x18>
        {
            cbuf->dropped++;
   81f2e:	6883      	ldr	r3, [r0, #8]
   81f30:	3301      	adds	r3, #1
   81f32:	6083      	str	r3, [r0, #8]
			cpu_irq_enable();
   81f34:	2201      	movs	r2, #1
   81f36:	4b09      	ldr	r3, [pc, #36]	; (81f5c <add_to_circ_buf+0x50>)
   81f38:	701a      	strb	r2, [r3, #0]
   81f3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f3e:	b662      	cpsie	i
   81f40:	e009      	b.n	81f56 <add_to_circ_buf+0x4a>
        //TODO: Need to add processing here if you want a blocking
		//      function.
        
    }

    cbuf->buf[cbuf->head] = ch;
   81f42:	6803      	ldr	r3, [r0, #0]
   81f44:	4403      	add	r3, r0
   81f46:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   81f48:	6004      	str	r4, [r0, #0]
	cpu_irq_enable();
   81f4a:	2201      	movs	r2, #1
   81f4c:	4b03      	ldr	r3, [pc, #12]	; (81f5c <add_to_circ_buf+0x50>)
   81f4e:	701a      	strb	r2, [r3, #0]
   81f50:	f3bf 8f5f 	dmb	sy
   81f54:	b662      	cpsie	i
}
   81f56:	bc10      	pop	{r4}
   81f58:	4770      	bx	lr
   81f5a:	bf00      	nop
   81f5c:	200006ea 	.word	0x200006ea

00081f60 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81f60:	4602      	mov	r2, r0
  __ASM volatile ("cpsid i");
   81f62:	b672      	cpsid	i
   81f64:	f3bf 8f5f 	dmb	sy
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
	cpu_irq_disable();
   81f68:	2100      	movs	r1, #0
   81f6a:	4b0e      	ldr	r3, [pc, #56]	; (81fa4 <get_from_circ_buf+0x44>)
   81f6c:	7019      	strb	r1, [r3, #0]
    unsigned int newtail = cbuf->tail;
   81f6e:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head) {
   81f70:	6801      	ldr	r1, [r0, #0]
   81f72:	428b      	cmp	r3, r1
   81f74:	d00d      	beq.n	81f92 <get_from_circ_buf+0x32>
		cpu_irq_enable();
        return SERIAL_ERR;
	}

    newtail++;
   81f76:	1c59      	adds	r1, r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   81f78:	29c8      	cmp	r1, #200	; 0xc8
   81f7a:	bf28      	it	cs
   81f7c:	2100      	movcs	r1, #0
    uint8_t retval = cbuf->buf[newtail];
   81f7e:	4403      	add	r3, r0
   81f80:	7b18      	ldrb	r0, [r3, #12]
    cbuf->tail = newtail;
   81f82:	6051      	str	r1, [r2, #4]

	cpu_irq_enable();
   81f84:	2201      	movs	r2, #1
   81f86:	4b07      	ldr	r3, [pc, #28]	; (81fa4 <get_from_circ_buf+0x44>)
   81f88:	701a      	strb	r2, [r3, #0]
   81f8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f8e:	b662      	cpsie	i
    return retval;
}
   81f90:	4770      	bx	lr
		cpu_irq_enable();
   81f92:	2201      	movs	r2, #1
   81f94:	4b03      	ldr	r3, [pc, #12]	; (81fa4 <get_from_circ_buf+0x44>)
   81f96:	701a      	strb	r2, [r3, #0]
   81f98:	f3bf 8f5f 	dmb	sy
   81f9c:	b662      	cpsie	i
        return SERIAL_ERR;
   81f9e:	20ff      	movs	r0, #255	; 0xff
   81fa0:	4770      	bx	lr
   81fa2:	bf00      	nop
   81fa4:	200006ea 	.word	0x200006ea

00081fa8 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81fa8:	6802      	ldr	r2, [r0, #0]
    return (head != cbuf->tail);
   81faa:	6840      	ldr	r0, [r0, #4]
}
   81fac:	1a10      	subs	r0, r2, r0
   81fae:	bf18      	it	ne
   81fb0:	2001      	movne	r0, #1
   81fb2:	4770      	bx	lr

00081fb4 <circ_buf_count>:
  __ASM volatile ("cpsid i");
   81fb4:	b672      	cpsid	i
   81fb6:	f3bf 8f5f 	dmb	sy
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

	cpu_irq_disable();
   81fba:	2200      	movs	r2, #0
   81fbc:	4b06      	ldr	r3, [pc, #24]	; (81fd8 <circ_buf_count+0x24>)
   81fbe:	701a      	strb	r2, [r3, #0]
    count = cbuf->head;
   81fc0:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   81fc2:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   81fc4:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   81fc6:	bf48      	it	mi
   81fc8:	30c8      	addmi	r0, #200	; 0xc8
		
	cpu_irq_enable();
   81fca:	2201      	movs	r2, #1
   81fcc:	4b02      	ldr	r3, [pc, #8]	; (81fd8 <circ_buf_count+0x24>)
   81fce:	701a      	strb	r2, [r3, #0]
   81fd0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81fd4:	b662      	cpsie	i
    return (unsigned int)count;
}
   81fd6:	4770      	bx	lr
   81fd8:	200006ea 	.word	0x200006ea

00081fdc <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   81fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fe0:	b08d      	sub	sp, #52	; 0x34
   81fe2:	9104      	str	r1, [sp, #16]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   81fe4:	4b90      	ldr	r3, [pc, #576]	; (82228 <ISPProtocol_ProgramMemory+0x24c>)
   81fe6:	8999      	ldrh	r1, [r3, #12]
   81fe8:	2909      	cmp	r1, #9
   81fea:	d005      	beq.n	81ff8 <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   81fec:	488f      	ldr	r0, [pc, #572]	; (8222c <ISPProtocol_ProgramMemory+0x250>)
   81fee:	4b90      	ldr	r3, [pc, #576]	; (82230 <ISPProtocol_ProgramMemory+0x254>)
   81ff0:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   81ff2:	b00d      	add	sp, #52	; 0x34
   81ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ff8:	4605      	mov	r5, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   81ffa:	4b8b      	ldr	r3, [pc, #556]	; (82228 <ISPProtocol_ProgramMemory+0x24c>)
   81ffc:	689a      	ldr	r2, [r3, #8]
   81ffe:	ab09      	add	r3, sp, #36	; 0x24
   82000:	6810      	ldr	r0, [r2, #0]
   82002:	6851      	ldr	r1, [r2, #4]
   82004:	c303      	stmia	r3!, {r0, r1}
   82006:	8912      	ldrh	r2, [r2, #8]
   82008:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   8200a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   8200e:	9303      	str	r3, [sp, #12]
   82010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82014:	d907      	bls.n	82026 <ISPProtocol_ProgramMemory+0x4a>
		avrisp_status_payload[0] = V2Command;
   82016:	4b87      	ldr	r3, [pc, #540]	; (82234 <ISPProtocol_ProgramMemory+0x258>)
   82018:	701d      	strb	r5, [r3, #0]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8201a:	22c0      	movs	r2, #192	; 0xc0
   8201c:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   8201e:	2202      	movs	r2, #2
   82020:	4b85      	ldr	r3, [pc, #532]	; (82238 <ISPProtocol_ProgramMemory+0x25c>)
   82022:	801a      	strh	r2, [r3, #0]
		return;
   82024:	e7e5      	b.n	81ff2 <ISPProtocol_ProgramMemory+0x16>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   82026:	2d13      	cmp	r5, #19
   82028:	bf0c      	ite	eq
   8202a:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   8202e:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   82032:	9305      	str	r3, [sp, #20]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   82034:	4b81      	ldr	r3, [pc, #516]	; (8223c <ISPProtocol_ProgramMemory+0x260>)
   82036:	681b      	ldr	r3, [r3, #0]
   82038:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   8203a:	9b03      	ldr	r3, [sp, #12]
   8203c:	2b00      	cmp	r3, #0
   8203e:	d03f      	beq.n	820c0 <ISPProtocol_ProgramMemory+0xe4>
   82040:	3b01      	subs	r3, #1
   82042:	b29b      	uxth	r3, r3
   82044:	3301      	adds	r3, #1
   82046:	9a04      	ldr	r2, [sp, #16]
   82048:	18d3      	adds	r3, r2, r3
   8204a:	9306      	str	r3, [sp, #24]
   8204c:	4617      	mov	r7, r2
   8204e:	2300      	movs	r3, #0
   82050:	9303      	str	r3, [sp, #12]
			MustLoadExtendedAddress = false;
   82052:	46ab      	mov	fp, r5
   82054:	e092      	b.n	8217c <ISPProtocol_ProgramMemory+0x1a0>
			ISPTarget_LoadExtendedAddress();
   82056:	4b7a      	ldr	r3, [pc, #488]	; (82240 <ISPProtocol_ProgramMemory+0x264>)
   82058:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   8205a:	4b7a      	ldr	r3, [pc, #488]	; (82244 <ISPProtocol_ProgramMemory+0x268>)
   8205c:	f04f 0200 	mov.w	r2, #0
   82060:	701a      	strb	r2, [r3, #0]
   82062:	e099      	b.n	82198 <ISPProtocol_ProgramMemory+0x1bc>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   82064:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82068:	f043 0308 	orr.w	r3, r3, #8
   8206c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   82070:	4b72      	ldr	r3, [pc, #456]	; (8223c <ISPProtocol_ProgramMemory+0x260>)
   82072:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82074:	f019 0f01 	tst.w	r9, #1
   82078:	f000 80c6 	beq.w	82208 <ISPProtocol_ProgramMemory+0x22c>
			PollAddress = (CurrentAddress & 0xFFFF);
   8207c:	9303      	str	r3, [sp, #12]
			CurrentAddress++;
   8207e:	4a6f      	ldr	r2, [pc, #444]	; (8223c <ISPProtocol_ProgramMemory+0x260>)
   82080:	6813      	ldr	r3, [r2, #0]
   82082:	3301      	adds	r3, #1
   82084:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82086:	f1bb 0f13 	cmp.w	fp, #19
   8208a:	d174      	bne.n	82176 <ISPProtocol_ProgramMemory+0x19a>
   8208c:	b29b      	uxth	r3, r3
   8208e:	2b00      	cmp	r3, #0
   82090:	d171      	bne.n	82176 <ISPProtocol_ProgramMemory+0x19a>
			  MustLoadExtendedAddress = true;
   82092:	2301      	movs	r3, #1
   82094:	4a6b      	ldr	r2, [pc, #428]	; (82244 <ISPProtocol_ProgramMemory+0x268>)
   82096:	7013      	strb	r3, [r2, #0]
   82098:	e06d      	b.n	82176 <ISPProtocol_ProgramMemory+0x19a>
   8209a:	9303      	str	r3, [sp, #12]
   8209c:	e056      	b.n	8214c <ISPProtocol_ProgramMemory+0x170>
			PollAddress = (CurrentAddress & 0xFFFF);
   8209e:	9303      	str	r3, [sp, #12]
   820a0:	e063      	b.n	8216a <ISPProtocol_ProgramMemory+0x18e>
   820a2:	465d      	mov	r5, fp
   820a4:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   820a6:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
   820aa:	fa4f f488 	sxtb.w	r4, r8
   820ae:	2c00      	cmp	r4, #0
   820b0:	db0a      	blt.n	820c8 <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   820b2:	4a60      	ldr	r2, [pc, #384]	; (82234 <ISPProtocol_ProgramMemory+0x258>)
   820b4:	7015      	strb	r5, [r2, #0]
	avrisp_status_payload[1] = ProgrammingStatus;
   820b6:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   820b8:	2202      	movs	r2, #2
   820ba:	4b5f      	ldr	r3, [pc, #380]	; (82238 <ISPProtocol_ProgramMemory+0x25c>)
   820bc:	801a      	strh	r2, [r3, #0]
   820be:	e798      	b.n	81ff2 <ISPProtocol_ProgramMemory+0x16>
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   820c0:	2300      	movs	r3, #0
   820c2:	e7f0      	b.n	820a6 <ISPProtocol_ProgramMemory+0xca>
   820c4:	465d      	mov	r5, fp
   820c6:	e7ee      	b.n	820a6 <ISPProtocol_ProgramMemory+0xca>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   820c8:	4f5f      	ldr	r7, [pc, #380]	; (82248 <ISPProtocol_ProgramMemory+0x26c>)
   820ca:	2300      	movs	r3, #0
   820cc:	461a      	mov	r2, r3
   820ce:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   820d2:	4638      	mov	r0, r7
   820d4:	4e5d      	ldr	r6, [pc, #372]	; (8224c <ISPProtocol_ProgramMemory+0x270>)
   820d6:	47b0      	blx	r6
   820d8:	2300      	movs	r3, #0
   820da:	461a      	mov	r2, r3
   820dc:	9907      	ldr	r1, [sp, #28]
   820de:	f3c1 2107 	ubfx	r1, r1, #8, #8
   820e2:	4638      	mov	r0, r7
   820e4:	47b0      	blx	r6
   820e6:	2300      	movs	r3, #0
   820e8:	461a      	mov	r2, r3
   820ea:	f89d 101c 	ldrb.w	r1, [sp, #28]
   820ee:	4638      	mov	r0, r7
   820f0:	47b0      	blx	r6
   820f2:	2300      	movs	r3, #0
   820f4:	461a      	mov	r2, r3
   820f6:	4619      	mov	r1, r3
   820f8:	4638      	mov	r0, r7
   820fa:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   820fc:	f018 0f20 	tst.w	r8, #32
   82100:	d007      	beq.n	82112 <ISPProtocol_ProgramMemory+0x136>
   82102:	9b03      	ldr	r3, [sp, #12]
   82104:	b92b      	cbnz	r3, 82112 <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   82106:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   8210a:	f043 0310 	orr.w	r3, r3, #16
   8210e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   82112:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   82116:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   8211a:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   8211e:	9200      	str	r2, [sp, #0]
   82120:	9a05      	ldr	r2, [sp, #20]
   82122:	9903      	ldr	r1, [sp, #12]
   82124:	4c4a      	ldr	r4, [pc, #296]	; (82250 <ISPProtocol_ProgramMemory+0x274>)
   82126:	47a0      	blx	r4
   82128:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   8212a:	2d13      	cmp	r5, #19
   8212c:	d1c1      	bne.n	820b2 <ISPProtocol_ProgramMemory+0xd6>
   8212e:	4a43      	ldr	r2, [pc, #268]	; (8223c <ISPProtocol_ProgramMemory+0x260>)
   82130:	8812      	ldrh	r2, [r2, #0]
   82132:	2a00      	cmp	r2, #0
   82134:	d1bd      	bne.n	820b2 <ISPProtocol_ProgramMemory+0xd6>
		  MustLoadExtendedAddress = true;
   82136:	2101      	movs	r1, #1
   82138:	4a42      	ldr	r2, [pc, #264]	; (82244 <ISPProtocol_ProgramMemory+0x268>)
   8213a:	7011      	strb	r1, [r2, #0]
   8213c:	e7b9      	b.n	820b2 <ISPProtocol_ProgramMemory+0xd6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   8213e:	f019 0f01 	tst.w	r9, #1
   82142:	d064      	beq.n	8220e <ISPProtocol_ProgramMemory+0x232>
   82144:	e011      	b.n	8216a <ISPProtocol_ProgramMemory+0x18e>
   82146:	f019 0f01 	tst.w	r9, #1
   8214a:	d10e      	bne.n	8216a <ISPProtocol_ProgramMemory+0x18e>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   8214c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   82150:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   82154:	9200      	str	r2, [sp, #0]
   82156:	9a05      	ldr	r2, [sp, #20]
   82158:	9903      	ldr	r1, [sp, #12]
   8215a:	4648      	mov	r0, r9
   8215c:	4c3c      	ldr	r4, [pc, #240]	; (82250 <ISPProtocol_ProgramMemory+0x274>)
   8215e:	47a0      	blx	r4
			if (ProgrammingStatus != STATUS_CMD_OK)
   82160:	4603      	mov	r3, r0
   82162:	2800      	cmp	r0, #0
   82164:	d1ae      	bne.n	820c4 <ISPProtocol_ProgramMemory+0xe8>
			PollAddress = 0;
   82166:	2300      	movs	r3, #0
   82168:	9303      	str	r3, [sp, #12]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   8216a:	f018 0f01 	tst.w	r8, #1
   8216e:	d186      	bne.n	8207e <ISPProtocol_ProgramMemory+0xa2>
   82170:	f1bb 0f15 	cmp.w	fp, #21
   82174:	d053      	beq.n	8221e <ISPProtocol_ProgramMemory+0x242>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   82176:	9b06      	ldr	r3, [sp, #24]
   82178:	429f      	cmp	r7, r3
   8217a:	d092      	beq.n	820a2 <ISPProtocol_ProgramMemory+0xc6>
   8217c:	9b04      	ldr	r3, [sp, #16]
   8217e:	eba7 0803 	sub.w	r8, r7, r3
   82182:	fa1f f888 	uxth.w	r8, r8
		uint8_t ByteToWrite     = *(NextWriteByte++);
   82186:	f817 6b01 	ldrb.w	r6, [r7], #1
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   8218a:	f89d 9026 	ldrb.w	r9, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   8218e:	4b2d      	ldr	r3, [pc, #180]	; (82244 <ISPProtocol_ProgramMemory+0x268>)
   82190:	781b      	ldrb	r3, [r3, #0]
   82192:	2b00      	cmp	r3, #0
   82194:	f47f af5f 	bne.w	82056 <ISPProtocol_ProgramMemory+0x7a>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   82198:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   8219c:	2300      	movs	r3, #0
   8219e:	461a      	mov	r2, r3
   821a0:	4651      	mov	r1, sl
   821a2:	4829      	ldr	r0, [pc, #164]	; (82248 <ISPProtocol_ProgramMemory+0x26c>)
   821a4:	4c29      	ldr	r4, [pc, #164]	; (8224c <ISPProtocol_ProgramMemory+0x270>)
   821a6:	47a0      	blx	r4
		ISPTarget_SendByte(CurrentAddress >> 8);
   821a8:	4d24      	ldr	r5, [pc, #144]	; (8223c <ISPProtocol_ProgramMemory+0x260>)
   821aa:	2300      	movs	r3, #0
   821ac:	461a      	mov	r2, r3
   821ae:	7869      	ldrb	r1, [r5, #1]
   821b0:	4825      	ldr	r0, [pc, #148]	; (82248 <ISPProtocol_ProgramMemory+0x26c>)
   821b2:	47a0      	blx	r4
   821b4:	2300      	movs	r3, #0
   821b6:	461a      	mov	r2, r3
   821b8:	7829      	ldrb	r1, [r5, #0]
   821ba:	4823      	ldr	r0, [pc, #140]	; (82248 <ISPProtocol_ProgramMemory+0x26c>)
   821bc:	47a0      	blx	r4
   821be:	2300      	movs	r3, #0
   821c0:	461a      	mov	r2, r3
   821c2:	4631      	mov	r1, r6
   821c4:	4820      	ldr	r0, [pc, #128]	; (82248 <ISPProtocol_ProgramMemory+0x26c>)
   821c6:	47a0      	blx	r4
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   821c8:	f1bb 0f13 	cmp.w	fp, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   821cc:	bf04      	itt	eq
   821ce:	f08a 0a08 	eoreq.w	sl, sl, #8
   821d2:	f88d a028 	strbeq.w	sl, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   821d6:	9b03      	ldr	r3, [sp, #12]
   821d8:	2b00      	cmp	r3, #0
   821da:	d1b4      	bne.n	82146 <ISPProtocol_ProgramMemory+0x16a>
   821dc:	9b05      	ldr	r3, [sp, #20]
   821de:	42b3      	cmp	r3, r6
   821e0:	d0ad      	beq.n	8213e <ISPProtocol_ProgramMemory+0x162>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   821e2:	f018 0f01 	tst.w	r8, #1
   821e6:	d003      	beq.n	821f0 <ISPProtocol_ProgramMemory+0x214>
   821e8:	f1bb 0f13 	cmp.w	fp, #19
   821ec:	f43f af3a 	beq.w	82064 <ISPProtocol_ProgramMemory+0x88>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   821f0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   821f4:	f023 0308 	bic.w	r3, r3, #8
   821f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   821fc:	4b0f      	ldr	r3, [pc, #60]	; (8223c <ISPProtocol_ProgramMemory+0x260>)
   821fe:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82200:	f019 0f01 	tst.w	r9, #1
   82204:	f47f af4b 	bne.w	8209e <ISPProtocol_ProgramMemory+0xc2>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   82208:	2b00      	cmp	r3, #0
   8220a:	f47f af46 	bne.w	8209a <ISPProtocol_ProgramMemory+0xbe>
   8220e:	f019 0f08 	tst.w	r9, #8
   82212:	d19b      	bne.n	8214c <ISPProtocol_ProgramMemory+0x170>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   82214:	f029 0906 	bic.w	r9, r9, #6
   82218:	f049 0902 	orr.w	r9, r9, #2
   8221c:	e796      	b.n	8214c <ISPProtocol_ProgramMemory+0x170>
			CurrentAddress++;
   8221e:	4a07      	ldr	r2, [pc, #28]	; (8223c <ISPProtocol_ProgramMemory+0x260>)
   82220:	6813      	ldr	r3, [r2, #0]
   82222:	3301      	adds	r3, #1
   82224:	6013      	str	r3, [r2, #0]
   82226:	e7a6      	b.n	82176 <ISPProtocol_ProgramMemory+0x19a>
   82228:	20002dec 	.word	0x20002dec
   8222c:	0008d93c 	.word	0x0008d93c
   82230:	00087835 	.word	0x00087835
   82234:	20002638 	.word	0x20002638
   82238:	20002636 	.word	0x20002636
   8223c:	20002658 	.word	0x20002658
   82240:	000828c5 	.word	0x000828c5
   82244:	20002634 	.word	0x20002634
   82248:	40008000 	.word	0x40008000
   8224c:	00085603 	.word	0x00085603
   82250:	00082905 	.word	0x00082905

00082254 <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   82254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82258:	b085      	sub	sp, #20
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   8225a:	4b44      	ldr	r3, [pc, #272]	; (8236c <ISPProtocol_ReadMemory+0x118>)
   8225c:	899b      	ldrh	r3, [r3, #12]
   8225e:	2b03      	cmp	r3, #3
   82260:	d006      	beq.n	82270 <ISPProtocol_ReadMemory+0x1c>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82262:	4619      	mov	r1, r3
   82264:	4842      	ldr	r0, [pc, #264]	; (82370 <ISPProtocol_ReadMemory+0x11c>)
   82266:	4b43      	ldr	r3, [pc, #268]	; (82374 <ISPProtocol_ReadMemory+0x120>)
   82268:	4798      	blx	r3
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
	avrisp_status_payload_size = 2;
}
   8226a:	b005      	add	sp, #20
   8226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82270:	4682      	mov	sl, r0
	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   82272:	4b3e      	ldr	r3, [pc, #248]	; (8236c <ISPProtocol_ReadMemory+0x118>)
   82274:	689b      	ldr	r3, [r3, #8]
   82276:	681b      	ldr	r3, [r3, #0]
   82278:	9303      	str	r3, [sp, #12]
	avrisp_status_payload[0] = V2Command;
   8227a:	4a3f      	ldr	r2, [pc, #252]	; (82378 <ISPProtocol_ReadMemory+0x124>)
   8227c:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8227e:	20c0      	movs	r0, #192	; 0xc0
   82280:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   82282:	2002      	movs	r0, #2
   82284:	4a3d      	ldr	r2, [pc, #244]	; (8237c <ISPProtocol_ReadMemory+0x128>)
   82286:	8010      	strh	r0, [r2, #0]
	if (Read_Memory_Params.BytesToRead > 256)
   82288:	b29b      	uxth	r3, r3
   8228a:	9301      	str	r3, [sp, #4]
   8228c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82290:	d8eb      	bhi.n	8226a <ISPProtocol_ReadMemory+0x16>
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   82292:	2b00      	cmp	r3, #0
   82294:	d063      	beq.n	8235e <ISPProtocol_ReadMemory+0x10a>
   82296:	f101 39ff 	add.w	r9, r1, #4294967295
   8229a:	2600      	movs	r6, #0
   8229c:	4c38      	ldr	r4, [pc, #224]	; (82380 <ISPProtocol_ReadMemory+0x12c>)
   8229e:	e023      	b.n	822e8 <ISPProtocol_ReadMemory+0x94>
			ISPTarget_LoadExtendedAddress();
   822a0:	4b38      	ldr	r3, [pc, #224]	; (82384 <ISPProtocol_ReadMemory+0x130>)
   822a2:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   822a4:	4b38      	ldr	r3, [pc, #224]	; (82388 <ISPProtocol_ReadMemory+0x134>)
   822a6:	f04f 0200 	mov.w	r2, #0
   822aa:	701a      	strb	r2, [r3, #0]
   822ac:	e022      	b.n	822f4 <ISPProtocol_ReadMemory+0xa0>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   822ae:	f088 0808 	eor.w	r8, r8, #8
   822b2:	f88d 800e 	strb.w	r8, [sp, #14]
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   822b6:	f01b 0f01 	tst.w	fp, #1
   822ba:	d010      	beq.n	822de <ISPProtocol_ReadMemory+0x8a>
			CurrentAddress++;
   822bc:	4a33      	ldr	r2, [pc, #204]	; (8238c <ISPProtocol_ReadMemory+0x138>)
   822be:	6813      	ldr	r3, [r2, #0]
   822c0:	3301      	adds	r3, #1
   822c2:	6013      	str	r3, [r2, #0]
   822c4:	e006      	b.n	822d4 <ISPProtocol_ReadMemory+0x80>
   822c6:	4a31      	ldr	r2, [pc, #196]	; (8238c <ISPProtocol_ReadMemory+0x138>)
   822c8:	6813      	ldr	r3, [r2, #0]
   822ca:	3301      	adds	r3, #1
   822cc:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822ce:	f1ba 0f16 	cmp.w	sl, #22
   822d2:	d004      	beq.n	822de <ISPProtocol_ReadMemory+0x8a>
   822d4:	b29b      	uxth	r3, r3
   822d6:	b913      	cbnz	r3, 822de <ISPProtocol_ReadMemory+0x8a>
			  MustLoadExtendedAddress = true;
   822d8:	2301      	movs	r3, #1
   822da:	4a2b      	ldr	r2, [pc, #172]	; (82388 <ISPProtocol_ReadMemory+0x134>)
   822dc:	7013      	strb	r3, [r2, #0]
   822de:	3601      	adds	r6, #1
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   822e0:	b2b3      	uxth	r3, r6
   822e2:	9a01      	ldr	r2, [sp, #4]
   822e4:	429a      	cmp	r2, r3
   822e6:	d93a      	bls.n	8235e <ISPProtocol_ReadMemory+0x10a>
   822e8:	fa1f fb86 	uxth.w	fp, r6
		if (MustLoadExtendedAddress)
   822ec:	4b26      	ldr	r3, [pc, #152]	; (82388 <ISPProtocol_ReadMemory+0x134>)
   822ee:	781b      	ldrb	r3, [r3, #0]
   822f0:	2b00      	cmp	r3, #0
   822f2:	d1d5      	bne.n	822a0 <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   822f4:	f89d 800e 	ldrb.w	r8, [sp, #14]
   822f8:	2300      	movs	r3, #0
   822fa:	461a      	mov	r2, r3
   822fc:	4641      	mov	r1, r8
   822fe:	4620      	mov	r0, r4
   82300:	4d23      	ldr	r5, [pc, #140]	; (82390 <ISPProtocol_ReadMemory+0x13c>)
   82302:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   82304:	4f21      	ldr	r7, [pc, #132]	; (8238c <ISPProtocol_ReadMemory+0x138>)
   82306:	2300      	movs	r3, #0
   82308:	461a      	mov	r2, r3
   8230a:	7879      	ldrb	r1, [r7, #1]
   8230c:	4620      	mov	r0, r4
   8230e:	47a8      	blx	r5
   82310:	2300      	movs	r3, #0
   82312:	461a      	mov	r2, r3
   82314:	7839      	ldrb	r1, [r7, #0]
   82316:	4620      	mov	r0, r4
   82318:	47a8      	blx	r5
   8231a:	2300      	movs	r3, #0
   8231c:	461a      	mov	r2, r3
   8231e:	4619      	mov	r1, r3
   82320:	4620      	mov	r0, r4
   82322:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   82324:	6923      	ldr	r3, [r4, #16]
		{
			ISPTarget_SendByte(data);
#if AVRISP_USEUART
			while(usart_is_tx_empty(AVRISP_USART) == 0);
#else
			while(spi_is_tx_empty(SPI) == 0);
   82326:	f413 7f00 	tst.w	r3, #512	; 0x200
   8232a:	d0fb      	beq.n	82324 <ISPProtocol_ReadMemory+0xd0>
			spi_read(SPI, &ReceivedByte, &_);
   8232c:	f10d 0209 	add.w	r2, sp, #9
   82330:	f10d 010a 	add.w	r1, sp, #10
   82334:	4620      	mov	r0, r4
   82336:	4b17      	ldr	r3, [pc, #92]	; (82394 <ISPProtocol_ReadMemory+0x140>)
   82338:	4798      	blx	r3
			return  ReceivedByte;
   8233a:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   8233e:	f809 3f01 	strb.w	r3, [r9, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   82342:	f1ba 0f14 	cmp.w	sl, #20
   82346:	d0b2      	beq.n	822ae <ISPProtocol_ReadMemory+0x5a>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   82348:	f01b 0f01 	tst.w	fp, #1
   8234c:	d1bb      	bne.n	822c6 <ISPProtocol_ReadMemory+0x72>
   8234e:	f1ba 0f16 	cmp.w	sl, #22
   82352:	d1c4      	bne.n	822de <ISPProtocol_ReadMemory+0x8a>
			CurrentAddress++;
   82354:	4a0d      	ldr	r2, [pc, #52]	; (8238c <ISPProtocol_ReadMemory+0x138>)
   82356:	6813      	ldr	r3, [r2, #0]
   82358:	3301      	adds	r3, #1
   8235a:	6013      	str	r3, [r2, #0]
   8235c:	e7bf      	b.n	822de <ISPProtocol_ReadMemory+0x8a>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8235e:	2200      	movs	r2, #0
   82360:	4b05      	ldr	r3, [pc, #20]	; (82378 <ISPProtocol_ReadMemory+0x124>)
   82362:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82364:	2202      	movs	r2, #2
   82366:	4b05      	ldr	r3, [pc, #20]	; (8237c <ISPProtocol_ReadMemory+0x128>)
   82368:	801a      	strh	r2, [r3, #0]
   8236a:	e77e      	b.n	8226a <ISPProtocol_ReadMemory+0x16>
   8236c:	20002dec 	.word	0x20002dec
   82370:	0008d978 	.word	0x0008d978
   82374:	00087835 	.word	0x00087835
   82378:	20002638 	.word	0x20002638
   8237c:	20002636 	.word	0x20002636
   82380:	40008000 	.word	0x40008000
   82384:	000828c5 	.word	0x000828c5
   82388:	20002634 	.word	0x20002634
   8238c:	20002658 	.word	0x20002658
   82390:	00085603 	.word	0x00085603
   82394:	000855d5 	.word	0x000855d5

00082398 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   82398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8239c:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   8239e:	4b21      	ldr	r3, [pc, #132]	; (82424 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   823a0:	8999      	ldrh	r1, [r3, #12]
   823a2:	2905      	cmp	r1, #5
   823a4:	d139      	bne.n	8241a <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   823a6:	4683      	mov	fp, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   823a8:	4b1e      	ldr	r3, [pc, #120]	; (82424 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   823aa:	689b      	ldr	r3, [r3, #8]
   823ac:	6818      	ldr	r0, [r3, #0]
   823ae:	9002      	str	r0, [sp, #8]
   823b0:	791a      	ldrb	r2, [r3, #4]
   823b2:	f88d 200c 	strb.w	r2, [sp, #12]
   823b6:	f893 a000 	ldrb.w	sl, [r3]
   823ba:	f10d 0609 	add.w	r6, sp, #9
   823be:	ad01      	add	r5, sp, #4
   823c0:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   823c4:	4c18      	ldr	r4, [pc, #96]	; (82428 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   823c6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 82440 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
			spi_read(SPI, &ReceivedByte, &_);
   823ca:	4f18      	ldr	r7, [pc, #96]	; (8242c <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
		  spi_write(SPI, data, 0, 0);
   823cc:	2300      	movs	r3, #0
   823ce:	461a      	mov	r2, r3
   823d0:	f816 1b01 	ldrb.w	r1, [r6], #1
   823d4:	4620      	mov	r0, r4
   823d6:	47c0      	blx	r8
   823d8:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   823da:	f413 7f00 	tst.w	r3, #512	; 0x200
   823de:	d0fb      	beq.n	823d8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x40>
			spi_read(SPI, &ReceivedByte, &_);
   823e0:	f10d 0201 	add.w	r2, sp, #1
   823e4:	f10d 0102 	add.w	r1, sp, #2
   823e8:	4620      	mov	r0, r4
   823ea:	47b8      	blx	r7
			return  ReceivedByte;
   823ec:	f89d 3002 	ldrb.w	r3, [sp, #2]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   823f0:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823f4:	454d      	cmp	r5, r9
   823f6:	d1e9      	bne.n	823cc <ISPProtocol_ReadFuseLockSigOSCCAL+0x34>

	avrisp_status_payload[0] = V2Command;
   823f8:	4b0d      	ldr	r3, [pc, #52]	; (82430 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   823fa:	f883 b000 	strb.w	fp, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   823fe:	2200      	movs	r2, #0
   82400:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   82402:	a904      	add	r1, sp, #16
   82404:	448a      	add	sl, r1
   82406:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   8240a:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   8240c:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   8240e:	2204      	movs	r2, #4
   82410:	4b08      	ldr	r3, [pc, #32]	; (82434 <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   82412:	801a      	strh	r2, [r3, #0]
}
   82414:	b005      	add	sp, #20
   82416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   8241a:	4807      	ldr	r0, [pc, #28]	; (82438 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   8241c:	4b07      	ldr	r3, [pc, #28]	; (8243c <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>)
   8241e:	4798      	blx	r3
   82420:	e7f8      	b.n	82414 <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   82422:	bf00      	nop
   82424:	20002dec 	.word	0x20002dec
   82428:	40008000 	.word	0x40008000
   8242c:	000855d5 	.word	0x000855d5
   82430:	20002638 	.word	0x20002638
   82434:	20002636 	.word	0x20002636
   82438:	0008d93c 	.word	0x0008d93c
   8243c:	00087835 	.word	0x00087835
   82440:	00085603 	.word	0x00085603

00082444 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   82444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82448:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   8244a:	4b13      	ldr	r3, [pc, #76]	; (82498 <ISPProtocol_WriteFuseLock+0x54>)
   8244c:	8999      	ldrh	r1, [r3, #12]
   8244e:	2904      	cmp	r1, #4
   82450:	d11e      	bne.n	82490 <ISPProtocol_WriteFuseLock+0x4c>
   82452:	4681      	mov	r9, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   82454:	4b10      	ldr	r3, [pc, #64]	; (82498 <ISPProtocol_WriteFuseLock+0x54>)
   82456:	689b      	ldr	r3, [r3, #8]
   82458:	681b      	ldr	r3, [r3, #0]
   8245a:	ac02      	add	r4, sp, #8
   8245c:	f844 3d04 	str.w	r3, [r4, #-4]!
   82460:	f10d 0808 	add.w	r8, sp, #8
		  spi_write(SPI, data, 0, 0);
   82464:	4f0d      	ldr	r7, [pc, #52]	; (8249c <ISPProtocol_WriteFuseLock+0x58>)
   82466:	2600      	movs	r6, #0
   82468:	4d0d      	ldr	r5, [pc, #52]	; (824a0 <ISPProtocol_WriteFuseLock+0x5c>)
   8246a:	4633      	mov	r3, r6
   8246c:	4632      	mov	r2, r6
   8246e:	f814 1b01 	ldrb.w	r1, [r4], #1
   82472:	4638      	mov	r0, r7
   82474:	47a8      	blx	r5

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   82476:	4544      	cmp	r4, r8
   82478:	d1f7      	bne.n	8246a <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   8247a:	4b0a      	ldr	r3, [pc, #40]	; (824a4 <ISPProtocol_WriteFuseLock+0x60>)
   8247c:	f883 9000 	strb.w	r9, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82480:	2200      	movs	r2, #0
   82482:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   82484:	2202      	movs	r2, #2
   82486:	4b08      	ldr	r3, [pc, #32]	; (824a8 <ISPProtocol_WriteFuseLock+0x64>)
   82488:	801a      	strh	r2, [r3, #0]
}
   8248a:	b003      	add	sp, #12
   8248c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82490:	4806      	ldr	r0, [pc, #24]	; (824ac <ISPProtocol_WriteFuseLock+0x68>)
   82492:	4b07      	ldr	r3, [pc, #28]	; (824b0 <ISPProtocol_WriteFuseLock+0x6c>)
   82494:	4798      	blx	r3
   82496:	e7f8      	b.n	8248a <ISPProtocol_WriteFuseLock+0x46>
   82498:	20002dec 	.word	0x20002dec
   8249c:	40008000 	.word	0x40008000
   824a0:	00085603 	.word	0x00085603
   824a4:	20002638 	.word	0x20002638
   824a8:	20002636 	.word	0x20002636
   824ac:	0008d93c 	.word	0x0008d93c
   824b0:	00087835 	.word	0x00087835

000824b4 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
   824b4:	4770      	bx	lr
	...

000824b8 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   824b8:	b900      	cbnz	r0, 824bc <ISPProtocol_DelayMS+0x4>
   824ba:	4770      	bx	lr
{
   824bc:	b538      	push	{r3, r4, r5, lr}
   824be:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   824c0:	f243 62b0 	movw	r2, #14000	; 0x36b0
   824c4:	2300      	movs	r3, #0
   824c6:	f243 64af 	movw	r4, #13999	; 0x36af
   824ca:	2500      	movs	r5, #0
   824cc:	4804      	ldr	r0, [pc, #16]	; (824e0 <ISPProtocol_DelayMS+0x28>)
   824ce:	fbe0 4501 	umlal	r4, r5, r0, r1
   824d2:	4620      	mov	r0, r4
   824d4:	4629      	mov	r1, r5
   824d6:	4c03      	ldr	r4, [pc, #12]	; (824e4 <ISPProtocol_DelayMS+0x2c>)
   824d8:	47a0      	blx	r4
   824da:	4b03      	ldr	r3, [pc, #12]	; (824e8 <ISPProtocol_DelayMS+0x30>)
   824dc:	4798      	blx	r3
   824de:	bd38      	pop	{r3, r4, r5, pc}
   824e0:	05b8d800 	.word	0x05b8d800
   824e4:	000874d5 	.word	0x000874d5
   824e8:	20000089 	.word	0x20000089

000824ec <ISPProtocol_EnterISPMode>:
{
   824ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824f0:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   824f2:	4b45      	ldr	r3, [pc, #276]	; (82608 <ISPProtocol_EnterISPMode+0x11c>)
   824f4:	8999      	ldrh	r1, [r3, #12]
   824f6:	290b      	cmp	r1, #11
   824f8:	d005      	beq.n	82506 <ISPProtocol_EnterISPMode+0x1a>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   824fa:	4844      	ldr	r0, [pc, #272]	; (8260c <ISPProtocol_EnterISPMode+0x120>)
   824fc:	4b44      	ldr	r3, [pc, #272]	; (82610 <ISPProtocol_EnterISPMode+0x124>)
   824fe:	4798      	blx	r3
}
   82500:	b00b      	add	sp, #44	; 0x2c
   82502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   82506:	4b40      	ldr	r3, [pc, #256]	; (82608 <ISPProtocol_EnterISPMode+0x11c>)
   82508:	689b      	ldr	r3, [r3, #8]
   8250a:	aa07      	add	r2, sp, #28
   8250c:	6818      	ldr	r0, [r3, #0]
   8250e:	6859      	ldr	r1, [r3, #4]
   82510:	c203      	stmia	r2!, {r0, r1}
   82512:	8918      	ldrh	r0, [r3, #8]
   82514:	7a99      	ldrb	r1, [r3, #10]
   82516:	8010      	strh	r0, [r2, #0]
   82518:	7091      	strb	r1, [r2, #2]
   8251a:	785a      	ldrb	r2, [r3, #1]
   8251c:	4616      	mov	r6, r2
   8251e:	9203      	str	r2, [sp, #12]
   82520:	7898      	ldrb	r0, [r3, #2]
   82522:	78dc      	ldrb	r4, [r3, #3]
   82524:	791a      	ldrb	r2, [r3, #4]
   82526:	9201      	str	r2, [sp, #4]
   82528:	795a      	ldrb	r2, [r3, #5]
   8252a:	9202      	str	r2, [sp, #8]
   8252c:	f893 b006 	ldrb.w	fp, [r3, #6]
	CurrentAddress = 0;
   82530:	2200      	movs	r2, #0
   82532:	4b38      	ldr	r3, [pc, #224]	; (82614 <ISPProtocol_EnterISPMode+0x128>)
   82534:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   82536:	4d38      	ldr	r5, [pc, #224]	; (82618 <ISPProtocol_EnterISPMode+0x12c>)
   82538:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   8253a:	4b38      	ldr	r3, [pc, #224]	; (8261c <ISPProtocol_EnterISPMode+0x130>)
   8253c:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   8253e:	2001      	movs	r0, #1
   82540:	4b37      	ldr	r3, [pc, #220]	; (82620 <ISPProtocol_EnterISPMode+0x134>)
   82542:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82544:	4630      	mov	r0, r6
   82546:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82548:	f104 39ff 	add.w	r9, r4, #4294967295
   8254c:	fa5f f989 	uxtb.w	r9, r9
   82550:	2c00      	cmp	r4, #0
   82552:	d053      	beq.n	825fc <ISPProtocol_EnterISPMode+0x110>
   82554:	4b33      	ldr	r3, [pc, #204]	; (82624 <ISPProtocol_EnterISPMode+0x138>)
   82556:	681b      	ldr	r3, [r3, #0]
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   82558:	24c0      	movs	r4, #192	; 0xc0
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   8255a:	2b00      	cmp	r3, #0
   8255c:	d042      	beq.n	825e4 <ISPProtocol_EnterISPMode+0xf8>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   8255e:	4f2e      	ldr	r7, [pc, #184]	; (82618 <ISPProtocol_EnterISPMode+0x12c>)
   82560:	4c31      	ldr	r4, [pc, #196]	; (82628 <ISPProtocol_EnterISPMode+0x13c>)
   82562:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8263c <ISPProtocol_EnterISPMode+0x150>
   82566:	e01d      	b.n	825a4 <ISPProtocol_EnterISPMode+0xb8>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   82568:	f1bb 0f00 	cmp.w	fp, #0
   8256c:	d039      	beq.n	825e2 <ISPProtocol_EnterISPMode+0xf6>
   8256e:	ab0a      	add	r3, sp, #40	; 0x28
   82570:	445b      	add	r3, fp
   82572:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   82576:	9a02      	ldr	r2, [sp, #8]
   82578:	4293      	cmp	r3, r2
   8257a:	d032      	beq.n	825e2 <ISPProtocol_EnterISPMode+0xf6>
			ISPTarget_ChangeTargetResetLine(false);
   8257c:	2000      	movs	r0, #0
   8257e:	4d28      	ldr	r5, [pc, #160]	; (82620 <ISPProtocol_EnterISPMode+0x134>)
   82580:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82582:	9e03      	ldr	r6, [sp, #12]
   82584:	4630      	mov	r0, r6
   82586:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   82588:	2001      	movs	r0, #1
   8258a:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   8258c:	4630      	mov	r0, r6
   8258e:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82590:	f109 39ff 	add.w	r9, r9, #4294967295
   82594:	fa5f f989 	uxtb.w	r9, r9
   82598:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   8259c:	d030      	beq.n	82600 <ISPProtocol_EnterISPMode+0x114>
   8259e:	4b21      	ldr	r3, [pc, #132]	; (82624 <ISPProtocol_EnterISPMode+0x138>)
   825a0:	681b      	ldr	r3, [r3, #0]
   825a2:	b37b      	cbz	r3, 82604 <ISPProtocol_EnterISPMode+0x118>
   825a4:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   825a8:	ad06      	add	r5, sp, #24
   825aa:	f10d 081c 	add.w	r8, sp, #28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   825ae:	9801      	ldr	r0, [sp, #4]
   825b0:	47b8      	blx	r7
   825b2:	2300      	movs	r3, #0
   825b4:	461a      	mov	r2, r3
   825b6:	f816 1b01 	ldrb.w	r1, [r6], #1
   825ba:	4620      	mov	r0, r4
   825bc:	47d0      	blx	sl
   825be:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   825c0:	f413 7f00 	tst.w	r3, #512	; 0x200
   825c4:	d0fb      	beq.n	825be <ISPProtocol_EnterISPMode+0xd2>
			spi_read(SPI, &ReceivedByte, &_);
   825c6:	f10d 0215 	add.w	r2, sp, #21
   825ca:	f10d 0116 	add.w	r1, sp, #22
   825ce:	4620      	mov	r0, r4
   825d0:	4b16      	ldr	r3, [pc, #88]	; (8262c <ISPProtocol_EnterISPMode+0x140>)
   825d2:	4798      	blx	r3
			return  ReceivedByte;
   825d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   825d8:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   825dc:	4545      	cmp	r5, r8
   825de:	d1e6      	bne.n	825ae <ISPProtocol_EnterISPMode+0xc2>
   825e0:	e7c2      	b.n	82568 <ISPProtocol_EnterISPMode+0x7c>
			ResponseStatus = STATUS_CMD_OK;
   825e2:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   825e4:	4621      	mov	r1, r4
   825e6:	4812      	ldr	r0, [pc, #72]	; (82630 <ISPProtocol_EnterISPMode+0x144>)
   825e8:	4b09      	ldr	r3, [pc, #36]	; (82610 <ISPProtocol_EnterISPMode+0x124>)
   825ea:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   825ec:	4b11      	ldr	r3, [pc, #68]	; (82634 <ISPProtocol_EnterISPMode+0x148>)
   825ee:	2210      	movs	r2, #16
   825f0:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   825f2:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   825f4:	2202      	movs	r2, #2
   825f6:	4b10      	ldr	r3, [pc, #64]	; (82638 <ISPProtocol_EnterISPMode+0x14c>)
   825f8:	801a      	strh	r2, [r3, #0]
   825fa:	e781      	b.n	82500 <ISPProtocol_EnterISPMode+0x14>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   825fc:	24c0      	movs	r4, #192	; 0xc0
   825fe:	e7f1      	b.n	825e4 <ISPProtocol_EnterISPMode+0xf8>
   82600:	24c0      	movs	r4, #192	; 0xc0
   82602:	e7ef      	b.n	825e4 <ISPProtocol_EnterISPMode+0xf8>
   82604:	24c0      	movs	r4, #192	; 0xc0
   82606:	e7ed      	b.n	825e4 <ISPProtocol_EnterISPMode+0xf8>
   82608:	20002dec 	.word	0x20002dec
   8260c:	0008d93c 	.word	0x0008d93c
   82610:	00087835 	.word	0x00087835
   82614:	20002658 	.word	0x20002658
   82618:	000824b9 	.word	0x000824b9
   8261c:	00082741 	.word	0x00082741
   82620:	00082801 	.word	0x00082801
   82624:	2000265c 	.word	0x2000265c
   82628:	40008000 	.word	0x40008000
   8262c:	000855d5 	.word	0x000855d5
   82630:	0008d958 	.word	0x0008d958
   82634:	20002638 	.word	0x20002638
   82638:	20002636 	.word	0x20002636
   8263c:	00085603 	.word	0x00085603

00082640 <ISPProtocol_LeaveISPMode>:
{
   82640:	b510      	push	{r4, lr}
   82642:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != 2){
   82644:	4b10      	ldr	r3, [pc, #64]	; (82688 <ISPProtocol_LeaveISPMode+0x48>)
   82646:	8999      	ldrh	r1, [r3, #12]
   82648:	2902      	cmp	r1, #2
   8264a:	d004      	beq.n	82656 <ISPProtocol_LeaveISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   8264c:	480f      	ldr	r0, [pc, #60]	; (8268c <ISPProtocol_LeaveISPMode+0x4c>)
   8264e:	4b10      	ldr	r3, [pc, #64]	; (82690 <ISPProtocol_LeaveISPMode+0x50>)
   82650:	4798      	blx	r3
}
   82652:	b002      	add	sp, #8
   82654:	bd10      	pop	{r4, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   82656:	4b0c      	ldr	r3, [pc, #48]	; (82688 <ISPProtocol_LeaveISPMode+0x48>)
   82658:	689b      	ldr	r3, [r3, #8]
   8265a:	8818      	ldrh	r0, [r3, #0]
   8265c:	f8ad 0004 	strh.w	r0, [sp, #4]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   82660:	b2c0      	uxtb	r0, r0
   82662:	4c0c      	ldr	r4, [pc, #48]	; (82694 <ISPProtocol_LeaveISPMode+0x54>)
   82664:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   82666:	2000      	movs	r0, #0
   82668:	4b0b      	ldr	r3, [pc, #44]	; (82698 <ISPProtocol_LeaveISPMode+0x58>)
   8266a:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   8266c:	4b0b      	ldr	r3, [pc, #44]	; (8269c <ISPProtocol_LeaveISPMode+0x5c>)
   8266e:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   82670:	f89d 0005 	ldrb.w	r0, [sp, #5]
   82674:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   82676:	4b0a      	ldr	r3, [pc, #40]	; (826a0 <ISPProtocol_LeaveISPMode+0x60>)
   82678:	2211      	movs	r2, #17
   8267a:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8267c:	2200      	movs	r2, #0
   8267e:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82680:	2202      	movs	r2, #2
   82682:	4b08      	ldr	r3, [pc, #32]	; (826a4 <ISPProtocol_LeaveISPMode+0x64>)
   82684:	801a      	strh	r2, [r3, #0]
   82686:	e7e4      	b.n	82652 <ISPProtocol_LeaveISPMode+0x12>
   82688:	20002dec 	.word	0x20002dec
   8268c:	0008d93c 	.word	0x0008d93c
   82690:	00087835 	.word	0x00087835
   82694:	000824b9 	.word	0x000824b9
   82698:	00082801 	.word	0x00082801
   8269c:	000827e9 	.word	0x000827e9
   826a0:	20002638 	.word	0x20002638
   826a4:	20002636 	.word	0x20002636

000826a8 <ISPProtocol_ChipErase>:
{
   826a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   826ac:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   826ae:	4b1b      	ldr	r3, [pc, #108]	; (8271c <ISPProtocol_ChipErase+0x74>)
   826b0:	8999      	ldrh	r1, [r3, #12]
   826b2:	2906      	cmp	r1, #6
   826b4:	d12a      	bne.n	8270c <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   826b6:	4b19      	ldr	r3, [pc, #100]	; (8271c <ISPProtocol_ChipErase+0x74>)
   826b8:	689b      	ldr	r3, [r3, #8]
   826ba:	6818      	ldr	r0, [r3, #0]
   826bc:	9000      	str	r0, [sp, #0]
   826be:	889a      	ldrh	r2, [r3, #4]
   826c0:	f8ad 2004 	strh.w	r2, [sp, #4]
   826c4:	f893 a000 	ldrb.w	sl, [r3]
   826c8:	f893 9001 	ldrb.w	r9, [r3, #1]
   826cc:	f10d 0402 	add.w	r4, sp, #2
   826d0:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   826d4:	4f12      	ldr	r7, [pc, #72]	; (82720 <ISPProtocol_ChipErase+0x78>)
   826d6:	2600      	movs	r6, #0
   826d8:	4d12      	ldr	r5, [pc, #72]	; (82724 <ISPProtocol_ChipErase+0x7c>)
   826da:	4633      	mov	r3, r6
   826dc:	4632      	mov	r2, r6
   826de:	f814 1b01 	ldrb.w	r1, [r4], #1
   826e2:	4638      	mov	r0, r7
   826e4:	47a8      	blx	r5
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   826e6:	4544      	cmp	r4, r8
   826e8:	d1f7      	bne.n	826da <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   826ea:	f1b9 0f00 	cmp.w	r9, #0
   826ee:	d111      	bne.n	82714 <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   826f0:	4650      	mov	r0, sl
   826f2:	4b0d      	ldr	r3, [pc, #52]	; (82728 <ISPProtocol_ChipErase+0x80>)
   826f4:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   826f6:	4b0d      	ldr	r3, [pc, #52]	; (8272c <ISPProtocol_ChipErase+0x84>)
   826f8:	2212      	movs	r2, #18
   826fa:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   826fc:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   82700:	2202      	movs	r2, #2
   82702:	4b0b      	ldr	r3, [pc, #44]	; (82730 <ISPProtocol_ChipErase+0x88>)
   82704:	801a      	strh	r2, [r3, #0]
}
   82706:	b002      	add	sp, #8
   82708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   8270c:	4809      	ldr	r0, [pc, #36]	; (82734 <ISPProtocol_ChipErase+0x8c>)
   8270e:	4b0a      	ldr	r3, [pc, #40]	; (82738 <ISPProtocol_ChipErase+0x90>)
   82710:	4798      	blx	r3
   82712:	e7f8      	b.n	82706 <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   82714:	4b09      	ldr	r3, [pc, #36]	; (8273c <ISPProtocol_ChipErase+0x94>)
   82716:	4798      	blx	r3
   82718:	4681      	mov	r9, r0
   8271a:	e7ec      	b.n	826f6 <ISPProtocol_ChipErase+0x4e>
   8271c:	20002dec 	.word	0x20002dec
   82720:	40008000 	.word	0x40008000
   82724:	00085603 	.word	0x00085603
   82728:	000824b9 	.word	0x000824b9
   8272c:	20002638 	.word	0x20002638
   82730:	20002636 	.word	0x20002636
   82734:	0008d92c 	.word	0x0008d92c
   82738:	00087835 	.word	0x00087835
   8273c:	00082845 	.word	0x00082845

00082740 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   82740:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   82742:	2098      	movs	r0, #152	; 0x98
   82744:	4b1e      	ldr	r3, [pc, #120]	; (827c0 <ISPTarget_EnableTargetISP+0x80>)
   82746:	4798      	blx	r3
   82748:	4b1e      	ldr	r3, [pc, #120]	; (827c4 <ISPTarget_EnableTargetISP+0x84>)
   8274a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   8274e:	4c1e      	ldr	r4, [pc, #120]	; (827c8 <ISPTarget_EnableTargetISP+0x88>)
   82750:	4620      	mov	r0, r4
   82752:	4b1e      	ldr	r3, [pc, #120]	; (827cc <ISPTarget_EnableTargetISP+0x8c>)
   82754:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   82756:	2380      	movs	r3, #128	; 0x80
   82758:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8275a:	6863      	ldr	r3, [r4, #4]
   8275c:	f043 0301 	orr.w	r3, r3, #1
   82760:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   82762:	6863      	ldr	r3, [r4, #4]
   82764:	f043 0310 	orr.w	r3, r3, #16
   82768:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8276a:	6863      	ldr	r3, [r4, #4]
   8276c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82770:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   82772:	4917      	ldr	r1, [pc, #92]	; (827d0 <ISPTarget_EnableTargetISP+0x90>)
   82774:	4628      	mov	r0, r5
   82776:	4b17      	ldr	r3, [pc, #92]	; (827d4 <ISPTarget_EnableTargetISP+0x94>)
   82778:	4798      	blx	r3
	if (bauddiv < 0){
   8277a:	1e05      	subs	r5, r0, #0
		bauddiv = 255;
   8277c:	bfb8      	it	lt
   8277e:	25ff      	movlt	r5, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   82780:	2200      	movs	r2, #0
   82782:	4611      	mov	r1, r2
   82784:	4620      	mov	r0, r4
   82786:	4b14      	ldr	r3, [pc, #80]	; (827d8 <ISPTarget_EnableTargetISP+0x98>)
   82788:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   8278a:	2201      	movs	r2, #1
   8278c:	2100      	movs	r1, #0
   8278e:	4620      	mov	r0, r4
   82790:	4b12      	ldr	r3, [pc, #72]	; (827dc <ISPTarget_EnableTargetISP+0x9c>)
   82792:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   82794:	b2ea      	uxtb	r2, r5
   82796:	2100      	movs	r1, #0
   82798:	4620      	mov	r0, r4
   8279a:	4b11      	ldr	r3, [pc, #68]	; (827e0 <ISPTarget_EnableTargetISP+0xa0>)
   8279c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8279e:	2301      	movs	r3, #1
   827a0:	6023      	str	r3, [r4, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   827a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827a6:	200e      	movs	r0, #14
   827a8:	4c0e      	ldr	r4, [pc, #56]	; (827e4 <ISPTarget_EnableTargetISP+0xa4>)
   827aa:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   827ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827b0:	200d      	movs	r0, #13
   827b2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   827b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   827b8:	200f      	movs	r0, #15
   827ba:	47a0      	blx	r4
   827bc:	bd38      	pop	{r3, r4, r5, pc}
   827be:	bf00      	nop
   827c0:	00082c69 	.word	0x00082c69
   827c4:	200002f8 	.word	0x200002f8
   827c8:	40008000 	.word	0x40008000
   827cc:	000855b5 	.word	0x000855b5
   827d0:	05b8d800 	.word	0x05b8d800
   827d4:	00085673 	.word	0x00085673
   827d8:	00085637 	.word	0x00085637
   827dc:	00085655 	.word	0x00085655
   827e0:	00085689 	.word	0x00085689
   827e4:	000851d1 	.word	0x000851d1

000827e8 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   827e8:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   827ea:	4803      	ldr	r0, [pc, #12]	; (827f8 <ISPTarget_DisableTargetISP+0x10>)
   827ec:	2302      	movs	r3, #2
   827ee:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   827f0:	4b02      	ldr	r3, [pc, #8]	; (827fc <ISPTarget_DisableTargetISP+0x14>)
   827f2:	4798      	blx	r3
   827f4:	bd08      	pop	{r3, pc}
   827f6:	bf00      	nop
   827f8:	40008000 	.word	0x40008000
   827fc:	000855c5 	.word	0x000855c5

00082800 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   82800:	b508      	push	{r3, lr}
	if (ResetTarget)
   82802:	b180      	cbz	r0, 82826 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   82804:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82808:	2011      	movs	r0, #17
   8280a:	4b0a      	ldr	r3, [pc, #40]	; (82834 <ISPTarget_ChangeTargetResetLine+0x34>)
   8280c:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   8280e:	209e      	movs	r0, #158	; 0x9e
   82810:	4b09      	ldr	r3, [pc, #36]	; (82838 <ISPTarget_ChangeTargetResetLine+0x38>)
   82812:	4798      	blx	r3
   82814:	b918      	cbnz	r0, 8281e <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   82816:	2011      	movs	r0, #17
   82818:	4b08      	ldr	r3, [pc, #32]	; (8283c <ISPTarget_ChangeTargetResetLine+0x3c>)
   8281a:	4798      	blx	r3
   8281c:	bd08      	pop	{r3, pc}
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   8281e:	2011      	movs	r0, #17
   82820:	4b07      	ldr	r3, [pc, #28]	; (82840 <ISPTarget_ChangeTargetResetLine+0x40>)
   82822:	4798      	blx	r3
   82824:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   82826:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8282a:	2011      	movs	r0, #17
   8282c:	4b01      	ldr	r3, [pc, #4]	; (82834 <ISPTarget_ChangeTargetResetLine+0x34>)
   8282e:	4798      	blx	r3
   82830:	bd08      	pop	{r3, pc}
   82832:	bf00      	nop
   82834:	000851d1 	.word	0x000851d1
   82838:	00082c69 	.word	0x00082c69
   8283c:	0008519b 	.word	0x0008519b
   82840:	000851b5 	.word	0x000851b5

00082844 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   82844:	b570      	push	{r4, r5, r6, lr}
   82846:	b082      	sub	sp, #8
   82848:	4c1a      	ldr	r4, [pc, #104]	; (828b4 <ISPTarget_WaitWhileTargetBusy+0x70>)
   8284a:	2600      	movs	r6, #0
   8284c:	4d1a      	ldr	r5, [pc, #104]	; (828b8 <ISPTarget_WaitWhileTargetBusy+0x74>)
   8284e:	4633      	mov	r3, r6
   82850:	4632      	mov	r2, r6
   82852:	21f0      	movs	r1, #240	; 0xf0
   82854:	4620      	mov	r0, r4
   82856:	47a8      	blx	r5
   82858:	4633      	mov	r3, r6
   8285a:	4632      	mov	r2, r6
   8285c:	4631      	mov	r1, r6
   8285e:	4620      	mov	r0, r4
   82860:	47a8      	blx	r5
   82862:	4633      	mov	r3, r6
   82864:	4632      	mov	r2, r6
   82866:	4631      	mov	r1, r6
   82868:	4620      	mov	r0, r4
   8286a:	47a8      	blx	r5
   8286c:	4633      	mov	r3, r6
   8286e:	4632      	mov	r2, r6
   82870:	4631      	mov	r1, r6
   82872:	4620      	mov	r0, r4
   82874:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   82876:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   82878:	f413 7f00 	tst.w	r3, #512	; 0x200
   8287c:	d0fb      	beq.n	82876 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   8287e:	f10d 0205 	add.w	r2, sp, #5
   82882:	f10d 0106 	add.w	r1, sp, #6
   82886:	4620      	mov	r0, r4
   82888:	4b0c      	ldr	r3, [pc, #48]	; (828bc <ISPTarget_WaitWhileTargetBusy+0x78>)
   8288a:	4798      	blx	r3
			return  ReceivedByte;
   8288c:	f89d 3006 	ldrb.w	r3, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   82890:	f013 0f01 	tst.w	r3, #1
   82894:	d005      	beq.n	828a2 <ISPTarget_WaitWhileTargetBusy+0x5e>
   82896:	4b0a      	ldr	r3, [pc, #40]	; (828c0 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   82898:	681b      	ldr	r3, [r3, #0]
   8289a:	2b00      	cmp	r3, #0
   8289c:	d1d7      	bne.n	8284e <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   8289e:	2081      	movs	r0, #129	; 0x81
   828a0:	e005      	b.n	828ae <ISPTarget_WaitWhileTargetBusy+0x6a>
   828a2:	4b07      	ldr	r3, [pc, #28]	; (828c0 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   828a4:	681b      	ldr	r3, [r3, #0]
   828a6:	2b00      	cmp	r3, #0
   828a8:	bf14      	ite	ne
   828aa:	2000      	movne	r0, #0
   828ac:	2081      	moveq	r0, #129	; 0x81
}
   828ae:	b002      	add	sp, #8
   828b0:	bd70      	pop	{r4, r5, r6, pc}
   828b2:	bf00      	nop
   828b4:	40008000 	.word	0x40008000
   828b8:	00085603 	.word	0x00085603
   828bc:	000855d5 	.word	0x000855d5
   828c0:	2000265c 	.word	0x2000265c

000828c4 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   828c4:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   828c6:	4d0c      	ldr	r5, [pc, #48]	; (828f8 <ISPTarget_LoadExtendedAddress+0x34>)
   828c8:	2300      	movs	r3, #0
   828ca:	461a      	mov	r2, r3
   828cc:	214d      	movs	r1, #77	; 0x4d
   828ce:	4628      	mov	r0, r5
   828d0:	4c0a      	ldr	r4, [pc, #40]	; (828fc <ISPTarget_LoadExtendedAddress+0x38>)
   828d2:	47a0      	blx	r4
   828d4:	2300      	movs	r3, #0
   828d6:	461a      	mov	r2, r3
   828d8:	4619      	mov	r1, r3
   828da:	4628      	mov	r0, r5
   828dc:	47a0      	blx	r4
   828de:	2300      	movs	r3, #0
   828e0:	461a      	mov	r2, r3
   828e2:	4907      	ldr	r1, [pc, #28]	; (82900 <ISPTarget_LoadExtendedAddress+0x3c>)
   828e4:	7889      	ldrb	r1, [r1, #2]
   828e6:	4628      	mov	r0, r5
   828e8:	47a0      	blx	r4
   828ea:	2300      	movs	r3, #0
   828ec:	461a      	mov	r2, r3
   828ee:	4619      	mov	r1, r3
   828f0:	4628      	mov	r0, r5
   828f2:	47a0      	blx	r4
   828f4:	bd38      	pop	{r3, r4, r5, pc}
   828f6:	bf00      	nop
   828f8:	40008000 	.word	0x40008000
   828fc:	00085603 	.word	0x00085603
   82900:	20002658 	.word	0x20002658

00082904 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   82904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82908:	b082      	sub	sp, #8
   8290a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8290e:	f000 007e 	and.w	r0, r0, #126	; 0x7e
   82912:	2808      	cmp	r0, #8
   82914:	d04d      	beq.n	829b2 <ISPTarget_WaitForProgComplete+0xae>
   82916:	460f      	mov	r7, r1
   82918:	4690      	mov	r8, r2
   8291a:	dd07      	ble.n	8292c <ISPTarget_WaitForProgComplete+0x28>
   8291c:	2820      	cmp	r0, #32
   8291e:	d009      	beq.n	82934 <ISPTarget_WaitForProgComplete+0x30>
   82920:	2840      	cmp	r0, #64	; 0x40
   82922:	d046      	beq.n	829b2 <ISPTarget_WaitForProgComplete+0xae>
   82924:	2810      	cmp	r0, #16
   82926:	d033      	beq.n	82990 <ISPTarget_WaitForProgComplete+0x8c>
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   82928:	2000      	movs	r0, #0
   8292a:	e035      	b.n	82998 <ISPTarget_WaitForProgComplete+0x94>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8292c:	2802      	cmp	r0, #2
   8292e:	d02f      	beq.n	82990 <ISPTarget_WaitForProgComplete+0x8c>
   82930:	2804      	cmp	r0, #4
   82932:	d1f9      	bne.n	82928 <ISPTarget_WaitForProgComplete+0x24>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
   82934:	ea4f 2a17 	mov.w	sl, r7, lsr #8
   82938:	4c1f      	ldr	r4, [pc, #124]	; (829b8 <ISPTarget_WaitForProgComplete+0xb4>)
   8293a:	2600      	movs	r6, #0
   8293c:	4d1f      	ldr	r5, [pc, #124]	; (829bc <ISPTarget_WaitForProgComplete+0xb8>)
   8293e:	4633      	mov	r3, r6
   82940:	4632      	mov	r2, r6
   82942:	4649      	mov	r1, r9
   82944:	4620      	mov	r0, r4
   82946:	47a8      	blx	r5
   82948:	4633      	mov	r3, r6
   8294a:	4632      	mov	r2, r6
   8294c:	4651      	mov	r1, sl
   8294e:	4620      	mov	r0, r4
   82950:	47a8      	blx	r5
   82952:	4633      	mov	r3, r6
   82954:	4632      	mov	r2, r6
   82956:	b2f9      	uxtb	r1, r7
   82958:	4620      	mov	r0, r4
   8295a:	47a8      	blx	r5
   8295c:	4633      	mov	r3, r6
   8295e:	4632      	mov	r2, r6
   82960:	4631      	mov	r1, r6
   82962:	4620      	mov	r0, r4
   82964:	47a8      	blx	r5
   82966:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   82968:	f413 7f00 	tst.w	r3, #512	; 0x200
   8296c:	d0fb      	beq.n	82966 <ISPTarget_WaitForProgComplete+0x62>
			spi_read(SPI, &ReceivedByte, &_);
   8296e:	f10d 0205 	add.w	r2, sp, #5
   82972:	f10d 0106 	add.w	r1, sp, #6
   82976:	4620      	mov	r0, r4
   82978:	4b11      	ldr	r3, [pc, #68]	; (829c0 <ISPTarget_WaitForProgComplete+0xbc>)
   8297a:	4798      	blx	r3
			return  ReceivedByte;
   8297c:	f89d 3006 	ldrb.w	r3, [sp, #6]
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   82980:	4598      	cmp	r8, r3
   82982:	d10f      	bne.n	829a4 <ISPTarget_WaitForProgComplete+0xa0>
   82984:	4b0f      	ldr	r3, [pc, #60]	; (829c4 <ISPTarget_WaitForProgComplete+0xc0>)
   82986:	681b      	ldr	r3, [r3, #0]
   82988:	2b00      	cmp	r3, #0
   8298a:	d1d8      	bne.n	8293e <ISPTarget_WaitForProgComplete+0x3a>

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8298c:	2080      	movs	r0, #128	; 0x80
   8298e:	e003      	b.n	82998 <ISPTarget_WaitForProgComplete+0x94>
			ISPProtocol_DelayMS(DelayMS);
   82990:	4618      	mov	r0, r3
   82992:	4b0d      	ldr	r3, [pc, #52]	; (829c8 <ISPTarget_WaitForProgComplete+0xc4>)
   82994:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   82996:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   82998:	2264      	movs	r2, #100	; 0x64
   8299a:	4b0a      	ldr	r3, [pc, #40]	; (829c4 <ISPTarget_WaitForProgComplete+0xc0>)
   8299c:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   8299e:	b002      	add	sp, #8
   829a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!(TimeoutTicksRemaining))
   829a4:	4b07      	ldr	r3, [pc, #28]	; (829c4 <ISPTarget_WaitForProgComplete+0xc0>)
   829a6:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   829a8:	2b00      	cmp	r3, #0
   829aa:	bf14      	ite	ne
   829ac:	2000      	movne	r0, #0
   829ae:	2080      	moveq	r0, #128	; 0x80
   829b0:	e7f2      	b.n	82998 <ISPTarget_WaitForProgComplete+0x94>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   829b2:	4b06      	ldr	r3, [pc, #24]	; (829cc <ISPTarget_WaitForProgComplete+0xc8>)
   829b4:	4798      	blx	r3
			break;
   829b6:	e7ef      	b.n	82998 <ISPTarget_WaitForProgComplete+0x94>
   829b8:	40008000 	.word	0x40008000
   829bc:	00085603 	.word	0x00085603
   829c0:	000855d5 	.word	0x000855d5
   829c4:	2000265c 	.word	0x2000265c
   829c8:	000824b9 	.word	0x000824b9
   829cc:	00082845 	.word	0x00082845

000829d0 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   829d0:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   829d2:	4b7d      	ldr	r3, [pc, #500]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   829d4:	789c      	ldrb	r4, [r3, #2]
   829d6:	4b7d      	ldr	r3, [pc, #500]	; (82bcc <V2Protocol_ProcessCommand+0x1fc>)
   829d8:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   829da:	4b7d      	ldr	r3, [pc, #500]	; (82bd0 <V2Protocol_ProcessCommand+0x200>)
   829dc:	4798      	blx	r3

	switch (V2Command)
   829de:	1e63      	subs	r3, r4, #1
   829e0:	2b21      	cmp	r3, #33	; 0x21
   829e2:	f200 80e6 	bhi.w	82bb2 <V2Protocol_ProcessCommand+0x1e2>
   829e6:	e8df f013 	tbh	[pc, r3, lsl #1]
   829ea:	0022      	.short	0x0022
   829ec:	00370037 	.word	0x00370037
   829f0:	00e400e4 	.word	0x00e400e4
   829f4:	00e4006c 	.word	0x00e4006c
   829f8:	00e400e4 	.word	0x00e400e4
   829fc:	00e4008b 	.word	0x00e4008b
   82a00:	00e400e4 	.word	0x00e400e4
   82a04:	00e400e4 	.word	0x00e400e4
   82a08:	00970093 	.word	0x00970093
   82a0c:	009b00a7 	.word	0x009b00a7
   82a10:	009b00a1 	.word	0x009b00a1
   82a14:	00b000a1 	.word	0x00b000a1
   82a18:	00b000ab 	.word	0x00b000ab
   82a1c:	00ab00ab 	.word	0x00ab00ab
   82a20:	00b500ab 	.word	0x00b500ab
   82a24:	00e400e4 	.word	0x00e400e4
   82a28:	00d200b9 	.word	0x00d200b9
   82a2c:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82a2e:	4c67      	ldr	r4, [pc, #412]	; (82bcc <V2Protocol_ProcessCommand+0x1fc>)
   82a30:	2300      	movs	r3, #0
   82a32:	7063      	strb	r3, [r4, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82a34:	230d      	movs	r3, #13
   82a36:	70a3      	strb	r3, [r4, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82a38:	4b66      	ldr	r3, [pc, #408]	; (82bd4 <V2Protocol_ProcessCommand+0x204>)
   82a3a:	cb07      	ldmia	r3!, {r0, r1, r2}
   82a3c:	f8c4 0003 	str.w	r0, [r4, #3]
   82a40:	f8c4 1007 	str.w	r1, [r4, #7]
   82a44:	f8c4 200b 	str.w	r2, [r4, #11]
   82a48:	781b      	ldrb	r3, [r3, #0]
   82a4a:	73e3      	strb	r3, [r4, #15]
	udd_g_ctrlreq.payload = status_payload;
   82a4c:	4b5e      	ldr	r3, [pc, #376]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82a4e:	609c      	str	r4, [r3, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   82a50:	2210      	movs	r2, #16
   82a52:	819a      	strh	r2, [r3, #12]
	return true;
   82a54:	2001      	movs	r0, #1
   82a56:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82a58:	4b5b      	ldr	r3, [pc, #364]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82a5a:	689b      	ldr	r3, [r3, #8]
   82a5c:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   82a5e:	2c02      	cmp	r4, #2
   82a60:	d00c      	beq.n	82a7c <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   82a62:	2202      	movs	r2, #2
   82a64:	4b5c      	ldr	r3, [pc, #368]	; (82bd8 <V2Protocol_ProcessCommand+0x208>)
   82a66:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a68:	4628      	mov	r0, r5
   82a6a:	4b5c      	ldr	r3, [pc, #368]	; (82bdc <V2Protocol_ProcessCommand+0x20c>)
   82a6c:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a6e:	2c03      	cmp	r4, #3
   82a70:	d017      	beq.n	82aa2 <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82a72:	22c0      	movs	r2, #192	; 0xc0
   82a74:	4b5a      	ldr	r3, [pc, #360]	; (82be0 <V2Protocol_ProcessCommand+0x210>)
   82a76:	705a      	strb	r2, [r3, #1]
	return true;
   82a78:	2001      	movs	r0, #1
   82a7a:	bd38      	pop	{r3, r4, r5, pc}
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   82a7c:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   82a7e:	2202      	movs	r2, #2
   82a80:	4b55      	ldr	r3, [pc, #340]	; (82bd8 <V2Protocol_ProcessCommand+0x208>)
   82a82:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a84:	4628      	mov	r0, r5
   82a86:	4b55      	ldr	r3, [pc, #340]	; (82bdc <V2Protocol_ProcessCommand+0x20c>)
   82a88:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82a8a:	f010 0f02 	tst.w	r0, #2
   82a8e:	d0f0      	beq.n	82a72 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82a90:	2200      	movs	r2, #0
   82a92:	4b53      	ldr	r3, [pc, #332]	; (82be0 <V2Protocol_ProcessCommand+0x210>)
   82a94:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a96:	4621      	mov	r1, r4
   82a98:	4628      	mov	r0, r5
   82a9a:	4b52      	ldr	r3, [pc, #328]	; (82be4 <V2Protocol_ProcessCommand+0x214>)
   82a9c:	4798      	blx	r3
	return true;
   82a9e:	2001      	movs	r0, #1
   82aa0:	bd38      	pop	{r3, r4, r5, pc}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82aa2:	f010 0f01 	tst.w	r0, #1
   82aa6:	d0e4      	beq.n	82a72 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82aa8:	4c4d      	ldr	r4, [pc, #308]	; (82be0 <V2Protocol_ProcessCommand+0x210>)
   82aaa:	2300      	movs	r3, #0
   82aac:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82aae:	4628      	mov	r0, r5
   82ab0:	4b4d      	ldr	r3, [pc, #308]	; (82be8 <V2Protocol_ProcessCommand+0x218>)
   82ab2:	4798      	blx	r3
   82ab4:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   82ab6:	4a48      	ldr	r2, [pc, #288]	; (82bd8 <V2Protocol_ProcessCommand+0x208>)
   82ab8:	8813      	ldrh	r3, [r2, #0]
   82aba:	3301      	adds	r3, #1
   82abc:	8013      	strh	r3, [r2, #0]
	return true;
   82abe:	2001      	movs	r0, #1
   82ac0:	bd38      	pop	{r3, r4, r5, pc}
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82ac2:	4b41      	ldr	r3, [pc, #260]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82ac4:	689b      	ldr	r3, [r3, #8]
   82ac6:	78da      	ldrb	r2, [r3, #3]
   82ac8:	7899      	ldrb	r1, [r3, #2]
   82aca:	0409      	lsls	r1, r1, #16
   82acc:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82ad0:	781a      	ldrb	r2, [r3, #0]
   82ad2:	4311      	orrs	r1, r2
   82ad4:	785b      	ldrb	r3, [r3, #1]
   82ad6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   82ada:	4b44      	ldr	r3, [pc, #272]	; (82bec <V2Protocol_ProcessCommand+0x21c>)
   82adc:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   82ade:	2900      	cmp	r1, #0
   82ae0:	db0a      	blt.n	82af8 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   82ae2:	4843      	ldr	r0, [pc, #268]	; (82bf0 <V2Protocol_ProcessCommand+0x220>)
   82ae4:	4b43      	ldr	r3, [pc, #268]	; (82bf4 <V2Protocol_ProcessCommand+0x224>)
   82ae6:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82ae8:	2200      	movs	r2, #0
   82aea:	4b3d      	ldr	r3, [pc, #244]	; (82be0 <V2Protocol_ProcessCommand+0x210>)
   82aec:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82aee:	2202      	movs	r2, #2
   82af0:	4b39      	ldr	r3, [pc, #228]	; (82bd8 <V2Protocol_ProcessCommand+0x208>)
   82af2:	801a      	strh	r2, [r3, #0]
	return true;
   82af4:	2001      	movs	r0, #1
   82af6:	bd38      	pop	{r3, r4, r5, pc}
	  MustLoadExtendedAddress = true;
   82af8:	2201      	movs	r2, #1
   82afa:	4b3f      	ldr	r3, [pc, #252]	; (82bf8 <V2Protocol_ProcessCommand+0x228>)
   82afc:	701a      	strb	r2, [r3, #0]
   82afe:	e7f0      	b.n	82ae2 <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82b00:	2200      	movs	r2, #0
   82b02:	4b37      	ldr	r3, [pc, #220]	; (82be0 <V2Protocol_ProcessCommand+0x210>)
   82b04:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82b06:	2202      	movs	r2, #2
   82b08:	4b33      	ldr	r3, [pc, #204]	; (82bd8 <V2Protocol_ProcessCommand+0x208>)
   82b0a:	801a      	strh	r2, [r3, #0]
	return true;
   82b0c:	2001      	movs	r0, #1
   82b0e:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_EnterISPMode();
   82b10:	4b3a      	ldr	r3, [pc, #232]	; (82bfc <V2Protocol_ProcessCommand+0x22c>)
   82b12:	4798      	blx	r3
	return true;
   82b14:	2001      	movs	r0, #1
			break;
   82b16:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_LeaveISPMode();
   82b18:	4b39      	ldr	r3, [pc, #228]	; (82c00 <V2Protocol_ProcessCommand+0x230>)
   82b1a:	4798      	blx	r3
	return true;
   82b1c:	2001      	movs	r0, #1
			break;
   82b1e:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82b20:	4938      	ldr	r1, [pc, #224]	; (82c04 <V2Protocol_ProcessCommand+0x234>)
   82b22:	4620      	mov	r0, r4
   82b24:	4b38      	ldr	r3, [pc, #224]	; (82c08 <V2Protocol_ProcessCommand+0x238>)
   82b26:	4798      	blx	r3
	return true;
   82b28:	2001      	movs	r0, #1
			break;
   82b2a:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82b2c:	4935      	ldr	r1, [pc, #212]	; (82c04 <V2Protocol_ProcessCommand+0x234>)
   82b2e:	4620      	mov	r0, r4
   82b30:	4b36      	ldr	r3, [pc, #216]	; (82c0c <V2Protocol_ProcessCommand+0x23c>)
   82b32:	4798      	blx	r3
	return true;
   82b34:	2001      	movs	r0, #1
			break;
   82b36:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ChipErase();
   82b38:	4b35      	ldr	r3, [pc, #212]	; (82c10 <V2Protocol_ProcessCommand+0x240>)
   82b3a:	4798      	blx	r3
	return true;
   82b3c:	2001      	movs	r0, #1
			break;
   82b3e:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   82b40:	4620      	mov	r0, r4
   82b42:	4b34      	ldr	r3, [pc, #208]	; (82c14 <V2Protocol_ProcessCommand+0x244>)
   82b44:	4798      	blx	r3
	return true;
   82b46:	2001      	movs	r0, #1
			break;
   82b48:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_WriteFuseLock(V2Command);
   82b4a:	4620      	mov	r0, r4
   82b4c:	4b32      	ldr	r3, [pc, #200]	; (82c18 <V2Protocol_ProcessCommand+0x248>)
   82b4e:	4798      	blx	r3
	return true;
   82b50:	2001      	movs	r0, #1
			break;
   82b52:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_SPIMulti();
   82b54:	4b31      	ldr	r3, [pc, #196]	; (82c1c <V2Protocol_ProcessCommand+0x24c>)
   82b56:	4798      	blx	r3
	return true;
   82b58:	2001      	movs	r0, #1
			break;
   82b5a:	bd38      	pop	{r3, r4, r5, pc}
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82b5c:	4a1a      	ldr	r2, [pc, #104]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82b5e:	4b20      	ldr	r3, [pc, #128]	; (82be0 <V2Protocol_ProcessCommand+0x210>)
   82b60:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   82b62:	4b1d      	ldr	r3, [pc, #116]	; (82bd8 <V2Protocol_ProcessCommand+0x208>)
   82b64:	8819      	ldrh	r1, [r3, #0]
   82b66:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   82b68:	2200      	movs	r2, #0
   82b6a:	801a      	strh	r2, [r3, #0]
			return true;
   82b6c:	2001      	movs	r0, #1
   82b6e:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b70:	4a15      	ldr	r2, [pc, #84]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82b72:	8853      	ldrh	r3, [r2, #2]
   82b74:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b76:	88d2      	ldrh	r2, [r2, #6]
   82b78:	1899      	adds	r1, r3, r2
   82b7a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82b7e:	dc20      	bgt.n	82bc2 <V2Protocol_ProcessCommand+0x1f2>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   82b80:	4811      	ldr	r0, [pc, #68]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82b82:	4920      	ldr	r1, [pc, #128]	; (82c04 <V2Protocol_ProcessCommand+0x234>)
   82b84:	440b      	add	r3, r1
   82b86:	6083      	str	r3, [r0, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82b88:	8182      	strh	r2, [r0, #12]
			return true;
   82b8a:	2001      	movs	r0, #1
   82b8c:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b8e:	4a0e      	ldr	r2, [pc, #56]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82b90:	8853      	ldrh	r3, [r2, #2]
   82b92:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b94:	88d2      	ldrh	r2, [r2, #6]
   82b96:	1899      	adds	r1, r3, r2
   82b98:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82b9c:	dd01      	ble.n	82ba2 <V2Protocol_ProcessCommand+0x1d2>
				return false;
   82b9e:	2000      	movs	r0, #0
   82ba0:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82ba2:	4909      	ldr	r1, [pc, #36]	; (82bc8 <V2Protocol_ProcessCommand+0x1f8>)
   82ba4:	6889      	ldr	r1, [r1, #8]
   82ba6:	4817      	ldr	r0, [pc, #92]	; (82c04 <V2Protocol_ProcessCommand+0x234>)
   82ba8:	4418      	add	r0, r3
   82baa:	4b1d      	ldr	r3, [pc, #116]	; (82c20 <V2Protocol_ProcessCommand+0x250>)
   82bac:	4798      	blx	r3
			return true;
   82bae:	2001      	movs	r0, #1
   82bb0:	bd38      	pop	{r3, r4, r5, pc}
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   82bb2:	22c9      	movs	r2, #201	; 0xc9
   82bb4:	4b0a      	ldr	r3, [pc, #40]	; (82be0 <V2Protocol_ProcessCommand+0x210>)
   82bb6:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82bb8:	2202      	movs	r2, #2
   82bba:	4b07      	ldr	r3, [pc, #28]	; (82bd8 <V2Protocol_ProcessCommand+0x208>)
   82bbc:	801a      	strh	r2, [r3, #0]
	return true;
   82bbe:	2001      	movs	r0, #1
   82bc0:	bd38      	pop	{r3, r4, r5, pc}
				return false;
   82bc2:	2000      	movs	r0, #0
   82bc4:	bd38      	pop	{r3, r4, r5, pc}
   82bc6:	bf00      	nop
   82bc8:	20002dec 	.word	0x20002dec
   82bcc:	20001a24 	.word	0x20001a24
   82bd0:	0008352d 	.word	0x0008352d
   82bd4:	0008d9a0 	.word	0x0008d9a0
   82bd8:	20002636 	.word	0x20002636
   82bdc:	00082c55 	.word	0x00082c55
   82be0:	20002638 	.word	0x20002638
   82be4:	00082c7d 	.word	0x00082c7d
   82be8:	00082c69 	.word	0x00082c69
   82bec:	20002658 	.word	0x20002658
   82bf0:	0008d9b0 	.word	0x0008d9b0
   82bf4:	00087835 	.word	0x00087835
   82bf8:	20002634 	.word	0x20002634
   82bfc:	000824ed 	.word	0x000824ed
   82c00:	00082641 	.word	0x00082641
   82c04:	20001924 	.word	0x20001924
   82c08:	00081fdd 	.word	0x00081fdd
   82c0c:	00082255 	.word	0x00082255
   82c10:	000826a9 	.word	0x000826a9
   82c14:	00082399 	.word	0x00082399
   82c18:	00082445 	.word	0x00082445
   82c1c:	000824b5 	.word	0x000824b5
   82c20:	0008785d 	.word	0x0008785d

00082c24 <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
   82c24:	4b09      	ldr	r3, [pc, #36]	; (82c4c <V2Params_GetParamFromTable+0x28>)
   82c26:	781b      	ldrb	r3, [r3, #0]
   82c28:	4283      	cmp	r3, r0
   82c2a:	d00a      	beq.n	82c42 <V2Params_GetParamFromTable+0x1e>
		  return CurrTableItem;

		CurrTableItem++;
   82c2c:	4b08      	ldr	r3, [pc, #32]	; (82c50 <V2Params_GetParamFromTable+0x2c>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c2e:	f103 011b 	add.w	r1, r3, #27
		if (ParamID == CurrTableItem->ParamID)
   82c32:	781a      	ldrb	r2, [r3, #0]
   82c34:	4282      	cmp	r2, r0
   82c36:	d006      	beq.n	82c46 <V2Params_GetParamFromTable+0x22>
		CurrTableItem++;
   82c38:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c3a:	428b      	cmp	r3, r1
   82c3c:	d1f9      	bne.n	82c32 <V2Params_GetParamFromTable+0xe>
	}

	return NULL;
   82c3e:	2000      	movs	r0, #0
   82c40:	4770      	bx	lr
	ParameterItem_t* CurrTableItem = ParameterTable;
   82c42:	4802      	ldr	r0, [pc, #8]	; (82c4c <V2Params_GetParamFromTable+0x28>)
   82c44:	4770      	bx	lr
   82c46:	4618      	mov	r0, r3
}
   82c48:	4770      	bx	lr
   82c4a:	bf00      	nop
   82c4c:	20000588 	.word	0x20000588
   82c50:	2000058b 	.word	0x2000058b

00082c54 <V2Params_GetParameterPrivileges>:
{
   82c54:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c56:	4b03      	ldr	r3, [pc, #12]	; (82c64 <V2Params_GetParameterPrivileges+0x10>)
   82c58:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c5a:	b108      	cbz	r0, 82c60 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   82c5c:	7840      	ldrb	r0, [r0, #1]
   82c5e:	bd08      	pop	{r3, pc}
	  return 0;
   82c60:	2000      	movs	r0, #0
}
   82c62:	bd08      	pop	{r3, pc}
   82c64:	00082c25 	.word	0x00082c25

00082c68 <V2Params_GetParameterValue>:
{
   82c68:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c6a:	4b03      	ldr	r3, [pc, #12]	; (82c78 <V2Params_GetParameterValue+0x10>)
   82c6c:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c6e:	b108      	cbz	r0, 82c74 <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   82c70:	7880      	ldrb	r0, [r0, #2]
   82c72:	bd08      	pop	{r3, pc}
	  return 0;
   82c74:	2000      	movs	r0, #0
}
   82c76:	bd08      	pop	{r3, pc}
   82c78:	00082c25 	.word	0x00082c25

00082c7c <V2Params_SetParameterValue>:
{
   82c7c:	b510      	push	{r4, lr}
   82c7e:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c80:	4b02      	ldr	r3, [pc, #8]	; (82c8c <V2Params_SetParameterValue+0x10>)
   82c82:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c84:	b100      	cbz	r0, 82c88 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   82c86:	7084      	strb	r4, [r0, #2]
   82c88:	bd10      	pop	{r4, pc}
   82c8a:	bf00      	nop
   82c8c:	00082c25 	.word	0x00082c25

00082c90 <ctrl_readmem_ctrl>:
	buflen,
	main_vendor_bulk_in_received
	);	
}

void ctrl_readmem_ctrl(void){
   82c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82c92:	4b0a      	ldr	r3, [pc, #40]	; (82cbc <ctrl_readmem_ctrl+0x2c>)
   82c94:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82c96:	685f      	ldr	r7, [r3, #4]
	
	FPGA_releaselock();
   82c98:	4b09      	ldr	r3, [pc, #36]	; (82cc0 <ctrl_readmem_ctrl+0x30>)
   82c9a:	4798      	blx	r3
	while(!FPGA_setlock(fpga_ctrlmem));
   82c9c:	2505      	movs	r5, #5
   82c9e:	4c09      	ldr	r4, [pc, #36]	; (82cc4 <ctrl_readmem_ctrl+0x34>)
   82ca0:	4628      	mov	r0, r5
   82ca2:	47a0      	blx	r4
   82ca4:	2800      	cmp	r0, #0
   82ca6:	d0fb      	beq.n	82ca0 <ctrl_readmem_ctrl+0x10>
	
	/* Set address */
	FPGA_setaddr(address);
   82ca8:	4638      	mov	r0, r7
   82caa:	4b07      	ldr	r3, [pc, #28]	; (82cc8 <ctrl_readmem_ctrl+0x38>)
   82cac:	4798      	blx	r3

	/* Do memory read */
	ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82cae:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   82cb2:	4b06      	ldr	r3, [pc, #24]	; (82ccc <ctrl_readmem_ctrl+0x3c>)
   82cb4:	601a      	str	r2, [r3, #0]
	
	/* Set size to read */
	ctrlmemread_size = buflen;
   82cb6:	4b06      	ldr	r3, [pc, #24]	; (82cd0 <ctrl_readmem_ctrl+0x40>)
   82cb8:	601e      	str	r6, [r3, #0]
   82cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cbc:	20001a48 	.word	0x20001a48
   82cc0:	00081d95 	.word	0x00081d95
   82cc4:	00081d69 	.word	0x00081d69
   82cc8:	00081dad 	.word	0x00081dad
   82ccc:	20001a88 	.word	0x20001a88
   82cd0:	20001a8c 	.word	0x20001a8c

00082cd4 <ctrl_writemem_ctrl>:
	
	/* Start Transaction */
}

void ctrl_writemem_ctrl(void){
   82cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82cd6:	4b0e      	ldr	r3, [pc, #56]	; (82d10 <ctrl_writemem_ctrl+0x3c>)
   82cd8:	681c      	ldr	r4, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82cda:	685f      	ldr	r7, [r3, #4]
	
	uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
	
	//printf("Writing to %x, %d\n", address, buflen);
	
	FPGA_releaselock();
   82cdc:	4b0d      	ldr	r3, [pc, #52]	; (82d14 <ctrl_writemem_ctrl+0x40>)
   82cde:	4798      	blx	r3
	while(!FPGA_setlock(fpga_generic));
   82ce0:	2601      	movs	r6, #1
   82ce2:	4d0d      	ldr	r5, [pc, #52]	; (82d18 <ctrl_writemem_ctrl+0x44>)
   82ce4:	4630      	mov	r0, r6
   82ce6:	47a8      	blx	r5
   82ce8:	2800      	cmp	r0, #0
   82cea:	d0fb      	beq.n	82ce4 <ctrl_writemem_ctrl+0x10>
	
	/* Set address */
	FPGA_setaddr(address);
   82cec:	4638      	mov	r0, r7
   82cee:	4b0b      	ldr	r3, [pc, #44]	; (82d1c <ctrl_writemem_ctrl+0x48>)
   82cf0:	4798      	blx	r3

	/* Start Transaction */

	/* Do memory write */
	for(unsigned int i = 0; i < buflen; i++){
   82cf2:	b14c      	cbz	r4, 82d08 <ctrl_writemem_ctrl+0x34>
   82cf4:	4a0a      	ldr	r2, [pc, #40]	; (82d20 <ctrl_writemem_ctrl+0x4c>)
   82cf6:	2300      	movs	r3, #0
		xram[i] = ctrlbuf_payload[i];
   82cf8:	4d0a      	ldr	r5, [pc, #40]	; (82d24 <ctrl_writemem_ctrl+0x50>)
   82cfa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82cfe:	6829      	ldr	r1, [r5, #0]
   82d00:	54c8      	strb	r0, [r1, r3]
	for(unsigned int i = 0; i < buflen; i++){
   82d02:	3301      	adds	r3, #1
   82d04:	429c      	cmp	r4, r3
   82d06:	d1f8      	bne.n	82cfa <ctrl_writemem_ctrl+0x26>
	}
	
	FPGA_releaselock();
   82d08:	4b02      	ldr	r3, [pc, #8]	; (82d14 <ctrl_writemem_ctrl+0x40>)
   82d0a:	4798      	blx	r3
   82d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d0e:	bf00      	nop
   82d10:	20001a48 	.word	0x20001a48
   82d14:	00081d95 	.word	0x00081d95
   82d18:	00081d69 	.word	0x00081d69
   82d1c:	00081dad 	.word	0x00081dad
   82d20:	20001a4f 	.word	0x20001a4f
   82d24:	200002f4 	.word	0x200002f4

00082d28 <ctrl_writemem_bulk>:
}

void ctrl_writemem_bulk(void){
   82d28:	b570      	push	{r4, r5, r6, lr}
	//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d2a:	4b07      	ldr	r3, [pc, #28]	; (82d48 <ctrl_writemem_bulk+0x20>)
   82d2c:	685e      	ldr	r6, [r3, #4]
	
	// TODO: see block in
	FPGA_releaselock();
   82d2e:	4b07      	ldr	r3, [pc, #28]	; (82d4c <ctrl_writemem_bulk+0x24>)
   82d30:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockout));
   82d32:	2504      	movs	r5, #4
   82d34:	4c06      	ldr	r4, [pc, #24]	; (82d50 <ctrl_writemem_bulk+0x28>)
   82d36:	4628      	mov	r0, r5
   82d38:	47a0      	blx	r4
   82d3a:	2800      	cmp	r0, #0
   82d3c:	d0fb      	beq.n	82d36 <ctrl_writemem_bulk+0xe>
	
	/* Set address */
	FPGA_setaddr(address);
   82d3e:	4630      	mov	r0, r6
   82d40:	4b04      	ldr	r3, [pc, #16]	; (82d54 <ctrl_writemem_bulk+0x2c>)
   82d42:	4798      	blx	r3
   82d44:	bd70      	pop	{r4, r5, r6, pc}
   82d46:	bf00      	nop
   82d48:	20001a48 	.word	0x20001a48
   82d4c:	00081d95 	.word	0x00081d95
   82d50:	00081d69 	.word	0x00081d69
   82d54:	00081dad 	.word	0x00081dad

00082d58 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   82d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   82d5a:	4b0a      	ldr	r3, [pc, #40]	; (82d84 <ctrl_readmem_bulk+0x2c>)
   82d5c:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d5e:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82d60:	4b09      	ldr	r3, [pc, #36]	; (82d88 <ctrl_readmem_bulk+0x30>)
   82d62:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockin));
   82d64:	2502      	movs	r5, #2
   82d66:	4c09      	ldr	r4, [pc, #36]	; (82d8c <ctrl_readmem_bulk+0x34>)
   82d68:	4628      	mov	r0, r5
   82d6a:	47a0      	blx	r4
   82d6c:	2800      	cmp	r0, #0
   82d6e:	d0fb      	beq.n	82d68 <ctrl_readmem_bulk+0x10>
	FPGA_setaddr(address);
   82d70:	4638      	mov	r0, r7
   82d72:	4b07      	ldr	r3, [pc, #28]	; (82d90 <ctrl_readmem_bulk+0x38>)
   82d74:	4798      	blx	r3
	udi_vendor_bulk_in_run(
   82d76:	4a07      	ldr	r2, [pc, #28]	; (82d94 <ctrl_readmem_bulk+0x3c>)
   82d78:	4631      	mov	r1, r6
   82d7a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   82d7e:	4b06      	ldr	r3, [pc, #24]	; (82d98 <ctrl_readmem_bulk+0x40>)
   82d80:	4798      	blx	r3
   82d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d84:	20001a48 	.word	0x20001a48
   82d88:	00081d95 	.word	0x00081d95
   82d8c:	00081d69 	.word	0x00081d69
   82d90:	00081dad 	.word	0x00081dad
   82d94:	00082ee9 	.word	0x00082ee9
   82d98:	0008466d 	.word	0x0008466d

00082d9c <ctrl_xmega_program_void>:
}
#endif
    			

void ctrl_xmega_program_void(void)
{
   82d9c:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   82d9e:	4b01      	ldr	r3, [pc, #4]	; (82da4 <ctrl_xmega_program_void+0x8>)
   82da0:	4798      	blx	r3
   82da2:	bd08      	pop	{r3, pc}
   82da4:	00083ecd 	.word	0x00083ecd

00082da8 <ctrl_avr_program_void>:
}

void ctrl_avr_program_void(void)
{
   82da8:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   82daa:	4b01      	ldr	r3, [pc, #4]	; (82db0 <ctrl_avr_program_void+0x8>)
   82dac:	4798      	blx	r3
   82dae:	bd08      	pop	{r3, pc}
   82db0:	000829d1 	.word	0x000829d1

00082db4 <ctrl_usart2_enabledump>:
}

static void ctrl_usart2_enabledump(void)
{
   82db4:	b510      	push	{r4, lr}
   82db6:	b084      	sub	sp, #16
	switch(udd_g_ctrlreq.req.wValue & 0xFF){
   82db8:	4b1e      	ldr	r3, [pc, #120]	; (82e34 <ctrl_usart2_enabledump+0x80>)
   82dba:	789b      	ldrb	r3, [r3, #2]
   82dbc:	b11b      	cbz	r3, 82dc6 <ctrl_usart2_enabledump+0x12>
   82dbe:	2b01      	cmp	r3, #1
   82dc0:	d012      	beq.n	82de8 <ctrl_usart2_enabledump+0x34>
			
		default:
			break;
	}

}
   82dc2:	b004      	add	sp, #16
   82dc4:	bd10      	pop	{r4, pc}
			usart_disable_rx(USART2);
   82dc6:	4c1c      	ldr	r4, [pc, #112]	; (82e38 <ctrl_usart2_enabledump+0x84>)
   82dc8:	4620      	mov	r0, r4
   82dca:	4b1c      	ldr	r3, [pc, #112]	; (82e3c <ctrl_usart2_enabledump+0x88>)
   82dcc:	4798      	blx	r3
			usart_disable_tx(USART2);
   82dce:	4620      	mov	r0, r4
   82dd0:	4b1b      	ldr	r3, [pc, #108]	; (82e40 <ctrl_usart2_enabledump+0x8c>)
   82dd2:	4798      	blx	r3
			usart_enable_interrupt(USART2, 0);
   82dd4:	2100      	movs	r1, #0
   82dd6:	4620      	mov	r0, r4
   82dd8:	4b1a      	ldr	r3, [pc, #104]	; (82e44 <ctrl_usart2_enabledump+0x90>)
   82dda:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82ddc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82de0:	4b19      	ldr	r3, [pc, #100]	; (82e48 <ctrl_usart2_enabledump+0x94>)
   82de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82de6:	e7ec      	b.n	82dc2 <ctrl_usart2_enabledump+0xe>
			pmc_enable_periph_clk(ID_USART2);
   82de8:	200f      	movs	r0, #15
   82dea:	4b18      	ldr	r3, [pc, #96]	; (82e4c <ctrl_usart2_enabledump+0x98>)
   82dec:	4798      	blx	r3
			opts.channel_mode = US_MR_CHMODE_NORMAL;
   82dee:	2300      	movs	r3, #0
   82df0:	9303      	str	r3, [sp, #12]
			opts.spi_mode = SPI_MODE_0;
   82df2:	9302      	str	r3, [sp, #8]
			opts.char_length = US_MR_CHRL_8_BIT;
   82df4:	23c0      	movs	r3, #192	; 0xc0
   82df6:	9301      	str	r3, [sp, #4]
			usart_init_spi_slave(USART2, &opts);
   82df8:	4c0f      	ldr	r4, [pc, #60]	; (82e38 <ctrl_usart2_enabledump+0x84>)
   82dfa:	4669      	mov	r1, sp
   82dfc:	4620      	mov	r0, r4
   82dfe:	4b14      	ldr	r3, [pc, #80]	; (82e50 <ctrl_usart2_enabledump+0x9c>)
   82e00:	4798      	blx	r3
			usart_enable_rx(USART2);
   82e02:	4620      	mov	r0, r4
   82e04:	4b13      	ldr	r3, [pc, #76]	; (82e54 <ctrl_usart2_enabledump+0xa0>)
   82e06:	4798      	blx	r3
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82e0c:	4b0e      	ldr	r3, [pc, #56]	; (82e48 <ctrl_usart2_enabledump+0x94>)
   82e0e:	601a      	str	r2, [r3, #0]
			usart_enable_interrupt(USART2, US_IER_RXRDY);
   82e10:	2101      	movs	r1, #1
   82e12:	4620      	mov	r0, r4
   82e14:	4b0b      	ldr	r3, [pc, #44]	; (82e44 <ctrl_usart2_enabledump+0x90>)
   82e16:	4798      	blx	r3
			gpio_configure_pin(PIO_PA23_IDX, (PIO_PERIPH_A | PIO_DEFAULT));
   82e18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e1c:	2017      	movs	r0, #23
   82e1e:	4c0e      	ldr	r4, [pc, #56]	; (82e58 <ctrl_usart2_enabledump+0xa4>)
   82e20:	47a0      	blx	r4
			gpio_configure_pin(PIO_PB22_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e26:	2036      	movs	r0, #54	; 0x36
   82e28:	47a0      	blx	r4
			gpio_configure_pin(PIO_PA25_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e2e:	2019      	movs	r0, #25
   82e30:	47a0      	blx	r4
}
   82e32:	e7c6      	b.n	82dc2 <ctrl_usart2_enabledump+0xe>
   82e34:	20002dec 	.word	0x20002dec
   82e38:	40098000 	.word	0x40098000
   82e3c:	00086def 	.word	0x00086def
   82e40:	00086ddf 	.word	0x00086ddf
   82e44:	00086df5 	.word	0x00086df5
   82e48:	e000e100 	.word	0xe000e100
   82e4c:	00085515 	.word	0x00085515
   82e50:	00086d31 	.word	0x00086d31
   82e54:	00086de9 	.word	0x00086de9
   82e58:	000851d1 	.word	0x000851d1

00082e5c <ctrl_usart_cb_data>:
{
	ctrl_usart(USART_TARGET, false);
}

static void ctrl_usart_cb_data(void)
{		
   82e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82e5e:	4b0a      	ldr	r3, [pc, #40]	; (82e88 <ctrl_usart_cb_data+0x2c>)
   82e60:	88da      	ldrh	r2, [r3, #6]
   82e62:	899b      	ldrh	r3, [r3, #12]
   82e64:	4293      	cmp	r3, r2
   82e66:	d30d      	bcc.n	82e84 <ctrl_usart_cb_data+0x28>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e68:	b162      	cbz	r2, 82e84 <ctrl_usart_cb_data+0x28>
   82e6a:	2400      	movs	r4, #0
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   82e6c:	4d06      	ldr	r5, [pc, #24]	; (82e88 <ctrl_usart_cb_data+0x2c>)
   82e6e:	4f07      	ldr	r7, [pc, #28]	; (82e8c <ctrl_usart_cb_data+0x30>)
   82e70:	4e07      	ldr	r6, [pc, #28]	; (82e90 <ctrl_usart_cb_data+0x34>)
   82e72:	68ab      	ldr	r3, [r5, #8]
   82e74:	5d1a      	ldrb	r2, [r3, r4]
   82e76:	2100      	movs	r1, #0
   82e78:	4638      	mov	r0, r7
   82e7a:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e7c:	3401      	adds	r4, #1
   82e7e:	88eb      	ldrh	r3, [r5, #6]
   82e80:	42a3      	cmp	r3, r4
   82e82:	dcf6      	bgt.n	82e72 <ctrl_usart_cb_data+0x16>
   82e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e86:	bf00      	nop
   82e88:	20002dec 	.word	0x20002dec
   82e8c:	40090000 	.word	0x40090000
   82e90:	00083911 	.word	0x00083911

00082e94 <ctrl_usart_cb>:
{
   82e94:	b508      	push	{r3, lr}
	ctrl_usart(USART_TARGET, false);
   82e96:	2100      	movs	r1, #0
   82e98:	4801      	ldr	r0, [pc, #4]	; (82ea0 <ctrl_usart_cb+0xc>)
   82e9a:	4b02      	ldr	r3, [pc, #8]	; (82ea4 <ctrl_usart_cb+0x10>)
   82e9c:	4798      	blx	r3
   82e9e:	bd08      	pop	{r3, pc}
   82ea0:	40090000 	.word	0x40090000
   82ea4:	000835ad 	.word	0x000835ad

00082ea8 <ctrl_progfpga_bulk>:
	// If any of the above failed...
	return false;		
}


void ctrl_progfpga_bulk(void){
   82ea8:	b508      	push	{r3, lr}
	
	switch(udd_g_ctrlreq.req.wValue){
   82eaa:	4b0b      	ldr	r3, [pc, #44]	; (82ed8 <ctrl_progfpga_bulk+0x30>)
   82eac:	885b      	ldrh	r3, [r3, #2]
   82eae:	2ba1      	cmp	r3, #161	; 0xa1
   82eb0:	d007      	beq.n	82ec2 <ctrl_progfpga_bulk+0x1a>
   82eb2:	2ba2      	cmp	r3, #162	; 0xa2
   82eb4:	d00b      	beq.n	82ece <ctrl_progfpga_bulk+0x26>
   82eb6:	2ba0      	cmp	r3, #160	; 0xa0
   82eb8:	d000      	beq.n	82ebc <ctrl_progfpga_bulk+0x14>
   82eba:	bd08      	pop	{r3, pc}
		case 0xA0:
			fpga_program_setup1();			
   82ebc:	4b07      	ldr	r3, [pc, #28]	; (82edc <ctrl_progfpga_bulk+0x34>)
   82ebe:	4798      	blx	r3
			break;
   82ec0:	bd08      	pop	{r3, pc}
			
		case 0xA1:
			/* Waiting on data... */
			fpga_program_setup2();
   82ec2:	4b07      	ldr	r3, [pc, #28]	; (82ee0 <ctrl_progfpga_bulk+0x38>)
   82ec4:	4798      	blx	r3
			blockendpoint_usage = bep_fpgabitstream;
   82ec6:	220a      	movs	r2, #10
   82ec8:	4b06      	ldr	r3, [pc, #24]	; (82ee4 <ctrl_progfpga_bulk+0x3c>)
   82eca:	701a      	strb	r2, [r3, #0]
			break;
   82ecc:	bd08      	pop	{r3, pc}
			
		case 0xA2:
			/* Done */
			blockendpoint_usage = bep_emem;
   82ece:	2200      	movs	r2, #0
   82ed0:	4b04      	ldr	r3, [pc, #16]	; (82ee4 <ctrl_progfpga_bulk+0x3c>)
   82ed2:	701a      	strb	r2, [r3, #0]
			break;
			
		default:
			break;
	}
}
   82ed4:	e7f1      	b.n	82eba <ctrl_progfpga_bulk+0x12>
   82ed6:	bf00      	nop
   82ed8:	20002dec 	.word	0x20002dec
   82edc:	000870d1 	.word	0x000870d1
   82ee0:	00087165 	.word	0x00087165
   82ee4:	20001a45 	.word	0x20001a45

00082ee8 <main_vendor_bulk_in_received>:
	return false;
}

void main_vendor_bulk_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82ee8:	b508      	push	{r3, lr}
	UNUSED(nb_transfered);
	UNUSED(ep);
	
	if (FPGA_lockstatus() == fpga_blockin){		
   82eea:	4b08      	ldr	r3, [pc, #32]	; (82f0c <main_vendor_bulk_in_received+0x24>)
   82eec:	4798      	blx	r3
   82eee:	2802      	cmp	r0, #2
   82ef0:	d004      	beq.n	82efc <main_vendor_bulk_in_received+0x14>
		FPGA_releaselock();
	} else 	if (FPGA_lockstatus() == fpga_streamin) {
   82ef2:	4b06      	ldr	r3, [pc, #24]	; (82f0c <main_vendor_bulk_in_received+0x24>)
   82ef4:	4798      	blx	r3
   82ef6:	2803      	cmp	r0, #3
   82ef8:	d003      	beq.n	82f02 <main_vendor_bulk_in_received+0x1a>
   82efa:	bd08      	pop	{r3, pc}
		FPGA_releaselock();
   82efc:	4b04      	ldr	r3, [pc, #16]	; (82f10 <main_vendor_bulk_in_received+0x28>)
   82efe:	4798      	blx	r3
   82f00:	bd08      	pop	{r3, pc}
		smc_normaltiming();
   82f02:	4b04      	ldr	r3, [pc, #16]	; (82f14 <main_vendor_bulk_in_received+0x2c>)
   82f04:	4798      	blx	r3
		FPGA_releaselock();
   82f06:	4b02      	ldr	r3, [pc, #8]	; (82f10 <main_vendor_bulk_in_received+0x28>)
   82f08:	4798      	blx	r3
   82f0a:	e7f6      	b.n	82efa <main_vendor_bulk_in_received+0x12>
   82f0c:	00081da1 	.word	0x00081da1
   82f10:	00081d95 	.word	0x00081d95
   82f14:	00081dd5 	.word	0x00081dd5

00082f18 <main_vendor_bulk_out_received>:

}

void main_vendor_bulk_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82f18:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   82f1a:	b9b8      	cbnz	r0, 82f4c <main_vendor_bulk_out_received+0x34>
		main_vendor_bulk_out_received);
		
		return;
	}
	
	if (blockendpoint_usage == bep_emem){
   82f1c:	4b18      	ldr	r3, [pc, #96]	; (82f80 <main_vendor_bulk_out_received+0x68>)
   82f1e:	781b      	ldrb	r3, [r3, #0]
   82f20:	b9f3      	cbnz	r3, 82f60 <main_vendor_bulk_out_received+0x48>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f22:	b141      	cbz	r1, 82f36 <main_vendor_bulk_out_received+0x1e>
   82f24:	4a17      	ldr	r2, [pc, #92]	; (82f84 <main_vendor_bulk_out_received+0x6c>)
			xram[i] = main_buf_loopback[i];
   82f26:	4d18      	ldr	r5, [pc, #96]	; (82f88 <main_vendor_bulk_out_received+0x70>)
   82f28:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   82f2c:	6828      	ldr	r0, [r5, #0]
   82f2e:	54c4      	strb	r4, [r0, r3]
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f30:	3301      	adds	r3, #1
   82f32:	4299      	cmp	r1, r3
   82f34:	d1f8      	bne.n	82f28 <main_vendor_bulk_out_received+0x10>
		}
		
		if (FPGA_lockstatus() == fpga_blockout){
   82f36:	4b15      	ldr	r3, [pc, #84]	; (82f8c <main_vendor_bulk_out_received+0x74>)
   82f38:	4798      	blx	r3
   82f3a:	2804      	cmp	r0, #4
   82f3c:	d00d      	beq.n	82f5a <main_vendor_bulk_out_received+0x42>
#endif
	}
	
	//printf("BULKOUT: %d bytes\n", (int)nb_transfered);
	
	udi_vendor_bulk_out_run(
   82f3e:	4a14      	ldr	r2, [pc, #80]	; (82f90 <main_vendor_bulk_out_received+0x78>)
   82f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f44:	4813      	ldr	r0, [pc, #76]	; (82f94 <main_vendor_bulk_out_received+0x7c>)
   82f46:	4b14      	ldr	r3, [pc, #80]	; (82f98 <main_vendor_bulk_out_received+0x80>)
   82f48:	4798      	blx	r3
   82f4a:	bd70      	pop	{r4, r5, r6, pc}
		udi_vendor_bulk_out_run(
   82f4c:	4a10      	ldr	r2, [pc, #64]	; (82f90 <main_vendor_bulk_out_received+0x78>)
   82f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f52:	4810      	ldr	r0, [pc, #64]	; (82f94 <main_vendor_bulk_out_received+0x7c>)
   82f54:	4b10      	ldr	r3, [pc, #64]	; (82f98 <main_vendor_bulk_out_received+0x80>)
   82f56:	4798      	blx	r3
		return;
   82f58:	bd70      	pop	{r4, r5, r6, pc}
			FPGA_releaselock();
   82f5a:	4b10      	ldr	r3, [pc, #64]	; (82f9c <main_vendor_bulk_out_received+0x84>)
   82f5c:	4798      	blx	r3
   82f5e:	e7ee      	b.n	82f3e <main_vendor_bulk_out_received+0x26>
	} else if (blockendpoint_usage == bep_fpgabitstream){
   82f60:	2b0a      	cmp	r3, #10
   82f62:	d1ec      	bne.n	82f3e <main_vendor_bulk_out_received+0x26>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f64:	2900      	cmp	r1, #0
   82f66:	d0ea      	beq.n	82f3e <main_vendor_bulk_out_received+0x26>
   82f68:	4d0a      	ldr	r5, [pc, #40]	; (82f94 <main_vendor_bulk_out_received+0x7c>)
   82f6a:	1e6c      	subs	r4, r5, #1
   82f6c:	3901      	subs	r1, #1
   82f6e:	440d      	add	r5, r1
			fpga_program_sendbyte(main_buf_loopback[i]);
   82f70:	4e0b      	ldr	r6, [pc, #44]	; (82fa0 <main_vendor_bulk_out_received+0x88>)
   82f72:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   82f76:	47b0      	blx	r6
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f78:	42ac      	cmp	r4, r5
   82f7a:	d1fa      	bne.n	82f72 <main_vendor_bulk_out_received+0x5a>
   82f7c:	e7df      	b.n	82f3e <main_vendor_bulk_out_received+0x26>
   82f7e:	bf00      	nop
   82f80:	20001a45 	.word	0x20001a45
   82f84:	20001a93 	.word	0x20001a93
   82f88:	200002f4 	.word	0x200002f4
   82f8c:	00081da1 	.word	0x00081da1
   82f90:	00082f19 	.word	0x00082f19
   82f94:	20001a94 	.word	0x20001a94
   82f98:	00084689 	.word	0x00084689
   82f9c:	00081d95 	.word	0x00081d95
   82fa0:	00087175 	.word	0x00087175

00082fa4 <ctrl_sam3ucfg_cb>:
{
   82fa4:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   82fa6:	4b17      	ldr	r3, [pc, #92]	; (83004 <ctrl_sam3ucfg_cb+0x60>)
   82fa8:	789b      	ldrb	r3, [r3, #2]
   82faa:	2b02      	cmp	r3, #2
   82fac:	d00e      	beq.n	82fcc <ctrl_sam3ucfg_cb+0x28>
   82fae:	2b03      	cmp	r3, #3
   82fb0:	d010      	beq.n	82fd4 <ctrl_sam3ucfg_cb+0x30>
   82fb2:	2b01      	cmp	r3, #1
   82fb4:	d125      	bne.n	83002 <ctrl_sam3ucfg_cb+0x5e>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82fb6:	203e      	movs	r0, #62	; 0x3e
   82fb8:	4b13      	ldr	r3, [pc, #76]	; (83008 <ctrl_sam3ucfg_cb+0x64>)
   82fba:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   82fbc:	4c13      	ldr	r4, [pc, #76]	; (8300c <ctrl_sam3ucfg_cb+0x68>)
   82fbe:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82fc0:	2800      	cmp	r0, #0
   82fc2:	d0fc      	beq.n	82fbe <ctrl_sam3ucfg_cb+0x1a>
			pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   82fc4:	2010      	movs	r0, #16
   82fc6:	4b12      	ldr	r3, [pc, #72]	; (83010 <ctrl_sam3ucfg_cb+0x6c>)
   82fc8:	4798      	blx	r3
			break;
   82fca:	bd10      	pop	{r4, pc}
			pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fcc:	2010      	movs	r0, #16
   82fce:	4b11      	ldr	r3, [pc, #68]	; (83014 <ctrl_sam3ucfg_cb+0x70>)
   82fd0:	4798      	blx	r3
			break;
   82fd2:	bd10      	pop	{r4, pc}
			board_power(0);
   82fd4:	201d      	movs	r0, #29
   82fd6:	4b10      	ldr	r3, [pc, #64]	; (83018 <ctrl_sam3ucfg_cb+0x74>)
   82fd8:	4798      	blx	r3
			efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);	
   82fda:	2201      	movs	r2, #1
   82fdc:	210c      	movs	r1, #12
   82fde:	480f      	ldr	r0, [pc, #60]	; (8301c <ctrl_sam3ucfg_cb+0x78>)
   82fe0:	4b0f      	ldr	r3, [pc, #60]	; (83020 <ctrl_sam3ucfg_cb+0x7c>)
   82fe2:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82fe4:	4b0f      	ldr	r3, [pc, #60]	; (83024 <ctrl_sam3ucfg_cb+0x80>)
   82fe6:	4798      	blx	r3
			while (RSTC->RSTC_SR & RSTC_SR_SRCMP);			
   82fe8:	4b0f      	ldr	r3, [pc, #60]	; (83028 <ctrl_sam3ucfg_cb+0x84>)
   82fea:	685a      	ldr	r2, [r3, #4]
   82fec:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   82ff0:	d1fb      	bne.n	82fea <ctrl_sam3ucfg_cb+0x46>
			RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;				
   82ff2:	4a0d      	ldr	r2, [pc, #52]	; (83028 <ctrl_sam3ucfg_cb+0x84>)
   82ff4:	6813      	ldr	r3, [r2, #0]
   82ff6:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82ffa:	f043 0305 	orr.w	r3, r3, #5
   82ffe:	6013      	str	r3, [r2, #0]
   83000:	e7fe      	b.n	83000 <ctrl_sam3ucfg_cb+0x5c>
   83002:	bd10      	pop	{r4, pc}
   83004:	20002dec 	.word	0x20002dec
   83008:	0008547d 	.word	0x0008547d
   8300c:	000854a5 	.word	0x000854a5
   83010:	000853b5 	.word	0x000853b5
   83014:	00085419 	.word	0x00085419
   83018:	000851b5 	.word	0x000851b5
   8301c:	400e0800 	.word	0x400e0800
   83020:	00081e21 	.word	0x00081e21
   83024:	0008629d 	.word	0x0008629d
   83028:	400e1200 	.word	0x400e1200

0008302c <main_suspend_action>:
{
   8302c:	b508      	push	{r3, lr}
	active = false;
   8302e:	2200      	movs	r2, #0
   83030:	4b02      	ldr	r3, [pc, #8]	; (8303c <main_suspend_action+0x10>)
   83032:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   83034:	4b02      	ldr	r3, [pc, #8]	; (83040 <main_suspend_action+0x14>)
   83036:	4798      	blx	r3
   83038:	bd08      	pop	{r3, pc}
   8303a:	bf00      	nop
   8303c:	20001a44 	.word	0x20001a44
   83040:	000844c9 	.word	0x000844c9

00083044 <main_resume_action>:
{
   83044:	b508      	push	{r3, lr}
	ui_wakeup();
   83046:	4b01      	ldr	r3, [pc, #4]	; (8304c <main_resume_action+0x8>)
   83048:	4798      	blx	r3
   8304a:	bd08      	pop	{r3, pc}
   8304c:	000844e5 	.word	0x000844e5

00083050 <main_sof_action>:
{
   83050:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
   83052:	4b04      	ldr	r3, [pc, #16]	; (83064 <main_sof_action+0x14>)
   83054:	781b      	ldrb	r3, [r3, #0]
   83056:	b903      	cbnz	r3, 8305a <main_sof_action+0xa>
   83058:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
   8305a:	4b03      	ldr	r3, [pc, #12]	; (83068 <main_sof_action+0x18>)
   8305c:	4798      	blx	r3
   8305e:	4b03      	ldr	r3, [pc, #12]	; (8306c <main_sof_action+0x1c>)
   83060:	4798      	blx	r3
   83062:	e7f9      	b.n	83058 <main_sof_action+0x8>
   83064:	200005a6 	.word	0x200005a6
   83068:	0008631d 	.word	0x0008631d
   8306c:	000844fd 	.word	0x000844fd

00083070 <main_vendor_enable>:
{
   83070:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
   83072:	2401      	movs	r4, #1
   83074:	4b05      	ldr	r3, [pc, #20]	; (8308c <main_vendor_enable+0x1c>)
   83076:	701c      	strb	r4, [r3, #0]
	active = true;
   83078:	4b05      	ldr	r3, [pc, #20]	; (83090 <main_vendor_enable+0x20>)
   8307a:	701c      	strb	r4, [r3, #0]
	udi_vendor_bulk_out_run(
   8307c:	4a05      	ldr	r2, [pc, #20]	; (83094 <main_vendor_enable+0x24>)
   8307e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83082:	4805      	ldr	r0, [pc, #20]	; (83098 <main_vendor_enable+0x28>)
   83084:	4b05      	ldr	r3, [pc, #20]	; (8309c <main_vendor_enable+0x2c>)
   83086:	4798      	blx	r3
}
   83088:	4620      	mov	r0, r4
   8308a:	bd10      	pop	{r4, pc}
   8308c:	200005a6 	.word	0x200005a6
   83090:	20001a44 	.word	0x20001a44
   83094:	00082f19 	.word	0x00082f19
   83098:	20001a94 	.word	0x20001a94
   8309c:	00084689 	.word	0x00084689

000830a0 <main_vendor_disable>:
	main_b_vendor_enable = false;
   830a0:	2200      	movs	r2, #0
   830a2:	4b01      	ldr	r3, [pc, #4]	; (830a8 <main_vendor_disable+0x8>)
   830a4:	701a      	strb	r2, [r3, #0]
   830a6:	4770      	bx	lr
   830a8:	200005a6 	.word	0x200005a6

000830ac <main_setup_out_received>:
{
   830ac:	b508      	push	{r3, lr}
	udd_g_ctrlreq.payload = ctrlbuffer;
   830ae:	4b3f      	ldr	r3, [pc, #252]	; (831ac <main_setup_out_received+0x100>)
   830b0:	4a3f      	ldr	r2, [pc, #252]	; (831b0 <main_setup_out_received+0x104>)
   830b2:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   830b4:	88da      	ldrh	r2, [r3, #6]
   830b6:	2a40      	cmp	r2, #64	; 0x40
   830b8:	bf28      	it	cs
   830ba:	2240      	movcs	r2, #64	; 0x40
   830bc:	819a      	strh	r2, [r3, #12]
	blockendpoint_usage = bep_emem;
   830be:	2100      	movs	r1, #0
   830c0:	4a3c      	ldr	r2, [pc, #240]	; (831b4 <main_setup_out_received+0x108>)
   830c2:	7011      	strb	r1, [r2, #0]
	switch(udd_g_ctrlreq.req.bRequest){
   830c4:	785b      	ldrb	r3, [r3, #1]
   830c6:	3b10      	subs	r3, #16
   830c8:	2b12      	cmp	r3, #18
   830ca:	d865      	bhi.n	83198 <main_setup_out_received+0xec>
   830cc:	e8df f003 	tbb	[pc, r3]
   830d0:	28141e0a 	.word	0x28141e0a
   830d4:	64506464 	.word	0x64506464
   830d8:	32376464 	.word	0x32376464
   830dc:	4b463c41 	.word	0x4b463c41
   830e0:	5a55      	.short	0x5a55
   830e2:	5f          	.byte	0x5f
   830e3:	00          	.byte	0x00
			if (FPGA_setlock(fpga_usblocked)){
   830e4:	2006      	movs	r0, #6
   830e6:	4b34      	ldr	r3, [pc, #208]	; (831b8 <main_setup_out_received+0x10c>)
   830e8:	4798      	blx	r3
   830ea:	2800      	cmp	r0, #0
   830ec:	d056      	beq.n	8319c <main_setup_out_received+0xf0>
				udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   830ee:	4a33      	ldr	r2, [pc, #204]	; (831bc <main_setup_out_received+0x110>)
   830f0:	4b2e      	ldr	r3, [pc, #184]	; (831ac <main_setup_out_received+0x100>)
   830f2:	611a      	str	r2, [r3, #16]
				return true;
   830f4:	2001      	movs	r0, #1
   830f6:	bd08      	pop	{r3, pc}
			if (FPGA_setlock(fpga_usblocked)){
   830f8:	2006      	movs	r0, #6
   830fa:	4b2f      	ldr	r3, [pc, #188]	; (831b8 <main_setup_out_received+0x10c>)
   830fc:	4798      	blx	r3
   830fe:	2800      	cmp	r0, #0
   83100:	d04e      	beq.n	831a0 <main_setup_out_received+0xf4>
				udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   83102:	4a2f      	ldr	r2, [pc, #188]	; (831c0 <main_setup_out_received+0x114>)
   83104:	4b29      	ldr	r3, [pc, #164]	; (831ac <main_setup_out_received+0x100>)
   83106:	611a      	str	r2, [r3, #16]
				return true;	
   83108:	2001      	movs	r0, #1
   8310a:	bd08      	pop	{r3, pc}
			if (FPGA_setlock(fpga_usblocked)){
   8310c:	2006      	movs	r0, #6
   8310e:	4b2a      	ldr	r3, [pc, #168]	; (831b8 <main_setup_out_received+0x10c>)
   83110:	4798      	blx	r3
   83112:	2800      	cmp	r0, #0
   83114:	d046      	beq.n	831a4 <main_setup_out_received+0xf8>
				udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   83116:	4a2b      	ldr	r2, [pc, #172]	; (831c4 <main_setup_out_received+0x118>)
   83118:	4b24      	ldr	r3, [pc, #144]	; (831ac <main_setup_out_received+0x100>)
   8311a:	611a      	str	r2, [r3, #16]
				return true;
   8311c:	2001      	movs	r0, #1
   8311e:	bd08      	pop	{r3, pc}
			if (FPGA_setlock(fpga_usblocked)){
   83120:	2006      	movs	r0, #6
   83122:	4b25      	ldr	r3, [pc, #148]	; (831b8 <main_setup_out_received+0x10c>)
   83124:	4798      	blx	r3
   83126:	2800      	cmp	r0, #0
   83128:	d03e      	beq.n	831a8 <main_setup_out_received+0xfc>
				udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8312a:	4a27      	ldr	r2, [pc, #156]	; (831c8 <main_setup_out_received+0x11c>)
   8312c:	4b1f      	ldr	r3, [pc, #124]	; (831ac <main_setup_out_received+0x100>)
   8312e:	611a      	str	r2, [r3, #16]
				return true;
   83130:	2001      	movs	r0, #1
   83132:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_usart_cb;
   83134:	4a25      	ldr	r2, [pc, #148]	; (831cc <main_setup_out_received+0x120>)
   83136:	4b1d      	ldr	r3, [pc, #116]	; (831ac <main_setup_out_received+0x100>)
   83138:	611a      	str	r2, [r3, #16]
			return true;
   8313a:	2001      	movs	r0, #1
   8313c:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   8313e:	4a24      	ldr	r2, [pc, #144]	; (831d0 <main_setup_out_received+0x124>)
   83140:	4b1a      	ldr	r3, [pc, #104]	; (831ac <main_setup_out_received+0x100>)
   83142:	611a      	str	r2, [r3, #16]
			return true;
   83144:	2001      	movs	r0, #1
   83146:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_scardconfig_cb;
   83148:	4a22      	ldr	r2, [pc, #136]	; (831d4 <main_setup_out_received+0x128>)
   8314a:	4b18      	ldr	r3, [pc, #96]	; (831ac <main_setup_out_received+0x100>)
   8314c:	611a      	str	r2, [r3, #16]
			return true;
   8314e:	2001      	movs	r0, #1
   83150:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_scarddata_cb;
   83152:	4a21      	ldr	r2, [pc, #132]	; (831d8 <main_setup_out_received+0x12c>)
   83154:	4b15      	ldr	r3, [pc, #84]	; (831ac <main_setup_out_received+0x100>)
   83156:	611a      	str	r2, [r3, #16]
			return true;
   83158:	2001      	movs	r0, #1
   8315a:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_scardaux_cb;
   8315c:	4a1f      	ldr	r2, [pc, #124]	; (831dc <main_setup_out_received+0x130>)
   8315e:	4b13      	ldr	r3, [pc, #76]	; (831ac <main_setup_out_received+0x100>)
   83160:	611a      	str	r2, [r3, #16]
			return true;
   83162:	2001      	movs	r0, #1
   83164:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_usart2_enabledump;
   83166:	4a1e      	ldr	r2, [pc, #120]	; (831e0 <main_setup_out_received+0x134>)
   83168:	4b10      	ldr	r3, [pc, #64]	; (831ac <main_setup_out_received+0x100>)
   8316a:	611a      	str	r2, [r3, #16]
			return true;
   8316c:	2001      	movs	r0, #1
   8316e:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   83170:	4a1c      	ldr	r2, [pc, #112]	; (831e4 <main_setup_out_received+0x138>)
   83172:	4b0e      	ldr	r3, [pc, #56]	; (831ac <main_setup_out_received+0x100>)
   83174:	611a      	str	r2, [r3, #16]
			return true;
   83176:	2001      	movs	r0, #1
   83178:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   8317a:	4a1b      	ldr	r2, [pc, #108]	; (831e8 <main_setup_out_received+0x13c>)
   8317c:	4b0b      	ldr	r3, [pc, #44]	; (831ac <main_setup_out_received+0x100>)
   8317e:	611a      	str	r2, [r3, #16]
			return true;
   83180:	2001      	movs	r0, #1
   83182:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_avr_program_void;
   83184:	4a19      	ldr	r2, [pc, #100]	; (831ec <main_setup_out_received+0x140>)
   83186:	4b09      	ldr	r3, [pc, #36]	; (831ac <main_setup_out_received+0x100>)
   83188:	611a      	str	r2, [r3, #16]
			return true;
   8318a:	2001      	movs	r0, #1
   8318c:	bd08      	pop	{r3, pc}
			udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   8318e:	4a18      	ldr	r2, [pc, #96]	; (831f0 <main_setup_out_received+0x144>)
   83190:	4b06      	ldr	r3, [pc, #24]	; (831ac <main_setup_out_received+0x100>)
   83192:	611a      	str	r2, [r3, #16]
			return true;
   83194:	2001      	movs	r0, #1
   83196:	bd08      	pop	{r3, pc}
			return false;
   83198:	2000      	movs	r0, #0
   8319a:	bd08      	pop	{r3, pc}
	return false;		
   8319c:	2000      	movs	r0, #0
   8319e:	bd08      	pop	{r3, pc}
   831a0:	2000      	movs	r0, #0
   831a2:	bd08      	pop	{r3, pc}
   831a4:	2000      	movs	r0, #0
   831a6:	bd08      	pop	{r3, pc}
   831a8:	2000      	movs	r0, #0
}
   831aa:	bd08      	pop	{r3, pc}
   831ac:	20002dec 	.word	0x20002dec
   831b0:	20001a48 	.word	0x20001a48
   831b4:	20001a45 	.word	0x20001a45
   831b8:	00081d69 	.word	0x00081d69
   831bc:	00082d59 	.word	0x00082d59
   831c0:	00082c91 	.word	0x00082c91
   831c4:	00082d29 	.word	0x00082d29
   831c8:	00082cd5 	.word	0x00082cd5
   831cc:	00082e95 	.word	0x00082e95
   831d0:	00082e5d 	.word	0x00082e5d
   831d4:	00081ce9 	.word	0x00081ce9
   831d8:	00081aa1 	.word	0x00081aa1
   831dc:	00081af5 	.word	0x00081af5
   831e0:	00082db5 	.word	0x00082db5
   831e4:	00082ea9 	.word	0x00082ea9
   831e8:	00082d9d 	.word	0x00082d9d
   831ec:	00082da9 	.word	0x00082da9
   831f0:	00082fa5 	.word	0x00082fa5

000831f4 <main_setup_in_received>:
	if (udd_g_ctrlreq.req.wLength > sizeof(respbuf)){
   831f4:	4b3b      	ldr	r3, [pc, #236]	; (832e4 <main_setup_in_received+0xf0>)
   831f6:	88da      	ldrh	r2, [r3, #6]
   831f8:	2ac8      	cmp	r2, #200	; 0xc8
   831fa:	d86e      	bhi.n	832da <main_setup_in_received+0xe6>
{
   831fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.bRequest){
   83200:	785b      	ldrb	r3, [r3, #1]
   83202:	3b12      	subs	r3, #18
   83204:	2b0f      	cmp	r3, #15
   83206:	d86a      	bhi.n	832de <main_setup_in_received+0xea>
   83208:	e8df f003 	tbb	[pc, r3]
   8320c:	2d69691f 	.word	0x2d69691f
   83210:	69694e69 	.word	0x69694e69
   83214:	5b5f4808 	.word	0x5b5f4808
   83218:	44406963 	.word	0x44406963
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8321c:	2400      	movs	r4, #0
   8321e:	b16a      	cbz	r2, 8323c <main_setup_in_received+0x48>
   83220:	4d31      	ldr	r5, [pc, #196]	; (832e8 <main_setup_in_received+0xf4>)
   83222:	2400      	movs	r4, #0
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   83224:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8330c <main_setup_in_received+0x118>
   83228:	4f30      	ldr	r7, [pc, #192]	; (832ec <main_setup_in_received+0xf8>)
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8322a:	4e2e      	ldr	r6, [pc, #184]	; (832e4 <main_setup_in_received+0xf0>)
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   8322c:	4640      	mov	r0, r8
   8322e:	47b8      	blx	r7
   83230:	f805 0f01 	strb.w	r0, [r5, #1]!
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83234:	3401      	adds	r4, #1
   83236:	88f3      	ldrh	r3, [r6, #6]
   83238:	42a3      	cmp	r3, r4
   8323a:	d8f7      	bhi.n	8322c <main_setup_in_received+0x38>
			udd_g_ctrlreq.payload = respbuf;
   8323c:	4b29      	ldr	r3, [pc, #164]	; (832e4 <main_setup_in_received+0xf0>)
   8323e:	4a2c      	ldr	r2, [pc, #176]	; (832f0 <main_setup_in_received+0xfc>)
   83240:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = cnt;
   83242:	819c      	strh	r4, [r3, #12]
			return true;
   83244:	2001      	movs	r0, #1
   83246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_g_ctrlreq.payload = ctrlmemread_buf;
   8324a:	4a26      	ldr	r2, [pc, #152]	; (832e4 <main_setup_in_received+0xf0>)
   8324c:	4b29      	ldr	r3, [pc, #164]	; (832f4 <main_setup_in_received+0x100>)
   8324e:	681b      	ldr	r3, [r3, #0]
   83250:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = ctrlmemread_size;
   83252:	4b29      	ldr	r3, [pc, #164]	; (832f8 <main_setup_in_received+0x104>)
   83254:	6819      	ldr	r1, [r3, #0]
   83256:	8191      	strh	r1, [r2, #12]
			ctrlmemread_size = 0;
   83258:	2200      	movs	r2, #0
   8325a:	601a      	str	r2, [r3, #0]
			FPGA_releaselock();
   8325c:	4b27      	ldr	r3, [pc, #156]	; (832fc <main_setup_in_received+0x108>)
   8325e:	4798      	blx	r3
			return true;
   83260:	2001      	movs	r0, #1
   83262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			respbuf[0] = FPGA_ISDONE();
   83266:	200a      	movs	r0, #10
   83268:	4b25      	ldr	r3, [pc, #148]	; (83300 <main_setup_in_received+0x10c>)
   8326a:	4798      	blx	r3
   8326c:	4b20      	ldr	r3, [pc, #128]	; (832f0 <main_setup_in_received+0xfc>)
   8326e:	3000      	adds	r0, #0
   83270:	bf18      	it	ne
   83272:	2001      	movne	r0, #1
   83274:	7018      	strb	r0, [r3, #0]
			respbuf[1] = 0;
   83276:	2200      	movs	r2, #0
   83278:	705a      	strb	r2, [r3, #1]
			respbuf[2] = 0;
   8327a:	709a      	strb	r2, [r3, #2]
			respbuf[3] = 0;
   8327c:	70da      	strb	r2, [r3, #3]
			udd_g_ctrlreq.payload = respbuf;
   8327e:	4a19      	ldr	r2, [pc, #100]	; (832e4 <main_setup_in_received+0xf0>)
   83280:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 4;
   83282:	2304      	movs	r3, #4
   83284:	8193      	strh	r3, [r2, #12]
			return true;
   83286:	2001      	movs	r0, #1
   83288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return XPROGProtocol_Command();
   8328c:	4b1d      	ldr	r3, [pc, #116]	; (83304 <main_setup_in_received+0x110>)
   8328e:	4798      	blx	r3
   83290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return V2Protocol_ProcessCommand();
   83294:	4b1c      	ldr	r3, [pc, #112]	; (83308 <main_setup_in_received+0x114>)
   83296:	4798      	blx	r3
   83298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_usart(USART_TARGET, true);
   8329c:	2101      	movs	r1, #1
   8329e:	481b      	ldr	r0, [pc, #108]	; (8330c <main_setup_in_received+0x118>)
   832a0:	4b1b      	ldr	r3, [pc, #108]	; (83310 <main_setup_in_received+0x11c>)
   832a2:	4798      	blx	r3
   832a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			respbuf[0] = FW_VER_MAJOR;
   832a8:	4b11      	ldr	r3, [pc, #68]	; (832f0 <main_setup_in_received+0xfc>)
   832aa:	2200      	movs	r2, #0
   832ac:	701a      	strb	r2, [r3, #0]
			respbuf[1] = FW_VER_MINOR;
   832ae:	211e      	movs	r1, #30
   832b0:	7059      	strb	r1, [r3, #1]
			respbuf[2] = FW_VER_DEBUG;
   832b2:	709a      	strb	r2, [r3, #2]
			udd_g_ctrlreq.payload = respbuf;
   832b4:	4a0b      	ldr	r2, [pc, #44]	; (832e4 <main_setup_in_received+0xf0>)
   832b6:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 3;
   832b8:	2303      	movs	r3, #3
   832ba:	8193      	strh	r3, [r2, #12]
			return true;
   832bc:	2001      	movs	r0, #1
   832be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_scardconfig_req();
   832c2:	4b14      	ldr	r3, [pc, #80]	; (83314 <main_setup_in_received+0x120>)
   832c4:	4798      	blx	r3
   832c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_scarddata_req();
   832ca:	4b13      	ldr	r3, [pc, #76]	; (83318 <main_setup_in_received+0x124>)
   832cc:	4798      	blx	r3
   832ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ctrl_scardaux_req();
   832d2:	4b12      	ldr	r3, [pc, #72]	; (8331c <main_setup_in_received+0x128>)
   832d4:	4798      	blx	r3
   832d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   832da:	2000      	movs	r0, #0
   832dc:	4770      	bx	lr
			return false;
   832de:	2000      	movs	r0, #0
}
   832e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832e4:	20002dec 	.word	0x20002dec
   832e8:	20001e93 	.word	0x20001e93
   832ec:	000839a5 	.word	0x000839a5
   832f0:	20001e94 	.word	0x20001e94
   832f4:	20001a88 	.word	0x20001a88
   832f8:	20001a8c 	.word	0x20001a8c
   832fc:	00081d95 	.word	0x00081d95
   83300:	0008517f 	.word	0x0008517f
   83304:	00083ecd 	.word	0x00083ecd
   83308:	000829d1 	.word	0x000829d1
   8330c:	40090000 	.word	0x40090000
   83310:	000835ad 	.word	0x000835ad
   83314:	00081a31 	.word	0x00081a31
   83318:	000819f5 	.word	0x000819f5
   8331c:	00081a81 	.word	0x00081a81

00083320 <cdc_enable>:
#include "usb_protocol_cdc.h"
volatile bool enable_cdc_transfer[2] = {false, false};
	extern volatile bool usart_x_enabled[4];
bool cdc_enable(uint8_t port)
{
	enable_cdc_transfer[port] = true;
   83320:	2301      	movs	r3, #1
   83322:	4a02      	ldr	r2, [pc, #8]	; (8332c <cdc_enable+0xc>)
   83324:	5413      	strb	r3, [r2, r0]
	return true;
}
   83326:	4618      	mov	r0, r3
   83328:	4770      	bx	lr
   8332a:	bf00      	nop
   8332c:	20001a90 	.word	0x20001a90

00083330 <cdc_disable>:

void cdc_disable(uint8_t port)
{
	enable_cdc_transfer[port] = false;
   83330:	2200      	movs	r2, #0
   83332:	4b01      	ldr	r3, [pc, #4]	; (83338 <cdc_disable+0x8>)
   83334:	541a      	strb	r2, [r3, r0]
   83336:	4770      	bx	lr
   83338:	20001a90 	.word	0x20001a90

0008333c <my_callback_rx_notify>:
static uint8_t uart_buf[512] = {0};
void my_callback_rx_notify(uint8_t port)
{
	//iram_size_t udi_cdc_multi_get_nb_received_data
	
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   8333c:	4b17      	ldr	r3, [pc, #92]	; (8339c <my_callback_rx_notify+0x60>)
   8333e:	5c1b      	ldrb	r3, [r3, r0]
   83340:	b113      	cbz	r3, 83348 <my_callback_rx_notify+0xc>
   83342:	4b17      	ldr	r3, [pc, #92]	; (833a0 <my_callback_rx_notify+0x64>)
   83344:	781b      	ldrb	r3, [r3, #0]
   83346:	b903      	cbnz	r3, 8334a <my_callback_rx_notify+0xe>
   83348:	4770      	bx	lr
{
   8334a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8334e:	4680      	mov	r8, r0
		iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   83350:	4b14      	ldr	r3, [pc, #80]	; (833a4 <my_callback_rx_notify+0x68>)
   83352:	4798      	blx	r3
		while (num_char > 0) {
   83354:	4605      	mov	r5, r0
   83356:	b1f0      	cbz	r0, 83396 <my_callback_rx_notify+0x5a>
			num_char = (num_char > 512) ? 512 : num_char;
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   83358:	4e13      	ldr	r6, [pc, #76]	; (833a8 <my_callback_rx_notify+0x6c>)
   8335a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 833b0 <my_callback_rx_notify+0x74>
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
				//usart_driver_putchar(USART_TARGET, NULL, udi_cdc_multi_getc(port));
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   8335e:	4f13      	ldr	r7, [pc, #76]	; (833ac <my_callback_rx_notify+0x70>)
			num_char = (num_char > 512) ? 512 : num_char;
   83360:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   83364:	bf28      	it	cs
   83366:	f44f 7500 	movcs.w	r5, #512	; 0x200
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   8336a:	462a      	mov	r2, r5
   8336c:	4631      	mov	r1, r6
   8336e:	4640      	mov	r0, r8
   83370:	47c8      	blx	r9
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   83372:	b155      	cbz	r5, 8338a <my_callback_rx_notify+0x4e>
   83374:	2400      	movs	r4, #0
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   83376:	f8df a03c 	ldr.w	sl, [pc, #60]	; 833b4 <my_callback_rx_notify+0x78>
   8337a:	5d32      	ldrb	r2, [r6, r4]
   8337c:	2100      	movs	r1, #0
   8337e:	4638      	mov	r0, r7
   83380:	47d0      	blx	sl
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   83382:	3401      	adds	r4, #1
   83384:	b2a4      	uxth	r4, r4
   83386:	42a5      	cmp	r5, r4
   83388:	d8f7      	bhi.n	8337a <my_callback_rx_notify+0x3e>
			}
			num_char = udi_cdc_multi_get_nb_received_data(port);
   8338a:	4640      	mov	r0, r8
   8338c:	4b05      	ldr	r3, [pc, #20]	; (833a4 <my_callback_rx_notify+0x68>)
   8338e:	4798      	blx	r3
		while (num_char > 0) {
   83390:	4605      	mov	r5, r0
   83392:	2800      	cmp	r0, #0
   83394:	d1e4      	bne.n	83360 <my_callback_rx_notify+0x24>
   83396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8339a:	bf00      	nop
   8339c:	20001a90 	.word	0x20001a90
   833a0:	20002170 	.word	0x20002170
   833a4:	000803f1 	.word	0x000803f1
   833a8:	20001f5c 	.word	0x20001f5c
   833ac:	40090000 	.word	0x40090000
   833b0:	00080601 	.word	0x00080601
   833b4:	00083911 	.word	0x00083911

000833b8 <my_callback_config>:
extern tcirc_buf rx0buf, tx0buf;
extern tcirc_buf usb_usart_circ_buf;

void my_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   833b8:	4b31      	ldr	r3, [pc, #196]	; (83480 <my_callback_config+0xc8>)
   833ba:	5c1b      	ldrb	r3, [r3, r0]
   833bc:	2b00      	cmp	r3, #0
   833be:	d05e      	beq.n	8347e <my_callback_config+0xc6>
   833c0:	4b30      	ldr	r3, [pc, #192]	; (83484 <my_callback_config+0xcc>)
   833c2:	781b      	ldrb	r3, [r3, #0]
   833c4:	2b00      	cmp	r3, #0
   833c6:	d05a      	beq.n	8347e <my_callback_config+0xc6>
		sam_usart_opt_t usartopts;
		if (port != 0){
   833c8:	2800      	cmp	r0, #0
   833ca:	d158      	bne.n	8347e <my_callback_config+0xc6>
			return;
		}
		if (cfg->bDataBits < 5)
   833cc:	798b      	ldrb	r3, [r1, #6]
   833ce:	2b04      	cmp	r3, #4
   833d0:	d955      	bls.n	8347e <my_callback_config+0xc6>
			return;
		if (cfg->bCharFormat > 2)
   833d2:	790a      	ldrb	r2, [r1, #4]
   833d4:	2a02      	cmp	r2, #2
   833d6:	d852      	bhi.n	8347e <my_callback_config+0xc6>
{
   833d8:	b510      	push	{r4, lr}
   833da:	b086      	sub	sp, #24
			return;
	
		usartopts.baudrate = cfg->dwDTERate;
   833dc:	6808      	ldr	r0, [r1, #0]
   833de:	9000      	str	r0, [sp, #0]
		usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   833e0:	2000      	movs	r0, #0
   833e2:	9004      	str	r0, [sp, #16]
		usartopts.stop_bits = ((uint32_t)cfg->bCharFormat) << 12;
   833e4:	0312      	lsls	r2, r2, #12
   833e6:	9203      	str	r2, [sp, #12]
		usartopts.char_length = ((uint32_t)cfg->bDataBits - 5) << 6;
   833e8:	3b05      	subs	r3, #5
   833ea:	019b      	lsls	r3, r3, #6
   833ec:	9301      	str	r3, [sp, #4]
		switch(cfg->bParityType) {
   833ee:	794b      	ldrb	r3, [r1, #5]
   833f0:	2b04      	cmp	r3, #4
   833f2:	d833      	bhi.n	8345c <my_callback_config+0xa4>
   833f4:	e8df f003 	tbb	[pc, r3]
   833f8:	3b383403 	.word	0x3b383403
   833fc:	3f          	.byte	0x3f
   833fd:	00          	.byte	0x00
			case CDC_PAR_NONE:
			usartopts.parity_type = US_MR_PAR_NO;
   833fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83402:	9302      	str	r3, [sp, #8]
   83404:	200d      	movs	r0, #13
   83406:	4b20      	ldr	r3, [pc, #128]	; (83488 <my_callback_config+0xd0>)
   83408:	4798      	blx	r3
			return;
		}
		if (port == 0)
		{
			sysclk_enable_peripheral_clock(ID_USART0);
			init_circ_buf(&usb_usart_circ_buf);
   8340a:	4820      	ldr	r0, [pc, #128]	; (8348c <my_callback_config+0xd4>)
   8340c:	4c20      	ldr	r4, [pc, #128]	; (83490 <my_callback_config+0xd8>)
   8340e:	47a0      	blx	r4
			init_circ_buf(&tx0buf);
   83410:	4820      	ldr	r0, [pc, #128]	; (83494 <my_callback_config+0xdc>)
   83412:	47a0      	blx	r4
			init_circ_buf(&rx0buf);
   83414:	4820      	ldr	r0, [pc, #128]	; (83498 <my_callback_config+0xe0>)
   83416:	47a0      	blx	r4
			usart_init_rs232(USART0, &usartopts,  sysclk_get_cpu_hz());
   83418:	4c20      	ldr	r4, [pc, #128]	; (8349c <my_callback_config+0xe4>)
   8341a:	4a21      	ldr	r2, [pc, #132]	; (834a0 <my_callback_config+0xe8>)
   8341c:	4669      	mov	r1, sp
   8341e:	4620      	mov	r0, r4
   83420:	4b20      	ldr	r3, [pc, #128]	; (834a4 <my_callback_config+0xec>)
   83422:	4798      	blx	r3
			
			usart_enable_rx(USART0);
   83424:	4620      	mov	r0, r4
   83426:	4b20      	ldr	r3, [pc, #128]	; (834a8 <my_callback_config+0xf0>)
   83428:	4798      	blx	r3
			usart_enable_tx(USART0);
   8342a:	4620      	mov	r0, r4
   8342c:	4b1f      	ldr	r3, [pc, #124]	; (834ac <my_callback_config+0xf4>)
   8342e:	4798      	blx	r3
			
			usart_enable_interrupt(USART0, UART_IER_RXRDY);
   83430:	2101      	movs	r1, #1
   83432:	4620      	mov	r0, r4
   83434:	4b1e      	ldr	r3, [pc, #120]	; (834b0 <my_callback_config+0xf8>)
   83436:	4798      	blx	r3
			
			gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   83438:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8343c:	2013      	movs	r0, #19
   8343e:	4c1d      	ldr	r4, [pc, #116]	; (834b4 <my_callback_config+0xfc>)
   83440:	47a0      	blx	r4
			gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   83442:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83446:	2012      	movs	r0, #18
   83448:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8344a:	4b1b      	ldr	r3, [pc, #108]	; (834b8 <my_callback_config+0x100>)
   8344c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83450:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83454:	2150      	movs	r1, #80	; 0x50
   83456:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8345a:	601a      	str	r2, [r3, #0]
			irq_register_handler(USART0_IRQn, 5);
		}
	}
		
   8345c:	b006      	add	sp, #24
   8345e:	bd10      	pop	{r4, pc}
			usartopts.parity_type = US_MR_PAR_ODD;
   83460:	f44f 7300 	mov.w	r3, #512	; 0x200
   83464:	9302      	str	r3, [sp, #8]
			break;
   83466:	e7cd      	b.n	83404 <my_callback_config+0x4c>
			usartopts.parity_type = US_MR_PAR_EVEN;
   83468:	2300      	movs	r3, #0
   8346a:	9302      	str	r3, [sp, #8]
			break;
   8346c:	e7ca      	b.n	83404 <my_callback_config+0x4c>
			usartopts.parity_type = US_MR_PAR_MARK;
   8346e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83472:	9302      	str	r3, [sp, #8]
			break;
   83474:	e7c6      	b.n	83404 <my_callback_config+0x4c>
			usartopts.parity_type = US_MR_PAR_SPACE;
   83476:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8347a:	9302      	str	r3, [sp, #8]
			break;
   8347c:	e7c2      	b.n	83404 <my_callback_config+0x4c>
   8347e:	4770      	bx	lr
   83480:	20001a90 	.word	0x20001a90
   83484:	20002170 	.word	0x20002170
   83488:	00085515 	.word	0x00085515
   8348c:	200029b0 	.word	0x200029b0
   83490:	00081f01 	.word	0x00081f01
   83494:	20002d00 	.word	0x20002d00
   83498:	20002734 	.word	0x20002734
   8349c:	40090000 	.word	0x40090000
   834a0:	05b8d800 	.word	0x05b8d800
   834a4:	00086ae5 	.word	0x00086ae5
   834a8:	00086de9 	.word	0x00086de9
   834ac:	00086dd9 	.word	0x00086dd9
   834b0:	00086df5 	.word	0x00086df5
   834b4:	000851d1 	.word	0x000851d1
   834b8:	e000e100 	.word	0xe000e100

000834bc <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   834bc:	4b01      	ldr	r3, [pc, #4]	; (834c4 <set_timeout+0x8>)
   834be:	6018      	str	r0, [r3, #0]
   834c0:	4770      	bx	lr
   834c2:	bf00      	nop
   834c4:	200005a8 	.word	0x200005a8

000834c8 <setup_timeoutcnt>:
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}

void setup_timeoutcnt(void)
{
   834c8:	b538      	push	{r3, r4, r5, lr}
   834ca:	2016      	movs	r0, #22
   834cc:	4b10      	ldr	r3, [pc, #64]	; (83510 <setup_timeoutcnt+0x48>)
   834ce:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   834d0:	4b10      	ldr	r3, [pc, #64]	; (83514 <setup_timeoutcnt+0x4c>)
   834d2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   834d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   834da:	2510      	movs	r5, #16
   834dc:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   834e0:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   834e2:	4c0d      	ldr	r4, [pc, #52]	; (83518 <setup_timeoutcnt+0x50>)
   834e4:	f24c 0201 	movw	r2, #49153	; 0xc001
   834e8:	2100      	movs	r1, #0
   834ea:	4620      	mov	r0, r4
   834ec:	4b0b      	ldr	r3, [pc, #44]	; (8351c <setup_timeoutcnt+0x54>)
   834ee:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   834f0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   834f4:	2100      	movs	r1, #0
   834f6:	4620      	mov	r0, r4
   834f8:	4b09      	ldr	r3, [pc, #36]	; (83520 <setup_timeoutcnt+0x58>)
   834fa:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   834fc:	462a      	mov	r2, r5
   834fe:	2100      	movs	r1, #0
   83500:	4620      	mov	r0, r4
   83502:	4b08      	ldr	r3, [pc, #32]	; (83524 <setup_timeoutcnt+0x5c>)
   83504:	4798      	blx	r3
	
	timerEnabled = true;
   83506:	2201      	movs	r2, #1
   83508:	4b07      	ldr	r3, [pc, #28]	; (83528 <setup_timeoutcnt+0x60>)
   8350a:	701a      	strb	r2, [r3, #0]
   8350c:	bd38      	pop	{r3, r4, r5, pc}
   8350e:	bf00      	nop
   83510:	00085515 	.word	0x00085515
   83514:	e000e100 	.word	0xe000e100
   83518:	40080000 	.word	0x40080000
   8351c:	00081e71 	.word	0x00081e71
   83520:	00081e99 	.word	0x00081e99
   83524:	00081ea1 	.word	0x00081ea1
   83528:	2000215c 	.word	0x2000215c

0008352c <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   8352c:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   8352e:	4b0a      	ldr	r3, [pc, #40]	; (83558 <start_timeoutcnt+0x2c>)
   83530:	781b      	ldrb	r3, [r3, #0]
   83532:	b16b      	cbz	r3, 83550 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83534:	4c09      	ldr	r4, [pc, #36]	; (8355c <start_timeoutcnt+0x30>)
   83536:	2100      	movs	r1, #0
   83538:	4620      	mov	r0, r4
   8353a:	4b09      	ldr	r3, [pc, #36]	; (83560 <start_timeoutcnt+0x34>)
   8353c:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   8353e:	4b09      	ldr	r3, [pc, #36]	; (83564 <start_timeoutcnt+0x38>)
   83540:	681a      	ldr	r2, [r3, #0]
   83542:	4b09      	ldr	r3, [pc, #36]	; (83568 <start_timeoutcnt+0x3c>)
   83544:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   83546:	2100      	movs	r1, #0
   83548:	4620      	mov	r0, r4
   8354a:	4b08      	ldr	r3, [pc, #32]	; (8356c <start_timeoutcnt+0x40>)
   8354c:	4798      	blx	r3
   8354e:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   83550:	4b07      	ldr	r3, [pc, #28]	; (83570 <start_timeoutcnt+0x44>)
   83552:	4798      	blx	r3
   83554:	e7ee      	b.n	83534 <start_timeoutcnt+0x8>
   83556:	bf00      	nop
   83558:	2000215c 	.word	0x2000215c
   8355c:	40080000 	.word	0x40080000
   83560:	00081e91 	.word	0x00081e91
   83564:	200005a8 	.word	0x200005a8
   83568:	2000265c 	.word	0x2000265c
   8356c:	00081e89 	.word	0x00081e89
   83570:	000834c9 	.word	0x000834c9

00083574 <stop_timeoutcnt>:
}

void stop_timeoutcnt(void)
{
   83574:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83576:	2100      	movs	r1, #0
   83578:	4801      	ldr	r0, [pc, #4]	; (83580 <stop_timeoutcnt+0xc>)
   8357a:	4b02      	ldr	r3, [pc, #8]	; (83584 <stop_timeoutcnt+0x10>)
   8357c:	4798      	blx	r3
   8357e:	bd08      	pop	{r3, pc}
   83580:	40080000 	.word	0x40080000
   83584:	00081e91 	.word	0x00081e91

00083588 <TC0_Handler>:
}

ISR(TC0_Handler)
{
   83588:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   8358a:	4b05      	ldr	r3, [pc, #20]	; (835a0 <TC0_Handler+0x18>)
   8358c:	681b      	ldr	r3, [r3, #0]
   8358e:	b113      	cbz	r3, 83596 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   83590:	3b01      	subs	r3, #1
   83592:	4a03      	ldr	r2, [pc, #12]	; (835a0 <TC0_Handler+0x18>)
   83594:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   83596:	2100      	movs	r1, #0
   83598:	4802      	ldr	r0, [pc, #8]	; (835a4 <TC0_Handler+0x1c>)
   8359a:	4b03      	ldr	r3, [pc, #12]	; (835a8 <TC0_Handler+0x20>)
   8359c:	4798      	blx	r3
   8359e:	bd08      	pop	{r3, pc}
   835a0:	2000265c 	.word	0x2000265c
   835a4:	40080000 	.word	0x40080000
   835a8:	00081ea9 	.word	0x00081ea9

000835ac <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   835ac:	b570      	push	{r4, r5, r6, lr}
   835ae:	b088      	sub	sp, #32
   835b0:	4605      	mov	r5, r0
   835b2:	460c      	mov	r4, r1
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   835b4:	4b94      	ldr	r3, [pc, #592]	; (83808 <ctrl_usart+0x25c>)
   835b6:	789b      	ldrb	r3, [r3, #2]
   835b8:	3b10      	subs	r3, #16
   835ba:	2b08      	cmp	r3, #8
   835bc:	f200 8190 	bhi.w	838e0 <ctrl_usart+0x334>
   835c0:	e8df f013 	tbh	[pc, r3, lsl #1]
   835c4:	009d0009 	.word	0x009d0009
   835c8:	018e00de 	.word	0x018e00de
   835cc:	018e00ec 	.word	0x018e00ec
   835d0:	018e018e 	.word	0x018e018e
   835d4:	015a      	.short	0x015a
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   835d6:	b131      	cbz	r1, 835e6 <ctrl_usart+0x3a>
				if (udd_g_ctrlreq.req.wLength == 4){
   835d8:	4b8b      	ldr	r3, [pc, #556]	; (83808 <ctrl_usart+0x25c>)
   835da:	88dc      	ldrh	r4, [r3, #6]
   835dc:	2c04      	cmp	r4, #4
   835de:	bf14      	ite	ne
   835e0:	2000      	movne	r0, #0
   835e2:	2001      	moveq	r0, #1
   835e4:	e0ce      	b.n	83784 <ctrl_usart+0x1d8>
					word2buf(ctrlbuffer, baud);
					*/
					return true;
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   835e6:	4b88      	ldr	r3, [pc, #544]	; (83808 <ctrl_usart+0x25c>)
   835e8:	88db      	ldrh	r3, [r3, #6]
   835ea:	2b07      	cmp	r3, #7
   835ec:	f040 8082 	bne.w	836f4 <ctrl_usart+0x148>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   835f0:	4b85      	ldr	r3, [pc, #532]	; (83808 <ctrl_usart+0x25c>)
   835f2:	689b      	ldr	r3, [r3, #8]
   835f4:	681a      	ldr	r2, [r3, #0]
					
						usartopts.baudrate = baud;
   835f6:	9202      	str	r2, [sp, #8]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   835f8:	791a      	ldrb	r2, [r3, #4]
   835fa:	2a01      	cmp	r2, #1
   835fc:	d00f      	beq.n	8361e <ctrl_usart+0x72>
   835fe:	b122      	cbz	r2, 8360a <ctrl_usart+0x5e>
   83600:	2a02      	cmp	r2, #2
   83602:	d010      	beq.n	83626 <ctrl_usart+0x7a>
								break;
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
								break;
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   83604:	2200      	movs	r2, #0
   83606:	9205      	str	r2, [sp, #20]
   83608:	e001      	b.n	8360e <ctrl_usart+0x62>
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   8360a:	2200      	movs	r2, #0
   8360c:	9205      	str	r2, [sp, #20]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   8360e:	795a      	ldrb	r2, [r3, #5]
   83610:	2a04      	cmp	r2, #4
   83612:	d828      	bhi.n	83666 <ctrl_usart+0xba>
   83614:	e8df f002 	tbb	[pc, r2]
   83618:	1f1c180b 	.word	0x1f1c180b
   8361c:	23          	.byte	0x23
   8361d:	00          	.byte	0x00
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   8361e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83622:	9205      	str	r2, [sp, #20]
								break;
   83624:	e7f3      	b.n	8360e <ctrl_usart+0x62>
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   83626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8362a:	9205      	str	r2, [sp, #20]
								break;
   8362c:	e7ef      	b.n	8360e <ctrl_usart+0x62>
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   8362e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83632:	9204      	str	r2, [sp, #16]
							default:
								usartopts.parity_type = US_MR_PAR_NO;
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   83634:	799b      	ldrb	r3, [r3, #6]
   83636:	2b06      	cmp	r3, #6
   83638:	d02d      	beq.n	83696 <ctrl_usart+0xea>
   8363a:	2b07      	cmp	r3, #7
   8363c:	d02e      	beq.n	8369c <ctrl_usart+0xf0>
   8363e:	2b05      	cmp	r3, #5
   83640:	d015      	beq.n	8366e <ctrl_usart+0xc2>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
								break;					
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   83642:	23c0      	movs	r3, #192	; 0xc0
   83644:	9303      	str	r3, [sp, #12]
   83646:	e014      	b.n	83672 <ctrl_usart+0xc6>
								usartopts.parity_type = US_MR_PAR_ODD;
   83648:	f44f 7200 	mov.w	r2, #512	; 0x200
   8364c:	9204      	str	r2, [sp, #16]
								break;
   8364e:	e7f1      	b.n	83634 <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_EVEN;
   83650:	2200      	movs	r2, #0
   83652:	9204      	str	r2, [sp, #16]
								break;
   83654:	e7ee      	b.n	83634 <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_MARK;
   83656:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8365a:	9204      	str	r2, [sp, #16]
								break;
   8365c:	e7ea      	b.n	83634 <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_SPACE;
   8365e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83662:	9204      	str	r2, [sp, #16]
								break;							
   83664:	e7e6      	b.n	83634 <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_NO;
   83666:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8366a:	9204      	str	r2, [sp, #16]
   8366c:	e7e2      	b.n	83634 <ctrl_usart+0x88>
								usartopts.char_length = US_MR_CHRL_5_BIT;
   8366e:	2300      	movs	r3, #0
   83670:	9303      	str	r3, [sp, #12]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   83672:	2300      	movs	r3, #0
   83674:	9306      	str	r3, [sp, #24]

						if (usart == USART0)
   83676:	4b65      	ldr	r3, [pc, #404]	; (8380c <ctrl_usart+0x260>)
   83678:	429d      	cmp	r5, r3
   8367a:	d012      	beq.n	836a2 <ctrl_usart+0xf6>
							init_circ_buf(&usb_usart_circ_buf);
							init_circ_buf(&tx0buf);
							init_circ_buf(&rx0buf);
							usart_x_enabled[0] = true;
							printf("Enabling USART0\n");
						} else if (usart == USART1)
   8367c:	4b64      	ldr	r3, [pc, #400]	; (83810 <ctrl_usart+0x264>)
   8367e:	429d      	cmp	r5, r3
   83680:	d020      	beq.n	836c4 <ctrl_usart+0x118>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
							init_circ_buf(&tx1buf);
							init_circ_buf(&rx1buf);
							usart_x_enabled[1] = true;
						} else if (usart == USART2)
   83682:	4b64      	ldr	r3, [pc, #400]	; (83814 <ctrl_usart+0x268>)
   83684:	429d      	cmp	r5, r3
   83686:	d029      	beq.n	836dc <ctrl_usart+0x130>
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
							usart_x_enabled[3] = true;
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   83688:	4a63      	ldr	r2, [pc, #396]	; (83818 <ctrl_usart+0x26c>)
   8368a:	a902      	add	r1, sp, #8
   8368c:	4628      	mov	r0, r5
   8368e:	4b63      	ldr	r3, [pc, #396]	; (8381c <ctrl_usart+0x270>)
   83690:	4798      	blx	r3
				}
			}
			break;		
	}
	
	return false;
   83692:	4620      	mov	r0, r4
   83694:	e076      	b.n	83784 <ctrl_usart+0x1d8>
								usartopts.char_length = US_MR_CHRL_6_BIT;
   83696:	2340      	movs	r3, #64	; 0x40
   83698:	9303      	str	r3, [sp, #12]
								break;
   8369a:	e7ea      	b.n	83672 <ctrl_usart+0xc6>
								usartopts.char_length = US_MR_CHRL_7_BIT;
   8369c:	2380      	movs	r3, #128	; 0x80
   8369e:	9303      	str	r3, [sp, #12]
								break;					
   836a0:	e7e7      	b.n	83672 <ctrl_usart+0xc6>
   836a2:	200d      	movs	r0, #13
   836a4:	4b5e      	ldr	r3, [pc, #376]	; (83820 <ctrl_usart+0x274>)
   836a6:	4798      	blx	r3
							init_circ_buf(&usb_usart_circ_buf);
   836a8:	485e      	ldr	r0, [pc, #376]	; (83824 <ctrl_usart+0x278>)
   836aa:	4e5f      	ldr	r6, [pc, #380]	; (83828 <ctrl_usart+0x27c>)
   836ac:	47b0      	blx	r6
							init_circ_buf(&tx0buf);
   836ae:	485f      	ldr	r0, [pc, #380]	; (8382c <ctrl_usart+0x280>)
   836b0:	47b0      	blx	r6
							init_circ_buf(&rx0buf);
   836b2:	485f      	ldr	r0, [pc, #380]	; (83830 <ctrl_usart+0x284>)
   836b4:	47b0      	blx	r6
							usart_x_enabled[0] = true;
   836b6:	2201      	movs	r2, #1
   836b8:	4b5e      	ldr	r3, [pc, #376]	; (83834 <ctrl_usart+0x288>)
   836ba:	701a      	strb	r2, [r3, #0]
							printf("Enabling USART0\n");
   836bc:	485e      	ldr	r0, [pc, #376]	; (83838 <ctrl_usart+0x28c>)
   836be:	4b5f      	ldr	r3, [pc, #380]	; (8383c <ctrl_usart+0x290>)
   836c0:	4798      	blx	r3
   836c2:	e7e1      	b.n	83688 <ctrl_usart+0xdc>
   836c4:	200e      	movs	r0, #14
   836c6:	4b56      	ldr	r3, [pc, #344]	; (83820 <ctrl_usart+0x274>)
   836c8:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   836ca:	485d      	ldr	r0, [pc, #372]	; (83840 <ctrl_usart+0x294>)
   836cc:	4e56      	ldr	r6, [pc, #344]	; (83828 <ctrl_usart+0x27c>)
   836ce:	47b0      	blx	r6
							init_circ_buf(&rx1buf);
   836d0:	485c      	ldr	r0, [pc, #368]	; (83844 <ctrl_usart+0x298>)
   836d2:	47b0      	blx	r6
							usart_x_enabled[1] = true;
   836d4:	2201      	movs	r2, #1
   836d6:	4b57      	ldr	r3, [pc, #348]	; (83834 <ctrl_usart+0x288>)
   836d8:	705a      	strb	r2, [r3, #1]
   836da:	e7d5      	b.n	83688 <ctrl_usart+0xdc>
   836dc:	200f      	movs	r0, #15
   836de:	4b50      	ldr	r3, [pc, #320]	; (83820 <ctrl_usart+0x274>)
   836e0:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   836e2:	4859      	ldr	r0, [pc, #356]	; (83848 <ctrl_usart+0x29c>)
   836e4:	4e50      	ldr	r6, [pc, #320]	; (83828 <ctrl_usart+0x27c>)
   836e6:	47b0      	blx	r6
							init_circ_buf(&rx2buf);
   836e8:	4858      	ldr	r0, [pc, #352]	; (8384c <ctrl_usart+0x2a0>)
   836ea:	47b0      	blx	r6
							usart_x_enabled[2] = true;
   836ec:	2201      	movs	r2, #1
   836ee:	4b51      	ldr	r3, [pc, #324]	; (83834 <ctrl_usart+0x288>)
   836f0:	709a      	strb	r2, [r3, #2]
   836f2:	e7c9      	b.n	83688 <ctrl_usart+0xdc>
						printf("ERR: Invalid USART Configuration packet?\n");
   836f4:	4856      	ldr	r0, [pc, #344]	; (83850 <ctrl_usart+0x2a4>)
   836f6:	4b51      	ldr	r3, [pc, #324]	; (8383c <ctrl_usart+0x290>)
   836f8:	4798      	blx	r3
	return false;
   836fa:	4620      	mov	r0, r4
   836fc:	e042      	b.n	83784 <ctrl_usart+0x1d8>
			if (directionIn == false){
   836fe:	b109      	cbz	r1, 83704 <ctrl_usart+0x158>
	return false;
   83700:	2000      	movs	r0, #0
   83702:	e03f      	b.n	83784 <ctrl_usart+0x1d8>
				usart_enable_rx(usart);
   83704:	4b53      	ldr	r3, [pc, #332]	; (83854 <ctrl_usart+0x2a8>)
   83706:	4798      	blx	r3
				usart_enable_tx(usart);
   83708:	4628      	mov	r0, r5
   8370a:	4b53      	ldr	r3, [pc, #332]	; (83858 <ctrl_usart+0x2ac>)
   8370c:	4798      	blx	r3
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   8370e:	2101      	movs	r1, #1
   83710:	4628      	mov	r0, r5
   83712:	4b52      	ldr	r3, [pc, #328]	; (8385c <ctrl_usart+0x2b0>)
   83714:	4798      	blx	r3
				if (usart == USART0){
   83716:	4b3d      	ldr	r3, [pc, #244]	; (8380c <ctrl_usart+0x260>)
   83718:	429d      	cmp	r5, r3
   8371a:	d007      	beq.n	8372c <ctrl_usart+0x180>
				} else if (usart == USART1) {
   8371c:	4b3c      	ldr	r3, [pc, #240]	; (83810 <ctrl_usart+0x264>)
   8371e:	429d      	cmp	r5, r3
   83720:	d018      	beq.n	83754 <ctrl_usart+0x1a8>
				} else if (usart == USART2) {
   83722:	4b3c      	ldr	r3, [pc, #240]	; (83814 <ctrl_usart+0x268>)
   83724:	429d      	cmp	r5, r3
   83726:	d020      	beq.n	8376a <ctrl_usart+0x1be>
	return false;
   83728:	4620      	mov	r0, r4
   8372a:	e02b      	b.n	83784 <ctrl_usart+0x1d8>
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   8372c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83730:	2013      	movs	r0, #19
   83732:	4d4b      	ldr	r5, [pc, #300]	; (83860 <ctrl_usart+0x2b4>)
   83734:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   83736:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8373a:	2012      	movs	r0, #18
   8373c:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8373e:	4b49      	ldr	r3, [pc, #292]	; (83864 <ctrl_usart+0x2b8>)
   83740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83744:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83748:	2150      	movs	r1, #80	; 0x50
   8374a:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8374e:	601a      	str	r2, [r3, #0]
	return false;
   83750:	4620      	mov	r0, r4
   83752:	e017      	b.n	83784 <ctrl_usart+0x1d8>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83754:	4b43      	ldr	r3, [pc, #268]	; (83864 <ctrl_usart+0x2b8>)
   83756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8375a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8375e:	2150      	movs	r1, #80	; 0x50
   83760:	f883 130e 	strb.w	r1, [r3, #782]	; 0x30e
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83764:	601a      	str	r2, [r3, #0]
   83766:	4620      	mov	r0, r4
   83768:	e00c      	b.n	83784 <ctrl_usart+0x1d8>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8376a:	4b3e      	ldr	r3, [pc, #248]	; (83864 <ctrl_usart+0x2b8>)
   8376c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83770:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83774:	2150      	movs	r1, #80	; 0x50
   83776:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8377a:	601a      	str	r2, [r3, #0]
   8377c:	4620      	mov	r0, r4
   8377e:	e001      	b.n	83784 <ctrl_usart+0x1d8>
			if (directionIn == false){
   83780:	b111      	cbz	r1, 83788 <ctrl_usart+0x1dc>
	return false;
   83782:	2000      	movs	r0, #0
}
   83784:	b008      	add	sp, #32
   83786:	bd70      	pop	{r4, r5, r6, pc}
				usart_disable_rx(usart);
   83788:	4e37      	ldr	r6, [pc, #220]	; (83868 <ctrl_usart+0x2bc>)
   8378a:	47b0      	blx	r6
				usart_disable_rx(usart);
   8378c:	4628      	mov	r0, r5
   8378e:	47b0      	blx	r6
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   83790:	2103      	movs	r1, #3
   83792:	4628      	mov	r0, r5
   83794:	4b35      	ldr	r3, [pc, #212]	; (8386c <ctrl_usart+0x2c0>)
   83796:	4798      	blx	r3
	return false;
   83798:	4620      	mov	r0, r4
   8379a:	e7f3      	b.n	83784 <ctrl_usart+0x1d8>
			if (directionIn){
   8379c:	2900      	cmp	r1, #0
   8379e:	f000 80a1 	beq.w	838e4 <ctrl_usart+0x338>
				if (udd_g_ctrlreq.req.wLength == 4){
   837a2:	4b19      	ldr	r3, [pc, #100]	; (83808 <ctrl_usart+0x25c>)
   837a4:	88db      	ldrh	r3, [r3, #6]
   837a6:	2b04      	cmp	r3, #4
   837a8:	d001      	beq.n	837ae <ctrl_usart+0x202>
	return false;
   837aa:	2000      	movs	r0, #0
   837ac:	e7ea      	b.n	83784 <ctrl_usart+0x1d8>
					udd_g_ctrlreq.payload = ctrlbuffer;
   837ae:	4b16      	ldr	r3, [pc, #88]	; (83808 <ctrl_usart+0x25c>)
   837b0:	4a2f      	ldr	r2, [pc, #188]	; (83870 <ctrl_usart+0x2c4>)
   837b2:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   837b4:	2204      	movs	r2, #4
   837b6:	819a      	strh	r2, [r3, #12]
					if (usart == USART0){
   837b8:	4b14      	ldr	r3, [pc, #80]	; (8380c <ctrl_usart+0x260>)
   837ba:	4298      	cmp	r0, r3
   837bc:	d014      	beq.n	837e8 <ctrl_usart+0x23c>
					} else if (usart == USART1){
   837be:	4b14      	ldr	r3, [pc, #80]	; (83810 <ctrl_usart+0x264>)
   837c0:	4298      	cmp	r0, r3
   837c2:	d016      	beq.n	837f2 <ctrl_usart+0x246>
					} else if (usart == USART2){
   837c4:	4b13      	ldr	r3, [pc, #76]	; (83814 <ctrl_usart+0x268>)
   837c6:	4298      	cmp	r0, r3
   837c8:	d018      	beq.n	837fc <ctrl_usart+0x250>
					word2buf(ctrlbuffer, cnt);
   837ca:	4b29      	ldr	r3, [pc, #164]	; (83870 <ctrl_usart+0x2c4>)
   837cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   837d0:	701a      	strb	r2, [r3, #0]
   837d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   837d6:	705a      	strb	r2, [r3, #1]
   837d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   837dc:	709a      	strb	r2, [r3, #2]
   837de:	f89d 2007 	ldrb.w	r2, [sp, #7]
   837e2:	70da      	strb	r2, [r3, #3]
					return true;
   837e4:	4620      	mov	r0, r4
   837e6:	e7cd      	b.n	83784 <ctrl_usart+0x1d8>
						cnt = circ_buf_count(&rx0buf);
   837e8:	4811      	ldr	r0, [pc, #68]	; (83830 <ctrl_usart+0x284>)
   837ea:	4b22      	ldr	r3, [pc, #136]	; (83874 <ctrl_usart+0x2c8>)
   837ec:	4798      	blx	r3
   837ee:	9001      	str	r0, [sp, #4]
   837f0:	e7eb      	b.n	837ca <ctrl_usart+0x21e>
						cnt = circ_buf_count(&rx1buf);
   837f2:	4814      	ldr	r0, [pc, #80]	; (83844 <ctrl_usart+0x298>)
   837f4:	4b1f      	ldr	r3, [pc, #124]	; (83874 <ctrl_usart+0x2c8>)
   837f6:	4798      	blx	r3
   837f8:	9001      	str	r0, [sp, #4]
   837fa:	e7e6      	b.n	837ca <ctrl_usart+0x21e>
						cnt = circ_buf_count(&rx2buf);
   837fc:	4813      	ldr	r0, [pc, #76]	; (8384c <ctrl_usart+0x2a0>)
   837fe:	4b1d      	ldr	r3, [pc, #116]	; (83874 <ctrl_usart+0x2c8>)
   83800:	4798      	blx	r3
   83802:	9001      	str	r0, [sp, #4]
   83804:	e7e1      	b.n	837ca <ctrl_usart+0x21e>
   83806:	bf00      	nop
   83808:	20002dec 	.word	0x20002dec
   8380c:	40090000 	.word	0x40090000
   83810:	40094000 	.word	0x40094000
   83814:	40098000 	.word	0x40098000
   83818:	05b8d800 	.word	0x05b8d800
   8381c:	00086ae5 	.word	0x00086ae5
   83820:	00085515 	.word	0x00085515
   83824:	200029b0 	.word	0x200029b0
   83828:	00081f01 	.word	0x00081f01
   8382c:	20002d00 	.word	0x20002d00
   83830:	20002734 	.word	0x20002734
   83834:	20002170 	.word	0x20002170
   83838:	0008d9cc 	.word	0x0008d9cc
   8383c:	00087835 	.word	0x00087835
   83840:	200028dc 	.word	0x200028dc
   83844:	20002c2c 	.word	0x20002c2c
   83848:	20002660 	.word	0x20002660
   8384c:	20002b58 	.word	0x20002b58
   83850:	0008d9e0 	.word	0x0008d9e0
   83854:	00086de9 	.word	0x00086de9
   83858:	00086dd9 	.word	0x00086dd9
   8385c:	00086df5 	.word	0x00086df5
   83860:	000851d1 	.word	0x000851d1
   83864:	e000e100 	.word	0xe000e100
   83868:	00086def 	.word	0x00086def
   8386c:	00086df9 	.word	0x00086df9
   83870:	20002160 	.word	0x20002160
   83874:	00081fb5 	.word	0x00081fb5
			if (directionIn){
   83878:	2900      	cmp	r1, #0
   8387a:	d035      	beq.n	838e8 <ctrl_usart+0x33c>
				if (udd_g_ctrlreq.req.wLength == 4){
   8387c:	4b1b      	ldr	r3, [pc, #108]	; (838ec <ctrl_usart+0x340>)
   8387e:	88db      	ldrh	r3, [r3, #6]
   83880:	2b04      	cmp	r3, #4
   83882:	d001      	beq.n	83888 <ctrl_usart+0x2dc>
	return false;
   83884:	2000      	movs	r0, #0
   83886:	e77d      	b.n	83784 <ctrl_usart+0x1d8>
					udd_g_ctrlreq.payload = ctrlbuffer;
   83888:	4b18      	ldr	r3, [pc, #96]	; (838ec <ctrl_usart+0x340>)
   8388a:	4a19      	ldr	r2, [pc, #100]	; (838f0 <ctrl_usart+0x344>)
   8388c:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   8388e:	2204      	movs	r2, #4
   83890:	819a      	strh	r2, [r3, #12]
					if (usart == USART0){
   83892:	4b18      	ldr	r3, [pc, #96]	; (838f4 <ctrl_usart+0x348>)
   83894:	4298      	cmp	r0, r3
   83896:	d014      	beq.n	838c2 <ctrl_usart+0x316>
					} else if (usart == USART1){
   83898:	4b17      	ldr	r3, [pc, #92]	; (838f8 <ctrl_usart+0x34c>)
   8389a:	4298      	cmp	r0, r3
   8389c:	d016      	beq.n	838cc <ctrl_usart+0x320>
					} else if (usart == USART2){
   8389e:	4b17      	ldr	r3, [pc, #92]	; (838fc <ctrl_usart+0x350>)
   838a0:	4298      	cmp	r0, r3
   838a2:	d018      	beq.n	838d6 <ctrl_usart+0x32a>
					word2buf(ctrlbuffer, cnt);
   838a4:	4b12      	ldr	r3, [pc, #72]	; (838f0 <ctrl_usart+0x344>)
   838a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   838aa:	701a      	strb	r2, [r3, #0]
   838ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
   838b0:	705a      	strb	r2, [r3, #1]
   838b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   838b6:	709a      	strb	r2, [r3, #2]
   838b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   838bc:	70da      	strb	r2, [r3, #3]
					return true;
   838be:	4620      	mov	r0, r4
   838c0:	e760      	b.n	83784 <ctrl_usart+0x1d8>
						cnt = circ_buf_count(&tx0buf);
   838c2:	480f      	ldr	r0, [pc, #60]	; (83900 <ctrl_usart+0x354>)
   838c4:	4b0f      	ldr	r3, [pc, #60]	; (83904 <ctrl_usart+0x358>)
   838c6:	4798      	blx	r3
   838c8:	9001      	str	r0, [sp, #4]
   838ca:	e7eb      	b.n	838a4 <ctrl_usart+0x2f8>
						cnt = circ_buf_count(&tx1buf);
   838cc:	480e      	ldr	r0, [pc, #56]	; (83908 <ctrl_usart+0x35c>)
   838ce:	4b0d      	ldr	r3, [pc, #52]	; (83904 <ctrl_usart+0x358>)
   838d0:	4798      	blx	r3
   838d2:	9001      	str	r0, [sp, #4]
   838d4:	e7e6      	b.n	838a4 <ctrl_usart+0x2f8>
						cnt = circ_buf_count(&tx2buf);
   838d6:	480d      	ldr	r0, [pc, #52]	; (8390c <ctrl_usart+0x360>)
   838d8:	4b0a      	ldr	r3, [pc, #40]	; (83904 <ctrl_usart+0x358>)
   838da:	4798      	blx	r3
   838dc:	9001      	str	r0, [sp, #4]
   838de:	e7e1      	b.n	838a4 <ctrl_usart+0x2f8>
	return false;
   838e0:	2000      	movs	r0, #0
   838e2:	e74f      	b.n	83784 <ctrl_usart+0x1d8>
   838e4:	4608      	mov	r0, r1
   838e6:	e74d      	b.n	83784 <ctrl_usart+0x1d8>
   838e8:	4608      	mov	r0, r1
   838ea:	e74b      	b.n	83784 <ctrl_usart+0x1d8>
   838ec:	20002dec 	.word	0x20002dec
   838f0:	20002160 	.word	0x20002160
   838f4:	40090000 	.word	0x40090000
   838f8:	40094000 	.word	0x40094000
   838fc:	40098000 	.word	0x40098000
   83900:	20002d00 	.word	0x20002d00
   83904:	00081fb5 	.word	0x00081fb5
   83908:	200028dc 	.word	0x200028dc
   8390c:	20002660 	.word	0x20002660

00083910 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   83910:	b538      	push	{r3, r4, r5, lr}
   83912:	4604      	mov	r4, r0
   83914:	4613      	mov	r3, r2
	if (txbuf == NULL){
   83916:	460d      	mov	r5, r1
   83918:	b159      	cbz	r1, 83932 <usart_driver_putchar+0x22>
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   8391a:	2200      	movs	r2, #0
   8391c:	4619      	mov	r1, r3
   8391e:	4628      	mov	r0, r5
   83920:	4b16      	ldr	r3, [pc, #88]	; (8397c <usart_driver_putchar+0x6c>)
   83922:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   83924:	4620      	mov	r0, r4
   83926:	4b16      	ldr	r3, [pc, #88]	; (83980 <usart_driver_putchar+0x70>)
   83928:	4798      	blx	r3
   8392a:	f010 0f02 	tst.w	r0, #2
   8392e:	d011      	beq.n	83954 <usart_driver_putchar+0x44>
   83930:	bd38      	pop	{r3, r4, r5, pc}
		if (usart == USART0) txbuf = &tx0buf;
   83932:	4a14      	ldr	r2, [pc, #80]	; (83984 <usart_driver_putchar+0x74>)
   83934:	4290      	cmp	r0, r2
   83936:	d009      	beq.n	8394c <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   83938:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   8393c:	4290      	cmp	r0, r2
   8393e:	d007      	beq.n	83950 <usart_driver_putchar+0x40>
		else if (usart == USART2) txbuf = &tx2buf;
   83940:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   83944:	4290      	cmp	r0, r2
   83946:	d1f3      	bne.n	83930 <usart_driver_putchar+0x20>
   83948:	4d0f      	ldr	r5, [pc, #60]	; (83988 <usart_driver_putchar+0x78>)
   8394a:	e7e6      	b.n	8391a <usart_driver_putchar+0xa>
		if (usart == USART0) txbuf = &tx0buf;
   8394c:	4d0f      	ldr	r5, [pc, #60]	; (8398c <usart_driver_putchar+0x7c>)
   8394e:	e7e4      	b.n	8391a <usart_driver_putchar+0xa>
		else if (usart == USART1) txbuf = &tx1buf;
   83950:	4d0f      	ldr	r5, [pc, #60]	; (83990 <usart_driver_putchar+0x80>)
   83952:	e7e2      	b.n	8391a <usart_driver_putchar+0xa>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
   83954:	4620      	mov	r0, r4
   83956:	4b0f      	ldr	r3, [pc, #60]	; (83994 <usart_driver_putchar+0x84>)
   83958:	4798      	blx	r3
   8395a:	f010 0f02 	tst.w	r0, #2
   8395e:	d104      	bne.n	8396a <usart_driver_putchar+0x5a>
			usart_putchar(usart, get_from_circ_buf(txbuf));
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   83960:	2102      	movs	r1, #2
   83962:	4620      	mov	r0, r4
   83964:	4b0c      	ldr	r3, [pc, #48]	; (83998 <usart_driver_putchar+0x88>)
   83966:	4798      	blx	r3
   83968:	e7e2      	b.n	83930 <usart_driver_putchar+0x20>
			usart_putchar(usart, get_from_circ_buf(txbuf));
   8396a:	4628      	mov	r0, r5
   8396c:	4b0b      	ldr	r3, [pc, #44]	; (8399c <usart_driver_putchar+0x8c>)
   8396e:	4798      	blx	r3
   83970:	4601      	mov	r1, r0
   83972:	4620      	mov	r0, r4
   83974:	4b0a      	ldr	r3, [pc, #40]	; (839a0 <usart_driver_putchar+0x90>)
   83976:	4798      	blx	r3
   83978:	e7f2      	b.n	83960 <usart_driver_putchar+0x50>
   8397a:	bf00      	nop
   8397c:	00081f0d 	.word	0x00081f0d
   83980:	00086dfd 	.word	0x00086dfd
   83984:	40090000 	.word	0x40090000
   83988:	20002660 	.word	0x20002660
   8398c:	20002d00 	.word	0x20002d00
   83990:	200028dc 	.word	0x200028dc
   83994:	00086e01 	.word	0x00086e01
   83998:	00086df5 	.word	0x00086df5
   8399c:	00081f61 	.word	0x00081f61
   839a0:	00086e39 	.word	0x00086e39

000839a4 <usart_driver_getchar>:
	}
}

uint8_t usart_driver_getchar(Usart * usart)
{
   839a4:	b508      	push	{r3, lr}
	tcirc_buf * rxbuf = NULL;	 
	if (rxbuf == NULL){
			if (usart == USART0) rxbuf = &rx0buf;
   839a6:	4b0a      	ldr	r3, [pc, #40]	; (839d0 <usart_driver_getchar+0x2c>)
   839a8:	4298      	cmp	r0, r3
   839aa:	d00b      	beq.n	839c4 <usart_driver_getchar+0x20>
			else if (usart == USART1) rxbuf = &rx1buf;
   839ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   839b0:	4298      	cmp	r0, r3
   839b2:	d009      	beq.n	839c8 <usart_driver_getchar+0x24>
			else if (usart == USART2) rxbuf = &rx2buf;
   839b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   839b8:	4298      	cmp	r0, r3
   839ba:	d001      	beq.n	839c0 <usart_driver_getchar+0x1c>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   839bc:	20ff      	movs	r0, #255	; 0xff
	}
	return get_from_circ_buf(rxbuf);
}
   839be:	bd08      	pop	{r3, pc}
			else if (usart == USART2) rxbuf = &rx2buf;
   839c0:	4804      	ldr	r0, [pc, #16]	; (839d4 <usart_driver_getchar+0x30>)
   839c2:	e002      	b.n	839ca <usart_driver_getchar+0x26>
			if (usart == USART0) rxbuf = &rx0buf;
   839c4:	4804      	ldr	r0, [pc, #16]	; (839d8 <usart_driver_getchar+0x34>)
   839c6:	e000      	b.n	839ca <usart_driver_getchar+0x26>
			else if (usart == USART1) rxbuf = &rx1buf;
   839c8:	4804      	ldr	r0, [pc, #16]	; (839dc <usart_driver_getchar+0x38>)
	return get_from_circ_buf(rxbuf);
   839ca:	4b05      	ldr	r3, [pc, #20]	; (839e0 <usart_driver_getchar+0x3c>)
   839cc:	4798      	blx	r3
   839ce:	bd08      	pop	{r3, pc}
   839d0:	40090000 	.word	0x40090000
   839d4:	20002b58 	.word	0x20002b58
   839d8:	20002734 	.word	0x20002734
   839dc:	20002c2c 	.word	0x20002c2c
   839e0:	00081f61 	.word	0x00081f61

000839e4 <generic_isr>:


void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   839e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839e8:	4605      	mov	r5, r0
   839ea:	4688      	mov	r8, r1
   839ec:	4616      	mov	r6, r2
	uint32_t status;
	status = usart_get_status(usart);
   839ee:	4b15      	ldr	r3, [pc, #84]	; (83a44 <generic_isr+0x60>)
   839f0:	4798      	blx	r3
   839f2:	4604      	mov	r4, r0
	if (status & US_CSR_RXRDY){
   839f4:	f010 0f01 	tst.w	r0, #1
   839f8:	d104      	bne.n	83a04 <generic_isr+0x20>
		add_to_circ_buf(rxbuf, temp, false);
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
		//udi_cdc_multi_putc(0, temp);
	}
	
	if (status & US_CSR_TXRDY){
   839fa:	f014 0f02 	tst.w	r4, #2
   839fe:	d10e      	bne.n	83a1e <generic_isr+0x3a>
   83a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   83a04:	69af      	ldr	r7, [r5, #24]
		add_to_circ_buf(rxbuf, temp, false);
   83a06:	b2ff      	uxtb	r7, r7
   83a08:	2200      	movs	r2, #0
   83a0a:	4639      	mov	r1, r7
   83a0c:	4640      	mov	r0, r8
   83a0e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 83a5c <generic_isr+0x78>
   83a12:	47c0      	blx	r8
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
   83a14:	2200      	movs	r2, #0
   83a16:	4639      	mov	r1, r7
   83a18:	480b      	ldr	r0, [pc, #44]	; (83a48 <generic_isr+0x64>)
   83a1a:	47c0      	blx	r8
   83a1c:	e7ed      	b.n	839fa <generic_isr+0x16>
		if (circ_buf_has_char(txbuf)){
   83a1e:	4630      	mov	r0, r6
   83a20:	4b0a      	ldr	r3, [pc, #40]	; (83a4c <generic_isr+0x68>)
   83a22:	4798      	blx	r3
   83a24:	b920      	cbnz	r0, 83a30 <generic_isr+0x4c>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   83a26:	2102      	movs	r1, #2
   83a28:	4628      	mov	r0, r5
   83a2a:	4b09      	ldr	r3, [pc, #36]	; (83a50 <generic_isr+0x6c>)
   83a2c:	4798      	blx	r3
		}
	}
}
   83a2e:	e7e7      	b.n	83a00 <generic_isr+0x1c>
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   83a30:	4630      	mov	r0, r6
   83a32:	4b08      	ldr	r3, [pc, #32]	; (83a54 <generic_isr+0x70>)
   83a34:	4798      	blx	r3
   83a36:	4601      	mov	r1, r0
   83a38:	4628      	mov	r0, r5
   83a3a:	4b07      	ldr	r3, [pc, #28]	; (83a58 <generic_isr+0x74>)
   83a3c:	4798      	blx	r3
   83a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a42:	bf00      	nop
   83a44:	00086e01 	.word	0x00086e01
   83a48:	200029b0 	.word	0x200029b0
   83a4c:	00081fa9 	.word	0x00081fa9
   83a50:	00086df9 	.word	0x00086df9
   83a54:	00081f61 	.word	0x00081f61
   83a58:	00086e39 	.word	0x00086e39
   83a5c:	00081f0d 	.word	0x00081f0d

00083a60 <USART0_Handler>:

ISR(USART0_Handler)
{
   83a60:	b508      	push	{r3, lr}
	generic_isr(USART0, &rx0buf, &tx0buf);
   83a62:	4a03      	ldr	r2, [pc, #12]	; (83a70 <USART0_Handler+0x10>)
   83a64:	4903      	ldr	r1, [pc, #12]	; (83a74 <USART0_Handler+0x14>)
   83a66:	4804      	ldr	r0, [pc, #16]	; (83a78 <USART0_Handler+0x18>)
   83a68:	4b04      	ldr	r3, [pc, #16]	; (83a7c <USART0_Handler+0x1c>)
   83a6a:	4798      	blx	r3
   83a6c:	bd08      	pop	{r3, pc}
   83a6e:	bf00      	nop
   83a70:	20002d00 	.word	0x20002d00
   83a74:	20002734 	.word	0x20002734
   83a78:	40090000 	.word	0x40090000
   83a7c:	000839e5 	.word	0x000839e5

00083a80 <USART1_Handler>:
}

ISR(USART1_Handler)
{
   83a80:	b508      	push	{r3, lr}
	generic_isr(USART1, &rx1buf, &tx1buf);
   83a82:	4a03      	ldr	r2, [pc, #12]	; (83a90 <USART1_Handler+0x10>)
   83a84:	4903      	ldr	r1, [pc, #12]	; (83a94 <USART1_Handler+0x14>)
   83a86:	4804      	ldr	r0, [pc, #16]	; (83a98 <USART1_Handler+0x18>)
   83a88:	4b04      	ldr	r3, [pc, #16]	; (83a9c <USART1_Handler+0x1c>)
   83a8a:	4798      	blx	r3
   83a8c:	bd08      	pop	{r3, pc}
   83a8e:	bf00      	nop
   83a90:	200028dc 	.word	0x200028dc
   83a94:	20002c2c 	.word	0x20002c2c
   83a98:	40094000 	.word	0x40094000
   83a9c:	000839e5 	.word	0x000839e5

00083aa0 <USART2_Handler>:
}

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   83aa0:	b508      	push	{r3, lr}
	generic_isr(USART2, &rx2buf, &tx2buf);
   83aa2:	4a03      	ldr	r2, [pc, #12]	; (83ab0 <USART2_Handler+0x10>)
   83aa4:	4903      	ldr	r1, [pc, #12]	; (83ab4 <USART2_Handler+0x14>)
   83aa6:	4804      	ldr	r0, [pc, #16]	; (83ab8 <USART2_Handler+0x18>)
   83aa8:	4b04      	ldr	r3, [pc, #16]	; (83abc <USART2_Handler+0x1c>)
   83aaa:	4798      	blx	r3
   83aac:	bd08      	pop	{r3, pc}
   83aae:	bf00      	nop
   83ab0:	20002660 	.word	0x20002660
   83ab4:	20002b58 	.word	0x20002b58
   83ab8:	40098000 	.word	0x40098000
   83abc:	000839e5 	.word	0x000839e5

00083ac0 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   83ac0:	b538      	push	{r3, r4, r5, lr}
   83ac2:	4605      	mov	r5, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   83ac4:	b2c0      	uxtb	r0, r0
   83ac6:	4c05      	ldr	r4, [pc, #20]	; (83adc <XMEGANVM_SendAddress+0x1c>)
   83ac8:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   83aca:	f3c5 2007 	ubfx	r0, r5, #8, #8
   83ace:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   83ad0:	f3c5 4007 	ubfx	r0, r5, #16, #8
   83ad4:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   83ad6:	0e28      	lsrs	r0, r5, #24
   83ad8:	47a0      	blx	r4
   83ada:	bd38      	pop	{r3, r4, r5, pc}
   83adc:	00084355 	.word	0x00084355

00083ae0 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   83ae0:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   83ae2:	4b03      	ldr	r3, [pc, #12]	; (83af0 <XMEGANVM_SendNVMRegAddress+0x10>)
   83ae4:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   83ae6:	4318      	orrs	r0, r3
   83ae8:	4b02      	ldr	r3, [pc, #8]	; (83af4 <XMEGANVM_SendNVMRegAddress+0x14>)
   83aea:	4798      	blx	r3
   83aec:	bd08      	pop	{r3, pc}
   83aee:	bf00      	nop
   83af0:	200005b0 	.word	0x200005b0
   83af4:	00083ac1 	.word	0x00083ac1

00083af8 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   83af8:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83afa:	4e07      	ldr	r6, [pc, #28]	; (83b18 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83afc:	4d07      	ldr	r5, [pc, #28]	; (83b1c <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   83afe:	4c08      	ldr	r4, [pc, #32]	; (83b20 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83b00:	2080      	movs	r0, #128	; 0x80
   83b02:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b04:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   83b06:	6823      	ldr	r3, [r4, #0]
   83b08:	b123      	cbz	r3, 83b14 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   83b0a:	f010 0f02 	tst.w	r0, #2
   83b0e:	d0f7      	beq.n	83b00 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   83b10:	2001      	movs	r0, #1
   83b12:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   83b14:	2000      	movs	r0, #0
		}
	}
}
   83b16:	bd70      	pop	{r4, r5, r6, pc}
   83b18:	00084355 	.word	0x00084355
   83b1c:	00084381 	.word	0x00084381
   83b20:	2000265c 	.word	0x2000265c

00083b24 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   83b24:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83b26:	206b      	movs	r0, #107	; 0x6b
   83b28:	4b09      	ldr	r3, [pc, #36]	; (83b50 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   83b2a:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   83b2c:	200f      	movs	r0, #15
   83b2e:	4b09      	ldr	r3, [pc, #36]	; (83b54 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   83b30:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83b32:	4e07      	ldr	r6, [pc, #28]	; (83b50 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b34:	4d08      	ldr	r5, [pc, #32]	; (83b58 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   83b36:	4c09      	ldr	r4, [pc, #36]	; (83b5c <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83b38:	2020      	movs	r0, #32
   83b3a:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b3c:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   83b3e:	6823      	ldr	r3, [r4, #0]
   83b40:	b123      	cbz	r3, 83b4c <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   83b42:	f010 0f80 	tst.w	r0, #128	; 0x80
   83b46:	d1f7      	bne.n	83b38 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   83b48:	2001      	movs	r0, #1
   83b4a:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   83b4c:	2000      	movs	r0, #0
		}
	}
}
   83b4e:	bd70      	pop	{r4, r5, r6, pc}
   83b50:	00084355 	.word	0x00084355
   83b54:	00083ae1 	.word	0x00083ae1
   83b58:	00084381 	.word	0x00084381
   83b5c:	2000265c 	.word	0x2000265c

00083b60 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   83b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b64:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   83b66:	4b1a      	ldr	r3, [pc, #104]	; (83bd0 <XMEGANVM_EnablePDI+0x70>)
   83b68:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83b6a:	20c1      	movs	r0, #193	; 0xc1
   83b6c:	4c19      	ldr	r4, [pc, #100]	; (83bd4 <XMEGANVM_EnablePDI+0x74>)
   83b6e:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   83b70:	2059      	movs	r0, #89	; 0x59
   83b72:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   83b74:	20c2      	movs	r0, #194	; 0xc2
   83b76:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   83b78:	2002      	movs	r0, #2
   83b7a:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   83b7c:	20e0      	movs	r0, #224	; 0xe0
   83b7e:	47a0      	blx	r4
   83b80:	f10d 0407 	add.w	r4, sp, #7
   83b84:	f10d 38ff 	add.w	r8, sp, #4294967295
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   83b88:	2712      	movs	r7, #18
   83b8a:	2689      	movs	r6, #137	; 0x89
   83b8c:	4d11      	ldr	r5, [pc, #68]	; (83bd4 <XMEGANVM_EnablePDI+0x74>)
   83b8e:	f88d 7000 	strb.w	r7, [sp]
   83b92:	f88d 6001 	strb.w	r6, [sp, #1]
   83b96:	23ab      	movs	r3, #171	; 0xab
   83b98:	f88d 3002 	strb.w	r3, [sp, #2]
   83b9c:	2345      	movs	r3, #69	; 0x45
   83b9e:	f88d 3003 	strb.w	r3, [sp, #3]
   83ba2:	23cd      	movs	r3, #205	; 0xcd
   83ba4:	f88d 3004 	strb.w	r3, [sp, #4]
   83ba8:	23d8      	movs	r3, #216	; 0xd8
   83baa:	f88d 3005 	strb.w	r3, [sp, #5]
   83bae:	2388      	movs	r3, #136	; 0x88
   83bb0:	f88d 3006 	strb.w	r3, [sp, #6]
   83bb4:	23ff      	movs	r3, #255	; 0xff
   83bb6:	f88d 3007 	strb.w	r3, [sp, #7]
   83bba:	f814 0901 	ldrb.w	r0, [r4], #-1
   83bbe:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83bc0:	4544      	cmp	r4, r8
   83bc2:	d1e4      	bne.n	83b8e <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   83bc4:	4b04      	ldr	r3, [pc, #16]	; (83bd8 <XMEGANVM_EnablePDI+0x78>)
   83bc6:	4798      	blx	r3
}
   83bc8:	b002      	add	sp, #8
   83bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83bce:	bf00      	nop
   83bd0:	00084421 	.word	0x00084421
   83bd4:	00084355 	.word	0x00084355
   83bd8:	00083af9 	.word	0x00083af9

00083bdc <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   83bdc:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   83bde:	4b09      	ldr	r3, [pc, #36]	; (83c04 <XMEGANVM_DisablePDI+0x28>)
   83be0:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83be2:	4c09      	ldr	r4, [pc, #36]	; (83c08 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83be4:	4d09      	ldr	r5, [pc, #36]	; (83c0c <XMEGANVM_DisablePDI+0x30>)
   83be6:	4e0a      	ldr	r6, [pc, #40]	; (83c10 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83be8:	20c1      	movs	r0, #193	; 0xc1
   83bea:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   83bec:	2000      	movs	r0, #0
   83bee:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   83bf0:	2081      	movs	r0, #129	; 0x81
   83bf2:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83bf4:	47a8      	blx	r5
   83bf6:	b110      	cbz	r0, 83bfe <XMEGANVM_DisablePDI+0x22>
   83bf8:	6833      	ldr	r3, [r6, #0]
   83bfa:	2b00      	cmp	r3, #0
   83bfc:	d1f4      	bne.n	83be8 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   83bfe:	4b05      	ldr	r3, [pc, #20]	; (83c14 <XMEGANVM_DisablePDI+0x38>)
   83c00:	4798      	blx	r3
   83c02:	bd70      	pop	{r4, r5, r6, pc}
   83c04:	00083af9 	.word	0x00083af9
   83c08:	00084355 	.word	0x00084355
   83c0c:	00084381 	.word	0x00084381
   83c10:	2000265c 	.word	0x2000265c
   83c14:	000842f9 	.word	0x000842f9

00083c18 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   83c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c1a:	4607      	mov	r7, r0
   83c1c:	460d      	mov	r5, r1
   83c1e:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83c20:	4b1e      	ldr	r3, [pc, #120]	; (83c9c <XMEGANVM_ReadMemory+0x84>)
   83c22:	4798      	blx	r3
   83c24:	4603      	mov	r3, r0
   83c26:	b908      	cbnz	r0, 83c2c <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   83c28:	4618      	mov	r0, r3
   83c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c2c:	204c      	movs	r0, #76	; 0x4c
   83c2e:	4e1c      	ldr	r6, [pc, #112]	; (83ca0 <XMEGANVM_ReadMemory+0x88>)
   83c30:	47b0      	blx	r6
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83c32:	200a      	movs	r0, #10
   83c34:	4b1b      	ldr	r3, [pc, #108]	; (83ca4 <XMEGANVM_ReadMemory+0x8c>)
   83c36:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   83c38:	2043      	movs	r0, #67	; 0x43
   83c3a:	47b0      	blx	r6
	if (ReadSize > 1)
   83c3c:	2c01      	cmp	r4, #1
   83c3e:	d923      	bls.n	83c88 <XMEGANVM_ReadMemory+0x70>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83c40:	206b      	movs	r0, #107	; 0x6b
   83c42:	47b0      	blx	r6
		XMEGANVM_SendAddress(ReadAddress);
   83c44:	4638      	mov	r0, r7
   83c46:	4b18      	ldr	r3, [pc, #96]	; (83ca8 <XMEGANVM_ReadMemory+0x90>)
   83c48:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83c4a:	20a0      	movs	r0, #160	; 0xa0
   83c4c:	47b0      	blx	r6
		XPROGTarget_SendByte(ReadSize - 1);
   83c4e:	1e60      	subs	r0, r4, #1
   83c50:	b2c0      	uxtb	r0, r0
   83c52:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83c54:	2024      	movs	r0, #36	; 0x24
   83c56:	47b0      	blx	r6
		while (ReadSize-- && TimeoutTicksRemaining)
   83c58:	1e63      	subs	r3, r4, #1
   83c5a:	b29b      	uxth	r3, r3
   83c5c:	b174      	cbz	r4, 83c7c <XMEGANVM_ReadMemory+0x64>
   83c5e:	4a13      	ldr	r2, [pc, #76]	; (83cac <XMEGANVM_ReadMemory+0x94>)
   83c60:	6812      	ldr	r2, [r2, #0]
   83c62:	b15a      	cbz	r2, 83c7c <XMEGANVM_ReadMemory+0x64>
   83c64:	1e6c      	subs	r4, r5, #1
   83c66:	441d      	add	r5, r3
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83c68:	4e11      	ldr	r6, [pc, #68]	; (83cb0 <XMEGANVM_ReadMemory+0x98>)
		while (ReadSize-- && TimeoutTicksRemaining)
   83c6a:	4f10      	ldr	r7, [pc, #64]	; (83cac <XMEGANVM_ReadMemory+0x94>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83c6c:	47b0      	blx	r6
   83c6e:	f804 0f01 	strb.w	r0, [r4, #1]!
		while (ReadSize-- && TimeoutTicksRemaining)
   83c72:	42ac      	cmp	r4, r5
   83c74:	d002      	beq.n	83c7c <XMEGANVM_ReadMemory+0x64>
   83c76:	683b      	ldr	r3, [r7, #0]
   83c78:	2b00      	cmp	r3, #0
   83c7a:	d1f7      	bne.n	83c6c <XMEGANVM_ReadMemory+0x54>
	return (TimeoutTicksRemaining > 0);
   83c7c:	4b0b      	ldr	r3, [pc, #44]	; (83cac <XMEGANVM_ReadMemory+0x94>)
   83c7e:	681b      	ldr	r3, [r3, #0]
   83c80:	3300      	adds	r3, #0
   83c82:	bf18      	it	ne
   83c84:	2301      	movne	r3, #1
   83c86:	e7cf      	b.n	83c28 <XMEGANVM_ReadMemory+0x10>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c88:	200c      	movs	r0, #12
   83c8a:	4b05      	ldr	r3, [pc, #20]	; (83ca0 <XMEGANVM_ReadMemory+0x88>)
   83c8c:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   83c8e:	4638      	mov	r0, r7
   83c90:	4b05      	ldr	r3, [pc, #20]	; (83ca8 <XMEGANVM_ReadMemory+0x90>)
   83c92:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83c94:	4b06      	ldr	r3, [pc, #24]	; (83cb0 <XMEGANVM_ReadMemory+0x98>)
   83c96:	4798      	blx	r3
   83c98:	7028      	strb	r0, [r5, #0]
   83c9a:	e7ef      	b.n	83c7c <XMEGANVM_ReadMemory+0x64>
   83c9c:	00083b25 	.word	0x00083b25
   83ca0:	00084355 	.word	0x00084355
   83ca4:	00083ae1 	.word	0x00083ae1
   83ca8:	00083ac1 	.word	0x00083ac1
   83cac:	2000265c 	.word	0x2000265c
   83cb0:	00084381 	.word	0x00084381

00083cb4 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   83cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83cb8:	4680      	mov	r8, r0
   83cba:	460f      	mov	r7, r1
   83cbc:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83cbe:	4b0b      	ldr	r3, [pc, #44]	; (83cec <XMEGANVM_WriteByteMemory+0x38>)
   83cc0:	4798      	blx	r3
   83cc2:	4604      	mov	r4, r0
   83cc4:	b910      	cbnz	r0, 83ccc <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   83cc6:	4620      	mov	r0, r4
   83cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ccc:	204c      	movs	r0, #76	; 0x4c
   83cce:	4d08      	ldr	r5, [pc, #32]	; (83cf0 <XMEGANVM_WriteByteMemory+0x3c>)
   83cd0:	47a8      	blx	r5
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83cd2:	200a      	movs	r0, #10
   83cd4:	4b07      	ldr	r3, [pc, #28]	; (83cf4 <XMEGANVM_WriteByteMemory+0x40>)
   83cd6:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   83cd8:	4640      	mov	r0, r8
   83cda:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83cdc:	204c      	movs	r0, #76	; 0x4c
   83cde:	47a8      	blx	r5
	XMEGANVM_SendAddress(WriteAddress);
   83ce0:	4638      	mov	r0, r7
   83ce2:	4b05      	ldr	r3, [pc, #20]	; (83cf8 <XMEGANVM_WriteByteMemory+0x44>)
   83ce4:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   83ce6:	4630      	mov	r0, r6
   83ce8:	47a8      	blx	r5
	return true;
   83cea:	e7ec      	b.n	83cc6 <XMEGANVM_WriteByteMemory+0x12>
   83cec:	00083b25 	.word	0x00083b25
   83cf0:	00084355 	.word	0x00084355
   83cf4:	00083ae1 	.word	0x00083ae1
   83cf8:	00083ac1 	.word	0x00083ac1

00083cfc <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   83cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83d00:	4681      	mov	r9, r0
   83d02:	4617      	mov	r7, r2
   83d04:	461d      	mov	r5, r3
   83d06:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   83d0a:	f013 0f01 	tst.w	r3, #1
   83d0e:	d107      	bne.n	83d20 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   83d10:	b9e6      	cbnz	r6, 83d4c <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   83d12:	f015 0f02 	tst.w	r5, #2
   83d16:	d13f      	bne.n	83d98 <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   83d18:	2401      	movs	r4, #1
}
   83d1a:	4620      	mov	r0, r4
   83d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d20:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d22:	4b28      	ldr	r3, [pc, #160]	; (83dc4 <XMEGANVM_WritePageMemory+0xc8>)
   83d24:	4798      	blx	r3
   83d26:	4604      	mov	r4, r0
   83d28:	2800      	cmp	r0, #0
   83d2a:	d0f6      	beq.n	83d1a <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d2c:	204c      	movs	r0, #76	; 0x4c
   83d2e:	4c26      	ldr	r4, [pc, #152]	; (83dc8 <XMEGANVM_WritePageMemory+0xcc>)
   83d30:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d32:	200a      	movs	r0, #10
   83d34:	f8df a094 	ldr.w	sl, [pc, #148]	; 83dcc <XMEGANVM_WritePageMemory+0xd0>
   83d38:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   83d3a:	4640      	mov	r0, r8
   83d3c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d3e:	204c      	movs	r0, #76	; 0x4c
   83d40:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83d42:	200b      	movs	r0, #11
   83d44:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83d46:	2001      	movs	r0, #1
   83d48:	47a0      	blx	r4
   83d4a:	e7e1      	b.n	83d10 <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d4c:	4b1d      	ldr	r3, [pc, #116]	; (83dc4 <XMEGANVM_WritePageMemory+0xc8>)
   83d4e:	4798      	blx	r3
   83d50:	4604      	mov	r4, r0
   83d52:	2800      	cmp	r0, #0
   83d54:	d0e1      	beq.n	83d1a <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d56:	204c      	movs	r0, #76	; 0x4c
   83d58:	4c1b      	ldr	r4, [pc, #108]	; (83dc8 <XMEGANVM_WritePageMemory+0xcc>)
   83d5a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d5c:	200a      	movs	r0, #10
   83d5e:	4b1b      	ldr	r3, [pc, #108]	; (83dcc <XMEGANVM_WritePageMemory+0xd0>)
   83d60:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   83d62:	4648      	mov	r0, r9
   83d64:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83d66:	206b      	movs	r0, #107	; 0x6b
   83d68:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   83d6a:	9808      	ldr	r0, [sp, #32]
   83d6c:	4b18      	ldr	r3, [pc, #96]	; (83dd0 <XMEGANVM_WritePageMemory+0xd4>)
   83d6e:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83d70:	20a0      	movs	r0, #160	; 0xa0
   83d72:	47a0      	blx	r4
		XPROGTarget_SendByte(WriteSize - 1);
   83d74:	1e70      	subs	r0, r6, #1
   83d76:	b2c0      	uxtb	r0, r0
   83d78:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83d7a:	2064      	movs	r0, #100	; 0x64
   83d7c:	47a0      	blx	r4
   83d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83d80:	1e5c      	subs	r4, r3, #1
		while (WriteSize--)
   83d82:	3e01      	subs	r6, #1
   83d84:	b2b6      	uxth	r6, r6
   83d86:	441e      	add	r6, r3
		  XPROGTarget_SendByte(*(WriteBuffer++));
   83d88:	f8df 803c 	ldr.w	r8, [pc, #60]	; 83dc8 <XMEGANVM_WritePageMemory+0xcc>
   83d8c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   83d90:	47c0      	blx	r8
		while (WriteSize--)
   83d92:	42b4      	cmp	r4, r6
   83d94:	d1fa      	bne.n	83d8c <XMEGANVM_WritePageMemory+0x90>
   83d96:	e7bc      	b.n	83d12 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d98:	4b0a      	ldr	r3, [pc, #40]	; (83dc4 <XMEGANVM_WritePageMemory+0xc8>)
   83d9a:	4798      	blx	r3
   83d9c:	4604      	mov	r4, r0
   83d9e:	2800      	cmp	r0, #0
   83da0:	d0bb      	beq.n	83d1a <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83da2:	204c      	movs	r0, #76	; 0x4c
   83da4:	4d08      	ldr	r5, [pc, #32]	; (83dc8 <XMEGANVM_WritePageMemory+0xcc>)
   83da6:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83da8:	200a      	movs	r0, #10
   83daa:	4b08      	ldr	r3, [pc, #32]	; (83dcc <XMEGANVM_WritePageMemory+0xd0>)
   83dac:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   83dae:	4638      	mov	r0, r7
   83db0:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83db2:	204c      	movs	r0, #76	; 0x4c
   83db4:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   83db6:	9808      	ldr	r0, [sp, #32]
   83db8:	4b05      	ldr	r3, [pc, #20]	; (83dd0 <XMEGANVM_WritePageMemory+0xd4>)
   83dba:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83dbc:	2000      	movs	r0, #0
   83dbe:	47a8      	blx	r5
   83dc0:	e7ab      	b.n	83d1a <XMEGANVM_WritePageMemory+0x1e>
   83dc2:	bf00      	nop
   83dc4:	00083b25 	.word	0x00083b25
   83dc8:	00084355 	.word	0x00084355
   83dcc:	00083ae1 	.word	0x00083ae1
   83dd0:	00083ac1 	.word	0x00083ac1

00083dd4 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   83dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83dd6:	4604      	mov	r4, r0
   83dd8:	460e      	mov	r6, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83dda:	4b36      	ldr	r3, [pc, #216]	; (83eb4 <XMEGANVM_EraseMemory+0xe0>)
   83ddc:	4798      	blx	r3
   83dde:	4603      	mov	r3, r0
   83de0:	b1a8      	cbz	r0, 83e0e <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   83de2:	2c40      	cmp	r4, #64	; 0x40
   83de4:	d015      	beq.n	83e12 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   83de6:	2c30      	cmp	r4, #48	; 0x30
   83de8:	d022      	beq.n	83e30 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83dea:	204c      	movs	r0, #76	; 0x4c
   83dec:	4d32      	ldr	r5, [pc, #200]	; (83eb8 <XMEGANVM_EraseMemory+0xe4>)
   83dee:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83df0:	200a      	movs	r0, #10
   83df2:	4b32      	ldr	r3, [pc, #200]	; (83ebc <XMEGANVM_EraseMemory+0xe8>)
   83df4:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   83df6:	4620      	mov	r0, r4
   83df8:	47a8      	blx	r5

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83dfa:	204c      	movs	r0, #76	; 0x4c
   83dfc:	47a8      	blx	r5
		XMEGANVM_SendAddress(Address);
   83dfe:	4630      	mov	r0, r6
   83e00:	4b2f      	ldr	r3, [pc, #188]	; (83ec0 <XMEGANVM_EraseMemory+0xec>)
   83e02:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83e04:	2000      	movs	r0, #0
   83e06:	47a8      	blx	r5
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   83e08:	4b2e      	ldr	r3, [pc, #184]	; (83ec4 <XMEGANVM_EraseMemory+0xf0>)
   83e0a:	4798      	blx	r3
   83e0c:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   83e0e:	4618      	mov	r0, r3
   83e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e12:	204c      	movs	r0, #76	; 0x4c
   83e14:	4c28      	ldr	r4, [pc, #160]	; (83eb8 <XMEGANVM_EraseMemory+0xe4>)
   83e16:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e18:	200a      	movs	r0, #10
   83e1a:	4d28      	ldr	r5, [pc, #160]	; (83ebc <XMEGANVM_EraseMemory+0xe8>)
   83e1c:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83e1e:	2040      	movs	r0, #64	; 0x40
   83e20:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e22:	204c      	movs	r0, #76	; 0x4c
   83e24:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83e26:	200b      	movs	r0, #11
   83e28:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83e2a:	2001      	movs	r0, #1
   83e2c:	47a0      	blx	r4
   83e2e:	e7eb      	b.n	83e08 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e30:	204c      	movs	r0, #76	; 0x4c
   83e32:	4c21      	ldr	r4, [pc, #132]	; (83eb8 <XMEGANVM_EraseMemory+0xe4>)
   83e34:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e36:	200a      	movs	r0, #10
   83e38:	4d20      	ldr	r5, [pc, #128]	; (83ebc <XMEGANVM_EraseMemory+0xe8>)
   83e3a:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   83e3c:	2036      	movs	r0, #54	; 0x36
   83e3e:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e40:	204c      	movs	r0, #76	; 0x4c
   83e42:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83e44:	200b      	movs	r0, #11
   83e46:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83e48:	2001      	movs	r0, #1
   83e4a:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83e4c:	4b19      	ldr	r3, [pc, #100]	; (83eb4 <XMEGANVM_EraseMemory+0xe0>)
   83e4e:	4798      	blx	r3
   83e50:	4603      	mov	r3, r0
   83e52:	2800      	cmp	r0, #0
   83e54:	d0db      	beq.n	83e0e <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e56:	204c      	movs	r0, #76	; 0x4c
   83e58:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e5a:	200a      	movs	r0, #10
   83e5c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   83e5e:	2033      	movs	r0, #51	; 0x33
   83e60:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83e62:	206b      	movs	r0, #107	; 0x6b
   83e64:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   83e66:	4630      	mov	r0, r6
   83e68:	4b15      	ldr	r3, [pc, #84]	; (83ec0 <XMEGANVM_EraseMemory+0xec>)
   83e6a:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83e6c:	20a0      	movs	r0, #160	; 0xa0
   83e6e:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   83e70:	4d15      	ldr	r5, [pc, #84]	; (83ec8 <XMEGANVM_EraseMemory+0xf4>)
   83e72:	7828      	ldrb	r0, [r5, #0]
   83e74:	3801      	subs	r0, #1
   83e76:	b2c0      	uxtb	r0, r0
   83e78:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83e7a:	2064      	movs	r0, #100	; 0x64
   83e7c:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83e7e:	882b      	ldrh	r3, [r5, #0]
   83e80:	b14b      	cbz	r3, 83e96 <XMEGANVM_EraseMemory+0xc2>
   83e82:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   83e84:	4627      	mov	r7, r4
   83e86:	4e0c      	ldr	r6, [pc, #48]	; (83eb8 <XMEGANVM_EraseMemory+0xe4>)
   83e88:	4638      	mov	r0, r7
   83e8a:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83e8c:	3401      	adds	r4, #1
   83e8e:	b2e4      	uxtb	r4, r4
   83e90:	882b      	ldrh	r3, [r5, #0]
   83e92:	42a3      	cmp	r3, r4
   83e94:	d8f8      	bhi.n	83e88 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e96:	204c      	movs	r0, #76	; 0x4c
   83e98:	4c07      	ldr	r4, [pc, #28]	; (83eb8 <XMEGANVM_EraseMemory+0xe4>)
   83e9a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e9c:	200a      	movs	r0, #10
   83e9e:	4d07      	ldr	r5, [pc, #28]	; (83ebc <XMEGANVM_EraseMemory+0xe8>)
   83ea0:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83ea2:	2030      	movs	r0, #48	; 0x30
   83ea4:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ea6:	204c      	movs	r0, #76	; 0x4c
   83ea8:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83eaa:	200b      	movs	r0, #11
   83eac:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83eae:	2001      	movs	r0, #1
   83eb0:	47a0      	blx	r4
   83eb2:	e7a9      	b.n	83e08 <XMEGANVM_EraseMemory+0x34>
   83eb4:	00083b25 	.word	0x00083b25
   83eb8:	00084355 	.word	0x00084355
   83ebc:	00083ae1 	.word	0x00083ae1
   83ec0:	00083ac1 	.word	0x00083ac1
   83ec4:	00083af9 	.word	0x00083af9
   83ec8:	200005ac 	.word	0x200005ac

00083ecc <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   83ecc:	b570      	push	{r4, r5, r6, lr}
   83ece:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   83ed0:	4b8e      	ldr	r3, [pc, #568]	; (8410c <XPROGProtocol_Command+0x240>)
   83ed2:	8858      	ldrh	r0, [r3, #2]
   83ed4:	b2c3      	uxtb	r3, r0
   83ed6:	4a8e      	ldr	r2, [pc, #568]	; (84110 <XPROGProtocol_Command+0x244>)
   83ed8:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   83eda:	3b01      	subs	r3, #1
   83edc:	2b21      	cmp	r3, #33	; 0x21
   83ede:	d82b      	bhi.n	83f38 <XPROGProtocol_Command+0x6c>
   83ee0:	e8df f013 	tbh	[pc, r3, lsl #1]
   83ee4:	002f0022 	.word	0x002f0022
   83ee8:	00730037 	.word	0x00730037
   83eec:	00c900a5 	.word	0x00c900a5
   83ef0:	002a00cc 	.word	0x002a00cc
   83ef4:	002a002a 	.word	0x002a002a
   83ef8:	002a002a 	.word	0x002a002a
   83efc:	002a002a 	.word	0x002a002a
   83f00:	002a002a 	.word	0x002a002a
   83f04:	002a002a 	.word	0x002a002a
   83f08:	002a002a 	.word	0x002a002a
   83f0c:	002a002a 	.word	0x002a002a
   83f10:	002a002a 	.word	0x002a002a
   83f14:	002a002a 	.word	0x002a002a
   83f18:	002a002a 	.word	0x002a002a
   83f1c:	002a002a 	.word	0x002a002a
   83f20:	0160002a 	.word	0x0160002a
   83f24:	014f0141 	.word	0x014f0141
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83f28:	4b7a      	ldr	r3, [pc, #488]	; (84114 <XPROGProtocol_Command+0x248>)
   83f2a:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83f2c:	4b7a      	ldr	r3, [pc, #488]	; (84118 <XPROGProtocol_Command+0x24c>)
   83f2e:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83f30:	f080 0001 	eor.w	r0, r0, #1
   83f34:	4b79      	ldr	r3, [pc, #484]	; (8411c <XPROGProtocol_Command+0x250>)
   83f36:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83f38:	4b79      	ldr	r3, [pc, #484]	; (84120 <XPROGProtocol_Command+0x254>)
   83f3a:	4798      	blx	r3
	return false;
   83f3c:	2000      	movs	r0, #0
}
   83f3e:	b004      	add	sp, #16
   83f40:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   83f42:	4b74      	ldr	r3, [pc, #464]	; (84114 <XPROGProtocol_Command+0x248>)
   83f44:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   83f46:	4b77      	ldr	r3, [pc, #476]	; (84124 <XPROGProtocol_Command+0x258>)
   83f48:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83f4a:	2200      	movs	r2, #0
   83f4c:	4b73      	ldr	r3, [pc, #460]	; (8411c <XPROGProtocol_Command+0x250>)
   83f4e:	701a      	strb	r2, [r3, #0]
   83f50:	e7f2      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83f52:	4b70      	ldr	r3, [pc, #448]	; (84114 <XPROGProtocol_Command+0x248>)
   83f54:	4798      	blx	r3
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83f56:	2200      	movs	r2, #0
   83f58:	4b70      	ldr	r3, [pc, #448]	; (8411c <XPROGProtocol_Command+0x250>)
   83f5a:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83f5c:	4b6b      	ldr	r3, [pc, #428]	; (8410c <XPROGProtocol_Command+0x240>)
   83f5e:	899b      	ldrh	r3, [r3, #12]
   83f60:	2b04      	cmp	r3, #4
   83f62:	d915      	bls.n	83f90 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   83f64:	4b69      	ldr	r3, [pc, #420]	; (8410c <XPROGProtocol_Command+0x240>)
   83f66:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83f68:	791a      	ldrb	r2, [r3, #4]
   83f6a:	78d9      	ldrb	r1, [r3, #3]
   83f6c:	0409      	lsls	r1, r1, #16
   83f6e:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83f72:	785a      	ldrb	r2, [r3, #1]
   83f74:	4311      	orrs	r1, r2
   83f76:	789a      	ldrb	r2, [r3, #2]
   83f78:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83f7c:	781b      	ldrb	r3, [r3, #0]
   83f7e:	3b01      	subs	r3, #1
   83f80:	2b07      	cmp	r3, #7
   83f82:	d817      	bhi.n	83fb4 <XPROGProtocol_Command+0xe8>
   83f84:	e8df f003 	tbb	[pc, r3]
   83f88:	0c0a0818 	.word	0x0c0a0818
   83f8c:	1412100e 	.word	0x1412100e
		XPROG_Status = XPROG_ERR_FAILED;
   83f90:	2201      	movs	r2, #1
   83f92:	4b62      	ldr	r3, [pc, #392]	; (8411c <XPROGProtocol_Command+0x250>)
   83f94:	701a      	strb	r2, [r3, #0]
   83f96:	e7cf      	b.n	83f38 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_ERASE_CHIP:
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
		break;
		case XPROG_ERASE_APP:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   83f98:	2020      	movs	r0, #32
   83f9a:	e00e      	b.n	83fba <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   83f9c:	2068      	movs	r0, #104	; 0x68
   83f9e:	e00c      	b.n	83fba <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   83fa0:	2030      	movs	r0, #48	; 0x30
   83fa2:	e00a      	b.n	83fba <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_APP_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   83fa4:	2022      	movs	r0, #34	; 0x22
   83fa6:	e008      	b.n	83fba <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   83fa8:	202a      	movs	r0, #42	; 0x2a
   83faa:	e006      	b.n	83fba <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   83fac:	2032      	movs	r0, #50	; 0x32
   83fae:	e004      	b.n	83fba <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_USERSIG:
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   83fb0:	2018      	movs	r0, #24
   83fb2:	e002      	b.n	83fba <XPROGProtocol_Command+0xee>
		break;
		default:
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   83fb4:	2000      	movs	r0, #0
   83fb6:	e000      	b.n	83fba <XPROGProtocol_Command+0xee>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   83fb8:	2040      	movs	r0, #64	; 0x40
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83fba:	4b5b      	ldr	r3, [pc, #364]	; (84128 <XPROGProtocol_Command+0x25c>)
   83fbc:	4798      	blx	r3
   83fbe:	2800      	cmp	r0, #0
   83fc0:	d1ba      	bne.n	83f38 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   83fc2:	2203      	movs	r2, #3
   83fc4:	4b55      	ldr	r3, [pc, #340]	; (8411c <XPROGProtocol_Command+0x250>)
   83fc6:	701a      	strb	r2, [r3, #0]
   83fc8:	e7b6      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83fca:	4b52      	ldr	r3, [pc, #328]	; (84114 <XPROGProtocol_Command+0x248>)
   83fcc:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83fce:	2200      	movs	r2, #0
   83fd0:	4b52      	ldr	r3, [pc, #328]	; (8411c <XPROGProtocol_Command+0x250>)
   83fd2:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   83fd4:	4b4d      	ldr	r3, [pc, #308]	; (8410c <XPROGProtocol_Command+0x240>)
   83fd6:	88db      	ldrh	r3, [r3, #6]
   83fd8:	2b07      	cmp	r3, #7
   83fda:	d802      	bhi.n	83fe2 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   83fdc:	2201      	movs	r2, #1
   83fde:	4b4f      	ldr	r3, [pc, #316]	; (8411c <XPROGProtocol_Command+0x250>)
   83fe0:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   83fe2:	4b4a      	ldr	r3, [pc, #296]	; (8410c <XPROGProtocol_Command+0x240>)
   83fe4:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   83fe6:	795a      	ldrb	r2, [r3, #5]
   83fe8:	7919      	ldrb	r1, [r3, #4]
   83fea:	0409      	lsls	r1, r1, #16
   83fec:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83ff0:	789a      	ldrb	r2, [r3, #2]
   83ff2:	4311      	orrs	r1, r2
   83ff4:	78da      	ldrb	r2, [r3, #3]
   83ff6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   83ffa:	781a      	ldrb	r2, [r3, #0]
   83ffc:	3a01      	subs	r2, #1
   83ffe:	2a05      	cmp	r2, #5
   84000:	d811      	bhi.n	84026 <XPROGProtocol_Command+0x15a>
   84002:	e8df f012 	tbh	[pc, r2, lsl #1]
   84006:	00e1      	.short	0x00e1
   84008:	00e50008 	.word	0x00e50008
   8400c:	000600fd 	.word	0x000600fd
   84010:	000c      	.short	0x000c
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
		PagedMemory      = false;
		break;
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   84012:	2008      	movs	r0, #8
   84014:	e0f5      	b.n	84202 <XPROGProtocol_Command+0x336>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   84016:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   84018:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   8401a:	222c      	movs	r2, #44	; 0x2c
   8401c:	e0db      	b.n	841d6 <XPROGProtocol_Command+0x30a>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   8401e:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   84020:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   84022:	221a      	movs	r2, #26
   84024:	e0d7      	b.n	841d6 <XPROGProtocol_Command+0x30a>
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
   84026:	222e      	movs	r2, #46	; 0x2e
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   84028:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8402a:	2023      	movs	r0, #35	; 0x23
   8402c:	e0d3      	b.n	841d6 <XPROGProtocol_Command+0x30a>
			start_timeoutcnt();
   8402e:	4b39      	ldr	r3, [pc, #228]	; (84114 <XPROGProtocol_Command+0x248>)
   84030:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   84032:	2200      	movs	r2, #0
   84034:	4b39      	ldr	r3, [pc, #228]	; (8411c <XPROGProtocol_Command+0x250>)
   84036:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   84038:	4b34      	ldr	r3, [pc, #208]	; (8410c <XPROGProtocol_Command+0x240>)
   8403a:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   8403c:	798b      	ldrb	r3, [r1, #6]
   8403e:	794a      	ldrb	r2, [r1, #5]
   84040:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   84044:	7908      	ldrb	r0, [r1, #4]
   84046:	78cb      	ldrb	r3, [r1, #3]
   84048:	041b      	lsls	r3, r3, #16
   8404a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   8404e:	7848      	ldrb	r0, [r1, #1]
   84050:	4303      	orrs	r3, r0
   84052:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   84054:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   84058:	bf28      	it	cs
   8405a:	f44f 7280 	movcs.w	r2, #256	; 0x100
   8405e:	4933      	ldr	r1, [pc, #204]	; (8412c <XPROGProtocol_Command+0x260>)
   84060:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   84064:	4b32      	ldr	r3, [pc, #200]	; (84130 <XPROGProtocol_Command+0x264>)
   84066:	4798      	blx	r3
   84068:	2800      	cmp	r0, #0
   8406a:	f47f af65 	bne.w	83f38 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   8406e:	2203      	movs	r2, #3
   84070:	4b2a      	ldr	r3, [pc, #168]	; (8411c <XPROGProtocol_Command+0x250>)
   84072:	701a      	strb	r2, [r3, #0]
   84074:	e760      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   84076:	4b27      	ldr	r3, [pc, #156]	; (84114 <XPROGProtocol_Command+0x248>)
   84078:	4798      	blx	r3
			break;
   8407a:	e75d      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   8407c:	4b25      	ldr	r3, [pc, #148]	; (84114 <XPROGProtocol_Command+0x248>)
   8407e:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   84080:	2200      	movs	r2, #0
   84082:	4b26      	ldr	r3, [pc, #152]	; (8411c <XPROGProtocol_Command+0x250>)
   84084:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   84086:	4b21      	ldr	r3, [pc, #132]	; (8410c <XPROGProtocol_Command+0x240>)
   84088:	8999      	ldrh	r1, [r3, #12]
   8408a:	2901      	cmp	r1, #1
   8408c:	d90b      	bls.n	840a6 <XPROGProtocol_Command+0x1da>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   8408e:	4b1f      	ldr	r3, [pc, #124]	; (8410c <XPROGProtocol_Command+0x240>)
   84090:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   84092:	7813      	ldrb	r3, [r2, #0]
   84094:	3b01      	subs	r3, #1
   84096:	2b07      	cmp	r3, #7
   84098:	d861      	bhi.n	8415e <XPROGProtocol_Command+0x292>
   8409a:	e8df f003 	tbb	[pc, r3]
   8409e:	1b08      	.short	0x1b08
   840a0:	60602c28 	.word	0x60602c28
   840a4:	3060      	.short	0x3060
		XPROG_Status = XPROG_ERR_FAILED;
   840a6:	2201      	movs	r2, #1
   840a8:	4b1c      	ldr	r3, [pc, #112]	; (8411c <XPROGProtocol_Command+0x250>)
   840aa:	701a      	strb	r2, [r3, #0]
   840ac:	e744      	b.n	83f38 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   840ae:	2904      	cmp	r1, #4
   840b0:	d803      	bhi.n	840ba <XPROGProtocol_Command+0x1ee>
				XPROG_Status = XPROG_ERR_FAILED;
   840b2:	2201      	movs	r2, #1
   840b4:	4b19      	ldr	r3, [pc, #100]	; (8411c <XPROGProtocol_Command+0x250>)
   840b6:	701a      	strb	r2, [r3, #0]
   840b8:	e73e      	b.n	83f38 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   840ba:	7911      	ldrb	r1, [r2, #4]
   840bc:	78d3      	ldrb	r3, [r2, #3]
   840be:	041b      	lsls	r3, r3, #16
   840c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   840c4:	7851      	ldrb	r1, [r2, #1]
   840c6:	430b      	orrs	r3, r1
   840c8:	7892      	ldrb	r2, [r2, #2]
   840ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   840ce:	4a19      	ldr	r2, [pc, #100]	; (84134 <XPROGProtocol_Command+0x268>)
   840d0:	6013      	str	r3, [r2, #0]
   840d2:	e731      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   840d4:	2902      	cmp	r1, #2
   840d6:	d803      	bhi.n	840e0 <XPROGProtocol_Command+0x214>
				XPROG_Status = XPROG_ERR_FAILED;
   840d8:	2201      	movs	r2, #1
   840da:	4b10      	ldr	r3, [pc, #64]	; (8411c <XPROGProtocol_Command+0x250>)
   840dc:	701a      	strb	r2, [r3, #0]
   840de:	e72b      	b.n	83f38 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   840e0:	7891      	ldrb	r1, [r2, #2]
   840e2:	7853      	ldrb	r3, [r2, #1]
   840e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   840e8:	4a13      	ldr	r2, [pc, #76]	; (84138 <XPROGProtocol_Command+0x26c>)
   840ea:	8013      	strh	r3, [r2, #0]
   840ec:	e724      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   840ee:	7852      	ldrb	r2, [r2, #1]
   840f0:	4b12      	ldr	r3, [pc, #72]	; (8413c <XPROGProtocol_Command+0x270>)
   840f2:	701a      	strb	r2, [r3, #0]
   840f4:	e720      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   840f6:	7852      	ldrb	r2, [r2, #1]
   840f8:	4b11      	ldr	r3, [pc, #68]	; (84140 <XPROGProtocol_Command+0x274>)
   840fa:	701a      	strb	r2, [r3, #0]
   840fc:	e71c      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   840fe:	2904      	cmp	r1, #4
   84100:	d820      	bhi.n	84144 <XPROGProtocol_Command+0x278>
				XPROG_Status = XPROG_ERR_FAILED;
   84102:	2201      	movs	r2, #1
   84104:	4b05      	ldr	r3, [pc, #20]	; (8411c <XPROGProtocol_Command+0x250>)
   84106:	701a      	strb	r2, [r3, #0]
   84108:	e716      	b.n	83f38 <XPROGProtocol_Command+0x6c>
   8410a:	bf00      	nop
   8410c:	20002dec 	.word	0x20002dec
   84110:	20002174 	.word	0x20002174
   84114:	0008352d 	.word	0x0008352d
   84118:	00083b61 	.word	0x00083b61
   8411c:	20002dd4 	.word	0x20002dd4
   84120:	00083575 	.word	0x00083575
   84124:	00083bdd 	.word	0x00083bdd
   84128:	00083dd5 	.word	0x00083dd5
   8412c:	20002178 	.word	0x20002178
   84130:	00083c19 	.word	0x00083c19
   84134:	200005b0 	.word	0x200005b0
   84138:	200005ac 	.word	0x200005ac
   8413c:	200005b4 	.word	0x200005b4
   84140:	200005b5 	.word	0x200005b5
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   84144:	7911      	ldrb	r1, [r2, #4]
   84146:	78d3      	ldrb	r3, [r2, #3]
   84148:	041b      	lsls	r3, r3, #16
   8414a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   8414e:	7851      	ldrb	r1, [r2, #1]
   84150:	430b      	orrs	r3, r1
   84152:	7890      	ldrb	r0, [r2, #2]
   84154:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   84158:	4b2f      	ldr	r3, [pc, #188]	; (84218 <XPROGProtocol_Command+0x34c>)
   8415a:	4798      	blx	r3
   8415c:	e6ec      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   8415e:	2201      	movs	r2, #1
   84160:	4b2e      	ldr	r3, [pc, #184]	; (8421c <XPROGProtocol_Command+0x350>)
   84162:	701a      	strb	r2, [r3, #0]
   84164:	e6e8      	b.n	83f38 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   84166:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   84168:	4b2d      	ldr	r3, [pc, #180]	; (84220 <XPROGProtocol_Command+0x354>)
   8416a:	88db      	ldrh	r3, [r3, #6]
   8416c:	18c2      	adds	r2, r0, r3
   8416e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   84172:	dc27      	bgt.n	841c4 <XPROGProtocol_Command+0x2f8>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   84174:	492a      	ldr	r1, [pc, #168]	; (84220 <XPROGProtocol_Command+0x354>)
   84176:	4a2b      	ldr	r2, [pc, #172]	; (84224 <XPROGProtocol_Command+0x358>)
   84178:	4410      	add	r0, r2
   8417a:	6088      	str	r0, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8417c:	818b      	strh	r3, [r1, #12]
			return true;
   8417e:	2001      	movs	r0, #1
   84180:	e6dd      	b.n	83f3e <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   84182:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   84184:	4b26      	ldr	r3, [pc, #152]	; (84220 <XPROGProtocol_Command+0x354>)
   84186:	88da      	ldrh	r2, [r3, #6]
   84188:	1883      	adds	r3, r0, r2
   8418a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   8418e:	dd01      	ble.n	84194 <XPROGProtocol_Command+0x2c8>
				return false;
   84190:	2000      	movs	r0, #0
   84192:	e6d4      	b.n	83f3e <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   84194:	4b22      	ldr	r3, [pc, #136]	; (84220 <XPROGProtocol_Command+0x354>)
   84196:	6899      	ldr	r1, [r3, #8]
   84198:	4b22      	ldr	r3, [pc, #136]	; (84224 <XPROGProtocol_Command+0x358>)
   8419a:	4418      	add	r0, r3
   8419c:	4b22      	ldr	r3, [pc, #136]	; (84228 <XPROGProtocol_Command+0x35c>)
   8419e:	4798      	blx	r3
			return true;
   841a0:	2001      	movs	r0, #1
   841a2:	e6cc      	b.n	83f3e <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   841a4:	4a21      	ldr	r2, [pc, #132]	; (8422c <XPROGProtocol_Command+0x360>)
   841a6:	4b1d      	ldr	r3, [pc, #116]	; (8421c <XPROGProtocol_Command+0x350>)
   841a8:	781b      	ldrb	r3, [r3, #0]
   841aa:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   841ac:	4b20      	ldr	r3, [pc, #128]	; (84230 <XPROGProtocol_Command+0x364>)
   841ae:	681b      	ldr	r3, [r3, #0]
   841b0:	fab3 f383 	clz	r3, r3
   841b4:	095b      	lsrs	r3, r3, #5
   841b6:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   841b8:	4b19      	ldr	r3, [pc, #100]	; (84220 <XPROGProtocol_Command+0x354>)
   841ba:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   841bc:	2203      	movs	r2, #3
   841be:	819a      	strh	r2, [r3, #12]
			return true;
   841c0:	2001      	movs	r0, #1
   841c2:	e6bc      	b.n	83f3e <XPROGProtocol_Command+0x72>
				return false;
   841c4:	2000      	movs	r0, #0
   841c6:	e6ba      	b.n	83f3e <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   841c8:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   841ca:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   841cc:	2224      	movs	r2, #36	; 0x24
   841ce:	e002      	b.n	841d6 <XPROGProtocol_Command+0x30a>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   841d0:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   841d2:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   841d4:	2235      	movs	r2, #53	; 0x35
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   841d6:	79de      	ldrb	r6, [r3, #7]
   841d8:	799c      	ldrb	r4, [r3, #6]
   841da:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   841de:	785b      	ldrb	r3, [r3, #1]
   841e0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   841e4:	bf28      	it	cs
   841e6:	f44f 7480 	movcs.w	r4, #256	; 0x100
   841ea:	9402      	str	r4, [sp, #8]
   841ec:	4c0d      	ldr	r4, [pc, #52]	; (84224 <XPROGProtocol_Command+0x358>)
   841ee:	9401      	str	r4, [sp, #4]
   841f0:	9100      	str	r1, [sp, #0]
   841f2:	4629      	mov	r1, r5
   841f4:	4c0f      	ldr	r4, [pc, #60]	; (84234 <XPROGProtocol_Command+0x368>)
   841f6:	47a0      	blx	r4
   841f8:	2800      	cmp	r0, #0
   841fa:	f47f ae9d 	bne.w	83f38 <XPROGProtocol_Command+0x6c>
   841fe:	e007      	b.n	84210 <XPROGProtocol_Command+0x344>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   84200:	204c      	movs	r0, #76	; 0x4c
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   84202:	4b08      	ldr	r3, [pc, #32]	; (84224 <XPROGProtocol_Command+0x358>)
   84204:	781a      	ldrb	r2, [r3, #0]
   84206:	4b0c      	ldr	r3, [pc, #48]	; (84238 <XPROGProtocol_Command+0x36c>)
   84208:	4798      	blx	r3
   8420a:	2800      	cmp	r0, #0
   8420c:	f47f ae94 	bne.w	83f38 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   84210:	2203      	movs	r2, #3
   84212:	4b02      	ldr	r3, [pc, #8]	; (8421c <XPROGProtocol_Command+0x350>)
   84214:	701a      	strb	r2, [r3, #0]
   84216:	e68f      	b.n	83f38 <XPROGProtocol_Command+0x6c>
   84218:	000834bd 	.word	0x000834bd
   8421c:	20002dd4 	.word	0x20002dd4
   84220:	20002dec 	.word	0x20002dec
   84224:	20002178 	.word	0x20002178
   84228:	0008785d 	.word	0x0008785d
   8422c:	20002174 	.word	0x20002174
   84230:	2000265c 	.word	0x2000265c
   84234:	00083cfd 	.word	0x00083cfd
   84238:	00083cb5 	.word	0x00083cb5

0008423c <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   8423c:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   8423e:	4d0b      	ldr	r5, [pc, #44]	; (8426c <XPROGTarget_SetRxMode+0x30>)
   84240:	4c0b      	ldr	r4, [pc, #44]	; (84270 <XPROGTarget_SetRxMode+0x34>)
   84242:	4628      	mov	r0, r5
   84244:	47a0      	blx	r4
   84246:	2800      	cmp	r0, #0
   84248:	d0fb      	beq.n	84242 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   8424a:	4c08      	ldr	r4, [pc, #32]	; (8426c <XPROGTarget_SetRxMode+0x30>)
   8424c:	4620      	mov	r0, r4
   8424e:	4b09      	ldr	r3, [pc, #36]	; (84274 <XPROGTarget_SetRxMode+0x38>)
   84250:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   84252:	4620      	mov	r0, r4
   84254:	4b08      	ldr	r3, [pc, #32]	; (84278 <XPROGTarget_SetRxMode+0x3c>)
   84256:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84258:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8425c:	2014      	movs	r0, #20
   8425e:	4b07      	ldr	r3, [pc, #28]	; (8427c <XPROGTarget_SetRxMode+0x40>)
   84260:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   84262:	2200      	movs	r2, #0
   84264:	4b06      	ldr	r3, [pc, #24]	; (84280 <XPROGTarget_SetRxMode+0x44>)
   84266:	701a      	strb	r2, [r3, #0]
   84268:	bd38      	pop	{r3, r4, r5, pc}
   8426a:	bf00      	nop
   8426c:	40094000 	.word	0x40094000
   84270:	00086e1d 	.word	0x00086e1d
   84274:	00086ddf 	.word	0x00086ddf
   84278:	00086de9 	.word	0x00086de9
   8427c:	000851d1 	.word	0x000851d1
   84280:	20002278 	.word	0x20002278

00084284 <XPROGTarget_SetTxMode>:
{
   84284:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84286:	2518      	movs	r5, #24
   84288:	4c14      	ldr	r4, [pc, #80]	; (842dc <XPROGTarget_SetTxMode+0x58>)
   8428a:	4e15      	ldr	r6, [pc, #84]	; (842e0 <XPROGTarget_SetTxMode+0x5c>)
   8428c:	4628      	mov	r0, r5
   8428e:	47a0      	blx	r4
   84290:	b110      	cbz	r0, 84298 <XPROGTarget_SetTxMode+0x14>
   84292:	6833      	ldr	r3, [r6, #0]
   84294:	2b00      	cmp	r3, #0
   84296:	d1f9      	bne.n	8428c <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84298:	2518      	movs	r5, #24
   8429a:	4c10      	ldr	r4, [pc, #64]	; (842dc <XPROGTarget_SetTxMode+0x58>)
   8429c:	4e10      	ldr	r6, [pc, #64]	; (842e0 <XPROGTarget_SetTxMode+0x5c>)
   8429e:	4628      	mov	r0, r5
   842a0:	47a0      	blx	r4
   842a2:	b910      	cbnz	r0, 842aa <XPROGTarget_SetTxMode+0x26>
   842a4:	6833      	ldr	r3, [r6, #0]
   842a6:	2b00      	cmp	r3, #0
   842a8:	d1f9      	bne.n	8429e <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842aa:	2518      	movs	r5, #24
   842ac:	4c0b      	ldr	r4, [pc, #44]	; (842dc <XPROGTarget_SetTxMode+0x58>)
   842ae:	4e0c      	ldr	r6, [pc, #48]	; (842e0 <XPROGTarget_SetTxMode+0x5c>)
   842b0:	4628      	mov	r0, r5
   842b2:	47a0      	blx	r4
   842b4:	b110      	cbz	r0, 842bc <XPROGTarget_SetTxMode+0x38>
   842b6:	6833      	ldr	r3, [r6, #0]
   842b8:	2b00      	cmp	r3, #0
   842ba:	d1f9      	bne.n	842b0 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   842bc:	4c09      	ldr	r4, [pc, #36]	; (842e4 <XPROGTarget_SetTxMode+0x60>)
   842be:	4620      	mov	r0, r4
   842c0:	4b09      	ldr	r3, [pc, #36]	; (842e8 <XPROGTarget_SetTxMode+0x64>)
   842c2:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   842c4:	4620      	mov	r0, r4
   842c6:	4b09      	ldr	r3, [pc, #36]	; (842ec <XPROGTarget_SetTxMode+0x68>)
   842c8:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   842ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   842ce:	2014      	movs	r0, #20
   842d0:	4b07      	ldr	r3, [pc, #28]	; (842f0 <XPROGTarget_SetTxMode+0x6c>)
   842d2:	4798      	blx	r3
	IsSending = true;
   842d4:	2201      	movs	r2, #1
   842d6:	4b07      	ldr	r3, [pc, #28]	; (842f4 <XPROGTarget_SetTxMode+0x70>)
   842d8:	701a      	strb	r2, [r3, #0]
   842da:	bd70      	pop	{r4, r5, r6, pc}
   842dc:	0008517f 	.word	0x0008517f
   842e0:	2000265c 	.word	0x2000265c
   842e4:	40094000 	.word	0x40094000
   842e8:	00086def 	.word	0x00086def
   842ec:	00086dd9 	.word	0x00086dd9
   842f0:	000851d1 	.word	0x000851d1
   842f4:	20002278 	.word	0x20002278

000842f8 <XPROGTarget_DisableTargetPDI>:
{
   842f8:	b510      	push	{r4, lr}
	if (IsSending)
   842fa:	4b0f      	ldr	r3, [pc, #60]	; (84338 <XPROGTarget_DisableTargetPDI+0x40>)
   842fc:	781b      	ldrb	r3, [r3, #0]
   842fe:	b9bb      	cbnz	r3, 84330 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   84300:	4c0e      	ldr	r4, [pc, #56]	; (8433c <XPROGTarget_DisableTargetPDI+0x44>)
   84302:	4620      	mov	r0, r4
   84304:	4b0e      	ldr	r3, [pc, #56]	; (84340 <XPROGTarget_DisableTargetPDI+0x48>)
   84306:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   84308:	4620      	mov	r0, r4
   8430a:	4b0e      	ldr	r3, [pc, #56]	; (84344 <XPROGTarget_DisableTargetPDI+0x4c>)
   8430c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   8430e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84312:	2018      	movs	r0, #24
   84314:	4c0c      	ldr	r4, [pc, #48]	; (84348 <XPROGTarget_DisableTargetPDI+0x50>)
   84316:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   84318:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8431c:	2015      	movs	r0, #21
   8431e:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84320:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84324:	2014      	movs	r0, #20
   84326:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   84328:	200e      	movs	r0, #14
   8432a:	4b08      	ldr	r3, [pc, #32]	; (8434c <XPROGTarget_DisableTargetPDI+0x54>)
   8432c:	4798      	blx	r3
   8432e:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   84330:	4b07      	ldr	r3, [pc, #28]	; (84350 <XPROGTarget_DisableTargetPDI+0x58>)
   84332:	4798      	blx	r3
   84334:	e7e4      	b.n	84300 <XPROGTarget_DisableTargetPDI+0x8>
   84336:	bf00      	nop
   84338:	20002278 	.word	0x20002278
   8433c:	40094000 	.word	0x40094000
   84340:	00086def 	.word	0x00086def
   84344:	00086ddf 	.word	0x00086ddf
   84348:	000851d1 	.word	0x000851d1
   8434c:	00085549 	.word	0x00085549
   84350:	0008423d 	.word	0x0008423d

00084354 <XPROGTarget_SendByte>:
{
   84354:	b510      	push	{r4, lr}
   84356:	4604      	mov	r4, r0
	if (!(IsSending))
   84358:	4b05      	ldr	r3, [pc, #20]	; (84370 <XPROGTarget_SendByte+0x1c>)
   8435a:	781b      	ldrb	r3, [r3, #0]
   8435c:	b123      	cbz	r3, 84368 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   8435e:	4621      	mov	r1, r4
   84360:	4804      	ldr	r0, [pc, #16]	; (84374 <XPROGTarget_SendByte+0x20>)
   84362:	4b05      	ldr	r3, [pc, #20]	; (84378 <XPROGTarget_SendByte+0x24>)
   84364:	4798      	blx	r3
   84366:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   84368:	4b04      	ldr	r3, [pc, #16]	; (8437c <XPROGTarget_SendByte+0x28>)
   8436a:	4798      	blx	r3
   8436c:	e7f7      	b.n	8435e <XPROGTarget_SendByte+0xa>
   8436e:	bf00      	nop
   84370:	20002278 	.word	0x20002278
   84374:	40094000 	.word	0x40094000
   84378:	00086e39 	.word	0x00086e39
   8437c:	00084285 	.word	0x00084285

00084380 <XPROGTarget_ReceiveByte>:
{
   84380:	b570      	push	{r4, r5, r6, lr}
   84382:	b082      	sub	sp, #8
	if (IsSending)
   84384:	4b0a      	ldr	r3, [pc, #40]	; (843b0 <XPROGTarget_ReceiveByte+0x30>)
   84386:	781b      	ldrb	r3, [r3, #0]
   84388:	b973      	cbnz	r3, 843a8 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   8438a:	4d0a      	ldr	r5, [pc, #40]	; (843b4 <XPROGTarget_ReceiveByte+0x34>)
   8438c:	4c0a      	ldr	r4, [pc, #40]	; (843b8 <XPROGTarget_ReceiveByte+0x38>)
   8438e:	4e0b      	ldr	r6, [pc, #44]	; (843bc <XPROGTarget_ReceiveByte+0x3c>)
   84390:	a901      	add	r1, sp, #4
   84392:	4628      	mov	r0, r5
   84394:	47a0      	blx	r4
   84396:	2801      	cmp	r0, #1
   84398:	d102      	bne.n	843a0 <XPROGTarget_ReceiveByte+0x20>
   8439a:	6833      	ldr	r3, [r6, #0]
   8439c:	2b00      	cmp	r3, #0
   8439e:	d1f7      	bne.n	84390 <XPROGTarget_ReceiveByte+0x10>
}
   843a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   843a4:	b002      	add	sp, #8
   843a6:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   843a8:	4b05      	ldr	r3, [pc, #20]	; (843c0 <XPROGTarget_ReceiveByte+0x40>)
   843aa:	4798      	blx	r3
   843ac:	e7ed      	b.n	8438a <XPROGTarget_ReceiveByte+0xa>
   843ae:	bf00      	nop
   843b0:	20002278 	.word	0x20002278
   843b4:	40094000 	.word	0x40094000
   843b8:	00086e4b 	.word	0x00086e4b
   843bc:	2000265c 	.word	0x2000265c
   843c0:	0008423d 	.word	0x0008423d

000843c4 <XPROGTarget_SendIdle>:
{
   843c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   843c6:	4b12      	ldr	r3, [pc, #72]	; (84410 <XPROGTarget_SendIdle+0x4c>)
   843c8:	781b      	ldrb	r3, [r3, #0]
   843ca:	b123      	cbz	r3, 843d6 <XPROGTarget_SendIdle+0x12>
{
   843cc:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   843ce:	2518      	movs	r5, #24
   843d0:	4c10      	ldr	r4, [pc, #64]	; (84414 <XPROGTarget_SendIdle+0x50>)
   843d2:	4e11      	ldr	r6, [pc, #68]	; (84418 <XPROGTarget_SendIdle+0x54>)
   843d4:	e006      	b.n	843e4 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   843d6:	4b11      	ldr	r3, [pc, #68]	; (8441c <XPROGTarget_SendIdle+0x58>)
   843d8:	4798      	blx	r3
   843da:	e7f7      	b.n	843cc <XPROGTarget_SendIdle+0x8>
   843dc:	1e7b      	subs	r3, r7, #1
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   843de:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   843e2:	d013      	beq.n	8440c <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   843e4:	4628      	mov	r0, r5
   843e6:	47a0      	blx	r4
   843e8:	b110      	cbz	r0, 843f0 <XPROGTarget_SendIdle+0x2c>
   843ea:	6833      	ldr	r3, [r6, #0]
   843ec:	2b00      	cmp	r3, #0
   843ee:	d1f9      	bne.n	843e4 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   843f0:	4628      	mov	r0, r5
   843f2:	47a0      	blx	r4
   843f4:	b910      	cbnz	r0, 843fc <XPROGTarget_SendIdle+0x38>
   843f6:	6833      	ldr	r3, [r6, #0]
   843f8:	2b00      	cmp	r3, #0
   843fa:	d1f9      	bne.n	843f0 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   843fc:	4628      	mov	r0, r5
   843fe:	47a0      	blx	r4
   84400:	2800      	cmp	r0, #0
   84402:	d0eb      	beq.n	843dc <XPROGTarget_SendIdle+0x18>
   84404:	6833      	ldr	r3, [r6, #0]
   84406:	2b00      	cmp	r3, #0
   84408:	d1f8      	bne.n	843fc <XPROGTarget_SendIdle+0x38>
   8440a:	e7e7      	b.n	843dc <XPROGTarget_SendIdle+0x18>
}
   8440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8440e:	bf00      	nop
   84410:	20002278 	.word	0x20002278
   84414:	0008517f 	.word	0x0008517f
   84418:	2000265c 	.word	0x2000265c
   8441c:	00084285 	.word	0x00084285

00084420 <XPROGTarget_EnableTargetPDI>:
{
   84420:	b570      	push	{r4, r5, r6, lr}
   84422:	b086      	sub	sp, #24
	IsSending = false;
   84424:	2500      	movs	r5, #0
   84426:	4b19      	ldr	r3, [pc, #100]	; (8448c <XPROGTarget_EnableTargetPDI+0x6c>)
   84428:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   8442a:	200e      	movs	r0, #14
   8442c:	4b18      	ldr	r3, [pc, #96]	; (84490 <XPROGTarget_EnableTargetPDI+0x70>)
   8442e:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   84430:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84434:	2014      	movs	r0, #20
   84436:	4c17      	ldr	r4, [pc, #92]	; (84494 <XPROGTarget_EnableTargetPDI+0x74>)
   84438:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   8443a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8443e:	2015      	movs	r0, #21
   84440:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   84442:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84446:	2018      	movs	r0, #24
   84448:	47a0      	blx	r4
	delay_us(50);
   8444a:	f240 1057 	movw	r0, #343	; 0x157
   8444e:	4e12      	ldr	r6, [pc, #72]	; (84498 <XPROGTarget_EnableTargetPDI+0x78>)
   84450:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   84452:	2014      	movs	r0, #20
   84454:	4b11      	ldr	r3, [pc, #68]	; (8449c <XPROGTarget_EnableTargetPDI+0x7c>)
   84456:	4798      	blx	r3
	delay_us(10);
   84458:	2045      	movs	r0, #69	; 0x45
   8445a:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   8445c:	9502      	str	r5, [sp, #8]
   8445e:	9504      	str	r5, [sp, #16]
   84460:	9505      	str	r5, [sp, #20]
   84462:	4b0f      	ldr	r3, [pc, #60]	; (844a0 <XPROGTarget_EnableTargetPDI+0x80>)
   84464:	9300      	str	r3, [sp, #0]
   84466:	23c0      	movs	r3, #192	; 0xc0
   84468:	9301      	str	r3, [sp, #4]
   8446a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8446e:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   84470:	4a0c      	ldr	r2, [pc, #48]	; (844a4 <XPROGTarget_EnableTargetPDI+0x84>)
   84472:	4669      	mov	r1, sp
   84474:	480c      	ldr	r0, [pc, #48]	; (844a8 <XPROGTarget_EnableTargetPDI+0x88>)
   84476:	4b0d      	ldr	r3, [pc, #52]	; (844ac <XPROGTarget_EnableTargetPDI+0x8c>)
   84478:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   8447a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8447e:	2018      	movs	r0, #24
   84480:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   84482:	4c0b      	ldr	r4, [pc, #44]	; (844b0 <XPROGTarget_EnableTargetPDI+0x90>)
   84484:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   84486:	47a0      	blx	r4
}
   84488:	b006      	add	sp, #24
   8448a:	bd70      	pop	{r4, r5, r6, pc}
   8448c:	20002278 	.word	0x20002278
   84490:	00085515 	.word	0x00085515
   84494:	000851d1 	.word	0x000851d1
   84498:	20000089 	.word	0x20000089
   8449c:	0008519b 	.word	0x0008519b
   844a0:	0007a120 	.word	0x0007a120
   844a4:	0b71b000 	.word	0x0b71b000
   844a8:	40094000 	.word	0x40094000
   844ac:	00086b39 	.word	0x00086b39
   844b0:	000843c5 	.word	0x000843c5

000844b4 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   844b4:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   844b6:	2006      	movs	r0, #6
   844b8:	4c02      	ldr	r4, [pc, #8]	; (844c4 <ui_init+0x10>)
   844ba:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   844bc:	2007      	movs	r0, #7
   844be:	47a0      	blx	r4
   844c0:	bd10      	pop	{r4, pc}
   844c2:	bf00      	nop
   844c4:	0008505d 	.word	0x0008505d

000844c8 <ui_powerdown>:
}

void ui_powerdown(void)
{
   844c8:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   844ca:	2006      	movs	r0, #6
   844cc:	4c03      	ldr	r4, [pc, #12]	; (844dc <ui_powerdown+0x14>)
   844ce:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   844d0:	2007      	movs	r0, #7
   844d2:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   844d4:	201d      	movs	r0, #29
   844d6:	4b02      	ldr	r3, [pc, #8]	; (844e0 <ui_powerdown+0x18>)
   844d8:	4798      	blx	r3
   844da:	bd10      	pop	{r4, pc}
   844dc:	0008505d 	.word	0x0008505d
   844e0:	000851b5 	.word	0x000851b5

000844e4 <ui_wakeup>:
		
}

void ui_wakeup(void)
{
   844e4:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   844e6:	2006      	movs	r0, #6
   844e8:	4b02      	ldr	r3, [pc, #8]	; (844f4 <ui_wakeup+0x10>)
   844ea:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   844ec:	201d      	movs	r0, #29
   844ee:	4b02      	ldr	r3, [pc, #8]	; (844f8 <ui_wakeup+0x14>)
   844f0:	4798      	blx	r3
   844f2:	bd08      	pop	{r3, pc}
   844f4:	00085081 	.word	0x00085081
   844f8:	0008519b 	.word	0x0008519b

000844fc <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   844fc:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   844fe:	4b0b      	ldr	r3, [pc, #44]	; (8452c <ui_process+0x30>)
   84500:	fba3 2300 	umull	r2, r3, r3, r0
   84504:	099b      	lsrs	r3, r3, #6
   84506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8450a:	fb02 0013 	mls	r0, r2, r3, r0
   8450e:	b280      	uxth	r0, r0
   84510:	b118      	cbz	r0, 8451a <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   84512:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   84516:	d004      	beq.n	84522 <ui_process+0x26>
   84518:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   8451a:	2006      	movs	r0, #6
   8451c:	4b04      	ldr	r3, [pc, #16]	; (84530 <ui_process+0x34>)
   8451e:	4798      	blx	r3
   84520:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   84522:	2006      	movs	r0, #6
   84524:	4b03      	ldr	r3, [pc, #12]	; (84534 <ui_process+0x38>)
   84526:	4798      	blx	r3
	}
}
   84528:	e7f6      	b.n	84518 <ui_process+0x1c>
   8452a:	bf00      	nop
   8452c:	10624dd3 	.word	0x10624dd3
   84530:	00085081 	.word	0x00085081
   84534:	0008505d 	.word	0x0008505d

00084538 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   84538:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8453a:	203e      	movs	r0, #62	; 0x3e
   8453c:	4b07      	ldr	r3, [pc, #28]	; (8455c <sysclk_enable_usb+0x24>)
   8453e:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   84540:	4c07      	ldr	r4, [pc, #28]	; (84560 <sysclk_enable_usb+0x28>)
   84542:	47a0      	blx	r4
   84544:	2800      	cmp	r0, #0
   84546:	d0fc      	beq.n	84542 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   84548:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   8454c:	4b05      	ldr	r3, [pc, #20]	; (84564 <sysclk_enable_usb+0x2c>)
   8454e:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   84550:	4c05      	ldr	r4, [pc, #20]	; (84568 <sysclk_enable_usb+0x30>)
   84552:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84554:	2800      	cmp	r0, #0
   84556:	d0fc      	beq.n	84552 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   84558:	bd10      	pop	{r4, pc}
   8455a:	bf00      	nop
   8455c:	0008547d 	.word	0x0008547d
   84560:	000854a5 	.word	0x000854a5
   84564:	400e0400 	.word	0x400e0400
   84568:	00085505 	.word	0x00085505

0008456c <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   8456c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8456e:	4812      	ldr	r0, [pc, #72]	; (845b8 <sysclk_init+0x4c>)
   84570:	4b12      	ldr	r3, [pc, #72]	; (845bc <sysclk_init+0x50>)
   84572:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84574:	203e      	movs	r0, #62	; 0x3e
   84576:	4b12      	ldr	r3, [pc, #72]	; (845c0 <sysclk_init+0x54>)
   84578:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   8457a:	4c12      	ldr	r4, [pc, #72]	; (845c4 <sysclk_init+0x58>)
   8457c:	47a0      	blx	r4
   8457e:	2800      	cmp	r0, #0
   84580:	d0fc      	beq.n	8457c <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   84582:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   84586:	4b10      	ldr	r3, [pc, #64]	; (845c8 <sysclk_init+0x5c>)
   84588:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8458a:	4c10      	ldr	r4, [pc, #64]	; (845cc <sysclk_init+0x60>)
   8458c:	47a0      	blx	r4
   8458e:	2800      	cmp	r0, #0
   84590:	d0fc      	beq.n	8458c <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   84592:	4b0f      	ldr	r3, [pc, #60]	; (845d0 <sysclk_init+0x64>)
   84594:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   84596:	4a0f      	ldr	r2, [pc, #60]	; (845d4 <sysclk_init+0x68>)
   84598:	4b0f      	ldr	r3, [pc, #60]	; (845d8 <sysclk_init+0x6c>)
   8459a:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   8459c:	4c0f      	ldr	r4, [pc, #60]	; (845dc <sysclk_init+0x70>)
   8459e:	47a0      	blx	r4
   845a0:	2800      	cmp	r0, #0
   845a2:	d0fc      	beq.n	8459e <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   845a4:	2010      	movs	r0, #16
   845a6:	4b0e      	ldr	r3, [pc, #56]	; (845e0 <sysclk_init+0x74>)
   845a8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   845aa:	4b0e      	ldr	r3, [pc, #56]	; (845e4 <sysclk_init+0x78>)
   845ac:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   845ae:	4802      	ldr	r0, [pc, #8]	; (845b8 <sysclk_init+0x4c>)
   845b0:	4b02      	ldr	r3, [pc, #8]	; (845bc <sysclk_init+0x50>)
   845b2:	4798      	blx	r3
   845b4:	bd10      	pop	{r4, pc}
   845b6:	bf00      	nop
   845b8:	05b8d800 	.word	0x05b8d800
   845bc:	2000013d 	.word	0x2000013d
   845c0:	0008547d 	.word	0x0008547d
   845c4:	000854a5 	.word	0x000854a5
   845c8:	000854c5 	.word	0x000854c5
   845cc:	000854b5 	.word	0x000854b5
   845d0:	000854e5 	.word	0x000854e5
   845d4:	200f3f01 	.word	0x200f3f01
   845d8:	400e0400 	.word	0x400e0400
   845dc:	000854f5 	.word	0x000854f5
   845e0:	00085419 	.word	0x00085419
   845e4:	00086f69 	.word	0x00086f69

000845e8 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   845e8:	4b01      	ldr	r3, [pc, #4]	; (845f0 <udi_vendor_getsetting+0x8>)
   845ea:	7818      	ldrb	r0, [r3, #0]
   845ec:	4770      	bx	lr
   845ee:	bf00      	nop
   845f0:	20002279 	.word	0x20002279

000845f4 <udi_vendor_enable>:
{
   845f4:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   845f6:	4b05      	ldr	r3, [pc, #20]	; (8460c <udi_vendor_enable+0x18>)
   845f8:	4798      	blx	r3
   845fa:	78c3      	ldrb	r3, [r0, #3]
   845fc:	4a04      	ldr	r2, [pc, #16]	; (84610 <udi_vendor_enable+0x1c>)
   845fe:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   84600:	b10b      	cbz	r3, 84606 <udi_vendor_enable+0x12>
	return true;
   84602:	2001      	movs	r0, #1
}
   84604:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84606:	4b03      	ldr	r3, [pc, #12]	; (84614 <udi_vendor_enable+0x20>)
   84608:	4798      	blx	r3
   8460a:	bd08      	pop	{r3, pc}
   8460c:	00084841 	.word	0x00084841
   84610:	20002279 	.word	0x20002279
   84614:	00083071 	.word	0x00083071

00084618 <udi_vendor_disable>:
{
   84618:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   8461a:	4b03      	ldr	r3, [pc, #12]	; (84628 <udi_vendor_disable+0x10>)
   8461c:	781b      	ldrb	r3, [r3, #0]
   8461e:	b103      	cbz	r3, 84622 <udi_vendor_disable+0xa>
   84620:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   84622:	4b02      	ldr	r3, [pc, #8]	; (8462c <udi_vendor_disable+0x14>)
   84624:	4798      	blx	r3
}
   84626:	e7fb      	b.n	84620 <udi_vendor_disable+0x8>
   84628:	20002279 	.word	0x20002279
   8462c:	000830a1 	.word	0x000830a1

00084630 <udi_vendor_setup>:
{
   84630:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   84632:	4b0b      	ldr	r3, [pc, #44]	; (84660 <udi_vendor_setup+0x30>)
   84634:	781b      	ldrb	r3, [r3, #0]
   84636:	f013 0f80 	tst.w	r3, #128	; 0x80
   8463a:	d105      	bne.n	84648 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8463c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84640:	2b40      	cmp	r3, #64	; 0x40
   84642:	d00a      	beq.n	8465a <udi_vendor_setup+0x2a>
	return false; // Not supported request
   84644:	2000      	movs	r0, #0
}
   84646:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84648:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8464c:	2b40      	cmp	r3, #64	; 0x40
   8464e:	d001      	beq.n	84654 <udi_vendor_setup+0x24>
	return false; // Not supported request
   84650:	2000      	movs	r0, #0
   84652:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84654:	4b03      	ldr	r3, [pc, #12]	; (84664 <udi_vendor_setup+0x34>)
   84656:	4798      	blx	r3
   84658:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8465a:	4b03      	ldr	r3, [pc, #12]	; (84668 <udi_vendor_setup+0x38>)
   8465c:	4798      	blx	r3
   8465e:	bd08      	pop	{r3, pc}
   84660:	20002dec 	.word	0x20002dec
   84664:	000831f5 	.word	0x000831f5
   84668:	000830ad 	.word	0x000830ad

0008466c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8466c:	b510      	push	{r4, lr}
   8466e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84670:	9200      	str	r2, [sp, #0]
   84672:	460b      	mov	r3, r1
   84674:	4602      	mov	r2, r0
   84676:	2100      	movs	r1, #0
   84678:	2081      	movs	r0, #129	; 0x81
   8467a:	4c02      	ldr	r4, [pc, #8]	; (84684 <udi_vendor_bulk_in_run+0x18>)
   8467c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8467e:	b002      	add	sp, #8
   84680:	bd10      	pop	{r4, pc}
   84682:	bf00      	nop
   84684:	00086591 	.word	0x00086591

00084688 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84688:	b510      	push	{r4, lr}
   8468a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   8468c:	9200      	str	r2, [sp, #0]
   8468e:	460b      	mov	r3, r1
   84690:	4602      	mov	r2, r0
   84692:	2100      	movs	r1, #0
   84694:	2002      	movs	r0, #2
   84696:	4c02      	ldr	r4, [pc, #8]	; (846a0 <udi_vendor_bulk_out_run+0x18>)
   84698:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8469a:	b002      	add	sp, #8
   8469c:	bd10      	pop	{r4, pc}
   8469e:	bf00      	nop
   846a0:	00086591 	.word	0x00086591

000846a4 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   846a4:	4b10      	ldr	r3, [pc, #64]	; (846e8 <udc_next_desc_in_iface+0x44>)
   846a6:	681b      	ldr	r3, [r3, #0]
   846a8:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   846aa:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   846ac:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   846ae:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   846b0:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   846b2:	4290      	cmp	r0, r2
   846b4:	d211      	bcs.n	846da <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   846b6:	7843      	ldrb	r3, [r0, #1]
   846b8:	2b04      	cmp	r3, #4
   846ba:	d010      	beq.n	846de <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   846bc:	428b      	cmp	r3, r1
   846be:	d009      	beq.n	846d4 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   846c0:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   846c2:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   846c4:	4290      	cmp	r0, r2
   846c6:	d206      	bcs.n	846d6 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   846c8:	7843      	ldrb	r3, [r0, #1]
   846ca:	2b04      	cmp	r3, #4
   846cc:	d009      	beq.n	846e2 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   846ce:	428b      	cmp	r3, r1
   846d0:	d1f6      	bne.n	846c0 <udc_next_desc_in_iface+0x1c>
   846d2:	e007      	b.n	846e4 <udc_next_desc_in_iface+0x40>
   846d4:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   846d6:	2000      	movs	r0, #0
   846d8:	4770      	bx	lr
   846da:	2000      	movs	r0, #0
   846dc:	4770      	bx	lr
   846de:	2000      	movs	r0, #0
   846e0:	4770      	bx	lr
   846e2:	2000      	movs	r0, #0
}
   846e4:	4770      	bx	lr
   846e6:	bf00      	nop
   846e8:	20002280 	.word	0x20002280

000846ec <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   846ec:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   846ee:	4b03      	ldr	r3, [pc, #12]	; (846fc <udc_valid_address+0x10>)
   846f0:	7898      	ldrb	r0, [r3, #2]
   846f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   846f6:	4b02      	ldr	r3, [pc, #8]	; (84700 <udc_valid_address+0x14>)
   846f8:	4798      	blx	r3
   846fa:	bd08      	pop	{r3, pc}
   846fc:	20002dec 	.word	0x20002dec
   84700:	000862e5 	.word	0x000862e5

00084704 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   84704:	4b19      	ldr	r3, [pc, #100]	; (8476c <udc_update_iface_desc+0x68>)
   84706:	781b      	ldrb	r3, [r3, #0]
   84708:	b34b      	cbz	r3, 8475e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8470a:	4b19      	ldr	r3, [pc, #100]	; (84770 <udc_update_iface_desc+0x6c>)
   8470c:	681b      	ldr	r3, [r3, #0]
   8470e:	681b      	ldr	r3, [r3, #0]
   84710:	791a      	ldrb	r2, [r3, #4]
   84712:	4282      	cmp	r2, r0
   84714:	d925      	bls.n	84762 <udc_update_iface_desc+0x5e>
{
   84716:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84718:	4a16      	ldr	r2, [pc, #88]	; (84774 <udc_update_iface_desc+0x70>)
   8471a:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8471c:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8471e:	441c      	add	r4, r3
	while (ptr_end_desc >
   84720:	42a3      	cmp	r3, r4
   84722:	d220      	bcs.n	84766 <udc_update_iface_desc+0x62>
   84724:	2500      	movs	r5, #0
   84726:	2601      	movs	r6, #1
   84728:	e007      	b.n	8473a <udc_update_iface_desc+0x36>
   8472a:	4a12      	ldr	r2, [pc, #72]	; (84774 <udc_update_iface_desc+0x70>)
   8472c:	6013      	str	r3, [r2, #0]
   8472e:	e00f      	b.n	84750 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   84730:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   84732:	4413      	add	r3, r2
   84734:	4635      	mov	r5, r6
	while (ptr_end_desc >
   84736:	42a3      	cmp	r3, r4
   84738:	d20c      	bcs.n	84754 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8473a:	785a      	ldrb	r2, [r3, #1]
   8473c:	2a04      	cmp	r2, #4
   8473e:	d1f7      	bne.n	84730 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   84740:	789a      	ldrb	r2, [r3, #2]
   84742:	4282      	cmp	r2, r0
   84744:	d1f4      	bne.n	84730 <udc_update_iface_desc+0x2c>
   84746:	78da      	ldrb	r2, [r3, #3]
   84748:	428a      	cmp	r2, r1
   8474a:	d1f1      	bne.n	84730 <udc_update_iface_desc+0x2c>
   8474c:	2d00      	cmp	r5, #0
   8474e:	d1ec      	bne.n	8472a <udc_update_iface_desc+0x26>
				return true; // Interface found
   84750:	2001      	movs	r0, #1
   84752:	e002      	b.n	8475a <udc_update_iface_desc+0x56>
   84754:	4a07      	ldr	r2, [pc, #28]	; (84774 <udc_update_iface_desc+0x70>)
   84756:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   84758:	2000      	movs	r0, #0
}
   8475a:	bc70      	pop	{r4, r5, r6}
   8475c:	4770      	bx	lr
		return false;
   8475e:	2000      	movs	r0, #0
   84760:	4770      	bx	lr
		return false;
   84762:	2000      	movs	r0, #0
   84764:	4770      	bx	lr
	return false; // Interface not found
   84766:	2000      	movs	r0, #0
   84768:	e7f7      	b.n	8475a <udc_update_iface_desc+0x56>
   8476a:	bf00      	nop
   8476c:	2000227f 	.word	0x2000227f
   84770:	20002280 	.word	0x20002280
   84774:	20002284 	.word	0x20002284

00084778 <udc_iface_disable>:
{
   84778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8477c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   8477e:	2100      	movs	r1, #0
   84780:	4b13      	ldr	r3, [pc, #76]	; (847d0 <udc_iface_disable+0x58>)
   84782:	4798      	blx	r3
   84784:	4680      	mov	r8, r0
   84786:	b910      	cbnz	r0, 8478e <udc_iface_disable+0x16>
}
   84788:	4640      	mov	r0, r8
   8478a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8478e:	4b11      	ldr	r3, [pc, #68]	; (847d4 <udc_iface_disable+0x5c>)
   84790:	681b      	ldr	r3, [r3, #0]
   84792:	685b      	ldr	r3, [r3, #4]
   84794:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84798:	f8d9 300c 	ldr.w	r3, [r9, #12]
   8479c:	4798      	blx	r3
   8479e:	4601      	mov	r1, r0
   847a0:	4620      	mov	r0, r4
   847a2:	4b0b      	ldr	r3, [pc, #44]	; (847d0 <udc_iface_disable+0x58>)
   847a4:	4798      	blx	r3
   847a6:	4680      	mov	r8, r0
   847a8:	2800      	cmp	r0, #0
   847aa:	d0ed      	beq.n	84788 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   847ac:	4b0a      	ldr	r3, [pc, #40]	; (847d8 <udc_iface_disable+0x60>)
   847ae:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   847b0:	2605      	movs	r6, #5
   847b2:	4d0a      	ldr	r5, [pc, #40]	; (847dc <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   847b4:	4f0a      	ldr	r7, [pc, #40]	; (847e0 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   847b6:	4631      	mov	r1, r6
   847b8:	4620      	mov	r0, r4
   847ba:	47a8      	blx	r5
			if (NULL == ep_desc) {
   847bc:	4604      	mov	r4, r0
   847be:	b110      	cbz	r0, 847c6 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   847c0:	7880      	ldrb	r0, [r0, #2]
   847c2:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   847c4:	e7f7      	b.n	847b6 <udc_iface_disable+0x3e>
	udi_api->disable();
   847c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   847ca:	4798      	blx	r3
	return true;
   847cc:	e7dc      	b.n	84788 <udc_iface_disable+0x10>
   847ce:	bf00      	nop
   847d0:	00084705 	.word	0x00084705
   847d4:	20002280 	.word	0x20002280
   847d8:	20002284 	.word	0x20002284
   847dc:	000846a5 	.word	0x000846a5
   847e0:	00086349 	.word	0x00086349

000847e4 <udc_iface_enable>:
{
   847e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847e8:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   847ea:	4b10      	ldr	r3, [pc, #64]	; (8482c <udc_iface_enable+0x48>)
   847ec:	4798      	blx	r3
   847ee:	4603      	mov	r3, r0
   847f0:	b1c8      	cbz	r0, 84826 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   847f2:	4b0f      	ldr	r3, [pc, #60]	; (84830 <udc_iface_enable+0x4c>)
   847f4:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   847f6:	2605      	movs	r6, #5
   847f8:	4d0e      	ldr	r5, [pc, #56]	; (84834 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   847fa:	4f0f      	ldr	r7, [pc, #60]	; (84838 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   847fc:	4631      	mov	r1, r6
   847fe:	4620      	mov	r0, r4
   84800:	47a8      	blx	r5
		if (NULL == ep_desc)
   84802:	4604      	mov	r4, r0
   84804:	b138      	cbz	r0, 84816 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   84806:	8882      	ldrh	r2, [r0, #4]
   84808:	78c1      	ldrb	r1, [r0, #3]
   8480a:	7880      	ldrb	r0, [r0, #2]
   8480c:	47b8      	blx	r7
   8480e:	4603      	mov	r3, r0
   84810:	2800      	cmp	r0, #0
   84812:	d1f3      	bne.n	847fc <udc_iface_enable+0x18>
   84814:	e007      	b.n	84826 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   84816:	4b09      	ldr	r3, [pc, #36]	; (8483c <udc_iface_enable+0x58>)
   84818:	681b      	ldr	r3, [r3, #0]
   8481a:	685b      	ldr	r3, [r3, #4]
   8481c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   84820:	681b      	ldr	r3, [r3, #0]
   84822:	4798      	blx	r3
   84824:	4603      	mov	r3, r0
}
   84826:	4618      	mov	r0, r3
   84828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8482c:	00084705 	.word	0x00084705
   84830:	20002284 	.word	0x20002284
   84834:	000846a5 	.word	0x000846a5
   84838:	0008667d 	.word	0x0008667d
   8483c:	20002280 	.word	0x20002280

00084840 <udc_get_interface_desc>:
}
   84840:	4b01      	ldr	r3, [pc, #4]	; (84848 <udc_get_interface_desc+0x8>)
   84842:	6818      	ldr	r0, [r3, #0]
   84844:	4770      	bx	lr
   84846:	bf00      	nop
   84848:	20002284 	.word	0x20002284

0008484c <udc_start>:
{
   8484c:	b508      	push	{r3, lr}
	udd_enable();
   8484e:	4b01      	ldr	r3, [pc, #4]	; (84854 <udc_start+0x8>)
   84850:	4798      	blx	r3
   84852:	bd08      	pop	{r3, pc}
   84854:	000861c9 	.word	0x000861c9

00084858 <udc_reset>:
{
   84858:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   8485a:	4b0d      	ldr	r3, [pc, #52]	; (84890 <udc_reset+0x38>)
   8485c:	781b      	ldrb	r3, [r3, #0]
   8485e:	b183      	cbz	r3, 84882 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84860:	4b0c      	ldr	r3, [pc, #48]	; (84894 <udc_reset+0x3c>)
   84862:	681b      	ldr	r3, [r3, #0]
   84864:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   84866:	791b      	ldrb	r3, [r3, #4]
   84868:	b15b      	cbz	r3, 84882 <udc_reset+0x2a>
   8486a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   8486c:	4e0a      	ldr	r6, [pc, #40]	; (84898 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8486e:	4d09      	ldr	r5, [pc, #36]	; (84894 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   84870:	4620      	mov	r0, r4
   84872:	47b0      	blx	r6
				iface_num++) {
   84874:	3401      	adds	r4, #1
   84876:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84878:	682b      	ldr	r3, [r5, #0]
   8487a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8487c:	791b      	ldrb	r3, [r3, #4]
   8487e:	42a3      	cmp	r3, r4
   84880:	d8f6      	bhi.n	84870 <udc_reset+0x18>
	udc_num_configuration = 0;
   84882:	2300      	movs	r3, #0
   84884:	4a02      	ldr	r2, [pc, #8]	; (84890 <udc_reset+0x38>)
   84886:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   84888:	4a04      	ldr	r2, [pc, #16]	; (8489c <udc_reset+0x44>)
   8488a:	8013      	strh	r3, [r2, #0]
   8488c:	bd70      	pop	{r4, r5, r6, pc}
   8488e:	bf00      	nop
   84890:	2000227f 	.word	0x2000227f
   84894:	20002280 	.word	0x20002280
   84898:	00084779 	.word	0x00084779
   8489c:	2000227a 	.word	0x2000227a

000848a0 <udc_sof_notify>:
{
   848a0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   848a2:	4b0d      	ldr	r3, [pc, #52]	; (848d8 <udc_sof_notify+0x38>)
   848a4:	781b      	ldrb	r3, [r3, #0]
   848a6:	b1b3      	cbz	r3, 848d6 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848a8:	4b0c      	ldr	r3, [pc, #48]	; (848dc <udc_sof_notify+0x3c>)
   848aa:	681b      	ldr	r3, [r3, #0]
   848ac:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   848ae:	7912      	ldrb	r2, [r2, #4]
   848b0:	b18a      	cbz	r2, 848d6 <udc_sof_notify+0x36>
   848b2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848b4:	4d09      	ldr	r5, [pc, #36]	; (848dc <udc_sof_notify+0x3c>)
   848b6:	e006      	b.n	848c6 <udc_sof_notify+0x26>
				iface_num++) {
   848b8:	3401      	adds	r4, #1
   848ba:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848bc:	682b      	ldr	r3, [r5, #0]
   848be:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   848c0:	7912      	ldrb	r2, [r2, #4]
   848c2:	42a2      	cmp	r2, r4
   848c4:	d907      	bls.n	848d6 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   848c6:	685b      	ldr	r3, [r3, #4]
   848c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   848cc:	691b      	ldr	r3, [r3, #16]
   848ce:	2b00      	cmp	r3, #0
   848d0:	d0f2      	beq.n	848b8 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   848d2:	4798      	blx	r3
   848d4:	e7f0      	b.n	848b8 <udc_sof_notify+0x18>
   848d6:	bd38      	pop	{r3, r4, r5, pc}
   848d8:	2000227f 	.word	0x2000227f
   848dc:	20002280 	.word	0x20002280

000848e0 <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   848e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   848e2:	4b95      	ldr	r3, [pc, #596]	; (84b38 <udc_process_setup+0x258>)
   848e4:	2200      	movs	r2, #0
   848e6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   848e8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   848ea:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   848ec:	881b      	ldrh	r3, [r3, #0]
   848ee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   848f2:	d019      	beq.n	84928 <udc_process_setup+0x48>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   848f4:	4b90      	ldr	r3, [pc, #576]	; (84b38 <udc_process_setup+0x258>)
   848f6:	781b      	ldrb	r3, [r3, #0]
   848f8:	f013 0f80 	tst.w	r3, #128	; 0x80
   848fc:	d11a      	bne.n	84934 <udc_process_setup+0x54>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   848fe:	f013 0f60 	tst.w	r3, #96	; 0x60
   84902:	f000 8145 	beq.w	84b90 <udc_process_setup+0x2b0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   84906:	4b8c      	ldr	r3, [pc, #560]	; (84b38 <udc_process_setup+0x258>)
   84908:	781b      	ldrb	r3, [r3, #0]
   8490a:	f003 031f 	and.w	r3, r3, #31
   8490e:	2b01      	cmp	r3, #1
   84910:	f000 8211 	beq.w	84d36 <udc_process_setup+0x456>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   84914:	4b88      	ldr	r3, [pc, #544]	; (84b38 <udc_process_setup+0x258>)
   84916:	781b      	ldrb	r3, [r3, #0]
   84918:	f003 031f 	and.w	r3, r3, #31
   8491c:	2b02      	cmp	r3, #2
   8491e:	f000 8295 	beq.w	84e4c <udc_process_setup+0x56c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   84922:	2300      	movs	r3, #0
#endif
}
   84924:	4618      	mov	r0, r3
   84926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   84928:	21ae      	movs	r1, #174	; 0xae
   8492a:	4884      	ldr	r0, [pc, #528]	; (84b3c <udc_process_setup+0x25c>)
   8492c:	4b84      	ldr	r3, [pc, #528]	; (84b40 <udc_process_setup+0x260>)
   8492e:	4798      	blx	r3
		return true;
   84930:	2301      	movs	r3, #1
   84932:	e7f7      	b.n	84924 <udc_process_setup+0x44>
		if (udd_g_ctrlreq.req.wLength == 0) {
   84934:	4a80      	ldr	r2, [pc, #512]	; (84b38 <udc_process_setup+0x258>)
   84936:	88d2      	ldrh	r2, [r2, #6]
   84938:	2a00      	cmp	r2, #0
   8493a:	f000 82b0 	beq.w	84e9e <udc_process_setup+0x5be>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8493e:	f013 0f60 	tst.w	r3, #96	; 0x60
   84942:	d1e0      	bne.n	84906 <udc_process_setup+0x26>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84944:	f013 031f 	ands.w	r3, r3, #31
   84948:	d107      	bne.n	8495a <udc_process_setup+0x7a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8494a:	497b      	ldr	r1, [pc, #492]	; (84b38 <udc_process_setup+0x258>)
   8494c:	7849      	ldrb	r1, [r1, #1]
   8494e:	2906      	cmp	r1, #6
   84950:	d016      	beq.n	84980 <udc_process_setup+0xa0>
   84952:	2908      	cmp	r1, #8
   84954:	f000 80bf 	beq.w	84ad6 <udc_process_setup+0x1f6>
   84958:	b159      	cbz	r1, 84972 <udc_process_setup+0x92>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8495a:	2b01      	cmp	r3, #1
   8495c:	f000 80c3 	beq.w	84ae6 <udc_process_setup+0x206>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84960:	2b02      	cmp	r3, #2
   84962:	d1d0      	bne.n	84906 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   84964:	4b74      	ldr	r3, [pc, #464]	; (84b38 <udc_process_setup+0x258>)
   84966:	785b      	ldrb	r3, [r3, #1]
   84968:	2b00      	cmp	r3, #0
   8496a:	f000 8103 	beq.w	84b74 <udc_process_setup+0x294>
	return false;
   8496e:	2300      	movs	r3, #0
   84970:	e1d3      	b.n	84d1a <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   84972:	2a02      	cmp	r2, #2
   84974:	d1ce      	bne.n	84914 <udc_process_setup+0x34>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   84976:	2102      	movs	r1, #2
   84978:	4872      	ldr	r0, [pc, #456]	; (84b44 <udc_process_setup+0x264>)
   8497a:	4b71      	ldr	r3, [pc, #452]	; (84b40 <udc_process_setup+0x260>)
   8497c:	4798      	blx	r3
   8497e:	e124      	b.n	84bca <udc_process_setup+0x2ea>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84980:	4b6d      	ldr	r3, [pc, #436]	; (84b38 <udc_process_setup+0x258>)
   84982:	885a      	ldrh	r2, [r3, #2]
   84984:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84986:	0a13      	lsrs	r3, r2, #8
   84988:	3b01      	subs	r3, #1
   8498a:	2b0e      	cmp	r3, #14
   8498c:	f200 8214 	bhi.w	84db8 <udc_process_setup+0x4d8>
   84990:	e8df f013 	tbh	[pc, r3, lsl #1]
   84994:	0023000f 	.word	0x0023000f
   84998:	0212007b 	.word	0x0212007b
   8499c:	00450212 	.word	0x00450212
   849a0:	02120053 	.word	0x02120053
   849a4:	02120212 	.word	0x02120212
   849a8:	02120212 	.word	0x02120212
   849ac:	02120212 	.word	0x02120212
   849b0:	0076      	.short	0x0076
		if (!udd_is_high_speed()) {
   849b2:	4b65      	ldr	r3, [pc, #404]	; (84b48 <udc_process_setup+0x268>)
   849b4:	4798      	blx	r3
   849b6:	b928      	cbnz	r0, 849c4 <udc_process_setup+0xe4>
				(uint8_t *) udc_config.confdev_hs,
   849b8:	4b64      	ldr	r3, [pc, #400]	; (84b4c <udc_process_setup+0x26c>)
   849ba:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   849bc:	7801      	ldrb	r1, [r0, #0]
   849be:	4b60      	ldr	r3, [pc, #384]	; (84b40 <udc_process_setup+0x260>)
   849c0:	4798      	blx	r3
   849c2:	e031      	b.n	84a28 <udc_process_setup+0x148>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   849c4:	4b61      	ldr	r3, [pc, #388]	; (84b4c <udc_process_setup+0x26c>)
   849c6:	681a      	ldr	r2, [r3, #0]
   849c8:	2110      	movs	r1, #16
   849ca:	7091      	strb	r1, [r2, #2]
   849cc:	2102      	movs	r1, #2
   849ce:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   849d0:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   849d2:	7801      	ldrb	r1, [r0, #0]
   849d4:	4b5a      	ldr	r3, [pc, #360]	; (84b40 <udc_process_setup+0x260>)
   849d6:	4798      	blx	r3
   849d8:	e026      	b.n	84a28 <udc_process_setup+0x148>
		if (udd_is_high_speed()) {
   849da:	4b5b      	ldr	r3, [pc, #364]	; (84b48 <udc_process_setup+0x268>)
   849dc:	4798      	blx	r3
   849de:	b180      	cbz	r0, 84a02 <udc_process_setup+0x122>
			if (conf_num >= udc_config.confdev_hs->
   849e0:	4b5a      	ldr	r3, [pc, #360]	; (84b4c <udc_process_setup+0x26c>)
   849e2:	689b      	ldr	r3, [r3, #8]
   849e4:	7c5b      	ldrb	r3, [r3, #17]
   849e6:	42a3      	cmp	r3, r4
   849e8:	d98d      	bls.n	84906 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   849ea:	4b58      	ldr	r3, [pc, #352]	; (84b4c <udc_process_setup+0x26c>)
   849ec:	691b      	ldr	r3, [r3, #16]
   849ee:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   849f2:	8841      	ldrh	r1, [r0, #2]
   849f4:	4b52      	ldr	r3, [pc, #328]	; (84b40 <udc_process_setup+0x260>)
   849f6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   849f8:	4b4f      	ldr	r3, [pc, #316]	; (84b38 <udc_process_setup+0x258>)
   849fa:	689b      	ldr	r3, [r3, #8]
   849fc:	2202      	movs	r2, #2
   849fe:	705a      	strb	r2, [r3, #1]
   84a00:	e012      	b.n	84a28 <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   84a02:	4b52      	ldr	r3, [pc, #328]	; (84b4c <udc_process_setup+0x26c>)
   84a04:	681b      	ldr	r3, [r3, #0]
   84a06:	7c5b      	ldrb	r3, [r3, #17]
   84a08:	42a3      	cmp	r3, r4
   84a0a:	f67f af7c 	bls.w	84906 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84a0e:	4b4f      	ldr	r3, [pc, #316]	; (84b4c <udc_process_setup+0x26c>)
   84a10:	685b      	ldr	r3, [r3, #4]
   84a12:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a16:	8841      	ldrh	r1, [r0, #2]
   84a18:	4b49      	ldr	r3, [pc, #292]	; (84b40 <udc_process_setup+0x260>)
   84a1a:	4798      	blx	r3
   84a1c:	e7ec      	b.n	849f8 <udc_process_setup+0x118>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84a1e:	4b4b      	ldr	r3, [pc, #300]	; (84b4c <udc_process_setup+0x26c>)
   84a20:	68d8      	ldr	r0, [r3, #12]
   84a22:	7801      	ldrb	r1, [r0, #0]
   84a24:	4b46      	ldr	r3, [pc, #280]	; (84b40 <udc_process_setup+0x260>)
   84a26:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84a28:	4b43      	ldr	r3, [pc, #268]	; (84b38 <udc_process_setup+0x258>)
   84a2a:	88da      	ldrh	r2, [r3, #6]
   84a2c:	899b      	ldrh	r3, [r3, #12]
   84a2e:	4293      	cmp	r3, r2
   84a30:	f240 80cb 	bls.w	84bca <udc_process_setup+0x2ea>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84a34:	4b40      	ldr	r3, [pc, #256]	; (84b38 <udc_process_setup+0x258>)
   84a36:	819a      	strh	r2, [r3, #12]
   84a38:	e0c7      	b.n	84bca <udc_process_setup+0x2ea>
		if (!udd_is_high_speed()) {
   84a3a:	4b43      	ldr	r3, [pc, #268]	; (84b48 <udc_process_setup+0x268>)
   84a3c:	4798      	blx	r3
   84a3e:	b988      	cbnz	r0, 84a64 <udc_process_setup+0x184>
			if (conf_num >= udc_config.confdev_hs->
   84a40:	4b42      	ldr	r3, [pc, #264]	; (84b4c <udc_process_setup+0x26c>)
   84a42:	689b      	ldr	r3, [r3, #8]
   84a44:	7c5b      	ldrb	r3, [r3, #17]
   84a46:	42a3      	cmp	r3, r4
   84a48:	f67f af5d 	bls.w	84906 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84a4c:	4b3f      	ldr	r3, [pc, #252]	; (84b4c <udc_process_setup+0x26c>)
   84a4e:	691b      	ldr	r3, [r3, #16]
   84a50:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a54:	8841      	ldrh	r1, [r0, #2]
   84a56:	4b3a      	ldr	r3, [pc, #232]	; (84b40 <udc_process_setup+0x260>)
   84a58:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84a5a:	4b37      	ldr	r3, [pc, #220]	; (84b38 <udc_process_setup+0x258>)
   84a5c:	689b      	ldr	r3, [r3, #8]
   84a5e:	2207      	movs	r2, #7
   84a60:	705a      	strb	r2, [r3, #1]
   84a62:	e7e1      	b.n	84a28 <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   84a64:	4b39      	ldr	r3, [pc, #228]	; (84b4c <udc_process_setup+0x26c>)
   84a66:	681b      	ldr	r3, [r3, #0]
   84a68:	7c5b      	ldrb	r3, [r3, #17]
   84a6a:	42a3      	cmp	r3, r4
   84a6c:	f67f af4b 	bls.w	84906 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84a70:	4b36      	ldr	r3, [pc, #216]	; (84b4c <udc_process_setup+0x26c>)
   84a72:	685b      	ldr	r3, [r3, #4]
   84a74:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a78:	8841      	ldrh	r1, [r0, #2]
   84a7a:	4b31      	ldr	r3, [pc, #196]	; (84b40 <udc_process_setup+0x260>)
   84a7c:	4798      	blx	r3
   84a7e:	e7ec      	b.n	84a5a <udc_process_setup+0x17a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84a80:	2121      	movs	r1, #33	; 0x21
   84a82:	4833      	ldr	r0, [pc, #204]	; (84b50 <udc_process_setup+0x270>)
   84a84:	4b2e      	ldr	r3, [pc, #184]	; (84b40 <udc_process_setup+0x260>)
   84a86:	4798      	blx	r3
   84a88:	e7ce      	b.n	84a28 <udc_process_setup+0x148>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84a8a:	b2d2      	uxtb	r2, r2
   84a8c:	2a03      	cmp	r2, #3
   84a8e:	f63f af3a 	bhi.w	84906 <udc_process_setup+0x26>
   84a92:	e8df f012 	tbh	[pc, r2, lsl #1]
   84a96:	0007      	.short	0x0007
   84a98:	0208000c 	.word	0x0208000c
   84a9c:	0004      	.short	0x0004
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   84a9e:	2420      	movs	r4, #32
		str = udc_get_string_serial_name();
   84aa0:	4a2c      	ldr	r2, [pc, #176]	; (84b54 <udc_process_setup+0x274>)
   84aa2:	e006      	b.n	84ab2 <udc_process_setup+0x1d2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84aa4:	2104      	movs	r1, #4
   84aa6:	482c      	ldr	r0, [pc, #176]	; (84b58 <udc_process_setup+0x278>)
   84aa8:	4b25      	ldr	r3, [pc, #148]	; (84b40 <udc_process_setup+0x260>)
   84aaa:	4798      	blx	r3
   84aac:	e7bc      	b.n	84a28 <udc_process_setup+0x148>
		str = udc_string_manufacturer_name;
   84aae:	4a2b      	ldr	r2, [pc, #172]	; (84b5c <udc_process_setup+0x27c>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84ab0:	2415      	movs	r4, #21
   84ab2:	3a01      	subs	r2, #1
   84ab4:	492a      	ldr	r1, [pc, #168]	; (84b60 <udc_process_setup+0x280>)
   84ab6:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84ab8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   84abc:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   84ac0:	3301      	adds	r3, #1
   84ac2:	b2db      	uxtb	r3, r3
   84ac4:	429c      	cmp	r4, r3
   84ac6:	d8f7      	bhi.n	84ab8 <udc_process_setup+0x1d8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84ac8:	0061      	lsls	r1, r4, #1
   84aca:	3102      	adds	r1, #2
   84acc:	4824      	ldr	r0, [pc, #144]	; (84b60 <udc_process_setup+0x280>)
   84ace:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   84ad0:	4b1b      	ldr	r3, [pc, #108]	; (84b40 <udc_process_setup+0x260>)
   84ad2:	4798      	blx	r3
   84ad4:	e7a8      	b.n	84a28 <udc_process_setup+0x148>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84ad6:	2a01      	cmp	r2, #1
   84ad8:	f47f af1c 	bne.w	84914 <udc_process_setup+0x34>
	udd_set_setup_payload(&udc_num_configuration,1);
   84adc:	2101      	movs	r1, #1
   84ade:	4821      	ldr	r0, [pc, #132]	; (84b64 <udc_process_setup+0x284>)
   84ae0:	4b17      	ldr	r3, [pc, #92]	; (84b40 <udc_process_setup+0x260>)
   84ae2:	4798      	blx	r3
   84ae4:	e071      	b.n	84bca <udc_process_setup+0x2ea>
			switch (udd_g_ctrlreq.req.bRequest) {
   84ae6:	4914      	ldr	r1, [pc, #80]	; (84b38 <udc_process_setup+0x258>)
   84ae8:	7849      	ldrb	r1, [r1, #1]
   84aea:	290a      	cmp	r1, #10
   84aec:	f47f af38 	bne.w	84960 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84af0:	2a01      	cmp	r2, #1
   84af2:	f040 8120 	bne.w	84d36 <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   84af6:	4b1b      	ldr	r3, [pc, #108]	; (84b64 <udc_process_setup+0x284>)
   84af8:	781b      	ldrb	r3, [r3, #0]
   84afa:	2b00      	cmp	r3, #0
   84afc:	f000 811b 	beq.w	84d36 <udc_process_setup+0x456>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84b00:	4b0d      	ldr	r3, [pc, #52]	; (84b38 <udc_process_setup+0x258>)
   84b02:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84b04:	4b18      	ldr	r3, [pc, #96]	; (84b68 <udc_process_setup+0x288>)
   84b06:	681d      	ldr	r5, [r3, #0]
   84b08:	682b      	ldr	r3, [r5, #0]
   84b0a:	791b      	ldrb	r3, [r3, #4]
   84b0c:	42a3      	cmp	r3, r4
   84b0e:	f240 8112 	bls.w	84d36 <udc_process_setup+0x456>
	if (!udc_update_iface_desc(iface_num, 0)) {
   84b12:	2100      	movs	r1, #0
   84b14:	4620      	mov	r0, r4
   84b16:	4b15      	ldr	r3, [pc, #84]	; (84b6c <udc_process_setup+0x28c>)
   84b18:	4798      	blx	r3
   84b1a:	2800      	cmp	r0, #0
   84b1c:	f43f aef3 	beq.w	84906 <udc_process_setup+0x26>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84b20:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   84b22:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   84b26:	68db      	ldr	r3, [r3, #12]
   84b28:	4798      	blx	r3
   84b2a:	4b11      	ldr	r3, [pc, #68]	; (84b70 <udc_process_setup+0x290>)
   84b2c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   84b2e:	2101      	movs	r1, #1
   84b30:	4618      	mov	r0, r3
   84b32:	4b03      	ldr	r3, [pc, #12]	; (84b40 <udc_process_setup+0x260>)
   84b34:	4798      	blx	r3
   84b36:	e048      	b.n	84bca <udc_process_setup+0x2ea>
   84b38:	20002dec 	.word	0x20002dec
   84b3c:	20000640 	.word	0x20000640
   84b40:	0008633d 	.word	0x0008633d
   84b44:	2000227a 	.word	0x2000227a
   84b48:	000862d5 	.word	0x000862d5
   84b4c:	200001d4 	.word	0x200001d4
   84b50:	0008da0c 	.word	0x0008da0c
   84b54:	200006f0 	.word	0x200006f0
   84b58:	20000610 	.word	0x20000610
   84b5c:	20000614 	.word	0x20000614
   84b60:	200005cc 	.word	0x200005cc
   84b64:	2000227f 	.word	0x2000227f
   84b68:	20002280 	.word	0x20002280
   84b6c:	00084705 	.word	0x00084705
   84b70:	2000227e 	.word	0x2000227e
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84b74:	2a02      	cmp	r2, #2
   84b76:	f47f aecd 	bne.w	84914 <udc_process_setup+0x34>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84b7a:	4b92      	ldr	r3, [pc, #584]	; (84dc4 <udc_process_setup+0x4e4>)
   84b7c:	7918      	ldrb	r0, [r3, #4]
   84b7e:	4b92      	ldr	r3, [pc, #584]	; (84dc8 <udc_process_setup+0x4e8>)
   84b80:	4798      	blx	r3
   84b82:	4b92      	ldr	r3, [pc, #584]	; (84dcc <udc_process_setup+0x4ec>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84b84:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84b86:	2102      	movs	r1, #2
   84b88:	4618      	mov	r0, r3
   84b8a:	4b91      	ldr	r3, [pc, #580]	; (84dd0 <udc_process_setup+0x4f0>)
   84b8c:	4798      	blx	r3
   84b8e:	e01c      	b.n	84bca <udc_process_setup+0x2ea>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84b90:	f013 031f 	ands.w	r3, r3, #31
   84b94:	f040 80b5 	bne.w	84d02 <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   84b98:	4a8a      	ldr	r2, [pc, #552]	; (84dc4 <udc_process_setup+0x4e4>)
   84b9a:	7852      	ldrb	r2, [r2, #1]
   84b9c:	3a01      	subs	r2, #1
   84b9e:	2a08      	cmp	r2, #8
   84ba0:	f200 80af 	bhi.w	84d02 <udc_process_setup+0x422>
   84ba4:	e8df f012 	tbh	[pc, r2, lsl #1]
   84ba8:	00ad0013 	.word	0x00ad0013
   84bac:	00ad0023 	.word	0x00ad0023
   84bb0:	00ad0009 	.word	0x00ad0009
   84bb4:	00ad00ad 	.word	0x00ad00ad
   84bb8:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   84bba:	4b82      	ldr	r3, [pc, #520]	; (84dc4 <udc_process_setup+0x4e4>)
   84bbc:	88db      	ldrh	r3, [r3, #6]
   84bbe:	2b00      	cmp	r3, #0
   84bc0:	f47f aea8 	bne.w	84914 <udc_process_setup+0x34>
	udd_g_ctrlreq.callback = udc_valid_address;
   84bc4:	4a83      	ldr	r2, [pc, #524]	; (84dd4 <udc_process_setup+0x4f4>)
   84bc6:	4b7f      	ldr	r3, [pc, #508]	; (84dc4 <udc_process_setup+0x4e4>)
   84bc8:	611a      	str	r2, [r3, #16]
			return true;
   84bca:	2301      	movs	r3, #1
   84bcc:	e6aa      	b.n	84924 <udc_process_setup+0x44>
	if (udd_g_ctrlreq.req.wLength) {
   84bce:	4b7d      	ldr	r3, [pc, #500]	; (84dc4 <udc_process_setup+0x4e4>)
   84bd0:	88db      	ldrh	r3, [r3, #6]
   84bd2:	2b00      	cmp	r3, #0
   84bd4:	f47f ae9e 	bne.w	84914 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84bd8:	4b7a      	ldr	r3, [pc, #488]	; (84dc4 <udc_process_setup+0x4e4>)
   84bda:	885b      	ldrh	r3, [r3, #2]
   84bdc:	2b01      	cmp	r3, #1
   84bde:	f47f ae99 	bne.w	84914 <udc_process_setup+0x34>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84be2:	4a7d      	ldr	r2, [pc, #500]	; (84dd8 <udc_process_setup+0x4f8>)
   84be4:	8813      	ldrh	r3, [r2, #0]
   84be6:	f023 0302 	bic.w	r3, r3, #2
   84bea:	8013      	strh	r3, [r2, #0]
   84bec:	e7ed      	b.n	84bca <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   84bee:	4b75      	ldr	r3, [pc, #468]	; (84dc4 <udc_process_setup+0x4e4>)
   84bf0:	88db      	ldrh	r3, [r3, #6]
   84bf2:	2b00      	cmp	r3, #0
   84bf4:	f47f ae8e 	bne.w	84914 <udc_process_setup+0x34>
	switch (udd_g_ctrlreq.req.wValue) {
   84bf8:	4b72      	ldr	r3, [pc, #456]	; (84dc4 <udc_process_setup+0x4e4>)
   84bfa:	885b      	ldrh	r3, [r3, #2]
   84bfc:	2b02      	cmp	r3, #2
   84bfe:	f040 80dd 	bne.w	84dbc <udc_process_setup+0x4dc>
		if (!udd_is_high_speed()) {
   84c02:	4b76      	ldr	r3, [pc, #472]	; (84ddc <udc_process_setup+0x4fc>)
   84c04:	4798      	blx	r3
   84c06:	2800      	cmp	r0, #0
   84c08:	f43f ae7d 	beq.w	84906 <udc_process_setup+0x26>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84c0c:	4b6d      	ldr	r3, [pc, #436]	; (84dc4 <udc_process_setup+0x4e4>)
   84c0e:	791b      	ldrb	r3, [r3, #4]
   84c10:	2b00      	cmp	r3, #0
   84c12:	f47f ae78 	bne.w	84906 <udc_process_setup+0x26>
		udc_reset();
   84c16:	4b72      	ldr	r3, [pc, #456]	; (84de0 <udc_process_setup+0x500>)
   84c18:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84c1a:	4b6a      	ldr	r3, [pc, #424]	; (84dc4 <udc_process_setup+0x4e4>)
   84c1c:	889b      	ldrh	r3, [r3, #4]
   84c1e:	0a1b      	lsrs	r3, r3, #8
   84c20:	3b01      	subs	r3, #1
   84c22:	2b03      	cmp	r3, #3
   84c24:	f200 80cc 	bhi.w	84dc0 <udc_process_setup+0x4e0>
   84c28:	e8df f003 	tbb	[pc, r3]
   84c2c:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84c30:	4a6c      	ldr	r2, [pc, #432]	; (84de4 <udc_process_setup+0x504>)
   84c32:	4b64      	ldr	r3, [pc, #400]	; (84dc4 <udc_process_setup+0x4e4>)
   84c34:	611a      	str	r2, [r3, #16]
   84c36:	e7c8      	b.n	84bca <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84c38:	4a6b      	ldr	r2, [pc, #428]	; (84de8 <udc_process_setup+0x508>)
   84c3a:	4b62      	ldr	r3, [pc, #392]	; (84dc4 <udc_process_setup+0x4e4>)
   84c3c:	611a      	str	r2, [r3, #16]
   84c3e:	e7c4      	b.n	84bca <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84c40:	4a6a      	ldr	r2, [pc, #424]	; (84dec <udc_process_setup+0x50c>)
   84c42:	4b60      	ldr	r3, [pc, #384]	; (84dc4 <udc_process_setup+0x4e4>)
   84c44:	611a      	str	r2, [r3, #16]
   84c46:	e7c0      	b.n	84bca <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84c48:	4a69      	ldr	r2, [pc, #420]	; (84df0 <udc_process_setup+0x510>)
   84c4a:	4b5e      	ldr	r3, [pc, #376]	; (84dc4 <udc_process_setup+0x4e4>)
   84c4c:	611a      	str	r2, [r3, #16]
   84c4e:	e7bc      	b.n	84bca <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   84c50:	4b5c      	ldr	r3, [pc, #368]	; (84dc4 <udc_process_setup+0x4e4>)
   84c52:	88db      	ldrh	r3, [r3, #6]
   84c54:	2b00      	cmp	r3, #0
   84c56:	f47f ae5d 	bne.w	84914 <udc_process_setup+0x34>
	if (!udd_getaddress()) {
   84c5a:	4b66      	ldr	r3, [pc, #408]	; (84df4 <udc_process_setup+0x514>)
   84c5c:	4798      	blx	r3
   84c5e:	2800      	cmp	r0, #0
   84c60:	f43f ae51 	beq.w	84906 <udc_process_setup+0x26>
	if (udd_is_high_speed()) {
   84c64:	4b5d      	ldr	r3, [pc, #372]	; (84ddc <udc_process_setup+0x4fc>)
   84c66:	4798      	blx	r3
   84c68:	2800      	cmp	r0, #0
   84c6a:	d036      	beq.n	84cda <udc_process_setup+0x3fa>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84c6c:	4b55      	ldr	r3, [pc, #340]	; (84dc4 <udc_process_setup+0x4e4>)
   84c6e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   84c70:	4b61      	ldr	r3, [pc, #388]	; (84df8 <udc_process_setup+0x518>)
   84c72:	689b      	ldr	r3, [r3, #8]
   84c74:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84c76:	429a      	cmp	r2, r3
   84c78:	f73f ae45 	bgt.w	84906 <udc_process_setup+0x26>
	udc_reset();
   84c7c:	4b58      	ldr	r3, [pc, #352]	; (84de0 <udc_process_setup+0x500>)
   84c7e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84c80:	4b50      	ldr	r3, [pc, #320]	; (84dc4 <udc_process_setup+0x4e4>)
   84c82:	789b      	ldrb	r3, [r3, #2]
   84c84:	4a5d      	ldr	r2, [pc, #372]	; (84dfc <udc_process_setup+0x51c>)
   84c86:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   84c88:	2b00      	cmp	r3, #0
   84c8a:	d09e      	beq.n	84bca <udc_process_setup+0x2ea>
	if (udd_is_high_speed()) {
   84c8c:	4b53      	ldr	r3, [pc, #332]	; (84ddc <udc_process_setup+0x4fc>)
   84c8e:	4798      	blx	r3
   84c90:	2800      	cmp	r0, #0
   84c92:	d02a      	beq.n	84cea <udc_process_setup+0x40a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84c94:	4b59      	ldr	r3, [pc, #356]	; (84dfc <udc_process_setup+0x51c>)
   84c96:	781b      	ldrb	r3, [r3, #0]
   84c98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84c9c:	3b01      	subs	r3, #1
   84c9e:	4a56      	ldr	r2, [pc, #344]	; (84df8 <udc_process_setup+0x518>)
   84ca0:	6912      	ldr	r2, [r2, #16]
   84ca2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84ca6:	4a56      	ldr	r2, [pc, #344]	; (84e00 <udc_process_setup+0x520>)
   84ca8:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84caa:	4b55      	ldr	r3, [pc, #340]	; (84e00 <udc_process_setup+0x520>)
   84cac:	681b      	ldr	r3, [r3, #0]
   84cae:	681b      	ldr	r3, [r3, #0]
   84cb0:	791b      	ldrb	r3, [r3, #4]
   84cb2:	2b00      	cmp	r3, #0
   84cb4:	d089      	beq.n	84bca <udc_process_setup+0x2ea>
   84cb6:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   84cb8:	4627      	mov	r7, r4
   84cba:	4e52      	ldr	r6, [pc, #328]	; (84e04 <udc_process_setup+0x524>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84cbc:	4d50      	ldr	r5, [pc, #320]	; (84e00 <udc_process_setup+0x520>)
		if (!udc_iface_enable(iface_num, 0)) {
   84cbe:	4639      	mov	r1, r7
   84cc0:	4620      	mov	r0, r4
   84cc2:	47b0      	blx	r6
   84cc4:	2800      	cmp	r0, #0
   84cc6:	f43f ae1e 	beq.w	84906 <udc_process_setup+0x26>
			iface_num++) {
   84cca:	3401      	adds	r4, #1
   84ccc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84cce:	682b      	ldr	r3, [r5, #0]
   84cd0:	681b      	ldr	r3, [r3, #0]
   84cd2:	791b      	ldrb	r3, [r3, #4]
   84cd4:	42a3      	cmp	r3, r4
   84cd6:	d8f2      	bhi.n	84cbe <udc_process_setup+0x3de>
   84cd8:	e777      	b.n	84bca <udc_process_setup+0x2ea>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84cda:	4b3a      	ldr	r3, [pc, #232]	; (84dc4 <udc_process_setup+0x4e4>)
   84cdc:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   84cde:	4b46      	ldr	r3, [pc, #280]	; (84df8 <udc_process_setup+0x518>)
   84ce0:	681b      	ldr	r3, [r3, #0]
   84ce2:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84ce4:	429a      	cmp	r2, r3
   84ce6:	ddc9      	ble.n	84c7c <udc_process_setup+0x39c>
   84ce8:	e60d      	b.n	84906 <udc_process_setup+0x26>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84cea:	4b44      	ldr	r3, [pc, #272]	; (84dfc <udc_process_setup+0x51c>)
   84cec:	781b      	ldrb	r3, [r3, #0]
   84cee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84cf2:	3b01      	subs	r3, #1
   84cf4:	4a40      	ldr	r2, [pc, #256]	; (84df8 <udc_process_setup+0x518>)
   84cf6:	6852      	ldr	r2, [r2, #4]
   84cf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84cfc:	4a40      	ldr	r2, [pc, #256]	; (84e00 <udc_process_setup+0x520>)
   84cfe:	6013      	str	r3, [r2, #0]
   84d00:	e7d3      	b.n	84caa <udc_process_setup+0x3ca>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84d02:	2b01      	cmp	r3, #1
   84d04:	d00d      	beq.n	84d22 <udc_process_setup+0x442>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84d06:	2b02      	cmp	r3, #2
   84d08:	f47f adfd 	bne.w	84906 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   84d0c:	4b2d      	ldr	r3, [pc, #180]	; (84dc4 <udc_process_setup+0x4e4>)
   84d0e:	785b      	ldrb	r3, [r3, #1]
   84d10:	2b01      	cmp	r3, #1
   84d12:	d02e      	beq.n	84d72 <udc_process_setup+0x492>
   84d14:	2b03      	cmp	r3, #3
   84d16:	d03c      	beq.n	84d92 <udc_process_setup+0x4b2>
	return false;
   84d18:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   84d1a:	2b00      	cmp	r3, #0
   84d1c:	f47f ae02 	bne.w	84924 <udc_process_setup+0x44>
   84d20:	e5f1      	b.n	84906 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   84d22:	4a28      	ldr	r2, [pc, #160]	; (84dc4 <udc_process_setup+0x4e4>)
   84d24:	7852      	ldrb	r2, [r2, #1]
   84d26:	2a0b      	cmp	r2, #11
   84d28:	d1ed      	bne.n	84d06 <udc_process_setup+0x426>
	if (udd_g_ctrlreq.req.wLength) {
   84d2a:	4b26      	ldr	r3, [pc, #152]	; (84dc4 <udc_process_setup+0x4e4>)
   84d2c:	88db      	ldrh	r3, [r3, #6]
   84d2e:	b913      	cbnz	r3, 84d36 <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   84d30:	4b32      	ldr	r3, [pc, #200]	; (84dfc <udc_process_setup+0x51c>)
   84d32:	781b      	ldrb	r3, [r3, #0]
   84d34:	b973      	cbnz	r3, 84d54 <udc_process_setup+0x474>
	if (0 == udc_num_configuration) {
   84d36:	4b31      	ldr	r3, [pc, #196]	; (84dfc <udc_process_setup+0x51c>)
   84d38:	781b      	ldrb	r3, [r3, #0]
   84d3a:	2b00      	cmp	r3, #0
   84d3c:	f000 80b1 	beq.w	84ea2 <udc_process_setup+0x5c2>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84d40:	4b20      	ldr	r3, [pc, #128]	; (84dc4 <udc_process_setup+0x4e4>)
   84d42:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84d44:	4b2e      	ldr	r3, [pc, #184]	; (84e00 <udc_process_setup+0x520>)
   84d46:	681d      	ldr	r5, [r3, #0]
   84d48:	682b      	ldr	r3, [r5, #0]
   84d4a:	791b      	ldrb	r3, [r3, #4]
   84d4c:	42a3      	cmp	r3, r4
   84d4e:	d863      	bhi.n	84e18 <udc_process_setup+0x538>
	return false;
   84d50:	2300      	movs	r3, #0
   84d52:	e5e7      	b.n	84924 <udc_process_setup+0x44>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84d54:	4b1b      	ldr	r3, [pc, #108]	; (84dc4 <udc_process_setup+0x4e4>)
   84d56:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84d58:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   84d5a:	4620      	mov	r0, r4
   84d5c:	4b2a      	ldr	r3, [pc, #168]	; (84e08 <udc_process_setup+0x528>)
   84d5e:	4798      	blx	r3
   84d60:	2800      	cmp	r0, #0
   84d62:	f43f add0 	beq.w	84906 <udc_process_setup+0x26>
	return udc_iface_enable(iface_num, setting_num);
   84d66:	b2e9      	uxtb	r1, r5
   84d68:	4620      	mov	r0, r4
   84d6a:	4b26      	ldr	r3, [pc, #152]	; (84e04 <udc_process_setup+0x524>)
   84d6c:	4798      	blx	r3
   84d6e:	4603      	mov	r3, r0
   84d70:	e7d3      	b.n	84d1a <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   84d72:	4b14      	ldr	r3, [pc, #80]	; (84dc4 <udc_process_setup+0x4e4>)
   84d74:	88db      	ldrh	r3, [r3, #6]
   84d76:	2b00      	cmp	r3, #0
   84d78:	f47f adcc 	bne.w	84914 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84d7c:	4b11      	ldr	r3, [pc, #68]	; (84dc4 <udc_process_setup+0x4e4>)
   84d7e:	885b      	ldrh	r3, [r3, #2]
   84d80:	2b00      	cmp	r3, #0
   84d82:	f47f adc7 	bne.w	84914 <udc_process_setup+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84d86:	4b0f      	ldr	r3, [pc, #60]	; (84dc4 <udc_process_setup+0x4e4>)
   84d88:	7918      	ldrb	r0, [r3, #4]
   84d8a:	4b20      	ldr	r3, [pc, #128]	; (84e0c <udc_process_setup+0x52c>)
   84d8c:	4798      	blx	r3
   84d8e:	4603      	mov	r3, r0
   84d90:	e7c3      	b.n	84d1a <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   84d92:	4b0c      	ldr	r3, [pc, #48]	; (84dc4 <udc_process_setup+0x4e4>)
   84d94:	88db      	ldrh	r3, [r3, #6]
   84d96:	2b00      	cmp	r3, #0
   84d98:	f47f adbc 	bne.w	84914 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84d9c:	4b09      	ldr	r3, [pc, #36]	; (84dc4 <udc_process_setup+0x4e4>)
   84d9e:	885b      	ldrh	r3, [r3, #2]
   84da0:	2b00      	cmp	r3, #0
   84da2:	f47f adb7 	bne.w	84914 <udc_process_setup+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84da6:	4c07      	ldr	r4, [pc, #28]	; (84dc4 <udc_process_setup+0x4e4>)
   84da8:	7920      	ldrb	r0, [r4, #4]
   84daa:	4b19      	ldr	r3, [pc, #100]	; (84e10 <udc_process_setup+0x530>)
   84dac:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84dae:	7920      	ldrb	r0, [r4, #4]
   84db0:	4b18      	ldr	r3, [pc, #96]	; (84e14 <udc_process_setup+0x534>)
   84db2:	4798      	blx	r3
   84db4:	4603      	mov	r3, r0
   84db6:	e7b0      	b.n	84d1a <udc_process_setup+0x43a>
		return false;
   84db8:	2300      	movs	r3, #0
   84dba:	e7ae      	b.n	84d1a <udc_process_setup+0x43a>
		return false;
   84dbc:	2300      	movs	r3, #0
   84dbe:	e7ac      	b.n	84d1a <udc_process_setup+0x43a>
	return false;
   84dc0:	2300      	movs	r3, #0
   84dc2:	e7aa      	b.n	84d1a <udc_process_setup+0x43a>
   84dc4:	20002dec 	.word	0x20002dec
   84dc8:	0008639d 	.word	0x0008639d
   84dcc:	2000227c 	.word	0x2000227c
   84dd0:	0008633d 	.word	0x0008633d
   84dd4:	000846ed 	.word	0x000846ed
   84dd8:	2000227a 	.word	0x2000227a
   84ddc:	000862d5 	.word	0x000862d5
   84de0:	00084859 	.word	0x00084859
   84de4:	00086969 	.word	0x00086969
   84de8:	0008698d 	.word	0x0008698d
   84dec:	000869b1 	.word	0x000869b1
   84df0:	000869c9 	.word	0x000869c9
   84df4:	0008630d 	.word	0x0008630d
   84df8:	200001d4 	.word	0x200001d4
   84dfc:	2000227f 	.word	0x2000227f
   84e00:	20002280 	.word	0x20002280
   84e04:	000847e5 	.word	0x000847e5
   84e08:	00084779 	.word	0x00084779
   84e0c:	00086499 	.word	0x00086499
   84e10:	00086905 	.word	0x00086905
   84e14:	000863d1 	.word	0x000863d1
	if (!udc_update_iface_desc(iface_num, 0)) {
   84e18:	2100      	movs	r1, #0
   84e1a:	4620      	mov	r0, r4
   84e1c:	4b23      	ldr	r3, [pc, #140]	; (84eac <udc_process_setup+0x5cc>)
   84e1e:	4798      	blx	r3
   84e20:	2800      	cmp	r0, #0
   84e22:	f43f ad77 	beq.w	84914 <udc_process_setup+0x34>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84e26:	686b      	ldr	r3, [r5, #4]
   84e28:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e2c:	68eb      	ldr	r3, [r5, #12]
   84e2e:	4798      	blx	r3
   84e30:	4601      	mov	r1, r0
   84e32:	4620      	mov	r0, r4
   84e34:	4b1d      	ldr	r3, [pc, #116]	; (84eac <udc_process_setup+0x5cc>)
   84e36:	4798      	blx	r3
   84e38:	2800      	cmp	r0, #0
   84e3a:	f43f ad6b 	beq.w	84914 <udc_process_setup+0x34>
	return udi_api->setup();
   84e3e:	68ab      	ldr	r3, [r5, #8]
   84e40:	4798      	blx	r3
		if (udc_req_iface()) {
   84e42:	4603      	mov	r3, r0
   84e44:	2800      	cmp	r0, #0
   84e46:	f47f ad6d 	bne.w	84924 <udc_process_setup+0x44>
   84e4a:	e563      	b.n	84914 <udc_process_setup+0x34>
	if (0 == udc_num_configuration) {
   84e4c:	4b18      	ldr	r3, [pc, #96]	; (84eb0 <udc_process_setup+0x5d0>)
   84e4e:	781b      	ldrb	r3, [r3, #0]
   84e50:	b30b      	cbz	r3, 84e96 <udc_process_setup+0x5b6>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e52:	4b18      	ldr	r3, [pc, #96]	; (84eb4 <udc_process_setup+0x5d4>)
   84e54:	681a      	ldr	r2, [r3, #0]
   84e56:	6813      	ldr	r3, [r2, #0]
   84e58:	791b      	ldrb	r3, [r3, #4]
   84e5a:	b1f3      	cbz	r3, 84e9a <udc_process_setup+0x5ba>
   84e5c:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e5e:	4e13      	ldr	r6, [pc, #76]	; (84eac <udc_process_setup+0x5cc>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e60:	4f14      	ldr	r7, [pc, #80]	; (84eb4 <udc_process_setup+0x5d4>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84e62:	6853      	ldr	r3, [r2, #4]
   84e64:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e68:	68eb      	ldr	r3, [r5, #12]
   84e6a:	4798      	blx	r3
   84e6c:	4601      	mov	r1, r0
   84e6e:	4620      	mov	r0, r4
   84e70:	47b0      	blx	r6
   84e72:	4603      	mov	r3, r0
   84e74:	2800      	cmp	r0, #0
   84e76:	f43f ad55 	beq.w	84924 <udc_process_setup+0x44>
		if (udi_api->setup()) {
   84e7a:	68ab      	ldr	r3, [r5, #8]
   84e7c:	4798      	blx	r3
   84e7e:	4603      	mov	r3, r0
   84e80:	2800      	cmp	r0, #0
   84e82:	f47f ad4f 	bne.w	84924 <udc_process_setup+0x44>
			iface_num++) {
   84e86:	3401      	adds	r4, #1
   84e88:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e8a:	683a      	ldr	r2, [r7, #0]
   84e8c:	6811      	ldr	r1, [r2, #0]
   84e8e:	7909      	ldrb	r1, [r1, #4]
   84e90:	42a1      	cmp	r1, r4
   84e92:	d8e6      	bhi.n	84e62 <udc_process_setup+0x582>
   84e94:	e546      	b.n	84924 <udc_process_setup+0x44>
		return false; // The device is not is configured state yet
   84e96:	2300      	movs	r3, #0
   84e98:	e544      	b.n	84924 <udc_process_setup+0x44>
	return false;
   84e9a:	2300      	movs	r3, #0
   84e9c:	e542      	b.n	84924 <udc_process_setup+0x44>
			return false; // Error from USB host
   84e9e:	2300      	movs	r3, #0
   84ea0:	e540      	b.n	84924 <udc_process_setup+0x44>
	return false;
   84ea2:	2300      	movs	r3, #0
   84ea4:	e53e      	b.n	84924 <udc_process_setup+0x44>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84ea6:	2412      	movs	r4, #18
		str = udc_string_product_name;
   84ea8:	4a03      	ldr	r2, [pc, #12]	; (84eb8 <udc_process_setup+0x5d8>)
   84eaa:	e602      	b.n	84ab2 <udc_process_setup+0x1d2>
   84eac:	00084705 	.word	0x00084705
   84eb0:	2000227f 	.word	0x2000227f
   84eb4:	20002280 	.word	0x20002280
   84eb8:	2000062c 	.word	0x2000062c

00084ebc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84ebc:	4b0b      	ldr	r3, [pc, #44]	; (84eec <cpu_irq_enter_critical+0x30>)
   84ebe:	681b      	ldr	r3, [r3, #0]
   84ec0:	b92b      	cbnz	r3, 84ece <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84ec2:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   84ec6:	b13b      	cbz	r3, 84ed8 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84ec8:	2200      	movs	r2, #0
   84eca:	4b09      	ldr	r3, [pc, #36]	; (84ef0 <cpu_irq_enter_critical+0x34>)
   84ecc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84ece:	4a07      	ldr	r2, [pc, #28]	; (84eec <cpu_irq_enter_critical+0x30>)
   84ed0:	6813      	ldr	r3, [r2, #0]
   84ed2:	3301      	adds	r3, #1
   84ed4:	6013      	str	r3, [r2, #0]
   84ed6:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   84ed8:	b672      	cpsid	i
   84eda:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84ede:	2200      	movs	r2, #0
   84ee0:	4b04      	ldr	r3, [pc, #16]	; (84ef4 <cpu_irq_enter_critical+0x38>)
   84ee2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   84ee4:	2201      	movs	r2, #1
   84ee6:	4b02      	ldr	r3, [pc, #8]	; (84ef0 <cpu_irq_enter_critical+0x34>)
   84ee8:	701a      	strb	r2, [r3, #0]
   84eea:	e7f0      	b.n	84ece <cpu_irq_enter_critical+0x12>
   84eec:	20002288 	.word	0x20002288
   84ef0:	2000228c 	.word	0x2000228c
   84ef4:	200006ea 	.word	0x200006ea

00084ef8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84ef8:	4b07      	ldr	r3, [pc, #28]	; (84f18 <cpu_irq_leave_critical+0x20>)
   84efa:	681a      	ldr	r2, [r3, #0]
   84efc:	3a01      	subs	r2, #1
   84efe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84f00:	681b      	ldr	r3, [r3, #0]
   84f02:	b943      	cbnz	r3, 84f16 <cpu_irq_leave_critical+0x1e>
   84f04:	4b05      	ldr	r3, [pc, #20]	; (84f1c <cpu_irq_leave_critical+0x24>)
   84f06:	781b      	ldrb	r3, [r3, #0]
   84f08:	b12b      	cbz	r3, 84f16 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84f0a:	2201      	movs	r2, #1
   84f0c:	4b04      	ldr	r3, [pc, #16]	; (84f20 <cpu_irq_leave_critical+0x28>)
   84f0e:	701a      	strb	r2, [r3, #0]
   84f10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84f14:	b662      	cpsie	i
   84f16:	4770      	bx	lr
   84f18:	20002288 	.word	0x20002288
   84f1c:	2000228c 	.word	0x2000228c
   84f20:	200006ea 	.word	0x200006ea

00084f24 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   84f28:	b980      	cbnz	r0, 84f4c <_read+0x28>
   84f2a:	460c      	mov	r4, r1
   84f2c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   84f2e:	2a00      	cmp	r2, #0
   84f30:	dd0f      	ble.n	84f52 <_read+0x2e>
   84f32:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   84f34:	4e08      	ldr	r6, [pc, #32]	; (84f58 <_read+0x34>)
   84f36:	4d09      	ldr	r5, [pc, #36]	; (84f5c <_read+0x38>)
   84f38:	6830      	ldr	r0, [r6, #0]
   84f3a:	4621      	mov	r1, r4
   84f3c:	682b      	ldr	r3, [r5, #0]
   84f3e:	4798      	blx	r3
		ptr++;
   84f40:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   84f42:	42bc      	cmp	r4, r7
   84f44:	d1f8      	bne.n	84f38 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   84f46:	4640      	mov	r0, r8
   84f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84f4c:	f04f 38ff 	mov.w	r8, #4294967295
   84f50:	e7f9      	b.n	84f46 <_read+0x22>
	for (; len > 0; --len) {
   84f52:	4680      	mov	r8, r0
   84f54:	e7f7      	b.n	84f46 <_read+0x22>
   84f56:	bf00      	nop
   84f58:	20002de8 	.word	0x20002de8
   84f5c:	20002de0 	.word	0x20002de0

00084f60 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84f60:	3801      	subs	r0, #1
   84f62:	2802      	cmp	r0, #2
   84f64:	d815      	bhi.n	84f92 <_write+0x32>
{
   84f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84f6a:	460e      	mov	r6, r1
   84f6c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   84f6e:	b19a      	cbz	r2, 84f98 <_write+0x38>
   84f70:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84f72:	f8df 8038 	ldr.w	r8, [pc, #56]	; 84fac <_write+0x4c>
   84f76:	4f0c      	ldr	r7, [pc, #48]	; (84fa8 <_write+0x48>)
   84f78:	f8d8 0000 	ldr.w	r0, [r8]
   84f7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   84f80:	683b      	ldr	r3, [r7, #0]
   84f82:	4798      	blx	r3
   84f84:	2800      	cmp	r0, #0
   84f86:	db0a      	blt.n	84f9e <_write+0x3e>
   84f88:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   84f8a:	3c01      	subs	r4, #1
   84f8c:	d1f4      	bne.n	84f78 <_write+0x18>
   84f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84f92:	f04f 30ff 	mov.w	r0, #4294967295
   84f96:	4770      	bx	lr
	for (; len != 0; --len) {
   84f98:	4610      	mov	r0, r2
   84f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   84f9e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   84fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84fa6:	bf00      	nop
   84fa8:	20002de4 	.word	0x20002de4
   84fac:	20002de8 	.word	0x20002de8

00084fb0 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   84fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84fb2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84fb6:	2006      	movs	r0, #6
   84fb8:	4c17      	ldr	r4, [pc, #92]	; (85018 <iopins_normal+0x68>)
   84fba:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84fbc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84fc0:	2007      	movs	r0, #7
   84fc2:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   84fc4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84fc8:	201d      	movs	r0, #29
   84fca:	47a0      	blx	r4
	board_power(0);
   84fcc:	201d      	movs	r0, #29
   84fce:	4b13      	ldr	r3, [pc, #76]	; (8501c <iopins_normal+0x6c>)
   84fd0:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   84fd2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84fd6:	2008      	movs	r0, #8
   84fd8:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   84fda:	2008      	movs	r0, #8
   84fdc:	4e10      	ldr	r6, [pc, #64]	; (85020 <iopins_normal+0x70>)
   84fde:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   84fe0:	4f10      	ldr	r7, [pc, #64]	; (85024 <iopins_normal+0x74>)
   84fe2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   84fe6:	21ff      	movs	r1, #255	; 0xff
   84fe8:	4638      	mov	r0, r7
   84fea:	4d0f      	ldr	r5, [pc, #60]	; (85028 <iopins_normal+0x78>)
   84fec:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   84fee:	21ff      	movs	r1, #255	; 0xff
   84ff0:	4638      	mov	r0, r7
   84ff2:	4b0e      	ldr	r3, [pc, #56]	; (8502c <iopins_normal+0x7c>)
   84ff4:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   84ff6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84ffa:	2035      	movs	r0, #53	; 0x35
   84ffc:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   84ffe:	2035      	movs	r0, #53	; 0x35
   85000:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   85002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   85006:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8500a:	4809      	ldr	r0, [pc, #36]	; (85030 <iopins_normal+0x80>)
   8500c:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   8500e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85012:	201b      	movs	r0, #27
   85014:	47a0      	blx	r4
   85016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85018:	000851d1 	.word	0x000851d1
   8501c:	000851b5 	.word	0x000851b5
   85020:	0008519b 	.word	0x0008519b
   85024:	400e0e00 	.word	0x400e0e00
   85028:	000852a1 	.word	0x000852a1
   8502c:	0008516d 	.word	0x0008516d
   85030:	400e0c00 	.word	0x400e0c00

00085034 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   85034:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   85036:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8503a:	4b05      	ldr	r3, [pc, #20]	; (85050 <board_init+0x1c>)
   8503c:	605a      	str	r2, [r3, #4]
   8503e:	200a      	movs	r0, #10
   85040:	4c04      	ldr	r4, [pc, #16]	; (85054 <board_init+0x20>)
   85042:	47a0      	blx	r4
   85044:	200b      	movs	r0, #11
   85046:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   85048:	4b03      	ldr	r3, [pc, #12]	; (85058 <board_init+0x24>)
   8504a:	4798      	blx	r3
   8504c:	bd10      	pop	{r4, pc}
   8504e:	bf00      	nop
   85050:	400e1250 	.word	0x400e1250
   85054:	00085515 	.word	0x00085515
   85058:	00084fb1 	.word	0x00084fb1

0008505c <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   8505c:	b510      	push	{r4, lr}
   8505e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85060:	2806      	cmp	r0, #6
   85062:	d002      	beq.n	8506a <LED_Off+0xe>
   85064:	2c07      	cmp	r4, #7
   85066:	d004      	beq.n	85072 <LED_Off+0x16>
   85068:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   8506a:	2006      	movs	r0, #6
   8506c:	4b03      	ldr	r3, [pc, #12]	; (8507c <LED_Off+0x20>)
   8506e:	4798      	blx	r3
   85070:	e7f8      	b.n	85064 <LED_Off+0x8>
   85072:	2007      	movs	r0, #7
   85074:	4b01      	ldr	r3, [pc, #4]	; (8507c <LED_Off+0x20>)
   85076:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   85078:	e7f6      	b.n	85068 <LED_Off+0xc>
   8507a:	bf00      	nop
   8507c:	000851b5 	.word	0x000851b5

00085080 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   85080:	b510      	push	{r4, lr}
   85082:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85084:	2806      	cmp	r0, #6
   85086:	d002      	beq.n	8508e <LED_On+0xe>
   85088:	2c07      	cmp	r4, #7
   8508a:	d004      	beq.n	85096 <LED_On+0x16>
   8508c:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   8508e:	2006      	movs	r0, #6
   85090:	4b03      	ldr	r3, [pc, #12]	; (850a0 <LED_On+0x20>)
   85092:	4798      	blx	r3
   85094:	e7f8      	b.n	85088 <LED_On+0x8>
   85096:	2007      	movs	r0, #7
   85098:	4b01      	ldr	r3, [pc, #4]	; (850a0 <LED_On+0x20>)
   8509a:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   8509c:	e7f6      	b.n	8508c <LED_On+0xc>
   8509e:	bf00      	nop
   850a0:	0008519b 	.word	0x0008519b

000850a4 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   850a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850ac:	670a      	str	r2, [r1, #112]	; 0x70
   850ae:	4770      	bx	lr

000850b0 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   850b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850b8:	674a      	str	r2, [r1, #116]	; 0x74
   850ba:	4770      	bx	lr

000850bc <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   850bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850c4:	678a      	str	r2, [r1, #120]	; 0x78
   850c6:	4770      	bx	lr

000850c8 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   850c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850d0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   850d4:	4770      	bx	lr

000850d6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   850d6:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   850d8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   850dc:	d016      	beq.n	8510c <pio_set_peripheral+0x36>
   850de:	d80b      	bhi.n	850f8 <pio_set_peripheral+0x22>
   850e0:	b149      	cbz	r1, 850f6 <pio_set_peripheral+0x20>
   850e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   850e6:	d105      	bne.n	850f4 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   850e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   850ea:	6f01      	ldr	r1, [r0, #112]	; 0x70
   850ec:	400b      	ands	r3, r1
   850ee:	ea23 0302 	bic.w	r3, r3, r2
   850f2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   850f4:	6042      	str	r2, [r0, #4]
   850f6:	4770      	bx	lr
	switch (ul_type) {
   850f8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   850fc:	d0fb      	beq.n	850f6 <pio_set_peripheral+0x20>
   850fe:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   85102:	d0f8      	beq.n	850f6 <pio_set_peripheral+0x20>
   85104:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   85108:	d1f4      	bne.n	850f4 <pio_set_peripheral+0x1e>
   8510a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8510c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8510e:	4313      	orrs	r3, r2
   85110:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   85112:	e7ef      	b.n	850f4 <pio_set_peripheral+0x1e>

00085114 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   85114:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   85116:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8511a:	bf14      	ite	ne
   8511c:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8511e:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   85120:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   85124:	bf14      	ite	ne
   85126:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   85128:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8512a:	f012 0f02 	tst.w	r2, #2
   8512e:	d107      	bne.n	85140 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   85130:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   85134:	bf18      	it	ne
   85136:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   8513a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8513c:	6001      	str	r1, [r0, #0]
   8513e:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   85140:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   85144:	e7f9      	b.n	8513a <pio_set_input+0x26>

00085146 <pio_set_output>:
{
   85146:	b410      	push	{r4}
   85148:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   8514a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8514c:	b944      	cbnz	r4, 85160 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8514e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   85150:	b143      	cbz	r3, 85164 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   85152:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   85154:	b942      	cbnz	r2, 85168 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   85156:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   85158:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8515a:	6001      	str	r1, [r0, #0]
}
   8515c:	bc10      	pop	{r4}
   8515e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   85160:	6641      	str	r1, [r0, #100]	; 0x64
   85162:	e7f5      	b.n	85150 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   85164:	6541      	str	r1, [r0, #84]	; 0x54
   85166:	e7f5      	b.n	85154 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   85168:	6301      	str	r1, [r0, #48]	; 0x30
   8516a:	e7f5      	b.n	85158 <pio_set_output+0x12>

0008516c <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   8516c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   85170:	4770      	bx	lr

00085172 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   85172:	6381      	str	r1, [r0, #56]	; 0x38
   85174:	4770      	bx	lr

00085176 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   85176:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   85178:	4770      	bx	lr

0008517a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8517a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8517c:	4770      	bx	lr

0008517e <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8517e:	0943      	lsrs	r3, r0, #5
   85180:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85184:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85188:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8518c:	f000 001f 	and.w	r0, r0, #31
   85190:	fa23 f000 	lsr.w	r0, r3, r0
}
   85194:	f000 0001 	and.w	r0, r0, #1
   85198:	4770      	bx	lr

0008519a <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8519a:	0943      	lsrs	r3, r0, #5
   8519c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851a0:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851a4:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   851a6:	f000 001f 	and.w	r0, r0, #31
   851aa:	2201      	movs	r2, #1
   851ac:	fa02 f000 	lsl.w	r0, r2, r0
   851b0:	6318      	str	r0, [r3, #48]	; 0x30
   851b2:	4770      	bx	lr

000851b4 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851b4:	0943      	lsrs	r3, r0, #5
   851b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851ba:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851be:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   851c0:	f000 001f 	and.w	r0, r0, #31
   851c4:	2201      	movs	r2, #1
   851c6:	fa02 f000 	lsl.w	r0, r2, r0
   851ca:	6358      	str	r0, [r3, #52]	; 0x34
   851cc:	4770      	bx	lr
	...

000851d0 <pio_configure_pin>:
{
   851d0:	b570      	push	{r4, r5, r6, lr}
   851d2:	b082      	sub	sp, #8
   851d4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851d6:	0943      	lsrs	r3, r0, #5
   851d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851dc:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851e0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   851e2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   851e6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   851ea:	d031      	beq.n	85250 <pio_configure_pin+0x80>
   851ec:	d816      	bhi.n	8521c <pio_configure_pin+0x4c>
   851ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   851f2:	d01b      	beq.n	8522c <pio_configure_pin+0x5c>
   851f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   851f8:	d116      	bne.n	85228 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   851fa:	f000 001f 	and.w	r0, r0, #31
   851fe:	2601      	movs	r6, #1
   85200:	4086      	lsls	r6, r0
   85202:	4632      	mov	r2, r6
   85204:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85208:	4620      	mov	r0, r4
   8520a:	4b22      	ldr	r3, [pc, #136]	; (85294 <pio_configure_pin+0xc4>)
   8520c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8520e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   85212:	bf14      	ite	ne
   85214:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85216:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   85218:	2001      	movs	r0, #1
   8521a:	e017      	b.n	8524c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8521c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85220:	d021      	beq.n	85266 <pio_configure_pin+0x96>
   85222:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85226:	d01e      	beq.n	85266 <pio_configure_pin+0x96>
		return 0;
   85228:	2000      	movs	r0, #0
   8522a:	e00f      	b.n	8524c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8522c:	f000 001f 	and.w	r0, r0, #31
   85230:	2601      	movs	r6, #1
   85232:	4086      	lsls	r6, r0
   85234:	4632      	mov	r2, r6
   85236:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8523a:	4620      	mov	r0, r4
   8523c:	4b15      	ldr	r3, [pc, #84]	; (85294 <pio_configure_pin+0xc4>)
   8523e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85240:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   85244:	bf14      	ite	ne
   85246:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85248:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8524a:	2001      	movs	r0, #1
}
   8524c:	b002      	add	sp, #8
   8524e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   85250:	f000 011f 	and.w	r1, r0, #31
   85254:	2601      	movs	r6, #1
   85256:	462a      	mov	r2, r5
   85258:	fa06 f101 	lsl.w	r1, r6, r1
   8525c:	4620      	mov	r0, r4
   8525e:	4b0e      	ldr	r3, [pc, #56]	; (85298 <pio_configure_pin+0xc8>)
   85260:	4798      	blx	r3
	return 1;
   85262:	4630      	mov	r0, r6
		break;
   85264:	e7f2      	b.n	8524c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85266:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8526a:	f000 011f 	and.w	r1, r0, #31
   8526e:	2601      	movs	r6, #1
   85270:	ea05 0306 	and.w	r3, r5, r6
   85274:	9300      	str	r3, [sp, #0]
   85276:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8527a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8527e:	bf14      	ite	ne
   85280:	2200      	movne	r2, #0
   85282:	2201      	moveq	r2, #1
   85284:	fa06 f101 	lsl.w	r1, r6, r1
   85288:	4620      	mov	r0, r4
   8528a:	4c04      	ldr	r4, [pc, #16]	; (8529c <pio_configure_pin+0xcc>)
   8528c:	47a0      	blx	r4
	return 1;
   8528e:	4630      	mov	r0, r6
		break;
   85290:	e7dc      	b.n	8524c <pio_configure_pin+0x7c>
   85292:	bf00      	nop
   85294:	000850d7 	.word	0x000850d7
   85298:	00085115 	.word	0x00085115
   8529c:	00085147 	.word	0x00085147

000852a0 <pio_configure_pin_group>:
{
   852a0:	b570      	push	{r4, r5, r6, lr}
   852a2:	b082      	sub	sp, #8
   852a4:	4605      	mov	r5, r0
   852a6:	460e      	mov	r6, r1
   852a8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   852aa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   852ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   852b2:	d027      	beq.n	85304 <pio_configure_pin_group+0x64>
   852b4:	d811      	bhi.n	852da <pio_configure_pin_group+0x3a>
   852b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   852ba:	d016      	beq.n	852ea <pio_configure_pin_group+0x4a>
   852bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   852c0:	d111      	bne.n	852e6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   852c2:	460a      	mov	r2, r1
   852c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   852c8:	4b19      	ldr	r3, [pc, #100]	; (85330 <pio_configure_pin_group+0x90>)
   852ca:	4798      	blx	r3
	if (ul_pull_up_enable) {
   852cc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   852d0:	bf14      	ite	ne
   852d2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   852d4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   852d6:	2001      	movs	r0, #1
   852d8:	e012      	b.n	85300 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   852da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   852de:	d015      	beq.n	8530c <pio_configure_pin_group+0x6c>
   852e0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   852e4:	d012      	beq.n	8530c <pio_configure_pin_group+0x6c>
		return 0;
   852e6:	2000      	movs	r0, #0
   852e8:	e00a      	b.n	85300 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   852ea:	460a      	mov	r2, r1
   852ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   852f0:	4b0f      	ldr	r3, [pc, #60]	; (85330 <pio_configure_pin_group+0x90>)
   852f2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   852f4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   852f8:	bf14      	ite	ne
   852fa:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   852fc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   852fe:	2001      	movs	r0, #1
}
   85300:	b002      	add	sp, #8
   85302:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   85304:	4b0b      	ldr	r3, [pc, #44]	; (85334 <pio_configure_pin_group+0x94>)
   85306:	4798      	blx	r3
	return 1;
   85308:	2001      	movs	r0, #1
		break;
   8530a:	e7f9      	b.n	85300 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8530c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   85310:	f004 0301 	and.w	r3, r4, #1
   85314:	9300      	str	r3, [sp, #0]
   85316:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8531a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8531e:	bf14      	ite	ne
   85320:	2200      	movne	r2, #0
   85322:	2201      	moveq	r2, #1
   85324:	4631      	mov	r1, r6
   85326:	4628      	mov	r0, r5
   85328:	4c03      	ldr	r4, [pc, #12]	; (85338 <pio_configure_pin_group+0x98>)
   8532a:	47a0      	blx	r4
	return 1;
   8532c:	2001      	movs	r0, #1
		break;
   8532e:	e7e7      	b.n	85300 <pio_configure_pin_group+0x60>
   85330:	000850d7 	.word	0x000850d7
   85334:	00085115 	.word	0x00085115
   85338:	00085147 	.word	0x00085147

0008533c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8533c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85340:	4604      	mov	r4, r0
   85342:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   85344:	4b0e      	ldr	r3, [pc, #56]	; (85380 <pio_handler_process+0x44>)
   85346:	4798      	blx	r3
   85348:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8534a:	4620      	mov	r0, r4
   8534c:	4b0d      	ldr	r3, [pc, #52]	; (85384 <pio_handler_process+0x48>)
   8534e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   85350:	4005      	ands	r5, r0
   85352:	d013      	beq.n	8537c <pio_handler_process+0x40>
   85354:	4c0c      	ldr	r4, [pc, #48]	; (85388 <pio_handler_process+0x4c>)
   85356:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8535a:	e003      	b.n	85364 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8535c:	42b4      	cmp	r4, r6
   8535e:	d00d      	beq.n	8537c <pio_handler_process+0x40>
   85360:	3410      	adds	r4, #16
		while (status != 0) {
   85362:	b15d      	cbz	r5, 8537c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   85364:	6820      	ldr	r0, [r4, #0]
   85366:	4540      	cmp	r0, r8
   85368:	d1f8      	bne.n	8535c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8536a:	6861      	ldr	r1, [r4, #4]
   8536c:	4229      	tst	r1, r5
   8536e:	d0f5      	beq.n	8535c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   85370:	68e3      	ldr	r3, [r4, #12]
   85372:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   85374:	6863      	ldr	r3, [r4, #4]
   85376:	ea25 0503 	bic.w	r5, r5, r3
   8537a:	e7ef      	b.n	8535c <pio_handler_process+0x20>
   8537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85380:	00085177 	.word	0x00085177
   85384:	0008517b 	.word	0x0008517b
   85388:	20002290 	.word	0x20002290

0008538c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8538c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8538e:	210a      	movs	r1, #10
   85390:	4801      	ldr	r0, [pc, #4]	; (85398 <PIOA_Handler+0xc>)
   85392:	4b02      	ldr	r3, [pc, #8]	; (8539c <PIOA_Handler+0x10>)
   85394:	4798      	blx	r3
   85396:	bd08      	pop	{r3, pc}
   85398:	400e0c00 	.word	0x400e0c00
   8539c:	0008533d 	.word	0x0008533d

000853a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   853a0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   853a2:	210b      	movs	r1, #11
   853a4:	4801      	ldr	r0, [pc, #4]	; (853ac <PIOB_Handler+0xc>)
   853a6:	4b02      	ldr	r3, [pc, #8]	; (853b0 <PIOB_Handler+0x10>)
   853a8:	4798      	blx	r3
   853aa:	bd08      	pop	{r3, pc}
   853ac:	400e0e00 	.word	0x400e0e00
   853b0:	0008533d 	.word	0x0008533d

000853b4 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   853b4:	4a17      	ldr	r2, [pc, #92]	; (85414 <pmc_switch_mck_to_mainck+0x60>)
   853b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   853b8:	f023 0303 	bic.w	r3, r3, #3
   853bc:	f043 0301 	orr.w	r3, r3, #1
   853c0:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   853c2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   853c4:	f013 0f08 	tst.w	r3, #8
   853c8:	d10a      	bne.n	853e0 <pmc_switch_mck_to_mainck+0x2c>
   853ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   853ce:	4911      	ldr	r1, [pc, #68]	; (85414 <pmc_switch_mck_to_mainck+0x60>)
   853d0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   853d2:	f012 0f08 	tst.w	r2, #8
   853d6:	d103      	bne.n	853e0 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   853d8:	3b01      	subs	r3, #1
   853da:	d1f9      	bne.n	853d0 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   853dc:	2001      	movs	r0, #1
   853de:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   853e0:	4a0c      	ldr	r2, [pc, #48]	; (85414 <pmc_switch_mck_to_mainck+0x60>)
   853e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   853e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   853e8:	4318      	orrs	r0, r3
   853ea:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   853ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
   853ee:	f013 0f08 	tst.w	r3, #8
   853f2:	d10a      	bne.n	8540a <pmc_switch_mck_to_mainck+0x56>
   853f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   853f8:	4906      	ldr	r1, [pc, #24]	; (85414 <pmc_switch_mck_to_mainck+0x60>)
   853fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   853fc:	f012 0f08 	tst.w	r2, #8
   85400:	d105      	bne.n	8540e <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85402:	3b01      	subs	r3, #1
   85404:	d1f9      	bne.n	853fa <pmc_switch_mck_to_mainck+0x46>
			return 1;
   85406:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   85408:	4770      	bx	lr
	return 0;
   8540a:	2000      	movs	r0, #0
   8540c:	4770      	bx	lr
   8540e:	2000      	movs	r0, #0
   85410:	4770      	bx	lr
   85412:	bf00      	nop
   85414:	400e0400 	.word	0x400e0400

00085418 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   85418:	4a17      	ldr	r2, [pc, #92]	; (85478 <pmc_switch_mck_to_pllack+0x60>)
   8541a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85420:	4318      	orrs	r0, r3
   85422:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85424:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85426:	f013 0f08 	tst.w	r3, #8
   8542a:	d10a      	bne.n	85442 <pmc_switch_mck_to_pllack+0x2a>
   8542c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85430:	4911      	ldr	r1, [pc, #68]	; (85478 <pmc_switch_mck_to_pllack+0x60>)
   85432:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85434:	f012 0f08 	tst.w	r2, #8
   85438:	d103      	bne.n	85442 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8543a:	3b01      	subs	r3, #1
   8543c:	d1f9      	bne.n	85432 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8543e:	2001      	movs	r0, #1
   85440:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85442:	4a0d      	ldr	r2, [pc, #52]	; (85478 <pmc_switch_mck_to_pllack+0x60>)
   85444:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85446:	f023 0303 	bic.w	r3, r3, #3
   8544a:	f043 0302 	orr.w	r3, r3, #2
   8544e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85450:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85452:	f013 0f08 	tst.w	r3, #8
   85456:	d10a      	bne.n	8546e <pmc_switch_mck_to_pllack+0x56>
   85458:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8545c:	4906      	ldr	r1, [pc, #24]	; (85478 <pmc_switch_mck_to_pllack+0x60>)
   8545e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85460:	f012 0f08 	tst.w	r2, #8
   85464:	d105      	bne.n	85472 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85466:	3b01      	subs	r3, #1
   85468:	d1f9      	bne.n	8545e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8546a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8546c:	4770      	bx	lr
	return 0;
   8546e:	2000      	movs	r0, #0
   85470:	4770      	bx	lr
   85472:	2000      	movs	r0, #0
   85474:	4770      	bx	lr
   85476:	bf00      	nop
   85478:	400e0400 	.word	0x400e0400

0008547c <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   8547c:	4a08      	ldr	r2, [pc, #32]	; (854a0 <pmc_osc_enable_main_xtal+0x24>)
   8547e:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   85480:	f023 0303 	bic.w	r3, r3, #3
   85484:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85488:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8548c:	0200      	lsls	r0, r0, #8
   8548e:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   85490:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   85492:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   85494:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85496:	f013 0f01 	tst.w	r3, #1
   8549a:	d0fb      	beq.n	85494 <pmc_osc_enable_main_xtal+0x18>
}
   8549c:	4770      	bx	lr
   8549e:	bf00      	nop
   854a0:	400e0400 	.word	0x400e0400

000854a4 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   854a4:	4b02      	ldr	r3, [pc, #8]	; (854b0 <pmc_osc_is_ready_main_xtal+0xc>)
   854a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854a8:	f000 0001 	and.w	r0, r0, #1
   854ac:	4770      	bx	lr
   854ae:	bf00      	nop
   854b0:	400e0400 	.word	0x400e0400

000854b4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   854b4:	4b02      	ldr	r3, [pc, #8]	; (854c0 <pmc_osc_is_ready_mainck+0xc>)
   854b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   854bc:	4770      	bx	lr
   854be:	bf00      	nop
   854c0:	400e0400 	.word	0x400e0400

000854c4 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   854c4:	4b06      	ldr	r3, [pc, #24]	; (854e0 <pmc_mainck_osc_select+0x1c>)
   854c6:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   854c8:	b930      	cbnz	r0, 854d8 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   854ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   854ce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   854d2:	4a03      	ldr	r2, [pc, #12]	; (854e0 <pmc_mainck_osc_select+0x1c>)
   854d4:	6213      	str	r3, [r2, #32]
   854d6:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   854d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   854dc:	e7f7      	b.n	854ce <pmc_mainck_osc_select+0xa>
   854de:	bf00      	nop
   854e0:	400e0400 	.word	0x400e0400

000854e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   854e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   854e8:	4b01      	ldr	r3, [pc, #4]	; (854f0 <pmc_disable_pllack+0xc>)
   854ea:	629a      	str	r2, [r3, #40]	; 0x28
   854ec:	4770      	bx	lr
   854ee:	bf00      	nop
   854f0:	400e0400 	.word	0x400e0400

000854f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   854f4:	4b02      	ldr	r3, [pc, #8]	; (85500 <pmc_is_locked_pllack+0xc>)
   854f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854f8:	f000 0002 	and.w	r0, r0, #2
   854fc:	4770      	bx	lr
   854fe:	bf00      	nop
   85500:	400e0400 	.word	0x400e0400

00085504 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   85504:	4b02      	ldr	r3, [pc, #8]	; (85510 <pmc_is_locked_upll+0xc>)
   85506:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85508:	f000 0040 	and.w	r0, r0, #64	; 0x40
   8550c:	4770      	bx	lr
   8550e:	bf00      	nop
   85510:	400e0400 	.word	0x400e0400

00085514 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85514:	281d      	cmp	r0, #29
   85516:	d80e      	bhi.n	85536 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   85518:	281f      	cmp	r0, #31
   8551a:	d80e      	bhi.n	8553a <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8551c:	4b09      	ldr	r3, [pc, #36]	; (85544 <pmc_enable_periph_clk+0x30>)
   8551e:	699a      	ldr	r2, [r3, #24]
   85520:	2301      	movs	r3, #1
   85522:	4083      	lsls	r3, r0
   85524:	4393      	bics	r3, r2
   85526:	d00a      	beq.n	8553e <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   85528:	2301      	movs	r3, #1
   8552a:	fa03 f000 	lsl.w	r0, r3, r0
   8552e:	4b05      	ldr	r3, [pc, #20]	; (85544 <pmc_enable_periph_clk+0x30>)
   85530:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   85532:	2000      	movs	r0, #0
   85534:	4770      	bx	lr
		return 1;
   85536:	2001      	movs	r0, #1
   85538:	4770      	bx	lr
	return 0;
   8553a:	2000      	movs	r0, #0
   8553c:	4770      	bx	lr
   8553e:	2000      	movs	r0, #0
}
   85540:	4770      	bx	lr
   85542:	bf00      	nop
   85544:	400e0400 	.word	0x400e0400

00085548 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85548:	281d      	cmp	r0, #29
   8554a:	d810      	bhi.n	8556e <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   8554c:	281f      	cmp	r0, #31
   8554e:	d810      	bhi.n	85572 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   85550:	4b09      	ldr	r3, [pc, #36]	; (85578 <pmc_disable_periph_clk+0x30>)
   85552:	699a      	ldr	r2, [r3, #24]
   85554:	2301      	movs	r3, #1
   85556:	4083      	lsls	r3, r0
   85558:	4393      	bics	r3, r2
   8555a:	d001      	beq.n	85560 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   8555c:	2000      	movs	r0, #0
}
   8555e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   85560:	2301      	movs	r3, #1
   85562:	fa03 f000 	lsl.w	r0, r3, r0
   85566:	4b04      	ldr	r3, [pc, #16]	; (85578 <pmc_disable_periph_clk+0x30>)
   85568:	6158      	str	r0, [r3, #20]
	return 0;
   8556a:	2000      	movs	r0, #0
   8556c:	4770      	bx	lr
		return 1;
   8556e:	2001      	movs	r0, #1
   85570:	4770      	bx	lr
	return 0;
   85572:	2000      	movs	r0, #0
   85574:	4770      	bx	lr
   85576:	bf00      	nop
   85578:	400e0400 	.word	0x400e0400

0008557c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   8557c:	f44f 7380 	mov.w	r3, #256	; 0x100
   85580:	fa03 f000 	lsl.w	r0, r3, r0
   85584:	4b01      	ldr	r3, [pc, #4]	; (8558c <pmc_enable_pck+0x10>)
   85586:	6018      	str	r0, [r3, #0]
   85588:	4770      	bx	lr
   8558a:	bf00      	nop
   8558c:	400e0400 	.word	0x400e0400

00085590 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   85590:	4b03      	ldr	r3, [pc, #12]	; (855a0 <pmc_set_fast_startup_input+0x10>)
   85592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   85594:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   85598:	4310      	orrs	r0, r2
   8559a:	6718      	str	r0, [r3, #112]	; 0x70
   8559c:	4770      	bx	lr
   8559e:	bf00      	nop
   855a0:	400e0400 	.word	0x400e0400

000855a4 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   855a4:	4b02      	ldr	r3, [pc, #8]	; (855b0 <pmc_is_wakeup_clocks_restored+0xc>)
   855a6:	7818      	ldrb	r0, [r3, #0]
}
   855a8:	f080 0001 	eor.w	r0, r0, #1
   855ac:	4770      	bx	lr
   855ae:	bf00      	nop
   855b0:	20002300 	.word	0x20002300

000855b4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   855b4:	b508      	push	{r3, lr}
   855b6:	2014      	movs	r0, #20
   855b8:	4b01      	ldr	r3, [pc, #4]	; (855c0 <spi_enable_clock+0xc>)
   855ba:	4798      	blx	r3
   855bc:	bd08      	pop	{r3, pc}
   855be:	bf00      	nop
   855c0:	00085515 	.word	0x00085515

000855c4 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   855c4:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   855c6:	2014      	movs	r0, #20
   855c8:	4b01      	ldr	r3, [pc, #4]	; (855d0 <spi_disable_clock+0xc>)
   855ca:	4798      	blx	r3
   855cc:	bd08      	pop	{r3, pc}
   855ce:	bf00      	nop
   855d0:	00085549 	.word	0x00085549

000855d4 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   855d4:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   855d6:	f643 2399 	movw	r3, #15001	; 0x3a99
   855da:	6904      	ldr	r4, [r0, #16]
   855dc:	f014 0f01 	tst.w	r4, #1
   855e0:	d103      	bne.n	855ea <spi_read+0x16>
		if (!timeout--) {
   855e2:	3b01      	subs	r3, #1
   855e4:	d1f9      	bne.n	855da <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   855e6:	2001      	movs	r0, #1
   855e8:	e009      	b.n	855fe <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   855ea:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   855ec:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   855ee:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   855f2:	bf1c      	itt	ne
   855f4:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   855f8:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   855fa:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   855fc:	2000      	movs	r0, #0
}
   855fe:	bc10      	pop	{r4}
   85600:	4770      	bx	lr

00085602 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   85602:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   85604:	f643 2499 	movw	r4, #15001	; 0x3a99
   85608:	6905      	ldr	r5, [r0, #16]
   8560a:	f015 0f02 	tst.w	r5, #2
   8560e:	d103      	bne.n	85618 <spi_write+0x16>
		if (!timeout--) {
   85610:	3c01      	subs	r4, #1
   85612:	d1f9      	bne.n	85608 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   85614:	2001      	movs	r0, #1
   85616:	e00c      	b.n	85632 <spi_write+0x30>
   85618:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   8561a:	f014 0f02 	tst.w	r4, #2
   8561e:	d006      	beq.n	8562e <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   85620:	0412      	lsls	r2, r2, #16
   85622:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   85626:	4311      	orrs	r1, r2
		if (uc_last) {
   85628:	b10b      	cbz	r3, 8562e <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   8562a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   8562e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   85630:	2000      	movs	r0, #0
}
   85632:	bc30      	pop	{r4, r5}
   85634:	4770      	bx	lr

00085636 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   85636:	b932      	cbnz	r2, 85646 <spi_set_clock_polarity+0x10>
   85638:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8563c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8563e:	f023 0301 	bic.w	r3, r3, #1
   85642:	6303      	str	r3, [r0, #48]	; 0x30
   85644:	4770      	bx	lr
   85646:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8564a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8564c:	f043 0301 	orr.w	r3, r3, #1
   85650:	6303      	str	r3, [r0, #48]	; 0x30
   85652:	4770      	bx	lr

00085654 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   85654:	b932      	cbnz	r2, 85664 <spi_set_clock_phase+0x10>
   85656:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8565a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8565c:	f023 0302 	bic.w	r3, r3, #2
   85660:	6303      	str	r3, [r0, #48]	; 0x30
   85662:	4770      	bx	lr
   85664:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   85668:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8566a:	f043 0302 	orr.w	r3, r3, #2
   8566e:	6303      	str	r3, [r0, #48]	; 0x30
   85670:	4770      	bx	lr

00085672 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   85672:	1e43      	subs	r3, r0, #1
   85674:	4419      	add	r1, r3
   85676:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8567a:	1e43      	subs	r3, r0, #1
   8567c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   8567e:	bf94      	ite	ls
   85680:	b200      	sxthls	r0, r0
		return -1;
   85682:	f04f 30ff 	movhi.w	r0, #4294967295
}
   85686:	4770      	bx	lr

00085688 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   85688:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8568c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8568e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   85692:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   85694:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85696:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   8569a:	630a      	str	r2, [r1, #48]	; 0x30
   8569c:	4770      	bx	lr
	...

000856a0 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   856a0:	4603      	mov	r3, r0
   856a2:	b9a8      	cbnz	r0, 856d0 <udd_sleep_mode+0x30>
   856a4:	4a17      	ldr	r2, [pc, #92]	; (85704 <udd_sleep_mode+0x64>)
   856a6:	7812      	ldrb	r2, [r2, #0]
   856a8:	b342      	cbz	r2, 856fc <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856aa:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   856ae:	b672      	cpsid	i
   856b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856b4:	4914      	ldr	r1, [pc, #80]	; (85708 <udd_sleep_mode+0x68>)
   856b6:	7008      	strb	r0, [r1, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   856b8:	4814      	ldr	r0, [pc, #80]	; (8570c <udd_sleep_mode+0x6c>)
   856ba:	7881      	ldrb	r1, [r0, #2]
   856bc:	3901      	subs	r1, #1
   856be:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   856c0:	b9e2      	cbnz	r2, 856fc <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   856c2:	2101      	movs	r1, #1
   856c4:	4a10      	ldr	r2, [pc, #64]	; (85708 <udd_sleep_mode+0x68>)
   856c6:	7011      	strb	r1, [r2, #0]
   856c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   856cc:	b662      	cpsie	i
   856ce:	e015      	b.n	856fc <udd_sleep_mode+0x5c>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   856d0:	4a0c      	ldr	r2, [pc, #48]	; (85704 <udd_sleep_mode+0x64>)
   856d2:	7812      	ldrb	r2, [r2, #0]
   856d4:	b992      	cbnz	r2, 856fc <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856d6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   856da:	b672      	cpsid	i
   856dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856e0:	2000      	movs	r0, #0
   856e2:	4909      	ldr	r1, [pc, #36]	; (85708 <udd_sleep_mode+0x68>)
   856e4:	7008      	strb	r0, [r1, #0]
	++sleepmgr_locks[mode];
   856e6:	4809      	ldr	r0, [pc, #36]	; (8570c <udd_sleep_mode+0x6c>)
   856e8:	7881      	ldrb	r1, [r0, #2]
   856ea:	3101      	adds	r1, #1
   856ec:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   856ee:	b92a      	cbnz	r2, 856fc <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   856f0:	2101      	movs	r1, #1
   856f2:	4a05      	ldr	r2, [pc, #20]	; (85708 <udd_sleep_mode+0x68>)
   856f4:	7011      	strb	r1, [r2, #0]
   856f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   856fa:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   856fc:	4a01      	ldr	r2, [pc, #4]	; (85704 <udd_sleep_mode+0x64>)
   856fe:	7013      	strb	r3, [r2, #0]
}
   85700:	4770      	bx	lr
   85702:	bf00      	nop
   85704:	20002302 	.word	0x20002302
   85708:	200006ea 	.word	0x200006ea
   8570c:	20002dd8 	.word	0x20002dd8

00085710 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85710:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85714:	b672      	cpsid	i
   85716:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8571a:	2100      	movs	r1, #0
   8571c:	4a0d      	ldr	r2, [pc, #52]	; (85754 <udd_ctrl_init+0x44>)
   8571e:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   85720:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85724:	4a0c      	ldr	r2, [pc, #48]	; (85758 <udd_ctrl_init+0x48>)
   85726:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8572a:	b92b      	cbnz	r3, 85738 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   8572c:	2201      	movs	r2, #1
   8572e:	4b09      	ldr	r3, [pc, #36]	; (85754 <udd_ctrl_init+0x44>)
   85730:	701a      	strb	r2, [r3, #0]
   85732:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85736:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   85738:	f44f 7200 	mov.w	r2, #512	; 0x200
   8573c:	4b06      	ldr	r3, [pc, #24]	; (85758 <udd_ctrl_init+0x48>)
   8573e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   85742:	4a06      	ldr	r2, [pc, #24]	; (8575c <udd_ctrl_init+0x4c>)
   85744:	2300      	movs	r3, #0
   85746:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85748:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   8574a:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   8574c:	4a04      	ldr	r2, [pc, #16]	; (85760 <udd_ctrl_init+0x50>)
   8574e:	7013      	strb	r3, [r2, #0]
   85750:	4770      	bx	lr
   85752:	bf00      	nop
   85754:	200006ea 	.word	0x200006ea
   85758:	400a4000 	.word	0x400a4000
   8575c:	20002dec 	.word	0x20002dec
   85760:	20002308 	.word	0x20002308

00085764 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85764:	2205      	movs	r2, #5
   85766:	4b03      	ldr	r3, [pc, #12]	; (85774 <udd_ctrl_stall_data+0x10>)
   85768:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8576a:	2220      	movs	r2, #32
   8576c:	4b02      	ldr	r3, [pc, #8]	; (85778 <udd_ctrl_stall_data+0x14>)
   8576e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85772:	4770      	bx	lr
   85774:	20002308 	.word	0x20002308
   85778:	400a4000 	.word	0x400a4000

0008577c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8577c:	2203      	movs	r2, #3
   8577e:	4b11      	ldr	r3, [pc, #68]	; (857c4 <udd_ctrl_send_zlp_in+0x48>)
   85780:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85782:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   85786:	b672      	cpsid	i
   85788:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8578c:	2100      	movs	r1, #0
   8578e:	4b0e      	ldr	r3, [pc, #56]	; (857c8 <udd_ctrl_send_zlp_in+0x4c>)
   85790:	7019      	strb	r1, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   85792:	4b0e      	ldr	r3, [pc, #56]	; (857cc <udd_ctrl_send_zlp_in+0x50>)
   85794:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85798:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8579c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   857a0:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   857a4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   857a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   857ac:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   857b0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   857b4:	b92a      	cbnz	r2, 857c2 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   857b6:	2201      	movs	r2, #1
   857b8:	4b03      	ldr	r3, [pc, #12]	; (857c8 <udd_ctrl_send_zlp_in+0x4c>)
   857ba:	701a      	strb	r2, [r3, #0]
   857bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   857c0:	b662      	cpsie	i
   857c2:	4770      	bx	lr
   857c4:	20002308 	.word	0x20002308
   857c8:	200006ea 	.word	0x200006ea
   857cc:	400a4000 	.word	0x400a4000

000857d0 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   857d0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   857d2:	4b02      	ldr	r3, [pc, #8]	; (857dc <udd_ctrl_endofrequest+0xc>)
   857d4:	691b      	ldr	r3, [r3, #16]
   857d6:	b103      	cbz	r3, 857da <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   857d8:	4798      	blx	r3
   857da:	bd08      	pop	{r3, pc}
   857dc:	20002dec 	.word	0x20002dec

000857e0 <udd_ctrl_in_sent>:
{
   857e0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   857e2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   857e6:	b672      	cpsid	i
   857e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   857ec:	2100      	movs	r1, #0
   857ee:	4a4c      	ldr	r2, [pc, #304]	; (85920 <udd_ctrl_in_sent+0x140>)
   857f0:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   857f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   857f6:	4a4b      	ldr	r2, [pc, #300]	; (85924 <udd_ctrl_in_sent+0x144>)
   857f8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   857fc:	b92b      	cbnz	r3, 8580a <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   857fe:	2201      	movs	r2, #1
   85800:	4b47      	ldr	r3, [pc, #284]	; (85920 <udd_ctrl_in_sent+0x140>)
   85802:	701a      	strb	r2, [r3, #0]
   85804:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85808:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8580a:	4b47      	ldr	r3, [pc, #284]	; (85928 <udd_ctrl_in_sent+0x148>)
   8580c:	781b      	ldrb	r3, [r3, #0]
   8580e:	2b03      	cmp	r3, #3
   85810:	d057      	beq.n	858c2 <udd_ctrl_in_sent+0xe2>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85812:	4b46      	ldr	r3, [pc, #280]	; (8592c <udd_ctrl_in_sent+0x14c>)
   85814:	881b      	ldrh	r3, [r3, #0]
   85816:	4a46      	ldr	r2, [pc, #280]	; (85930 <udd_ctrl_in_sent+0x150>)
   85818:	8994      	ldrh	r4, [r2, #12]
   8581a:	1ae4      	subs	r4, r4, r3
   8581c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   8581e:	b9c4      	cbnz	r4, 85852 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85820:	4a44      	ldr	r2, [pc, #272]	; (85934 <udd_ctrl_in_sent+0x154>)
   85822:	8811      	ldrh	r1, [r2, #0]
   85824:	440b      	add	r3, r1
   85826:	b29b      	uxth	r3, r3
   85828:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8582a:	4a41      	ldr	r2, [pc, #260]	; (85930 <udd_ctrl_in_sent+0x150>)
   8582c:	88d2      	ldrh	r2, [r2, #6]
   8582e:	429a      	cmp	r2, r3
   85830:	d04c      	beq.n	858cc <udd_ctrl_in_sent+0xec>
				|| b_shortpacket) {
   85832:	4b41      	ldr	r3, [pc, #260]	; (85938 <udd_ctrl_in_sent+0x158>)
   85834:	781b      	ldrb	r3, [r3, #0]
   85836:	2b00      	cmp	r3, #0
   85838:	d148      	bne.n	858cc <udd_ctrl_in_sent+0xec>
		if ((!udd_g_ctrlreq.over_under_run)
   8583a:	4b3d      	ldr	r3, [pc, #244]	; (85930 <udd_ctrl_in_sent+0x150>)
   8583c:	695b      	ldr	r3, [r3, #20]
   8583e:	2b00      	cmp	r3, #0
   85840:	d05f      	beq.n	85902 <udd_ctrl_in_sent+0x122>
				|| (!udd_g_ctrlreq.over_under_run())) {
   85842:	4798      	blx	r3
   85844:	2800      	cmp	r0, #0
   85846:	d05c      	beq.n	85902 <udd_ctrl_in_sent+0x122>
			udd_ctrl_payload_buf_cnt = 0;
   85848:	2200      	movs	r2, #0
   8584a:	4b38      	ldr	r3, [pc, #224]	; (8592c <udd_ctrl_in_sent+0x14c>)
   8584c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8584e:	4b38      	ldr	r3, [pc, #224]	; (85930 <udd_ctrl_in_sent+0x150>)
   85850:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   85852:	2c3f      	cmp	r4, #63	; 0x3f
   85854:	d955      	bls.n	85902 <udd_ctrl_in_sent+0x122>
		b_shortpacket = false;
   85856:	2200      	movs	r2, #0
   85858:	4b37      	ldr	r3, [pc, #220]	; (85938 <udd_ctrl_in_sent+0x158>)
   8585a:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8585c:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8585e:	4b34      	ldr	r3, [pc, #208]	; (85930 <udd_ctrl_in_sent+0x150>)
   85860:	689a      	ldr	r2, [r3, #8]
   85862:	4b32      	ldr	r3, [pc, #200]	; (8592c <udd_ctrl_in_sent+0x14c>)
   85864:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85866:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8586a:	b672      	cpsid	i
   8586c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85870:	2100      	movs	r1, #0
   85872:	4b2b      	ldr	r3, [pc, #172]	; (85920 <udd_ctrl_in_sent+0x140>)
   85874:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   85876:	4b2b      	ldr	r3, [pc, #172]	; (85924 <udd_ctrl_in_sent+0x144>)
   85878:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8587c:	f413 7f00 	tst.w	r3, #512	; 0x200
   85880:	d143      	bne.n	8590a <udd_ctrl_in_sent+0x12a>
	for (i = 0; i < nb_remain; i++) {
   85882:	b144      	cbz	r4, 85896 <udd_ctrl_in_sent+0xb6>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85884:	442a      	add	r2, r5
   85886:	4b2d      	ldr	r3, [pc, #180]	; (8593c <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   85888:	f812 1b01 	ldrb.w	r1, [r2], #1
   8588c:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   85890:	b2d9      	uxtb	r1, r3
   85892:	42a1      	cmp	r1, r4
   85894:	d3f8      	bcc.n	85888 <udd_ctrl_in_sent+0xa8>
	udd_ctrl_payload_buf_cnt += nb_remain;
   85896:	442c      	add	r4, r5
   85898:	4b24      	ldr	r3, [pc, #144]	; (8592c <udd_ctrl_in_sent+0x14c>)
   8589a:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   8589c:	4b21      	ldr	r3, [pc, #132]	; (85924 <udd_ctrl_in_sent+0x144>)
   8589e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   858a2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   858a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
   858aa:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   858ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   858b2:	b928      	cbnz	r0, 858c0 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   858b4:	2201      	movs	r2, #1
   858b6:	4b1a      	ldr	r3, [pc, #104]	; (85920 <udd_ctrl_in_sent+0x140>)
   858b8:	701a      	strb	r2, [r3, #0]
   858ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   858be:	b662      	cpsie	i
   858c0:	bd38      	pop	{r3, r4, r5, pc}
		udd_ctrl_endofrequest();
   858c2:	4b1f      	ldr	r3, [pc, #124]	; (85940 <udd_ctrl_in_sent+0x160>)
   858c4:	4798      	blx	r3
		udd_ctrl_init();
   858c6:	4b1f      	ldr	r3, [pc, #124]	; (85944 <udd_ctrl_in_sent+0x164>)
   858c8:	4798      	blx	r3
		return;
   858ca:	bd38      	pop	{r3, r4, r5, pc}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   858cc:	2204      	movs	r2, #4
   858ce:	4b16      	ldr	r3, [pc, #88]	; (85928 <udd_ctrl_in_sent+0x148>)
   858d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   858d2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   858d6:	b672      	cpsid	i
   858d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   858dc:	2100      	movs	r1, #0
   858de:	4a10      	ldr	r2, [pc, #64]	; (85920 <udd_ctrl_in_sent+0x140>)
   858e0:	7011      	strb	r1, [r2, #0]
	udd_ack_nak_in(0);
   858e2:	4a10      	ldr	r2, [pc, #64]	; (85924 <udd_ctrl_in_sent+0x144>)
   858e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   858e8:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   858ec:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   858f0:	2b00      	cmp	r3, #0
   858f2:	d1e5      	bne.n	858c0 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   858f4:	2201      	movs	r2, #1
   858f6:	4b0a      	ldr	r3, [pc, #40]	; (85920 <udd_ctrl_in_sent+0x140>)
   858f8:	701a      	strb	r2, [r3, #0]
   858fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   858fe:	b662      	cpsie	i
   85900:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   85902:	2201      	movs	r2, #1
   85904:	4b0c      	ldr	r3, [pc, #48]	; (85938 <udd_ctrl_in_sent+0x158>)
   85906:	701a      	strb	r2, [r3, #0]
   85908:	e7a9      	b.n	8585e <udd_ctrl_in_sent+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
   8590a:	b928      	cbnz	r0, 85918 <udd_ctrl_in_sent+0x138>
		cpu_irq_enable();
   8590c:	2201      	movs	r2, #1
   8590e:	4b04      	ldr	r3, [pc, #16]	; (85920 <udd_ctrl_in_sent+0x140>)
   85910:	701a      	strb	r2, [r3, #0]
   85912:	f3bf 8f5f 	dmb	sy
   85916:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85918:	2204      	movs	r2, #4
   8591a:	4b03      	ldr	r3, [pc, #12]	; (85928 <udd_ctrl_in_sent+0x148>)
   8591c:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   8591e:	bd38      	pop	{r3, r4, r5, pc}
   85920:	200006ea 	.word	0x200006ea
   85924:	400a4000 	.word	0x400a4000
   85928:	20002308 	.word	0x20002308
   8592c:	20002304 	.word	0x20002304
   85930:	20002dec 	.word	0x20002dec
   85934:	20002306 	.word	0x20002306
   85938:	20002301 	.word	0x20002301
   8593c:	20180000 	.word	0x20180000
   85940:	000857d1 	.word	0x000857d1
   85944:	00085711 	.word	0x00085711

00085948 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85948:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
   8594a:	7d03      	ldrb	r3, [r0, #20]
   8594c:	f013 0f01 	tst.w	r3, #1
   85950:	d013      	beq.n	8597a <udd_ep_finish_job+0x32>
   85952:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
   85954:	7d03      	ldrb	r3, [r0, #20]
   85956:	f36f 0300 	bfc	r3, #0, #1
   8595a:	7503      	strb	r3, [r0, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   8595c:	6804      	ldr	r4, [r0, #0]
   8595e:	b164      	cbz	r4, 8597a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85960:	f102 0308 	add.w	r3, r2, #8
   85964:	015b      	lsls	r3, r3, #5
   85966:	4905      	ldr	r1, [pc, #20]	; (8597c <udd_ep_finish_job+0x34>)
   85968:	58cb      	ldr	r3, [r1, r3]
   8596a:	f013 0f08 	tst.w	r3, #8
		ep_num |= USB_EP_DIR_IN;
   8596e:	bf18      	it	ne
   85970:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85974:	6881      	ldr	r1, [r0, #8]
   85976:	4628      	mov	r0, r5
   85978:	47a0      	blx	r4
   8597a:	bd38      	pop	{r3, r4, r5, pc}
   8597c:	400a4000 	.word	0x400a4000

00085980 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85982:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   85984:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85988:	4a59      	ldr	r2, [pc, #356]	; (85af0 <udd_ep_trans_done+0x170>)
   8598a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8598e:	7d12      	ldrb	r2, [r2, #20]
   85990:	f012 0f01 	tst.w	r2, #1
   85994:	f000 809e 	beq.w	85ad4 <udd_ep_trans_done+0x154>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85998:	460a      	mov	r2, r1
   8599a:	4955      	ldr	r1, [pc, #340]	; (85af0 <udd_ep_trans_done+0x170>)
   8599c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   859a0:	68d4      	ldr	r4, [r2, #12]
   859a2:	6892      	ldr	r2, [r2, #8]
   859a4:	4294      	cmp	r4, r2
   859a6:	d079      	beq.n	85a9c <udd_ep_trans_done+0x11c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   859a8:	1b12      	subs	r2, r2, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   859aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   859ae:	bf92      	itee	ls
   859b0:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   859b2:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   859b6:	2700      	movhi	r7, #0
   859b8:	0141      	lsls	r1, r0, #5
   859ba:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   859be:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   859c2:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   859c6:	f015 0f08 	tst.w	r5, #8
   859ca:	d014      	beq.n	859f6 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   859cc:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   859d0:	f005 0507 	and.w	r5, r5, #7
   859d4:	2108      	movs	r1, #8
   859d6:	40a9      	lsls	r1, r5
   859d8:	3901      	subs	r1, #1
   859da:	4211      	tst	r1, r2
   859dc:	d013      	beq.n	85a06 <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   859de:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   859e2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   859e6:	4d42      	ldr	r5, [pc, #264]	; (85af0 <udd_ep_trans_done+0x170>)
   859e8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   859ec:	7d0d      	ldrb	r5, [r1, #20]
   859ee:	f36f 0541 	bfc	r5, #1, #1
   859f2:	750d      	strb	r5, [r1, #20]
   859f4:	e007      	b.n	85a06 <udd_ep_trans_done+0x86>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   859f6:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   859fa:	f3c5 1501 	ubfx	r5, r5, #4, #2
   859fe:	2d01      	cmp	r5, #1
   85a00:	d035      	beq.n	85a6e <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85a02:	f047 0714 	orr.w	r7, r7, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85a06:	493b      	ldr	r1, [pc, #236]	; (85af4 <udd_ep_trans_done+0x174>)
   85a08:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   85a0c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   85a10:	4e37      	ldr	r6, [pc, #220]	; (85af0 <udd_ep_trans_done+0x170>)
   85a12:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85a16:	686d      	ldr	r5, [r5, #4]
   85a18:	442c      	add	r4, r5
   85a1a:	604c      	str	r4, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85a1c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   85a20:	b672      	cpsid	i
   85a22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85a26:	2600      	movs	r6, #0
   85a28:	4c33      	ldr	r4, [pc, #204]	; (85af8 <udd_ep_trans_done+0x178>)
   85a2a:	7026      	strb	r6, [r4, #0]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   85a2c:	68cc      	ldr	r4, [r1, #12]
   85a2e:	f014 0f10 	tst.w	r4, #16
   85a32:	d125      	bne.n	85a80 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85a34:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85a38:	608f      	str	r7, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   85a3a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   85a3e:	492c      	ldr	r1, [pc, #176]	; (85af0 <udd_ep_trans_done+0x170>)
   85a40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   85a44:	68c8      	ldr	r0, [r1, #12]
   85a46:	4410      	add	r0, r2
   85a48:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   85a4a:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85a4c:	4a2b      	ldr	r2, [pc, #172]	; (85afc <udd_ep_trans_done+0x17c>)
   85a4e:	6911      	ldr	r1, [r2, #16]
   85a50:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   85a54:	fa00 f303 	lsl.w	r3, r0, r3
   85a58:	430b      	orrs	r3, r1
   85a5a:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85a5c:	2d00      	cmp	r5, #0
   85a5e:	d139      	bne.n	85ad4 <udd_ep_trans_done+0x154>
		cpu_irq_enable();
   85a60:	2201      	movs	r2, #1
   85a62:	4b25      	ldr	r3, [pc, #148]	; (85af8 <udd_ep_trans_done+0x178>)
   85a64:	701a      	strb	r2, [r3, #0]
   85a66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85a6a:	b662      	cpsie	i
   85a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85a6e:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   85a72:	f005 0507 	and.w	r5, r5, #7
   85a76:	2108      	movs	r1, #8
   85a78:	40a9      	lsls	r1, r5
   85a7a:	428a      	cmp	r2, r1
   85a7c:	d8c3      	bhi.n	85a06 <udd_ep_trans_done+0x86>
   85a7e:	e7c0      	b.n	85a02 <udd_ep_trans_done+0x82>
	if (cpu_irq_is_enabled_flags(flags))
   85a80:	b92d      	cbnz	r5, 85a8e <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
   85a82:	2101      	movs	r1, #1
   85a84:	4a1c      	ldr	r2, [pc, #112]	; (85af8 <udd_ep_trans_done+0x178>)
   85a86:	7011      	strb	r1, [r2, #0]
   85a88:	f3bf 8f5f 	dmb	sy
   85a8c:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   85a8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   85a92:	4917      	ldr	r1, [pc, #92]	; (85af0 <udd_ep_trans_done+0x170>)
   85a94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   85a98:	68d1      	ldr	r1, [r2, #12]
   85a9a:	6091      	str	r1, [r2, #8]
   85a9c:	0142      	lsls	r2, r0, #5
   85a9e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85aa2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
	}
	if (Is_udd_endpoint_in(ep)) {
   85aa6:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   85aaa:	f011 0f08 	tst.w	r1, #8
   85aae:	d008      	beq.n	85ac2 <udd_ep_trans_done+0x142>
		if (ptr_job->b_shortpacket) {
   85ab0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85ab4:	4c0e      	ldr	r4, [pc, #56]	; (85af0 <udd_ep_trans_done+0x170>)
   85ab6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   85aba:	7d09      	ldrb	r1, [r1, #20]
   85abc:	f011 0f02 	tst.w	r1, #2
   85ac0:	d109      	bne.n	85ad6 <udd_ep_trans_done+0x156>
   85ac2:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   85ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   85ac8:	2100      	movs	r1, #0
   85aca:	4809      	ldr	r0, [pc, #36]	; (85af0 <udd_ep_trans_done+0x170>)
   85acc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   85ad0:	4b0b      	ldr	r3, [pc, #44]	; (85b00 <udd_ep_trans_done+0x180>)
   85ad2:	4798      	blx	r3
   85ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			udd_enable_tx_pkt_ready_interrupt(ep);
   85ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85ada:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   85ade:	4b07      	ldr	r3, [pc, #28]	; (85afc <udd_ep_trans_done+0x17c>)
   85ae0:	6919      	ldr	r1, [r3, #16]
   85ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
   85ae6:	fa02 f000 	lsl.w	r0, r2, r0
   85aea:	4308      	orrs	r0, r1
   85aec:	6118      	str	r0, [r3, #16]
			return;
   85aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85af0:	2000230c 	.word	0x2000230c
   85af4:	400a4300 	.word	0x400a4300
   85af8:	200006ea 	.word	0x200006ea
   85afc:	400a4000 	.word	0x400a4000
   85b00:	00085949 	.word	0x00085949

00085b04 <UDPHS_Handler>:
{
   85b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   85b08:	201d      	movs	r0, #29
   85b0a:	4ba6      	ldr	r3, [pc, #664]	; (85da4 <UDPHS_Handler+0x2a0>)
   85b0c:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   85b0e:	4ba6      	ldr	r3, [pc, #664]	; (85da8 <UDPHS_Handler+0x2a4>)
   85b10:	4798      	blx	r3
   85b12:	b920      	cbnz	r0, 85b1e <UDPHS_Handler+0x1a>
   85b14:	4ba5      	ldr	r3, [pc, #660]	; (85dac <UDPHS_Handler+0x2a8>)
   85b16:	695b      	ldr	r3, [r3, #20]
   85b18:	f013 0f02 	tst.w	r3, #2
   85b1c:	d00f      	beq.n	85b3e <UDPHS_Handler+0x3a>
	if (Is_udd_sof()) {
   85b1e:	4ba3      	ldr	r3, [pc, #652]	; (85dac <UDPHS_Handler+0x2a8>)
   85b20:	695b      	ldr	r3, [r3, #20]
   85b22:	f013 0f08 	tst.w	r3, #8
   85b26:	d015      	beq.n	85b54 <UDPHS_Handler+0x50>
		udd_ack_sof();
   85b28:	4ba0      	ldr	r3, [pc, #640]	; (85dac <UDPHS_Handler+0x2a8>)
   85b2a:	2208      	movs	r2, #8
   85b2c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   85b2e:	695b      	ldr	r3, [r3, #20]
   85b30:	f013 0f01 	tst.w	r3, #1
   85b34:	d00b      	beq.n	85b4e <UDPHS_Handler+0x4a>
		UDC_SOF_EVENT();
   85b36:	4b9e      	ldr	r3, [pc, #632]	; (85db0 <UDPHS_Handler+0x2ac>)
   85b38:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("cpsid i");
   85b3e:	b672      	cpsid	i
   85b40:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85b44:	2200      	movs	r2, #0
   85b46:	4b9b      	ldr	r3, [pc, #620]	; (85db4 <UDPHS_Handler+0x2b0>)
   85b48:	701a      	strb	r2, [r3, #0]
		return;
   85b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   85b4e:	4b9a      	ldr	r3, [pc, #616]	; (85db8 <UDPHS_Handler+0x2b4>)
   85b50:	4798      	blx	r3
   85b52:	e7f0      	b.n	85b36 <UDPHS_Handler+0x32>
	if (Is_udd_msof()) {
   85b54:	4b95      	ldr	r3, [pc, #596]	; (85dac <UDPHS_Handler+0x2a8>)
   85b56:	695b      	ldr	r3, [r3, #20]
   85b58:	f013 0f04 	tst.w	r3, #4
   85b5c:	d137      	bne.n	85bce <UDPHS_Handler+0xca>
	uint32_t status = udd_get_endpoint_status(0);
   85b5e:	4a93      	ldr	r2, [pc, #588]	; (85dac <UDPHS_Handler+0x2a8>)
   85b60:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   85b64:	6952      	ldr	r2, [r2, #20]
   85b66:	f412 7f80 	tst.w	r2, #256	; 0x100
   85b6a:	d029      	beq.n	85bc0 <UDPHS_Handler+0xbc>
	udd_disable_nak_in_interrupt(0);
   85b6c:	4a8f      	ldr	r2, [pc, #572]	; (85dac <UDPHS_Handler+0x2a8>)
   85b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85b72:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   85b7a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   85b7e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   85b82:	d12b      	bne.n	85bdc <UDPHS_Handler+0xd8>
	if (Is_udd_endpoint_status_in_sent(status)
   85b84:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85b88:	d006      	beq.n	85b98 <UDPHS_Handler+0x94>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85b8a:	4a88      	ldr	r2, [pc, #544]	; (85dac <UDPHS_Handler+0x2a8>)
   85b8c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85b90:	f412 6f80 	tst.w	r2, #1024	; 0x400
   85b94:	f040 808f 	bne.w	85cb6 <UDPHS_Handler+0x1b2>
	if (Is_udd_endpoint_status_out_received(status)) {
   85b98:	f413 7f00 	tst.w	r3, #512	; 0x200
   85b9c:	f040 808f 	bne.w	85cbe <UDPHS_Handler+0x1ba>
	if (Is_udd_endpoint_status_stall(status)) {
   85ba0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85ba4:	d004      	beq.n	85bb0 <UDPHS_Handler+0xac>
		udd_ack_stall(0);
   85ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85baa:	4a80      	ldr	r2, [pc, #512]	; (85dac <UDPHS_Handler+0x2a8>)
   85bac:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   85bb0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   85bb4:	f040 813c 	bne.w	85e30 <UDPHS_Handler+0x32c>
	if (Is_udd_endpoint_status_nak_in(status)) {
   85bb8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   85bbc:	f040 814e 	bne.w	85e5c <UDPHS_Handler+0x358>
	for (i = 0; i < nb_data; i++) {
   85bc0:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85bc2:	497a      	ldr	r1, [pc, #488]	; (85dac <UDPHS_Handler+0x2a8>)
   85bc4:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85bc8:	f44f 7c80 	mov.w	ip, #256	; 0x100
   85bcc:	e199      	b.n	85f02 <UDPHS_Handler+0x3fe>
		udd_ack_msof();
   85bce:	2204      	movs	r2, #4
   85bd0:	4b76      	ldr	r3, [pc, #472]	; (85dac <UDPHS_Handler+0x2a8>)
   85bd2:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   85bd4:	4b78      	ldr	r3, [pc, #480]	; (85db8 <UDPHS_Handler+0x2b4>)
   85bd6:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85bdc:	4b77      	ldr	r3, [pc, #476]	; (85dbc <UDPHS_Handler+0x2b8>)
   85bde:	781b      	ldrb	r3, [r3, #0]
   85be0:	2b00      	cmp	r3, #0
   85be2:	d141      	bne.n	85c68 <UDPHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
   85be4:	4b71      	ldr	r3, [pc, #452]	; (85dac <UDPHS_Handler+0x2a8>)
   85be6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85bea:	f3c3 530a 	ubfx	r3, r3, #20, #11
   85bee:	2b08      	cmp	r3, #8
   85bf0:	d13f      	bne.n	85c72 <UDPHS_Handler+0x16e>
   85bf2:	4a73      	ldr	r2, [pc, #460]	; (85dc0 <UDPHS_Handler+0x2bc>)
   85bf4:	4b73      	ldr	r3, [pc, #460]	; (85dc4 <UDPHS_Handler+0x2c0>)
	for (i = 0; i < 8; i++) {
   85bf6:	4874      	ldr	r0, [pc, #464]	; (85dc8 <UDPHS_Handler+0x2c4>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85bf8:	f813 1b01 	ldrb.w	r1, [r3], #1
   85bfc:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   85c00:	4283      	cmp	r3, r0
   85c02:	d1f9      	bne.n	85bf8 <UDPHS_Handler+0xf4>
	if (udc_process_setup() == false) {
   85c04:	4b71      	ldr	r3, [pc, #452]	; (85dcc <UDPHS_Handler+0x2c8>)
   85c06:	4798      	blx	r3
   85c08:	2800      	cmp	r0, #0
   85c0a:	d03b      	beq.n	85c84 <UDPHS_Handler+0x180>
	udd_ack_setup_received(0);
   85c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c10:	4b66      	ldr	r3, [pc, #408]	; (85dac <UDPHS_Handler+0x2a8>)
   85c12:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   85c16:	4b6e      	ldr	r3, [pc, #440]	; (85dd0 <UDPHS_Handler+0x2cc>)
   85c18:	f993 3000 	ldrsb.w	r3, [r3]
   85c1c:	2b00      	cmp	r3, #0
   85c1e:	db3a      	blt.n	85c96 <UDPHS_Handler+0x192>
		if (0 == udd_g_ctrlreq.req.wLength) {
   85c20:	4b6b      	ldr	r3, [pc, #428]	; (85dd0 <UDPHS_Handler+0x2cc>)
   85c22:	88db      	ldrh	r3, [r3, #6]
   85c24:	2b00      	cmp	r3, #0
   85c26:	d042      	beq.n	85cae <UDPHS_Handler+0x1aa>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c28:	2200      	movs	r2, #0
   85c2a:	4b6a      	ldr	r3, [pc, #424]	; (85dd4 <UDPHS_Handler+0x2d0>)
   85c2c:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85c2e:	4b6a      	ldr	r3, [pc, #424]	; (85dd8 <UDPHS_Handler+0x2d4>)
   85c30:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85c32:	2101      	movs	r1, #1
   85c34:	4b61      	ldr	r3, [pc, #388]	; (85dbc <UDPHS_Handler+0x2b8>)
   85c36:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   85c38:	495c      	ldr	r1, [pc, #368]	; (85dac <UDPHS_Handler+0x2a8>)
   85c3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   85c3e:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85c42:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85c46:	b672      	cpsid	i
   85c48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85c4c:	4c59      	ldr	r4, [pc, #356]	; (85db4 <UDPHS_Handler+0x2b0>)
   85c4e:	7022      	strb	r2, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   85c50:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85c54:	2b00      	cmp	r3, #0
   85c56:	f040 8266 	bne.w	86126 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   85c5a:	2201      	movs	r2, #1
   85c5c:	7022      	strb	r2, [r4, #0]
   85c5e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85c62:	b662      	cpsie	i
   85c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_endofrequest();
   85c68:	4b5c      	ldr	r3, [pc, #368]	; (85ddc <UDPHS_Handler+0x2d8>)
   85c6a:	4798      	blx	r3
		udd_ctrl_init();
   85c6c:	4b5c      	ldr	r3, [pc, #368]	; (85de0 <UDPHS_Handler+0x2dc>)
   85c6e:	4798      	blx	r3
   85c70:	e7b8      	b.n	85be4 <UDPHS_Handler+0xe0>
		udd_ctrl_stall_data();
   85c72:	4b5c      	ldr	r3, [pc, #368]	; (85de4 <UDPHS_Handler+0x2e0>)
   85c74:	4798      	blx	r3
		udd_ack_setup_received(0);
   85c76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c7a:	4b4c      	ldr	r3, [pc, #304]	; (85dac <UDPHS_Handler+0x2a8>)
   85c7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_stall_data();
   85c84:	4b57      	ldr	r3, [pc, #348]	; (85de4 <UDPHS_Handler+0x2e0>)
   85c86:	4798      	blx	r3
		udd_ack_setup_received(0);
   85c88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c8c:	4b47      	ldr	r3, [pc, #284]	; (85dac <UDPHS_Handler+0x2a8>)
   85c8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c96:	2300      	movs	r3, #0
   85c98:	4a4e      	ldr	r2, [pc, #312]	; (85dd4 <UDPHS_Handler+0x2d0>)
   85c9a:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85c9c:	4a4e      	ldr	r2, [pc, #312]	; (85dd8 <UDPHS_Handler+0x2d4>)
   85c9e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85ca0:	2202      	movs	r2, #2
   85ca2:	4b46      	ldr	r3, [pc, #280]	; (85dbc <UDPHS_Handler+0x2b8>)
   85ca4:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   85ca6:	4b50      	ldr	r3, [pc, #320]	; (85de8 <UDPHS_Handler+0x2e4>)
   85ca8:	4798      	blx	r3
   85caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_send_zlp_in();
   85cae:	4b4f      	ldr	r3, [pc, #316]	; (85dec <UDPHS_Handler+0x2e8>)
   85cb0:	4798      	blx	r3
   85cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_in_sent();
   85cb6:	4b4c      	ldr	r3, [pc, #304]	; (85de8 <UDPHS_Handler+0x2e4>)
   85cb8:	4798      	blx	r3
   85cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85cbe:	4b3f      	ldr	r3, [pc, #252]	; (85dbc <UDPHS_Handler+0x2b8>)
   85cc0:	781b      	ldrb	r3, [r3, #0]
   85cc2:	2b01      	cmp	r3, #1
   85cc4:	d00c      	beq.n	85ce0 <UDPHS_Handler+0x1dc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85cc6:	2b02      	cmp	r3, #2
   85cc8:	d004      	beq.n	85cd4 <UDPHS_Handler+0x1d0>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85cca:	2b04      	cmp	r3, #4
   85ccc:	d002      	beq.n	85cd4 <UDPHS_Handler+0x1d0>
			udd_ctrl_stall_data();
   85cce:	4b45      	ldr	r3, [pc, #276]	; (85de4 <UDPHS_Handler+0x2e0>)
   85cd0:	4798      	blx	r3
   85cd2:	e001      	b.n	85cd8 <UDPHS_Handler+0x1d4>
			udd_ctrl_endofrequest();
   85cd4:	4b41      	ldr	r3, [pc, #260]	; (85ddc <UDPHS_Handler+0x2d8>)
   85cd6:	4798      	blx	r3
		udd_ctrl_init();
   85cd8:	4b41      	ldr	r3, [pc, #260]	; (85de0 <UDPHS_Handler+0x2dc>)
   85cda:	4798      	blx	r3
   85cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nb_data = udd_byte_count(0);
   85ce0:	4b32      	ldr	r3, [pc, #200]	; (85dac <UDPHS_Handler+0x2a8>)
   85ce2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   85ce6:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85cea:	4b39      	ldr	r3, [pc, #228]	; (85dd0 <UDPHS_Handler+0x2cc>)
   85cec:	899b      	ldrh	r3, [r3, #12]
   85cee:	4a3a      	ldr	r2, [pc, #232]	; (85dd8 <UDPHS_Handler+0x2d4>)
   85cf0:	8814      	ldrh	r4, [r2, #0]
   85cf2:	1822      	adds	r2, r4, r0
   85cf4:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85cf6:	bfbc      	itt	lt
   85cf8:	1b1b      	sublt	r3, r3, r4
   85cfa:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85cfc:	4b34      	ldr	r3, [pc, #208]	; (85dd0 <UDPHS_Handler+0x2cc>)
   85cfe:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   85d00:	b178      	cbz	r0, 85d22 <UDPHS_Handler+0x21e>
   85d02:	1e63      	subs	r3, r4, #1
   85d04:	441a      	add	r2, r3
   85d06:	4b2f      	ldr	r3, [pc, #188]	; (85dc4 <UDPHS_Handler+0x2c0>)
		*ptr_dest++ = *ptr_src++;
   85d08:	f813 1b01 	ldrb.w	r1, [r3], #1
   85d0c:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   85d10:	b2d9      	uxtb	r1, r3
   85d12:	4281      	cmp	r1, r0
   85d14:	d3f8      	bcc.n	85d08 <UDPHS_Handler+0x204>
	udd_ctrl_payload_buf_cnt += nb_data;
   85d16:	4404      	add	r4, r0
   85d18:	b2a4      	uxth	r4, r4
   85d1a:	4b2f      	ldr	r3, [pc, #188]	; (85dd8 <UDPHS_Handler+0x2d4>)
   85d1c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85d1e:	2840      	cmp	r0, #64	; 0x40
   85d20:	d00e      	beq.n	85d40 <UDPHS_Handler+0x23c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85d22:	4b2b      	ldr	r3, [pc, #172]	; (85dd0 <UDPHS_Handler+0x2cc>)
   85d24:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85d26:	695b      	ldr	r3, [r3, #20]
   85d28:	b10b      	cbz	r3, 85d2e <UDPHS_Handler+0x22a>
			if (!udd_g_ctrlreq.over_under_run()) {
   85d2a:	4798      	blx	r3
   85d2c:	b380      	cbz	r0, 85d90 <UDPHS_Handler+0x28c>
		udd_ack_out_received(0);
   85d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
   85d32:	4b1e      	ldr	r3, [pc, #120]	; (85dac <UDPHS_Handler+0x2a8>)
   85d34:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85d38:	4b2c      	ldr	r3, [pc, #176]	; (85dec <UDPHS_Handler+0x2e8>)
   85d3a:	4798      	blx	r3
   85d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (udd_g_ctrlreq.req.wLength <=
   85d40:	4b23      	ldr	r3, [pc, #140]	; (85dd0 <UDPHS_Handler+0x2cc>)
   85d42:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   85d44:	4b23      	ldr	r3, [pc, #140]	; (85dd4 <UDPHS_Handler+0x2d0>)
   85d46:	881b      	ldrh	r3, [r3, #0]
   85d48:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   85d4a:	429a      	cmp	r2, r3
   85d4c:	dde9      	ble.n	85d22 <UDPHS_Handler+0x21e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85d4e:	4b20      	ldr	r3, [pc, #128]	; (85dd0 <UDPHS_Handler+0x2cc>)
   85d50:	899b      	ldrh	r3, [r3, #12]
   85d52:	42a3      	cmp	r3, r4
   85d54:	d04c      	beq.n	85df0 <UDPHS_Handler+0x2ec>
	udd_ack_out_received(0);
   85d56:	4a15      	ldr	r2, [pc, #84]	; (85dac <UDPHS_Handler+0x2a8>)
   85d58:	f44f 7300 	mov.w	r3, #512	; 0x200
   85d5c:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_ack_nak_in(0);
   85d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85d64:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85d68:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85d6c:	b672      	cpsid	i
   85d6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85d72:	2400      	movs	r4, #0
   85d74:	480f      	ldr	r0, [pc, #60]	; (85db4 <UDPHS_Handler+0x2b0>)
   85d76:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   85d78:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85d7c:	2b00      	cmp	r3, #0
   85d7e:	f040 81d2 	bne.w	86126 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   85d82:	2201      	movs	r2, #1
   85d84:	7002      	strb	r2, [r0, #0]
   85d86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85d8a:	b662      	cpsie	i
   85d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				udd_ctrl_stall_data();
   85d90:	4b14      	ldr	r3, [pc, #80]	; (85de4 <UDPHS_Handler+0x2e0>)
   85d92:	4798      	blx	r3
				udd_ack_out_received(0);
   85d94:	f44f 7200 	mov.w	r2, #512	; 0x200
   85d98:	4b04      	ldr	r3, [pc, #16]	; (85dac <UDPHS_Handler+0x2a8>)
   85d9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85da2:	bf00      	nop
   85da4:	00085515 	.word	0x00085515
   85da8:	000855a5 	.word	0x000855a5
   85dac:	400a4000 	.word	0x400a4000
   85db0:	00083051 	.word	0x00083051
   85db4:	200006ea 	.word	0x200006ea
   85db8:	000848a1 	.word	0x000848a1
   85dbc:	20002308 	.word	0x20002308
   85dc0:	20002deb 	.word	0x20002deb
   85dc4:	20180000 	.word	0x20180000
   85dc8:	20180008 	.word	0x20180008
   85dcc:	000848e1 	.word	0x000848e1
   85dd0:	20002dec 	.word	0x20002dec
   85dd4:	20002306 	.word	0x20002306
   85dd8:	20002304 	.word	0x20002304
   85ddc:	000857d1 	.word	0x000857d1
   85de0:	00085711 	.word	0x00085711
   85de4:	00085765 	.word	0x00085765
   85de8:	000857e1 	.word	0x000857e1
   85dec:	0008577d 	.word	0x0008577d
		if (!udd_g_ctrlreq.over_under_run) {
   85df0:	4bb0      	ldr	r3, [pc, #704]	; (860b4 <UDPHS_Handler+0x5b0>)
   85df2:	695b      	ldr	r3, [r3, #20]
   85df4:	b153      	cbz	r3, 85e0c <UDPHS_Handler+0x308>
		if (!udd_g_ctrlreq.over_under_run()) {
   85df6:	4798      	blx	r3
   85df8:	b188      	cbz	r0, 85e1e <UDPHS_Handler+0x31a>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85dfa:	49af      	ldr	r1, [pc, #700]	; (860b8 <UDPHS_Handler+0x5b4>)
   85dfc:	4aaf      	ldr	r2, [pc, #700]	; (860bc <UDPHS_Handler+0x5b8>)
   85dfe:	880b      	ldrh	r3, [r1, #0]
   85e00:	8810      	ldrh	r0, [r2, #0]
   85e02:	4403      	add	r3, r0
   85e04:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85e06:	2300      	movs	r3, #0
   85e08:	8013      	strh	r3, [r2, #0]
   85e0a:	e7a4      	b.n	85d56 <UDPHS_Handler+0x252>
			udd_ctrl_stall_data();
   85e0c:	4bac      	ldr	r3, [pc, #688]	; (860c0 <UDPHS_Handler+0x5bc>)
   85e0e:	4798      	blx	r3
			udd_ack_out_received(0);
   85e10:	f44f 7200 	mov.w	r2, #512	; 0x200
   85e14:	4bab      	ldr	r3, [pc, #684]	; (860c4 <UDPHS_Handler+0x5c0>)
   85e16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_stall_data();
   85e1e:	4ba8      	ldr	r3, [pc, #672]	; (860c0 <UDPHS_Handler+0x5bc>)
   85e20:	4798      	blx	r3
			udd_ack_out_received(0);
   85e22:	f44f 7200 	mov.w	r2, #512	; 0x200
   85e26:	4ba7      	ldr	r3, [pc, #668]	; (860c4 <UDPHS_Handler+0x5c0>)
   85e28:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_out(0);
   85e30:	4ba4      	ldr	r3, [pc, #656]	; (860c4 <UDPHS_Handler+0x5c0>)
   85e32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85e36:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   85e3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85e3e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85e42:	f040 8170 	bne.w	86126 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85e46:	4ba0      	ldr	r3, [pc, #640]	; (860c8 <UDPHS_Handler+0x5c4>)
   85e48:	781b      	ldrb	r3, [r3, #0]
   85e4a:	2b03      	cmp	r3, #3
   85e4c:	f040 816b 	bne.w	86126 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   85e50:	2220      	movs	r2, #32
   85e52:	4b9c      	ldr	r3, [pc, #624]	; (860c4 <UDPHS_Handler+0x5c0>)
   85e54:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_in(0);
   85e5c:	4b99      	ldr	r3, [pc, #612]	; (860c4 <UDPHS_Handler+0x5c0>)
   85e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85e62:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   85e66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85e6a:	f413 7f00 	tst.w	r3, #512	; 0x200
   85e6e:	f040 815a 	bne.w	86126 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85e72:	4b95      	ldr	r3, [pc, #596]	; (860c8 <UDPHS_Handler+0x5c4>)
   85e74:	781b      	ldrb	r3, [r3, #0]
   85e76:	2b01      	cmp	r3, #1
   85e78:	d008      	beq.n	85e8c <UDPHS_Handler+0x388>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85e7a:	2b04      	cmp	r3, #4
   85e7c:	f040 8153 	bne.w	86126 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   85e80:	2220      	movs	r2, #32
   85e82:	4b90      	ldr	r3, [pc, #576]	; (860c4 <UDPHS_Handler+0x5c0>)
   85e84:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_send_zlp_in();
   85e8c:	4b8f      	ldr	r3, [pc, #572]	; (860cc <UDPHS_Handler+0x5c8>)
   85e8e:	4798      	blx	r3
   85e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (udd_endpoint_dma_get_status(ep)
   85e94:	4b8e      	ldr	r3, [pc, #568]	; (860d0 <UDPHS_Handler+0x5cc>)
   85e96:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   85e9a:	68da      	ldr	r2, [r3, #12]
   85e9c:	f012 0f01 	tst.w	r2, #1
   85ea0:	f040 8141 	bne.w	86126 <UDPHS_Handler+0x622>
			udd_disable_endpoint_dma_interrupt(ep);
   85ea4:	4987      	ldr	r1, [pc, #540]	; (860c4 <UDPHS_Handler+0x5c0>)
   85ea6:	690a      	ldr	r2, [r1, #16]
   85ea8:	ea22 0606 	bic.w	r6, r2, r6
   85eac:	610e      	str	r6, [r1, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85eae:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   85eb0:	0c1b      	lsrs	r3, r3, #16
   85eb2:	d008      	beq.n	85ec6 <UDPHS_Handler+0x3c2>
				ptr_job->buf_cnt -= nb_remaining;
   85eb4:	4a87      	ldr	r2, [pc, #540]	; (860d4 <UDPHS_Handler+0x5d0>)
   85eb6:	006c      	lsls	r4, r5, #1
   85eb8:	1965      	adds	r5, r4, r5
   85eba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   85ebe:	68e9      	ldr	r1, [r5, #12]
   85ec0:	1acb      	subs	r3, r1, r3
   85ec2:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   85ec4:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
   85ec6:	4b84      	ldr	r3, [pc, #528]	; (860d8 <UDPHS_Handler+0x5d4>)
   85ec8:	4798      	blx	r3
   85eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   85ece:	0163      	lsls	r3, r4, #5
   85ed0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85ed4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85edc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   85ee0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   85ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   85ee8:	4602      	mov	r2, r0
   85eea:	2100      	movs	r1, #0
   85eec:	4879      	ldr	r0, [pc, #484]	; (860d4 <UDPHS_Handler+0x5d0>)
   85eee:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   85ef2:	4b7a      	ldr	r3, [pc, #488]	; (860dc <UDPHS_Handler+0x5d8>)
   85ef4:	4798      	blx	r3
   85ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85efa:	3301      	adds	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85efc:	2b07      	cmp	r3, #7
   85efe:	f000 80fd 	beq.w	860fc <UDPHS_Handler+0x5f8>
   85f02:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   85f04:	461c      	mov	r4, r3
   85f06:	1e5d      	subs	r5, r3, #1
   85f08:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85f0a:	690f      	ldr	r7, [r1, #16]
   85f0c:	fa0e f605 	lsl.w	r6, lr, r5
   85f10:	4237      	tst	r7, r6
   85f12:	d002      	beq.n	85f1a <UDPHS_Handler+0x416>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85f14:	694a      	ldr	r2, [r1, #20]
   85f16:	4216      	tst	r6, r2
   85f18:	d1bc      	bne.n	85e94 <UDPHS_Handler+0x390>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85f1a:	690f      	ldr	r7, [r1, #16]
   85f1c:	fa0c f604 	lsl.w	r6, ip, r4
   85f20:	4237      	tst	r7, r6
   85f22:	d0ea      	beq.n	85efa <UDPHS_Handler+0x3f6>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   85f24:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f28:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85f2c:	f412 6f00 	tst.w	r2, #2048	; 0x800
   85f30:	d006      	beq.n	85f40 <UDPHS_Handler+0x43c>
					&& !Is_udd_tx_pkt_ready(ep)) {
   85f32:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f36:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85f3a:	f412 6f00 	tst.w	r2, #2048	; 0x800
   85f3e:	d0c6      	beq.n	85ece <UDPHS_Handler+0x3ca>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   85f40:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f44:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85f48:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   85f4c:	d0d5      	beq.n	85efa <UDPHS_Handler+0x3f6>
					&& (0 == udd_nb_busy_bank(ep))) {
   85f4e:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85f52:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85f56:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   85f5a:	d1ce      	bne.n	85efa <UDPHS_Handler+0x3f6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   85f5c:	4b59      	ldr	r3, [pc, #356]	; (860c4 <UDPHS_Handler+0x5c0>)
   85f5e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   85f62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85f66:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   85f6a:	691a      	ldr	r2, [r3, #16]
   85f6c:	ea22 0606 	bic.w	r6, r2, r6
   85f70:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   85f72:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   85f76:	4b57      	ldr	r3, [pc, #348]	; (860d4 <UDPHS_Handler+0x5d0>)
   85f78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   85f7c:	f898 2014 	ldrb.w	r2, [r8, #20]
   85f80:	f36f 0282 	bfc	r2, #2, #1
   85f84:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   85f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   85f8c:	f023 0302 	bic.w	r3, r3, #2
   85f90:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   85f94:	2320      	movs	r3, #32
   85f96:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   85f9a:	2340      	movs	r3, #64	; 0x40
   85f9c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   85fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_reset();
   85fa4:	2210      	movs	r2, #16
   85fa6:	4b47      	ldr	r3, [pc, #284]	; (860c4 <UDPHS_Handler+0x5c0>)
   85fa8:	619a      	str	r2, [r3, #24]
   85faa:	4d4a      	ldr	r5, [pc, #296]	; (860d4 <UDPHS_Handler+0x5d0>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85fac:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85fae:	2701      	movs	r7, #1
   85fb0:	4e4a      	ldr	r6, [pc, #296]	; (860dc <UDPHS_Handler+0x5d8>)
   85fb2:	3401      	adds	r4, #1
   85fb4:	b2e4      	uxtb	r4, r4
   85fb6:	4622      	mov	r2, r4
   85fb8:	4639      	mov	r1, r7
   85fba:	4628      	mov	r0, r5
   85fbc:	47b0      	blx	r6
   85fbe:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85fc0:	2c06      	cmp	r4, #6
   85fc2:	d1f6      	bne.n	85fb2 <UDPHS_Handler+0x4ae>
		udc_reset();
   85fc4:	4b46      	ldr	r3, [pc, #280]	; (860e0 <UDPHS_Handler+0x5dc>)
   85fc6:	4798      	blx	r3
	udd_configure_address(0);
   85fc8:	4b3e      	ldr	r3, [pc, #248]	; (860c4 <UDPHS_Handler+0x5c0>)
   85fca:	681a      	ldr	r2, [r3, #0]
   85fcc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85fd0:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   85fd2:	681a      	ldr	r2, [r3, #0]
   85fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85fd8:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   85fda:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85fde:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   85fe2:	f022 0203 	bic.w	r2, r2, #3
   85fe6:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   85fea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   85fee:	2201      	movs	r2, #1
   85ff0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85ff4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   85ff8:	b672      	cpsid	i
   85ffa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85ffe:	2000      	movs	r0, #0
   86000:	4938      	ldr	r1, [pc, #224]	; (860e4 <UDPHS_Handler+0x5e0>)
   86002:	7008      	strb	r0, [r1, #0]
	udd_enable_setup_received_interrupt(0);
   86004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86008:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   8600c:	f44f 7100 	mov.w	r1, #512	; 0x200
   86010:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   86014:	6919      	ldr	r1, [r3, #16]
   86016:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   8601a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   8601c:	b92a      	cbnz	r2, 8602a <UDPHS_Handler+0x526>
		cpu_irq_enable();
   8601e:	2201      	movs	r2, #1
   86020:	4b30      	ldr	r3, [pc, #192]	; (860e4 <UDPHS_Handler+0x5e0>)
   86022:	701a      	strb	r2, [r3, #0]
   86024:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   86028:	b662      	cpsie	i
		udd_ctrl_init();
   8602a:	4b2f      	ldr	r3, [pc, #188]	; (860e8 <UDPHS_Handler+0x5e4>)
   8602c:	4798      	blx	r3
		udd_enable_sof_interrupt();
   8602e:	4b25      	ldr	r3, [pc, #148]	; (860c4 <UDPHS_Handler+0x5c0>)
   86030:	691a      	ldr	r2, [r3, #16]
   86032:	f042 0208 	orr.w	r2, r2, #8
   86036:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   86038:	691a      	ldr	r2, [r3, #16]
   8603a:	f042 0204 	orr.w	r2, r2, #4
   8603e:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   86040:	691a      	ldr	r2, [r3, #16]
   86042:	f042 0202 	orr.w	r2, r2, #2
   86046:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   86048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_wake_up();
   8604c:	4b1d      	ldr	r3, [pc, #116]	; (860c4 <UDPHS_Handler+0x5c0>)
   8604e:	2220      	movs	r2, #32
   86050:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   86052:	691a      	ldr	r2, [r3, #16]
   86054:	f022 0202 	bic.w	r2, r2, #2
   86058:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   8605a:	691a      	ldr	r2, [r3, #16]
   8605c:	f042 0220 	orr.w	r2, r2, #32
   86060:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   86062:	2202      	movs	r2, #2
   86064:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   86066:	201d      	movs	r0, #29
   86068:	4b20      	ldr	r3, [pc, #128]	; (860ec <UDPHS_Handler+0x5e8>)
   8606a:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   8606c:	4b20      	ldr	r3, [pc, #128]	; (860f0 <UDPHS_Handler+0x5ec>)
   8606e:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   86070:	2000      	movs	r0, #0
   86072:	4b20      	ldr	r3, [pc, #128]	; (860f4 <UDPHS_Handler+0x5f0>)
   86074:	4798      	blx	r3
		goto udd_interrupt_end;
   86076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_sleep_mode(true); // Enter in IDLE mode
   8607a:	2001      	movs	r0, #1
   8607c:	4b1d      	ldr	r3, [pc, #116]	; (860f4 <UDPHS_Handler+0x5f0>)
   8607e:	4798      	blx	r3
		udd_ack_suspend();
   86080:	4b10      	ldr	r3, [pc, #64]	; (860c4 <UDPHS_Handler+0x5c0>)
   86082:	2202      	movs	r2, #2
   86084:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   86086:	2220      	movs	r2, #32
   86088:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   8608a:	691a      	ldr	r2, [r3, #16]
   8608c:	f022 0220 	bic.w	r2, r2, #32
   86090:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   86092:	691a      	ldr	r2, [r3, #16]
   86094:	f042 0202 	orr.w	r2, r2, #2
   86098:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   8609a:	691a      	ldr	r2, [r3, #16]
   8609c:	f042 0208 	orr.w	r2, r2, #8
   860a0:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   860a2:	691a      	ldr	r2, [r3, #16]
   860a4:	f042 0204 	orr.w	r2, r2, #4
   860a8:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   860aa:	4b13      	ldr	r3, [pc, #76]	; (860f8 <UDPHS_Handler+0x5f4>)
   860ac:	4798      	blx	r3
		goto udd_interrupt_end;
   860ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   860b2:	bf00      	nop
   860b4:	20002dec 	.word	0x20002dec
   860b8:	20002306 	.word	0x20002306
   860bc:	20002304 	.word	0x20002304
   860c0:	00085765 	.word	0x00085765
   860c4:	400a4000 	.word	0x400a4000
   860c8:	20002308 	.word	0x20002308
   860cc:	0008577d 	.word	0x0008577d
   860d0:	400a4300 	.word	0x400a4300
   860d4:	2000230c 	.word	0x2000230c
   860d8:	00085981 	.word	0x00085981
   860dc:	00085949 	.word	0x00085949
   860e0:	00084859 	.word	0x00084859
   860e4:	200006ea 	.word	0x200006ea
   860e8:	00085711 	.word	0x00085711
   860ec:	00085549 	.word	0x00085549
   860f0:	0008302d 	.word	0x0008302d
   860f4:	000856a1 	.word	0x000856a1
   860f8:	00083045 	.word	0x00083045
	if (Is_udd_reset()) {
   860fc:	4b0b      	ldr	r3, [pc, #44]	; (8612c <UDPHS_Handler+0x628>)
   860fe:	695b      	ldr	r3, [r3, #20]
   86100:	f013 0f10 	tst.w	r3, #16
   86104:	f47f af4e 	bne.w	85fa4 <UDPHS_Handler+0x4a0>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   86108:	4b08      	ldr	r3, [pc, #32]	; (8612c <UDPHS_Handler+0x628>)
   8610a:	691b      	ldr	r3, [r3, #16]
   8610c:	f013 0f02 	tst.w	r3, #2
   86110:	d004      	beq.n	8611c <UDPHS_Handler+0x618>
   86112:	4b06      	ldr	r3, [pc, #24]	; (8612c <UDPHS_Handler+0x628>)
   86114:	695b      	ldr	r3, [r3, #20]
   86116:	f013 0f02 	tst.w	r3, #2
   8611a:	d197      	bne.n	8604c <UDPHS_Handler+0x548>
	if (Is_udd_wake_up()) {
   8611c:	4b03      	ldr	r3, [pc, #12]	; (8612c <UDPHS_Handler+0x628>)
   8611e:	695b      	ldr	r3, [r3, #20]
   86120:	f013 0f20 	tst.w	r3, #32
   86124:	d1a9      	bne.n	8607a <UDPHS_Handler+0x576>
   86126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8612a:	bf00      	nop
   8612c:	400a4000 	.word	0x400a4000

00086130 <udd_attach>:
{
   86130:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86132:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   86136:	b672      	cpsid	i
   86138:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8613c:	2200      	movs	r2, #0
   8613e:	4b1d      	ldr	r3, [pc, #116]	; (861b4 <udd_attach+0x84>)
   86140:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   86142:	2001      	movs	r0, #1
   86144:	4b1c      	ldr	r3, [pc, #112]	; (861b8 <udd_attach+0x88>)
   86146:	4798      	blx	r3
	udd_enable_periph_ck();
   86148:	201d      	movs	r0, #29
   8614a:	4b1c      	ldr	r3, [pc, #112]	; (861bc <udd_attach+0x8c>)
   8614c:	4798      	blx	r3
	udd_attach_device();
   8614e:	4b1c      	ldr	r3, [pc, #112]	; (861c0 <udd_attach+0x90>)
   86150:	681a      	ldr	r2, [r3, #0]
   86152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   86156:	601a      	str	r2, [r3, #0]
   86158:	681a      	ldr	r2, [r3, #0]
   8615a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8615e:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   86160:	691a      	ldr	r2, [r3, #16]
   86162:	f042 0210 	orr.w	r2, r2, #16
   86166:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   86168:	691a      	ldr	r2, [r3, #16]
   8616a:	f042 0202 	orr.w	r2, r2, #2
   8616e:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   86170:	691a      	ldr	r2, [r3, #16]
   86172:	f042 0220 	orr.w	r2, r2, #32
   86176:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   86178:	691a      	ldr	r2, [r3, #16]
   8617a:	f042 0208 	orr.w	r2, r2, #8
   8617e:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   86180:	691a      	ldr	r2, [r3, #16]
   86182:	f042 0204 	orr.w	r2, r2, #4
   86186:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   86188:	2208      	movs	r2, #8
   8618a:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   8618c:	2204      	movs	r2, #4
   8618e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   86190:	2210      	movs	r2, #16
   86192:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   86194:	2202      	movs	r2, #2
   86196:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   86198:	2220      	movs	r2, #32
   8619a:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   8619c:	201d      	movs	r0, #29
   8619e:	4b09      	ldr	r3, [pc, #36]	; (861c4 <udd_attach+0x94>)
   861a0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   861a2:	b92c      	cbnz	r4, 861b0 <udd_attach+0x80>
		cpu_irq_enable();
   861a4:	2201      	movs	r2, #1
   861a6:	4b03      	ldr	r3, [pc, #12]	; (861b4 <udd_attach+0x84>)
   861a8:	701a      	strb	r2, [r3, #0]
   861aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   861ae:	b662      	cpsie	i
   861b0:	bd10      	pop	{r4, pc}
   861b2:	bf00      	nop
   861b4:	200006ea 	.word	0x200006ea
   861b8:	000856a1 	.word	0x000856a1
   861bc:	00085515 	.word	0x00085515
   861c0:	400a4000 	.word	0x400a4000
   861c4:	00085549 	.word	0x00085549

000861c8 <udd_enable>:
{
   861c8:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   861ca:	4b2a      	ldr	r3, [pc, #168]	; (86274 <udd_enable+0xac>)
   861cc:	4798      	blx	r3
	udd_enable_periph_ck();
   861ce:	201d      	movs	r0, #29
   861d0:	4b29      	ldr	r3, [pc, #164]	; (86278 <udd_enable+0xb0>)
   861d2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   861d4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   861d8:	b672      	cpsid	i
   861da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   861de:	2200      	movs	r2, #0
   861e0:	4b26      	ldr	r3, [pc, #152]	; (8627c <udd_enable+0xb4>)
   861e2:	701a      	strb	r2, [r3, #0]
	udd_enable_periph();
   861e4:	4926      	ldr	r1, [pc, #152]	; (86280 <udd_enable+0xb8>)
   861e6:	680b      	ldr	r3, [r1, #0]
   861e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   861ec:	600b      	str	r3, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   861ee:	4b25      	ldr	r3, [pc, #148]	; (86284 <udd_enable+0xbc>)
   861f0:	2150      	movs	r1, #80	; 0x50
   861f2:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   861f6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   861fa:	6019      	str	r1, [r3, #0]
		udd_ep_job[i].busy = false;
   861fc:	4822      	ldr	r0, [pc, #136]	; (86288 <udd_enable+0xc0>)
   861fe:	0053      	lsls	r3, r2, #1
   86200:	1899      	adds	r1, r3, r2
   86202:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   86206:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   86208:	4413      	add	r3, r2
   8620a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   8620e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   86212:	f36f 0182 	bfc	r1, #2, #1
   86216:	7519      	strb	r1, [r3, #20]
   86218:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8621a:	2a06      	cmp	r2, #6
   8621c:	d1ef      	bne.n	861fe <udd_enable+0x36>
	udd_high_speed_enable();
   8621e:	4a18      	ldr	r2, [pc, #96]	; (86280 <udd_enable+0xb8>)
   86220:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86224:	f023 0303 	bic.w	r3, r3, #3
   86228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8622c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   86230:	4b16      	ldr	r3, [pc, #88]	; (8628c <udd_enable+0xc4>)
   86232:	4798      	blx	r3
	udd_b_idle = false;
   86234:	2200      	movs	r2, #0
   86236:	4b16      	ldr	r3, [pc, #88]	; (86290 <udd_enable+0xc8>)
   86238:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8623a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8623e:	b672      	cpsid	i
   86240:	f3bf 8f5f 	dmb	sy
   86244:	490d      	ldr	r1, [pc, #52]	; (8627c <udd_enable+0xb4>)
   86246:	700a      	strb	r2, [r1, #0]
   86248:	4912      	ldr	r1, [pc, #72]	; (86294 <udd_enable+0xcc>)
   8624a:	78ca      	ldrb	r2, [r1, #3]
   8624c:	3201      	adds	r2, #1
   8624e:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   86250:	b92b      	cbnz	r3, 8625e <udd_enable+0x96>
		cpu_irq_enable();
   86252:	2201      	movs	r2, #1
   86254:	4b09      	ldr	r3, [pc, #36]	; (8627c <udd_enable+0xb4>)
   86256:	701a      	strb	r2, [r3, #0]
   86258:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8625c:	b662      	cpsie	i
	udd_attach();
   8625e:	4b0e      	ldr	r3, [pc, #56]	; (86298 <udd_enable+0xd0>)
   86260:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   86262:	b92c      	cbnz	r4, 86270 <udd_enable+0xa8>
		cpu_irq_enable();
   86264:	2201      	movs	r2, #1
   86266:	4b05      	ldr	r3, [pc, #20]	; (8627c <udd_enable+0xb4>)
   86268:	701a      	strb	r2, [r3, #0]
   8626a:	f3bf 8f5f 	dmb	sy
   8626e:	b662      	cpsie	i
   86270:	bd10      	pop	{r4, pc}
   86272:	bf00      	nop
   86274:	00084539 	.word	0x00084539
   86278:	00085515 	.word	0x00085515
   8627c:	200006ea 	.word	0x200006ea
   86280:	400a4000 	.word	0x400a4000
   86284:	e000e100 	.word	0xe000e100
   86288:	2000230c 	.word	0x2000230c
   8628c:	00085591 	.word	0x00085591
   86290:	20002302 	.word	0x20002302
   86294:	20002dd8 	.word	0x20002dd8
   86298:	00086131 	.word	0x00086131

0008629c <udd_detach>:
{
   8629c:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   8629e:	201d      	movs	r0, #29
   862a0:	4b08      	ldr	r3, [pc, #32]	; (862c4 <udd_detach+0x28>)
   862a2:	4798      	blx	r3
	udd_detach_device();
   862a4:	4b08      	ldr	r3, [pc, #32]	; (862c8 <udd_detach+0x2c>)
   862a6:	681a      	ldr	r2, [r3, #0]
   862a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   862ac:	601a      	str	r2, [r3, #0]
   862ae:	681a      	ldr	r2, [r3, #0]
   862b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   862b4:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   862b6:	201d      	movs	r0, #29
   862b8:	4b04      	ldr	r3, [pc, #16]	; (862cc <udd_detach+0x30>)
   862ba:	4798      	blx	r3
	udd_sleep_mode(false);
   862bc:	2000      	movs	r0, #0
   862be:	4b04      	ldr	r3, [pc, #16]	; (862d0 <udd_detach+0x34>)
   862c0:	4798      	blx	r3
   862c2:	bd08      	pop	{r3, pc}
   862c4:	00085515 	.word	0x00085515
   862c8:	400a4000 	.word	0x400a4000
   862cc:	00085549 	.word	0x00085549
   862d0:	000856a1 	.word	0x000856a1

000862d4 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   862d4:	4b02      	ldr	r3, [pc, #8]	; (862e0 <udd_is_high_speed+0xc>)
   862d6:	6958      	ldr	r0, [r3, #20]
}
   862d8:	f000 0001 	and.w	r0, r0, #1
   862dc:	4770      	bx	lr
   862de:	bf00      	nop
   862e0:	400a4000 	.word	0x400a4000

000862e4 <udd_set_address>:
	udd_disable_address();
   862e4:	4b08      	ldr	r3, [pc, #32]	; (86308 <udd_set_address+0x24>)
   862e6:	681a      	ldr	r2, [r3, #0]
   862e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   862ec:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   862ee:	681a      	ldr	r2, [r3, #0]
   862f0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   862f4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   862f8:	4302      	orrs	r2, r0
   862fa:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   862fc:	681a      	ldr	r2, [r3, #0]
   862fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   86302:	601a      	str	r2, [r3, #0]
   86304:	4770      	bx	lr
   86306:	bf00      	nop
   86308:	400a4000 	.word	0x400a4000

0008630c <udd_getaddress>:
	return udd_get_configured_address();
   8630c:	4b02      	ldr	r3, [pc, #8]	; (86318 <udd_getaddress+0xc>)
   8630e:	6818      	ldr	r0, [r3, #0]
}
   86310:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86314:	4770      	bx	lr
   86316:	bf00      	nop
   86318:	400a4000 	.word	0x400a4000

0008631c <udd_get_frame_number>:
	return udd_frame_number();
   8631c:	4b02      	ldr	r3, [pc, #8]	; (86328 <udd_get_frame_number+0xc>)
   8631e:	6858      	ldr	r0, [r3, #4]
}
   86320:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   86324:	4770      	bx	lr
   86326:	bf00      	nop
   86328:	400a4000 	.word	0x400a4000

0008632c <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   8632c:	4b02      	ldr	r3, [pc, #8]	; (86338 <udd_get_micro_frame_number+0xc>)
   8632e:	6858      	ldr	r0, [r3, #4]
}
   86330:	f000 0007 	and.w	r0, r0, #7
   86334:	4770      	bx	lr
   86336:	bf00      	nop
   86338:	400a4000 	.word	0x400a4000

0008633c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   8633c:	4b01      	ldr	r3, [pc, #4]	; (86344 <udd_set_setup_payload+0x8>)
   8633e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   86340:	8199      	strh	r1, [r3, #12]
   86342:	4770      	bx	lr
   86344:	20002dec 	.word	0x20002dec

00086348 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86348:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8634c:	2a06      	cmp	r2, #6
   8634e:	d900      	bls.n	86352 <udd_ep_free+0xa>
   86350:	4770      	bx	lr
{
   86352:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   86354:	0153      	lsls	r3, r2, #5
   86356:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   8635a:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   8635e:	2101      	movs	r1, #1
   86360:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   86364:	4603      	mov	r3, r0
	udd_configure_endpoint_bank(ep_index, 0);
   86366:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   8636a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   8636e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   86372:	1e56      	subs	r6, r2, #1
   86374:	4c07      	ldr	r4, [pc, #28]	; (86394 <udd_ep_free+0x4c>)
   86376:	fa06 f501 	lsl.w	r5, r6, r1
   8637a:	19a8      	adds	r0, r5, r6
   8637c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   86380:	4b05      	ldr	r3, [pc, #20]	; (86398 <udd_ep_free+0x50>)
   86382:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   86384:	4435      	add	r5, r6
   86386:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   8638a:	7d23      	ldrb	r3, [r4, #20]
   8638c:	f36f 0382 	bfc	r3, #2, #1
   86390:	7523      	strb	r3, [r4, #20]
   86392:	bd70      	pop	{r4, r5, r6, pc}
   86394:	2000230c 	.word	0x2000230c
   86398:	00085949 	.word	0x00085949

0008639c <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8639c:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   863a0:	0143      	lsls	r3, r0, #5
   863a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   863a6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   863aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   863ae:	f013 0f20 	tst.w	r3, #32
   863b2:	d109      	bne.n	863c8 <udd_ep_is_halted+0x2c>
   863b4:	3801      	subs	r0, #1
   863b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   863ba:	4b04      	ldr	r3, [pc, #16]	; (863cc <udd_ep_is_halted+0x30>)
   863bc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   863c0:	7d00      	ldrb	r0, [r0, #20]
   863c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   863c6:	4770      	bx	lr
   863c8:	2001      	movs	r0, #1
}
   863ca:	4770      	bx	lr
   863cc:	2000230c 	.word	0x2000230c

000863d0 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   863d0:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   863d4:	2b06      	cmp	r3, #6
   863d6:	d852      	bhi.n	8647e <udd_ep_set_halt+0xae>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   863d8:	015a      	lsls	r2, r3, #5
   863da:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   863de:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   863e2:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   863e6:	f012 0f20 	tst.w	r2, #32
   863ea:	d14a      	bne.n	86482 <udd_ep_set_halt+0xb2>
{
   863ec:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   863ee:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   863f0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   863f4:	4a26      	ldr	r2, [pc, #152]	; (86490 <udd_ep_set_halt+0xc0>)
   863f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   863fa:	7d12      	ldrb	r2, [r2, #20]
   863fc:	f012 0f04 	tst.w	r2, #4
   86400:	d141      	bne.n	86486 <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   86402:	f012 0f01 	tst.w	r2, #1
   86406:	d141      	bne.n	8648c <udd_ep_set_halt+0xbc>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   86408:	f010 0f80 	tst.w	r0, #128	; 0x80
   8640c:	d113      	bne.n	86436 <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   8640e:	015b      	lsls	r3, r3, #5
   86410:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86414:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86418:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8641c:	f022 0202 	bic.w	r2, r2, #2
   86420:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   86424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   86428:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   8642c:	2220      	movs	r2, #32
   8642e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   86432:	2001      	movs	r0, #1
   86434:	e028      	b.n	86488 <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   86436:	015a      	lsls	r2, r3, #5
   86438:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8643c:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   86440:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   86444:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   86448:	d0e1      	beq.n	8640e <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   8644a:	4a11      	ldr	r2, [pc, #68]	; (86490 <udd_ep_set_halt+0xc0>)
   8644c:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   86450:	f101 0210 	add.w	r2, r1, #16
   86454:	7d09      	ldrb	r1, [r1, #20]
   86456:	f041 0104 	orr.w	r1, r1, #4
   8645a:	7111      	strb	r1, [r2, #4]
			udd_enable_bank_interrupt(ep_index);
   8645c:	490d      	ldr	r1, [pc, #52]	; (86494 <udd_ep_set_halt+0xc4>)
   8645e:	f103 0208 	add.w	r2, r3, #8
   86462:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   86466:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8646a:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   8646c:	6908      	ldr	r0, [r1, #16]
   8646e:	f44f 7280 	mov.w	r2, #256	; 0x100
   86472:	fa02 f303 	lsl.w	r3, r2, r3
   86476:	4303      	orrs	r3, r0
   86478:	610b      	str	r3, [r1, #16]
			return true;
   8647a:	2001      	movs	r0, #1
   8647c:	e004      	b.n	86488 <udd_ep_set_halt+0xb8>
		return false;
   8647e:	2000      	movs	r0, #0
   86480:	4770      	bx	lr
		return true; // Already STALL
   86482:	2001      	movs	r0, #1
   86484:	4770      	bx	lr
   86486:	2001      	movs	r0, #1
}
   86488:	bc10      	pop	{r4}
   8648a:	4770      	bx	lr
		return false; // Job on going, stall impossible
   8648c:	2000      	movs	r0, #0
   8648e:	e7fb      	b.n	86488 <udd_ep_set_halt+0xb8>
   86490:	2000230c 	.word	0x2000230c
   86494:	400a4000 	.word	0x400a4000

00086498 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   86498:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   8649c:	2806      	cmp	r0, #6
   8649e:	d864      	bhi.n	8656a <udd_ep_clear_halt+0xd2>
{
   864a0:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   864a2:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   864a4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   864a8:	4b37      	ldr	r3, [pc, #220]	; (86588 <udd_ep_clear_halt+0xf0>)
   864aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   864ae:	7d1b      	ldrb	r3, [r3, #20]
   864b0:	f013 0f04 	tst.w	r3, #4
   864b4:	d05b      	beq.n	8656e <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   864b6:	460b      	mov	r3, r1
   864b8:	4933      	ldr	r1, [pc, #204]	; (86588 <udd_ep_clear_halt+0xf0>)
   864ba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   864be:	7d19      	ldrb	r1, [r3, #20]
   864c0:	f36f 0182 	bfc	r1, #2, #1
   864c4:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   864c6:	4b31      	ldr	r3, [pc, #196]	; (8658c <udd_ep_clear_halt+0xf4>)
   864c8:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   864cc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   864d0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   864d4:	6919      	ldr	r1, [r3, #16]
   864d6:	f44f 7480 	mov.w	r4, #256	; 0x100
   864da:	4084      	lsls	r4, r0
   864dc:	ea21 0104 	bic.w	r1, r1, r4
   864e0:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   864e2:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   864e6:	f013 0f20 	tst.w	r3, #32
   864ea:	d024      	beq.n	86536 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   864ec:	0143      	lsls	r3, r0, #5
   864ee:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   864f2:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   864f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   864fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   864fe:	d00b      	beq.n	86518 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   86500:	0143      	lsls	r3, r0, #5
   86502:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86506:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8650a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8650e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   86512:	2140      	movs	r1, #64	; 0x40
   86514:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   86518:	0143      	lsls	r3, r0, #5
   8651a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8651e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86522:	2120      	movs	r1, #32
   86524:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   86528:	4618      	mov	r0, r3
		udd_enable_endpoint_bank_autoswitch(ep);
   8652a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   8652e:	f043 0302 	orr.w	r3, r3, #2
   86532:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   86536:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   8653a:	4913      	ldr	r1, [pc, #76]	; (86588 <udd_ep_clear_halt+0xf0>)
   8653c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   86540:	7d1b      	ldrb	r3, [r3, #20]
   86542:	f013 0f01 	tst.w	r3, #1
   86546:	d101      	bne.n	8654c <udd_ep_clear_halt+0xb4>
	return true;
   86548:	2001      	movs	r0, #1
   8654a:	bd38      	pop	{r3, r4, r5, pc}
			ptr_job->busy = false;
   8654c:	4608      	mov	r0, r1
   8654e:	0051      	lsls	r1, r2, #1
   86550:	188b      	adds	r3, r1, r2
   86552:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   86556:	7d1c      	ldrb	r4, [r3, #20]
   86558:	f36f 0400 	bfc	r4, #0, #1
   8655c:	751c      	strb	r4, [r3, #20]
			ptr_job->call_nohalt();
   8655e:	440a      	add	r2, r1
   86560:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
   86564:	4798      	blx	r3
	return true;
   86566:	2001      	movs	r0, #1
   86568:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   8656a:	2000      	movs	r0, #0
   8656c:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep)) {
   8656e:	0143      	lsls	r3, r0, #5
   86570:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86574:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86578:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8657c:	f013 0f20 	tst.w	r3, #32
   86580:	d1b4      	bne.n	864ec <udd_ep_clear_halt+0x54>
	return true;
   86582:	2001      	movs	r0, #1
}
   86584:	bd38      	pop	{r3, r4, r5, pc}
   86586:	bf00      	nop
   86588:	2000230c 	.word	0x2000230c
   8658c:	400a4000 	.word	0x400a4000

00086590 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   86590:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   86594:	2806      	cmp	r0, #6
   86596:	d861      	bhi.n	8665c <udd_ep_run+0xcc>
{
   86598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   8659a:	0144      	lsls	r4, r0, #5
   8659c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   865a0:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   865a4:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   865a8:	f014 0f01 	tst.w	r4, #1
   865ac:	d058      	beq.n	86660 <udd_ep_run+0xd0>
			|| Is_udd_endpoint_stall_requested(ep)
   865ae:	0144      	lsls	r4, r0, #5
   865b0:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   865b4:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   865b8:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   865bc:	f014 0f20 	tst.w	r4, #32
   865c0:	d150      	bne.n	86664 <udd_ep_run+0xd4>
	ptr_job = &udd_ep_job[ep - 1];
   865c2:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   865c4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   865c8:	4d29      	ldr	r5, [pc, #164]	; (86670 <udd_ep_run+0xe0>)
   865ca:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   865ce:	7d2d      	ldrb	r5, [r5, #20]
   865d0:	f015 0f04 	tst.w	r5, #4
   865d4:	d148      	bne.n	86668 <udd_ep_run+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   865d6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   865da:	b672      	cpsid	i
   865dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   865e0:	f04f 0e00 	mov.w	lr, #0
   865e4:	4e23      	ldr	r6, [pc, #140]	; (86674 <udd_ep_run+0xe4>)
   865e6:	f886 e000 	strb.w	lr, [r6]
	if (ptr_job->busy == true) {
   865ea:	f015 0f01 	tst.w	r5, #1
   865ee:	d008      	beq.n	86602 <udd_ep_run+0x72>
	if (cpu_irq_is_enabled_flags(flags))
   865f0:	2f00      	cmp	r7, #0
   865f2:	d13b      	bne.n	8666c <udd_ep_run+0xdc>
		cpu_irq_enable();
   865f4:	2201      	movs	r2, #1
   865f6:	7032      	strb	r2, [r6, #0]
   865f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   865fc:	b662      	cpsie	i
		return false; // Job already on going
   865fe:	4670      	mov	r0, lr
   86600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job->busy = true;
   86602:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   86606:	4e1a      	ldr	r6, [pc, #104]	; (86670 <udd_ep_run+0xe0>)
   86608:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8660c:	7d2e      	ldrb	r6, [r5, #20]
   8660e:	f046 0601 	orr.w	r6, r6, #1
   86612:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   86614:	b92f      	cbnz	r7, 86622 <udd_ep_run+0x92>
		cpu_irq_enable();
   86616:	2601      	movs	r6, #1
   86618:	4d16      	ldr	r5, [pc, #88]	; (86674 <udd_ep_run+0xe4>)
   8661a:	702e      	strb	r6, [r5, #0]
   8661c:	f3bf 8f5f 	dmb	sy
   86620:	b662      	cpsie	i
	ptr_job->buf = buf;
   86622:	4f13      	ldr	r7, [pc, #76]	; (86670 <udd_ep_run+0xe0>)
   86624:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   86628:	00ed      	lsls	r5, r5, #3
   8662a:	197e      	adds	r6, r7, r5
   8662c:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   8662e:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   86630:	2200      	movs	r2, #0
   86632:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   86634:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   86636:	9a06      	ldr	r2, [sp, #24]
   86638:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8663a:	b911      	cbnz	r1, 86642 <udd_ep_run+0xb2>
   8663c:	fab3 f183 	clz	r1, r3
   86640:	0949      	lsrs	r1, r1, #5
   86642:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   86646:	4b0a      	ldr	r3, [pc, #40]	; (86670 <udd_ep_run+0xe0>)
   86648:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   8664c:	7d23      	ldrb	r3, [r4, #20]
   8664e:	f361 0341 	bfi	r3, r1, #1, #1
   86652:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   86654:	4b08      	ldr	r3, [pc, #32]	; (86678 <udd_ep_run+0xe8>)
   86656:	4798      	blx	r3
	return true;
   86658:	2001      	movs	r0, #1
   8665a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   8665c:	2000      	movs	r0, #0
   8665e:	4770      	bx	lr
		return false; // Endpoint is halted
   86660:	2000      	movs	r0, #0
   86662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86664:	2000      	movs	r0, #0
   86666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86668:	2000      	movs	r0, #0
   8666a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Job already on going
   8666c:	2000      	movs	r0, #0
}
   8666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86670:	2000230c 	.word	0x2000230c
   86674:	200006ea 	.word	0x200006ea
   86678:	00085981 	.word	0x00085981

0008667c <udd_ep_alloc>:
{
   8667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86680:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   86682:	f000 060f 	and.w	r6, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   86686:	2e06      	cmp	r6, #6
   86688:	f200 812a 	bhi.w	868e0 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   8668c:	0173      	lsls	r3, r6, #5
   8668e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86692:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86696:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   8669a:	f013 0301 	ands.w	r3, r3, #1
   8669e:	f040 8124 	bne.w	868ea <udd_ep_alloc+0x26e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   866a2:	f001 0403 	and.w	r4, r1, #3
   866a6:	2c02      	cmp	r4, #2
   866a8:	d03f      	beq.n	8672a <udd_ep_alloc+0xae>
   866aa:	2c03      	cmp	r4, #3
   866ac:	d04b      	beq.n	86746 <udd_ep_alloc+0xca>
   866ae:	2c01      	cmp	r4, #1
   866b0:	d001      	beq.n	866b6 <udd_ep_alloc+0x3a>
		return false;
   866b2:	2300      	movs	r3, #0
   866b4:	e115      	b.n	868e2 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   866b6:	b136      	cbz	r6, 866c6 <udd_ep_alloc+0x4a>
   866b8:	1ef7      	subs	r7, r6, #3
   866ba:	b2ff      	uxtb	r7, r7
   866bc:	2f01      	cmp	r7, #1
   866be:	bf94      	ite	ls
   866c0:	2700      	movls	r7, #0
   866c2:	2701      	movhi	r7, #1
   866c4:	e000      	b.n	866c8 <udd_ep_alloc+0x4c>
   866c6:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   866c8:	f04f 0c02 	mov.w	ip, #2
	if (b_iso_hbw) {
   866cc:	b3a7      	cbz	r7, 86738 <udd_ep_alloc+0xbc>
		switch(MaxEndpointSize & (0x3u << 11)) {
   866ce:	f402 54c0 	and.w	r4, r2, #6144	; 0x1800
   866d2:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   866d6:	d03a      	beq.n	8674e <udd_ep_alloc+0xd2>
			nb_tran = 1;
   866d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   866dc:	bf0c      	ite	eq
   866de:	f04f 0e03 	moveq.w	lr, #3
   866e2:	f04f 0e01 	movne.w	lr, #1
		MaxEndpointSize &= ~(0x3u << 11);
   866e6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   866ea:	b292      	uxth	r2, r2
   866ec:	0174      	lsls	r4, r6, #5
   866ee:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   866f2:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   866f6:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   866fa:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
   866fe:	f025 0503 	bic.w	r5, r5, #3
   86702:	0109      	lsls	r1, r1, #4
   86704:	f001 0130 	and.w	r1, r1, #48	; 0x30
   86708:	b240      	sxtb	r0, r0
   8670a:	2800      	cmp	r0, #0
   8670c:	bfac      	ite	ge
   8670e:	4618      	movge	r0, r3
   86710:	2008      	movlt	r0, #8
   86712:	f5a2 6880 	sub.w	r8, r2, #1024	; 0x400
   86716:	fa1f f888 	uxth.w	r8, r8
   8671a:	f5b8 4f7c 	cmp.w	r8, #64512	; 0xfc00
   8671e:	d319      	bcc.n	86754 <udd_ep_alloc+0xd8>
   86720:	2a08      	cmp	r2, #8
   86722:	d932      	bls.n	8678a <udd_ep_alloc+0x10e>
   86724:	0052      	lsls	r2, r2, #1
   86726:	3a01      	subs	r2, #1
   86728:	e016      	b.n	86758 <udd_ep_alloc+0xdc>
	bool b_iso_hbw = false;
   8672a:	2700      	movs	r7, #0
   8672c:	2e03      	cmp	r6, #3
   8672e:	bf34      	ite	cc
   86730:	f04f 0c02 	movcc.w	ip, #2
   86734:	f04f 0c01 	movcs.w	ip, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   86738:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   8673c:	f040 80d7 	bne.w	868ee <udd_ep_alloc+0x272>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   86740:	f04f 0e00 	mov.w	lr, #0
   86744:	e7d2      	b.n	866ec <udd_ep_alloc+0x70>
	bool b_iso_hbw = false;
   86746:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86748:	f04f 0c01 	mov.w	ip, #1
   8674c:	e7be      	b.n	866cc <udd_ep_alloc+0x50>
			nb_tran = 2;
   8674e:	f04f 0e02 	mov.w	lr, #2
   86752:	e7c8      	b.n	866e6 <udd_ep_alloc+0x6a>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   86754:	f240 72ff 	movw	r2, #2047	; 0x7ff
   86758:	fab2 f282 	clz	r2, r2
   8675c:	ea41 1c8c 	orr.w	ip, r1, ip, lsl #6
   86760:	ea4c 0c00 	orr.w	ip, ip, r0
   86764:	f1c2 021c 	rsb	r2, r2, #28
   86768:	ea4c 0202 	orr.w	r2, ip, r2
   8676c:	b10f      	cbz	r7, 86772 <udd_ep_alloc+0xf6>
   8676e:	ea4f 230e 	mov.w	r3, lr, lsl #8
   86772:	4313      	orrs	r3, r2
   86774:	f3c3 0309 	ubfx	r3, r3, #0, #10
   86778:	432b      	orrs	r3, r5
   8677a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   8677e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   86782:	2b00      	cmp	r3, #0
   86784:	db03      	blt.n	8678e <udd_ep_alloc+0x112>
		return false;
   86786:	2300      	movs	r3, #0
   86788:	e0ab      	b.n	868e2 <udd_ep_alloc+0x266>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8678a:	220f      	movs	r2, #15
   8678c:	e7e4      	b.n	86758 <udd_ep_alloc+0xdc>
	udd_enable_endpoint(ep);
   8678e:	2301      	movs	r3, #1
   86790:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   86794:	2306      	movs	r3, #6
   86796:	2700      	movs	r7, #0
		if (Is_udd_endpoint_enabled(i)) {
   86798:	4857      	ldr	r0, [pc, #348]	; (868f8 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   8679a:	2401      	movs	r4, #1
   8679c:	e003      	b.n	867a6 <udd_ep_alloc+0x12a>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8679e:	3b01      	subs	r3, #1
   867a0:	b2db      	uxtb	r3, r3
   867a2:	429e      	cmp	r6, r3
   867a4:	d81e      	bhi.n	867e4 <udd_ep_alloc+0x168>
		if (Is_udd_endpoint_enabled(i)) {
   867a6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   867aa:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   867ae:	f012 0f01 	tst.w	r2, #1
   867b2:	d0f4      	beq.n	8679e <udd_ep_alloc+0x122>
   867b4:	015a      	lsls	r2, r3, #5
   867b6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   867ba:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   867be:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   867c2:	f3c1 1181 	ubfx	r1, r1, #6, #2
   867c6:	005d      	lsls	r5, r3, #1
   867c8:	40a9      	lsls	r1, r5
   867ca:	430f      	orrs	r7, r1
   867cc:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   867ce:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   867d2:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   867d6:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   867da:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   867de:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   867e2:	e7dc      	b.n	8679e <udd_ep_alloc+0x122>
   867e4:	0075      	lsls	r5, r6, #1
   867e6:	4634      	mov	r4, r6
   867e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   867ec:	4b43      	ldr	r3, [pc, #268]	; (868fc <udd_ep_alloc+0x280>)
   867ee:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
		bool b_restart = ptr_job->busy;
   867f2:	4698      	mov	r8, r3
		udd_enable_endpoint(i);
   867f4:	f04f 0901 	mov.w	r9, #1
			b_restart = udd_ep_run(i,
   867f8:	f8df a104 	ldr.w	sl, [pc, #260]	; 86900 <udd_ep_alloc+0x284>
   867fc:	e021      	b.n	86842 <udd_ep_alloc+0x1c6>
			if (NULL == ptr_job->call_trans) {
   867fe:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   86802:	4a3e      	ldr	r2, [pc, #248]	; (868fc <udd_ep_alloc+0x280>)
   86804:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   86808:	2c00      	cmp	r4, #0
   8680a:	d072      	beq.n	868f2 <udd_ep_alloc+0x276>
			if (Is_udd_endpoint_in(i)) {
   8680c:	f10e 0308 	add.w	r3, lr, #8
   86810:	015b      	lsls	r3, r3, #5
   86812:	4a39      	ldr	r2, [pc, #228]	; (868f8 <udd_ep_alloc+0x27c>)
   86814:	58d3      	ldr	r3, [r2, r3]
   86816:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   8681a:	bf18      	it	ne
   8681c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   86820:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   86824:	4b35      	ldr	r3, [pc, #212]	; (868fc <udd_ep_alloc+0x280>)
   86826:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8682a:	4602      	mov	r2, r0
   8682c:	68c9      	ldr	r1, [r1, #12]
   8682e:	2001      	movs	r0, #1
   86830:	47a0      	blx	r4
			return false;
   86832:	2300      	movs	r3, #0
   86834:	e055      	b.n	868e2 <udd_ep_alloc+0x266>
   86836:	3502      	adds	r5, #2
   86838:	3401      	adds	r4, #1
   8683a:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8683c:	b2e3      	uxtb	r3, r4
   8683e:	2b06      	cmp	r3, #6
   86840:	d84c      	bhi.n	868dc <udd_ep_alloc+0x260>
   86842:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   86844:	46a6      	mov	lr, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   86846:	fa47 f205 	asr.w	r2, r7, r5
		if (bank == 0) {
   8684a:	f012 0203 	ands.w	r2, r2, #3
   8684e:	d0f2      	beq.n	86836 <udd_ep_alloc+0x1ba>
   86850:	1e61      	subs	r1, r4, #1
		bool b_restart = ptr_job->busy;
   86852:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   86856:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   8685a:	f893 b014 	ldrb.w	fp, [r3, #20]
   8685e:	f00b 0c01 	and.w	ip, fp, #1
		ptr_job->busy = false;
   86862:	f36f 0b00 	bfc	fp, #0, #1
   86866:	f883 b014 	strb.w	fp, [r3, #20]
   8686a:	0163      	lsls	r3, r4, #5
   8686c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86870:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   86874:	f8d3 b100 	ldr.w	fp, [r3, #256]	; 0x100
   86878:	f02b 0bc0 	bic.w	fp, fp, #192	; 0xc0
   8687c:	ea4b 1282 	orr.w	r2, fp, r2, lsl #6
   86880:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   86884:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   86888:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8688c:	2a00      	cmp	r2, #0
   8688e:	dab6      	bge.n	867fe <udd_ep_alloc+0x182>
		udd_enable_endpoint_bank_autoswitch(i);
   86890:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   86894:	f042 0202 	orr.w	r2, r2, #2
   86898:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   8689c:	f1bc 0f00 	cmp.w	ip, #0
   868a0:	d0c9      	beq.n	86836 <udd_ep_alloc+0x1ba>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   868a2:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   868a6:	f856 2c08 	ldr.w	r2, [r6, #-8]
   868aa:	1a9a      	subs	r2, r3, r2
   868ac:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   868b0:	f856 3c10 	ldr.w	r3, [r6, #-16]
					ptr_job->b_shortpacket,
   868b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   868b8:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   868bc:	f891 e014 	ldrb.w	lr, [r1, #20]
			b_restart = udd_ep_run(i,
   868c0:	f856 1c18 	ldr.w	r1, [r6, #-24]
   868c4:	9100      	str	r1, [sp, #0]
   868c6:	1a9b      	subs	r3, r3, r2
   868c8:	f856 1c14 	ldr.w	r1, [r6, #-20]
   868cc:	440a      	add	r2, r1
   868ce:	f3ce 0140 	ubfx	r1, lr, #1, #1
   868d2:	47d0      	blx	sl
			if (!b_restart) {
   868d4:	4603      	mov	r3, r0
   868d6:	2800      	cmp	r0, #0
   868d8:	d1ad      	bne.n	86836 <udd_ep_alloc+0x1ba>
   868da:	e002      	b.n	868e2 <udd_ep_alloc+0x266>
	return true;
   868dc:	2301      	movs	r3, #1
   868de:	e000      	b.n	868e2 <udd_ep_alloc+0x266>
		return false;
   868e0:	2300      	movs	r3, #0
}
   868e2:	4618      	mov	r0, r3
   868e4:	b003      	add	sp, #12
   868e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   868ea:	2300      	movs	r3, #0
   868ec:	e7f9      	b.n	868e2 <udd_ep_alloc+0x266>
		return false;
   868ee:	2300      	movs	r3, #0
   868f0:	e7f7      	b.n	868e2 <udd_ep_alloc+0x266>
				return false;
   868f2:	2300      	movs	r3, #0
   868f4:	e7f5      	b.n	868e2 <udd_ep_alloc+0x266>
   868f6:	bf00      	nop
   868f8:	400a4000 	.word	0x400a4000
   868fc:	2000230c 	.word	0x2000230c
   86900:	00086591 	.word	0x00086591

00086904 <udd_ep_abort>:
{
   86904:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86906:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   8690a:	4b13      	ldr	r3, [pc, #76]	; (86958 <udd_ep_abort+0x54>)
   8690c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   86910:	2100      	movs	r1, #0
   86912:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   86914:	f010 0f80 	tst.w	r0, #128	; 0x80
   86918:	d116      	bne.n	86948 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8691a:	1e50      	subs	r0, r2, #1
   8691c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   86920:	2101      	movs	r1, #1
   86922:	4b0e      	ldr	r3, [pc, #56]	; (8695c <udd_ep_abort+0x58>)
   86924:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   86928:	4b0d      	ldr	r3, [pc, #52]	; (86960 <udd_ep_abort+0x5c>)
   8692a:	4798      	blx	r3
   8692c:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   8692e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   86932:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   86936:	f413 7f00 	tst.w	r3, #512	; 0x200
   8693a:	d1fa      	bne.n	86932 <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   8693c:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   86940:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   86944:	d1f3      	bne.n	8692e <udd_ep_abort+0x2a>
   86946:	e7e8      	b.n	8691a <udd_ep_abort+0x16>
   86948:	4906      	ldr	r1, [pc, #24]	; (86964 <udd_ep_abort+0x60>)
   8694a:	eb01 1042 	add.w	r0, r1, r2, lsl #5
			udd_kill_last_in_bank(ep_index);
   8694e:	f44f 7400 	mov.w	r4, #512	; 0x200
			while(Is_udd_kill_last(ep_index));
   86952:	4601      	mov	r1, r0
   86954:	e7f2      	b.n	8693c <udd_ep_abort+0x38>
   86956:	bf00      	nop
   86958:	400a4300 	.word	0x400a4300
   8695c:	2000230c 	.word	0x2000230c
   86960:	00085949 	.word	0x00085949
   86964:	400a4000 	.word	0x400a4000

00086968 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   86968:	4a07      	ldr	r2, [pc, #28]	; (86988 <udd_test_mode_j+0x20>)
   8696a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8696e:	f023 0303 	bic.w	r3, r3, #3
   86972:	f043 0302 	orr.w	r3, r3, #2
   86976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8697a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8697e:	f043 0304 	orr.w	r3, r3, #4
   86982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   86986:	4770      	bx	lr
   86988:	400a4000 	.word	0x400a4000

0008698c <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   8698c:	4a07      	ldr	r2, [pc, #28]	; (869ac <udd_test_mode_k+0x20>)
   8698e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86992:	f023 0303 	bic.w	r3, r3, #3
   86996:	f043 0302 	orr.w	r3, r3, #2
   8699a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8699e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   869a2:	f043 0308 	orr.w	r3, r3, #8
   869a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   869aa:	4770      	bx	lr
   869ac:	400a4000 	.word	0x400a4000

000869b0 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   869b0:	4a04      	ldr	r2, [pc, #16]	; (869c4 <udd_test_mode_se0_nak+0x14>)
   869b2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   869b6:	f023 0303 	bic.w	r3, r3, #3
   869ba:	f043 0302 	orr.w	r3, r3, #2
   869be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   869c2:	4770      	bx	lr
   869c4:	400a4000 	.word	0x400a4000

000869c8 <udd_test_mode_packet>:
{
   869c8:	b430      	push	{r4, r5}
   869ca:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   869cc:	466c      	mov	r4, sp
   869ce:	4d20      	ldr	r5, [pc, #128]	; (86a50 <udd_test_mode_packet+0x88>)
   869d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   869d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   869d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   869d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   869d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   869da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   869dc:	e895 0003 	ldmia.w	r5, {r0, r1}
   869e0:	f844 0b04 	str.w	r0, [r4], #4
   869e4:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   869e6:	4b1b      	ldr	r3, [pc, #108]	; (86a54 <udd_test_mode_packet+0x8c>)
   869e8:	2101      	movs	r1, #1
   869ea:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   869ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   869f2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   869f6:	f022 0203 	bic.w	r2, r2, #3
   869fa:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   869fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   86a02:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   86a06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86a0a:	f022 0203 	bic.w	r2, r2, #3
   86a0e:	f042 0202 	orr.w	r2, r2, #2
   86a12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   86a16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86a1a:	f042 0210 	orr.w	r2, r2, #16
   86a1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   86a22:	4a0d      	ldr	r2, [pc, #52]	; (86a58 <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   86a24:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   86a26:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   86a2a:	f813 1b01 	ldrb.w	r1, [r3], #1
   86a2e:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   86a32:	4283      	cmp	r3, r0
   86a34:	d1f9      	bne.n	86a2a <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   86a36:	4b07      	ldr	r3, [pc, #28]	; (86a54 <udd_test_mode_packet+0x8c>)
   86a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86a3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86a44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   86a48:	b00e      	add	sp, #56	; 0x38
   86a4a:	bc30      	pop	{r4, r5}
   86a4c:	4770      	bx	lr
   86a4e:	bf00      	nop
   86a50:	0008da30 	.word	0x0008da30
   86a54:	400a4000 	.word	0x400a4000
   86a58:	2017ffff 	.word	0x2017ffff

00086a5c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86a5c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86a5e:	010b      	lsls	r3, r1, #4
   86a60:	4293      	cmp	r3, r2
   86a62:	d914      	bls.n	86a8e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86a64:	00c9      	lsls	r1, r1, #3
   86a66:	084b      	lsrs	r3, r1, #1
   86a68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   86a6c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   86a70:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86a72:	1e5c      	subs	r4, r3, #1
   86a74:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86a78:	428c      	cmp	r4, r1
   86a7a:	d901      	bls.n	86a80 <usart_set_async_baudrate+0x24>
		return 1;
   86a7c:	2001      	movs	r0, #1
   86a7e:	e017      	b.n	86ab0 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   86a80:	6841      	ldr	r1, [r0, #4]
   86a82:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   86a86:	6041      	str	r1, [r0, #4]
   86a88:	e00c      	b.n	86aa4 <usart_set_async_baudrate+0x48>
		return 1;
   86a8a:	2001      	movs	r0, #1
   86a8c:	e010      	b.n	86ab0 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86a8e:	0859      	lsrs	r1, r3, #1
   86a90:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   86a94:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   86a98:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86a9a:	1e5c      	subs	r4, r3, #1
   86a9c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86aa0:	428c      	cmp	r4, r1
   86aa2:	d8f2      	bhi.n	86a8a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86aa4:	0412      	lsls	r2, r2, #16
   86aa6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   86aaa:	431a      	orrs	r2, r3
   86aac:	6202      	str	r2, [r0, #32]

	return 0;
   86aae:	2000      	movs	r0, #0
}
   86ab0:	bc10      	pop	{r4}
   86ab2:	4770      	bx	lr

00086ab4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86ab4:	4b0a      	ldr	r3, [pc, #40]	; (86ae0 <usart_reset+0x2c>)
   86ab6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   86aba:	2300      	movs	r3, #0
   86abc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   86abe:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86ac0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86ac2:	2388      	movs	r3, #136	; 0x88
   86ac4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86ac6:	2324      	movs	r3, #36	; 0x24
   86ac8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   86aca:	f44f 7380 	mov.w	r3, #256	; 0x100
   86ace:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   86ad0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   86ad4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   86ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   86ada:	6003      	str	r3, [r0, #0]
   86adc:	4770      	bx	lr
   86ade:	bf00      	nop
   86ae0:	55534100 	.word	0x55534100

00086ae4 <usart_init_rs232>:
{
   86ae4:	b570      	push	{r4, r5, r6, lr}
   86ae6:	4605      	mov	r5, r0
   86ae8:	460c      	mov	r4, r1
   86aea:	4616      	mov	r6, r2
	usart_reset(p_usart);
   86aec:	4b0f      	ldr	r3, [pc, #60]	; (86b2c <usart_init_rs232+0x48>)
   86aee:	4798      	blx	r3
	ul_reg_val = 0;
   86af0:	2200      	movs	r2, #0
   86af2:	4b0f      	ldr	r3, [pc, #60]	; (86b30 <usart_init_rs232+0x4c>)
   86af4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86af6:	b1a4      	cbz	r4, 86b22 <usart_init_rs232+0x3e>
   86af8:	4632      	mov	r2, r6
   86afa:	6821      	ldr	r1, [r4, #0]
   86afc:	4628      	mov	r0, r5
   86afe:	4b0d      	ldr	r3, [pc, #52]	; (86b34 <usart_init_rs232+0x50>)
   86b00:	4798      	blx	r3
   86b02:	4602      	mov	r2, r0
   86b04:	b978      	cbnz	r0, 86b26 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86b06:	6863      	ldr	r3, [r4, #4]
   86b08:	68a1      	ldr	r1, [r4, #8]
   86b0a:	430b      	orrs	r3, r1
   86b0c:	6921      	ldr	r1, [r4, #16]
   86b0e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86b10:	68e1      	ldr	r1, [r4, #12]
   86b12:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86b14:	4906      	ldr	r1, [pc, #24]	; (86b30 <usart_init_rs232+0x4c>)
   86b16:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   86b18:	6869      	ldr	r1, [r5, #4]
   86b1a:	430b      	orrs	r3, r1
   86b1c:	606b      	str	r3, [r5, #4]
}
   86b1e:	4610      	mov	r0, r2
   86b20:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86b22:	2201      	movs	r2, #1
   86b24:	e7fb      	b.n	86b1e <usart_init_rs232+0x3a>
   86b26:	2201      	movs	r2, #1
   86b28:	e7f9      	b.n	86b1e <usart_init_rs232+0x3a>
   86b2a:	bf00      	nop
   86b2c:	00086ab5 	.word	0x00086ab5
   86b30:	2000239c 	.word	0x2000239c
   86b34:	00086a5d 	.word	0x00086a5d

00086b38 <usart_init_sync_master>:
{
   86b38:	b570      	push	{r4, r5, r6, lr}
   86b3a:	4604      	mov	r4, r0
   86b3c:	460e      	mov	r6, r1
   86b3e:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86b40:	4b15      	ldr	r3, [pc, #84]	; (86b98 <usart_init_sync_master+0x60>)
   86b42:	4798      	blx	r3
	ul_reg_val = 0;
   86b44:	2200      	movs	r2, #0
   86b46:	4b15      	ldr	r3, [pc, #84]	; (86b9c <usart_init_sync_master+0x64>)
   86b48:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   86b4a:	b306      	cbz	r6, 86b8e <usart_init_sync_master+0x56>
   86b4c:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86b4e:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   86b52:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86b56:	1e51      	subs	r1, r2, #1
   86b58:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86b5c:	4299      	cmp	r1, r3
   86b5e:	d818      	bhi.n	86b92 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86b60:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86b62:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   86b64:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86b6c:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86b6e:	6873      	ldr	r3, [r6, #4]
   86b70:	68b2      	ldr	r2, [r6, #8]
   86b72:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   86b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86b78:	6932      	ldr	r2, [r6, #16]
   86b7a:	4313      	orrs	r3, r2
   86b7c:	68f2      	ldr	r2, [r6, #12]
   86b7e:	4313      	orrs	r3, r2
   86b80:	4a06      	ldr	r2, [pc, #24]	; (86b9c <usart_init_sync_master+0x64>)
   86b82:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86b84:	6862      	ldr	r2, [r4, #4]
   86b86:	4313      	orrs	r3, r2
   86b88:	6063      	str	r3, [r4, #4]
	return 0;
   86b8a:	2000      	movs	r0, #0
   86b8c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86b8e:	2001      	movs	r0, #1
   86b90:	bd70      	pop	{r4, r5, r6, pc}
   86b92:	2001      	movs	r0, #1
}
   86b94:	bd70      	pop	{r4, r5, r6, pc}
   86b96:	bf00      	nop
   86b98:	00086ab5 	.word	0x00086ab5
   86b9c:	200023a0 	.word	0x200023a0

00086ba0 <usart_init_iso7816>:
{
   86ba0:	b570      	push	{r4, r5, r6, lr}
   86ba2:	4606      	mov	r6, r0
   86ba4:	460c      	mov	r4, r1
   86ba6:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86ba8:	4b30      	ldr	r3, [pc, #192]	; (86c6c <usart_init_iso7816+0xcc>)
   86baa:	4798      	blx	r3
	ul_reg_val = 0;
   86bac:	2200      	movs	r2, #0
   86bae:	4b30      	ldr	r3, [pc, #192]	; (86c70 <usart_init_iso7816+0xd0>)
   86bb0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
   86bb2:	2c00      	cmp	r4, #0
   86bb4:	d04f      	beq.n	86c56 <usart_init_iso7816+0xb6>
   86bb6:	68a3      	ldr	r3, [r4, #8]
   86bb8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
   86bbc:	d14d      	bne.n	86c5a <usart_init_iso7816+0xba>
	if (p_usart_opt->protocol_type == ISO7816_T_0) {
   86bbe:	69e3      	ldr	r3, [r4, #28]
   86bc0:	2b00      	cmp	r3, #0
   86bc2:	d13c      	bne.n	86c3e <usart_init_iso7816+0x9e>
				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
   86bc4:	6963      	ldr	r3, [r4, #20]
   86bc6:	061b      	lsls	r3, r3, #24
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
   86bc8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
   86bcc:	f042 0204 	orr.w	r2, r2, #4
   86bd0:	4927      	ldr	r1, [pc, #156]	; (86c70 <usart_init_iso7816+0xd0>)
   86bd2:	600a      	str	r2, [r1, #0]
		if (p_usart_opt->bit_order) {
   86bd4:	69a2      	ldr	r2, [r4, #24]
   86bd6:	b122      	cbz	r2, 86be2 <usart_init_iso7816+0x42>
			ul_reg_val |= US_MR_MSBF;
   86bd8:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   86bdc:	f043 0304 	orr.w	r3, r3, #4
   86be0:	600b      	str	r3, [r1, #0]
	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
   86be2:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + clock / 2) / clock;
   86be4:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86be8:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86bec:	1e6a      	subs	r2, r5, #1
   86bee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86bf2:	429a      	cmp	r2, r3
   86bf4:	d837      	bhi.n	86c66 <usart_init_iso7816+0xc6>
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86bf6:	6873      	ldr	r3, [r6, #4]
			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
   86bf8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
   86bfc:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86c04:	6073      	str	r3, [r6, #4]
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86c06:	6235      	str	r5, [r6, #32]
	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
   86c08:	6863      	ldr	r3, [r4, #4]
   86c0a:	6433      	str	r3, [r6, #64]	; 0x40
	ul_reg_val |= p_usart_opt->parity_type;
   86c0c:	4a18      	ldr	r2, [pc, #96]	; (86c70 <usart_init_iso7816+0xd0>)
   86c0e:	68a3      	ldr	r3, [r4, #8]
   86c10:	6811      	ldr	r1, [r2, #0]
   86c12:	430b      	orrs	r3, r1
   86c14:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->inhibit_nack) {
   86c16:	68e2      	ldr	r2, [r4, #12]
   86c18:	b11a      	cbz	r2, 86c22 <usart_init_iso7816+0x82>
		ul_reg_val |= US_MR_INACK;
   86c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   86c1e:	4a14      	ldr	r2, [pc, #80]	; (86c70 <usart_init_iso7816+0xd0>)
   86c20:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->dis_suc_nack) {
   86c22:	6923      	ldr	r3, [r4, #16]
   86c24:	b123      	cbz	r3, 86c30 <usart_init_iso7816+0x90>
		ul_reg_val |= US_MR_DSNACK;
   86c26:	4a12      	ldr	r2, [pc, #72]	; (86c70 <usart_init_iso7816+0xd0>)
   86c28:	6813      	ldr	r3, [r2, #0]
   86c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   86c2e:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86c30:	6873      	ldr	r3, [r6, #4]
   86c32:	4a0f      	ldr	r2, [pc, #60]	; (86c70 <usart_init_iso7816+0xd0>)
   86c34:	6812      	ldr	r2, [r2, #0]
   86c36:	4313      	orrs	r3, r2
   86c38:	6073      	str	r3, [r6, #4]
	return 0;
   86c3a:	2000      	movs	r0, #0
   86c3c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
   86c3e:	2b01      	cmp	r3, #1
   86c40:	d001      	beq.n	86c46 <usart_init_iso7816+0xa6>
		return 1;
   86c42:	2001      	movs	r0, #1
   86c44:	bd70      	pop	{r4, r5, r6, pc}
		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
   86c46:	69a3      	ldr	r3, [r4, #24]
   86c48:	b94b      	cbnz	r3, 86c5e <usart_init_iso7816+0xbe>
   86c4a:	6963      	ldr	r3, [r4, #20]
   86c4c:	b94b      	cbnz	r3, 86c62 <usart_init_iso7816+0xc2>
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
   86c4e:	2206      	movs	r2, #6
   86c50:	4b07      	ldr	r3, [pc, #28]	; (86c70 <usart_init_iso7816+0xd0>)
   86c52:	601a      	str	r2, [r3, #0]
   86c54:	e7c5      	b.n	86be2 <usart_init_iso7816+0x42>
		return 1;
   86c56:	2001      	movs	r0, #1
   86c58:	bd70      	pop	{r4, r5, r6, pc}
   86c5a:	2001      	movs	r0, #1
   86c5c:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   86c5e:	2001      	movs	r0, #1
   86c60:	bd70      	pop	{r4, r5, r6, pc}
   86c62:	2001      	movs	r0, #1
   86c64:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86c66:	2001      	movs	r0, #1
}
   86c68:	bd70      	pop	{r4, r5, r6, pc}
   86c6a:	bf00      	nop
   86c6c:	00086ab5 	.word	0x00086ab5
   86c70:	200023a4 	.word	0x200023a4

00086c74 <usart_init_spi_master>:
{
   86c74:	b570      	push	{r4, r5, r6, lr}
   86c76:	4606      	mov	r6, r0
   86c78:	460c      	mov	r4, r1
   86c7a:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86c7c:	4b2a      	ldr	r3, [pc, #168]	; (86d28 <usart_init_spi_master+0xb4>)
   86c7e:	4798      	blx	r3
	ul_reg_val = 0;
   86c80:	2200      	movs	r2, #0
   86c82:	4b2a      	ldr	r3, [pc, #168]	; (86d2c <usart_init_spi_master+0xb8>)
   86c84:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86c86:	2c00      	cmp	r4, #0
   86c88:	d049      	beq.n	86d1e <usart_init_spi_master+0xaa>
   86c8a:	68a3      	ldr	r3, [r4, #8]
   86c8c:	2b03      	cmp	r3, #3
   86c8e:	d901      	bls.n	86c94 <usart_init_spi_master+0x20>
		return 1;
   86c90:	2001      	movs	r0, #1
   86c92:	bd70      	pop	{r4, r5, r6, pc}
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   86c94:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86c96:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86c9a:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86c9e:	1f2a      	subs	r2, r5, #4
   86ca0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
   86ca4:	429a      	cmp	r2, r3
   86ca6:	d83c      	bhi.n	86d22 <usart_init_spi_master+0xae>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86ca8:	6235      	str	r5, [r6, #32]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86caa:	6863      	ldr	r3, [r4, #4]
   86cac:	68e2      	ldr	r2, [r4, #12]
   86cae:	4313      	orrs	r3, r2
   86cb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   86cb4:	f042 020e 	orr.w	r2, r2, #14
   86cb8:	491c      	ldr	r1, [pc, #112]	; (86d2c <usart_init_spi_master+0xb8>)
   86cba:	600a      	str	r2, [r1, #0]
	switch (p_usart_opt->spi_mode) {
   86cbc:	68a2      	ldr	r2, [r4, #8]
   86cbe:	2a03      	cmp	r2, #3
   86cc0:	d80b      	bhi.n	86cda <usart_init_spi_master+0x66>
   86cc2:	e8df f002 	tbb	[pc, r2]
   86cc6:	1102      	.short	0x1102
   86cc8:	231c      	.short	0x231c
		ul_reg_val &= ~US_MR_CPOL;
   86cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86cd2:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86cd6:	4a15      	ldr	r2, [pc, #84]	; (86d2c <usart_init_spi_master+0xb8>)
   86cd8:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86cda:	6873      	ldr	r3, [r6, #4]
   86cdc:	4a13      	ldr	r2, [pc, #76]	; (86d2c <usart_init_spi_master+0xb8>)
   86cde:	6812      	ldr	r2, [r2, #0]
   86ce0:	4313      	orrs	r3, r2
   86ce2:	6073      	str	r3, [r6, #4]
	return 0;
   86ce4:	2000      	movs	r0, #0
   86ce6:	bd70      	pop	{r4, r5, r6, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86cf4:	f043 030e 	orr.w	r3, r3, #14
   86cf8:	4a0c      	ldr	r2, [pc, #48]	; (86d2c <usart_init_spi_master+0xb8>)
   86cfa:	6013      	str	r3, [r2, #0]
		break;
   86cfc:	e7ed      	b.n	86cda <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86cfe:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86d02:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86d06:	4a09      	ldr	r2, [pc, #36]	; (86d2c <usart_init_spi_master+0xb8>)
   86d08:	6013      	str	r3, [r2, #0]
		break;
   86d0a:	e7e6      	b.n	86cda <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d10:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86d14:	f043 030e 	orr.w	r3, r3, #14
   86d18:	4a04      	ldr	r2, [pc, #16]	; (86d2c <usart_init_spi_master+0xb8>)
   86d1a:	6013      	str	r3, [r2, #0]
		break;
   86d1c:	e7dd      	b.n	86cda <usart_init_spi_master+0x66>
		return 1;
   86d1e:	2001      	movs	r0, #1
   86d20:	bd70      	pop	{r4, r5, r6, pc}
   86d22:	2001      	movs	r0, #1
}
   86d24:	bd70      	pop	{r4, r5, r6, pc}
   86d26:	bf00      	nop
   86d28:	00086ab5 	.word	0x00086ab5
   86d2c:	200023a8 	.word	0x200023a8

00086d30 <usart_init_spi_slave>:
{
   86d30:	b538      	push	{r3, r4, r5, lr}
   86d32:	4604      	mov	r4, r0
   86d34:	460d      	mov	r5, r1
	usart_reset(p_usart);
   86d36:	4b25      	ldr	r3, [pc, #148]	; (86dcc <usart_init_spi_slave+0x9c>)
   86d38:	4798      	blx	r3
	ul_reg_val = 0;
   86d3a:	2200      	movs	r2, #0
   86d3c:	4b24      	ldr	r3, [pc, #144]	; (86dd0 <usart_init_spi_slave+0xa0>)
   86d3e:	601a      	str	r2, [r3, #0]
	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
   86d40:	6863      	ldr	r3, [r4, #4]
   86d42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   86d46:	6063      	str	r3, [r4, #4]
	p_usart->US_MR |= US_MR_USCLKS_SCK;
   86d48:	6863      	ldr	r3, [r4, #4]
   86d4a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   86d4e:	6063      	str	r3, [r4, #4]
	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
   86d50:	2d00      	cmp	r5, #0
   86d52:	d036      	beq.n	86dc2 <usart_init_spi_slave+0x92>
   86d54:	68aa      	ldr	r2, [r5, #8]
   86d56:	2a03      	cmp	r2, #3
   86d58:	d835      	bhi.n	86dc6 <usart_init_spi_slave+0x96>
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86d5a:	686b      	ldr	r3, [r5, #4]
   86d5c:	68e9      	ldr	r1, [r5, #12]
   86d5e:	430b      	orrs	r3, r1
	switch (p_usart_opt->spi_mode) {
   86d60:	2a03      	cmp	r2, #3
   86d62:	d803      	bhi.n	86d6c <usart_init_spi_slave+0x3c>
   86d64:	e8df f002 	tbb	[pc, r2]
   86d68:	241f160d 	.word	0x241f160d
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86d6c:	f043 030f 	orr.w	r3, r3, #15
   86d70:	4a17      	ldr	r2, [pc, #92]	; (86dd0 <usart_init_spi_slave+0xa0>)
   86d72:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86d74:	6863      	ldr	r3, [r4, #4]
   86d76:	4a16      	ldr	r2, [pc, #88]	; (86dd0 <usart_init_spi_slave+0xa0>)
   86d78:	6812      	ldr	r2, [r2, #0]
   86d7a:	4313      	orrs	r3, r2
   86d7c:	6063      	str	r3, [r4, #4]
	return 0;
   86d7e:	2000      	movs	r0, #0
   86d80:	bd38      	pop	{r3, r4, r5, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d86:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86d8a:	f043 0301 	orr.w	r3, r3, #1
   86d8e:	4a10      	ldr	r2, [pc, #64]	; (86dd0 <usart_init_spi_slave+0xa0>)
   86d90:	6013      	str	r3, [r2, #0]
		break;
   86d92:	e7ef      	b.n	86d74 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPOL;
   86d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d9c:	f043 030f 	orr.w	r3, r3, #15
   86da0:	4a0b      	ldr	r2, [pc, #44]	; (86dd0 <usart_init_spi_slave+0xa0>)
   86da2:	6013      	str	r3, [r2, #0]
		break;
   86da4:	e7e6      	b.n	86d74 <usart_init_spi_slave+0x44>
		ul_reg_val |= US_MR_CPOL;
   86da6:	4a0b      	ldr	r2, [pc, #44]	; (86dd4 <usart_init_spi_slave+0xa4>)
   86da8:	431a      	orrs	r2, r3
   86daa:	4b09      	ldr	r3, [pc, #36]	; (86dd0 <usart_init_spi_slave+0xa0>)
   86dac:	601a      	str	r2, [r3, #0]
		break;
   86dae:	e7e1      	b.n	86d74 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPHA;
   86db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86db8:	f043 030f 	orr.w	r3, r3, #15
   86dbc:	4a04      	ldr	r2, [pc, #16]	; (86dd0 <usart_init_spi_slave+0xa0>)
   86dbe:	6013      	str	r3, [r2, #0]
		break;
   86dc0:	e7d8      	b.n	86d74 <usart_init_spi_slave+0x44>
		return 1;
   86dc2:	2001      	movs	r0, #1
   86dc4:	bd38      	pop	{r3, r4, r5, pc}
   86dc6:	2001      	movs	r0, #1
}
   86dc8:	bd38      	pop	{r3, r4, r5, pc}
   86dca:	bf00      	nop
   86dcc:	00086ab5 	.word	0x00086ab5
   86dd0:	200023ac 	.word	0x200023ac
   86dd4:	0001010f 	.word	0x0001010f

00086dd8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   86dd8:	2340      	movs	r3, #64	; 0x40
   86dda:	6003      	str	r3, [r0, #0]
   86ddc:	4770      	bx	lr

00086dde <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   86dde:	2380      	movs	r3, #128	; 0x80
   86de0:	6003      	str	r3, [r0, #0]
   86de2:	4770      	bx	lr

00086de4 <usart_set_tx_timeguard>:
	p_usart->US_TTGR = timeguard;
   86de4:	6281      	str	r1, [r0, #40]	; 0x28
   86de6:	4770      	bx	lr

00086de8 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   86de8:	2310      	movs	r3, #16
   86dea:	6003      	str	r3, [r0, #0]
   86dec:	4770      	bx	lr

00086dee <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   86dee:	2320      	movs	r3, #32
   86df0:	6003      	str	r3, [r0, #0]
   86df2:	4770      	bx	lr

00086df4 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   86df4:	6081      	str	r1, [r0, #8]
   86df6:	4770      	bx	lr

00086df8 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   86df8:	60c1      	str	r1, [r0, #12]
   86dfa:	4770      	bx	lr

00086dfc <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   86dfc:	6900      	ldr	r0, [r0, #16]
}
   86dfe:	4770      	bx	lr

00086e00 <usart_get_status>:
	return p_usart->US_CSR;
   86e00:	6940      	ldr	r0, [r0, #20]
}
   86e02:	4770      	bx	lr

00086e04 <usart_reset_status>:
	p_usart->US_CR = US_CR_RSTSTA;
   86e04:	f44f 7380 	mov.w	r3, #256	; 0x100
   86e08:	6003      	str	r3, [r0, #0]
   86e0a:	4770      	bx	lr

00086e0c <usart_reset_iterations>:
	p_usart->US_CR = US_CR_RSTIT;
   86e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   86e10:	6003      	str	r3, [r0, #0]
   86e12:	4770      	bx	lr

00086e14 <usart_reset_nack>:
	p_usart->US_CR = US_CR_RSTNACK;
   86e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   86e18:	6003      	str	r3, [r0, #0]
   86e1a:	4770      	bx	lr

00086e1c <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   86e1c:	6940      	ldr	r0, [r0, #20]
}
   86e1e:	f3c0 2040 	ubfx	r0, r0, #9, #1
   86e22:	4770      	bx	lr

00086e24 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86e24:	6943      	ldr	r3, [r0, #20]
   86e26:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   86e2a:	bf1d      	ittte	ne
   86e2c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   86e30:	61c1      	strne	r1, [r0, #28]
	return 0;
   86e32:	2000      	movne	r0, #0
		return 1;
   86e34:	2001      	moveq	r0, #1
}
   86e36:	4770      	bx	lr

00086e38 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86e38:	6943      	ldr	r3, [r0, #20]
   86e3a:	f013 0f02 	tst.w	r3, #2
   86e3e:	d0fb      	beq.n	86e38 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   86e40:	f3c1 0108 	ubfx	r1, r1, #0, #9
   86e44:	61c1      	str	r1, [r0, #28]
}
   86e46:	2000      	movs	r0, #0
   86e48:	4770      	bx	lr

00086e4a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86e4a:	6943      	ldr	r3, [r0, #20]
   86e4c:	f013 0f01 	tst.w	r3, #1
   86e50:	d005      	beq.n	86e5e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86e52:	6983      	ldr	r3, [r0, #24]
   86e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86e58:	600b      	str	r3, [r1, #0]
	return 0;
   86e5a:	2000      	movs	r0, #0
   86e5c:	4770      	bx	lr
		return 1;
   86e5e:	2001      	movs	r0, #1
}
   86e60:	4770      	bx	lr

00086e62 <usart_getchar>:
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86e62:	6943      	ldr	r3, [r0, #20]
   86e64:	f013 0f01 	tst.w	r3, #1
   86e68:	d0fb      	beq.n	86e62 <usart_getchar>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86e6a:	6983      	ldr	r3, [r0, #24]
   86e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86e70:	600b      	str	r3, [r1, #0]
}
   86e72:	2000      	movs	r0, #0
   86e74:	4770      	bx	lr

00086e76 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   86e76:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   86e78:	23ac      	movs	r3, #172	; 0xac
   86e7a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   86e7c:	680b      	ldr	r3, [r1, #0]
   86e7e:	684a      	ldr	r2, [r1, #4]
   86e80:	fbb3 f3f2 	udiv	r3, r3, r2
   86e84:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   86e86:	1e5c      	subs	r4, r3, #1
   86e88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   86e8c:	4294      	cmp	r4, r2
   86e8e:	d80b      	bhi.n	86ea8 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   86e90:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   86e92:	688b      	ldr	r3, [r1, #8]
   86e94:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   86e96:	f240 2302 	movw	r3, #514	; 0x202
   86e9a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   86e9e:	2350      	movs	r3, #80	; 0x50
   86ea0:	6003      	str	r3, [r0, #0]

	return 0;
   86ea2:	2000      	movs	r0, #0
}
   86ea4:	bc10      	pop	{r4}
   86ea6:	4770      	bx	lr
		return 1;
   86ea8:	2001      	movs	r0, #1
   86eaa:	e7fb      	b.n	86ea4 <uart_init+0x2e>

00086eac <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   86eac:	6943      	ldr	r3, [r0, #20]
   86eae:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   86eb2:	bf1a      	itte	ne
   86eb4:	61c1      	strne	r1, [r0, #28]
	return 0;
   86eb6:	2000      	movne	r0, #0
		return 1;
   86eb8:	2001      	moveq	r0, #1
}
   86eba:	4770      	bx	lr

00086ebc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   86ebc:	6943      	ldr	r3, [r0, #20]
   86ebe:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   86ec2:	bf1d      	ittte	ne
   86ec4:	6983      	ldrne	r3, [r0, #24]
   86ec6:	700b      	strbne	r3, [r1, #0]
	return 0;
   86ec8:	2000      	movne	r0, #0
		return 1;
   86eca:	2001      	moveq	r0, #1
}
   86ecc:	4770      	bx	lr

00086ece <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   86ece:	e7fe      	b.n	86ece <Dummy_Handler>

00086ed0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   86ed0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   86ed2:	4b1c      	ldr	r3, [pc, #112]	; (86f44 <Reset_Handler+0x74>)
   86ed4:	4a1c      	ldr	r2, [pc, #112]	; (86f48 <Reset_Handler+0x78>)
   86ed6:	429a      	cmp	r2, r3
   86ed8:	d010      	beq.n	86efc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   86eda:	4b1c      	ldr	r3, [pc, #112]	; (86f4c <Reset_Handler+0x7c>)
   86edc:	4a19      	ldr	r2, [pc, #100]	; (86f44 <Reset_Handler+0x74>)
   86ede:	429a      	cmp	r2, r3
   86ee0:	d20c      	bcs.n	86efc <Reset_Handler+0x2c>
   86ee2:	3b01      	subs	r3, #1
   86ee4:	1a9b      	subs	r3, r3, r2
   86ee6:	f023 0303 	bic.w	r3, r3, #3
   86eea:	3304      	adds	r3, #4
   86eec:	4413      	add	r3, r2
   86eee:	4916      	ldr	r1, [pc, #88]	; (86f48 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   86ef0:	f851 0b04 	ldr.w	r0, [r1], #4
   86ef4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   86ef8:	429a      	cmp	r2, r3
   86efa:	d1f9      	bne.n	86ef0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   86efc:	4b14      	ldr	r3, [pc, #80]	; (86f50 <Reset_Handler+0x80>)
   86efe:	4a15      	ldr	r2, [pc, #84]	; (86f54 <Reset_Handler+0x84>)
   86f00:	429a      	cmp	r2, r3
   86f02:	d20a      	bcs.n	86f1a <Reset_Handler+0x4a>
   86f04:	3b01      	subs	r3, #1
   86f06:	1a9b      	subs	r3, r3, r2
   86f08:	f023 0303 	bic.w	r3, r3, #3
   86f0c:	3304      	adds	r3, #4
   86f0e:	4413      	add	r3, r2
		*pDest++ = 0;
   86f10:	2100      	movs	r1, #0
   86f12:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   86f16:	4293      	cmp	r3, r2
   86f18:	d1fb      	bne.n	86f12 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   86f1a:	4b0f      	ldr	r3, [pc, #60]	; (86f58 <Reset_Handler+0x88>)
   86f1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   86f20:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86f24:	490d      	ldr	r1, [pc, #52]	; (86f5c <Reset_Handler+0x8c>)
   86f26:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   86f28:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   86f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   86f30:	d203      	bcs.n	86f3a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   86f32:	688b      	ldr	r3, [r1, #8]
   86f34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   86f38:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   86f3a:	4b09      	ldr	r3, [pc, #36]	; (86f60 <Reset_Handler+0x90>)
   86f3c:	4798      	blx	r3

	/* Branch to main function */
	main();
   86f3e:	4b09      	ldr	r3, [pc, #36]	; (86f64 <Reset_Handler+0x94>)
   86f40:	4798      	blx	r3
   86f42:	e7fe      	b.n	86f42 <Reset_Handler+0x72>
   86f44:	20000000 	.word	0x20000000
   86f48:	0008dde4 	.word	0x0008dde4
   86f4c:	200010c0 	.word	0x200010c0
   86f50:	20002e2c 	.word	0x20002e2c
   86f54:	200010c0 	.word	0x200010c0
   86f58:	00080000 	.word	0x00080000
   86f5c:	e000ed00 	.word	0xe000ed00
   86f60:	000877e5 	.word	0x000877e5
   86f64:	00087299 	.word	0x00087299

00086f68 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   86f68:	4b3d      	ldr	r3, [pc, #244]	; (87060 <SystemCoreClockUpdate+0xf8>)
   86f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86f6c:	f003 0303 	and.w	r3, r3, #3
   86f70:	2b03      	cmp	r3, #3
   86f72:	d80e      	bhi.n	86f92 <SystemCoreClockUpdate+0x2a>
   86f74:	e8df f003 	tbb	[pc, r3]
   86f78:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   86f7c:	4b39      	ldr	r3, [pc, #228]	; (87064 <SystemCoreClockUpdate+0xfc>)
   86f7e:	695b      	ldr	r3, [r3, #20]
   86f80:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   86f84:	bf14      	ite	ne
   86f86:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   86f8a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   86f8e:	4b36      	ldr	r3, [pc, #216]	; (87068 <SystemCoreClockUpdate+0x100>)
   86f90:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   86f92:	4b33      	ldr	r3, [pc, #204]	; (87060 <SystemCoreClockUpdate+0xf8>)
   86f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86f9a:	2b70      	cmp	r3, #112	; 0x70
   86f9c:	d057      	beq.n	8704e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   86f9e:	4b30      	ldr	r3, [pc, #192]	; (87060 <SystemCoreClockUpdate+0xf8>)
   86fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   86fa2:	4931      	ldr	r1, [pc, #196]	; (87068 <SystemCoreClockUpdate+0x100>)
   86fa4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   86fa8:	680b      	ldr	r3, [r1, #0]
   86faa:	40d3      	lsrs	r3, r2
   86fac:	600b      	str	r3, [r1, #0]
   86fae:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86fb0:	4b2b      	ldr	r3, [pc, #172]	; (87060 <SystemCoreClockUpdate+0xf8>)
   86fb2:	6a1b      	ldr	r3, [r3, #32]
   86fb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   86fb8:	d003      	beq.n	86fc2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86fba:	4a2c      	ldr	r2, [pc, #176]	; (8706c <SystemCoreClockUpdate+0x104>)
   86fbc:	4b2a      	ldr	r3, [pc, #168]	; (87068 <SystemCoreClockUpdate+0x100>)
   86fbe:	601a      	str	r2, [r3, #0]
   86fc0:	e7e7      	b.n	86f92 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86fc2:	4a2b      	ldr	r2, [pc, #172]	; (87070 <SystemCoreClockUpdate+0x108>)
   86fc4:	4b28      	ldr	r3, [pc, #160]	; (87068 <SystemCoreClockUpdate+0x100>)
   86fc6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86fc8:	4b25      	ldr	r3, [pc, #148]	; (87060 <SystemCoreClockUpdate+0xf8>)
   86fca:	6a1b      	ldr	r3, [r3, #32]
   86fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86fd0:	2b10      	cmp	r3, #16
   86fd2:	d005      	beq.n	86fe0 <SystemCoreClockUpdate+0x78>
   86fd4:	2b20      	cmp	r3, #32
   86fd6:	d1dc      	bne.n	86f92 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   86fd8:	4a24      	ldr	r2, [pc, #144]	; (8706c <SystemCoreClockUpdate+0x104>)
   86fda:	4b23      	ldr	r3, [pc, #140]	; (87068 <SystemCoreClockUpdate+0x100>)
   86fdc:	601a      	str	r2, [r3, #0]
				break;
   86fde:	e7d8      	b.n	86f92 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   86fe0:	4a24      	ldr	r2, [pc, #144]	; (87074 <SystemCoreClockUpdate+0x10c>)
   86fe2:	4b21      	ldr	r3, [pc, #132]	; (87068 <SystemCoreClockUpdate+0x100>)
   86fe4:	601a      	str	r2, [r3, #0]
				break;
   86fe6:	e7d4      	b.n	86f92 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86fe8:	4b1d      	ldr	r3, [pc, #116]	; (87060 <SystemCoreClockUpdate+0xf8>)
   86fea:	6a1b      	ldr	r3, [r3, #32]
   86fec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   86ff0:	d00c      	beq.n	8700c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86ff2:	4a1e      	ldr	r2, [pc, #120]	; (8706c <SystemCoreClockUpdate+0x104>)
   86ff4:	4b1c      	ldr	r3, [pc, #112]	; (87068 <SystemCoreClockUpdate+0x100>)
   86ff6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   86ff8:	4b19      	ldr	r3, [pc, #100]	; (87060 <SystemCoreClockUpdate+0xf8>)
   86ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86ffc:	f003 0303 	and.w	r3, r3, #3
   87000:	2b02      	cmp	r3, #2
   87002:	d016      	beq.n	87032 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   87004:	4a1c      	ldr	r2, [pc, #112]	; (87078 <SystemCoreClockUpdate+0x110>)
   87006:	4b18      	ldr	r3, [pc, #96]	; (87068 <SystemCoreClockUpdate+0x100>)
   87008:	601a      	str	r2, [r3, #0]
   8700a:	e7c2      	b.n	86f92 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8700c:	4a18      	ldr	r2, [pc, #96]	; (87070 <SystemCoreClockUpdate+0x108>)
   8700e:	4b16      	ldr	r3, [pc, #88]	; (87068 <SystemCoreClockUpdate+0x100>)
   87010:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   87012:	4b13      	ldr	r3, [pc, #76]	; (87060 <SystemCoreClockUpdate+0xf8>)
   87014:	6a1b      	ldr	r3, [r3, #32]
   87016:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8701a:	2b10      	cmp	r3, #16
   8701c:	d005      	beq.n	8702a <SystemCoreClockUpdate+0xc2>
   8701e:	2b20      	cmp	r3, #32
   87020:	d1ea      	bne.n	86ff8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   87022:	4a12      	ldr	r2, [pc, #72]	; (8706c <SystemCoreClockUpdate+0x104>)
   87024:	4b10      	ldr	r3, [pc, #64]	; (87068 <SystemCoreClockUpdate+0x100>)
   87026:	601a      	str	r2, [r3, #0]
				break;
   87028:	e7e6      	b.n	86ff8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8702a:	4a12      	ldr	r2, [pc, #72]	; (87074 <SystemCoreClockUpdate+0x10c>)
   8702c:	4b0e      	ldr	r3, [pc, #56]	; (87068 <SystemCoreClockUpdate+0x100>)
   8702e:	601a      	str	r2, [r3, #0]
				break;
   87030:	e7e2      	b.n	86ff8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   87032:	4a0b      	ldr	r2, [pc, #44]	; (87060 <SystemCoreClockUpdate+0xf8>)
   87034:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   87036:	6a92      	ldr	r2, [r2, #40]	; 0x28
   87038:	480b      	ldr	r0, [pc, #44]	; (87068 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8703a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8703e:	6803      	ldr	r3, [r0, #0]
   87040:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   87044:	b2d2      	uxtb	r2, r2
   87046:	fbb3 f3f2 	udiv	r3, r3, r2
   8704a:	6003      	str	r3, [r0, #0]
   8704c:	e7a1      	b.n	86f92 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8704e:	4a06      	ldr	r2, [pc, #24]	; (87068 <SystemCoreClockUpdate+0x100>)
   87050:	6813      	ldr	r3, [r2, #0]
   87052:	490a      	ldr	r1, [pc, #40]	; (8707c <SystemCoreClockUpdate+0x114>)
   87054:	fba1 1303 	umull	r1, r3, r1, r3
   87058:	085b      	lsrs	r3, r3, #1
   8705a:	6013      	str	r3, [r2, #0]
   8705c:	4770      	bx	lr
   8705e:	bf00      	nop
   87060:	400e0400 	.word	0x400e0400
   87064:	400e1210 	.word	0x400e1210
   87068:	200006ec 	.word	0x200006ec
   8706c:	00b71b00 	.word	0x00b71b00
   87070:	003d0900 	.word	0x003d0900
   87074:	007a1200 	.word	0x007a1200
   87078:	0e4e1c00 	.word	0x0e4e1c00
   8707c:	aaaaaaab 	.word	0xaaaaaaab

00087080 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   87080:	4b0a      	ldr	r3, [pc, #40]	; (870ac <_sbrk+0x2c>)
   87082:	681b      	ldr	r3, [r3, #0]
   87084:	b153      	cbz	r3, 8709c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   87086:	4b09      	ldr	r3, [pc, #36]	; (870ac <_sbrk+0x2c>)
   87088:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8708a:	181a      	adds	r2, r3, r0
   8708c:	4908      	ldr	r1, [pc, #32]	; (870b0 <_sbrk+0x30>)
   8708e:	4291      	cmp	r1, r2
   87090:	db08      	blt.n	870a4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   87092:	4610      	mov	r0, r2
   87094:	4a05      	ldr	r2, [pc, #20]	; (870ac <_sbrk+0x2c>)
   87096:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   87098:	4618      	mov	r0, r3
   8709a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8709c:	4a05      	ldr	r2, [pc, #20]	; (870b4 <_sbrk+0x34>)
   8709e:	4b03      	ldr	r3, [pc, #12]	; (870ac <_sbrk+0x2c>)
   870a0:	601a      	str	r2, [r3, #0]
   870a2:	e7f0      	b.n	87086 <_sbrk+0x6>
		return (caddr_t) -1;	
   870a4:	f04f 30ff 	mov.w	r0, #4294967295
}
   870a8:	4770      	bx	lr
   870aa:	bf00      	nop
   870ac:	200023b0 	.word	0x200023b0
   870b0:	2007fffc 	.word	0x2007fffc
   870b4:	20082000 	.word	0x20082000

000870b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   870b8:	f04f 30ff 	mov.w	r0, #4294967295
   870bc:	4770      	bx	lr

000870be <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   870be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   870c2:	604b      	str	r3, [r1, #4]

	return 0;
}
   870c4:	2000      	movs	r0, #0
   870c6:	4770      	bx	lr

000870c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   870c8:	2001      	movs	r0, #1
   870ca:	4770      	bx	lr

000870cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   870cc:	2000      	movs	r0, #0
   870ce:	4770      	bx	lr

000870d0 <fpga_program_setup1>:
	FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   870d0:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   870d2:	2008      	movs	r0, #8
   870d4:	4b19      	ldr	r3, [pc, #100]	; (8713c <fpga_program_setup1+0x6c>)
   870d6:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);	
	usart_enable_tx(FPGA_PROG_USART);
#else
				
	spi_enable_clock(SPI);
   870d8:	4c19      	ldr	r4, [pc, #100]	; (87140 <fpga_program_setup1+0x70>)
   870da:	4620      	mov	r0, r4
   870dc:	4b19      	ldr	r3, [pc, #100]	; (87144 <fpga_program_setup1+0x74>)
   870de:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   870e0:	2380      	movs	r3, #128	; 0x80
   870e2:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   870e4:	6863      	ldr	r3, [r4, #4]
   870e6:	f043 0301 	orr.w	r3, r3, #1
   870ea:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   870ec:	6863      	ldr	r3, [r4, #4]
   870ee:	f043 0310 	orr.w	r3, r3, #16
   870f2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   870f4:	6863      	ldr	r3, [r4, #4]
   870f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   870fa:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
				
	spi_set_clock_polarity(SPI, 0, 0);
   870fc:	2200      	movs	r2, #0
   870fe:	4611      	mov	r1, r2
   87100:	4620      	mov	r0, r4
   87102:	4b11      	ldr	r3, [pc, #68]	; (87148 <fpga_program_setup1+0x78>)
   87104:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   87106:	2201      	movs	r2, #1
   87108:	2100      	movs	r1, #0
   8710a:	4620      	mov	r0, r4
   8710c:	4b0f      	ldr	r3, [pc, #60]	; (8714c <fpga_program_setup1+0x7c>)
   8710e:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   87110:	490f      	ldr	r1, [pc, #60]	; (87150 <fpga_program_setup1+0x80>)
   87112:	4810      	ldr	r0, [pc, #64]	; (87154 <fpga_program_setup1+0x84>)
   87114:	4b10      	ldr	r3, [pc, #64]	; (87158 <fpga_program_setup1+0x88>)
   87116:	4798      	blx	r3
   87118:	b2c2      	uxtb	r2, r0
   8711a:	2100      	movs	r1, #0
   8711c:	4620      	mov	r0, r4
   8711e:	4b0f      	ldr	r3, [pc, #60]	; (8715c <fpga_program_setup1+0x8c>)
   87120:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   87122:	2301      	movs	r3, #1
   87124:	6023      	str	r3, [r4, #0]
				
	spi_enable(SPI);
				
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   87126:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8712a:	200e      	movs	r0, #14
   8712c:	4c0c      	ldr	r4, [pc, #48]	; (87160 <fpga_program_setup1+0x90>)
   8712e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);			
   87130:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   87134:	200f      	movs	r0, #15
   87136:	47a0      	blx	r4
   87138:	bd10      	pop	{r4, pc}
   8713a:	bf00      	nop
   8713c:	000851b5 	.word	0x000851b5
   87140:	40008000 	.word	0x40008000
   87144:	000855b5 	.word	0x000855b5
   87148:	00085637 	.word	0x00085637
   8714c:	00085655 	.word	0x00085655
   87150:	05b8d800 	.word	0x05b8d800
   87154:	000f4240 	.word	0x000f4240
   87158:	00085673 	.word	0x00085673
   8715c:	00085689 	.word	0x00085689
   87160:	000851d1 	.word	0x000851d1

00087164 <fpga_program_setup2>:
#endif
}

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   87164:	b508      	push	{r3, lr}
	FPGA_NPROG_HIGH();	
   87166:	2008      	movs	r0, #8
   87168:	4b01      	ldr	r3, [pc, #4]	; (87170 <fpga_program_setup2+0xc>)
   8716a:	4798      	blx	r3
   8716c:	bd08      	pop	{r3, pc}
   8716e:	bf00      	nop
   87170:	0008519b 	.word	0x0008519b

00087174 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   87174:	b510      	push	{r4, lr}
		databyte = databyte >> 1;
	}
	#elif FPGA_USE_USART
	usart_putchar(FPGA_PROG_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   87176:	2300      	movs	r3, #0
   87178:	461a      	mov	r2, r3
   8717a:	4601      	mov	r1, r0
   8717c:	4801      	ldr	r0, [pc, #4]	; (87184 <fpga_program_sendbyte+0x10>)
   8717e:	4c02      	ldr	r4, [pc, #8]	; (87188 <fpga_program_sendbyte+0x14>)
   87180:	47a0      	blx	r4
   87182:	bd10      	pop	{r4, pc}
   87184:	40008000 	.word	0x40008000
   87188:	00085603 	.word	0x00085603

0008718c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8718c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8718e:	b083      	sub	sp, #12
   87190:	4604      	mov	r4, r0
   87192:	460d      	mov	r5, r1
	uint32_t val = 0;
   87194:	2300      	movs	r3, #0
   87196:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   87198:	4b19      	ldr	r3, [pc, #100]	; (87200 <usart_serial_getchar+0x74>)
   8719a:	4298      	cmp	r0, r3
   8719c:	d00a      	beq.n	871b4 <usart_serial_getchar+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8719e:	4b19      	ldr	r3, [pc, #100]	; (87204 <usart_serial_getchar+0x78>)
   871a0:	4298      	cmp	r0, r3
   871a2:	d00f      	beq.n	871c4 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   871a4:	4b18      	ldr	r3, [pc, #96]	; (87208 <usart_serial_getchar+0x7c>)
   871a6:	4298      	cmp	r0, r3
   871a8:	d016      	beq.n	871d8 <usart_serial_getchar+0x4c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   871aa:	4b18      	ldr	r3, [pc, #96]	; (8720c <usart_serial_getchar+0x80>)
   871ac:	429c      	cmp	r4, r3
   871ae:	d01d      	beq.n	871ec <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   871b0:	b003      	add	sp, #12
   871b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   871b4:	461f      	mov	r7, r3
   871b6:	4e16      	ldr	r6, [pc, #88]	; (87210 <usart_serial_getchar+0x84>)
   871b8:	4629      	mov	r1, r5
   871ba:	4638      	mov	r0, r7
   871bc:	47b0      	blx	r6
   871be:	2800      	cmp	r0, #0
   871c0:	d1fa      	bne.n	871b8 <usart_serial_getchar+0x2c>
   871c2:	e7f2      	b.n	871aa <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   871c4:	461e      	mov	r6, r3
   871c6:	4c13      	ldr	r4, [pc, #76]	; (87214 <usart_serial_getchar+0x88>)
   871c8:	a901      	add	r1, sp, #4
   871ca:	4630      	mov	r0, r6
   871cc:	47a0      	blx	r4
   871ce:	2800      	cmp	r0, #0
   871d0:	d1fa      	bne.n	871c8 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   871d2:	9b01      	ldr	r3, [sp, #4]
   871d4:	702b      	strb	r3, [r5, #0]
   871d6:	e7eb      	b.n	871b0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   871d8:	461e      	mov	r6, r3
   871da:	4c0e      	ldr	r4, [pc, #56]	; (87214 <usart_serial_getchar+0x88>)
   871dc:	a901      	add	r1, sp, #4
   871de:	4630      	mov	r0, r6
   871e0:	47a0      	blx	r4
   871e2:	2800      	cmp	r0, #0
   871e4:	d1fa      	bne.n	871dc <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   871e6:	9b01      	ldr	r3, [sp, #4]
   871e8:	702b      	strb	r3, [r5, #0]
   871ea:	e7e1      	b.n	871b0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   871ec:	461e      	mov	r6, r3
   871ee:	4c09      	ldr	r4, [pc, #36]	; (87214 <usart_serial_getchar+0x88>)
   871f0:	a901      	add	r1, sp, #4
   871f2:	4630      	mov	r0, r6
   871f4:	47a0      	blx	r4
   871f6:	2800      	cmp	r0, #0
   871f8:	d1fa      	bne.n	871f0 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   871fa:	9b01      	ldr	r3, [sp, #4]
   871fc:	702b      	strb	r3, [r5, #0]
}
   871fe:	e7d7      	b.n	871b0 <usart_serial_getchar+0x24>
   87200:	400e0600 	.word	0x400e0600
   87204:	40090000 	.word	0x40090000
   87208:	40094000 	.word	0x40094000
   8720c:	40098000 	.word	0x40098000
   87210:	00086ebd 	.word	0x00086ebd
   87214:	00086e4b 	.word	0x00086e4b

00087218 <usart_serial_putchar>:
{
   87218:	b570      	push	{r4, r5, r6, lr}
   8721a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   8721c:	4b18      	ldr	r3, [pc, #96]	; (87280 <usart_serial_putchar+0x68>)
   8721e:	4298      	cmp	r0, r3
   87220:	d00a      	beq.n	87238 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   87222:	4b18      	ldr	r3, [pc, #96]	; (87284 <usart_serial_putchar+0x6c>)
   87224:	4298      	cmp	r0, r3
   87226:	d010      	beq.n	8724a <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   87228:	4b17      	ldr	r3, [pc, #92]	; (87288 <usart_serial_putchar+0x70>)
   8722a:	4298      	cmp	r0, r3
   8722c:	d016      	beq.n	8725c <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   8722e:	4b17      	ldr	r3, [pc, #92]	; (8728c <usart_serial_putchar+0x74>)
   87230:	4298      	cmp	r0, r3
   87232:	d01c      	beq.n	8726e <usart_serial_putchar+0x56>
	return 0;
   87234:	2000      	movs	r0, #0
}
   87236:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   87238:	461e      	mov	r6, r3
   8723a:	4d15      	ldr	r5, [pc, #84]	; (87290 <usart_serial_putchar+0x78>)
   8723c:	4621      	mov	r1, r4
   8723e:	4630      	mov	r0, r6
   87240:	47a8      	blx	r5
   87242:	2800      	cmp	r0, #0
   87244:	d1fa      	bne.n	8723c <usart_serial_putchar+0x24>
		return 1;
   87246:	2001      	movs	r0, #1
   87248:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8724a:	461e      	mov	r6, r3
   8724c:	4d11      	ldr	r5, [pc, #68]	; (87294 <usart_serial_putchar+0x7c>)
   8724e:	4621      	mov	r1, r4
   87250:	4630      	mov	r0, r6
   87252:	47a8      	blx	r5
   87254:	2800      	cmp	r0, #0
   87256:	d1fa      	bne.n	8724e <usart_serial_putchar+0x36>
		return 1;
   87258:	2001      	movs	r0, #1
   8725a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8725c:	461e      	mov	r6, r3
   8725e:	4d0d      	ldr	r5, [pc, #52]	; (87294 <usart_serial_putchar+0x7c>)
   87260:	4621      	mov	r1, r4
   87262:	4630      	mov	r0, r6
   87264:	47a8      	blx	r5
   87266:	2800      	cmp	r0, #0
   87268:	d1fa      	bne.n	87260 <usart_serial_putchar+0x48>
		return 1;
   8726a:	2001      	movs	r0, #1
   8726c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8726e:	461e      	mov	r6, r3
   87270:	4d08      	ldr	r5, [pc, #32]	; (87294 <usart_serial_putchar+0x7c>)
   87272:	4621      	mov	r1, r4
   87274:	4630      	mov	r0, r6
   87276:	47a8      	blx	r5
   87278:	2800      	cmp	r0, #0
   8727a:	d1fa      	bne.n	87272 <usart_serial_putchar+0x5a>
		return 1;
   8727c:	2001      	movs	r0, #1
   8727e:	bd70      	pop	{r4, r5, r6, pc}
   87280:	400e0600 	.word	0x400e0600
   87284:	40090000 	.word	0x40090000
   87288:	40094000 	.word	0x40094000
   8728c:	40098000 	.word	0x40098000
   87290:	00086ead 	.word	0x00086ead
   87294:	00086e25 	.word	0x00086e25

00087298 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   87298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8729c:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   8729e:	2110      	movs	r1, #16
   872a0:	eb0d 0001 	add.w	r0, sp, r1
   872a4:	4b5b      	ldr	r3, [pc, #364]	; (87414 <main+0x17c>)
   872a6:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   872a8:	2008      	movs	r0, #8
   872aa:	4d5b      	ldr	r5, [pc, #364]	; (87418 <main+0x180>)
   872ac:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   872ae:	4c5b      	ldr	r4, [pc, #364]	; (8741c <main+0x184>)
   872b0:	4b5b      	ldr	r3, [pc, #364]	; (87420 <main+0x188>)
   872b2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   872b4:	4a5b      	ldr	r2, [pc, #364]	; (87424 <main+0x18c>)
   872b6:	4b5c      	ldr	r3, [pc, #368]	; (87428 <main+0x190>)
   872b8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   872ba:	4a5c      	ldr	r2, [pc, #368]	; (8742c <main+0x194>)
   872bc:	4b5c      	ldr	r3, [pc, #368]	; (87430 <main+0x198>)
   872be:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   872c0:	4b5c      	ldr	r3, [pc, #368]	; (87434 <main+0x19c>)
   872c2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   872c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   872c8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   872ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   872ce:	9303      	str	r3, [sp, #12]
   872d0:	2008      	movs	r0, #8
   872d2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   872d4:	a901      	add	r1, sp, #4
   872d6:	4620      	mov	r0, r4
   872d8:	4b57      	ldr	r3, [pc, #348]	; (87438 <main+0x1a0>)
   872da:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   872dc:	4d57      	ldr	r5, [pc, #348]	; (8743c <main+0x1a4>)
   872de:	682b      	ldr	r3, [r5, #0]
   872e0:	2100      	movs	r1, #0
   872e2:	6898      	ldr	r0, [r3, #8]
   872e4:	4c56      	ldr	r4, [pc, #344]	; (87440 <main+0x1a8>)
   872e6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   872e8:	682b      	ldr	r3, [r5, #0]
   872ea:	2100      	movs	r1, #0
   872ec:	6858      	ldr	r0, [r3, #4]
   872ee:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   872f0:	2101      	movs	r1, #1
   872f2:	4b54      	ldr	r3, [pc, #336]	; (87444 <main+0x1ac>)
   872f4:	7019      	strb	r1, [r3, #0]
   872f6:	f3bf 8f5f 	dmb	sy
   872fa:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   872fc:	4b52      	ldr	r3, [pc, #328]	; (87448 <main+0x1b0>)
   872fe:	2200      	movs	r2, #0
   87300:	701a      	strb	r2, [r3, #0]
   87302:	705a      	strb	r2, [r3, #1]
   87304:	709a      	strb	r2, [r3, #2]
   87306:	70da      	strb	r2, [r3, #3]
   87308:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8730a:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   8730c:	4b4f      	ldr	r3, [pc, #316]	; (8744c <main+0x1b4>)
   8730e:	4798      	blx	r3
	board_init();
   87310:	4b4f      	ldr	r3, [pc, #316]	; (87450 <main+0x1b8>)
   87312:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   87314:	4b4f      	ldr	r3, [pc, #316]	; (87454 <main+0x1bc>)
   87316:	4798      	blx	r3
   87318:	ad04      	add	r5, sp, #16
   8731a:	4c4f      	ldr	r4, [pc, #316]	; (87458 <main+0x1c0>)
   8731c:	f104 0820 	add.w	r8, r4, #32

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   87320:	4f4e      	ldr	r7, [pc, #312]	; (8745c <main+0x1c4>)
   87322:	4e4f      	ldr	r6, [pc, #316]	; (87460 <main+0x1c8>)
   87324:	f855 2b04 	ldr.w	r2, [r5], #4
   87328:	4639      	mov	r1, r7
   8732a:	4620      	mov	r0, r4
   8732c:	47b0      	blx	r6
   8732e:	3408      	adds	r4, #8
	for(unsigned int i = 0; i < 4; i++){
   87330:	45a0      	cmp	r8, r4
   87332:	d1f7      	bne.n	87324 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   87334:	4c48      	ldr	r4, [pc, #288]	; (87458 <main+0x1c0>)
   87336:	2600      	movs	r6, #0
   87338:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   8733c:	4a49      	ldr	r2, [pc, #292]	; (87464 <main+0x1cc>)
   8733e:	494a      	ldr	r1, [pc, #296]	; (87468 <main+0x1d0>)
   87340:	484a      	ldr	r0, [pc, #296]	; (8746c <main+0x1d4>)
   87342:	4f4b      	ldr	r7, [pc, #300]	; (87470 <main+0x1d8>)
   87344:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   87346:	4621      	mov	r1, r4
   87348:	484a      	ldr	r0, [pc, #296]	; (87474 <main+0x1dc>)
   8734a:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   8734c:	2009      	movs	r0, #9
   8734e:	4b32      	ldr	r3, [pc, #200]	; (87418 <main+0x180>)
   87350:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   87352:	4d49      	ldr	r5, [pc, #292]	; (87478 <main+0x1e0>)
   87354:	4629      	mov	r1, r5
   87356:	2029      	movs	r0, #41	; 0x29
   87358:	4c48      	ldr	r4, [pc, #288]	; (8747c <main+0x1e4>)
   8735a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   8735c:	4629      	mov	r1, r5
   8735e:	202a      	movs	r0, #42	; 0x2a
   87360:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   87362:	4629      	mov	r1, r5
   87364:	202b      	movs	r0, #43	; 0x2b
   87366:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   87368:	4629      	mov	r1, r5
   8736a:	202c      	movs	r0, #44	; 0x2c
   8736c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8736e:	4629      	mov	r1, r5
   87370:	202d      	movs	r0, #45	; 0x2d
   87372:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   87374:	4629      	mov	r1, r5
   87376:	202e      	movs	r0, #46	; 0x2e
   87378:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8737a:	4629      	mov	r1, r5
   8737c:	202f      	movs	r0, #47	; 0x2f
   8737e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   87380:	4629      	mov	r1, r5
   87382:	2030      	movs	r0, #48	; 0x30
   87384:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   87386:	4629      	mov	r1, r5
   87388:	2033      	movs	r0, #51	; 0x33
   8738a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   8738c:	4629      	mov	r1, r5
   8738e:	2037      	movs	r0, #55	; 0x37
   87390:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   87392:	4629      	mov	r1, r5
   87394:	2034      	movs	r0, #52	; 0x34
   87396:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   87398:	4839      	ldr	r0, [pc, #228]	; (87480 <main+0x1e8>)
   8739a:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   8739c:	4c39      	ldr	r4, [pc, #228]	; (87484 <main+0x1ec>)
   8739e:	4a3a      	ldr	r2, [pc, #232]	; (87488 <main+0x1f0>)
   873a0:	4631      	mov	r1, r6
   873a2:	4620      	mov	r0, r4
   873a4:	4b39      	ldr	r3, [pc, #228]	; (8748c <main+0x1f4>)
   873a6:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   873a8:	4a39      	ldr	r2, [pc, #228]	; (87490 <main+0x1f8>)
   873aa:	4631      	mov	r1, r6
   873ac:	4620      	mov	r0, r4
   873ae:	4b39      	ldr	r3, [pc, #228]	; (87494 <main+0x1fc>)
   873b0:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   873b2:	4a39      	ldr	r2, [pc, #228]	; (87498 <main+0x200>)
   873b4:	4631      	mov	r1, r6
   873b6:	4620      	mov	r0, r4
   873b8:	4b38      	ldr	r3, [pc, #224]	; (8749c <main+0x204>)
   873ba:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   873bc:	2203      	movs	r2, #3
   873be:	4631      	mov	r1, r6
   873c0:	4620      	mov	r0, r4
   873c2:	4b37      	ldr	r3, [pc, #220]	; (874a0 <main+0x208>)
   873c4:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   873c6:	4b37      	ldr	r3, [pc, #220]	; (874a4 <main+0x20c>)
   873c8:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   873ca:	4b37      	ldr	r3, [pc, #220]	; (874a8 <main+0x210>)
   873cc:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   873ce:	2204      	movs	r2, #4
   873d0:	4b36      	ldr	r3, [pc, #216]	; (874ac <main+0x214>)
   873d2:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   873d4:	4630      	mov	r0, r6
   873d6:	4b36      	ldr	r3, [pc, #216]	; (874b0 <main+0x218>)
   873d8:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   873da:	4836      	ldr	r0, [pc, #216]	; (874b4 <main+0x21c>)
   873dc:	47b8      	blx	r7
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	extern volatile bool enable_cdc_transfer[2];
	extern volatile bool usart_x_enabled[4];
	extern tcirc_buf usb_usart_circ_buf;
	init_circ_buf(&usb_usart_circ_buf);
   873de:	4836      	ldr	r0, [pc, #216]	; (874b8 <main+0x220>)
   873e0:	4b36      	ldr	r3, [pc, #216]	; (874bc <main+0x224>)
   873e2:	4798      	blx	r3
	while (true) {
		//sleepmgr_enter_sleep();
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   873e4:	4c36      	ldr	r4, [pc, #216]	; (874c0 <main+0x228>)
			//uint8_t chr_buf[512];
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
				uint16_t i = 0;
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   873e6:	4f37      	ldr	r7, [pc, #220]	; (874c4 <main+0x22c>)
   873e8:	e009      	b.n	873fe <main+0x166>
   873ea:	4628      	mov	r0, r5
   873ec:	47b8      	blx	r7
   873ee:	4601      	mov	r1, r0
   873f0:	2000      	movs	r0, #0
   873f2:	4b35      	ldr	r3, [pc, #212]	; (874c8 <main+0x230>)
   873f4:	4798      	blx	r3
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   873f6:	4628      	mov	r0, r5
   873f8:	47b0      	blx	r6
   873fa:	2800      	cmp	r0, #0
   873fc:	d1f5      	bne.n	873ea <main+0x152>
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   873fe:	4a33      	ldr	r2, [pc, #204]	; (874cc <main+0x234>)
   87400:	7823      	ldrb	r3, [r4, #0]
   87402:	2b00      	cmp	r3, #0
   87404:	d0fc      	beq.n	87400 <main+0x168>
   87406:	7813      	ldrb	r3, [r2, #0]
   87408:	2b00      	cmp	r3, #0
   8740a:	d0f9      	beq.n	87400 <main+0x168>
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   8740c:	4d2a      	ldr	r5, [pc, #168]	; (874b8 <main+0x220>)
   8740e:	4e30      	ldr	r6, [pc, #192]	; (874d0 <main+0x238>)
   87410:	e7f1      	b.n	873f6 <main+0x15e>
   87412:	bf00      	nop
   87414:	00081eb1 	.word	0x00081eb1
   87418:	00085515 	.word	0x00085515
   8741c:	400e0600 	.word	0x400e0600
   87420:	20002de8 	.word	0x20002de8
   87424:	00087219 	.word	0x00087219
   87428:	20002de4 	.word	0x20002de4
   8742c:	0008718d 	.word	0x0008718d
   87430:	20002de0 	.word	0x20002de0
   87434:	05b8d800 	.word	0x05b8d800
   87438:	00086e77 	.word	0x00086e77
   8743c:	20000714 	.word	0x20000714
   87440:	000879e5 	.word	0x000879e5
   87444:	200006ea 	.word	0x200006ea
   87448:	20002dd8 	.word	0x20002dd8
   8744c:	0008456d 	.word	0x0008456d
   87450:	00085035 	.word	0x00085035
   87454:	000842f9 	.word	0x000842f9
   87458:	200006f0 	.word	0x200006f0
   8745c:	0008da68 	.word	0x0008da68
   87460:	00087b85 	.word	0x00087b85
   87464:	0008da70 	.word	0x0008da70
   87468:	0008da7c 	.word	0x0008da7c
   8746c:	0008da88 	.word	0x0008da88
   87470:	00087835 	.word	0x00087835
   87474:	0008dabc 	.word	0x0008dabc
   87478:	08000001 	.word	0x08000001
   8747c:	000851d1 	.word	0x000851d1
   87480:	0008dad0 	.word	0x0008dad0
   87484:	400e0000 	.word	0x400e0000
   87488:	01010100 	.word	0x01010100
   8748c:	000850a5 	.word	0x000850a5
   87490:	01030101 	.word	0x01030101
   87494:	000850b1 	.word	0x000850b1
   87498:	00040002 	.word	0x00040002
   8749c:	000850bd 	.word	0x000850bd
   874a0:	000850c9 	.word	0x000850c9
   874a4:	000844b5 	.word	0x000844b5
   874a8:	0008484d 	.word	0x0008484d
   874ac:	400e0400 	.word	0x400e0400
   874b0:	0008557d 	.word	0x0008557d
   874b4:	0008daf0 	.word	0x0008daf0
   874b8:	200029b0 	.word	0x200029b0
   874bc:	00081f01 	.word	0x00081f01
   874c0:	20001a90 	.word	0x20001a90
   874c4:	00081f61 	.word	0x00081f61
   874c8:	00080731 	.word	0x00080731
   874cc:	20002170 	.word	0x20002170
   874d0:	00081fa9 	.word	0x00081fa9

000874d4 <__aeabi_uldivmod>:
   874d4:	b953      	cbnz	r3, 874ec <__aeabi_uldivmod+0x18>
   874d6:	b94a      	cbnz	r2, 874ec <__aeabi_uldivmod+0x18>
   874d8:	2900      	cmp	r1, #0
   874da:	bf08      	it	eq
   874dc:	2800      	cmpeq	r0, #0
   874de:	bf1c      	itt	ne
   874e0:	f04f 31ff 	movne.w	r1, #4294967295
   874e4:	f04f 30ff 	movne.w	r0, #4294967295
   874e8:	f000 b97a 	b.w	877e0 <__aeabi_idiv0>
   874ec:	f1ad 0c08 	sub.w	ip, sp, #8
   874f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   874f4:	f000 f806 	bl	87504 <__udivmoddi4>
   874f8:	f8dd e004 	ldr.w	lr, [sp, #4]
   874fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87500:	b004      	add	sp, #16
   87502:	4770      	bx	lr

00087504 <__udivmoddi4>:
   87504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87508:	468c      	mov	ip, r1
   8750a:	460e      	mov	r6, r1
   8750c:	4604      	mov	r4, r0
   8750e:	9d08      	ldr	r5, [sp, #32]
   87510:	2b00      	cmp	r3, #0
   87512:	d150      	bne.n	875b6 <__udivmoddi4+0xb2>
   87514:	428a      	cmp	r2, r1
   87516:	4617      	mov	r7, r2
   87518:	d96c      	bls.n	875f4 <__udivmoddi4+0xf0>
   8751a:	fab2 fe82 	clz	lr, r2
   8751e:	f1be 0f00 	cmp.w	lr, #0
   87522:	d00b      	beq.n	8753c <__udivmoddi4+0x38>
   87524:	f1ce 0c20 	rsb	ip, lr, #32
   87528:	fa01 f60e 	lsl.w	r6, r1, lr
   8752c:	fa20 fc0c 	lsr.w	ip, r0, ip
   87530:	fa02 f70e 	lsl.w	r7, r2, lr
   87534:	ea4c 0c06 	orr.w	ip, ip, r6
   87538:	fa00 f40e 	lsl.w	r4, r0, lr
   8753c:	0c3a      	lsrs	r2, r7, #16
   8753e:	fbbc f9f2 	udiv	r9, ip, r2
   87542:	b2bb      	uxth	r3, r7
   87544:	fb02 cc19 	mls	ip, r2, r9, ip
   87548:	fb09 fa03 	mul.w	sl, r9, r3
   8754c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   87550:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   87554:	45b2      	cmp	sl, r6
   87556:	d90a      	bls.n	8756e <__udivmoddi4+0x6a>
   87558:	19f6      	adds	r6, r6, r7
   8755a:	f109 31ff 	add.w	r1, r9, #4294967295
   8755e:	f080 8125 	bcs.w	877ac <__udivmoddi4+0x2a8>
   87562:	45b2      	cmp	sl, r6
   87564:	f240 8122 	bls.w	877ac <__udivmoddi4+0x2a8>
   87568:	f1a9 0902 	sub.w	r9, r9, #2
   8756c:	443e      	add	r6, r7
   8756e:	eba6 060a 	sub.w	r6, r6, sl
   87572:	fbb6 f0f2 	udiv	r0, r6, r2
   87576:	fb02 6610 	mls	r6, r2, r0, r6
   8757a:	fb00 f303 	mul.w	r3, r0, r3
   8757e:	b2a4      	uxth	r4, r4
   87580:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   87584:	42a3      	cmp	r3, r4
   87586:	d909      	bls.n	8759c <__udivmoddi4+0x98>
   87588:	19e4      	adds	r4, r4, r7
   8758a:	f100 32ff 	add.w	r2, r0, #4294967295
   8758e:	f080 810b 	bcs.w	877a8 <__udivmoddi4+0x2a4>
   87592:	42a3      	cmp	r3, r4
   87594:	f240 8108 	bls.w	877a8 <__udivmoddi4+0x2a4>
   87598:	3802      	subs	r0, #2
   8759a:	443c      	add	r4, r7
   8759c:	2100      	movs	r1, #0
   8759e:	1ae4      	subs	r4, r4, r3
   875a0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   875a4:	2d00      	cmp	r5, #0
   875a6:	d062      	beq.n	8766e <__udivmoddi4+0x16a>
   875a8:	2300      	movs	r3, #0
   875aa:	fa24 f40e 	lsr.w	r4, r4, lr
   875ae:	602c      	str	r4, [r5, #0]
   875b0:	606b      	str	r3, [r5, #4]
   875b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   875b6:	428b      	cmp	r3, r1
   875b8:	d907      	bls.n	875ca <__udivmoddi4+0xc6>
   875ba:	2d00      	cmp	r5, #0
   875bc:	d055      	beq.n	8766a <__udivmoddi4+0x166>
   875be:	2100      	movs	r1, #0
   875c0:	e885 0041 	stmia.w	r5, {r0, r6}
   875c4:	4608      	mov	r0, r1
   875c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   875ca:	fab3 f183 	clz	r1, r3
   875ce:	2900      	cmp	r1, #0
   875d0:	f040 808f 	bne.w	876f2 <__udivmoddi4+0x1ee>
   875d4:	42b3      	cmp	r3, r6
   875d6:	d302      	bcc.n	875de <__udivmoddi4+0xda>
   875d8:	4282      	cmp	r2, r0
   875da:	f200 80fc 	bhi.w	877d6 <__udivmoddi4+0x2d2>
   875de:	1a84      	subs	r4, r0, r2
   875e0:	eb66 0603 	sbc.w	r6, r6, r3
   875e4:	2001      	movs	r0, #1
   875e6:	46b4      	mov	ip, r6
   875e8:	2d00      	cmp	r5, #0
   875ea:	d040      	beq.n	8766e <__udivmoddi4+0x16a>
   875ec:	e885 1010 	stmia.w	r5, {r4, ip}
   875f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   875f4:	b912      	cbnz	r2, 875fc <__udivmoddi4+0xf8>
   875f6:	2701      	movs	r7, #1
   875f8:	fbb7 f7f2 	udiv	r7, r7, r2
   875fc:	fab7 fe87 	clz	lr, r7
   87600:	f1be 0f00 	cmp.w	lr, #0
   87604:	d135      	bne.n	87672 <__udivmoddi4+0x16e>
   87606:	2101      	movs	r1, #1
   87608:	1bf6      	subs	r6, r6, r7
   8760a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8760e:	fa1f f887 	uxth.w	r8, r7
   87612:	fbb6 f2fc 	udiv	r2, r6, ip
   87616:	fb0c 6612 	mls	r6, ip, r2, r6
   8761a:	fb08 f002 	mul.w	r0, r8, r2
   8761e:	0c23      	lsrs	r3, r4, #16
   87620:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   87624:	42b0      	cmp	r0, r6
   87626:	d907      	bls.n	87638 <__udivmoddi4+0x134>
   87628:	19f6      	adds	r6, r6, r7
   8762a:	f102 33ff 	add.w	r3, r2, #4294967295
   8762e:	d202      	bcs.n	87636 <__udivmoddi4+0x132>
   87630:	42b0      	cmp	r0, r6
   87632:	f200 80d2 	bhi.w	877da <__udivmoddi4+0x2d6>
   87636:	461a      	mov	r2, r3
   87638:	1a36      	subs	r6, r6, r0
   8763a:	fbb6 f0fc 	udiv	r0, r6, ip
   8763e:	fb0c 6610 	mls	r6, ip, r0, r6
   87642:	fb08 f800 	mul.w	r8, r8, r0
   87646:	b2a3      	uxth	r3, r4
   87648:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   8764c:	45a0      	cmp	r8, r4
   8764e:	d907      	bls.n	87660 <__udivmoddi4+0x15c>
   87650:	19e4      	adds	r4, r4, r7
   87652:	f100 33ff 	add.w	r3, r0, #4294967295
   87656:	d202      	bcs.n	8765e <__udivmoddi4+0x15a>
   87658:	45a0      	cmp	r8, r4
   8765a:	f200 80b9 	bhi.w	877d0 <__udivmoddi4+0x2cc>
   8765e:	4618      	mov	r0, r3
   87660:	eba4 0408 	sub.w	r4, r4, r8
   87664:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   87668:	e79c      	b.n	875a4 <__udivmoddi4+0xa0>
   8766a:	4629      	mov	r1, r5
   8766c:	4628      	mov	r0, r5
   8766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87672:	fa07 f70e 	lsl.w	r7, r7, lr
   87676:	f1ce 0320 	rsb	r3, lr, #32
   8767a:	fa26 f203 	lsr.w	r2, r6, r3
   8767e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   87682:	fbb2 f1fc 	udiv	r1, r2, ip
   87686:	fa1f f887 	uxth.w	r8, r7
   8768a:	fb0c 2211 	mls	r2, ip, r1, r2
   8768e:	fa06 f60e 	lsl.w	r6, r6, lr
   87692:	fa20 f303 	lsr.w	r3, r0, r3
   87696:	fb01 f908 	mul.w	r9, r1, r8
   8769a:	4333      	orrs	r3, r6
   8769c:	0c1e      	lsrs	r6, r3, #16
   8769e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   876a2:	45b1      	cmp	r9, r6
   876a4:	fa00 f40e 	lsl.w	r4, r0, lr
   876a8:	d909      	bls.n	876be <__udivmoddi4+0x1ba>
   876aa:	19f6      	adds	r6, r6, r7
   876ac:	f101 32ff 	add.w	r2, r1, #4294967295
   876b0:	f080 808c 	bcs.w	877cc <__udivmoddi4+0x2c8>
   876b4:	45b1      	cmp	r9, r6
   876b6:	f240 8089 	bls.w	877cc <__udivmoddi4+0x2c8>
   876ba:	3902      	subs	r1, #2
   876bc:	443e      	add	r6, r7
   876be:	eba6 0609 	sub.w	r6, r6, r9
   876c2:	fbb6 f0fc 	udiv	r0, r6, ip
   876c6:	fb0c 6210 	mls	r2, ip, r0, r6
   876ca:	fb00 f908 	mul.w	r9, r0, r8
   876ce:	b29e      	uxth	r6, r3
   876d0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   876d4:	45b1      	cmp	r9, r6
   876d6:	d907      	bls.n	876e8 <__udivmoddi4+0x1e4>
   876d8:	19f6      	adds	r6, r6, r7
   876da:	f100 33ff 	add.w	r3, r0, #4294967295
   876de:	d271      	bcs.n	877c4 <__udivmoddi4+0x2c0>
   876e0:	45b1      	cmp	r9, r6
   876e2:	d96f      	bls.n	877c4 <__udivmoddi4+0x2c0>
   876e4:	3802      	subs	r0, #2
   876e6:	443e      	add	r6, r7
   876e8:	eba6 0609 	sub.w	r6, r6, r9
   876ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   876f0:	e78f      	b.n	87612 <__udivmoddi4+0x10e>
   876f2:	f1c1 0720 	rsb	r7, r1, #32
   876f6:	fa22 f807 	lsr.w	r8, r2, r7
   876fa:	408b      	lsls	r3, r1
   876fc:	ea48 0303 	orr.w	r3, r8, r3
   87700:	fa26 f407 	lsr.w	r4, r6, r7
   87704:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   87708:	fbb4 f9fe 	udiv	r9, r4, lr
   8770c:	fa1f fc83 	uxth.w	ip, r3
   87710:	fb0e 4419 	mls	r4, lr, r9, r4
   87714:	408e      	lsls	r6, r1
   87716:	fa20 f807 	lsr.w	r8, r0, r7
   8771a:	fb09 fa0c 	mul.w	sl, r9, ip
   8771e:	ea48 0806 	orr.w	r8, r8, r6
   87722:	ea4f 4618 	mov.w	r6, r8, lsr #16
   87726:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8772a:	45a2      	cmp	sl, r4
   8772c:	fa02 f201 	lsl.w	r2, r2, r1
   87730:	fa00 f601 	lsl.w	r6, r0, r1
   87734:	d908      	bls.n	87748 <__udivmoddi4+0x244>
   87736:	18e4      	adds	r4, r4, r3
   87738:	f109 30ff 	add.w	r0, r9, #4294967295
   8773c:	d244      	bcs.n	877c8 <__udivmoddi4+0x2c4>
   8773e:	45a2      	cmp	sl, r4
   87740:	d942      	bls.n	877c8 <__udivmoddi4+0x2c4>
   87742:	f1a9 0902 	sub.w	r9, r9, #2
   87746:	441c      	add	r4, r3
   87748:	eba4 040a 	sub.w	r4, r4, sl
   8774c:	fbb4 f0fe 	udiv	r0, r4, lr
   87750:	fb0e 4410 	mls	r4, lr, r0, r4
   87754:	fb00 fc0c 	mul.w	ip, r0, ip
   87758:	fa1f f888 	uxth.w	r8, r8
   8775c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   87760:	45a4      	cmp	ip, r4
   87762:	d907      	bls.n	87774 <__udivmoddi4+0x270>
   87764:	18e4      	adds	r4, r4, r3
   87766:	f100 3eff 	add.w	lr, r0, #4294967295
   8776a:	d229      	bcs.n	877c0 <__udivmoddi4+0x2bc>
   8776c:	45a4      	cmp	ip, r4
   8776e:	d927      	bls.n	877c0 <__udivmoddi4+0x2bc>
   87770:	3802      	subs	r0, #2
   87772:	441c      	add	r4, r3
   87774:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   87778:	fba0 8902 	umull	r8, r9, r0, r2
   8777c:	eba4 0c0c 	sub.w	ip, r4, ip
   87780:	45cc      	cmp	ip, r9
   87782:	46c2      	mov	sl, r8
   87784:	46ce      	mov	lr, r9
   87786:	d315      	bcc.n	877b4 <__udivmoddi4+0x2b0>
   87788:	d012      	beq.n	877b0 <__udivmoddi4+0x2ac>
   8778a:	b155      	cbz	r5, 877a2 <__udivmoddi4+0x29e>
   8778c:	ebb6 030a 	subs.w	r3, r6, sl
   87790:	eb6c 060e 	sbc.w	r6, ip, lr
   87794:	fa06 f707 	lsl.w	r7, r6, r7
   87798:	40cb      	lsrs	r3, r1
   8779a:	431f      	orrs	r7, r3
   8779c:	40ce      	lsrs	r6, r1
   8779e:	602f      	str	r7, [r5, #0]
   877a0:	606e      	str	r6, [r5, #4]
   877a2:	2100      	movs	r1, #0
   877a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   877a8:	4610      	mov	r0, r2
   877aa:	e6f7      	b.n	8759c <__udivmoddi4+0x98>
   877ac:	4689      	mov	r9, r1
   877ae:	e6de      	b.n	8756e <__udivmoddi4+0x6a>
   877b0:	4546      	cmp	r6, r8
   877b2:	d2ea      	bcs.n	8778a <__udivmoddi4+0x286>
   877b4:	ebb8 0a02 	subs.w	sl, r8, r2
   877b8:	eb69 0e03 	sbc.w	lr, r9, r3
   877bc:	3801      	subs	r0, #1
   877be:	e7e4      	b.n	8778a <__udivmoddi4+0x286>
   877c0:	4670      	mov	r0, lr
   877c2:	e7d7      	b.n	87774 <__udivmoddi4+0x270>
   877c4:	4618      	mov	r0, r3
   877c6:	e78f      	b.n	876e8 <__udivmoddi4+0x1e4>
   877c8:	4681      	mov	r9, r0
   877ca:	e7bd      	b.n	87748 <__udivmoddi4+0x244>
   877cc:	4611      	mov	r1, r2
   877ce:	e776      	b.n	876be <__udivmoddi4+0x1ba>
   877d0:	3802      	subs	r0, #2
   877d2:	443c      	add	r4, r7
   877d4:	e744      	b.n	87660 <__udivmoddi4+0x15c>
   877d6:	4608      	mov	r0, r1
   877d8:	e706      	b.n	875e8 <__udivmoddi4+0xe4>
   877da:	3a02      	subs	r2, #2
   877dc:	443e      	add	r6, r7
   877de:	e72b      	b.n	87638 <__udivmoddi4+0x134>

000877e0 <__aeabi_idiv0>:
   877e0:	4770      	bx	lr
   877e2:	bf00      	nop

000877e4 <__libc_init_array>:
   877e4:	b570      	push	{r4, r5, r6, lr}
   877e6:	4e0f      	ldr	r6, [pc, #60]	; (87824 <__libc_init_array+0x40>)
   877e8:	4d0f      	ldr	r5, [pc, #60]	; (87828 <__libc_init_array+0x44>)
   877ea:	1b76      	subs	r6, r6, r5
   877ec:	10b6      	asrs	r6, r6, #2
   877ee:	bf18      	it	ne
   877f0:	2400      	movne	r4, #0
   877f2:	d005      	beq.n	87800 <__libc_init_array+0x1c>
   877f4:	3401      	adds	r4, #1
   877f6:	f855 3b04 	ldr.w	r3, [r5], #4
   877fa:	4798      	blx	r3
   877fc:	42a6      	cmp	r6, r4
   877fe:	d1f9      	bne.n	877f4 <__libc_init_array+0x10>
   87800:	4e0a      	ldr	r6, [pc, #40]	; (8782c <__libc_init_array+0x48>)
   87802:	4d0b      	ldr	r5, [pc, #44]	; (87830 <__libc_init_array+0x4c>)
   87804:	f006 fad8 	bl	8ddb8 <_init>
   87808:	1b76      	subs	r6, r6, r5
   8780a:	10b6      	asrs	r6, r6, #2
   8780c:	bf18      	it	ne
   8780e:	2400      	movne	r4, #0
   87810:	d006      	beq.n	87820 <__libc_init_array+0x3c>
   87812:	3401      	adds	r4, #1
   87814:	f855 3b04 	ldr.w	r3, [r5], #4
   87818:	4798      	blx	r3
   8781a:	42a6      	cmp	r6, r4
   8781c:	d1f9      	bne.n	87812 <__libc_init_array+0x2e>
   8781e:	bd70      	pop	{r4, r5, r6, pc}
   87820:	bd70      	pop	{r4, r5, r6, pc}
   87822:	bf00      	nop
   87824:	0008ddc4 	.word	0x0008ddc4
   87828:	0008ddc4 	.word	0x0008ddc4
   8782c:	0008ddcc 	.word	0x0008ddcc
   87830:	0008ddc4 	.word	0x0008ddc4

00087834 <iprintf>:
   87834:	b40f      	push	{r0, r1, r2, r3}
   87836:	b510      	push	{r4, lr}
   87838:	4b07      	ldr	r3, [pc, #28]	; (87858 <iprintf+0x24>)
   8783a:	b082      	sub	sp, #8
   8783c:	ac04      	add	r4, sp, #16
   8783e:	f854 2b04 	ldr.w	r2, [r4], #4
   87842:	6818      	ldr	r0, [r3, #0]
   87844:	4623      	mov	r3, r4
   87846:	6881      	ldr	r1, [r0, #8]
   87848:	9401      	str	r4, [sp, #4]
   8784a:	f001 fc81 	bl	89150 <_vfiprintf_r>
   8784e:	b002      	add	sp, #8
   87850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   87854:	b004      	add	sp, #16
   87856:	4770      	bx	lr
   87858:	20000714 	.word	0x20000714

0008785c <memcpy>:
   8785c:	4684      	mov	ip, r0
   8785e:	ea41 0300 	orr.w	r3, r1, r0
   87862:	f013 0303 	ands.w	r3, r3, #3
   87866:	d149      	bne.n	878fc <memcpy+0xa0>
   87868:	3a40      	subs	r2, #64	; 0x40
   8786a:	d323      	bcc.n	878b4 <memcpy+0x58>
   8786c:	680b      	ldr	r3, [r1, #0]
   8786e:	6003      	str	r3, [r0, #0]
   87870:	684b      	ldr	r3, [r1, #4]
   87872:	6043      	str	r3, [r0, #4]
   87874:	688b      	ldr	r3, [r1, #8]
   87876:	6083      	str	r3, [r0, #8]
   87878:	68cb      	ldr	r3, [r1, #12]
   8787a:	60c3      	str	r3, [r0, #12]
   8787c:	690b      	ldr	r3, [r1, #16]
   8787e:	6103      	str	r3, [r0, #16]
   87880:	694b      	ldr	r3, [r1, #20]
   87882:	6143      	str	r3, [r0, #20]
   87884:	698b      	ldr	r3, [r1, #24]
   87886:	6183      	str	r3, [r0, #24]
   87888:	69cb      	ldr	r3, [r1, #28]
   8788a:	61c3      	str	r3, [r0, #28]
   8788c:	6a0b      	ldr	r3, [r1, #32]
   8788e:	6203      	str	r3, [r0, #32]
   87890:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87892:	6243      	str	r3, [r0, #36]	; 0x24
   87894:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87896:	6283      	str	r3, [r0, #40]	; 0x28
   87898:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8789a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8789c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8789e:	6303      	str	r3, [r0, #48]	; 0x30
   878a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   878a2:	6343      	str	r3, [r0, #52]	; 0x34
   878a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   878a6:	6383      	str	r3, [r0, #56]	; 0x38
   878a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   878aa:	63c3      	str	r3, [r0, #60]	; 0x3c
   878ac:	3040      	adds	r0, #64	; 0x40
   878ae:	3140      	adds	r1, #64	; 0x40
   878b0:	3a40      	subs	r2, #64	; 0x40
   878b2:	d2db      	bcs.n	8786c <memcpy+0x10>
   878b4:	3230      	adds	r2, #48	; 0x30
   878b6:	d30b      	bcc.n	878d0 <memcpy+0x74>
   878b8:	680b      	ldr	r3, [r1, #0]
   878ba:	6003      	str	r3, [r0, #0]
   878bc:	684b      	ldr	r3, [r1, #4]
   878be:	6043      	str	r3, [r0, #4]
   878c0:	688b      	ldr	r3, [r1, #8]
   878c2:	6083      	str	r3, [r0, #8]
   878c4:	68cb      	ldr	r3, [r1, #12]
   878c6:	60c3      	str	r3, [r0, #12]
   878c8:	3010      	adds	r0, #16
   878ca:	3110      	adds	r1, #16
   878cc:	3a10      	subs	r2, #16
   878ce:	d2f3      	bcs.n	878b8 <memcpy+0x5c>
   878d0:	320c      	adds	r2, #12
   878d2:	d305      	bcc.n	878e0 <memcpy+0x84>
   878d4:	f851 3b04 	ldr.w	r3, [r1], #4
   878d8:	f840 3b04 	str.w	r3, [r0], #4
   878dc:	3a04      	subs	r2, #4
   878de:	d2f9      	bcs.n	878d4 <memcpy+0x78>
   878e0:	3204      	adds	r2, #4
   878e2:	d008      	beq.n	878f6 <memcpy+0x9a>
   878e4:	07d2      	lsls	r2, r2, #31
   878e6:	bf1c      	itt	ne
   878e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   878ec:	f800 3b01 	strbne.w	r3, [r0], #1
   878f0:	d301      	bcc.n	878f6 <memcpy+0x9a>
   878f2:	880b      	ldrh	r3, [r1, #0]
   878f4:	8003      	strh	r3, [r0, #0]
   878f6:	4660      	mov	r0, ip
   878f8:	4770      	bx	lr
   878fa:	bf00      	nop
   878fc:	2a08      	cmp	r2, #8
   878fe:	d313      	bcc.n	87928 <memcpy+0xcc>
   87900:	078b      	lsls	r3, r1, #30
   87902:	d0b1      	beq.n	87868 <memcpy+0xc>
   87904:	f010 0303 	ands.w	r3, r0, #3
   87908:	d0ae      	beq.n	87868 <memcpy+0xc>
   8790a:	f1c3 0304 	rsb	r3, r3, #4
   8790e:	1ad2      	subs	r2, r2, r3
   87910:	07db      	lsls	r3, r3, #31
   87912:	bf1c      	itt	ne
   87914:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87918:	f800 3b01 	strbne.w	r3, [r0], #1
   8791c:	d3a4      	bcc.n	87868 <memcpy+0xc>
   8791e:	f831 3b02 	ldrh.w	r3, [r1], #2
   87922:	f820 3b02 	strh.w	r3, [r0], #2
   87926:	e79f      	b.n	87868 <memcpy+0xc>
   87928:	3a04      	subs	r2, #4
   8792a:	d3d9      	bcc.n	878e0 <memcpy+0x84>
   8792c:	3a01      	subs	r2, #1
   8792e:	f811 3b01 	ldrb.w	r3, [r1], #1
   87932:	f800 3b01 	strb.w	r3, [r0], #1
   87936:	d2f9      	bcs.n	8792c <memcpy+0xd0>
   87938:	780b      	ldrb	r3, [r1, #0]
   8793a:	7003      	strb	r3, [r0, #0]
   8793c:	784b      	ldrb	r3, [r1, #1]
   8793e:	7043      	strb	r3, [r0, #1]
   87940:	788b      	ldrb	r3, [r1, #2]
   87942:	7083      	strb	r3, [r0, #2]
   87944:	4660      	mov	r0, ip
   87946:	4770      	bx	lr

00087948 <memset>:
   87948:	b470      	push	{r4, r5, r6}
   8794a:	0786      	lsls	r6, r0, #30
   8794c:	d046      	beq.n	879dc <memset+0x94>
   8794e:	1e54      	subs	r4, r2, #1
   87950:	2a00      	cmp	r2, #0
   87952:	d041      	beq.n	879d8 <memset+0x90>
   87954:	b2ca      	uxtb	r2, r1
   87956:	4603      	mov	r3, r0
   87958:	e002      	b.n	87960 <memset+0x18>
   8795a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8795e:	d33b      	bcc.n	879d8 <memset+0x90>
   87960:	f803 2b01 	strb.w	r2, [r3], #1
   87964:	079d      	lsls	r5, r3, #30
   87966:	d1f8      	bne.n	8795a <memset+0x12>
   87968:	2c03      	cmp	r4, #3
   8796a:	d92e      	bls.n	879ca <memset+0x82>
   8796c:	b2cd      	uxtb	r5, r1
   8796e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   87972:	2c0f      	cmp	r4, #15
   87974:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   87978:	d919      	bls.n	879ae <memset+0x66>
   8797a:	4626      	mov	r6, r4
   8797c:	f103 0210 	add.w	r2, r3, #16
   87980:	3e10      	subs	r6, #16
   87982:	2e0f      	cmp	r6, #15
   87984:	f842 5c10 	str.w	r5, [r2, #-16]
   87988:	f842 5c0c 	str.w	r5, [r2, #-12]
   8798c:	f842 5c08 	str.w	r5, [r2, #-8]
   87990:	f842 5c04 	str.w	r5, [r2, #-4]
   87994:	f102 0210 	add.w	r2, r2, #16
   87998:	d8f2      	bhi.n	87980 <memset+0x38>
   8799a:	f1a4 0210 	sub.w	r2, r4, #16
   8799e:	f022 020f 	bic.w	r2, r2, #15
   879a2:	f004 040f 	and.w	r4, r4, #15
   879a6:	3210      	adds	r2, #16
   879a8:	2c03      	cmp	r4, #3
   879aa:	4413      	add	r3, r2
   879ac:	d90d      	bls.n	879ca <memset+0x82>
   879ae:	461e      	mov	r6, r3
   879b0:	4622      	mov	r2, r4
   879b2:	3a04      	subs	r2, #4
   879b4:	2a03      	cmp	r2, #3
   879b6:	f846 5b04 	str.w	r5, [r6], #4
   879ba:	d8fa      	bhi.n	879b2 <memset+0x6a>
   879bc:	1f22      	subs	r2, r4, #4
   879be:	f022 0203 	bic.w	r2, r2, #3
   879c2:	3204      	adds	r2, #4
   879c4:	4413      	add	r3, r2
   879c6:	f004 0403 	and.w	r4, r4, #3
   879ca:	b12c      	cbz	r4, 879d8 <memset+0x90>
   879cc:	b2c9      	uxtb	r1, r1
   879ce:	441c      	add	r4, r3
   879d0:	f803 1b01 	strb.w	r1, [r3], #1
   879d4:	429c      	cmp	r4, r3
   879d6:	d1fb      	bne.n	879d0 <memset+0x88>
   879d8:	bc70      	pop	{r4, r5, r6}
   879da:	4770      	bx	lr
   879dc:	4614      	mov	r4, r2
   879de:	4603      	mov	r3, r0
   879e0:	e7c2      	b.n	87968 <memset+0x20>
   879e2:	bf00      	nop

000879e4 <setbuf>:
   879e4:	2900      	cmp	r1, #0
   879e6:	bf0c      	ite	eq
   879e8:	2202      	moveq	r2, #2
   879ea:	2200      	movne	r2, #0
   879ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   879f0:	f000 b800 	b.w	879f4 <setvbuf>

000879f4 <setvbuf>:
   879f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   879f8:	4d61      	ldr	r5, [pc, #388]	; (87b80 <setvbuf+0x18c>)
   879fa:	b083      	sub	sp, #12
   879fc:	682d      	ldr	r5, [r5, #0]
   879fe:	4604      	mov	r4, r0
   87a00:	460f      	mov	r7, r1
   87a02:	4690      	mov	r8, r2
   87a04:	461e      	mov	r6, r3
   87a06:	b115      	cbz	r5, 87a0e <setvbuf+0x1a>
   87a08:	6bab      	ldr	r3, [r5, #56]	; 0x38
   87a0a:	2b00      	cmp	r3, #0
   87a0c:	d064      	beq.n	87ad8 <setvbuf+0xe4>
   87a0e:	f1b8 0f02 	cmp.w	r8, #2
   87a12:	d006      	beq.n	87a22 <setvbuf+0x2e>
   87a14:	f1b8 0f01 	cmp.w	r8, #1
   87a18:	f200 809f 	bhi.w	87b5a <setvbuf+0x166>
   87a1c:	2e00      	cmp	r6, #0
   87a1e:	f2c0 809c 	blt.w	87b5a <setvbuf+0x166>
   87a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87a24:	07d8      	lsls	r0, r3, #31
   87a26:	d534      	bpl.n	87a92 <setvbuf+0x9e>
   87a28:	4621      	mov	r1, r4
   87a2a:	4628      	mov	r0, r5
   87a2c:	f003 fade 	bl	8afec <_fflush_r>
   87a30:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87a32:	b141      	cbz	r1, 87a46 <setvbuf+0x52>
   87a34:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87a38:	4299      	cmp	r1, r3
   87a3a:	d002      	beq.n	87a42 <setvbuf+0x4e>
   87a3c:	4628      	mov	r0, r5
   87a3e:	f003 fc53 	bl	8b2e8 <_free_r>
   87a42:	2300      	movs	r3, #0
   87a44:	6323      	str	r3, [r4, #48]	; 0x30
   87a46:	2200      	movs	r2, #0
   87a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87a4c:	61a2      	str	r2, [r4, #24]
   87a4e:	6062      	str	r2, [r4, #4]
   87a50:	061a      	lsls	r2, r3, #24
   87a52:	d43a      	bmi.n	87aca <setvbuf+0xd6>
   87a54:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   87a58:	f023 0303 	bic.w	r3, r3, #3
   87a5c:	f1b8 0f02 	cmp.w	r8, #2
   87a60:	81a3      	strh	r3, [r4, #12]
   87a62:	d01d      	beq.n	87aa0 <setvbuf+0xac>
   87a64:	ab01      	add	r3, sp, #4
   87a66:	466a      	mov	r2, sp
   87a68:	4621      	mov	r1, r4
   87a6a:	4628      	mov	r0, r5
   87a6c:	f003 fee8 	bl	8b840 <__swhatbuf_r>
   87a70:	89a3      	ldrh	r3, [r4, #12]
   87a72:	4318      	orrs	r0, r3
   87a74:	81a0      	strh	r0, [r4, #12]
   87a76:	2e00      	cmp	r6, #0
   87a78:	d132      	bne.n	87ae0 <setvbuf+0xec>
   87a7a:	9e00      	ldr	r6, [sp, #0]
   87a7c:	4630      	mov	r0, r6
   87a7e:	f003 ff57 	bl	8b930 <malloc>
   87a82:	4607      	mov	r7, r0
   87a84:	2800      	cmp	r0, #0
   87a86:	d06b      	beq.n	87b60 <setvbuf+0x16c>
   87a88:	89a3      	ldrh	r3, [r4, #12]
   87a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87a8e:	81a3      	strh	r3, [r4, #12]
   87a90:	e028      	b.n	87ae4 <setvbuf+0xf0>
   87a92:	89a3      	ldrh	r3, [r4, #12]
   87a94:	0599      	lsls	r1, r3, #22
   87a96:	d4c7      	bmi.n	87a28 <setvbuf+0x34>
   87a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87a9a:	f003 fecd 	bl	8b838 <__retarget_lock_acquire_recursive>
   87a9e:	e7c3      	b.n	87a28 <setvbuf+0x34>
   87aa0:	2500      	movs	r5, #0
   87aa2:	2600      	movs	r6, #0
   87aa4:	2001      	movs	r0, #1
   87aa6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   87aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   87aac:	f043 0302 	orr.w	r3, r3, #2
   87ab0:	60a6      	str	r6, [r4, #8]
   87ab2:	07ce      	lsls	r6, r1, #31
   87ab4:	81a3      	strh	r3, [r4, #12]
   87ab6:	6160      	str	r0, [r4, #20]
   87ab8:	6022      	str	r2, [r4, #0]
   87aba:	6122      	str	r2, [r4, #16]
   87abc:	d401      	bmi.n	87ac2 <setvbuf+0xce>
   87abe:	0598      	lsls	r0, r3, #22
   87ac0:	d53e      	bpl.n	87b40 <setvbuf+0x14c>
   87ac2:	4628      	mov	r0, r5
   87ac4:	b003      	add	sp, #12
   87ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87aca:	6921      	ldr	r1, [r4, #16]
   87acc:	4628      	mov	r0, r5
   87ace:	f003 fc0b 	bl	8b2e8 <_free_r>
   87ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87ad6:	e7bd      	b.n	87a54 <setvbuf+0x60>
   87ad8:	4628      	mov	r0, r5
   87ada:	f003 fadf 	bl	8b09c <__sinit>
   87ade:	e796      	b.n	87a0e <setvbuf+0x1a>
   87ae0:	2f00      	cmp	r7, #0
   87ae2:	d0cb      	beq.n	87a7c <setvbuf+0x88>
   87ae4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   87ae6:	2b00      	cmp	r3, #0
   87ae8:	d033      	beq.n	87b52 <setvbuf+0x15e>
   87aea:	9b00      	ldr	r3, [sp, #0]
   87aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   87af0:	429e      	cmp	r6, r3
   87af2:	bf1c      	itt	ne
   87af4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   87af8:	81a2      	strhne	r2, [r4, #12]
   87afa:	f1b8 0f01 	cmp.w	r8, #1
   87afe:	bf04      	itt	eq
   87b00:	f042 0201 	orreq.w	r2, r2, #1
   87b04:	81a2      	strheq	r2, [r4, #12]
   87b06:	b292      	uxth	r2, r2
   87b08:	f012 0308 	ands.w	r3, r2, #8
   87b0c:	6027      	str	r7, [r4, #0]
   87b0e:	6127      	str	r7, [r4, #16]
   87b10:	6166      	str	r6, [r4, #20]
   87b12:	d00e      	beq.n	87b32 <setvbuf+0x13e>
   87b14:	07d1      	lsls	r1, r2, #31
   87b16:	d51a      	bpl.n	87b4e <setvbuf+0x15a>
   87b18:	2300      	movs	r3, #0
   87b1a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   87b1c:	4276      	negs	r6, r6
   87b1e:	f015 0501 	ands.w	r5, r5, #1
   87b22:	61a6      	str	r6, [r4, #24]
   87b24:	60a3      	str	r3, [r4, #8]
   87b26:	d009      	beq.n	87b3c <setvbuf+0x148>
   87b28:	2500      	movs	r5, #0
   87b2a:	4628      	mov	r0, r5
   87b2c:	b003      	add	sp, #12
   87b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87b32:	60a3      	str	r3, [r4, #8]
   87b34:	6e65      	ldr	r5, [r4, #100]	; 0x64
   87b36:	f015 0501 	ands.w	r5, r5, #1
   87b3a:	d1f5      	bne.n	87b28 <setvbuf+0x134>
   87b3c:	0593      	lsls	r3, r2, #22
   87b3e:	d4c0      	bmi.n	87ac2 <setvbuf+0xce>
   87b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87b42:	f003 fe7b 	bl	8b83c <__retarget_lock_release_recursive>
   87b46:	4628      	mov	r0, r5
   87b48:	b003      	add	sp, #12
   87b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87b4e:	60a6      	str	r6, [r4, #8]
   87b50:	e7f0      	b.n	87b34 <setvbuf+0x140>
   87b52:	4628      	mov	r0, r5
   87b54:	f003 faa2 	bl	8b09c <__sinit>
   87b58:	e7c7      	b.n	87aea <setvbuf+0xf6>
   87b5a:	f04f 35ff 	mov.w	r5, #4294967295
   87b5e:	e7b0      	b.n	87ac2 <setvbuf+0xce>
   87b60:	f8dd 9000 	ldr.w	r9, [sp]
   87b64:	45b1      	cmp	r9, r6
   87b66:	d004      	beq.n	87b72 <setvbuf+0x17e>
   87b68:	4648      	mov	r0, r9
   87b6a:	f003 fee1 	bl	8b930 <malloc>
   87b6e:	4607      	mov	r7, r0
   87b70:	b920      	cbnz	r0, 87b7c <setvbuf+0x188>
   87b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87b76:	f04f 35ff 	mov.w	r5, #4294967295
   87b7a:	e792      	b.n	87aa2 <setvbuf+0xae>
   87b7c:	464e      	mov	r6, r9
   87b7e:	e783      	b.n	87a88 <setvbuf+0x94>
   87b80:	20000714 	.word	0x20000714

00087b84 <sprintf>:
   87b84:	b40e      	push	{r1, r2, r3}
   87b86:	4601      	mov	r1, r0
   87b88:	b5f0      	push	{r4, r5, r6, r7, lr}
   87b8a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   87b8e:	f44f 7702 	mov.w	r7, #520	; 0x208
   87b92:	f64f 76ff 	movw	r6, #65535	; 0xffff
   87b96:	b09c      	sub	sp, #112	; 0x70
   87b98:	ac21      	add	r4, sp, #132	; 0x84
   87b9a:	f854 2b04 	ldr.w	r2, [r4], #4
   87b9e:	4b0b      	ldr	r3, [pc, #44]	; (87bcc <sprintf+0x48>)
   87ba0:	9102      	str	r1, [sp, #8]
   87ba2:	9106      	str	r1, [sp, #24]
   87ba4:	6818      	ldr	r0, [r3, #0]
   87ba6:	a902      	add	r1, sp, #8
   87ba8:	4623      	mov	r3, r4
   87baa:	9401      	str	r4, [sp, #4]
   87bac:	f8ad 7014 	strh.w	r7, [sp, #20]
   87bb0:	9504      	str	r5, [sp, #16]
   87bb2:	9507      	str	r5, [sp, #28]
   87bb4:	f8ad 6016 	strh.w	r6, [sp, #22]
   87bb8:	f000 f80a 	bl	87bd0 <_svfprintf_r>
   87bbc:	2200      	movs	r2, #0
   87bbe:	9b02      	ldr	r3, [sp, #8]
   87bc0:	701a      	strb	r2, [r3, #0]
   87bc2:	b01c      	add	sp, #112	; 0x70
   87bc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   87bc8:	b003      	add	sp, #12
   87bca:	4770      	bx	lr
   87bcc:	20000714 	.word	0x20000714

00087bd0 <_svfprintf_r>:
   87bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87bd4:	b0c3      	sub	sp, #268	; 0x10c
   87bd6:	460c      	mov	r4, r1
   87bd8:	910b      	str	r1, [sp, #44]	; 0x2c
   87bda:	4692      	mov	sl, r2
   87bdc:	930f      	str	r3, [sp, #60]	; 0x3c
   87bde:	900c      	str	r0, [sp, #48]	; 0x30
   87be0:	f003 fe18 	bl	8b814 <_localeconv_r>
   87be4:	6803      	ldr	r3, [r0, #0]
   87be6:	4618      	mov	r0, r3
   87be8:	931a      	str	r3, [sp, #104]	; 0x68
   87bea:	f004 ff1f 	bl	8ca2c <strlen>
   87bee:	89a3      	ldrh	r3, [r4, #12]
   87bf0:	9019      	str	r0, [sp, #100]	; 0x64
   87bf2:	0619      	lsls	r1, r3, #24
   87bf4:	d503      	bpl.n	87bfe <_svfprintf_r+0x2e>
   87bf6:	6923      	ldr	r3, [r4, #16]
   87bf8:	2b00      	cmp	r3, #0
   87bfa:	f001 8035 	beq.w	88c68 <_svfprintf_r+0x1098>
   87bfe:	2300      	movs	r3, #0
   87c00:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   87c04:	46c8      	mov	r8, r9
   87c06:	9315      	str	r3, [sp, #84]	; 0x54
   87c08:	9313      	str	r3, [sp, #76]	; 0x4c
   87c0a:	9314      	str	r3, [sp, #80]	; 0x50
   87c0c:	9318      	str	r3, [sp, #96]	; 0x60
   87c0e:	931b      	str	r3, [sp, #108]	; 0x6c
   87c10:	9309      	str	r3, [sp, #36]	; 0x24
   87c12:	9316      	str	r3, [sp, #88]	; 0x58
   87c14:	9317      	str	r3, [sp, #92]	; 0x5c
   87c16:	9327      	str	r3, [sp, #156]	; 0x9c
   87c18:	9326      	str	r3, [sp, #152]	; 0x98
   87c1a:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   87c1e:	f89a 3000 	ldrb.w	r3, [sl]
   87c22:	4654      	mov	r4, sl
   87c24:	b1eb      	cbz	r3, 87c62 <_svfprintf_r+0x92>
   87c26:	2b25      	cmp	r3, #37	; 0x25
   87c28:	d102      	bne.n	87c30 <_svfprintf_r+0x60>
   87c2a:	e01a      	b.n	87c62 <_svfprintf_r+0x92>
   87c2c:	2b25      	cmp	r3, #37	; 0x25
   87c2e:	d003      	beq.n	87c38 <_svfprintf_r+0x68>
   87c30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87c34:	2b00      	cmp	r3, #0
   87c36:	d1f9      	bne.n	87c2c <_svfprintf_r+0x5c>
   87c38:	eba4 050a 	sub.w	r5, r4, sl
   87c3c:	b18d      	cbz	r5, 87c62 <_svfprintf_r+0x92>
   87c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87c40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87c42:	3301      	adds	r3, #1
   87c44:	442a      	add	r2, r5
   87c46:	2b07      	cmp	r3, #7
   87c48:	f8c8 a000 	str.w	sl, [r8]
   87c4c:	f8c8 5004 	str.w	r5, [r8, #4]
   87c50:	9227      	str	r2, [sp, #156]	; 0x9c
   87c52:	9326      	str	r3, [sp, #152]	; 0x98
   87c54:	f300 808a 	bgt.w	87d6c <_svfprintf_r+0x19c>
   87c58:	f108 0808 	add.w	r8, r8, #8
   87c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87c5e:	442b      	add	r3, r5
   87c60:	9309      	str	r3, [sp, #36]	; 0x24
   87c62:	7823      	ldrb	r3, [r4, #0]
   87c64:	2b00      	cmp	r3, #0
   87c66:	f000 8089 	beq.w	87d7c <_svfprintf_r+0x1ac>
   87c6a:	2300      	movs	r3, #0
   87c6c:	f04f 30ff 	mov.w	r0, #4294967295
   87c70:	461a      	mov	r2, r3
   87c72:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   87c76:	4619      	mov	r1, r3
   87c78:	930d      	str	r3, [sp, #52]	; 0x34
   87c7a:	469b      	mov	fp, r3
   87c7c:	7863      	ldrb	r3, [r4, #1]
   87c7e:	f104 0a01 	add.w	sl, r4, #1
   87c82:	900a      	str	r0, [sp, #40]	; 0x28
   87c84:	f10a 0a01 	add.w	sl, sl, #1
   87c88:	f1a3 0020 	sub.w	r0, r3, #32
   87c8c:	2858      	cmp	r0, #88	; 0x58
   87c8e:	f200 83b7 	bhi.w	88400 <_svfprintf_r+0x830>
   87c92:	e8df f010 	tbh	[pc, r0, lsl #1]
   87c96:	034c      	.short	0x034c
   87c98:	03b503b5 	.word	0x03b503b5
   87c9c:	03b50354 	.word	0x03b50354
   87ca0:	03b503b5 	.word	0x03b503b5
   87ca4:	03b503b5 	.word	0x03b503b5
   87ca8:	005903b5 	.word	0x005903b5
   87cac:	03b50359 	.word	0x03b50359
   87cb0:	02140066 	.word	0x02140066
   87cb4:	022f03b5 	.word	0x022f03b5
   87cb8:	03a503a5 	.word	0x03a503a5
   87cbc:	03a503a5 	.word	0x03a503a5
   87cc0:	03a503a5 	.word	0x03a503a5
   87cc4:	03a503a5 	.word	0x03a503a5
   87cc8:	03b503a5 	.word	0x03b503a5
   87ccc:	03b503b5 	.word	0x03b503b5
   87cd0:	03b503b5 	.word	0x03b503b5
   87cd4:	03b503b5 	.word	0x03b503b5
   87cd8:	03b503b5 	.word	0x03b503b5
   87cdc:	028b03b5 	.word	0x028b03b5
   87ce0:	03b502d3 	.word	0x03b502d3
   87ce4:	03b502d3 	.word	0x03b502d3
   87ce8:	03b503b5 	.word	0x03b503b5
   87cec:	031b03b5 	.word	0x031b03b5
   87cf0:	03b503b5 	.word	0x03b503b5
   87cf4:	03b50320 	.word	0x03b50320
   87cf8:	03b503b5 	.word	0x03b503b5
   87cfc:	03b503b5 	.word	0x03b503b5
   87d00:	03b50234 	.word	0x03b50234
   87d04:	024b03b5 	.word	0x024b03b5
   87d08:	03b503b5 	.word	0x03b503b5
   87d0c:	03b503b5 	.word	0x03b503b5
   87d10:	03b503b5 	.word	0x03b503b5
   87d14:	03b503b5 	.word	0x03b503b5
   87d18:	03b503b5 	.word	0x03b503b5
   87d1c:	039e0276 	.word	0x039e0276
   87d20:	02d302d3 	.word	0x02d302d3
   87d24:	036302d3 	.word	0x036302d3
   87d28:	03b5039e 	.word	0x03b5039e
   87d2c:	036803b5 	.word	0x036803b5
   87d30:	037503b5 	.word	0x037503b5
   87d34:	038c01dd 	.word	0x038c01dd
   87d38:	03b5035e 	.word	0x03b5035e
   87d3c:	03b501f2 	.word	0x03b501f2
   87d40:	03b50087 	.word	0x03b50087
   87d44:	033203b5 	.word	0x033203b5
   87d48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87d4a:	6823      	ldr	r3, [r4, #0]
   87d4c:	4618      	mov	r0, r3
   87d4e:	930d      	str	r3, [sp, #52]	; 0x34
   87d50:	4623      	mov	r3, r4
   87d52:	2800      	cmp	r0, #0
   87d54:	f103 0304 	add.w	r3, r3, #4
   87d58:	930f      	str	r3, [sp, #60]	; 0x3c
   87d5a:	da04      	bge.n	87d66 <_svfprintf_r+0x196>
   87d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87d5e:	425b      	negs	r3, r3
   87d60:	930d      	str	r3, [sp, #52]	; 0x34
   87d62:	f04b 0b04 	orr.w	fp, fp, #4
   87d66:	f89a 3000 	ldrb.w	r3, [sl]
   87d6a:	e78b      	b.n	87c84 <_svfprintf_r+0xb4>
   87d6c:	aa25      	add	r2, sp, #148	; 0x94
   87d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87d70:	980c      	ldr	r0, [sp, #48]	; 0x30
   87d72:	f004 fe89 	bl	8ca88 <__ssprint_r>
   87d76:	b940      	cbnz	r0, 87d8a <_svfprintf_r+0x1ba>
   87d78:	46c8      	mov	r8, r9
   87d7a:	e76f      	b.n	87c5c <_svfprintf_r+0x8c>
   87d7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   87d7e:	b123      	cbz	r3, 87d8a <_svfprintf_r+0x1ba>
   87d80:	980c      	ldr	r0, [sp, #48]	; 0x30
   87d82:	aa25      	add	r2, sp, #148	; 0x94
   87d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87d86:	f004 fe7f 	bl	8ca88 <__ssprint_r>
   87d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87d8c:	899b      	ldrh	r3, [r3, #12]
   87d8e:	f013 0f40 	tst.w	r3, #64	; 0x40
   87d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87d94:	bf18      	it	ne
   87d96:	f04f 33ff 	movne.w	r3, #4294967295
   87d9a:	9309      	str	r3, [sp, #36]	; 0x24
   87d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
   87d9e:	b043      	add	sp, #268	; 0x10c
   87da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87da4:	f01b 0f20 	tst.w	fp, #32
   87da8:	9311      	str	r3, [sp, #68]	; 0x44
   87daa:	f040 81af 	bne.w	8810c <_svfprintf_r+0x53c>
   87dae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87db0:	f01b 0f10 	tst.w	fp, #16
   87db4:	4613      	mov	r3, r2
   87db6:	f040 859a 	bne.w	888ee <_svfprintf_r+0xd1e>
   87dba:	f01b 0f40 	tst.w	fp, #64	; 0x40
   87dbe:	f000 8596 	beq.w	888ee <_svfprintf_r+0xd1e>
   87dc2:	2500      	movs	r5, #0
   87dc4:	2301      	movs	r3, #1
   87dc6:	8814      	ldrh	r4, [r2, #0]
   87dc8:	3204      	adds	r2, #4
   87dca:	920f      	str	r2, [sp, #60]	; 0x3c
   87dcc:	2200      	movs	r2, #0
   87dce:	4617      	mov	r7, r2
   87dd0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   87dd4:	990a      	ldr	r1, [sp, #40]	; 0x28
   87dd6:	1c4a      	adds	r2, r1, #1
   87dd8:	f000 8210 	beq.w	881fc <_svfprintf_r+0x62c>
   87ddc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   87de0:	9207      	str	r2, [sp, #28]
   87de2:	ea54 0205 	orrs.w	r2, r4, r5
   87de6:	f040 820f 	bne.w	88208 <_svfprintf_r+0x638>
   87dea:	2900      	cmp	r1, #0
   87dec:	f040 8431 	bne.w	88652 <_svfprintf_r+0xa82>
   87df0:	2b00      	cmp	r3, #0
   87df2:	f040 8539 	bne.w	88868 <_svfprintf_r+0xc98>
   87df6:	f01b 0301 	ands.w	r3, fp, #1
   87dfa:	930e      	str	r3, [sp, #56]	; 0x38
   87dfc:	f000 8662 	beq.w	88ac4 <_svfprintf_r+0xef4>
   87e00:	2330      	movs	r3, #48	; 0x30
   87e02:	ae42      	add	r6, sp, #264	; 0x108
   87e04:	f806 3d41 	strb.w	r3, [r6, #-65]!
   87e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87e0c:	4293      	cmp	r3, r2
   87e0e:	bfb8      	it	lt
   87e10:	4613      	movlt	r3, r2
   87e12:	9308      	str	r3, [sp, #32]
   87e14:	2300      	movs	r3, #0
   87e16:	9312      	str	r3, [sp, #72]	; 0x48
   87e18:	b117      	cbz	r7, 87e20 <_svfprintf_r+0x250>
   87e1a:	9b08      	ldr	r3, [sp, #32]
   87e1c:	3301      	adds	r3, #1
   87e1e:	9308      	str	r3, [sp, #32]
   87e20:	9b07      	ldr	r3, [sp, #28]
   87e22:	f013 0302 	ands.w	r3, r3, #2
   87e26:	9310      	str	r3, [sp, #64]	; 0x40
   87e28:	d002      	beq.n	87e30 <_svfprintf_r+0x260>
   87e2a:	9b08      	ldr	r3, [sp, #32]
   87e2c:	3302      	adds	r3, #2
   87e2e:	9308      	str	r3, [sp, #32]
   87e30:	9b07      	ldr	r3, [sp, #28]
   87e32:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   87e36:	f040 8310 	bne.w	8845a <_svfprintf_r+0x88a>
   87e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87e3c:	9a08      	ldr	r2, [sp, #32]
   87e3e:	eba3 0b02 	sub.w	fp, r3, r2
   87e42:	f1bb 0f00 	cmp.w	fp, #0
   87e46:	f340 8308 	ble.w	8845a <_svfprintf_r+0x88a>
   87e4a:	f1bb 0f10 	cmp.w	fp, #16
   87e4e:	f340 87b2 	ble.w	88db6 <_svfprintf_r+0x11e6>
   87e52:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87e54:	4643      	mov	r3, r8
   87e56:	4621      	mov	r1, r4
   87e58:	46a8      	mov	r8, r5
   87e5a:	2710      	movs	r7, #16
   87e5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87e5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87e60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87e62:	e006      	b.n	87e72 <_svfprintf_r+0x2a2>
   87e64:	f1ab 0b10 	sub.w	fp, fp, #16
   87e68:	f1bb 0f10 	cmp.w	fp, #16
   87e6c:	f103 0308 	add.w	r3, r3, #8
   87e70:	dd18      	ble.n	87ea4 <_svfprintf_r+0x2d4>
   87e72:	3201      	adds	r2, #1
   87e74:	48ab      	ldr	r0, [pc, #684]	; (88124 <_svfprintf_r+0x554>)
   87e76:	3110      	adds	r1, #16
   87e78:	2a07      	cmp	r2, #7
   87e7a:	9127      	str	r1, [sp, #156]	; 0x9c
   87e7c:	9226      	str	r2, [sp, #152]	; 0x98
   87e7e:	e883 0081 	stmia.w	r3, {r0, r7}
   87e82:	ddef      	ble.n	87e64 <_svfprintf_r+0x294>
   87e84:	aa25      	add	r2, sp, #148	; 0x94
   87e86:	4629      	mov	r1, r5
   87e88:	4620      	mov	r0, r4
   87e8a:	f004 fdfd 	bl	8ca88 <__ssprint_r>
   87e8e:	2800      	cmp	r0, #0
   87e90:	f47f af7b 	bne.w	87d8a <_svfprintf_r+0x1ba>
   87e94:	f1ab 0b10 	sub.w	fp, fp, #16
   87e98:	f1bb 0f10 	cmp.w	fp, #16
   87e9c:	464b      	mov	r3, r9
   87e9e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87ea0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87ea2:	dce6      	bgt.n	87e72 <_svfprintf_r+0x2a2>
   87ea4:	4645      	mov	r5, r8
   87ea6:	460c      	mov	r4, r1
   87ea8:	4698      	mov	r8, r3
   87eaa:	3201      	adds	r2, #1
   87eac:	4b9d      	ldr	r3, [pc, #628]	; (88124 <_svfprintf_r+0x554>)
   87eae:	445c      	add	r4, fp
   87eb0:	2a07      	cmp	r2, #7
   87eb2:	9427      	str	r4, [sp, #156]	; 0x9c
   87eb4:	9226      	str	r2, [sp, #152]	; 0x98
   87eb6:	e888 0808 	stmia.w	r8, {r3, fp}
   87eba:	f300 82c3 	bgt.w	88444 <_svfprintf_r+0x874>
   87ebe:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87ec2:	f108 0808 	add.w	r8, r8, #8
   87ec6:	b187      	cbz	r7, 87eea <_svfprintf_r+0x31a>
   87ec8:	2101      	movs	r1, #1
   87eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ecc:	440c      	add	r4, r1
   87ece:	440b      	add	r3, r1
   87ed0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   87ed4:	2b07      	cmp	r3, #7
   87ed6:	9427      	str	r4, [sp, #156]	; 0x9c
   87ed8:	9326      	str	r3, [sp, #152]	; 0x98
   87eda:	f8c8 1004 	str.w	r1, [r8, #4]
   87ede:	f8c8 2000 	str.w	r2, [r8]
   87ee2:	f300 83cd 	bgt.w	88680 <_svfprintf_r+0xab0>
   87ee6:	f108 0808 	add.w	r8, r8, #8
   87eea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87eec:	b17b      	cbz	r3, 87f0e <_svfprintf_r+0x33e>
   87eee:	2102      	movs	r1, #2
   87ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ef2:	440c      	add	r4, r1
   87ef4:	3301      	adds	r3, #1
   87ef6:	aa1e      	add	r2, sp, #120	; 0x78
   87ef8:	2b07      	cmp	r3, #7
   87efa:	9427      	str	r4, [sp, #156]	; 0x9c
   87efc:	9326      	str	r3, [sp, #152]	; 0x98
   87efe:	f8c8 1004 	str.w	r1, [r8, #4]
   87f02:	f8c8 2000 	str.w	r2, [r8]
   87f06:	f300 8411 	bgt.w	8872c <_svfprintf_r+0xb5c>
   87f0a:	f108 0808 	add.w	r8, r8, #8
   87f0e:	2d80      	cmp	r5, #128	; 0x80
   87f10:	f000 8304 	beq.w	8851c <_svfprintf_r+0x94c>
   87f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87f18:	1a9f      	subs	r7, r3, r2
   87f1a:	2f00      	cmp	r7, #0
   87f1c:	dd37      	ble.n	87f8e <_svfprintf_r+0x3be>
   87f1e:	2f10      	cmp	r7, #16
   87f20:	f340 8679 	ble.w	88c16 <_svfprintf_r+0x1046>
   87f24:	4d80      	ldr	r5, [pc, #512]	; (88128 <_svfprintf_r+0x558>)
   87f26:	4642      	mov	r2, r8
   87f28:	4621      	mov	r1, r4
   87f2a:	46b0      	mov	r8, r6
   87f2c:	f04f 0b10 	mov.w	fp, #16
   87f30:	462e      	mov	r6, r5
   87f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87f34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87f36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87f38:	e004      	b.n	87f44 <_svfprintf_r+0x374>
   87f3a:	3f10      	subs	r7, #16
   87f3c:	2f10      	cmp	r7, #16
   87f3e:	f102 0208 	add.w	r2, r2, #8
   87f42:	dd15      	ble.n	87f70 <_svfprintf_r+0x3a0>
   87f44:	3301      	adds	r3, #1
   87f46:	3110      	adds	r1, #16
   87f48:	2b07      	cmp	r3, #7
   87f4a:	9127      	str	r1, [sp, #156]	; 0x9c
   87f4c:	9326      	str	r3, [sp, #152]	; 0x98
   87f4e:	e882 0840 	stmia.w	r2, {r6, fp}
   87f52:	ddf2      	ble.n	87f3a <_svfprintf_r+0x36a>
   87f54:	aa25      	add	r2, sp, #148	; 0x94
   87f56:	4629      	mov	r1, r5
   87f58:	4620      	mov	r0, r4
   87f5a:	f004 fd95 	bl	8ca88 <__ssprint_r>
   87f5e:	2800      	cmp	r0, #0
   87f60:	f47f af13 	bne.w	87d8a <_svfprintf_r+0x1ba>
   87f64:	3f10      	subs	r7, #16
   87f66:	2f10      	cmp	r7, #16
   87f68:	464a      	mov	r2, r9
   87f6a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87f6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87f6e:	dce9      	bgt.n	87f44 <_svfprintf_r+0x374>
   87f70:	4635      	mov	r5, r6
   87f72:	460c      	mov	r4, r1
   87f74:	4646      	mov	r6, r8
   87f76:	4690      	mov	r8, r2
   87f78:	3301      	adds	r3, #1
   87f7a:	443c      	add	r4, r7
   87f7c:	2b07      	cmp	r3, #7
   87f7e:	9427      	str	r4, [sp, #156]	; 0x9c
   87f80:	9326      	str	r3, [sp, #152]	; 0x98
   87f82:	e888 00a0 	stmia.w	r8, {r5, r7}
   87f86:	f300 8370 	bgt.w	8866a <_svfprintf_r+0xa9a>
   87f8a:	f108 0808 	add.w	r8, r8, #8
   87f8e:	9b07      	ldr	r3, [sp, #28]
   87f90:	05df      	lsls	r7, r3, #23
   87f92:	f100 8264 	bmi.w	8845e <_svfprintf_r+0x88e>
   87f96:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87f98:	990e      	ldr	r1, [sp, #56]	; 0x38
   87f9a:	3301      	adds	r3, #1
   87f9c:	440c      	add	r4, r1
   87f9e:	2b07      	cmp	r3, #7
   87fa0:	9427      	str	r4, [sp, #156]	; 0x9c
   87fa2:	f8c8 6000 	str.w	r6, [r8]
   87fa6:	f8c8 1004 	str.w	r1, [r8, #4]
   87faa:	9326      	str	r3, [sp, #152]	; 0x98
   87fac:	f300 83b3 	bgt.w	88716 <_svfprintf_r+0xb46>
   87fb0:	f108 0808 	add.w	r8, r8, #8
   87fb4:	9b07      	ldr	r3, [sp, #28]
   87fb6:	075b      	lsls	r3, r3, #29
   87fb8:	d53b      	bpl.n	88032 <_svfprintf_r+0x462>
   87fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87fbc:	9a08      	ldr	r2, [sp, #32]
   87fbe:	1a9d      	subs	r5, r3, r2
   87fc0:	2d00      	cmp	r5, #0
   87fc2:	dd36      	ble.n	88032 <_svfprintf_r+0x462>
   87fc4:	2d10      	cmp	r5, #16
   87fc6:	f340 8721 	ble.w	88e0c <_svfprintf_r+0x123c>
   87fca:	2610      	movs	r6, #16
   87fcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87fce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87fd0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   87fd4:	e004      	b.n	87fe0 <_svfprintf_r+0x410>
   87fd6:	3d10      	subs	r5, #16
   87fd8:	2d10      	cmp	r5, #16
   87fda:	f108 0808 	add.w	r8, r8, #8
   87fde:	dd16      	ble.n	8800e <_svfprintf_r+0x43e>
   87fe0:	3301      	adds	r3, #1
   87fe2:	4a50      	ldr	r2, [pc, #320]	; (88124 <_svfprintf_r+0x554>)
   87fe4:	3410      	adds	r4, #16
   87fe6:	2b07      	cmp	r3, #7
   87fe8:	9427      	str	r4, [sp, #156]	; 0x9c
   87fea:	9326      	str	r3, [sp, #152]	; 0x98
   87fec:	e888 0044 	stmia.w	r8, {r2, r6}
   87ff0:	ddf1      	ble.n	87fd6 <_svfprintf_r+0x406>
   87ff2:	aa25      	add	r2, sp, #148	; 0x94
   87ff4:	4659      	mov	r1, fp
   87ff6:	4638      	mov	r0, r7
   87ff8:	f004 fd46 	bl	8ca88 <__ssprint_r>
   87ffc:	2800      	cmp	r0, #0
   87ffe:	f47f aec4 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88002:	3d10      	subs	r5, #16
   88004:	2d10      	cmp	r5, #16
   88006:	46c8      	mov	r8, r9
   88008:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8800a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8800c:	dce8      	bgt.n	87fe0 <_svfprintf_r+0x410>
   8800e:	3301      	adds	r3, #1
   88010:	4a44      	ldr	r2, [pc, #272]	; (88124 <_svfprintf_r+0x554>)
   88012:	442c      	add	r4, r5
   88014:	2b07      	cmp	r3, #7
   88016:	9427      	str	r4, [sp, #156]	; 0x9c
   88018:	9326      	str	r3, [sp, #152]	; 0x98
   8801a:	e888 0024 	stmia.w	r8, {r2, r5}
   8801e:	dd08      	ble.n	88032 <_svfprintf_r+0x462>
   88020:	aa25      	add	r2, sp, #148	; 0x94
   88022:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88024:	980c      	ldr	r0, [sp, #48]	; 0x30
   88026:	f004 fd2f 	bl	8ca88 <__ssprint_r>
   8802a:	2800      	cmp	r0, #0
   8802c:	f47f aead 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88030:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88032:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88034:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   88036:	9908      	ldr	r1, [sp, #32]
   88038:	428a      	cmp	r2, r1
   8803a:	bfac      	ite	ge
   8803c:	189b      	addge	r3, r3, r2
   8803e:	185b      	addlt	r3, r3, r1
   88040:	9309      	str	r3, [sp, #36]	; 0x24
   88042:	2c00      	cmp	r4, #0
   88044:	f040 82fb 	bne.w	8863e <_svfprintf_r+0xa6e>
   88048:	2300      	movs	r3, #0
   8804a:	46c8      	mov	r8, r9
   8804c:	9326      	str	r3, [sp, #152]	; 0x98
   8804e:	e5e6      	b.n	87c1e <_svfprintf_r+0x4e>
   88050:	9311      	str	r3, [sp, #68]	; 0x44
   88052:	f01b 0320 	ands.w	r3, fp, #32
   88056:	f040 8145 	bne.w	882e4 <_svfprintf_r+0x714>
   8805a:	f01b 0210 	ands.w	r2, fp, #16
   8805e:	f040 8466 	bne.w	8892e <_svfprintf_r+0xd5e>
   88062:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   88066:	f000 8462 	beq.w	8892e <_svfprintf_r+0xd5e>
   8806a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8806c:	4613      	mov	r3, r2
   8806e:	460a      	mov	r2, r1
   88070:	3204      	adds	r2, #4
   88072:	880c      	ldrh	r4, [r1, #0]
   88074:	2500      	movs	r5, #0
   88076:	920f      	str	r2, [sp, #60]	; 0x3c
   88078:	e6a8      	b.n	87dcc <_svfprintf_r+0x1fc>
   8807a:	2500      	movs	r5, #0
   8807c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8807e:	9311      	str	r3, [sp, #68]	; 0x44
   88080:	6816      	ldr	r6, [r2, #0]
   88082:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   88086:	1d14      	adds	r4, r2, #4
   88088:	2e00      	cmp	r6, #0
   8808a:	f000 86cd 	beq.w	88e28 <_svfprintf_r+0x1258>
   8808e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88090:	1c53      	adds	r3, r2, #1
   88092:	f000 861b 	beq.w	88ccc <_svfprintf_r+0x10fc>
   88096:	4629      	mov	r1, r5
   88098:	4630      	mov	r0, r6
   8809a:	f003 ff09 	bl	8beb0 <memchr>
   8809e:	2800      	cmp	r0, #0
   880a0:	f000 870d 	beq.w	88ebe <_svfprintf_r+0x12ee>
   880a4:	1b83      	subs	r3, r0, r6
   880a6:	950a      	str	r5, [sp, #40]	; 0x28
   880a8:	930e      	str	r3, [sp, #56]	; 0x38
   880aa:	940f      	str	r4, [sp, #60]	; 0x3c
   880ac:	f8cd b01c 	str.w	fp, [sp, #28]
   880b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   880b4:	9308      	str	r3, [sp, #32]
   880b6:	9512      	str	r5, [sp, #72]	; 0x48
   880b8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   880bc:	e6ac      	b.n	87e18 <_svfprintf_r+0x248>
   880be:	f89a 3000 	ldrb.w	r3, [sl]
   880c2:	f10a 0401 	add.w	r4, sl, #1
   880c6:	2b2a      	cmp	r3, #42	; 0x2a
   880c8:	f000 87c2 	beq.w	89050 <_svfprintf_r+0x1480>
   880cc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   880d0:	2809      	cmp	r0, #9
   880d2:	46a2      	mov	sl, r4
   880d4:	f200 8718 	bhi.w	88f08 <_svfprintf_r+0x1338>
   880d8:	2300      	movs	r3, #0
   880da:	461c      	mov	r4, r3
   880dc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   880e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   880e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   880e8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   880ec:	2809      	cmp	r0, #9
   880ee:	d9f5      	bls.n	880dc <_svfprintf_r+0x50c>
   880f0:	940a      	str	r4, [sp, #40]	; 0x28
   880f2:	e5c9      	b.n	87c88 <_svfprintf_r+0xb8>
   880f4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   880f8:	f89a 3000 	ldrb.w	r3, [sl]
   880fc:	e5c2      	b.n	87c84 <_svfprintf_r+0xb4>
   880fe:	f04b 0b10 	orr.w	fp, fp, #16
   88102:	f01b 0f20 	tst.w	fp, #32
   88106:	9311      	str	r3, [sp, #68]	; 0x44
   88108:	f43f ae51 	beq.w	87dae <_svfprintf_r+0x1de>
   8810c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8810e:	3407      	adds	r4, #7
   88110:	f024 0307 	bic.w	r3, r4, #7
   88114:	f103 0208 	add.w	r2, r3, #8
   88118:	e9d3 4500 	ldrd	r4, r5, [r3]
   8811c:	920f      	str	r2, [sp, #60]	; 0x3c
   8811e:	2301      	movs	r3, #1
   88120:	e654      	b.n	87dcc <_svfprintf_r+0x1fc>
   88122:	bf00      	nop
   88124:	0008db58 	.word	0x0008db58
   88128:	0008db68 	.word	0x0008db68
   8812c:	9311      	str	r3, [sp, #68]	; 0x44
   8812e:	2a00      	cmp	r2, #0
   88130:	f040 87ad 	bne.w	8908e <_svfprintf_r+0x14be>
   88134:	4bbe      	ldr	r3, [pc, #760]	; (88430 <_svfprintf_r+0x860>)
   88136:	f01b 0f20 	tst.w	fp, #32
   8813a:	9318      	str	r3, [sp, #96]	; 0x60
   8813c:	f040 80e7 	bne.w	8830e <_svfprintf_r+0x73e>
   88140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88142:	f01b 0f10 	tst.w	fp, #16
   88146:	4613      	mov	r3, r2
   88148:	f040 83d8 	bne.w	888fc <_svfprintf_r+0xd2c>
   8814c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   88150:	f000 83d4 	beq.w	888fc <_svfprintf_r+0xd2c>
   88154:	2500      	movs	r5, #0
   88156:	3304      	adds	r3, #4
   88158:	8814      	ldrh	r4, [r2, #0]
   8815a:	930f      	str	r3, [sp, #60]	; 0x3c
   8815c:	f01b 0f01 	tst.w	fp, #1
   88160:	f000 80e3 	beq.w	8832a <_svfprintf_r+0x75a>
   88164:	ea54 0305 	orrs.w	r3, r4, r5
   88168:	f000 80df 	beq.w	8832a <_svfprintf_r+0x75a>
   8816c:	2330      	movs	r3, #48	; 0x30
   8816e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   88172:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   88176:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8817a:	f04b 0b02 	orr.w	fp, fp, #2
   8817e:	2302      	movs	r3, #2
   88180:	e624      	b.n	87dcc <_svfprintf_r+0x1fc>
   88182:	2201      	movs	r2, #1
   88184:	9311      	str	r3, [sp, #68]	; 0x44
   88186:	2300      	movs	r3, #0
   88188:	4611      	mov	r1, r2
   8818a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8818c:	9208      	str	r2, [sp, #32]
   8818e:	6802      	ldr	r2, [r0, #0]
   88190:	461f      	mov	r7, r3
   88192:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   88196:	930a      	str	r3, [sp, #40]	; 0x28
   88198:	9312      	str	r3, [sp, #72]	; 0x48
   8819a:	1d03      	adds	r3, r0, #4
   8819c:	f8cd b01c 	str.w	fp, [sp, #28]
   881a0:	910e      	str	r1, [sp, #56]	; 0x38
   881a2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   881a6:	930f      	str	r3, [sp, #60]	; 0x3c
   881a8:	ae28      	add	r6, sp, #160	; 0xa0
   881aa:	e639      	b.n	87e20 <_svfprintf_r+0x250>
   881ac:	9311      	str	r3, [sp, #68]	; 0x44
   881ae:	2a00      	cmp	r2, #0
   881b0:	f040 8784 	bne.w	890bc <_svfprintf_r+0x14ec>
   881b4:	f04b 0b10 	orr.w	fp, fp, #16
   881b8:	f01b 0f20 	tst.w	fp, #32
   881bc:	f040 8475 	bne.w	88aaa <_svfprintf_r+0xeda>
   881c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   881c2:	f01b 0f10 	tst.w	fp, #16
   881c6:	4613      	mov	r3, r2
   881c8:	f040 839d 	bne.w	88906 <_svfprintf_r+0xd36>
   881cc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   881d0:	f000 8399 	beq.w	88906 <_svfprintf_r+0xd36>
   881d4:	f9b2 4000 	ldrsh.w	r4, [r2]
   881d8:	3304      	adds	r3, #4
   881da:	17e5      	asrs	r5, r4, #31
   881dc:	930f      	str	r3, [sp, #60]	; 0x3c
   881de:	4622      	mov	r2, r4
   881e0:	462b      	mov	r3, r5
   881e2:	2a00      	cmp	r2, #0
   881e4:	f173 0300 	sbcs.w	r3, r3, #0
   881e8:	f2c0 8398 	blt.w	8891c <_svfprintf_r+0xd4c>
   881ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   881ee:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   881f2:	1c4a      	adds	r2, r1, #1
   881f4:	f04f 0301 	mov.w	r3, #1
   881f8:	f47f adf0 	bne.w	87ddc <_svfprintf_r+0x20c>
   881fc:	ea54 0205 	orrs.w	r2, r4, r5
   88200:	f000 8229 	beq.w	88656 <_svfprintf_r+0xa86>
   88204:	f8cd b01c 	str.w	fp, [sp, #28]
   88208:	2b01      	cmp	r3, #1
   8820a:	f000 830e 	beq.w	8882a <_svfprintf_r+0xc5a>
   8820e:	2b02      	cmp	r3, #2
   88210:	f040 829c 	bne.w	8874c <_svfprintf_r+0xb7c>
   88214:	464e      	mov	r6, r9
   88216:	9818      	ldr	r0, [sp, #96]	; 0x60
   88218:	0923      	lsrs	r3, r4, #4
   8821a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8821e:	0929      	lsrs	r1, r5, #4
   88220:	f004 020f 	and.w	r2, r4, #15
   88224:	460d      	mov	r5, r1
   88226:	461c      	mov	r4, r3
   88228:	5c83      	ldrb	r3, [r0, r2]
   8822a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8822e:	ea54 0305 	orrs.w	r3, r4, r5
   88232:	d1f1      	bne.n	88218 <_svfprintf_r+0x648>
   88234:	eba9 0306 	sub.w	r3, r9, r6
   88238:	930e      	str	r3, [sp, #56]	; 0x38
   8823a:	e5e5      	b.n	87e08 <_svfprintf_r+0x238>
   8823c:	9311      	str	r3, [sp, #68]	; 0x44
   8823e:	2a00      	cmp	r2, #0
   88240:	f040 8738 	bne.w	890b4 <_svfprintf_r+0x14e4>
   88244:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   88246:	f01b 0f08 	tst.w	fp, #8
   8824a:	f104 0407 	add.w	r4, r4, #7
   8824e:	f000 84cf 	beq.w	88bf0 <_svfprintf_r+0x1020>
   88252:	f024 0307 	bic.w	r3, r4, #7
   88256:	f103 0208 	add.w	r2, r3, #8
   8825a:	920f      	str	r2, [sp, #60]	; 0x3c
   8825c:	681a      	ldr	r2, [r3, #0]
   8825e:	685b      	ldr	r3, [r3, #4]
   88260:	9215      	str	r2, [sp, #84]	; 0x54
   88262:	9314      	str	r3, [sp, #80]	; 0x50
   88264:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88266:	9d15      	ldr	r5, [sp, #84]	; 0x54
   88268:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   8826c:	4628      	mov	r0, r5
   8826e:	4621      	mov	r1, r4
   88270:	f04f 32ff 	mov.w	r2, #4294967295
   88274:	4b6f      	ldr	r3, [pc, #444]	; (88434 <_svfprintf_r+0x864>)
   88276:	f005 fad3 	bl	8d820 <__aeabi_dcmpun>
   8827a:	2800      	cmp	r0, #0
   8827c:	f040 8434 	bne.w	88ae8 <_svfprintf_r+0xf18>
   88280:	4628      	mov	r0, r5
   88282:	4621      	mov	r1, r4
   88284:	f04f 32ff 	mov.w	r2, #4294967295
   88288:	4b6a      	ldr	r3, [pc, #424]	; (88434 <_svfprintf_r+0x864>)
   8828a:	f005 faab 	bl	8d7e4 <__aeabi_dcmple>
   8828e:	2800      	cmp	r0, #0
   88290:	f040 842a 	bne.w	88ae8 <_svfprintf_r+0xf18>
   88294:	a815      	add	r0, sp, #84	; 0x54
   88296:	c80d      	ldmia	r0, {r0, r2, r3}
   88298:	9914      	ldr	r1, [sp, #80]	; 0x50
   8829a:	f005 fa99 	bl	8d7d0 <__aeabi_dcmplt>
   8829e:	2800      	cmp	r0, #0
   882a0:	f040 85d4 	bne.w	88e4c <_svfprintf_r+0x127c>
   882a4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   882a8:	2303      	movs	r3, #3
   882aa:	461a      	mov	r2, r3
   882ac:	9308      	str	r3, [sp, #32]
   882ae:	2300      	movs	r3, #0
   882b0:	4e61      	ldr	r6, [pc, #388]	; (88438 <_svfprintf_r+0x868>)
   882b2:	4619      	mov	r1, r3
   882b4:	930a      	str	r3, [sp, #40]	; 0x28
   882b6:	4b61      	ldr	r3, [pc, #388]	; (8843c <_svfprintf_r+0x86c>)
   882b8:	920e      	str	r2, [sp, #56]	; 0x38
   882ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   882bc:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   882c0:	9007      	str	r0, [sp, #28]
   882c2:	9112      	str	r1, [sp, #72]	; 0x48
   882c4:	2a47      	cmp	r2, #71	; 0x47
   882c6:	bfd8      	it	le
   882c8:	461e      	movle	r6, r3
   882ca:	e5a5      	b.n	87e18 <_svfprintf_r+0x248>
   882cc:	f04b 0b08 	orr.w	fp, fp, #8
   882d0:	f89a 3000 	ldrb.w	r3, [sl]
   882d4:	e4d6      	b.n	87c84 <_svfprintf_r+0xb4>
   882d6:	f04b 0b10 	orr.w	fp, fp, #16
   882da:	9311      	str	r3, [sp, #68]	; 0x44
   882dc:	f01b 0320 	ands.w	r3, fp, #32
   882e0:	f43f aebb 	beq.w	8805a <_svfprintf_r+0x48a>
   882e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   882e6:	3407      	adds	r4, #7
   882e8:	f024 0307 	bic.w	r3, r4, #7
   882ec:	f103 0208 	add.w	r2, r3, #8
   882f0:	e9d3 4500 	ldrd	r4, r5, [r3]
   882f4:	920f      	str	r2, [sp, #60]	; 0x3c
   882f6:	2300      	movs	r3, #0
   882f8:	e568      	b.n	87dcc <_svfprintf_r+0x1fc>
   882fa:	9311      	str	r3, [sp, #68]	; 0x44
   882fc:	2a00      	cmp	r2, #0
   882fe:	f040 86c2 	bne.w	89086 <_svfprintf_r+0x14b6>
   88302:	4b4f      	ldr	r3, [pc, #316]	; (88440 <_svfprintf_r+0x870>)
   88304:	f01b 0f20 	tst.w	fp, #32
   88308:	9318      	str	r3, [sp, #96]	; 0x60
   8830a:	f43f af19 	beq.w	88140 <_svfprintf_r+0x570>
   8830e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   88310:	f01b 0f01 	tst.w	fp, #1
   88314:	f104 0407 	add.w	r4, r4, #7
   88318:	f024 0307 	bic.w	r3, r4, #7
   8831c:	f103 0208 	add.w	r2, r3, #8
   88320:	920f      	str	r2, [sp, #60]	; 0x3c
   88322:	e9d3 4500 	ldrd	r4, r5, [r3]
   88326:	f47f af1d 	bne.w	88164 <_svfprintf_r+0x594>
   8832a:	2302      	movs	r3, #2
   8832c:	e54e      	b.n	87dcc <_svfprintf_r+0x1fc>
   8832e:	f89a 3000 	ldrb.w	r3, [sl]
   88332:	2900      	cmp	r1, #0
   88334:	f47f aca6 	bne.w	87c84 <_svfprintf_r+0xb4>
   88338:	2201      	movs	r2, #1
   8833a:	2120      	movs	r1, #32
   8833c:	e4a2      	b.n	87c84 <_svfprintf_r+0xb4>
   8833e:	f04b 0b01 	orr.w	fp, fp, #1
   88342:	f89a 3000 	ldrb.w	r3, [sl]
   88346:	e49d      	b.n	87c84 <_svfprintf_r+0xb4>
   88348:	f89a 3000 	ldrb.w	r3, [sl]
   8834c:	2201      	movs	r2, #1
   8834e:	212b      	movs	r1, #43	; 0x2b
   88350:	e498      	b.n	87c84 <_svfprintf_r+0xb4>
   88352:	f04b 0b20 	orr.w	fp, fp, #32
   88356:	f89a 3000 	ldrb.w	r3, [sl]
   8835a:	e493      	b.n	87c84 <_svfprintf_r+0xb4>
   8835c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   88360:	f89a 3000 	ldrb.w	r3, [sl]
   88364:	e48e      	b.n	87c84 <_svfprintf_r+0xb4>
   88366:	f89a 3000 	ldrb.w	r3, [sl]
   8836a:	2b6c      	cmp	r3, #108	; 0x6c
   8836c:	bf03      	ittte	eq
   8836e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   88372:	f04b 0b20 	orreq.w	fp, fp, #32
   88376:	f10a 0a01 	addeq.w	sl, sl, #1
   8837a:	f04b 0b10 	orrne.w	fp, fp, #16
   8837e:	e481      	b.n	87c84 <_svfprintf_r+0xb4>
   88380:	2a00      	cmp	r2, #0
   88382:	f040 867c 	bne.w	8907e <_svfprintf_r+0x14ae>
   88386:	f01b 0f20 	tst.w	fp, #32
   8838a:	f040 8452 	bne.w	88c32 <_svfprintf_r+0x1062>
   8838e:	f01b 0f10 	tst.w	fp, #16
   88392:	f040 8438 	bne.w	88c06 <_svfprintf_r+0x1036>
   88396:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8839a:	f000 8434 	beq.w	88c06 <_svfprintf_r+0x1036>
   8839e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   883a0:	6813      	ldr	r3, [r2, #0]
   883a2:	3204      	adds	r2, #4
   883a4:	920f      	str	r2, [sp, #60]	; 0x3c
   883a6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   883aa:	801a      	strh	r2, [r3, #0]
   883ac:	e437      	b.n	87c1e <_svfprintf_r+0x4e>
   883ae:	2378      	movs	r3, #120	; 0x78
   883b0:	2230      	movs	r2, #48	; 0x30
   883b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   883b4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   883b8:	9311      	str	r3, [sp, #68]	; 0x44
   883ba:	1d03      	adds	r3, r0, #4
   883bc:	930f      	str	r3, [sp, #60]	; 0x3c
   883be:	4b20      	ldr	r3, [pc, #128]	; (88440 <_svfprintf_r+0x870>)
   883c0:	6804      	ldr	r4, [r0, #0]
   883c2:	9318      	str	r3, [sp, #96]	; 0x60
   883c4:	f04b 0b02 	orr.w	fp, fp, #2
   883c8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   883cc:	2500      	movs	r5, #0
   883ce:	2302      	movs	r3, #2
   883d0:	e4fc      	b.n	87dcc <_svfprintf_r+0x1fc>
   883d2:	9311      	str	r3, [sp, #68]	; 0x44
   883d4:	2a00      	cmp	r2, #0
   883d6:	f43f aeef 	beq.w	881b8 <_svfprintf_r+0x5e8>
   883da:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   883de:	e6eb      	b.n	881b8 <_svfprintf_r+0x5e8>
   883e0:	2000      	movs	r0, #0
   883e2:	4604      	mov	r4, r0
   883e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   883e8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   883ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   883f0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   883f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   883f8:	2809      	cmp	r0, #9
   883fa:	d9f5      	bls.n	883e8 <_svfprintf_r+0x818>
   883fc:	940d      	str	r4, [sp, #52]	; 0x34
   883fe:	e443      	b.n	87c88 <_svfprintf_r+0xb8>
   88400:	9311      	str	r3, [sp, #68]	; 0x44
   88402:	2a00      	cmp	r2, #0
   88404:	f040 864a 	bne.w	8909c <_svfprintf_r+0x14cc>
   88408:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8840a:	2a00      	cmp	r2, #0
   8840c:	f43f acb6 	beq.w	87d7c <_svfprintf_r+0x1ac>
   88410:	2300      	movs	r3, #0
   88412:	2101      	movs	r1, #1
   88414:	461f      	mov	r7, r3
   88416:	9108      	str	r1, [sp, #32]
   88418:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8841c:	f8cd b01c 	str.w	fp, [sp, #28]
   88420:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   88424:	930a      	str	r3, [sp, #40]	; 0x28
   88426:	9312      	str	r3, [sp, #72]	; 0x48
   88428:	910e      	str	r1, [sp, #56]	; 0x38
   8842a:	ae28      	add	r6, sp, #160	; 0xa0
   8842c:	e4f8      	b.n	87e20 <_svfprintf_r+0x250>
   8842e:	bf00      	nop
   88430:	0008db24 	.word	0x0008db24
   88434:	7fefffff 	.word	0x7fefffff
   88438:	0008db18 	.word	0x0008db18
   8843c:	0008db14 	.word	0x0008db14
   88440:	0008db38 	.word	0x0008db38
   88444:	aa25      	add	r2, sp, #148	; 0x94
   88446:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88448:	980c      	ldr	r0, [sp, #48]	; 0x30
   8844a:	f004 fb1d 	bl	8ca88 <__ssprint_r>
   8844e:	2800      	cmp	r0, #0
   88450:	f47f ac9b 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88454:	46c8      	mov	r8, r9
   88456:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8845a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8845c:	e533      	b.n	87ec6 <_svfprintf_r+0x2f6>
   8845e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88460:	2b65      	cmp	r3, #101	; 0x65
   88462:	f340 809a 	ble.w	8859a <_svfprintf_r+0x9ca>
   88466:	a815      	add	r0, sp, #84	; 0x54
   88468:	c80d      	ldmia	r0, {r0, r2, r3}
   8846a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8846c:	f005 f9a6 	bl	8d7bc <__aeabi_dcmpeq>
   88470:	2800      	cmp	r0, #0
   88472:	f000 8193 	beq.w	8879c <_svfprintf_r+0xbcc>
   88476:	2101      	movs	r1, #1
   88478:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8847a:	4ab5      	ldr	r2, [pc, #724]	; (88750 <_svfprintf_r+0xb80>)
   8847c:	440b      	add	r3, r1
   8847e:	440c      	add	r4, r1
   88480:	2b07      	cmp	r3, #7
   88482:	9427      	str	r4, [sp, #156]	; 0x9c
   88484:	9326      	str	r3, [sp, #152]	; 0x98
   88486:	f8c8 1004 	str.w	r1, [r8, #4]
   8848a:	f8c8 2000 	str.w	r2, [r8]
   8848e:	f300 83c6 	bgt.w	88c1e <_svfprintf_r+0x104e>
   88492:	f108 0808 	add.w	r8, r8, #8
   88496:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8849a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8849c:	4293      	cmp	r3, r2
   8849e:	db03      	blt.n	884a8 <_svfprintf_r+0x8d8>
   884a0:	9b07      	ldr	r3, [sp, #28]
   884a2:	07dd      	lsls	r5, r3, #31
   884a4:	f57f ad86 	bpl.w	87fb4 <_svfprintf_r+0x3e4>
   884a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   884aa:	9919      	ldr	r1, [sp, #100]	; 0x64
   884ac:	3301      	adds	r3, #1
   884ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   884b0:	440c      	add	r4, r1
   884b2:	2b07      	cmp	r3, #7
   884b4:	f8c8 2000 	str.w	r2, [r8]
   884b8:	f8c8 1004 	str.w	r1, [r8, #4]
   884bc:	9427      	str	r4, [sp, #156]	; 0x9c
   884be:	9326      	str	r3, [sp, #152]	; 0x98
   884c0:	f300 83c4 	bgt.w	88c4c <_svfprintf_r+0x107c>
   884c4:	f108 0808 	add.w	r8, r8, #8
   884c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   884ca:	1e5e      	subs	r6, r3, #1
   884cc:	2e00      	cmp	r6, #0
   884ce:	f77f ad71 	ble.w	87fb4 <_svfprintf_r+0x3e4>
   884d2:	2e10      	cmp	r6, #16
   884d4:	f340 8575 	ble.w	88fc2 <_svfprintf_r+0x13f2>
   884d8:	4622      	mov	r2, r4
   884da:	2710      	movs	r7, #16
   884dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   884de:	4d9d      	ldr	r5, [pc, #628]	; (88754 <_svfprintf_r+0xb84>)
   884e0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   884e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   884e6:	e005      	b.n	884f4 <_svfprintf_r+0x924>
   884e8:	f108 0808 	add.w	r8, r8, #8
   884ec:	3e10      	subs	r6, #16
   884ee:	2e10      	cmp	r6, #16
   884f0:	f340 8225 	ble.w	8893e <_svfprintf_r+0xd6e>
   884f4:	3301      	adds	r3, #1
   884f6:	3210      	adds	r2, #16
   884f8:	2b07      	cmp	r3, #7
   884fa:	9227      	str	r2, [sp, #156]	; 0x9c
   884fc:	9326      	str	r3, [sp, #152]	; 0x98
   884fe:	e888 00a0 	stmia.w	r8, {r5, r7}
   88502:	ddf1      	ble.n	884e8 <_svfprintf_r+0x918>
   88504:	aa25      	add	r2, sp, #148	; 0x94
   88506:	4621      	mov	r1, r4
   88508:	4658      	mov	r0, fp
   8850a:	f004 fabd 	bl	8ca88 <__ssprint_r>
   8850e:	2800      	cmp	r0, #0
   88510:	f47f ac3b 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88514:	46c8      	mov	r8, r9
   88516:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88518:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8851a:	e7e7      	b.n	884ec <_svfprintf_r+0x91c>
   8851c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8851e:	9a08      	ldr	r2, [sp, #32]
   88520:	1a9f      	subs	r7, r3, r2
   88522:	2f00      	cmp	r7, #0
   88524:	f77f acf6 	ble.w	87f14 <_svfprintf_r+0x344>
   88528:	2f10      	cmp	r7, #16
   8852a:	f340 84a8 	ble.w	88e7e <_svfprintf_r+0x12ae>
   8852e:	4d89      	ldr	r5, [pc, #548]	; (88754 <_svfprintf_r+0xb84>)
   88530:	4642      	mov	r2, r8
   88532:	4621      	mov	r1, r4
   88534:	46b0      	mov	r8, r6
   88536:	f04f 0b10 	mov.w	fp, #16
   8853a:	462e      	mov	r6, r5
   8853c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8853e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   88540:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   88542:	e004      	b.n	8854e <_svfprintf_r+0x97e>
   88544:	3f10      	subs	r7, #16
   88546:	2f10      	cmp	r7, #16
   88548:	f102 0208 	add.w	r2, r2, #8
   8854c:	dd15      	ble.n	8857a <_svfprintf_r+0x9aa>
   8854e:	3301      	adds	r3, #1
   88550:	3110      	adds	r1, #16
   88552:	2b07      	cmp	r3, #7
   88554:	9127      	str	r1, [sp, #156]	; 0x9c
   88556:	9326      	str	r3, [sp, #152]	; 0x98
   88558:	e882 0840 	stmia.w	r2, {r6, fp}
   8855c:	ddf2      	ble.n	88544 <_svfprintf_r+0x974>
   8855e:	aa25      	add	r2, sp, #148	; 0x94
   88560:	4629      	mov	r1, r5
   88562:	4620      	mov	r0, r4
   88564:	f004 fa90 	bl	8ca88 <__ssprint_r>
   88568:	2800      	cmp	r0, #0
   8856a:	f47f ac0e 	bne.w	87d8a <_svfprintf_r+0x1ba>
   8856e:	3f10      	subs	r7, #16
   88570:	2f10      	cmp	r7, #16
   88572:	464a      	mov	r2, r9
   88574:	9927      	ldr	r1, [sp, #156]	; 0x9c
   88576:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88578:	dce9      	bgt.n	8854e <_svfprintf_r+0x97e>
   8857a:	4635      	mov	r5, r6
   8857c:	460c      	mov	r4, r1
   8857e:	4646      	mov	r6, r8
   88580:	4690      	mov	r8, r2
   88582:	3301      	adds	r3, #1
   88584:	443c      	add	r4, r7
   88586:	2b07      	cmp	r3, #7
   88588:	9427      	str	r4, [sp, #156]	; 0x9c
   8858a:	9326      	str	r3, [sp, #152]	; 0x98
   8858c:	e888 00a0 	stmia.w	r8, {r5, r7}
   88590:	f300 829e 	bgt.w	88ad0 <_svfprintf_r+0xf00>
   88594:	f108 0808 	add.w	r8, r8, #8
   88598:	e4bc      	b.n	87f14 <_svfprintf_r+0x344>
   8859a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8859c:	2b01      	cmp	r3, #1
   8859e:	f340 824f 	ble.w	88a40 <_svfprintf_r+0xe70>
   885a2:	2301      	movs	r3, #1
   885a4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   885a6:	441c      	add	r4, r3
   885a8:	441f      	add	r7, r3
   885aa:	2f07      	cmp	r7, #7
   885ac:	9427      	str	r4, [sp, #156]	; 0x9c
   885ae:	f8c8 6000 	str.w	r6, [r8]
   885b2:	9726      	str	r7, [sp, #152]	; 0x98
   885b4:	f8c8 3004 	str.w	r3, [r8, #4]
   885b8:	f300 825f 	bgt.w	88a7a <_svfprintf_r+0xeaa>
   885bc:	f108 0808 	add.w	r8, r8, #8
   885c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   885c2:	3701      	adds	r7, #1
   885c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   885c6:	4414      	add	r4, r2
   885c8:	2f07      	cmp	r7, #7
   885ca:	9427      	str	r4, [sp, #156]	; 0x9c
   885cc:	9726      	str	r7, [sp, #152]	; 0x98
   885ce:	f8c8 3000 	str.w	r3, [r8]
   885d2:	f8c8 2004 	str.w	r2, [r8, #4]
   885d6:	f300 825c 	bgt.w	88a92 <_svfprintf_r+0xec2>
   885da:	f108 0808 	add.w	r8, r8, #8
   885de:	a815      	add	r0, sp, #84	; 0x54
   885e0:	c80d      	ldmia	r0, {r0, r2, r3}
   885e2:	9914      	ldr	r1, [sp, #80]	; 0x50
   885e4:	f005 f8ea 	bl	8d7bc <__aeabi_dcmpeq>
   885e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   885ea:	2800      	cmp	r0, #0
   885ec:	f040 8141 	bne.w	88872 <_svfprintf_r+0xca2>
   885f0:	3b01      	subs	r3, #1
   885f2:	3701      	adds	r7, #1
   885f4:	3601      	adds	r6, #1
   885f6:	441c      	add	r4, r3
   885f8:	2f07      	cmp	r7, #7
   885fa:	f8c8 6000 	str.w	r6, [r8]
   885fe:	9726      	str	r7, [sp, #152]	; 0x98
   88600:	9427      	str	r4, [sp, #156]	; 0x9c
   88602:	f8c8 3004 	str.w	r3, [r8, #4]
   88606:	f300 8166 	bgt.w	888d6 <_svfprintf_r+0xd06>
   8860a:	f108 0808 	add.w	r8, r8, #8
   8860e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88610:	3701      	adds	r7, #1
   88612:	4414      	add	r4, r2
   88614:	ab21      	add	r3, sp, #132	; 0x84
   88616:	2f07      	cmp	r7, #7
   88618:	9427      	str	r4, [sp, #156]	; 0x9c
   8861a:	9726      	str	r7, [sp, #152]	; 0x98
   8861c:	f8c8 2004 	str.w	r2, [r8, #4]
   88620:	f8c8 3000 	str.w	r3, [r8]
   88624:	f77f acc4 	ble.w	87fb0 <_svfprintf_r+0x3e0>
   88628:	aa25      	add	r2, sp, #148	; 0x94
   8862a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8862c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8862e:	f004 fa2b 	bl	8ca88 <__ssprint_r>
   88632:	2800      	cmp	r0, #0
   88634:	f47f aba9 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88638:	46c8      	mov	r8, r9
   8863a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8863c:	e4ba      	b.n	87fb4 <_svfprintf_r+0x3e4>
   8863e:	aa25      	add	r2, sp, #148	; 0x94
   88640:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88642:	980c      	ldr	r0, [sp, #48]	; 0x30
   88644:	f004 fa20 	bl	8ca88 <__ssprint_r>
   88648:	2800      	cmp	r0, #0
   8864a:	f43f acfd 	beq.w	88048 <_svfprintf_r+0x478>
   8864e:	f7ff bb9c 	b.w	87d8a <_svfprintf_r+0x1ba>
   88652:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88656:	2b01      	cmp	r3, #1
   88658:	f000 817e 	beq.w	88958 <_svfprintf_r+0xd88>
   8865c:	2b02      	cmp	r3, #2
   8865e:	d171      	bne.n	88744 <_svfprintf_r+0xb74>
   88660:	f8cd b01c 	str.w	fp, [sp, #28]
   88664:	2400      	movs	r4, #0
   88666:	2500      	movs	r5, #0
   88668:	e5d4      	b.n	88214 <_svfprintf_r+0x644>
   8866a:	aa25      	add	r2, sp, #148	; 0x94
   8866c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8866e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88670:	f004 fa0a 	bl	8ca88 <__ssprint_r>
   88674:	2800      	cmp	r0, #0
   88676:	f47f ab88 	bne.w	87d8a <_svfprintf_r+0x1ba>
   8867a:	46c8      	mov	r8, r9
   8867c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8867e:	e486      	b.n	87f8e <_svfprintf_r+0x3be>
   88680:	aa25      	add	r2, sp, #148	; 0x94
   88682:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88684:	980c      	ldr	r0, [sp, #48]	; 0x30
   88686:	f004 f9ff 	bl	8ca88 <__ssprint_r>
   8868a:	2800      	cmp	r0, #0
   8868c:	f47f ab7d 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88690:	46c8      	mov	r8, r9
   88692:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88694:	e429      	b.n	87eea <_svfprintf_r+0x31a>
   88696:	2001      	movs	r0, #1
   88698:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8869a:	4a2d      	ldr	r2, [pc, #180]	; (88750 <_svfprintf_r+0xb80>)
   8869c:	4403      	add	r3, r0
   8869e:	4404      	add	r4, r0
   886a0:	2b07      	cmp	r3, #7
   886a2:	9427      	str	r4, [sp, #156]	; 0x9c
   886a4:	9326      	str	r3, [sp, #152]	; 0x98
   886a6:	f8c8 0004 	str.w	r0, [r8, #4]
   886aa:	f8c8 2000 	str.w	r2, [r8]
   886ae:	f340 82d8 	ble.w	88c62 <_svfprintf_r+0x1092>
   886b2:	aa25      	add	r2, sp, #148	; 0x94
   886b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   886b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   886b8:	f004 f9e6 	bl	8ca88 <__ssprint_r>
   886bc:	2800      	cmp	r0, #0
   886be:	f47f ab64 	bne.w	87d8a <_svfprintf_r+0x1ba>
   886c2:	46c8      	mov	r8, r9
   886c4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   886c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   886c8:	b929      	cbnz	r1, 886d6 <_svfprintf_r+0xb06>
   886ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   886cc:	b91b      	cbnz	r3, 886d6 <_svfprintf_r+0xb06>
   886ce:	9b07      	ldr	r3, [sp, #28]
   886d0:	07d8      	lsls	r0, r3, #31
   886d2:	f57f ac6f 	bpl.w	87fb4 <_svfprintf_r+0x3e4>
   886d6:	9819      	ldr	r0, [sp, #100]	; 0x64
   886d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   886da:	4602      	mov	r2, r0
   886dc:	3301      	adds	r3, #1
   886de:	4422      	add	r2, r4
   886e0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   886e2:	2b07      	cmp	r3, #7
   886e4:	9227      	str	r2, [sp, #156]	; 0x9c
   886e6:	f8c8 4000 	str.w	r4, [r8]
   886ea:	f8c8 0004 	str.w	r0, [r8, #4]
   886ee:	9326      	str	r3, [sp, #152]	; 0x98
   886f0:	f300 8431 	bgt.w	88f56 <_svfprintf_r+0x1386>
   886f4:	f108 0808 	add.w	r8, r8, #8
   886f8:	2900      	cmp	r1, #0
   886fa:	f2c0 8409 	blt.w	88f10 <_svfprintf_r+0x1340>
   886fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
   88700:	3301      	adds	r3, #1
   88702:	188c      	adds	r4, r1, r2
   88704:	2b07      	cmp	r3, #7
   88706:	9427      	str	r4, [sp, #156]	; 0x9c
   88708:	9326      	str	r3, [sp, #152]	; 0x98
   8870a:	f8c8 6000 	str.w	r6, [r8]
   8870e:	f8c8 1004 	str.w	r1, [r8, #4]
   88712:	f77f ac4d 	ble.w	87fb0 <_svfprintf_r+0x3e0>
   88716:	aa25      	add	r2, sp, #148	; 0x94
   88718:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8871a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8871c:	f004 f9b4 	bl	8ca88 <__ssprint_r>
   88720:	2800      	cmp	r0, #0
   88722:	f47f ab32 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88726:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88728:	46c8      	mov	r8, r9
   8872a:	e443      	b.n	87fb4 <_svfprintf_r+0x3e4>
   8872c:	aa25      	add	r2, sp, #148	; 0x94
   8872e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88730:	980c      	ldr	r0, [sp, #48]	; 0x30
   88732:	f004 f9a9 	bl	8ca88 <__ssprint_r>
   88736:	2800      	cmp	r0, #0
   88738:	f47f ab27 	bne.w	87d8a <_svfprintf_r+0x1ba>
   8873c:	46c8      	mov	r8, r9
   8873e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88740:	f7ff bbe5 	b.w	87f0e <_svfprintf_r+0x33e>
   88744:	2400      	movs	r4, #0
   88746:	2500      	movs	r5, #0
   88748:	f8cd b01c 	str.w	fp, [sp, #28]
   8874c:	4649      	mov	r1, r9
   8874e:	e004      	b.n	8875a <_svfprintf_r+0xb8a>
   88750:	0008db54 	.word	0x0008db54
   88754:	0008db68 	.word	0x0008db68
   88758:	4631      	mov	r1, r6
   8875a:	08e2      	lsrs	r2, r4, #3
   8875c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88760:	08e8      	lsrs	r0, r5, #3
   88762:	f004 0307 	and.w	r3, r4, #7
   88766:	4605      	mov	r5, r0
   88768:	4614      	mov	r4, r2
   8876a:	3330      	adds	r3, #48	; 0x30
   8876c:	ea54 0205 	orrs.w	r2, r4, r5
   88770:	f801 3c01 	strb.w	r3, [r1, #-1]
   88774:	f101 36ff 	add.w	r6, r1, #4294967295
   88778:	d1ee      	bne.n	88758 <_svfprintf_r+0xb88>
   8877a:	9a07      	ldr	r2, [sp, #28]
   8877c:	07d2      	lsls	r2, r2, #31
   8877e:	f57f ad59 	bpl.w	88234 <_svfprintf_r+0x664>
   88782:	2b30      	cmp	r3, #48	; 0x30
   88784:	f43f ad56 	beq.w	88234 <_svfprintf_r+0x664>
   88788:	2330      	movs	r3, #48	; 0x30
   8878a:	3902      	subs	r1, #2
   8878c:	f806 3c01 	strb.w	r3, [r6, #-1]
   88790:	eba9 0301 	sub.w	r3, r9, r1
   88794:	930e      	str	r3, [sp, #56]	; 0x38
   88796:	460e      	mov	r6, r1
   88798:	f7ff bb36 	b.w	87e08 <_svfprintf_r+0x238>
   8879c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8879e:	2900      	cmp	r1, #0
   887a0:	f77f af79 	ble.w	88696 <_svfprintf_r+0xac6>
   887a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   887a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   887a8:	4293      	cmp	r3, r2
   887aa:	bfa8      	it	ge
   887ac:	4613      	movge	r3, r2
   887ae:	2b00      	cmp	r3, #0
   887b0:	461f      	mov	r7, r3
   887b2:	dd0b      	ble.n	887cc <_svfprintf_r+0xbfc>
   887b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   887b6:	443c      	add	r4, r7
   887b8:	3301      	adds	r3, #1
   887ba:	2b07      	cmp	r3, #7
   887bc:	9427      	str	r4, [sp, #156]	; 0x9c
   887be:	e888 00c0 	stmia.w	r8, {r6, r7}
   887c2:	9326      	str	r3, [sp, #152]	; 0x98
   887c4:	f300 82fb 	bgt.w	88dbe <_svfprintf_r+0x11ee>
   887c8:	f108 0808 	add.w	r8, r8, #8
   887cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   887ce:	2f00      	cmp	r7, #0
   887d0:	bfa8      	it	ge
   887d2:	1bdb      	subge	r3, r3, r7
   887d4:	2b00      	cmp	r3, #0
   887d6:	461f      	mov	r7, r3
   887d8:	f340 80d7 	ble.w	8898a <_svfprintf_r+0xdba>
   887dc:	2b10      	cmp	r3, #16
   887de:	f340 8434 	ble.w	8904a <_svfprintf_r+0x147a>
   887e2:	4dba      	ldr	r5, [pc, #744]	; (88acc <_svfprintf_r+0xefc>)
   887e4:	4642      	mov	r2, r8
   887e6:	4621      	mov	r1, r4
   887e8:	46b0      	mov	r8, r6
   887ea:	f04f 0b10 	mov.w	fp, #16
   887ee:	462e      	mov	r6, r5
   887f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   887f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   887f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   887f6:	e004      	b.n	88802 <_svfprintf_r+0xc32>
   887f8:	3208      	adds	r2, #8
   887fa:	3f10      	subs	r7, #16
   887fc:	2f10      	cmp	r7, #16
   887fe:	f340 80b5 	ble.w	8896c <_svfprintf_r+0xd9c>
   88802:	3301      	adds	r3, #1
   88804:	3110      	adds	r1, #16
   88806:	2b07      	cmp	r3, #7
   88808:	9127      	str	r1, [sp, #156]	; 0x9c
   8880a:	9326      	str	r3, [sp, #152]	; 0x98
   8880c:	e882 0840 	stmia.w	r2, {r6, fp}
   88810:	ddf2      	ble.n	887f8 <_svfprintf_r+0xc28>
   88812:	aa25      	add	r2, sp, #148	; 0x94
   88814:	4629      	mov	r1, r5
   88816:	4620      	mov	r0, r4
   88818:	f004 f936 	bl	8ca88 <__ssprint_r>
   8881c:	2800      	cmp	r0, #0
   8881e:	f47f aab4 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88822:	464a      	mov	r2, r9
   88824:	9927      	ldr	r1, [sp, #156]	; 0x9c
   88826:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88828:	e7e7      	b.n	887fa <_svfprintf_r+0xc2a>
   8882a:	2d00      	cmp	r5, #0
   8882c:	bf08      	it	eq
   8882e:	2c0a      	cmpeq	r4, #10
   88830:	f0c0 8090 	bcc.w	88954 <_svfprintf_r+0xd84>
   88834:	464e      	mov	r6, r9
   88836:	4620      	mov	r0, r4
   88838:	4629      	mov	r1, r5
   8883a:	220a      	movs	r2, #10
   8883c:	2300      	movs	r3, #0
   8883e:	f7fe fe49 	bl	874d4 <__aeabi_uldivmod>
   88842:	3230      	adds	r2, #48	; 0x30
   88844:	f806 2d01 	strb.w	r2, [r6, #-1]!
   88848:	4620      	mov	r0, r4
   8884a:	4629      	mov	r1, r5
   8884c:	2300      	movs	r3, #0
   8884e:	220a      	movs	r2, #10
   88850:	f7fe fe40 	bl	874d4 <__aeabi_uldivmod>
   88854:	4604      	mov	r4, r0
   88856:	460d      	mov	r5, r1
   88858:	ea54 0305 	orrs.w	r3, r4, r5
   8885c:	d1eb      	bne.n	88836 <_svfprintf_r+0xc66>
   8885e:	eba9 0306 	sub.w	r3, r9, r6
   88862:	930e      	str	r3, [sp, #56]	; 0x38
   88864:	f7ff bad0 	b.w	87e08 <_svfprintf_r+0x238>
   88868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8886a:	464e      	mov	r6, r9
   8886c:	930e      	str	r3, [sp, #56]	; 0x38
   8886e:	f7ff bacb 	b.w	87e08 <_svfprintf_r+0x238>
   88872:	1e5e      	subs	r6, r3, #1
   88874:	2e00      	cmp	r6, #0
   88876:	f77f aeca 	ble.w	8860e <_svfprintf_r+0xa3e>
   8887a:	2e10      	cmp	r6, #16
   8887c:	f340 83e3 	ble.w	89046 <_svfprintf_r+0x1476>
   88880:	4622      	mov	r2, r4
   88882:	f04f 0b10 	mov.w	fp, #16
   88886:	4d91      	ldr	r5, [pc, #580]	; (88acc <_svfprintf_r+0xefc>)
   88888:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8888a:	e004      	b.n	88896 <_svfprintf_r+0xcc6>
   8888c:	3e10      	subs	r6, #16
   8888e:	2e10      	cmp	r6, #16
   88890:	f108 0808 	add.w	r8, r8, #8
   88894:	dd15      	ble.n	888c2 <_svfprintf_r+0xcf2>
   88896:	3701      	adds	r7, #1
   88898:	3210      	adds	r2, #16
   8889a:	2f07      	cmp	r7, #7
   8889c:	9227      	str	r2, [sp, #156]	; 0x9c
   8889e:	9726      	str	r7, [sp, #152]	; 0x98
   888a0:	e888 0820 	stmia.w	r8, {r5, fp}
   888a4:	ddf2      	ble.n	8888c <_svfprintf_r+0xcbc>
   888a6:	aa25      	add	r2, sp, #148	; 0x94
   888a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   888aa:	4620      	mov	r0, r4
   888ac:	f004 f8ec 	bl	8ca88 <__ssprint_r>
   888b0:	2800      	cmp	r0, #0
   888b2:	f47f aa6a 	bne.w	87d8a <_svfprintf_r+0x1ba>
   888b6:	3e10      	subs	r6, #16
   888b8:	2e10      	cmp	r6, #16
   888ba:	46c8      	mov	r8, r9
   888bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   888be:	9f26      	ldr	r7, [sp, #152]	; 0x98
   888c0:	dce9      	bgt.n	88896 <_svfprintf_r+0xcc6>
   888c2:	4614      	mov	r4, r2
   888c4:	3701      	adds	r7, #1
   888c6:	4434      	add	r4, r6
   888c8:	2f07      	cmp	r7, #7
   888ca:	9427      	str	r4, [sp, #156]	; 0x9c
   888cc:	9726      	str	r7, [sp, #152]	; 0x98
   888ce:	e888 0060 	stmia.w	r8, {r5, r6}
   888d2:	f77f ae9a 	ble.w	8860a <_svfprintf_r+0xa3a>
   888d6:	aa25      	add	r2, sp, #148	; 0x94
   888d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   888da:	980c      	ldr	r0, [sp, #48]	; 0x30
   888dc:	f004 f8d4 	bl	8ca88 <__ssprint_r>
   888e0:	2800      	cmp	r0, #0
   888e2:	f47f aa52 	bne.w	87d8a <_svfprintf_r+0x1ba>
   888e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   888e8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   888ea:	46c8      	mov	r8, r9
   888ec:	e68f      	b.n	8860e <_svfprintf_r+0xa3e>
   888ee:	3204      	adds	r2, #4
   888f0:	681c      	ldr	r4, [r3, #0]
   888f2:	2500      	movs	r5, #0
   888f4:	2301      	movs	r3, #1
   888f6:	920f      	str	r2, [sp, #60]	; 0x3c
   888f8:	f7ff ba68 	b.w	87dcc <_svfprintf_r+0x1fc>
   888fc:	681c      	ldr	r4, [r3, #0]
   888fe:	3304      	adds	r3, #4
   88900:	930f      	str	r3, [sp, #60]	; 0x3c
   88902:	2500      	movs	r5, #0
   88904:	e42a      	b.n	8815c <_svfprintf_r+0x58c>
   88906:	681c      	ldr	r4, [r3, #0]
   88908:	3304      	adds	r3, #4
   8890a:	17e5      	asrs	r5, r4, #31
   8890c:	4622      	mov	r2, r4
   8890e:	930f      	str	r3, [sp, #60]	; 0x3c
   88910:	462b      	mov	r3, r5
   88912:	2a00      	cmp	r2, #0
   88914:	f173 0300 	sbcs.w	r3, r3, #0
   88918:	f6bf ac68 	bge.w	881ec <_svfprintf_r+0x61c>
   8891c:	272d      	movs	r7, #45	; 0x2d
   8891e:	4264      	negs	r4, r4
   88920:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88924:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   88928:	2301      	movs	r3, #1
   8892a:	f7ff ba53 	b.w	87dd4 <_svfprintf_r+0x204>
   8892e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88930:	2500      	movs	r5, #0
   88932:	460a      	mov	r2, r1
   88934:	3204      	adds	r2, #4
   88936:	680c      	ldr	r4, [r1, #0]
   88938:	920f      	str	r2, [sp, #60]	; 0x3c
   8893a:	f7ff ba47 	b.w	87dcc <_svfprintf_r+0x1fc>
   8893e:	4614      	mov	r4, r2
   88940:	3301      	adds	r3, #1
   88942:	4434      	add	r4, r6
   88944:	2b07      	cmp	r3, #7
   88946:	9427      	str	r4, [sp, #156]	; 0x9c
   88948:	9326      	str	r3, [sp, #152]	; 0x98
   8894a:	e888 0060 	stmia.w	r8, {r5, r6}
   8894e:	f77f ab2f 	ble.w	87fb0 <_svfprintf_r+0x3e0>
   88952:	e6e0      	b.n	88716 <_svfprintf_r+0xb46>
   88954:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88958:	2301      	movs	r3, #1
   8895a:	ae42      	add	r6, sp, #264	; 0x108
   8895c:	3430      	adds	r4, #48	; 0x30
   8895e:	f8cd b01c 	str.w	fp, [sp, #28]
   88962:	f806 4d41 	strb.w	r4, [r6, #-65]!
   88966:	930e      	str	r3, [sp, #56]	; 0x38
   88968:	f7ff ba4e 	b.w	87e08 <_svfprintf_r+0x238>
   8896c:	4635      	mov	r5, r6
   8896e:	460c      	mov	r4, r1
   88970:	4646      	mov	r6, r8
   88972:	4690      	mov	r8, r2
   88974:	3301      	adds	r3, #1
   88976:	443c      	add	r4, r7
   88978:	2b07      	cmp	r3, #7
   8897a:	9427      	str	r4, [sp, #156]	; 0x9c
   8897c:	9326      	str	r3, [sp, #152]	; 0x98
   8897e:	e888 00a0 	stmia.w	r8, {r5, r7}
   88982:	f300 8246 	bgt.w	88e12 <_svfprintf_r+0x1242>
   88986:	f108 0808 	add.w	r8, r8, #8
   8898a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8898c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8898e:	429a      	cmp	r2, r3
   88990:	db45      	blt.n	88a1e <_svfprintf_r+0xe4e>
   88992:	9b07      	ldr	r3, [sp, #28]
   88994:	07d9      	lsls	r1, r3, #31
   88996:	d442      	bmi.n	88a1e <_svfprintf_r+0xe4e>
   88998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8899a:	9812      	ldr	r0, [sp, #72]	; 0x48
   8899c:	1a9a      	subs	r2, r3, r2
   8899e:	1a1d      	subs	r5, r3, r0
   889a0:	4295      	cmp	r5, r2
   889a2:	bfa8      	it	ge
   889a4:	4615      	movge	r5, r2
   889a6:	2d00      	cmp	r5, #0
   889a8:	dd0e      	ble.n	889c8 <_svfprintf_r+0xdf8>
   889aa:	9926      	ldr	r1, [sp, #152]	; 0x98
   889ac:	4406      	add	r6, r0
   889ae:	3101      	adds	r1, #1
   889b0:	442c      	add	r4, r5
   889b2:	2907      	cmp	r1, #7
   889b4:	f8c8 6000 	str.w	r6, [r8]
   889b8:	9427      	str	r4, [sp, #156]	; 0x9c
   889ba:	f8c8 5004 	str.w	r5, [r8, #4]
   889be:	9126      	str	r1, [sp, #152]	; 0x98
   889c0:	f300 8216 	bgt.w	88df0 <_svfprintf_r+0x1220>
   889c4:	f108 0808 	add.w	r8, r8, #8
   889c8:	2d00      	cmp	r5, #0
   889ca:	bfb4      	ite	lt
   889cc:	4616      	movlt	r6, r2
   889ce:	1b56      	subge	r6, r2, r5
   889d0:	2e00      	cmp	r6, #0
   889d2:	f77f aaef 	ble.w	87fb4 <_svfprintf_r+0x3e4>
   889d6:	2e10      	cmp	r6, #16
   889d8:	f340 82f3 	ble.w	88fc2 <_svfprintf_r+0x13f2>
   889dc:	4622      	mov	r2, r4
   889de:	2710      	movs	r7, #16
   889e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   889e2:	4d3a      	ldr	r5, [pc, #232]	; (88acc <_svfprintf_r+0xefc>)
   889e4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   889e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   889ea:	e004      	b.n	889f6 <_svfprintf_r+0xe26>
   889ec:	f108 0808 	add.w	r8, r8, #8
   889f0:	3e10      	subs	r6, #16
   889f2:	2e10      	cmp	r6, #16
   889f4:	dda3      	ble.n	8893e <_svfprintf_r+0xd6e>
   889f6:	3301      	adds	r3, #1
   889f8:	3210      	adds	r2, #16
   889fa:	2b07      	cmp	r3, #7
   889fc:	9227      	str	r2, [sp, #156]	; 0x9c
   889fe:	9326      	str	r3, [sp, #152]	; 0x98
   88a00:	e888 00a0 	stmia.w	r8, {r5, r7}
   88a04:	ddf2      	ble.n	889ec <_svfprintf_r+0xe1c>
   88a06:	aa25      	add	r2, sp, #148	; 0x94
   88a08:	4621      	mov	r1, r4
   88a0a:	4658      	mov	r0, fp
   88a0c:	f004 f83c 	bl	8ca88 <__ssprint_r>
   88a10:	2800      	cmp	r0, #0
   88a12:	f47f a9ba 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88a16:	46c8      	mov	r8, r9
   88a18:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88a1c:	e7e8      	b.n	889f0 <_svfprintf_r+0xe20>
   88a1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88a20:	9819      	ldr	r0, [sp, #100]	; 0x64
   88a22:	3301      	adds	r3, #1
   88a24:	991a      	ldr	r1, [sp, #104]	; 0x68
   88a26:	4404      	add	r4, r0
   88a28:	2b07      	cmp	r3, #7
   88a2a:	9427      	str	r4, [sp, #156]	; 0x9c
   88a2c:	f8c8 1000 	str.w	r1, [r8]
   88a30:	f8c8 0004 	str.w	r0, [r8, #4]
   88a34:	9326      	str	r3, [sp, #152]	; 0x98
   88a36:	f300 81cf 	bgt.w	88dd8 <_svfprintf_r+0x1208>
   88a3a:	f108 0808 	add.w	r8, r8, #8
   88a3e:	e7ab      	b.n	88998 <_svfprintf_r+0xdc8>
   88a40:	9b07      	ldr	r3, [sp, #28]
   88a42:	07da      	lsls	r2, r3, #31
   88a44:	f53f adad 	bmi.w	885a2 <_svfprintf_r+0x9d2>
   88a48:	2301      	movs	r3, #1
   88a4a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88a4c:	441c      	add	r4, r3
   88a4e:	441f      	add	r7, r3
   88a50:	2f07      	cmp	r7, #7
   88a52:	9427      	str	r4, [sp, #156]	; 0x9c
   88a54:	f8c8 6000 	str.w	r6, [r8]
   88a58:	9726      	str	r7, [sp, #152]	; 0x98
   88a5a:	f8c8 3004 	str.w	r3, [r8, #4]
   88a5e:	f77f add4 	ble.w	8860a <_svfprintf_r+0xa3a>
   88a62:	aa25      	add	r2, sp, #148	; 0x94
   88a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88a66:	980c      	ldr	r0, [sp, #48]	; 0x30
   88a68:	f004 f80e 	bl	8ca88 <__ssprint_r>
   88a6c:	2800      	cmp	r0, #0
   88a6e:	f47f a98c 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88a72:	46c8      	mov	r8, r9
   88a74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88a76:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88a78:	e5c9      	b.n	8860e <_svfprintf_r+0xa3e>
   88a7a:	aa25      	add	r2, sp, #148	; 0x94
   88a7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88a7e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88a80:	f004 f802 	bl	8ca88 <__ssprint_r>
   88a84:	2800      	cmp	r0, #0
   88a86:	f47f a980 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88a8a:	46c8      	mov	r8, r9
   88a8c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88a8e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88a90:	e596      	b.n	885c0 <_svfprintf_r+0x9f0>
   88a92:	aa25      	add	r2, sp, #148	; 0x94
   88a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88a96:	980c      	ldr	r0, [sp, #48]	; 0x30
   88a98:	f003 fff6 	bl	8ca88 <__ssprint_r>
   88a9c:	2800      	cmp	r0, #0
   88a9e:	f47f a974 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88aa2:	46c8      	mov	r8, r9
   88aa4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88aa6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   88aa8:	e599      	b.n	885de <_svfprintf_r+0xa0e>
   88aaa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   88aac:	3407      	adds	r4, #7
   88aae:	f024 0407 	bic.w	r4, r4, #7
   88ab2:	f104 0108 	add.w	r1, r4, #8
   88ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
   88aba:	910f      	str	r1, [sp, #60]	; 0x3c
   88abc:	4614      	mov	r4, r2
   88abe:	461d      	mov	r5, r3
   88ac0:	f7ff bb8f 	b.w	881e2 <_svfprintf_r+0x612>
   88ac4:	464e      	mov	r6, r9
   88ac6:	f7ff b99f 	b.w	87e08 <_svfprintf_r+0x238>
   88aca:	bf00      	nop
   88acc:	0008db68 	.word	0x0008db68
   88ad0:	aa25      	add	r2, sp, #148	; 0x94
   88ad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88ad4:	980c      	ldr	r0, [sp, #48]	; 0x30
   88ad6:	f003 ffd7 	bl	8ca88 <__ssprint_r>
   88ada:	2800      	cmp	r0, #0
   88adc:	f47f a955 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88ae0:	46c8      	mov	r8, r9
   88ae2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88ae4:	f7ff ba16 	b.w	87f14 <_svfprintf_r+0x344>
   88ae8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   88aea:	4622      	mov	r2, r4
   88aec:	4620      	mov	r0, r4
   88aee:	9c14      	ldr	r4, [sp, #80]	; 0x50
   88af0:	4623      	mov	r3, r4
   88af2:	4621      	mov	r1, r4
   88af4:	f004 fe94 	bl	8d820 <__aeabi_dcmpun>
   88af8:	2800      	cmp	r0, #0
   88afa:	f040 8273 	bne.w	88fe4 <_svfprintf_r+0x1414>
   88afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88b00:	3301      	adds	r3, #1
   88b02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88b04:	f023 0320 	bic.w	r3, r3, #32
   88b08:	930e      	str	r3, [sp, #56]	; 0x38
   88b0a:	f000 819c 	beq.w	88e46 <_svfprintf_r+0x1276>
   88b0e:	2b47      	cmp	r3, #71	; 0x47
   88b10:	f000 80d6 	beq.w	88cc0 <_svfprintf_r+0x10f0>
   88b14:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   88b18:	9307      	str	r3, [sp, #28]
   88b1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88b1c:	1e1f      	subs	r7, r3, #0
   88b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88b20:	9308      	str	r3, [sp, #32]
   88b22:	bfb7      	itett	lt
   88b24:	463b      	movlt	r3, r7
   88b26:	2300      	movge	r3, #0
   88b28:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   88b2c:	232d      	movlt	r3, #45	; 0x2d
   88b2e:	9310      	str	r3, [sp, #64]	; 0x40
   88b30:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88b32:	2b66      	cmp	r3, #102	; 0x66
   88b34:	f000 8190 	beq.w	88e58 <_svfprintf_r+0x1288>
   88b38:	2b46      	cmp	r3, #70	; 0x46
   88b3a:	f000 80a4 	beq.w	88c86 <_svfprintf_r+0x10b6>
   88b3e:	2002      	movs	r0, #2
   88b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88b42:	a923      	add	r1, sp, #140	; 0x8c
   88b44:	2b45      	cmp	r3, #69	; 0x45
   88b46:	bf0a      	itet	eq
   88b48:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   88b4a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   88b4c:	1c5d      	addeq	r5, r3, #1
   88b4e:	e88d 0021 	stmia.w	sp, {r0, r5}
   88b52:	9104      	str	r1, [sp, #16]
   88b54:	a820      	add	r0, sp, #128	; 0x80
   88b56:	a91f      	add	r1, sp, #124	; 0x7c
   88b58:	463b      	mov	r3, r7
   88b5a:	9003      	str	r0, [sp, #12]
   88b5c:	9a08      	ldr	r2, [sp, #32]
   88b5e:	9102      	str	r1, [sp, #8]
   88b60:	980c      	ldr	r0, [sp, #48]	; 0x30
   88b62:	f001 fa85 	bl	8a070 <_dtoa_r>
   88b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88b68:	4606      	mov	r6, r0
   88b6a:	2b67      	cmp	r3, #103	; 0x67
   88b6c:	f040 81ba 	bne.w	88ee4 <_svfprintf_r+0x1314>
   88b70:	f01b 0f01 	tst.w	fp, #1
   88b74:	f000 8223 	beq.w	88fbe <_svfprintf_r+0x13ee>
   88b78:	1974      	adds	r4, r6, r5
   88b7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   88b7c:	9808      	ldr	r0, [sp, #32]
   88b7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88b80:	4639      	mov	r1, r7
   88b82:	f004 fe1b 	bl	8d7bc <__aeabi_dcmpeq>
   88b86:	2800      	cmp	r0, #0
   88b88:	f040 8124 	bne.w	88dd4 <_svfprintf_r+0x1204>
   88b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88b8e:	42a3      	cmp	r3, r4
   88b90:	d206      	bcs.n	88ba0 <_svfprintf_r+0xfd0>
   88b92:	2130      	movs	r1, #48	; 0x30
   88b94:	1c5a      	adds	r2, r3, #1
   88b96:	9223      	str	r2, [sp, #140]	; 0x8c
   88b98:	7019      	strb	r1, [r3, #0]
   88b9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88b9c:	429c      	cmp	r4, r3
   88b9e:	d8f9      	bhi.n	88b94 <_svfprintf_r+0xfc4>
   88ba0:	1b9b      	subs	r3, r3, r6
   88ba2:	9313      	str	r3, [sp, #76]	; 0x4c
   88ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88ba6:	2b47      	cmp	r3, #71	; 0x47
   88ba8:	f000 80a2 	beq.w	88cf0 <_svfprintf_r+0x1120>
   88bac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88bae:	2b65      	cmp	r3, #101	; 0x65
   88bb0:	f340 81a7 	ble.w	88f02 <_svfprintf_r+0x1332>
   88bb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88bb6:	2b66      	cmp	r3, #102	; 0x66
   88bb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88bba:	9312      	str	r3, [sp, #72]	; 0x48
   88bbc:	f000 8171 	beq.w	88ea2 <_svfprintf_r+0x12d2>
   88bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88bc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88bc4:	4619      	mov	r1, r3
   88bc6:	4291      	cmp	r1, r2
   88bc8:	f300 815d 	bgt.w	88e86 <_svfprintf_r+0x12b6>
   88bcc:	f01b 0f01 	tst.w	fp, #1
   88bd0:	f040 81f0 	bne.w	88fb4 <_svfprintf_r+0x13e4>
   88bd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88bd8:	9308      	str	r3, [sp, #32]
   88bda:	2367      	movs	r3, #103	; 0x67
   88bdc:	920e      	str	r2, [sp, #56]	; 0x38
   88bde:	9311      	str	r3, [sp, #68]	; 0x44
   88be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88be2:	2b00      	cmp	r3, #0
   88be4:	d17d      	bne.n	88ce2 <_svfprintf_r+0x1112>
   88be6:	930a      	str	r3, [sp, #40]	; 0x28
   88be8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   88bec:	f7ff b914 	b.w	87e18 <_svfprintf_r+0x248>
   88bf0:	f024 0407 	bic.w	r4, r4, #7
   88bf4:	6823      	ldr	r3, [r4, #0]
   88bf6:	9315      	str	r3, [sp, #84]	; 0x54
   88bf8:	6863      	ldr	r3, [r4, #4]
   88bfa:	9314      	str	r3, [sp, #80]	; 0x50
   88bfc:	f104 0308 	add.w	r3, r4, #8
   88c00:	930f      	str	r3, [sp, #60]	; 0x3c
   88c02:	f7ff bb2f 	b.w	88264 <_svfprintf_r+0x694>
   88c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88c08:	6813      	ldr	r3, [r2, #0]
   88c0a:	3204      	adds	r2, #4
   88c0c:	920f      	str	r2, [sp, #60]	; 0x3c
   88c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88c10:	601a      	str	r2, [r3, #0]
   88c12:	f7ff b804 	b.w	87c1e <_svfprintf_r+0x4e>
   88c16:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88c18:	4daf      	ldr	r5, [pc, #700]	; (88ed8 <_svfprintf_r+0x1308>)
   88c1a:	f7ff b9ad 	b.w	87f78 <_svfprintf_r+0x3a8>
   88c1e:	aa25      	add	r2, sp, #148	; 0x94
   88c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88c22:	980c      	ldr	r0, [sp, #48]	; 0x30
   88c24:	f003 ff30 	bl	8ca88 <__ssprint_r>
   88c28:	2800      	cmp	r0, #0
   88c2a:	f47f a8ae 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88c2e:	46c8      	mov	r8, r9
   88c30:	e431      	b.n	88496 <_svfprintf_r+0x8c6>
   88c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88c34:	4613      	mov	r3, r2
   88c36:	3304      	adds	r3, #4
   88c38:	930f      	str	r3, [sp, #60]	; 0x3c
   88c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88c3c:	6811      	ldr	r1, [r2, #0]
   88c3e:	17dd      	asrs	r5, r3, #31
   88c40:	461a      	mov	r2, r3
   88c42:	462b      	mov	r3, r5
   88c44:	e9c1 2300 	strd	r2, r3, [r1]
   88c48:	f7fe bfe9 	b.w	87c1e <_svfprintf_r+0x4e>
   88c4c:	aa25      	add	r2, sp, #148	; 0x94
   88c4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88c50:	980c      	ldr	r0, [sp, #48]	; 0x30
   88c52:	f003 ff19 	bl	8ca88 <__ssprint_r>
   88c56:	2800      	cmp	r0, #0
   88c58:	f47f a897 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88c5c:	46c8      	mov	r8, r9
   88c5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88c60:	e432      	b.n	884c8 <_svfprintf_r+0x8f8>
   88c62:	f108 0808 	add.w	r8, r8, #8
   88c66:	e52f      	b.n	886c8 <_svfprintf_r+0xaf8>
   88c68:	2140      	movs	r1, #64	; 0x40
   88c6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   88c6c:	f002 fe68 	bl	8b940 <_malloc_r>
   88c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   88c72:	6010      	str	r0, [r2, #0]
   88c74:	6110      	str	r0, [r2, #16]
   88c76:	2800      	cmp	r0, #0
   88c78:	f000 8214 	beq.w	890a4 <_svfprintf_r+0x14d4>
   88c7c:	2340      	movs	r3, #64	; 0x40
   88c7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   88c80:	6153      	str	r3, [r2, #20]
   88c82:	f7fe bfbc 	b.w	87bfe <_svfprintf_r+0x2e>
   88c86:	2003      	movs	r0, #3
   88c88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   88c8a:	a923      	add	r1, sp, #140	; 0x8c
   88c8c:	e88d 0011 	stmia.w	sp, {r0, r4}
   88c90:	9104      	str	r1, [sp, #16]
   88c92:	a820      	add	r0, sp, #128	; 0x80
   88c94:	a91f      	add	r1, sp, #124	; 0x7c
   88c96:	9003      	str	r0, [sp, #12]
   88c98:	9a08      	ldr	r2, [sp, #32]
   88c9a:	463b      	mov	r3, r7
   88c9c:	9102      	str	r1, [sp, #8]
   88c9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88ca0:	f001 f9e6 	bl	8a070 <_dtoa_r>
   88ca4:	4625      	mov	r5, r4
   88ca6:	4606      	mov	r6, r0
   88ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88caa:	1974      	adds	r4, r6, r5
   88cac:	2b46      	cmp	r3, #70	; 0x46
   88cae:	f47f af64 	bne.w	88b7a <_svfprintf_r+0xfaa>
   88cb2:	7833      	ldrb	r3, [r6, #0]
   88cb4:	2b30      	cmp	r3, #48	; 0x30
   88cb6:	f000 8187 	beq.w	88fc8 <_svfprintf_r+0x13f8>
   88cba:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   88cbc:	442c      	add	r4, r5
   88cbe:	e75c      	b.n	88b7a <_svfprintf_r+0xfaa>
   88cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88cc2:	2b00      	cmp	r3, #0
   88cc4:	bf08      	it	eq
   88cc6:	2301      	moveq	r3, #1
   88cc8:	930a      	str	r3, [sp, #40]	; 0x28
   88cca:	e723      	b.n	88b14 <_svfprintf_r+0xf44>
   88ccc:	4630      	mov	r0, r6
   88cce:	950a      	str	r5, [sp, #40]	; 0x28
   88cd0:	f003 feac 	bl	8ca2c <strlen>
   88cd4:	940f      	str	r4, [sp, #60]	; 0x3c
   88cd6:	900e      	str	r0, [sp, #56]	; 0x38
   88cd8:	f8cd b01c 	str.w	fp, [sp, #28]
   88cdc:	4603      	mov	r3, r0
   88cde:	f7ff b9e7 	b.w	880b0 <_svfprintf_r+0x4e0>
   88ce2:	272d      	movs	r7, #45	; 0x2d
   88ce4:	2300      	movs	r3, #0
   88ce6:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   88cea:	930a      	str	r3, [sp, #40]	; 0x28
   88cec:	f7ff b895 	b.w	87e1a <_svfprintf_r+0x24a>
   88cf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88cf2:	461a      	mov	r2, r3
   88cf4:	9312      	str	r3, [sp, #72]	; 0x48
   88cf6:	3303      	adds	r3, #3
   88cf8:	db04      	blt.n	88d04 <_svfprintf_r+0x1134>
   88cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88cfc:	4619      	mov	r1, r3
   88cfe:	4291      	cmp	r1, r2
   88d00:	f6bf af5e 	bge.w	88bc0 <_svfprintf_r+0xff0>
   88d04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88d06:	3b02      	subs	r3, #2
   88d08:	9311      	str	r3, [sp, #68]	; 0x44
   88d0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88d0c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   88d10:	3b01      	subs	r3, #1
   88d12:	2b00      	cmp	r3, #0
   88d14:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   88d18:	bfb4      	ite	lt
   88d1a:	222d      	movlt	r2, #45	; 0x2d
   88d1c:	222b      	movge	r2, #43	; 0x2b
   88d1e:	931f      	str	r3, [sp, #124]	; 0x7c
   88d20:	bfb8      	it	lt
   88d22:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   88d24:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   88d28:	bfb8      	it	lt
   88d2a:	f1c3 0301 	rsblt	r3, r3, #1
   88d2e:	2b09      	cmp	r3, #9
   88d30:	f340 811f 	ble.w	88f72 <_svfprintf_r+0x13a2>
   88d34:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   88d38:	4601      	mov	r1, r0
   88d3a:	4c68      	ldr	r4, [pc, #416]	; (88edc <_svfprintf_r+0x130c>)
   88d3c:	e000      	b.n	88d40 <_svfprintf_r+0x1170>
   88d3e:	4611      	mov	r1, r2
   88d40:	fb84 5203 	smull	r5, r2, r4, r3
   88d44:	17dd      	asrs	r5, r3, #31
   88d46:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   88d4a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   88d4e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   88d52:	3230      	adds	r2, #48	; 0x30
   88d54:	2d09      	cmp	r5, #9
   88d56:	f801 2c01 	strb.w	r2, [r1, #-1]
   88d5a:	462b      	mov	r3, r5
   88d5c:	f101 32ff 	add.w	r2, r1, #4294967295
   88d60:	dced      	bgt.n	88d3e <_svfprintf_r+0x116e>
   88d62:	3330      	adds	r3, #48	; 0x30
   88d64:	3902      	subs	r1, #2
   88d66:	b2dc      	uxtb	r4, r3
   88d68:	4288      	cmp	r0, r1
   88d6a:	f802 4c01 	strb.w	r4, [r2, #-1]
   88d6e:	f240 8192 	bls.w	89096 <_svfprintf_r+0x14c6>
   88d72:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   88d76:	4613      	mov	r3, r2
   88d78:	e001      	b.n	88d7e <_svfprintf_r+0x11ae>
   88d7a:	f813 4b01 	ldrb.w	r4, [r3], #1
   88d7e:	4283      	cmp	r3, r0
   88d80:	f801 4b01 	strb.w	r4, [r1], #1
   88d84:	d1f9      	bne.n	88d7a <_svfprintf_r+0x11aa>
   88d86:	3301      	adds	r3, #1
   88d88:	1a9b      	subs	r3, r3, r2
   88d8a:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   88d8e:	4413      	add	r3, r2
   88d90:	aa21      	add	r2, sp, #132	; 0x84
   88d92:	1a9b      	subs	r3, r3, r2
   88d94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88d96:	931b      	str	r3, [sp, #108]	; 0x6c
   88d98:	2a01      	cmp	r2, #1
   88d9a:	4413      	add	r3, r2
   88d9c:	930e      	str	r3, [sp, #56]	; 0x38
   88d9e:	f340 8148 	ble.w	89032 <_svfprintf_r+0x1462>
   88da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88da4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88da6:	4413      	add	r3, r2
   88da8:	930e      	str	r3, [sp, #56]	; 0x38
   88daa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88dae:	9308      	str	r3, [sp, #32]
   88db0:	2300      	movs	r3, #0
   88db2:	9312      	str	r3, [sp, #72]	; 0x48
   88db4:	e714      	b.n	88be0 <_svfprintf_r+0x1010>
   88db6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88db8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88dba:	f7ff b876 	b.w	87eaa <_svfprintf_r+0x2da>
   88dbe:	aa25      	add	r2, sp, #148	; 0x94
   88dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88dc2:	980c      	ldr	r0, [sp, #48]	; 0x30
   88dc4:	f003 fe60 	bl	8ca88 <__ssprint_r>
   88dc8:	2800      	cmp	r0, #0
   88dca:	f47e afde 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88dce:	46c8      	mov	r8, r9
   88dd0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88dd2:	e4fb      	b.n	887cc <_svfprintf_r+0xbfc>
   88dd4:	4623      	mov	r3, r4
   88dd6:	e6e3      	b.n	88ba0 <_svfprintf_r+0xfd0>
   88dd8:	aa25      	add	r2, sp, #148	; 0x94
   88dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88ddc:	980c      	ldr	r0, [sp, #48]	; 0x30
   88dde:	f003 fe53 	bl	8ca88 <__ssprint_r>
   88de2:	2800      	cmp	r0, #0
   88de4:	f47e afd1 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88de8:	46c8      	mov	r8, r9
   88dea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   88dec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88dee:	e5d3      	b.n	88998 <_svfprintf_r+0xdc8>
   88df0:	aa25      	add	r2, sp, #148	; 0x94
   88df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88df4:	980c      	ldr	r0, [sp, #48]	; 0x30
   88df6:	f003 fe47 	bl	8ca88 <__ssprint_r>
   88dfa:	2800      	cmp	r0, #0
   88dfc:	f47e afc5 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88e00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   88e02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88e04:	46c8      	mov	r8, r9
   88e06:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88e08:	1a9a      	subs	r2, r3, r2
   88e0a:	e5dd      	b.n	889c8 <_svfprintf_r+0xdf8>
   88e0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88e0e:	f7ff b8fe 	b.w	8800e <_svfprintf_r+0x43e>
   88e12:	aa25      	add	r2, sp, #148	; 0x94
   88e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88e16:	980c      	ldr	r0, [sp, #48]	; 0x30
   88e18:	f003 fe36 	bl	8ca88 <__ssprint_r>
   88e1c:	2800      	cmp	r0, #0
   88e1e:	f47e afb4 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88e22:	46c8      	mov	r8, r9
   88e24:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88e26:	e5b0      	b.n	8898a <_svfprintf_r+0xdba>
   88e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88e2a:	4637      	mov	r7, r6
   88e2c:	2b06      	cmp	r3, #6
   88e2e:	bf28      	it	cs
   88e30:	2306      	movcs	r3, #6
   88e32:	960a      	str	r6, [sp, #40]	; 0x28
   88e34:	9612      	str	r6, [sp, #72]	; 0x48
   88e36:	9308      	str	r3, [sp, #32]
   88e38:	940f      	str	r4, [sp, #60]	; 0x3c
   88e3a:	f8cd b01c 	str.w	fp, [sp, #28]
   88e3e:	930e      	str	r3, [sp, #56]	; 0x38
   88e40:	4e27      	ldr	r6, [pc, #156]	; (88ee0 <_svfprintf_r+0x1310>)
   88e42:	f7fe bfe9 	b.w	87e18 <_svfprintf_r+0x248>
   88e46:	2306      	movs	r3, #6
   88e48:	930a      	str	r3, [sp, #40]	; 0x28
   88e4a:	e663      	b.n	88b14 <_svfprintf_r+0xf44>
   88e4c:	232d      	movs	r3, #45	; 0x2d
   88e4e:	461f      	mov	r7, r3
   88e50:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   88e54:	f7ff ba28 	b.w	882a8 <_svfprintf_r+0x6d8>
   88e58:	2003      	movs	r0, #3
   88e5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   88e5c:	a923      	add	r1, sp, #140	; 0x8c
   88e5e:	e88d 0011 	stmia.w	sp, {r0, r4}
   88e62:	9104      	str	r1, [sp, #16]
   88e64:	a820      	add	r0, sp, #128	; 0x80
   88e66:	a91f      	add	r1, sp, #124	; 0x7c
   88e68:	9003      	str	r0, [sp, #12]
   88e6a:	9a08      	ldr	r2, [sp, #32]
   88e6c:	463b      	mov	r3, r7
   88e6e:	9102      	str	r1, [sp, #8]
   88e70:	980c      	ldr	r0, [sp, #48]	; 0x30
   88e72:	f001 f8fd 	bl	8a070 <_dtoa_r>
   88e76:	4625      	mov	r5, r4
   88e78:	4606      	mov	r6, r0
   88e7a:	1904      	adds	r4, r0, r4
   88e7c:	e719      	b.n	88cb2 <_svfprintf_r+0x10e2>
   88e7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88e80:	4d15      	ldr	r5, [pc, #84]	; (88ed8 <_svfprintf_r+0x1308>)
   88e82:	f7ff bb7e 	b.w	88582 <_svfprintf_r+0x9b2>
   88e86:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88e8a:	4413      	add	r3, r2
   88e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88e8e:	930e      	str	r3, [sp, #56]	; 0x38
   88e90:	2a00      	cmp	r2, #0
   88e92:	f340 80c7 	ble.w	89024 <_svfprintf_r+0x1454>
   88e96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88e9a:	9308      	str	r3, [sp, #32]
   88e9c:	2367      	movs	r3, #103	; 0x67
   88e9e:	9311      	str	r3, [sp, #68]	; 0x44
   88ea0:	e69e      	b.n	88be0 <_svfprintf_r+0x1010>
   88ea2:	2b00      	cmp	r3, #0
   88ea4:	f340 80e1 	ble.w	8906a <_svfprintf_r+0x149a>
   88ea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88eaa:	2a00      	cmp	r2, #0
   88eac:	f040 80b0 	bne.w	89010 <_svfprintf_r+0x1440>
   88eb0:	f01b 0f01 	tst.w	fp, #1
   88eb4:	f040 80ac 	bne.w	89010 <_svfprintf_r+0x1440>
   88eb8:	9308      	str	r3, [sp, #32]
   88eba:	930e      	str	r3, [sp, #56]	; 0x38
   88ebc:	e690      	b.n	88be0 <_svfprintf_r+0x1010>
   88ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88ec0:	940f      	str	r4, [sp, #60]	; 0x3c
   88ec2:	9308      	str	r3, [sp, #32]
   88ec4:	930e      	str	r3, [sp, #56]	; 0x38
   88ec6:	900a      	str	r0, [sp, #40]	; 0x28
   88ec8:	f8cd b01c 	str.w	fp, [sp, #28]
   88ecc:	9012      	str	r0, [sp, #72]	; 0x48
   88ece:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   88ed2:	f7fe bfa1 	b.w	87e18 <_svfprintf_r+0x248>
   88ed6:	bf00      	nop
   88ed8:	0008db68 	.word	0x0008db68
   88edc:	66666667 	.word	0x66666667
   88ee0:	0008db4c 	.word	0x0008db4c
   88ee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88ee6:	2b47      	cmp	r3, #71	; 0x47
   88ee8:	f47f ae46 	bne.w	88b78 <_svfprintf_r+0xfa8>
   88eec:	f01b 0f01 	tst.w	fp, #1
   88ef0:	f47f aeda 	bne.w	88ca8 <_svfprintf_r+0x10d8>
   88ef4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88ef6:	1b9b      	subs	r3, r3, r6
   88ef8:	9313      	str	r3, [sp, #76]	; 0x4c
   88efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88efc:	2b47      	cmp	r3, #71	; 0x47
   88efe:	f43f aef7 	beq.w	88cf0 <_svfprintf_r+0x1120>
   88f02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   88f04:	9312      	str	r3, [sp, #72]	; 0x48
   88f06:	e700      	b.n	88d0a <_svfprintf_r+0x113a>
   88f08:	2000      	movs	r0, #0
   88f0a:	900a      	str	r0, [sp, #40]	; 0x28
   88f0c:	f7fe bebc 	b.w	87c88 <_svfprintf_r+0xb8>
   88f10:	424f      	negs	r7, r1
   88f12:	3110      	adds	r1, #16
   88f14:	da35      	bge.n	88f82 <_svfprintf_r+0x13b2>
   88f16:	2410      	movs	r4, #16
   88f18:	4d6a      	ldr	r5, [pc, #424]	; (890c4 <_svfprintf_r+0x14f4>)
   88f1a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88f1e:	e004      	b.n	88f2a <_svfprintf_r+0x135a>
   88f20:	f108 0808 	add.w	r8, r8, #8
   88f24:	3f10      	subs	r7, #16
   88f26:	2f10      	cmp	r7, #16
   88f28:	dd2c      	ble.n	88f84 <_svfprintf_r+0x13b4>
   88f2a:	3301      	adds	r3, #1
   88f2c:	3210      	adds	r2, #16
   88f2e:	2b07      	cmp	r3, #7
   88f30:	9227      	str	r2, [sp, #156]	; 0x9c
   88f32:	9326      	str	r3, [sp, #152]	; 0x98
   88f34:	f8c8 5000 	str.w	r5, [r8]
   88f38:	f8c8 4004 	str.w	r4, [r8, #4]
   88f3c:	ddf0      	ble.n	88f20 <_svfprintf_r+0x1350>
   88f3e:	aa25      	add	r2, sp, #148	; 0x94
   88f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88f42:	4658      	mov	r0, fp
   88f44:	f003 fda0 	bl	8ca88 <__ssprint_r>
   88f48:	2800      	cmp	r0, #0
   88f4a:	f47e af1e 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88f4e:	46c8      	mov	r8, r9
   88f50:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88f54:	e7e6      	b.n	88f24 <_svfprintf_r+0x1354>
   88f56:	aa25      	add	r2, sp, #148	; 0x94
   88f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88f5a:	980c      	ldr	r0, [sp, #48]	; 0x30
   88f5c:	f003 fd94 	bl	8ca88 <__ssprint_r>
   88f60:	2800      	cmp	r0, #0
   88f62:	f47e af12 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88f66:	46c8      	mov	r8, r9
   88f68:	991f      	ldr	r1, [sp, #124]	; 0x7c
   88f6a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88f6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88f6e:	f7ff bbc3 	b.w	886f8 <_svfprintf_r+0xb28>
   88f72:	2230      	movs	r2, #48	; 0x30
   88f74:	4413      	add	r3, r2
   88f76:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   88f7a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   88f7e:	ab22      	add	r3, sp, #136	; 0x88
   88f80:	e706      	b.n	88d90 <_svfprintf_r+0x11c0>
   88f82:	4d50      	ldr	r5, [pc, #320]	; (890c4 <_svfprintf_r+0x14f4>)
   88f84:	3301      	adds	r3, #1
   88f86:	443a      	add	r2, r7
   88f88:	2b07      	cmp	r3, #7
   88f8a:	e888 00a0 	stmia.w	r8, {r5, r7}
   88f8e:	9227      	str	r2, [sp, #156]	; 0x9c
   88f90:	9326      	str	r3, [sp, #152]	; 0x98
   88f92:	f108 0808 	add.w	r8, r8, #8
   88f96:	f77f abb2 	ble.w	886fe <_svfprintf_r+0xb2e>
   88f9a:	aa25      	add	r2, sp, #148	; 0x94
   88f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88f9e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88fa0:	f003 fd72 	bl	8ca88 <__ssprint_r>
   88fa4:	2800      	cmp	r0, #0
   88fa6:	f47e aef0 	bne.w	87d8a <_svfprintf_r+0x1ba>
   88faa:	46c8      	mov	r8, r9
   88fac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88fae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88fb0:	f7ff bba5 	b.w	886fe <_svfprintf_r+0xb2e>
   88fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88fb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88fb8:	4413      	add	r3, r2
   88fba:	930e      	str	r3, [sp, #56]	; 0x38
   88fbc:	e76b      	b.n	88e96 <_svfprintf_r+0x12c6>
   88fbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88fc0:	e5ee      	b.n	88ba0 <_svfprintf_r+0xfd0>
   88fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88fc4:	4d3f      	ldr	r5, [pc, #252]	; (890c4 <_svfprintf_r+0x14f4>)
   88fc6:	e4bb      	b.n	88940 <_svfprintf_r+0xd70>
   88fc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   88fca:	9808      	ldr	r0, [sp, #32]
   88fcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88fce:	4639      	mov	r1, r7
   88fd0:	f004 fbf4 	bl	8d7bc <__aeabi_dcmpeq>
   88fd4:	2800      	cmp	r0, #0
   88fd6:	f47f ae70 	bne.w	88cba <_svfprintf_r+0x10ea>
   88fda:	f1c5 0501 	rsb	r5, r5, #1
   88fde:	951f      	str	r5, [sp, #124]	; 0x7c
   88fe0:	442c      	add	r4, r5
   88fe2:	e5ca      	b.n	88b7a <_svfprintf_r+0xfaa>
   88fe4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88fe6:	4e38      	ldr	r6, [pc, #224]	; (890c8 <_svfprintf_r+0x14f8>)
   88fe8:	2b00      	cmp	r3, #0
   88fea:	bfbe      	ittt	lt
   88fec:	232d      	movlt	r3, #45	; 0x2d
   88fee:	461f      	movlt	r7, r3
   88ff0:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   88ff4:	f04f 0303 	mov.w	r3, #3
   88ff8:	461a      	mov	r2, r3
   88ffa:	9308      	str	r3, [sp, #32]
   88ffc:	f04f 0300 	mov.w	r3, #0
   89000:	bfa8      	it	ge
   89002:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   89006:	4619      	mov	r1, r3
   89008:	930a      	str	r3, [sp, #40]	; 0x28
   8900a:	4b30      	ldr	r3, [pc, #192]	; (890cc <_svfprintf_r+0x14fc>)
   8900c:	f7ff b954 	b.w	882b8 <_svfprintf_r+0x6e8>
   89010:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89012:	9a19      	ldr	r2, [sp, #100]	; 0x64
   89014:	4413      	add	r3, r2
   89016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89018:	441a      	add	r2, r3
   8901a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8901e:	920e      	str	r2, [sp, #56]	; 0x38
   89020:	9308      	str	r3, [sp, #32]
   89022:	e5dd      	b.n	88be0 <_svfprintf_r+0x1010>
   89024:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   89028:	f1c3 0301 	rsb	r3, r3, #1
   8902c:	441a      	add	r2, r3
   8902e:	4613      	mov	r3, r2
   89030:	e7c3      	b.n	88fba <_svfprintf_r+0x13ea>
   89032:	f01b 0301 	ands.w	r3, fp, #1
   89036:	9312      	str	r3, [sp, #72]	; 0x48
   89038:	f47f aeb3 	bne.w	88da2 <_svfprintf_r+0x11d2>
   8903c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8903e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   89042:	9308      	str	r3, [sp, #32]
   89044:	e5cc      	b.n	88be0 <_svfprintf_r+0x1010>
   89046:	4d1f      	ldr	r5, [pc, #124]	; (890c4 <_svfprintf_r+0x14f4>)
   89048:	e43c      	b.n	888c4 <_svfprintf_r+0xcf4>
   8904a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8904c:	4d1d      	ldr	r5, [pc, #116]	; (890c4 <_svfprintf_r+0x14f4>)
   8904e:	e491      	b.n	88974 <_svfprintf_r+0xda4>
   89050:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   89052:	f89a 3001 	ldrb.w	r3, [sl, #1]
   89056:	6828      	ldr	r0, [r5, #0]
   89058:	46a2      	mov	sl, r4
   8905a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8905e:	900a      	str	r0, [sp, #40]	; 0x28
   89060:	4628      	mov	r0, r5
   89062:	3004      	adds	r0, #4
   89064:	900f      	str	r0, [sp, #60]	; 0x3c
   89066:	f7fe be0d 	b.w	87c84 <_svfprintf_r+0xb4>
   8906a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8906c:	b913      	cbnz	r3, 89074 <_svfprintf_r+0x14a4>
   8906e:	f01b 0f01 	tst.w	fp, #1
   89072:	d002      	beq.n	8907a <_svfprintf_r+0x14aa>
   89074:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89076:	3301      	adds	r3, #1
   89078:	e7cd      	b.n	89016 <_svfprintf_r+0x1446>
   8907a:	2301      	movs	r3, #1
   8907c:	e71c      	b.n	88eb8 <_svfprintf_r+0x12e8>
   8907e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   89082:	f7ff b980 	b.w	88386 <_svfprintf_r+0x7b6>
   89086:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8908a:	f7ff b93a 	b.w	88302 <_svfprintf_r+0x732>
   8908e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   89092:	f7ff b84f 	b.w	88134 <_svfprintf_r+0x564>
   89096:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8909a:	e679      	b.n	88d90 <_svfprintf_r+0x11c0>
   8909c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   890a0:	f7ff b9b2 	b.w	88408 <_svfprintf_r+0x838>
   890a4:	f04f 32ff 	mov.w	r2, #4294967295
   890a8:	230c      	movs	r3, #12
   890aa:	9209      	str	r2, [sp, #36]	; 0x24
   890ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   890ae:	6013      	str	r3, [r2, #0]
   890b0:	f7fe be74 	b.w	87d9c <_svfprintf_r+0x1cc>
   890b4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   890b8:	f7ff b8c4 	b.w	88244 <_svfprintf_r+0x674>
   890bc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   890c0:	f7ff b878 	b.w	881b4 <_svfprintf_r+0x5e4>
   890c4:	0008db68 	.word	0x0008db68
   890c8:	0008db20 	.word	0x0008db20
   890cc:	0008db1c 	.word	0x0008db1c

000890d0 <__sprint_r.part.0>:
   890d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   890d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   890d6:	4693      	mov	fp, r2
   890d8:	049c      	lsls	r4, r3, #18
   890da:	d52f      	bpl.n	8913c <__sprint_r.part.0+0x6c>
   890dc:	6893      	ldr	r3, [r2, #8]
   890de:	6812      	ldr	r2, [r2, #0]
   890e0:	b353      	cbz	r3, 89138 <__sprint_r.part.0+0x68>
   890e2:	460e      	mov	r6, r1
   890e4:	4607      	mov	r7, r0
   890e6:	f102 0908 	add.w	r9, r2, #8
   890ea:	e919 0420 	ldmdb	r9, {r5, sl}
   890ee:	ea5f 089a 	movs.w	r8, sl, lsr #2
   890f2:	d017      	beq.n	89124 <__sprint_r.part.0+0x54>
   890f4:	2400      	movs	r4, #0
   890f6:	3d04      	subs	r5, #4
   890f8:	e001      	b.n	890fe <__sprint_r.part.0+0x2e>
   890fa:	45a0      	cmp	r8, r4
   890fc:	d010      	beq.n	89120 <__sprint_r.part.0+0x50>
   890fe:	4632      	mov	r2, r6
   89100:	f855 1f04 	ldr.w	r1, [r5, #4]!
   89104:	4638      	mov	r0, r7
   89106:	f002 f86b 	bl	8b1e0 <_fputwc_r>
   8910a:	1c43      	adds	r3, r0, #1
   8910c:	f104 0401 	add.w	r4, r4, #1
   89110:	d1f3      	bne.n	890fa <__sprint_r.part.0+0x2a>
   89112:	2300      	movs	r3, #0
   89114:	f8cb 3008 	str.w	r3, [fp, #8]
   89118:	f8cb 3004 	str.w	r3, [fp, #4]
   8911c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89120:	f8db 3008 	ldr.w	r3, [fp, #8]
   89124:	f02a 0a03 	bic.w	sl, sl, #3
   89128:	eba3 030a 	sub.w	r3, r3, sl
   8912c:	f8cb 3008 	str.w	r3, [fp, #8]
   89130:	f109 0908 	add.w	r9, r9, #8
   89134:	2b00      	cmp	r3, #0
   89136:	d1d8      	bne.n	890ea <__sprint_r.part.0+0x1a>
   89138:	2000      	movs	r0, #0
   8913a:	e7ea      	b.n	89112 <__sprint_r.part.0+0x42>
   8913c:	f002 f9ba 	bl	8b4b4 <__sfvwrite_r>
   89140:	2300      	movs	r3, #0
   89142:	f8cb 3008 	str.w	r3, [fp, #8]
   89146:	f8cb 3004 	str.w	r3, [fp, #4]
   8914a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8914e:	bf00      	nop

00089150 <_vfiprintf_r>:
   89150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89154:	b0ad      	sub	sp, #180	; 0xb4
   89156:	461d      	mov	r5, r3
   89158:	468b      	mov	fp, r1
   8915a:	4690      	mov	r8, r2
   8915c:	9307      	str	r3, [sp, #28]
   8915e:	9006      	str	r0, [sp, #24]
   89160:	b118      	cbz	r0, 8916a <_vfiprintf_r+0x1a>
   89162:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89164:	2b00      	cmp	r3, #0
   89166:	f000 80f3 	beq.w	89350 <_vfiprintf_r+0x200>
   8916a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8916e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   89172:	07df      	lsls	r7, r3, #31
   89174:	b281      	uxth	r1, r0
   89176:	d402      	bmi.n	8917e <_vfiprintf_r+0x2e>
   89178:	058e      	lsls	r6, r1, #22
   8917a:	f140 80fc 	bpl.w	89376 <_vfiprintf_r+0x226>
   8917e:	048c      	lsls	r4, r1, #18
   89180:	d40a      	bmi.n	89198 <_vfiprintf_r+0x48>
   89182:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   89186:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   8918a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8918e:	f8ab 100c 	strh.w	r1, [fp, #12]
   89192:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   89196:	b289      	uxth	r1, r1
   89198:	0708      	lsls	r0, r1, #28
   8919a:	f140 80b3 	bpl.w	89304 <_vfiprintf_r+0x1b4>
   8919e:	f8db 3010 	ldr.w	r3, [fp, #16]
   891a2:	2b00      	cmp	r3, #0
   891a4:	f000 80ae 	beq.w	89304 <_vfiprintf_r+0x1b4>
   891a8:	f001 031a 	and.w	r3, r1, #26
   891ac:	2b0a      	cmp	r3, #10
   891ae:	f000 80b5 	beq.w	8931c <_vfiprintf_r+0x1cc>
   891b2:	2300      	movs	r3, #0
   891b4:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   891b8:	46d1      	mov	r9, sl
   891ba:	930b      	str	r3, [sp, #44]	; 0x2c
   891bc:	9303      	str	r3, [sp, #12]
   891be:	9311      	str	r3, [sp, #68]	; 0x44
   891c0:	9310      	str	r3, [sp, #64]	; 0x40
   891c2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   891c6:	f8cd b010 	str.w	fp, [sp, #16]
   891ca:	f898 3000 	ldrb.w	r3, [r8]
   891ce:	4644      	mov	r4, r8
   891d0:	b1fb      	cbz	r3, 89212 <_vfiprintf_r+0xc2>
   891d2:	2b25      	cmp	r3, #37	; 0x25
   891d4:	d102      	bne.n	891dc <_vfiprintf_r+0x8c>
   891d6:	e01c      	b.n	89212 <_vfiprintf_r+0xc2>
   891d8:	2b25      	cmp	r3, #37	; 0x25
   891da:	d003      	beq.n	891e4 <_vfiprintf_r+0x94>
   891dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   891e0:	2b00      	cmp	r3, #0
   891e2:	d1f9      	bne.n	891d8 <_vfiprintf_r+0x88>
   891e4:	eba4 0508 	sub.w	r5, r4, r8
   891e8:	b19d      	cbz	r5, 89212 <_vfiprintf_r+0xc2>
   891ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   891ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   891ee:	3301      	adds	r3, #1
   891f0:	442a      	add	r2, r5
   891f2:	2b07      	cmp	r3, #7
   891f4:	f8c9 8000 	str.w	r8, [r9]
   891f8:	f8c9 5004 	str.w	r5, [r9, #4]
   891fc:	9211      	str	r2, [sp, #68]	; 0x44
   891fe:	9310      	str	r3, [sp, #64]	; 0x40
   89200:	dd7a      	ble.n	892f8 <_vfiprintf_r+0x1a8>
   89202:	2a00      	cmp	r2, #0
   89204:	f040 84b5 	bne.w	89b72 <_vfiprintf_r+0xa22>
   89208:	46d1      	mov	r9, sl
   8920a:	9b03      	ldr	r3, [sp, #12]
   8920c:	9210      	str	r2, [sp, #64]	; 0x40
   8920e:	442b      	add	r3, r5
   89210:	9303      	str	r3, [sp, #12]
   89212:	7823      	ldrb	r3, [r4, #0]
   89214:	2b00      	cmp	r3, #0
   89216:	f000 83e5 	beq.w	899e4 <_vfiprintf_r+0x894>
   8921a:	2000      	movs	r0, #0
   8921c:	f04f 0300 	mov.w	r3, #0
   89220:	f104 0801 	add.w	r8, r4, #1
   89224:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   89228:	7862      	ldrb	r2, [r4, #1]
   8922a:	4606      	mov	r6, r0
   8922c:	4605      	mov	r5, r0
   8922e:	4603      	mov	r3, r0
   89230:	f04f 34ff 	mov.w	r4, #4294967295
   89234:	f108 0801 	add.w	r8, r8, #1
   89238:	f1a2 0120 	sub.w	r1, r2, #32
   8923c:	2958      	cmp	r1, #88	; 0x58
   8923e:	f200 82d9 	bhi.w	897f4 <_vfiprintf_r+0x6a4>
   89242:	e8df f011 	tbh	[pc, r1, lsl #1]
   89246:	0228      	.short	0x0228
   89248:	02d702d7 	.word	0x02d702d7
   8924c:	02d70230 	.word	0x02d70230
   89250:	02d702d7 	.word	0x02d702d7
   89254:	02d702d7 	.word	0x02d702d7
   89258:	00a002d7 	.word	0x00a002d7
   8925c:	02d70288 	.word	0x02d70288
   89260:	02b800a8 	.word	0x02b800a8
   89264:	01a602d7 	.word	0x01a602d7
   89268:	01ab01ab 	.word	0x01ab01ab
   8926c:	01ab01ab 	.word	0x01ab01ab
   89270:	01ab01ab 	.word	0x01ab01ab
   89274:	01ab01ab 	.word	0x01ab01ab
   89278:	02d701ab 	.word	0x02d701ab
   8927c:	02d702d7 	.word	0x02d702d7
   89280:	02d702d7 	.word	0x02d702d7
   89284:	02d702d7 	.word	0x02d702d7
   89288:	02d702d7 	.word	0x02d702d7
   8928c:	01b902d7 	.word	0x01b902d7
   89290:	02d702d7 	.word	0x02d702d7
   89294:	02d702d7 	.word	0x02d702d7
   89298:	02d702d7 	.word	0x02d702d7
   8929c:	02d702d7 	.word	0x02d702d7
   892a0:	02d702d7 	.word	0x02d702d7
   892a4:	02d7019e 	.word	0x02d7019e
   892a8:	02d702d7 	.word	0x02d702d7
   892ac:	02d702d7 	.word	0x02d702d7
   892b0:	02d701a2 	.word	0x02d701a2
   892b4:	025a02d7 	.word	0x025a02d7
   892b8:	02d702d7 	.word	0x02d702d7
   892bc:	02d702d7 	.word	0x02d702d7
   892c0:	02d702d7 	.word	0x02d702d7
   892c4:	02d702d7 	.word	0x02d702d7
   892c8:	02d702d7 	.word	0x02d702d7
   892cc:	02220261 	.word	0x02220261
   892d0:	02d702d7 	.word	0x02d702d7
   892d4:	027602d7 	.word	0x027602d7
   892d8:	02d70222 	.word	0x02d70222
   892dc:	027b02d7 	.word	0x027b02d7
   892e0:	01fc02d7 	.word	0x01fc02d7
   892e4:	02100189 	.word	0x02100189
   892e8:	02d702d2 	.word	0x02d702d2
   892ec:	02d70295 	.word	0x02d70295
   892f0:	02d700ad 	.word	0x02d700ad
   892f4:	023502d7 	.word	0x023502d7
   892f8:	f109 0908 	add.w	r9, r9, #8
   892fc:	9b03      	ldr	r3, [sp, #12]
   892fe:	442b      	add	r3, r5
   89300:	9303      	str	r3, [sp, #12]
   89302:	e786      	b.n	89212 <_vfiprintf_r+0xc2>
   89304:	4659      	mov	r1, fp
   89306:	9806      	ldr	r0, [sp, #24]
   89308:	f000 fdaa 	bl	89e60 <__swsetup_r>
   8930c:	bb18      	cbnz	r0, 89356 <_vfiprintf_r+0x206>
   8930e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   89312:	f001 031a 	and.w	r3, r1, #26
   89316:	2b0a      	cmp	r3, #10
   89318:	f47f af4b 	bne.w	891b2 <_vfiprintf_r+0x62>
   8931c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   89320:	2b00      	cmp	r3, #0
   89322:	f6ff af46 	blt.w	891b2 <_vfiprintf_r+0x62>
   89326:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8932a:	07db      	lsls	r3, r3, #31
   8932c:	d405      	bmi.n	8933a <_vfiprintf_r+0x1ea>
   8932e:	058f      	lsls	r7, r1, #22
   89330:	d403      	bmi.n	8933a <_vfiprintf_r+0x1ea>
   89332:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   89336:	f002 fa81 	bl	8b83c <__retarget_lock_release_recursive>
   8933a:	462b      	mov	r3, r5
   8933c:	4642      	mov	r2, r8
   8933e:	4659      	mov	r1, fp
   89340:	9806      	ldr	r0, [sp, #24]
   89342:	f000 fd49 	bl	89dd8 <__sbprintf>
   89346:	9003      	str	r0, [sp, #12]
   89348:	9803      	ldr	r0, [sp, #12]
   8934a:	b02d      	add	sp, #180	; 0xb4
   8934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89350:	f001 fea4 	bl	8b09c <__sinit>
   89354:	e709      	b.n	8916a <_vfiprintf_r+0x1a>
   89356:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8935a:	07d9      	lsls	r1, r3, #31
   8935c:	d404      	bmi.n	89368 <_vfiprintf_r+0x218>
   8935e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   89362:	059a      	lsls	r2, r3, #22
   89364:	f140 84ae 	bpl.w	89cc4 <_vfiprintf_r+0xb74>
   89368:	f04f 33ff 	mov.w	r3, #4294967295
   8936c:	9303      	str	r3, [sp, #12]
   8936e:	9803      	ldr	r0, [sp, #12]
   89370:	b02d      	add	sp, #180	; 0xb4
   89372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89376:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8937a:	f002 fa5d 	bl	8b838 <__retarget_lock_acquire_recursive>
   8937e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   89382:	b281      	uxth	r1, r0
   89384:	e6fb      	b.n	8917e <_vfiprintf_r+0x2e>
   89386:	9907      	ldr	r1, [sp, #28]
   89388:	460a      	mov	r2, r1
   8938a:	680d      	ldr	r5, [r1, #0]
   8938c:	3204      	adds	r2, #4
   8938e:	2d00      	cmp	r5, #0
   89390:	9207      	str	r2, [sp, #28]
   89392:	da02      	bge.n	8939a <_vfiprintf_r+0x24a>
   89394:	426d      	negs	r5, r5
   89396:	f043 0304 	orr.w	r3, r3, #4
   8939a:	f898 2000 	ldrb.w	r2, [r8]
   8939e:	e749      	b.n	89234 <_vfiprintf_r+0xe4>
   893a0:	9508      	str	r5, [sp, #32]
   893a2:	069e      	lsls	r6, r3, #26
   893a4:	f100 845a 	bmi.w	89c5c <_vfiprintf_r+0xb0c>
   893a8:	9907      	ldr	r1, [sp, #28]
   893aa:	06dd      	lsls	r5, r3, #27
   893ac:	460a      	mov	r2, r1
   893ae:	f100 83ef 	bmi.w	89b90 <_vfiprintf_r+0xa40>
   893b2:	0658      	lsls	r0, r3, #25
   893b4:	f140 83ec 	bpl.w	89b90 <_vfiprintf_r+0xa40>
   893b8:	2700      	movs	r7, #0
   893ba:	2201      	movs	r2, #1
   893bc:	880e      	ldrh	r6, [r1, #0]
   893be:	3104      	adds	r1, #4
   893c0:	9107      	str	r1, [sp, #28]
   893c2:	f04f 0100 	mov.w	r1, #0
   893c6:	2500      	movs	r5, #0
   893c8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   893cc:	1c61      	adds	r1, r4, #1
   893ce:	f000 8117 	beq.w	89600 <_vfiprintf_r+0x4b0>
   893d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   893d6:	9102      	str	r1, [sp, #8]
   893d8:	ea56 0107 	orrs.w	r1, r6, r7
   893dc:	f040 8115 	bne.w	8960a <_vfiprintf_r+0x4ba>
   893e0:	2c00      	cmp	r4, #0
   893e2:	f040 835b 	bne.w	89a9c <_vfiprintf_r+0x94c>
   893e6:	2a00      	cmp	r2, #0
   893e8:	f040 83b6 	bne.w	89b58 <_vfiprintf_r+0xa08>
   893ec:	f013 0301 	ands.w	r3, r3, #1
   893f0:	9305      	str	r3, [sp, #20]
   893f2:	f000 8455 	beq.w	89ca0 <_vfiprintf_r+0xb50>
   893f6:	2330      	movs	r3, #48	; 0x30
   893f8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   893fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   89400:	9b05      	ldr	r3, [sp, #20]
   89402:	42a3      	cmp	r3, r4
   89404:	bfb8      	it	lt
   89406:	4623      	movlt	r3, r4
   89408:	9301      	str	r3, [sp, #4]
   8940a:	b10d      	cbz	r5, 89410 <_vfiprintf_r+0x2c0>
   8940c:	3301      	adds	r3, #1
   8940e:	9301      	str	r3, [sp, #4]
   89410:	9b02      	ldr	r3, [sp, #8]
   89412:	f013 0302 	ands.w	r3, r3, #2
   89416:	9309      	str	r3, [sp, #36]	; 0x24
   89418:	d002      	beq.n	89420 <_vfiprintf_r+0x2d0>
   8941a:	9b01      	ldr	r3, [sp, #4]
   8941c:	3302      	adds	r3, #2
   8941e:	9301      	str	r3, [sp, #4]
   89420:	9b02      	ldr	r3, [sp, #8]
   89422:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   89426:	930a      	str	r3, [sp, #40]	; 0x28
   89428:	f040 8215 	bne.w	89856 <_vfiprintf_r+0x706>
   8942c:	9b08      	ldr	r3, [sp, #32]
   8942e:	9a01      	ldr	r2, [sp, #4]
   89430:	1a9d      	subs	r5, r3, r2
   89432:	2d00      	cmp	r5, #0
   89434:	f340 820f 	ble.w	89856 <_vfiprintf_r+0x706>
   89438:	2d10      	cmp	r5, #16
   8943a:	f340 8484 	ble.w	89d46 <_vfiprintf_r+0xbf6>
   8943e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89440:	46ce      	mov	lr, r9
   89442:	2710      	movs	r7, #16
   89444:	46a1      	mov	r9, r4
   89446:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89448:	4ec5      	ldr	r6, [pc, #788]	; (89760 <_vfiprintf_r+0x610>)
   8944a:	4619      	mov	r1, r3
   8944c:	9c06      	ldr	r4, [sp, #24]
   8944e:	e007      	b.n	89460 <_vfiprintf_r+0x310>
   89450:	f101 0c02 	add.w	ip, r1, #2
   89454:	4601      	mov	r1, r0
   89456:	f10e 0e08 	add.w	lr, lr, #8
   8945a:	3d10      	subs	r5, #16
   8945c:	2d10      	cmp	r5, #16
   8945e:	dd11      	ble.n	89484 <_vfiprintf_r+0x334>
   89460:	1c48      	adds	r0, r1, #1
   89462:	3210      	adds	r2, #16
   89464:	2807      	cmp	r0, #7
   89466:	9211      	str	r2, [sp, #68]	; 0x44
   89468:	e88e 00c0 	stmia.w	lr, {r6, r7}
   8946c:	9010      	str	r0, [sp, #64]	; 0x40
   8946e:	ddef      	ble.n	89450 <_vfiprintf_r+0x300>
   89470:	2a00      	cmp	r2, #0
   89472:	f040 81d9 	bne.w	89828 <_vfiprintf_r+0x6d8>
   89476:	3d10      	subs	r5, #16
   89478:	2d10      	cmp	r5, #16
   8947a:	4611      	mov	r1, r2
   8947c:	f04f 0c01 	mov.w	ip, #1
   89480:	46d6      	mov	lr, sl
   89482:	dced      	bgt.n	89460 <_vfiprintf_r+0x310>
   89484:	464c      	mov	r4, r9
   89486:	4661      	mov	r1, ip
   89488:	46f1      	mov	r9, lr
   8948a:	442a      	add	r2, r5
   8948c:	2907      	cmp	r1, #7
   8948e:	9211      	str	r2, [sp, #68]	; 0x44
   89490:	f8c9 6000 	str.w	r6, [r9]
   89494:	f8c9 5004 	str.w	r5, [r9, #4]
   89498:	9110      	str	r1, [sp, #64]	; 0x40
   8949a:	f300 82eb 	bgt.w	89a74 <_vfiprintf_r+0x924>
   8949e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   894a2:	f109 0908 	add.w	r9, r9, #8
   894a6:	1c48      	adds	r0, r1, #1
   894a8:	2d00      	cmp	r5, #0
   894aa:	f040 81dc 	bne.w	89866 <_vfiprintf_r+0x716>
   894ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   894b0:	2b00      	cmp	r3, #0
   894b2:	f000 81f6 	beq.w	898a2 <_vfiprintf_r+0x752>
   894b6:	2102      	movs	r1, #2
   894b8:	ab0e      	add	r3, sp, #56	; 0x38
   894ba:	440a      	add	r2, r1
   894bc:	2807      	cmp	r0, #7
   894be:	9211      	str	r2, [sp, #68]	; 0x44
   894c0:	9010      	str	r0, [sp, #64]	; 0x40
   894c2:	f8c9 1004 	str.w	r1, [r9, #4]
   894c6:	f8c9 3000 	str.w	r3, [r9]
   894ca:	f340 81e6 	ble.w	8989a <_vfiprintf_r+0x74a>
   894ce:	2a00      	cmp	r2, #0
   894d0:	f040 8395 	bne.w	89bfe <_vfiprintf_r+0xaae>
   894d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   894d6:	2001      	movs	r0, #1
   894d8:	2b80      	cmp	r3, #128	; 0x80
   894da:	4611      	mov	r1, r2
   894dc:	46d1      	mov	r9, sl
   894de:	f040 81e4 	bne.w	898aa <_vfiprintf_r+0x75a>
   894e2:	9b08      	ldr	r3, [sp, #32]
   894e4:	9d01      	ldr	r5, [sp, #4]
   894e6:	1b5e      	subs	r6, r3, r5
   894e8:	2e00      	cmp	r6, #0
   894ea:	f340 81de 	ble.w	898aa <_vfiprintf_r+0x75a>
   894ee:	2e10      	cmp	r6, #16
   894f0:	f340 843c 	ble.w	89d6c <_vfiprintf_r+0xc1c>
   894f4:	46cc      	mov	ip, r9
   894f6:	2710      	movs	r7, #16
   894f8:	46a1      	mov	r9, r4
   894fa:	4d9a      	ldr	r5, [pc, #616]	; (89764 <_vfiprintf_r+0x614>)
   894fc:	9c06      	ldr	r4, [sp, #24]
   894fe:	e007      	b.n	89510 <_vfiprintf_r+0x3c0>
   89500:	f101 0e02 	add.w	lr, r1, #2
   89504:	4601      	mov	r1, r0
   89506:	f10c 0c08 	add.w	ip, ip, #8
   8950a:	3e10      	subs	r6, #16
   8950c:	2e10      	cmp	r6, #16
   8950e:	dd11      	ble.n	89534 <_vfiprintf_r+0x3e4>
   89510:	1c48      	adds	r0, r1, #1
   89512:	3210      	adds	r2, #16
   89514:	2807      	cmp	r0, #7
   89516:	9211      	str	r2, [sp, #68]	; 0x44
   89518:	e88c 00a0 	stmia.w	ip, {r5, r7}
   8951c:	9010      	str	r0, [sp, #64]	; 0x40
   8951e:	ddef      	ble.n	89500 <_vfiprintf_r+0x3b0>
   89520:	2a00      	cmp	r2, #0
   89522:	f040 829b 	bne.w	89a5c <_vfiprintf_r+0x90c>
   89526:	3e10      	subs	r6, #16
   89528:	2e10      	cmp	r6, #16
   8952a:	f04f 0e01 	mov.w	lr, #1
   8952e:	4611      	mov	r1, r2
   89530:	46d4      	mov	ip, sl
   89532:	dced      	bgt.n	89510 <_vfiprintf_r+0x3c0>
   89534:	464c      	mov	r4, r9
   89536:	46e1      	mov	r9, ip
   89538:	4432      	add	r2, r6
   8953a:	f1be 0f07 	cmp.w	lr, #7
   8953e:	9211      	str	r2, [sp, #68]	; 0x44
   89540:	e889 0060 	stmia.w	r9, {r5, r6}
   89544:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   89548:	f300 8366 	bgt.w	89c18 <_vfiprintf_r+0xac8>
   8954c:	f109 0908 	add.w	r9, r9, #8
   89550:	f10e 0001 	add.w	r0, lr, #1
   89554:	4671      	mov	r1, lr
   89556:	e1a8      	b.n	898aa <_vfiprintf_r+0x75a>
   89558:	9508      	str	r5, [sp, #32]
   8955a:	f013 0220 	ands.w	r2, r3, #32
   8955e:	f040 8389 	bne.w	89c74 <_vfiprintf_r+0xb24>
   89562:	f013 0110 	ands.w	r1, r3, #16
   89566:	f040 8319 	bne.w	89b9c <_vfiprintf_r+0xa4c>
   8956a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   8956e:	f000 8315 	beq.w	89b9c <_vfiprintf_r+0xa4c>
   89572:	9807      	ldr	r0, [sp, #28]
   89574:	460a      	mov	r2, r1
   89576:	4601      	mov	r1, r0
   89578:	3104      	adds	r1, #4
   8957a:	8806      	ldrh	r6, [r0, #0]
   8957c:	2700      	movs	r7, #0
   8957e:	9107      	str	r1, [sp, #28]
   89580:	e71f      	b.n	893c2 <_vfiprintf_r+0x272>
   89582:	9508      	str	r5, [sp, #32]
   89584:	f043 0310 	orr.w	r3, r3, #16
   89588:	e7e7      	b.n	8955a <_vfiprintf_r+0x40a>
   8958a:	9508      	str	r5, [sp, #32]
   8958c:	f043 0310 	orr.w	r3, r3, #16
   89590:	e707      	b.n	893a2 <_vfiprintf_r+0x252>
   89592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   89596:	f898 2000 	ldrb.w	r2, [r8]
   8959a:	e64b      	b.n	89234 <_vfiprintf_r+0xe4>
   8959c:	2500      	movs	r5, #0
   8959e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   895a2:	f818 2b01 	ldrb.w	r2, [r8], #1
   895a6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   895aa:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   895ae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   895b2:	2909      	cmp	r1, #9
   895b4:	d9f5      	bls.n	895a2 <_vfiprintf_r+0x452>
   895b6:	e63f      	b.n	89238 <_vfiprintf_r+0xe8>
   895b8:	9508      	str	r5, [sp, #32]
   895ba:	2800      	cmp	r0, #0
   895bc:	f040 8402 	bne.w	89dc4 <_vfiprintf_r+0xc74>
   895c0:	f043 0310 	orr.w	r3, r3, #16
   895c4:	069e      	lsls	r6, r3, #26
   895c6:	f100 833d 	bmi.w	89c44 <_vfiprintf_r+0xaf4>
   895ca:	9907      	ldr	r1, [sp, #28]
   895cc:	06dd      	lsls	r5, r3, #27
   895ce:	460a      	mov	r2, r1
   895d0:	f100 82f0 	bmi.w	89bb4 <_vfiprintf_r+0xa64>
   895d4:	0658      	lsls	r0, r3, #25
   895d6:	f140 82ed 	bpl.w	89bb4 <_vfiprintf_r+0xa64>
   895da:	f9b1 6000 	ldrsh.w	r6, [r1]
   895de:	3204      	adds	r2, #4
   895e0:	17f7      	asrs	r7, r6, #31
   895e2:	4630      	mov	r0, r6
   895e4:	4639      	mov	r1, r7
   895e6:	9207      	str	r2, [sp, #28]
   895e8:	2800      	cmp	r0, #0
   895ea:	f171 0200 	sbcs.w	r2, r1, #0
   895ee:	f2c0 835a 	blt.w	89ca6 <_vfiprintf_r+0xb56>
   895f2:	1c61      	adds	r1, r4, #1
   895f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   895f8:	f04f 0201 	mov.w	r2, #1
   895fc:	f47f aee9 	bne.w	893d2 <_vfiprintf_r+0x282>
   89600:	ea56 0107 	orrs.w	r1, r6, r7
   89604:	f000 824b 	beq.w	89a9e <_vfiprintf_r+0x94e>
   89608:	9302      	str	r3, [sp, #8]
   8960a:	2a01      	cmp	r2, #1
   8960c:	f000 828a 	beq.w	89b24 <_vfiprintf_r+0x9d4>
   89610:	2a02      	cmp	r2, #2
   89612:	f040 825a 	bne.w	89aca <_vfiprintf_r+0x97a>
   89616:	46d3      	mov	fp, sl
   89618:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8961a:	0933      	lsrs	r3, r6, #4
   8961c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   89620:	0939      	lsrs	r1, r7, #4
   89622:	f006 020f 	and.w	r2, r6, #15
   89626:	460f      	mov	r7, r1
   89628:	461e      	mov	r6, r3
   8962a:	5c83      	ldrb	r3, [r0, r2]
   8962c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   89630:	ea56 0307 	orrs.w	r3, r6, r7
   89634:	d1f1      	bne.n	8961a <_vfiprintf_r+0x4ca>
   89636:	ebaa 030b 	sub.w	r3, sl, fp
   8963a:	9305      	str	r3, [sp, #20]
   8963c:	e6e0      	b.n	89400 <_vfiprintf_r+0x2b0>
   8963e:	2800      	cmp	r0, #0
   89640:	f040 83bd 	bne.w	89dbe <_vfiprintf_r+0xc6e>
   89644:	0699      	lsls	r1, r3, #26
   89646:	f100 8359 	bmi.w	89cfc <_vfiprintf_r+0xbac>
   8964a:	06da      	lsls	r2, r3, #27
   8964c:	f100 80e5 	bmi.w	8981a <_vfiprintf_r+0x6ca>
   89650:	065b      	lsls	r3, r3, #25
   89652:	f140 80e2 	bpl.w	8981a <_vfiprintf_r+0x6ca>
   89656:	9a07      	ldr	r2, [sp, #28]
   89658:	6813      	ldr	r3, [r2, #0]
   8965a:	3204      	adds	r2, #4
   8965c:	9207      	str	r2, [sp, #28]
   8965e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   89662:	801a      	strh	r2, [r3, #0]
   89664:	e5b1      	b.n	891ca <_vfiprintf_r+0x7a>
   89666:	2278      	movs	r2, #120	; 0x78
   89668:	2130      	movs	r1, #48	; 0x30
   8966a:	9508      	str	r5, [sp, #32]
   8966c:	9d07      	ldr	r5, [sp, #28]
   8966e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   89672:	1d2a      	adds	r2, r5, #4
   89674:	9207      	str	r2, [sp, #28]
   89676:	4a3c      	ldr	r2, [pc, #240]	; (89768 <_vfiprintf_r+0x618>)
   89678:	682e      	ldr	r6, [r5, #0]
   8967a:	920b      	str	r2, [sp, #44]	; 0x2c
   8967c:	f043 0302 	orr.w	r3, r3, #2
   89680:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   89684:	2700      	movs	r7, #0
   89686:	2202      	movs	r2, #2
   89688:	e69b      	b.n	893c2 <_vfiprintf_r+0x272>
   8968a:	9508      	str	r5, [sp, #32]
   8968c:	2800      	cmp	r0, #0
   8968e:	d099      	beq.n	895c4 <_vfiprintf_r+0x474>
   89690:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89694:	e796      	b.n	895c4 <_vfiprintf_r+0x474>
   89696:	f898 2000 	ldrb.w	r2, [r8]
   8969a:	2e00      	cmp	r6, #0
   8969c:	f47f adca 	bne.w	89234 <_vfiprintf_r+0xe4>
   896a0:	2001      	movs	r0, #1
   896a2:	2620      	movs	r6, #32
   896a4:	e5c6      	b.n	89234 <_vfiprintf_r+0xe4>
   896a6:	f043 0301 	orr.w	r3, r3, #1
   896aa:	f898 2000 	ldrb.w	r2, [r8]
   896ae:	e5c1      	b.n	89234 <_vfiprintf_r+0xe4>
   896b0:	9508      	str	r5, [sp, #32]
   896b2:	2800      	cmp	r0, #0
   896b4:	f040 8380 	bne.w	89db8 <_vfiprintf_r+0xc68>
   896b8:	492b      	ldr	r1, [pc, #172]	; (89768 <_vfiprintf_r+0x618>)
   896ba:	910b      	str	r1, [sp, #44]	; 0x2c
   896bc:	069f      	lsls	r7, r3, #26
   896be:	f100 82e5 	bmi.w	89c8c <_vfiprintf_r+0xb3c>
   896c2:	9807      	ldr	r0, [sp, #28]
   896c4:	06de      	lsls	r6, r3, #27
   896c6:	4601      	mov	r1, r0
   896c8:	f100 826f 	bmi.w	89baa <_vfiprintf_r+0xa5a>
   896cc:	065d      	lsls	r5, r3, #25
   896ce:	f140 826c 	bpl.w	89baa <_vfiprintf_r+0xa5a>
   896d2:	2700      	movs	r7, #0
   896d4:	3104      	adds	r1, #4
   896d6:	8806      	ldrh	r6, [r0, #0]
   896d8:	9107      	str	r1, [sp, #28]
   896da:	07d8      	lsls	r0, r3, #31
   896dc:	f140 8220 	bpl.w	89b20 <_vfiprintf_r+0x9d0>
   896e0:	ea56 0107 	orrs.w	r1, r6, r7
   896e4:	f000 821c 	beq.w	89b20 <_vfiprintf_r+0x9d0>
   896e8:	2130      	movs	r1, #48	; 0x30
   896ea:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   896ee:	f043 0302 	orr.w	r3, r3, #2
   896f2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   896f6:	2202      	movs	r2, #2
   896f8:	e663      	b.n	893c2 <_vfiprintf_r+0x272>
   896fa:	9508      	str	r5, [sp, #32]
   896fc:	2800      	cmp	r0, #0
   896fe:	f040 8355 	bne.w	89dac <_vfiprintf_r+0xc5c>
   89702:	491a      	ldr	r1, [pc, #104]	; (8976c <_vfiprintf_r+0x61c>)
   89704:	910b      	str	r1, [sp, #44]	; 0x2c
   89706:	e7d9      	b.n	896bc <_vfiprintf_r+0x56c>
   89708:	2201      	movs	r2, #1
   8970a:	9807      	ldr	r0, [sp, #28]
   8970c:	4611      	mov	r1, r2
   8970e:	9201      	str	r2, [sp, #4]
   89710:	6802      	ldr	r2, [r0, #0]
   89712:	f04f 0400 	mov.w	r4, #0
   89716:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8971a:	4602      	mov	r2, r0
   8971c:	3204      	adds	r2, #4
   8971e:	9508      	str	r5, [sp, #32]
   89720:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   89724:	9105      	str	r1, [sp, #20]
   89726:	9207      	str	r2, [sp, #28]
   89728:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   8972c:	9302      	str	r3, [sp, #8]
   8972e:	2400      	movs	r4, #0
   89730:	e66e      	b.n	89410 <_vfiprintf_r+0x2c0>
   89732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89736:	f898 2000 	ldrb.w	r2, [r8]
   8973a:	e57b      	b.n	89234 <_vfiprintf_r+0xe4>
   8973c:	f898 2000 	ldrb.w	r2, [r8]
   89740:	2a6c      	cmp	r2, #108	; 0x6c
   89742:	bf03      	ittte	eq
   89744:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   89748:	f043 0320 	orreq.w	r3, r3, #32
   8974c:	f108 0801 	addeq.w	r8, r8, #1
   89750:	f043 0310 	orrne.w	r3, r3, #16
   89754:	e56e      	b.n	89234 <_vfiprintf_r+0xe4>
   89756:	f898 2000 	ldrb.w	r2, [r8]
   8975a:	2001      	movs	r0, #1
   8975c:	262b      	movs	r6, #43	; 0x2b
   8975e:	e569      	b.n	89234 <_vfiprintf_r+0xe4>
   89760:	0008db78 	.word	0x0008db78
   89764:	0008db88 	.word	0x0008db88
   89768:	0008db38 	.word	0x0008db38
   8976c:	0008db24 	.word	0x0008db24
   89770:	f04f 0200 	mov.w	r2, #0
   89774:	9907      	ldr	r1, [sp, #28]
   89776:	9508      	str	r5, [sp, #32]
   89778:	f8d1 b000 	ldr.w	fp, [r1]
   8977c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   89780:	1d0d      	adds	r5, r1, #4
   89782:	f1bb 0f00 	cmp.w	fp, #0
   89786:	f000 82e4 	beq.w	89d52 <_vfiprintf_r+0xc02>
   8978a:	1c67      	adds	r7, r4, #1
   8978c:	f000 82c3 	beq.w	89d16 <_vfiprintf_r+0xbc6>
   89790:	4622      	mov	r2, r4
   89792:	2100      	movs	r1, #0
   89794:	4658      	mov	r0, fp
   89796:	9301      	str	r3, [sp, #4]
   89798:	f002 fb8a 	bl	8beb0 <memchr>
   8979c:	9b01      	ldr	r3, [sp, #4]
   8979e:	2800      	cmp	r0, #0
   897a0:	f000 82e8 	beq.w	89d74 <_vfiprintf_r+0xc24>
   897a4:	eba0 020b 	sub.w	r2, r0, fp
   897a8:	9507      	str	r5, [sp, #28]
   897aa:	9205      	str	r2, [sp, #20]
   897ac:	9302      	str	r3, [sp, #8]
   897ae:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   897b2:	2400      	movs	r4, #0
   897b4:	e624      	b.n	89400 <_vfiprintf_r+0x2b0>
   897b6:	f898 2000 	ldrb.w	r2, [r8]
   897ba:	f108 0701 	add.w	r7, r8, #1
   897be:	2a2a      	cmp	r2, #42	; 0x2a
   897c0:	f000 82e9 	beq.w	89d96 <_vfiprintf_r+0xc46>
   897c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   897c8:	2909      	cmp	r1, #9
   897ca:	46b8      	mov	r8, r7
   897cc:	f04f 0400 	mov.w	r4, #0
   897d0:	f63f ad32 	bhi.w	89238 <_vfiprintf_r+0xe8>
   897d4:	f818 2b01 	ldrb.w	r2, [r8], #1
   897d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   897dc:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   897e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   897e4:	2909      	cmp	r1, #9
   897e6:	d9f5      	bls.n	897d4 <_vfiprintf_r+0x684>
   897e8:	e526      	b.n	89238 <_vfiprintf_r+0xe8>
   897ea:	f043 0320 	orr.w	r3, r3, #32
   897ee:	f898 2000 	ldrb.w	r2, [r8]
   897f2:	e51f      	b.n	89234 <_vfiprintf_r+0xe4>
   897f4:	9508      	str	r5, [sp, #32]
   897f6:	2800      	cmp	r0, #0
   897f8:	f040 82db 	bne.w	89db2 <_vfiprintf_r+0xc62>
   897fc:	2a00      	cmp	r2, #0
   897fe:	f000 80f1 	beq.w	899e4 <_vfiprintf_r+0x894>
   89802:	2101      	movs	r1, #1
   89804:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   89808:	f04f 0200 	mov.w	r2, #0
   8980c:	9101      	str	r1, [sp, #4]
   8980e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   89812:	9105      	str	r1, [sp, #20]
   89814:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   89818:	e788      	b.n	8972c <_vfiprintf_r+0x5dc>
   8981a:	9a07      	ldr	r2, [sp, #28]
   8981c:	6813      	ldr	r3, [r2, #0]
   8981e:	3204      	adds	r2, #4
   89820:	9207      	str	r2, [sp, #28]
   89822:	9a03      	ldr	r2, [sp, #12]
   89824:	601a      	str	r2, [r3, #0]
   89826:	e4d0      	b.n	891ca <_vfiprintf_r+0x7a>
   89828:	aa0f      	add	r2, sp, #60	; 0x3c
   8982a:	9904      	ldr	r1, [sp, #16]
   8982c:	4620      	mov	r0, r4
   8982e:	f7ff fc4f 	bl	890d0 <__sprint_r.part.0>
   89832:	2800      	cmp	r0, #0
   89834:	f040 8143 	bne.w	89abe <_vfiprintf_r+0x96e>
   89838:	9910      	ldr	r1, [sp, #64]	; 0x40
   8983a:	46d6      	mov	lr, sl
   8983c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8983e:	f101 0c01 	add.w	ip, r1, #1
   89842:	e60a      	b.n	8945a <_vfiprintf_r+0x30a>
   89844:	aa0f      	add	r2, sp, #60	; 0x3c
   89846:	9904      	ldr	r1, [sp, #16]
   89848:	9806      	ldr	r0, [sp, #24]
   8984a:	f7ff fc41 	bl	890d0 <__sprint_r.part.0>
   8984e:	2800      	cmp	r0, #0
   89850:	f040 8135 	bne.w	89abe <_vfiprintf_r+0x96e>
   89854:	46d1      	mov	r9, sl
   89856:	9910      	ldr	r1, [sp, #64]	; 0x40
   89858:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8985c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8985e:	1c48      	adds	r0, r1, #1
   89860:	2d00      	cmp	r5, #0
   89862:	f43f ae24 	beq.w	894ae <_vfiprintf_r+0x35e>
   89866:	2101      	movs	r1, #1
   89868:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   8986c:	440a      	add	r2, r1
   8986e:	2807      	cmp	r0, #7
   89870:	9211      	str	r2, [sp, #68]	; 0x44
   89872:	9010      	str	r0, [sp, #64]	; 0x40
   89874:	f8c9 1004 	str.w	r1, [r9, #4]
   89878:	f8c9 5000 	str.w	r5, [r9]
   8987c:	f340 8109 	ble.w	89a92 <_vfiprintf_r+0x942>
   89880:	2a00      	cmp	r2, #0
   89882:	f040 81af 	bne.w	89be4 <_vfiprintf_r+0xa94>
   89886:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89888:	2b00      	cmp	r3, #0
   8988a:	f43f ae23 	beq.w	894d4 <_vfiprintf_r+0x384>
   8988e:	2202      	movs	r2, #2
   89890:	4608      	mov	r0, r1
   89892:	46d1      	mov	r9, sl
   89894:	ab0e      	add	r3, sp, #56	; 0x38
   89896:	921d      	str	r2, [sp, #116]	; 0x74
   89898:	931c      	str	r3, [sp, #112]	; 0x70
   8989a:	4601      	mov	r1, r0
   8989c:	f109 0908 	add.w	r9, r9, #8
   898a0:	3001      	adds	r0, #1
   898a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   898a4:	2b80      	cmp	r3, #128	; 0x80
   898a6:	f43f ae1c 	beq.w	894e2 <_vfiprintf_r+0x392>
   898aa:	9b05      	ldr	r3, [sp, #20]
   898ac:	1ae4      	subs	r4, r4, r3
   898ae:	2c00      	cmp	r4, #0
   898b0:	dd2f      	ble.n	89912 <_vfiprintf_r+0x7c2>
   898b2:	2c10      	cmp	r4, #16
   898b4:	f340 8220 	ble.w	89cf8 <_vfiprintf_r+0xba8>
   898b8:	46ce      	mov	lr, r9
   898ba:	2610      	movs	r6, #16
   898bc:	4db2      	ldr	r5, [pc, #712]	; (89b88 <_vfiprintf_r+0xa38>)
   898be:	9f06      	ldr	r7, [sp, #24]
   898c0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   898c4:	e006      	b.n	898d4 <_vfiprintf_r+0x784>
   898c6:	1c88      	adds	r0, r1, #2
   898c8:	4619      	mov	r1, r3
   898ca:	f10e 0e08 	add.w	lr, lr, #8
   898ce:	3c10      	subs	r4, #16
   898d0:	2c10      	cmp	r4, #16
   898d2:	dd10      	ble.n	898f6 <_vfiprintf_r+0x7a6>
   898d4:	1c4b      	adds	r3, r1, #1
   898d6:	3210      	adds	r2, #16
   898d8:	2b07      	cmp	r3, #7
   898da:	9211      	str	r2, [sp, #68]	; 0x44
   898dc:	e88e 0060 	stmia.w	lr, {r5, r6}
   898e0:	9310      	str	r3, [sp, #64]	; 0x40
   898e2:	ddf0      	ble.n	898c6 <_vfiprintf_r+0x776>
   898e4:	2a00      	cmp	r2, #0
   898e6:	d165      	bne.n	899b4 <_vfiprintf_r+0x864>
   898e8:	3c10      	subs	r4, #16
   898ea:	2c10      	cmp	r4, #16
   898ec:	f04f 0001 	mov.w	r0, #1
   898f0:	4611      	mov	r1, r2
   898f2:	46d6      	mov	lr, sl
   898f4:	dcee      	bgt.n	898d4 <_vfiprintf_r+0x784>
   898f6:	46f1      	mov	r9, lr
   898f8:	4422      	add	r2, r4
   898fa:	2807      	cmp	r0, #7
   898fc:	9211      	str	r2, [sp, #68]	; 0x44
   898fe:	f8c9 5000 	str.w	r5, [r9]
   89902:	f8c9 4004 	str.w	r4, [r9, #4]
   89906:	9010      	str	r0, [sp, #64]	; 0x40
   89908:	f300 8085 	bgt.w	89a16 <_vfiprintf_r+0x8c6>
   8990c:	f109 0908 	add.w	r9, r9, #8
   89910:	3001      	adds	r0, #1
   89912:	9905      	ldr	r1, [sp, #20]
   89914:	2807      	cmp	r0, #7
   89916:	440a      	add	r2, r1
   89918:	9211      	str	r2, [sp, #68]	; 0x44
   8991a:	f8c9 b000 	str.w	fp, [r9]
   8991e:	f8c9 1004 	str.w	r1, [r9, #4]
   89922:	9010      	str	r0, [sp, #64]	; 0x40
   89924:	f340 8082 	ble.w	89a2c <_vfiprintf_r+0x8dc>
   89928:	2a00      	cmp	r2, #0
   8992a:	f040 8118 	bne.w	89b5e <_vfiprintf_r+0xa0e>
   8992e:	9b02      	ldr	r3, [sp, #8]
   89930:	9210      	str	r2, [sp, #64]	; 0x40
   89932:	0758      	lsls	r0, r3, #29
   89934:	d535      	bpl.n	899a2 <_vfiprintf_r+0x852>
   89936:	9b08      	ldr	r3, [sp, #32]
   89938:	9901      	ldr	r1, [sp, #4]
   8993a:	1a5c      	subs	r4, r3, r1
   8993c:	2c00      	cmp	r4, #0
   8993e:	f340 80e7 	ble.w	89b10 <_vfiprintf_r+0x9c0>
   89942:	46d1      	mov	r9, sl
   89944:	2c10      	cmp	r4, #16
   89946:	f340 820d 	ble.w	89d64 <_vfiprintf_r+0xc14>
   8994a:	2510      	movs	r5, #16
   8994c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8994e:	4e8f      	ldr	r6, [pc, #572]	; (89b8c <_vfiprintf_r+0xa3c>)
   89950:	9f06      	ldr	r7, [sp, #24]
   89952:	f8dd b010 	ldr.w	fp, [sp, #16]
   89956:	e006      	b.n	89966 <_vfiprintf_r+0x816>
   89958:	1c88      	adds	r0, r1, #2
   8995a:	4619      	mov	r1, r3
   8995c:	f109 0908 	add.w	r9, r9, #8
   89960:	3c10      	subs	r4, #16
   89962:	2c10      	cmp	r4, #16
   89964:	dd11      	ble.n	8998a <_vfiprintf_r+0x83a>
   89966:	1c4b      	adds	r3, r1, #1
   89968:	3210      	adds	r2, #16
   8996a:	2b07      	cmp	r3, #7
   8996c:	9211      	str	r2, [sp, #68]	; 0x44
   8996e:	f8c9 6000 	str.w	r6, [r9]
   89972:	f8c9 5004 	str.w	r5, [r9, #4]
   89976:	9310      	str	r3, [sp, #64]	; 0x40
   89978:	ddee      	ble.n	89958 <_vfiprintf_r+0x808>
   8997a:	bb42      	cbnz	r2, 899ce <_vfiprintf_r+0x87e>
   8997c:	3c10      	subs	r4, #16
   8997e:	2c10      	cmp	r4, #16
   89980:	f04f 0001 	mov.w	r0, #1
   89984:	4611      	mov	r1, r2
   89986:	46d1      	mov	r9, sl
   89988:	dced      	bgt.n	89966 <_vfiprintf_r+0x816>
   8998a:	4422      	add	r2, r4
   8998c:	2807      	cmp	r0, #7
   8998e:	9211      	str	r2, [sp, #68]	; 0x44
   89990:	f8c9 6000 	str.w	r6, [r9]
   89994:	f8c9 4004 	str.w	r4, [r9, #4]
   89998:	9010      	str	r0, [sp, #64]	; 0x40
   8999a:	dd51      	ble.n	89a40 <_vfiprintf_r+0x8f0>
   8999c:	2a00      	cmp	r2, #0
   8999e:	f040 819a 	bne.w	89cd6 <_vfiprintf_r+0xb86>
   899a2:	9b03      	ldr	r3, [sp, #12]
   899a4:	9a08      	ldr	r2, [sp, #32]
   899a6:	9901      	ldr	r1, [sp, #4]
   899a8:	428a      	cmp	r2, r1
   899aa:	bfac      	ite	ge
   899ac:	189b      	addge	r3, r3, r2
   899ae:	185b      	addlt	r3, r3, r1
   899b0:	9303      	str	r3, [sp, #12]
   899b2:	e04e      	b.n	89a52 <_vfiprintf_r+0x902>
   899b4:	aa0f      	add	r2, sp, #60	; 0x3c
   899b6:	4649      	mov	r1, r9
   899b8:	4638      	mov	r0, r7
   899ba:	f7ff fb89 	bl	890d0 <__sprint_r.part.0>
   899be:	2800      	cmp	r0, #0
   899c0:	f040 813e 	bne.w	89c40 <_vfiprintf_r+0xaf0>
   899c4:	9910      	ldr	r1, [sp, #64]	; 0x40
   899c6:	46d6      	mov	lr, sl
   899c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   899ca:	1c48      	adds	r0, r1, #1
   899cc:	e77f      	b.n	898ce <_vfiprintf_r+0x77e>
   899ce:	aa0f      	add	r2, sp, #60	; 0x3c
   899d0:	4659      	mov	r1, fp
   899d2:	4638      	mov	r0, r7
   899d4:	f7ff fb7c 	bl	890d0 <__sprint_r.part.0>
   899d8:	b960      	cbnz	r0, 899f4 <_vfiprintf_r+0x8a4>
   899da:	9910      	ldr	r1, [sp, #64]	; 0x40
   899dc:	46d1      	mov	r9, sl
   899de:	9a11      	ldr	r2, [sp, #68]	; 0x44
   899e0:	1c48      	adds	r0, r1, #1
   899e2:	e7bd      	b.n	89960 <_vfiprintf_r+0x810>
   899e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   899e6:	f8dd b010 	ldr.w	fp, [sp, #16]
   899ea:	2b00      	cmp	r3, #0
   899ec:	f040 81ca 	bne.w	89d84 <_vfiprintf_r+0xc34>
   899f0:	2300      	movs	r3, #0
   899f2:	9310      	str	r3, [sp, #64]	; 0x40
   899f4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   899f8:	f013 0f01 	tst.w	r3, #1
   899fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   89a00:	d102      	bne.n	89a08 <_vfiprintf_r+0x8b8>
   89a02:	059a      	lsls	r2, r3, #22
   89a04:	f140 80dd 	bpl.w	89bc2 <_vfiprintf_r+0xa72>
   89a08:	065b      	lsls	r3, r3, #25
   89a0a:	f53f acad 	bmi.w	89368 <_vfiprintf_r+0x218>
   89a0e:	9803      	ldr	r0, [sp, #12]
   89a10:	b02d      	add	sp, #180	; 0xb4
   89a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a16:	2a00      	cmp	r2, #0
   89a18:	f040 8105 	bne.w	89c26 <_vfiprintf_r+0xad6>
   89a1c:	2301      	movs	r3, #1
   89a1e:	46d1      	mov	r9, sl
   89a20:	9a05      	ldr	r2, [sp, #20]
   89a22:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   89a26:	921d      	str	r2, [sp, #116]	; 0x74
   89a28:	9211      	str	r2, [sp, #68]	; 0x44
   89a2a:	9310      	str	r3, [sp, #64]	; 0x40
   89a2c:	f109 0908 	add.w	r9, r9, #8
   89a30:	9b02      	ldr	r3, [sp, #8]
   89a32:	0759      	lsls	r1, r3, #29
   89a34:	d504      	bpl.n	89a40 <_vfiprintf_r+0x8f0>
   89a36:	9b08      	ldr	r3, [sp, #32]
   89a38:	9901      	ldr	r1, [sp, #4]
   89a3a:	1a5c      	subs	r4, r3, r1
   89a3c:	2c00      	cmp	r4, #0
   89a3e:	dc81      	bgt.n	89944 <_vfiprintf_r+0x7f4>
   89a40:	9b03      	ldr	r3, [sp, #12]
   89a42:	9908      	ldr	r1, [sp, #32]
   89a44:	9801      	ldr	r0, [sp, #4]
   89a46:	4281      	cmp	r1, r0
   89a48:	bfac      	ite	ge
   89a4a:	185b      	addge	r3, r3, r1
   89a4c:	181b      	addlt	r3, r3, r0
   89a4e:	9303      	str	r3, [sp, #12]
   89a50:	bb72      	cbnz	r2, 89ab0 <_vfiprintf_r+0x960>
   89a52:	2300      	movs	r3, #0
   89a54:	46d1      	mov	r9, sl
   89a56:	9310      	str	r3, [sp, #64]	; 0x40
   89a58:	f7ff bbb7 	b.w	891ca <_vfiprintf_r+0x7a>
   89a5c:	aa0f      	add	r2, sp, #60	; 0x3c
   89a5e:	9904      	ldr	r1, [sp, #16]
   89a60:	4620      	mov	r0, r4
   89a62:	f7ff fb35 	bl	890d0 <__sprint_r.part.0>
   89a66:	bb50      	cbnz	r0, 89abe <_vfiprintf_r+0x96e>
   89a68:	9910      	ldr	r1, [sp, #64]	; 0x40
   89a6a:	46d4      	mov	ip, sl
   89a6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89a6e:	f101 0e01 	add.w	lr, r1, #1
   89a72:	e54a      	b.n	8950a <_vfiprintf_r+0x3ba>
   89a74:	2a00      	cmp	r2, #0
   89a76:	f47f aee5 	bne.w	89844 <_vfiprintf_r+0x6f4>
   89a7a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   89a7e:	2900      	cmp	r1, #0
   89a80:	f000 811a 	beq.w	89cb8 <_vfiprintf_r+0xb68>
   89a84:	2201      	movs	r2, #1
   89a86:	46d1      	mov	r9, sl
   89a88:	4610      	mov	r0, r2
   89a8a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   89a8e:	921d      	str	r2, [sp, #116]	; 0x74
   89a90:	911c      	str	r1, [sp, #112]	; 0x70
   89a92:	4601      	mov	r1, r0
   89a94:	f109 0908 	add.w	r9, r9, #8
   89a98:	3001      	adds	r0, #1
   89a9a:	e508      	b.n	894ae <_vfiprintf_r+0x35e>
   89a9c:	9b02      	ldr	r3, [sp, #8]
   89a9e:	2a01      	cmp	r2, #1
   89aa0:	f000 8097 	beq.w	89bd2 <_vfiprintf_r+0xa82>
   89aa4:	2a02      	cmp	r2, #2
   89aa6:	d10d      	bne.n	89ac4 <_vfiprintf_r+0x974>
   89aa8:	9302      	str	r3, [sp, #8]
   89aaa:	2600      	movs	r6, #0
   89aac:	2700      	movs	r7, #0
   89aae:	e5b2      	b.n	89616 <_vfiprintf_r+0x4c6>
   89ab0:	aa0f      	add	r2, sp, #60	; 0x3c
   89ab2:	9904      	ldr	r1, [sp, #16]
   89ab4:	9806      	ldr	r0, [sp, #24]
   89ab6:	f7ff fb0b 	bl	890d0 <__sprint_r.part.0>
   89aba:	2800      	cmp	r0, #0
   89abc:	d0c9      	beq.n	89a52 <_vfiprintf_r+0x902>
   89abe:	f8dd b010 	ldr.w	fp, [sp, #16]
   89ac2:	e797      	b.n	899f4 <_vfiprintf_r+0x8a4>
   89ac4:	2600      	movs	r6, #0
   89ac6:	2700      	movs	r7, #0
   89ac8:	9302      	str	r3, [sp, #8]
   89aca:	4651      	mov	r1, sl
   89acc:	e000      	b.n	89ad0 <_vfiprintf_r+0x980>
   89ace:	4659      	mov	r1, fp
   89ad0:	08f2      	lsrs	r2, r6, #3
   89ad2:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   89ad6:	08f8      	lsrs	r0, r7, #3
   89ad8:	f006 0307 	and.w	r3, r6, #7
   89adc:	4607      	mov	r7, r0
   89ade:	4616      	mov	r6, r2
   89ae0:	3330      	adds	r3, #48	; 0x30
   89ae2:	ea56 0207 	orrs.w	r2, r6, r7
   89ae6:	f801 3c01 	strb.w	r3, [r1, #-1]
   89aea:	f101 3bff 	add.w	fp, r1, #4294967295
   89aee:	d1ee      	bne.n	89ace <_vfiprintf_r+0x97e>
   89af0:	9a02      	ldr	r2, [sp, #8]
   89af2:	07d6      	lsls	r6, r2, #31
   89af4:	f57f ad9f 	bpl.w	89636 <_vfiprintf_r+0x4e6>
   89af8:	2b30      	cmp	r3, #48	; 0x30
   89afa:	f43f ad9c 	beq.w	89636 <_vfiprintf_r+0x4e6>
   89afe:	2330      	movs	r3, #48	; 0x30
   89b00:	3902      	subs	r1, #2
   89b02:	f80b 3c01 	strb.w	r3, [fp, #-1]
   89b06:	ebaa 0301 	sub.w	r3, sl, r1
   89b0a:	9305      	str	r3, [sp, #20]
   89b0c:	468b      	mov	fp, r1
   89b0e:	e477      	b.n	89400 <_vfiprintf_r+0x2b0>
   89b10:	9b03      	ldr	r3, [sp, #12]
   89b12:	9a08      	ldr	r2, [sp, #32]
   89b14:	428a      	cmp	r2, r1
   89b16:	bfac      	ite	ge
   89b18:	189b      	addge	r3, r3, r2
   89b1a:	185b      	addlt	r3, r3, r1
   89b1c:	9303      	str	r3, [sp, #12]
   89b1e:	e798      	b.n	89a52 <_vfiprintf_r+0x902>
   89b20:	2202      	movs	r2, #2
   89b22:	e44e      	b.n	893c2 <_vfiprintf_r+0x272>
   89b24:	2f00      	cmp	r7, #0
   89b26:	bf08      	it	eq
   89b28:	2e0a      	cmpeq	r6, #10
   89b2a:	d351      	bcc.n	89bd0 <_vfiprintf_r+0xa80>
   89b2c:	46d3      	mov	fp, sl
   89b2e:	4630      	mov	r0, r6
   89b30:	4639      	mov	r1, r7
   89b32:	220a      	movs	r2, #10
   89b34:	2300      	movs	r3, #0
   89b36:	f7fd fccd 	bl	874d4 <__aeabi_uldivmod>
   89b3a:	3230      	adds	r2, #48	; 0x30
   89b3c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   89b40:	4630      	mov	r0, r6
   89b42:	4639      	mov	r1, r7
   89b44:	2300      	movs	r3, #0
   89b46:	220a      	movs	r2, #10
   89b48:	f7fd fcc4 	bl	874d4 <__aeabi_uldivmod>
   89b4c:	4606      	mov	r6, r0
   89b4e:	460f      	mov	r7, r1
   89b50:	ea56 0307 	orrs.w	r3, r6, r7
   89b54:	d1eb      	bne.n	89b2e <_vfiprintf_r+0x9de>
   89b56:	e56e      	b.n	89636 <_vfiprintf_r+0x4e6>
   89b58:	9405      	str	r4, [sp, #20]
   89b5a:	46d3      	mov	fp, sl
   89b5c:	e450      	b.n	89400 <_vfiprintf_r+0x2b0>
   89b5e:	aa0f      	add	r2, sp, #60	; 0x3c
   89b60:	9904      	ldr	r1, [sp, #16]
   89b62:	9806      	ldr	r0, [sp, #24]
   89b64:	f7ff fab4 	bl	890d0 <__sprint_r.part.0>
   89b68:	2800      	cmp	r0, #0
   89b6a:	d1a8      	bne.n	89abe <_vfiprintf_r+0x96e>
   89b6c:	46d1      	mov	r9, sl
   89b6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89b70:	e75e      	b.n	89a30 <_vfiprintf_r+0x8e0>
   89b72:	aa0f      	add	r2, sp, #60	; 0x3c
   89b74:	9904      	ldr	r1, [sp, #16]
   89b76:	9806      	ldr	r0, [sp, #24]
   89b78:	f7ff faaa 	bl	890d0 <__sprint_r.part.0>
   89b7c:	2800      	cmp	r0, #0
   89b7e:	d19e      	bne.n	89abe <_vfiprintf_r+0x96e>
   89b80:	46d1      	mov	r9, sl
   89b82:	f7ff bbbb 	b.w	892fc <_vfiprintf_r+0x1ac>
   89b86:	bf00      	nop
   89b88:	0008db88 	.word	0x0008db88
   89b8c:	0008db78 	.word	0x0008db78
   89b90:	3104      	adds	r1, #4
   89b92:	6816      	ldr	r6, [r2, #0]
   89b94:	2700      	movs	r7, #0
   89b96:	2201      	movs	r2, #1
   89b98:	9107      	str	r1, [sp, #28]
   89b9a:	e412      	b.n	893c2 <_vfiprintf_r+0x272>
   89b9c:	9807      	ldr	r0, [sp, #28]
   89b9e:	2700      	movs	r7, #0
   89ba0:	4601      	mov	r1, r0
   89ba2:	3104      	adds	r1, #4
   89ba4:	6806      	ldr	r6, [r0, #0]
   89ba6:	9107      	str	r1, [sp, #28]
   89ba8:	e40b      	b.n	893c2 <_vfiprintf_r+0x272>
   89baa:	680e      	ldr	r6, [r1, #0]
   89bac:	3104      	adds	r1, #4
   89bae:	9107      	str	r1, [sp, #28]
   89bb0:	2700      	movs	r7, #0
   89bb2:	e592      	b.n	896da <_vfiprintf_r+0x58a>
   89bb4:	6816      	ldr	r6, [r2, #0]
   89bb6:	3204      	adds	r2, #4
   89bb8:	17f7      	asrs	r7, r6, #31
   89bba:	9207      	str	r2, [sp, #28]
   89bbc:	4630      	mov	r0, r6
   89bbe:	4639      	mov	r1, r7
   89bc0:	e512      	b.n	895e8 <_vfiprintf_r+0x498>
   89bc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   89bc6:	f001 fe39 	bl	8b83c <__retarget_lock_release_recursive>
   89bca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   89bce:	e71b      	b.n	89a08 <_vfiprintf_r+0x8b8>
   89bd0:	9b02      	ldr	r3, [sp, #8]
   89bd2:	9302      	str	r3, [sp, #8]
   89bd4:	2301      	movs	r3, #1
   89bd6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   89bda:	3630      	adds	r6, #48	; 0x30
   89bdc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   89be0:	9305      	str	r3, [sp, #20]
   89be2:	e40d      	b.n	89400 <_vfiprintf_r+0x2b0>
   89be4:	aa0f      	add	r2, sp, #60	; 0x3c
   89be6:	9904      	ldr	r1, [sp, #16]
   89be8:	9806      	ldr	r0, [sp, #24]
   89bea:	f7ff fa71 	bl	890d0 <__sprint_r.part.0>
   89bee:	2800      	cmp	r0, #0
   89bf0:	f47f af65 	bne.w	89abe <_vfiprintf_r+0x96e>
   89bf4:	9910      	ldr	r1, [sp, #64]	; 0x40
   89bf6:	46d1      	mov	r9, sl
   89bf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89bfa:	1c48      	adds	r0, r1, #1
   89bfc:	e457      	b.n	894ae <_vfiprintf_r+0x35e>
   89bfe:	aa0f      	add	r2, sp, #60	; 0x3c
   89c00:	9904      	ldr	r1, [sp, #16]
   89c02:	9806      	ldr	r0, [sp, #24]
   89c04:	f7ff fa64 	bl	890d0 <__sprint_r.part.0>
   89c08:	2800      	cmp	r0, #0
   89c0a:	f47f af58 	bne.w	89abe <_vfiprintf_r+0x96e>
   89c0e:	9910      	ldr	r1, [sp, #64]	; 0x40
   89c10:	46d1      	mov	r9, sl
   89c12:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89c14:	1c48      	adds	r0, r1, #1
   89c16:	e644      	b.n	898a2 <_vfiprintf_r+0x752>
   89c18:	2a00      	cmp	r2, #0
   89c1a:	f040 8087 	bne.w	89d2c <_vfiprintf_r+0xbdc>
   89c1e:	2001      	movs	r0, #1
   89c20:	4611      	mov	r1, r2
   89c22:	46d1      	mov	r9, sl
   89c24:	e641      	b.n	898aa <_vfiprintf_r+0x75a>
   89c26:	aa0f      	add	r2, sp, #60	; 0x3c
   89c28:	9904      	ldr	r1, [sp, #16]
   89c2a:	9806      	ldr	r0, [sp, #24]
   89c2c:	f7ff fa50 	bl	890d0 <__sprint_r.part.0>
   89c30:	2800      	cmp	r0, #0
   89c32:	f47f af44 	bne.w	89abe <_vfiprintf_r+0x96e>
   89c36:	9810      	ldr	r0, [sp, #64]	; 0x40
   89c38:	46d1      	mov	r9, sl
   89c3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89c3c:	3001      	adds	r0, #1
   89c3e:	e668      	b.n	89912 <_vfiprintf_r+0x7c2>
   89c40:	46cb      	mov	fp, r9
   89c42:	e6d7      	b.n	899f4 <_vfiprintf_r+0x8a4>
   89c44:	9d07      	ldr	r5, [sp, #28]
   89c46:	3507      	adds	r5, #7
   89c48:	f025 0507 	bic.w	r5, r5, #7
   89c4c:	f105 0208 	add.w	r2, r5, #8
   89c50:	e9d5 0100 	ldrd	r0, r1, [r5]
   89c54:	9207      	str	r2, [sp, #28]
   89c56:	4606      	mov	r6, r0
   89c58:	460f      	mov	r7, r1
   89c5a:	e4c5      	b.n	895e8 <_vfiprintf_r+0x498>
   89c5c:	9d07      	ldr	r5, [sp, #28]
   89c5e:	3507      	adds	r5, #7
   89c60:	f025 0207 	bic.w	r2, r5, #7
   89c64:	f102 0108 	add.w	r1, r2, #8
   89c68:	e9d2 6700 	ldrd	r6, r7, [r2]
   89c6c:	9107      	str	r1, [sp, #28]
   89c6e:	2201      	movs	r2, #1
   89c70:	f7ff bba7 	b.w	893c2 <_vfiprintf_r+0x272>
   89c74:	9d07      	ldr	r5, [sp, #28]
   89c76:	3507      	adds	r5, #7
   89c78:	f025 0207 	bic.w	r2, r5, #7
   89c7c:	f102 0108 	add.w	r1, r2, #8
   89c80:	e9d2 6700 	ldrd	r6, r7, [r2]
   89c84:	9107      	str	r1, [sp, #28]
   89c86:	2200      	movs	r2, #0
   89c88:	f7ff bb9b 	b.w	893c2 <_vfiprintf_r+0x272>
   89c8c:	9d07      	ldr	r5, [sp, #28]
   89c8e:	3507      	adds	r5, #7
   89c90:	f025 0107 	bic.w	r1, r5, #7
   89c94:	f101 0008 	add.w	r0, r1, #8
   89c98:	9007      	str	r0, [sp, #28]
   89c9a:	e9d1 6700 	ldrd	r6, r7, [r1]
   89c9e:	e51c      	b.n	896da <_vfiprintf_r+0x58a>
   89ca0:	46d3      	mov	fp, sl
   89ca2:	f7ff bbad 	b.w	89400 <_vfiprintf_r+0x2b0>
   89ca6:	252d      	movs	r5, #45	; 0x2d
   89ca8:	4276      	negs	r6, r6
   89caa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   89cae:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   89cb2:	2201      	movs	r2, #1
   89cb4:	f7ff bb8a 	b.w	893cc <_vfiprintf_r+0x27c>
   89cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89cba:	b9b3      	cbnz	r3, 89cea <_vfiprintf_r+0xb9a>
   89cbc:	4611      	mov	r1, r2
   89cbe:	2001      	movs	r0, #1
   89cc0:	46d1      	mov	r9, sl
   89cc2:	e5f2      	b.n	898aa <_vfiprintf_r+0x75a>
   89cc4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   89cc8:	f001 fdb8 	bl	8b83c <__retarget_lock_release_recursive>
   89ccc:	f04f 33ff 	mov.w	r3, #4294967295
   89cd0:	9303      	str	r3, [sp, #12]
   89cd2:	f7ff bb4c 	b.w	8936e <_vfiprintf_r+0x21e>
   89cd6:	aa0f      	add	r2, sp, #60	; 0x3c
   89cd8:	9904      	ldr	r1, [sp, #16]
   89cda:	9806      	ldr	r0, [sp, #24]
   89cdc:	f7ff f9f8 	bl	890d0 <__sprint_r.part.0>
   89ce0:	2800      	cmp	r0, #0
   89ce2:	f47f aeec 	bne.w	89abe <_vfiprintf_r+0x96e>
   89ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89ce8:	e6aa      	b.n	89a40 <_vfiprintf_r+0x8f0>
   89cea:	2202      	movs	r2, #2
   89cec:	ab0e      	add	r3, sp, #56	; 0x38
   89cee:	921d      	str	r2, [sp, #116]	; 0x74
   89cf0:	931c      	str	r3, [sp, #112]	; 0x70
   89cf2:	2001      	movs	r0, #1
   89cf4:	46d1      	mov	r9, sl
   89cf6:	e5d0      	b.n	8989a <_vfiprintf_r+0x74a>
   89cf8:	4d34      	ldr	r5, [pc, #208]	; (89dcc <_vfiprintf_r+0xc7c>)
   89cfa:	e5fd      	b.n	898f8 <_vfiprintf_r+0x7a8>
   89cfc:	9a07      	ldr	r2, [sp, #28]
   89cfe:	4613      	mov	r3, r2
   89d00:	3304      	adds	r3, #4
   89d02:	9307      	str	r3, [sp, #28]
   89d04:	9b03      	ldr	r3, [sp, #12]
   89d06:	6811      	ldr	r1, [r2, #0]
   89d08:	17dd      	asrs	r5, r3, #31
   89d0a:	461a      	mov	r2, r3
   89d0c:	462b      	mov	r3, r5
   89d0e:	e9c1 2300 	strd	r2, r3, [r1]
   89d12:	f7ff ba5a 	b.w	891ca <_vfiprintf_r+0x7a>
   89d16:	4658      	mov	r0, fp
   89d18:	9507      	str	r5, [sp, #28]
   89d1a:	9302      	str	r3, [sp, #8]
   89d1c:	f002 fe86 	bl	8ca2c <strlen>
   89d20:	2400      	movs	r4, #0
   89d22:	9005      	str	r0, [sp, #20]
   89d24:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   89d28:	f7ff bb6a 	b.w	89400 <_vfiprintf_r+0x2b0>
   89d2c:	aa0f      	add	r2, sp, #60	; 0x3c
   89d2e:	9904      	ldr	r1, [sp, #16]
   89d30:	9806      	ldr	r0, [sp, #24]
   89d32:	f7ff f9cd 	bl	890d0 <__sprint_r.part.0>
   89d36:	2800      	cmp	r0, #0
   89d38:	f47f aec1 	bne.w	89abe <_vfiprintf_r+0x96e>
   89d3c:	9910      	ldr	r1, [sp, #64]	; 0x40
   89d3e:	46d1      	mov	r9, sl
   89d40:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89d42:	1c48      	adds	r0, r1, #1
   89d44:	e5b1      	b.n	898aa <_vfiprintf_r+0x75a>
   89d46:	9910      	ldr	r1, [sp, #64]	; 0x40
   89d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89d4a:	3101      	adds	r1, #1
   89d4c:	4e20      	ldr	r6, [pc, #128]	; (89dd0 <_vfiprintf_r+0xc80>)
   89d4e:	f7ff bb9c 	b.w	8948a <_vfiprintf_r+0x33a>
   89d52:	2c06      	cmp	r4, #6
   89d54:	bf28      	it	cs
   89d56:	2406      	movcs	r4, #6
   89d58:	9507      	str	r5, [sp, #28]
   89d5a:	9405      	str	r4, [sp, #20]
   89d5c:	9401      	str	r4, [sp, #4]
   89d5e:	f8df b074 	ldr.w	fp, [pc, #116]	; 89dd4 <_vfiprintf_r+0xc84>
   89d62:	e4e3      	b.n	8972c <_vfiprintf_r+0x5dc>
   89d64:	9810      	ldr	r0, [sp, #64]	; 0x40
   89d66:	4e1a      	ldr	r6, [pc, #104]	; (89dd0 <_vfiprintf_r+0xc80>)
   89d68:	3001      	adds	r0, #1
   89d6a:	e60e      	b.n	8998a <_vfiprintf_r+0x83a>
   89d6c:	4686      	mov	lr, r0
   89d6e:	4d17      	ldr	r5, [pc, #92]	; (89dcc <_vfiprintf_r+0xc7c>)
   89d70:	f7ff bbe2 	b.w	89538 <_vfiprintf_r+0x3e8>
   89d74:	9405      	str	r4, [sp, #20]
   89d76:	9507      	str	r5, [sp, #28]
   89d78:	9302      	str	r3, [sp, #8]
   89d7a:	4604      	mov	r4, r0
   89d7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   89d80:	f7ff bb3e 	b.w	89400 <_vfiprintf_r+0x2b0>
   89d84:	9806      	ldr	r0, [sp, #24]
   89d86:	aa0f      	add	r2, sp, #60	; 0x3c
   89d88:	4659      	mov	r1, fp
   89d8a:	f7ff f9a1 	bl	890d0 <__sprint_r.part.0>
   89d8e:	2800      	cmp	r0, #0
   89d90:	f43f ae2e 	beq.w	899f0 <_vfiprintf_r+0x8a0>
   89d94:	e62e      	b.n	899f4 <_vfiprintf_r+0x8a4>
   89d96:	9907      	ldr	r1, [sp, #28]
   89d98:	f898 2001 	ldrb.w	r2, [r8, #1]
   89d9c:	680c      	ldr	r4, [r1, #0]
   89d9e:	3104      	adds	r1, #4
   89da0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   89da4:	46b8      	mov	r8, r7
   89da6:	9107      	str	r1, [sp, #28]
   89da8:	f7ff ba44 	b.w	89234 <_vfiprintf_r+0xe4>
   89dac:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89db0:	e4a7      	b.n	89702 <_vfiprintf_r+0x5b2>
   89db2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89db6:	e521      	b.n	897fc <_vfiprintf_r+0x6ac>
   89db8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89dbc:	e47c      	b.n	896b8 <_vfiprintf_r+0x568>
   89dbe:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89dc2:	e43f      	b.n	89644 <_vfiprintf_r+0x4f4>
   89dc4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   89dc8:	f7ff bbfa 	b.w	895c0 <_vfiprintf_r+0x470>
   89dcc:	0008db88 	.word	0x0008db88
   89dd0:	0008db78 	.word	0x0008db78
   89dd4:	0008db4c 	.word	0x0008db4c

00089dd8 <__sbprintf>:
   89dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89ddc:	460c      	mov	r4, r1
   89dde:	f04f 0e00 	mov.w	lr, #0
   89de2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   89de6:	4606      	mov	r6, r0
   89de8:	4617      	mov	r7, r2
   89dea:	4698      	mov	r8, r3
   89dec:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89dee:	89e3      	ldrh	r3, [r4, #14]
   89df0:	8989      	ldrh	r1, [r1, #12]
   89df2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   89df6:	f021 0102 	bic.w	r1, r1, #2
   89dfa:	9219      	str	r2, [sp, #100]	; 0x64
   89dfc:	f8ad 300e 	strh.w	r3, [sp, #14]
   89e00:	69e2      	ldr	r2, [r4, #28]
   89e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   89e04:	f8ad 100c 	strh.w	r1, [sp, #12]
   89e08:	a816      	add	r0, sp, #88	; 0x58
   89e0a:	a91a      	add	r1, sp, #104	; 0x68
   89e0c:	f8cd e018 	str.w	lr, [sp, #24]
   89e10:	9207      	str	r2, [sp, #28]
   89e12:	9309      	str	r3, [sp, #36]	; 0x24
   89e14:	9100      	str	r1, [sp, #0]
   89e16:	9104      	str	r1, [sp, #16]
   89e18:	9502      	str	r5, [sp, #8]
   89e1a:	9505      	str	r5, [sp, #20]
   89e1c:	f001 fd08 	bl	8b830 <__retarget_lock_init_recursive>
   89e20:	4643      	mov	r3, r8
   89e22:	463a      	mov	r2, r7
   89e24:	4669      	mov	r1, sp
   89e26:	4630      	mov	r0, r6
   89e28:	f7ff f992 	bl	89150 <_vfiprintf_r>
   89e2c:	1e05      	subs	r5, r0, #0
   89e2e:	db07      	blt.n	89e40 <__sbprintf+0x68>
   89e30:	4630      	mov	r0, r6
   89e32:	4669      	mov	r1, sp
   89e34:	f001 f8da 	bl	8afec <_fflush_r>
   89e38:	2800      	cmp	r0, #0
   89e3a:	bf18      	it	ne
   89e3c:	f04f 35ff 	movne.w	r5, #4294967295
   89e40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89e44:	065b      	lsls	r3, r3, #25
   89e46:	d503      	bpl.n	89e50 <__sbprintf+0x78>
   89e48:	89a3      	ldrh	r3, [r4, #12]
   89e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89e4e:	81a3      	strh	r3, [r4, #12]
   89e50:	9816      	ldr	r0, [sp, #88]	; 0x58
   89e52:	f001 fcef 	bl	8b834 <__retarget_lock_close_recursive>
   89e56:	4628      	mov	r0, r5
   89e58:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   89e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00089e60 <__swsetup_r>:
   89e60:	b538      	push	{r3, r4, r5, lr}
   89e62:	4b30      	ldr	r3, [pc, #192]	; (89f24 <__swsetup_r+0xc4>)
   89e64:	4605      	mov	r5, r0
   89e66:	6818      	ldr	r0, [r3, #0]
   89e68:	460c      	mov	r4, r1
   89e6a:	b110      	cbz	r0, 89e72 <__swsetup_r+0x12>
   89e6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89e6e:	2b00      	cmp	r3, #0
   89e70:	d038      	beq.n	89ee4 <__swsetup_r+0x84>
   89e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   89e76:	b293      	uxth	r3, r2
   89e78:	0718      	lsls	r0, r3, #28
   89e7a:	d50c      	bpl.n	89e96 <__swsetup_r+0x36>
   89e7c:	6920      	ldr	r0, [r4, #16]
   89e7e:	b1a8      	cbz	r0, 89eac <__swsetup_r+0x4c>
   89e80:	f013 0201 	ands.w	r2, r3, #1
   89e84:	d01e      	beq.n	89ec4 <__swsetup_r+0x64>
   89e86:	2200      	movs	r2, #0
   89e88:	6963      	ldr	r3, [r4, #20]
   89e8a:	60a2      	str	r2, [r4, #8]
   89e8c:	425b      	negs	r3, r3
   89e8e:	61a3      	str	r3, [r4, #24]
   89e90:	b1f0      	cbz	r0, 89ed0 <__swsetup_r+0x70>
   89e92:	2000      	movs	r0, #0
   89e94:	bd38      	pop	{r3, r4, r5, pc}
   89e96:	06d9      	lsls	r1, r3, #27
   89e98:	d53b      	bpl.n	89f12 <__swsetup_r+0xb2>
   89e9a:	0758      	lsls	r0, r3, #29
   89e9c:	d425      	bmi.n	89eea <__swsetup_r+0x8a>
   89e9e:	6920      	ldr	r0, [r4, #16]
   89ea0:	f042 0308 	orr.w	r3, r2, #8
   89ea4:	81a3      	strh	r3, [r4, #12]
   89ea6:	b29b      	uxth	r3, r3
   89ea8:	2800      	cmp	r0, #0
   89eaa:	d1e9      	bne.n	89e80 <__swsetup_r+0x20>
   89eac:	f403 7220 	and.w	r2, r3, #640	; 0x280
   89eb0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89eb4:	d0e4      	beq.n	89e80 <__swsetup_r+0x20>
   89eb6:	4628      	mov	r0, r5
   89eb8:	4621      	mov	r1, r4
   89eba:	f001 fcef 	bl	8b89c <__smakebuf_r>
   89ebe:	89a3      	ldrh	r3, [r4, #12]
   89ec0:	6920      	ldr	r0, [r4, #16]
   89ec2:	e7dd      	b.n	89e80 <__swsetup_r+0x20>
   89ec4:	0799      	lsls	r1, r3, #30
   89ec6:	bf58      	it	pl
   89ec8:	6962      	ldrpl	r2, [r4, #20]
   89eca:	60a2      	str	r2, [r4, #8]
   89ecc:	2800      	cmp	r0, #0
   89ece:	d1e0      	bne.n	89e92 <__swsetup_r+0x32>
   89ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89ed4:	061a      	lsls	r2, r3, #24
   89ed6:	d5dd      	bpl.n	89e94 <__swsetup_r+0x34>
   89ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89edc:	81a3      	strh	r3, [r4, #12]
   89ede:	f04f 30ff 	mov.w	r0, #4294967295
   89ee2:	bd38      	pop	{r3, r4, r5, pc}
   89ee4:	f001 f8da 	bl	8b09c <__sinit>
   89ee8:	e7c3      	b.n	89e72 <__swsetup_r+0x12>
   89eea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89eec:	b151      	cbz	r1, 89f04 <__swsetup_r+0xa4>
   89eee:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89ef2:	4299      	cmp	r1, r3
   89ef4:	d004      	beq.n	89f00 <__swsetup_r+0xa0>
   89ef6:	4628      	mov	r0, r5
   89ef8:	f001 f9f6 	bl	8b2e8 <_free_r>
   89efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   89f00:	2300      	movs	r3, #0
   89f02:	6323      	str	r3, [r4, #48]	; 0x30
   89f04:	2300      	movs	r3, #0
   89f06:	6920      	ldr	r0, [r4, #16]
   89f08:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   89f0c:	e884 0009 	stmia.w	r4, {r0, r3}
   89f10:	e7c6      	b.n	89ea0 <__swsetup_r+0x40>
   89f12:	2309      	movs	r3, #9
   89f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   89f18:	602b      	str	r3, [r5, #0]
   89f1a:	f04f 30ff 	mov.w	r0, #4294967295
   89f1e:	81a2      	strh	r2, [r4, #12]
   89f20:	bd38      	pop	{r3, r4, r5, pc}
   89f22:	bf00      	nop
   89f24:	20000714 	.word	0x20000714

00089f28 <register_fini>:
   89f28:	4b02      	ldr	r3, [pc, #8]	; (89f34 <register_fini+0xc>)
   89f2a:	b113      	cbz	r3, 89f32 <register_fini+0xa>
   89f2c:	4802      	ldr	r0, [pc, #8]	; (89f38 <register_fini+0x10>)
   89f2e:	f000 b805 	b.w	89f3c <atexit>
   89f32:	4770      	bx	lr
   89f34:	00000000 	.word	0x00000000
   89f38:	0008b115 	.word	0x0008b115

00089f3c <atexit>:
   89f3c:	2300      	movs	r3, #0
   89f3e:	4601      	mov	r1, r0
   89f40:	461a      	mov	r2, r3
   89f42:	4618      	mov	r0, r3
   89f44:	f002 bec2 	b.w	8cccc <__register_exitproc>

00089f48 <quorem>:
   89f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89f4c:	6903      	ldr	r3, [r0, #16]
   89f4e:	690f      	ldr	r7, [r1, #16]
   89f50:	b083      	sub	sp, #12
   89f52:	429f      	cmp	r7, r3
   89f54:	f300 8088 	bgt.w	8a068 <quorem+0x120>
   89f58:	3f01      	subs	r7, #1
   89f5a:	f101 0614 	add.w	r6, r1, #20
   89f5e:	f100 0a14 	add.w	sl, r0, #20
   89f62:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   89f66:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   89f6a:	3301      	adds	r3, #1
   89f6c:	fbb2 f8f3 	udiv	r8, r2, r3
   89f70:	00bb      	lsls	r3, r7, #2
   89f72:	9300      	str	r3, [sp, #0]
   89f74:	eb06 0903 	add.w	r9, r6, r3
   89f78:	4453      	add	r3, sl
   89f7a:	9301      	str	r3, [sp, #4]
   89f7c:	f1b8 0f00 	cmp.w	r8, #0
   89f80:	d03b      	beq.n	89ffa <quorem+0xb2>
   89f82:	2300      	movs	r3, #0
   89f84:	46b4      	mov	ip, r6
   89f86:	461c      	mov	r4, r3
   89f88:	46d6      	mov	lr, sl
   89f8a:	f85c 2b04 	ldr.w	r2, [ip], #4
   89f8e:	f8de 5000 	ldr.w	r5, [lr]
   89f92:	fa1f fb82 	uxth.w	fp, r2
   89f96:	fb08 330b 	mla	r3, r8, fp, r3
   89f9a:	0c12      	lsrs	r2, r2, #16
   89f9c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   89fa0:	fb08 bb02 	mla	fp, r8, r2, fp
   89fa4:	b29a      	uxth	r2, r3
   89fa6:	1aa2      	subs	r2, r4, r2
   89fa8:	b2ab      	uxth	r3, r5
   89faa:	fa1f f48b 	uxth.w	r4, fp
   89fae:	441a      	add	r2, r3
   89fb0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   89fb4:	eb04 4422 	add.w	r4, r4, r2, asr #16
   89fb8:	b292      	uxth	r2, r2
   89fba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   89fbe:	45e1      	cmp	r9, ip
   89fc0:	f84e 2b04 	str.w	r2, [lr], #4
   89fc4:	ea4f 4424 	mov.w	r4, r4, asr #16
   89fc8:	ea4f 431b 	mov.w	r3, fp, lsr #16
   89fcc:	d2dd      	bcs.n	89f8a <quorem+0x42>
   89fce:	9b00      	ldr	r3, [sp, #0]
   89fd0:	f85a 3003 	ldr.w	r3, [sl, r3]
   89fd4:	b98b      	cbnz	r3, 89ffa <quorem+0xb2>
   89fd6:	9c01      	ldr	r4, [sp, #4]
   89fd8:	1f23      	subs	r3, r4, #4
   89fda:	459a      	cmp	sl, r3
   89fdc:	d20c      	bcs.n	89ff8 <quorem+0xb0>
   89fde:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89fe2:	b94b      	cbnz	r3, 89ff8 <quorem+0xb0>
   89fe4:	f1a4 0308 	sub.w	r3, r4, #8
   89fe8:	e002      	b.n	89ff0 <quorem+0xa8>
   89fea:	681a      	ldr	r2, [r3, #0]
   89fec:	3b04      	subs	r3, #4
   89fee:	b91a      	cbnz	r2, 89ff8 <quorem+0xb0>
   89ff0:	459a      	cmp	sl, r3
   89ff2:	f107 37ff 	add.w	r7, r7, #4294967295
   89ff6:	d3f8      	bcc.n	89fea <quorem+0xa2>
   89ff8:	6107      	str	r7, [r0, #16]
   89ffa:	4604      	mov	r4, r0
   89ffc:	f002 fa0c 	bl	8c418 <__mcmp>
   8a000:	2800      	cmp	r0, #0
   8a002:	db2d      	blt.n	8a060 <quorem+0x118>
   8a004:	4655      	mov	r5, sl
   8a006:	2300      	movs	r3, #0
   8a008:	f108 0801 	add.w	r8, r8, #1
   8a00c:	f856 1b04 	ldr.w	r1, [r6], #4
   8a010:	6828      	ldr	r0, [r5, #0]
   8a012:	b28a      	uxth	r2, r1
   8a014:	1a9a      	subs	r2, r3, r2
   8a016:	0c0b      	lsrs	r3, r1, #16
   8a018:	b281      	uxth	r1, r0
   8a01a:	440a      	add	r2, r1
   8a01c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   8a020:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8a024:	b292      	uxth	r2, r2
   8a026:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8a02a:	45b1      	cmp	r9, r6
   8a02c:	f845 2b04 	str.w	r2, [r5], #4
   8a030:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a034:	d2ea      	bcs.n	8a00c <quorem+0xc4>
   8a036:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8a03a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   8a03e:	b97a      	cbnz	r2, 8a060 <quorem+0x118>
   8a040:	1f1a      	subs	r2, r3, #4
   8a042:	4592      	cmp	sl, r2
   8a044:	d20b      	bcs.n	8a05e <quorem+0x116>
   8a046:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8a04a:	b942      	cbnz	r2, 8a05e <quorem+0x116>
   8a04c:	3b08      	subs	r3, #8
   8a04e:	e002      	b.n	8a056 <quorem+0x10e>
   8a050:	681a      	ldr	r2, [r3, #0]
   8a052:	3b04      	subs	r3, #4
   8a054:	b91a      	cbnz	r2, 8a05e <quorem+0x116>
   8a056:	459a      	cmp	sl, r3
   8a058:	f107 37ff 	add.w	r7, r7, #4294967295
   8a05c:	d3f8      	bcc.n	8a050 <quorem+0x108>
   8a05e:	6127      	str	r7, [r4, #16]
   8a060:	4640      	mov	r0, r8
   8a062:	b003      	add	sp, #12
   8a064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a068:	2000      	movs	r0, #0
   8a06a:	b003      	add	sp, #12
   8a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008a070 <_dtoa_r>:
   8a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a074:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8a076:	b09b      	sub	sp, #108	; 0x6c
   8a078:	4604      	mov	r4, r0
   8a07a:	4692      	mov	sl, r2
   8a07c:	469b      	mov	fp, r3
   8a07e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   8a080:	b14d      	cbz	r5, 8a096 <_dtoa_r+0x26>
   8a082:	2301      	movs	r3, #1
   8a084:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8a086:	4629      	mov	r1, r5
   8a088:	4093      	lsls	r3, r2
   8a08a:	60ab      	str	r3, [r5, #8]
   8a08c:	606a      	str	r2, [r5, #4]
   8a08e:	f001 ffeb 	bl	8c068 <_Bfree>
   8a092:	2300      	movs	r3, #0
   8a094:	6423      	str	r3, [r4, #64]	; 0x40
   8a096:	f1bb 0f00 	cmp.w	fp, #0
   8a09a:	465d      	mov	r5, fp
   8a09c:	db35      	blt.n	8a10a <_dtoa_r+0x9a>
   8a09e:	2300      	movs	r3, #0
   8a0a0:	6033      	str	r3, [r6, #0]
   8a0a2:	4b9d      	ldr	r3, [pc, #628]	; (8a318 <_dtoa_r+0x2a8>)
   8a0a4:	43ab      	bics	r3, r5
   8a0a6:	d015      	beq.n	8a0d4 <_dtoa_r+0x64>
   8a0a8:	2200      	movs	r2, #0
   8a0aa:	2300      	movs	r3, #0
   8a0ac:	4650      	mov	r0, sl
   8a0ae:	4659      	mov	r1, fp
   8a0b0:	f003 fb84 	bl	8d7bc <__aeabi_dcmpeq>
   8a0b4:	4680      	mov	r8, r0
   8a0b6:	2800      	cmp	r0, #0
   8a0b8:	d02d      	beq.n	8a116 <_dtoa_r+0xa6>
   8a0ba:	2301      	movs	r3, #1
   8a0bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a0be:	6013      	str	r3, [r2, #0]
   8a0c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a0c2:	2b00      	cmp	r3, #0
   8a0c4:	f000 80bd 	beq.w	8a242 <_dtoa_r+0x1d2>
   8a0c8:	4894      	ldr	r0, [pc, #592]	; (8a31c <_dtoa_r+0x2ac>)
   8a0ca:	6018      	str	r0, [r3, #0]
   8a0cc:	3801      	subs	r0, #1
   8a0ce:	b01b      	add	sp, #108	; 0x6c
   8a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a0d4:	f242 730f 	movw	r3, #9999	; 0x270f
   8a0d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a0da:	6013      	str	r3, [r2, #0]
   8a0dc:	f1ba 0f00 	cmp.w	sl, #0
   8a0e0:	d10d      	bne.n	8a0fe <_dtoa_r+0x8e>
   8a0e2:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8a0e6:	b955      	cbnz	r5, 8a0fe <_dtoa_r+0x8e>
   8a0e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a0ea:	488d      	ldr	r0, [pc, #564]	; (8a320 <_dtoa_r+0x2b0>)
   8a0ec:	2b00      	cmp	r3, #0
   8a0ee:	d0ee      	beq.n	8a0ce <_dtoa_r+0x5e>
   8a0f0:	f100 0308 	add.w	r3, r0, #8
   8a0f4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8a0f6:	6013      	str	r3, [r2, #0]
   8a0f8:	b01b      	add	sp, #108	; 0x6c
   8a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a0fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a100:	4888      	ldr	r0, [pc, #544]	; (8a324 <_dtoa_r+0x2b4>)
   8a102:	2b00      	cmp	r3, #0
   8a104:	d0e3      	beq.n	8a0ce <_dtoa_r+0x5e>
   8a106:	1cc3      	adds	r3, r0, #3
   8a108:	e7f4      	b.n	8a0f4 <_dtoa_r+0x84>
   8a10a:	2301      	movs	r3, #1
   8a10c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   8a110:	6033      	str	r3, [r6, #0]
   8a112:	46ab      	mov	fp, r5
   8a114:	e7c5      	b.n	8a0a2 <_dtoa_r+0x32>
   8a116:	aa18      	add	r2, sp, #96	; 0x60
   8a118:	ab19      	add	r3, sp, #100	; 0x64
   8a11a:	9201      	str	r2, [sp, #4]
   8a11c:	9300      	str	r3, [sp, #0]
   8a11e:	4652      	mov	r2, sl
   8a120:	465b      	mov	r3, fp
   8a122:	4620      	mov	r0, r4
   8a124:	f002 fa22 	bl	8c56c <__d2b>
   8a128:	0d2b      	lsrs	r3, r5, #20
   8a12a:	4681      	mov	r9, r0
   8a12c:	d071      	beq.n	8a212 <_dtoa_r+0x1a2>
   8a12e:	4650      	mov	r0, sl
   8a130:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8a134:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   8a138:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8a13a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8a13e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8a142:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8a146:	2200      	movs	r2, #0
   8a148:	4b77      	ldr	r3, [pc, #476]	; (8a328 <_dtoa_r+0x2b8>)
   8a14a:	f002 ff1b 	bl	8cf84 <__aeabi_dsub>
   8a14e:	a36c      	add	r3, pc, #432	; (adr r3, 8a300 <_dtoa_r+0x290>)
   8a150:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a154:	f003 f8ca 	bl	8d2ec <__aeabi_dmul>
   8a158:	a36b      	add	r3, pc, #428	; (adr r3, 8a308 <_dtoa_r+0x298>)
   8a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a15e:	f002 ff13 	bl	8cf88 <__adddf3>
   8a162:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8a166:	4630      	mov	r0, r6
   8a168:	f003 f85a 	bl	8d220 <__aeabi_i2d>
   8a16c:	a368      	add	r3, pc, #416	; (adr r3, 8a310 <_dtoa_r+0x2a0>)
   8a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a172:	f003 f8bb 	bl	8d2ec <__aeabi_dmul>
   8a176:	4602      	mov	r2, r0
   8a178:	460b      	mov	r3, r1
   8a17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8a17e:	f002 ff03 	bl	8cf88 <__adddf3>
   8a182:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8a186:	f003 fb61 	bl	8d84c <__aeabi_d2iz>
   8a18a:	2200      	movs	r2, #0
   8a18c:	9002      	str	r0, [sp, #8]
   8a18e:	2300      	movs	r3, #0
   8a190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8a194:	f003 fb1c 	bl	8d7d0 <__aeabi_dcmplt>
   8a198:	2800      	cmp	r0, #0
   8a19a:	f040 816d 	bne.w	8a478 <_dtoa_r+0x408>
   8a19e:	9d02      	ldr	r5, [sp, #8]
   8a1a0:	2d16      	cmp	r5, #22
   8a1a2:	f200 8157 	bhi.w	8a454 <_dtoa_r+0x3e4>
   8a1a6:	4961      	ldr	r1, [pc, #388]	; (8a32c <_dtoa_r+0x2bc>)
   8a1a8:	4652      	mov	r2, sl
   8a1aa:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   8a1ae:	465b      	mov	r3, fp
   8a1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
   8a1b4:	f003 fb2a 	bl	8d80c <__aeabi_dcmpgt>
   8a1b8:	2800      	cmp	r0, #0
   8a1ba:	f000 81be 	beq.w	8a53a <_dtoa_r+0x4ca>
   8a1be:	1e6b      	subs	r3, r5, #1
   8a1c0:	9302      	str	r3, [sp, #8]
   8a1c2:	2300      	movs	r3, #0
   8a1c4:	930e      	str	r3, [sp, #56]	; 0x38
   8a1c6:	1bbf      	subs	r7, r7, r6
   8a1c8:	1e7b      	subs	r3, r7, #1
   8a1ca:	9308      	str	r3, [sp, #32]
   8a1cc:	f100 814e 	bmi.w	8a46c <_dtoa_r+0x3fc>
   8a1d0:	2300      	movs	r3, #0
   8a1d2:	930a      	str	r3, [sp, #40]	; 0x28
   8a1d4:	9b02      	ldr	r3, [sp, #8]
   8a1d6:	2b00      	cmp	r3, #0
   8a1d8:	f2c0 813f 	blt.w	8a45a <_dtoa_r+0x3ea>
   8a1dc:	9a08      	ldr	r2, [sp, #32]
   8a1de:	930d      	str	r3, [sp, #52]	; 0x34
   8a1e0:	4611      	mov	r1, r2
   8a1e2:	4419      	add	r1, r3
   8a1e4:	2300      	movs	r3, #0
   8a1e6:	9108      	str	r1, [sp, #32]
   8a1e8:	930c      	str	r3, [sp, #48]	; 0x30
   8a1ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a1ec:	2b09      	cmp	r3, #9
   8a1ee:	d82a      	bhi.n	8a246 <_dtoa_r+0x1d6>
   8a1f0:	2b05      	cmp	r3, #5
   8a1f2:	f340 8658 	ble.w	8aea6 <_dtoa_r+0xe36>
   8a1f6:	2500      	movs	r5, #0
   8a1f8:	3b04      	subs	r3, #4
   8a1fa:	9324      	str	r3, [sp, #144]	; 0x90
   8a1fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a1fe:	3b02      	subs	r3, #2
   8a200:	2b03      	cmp	r3, #3
   8a202:	f200 863f 	bhi.w	8ae84 <_dtoa_r+0xe14>
   8a206:	e8df f013 	tbh	[pc, r3, lsl #1]
   8a20a:	03ce      	.short	0x03ce
   8a20c:	03d902c3 	.word	0x03d902c3
   8a210:	045b      	.short	0x045b
   8a212:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8a214:	9e19      	ldr	r6, [sp, #100]	; 0x64
   8a216:	443e      	add	r6, r7
   8a218:	f206 4332 	addw	r3, r6, #1074	; 0x432
   8a21c:	2b20      	cmp	r3, #32
   8a21e:	f340 8187 	ble.w	8a530 <_dtoa_r+0x4c0>
   8a222:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   8a226:	f206 4012 	addw	r0, r6, #1042	; 0x412
   8a22a:	409d      	lsls	r5, r3
   8a22c:	fa2a f000 	lsr.w	r0, sl, r0
   8a230:	4328      	orrs	r0, r5
   8a232:	f002 ffe5 	bl	8d200 <__aeabi_ui2d>
   8a236:	2301      	movs	r3, #1
   8a238:	3e01      	subs	r6, #1
   8a23a:	9314      	str	r3, [sp, #80]	; 0x50
   8a23c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8a240:	e781      	b.n	8a146 <_dtoa_r+0xd6>
   8a242:	483b      	ldr	r0, [pc, #236]	; (8a330 <_dtoa_r+0x2c0>)
   8a244:	e743      	b.n	8a0ce <_dtoa_r+0x5e>
   8a246:	2100      	movs	r1, #0
   8a248:	4620      	mov	r0, r4
   8a24a:	6461      	str	r1, [r4, #68]	; 0x44
   8a24c:	9125      	str	r1, [sp, #148]	; 0x94
   8a24e:	f001 fee5 	bl	8c01c <_Balloc>
   8a252:	f04f 33ff 	mov.w	r3, #4294967295
   8a256:	9307      	str	r3, [sp, #28]
   8a258:	930f      	str	r3, [sp, #60]	; 0x3c
   8a25a:	2301      	movs	r3, #1
   8a25c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8a25e:	9004      	str	r0, [sp, #16]
   8a260:	6420      	str	r0, [r4, #64]	; 0x40
   8a262:	9224      	str	r2, [sp, #144]	; 0x90
   8a264:	930b      	str	r3, [sp, #44]	; 0x2c
   8a266:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8a268:	2b00      	cmp	r3, #0
   8a26a:	f2c0 80d3 	blt.w	8a414 <_dtoa_r+0x3a4>
   8a26e:	9a02      	ldr	r2, [sp, #8]
   8a270:	2a0e      	cmp	r2, #14
   8a272:	f300 80cf 	bgt.w	8a414 <_dtoa_r+0x3a4>
   8a276:	4b2d      	ldr	r3, [pc, #180]	; (8a32c <_dtoa_r+0x2bc>)
   8a278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a280:	e9cd 2308 	strd	r2, r3, [sp, #32]
   8a284:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a286:	2b00      	cmp	r3, #0
   8a288:	f2c0 83b4 	blt.w	8a9f4 <_dtoa_r+0x984>
   8a28c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   8a290:	4650      	mov	r0, sl
   8a292:	462a      	mov	r2, r5
   8a294:	4633      	mov	r3, r6
   8a296:	4659      	mov	r1, fp
   8a298:	f003 f952 	bl	8d540 <__aeabi_ddiv>
   8a29c:	f003 fad6 	bl	8d84c <__aeabi_d2iz>
   8a2a0:	4680      	mov	r8, r0
   8a2a2:	f002 ffbd 	bl	8d220 <__aeabi_i2d>
   8a2a6:	462a      	mov	r2, r5
   8a2a8:	4633      	mov	r3, r6
   8a2aa:	f003 f81f 	bl	8d2ec <__aeabi_dmul>
   8a2ae:	4602      	mov	r2, r0
   8a2b0:	460b      	mov	r3, r1
   8a2b2:	4650      	mov	r0, sl
   8a2b4:	4659      	mov	r1, fp
   8a2b6:	f002 fe65 	bl	8cf84 <__aeabi_dsub>
   8a2ba:	9e07      	ldr	r6, [sp, #28]
   8a2bc:	9f04      	ldr	r7, [sp, #16]
   8a2be:	f108 0530 	add.w	r5, r8, #48	; 0x30
   8a2c2:	2e01      	cmp	r6, #1
   8a2c4:	703d      	strb	r5, [r7, #0]
   8a2c6:	4602      	mov	r2, r0
   8a2c8:	460b      	mov	r3, r1
   8a2ca:	f107 0501 	add.w	r5, r7, #1
   8a2ce:	d064      	beq.n	8a39a <_dtoa_r+0x32a>
   8a2d0:	2200      	movs	r2, #0
   8a2d2:	4b18      	ldr	r3, [pc, #96]	; (8a334 <_dtoa_r+0x2c4>)
   8a2d4:	f003 f80a 	bl	8d2ec <__aeabi_dmul>
   8a2d8:	2200      	movs	r2, #0
   8a2da:	2300      	movs	r3, #0
   8a2dc:	4606      	mov	r6, r0
   8a2de:	460f      	mov	r7, r1
   8a2e0:	f003 fa6c 	bl	8d7bc <__aeabi_dcmpeq>
   8a2e4:	2800      	cmp	r0, #0
   8a2e6:	f040 8082 	bne.w	8a3ee <_dtoa_r+0x37e>
   8a2ea:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8a2ee:	f04f 0a00 	mov.w	sl, #0
   8a2f2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   8a2f6:	f04f 0b00 	mov.w	fp, #0
   8a2fa:	940b      	str	r4, [sp, #44]	; 0x2c
   8a2fc:	e029      	b.n	8a352 <_dtoa_r+0x2e2>
   8a2fe:	bf00      	nop
   8a300:	636f4361 	.word	0x636f4361
   8a304:	3fd287a7 	.word	0x3fd287a7
   8a308:	8b60c8b3 	.word	0x8b60c8b3
   8a30c:	3fc68a28 	.word	0x3fc68a28
   8a310:	509f79fb 	.word	0x509f79fb
   8a314:	3fd34413 	.word	0x3fd34413
   8a318:	7ff00000 	.word	0x7ff00000
   8a31c:	0008db55 	.word	0x0008db55
   8a320:	0008db98 	.word	0x0008db98
   8a324:	0008dba4 	.word	0x0008dba4
   8a328:	3ff80000 	.word	0x3ff80000
   8a32c:	0008dbe0 	.word	0x0008dbe0
   8a330:	0008db54 	.word	0x0008db54
   8a334:	40240000 	.word	0x40240000
   8a338:	2200      	movs	r2, #0
   8a33a:	4b81      	ldr	r3, [pc, #516]	; (8a540 <_dtoa_r+0x4d0>)
   8a33c:	f002 ffd6 	bl	8d2ec <__aeabi_dmul>
   8a340:	4652      	mov	r2, sl
   8a342:	465b      	mov	r3, fp
   8a344:	4606      	mov	r6, r0
   8a346:	460f      	mov	r7, r1
   8a348:	f003 fa38 	bl	8d7bc <__aeabi_dcmpeq>
   8a34c:	2800      	cmp	r0, #0
   8a34e:	f040 83ba 	bne.w	8aac6 <_dtoa_r+0xa56>
   8a352:	4642      	mov	r2, r8
   8a354:	464b      	mov	r3, r9
   8a356:	4630      	mov	r0, r6
   8a358:	4639      	mov	r1, r7
   8a35a:	f003 f8f1 	bl	8d540 <__aeabi_ddiv>
   8a35e:	f003 fa75 	bl	8d84c <__aeabi_d2iz>
   8a362:	4604      	mov	r4, r0
   8a364:	f002 ff5c 	bl	8d220 <__aeabi_i2d>
   8a368:	4642      	mov	r2, r8
   8a36a:	464b      	mov	r3, r9
   8a36c:	f002 ffbe 	bl	8d2ec <__aeabi_dmul>
   8a370:	4602      	mov	r2, r0
   8a372:	460b      	mov	r3, r1
   8a374:	4630      	mov	r0, r6
   8a376:	4639      	mov	r1, r7
   8a378:	f002 fe04 	bl	8cf84 <__aeabi_dsub>
   8a37c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   8a380:	f805 6b01 	strb.w	r6, [r5], #1
   8a384:	9e04      	ldr	r6, [sp, #16]
   8a386:	9f07      	ldr	r7, [sp, #28]
   8a388:	1bae      	subs	r6, r5, r6
   8a38a:	42be      	cmp	r6, r7
   8a38c:	4602      	mov	r2, r0
   8a38e:	460b      	mov	r3, r1
   8a390:	d1d2      	bne.n	8a338 <_dtoa_r+0x2c8>
   8a392:	46a0      	mov	r8, r4
   8a394:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8a398:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8a39a:	4610      	mov	r0, r2
   8a39c:	4619      	mov	r1, r3
   8a39e:	f002 fdf3 	bl	8cf88 <__adddf3>
   8a3a2:	4606      	mov	r6, r0
   8a3a4:	460f      	mov	r7, r1
   8a3a6:	4602      	mov	r2, r0
   8a3a8:	460b      	mov	r3, r1
   8a3aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a3ae:	f003 fa0f 	bl	8d7d0 <__aeabi_dcmplt>
   8a3b2:	b948      	cbnz	r0, 8a3c8 <_dtoa_r+0x358>
   8a3b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a3b8:	4632      	mov	r2, r6
   8a3ba:	463b      	mov	r3, r7
   8a3bc:	f003 f9fe 	bl	8d7bc <__aeabi_dcmpeq>
   8a3c0:	b1a8      	cbz	r0, 8a3ee <_dtoa_r+0x37e>
   8a3c2:	f018 0f01 	tst.w	r8, #1
   8a3c6:	d012      	beq.n	8a3ee <_dtoa_r+0x37e>
   8a3c8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8a3cc:	1e6b      	subs	r3, r5, #1
   8a3ce:	9a04      	ldr	r2, [sp, #16]
   8a3d0:	e004      	b.n	8a3dc <_dtoa_r+0x36c>
   8a3d2:	429a      	cmp	r2, r3
   8a3d4:	f000 8402 	beq.w	8abdc <_dtoa_r+0xb6c>
   8a3d8:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   8a3dc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   8a3e0:	f103 0501 	add.w	r5, r3, #1
   8a3e4:	d0f5      	beq.n	8a3d2 <_dtoa_r+0x362>
   8a3e6:	f108 0801 	add.w	r8, r8, #1
   8a3ea:	f883 8000 	strb.w	r8, [r3]
   8a3ee:	4649      	mov	r1, r9
   8a3f0:	4620      	mov	r0, r4
   8a3f2:	f001 fe39 	bl	8c068 <_Bfree>
   8a3f6:	2200      	movs	r2, #0
   8a3f8:	9b02      	ldr	r3, [sp, #8]
   8a3fa:	702a      	strb	r2, [r5, #0]
   8a3fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a3fe:	3301      	adds	r3, #1
   8a400:	6013      	str	r3, [r2, #0]
   8a402:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a404:	2b00      	cmp	r3, #0
   8a406:	f000 839f 	beq.w	8ab48 <_dtoa_r+0xad8>
   8a40a:	9804      	ldr	r0, [sp, #16]
   8a40c:	601d      	str	r5, [r3, #0]
   8a40e:	b01b      	add	sp, #108	; 0x6c
   8a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a416:	2a00      	cmp	r2, #0
   8a418:	d03e      	beq.n	8a498 <_dtoa_r+0x428>
   8a41a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8a41c:	2a01      	cmp	r2, #1
   8a41e:	f340 8311 	ble.w	8aa44 <_dtoa_r+0x9d4>
   8a422:	9b07      	ldr	r3, [sp, #28]
   8a424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a426:	1e5f      	subs	r7, r3, #1
   8a428:	42ba      	cmp	r2, r7
   8a42a:	f2c0 8390 	blt.w	8ab4e <_dtoa_r+0xade>
   8a42e:	1bd7      	subs	r7, r2, r7
   8a430:	9b07      	ldr	r3, [sp, #28]
   8a432:	2b00      	cmp	r3, #0
   8a434:	f2c0 848c 	blt.w	8ad50 <_dtoa_r+0xce0>
   8a438:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8a43a:	9b07      	ldr	r3, [sp, #28]
   8a43c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a43e:	2101      	movs	r1, #1
   8a440:	441a      	add	r2, r3
   8a442:	920a      	str	r2, [sp, #40]	; 0x28
   8a444:	9a08      	ldr	r2, [sp, #32]
   8a446:	4620      	mov	r0, r4
   8a448:	441a      	add	r2, r3
   8a44a:	9208      	str	r2, [sp, #32]
   8a44c:	f001 fea8 	bl	8c1a0 <__i2b>
   8a450:	4606      	mov	r6, r0
   8a452:	e023      	b.n	8a49c <_dtoa_r+0x42c>
   8a454:	2301      	movs	r3, #1
   8a456:	930e      	str	r3, [sp, #56]	; 0x38
   8a458:	e6b5      	b.n	8a1c6 <_dtoa_r+0x156>
   8a45a:	2300      	movs	r3, #0
   8a45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a45e:	930d      	str	r3, [sp, #52]	; 0x34
   8a460:	9b02      	ldr	r3, [sp, #8]
   8a462:	1ad2      	subs	r2, r2, r3
   8a464:	425b      	negs	r3, r3
   8a466:	920a      	str	r2, [sp, #40]	; 0x28
   8a468:	930c      	str	r3, [sp, #48]	; 0x30
   8a46a:	e6be      	b.n	8a1ea <_dtoa_r+0x17a>
   8a46c:	f1c7 0301 	rsb	r3, r7, #1
   8a470:	930a      	str	r3, [sp, #40]	; 0x28
   8a472:	2300      	movs	r3, #0
   8a474:	9308      	str	r3, [sp, #32]
   8a476:	e6ad      	b.n	8a1d4 <_dtoa_r+0x164>
   8a478:	9d02      	ldr	r5, [sp, #8]
   8a47a:	4628      	mov	r0, r5
   8a47c:	f002 fed0 	bl	8d220 <__aeabi_i2d>
   8a480:	4602      	mov	r2, r0
   8a482:	460b      	mov	r3, r1
   8a484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8a488:	f003 f998 	bl	8d7bc <__aeabi_dcmpeq>
   8a48c:	2800      	cmp	r0, #0
   8a48e:	f47f ae86 	bne.w	8a19e <_dtoa_r+0x12e>
   8a492:	1e6b      	subs	r3, r5, #1
   8a494:	9302      	str	r3, [sp, #8]
   8a496:	e682      	b.n	8a19e <_dtoa_r+0x12e>
   8a498:	ad0a      	add	r5, sp, #40	; 0x28
   8a49a:	cde0      	ldmia	r5, {r5, r6, r7}
   8a49c:	2d00      	cmp	r5, #0
   8a49e:	dd0c      	ble.n	8a4ba <_dtoa_r+0x44a>
   8a4a0:	9908      	ldr	r1, [sp, #32]
   8a4a2:	2900      	cmp	r1, #0
   8a4a4:	460b      	mov	r3, r1
   8a4a6:	dd08      	ble.n	8a4ba <_dtoa_r+0x44a>
   8a4a8:	42a9      	cmp	r1, r5
   8a4aa:	bfa8      	it	ge
   8a4ac:	462b      	movge	r3, r5
   8a4ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a4b0:	1aed      	subs	r5, r5, r3
   8a4b2:	1ad2      	subs	r2, r2, r3
   8a4b4:	1acb      	subs	r3, r1, r3
   8a4b6:	920a      	str	r2, [sp, #40]	; 0x28
   8a4b8:	9308      	str	r3, [sp, #32]
   8a4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a4bc:	b1d3      	cbz	r3, 8a4f4 <_dtoa_r+0x484>
   8a4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a4c0:	2b00      	cmp	r3, #0
   8a4c2:	f000 82b8 	beq.w	8aa36 <_dtoa_r+0x9c6>
   8a4c6:	2f00      	cmp	r7, #0
   8a4c8:	dd10      	ble.n	8a4ec <_dtoa_r+0x47c>
   8a4ca:	4631      	mov	r1, r6
   8a4cc:	463a      	mov	r2, r7
   8a4ce:	4620      	mov	r0, r4
   8a4d0:	f001 ff02 	bl	8c2d8 <__pow5mult>
   8a4d4:	464a      	mov	r2, r9
   8a4d6:	4601      	mov	r1, r0
   8a4d8:	4606      	mov	r6, r0
   8a4da:	4620      	mov	r0, r4
   8a4dc:	f001 fe6a 	bl	8c1b4 <__multiply>
   8a4e0:	4603      	mov	r3, r0
   8a4e2:	4649      	mov	r1, r9
   8a4e4:	4620      	mov	r0, r4
   8a4e6:	4699      	mov	r9, r3
   8a4e8:	f001 fdbe 	bl	8c068 <_Bfree>
   8a4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a4ee:	1bda      	subs	r2, r3, r7
   8a4f0:	f040 82a2 	bne.w	8aa38 <_dtoa_r+0x9c8>
   8a4f4:	2101      	movs	r1, #1
   8a4f6:	4620      	mov	r0, r4
   8a4f8:	f001 fe52 	bl	8c1a0 <__i2b>
   8a4fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a4fe:	4680      	mov	r8, r0
   8a500:	2b00      	cmp	r3, #0
   8a502:	dd1f      	ble.n	8a544 <_dtoa_r+0x4d4>
   8a504:	4601      	mov	r1, r0
   8a506:	461a      	mov	r2, r3
   8a508:	4620      	mov	r0, r4
   8a50a:	f001 fee5 	bl	8c2d8 <__pow5mult>
   8a50e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a510:	4680      	mov	r8, r0
   8a512:	2b01      	cmp	r3, #1
   8a514:	f340 8255 	ble.w	8a9c2 <_dtoa_r+0x952>
   8a518:	2300      	movs	r3, #0
   8a51a:	930c      	str	r3, [sp, #48]	; 0x30
   8a51c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8a520:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8a524:	6918      	ldr	r0, [r3, #16]
   8a526:	f001 fdeb 	bl	8c100 <__hi0bits>
   8a52a:	f1c0 0020 	rsb	r0, r0, #32
   8a52e:	e013      	b.n	8a558 <_dtoa_r+0x4e8>
   8a530:	f1c3 0520 	rsb	r5, r3, #32
   8a534:	fa0a f005 	lsl.w	r0, sl, r5
   8a538:	e67b      	b.n	8a232 <_dtoa_r+0x1c2>
   8a53a:	900e      	str	r0, [sp, #56]	; 0x38
   8a53c:	e643      	b.n	8a1c6 <_dtoa_r+0x156>
   8a53e:	bf00      	nop
   8a540:	40240000 	.word	0x40240000
   8a544:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a546:	2b01      	cmp	r3, #1
   8a548:	f340 8285 	ble.w	8aa56 <_dtoa_r+0x9e6>
   8a54c:	2300      	movs	r3, #0
   8a54e:	930c      	str	r3, [sp, #48]	; 0x30
   8a550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a552:	2001      	movs	r0, #1
   8a554:	2b00      	cmp	r3, #0
   8a556:	d1e1      	bne.n	8a51c <_dtoa_r+0x4ac>
   8a558:	9a08      	ldr	r2, [sp, #32]
   8a55a:	4410      	add	r0, r2
   8a55c:	f010 001f 	ands.w	r0, r0, #31
   8a560:	f000 80a1 	beq.w	8a6a6 <_dtoa_r+0x636>
   8a564:	f1c0 0320 	rsb	r3, r0, #32
   8a568:	2b04      	cmp	r3, #4
   8a56a:	f340 8486 	ble.w	8ae7a <_dtoa_r+0xe0a>
   8a56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a570:	f1c0 001c 	rsb	r0, r0, #28
   8a574:	4403      	add	r3, r0
   8a576:	930a      	str	r3, [sp, #40]	; 0x28
   8a578:	4613      	mov	r3, r2
   8a57a:	4403      	add	r3, r0
   8a57c:	4405      	add	r5, r0
   8a57e:	9308      	str	r3, [sp, #32]
   8a580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a582:	2b00      	cmp	r3, #0
   8a584:	dd05      	ble.n	8a592 <_dtoa_r+0x522>
   8a586:	4649      	mov	r1, r9
   8a588:	461a      	mov	r2, r3
   8a58a:	4620      	mov	r0, r4
   8a58c:	f001 fef4 	bl	8c378 <__lshift>
   8a590:	4681      	mov	r9, r0
   8a592:	9b08      	ldr	r3, [sp, #32]
   8a594:	2b00      	cmp	r3, #0
   8a596:	dd05      	ble.n	8a5a4 <_dtoa_r+0x534>
   8a598:	4641      	mov	r1, r8
   8a59a:	461a      	mov	r2, r3
   8a59c:	4620      	mov	r0, r4
   8a59e:	f001 feeb 	bl	8c378 <__lshift>
   8a5a2:	4680      	mov	r8, r0
   8a5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a5a6:	2b00      	cmp	r3, #0
   8a5a8:	f040 8086 	bne.w	8a6b8 <_dtoa_r+0x648>
   8a5ac:	9b07      	ldr	r3, [sp, #28]
   8a5ae:	2b00      	cmp	r3, #0
   8a5b0:	f340 8264 	ble.w	8aa7c <_dtoa_r+0xa0c>
   8a5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a5b6:	2b00      	cmp	r3, #0
   8a5b8:	f000 8098 	beq.w	8a6ec <_dtoa_r+0x67c>
   8a5bc:	2d00      	cmp	r5, #0
   8a5be:	dd05      	ble.n	8a5cc <_dtoa_r+0x55c>
   8a5c0:	4631      	mov	r1, r6
   8a5c2:	462a      	mov	r2, r5
   8a5c4:	4620      	mov	r0, r4
   8a5c6:	f001 fed7 	bl	8c378 <__lshift>
   8a5ca:	4606      	mov	r6, r0
   8a5cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a5ce:	2b00      	cmp	r3, #0
   8a5d0:	f040 8336 	bne.w	8ac40 <_dtoa_r+0xbd0>
   8a5d4:	9608      	str	r6, [sp, #32]
   8a5d6:	9b07      	ldr	r3, [sp, #28]
   8a5d8:	9a04      	ldr	r2, [sp, #16]
   8a5da:	3b01      	subs	r3, #1
   8a5dc:	18d3      	adds	r3, r2, r3
   8a5de:	930b      	str	r3, [sp, #44]	; 0x2c
   8a5e0:	4617      	mov	r7, r2
   8a5e2:	f00a 0301 	and.w	r3, sl, #1
   8a5e6:	46c2      	mov	sl, r8
   8a5e8:	f8dd b020 	ldr.w	fp, [sp, #32]
   8a5ec:	930c      	str	r3, [sp, #48]	; 0x30
   8a5ee:	4651      	mov	r1, sl
   8a5f0:	4648      	mov	r0, r9
   8a5f2:	f7ff fca9 	bl	89f48 <quorem>
   8a5f6:	4631      	mov	r1, r6
   8a5f8:	4605      	mov	r5, r0
   8a5fa:	4648      	mov	r0, r9
   8a5fc:	f001 ff0c 	bl	8c418 <__mcmp>
   8a600:	465a      	mov	r2, fp
   8a602:	9007      	str	r0, [sp, #28]
   8a604:	4651      	mov	r1, sl
   8a606:	4620      	mov	r0, r4
   8a608:	f001 ff22 	bl	8c450 <__mdiff>
   8a60c:	68c2      	ldr	r2, [r0, #12]
   8a60e:	4680      	mov	r8, r0
   8a610:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8a614:	2a00      	cmp	r2, #0
   8a616:	f040 8229 	bne.w	8aa6c <_dtoa_r+0x9fc>
   8a61a:	4601      	mov	r1, r0
   8a61c:	4648      	mov	r0, r9
   8a61e:	930a      	str	r3, [sp, #40]	; 0x28
   8a620:	f001 fefa 	bl	8c418 <__mcmp>
   8a624:	4641      	mov	r1, r8
   8a626:	9008      	str	r0, [sp, #32]
   8a628:	4620      	mov	r0, r4
   8a62a:	f001 fd1d 	bl	8c068 <_Bfree>
   8a62e:	9a08      	ldr	r2, [sp, #32]
   8a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a632:	b932      	cbnz	r2, 8a642 <_dtoa_r+0x5d2>
   8a634:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a636:	b921      	cbnz	r1, 8a642 <_dtoa_r+0x5d2>
   8a638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a63a:	2a00      	cmp	r2, #0
   8a63c:	f000 83ee 	beq.w	8ae1c <_dtoa_r+0xdac>
   8a640:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8a642:	9907      	ldr	r1, [sp, #28]
   8a644:	2900      	cmp	r1, #0
   8a646:	f2c0 829f 	blt.w	8ab88 <_dtoa_r+0xb18>
   8a64a:	d105      	bne.n	8a658 <_dtoa_r+0x5e8>
   8a64c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a64e:	b919      	cbnz	r1, 8a658 <_dtoa_r+0x5e8>
   8a650:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a652:	2900      	cmp	r1, #0
   8a654:	f000 8298 	beq.w	8ab88 <_dtoa_r+0xb18>
   8a658:	2a00      	cmp	r2, #0
   8a65a:	f300 8305 	bgt.w	8ac68 <_dtoa_r+0xbf8>
   8a65e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a660:	f107 0801 	add.w	r8, r7, #1
   8a664:	4297      	cmp	r7, r2
   8a666:	703b      	strb	r3, [r7, #0]
   8a668:	4645      	mov	r5, r8
   8a66a:	f000 830b 	beq.w	8ac84 <_dtoa_r+0xc14>
   8a66e:	4649      	mov	r1, r9
   8a670:	2300      	movs	r3, #0
   8a672:	220a      	movs	r2, #10
   8a674:	4620      	mov	r0, r4
   8a676:	f001 fd01 	bl	8c07c <__multadd>
   8a67a:	455e      	cmp	r6, fp
   8a67c:	4681      	mov	r9, r0
   8a67e:	4631      	mov	r1, r6
   8a680:	f04f 0300 	mov.w	r3, #0
   8a684:	f04f 020a 	mov.w	r2, #10
   8a688:	4620      	mov	r0, r4
   8a68a:	f000 81e9 	beq.w	8aa60 <_dtoa_r+0x9f0>
   8a68e:	f001 fcf5 	bl	8c07c <__multadd>
   8a692:	4659      	mov	r1, fp
   8a694:	4606      	mov	r6, r0
   8a696:	2300      	movs	r3, #0
   8a698:	220a      	movs	r2, #10
   8a69a:	4620      	mov	r0, r4
   8a69c:	f001 fcee 	bl	8c07c <__multadd>
   8a6a0:	4647      	mov	r7, r8
   8a6a2:	4683      	mov	fp, r0
   8a6a4:	e7a3      	b.n	8a5ee <_dtoa_r+0x57e>
   8a6a6:	201c      	movs	r0, #28
   8a6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a6aa:	4405      	add	r5, r0
   8a6ac:	4403      	add	r3, r0
   8a6ae:	930a      	str	r3, [sp, #40]	; 0x28
   8a6b0:	9b08      	ldr	r3, [sp, #32]
   8a6b2:	4403      	add	r3, r0
   8a6b4:	9308      	str	r3, [sp, #32]
   8a6b6:	e763      	b.n	8a580 <_dtoa_r+0x510>
   8a6b8:	4641      	mov	r1, r8
   8a6ba:	4648      	mov	r0, r9
   8a6bc:	f001 feac 	bl	8c418 <__mcmp>
   8a6c0:	2800      	cmp	r0, #0
   8a6c2:	f6bf af73 	bge.w	8a5ac <_dtoa_r+0x53c>
   8a6c6:	9f02      	ldr	r7, [sp, #8]
   8a6c8:	4649      	mov	r1, r9
   8a6ca:	2300      	movs	r3, #0
   8a6cc:	220a      	movs	r2, #10
   8a6ce:	4620      	mov	r0, r4
   8a6d0:	3f01      	subs	r7, #1
   8a6d2:	9702      	str	r7, [sp, #8]
   8a6d4:	f001 fcd2 	bl	8c07c <__multadd>
   8a6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a6da:	4681      	mov	r9, r0
   8a6dc:	2b00      	cmp	r3, #0
   8a6de:	f040 83b5 	bne.w	8ae4c <_dtoa_r+0xddc>
   8a6e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a6e4:	2b00      	cmp	r3, #0
   8a6e6:	f340 83be 	ble.w	8ae66 <_dtoa_r+0xdf6>
   8a6ea:	9307      	str	r3, [sp, #28]
   8a6ec:	f8dd a010 	ldr.w	sl, [sp, #16]
   8a6f0:	9f07      	ldr	r7, [sp, #28]
   8a6f2:	4655      	mov	r5, sl
   8a6f4:	e006      	b.n	8a704 <_dtoa_r+0x694>
   8a6f6:	4649      	mov	r1, r9
   8a6f8:	2300      	movs	r3, #0
   8a6fa:	220a      	movs	r2, #10
   8a6fc:	4620      	mov	r0, r4
   8a6fe:	f001 fcbd 	bl	8c07c <__multadd>
   8a702:	4681      	mov	r9, r0
   8a704:	4641      	mov	r1, r8
   8a706:	4648      	mov	r0, r9
   8a708:	f7ff fc1e 	bl	89f48 <quorem>
   8a70c:	3030      	adds	r0, #48	; 0x30
   8a70e:	f805 0b01 	strb.w	r0, [r5], #1
   8a712:	eba5 030a 	sub.w	r3, r5, sl
   8a716:	42bb      	cmp	r3, r7
   8a718:	dbed      	blt.n	8a6f6 <_dtoa_r+0x686>
   8a71a:	9b04      	ldr	r3, [sp, #16]
   8a71c:	9a07      	ldr	r2, [sp, #28]
   8a71e:	4682      	mov	sl, r0
   8a720:	2a01      	cmp	r2, #1
   8a722:	bfac      	ite	ge
   8a724:	189b      	addge	r3, r3, r2
   8a726:	3301      	addlt	r3, #1
   8a728:	f04f 0b00 	mov.w	fp, #0
   8a72c:	461d      	mov	r5, r3
   8a72e:	4649      	mov	r1, r9
   8a730:	2201      	movs	r2, #1
   8a732:	4620      	mov	r0, r4
   8a734:	f001 fe20 	bl	8c378 <__lshift>
   8a738:	4641      	mov	r1, r8
   8a73a:	4681      	mov	r9, r0
   8a73c:	f001 fe6c 	bl	8c418 <__mcmp>
   8a740:	2800      	cmp	r0, #0
   8a742:	f340 823f 	ble.w	8abc4 <_dtoa_r+0xb54>
   8a746:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8a74a:	1e6b      	subs	r3, r5, #1
   8a74c:	9904      	ldr	r1, [sp, #16]
   8a74e:	e004      	b.n	8a75a <_dtoa_r+0x6ea>
   8a750:	428b      	cmp	r3, r1
   8a752:	f000 81ae 	beq.w	8aab2 <_dtoa_r+0xa42>
   8a756:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8a75a:	2a39      	cmp	r2, #57	; 0x39
   8a75c:	f103 0501 	add.w	r5, r3, #1
   8a760:	d0f6      	beq.n	8a750 <_dtoa_r+0x6e0>
   8a762:	3201      	adds	r2, #1
   8a764:	701a      	strb	r2, [r3, #0]
   8a766:	4641      	mov	r1, r8
   8a768:	4620      	mov	r0, r4
   8a76a:	f001 fc7d 	bl	8c068 <_Bfree>
   8a76e:	2e00      	cmp	r6, #0
   8a770:	f43f ae3d 	beq.w	8a3ee <_dtoa_r+0x37e>
   8a774:	f1bb 0f00 	cmp.w	fp, #0
   8a778:	d005      	beq.n	8a786 <_dtoa_r+0x716>
   8a77a:	45b3      	cmp	fp, r6
   8a77c:	d003      	beq.n	8a786 <_dtoa_r+0x716>
   8a77e:	4659      	mov	r1, fp
   8a780:	4620      	mov	r0, r4
   8a782:	f001 fc71 	bl	8c068 <_Bfree>
   8a786:	4631      	mov	r1, r6
   8a788:	4620      	mov	r0, r4
   8a78a:	f001 fc6d 	bl	8c068 <_Bfree>
   8a78e:	e62e      	b.n	8a3ee <_dtoa_r+0x37e>
   8a790:	2300      	movs	r3, #0
   8a792:	930b      	str	r3, [sp, #44]	; 0x2c
   8a794:	9b02      	ldr	r3, [sp, #8]
   8a796:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8a798:	4413      	add	r3, r2
   8a79a:	930f      	str	r3, [sp, #60]	; 0x3c
   8a79c:	3301      	adds	r3, #1
   8a79e:	2b01      	cmp	r3, #1
   8a7a0:	461f      	mov	r7, r3
   8a7a2:	461e      	mov	r6, r3
   8a7a4:	bfb8      	it	lt
   8a7a6:	2701      	movlt	r7, #1
   8a7a8:	9307      	str	r3, [sp, #28]
   8a7aa:	2100      	movs	r1, #0
   8a7ac:	2f17      	cmp	r7, #23
   8a7ae:	6461      	str	r1, [r4, #68]	; 0x44
   8a7b0:	d90a      	bls.n	8a7c8 <_dtoa_r+0x758>
   8a7b2:	2201      	movs	r2, #1
   8a7b4:	2304      	movs	r3, #4
   8a7b6:	005b      	lsls	r3, r3, #1
   8a7b8:	f103 0014 	add.w	r0, r3, #20
   8a7bc:	4287      	cmp	r7, r0
   8a7be:	4611      	mov	r1, r2
   8a7c0:	f102 0201 	add.w	r2, r2, #1
   8a7c4:	d2f7      	bcs.n	8a7b6 <_dtoa_r+0x746>
   8a7c6:	6461      	str	r1, [r4, #68]	; 0x44
   8a7c8:	4620      	mov	r0, r4
   8a7ca:	f001 fc27 	bl	8c01c <_Balloc>
   8a7ce:	2e0e      	cmp	r6, #14
   8a7d0:	9004      	str	r0, [sp, #16]
   8a7d2:	6420      	str	r0, [r4, #64]	; 0x40
   8a7d4:	f63f ad47 	bhi.w	8a266 <_dtoa_r+0x1f6>
   8a7d8:	2d00      	cmp	r5, #0
   8a7da:	f43f ad44 	beq.w	8a266 <_dtoa_r+0x1f6>
   8a7de:	9902      	ldr	r1, [sp, #8]
   8a7e0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   8a7e4:	2900      	cmp	r1, #0
   8a7e6:	f340 8203 	ble.w	8abf0 <_dtoa_r+0xb80>
   8a7ea:	4bb9      	ldr	r3, [pc, #740]	; (8aad0 <_dtoa_r+0xa60>)
   8a7ec:	f001 020f 	and.w	r2, r1, #15
   8a7f0:	110d      	asrs	r5, r1, #4
   8a7f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a7f6:	06e9      	lsls	r1, r5, #27
   8a7f8:	e9d3 6700 	ldrd	r6, r7, [r3]
   8a7fc:	f140 81af 	bpl.w	8ab5e <_dtoa_r+0xaee>
   8a800:	4bb4      	ldr	r3, [pc, #720]	; (8aad4 <_dtoa_r+0xa64>)
   8a802:	4650      	mov	r0, sl
   8a804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8a808:	4659      	mov	r1, fp
   8a80a:	f002 fe99 	bl	8d540 <__aeabi_ddiv>
   8a80e:	f04f 0a03 	mov.w	sl, #3
   8a812:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   8a816:	f005 050f 	and.w	r5, r5, #15
   8a81a:	b18d      	cbz	r5, 8a840 <_dtoa_r+0x7d0>
   8a81c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8aad4 <_dtoa_r+0xa64>
   8a820:	07ea      	lsls	r2, r5, #31
   8a822:	d509      	bpl.n	8a838 <_dtoa_r+0x7c8>
   8a824:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a828:	4630      	mov	r0, r6
   8a82a:	4639      	mov	r1, r7
   8a82c:	f002 fd5e 	bl	8d2ec <__aeabi_dmul>
   8a830:	4606      	mov	r6, r0
   8a832:	460f      	mov	r7, r1
   8a834:	f10a 0a01 	add.w	sl, sl, #1
   8a838:	106d      	asrs	r5, r5, #1
   8a83a:	f108 0808 	add.w	r8, r8, #8
   8a83e:	d1ef      	bne.n	8a820 <_dtoa_r+0x7b0>
   8a840:	463b      	mov	r3, r7
   8a842:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8a846:	4632      	mov	r2, r6
   8a848:	f002 fe7a 	bl	8d540 <__aeabi_ddiv>
   8a84c:	4607      	mov	r7, r0
   8a84e:	4688      	mov	r8, r1
   8a850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a852:	b143      	cbz	r3, 8a866 <_dtoa_r+0x7f6>
   8a854:	2200      	movs	r2, #0
   8a856:	4ba0      	ldr	r3, [pc, #640]	; (8aad8 <_dtoa_r+0xa68>)
   8a858:	4638      	mov	r0, r7
   8a85a:	4641      	mov	r1, r8
   8a85c:	f002 ffb8 	bl	8d7d0 <__aeabi_dcmplt>
   8a860:	2800      	cmp	r0, #0
   8a862:	f040 8287 	bne.w	8ad74 <_dtoa_r+0xd04>
   8a866:	4650      	mov	r0, sl
   8a868:	f002 fcda 	bl	8d220 <__aeabi_i2d>
   8a86c:	463a      	mov	r2, r7
   8a86e:	4643      	mov	r3, r8
   8a870:	f002 fd3c 	bl	8d2ec <__aeabi_dmul>
   8a874:	4b99      	ldr	r3, [pc, #612]	; (8aadc <_dtoa_r+0xa6c>)
   8a876:	2200      	movs	r2, #0
   8a878:	f002 fb86 	bl	8cf88 <__adddf3>
   8a87c:	9b07      	ldr	r3, [sp, #28]
   8a87e:	4605      	mov	r5, r0
   8a880:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8a884:	2b00      	cmp	r3, #0
   8a886:	f000 813f 	beq.w	8ab08 <_dtoa_r+0xa98>
   8a88a:	9b02      	ldr	r3, [sp, #8]
   8a88c:	9315      	str	r3, [sp, #84]	; 0x54
   8a88e:	9b07      	ldr	r3, [sp, #28]
   8a890:	9312      	str	r3, [sp, #72]	; 0x48
   8a892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a894:	2b00      	cmp	r3, #0
   8a896:	f000 81fb 	beq.w	8ac90 <_dtoa_r+0xc20>
   8a89a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a89c:	4b8c      	ldr	r3, [pc, #560]	; (8aad0 <_dtoa_r+0xa60>)
   8a89e:	2000      	movs	r0, #0
   8a8a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a8a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8a8a8:	498d      	ldr	r1, [pc, #564]	; (8aae0 <_dtoa_r+0xa70>)
   8a8aa:	f002 fe49 	bl	8d540 <__aeabi_ddiv>
   8a8ae:	462a      	mov	r2, r5
   8a8b0:	4633      	mov	r3, r6
   8a8b2:	f002 fb67 	bl	8cf84 <__aeabi_dsub>
   8a8b6:	4682      	mov	sl, r0
   8a8b8:	468b      	mov	fp, r1
   8a8ba:	4638      	mov	r0, r7
   8a8bc:	4641      	mov	r1, r8
   8a8be:	f002 ffc5 	bl	8d84c <__aeabi_d2iz>
   8a8c2:	4605      	mov	r5, r0
   8a8c4:	f002 fcac 	bl	8d220 <__aeabi_i2d>
   8a8c8:	4602      	mov	r2, r0
   8a8ca:	460b      	mov	r3, r1
   8a8cc:	4638      	mov	r0, r7
   8a8ce:	4641      	mov	r1, r8
   8a8d0:	f002 fb58 	bl	8cf84 <__aeabi_dsub>
   8a8d4:	3530      	adds	r5, #48	; 0x30
   8a8d6:	fa5f f885 	uxtb.w	r8, r5
   8a8da:	9d04      	ldr	r5, [sp, #16]
   8a8dc:	4606      	mov	r6, r0
   8a8de:	460f      	mov	r7, r1
   8a8e0:	f885 8000 	strb.w	r8, [r5]
   8a8e4:	4602      	mov	r2, r0
   8a8e6:	460b      	mov	r3, r1
   8a8e8:	4650      	mov	r0, sl
   8a8ea:	4659      	mov	r1, fp
   8a8ec:	3501      	adds	r5, #1
   8a8ee:	f002 ff8d 	bl	8d80c <__aeabi_dcmpgt>
   8a8f2:	2800      	cmp	r0, #0
   8a8f4:	d154      	bne.n	8a9a0 <_dtoa_r+0x930>
   8a8f6:	4632      	mov	r2, r6
   8a8f8:	463b      	mov	r3, r7
   8a8fa:	2000      	movs	r0, #0
   8a8fc:	4976      	ldr	r1, [pc, #472]	; (8aad8 <_dtoa_r+0xa68>)
   8a8fe:	f002 fb41 	bl	8cf84 <__aeabi_dsub>
   8a902:	4602      	mov	r2, r0
   8a904:	460b      	mov	r3, r1
   8a906:	4650      	mov	r0, sl
   8a908:	4659      	mov	r1, fp
   8a90a:	f002 ff7f 	bl	8d80c <__aeabi_dcmpgt>
   8a90e:	2800      	cmp	r0, #0
   8a910:	f040 8270 	bne.w	8adf4 <_dtoa_r+0xd84>
   8a914:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a916:	2a01      	cmp	r2, #1
   8a918:	f000 8112 	beq.w	8ab40 <_dtoa_r+0xad0>
   8a91c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a91e:	9a04      	ldr	r2, [sp, #16]
   8a920:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8a924:	4413      	add	r3, r2
   8a926:	4699      	mov	r9, r3
   8a928:	e00f      	b.n	8a94a <_dtoa_r+0x8da>
   8a92a:	4632      	mov	r2, r6
   8a92c:	463b      	mov	r3, r7
   8a92e:	2000      	movs	r0, #0
   8a930:	4969      	ldr	r1, [pc, #420]	; (8aad8 <_dtoa_r+0xa68>)
   8a932:	f002 fb27 	bl	8cf84 <__aeabi_dsub>
   8a936:	4652      	mov	r2, sl
   8a938:	465b      	mov	r3, fp
   8a93a:	f002 ff49 	bl	8d7d0 <__aeabi_dcmplt>
   8a93e:	2800      	cmp	r0, #0
   8a940:	f040 8256 	bne.w	8adf0 <_dtoa_r+0xd80>
   8a944:	454d      	cmp	r5, r9
   8a946:	f000 80f9 	beq.w	8ab3c <_dtoa_r+0xacc>
   8a94a:	4650      	mov	r0, sl
   8a94c:	4659      	mov	r1, fp
   8a94e:	2200      	movs	r2, #0
   8a950:	4b64      	ldr	r3, [pc, #400]	; (8aae4 <_dtoa_r+0xa74>)
   8a952:	f002 fccb 	bl	8d2ec <__aeabi_dmul>
   8a956:	2200      	movs	r2, #0
   8a958:	4b62      	ldr	r3, [pc, #392]	; (8aae4 <_dtoa_r+0xa74>)
   8a95a:	4682      	mov	sl, r0
   8a95c:	468b      	mov	fp, r1
   8a95e:	4630      	mov	r0, r6
   8a960:	4639      	mov	r1, r7
   8a962:	f002 fcc3 	bl	8d2ec <__aeabi_dmul>
   8a966:	460f      	mov	r7, r1
   8a968:	4606      	mov	r6, r0
   8a96a:	f002 ff6f 	bl	8d84c <__aeabi_d2iz>
   8a96e:	4680      	mov	r8, r0
   8a970:	f002 fc56 	bl	8d220 <__aeabi_i2d>
   8a974:	4602      	mov	r2, r0
   8a976:	460b      	mov	r3, r1
   8a978:	4630      	mov	r0, r6
   8a97a:	4639      	mov	r1, r7
   8a97c:	f002 fb02 	bl	8cf84 <__aeabi_dsub>
   8a980:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8a984:	fa5f f888 	uxtb.w	r8, r8
   8a988:	f805 8b01 	strb.w	r8, [r5], #1
   8a98c:	4652      	mov	r2, sl
   8a98e:	465b      	mov	r3, fp
   8a990:	4606      	mov	r6, r0
   8a992:	460f      	mov	r7, r1
   8a994:	f002 ff1c 	bl	8d7d0 <__aeabi_dcmplt>
   8a998:	2800      	cmp	r0, #0
   8a99a:	d0c6      	beq.n	8a92a <_dtoa_r+0x8ba>
   8a99c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8a9a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8a9a2:	9302      	str	r3, [sp, #8]
   8a9a4:	e523      	b.n	8a3ee <_dtoa_r+0x37e>
   8a9a6:	2300      	movs	r3, #0
   8a9a8:	930b      	str	r3, [sp, #44]	; 0x2c
   8a9aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a9ac:	2b00      	cmp	r3, #0
   8a9ae:	f340 80dd 	ble.w	8ab6c <_dtoa_r+0xafc>
   8a9b2:	461f      	mov	r7, r3
   8a9b4:	461e      	mov	r6, r3
   8a9b6:	930f      	str	r3, [sp, #60]	; 0x3c
   8a9b8:	9307      	str	r3, [sp, #28]
   8a9ba:	e6f6      	b.n	8a7aa <_dtoa_r+0x73a>
   8a9bc:	2301      	movs	r3, #1
   8a9be:	930b      	str	r3, [sp, #44]	; 0x2c
   8a9c0:	e7f3      	b.n	8a9aa <_dtoa_r+0x93a>
   8a9c2:	f1ba 0f00 	cmp.w	sl, #0
   8a9c6:	f47f ada7 	bne.w	8a518 <_dtoa_r+0x4a8>
   8a9ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8a9ce:	2b00      	cmp	r3, #0
   8a9d0:	f47f adbc 	bne.w	8a54c <_dtoa_r+0x4dc>
   8a9d4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   8a9d8:	0d3f      	lsrs	r7, r7, #20
   8a9da:	053f      	lsls	r7, r7, #20
   8a9dc:	2f00      	cmp	r7, #0
   8a9de:	f000 820d 	beq.w	8adfc <_dtoa_r+0xd8c>
   8a9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a9e4:	3301      	adds	r3, #1
   8a9e6:	930a      	str	r3, [sp, #40]	; 0x28
   8a9e8:	9b08      	ldr	r3, [sp, #32]
   8a9ea:	3301      	adds	r3, #1
   8a9ec:	9308      	str	r3, [sp, #32]
   8a9ee:	2301      	movs	r3, #1
   8a9f0:	930c      	str	r3, [sp, #48]	; 0x30
   8a9f2:	e5ad      	b.n	8a550 <_dtoa_r+0x4e0>
   8a9f4:	9b07      	ldr	r3, [sp, #28]
   8a9f6:	2b00      	cmp	r3, #0
   8a9f8:	f73f ac48 	bgt.w	8a28c <_dtoa_r+0x21c>
   8a9fc:	f040 8222 	bne.w	8ae44 <_dtoa_r+0xdd4>
   8aa00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8aa04:	2200      	movs	r2, #0
   8aa06:	4b38      	ldr	r3, [pc, #224]	; (8aae8 <_dtoa_r+0xa78>)
   8aa08:	f002 fc70 	bl	8d2ec <__aeabi_dmul>
   8aa0c:	4652      	mov	r2, sl
   8aa0e:	465b      	mov	r3, fp
   8aa10:	f002 fef2 	bl	8d7f8 <__aeabi_dcmpge>
   8aa14:	f8dd 801c 	ldr.w	r8, [sp, #28]
   8aa18:	4646      	mov	r6, r8
   8aa1a:	2800      	cmp	r0, #0
   8aa1c:	d041      	beq.n	8aaa2 <_dtoa_r+0xa32>
   8aa1e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8aa20:	9d04      	ldr	r5, [sp, #16]
   8aa22:	43db      	mvns	r3, r3
   8aa24:	9302      	str	r3, [sp, #8]
   8aa26:	4641      	mov	r1, r8
   8aa28:	4620      	mov	r0, r4
   8aa2a:	f001 fb1d 	bl	8c068 <_Bfree>
   8aa2e:	2e00      	cmp	r6, #0
   8aa30:	f43f acdd 	beq.w	8a3ee <_dtoa_r+0x37e>
   8aa34:	e6a7      	b.n	8a786 <_dtoa_r+0x716>
   8aa36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8aa38:	4649      	mov	r1, r9
   8aa3a:	4620      	mov	r0, r4
   8aa3c:	f001 fc4c 	bl	8c2d8 <__pow5mult>
   8aa40:	4681      	mov	r9, r0
   8aa42:	e557      	b.n	8a4f4 <_dtoa_r+0x484>
   8aa44:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8aa46:	2a00      	cmp	r2, #0
   8aa48:	f000 8188 	beq.w	8ad5c <_dtoa_r+0xcec>
   8aa4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8aa50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8aa52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8aa54:	e4f2      	b.n	8a43c <_dtoa_r+0x3cc>
   8aa56:	f1ba 0f00 	cmp.w	sl, #0
   8aa5a:	f47f ad77 	bne.w	8a54c <_dtoa_r+0x4dc>
   8aa5e:	e7b4      	b.n	8a9ca <_dtoa_r+0x95a>
   8aa60:	f001 fb0c 	bl	8c07c <__multadd>
   8aa64:	4647      	mov	r7, r8
   8aa66:	4606      	mov	r6, r0
   8aa68:	4683      	mov	fp, r0
   8aa6a:	e5c0      	b.n	8a5ee <_dtoa_r+0x57e>
   8aa6c:	4601      	mov	r1, r0
   8aa6e:	4620      	mov	r0, r4
   8aa70:	9308      	str	r3, [sp, #32]
   8aa72:	f001 faf9 	bl	8c068 <_Bfree>
   8aa76:	2201      	movs	r2, #1
   8aa78:	9b08      	ldr	r3, [sp, #32]
   8aa7a:	e5e2      	b.n	8a642 <_dtoa_r+0x5d2>
   8aa7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8aa7e:	2b02      	cmp	r3, #2
   8aa80:	f77f ad98 	ble.w	8a5b4 <_dtoa_r+0x544>
   8aa84:	9b07      	ldr	r3, [sp, #28]
   8aa86:	2b00      	cmp	r3, #0
   8aa88:	d1c9      	bne.n	8aa1e <_dtoa_r+0x9ae>
   8aa8a:	4641      	mov	r1, r8
   8aa8c:	2205      	movs	r2, #5
   8aa8e:	4620      	mov	r0, r4
   8aa90:	f001 faf4 	bl	8c07c <__multadd>
   8aa94:	4601      	mov	r1, r0
   8aa96:	4680      	mov	r8, r0
   8aa98:	4648      	mov	r0, r9
   8aa9a:	f001 fcbd 	bl	8c418 <__mcmp>
   8aa9e:	2800      	cmp	r0, #0
   8aaa0:	ddbd      	ble.n	8aa1e <_dtoa_r+0x9ae>
   8aaa2:	2331      	movs	r3, #49	; 0x31
   8aaa4:	9a02      	ldr	r2, [sp, #8]
   8aaa6:	9904      	ldr	r1, [sp, #16]
   8aaa8:	3201      	adds	r2, #1
   8aaaa:	9202      	str	r2, [sp, #8]
   8aaac:	700b      	strb	r3, [r1, #0]
   8aaae:	1c4d      	adds	r5, r1, #1
   8aab0:	e7b9      	b.n	8aa26 <_dtoa_r+0x9b6>
   8aab2:	2331      	movs	r3, #49	; 0x31
   8aab4:	9a02      	ldr	r2, [sp, #8]
   8aab6:	3201      	adds	r2, #1
   8aab8:	9202      	str	r2, [sp, #8]
   8aaba:	9a04      	ldr	r2, [sp, #16]
   8aabc:	7013      	strb	r3, [r2, #0]
   8aabe:	e652      	b.n	8a766 <_dtoa_r+0x6f6>
   8aac0:	2301      	movs	r3, #1
   8aac2:	930b      	str	r3, [sp, #44]	; 0x2c
   8aac4:	e666      	b.n	8a794 <_dtoa_r+0x724>
   8aac6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8aaca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8aacc:	e48f      	b.n	8a3ee <_dtoa_r+0x37e>
   8aace:	bf00      	nop
   8aad0:	0008dbe0 	.word	0x0008dbe0
   8aad4:	0008dbb8 	.word	0x0008dbb8
   8aad8:	3ff00000 	.word	0x3ff00000
   8aadc:	401c0000 	.word	0x401c0000
   8aae0:	3fe00000 	.word	0x3fe00000
   8aae4:	40240000 	.word	0x40240000
   8aae8:	40140000 	.word	0x40140000
   8aaec:	4650      	mov	r0, sl
   8aaee:	f002 fb97 	bl	8d220 <__aeabi_i2d>
   8aaf2:	463a      	mov	r2, r7
   8aaf4:	4643      	mov	r3, r8
   8aaf6:	f002 fbf9 	bl	8d2ec <__aeabi_dmul>
   8aafa:	2200      	movs	r2, #0
   8aafc:	4bc1      	ldr	r3, [pc, #772]	; (8ae04 <_dtoa_r+0xd94>)
   8aafe:	f002 fa43 	bl	8cf88 <__adddf3>
   8ab02:	4605      	mov	r5, r0
   8ab04:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8ab08:	4641      	mov	r1, r8
   8ab0a:	2200      	movs	r2, #0
   8ab0c:	4bbe      	ldr	r3, [pc, #760]	; (8ae08 <_dtoa_r+0xd98>)
   8ab0e:	4638      	mov	r0, r7
   8ab10:	f002 fa38 	bl	8cf84 <__aeabi_dsub>
   8ab14:	462a      	mov	r2, r5
   8ab16:	4633      	mov	r3, r6
   8ab18:	4682      	mov	sl, r0
   8ab1a:	468b      	mov	fp, r1
   8ab1c:	f002 fe76 	bl	8d80c <__aeabi_dcmpgt>
   8ab20:	4680      	mov	r8, r0
   8ab22:	2800      	cmp	r0, #0
   8ab24:	f040 8110 	bne.w	8ad48 <_dtoa_r+0xcd8>
   8ab28:	462a      	mov	r2, r5
   8ab2a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8ab2e:	4650      	mov	r0, sl
   8ab30:	4659      	mov	r1, fp
   8ab32:	f002 fe4d 	bl	8d7d0 <__aeabi_dcmplt>
   8ab36:	b118      	cbz	r0, 8ab40 <_dtoa_r+0xad0>
   8ab38:	4646      	mov	r6, r8
   8ab3a:	e770      	b.n	8aa1e <_dtoa_r+0x9ae>
   8ab3c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8ab40:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8ab44:	f7ff bb8f 	b.w	8a266 <_dtoa_r+0x1f6>
   8ab48:	9804      	ldr	r0, [sp, #16]
   8ab4a:	f7ff bac0 	b.w	8a0ce <_dtoa_r+0x5e>
   8ab4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ab50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8ab52:	1afb      	subs	r3, r7, r3
   8ab54:	441a      	add	r2, r3
   8ab56:	970c      	str	r7, [sp, #48]	; 0x30
   8ab58:	920d      	str	r2, [sp, #52]	; 0x34
   8ab5a:	2700      	movs	r7, #0
   8ab5c:	e468      	b.n	8a430 <_dtoa_r+0x3c0>
   8ab5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8ab62:	f04f 0a02 	mov.w	sl, #2
   8ab66:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8ab6a:	e656      	b.n	8a81a <_dtoa_r+0x7aa>
   8ab6c:	2100      	movs	r1, #0
   8ab6e:	2301      	movs	r3, #1
   8ab70:	4620      	mov	r0, r4
   8ab72:	6461      	str	r1, [r4, #68]	; 0x44
   8ab74:	9325      	str	r3, [sp, #148]	; 0x94
   8ab76:	f001 fa51 	bl	8c01c <_Balloc>
   8ab7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ab7c:	9004      	str	r0, [sp, #16]
   8ab7e:	9307      	str	r3, [sp, #28]
   8ab80:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ab82:	6420      	str	r0, [r4, #64]	; 0x40
   8ab84:	930f      	str	r3, [sp, #60]	; 0x3c
   8ab86:	e627      	b.n	8a7d8 <_dtoa_r+0x768>
   8ab88:	2a00      	cmp	r2, #0
   8ab8a:	46d0      	mov	r8, sl
   8ab8c:	f8cd b020 	str.w	fp, [sp, #32]
   8ab90:	469a      	mov	sl, r3
   8ab92:	dd11      	ble.n	8abb8 <_dtoa_r+0xb48>
   8ab94:	4649      	mov	r1, r9
   8ab96:	2201      	movs	r2, #1
   8ab98:	4620      	mov	r0, r4
   8ab9a:	f001 fbed 	bl	8c378 <__lshift>
   8ab9e:	4641      	mov	r1, r8
   8aba0:	4681      	mov	r9, r0
   8aba2:	f001 fc39 	bl	8c418 <__mcmp>
   8aba6:	2800      	cmp	r0, #0
   8aba8:	f340 8145 	ble.w	8ae36 <_dtoa_r+0xdc6>
   8abac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   8abb0:	f000 8105 	beq.w	8adbe <_dtoa_r+0xd4e>
   8abb4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   8abb8:	46b3      	mov	fp, r6
   8abba:	f887 a000 	strb.w	sl, [r7]
   8abbe:	1c7d      	adds	r5, r7, #1
   8abc0:	9e08      	ldr	r6, [sp, #32]
   8abc2:	e5d0      	b.n	8a766 <_dtoa_r+0x6f6>
   8abc4:	d104      	bne.n	8abd0 <_dtoa_r+0xb60>
   8abc6:	f01a 0f01 	tst.w	sl, #1
   8abca:	d001      	beq.n	8abd0 <_dtoa_r+0xb60>
   8abcc:	e5bb      	b.n	8a746 <_dtoa_r+0x6d6>
   8abce:	4615      	mov	r5, r2
   8abd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8abd4:	1e6a      	subs	r2, r5, #1
   8abd6:	2b30      	cmp	r3, #48	; 0x30
   8abd8:	d0f9      	beq.n	8abce <_dtoa_r+0xb5e>
   8abda:	e5c4      	b.n	8a766 <_dtoa_r+0x6f6>
   8abdc:	2230      	movs	r2, #48	; 0x30
   8abde:	9904      	ldr	r1, [sp, #16]
   8abe0:	700a      	strb	r2, [r1, #0]
   8abe2:	9a02      	ldr	r2, [sp, #8]
   8abe4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8abe8:	3201      	adds	r2, #1
   8abea:	9202      	str	r2, [sp, #8]
   8abec:	f7ff bbfb 	b.w	8a3e6 <_dtoa_r+0x376>
   8abf0:	f000 80bb 	beq.w	8ad6a <_dtoa_r+0xcfa>
   8abf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8abf8:	9b02      	ldr	r3, [sp, #8]
   8abfa:	f04f 0a02 	mov.w	sl, #2
   8abfe:	425d      	negs	r5, r3
   8ac00:	4b82      	ldr	r3, [pc, #520]	; (8ae0c <_dtoa_r+0xd9c>)
   8ac02:	f005 020f 	and.w	r2, r5, #15
   8ac06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ac0e:	f002 fb6d 	bl	8d2ec <__aeabi_dmul>
   8ac12:	112d      	asrs	r5, r5, #4
   8ac14:	4607      	mov	r7, r0
   8ac16:	4688      	mov	r8, r1
   8ac18:	f43f ae1a 	beq.w	8a850 <_dtoa_r+0x7e0>
   8ac1c:	4e7c      	ldr	r6, [pc, #496]	; (8ae10 <_dtoa_r+0xda0>)
   8ac1e:	07eb      	lsls	r3, r5, #31
   8ac20:	d509      	bpl.n	8ac36 <_dtoa_r+0xbc6>
   8ac22:	e9d6 2300 	ldrd	r2, r3, [r6]
   8ac26:	4638      	mov	r0, r7
   8ac28:	4641      	mov	r1, r8
   8ac2a:	f002 fb5f 	bl	8d2ec <__aeabi_dmul>
   8ac2e:	4607      	mov	r7, r0
   8ac30:	4688      	mov	r8, r1
   8ac32:	f10a 0a01 	add.w	sl, sl, #1
   8ac36:	106d      	asrs	r5, r5, #1
   8ac38:	f106 0608 	add.w	r6, r6, #8
   8ac3c:	d1ef      	bne.n	8ac1e <_dtoa_r+0xbae>
   8ac3e:	e607      	b.n	8a850 <_dtoa_r+0x7e0>
   8ac40:	6871      	ldr	r1, [r6, #4]
   8ac42:	4620      	mov	r0, r4
   8ac44:	f001 f9ea 	bl	8c01c <_Balloc>
   8ac48:	4605      	mov	r5, r0
   8ac4a:	6933      	ldr	r3, [r6, #16]
   8ac4c:	f106 010c 	add.w	r1, r6, #12
   8ac50:	3302      	adds	r3, #2
   8ac52:	009a      	lsls	r2, r3, #2
   8ac54:	300c      	adds	r0, #12
   8ac56:	f7fc fe01 	bl	8785c <memcpy>
   8ac5a:	4629      	mov	r1, r5
   8ac5c:	2201      	movs	r2, #1
   8ac5e:	4620      	mov	r0, r4
   8ac60:	f001 fb8a 	bl	8c378 <__lshift>
   8ac64:	9008      	str	r0, [sp, #32]
   8ac66:	e4b6      	b.n	8a5d6 <_dtoa_r+0x566>
   8ac68:	2b39      	cmp	r3, #57	; 0x39
   8ac6a:	f8cd b020 	str.w	fp, [sp, #32]
   8ac6e:	46d0      	mov	r8, sl
   8ac70:	f000 80a5 	beq.w	8adbe <_dtoa_r+0xd4e>
   8ac74:	f103 0a01 	add.w	sl, r3, #1
   8ac78:	46b3      	mov	fp, r6
   8ac7a:	f887 a000 	strb.w	sl, [r7]
   8ac7e:	1c7d      	adds	r5, r7, #1
   8ac80:	9e08      	ldr	r6, [sp, #32]
   8ac82:	e570      	b.n	8a766 <_dtoa_r+0x6f6>
   8ac84:	465a      	mov	r2, fp
   8ac86:	46d0      	mov	r8, sl
   8ac88:	46b3      	mov	fp, r6
   8ac8a:	469a      	mov	sl, r3
   8ac8c:	4616      	mov	r6, r2
   8ac8e:	e54e      	b.n	8a72e <_dtoa_r+0x6be>
   8ac90:	9812      	ldr	r0, [sp, #72]	; 0x48
   8ac92:	495e      	ldr	r1, [pc, #376]	; (8ae0c <_dtoa_r+0xd9c>)
   8ac94:	462a      	mov	r2, r5
   8ac96:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8ac9a:	4633      	mov	r3, r6
   8ac9c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8aca0:	f002 fb24 	bl	8d2ec <__aeabi_dmul>
   8aca4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   8aca8:	4638      	mov	r0, r7
   8acaa:	4641      	mov	r1, r8
   8acac:	f002 fdce 	bl	8d84c <__aeabi_d2iz>
   8acb0:	4605      	mov	r5, r0
   8acb2:	f002 fab5 	bl	8d220 <__aeabi_i2d>
   8acb6:	4602      	mov	r2, r0
   8acb8:	460b      	mov	r3, r1
   8acba:	4638      	mov	r0, r7
   8acbc:	4641      	mov	r1, r8
   8acbe:	f002 f961 	bl	8cf84 <__aeabi_dsub>
   8acc2:	4606      	mov	r6, r0
   8acc4:	9812      	ldr	r0, [sp, #72]	; 0x48
   8acc6:	9a04      	ldr	r2, [sp, #16]
   8acc8:	3530      	adds	r5, #48	; 0x30
   8acca:	2801      	cmp	r0, #1
   8accc:	7015      	strb	r5, [r2, #0]
   8acce:	460f      	mov	r7, r1
   8acd0:	f102 0501 	add.w	r5, r2, #1
   8acd4:	d026      	beq.n	8ad24 <_dtoa_r+0xcb4>
   8acd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8acd8:	9a04      	ldr	r2, [sp, #16]
   8acda:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8acde:	4413      	add	r3, r2
   8ace0:	f04f 0a00 	mov.w	sl, #0
   8ace4:	4699      	mov	r9, r3
   8ace6:	f8df b130 	ldr.w	fp, [pc, #304]	; 8ae18 <_dtoa_r+0xda8>
   8acea:	4652      	mov	r2, sl
   8acec:	465b      	mov	r3, fp
   8acee:	4630      	mov	r0, r6
   8acf0:	4639      	mov	r1, r7
   8acf2:	f002 fafb 	bl	8d2ec <__aeabi_dmul>
   8acf6:	460f      	mov	r7, r1
   8acf8:	4606      	mov	r6, r0
   8acfa:	f002 fda7 	bl	8d84c <__aeabi_d2iz>
   8acfe:	4680      	mov	r8, r0
   8ad00:	f002 fa8e 	bl	8d220 <__aeabi_i2d>
   8ad04:	4602      	mov	r2, r0
   8ad06:	460b      	mov	r3, r1
   8ad08:	4630      	mov	r0, r6
   8ad0a:	4639      	mov	r1, r7
   8ad0c:	f002 f93a 	bl	8cf84 <__aeabi_dsub>
   8ad10:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8ad14:	f805 8b01 	strb.w	r8, [r5], #1
   8ad18:	454d      	cmp	r5, r9
   8ad1a:	4606      	mov	r6, r0
   8ad1c:	460f      	mov	r7, r1
   8ad1e:	d1e4      	bne.n	8acea <_dtoa_r+0xc7a>
   8ad20:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8ad24:	2200      	movs	r2, #0
   8ad26:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8ad2a:	4b3a      	ldr	r3, [pc, #232]	; (8ae14 <_dtoa_r+0xda4>)
   8ad2c:	f002 f92c 	bl	8cf88 <__adddf3>
   8ad30:	4632      	mov	r2, r6
   8ad32:	463b      	mov	r3, r7
   8ad34:	f002 fd4c 	bl	8d7d0 <__aeabi_dcmplt>
   8ad38:	2800      	cmp	r0, #0
   8ad3a:	d046      	beq.n	8adca <_dtoa_r+0xd5a>
   8ad3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8ad3e:	9302      	str	r3, [sp, #8]
   8ad40:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8ad44:	f7ff bb42 	b.w	8a3cc <_dtoa_r+0x35c>
   8ad48:	f04f 0800 	mov.w	r8, #0
   8ad4c:	4646      	mov	r6, r8
   8ad4e:	e6a8      	b.n	8aaa2 <_dtoa_r+0xa32>
   8ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ad52:	9a07      	ldr	r2, [sp, #28]
   8ad54:	1a9d      	subs	r5, r3, r2
   8ad56:	2300      	movs	r3, #0
   8ad58:	f7ff bb70 	b.w	8a43c <_dtoa_r+0x3cc>
   8ad5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8ad5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8ad60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8ad64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8ad66:	f7ff bb69 	b.w	8a43c <_dtoa_r+0x3cc>
   8ad6a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8ad6e:	f04f 0a02 	mov.w	sl, #2
   8ad72:	e56d      	b.n	8a850 <_dtoa_r+0x7e0>
   8ad74:	9b07      	ldr	r3, [sp, #28]
   8ad76:	2b00      	cmp	r3, #0
   8ad78:	f43f aeb8 	beq.w	8aaec <_dtoa_r+0xa7c>
   8ad7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8ad7e:	2b00      	cmp	r3, #0
   8ad80:	f77f aede 	ble.w	8ab40 <_dtoa_r+0xad0>
   8ad84:	2200      	movs	r2, #0
   8ad86:	4b24      	ldr	r3, [pc, #144]	; (8ae18 <_dtoa_r+0xda8>)
   8ad88:	4638      	mov	r0, r7
   8ad8a:	4641      	mov	r1, r8
   8ad8c:	f002 faae 	bl	8d2ec <__aeabi_dmul>
   8ad90:	4607      	mov	r7, r0
   8ad92:	4688      	mov	r8, r1
   8ad94:	f10a 0001 	add.w	r0, sl, #1
   8ad98:	f002 fa42 	bl	8d220 <__aeabi_i2d>
   8ad9c:	463a      	mov	r2, r7
   8ad9e:	4643      	mov	r3, r8
   8ada0:	f002 faa4 	bl	8d2ec <__aeabi_dmul>
   8ada4:	2200      	movs	r2, #0
   8ada6:	4b17      	ldr	r3, [pc, #92]	; (8ae04 <_dtoa_r+0xd94>)
   8ada8:	f002 f8ee 	bl	8cf88 <__adddf3>
   8adac:	9a02      	ldr	r2, [sp, #8]
   8adae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8adb0:	3a01      	subs	r2, #1
   8adb2:	4605      	mov	r5, r0
   8adb4:	9215      	str	r2, [sp, #84]	; 0x54
   8adb6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8adba:	9312      	str	r3, [sp, #72]	; 0x48
   8adbc:	e569      	b.n	8a892 <_dtoa_r+0x822>
   8adbe:	2239      	movs	r2, #57	; 0x39
   8adc0:	46b3      	mov	fp, r6
   8adc2:	703a      	strb	r2, [r7, #0]
   8adc4:	9e08      	ldr	r6, [sp, #32]
   8adc6:	1c7d      	adds	r5, r7, #1
   8adc8:	e4bf      	b.n	8a74a <_dtoa_r+0x6da>
   8adca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8adce:	2000      	movs	r0, #0
   8add0:	4910      	ldr	r1, [pc, #64]	; (8ae14 <_dtoa_r+0xda4>)
   8add2:	f002 f8d7 	bl	8cf84 <__aeabi_dsub>
   8add6:	4632      	mov	r2, r6
   8add8:	463b      	mov	r3, r7
   8adda:	f002 fd17 	bl	8d80c <__aeabi_dcmpgt>
   8adde:	b908      	cbnz	r0, 8ade4 <_dtoa_r+0xd74>
   8ade0:	e6ae      	b.n	8ab40 <_dtoa_r+0xad0>
   8ade2:	4615      	mov	r5, r2
   8ade4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8ade8:	1e6a      	subs	r2, r5, #1
   8adea:	2b30      	cmp	r3, #48	; 0x30
   8adec:	d0f9      	beq.n	8ade2 <_dtoa_r+0xd72>
   8adee:	e5d7      	b.n	8a9a0 <_dtoa_r+0x930>
   8adf0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8adf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8adf6:	9302      	str	r3, [sp, #8]
   8adf8:	f7ff bae8 	b.w	8a3cc <_dtoa_r+0x35c>
   8adfc:	970c      	str	r7, [sp, #48]	; 0x30
   8adfe:	f7ff bba7 	b.w	8a550 <_dtoa_r+0x4e0>
   8ae02:	bf00      	nop
   8ae04:	401c0000 	.word	0x401c0000
   8ae08:	40140000 	.word	0x40140000
   8ae0c:	0008dbe0 	.word	0x0008dbe0
   8ae10:	0008dbb8 	.word	0x0008dbb8
   8ae14:	3fe00000 	.word	0x3fe00000
   8ae18:	40240000 	.word	0x40240000
   8ae1c:	2b39      	cmp	r3, #57	; 0x39
   8ae1e:	f8cd b020 	str.w	fp, [sp, #32]
   8ae22:	46d0      	mov	r8, sl
   8ae24:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8ae28:	469a      	mov	sl, r3
   8ae2a:	d0c8      	beq.n	8adbe <_dtoa_r+0xd4e>
   8ae2c:	f1bb 0f00 	cmp.w	fp, #0
   8ae30:	f73f aec0 	bgt.w	8abb4 <_dtoa_r+0xb44>
   8ae34:	e6c0      	b.n	8abb8 <_dtoa_r+0xb48>
   8ae36:	f47f aebf 	bne.w	8abb8 <_dtoa_r+0xb48>
   8ae3a:	f01a 0f01 	tst.w	sl, #1
   8ae3e:	f43f aebb 	beq.w	8abb8 <_dtoa_r+0xb48>
   8ae42:	e6b3      	b.n	8abac <_dtoa_r+0xb3c>
   8ae44:	f04f 0800 	mov.w	r8, #0
   8ae48:	4646      	mov	r6, r8
   8ae4a:	e5e8      	b.n	8aa1e <_dtoa_r+0x9ae>
   8ae4c:	4631      	mov	r1, r6
   8ae4e:	2300      	movs	r3, #0
   8ae50:	220a      	movs	r2, #10
   8ae52:	4620      	mov	r0, r4
   8ae54:	f001 f912 	bl	8c07c <__multadd>
   8ae58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8ae5a:	4606      	mov	r6, r0
   8ae5c:	2b00      	cmp	r3, #0
   8ae5e:	dd07      	ble.n	8ae70 <_dtoa_r+0xe00>
   8ae60:	9307      	str	r3, [sp, #28]
   8ae62:	f7ff bbab 	b.w	8a5bc <_dtoa_r+0x54c>
   8ae66:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8ae68:	2b02      	cmp	r3, #2
   8ae6a:	dc1f      	bgt.n	8aeac <_dtoa_r+0xe3c>
   8ae6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8ae6e:	e43c      	b.n	8a6ea <_dtoa_r+0x67a>
   8ae70:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8ae72:	2b02      	cmp	r3, #2
   8ae74:	dc1a      	bgt.n	8aeac <_dtoa_r+0xe3c>
   8ae76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8ae78:	e7f2      	b.n	8ae60 <_dtoa_r+0xdf0>
   8ae7a:	f43f ab81 	beq.w	8a580 <_dtoa_r+0x510>
   8ae7e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8ae82:	e411      	b.n	8a6a8 <_dtoa_r+0x638>
   8ae84:	2500      	movs	r5, #0
   8ae86:	4620      	mov	r0, r4
   8ae88:	6465      	str	r5, [r4, #68]	; 0x44
   8ae8a:	4629      	mov	r1, r5
   8ae8c:	f001 f8c6 	bl	8c01c <_Balloc>
   8ae90:	f04f 33ff 	mov.w	r3, #4294967295
   8ae94:	9307      	str	r3, [sp, #28]
   8ae96:	930f      	str	r3, [sp, #60]	; 0x3c
   8ae98:	2301      	movs	r3, #1
   8ae9a:	9004      	str	r0, [sp, #16]
   8ae9c:	9525      	str	r5, [sp, #148]	; 0x94
   8ae9e:	6420      	str	r0, [r4, #64]	; 0x40
   8aea0:	930b      	str	r3, [sp, #44]	; 0x2c
   8aea2:	f7ff b9e0 	b.w	8a266 <_dtoa_r+0x1f6>
   8aea6:	2501      	movs	r5, #1
   8aea8:	f7ff b9a8 	b.w	8a1fc <_dtoa_r+0x18c>
   8aeac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8aeae:	9307      	str	r3, [sp, #28]
   8aeb0:	e5e8      	b.n	8aa84 <_dtoa_r+0xa14>
   8aeb2:	bf00      	nop

0008aeb4 <__sflush_r>:
   8aeb4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8aebc:	b29a      	uxth	r2, r3
   8aebe:	460d      	mov	r5, r1
   8aec0:	0711      	lsls	r1, r2, #28
   8aec2:	4680      	mov	r8, r0
   8aec4:	d43a      	bmi.n	8af3c <__sflush_r+0x88>
   8aec6:	686a      	ldr	r2, [r5, #4]
   8aec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8aecc:	2a00      	cmp	r2, #0
   8aece:	81ab      	strh	r3, [r5, #12]
   8aed0:	dd70      	ble.n	8afb4 <__sflush_r+0x100>
   8aed2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8aed4:	2c00      	cmp	r4, #0
   8aed6:	d04a      	beq.n	8af6e <__sflush_r+0xba>
   8aed8:	2200      	movs	r2, #0
   8aeda:	b29b      	uxth	r3, r3
   8aedc:	f8d8 6000 	ldr.w	r6, [r8]
   8aee0:	f8c8 2000 	str.w	r2, [r8]
   8aee4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   8aee8:	d068      	beq.n	8afbc <__sflush_r+0x108>
   8aeea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8aeec:	075f      	lsls	r7, r3, #29
   8aeee:	d505      	bpl.n	8aefc <__sflush_r+0x48>
   8aef0:	6869      	ldr	r1, [r5, #4]
   8aef2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8aef4:	1a52      	subs	r2, r2, r1
   8aef6:	b10b      	cbz	r3, 8aefc <__sflush_r+0x48>
   8aef8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8aefa:	1ad2      	subs	r2, r2, r3
   8aefc:	2300      	movs	r3, #0
   8aefe:	69e9      	ldr	r1, [r5, #28]
   8af00:	4640      	mov	r0, r8
   8af02:	47a0      	blx	r4
   8af04:	1c44      	adds	r4, r0, #1
   8af06:	d03d      	beq.n	8af84 <__sflush_r+0xd0>
   8af08:	2100      	movs	r1, #0
   8af0a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8af0e:	692a      	ldr	r2, [r5, #16]
   8af10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8af14:	81ab      	strh	r3, [r5, #12]
   8af16:	04db      	lsls	r3, r3, #19
   8af18:	6069      	str	r1, [r5, #4]
   8af1a:	602a      	str	r2, [r5, #0]
   8af1c:	d448      	bmi.n	8afb0 <__sflush_r+0xfc>
   8af1e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8af20:	f8c8 6000 	str.w	r6, [r8]
   8af24:	b319      	cbz	r1, 8af6e <__sflush_r+0xba>
   8af26:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8af2a:	4299      	cmp	r1, r3
   8af2c:	d002      	beq.n	8af34 <__sflush_r+0x80>
   8af2e:	4640      	mov	r0, r8
   8af30:	f000 f9da 	bl	8b2e8 <_free_r>
   8af34:	2000      	movs	r0, #0
   8af36:	6328      	str	r0, [r5, #48]	; 0x30
   8af38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8af3c:	692e      	ldr	r6, [r5, #16]
   8af3e:	b1b6      	cbz	r6, 8af6e <__sflush_r+0xba>
   8af40:	0791      	lsls	r1, r2, #30
   8af42:	bf18      	it	ne
   8af44:	2300      	movne	r3, #0
   8af46:	682c      	ldr	r4, [r5, #0]
   8af48:	bf08      	it	eq
   8af4a:	696b      	ldreq	r3, [r5, #20]
   8af4c:	602e      	str	r6, [r5, #0]
   8af4e:	1ba4      	subs	r4, r4, r6
   8af50:	60ab      	str	r3, [r5, #8]
   8af52:	e00a      	b.n	8af6a <__sflush_r+0xb6>
   8af54:	4623      	mov	r3, r4
   8af56:	4632      	mov	r2, r6
   8af58:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8af5a:	69e9      	ldr	r1, [r5, #28]
   8af5c:	4640      	mov	r0, r8
   8af5e:	47b8      	blx	r7
   8af60:	2800      	cmp	r0, #0
   8af62:	eba4 0400 	sub.w	r4, r4, r0
   8af66:	4406      	add	r6, r0
   8af68:	dd04      	ble.n	8af74 <__sflush_r+0xc0>
   8af6a:	2c00      	cmp	r4, #0
   8af6c:	dcf2      	bgt.n	8af54 <__sflush_r+0xa0>
   8af6e:	2000      	movs	r0, #0
   8af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8af74:	89ab      	ldrh	r3, [r5, #12]
   8af76:	f04f 30ff 	mov.w	r0, #4294967295
   8af7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8af7e:	81ab      	strh	r3, [r5, #12]
   8af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8af84:	f8d8 4000 	ldr.w	r4, [r8]
   8af88:	2c1d      	cmp	r4, #29
   8af8a:	d8f3      	bhi.n	8af74 <__sflush_r+0xc0>
   8af8c:	4b16      	ldr	r3, [pc, #88]	; (8afe8 <__sflush_r+0x134>)
   8af8e:	40e3      	lsrs	r3, r4
   8af90:	43db      	mvns	r3, r3
   8af92:	f013 0301 	ands.w	r3, r3, #1
   8af96:	d1ed      	bne.n	8af74 <__sflush_r+0xc0>
   8af98:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8af9c:	6929      	ldr	r1, [r5, #16]
   8af9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8afa2:	81aa      	strh	r2, [r5, #12]
   8afa4:	04d2      	lsls	r2, r2, #19
   8afa6:	606b      	str	r3, [r5, #4]
   8afa8:	6029      	str	r1, [r5, #0]
   8afaa:	d5b8      	bpl.n	8af1e <__sflush_r+0x6a>
   8afac:	2c00      	cmp	r4, #0
   8afae:	d1b6      	bne.n	8af1e <__sflush_r+0x6a>
   8afb0:	6528      	str	r0, [r5, #80]	; 0x50
   8afb2:	e7b4      	b.n	8af1e <__sflush_r+0x6a>
   8afb4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8afb6:	2a00      	cmp	r2, #0
   8afb8:	dc8b      	bgt.n	8aed2 <__sflush_r+0x1e>
   8afba:	e7d8      	b.n	8af6e <__sflush_r+0xba>
   8afbc:	2301      	movs	r3, #1
   8afbe:	69e9      	ldr	r1, [r5, #28]
   8afc0:	4640      	mov	r0, r8
   8afc2:	47a0      	blx	r4
   8afc4:	1c43      	adds	r3, r0, #1
   8afc6:	4602      	mov	r2, r0
   8afc8:	d002      	beq.n	8afd0 <__sflush_r+0x11c>
   8afca:	89ab      	ldrh	r3, [r5, #12]
   8afcc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8afce:	e78d      	b.n	8aeec <__sflush_r+0x38>
   8afd0:	f8d8 3000 	ldr.w	r3, [r8]
   8afd4:	2b00      	cmp	r3, #0
   8afd6:	d0f8      	beq.n	8afca <__sflush_r+0x116>
   8afd8:	2b1d      	cmp	r3, #29
   8afda:	d001      	beq.n	8afe0 <__sflush_r+0x12c>
   8afdc:	2b16      	cmp	r3, #22
   8afde:	d1c9      	bne.n	8af74 <__sflush_r+0xc0>
   8afe0:	f8c8 6000 	str.w	r6, [r8]
   8afe4:	e7c3      	b.n	8af6e <__sflush_r+0xba>
   8afe6:	bf00      	nop
   8afe8:	20400001 	.word	0x20400001

0008afec <_fflush_r>:
   8afec:	b538      	push	{r3, r4, r5, lr}
   8afee:	460d      	mov	r5, r1
   8aff0:	4604      	mov	r4, r0
   8aff2:	b108      	cbz	r0, 8aff8 <_fflush_r+0xc>
   8aff4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8aff6:	b1bb      	cbz	r3, 8b028 <_fflush_r+0x3c>
   8aff8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8affc:	b188      	cbz	r0, 8b022 <_fflush_r+0x36>
   8affe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8b000:	07db      	lsls	r3, r3, #31
   8b002:	d401      	bmi.n	8b008 <_fflush_r+0x1c>
   8b004:	0581      	lsls	r1, r0, #22
   8b006:	d517      	bpl.n	8b038 <_fflush_r+0x4c>
   8b008:	4620      	mov	r0, r4
   8b00a:	4629      	mov	r1, r5
   8b00c:	f7ff ff52 	bl	8aeb4 <__sflush_r>
   8b010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8b012:	4604      	mov	r4, r0
   8b014:	07da      	lsls	r2, r3, #31
   8b016:	d402      	bmi.n	8b01e <_fflush_r+0x32>
   8b018:	89ab      	ldrh	r3, [r5, #12]
   8b01a:	059b      	lsls	r3, r3, #22
   8b01c:	d507      	bpl.n	8b02e <_fflush_r+0x42>
   8b01e:	4620      	mov	r0, r4
   8b020:	bd38      	pop	{r3, r4, r5, pc}
   8b022:	4604      	mov	r4, r0
   8b024:	4620      	mov	r0, r4
   8b026:	bd38      	pop	{r3, r4, r5, pc}
   8b028:	f000 f838 	bl	8b09c <__sinit>
   8b02c:	e7e4      	b.n	8aff8 <_fflush_r+0xc>
   8b02e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8b030:	f000 fc04 	bl	8b83c <__retarget_lock_release_recursive>
   8b034:	4620      	mov	r0, r4
   8b036:	bd38      	pop	{r3, r4, r5, pc}
   8b038:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8b03a:	f000 fbfd 	bl	8b838 <__retarget_lock_acquire_recursive>
   8b03e:	e7e3      	b.n	8b008 <_fflush_r+0x1c>

0008b040 <_cleanup_r>:
   8b040:	4901      	ldr	r1, [pc, #4]	; (8b048 <_cleanup_r+0x8>)
   8b042:	f000 bbb1 	b.w	8b7a8 <_fwalk_reent>
   8b046:	bf00      	nop
   8b048:	0008ce15 	.word	0x0008ce15

0008b04c <std.isra.0>:
   8b04c:	2300      	movs	r3, #0
   8b04e:	b510      	push	{r4, lr}
   8b050:	4604      	mov	r4, r0
   8b052:	8181      	strh	r1, [r0, #12]
   8b054:	81c2      	strh	r2, [r0, #14]
   8b056:	6003      	str	r3, [r0, #0]
   8b058:	6043      	str	r3, [r0, #4]
   8b05a:	6083      	str	r3, [r0, #8]
   8b05c:	6643      	str	r3, [r0, #100]	; 0x64
   8b05e:	6103      	str	r3, [r0, #16]
   8b060:	6143      	str	r3, [r0, #20]
   8b062:	6183      	str	r3, [r0, #24]
   8b064:	4619      	mov	r1, r3
   8b066:	2208      	movs	r2, #8
   8b068:	305c      	adds	r0, #92	; 0x5c
   8b06a:	f7fc fc6d 	bl	87948 <memset>
   8b06e:	4807      	ldr	r0, [pc, #28]	; (8b08c <std.isra.0+0x40>)
   8b070:	4907      	ldr	r1, [pc, #28]	; (8b090 <std.isra.0+0x44>)
   8b072:	4a08      	ldr	r2, [pc, #32]	; (8b094 <std.isra.0+0x48>)
   8b074:	4b08      	ldr	r3, [pc, #32]	; (8b098 <std.isra.0+0x4c>)
   8b076:	6220      	str	r0, [r4, #32]
   8b078:	61e4      	str	r4, [r4, #28]
   8b07a:	6261      	str	r1, [r4, #36]	; 0x24
   8b07c:	62a2      	str	r2, [r4, #40]	; 0x28
   8b07e:	62e3      	str	r3, [r4, #44]	; 0x2c
   8b080:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8b084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b088:	f000 bbd2 	b.w	8b830 <__retarget_lock_init_recursive>
   8b08c:	0008c9a5 	.word	0x0008c9a5
   8b090:	0008c9c9 	.word	0x0008c9c9
   8b094:	0008ca05 	.word	0x0008ca05
   8b098:	0008ca25 	.word	0x0008ca25

0008b09c <__sinit>:
   8b09c:	b510      	push	{r4, lr}
   8b09e:	4604      	mov	r4, r0
   8b0a0:	4814      	ldr	r0, [pc, #80]	; (8b0f4 <__sinit+0x58>)
   8b0a2:	f000 fbc9 	bl	8b838 <__retarget_lock_acquire_recursive>
   8b0a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8b0a8:	b9fa      	cbnz	r2, 8b0ea <__sinit+0x4e>
   8b0aa:	2003      	movs	r0, #3
   8b0ac:	4912      	ldr	r1, [pc, #72]	; (8b0f8 <__sinit+0x5c>)
   8b0ae:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8b0b2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8b0b6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8b0ba:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8b0be:	63e1      	str	r1, [r4, #60]	; 0x3c
   8b0c0:	6860      	ldr	r0, [r4, #4]
   8b0c2:	2104      	movs	r1, #4
   8b0c4:	f7ff ffc2 	bl	8b04c <std.isra.0>
   8b0c8:	68a0      	ldr	r0, [r4, #8]
   8b0ca:	2201      	movs	r2, #1
   8b0cc:	2109      	movs	r1, #9
   8b0ce:	f7ff ffbd 	bl	8b04c <std.isra.0>
   8b0d2:	68e0      	ldr	r0, [r4, #12]
   8b0d4:	2202      	movs	r2, #2
   8b0d6:	2112      	movs	r1, #18
   8b0d8:	f7ff ffb8 	bl	8b04c <std.isra.0>
   8b0dc:	2301      	movs	r3, #1
   8b0de:	4805      	ldr	r0, [pc, #20]	; (8b0f4 <__sinit+0x58>)
   8b0e0:	63a3      	str	r3, [r4, #56]	; 0x38
   8b0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b0e6:	f000 bba9 	b.w	8b83c <__retarget_lock_release_recursive>
   8b0ea:	4802      	ldr	r0, [pc, #8]	; (8b0f4 <__sinit+0x58>)
   8b0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b0f0:	f000 bba4 	b.w	8b83c <__retarget_lock_release_recursive>
   8b0f4:	20002e10 	.word	0x20002e10
   8b0f8:	0008b041 	.word	0x0008b041

0008b0fc <__sfp_lock_acquire>:
   8b0fc:	4801      	ldr	r0, [pc, #4]	; (8b104 <__sfp_lock_acquire+0x8>)
   8b0fe:	f000 bb9b 	b.w	8b838 <__retarget_lock_acquire_recursive>
   8b102:	bf00      	nop
   8b104:	20002e24 	.word	0x20002e24

0008b108 <__sfp_lock_release>:
   8b108:	4801      	ldr	r0, [pc, #4]	; (8b110 <__sfp_lock_release+0x8>)
   8b10a:	f000 bb97 	b.w	8b83c <__retarget_lock_release_recursive>
   8b10e:	bf00      	nop
   8b110:	20002e24 	.word	0x20002e24

0008b114 <__libc_fini_array>:
   8b114:	b538      	push	{r3, r4, r5, lr}
   8b116:	4c0a      	ldr	r4, [pc, #40]	; (8b140 <__libc_fini_array+0x2c>)
   8b118:	4d0a      	ldr	r5, [pc, #40]	; (8b144 <__libc_fini_array+0x30>)
   8b11a:	1b64      	subs	r4, r4, r5
   8b11c:	10a4      	asrs	r4, r4, #2
   8b11e:	d00a      	beq.n	8b136 <__libc_fini_array+0x22>
   8b120:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8b124:	3b01      	subs	r3, #1
   8b126:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8b12a:	3c01      	subs	r4, #1
   8b12c:	f855 3904 	ldr.w	r3, [r5], #-4
   8b130:	4798      	blx	r3
   8b132:	2c00      	cmp	r4, #0
   8b134:	d1f9      	bne.n	8b12a <__libc_fini_array+0x16>
   8b136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b13a:	f002 be47 	b.w	8ddcc <_fini>
   8b13e:	bf00      	nop
   8b140:	0008dddc 	.word	0x0008dddc
   8b144:	0008ddd8 	.word	0x0008ddd8

0008b148 <__fputwc>:
   8b148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b14c:	b083      	sub	sp, #12
   8b14e:	4607      	mov	r7, r0
   8b150:	4688      	mov	r8, r1
   8b152:	4614      	mov	r4, r2
   8b154:	f000 fb50 	bl	8b7f8 <__locale_mb_cur_max>
   8b158:	2801      	cmp	r0, #1
   8b15a:	d033      	beq.n	8b1c4 <__fputwc+0x7c>
   8b15c:	4642      	mov	r2, r8
   8b15e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b162:	a901      	add	r1, sp, #4
   8b164:	4638      	mov	r0, r7
   8b166:	f001 fd65 	bl	8cc34 <_wcrtomb_r>
   8b16a:	1c42      	adds	r2, r0, #1
   8b16c:	4606      	mov	r6, r0
   8b16e:	d022      	beq.n	8b1b6 <__fputwc+0x6e>
   8b170:	b390      	cbz	r0, 8b1d8 <__fputwc+0x90>
   8b172:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b176:	2500      	movs	r5, #0
   8b178:	f10d 0904 	add.w	r9, sp, #4
   8b17c:	e008      	b.n	8b190 <__fputwc+0x48>
   8b17e:	6823      	ldr	r3, [r4, #0]
   8b180:	1c5a      	adds	r2, r3, #1
   8b182:	6022      	str	r2, [r4, #0]
   8b184:	7019      	strb	r1, [r3, #0]
   8b186:	3501      	adds	r5, #1
   8b188:	42b5      	cmp	r5, r6
   8b18a:	d225      	bcs.n	8b1d8 <__fputwc+0x90>
   8b18c:	f815 1009 	ldrb.w	r1, [r5, r9]
   8b190:	68a3      	ldr	r3, [r4, #8]
   8b192:	3b01      	subs	r3, #1
   8b194:	2b00      	cmp	r3, #0
   8b196:	60a3      	str	r3, [r4, #8]
   8b198:	daf1      	bge.n	8b17e <__fputwc+0x36>
   8b19a:	69a2      	ldr	r2, [r4, #24]
   8b19c:	4293      	cmp	r3, r2
   8b19e:	db01      	blt.n	8b1a4 <__fputwc+0x5c>
   8b1a0:	290a      	cmp	r1, #10
   8b1a2:	d1ec      	bne.n	8b17e <__fputwc+0x36>
   8b1a4:	4622      	mov	r2, r4
   8b1a6:	4638      	mov	r0, r7
   8b1a8:	f001 fcec 	bl	8cb84 <__swbuf_r>
   8b1ac:	1c43      	adds	r3, r0, #1
   8b1ae:	d1ea      	bne.n	8b186 <__fputwc+0x3e>
   8b1b0:	b003      	add	sp, #12
   8b1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b1b6:	89a3      	ldrh	r3, [r4, #12]
   8b1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b1bc:	81a3      	strh	r3, [r4, #12]
   8b1be:	b003      	add	sp, #12
   8b1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b1c4:	f108 33ff 	add.w	r3, r8, #4294967295
   8b1c8:	2bfe      	cmp	r3, #254	; 0xfe
   8b1ca:	d8c7      	bhi.n	8b15c <__fputwc+0x14>
   8b1cc:	fa5f f188 	uxtb.w	r1, r8
   8b1d0:	4606      	mov	r6, r0
   8b1d2:	f88d 1004 	strb.w	r1, [sp, #4]
   8b1d6:	e7ce      	b.n	8b176 <__fputwc+0x2e>
   8b1d8:	4640      	mov	r0, r8
   8b1da:	b003      	add	sp, #12
   8b1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b1e0 <_fputwc_r>:
   8b1e0:	b530      	push	{r4, r5, lr}
   8b1e2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b1e4:	4614      	mov	r4, r2
   8b1e6:	f013 0f01 	tst.w	r3, #1
   8b1ea:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b1ee:	b083      	sub	sp, #12
   8b1f0:	4605      	mov	r5, r0
   8b1f2:	b29a      	uxth	r2, r3
   8b1f4:	d101      	bne.n	8b1fa <_fputwc_r+0x1a>
   8b1f6:	0590      	lsls	r0, r2, #22
   8b1f8:	d51c      	bpl.n	8b234 <_fputwc_r+0x54>
   8b1fa:	0490      	lsls	r0, r2, #18
   8b1fc:	d406      	bmi.n	8b20c <_fputwc_r+0x2c>
   8b1fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b208:	81a3      	strh	r3, [r4, #12]
   8b20a:	6662      	str	r2, [r4, #100]	; 0x64
   8b20c:	4628      	mov	r0, r5
   8b20e:	4622      	mov	r2, r4
   8b210:	f7ff ff9a 	bl	8b148 <__fputwc>
   8b214:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b216:	4605      	mov	r5, r0
   8b218:	07da      	lsls	r2, r3, #31
   8b21a:	d402      	bmi.n	8b222 <_fputwc_r+0x42>
   8b21c:	89a3      	ldrh	r3, [r4, #12]
   8b21e:	059b      	lsls	r3, r3, #22
   8b220:	d502      	bpl.n	8b228 <_fputwc_r+0x48>
   8b222:	4628      	mov	r0, r5
   8b224:	b003      	add	sp, #12
   8b226:	bd30      	pop	{r4, r5, pc}
   8b228:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b22a:	f000 fb07 	bl	8b83c <__retarget_lock_release_recursive>
   8b22e:	4628      	mov	r0, r5
   8b230:	b003      	add	sp, #12
   8b232:	bd30      	pop	{r4, r5, pc}
   8b234:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b236:	9101      	str	r1, [sp, #4]
   8b238:	f000 fafe 	bl	8b838 <__retarget_lock_acquire_recursive>
   8b23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b240:	9901      	ldr	r1, [sp, #4]
   8b242:	b29a      	uxth	r2, r3
   8b244:	e7d9      	b.n	8b1fa <_fputwc_r+0x1a>
   8b246:	bf00      	nop

0008b248 <_malloc_trim_r>:
   8b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b24a:	460c      	mov	r4, r1
   8b24c:	4f23      	ldr	r7, [pc, #140]	; (8b2dc <_malloc_trim_r+0x94>)
   8b24e:	4606      	mov	r6, r0
   8b250:	f000 fed8 	bl	8c004 <__malloc_lock>
   8b254:	68bb      	ldr	r3, [r7, #8]
   8b256:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8b25a:	685d      	ldr	r5, [r3, #4]
   8b25c:	310f      	adds	r1, #15
   8b25e:	f025 0503 	bic.w	r5, r5, #3
   8b262:	4429      	add	r1, r5
   8b264:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8b268:	f021 010f 	bic.w	r1, r1, #15
   8b26c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8b270:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8b274:	db07      	blt.n	8b286 <_malloc_trim_r+0x3e>
   8b276:	2100      	movs	r1, #0
   8b278:	4630      	mov	r0, r6
   8b27a:	f001 fb81 	bl	8c980 <_sbrk_r>
   8b27e:	68bb      	ldr	r3, [r7, #8]
   8b280:	442b      	add	r3, r5
   8b282:	4298      	cmp	r0, r3
   8b284:	d004      	beq.n	8b290 <_malloc_trim_r+0x48>
   8b286:	4630      	mov	r0, r6
   8b288:	f000 fec2 	bl	8c010 <__malloc_unlock>
   8b28c:	2000      	movs	r0, #0
   8b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b290:	4261      	negs	r1, r4
   8b292:	4630      	mov	r0, r6
   8b294:	f001 fb74 	bl	8c980 <_sbrk_r>
   8b298:	3001      	adds	r0, #1
   8b29a:	d00d      	beq.n	8b2b8 <_malloc_trim_r+0x70>
   8b29c:	4b10      	ldr	r3, [pc, #64]	; (8b2e0 <_malloc_trim_r+0x98>)
   8b29e:	68ba      	ldr	r2, [r7, #8]
   8b2a0:	6819      	ldr	r1, [r3, #0]
   8b2a2:	1b2d      	subs	r5, r5, r4
   8b2a4:	f045 0501 	orr.w	r5, r5, #1
   8b2a8:	4630      	mov	r0, r6
   8b2aa:	1b09      	subs	r1, r1, r4
   8b2ac:	6055      	str	r5, [r2, #4]
   8b2ae:	6019      	str	r1, [r3, #0]
   8b2b0:	f000 feae 	bl	8c010 <__malloc_unlock>
   8b2b4:	2001      	movs	r0, #1
   8b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b2b8:	2100      	movs	r1, #0
   8b2ba:	4630      	mov	r0, r6
   8b2bc:	f001 fb60 	bl	8c980 <_sbrk_r>
   8b2c0:	68ba      	ldr	r2, [r7, #8]
   8b2c2:	1a83      	subs	r3, r0, r2
   8b2c4:	2b0f      	cmp	r3, #15
   8b2c6:	ddde      	ble.n	8b286 <_malloc_trim_r+0x3e>
   8b2c8:	4c06      	ldr	r4, [pc, #24]	; (8b2e4 <_malloc_trim_r+0x9c>)
   8b2ca:	4905      	ldr	r1, [pc, #20]	; (8b2e0 <_malloc_trim_r+0x98>)
   8b2cc:	6824      	ldr	r4, [r4, #0]
   8b2ce:	f043 0301 	orr.w	r3, r3, #1
   8b2d2:	1b00      	subs	r0, r0, r4
   8b2d4:	6053      	str	r3, [r2, #4]
   8b2d6:	6008      	str	r0, [r1, #0]
   8b2d8:	e7d5      	b.n	8b286 <_malloc_trim_r+0x3e>
   8b2da:	bf00      	nop
   8b2dc:	20000cb0 	.word	0x20000cb0
   8b2e0:	200023b4 	.word	0x200023b4
   8b2e4:	200010b8 	.word	0x200010b8

0008b2e8 <_free_r>:
   8b2e8:	2900      	cmp	r1, #0
   8b2ea:	d044      	beq.n	8b376 <_free_r+0x8e>
   8b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b2f0:	460d      	mov	r5, r1
   8b2f2:	4680      	mov	r8, r0
   8b2f4:	f000 fe86 	bl	8c004 <__malloc_lock>
   8b2f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8b2fc:	4969      	ldr	r1, [pc, #420]	; (8b4a4 <_free_r+0x1bc>)
   8b2fe:	f1a5 0408 	sub.w	r4, r5, #8
   8b302:	f027 0301 	bic.w	r3, r7, #1
   8b306:	18e2      	adds	r2, r4, r3
   8b308:	688e      	ldr	r6, [r1, #8]
   8b30a:	6850      	ldr	r0, [r2, #4]
   8b30c:	42b2      	cmp	r2, r6
   8b30e:	f020 0003 	bic.w	r0, r0, #3
   8b312:	d05e      	beq.n	8b3d2 <_free_r+0xea>
   8b314:	07fe      	lsls	r6, r7, #31
   8b316:	6050      	str	r0, [r2, #4]
   8b318:	d40b      	bmi.n	8b332 <_free_r+0x4a>
   8b31a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8b31e:	f101 0e08 	add.w	lr, r1, #8
   8b322:	1be4      	subs	r4, r4, r7
   8b324:	68a5      	ldr	r5, [r4, #8]
   8b326:	443b      	add	r3, r7
   8b328:	4575      	cmp	r5, lr
   8b32a:	d06d      	beq.n	8b408 <_free_r+0x120>
   8b32c:	68e7      	ldr	r7, [r4, #12]
   8b32e:	60ef      	str	r7, [r5, #12]
   8b330:	60bd      	str	r5, [r7, #8]
   8b332:	1815      	adds	r5, r2, r0
   8b334:	686d      	ldr	r5, [r5, #4]
   8b336:	07ed      	lsls	r5, r5, #31
   8b338:	d53e      	bpl.n	8b3b8 <_free_r+0xd0>
   8b33a:	f043 0201 	orr.w	r2, r3, #1
   8b33e:	6062      	str	r2, [r4, #4]
   8b340:	50e3      	str	r3, [r4, r3]
   8b342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8b346:	d217      	bcs.n	8b378 <_free_r+0x90>
   8b348:	2201      	movs	r2, #1
   8b34a:	08db      	lsrs	r3, r3, #3
   8b34c:	1098      	asrs	r0, r3, #2
   8b34e:	684d      	ldr	r5, [r1, #4]
   8b350:	4413      	add	r3, r2
   8b352:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8b356:	4082      	lsls	r2, r0
   8b358:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8b35c:	432a      	orrs	r2, r5
   8b35e:	3808      	subs	r0, #8
   8b360:	60e0      	str	r0, [r4, #12]
   8b362:	60a7      	str	r7, [r4, #8]
   8b364:	604a      	str	r2, [r1, #4]
   8b366:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8b36a:	60fc      	str	r4, [r7, #12]
   8b36c:	4640      	mov	r0, r8
   8b36e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8b372:	f000 be4d 	b.w	8c010 <__malloc_unlock>
   8b376:	4770      	bx	lr
   8b378:	0a5a      	lsrs	r2, r3, #9
   8b37a:	2a04      	cmp	r2, #4
   8b37c:	d852      	bhi.n	8b424 <_free_r+0x13c>
   8b37e:	099a      	lsrs	r2, r3, #6
   8b380:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8b384:	00ff      	lsls	r7, r7, #3
   8b386:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8b38a:	19c8      	adds	r0, r1, r7
   8b38c:	59ca      	ldr	r2, [r1, r7]
   8b38e:	3808      	subs	r0, #8
   8b390:	4290      	cmp	r0, r2
   8b392:	d04f      	beq.n	8b434 <_free_r+0x14c>
   8b394:	6851      	ldr	r1, [r2, #4]
   8b396:	f021 0103 	bic.w	r1, r1, #3
   8b39a:	428b      	cmp	r3, r1
   8b39c:	d232      	bcs.n	8b404 <_free_r+0x11c>
   8b39e:	6892      	ldr	r2, [r2, #8]
   8b3a0:	4290      	cmp	r0, r2
   8b3a2:	d1f7      	bne.n	8b394 <_free_r+0xac>
   8b3a4:	68c3      	ldr	r3, [r0, #12]
   8b3a6:	60a0      	str	r0, [r4, #8]
   8b3a8:	60e3      	str	r3, [r4, #12]
   8b3aa:	609c      	str	r4, [r3, #8]
   8b3ac:	60c4      	str	r4, [r0, #12]
   8b3ae:	4640      	mov	r0, r8
   8b3b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8b3b4:	f000 be2c 	b.w	8c010 <__malloc_unlock>
   8b3b8:	6895      	ldr	r5, [r2, #8]
   8b3ba:	4f3b      	ldr	r7, [pc, #236]	; (8b4a8 <_free_r+0x1c0>)
   8b3bc:	4403      	add	r3, r0
   8b3be:	42bd      	cmp	r5, r7
   8b3c0:	d040      	beq.n	8b444 <_free_r+0x15c>
   8b3c2:	68d0      	ldr	r0, [r2, #12]
   8b3c4:	f043 0201 	orr.w	r2, r3, #1
   8b3c8:	60e8      	str	r0, [r5, #12]
   8b3ca:	6085      	str	r5, [r0, #8]
   8b3cc:	6062      	str	r2, [r4, #4]
   8b3ce:	50e3      	str	r3, [r4, r3]
   8b3d0:	e7b7      	b.n	8b342 <_free_r+0x5a>
   8b3d2:	07ff      	lsls	r7, r7, #31
   8b3d4:	4403      	add	r3, r0
   8b3d6:	d407      	bmi.n	8b3e8 <_free_r+0x100>
   8b3d8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8b3dc:	1b64      	subs	r4, r4, r5
   8b3de:	68e2      	ldr	r2, [r4, #12]
   8b3e0:	68a0      	ldr	r0, [r4, #8]
   8b3e2:	442b      	add	r3, r5
   8b3e4:	60c2      	str	r2, [r0, #12]
   8b3e6:	6090      	str	r0, [r2, #8]
   8b3e8:	4a30      	ldr	r2, [pc, #192]	; (8b4ac <_free_r+0x1c4>)
   8b3ea:	f043 0001 	orr.w	r0, r3, #1
   8b3ee:	6812      	ldr	r2, [r2, #0]
   8b3f0:	6060      	str	r0, [r4, #4]
   8b3f2:	4293      	cmp	r3, r2
   8b3f4:	608c      	str	r4, [r1, #8]
   8b3f6:	d3b9      	bcc.n	8b36c <_free_r+0x84>
   8b3f8:	4b2d      	ldr	r3, [pc, #180]	; (8b4b0 <_free_r+0x1c8>)
   8b3fa:	4640      	mov	r0, r8
   8b3fc:	6819      	ldr	r1, [r3, #0]
   8b3fe:	f7ff ff23 	bl	8b248 <_malloc_trim_r>
   8b402:	e7b3      	b.n	8b36c <_free_r+0x84>
   8b404:	4610      	mov	r0, r2
   8b406:	e7cd      	b.n	8b3a4 <_free_r+0xbc>
   8b408:	1811      	adds	r1, r2, r0
   8b40a:	6849      	ldr	r1, [r1, #4]
   8b40c:	07c9      	lsls	r1, r1, #31
   8b40e:	d444      	bmi.n	8b49a <_free_r+0x1b2>
   8b410:	6891      	ldr	r1, [r2, #8]
   8b412:	4403      	add	r3, r0
   8b414:	68d2      	ldr	r2, [r2, #12]
   8b416:	f043 0001 	orr.w	r0, r3, #1
   8b41a:	60ca      	str	r2, [r1, #12]
   8b41c:	6091      	str	r1, [r2, #8]
   8b41e:	6060      	str	r0, [r4, #4]
   8b420:	50e3      	str	r3, [r4, r3]
   8b422:	e7a3      	b.n	8b36c <_free_r+0x84>
   8b424:	2a14      	cmp	r2, #20
   8b426:	d816      	bhi.n	8b456 <_free_r+0x16e>
   8b428:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8b42c:	00ff      	lsls	r7, r7, #3
   8b42e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8b432:	e7aa      	b.n	8b38a <_free_r+0xa2>
   8b434:	2301      	movs	r3, #1
   8b436:	10aa      	asrs	r2, r5, #2
   8b438:	684d      	ldr	r5, [r1, #4]
   8b43a:	4093      	lsls	r3, r2
   8b43c:	432b      	orrs	r3, r5
   8b43e:	604b      	str	r3, [r1, #4]
   8b440:	4603      	mov	r3, r0
   8b442:	e7b0      	b.n	8b3a6 <_free_r+0xbe>
   8b444:	f043 0201 	orr.w	r2, r3, #1
   8b448:	614c      	str	r4, [r1, #20]
   8b44a:	610c      	str	r4, [r1, #16]
   8b44c:	60e5      	str	r5, [r4, #12]
   8b44e:	60a5      	str	r5, [r4, #8]
   8b450:	6062      	str	r2, [r4, #4]
   8b452:	50e3      	str	r3, [r4, r3]
   8b454:	e78a      	b.n	8b36c <_free_r+0x84>
   8b456:	2a54      	cmp	r2, #84	; 0x54
   8b458:	d806      	bhi.n	8b468 <_free_r+0x180>
   8b45a:	0b1a      	lsrs	r2, r3, #12
   8b45c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8b460:	00ff      	lsls	r7, r7, #3
   8b462:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8b466:	e790      	b.n	8b38a <_free_r+0xa2>
   8b468:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8b46c:	d806      	bhi.n	8b47c <_free_r+0x194>
   8b46e:	0bda      	lsrs	r2, r3, #15
   8b470:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8b474:	00ff      	lsls	r7, r7, #3
   8b476:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8b47a:	e786      	b.n	8b38a <_free_r+0xa2>
   8b47c:	f240 5054 	movw	r0, #1364	; 0x554
   8b480:	4282      	cmp	r2, r0
   8b482:	d806      	bhi.n	8b492 <_free_r+0x1aa>
   8b484:	0c9a      	lsrs	r2, r3, #18
   8b486:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8b48a:	00ff      	lsls	r7, r7, #3
   8b48c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8b490:	e77b      	b.n	8b38a <_free_r+0xa2>
   8b492:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8b496:	257e      	movs	r5, #126	; 0x7e
   8b498:	e777      	b.n	8b38a <_free_r+0xa2>
   8b49a:	f043 0101 	orr.w	r1, r3, #1
   8b49e:	6061      	str	r1, [r4, #4]
   8b4a0:	6013      	str	r3, [r2, #0]
   8b4a2:	e763      	b.n	8b36c <_free_r+0x84>
   8b4a4:	20000cb0 	.word	0x20000cb0
   8b4a8:	20000cb8 	.word	0x20000cb8
   8b4ac:	200010bc 	.word	0x200010bc
   8b4b0:	200023e4 	.word	0x200023e4

0008b4b4 <__sfvwrite_r>:
   8b4b4:	6893      	ldr	r3, [r2, #8]
   8b4b6:	2b00      	cmp	r3, #0
   8b4b8:	d071      	beq.n	8b59e <__sfvwrite_r+0xea>
   8b4ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b4be:	898b      	ldrh	r3, [r1, #12]
   8b4c0:	b083      	sub	sp, #12
   8b4c2:	460c      	mov	r4, r1
   8b4c4:	0719      	lsls	r1, r3, #28
   8b4c6:	9000      	str	r0, [sp, #0]
   8b4c8:	4616      	mov	r6, r2
   8b4ca:	d525      	bpl.n	8b518 <__sfvwrite_r+0x64>
   8b4cc:	6922      	ldr	r2, [r4, #16]
   8b4ce:	b31a      	cbz	r2, 8b518 <__sfvwrite_r+0x64>
   8b4d0:	f013 0002 	ands.w	r0, r3, #2
   8b4d4:	6835      	ldr	r5, [r6, #0]
   8b4d6:	d02b      	beq.n	8b530 <__sfvwrite_r+0x7c>
   8b4d8:	f04f 0900 	mov.w	r9, #0
   8b4dc:	46b0      	mov	r8, r6
   8b4de:	464f      	mov	r7, r9
   8b4e0:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8b7a4 <__sfvwrite_r+0x2f0>
   8b4e4:	2f00      	cmp	r7, #0
   8b4e6:	d055      	beq.n	8b594 <__sfvwrite_r+0xe0>
   8b4e8:	4557      	cmp	r7, sl
   8b4ea:	463b      	mov	r3, r7
   8b4ec:	464a      	mov	r2, r9
   8b4ee:	bf28      	it	cs
   8b4f0:	4653      	movcs	r3, sl
   8b4f2:	69e1      	ldr	r1, [r4, #28]
   8b4f4:	9800      	ldr	r0, [sp, #0]
   8b4f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8b4f8:	47b0      	blx	r6
   8b4fa:	2800      	cmp	r0, #0
   8b4fc:	dd56      	ble.n	8b5ac <__sfvwrite_r+0xf8>
   8b4fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b502:	4481      	add	r9, r0
   8b504:	1a1b      	subs	r3, r3, r0
   8b506:	1a3f      	subs	r7, r7, r0
   8b508:	f8c8 3008 	str.w	r3, [r8, #8]
   8b50c:	2b00      	cmp	r3, #0
   8b50e:	d1e9      	bne.n	8b4e4 <__sfvwrite_r+0x30>
   8b510:	2000      	movs	r0, #0
   8b512:	b003      	add	sp, #12
   8b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b518:	4621      	mov	r1, r4
   8b51a:	9800      	ldr	r0, [sp, #0]
   8b51c:	f7fe fca0 	bl	89e60 <__swsetup_r>
   8b520:	2800      	cmp	r0, #0
   8b522:	f040 8135 	bne.w	8b790 <__sfvwrite_r+0x2dc>
   8b526:	89a3      	ldrh	r3, [r4, #12]
   8b528:	6835      	ldr	r5, [r6, #0]
   8b52a:	f013 0002 	ands.w	r0, r3, #2
   8b52e:	d1d3      	bne.n	8b4d8 <__sfvwrite_r+0x24>
   8b530:	f013 0901 	ands.w	r9, r3, #1
   8b534:	d144      	bne.n	8b5c0 <__sfvwrite_r+0x10c>
   8b536:	464f      	mov	r7, r9
   8b538:	9601      	str	r6, [sp, #4]
   8b53a:	b337      	cbz	r7, 8b58a <__sfvwrite_r+0xd6>
   8b53c:	059a      	lsls	r2, r3, #22
   8b53e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8b542:	f140 8085 	bpl.w	8b650 <__sfvwrite_r+0x19c>
   8b546:	4547      	cmp	r7, r8
   8b548:	46c3      	mov	fp, r8
   8b54a:	f0c0 80ad 	bcc.w	8b6a8 <__sfvwrite_r+0x1f4>
   8b54e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8b552:	f040 80ae 	bne.w	8b6b2 <__sfvwrite_r+0x1fe>
   8b556:	46ba      	mov	sl, r7
   8b558:	6820      	ldr	r0, [r4, #0]
   8b55a:	465a      	mov	r2, fp
   8b55c:	4649      	mov	r1, r9
   8b55e:	f000 fced 	bl	8bf3c <memmove>
   8b562:	68a2      	ldr	r2, [r4, #8]
   8b564:	6823      	ldr	r3, [r4, #0]
   8b566:	eba2 0208 	sub.w	r2, r2, r8
   8b56a:	445b      	add	r3, fp
   8b56c:	60a2      	str	r2, [r4, #8]
   8b56e:	6023      	str	r3, [r4, #0]
   8b570:	9a01      	ldr	r2, [sp, #4]
   8b572:	44d1      	add	r9, sl
   8b574:	6893      	ldr	r3, [r2, #8]
   8b576:	eba7 070a 	sub.w	r7, r7, sl
   8b57a:	eba3 030a 	sub.w	r3, r3, sl
   8b57e:	6093      	str	r3, [r2, #8]
   8b580:	2b00      	cmp	r3, #0
   8b582:	d0c5      	beq.n	8b510 <__sfvwrite_r+0x5c>
   8b584:	89a3      	ldrh	r3, [r4, #12]
   8b586:	2f00      	cmp	r7, #0
   8b588:	d1d8      	bne.n	8b53c <__sfvwrite_r+0x88>
   8b58a:	f8d5 9000 	ldr.w	r9, [r5]
   8b58e:	686f      	ldr	r7, [r5, #4]
   8b590:	3508      	adds	r5, #8
   8b592:	e7d2      	b.n	8b53a <__sfvwrite_r+0x86>
   8b594:	f8d5 9000 	ldr.w	r9, [r5]
   8b598:	686f      	ldr	r7, [r5, #4]
   8b59a:	3508      	adds	r5, #8
   8b59c:	e7a2      	b.n	8b4e4 <__sfvwrite_r+0x30>
   8b59e:	2000      	movs	r0, #0
   8b5a0:	4770      	bx	lr
   8b5a2:	4621      	mov	r1, r4
   8b5a4:	9800      	ldr	r0, [sp, #0]
   8b5a6:	f7ff fd21 	bl	8afec <_fflush_r>
   8b5aa:	b378      	cbz	r0, 8b60c <__sfvwrite_r+0x158>
   8b5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b5b0:	f04f 30ff 	mov.w	r0, #4294967295
   8b5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b5b8:	81a3      	strh	r3, [r4, #12]
   8b5ba:	b003      	add	sp, #12
   8b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b5c0:	4681      	mov	r9, r0
   8b5c2:	4633      	mov	r3, r6
   8b5c4:	464e      	mov	r6, r9
   8b5c6:	46a8      	mov	r8, r5
   8b5c8:	469a      	mov	sl, r3
   8b5ca:	464d      	mov	r5, r9
   8b5cc:	b356      	cbz	r6, 8b624 <__sfvwrite_r+0x170>
   8b5ce:	2800      	cmp	r0, #0
   8b5d0:	d032      	beq.n	8b638 <__sfvwrite_r+0x184>
   8b5d2:	45b1      	cmp	r9, r6
   8b5d4:	46cb      	mov	fp, r9
   8b5d6:	bf28      	it	cs
   8b5d8:	46b3      	movcs	fp, r6
   8b5da:	6820      	ldr	r0, [r4, #0]
   8b5dc:	6923      	ldr	r3, [r4, #16]
   8b5de:	465f      	mov	r7, fp
   8b5e0:	4298      	cmp	r0, r3
   8b5e2:	6962      	ldr	r2, [r4, #20]
   8b5e4:	d904      	bls.n	8b5f0 <__sfvwrite_r+0x13c>
   8b5e6:	68a3      	ldr	r3, [r4, #8]
   8b5e8:	4413      	add	r3, r2
   8b5ea:	459b      	cmp	fp, r3
   8b5ec:	f300 80a8 	bgt.w	8b740 <__sfvwrite_r+0x28c>
   8b5f0:	4593      	cmp	fp, r2
   8b5f2:	db4d      	blt.n	8b690 <__sfvwrite_r+0x1dc>
   8b5f4:	4613      	mov	r3, r2
   8b5f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b5f8:	462a      	mov	r2, r5
   8b5fa:	69e1      	ldr	r1, [r4, #28]
   8b5fc:	9800      	ldr	r0, [sp, #0]
   8b5fe:	47b8      	blx	r7
   8b600:	1e07      	subs	r7, r0, #0
   8b602:	ddd3      	ble.n	8b5ac <__sfvwrite_r+0xf8>
   8b604:	ebb9 0907 	subs.w	r9, r9, r7
   8b608:	d0cb      	beq.n	8b5a2 <__sfvwrite_r+0xee>
   8b60a:	2001      	movs	r0, #1
   8b60c:	f8da 3008 	ldr.w	r3, [sl, #8]
   8b610:	443d      	add	r5, r7
   8b612:	1bdb      	subs	r3, r3, r7
   8b614:	1bf6      	subs	r6, r6, r7
   8b616:	f8ca 3008 	str.w	r3, [sl, #8]
   8b61a:	2b00      	cmp	r3, #0
   8b61c:	f43f af78 	beq.w	8b510 <__sfvwrite_r+0x5c>
   8b620:	2e00      	cmp	r6, #0
   8b622:	d1d4      	bne.n	8b5ce <__sfvwrite_r+0x11a>
   8b624:	f108 0308 	add.w	r3, r8, #8
   8b628:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b62c:	4698      	mov	r8, r3
   8b62e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b632:	3308      	adds	r3, #8
   8b634:	2e00      	cmp	r6, #0
   8b636:	d0f7      	beq.n	8b628 <__sfvwrite_r+0x174>
   8b638:	4632      	mov	r2, r6
   8b63a:	210a      	movs	r1, #10
   8b63c:	4628      	mov	r0, r5
   8b63e:	f000 fc37 	bl	8beb0 <memchr>
   8b642:	2800      	cmp	r0, #0
   8b644:	f000 80a1 	beq.w	8b78a <__sfvwrite_r+0x2d6>
   8b648:	3001      	adds	r0, #1
   8b64a:	eba0 0905 	sub.w	r9, r0, r5
   8b64e:	e7c0      	b.n	8b5d2 <__sfvwrite_r+0x11e>
   8b650:	6820      	ldr	r0, [r4, #0]
   8b652:	6923      	ldr	r3, [r4, #16]
   8b654:	4298      	cmp	r0, r3
   8b656:	d802      	bhi.n	8b65e <__sfvwrite_r+0x1aa>
   8b658:	6963      	ldr	r3, [r4, #20]
   8b65a:	429f      	cmp	r7, r3
   8b65c:	d25d      	bcs.n	8b71a <__sfvwrite_r+0x266>
   8b65e:	45b8      	cmp	r8, r7
   8b660:	bf28      	it	cs
   8b662:	46b8      	movcs	r8, r7
   8b664:	4649      	mov	r1, r9
   8b666:	4642      	mov	r2, r8
   8b668:	f000 fc68 	bl	8bf3c <memmove>
   8b66c:	68a3      	ldr	r3, [r4, #8]
   8b66e:	6822      	ldr	r2, [r4, #0]
   8b670:	eba3 0308 	sub.w	r3, r3, r8
   8b674:	4442      	add	r2, r8
   8b676:	60a3      	str	r3, [r4, #8]
   8b678:	6022      	str	r2, [r4, #0]
   8b67a:	b10b      	cbz	r3, 8b680 <__sfvwrite_r+0x1cc>
   8b67c:	46c2      	mov	sl, r8
   8b67e:	e777      	b.n	8b570 <__sfvwrite_r+0xbc>
   8b680:	4621      	mov	r1, r4
   8b682:	9800      	ldr	r0, [sp, #0]
   8b684:	f7ff fcb2 	bl	8afec <_fflush_r>
   8b688:	2800      	cmp	r0, #0
   8b68a:	d18f      	bne.n	8b5ac <__sfvwrite_r+0xf8>
   8b68c:	46c2      	mov	sl, r8
   8b68e:	e76f      	b.n	8b570 <__sfvwrite_r+0xbc>
   8b690:	465a      	mov	r2, fp
   8b692:	4629      	mov	r1, r5
   8b694:	f000 fc52 	bl	8bf3c <memmove>
   8b698:	68a2      	ldr	r2, [r4, #8]
   8b69a:	6823      	ldr	r3, [r4, #0]
   8b69c:	eba2 020b 	sub.w	r2, r2, fp
   8b6a0:	445b      	add	r3, fp
   8b6a2:	60a2      	str	r2, [r4, #8]
   8b6a4:	6023      	str	r3, [r4, #0]
   8b6a6:	e7ad      	b.n	8b604 <__sfvwrite_r+0x150>
   8b6a8:	46b8      	mov	r8, r7
   8b6aa:	46ba      	mov	sl, r7
   8b6ac:	46bb      	mov	fp, r7
   8b6ae:	6820      	ldr	r0, [r4, #0]
   8b6b0:	e753      	b.n	8b55a <__sfvwrite_r+0xa6>
   8b6b2:	6962      	ldr	r2, [r4, #20]
   8b6b4:	6820      	ldr	r0, [r4, #0]
   8b6b6:	6921      	ldr	r1, [r4, #16]
   8b6b8:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8b6bc:	eba0 0a01 	sub.w	sl, r0, r1
   8b6c0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8b6c4:	f10a 0001 	add.w	r0, sl, #1
   8b6c8:	ea4f 0868 	mov.w	r8, r8, asr #1
   8b6cc:	4438      	add	r0, r7
   8b6ce:	4540      	cmp	r0, r8
   8b6d0:	4642      	mov	r2, r8
   8b6d2:	bf84      	itt	hi
   8b6d4:	4680      	movhi	r8, r0
   8b6d6:	4642      	movhi	r2, r8
   8b6d8:	055b      	lsls	r3, r3, #21
   8b6da:	d544      	bpl.n	8b766 <__sfvwrite_r+0x2b2>
   8b6dc:	4611      	mov	r1, r2
   8b6de:	9800      	ldr	r0, [sp, #0]
   8b6e0:	f000 f92e 	bl	8b940 <_malloc_r>
   8b6e4:	4683      	mov	fp, r0
   8b6e6:	2800      	cmp	r0, #0
   8b6e8:	d055      	beq.n	8b796 <__sfvwrite_r+0x2e2>
   8b6ea:	4652      	mov	r2, sl
   8b6ec:	6921      	ldr	r1, [r4, #16]
   8b6ee:	f7fc f8b5 	bl	8785c <memcpy>
   8b6f2:	89a3      	ldrh	r3, [r4, #12]
   8b6f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8b6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b6fc:	81a3      	strh	r3, [r4, #12]
   8b6fe:	eb0b 000a 	add.w	r0, fp, sl
   8b702:	eba8 030a 	sub.w	r3, r8, sl
   8b706:	f8c4 b010 	str.w	fp, [r4, #16]
   8b70a:	f8c4 8014 	str.w	r8, [r4, #20]
   8b70e:	6020      	str	r0, [r4, #0]
   8b710:	60a3      	str	r3, [r4, #8]
   8b712:	46b8      	mov	r8, r7
   8b714:	46ba      	mov	sl, r7
   8b716:	46bb      	mov	fp, r7
   8b718:	e71f      	b.n	8b55a <__sfvwrite_r+0xa6>
   8b71a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8b71e:	42ba      	cmp	r2, r7
   8b720:	bf28      	it	cs
   8b722:	463a      	movcs	r2, r7
   8b724:	fb92 f2f3 	sdiv	r2, r2, r3
   8b728:	69e1      	ldr	r1, [r4, #28]
   8b72a:	fb03 f302 	mul.w	r3, r3, r2
   8b72e:	9800      	ldr	r0, [sp, #0]
   8b730:	464a      	mov	r2, r9
   8b732:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8b734:	47b0      	blx	r6
   8b736:	f1b0 0a00 	subs.w	sl, r0, #0
   8b73a:	f73f af19 	bgt.w	8b570 <__sfvwrite_r+0xbc>
   8b73e:	e735      	b.n	8b5ac <__sfvwrite_r+0xf8>
   8b740:	461a      	mov	r2, r3
   8b742:	4629      	mov	r1, r5
   8b744:	9301      	str	r3, [sp, #4]
   8b746:	f000 fbf9 	bl	8bf3c <memmove>
   8b74a:	6822      	ldr	r2, [r4, #0]
   8b74c:	9b01      	ldr	r3, [sp, #4]
   8b74e:	4621      	mov	r1, r4
   8b750:	441a      	add	r2, r3
   8b752:	6022      	str	r2, [r4, #0]
   8b754:	9800      	ldr	r0, [sp, #0]
   8b756:	f7ff fc49 	bl	8afec <_fflush_r>
   8b75a:	9b01      	ldr	r3, [sp, #4]
   8b75c:	2800      	cmp	r0, #0
   8b75e:	f47f af25 	bne.w	8b5ac <__sfvwrite_r+0xf8>
   8b762:	461f      	mov	r7, r3
   8b764:	e74e      	b.n	8b604 <__sfvwrite_r+0x150>
   8b766:	9800      	ldr	r0, [sp, #0]
   8b768:	f000 ff54 	bl	8c614 <_realloc_r>
   8b76c:	4683      	mov	fp, r0
   8b76e:	2800      	cmp	r0, #0
   8b770:	d1c5      	bne.n	8b6fe <__sfvwrite_r+0x24a>
   8b772:	9d00      	ldr	r5, [sp, #0]
   8b774:	6921      	ldr	r1, [r4, #16]
   8b776:	4628      	mov	r0, r5
   8b778:	f7ff fdb6 	bl	8b2e8 <_free_r>
   8b77c:	220c      	movs	r2, #12
   8b77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b782:	602a      	str	r2, [r5, #0]
   8b784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b788:	e712      	b.n	8b5b0 <__sfvwrite_r+0xfc>
   8b78a:	f106 0901 	add.w	r9, r6, #1
   8b78e:	e720      	b.n	8b5d2 <__sfvwrite_r+0x11e>
   8b790:	f04f 30ff 	mov.w	r0, #4294967295
   8b794:	e6bd      	b.n	8b512 <__sfvwrite_r+0x5e>
   8b796:	220c      	movs	r2, #12
   8b798:	9900      	ldr	r1, [sp, #0]
   8b79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b79e:	600a      	str	r2, [r1, #0]
   8b7a0:	e706      	b.n	8b5b0 <__sfvwrite_r+0xfc>
   8b7a2:	bf00      	nop
   8b7a4:	7ffffc00 	.word	0x7ffffc00

0008b7a8 <_fwalk_reent>:
   8b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b7ac:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8b7b0:	d01e      	beq.n	8b7f0 <_fwalk_reent+0x48>
   8b7b2:	4688      	mov	r8, r1
   8b7b4:	4607      	mov	r7, r0
   8b7b6:	f04f 0900 	mov.w	r9, #0
   8b7ba:	6875      	ldr	r5, [r6, #4]
   8b7bc:	68b4      	ldr	r4, [r6, #8]
   8b7be:	3d01      	subs	r5, #1
   8b7c0:	d410      	bmi.n	8b7e4 <_fwalk_reent+0x3c>
   8b7c2:	89a3      	ldrh	r3, [r4, #12]
   8b7c4:	3d01      	subs	r5, #1
   8b7c6:	2b01      	cmp	r3, #1
   8b7c8:	d908      	bls.n	8b7dc <_fwalk_reent+0x34>
   8b7ca:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b7ce:	3301      	adds	r3, #1
   8b7d0:	d004      	beq.n	8b7dc <_fwalk_reent+0x34>
   8b7d2:	4621      	mov	r1, r4
   8b7d4:	4638      	mov	r0, r7
   8b7d6:	47c0      	blx	r8
   8b7d8:	ea49 0900 	orr.w	r9, r9, r0
   8b7dc:	1c6b      	adds	r3, r5, #1
   8b7de:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b7e2:	d1ee      	bne.n	8b7c2 <_fwalk_reent+0x1a>
   8b7e4:	6836      	ldr	r6, [r6, #0]
   8b7e6:	2e00      	cmp	r6, #0
   8b7e8:	d1e7      	bne.n	8b7ba <_fwalk_reent+0x12>
   8b7ea:	4648      	mov	r0, r9
   8b7ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b7f0:	46b1      	mov	r9, r6
   8b7f2:	4648      	mov	r0, r9
   8b7f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008b7f8 <__locale_mb_cur_max>:
   8b7f8:	4b04      	ldr	r3, [pc, #16]	; (8b80c <__locale_mb_cur_max+0x14>)
   8b7fa:	4a05      	ldr	r2, [pc, #20]	; (8b810 <__locale_mb_cur_max+0x18>)
   8b7fc:	681b      	ldr	r3, [r3, #0]
   8b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8b800:	2b00      	cmp	r3, #0
   8b802:	bf08      	it	eq
   8b804:	4613      	moveq	r3, r2
   8b806:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8b80a:	4770      	bx	lr
   8b80c:	20000714 	.word	0x20000714
   8b810:	20000b44 	.word	0x20000b44

0008b814 <_localeconv_r>:
   8b814:	4a04      	ldr	r2, [pc, #16]	; (8b828 <_localeconv_r+0x14>)
   8b816:	4b05      	ldr	r3, [pc, #20]	; (8b82c <_localeconv_r+0x18>)
   8b818:	6812      	ldr	r2, [r2, #0]
   8b81a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8b81c:	2800      	cmp	r0, #0
   8b81e:	bf08      	it	eq
   8b820:	4618      	moveq	r0, r3
   8b822:	30f0      	adds	r0, #240	; 0xf0
   8b824:	4770      	bx	lr
   8b826:	bf00      	nop
   8b828:	20000714 	.word	0x20000714
   8b82c:	20000b44 	.word	0x20000b44

0008b830 <__retarget_lock_init_recursive>:
   8b830:	4770      	bx	lr
   8b832:	bf00      	nop

0008b834 <__retarget_lock_close_recursive>:
   8b834:	4770      	bx	lr
   8b836:	bf00      	nop

0008b838 <__retarget_lock_acquire_recursive>:
   8b838:	4770      	bx	lr
   8b83a:	bf00      	nop

0008b83c <__retarget_lock_release_recursive>:
   8b83c:	4770      	bx	lr
   8b83e:	bf00      	nop

0008b840 <__swhatbuf_r>:
   8b840:	b570      	push	{r4, r5, r6, lr}
   8b842:	460c      	mov	r4, r1
   8b844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b848:	b090      	sub	sp, #64	; 0x40
   8b84a:	2900      	cmp	r1, #0
   8b84c:	4615      	mov	r5, r2
   8b84e:	461e      	mov	r6, r3
   8b850:	db14      	blt.n	8b87c <__swhatbuf_r+0x3c>
   8b852:	aa01      	add	r2, sp, #4
   8b854:	f001 fb40 	bl	8ced8 <_fstat_r>
   8b858:	2800      	cmp	r0, #0
   8b85a:	db0f      	blt.n	8b87c <__swhatbuf_r+0x3c>
   8b85c:	9a02      	ldr	r2, [sp, #8]
   8b85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b862:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8b866:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8b86a:	fab2 f282 	clz	r2, r2
   8b86e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8b872:	0952      	lsrs	r2, r2, #5
   8b874:	6032      	str	r2, [r6, #0]
   8b876:	602b      	str	r3, [r5, #0]
   8b878:	b010      	add	sp, #64	; 0x40
   8b87a:	bd70      	pop	{r4, r5, r6, pc}
   8b87c:	2300      	movs	r3, #0
   8b87e:	89a2      	ldrh	r2, [r4, #12]
   8b880:	6033      	str	r3, [r6, #0]
   8b882:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8b886:	d004      	beq.n	8b892 <__swhatbuf_r+0x52>
   8b888:	2240      	movs	r2, #64	; 0x40
   8b88a:	4618      	mov	r0, r3
   8b88c:	602a      	str	r2, [r5, #0]
   8b88e:	b010      	add	sp, #64	; 0x40
   8b890:	bd70      	pop	{r4, r5, r6, pc}
   8b892:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b896:	602b      	str	r3, [r5, #0]
   8b898:	b010      	add	sp, #64	; 0x40
   8b89a:	bd70      	pop	{r4, r5, r6, pc}

0008b89c <__smakebuf_r>:
   8b89c:	898a      	ldrh	r2, [r1, #12]
   8b89e:	460b      	mov	r3, r1
   8b8a0:	0792      	lsls	r2, r2, #30
   8b8a2:	d506      	bpl.n	8b8b2 <__smakebuf_r+0x16>
   8b8a4:	2101      	movs	r1, #1
   8b8a6:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8b8aa:	6159      	str	r1, [r3, #20]
   8b8ac:	601a      	str	r2, [r3, #0]
   8b8ae:	611a      	str	r2, [r3, #16]
   8b8b0:	4770      	bx	lr
   8b8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b8b4:	b083      	sub	sp, #12
   8b8b6:	ab01      	add	r3, sp, #4
   8b8b8:	466a      	mov	r2, sp
   8b8ba:	460c      	mov	r4, r1
   8b8bc:	4606      	mov	r6, r0
   8b8be:	f7ff ffbf 	bl	8b840 <__swhatbuf_r>
   8b8c2:	9900      	ldr	r1, [sp, #0]
   8b8c4:	4605      	mov	r5, r0
   8b8c6:	4630      	mov	r0, r6
   8b8c8:	f000 f83a 	bl	8b940 <_malloc_r>
   8b8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b8d0:	b1d8      	cbz	r0, 8b90a <__smakebuf_r+0x6e>
   8b8d2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8b8d6:	4f15      	ldr	r7, [pc, #84]	; (8b92c <__smakebuf_r+0x90>)
   8b8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b8dc:	63f7      	str	r7, [r6, #60]	; 0x3c
   8b8de:	81a3      	strh	r3, [r4, #12]
   8b8e0:	6020      	str	r0, [r4, #0]
   8b8e2:	6120      	str	r0, [r4, #16]
   8b8e4:	6161      	str	r1, [r4, #20]
   8b8e6:	b91a      	cbnz	r2, 8b8f0 <__smakebuf_r+0x54>
   8b8e8:	432b      	orrs	r3, r5
   8b8ea:	81a3      	strh	r3, [r4, #12]
   8b8ec:	b003      	add	sp, #12
   8b8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b8f0:	4630      	mov	r0, r6
   8b8f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b8f6:	f001 fb03 	bl	8cf00 <_isatty_r>
   8b8fa:	b1a0      	cbz	r0, 8b926 <__smakebuf_r+0x8a>
   8b8fc:	89a3      	ldrh	r3, [r4, #12]
   8b8fe:	f023 0303 	bic.w	r3, r3, #3
   8b902:	f043 0301 	orr.w	r3, r3, #1
   8b906:	b21b      	sxth	r3, r3
   8b908:	e7ee      	b.n	8b8e8 <__smakebuf_r+0x4c>
   8b90a:	059a      	lsls	r2, r3, #22
   8b90c:	d4ee      	bmi.n	8b8ec <__smakebuf_r+0x50>
   8b90e:	2101      	movs	r1, #1
   8b910:	f023 0303 	bic.w	r3, r3, #3
   8b914:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b918:	f043 0302 	orr.w	r3, r3, #2
   8b91c:	81a3      	strh	r3, [r4, #12]
   8b91e:	6161      	str	r1, [r4, #20]
   8b920:	6022      	str	r2, [r4, #0]
   8b922:	6122      	str	r2, [r4, #16]
   8b924:	e7e2      	b.n	8b8ec <__smakebuf_r+0x50>
   8b926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b92a:	e7dd      	b.n	8b8e8 <__smakebuf_r+0x4c>
   8b92c:	0008b041 	.word	0x0008b041

0008b930 <malloc>:
   8b930:	4b02      	ldr	r3, [pc, #8]	; (8b93c <malloc+0xc>)
   8b932:	4601      	mov	r1, r0
   8b934:	6818      	ldr	r0, [r3, #0]
   8b936:	f000 b803 	b.w	8b940 <_malloc_r>
   8b93a:	bf00      	nop
   8b93c:	20000714 	.word	0x20000714

0008b940 <_malloc_r>:
   8b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b944:	f101 060b 	add.w	r6, r1, #11
   8b948:	2e16      	cmp	r6, #22
   8b94a:	b083      	sub	sp, #12
   8b94c:	4605      	mov	r5, r0
   8b94e:	f240 809e 	bls.w	8ba8e <_malloc_r+0x14e>
   8b952:	f036 0607 	bics.w	r6, r6, #7
   8b956:	f100 80bd 	bmi.w	8bad4 <_malloc_r+0x194>
   8b95a:	42b1      	cmp	r1, r6
   8b95c:	f200 80ba 	bhi.w	8bad4 <_malloc_r+0x194>
   8b960:	f000 fb50 	bl	8c004 <__malloc_lock>
   8b964:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8b968:	f0c0 8285 	bcc.w	8be76 <_malloc_r+0x536>
   8b96c:	0a73      	lsrs	r3, r6, #9
   8b96e:	f000 80b8 	beq.w	8bae2 <_malloc_r+0x1a2>
   8b972:	2b04      	cmp	r3, #4
   8b974:	f200 816c 	bhi.w	8bc50 <_malloc_r+0x310>
   8b978:	09b3      	lsrs	r3, r6, #6
   8b97a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8b97e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8b982:	00c1      	lsls	r1, r0, #3
   8b984:	4fb8      	ldr	r7, [pc, #736]	; (8bc68 <_malloc_r+0x328>)
   8b986:	4439      	add	r1, r7
   8b988:	684c      	ldr	r4, [r1, #4]
   8b98a:	3908      	subs	r1, #8
   8b98c:	42a1      	cmp	r1, r4
   8b98e:	d106      	bne.n	8b99e <_malloc_r+0x5e>
   8b990:	e00c      	b.n	8b9ac <_malloc_r+0x6c>
   8b992:	2a00      	cmp	r2, #0
   8b994:	f280 80ab 	bge.w	8baee <_malloc_r+0x1ae>
   8b998:	68e4      	ldr	r4, [r4, #12]
   8b99a:	42a1      	cmp	r1, r4
   8b99c:	d006      	beq.n	8b9ac <_malloc_r+0x6c>
   8b99e:	6863      	ldr	r3, [r4, #4]
   8b9a0:	f023 0303 	bic.w	r3, r3, #3
   8b9a4:	1b9a      	subs	r2, r3, r6
   8b9a6:	2a0f      	cmp	r2, #15
   8b9a8:	ddf3      	ble.n	8b992 <_malloc_r+0x52>
   8b9aa:	4670      	mov	r0, lr
   8b9ac:	693c      	ldr	r4, [r7, #16]
   8b9ae:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8bc7c <_malloc_r+0x33c>
   8b9b2:	4574      	cmp	r4, lr
   8b9b4:	f000 819e 	beq.w	8bcf4 <_malloc_r+0x3b4>
   8b9b8:	6863      	ldr	r3, [r4, #4]
   8b9ba:	f023 0303 	bic.w	r3, r3, #3
   8b9be:	1b9a      	subs	r2, r3, r6
   8b9c0:	2a0f      	cmp	r2, #15
   8b9c2:	f300 8183 	bgt.w	8bccc <_malloc_r+0x38c>
   8b9c6:	2a00      	cmp	r2, #0
   8b9c8:	f8c7 e014 	str.w	lr, [r7, #20]
   8b9cc:	f8c7 e010 	str.w	lr, [r7, #16]
   8b9d0:	f280 8091 	bge.w	8baf6 <_malloc_r+0x1b6>
   8b9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8b9d8:	f080 8154 	bcs.w	8bc84 <_malloc_r+0x344>
   8b9dc:	2201      	movs	r2, #1
   8b9de:	08db      	lsrs	r3, r3, #3
   8b9e0:	6879      	ldr	r1, [r7, #4]
   8b9e2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8b9e6:	4413      	add	r3, r2
   8b9e8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8b9ec:	fa02 f20c 	lsl.w	r2, r2, ip
   8b9f0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8b9f4:	430a      	orrs	r2, r1
   8b9f6:	f1ac 0108 	sub.w	r1, ip, #8
   8b9fa:	60e1      	str	r1, [r4, #12]
   8b9fc:	f8c4 8008 	str.w	r8, [r4, #8]
   8ba00:	607a      	str	r2, [r7, #4]
   8ba02:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8ba06:	f8c8 400c 	str.w	r4, [r8, #12]
   8ba0a:	2401      	movs	r4, #1
   8ba0c:	1083      	asrs	r3, r0, #2
   8ba0e:	409c      	lsls	r4, r3
   8ba10:	4294      	cmp	r4, r2
   8ba12:	d87d      	bhi.n	8bb10 <_malloc_r+0x1d0>
   8ba14:	4214      	tst	r4, r2
   8ba16:	d106      	bne.n	8ba26 <_malloc_r+0xe6>
   8ba18:	f020 0003 	bic.w	r0, r0, #3
   8ba1c:	0064      	lsls	r4, r4, #1
   8ba1e:	4214      	tst	r4, r2
   8ba20:	f100 0004 	add.w	r0, r0, #4
   8ba24:	d0fa      	beq.n	8ba1c <_malloc_r+0xdc>
   8ba26:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8ba2a:	46cc      	mov	ip, r9
   8ba2c:	4680      	mov	r8, r0
   8ba2e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8ba32:	459c      	cmp	ip, r3
   8ba34:	d107      	bne.n	8ba46 <_malloc_r+0x106>
   8ba36:	e15f      	b.n	8bcf8 <_malloc_r+0x3b8>
   8ba38:	2a00      	cmp	r2, #0
   8ba3a:	f280 816d 	bge.w	8bd18 <_malloc_r+0x3d8>
   8ba3e:	68db      	ldr	r3, [r3, #12]
   8ba40:	459c      	cmp	ip, r3
   8ba42:	f000 8159 	beq.w	8bcf8 <_malloc_r+0x3b8>
   8ba46:	6859      	ldr	r1, [r3, #4]
   8ba48:	f021 0103 	bic.w	r1, r1, #3
   8ba4c:	1b8a      	subs	r2, r1, r6
   8ba4e:	2a0f      	cmp	r2, #15
   8ba50:	ddf2      	ble.n	8ba38 <_malloc_r+0xf8>
   8ba52:	68dc      	ldr	r4, [r3, #12]
   8ba54:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8ba58:	f046 0801 	orr.w	r8, r6, #1
   8ba5c:	4628      	mov	r0, r5
   8ba5e:	441e      	add	r6, r3
   8ba60:	f042 0501 	orr.w	r5, r2, #1
   8ba64:	f8c3 8004 	str.w	r8, [r3, #4]
   8ba68:	f8cc 400c 	str.w	r4, [ip, #12]
   8ba6c:	f8c4 c008 	str.w	ip, [r4, #8]
   8ba70:	617e      	str	r6, [r7, #20]
   8ba72:	613e      	str	r6, [r7, #16]
   8ba74:	f8c6 e00c 	str.w	lr, [r6, #12]
   8ba78:	f8c6 e008 	str.w	lr, [r6, #8]
   8ba7c:	6075      	str	r5, [r6, #4]
   8ba7e:	505a      	str	r2, [r3, r1]
   8ba80:	9300      	str	r3, [sp, #0]
   8ba82:	f000 fac5 	bl	8c010 <__malloc_unlock>
   8ba86:	9b00      	ldr	r3, [sp, #0]
   8ba88:	f103 0408 	add.w	r4, r3, #8
   8ba8c:	e01e      	b.n	8bacc <_malloc_r+0x18c>
   8ba8e:	2910      	cmp	r1, #16
   8ba90:	d820      	bhi.n	8bad4 <_malloc_r+0x194>
   8ba92:	f000 fab7 	bl	8c004 <__malloc_lock>
   8ba96:	2610      	movs	r6, #16
   8ba98:	2318      	movs	r3, #24
   8ba9a:	2002      	movs	r0, #2
   8ba9c:	4f72      	ldr	r7, [pc, #456]	; (8bc68 <_malloc_r+0x328>)
   8ba9e:	443b      	add	r3, r7
   8baa0:	685c      	ldr	r4, [r3, #4]
   8baa2:	f1a3 0208 	sub.w	r2, r3, #8
   8baa6:	4294      	cmp	r4, r2
   8baa8:	f000 812f 	beq.w	8bd0a <_malloc_r+0x3ca>
   8baac:	6863      	ldr	r3, [r4, #4]
   8baae:	68e1      	ldr	r1, [r4, #12]
   8bab0:	f023 0303 	bic.w	r3, r3, #3
   8bab4:	4423      	add	r3, r4
   8bab6:	685a      	ldr	r2, [r3, #4]
   8bab8:	68a6      	ldr	r6, [r4, #8]
   8baba:	f042 0201 	orr.w	r2, r2, #1
   8babe:	60f1      	str	r1, [r6, #12]
   8bac0:	4628      	mov	r0, r5
   8bac2:	608e      	str	r6, [r1, #8]
   8bac4:	605a      	str	r2, [r3, #4]
   8bac6:	f000 faa3 	bl	8c010 <__malloc_unlock>
   8baca:	3408      	adds	r4, #8
   8bacc:	4620      	mov	r0, r4
   8bace:	b003      	add	sp, #12
   8bad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bad4:	2400      	movs	r4, #0
   8bad6:	230c      	movs	r3, #12
   8bad8:	4620      	mov	r0, r4
   8bada:	602b      	str	r3, [r5, #0]
   8badc:	b003      	add	sp, #12
   8bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bae2:	2040      	movs	r0, #64	; 0x40
   8bae4:	f44f 7100 	mov.w	r1, #512	; 0x200
   8bae8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8baec:	e74a      	b.n	8b984 <_malloc_r+0x44>
   8baee:	4423      	add	r3, r4
   8baf0:	685a      	ldr	r2, [r3, #4]
   8baf2:	68e1      	ldr	r1, [r4, #12]
   8baf4:	e7e0      	b.n	8bab8 <_malloc_r+0x178>
   8baf6:	4423      	add	r3, r4
   8baf8:	685a      	ldr	r2, [r3, #4]
   8bafa:	4628      	mov	r0, r5
   8bafc:	f042 0201 	orr.w	r2, r2, #1
   8bb00:	605a      	str	r2, [r3, #4]
   8bb02:	3408      	adds	r4, #8
   8bb04:	f000 fa84 	bl	8c010 <__malloc_unlock>
   8bb08:	4620      	mov	r0, r4
   8bb0a:	b003      	add	sp, #12
   8bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bb10:	68bc      	ldr	r4, [r7, #8]
   8bb12:	6863      	ldr	r3, [r4, #4]
   8bb14:	f023 0803 	bic.w	r8, r3, #3
   8bb18:	45b0      	cmp	r8, r6
   8bb1a:	d304      	bcc.n	8bb26 <_malloc_r+0x1e6>
   8bb1c:	eba8 0306 	sub.w	r3, r8, r6
   8bb20:	2b0f      	cmp	r3, #15
   8bb22:	f300 8085 	bgt.w	8bc30 <_malloc_r+0x2f0>
   8bb26:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8bc80 <_malloc_r+0x340>
   8bb2a:	4b50      	ldr	r3, [pc, #320]	; (8bc6c <_malloc_r+0x32c>)
   8bb2c:	f8d9 2000 	ldr.w	r2, [r9]
   8bb30:	681b      	ldr	r3, [r3, #0]
   8bb32:	3201      	adds	r2, #1
   8bb34:	4433      	add	r3, r6
   8bb36:	eb04 0a08 	add.w	sl, r4, r8
   8bb3a:	f000 8154 	beq.w	8bde6 <_malloc_r+0x4a6>
   8bb3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8bb42:	330f      	adds	r3, #15
   8bb44:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8bb48:	f02b 0b0f 	bic.w	fp, fp, #15
   8bb4c:	4659      	mov	r1, fp
   8bb4e:	4628      	mov	r0, r5
   8bb50:	f000 ff16 	bl	8c980 <_sbrk_r>
   8bb54:	1c41      	adds	r1, r0, #1
   8bb56:	4602      	mov	r2, r0
   8bb58:	f000 80fb 	beq.w	8bd52 <_malloc_r+0x412>
   8bb5c:	4582      	cmp	sl, r0
   8bb5e:	f200 80f6 	bhi.w	8bd4e <_malloc_r+0x40e>
   8bb62:	4b43      	ldr	r3, [pc, #268]	; (8bc70 <_malloc_r+0x330>)
   8bb64:	6819      	ldr	r1, [r3, #0]
   8bb66:	4459      	add	r1, fp
   8bb68:	6019      	str	r1, [r3, #0]
   8bb6a:	f000 814c 	beq.w	8be06 <_malloc_r+0x4c6>
   8bb6e:	f8d9 0000 	ldr.w	r0, [r9]
   8bb72:	3001      	adds	r0, #1
   8bb74:	bf1b      	ittet	ne
   8bb76:	eba2 0a0a 	subne.w	sl, r2, sl
   8bb7a:	4451      	addne	r1, sl
   8bb7c:	f8c9 2000 	streq.w	r2, [r9]
   8bb80:	6019      	strne	r1, [r3, #0]
   8bb82:	f012 0107 	ands.w	r1, r2, #7
   8bb86:	f000 8114 	beq.w	8bdb2 <_malloc_r+0x472>
   8bb8a:	f1c1 0008 	rsb	r0, r1, #8
   8bb8e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8bb92:	4402      	add	r2, r0
   8bb94:	3108      	adds	r1, #8
   8bb96:	eb02 090b 	add.w	r9, r2, fp
   8bb9a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8bb9e:	eba1 0909 	sub.w	r9, r1, r9
   8bba2:	4649      	mov	r1, r9
   8bba4:	4628      	mov	r0, r5
   8bba6:	9301      	str	r3, [sp, #4]
   8bba8:	9200      	str	r2, [sp, #0]
   8bbaa:	f000 fee9 	bl	8c980 <_sbrk_r>
   8bbae:	1c43      	adds	r3, r0, #1
   8bbb0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8bbb4:	f000 8142 	beq.w	8be3c <_malloc_r+0x4fc>
   8bbb8:	1a80      	subs	r0, r0, r2
   8bbba:	4448      	add	r0, r9
   8bbbc:	f040 0001 	orr.w	r0, r0, #1
   8bbc0:	6819      	ldr	r1, [r3, #0]
   8bbc2:	42bc      	cmp	r4, r7
   8bbc4:	4449      	add	r1, r9
   8bbc6:	60ba      	str	r2, [r7, #8]
   8bbc8:	6019      	str	r1, [r3, #0]
   8bbca:	6050      	str	r0, [r2, #4]
   8bbcc:	d017      	beq.n	8bbfe <_malloc_r+0x2be>
   8bbce:	f1b8 0f0f 	cmp.w	r8, #15
   8bbd2:	f240 80fa 	bls.w	8bdca <_malloc_r+0x48a>
   8bbd6:	f04f 0c05 	mov.w	ip, #5
   8bbda:	6862      	ldr	r2, [r4, #4]
   8bbdc:	f1a8 000c 	sub.w	r0, r8, #12
   8bbe0:	f020 0007 	bic.w	r0, r0, #7
   8bbe4:	f002 0201 	and.w	r2, r2, #1
   8bbe8:	eb04 0e00 	add.w	lr, r4, r0
   8bbec:	4302      	orrs	r2, r0
   8bbee:	280f      	cmp	r0, #15
   8bbf0:	6062      	str	r2, [r4, #4]
   8bbf2:	f8ce c004 	str.w	ip, [lr, #4]
   8bbf6:	f8ce c008 	str.w	ip, [lr, #8]
   8bbfa:	f200 8116 	bhi.w	8be2a <_malloc_r+0x4ea>
   8bbfe:	4b1d      	ldr	r3, [pc, #116]	; (8bc74 <_malloc_r+0x334>)
   8bc00:	68bc      	ldr	r4, [r7, #8]
   8bc02:	681a      	ldr	r2, [r3, #0]
   8bc04:	4291      	cmp	r1, r2
   8bc06:	bf88      	it	hi
   8bc08:	6019      	strhi	r1, [r3, #0]
   8bc0a:	4b1b      	ldr	r3, [pc, #108]	; (8bc78 <_malloc_r+0x338>)
   8bc0c:	681a      	ldr	r2, [r3, #0]
   8bc0e:	4291      	cmp	r1, r2
   8bc10:	6862      	ldr	r2, [r4, #4]
   8bc12:	bf88      	it	hi
   8bc14:	6019      	strhi	r1, [r3, #0]
   8bc16:	f022 0203 	bic.w	r2, r2, #3
   8bc1a:	4296      	cmp	r6, r2
   8bc1c:	eba2 0306 	sub.w	r3, r2, r6
   8bc20:	d801      	bhi.n	8bc26 <_malloc_r+0x2e6>
   8bc22:	2b0f      	cmp	r3, #15
   8bc24:	dc04      	bgt.n	8bc30 <_malloc_r+0x2f0>
   8bc26:	4628      	mov	r0, r5
   8bc28:	f000 f9f2 	bl	8c010 <__malloc_unlock>
   8bc2c:	2400      	movs	r4, #0
   8bc2e:	e74d      	b.n	8bacc <_malloc_r+0x18c>
   8bc30:	f046 0201 	orr.w	r2, r6, #1
   8bc34:	f043 0301 	orr.w	r3, r3, #1
   8bc38:	4426      	add	r6, r4
   8bc3a:	6062      	str	r2, [r4, #4]
   8bc3c:	4628      	mov	r0, r5
   8bc3e:	60be      	str	r6, [r7, #8]
   8bc40:	3408      	adds	r4, #8
   8bc42:	6073      	str	r3, [r6, #4]
   8bc44:	f000 f9e4 	bl	8c010 <__malloc_unlock>
   8bc48:	4620      	mov	r0, r4
   8bc4a:	b003      	add	sp, #12
   8bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc50:	2b14      	cmp	r3, #20
   8bc52:	d970      	bls.n	8bd36 <_malloc_r+0x3f6>
   8bc54:	2b54      	cmp	r3, #84	; 0x54
   8bc56:	f200 80a2 	bhi.w	8bd9e <_malloc_r+0x45e>
   8bc5a:	0b33      	lsrs	r3, r6, #12
   8bc5c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8bc60:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8bc64:	00c1      	lsls	r1, r0, #3
   8bc66:	e68d      	b.n	8b984 <_malloc_r+0x44>
   8bc68:	20000cb0 	.word	0x20000cb0
   8bc6c:	200023e4 	.word	0x200023e4
   8bc70:	200023b4 	.word	0x200023b4
   8bc74:	200023dc 	.word	0x200023dc
   8bc78:	200023e0 	.word	0x200023e0
   8bc7c:	20000cb8 	.word	0x20000cb8
   8bc80:	200010b8 	.word	0x200010b8
   8bc84:	0a5a      	lsrs	r2, r3, #9
   8bc86:	2a04      	cmp	r2, #4
   8bc88:	d95b      	bls.n	8bd42 <_malloc_r+0x402>
   8bc8a:	2a14      	cmp	r2, #20
   8bc8c:	f200 80ae 	bhi.w	8bdec <_malloc_r+0x4ac>
   8bc90:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8bc94:	00c9      	lsls	r1, r1, #3
   8bc96:	325b      	adds	r2, #91	; 0x5b
   8bc98:	eb07 0c01 	add.w	ip, r7, r1
   8bc9c:	5879      	ldr	r1, [r7, r1]
   8bc9e:	f1ac 0c08 	sub.w	ip, ip, #8
   8bca2:	458c      	cmp	ip, r1
   8bca4:	f000 8088 	beq.w	8bdb8 <_malloc_r+0x478>
   8bca8:	684a      	ldr	r2, [r1, #4]
   8bcaa:	f022 0203 	bic.w	r2, r2, #3
   8bcae:	4293      	cmp	r3, r2
   8bcb0:	d273      	bcs.n	8bd9a <_malloc_r+0x45a>
   8bcb2:	6889      	ldr	r1, [r1, #8]
   8bcb4:	458c      	cmp	ip, r1
   8bcb6:	d1f7      	bne.n	8bca8 <_malloc_r+0x368>
   8bcb8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8bcbc:	687a      	ldr	r2, [r7, #4]
   8bcbe:	60e3      	str	r3, [r4, #12]
   8bcc0:	f8c4 c008 	str.w	ip, [r4, #8]
   8bcc4:	609c      	str	r4, [r3, #8]
   8bcc6:	f8cc 400c 	str.w	r4, [ip, #12]
   8bcca:	e69e      	b.n	8ba0a <_malloc_r+0xca>
   8bccc:	f046 0c01 	orr.w	ip, r6, #1
   8bcd0:	f042 0101 	orr.w	r1, r2, #1
   8bcd4:	4426      	add	r6, r4
   8bcd6:	f8c4 c004 	str.w	ip, [r4, #4]
   8bcda:	4628      	mov	r0, r5
   8bcdc:	617e      	str	r6, [r7, #20]
   8bcde:	613e      	str	r6, [r7, #16]
   8bce0:	f8c6 e00c 	str.w	lr, [r6, #12]
   8bce4:	f8c6 e008 	str.w	lr, [r6, #8]
   8bce8:	6071      	str	r1, [r6, #4]
   8bcea:	50e2      	str	r2, [r4, r3]
   8bcec:	f000 f990 	bl	8c010 <__malloc_unlock>
   8bcf0:	3408      	adds	r4, #8
   8bcf2:	e6eb      	b.n	8bacc <_malloc_r+0x18c>
   8bcf4:	687a      	ldr	r2, [r7, #4]
   8bcf6:	e688      	b.n	8ba0a <_malloc_r+0xca>
   8bcf8:	f108 0801 	add.w	r8, r8, #1
   8bcfc:	f018 0f03 	tst.w	r8, #3
   8bd00:	f10c 0c08 	add.w	ip, ip, #8
   8bd04:	f47f ae93 	bne.w	8ba2e <_malloc_r+0xee>
   8bd08:	e02d      	b.n	8bd66 <_malloc_r+0x426>
   8bd0a:	68dc      	ldr	r4, [r3, #12]
   8bd0c:	42a3      	cmp	r3, r4
   8bd0e:	bf08      	it	eq
   8bd10:	3002      	addeq	r0, #2
   8bd12:	f43f ae4b 	beq.w	8b9ac <_malloc_r+0x6c>
   8bd16:	e6c9      	b.n	8baac <_malloc_r+0x16c>
   8bd18:	461c      	mov	r4, r3
   8bd1a:	4419      	add	r1, r3
   8bd1c:	684a      	ldr	r2, [r1, #4]
   8bd1e:	68db      	ldr	r3, [r3, #12]
   8bd20:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8bd24:	f042 0201 	orr.w	r2, r2, #1
   8bd28:	604a      	str	r2, [r1, #4]
   8bd2a:	4628      	mov	r0, r5
   8bd2c:	60f3      	str	r3, [r6, #12]
   8bd2e:	609e      	str	r6, [r3, #8]
   8bd30:	f000 f96e 	bl	8c010 <__malloc_unlock>
   8bd34:	e6ca      	b.n	8bacc <_malloc_r+0x18c>
   8bd36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8bd3a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8bd3e:	00c1      	lsls	r1, r0, #3
   8bd40:	e620      	b.n	8b984 <_malloc_r+0x44>
   8bd42:	099a      	lsrs	r2, r3, #6
   8bd44:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8bd48:	00c9      	lsls	r1, r1, #3
   8bd4a:	3238      	adds	r2, #56	; 0x38
   8bd4c:	e7a4      	b.n	8bc98 <_malloc_r+0x358>
   8bd4e:	42bc      	cmp	r4, r7
   8bd50:	d054      	beq.n	8bdfc <_malloc_r+0x4bc>
   8bd52:	68bc      	ldr	r4, [r7, #8]
   8bd54:	6862      	ldr	r2, [r4, #4]
   8bd56:	f022 0203 	bic.w	r2, r2, #3
   8bd5a:	e75e      	b.n	8bc1a <_malloc_r+0x2da>
   8bd5c:	f859 3908 	ldr.w	r3, [r9], #-8
   8bd60:	4599      	cmp	r9, r3
   8bd62:	f040 8086 	bne.w	8be72 <_malloc_r+0x532>
   8bd66:	f010 0f03 	tst.w	r0, #3
   8bd6a:	f100 30ff 	add.w	r0, r0, #4294967295
   8bd6e:	d1f5      	bne.n	8bd5c <_malloc_r+0x41c>
   8bd70:	687b      	ldr	r3, [r7, #4]
   8bd72:	ea23 0304 	bic.w	r3, r3, r4
   8bd76:	607b      	str	r3, [r7, #4]
   8bd78:	0064      	lsls	r4, r4, #1
   8bd7a:	429c      	cmp	r4, r3
   8bd7c:	f63f aec8 	bhi.w	8bb10 <_malloc_r+0x1d0>
   8bd80:	2c00      	cmp	r4, #0
   8bd82:	f43f aec5 	beq.w	8bb10 <_malloc_r+0x1d0>
   8bd86:	421c      	tst	r4, r3
   8bd88:	4640      	mov	r0, r8
   8bd8a:	f47f ae4c 	bne.w	8ba26 <_malloc_r+0xe6>
   8bd8e:	0064      	lsls	r4, r4, #1
   8bd90:	421c      	tst	r4, r3
   8bd92:	f100 0004 	add.w	r0, r0, #4
   8bd96:	d0fa      	beq.n	8bd8e <_malloc_r+0x44e>
   8bd98:	e645      	b.n	8ba26 <_malloc_r+0xe6>
   8bd9a:	468c      	mov	ip, r1
   8bd9c:	e78c      	b.n	8bcb8 <_malloc_r+0x378>
   8bd9e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bda2:	d815      	bhi.n	8bdd0 <_malloc_r+0x490>
   8bda4:	0bf3      	lsrs	r3, r6, #15
   8bda6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8bdaa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8bdae:	00c1      	lsls	r1, r0, #3
   8bdb0:	e5e8      	b.n	8b984 <_malloc_r+0x44>
   8bdb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8bdb6:	e6ee      	b.n	8bb96 <_malloc_r+0x256>
   8bdb8:	2101      	movs	r1, #1
   8bdba:	687b      	ldr	r3, [r7, #4]
   8bdbc:	1092      	asrs	r2, r2, #2
   8bdbe:	fa01 f202 	lsl.w	r2, r1, r2
   8bdc2:	431a      	orrs	r2, r3
   8bdc4:	607a      	str	r2, [r7, #4]
   8bdc6:	4663      	mov	r3, ip
   8bdc8:	e779      	b.n	8bcbe <_malloc_r+0x37e>
   8bdca:	2301      	movs	r3, #1
   8bdcc:	6053      	str	r3, [r2, #4]
   8bdce:	e72a      	b.n	8bc26 <_malloc_r+0x2e6>
   8bdd0:	f240 5254 	movw	r2, #1364	; 0x554
   8bdd4:	4293      	cmp	r3, r2
   8bdd6:	d822      	bhi.n	8be1e <_malloc_r+0x4de>
   8bdd8:	0cb3      	lsrs	r3, r6, #18
   8bdda:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8bdde:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8bde2:	00c1      	lsls	r1, r0, #3
   8bde4:	e5ce      	b.n	8b984 <_malloc_r+0x44>
   8bde6:	f103 0b10 	add.w	fp, r3, #16
   8bdea:	e6af      	b.n	8bb4c <_malloc_r+0x20c>
   8bdec:	2a54      	cmp	r2, #84	; 0x54
   8bdee:	d829      	bhi.n	8be44 <_malloc_r+0x504>
   8bdf0:	0b1a      	lsrs	r2, r3, #12
   8bdf2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8bdf6:	00c9      	lsls	r1, r1, #3
   8bdf8:	326e      	adds	r2, #110	; 0x6e
   8bdfa:	e74d      	b.n	8bc98 <_malloc_r+0x358>
   8bdfc:	4b20      	ldr	r3, [pc, #128]	; (8be80 <_malloc_r+0x540>)
   8bdfe:	6819      	ldr	r1, [r3, #0]
   8be00:	4459      	add	r1, fp
   8be02:	6019      	str	r1, [r3, #0]
   8be04:	e6b3      	b.n	8bb6e <_malloc_r+0x22e>
   8be06:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8be0a:	2800      	cmp	r0, #0
   8be0c:	f47f aeaf 	bne.w	8bb6e <_malloc_r+0x22e>
   8be10:	eb08 030b 	add.w	r3, r8, fp
   8be14:	68ba      	ldr	r2, [r7, #8]
   8be16:	f043 0301 	orr.w	r3, r3, #1
   8be1a:	6053      	str	r3, [r2, #4]
   8be1c:	e6ef      	b.n	8bbfe <_malloc_r+0x2be>
   8be1e:	207f      	movs	r0, #127	; 0x7f
   8be20:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8be24:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8be28:	e5ac      	b.n	8b984 <_malloc_r+0x44>
   8be2a:	f104 0108 	add.w	r1, r4, #8
   8be2e:	4628      	mov	r0, r5
   8be30:	9300      	str	r3, [sp, #0]
   8be32:	f7ff fa59 	bl	8b2e8 <_free_r>
   8be36:	9b00      	ldr	r3, [sp, #0]
   8be38:	6819      	ldr	r1, [r3, #0]
   8be3a:	e6e0      	b.n	8bbfe <_malloc_r+0x2be>
   8be3c:	2001      	movs	r0, #1
   8be3e:	f04f 0900 	mov.w	r9, #0
   8be42:	e6bd      	b.n	8bbc0 <_malloc_r+0x280>
   8be44:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8be48:	d805      	bhi.n	8be56 <_malloc_r+0x516>
   8be4a:	0bda      	lsrs	r2, r3, #15
   8be4c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8be50:	00c9      	lsls	r1, r1, #3
   8be52:	3277      	adds	r2, #119	; 0x77
   8be54:	e720      	b.n	8bc98 <_malloc_r+0x358>
   8be56:	f240 5154 	movw	r1, #1364	; 0x554
   8be5a:	428a      	cmp	r2, r1
   8be5c:	d805      	bhi.n	8be6a <_malloc_r+0x52a>
   8be5e:	0c9a      	lsrs	r2, r3, #18
   8be60:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8be64:	00c9      	lsls	r1, r1, #3
   8be66:	327c      	adds	r2, #124	; 0x7c
   8be68:	e716      	b.n	8bc98 <_malloc_r+0x358>
   8be6a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8be6e:	227e      	movs	r2, #126	; 0x7e
   8be70:	e712      	b.n	8bc98 <_malloc_r+0x358>
   8be72:	687b      	ldr	r3, [r7, #4]
   8be74:	e780      	b.n	8bd78 <_malloc_r+0x438>
   8be76:	08f0      	lsrs	r0, r6, #3
   8be78:	f106 0308 	add.w	r3, r6, #8
   8be7c:	e60e      	b.n	8ba9c <_malloc_r+0x15c>
   8be7e:	bf00      	nop
   8be80:	200023b4 	.word	0x200023b4

0008be84 <__ascii_mbtowc>:
   8be84:	b082      	sub	sp, #8
   8be86:	b149      	cbz	r1, 8be9c <__ascii_mbtowc+0x18>
   8be88:	b15a      	cbz	r2, 8bea2 <__ascii_mbtowc+0x1e>
   8be8a:	b16b      	cbz	r3, 8bea8 <__ascii_mbtowc+0x24>
   8be8c:	7813      	ldrb	r3, [r2, #0]
   8be8e:	600b      	str	r3, [r1, #0]
   8be90:	7812      	ldrb	r2, [r2, #0]
   8be92:	1c10      	adds	r0, r2, #0
   8be94:	bf18      	it	ne
   8be96:	2001      	movne	r0, #1
   8be98:	b002      	add	sp, #8
   8be9a:	4770      	bx	lr
   8be9c:	a901      	add	r1, sp, #4
   8be9e:	2a00      	cmp	r2, #0
   8bea0:	d1f3      	bne.n	8be8a <__ascii_mbtowc+0x6>
   8bea2:	4610      	mov	r0, r2
   8bea4:	b002      	add	sp, #8
   8bea6:	4770      	bx	lr
   8bea8:	f06f 0001 	mvn.w	r0, #1
   8beac:	e7f4      	b.n	8be98 <__ascii_mbtowc+0x14>
   8beae:	bf00      	nop

0008beb0 <memchr>:
   8beb0:	0783      	lsls	r3, r0, #30
   8beb2:	b470      	push	{r4, r5, r6}
   8beb4:	b2cd      	uxtb	r5, r1
   8beb6:	d03d      	beq.n	8bf34 <memchr+0x84>
   8beb8:	1e54      	subs	r4, r2, #1
   8beba:	b30a      	cbz	r2, 8bf00 <memchr+0x50>
   8bebc:	7803      	ldrb	r3, [r0, #0]
   8bebe:	42ab      	cmp	r3, r5
   8bec0:	d01f      	beq.n	8bf02 <memchr+0x52>
   8bec2:	1c43      	adds	r3, r0, #1
   8bec4:	e005      	b.n	8bed2 <memchr+0x22>
   8bec6:	f114 34ff 	adds.w	r4, r4, #4294967295
   8beca:	d319      	bcc.n	8bf00 <memchr+0x50>
   8becc:	7802      	ldrb	r2, [r0, #0]
   8bece:	42aa      	cmp	r2, r5
   8bed0:	d017      	beq.n	8bf02 <memchr+0x52>
   8bed2:	f013 0f03 	tst.w	r3, #3
   8bed6:	4618      	mov	r0, r3
   8bed8:	f103 0301 	add.w	r3, r3, #1
   8bedc:	d1f3      	bne.n	8bec6 <memchr+0x16>
   8bede:	2c03      	cmp	r4, #3
   8bee0:	d811      	bhi.n	8bf06 <memchr+0x56>
   8bee2:	b34c      	cbz	r4, 8bf38 <memchr+0x88>
   8bee4:	7803      	ldrb	r3, [r0, #0]
   8bee6:	42ab      	cmp	r3, r5
   8bee8:	d00b      	beq.n	8bf02 <memchr+0x52>
   8beea:	4404      	add	r4, r0
   8beec:	1c43      	adds	r3, r0, #1
   8beee:	e002      	b.n	8bef6 <memchr+0x46>
   8bef0:	7802      	ldrb	r2, [r0, #0]
   8bef2:	42aa      	cmp	r2, r5
   8bef4:	d005      	beq.n	8bf02 <memchr+0x52>
   8bef6:	429c      	cmp	r4, r3
   8bef8:	4618      	mov	r0, r3
   8befa:	f103 0301 	add.w	r3, r3, #1
   8befe:	d1f7      	bne.n	8bef0 <memchr+0x40>
   8bf00:	2000      	movs	r0, #0
   8bf02:	bc70      	pop	{r4, r5, r6}
   8bf04:	4770      	bx	lr
   8bf06:	0209      	lsls	r1, r1, #8
   8bf08:	b289      	uxth	r1, r1
   8bf0a:	4329      	orrs	r1, r5
   8bf0c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   8bf10:	6803      	ldr	r3, [r0, #0]
   8bf12:	4606      	mov	r6, r0
   8bf14:	404b      	eors	r3, r1
   8bf16:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8bf1a:	ea22 0303 	bic.w	r3, r2, r3
   8bf1e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8bf22:	f100 0004 	add.w	r0, r0, #4
   8bf26:	d103      	bne.n	8bf30 <memchr+0x80>
   8bf28:	3c04      	subs	r4, #4
   8bf2a:	2c03      	cmp	r4, #3
   8bf2c:	d8f0      	bhi.n	8bf10 <memchr+0x60>
   8bf2e:	e7d8      	b.n	8bee2 <memchr+0x32>
   8bf30:	4630      	mov	r0, r6
   8bf32:	e7d7      	b.n	8bee4 <memchr+0x34>
   8bf34:	4614      	mov	r4, r2
   8bf36:	e7d2      	b.n	8bede <memchr+0x2e>
   8bf38:	4620      	mov	r0, r4
   8bf3a:	e7e2      	b.n	8bf02 <memchr+0x52>

0008bf3c <memmove>:
   8bf3c:	4288      	cmp	r0, r1
   8bf3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   8bf40:	d90d      	bls.n	8bf5e <memmove+0x22>
   8bf42:	188b      	adds	r3, r1, r2
   8bf44:	4298      	cmp	r0, r3
   8bf46:	d20a      	bcs.n	8bf5e <memmove+0x22>
   8bf48:	1884      	adds	r4, r0, r2
   8bf4a:	2a00      	cmp	r2, #0
   8bf4c:	d051      	beq.n	8bff2 <memmove+0xb6>
   8bf4e:	4622      	mov	r2, r4
   8bf50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8bf54:	4299      	cmp	r1, r3
   8bf56:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8bf5a:	d1f9      	bne.n	8bf50 <memmove+0x14>
   8bf5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8bf5e:	2a0f      	cmp	r2, #15
   8bf60:	d948      	bls.n	8bff4 <memmove+0xb8>
   8bf62:	ea41 0300 	orr.w	r3, r1, r0
   8bf66:	079b      	lsls	r3, r3, #30
   8bf68:	d146      	bne.n	8bff8 <memmove+0xbc>
   8bf6a:	4615      	mov	r5, r2
   8bf6c:	f100 0410 	add.w	r4, r0, #16
   8bf70:	f101 0310 	add.w	r3, r1, #16
   8bf74:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8bf78:	3d10      	subs	r5, #16
   8bf7a:	f844 6c10 	str.w	r6, [r4, #-16]
   8bf7e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8bf82:	2d0f      	cmp	r5, #15
   8bf84:	f844 6c0c 	str.w	r6, [r4, #-12]
   8bf88:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8bf8c:	f104 0410 	add.w	r4, r4, #16
   8bf90:	f844 6c18 	str.w	r6, [r4, #-24]
   8bf94:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8bf98:	f103 0310 	add.w	r3, r3, #16
   8bf9c:	f844 6c14 	str.w	r6, [r4, #-20]
   8bfa0:	d8e8      	bhi.n	8bf74 <memmove+0x38>
   8bfa2:	f1a2 0310 	sub.w	r3, r2, #16
   8bfa6:	f023 030f 	bic.w	r3, r3, #15
   8bfaa:	f002 0e0f 	and.w	lr, r2, #15
   8bfae:	3310      	adds	r3, #16
   8bfb0:	f1be 0f03 	cmp.w	lr, #3
   8bfb4:	4419      	add	r1, r3
   8bfb6:	4403      	add	r3, r0
   8bfb8:	d921      	bls.n	8bffe <memmove+0xc2>
   8bfba:	460e      	mov	r6, r1
   8bfbc:	4674      	mov	r4, lr
   8bfbe:	1f1d      	subs	r5, r3, #4
   8bfc0:	f856 7b04 	ldr.w	r7, [r6], #4
   8bfc4:	3c04      	subs	r4, #4
   8bfc6:	2c03      	cmp	r4, #3
   8bfc8:	f845 7f04 	str.w	r7, [r5, #4]!
   8bfcc:	d8f8      	bhi.n	8bfc0 <memmove+0x84>
   8bfce:	f1ae 0404 	sub.w	r4, lr, #4
   8bfd2:	f024 0403 	bic.w	r4, r4, #3
   8bfd6:	3404      	adds	r4, #4
   8bfd8:	4421      	add	r1, r4
   8bfda:	4423      	add	r3, r4
   8bfdc:	f002 0203 	and.w	r2, r2, #3
   8bfe0:	b162      	cbz	r2, 8bffc <memmove+0xc0>
   8bfe2:	3b01      	subs	r3, #1
   8bfe4:	440a      	add	r2, r1
   8bfe6:	f811 4b01 	ldrb.w	r4, [r1], #1
   8bfea:	428a      	cmp	r2, r1
   8bfec:	f803 4f01 	strb.w	r4, [r3, #1]!
   8bff0:	d1f9      	bne.n	8bfe6 <memmove+0xaa>
   8bff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8bff4:	4603      	mov	r3, r0
   8bff6:	e7f3      	b.n	8bfe0 <memmove+0xa4>
   8bff8:	4603      	mov	r3, r0
   8bffa:	e7f2      	b.n	8bfe2 <memmove+0xa6>
   8bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8bffe:	4672      	mov	r2, lr
   8c000:	e7ee      	b.n	8bfe0 <memmove+0xa4>
   8c002:	bf00      	nop

0008c004 <__malloc_lock>:
   8c004:	4801      	ldr	r0, [pc, #4]	; (8c00c <__malloc_lock+0x8>)
   8c006:	f7ff bc17 	b.w	8b838 <__retarget_lock_acquire_recursive>
   8c00a:	bf00      	nop
   8c00c:	20002e14 	.word	0x20002e14

0008c010 <__malloc_unlock>:
   8c010:	4801      	ldr	r0, [pc, #4]	; (8c018 <__malloc_unlock+0x8>)
   8c012:	f7ff bc13 	b.w	8b83c <__retarget_lock_release_recursive>
   8c016:	bf00      	nop
   8c018:	20002e14 	.word	0x20002e14

0008c01c <_Balloc>:
   8c01c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c01e:	b570      	push	{r4, r5, r6, lr}
   8c020:	4605      	mov	r5, r0
   8c022:	460c      	mov	r4, r1
   8c024:	b14b      	cbz	r3, 8c03a <_Balloc+0x1e>
   8c026:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8c02a:	b180      	cbz	r0, 8c04e <_Balloc+0x32>
   8c02c:	6802      	ldr	r2, [r0, #0]
   8c02e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8c032:	2300      	movs	r3, #0
   8c034:	6103      	str	r3, [r0, #16]
   8c036:	60c3      	str	r3, [r0, #12]
   8c038:	bd70      	pop	{r4, r5, r6, pc}
   8c03a:	2221      	movs	r2, #33	; 0x21
   8c03c:	2104      	movs	r1, #4
   8c03e:	f000 fea7 	bl	8cd90 <_calloc_r>
   8c042:	64e8      	str	r0, [r5, #76]	; 0x4c
   8c044:	4603      	mov	r3, r0
   8c046:	2800      	cmp	r0, #0
   8c048:	d1ed      	bne.n	8c026 <_Balloc+0xa>
   8c04a:	2000      	movs	r0, #0
   8c04c:	bd70      	pop	{r4, r5, r6, pc}
   8c04e:	2101      	movs	r1, #1
   8c050:	fa01 f604 	lsl.w	r6, r1, r4
   8c054:	1d72      	adds	r2, r6, #5
   8c056:	4628      	mov	r0, r5
   8c058:	0092      	lsls	r2, r2, #2
   8c05a:	f000 fe99 	bl	8cd90 <_calloc_r>
   8c05e:	2800      	cmp	r0, #0
   8c060:	d0f3      	beq.n	8c04a <_Balloc+0x2e>
   8c062:	6044      	str	r4, [r0, #4]
   8c064:	6086      	str	r6, [r0, #8]
   8c066:	e7e4      	b.n	8c032 <_Balloc+0x16>

0008c068 <_Bfree>:
   8c068:	b131      	cbz	r1, 8c078 <_Bfree+0x10>
   8c06a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c06c:	684a      	ldr	r2, [r1, #4]
   8c06e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8c072:	6008      	str	r0, [r1, #0]
   8c074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8c078:	4770      	bx	lr
   8c07a:	bf00      	nop

0008c07c <__multadd>:
   8c07c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c07e:	460c      	mov	r4, r1
   8c080:	4605      	mov	r5, r0
   8c082:	f04f 0e00 	mov.w	lr, #0
   8c086:	690e      	ldr	r6, [r1, #16]
   8c088:	b083      	sub	sp, #12
   8c08a:	f101 0714 	add.w	r7, r1, #20
   8c08e:	6838      	ldr	r0, [r7, #0]
   8c090:	f10e 0e01 	add.w	lr, lr, #1
   8c094:	b281      	uxth	r1, r0
   8c096:	fb02 3301 	mla	r3, r2, r1, r3
   8c09a:	0c01      	lsrs	r1, r0, #16
   8c09c:	0c18      	lsrs	r0, r3, #16
   8c09e:	fb02 0101 	mla	r1, r2, r1, r0
   8c0a2:	b29b      	uxth	r3, r3
   8c0a4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8c0a8:	4576      	cmp	r6, lr
   8c0aa:	f847 3b04 	str.w	r3, [r7], #4
   8c0ae:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8c0b2:	dcec      	bgt.n	8c08e <__multadd+0x12>
   8c0b4:	b13b      	cbz	r3, 8c0c6 <__multadd+0x4a>
   8c0b6:	68a2      	ldr	r2, [r4, #8]
   8c0b8:	4296      	cmp	r6, r2
   8c0ba:	da07      	bge.n	8c0cc <__multadd+0x50>
   8c0bc:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   8c0c0:	3601      	adds	r6, #1
   8c0c2:	6153      	str	r3, [r2, #20]
   8c0c4:	6126      	str	r6, [r4, #16]
   8c0c6:	4620      	mov	r0, r4
   8c0c8:	b003      	add	sp, #12
   8c0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c0cc:	6861      	ldr	r1, [r4, #4]
   8c0ce:	4628      	mov	r0, r5
   8c0d0:	3101      	adds	r1, #1
   8c0d2:	9301      	str	r3, [sp, #4]
   8c0d4:	f7ff ffa2 	bl	8c01c <_Balloc>
   8c0d8:	4607      	mov	r7, r0
   8c0da:	6922      	ldr	r2, [r4, #16]
   8c0dc:	f104 010c 	add.w	r1, r4, #12
   8c0e0:	3202      	adds	r2, #2
   8c0e2:	0092      	lsls	r2, r2, #2
   8c0e4:	300c      	adds	r0, #12
   8c0e6:	f7fb fbb9 	bl	8785c <memcpy>
   8c0ea:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8c0ec:	6861      	ldr	r1, [r4, #4]
   8c0ee:	9b01      	ldr	r3, [sp, #4]
   8c0f0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8c0f4:	6020      	str	r0, [r4, #0]
   8c0f6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8c0fa:	463c      	mov	r4, r7
   8c0fc:	e7de      	b.n	8c0bc <__multadd+0x40>
   8c0fe:	bf00      	nop

0008c100 <__hi0bits>:
   8c100:	0c02      	lsrs	r2, r0, #16
   8c102:	0412      	lsls	r2, r2, #16
   8c104:	4603      	mov	r3, r0
   8c106:	b9b2      	cbnz	r2, 8c136 <__hi0bits+0x36>
   8c108:	0403      	lsls	r3, r0, #16
   8c10a:	2010      	movs	r0, #16
   8c10c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8c110:	bf04      	itt	eq
   8c112:	021b      	lsleq	r3, r3, #8
   8c114:	3008      	addeq	r0, #8
   8c116:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8c11a:	bf04      	itt	eq
   8c11c:	011b      	lsleq	r3, r3, #4
   8c11e:	3004      	addeq	r0, #4
   8c120:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8c124:	bf04      	itt	eq
   8c126:	009b      	lsleq	r3, r3, #2
   8c128:	3002      	addeq	r0, #2
   8c12a:	2b00      	cmp	r3, #0
   8c12c:	db02      	blt.n	8c134 <__hi0bits+0x34>
   8c12e:	005b      	lsls	r3, r3, #1
   8c130:	d403      	bmi.n	8c13a <__hi0bits+0x3a>
   8c132:	2020      	movs	r0, #32
   8c134:	4770      	bx	lr
   8c136:	2000      	movs	r0, #0
   8c138:	e7e8      	b.n	8c10c <__hi0bits+0xc>
   8c13a:	3001      	adds	r0, #1
   8c13c:	4770      	bx	lr
   8c13e:	bf00      	nop

0008c140 <__lo0bits>:
   8c140:	6803      	ldr	r3, [r0, #0]
   8c142:	4601      	mov	r1, r0
   8c144:	f013 0207 	ands.w	r2, r3, #7
   8c148:	d007      	beq.n	8c15a <__lo0bits+0x1a>
   8c14a:	07da      	lsls	r2, r3, #31
   8c14c:	d421      	bmi.n	8c192 <__lo0bits+0x52>
   8c14e:	0798      	lsls	r0, r3, #30
   8c150:	d421      	bmi.n	8c196 <__lo0bits+0x56>
   8c152:	089b      	lsrs	r3, r3, #2
   8c154:	600b      	str	r3, [r1, #0]
   8c156:	2002      	movs	r0, #2
   8c158:	4770      	bx	lr
   8c15a:	b298      	uxth	r0, r3
   8c15c:	b198      	cbz	r0, 8c186 <__lo0bits+0x46>
   8c15e:	4610      	mov	r0, r2
   8c160:	f013 0fff 	tst.w	r3, #255	; 0xff
   8c164:	bf04      	itt	eq
   8c166:	0a1b      	lsreq	r3, r3, #8
   8c168:	3008      	addeq	r0, #8
   8c16a:	071a      	lsls	r2, r3, #28
   8c16c:	bf04      	itt	eq
   8c16e:	091b      	lsreq	r3, r3, #4
   8c170:	3004      	addeq	r0, #4
   8c172:	079a      	lsls	r2, r3, #30
   8c174:	bf04      	itt	eq
   8c176:	089b      	lsreq	r3, r3, #2
   8c178:	3002      	addeq	r0, #2
   8c17a:	07da      	lsls	r2, r3, #31
   8c17c:	d407      	bmi.n	8c18e <__lo0bits+0x4e>
   8c17e:	085b      	lsrs	r3, r3, #1
   8c180:	d104      	bne.n	8c18c <__lo0bits+0x4c>
   8c182:	2020      	movs	r0, #32
   8c184:	4770      	bx	lr
   8c186:	0c1b      	lsrs	r3, r3, #16
   8c188:	2010      	movs	r0, #16
   8c18a:	e7e9      	b.n	8c160 <__lo0bits+0x20>
   8c18c:	3001      	adds	r0, #1
   8c18e:	600b      	str	r3, [r1, #0]
   8c190:	4770      	bx	lr
   8c192:	2000      	movs	r0, #0
   8c194:	4770      	bx	lr
   8c196:	085b      	lsrs	r3, r3, #1
   8c198:	600b      	str	r3, [r1, #0]
   8c19a:	2001      	movs	r0, #1
   8c19c:	4770      	bx	lr
   8c19e:	bf00      	nop

0008c1a0 <__i2b>:
   8c1a0:	b510      	push	{r4, lr}
   8c1a2:	460c      	mov	r4, r1
   8c1a4:	2101      	movs	r1, #1
   8c1a6:	f7ff ff39 	bl	8c01c <_Balloc>
   8c1aa:	2201      	movs	r2, #1
   8c1ac:	6144      	str	r4, [r0, #20]
   8c1ae:	6102      	str	r2, [r0, #16]
   8c1b0:	bd10      	pop	{r4, pc}
   8c1b2:	bf00      	nop

0008c1b4 <__multiply>:
   8c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c1b8:	690c      	ldr	r4, [r1, #16]
   8c1ba:	6915      	ldr	r5, [r2, #16]
   8c1bc:	b083      	sub	sp, #12
   8c1be:	42ac      	cmp	r4, r5
   8c1c0:	468b      	mov	fp, r1
   8c1c2:	4616      	mov	r6, r2
   8c1c4:	da04      	bge.n	8c1d0 <__multiply+0x1c>
   8c1c6:	4622      	mov	r2, r4
   8c1c8:	46b3      	mov	fp, r6
   8c1ca:	462c      	mov	r4, r5
   8c1cc:	460e      	mov	r6, r1
   8c1ce:	4615      	mov	r5, r2
   8c1d0:	f8db 3008 	ldr.w	r3, [fp, #8]
   8c1d4:	eb04 0805 	add.w	r8, r4, r5
   8c1d8:	f8db 1004 	ldr.w	r1, [fp, #4]
   8c1dc:	4598      	cmp	r8, r3
   8c1de:	bfc8      	it	gt
   8c1e0:	3101      	addgt	r1, #1
   8c1e2:	f7ff ff1b 	bl	8c01c <_Balloc>
   8c1e6:	f100 0914 	add.w	r9, r0, #20
   8c1ea:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8c1ee:	45d1      	cmp	r9, sl
   8c1f0:	9000      	str	r0, [sp, #0]
   8c1f2:	d205      	bcs.n	8c200 <__multiply+0x4c>
   8c1f4:	464b      	mov	r3, r9
   8c1f6:	2100      	movs	r1, #0
   8c1f8:	f843 1b04 	str.w	r1, [r3], #4
   8c1fc:	459a      	cmp	sl, r3
   8c1fe:	d8fb      	bhi.n	8c1f8 <__multiply+0x44>
   8c200:	f106 0c14 	add.w	ip, r6, #20
   8c204:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8c208:	f10b 0b14 	add.w	fp, fp, #20
   8c20c:	459c      	cmp	ip, r3
   8c20e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8c212:	d24b      	bcs.n	8c2ac <__multiply+0xf8>
   8c214:	f8cd a004 	str.w	sl, [sp, #4]
   8c218:	469a      	mov	sl, r3
   8c21a:	f8dc 5000 	ldr.w	r5, [ip]
   8c21e:	b2af      	uxth	r7, r5
   8c220:	b1e7      	cbz	r7, 8c25c <__multiply+0xa8>
   8c222:	464d      	mov	r5, r9
   8c224:	465e      	mov	r6, fp
   8c226:	2100      	movs	r1, #0
   8c228:	f856 2b04 	ldr.w	r2, [r6], #4
   8c22c:	6828      	ldr	r0, [r5, #0]
   8c22e:	b293      	uxth	r3, r2
   8c230:	b284      	uxth	r4, r0
   8c232:	0c12      	lsrs	r2, r2, #16
   8c234:	fb07 4303 	mla	r3, r7, r3, r4
   8c238:	0c00      	lsrs	r0, r0, #16
   8c23a:	fb07 0202 	mla	r2, r7, r2, r0
   8c23e:	440b      	add	r3, r1
   8c240:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8c244:	b29b      	uxth	r3, r3
   8c246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8c24a:	45b6      	cmp	lr, r6
   8c24c:	f845 3b04 	str.w	r3, [r5], #4
   8c250:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8c254:	d8e8      	bhi.n	8c228 <__multiply+0x74>
   8c256:	6029      	str	r1, [r5, #0]
   8c258:	f8dc 5000 	ldr.w	r5, [ip]
   8c25c:	0c2d      	lsrs	r5, r5, #16
   8c25e:	d01d      	beq.n	8c29c <__multiply+0xe8>
   8c260:	f8d9 3000 	ldr.w	r3, [r9]
   8c264:	4648      	mov	r0, r9
   8c266:	461c      	mov	r4, r3
   8c268:	4659      	mov	r1, fp
   8c26a:	2200      	movs	r2, #0
   8c26c:	880e      	ldrh	r6, [r1, #0]
   8c26e:	0c24      	lsrs	r4, r4, #16
   8c270:	fb05 4406 	mla	r4, r5, r6, r4
   8c274:	b29b      	uxth	r3, r3
   8c276:	4422      	add	r2, r4
   8c278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8c27c:	f840 3b04 	str.w	r3, [r0], #4
   8c280:	f851 3b04 	ldr.w	r3, [r1], #4
   8c284:	6804      	ldr	r4, [r0, #0]
   8c286:	0c1b      	lsrs	r3, r3, #16
   8c288:	b2a6      	uxth	r6, r4
   8c28a:	fb05 6303 	mla	r3, r5, r3, r6
   8c28e:	458e      	cmp	lr, r1
   8c290:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8c294:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8c298:	d8e8      	bhi.n	8c26c <__multiply+0xb8>
   8c29a:	6003      	str	r3, [r0, #0]
   8c29c:	f10c 0c04 	add.w	ip, ip, #4
   8c2a0:	45e2      	cmp	sl, ip
   8c2a2:	f109 0904 	add.w	r9, r9, #4
   8c2a6:	d8b8      	bhi.n	8c21a <__multiply+0x66>
   8c2a8:	f8dd a004 	ldr.w	sl, [sp, #4]
   8c2ac:	f1b8 0f00 	cmp.w	r8, #0
   8c2b0:	dd0b      	ble.n	8c2ca <__multiply+0x116>
   8c2b2:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8c2b6:	f1aa 0a04 	sub.w	sl, sl, #4
   8c2ba:	b11b      	cbz	r3, 8c2c4 <__multiply+0x110>
   8c2bc:	e005      	b.n	8c2ca <__multiply+0x116>
   8c2be:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8c2c2:	b913      	cbnz	r3, 8c2ca <__multiply+0x116>
   8c2c4:	f1b8 0801 	subs.w	r8, r8, #1
   8c2c8:	d1f9      	bne.n	8c2be <__multiply+0x10a>
   8c2ca:	9800      	ldr	r0, [sp, #0]
   8c2cc:	f8c0 8010 	str.w	r8, [r0, #16]
   8c2d0:	b003      	add	sp, #12
   8c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c2d6:	bf00      	nop

0008c2d8 <__pow5mult>:
   8c2d8:	f012 0303 	ands.w	r3, r2, #3
   8c2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c2e0:	4614      	mov	r4, r2
   8c2e2:	4607      	mov	r7, r0
   8c2e4:	d12e      	bne.n	8c344 <__pow5mult+0x6c>
   8c2e6:	460d      	mov	r5, r1
   8c2e8:	10a4      	asrs	r4, r4, #2
   8c2ea:	d01c      	beq.n	8c326 <__pow5mult+0x4e>
   8c2ec:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8c2ee:	b396      	cbz	r6, 8c356 <__pow5mult+0x7e>
   8c2f0:	07e3      	lsls	r3, r4, #31
   8c2f2:	f04f 0800 	mov.w	r8, #0
   8c2f6:	d406      	bmi.n	8c306 <__pow5mult+0x2e>
   8c2f8:	1064      	asrs	r4, r4, #1
   8c2fa:	d014      	beq.n	8c326 <__pow5mult+0x4e>
   8c2fc:	6830      	ldr	r0, [r6, #0]
   8c2fe:	b1a8      	cbz	r0, 8c32c <__pow5mult+0x54>
   8c300:	4606      	mov	r6, r0
   8c302:	07e3      	lsls	r3, r4, #31
   8c304:	d5f8      	bpl.n	8c2f8 <__pow5mult+0x20>
   8c306:	4632      	mov	r2, r6
   8c308:	4629      	mov	r1, r5
   8c30a:	4638      	mov	r0, r7
   8c30c:	f7ff ff52 	bl	8c1b4 <__multiply>
   8c310:	b1b5      	cbz	r5, 8c340 <__pow5mult+0x68>
   8c312:	686a      	ldr	r2, [r5, #4]
   8c314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c316:	1064      	asrs	r4, r4, #1
   8c318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c31c:	6029      	str	r1, [r5, #0]
   8c31e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8c322:	4605      	mov	r5, r0
   8c324:	d1ea      	bne.n	8c2fc <__pow5mult+0x24>
   8c326:	4628      	mov	r0, r5
   8c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c32c:	4632      	mov	r2, r6
   8c32e:	4631      	mov	r1, r6
   8c330:	4638      	mov	r0, r7
   8c332:	f7ff ff3f 	bl	8c1b4 <__multiply>
   8c336:	6030      	str	r0, [r6, #0]
   8c338:	f8c0 8000 	str.w	r8, [r0]
   8c33c:	4606      	mov	r6, r0
   8c33e:	e7e0      	b.n	8c302 <__pow5mult+0x2a>
   8c340:	4605      	mov	r5, r0
   8c342:	e7d9      	b.n	8c2f8 <__pow5mult+0x20>
   8c344:	4a0b      	ldr	r2, [pc, #44]	; (8c374 <__pow5mult+0x9c>)
   8c346:	3b01      	subs	r3, #1
   8c348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8c34c:	2300      	movs	r3, #0
   8c34e:	f7ff fe95 	bl	8c07c <__multadd>
   8c352:	4605      	mov	r5, r0
   8c354:	e7c8      	b.n	8c2e8 <__pow5mult+0x10>
   8c356:	2101      	movs	r1, #1
   8c358:	4638      	mov	r0, r7
   8c35a:	f7ff fe5f 	bl	8c01c <_Balloc>
   8c35e:	f240 2171 	movw	r1, #625	; 0x271
   8c362:	2201      	movs	r2, #1
   8c364:	2300      	movs	r3, #0
   8c366:	6141      	str	r1, [r0, #20]
   8c368:	6102      	str	r2, [r0, #16]
   8c36a:	4606      	mov	r6, r0
   8c36c:	64b8      	str	r0, [r7, #72]	; 0x48
   8c36e:	6003      	str	r3, [r0, #0]
   8c370:	e7be      	b.n	8c2f0 <__pow5mult+0x18>
   8c372:	bf00      	nop
   8c374:	0008dca8 	.word	0x0008dca8

0008c378 <__lshift>:
   8c378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8c37c:	690b      	ldr	r3, [r1, #16]
   8c37e:	1154      	asrs	r4, r2, #5
   8c380:	eb04 0803 	add.w	r8, r4, r3
   8c384:	688b      	ldr	r3, [r1, #8]
   8c386:	f108 0501 	add.w	r5, r8, #1
   8c38a:	429d      	cmp	r5, r3
   8c38c:	460e      	mov	r6, r1
   8c38e:	4691      	mov	r9, r2
   8c390:	4607      	mov	r7, r0
   8c392:	6849      	ldr	r1, [r1, #4]
   8c394:	dd04      	ble.n	8c3a0 <__lshift+0x28>
   8c396:	005b      	lsls	r3, r3, #1
   8c398:	429d      	cmp	r5, r3
   8c39a:	f101 0101 	add.w	r1, r1, #1
   8c39e:	dcfa      	bgt.n	8c396 <__lshift+0x1e>
   8c3a0:	4638      	mov	r0, r7
   8c3a2:	f7ff fe3b 	bl	8c01c <_Balloc>
   8c3a6:	2c00      	cmp	r4, #0
   8c3a8:	f100 0314 	add.w	r3, r0, #20
   8c3ac:	dd06      	ble.n	8c3bc <__lshift+0x44>
   8c3ae:	2100      	movs	r1, #0
   8c3b0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   8c3b4:	f843 1b04 	str.w	r1, [r3], #4
   8c3b8:	429a      	cmp	r2, r3
   8c3ba:	d1fb      	bne.n	8c3b4 <__lshift+0x3c>
   8c3bc:	6934      	ldr	r4, [r6, #16]
   8c3be:	f106 0114 	add.w	r1, r6, #20
   8c3c2:	f019 091f 	ands.w	r9, r9, #31
   8c3c6:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8c3ca:	d01d      	beq.n	8c408 <__lshift+0x90>
   8c3cc:	2200      	movs	r2, #0
   8c3ce:	f1c9 0c20 	rsb	ip, r9, #32
   8c3d2:	680c      	ldr	r4, [r1, #0]
   8c3d4:	fa04 f409 	lsl.w	r4, r4, r9
   8c3d8:	4314      	orrs	r4, r2
   8c3da:	f843 4b04 	str.w	r4, [r3], #4
   8c3de:	f851 2b04 	ldr.w	r2, [r1], #4
   8c3e2:	458e      	cmp	lr, r1
   8c3e4:	fa22 f20c 	lsr.w	r2, r2, ip
   8c3e8:	d8f3      	bhi.n	8c3d2 <__lshift+0x5a>
   8c3ea:	601a      	str	r2, [r3, #0]
   8c3ec:	b10a      	cbz	r2, 8c3f2 <__lshift+0x7a>
   8c3ee:	f108 0502 	add.w	r5, r8, #2
   8c3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c3f4:	6872      	ldr	r2, [r6, #4]
   8c3f6:	3d01      	subs	r5, #1
   8c3f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c3fc:	6105      	str	r5, [r0, #16]
   8c3fe:	6031      	str	r1, [r6, #0]
   8c400:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8c404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c408:	3b04      	subs	r3, #4
   8c40a:	f851 2b04 	ldr.w	r2, [r1], #4
   8c40e:	458e      	cmp	lr, r1
   8c410:	f843 2f04 	str.w	r2, [r3, #4]!
   8c414:	d8f9      	bhi.n	8c40a <__lshift+0x92>
   8c416:	e7ec      	b.n	8c3f2 <__lshift+0x7a>

0008c418 <__mcmp>:
   8c418:	b430      	push	{r4, r5}
   8c41a:	690b      	ldr	r3, [r1, #16]
   8c41c:	4605      	mov	r5, r0
   8c41e:	6900      	ldr	r0, [r0, #16]
   8c420:	1ac0      	subs	r0, r0, r3
   8c422:	d10f      	bne.n	8c444 <__mcmp+0x2c>
   8c424:	009b      	lsls	r3, r3, #2
   8c426:	3514      	adds	r5, #20
   8c428:	3114      	adds	r1, #20
   8c42a:	4419      	add	r1, r3
   8c42c:	442b      	add	r3, r5
   8c42e:	e001      	b.n	8c434 <__mcmp+0x1c>
   8c430:	429d      	cmp	r5, r3
   8c432:	d207      	bcs.n	8c444 <__mcmp+0x2c>
   8c434:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8c438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8c43c:	4294      	cmp	r4, r2
   8c43e:	d0f7      	beq.n	8c430 <__mcmp+0x18>
   8c440:	d302      	bcc.n	8c448 <__mcmp+0x30>
   8c442:	2001      	movs	r0, #1
   8c444:	bc30      	pop	{r4, r5}
   8c446:	4770      	bx	lr
   8c448:	f04f 30ff 	mov.w	r0, #4294967295
   8c44c:	e7fa      	b.n	8c444 <__mcmp+0x2c>
   8c44e:	bf00      	nop

0008c450 <__mdiff>:
   8c450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c454:	690c      	ldr	r4, [r1, #16]
   8c456:	4689      	mov	r9, r1
   8c458:	6911      	ldr	r1, [r2, #16]
   8c45a:	4692      	mov	sl, r2
   8c45c:	1a64      	subs	r4, r4, r1
   8c45e:	2c00      	cmp	r4, #0
   8c460:	d117      	bne.n	8c492 <__mdiff+0x42>
   8c462:	0089      	lsls	r1, r1, #2
   8c464:	f109 0714 	add.w	r7, r9, #20
   8c468:	f102 0614 	add.w	r6, r2, #20
   8c46c:	187b      	adds	r3, r7, r1
   8c46e:	4431      	add	r1, r6
   8c470:	e001      	b.n	8c476 <__mdiff+0x26>
   8c472:	429f      	cmp	r7, r3
   8c474:	d265      	bcs.n	8c542 <__mdiff+0xf2>
   8c476:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8c47a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8c47e:	4295      	cmp	r5, r2
   8c480:	d0f7      	beq.n	8c472 <__mdiff+0x22>
   8c482:	d267      	bcs.n	8c554 <__mdiff+0x104>
   8c484:	464b      	mov	r3, r9
   8c486:	46bb      	mov	fp, r7
   8c488:	46d1      	mov	r9, sl
   8c48a:	4637      	mov	r7, r6
   8c48c:	469a      	mov	sl, r3
   8c48e:	2401      	movs	r4, #1
   8c490:	e005      	b.n	8c49e <__mdiff+0x4e>
   8c492:	db61      	blt.n	8c558 <__mdiff+0x108>
   8c494:	2400      	movs	r4, #0
   8c496:	f109 0714 	add.w	r7, r9, #20
   8c49a:	f10a 0b14 	add.w	fp, sl, #20
   8c49e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8c4a2:	f7ff fdbb 	bl	8c01c <_Balloc>
   8c4a6:	465d      	mov	r5, fp
   8c4a8:	f04f 0800 	mov.w	r8, #0
   8c4ac:	f8d9 e010 	ldr.w	lr, [r9, #16]
   8c4b0:	f8da 3010 	ldr.w	r3, [sl, #16]
   8c4b4:	463e      	mov	r6, r7
   8c4b6:	60c4      	str	r4, [r0, #12]
   8c4b8:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8c4bc:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   8c4c0:	f100 0414 	add.w	r4, r0, #20
   8c4c4:	f856 9b04 	ldr.w	r9, [r6], #4
   8c4c8:	f855 2b04 	ldr.w	r2, [r5], #4
   8c4cc:	fa1f f389 	uxth.w	r3, r9
   8c4d0:	4443      	add	r3, r8
   8c4d2:	fa1f f882 	uxth.w	r8, r2
   8c4d6:	0c12      	lsrs	r2, r2, #16
   8c4d8:	eba3 0308 	sub.w	r3, r3, r8
   8c4dc:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   8c4e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8c4e4:	b29b      	uxth	r3, r3
   8c4e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8c4ea:	45ac      	cmp	ip, r5
   8c4ec:	f844 3b04 	str.w	r3, [r4], #4
   8c4f0:	ea4f 4822 	mov.w	r8, r2, asr #16
   8c4f4:	d8e6      	bhi.n	8c4c4 <__mdiff+0x74>
   8c4f6:	42b7      	cmp	r7, r6
   8c4f8:	d917      	bls.n	8c52a <__mdiff+0xda>
   8c4fa:	46a4      	mov	ip, r4
   8c4fc:	4635      	mov	r5, r6
   8c4fe:	f855 3b04 	ldr.w	r3, [r5], #4
   8c502:	b299      	uxth	r1, r3
   8c504:	4441      	add	r1, r8
   8c506:	140a      	asrs	r2, r1, #16
   8c508:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8c50c:	b289      	uxth	r1, r1
   8c50e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8c512:	42af      	cmp	r7, r5
   8c514:	f84c 3b04 	str.w	r3, [ip], #4
   8c518:	ea4f 4822 	mov.w	r8, r2, asr #16
   8c51c:	d8ef      	bhi.n	8c4fe <__mdiff+0xae>
   8c51e:	43f6      	mvns	r6, r6
   8c520:	4437      	add	r7, r6
   8c522:	f027 0703 	bic.w	r7, r7, #3
   8c526:	3704      	adds	r7, #4
   8c528:	443c      	add	r4, r7
   8c52a:	3c04      	subs	r4, #4
   8c52c:	b92b      	cbnz	r3, 8c53a <__mdiff+0xea>
   8c52e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8c532:	f10e 3eff 	add.w	lr, lr, #4294967295
   8c536:	2b00      	cmp	r3, #0
   8c538:	d0f9      	beq.n	8c52e <__mdiff+0xde>
   8c53a:	f8c0 e010 	str.w	lr, [r0, #16]
   8c53e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c542:	2100      	movs	r1, #0
   8c544:	f7ff fd6a 	bl	8c01c <_Balloc>
   8c548:	2201      	movs	r2, #1
   8c54a:	2300      	movs	r3, #0
   8c54c:	6102      	str	r2, [r0, #16]
   8c54e:	6143      	str	r3, [r0, #20]
   8c550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c554:	46b3      	mov	fp, r6
   8c556:	e7a2      	b.n	8c49e <__mdiff+0x4e>
   8c558:	464b      	mov	r3, r9
   8c55a:	f109 0b14 	add.w	fp, r9, #20
   8c55e:	f102 0714 	add.w	r7, r2, #20
   8c562:	4691      	mov	r9, r2
   8c564:	2401      	movs	r4, #1
   8c566:	469a      	mov	sl, r3
   8c568:	e799      	b.n	8c49e <__mdiff+0x4e>
   8c56a:	bf00      	nop

0008c56c <__d2b>:
   8c56c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c56e:	2101      	movs	r1, #1
   8c570:	b083      	sub	sp, #12
   8c572:	461c      	mov	r4, r3
   8c574:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8c578:	4616      	mov	r6, r2
   8c57a:	f7ff fd4f 	bl	8c01c <_Balloc>
   8c57e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8c582:	4607      	mov	r7, r0
   8c584:	b10d      	cbz	r5, 8c58a <__d2b+0x1e>
   8c586:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8c58a:	9401      	str	r4, [sp, #4]
   8c58c:	b306      	cbz	r6, 8c5d0 <__d2b+0x64>
   8c58e:	a802      	add	r0, sp, #8
   8c590:	f840 6d08 	str.w	r6, [r0, #-8]!
   8c594:	f7ff fdd4 	bl	8c140 <__lo0bits>
   8c598:	2800      	cmp	r0, #0
   8c59a:	d130      	bne.n	8c5fe <__d2b+0x92>
   8c59c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8c5a0:	617a      	str	r2, [r7, #20]
   8c5a2:	2b00      	cmp	r3, #0
   8c5a4:	bf0c      	ite	eq
   8c5a6:	2101      	moveq	r1, #1
   8c5a8:	2102      	movne	r1, #2
   8c5aa:	61bb      	str	r3, [r7, #24]
   8c5ac:	6139      	str	r1, [r7, #16]
   8c5ae:	b9d5      	cbnz	r5, 8c5e6 <__d2b+0x7a>
   8c5b0:	9a08      	ldr	r2, [sp, #32]
   8c5b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8c5b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8c5ba:	6010      	str	r0, [r2, #0]
   8c5bc:	6918      	ldr	r0, [r3, #16]
   8c5be:	f7ff fd9f 	bl	8c100 <__hi0bits>
   8c5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8c5c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8c5c8:	6018      	str	r0, [r3, #0]
   8c5ca:	4638      	mov	r0, r7
   8c5cc:	b003      	add	sp, #12
   8c5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c5d0:	a801      	add	r0, sp, #4
   8c5d2:	f7ff fdb5 	bl	8c140 <__lo0bits>
   8c5d6:	2201      	movs	r2, #1
   8c5d8:	9b01      	ldr	r3, [sp, #4]
   8c5da:	4611      	mov	r1, r2
   8c5dc:	3020      	adds	r0, #32
   8c5de:	613a      	str	r2, [r7, #16]
   8c5e0:	617b      	str	r3, [r7, #20]
   8c5e2:	2d00      	cmp	r5, #0
   8c5e4:	d0e4      	beq.n	8c5b0 <__d2b+0x44>
   8c5e6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8c5ea:	9a08      	ldr	r2, [sp, #32]
   8c5ec:	4403      	add	r3, r0
   8c5ee:	6013      	str	r3, [r2, #0]
   8c5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8c5f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8c5f6:	6018      	str	r0, [r3, #0]
   8c5f8:	4638      	mov	r0, r7
   8c5fa:	b003      	add	sp, #12
   8c5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c5fe:	9b01      	ldr	r3, [sp, #4]
   8c600:	f1c0 0220 	rsb	r2, r0, #32
   8c604:	9900      	ldr	r1, [sp, #0]
   8c606:	fa03 f202 	lsl.w	r2, r3, r2
   8c60a:	430a      	orrs	r2, r1
   8c60c:	40c3      	lsrs	r3, r0
   8c60e:	9301      	str	r3, [sp, #4]
   8c610:	617a      	str	r2, [r7, #20]
   8c612:	e7c6      	b.n	8c5a2 <__d2b+0x36>

0008c614 <_realloc_r>:
   8c614:	2900      	cmp	r1, #0
   8c616:	f000 8094 	beq.w	8c742 <_realloc_r+0x12e>
   8c61a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c61e:	460c      	mov	r4, r1
   8c620:	4615      	mov	r5, r2
   8c622:	b083      	sub	sp, #12
   8c624:	4680      	mov	r8, r0
   8c626:	f105 060b 	add.w	r6, r5, #11
   8c62a:	f7ff fceb 	bl	8c004 <__malloc_lock>
   8c62e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8c632:	2e16      	cmp	r6, #22
   8c634:	f02e 0703 	bic.w	r7, lr, #3
   8c638:	f1a4 0908 	sub.w	r9, r4, #8
   8c63c:	d83c      	bhi.n	8c6b8 <_realloc_r+0xa4>
   8c63e:	2210      	movs	r2, #16
   8c640:	4616      	mov	r6, r2
   8c642:	42b5      	cmp	r5, r6
   8c644:	d83d      	bhi.n	8c6c2 <_realloc_r+0xae>
   8c646:	4297      	cmp	r7, r2
   8c648:	da43      	bge.n	8c6d2 <_realloc_r+0xbe>
   8c64a:	4bc6      	ldr	r3, [pc, #792]	; (8c964 <_realloc_r+0x350>)
   8c64c:	eb09 0007 	add.w	r0, r9, r7
   8c650:	6899      	ldr	r1, [r3, #8]
   8c652:	4288      	cmp	r0, r1
   8c654:	f000 80c3 	beq.w	8c7de <_realloc_r+0x1ca>
   8c658:	6843      	ldr	r3, [r0, #4]
   8c65a:	f023 0101 	bic.w	r1, r3, #1
   8c65e:	4401      	add	r1, r0
   8c660:	6849      	ldr	r1, [r1, #4]
   8c662:	07c9      	lsls	r1, r1, #31
   8c664:	d54d      	bpl.n	8c702 <_realloc_r+0xee>
   8c666:	f01e 0f01 	tst.w	lr, #1
   8c66a:	f000 809b 	beq.w	8c7a4 <_realloc_r+0x190>
   8c66e:	4629      	mov	r1, r5
   8c670:	4640      	mov	r0, r8
   8c672:	f7ff f965 	bl	8b940 <_malloc_r>
   8c676:	4605      	mov	r5, r0
   8c678:	2800      	cmp	r0, #0
   8c67a:	d03b      	beq.n	8c6f4 <_realloc_r+0xe0>
   8c67c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c680:	f1a0 0208 	sub.w	r2, r0, #8
   8c684:	f023 0301 	bic.w	r3, r3, #1
   8c688:	444b      	add	r3, r9
   8c68a:	429a      	cmp	r2, r3
   8c68c:	f000 812b 	beq.w	8c8e6 <_realloc_r+0x2d2>
   8c690:	1f3a      	subs	r2, r7, #4
   8c692:	2a24      	cmp	r2, #36	; 0x24
   8c694:	f200 8118 	bhi.w	8c8c8 <_realloc_r+0x2b4>
   8c698:	2a13      	cmp	r2, #19
   8c69a:	f200 80eb 	bhi.w	8c874 <_realloc_r+0x260>
   8c69e:	4603      	mov	r3, r0
   8c6a0:	4622      	mov	r2, r4
   8c6a2:	6811      	ldr	r1, [r2, #0]
   8c6a4:	6019      	str	r1, [r3, #0]
   8c6a6:	6851      	ldr	r1, [r2, #4]
   8c6a8:	6059      	str	r1, [r3, #4]
   8c6aa:	6892      	ldr	r2, [r2, #8]
   8c6ac:	609a      	str	r2, [r3, #8]
   8c6ae:	4621      	mov	r1, r4
   8c6b0:	4640      	mov	r0, r8
   8c6b2:	f7fe fe19 	bl	8b2e8 <_free_r>
   8c6b6:	e01d      	b.n	8c6f4 <_realloc_r+0xe0>
   8c6b8:	f026 0607 	bic.w	r6, r6, #7
   8c6bc:	2e00      	cmp	r6, #0
   8c6be:	4632      	mov	r2, r6
   8c6c0:	dabf      	bge.n	8c642 <_realloc_r+0x2e>
   8c6c2:	2500      	movs	r5, #0
   8c6c4:	230c      	movs	r3, #12
   8c6c6:	4628      	mov	r0, r5
   8c6c8:	f8c8 3000 	str.w	r3, [r8]
   8c6cc:	b003      	add	sp, #12
   8c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c6d2:	4625      	mov	r5, r4
   8c6d4:	1bbb      	subs	r3, r7, r6
   8c6d6:	2b0f      	cmp	r3, #15
   8c6d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8c6dc:	d81d      	bhi.n	8c71a <_realloc_r+0x106>
   8c6de:	f002 0201 	and.w	r2, r2, #1
   8c6e2:	433a      	orrs	r2, r7
   8c6e4:	eb09 0107 	add.w	r1, r9, r7
   8c6e8:	f8c9 2004 	str.w	r2, [r9, #4]
   8c6ec:	684b      	ldr	r3, [r1, #4]
   8c6ee:	f043 0301 	orr.w	r3, r3, #1
   8c6f2:	604b      	str	r3, [r1, #4]
   8c6f4:	4640      	mov	r0, r8
   8c6f6:	f7ff fc8b 	bl	8c010 <__malloc_unlock>
   8c6fa:	4628      	mov	r0, r5
   8c6fc:	b003      	add	sp, #12
   8c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c702:	f023 0303 	bic.w	r3, r3, #3
   8c706:	18f9      	adds	r1, r7, r3
   8c708:	4291      	cmp	r1, r2
   8c70a:	db1d      	blt.n	8c748 <_realloc_r+0x134>
   8c70c:	68c3      	ldr	r3, [r0, #12]
   8c70e:	6882      	ldr	r2, [r0, #8]
   8c710:	4625      	mov	r5, r4
   8c712:	60d3      	str	r3, [r2, #12]
   8c714:	460f      	mov	r7, r1
   8c716:	609a      	str	r2, [r3, #8]
   8c718:	e7dc      	b.n	8c6d4 <_realloc_r+0xc0>
   8c71a:	f002 0201 	and.w	r2, r2, #1
   8c71e:	eb09 0106 	add.w	r1, r9, r6
   8c722:	f043 0301 	orr.w	r3, r3, #1
   8c726:	4332      	orrs	r2, r6
   8c728:	f8c9 2004 	str.w	r2, [r9, #4]
   8c72c:	444f      	add	r7, r9
   8c72e:	604b      	str	r3, [r1, #4]
   8c730:	687b      	ldr	r3, [r7, #4]
   8c732:	3108      	adds	r1, #8
   8c734:	f043 0301 	orr.w	r3, r3, #1
   8c738:	607b      	str	r3, [r7, #4]
   8c73a:	4640      	mov	r0, r8
   8c73c:	f7fe fdd4 	bl	8b2e8 <_free_r>
   8c740:	e7d8      	b.n	8c6f4 <_realloc_r+0xe0>
   8c742:	4611      	mov	r1, r2
   8c744:	f7ff b8fc 	b.w	8b940 <_malloc_r>
   8c748:	f01e 0f01 	tst.w	lr, #1
   8c74c:	d18f      	bne.n	8c66e <_realloc_r+0x5a>
   8c74e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c752:	eba9 0a01 	sub.w	sl, r9, r1
   8c756:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c75a:	f021 0103 	bic.w	r1, r1, #3
   8c75e:	440b      	add	r3, r1
   8c760:	443b      	add	r3, r7
   8c762:	4293      	cmp	r3, r2
   8c764:	db26      	blt.n	8c7b4 <_realloc_r+0x1a0>
   8c766:	4655      	mov	r5, sl
   8c768:	68c1      	ldr	r1, [r0, #12]
   8c76a:	6880      	ldr	r0, [r0, #8]
   8c76c:	1f3a      	subs	r2, r7, #4
   8c76e:	60c1      	str	r1, [r0, #12]
   8c770:	6088      	str	r0, [r1, #8]
   8c772:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8c776:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c77a:	2a24      	cmp	r2, #36	; 0x24
   8c77c:	60c1      	str	r1, [r0, #12]
   8c77e:	6088      	str	r0, [r1, #8]
   8c780:	d826      	bhi.n	8c7d0 <_realloc_r+0x1bc>
   8c782:	2a13      	cmp	r2, #19
   8c784:	f240 8081 	bls.w	8c88a <_realloc_r+0x276>
   8c788:	6821      	ldr	r1, [r4, #0]
   8c78a:	2a1b      	cmp	r2, #27
   8c78c:	f8ca 1008 	str.w	r1, [sl, #8]
   8c790:	6861      	ldr	r1, [r4, #4]
   8c792:	f8ca 100c 	str.w	r1, [sl, #12]
   8c796:	f200 80ad 	bhi.w	8c8f4 <_realloc_r+0x2e0>
   8c79a:	f104 0008 	add.w	r0, r4, #8
   8c79e:	f10a 0210 	add.w	r2, sl, #16
   8c7a2:	e074      	b.n	8c88e <_realloc_r+0x27a>
   8c7a4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c7a8:	eba9 0a03 	sub.w	sl, r9, r3
   8c7ac:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c7b0:	f021 0103 	bic.w	r1, r1, #3
   8c7b4:	187b      	adds	r3, r7, r1
   8c7b6:	4293      	cmp	r3, r2
   8c7b8:	f6ff af59 	blt.w	8c66e <_realloc_r+0x5a>
   8c7bc:	4655      	mov	r5, sl
   8c7be:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c7c2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8c7c6:	1f3a      	subs	r2, r7, #4
   8c7c8:	2a24      	cmp	r2, #36	; 0x24
   8c7ca:	60c1      	str	r1, [r0, #12]
   8c7cc:	6088      	str	r0, [r1, #8]
   8c7ce:	d9d8      	bls.n	8c782 <_realloc_r+0x16e>
   8c7d0:	4621      	mov	r1, r4
   8c7d2:	4628      	mov	r0, r5
   8c7d4:	461f      	mov	r7, r3
   8c7d6:	46d1      	mov	r9, sl
   8c7d8:	f7ff fbb0 	bl	8bf3c <memmove>
   8c7dc:	e77a      	b.n	8c6d4 <_realloc_r+0xc0>
   8c7de:	6841      	ldr	r1, [r0, #4]
   8c7e0:	f106 0010 	add.w	r0, r6, #16
   8c7e4:	f021 0b03 	bic.w	fp, r1, #3
   8c7e8:	44bb      	add	fp, r7
   8c7ea:	4583      	cmp	fp, r0
   8c7ec:	da58      	bge.n	8c8a0 <_realloc_r+0x28c>
   8c7ee:	f01e 0f01 	tst.w	lr, #1
   8c7f2:	f47f af3c 	bne.w	8c66e <_realloc_r+0x5a>
   8c7f6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c7fa:	eba9 0a01 	sub.w	sl, r9, r1
   8c7fe:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c802:	f021 0103 	bic.w	r1, r1, #3
   8c806:	448b      	add	fp, r1
   8c808:	4558      	cmp	r0, fp
   8c80a:	dcd3      	bgt.n	8c7b4 <_realloc_r+0x1a0>
   8c80c:	4655      	mov	r5, sl
   8c80e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c812:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8c816:	1f3a      	subs	r2, r7, #4
   8c818:	2a24      	cmp	r2, #36	; 0x24
   8c81a:	60c1      	str	r1, [r0, #12]
   8c81c:	6088      	str	r0, [r1, #8]
   8c81e:	f200 808d 	bhi.w	8c93c <_realloc_r+0x328>
   8c822:	2a13      	cmp	r2, #19
   8c824:	f240 8087 	bls.w	8c936 <_realloc_r+0x322>
   8c828:	6821      	ldr	r1, [r4, #0]
   8c82a:	2a1b      	cmp	r2, #27
   8c82c:	f8ca 1008 	str.w	r1, [sl, #8]
   8c830:	6861      	ldr	r1, [r4, #4]
   8c832:	f8ca 100c 	str.w	r1, [sl, #12]
   8c836:	f200 8088 	bhi.w	8c94a <_realloc_r+0x336>
   8c83a:	f104 0108 	add.w	r1, r4, #8
   8c83e:	f10a 0210 	add.w	r2, sl, #16
   8c842:	6808      	ldr	r0, [r1, #0]
   8c844:	6010      	str	r0, [r2, #0]
   8c846:	6848      	ldr	r0, [r1, #4]
   8c848:	6050      	str	r0, [r2, #4]
   8c84a:	6889      	ldr	r1, [r1, #8]
   8c84c:	6091      	str	r1, [r2, #8]
   8c84e:	ebab 0206 	sub.w	r2, fp, r6
   8c852:	eb0a 0106 	add.w	r1, sl, r6
   8c856:	f042 0201 	orr.w	r2, r2, #1
   8c85a:	6099      	str	r1, [r3, #8]
   8c85c:	604a      	str	r2, [r1, #4]
   8c85e:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c862:	4640      	mov	r0, r8
   8c864:	f003 0301 	and.w	r3, r3, #1
   8c868:	431e      	orrs	r6, r3
   8c86a:	f8ca 6004 	str.w	r6, [sl, #4]
   8c86e:	f7ff fbcf 	bl	8c010 <__malloc_unlock>
   8c872:	e742      	b.n	8c6fa <_realloc_r+0xe6>
   8c874:	6823      	ldr	r3, [r4, #0]
   8c876:	2a1b      	cmp	r2, #27
   8c878:	6003      	str	r3, [r0, #0]
   8c87a:	6863      	ldr	r3, [r4, #4]
   8c87c:	6043      	str	r3, [r0, #4]
   8c87e:	d827      	bhi.n	8c8d0 <_realloc_r+0x2bc>
   8c880:	f100 0308 	add.w	r3, r0, #8
   8c884:	f104 0208 	add.w	r2, r4, #8
   8c888:	e70b      	b.n	8c6a2 <_realloc_r+0x8e>
   8c88a:	4620      	mov	r0, r4
   8c88c:	462a      	mov	r2, r5
   8c88e:	6801      	ldr	r1, [r0, #0]
   8c890:	461f      	mov	r7, r3
   8c892:	6011      	str	r1, [r2, #0]
   8c894:	6841      	ldr	r1, [r0, #4]
   8c896:	46d1      	mov	r9, sl
   8c898:	6051      	str	r1, [r2, #4]
   8c89a:	6883      	ldr	r3, [r0, #8]
   8c89c:	6093      	str	r3, [r2, #8]
   8c89e:	e719      	b.n	8c6d4 <_realloc_r+0xc0>
   8c8a0:	ebab 0b06 	sub.w	fp, fp, r6
   8c8a4:	eb09 0106 	add.w	r1, r9, r6
   8c8a8:	f04b 0201 	orr.w	r2, fp, #1
   8c8ac:	6099      	str	r1, [r3, #8]
   8c8ae:	604a      	str	r2, [r1, #4]
   8c8b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c8b4:	4640      	mov	r0, r8
   8c8b6:	f003 0301 	and.w	r3, r3, #1
   8c8ba:	431e      	orrs	r6, r3
   8c8bc:	f844 6c04 	str.w	r6, [r4, #-4]
   8c8c0:	f7ff fba6 	bl	8c010 <__malloc_unlock>
   8c8c4:	4625      	mov	r5, r4
   8c8c6:	e718      	b.n	8c6fa <_realloc_r+0xe6>
   8c8c8:	4621      	mov	r1, r4
   8c8ca:	f7ff fb37 	bl	8bf3c <memmove>
   8c8ce:	e6ee      	b.n	8c6ae <_realloc_r+0x9a>
   8c8d0:	68a3      	ldr	r3, [r4, #8]
   8c8d2:	2a24      	cmp	r2, #36	; 0x24
   8c8d4:	6083      	str	r3, [r0, #8]
   8c8d6:	68e3      	ldr	r3, [r4, #12]
   8c8d8:	60c3      	str	r3, [r0, #12]
   8c8da:	d018      	beq.n	8c90e <_realloc_r+0x2fa>
   8c8dc:	f100 0310 	add.w	r3, r0, #16
   8c8e0:	f104 0210 	add.w	r2, r4, #16
   8c8e4:	e6dd      	b.n	8c6a2 <_realloc_r+0x8e>
   8c8e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8c8ea:	4625      	mov	r5, r4
   8c8ec:	f023 0303 	bic.w	r3, r3, #3
   8c8f0:	441f      	add	r7, r3
   8c8f2:	e6ef      	b.n	8c6d4 <_realloc_r+0xc0>
   8c8f4:	68a1      	ldr	r1, [r4, #8]
   8c8f6:	2a24      	cmp	r2, #36	; 0x24
   8c8f8:	f8ca 1010 	str.w	r1, [sl, #16]
   8c8fc:	68e1      	ldr	r1, [r4, #12]
   8c8fe:	f8ca 1014 	str.w	r1, [sl, #20]
   8c902:	d00d      	beq.n	8c920 <_realloc_r+0x30c>
   8c904:	f104 0010 	add.w	r0, r4, #16
   8c908:	f10a 0218 	add.w	r2, sl, #24
   8c90c:	e7bf      	b.n	8c88e <_realloc_r+0x27a>
   8c90e:	6922      	ldr	r2, [r4, #16]
   8c910:	f100 0318 	add.w	r3, r0, #24
   8c914:	6102      	str	r2, [r0, #16]
   8c916:	6961      	ldr	r1, [r4, #20]
   8c918:	f104 0218 	add.w	r2, r4, #24
   8c91c:	6141      	str	r1, [r0, #20]
   8c91e:	e6c0      	b.n	8c6a2 <_realloc_r+0x8e>
   8c920:	6922      	ldr	r2, [r4, #16]
   8c922:	f104 0018 	add.w	r0, r4, #24
   8c926:	f8ca 2018 	str.w	r2, [sl, #24]
   8c92a:	6961      	ldr	r1, [r4, #20]
   8c92c:	f10a 0220 	add.w	r2, sl, #32
   8c930:	f8ca 101c 	str.w	r1, [sl, #28]
   8c934:	e7ab      	b.n	8c88e <_realloc_r+0x27a>
   8c936:	4621      	mov	r1, r4
   8c938:	462a      	mov	r2, r5
   8c93a:	e782      	b.n	8c842 <_realloc_r+0x22e>
   8c93c:	4621      	mov	r1, r4
   8c93e:	4628      	mov	r0, r5
   8c940:	9301      	str	r3, [sp, #4]
   8c942:	f7ff fafb 	bl	8bf3c <memmove>
   8c946:	9b01      	ldr	r3, [sp, #4]
   8c948:	e781      	b.n	8c84e <_realloc_r+0x23a>
   8c94a:	68a1      	ldr	r1, [r4, #8]
   8c94c:	2a24      	cmp	r2, #36	; 0x24
   8c94e:	f8ca 1010 	str.w	r1, [sl, #16]
   8c952:	68e1      	ldr	r1, [r4, #12]
   8c954:	f8ca 1014 	str.w	r1, [sl, #20]
   8c958:	d006      	beq.n	8c968 <_realloc_r+0x354>
   8c95a:	f104 0110 	add.w	r1, r4, #16
   8c95e:	f10a 0218 	add.w	r2, sl, #24
   8c962:	e76e      	b.n	8c842 <_realloc_r+0x22e>
   8c964:	20000cb0 	.word	0x20000cb0
   8c968:	6922      	ldr	r2, [r4, #16]
   8c96a:	f104 0118 	add.w	r1, r4, #24
   8c96e:	f8ca 2018 	str.w	r2, [sl, #24]
   8c972:	6960      	ldr	r0, [r4, #20]
   8c974:	f10a 0220 	add.w	r2, sl, #32
   8c978:	f8ca 001c 	str.w	r0, [sl, #28]
   8c97c:	e761      	b.n	8c842 <_realloc_r+0x22e>
   8c97e:	bf00      	nop

0008c980 <_sbrk_r>:
   8c980:	b538      	push	{r3, r4, r5, lr}
   8c982:	2300      	movs	r3, #0
   8c984:	4c06      	ldr	r4, [pc, #24]	; (8c9a0 <_sbrk_r+0x20>)
   8c986:	4605      	mov	r5, r0
   8c988:	4608      	mov	r0, r1
   8c98a:	6023      	str	r3, [r4, #0]
   8c98c:	f7fa fb78 	bl	87080 <_sbrk>
   8c990:	1c43      	adds	r3, r0, #1
   8c992:	d000      	beq.n	8c996 <_sbrk_r+0x16>
   8c994:	bd38      	pop	{r3, r4, r5, pc}
   8c996:	6823      	ldr	r3, [r4, #0]
   8c998:	2b00      	cmp	r3, #0
   8c99a:	d0fb      	beq.n	8c994 <_sbrk_r+0x14>
   8c99c:	602b      	str	r3, [r5, #0]
   8c99e:	bd38      	pop	{r3, r4, r5, pc}
   8c9a0:	20002e28 	.word	0x20002e28

0008c9a4 <__sread>:
   8c9a4:	b510      	push	{r4, lr}
   8c9a6:	460c      	mov	r4, r1
   8c9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c9ac:	f000 fad0 	bl	8cf50 <_read_r>
   8c9b0:	2800      	cmp	r0, #0
   8c9b2:	db03      	blt.n	8c9bc <__sread+0x18>
   8c9b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c9b6:	4403      	add	r3, r0
   8c9b8:	6523      	str	r3, [r4, #80]	; 0x50
   8c9ba:	bd10      	pop	{r4, pc}
   8c9bc:	89a3      	ldrh	r3, [r4, #12]
   8c9be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c9c2:	81a3      	strh	r3, [r4, #12]
   8c9c4:	bd10      	pop	{r4, pc}
   8c9c6:	bf00      	nop

0008c9c8 <__swrite>:
   8c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c9cc:	460c      	mov	r4, r1
   8c9ce:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c9d2:	461f      	mov	r7, r3
   8c9d4:	05cb      	lsls	r3, r1, #23
   8c9d6:	4616      	mov	r6, r2
   8c9d8:	4605      	mov	r5, r0
   8c9da:	d507      	bpl.n	8c9ec <__swrite+0x24>
   8c9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c9e0:	2302      	movs	r3, #2
   8c9e2:	2200      	movs	r2, #0
   8c9e4:	f000 fa9e 	bl	8cf24 <_lseek_r>
   8c9e8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c9ec:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c9f0:	81a1      	strh	r1, [r4, #12]
   8c9f2:	463b      	mov	r3, r7
   8c9f4:	4632      	mov	r2, r6
   8c9f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c9fa:	4628      	mov	r0, r5
   8c9fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8ca00:	f000 b94e 	b.w	8cca0 <_write_r>

0008ca04 <__sseek>:
   8ca04:	b510      	push	{r4, lr}
   8ca06:	460c      	mov	r4, r1
   8ca08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ca0c:	f000 fa8a 	bl	8cf24 <_lseek_r>
   8ca10:	89a3      	ldrh	r3, [r4, #12]
   8ca12:	1c42      	adds	r2, r0, #1
   8ca14:	bf0e      	itee	eq
   8ca16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8ca1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8ca1e:	6520      	strne	r0, [r4, #80]	; 0x50
   8ca20:	81a3      	strh	r3, [r4, #12]
   8ca22:	bd10      	pop	{r4, pc}

0008ca24 <__sclose>:
   8ca24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ca28:	f000 b9e2 	b.w	8cdf0 <_close_r>

0008ca2c <strlen>:
   8ca2c:	f020 0103 	bic.w	r1, r0, #3
   8ca30:	f010 0003 	ands.w	r0, r0, #3
   8ca34:	f1c0 0000 	rsb	r0, r0, #0
   8ca38:	f851 3b04 	ldr.w	r3, [r1], #4
   8ca3c:	f100 0c04 	add.w	ip, r0, #4
   8ca40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8ca44:	f06f 0200 	mvn.w	r2, #0
   8ca48:	bf1c      	itt	ne
   8ca4a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8ca4e:	4313      	orrne	r3, r2
   8ca50:	f04f 0c01 	mov.w	ip, #1
   8ca54:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8ca58:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8ca5c:	eba3 020c 	sub.w	r2, r3, ip
   8ca60:	ea22 0203 	bic.w	r2, r2, r3
   8ca64:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8ca68:	bf04      	itt	eq
   8ca6a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8ca6e:	3004      	addeq	r0, #4
   8ca70:	d0f4      	beq.n	8ca5c <strlen+0x30>
   8ca72:	f1c2 0100 	rsb	r1, r2, #0
   8ca76:	ea02 0201 	and.w	r2, r2, r1
   8ca7a:	fab2 f282 	clz	r2, r2
   8ca7e:	f1c2 021f 	rsb	r2, r2, #31
   8ca82:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8ca86:	4770      	bx	lr

0008ca88 <__ssprint_r>:
   8ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ca8c:	6893      	ldr	r3, [r2, #8]
   8ca8e:	b083      	sub	sp, #12
   8ca90:	4690      	mov	r8, r2
   8ca92:	2b00      	cmp	r3, #0
   8ca94:	d070      	beq.n	8cb78 <__ssprint_r+0xf0>
   8ca96:	4682      	mov	sl, r0
   8ca98:	460c      	mov	r4, r1
   8ca9a:	6817      	ldr	r7, [r2, #0]
   8ca9c:	688d      	ldr	r5, [r1, #8]
   8ca9e:	6808      	ldr	r0, [r1, #0]
   8caa0:	e042      	b.n	8cb28 <__ssprint_r+0xa0>
   8caa2:	89a3      	ldrh	r3, [r4, #12]
   8caa4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8caa8:	d02e      	beq.n	8cb08 <__ssprint_r+0x80>
   8caaa:	6965      	ldr	r5, [r4, #20]
   8caac:	6921      	ldr	r1, [r4, #16]
   8caae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8cab2:	eba0 0b01 	sub.w	fp, r0, r1
   8cab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8caba:	f10b 0001 	add.w	r0, fp, #1
   8cabe:	106d      	asrs	r5, r5, #1
   8cac0:	4430      	add	r0, r6
   8cac2:	42a8      	cmp	r0, r5
   8cac4:	462a      	mov	r2, r5
   8cac6:	bf84      	itt	hi
   8cac8:	4605      	movhi	r5, r0
   8caca:	462a      	movhi	r2, r5
   8cacc:	055b      	lsls	r3, r3, #21
   8cace:	d538      	bpl.n	8cb42 <__ssprint_r+0xba>
   8cad0:	4611      	mov	r1, r2
   8cad2:	4650      	mov	r0, sl
   8cad4:	f7fe ff34 	bl	8b940 <_malloc_r>
   8cad8:	2800      	cmp	r0, #0
   8cada:	d03c      	beq.n	8cb56 <__ssprint_r+0xce>
   8cadc:	465a      	mov	r2, fp
   8cade:	6921      	ldr	r1, [r4, #16]
   8cae0:	9001      	str	r0, [sp, #4]
   8cae2:	f7fa febb 	bl	8785c <memcpy>
   8cae6:	89a2      	ldrh	r2, [r4, #12]
   8cae8:	9b01      	ldr	r3, [sp, #4]
   8caea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8caee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8caf2:	81a2      	strh	r2, [r4, #12]
   8caf4:	eba5 020b 	sub.w	r2, r5, fp
   8caf8:	eb03 000b 	add.w	r0, r3, fp
   8cafc:	6165      	str	r5, [r4, #20]
   8cafe:	46b3      	mov	fp, r6
   8cb00:	4635      	mov	r5, r6
   8cb02:	6123      	str	r3, [r4, #16]
   8cb04:	6020      	str	r0, [r4, #0]
   8cb06:	60a2      	str	r2, [r4, #8]
   8cb08:	465a      	mov	r2, fp
   8cb0a:	4649      	mov	r1, r9
   8cb0c:	f7ff fa16 	bl	8bf3c <memmove>
   8cb10:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8cb14:	68a2      	ldr	r2, [r4, #8]
   8cb16:	6820      	ldr	r0, [r4, #0]
   8cb18:	1b55      	subs	r5, r2, r5
   8cb1a:	4458      	add	r0, fp
   8cb1c:	1b9e      	subs	r6, r3, r6
   8cb1e:	60a5      	str	r5, [r4, #8]
   8cb20:	6020      	str	r0, [r4, #0]
   8cb22:	f8c8 6008 	str.w	r6, [r8, #8]
   8cb26:	b33e      	cbz	r6, 8cb78 <__ssprint_r+0xf0>
   8cb28:	687e      	ldr	r6, [r7, #4]
   8cb2a:	463b      	mov	r3, r7
   8cb2c:	3708      	adds	r7, #8
   8cb2e:	2e00      	cmp	r6, #0
   8cb30:	d0fa      	beq.n	8cb28 <__ssprint_r+0xa0>
   8cb32:	42ae      	cmp	r6, r5
   8cb34:	f8d3 9000 	ldr.w	r9, [r3]
   8cb38:	46ab      	mov	fp, r5
   8cb3a:	d2b2      	bcs.n	8caa2 <__ssprint_r+0x1a>
   8cb3c:	4635      	mov	r5, r6
   8cb3e:	46b3      	mov	fp, r6
   8cb40:	e7e2      	b.n	8cb08 <__ssprint_r+0x80>
   8cb42:	4650      	mov	r0, sl
   8cb44:	f7ff fd66 	bl	8c614 <_realloc_r>
   8cb48:	4603      	mov	r3, r0
   8cb4a:	2800      	cmp	r0, #0
   8cb4c:	d1d2      	bne.n	8caf4 <__ssprint_r+0x6c>
   8cb4e:	6921      	ldr	r1, [r4, #16]
   8cb50:	4650      	mov	r0, sl
   8cb52:	f7fe fbc9 	bl	8b2e8 <_free_r>
   8cb56:	230c      	movs	r3, #12
   8cb58:	2200      	movs	r2, #0
   8cb5a:	f04f 30ff 	mov.w	r0, #4294967295
   8cb5e:	f8ca 3000 	str.w	r3, [sl]
   8cb62:	89a3      	ldrh	r3, [r4, #12]
   8cb64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8cb68:	81a3      	strh	r3, [r4, #12]
   8cb6a:	f8c8 2008 	str.w	r2, [r8, #8]
   8cb6e:	f8c8 2004 	str.w	r2, [r8, #4]
   8cb72:	b003      	add	sp, #12
   8cb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cb78:	2000      	movs	r0, #0
   8cb7a:	f8c8 0004 	str.w	r0, [r8, #4]
   8cb7e:	b003      	add	sp, #12
   8cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008cb84 <__swbuf_r>:
   8cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cb86:	460d      	mov	r5, r1
   8cb88:	4614      	mov	r4, r2
   8cb8a:	4606      	mov	r6, r0
   8cb8c:	b110      	cbz	r0, 8cb94 <__swbuf_r+0x10>
   8cb8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cb90:	2b00      	cmp	r3, #0
   8cb92:	d04b      	beq.n	8cc2c <__swbuf_r+0xa8>
   8cb94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cb98:	69a3      	ldr	r3, [r4, #24]
   8cb9a:	b291      	uxth	r1, r2
   8cb9c:	0708      	lsls	r0, r1, #28
   8cb9e:	60a3      	str	r3, [r4, #8]
   8cba0:	d539      	bpl.n	8cc16 <__swbuf_r+0x92>
   8cba2:	6923      	ldr	r3, [r4, #16]
   8cba4:	2b00      	cmp	r3, #0
   8cba6:	d036      	beq.n	8cc16 <__swbuf_r+0x92>
   8cba8:	b2ed      	uxtb	r5, r5
   8cbaa:	0489      	lsls	r1, r1, #18
   8cbac:	462f      	mov	r7, r5
   8cbae:	d515      	bpl.n	8cbdc <__swbuf_r+0x58>
   8cbb0:	6822      	ldr	r2, [r4, #0]
   8cbb2:	6961      	ldr	r1, [r4, #20]
   8cbb4:	1ad3      	subs	r3, r2, r3
   8cbb6:	428b      	cmp	r3, r1
   8cbb8:	da1c      	bge.n	8cbf4 <__swbuf_r+0x70>
   8cbba:	3301      	adds	r3, #1
   8cbbc:	68a1      	ldr	r1, [r4, #8]
   8cbbe:	1c50      	adds	r0, r2, #1
   8cbc0:	3901      	subs	r1, #1
   8cbc2:	60a1      	str	r1, [r4, #8]
   8cbc4:	6020      	str	r0, [r4, #0]
   8cbc6:	7015      	strb	r5, [r2, #0]
   8cbc8:	6962      	ldr	r2, [r4, #20]
   8cbca:	429a      	cmp	r2, r3
   8cbcc:	d01a      	beq.n	8cc04 <__swbuf_r+0x80>
   8cbce:	89a3      	ldrh	r3, [r4, #12]
   8cbd0:	07db      	lsls	r3, r3, #31
   8cbd2:	d501      	bpl.n	8cbd8 <__swbuf_r+0x54>
   8cbd4:	2d0a      	cmp	r5, #10
   8cbd6:	d015      	beq.n	8cc04 <__swbuf_r+0x80>
   8cbd8:	4638      	mov	r0, r7
   8cbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cbdc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8cbde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8cbe2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8cbe6:	81a2      	strh	r2, [r4, #12]
   8cbe8:	6822      	ldr	r2, [r4, #0]
   8cbea:	6661      	str	r1, [r4, #100]	; 0x64
   8cbec:	6961      	ldr	r1, [r4, #20]
   8cbee:	1ad3      	subs	r3, r2, r3
   8cbf0:	428b      	cmp	r3, r1
   8cbf2:	dbe2      	blt.n	8cbba <__swbuf_r+0x36>
   8cbf4:	4621      	mov	r1, r4
   8cbf6:	4630      	mov	r0, r6
   8cbf8:	f7fe f9f8 	bl	8afec <_fflush_r>
   8cbfc:	b940      	cbnz	r0, 8cc10 <__swbuf_r+0x8c>
   8cbfe:	2301      	movs	r3, #1
   8cc00:	6822      	ldr	r2, [r4, #0]
   8cc02:	e7db      	b.n	8cbbc <__swbuf_r+0x38>
   8cc04:	4621      	mov	r1, r4
   8cc06:	4630      	mov	r0, r6
   8cc08:	f7fe f9f0 	bl	8afec <_fflush_r>
   8cc0c:	2800      	cmp	r0, #0
   8cc0e:	d0e3      	beq.n	8cbd8 <__swbuf_r+0x54>
   8cc10:	f04f 37ff 	mov.w	r7, #4294967295
   8cc14:	e7e0      	b.n	8cbd8 <__swbuf_r+0x54>
   8cc16:	4621      	mov	r1, r4
   8cc18:	4630      	mov	r0, r6
   8cc1a:	f7fd f921 	bl	89e60 <__swsetup_r>
   8cc1e:	2800      	cmp	r0, #0
   8cc20:	d1f6      	bne.n	8cc10 <__swbuf_r+0x8c>
   8cc22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cc26:	6923      	ldr	r3, [r4, #16]
   8cc28:	b291      	uxth	r1, r2
   8cc2a:	e7bd      	b.n	8cba8 <__swbuf_r+0x24>
   8cc2c:	f7fe fa36 	bl	8b09c <__sinit>
   8cc30:	e7b0      	b.n	8cb94 <__swbuf_r+0x10>
   8cc32:	bf00      	nop

0008cc34 <_wcrtomb_r>:
   8cc34:	b5f0      	push	{r4, r5, r6, r7, lr}
   8cc36:	4606      	mov	r6, r0
   8cc38:	b085      	sub	sp, #20
   8cc3a:	461f      	mov	r7, r3
   8cc3c:	b189      	cbz	r1, 8cc62 <_wcrtomb_r+0x2e>
   8cc3e:	4c10      	ldr	r4, [pc, #64]	; (8cc80 <_wcrtomb_r+0x4c>)
   8cc40:	4d10      	ldr	r5, [pc, #64]	; (8cc84 <_wcrtomb_r+0x50>)
   8cc42:	6824      	ldr	r4, [r4, #0]
   8cc44:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8cc46:	2c00      	cmp	r4, #0
   8cc48:	bf08      	it	eq
   8cc4a:	462c      	moveq	r4, r5
   8cc4c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8cc50:	47a0      	blx	r4
   8cc52:	1c43      	adds	r3, r0, #1
   8cc54:	d103      	bne.n	8cc5e <_wcrtomb_r+0x2a>
   8cc56:	2200      	movs	r2, #0
   8cc58:	238a      	movs	r3, #138	; 0x8a
   8cc5a:	603a      	str	r2, [r7, #0]
   8cc5c:	6033      	str	r3, [r6, #0]
   8cc5e:	b005      	add	sp, #20
   8cc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8cc62:	460c      	mov	r4, r1
   8cc64:	4a06      	ldr	r2, [pc, #24]	; (8cc80 <_wcrtomb_r+0x4c>)
   8cc66:	4d07      	ldr	r5, [pc, #28]	; (8cc84 <_wcrtomb_r+0x50>)
   8cc68:	6811      	ldr	r1, [r2, #0]
   8cc6a:	4622      	mov	r2, r4
   8cc6c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8cc6e:	a901      	add	r1, sp, #4
   8cc70:	2c00      	cmp	r4, #0
   8cc72:	bf08      	it	eq
   8cc74:	462c      	moveq	r4, r5
   8cc76:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8cc7a:	47a0      	blx	r4
   8cc7c:	e7e9      	b.n	8cc52 <_wcrtomb_r+0x1e>
   8cc7e:	bf00      	nop
   8cc80:	20000714 	.word	0x20000714
   8cc84:	20000b44 	.word	0x20000b44

0008cc88 <__ascii_wctomb>:
   8cc88:	b119      	cbz	r1, 8cc92 <__ascii_wctomb+0xa>
   8cc8a:	2aff      	cmp	r2, #255	; 0xff
   8cc8c:	d803      	bhi.n	8cc96 <__ascii_wctomb+0xe>
   8cc8e:	700a      	strb	r2, [r1, #0]
   8cc90:	2101      	movs	r1, #1
   8cc92:	4608      	mov	r0, r1
   8cc94:	4770      	bx	lr
   8cc96:	238a      	movs	r3, #138	; 0x8a
   8cc98:	f04f 31ff 	mov.w	r1, #4294967295
   8cc9c:	6003      	str	r3, [r0, #0]
   8cc9e:	e7f8      	b.n	8cc92 <__ascii_wctomb+0xa>

0008cca0 <_write_r>:
   8cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cca2:	460e      	mov	r6, r1
   8cca4:	2500      	movs	r5, #0
   8cca6:	4c08      	ldr	r4, [pc, #32]	; (8ccc8 <_write_r+0x28>)
   8cca8:	4611      	mov	r1, r2
   8ccaa:	4607      	mov	r7, r0
   8ccac:	461a      	mov	r2, r3
   8ccae:	4630      	mov	r0, r6
   8ccb0:	6025      	str	r5, [r4, #0]
   8ccb2:	f7f8 f955 	bl	84f60 <_write>
   8ccb6:	1c43      	adds	r3, r0, #1
   8ccb8:	d000      	beq.n	8ccbc <_write_r+0x1c>
   8ccba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ccbc:	6823      	ldr	r3, [r4, #0]
   8ccbe:	2b00      	cmp	r3, #0
   8ccc0:	d0fb      	beq.n	8ccba <_write_r+0x1a>
   8ccc2:	603b      	str	r3, [r7, #0]
   8ccc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ccc6:	bf00      	nop
   8ccc8:	20002e28 	.word	0x20002e28

0008cccc <__register_exitproc>:
   8cccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8ccd0:	4d2c      	ldr	r5, [pc, #176]	; (8cd84 <__register_exitproc+0xb8>)
   8ccd2:	4606      	mov	r6, r0
   8ccd4:	6828      	ldr	r0, [r5, #0]
   8ccd6:	4698      	mov	r8, r3
   8ccd8:	460f      	mov	r7, r1
   8ccda:	4691      	mov	r9, r2
   8ccdc:	f7fe fdac 	bl	8b838 <__retarget_lock_acquire_recursive>
   8cce0:	4b29      	ldr	r3, [pc, #164]	; (8cd88 <__register_exitproc+0xbc>)
   8cce2:	681c      	ldr	r4, [r3, #0]
   8cce4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8cce8:	2b00      	cmp	r3, #0
   8ccea:	d03e      	beq.n	8cd6a <__register_exitproc+0x9e>
   8ccec:	685a      	ldr	r2, [r3, #4]
   8ccee:	2a1f      	cmp	r2, #31
   8ccf0:	dc1c      	bgt.n	8cd2c <__register_exitproc+0x60>
   8ccf2:	f102 0e01 	add.w	lr, r2, #1
   8ccf6:	b176      	cbz	r6, 8cd16 <__register_exitproc+0x4a>
   8ccf8:	2101      	movs	r1, #1
   8ccfa:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8ccfe:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8cd02:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8cd06:	4091      	lsls	r1, r2
   8cd08:	4308      	orrs	r0, r1
   8cd0a:	2e02      	cmp	r6, #2
   8cd0c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8cd10:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8cd14:	d023      	beq.n	8cd5e <__register_exitproc+0x92>
   8cd16:	3202      	adds	r2, #2
   8cd18:	f8c3 e004 	str.w	lr, [r3, #4]
   8cd1c:	6828      	ldr	r0, [r5, #0]
   8cd1e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8cd22:	f7fe fd8b 	bl	8b83c <__retarget_lock_release_recursive>
   8cd26:	2000      	movs	r0, #0
   8cd28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8cd2c:	4b17      	ldr	r3, [pc, #92]	; (8cd8c <__register_exitproc+0xc0>)
   8cd2e:	b30b      	cbz	r3, 8cd74 <__register_exitproc+0xa8>
   8cd30:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8cd34:	f7fe fdfc 	bl	8b930 <malloc>
   8cd38:	4603      	mov	r3, r0
   8cd3a:	b1d8      	cbz	r0, 8cd74 <__register_exitproc+0xa8>
   8cd3c:	2000      	movs	r0, #0
   8cd3e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8cd42:	f04f 0e01 	mov.w	lr, #1
   8cd46:	6058      	str	r0, [r3, #4]
   8cd48:	6019      	str	r1, [r3, #0]
   8cd4a:	4602      	mov	r2, r0
   8cd4c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8cd50:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8cd54:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8cd58:	2e00      	cmp	r6, #0
   8cd5a:	d0dc      	beq.n	8cd16 <__register_exitproc+0x4a>
   8cd5c:	e7cc      	b.n	8ccf8 <__register_exitproc+0x2c>
   8cd5e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8cd62:	4301      	orrs	r1, r0
   8cd64:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8cd68:	e7d5      	b.n	8cd16 <__register_exitproc+0x4a>
   8cd6a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8cd6e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8cd72:	e7bb      	b.n	8ccec <__register_exitproc+0x20>
   8cd74:	6828      	ldr	r0, [r5, #0]
   8cd76:	f7fe fd61 	bl	8b83c <__retarget_lock_release_recursive>
   8cd7a:	f04f 30ff 	mov.w	r0, #4294967295
   8cd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8cd82:	bf00      	nop
   8cd84:	20000b40 	.word	0x20000b40
   8cd88:	0008db10 	.word	0x0008db10
   8cd8c:	0008b931 	.word	0x0008b931

0008cd90 <_calloc_r>:
   8cd90:	b510      	push	{r4, lr}
   8cd92:	fb02 f101 	mul.w	r1, r2, r1
   8cd96:	f7fe fdd3 	bl	8b940 <_malloc_r>
   8cd9a:	4604      	mov	r4, r0
   8cd9c:	b1d8      	cbz	r0, 8cdd6 <_calloc_r+0x46>
   8cd9e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8cda2:	f022 0203 	bic.w	r2, r2, #3
   8cda6:	3a04      	subs	r2, #4
   8cda8:	2a24      	cmp	r2, #36	; 0x24
   8cdaa:	d818      	bhi.n	8cdde <_calloc_r+0x4e>
   8cdac:	2a13      	cmp	r2, #19
   8cdae:	d914      	bls.n	8cdda <_calloc_r+0x4a>
   8cdb0:	2300      	movs	r3, #0
   8cdb2:	2a1b      	cmp	r2, #27
   8cdb4:	6003      	str	r3, [r0, #0]
   8cdb6:	6043      	str	r3, [r0, #4]
   8cdb8:	d916      	bls.n	8cde8 <_calloc_r+0x58>
   8cdba:	2a24      	cmp	r2, #36	; 0x24
   8cdbc:	6083      	str	r3, [r0, #8]
   8cdbe:	60c3      	str	r3, [r0, #12]
   8cdc0:	bf11      	iteee	ne
   8cdc2:	f100 0210 	addne.w	r2, r0, #16
   8cdc6:	6103      	streq	r3, [r0, #16]
   8cdc8:	6143      	streq	r3, [r0, #20]
   8cdca:	f100 0218 	addeq.w	r2, r0, #24
   8cdce:	2300      	movs	r3, #0
   8cdd0:	6013      	str	r3, [r2, #0]
   8cdd2:	6053      	str	r3, [r2, #4]
   8cdd4:	6093      	str	r3, [r2, #8]
   8cdd6:	4620      	mov	r0, r4
   8cdd8:	bd10      	pop	{r4, pc}
   8cdda:	4602      	mov	r2, r0
   8cddc:	e7f7      	b.n	8cdce <_calloc_r+0x3e>
   8cdde:	2100      	movs	r1, #0
   8cde0:	f7fa fdb2 	bl	87948 <memset>
   8cde4:	4620      	mov	r0, r4
   8cde6:	bd10      	pop	{r4, pc}
   8cde8:	f100 0208 	add.w	r2, r0, #8
   8cdec:	e7ef      	b.n	8cdce <_calloc_r+0x3e>
   8cdee:	bf00      	nop

0008cdf0 <_close_r>:
   8cdf0:	b538      	push	{r3, r4, r5, lr}
   8cdf2:	2300      	movs	r3, #0
   8cdf4:	4c06      	ldr	r4, [pc, #24]	; (8ce10 <_close_r+0x20>)
   8cdf6:	4605      	mov	r5, r0
   8cdf8:	4608      	mov	r0, r1
   8cdfa:	6023      	str	r3, [r4, #0]
   8cdfc:	f7fa f95c 	bl	870b8 <_close>
   8ce00:	1c43      	adds	r3, r0, #1
   8ce02:	d000      	beq.n	8ce06 <_close_r+0x16>
   8ce04:	bd38      	pop	{r3, r4, r5, pc}
   8ce06:	6823      	ldr	r3, [r4, #0]
   8ce08:	2b00      	cmp	r3, #0
   8ce0a:	d0fb      	beq.n	8ce04 <_close_r+0x14>
   8ce0c:	602b      	str	r3, [r5, #0]
   8ce0e:	bd38      	pop	{r3, r4, r5, pc}
   8ce10:	20002e28 	.word	0x20002e28

0008ce14 <_fclose_r>:
   8ce14:	b570      	push	{r4, r5, r6, lr}
   8ce16:	b159      	cbz	r1, 8ce30 <_fclose_r+0x1c>
   8ce18:	4605      	mov	r5, r0
   8ce1a:	460c      	mov	r4, r1
   8ce1c:	b110      	cbz	r0, 8ce24 <_fclose_r+0x10>
   8ce1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ce20:	2b00      	cmp	r3, #0
   8ce22:	d03c      	beq.n	8ce9e <_fclose_r+0x8a>
   8ce24:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ce26:	07d8      	lsls	r0, r3, #31
   8ce28:	d505      	bpl.n	8ce36 <_fclose_r+0x22>
   8ce2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ce2e:	b92b      	cbnz	r3, 8ce3c <_fclose_r+0x28>
   8ce30:	2600      	movs	r6, #0
   8ce32:	4630      	mov	r0, r6
   8ce34:	bd70      	pop	{r4, r5, r6, pc}
   8ce36:	89a3      	ldrh	r3, [r4, #12]
   8ce38:	0599      	lsls	r1, r3, #22
   8ce3a:	d53c      	bpl.n	8ceb6 <_fclose_r+0xa2>
   8ce3c:	4621      	mov	r1, r4
   8ce3e:	4628      	mov	r0, r5
   8ce40:	f7fe f838 	bl	8aeb4 <__sflush_r>
   8ce44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8ce46:	4606      	mov	r6, r0
   8ce48:	b133      	cbz	r3, 8ce58 <_fclose_r+0x44>
   8ce4a:	69e1      	ldr	r1, [r4, #28]
   8ce4c:	4628      	mov	r0, r5
   8ce4e:	4798      	blx	r3
   8ce50:	2800      	cmp	r0, #0
   8ce52:	bfb8      	it	lt
   8ce54:	f04f 36ff 	movlt.w	r6, #4294967295
   8ce58:	89a3      	ldrh	r3, [r4, #12]
   8ce5a:	061a      	lsls	r2, r3, #24
   8ce5c:	d422      	bmi.n	8cea4 <_fclose_r+0x90>
   8ce5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8ce60:	b141      	cbz	r1, 8ce74 <_fclose_r+0x60>
   8ce62:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8ce66:	4299      	cmp	r1, r3
   8ce68:	d002      	beq.n	8ce70 <_fclose_r+0x5c>
   8ce6a:	4628      	mov	r0, r5
   8ce6c:	f7fe fa3c 	bl	8b2e8 <_free_r>
   8ce70:	2300      	movs	r3, #0
   8ce72:	6323      	str	r3, [r4, #48]	; 0x30
   8ce74:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8ce76:	b121      	cbz	r1, 8ce82 <_fclose_r+0x6e>
   8ce78:	4628      	mov	r0, r5
   8ce7a:	f7fe fa35 	bl	8b2e8 <_free_r>
   8ce7e:	2300      	movs	r3, #0
   8ce80:	6463      	str	r3, [r4, #68]	; 0x44
   8ce82:	f7fe f93b 	bl	8b0fc <__sfp_lock_acquire>
   8ce86:	2200      	movs	r2, #0
   8ce88:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ce8a:	81a2      	strh	r2, [r4, #12]
   8ce8c:	07db      	lsls	r3, r3, #31
   8ce8e:	d50e      	bpl.n	8ceae <_fclose_r+0x9a>
   8ce90:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ce92:	f7fe fccf 	bl	8b834 <__retarget_lock_close_recursive>
   8ce96:	f7fe f937 	bl	8b108 <__sfp_lock_release>
   8ce9a:	4630      	mov	r0, r6
   8ce9c:	bd70      	pop	{r4, r5, r6, pc}
   8ce9e:	f7fe f8fd 	bl	8b09c <__sinit>
   8cea2:	e7bf      	b.n	8ce24 <_fclose_r+0x10>
   8cea4:	6921      	ldr	r1, [r4, #16]
   8cea6:	4628      	mov	r0, r5
   8cea8:	f7fe fa1e 	bl	8b2e8 <_free_r>
   8ceac:	e7d7      	b.n	8ce5e <_fclose_r+0x4a>
   8ceae:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ceb0:	f7fe fcc4 	bl	8b83c <__retarget_lock_release_recursive>
   8ceb4:	e7ec      	b.n	8ce90 <_fclose_r+0x7c>
   8ceb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ceb8:	f7fe fcbe 	bl	8b838 <__retarget_lock_acquire_recursive>
   8cebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8cec0:	2b00      	cmp	r3, #0
   8cec2:	d1bb      	bne.n	8ce3c <_fclose_r+0x28>
   8cec4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8cec6:	f016 0601 	ands.w	r6, r6, #1
   8ceca:	d1b1      	bne.n	8ce30 <_fclose_r+0x1c>
   8cecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cece:	f7fe fcb5 	bl	8b83c <__retarget_lock_release_recursive>
   8ced2:	4630      	mov	r0, r6
   8ced4:	bd70      	pop	{r4, r5, r6, pc}
   8ced6:	bf00      	nop

0008ced8 <_fstat_r>:
   8ced8:	b570      	push	{r4, r5, r6, lr}
   8ceda:	460d      	mov	r5, r1
   8cedc:	2300      	movs	r3, #0
   8cede:	4c07      	ldr	r4, [pc, #28]	; (8cefc <_fstat_r+0x24>)
   8cee0:	4606      	mov	r6, r0
   8cee2:	4611      	mov	r1, r2
   8cee4:	4628      	mov	r0, r5
   8cee6:	6023      	str	r3, [r4, #0]
   8cee8:	f7fa f8e9 	bl	870be <_fstat>
   8ceec:	1c43      	adds	r3, r0, #1
   8ceee:	d000      	beq.n	8cef2 <_fstat_r+0x1a>
   8cef0:	bd70      	pop	{r4, r5, r6, pc}
   8cef2:	6823      	ldr	r3, [r4, #0]
   8cef4:	2b00      	cmp	r3, #0
   8cef6:	d0fb      	beq.n	8cef0 <_fstat_r+0x18>
   8cef8:	6033      	str	r3, [r6, #0]
   8cefa:	bd70      	pop	{r4, r5, r6, pc}
   8cefc:	20002e28 	.word	0x20002e28

0008cf00 <_isatty_r>:
   8cf00:	b538      	push	{r3, r4, r5, lr}
   8cf02:	2300      	movs	r3, #0
   8cf04:	4c06      	ldr	r4, [pc, #24]	; (8cf20 <_isatty_r+0x20>)
   8cf06:	4605      	mov	r5, r0
   8cf08:	4608      	mov	r0, r1
   8cf0a:	6023      	str	r3, [r4, #0]
   8cf0c:	f7fa f8dc 	bl	870c8 <_isatty>
   8cf10:	1c43      	adds	r3, r0, #1
   8cf12:	d000      	beq.n	8cf16 <_isatty_r+0x16>
   8cf14:	bd38      	pop	{r3, r4, r5, pc}
   8cf16:	6823      	ldr	r3, [r4, #0]
   8cf18:	2b00      	cmp	r3, #0
   8cf1a:	d0fb      	beq.n	8cf14 <_isatty_r+0x14>
   8cf1c:	602b      	str	r3, [r5, #0]
   8cf1e:	bd38      	pop	{r3, r4, r5, pc}
   8cf20:	20002e28 	.word	0x20002e28

0008cf24 <_lseek_r>:
   8cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf26:	460e      	mov	r6, r1
   8cf28:	2500      	movs	r5, #0
   8cf2a:	4c08      	ldr	r4, [pc, #32]	; (8cf4c <_lseek_r+0x28>)
   8cf2c:	4611      	mov	r1, r2
   8cf2e:	4607      	mov	r7, r0
   8cf30:	461a      	mov	r2, r3
   8cf32:	4630      	mov	r0, r6
   8cf34:	6025      	str	r5, [r4, #0]
   8cf36:	f7fa f8c9 	bl	870cc <_lseek>
   8cf3a:	1c43      	adds	r3, r0, #1
   8cf3c:	d000      	beq.n	8cf40 <_lseek_r+0x1c>
   8cf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf40:	6823      	ldr	r3, [r4, #0]
   8cf42:	2b00      	cmp	r3, #0
   8cf44:	d0fb      	beq.n	8cf3e <_lseek_r+0x1a>
   8cf46:	603b      	str	r3, [r7, #0]
   8cf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf4a:	bf00      	nop
   8cf4c:	20002e28 	.word	0x20002e28

0008cf50 <_read_r>:
   8cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf52:	460e      	mov	r6, r1
   8cf54:	2500      	movs	r5, #0
   8cf56:	4c08      	ldr	r4, [pc, #32]	; (8cf78 <_read_r+0x28>)
   8cf58:	4611      	mov	r1, r2
   8cf5a:	4607      	mov	r7, r0
   8cf5c:	461a      	mov	r2, r3
   8cf5e:	4630      	mov	r0, r6
   8cf60:	6025      	str	r5, [r4, #0]
   8cf62:	f7f7 ffdf 	bl	84f24 <_read>
   8cf66:	1c43      	adds	r3, r0, #1
   8cf68:	d000      	beq.n	8cf6c <_read_r+0x1c>
   8cf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf6c:	6823      	ldr	r3, [r4, #0]
   8cf6e:	2b00      	cmp	r3, #0
   8cf70:	d0fb      	beq.n	8cf6a <_read_r+0x1a>
   8cf72:	603b      	str	r3, [r7, #0]
   8cf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf76:	bf00      	nop
   8cf78:	20002e28 	.word	0x20002e28

0008cf7c <__aeabi_drsub>:
   8cf7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8cf80:	e002      	b.n	8cf88 <__adddf3>
   8cf82:	bf00      	nop

0008cf84 <__aeabi_dsub>:
   8cf84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008cf88 <__adddf3>:
   8cf88:	b530      	push	{r4, r5, lr}
   8cf8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8cf8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8cf92:	ea94 0f05 	teq	r4, r5
   8cf96:	bf08      	it	eq
   8cf98:	ea90 0f02 	teqeq	r0, r2
   8cf9c:	bf1f      	itttt	ne
   8cf9e:	ea54 0c00 	orrsne.w	ip, r4, r0
   8cfa2:	ea55 0c02 	orrsne.w	ip, r5, r2
   8cfa6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8cfaa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8cfae:	f000 80e2 	beq.w	8d176 <__adddf3+0x1ee>
   8cfb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8cfb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8cfba:	bfb8      	it	lt
   8cfbc:	426d      	neglt	r5, r5
   8cfbe:	dd0c      	ble.n	8cfda <__adddf3+0x52>
   8cfc0:	442c      	add	r4, r5
   8cfc2:	ea80 0202 	eor.w	r2, r0, r2
   8cfc6:	ea81 0303 	eor.w	r3, r1, r3
   8cfca:	ea82 0000 	eor.w	r0, r2, r0
   8cfce:	ea83 0101 	eor.w	r1, r3, r1
   8cfd2:	ea80 0202 	eor.w	r2, r0, r2
   8cfd6:	ea81 0303 	eor.w	r3, r1, r3
   8cfda:	2d36      	cmp	r5, #54	; 0x36
   8cfdc:	bf88      	it	hi
   8cfde:	bd30      	pophi	{r4, r5, pc}
   8cfe0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cfe4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8cfe8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8cfec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8cff0:	d002      	beq.n	8cff8 <__adddf3+0x70>
   8cff2:	4240      	negs	r0, r0
   8cff4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cff8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8cffc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d000:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8d004:	d002      	beq.n	8d00c <__adddf3+0x84>
   8d006:	4252      	negs	r2, r2
   8d008:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8d00c:	ea94 0f05 	teq	r4, r5
   8d010:	f000 80a7 	beq.w	8d162 <__adddf3+0x1da>
   8d014:	f1a4 0401 	sub.w	r4, r4, #1
   8d018:	f1d5 0e20 	rsbs	lr, r5, #32
   8d01c:	db0d      	blt.n	8d03a <__adddf3+0xb2>
   8d01e:	fa02 fc0e 	lsl.w	ip, r2, lr
   8d022:	fa22 f205 	lsr.w	r2, r2, r5
   8d026:	1880      	adds	r0, r0, r2
   8d028:	f141 0100 	adc.w	r1, r1, #0
   8d02c:	fa03 f20e 	lsl.w	r2, r3, lr
   8d030:	1880      	adds	r0, r0, r2
   8d032:	fa43 f305 	asr.w	r3, r3, r5
   8d036:	4159      	adcs	r1, r3
   8d038:	e00e      	b.n	8d058 <__adddf3+0xd0>
   8d03a:	f1a5 0520 	sub.w	r5, r5, #32
   8d03e:	f10e 0e20 	add.w	lr, lr, #32
   8d042:	2a01      	cmp	r2, #1
   8d044:	fa03 fc0e 	lsl.w	ip, r3, lr
   8d048:	bf28      	it	cs
   8d04a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8d04e:	fa43 f305 	asr.w	r3, r3, r5
   8d052:	18c0      	adds	r0, r0, r3
   8d054:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8d058:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d05c:	d507      	bpl.n	8d06e <__adddf3+0xe6>
   8d05e:	f04f 0e00 	mov.w	lr, #0
   8d062:	f1dc 0c00 	rsbs	ip, ip, #0
   8d066:	eb7e 0000 	sbcs.w	r0, lr, r0
   8d06a:	eb6e 0101 	sbc.w	r1, lr, r1
   8d06e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8d072:	d31b      	bcc.n	8d0ac <__adddf3+0x124>
   8d074:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8d078:	d30c      	bcc.n	8d094 <__adddf3+0x10c>
   8d07a:	0849      	lsrs	r1, r1, #1
   8d07c:	ea5f 0030 	movs.w	r0, r0, rrx
   8d080:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8d084:	f104 0401 	add.w	r4, r4, #1
   8d088:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8d08c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8d090:	f080 809a 	bcs.w	8d1c8 <__adddf3+0x240>
   8d094:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8d098:	bf08      	it	eq
   8d09a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d09e:	f150 0000 	adcs.w	r0, r0, #0
   8d0a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d0a6:	ea41 0105 	orr.w	r1, r1, r5
   8d0aa:	bd30      	pop	{r4, r5, pc}
   8d0ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8d0b0:	4140      	adcs	r0, r0
   8d0b2:	eb41 0101 	adc.w	r1, r1, r1
   8d0b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d0ba:	f1a4 0401 	sub.w	r4, r4, #1
   8d0be:	d1e9      	bne.n	8d094 <__adddf3+0x10c>
   8d0c0:	f091 0f00 	teq	r1, #0
   8d0c4:	bf04      	itt	eq
   8d0c6:	4601      	moveq	r1, r0
   8d0c8:	2000      	moveq	r0, #0
   8d0ca:	fab1 f381 	clz	r3, r1
   8d0ce:	bf08      	it	eq
   8d0d0:	3320      	addeq	r3, #32
   8d0d2:	f1a3 030b 	sub.w	r3, r3, #11
   8d0d6:	f1b3 0220 	subs.w	r2, r3, #32
   8d0da:	da0c      	bge.n	8d0f6 <__adddf3+0x16e>
   8d0dc:	320c      	adds	r2, #12
   8d0de:	dd08      	ble.n	8d0f2 <__adddf3+0x16a>
   8d0e0:	f102 0c14 	add.w	ip, r2, #20
   8d0e4:	f1c2 020c 	rsb	r2, r2, #12
   8d0e8:	fa01 f00c 	lsl.w	r0, r1, ip
   8d0ec:	fa21 f102 	lsr.w	r1, r1, r2
   8d0f0:	e00c      	b.n	8d10c <__adddf3+0x184>
   8d0f2:	f102 0214 	add.w	r2, r2, #20
   8d0f6:	bfd8      	it	le
   8d0f8:	f1c2 0c20 	rsble	ip, r2, #32
   8d0fc:	fa01 f102 	lsl.w	r1, r1, r2
   8d100:	fa20 fc0c 	lsr.w	ip, r0, ip
   8d104:	bfdc      	itt	le
   8d106:	ea41 010c 	orrle.w	r1, r1, ip
   8d10a:	4090      	lslle	r0, r2
   8d10c:	1ae4      	subs	r4, r4, r3
   8d10e:	bfa2      	ittt	ge
   8d110:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8d114:	4329      	orrge	r1, r5
   8d116:	bd30      	popge	{r4, r5, pc}
   8d118:	ea6f 0404 	mvn.w	r4, r4
   8d11c:	3c1f      	subs	r4, #31
   8d11e:	da1c      	bge.n	8d15a <__adddf3+0x1d2>
   8d120:	340c      	adds	r4, #12
   8d122:	dc0e      	bgt.n	8d142 <__adddf3+0x1ba>
   8d124:	f104 0414 	add.w	r4, r4, #20
   8d128:	f1c4 0220 	rsb	r2, r4, #32
   8d12c:	fa20 f004 	lsr.w	r0, r0, r4
   8d130:	fa01 f302 	lsl.w	r3, r1, r2
   8d134:	ea40 0003 	orr.w	r0, r0, r3
   8d138:	fa21 f304 	lsr.w	r3, r1, r4
   8d13c:	ea45 0103 	orr.w	r1, r5, r3
   8d140:	bd30      	pop	{r4, r5, pc}
   8d142:	f1c4 040c 	rsb	r4, r4, #12
   8d146:	f1c4 0220 	rsb	r2, r4, #32
   8d14a:	fa20 f002 	lsr.w	r0, r0, r2
   8d14e:	fa01 f304 	lsl.w	r3, r1, r4
   8d152:	ea40 0003 	orr.w	r0, r0, r3
   8d156:	4629      	mov	r1, r5
   8d158:	bd30      	pop	{r4, r5, pc}
   8d15a:	fa21 f004 	lsr.w	r0, r1, r4
   8d15e:	4629      	mov	r1, r5
   8d160:	bd30      	pop	{r4, r5, pc}
   8d162:	f094 0f00 	teq	r4, #0
   8d166:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8d16a:	bf06      	itte	eq
   8d16c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8d170:	3401      	addeq	r4, #1
   8d172:	3d01      	subne	r5, #1
   8d174:	e74e      	b.n	8d014 <__adddf3+0x8c>
   8d176:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d17a:	bf18      	it	ne
   8d17c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d180:	d029      	beq.n	8d1d6 <__adddf3+0x24e>
   8d182:	ea94 0f05 	teq	r4, r5
   8d186:	bf08      	it	eq
   8d188:	ea90 0f02 	teqeq	r0, r2
   8d18c:	d005      	beq.n	8d19a <__adddf3+0x212>
   8d18e:	ea54 0c00 	orrs.w	ip, r4, r0
   8d192:	bf04      	itt	eq
   8d194:	4619      	moveq	r1, r3
   8d196:	4610      	moveq	r0, r2
   8d198:	bd30      	pop	{r4, r5, pc}
   8d19a:	ea91 0f03 	teq	r1, r3
   8d19e:	bf1e      	ittt	ne
   8d1a0:	2100      	movne	r1, #0
   8d1a2:	2000      	movne	r0, #0
   8d1a4:	bd30      	popne	{r4, r5, pc}
   8d1a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8d1aa:	d105      	bne.n	8d1b8 <__adddf3+0x230>
   8d1ac:	0040      	lsls	r0, r0, #1
   8d1ae:	4149      	adcs	r1, r1
   8d1b0:	bf28      	it	cs
   8d1b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8d1b6:	bd30      	pop	{r4, r5, pc}
   8d1b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8d1bc:	bf3c      	itt	cc
   8d1be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8d1c2:	bd30      	popcc	{r4, r5, pc}
   8d1c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d1c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8d1cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d1d0:	f04f 0000 	mov.w	r0, #0
   8d1d4:	bd30      	pop	{r4, r5, pc}
   8d1d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d1da:	bf1a      	itte	ne
   8d1dc:	4619      	movne	r1, r3
   8d1de:	4610      	movne	r0, r2
   8d1e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8d1e4:	bf1c      	itt	ne
   8d1e6:	460b      	movne	r3, r1
   8d1e8:	4602      	movne	r2, r0
   8d1ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d1ee:	bf06      	itte	eq
   8d1f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8d1f4:	ea91 0f03 	teqeq	r1, r3
   8d1f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8d1fc:	bd30      	pop	{r4, r5, pc}
   8d1fe:	bf00      	nop

0008d200 <__aeabi_ui2d>:
   8d200:	f090 0f00 	teq	r0, #0
   8d204:	bf04      	itt	eq
   8d206:	2100      	moveq	r1, #0
   8d208:	4770      	bxeq	lr
   8d20a:	b530      	push	{r4, r5, lr}
   8d20c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d210:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d214:	f04f 0500 	mov.w	r5, #0
   8d218:	f04f 0100 	mov.w	r1, #0
   8d21c:	e750      	b.n	8d0c0 <__adddf3+0x138>
   8d21e:	bf00      	nop

0008d220 <__aeabi_i2d>:
   8d220:	f090 0f00 	teq	r0, #0
   8d224:	bf04      	itt	eq
   8d226:	2100      	moveq	r1, #0
   8d228:	4770      	bxeq	lr
   8d22a:	b530      	push	{r4, r5, lr}
   8d22c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d230:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d234:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8d238:	bf48      	it	mi
   8d23a:	4240      	negmi	r0, r0
   8d23c:	f04f 0100 	mov.w	r1, #0
   8d240:	e73e      	b.n	8d0c0 <__adddf3+0x138>
   8d242:	bf00      	nop

0008d244 <__aeabi_f2d>:
   8d244:	0042      	lsls	r2, r0, #1
   8d246:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8d24a:	ea4f 0131 	mov.w	r1, r1, rrx
   8d24e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8d252:	bf1f      	itttt	ne
   8d254:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8d258:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d25c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8d260:	4770      	bxne	lr
   8d262:	f092 0f00 	teq	r2, #0
   8d266:	bf14      	ite	ne
   8d268:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d26c:	4770      	bxeq	lr
   8d26e:	b530      	push	{r4, r5, lr}
   8d270:	f44f 7460 	mov.w	r4, #896	; 0x380
   8d274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d27c:	e720      	b.n	8d0c0 <__adddf3+0x138>
   8d27e:	bf00      	nop

0008d280 <__aeabi_ul2d>:
   8d280:	ea50 0201 	orrs.w	r2, r0, r1
   8d284:	bf08      	it	eq
   8d286:	4770      	bxeq	lr
   8d288:	b530      	push	{r4, r5, lr}
   8d28a:	f04f 0500 	mov.w	r5, #0
   8d28e:	e00a      	b.n	8d2a6 <__aeabi_l2d+0x16>

0008d290 <__aeabi_l2d>:
   8d290:	ea50 0201 	orrs.w	r2, r0, r1
   8d294:	bf08      	it	eq
   8d296:	4770      	bxeq	lr
   8d298:	b530      	push	{r4, r5, lr}
   8d29a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8d29e:	d502      	bpl.n	8d2a6 <__aeabi_l2d+0x16>
   8d2a0:	4240      	negs	r0, r0
   8d2a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d2a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d2aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d2ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8d2b2:	f43f aedc 	beq.w	8d06e <__adddf3+0xe6>
   8d2b6:	f04f 0203 	mov.w	r2, #3
   8d2ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d2be:	bf18      	it	ne
   8d2c0:	3203      	addne	r2, #3
   8d2c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d2c6:	bf18      	it	ne
   8d2c8:	3203      	addne	r2, #3
   8d2ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8d2ce:	f1c2 0320 	rsb	r3, r2, #32
   8d2d2:	fa00 fc03 	lsl.w	ip, r0, r3
   8d2d6:	fa20 f002 	lsr.w	r0, r0, r2
   8d2da:	fa01 fe03 	lsl.w	lr, r1, r3
   8d2de:	ea40 000e 	orr.w	r0, r0, lr
   8d2e2:	fa21 f102 	lsr.w	r1, r1, r2
   8d2e6:	4414      	add	r4, r2
   8d2e8:	e6c1      	b.n	8d06e <__adddf3+0xe6>
   8d2ea:	bf00      	nop

0008d2ec <__aeabi_dmul>:
   8d2ec:	b570      	push	{r4, r5, r6, lr}
   8d2ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d2f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d2f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d2fa:	bf1d      	ittte	ne
   8d2fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d300:	ea94 0f0c 	teqne	r4, ip
   8d304:	ea95 0f0c 	teqne	r5, ip
   8d308:	f000 f8de 	bleq	8d4c8 <__aeabi_dmul+0x1dc>
   8d30c:	442c      	add	r4, r5
   8d30e:	ea81 0603 	eor.w	r6, r1, r3
   8d312:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8d316:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8d31a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8d31e:	bf18      	it	ne
   8d320:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8d324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d32c:	d038      	beq.n	8d3a0 <__aeabi_dmul+0xb4>
   8d32e:	fba0 ce02 	umull	ip, lr, r0, r2
   8d332:	f04f 0500 	mov.w	r5, #0
   8d336:	fbe1 e502 	umlal	lr, r5, r1, r2
   8d33a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8d33e:	fbe0 e503 	umlal	lr, r5, r0, r3
   8d342:	f04f 0600 	mov.w	r6, #0
   8d346:	fbe1 5603 	umlal	r5, r6, r1, r3
   8d34a:	f09c 0f00 	teq	ip, #0
   8d34e:	bf18      	it	ne
   8d350:	f04e 0e01 	orrne.w	lr, lr, #1
   8d354:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8d358:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8d35c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8d360:	d204      	bcs.n	8d36c <__aeabi_dmul+0x80>
   8d362:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8d366:	416d      	adcs	r5, r5
   8d368:	eb46 0606 	adc.w	r6, r6, r6
   8d36c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8d370:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8d374:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8d378:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8d37c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8d380:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d384:	bf88      	it	hi
   8d386:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d38a:	d81e      	bhi.n	8d3ca <__aeabi_dmul+0xde>
   8d38c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8d390:	bf08      	it	eq
   8d392:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8d396:	f150 0000 	adcs.w	r0, r0, #0
   8d39a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d39e:	bd70      	pop	{r4, r5, r6, pc}
   8d3a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8d3a4:	ea46 0101 	orr.w	r1, r6, r1
   8d3a8:	ea40 0002 	orr.w	r0, r0, r2
   8d3ac:	ea81 0103 	eor.w	r1, r1, r3
   8d3b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8d3b4:	bfc2      	ittt	gt
   8d3b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d3ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d3be:	bd70      	popgt	{r4, r5, r6, pc}
   8d3c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d3c4:	f04f 0e00 	mov.w	lr, #0
   8d3c8:	3c01      	subs	r4, #1
   8d3ca:	f300 80ab 	bgt.w	8d524 <__aeabi_dmul+0x238>
   8d3ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8d3d2:	bfde      	ittt	le
   8d3d4:	2000      	movle	r0, #0
   8d3d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8d3da:	bd70      	pople	{r4, r5, r6, pc}
   8d3dc:	f1c4 0400 	rsb	r4, r4, #0
   8d3e0:	3c20      	subs	r4, #32
   8d3e2:	da35      	bge.n	8d450 <__aeabi_dmul+0x164>
   8d3e4:	340c      	adds	r4, #12
   8d3e6:	dc1b      	bgt.n	8d420 <__aeabi_dmul+0x134>
   8d3e8:	f104 0414 	add.w	r4, r4, #20
   8d3ec:	f1c4 0520 	rsb	r5, r4, #32
   8d3f0:	fa00 f305 	lsl.w	r3, r0, r5
   8d3f4:	fa20 f004 	lsr.w	r0, r0, r4
   8d3f8:	fa01 f205 	lsl.w	r2, r1, r5
   8d3fc:	ea40 0002 	orr.w	r0, r0, r2
   8d400:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8d404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d408:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d40c:	fa21 f604 	lsr.w	r6, r1, r4
   8d410:	eb42 0106 	adc.w	r1, r2, r6
   8d414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d418:	bf08      	it	eq
   8d41a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d41e:	bd70      	pop	{r4, r5, r6, pc}
   8d420:	f1c4 040c 	rsb	r4, r4, #12
   8d424:	f1c4 0520 	rsb	r5, r4, #32
   8d428:	fa00 f304 	lsl.w	r3, r0, r4
   8d42c:	fa20 f005 	lsr.w	r0, r0, r5
   8d430:	fa01 f204 	lsl.w	r2, r1, r4
   8d434:	ea40 0002 	orr.w	r0, r0, r2
   8d438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d43c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d440:	f141 0100 	adc.w	r1, r1, #0
   8d444:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d448:	bf08      	it	eq
   8d44a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d44e:	bd70      	pop	{r4, r5, r6, pc}
   8d450:	f1c4 0520 	rsb	r5, r4, #32
   8d454:	fa00 f205 	lsl.w	r2, r0, r5
   8d458:	ea4e 0e02 	orr.w	lr, lr, r2
   8d45c:	fa20 f304 	lsr.w	r3, r0, r4
   8d460:	fa01 f205 	lsl.w	r2, r1, r5
   8d464:	ea43 0302 	orr.w	r3, r3, r2
   8d468:	fa21 f004 	lsr.w	r0, r1, r4
   8d46c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d470:	fa21 f204 	lsr.w	r2, r1, r4
   8d474:	ea20 0002 	bic.w	r0, r0, r2
   8d478:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d47c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d480:	bf08      	it	eq
   8d482:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d486:	bd70      	pop	{r4, r5, r6, pc}
   8d488:	f094 0f00 	teq	r4, #0
   8d48c:	d10f      	bne.n	8d4ae <__aeabi_dmul+0x1c2>
   8d48e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d492:	0040      	lsls	r0, r0, #1
   8d494:	eb41 0101 	adc.w	r1, r1, r1
   8d498:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d49c:	bf08      	it	eq
   8d49e:	3c01      	subeq	r4, #1
   8d4a0:	d0f7      	beq.n	8d492 <__aeabi_dmul+0x1a6>
   8d4a2:	ea41 0106 	orr.w	r1, r1, r6
   8d4a6:	f095 0f00 	teq	r5, #0
   8d4aa:	bf18      	it	ne
   8d4ac:	4770      	bxne	lr
   8d4ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d4b2:	0052      	lsls	r2, r2, #1
   8d4b4:	eb43 0303 	adc.w	r3, r3, r3
   8d4b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d4bc:	bf08      	it	eq
   8d4be:	3d01      	subeq	r5, #1
   8d4c0:	d0f7      	beq.n	8d4b2 <__aeabi_dmul+0x1c6>
   8d4c2:	ea43 0306 	orr.w	r3, r3, r6
   8d4c6:	4770      	bx	lr
   8d4c8:	ea94 0f0c 	teq	r4, ip
   8d4cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d4d0:	bf18      	it	ne
   8d4d2:	ea95 0f0c 	teqne	r5, ip
   8d4d6:	d00c      	beq.n	8d4f2 <__aeabi_dmul+0x206>
   8d4d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d4dc:	bf18      	it	ne
   8d4de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d4e2:	d1d1      	bne.n	8d488 <__aeabi_dmul+0x19c>
   8d4e4:	ea81 0103 	eor.w	r1, r1, r3
   8d4e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d4ec:	f04f 0000 	mov.w	r0, #0
   8d4f0:	bd70      	pop	{r4, r5, r6, pc}
   8d4f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d4f6:	bf06      	itte	eq
   8d4f8:	4610      	moveq	r0, r2
   8d4fa:	4619      	moveq	r1, r3
   8d4fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d500:	d019      	beq.n	8d536 <__aeabi_dmul+0x24a>
   8d502:	ea94 0f0c 	teq	r4, ip
   8d506:	d102      	bne.n	8d50e <__aeabi_dmul+0x222>
   8d508:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d50c:	d113      	bne.n	8d536 <__aeabi_dmul+0x24a>
   8d50e:	ea95 0f0c 	teq	r5, ip
   8d512:	d105      	bne.n	8d520 <__aeabi_dmul+0x234>
   8d514:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d518:	bf1c      	itt	ne
   8d51a:	4610      	movne	r0, r2
   8d51c:	4619      	movne	r1, r3
   8d51e:	d10a      	bne.n	8d536 <__aeabi_dmul+0x24a>
   8d520:	ea81 0103 	eor.w	r1, r1, r3
   8d524:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d528:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d52c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d530:	f04f 0000 	mov.w	r0, #0
   8d534:	bd70      	pop	{r4, r5, r6, pc}
   8d536:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d53a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d53e:	bd70      	pop	{r4, r5, r6, pc}

0008d540 <__aeabi_ddiv>:
   8d540:	b570      	push	{r4, r5, r6, lr}
   8d542:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d54a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d54e:	bf1d      	ittte	ne
   8d550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d554:	ea94 0f0c 	teqne	r4, ip
   8d558:	ea95 0f0c 	teqne	r5, ip
   8d55c:	f000 f8a7 	bleq	8d6ae <__aeabi_ddiv+0x16e>
   8d560:	eba4 0405 	sub.w	r4, r4, r5
   8d564:	ea81 0e03 	eor.w	lr, r1, r3
   8d568:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d56c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d570:	f000 8088 	beq.w	8d684 <__aeabi_ddiv+0x144>
   8d574:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d578:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d57c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d580:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d584:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d588:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d58c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d590:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d594:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d598:	429d      	cmp	r5, r3
   8d59a:	bf08      	it	eq
   8d59c:	4296      	cmpeq	r6, r2
   8d59e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d5a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d5a6:	d202      	bcs.n	8d5ae <__aeabi_ddiv+0x6e>
   8d5a8:	085b      	lsrs	r3, r3, #1
   8d5aa:	ea4f 0232 	mov.w	r2, r2, rrx
   8d5ae:	1ab6      	subs	r6, r6, r2
   8d5b0:	eb65 0503 	sbc.w	r5, r5, r3
   8d5b4:	085b      	lsrs	r3, r3, #1
   8d5b6:	ea4f 0232 	mov.w	r2, r2, rrx
   8d5ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d5be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d5c2:	ebb6 0e02 	subs.w	lr, r6, r2
   8d5c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d5ca:	bf22      	ittt	cs
   8d5cc:	1ab6      	subcs	r6, r6, r2
   8d5ce:	4675      	movcs	r5, lr
   8d5d0:	ea40 000c 	orrcs.w	r0, r0, ip
   8d5d4:	085b      	lsrs	r3, r3, #1
   8d5d6:	ea4f 0232 	mov.w	r2, r2, rrx
   8d5da:	ebb6 0e02 	subs.w	lr, r6, r2
   8d5de:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d5e2:	bf22      	ittt	cs
   8d5e4:	1ab6      	subcs	r6, r6, r2
   8d5e6:	4675      	movcs	r5, lr
   8d5e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d5ec:	085b      	lsrs	r3, r3, #1
   8d5ee:	ea4f 0232 	mov.w	r2, r2, rrx
   8d5f2:	ebb6 0e02 	subs.w	lr, r6, r2
   8d5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d5fa:	bf22      	ittt	cs
   8d5fc:	1ab6      	subcs	r6, r6, r2
   8d5fe:	4675      	movcs	r5, lr
   8d600:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d604:	085b      	lsrs	r3, r3, #1
   8d606:	ea4f 0232 	mov.w	r2, r2, rrx
   8d60a:	ebb6 0e02 	subs.w	lr, r6, r2
   8d60e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d612:	bf22      	ittt	cs
   8d614:	1ab6      	subcs	r6, r6, r2
   8d616:	4675      	movcs	r5, lr
   8d618:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d61c:	ea55 0e06 	orrs.w	lr, r5, r6
   8d620:	d018      	beq.n	8d654 <__aeabi_ddiv+0x114>
   8d622:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d626:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d62a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d62e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d632:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d636:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d63a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d63e:	d1c0      	bne.n	8d5c2 <__aeabi_ddiv+0x82>
   8d640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d644:	d10b      	bne.n	8d65e <__aeabi_ddiv+0x11e>
   8d646:	ea41 0100 	orr.w	r1, r1, r0
   8d64a:	f04f 0000 	mov.w	r0, #0
   8d64e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d652:	e7b6      	b.n	8d5c2 <__aeabi_ddiv+0x82>
   8d654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d658:	bf04      	itt	eq
   8d65a:	4301      	orreq	r1, r0
   8d65c:	2000      	moveq	r0, #0
   8d65e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d662:	bf88      	it	hi
   8d664:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d668:	f63f aeaf 	bhi.w	8d3ca <__aeabi_dmul+0xde>
   8d66c:	ebb5 0c03 	subs.w	ip, r5, r3
   8d670:	bf04      	itt	eq
   8d672:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d676:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d67a:	f150 0000 	adcs.w	r0, r0, #0
   8d67e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d682:	bd70      	pop	{r4, r5, r6, pc}
   8d684:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d688:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d68c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d690:	bfc2      	ittt	gt
   8d692:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d69a:	bd70      	popgt	{r4, r5, r6, pc}
   8d69c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d6a0:	f04f 0e00 	mov.w	lr, #0
   8d6a4:	3c01      	subs	r4, #1
   8d6a6:	e690      	b.n	8d3ca <__aeabi_dmul+0xde>
   8d6a8:	ea45 0e06 	orr.w	lr, r5, r6
   8d6ac:	e68d      	b.n	8d3ca <__aeabi_dmul+0xde>
   8d6ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d6b2:	ea94 0f0c 	teq	r4, ip
   8d6b6:	bf08      	it	eq
   8d6b8:	ea95 0f0c 	teqeq	r5, ip
   8d6bc:	f43f af3b 	beq.w	8d536 <__aeabi_dmul+0x24a>
   8d6c0:	ea94 0f0c 	teq	r4, ip
   8d6c4:	d10a      	bne.n	8d6dc <__aeabi_ddiv+0x19c>
   8d6c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d6ca:	f47f af34 	bne.w	8d536 <__aeabi_dmul+0x24a>
   8d6ce:	ea95 0f0c 	teq	r5, ip
   8d6d2:	f47f af25 	bne.w	8d520 <__aeabi_dmul+0x234>
   8d6d6:	4610      	mov	r0, r2
   8d6d8:	4619      	mov	r1, r3
   8d6da:	e72c      	b.n	8d536 <__aeabi_dmul+0x24a>
   8d6dc:	ea95 0f0c 	teq	r5, ip
   8d6e0:	d106      	bne.n	8d6f0 <__aeabi_ddiv+0x1b0>
   8d6e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d6e6:	f43f aefd 	beq.w	8d4e4 <__aeabi_dmul+0x1f8>
   8d6ea:	4610      	mov	r0, r2
   8d6ec:	4619      	mov	r1, r3
   8d6ee:	e722      	b.n	8d536 <__aeabi_dmul+0x24a>
   8d6f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d6f4:	bf18      	it	ne
   8d6f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d6fa:	f47f aec5 	bne.w	8d488 <__aeabi_dmul+0x19c>
   8d6fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d702:	f47f af0d 	bne.w	8d520 <__aeabi_dmul+0x234>
   8d706:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d70a:	f47f aeeb 	bne.w	8d4e4 <__aeabi_dmul+0x1f8>
   8d70e:	e712      	b.n	8d536 <__aeabi_dmul+0x24a>

0008d710 <__gedf2>:
   8d710:	f04f 3cff 	mov.w	ip, #4294967295
   8d714:	e006      	b.n	8d724 <__cmpdf2+0x4>
   8d716:	bf00      	nop

0008d718 <__ledf2>:
   8d718:	f04f 0c01 	mov.w	ip, #1
   8d71c:	e002      	b.n	8d724 <__cmpdf2+0x4>
   8d71e:	bf00      	nop

0008d720 <__cmpdf2>:
   8d720:	f04f 0c01 	mov.w	ip, #1
   8d724:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d728:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d72c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d730:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d734:	bf18      	it	ne
   8d736:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d73a:	d01b      	beq.n	8d774 <__cmpdf2+0x54>
   8d73c:	b001      	add	sp, #4
   8d73e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d742:	bf0c      	ite	eq
   8d744:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d748:	ea91 0f03 	teqne	r1, r3
   8d74c:	bf02      	ittt	eq
   8d74e:	ea90 0f02 	teqeq	r0, r2
   8d752:	2000      	moveq	r0, #0
   8d754:	4770      	bxeq	lr
   8d756:	f110 0f00 	cmn.w	r0, #0
   8d75a:	ea91 0f03 	teq	r1, r3
   8d75e:	bf58      	it	pl
   8d760:	4299      	cmppl	r1, r3
   8d762:	bf08      	it	eq
   8d764:	4290      	cmpeq	r0, r2
   8d766:	bf2c      	ite	cs
   8d768:	17d8      	asrcs	r0, r3, #31
   8d76a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d76e:	f040 0001 	orr.w	r0, r0, #1
   8d772:	4770      	bx	lr
   8d774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d77c:	d102      	bne.n	8d784 <__cmpdf2+0x64>
   8d77e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d782:	d107      	bne.n	8d794 <__cmpdf2+0x74>
   8d784:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d78c:	d1d6      	bne.n	8d73c <__cmpdf2+0x1c>
   8d78e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d792:	d0d3      	beq.n	8d73c <__cmpdf2+0x1c>
   8d794:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d798:	4770      	bx	lr
   8d79a:	bf00      	nop

0008d79c <__aeabi_cdrcmple>:
   8d79c:	4684      	mov	ip, r0
   8d79e:	4610      	mov	r0, r2
   8d7a0:	4662      	mov	r2, ip
   8d7a2:	468c      	mov	ip, r1
   8d7a4:	4619      	mov	r1, r3
   8d7a6:	4663      	mov	r3, ip
   8d7a8:	e000      	b.n	8d7ac <__aeabi_cdcmpeq>
   8d7aa:	bf00      	nop

0008d7ac <__aeabi_cdcmpeq>:
   8d7ac:	b501      	push	{r0, lr}
   8d7ae:	f7ff ffb7 	bl	8d720 <__cmpdf2>
   8d7b2:	2800      	cmp	r0, #0
   8d7b4:	bf48      	it	mi
   8d7b6:	f110 0f00 	cmnmi.w	r0, #0
   8d7ba:	bd01      	pop	{r0, pc}

0008d7bc <__aeabi_dcmpeq>:
   8d7bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d7c0:	f7ff fff4 	bl	8d7ac <__aeabi_cdcmpeq>
   8d7c4:	bf0c      	ite	eq
   8d7c6:	2001      	moveq	r0, #1
   8d7c8:	2000      	movne	r0, #0
   8d7ca:	f85d fb08 	ldr.w	pc, [sp], #8
   8d7ce:	bf00      	nop

0008d7d0 <__aeabi_dcmplt>:
   8d7d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d7d4:	f7ff ffea 	bl	8d7ac <__aeabi_cdcmpeq>
   8d7d8:	bf34      	ite	cc
   8d7da:	2001      	movcc	r0, #1
   8d7dc:	2000      	movcs	r0, #0
   8d7de:	f85d fb08 	ldr.w	pc, [sp], #8
   8d7e2:	bf00      	nop

0008d7e4 <__aeabi_dcmple>:
   8d7e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d7e8:	f7ff ffe0 	bl	8d7ac <__aeabi_cdcmpeq>
   8d7ec:	bf94      	ite	ls
   8d7ee:	2001      	movls	r0, #1
   8d7f0:	2000      	movhi	r0, #0
   8d7f2:	f85d fb08 	ldr.w	pc, [sp], #8
   8d7f6:	bf00      	nop

0008d7f8 <__aeabi_dcmpge>:
   8d7f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d7fc:	f7ff ffce 	bl	8d79c <__aeabi_cdrcmple>
   8d800:	bf94      	ite	ls
   8d802:	2001      	movls	r0, #1
   8d804:	2000      	movhi	r0, #0
   8d806:	f85d fb08 	ldr.w	pc, [sp], #8
   8d80a:	bf00      	nop

0008d80c <__aeabi_dcmpgt>:
   8d80c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d810:	f7ff ffc4 	bl	8d79c <__aeabi_cdrcmple>
   8d814:	bf34      	ite	cc
   8d816:	2001      	movcc	r0, #1
   8d818:	2000      	movcs	r0, #0
   8d81a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d81e:	bf00      	nop

0008d820 <__aeabi_dcmpun>:
   8d820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d828:	d102      	bne.n	8d830 <__aeabi_dcmpun+0x10>
   8d82a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d82e:	d10a      	bne.n	8d846 <__aeabi_dcmpun+0x26>
   8d830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d838:	d102      	bne.n	8d840 <__aeabi_dcmpun+0x20>
   8d83a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d83e:	d102      	bne.n	8d846 <__aeabi_dcmpun+0x26>
   8d840:	f04f 0000 	mov.w	r0, #0
   8d844:	4770      	bx	lr
   8d846:	f04f 0001 	mov.w	r0, #1
   8d84a:	4770      	bx	lr

0008d84c <__aeabi_d2iz>:
   8d84c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d854:	d215      	bcs.n	8d882 <__aeabi_d2iz+0x36>
   8d856:	d511      	bpl.n	8d87c <__aeabi_d2iz+0x30>
   8d858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d85c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d860:	d912      	bls.n	8d888 <__aeabi_d2iz+0x3c>
   8d862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d86a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d86e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d872:	fa23 f002 	lsr.w	r0, r3, r2
   8d876:	bf18      	it	ne
   8d878:	4240      	negne	r0, r0
   8d87a:	4770      	bx	lr
   8d87c:	f04f 0000 	mov.w	r0, #0
   8d880:	4770      	bx	lr
   8d882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d886:	d105      	bne.n	8d894 <__aeabi_d2iz+0x48>
   8d888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d88c:	bf08      	it	eq
   8d88e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d892:	4770      	bx	lr
   8d894:	f04f 0000 	mov.w	r0, #0
   8d898:	4770      	bx	lr
   8d89a:	bf00      	nop
   8d89c:	0000ffff 	.word	0x0000ffff
   8d8a0:	706d696c 	.word	0x706d696c
   8d8a4:	006e696b 	.word	0x006e696b
   8d8a8:	00000000 	.word	0x00000000
   8d8ac:	00000174 	.word	0x00000174
   8d8b0:	0000022e 	.word	0x0000022e
   8d8b4:	000002e8 	.word	0x000002e8
   8d8b8:	0000045c 	.word	0x0000045c
   8d8bc:	000005d0 	.word	0x000005d0
   8d8c0:	00000744 	.word	0x00000744
	...
   8d8cc:	00000200 	.word	0x00000200
   8d8d0:	00000300 	.word	0x00000300
   8d8d4:	00000400 	.word	0x00000400
   8d8d8:	00000600 	.word	0x00000600
   8d8dc:	00000800 	.word	0x00000800
	...
   8d8ec:	00000001 	.word	0x00000001
   8d8f0:	00000002 	.word	0x00000002
   8d8f4:	00000004 	.word	0x00000004
   8d8f8:	00000008 	.word	0x00000008
   8d8fc:	00000010 	.word	0x00000010
   8d900:	00000020 	.word	0x00000020
   8d904:	00000040 	.word	0x00000040
   8d908:	0000000c 	.word	0x0000000c
   8d90c:	00000014 	.word	0x00000014
   8d910:	000a7825 	.word	0x000a7825
   8d914:	20525441 	.word	0x20525441
   8d918:	20642528 	.word	0x20642528
   8d91c:	296e656c 	.word	0x296e656c
   8d920:	0000203a 	.word	0x0000203a
   8d924:	78323025 	.word	0x78323025
   8d928:	00000020 	.word	0x00000020
   8d92c:	50525641 	.word	0x50525641
   8d930:	3a474f52 	.word	0x3a474f52
   8d934:	61724520 	.word	0x61724520
   8d938:	203a6573 	.word	0x203a6573
   8d93c:	6c796150 	.word	0x6c796150
   8d940:	2064616f 	.word	0x2064616f
   8d944:	657a6973 	.word	0x657a6973
   8d948:	25203d20 	.word	0x25203d20
   8d94c:	65202c64 	.word	0x65202c64
   8d950:	726f7272 	.word	0x726f7272
   8d954:	000a3f21 	.word	0x000a3f21
   8d958:	50525641 	.word	0x50525641
   8d95c:	3a474f52 	.word	0x3a474f52
   8d960:	746e4520 	.word	0x746e4520
   8d964:	49207265 	.word	0x49207265
   8d968:	4d205053 	.word	0x4d205053
   8d96c:	3a65646f 	.word	0x3a65646f
   8d970:	0a782520 	.word	0x0a782520
   8d974:	00000000 	.word	0x00000000
   8d978:	50525641 	.word	0x50525641
   8d97c:	3a474f52 	.word	0x3a474f52
   8d980:	79615020 	.word	0x79615020
   8d984:	64616f6c 	.word	0x64616f6c
   8d988:	7a697320 	.word	0x7a697320
   8d98c:	203d2065 	.word	0x203d2065
   8d990:	202c6425 	.word	0x202c6425
   8d994:	6f727265 	.word	0x6f727265
   8d998:	0a3f2172 	.word	0x0a3f2172
   8d99c:	00000000 	.word	0x00000000
   8d9a0:	494c5743 	.word	0x494c5743
   8d9a4:	415f4554 	.word	0x415f4554
   8d9a8:	53495256 	.word	0x53495256
   8d9ac:	00000050 	.word	0x00000050
   8d9b0:	50525641 	.word	0x50525641
   8d9b4:	3a474f52 	.word	0x3a474f52
   8d9b8:	64644120 	.word	0x64644120
   8d9bc:	73736572 	.word	0x73736572
   8d9c0:	25203d20 	.word	0x25203d20
   8d9c4:	0a783230 	.word	0x0a783230
   8d9c8:	00000000 	.word	0x00000000
   8d9cc:	62616e45 	.word	0x62616e45
   8d9d0:	676e696c 	.word	0x676e696c
   8d9d4:	41535520 	.word	0x41535520
   8d9d8:	0a305452 	.word	0x0a305452
   8d9dc:	00000000 	.word	0x00000000
   8d9e0:	3a525245 	.word	0x3a525245
   8d9e4:	766e4920 	.word	0x766e4920
   8d9e8:	64696c61 	.word	0x64696c61
   8d9ec:	41535520 	.word	0x41535520
   8d9f0:	43205452 	.word	0x43205452
   8d9f4:	69666e6f 	.word	0x69666e6f
   8d9f8:	61727567 	.word	0x61727567
   8d9fc:	6e6f6974 	.word	0x6e6f6974
   8da00:	63617020 	.word	0x63617020
   8da04:	3f74656b 	.word	0x3f74656b
   8da08:	0000000a 	.word	0x0000000a

0008da0c <BOS_DESC>:
   8da0c:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8da1c:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8da38:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8da48:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8da58:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8da68:	78383025 00000000 2072614d 32203320     %08x....Mar  3 2
   8da78:	00313230 343a3631 37313a37 00000000     021.16:47:17....
   8da88:	70696843 73696857 65726570 694c2d72     ChipWhisperer-Li
   8da98:	4f206574 6e696c6e 46202e65 776d7269     te Online. Firmw
   8daa8:	20657261 6c697562 25203a64 73252f73     are build: %s/%s
   8dab8:	0000000a 69726553 6e206c61 65626d75     ....Serial numbe
   8dac8:	25203a72 00000a73 74746553 20676e69     r: %s...Setting 
   8dad8:	46207075 20414750 6d6d6f43 63696e75     up FPGA Communic
   8dae8:	6f697461 00000a6e 6e657645 6f4c2074     ation...Event Lo
   8daf8:	4520706f 7265746e 202c6465 74696177     op Entered, wait
   8db08:	2e676e69 000a2e2e                       ing.....

0008db10 <_global_impure_ptr>:
   8db10:	20000718 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8db20:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8db30:	46454443 00000000 33323130 37363534     CDEF....01234567
   8db40:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8db50:	0000296c 00000030                       l)..0...

0008db58 <blanks.7223>:
   8db58:	20202020 20202020 20202020 20202020                     

0008db68 <zeroes.7224>:
   8db68:	30303030 30303030 30303030 30303030     0000000000000000

0008db78 <blanks.7217>:
   8db78:	20202020 20202020 20202020 20202020                     

0008db88 <zeroes.7218>:
   8db88:	30303030 30303030 30303030 30303030     0000000000000000
   8db98:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8dba8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008dbb8 <__mprec_bigtens>:
   8dbb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8dbc8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8dbd8:	7f73bf3c 75154fdd                       <.s..O.u

0008dbe0 <__mprec_tens>:
   8dbe0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8dbf0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8dc00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8dc10:	00000000 412e8480 00000000 416312d0     .......A......cA
   8dc20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8dc30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8dc40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8dc50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8dc60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8dc70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8dc80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8dc90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8dca0:	79d99db4 44ea7843                       ...yCx.D

0008dca8 <p05.6055>:
   8dca8:	00000005 00000019 0000007d              ........}...

0008dcb4 <_ctype_>:
   8dcb4:	20202000 20202020 28282020 20282828     .         ((((( 
   8dcc4:	20202020 20202020 20202020 20202020                     
   8dcd4:	10108820 10101010 10101010 10101010      ...............
   8dce4:	04040410 04040404 10040404 10101010     ................
   8dcf4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8dd04:	01010101 01010101 01010101 10101010     ................
   8dd14:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8dd24:	02020202 02020202 02020202 10101010     ................
   8dd34:	00000020 00000000 00000000 00000000      ...............
	...

0008ddb8 <_init>:
   8ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ddba:	bf00      	nop
   8ddbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ddbe:	bc08      	pop	{r3}
   8ddc0:	469e      	mov	lr, r3
   8ddc2:	4770      	bx	lr

0008ddc4 <__init_array_start>:
   8ddc4:	00089f29 	.word	0x00089f29

0008ddc8 <__frame_dummy_init_array_entry>:
   8ddc8:	000800e1                                ....

0008ddcc <_fini>:
   8ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ddce:	bf00      	nop
   8ddd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ddd2:	bc08      	pop	{r3}
   8ddd4:	469e      	mov	lr, r3
   8ddd6:	4770      	bx	lr

0008ddd8 <__fini_array_start>:
   8ddd8:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	200006ec 	.word	0x200006ec

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	000801c5 00080129 00080141 0008013d     ....)...A...=...
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	0008050d 000803b5 00080139 0008013d     ........9...=...
200001d0:	000803a5                                ....

200001d4 <udc_config>:
200001d4:	200002c4 200001f4 200002c4 200002d8     ... ... ... ... 
200001e4:	200001ec 00000000                       ... ....

200001ec <udc_config_hs>:
200001ec:	20000260 200002e4                       `.. ... 

200001f4 <udc_config_lsfs>:
200001f4:	200001fc 200002e4                       ... ... 

200001fc <udc_desc_fs>:
200001fc:	00620209 80000103 000409fa ffff0200     ..b.............
2000020c:	050700ff 00400281 02050700 00004002     ......@......@..
2000021c:	02010b08 00010202 00010409 01020201     ................
2000022c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000023c:	02030124 03830507 09100040 02000204     $.......@.......
2000024c:	0000000a 02850507 07000040 40020605     ........@......@
2000025c:	00000000                                ....

20000260 <udc_desc_hs>:
20000260:	00620209 80000103 000409fa ffff0200     ..b.............
20000270:	050700ff 02000281 02050700 00020002     ................
20000280:	02010b08 00010202 00010409 01020201     ................
20000290:	00240500 24040110 24050202 05020106     ..$....$...$....
200002a0:	02030124 03830507 09100040 02000204     $.......@.......
200002b0:	0000000a 02850507 07000200 00020605     ................
200002c0:	00000002                                ....

200002c4 <udc_device_desc>:
200002c4:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d4:	00000103                                ....

200002d8 <udc_device_qual>:
200002d8:	0200060a 40000000 00000001              .......@....

200002e4 <udi_apis>:
200002e4:	200005b8 200001ac 200001c0              ... ... ... 

200002f0 <gs_uc_state>:
200002f0:	00000201                                         .

200002f1 <scard_protocol_version.8875>:
200002f1:	00000002                                         ...

200002f4 <xram>:
200002f4:	60000000                                ...`

200002f8 <avrispmkIIfreqs>:
200002f8:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
20000308:	0007a120 0003d090 0001e848 00017882      .......H....x..
20000318:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000328:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000338:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000348:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000358:	000099f1 00009586 00008d68 0000861f     ........h.......
20000368:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000378:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000388:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000398:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
200003a8:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003b8:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003c8:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003d8:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003e8:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003f8:	000016f7 000015e7 000014ef 000013e5     ................
20000408:	00001306 00001219 00001142 00001071     ........B...q...
20000418:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000428:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000438:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000448:	000008d1 00000868 00000804 000007a4     ....h...........
20000458:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000468:	00000603 000005bc 00000576 00000535     ........v...5...
20000478:	000004f7 000004bc 00000483 0000044d     ............M...
20000488:	00000419 000003e8 000003b9 0000038d     ................
20000498:	00000362 0000033a 00000313 000002ee     b...:...........
200004a8:	000002cb 000002aa 0000028a 0000026b     ............k...
200004b8:	0000024e 00000233 00000218 000001ff     N...3...........
200004c8:	000001e7 000001d1 000001bb 000001a6     ................
200004d8:	00000192 00000180 0000016e 0000015d     ........n...]...
200004e8:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004f8:	00000112 00000105 000000f9 000000ee     ................
20000508:	000000e2 000000d8 000000ce 000000c4     ................
20000518:	000000bb 000000b2 000000aa 000000a2     ................
20000528:	0000009a 00000093 0000008c 00000086     ................
20000538:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000548:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000558:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000568:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000578:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000588 <ParameterTable>:
20000588:	81000180 01900001 01019100 94170192     ................
20000598:	03982101 01039e06 a40001a1 00010003              .!............

200005a6 <main_b_vendor_enable>:
200005a6:	01f40001                                         ..

200005a8 <defaultTimeoutTicks>:
200005a8:	000001f4                                ....

200005ac <XPROG_Param_EEPageSize>:
200005ac:	00000020                                 ...

200005b0 <XPROG_Param_NVMBase>:
200005b0:	010001c0                                ....

200005b4 <XPROG_Param_NVMCMDRegAddr>:
200005b4:	00003233                                         3

200005b5 <XPROG_Param_NVMCSRRegAddr>:
200005b5:	f5000032                                         2..

200005b8 <udi_api_vendor>:
200005b8:	000845f5 00084619 00084631 000845e9     .E...F..1F...E..
200005c8:	00000000                                ....

200005cc <udc_string_desc>:
200005cc:	00000300 00000000 00000000 00000000     ................
	...

20000610 <udc_string_desc_languageid>:
20000610:	04090304                                ....

20000614 <udc_string_manufacturer_name>:
20000614:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000624:	636e4920 0000002e                        Inc....

2000062c <udc_string_product_name>:
2000062c:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
2000063c:	00006574                                te..

20000640 <winusb_20_desc>:
20000640:	0000000a 06030000 000800ae 00000002     ................
20000650:	001400a4 49570003 4253554e 00000000     ......WINUSB....
20000660:	00000000 00880000 00070004 0044002a     ............*.D.
20000670:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000680:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000690:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
200006a0:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
200006b0:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
200006c0:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
200006d0:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
200006e0:	00390045 0000007d 00010000                       E.9.}.....

200006ea <g_interrupt_enabled>:
200006ea:	09000001                                         ..

200006ec <SystemCoreClock>:
200006ec:	003d0900                                ..=.

200006f0 <usb_serial_number>:
200006f0:	30303030 30303030 30303030 44414544     000000000000DEAD
20000700:	46454542 00000000 00000000 00000000     BEEF............
20000710:	00000000                                ....

20000714 <_impure_ptr>:
20000714:	20000718                                ... 

20000718 <impure_data>:
20000718:	00000000 20000a04 20000a6c 20000ad4     ....... l.. ... 
	...
200007c0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200007d0:	0005deec 0000000b 00000000 00000000     ................
	...

20000b40 <__atexit_recursive_mutex>:
20000b40:	20002e04                                ... 

20000b44 <__global_locale>:
20000b44:	00000043 00000000 00000000 00000000     C...............
	...
20000b64:	00000043 00000000 00000000 00000000     C...............
	...
20000b84:	00000043 00000000 00000000 00000000     C...............
	...
20000ba4:	00000043 00000000 00000000 00000000     C...............
	...
20000bc4:	00000043 00000000 00000000 00000000     C...............
	...
20000be4:	00000043 00000000 00000000 00000000     C...............
	...
20000c04:	00000043 00000000 00000000 00000000     C...............
	...
20000c24:	0008cc89 0008be85 00000000 0008dcb4     ................
20000c34:	0008dbb4 0008d9dc 0008d9dc 0008d9dc     ................
20000c44:	0008d9dc 0008d9dc 0008d9dc 0008d9dc     ................
20000c54:	0008d9dc 0008d9dc ffffffff ffffffff     ................
20000c64:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000c8c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000cb0 <__malloc_av_>:
	...
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0 20000dd8 20000dd8     ... ... ... ... 
20000de8:	20000de0 20000de0 20000de8 20000de8     ... ... ... ... 
20000df8:	20000df0 20000df0 20000df8 20000df8     ... ... ... ... 
20000e08:	20000e00 20000e00 20000e08 20000e08     ... ... ... ... 
20000e18:	20000e10 20000e10 20000e18 20000e18     ... ... ... ... 
20000e28:	20000e20 20000e20 20000e28 20000e28      ..  .. (.. (.. 
20000e38:	20000e30 20000e30 20000e38 20000e38     0.. 0.. 8.. 8.. 
20000e48:	20000e40 20000e40 20000e48 20000e48     @.. @.. H.. H.. 
20000e58:	20000e50 20000e50 20000e58 20000e58     P.. P.. X.. X.. 
20000e68:	20000e60 20000e60 20000e68 20000e68     `.. `.. h.. h.. 
20000e78:	20000e70 20000e70 20000e78 20000e78     p.. p.. x.. x.. 
20000e88:	20000e80 20000e80 20000e88 20000e88     ... ... ... ... 
20000e98:	20000e90 20000e90 20000e98 20000e98     ... ... ... ... 
20000ea8:	20000ea0 20000ea0 20000ea8 20000ea8     ... ... ... ... 
20000eb8:	20000eb0 20000eb0 20000eb8 20000eb8     ... ... ... ... 
20000ec8:	20000ec0 20000ec0 20000ec8 20000ec8     ... ... ... ... 
20000ed8:	20000ed0 20000ed0 20000ed8 20000ed8     ... ... ... ... 
20000ee8:	20000ee0 20000ee0 20000ee8 20000ee8     ... ... ... ... 
20000ef8:	20000ef0 20000ef0 20000ef8 20000ef8     ... ... ... ... 
20000f08:	20000f00 20000f00 20000f08 20000f08     ... ... ... ... 
20000f18:	20000f10 20000f10 20000f18 20000f18     ... ... ... ... 
20000f28:	20000f20 20000f20 20000f28 20000f28      ..  .. (.. (.. 
20000f38:	20000f30 20000f30 20000f38 20000f38     0.. 0.. 8.. 8.. 
20000f48:	20000f40 20000f40 20000f48 20000f48     @.. @.. H.. H.. 
20000f58:	20000f50 20000f50 20000f58 20000f58     P.. P.. X.. X.. 
20000f68:	20000f60 20000f60 20000f68 20000f68     `.. `.. h.. h.. 
20000f78:	20000f70 20000f70 20000f78 20000f78     p.. p.. x.. x.. 
20000f88:	20000f80 20000f80 20000f88 20000f88     ... ... ... ... 
20000f98:	20000f90 20000f90 20000f98 20000f98     ... ... ... ... 
20000fa8:	20000fa0 20000fa0 20000fa8 20000fa8     ... ... ... ... 
20000fb8:	20000fb0 20000fb0 20000fb8 20000fb8     ... ... ... ... 
20000fc8:	20000fc0 20000fc0 20000fc8 20000fc8     ... ... ... ... 
20000fd8:	20000fd0 20000fd0 20000fd8 20000fd8     ... ... ... ... 
20000fe8:	20000fe0 20000fe0 20000fe8 20000fe8     ... ... ... ... 
20000ff8:	20000ff0 20000ff0 20000ff8 20000ff8     ... ... ... ... 
20001008:	20001000 20001000 20001008 20001008     ... ... ... ... 
20001018:	20001010 20001010 20001018 20001018     ... ... ... ... 
20001028:	20001020 20001020 20001028 20001028      ..  .. (.. (.. 
20001038:	20001030 20001030 20001038 20001038     0.. 0.. 8.. 8.. 
20001048:	20001040 20001040 20001048 20001048     @.. @.. H.. H.. 
20001058:	20001050 20001050 20001058 20001058     P.. P.. X.. X.. 
20001068:	20001060 20001060 20001068 20001068     `.. `.. h.. h.. 
20001078:	20001070 20001070 20001078 20001078     p.. p.. x.. x.. 
20001088:	20001080 20001080 20001088 20001088     ... ... ... ... 
20001098:	20001090 20001090 20001098 20001098     ... ... ... ... 
200010a8:	200010a0 200010a0 200010a8 200010a8     ... ... ... ... 

200010b8 <__malloc_sbrk_base>:
200010b8:	ffffffff                                ....

200010bc <__malloc_trim_threshold>:
200010bc:	00020000                                ....
