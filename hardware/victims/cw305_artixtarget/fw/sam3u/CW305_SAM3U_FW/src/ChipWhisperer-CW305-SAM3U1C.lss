
ChipWhisperer-CW305-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b79c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008b79c  0008b79c  0001b79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d80  20000000  0008b7a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000b14  20000d80  0008c524  00020d80  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020d80  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020da9  2**0
                  CONTENTS, READONLY
  7 .debug_info   000370ce  00000000  00000000  00020df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00007d31  00000000  00000000  00057ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000ab20  00000000  00000000  0005fbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000013d0  00000000  00000000  0006a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000015c0  00000000  00000000  0006bae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001fd3b  00000000  00000000  0006d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00024778  00000000  00000000  0008cddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005d5df  00000000  00000000  000b1557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  000042f8  00000000  00000000  0010eb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 7d 28 08 00 75 20 08 00 75 20 08 00     .@. }(..u ..u ..
   80010:	75 20 08 00 75 20 08 00 75 20 08 00 00 00 00 00     u ..u ..u ......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 75 20 08 00     ............u ..
   80030:	75 20 08 00 00 00 00 00 75 20 08 00 75 20 08 00     u ......u ..u ..
   80040:	75 20 08 00 75 20 08 00 75 20 08 00 75 20 08 00     u ..u ..u ..u ..
   80050:	75 20 08 00 75 20 08 00 75 20 08 00 75 20 08 00     u ..u ..u ..u ..
   80060:	75 20 08 00 75 20 08 00 39 25 08 00 4d 25 08 00     u ..u ..9%..M%..
   80070:	61 25 08 00 75 20 08 00 75 20 08 00 75 20 08 00     a%..u ..u ..u ..
   80080:	75 20 08 00 75 20 08 00 75 20 08 00 75 20 08 00     u ..u ..u ..u ..
   80090:	75 20 08 00 75 20 08 00 21 0c 08 00 75 20 08 00     u ..u ..!...u ..
   800a0:	75 20 08 00 75 20 08 00 75 20 08 00 75 20 08 00     u ..u ..u ..u ..
   800b0:	75 20 08 00 59 38 08 00 75 20 08 00                 u ..Y8..u ..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000d80 	.word	0x20000d80
   800d8:	00000000 	.word	0x00000000
   800dc:	0008b7a4 	.word	0x0008b7a4

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000d84 	.word	0x20000d84
   800f8:	0008b7a4 	.word	0x0008b7a4

000800fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   800fc:	b530      	push	{r4, r5, lr}
   800fe:	b083      	sub	sp, #12
   80100:	4604      	mov	r4, r0
   80102:	460d      	mov	r5, r1
	uint32_t val = 0;
   80104:	2300      	movs	r3, #0
   80106:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80108:	4b1f      	ldr	r3, [pc, #124]	; (80188 <usart_serial_getchar+0x8c>)
   8010a:	4298      	cmp	r0, r3
   8010c:	d00d      	beq.n	8012a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8010e:	4b1f      	ldr	r3, [pc, #124]	; (8018c <usart_serial_getchar+0x90>)
   80110:	429c      	cmp	r4, r3
   80112:	d011      	beq.n	80138 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80114:	4b1e      	ldr	r3, [pc, #120]	; (80190 <usart_serial_getchar+0x94>)
   80116:	429c      	cmp	r4, r3
   80118:	d018      	beq.n	8014c <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8011a:	4b1e      	ldr	r3, [pc, #120]	; (80194 <usart_serial_getchar+0x98>)
   8011c:	429c      	cmp	r4, r3
   8011e:	d01f      	beq.n	80160 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80120:	4b1d      	ldr	r3, [pc, #116]	; (80198 <usart_serial_getchar+0x9c>)
   80122:	429c      	cmp	r4, r3
   80124:	d026      	beq.n	80174 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80126:	b003      	add	sp, #12
   80128:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
   8012a:	4629      	mov	r1, r5
   8012c:	4620      	mov	r0, r4
   8012e:	4b1b      	ldr	r3, [pc, #108]	; (8019c <usart_serial_getchar+0xa0>)
   80130:	4798      	blx	r3
   80132:	2800      	cmp	r0, #0
   80134:	d1f9      	bne.n	8012a <usart_serial_getchar+0x2e>
   80136:	e7ea      	b.n	8010e <usart_serial_getchar+0x12>
		while (usart_read(p_usart, &val));
   80138:	a901      	add	r1, sp, #4
   8013a:	4620      	mov	r0, r4
   8013c:	4b18      	ldr	r3, [pc, #96]	; (801a0 <usart_serial_getchar+0xa4>)
   8013e:	4798      	blx	r3
   80140:	2800      	cmp	r0, #0
   80142:	d1f9      	bne.n	80138 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   80144:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80148:	702b      	strb	r3, [r5, #0]
   8014a:	e7e3      	b.n	80114 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
   8014c:	a901      	add	r1, sp, #4
   8014e:	4620      	mov	r0, r4
   80150:	4b13      	ldr	r3, [pc, #76]	; (801a0 <usart_serial_getchar+0xa4>)
   80152:	4798      	blx	r3
   80154:	2800      	cmp	r0, #0
   80156:	d1f9      	bne.n	8014c <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   80158:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8015c:	702b      	strb	r3, [r5, #0]
   8015e:	e7dc      	b.n	8011a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80160:	a901      	add	r1, sp, #4
   80162:	4620      	mov	r0, r4
   80164:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <usart_serial_getchar+0xa4>)
   80166:	4798      	blx	r3
   80168:	2800      	cmp	r0, #0
   8016a:	d1f9      	bne.n	80160 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   8016c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80170:	702b      	strb	r3, [r5, #0]
   80172:	e7d5      	b.n	80120 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80174:	a901      	add	r1, sp, #4
   80176:	4620      	mov	r0, r4
   80178:	4b09      	ldr	r3, [pc, #36]	; (801a0 <usart_serial_getchar+0xa4>)
   8017a:	4798      	blx	r3
   8017c:	2800      	cmp	r0, #0
   8017e:	d1f9      	bne.n	80174 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80180:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80184:	702b      	strb	r3, [r5, #0]
}
   80186:	e7ce      	b.n	80126 <usart_serial_getchar+0x2a>
   80188:	400e0600 	.word	0x400e0600
   8018c:	40090000 	.word	0x40090000
   80190:	40094000 	.word	0x40094000
   80194:	40098000 	.word	0x40098000
   80198:	4009c000 	.word	0x4009c000
   8019c:	00082d55 	.word	0x00082d55
   801a0:	0008438f 	.word	0x0008438f

000801a4 <usart_serial_putchar>:
{
   801a4:	b538      	push	{r3, r4, r5, lr}
   801a6:	4604      	mov	r4, r0
   801a8:	460d      	mov	r5, r1
	if (UART == (Uart*)p_usart) {
   801aa:	4b1c      	ldr	r3, [pc, #112]	; (8021c <usart_serial_putchar+0x78>)
   801ac:	4298      	cmp	r0, r3
   801ae:	d00d      	beq.n	801cc <usart_serial_putchar+0x28>
	if (USART0 == p_usart) {
   801b0:	4b1b      	ldr	r3, [pc, #108]	; (80220 <usart_serial_putchar+0x7c>)
   801b2:	4298      	cmp	r0, r3
   801b4:	d012      	beq.n	801dc <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   801b6:	4b1b      	ldr	r3, [pc, #108]	; (80224 <usart_serial_putchar+0x80>)
   801b8:	4298      	cmp	r0, r3
   801ba:	d017      	beq.n	801ec <usart_serial_putchar+0x48>
	if (USART2 == p_usart) {
   801bc:	4b1a      	ldr	r3, [pc, #104]	; (80228 <usart_serial_putchar+0x84>)
   801be:	4298      	cmp	r0, r3
   801c0:	d01c      	beq.n	801fc <usart_serial_putchar+0x58>
	if (USART3 == p_usart) {
   801c2:	4b1a      	ldr	r3, [pc, #104]	; (8022c <usart_serial_putchar+0x88>)
   801c4:	4298      	cmp	r0, r3
   801c6:	d021      	beq.n	8020c <usart_serial_putchar+0x68>
	return 0;
   801c8:	2000      	movs	r0, #0
}
   801ca:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   801cc:	4629      	mov	r1, r5
   801ce:	4620      	mov	r0, r4
   801d0:	4b17      	ldr	r3, [pc, #92]	; (80230 <usart_serial_putchar+0x8c>)
   801d2:	4798      	blx	r3
   801d4:	2800      	cmp	r0, #0
   801d6:	d1f9      	bne.n	801cc <usart_serial_putchar+0x28>
		return 1;
   801d8:	2001      	movs	r0, #1
   801da:	e7f6      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801dc:	4629      	mov	r1, r5
   801de:	4620      	mov	r0, r4
   801e0:	4b14      	ldr	r3, [pc, #80]	; (80234 <usart_serial_putchar+0x90>)
   801e2:	4798      	blx	r3
   801e4:	2800      	cmp	r0, #0
   801e6:	d1f9      	bne.n	801dc <usart_serial_putchar+0x38>
		return 1;
   801e8:	2001      	movs	r0, #1
   801ea:	e7ee      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801ec:	4629      	mov	r1, r5
   801ee:	4620      	mov	r0, r4
   801f0:	4b10      	ldr	r3, [pc, #64]	; (80234 <usart_serial_putchar+0x90>)
   801f2:	4798      	blx	r3
   801f4:	2800      	cmp	r0, #0
   801f6:	d1f9      	bne.n	801ec <usart_serial_putchar+0x48>
		return 1;
   801f8:	2001      	movs	r0, #1
   801fa:	e7e6      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801fc:	4629      	mov	r1, r5
   801fe:	4620      	mov	r0, r4
   80200:	4b0c      	ldr	r3, [pc, #48]	; (80234 <usart_serial_putchar+0x90>)
   80202:	4798      	blx	r3
   80204:	2800      	cmp	r0, #0
   80206:	d1f9      	bne.n	801fc <usart_serial_putchar+0x58>
		return 1;
   80208:	2001      	movs	r0, #1
   8020a:	e7de      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   8020c:	4629      	mov	r1, r5
   8020e:	4620      	mov	r0, r4
   80210:	4b08      	ldr	r3, [pc, #32]	; (80234 <usart_serial_putchar+0x90>)
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	d1f9      	bne.n	8020c <usart_serial_putchar+0x68>
		return 1;
   80218:	2001      	movs	r0, #1
   8021a:	e7d6      	b.n	801ca <usart_serial_putchar+0x26>
   8021c:	400e0600 	.word	0x400e0600
   80220:	40090000 	.word	0x40090000
   80224:	40094000 	.word	0x40094000
   80228:	40098000 	.word	0x40098000
   8022c:	4009c000 	.word	0x4009c000
   80230:	00082d43 	.word	0x00082d43
   80234:	00084379 	.word	0x00084379

00080238 <configure_console>:

/**
 *  Configure UART console.
 */
static void configure_console(void)
{
   80238:	b530      	push	{r4, r5, lr}
   8023a:	b089      	sub	sp, #36	; 0x24
	const usart_serial_options_t uart_serial_options = {
   8023c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80240:	9304      	str	r3, [sp, #16]
   80242:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80246:	9306      	str	r3, [sp, #24]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80248:	2008      	movs	r0, #8
   8024a:	4d11      	ldr	r5, [pc, #68]	; (80290 <configure_console+0x58>)
   8024c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8024e:	4c11      	ldr	r4, [pc, #68]	; (80294 <configure_console+0x5c>)
   80250:	4b11      	ldr	r3, [pc, #68]	; (80298 <configure_console+0x60>)
   80252:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80254:	4b11      	ldr	r3, [pc, #68]	; (8029c <configure_console+0x64>)
   80256:	4a12      	ldr	r2, [pc, #72]	; (802a0 <configure_console+0x68>)
   80258:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8025a:	4b12      	ldr	r3, [pc, #72]	; (802a4 <configure_console+0x6c>)
   8025c:	4a12      	ldr	r2, [pc, #72]	; (802a8 <configure_console+0x70>)
   8025e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80260:	4b12      	ldr	r3, [pc, #72]	; (802ac <configure_console+0x74>)
   80262:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80264:	9b04      	ldr	r3, [sp, #16]
   80266:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80268:	9b06      	ldr	r3, [sp, #24]
   8026a:	9303      	str	r3, [sp, #12]
   8026c:	2008      	movs	r0, #8
   8026e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80270:	a901      	add	r1, sp, #4
   80272:	4620      	mov	r0, r4
   80274:	4b0e      	ldr	r3, [pc, #56]	; (802b0 <configure_console+0x78>)
   80276:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80278:	4d0e      	ldr	r5, [pc, #56]	; (802b4 <configure_console+0x7c>)
   8027a:	682b      	ldr	r3, [r5, #0]
   8027c:	2100      	movs	r1, #0
   8027e:	6898      	ldr	r0, [r3, #8]
   80280:	4c0d      	ldr	r4, [pc, #52]	; (802b8 <configure_console+0x80>)
   80282:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80284:	682b      	ldr	r3, [r5, #0]
   80286:	2100      	movs	r1, #0
   80288:	6858      	ldr	r0, [r3, #4]
   8028a:	47a0      	blx	r4
	};
	
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
   8028c:	b009      	add	sp, #36	; 0x24
   8028e:	bd30      	pop	{r4, r5, pc}
   80290:	000826b5 	.word	0x000826b5
   80294:	400e0600 	.word	0x400e0600
   80298:	20001868 	.word	0x20001868
   8029c:	20001864 	.word	0x20001864
   802a0:	000801a5 	.word	0x000801a5
   802a4:	20001840 	.word	0x20001840
   802a8:	000800fd 	.word	0x000800fd
   802ac:	05b8d800 	.word	0x05b8d800
   802b0:	00082d0d 	.word	0x00082d0d
   802b4:	200003d0 	.word	0x200003d0
   802b8:	000845e5 	.word	0x000845e5

000802bc <fpga_pins>:
{
   802bc:	b570      	push	{r4, r5, r6, lr}
   802be:	4604      	mov	r4, r0
	gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
   802c0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802c4:	2036      	movs	r0, #54	; 0x36
   802c6:	4d95      	ldr	r5, [pc, #596]	; (8051c <fpga_pins+0x260>)
   802c8:	47a8      	blx	r5
	gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);
   802ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802ce:	2032      	movs	r0, #50	; 0x32
   802d0:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   802d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   802d6:	2007      	movs	r0, #7
   802d8:	47a8      	blx	r5
	if (enabled){
   802da:	2c00      	cmp	r4, #0
   802dc:	d07e      	beq.n	803dc <fpga_pins+0x120>
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802de:	4d90      	ldr	r5, [pc, #576]	; (80520 <fpga_pins+0x264>)
   802e0:	4629      	mov	r1, r5
   802e2:	2029      	movs	r0, #41	; 0x29
   802e4:	4c8d      	ldr	r4, [pc, #564]	; (8051c <fpga_pins+0x260>)
   802e6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   802e8:	4629      	mov	r1, r5
   802ea:	202a      	movs	r0, #42	; 0x2a
   802ec:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   802ee:	4629      	mov	r1, r5
   802f0:	202b      	movs	r0, #43	; 0x2b
   802f2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   802f4:	4629      	mov	r1, r5
   802f6:	202c      	movs	r0, #44	; 0x2c
   802f8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   802fa:	4629      	mov	r1, r5
   802fc:	202d      	movs	r0, #45	; 0x2d
   802fe:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80300:	4629      	mov	r1, r5
   80302:	202e      	movs	r0, #46	; 0x2e
   80304:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80306:	4629      	mov	r1, r5
   80308:	202f      	movs	r0, #47	; 0x2f
   8030a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   8030c:	4629      	mov	r1, r5
   8030e:	2030      	movs	r0, #48	; 0x30
   80310:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80312:	4629      	mov	r1, r5
   80314:	2033      	movs	r0, #51	; 0x33
   80316:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80318:	4629      	mov	r1, r5
   8031a:	2037      	movs	r0, #55	; 0x37
   8031c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8031e:	4629      	mov	r1, r5
   80320:	2034      	movs	r0, #52	; 0x34
   80322:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG2);
   80324:	4e7f      	ldr	r6, [pc, #508]	; (80524 <fpga_pins+0x268>)
   80326:	4631      	mov	r1, r6
   80328:	2027      	movs	r0, #39	; 0x27
   8032a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG2);
   8032c:	4631      	mov	r1, r6
   8032e:	2028      	movs	r0, #40	; 0x28
   80330:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
   80332:	4629      	mov	r1, r5
   80334:	2040      	movs	r0, #64	; 0x40
   80336:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
   80338:	4629      	mov	r1, r5
   8033a:	2041      	movs	r0, #65	; 0x41
   8033c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
   8033e:	4629      	mov	r1, r5
   80340:	2042      	movs	r0, #66	; 0x42
   80342:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
   80344:	4629      	mov	r1, r5
   80346:	2043      	movs	r0, #67	; 0x43
   80348:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
   8034a:	4629      	mov	r1, r5
   8034c:	2044      	movs	r0, #68	; 0x44
   8034e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
   80350:	4629      	mov	r1, r5
   80352:	2045      	movs	r0, #69	; 0x45
   80354:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
   80356:	4629      	mov	r1, r5
   80358:	2046      	movs	r0, #70	; 0x46
   8035a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
   8035c:	4629      	mov	r1, r5
   8035e:	2047      	movs	r0, #71	; 0x47
   80360:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
   80362:	4629      	mov	r1, r5
   80364:	2048      	movs	r0, #72	; 0x48
   80366:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
   80368:	4629      	mov	r1, r5
   8036a:	2049      	movs	r0, #73	; 0x49
   8036c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
   8036e:	4629      	mov	r1, r5
   80370:	204a      	movs	r0, #74	; 0x4a
   80372:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
   80374:	4629      	mov	r1, r5
   80376:	204b      	movs	r0, #75	; 0x4b
   80378:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
   8037a:	4629      	mov	r1, r5
   8037c:	2054      	movs	r0, #84	; 0x54
   8037e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
   80380:	4629      	mov	r1, r5
   80382:	2055      	movs	r0, #85	; 0x55
   80384:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
   80386:	4629      	mov	r1, r5
   80388:	2056      	movs	r0, #86	; 0x56
   8038a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
   8038c:	4629      	mov	r1, r5
   8038e:	2057      	movs	r0, #87	; 0x57
   80390:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
   80392:	4629      	mov	r1, r5
   80394:	2058      	movs	r0, #88	; 0x58
   80396:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
   80398:	4629      	mov	r1, r5
   8039a:	2059      	movs	r0, #89	; 0x59
   8039c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1);
   8039e:	4629      	mov	r1, r5
   803a0:	205a      	movs	r0, #90	; 0x5a
   803a2:	47a0      	blx	r4
		FPGA_NPROG_SETUP();
   803a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803a8:	2008      	movs	r0, #8
   803aa:	47a0      	blx	r4
		FPGA_NPROG_HIGH();
   803ac:	2008      	movs	r0, #8
   803ae:	4b5e      	ldr	r3, [pc, #376]	; (80528 <fpga_pins+0x26c>)
   803b0:	4798      	blx	r3
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   803b2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   803b6:	2031      	movs	r0, #49	; 0x31
   803b8:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   803ba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803be:	2008      	movs	r0, #8
   803c0:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   803c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803c6:	200d      	movs	r0, #13
   803c8:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   803ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ce:	200e      	movs	r0, #14
   803d0:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   803d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803d6:	200f      	movs	r0, #15
   803d8:	47a0      	blx	r4
}
   803da:	bd70      	pop	{r4, r5, r6, pc}
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   803dc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803e0:	2029      	movs	r0, #41	; 0x29
   803e2:	4c4e      	ldr	r4, [pc, #312]	; (8051c <fpga_pins+0x260>)
   803e4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   803e6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803ea:	202a      	movs	r0, #42	; 0x2a
   803ec:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   803ee:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803f2:	202b      	movs	r0, #43	; 0x2b
   803f4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   803f6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803fa:	202c      	movs	r0, #44	; 0x2c
   803fc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   803fe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80402:	202d      	movs	r0, #45	; 0x2d
   80404:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   80406:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8040a:	202e      	movs	r0, #46	; 0x2e
   8040c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   8040e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80412:	202f      	movs	r0, #47	; 0x2f
   80414:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   80416:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8041a:	2030      	movs	r0, #48	; 0x30
   8041c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   8041e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80422:	2033      	movs	r0, #51	; 0x33
   80424:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   80426:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8042a:	2037      	movs	r0, #55	; 0x37
   8042c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   8042e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80432:	2034      	movs	r0, #52	; 0x34
   80434:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIO_INPUT);
   80436:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8043a:	2027      	movs	r0, #39	; 0x27
   8043c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIO_INPUT);
   8043e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80442:	2028      	movs	r0, #40	; 0x28
   80444:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIO_INPUT);
   80446:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8044a:	2040      	movs	r0, #64	; 0x40
   8044c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIO_INPUT);
   8044e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80452:	2041      	movs	r0, #65	; 0x41
   80454:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIO_INPUT);
   80456:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8045a:	2042      	movs	r0, #66	; 0x42
   8045c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIO_INPUT);
   8045e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80462:	2043      	movs	r0, #67	; 0x43
   80464:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIO_INPUT);
   80466:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8046a:	2044      	movs	r0, #68	; 0x44
   8046c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIO_INPUT);
   8046e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80472:	2045      	movs	r0, #69	; 0x45
   80474:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIO_INPUT);
   80476:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8047a:	2046      	movs	r0, #70	; 0x46
   8047c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIO_INPUT);
   8047e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80482:	2047      	movs	r0, #71	; 0x47
   80484:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIO_INPUT);
   80486:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8048a:	2048      	movs	r0, #72	; 0x48
   8048c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIO_INPUT);
   8048e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80492:	2049      	movs	r0, #73	; 0x49
   80494:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIO_INPUT);
   80496:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8049a:	204a      	movs	r0, #74	; 0x4a
   8049c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIO_INPUT);
   8049e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804a2:	204b      	movs	r0, #75	; 0x4b
   804a4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIO_INPUT);
   804a6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804aa:	2054      	movs	r0, #84	; 0x54
   804ac:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIO_INPUT);
   804ae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804b2:	2055      	movs	r0, #85	; 0x55
   804b4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIO_INPUT);
   804b6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ba:	2056      	movs	r0, #86	; 0x56
   804bc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIO_INPUT);
   804be:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804c2:	2057      	movs	r0, #87	; 0x57
   804c4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIO_INPUT);
   804c6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ca:	2058      	movs	r0, #88	; 0x58
   804cc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIO_INPUT);
   804ce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804d2:	2059      	movs	r0, #89	; 0x59
   804d4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIO_INPUT);	
   804d6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804da:	205a      	movs	r0, #90	; 0x5a
   804dc:	47a0      	blx	r4
		gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, PIO_INPUT);
   804de:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
   804e2:	21ff      	movs	r1, #255	; 0xff
   804e4:	4811      	ldr	r0, [pc, #68]	; (8052c <fpga_pins+0x270>)
   804e6:	4b12      	ldr	r3, [pc, #72]	; (80530 <fpga_pins+0x274>)
   804e8:	4798      	blx	r3
		gpio_configure_pin(FPGA_ALE_GPIO, PIO_INPUT);
   804ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ee:	2035      	movs	r0, #53	; 0x35
   804f0:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   804f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804f6:	2031      	movs	r0, #49	; 0x31
   804f8:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   804fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804fe:	2008      	movs	r0, #8
   80500:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT);
   80502:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80506:	200d      	movs	r0, #13
   80508:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT);
   8050a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8050e:	200e      	movs	r0, #14
   80510:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
   80512:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80516:	200f      	movs	r0, #15
   80518:	47a0      	blx	r4
}
   8051a:	e75e      	b.n	803da <fpga_pins+0x11e>
   8051c:	0008240d 	.word	0x0008240d
   80520:	08000001 	.word	0x08000001
   80524:	10000001 	.word	0x10000001
   80528:	000823d5 	.word	0x000823d5
   8052c:	400e0e00 	.word	0x400e0e00
   80530:	00082301 	.word	0x00082301

00080534 <main>:
{
   80534:	b5f0      	push	{r4, r5, r6, r7, lr}
   80536:	b085      	sub	sp, #20
	flash_read_unique_id(serial_number, sizeof(serial_number));
   80538:	2110      	movs	r1, #16
   8053a:	4668      	mov	r0, sp
   8053c:	4b37      	ldr	r3, [pc, #220]	; (8061c <main+0xe8>)
   8053e:	4798      	blx	r3
	configure_console();
   80540:	4b37      	ldr	r3, [pc, #220]	; (80620 <main+0xec>)
   80542:	4798      	blx	r3
	cpu_irq_enable();
   80544:	4b37      	ldr	r3, [pc, #220]	; (80624 <main+0xf0>)
   80546:	2201      	movs	r2, #1
   80548:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8054a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8054e:	b662      	cpsie	i
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80550:	2300      	movs	r3, #0
}
   80552:	e004      	b.n	8055e <main+0x2a>
		sleepmgr_locks[i] = 0;
   80554:	4a34      	ldr	r2, [pc, #208]	; (80628 <main+0xf4>)
   80556:	2100      	movs	r1, #0
   80558:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8055a:	3301      	adds	r3, #1
   8055c:	b2db      	uxtb	r3, r3
   8055e:	2b04      	cmp	r3, #4
   80560:	d9f8      	bls.n	80554 <main+0x20>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80562:	4b31      	ldr	r3, [pc, #196]	; (80628 <main+0xf4>)
   80564:	2201      	movs	r2, #1
   80566:	715a      	strb	r2, [r3, #5]
	sysclk_init();
   80568:	4b30      	ldr	r3, [pc, #192]	; (8062c <main+0xf8>)
   8056a:	4798      	blx	r3
	board_init();
   8056c:	4b30      	ldr	r3, [pc, #192]	; (80630 <main+0xfc>)
   8056e:	4798      	blx	r3
	fpga_program_init();
   80570:	4b30      	ldr	r3, [pc, #192]	; (80634 <main+0x100>)
   80572:	4798      	blx	r3
	tps56520_init();
   80574:	4b30      	ldr	r3, [pc, #192]	; (80638 <main+0x104>)
   80576:	4798      	blx	r3
	cdce906_init();
   80578:	4b30      	ldr	r3, [pc, #192]	; (8063c <main+0x108>)
   8057a:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   8057c:	2400      	movs	r4, #0
   8057e:	e00b      	b.n	80598 <main+0x64>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80580:	ab04      	add	r3, sp, #16
   80582:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   80586:	f853 2c10 	ldr.w	r2, [r3, #-16]
   8058a:	492d      	ldr	r1, [pc, #180]	; (80640 <main+0x10c>)
   8058c:	482d      	ldr	r0, [pc, #180]	; (80644 <main+0x110>)
   8058e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   80592:	4b2d      	ldr	r3, [pc, #180]	; (80648 <main+0x114>)
   80594:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80596:	3401      	adds	r4, #1
   80598:	2c03      	cmp	r4, #3
   8059a:	d9f1      	bls.n	80580 <main+0x4c>
	usb_serial_number[32] = 0;
   8059c:	4e29      	ldr	r6, [pc, #164]	; (80644 <main+0x110>)
   8059e:	2400      	movs	r4, #0
   805a0:	f886 4020 	strb.w	r4, [r6, #32]
	printf("ChipWhisperer-CW305 Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   805a4:	4a29      	ldr	r2, [pc, #164]	; (8064c <main+0x118>)
   805a6:	492a      	ldr	r1, [pc, #168]	; (80650 <main+0x11c>)
   805a8:	482a      	ldr	r0, [pc, #168]	; (80654 <main+0x120>)
   805aa:	4d2b      	ldr	r5, [pc, #172]	; (80658 <main+0x124>)
   805ac:	47a8      	blx	r5
	printf("Serial number: %s\n", usb_serial_number);
   805ae:	4631      	mov	r1, r6
   805b0:	482a      	ldr	r0, [pc, #168]	; (8065c <main+0x128>)
   805b2:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_SMC);	
   805b4:	2009      	movs	r0, #9
   805b6:	4b2a      	ldr	r3, [pc, #168]	; (80660 <main+0x12c>)
   805b8:	4798      	blx	r3
	fpga_pins(true);
   805ba:	2001      	movs	r0, #1
   805bc:	4f29      	ldr	r7, [pc, #164]	; (80664 <main+0x130>)
   805be:	47b8      	blx	r7
	printf("Setting up FPGA Communication\n");
   805c0:	4829      	ldr	r0, [pc, #164]	; (80668 <main+0x134>)
   805c2:	47a8      	blx	r5
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   805c4:	4e29      	ldr	r6, [pc, #164]	; (8066c <main+0x138>)
   805c6:	4a2a      	ldr	r2, [pc, #168]	; (80670 <main+0x13c>)
   805c8:	4621      	mov	r1, r4
   805ca:	4630      	mov	r0, r6
   805cc:	4b29      	ldr	r3, [pc, #164]	; (80674 <main+0x140>)
   805ce:	4798      	blx	r3
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(3)
   805d0:	4a29      	ldr	r2, [pc, #164]	; (80678 <main+0x144>)
   805d2:	4621      	mov	r1, r4
   805d4:	4630      	mov	r0, r6
   805d6:	4b29      	ldr	r3, [pc, #164]	; (8067c <main+0x148>)
   805d8:	4798      	blx	r3
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(4)
   805da:	f04f 1204 	mov.w	r2, #262148	; 0x40004
   805de:	4621      	mov	r1, r4
   805e0:	4630      	mov	r0, r6
   805e2:	4b27      	ldr	r3, [pc, #156]	; (80680 <main+0x14c>)
   805e4:	4798      	blx	r3
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   805e6:	2203      	movs	r2, #3
   805e8:	4621      	mov	r1, r4
   805ea:	4630      	mov	r0, r6
   805ec:	4b25      	ldr	r3, [pc, #148]	; (80684 <main+0x150>)
   805ee:	4798      	blx	r3
	ui_init();
   805f0:	4b25      	ldr	r3, [pc, #148]	; (80688 <main+0x154>)
   805f2:	4798      	blx	r3
	udc_start();
   805f4:	4b25      	ldr	r3, [pc, #148]	; (8068c <main+0x158>)
   805f6:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   805f8:	2204      	movs	r2, #4
   805fa:	4b25      	ldr	r3, [pc, #148]	; (80690 <main+0x15c>)
   805fc:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   805fe:	4620      	mov	r0, r4
   80600:	4b24      	ldr	r3, [pc, #144]	; (80694 <main+0x160>)
   80602:	4798      	blx	r3
	printf("Event Loop Entered, waiting...\n");	
   80604:	4824      	ldr	r0, [pc, #144]	; (80698 <main+0x164>)
   80606:	47a8      	blx	r5
	fpga_pins(false);
   80608:	4620      	mov	r0, r4
   8060a:	47b8      	blx	r7
	naeusb_register_handlers();
   8060c:	4b23      	ldr	r3, [pc, #140]	; (8069c <main+0x168>)
   8060e:	4798      	blx	r3
    fpga_target_register_handlers();
   80610:	4b23      	ldr	r3, [pc, #140]	; (806a0 <main+0x16c>)
   80612:	4798      	blx	r3
		process_events();
   80614:	4b23      	ldr	r3, [pc, #140]	; (806a4 <main+0x170>)
   80616:	4798      	blx	r3
	while (true) {
   80618:	e7fc      	b.n	80614 <main+0xe0>
   8061a:	bf00      	nop
   8061c:	00082079 	.word	0x00082079
   80620:	00080239 	.word	0x00080239
   80624:	20000328 	.word	0x20000328
   80628:	20001844 	.word	0x20001844
   8062c:	00082995 	.word	0x00082995
   80630:	00082119 	.word	0x00082119
   80634:	00080739 	.word	0x00080739
   80638:	00080ba9 	.word	0x00080ba9
   8063c:	0008088d 	.word	0x0008088d
   80640:	0008b24c 	.word	0x0008b24c
   80644:	200001b4 	.word	0x200001b4
   80648:	00084795 	.word	0x00084795
   8064c:	0008b254 	.word	0x0008b254
   80650:	0008b260 	.word	0x0008b260
   80654:	0008b26c 	.word	0x0008b26c
   80658:	00084431 	.word	0x00084431
   8065c:	0008b2a0 	.word	0x0008b2a0
   80660:	000826b5 	.word	0x000826b5
   80664:	000802bd 	.word	0x000802bd
   80668:	0008b2b4 	.word	0x0008b2b4
   8066c:	400e0000 	.word	0x400e0000
   80670:	01010100 	.word	0x01010100
   80674:	00082785 	.word	0x00082785
   80678:	03030103 	.word	0x03030103
   8067c:	00082791 	.word	0x00082791
   80680:	0008279d 	.word	0x0008279d
   80684:	000827a9 	.word	0x000827a9
   80688:	000842e1 	.word	0x000842e1
   8068c:	00081cb9 	.word	0x00081cb9
   80690:	400e0400 	.word	0x400e0400
   80694:	0008271d 	.word	0x0008271d
   80698:	0008b2d4 	.word	0x0008b2d4
   8069c:	00080f0d 	.word	0x00080f0d
   806a0:	000816e5 	.word	0x000816e5
   806a4:	00080c45 	.word	0x00080c45

000806a8 <do_task>:

/*
Can insert regular tasks here if needed
*/
void do_task(void)
{
   806a8:	b508      	push	{r3, lr}
	static bool last_power_state = false;
	
	//If change in external state pin
	if (board_get_powerstate() != last_power_state){
   806aa:	203e      	movs	r0, #62	; 0x3e
   806ac:	4b0e      	ldr	r3, [pc, #56]	; (806e8 <do_task+0x40>)
   806ae:	4798      	blx	r3
   806b0:	3800      	subs	r0, #0
   806b2:	bf18      	it	ne
   806b4:	2001      	movne	r0, #1
   806b6:	4b0d      	ldr	r3, [pc, #52]	; (806ec <do_task+0x44>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	4298      	cmp	r0, r3
   806bc:	d100      	bne.n	806c0 <do_task+0x18>
		}
		
		//Record new state
		last_power_state = board_get_powerstate();
	}
}
   806be:	bd08      	pop	{r3, pc}
		if (board_get_powerstate()){
   806c0:	203e      	movs	r0, #62	; 0x3e
   806c2:	4b09      	ldr	r3, [pc, #36]	; (806e8 <do_task+0x40>)
   806c4:	4798      	blx	r3
   806c6:	b158      	cbz	r0, 806e0 <do_task+0x38>
			fpga_pins(true);
   806c8:	2001      	movs	r0, #1
   806ca:	4b09      	ldr	r3, [pc, #36]	; (806f0 <do_task+0x48>)
   806cc:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   806ce:	203e      	movs	r0, #62	; 0x3e
   806d0:	4b05      	ldr	r3, [pc, #20]	; (806e8 <do_task+0x40>)
   806d2:	4798      	blx	r3
   806d4:	3800      	subs	r0, #0
   806d6:	bf18      	it	ne
   806d8:	2001      	movne	r0, #1
   806da:	4b04      	ldr	r3, [pc, #16]	; (806ec <do_task+0x44>)
   806dc:	7018      	strb	r0, [r3, #0]
}
   806de:	e7ee      	b.n	806be <do_task+0x16>
			fpga_pins(false);
   806e0:	2000      	movs	r0, #0
   806e2:	4b03      	ldr	r3, [pc, #12]	; (806f0 <do_task+0x48>)
   806e4:	4798      	blx	r3
   806e6:	e7f2      	b.n	806ce <do_task+0x26>
   806e8:	000823b9 	.word	0x000823b9
   806ec:	20000d9c 	.word	0x20000d9c
   806f0:	000802bd 	.word	0x000802bd

000806f4 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   806f4:	b510      	push	{r4, lr}
   806f6:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   806f8:	4b06      	ldr	r3, [pc, #24]	; (80714 <FPGA_setlock+0x20>)
   806fa:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   806fc:	4b06      	ldr	r3, [pc, #24]	; (80718 <FPGA_setlock+0x24>)
   806fe:	781b      	ldrb	r3, [r3, #0]
   80700:	b933      	cbnz	r3, 80710 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   80702:	4b05      	ldr	r3, [pc, #20]	; (80718 <FPGA_setlock+0x24>)
   80704:	701c      	strb	r4, [r3, #0]
    ret = 1;
   80706:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   80708:	4b04      	ldr	r3, [pc, #16]	; (8071c <FPGA_setlock+0x28>)
   8070a:	4798      	blx	r3
  return ret;
}
   8070c:	4620      	mov	r0, r4
   8070e:	bd10      	pop	{r4, pc}
  int ret = 0;
   80710:	2400      	movs	r4, #0
   80712:	e7f9      	b.n	80708 <FPGA_setlock+0x14>
   80714:	00082145 	.word	0x00082145
   80718:	20000d9d 	.word	0x20000d9d
   8071c:	00082181 	.word	0x00082181

00080720 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   80720:	4b01      	ldr	r3, [pc, #4]	; (80728 <FPGA_releaselock+0x8>)
   80722:	2200      	movs	r2, #0
   80724:	701a      	strb	r2, [r3, #0]
}
   80726:	4770      	bx	lr
   80728:	20000d9d 	.word	0x20000d9d

0008072c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   8072c:	4b01      	ldr	r3, [pc, #4]	; (80734 <FPGA_lockstatus+0x8>)
   8072e:	7818      	ldrb	r0, [r3, #0]
}
   80730:	4770      	bx	lr
   80732:	bf00      	nop
   80734:	20000d9d 	.word	0x20000d9d

00080738 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   80738:	b508      	push	{r3, lr}
    FPGA_NPROG_SETUP();
   8073a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8073e:	2008      	movs	r0, #8
   80740:	4b02      	ldr	r3, [pc, #8]	; (8074c <fpga_program_init+0x14>)
   80742:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   80744:	2008      	movs	r0, #8
   80746:	4b02      	ldr	r3, [pc, #8]	; (80750 <fpga_program_init+0x18>)
   80748:	4798      	blx	r3
}
   8074a:	bd08      	pop	{r3, pc}
   8074c:	0008240d 	.word	0x0008240d
   80750:	000823d5 	.word	0x000823d5

00080754 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   80754:	b510      	push	{r4, lr}
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   80756:	4c18      	ldr	r4, [pc, #96]	; (807b8 <fpga_program_setup1+0x64>)
   80758:	4620      	mov	r0, r4
   8075a:	4b18      	ldr	r3, [pc, #96]	; (807bc <fpga_program_setup1+0x68>)
   8075c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8075e:	2380      	movs	r3, #128	; 0x80
   80760:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80762:	6863      	ldr	r3, [r4, #4]
   80764:	f043 0301 	orr.w	r3, r3, #1
   80768:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8076a:	6863      	ldr	r3, [r4, #4]
   8076c:	f043 0310 	orr.w	r3, r3, #16
   80770:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80772:	6863      	ldr	r3, [r4, #4]
   80774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80778:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   8077a:	2200      	movs	r2, #0
   8077c:	4611      	mov	r1, r2
   8077e:	4620      	mov	r0, r4
   80780:	4b0f      	ldr	r3, [pc, #60]	; (807c0 <fpga_program_setup1+0x6c>)
   80782:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80784:	2201      	movs	r2, #1
   80786:	2100      	movs	r1, #0
   80788:	4620      	mov	r0, r4
   8078a:	4b0e      	ldr	r3, [pc, #56]	; (807c4 <fpga_program_setup1+0x70>)
   8078c:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   8078e:	490e      	ldr	r1, [pc, #56]	; (807c8 <fpga_program_setup1+0x74>)
   80790:	480e      	ldr	r0, [pc, #56]	; (807cc <fpga_program_setup1+0x78>)
   80792:	4b0f      	ldr	r3, [pc, #60]	; (807d0 <fpga_program_setup1+0x7c>)
   80794:	4798      	blx	r3
   80796:	b2c2      	uxtb	r2, r0
   80798:	2100      	movs	r1, #0
   8079a:	4620      	mov	r0, r4
   8079c:	4b0d      	ldr	r3, [pc, #52]	; (807d4 <fpga_program_setup1+0x80>)
   8079e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   807a0:	2301      	movs	r3, #1
   807a2:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   807a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807a8:	200e      	movs	r0, #14
   807aa:	4c0b      	ldr	r4, [pc, #44]	; (807d8 <fpga_program_setup1+0x84>)
   807ac:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   807ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807b2:	200f      	movs	r0, #15
   807b4:	47a0      	blx	r4
	#endif
#endif
}
   807b6:	bd10      	pop	{r4, pc}
   807b8:	40008000 	.word	0x40008000
   807bc:	000827b9 	.word	0x000827b9
   807c0:	00082801 	.word	0x00082801
   807c4:	00082823 	.word	0x00082823
   807c8:	05b8d800 	.word	0x05b8d800
   807cc:	000f4240 	.word	0x000f4240
   807d0:	00082845 	.word	0x00082845
   807d4:	0008285d 	.word	0x0008285d
   807d8:	0008240d 	.word	0x0008240d

000807dc <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   807dc:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   807de:	2008      	movs	r0, #8
   807e0:	4b01      	ldr	r3, [pc, #4]	; (807e8 <fpga_program_setup2+0xc>)
   807e2:	4798      	blx	r3
}
   807e4:	bd08      	pop	{r3, pc}
   807e6:	bf00      	nop
   807e8:	000823d5 	.word	0x000823d5

000807ec <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   807ec:	b510      	push	{r4, lr}
   807ee:	4601      	mov	r1, r0
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   807f0:	2300      	movs	r3, #0
   807f2:	461a      	mov	r2, r3
   807f4:	4801      	ldr	r0, [pc, #4]	; (807fc <fpga_program_sendbyte+0x10>)
   807f6:	4c02      	ldr	r4, [pc, #8]	; (80800 <fpga_program_sendbyte+0x14>)
   807f8:	47a0      	blx	r4
		#endif
	#endif
}
   807fa:	bd10      	pop	{r4, pc}
   807fc:	40008000 	.word	0x40008000
   80800:	000827c9 	.word	0x000827c9

00080804 <cdce906_write>:

	return false;
}

bool cdce906_write(uint8_t addr, uint8_t data)
{
   80804:	b500      	push	{lr}
   80806:	b089      	sub	sp, #36	; 0x24
   80808:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t packet_write = {
   8080c:	2300      	movs	r3, #0
   8080e:	9303      	str	r3, [sp, #12]
   80810:	9307      	str	r3, [sp, #28]
   80812:	f060 007f 	orn	r0, r0, #127	; 0x7f
   80816:	f88d 000c 	strb.w	r0, [sp, #12]
   8081a:	2301      	movs	r3, #1
   8081c:	9304      	str	r3, [sp, #16]
   8081e:	f10d 0207 	add.w	r2, sp, #7
   80822:	9205      	str	r2, [sp, #20]
   80824:	9306      	str	r3, [sp, #24]
   80826:	2369      	movs	r3, #105	; 0x69
   80828:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = &data, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI1, &packet_write) == TWI_SUCCESS){
   8082c:	a903      	add	r1, sp, #12
   8082e:	4805      	ldr	r0, [pc, #20]	; (80844 <cdce906_write+0x40>)
   80830:	4b05      	ldr	r3, [pc, #20]	; (80848 <cdce906_write+0x44>)
   80832:	4798      	blx	r3
   80834:	b918      	cbnz	r0, 8083e <cdce906_write+0x3a>
		return true;
   80836:	2001      	movs	r0, #1
	} else {
		return false;
	}
}
   80838:	b009      	add	sp, #36	; 0x24
   8083a:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   8083e:	2000      	movs	r0, #0
   80840:	e7fa      	b.n	80838 <cdce906_write+0x34>
   80842:	bf00      	nop
   80844:	40088000 	.word	0x40088000
   80848:	00082c49 	.word	0x00082c49

0008084c <cdce906_read>:

bool cdce906_read(uint8_t addr, uint8_t * data)
{
   8084c:	b500      	push	{lr}
   8084e:	b087      	sub	sp, #28
	twi_package_t packet_read = {
   80850:	2300      	movs	r3, #0
   80852:	9301      	str	r3, [sp, #4]
   80854:	9305      	str	r3, [sp, #20]
   80856:	f060 007f 	orn	r0, r0, #127	; 0x7f
   8085a:	f88d 0004 	strb.w	r0, [sp, #4]
   8085e:	2301      	movs	r3, #1
   80860:	9302      	str	r3, [sp, #8]
   80862:	9103      	str	r1, [sp, #12]
   80864:	9304      	str	r3, [sp, #16]
   80866:	2369      	movs	r3, #105	; 0x69
   80868:	f88d 3014 	strb.w	r3, [sp, #20]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   8086c:	a901      	add	r1, sp, #4
   8086e:	4805      	ldr	r0, [pc, #20]	; (80884 <cdce906_read+0x38>)
   80870:	4b05      	ldr	r3, [pc, #20]	; (80888 <cdce906_read+0x3c>)
   80872:	4798      	blx	r3
   80874:	b918      	cbnz	r0, 8087e <cdce906_read+0x32>
		return true;
   80876:	2001      	movs	r0, #1
	} else {
		return false;
	}	
   80878:	b007      	add	sp, #28
   8087a:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   8087e:	2000      	movs	r0, #0
   80880:	e7fa      	b.n	80878 <cdce906_read+0x2c>
   80882:	bf00      	nop
   80884:	40088000 	.word	0x40088000
   80888:	00082ba5 	.word	0x00082ba5

0008088c <cdce906_init>:
{
   8088c:	b510      	push	{r4, lr}
   8088e:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
   80890:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80894:	2018      	movs	r0, #24
   80896:	4c15      	ldr	r4, [pc, #84]	; (808ec <cdce906_init+0x60>)
   80898:	47a0      	blx	r4
	gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
   8089a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8089e:	2019      	movs	r0, #25
   808a0:	47a0      	blx	r4
	twi_master_options_t opt = {
   808a2:	2400      	movs	r4, #0
   808a4:	9403      	str	r4, [sp, #12]
   808a6:	f24c 3350 	movw	r3, #50000	; 0xc350
   808aa:	9302      	str	r3, [sp, #8]
   808ac:	2369      	movs	r3, #105	; 0x69
   808ae:	f88d 300c 	strb.w	r3, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   808b2:	4b0f      	ldr	r3, [pc, #60]	; (808f0 <cdce906_init+0x64>)
   808b4:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   808b6:	f88d 400d 	strb.w	r4, [sp, #13]
   808ba:	2013      	movs	r0, #19
   808bc:	4b0d      	ldr	r3, [pc, #52]	; (808f4 <cdce906_init+0x68>)
   808be:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   808c0:	a901      	add	r1, sp, #4
   808c2:	480d      	ldr	r0, [pc, #52]	; (808f8 <cdce906_init+0x6c>)
   808c4:	4b0d      	ldr	r3, [pc, #52]	; (808fc <cdce906_init+0x70>)
   808c6:	4798      	blx	r3
	uint8_t data = 0;
   808c8:	f88d 4003 	strb.w	r4, [sp, #3]
	if (cdce906_read(0, &data) == false){
   808cc:	f10d 0103 	add.w	r1, sp, #3
   808d0:	4620      	mov	r0, r4
   808d2:	4b0b      	ldr	r3, [pc, #44]	; (80900 <cdce906_init+0x74>)
   808d4:	4798      	blx	r3
   808d6:	b130      	cbz	r0, 808e6 <cdce906_init+0x5a>
	if ((data & 0x0F) == 0x01){
   808d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   808dc:	f003 030f 	and.w	r3, r3, #15
   808e0:	2b01      	cmp	r3, #1
   808e2:	d000      	beq.n	808e6 <cdce906_init+0x5a>
	return false;
   808e4:	4620      	mov	r0, r4
}
   808e6:	b004      	add	sp, #16
   808e8:	bd10      	pop	{r4, pc}
   808ea:	bf00      	nop
   808ec:	0008240d 	.word	0x0008240d
   808f0:	05b8d800 	.word	0x05b8d800
   808f4:	000826b5 	.word	0x000826b5
   808f8:	40088000 	.word	0x40088000
   808fc:	00082cc9 	.word	0x00082cc9
   80900:	0008084d 	.word	0x0008084d

00080904 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   80904:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   80906:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8090a:	200f      	movs	r0, #15
   8090c:	4c0a      	ldr	r4, [pc, #40]	; (80938 <fpgaspi_program_init+0x34>)
   8090e:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   80910:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80914:	2032      	movs	r0, #50	; 0x32
   80916:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   80918:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8091c:	200e      	movs	r0, #14
   8091e:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   80920:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80924:	2036      	movs	r0, #54	; 0x36
   80926:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   80928:	2036      	movs	r0, #54	; 0x36
   8092a:	4b04      	ldr	r3, [pc, #16]	; (8093c <fpgaspi_program_init+0x38>)
   8092c:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
   8092e:	200f      	movs	r0, #15
   80930:	4b03      	ldr	r3, [pc, #12]	; (80940 <fpgaspi_program_init+0x3c>)
   80932:	4798      	blx	r3
}
   80934:	bd10      	pop	{r4, pc}
   80936:	bf00      	nop
   80938:	0008240d 	.word	0x0008240d
   8093c:	000823d5 	.word	0x000823d5
   80940:	000823f1 	.word	0x000823f1

00080944 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
   80944:	b508      	push	{r3, lr}
	FPGASPI_CS_LOW();
   80946:	2036      	movs	r0, #54	; 0x36
   80948:	4b01      	ldr	r3, [pc, #4]	; (80950 <fpgaspi_cs_low+0xc>)
   8094a:	4798      	blx	r3
}
   8094c:	bd08      	pop	{r3, pc}
   8094e:	bf00      	nop
   80950:	000823f1 	.word	0x000823f1

00080954 <fpgaspi_cs_high>:

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
   80954:	b508      	push	{r3, lr}
	FPGASPI_CS_HIGH();
   80956:	2036      	movs	r0, #54	; 0x36
   80958:	4b01      	ldr	r3, [pc, #4]	; (80960 <fpgaspi_cs_high+0xc>)
   8095a:	4798      	blx	r3
}
   8095c:	bd08      	pop	{r3, pc}
   8095e:	bf00      	nop
   80960:	000823d5 	.word	0x000823d5

00080964 <fpgaspi_xferbyte>:


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   80964:	b570      	push	{r4, r5, r6, lr}
   80966:	4605      	mov	r5, r0
	uint8_t result = 0;

	for(unsigned int i=0; i < 8; i++){	
   80968:	2600      	movs	r6, #0
	uint8_t result = 0;
   8096a:	4634      	mov	r4, r6
	for(unsigned int i=0; i < 8; i++){	
   8096c:	e00a      	b.n	80984 <fpgaspi_xferbyte+0x20>
		//On first read this gets thrown away
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
   8096e:	2032      	movs	r0, #50	; 0x32
   80970:	4b14      	ldr	r3, [pc, #80]	; (809c4 <fpgaspi_xferbyte+0x60>)
   80972:	4798      	blx	r3
			} else {
			FPGASPI_DO_LOW();
		}
		
		FPGASPI_CCLK_HIGH();
   80974:	200f      	movs	r0, #15
   80976:	4b13      	ldr	r3, [pc, #76]	; (809c4 <fpgaspi_xferbyte+0x60>)
   80978:	4798      	blx	r3
		databyte = databyte << 1;
   8097a:	006d      	lsls	r5, r5, #1
   8097c:	b2ed      	uxtb	r5, r5
		result = result << 1;
   8097e:	0064      	lsls	r4, r4, #1
   80980:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   80982:	3601      	adds	r6, #1
   80984:	2e07      	cmp	r6, #7
   80986:	d810      	bhi.n	809aa <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80988:	200e      	movs	r0, #14
   8098a:	4b0f      	ldr	r3, [pc, #60]	; (809c8 <fpgaspi_xferbyte+0x64>)
   8098c:	4798      	blx	r3
   8098e:	2800      	cmp	r0, #0
   80990:	bf18      	it	ne
   80992:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   80996:	200f      	movs	r0, #15
   80998:	4b0c      	ldr	r3, [pc, #48]	; (809cc <fpgaspi_xferbyte+0x68>)
   8099a:	4798      	blx	r3
		if (databyte & 0x80){
   8099c:	f015 0f80 	tst.w	r5, #128	; 0x80
   809a0:	d1e5      	bne.n	8096e <fpgaspi_xferbyte+0xa>
			FPGASPI_DO_LOW();
   809a2:	2032      	movs	r0, #50	; 0x32
   809a4:	4b09      	ldr	r3, [pc, #36]	; (809cc <fpgaspi_xferbyte+0x68>)
   809a6:	4798      	blx	r3
   809a8:	e7e4      	b.n	80974 <fpgaspi_xferbyte+0x10>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   809aa:	200e      	movs	r0, #14
   809ac:	4b06      	ldr	r3, [pc, #24]	; (809c8 <fpgaspi_xferbyte+0x64>)
   809ae:	4798      	blx	r3
   809b0:	2800      	cmp	r0, #0
   809b2:	bf18      	it	ne
   809b4:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   809b8:	200f      	movs	r0, #15
   809ba:	4b04      	ldr	r3, [pc, #16]	; (809cc <fpgaspi_xferbyte+0x68>)
   809bc:	4798      	blx	r3

	return result;
}
   809be:	4620      	mov	r0, r4
   809c0:	bd70      	pop	{r4, r5, r6, pc}
   809c2:	bf00      	nop
   809c4:	000823d5 	.word	0x000823d5
   809c8:	000823b9 	.word	0x000823b9
   809cc:	000823f1 	.word	0x000823f1

000809d0 <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   809d0:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   809d2:	2100      	movs	r1, #0
   809d4:	200f      	movs	r0, #15
   809d6:	4c04      	ldr	r4, [pc, #16]	; (809e8 <fpgaspi_program_deinit+0x18>)
   809d8:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   809da:	2100      	movs	r1, #0
   809dc:	2032      	movs	r0, #50	; 0x32
   809de:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   809e0:	2100      	movs	r1, #0
   809e2:	2036      	movs	r0, #54	; 0x36
   809e4:	47a0      	blx	r4
   809e6:	bd10      	pop	{r4, pc}
   809e8:	0008240d 	.word	0x0008240d

000809ec <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   809ec:	b508      	push	{r3, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   809ee:	4b04      	ldr	r3, [pc, #16]	; (80a00 <spi1util_init+0x14>)
   809f0:	6818      	ldr	r0, [r3, #0]
   809f2:	4b04      	ldr	r3, [pc, #16]	; (80a04 <spi1util_init+0x18>)
   809f4:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
   809f6:	4b04      	ldr	r3, [pc, #16]	; (80a08 <spi1util_init+0x1c>)
   809f8:	6818      	ldr	r0, [r3, #0]
   809fa:	4b04      	ldr	r3, [pc, #16]	; (80a0c <spi1util_init+0x20>)
   809fc:	4798      	blx	r3
}
   809fe:	bd08      	pop	{r3, pc}
   80a00:	200001dc 	.word	0x200001dc
   80a04:	000823d5 	.word	0x000823d5
   80a08:	200001e8 	.word	0x200001e8
   80a0c:	000823f1 	.word	0x000823f1

00080a10 <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
   80a10:	b508      	push	{r3, lr}
	gpio_set_pin_low(pin_spi1_cs);
   80a12:	4b02      	ldr	r3, [pc, #8]	; (80a1c <spi1util_cs_low+0xc>)
   80a14:	6818      	ldr	r0, [r3, #0]
   80a16:	4b02      	ldr	r3, [pc, #8]	; (80a20 <spi1util_cs_low+0x10>)
   80a18:	4798      	blx	r3
}
   80a1a:	bd08      	pop	{r3, pc}
   80a1c:	200001dc 	.word	0x200001dc
   80a20:	000823f1 	.word	0x000823f1

00080a24 <spi1util_cs_high>:

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
   80a24:	b508      	push	{r3, lr}
	gpio_set_pin_high(pin_spi1_cs);
   80a26:	4b02      	ldr	r3, [pc, #8]	; (80a30 <spi1util_cs_high+0xc>)
   80a28:	6818      	ldr	r0, [r3, #0]
   80a2a:	4b02      	ldr	r3, [pc, #8]	; (80a34 <spi1util_cs_high+0x10>)
   80a2c:	4798      	blx	r3
}
   80a2e:	bd08      	pop	{r3, pc}
   80a30:	200001dc 	.word	0x200001dc
   80a34:	000823d5 	.word	0x000823d5

00080a38 <spi1util_xferbyte>:

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   80a38:	b570      	push	{r4, r5, r6, lr}
   80a3a:	4605      	mov	r5, r0
	uint8_t result = 0;

	for(unsigned int i=0; i < 8; i++){	
   80a3c:	2600      	movs	r6, #0
	uint8_t result = 0;
   80a3e:	4634      	mov	r4, r6
	for(unsigned int i=0; i < 8; i++){	
   80a40:	e00c      	b.n	80a5c <spi1util_xferbyte+0x24>
		//On first read this gets thrown away
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
   80a42:	4b18      	ldr	r3, [pc, #96]	; (80aa4 <spi1util_xferbyte+0x6c>)
   80a44:	6818      	ldr	r0, [r3, #0]
   80a46:	4b18      	ldr	r3, [pc, #96]	; (80aa8 <spi1util_xferbyte+0x70>)
   80a48:	4798      	blx	r3
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   80a4a:	4b18      	ldr	r3, [pc, #96]	; (80aac <spi1util_xferbyte+0x74>)
   80a4c:	6818      	ldr	r0, [r3, #0]
   80a4e:	4b16      	ldr	r3, [pc, #88]	; (80aa8 <spi1util_xferbyte+0x70>)
   80a50:	4798      	blx	r3
		databyte = databyte << 1;
   80a52:	006d      	lsls	r5, r5, #1
   80a54:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80a56:	0064      	lsls	r4, r4, #1
   80a58:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   80a5a:	3601      	adds	r6, #1
   80a5c:	2e07      	cmp	r6, #7
   80a5e:	d813      	bhi.n	80a88 <spi1util_xferbyte+0x50>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a60:	4b13      	ldr	r3, [pc, #76]	; (80ab0 <spi1util_xferbyte+0x78>)
   80a62:	6818      	ldr	r0, [r3, #0]
   80a64:	4b13      	ldr	r3, [pc, #76]	; (80ab4 <spi1util_xferbyte+0x7c>)
   80a66:	4798      	blx	r3
   80a68:	2800      	cmp	r0, #0
   80a6a:	bf18      	it	ne
   80a6c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80a70:	4b0e      	ldr	r3, [pc, #56]	; (80aac <spi1util_xferbyte+0x74>)
   80a72:	6818      	ldr	r0, [r3, #0]
   80a74:	4b10      	ldr	r3, [pc, #64]	; (80ab8 <spi1util_xferbyte+0x80>)
   80a76:	4798      	blx	r3
		if (databyte & 0x80){
   80a78:	f015 0f80 	tst.w	r5, #128	; 0x80
   80a7c:	d1e1      	bne.n	80a42 <spi1util_xferbyte+0xa>
			gpio_set_pin_low(pin_spi1_mosi);
   80a7e:	4b09      	ldr	r3, [pc, #36]	; (80aa4 <spi1util_xferbyte+0x6c>)
   80a80:	6818      	ldr	r0, [r3, #0]
   80a82:	4b0d      	ldr	r3, [pc, #52]	; (80ab8 <spi1util_xferbyte+0x80>)
   80a84:	4798      	blx	r3
   80a86:	e7e0      	b.n	80a4a <spi1util_xferbyte+0x12>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a88:	4b09      	ldr	r3, [pc, #36]	; (80ab0 <spi1util_xferbyte+0x78>)
   80a8a:	6818      	ldr	r0, [r3, #0]
   80a8c:	4b09      	ldr	r3, [pc, #36]	; (80ab4 <spi1util_xferbyte+0x7c>)
   80a8e:	4798      	blx	r3
   80a90:	2800      	cmp	r0, #0
   80a92:	bf18      	it	ne
   80a94:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80a98:	4b04      	ldr	r3, [pc, #16]	; (80aac <spi1util_xferbyte+0x74>)
   80a9a:	6818      	ldr	r0, [r3, #0]
   80a9c:	4b06      	ldr	r3, [pc, #24]	; (80ab8 <spi1util_xferbyte+0x80>)
   80a9e:	4798      	blx	r3

	return result;
}
   80aa0:	4620      	mov	r0, r4
   80aa2:	bd70      	pop	{r4, r5, r6, pc}
   80aa4:	200001e4 	.word	0x200001e4
   80aa8:	000823d5 	.word	0x000823d5
   80aac:	200001e8 	.word	0x200001e8
   80ab0:	200001e0 	.word	0x200001e0
   80ab4:	000823b9 	.word	0x000823b9
   80ab8:	000823f1 	.word	0x000823f1

00080abc <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   80abc:	4770      	bx	lr

00080abe <checkoddparity>:
unsigned char checkoddparity(unsigned char p);

/* Is current byte odd-parity already? */
unsigned char checkoddparity(unsigned char p)
{
	p = p ^ (p >> 4 | p << 4);
   80abe:	0903      	lsrs	r3, r0, #4
   80ac0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   80ac4:	b25b      	sxtb	r3, r3
   80ac6:	4058      	eors	r0, r3
   80ac8:	b2c3      	uxtb	r3, r0
	p = p ^ (p >> 2);
   80aca:	f3c0 0085 	ubfx	r0, r0, #2, #6
   80ace:	4058      	eors	r0, r3
	p = p ^ (p >> 1);
   80ad0:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
	return p & 1;
}
   80ad4:	f000 0001 	and.w	r0, r0, #1
   80ad8:	4770      	bx	lr
   80ada:	0000      	movs	r0, r0

00080adc <tps56520_set>:

/* Set voltage in mV for FPGA VCC_INT Voltage */
bool tps56520_set(uint16_t mv_output)
{
	/* Validate output voltage is in range */
	if ((mv_output < 600) || (mv_output > 1800)){
   80adc:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
   80ae0:	b29b      	uxth	r3, r3
   80ae2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   80ae6:	d84c      	bhi.n	80b82 <tps56520_set+0xa6>
		return false;
	}
	
	/* Avoid frying FPGA */
	if (mv_output > 1200){
   80ae8:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   80aec:	d84b      	bhi.n	80b86 <tps56520_set+0xaa>
{
   80aee:	b510      	push	{r4, lr}
   80af0:	b08c      	sub	sp, #48	; 0x30
		return false;
	}
	
	uint8_t setting = (mv_output - 600) / 10;
   80af2:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   80af6:	4c26      	ldr	r4, [pc, #152]	; (80b90 <tps56520_set+0xb4>)
   80af8:	fb84 3400 	smull	r3, r4, r4, r0
   80afc:	17c0      	asrs	r0, r0, #31
   80afe:	ebc0 04a4 	rsb	r4, r0, r4, asr #2
   80b02:	b2e4      	uxtb	r4, r4
   80b04:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
	
	if (!checkoddparity(setting)){
   80b08:	4620      	mov	r0, r4
   80b0a:	4b22      	ldr	r3, [pc, #136]	; (80b94 <tps56520_set+0xb8>)
   80b0c:	4798      	blx	r3
   80b0e:	b918      	cbnz	r0, 80b18 <tps56520_set+0x3c>
		setting |= 1<<7;
   80b10:	f064 047f 	orn	r4, r4, #127	; 0x7f
   80b14:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
	}
	twi_package_t packet_write = {
   80b18:	4b1f      	ldr	r3, [pc, #124]	; (80b98 <tps56520_set+0xbc>)
   80b1a:	681b      	ldr	r3, [r3, #0]
   80b1c:	f8ad 3018 	strh.w	r3, [sp, #24]
   80b20:	0c1b      	lsrs	r3, r3, #16
   80b22:	f88d 301a 	strb.w	r3, [sp, #26]
   80b26:	2301      	movs	r3, #1
   80b28:	9307      	str	r3, [sp, #28]
   80b2a:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   80b2e:	9208      	str	r2, [sp, #32]
   80b30:	9309      	str	r3, [sp, #36]	; 0x24
   80b32:	2334      	movs	r3, #52	; 0x34
   80b34:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80b38:	a906      	add	r1, sp, #24
   80b3a:	4818      	ldr	r0, [pc, #96]	; (80b9c <tps56520_set+0xc0>)
   80b3c:	4b18      	ldr	r3, [pc, #96]	; (80ba0 <tps56520_set+0xc4>)
   80b3e:	4798      	blx	r3
   80b40:	b110      	cbz	r0, 80b48 <tps56520_set+0x6c>
		return false;
   80b42:	2000      	movs	r0, #0
	if (volt_read == setting){
		return true;
	}
	
	return false;
   80b44:	b00c      	add	sp, #48	; 0x30
   80b46:	bd10      	pop	{r4, pc}
	twi_package_t packet_read = {
   80b48:	4b13      	ldr	r3, [pc, #76]	; (80b98 <tps56520_set+0xbc>)
   80b4a:	681b      	ldr	r3, [r3, #0]
   80b4c:	f8ad 3000 	strh.w	r3, [sp]
   80b50:	0c1b      	lsrs	r3, r3, #16
   80b52:	f88d 3002 	strb.w	r3, [sp, #2]
   80b56:	2301      	movs	r3, #1
   80b58:	9301      	str	r3, [sp, #4]
   80b5a:	f10d 0217 	add.w	r2, sp, #23
   80b5e:	9202      	str	r2, [sp, #8]
   80b60:	9303      	str	r3, [sp, #12]
   80b62:	2334      	movs	r3, #52	; 0x34
   80b64:	f88d 3010 	strb.w	r3, [sp, #16]
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80b68:	4669      	mov	r1, sp
   80b6a:	480c      	ldr	r0, [pc, #48]	; (80b9c <tps56520_set+0xc0>)
   80b6c:	4b0d      	ldr	r3, [pc, #52]	; (80ba4 <tps56520_set+0xc8>)
   80b6e:	4798      	blx	r3
   80b70:	b958      	cbnz	r0, 80b8a <tps56520_set+0xae>
	if (volt_read == setting){
   80b72:	f89d 2017 	ldrb.w	r2, [sp, #23]
   80b76:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   80b7a:	429a      	cmp	r2, r3
   80b7c:	d1e2      	bne.n	80b44 <tps56520_set+0x68>
		return true;
   80b7e:	2001      	movs	r0, #1
   80b80:	e7e0      	b.n	80b44 <tps56520_set+0x68>
		return false;
   80b82:	2000      	movs	r0, #0
   80b84:	4770      	bx	lr
		return false;
   80b86:	2000      	movs	r0, #0
   80b88:	4770      	bx	lr
		return false;
   80b8a:	2000      	movs	r0, #0
   80b8c:	e7da      	b.n	80b44 <tps56520_set+0x68>
   80b8e:	bf00      	nop
   80b90:	66666667 	.word	0x66666667
   80b94:	00080abf 	.word	0x00080abf
   80b98:	0008b2f4 	.word	0x0008b2f4
   80b9c:	40084000 	.word	0x40084000
   80ba0:	00082c49 	.word	0x00082c49
   80ba4:	00082ba5 	.word	0x00082ba5

00080ba8 <tps56520_init>:
{
   80ba8:	b510      	push	{r4, lr}
   80baa:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   80bac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bb0:	2009      	movs	r0, #9
   80bb2:	4c15      	ldr	r4, [pc, #84]	; (80c08 <tps56520_init+0x60>)
   80bb4:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   80bb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bba:	200a      	movs	r0, #10
   80bbc:	47a0      	blx	r4
	twi_master_options_t opt = {
   80bbe:	2300      	movs	r3, #0
   80bc0:	9303      	str	r3, [sp, #12]
   80bc2:	f24c 3250 	movw	r2, #50000	; 0xc350
   80bc6:	9202      	str	r2, [sp, #8]
   80bc8:	2234      	movs	r2, #52	; 0x34
   80bca:	f88d 200c 	strb.w	r2, [sp, #12]
	p_opt->master_clk = sysclk_get_cpu_hz();
   80bce:	4a0f      	ldr	r2, [pc, #60]	; (80c0c <tps56520_init+0x64>)
   80bd0:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   80bd2:	f88d 300d 	strb.w	r3, [sp, #13]
   80bd6:	2012      	movs	r0, #18
   80bd8:	4b0d      	ldr	r3, [pc, #52]	; (80c10 <tps56520_init+0x68>)
   80bda:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   80bdc:	a901      	add	r1, sp, #4
   80bde:	480d      	ldr	r0, [pc, #52]	; (80c14 <tps56520_init+0x6c>)
   80be0:	4b0d      	ldr	r3, [pc, #52]	; (80c18 <tps56520_init+0x70>)
   80be2:	4798      	blx	r3
	for(int retry = 3; retry > 0; retry--){
   80be4:	2403      	movs	r4, #3
   80be6:	e000      	b.n	80bea <tps56520_init+0x42>
   80be8:	3c01      	subs	r4, #1
   80bea:	2c00      	cmp	r4, #0
   80bec:	dd07      	ble.n	80bfe <tps56520_init+0x56>
		if(tps56520_set(1000)){
   80bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80bf2:	4b0a      	ldr	r3, [pc, #40]	; (80c1c <tps56520_init+0x74>)
   80bf4:	4798      	blx	r3
   80bf6:	4603      	mov	r3, r0
   80bf8:	2800      	cmp	r0, #0
   80bfa:	d0f5      	beq.n	80be8 <tps56520_init+0x40>
   80bfc:	e000      	b.n	80c00 <tps56520_init+0x58>
	return false;
   80bfe:	2300      	movs	r3, #0
}
   80c00:	4618      	mov	r0, r3
   80c02:	b004      	add	sp, #16
   80c04:	bd10      	pop	{r4, pc}
   80c06:	bf00      	nop
   80c08:	0008240d 	.word	0x0008240d
   80c0c:	05b8d800 	.word	0x05b8d800
   80c10:	000826b5 	.word	0x000826b5
   80c14:	40084000 	.word	0x40084000
   80c18:	00082cc9 	.word	0x00082cc9
   80c1c:	00080add 	.word	0x00080add

00080c20 <TC0_Handler>:
{
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
}

ISR(TC0_Handler)
{
   80c20:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   80c22:	4b05      	ldr	r3, [pc, #20]	; (80c38 <TC0_Handler+0x18>)
   80c24:	681b      	ldr	r3, [r3, #0]
   80c26:	b113      	cbz	r3, 80c2e <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   80c28:	3b01      	subs	r3, #1
   80c2a:	4a03      	ldr	r2, [pc, #12]	; (80c38 <TC0_Handler+0x18>)
   80c2c:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   80c2e:	2100      	movs	r1, #0
   80c30:	4802      	ldr	r0, [pc, #8]	; (80c3c <TC0_Handler+0x1c>)
   80c32:	4b03      	ldr	r3, [pc, #12]	; (80c40 <TC0_Handler+0x20>)
   80c34:	4798      	blx	r3
}
   80c36:	bd08      	pop	{r3, pc}
   80c38:	20000fb4 	.word	0x20000fb4
   80c3c:	40080000 	.word	0x40080000
   80c40:	00082b31 	.word	0x00082b31

00080c44 <process_events>:
/*
TODO: Need to have a proper event loop not this crappy hack
*/

void process_events(void)
{
   80c44:	b508      	push	{r3, lr}
	static uint32_t nextCnt = 0;
	
	/* Hack for now - fixed at 100 mS, one event */	
	if (task_tickCnt > nextCnt){
   80c46:	4b0c      	ldr	r3, [pc, #48]	; (80c78 <process_events+0x34>)
   80c48:	681a      	ldr	r2, [r3, #0]
   80c4a:	4b0c      	ldr	r3, [pc, #48]	; (80c7c <process_events+0x38>)
   80c4c:	681b      	ldr	r3, [r3, #0]
   80c4e:	429a      	cmp	r2, r3
   80c50:	d800      	bhi.n	80c54 <process_events+0x10>
		if (nextCnt < task_tickCnt){
			task_tickCnt = 0;
			nextCnt = 100;
		}
	}
}
   80c52:	bd08      	pop	{r3, pc}
		do_task();
   80c54:	4b0a      	ldr	r3, [pc, #40]	; (80c80 <process_events+0x3c>)
   80c56:	4798      	blx	r3
		nextCnt += 100;
   80c58:	4a08      	ldr	r2, [pc, #32]	; (80c7c <process_events+0x38>)
   80c5a:	6813      	ldr	r3, [r2, #0]
   80c5c:	3364      	adds	r3, #100	; 0x64
   80c5e:	6013      	str	r3, [r2, #0]
		if (nextCnt < task_tickCnt){
   80c60:	4a05      	ldr	r2, [pc, #20]	; (80c78 <process_events+0x34>)
   80c62:	6812      	ldr	r2, [r2, #0]
   80c64:	4293      	cmp	r3, r2
   80c66:	d2f4      	bcs.n	80c52 <process_events+0xe>
			task_tickCnt = 0;
   80c68:	4b03      	ldr	r3, [pc, #12]	; (80c78 <process_events+0x34>)
   80c6a:	2200      	movs	r2, #0
   80c6c:	601a      	str	r2, [r3, #0]
			nextCnt = 100;
   80c6e:	4b03      	ldr	r3, [pc, #12]	; (80c7c <process_events+0x38>)
   80c70:	2264      	movs	r2, #100	; 0x64
   80c72:	601a      	str	r2, [r3, #0]
}
   80c74:	e7ed      	b.n	80c52 <process_events+0xe>
   80c76:	bf00      	nop
   80c78:	20000fbc 	.word	0x20000fbc
   80c7c:	20000da0 	.word	0x20000da0
   80c80:	000806a9 	.word	0x000806a9

00080c84 <naeusb_add_in_handler>:
COMPILER_WORD_ALIGNED
uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   80c84:	4b06      	ldr	r3, [pc, #24]	; (80ca0 <naeusb_add_in_handler+0x1c>)
   80c86:	781b      	ldrb	r3, [r3, #0]
   80c88:	2b0f      	cmp	r3, #15
   80c8a:	d807      	bhi.n	80c9c <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   80c8c:	1c59      	adds	r1, r3, #1
   80c8e:	4a04      	ldr	r2, [pc, #16]	; (80ca0 <naeusb_add_in_handler+0x1c>)
   80c90:	7011      	strb	r1, [r2, #0]
   80c92:	4a04      	ldr	r2, [pc, #16]	; (80ca4 <naeusb_add_in_handler+0x20>)
   80c94:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   80c98:	2001      	movs	r0, #1
   80c9a:	4770      	bx	lr
        return false;
   80c9c:	2000      	movs	r0, #0
}
   80c9e:	4770      	bx	lr
   80ca0:	20000de4 	.word	0x20000de4
   80ca4:	20000da4 	.word	0x20000da4

00080ca8 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   80ca8:	4b06      	ldr	r3, [pc, #24]	; (80cc4 <naeusb_add_out_handler+0x1c>)
   80caa:	781b      	ldrb	r3, [r3, #0]
   80cac:	2b0f      	cmp	r3, #15
   80cae:	d807      	bhi.n	80cc0 <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   80cb0:	1c59      	adds	r1, r3, #1
   80cb2:	4a04      	ldr	r2, [pc, #16]	; (80cc4 <naeusb_add_out_handler+0x1c>)
   80cb4:	7011      	strb	r1, [r2, #0]
   80cb6:	4a04      	ldr	r2, [pc, #16]	; (80cc8 <naeusb_add_out_handler+0x20>)
   80cb8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   80cbc:	2001      	movs	r0, #1
   80cbe:	4770      	bx	lr
        return false;
   80cc0:	2000      	movs	r0, #0
}
   80cc2:	4770      	bx	lr
   80cc4:	20000de5 	.word	0x20000de5
   80cc8:	20000de8 	.word	0x20000de8

00080ccc <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80ccc:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   80cce:	4b01      	ldr	r3, [pc, #4]	; (80cd4 <main_suspend_action+0x8>)
   80cd0:	4798      	blx	r3
}
   80cd2:	bd08      	pop	{r3, pc}
   80cd4:	000842f9 	.word	0x000842f9

00080cd8 <main_resume_action>:

void main_resume_action(void)
{
   80cd8:	b508      	push	{r3, lr}
    ui_wakeup();
   80cda:	4b01      	ldr	r3, [pc, #4]	; (80ce0 <main_resume_action+0x8>)
   80cdc:	4798      	blx	r3
}
   80cde:	bd08      	pop	{r3, pc}
   80ce0:	00084319 	.word	0x00084319

00080ce4 <main_sof_action>:

void main_sof_action(void)
{
   80ce4:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   80ce6:	4b04      	ldr	r3, [pc, #16]	; (80cf8 <main_sof_action+0x14>)
   80ce8:	781b      	ldrb	r3, [r3, #0]
   80cea:	b903      	cbnz	r3, 80cee <main_sof_action+0xa>
        return;
    ui_process(udd_get_frame_number());
}
   80cec:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   80cee:	4b03      	ldr	r3, [pc, #12]	; (80cfc <main_sof_action+0x18>)
   80cf0:	4798      	blx	r3
   80cf2:	4b03      	ldr	r3, [pc, #12]	; (80d00 <main_sof_action+0x1c>)
   80cf4:	4798      	blx	r3
   80cf6:	e7f9      	b.n	80cec <main_sof_action+0x8>
   80cf8:	200001ec 	.word	0x200001ec
   80cfc:	00083b89 	.word	0x00083b89
   80d00:	00084331 	.word	0x00084331

00080d04 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   80d04:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   80d06:	2401      	movs	r4, #1
   80d08:	4b04      	ldr	r3, [pc, #16]	; (80d1c <main_vendor_enable+0x18>)
   80d0a:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80d0c:	4a04      	ldr	r2, [pc, #16]	; (80d20 <main_vendor_enable+0x1c>)
   80d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80d12:	4804      	ldr	r0, [pc, #16]	; (80d24 <main_vendor_enable+0x20>)
   80d14:	4b04      	ldr	r3, [pc, #16]	; (80d28 <main_vendor_enable+0x24>)
   80d16:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   80d18:	4620      	mov	r0, r4
   80d1a:	bd10      	pop	{r4, pc}
   80d1c:	200001ec 	.word	0x200001ec
   80d20:	000811f5 	.word	0x000811f5
   80d24:	20001040 	.word	0x20001040
   80d28:	00082e11 	.word	0x00082e11

00080d2c <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   80d2c:	4b01      	ldr	r3, [pc, #4]	; (80d34 <main_vendor_disable+0x8>)
   80d2e:	2200      	movs	r2, #0
   80d30:	701a      	strb	r2, [r3, #0]
}
   80d32:	4770      	bx	lr
   80d34:	200001ec 	.word	0x200001ec

00080d38 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   80d38:	b510      	push	{r4, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   80d3a:	4b0c      	ldr	r3, [pc, #48]	; (80d6c <main_setup_out_received+0x34>)
   80d3c:	4a0c      	ldr	r2, [pc, #48]	; (80d70 <main_setup_out_received+0x38>)
   80d3e:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80d40:	88da      	ldrh	r2, [r3, #6]
   80d42:	2a40      	cmp	r2, #64	; 0x40
   80d44:	bf28      	it	cs
   80d46:	2240      	movcs	r2, #64	; 0x40
   80d48:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   80d4a:	4b0a      	ldr	r3, [pc, #40]	; (80d74 <main_setup_out_received+0x3c>)
   80d4c:	781c      	ldrb	r4, [r3, #0]
   80d4e:	b14c      	cbz	r4, 80d64 <main_setup_out_received+0x2c>
        handler_status = naeusb_out_request_handlers[i-1]();
   80d50:	1e63      	subs	r3, r4, #1
   80d52:	4a09      	ldr	r2, [pc, #36]	; (80d78 <main_setup_out_received+0x40>)
   80d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80d58:	4798      	blx	r3
        if (handler_status == true) {
   80d5a:	4603      	mov	r3, r0
   80d5c:	b918      	cbnz	r0, 80d66 <main_setup_out_received+0x2e>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   80d5e:	3c01      	subs	r4, #1
   80d60:	b2e4      	uxtb	r4, r4
   80d62:	e7f4      	b.n	80d4e <main_setup_out_received+0x16>
            return true;
        }
    }

    return false;
   80d64:	2300      	movs	r3, #0

}
   80d66:	4618      	mov	r0, r3
   80d68:	bd10      	pop	{r4, pc}
   80d6a:	bf00      	nop
   80d6c:	2000184c 	.word	0x2000184c
   80d70:	20001000 	.word	0x20001000
   80d74:	20000de5 	.word	0x20000de5
   80d78:	20000de8 	.word	0x20000de8

00080d7c <main_setup_in_received>:

bool main_setup_in_received(void)
{
   80d7c:	b510      	push	{r4, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   80d7e:	4b08      	ldr	r3, [pc, #32]	; (80da0 <main_setup_in_received+0x24>)
   80d80:	781c      	ldrb	r4, [r3, #0]
   80d82:	b14c      	cbz	r4, 80d98 <main_setup_in_received+0x1c>
        handler_status = naeusb_in_request_handlers[i-1]();
   80d84:	1e63      	subs	r3, r4, #1
   80d86:	4a07      	ldr	r2, [pc, #28]	; (80da4 <main_setup_in_received+0x28>)
   80d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80d8c:	4798      	blx	r3
        if (handler_status == true) {
   80d8e:	4603      	mov	r3, r0
   80d90:	b918      	cbnz	r0, 80d9a <main_setup_in_received+0x1e>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   80d92:	3c01      	subs	r4, #1
   80d94:	b2e4      	uxtb	r4, r4
   80d96:	e7f4      	b.n	80d82 <main_setup_in_received+0x6>
            return true;
        }
    }

    return false;
   80d98:	2300      	movs	r3, #0

   80d9a:	4618      	mov	r0, r3
   80d9c:	bd10      	pop	{r4, pc}
   80d9e:	bf00      	nop
   80da0:	20000de4 	.word	0x20000de4
   80da4:	20000da4 	.word	0x20000da4

00080da8 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   80da8:	4b05      	ldr	r3, [pc, #20]	; (80dc0 <naeusb_setup_out_received+0x18>)
   80daa:	785b      	ldrb	r3, [r3, #1]
   80dac:	2b22      	cmp	r3, #34	; 0x22
   80dae:	d001      	beq.n	80db4 <naeusb_setup_out_received+0xc>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
            return true;
            break;
    }
    return false;
   80db0:	2000      	movs	r0, #0
}
   80db2:	4770      	bx	lr
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   80db4:	4b02      	ldr	r3, [pc, #8]	; (80dc0 <naeusb_setup_out_received+0x18>)
   80db6:	4a03      	ldr	r2, [pc, #12]	; (80dc4 <naeusb_setup_out_received+0x1c>)
   80db8:	611a      	str	r2, [r3, #16]
            return true;
   80dba:	2001      	movs	r0, #1
   80dbc:	4770      	bx	lr
   80dbe:	bf00      	nop
   80dc0:	2000184c 	.word	0x2000184c
   80dc4:	00080dc9 	.word	0x00080dc9

00080dc8 <naeusb_sam_cfg_out>:
{
   80dc8:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80dca:	4b22      	ldr	r3, [pc, #136]	; (80e54 <naeusb_sam_cfg_out+0x8c>)
   80dcc:	789b      	ldrb	r3, [r3, #2]
   80dce:	3b01      	subs	r3, #1
   80dd0:	2b10      	cmp	r3, #16
   80dd2:	d814      	bhi.n	80dfe <naeusb_sam_cfg_out+0x36>
   80dd4:	e8df f003 	tbb	[pc, r3]
   80dd8:	13181409 	.word	0x13181409
   80ddc:	13131313 	.word	0x13131313
   80de0:	13131313 	.word	0x13131313
   80de4:	2c131313 	.word	0x2c131313
   80de8:	3b          	.byte	0x3b
   80de9:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80dea:	203e      	movs	r0, #62	; 0x3e
   80dec:	4b1a      	ldr	r3, [pc, #104]	; (80e58 <naeusb_sam_cfg_out+0x90>)
   80dee:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   80df0:	4b1a      	ldr	r3, [pc, #104]	; (80e5c <naeusb_sam_cfg_out+0x94>)
   80df2:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80df4:	2800      	cmp	r0, #0
   80df6:	d0fb      	beq.n	80df0 <naeusb_sam_cfg_out+0x28>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80df8:	2010      	movs	r0, #16
   80dfa:	4b19      	ldr	r3, [pc, #100]	; (80e60 <naeusb_sam_cfg_out+0x98>)
   80dfc:	4798      	blx	r3
}
   80dfe:	bd08      	pop	{r3, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80e00:	2010      	movs	r0, #16
   80e02:	4b18      	ldr	r3, [pc, #96]	; (80e64 <naeusb_sam_cfg_out+0x9c>)
   80e04:	4798      	blx	r3
        break;
   80e06:	e7fa      	b.n	80dfe <naeusb_sam_cfg_out+0x36>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80e08:	2201      	movs	r2, #1
   80e0a:	210c      	movs	r1, #12
   80e0c:	4816      	ldr	r0, [pc, #88]	; (80e68 <naeusb_sam_cfg_out+0xa0>)
   80e0e:	4b17      	ldr	r3, [pc, #92]	; (80e6c <naeusb_sam_cfg_out+0xa4>)
   80e10:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   80e12:	4b17      	ldr	r3, [pc, #92]	; (80e70 <naeusb_sam_cfg_out+0xa8>)
   80e14:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80e16:	4b17      	ldr	r3, [pc, #92]	; (80e74 <naeusb_sam_cfg_out+0xac>)
   80e18:	685b      	ldr	r3, [r3, #4]
   80e1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   80e1e:	d1fa      	bne.n	80e16 <naeusb_sam_cfg_out+0x4e>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80e20:	4a14      	ldr	r2, [pc, #80]	; (80e74 <naeusb_sam_cfg_out+0xac>)
   80e22:	6813      	ldr	r3, [r2, #0]
   80e24:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80e28:	f043 0305 	orr.w	r3, r3, #5
   80e2c:	6013      	str	r3, [r2, #0]
        while(1);
   80e2e:	e7fe      	b.n	80e2e <naeusb_sam_cfg_out+0x66>
   80e30:	4b0f      	ldr	r3, [pc, #60]	; (80e70 <naeusb_sam_cfg_out+0xa8>)
   80e32:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80e34:	4b0f      	ldr	r3, [pc, #60]	; (80e74 <naeusb_sam_cfg_out+0xac>)
   80e36:	685b      	ldr	r3, [r3, #4]
   80e38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   80e3c:	d1fa      	bne.n	80e34 <naeusb_sam_cfg_out+0x6c>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80e3e:	4a0d      	ldr	r2, [pc, #52]	; (80e74 <naeusb_sam_cfg_out+0xac>)
   80e40:	6813      	ldr	r3, [r2, #0]
   80e42:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80e46:	f043 0305 	orr.w	r3, r3, #5
   80e4a:	6013      	str	r3, [r2, #0]
        while(1);
   80e4c:	e7fe      	b.n	80e4c <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   80e4e:	4b0a      	ldr	r3, [pc, #40]	; (80e78 <naeusb_sam_cfg_out+0xb0>)
   80e50:	4798      	blx	r3
}
   80e52:	e7d4      	b.n	80dfe <naeusb_sam_cfg_out+0x36>
   80e54:	2000184c 	.word	0x2000184c
   80e58:	0008261d 	.word	0x0008261d
   80e5c:	00082645 	.word	0x00082645
   80e60:	00082575 	.word	0x00082575
   80e64:	000825c9 	.word	0x000825c9
   80e68:	400e0800 	.word	0x400e0800
   80e6c:	00082025 	.word	0x00082025
   80e70:	00083b09 	.word	0x00083b09
   80e74:	400e1200 	.word	0x400e1200
   80e78:	00080721 	.word	0x00080721

00080e7c <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   80e7c:	4b05      	ldr	r3, [pc, #20]	; (80e94 <naeusb_fw_version_in+0x18>)
   80e7e:	2200      	movs	r2, #0
   80e80:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   80e82:	2128      	movs	r1, #40	; 0x28
   80e84:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   80e86:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   80e88:	4a03      	ldr	r2, [pc, #12]	; (80e98 <naeusb_fw_version_in+0x1c>)
   80e8a:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   80e8c:	2303      	movs	r3, #3
   80e8e:	8193      	strh	r3, [r2, #12]
}
   80e90:	2001      	movs	r0, #1
   80e92:	4770      	bx	lr
   80e94:	20000fc0 	.word	0x20000fc0
   80e98:	2000184c 	.word	0x2000184c

00080e9c <naeusb_build_date_in>:
{
   80e9c:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   80e9e:	4c0a      	ldr	r4, [pc, #40]	; (80ec8 <naeusb_build_date_in+0x2c>)
   80ea0:	2240      	movs	r2, #64	; 0x40
   80ea2:	490a      	ldr	r1, [pc, #40]	; (80ecc <naeusb_build_date_in+0x30>)
   80ea4:	4620      	mov	r0, r4
   80ea6:	4d0a      	ldr	r5, [pc, #40]	; (80ed0 <naeusb_build_date_in+0x34>)
   80ea8:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   80eaa:	2320      	movs	r3, #32
   80eac:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   80eae:	2237      	movs	r2, #55	; 0x37
   80eb0:	4908      	ldr	r1, [pc, #32]	; (80ed4 <naeusb_build_date_in+0x38>)
   80eb2:	f104 0009 	add.w	r0, r4, #9
   80eb6:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   80eb8:	4d07      	ldr	r5, [pc, #28]	; (80ed8 <naeusb_build_date_in+0x3c>)
   80eba:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   80ebc:	4620      	mov	r0, r4
   80ebe:	4b07      	ldr	r3, [pc, #28]	; (80edc <naeusb_build_date_in+0x40>)
   80ec0:	4798      	blx	r3
   80ec2:	81a8      	strh	r0, [r5, #12]
}
   80ec4:	2001      	movs	r0, #1
   80ec6:	bd38      	pop	{r3, r4, r5, pc}
   80ec8:	20000fc0 	.word	0x20000fc0
   80ecc:	0008b304 	.word	0x0008b304
   80ed0:	00084835 	.word	0x00084835
   80ed4:	0008b2f8 	.word	0x0008b2f8
   80ed8:	2000184c 	.word	0x2000184c
   80edc:	000847d9 	.word	0x000847d9

00080ee0 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   80ee0:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   80ee2:	4b07      	ldr	r3, [pc, #28]	; (80f00 <naeusb_setup_in_received+0x20>)
   80ee4:	785b      	ldrb	r3, [r3, #1]
   80ee6:	2b17      	cmp	r3, #23
   80ee8:	d003      	beq.n	80ef2 <naeusb_setup_in_received+0x12>
   80eea:	2b40      	cmp	r3, #64	; 0x40
   80eec:	d004      	beq.n	80ef8 <naeusb_setup_in_received+0x18>
   80eee:	2000      	movs	r0, #0
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
}
   80ef0:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   80ef2:	4b04      	ldr	r3, [pc, #16]	; (80f04 <naeusb_setup_in_received+0x24>)
   80ef4:	4798      	blx	r3
   80ef6:	e7fb      	b.n	80ef0 <naeusb_setup_in_received+0x10>
            return naeusb_build_date_in();
   80ef8:	4b03      	ldr	r3, [pc, #12]	; (80f08 <naeusb_setup_in_received+0x28>)
   80efa:	4798      	blx	r3
   80efc:	e7f8      	b.n	80ef0 <naeusb_setup_in_received+0x10>
   80efe:	bf00      	nop
   80f00:	2000184c 	.word	0x2000184c
   80f04:	00080e7d 	.word	0x00080e7d
   80f08:	00080e9d 	.word	0x00080e9d

00080f0c <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   80f0c:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   80f0e:	4803      	ldr	r0, [pc, #12]	; (80f1c <naeusb_register_handlers+0x10>)
   80f10:	4b03      	ldr	r3, [pc, #12]	; (80f20 <naeusb_register_handlers+0x14>)
   80f12:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   80f14:	4803      	ldr	r0, [pc, #12]	; (80f24 <naeusb_register_handlers+0x18>)
   80f16:	4b04      	ldr	r3, [pc, #16]	; (80f28 <naeusb_register_handlers+0x1c>)
   80f18:	4798      	blx	r3
   80f1a:	bd08      	pop	{r3, pc}
   80f1c:	00080ee1 	.word	0x00080ee1
   80f20:	00080c85 	.word	0x00080c85
   80f24:	00080da9 	.word	0x00080da9
   80f28:	00080ca9 	.word	0x00080ca9

00080f2c <fpga_target_setup_out_received>:
	}
}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   80f2c:	4b31      	ldr	r3, [pc, #196]	; (80ff4 <fpga_target_setup_out_received+0xc8>)
   80f2e:	2200      	movs	r2, #0
   80f30:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   80f32:	4b31      	ldr	r3, [pc, #196]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80f34:	785b      	ldrb	r3, [r3, #1]
   80f36:	3b10      	subs	r3, #16
   80f38:	2b25      	cmp	r3, #37	; 0x25
   80f3a:	d856      	bhi.n	80fea <fpga_target_setup_out_received+0xbe>
   80f3c:	e8df f003 	tbb	[pc, r3]
   80f40:	2d23281e 	.word	0x2d23281e
   80f44:	55373255 	.word	0x55373255
   80f48:	55555555 	.word	0x55555555
   80f4c:	55555555 	.word	0x55555555
   80f50:	55135555 	.word	0x55135555
   80f54:	55555555 	.word	0x55555555
   80f58:	55555555 	.word	0x55555555
   80f5c:	55555555 	.word	0x55555555
   80f60:	4655413c 	.word	0x4655413c
   80f64:	504b      	.short	0x504b
		case REQ_SAM_CFG:
			0;
			uint16_t wVal = udd_g_ctrlreq.req.wValue & 0xFF;
   80f66:	4b24      	ldr	r3, [pc, #144]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80f68:	789b      	ldrb	r3, [r3, #2]
			if ((wVal > 0x03) && (wVal < 0x10)) {
   80f6a:	3b04      	subs	r3, #4
   80f6c:	b29b      	uxth	r3, r3
   80f6e:	2b0b      	cmp	r3, #11
   80f70:	d83d      	bhi.n	80fee <fpga_target_setup_out_received+0xc2>
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   80f72:	4b21      	ldr	r3, [pc, #132]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80f74:	4a21      	ldr	r2, [pc, #132]	; (80ffc <fpga_target_setup_out_received+0xd0>)
   80f76:	611a      	str	r2, [r3, #16]
				return true;
   80f78:	2001      	movs	r0, #1
   80f7a:	4770      	bx	lr
				return false;
			}
			break;
        /* Memory Read */
        case REQ_MEMREAD_BULK:
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   80f7c:	4b1e      	ldr	r3, [pc, #120]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80f7e:	4a20      	ldr	r2, [pc, #128]	; (81000 <fpga_target_setup_out_received+0xd4>)
   80f80:	611a      	str	r2, [r3, #16]
            return true;
   80f82:	2001      	movs	r0, #1
   80f84:	4770      	bx	lr
        case REQ_MEMREAD_CTRL:
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   80f86:	4b1c      	ldr	r3, [pc, #112]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80f88:	4a1e      	ldr	r2, [pc, #120]	; (81004 <fpga_target_setup_out_received+0xd8>)
   80f8a:	611a      	str	r2, [r3, #16]
            return true;	
   80f8c:	2001      	movs	r0, #1
   80f8e:	4770      	bx	lr

            /* Memory Write */
        case REQ_MEMWRITE_BULK:
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   80f90:	4b19      	ldr	r3, [pc, #100]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80f92:	4a1d      	ldr	r2, [pc, #116]	; (81008 <fpga_target_setup_out_received+0xdc>)
   80f94:	611a      	str	r2, [r3, #16]
            return true;
   80f96:	2001      	movs	r0, #1
   80f98:	4770      	bx	lr

        case REQ_MEMWRITE_CTRL:
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   80f9a:	4b17      	ldr	r3, [pc, #92]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80f9c:	4a1b      	ldr	r2, [pc, #108]	; (8100c <fpga_target_setup_out_received+0xe0>)
   80f9e:	611a      	str	r2, [r3, #16]
            return true;		
   80fa0:	2001      	movs	r0, #1
   80fa2:	4770      	bx	lr

        case REQ_MEMWRITE_CTRL_SAMU3:
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   80fa4:	4b14      	ldr	r3, [pc, #80]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80fa6:	4a1a      	ldr	r2, [pc, #104]	; (81010 <fpga_target_setup_out_received+0xe4>)
   80fa8:	611a      	str	r2, [r3, #16]
            return true;		
   80faa:	2001      	movs	r0, #1
   80fac:	4770      	bx	lr

            /* Send bitstream to FPGA */
        case REQ_FPGA_PROGRAM:
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   80fae:	4b12      	ldr	r3, [pc, #72]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80fb0:	4a18      	ldr	r2, [pc, #96]	; (81014 <fpga_target_setup_out_received+0xe8>)
   80fb2:	611a      	str	r2, [r3, #16]
            return true;
   80fb4:	2001      	movs	r0, #1
   80fb6:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_xmega_program_void;
            return true;
#endif

        case REQ_CDCE906:
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   80fb8:	4b0f      	ldr	r3, [pc, #60]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80fba:	4a17      	ldr	r2, [pc, #92]	; (81018 <fpga_target_setup_out_received+0xec>)
   80fbc:	611a      	str	r2, [r3, #16]
            return true;
   80fbe:	2001      	movs	r0, #1
   80fc0:	4770      	bx	lr

            /* VCC-INT Setting */
        case REQ_VCCINT:
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   80fc2:	4b0d      	ldr	r3, [pc, #52]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80fc4:	4a15      	ldr	r2, [pc, #84]	; (8101c <fpga_target_setup_out_received+0xf0>)
   80fc6:	611a      	str	r2, [r3, #16]
            return true;
   80fc8:	2001      	movs	r0, #1
   80fca:	4770      	bx	lr

		/* Send SPI commands to FPGA-attached SPI flash */
		case REQ_FPGASPI_PROGRAM:
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   80fcc:	4b0a      	ldr	r3, [pc, #40]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80fce:	4a14      	ldr	r2, [pc, #80]	; (81020 <fpga_target_setup_out_received+0xf4>)
   80fd0:	611a      	str	r2, [r3, #16]
			return true;
   80fd2:	2001      	movs	r0, #1
   80fd4:	4770      	bx	lr

        /* IO Util Setup */
        case REQ_FPGAIO_UTIL:
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   80fd6:	4b08      	ldr	r3, [pc, #32]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80fd8:	4a12      	ldr	r2, [pc, #72]	; (81024 <fpga_target_setup_out_received+0xf8>)
   80fda:	611a      	str	r2, [r3, #16]
            return true;
   80fdc:	2001      	movs	r0, #1
   80fde:	4770      	bx	lr

        /* Bit-Banged SPI1 */
        case FREQ_FPGASPI1_XFER:
            udd_g_ctrlreq.callback = ctrl_spi1util;
   80fe0:	4b05      	ldr	r3, [pc, #20]	; (80ff8 <fpga_target_setup_out_received+0xcc>)
   80fe2:	4a11      	ldr	r2, [pc, #68]	; (81028 <fpga_target_setup_out_received+0xfc>)
   80fe4:	611a      	str	r2, [r3, #16]
            return true;
   80fe6:	2001      	movs	r0, #1
   80fe8:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest){
   80fea:	2000      	movs	r0, #0
   80fec:	4770      	bx	lr
				return false;
   80fee:	2000      	movs	r0, #0

        default:
            return false;
    }					
}
   80ff0:	4770      	bx	lr
   80ff2:	bf00      	nop
   80ff4:	20000e28 	.word	0x20000e28
   80ff8:	2000184c 	.word	0x2000184c
   80ffc:	00081395 	.word	0x00081395
   81000:	000810a5 	.word	0x000810a5
   81004:	0008102d 	.word	0x0008102d
   81008:	00081095 	.word	0x00081095
   8100c:	00081059 	.word	0x00081059
   81010:	000810d1 	.word	0x000810d1
   81014:	000811b5 	.word	0x000811b5
   81018:	00081675 	.word	0x00081675
   8101c:	000815f9 	.word	0x000815f9
   81020:	00081585 	.word	0x00081585
   81024:	000813e9 	.word	0x000813e9
   81028:	00081511 	.word	0x00081511

0008102c <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   8102c:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8102e:	4b06      	ldr	r3, [pc, #24]	; (81048 <ctrl_readmem_ctrl+0x1c>)
   81030:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81032:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   81034:	2005      	movs	r0, #5
   81036:	4b05      	ldr	r3, [pc, #20]	; (8104c <ctrl_readmem_ctrl+0x20>)
   81038:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   8103a:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   8103e:	4b04      	ldr	r3, [pc, #16]	; (81050 <ctrl_readmem_ctrl+0x24>)
   81040:	601c      	str	r4, [r3, #0]
    ctrlmemread_size = buflen;
   81042:	4b04      	ldr	r3, [pc, #16]	; (81054 <ctrl_readmem_ctrl+0x28>)
   81044:	601d      	str	r5, [r3, #0]
}
   81046:	bd38      	pop	{r3, r4, r5, pc}
   81048:	20001000 	.word	0x20001000
   8104c:	000806f5 	.word	0x000806f5
   81050:	20000e2c 	.word	0x20000e2c
   81054:	20000e30 	.word	0x20000e30

00081058 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   81058:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8105a:	4b0a      	ldr	r3, [pc, #40]	; (81084 <ctrl_writemem_ctrl+0x2c>)
   8105c:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8105e:	685d      	ldr	r5, [r3, #4]
    FPGA_setlock(fpga_generic);
   81060:	2001      	movs	r0, #1
   81062:	4b09      	ldr	r3, [pc, #36]	; (81088 <ctrl_writemem_ctrl+0x30>)
   81064:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   81066:	2300      	movs	r3, #0
   81068:	42a3      	cmp	r3, r4
   8106a:	d207      	bcs.n	8107c <ctrl_writemem_ctrl+0x24>
        xram[i+address] = ctrlbuf_payload[i];
   8106c:	195a      	adds	r2, r3, r5
   8106e:	4907      	ldr	r1, [pc, #28]	; (8108c <ctrl_writemem_ctrl+0x34>)
   81070:	6809      	ldr	r1, [r1, #0]
   81072:	4807      	ldr	r0, [pc, #28]	; (81090 <ctrl_writemem_ctrl+0x38>)
   81074:	5c18      	ldrb	r0, [r3, r0]
   81076:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   81078:	3301      	adds	r3, #1
   8107a:	e7f5      	b.n	81068 <ctrl_writemem_ctrl+0x10>
    FPGA_setlock(fpga_unlocked);
   8107c:	2000      	movs	r0, #0
   8107e:	4b02      	ldr	r3, [pc, #8]	; (81088 <ctrl_writemem_ctrl+0x30>)
   81080:	4798      	blx	r3
}
   81082:	bd38      	pop	{r3, r4, r5, pc}
   81084:	20001000 	.word	0x20001000
   81088:	000806f5 	.word	0x000806f5
   8108c:	200001d8 	.word	0x200001d8
   81090:	20001008 	.word	0x20001008

00081094 <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   81094:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   81096:	2004      	movs	r0, #4
   81098:	4b01      	ldr	r3, [pc, #4]	; (810a0 <ctrl_writemem_bulk+0xc>)
   8109a:	4798      	blx	r3
}
   8109c:	bd08      	pop	{r3, pc}
   8109e:	bf00      	nop
   810a0:	000806f5 	.word	0x000806f5

000810a4 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   810a4:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   810a6:	4b06      	ldr	r3, [pc, #24]	; (810c0 <ctrl_readmem_bulk+0x1c>)
   810a8:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   810aa:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_blockin);
   810ac:	2002      	movs	r0, #2
   810ae:	4b05      	ldr	r3, [pc, #20]	; (810c4 <ctrl_readmem_bulk+0x20>)
   810b0:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   810b2:	4a05      	ldr	r2, [pc, #20]	; (810c8 <ctrl_readmem_bulk+0x24>)
   810b4:	4629      	mov	r1, r5
   810b6:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   810ba:	4b04      	ldr	r3, [pc, #16]	; (810cc <ctrl_readmem_bulk+0x28>)
   810bc:	4798      	blx	r3
}
   810be:	bd38      	pop	{r3, r4, r5, pc}
   810c0:	20001000 	.word	0x20001000
   810c4:	000806f5 	.word	0x000806f5
   810c8:	00081195 	.word	0x00081195
   810cc:	00082df5 	.word	0x00082df5

000810d0 <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   810d0:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   810d2:	4b28      	ldr	r3, [pc, #160]	; (81174 <ctrl_writemem_ctrl_sam3u+0xa4>)
   810d4:	681c      	ldr	r4, [r3, #0]
   810d6:	3c04      	subs	r4, #4
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   810d8:	685e      	ldr	r6, [r3, #4]
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   810da:	689d      	ldr	r5, [r3, #8]
    for(unsigned int i = 0; i < buflen; i++){
   810dc:	2300      	movs	r3, #0
   810de:	42a3      	cmp	r3, r4
   810e0:	d206      	bcs.n	810f0 <ctrl_writemem_ctrl_sam3u+0x20>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   810e2:	1999      	adds	r1, r3, r6
   810e4:	4a24      	ldr	r2, [pc, #144]	; (81178 <ctrl_writemem_ctrl_sam3u+0xa8>)
   810e6:	5c98      	ldrb	r0, [r3, r2]
   810e8:	4a24      	ldr	r2, [pc, #144]	; (8117c <ctrl_writemem_ctrl_sam3u+0xac>)
   810ea:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   810ec:	3301      	adds	r3, #1
   810ee:	e7f6      	b.n	810de <ctrl_writemem_ctrl_sam3u+0xe>
    if ( flags & 0x1 ){ // encryptions have been requested
   810f0:	f015 0f01 	tst.w	r5, #1
   810f4:	d03c      	beq.n	81170 <ctrl_writemem_ctrl_sam3u+0xa0>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   810f6:	4b21      	ldr	r3, [pc, #132]	; (8117c <ctrl_writemem_ctrl_sam3u+0xac>)
   810f8:	681c      	ldr	r4, [r3, #0]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   810fa:	2600      	movs	r6, #0
   810fc:	e01c      	b.n	81138 <ctrl_writemem_ctrl_sam3u+0x68>
                for(unsigned int j = 0; j < 16; j++){
   810fe:	2300      	movs	r3, #0
   81100:	2b0f      	cmp	r3, #15
   81102:	d822      	bhi.n	8114a <ctrl_writemem_ctrl_sam3u+0x7a>
                    xram[j+0x400+0x100] = seed >> 24;
   81104:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
   81108:	491d      	ldr	r1, [pc, #116]	; (81180 <ctrl_writemem_ctrl_sam3u+0xb0>)
   8110a:	6809      	ldr	r1, [r1, #0]
   8110c:	0e20      	lsrs	r0, r4, #24
   8110e:	5488      	strb	r0, [r1, r2]
                    seed += (seed*seed) | 0x5;
   81110:	fb04 f204 	mul.w	r2, r4, r4
   81114:	f042 0205 	orr.w	r2, r2, #5
   81118:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   8111a:	3301      	adds	r3, #1
   8111c:	e7f0      	b.n	81100 <ctrl_writemem_ctrl_sam3u+0x30>
            FPGA_setlock(fpga_unlocked);
   8111e:	2000      	movs	r0, #0
   81120:	4b18      	ldr	r3, [pc, #96]	; (81184 <ctrl_writemem_ctrl_sam3u+0xb4>)
   81122:	4798      	blx	r3
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81124:	2031      	movs	r0, #49	; 0x31
   81126:	4b18      	ldr	r3, [pc, #96]	; (81188 <ctrl_writemem_ctrl_sam3u+0xb8>)
   81128:	4798      	blx	r3
            delay_cycles(50);
   8112a:	2032      	movs	r0, #50	; 0x32
   8112c:	4b17      	ldr	r3, [pc, #92]	; (8118c <ctrl_writemem_ctrl_sam3u+0xbc>)
   8112e:	4798      	blx	r3
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   81130:	2031      	movs	r0, #49	; 0x31
   81132:	4b17      	ldr	r3, [pc, #92]	; (81190 <ctrl_writemem_ctrl_sam3u+0xc0>)
   81134:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81136:	3601      	adds	r6, #1
   81138:	ebb6 4f15 	cmp.w	r6, r5, lsr #16
   8113c:	d218      	bcs.n	81170 <ctrl_writemem_ctrl_sam3u+0xa0>
            FPGA_setlock(fpga_generic);
   8113e:	2001      	movs	r0, #1
   81140:	4b10      	ldr	r3, [pc, #64]	; (81184 <ctrl_writemem_ctrl_sam3u+0xb4>)
   81142:	4798      	blx	r3
            if ((flags >> 1) & 0x1){ // write the key
   81144:	f015 0f02 	tst.w	r5, #2
   81148:	d1d9      	bne.n	810fe <ctrl_writemem_ctrl_sam3u+0x2e>
            if ((flags >> 2) & 0x1){ // write the pts
   8114a:	f015 0f04 	tst.w	r5, #4
   8114e:	d0e6      	beq.n	8111e <ctrl_writemem_ctrl_sam3u+0x4e>
                for(unsigned int j = 0; j < 16; j++){
   81150:	2300      	movs	r3, #0
   81152:	2b0f      	cmp	r3, #15
   81154:	d8e3      	bhi.n	8111e <ctrl_writemem_ctrl_sam3u+0x4e>
                    xram[j+0x400+0x200] = seed >> 24;
   81156:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
   8115a:	4909      	ldr	r1, [pc, #36]	; (81180 <ctrl_writemem_ctrl_sam3u+0xb0>)
   8115c:	6809      	ldr	r1, [r1, #0]
   8115e:	0e20      	lsrs	r0, r4, #24
   81160:	5488      	strb	r0, [r1, r2]
                    seed += (seed*seed) | 0x5;
   81162:	fb04 f204 	mul.w	r2, r4, r4
   81166:	f042 0205 	orr.w	r2, r2, #5
   8116a:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   8116c:	3301      	adds	r3, #1
   8116e:	e7f0      	b.n	81152 <ctrl_writemem_ctrl_sam3u+0x82>
}
   81170:	bd70      	pop	{r4, r5, r6, pc}
   81172:	bf00      	nop
   81174:	20001000 	.word	0x20001000
   81178:	2000100c 	.word	0x2000100c
   8117c:	20001440 	.word	0x20001440
   81180:	200001d8 	.word	0x200001d8
   81184:	000806f5 	.word	0x000806f5
   81188:	000823d5 	.word	0x000823d5
   8118c:	20000001 	.word	0x20000001
   81190:	000823f1 	.word	0x000823f1

00081194 <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   81194:	b100      	cbz	r0, 81198 <main_vendor_bulk_in_received+0x4>
   81196:	4770      	bx	lr
{
   81198:	b508      	push	{r3, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   8119a:	4b04      	ldr	r3, [pc, #16]	; (811ac <main_vendor_bulk_in_received+0x18>)
   8119c:	4798      	blx	r3
   8119e:	2802      	cmp	r0, #2
   811a0:	d000      	beq.n	811a4 <main_vendor_bulk_in_received+0x10>
}
   811a2:	bd08      	pop	{r3, pc}
        FPGA_setlock(fpga_unlocked);
   811a4:	2000      	movs	r0, #0
   811a6:	4b02      	ldr	r3, [pc, #8]	; (811b0 <main_vendor_bulk_in_received+0x1c>)
   811a8:	4798      	blx	r3
   811aa:	e7fa      	b.n	811a2 <main_vendor_bulk_in_received+0xe>
   811ac:	0008072d 	.word	0x0008072d
   811b0:	000806f5 	.word	0x000806f5

000811b4 <ctrl_progfpga_bulk>:
void ctrl_progfpga_bulk(void){
   811b4:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.wValue){
   811b6:	4b0b      	ldr	r3, [pc, #44]	; (811e4 <ctrl_progfpga_bulk+0x30>)
   811b8:	885b      	ldrh	r3, [r3, #2]
   811ba:	2ba1      	cmp	r3, #161	; 0xa1
   811bc:	d007      	beq.n	811ce <ctrl_progfpga_bulk+0x1a>
   811be:	2ba2      	cmp	r3, #162	; 0xa2
   811c0:	d00b      	beq.n	811da <ctrl_progfpga_bulk+0x26>
   811c2:	2ba0      	cmp	r3, #160	; 0xa0
   811c4:	d000      	beq.n	811c8 <ctrl_progfpga_bulk+0x14>
}
   811c6:	bd08      	pop	{r3, pc}
            fpga_program_setup1();			
   811c8:	4b07      	ldr	r3, [pc, #28]	; (811e8 <ctrl_progfpga_bulk+0x34>)
   811ca:	4798      	blx	r3
            break;
   811cc:	e7fb      	b.n	811c6 <ctrl_progfpga_bulk+0x12>
            fpga_program_setup2();
   811ce:	4b07      	ldr	r3, [pc, #28]	; (811ec <ctrl_progfpga_bulk+0x38>)
   811d0:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   811d2:	4b07      	ldr	r3, [pc, #28]	; (811f0 <ctrl_progfpga_bulk+0x3c>)
   811d4:	220a      	movs	r2, #10
   811d6:	701a      	strb	r2, [r3, #0]
            break;
   811d8:	e7f5      	b.n	811c6 <ctrl_progfpga_bulk+0x12>
            blockendpoint_usage = bep_emem;
   811da:	4b05      	ldr	r3, [pc, #20]	; (811f0 <ctrl_progfpga_bulk+0x3c>)
   811dc:	2200      	movs	r2, #0
   811de:	701a      	strb	r2, [r3, #0]
}
   811e0:	e7f1      	b.n	811c6 <ctrl_progfpga_bulk+0x12>
   811e2:	bf00      	nop
   811e4:	2000184c 	.word	0x2000184c
   811e8:	00080755 	.word	0x00080755
   811ec:	000807dd 	.word	0x000807dd
   811f0:	20000e28 	.word	0x20000e28

000811f4 <main_vendor_bulk_out_received>:
{
   811f4:	b538      	push	{r3, r4, r5, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   811f6:	b938      	cbnz	r0, 81208 <main_vendor_bulk_out_received+0x14>
   811f8:	460c      	mov	r4, r1
    if (blockendpoint_usage == bep_emem){
   811fa:	4b19      	ldr	r3, [pc, #100]	; (81260 <main_vendor_bulk_out_received+0x6c>)
   811fc:	781b      	ldrb	r3, [r3, #0]
   811fe:	b1eb      	cbz	r3, 8123c <main_vendor_bulk_out_received+0x48>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81200:	2b0a      	cmp	r3, #10
   81202:	d114      	bne.n	8122e <main_vendor_bulk_out_received+0x3a>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81204:	2500      	movs	r5, #0
   81206:	e024      	b.n	81252 <main_vendor_bulk_out_received+0x5e>
        udi_vendor_bulk_out_run(
   81208:	4a16      	ldr	r2, [pc, #88]	; (81264 <main_vendor_bulk_out_received+0x70>)
   8120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8120e:	4816      	ldr	r0, [pc, #88]	; (81268 <main_vendor_bulk_out_received+0x74>)
   81210:	4b16      	ldr	r3, [pc, #88]	; (8126c <main_vendor_bulk_out_received+0x78>)
   81212:	4798      	blx	r3
        return;
   81214:	e011      	b.n	8123a <main_vendor_bulk_out_received+0x46>
            xram[i] = main_buf_loopback[i];
   81216:	4a16      	ldr	r2, [pc, #88]	; (81270 <main_vendor_bulk_out_received+0x7c>)
   81218:	6812      	ldr	r2, [r2, #0]
   8121a:	4913      	ldr	r1, [pc, #76]	; (81268 <main_vendor_bulk_out_received+0x74>)
   8121c:	5cc9      	ldrb	r1, [r1, r3]
   8121e:	54d1      	strb	r1, [r2, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81220:	3301      	adds	r3, #1
   81222:	42a3      	cmp	r3, r4
   81224:	d3f7      	bcc.n	81216 <main_vendor_bulk_out_received+0x22>
        if (FPGA_lockstatus() == fpga_blockout){
   81226:	4b13      	ldr	r3, [pc, #76]	; (81274 <main_vendor_bulk_out_received+0x80>)
   81228:	4798      	blx	r3
   8122a:	2804      	cmp	r0, #4
   8122c:	d008      	beq.n	81240 <main_vendor_bulk_out_received+0x4c>
    udi_vendor_bulk_out_run(
   8122e:	4a0d      	ldr	r2, [pc, #52]	; (81264 <main_vendor_bulk_out_received+0x70>)
   81230:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81234:	480c      	ldr	r0, [pc, #48]	; (81268 <main_vendor_bulk_out_received+0x74>)
   81236:	4b0d      	ldr	r3, [pc, #52]	; (8126c <main_vendor_bulk_out_received+0x78>)
   81238:	4798      	blx	r3
}
   8123a:	bd38      	pop	{r3, r4, r5, pc}
        for(unsigned int i = 0; i < nb_transfered; i++){
   8123c:	2300      	movs	r3, #0
   8123e:	e7f0      	b.n	81222 <main_vendor_bulk_out_received+0x2e>
            FPGA_setlock(fpga_unlocked);
   81240:	2000      	movs	r0, #0
   81242:	4b0d      	ldr	r3, [pc, #52]	; (81278 <main_vendor_bulk_out_received+0x84>)
   81244:	4798      	blx	r3
   81246:	e7f2      	b.n	8122e <main_vendor_bulk_out_received+0x3a>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81248:	4b07      	ldr	r3, [pc, #28]	; (81268 <main_vendor_bulk_out_received+0x74>)
   8124a:	5d58      	ldrb	r0, [r3, r5]
   8124c:	4b0b      	ldr	r3, [pc, #44]	; (8127c <main_vendor_bulk_out_received+0x88>)
   8124e:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81250:	3501      	adds	r5, #1
   81252:	42a5      	cmp	r5, r4
   81254:	d3f8      	bcc.n	81248 <main_vendor_bulk_out_received+0x54>
        FPGA_CCLK_LOW();
   81256:	200f      	movs	r0, #15
   81258:	4b09      	ldr	r3, [pc, #36]	; (81280 <main_vendor_bulk_out_received+0x8c>)
   8125a:	4798      	blx	r3
   8125c:	e7e7      	b.n	8122e <main_vendor_bulk_out_received+0x3a>
   8125e:	bf00      	nop
   81260:	20000e28 	.word	0x20000e28
   81264:	000811f5 	.word	0x000811f5
   81268:	20001040 	.word	0x20001040
   8126c:	00082e11 	.word	0x00082e11
   81270:	200001d8 	.word	0x200001d8
   81274:	0008072d 	.word	0x0008072d
   81278:	000806f5 	.word	0x000806f5
   8127c:	000807ed 	.word	0x000807ed
   81280:	000823f1 	.word	0x000823f1

00081284 <fpga_target_setup_in_received>:
{
   81284:	b538      	push	{r3, r4, r5, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81286:	4b38      	ldr	r3, [pc, #224]	; (81368 <fpga_target_setup_in_received+0xe4>)
   81288:	785b      	ldrb	r3, [r3, #1]
   8128a:	3b12      	subs	r3, #18
   8128c:	2b23      	cmp	r3, #35	; 0x23
   8128e:	d865      	bhi.n	8135c <fpga_target_setup_in_received+0xd8>
   81290:	e8df f003 	tbb	[pc, r3]
   81294:	1d646412 	.word	0x1d646412
   81298:	64646464 	.word	0x64646464
   8129c:	64646464 	.word	0x64646464
   812a0:	64646464 	.word	0x64646464
   812a4:	64646464 	.word	0x64646464
   812a8:	64646464 	.word	0x64646464
   812ac:	64646464 	.word	0x64646464
   812b0:	41346464 	.word	0x41346464
   812b4:	5a645064 	.word	0x5a645064
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   812b8:	4a2b      	ldr	r2, [pc, #172]	; (81368 <fpga_target_setup_in_received+0xe4>)
   812ba:	4b2c      	ldr	r3, [pc, #176]	; (8136c <fpga_target_setup_in_received+0xe8>)
   812bc:	681b      	ldr	r3, [r3, #0]
   812be:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   812c0:	4b2b      	ldr	r3, [pc, #172]	; (81370 <fpga_target_setup_in_received+0xec>)
   812c2:	6819      	ldr	r1, [r3, #0]
   812c4:	8191      	strh	r1, [r2, #12]
            ctrlmemread_size = 0;
   812c6:	2200      	movs	r2, #0
   812c8:	601a      	str	r2, [r3, #0]
            return true;
   812ca:	2001      	movs	r0, #1
   812cc:	e047      	b.n	8135e <fpga_target_setup_in_received+0xda>
            respbuf[0] = FPGA_ISDONE();
   812ce:	2007      	movs	r0, #7
   812d0:	4d28      	ldr	r5, [pc, #160]	; (81374 <fpga_target_setup_in_received+0xf0>)
   812d2:	47a8      	blx	r5
   812d4:	3800      	subs	r0, #0
   812d6:	bf18      	it	ne
   812d8:	2001      	movne	r0, #1
   812da:	4c27      	ldr	r4, [pc, #156]	; (81378 <fpga_target_setup_in_received+0xf4>)
   812dc:	7020      	strb	r0, [r4, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   812de:	205d      	movs	r0, #93	; 0x5d
   812e0:	47a8      	blx	r5
   812e2:	3800      	subs	r0, #0
   812e4:	bf18      	it	ne
   812e6:	2001      	movne	r0, #1
   812e8:	7060      	strb	r0, [r4, #1]
            respbuf[2] = 0;
   812ea:	2300      	movs	r3, #0
   812ec:	70a3      	strb	r3, [r4, #2]
            respbuf[3] = 0;
   812ee:	70e3      	strb	r3, [r4, #3]
            udd_g_ctrlreq.payload = respbuf;
   812f0:	4b1d      	ldr	r3, [pc, #116]	; (81368 <fpga_target_setup_in_received+0xe4>)
   812f2:	609c      	str	r4, [r3, #8]
            udd_g_ctrlreq.payload_size = 4;
   812f4:	2204      	movs	r2, #4
   812f6:	819a      	strh	r2, [r3, #12]
            return true;
   812f8:	2001      	movs	r0, #1
   812fa:	e030      	b.n	8135e <fpga_target_setup_in_received+0xda>
            respbuf[0] = cdce906_status;
   812fc:	4b1e      	ldr	r3, [pc, #120]	; (81378 <fpga_target_setup_in_received+0xf4>)
   812fe:	4a1f      	ldr	r2, [pc, #124]	; (8137c <fpga_target_setup_in_received+0xf8>)
   81300:	7812      	ldrb	r2, [r2, #0]
   81302:	701a      	strb	r2, [r3, #0]
            respbuf[1] = cdce906_data;
   81304:	4a1e      	ldr	r2, [pc, #120]	; (81380 <fpga_target_setup_in_received+0xfc>)
   81306:	7812      	ldrb	r2, [r2, #0]
   81308:	705a      	strb	r2, [r3, #1]
            udd_g_ctrlreq.payload = respbuf;
   8130a:	4a17      	ldr	r2, [pc, #92]	; (81368 <fpga_target_setup_in_received+0xe4>)
   8130c:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 2;
   8130e:	2302      	movs	r3, #2
   81310:	8193      	strh	r3, [r2, #12]
            return true;
   81312:	2001      	movs	r0, #1
   81314:	e023      	b.n	8135e <fpga_target_setup_in_received+0xda>
            respbuf[0] = vccint_status;
   81316:	4b18      	ldr	r3, [pc, #96]	; (81378 <fpga_target_setup_in_received+0xf4>)
   81318:	4a1a      	ldr	r2, [pc, #104]	; (81384 <fpga_target_setup_in_received+0x100>)
   8131a:	7812      	ldrb	r2, [r2, #0]
   8131c:	701a      	strb	r2, [r3, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   8131e:	4a1a      	ldr	r2, [pc, #104]	; (81388 <fpga_target_setup_in_received+0x104>)
   81320:	8812      	ldrh	r2, [r2, #0]
   81322:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   81324:	0a12      	lsrs	r2, r2, #8
   81326:	709a      	strb	r2, [r3, #2]
            udd_g_ctrlreq.payload = respbuf;
   81328:	4a0f      	ldr	r2, [pc, #60]	; (81368 <fpga_target_setup_in_received+0xe4>)
   8132a:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 3;
   8132c:	2303      	movs	r3, #3
   8132e:	8193      	strh	r3, [r2, #12]
            return true;
   81330:	2001      	movs	r0, #1
   81332:	e014      	b.n	8135e <fpga_target_setup_in_received+0xda>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   81334:	4b0c      	ldr	r3, [pc, #48]	; (81368 <fpga_target_setup_in_received+0xe4>)
   81336:	88db      	ldrh	r3, [r3, #6]
   81338:	2b40      	cmp	r3, #64	; 0x40
   8133a:	d811      	bhi.n	81360 <fpga_target_setup_in_received+0xdc>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   8133c:	4a0a      	ldr	r2, [pc, #40]	; (81368 <fpga_target_setup_in_received+0xe4>)
   8133e:	4913      	ldr	r1, [pc, #76]	; (8138c <fpga_target_setup_in_received+0x108>)
   81340:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81342:	8193      	strh	r3, [r2, #12]
			return true;
   81344:	2001      	movs	r0, #1
   81346:	e00a      	b.n	8135e <fpga_target_setup_in_received+0xda>
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   81348:	4b07      	ldr	r3, [pc, #28]	; (81368 <fpga_target_setup_in_received+0xe4>)
   8134a:	88db      	ldrh	r3, [r3, #6]
   8134c:	2b40      	cmp	r3, #64	; 0x40
   8134e:	d809      	bhi.n	81364 <fpga_target_setup_in_received+0xe0>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   81350:	4a05      	ldr	r2, [pc, #20]	; (81368 <fpga_target_setup_in_received+0xe4>)
   81352:	490f      	ldr	r1, [pc, #60]	; (81390 <fpga_target_setup_in_received+0x10c>)
   81354:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81356:	8193      	strh	r3, [r2, #12]
			return true;
   81358:	2001      	movs	r0, #1
   8135a:	e000      	b.n	8135e <fpga_target_setup_in_received+0xda>
    switch(udd_g_ctrlreq.req.bRequest){
   8135c:	2000      	movs	r0, #0
}
   8135e:	bd38      	pop	{r3, r4, r5, pc}
                return false;
   81360:	2000      	movs	r0, #0
   81362:	e7fc      	b.n	8135e <fpga_target_setup_in_received+0xda>
                return false;
   81364:	2000      	movs	r0, #0
   81366:	e7fa      	b.n	8135e <fpga_target_setup_in_received+0xda>
   81368:	2000184c 	.word	0x2000184c
   8136c:	20000e2c 	.word	0x20000e2c
   81370:	20000e30 	.word	0x20000e30
   81374:	000823b9 	.word	0x000823b9
   81378:	20000fc0 	.word	0x20000fc0
   8137c:	20000e2a 	.word	0x20000e2a
   81380:	20000e29 	.word	0x20000e29
   81384:	20000eb4 	.word	0x20000eb4
   81388:	200001ee 	.word	0x200001ee
   8138c:	20000e34 	.word	0x20000e34
   81390:	20000e74 	.word	0x20000e74

00081394 <fpga_target_sam_cfg_out>:
{
   81394:	b508      	push	{r3, lr}
	switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81396:	4b0f      	ldr	r3, [pc, #60]	; (813d4 <fpga_target_sam_cfg_out+0x40>)
   81398:	789b      	ldrb	r3, [r3, #2]
   8139a:	2b05      	cmp	r3, #5
   8139c:	d00a      	beq.n	813b4 <fpga_target_sam_cfg_out+0x20>
   8139e:	2b06      	cmp	r3, #6
   813a0:	d00e      	beq.n	813c0 <fpga_target_sam_cfg_out+0x2c>
   813a2:	2b04      	cmp	r3, #4
   813a4:	d000      	beq.n	813a8 <fpga_target_sam_cfg_out+0x14>
}
   813a6:	bd08      	pop	{r3, pc}
	    gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   813a8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   813ac:	201b      	movs	r0, #27
   813ae:	4b0a      	ldr	r3, [pc, #40]	; (813d8 <fpga_target_sam_cfg_out+0x44>)
   813b0:	4798      	blx	r3
	    break;
   813b2:	e7f8      	b.n	813a6 <fpga_target_sam_cfg_out+0x12>
	    gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   813b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   813b8:	201b      	movs	r0, #27
   813ba:	4b07      	ldr	r3, [pc, #28]	; (813d8 <fpga_target_sam_cfg_out+0x44>)
   813bc:	4798      	blx	r3
	    break;
   813be:	e7f2      	b.n	813a6 <fpga_target_sam_cfg_out+0x12>
	    gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   813c0:	2031      	movs	r0, #49	; 0x31
   813c2:	4b06      	ldr	r3, [pc, #24]	; (813dc <fpga_target_sam_cfg_out+0x48>)
   813c4:	4798      	blx	r3
	    delay_cycles(250);
   813c6:	20fa      	movs	r0, #250	; 0xfa
   813c8:	4b05      	ldr	r3, [pc, #20]	; (813e0 <fpga_target_sam_cfg_out+0x4c>)
   813ca:	4798      	blx	r3
	    gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   813cc:	2031      	movs	r0, #49	; 0x31
   813ce:	4b05      	ldr	r3, [pc, #20]	; (813e4 <fpga_target_sam_cfg_out+0x50>)
   813d0:	4798      	blx	r3
}
   813d2:	e7e8      	b.n	813a6 <fpga_target_sam_cfg_out+0x12>
   813d4:	2000184c 	.word	0x2000184c
   813d8:	0008240d 	.word	0x0008240d
   813dc:	000823d5 	.word	0x000823d5
   813e0:	20000001 	.word	0x20000001
   813e4:	000823f1 	.word	0x000823f1

000813e8 <ctrl_fpgaioutil>:
static void ctrl_fpgaioutil(void){
   813e8:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength != 2){
   813ea:	4b41      	ldr	r3, [pc, #260]	; (814f0 <ctrl_fpgaioutil+0x108>)
   813ec:	88db      	ldrh	r3, [r3, #6]
   813ee:	2b02      	cmp	r3, #2
   813f0:	d10d      	bne.n	8140e <ctrl_fpgaioutil+0x26>
    int pin = udd_g_ctrlreq.payload[0];
   813f2:	4b3f      	ldr	r3, [pc, #252]	; (814f0 <ctrl_fpgaioutil+0x108>)
   813f4:	689b      	ldr	r3, [r3, #8]
   813f6:	781d      	ldrb	r5, [r3, #0]
    int config = udd_g_ctrlreq.payload[1];
   813f8:	785c      	ldrb	r4, [r3, #1]
    if ((pin < 0) || (pin > 95)){
   813fa:	2d5f      	cmp	r5, #95	; 0x5f
   813fc:	d807      	bhi.n	8140e <ctrl_fpgaioutil+0x26>
	switch(udd_g_ctrlreq.req.wValue){
   813fe:	4b3c      	ldr	r3, [pc, #240]	; (814f0 <ctrl_fpgaioutil+0x108>)
   81400:	885b      	ldrh	r3, [r3, #2]
   81402:	2ba1      	cmp	r3, #161	; 0xa1
   81404:	d064      	beq.n	814d0 <ctrl_fpgaioutil+0xe8>
   81406:	2ba2      	cmp	r3, #162	; 0xa2
   81408:	d067      	beq.n	814da <ctrl_fpgaioutil+0xf2>
   8140a:	2ba0      	cmp	r3, #160	; 0xa0
   8140c:	d000      	beq.n	81410 <ctrl_fpgaioutil+0x28>
}
   8140e:	bd38      	pop	{r3, r4, r5, pc}
            switch(config)
   81410:	1e63      	subs	r3, r4, #1
   81412:	2b12      	cmp	r3, #18
   81414:	d857      	bhi.n	814c6 <ctrl_fpgaioutil+0xde>
   81416:	e8df f003 	tbb	[pc, r3]
   8141a:	100a      	.short	0x100a
   8141c:	56565656 	.word	0x56565656
   81420:	56565656 	.word	0x56565656
   81424:	56565656 	.word	0x56565656
   81428:	36261656 	.word	0x36261656
   8142c:	46          	.byte	0x46
   8142d:	00          	.byte	0x00
                    gpio_configure_pin(pin, PIO_INPUT);
   8142e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81432:	4628      	mov	r0, r5
   81434:	4b2f      	ldr	r3, [pc, #188]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   81436:	4798      	blx	r3
                    break;
   81438:	e7e9      	b.n	8140e <ctrl_fpgaioutil+0x26>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   8143a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8143e:	4628      	mov	r0, r5
   81440:	4b2c      	ldr	r3, [pc, #176]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   81442:	4798      	blx	r3
                    break;
   81444:	e7e3      	b.n	8140e <ctrl_fpgaioutil+0x26>
                    if(pin_spi1_mosi > -1){
   81446:	4b2c      	ldr	r3, [pc, #176]	; (814f8 <ctrl_fpgaioutil+0x110>)
   81448:	6818      	ldr	r0, [r3, #0]
   8144a:	2800      	cmp	r0, #0
   8144c:	da07      	bge.n	8145e <ctrl_fpgaioutil+0x76>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   8144e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81452:	4628      	mov	r0, r5
   81454:	4b27      	ldr	r3, [pc, #156]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   81456:	4798      	blx	r3
                    pin_spi1_mosi = pin;
   81458:	4b27      	ldr	r3, [pc, #156]	; (814f8 <ctrl_fpgaioutil+0x110>)
   8145a:	601d      	str	r5, [r3, #0]
                    break;
   8145c:	e7d7      	b.n	8140e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_mosi, PIO_DEFAULT);
   8145e:	2100      	movs	r1, #0
   81460:	4b24      	ldr	r3, [pc, #144]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   81462:	4798      	blx	r3
   81464:	e7f3      	b.n	8144e <ctrl_fpgaioutil+0x66>
                    if(pin_spi1_miso > -1){
   81466:	4b25      	ldr	r3, [pc, #148]	; (814fc <ctrl_fpgaioutil+0x114>)
   81468:	6818      	ldr	r0, [r3, #0]
   8146a:	2800      	cmp	r0, #0
   8146c:	da07      	bge.n	8147e <ctrl_fpgaioutil+0x96>
                    gpio_configure_pin(pin, PIO_INPUT);
   8146e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81472:	4628      	mov	r0, r5
   81474:	4b1f      	ldr	r3, [pc, #124]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   81476:	4798      	blx	r3
                    pin_spi1_miso = pin;
   81478:	4b20      	ldr	r3, [pc, #128]	; (814fc <ctrl_fpgaioutil+0x114>)
   8147a:	601d      	str	r5, [r3, #0]
                    break;
   8147c:	e7c7      	b.n	8140e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   8147e:	2100      	movs	r1, #0
   81480:	4b1c      	ldr	r3, [pc, #112]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   81482:	4798      	blx	r3
   81484:	e7f3      	b.n	8146e <ctrl_fpgaioutil+0x86>
                    if(pin_spi1_sck > -1){
   81486:	4b1e      	ldr	r3, [pc, #120]	; (81500 <ctrl_fpgaioutil+0x118>)
   81488:	6818      	ldr	r0, [r3, #0]
   8148a:	2800      	cmp	r0, #0
   8148c:	da07      	bge.n	8149e <ctrl_fpgaioutil+0xb6>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   8148e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81492:	4628      	mov	r0, r5
   81494:	4b17      	ldr	r3, [pc, #92]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   81496:	4798      	blx	r3
                    pin_spi1_sck = pin;
   81498:	4b19      	ldr	r3, [pc, #100]	; (81500 <ctrl_fpgaioutil+0x118>)
   8149a:	601d      	str	r5, [r3, #0]
                    break;
   8149c:	e7b7      	b.n	8140e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   8149e:	2100      	movs	r1, #0
   814a0:	4b14      	ldr	r3, [pc, #80]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   814a2:	4798      	blx	r3
   814a4:	e7f3      	b.n	8148e <ctrl_fpgaioutil+0xa6>
                    if(pin_spi1_cs > -1){
   814a6:	4b17      	ldr	r3, [pc, #92]	; (81504 <ctrl_fpgaioutil+0x11c>)
   814a8:	6818      	ldr	r0, [r3, #0]
   814aa:	2800      	cmp	r0, #0
   814ac:	da07      	bge.n	814be <ctrl_fpgaioutil+0xd6>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   814ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   814b2:	4628      	mov	r0, r5
   814b4:	4b0f      	ldr	r3, [pc, #60]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   814b6:	4798      	blx	r3
                    pin_spi1_cs = pin;                    
   814b8:	4b12      	ldr	r3, [pc, #72]	; (81504 <ctrl_fpgaioutil+0x11c>)
   814ba:	601d      	str	r5, [r3, #0]
                    break;
   814bc:	e7a7      	b.n	8140e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   814be:	2100      	movs	r1, #0
   814c0:	4b0c      	ldr	r3, [pc, #48]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   814c2:	4798      	blx	r3
   814c4:	e7f3      	b.n	814ae <ctrl_fpgaioutil+0xc6>
                    gpio_configure_pin(pin, PIO_DEFAULT);
   814c6:	2100      	movs	r1, #0
   814c8:	4628      	mov	r0, r5
   814ca:	4b0a      	ldr	r3, [pc, #40]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   814cc:	4798      	blx	r3
                    break;
   814ce:	e79e      	b.n	8140e <ctrl_fpgaioutil+0x26>
            gpio_configure_pin(pin, PIO_DEFAULT);
   814d0:	2100      	movs	r1, #0
   814d2:	4628      	mov	r0, r5
   814d4:	4b07      	ldr	r3, [pc, #28]	; (814f4 <ctrl_fpgaioutil+0x10c>)
   814d6:	4798      	blx	r3
			break;
   814d8:	e799      	b.n	8140e <ctrl_fpgaioutil+0x26>
            if (config == 0){
   814da:	b12c      	cbz	r4, 814e8 <ctrl_fpgaioutil+0x100>
            if (config == 1){
   814dc:	2c01      	cmp	r4, #1
   814de:	d196      	bne.n	8140e <ctrl_fpgaioutil+0x26>
                gpio_set_pin_high(pin);
   814e0:	4628      	mov	r0, r5
   814e2:	4b09      	ldr	r3, [pc, #36]	; (81508 <ctrl_fpgaioutil+0x120>)
   814e4:	4798      	blx	r3
   814e6:	e792      	b.n	8140e <ctrl_fpgaioutil+0x26>
                gpio_set_pin_low(pin);
   814e8:	4628      	mov	r0, r5
   814ea:	4b08      	ldr	r3, [pc, #32]	; (8150c <ctrl_fpgaioutil+0x124>)
   814ec:	4798      	blx	r3
   814ee:	e7f5      	b.n	814dc <ctrl_fpgaioutil+0xf4>
   814f0:	2000184c 	.word	0x2000184c
   814f4:	0008240d 	.word	0x0008240d
   814f8:	200001e4 	.word	0x200001e4
   814fc:	200001e0 	.word	0x200001e0
   81500:	200001e8 	.word	0x200001e8
   81504:	200001dc 	.word	0x200001dc
   81508:	000823d5 	.word	0x000823d5
   8150c:	000823f1 	.word	0x000823f1

00081510 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   81510:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue){
   81512:	4b15      	ldr	r3, [pc, #84]	; (81568 <ctrl_spi1util+0x58>)
   81514:	885b      	ldrh	r3, [r3, #2]
   81516:	3ba0      	subs	r3, #160	; 0xa0
   81518:	2b04      	cmp	r3, #4
   8151a:	d806      	bhi.n	8152a <ctrl_spi1util+0x1a>
   8151c:	e8df f003 	tbb	[pc, r3]
   81520:	0c090603 	.word	0x0c090603
   81524:	0f          	.byte	0x0f
   81525:	00          	.byte	0x00
			spi1util_init();			
   81526:	4b11      	ldr	r3, [pc, #68]	; (8156c <ctrl_spi1util+0x5c>)
   81528:	4798      	blx	r3
}
   8152a:	bd10      	pop	{r4, pc}
			spi1util_deinit();
   8152c:	4b10      	ldr	r3, [pc, #64]	; (81570 <ctrl_spi1util+0x60>)
   8152e:	4798      	blx	r3
			break;
   81530:	e7fb      	b.n	8152a <ctrl_spi1util+0x1a>
			spi1util_cs_low();
   81532:	4b10      	ldr	r3, [pc, #64]	; (81574 <ctrl_spi1util+0x64>)
   81534:	4798      	blx	r3
			break;
   81536:	e7f8      	b.n	8152a <ctrl_spi1util+0x1a>
			spi1util_cs_high();
   81538:	4b0f      	ldr	r3, [pc, #60]	; (81578 <ctrl_spi1util+0x68>)
   8153a:	4798      	blx	r3
			break;
   8153c:	e7f5      	b.n	8152a <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   8153e:	4b0a      	ldr	r3, [pc, #40]	; (81568 <ctrl_spi1util+0x58>)
   81540:	88da      	ldrh	r2, [r3, #6]
   81542:	899b      	ldrh	r3, [r3, #12]
   81544:	429a      	cmp	r2, r3
   81546:	d8f0      	bhi.n	8152a <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   81548:	2a40      	cmp	r2, #64	; 0x40
   8154a:	d8ee      	bhi.n	8152a <ctrl_spi1util+0x1a>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   8154c:	2400      	movs	r4, #0
   8154e:	4b06      	ldr	r3, [pc, #24]	; (81568 <ctrl_spi1util+0x58>)
   81550:	88db      	ldrh	r3, [r3, #6]
   81552:	42a3      	cmp	r3, r4
   81554:	dde9      	ble.n	8152a <ctrl_spi1util+0x1a>
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   81556:	4b04      	ldr	r3, [pc, #16]	; (81568 <ctrl_spi1util+0x58>)
   81558:	689b      	ldr	r3, [r3, #8]
   8155a:	5d18      	ldrb	r0, [r3, r4]
   8155c:	4b07      	ldr	r3, [pc, #28]	; (8157c <ctrl_spi1util+0x6c>)
   8155e:	4798      	blx	r3
   81560:	4b07      	ldr	r3, [pc, #28]	; (81580 <ctrl_spi1util+0x70>)
   81562:	5518      	strb	r0, [r3, r4]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81564:	3401      	adds	r4, #1
   81566:	e7f2      	b.n	8154e <ctrl_spi1util+0x3e>
   81568:	2000184c 	.word	0x2000184c
   8156c:	000809ed 	.word	0x000809ed
   81570:	00080abd 	.word	0x00080abd
   81574:	00080a11 	.word	0x00080a11
   81578:	00080a25 	.word	0x00080a25
   8157c:	00080a39 	.word	0x00080a39
   81580:	20000e74 	.word	0x20000e74

00081584 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   81584:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue){
   81586:	4b15      	ldr	r3, [pc, #84]	; (815dc <ctrl_progfpgaspi+0x58>)
   81588:	885b      	ldrh	r3, [r3, #2]
   8158a:	3ba0      	subs	r3, #160	; 0xa0
   8158c:	2b04      	cmp	r3, #4
   8158e:	d806      	bhi.n	8159e <ctrl_progfpgaspi+0x1a>
   81590:	e8df f003 	tbb	[pc, r3]
   81594:	0c090603 	.word	0x0c090603
   81598:	0f          	.byte	0x0f
   81599:	00          	.byte	0x00
			fpgaspi_program_init();			
   8159a:	4b11      	ldr	r3, [pc, #68]	; (815e0 <ctrl_progfpgaspi+0x5c>)
   8159c:	4798      	blx	r3
}
   8159e:	bd10      	pop	{r4, pc}
			fpgaspi_program_deinit();
   815a0:	4b10      	ldr	r3, [pc, #64]	; (815e4 <ctrl_progfpgaspi+0x60>)
   815a2:	4798      	blx	r3
			break;
   815a4:	e7fb      	b.n	8159e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_low();
   815a6:	4b10      	ldr	r3, [pc, #64]	; (815e8 <ctrl_progfpgaspi+0x64>)
   815a8:	4798      	blx	r3
			break;
   815aa:	e7f8      	b.n	8159e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_high();
   815ac:	4b0f      	ldr	r3, [pc, #60]	; (815ec <ctrl_progfpgaspi+0x68>)
   815ae:	4798      	blx	r3
			break;
   815b0:	e7f5      	b.n	8159e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   815b2:	4b0a      	ldr	r3, [pc, #40]	; (815dc <ctrl_progfpgaspi+0x58>)
   815b4:	88da      	ldrh	r2, [r3, #6]
   815b6:	899b      	ldrh	r3, [r3, #12]
   815b8:	429a      	cmp	r2, r3
   815ba:	d8f0      	bhi.n	8159e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   815bc:	2a40      	cmp	r2, #64	; 0x40
   815be:	d8ee      	bhi.n	8159e <ctrl_progfpgaspi+0x1a>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   815c0:	2400      	movs	r4, #0
   815c2:	4b06      	ldr	r3, [pc, #24]	; (815dc <ctrl_progfpgaspi+0x58>)
   815c4:	88db      	ldrh	r3, [r3, #6]
   815c6:	42a3      	cmp	r3, r4
   815c8:	dde9      	ble.n	8159e <ctrl_progfpgaspi+0x1a>
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   815ca:	4b04      	ldr	r3, [pc, #16]	; (815dc <ctrl_progfpgaspi+0x58>)
   815cc:	689b      	ldr	r3, [r3, #8]
   815ce:	5d18      	ldrb	r0, [r3, r4]
   815d0:	4b07      	ldr	r3, [pc, #28]	; (815f0 <ctrl_progfpgaspi+0x6c>)
   815d2:	4798      	blx	r3
   815d4:	4b07      	ldr	r3, [pc, #28]	; (815f4 <ctrl_progfpgaspi+0x70>)
   815d6:	5518      	strb	r0, [r3, r4]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   815d8:	3401      	adds	r4, #1
   815da:	e7f2      	b.n	815c2 <ctrl_progfpgaspi+0x3e>
   815dc:	2000184c 	.word	0x2000184c
   815e0:	00080905 	.word	0x00080905
   815e4:	000809d1 	.word	0x000809d1
   815e8:	00080945 	.word	0x00080945
   815ec:	00080955 	.word	0x00080955
   815f0:	00080965 	.word	0x00080965
   815f4:	20000e34 	.word	0x20000e34

000815f8 <ctrl_vccint_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   815f8:	4b1a      	ldr	r3, [pc, #104]	; (81664 <ctrl_vccint_cb+0x6c>)
   815fa:	88d9      	ldrh	r1, [r3, #6]
   815fc:	899b      	ldrh	r3, [r3, #12]
   815fe:	4299      	cmp	r1, r3
   81600:	d82f      	bhi.n	81662 <ctrl_vccint_cb+0x6a>
{
   81602:	b510      	push	{r4, lr}
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   81604:	4b17      	ldr	r3, [pc, #92]	; (81664 <ctrl_vccint_cb+0x6c>)
   81606:	689a      	ldr	r2, [r3, #8]
   81608:	7810      	ldrb	r0, [r2, #0]
   8160a:	7854      	ldrb	r4, [r2, #1]
   8160c:	ea80 0304 	eor.w	r3, r0, r4
   81610:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   81614:	7892      	ldrb	r2, [r2, #2]
   81616:	4293      	cmp	r3, r2
   81618:	d003      	beq.n	81622 <ctrl_vccint_cb+0x2a>
        vccint_status = USB_STATUS_PARAMWRONG;
   8161a:	4b13      	ldr	r3, [pc, #76]	; (81668 <ctrl_vccint_cb+0x70>)
   8161c:	2201      	movs	r2, #1
   8161e:	701a      	strb	r2, [r3, #0]
}
   81620:	bd10      	pop	{r4, pc}
    if (udd_g_ctrlreq.req.wLength < 3){
   81622:	2902      	cmp	r1, #2
   81624:	d90b      	bls.n	8163e <ctrl_vccint_cb+0x46>
    uint16_t vcctemp = (udd_g_ctrlreq.payload[0]) | (udd_g_ctrlreq.payload[1] << 8);
   81626:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
    if ((vcctemp < 600) || (vcctemp > 1200)){
   8162a:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   8162e:	b29b      	uxth	r3, r3
   81630:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   81634:	d907      	bls.n	81646 <ctrl_vccint_cb+0x4e>
        vccint_status = USB_STATUS_PARAMWRONG;
   81636:	4b0c      	ldr	r3, [pc, #48]	; (81668 <ctrl_vccint_cb+0x70>)
   81638:	2201      	movs	r2, #1
   8163a:	701a      	strb	r2, [r3, #0]
        return;
   8163c:	e7f0      	b.n	81620 <ctrl_vccint_cb+0x28>
        vccint_status = USB_STATUS_CSFAIL;
   8163e:	4b0a      	ldr	r3, [pc, #40]	; (81668 <ctrl_vccint_cb+0x70>)
   81640:	2204      	movs	r2, #4
   81642:	701a      	strb	r2, [r3, #0]
        return;
   81644:	e7ec      	b.n	81620 <ctrl_vccint_cb+0x28>
    vccint_status = USB_STATUS_COMMERR;
   81646:	4b08      	ldr	r3, [pc, #32]	; (81668 <ctrl_vccint_cb+0x70>)
   81648:	2203      	movs	r2, #3
   8164a:	701a      	strb	r2, [r3, #0]
    if (tps56520_set(vcctemp)){
   8164c:	4620      	mov	r0, r4
   8164e:	4b07      	ldr	r3, [pc, #28]	; (8166c <ctrl_vccint_cb+0x74>)
   81650:	4798      	blx	r3
   81652:	2800      	cmp	r0, #0
   81654:	d0e4      	beq.n	81620 <ctrl_vccint_cb+0x28>
        vccint_setting = vcctemp;
   81656:	4b06      	ldr	r3, [pc, #24]	; (81670 <ctrl_vccint_cb+0x78>)
   81658:	801c      	strh	r4, [r3, #0]
        vccint_status = USB_STATUS_OK;
   8165a:	4b03      	ldr	r3, [pc, #12]	; (81668 <ctrl_vccint_cb+0x70>)
   8165c:	2202      	movs	r2, #2
   8165e:	701a      	strb	r2, [r3, #0]
   81660:	e7de      	b.n	81620 <ctrl_vccint_cb+0x28>
   81662:	4770      	bx	lr
   81664:	2000184c 	.word	0x2000184c
   81668:	20000eb4 	.word	0x20000eb4
   8166c:	00080add 	.word	0x00080add
   81670:	200001ee 	.word	0x200001ee

00081674 <ctrl_cdce906_cb>:
{
   81674:	b508      	push	{r3, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81676:	4b16      	ldr	r3, [pc, #88]	; (816d0 <ctrl_cdce906_cb+0x5c>)
   81678:	88da      	ldrh	r2, [r3, #6]
   8167a:	899b      	ldrh	r3, [r3, #12]
   8167c:	429a      	cmp	r2, r3
   8167e:	d811      	bhi.n	816a4 <ctrl_cdce906_cb+0x30>
    if (udd_g_ctrlreq.req.wLength < 3){
   81680:	2a02      	cmp	r2, #2
   81682:	d90c      	bls.n	8169e <ctrl_cdce906_cb+0x2a>
    cdce906_status = USB_STATUS_COMMERR;
   81684:	4b13      	ldr	r3, [pc, #76]	; (816d4 <ctrl_cdce906_cb+0x60>)
   81686:	2203      	movs	r2, #3
   81688:	701a      	strb	r2, [r3, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   8168a:	4b11      	ldr	r3, [pc, #68]	; (816d0 <ctrl_cdce906_cb+0x5c>)
   8168c:	689b      	ldr	r3, [r3, #8]
   8168e:	781a      	ldrb	r2, [r3, #0]
   81690:	b14a      	cbz	r2, 816a6 <ctrl_cdce906_cb+0x32>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   81692:	2a01      	cmp	r2, #1
   81694:	d011      	beq.n	816ba <ctrl_cdce906_cb+0x46>
        cdce906_status = USB_STATUS_PARAMWRONG;
   81696:	4b0f      	ldr	r3, [pc, #60]	; (816d4 <ctrl_cdce906_cb+0x60>)
   81698:	2201      	movs	r2, #1
   8169a:	701a      	strb	r2, [r3, #0]
        return;
   8169c:	e002      	b.n	816a4 <ctrl_cdce906_cb+0x30>
        cdce906_status = USB_STATUS_PARAMWRONG;
   8169e:	4b0d      	ldr	r3, [pc, #52]	; (816d4 <ctrl_cdce906_cb+0x60>)
   816a0:	2201      	movs	r2, #1
   816a2:	701a      	strb	r2, [r3, #0]
}
   816a4:	bd08      	pop	{r3, pc}
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   816a6:	490c      	ldr	r1, [pc, #48]	; (816d8 <ctrl_cdce906_cb+0x64>)
   816a8:	7858      	ldrb	r0, [r3, #1]
   816aa:	4b0c      	ldr	r3, [pc, #48]	; (816dc <ctrl_cdce906_cb+0x68>)
   816ac:	4798      	blx	r3
   816ae:	2800      	cmp	r0, #0
   816b0:	d0f8      	beq.n	816a4 <ctrl_cdce906_cb+0x30>
            cdce906_status = USB_STATUS_OK;
   816b2:	4b08      	ldr	r3, [pc, #32]	; (816d4 <ctrl_cdce906_cb+0x60>)
   816b4:	2202      	movs	r2, #2
   816b6:	701a      	strb	r2, [r3, #0]
   816b8:	e7f4      	b.n	816a4 <ctrl_cdce906_cb+0x30>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   816ba:	7899      	ldrb	r1, [r3, #2]
   816bc:	7858      	ldrb	r0, [r3, #1]
   816be:	4b08      	ldr	r3, [pc, #32]	; (816e0 <ctrl_cdce906_cb+0x6c>)
   816c0:	4798      	blx	r3
   816c2:	2800      	cmp	r0, #0
   816c4:	d0ee      	beq.n	816a4 <ctrl_cdce906_cb+0x30>
            cdce906_status = USB_STATUS_OK;
   816c6:	4b03      	ldr	r3, [pc, #12]	; (816d4 <ctrl_cdce906_cb+0x60>)
   816c8:	2202      	movs	r2, #2
   816ca:	701a      	strb	r2, [r3, #0]
   816cc:	e7ea      	b.n	816a4 <ctrl_cdce906_cb+0x30>
   816ce:	bf00      	nop
   816d0:	2000184c 	.word	0x2000184c
   816d4:	20000e2a 	.word	0x20000e2a
   816d8:	20000e29 	.word	0x20000e29
   816dc:	0008084d 	.word	0x0008084d
   816e0:	00080805 	.word	0x00080805

000816e4 <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   816e4:	b508      	push	{r3, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   816e6:	4803      	ldr	r0, [pc, #12]	; (816f4 <fpga_target_register_handlers+0x10>)
   816e8:	4b03      	ldr	r3, [pc, #12]	; (816f8 <fpga_target_register_handlers+0x14>)
   816ea:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   816ec:	4803      	ldr	r0, [pc, #12]	; (816fc <fpga_target_register_handlers+0x18>)
   816ee:	4b04      	ldr	r3, [pc, #16]	; (81700 <fpga_target_register_handlers+0x1c>)
   816f0:	4798      	blx	r3
   816f2:	bd08      	pop	{r3, pc}
   816f4:	00081285 	.word	0x00081285
   816f8:	00080c85 	.word	0x00080c85
   816fc:	00080f2d 	.word	0x00080f2d
   81700:	00080ca9 	.word	0x00080ca9

00081704 <udc_get_string_serial_name>:
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
	}
   81704:	4800      	ldr	r0, [pc, #0]	; (81708 <udc_get_string_serial_name+0x4>)
   81706:	4770      	bx	lr
   81708:	200001b4 	.word	0x200001b4

0008170c <udc_get_eof_conf>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   8170c:	4b02      	ldr	r3, [pc, #8]	; (81718 <udc_get_eof_conf+0xc>)
   8170e:	681b      	ldr	r3, [r3, #0]
   81710:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81712:	8858      	ldrh	r0, [r3, #2]
}
   81714:	4418      	add	r0, r3
   81716:	4770      	bx	lr
   81718:	20000ebc 	.word	0x20000ebc

0008171c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   8171c:	b538      	push	{r3, r4, r5, lr}
   8171e:	4604      	mov	r4, r0
   81720:	460d      	mov	r5, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   81722:	4b0a      	ldr	r3, [pc, #40]	; (8174c <udc_next_desc_in_iface+0x30>)
   81724:	4798      	blx	r3
   81726:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   81728:	7820      	ldrb	r0, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8172a:	4420      	add	r0, r4
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8172c:	e001      	b.n	81732 <udc_next_desc_in_iface+0x16>
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   8172e:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81730:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   81732:	4290      	cmp	r0, r2
   81734:	d205      	bcs.n	81742 <udc_next_desc_in_iface+0x26>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81736:	7843      	ldrb	r3, [r0, #1]
   81738:	2b04      	cmp	r3, #4
   8173a:	d004      	beq.n	81746 <udc_next_desc_in_iface+0x2a>
		if (desc_id == desc->bDescriptorType) {
   8173c:	42ab      	cmp	r3, r5
   8173e:	d1f6      	bne.n	8172e <udc_next_desc_in_iface+0x12>
   81740:	e000      	b.n	81744 <udc_next_desc_in_iface+0x28>
	}
	return NULL; // No specific descriptor found
   81742:	2000      	movs	r0, #0
}
   81744:	bd38      	pop	{r3, r4, r5, pc}
	return NULL; // No specific descriptor found
   81746:	2000      	movs	r0, #0
   81748:	e7fc      	b.n	81744 <udc_next_desc_in_iface+0x28>
   8174a:	bf00      	nop
   8174c:	0008170d 	.word	0x0008170d

00081750 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   81750:	b538      	push	{r3, r4, r5, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   81752:	4b14      	ldr	r3, [pc, #80]	; (817a4 <udc_update_iface_desc+0x54>)
   81754:	781b      	ldrb	r3, [r3, #0]
   81756:	b30b      	cbz	r3, 8179c <udc_update_iface_desc+0x4c>
   81758:	4604      	mov	r4, r0
   8175a:	460d      	mov	r5, r1
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8175c:	4b12      	ldr	r3, [pc, #72]	; (817a8 <udc_update_iface_desc+0x58>)
   8175e:	681b      	ldr	r3, [r3, #0]
   81760:	681b      	ldr	r3, [r3, #0]
   81762:	791a      	ldrb	r2, [r3, #4]
   81764:	4282      	cmp	r2, r0
   81766:	d91b      	bls.n	817a0 <udc_update_iface_desc+0x50>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81768:	4a10      	ldr	r2, [pc, #64]	; (817ac <udc_update_iface_desc+0x5c>)
   8176a:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   8176c:	4b10      	ldr	r3, [pc, #64]	; (817b0 <udc_update_iface_desc+0x60>)
   8176e:	4798      	blx	r3
	while (ptr_end_desc >
   81770:	e003      	b.n	8177a <udc_update_iface_desc+0x2a>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   81772:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81774:	4413      	add	r3, r2
   81776:	4a0d      	ldr	r2, [pc, #52]	; (817ac <udc_update_iface_desc+0x5c>)
   81778:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   8177a:	4b0c      	ldr	r3, [pc, #48]	; (817ac <udc_update_iface_desc+0x5c>)
   8177c:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   8177e:	4283      	cmp	r3, r0
   81780:	d20a      	bcs.n	81798 <udc_update_iface_desc+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   81782:	785a      	ldrb	r2, [r3, #1]
   81784:	2a04      	cmp	r2, #4
   81786:	d1f4      	bne.n	81772 <udc_update_iface_desc+0x22>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81788:	789a      	ldrb	r2, [r3, #2]
   8178a:	42a2      	cmp	r2, r4
   8178c:	d1f1      	bne.n	81772 <udc_update_iface_desc+0x22>
					udc_ptr_iface->bAlternateSetting)) {
   8178e:	78da      	ldrb	r2, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81790:	42aa      	cmp	r2, r5
   81792:	d1ee      	bne.n	81772 <udc_update_iface_desc+0x22>
				return true; // Interface found
   81794:	2001      	movs	r0, #1
   81796:	e000      	b.n	8179a <udc_update_iface_desc+0x4a>
	}
	return false; // Interface not found
   81798:	2000      	movs	r0, #0
}
   8179a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   8179c:	2000      	movs	r0, #0
   8179e:	e7fc      	b.n	8179a <udc_update_iface_desc+0x4a>
		return false;
   817a0:	2000      	movs	r0, #0
   817a2:	e7fa      	b.n	8179a <udc_update_iface_desc+0x4a>
   817a4:	20000ebb 	.word	0x20000ebb
   817a8:	20000ebc 	.word	0x20000ebc
   817ac:	20000ec0 	.word	0x20000ec0
   817b0:	0008170d 	.word	0x0008170d

000817b4 <udc_req_std_dev_clear_feature>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   817b4:	4b08      	ldr	r3, [pc, #32]	; (817d8 <udc_req_std_dev_clear_feature+0x24>)
   817b6:	88db      	ldrh	r3, [r3, #6]
   817b8:	b963      	cbnz	r3, 817d4 <udc_req_std_dev_clear_feature+0x20>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   817ba:	4b07      	ldr	r3, [pc, #28]	; (817d8 <udc_req_std_dev_clear_feature+0x24>)
   817bc:	885b      	ldrh	r3, [r3, #2]
   817be:	2b01      	cmp	r3, #1
   817c0:	d001      	beq.n	817c6 <udc_req_std_dev_clear_feature+0x12>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   817c2:	2000      	movs	r0, #0
}
   817c4:	4770      	bx	lr
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   817c6:	4a05      	ldr	r2, [pc, #20]	; (817dc <udc_req_std_dev_clear_feature+0x28>)
   817c8:	8813      	ldrh	r3, [r2, #0]
   817ca:	f023 0302 	bic.w	r3, r3, #2
   817ce:	8013      	strh	r3, [r2, #0]
		return true;
   817d0:	2001      	movs	r0, #1
   817d2:	4770      	bx	lr
		return false;
   817d4:	2000      	movs	r0, #0
   817d6:	4770      	bx	lr
   817d8:	2000184c 	.word	0x2000184c
   817dc:	20000eb6 	.word	0x20000eb6

000817e0 <udc_req_std_dev_set_address>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   817e0:	4b04      	ldr	r3, [pc, #16]	; (817f4 <udc_req_std_dev_set_address+0x14>)
   817e2:	88db      	ldrh	r3, [r3, #6]
   817e4:	b923      	cbnz	r3, 817f0 <udc_req_std_dev_set_address+0x10>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   817e6:	4b03      	ldr	r3, [pc, #12]	; (817f4 <udc_req_std_dev_set_address+0x14>)
   817e8:	4a03      	ldr	r2, [pc, #12]	; (817f8 <udc_req_std_dev_set_address+0x18>)
   817ea:	611a      	str	r2, [r3, #16]
	return true;
   817ec:	2001      	movs	r0, #1
   817ee:	4770      	bx	lr
		return false;
   817f0:	2000      	movs	r0, #0
}
   817f2:	4770      	bx	lr
   817f4:	2000184c 	.word	0x2000184c
   817f8:	00081ba1 	.word	0x00081ba1

000817fc <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   817fc:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   817fe:	4b11      	ldr	r3, [pc, #68]	; (81844 <udc_req_iface+0x48>)
   81800:	781b      	ldrb	r3, [r3, #0]
   81802:	b1eb      	cbz	r3, 81840 <udc_req_iface+0x44>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81804:	4b10      	ldr	r3, [pc, #64]	; (81848 <udc_req_iface+0x4c>)
   81806:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81808:	4b10      	ldr	r3, [pc, #64]	; (8184c <udc_req_iface+0x50>)
   8180a:	681b      	ldr	r3, [r3, #0]
   8180c:	681b      	ldr	r3, [r3, #0]
   8180e:	791b      	ldrb	r3, [r3, #4]
   81810:	42a3      	cmp	r3, r4
   81812:	d801      	bhi.n	81818 <udc_req_iface+0x1c>
		return false;
   81814:	2000      	movs	r0, #0
   81816:	e014      	b.n	81842 <udc_req_iface+0x46>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81818:	2100      	movs	r1, #0
   8181a:	4620      	mov	r0, r4
   8181c:	4b0c      	ldr	r3, [pc, #48]	; (81850 <udc_req_iface+0x54>)
   8181e:	4798      	blx	r3
   81820:	b178      	cbz	r0, 81842 <udc_req_iface+0x46>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81822:	4b0a      	ldr	r3, [pc, #40]	; (8184c <udc_req_iface+0x50>)
   81824:	681b      	ldr	r3, [r3, #0]
   81826:	685b      	ldr	r3, [r3, #4]
   81828:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8182c:	68eb      	ldr	r3, [r5, #12]
   8182e:	4798      	blx	r3
   81830:	4601      	mov	r1, r0
   81832:	4620      	mov	r0, r4
   81834:	4b06      	ldr	r3, [pc, #24]	; (81850 <udc_req_iface+0x54>)
   81836:	4798      	blx	r3
   81838:	b118      	cbz	r0, 81842 <udc_req_iface+0x46>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   8183a:	68ab      	ldr	r3, [r5, #8]
   8183c:	4798      	blx	r3
   8183e:	e000      	b.n	81842 <udc_req_iface+0x46>
		return false; // The device is not is configured state yet
   81840:	2000      	movs	r0, #0
}
   81842:	bd38      	pop	{r3, r4, r5, pc}
   81844:	20000ebb 	.word	0x20000ebb
   81848:	2000184c 	.word	0x2000184c
   8184c:	20000ebc 	.word	0x20000ebc
   81850:	00081751 	.word	0x00081751

00081854 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   81854:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   81856:	4b11      	ldr	r3, [pc, #68]	; (8189c <udc_req_ep+0x48>)
   81858:	781b      	ldrb	r3, [r3, #0]
   8185a:	b1e3      	cbz	r3, 81896 <udc_req_ep+0x42>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8185c:	2400      	movs	r4, #0
   8185e:	e001      	b.n	81864 <udc_req_ep+0x10>
			iface_num++) {
   81860:	3401      	adds	r4, #1
   81862:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81864:	4b0e      	ldr	r3, [pc, #56]	; (818a0 <udc_req_ep+0x4c>)
   81866:	681b      	ldr	r3, [r3, #0]
   81868:	681a      	ldr	r2, [r3, #0]
   8186a:	7912      	ldrb	r2, [r2, #4]
   8186c:	42a2      	cmp	r2, r4
   8186e:	d910      	bls.n	81892 <udc_req_ep+0x3e>
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   81870:	685b      	ldr	r3, [r3, #4]
   81872:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81876:	68eb      	ldr	r3, [r5, #12]
   81878:	4798      	blx	r3
   8187a:	4601      	mov	r1, r0
   8187c:	4620      	mov	r0, r4
   8187e:	4b09      	ldr	r3, [pc, #36]	; (818a4 <udc_req_ep+0x50>)
   81880:	4798      	blx	r3
   81882:	4603      	mov	r3, r0
   81884:	b140      	cbz	r0, 81898 <udc_req_ep+0x44>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   81886:	68ab      	ldr	r3, [r5, #8]
   81888:	4798      	blx	r3
   8188a:	4603      	mov	r3, r0
   8188c:	2800      	cmp	r0, #0
   8188e:	d0e7      	beq.n	81860 <udc_req_ep+0xc>
   81890:	e002      	b.n	81898 <udc_req_ep+0x44>
			return true;
		}
	}
	return false;
   81892:	2300      	movs	r3, #0
   81894:	e000      	b.n	81898 <udc_req_ep+0x44>
		return false; // The device is not is configured state yet
   81896:	2300      	movs	r3, #0
}
   81898:	4618      	mov	r0, r3
   8189a:	bd38      	pop	{r3, r4, r5, pc}
   8189c:	20000ebb 	.word	0x20000ebb
   818a0:	20000ebc 	.word	0x20000ebc
   818a4:	00081751 	.word	0x00081751

000818a8 <udc_iface_disable>:
{
   818a8:	b570      	push	{r4, r5, r6, lr}
   818aa:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   818ac:	2100      	movs	r1, #0
   818ae:	4b11      	ldr	r3, [pc, #68]	; (818f4 <udc_iface_disable+0x4c>)
   818b0:	4798      	blx	r3
   818b2:	4605      	mov	r5, r0
   818b4:	b1d8      	cbz	r0, 818ee <udc_iface_disable+0x46>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   818b6:	4b10      	ldr	r3, [pc, #64]	; (818f8 <udc_iface_disable+0x50>)
   818b8:	681b      	ldr	r3, [r3, #0]
   818ba:	685b      	ldr	r3, [r3, #4]
   818bc:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   818c0:	68f3      	ldr	r3, [r6, #12]
   818c2:	4798      	blx	r3
   818c4:	4601      	mov	r1, r0
   818c6:	4620      	mov	r0, r4
   818c8:	4b0a      	ldr	r3, [pc, #40]	; (818f4 <udc_iface_disable+0x4c>)
   818ca:	4798      	blx	r3
   818cc:	4605      	mov	r5, r0
   818ce:	b170      	cbz	r0, 818ee <udc_iface_disable+0x46>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   818d0:	4b0a      	ldr	r3, [pc, #40]	; (818fc <udc_iface_disable+0x54>)
   818d2:	681c      	ldr	r4, [r3, #0]
   818d4:	e002      	b.n	818dc <udc_iface_disable+0x34>
			udd_ep_free(ep_desc->bEndpointAddress);
   818d6:	7880      	ldrb	r0, [r0, #2]
   818d8:	4b09      	ldr	r3, [pc, #36]	; (81900 <udc_iface_disable+0x58>)
   818da:	4798      	blx	r3
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   818dc:	2105      	movs	r1, #5
   818de:	4620      	mov	r0, r4
   818e0:	4b08      	ldr	r3, [pc, #32]	; (81904 <udc_iface_disable+0x5c>)
   818e2:	4798      	blx	r3
			if (NULL == ep_desc) {
   818e4:	4604      	mov	r4, r0
   818e6:	2800      	cmp	r0, #0
   818e8:	d1f5      	bne.n	818d6 <udc_iface_disable+0x2e>
	udi_api->disable();
   818ea:	6873      	ldr	r3, [r6, #4]
   818ec:	4798      	blx	r3
}
   818ee:	4628      	mov	r0, r5
   818f0:	bd70      	pop	{r4, r5, r6, pc}
   818f2:	bf00      	nop
   818f4:	00081751 	.word	0x00081751
   818f8:	20000ebc 	.word	0x20000ebc
   818fc:	20000ec0 	.word	0x20000ec0
   81900:	00083ba5 	.word	0x00083ba5
   81904:	0008171d 	.word	0x0008171d

00081908 <udc_req_std_dev_get_status>:
{
   81908:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8190a:	4b06      	ldr	r3, [pc, #24]	; (81924 <udc_req_std_dev_get_status+0x1c>)
   8190c:	88db      	ldrh	r3, [r3, #6]
   8190e:	2b02      	cmp	r3, #2
   81910:	d001      	beq.n	81916 <udc_req_std_dev_get_status+0xe>
		return false;
   81912:	2000      	movs	r0, #0
}
   81914:	bd08      	pop	{r3, pc}
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81916:	2102      	movs	r1, #2
   81918:	4803      	ldr	r0, [pc, #12]	; (81928 <udc_req_std_dev_get_status+0x20>)
   8191a:	4b04      	ldr	r3, [pc, #16]	; (8192c <udc_req_std_dev_get_status+0x24>)
   8191c:	4798      	blx	r3
	return true;
   8191e:	2001      	movs	r0, #1
   81920:	e7f8      	b.n	81914 <udc_req_std_dev_get_status+0xc>
   81922:	bf00      	nop
   81924:	2000184c 	.word	0x2000184c
   81928:	20000eb6 	.word	0x20000eb6
   8192c:	00083b99 	.word	0x00083b99

00081930 <udc_req_std_dev_get_str_desc>:
{
   81930:	b510      	push	{r4, lr}
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81932:	4b16      	ldr	r3, [pc, #88]	; (8198c <udc_req_std_dev_get_str_desc+0x5c>)
   81934:	789b      	ldrb	r3, [r3, #2]
   81936:	2b03      	cmp	r3, #3
   81938:	d826      	bhi.n	81988 <udc_req_std_dev_get_str_desc+0x58>
   8193a:	e8df f003 	tbb	[pc, r3]
   8193e:	1e02      	.short	0x1e02
   81940:	0822      	.short	0x0822
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   81942:	2104      	movs	r1, #4
   81944:	4812      	ldr	r0, [pc, #72]	; (81990 <udc_req_std_dev_get_str_desc+0x60>)
   81946:	4b13      	ldr	r3, [pc, #76]	; (81994 <udc_req_std_dev_get_str_desc+0x64>)
   81948:	4798      	blx	r3
	return true;
   8194a:	2001      	movs	r0, #1
   8194c:	e014      	b.n	81978 <udc_req_std_dev_get_str_desc+0x48>
		str = udc_get_string_serial_name();
   8194e:	4b12      	ldr	r3, [pc, #72]	; (81998 <udc_req_std_dev_get_str_desc+0x68>)
   81950:	4798      	blx	r3
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   81952:	2120      	movs	r1, #32
   81954:	e013      	b.n	8197e <udc_req_std_dev_get_str_desc+0x4e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81956:	5cc4      	ldrb	r4, [r0, r3]
   81958:	4a10      	ldr	r2, [pc, #64]	; (8199c <udc_req_std_dev_get_str_desc+0x6c>)
   8195a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   8195e:	8054      	strh	r4, [r2, #2]
		for(i = 0; i < str_length; i++) {
   81960:	3301      	adds	r3, #1
   81962:	b2db      	uxtb	r3, r3
   81964:	428b      	cmp	r3, r1
   81966:	d3f6      	bcc.n	81956 <udc_req_std_dev_get_str_desc+0x26>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81968:	3101      	adds	r1, #1
   8196a:	0049      	lsls	r1, r1, #1
   8196c:	b2c9      	uxtb	r1, r1
   8196e:	480b      	ldr	r0, [pc, #44]	; (8199c <udc_req_std_dev_get_str_desc+0x6c>)
   81970:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   81972:	4b08      	ldr	r3, [pc, #32]	; (81994 <udc_req_std_dev_get_str_desc+0x64>)
   81974:	4798      	blx	r3
	return true;
   81976:	2001      	movs	r0, #1
}
   81978:	bd10      	pop	{r4, pc}
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8197a:	2115      	movs	r1, #21
   8197c:	4808      	ldr	r0, [pc, #32]	; (819a0 <udc_req_std_dev_get_str_desc+0x70>)
   8197e:	2300      	movs	r3, #0
   81980:	e7f0      	b.n	81964 <udc_req_std_dev_get_str_desc+0x34>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   81982:	2113      	movs	r1, #19
		str = udc_string_product_name;
   81984:	4807      	ldr	r0, [pc, #28]	; (819a4 <udc_req_std_dev_get_str_desc+0x74>)
   81986:	e7fa      	b.n	8197e <udc_req_std_dev_get_str_desc+0x4e>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81988:	2000      	movs	r0, #0
   8198a:	e7f5      	b.n	81978 <udc_req_std_dev_get_str_desc+0x48>
   8198c:	2000184c 	.word	0x2000184c
   81990:	200002f8 	.word	0x200002f8
   81994:	00083b99 	.word	0x00083b99
   81998:	00081705 	.word	0x00081705
   8199c:	200002b4 	.word	0x200002b4
   819a0:	200002fc 	.word	0x200002fc
   819a4:	20000314 	.word	0x20000314

000819a8 <udc_req_std_dev_get_configuration>:
{
   819a8:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
   819aa:	4b06      	ldr	r3, [pc, #24]	; (819c4 <udc_req_std_dev_get_configuration+0x1c>)
   819ac:	88db      	ldrh	r3, [r3, #6]
   819ae:	2b01      	cmp	r3, #1
   819b0:	d001      	beq.n	819b6 <udc_req_std_dev_get_configuration+0xe>
		return false;
   819b2:	2000      	movs	r0, #0
}
   819b4:	bd08      	pop	{r3, pc}
	udd_set_setup_payload(&udc_num_configuration,1);
   819b6:	2101      	movs	r1, #1
   819b8:	4803      	ldr	r0, [pc, #12]	; (819c8 <udc_req_std_dev_get_configuration+0x20>)
   819ba:	4b04      	ldr	r3, [pc, #16]	; (819cc <udc_req_std_dev_get_configuration+0x24>)
   819bc:	4798      	blx	r3
	return true;
   819be:	2001      	movs	r0, #1
   819c0:	e7f8      	b.n	819b4 <udc_req_std_dev_get_configuration+0xc>
   819c2:	bf00      	nop
   819c4:	2000184c 	.word	0x2000184c
   819c8:	20000ebb 	.word	0x20000ebb
   819cc:	00083b99 	.word	0x00083b99

000819d0 <udc_req_std_iface_get_setting>:
{
   819d0:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
   819d2:	4b15      	ldr	r3, [pc, #84]	; (81a28 <udc_req_std_iface_get_setting+0x58>)
   819d4:	88db      	ldrh	r3, [r3, #6]
   819d6:	2b01      	cmp	r3, #1
   819d8:	d120      	bne.n	81a1c <udc_req_std_iface_get_setting+0x4c>
	if (!udc_num_configuration) {
   819da:	4b14      	ldr	r3, [pc, #80]	; (81a2c <udc_req_std_iface_get_setting+0x5c>)
   819dc:	781b      	ldrb	r3, [r3, #0]
   819de:	b303      	cbz	r3, 81a22 <udc_req_std_iface_get_setting+0x52>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   819e0:	4b11      	ldr	r3, [pc, #68]	; (81a28 <udc_req_std_iface_get_setting+0x58>)
   819e2:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   819e4:	4b12      	ldr	r3, [pc, #72]	; (81a30 <udc_req_std_iface_get_setting+0x60>)
   819e6:	681b      	ldr	r3, [r3, #0]
   819e8:	681b      	ldr	r3, [r3, #0]
   819ea:	791b      	ldrb	r3, [r3, #4]
   819ec:	42ab      	cmp	r3, r5
   819ee:	d801      	bhi.n	819f4 <udc_req_std_iface_get_setting+0x24>
		return false;
   819f0:	2400      	movs	r4, #0
   819f2:	e014      	b.n	81a1e <udc_req_std_iface_get_setting+0x4e>
	if (!udc_update_iface_desc(iface_num, 0)) {
   819f4:	2100      	movs	r1, #0
   819f6:	4628      	mov	r0, r5
   819f8:	4b0e      	ldr	r3, [pc, #56]	; (81a34 <udc_req_std_iface_get_setting+0x64>)
   819fa:	4798      	blx	r3
   819fc:	4604      	mov	r4, r0
   819fe:	b170      	cbz	r0, 81a1e <udc_req_std_iface_get_setting+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81a00:	4b0b      	ldr	r3, [pc, #44]	; (81a30 <udc_req_std_iface_get_setting+0x60>)
   81a02:	681b      	ldr	r3, [r3, #0]
   81a04:	685b      	ldr	r3, [r3, #4]
   81a06:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	udc_iface_setting = udi_api->getsetting();
   81a0a:	68db      	ldr	r3, [r3, #12]
   81a0c:	4798      	blx	r3
   81a0e:	4b0a      	ldr	r3, [pc, #40]	; (81a38 <udc_req_std_iface_get_setting+0x68>)
   81a10:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   81a12:	2101      	movs	r1, #1
   81a14:	4618      	mov	r0, r3
   81a16:	4b09      	ldr	r3, [pc, #36]	; (81a3c <udc_req_std_iface_get_setting+0x6c>)
   81a18:	4798      	blx	r3
	return true;
   81a1a:	e000      	b.n	81a1e <udc_req_std_iface_get_setting+0x4e>
		return false; // Error in request
   81a1c:	2400      	movs	r4, #0
}
   81a1e:	4620      	mov	r0, r4
   81a20:	bd38      	pop	{r3, r4, r5, pc}
		return false; // The device is not is configured state yet
   81a22:	2400      	movs	r4, #0
   81a24:	e7fb      	b.n	81a1e <udc_req_std_iface_get_setting+0x4e>
   81a26:	bf00      	nop
   81a28:	2000184c 	.word	0x2000184c
   81a2c:	20000ebb 	.word	0x20000ebb
   81a30:	20000ebc 	.word	0x20000ebc
   81a34:	00081751 	.word	0x00081751
   81a38:	20000eba 	.word	0x20000eba
   81a3c:	00083b99 	.word	0x00083b99

00081a40 <udc_req_std_dev_get_descriptor>:
{
   81a40:	b510      	push	{r4, lr}
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   81a42:	4b43      	ldr	r3, [pc, #268]	; (81b50 <udc_req_std_dev_get_descriptor+0x110>)
   81a44:	885b      	ldrh	r3, [r3, #2]
   81a46:	b2dc      	uxtb	r4, r3
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81a48:	0a1b      	lsrs	r3, r3, #8
   81a4a:	3b01      	subs	r3, #1
   81a4c:	2b0e      	cmp	r3, #14
   81a4e:	d87b      	bhi.n	81b48 <udc_req_std_dev_get_descriptor+0x108>
   81a50:	e8df f003 	tbb	[pc, r3]
   81a54:	7a751c08 	.word	0x7a751c08
   81a58:	7a4d3f7a 	.word	0x7a4d3f7a
   81a5c:	7a7a7a7a 	.word	0x7a7a7a7a
   81a60:	7a7a      	.short	0x7a7a
   81a62:	70          	.byte	0x70
   81a63:	00          	.byte	0x00
		if (!udd_is_high_speed()) {
   81a64:	4b3b      	ldr	r3, [pc, #236]	; (81b54 <udc_req_std_dev_get_descriptor+0x114>)
   81a66:	4798      	blx	r3
   81a68:	b928      	cbnz	r0, 81a76 <udc_req_std_dev_get_descriptor+0x36>
				(uint8_t *) udc_config.confdev_hs,
   81a6a:	4b3b      	ldr	r3, [pc, #236]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81a6c:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   81a6e:	7801      	ldrb	r1, [r0, #0]
   81a70:	4b3a      	ldr	r3, [pc, #232]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81a72:	4798      	blx	r3
   81a74:	e032      	b.n	81adc <udc_req_std_dev_get_descriptor+0x9c>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81a76:	4b38      	ldr	r3, [pc, #224]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81a78:	681a      	ldr	r2, [r3, #0]
   81a7a:	2110      	movs	r1, #16
   81a7c:	7091      	strb	r1, [r2, #2]
   81a7e:	2102      	movs	r1, #2
   81a80:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   81a82:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   81a84:	7801      	ldrb	r1, [r0, #0]
   81a86:	4b35      	ldr	r3, [pc, #212]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81a88:	4798      	blx	r3
   81a8a:	e027      	b.n	81adc <udc_req_std_dev_get_descriptor+0x9c>
		if (udd_is_high_speed()) {
   81a8c:	4b31      	ldr	r3, [pc, #196]	; (81b54 <udc_req_std_dev_get_descriptor+0x114>)
   81a8e:	4798      	blx	r3
   81a90:	b190      	cbz	r0, 81ab8 <udc_req_std_dev_get_descriptor+0x78>
			if (conf_num >= udc_config.confdev_hs->
   81a92:	4b31      	ldr	r3, [pc, #196]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81a94:	689b      	ldr	r3, [r3, #8]
   81a96:	7c5b      	ldrb	r3, [r3, #17]
   81a98:	42a3      	cmp	r3, r4
   81a9a:	d801      	bhi.n	81aa0 <udc_req_std_dev_get_descriptor+0x60>
				return false;
   81a9c:	2000      	movs	r0, #0
   81a9e:	e054      	b.n	81b4a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81aa0:	4b2d      	ldr	r3, [pc, #180]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81aa2:	691b      	ldr	r3, [r3, #16]
   81aa4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   81aa8:	8841      	ldrh	r1, [r0, #2]
   81aaa:	4b2c      	ldr	r3, [pc, #176]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81aac:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81aae:	4b28      	ldr	r3, [pc, #160]	; (81b50 <udc_req_std_dev_get_descriptor+0x110>)
   81ab0:	689b      	ldr	r3, [r3, #8]
   81ab2:	2202      	movs	r2, #2
   81ab4:	705a      	strb	r2, [r3, #1]
		break;
   81ab6:	e011      	b.n	81adc <udc_req_std_dev_get_descriptor+0x9c>
			if (conf_num >= udc_config.confdev_lsfs->
   81ab8:	4b27      	ldr	r3, [pc, #156]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81aba:	681b      	ldr	r3, [r3, #0]
   81abc:	7c5b      	ldrb	r3, [r3, #17]
   81abe:	42a3      	cmp	r3, r4
   81ac0:	d943      	bls.n	81b4a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81ac2:	4b25      	ldr	r3, [pc, #148]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81ac4:	685b      	ldr	r3, [r3, #4]
   81ac6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   81aca:	8841      	ldrh	r1, [r0, #2]
   81acc:	4b23      	ldr	r3, [pc, #140]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81ace:	4798      	blx	r3
   81ad0:	e7ed      	b.n	81aae <udc_req_std_dev_get_descriptor+0x6e>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   81ad2:	4b21      	ldr	r3, [pc, #132]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81ad4:	68d8      	ldr	r0, [r3, #12]
   81ad6:	7801      	ldrb	r1, [r0, #0]
   81ad8:	4b20      	ldr	r3, [pc, #128]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81ada:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   81adc:	4b1c      	ldr	r3, [pc, #112]	; (81b50 <udc_req_std_dev_get_descriptor+0x110>)
   81ade:	88da      	ldrh	r2, [r3, #6]
   81ae0:	899b      	ldrh	r3, [r3, #12]
   81ae2:	429a      	cmp	r2, r3
   81ae4:	d232      	bcs.n	81b4c <udc_req_std_dev_get_descriptor+0x10c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81ae6:	4b1a      	ldr	r3, [pc, #104]	; (81b50 <udc_req_std_dev_get_descriptor+0x110>)
   81ae8:	819a      	strh	r2, [r3, #12]
	return true;
   81aea:	2001      	movs	r0, #1
   81aec:	e02d      	b.n	81b4a <udc_req_std_dev_get_descriptor+0x10a>
		if (!udd_is_high_speed()) {
   81aee:	4b19      	ldr	r3, [pc, #100]	; (81b54 <udc_req_std_dev_get_descriptor+0x114>)
   81af0:	4798      	blx	r3
   81af2:	b980      	cbnz	r0, 81b16 <udc_req_std_dev_get_descriptor+0xd6>
			if (conf_num >= udc_config.confdev_hs->
   81af4:	4b18      	ldr	r3, [pc, #96]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81af6:	689b      	ldr	r3, [r3, #8]
   81af8:	7c5b      	ldrb	r3, [r3, #17]
   81afa:	42a3      	cmp	r3, r4
   81afc:	d925      	bls.n	81b4a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81afe:	4b16      	ldr	r3, [pc, #88]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81b00:	691b      	ldr	r3, [r3, #16]
   81b02:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   81b06:	8841      	ldrh	r1, [r0, #2]
   81b08:	4b14      	ldr	r3, [pc, #80]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81b0a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81b0c:	4b10      	ldr	r3, [pc, #64]	; (81b50 <udc_req_std_dev_get_descriptor+0x110>)
   81b0e:	689b      	ldr	r3, [r3, #8]
   81b10:	2207      	movs	r2, #7
   81b12:	705a      	strb	r2, [r3, #1]
		break;
   81b14:	e7e2      	b.n	81adc <udc_req_std_dev_get_descriptor+0x9c>
			if (conf_num >= udc_config.confdev_lsfs->
   81b16:	4b10      	ldr	r3, [pc, #64]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81b18:	681b      	ldr	r3, [r3, #0]
   81b1a:	7c5b      	ldrb	r3, [r3, #17]
   81b1c:	42a3      	cmp	r3, r4
   81b1e:	d801      	bhi.n	81b24 <udc_req_std_dev_get_descriptor+0xe4>
				return false;
   81b20:	2000      	movs	r0, #0
   81b22:	e012      	b.n	81b4a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81b24:	4b0c      	ldr	r3, [pc, #48]	; (81b58 <udc_req_std_dev_get_descriptor+0x118>)
   81b26:	685b      	ldr	r3, [r3, #4]
   81b28:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   81b2c:	8841      	ldrh	r1, [r0, #2]
   81b2e:	4b0b      	ldr	r3, [pc, #44]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81b30:	4798      	blx	r3
   81b32:	e7eb      	b.n	81b0c <udc_req_std_dev_get_descriptor+0xcc>
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   81b34:	2121      	movs	r1, #33	; 0x21
   81b36:	480a      	ldr	r0, [pc, #40]	; (81b60 <udc_req_std_dev_get_descriptor+0x120>)
   81b38:	4b08      	ldr	r3, [pc, #32]	; (81b5c <udc_req_std_dev_get_descriptor+0x11c>)
   81b3a:	4798      	blx	r3
		break;
   81b3c:	e7ce      	b.n	81adc <udc_req_std_dev_get_descriptor+0x9c>
		if (!udc_req_std_dev_get_str_desc()) {
   81b3e:	4b09      	ldr	r3, [pc, #36]	; (81b64 <udc_req_std_dev_get_descriptor+0x124>)
   81b40:	4798      	blx	r3
   81b42:	2800      	cmp	r0, #0
   81b44:	d1ca      	bne.n	81adc <udc_req_std_dev_get_descriptor+0x9c>
   81b46:	e000      	b.n	81b4a <udc_req_std_dev_get_descriptor+0x10a>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81b48:	2000      	movs	r0, #0
}
   81b4a:	bd10      	pop	{r4, pc}
	return true;
   81b4c:	2001      	movs	r0, #1
   81b4e:	e7fc      	b.n	81b4a <udc_req_std_dev_get_descriptor+0x10a>
   81b50:	2000184c 	.word	0x2000184c
   81b54:	00083b41 	.word	0x00083b41
   81b58:	20000344 	.word	0x20000344
   81b5c:	00083b99 	.word	0x00083b99
   81b60:	200001f0 	.word	0x200001f0
   81b64:	00081931 	.word	0x00081931

00081b68 <udc_req_std_ep_get_status>:
{
   81b68:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   81b6a:	4b09      	ldr	r3, [pc, #36]	; (81b90 <udc_req_std_ep_get_status+0x28>)
   81b6c:	88db      	ldrh	r3, [r3, #6]
   81b6e:	2b02      	cmp	r3, #2
   81b70:	d001      	beq.n	81b76 <udc_req_std_ep_get_status+0xe>
		return false;
   81b72:	2000      	movs	r0, #0
}
   81b74:	bd08      	pop	{r3, pc}
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   81b76:	4b06      	ldr	r3, [pc, #24]	; (81b90 <udc_req_std_ep_get_status+0x28>)
   81b78:	7918      	ldrb	r0, [r3, #4]
   81b7a:	4b06      	ldr	r3, [pc, #24]	; (81b94 <udc_req_std_ep_get_status+0x2c>)
   81b7c:	4798      	blx	r3
   81b7e:	4b06      	ldr	r3, [pc, #24]	; (81b98 <udc_req_std_ep_get_status+0x30>)
   81b80:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81b82:	2102      	movs	r1, #2
   81b84:	4618      	mov	r0, r3
   81b86:	4b05      	ldr	r3, [pc, #20]	; (81b9c <udc_req_std_ep_get_status+0x34>)
   81b88:	4798      	blx	r3
	return true;
   81b8a:	2001      	movs	r0, #1
   81b8c:	e7f2      	b.n	81b74 <udc_req_std_ep_get_status+0xc>
   81b8e:	bf00      	nop
   81b90:	2000184c 	.word	0x2000184c
   81b94:	00083bf1 	.word	0x00083bf1
   81b98:	20000eb8 	.word	0x20000eb8
   81b9c:	00083b99 	.word	0x00083b99

00081ba0 <udc_valid_address>:
{
   81ba0:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   81ba2:	4b03      	ldr	r3, [pc, #12]	; (81bb0 <udc_valid_address+0x10>)
   81ba4:	7898      	ldrb	r0, [r3, #2]
   81ba6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81baa:	4b02      	ldr	r3, [pc, #8]	; (81bb4 <udc_valid_address+0x14>)
   81bac:	4798      	blx	r3
}
   81bae:	bd08      	pop	{r3, pc}
   81bb0:	2000184c 	.word	0x2000184c
   81bb4:	00083b51 	.word	0x00083b51

00081bb8 <udc_iface_enable>:
{
   81bb8:	b538      	push	{r3, r4, r5, lr}
   81bba:	4605      	mov	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   81bbc:	4b0f      	ldr	r3, [pc, #60]	; (81bfc <udc_iface_enable+0x44>)
   81bbe:	4798      	blx	r3
   81bc0:	4603      	mov	r3, r0
   81bc2:	b1c0      	cbz	r0, 81bf6 <udc_iface_enable+0x3e>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81bc4:	4b0e      	ldr	r3, [pc, #56]	; (81c00 <udc_iface_enable+0x48>)
   81bc6:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   81bc8:	2105      	movs	r1, #5
   81bca:	4620      	mov	r0, r4
   81bcc:	4b0d      	ldr	r3, [pc, #52]	; (81c04 <udc_iface_enable+0x4c>)
   81bce:	4798      	blx	r3
		if (NULL == ep_desc)
   81bd0:	4604      	mov	r4, r0
   81bd2:	b140      	cbz	r0, 81be6 <udc_iface_enable+0x2e>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81bd4:	8882      	ldrh	r2, [r0, #4]
   81bd6:	78c1      	ldrb	r1, [r0, #3]
   81bd8:	7880      	ldrb	r0, [r0, #2]
   81bda:	4b0b      	ldr	r3, [pc, #44]	; (81c08 <udc_iface_enable+0x50>)
   81bdc:	4798      	blx	r3
   81bde:	4603      	mov	r3, r0
   81be0:	2800      	cmp	r0, #0
   81be2:	d1f1      	bne.n	81bc8 <udc_iface_enable+0x10>
   81be4:	e007      	b.n	81bf6 <udc_iface_enable+0x3e>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81be6:	4b09      	ldr	r3, [pc, #36]	; (81c0c <udc_iface_enable+0x54>)
   81be8:	681b      	ldr	r3, [r3, #0]
   81bea:	685b      	ldr	r3, [r3, #4]
   81bec:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   81bf0:	681b      	ldr	r3, [r3, #0]
   81bf2:	4798      	blx	r3
   81bf4:	4603      	mov	r3, r0
}
   81bf6:	4618      	mov	r0, r3
   81bf8:	bd38      	pop	{r3, r4, r5, pc}
   81bfa:	bf00      	nop
   81bfc:	00081751 	.word	0x00081751
   81c00:	20000ec0 	.word	0x20000ec0
   81c04:	0008171d 	.word	0x0008171d
   81c08:	00083ee1 	.word	0x00083ee1
   81c0c:	20000ebc 	.word	0x20000ebc

00081c10 <udc_req_std_iface_set_setting>:
{
   81c10:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength) {
   81c12:	4b0b      	ldr	r3, [pc, #44]	; (81c40 <udc_req_std_iface_set_setting+0x30>)
   81c14:	88db      	ldrh	r3, [r3, #6]
   81c16:	b983      	cbnz	r3, 81c3a <udc_req_std_iface_set_setting+0x2a>
	if (!udc_num_configuration) {
   81c18:	4b0a      	ldr	r3, [pc, #40]	; (81c44 <udc_req_std_iface_set_setting+0x34>)
   81c1a:	781b      	ldrb	r3, [r3, #0]
   81c1c:	b90b      	cbnz	r3, 81c22 <udc_req_std_iface_set_setting+0x12>
		return false; // The device is not is configured state yet
   81c1e:	2000      	movs	r0, #0
   81c20:	e00c      	b.n	81c3c <udc_req_std_iface_set_setting+0x2c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81c22:	4b07      	ldr	r3, [pc, #28]	; (81c40 <udc_req_std_iface_set_setting+0x30>)
   81c24:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81c26:	789d      	ldrb	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   81c28:	4620      	mov	r0, r4
   81c2a:	4b07      	ldr	r3, [pc, #28]	; (81c48 <udc_req_std_iface_set_setting+0x38>)
   81c2c:	4798      	blx	r3
   81c2e:	b128      	cbz	r0, 81c3c <udc_req_std_iface_set_setting+0x2c>
	return udc_iface_enable(iface_num, setting_num);
   81c30:	4629      	mov	r1, r5
   81c32:	4620      	mov	r0, r4
   81c34:	4b05      	ldr	r3, [pc, #20]	; (81c4c <udc_req_std_iface_set_setting+0x3c>)
   81c36:	4798      	blx	r3
   81c38:	e000      	b.n	81c3c <udc_req_std_iface_set_setting+0x2c>
		return false; // Error in request
   81c3a:	2000      	movs	r0, #0
}
   81c3c:	bd38      	pop	{r3, r4, r5, pc}
   81c3e:	bf00      	nop
   81c40:	2000184c 	.word	0x2000184c
   81c44:	20000ebb 	.word	0x20000ebb
   81c48:	000818a9 	.word	0x000818a9
   81c4c:	00081bb9 	.word	0x00081bb9

00081c50 <udc_req_std_ep_clear_feature>:
{
   81c50:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength) {
   81c52:	4b07      	ldr	r3, [pc, #28]	; (81c70 <udc_req_std_ep_clear_feature+0x20>)
   81c54:	88db      	ldrh	r3, [r3, #6]
   81c56:	b94b      	cbnz	r3, 81c6c <udc_req_std_ep_clear_feature+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81c58:	4b05      	ldr	r3, [pc, #20]	; (81c70 <udc_req_std_ep_clear_feature+0x20>)
   81c5a:	885b      	ldrh	r3, [r3, #2]
   81c5c:	b10b      	cbz	r3, 81c62 <udc_req_std_ep_clear_feature+0x12>
	return false;
   81c5e:	2000      	movs	r0, #0
}
   81c60:	bd08      	pop	{r3, pc}
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81c62:	4b03      	ldr	r3, [pc, #12]	; (81c70 <udc_req_std_ep_clear_feature+0x20>)
   81c64:	7918      	ldrb	r0, [r3, #4]
   81c66:	4b03      	ldr	r3, [pc, #12]	; (81c74 <udc_req_std_ep_clear_feature+0x24>)
   81c68:	4798      	blx	r3
   81c6a:	e7f9      	b.n	81c60 <udc_req_std_ep_clear_feature+0x10>
		return false;
   81c6c:	2000      	movs	r0, #0
   81c6e:	e7f7      	b.n	81c60 <udc_req_std_ep_clear_feature+0x10>
   81c70:	2000184c 	.word	0x2000184c
   81c74:	00083cf5 	.word	0x00083cf5

00081c78 <udc_req_std_ep_set_feature>:
	if (udd_g_ctrlreq.req.wLength) {
   81c78:	4b09      	ldr	r3, [pc, #36]	; (81ca0 <udc_req_std_ep_set_feature+0x28>)
   81c7a:	88db      	ldrh	r3, [r3, #6]
   81c7c:	b96b      	cbnz	r3, 81c9a <udc_req_std_ep_set_feature+0x22>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81c7e:	4b08      	ldr	r3, [pc, #32]	; (81ca0 <udc_req_std_ep_set_feature+0x28>)
   81c80:	885b      	ldrh	r3, [r3, #2]
   81c82:	b10b      	cbz	r3, 81c88 <udc_req_std_ep_set_feature+0x10>
	return false;
   81c84:	2000      	movs	r0, #0
}
   81c86:	4770      	bx	lr
{
   81c88:	b510      	push	{r4, lr}
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   81c8a:	4c05      	ldr	r4, [pc, #20]	; (81ca0 <udc_req_std_ep_set_feature+0x28>)
   81c8c:	7920      	ldrb	r0, [r4, #4]
   81c8e:	4b05      	ldr	r3, [pc, #20]	; (81ca4 <udc_req_std_ep_set_feature+0x2c>)
   81c90:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81c92:	7920      	ldrb	r0, [r4, #4]
   81c94:	4b04      	ldr	r3, [pc, #16]	; (81ca8 <udc_req_std_ep_set_feature+0x30>)
   81c96:	4798      	blx	r3
}
   81c98:	bd10      	pop	{r4, pc}
		return false;
   81c9a:	2000      	movs	r0, #0
   81c9c:	4770      	bx	lr
   81c9e:	bf00      	nop
   81ca0:	2000184c 	.word	0x2000184c
   81ca4:	00084185 	.word	0x00084185
   81ca8:	00083c2d 	.word	0x00083c2d

00081cac <udc_get_interface_desc>:
}
   81cac:	4b01      	ldr	r3, [pc, #4]	; (81cb4 <udc_get_interface_desc+0x8>)
   81cae:	6818      	ldr	r0, [r3, #0]
   81cb0:	4770      	bx	lr
   81cb2:	bf00      	nop
   81cb4:	20000ec0 	.word	0x20000ec0

00081cb8 <udc_start>:
{
   81cb8:	b508      	push	{r3, lr}
	udd_enable();
   81cba:	4b01      	ldr	r3, [pc, #4]	; (81cc0 <udc_start+0x8>)
   81cbc:	4798      	blx	r3
}
   81cbe:	bd08      	pop	{r3, pc}
   81cc0:	00083a5d 	.word	0x00083a5d

00081cc4 <udc_reset>:
{
   81cc4:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
   81cc6:	4b0b      	ldr	r3, [pc, #44]	; (81cf4 <udc_reset+0x30>)
   81cc8:	781b      	ldrb	r3, [r3, #0]
   81cca:	b92b      	cbnz	r3, 81cd8 <udc_reset+0x14>
	udc_num_configuration = 0;
   81ccc:	2300      	movs	r3, #0
   81cce:	4a09      	ldr	r2, [pc, #36]	; (81cf4 <udc_reset+0x30>)
   81cd0:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   81cd2:	4a09      	ldr	r2, [pc, #36]	; (81cf8 <udc_reset+0x34>)
   81cd4:	8013      	strh	r3, [r2, #0]
}
   81cd6:	bd10      	pop	{r4, pc}
		for (iface_num = 0;
   81cd8:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81cda:	4b08      	ldr	r3, [pc, #32]	; (81cfc <udc_reset+0x38>)
   81cdc:	681b      	ldr	r3, [r3, #0]
   81cde:	681b      	ldr	r3, [r3, #0]
   81ce0:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   81ce2:	42a3      	cmp	r3, r4
   81ce4:	d9f2      	bls.n	81ccc <udc_reset+0x8>
			udc_iface_disable(iface_num);
   81ce6:	4620      	mov	r0, r4
   81ce8:	4b05      	ldr	r3, [pc, #20]	; (81d00 <udc_reset+0x3c>)
   81cea:	4798      	blx	r3
				iface_num++) {
   81cec:	3401      	adds	r4, #1
   81cee:	b2e4      	uxtb	r4, r4
   81cf0:	e7f3      	b.n	81cda <udc_reset+0x16>
   81cf2:	bf00      	nop
   81cf4:	20000ebb 	.word	0x20000ebb
   81cf8:	20000eb6 	.word	0x20000eb6
   81cfc:	20000ebc 	.word	0x20000ebc
   81d00:	000818a9 	.word	0x000818a9

00081d04 <udc_req_std_dev_set_feature>:
{
   81d04:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength) {
   81d06:	4b1a      	ldr	r3, [pc, #104]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d08:	88db      	ldrh	r3, [r3, #6]
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d12c      	bne.n	81d68 <udc_req_std_dev_set_feature+0x64>
	switch (udd_g_ctrlreq.req.wValue) {
   81d0e:	4b18      	ldr	r3, [pc, #96]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d10:	885b      	ldrh	r3, [r3, #2]
   81d12:	2b02      	cmp	r3, #2
   81d14:	d002      	beq.n	81d1c <udc_req_std_dev_set_feature+0x18>
		return false;
   81d16:	2400      	movs	r4, #0
}
   81d18:	4620      	mov	r0, r4
   81d1a:	bd10      	pop	{r4, pc}
		if (!udd_is_high_speed()) {
   81d1c:	4b15      	ldr	r3, [pc, #84]	; (81d74 <udc_req_std_dev_set_feature+0x70>)
   81d1e:	4798      	blx	r3
   81d20:	4604      	mov	r4, r0
   81d22:	2800      	cmp	r0, #0
   81d24:	d0f8      	beq.n	81d18 <udc_req_std_dev_set_feature+0x14>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81d26:	4b12      	ldr	r3, [pc, #72]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d28:	791b      	ldrb	r3, [r3, #4]
   81d2a:	b10b      	cbz	r3, 81d30 <udc_req_std_dev_set_feature+0x2c>
	return false;
   81d2c:	2400      	movs	r4, #0
   81d2e:	e7f3      	b.n	81d18 <udc_req_std_dev_set_feature+0x14>
		udc_reset();
   81d30:	4b11      	ldr	r3, [pc, #68]	; (81d78 <udc_req_std_dev_set_feature+0x74>)
   81d32:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81d34:	4b0e      	ldr	r3, [pc, #56]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d36:	889b      	ldrh	r3, [r3, #4]
   81d38:	0a1b      	lsrs	r3, r3, #8
   81d3a:	3b01      	subs	r3, #1
   81d3c:	2b03      	cmp	r3, #3
   81d3e:	d815      	bhi.n	81d6c <udc_req_std_dev_set_feature+0x68>
   81d40:	e8df f003 	tbb	[pc, r3]
   81d44:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   81d48:	4b09      	ldr	r3, [pc, #36]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d4a:	4a0c      	ldr	r2, [pc, #48]	; (81d7c <udc_req_std_dev_set_feature+0x78>)
   81d4c:	611a      	str	r2, [r3, #16]
			return true;
   81d4e:	e7e3      	b.n	81d18 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   81d50:	4b07      	ldr	r3, [pc, #28]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d52:	4a0b      	ldr	r2, [pc, #44]	; (81d80 <udc_req_std_dev_set_feature+0x7c>)
   81d54:	611a      	str	r2, [r3, #16]
			return true;
   81d56:	e7df      	b.n	81d18 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   81d58:	4b05      	ldr	r3, [pc, #20]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d5a:	4a0a      	ldr	r2, [pc, #40]	; (81d84 <udc_req_std_dev_set_feature+0x80>)
   81d5c:	611a      	str	r2, [r3, #16]
			return true;
   81d5e:	e7db      	b.n	81d18 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   81d60:	4b03      	ldr	r3, [pc, #12]	; (81d70 <udc_req_std_dev_set_feature+0x6c>)
   81d62:	4a09      	ldr	r2, [pc, #36]	; (81d88 <udc_req_std_dev_set_feature+0x84>)
   81d64:	611a      	str	r2, [r3, #16]
			return true;
   81d66:	e7d7      	b.n	81d18 <udc_req_std_dev_set_feature+0x14>
		return false;
   81d68:	2400      	movs	r4, #0
   81d6a:	e7d5      	b.n	81d18 <udc_req_std_dev_set_feature+0x14>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81d6c:	2400      	movs	r4, #0
   81d6e:	e7d3      	b.n	81d18 <udc_req_std_dev_set_feature+0x14>
   81d70:	2000184c 	.word	0x2000184c
   81d74:	00083b41 	.word	0x00083b41
   81d78:	00081cc5 	.word	0x00081cc5
   81d7c:	000841e9 	.word	0x000841e9
   81d80:	0008420d 	.word	0x0008420d
   81d84:	00084231 	.word	0x00084231
   81d88:	00084249 	.word	0x00084249

00081d8c <udc_req_std_dev_set_configuration>:
	if (udd_g_ctrlreq.req.wLength) {
   81d8c:	4b29      	ldr	r3, [pc, #164]	; (81e34 <udc_req_std_dev_set_configuration+0xa8>)
   81d8e:	88db      	ldrh	r3, [r3, #6]
   81d90:	b10b      	cbz	r3, 81d96 <udc_req_std_dev_set_configuration+0xa>
		return false;
   81d92:	2000      	movs	r0, #0
}
   81d94:	4770      	bx	lr
{
   81d96:	b510      	push	{r4, lr}
	if (!udd_getaddress()) {
   81d98:	4b27      	ldr	r3, [pc, #156]	; (81e38 <udc_req_std_dev_set_configuration+0xac>)
   81d9a:	4798      	blx	r3
   81d9c:	b908      	cbnz	r0, 81da2 <udc_req_std_dev_set_configuration+0x16>
		return false;
   81d9e:	2000      	movs	r0, #0
}
   81da0:	bd10      	pop	{r4, pc}
	if (udd_is_high_speed()) {
   81da2:	4b26      	ldr	r3, [pc, #152]	; (81e3c <udc_req_std_dev_set_configuration+0xb0>)
   81da4:	4798      	blx	r3
   81da6:	b178      	cbz	r0, 81dc8 <udc_req_std_dev_set_configuration+0x3c>
				udc_config.confdev_hs->bNumConfigurations) {
   81da8:	4b25      	ldr	r3, [pc, #148]	; (81e40 <udc_req_std_dev_set_configuration+0xb4>)
   81daa:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81dac:	4a21      	ldr	r2, [pc, #132]	; (81e34 <udc_req_std_dev_set_configuration+0xa8>)
   81dae:	7892      	ldrb	r2, [r2, #2]
   81db0:	7c5b      	ldrb	r3, [r3, #17]
   81db2:	429a      	cmp	r2, r3
   81db4:	d83c      	bhi.n	81e30 <udc_req_std_dev_set_configuration+0xa4>
	udc_reset();
   81db6:	4b23      	ldr	r3, [pc, #140]	; (81e44 <udc_req_std_dev_set_configuration+0xb8>)
   81db8:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   81dba:	4b1e      	ldr	r3, [pc, #120]	; (81e34 <udc_req_std_dev_set_configuration+0xa8>)
   81dbc:	789b      	ldrb	r3, [r3, #2]
   81dbe:	4a22      	ldr	r2, [pc, #136]	; (81e48 <udc_req_std_dev_set_configuration+0xbc>)
   81dc0:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   81dc2:	b94b      	cbnz	r3, 81dd8 <udc_req_std_dev_set_configuration+0x4c>
		return true; // Default empty configuration requested
   81dc4:	2001      	movs	r0, #1
   81dc6:	e7eb      	b.n	81da0 <udc_req_std_dev_set_configuration+0x14>
				udc_config.confdev_lsfs->bNumConfigurations) {
   81dc8:	4b1d      	ldr	r3, [pc, #116]	; (81e40 <udc_req_std_dev_set_configuration+0xb4>)
   81dca:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81dcc:	4a19      	ldr	r2, [pc, #100]	; (81e34 <udc_req_std_dev_set_configuration+0xa8>)
   81dce:	7892      	ldrb	r2, [r2, #2]
   81dd0:	7c5b      	ldrb	r3, [r3, #17]
   81dd2:	429a      	cmp	r2, r3
   81dd4:	d9ef      	bls.n	81db6 <udc_req_std_dev_set_configuration+0x2a>
   81dd6:	e7e3      	b.n	81da0 <udc_req_std_dev_set_configuration+0x14>
	if (udd_is_high_speed()) {
   81dd8:	4b18      	ldr	r3, [pc, #96]	; (81e3c <udc_req_std_dev_set_configuration+0xb0>)
   81dda:	4798      	blx	r3
   81ddc:	b1d0      	cbz	r0, 81e14 <udc_req_std_dev_set_configuration+0x88>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81dde:	4b18      	ldr	r3, [pc, #96]	; (81e40 <udc_req_std_dev_set_configuration+0xb4>)
   81de0:	691a      	ldr	r2, [r3, #16]
   81de2:	4b19      	ldr	r3, [pc, #100]	; (81e48 <udc_req_std_dev_set_configuration+0xbc>)
   81de4:	781b      	ldrb	r3, [r3, #0]
   81de6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81dea:	3b01      	subs	r3, #1
   81dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81df0:	4a16      	ldr	r2, [pc, #88]	; (81e4c <udc_req_std_dev_set_configuration+0xc0>)
   81df2:	6013      	str	r3, [r2, #0]
{
   81df4:	2400      	movs	r4, #0
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81df6:	4b15      	ldr	r3, [pc, #84]	; (81e4c <udc_req_std_dev_set_configuration+0xc0>)
   81df8:	681b      	ldr	r3, [r3, #0]
   81dfa:	681b      	ldr	r3, [r3, #0]
   81dfc:	791b      	ldrb	r3, [r3, #4]
   81dfe:	42a3      	cmp	r3, r4
   81e00:	d914      	bls.n	81e2c <udc_req_std_dev_set_configuration+0xa0>
		if (!udc_iface_enable(iface_num, 0)) {
   81e02:	2100      	movs	r1, #0
   81e04:	4620      	mov	r0, r4
   81e06:	4b12      	ldr	r3, [pc, #72]	; (81e50 <udc_req_std_dev_set_configuration+0xc4>)
   81e08:	4798      	blx	r3
   81e0a:	2800      	cmp	r0, #0
   81e0c:	d0c8      	beq.n	81da0 <udc_req_std_dev_set_configuration+0x14>
			iface_num++) {
   81e0e:	3401      	adds	r4, #1
   81e10:	b2e4      	uxtb	r4, r4
   81e12:	e7f0      	b.n	81df6 <udc_req_std_dev_set_configuration+0x6a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81e14:	4b0a      	ldr	r3, [pc, #40]	; (81e40 <udc_req_std_dev_set_configuration+0xb4>)
   81e16:	685a      	ldr	r2, [r3, #4]
   81e18:	4b0b      	ldr	r3, [pc, #44]	; (81e48 <udc_req_std_dev_set_configuration+0xbc>)
   81e1a:	781b      	ldrb	r3, [r3, #0]
   81e1c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81e20:	3b01      	subs	r3, #1
   81e22:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81e26:	4a09      	ldr	r2, [pc, #36]	; (81e4c <udc_req_std_dev_set_configuration+0xc0>)
   81e28:	6013      	str	r3, [r2, #0]
   81e2a:	e7e3      	b.n	81df4 <udc_req_std_dev_set_configuration+0x68>
	return true;
   81e2c:	2001      	movs	r0, #1
   81e2e:	e7b7      	b.n	81da0 <udc_req_std_dev_set_configuration+0x14>
			return false;
   81e30:	2000      	movs	r0, #0
   81e32:	e7b5      	b.n	81da0 <udc_req_std_dev_set_configuration+0x14>
   81e34:	2000184c 	.word	0x2000184c
   81e38:	00083b79 	.word	0x00083b79
   81e3c:	00083b41 	.word	0x00083b41
   81e40:	20000344 	.word	0x20000344
   81e44:	00081cc5 	.word	0x00081cc5
   81e48:	20000ebb 	.word	0x20000ebb
   81e4c:	20000ebc 	.word	0x20000ebc
   81e50:	00081bb9 	.word	0x00081bb9

00081e54 <udc_reqstd>:
{
   81e54:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   81e56:	4a35      	ldr	r2, [pc, #212]	; (81f2c <udc_reqstd+0xd8>)
   81e58:	7813      	ldrb	r3, [r2, #0]
   81e5a:	f992 2000 	ldrsb.w	r2, [r2]
   81e5e:	2a00      	cmp	r2, #0
   81e60:	db0e      	blt.n	81e80 <udc_reqstd+0x2c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81e62:	f013 031f 	ands.w	r3, r3, #31
   81e66:	d143      	bne.n	81ef0 <udc_reqstd+0x9c>
			switch (udd_g_ctrlreq.req.bRequest) {
   81e68:	4a30      	ldr	r2, [pc, #192]	; (81f2c <udc_reqstd+0xd8>)
   81e6a:	7852      	ldrb	r2, [r2, #1]
   81e6c:	3a01      	subs	r2, #1
   81e6e:	2a08      	cmp	r2, #8
   81e70:	d83e      	bhi.n	81ef0 <udc_reqstd+0x9c>
   81e72:	e8df f002 	tbb	[pc, r2]
   81e76:	3d34      	.short	0x3d34
   81e78:	3d313d37 	.word	0x3d313d37
   81e7c:	3d3d      	.short	0x3d3d
   81e7e:	3a          	.byte	0x3a
   81e7f:	00          	.byte	0x00
		if (udd_g_ctrlreq.req.wLength == 0) {
   81e80:	4a2a      	ldr	r2, [pc, #168]	; (81f2c <udc_reqstd+0xd8>)
   81e82:	88d2      	ldrh	r2, [r2, #6]
   81e84:	2a00      	cmp	r2, #0
   81e86:	d04e      	beq.n	81f26 <udc_reqstd+0xd2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81e88:	f013 031f 	ands.w	r3, r3, #31
   81e8c:	d106      	bne.n	81e9c <udc_reqstd+0x48>
			switch (udd_g_ctrlreq.req.bRequest) {
   81e8e:	4a27      	ldr	r2, [pc, #156]	; (81f2c <udc_reqstd+0xd8>)
   81e90:	7852      	ldrb	r2, [r2, #1]
   81e92:	2a06      	cmp	r2, #6
   81e94:	d00b      	beq.n	81eae <udc_reqstd+0x5a>
   81e96:	2a08      	cmp	r2, #8
   81e98:	d00c      	beq.n	81eb4 <udc_reqstd+0x60>
   81e9a:	b12a      	cbz	r2, 81ea8 <udc_reqstd+0x54>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81e9c:	2b01      	cmp	r3, #1
   81e9e:	d00c      	beq.n	81eba <udc_reqstd+0x66>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81ea0:	2b02      	cmp	r3, #2
   81ea2:	d011      	beq.n	81ec8 <udc_reqstd+0x74>
	return false;
   81ea4:	2000      	movs	r0, #0
   81ea6:	e028      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_dev_get_status();
   81ea8:	4b21      	ldr	r3, [pc, #132]	; (81f30 <udc_reqstd+0xdc>)
   81eaa:	4798      	blx	r3
   81eac:	e025      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_dev_get_descriptor();
   81eae:	4b21      	ldr	r3, [pc, #132]	; (81f34 <udc_reqstd+0xe0>)
   81eb0:	4798      	blx	r3
   81eb2:	e022      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_dev_get_configuration();
   81eb4:	4b20      	ldr	r3, [pc, #128]	; (81f38 <udc_reqstd+0xe4>)
   81eb6:	4798      	blx	r3
   81eb8:	e01f      	b.n	81efa <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   81eba:	4a1c      	ldr	r2, [pc, #112]	; (81f2c <udc_reqstd+0xd8>)
   81ebc:	7852      	ldrb	r2, [r2, #1]
   81ebe:	2a0a      	cmp	r2, #10
   81ec0:	d1ee      	bne.n	81ea0 <udc_reqstd+0x4c>
				return udc_req_std_iface_get_setting();
   81ec2:	4b1e      	ldr	r3, [pc, #120]	; (81f3c <udc_reqstd+0xe8>)
   81ec4:	4798      	blx	r3
   81ec6:	e018      	b.n	81efa <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   81ec8:	4b18      	ldr	r3, [pc, #96]	; (81f2c <udc_reqstd+0xd8>)
   81eca:	785b      	ldrb	r3, [r3, #1]
   81ecc:	b10b      	cbz	r3, 81ed2 <udc_reqstd+0x7e>
	return false;
   81ece:	2000      	movs	r0, #0
   81ed0:	e013      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_ep_get_status();
   81ed2:	4b1b      	ldr	r3, [pc, #108]	; (81f40 <udc_reqstd+0xec>)
   81ed4:	4798      	blx	r3
   81ed6:	e010      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_dev_set_address();
   81ed8:	4b1a      	ldr	r3, [pc, #104]	; (81f44 <udc_reqstd+0xf0>)
   81eda:	4798      	blx	r3
   81edc:	e00d      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_dev_clear_feature();
   81ede:	4b1a      	ldr	r3, [pc, #104]	; (81f48 <udc_reqstd+0xf4>)
   81ee0:	4798      	blx	r3
   81ee2:	e00a      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_dev_set_feature();
   81ee4:	4b19      	ldr	r3, [pc, #100]	; (81f4c <udc_reqstd+0xf8>)
   81ee6:	4798      	blx	r3
   81ee8:	e007      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_dev_set_configuration();
   81eea:	4b19      	ldr	r3, [pc, #100]	; (81f50 <udc_reqstd+0xfc>)
   81eec:	4798      	blx	r3
   81eee:	e004      	b.n	81efa <udc_reqstd+0xa6>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81ef0:	2b01      	cmp	r3, #1
   81ef2:	d003      	beq.n	81efc <udc_reqstd+0xa8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81ef4:	2b02      	cmp	r3, #2
   81ef6:	d008      	beq.n	81f0a <udc_reqstd+0xb6>
	return false;
   81ef8:	2000      	movs	r0, #0
}
   81efa:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
   81efc:	4a0b      	ldr	r2, [pc, #44]	; (81f2c <udc_reqstd+0xd8>)
   81efe:	7852      	ldrb	r2, [r2, #1]
   81f00:	2a0b      	cmp	r2, #11
   81f02:	d1f7      	bne.n	81ef4 <udc_reqstd+0xa0>
				return udc_req_std_iface_set_setting();
   81f04:	4b13      	ldr	r3, [pc, #76]	; (81f54 <udc_reqstd+0x100>)
   81f06:	4798      	blx	r3
   81f08:	e7f7      	b.n	81efa <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   81f0a:	4b08      	ldr	r3, [pc, #32]	; (81f2c <udc_reqstd+0xd8>)
   81f0c:	785b      	ldrb	r3, [r3, #1]
   81f0e:	2b01      	cmp	r3, #1
   81f10:	d003      	beq.n	81f1a <udc_reqstd+0xc6>
   81f12:	2b03      	cmp	r3, #3
   81f14:	d004      	beq.n	81f20 <udc_reqstd+0xcc>
   81f16:	2000      	movs	r0, #0
   81f18:	e7ef      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_ep_clear_feature();
   81f1a:	4b0f      	ldr	r3, [pc, #60]	; (81f58 <udc_reqstd+0x104>)
   81f1c:	4798      	blx	r3
   81f1e:	e7ec      	b.n	81efa <udc_reqstd+0xa6>
				return udc_req_std_ep_set_feature();
   81f20:	4b0e      	ldr	r3, [pc, #56]	; (81f5c <udc_reqstd+0x108>)
   81f22:	4798      	blx	r3
   81f24:	e7e9      	b.n	81efa <udc_reqstd+0xa6>
			return false; // Error for USB host
   81f26:	2000      	movs	r0, #0
   81f28:	e7e7      	b.n	81efa <udc_reqstd+0xa6>
   81f2a:	bf00      	nop
   81f2c:	2000184c 	.word	0x2000184c
   81f30:	00081909 	.word	0x00081909
   81f34:	00081a41 	.word	0x00081a41
   81f38:	000819a9 	.word	0x000819a9
   81f3c:	000819d1 	.word	0x000819d1
   81f40:	00081b69 	.word	0x00081b69
   81f44:	000817e1 	.word	0x000817e1
   81f48:	000817b5 	.word	0x000817b5
   81f4c:	00081d05 	.word	0x00081d05
   81f50:	00081d8d 	.word	0x00081d8d
   81f54:	00081c11 	.word	0x00081c11
   81f58:	00081c51 	.word	0x00081c51
   81f5c:	00081c79 	.word	0x00081c79

00081f60 <udc_sof_notify>:
	if (udc_num_configuration) {
   81f60:	4b0b      	ldr	r3, [pc, #44]	; (81f90 <udc_sof_notify+0x30>)
   81f62:	781b      	ldrb	r3, [r3, #0]
   81f64:	b983      	cbnz	r3, 81f88 <udc_sof_notify+0x28>
   81f66:	4770      	bx	lr
				iface_num++) {
   81f68:	3401      	adds	r4, #1
   81f6a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81f6c:	4b09      	ldr	r3, [pc, #36]	; (81f94 <udc_sof_notify+0x34>)
   81f6e:	681b      	ldr	r3, [r3, #0]
   81f70:	681a      	ldr	r2, [r3, #0]
   81f72:	7912      	ldrb	r2, [r2, #4]
		for (iface_num = 0;
   81f74:	42a2      	cmp	r2, r4
   81f76:	d90a      	bls.n	81f8e <udc_sof_notify+0x2e>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   81f78:	685b      	ldr	r3, [r3, #4]
   81f7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81f7e:	691b      	ldr	r3, [r3, #16]
   81f80:	2b00      	cmp	r3, #0
   81f82:	d0f1      	beq.n	81f68 <udc_sof_notify+0x8>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   81f84:	4798      	blx	r3
   81f86:	e7ef      	b.n	81f68 <udc_sof_notify+0x8>
{
   81f88:	b510      	push	{r4, lr}
		for (iface_num = 0;
   81f8a:	2400      	movs	r4, #0
   81f8c:	e7ee      	b.n	81f6c <udc_sof_notify+0xc>
}
   81f8e:	bd10      	pop	{r4, pc}
   81f90:	20000ebb 	.word	0x20000ebb
   81f94:	20000ebc 	.word	0x20000ebc

00081f98 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   81f98:	b508      	push	{r3, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   81f9a:	4b1c      	ldr	r3, [pc, #112]	; (8200c <udc_process_setup+0x74>)
   81f9c:	2200      	movs	r2, #0
   81f9e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   81fa0:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   81fa2:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   81fa4:	881b      	ldrh	r3, [r3, #0]
   81fa6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   81faa:	d016      	beq.n	81fda <udc_process_setup+0x42>
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   81fac:	4b17      	ldr	r3, [pc, #92]	; (8200c <udc_process_setup+0x74>)
   81fae:	781a      	ldrb	r2, [r3, #0]
   81fb0:	f993 3000 	ldrsb.w	r3, [r3]
   81fb4:	2b00      	cmp	r3, #0
   81fb6:	db16      	blt.n	81fe6 <udc_process_setup+0x4e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   81fb8:	f012 0f60 	tst.w	r2, #96	; 0x60
   81fbc:	d019      	beq.n	81ff2 <udc_process_setup+0x5a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   81fbe:	4b13      	ldr	r3, [pc, #76]	; (8200c <udc_process_setup+0x74>)
   81fc0:	781b      	ldrb	r3, [r3, #0]
   81fc2:	f003 031f 	and.w	r3, r3, #31
   81fc6:	2b01      	cmp	r3, #1
   81fc8:	d018      	beq.n	81ffc <udc_process_setup+0x64>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   81fca:	4b10      	ldr	r3, [pc, #64]	; (8200c <udc_process_setup+0x74>)
   81fcc:	781b      	ldrb	r3, [r3, #0]
   81fce:	f003 031f 	and.w	r3, r3, #31
   81fd2:	2b02      	cmp	r3, #2
   81fd4:	d017      	beq.n	82006 <udc_process_setup+0x6e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   81fd6:	2000      	movs	r0, #0
#endif
}
   81fd8:	bd08      	pop	{r3, pc}
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   81fda:	219e      	movs	r1, #158	; 0x9e
   81fdc:	480c      	ldr	r0, [pc, #48]	; (82010 <udc_process_setup+0x78>)
   81fde:	4b0d      	ldr	r3, [pc, #52]	; (82014 <udc_process_setup+0x7c>)
   81fe0:	4798      	blx	r3
		return true;
   81fe2:	2001      	movs	r0, #1
   81fe4:	e7f8      	b.n	81fd8 <udc_process_setup+0x40>
		if (udd_g_ctrlreq.req.wLength == 0) {
   81fe6:	4b09      	ldr	r3, [pc, #36]	; (8200c <udc_process_setup+0x74>)
   81fe8:	88db      	ldrh	r3, [r3, #6]
   81fea:	2b00      	cmp	r3, #0
   81fec:	d1e4      	bne.n	81fb8 <udc_process_setup+0x20>
			return false; // Error from USB host
   81fee:	2000      	movs	r0, #0
   81ff0:	e7f2      	b.n	81fd8 <udc_process_setup+0x40>
		if (udc_reqstd()) {
   81ff2:	4b09      	ldr	r3, [pc, #36]	; (82018 <udc_process_setup+0x80>)
   81ff4:	4798      	blx	r3
   81ff6:	2800      	cmp	r0, #0
   81ff8:	d0e1      	beq.n	81fbe <udc_process_setup+0x26>
   81ffa:	e7ed      	b.n	81fd8 <udc_process_setup+0x40>
		if (udc_req_iface()) {
   81ffc:	4b07      	ldr	r3, [pc, #28]	; (8201c <udc_process_setup+0x84>)
   81ffe:	4798      	blx	r3
   82000:	2800      	cmp	r0, #0
   82002:	d0e2      	beq.n	81fca <udc_process_setup+0x32>
   82004:	e7e8      	b.n	81fd8 <udc_process_setup+0x40>
		if (udc_req_ep()) {
   82006:	4b06      	ldr	r3, [pc, #24]	; (82020 <udc_process_setup+0x88>)
   82008:	4798      	blx	r3
   8200a:	e7e5      	b.n	81fd8 <udc_process_setup+0x40>
   8200c:	2000184c 	.word	0x2000184c
   82010:	20000214 	.word	0x20000214
   82014:	00083b99 	.word	0x00083b99
   82018:	00081e55 	.word	0x00081e55
   8201c:	000817fd 	.word	0x000817fd
   82020:	00081855 	.word	0x00081855

00082024 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   82024:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82026:	f1a1 030e 	sub.w	r3, r1, #14
   8202a:	2b01      	cmp	r3, #1
   8202c:	d91a      	bls.n	82064 <efc_perform_command+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8202e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82032:	b672      	cpsid	i
   82034:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   82038:	4b0c      	ldr	r3, [pc, #48]	; (8206c <efc_perform_command+0x48>)
   8203a:	2500      	movs	r5, #0
   8203c:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8203e:	0212      	lsls	r2, r2, #8
   82040:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   82044:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   82048:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8204a:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   8204c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   82050:	4b07      	ldr	r3, [pc, #28]	; (82070 <efc_perform_command+0x4c>)
   82052:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82054:	b92c      	cbnz	r4, 82062 <efc_perform_command+0x3e>
		cpu_irq_enable();
   82056:	4b05      	ldr	r3, [pc, #20]	; (8206c <efc_perform_command+0x48>)
   82058:	2201      	movs	r2, #1
   8205a:	701a      	strb	r2, [r3, #0]
   8205c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82060:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   82062:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   82064:	f04f 30ff 	mov.w	r0, #4294967295
   82068:	e7fb      	b.n	82062 <efc_perform_command+0x3e>
   8206a:	bf00      	nop
   8206c:	20000328 	.word	0x20000328
   82070:	20000073 	.word	0x20000073

00082074 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   82074:	e7fe      	b.n	82074 <Dummy_Handler>
   82076:	0000      	movs	r0, r0

00082078 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82078:	b570      	push	{r4, r5, r6, lr}
   8207a:	b086      	sub	sp, #24
   8207c:	4605      	mov	r5, r0
   8207e:	460c      	mov	r4, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82080:	2304      	movs	r3, #4
   82082:	9300      	str	r3, [sp, #0]
   82084:	ab02      	add	r3, sp, #8
   82086:	220f      	movs	r2, #15
   82088:	210e      	movs	r1, #14
   8208a:	480c      	ldr	r0, [pc, #48]	; (820bc <flash_read_unique_id+0x44>)
   8208c:	4e0c      	ldr	r6, [pc, #48]	; (820c0 <flash_read_unique_id+0x48>)
   8208e:	47b0      	blx	r6
   82090:	b990      	cbnz	r0, 820b8 <flash_read_unique_id+0x40>
   82092:	4601      	mov	r1, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82094:	2c04      	cmp	r4, #4
   82096:	d900      	bls.n	8209a <flash_read_unique_id+0x22>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   82098:	2404      	movs	r4, #4
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   8209a:	460b      	mov	r3, r1
   8209c:	e007      	b.n	820ae <flash_read_unique_id+0x36>
		pul_data[ul_idx] = uid_buf[ul_idx];
   8209e:	aa06      	add	r2, sp, #24
   820a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   820a4:	f852 2c10 	ldr.w	r2, [r2, #-16]
   820a8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   820ac:	3301      	adds	r3, #1
   820ae:	429c      	cmp	r4, r3
   820b0:	d8f5      	bhi.n	8209e <flash_read_unique_id+0x26>
	}

	return FLASH_RC_OK;
}
   820b2:	4608      	mov	r0, r1
   820b4:	b006      	add	sp, #24
   820b6:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   820b8:	2110      	movs	r1, #16
   820ba:	e7fa      	b.n	820b2 <flash_read_unique_id+0x3a>
   820bc:	400e0800 	.word	0x400e0800
   820c0:	2000000b 	.word	0x2000000b

000820c4 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   820c4:	b510      	push	{r4, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   820c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820ca:	204f      	movs	r0, #79	; 0x4f
   820cc:	4c0e      	ldr	r4, [pc, #56]	; (82108 <iopins_normal+0x44>)
   820ce:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   820d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820d4:	2050      	movs	r0, #80	; 0x50
   820d6:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   820d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820dc:	2051      	movs	r0, #81	; 0x51
   820de:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   820e0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820e4:	203f      	movs	r0, #63	; 0x3f
   820e6:	47a0      	blx	r4
	board_power(0);
   820e8:	203f      	movs	r0, #63	; 0x3f
   820ea:	4b08      	ldr	r3, [pc, #32]	; (8210c <iopins_normal+0x48>)
   820ec:	4798      	blx	r3

	//Detect state of switch
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   820ee:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   820f2:	203e      	movs	r0, #62	; 0x3e
   820f4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   820f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   820fa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   820fe:	4804      	ldr	r0, [pc, #16]	; (82110 <iopins_normal+0x4c>)
   82100:	4b04      	ldr	r3, [pc, #16]	; (82114 <iopins_normal+0x50>)
   82102:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   82104:	bd10      	pop	{r4, pc}
   82106:	bf00      	nop
   82108:	0008240d 	.word	0x0008240d
   8210c:	000823f1 	.word	0x000823f1
   82110:	400e0c00 	.word	0x400e0c00
   82114:	00082301 	.word	0x00082301

00082118 <board_init>:

void board_init(void)
{
   82118:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8211a:	4b07      	ldr	r3, [pc, #28]	; (82138 <board_init+0x20>)
   8211c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82120:	605a      	str	r2, [r3, #4]
   82122:	200a      	movs	r0, #10
   82124:	4c05      	ldr	r4, [pc, #20]	; (8213c <board_init+0x24>)
   82126:	47a0      	blx	r4
   82128:	200b      	movs	r0, #11
   8212a:	47a0      	blx	r4
   8212c:	200c      	movs	r0, #12
   8212e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   82130:	4b03      	ldr	r3, [pc, #12]	; (82140 <board_init+0x28>)
   82132:	4798      	blx	r3
}
   82134:	bd10      	pop	{r4, pc}
   82136:	bf00      	nop
   82138:	400e1250 	.word	0x400e1250
   8213c:	000826b5 	.word	0x000826b5
   82140:	000820c5 	.word	0x000820c5

00082144 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   82144:	4b0b      	ldr	r3, [pc, #44]	; (82174 <cpu_irq_enter_critical+0x30>)
   82146:	681b      	ldr	r3, [r3, #0]
   82148:	b95b      	cbnz	r3, 82162 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8214a:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   8214e:	b96b      	cbnz	r3, 8216c <cpu_irq_enter_critical+0x28>
  __ASM volatile ("cpsid i");
   82150:	b672      	cpsid	i
   82152:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   82156:	4b08      	ldr	r3, [pc, #32]	; (82178 <cpu_irq_enter_critical+0x34>)
   82158:	2200      	movs	r2, #0
   8215a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8215c:	4b07      	ldr	r3, [pc, #28]	; (8217c <cpu_irq_enter_critical+0x38>)
   8215e:	2201      	movs	r2, #1
   82160:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
   82162:	4a04      	ldr	r2, [pc, #16]	; (82174 <cpu_irq_enter_critical+0x30>)
   82164:	6813      	ldr	r3, [r2, #0]
   82166:	3301      	adds	r3, #1
   82168:	6013      	str	r3, [r2, #0]
}
   8216a:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
   8216c:	4b03      	ldr	r3, [pc, #12]	; (8217c <cpu_irq_enter_critical+0x38>)
   8216e:	2200      	movs	r2, #0
   82170:	701a      	strb	r2, [r3, #0]
   82172:	e7f6      	b.n	82162 <cpu_irq_enter_critical+0x1e>
   82174:	20000ec4 	.word	0x20000ec4
   82178:	20000328 	.word	0x20000328
   8217c:	20000ec8 	.word	0x20000ec8

00082180 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   82180:	4b07      	ldr	r3, [pc, #28]	; (821a0 <cpu_irq_leave_critical+0x20>)
   82182:	681a      	ldr	r2, [r3, #0]
   82184:	3a01      	subs	r2, #1
   82186:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   82188:	681b      	ldr	r3, [r3, #0]
   8218a:	b943      	cbnz	r3, 8219e <cpu_irq_leave_critical+0x1e>
   8218c:	4b05      	ldr	r3, [pc, #20]	; (821a4 <cpu_irq_leave_critical+0x24>)
   8218e:	781b      	ldrb	r3, [r3, #0]
   82190:	b12b      	cbz	r3, 8219e <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   82192:	4b05      	ldr	r3, [pc, #20]	; (821a8 <cpu_irq_leave_critical+0x28>)
   82194:	2201      	movs	r2, #1
   82196:	701a      	strb	r2, [r3, #0]
   82198:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8219c:	b662      	cpsie	i
	}
}
   8219e:	4770      	bx	lr
   821a0:	20000ec4 	.word	0x20000ec4
   821a4:	20000ec8 	.word	0x20000ec8
   821a8:	20000328 	.word	0x20000328

000821ac <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   821ac:	b538      	push	{r3, r4, r5, lr}
   821ae:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   821b0:	2400      	movs	r4, #0
   821b2:	e003      	b.n	821bc <LED_Off+0x10>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   821b4:	4628      	mov	r0, r5
   821b6:	4b0a      	ldr	r3, [pc, #40]	; (821e0 <LED_Off+0x34>)
   821b8:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   821ba:	3401      	adds	r4, #1
   821bc:	2c02      	cmp	r4, #2
   821be:	d80e      	bhi.n	821de <LED_Off+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   821c0:	4b08      	ldr	r3, [pc, #32]	; (821e4 <LED_Off+0x38>)
   821c2:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
   821c6:	42ab      	cmp	r3, r5
   821c8:	d1f7      	bne.n	821ba <LED_Off+0xe>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   821ca:	4b06      	ldr	r3, [pc, #24]	; (821e4 <LED_Off+0x38>)
   821cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   821d0:	685b      	ldr	r3, [r3, #4]
   821d2:	2b01      	cmp	r3, #1
   821d4:	d1ee      	bne.n	821b4 <LED_Off+0x8>
				gpio_set_pin_low(led_gpio);
   821d6:	4628      	mov	r0, r5
   821d8:	4b03      	ldr	r3, [pc, #12]	; (821e8 <LED_Off+0x3c>)
   821da:	4798      	blx	r3
   821dc:	e7ed      	b.n	821ba <LED_Off+0xe>
			}
		}
	}
}
   821de:	bd38      	pop	{r3, r4, r5, pc}
   821e0:	000823d5 	.word	0x000823d5
   821e4:	0008b310 	.word	0x0008b310
   821e8:	000823f1 	.word	0x000823f1

000821ec <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   821ec:	b538      	push	{r3, r4, r5, lr}
   821ee:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   821f0:	2400      	movs	r4, #0
   821f2:	e003      	b.n	821fc <LED_On+0x10>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   821f4:	4628      	mov	r0, r5
   821f6:	4b0a      	ldr	r3, [pc, #40]	; (82220 <LED_On+0x34>)
   821f8:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   821fa:	3401      	adds	r4, #1
   821fc:	2c02      	cmp	r4, #2
   821fe:	d80e      	bhi.n	8221e <LED_On+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82200:	4b08      	ldr	r3, [pc, #32]	; (82224 <LED_On+0x38>)
   82202:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
   82206:	42ab      	cmp	r3, r5
   82208:	d1f7      	bne.n	821fa <LED_On+0xe>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8220a:	4b06      	ldr	r3, [pc, #24]	; (82224 <LED_On+0x38>)
   8220c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   82210:	685b      	ldr	r3, [r3, #4]
   82212:	2b01      	cmp	r3, #1
   82214:	d1ee      	bne.n	821f4 <LED_On+0x8>
				gpio_set_pin_high(led_gpio);
   82216:	4628      	mov	r0, r5
   82218:	4b03      	ldr	r3, [pc, #12]	; (82228 <LED_On+0x3c>)
   8221a:	4798      	blx	r3
   8221c:	e7ed      	b.n	821fa <LED_On+0xe>
			}
		}
	}
}
   8221e:	bd38      	pop	{r3, r4, r5, pc}
   82220:	000823f1 	.word	0x000823f1
   82224:	0008b310 	.word	0x0008b310
   82228:	000823d5 	.word	0x000823d5

0008222c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8222c:	b10a      	cbz	r2, 82232 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8222e:	6641      	str	r1, [r0, #100]	; 0x64
   82230:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82232:	6601      	str	r1, [r0, #96]	; 0x60
	}
}
   82234:	4770      	bx	lr

00082236 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82236:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82238:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8223c:	d016      	beq.n	8226c <pio_set_peripheral+0x36>
   8223e:	d80a      	bhi.n	82256 <pio_set_peripheral+0x20>
   82240:	b199      	cbz	r1, 8226a <pio_set_peripheral+0x34>
   82242:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82246:	d10f      	bne.n	82268 <pio_set_peripheral+0x32>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82248:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8224a:	6f03      	ldr	r3, [r0, #112]	; 0x70
   8224c:	ea21 0102 	bic.w	r1, r1, r2
   82250:	400b      	ands	r3, r1
   82252:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82254:	e008      	b.n	82268 <pio_set_peripheral+0x32>
	switch (ul_type) {
   82256:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8225a:	d006      	beq.n	8226a <pio_set_peripheral+0x34>
   8225c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82260:	d003      	beq.n	8226a <pio_set_peripheral+0x34>
   82262:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82266:	d000      	beq.n	8226a <pio_set_peripheral+0x34>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82268:	6042      	str	r2, [r0, #4]
}
   8226a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8226c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8226e:	4313      	orrs	r3, r2
   82270:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82272:	e7f9      	b.n	82268 <pio_set_peripheral+0x32>

00082274 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82274:	6441      	str	r1, [r0, #68]	; 0x44
}
   82276:	4770      	bx	lr

00082278 <pio_set_input>:
{
   82278:	b570      	push	{r4, r5, r6, lr}
   8227a:	4604      	mov	r4, r0
   8227c:	460d      	mov	r5, r1
   8227e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   82280:	4b0d      	ldr	r3, [pc, #52]	; (822b8 <pio_set_input+0x40>)
   82282:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82284:	f006 0201 	and.w	r2, r6, #1
   82288:	4629      	mov	r1, r5
   8228a:	4620      	mov	r0, r4
   8228c:	4b0b      	ldr	r3, [pc, #44]	; (822bc <pio_set_input+0x44>)
   8228e:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82290:	f016 0f0a 	tst.w	r6, #10
   82294:	d008      	beq.n	822a8 <pio_set_input+0x30>
		p_pio->PIO_IFER = ul_mask;
   82296:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
   82298:	f016 0f02 	tst.w	r6, #2
   8229c:	d006      	beq.n	822ac <pio_set_input+0x34>
		p_pio->PIO_SCIFSR = ul_mask;
   8229e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   822a2:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   822a4:	6025      	str	r5, [r4, #0]
}
   822a6:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_IFDR = ul_mask;
   822a8:	6265      	str	r5, [r4, #36]	; 0x24
   822aa:	e7f5      	b.n	82298 <pio_set_input+0x20>
		if (ul_attribute & PIO_DEBOUNCE) {
   822ac:	f016 0f08 	tst.w	r6, #8
   822b0:	d0f7      	beq.n	822a2 <pio_set_input+0x2a>
			p_pio->PIO_DIFSR = ul_mask;
   822b2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   822b6:	e7f4      	b.n	822a2 <pio_set_input+0x2a>
   822b8:	00082275 	.word	0x00082275
   822bc:	0008222d 	.word	0x0008222d

000822c0 <pio_set_output>:
{
   822c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   822c2:	4604      	mov	r4, r0
   822c4:	460d      	mov	r5, r1
   822c6:	4616      	mov	r6, r2
   822c8:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   822ca:	4b09      	ldr	r3, [pc, #36]	; (822f0 <pio_set_output+0x30>)
   822cc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   822ce:	9a06      	ldr	r2, [sp, #24]
   822d0:	4629      	mov	r1, r5
   822d2:	4620      	mov	r0, r4
   822d4:	4b07      	ldr	r3, [pc, #28]	; (822f4 <pio_set_output+0x34>)
   822d6:	4798      	blx	r3
	if (ul_multidrive_enable) {
   822d8:	b12f      	cbz	r7, 822e6 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
   822da:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
   822dc:	b12e      	cbz	r6, 822ea <pio_set_output+0x2a>
		p_pio->PIO_SODR = ul_mask;
   822de:	6325      	str	r5, [r4, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   822e0:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   822e2:	6025      	str	r5, [r4, #0]
}
   822e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
   822e6:	6565      	str	r5, [r4, #84]	; 0x54
   822e8:	e7f8      	b.n	822dc <pio_set_output+0x1c>
		p_pio->PIO_CODR = ul_mask;
   822ea:	6365      	str	r5, [r4, #52]	; 0x34
   822ec:	e7f8      	b.n	822e0 <pio_set_output+0x20>
   822ee:	bf00      	nop
   822f0:	00082275 	.word	0x00082275
   822f4:	0008222d 	.word	0x0008222d

000822f8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   822f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   822fa:	4770      	bx	lr

000822fc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   822fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   822fe:	4770      	bx	lr

00082300 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82300:	b570      	push	{r4, r5, r6, lr}
   82302:	b082      	sub	sp, #8
   82304:	4605      	mov	r5, r0
   82306:	460e      	mov	r6, r1
   82308:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8230a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8230e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82312:	d03d      	beq.n	82390 <pio_configure_pin_group+0x90>
   82314:	d814      	bhi.n	82340 <pio_configure_pin_group+0x40>
   82316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8231a:	d02b      	beq.n	82374 <pio_configure_pin_group+0x74>
   8231c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82320:	d10c      	bne.n	8233c <pio_configure_pin_group+0x3c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82322:	460a      	mov	r2, r1
   82324:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82328:	4b1b      	ldr	r3, [pc, #108]	; (82398 <pio_configure_pin_group+0x98>)
   8232a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8232c:	f004 0201 	and.w	r2, r4, #1
   82330:	4631      	mov	r1, r6
   82332:	4628      	mov	r0, r5
   82334:	4b19      	ldr	r3, [pc, #100]	; (8239c <pio_configure_pin_group+0x9c>)
   82336:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82338:	2001      	movs	r0, #1
		break;
   8233a:	e027      	b.n	8238c <pio_configure_pin_group+0x8c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8233c:	2000      	movs	r0, #0
   8233e:	e025      	b.n	8238c <pio_configure_pin_group+0x8c>
   82340:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82344:	d002      	beq.n	8234c <pio_configure_pin_group+0x4c>
   82346:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8234a:	d111      	bne.n	82370 <pio_configure_pin_group+0x70>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8234c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82350:	f004 0301 	and.w	r3, r4, #1
   82354:	9300      	str	r3, [sp, #0]
   82356:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8235a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8235e:	bf14      	ite	ne
   82360:	2200      	movne	r2, #0
   82362:	2201      	moveq	r2, #1
   82364:	4631      	mov	r1, r6
   82366:	4628      	mov	r0, r5
   82368:	4c0d      	ldr	r4, [pc, #52]	; (823a0 <pio_configure_pin_group+0xa0>)
   8236a:	47a0      	blx	r4
	return 1;
   8236c:	2001      	movs	r0, #1
		break;
   8236e:	e00d      	b.n	8238c <pio_configure_pin_group+0x8c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82370:	2000      	movs	r0, #0
   82372:	e00b      	b.n	8238c <pio_configure_pin_group+0x8c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82374:	460a      	mov	r2, r1
   82376:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8237a:	4b07      	ldr	r3, [pc, #28]	; (82398 <pio_configure_pin_group+0x98>)
   8237c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8237e:	f004 0201 	and.w	r2, r4, #1
   82382:	4631      	mov	r1, r6
   82384:	4628      	mov	r0, r5
   82386:	4b05      	ldr	r3, [pc, #20]	; (8239c <pio_configure_pin_group+0x9c>)
   82388:	4798      	blx	r3
	return 1;
   8238a:	2001      	movs	r0, #1
}
   8238c:	b002      	add	sp, #8
   8238e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82390:	4b04      	ldr	r3, [pc, #16]	; (823a4 <pio_configure_pin_group+0xa4>)
   82392:	4798      	blx	r3
	return 1;
   82394:	2001      	movs	r0, #1
		break;
   82396:	e7f9      	b.n	8238c <pio_configure_pin_group+0x8c>
   82398:	00082237 	.word	0x00082237
   8239c:	0008222d 	.word	0x0008222d
   823a0:	000822c1 	.word	0x000822c1
   823a4:	00082279 	.word	0x00082279

000823a8 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   823a8:	0940      	lsrs	r0, r0, #5
   823aa:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   823ae:	f200 7006 	addw	r0, r0, #1798	; 0x706
#endif
	return p_pio;
}
   823b2:	0240      	lsls	r0, r0, #9
   823b4:	4770      	bx	lr
   823b6:	0000      	movs	r0, r0

000823b8 <pio_get_pin_value>:
{
   823b8:	b510      	push	{r4, lr}
   823ba:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   823bc:	4b04      	ldr	r3, [pc, #16]	; (823d0 <pio_get_pin_value+0x18>)
   823be:	4798      	blx	r3
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   823c0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   823c2:	f004 041f 	and.w	r4, r4, #31
   823c6:	40e0      	lsrs	r0, r4
}
   823c8:	f000 0001 	and.w	r0, r0, #1
   823cc:	bd10      	pop	{r4, pc}
   823ce:	bf00      	nop
   823d0:	000823a9 	.word	0x000823a9

000823d4 <pio_set_pin_high>:
{
   823d4:	b510      	push	{r4, lr}
   823d6:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   823d8:	4b04      	ldr	r3, [pc, #16]	; (823ec <pio_set_pin_high+0x18>)
   823da:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   823dc:	f004 041f 	and.w	r4, r4, #31
   823e0:	2301      	movs	r3, #1
   823e2:	fa03 f404 	lsl.w	r4, r3, r4
   823e6:	6304      	str	r4, [r0, #48]	; 0x30
}
   823e8:	bd10      	pop	{r4, pc}
   823ea:	bf00      	nop
   823ec:	000823a9 	.word	0x000823a9

000823f0 <pio_set_pin_low>:
{
   823f0:	b510      	push	{r4, lr}
   823f2:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   823f4:	4b04      	ldr	r3, [pc, #16]	; (82408 <pio_set_pin_low+0x18>)
   823f6:	4798      	blx	r3
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   823f8:	f004 041f 	and.w	r4, r4, #31
   823fc:	2301      	movs	r3, #1
   823fe:	fa03 f404 	lsl.w	r4, r3, r4
   82402:	6344      	str	r4, [r0, #52]	; 0x34
}
   82404:	bd10      	pop	{r4, pc}
   82406:	bf00      	nop
   82408:	000823a9 	.word	0x000823a9

0008240c <pio_configure_pin>:
{
   8240c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8240e:	b083      	sub	sp, #12
   82410:	4604      	mov	r4, r0
   82412:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82414:	4b2e      	ldr	r3, [pc, #184]	; (824d0 <pio_configure_pin+0xc4>)
   82416:	4798      	blx	r3
   82418:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   8241a:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
   8241e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82422:	d04b      	beq.n	824bc <pio_configure_pin+0xb0>
   82424:	d819      	bhi.n	8245a <pio_configure_pin+0x4e>
   82426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8242a:	d034      	beq.n	82496 <pio_configure_pin+0x8a>
   8242c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82430:	d111      	bne.n	82456 <pio_configure_pin+0x4a>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82432:	f004 041f 	and.w	r4, r4, #31
   82436:	2701      	movs	r7, #1
   82438:	fa07 f404 	lsl.w	r4, r7, r4
   8243c:	4622      	mov	r2, r4
   8243e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82442:	4b24      	ldr	r3, [pc, #144]	; (824d4 <pio_configure_pin+0xc8>)
   82444:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82446:	ea05 0207 	and.w	r2, r5, r7
   8244a:	4621      	mov	r1, r4
   8244c:	4630      	mov	r0, r6
   8244e:	4b22      	ldr	r3, [pc, #136]	; (824d8 <pio_configure_pin+0xcc>)
   82450:	4798      	blx	r3
	return 1;
   82452:	4638      	mov	r0, r7
		break;
   82454:	e030      	b.n	824b8 <pio_configure_pin+0xac>
	switch (ul_flags & PIO_TYPE_Msk) {
   82456:	2000      	movs	r0, #0
   82458:	e02e      	b.n	824b8 <pio_configure_pin+0xac>
   8245a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8245e:	d002      	beq.n	82466 <pio_configure_pin+0x5a>
   82460:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82464:	d115      	bne.n	82492 <pio_configure_pin+0x86>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82466:	f004 041f 	and.w	r4, r4, #31
   8246a:	2701      	movs	r7, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8246c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82470:	ea05 0307 	and.w	r3, r5, r7
   82474:	9300      	str	r3, [sp, #0]
   82476:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8247a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8247e:	bf14      	ite	ne
   82480:	2200      	movne	r2, #0
   82482:	2201      	moveq	r2, #1
   82484:	fa07 f104 	lsl.w	r1, r7, r4
   82488:	4630      	mov	r0, r6
   8248a:	4c14      	ldr	r4, [pc, #80]	; (824dc <pio_configure_pin+0xd0>)
   8248c:	47a0      	blx	r4
	return 1;
   8248e:	4638      	mov	r0, r7
		break;
   82490:	e012      	b.n	824b8 <pio_configure_pin+0xac>
	switch (ul_flags & PIO_TYPE_Msk) {
   82492:	2000      	movs	r0, #0
   82494:	e010      	b.n	824b8 <pio_configure_pin+0xac>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82496:	f004 041f 	and.w	r4, r4, #31
   8249a:	2701      	movs	r7, #1
   8249c:	fa07 f404 	lsl.w	r4, r7, r4
   824a0:	4622      	mov	r2, r4
   824a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   824a6:	4b0b      	ldr	r3, [pc, #44]	; (824d4 <pio_configure_pin+0xc8>)
   824a8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   824aa:	ea05 0207 	and.w	r2, r5, r7
   824ae:	4621      	mov	r1, r4
   824b0:	4630      	mov	r0, r6
   824b2:	4b09      	ldr	r3, [pc, #36]	; (824d8 <pio_configure_pin+0xcc>)
   824b4:	4798      	blx	r3
	return 1;
   824b6:	4638      	mov	r0, r7
}
   824b8:	b003      	add	sp, #12
   824ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   824bc:	f004 041f 	and.w	r4, r4, #31
   824c0:	2701      	movs	r7, #1
   824c2:	462a      	mov	r2, r5
   824c4:	fa07 f104 	lsl.w	r1, r7, r4
   824c8:	4b05      	ldr	r3, [pc, #20]	; (824e0 <pio_configure_pin+0xd4>)
   824ca:	4798      	blx	r3
	return 1;
   824cc:	4638      	mov	r0, r7
		break;
   824ce:	e7f3      	b.n	824b8 <pio_configure_pin+0xac>
   824d0:	000823a9 	.word	0x000823a9
   824d4:	00082237 	.word	0x00082237
   824d8:	0008222d 	.word	0x0008222d
   824dc:	000822c1 	.word	0x000822c1
   824e0:	00082279 	.word	0x00082279

000824e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   824e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   824e6:	4604      	mov	r4, r0
   824e8:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   824ea:	4b10      	ldr	r3, [pc, #64]	; (8252c <pio_handler_process+0x48>)
   824ec:	4798      	blx	r3
   824ee:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   824f0:	4620      	mov	r0, r4
   824f2:	4b0f      	ldr	r3, [pc, #60]	; (82530 <pio_handler_process+0x4c>)
   824f4:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   824f6:	4005      	ands	r5, r0
   824f8:	d116      	bne.n	82528 <pio_handler_process+0x44>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   824fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i++;
   824fc:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
   824fe:	2c06      	cmp	r4, #6
   82500:	d8fb      	bhi.n	824fa <pio_handler_process+0x16>
		while (status != 0) {
   82502:	2d00      	cmp	r5, #0
   82504:	d0f9      	beq.n	824fa <pio_handler_process+0x16>
			if (gs_interrupt_sources[i].id == ul_id) {
   82506:	0123      	lsls	r3, r4, #4
   82508:	4a0a      	ldr	r2, [pc, #40]	; (82534 <pio_handler_process+0x50>)
   8250a:	58d0      	ldr	r0, [r2, r3]
   8250c:	42b0      	cmp	r0, r6
   8250e:	d1f5      	bne.n	824fc <pio_handler_process+0x18>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82510:	eb02 1304 	add.w	r3, r2, r4, lsl #4
   82514:	6859      	ldr	r1, [r3, #4]
   82516:	4229      	tst	r1, r5
   82518:	d0f0      	beq.n	824fc <pio_handler_process+0x18>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8251a:	461f      	mov	r7, r3
   8251c:	68db      	ldr	r3, [r3, #12]
   8251e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82520:	687b      	ldr	r3, [r7, #4]
   82522:	ea25 0503 	bic.w	r5, r5, r3
   82526:	e7e9      	b.n	824fc <pio_handler_process+0x18>
		i = 0;
   82528:	2400      	movs	r4, #0
   8252a:	e7ea      	b.n	82502 <pio_handler_process+0x1e>
   8252c:	000822f9 	.word	0x000822f9
   82530:	000822fd 	.word	0x000822fd
   82534:	20000ecc 	.word	0x20000ecc

00082538 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82538:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8253a:	210a      	movs	r1, #10
   8253c:	4801      	ldr	r0, [pc, #4]	; (82544 <PIOA_Handler+0xc>)
   8253e:	4b02      	ldr	r3, [pc, #8]	; (82548 <PIOA_Handler+0x10>)
   82540:	4798      	blx	r3
}
   82542:	bd08      	pop	{r3, pc}
   82544:	400e0c00 	.word	0x400e0c00
   82548:	000824e5 	.word	0x000824e5

0008254c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8254c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8254e:	210b      	movs	r1, #11
   82550:	4801      	ldr	r0, [pc, #4]	; (82558 <PIOB_Handler+0xc>)
   82552:	4b02      	ldr	r3, [pc, #8]	; (8255c <PIOB_Handler+0x10>)
   82554:	4798      	blx	r3
}
   82556:	bd08      	pop	{r3, pc}
   82558:	400e0e00 	.word	0x400e0e00
   8255c:	000824e5 	.word	0x000824e5

00082560 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82560:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82562:	210c      	movs	r1, #12
   82564:	4801      	ldr	r0, [pc, #4]	; (8256c <PIOC_Handler+0xc>)
   82566:	4b02      	ldr	r3, [pc, #8]	; (82570 <PIOC_Handler+0x10>)
   82568:	4798      	blx	r3
}
   8256a:	bd08      	pop	{r3, pc}
   8256c:	400e1000 	.word	0x400e1000
   82570:	000824e5 	.word	0x000824e5

00082574 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82574:	4a13      	ldr	r2, [pc, #76]	; (825c4 <pmc_switch_mck_to_mainck+0x50>)
   82576:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82578:	f023 0303 	bic.w	r3, r3, #3
   8257c:	f043 0301 	orr.w	r3, r3, #1
   82580:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82582:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82586:	4a0f      	ldr	r2, [pc, #60]	; (825c4 <pmc_switch_mck_to_mainck+0x50>)
   82588:	6e92      	ldr	r2, [r2, #104]	; 0x68
   8258a:	f012 0f08 	tst.w	r2, #8
   8258e:	d102      	bne.n	82596 <pmc_switch_mck_to_mainck+0x22>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82590:	b19b      	cbz	r3, 825ba <pmc_switch_mck_to_mainck+0x46>
			--ul_timeout) {
   82592:	3b01      	subs	r3, #1
   82594:	e7f7      	b.n	82586 <pmc_switch_mck_to_mainck+0x12>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82596:	4a0b      	ldr	r2, [pc, #44]	; (825c4 <pmc_switch_mck_to_mainck+0x50>)
   82598:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8259e:	4303      	orrs	r3, r0
   825a0:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   825a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   825a6:	4a07      	ldr	r2, [pc, #28]	; (825c4 <pmc_switch_mck_to_mainck+0x50>)
   825a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
   825aa:	f012 0f08 	tst.w	r2, #8
   825ae:	d102      	bne.n	825b6 <pmc_switch_mck_to_mainck+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   825b0:	b12b      	cbz	r3, 825be <pmc_switch_mck_to_mainck+0x4a>
			--ul_timeout) {
   825b2:	3b01      	subs	r3, #1
   825b4:	e7f7      	b.n	825a6 <pmc_switch_mck_to_mainck+0x32>
			return 1;
		}
	}

	return 0;
   825b6:	2000      	movs	r0, #0
   825b8:	4770      	bx	lr
			return 1;
   825ba:	2001      	movs	r0, #1
   825bc:	4770      	bx	lr
			return 1;
   825be:	2001      	movs	r0, #1
}
   825c0:	4770      	bx	lr
   825c2:	bf00      	nop
   825c4:	400e0400 	.word	0x400e0400

000825c8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   825c8:	4a13      	ldr	r2, [pc, #76]	; (82618 <pmc_switch_mck_to_pllack+0x50>)
   825ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   825cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   825d0:	4303      	orrs	r3, r0
   825d2:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   825d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   825d8:	4a0f      	ldr	r2, [pc, #60]	; (82618 <pmc_switch_mck_to_pllack+0x50>)
   825da:	6e92      	ldr	r2, [r2, #104]	; 0x68
   825dc:	f012 0f08 	tst.w	r2, #8
   825e0:	d102      	bne.n	825e8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   825e2:	b1a3      	cbz	r3, 8260e <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
   825e4:	3b01      	subs	r3, #1
   825e6:	e7f7      	b.n	825d8 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   825e8:	4a0b      	ldr	r2, [pc, #44]	; (82618 <pmc_switch_mck_to_pllack+0x50>)
   825ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
   825ec:	f023 0303 	bic.w	r3, r3, #3
   825f0:	f043 0302 	orr.w	r3, r3, #2
   825f4:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   825f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   825fa:	4a07      	ldr	r2, [pc, #28]	; (82618 <pmc_switch_mck_to_pllack+0x50>)
   825fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
   825fe:	f012 0f08 	tst.w	r2, #8
   82602:	d102      	bne.n	8260a <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82604:	b12b      	cbz	r3, 82612 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
   82606:	3b01      	subs	r3, #1
   82608:	e7f7      	b.n	825fa <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
   8260a:	2000      	movs	r0, #0
   8260c:	4770      	bx	lr
			return 1;
   8260e:	2001      	movs	r0, #1
   82610:	4770      	bx	lr
			return 1;
   82612:	2001      	movs	r0, #1
}
   82614:	4770      	bx	lr
   82616:	bf00      	nop
   82618:	400e0400 	.word	0x400e0400

0008261c <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   8261c:	4908      	ldr	r1, [pc, #32]	; (82640 <pmc_osc_enable_main_xtal+0x24>)
   8261e:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82620:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82624:	0203      	lsls	r3, r0, #8
   82626:	b29b      	uxth	r3, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82628:	4313      	orrs	r3, r2
   8262a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8262e:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   82632:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82634:	4b02      	ldr	r3, [pc, #8]	; (82640 <pmc_osc_enable_main_xtal+0x24>)
   82636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82638:	f013 0f01 	tst.w	r3, #1
   8263c:	d0fa      	beq.n	82634 <pmc_osc_enable_main_xtal+0x18>
}
   8263e:	4770      	bx	lr
   82640:	400e0400 	.word	0x400e0400

00082644 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   82644:	4b02      	ldr	r3, [pc, #8]	; (82650 <pmc_osc_is_ready_main_xtal+0xc>)
   82646:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82648:	f000 0001 	and.w	r0, r0, #1
   8264c:	4770      	bx	lr
   8264e:	bf00      	nop
   82650:	400e0400 	.word	0x400e0400

00082654 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82654:	4b02      	ldr	r3, [pc, #8]	; (82660 <pmc_osc_is_ready_mainck+0xc>)
   82656:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82658:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8265c:	4770      	bx	lr
   8265e:	bf00      	nop
   82660:	400e0400 	.word	0x400e0400

00082664 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   82664:	4b06      	ldr	r3, [pc, #24]	; (82680 <pmc_mainck_osc_select+0x1c>)
   82666:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   82668:	b130      	cbz	r0, 82678 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   8266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8266e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82672:	4a03      	ldr	r2, [pc, #12]	; (82680 <pmc_mainck_osc_select+0x1c>)
   82674:	6213      	str	r3, [r2, #32]
}
   82676:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   82678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   8267c:	e7f7      	b.n	8266e <pmc_mainck_osc_select+0xa>
   8267e:	bf00      	nop
   82680:	400e0400 	.word	0x400e0400

00082684 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82684:	4b02      	ldr	r3, [pc, #8]	; (82690 <pmc_disable_pllack+0xc>)
   82686:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8268a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8268c:	4770      	bx	lr
   8268e:	bf00      	nop
   82690:	400e0400 	.word	0x400e0400

00082694 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82694:	4b02      	ldr	r3, [pc, #8]	; (826a0 <pmc_is_locked_pllack+0xc>)
   82696:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82698:	f000 0002 	and.w	r0, r0, #2
   8269c:	4770      	bx	lr
   8269e:	bf00      	nop
   826a0:	400e0400 	.word	0x400e0400

000826a4 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   826a4:	4b02      	ldr	r3, [pc, #8]	; (826b0 <pmc_is_locked_upll+0xc>)
   826a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   826a8:	f000 0040 	and.w	r0, r0, #64	; 0x40
   826ac:	4770      	bx	lr
   826ae:	bf00      	nop
   826b0:	400e0400 	.word	0x400e0400

000826b4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   826b4:	281d      	cmp	r0, #29
   826b6:	d80e      	bhi.n	826d6 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   826b8:	281f      	cmp	r0, #31
   826ba:	d80e      	bhi.n	826da <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   826bc:	4b09      	ldr	r3, [pc, #36]	; (826e4 <pmc_enable_periph_clk+0x30>)
   826be:	699a      	ldr	r2, [r3, #24]
   826c0:	2301      	movs	r3, #1
   826c2:	4083      	lsls	r3, r0
   826c4:	4393      	bics	r3, r2
   826c6:	d00a      	beq.n	826de <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   826c8:	2301      	movs	r3, #1
   826ca:	fa03 f000 	lsl.w	r0, r3, r0
   826ce:	4b05      	ldr	r3, [pc, #20]	; (826e4 <pmc_enable_periph_clk+0x30>)
   826d0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   826d2:	2000      	movs	r0, #0
   826d4:	4770      	bx	lr
		return 1;
   826d6:	2001      	movs	r0, #1
   826d8:	4770      	bx	lr
	return 0;
   826da:	2000      	movs	r0, #0
   826dc:	4770      	bx	lr
   826de:	2000      	movs	r0, #0
}
   826e0:	4770      	bx	lr
   826e2:	bf00      	nop
   826e4:	400e0400 	.word	0x400e0400

000826e8 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   826e8:	281d      	cmp	r0, #29
   826ea:	d810      	bhi.n	8270e <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   826ec:	281f      	cmp	r0, #31
   826ee:	d810      	bhi.n	82712 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   826f0:	4b09      	ldr	r3, [pc, #36]	; (82718 <pmc_disable_periph_clk+0x30>)
   826f2:	699a      	ldr	r2, [r3, #24]
   826f4:	2301      	movs	r3, #1
   826f6:	4083      	lsls	r3, r0
   826f8:	4393      	bics	r3, r2
   826fa:	d001      	beq.n	82700 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   826fc:	2000      	movs	r0, #0
}
   826fe:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   82700:	2301      	movs	r3, #1
   82702:	fa03 f000 	lsl.w	r0, r3, r0
   82706:	4b04      	ldr	r3, [pc, #16]	; (82718 <pmc_disable_periph_clk+0x30>)
   82708:	6158      	str	r0, [r3, #20]
	return 0;
   8270a:	2000      	movs	r0, #0
   8270c:	4770      	bx	lr
		return 1;
   8270e:	2001      	movs	r0, #1
   82710:	4770      	bx	lr
	return 0;
   82712:	2000      	movs	r0, #0
   82714:	4770      	bx	lr
   82716:	bf00      	nop
   82718:	400e0400 	.word	0x400e0400

0008271c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   8271c:	f44f 7380 	mov.w	r3, #256	; 0x100
   82720:	4083      	lsls	r3, r0
   82722:	4a01      	ldr	r2, [pc, #4]	; (82728 <pmc_enable_pck+0xc>)
   82724:	6013      	str	r3, [r2, #0]
}
   82726:	4770      	bx	lr
   82728:	400e0400 	.word	0x400e0400

0008272c <pmc_set_fast_startup_input>:
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   8272c:	f3c0 0312 	ubfx	r3, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   82730:	4a02      	ldr	r2, [pc, #8]	; (8273c <pmc_set_fast_startup_input+0x10>)
   82732:	6f10      	ldr	r0, [r2, #112]	; 0x70
   82734:	4318      	orrs	r0, r3
   82736:	6710      	str	r0, [r2, #112]	; 0x70
}
   82738:	4770      	bx	lr
   8273a:	bf00      	nop
   8273c:	400e0400 	.word	0x400e0400

00082740 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   82740:	b570      	push	{r4, r5, r6, lr}
   82742:	460d      	mov	r5, r1
   82744:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
   82746:	4606      	mov	r6, r0
   82748:	b158      	cbz	r0, 82762 <_read+0x22>
		return -1;
   8274a:	f04f 36ff 	mov.w	r6, #4294967295
   8274e:	e00a      	b.n	82766 <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   82750:	4b06      	ldr	r3, [pc, #24]	; (8276c <_read+0x2c>)
   82752:	6818      	ldr	r0, [r3, #0]
   82754:	4b06      	ldr	r3, [pc, #24]	; (82770 <_read+0x30>)
   82756:	681b      	ldr	r3, [r3, #0]
   82758:	4629      	mov	r1, r5
   8275a:	4798      	blx	r3
		ptr++;
   8275c:	3501      	adds	r5, #1
		nChars++;
   8275e:	3601      	adds	r6, #1
	for (; len > 0; --len) {
   82760:	3c01      	subs	r4, #1
   82762:	2c00      	cmp	r4, #0
   82764:	dcf4      	bgt.n	82750 <_read+0x10>
	}
	return nChars;
}
   82766:	4630      	mov	r0, r6
   82768:	bd70      	pop	{r4, r5, r6, pc}
   8276a:	bf00      	nop
   8276c:	20001868 	.word	0x20001868
   82770:	20001840 	.word	0x20001840

00082774 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   82774:	4b02      	ldr	r3, [pc, #8]	; (82780 <pmc_is_wakeup_clocks_restored+0xc>)
   82776:	7818      	ldrb	r0, [r3, #0]
}
   82778:	f080 0001 	eor.w	r0, r0, #1
   8277c:	4770      	bx	lr
   8277e:	bf00      	nop
   82780:	20000f3c 	.word	0x20000f3c

00082784 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82784:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82788:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8278c:	670a      	str	r2, [r1, #112]	; 0x70
}
   8278e:	4770      	bx	lr

00082790 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82790:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82794:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82798:	674a      	str	r2, [r1, #116]	; 0x74
}
   8279a:	4770      	bx	lr

0008279c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   8279c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   827a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   827a4:	678a      	str	r2, [r1, #120]	; 0x78
}
   827a6:	4770      	bx	lr

000827a8 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   827a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   827ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   827b0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   827b4:	4770      	bx	lr
   827b6:	0000      	movs	r0, r0

000827b8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   827b8:	b508      	push	{r3, lr}
   827ba:	2014      	movs	r0, #20
   827bc:	4b01      	ldr	r3, [pc, #4]	; (827c4 <spi_enable_clock+0xc>)
   827be:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   827c0:	bd08      	pop	{r3, pc}
   827c2:	bf00      	nop
   827c4:	000826b5 	.word	0x000826b5

000827c8 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   827c8:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
   827ca:	f643 2498 	movw	r4, #15000	; 0x3a98
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   827ce:	6905      	ldr	r5, [r0, #16]
   827d0:	f015 0f02 	tst.w	r5, #2
   827d4:	d103      	bne.n	827de <spi_write+0x16>
		if (!timeout--) {
   827d6:	1e65      	subs	r5, r4, #1
   827d8:	b184      	cbz	r4, 827fc <spi_write+0x34>
   827da:	462c      	mov	r4, r5
   827dc:	e7f7      	b.n	827ce <spi_write+0x6>
	if (p_spi->SPI_MR & SPI_MR_PS) {
   827de:	6844      	ldr	r4, [r0, #4]
   827e0:	f014 0f02 	tst.w	r4, #2
   827e4:	d006      	beq.n	827f4 <spi_write+0x2c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   827e6:	0412      	lsls	r2, r2, #16
   827e8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   827ec:	4311      	orrs	r1, r2
		if (uc_last) {
   827ee:	b10b      	cbz	r3, 827f4 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   827f0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   827f4:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   827f6:	2000      	movs	r0, #0
}
   827f8:	bc30      	pop	{r4, r5}
   827fa:	4770      	bx	lr
			return SPI_ERROR_TIMEOUT;
   827fc:	2001      	movs	r0, #1
   827fe:	e7fb      	b.n	827f8 <spi_write+0x30>

00082800 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   82800:	b13a      	cbz	r2, 82812 <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   82802:	310c      	adds	r1, #12
   82804:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82808:	f043 0301 	orr.w	r3, r3, #1
   8280c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   82810:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   82812:	310c      	adds	r1, #12
   82814:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82818:	f023 0301 	bic.w	r3, r3, #1
   8281c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
   82820:	4770      	bx	lr

00082822 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   82822:	b13a      	cbz	r2, 82834 <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   82824:	310c      	adds	r1, #12
   82826:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8282a:	f043 0302 	orr.w	r3, r3, #2
   8282e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   82832:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   82834:	310c      	adds	r1, #12
   82836:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8283a:	f023 0302 	bic.w	r3, r3, #2
   8283e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
   82842:	4770      	bx	lr

00082844 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   82844:	4401      	add	r1, r0
   82846:	3901      	subs	r1, #1
   82848:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8284c:	1e43      	subs	r3, r0, #1
   8284e:	2bfe      	cmp	r3, #254	; 0xfe
   82850:	d801      	bhi.n	82856 <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
   82852:	b200      	sxth	r0, r0
   82854:	4770      	bx	lr
		return -1;
   82856:	f04f 30ff 	mov.w	r0, #4294967295
}
   8285a:	4770      	bx	lr

0008285c <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   8285c:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8285e:	310c      	adds	r1, #12
   82860:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   82864:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
   82868:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   8286c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82870:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   82874:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   82878:	bc10      	pop	{r4}
   8287a:	4770      	bx	lr

0008287c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8287c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8287e:	4a15      	ldr	r2, [pc, #84]	; (828d4 <Reset_Handler+0x58>)
   82880:	4b15      	ldr	r3, [pc, #84]	; (828d8 <Reset_Handler+0x5c>)
   82882:	429a      	cmp	r2, r3
   82884:	d009      	beq.n	8289a <Reset_Handler+0x1e>
	pDest = &_srelocate;
   82886:	4b14      	ldr	r3, [pc, #80]	; (828d8 <Reset_Handler+0x5c>)
	pSrc = &_etext;
   82888:	4a12      	ldr	r2, [pc, #72]	; (828d4 <Reset_Handler+0x58>)
   8288a:	e003      	b.n	82894 <Reset_Handler+0x18>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8288c:	f852 1b04 	ldr.w	r1, [r2], #4
   82890:	f843 1b04 	str.w	r1, [r3], #4
		for (; pDest < &_erelocate;) {
   82894:	4911      	ldr	r1, [pc, #68]	; (828dc <Reset_Handler+0x60>)
   82896:	428b      	cmp	r3, r1
   82898:	d3f8      	bcc.n	8288c <Reset_Handler+0x10>
	pSrc = &_etext;
   8289a:	4b11      	ldr	r3, [pc, #68]	; (828e0 <Reset_Handler+0x64>)
   8289c:	e002      	b.n	828a4 <Reset_Handler+0x28>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8289e:	2200      	movs	r2, #0
   828a0:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   828a4:	4a0f      	ldr	r2, [pc, #60]	; (828e4 <Reset_Handler+0x68>)
   828a6:	4293      	cmp	r3, r2
   828a8:	d3f9      	bcc.n	8289e <Reset_Handler+0x22>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   828aa:	4b0f      	ldr	r3, [pc, #60]	; (828e8 <Reset_Handler+0x6c>)
   828ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   828b0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   828b4:	490d      	ldr	r1, [pc, #52]	; (828ec <Reset_Handler+0x70>)
   828b6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   828b8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   828bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   828c0:	d203      	bcs.n	828ca <Reset_Handler+0x4e>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   828c2:	688b      	ldr	r3, [r1, #8]
   828c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   828c8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   828ca:	4b09      	ldr	r3, [pc, #36]	; (828f0 <Reset_Handler+0x74>)
   828cc:	4798      	blx	r3

	/* Branch to main function */
	main();
   828ce:	4b09      	ldr	r3, [pc, #36]	; (828f4 <Reset_Handler+0x78>)
   828d0:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   828d2:	e7fe      	b.n	828d2 <Reset_Handler+0x56>
   828d4:	0008b7a4 	.word	0x0008b7a4
   828d8:	20000000 	.word	0x20000000
   828dc:	20000d80 	.word	0x20000d80
   828e0:	20000d80 	.word	0x20000d80
   828e4:	20001894 	.word	0x20001894
   828e8:	00080000 	.word	0x00080000
   828ec:	e000ed00 	.word	0xe000ed00
   828f0:	000843e9 	.word	0x000843e9
   828f4:	00080535 	.word	0x00080535

000828f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   828f8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   828fa:	4a09      	ldr	r2, [pc, #36]	; (82920 <_sbrk+0x28>)
   828fc:	6812      	ldr	r2, [r2, #0]
   828fe:	b142      	cbz	r2, 82912 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82900:	4a07      	ldr	r2, [pc, #28]	; (82920 <_sbrk+0x28>)
   82902:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   82904:	18c1      	adds	r1, r0, r3
   82906:	4a07      	ldr	r2, [pc, #28]	; (82924 <_sbrk+0x2c>)
   82908:	4291      	cmp	r1, r2
   8290a:	dc06      	bgt.n	8291a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   8290c:	4a04      	ldr	r2, [pc, #16]	; (82920 <_sbrk+0x28>)
   8290e:	6011      	str	r1, [r2, #0]

	return (caddr_t) prev_heap;
   82910:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82912:	4a03      	ldr	r2, [pc, #12]	; (82920 <_sbrk+0x28>)
   82914:	4904      	ldr	r1, [pc, #16]	; (82928 <_sbrk+0x30>)
   82916:	6011      	str	r1, [r2, #0]
   82918:	e7f2      	b.n	82900 <_sbrk+0x8>
		return (caddr_t) -1;	
   8291a:	f04f 30ff 	mov.w	r0, #4294967295
}
   8291e:	4770      	bx	lr
   82920:	20000f40 	.word	0x20000f40
   82924:	20083ffc 	.word	0x20083ffc
   82928:	20084000 	.word	0x20084000

0008292c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8292c:	f04f 30ff 	mov.w	r0, #4294967295
   82930:	4770      	bx	lr

00082932 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82936:	604b      	str	r3, [r1, #4]

	return 0;
}
   82938:	2000      	movs	r0, #0
   8293a:	4770      	bx	lr

0008293c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8293c:	2001      	movs	r0, #1
   8293e:	4770      	bx	lr

00082940 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82940:	2000      	movs	r0, #0
   82942:	4770      	bx	lr

00082944 <_exit>:

extern void _exit(int status)
{
   82944:	b508      	push	{r3, lr}
   82946:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   82948:	4801      	ldr	r0, [pc, #4]	; (82950 <_exit+0xc>)
   8294a:	4b02      	ldr	r3, [pc, #8]	; (82954 <_exit+0x10>)
   8294c:	4798      	blx	r3

	for (;;);
   8294e:	e7fe      	b.n	8294e <_exit+0xa>
   82950:	0008b328 	.word	0x0008b328
   82954:	00084431 	.word	0x00084431

00082958 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   82958:	4770      	bx	lr

0008295a <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   8295a:	f04f 30ff 	mov.w	r0, #4294967295
   8295e:	4770      	bx	lr

00082960 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82960:	b508      	push	{r3, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82962:	203e      	movs	r0, #62	; 0x3e
   82964:	4b07      	ldr	r3, [pc, #28]	; (82984 <sysclk_enable_usb+0x24>)
   82966:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82968:	4b07      	ldr	r3, [pc, #28]	; (82988 <sysclk_enable_usb+0x28>)
   8296a:	4798      	blx	r3
   8296c:	2800      	cmp	r0, #0
   8296e:	d0fb      	beq.n	82968 <sysclk_enable_usb+0x8>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82970:	4b06      	ldr	r3, [pc, #24]	; (8298c <sysclk_enable_usb+0x2c>)
   82972:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   82976:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   82978:	4b05      	ldr	r3, [pc, #20]	; (82990 <sysclk_enable_usb+0x30>)
   8297a:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8297c:	2800      	cmp	r0, #0
   8297e:	d0fb      	beq.n	82978 <sysclk_enable_usb+0x18>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   82980:	bd08      	pop	{r3, pc}
   82982:	bf00      	nop
   82984:	0008261d 	.word	0x0008261d
   82988:	00082645 	.word	0x00082645
   8298c:	400e0400 	.word	0x400e0400
   82990:	000826a5 	.word	0x000826a5

00082994 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82994:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82996:	4812      	ldr	r0, [pc, #72]	; (829e0 <sysclk_init+0x4c>)
   82998:	4b12      	ldr	r3, [pc, #72]	; (829e4 <sysclk_init+0x50>)
   8299a:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8299c:	203e      	movs	r0, #62	; 0x3e
   8299e:	4b12      	ldr	r3, [pc, #72]	; (829e8 <sysclk_init+0x54>)
   829a0:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   829a2:	4b12      	ldr	r3, [pc, #72]	; (829ec <sysclk_init+0x58>)
   829a4:	4798      	blx	r3
   829a6:	2800      	cmp	r0, #0
   829a8:	d0fb      	beq.n	829a2 <sysclk_init+0xe>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   829aa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   829ae:	4b10      	ldr	r3, [pc, #64]	; (829f0 <sysclk_init+0x5c>)
   829b0:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   829b2:	4b10      	ldr	r3, [pc, #64]	; (829f4 <sysclk_init+0x60>)
   829b4:	4798      	blx	r3
   829b6:	2800      	cmp	r0, #0
   829b8:	d0fb      	beq.n	829b2 <sysclk_init+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
   829ba:	4b0f      	ldr	r3, [pc, #60]	; (829f8 <sysclk_init+0x64>)
   829bc:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   829be:	4b0f      	ldr	r3, [pc, #60]	; (829fc <sysclk_init+0x68>)
   829c0:	4a0f      	ldr	r2, [pc, #60]	; (82a00 <sysclk_init+0x6c>)
   829c2:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   829c4:	4b0f      	ldr	r3, [pc, #60]	; (82a04 <sysclk_init+0x70>)
   829c6:	4798      	blx	r3
   829c8:	2800      	cmp	r0, #0
   829ca:	d0fb      	beq.n	829c4 <sysclk_init+0x30>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   829cc:	2010      	movs	r0, #16
   829ce:	4b0e      	ldr	r3, [pc, #56]	; (82a08 <sysclk_init+0x74>)
   829d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   829d2:	4b0e      	ldr	r3, [pc, #56]	; (82a0c <sysclk_init+0x78>)
   829d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   829d6:	4802      	ldr	r0, [pc, #8]	; (829e0 <sysclk_init+0x4c>)
   829d8:	4b02      	ldr	r3, [pc, #8]	; (829e4 <sysclk_init+0x50>)
   829da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   829dc:	bd08      	pop	{r3, pc}
   829de:	bf00      	nop
   829e0:	05b8d800 	.word	0x05b8d800
   829e4:	20000139 	.word	0x20000139
   829e8:	0008261d 	.word	0x0008261d
   829ec:	00082645 	.word	0x00082645
   829f0:	00082665 	.word	0x00082665
   829f4:	00082655 	.word	0x00082655
   829f8:	00082685 	.word	0x00082685
   829fc:	400e0400 	.word	0x400e0400
   82a00:	200f3f01 	.word	0x200f3f01
   82a04:	00082695 	.word	0x00082695
   82a08:	000825c9 	.word	0x000825c9
   82a0c:	00082a11 	.word	0x00082a11

00082a10 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82a10:	4b3f      	ldr	r3, [pc, #252]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a14:	f003 0303 	and.w	r3, r3, #3
   82a18:	2b01      	cmp	r3, #1
   82a1a:	d033      	beq.n	82a84 <SystemCoreClockUpdate+0x74>
   82a1c:	d80a      	bhi.n	82a34 <SystemCoreClockUpdate+0x24>
   82a1e:	b9eb      	cbnz	r3, 82a5c <SystemCoreClockUpdate+0x4c>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82a20:	4b3c      	ldr	r3, [pc, #240]	; (82b14 <SystemCoreClockUpdate+0x104>)
   82a22:	695b      	ldr	r3, [r3, #20]
   82a24:	f013 0f80 	tst.w	r3, #128	; 0x80
   82a28:	d027      	beq.n	82a7a <SystemCoreClockUpdate+0x6a>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82a2a:	4b3b      	ldr	r3, [pc, #236]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82a2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82a30:	601a      	str	r2, [r3, #0]
   82a32:	e013      	b.n	82a5c <SystemCoreClockUpdate+0x4c>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82a34:	3b02      	subs	r3, #2
   82a36:	2b01      	cmp	r3, #1
   82a38:	d810      	bhi.n	82a5c <SystemCoreClockUpdate+0x4c>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82a3a:	4b35      	ldr	r3, [pc, #212]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82a3c:	6a1b      	ldr	r3, [r3, #32]
   82a3e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82a42:	d03b      	beq.n	82abc <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82a44:	4b34      	ldr	r3, [pc, #208]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82a46:	4a35      	ldr	r2, [pc, #212]	; (82b1c <SystemCoreClockUpdate+0x10c>)
   82a48:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82a4a:	4b31      	ldr	r3, [pc, #196]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a4e:	f003 0303 	and.w	r3, r3, #3
   82a52:	2b02      	cmp	r3, #2
   82a54:	d045      	beq.n	82ae2 <SystemCoreClockUpdate+0xd2>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82a56:	4b30      	ldr	r3, [pc, #192]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82a58:	4a31      	ldr	r2, [pc, #196]	; (82b20 <SystemCoreClockUpdate+0x110>)
   82a5a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82a5c:	4b2c      	ldr	r3, [pc, #176]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a64:	2b70      	cmp	r3, #112	; 0x70
   82a66:	d04a      	beq.n	82afe <SystemCoreClockUpdate+0xee>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82a68:	4b29      	ldr	r3, [pc, #164]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82a6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82a70:	4929      	ldr	r1, [pc, #164]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82a72:	680b      	ldr	r3, [r1, #0]
   82a74:	40d3      	lsrs	r3, r2
   82a76:	600b      	str	r3, [r1, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   82a78:	4770      	bx	lr
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82a7a:	4b27      	ldr	r3, [pc, #156]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82a7c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82a80:	601a      	str	r2, [r3, #0]
   82a82:	e7eb      	b.n	82a5c <SystemCoreClockUpdate+0x4c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82a84:	4b22      	ldr	r3, [pc, #136]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82a86:	6a1b      	ldr	r3, [r3, #32]
   82a88:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82a8c:	d003      	beq.n	82a96 <SystemCoreClockUpdate+0x86>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82a8e:	4b22      	ldr	r3, [pc, #136]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82a90:	4a22      	ldr	r2, [pc, #136]	; (82b1c <SystemCoreClockUpdate+0x10c>)
   82a92:	601a      	str	r2, [r3, #0]
   82a94:	e7e2      	b.n	82a5c <SystemCoreClockUpdate+0x4c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82a96:	4b20      	ldr	r3, [pc, #128]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82a98:	4a22      	ldr	r2, [pc, #136]	; (82b24 <SystemCoreClockUpdate+0x114>)
   82a9a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82a9c:	4b1c      	ldr	r3, [pc, #112]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82a9e:	6a1b      	ldr	r3, [r3, #32]
   82aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82aa4:	2b10      	cmp	r3, #16
   82aa6:	d005      	beq.n	82ab4 <SystemCoreClockUpdate+0xa4>
   82aa8:	2b20      	cmp	r3, #32
   82aaa:	d1d7      	bne.n	82a5c <SystemCoreClockUpdate+0x4c>
				SystemCoreClock *= 3U;
   82aac:	4b1a      	ldr	r3, [pc, #104]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82aae:	4a1b      	ldr	r2, [pc, #108]	; (82b1c <SystemCoreClockUpdate+0x10c>)
   82ab0:	601a      	str	r2, [r3, #0]
				break;
   82ab2:	e7d3      	b.n	82a5c <SystemCoreClockUpdate+0x4c>
				SystemCoreClock *= 2U;
   82ab4:	4b18      	ldr	r3, [pc, #96]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82ab6:	4a1c      	ldr	r2, [pc, #112]	; (82b28 <SystemCoreClockUpdate+0x118>)
   82ab8:	601a      	str	r2, [r3, #0]
				break;
   82aba:	e7cf      	b.n	82a5c <SystemCoreClockUpdate+0x4c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82abc:	4b16      	ldr	r3, [pc, #88]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82abe:	4a19      	ldr	r2, [pc, #100]	; (82b24 <SystemCoreClockUpdate+0x114>)
   82ac0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82ac2:	4b13      	ldr	r3, [pc, #76]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82ac4:	6a1b      	ldr	r3, [r3, #32]
   82ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82aca:	2b10      	cmp	r3, #16
   82acc:	d005      	beq.n	82ada <SystemCoreClockUpdate+0xca>
   82ace:	2b20      	cmp	r3, #32
   82ad0:	d1bb      	bne.n	82a4a <SystemCoreClockUpdate+0x3a>
				SystemCoreClock *= 3U;
   82ad2:	4b11      	ldr	r3, [pc, #68]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82ad4:	4a11      	ldr	r2, [pc, #68]	; (82b1c <SystemCoreClockUpdate+0x10c>)
   82ad6:	601a      	str	r2, [r3, #0]
				break;
   82ad8:	e7b7      	b.n	82a4a <SystemCoreClockUpdate+0x3a>
				SystemCoreClock *= 2U;
   82ada:	4b0f      	ldr	r3, [pc, #60]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82adc:	4a12      	ldr	r2, [pc, #72]	; (82b28 <SystemCoreClockUpdate+0x118>)
   82ade:	601a      	str	r2, [r3, #0]
				break;
   82ae0:	e7b3      	b.n	82a4a <SystemCoreClockUpdate+0x3a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82ae2:	480b      	ldr	r0, [pc, #44]	; (82b10 <SystemCoreClockUpdate+0x100>)
   82ae4:	6a82      	ldr	r2, [r0, #40]	; 0x28
   82ae6:	f3c2 420a 	ubfx	r2, r2, #16, #11
   82aea:	490b      	ldr	r1, [pc, #44]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82aec:	680b      	ldr	r3, [r1, #0]
   82aee:	fb02 3303 	mla	r3, r2, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   82af2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   82af4:	b2d2      	uxtb	r2, r2
   82af6:	fbb3 f3f2 	udiv	r3, r3, r2
   82afa:	600b      	str	r3, [r1, #0]
   82afc:	e7ae      	b.n	82a5c <SystemCoreClockUpdate+0x4c>
		SystemCoreClock /= 3U;
   82afe:	4a06      	ldr	r2, [pc, #24]	; (82b18 <SystemCoreClockUpdate+0x108>)
   82b00:	6813      	ldr	r3, [r2, #0]
   82b02:	490a      	ldr	r1, [pc, #40]	; (82b2c <SystemCoreClockUpdate+0x11c>)
   82b04:	fba1 1303 	umull	r1, r3, r1, r3
   82b08:	085b      	lsrs	r3, r3, #1
   82b0a:	6013      	str	r3, [r2, #0]
   82b0c:	4770      	bx	lr
   82b0e:	bf00      	nop
   82b10:	400e0400 	.word	0x400e0400
   82b14:	400e1210 	.word	0x400e1210
   82b18:	2000032c 	.word	0x2000032c
   82b1c:	00b71b00 	.word	0x00b71b00
   82b20:	0e4e1c00 	.word	0x0e4e1c00
   82b24:	003d0900 	.word	0x003d0900
   82b28:	007a1200 	.word	0x007a1200
   82b2c:	aaaaaaab 	.word	0xaaaaaaab

00082b30 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82b30:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   82b34:	6a00      	ldr	r0, [r0, #32]
}
   82b36:	4770      	bx	lr

00082b38 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   82b38:	4603      	mov	r3, r0
	uint32_t val;

	if (len == 0)
   82b3a:	460a      	mov	r2, r1
   82b3c:	b159      	cbz	r1, 82b56 <twi_mk_addr+0x1e>
		return 0;

	val = addr[0];
   82b3e:	7800      	ldrb	r0, [r0, #0]
	if (len > 1) {
   82b40:	2901      	cmp	r1, #1
   82b42:	dd02      	ble.n	82b4a <twi_mk_addr+0x12>
		val <<= 8;
		val |= addr[1];
   82b44:	7859      	ldrb	r1, [r3, #1]
   82b46:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (len > 2) {
   82b4a:	2a02      	cmp	r2, #2
   82b4c:	dd04      	ble.n	82b58 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
   82b4e:	789b      	ldrb	r3, [r3, #2]
   82b50:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   82b54:	4770      	bx	lr
		return 0;
   82b56:	2000      	movs	r0, #0
	}
	return val;
}
   82b58:	4770      	bx	lr

00082b5a <twi_enable_master_mode>:
	p_twi->TWI_CR = TWI_CR_MSDIS;
   82b5a:	2308      	movs	r3, #8
   82b5c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   82b5e:	2320      	movs	r3, #32
   82b60:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   82b62:	2304      	movs	r3, #4
   82b64:	6003      	str	r3, [r0, #0]
}
   82b66:	4770      	bx	lr

00082b68 <twi_set_speed>:
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   82b68:	4b0d      	ldr	r3, [pc, #52]	; (82ba0 <twi_set_speed+0x38>)
   82b6a:	4299      	cmp	r1, r3
   82b6c:	d816      	bhi.n	82b9c <twi_set_speed+0x34>
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   82b6e:	004b      	lsls	r3, r1, #1
   82b70:	fbb2 f2f3 	udiv	r2, r2, r3
   82b74:	1f13      	subs	r3, r2, #4
	uint32_t ckdiv = 0;
   82b76:	2200      	movs	r2, #0
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   82b78:	e001      	b.n	82b7e <twi_set_speed+0x16>
		ckdiv++;
   82b7a:	3201      	adds	r2, #1
		c_lh_div /= TWI_CLK_DIVIDER;
   82b7c:	085b      	lsrs	r3, r3, #1
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   82b7e:	2bff      	cmp	r3, #255	; 0xff
   82b80:	d901      	bls.n	82b86 <twi_set_speed+0x1e>
   82b82:	2a06      	cmp	r2, #6
   82b84:	d9f9      	bls.n	82b7a <twi_set_speed+0x12>
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   82b86:	b2d9      	uxtb	r1, r3
   82b88:	021b      	lsls	r3, r3, #8
   82b8a:	b29b      	uxth	r3, r3
   82b8c:	430b      	orrs	r3, r1
			TWI_CWGR_CKDIV(ckdiv);
   82b8e:	0412      	lsls	r2, r2, #16
   82b90:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   82b94:	431a      	orrs	r2, r3
	p_twi->TWI_CWGR =
   82b96:	6102      	str	r2, [r0, #16]
	return PASS;
   82b98:	2000      	movs	r0, #0
   82b9a:	4770      	bx	lr
		return FAIL;
   82b9c:	2001      	movs	r0, #1
}
   82b9e:	4770      	bx	lr
   82ba0:	00061a80 	.word	0x00061a80

00082ba4 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   82ba4:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   82ba6:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   82ba8:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   82baa:	2c00      	cmp	r4, #0
   82bac:	d042      	beq.n	82c34 <twi_master_read+0x90>
   82bae:	4606      	mov	r6, r0
   82bb0:	4608      	mov	r0, r1
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   82bb2:	2100      	movs	r1, #0
   82bb4:	6071      	str	r1, [r6, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   82bb6:	7c03      	ldrb	r3, [r0, #16]
   82bb8:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   82bba:	6842      	ldr	r2, [r0, #4]
   82bbc:	0212      	lsls	r2, r2, #8
   82bbe:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   82bc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   82bc6:	4313      	orrs	r3, r2
   82bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   82bcc:	6073      	str	r3, [r6, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   82bce:	60f1      	str	r1, [r6, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   82bd0:	6841      	ldr	r1, [r0, #4]
   82bd2:	4b1c      	ldr	r3, [pc, #112]	; (82c44 <twi_master_read+0xa0>)
   82bd4:	4798      	blx	r3
   82bd6:	60f0      	str	r0, [r6, #12]

	/* Send a START condition */
	if (cnt == 1) {
   82bd8:	2c01      	cmp	r4, #1
   82bda:	d005      	beq.n	82be8 <twi_master_read+0x44>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
		stop_sent = 1;
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   82bdc:	2301      	movs	r3, #1
   82bde:	6033      	str	r3, [r6, #0]
		stop_sent = 0;
   82be0:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   82be2:	f643 2398 	movw	r3, #15000	; 0x3a98
   82be6:	e00e      	b.n	82c06 <twi_master_read+0x62>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   82be8:	2303      	movs	r3, #3
   82bea:	6033      	str	r3, [r6, #0]
		stop_sent = 1;
   82bec:	2001      	movs	r0, #1
   82bee:	e7f8      	b.n	82be2 <twi_master_read+0x3e>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
   82bf0:	f012 0f02 	tst.w	r2, #2
   82bf4:	d016      	beq.n	82c24 <twi_master_read+0x80>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   82bf6:	6b32      	ldr	r2, [r6, #48]	; 0x30
   82bf8:	462b      	mov	r3, r5
   82bfa:	f803 2b01 	strb.w	r2, [r3], #1

		cnt--;
   82bfe:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
   82c00:	461d      	mov	r5, r3
		timeout = TWI_TIMEOUT;
   82c02:	f643 2398 	movw	r3, #15000	; 0x3a98
	while (cnt > 0) {
   82c06:	b17c      	cbz	r4, 82c28 <twi_master_read+0x84>
		status = p_twi->TWI_SR;
   82c08:	6a32      	ldr	r2, [r6, #32]
		if (status & TWI_SR_NACK) {
   82c0a:	f412 7f80 	tst.w	r2, #256	; 0x100
   82c0e:	d114      	bne.n	82c3a <twi_master_read+0x96>
		if (!timeout--) {
   82c10:	1e59      	subs	r1, r3, #1
   82c12:	b1a3      	cbz	r3, 82c3e <twi_master_read+0x9a>
		if (cnt == 1  && !stop_sent) {
   82c14:	2c01      	cmp	r4, #1
   82c16:	d1eb      	bne.n	82bf0 <twi_master_read+0x4c>
   82c18:	2800      	cmp	r0, #0
   82c1a:	d1e9      	bne.n	82bf0 <twi_master_read+0x4c>
			p_twi->TWI_CR = TWI_CR_STOP;
   82c1c:	2302      	movs	r3, #2
   82c1e:	6033      	str	r3, [r6, #0]
			stop_sent = 1;
   82c20:	2001      	movs	r0, #1
   82c22:	e7e5      	b.n	82bf0 <twi_master_read+0x4c>
		if (!timeout--) {
   82c24:	460b      	mov	r3, r1
   82c26:	e7ee      	b.n	82c06 <twi_master_read+0x62>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   82c28:	6a33      	ldr	r3, [r6, #32]
   82c2a:	f013 0f01 	tst.w	r3, #1
   82c2e:	d0fb      	beq.n	82c28 <twi_master_read+0x84>
	}

	p_twi->TWI_SR;
   82c30:	6a33      	ldr	r3, [r6, #32]

	return TWI_SUCCESS;
   82c32:	e000      	b.n	82c36 <twi_master_read+0x92>
		return TWI_INVALID_ARGUMENT;
   82c34:	2401      	movs	r4, #1
}
   82c36:	4620      	mov	r0, r4
   82c38:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
   82c3a:	2405      	movs	r4, #5
   82c3c:	e7fb      	b.n	82c36 <twi_master_read+0x92>
			return TWI_ERROR_TIMEOUT;
   82c3e:	2409      	movs	r4, #9
   82c40:	e7f9      	b.n	82c36 <twi_master_read+0x92>
   82c42:	bf00      	nop
   82c44:	00082b39 	.word	0x00082b39

00082c48 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   82c48:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   82c4a:	68ce      	ldr	r6, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   82c4c:	688c      	ldr	r4, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   82c4e:	b37e      	cbz	r6, 82cb0 <twi_master_write+0x68>
   82c50:	4605      	mov	r5, r0
   82c52:	4608      	mov	r0, r1
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   82c54:	2100      	movs	r1, #0
   82c56:	6069      	str	r1, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   82c58:	7c03      	ldrb	r3, [r0, #16]
   82c5a:	041b      	lsls	r3, r3, #16
   82c5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   82c60:	6842      	ldr	r2, [r0, #4]
   82c62:	0212      	lsls	r2, r2, #8
   82c64:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   82c68:	4313      	orrs	r3, r2
   82c6a:	606b      	str	r3, [r5, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   82c6c:	60e9      	str	r1, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   82c6e:	6841      	ldr	r1, [r0, #4]
   82c70:	4b12      	ldr	r3, [pc, #72]	; (82cbc <twi_master_write+0x74>)
   82c72:	4798      	blx	r3
   82c74:	60e8      	str	r0, [r5, #12]

	/* Send all bytes */
	while (cnt > 0) {
   82c76:	b16e      	cbz	r6, 82c94 <twi_master_write+0x4c>
		status = p_twi->TWI_SR;
   82c78:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   82c7a:	f413 7f80 	tst.w	r3, #256	; 0x100
   82c7e:	d119      	bne.n	82cb4 <twi_master_write+0x6c>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   82c80:	f013 0f04 	tst.w	r3, #4
   82c84:	d0f7      	beq.n	82c76 <twi_master_write+0x2e>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   82c86:	4623      	mov	r3, r4
   82c88:	f813 2b01 	ldrb.w	r2, [r3], #1
   82c8c:	636a      	str	r2, [r5, #52]	; 0x34

		cnt--;
   82c8e:	3e01      	subs	r6, #1
		p_twi->TWI_THR = *buffer++;
   82c90:	461c      	mov	r4, r3
   82c92:	e7f0      	b.n	82c76 <twi_master_write+0x2e>
	}

	while (1) {
		status = p_twi->TWI_SR;
   82c94:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   82c96:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   82c9a:	d10d      	bne.n	82cb8 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   82c9c:	f013 0f04 	tst.w	r3, #4
   82ca0:	d0f8      	beq.n	82c94 <twi_master_write+0x4c>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   82ca2:	2302      	movs	r3, #2
   82ca4:	602b      	str	r3, [r5, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   82ca6:	6a2b      	ldr	r3, [r5, #32]
   82ca8:	f013 0f01 	tst.w	r3, #1
   82cac:	d0fb      	beq.n	82ca6 <twi_master_write+0x5e>
   82cae:	e000      	b.n	82cb2 <twi_master_write+0x6a>
		return TWI_INVALID_ARGUMENT;
   82cb0:	2001      	movs	r0, #1
	}

	return TWI_SUCCESS;
}
   82cb2:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
   82cb4:	2005      	movs	r0, #5
   82cb6:	e7fc      	b.n	82cb2 <twi_master_write+0x6a>
			return TWI_RECEIVE_NACK;
   82cb8:	2005      	movs	r0, #5
   82cba:	e7fa      	b.n	82cb2 <twi_master_write+0x6a>
   82cbc:	00082b39 	.word	0x00082b39

00082cc0 <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   82cc0:	2380      	movs	r3, #128	; 0x80
   82cc2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   82cc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
}
   82cc6:	4770      	bx	lr

00082cc8 <twi_master_init>:
{
   82cc8:	b538      	push	{r3, r4, r5, lr}
   82cca:	4604      	mov	r4, r0
   82ccc:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   82cce:	f04f 33ff 	mov.w	r3, #4294967295
   82cd2:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   82cd4:	6a03      	ldr	r3, [r0, #32]
	twi_reset(p_twi);
   82cd6:	4b0a      	ldr	r3, [pc, #40]	; (82d00 <twi_master_init+0x38>)
   82cd8:	4798      	blx	r3
	twi_enable_master_mode(p_twi);
   82cda:	4620      	mov	r0, r4
   82cdc:	4b09      	ldr	r3, [pc, #36]	; (82d04 <twi_master_init+0x3c>)
   82cde:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   82ce0:	682a      	ldr	r2, [r5, #0]
   82ce2:	6869      	ldr	r1, [r5, #4]
   82ce4:	4620      	mov	r0, r4
   82ce6:	4b08      	ldr	r3, [pc, #32]	; (82d08 <twi_master_init+0x40>)
   82ce8:	4798      	blx	r3
   82cea:	2801      	cmp	r0, #1
   82cec:	d000      	beq.n	82cf0 <twi_master_init+0x28>
	uint32_t status = TWI_SUCCESS;
   82cee:	2000      	movs	r0, #0
	if (p_opt->smbus == 1) {
   82cf0:	7a6b      	ldrb	r3, [r5, #9]
   82cf2:	2b01      	cmp	r3, #1
   82cf4:	d000      	beq.n	82cf8 <twi_master_init+0x30>
}
   82cf6:	bd38      	pop	{r3, r4, r5, pc}
		p_twi->TWI_CR = TWI_CR_QUICK;
   82cf8:	2340      	movs	r3, #64	; 0x40
   82cfa:	6023      	str	r3, [r4, #0]
	return status;
   82cfc:	e7fb      	b.n	82cf6 <twi_master_init+0x2e>
   82cfe:	bf00      	nop
   82d00:	00082cc1 	.word	0x00082cc1
   82d04:	00082b5b 	.word	0x00082b5b
   82d08:	00082b69 	.word	0x00082b69

00082d0c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82d0c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82d0e:	23ac      	movs	r3, #172	; 0xac
   82d10:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82d12:	680b      	ldr	r3, [r1, #0]
   82d14:	684a      	ldr	r2, [r1, #4]
   82d16:	fbb3 f3f2 	udiv	r3, r3, r2
   82d1a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82d1c:	1e5c      	subs	r4, r3, #1
   82d1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   82d22:	4294      	cmp	r4, r2
   82d24:	d80b      	bhi.n	82d3e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   82d26:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   82d28:	688b      	ldr	r3, [r1, #8]
   82d2a:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82d2c:	f240 2302 	movw	r3, #514	; 0x202
   82d30:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   82d34:	2350      	movs	r3, #80	; 0x50
   82d36:	6003      	str	r3, [r0, #0]

	return 0;
   82d38:	2000      	movs	r0, #0
}
   82d3a:	bc10      	pop	{r4}
   82d3c:	4770      	bx	lr
		return 1;
   82d3e:	2001      	movs	r0, #1
   82d40:	e7fb      	b.n	82d3a <uart_init+0x2e>

00082d42 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82d42:	6943      	ldr	r3, [r0, #20]
   82d44:	f013 0f02 	tst.w	r3, #2
   82d48:	d002      	beq.n	82d50 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   82d4a:	61c1      	str	r1, [r0, #28]
	return 0;
   82d4c:	2000      	movs	r0, #0
   82d4e:	4770      	bx	lr
		return 1;
   82d50:	2001      	movs	r0, #1
}
   82d52:	4770      	bx	lr

00082d54 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82d54:	6943      	ldr	r3, [r0, #20]
   82d56:	f013 0f01 	tst.w	r3, #1
   82d5a:	d003      	beq.n	82d64 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82d5c:	6983      	ldr	r3, [r0, #24]
   82d5e:	700b      	strb	r3, [r1, #0]
	return 0;
   82d60:	2000      	movs	r0, #0
   82d62:	4770      	bx	lr
		return 1;
   82d64:	2001      	movs	r0, #1
}
   82d66:	4770      	bx	lr

00082d68 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   82d68:	4b01      	ldr	r3, [pc, #4]	; (82d70 <udi_vendor_getsetting+0x8>)
   82d6a:	7818      	ldrb	r0, [r3, #0]
   82d6c:	4770      	bx	lr
   82d6e:	bf00      	nop
   82d70:	20000f44 	.word	0x20000f44

00082d74 <udi_vendor_enable>:
{
   82d74:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   82d76:	4b05      	ldr	r3, [pc, #20]	; (82d8c <udi_vendor_enable+0x18>)
   82d78:	4798      	blx	r3
   82d7a:	78c3      	ldrb	r3, [r0, #3]
   82d7c:	4a04      	ldr	r2, [pc, #16]	; (82d90 <udi_vendor_enable+0x1c>)
   82d7e:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   82d80:	b10b      	cbz	r3, 82d86 <udi_vendor_enable+0x12>
	return true;
   82d82:	2001      	movs	r0, #1
}
   82d84:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   82d86:	4b03      	ldr	r3, [pc, #12]	; (82d94 <udi_vendor_enable+0x20>)
   82d88:	4798      	blx	r3
   82d8a:	e7fb      	b.n	82d84 <udi_vendor_enable+0x10>
   82d8c:	00081cad 	.word	0x00081cad
   82d90:	20000f44 	.word	0x20000f44
   82d94:	00080d05 	.word	0x00080d05

00082d98 <udi_vendor_disable>:
{
   82d98:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   82d9a:	4b03      	ldr	r3, [pc, #12]	; (82da8 <udi_vendor_disable+0x10>)
   82d9c:	781b      	ldrb	r3, [r3, #0]
   82d9e:	b103      	cbz	r3, 82da2 <udi_vendor_disable+0xa>
}
   82da0:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   82da2:	4b02      	ldr	r3, [pc, #8]	; (82dac <udi_vendor_disable+0x14>)
   82da4:	4798      	blx	r3
}
   82da6:	e7fb      	b.n	82da0 <udi_vendor_disable+0x8>
   82da8:	20000f44 	.word	0x20000f44
   82dac:	00080d2d 	.word	0x00080d2d

00082db0 <udi_vendor_setup>:
{
   82db0:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   82db2:	4a0d      	ldr	r2, [pc, #52]	; (82de8 <udi_vendor_setup+0x38>)
   82db4:	7813      	ldrb	r3, [r2, #0]
   82db6:	f992 2000 	ldrsb.w	r2, [r2]
   82dba:	2a00      	cmp	r2, #0
   82dbc:	db07      	blt.n	82dce <udi_vendor_setup+0x1e>
	if (Udd_setup_is_out()) {
   82dbe:	2a00      	cmp	r2, #0
   82dc0:	db0f      	blt.n	82de2 <udi_vendor_setup+0x32>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   82dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82dc6:	2b40      	cmp	r3, #64	; 0x40
   82dc8:	d008      	beq.n	82ddc <udi_vendor_setup+0x2c>
	return false; // Not supported request
   82dca:	2000      	movs	r0, #0
}
   82dcc:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   82dce:	f003 0160 	and.w	r1, r3, #96	; 0x60
   82dd2:	2940      	cmp	r1, #64	; 0x40
   82dd4:	d1f3      	bne.n	82dbe <udi_vendor_setup+0xe>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   82dd6:	4b05      	ldr	r3, [pc, #20]	; (82dec <udi_vendor_setup+0x3c>)
   82dd8:	4798      	blx	r3
   82dda:	e7f7      	b.n	82dcc <udi_vendor_setup+0x1c>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   82ddc:	4b04      	ldr	r3, [pc, #16]	; (82df0 <udi_vendor_setup+0x40>)
   82dde:	4798      	blx	r3
   82de0:	e7f4      	b.n	82dcc <udi_vendor_setup+0x1c>
	return false; // Not supported request
   82de2:	2000      	movs	r0, #0
   82de4:	e7f2      	b.n	82dcc <udi_vendor_setup+0x1c>
   82de6:	bf00      	nop
   82de8:	2000184c 	.word	0x2000184c
   82dec:	00080d7d 	.word	0x00080d7d
   82df0:	00080d39 	.word	0x00080d39

00082df4 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82df4:	b510      	push	{r4, lr}
   82df6:	b082      	sub	sp, #8
   82df8:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   82dfa:	9200      	str	r2, [sp, #0]
   82dfc:	4602      	mov	r2, r0
   82dfe:	2100      	movs	r1, #0
   82e00:	2081      	movs	r0, #129	; 0x81
   82e02:	4c02      	ldr	r4, [pc, #8]	; (82e0c <udi_vendor_bulk_in_run+0x18>)
   82e04:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   82e06:	b002      	add	sp, #8
   82e08:	bd10      	pop	{r4, pc}
   82e0a:	bf00      	nop
   82e0c:	00083de9 	.word	0x00083de9

00082e10 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82e10:	b510      	push	{r4, lr}
   82e12:	b082      	sub	sp, #8
   82e14:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   82e16:	9200      	str	r2, [sp, #0]
   82e18:	4602      	mov	r2, r0
   82e1a:	2100      	movs	r1, #0
   82e1c:	2002      	movs	r0, #2
   82e1e:	4c02      	ldr	r4, [pc, #8]	; (82e28 <udi_vendor_bulk_out_run+0x18>)
   82e20:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   82e22:	b002      	add	sp, #8
   82e24:	bd10      	pop	{r4, pc}
   82e26:	bf00      	nop
   82e28:	00083de9 	.word	0x00083de9

00082e2c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   82e2c:	4603      	mov	r3, r0
   82e2e:	b9a8      	cbnz	r0, 82e5c <udd_sleep_mode+0x30>
   82e30:	4a17      	ldr	r2, [pc, #92]	; (82e90 <udd_sleep_mode+0x64>)
   82e32:	7812      	ldrb	r2, [r2, #0]
   82e34:	b192      	cbz	r2, 82e5c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82e36:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   82e3a:	b672      	cpsid	i
   82e3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82e40:	4a14      	ldr	r2, [pc, #80]	; (82e94 <udd_sleep_mode+0x68>)
   82e42:	2100      	movs	r1, #0
   82e44:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   82e46:	4914      	ldr	r1, [pc, #80]	; (82e98 <udd_sleep_mode+0x6c>)
   82e48:	788a      	ldrb	r2, [r1, #2]
   82e4a:	3a01      	subs	r2, #1
   82e4c:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   82e4e:	b928      	cbnz	r0, 82e5c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   82e50:	4a10      	ldr	r2, [pc, #64]	; (82e94 <udd_sleep_mode+0x68>)
   82e52:	2101      	movs	r1, #1
   82e54:	7011      	strb	r1, [r2, #0]
   82e56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82e5a:	b662      	cpsie	i
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   82e5c:	b1ab      	cbz	r3, 82e8a <udd_sleep_mode+0x5e>
   82e5e:	4a0c      	ldr	r2, [pc, #48]	; (82e90 <udd_sleep_mode+0x64>)
   82e60:	7812      	ldrb	r2, [r2, #0]
   82e62:	b992      	cbnz	r2, 82e8a <udd_sleep_mode+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82e64:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   82e68:	b672      	cpsid	i
   82e6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82e6e:	4a09      	ldr	r2, [pc, #36]	; (82e94 <udd_sleep_mode+0x68>)
   82e70:	2100      	movs	r1, #0
   82e72:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   82e74:	4908      	ldr	r1, [pc, #32]	; (82e98 <udd_sleep_mode+0x6c>)
   82e76:	788a      	ldrb	r2, [r1, #2]
   82e78:	3201      	adds	r2, #1
   82e7a:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   82e7c:	b928      	cbnz	r0, 82e8a <udd_sleep_mode+0x5e>
		cpu_irq_enable();
   82e7e:	4a05      	ldr	r2, [pc, #20]	; (82e94 <udd_sleep_mode+0x68>)
   82e80:	2101      	movs	r1, #1
   82e82:	7011      	strb	r1, [r2, #0]
   82e84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82e88:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   82e8a:	4a01      	ldr	r2, [pc, #4]	; (82e90 <udd_sleep_mode+0x64>)
   82e8c:	7013      	strb	r3, [r2, #0]
}
   82e8e:	4770      	bx	lr
   82e90:	20000f46 	.word	0x20000f46
   82e94:	20000328 	.word	0x20000328
   82e98:	20001844 	.word	0x20001844

00082e9c <udd_reset_ep_ctrl>:
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   82e9c:	4b18      	ldr	r3, [pc, #96]	; (82f00 <udd_reset_ep_ctrl+0x64>)
   82e9e:	681a      	ldr	r2, [r3, #0]
   82ea0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82ea4:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   82ea6:	681a      	ldr	r2, [r3, #0]
   82ea8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82eac:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   82eae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   82eb2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   82eb6:	f022 0203 	bic.w	r2, r2, #3
   82eba:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   82ebe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   82ec2:	2201      	movs	r2, #1
   82ec4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82ec8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   82ecc:	b672      	cpsid	i
   82ece:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82ed2:	4a0c      	ldr	r2, [pc, #48]	; (82f04 <udd_reset_ep_ctrl+0x68>)
   82ed4:	2000      	movs	r0, #0
   82ed6:	7010      	strb	r0, [r2, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   82ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82edc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   82ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ee4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   82ee8:	691a      	ldr	r2, [r3, #16]
   82eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   82eee:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   82ef0:	b929      	cbnz	r1, 82efe <udd_reset_ep_ctrl+0x62>
		cpu_irq_enable();
   82ef2:	4b04      	ldr	r3, [pc, #16]	; (82f04 <udd_reset_ep_ctrl+0x68>)
   82ef4:	2201      	movs	r2, #1
   82ef6:	701a      	strb	r2, [r3, #0]
   82ef8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82efc:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   82efe:	4770      	bx	lr
   82f00:	400a4000 	.word	0x400a4000
   82f04:	20000328 	.word	0x20000328

00082f08 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82f08:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   82f0c:	b672      	cpsid	i
   82f0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82f12:	4a0e      	ldr	r2, [pc, #56]	; (82f4c <udd_ctrl_init+0x44>)
   82f14:	2100      	movs	r1, #0
   82f16:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   82f18:	4a0d      	ldr	r2, [pc, #52]	; (82f50 <udd_ctrl_init+0x48>)
   82f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f1e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   82f22:	b92b      	cbnz	r3, 82f30 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   82f24:	4b09      	ldr	r3, [pc, #36]	; (82f4c <udd_ctrl_init+0x44>)
   82f26:	2201      	movs	r2, #1
   82f28:	701a      	strb	r2, [r3, #0]
   82f2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82f2e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   82f30:	4b07      	ldr	r3, [pc, #28]	; (82f50 <udd_ctrl_init+0x48>)
   82f32:	f44f 7200 	mov.w	r2, #512	; 0x200
   82f36:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   82f3a:	4a06      	ldr	r2, [pc, #24]	; (82f54 <udd_ctrl_init+0x4c>)
   82f3c:	2300      	movs	r3, #0
   82f3e:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82f40:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   82f42:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82f44:	4a04      	ldr	r2, [pc, #16]	; (82f58 <udd_ctrl_init+0x50>)
   82f46:	7013      	strb	r3, [r2, #0]
}
   82f48:	4770      	bx	lr
   82f4a:	bf00      	nop
   82f4c:	20000328 	.word	0x20000328
   82f50:	400a4000 	.word	0x400a4000
   82f54:	2000184c 	.word	0x2000184c
   82f58:	20000f4c 	.word	0x20000f4c

00082f5c <udd_ctrl_overflow>:
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   82f5c:	4b07      	ldr	r3, [pc, #28]	; (82f7c <udd_ctrl_overflow+0x20>)
   82f5e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82f62:	f413 6f80 	tst.w	r3, #1024	; 0x400
   82f66:	d103      	bne.n	82f70 <udd_ctrl_overflow+0x14>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82f68:	4b05      	ldr	r3, [pc, #20]	; (82f80 <udd_ctrl_overflow+0x24>)
   82f6a:	781b      	ldrb	r3, [r3, #0]
   82f6c:	2b03      	cmp	r3, #3
   82f6e:	d000      	beq.n	82f72 <udd_ctrl_overflow+0x16>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
   82f70:	4770      	bx	lr
		udd_enable_stall_handshake(0);
   82f72:	4b02      	ldr	r3, [pc, #8]	; (82f7c <udd_ctrl_overflow+0x20>)
   82f74:	2220      	movs	r2, #32
   82f76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82f7a:	e7f9      	b.n	82f70 <udd_ctrl_overflow+0x14>
   82f7c:	400a4000 	.word	0x400a4000
   82f80:	20000f4c 	.word	0x20000f4c

00082f84 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   82f84:	4b03      	ldr	r3, [pc, #12]	; (82f94 <udd_ctrl_stall_data+0x10>)
   82f86:	2205      	movs	r2, #5
   82f88:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   82f8a:	4b03      	ldr	r3, [pc, #12]	; (82f98 <udd_ctrl_stall_data+0x14>)
   82f8c:	2220      	movs	r2, #32
   82f8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82f92:	4770      	bx	lr
   82f94:	20000f4c 	.word	0x20000f4c
   82f98:	400a4000 	.word	0x400a4000

00082f9c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   82f9c:	4b11      	ldr	r3, [pc, #68]	; (82fe4 <udd_ctrl_send_zlp_in+0x48>)
   82f9e:	2203      	movs	r2, #3
   82fa0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82fa2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   82fa6:	b672      	cpsid	i
   82fa8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82fac:	4b0e      	ldr	r3, [pc, #56]	; (82fe8 <udd_ctrl_send_zlp_in+0x4c>)
   82fae:	2200      	movs	r2, #0
   82fb0:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   82fb2:	4b0e      	ldr	r3, [pc, #56]	; (82fec <udd_ctrl_send_zlp_in+0x50>)
   82fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82fb8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82fbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82fc0:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   82fc4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   82fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82fcc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   82fd0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   82fd4:	b929      	cbnz	r1, 82fe2 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   82fd6:	4b04      	ldr	r3, [pc, #16]	; (82fe8 <udd_ctrl_send_zlp_in+0x4c>)
   82fd8:	2201      	movs	r2, #1
   82fda:	701a      	strb	r2, [r3, #0]
   82fdc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82fe0:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   82fe2:	4770      	bx	lr
   82fe4:	20000f4c 	.word	0x20000f4c
   82fe8:	20000328 	.word	0x20000328
   82fec:	400a4000 	.word	0x400a4000

00082ff0 <udd_ctrl_underflow>:
{
   82ff0:	b508      	push	{r3, lr}
	if (Is_udd_out_received(0))
   82ff2:	4b0a      	ldr	r3, [pc, #40]	; (8301c <udd_ctrl_underflow+0x2c>)
   82ff4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82ff8:	f413 7f00 	tst.w	r3, #512	; 0x200
   82ffc:	d105      	bne.n	8300a <udd_ctrl_underflow+0x1a>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82ffe:	4b08      	ldr	r3, [pc, #32]	; (83020 <udd_ctrl_underflow+0x30>)
   83000:	781b      	ldrb	r3, [r3, #0]
   83002:	2b01      	cmp	r3, #1
   83004:	d002      	beq.n	8300c <udd_ctrl_underflow+0x1c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   83006:	2b04      	cmp	r3, #4
   83008:	d003      	beq.n	83012 <udd_ctrl_underflow+0x22>
}
   8300a:	bd08      	pop	{r3, pc}
		udd_ctrl_send_zlp_in();
   8300c:	4b05      	ldr	r3, [pc, #20]	; (83024 <udd_ctrl_underflow+0x34>)
   8300e:	4798      	blx	r3
   83010:	e7fb      	b.n	8300a <udd_ctrl_underflow+0x1a>
		udd_enable_stall_handshake(0);
   83012:	4b02      	ldr	r3, [pc, #8]	; (8301c <udd_ctrl_underflow+0x2c>)
   83014:	2220      	movs	r2, #32
   83016:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8301a:	e7f6      	b.n	8300a <udd_ctrl_underflow+0x1a>
   8301c:	400a4000 	.word	0x400a4000
   83020:	20000f4c 	.word	0x20000f4c
   83024:	00082f9d 	.word	0x00082f9d

00083028 <udd_ctrl_send_zlp_out>:

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83028:	4b0c      	ldr	r3, [pc, #48]	; (8305c <udd_ctrl_send_zlp_out+0x34>)
   8302a:	2204      	movs	r2, #4
   8302c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8302e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83032:	b672      	cpsid	i
   83034:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83038:	4b09      	ldr	r3, [pc, #36]	; (83060 <udd_ctrl_send_zlp_out+0x38>)
   8303a:	2200      	movs	r2, #0
   8303c:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   8303e:	4b09      	ldr	r3, [pc, #36]	; (83064 <udd_ctrl_send_zlp_out+0x3c>)
   83040:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83044:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   83048:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8304c:	b929      	cbnz	r1, 8305a <udd_ctrl_send_zlp_out+0x32>
		cpu_irq_enable();
   8304e:	4b04      	ldr	r3, [pc, #16]	; (83060 <udd_ctrl_send_zlp_out+0x38>)
   83050:	2201      	movs	r2, #1
   83052:	701a      	strb	r2, [r3, #0]
   83054:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83058:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   8305a:	4770      	bx	lr
   8305c:	20000f4c 	.word	0x20000f4c
   83060:	20000328 	.word	0x20000328
   83064:	400a4000 	.word	0x400a4000

00083068 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   83068:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   8306a:	4b02      	ldr	r3, [pc, #8]	; (83074 <udd_ctrl_endofrequest+0xc>)
   8306c:	691b      	ldr	r3, [r3, #16]
   8306e:	b103      	cbz	r3, 83072 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   83070:	4798      	blx	r3
	}
}
   83072:	bd08      	pop	{r3, pc}
   83074:	2000184c 	.word	0x2000184c

00083078 <udd_ctrl_in_sent>:
{
   83078:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8307a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8307e:	b672      	cpsid	i
   83080:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83084:	4a41      	ldr	r2, [pc, #260]	; (8318c <udd_ctrl_in_sent+0x114>)
   83086:	2100      	movs	r1, #0
   83088:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   8308a:	4a41      	ldr	r2, [pc, #260]	; (83190 <udd_ctrl_in_sent+0x118>)
   8308c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83090:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   83094:	b92b      	cbnz	r3, 830a2 <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   83096:	4b3d      	ldr	r3, [pc, #244]	; (8318c <udd_ctrl_in_sent+0x114>)
   83098:	2201      	movs	r2, #1
   8309a:	701a      	strb	r2, [r3, #0]
   8309c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   830a0:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   830a2:	4b3c      	ldr	r3, [pc, #240]	; (83194 <udd_ctrl_in_sent+0x11c>)
   830a4:	781b      	ldrb	r3, [r3, #0]
   830a6:	2b03      	cmp	r3, #3
   830a8:	d038      	beq.n	8311c <udd_ctrl_in_sent+0xa4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   830aa:	4b3b      	ldr	r3, [pc, #236]	; (83198 <udd_ctrl_in_sent+0x120>)
   830ac:	899c      	ldrh	r4, [r3, #12]
   830ae:	4b3b      	ldr	r3, [pc, #236]	; (8319c <udd_ctrl_in_sent+0x124>)
   830b0:	881b      	ldrh	r3, [r3, #0]
   830b2:	1ae4      	subs	r4, r4, r3
   830b4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   830b6:	b9ac      	cbnz	r4, 830e4 <udd_ctrl_in_sent+0x6c>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   830b8:	4a39      	ldr	r2, [pc, #228]	; (831a0 <udd_ctrl_in_sent+0x128>)
   830ba:	8811      	ldrh	r1, [r2, #0]
   830bc:	440b      	add	r3, r1
   830be:	b29b      	uxth	r3, r3
   830c0:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   830c2:	4a35      	ldr	r2, [pc, #212]	; (83198 <udd_ctrl_in_sent+0x120>)
   830c4:	88d2      	ldrh	r2, [r2, #6]
   830c6:	4293      	cmp	r3, r2
   830c8:	d02d      	beq.n	83126 <udd_ctrl_in_sent+0xae>
				|| b_shortpacket) {
   830ca:	4b36      	ldr	r3, [pc, #216]	; (831a4 <udd_ctrl_in_sent+0x12c>)
   830cc:	781b      	ldrb	r3, [r3, #0]
   830ce:	bb53      	cbnz	r3, 83126 <udd_ctrl_in_sent+0xae>
		if ((!udd_g_ctrlreq.over_under_run)
   830d0:	4b31      	ldr	r3, [pc, #196]	; (83198 <udd_ctrl_in_sent+0x120>)
   830d2:	695b      	ldr	r3, [r3, #20]
   830d4:	b133      	cbz	r3, 830e4 <udd_ctrl_in_sent+0x6c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   830d6:	4798      	blx	r3
   830d8:	b120      	cbz	r0, 830e4 <udd_ctrl_in_sent+0x6c>
			udd_ctrl_payload_buf_cnt = 0;
   830da:	4b30      	ldr	r3, [pc, #192]	; (8319c <udd_ctrl_in_sent+0x124>)
   830dc:	2200      	movs	r2, #0
   830de:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   830e0:	4b2d      	ldr	r3, [pc, #180]	; (83198 <udd_ctrl_in_sent+0x120>)
   830e2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   830e4:	2c3f      	cmp	r4, #63	; 0x3f
   830e6:	d921      	bls.n	8312c <udd_ctrl_in_sent+0xb4>
		b_shortpacket = false;
   830e8:	4b2e      	ldr	r3, [pc, #184]	; (831a4 <udd_ctrl_in_sent+0x12c>)
   830ea:	2200      	movs	r2, #0
   830ec:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   830ee:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   830f0:	4b29      	ldr	r3, [pc, #164]	; (83198 <udd_ctrl_in_sent+0x120>)
   830f2:	689b      	ldr	r3, [r3, #8]
   830f4:	4a29      	ldr	r2, [pc, #164]	; (8319c <udd_ctrl_in_sent+0x124>)
   830f6:	8812      	ldrh	r2, [r2, #0]
   830f8:	4413      	add	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   830fa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   830fe:	b672      	cpsid	i
   83100:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83104:	4a21      	ldr	r2, [pc, #132]	; (8318c <udd_ctrl_in_sent+0x114>)
   83106:	2100      	movs	r1, #0
   83108:	7011      	strb	r1, [r2, #0]
	if (Is_udd_out_received(0)) {
   8310a:	4a21      	ldr	r2, [pc, #132]	; (83190 <udd_ctrl_in_sent+0x118>)
   8310c:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83110:	f412 7f00 	tst.w	r2, #512	; 0x200
   83114:	d10e      	bne.n	83134 <udd_ctrl_in_sent+0xbc>
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83116:	4a24      	ldr	r2, [pc, #144]	; (831a8 <udd_ctrl_in_sent+0x130>)
	for (i = 0; i < nb_remain; i++) {
   83118:	2100      	movs	r1, #0
   8311a:	e01c      	b.n	83156 <udd_ctrl_in_sent+0xde>
		udd_ctrl_endofrequest();
   8311c:	4b23      	ldr	r3, [pc, #140]	; (831ac <udd_ctrl_in_sent+0x134>)
   8311e:	4798      	blx	r3
		udd_ctrl_init();
   83120:	4b23      	ldr	r3, [pc, #140]	; (831b0 <udd_ctrl_in_sent+0x138>)
   83122:	4798      	blx	r3
		return;
   83124:	e010      	b.n	83148 <udd_ctrl_in_sent+0xd0>
			udd_ctrl_send_zlp_out();
   83126:	4b23      	ldr	r3, [pc, #140]	; (831b4 <udd_ctrl_in_sent+0x13c>)
   83128:	4798      	blx	r3
			return;
   8312a:	e00d      	b.n	83148 <udd_ctrl_in_sent+0xd0>
		b_shortpacket = true;
   8312c:	4b1d      	ldr	r3, [pc, #116]	; (831a4 <udd_ctrl_in_sent+0x12c>)
   8312e:	2201      	movs	r2, #1
   83130:	701a      	strb	r2, [r3, #0]
   83132:	e7dd      	b.n	830f0 <udd_ctrl_in_sent+0x78>
	if (cpu_irq_is_enabled_flags(flags))
   83134:	b92d      	cbnz	r5, 83142 <udd_ctrl_in_sent+0xca>
		cpu_irq_enable();
   83136:	4b15      	ldr	r3, [pc, #84]	; (8318c <udd_ctrl_in_sent+0x114>)
   83138:	2201      	movs	r2, #1
   8313a:	701a      	strb	r2, [r3, #0]
   8313c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83140:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83142:	4b14      	ldr	r3, [pc, #80]	; (83194 <udd_ctrl_in_sent+0x11c>)
   83144:	2204      	movs	r2, #4
   83146:	701a      	strb	r2, [r3, #0]
}
   83148:	bd38      	pop	{r3, r4, r5, pc}
		*ptr_dest++ = *ptr_src++;
   8314a:	f813 0b01 	ldrb.w	r0, [r3], #1
   8314e:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   83152:	3101      	adds	r1, #1
   83154:	b2c9      	uxtb	r1, r1
   83156:	b288      	uxth	r0, r1
   83158:	42a0      	cmp	r0, r4
   8315a:	d3f6      	bcc.n	8314a <udd_ctrl_in_sent+0xd2>
	udd_ctrl_payload_buf_cnt += nb_remain;
   8315c:	4b0f      	ldr	r3, [pc, #60]	; (8319c <udd_ctrl_in_sent+0x124>)
   8315e:	881a      	ldrh	r2, [r3, #0]
   83160:	4414      	add	r4, r2
   83162:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   83164:	4b0a      	ldr	r3, [pc, #40]	; (83190 <udd_ctrl_in_sent+0x118>)
   83166:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8316a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8316e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   83172:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83176:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8317a:	2d00      	cmp	r5, #0
   8317c:	d1e4      	bne.n	83148 <udd_ctrl_in_sent+0xd0>
		cpu_irq_enable();
   8317e:	4b03      	ldr	r3, [pc, #12]	; (8318c <udd_ctrl_in_sent+0x114>)
   83180:	2201      	movs	r2, #1
   83182:	701a      	strb	r2, [r3, #0]
   83184:	f3bf 8f5f 	dmb	sy
   83188:	b662      	cpsie	i
}
   8318a:	e7dd      	b.n	83148 <udd_ctrl_in_sent+0xd0>
   8318c:	20000328 	.word	0x20000328
   83190:	400a4000 	.word	0x400a4000
   83194:	20000f4c 	.word	0x20000f4c
   83198:	2000184c 	.word	0x2000184c
   8319c:	20000f48 	.word	0x20000f48
   831a0:	20000f4a 	.word	0x20000f4a
   831a4:	20000f45 	.word	0x20000f45
   831a8:	20180000 	.word	0x20180000
   831ac:	00083069 	.word	0x00083069
   831b0:	00082f09 	.word	0x00082f09
   831b4:	00083029 	.word	0x00083029

000831b8 <udd_ctrl_out_received>:
{
   831b8:	b538      	push	{r3, r4, r5, lr}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   831ba:	4b46      	ldr	r3, [pc, #280]	; (832d4 <udd_ctrl_out_received+0x11c>)
   831bc:	781b      	ldrb	r3, [r3, #0]
   831be:	2b01      	cmp	r3, #1
   831c0:	d00b      	beq.n	831da <udd_ctrl_out_received+0x22>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   831c2:	2b02      	cmp	r3, #2
   831c4:	d001      	beq.n	831ca <udd_ctrl_out_received+0x12>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   831c6:	2b04      	cmp	r3, #4
   831c8:	d104      	bne.n	831d4 <udd_ctrl_out_received+0x1c>
			udd_ctrl_endofrequest();
   831ca:	4b43      	ldr	r3, [pc, #268]	; (832d8 <udd_ctrl_out_received+0x120>)
   831cc:	4798      	blx	r3
		udd_ctrl_init();
   831ce:	4b43      	ldr	r3, [pc, #268]	; (832dc <udd_ctrl_out_received+0x124>)
   831d0:	4798      	blx	r3
}
   831d2:	bd38      	pop	{r3, r4, r5, pc}
			udd_ctrl_stall_data();
   831d4:	4b42      	ldr	r3, [pc, #264]	; (832e0 <udd_ctrl_out_received+0x128>)
   831d6:	4798      	blx	r3
   831d8:	e7f9      	b.n	831ce <udd_ctrl_out_received+0x16>
	nb_data = udd_byte_count(0);
   831da:	4b42      	ldr	r3, [pc, #264]	; (832e4 <udd_ctrl_out_received+0x12c>)
   831dc:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
   831e0:	f3c4 540a 	ubfx	r4, r4, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   831e4:	4b40      	ldr	r3, [pc, #256]	; (832e8 <udd_ctrl_out_received+0x130>)
   831e6:	899b      	ldrh	r3, [r3, #12]
   831e8:	4a40      	ldr	r2, [pc, #256]	; (832ec <udd_ctrl_out_received+0x134>)
   831ea:	8815      	ldrh	r5, [r2, #0]
   831ec:	192a      	adds	r2, r5, r4
   831ee:	4293      	cmp	r3, r2
   831f0:	da01      	bge.n	831f6 <udd_ctrl_out_received+0x3e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   831f2:	1b5c      	subs	r4, r3, r5
   831f4:	b2a4      	uxth	r4, r4
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   831f6:	4b3c      	ldr	r3, [pc, #240]	; (832e8 <udd_ctrl_out_received+0x130>)
   831f8:	689b      	ldr	r3, [r3, #8]
   831fa:	442b      	add	r3, r5
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   831fc:	4a3c      	ldr	r2, [pc, #240]	; (832f0 <udd_ctrl_out_received+0x138>)
	for (i = 0; i < nb_data; i++) {
   831fe:	2100      	movs	r1, #0
   83200:	b288      	uxth	r0, r1
   83202:	42a0      	cmp	r0, r4
   83204:	d206      	bcs.n	83214 <udd_ctrl_out_received+0x5c>
		*ptr_dest++ = *ptr_src++;
   83206:	f812 0b01 	ldrb.w	r0, [r2], #1
   8320a:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < nb_data; i++) {
   8320e:	3101      	adds	r1, #1
   83210:	b2c9      	uxtb	r1, r1
   83212:	e7f5      	b.n	83200 <udd_ctrl_out_received+0x48>
	udd_ctrl_payload_buf_cnt += nb_data;
   83214:	4425      	add	r5, r4
   83216:	b2ad      	uxth	r5, r5
   83218:	4b34      	ldr	r3, [pc, #208]	; (832ec <udd_ctrl_out_received+0x134>)
   8321a:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8321c:	2c40      	cmp	r4, #64	; 0x40
   8321e:	d00d      	beq.n	8323c <udd_ctrl_out_received+0x84>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   83220:	4b31      	ldr	r3, [pc, #196]	; (832e8 <udd_ctrl_out_received+0x130>)
   83222:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   83224:	695b      	ldr	r3, [r3, #20]
   83226:	b10b      	cbz	r3, 8322c <udd_ctrl_out_received+0x74>
			if (!udd_g_ctrlreq.over_under_run()) {
   83228:	4798      	blx	r3
   8322a:	b368      	cbz	r0, 83288 <udd_ctrl_out_received+0xd0>
		udd_ack_out_received(0);
   8322c:	4b2d      	ldr	r3, [pc, #180]	; (832e4 <udd_ctrl_out_received+0x12c>)
   8322e:	f44f 7200 	mov.w	r2, #512	; 0x200
   83232:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   83236:	4b2f      	ldr	r3, [pc, #188]	; (832f4 <udd_ctrl_out_received+0x13c>)
   83238:	4798      	blx	r3
		return;
   8323a:	e7ca      	b.n	831d2 <udd_ctrl_out_received+0x1a>
			|| (udd_g_ctrlreq.req.wLength <=
   8323c:	4b2a      	ldr	r3, [pc, #168]	; (832e8 <udd_ctrl_out_received+0x130>)
   8323e:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   83240:	4b2d      	ldr	r3, [pc, #180]	; (832f8 <udd_ctrl_out_received+0x140>)
   83242:	881b      	ldrh	r3, [r3, #0]
   83244:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
   83246:	429a      	cmp	r2, r3
   83248:	ddea      	ble.n	83220 <udd_ctrl_out_received+0x68>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   8324a:	4b27      	ldr	r3, [pc, #156]	; (832e8 <udd_ctrl_out_received+0x130>)
   8324c:	899b      	ldrh	r3, [r3, #12]
   8324e:	429d      	cmp	r5, r3
   83250:	d022      	beq.n	83298 <udd_ctrl_out_received+0xe0>
	udd_ack_out_received(0);
   83252:	4b24      	ldr	r3, [pc, #144]	; (832e4 <udd_ctrl_out_received+0x12c>)
   83254:	f44f 7200 	mov.w	r2, #512	; 0x200
   83258:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   8325c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83260:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83264:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83268:	b672      	cpsid	i
   8326a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8326e:	4823      	ldr	r0, [pc, #140]	; (832fc <udd_ctrl_out_received+0x144>)
   83270:	2400      	movs	r4, #0
   83272:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   83274:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83278:	2900      	cmp	r1, #0
   8327a:	d1aa      	bne.n	831d2 <udd_ctrl_out_received+0x1a>
		cpu_irq_enable();
   8327c:	2201      	movs	r2, #1
   8327e:	7002      	strb	r2, [r0, #0]
   83280:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83284:	b662      	cpsie	i
}
   83286:	e7a4      	b.n	831d2 <udd_ctrl_out_received+0x1a>
				udd_ctrl_stall_data();
   83288:	4b15      	ldr	r3, [pc, #84]	; (832e0 <udd_ctrl_out_received+0x128>)
   8328a:	4798      	blx	r3
				udd_ack_out_received(0);
   8328c:	4b15      	ldr	r3, [pc, #84]	; (832e4 <udd_ctrl_out_received+0x12c>)
   8328e:	f44f 7200 	mov.w	r2, #512	; 0x200
   83292:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   83296:	e79c      	b.n	831d2 <udd_ctrl_out_received+0x1a>
		if (!udd_g_ctrlreq.over_under_run) {
   83298:	4b13      	ldr	r3, [pc, #76]	; (832e8 <udd_ctrl_out_received+0x130>)
   8329a:	695b      	ldr	r3, [r3, #20]
   8329c:	b153      	cbz	r3, 832b4 <udd_ctrl_out_received+0xfc>
		if (!udd_g_ctrlreq.over_under_run()) {
   8329e:	4798      	blx	r3
   832a0:	b180      	cbz	r0, 832c4 <udd_ctrl_out_received+0x10c>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   832a2:	4915      	ldr	r1, [pc, #84]	; (832f8 <udd_ctrl_out_received+0x140>)
   832a4:	4a11      	ldr	r2, [pc, #68]	; (832ec <udd_ctrl_out_received+0x134>)
   832a6:	880b      	ldrh	r3, [r1, #0]
   832a8:	8810      	ldrh	r0, [r2, #0]
   832aa:	4403      	add	r3, r0
   832ac:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   832ae:	2300      	movs	r3, #0
   832b0:	8013      	strh	r3, [r2, #0]
   832b2:	e7ce      	b.n	83252 <udd_ctrl_out_received+0x9a>
			udd_ctrl_stall_data();
   832b4:	4b0a      	ldr	r3, [pc, #40]	; (832e0 <udd_ctrl_out_received+0x128>)
   832b6:	4798      	blx	r3
			udd_ack_out_received(0);
   832b8:	4b0a      	ldr	r3, [pc, #40]	; (832e4 <udd_ctrl_out_received+0x12c>)
   832ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   832be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   832c2:	e786      	b.n	831d2 <udd_ctrl_out_received+0x1a>
			udd_ctrl_stall_data();
   832c4:	4b06      	ldr	r3, [pc, #24]	; (832e0 <udd_ctrl_out_received+0x128>)
   832c6:	4798      	blx	r3
			udd_ack_out_received(0);
   832c8:	4b06      	ldr	r3, [pc, #24]	; (832e4 <udd_ctrl_out_received+0x12c>)
   832ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   832ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   832d2:	e77e      	b.n	831d2 <udd_ctrl_out_received+0x1a>
   832d4:	20000f4c 	.word	0x20000f4c
   832d8:	00083069 	.word	0x00083069
   832dc:	00082f09 	.word	0x00082f09
   832e0:	00082f85 	.word	0x00082f85
   832e4:	400a4000 	.word	0x400a4000
   832e8:	2000184c 	.word	0x2000184c
   832ec:	20000f48 	.word	0x20000f48
   832f0:	20180000 	.word	0x20180000
   832f4:	00082f9d 	.word	0x00082f9d
   832f8:	20000f4a 	.word	0x20000f4a
   832fc:	20000328 	.word	0x20000328

00083300 <udd_ep_job_table_reset>:
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83300:	2300      	movs	r3, #0
   83302:	2b01      	cmp	r3, #1
   83304:	d813      	bhi.n	8332e <udd_ep_job_table_reset+0x2e>
{
   83306:	b410      	push	{r4}
		udd_ep_job[i].busy = false;
   83308:	4a09      	ldr	r2, [pc, #36]	; (83330 <udd_ep_job_table_reset+0x30>)
   8330a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8330e:	00c1      	lsls	r1, r0, #3
   83310:	4608      	mov	r0, r1
   83312:	4411      	add	r1, r2
   83314:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   83316:	4402      	add	r2, r0
   83318:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   8331c:	f36f 0182 	bfc	r1, #2, #1
   83320:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83322:	3301      	adds	r3, #1
   83324:	b2db      	uxtb	r3, r3
   83326:	2b01      	cmp	r3, #1
   83328:	d9ee      	bls.n	83308 <udd_ep_job_table_reset+0x8>
	}
}
   8332a:	bc10      	pop	{r4}
   8332c:	4770      	bx	lr
   8332e:	4770      	bx	lr
   83330:	20000f50 	.word	0x20000f50

00083334 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   83334:	b538      	push	{r3, r4, r5, lr}
   83336:	4603      	mov	r3, r0
   83338:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   8333a:	7d19      	ldrb	r1, [r3, #20]
   8333c:	f011 0f01 	tst.w	r1, #1
   83340:	d011      	beq.n	83366 <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   83342:	7d19      	ldrb	r1, [r3, #20]
   83344:	f36f 0100 	bfc	r1, #0, #1
   83348:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   8334a:	681c      	ldr	r4, [r3, #0]
   8334c:	b15c      	cbz	r4, 83366 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   8334e:	f102 0108 	add.w	r1, r2, #8
   83352:	0149      	lsls	r1, r1, #5
   83354:	4d04      	ldr	r5, [pc, #16]	; (83368 <udd_ep_finish_job+0x34>)
   83356:	5869      	ldr	r1, [r5, r1]
   83358:	f011 0f08 	tst.w	r1, #8
   8335c:	d001      	beq.n	83362 <udd_ep_finish_job+0x2e>
		ep_num |= USB_EP_DIR_IN;
   8335e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83362:	6899      	ldr	r1, [r3, #8]
   83364:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83366:	bd38      	pop	{r3, r4, r5, pc}
   83368:	400a4000 	.word	0x400a4000

0008336c <udd_ep_job_table_kill>:
{
   8336c:	b510      	push	{r4, lr}
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8336e:	2400      	movs	r4, #0
   83370:	e00b      	b.n	8338a <udd_ep_job_table_kill+0x1e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   83372:	4623      	mov	r3, r4
   83374:	3401      	adds	r4, #1
   83376:	b2e4      	uxtb	r4, r4
   83378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8337c:	00d8      	lsls	r0, r3, #3
   8337e:	4622      	mov	r2, r4
   83380:	2101      	movs	r1, #1
   83382:	4b03      	ldr	r3, [pc, #12]	; (83390 <udd_ep_job_table_kill+0x24>)
   83384:	4418      	add	r0, r3
   83386:	4b03      	ldr	r3, [pc, #12]	; (83394 <udd_ep_job_table_kill+0x28>)
   83388:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8338a:	2c01      	cmp	r4, #1
   8338c:	d9f1      	bls.n	83372 <udd_ep_job_table_kill+0x6>
}
   8338e:	bd10      	pop	{r4, pc}
   83390:	20000f50 	.word	0x20000f50
   83394:	00083335 	.word	0x00083335

00083398 <udd_ep_abort_job>:
{
   83398:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   8339a:	f000 020f 	and.w	r2, r0, #15
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8339e:	1e50      	subs	r0, r2, #1
   833a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   833a4:	2101      	movs	r1, #1
   833a6:	4b03      	ldr	r3, [pc, #12]	; (833b4 <udd_ep_abort_job+0x1c>)
   833a8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   833ac:	4b02      	ldr	r3, [pc, #8]	; (833b8 <udd_ep_abort_job+0x20>)
   833ae:	4798      	blx	r3
}
   833b0:	bd08      	pop	{r3, pc}
   833b2:	bf00      	nop
   833b4:	20000f50 	.word	0x20000f50
   833b8:	00083335 	.word	0x00083335

000833bc <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   833bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   833be:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   833c0:	1e43      	subs	r3, r0, #1
   833c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   833c6:	4858      	ldr	r0, [pc, #352]	; (83528 <udd_ep_trans_done+0x16c>)
   833c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3

	if (!ptr_job->busy) {
   833cc:	7d01      	ldrb	r1, [r0, #20]
   833ce:	f011 0f01 	tst.w	r1, #1
   833d2:	d073      	beq.n	834bc <udd_ep_trans_done+0x100>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   833d4:	68c4      	ldr	r4, [r0, #12]
   833d6:	6881      	ldr	r1, [r0, #8]
   833d8:	428c      	cmp	r4, r1
   833da:	d05b      	beq.n	83494 <udd_ep_trans_done+0xd8>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   833dc:	1b09      	subs	r1, r1, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   833de:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   833e2:	d81f      	bhi.n	83424 <udd_ep_trans_done+0x68>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   833e4:	040d      	lsls	r5, r1, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   833e6:	f102 0608 	add.w	r6, r2, #8
   833ea:	0176      	lsls	r6, r6, #5
   833ec:	4f4f      	ldr	r7, [pc, #316]	; (8352c <udd_ep_trans_done+0x170>)
   833ee:	59be      	ldr	r6, [r7, r6]
   833f0:	f016 0f08 	tst.w	r6, #8
   833f4:	d01a      	beq.n	8342c <udd_ep_trans_done+0x70>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   833f6:	f102 0608 	add.w	r6, r2, #8
   833fa:	0176      	lsls	r6, r6, #5
   833fc:	59bf      	ldr	r7, [r7, r6]
   833fe:	f007 0707 	and.w	r7, r7, #7
   83402:	2608      	movs	r6, #8
   83404:	40be      	lsls	r6, r7
   83406:	3e01      	subs	r6, #1
   83408:	420e      	tst	r6, r1
   8340a:	d01a      	beq.n	83442 <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8340c:	f045 0508 	orr.w	r5, r5, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83410:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   83414:	4f44      	ldr	r7, [pc, #272]	; (83528 <udd_ep_trans_done+0x16c>)
   83416:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   8341a:	7d37      	ldrb	r7, [r6, #20]
   8341c:	f36f 0741 	bfc	r7, #1, #1
   83420:	7537      	strb	r7, [r6, #20]
   83422:	e00e      	b.n	83442 <udd_ep_trans_done+0x86>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83424:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   83428:	2500      	movs	r5, #0
   8342a:	e7dc      	b.n	833e6 <udd_ep_trans_done+0x2a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   8342c:	f102 0608 	add.w	r6, r2, #8
   83430:	0176      	lsls	r6, r6, #5
   83432:	4f3e      	ldr	r7, [pc, #248]	; (8352c <udd_ep_trans_done+0x170>)
   83434:	59be      	ldr	r6, [r7, r6]
   83436:	f3c6 1601 	ubfx	r6, r6, #4, #2
   8343a:	2e01      	cmp	r6, #1
   8343c:	d03f      	beq.n	834be <udd_ep_trans_done+0x102>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   8343e:	f045 0514 	orr.w	r5, r5, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83442:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   83446:	4f38      	ldr	r7, [pc, #224]	; (83528 <udd_ep_trans_done+0x16c>)
   83448:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   8344c:	6876      	ldr	r6, [r6, #4]
   8344e:	4426      	add	r6, r4
   83450:	4c37      	ldr	r4, [pc, #220]	; (83530 <udd_ep_trans_done+0x174>)
   83452:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   83456:	6066      	str	r6, [r4, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   83458:	f045 0521 	orr.w	r5, r5, #33	; 0x21
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8345c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   83460:	b672      	cpsid	i
   83462:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83466:	4f33      	ldr	r7, [pc, #204]	; (83534 <udd_ep_trans_done+0x178>)
   83468:	f04f 0c00 	mov.w	ip, #0
   8346c:	f887 c000 	strb.w	ip, [r7]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   83470:	68e7      	ldr	r7, [r4, #12]
   83472:	f017 0f10 	tst.w	r7, #16
   83476:	d02d      	beq.n	834d4 <udd_ep_trans_done+0x118>
	if (cpu_irq_is_enabled_flags(flags))
   83478:	b92e      	cbnz	r6, 83486 <udd_ep_trans_done+0xca>
		cpu_irq_enable();
   8347a:	492e      	ldr	r1, [pc, #184]	; (83534 <udd_ep_trans_done+0x178>)
   8347c:	2401      	movs	r4, #1
   8347e:	700c      	strb	r4, [r1, #0]
   83480:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83484:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83486:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8348a:	4c27      	ldr	r4, [pc, #156]	; (83528 <udd_ep_trans_done+0x16c>)
   8348c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   83490:	68cc      	ldr	r4, [r1, #12]
   83492:	608c      	str	r4, [r1, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   83494:	f102 0108 	add.w	r1, r2, #8
   83498:	0149      	lsls	r1, r1, #5
   8349a:	4c24      	ldr	r4, [pc, #144]	; (8352c <udd_ep_trans_done+0x170>)
   8349c:	5861      	ldr	r1, [r4, r1]
   8349e:	f011 0f08 	tst.w	r1, #8
   834a2:	d008      	beq.n	834b6 <udd_ep_trans_done+0xfa>
		if (ptr_job->b_shortpacket) {
   834a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   834a8:	491f      	ldr	r1, [pc, #124]	; (83528 <udd_ep_trans_done+0x16c>)
   834aa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   834ae:	7d1b      	ldrb	r3, [r3, #20]
   834b0:	f013 0f02 	tst.w	r3, #2
   834b4:	d129      	bne.n	8350a <udd_ep_trans_done+0x14e>
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   834b6:	2100      	movs	r1, #0
   834b8:	4b1f      	ldr	r3, [pc, #124]	; (83538 <udd_ep_trans_done+0x17c>)
   834ba:	4798      	blx	r3
}
   834bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   834be:	f102 0608 	add.w	r6, r2, #8
   834c2:	0176      	lsls	r6, r6, #5
   834c4:	59bf      	ldr	r7, [r7, r6]
   834c6:	f007 0707 	and.w	r7, r7, #7
   834ca:	2608      	movs	r6, #8
   834cc:	40be      	lsls	r6, r7
   834ce:	428e      	cmp	r6, r1
   834d0:	d3b7      	bcc.n	83442 <udd_ep_trans_done+0x86>
   834d2:	e7b4      	b.n	8343e <udd_ep_trans_done+0x82>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   834d4:	60a5      	str	r5, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   834d6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   834da:	4a13      	ldr	r2, [pc, #76]	; (83528 <udd_ep_trans_done+0x16c>)
   834dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   834e0:	68d0      	ldr	r0, [r2, #12]
   834e2:	4408      	add	r0, r1
   834e4:	60d0      	str	r0, [r2, #12]
			ptr_job->buf_load = next_trans;
   834e6:	6111      	str	r1, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   834e8:	4810      	ldr	r0, [pc, #64]	; (8352c <udd_ep_trans_done+0x170>)
   834ea:	6902      	ldr	r2, [r0, #16]
   834ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   834f0:	fa01 f303 	lsl.w	r3, r1, r3
   834f4:	4313      	orrs	r3, r2
   834f6:	6103      	str	r3, [r0, #16]
	if (cpu_irq_is_enabled_flags(flags))
   834f8:	2e00      	cmp	r6, #0
   834fa:	d1df      	bne.n	834bc <udd_ep_trans_done+0x100>
		cpu_irq_enable();
   834fc:	4b0d      	ldr	r3, [pc, #52]	; (83534 <udd_ep_trans_done+0x178>)
   834fe:	2201      	movs	r2, #1
   83500:	701a      	strb	r2, [r3, #0]
   83502:	f3bf 8f5f 	dmb	sy
   83506:	b662      	cpsie	i
			return;
   83508:	e7d8      	b.n	834bc <udd_ep_trans_done+0x100>
			udd_enable_tx_pkt_ready_interrupt(ep);
   8350a:	f102 0108 	add.w	r1, r2, #8
   8350e:	eb04 1141 	add.w	r1, r4, r1, lsl #5
   83512:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83516:	6048      	str	r0, [r1, #4]
			udd_enable_endpoint_interrupt(ep);
   83518:	6921      	ldr	r1, [r4, #16]
   8351a:	f44f 7080 	mov.w	r0, #256	; 0x100
   8351e:	fa00 f202 	lsl.w	r2, r0, r2
   83522:	4311      	orrs	r1, r2
   83524:	6121      	str	r1, [r4, #16]
			return;
   83526:	e7c9      	b.n	834bc <udd_ep_trans_done+0x100>
   83528:	20000f50 	.word	0x20000f50
   8352c:	400a4000 	.word	0x400a4000
   83530:	400a4300 	.word	0x400a4300
   83534:	20000328 	.word	0x20000328
   83538:	00083335 	.word	0x00083335

0008353c <udd_ep_interrupt>:
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8353c:	2201      	movs	r2, #1
   8353e:	2a02      	cmp	r2, #2
   83540:	f200 809f 	bhi.w	83682 <udd_ep_interrupt+0x146>
{
   83544:	b538      	push	{r3, r4, r5, lr}
   83546:	e035      	b.n	835b4 <udd_ep_interrupt+0x78>

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   83548:	484f      	ldr	r0, [pc, #316]	; (83688 <udd_ep_interrupt+0x14c>)
   8354a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   8354e:	68c4      	ldr	r4, [r0, #12]
   83550:	f014 0f01 	tst.w	r4, #1
   83554:	f040 8093 	bne.w	8367e <udd_ep_interrupt+0x142>
					& UDPHS_DMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   83558:	4d4c      	ldr	r5, [pc, #304]	; (8368c <udd_ep_interrupt+0x150>)
   8355a:	692c      	ldr	r4, [r5, #16]
   8355c:	ea24 0303 	bic.w	r3, r4, r3
   83560:	612b      	str	r3, [r5, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   83562:	68c3      	ldr	r3, [r0, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   83564:	0c1b      	lsrs	r3, r3, #16
   83566:	d00c      	beq.n	83582 <udd_ep_interrupt+0x46>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   83568:	4c49      	ldr	r4, [pc, #292]	; (83690 <udd_ep_interrupt+0x154>)
   8356a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   8356e:	00e8      	lsls	r0, r5, #3
   83570:	4420      	add	r0, r4
   83572:	68c5      	ldr	r5, [r0, #12]
   83574:	1aeb      	subs	r3, r5, r3
   83576:	60c3      	str	r3, [r0, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   83578:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   8357c:	00c8      	lsls	r0, r1, #3
   8357e:	4404      	add	r4, r0
   83580:	60a3      	str	r3, [r4, #8]
			}
			udd_ep_trans_done(ep);
   83582:	4610      	mov	r0, r2
   83584:	4b43      	ldr	r3, [pc, #268]	; (83694 <udd_ep_interrupt+0x158>)
   83586:	4798      	blx	r3
			return true;
   83588:	2001      	movs	r0, #1
   8358a:	e077      	b.n	8367c <udd_ep_interrupt+0x140>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   8358c:	0163      	lsls	r3, r4, #5
   8358e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   83592:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   83596:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8359a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   8359e:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
				udd_ep_finish_job(ptr_job, false, ep);
   835a2:	2100      	movs	r1, #0
   835a4:	4b3c      	ldr	r3, [pc, #240]	; (83698 <udd_ep_interrupt+0x15c>)
   835a6:	4798      	blx	r3
				return true;
   835a8:	2001      	movs	r0, #1
   835aa:	e067      	b.n	8367c <udd_ep_interrupt+0x140>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   835ac:	3201      	adds	r2, #1
   835ae:	b2d2      	uxtb	r2, r2
   835b0:	2a02      	cmp	r2, #2
   835b2:	d862      	bhi.n	8367a <udd_ep_interrupt+0x13e>
		ptr_job = &udd_ep_job[ep - 1];
   835b4:	4614      	mov	r4, r2
   835b6:	1e51      	subs	r1, r2, #1
   835b8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   835bc:	00d8      	lsls	r0, r3, #3
   835be:	4b34      	ldr	r3, [pc, #208]	; (83690 <udd_ep_interrupt+0x154>)
   835c0:	4418      	add	r0, r3
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   835c2:	4b32      	ldr	r3, [pc, #200]	; (8368c <udd_ep_interrupt+0x150>)
   835c4:	691d      	ldr	r5, [r3, #16]
   835c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   835ca:	408b      	lsls	r3, r1
   835cc:	421d      	tst	r5, r3
   835ce:	d003      	beq.n	835d8 <udd_ep_interrupt+0x9c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   835d0:	4d2e      	ldr	r5, [pc, #184]	; (8368c <udd_ep_interrupt+0x150>)
   835d2:	696d      	ldr	r5, [r5, #20]
   835d4:	422b      	tst	r3, r5
   835d6:	d1b7      	bne.n	83548 <udd_ep_interrupt+0xc>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   835d8:	4b2c      	ldr	r3, [pc, #176]	; (8368c <udd_ep_interrupt+0x150>)
   835da:	691d      	ldr	r5, [r3, #16]
   835dc:	f44f 7380 	mov.w	r3, #256	; 0x100
   835e0:	40a3      	lsls	r3, r4
   835e2:	421d      	tst	r5, r3
   835e4:	d0e2      	beq.n	835ac <udd_ep_interrupt+0x70>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   835e6:	0165      	lsls	r5, r4, #5
   835e8:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
   835ec:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   835f0:	f8d5 510c 	ldr.w	r5, [r5, #268]	; 0x10c
   835f4:	f415 6f00 	tst.w	r5, #2048	; 0x800
   835f8:	d009      	beq.n	8360e <udd_ep_interrupt+0xd2>
					&& !Is_udd_tx_pkt_ready(ep)) {
   835fa:	0165      	lsls	r5, r4, #5
   835fc:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
   83600:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   83604:	f8d5 511c 	ldr.w	r5, [r5, #284]	; 0x11c
   83608:	f415 6f00 	tst.w	r5, #2048	; 0x800
   8360c:	d0be      	beq.n	8358c <udd_ep_interrupt+0x50>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8360e:	0160      	lsls	r0, r4, #5
   83610:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   83614:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   83618:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   8361c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   83620:	d0c4      	beq.n	835ac <udd_ep_interrupt+0x70>
					&& (0 == udd_nb_busy_bank(ep))) {
   83622:	0160      	lsls	r0, r4, #5
   83624:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   83628:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   8362c:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   83630:	f410 2f40 	tst.w	r0, #786432	; 0xc0000
   83634:	d1ba      	bne.n	835ac <udd_ep_interrupt+0x70>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   83636:	4a15      	ldr	r2, [pc, #84]	; (8368c <udd_ep_interrupt+0x150>)
   83638:	eb02 1444 	add.w	r4, r2, r4, lsl #5
   8363c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83640:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   83644:	6910      	ldr	r0, [r2, #16]
   83646:	ea20 0303 	bic.w	r3, r0, r3
   8364a:	6113      	str	r3, [r2, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8364c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   83650:	00ca      	lsls	r2, r1, #3
   83652:	4b0f      	ldr	r3, [pc, #60]	; (83690 <udd_ep_interrupt+0x154>)
   83654:	4413      	add	r3, r2
   83656:	7d1a      	ldrb	r2, [r3, #20]
   83658:	f36f 0282 	bfc	r2, #2, #1
   8365c:	751a      	strb	r2, [r3, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   8365e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   83662:	f023 0302 	bic.w	r3, r3, #2
   83666:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   8366a:	2320      	movs	r3, #32
   8366c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   83670:	2340      	movs	r3, #64	; 0x40
   83672:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   83676:	2001      	movs	r0, #1
   83678:	e000      	b.n	8367c <udd_ep_interrupt+0x140>
			}
		}
	}
	return false;
   8367a:	2000      	movs	r0, #0
}
   8367c:	bd38      	pop	{r3, r4, r5, pc}
				return true; // Ignore EOT_STA interrupt
   8367e:	2001      	movs	r0, #1
   83680:	e7fc      	b.n	8367c <udd_ep_interrupt+0x140>
	return false;
   83682:	2000      	movs	r0, #0
}
   83684:	4770      	bx	lr
   83686:	bf00      	nop
   83688:	400a4300 	.word	0x400a4300
   8368c:	400a4000 	.word	0x400a4000
   83690:	20000f50 	.word	0x20000f50
   83694:	000833bd 	.word	0x000833bd
   83698:	00083335 	.word	0x00083335

0008369c <udd_ctrl_setup_received>:
{
   8369c:	b510      	push	{r4, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8369e:	4b33      	ldr	r3, [pc, #204]	; (8376c <udd_ctrl_setup_received+0xd0>)
   836a0:	781b      	ldrb	r3, [r3, #0]
   836a2:	b94b      	cbnz	r3, 836b8 <udd_ctrl_setup_received+0x1c>
	if (8 != udd_byte_count(0)) {
   836a4:	4b32      	ldr	r3, [pc, #200]	; (83770 <udd_ctrl_setup_received+0xd4>)
   836a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   836aa:	f3c3 530a 	ubfx	r3, r3, #20, #11
   836ae:	2b08      	cmp	r3, #8
   836b0:	d107      	bne.n	836c2 <udd_ctrl_setup_received+0x26>
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   836b2:	4a30      	ldr	r2, [pc, #192]	; (83774 <udd_ctrl_setup_received+0xd8>)
	for (i = 0; i < 8; i++) {
   836b4:	2300      	movs	r3, #0
   836b6:	e012      	b.n	836de <udd_ctrl_setup_received+0x42>
		udd_ctrl_endofrequest();
   836b8:	4b2f      	ldr	r3, [pc, #188]	; (83778 <udd_ctrl_setup_received+0xdc>)
   836ba:	4798      	blx	r3
		udd_ctrl_init();
   836bc:	4b2f      	ldr	r3, [pc, #188]	; (8377c <udd_ctrl_setup_received+0xe0>)
   836be:	4798      	blx	r3
   836c0:	e7f0      	b.n	836a4 <udd_ctrl_setup_received+0x8>
		udd_ctrl_stall_data();
   836c2:	4b2f      	ldr	r3, [pc, #188]	; (83780 <udd_ctrl_setup_received+0xe4>)
   836c4:	4798      	blx	r3
		udd_ack_setup_received(0);
   836c6:	4b2a      	ldr	r3, [pc, #168]	; (83770 <udd_ctrl_setup_received+0xd4>)
   836c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   836cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
   836d0:	bd10      	pop	{r4, pc}
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   836d2:	f812 0b01 	ldrb.w	r0, [r2], #1
   836d6:	492b      	ldr	r1, [pc, #172]	; (83784 <udd_ctrl_setup_received+0xe8>)
   836d8:	5458      	strb	r0, [r3, r1]
	for (i = 0; i < 8; i++) {
   836da:	3301      	adds	r3, #1
   836dc:	b2db      	uxtb	r3, r3
   836de:	2b07      	cmp	r3, #7
   836e0:	d9f7      	bls.n	836d2 <udd_ctrl_setup_received+0x36>
	if (udc_process_setup() == false) {
   836e2:	4b29      	ldr	r3, [pc, #164]	; (83788 <udd_ctrl_setup_received+0xec>)
   836e4:	4798      	blx	r3
   836e6:	b358      	cbz	r0, 83740 <udd_ctrl_setup_received+0xa4>
	udd_ack_setup_received(0);
   836e8:	4b21      	ldr	r3, [pc, #132]	; (83770 <udd_ctrl_setup_received+0xd4>)
   836ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   836ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   836f2:	4b24      	ldr	r3, [pc, #144]	; (83784 <udd_ctrl_setup_received+0xe8>)
   836f4:	f993 3000 	ldrsb.w	r3, [r3]
   836f8:	2b00      	cmp	r3, #0
   836fa:	db29      	blt.n	83750 <udd_ctrl_setup_received+0xb4>
		if (0 == udd_g_ctrlreq.req.wLength) {
   836fc:	4b21      	ldr	r3, [pc, #132]	; (83784 <udd_ctrl_setup_received+0xe8>)
   836fe:	88db      	ldrh	r3, [r3, #6]
   83700:	2b00      	cmp	r3, #0
   83702:	d030      	beq.n	83766 <udd_ctrl_setup_received+0xca>
		udd_ctrl_prev_payload_buf_cnt = 0;
   83704:	2300      	movs	r3, #0
   83706:	4a21      	ldr	r2, [pc, #132]	; (8378c <udd_ctrl_setup_received+0xf0>)
   83708:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8370a:	4a21      	ldr	r2, [pc, #132]	; (83790 <udd_ctrl_setup_received+0xf4>)
   8370c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8370e:	4a17      	ldr	r2, [pc, #92]	; (8376c <udd_ctrl_setup_received+0xd0>)
   83710:	2101      	movs	r1, #1
   83712:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   83714:	4a16      	ldr	r2, [pc, #88]	; (83770 <udd_ctrl_setup_received+0xd4>)
   83716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8371a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8371e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   83722:	b672      	cpsid	i
   83724:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83728:	4c1a      	ldr	r4, [pc, #104]	; (83794 <udd_ctrl_setup_received+0xf8>)
   8372a:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   8372c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83730:	2800      	cmp	r0, #0
   83732:	d1cd      	bne.n	836d0 <udd_ctrl_setup_received+0x34>
		cpu_irq_enable();
   83734:	2201      	movs	r2, #1
   83736:	7022      	strb	r2, [r4, #0]
   83738:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8373c:	b662      	cpsie	i
}
   8373e:	e7c7      	b.n	836d0 <udd_ctrl_setup_received+0x34>
		udd_ctrl_stall_data();
   83740:	4b0f      	ldr	r3, [pc, #60]	; (83780 <udd_ctrl_setup_received+0xe4>)
   83742:	4798      	blx	r3
		udd_ack_setup_received(0);
   83744:	4b0a      	ldr	r3, [pc, #40]	; (83770 <udd_ctrl_setup_received+0xd4>)
   83746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8374a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   8374e:	e7bf      	b.n	836d0 <udd_ctrl_setup_received+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
   83750:	2300      	movs	r3, #0
   83752:	4a0e      	ldr	r2, [pc, #56]	; (8378c <udd_ctrl_setup_received+0xf0>)
   83754:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   83756:	4a0e      	ldr	r2, [pc, #56]	; (83790 <udd_ctrl_setup_received+0xf4>)
   83758:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8375a:	4b04      	ldr	r3, [pc, #16]	; (8376c <udd_ctrl_setup_received+0xd0>)
   8375c:	2202      	movs	r2, #2
   8375e:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   83760:	4b0d      	ldr	r3, [pc, #52]	; (83798 <udd_ctrl_setup_received+0xfc>)
   83762:	4798      	blx	r3
   83764:	e7b4      	b.n	836d0 <udd_ctrl_setup_received+0x34>
			udd_ctrl_send_zlp_in();
   83766:	4b0d      	ldr	r3, [pc, #52]	; (8379c <udd_ctrl_setup_received+0x100>)
   83768:	4798      	blx	r3
			return;
   8376a:	e7b1      	b.n	836d0 <udd_ctrl_setup_received+0x34>
   8376c:	20000f4c 	.word	0x20000f4c
   83770:	400a4000 	.word	0x400a4000
   83774:	20180000 	.word	0x20180000
   83778:	00083069 	.word	0x00083069
   8377c:	00082f09 	.word	0x00082f09
   83780:	00082f85 	.word	0x00082f85
   83784:	2000184c 	.word	0x2000184c
   83788:	00081f99 	.word	0x00081f99
   8378c:	20000f4a 	.word	0x20000f4a
   83790:	20000f48 	.word	0x20000f48
   83794:	20000328 	.word	0x20000328
   83798:	00083079 	.word	0x00083079
   8379c:	00082f9d 	.word	0x00082f9d

000837a0 <udd_ctrl_interrupt>:
{
   837a0:	b508      	push	{r3, lr}
	uint32_t status = udd_get_endpoint_status(0);
   837a2:	4a27      	ldr	r2, [pc, #156]	; (83840 <udd_ctrl_interrupt+0xa0>)
   837a4:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   837a8:	6952      	ldr	r2, [r2, #20]
   837aa:	f412 7f80 	tst.w	r2, #256	; 0x100
   837ae:	d045      	beq.n	8383c <udd_ctrl_interrupt+0x9c>
	udd_disable_nak_in_interrupt(0);
   837b0:	4a23      	ldr	r2, [pc, #140]	; (83840 <udd_ctrl_interrupt+0xa0>)
   837b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   837b6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   837ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   837be:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   837c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   837c6:	d11b      	bne.n	83800 <udd_ctrl_interrupt+0x60>
	if (Is_udd_endpoint_status_in_sent(status)
   837c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   837cc:	d005      	beq.n	837da <udd_ctrl_interrupt+0x3a>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   837ce:	4a1c      	ldr	r2, [pc, #112]	; (83840 <udd_ctrl_interrupt+0xa0>)
   837d0:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   837d4:	f412 6f80 	tst.w	r2, #1024	; 0x400
   837d8:	d116      	bne.n	83808 <udd_ctrl_interrupt+0x68>
	if (Is_udd_endpoint_status_out_received(status)) {
   837da:	f413 7f00 	tst.w	r3, #512	; 0x200
   837de:	d117      	bne.n	83810 <udd_ctrl_interrupt+0x70>
	if (Is_udd_endpoint_status_stall(status)) {
   837e0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   837e4:	d004      	beq.n	837f0 <udd_ctrl_interrupt+0x50>
		udd_ack_stall(0);
   837e6:	4a16      	ldr	r2, [pc, #88]	; (83840 <udd_ctrl_interrupt+0xa0>)
   837e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   837ec:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   837f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   837f4:	d110      	bne.n	83818 <udd_ctrl_interrupt+0x78>
	if (Is_udd_endpoint_status_nak_in(status)) {
   837f6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   837fa:	d116      	bne.n	8382a <udd_ctrl_interrupt+0x8a>
	return false;
   837fc:	2000      	movs	r0, #0
   837fe:	e01e      	b.n	8383e <udd_ctrl_interrupt+0x9e>
		udd_ctrl_setup_received();
   83800:	4b10      	ldr	r3, [pc, #64]	; (83844 <udd_ctrl_interrupt+0xa4>)
   83802:	4798      	blx	r3
		return true;
   83804:	2001      	movs	r0, #1
   83806:	e01a      	b.n	8383e <udd_ctrl_interrupt+0x9e>
		udd_ctrl_in_sent();
   83808:	4b0f      	ldr	r3, [pc, #60]	; (83848 <udd_ctrl_interrupt+0xa8>)
   8380a:	4798      	blx	r3
		return true;
   8380c:	2001      	movs	r0, #1
   8380e:	e016      	b.n	8383e <udd_ctrl_interrupt+0x9e>
		udd_ctrl_out_received();
   83810:	4b0e      	ldr	r3, [pc, #56]	; (8384c <udd_ctrl_interrupt+0xac>)
   83812:	4798      	blx	r3
		return true;
   83814:	2001      	movs	r0, #1
   83816:	e012      	b.n	8383e <udd_ctrl_interrupt+0x9e>
		udd_ack_nak_out(0);
   83818:	4b09      	ldr	r3, [pc, #36]	; (83840 <udd_ctrl_interrupt+0xa0>)
   8381a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8381e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   83822:	4b0b      	ldr	r3, [pc, #44]	; (83850 <udd_ctrl_interrupt+0xb0>)
   83824:	4798      	blx	r3
		return true;
   83826:	2001      	movs	r0, #1
   83828:	e009      	b.n	8383e <udd_ctrl_interrupt+0x9e>
		udd_ack_nak_in(0);
   8382a:	4b05      	ldr	r3, [pc, #20]	; (83840 <udd_ctrl_interrupt+0xa0>)
   8382c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83830:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   83834:	4b07      	ldr	r3, [pc, #28]	; (83854 <udd_ctrl_interrupt+0xb4>)
   83836:	4798      	blx	r3
		return true;
   83838:	2001      	movs	r0, #1
   8383a:	e000      	b.n	8383e <udd_ctrl_interrupt+0x9e>
		return false; // No interrupt events on control endpoint
   8383c:	2000      	movs	r0, #0
}
   8383e:	bd08      	pop	{r3, pc}
   83840:	400a4000 	.word	0x400a4000
   83844:	0008369d 	.word	0x0008369d
   83848:	00083079 	.word	0x00083079
   8384c:	000831b9 	.word	0x000831b9
   83850:	00082f5d 	.word	0x00082f5d
   83854:	00082ff1 	.word	0x00082ff1

00083858 <UDPHS_Handler>:
{
   83858:	b510      	push	{r4, lr}
	udd_enable_periph_ck();
   8385a:	201d      	movs	r0, #29
   8385c:	4b49      	ldr	r3, [pc, #292]	; (83984 <UDPHS_Handler+0x12c>)
   8385e:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   83860:	4b49      	ldr	r3, [pc, #292]	; (83988 <UDPHS_Handler+0x130>)
   83862:	4798      	blx	r3
   83864:	b920      	cbnz	r0, 83870 <UDPHS_Handler+0x18>
   83866:	4b49      	ldr	r3, [pc, #292]	; (8398c <UDPHS_Handler+0x134>)
   83868:	695b      	ldr	r3, [r3, #20]
   8386a:	f013 0f02 	tst.w	r3, #2
   8386e:	d040      	beq.n	838f2 <UDPHS_Handler+0x9a>
	if (Is_udd_sof()) {
   83870:	4b46      	ldr	r3, [pc, #280]	; (8398c <UDPHS_Handler+0x134>)
   83872:	695b      	ldr	r3, [r3, #20]
   83874:	f013 0f08 	tst.w	r3, #8
   83878:	d142      	bne.n	83900 <UDPHS_Handler+0xa8>
	if (Is_udd_msof()) {
   8387a:	4b44      	ldr	r3, [pc, #272]	; (8398c <UDPHS_Handler+0x134>)
   8387c:	695b      	ldr	r3, [r3, #20]
   8387e:	f013 0f04 	tst.w	r3, #4
   83882:	d14a      	bne.n	8391a <UDPHS_Handler+0xc2>
	if (udd_ctrl_interrupt()) {
   83884:	4b42      	ldr	r3, [pc, #264]	; (83990 <UDPHS_Handler+0x138>)
   83886:	4798      	blx	r3
   83888:	2800      	cmp	r0, #0
   8388a:	d142      	bne.n	83912 <UDPHS_Handler+0xba>
	if (udd_ep_interrupt()) {
   8388c:	4b41      	ldr	r3, [pc, #260]	; (83994 <UDPHS_Handler+0x13c>)
   8388e:	4798      	blx	r3
   83890:	2800      	cmp	r0, #0
   83892:	d13e      	bne.n	83912 <UDPHS_Handler+0xba>
	if (Is_udd_reset()) {
   83894:	4b3d      	ldr	r3, [pc, #244]	; (8398c <UDPHS_Handler+0x134>)
   83896:	695b      	ldr	r3, [r3, #20]
   83898:	f013 0f10 	tst.w	r3, #16
   8389c:	d143      	bne.n	83926 <UDPHS_Handler+0xce>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8389e:	4b3b      	ldr	r3, [pc, #236]	; (8398c <UDPHS_Handler+0x134>)
   838a0:	691b      	ldr	r3, [r3, #16]
   838a2:	f013 0f02 	tst.w	r3, #2
   838a6:	d004      	beq.n	838b2 <UDPHS_Handler+0x5a>
   838a8:	4b38      	ldr	r3, [pc, #224]	; (8398c <UDPHS_Handler+0x134>)
   838aa:	695b      	ldr	r3, [r3, #20]
   838ac:	f013 0f02 	tst.w	r3, #2
   838b0:	d151      	bne.n	83956 <UDPHS_Handler+0xfe>
	if (Is_udd_wake_up()) {
   838b2:	4b36      	ldr	r3, [pc, #216]	; (8398c <UDPHS_Handler+0x134>)
   838b4:	695b      	ldr	r3, [r3, #20]
   838b6:	f013 0f20 	tst.w	r3, #32
   838ba:	d02a      	beq.n	83912 <UDPHS_Handler+0xba>
		udd_sleep_mode(true); // Enter in IDLE mode
   838bc:	2001      	movs	r0, #1
   838be:	4b36      	ldr	r3, [pc, #216]	; (83998 <UDPHS_Handler+0x140>)
   838c0:	4798      	blx	r3
		udd_ack_suspend();
   838c2:	4b32      	ldr	r3, [pc, #200]	; (8398c <UDPHS_Handler+0x134>)
   838c4:	2202      	movs	r2, #2
   838c6:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   838c8:	2220      	movs	r2, #32
   838ca:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   838cc:	691a      	ldr	r2, [r3, #16]
   838ce:	f022 0220 	bic.w	r2, r2, #32
   838d2:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   838d4:	691a      	ldr	r2, [r3, #16]
   838d6:	f042 0202 	orr.w	r2, r2, #2
   838da:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   838dc:	691a      	ldr	r2, [r3, #16]
   838de:	f042 0208 	orr.w	r2, r2, #8
   838e2:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   838e4:	691a      	ldr	r2, [r3, #16]
   838e6:	f042 0204 	orr.w	r2, r2, #4
   838ea:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   838ec:	4b2b      	ldr	r3, [pc, #172]	; (8399c <UDPHS_Handler+0x144>)
   838ee:	4798      	blx	r3
		goto udd_interrupt_end;
   838f0:	e00f      	b.n	83912 <UDPHS_Handler+0xba>
  __ASM volatile ("cpsid i");
   838f2:	b672      	cpsid	i
   838f4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   838f8:	4b29      	ldr	r3, [pc, #164]	; (839a0 <UDPHS_Handler+0x148>)
   838fa:	2200      	movs	r2, #0
   838fc:	701a      	strb	r2, [r3, #0]
		return;
   838fe:	e008      	b.n	83912 <UDPHS_Handler+0xba>
		udd_ack_sof();
   83900:	4b22      	ldr	r3, [pc, #136]	; (8398c <UDPHS_Handler+0x134>)
   83902:	2208      	movs	r2, #8
   83904:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   83906:	695b      	ldr	r3, [r3, #20]
   83908:	f013 0f01 	tst.w	r3, #1
   8390c:	d002      	beq.n	83914 <UDPHS_Handler+0xbc>
		UDC_SOF_EVENT();
   8390e:	4b25      	ldr	r3, [pc, #148]	; (839a4 <UDPHS_Handler+0x14c>)
   83910:	4798      	blx	r3
}
   83912:	bd10      	pop	{r4, pc}
			udc_sof_notify();
   83914:	4b24      	ldr	r3, [pc, #144]	; (839a8 <UDPHS_Handler+0x150>)
   83916:	4798      	blx	r3
   83918:	e7f9      	b.n	8390e <UDPHS_Handler+0xb6>
		udd_ack_msof();
   8391a:	4b1c      	ldr	r3, [pc, #112]	; (8398c <UDPHS_Handler+0x134>)
   8391c:	2204      	movs	r2, #4
   8391e:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   83920:	4b21      	ldr	r3, [pc, #132]	; (839a8 <UDPHS_Handler+0x150>)
   83922:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   83924:	e7f5      	b.n	83912 <UDPHS_Handler+0xba>
		udd_ack_reset();
   83926:	4c19      	ldr	r4, [pc, #100]	; (8398c <UDPHS_Handler+0x134>)
   83928:	2310      	movs	r3, #16
   8392a:	61a3      	str	r3, [r4, #24]
		udd_ep_job_table_kill();
   8392c:	4b1f      	ldr	r3, [pc, #124]	; (839ac <UDPHS_Handler+0x154>)
   8392e:	4798      	blx	r3
		udc_reset();
   83930:	4b1f      	ldr	r3, [pc, #124]	; (839b0 <UDPHS_Handler+0x158>)
   83932:	4798      	blx	r3
		udd_reset_ep_ctrl();
   83934:	4b1f      	ldr	r3, [pc, #124]	; (839b4 <UDPHS_Handler+0x15c>)
   83936:	4798      	blx	r3
		udd_ctrl_init();
   83938:	4b1f      	ldr	r3, [pc, #124]	; (839b8 <UDPHS_Handler+0x160>)
   8393a:	4798      	blx	r3
		udd_enable_sof_interrupt();
   8393c:	6923      	ldr	r3, [r4, #16]
   8393e:	f043 0308 	orr.w	r3, r3, #8
   83942:	6123      	str	r3, [r4, #16]
		udd_enable_msof_interrupt();
   83944:	6923      	ldr	r3, [r4, #16]
   83946:	f043 0304 	orr.w	r3, r3, #4
   8394a:	6123      	str	r3, [r4, #16]
		udd_enable_suspend_interrupt();
   8394c:	6923      	ldr	r3, [r4, #16]
   8394e:	f043 0302 	orr.w	r3, r3, #2
   83952:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
   83954:	e7dd      	b.n	83912 <UDPHS_Handler+0xba>
		udd_ack_wake_up();
   83956:	4b0d      	ldr	r3, [pc, #52]	; (8398c <UDPHS_Handler+0x134>)
   83958:	2220      	movs	r2, #32
   8395a:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   8395c:	691a      	ldr	r2, [r3, #16]
   8395e:	f022 0202 	bic.w	r2, r2, #2
   83962:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   83964:	691a      	ldr	r2, [r3, #16]
   83966:	f042 0220 	orr.w	r2, r2, #32
   8396a:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   8396c:	2202      	movs	r2, #2
   8396e:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   83970:	201d      	movs	r0, #29
   83972:	4b12      	ldr	r3, [pc, #72]	; (839bc <UDPHS_Handler+0x164>)
   83974:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   83976:	4b12      	ldr	r3, [pc, #72]	; (839c0 <UDPHS_Handler+0x168>)
   83978:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   8397a:	2000      	movs	r0, #0
   8397c:	4b06      	ldr	r3, [pc, #24]	; (83998 <UDPHS_Handler+0x140>)
   8397e:	4798      	blx	r3
		goto udd_interrupt_end;
   83980:	e7c7      	b.n	83912 <UDPHS_Handler+0xba>
   83982:	bf00      	nop
   83984:	000826b5 	.word	0x000826b5
   83988:	00082775 	.word	0x00082775
   8398c:	400a4000 	.word	0x400a4000
   83990:	000837a1 	.word	0x000837a1
   83994:	0008353d 	.word	0x0008353d
   83998:	00082e2d 	.word	0x00082e2d
   8399c:	00080cd9 	.word	0x00080cd9
   839a0:	20000328 	.word	0x20000328
   839a4:	00080ce5 	.word	0x00080ce5
   839a8:	00081f61 	.word	0x00081f61
   839ac:	0008336d 	.word	0x0008336d
   839b0:	00081cc5 	.word	0x00081cc5
   839b4:	00082e9d 	.word	0x00082e9d
   839b8:	00082f09 	.word	0x00082f09
   839bc:	000826e9 	.word	0x000826e9
   839c0:	00080ccd 	.word	0x00080ccd

000839c4 <udd_attach>:
{
   839c4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   839c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   839ca:	b672      	cpsid	i
   839cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   839d0:	4b1d      	ldr	r3, [pc, #116]	; (83a48 <udd_attach+0x84>)
   839d2:	2200      	movs	r2, #0
   839d4:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   839d6:	2001      	movs	r0, #1
   839d8:	4b1c      	ldr	r3, [pc, #112]	; (83a4c <udd_attach+0x88>)
   839da:	4798      	blx	r3
	udd_enable_periph_ck();
   839dc:	201d      	movs	r0, #29
   839de:	4b1c      	ldr	r3, [pc, #112]	; (83a50 <udd_attach+0x8c>)
   839e0:	4798      	blx	r3
	udd_attach_device();
   839e2:	4b1c      	ldr	r3, [pc, #112]	; (83a54 <udd_attach+0x90>)
   839e4:	681a      	ldr	r2, [r3, #0]
   839e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   839ea:	601a      	str	r2, [r3, #0]
   839ec:	681a      	ldr	r2, [r3, #0]
   839ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   839f2:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   839f4:	691a      	ldr	r2, [r3, #16]
   839f6:	f042 0210 	orr.w	r2, r2, #16
   839fa:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   839fc:	691a      	ldr	r2, [r3, #16]
   839fe:	f042 0202 	orr.w	r2, r2, #2
   83a02:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   83a04:	691a      	ldr	r2, [r3, #16]
   83a06:	f042 0220 	orr.w	r2, r2, #32
   83a0a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   83a0c:	691a      	ldr	r2, [r3, #16]
   83a0e:	f042 0208 	orr.w	r2, r2, #8
   83a12:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   83a14:	691a      	ldr	r2, [r3, #16]
   83a16:	f042 0204 	orr.w	r2, r2, #4
   83a1a:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   83a1c:	2208      	movs	r2, #8
   83a1e:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   83a20:	2204      	movs	r2, #4
   83a22:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   83a24:	2210      	movs	r2, #16
   83a26:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   83a28:	2202      	movs	r2, #2
   83a2a:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   83a2c:	2220      	movs	r2, #32
   83a2e:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   83a30:	201d      	movs	r0, #29
   83a32:	4b09      	ldr	r3, [pc, #36]	; (83a58 <udd_attach+0x94>)
   83a34:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83a36:	b92c      	cbnz	r4, 83a44 <udd_attach+0x80>
		cpu_irq_enable();
   83a38:	4b03      	ldr	r3, [pc, #12]	; (83a48 <udd_attach+0x84>)
   83a3a:	2201      	movs	r2, #1
   83a3c:	701a      	strb	r2, [r3, #0]
   83a3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83a42:	b662      	cpsie	i
}
   83a44:	bd10      	pop	{r4, pc}
   83a46:	bf00      	nop
   83a48:	20000328 	.word	0x20000328
   83a4c:	00082e2d 	.word	0x00082e2d
   83a50:	000826b5 	.word	0x000826b5
   83a54:	400a4000 	.word	0x400a4000
   83a58:	000826e9 	.word	0x000826e9

00083a5c <udd_enable>:
{
   83a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sysclk_enable_usb();
   83a5e:	4b20      	ldr	r3, [pc, #128]	; (83ae0 <udd_enable+0x84>)
   83a60:	4798      	blx	r3
	udd_enable_periph_ck();
   83a62:	201d      	movs	r0, #29
   83a64:	4b1f      	ldr	r3, [pc, #124]	; (83ae4 <udd_enable+0x88>)
   83a66:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83a68:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   83a6c:	b672      	cpsid	i
   83a6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83a72:	4f1d      	ldr	r7, [pc, #116]	; (83ae8 <udd_enable+0x8c>)
   83a74:	2500      	movs	r5, #0
   83a76:	703d      	strb	r5, [r7, #0]
	udd_enable_periph();
   83a78:	4c1c      	ldr	r4, [pc, #112]	; (83aec <udd_enable+0x90>)
   83a7a:	6823      	ldr	r3, [r4, #0]
   83a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   83a80:	6023      	str	r3, [r4, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83a82:	4b1b      	ldr	r3, [pc, #108]	; (83af0 <udd_enable+0x94>)
   83a84:	2250      	movs	r2, #80	; 0x50
   83a86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83a8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83a8e:	601a      	str	r2, [r3, #0]
	udd_ep_job_table_reset();
   83a90:	4b18      	ldr	r3, [pc, #96]	; (83af4 <udd_enable+0x98>)
   83a92:	4798      	blx	r3
	udd_high_speed_enable();
   83a94:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   83a98:	f023 0303 	bic.w	r3, r3, #3
   83a9c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   83aa0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83aa4:	4b14      	ldr	r3, [pc, #80]	; (83af8 <udd_enable+0x9c>)
   83aa6:	4798      	blx	r3
	udd_b_idle = false;
   83aa8:	4b14      	ldr	r3, [pc, #80]	; (83afc <udd_enable+0xa0>)
   83aaa:	701d      	strb	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83aac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83ab0:	b672      	cpsid	i
   83ab2:	f3bf 8f5f 	dmb	sy
   83ab6:	703d      	strb	r5, [r7, #0]
   83ab8:	4a11      	ldr	r2, [pc, #68]	; (83b00 <udd_enable+0xa4>)
   83aba:	78d3      	ldrb	r3, [r2, #3]
   83abc:	3301      	adds	r3, #1
   83abe:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   83ac0:	b921      	cbnz	r1, 83acc <udd_enable+0x70>
		cpu_irq_enable();
   83ac2:	2201      	movs	r2, #1
   83ac4:	703a      	strb	r2, [r7, #0]
   83ac6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83aca:	b662      	cpsie	i
	udd_attach();
   83acc:	4b0d      	ldr	r3, [pc, #52]	; (83b04 <udd_enable+0xa8>)
   83ace:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83ad0:	b92e      	cbnz	r6, 83ade <udd_enable+0x82>
		cpu_irq_enable();
   83ad2:	4b05      	ldr	r3, [pc, #20]	; (83ae8 <udd_enable+0x8c>)
   83ad4:	2201      	movs	r2, #1
   83ad6:	701a      	strb	r2, [r3, #0]
   83ad8:	f3bf 8f5f 	dmb	sy
   83adc:	b662      	cpsie	i
}
   83ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ae0:	00082961 	.word	0x00082961
   83ae4:	000826b5 	.word	0x000826b5
   83ae8:	20000328 	.word	0x20000328
   83aec:	400a4000 	.word	0x400a4000
   83af0:	e000e100 	.word	0xe000e100
   83af4:	00083301 	.word	0x00083301
   83af8:	0008272d 	.word	0x0008272d
   83afc:	20000f46 	.word	0x20000f46
   83b00:	20001844 	.word	0x20001844
   83b04:	000839c5 	.word	0x000839c5

00083b08 <udd_detach>:
{
   83b08:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   83b0a:	201d      	movs	r0, #29
   83b0c:	4b08      	ldr	r3, [pc, #32]	; (83b30 <udd_detach+0x28>)
   83b0e:	4798      	blx	r3
	udd_detach_device();
   83b10:	4b08      	ldr	r3, [pc, #32]	; (83b34 <udd_detach+0x2c>)
   83b12:	681a      	ldr	r2, [r3, #0]
   83b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   83b18:	601a      	str	r2, [r3, #0]
   83b1a:	681a      	ldr	r2, [r3, #0]
   83b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83b20:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   83b22:	201d      	movs	r0, #29
   83b24:	4b04      	ldr	r3, [pc, #16]	; (83b38 <udd_detach+0x30>)
   83b26:	4798      	blx	r3
	udd_sleep_mode(false);
   83b28:	2000      	movs	r0, #0
   83b2a:	4b04      	ldr	r3, [pc, #16]	; (83b3c <udd_detach+0x34>)
   83b2c:	4798      	blx	r3
}
   83b2e:	bd08      	pop	{r3, pc}
   83b30:	000826b5 	.word	0x000826b5
   83b34:	400a4000 	.word	0x400a4000
   83b38:	000826e9 	.word	0x000826e9
   83b3c:	00082e2d 	.word	0x00082e2d

00083b40 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   83b40:	4b02      	ldr	r3, [pc, #8]	; (83b4c <udd_is_high_speed+0xc>)
   83b42:	6958      	ldr	r0, [r3, #20]
   83b44:	f000 0001 	and.w	r0, r0, #1
}
   83b48:	4770      	bx	lr
   83b4a:	bf00      	nop
   83b4c:	400a4000 	.word	0x400a4000

00083b50 <udd_set_address>:
	udd_disable_address();
   83b50:	4b08      	ldr	r3, [pc, #32]	; (83b74 <udd_set_address+0x24>)
   83b52:	681a      	ldr	r2, [r3, #0]
   83b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   83b58:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   83b5a:	681a      	ldr	r2, [r3, #0]
   83b5c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83b60:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83b64:	4302      	orrs	r2, r0
   83b66:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   83b68:	681a      	ldr	r2, [r3, #0]
   83b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83b6e:	601a      	str	r2, [r3, #0]
}
   83b70:	4770      	bx	lr
   83b72:	bf00      	nop
   83b74:	400a4000 	.word	0x400a4000

00083b78 <udd_getaddress>:
	return udd_get_configured_address();
   83b78:	4b02      	ldr	r3, [pc, #8]	; (83b84 <udd_getaddress+0xc>)
   83b7a:	6818      	ldr	r0, [r3, #0]
}
   83b7c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83b80:	4770      	bx	lr
   83b82:	bf00      	nop
   83b84:	400a4000 	.word	0x400a4000

00083b88 <udd_get_frame_number>:
	return udd_frame_number();
   83b88:	4b02      	ldr	r3, [pc, #8]	; (83b94 <udd_get_frame_number+0xc>)
   83b8a:	6858      	ldr	r0, [r3, #4]
}
   83b8c:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   83b90:	4770      	bx	lr
   83b92:	bf00      	nop
   83b94:	400a4000 	.word	0x400a4000

00083b98 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   83b98:	4b01      	ldr	r3, [pc, #4]	; (83ba0 <udd_set_setup_payload+0x8>)
   83b9a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   83b9c:	8199      	strh	r1, [r3, #12]
}
   83b9e:	4770      	bx	lr
   83ba0:	2000184c 	.word	0x2000184c

00083ba4 <udd_ep_free>:
{
   83ba4:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83ba6:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   83baa:	2c02      	cmp	r4, #2
   83bac:	d900      	bls.n	83bb0 <udd_ep_free+0xc>
}
   83bae:	bd10      	pop	{r4, pc}
	udd_disable_endpoint(ep_index);
   83bb0:	4a0c      	ldr	r2, [pc, #48]	; (83be4 <udd_ep_free+0x40>)
   83bb2:	eb02 1344 	add.w	r3, r2, r4, lsl #5
   83bb6:	2101      	movs	r1, #1
   83bb8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   83bbc:	f104 0308 	add.w	r3, r4, #8
   83bc0:	015b      	lsls	r3, r3, #5
   83bc2:	58d1      	ldr	r1, [r2, r3]
   83bc4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   83bc8:	50d1      	str	r1, [r2, r3]
	udd_ep_abort_job(ep);
   83bca:	4b07      	ldr	r3, [pc, #28]	; (83be8 <udd_ep_free+0x44>)
   83bcc:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   83bce:	3c01      	subs	r4, #1
   83bd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   83bd4:	4b05      	ldr	r3, [pc, #20]	; (83bec <udd_ep_free+0x48>)
   83bd6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   83bda:	7d23      	ldrb	r3, [r4, #20]
   83bdc:	f36f 0382 	bfc	r3, #2, #1
   83be0:	7523      	strb	r3, [r4, #20]
   83be2:	e7e4      	b.n	83bae <udd_ep_free+0xa>
   83be4:	400a4000 	.word	0x400a4000
   83be8:	00083399 	.word	0x00083399
   83bec:	20000f50 	.word	0x20000f50

00083bf0 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83bf0:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   83bf4:	1e43      	subs	r3, r0, #1
	return (Is_udd_endpoint_stall_requested(ep_index)
   83bf6:	0140      	lsls	r0, r0, #5
   83bf8:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   83bfc:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   83c00:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
			|| ptr_job->stall_requested);
   83c04:	f012 0f20 	tst.w	r2, #32
   83c08:	d10a      	bne.n	83c20 <udd_ep_is_halted+0x30>
   83c0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83c0e:	4a06      	ldr	r2, [pc, #24]	; (83c28 <udd_ep_is_halted+0x38>)
   83c10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83c14:	7d1b      	ldrb	r3, [r3, #20]
   83c16:	f013 0f04 	tst.w	r3, #4
   83c1a:	d003      	beq.n	83c24 <udd_ep_is_halted+0x34>
   83c1c:	2001      	movs	r0, #1
   83c1e:	4770      	bx	lr
   83c20:	2001      	movs	r0, #1
   83c22:	4770      	bx	lr
   83c24:	2000      	movs	r0, #0
}
   83c26:	4770      	bx	lr
   83c28:	20000f50 	.word	0x20000f50

00083c2c <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83c2c:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   83c30:	2b02      	cmp	r3, #2
   83c32:	d851      	bhi.n	83cd8 <udd_ep_set_halt+0xac>
{
   83c34:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   83c36:	1e5c      	subs	r4, r3, #1
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   83c38:	015a      	lsls	r2, r3, #5
   83c3a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83c3e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83c42:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83c46:	f012 0f20 	tst.w	r2, #32
   83c4a:	d147      	bne.n	83cdc <udd_ep_set_halt+0xb0>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   83c4c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   83c50:	4926      	ldr	r1, [pc, #152]	; (83cec <udd_ep_set_halt+0xc0>)
   83c52:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83c56:	7d12      	ldrb	r2, [r2, #20]
   83c58:	f012 0f04 	tst.w	r2, #4
   83c5c:	d141      	bne.n	83ce2 <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   83c5e:	f012 0f01 	tst.w	r2, #1
   83c62:	d140      	bne.n	83ce6 <udd_ep_set_halt+0xba>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83c64:	f010 0f80 	tst.w	r0, #128	; 0x80
   83c68:	d113      	bne.n	83c92 <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   83c6a:	015b      	lsls	r3, r3, #5
   83c6c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   83c70:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   83c74:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83c78:	f022 0202 	bic.w	r2, r2, #2
   83c7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   83c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83c84:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   83c88:	2220      	movs	r2, #32
   83c8a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   83c8e:	2001      	movs	r0, #1
   83c90:	e025      	b.n	83cde <udd_ep_set_halt+0xb2>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83c92:	015a      	lsls	r2, r3, #5
   83c94:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83c98:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83c9c:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83ca0:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   83ca4:	d0e1      	beq.n	83c6a <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   83ca6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   83caa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   83cae:	7d22      	ldrb	r2, [r4, #20]
   83cb0:	f042 0204 	orr.w	r2, r2, #4
   83cb4:	7522      	strb	r2, [r4, #20]
			udd_enable_bank_interrupt(ep_index);
   83cb6:	4a0e      	ldr	r2, [pc, #56]	; (83cf0 <udd_ep_set_halt+0xc4>)
   83cb8:	f103 0108 	add.w	r1, r3, #8
   83cbc:	eb02 1141 	add.w	r1, r2, r1, lsl #5
   83cc0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83cc4:	6048      	str	r0, [r1, #4]
			udd_enable_endpoint_interrupt(ep_index);
   83cc6:	6911      	ldr	r1, [r2, #16]
   83cc8:	f44f 7080 	mov.w	r0, #256	; 0x100
   83ccc:	fa00 f303 	lsl.w	r3, r0, r3
   83cd0:	430b      	orrs	r3, r1
   83cd2:	6113      	str	r3, [r2, #16]
			return true;
   83cd4:	2001      	movs	r0, #1
   83cd6:	e002      	b.n	83cde <udd_ep_set_halt+0xb2>
		return false;
   83cd8:	2000      	movs	r0, #0
}
   83cda:	4770      	bx	lr
		return true; // Already STALL
   83cdc:	2001      	movs	r0, #1
}
   83cde:	bc10      	pop	{r4}
   83ce0:	4770      	bx	lr
		return true; // Already STALL
   83ce2:	2001      	movs	r0, #1
   83ce4:	e7fb      	b.n	83cde <udd_ep_set_halt+0xb2>
		return false; // Job on going, stall impossible
   83ce6:	2000      	movs	r0, #0
   83ce8:	e7f9      	b.n	83cde <udd_ep_set_halt+0xb2>
   83cea:	bf00      	nop
   83cec:	20000f50 	.word	0x20000f50
   83cf0:	400a4000 	.word	0x400a4000

00083cf4 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   83cf4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   83cf8:	2802      	cmp	r0, #2
   83cfa:	d86c      	bhi.n	83dd6 <udd_ep_clear_halt+0xe2>
{
   83cfc:	b510      	push	{r4, lr}
	ptr_job = &udd_ep_job[ep - 1];
   83cfe:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
   83d00:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   83d04:	4a36      	ldr	r2, [pc, #216]	; (83de0 <udd_ep_clear_halt+0xec>)
   83d06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   83d0a:	7d12      	ldrb	r2, [r2, #20]
   83d0c:	f012 0f04 	tst.w	r2, #4
   83d10:	d017      	beq.n	83d42 <udd_ep_clear_halt+0x4e>
		ptr_job->stall_requested = false;
   83d12:	460a      	mov	r2, r1
   83d14:	4932      	ldr	r1, [pc, #200]	; (83de0 <udd_ep_clear_halt+0xec>)
   83d16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83d1a:	7d11      	ldrb	r1, [r2, #20]
   83d1c:	f36f 0182 	bfc	r1, #2, #1
   83d20:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep);
   83d22:	4a30      	ldr	r2, [pc, #192]	; (83de4 <udd_ep_clear_halt+0xf0>)
   83d24:	eb02 1140 	add.w	r1, r2, r0, lsl #5
   83d28:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   83d2c:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   83d30:	6911      	ldr	r1, [r2, #16]
   83d32:	f44f 7480 	mov.w	r4, #256	; 0x100
   83d36:	4084      	lsls	r4, r0
   83d38:	ea21 0104 	bic.w	r1, r1, r4
   83d3c:	6111      	str	r1, [r2, #16]
		b_stall_cleared = true;
   83d3e:	2101      	movs	r1, #1
   83d40:	e000      	b.n	83d44 <udd_ep_clear_halt+0x50>
	bool b_stall_cleared = false;
   83d42:	2100      	movs	r1, #0
	if (Is_udd_endpoint_stall_requested(ep)) {
   83d44:	0142      	lsls	r2, r0, #5
   83d46:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83d4a:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83d4e:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83d52:	f012 0f20 	tst.w	r2, #32
   83d56:	d03a      	beq.n	83dce <udd_ep_clear_halt+0xda>
		if (Is_udd_stall(ep)) {
   83d58:	0142      	lsls	r2, r0, #5
   83d5a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83d5e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83d62:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83d66:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   83d6a:	d00b      	beq.n	83d84 <udd_ep_clear_halt+0x90>
			udd_ack_stall(ep);
   83d6c:	0142      	lsls	r2, r0, #5
   83d6e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83d72:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   83d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   83d7a:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
			udd_reset_data_toggle(ep);
   83d7e:	2140      	movs	r1, #64	; 0x40
   83d80:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   83d84:	4a17      	ldr	r2, [pc, #92]	; (83de4 <udd_ep_clear_halt+0xf0>)
   83d86:	eb02 1140 	add.w	r1, r2, r0, lsl #5
   83d8a:	2420      	movs	r4, #32
   83d8c:	f8c1 4118 	str.w	r4, [r1, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   83d90:	3008      	adds	r0, #8
   83d92:	eb02 1040 	add.w	r0, r2, r0, lsl #5
   83d96:	6842      	ldr	r2, [r0, #4]
   83d98:	f042 0202 	orr.w	r2, r2, #2
   83d9c:	6042      	str	r2, [r0, #4]
		if (ptr_job->busy == true) {
   83d9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   83da2:	490f      	ldr	r1, [pc, #60]	; (83de0 <udd_ep_clear_halt+0xec>)
   83da4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83da8:	7d12      	ldrb	r2, [r2, #20]
   83daa:	f012 0f01 	tst.w	r2, #1
   83dae:	d014      	beq.n	83dda <udd_ep_clear_halt+0xe6>
			ptr_job->busy = false;
   83db0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   83db4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83db8:	7d10      	ldrb	r0, [r2, #20]
   83dba:	f36f 0000 	bfc	r0, #0, #1
   83dbe:	7510      	strb	r0, [r2, #20]
			ptr_job->call_nohalt();
   83dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83dc4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   83dc8:	4798      	blx	r3
	return true;
   83dca:	2001      	movs	r0, #1
   83dcc:	e006      	b.n	83ddc <udd_ep_clear_halt+0xe8>
	if (b_stall_cleared) {
   83dce:	2900      	cmp	r1, #0
   83dd0:	d1e5      	bne.n	83d9e <udd_ep_clear_halt+0xaa>
	return true;
   83dd2:	2001      	movs	r0, #1
   83dd4:	e002      	b.n	83ddc <udd_ep_clear_halt+0xe8>
		return false;
   83dd6:	2000      	movs	r0, #0
}
   83dd8:	4770      	bx	lr
	return true;
   83dda:	2001      	movs	r0, #1
}
   83ddc:	bd10      	pop	{r4, pc}
   83dde:	bf00      	nop
   83de0:	20000f50 	.word	0x20000f50
   83de4:	400a4000 	.word	0x400a4000

00083de8 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   83de8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   83dec:	2802      	cmp	r0, #2
   83dee:	d869      	bhi.n	83ec4 <udd_ep_run+0xdc>
{
   83df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ptr_job = &udd_ep_job[ep - 1];
   83df2:	1e45      	subs	r5, r0, #1
	if ((!Is_udd_endpoint_enabled(ep))
   83df4:	0144      	lsls	r4, r0, #5
   83df6:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   83dfa:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   83dfe:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   83e02:	f014 0f01 	tst.w	r4, #1
   83e06:	d05f      	beq.n	83ec8 <udd_ep_run+0xe0>
			|| Is_udd_endpoint_stall_requested(ep)
   83e08:	0144      	lsls	r4, r0, #5
   83e0a:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   83e0e:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   83e12:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   83e16:	f014 0f20 	tst.w	r4, #32
   83e1a:	d157      	bne.n	83ecc <udd_ep_run+0xe4>
			|| ptr_job->stall_requested) {
   83e1c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   83e20:	4e2c      	ldr	r6, [pc, #176]	; (83ed4 <udd_ep_run+0xec>)
   83e22:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   83e26:	7d24      	ldrb	r4, [r4, #20]
   83e28:	f014 0f04 	tst.w	r4, #4
   83e2c:	d150      	bne.n	83ed0 <udd_ep_run+0xe8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83e2e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   83e32:	b672      	cpsid	i
   83e34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83e38:	4c27      	ldr	r4, [pc, #156]	; (83ed8 <udd_ep_run+0xf0>)
   83e3a:	2600      	movs	r6, #0
   83e3c:	7026      	strb	r6, [r4, #0]
	if (ptr_job->busy == true) {
   83e3e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   83e42:	4e24      	ldr	r6, [pc, #144]	; (83ed4 <udd_ep_run+0xec>)
   83e44:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   83e48:	7d24      	ldrb	r4, [r4, #20]
   83e4a:	f014 0f01 	tst.w	r4, #1
   83e4e:	d120      	bne.n	83e92 <udd_ep_run+0xaa>
	ptr_job->busy = true;
   83e50:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   83e54:	4e1f      	ldr	r6, [pc, #124]	; (83ed4 <udd_ep_run+0xec>)
   83e56:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   83e5a:	7d26      	ldrb	r6, [r4, #20]
   83e5c:	f046 0601 	orr.w	r6, r6, #1
   83e60:	7526      	strb	r6, [r4, #20]
	if (cpu_irq_is_enabled_flags(flags))
   83e62:	b92f      	cbnz	r7, 83e70 <udd_ep_run+0x88>
		cpu_irq_enable();
   83e64:	4c1c      	ldr	r4, [pc, #112]	; (83ed8 <udd_ep_run+0xf0>)
   83e66:	2601      	movs	r6, #1
   83e68:	7026      	strb	r6, [r4, #0]
   83e6a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83e6e:	b662      	cpsie	i
	ptr_job->buf = buf;
   83e70:	4e18      	ldr	r6, [pc, #96]	; (83ed4 <udd_ep_run+0xec>)
   83e72:	eb05 0745 	add.w	r7, r5, r5, lsl #1
   83e76:	eb06 04c7 	add.w	r4, r6, r7, lsl #3
   83e7a:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   83e7c:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   83e7e:	2200      	movs	r2, #0
   83e80:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   83e82:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   83e84:	9a06      	ldr	r2, [sp, #24]
   83e86:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83e8a:	b959      	cbnz	r1, 83ea4 <udd_ep_run+0xbc>
   83e8c:	b9c3      	cbnz	r3, 83ec0 <udd_ep_run+0xd8>
   83e8e:	2201      	movs	r2, #1
   83e90:	e009      	b.n	83ea6 <udd_ep_run+0xbe>
	if (cpu_irq_is_enabled_flags(flags))
   83e92:	b92f      	cbnz	r7, 83ea0 <udd_ep_run+0xb8>
		cpu_irq_enable();
   83e94:	4b10      	ldr	r3, [pc, #64]	; (83ed8 <udd_ep_run+0xf0>)
   83e96:	2201      	movs	r2, #1
   83e98:	701a      	strb	r2, [r3, #0]
   83e9a:	f3bf 8f5f 	dmb	sy
   83e9e:	b662      	cpsie	i
		return false; // Job already on going
   83ea0:	2000      	movs	r0, #0
   83ea2:	e012      	b.n	83eca <udd_ep_run+0xe2>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83ea4:	2201      	movs	r2, #1
   83ea6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   83eaa:	4b0a      	ldr	r3, [pc, #40]	; (83ed4 <udd_ep_run+0xec>)
   83eac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   83eb0:	7d2b      	ldrb	r3, [r5, #20]
   83eb2:	f362 0341 	bfi	r3, r2, #1, #1
   83eb6:	752b      	strb	r3, [r5, #20]
	udd_ep_trans_done(ep);
   83eb8:	4b08      	ldr	r3, [pc, #32]	; (83edc <udd_ep_run+0xf4>)
   83eba:	4798      	blx	r3
	return true;
   83ebc:	2001      	movs	r0, #1
   83ebe:	e004      	b.n	83eca <udd_ep_run+0xe2>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83ec0:	2200      	movs	r2, #0
   83ec2:	e7f0      	b.n	83ea6 <udd_ep_run+0xbe>
		return false;
   83ec4:	2000      	movs	r0, #0
}
   83ec6:	4770      	bx	lr
		return false; // Endpoint is halted
   83ec8:	2000      	movs	r0, #0
}
   83eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   83ecc:	2000      	movs	r0, #0
   83ece:	e7fc      	b.n	83eca <udd_ep_run+0xe2>
   83ed0:	2000      	movs	r0, #0
   83ed2:	e7fa      	b.n	83eca <udd_ep_run+0xe2>
   83ed4:	20000f50 	.word	0x20000f50
   83ed8:	20000328 	.word	0x20000328
   83edc:	000833bd 	.word	0x000833bd

00083ee0 <udd_ep_alloc>:
{
   83ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ee4:	b082      	sub	sp, #8
	ep = ep & USB_EP_ADDR_MASK;
   83ee6:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   83eea:	2c02      	cmp	r4, #2
   83eec:	f200 813a 	bhi.w	84164 <udd_ep_alloc+0x284>
   83ef0:	fa4f fc80 	sxtb.w	ip, r0
	if (Is_udd_endpoint_enabled(ep)) {
   83ef4:	4625      	mov	r5, r4
   83ef6:	0163      	lsls	r3, r4, #5
   83ef8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   83efc:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   83f00:	f8d3 610c 	ldr.w	r6, [r3, #268]	; 0x10c
   83f04:	f016 0601 	ands.w	r6, r6, #1
   83f08:	f040 8130 	bne.w	8416c <udd_ep_alloc+0x28c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   83f0c:	f001 0803 	and.w	r8, r1, #3
   83f10:	f1b8 0f02 	cmp.w	r8, #2
   83f14:	d014      	beq.n	83f40 <udd_ep_alloc+0x60>
   83f16:	f1b8 0f03 	cmp.w	r8, #3
   83f1a:	d02c      	beq.n	83f76 <udd_ep_alloc+0x96>
   83f1c:	f1b8 0f01 	cmp.w	r8, #1
   83f20:	d001      	beq.n	83f26 <udd_ep_alloc+0x46>
   83f22:	2000      	movs	r0, #0
   83f24:	e11f      	b.n	84166 <udd_ep_alloc+0x286>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   83f26:	b13c      	cbz	r4, 83f38 <udd_ep_alloc+0x58>
   83f28:	2c03      	cmp	r4, #3
   83f2a:	d007      	beq.n	83f3c <udd_ep_alloc+0x5c>
   83f2c:	2c04      	cmp	r4, #4
   83f2e:	d001      	beq.n	83f34 <udd_ep_alloc+0x54>
   83f30:	2001      	movs	r0, #1
	switch (nb_bank) {
   83f32:	e023      	b.n	83f7c <udd_ep_alloc+0x9c>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   83f34:	2000      	movs	r0, #0
   83f36:	e021      	b.n	83f7c <udd_ep_alloc+0x9c>
   83f38:	2000      	movs	r0, #0
   83f3a:	e01f      	b.n	83f7c <udd_ep_alloc+0x9c>
   83f3c:	2000      	movs	r0, #0
   83f3e:	e01d      	b.n	83f7c <udd_ep_alloc+0x9c>
		nb_bank = UDD_BULK_NB_BANK(ep);
   83f40:	2c05      	cmp	r4, #5
   83f42:	d006      	beq.n	83f52 <udd_ep_alloc+0x72>
   83f44:	2c85      	cmp	r4, #133	; 0x85
   83f46:	d011      	beq.n	83f6c <udd_ep_alloc+0x8c>
   83f48:	2c06      	cmp	r4, #6
   83f4a:	d004      	beq.n	83f56 <udd_ep_alloc+0x76>
   83f4c:	f04f 0801 	mov.w	r8, #1
   83f50:	e001      	b.n	83f56 <udd_ep_alloc+0x76>
   83f52:	f04f 0803 	mov.w	r8, #3
	switch (nb_bank) {
   83f56:	f1b8 0f02 	cmp.w	r8, #2
   83f5a:	d057      	beq.n	8400c <udd_ep_alloc+0x12c>
   83f5c:	f1b8 0f03 	cmp.w	r8, #3
   83f60:	d056      	beq.n	84010 <udd_ep_alloc+0x130>
   83f62:	f1b8 0f01 	cmp.w	r8, #1
   83f66:	d004      	beq.n	83f72 <udd_ep_alloc+0x92>
   83f68:	2000      	movs	r0, #0
   83f6a:	e0fc      	b.n	84166 <udd_ep_alloc+0x286>
		nb_bank = UDD_BULK_NB_BANK(ep);
   83f6c:	f04f 0803 	mov.w	r8, #3
   83f70:	e7f1      	b.n	83f56 <udd_ep_alloc+0x76>
	switch (nb_bank) {
   83f72:	2000      	movs	r0, #0
   83f74:	e002      	b.n	83f7c <udd_ep_alloc+0x9c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   83f76:	2000      	movs	r0, #0
   83f78:	f04f 0801 	mov.w	r8, #1
	if (b_iso_hbw) {
   83f7c:	2800      	cmp	r0, #0
   83f7e:	d04f      	beq.n	84020 <udd_ep_alloc+0x140>
		switch(MaxEndpointSize & (0x3u << 11)) {
   83f80:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   83f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   83f88:	d044      	beq.n	84014 <udd_ep_alloc+0x134>
   83f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   83f8e:	d144      	bne.n	8401a <udd_ep_alloc+0x13a>
			nb_tran = 3;
   83f90:	f04f 0e03 	mov.w	lr, #3
		MaxEndpointSize &= ~(0x3u << 11);
   83f94:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   83f98:	b292      	uxth	r2, r2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   83f9a:	f105 0308 	add.w	r3, r5, #8
   83f9e:	015b      	lsls	r3, r3, #5
   83fa0:	4f75      	ldr	r7, [pc, #468]	; (84178 <udd_ep_alloc+0x298>)
   83fa2:	58ff      	ldr	r7, [r7, r3]
   83fa4:	f427 777f 	bic.w	r7, r7, #1020	; 0x3fc
   83fa8:	f027 0703 	bic.w	r7, r7, #3
   83fac:	010b      	lsls	r3, r1, #4
   83fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
   83fb2:	f1bc 0f00 	cmp.w	ip, #0
   83fb6:	db3a      	blt.n	8402e <udd_ep_alloc+0x14e>
   83fb8:	4631      	mov	r1, r6
   83fba:	430b      	orrs	r3, r1
   83fbc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   83fc0:	d237      	bcs.n	84032 <udd_ep_alloc+0x152>
   83fc2:	2a08      	cmp	r2, #8
   83fc4:	bf38      	it	cc
   83fc6:	2208      	movcc	r2, #8
   83fc8:	0052      	lsls	r2, r2, #1
   83fca:	3a01      	subs	r2, #1
   83fcc:	fab2 f282 	clz	r2, r2
   83fd0:	f1c2 021c 	rsb	r2, r2, #28
   83fd4:	4313      	orrs	r3, r2
   83fd6:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   83fda:	b108      	cbz	r0, 83fe0 <udd_ep_alloc+0x100>
   83fdc:	ea4f 260e 	mov.w	r6, lr, lsl #8
   83fe0:	4333      	orrs	r3, r6
   83fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   83fe6:	433b      	orrs	r3, r7
   83fe8:	4963      	ldr	r1, [pc, #396]	; (84178 <udd_ep_alloc+0x298>)
   83fea:	f105 0208 	add.w	r2, r5, #8
   83fee:	0152      	lsls	r2, r2, #5
   83ff0:	508b      	str	r3, [r1, r2]
	if (!Is_udd_endpoint_mapped(ep)) {
   83ff2:	588b      	ldr	r3, [r1, r2]
   83ff4:	2b00      	cmp	r3, #0
   83ff6:	f280 80bb 	bge.w	84170 <udd_ep_alloc+0x290>
	udd_enable_endpoint(ep);
   83ffa:	f102 2540 	add.w	r5, r2, #1073758208	; 0x40004000
   83ffe:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   84002:	2301      	movs	r3, #1
   84004:	606b      	str	r3, [r5, #4]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84006:	2302      	movs	r3, #2
	ep_allocated = 0;
   84008:	2500      	movs	r5, #0
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8400a:	e017      	b.n	8403c <udd_ep_alloc+0x15c>
	bool b_iso_hbw = false;
   8400c:	2000      	movs	r0, #0
   8400e:	e7b5      	b.n	83f7c <udd_ep_alloc+0x9c>
   84010:	2000      	movs	r0, #0
   84012:	e7b3      	b.n	83f7c <udd_ep_alloc+0x9c>
		switch(MaxEndpointSize & (0x3u << 11)) {
   84014:	f04f 0e02 	mov.w	lr, #2
   84018:	e7bc      	b.n	83f94 <udd_ep_alloc+0xb4>
			nb_tran = 1;
   8401a:	f04f 0e01 	mov.w	lr, #1
   8401e:	e7b9      	b.n	83f94 <udd_ep_alloc+0xb4>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   84020:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   84024:	f040 809f 	bne.w	84166 <udd_ep_alloc+0x286>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   84028:	f04f 0e00 	mov.w	lr, #0
   8402c:	e7b5      	b.n	83f9a <udd_ep_alloc+0xba>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8402e:	2108      	movs	r1, #8
   84030:	e7c3      	b.n	83fba <udd_ep_alloc+0xda>
   84032:	f240 72ff 	movw	r2, #2047	; 0x7ff
   84036:	e7c9      	b.n	83fcc <udd_ep_alloc+0xec>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84038:	3b01      	subs	r3, #1
   8403a:	b2db      	uxtb	r3, r3
   8403c:	42a3      	cmp	r3, r4
   8403e:	d339      	bcc.n	840b4 <udd_ep_alloc+0x1d4>
		if (Is_udd_endpoint_enabled(i)) {
   84040:	015a      	lsls	r2, r3, #5
   84042:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84046:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   8404a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8404e:	f012 0f01 	tst.w	r2, #1
   84052:	d0f1      	beq.n	84038 <udd_ep_alloc+0x158>
			bank = udd_get_endpoint_bank(i);
   84054:	4848      	ldr	r0, [pc, #288]	; (84178 <udd_ep_alloc+0x298>)
   84056:	f103 0108 	add.w	r1, r3, #8
   8405a:	0149      	lsls	r1, r1, #5
   8405c:	5842      	ldr	r2, [r0, r1]
   8405e:	f3c2 1281 	ubfx	r2, r2, #6, #2
			ep_allocated |=  bank << (i * 2);
   84062:	005e      	lsls	r6, r3, #1
   84064:	40b2      	lsls	r2, r6
   84066:	4315      	orrs	r5, r2
   84068:	b2ad      	uxth	r5, r5
			udd_disable_endpoint(i);
   8406a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8406e:	2601      	movs	r6, #1
   84070:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   84074:	5842      	ldr	r2, [r0, r1]
   84076:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   8407a:	5042      	str	r2, [r0, r1]
   8407c:	e7dc      	b.n	84038 <udd_ep_alloc+0x158>
			if (NULL == ptr_job->call_trans) {
   8407e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   84082:	493e      	ldr	r1, [pc, #248]	; (8417c <udd_ep_alloc+0x29c>)
   84084:	f851 5032 	ldr.w	r5, [r1, r2, lsl #3]
   84088:	2d00      	cmp	r5, #0
   8408a:	d073      	beq.n	84174 <udd_ep_alloc+0x294>
			if (Is_udd_endpoint_in(i)) {
   8408c:	f857 300e 	ldr.w	r3, [r7, lr]
   84090:	f013 0f08 	tst.w	r3, #8
   84094:	d001      	beq.n	8409a <udd_ep_alloc+0x1ba>
				i |= USB_EP_DIR_IN;
   84096:	f044 0480 	orr.w	r4, r4, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8409a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   8409e:	4a37      	ldr	r2, [pc, #220]	; (8417c <udd_ep_alloc+0x29c>)
   840a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   840a4:	4622      	mov	r2, r4
   840a6:	68d9      	ldr	r1, [r3, #12]
   840a8:	2001      	movs	r0, #1
   840aa:	47a8      	blx	r5
			return false;
   840ac:	2000      	movs	r0, #0
   840ae:	e05a      	b.n	84166 <udd_ep_alloc+0x286>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   840b0:	3401      	adds	r4, #1
   840b2:	b2e4      	uxtb	r4, r4
   840b4:	2c02      	cmp	r4, #2
   840b6:	d853      	bhi.n	84160 <udd_ep_alloc+0x280>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   840b8:	4623      	mov	r3, r4
   840ba:	1e60      	subs	r0, r4, #1
		bool b_restart = ptr_job->busy;
   840bc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   840c0:	4a2e      	ldr	r2, [pc, #184]	; (8417c <udd_ep_alloc+0x29c>)
   840c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   840c6:	7d16      	ldrb	r6, [r2, #20]
   840c8:	f006 0601 	and.w	r6, r6, #1
		bank = (ep_allocated >> (i * 2)) & 0x03;
   840cc:	0062      	lsls	r2, r4, #1
   840ce:	fa45 f202 	asr.w	r2, r5, r2
		if (bank == 0) {
   840d2:	f012 0203 	ands.w	r2, r2, #3
   840d6:	d0eb      	beq.n	840b0 <udd_ep_alloc+0x1d0>
		ptr_job->busy = false;
   840d8:	4f28      	ldr	r7, [pc, #160]	; (8417c <udd_ep_alloc+0x29c>)
   840da:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   840de:	7d0f      	ldrb	r7, [r1, #20]
   840e0:	f36f 0700 	bfc	r7, #0, #1
   840e4:	750f      	strb	r7, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   840e6:	4f24      	ldr	r7, [pc, #144]	; (84178 <udd_ep_alloc+0x298>)
   840e8:	f104 0108 	add.w	r1, r4, #8
   840ec:	ea4f 1e41 	mov.w	lr, r1, lsl #5
   840f0:	eb07 1c41 	add.w	ip, r7, r1, lsl #5
   840f4:	f857 100e 	ldr.w	r1, [r7, lr]
   840f8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   840fc:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   84100:	f847 200e 	str.w	r2, [r7, lr]
		udd_enable_endpoint(i);
   84104:	2201      	movs	r2, #1
   84106:	f8cc 2004 	str.w	r2, [ip, #4]
		if (!Is_udd_endpoint_mapped(i)) {
   8410a:	f857 200e 	ldr.w	r2, [r7, lr]
   8410e:	2a00      	cmp	r2, #0
   84110:	dab5      	bge.n	8407e <udd_ep_alloc+0x19e>
		udd_enable_endpoint_bank_autoswitch(i);
   84112:	3308      	adds	r3, #8
   84114:	015b      	lsls	r3, r3, #5
   84116:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8411a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8411e:	685a      	ldr	r2, [r3, #4]
   84120:	f042 0202 	orr.w	r2, r2, #2
   84124:	605a      	str	r2, [r3, #4]
		if (b_restart) {
   84126:	2e00      	cmp	r6, #0
   84128:	d0c2      	beq.n	840b0 <udd_ep_alloc+0x1d0>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   8412a:	4e14      	ldr	r6, [pc, #80]	; (8417c <udd_ep_alloc+0x29c>)
   8412c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   84130:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   84134:	6919      	ldr	r1, [r3, #16]
   84136:	68da      	ldr	r2, [r3, #12]
   84138:	1a52      	subs	r2, r2, r1
   8413a:	60da      	str	r2, [r3, #12]
					ptr_job->b_shortpacket,
   8413c:	7d19      	ldrb	r1, [r3, #20]
					&ptr_job->buf[ptr_job->buf_cnt],
   8413e:	685f      	ldr	r7, [r3, #4]
					ptr_job->buf_size
   84140:	689b      	ldr	r3, [r3, #8]
			b_restart = udd_ep_run(i,
   84142:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84146:	f856 0030 	ldr.w	r0, [r6, r0, lsl #3]
   8414a:	9000      	str	r0, [sp, #0]
   8414c:	1a9b      	subs	r3, r3, r2
   8414e:	443a      	add	r2, r7
   84150:	f3c1 0140 	ubfx	r1, r1, #1, #1
   84154:	4620      	mov	r0, r4
   84156:	4e0a      	ldr	r6, [pc, #40]	; (84180 <udd_ep_alloc+0x2a0>)
   84158:	47b0      	blx	r6
			if (!b_restart) {
   8415a:	2800      	cmp	r0, #0
   8415c:	d1a8      	bne.n	840b0 <udd_ep_alloc+0x1d0>
   8415e:	e002      	b.n	84166 <udd_ep_alloc+0x286>
	return true;
   84160:	2001      	movs	r0, #1
   84162:	e000      	b.n	84166 <udd_ep_alloc+0x286>
		return false;
   84164:	2000      	movs	r0, #0
}
   84166:	b002      	add	sp, #8
   84168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   8416c:	2000      	movs	r0, #0
   8416e:	e7fa      	b.n	84166 <udd_ep_alloc+0x286>
		return false;
   84170:	2000      	movs	r0, #0
   84172:	e7f8      	b.n	84166 <udd_ep_alloc+0x286>
				return false;
   84174:	2000      	movs	r0, #0
   84176:	e7f6      	b.n	84166 <udd_ep_alloc+0x286>
   84178:	400a4000 	.word	0x400a4000
   8417c:	20000f50 	.word	0x20000f50
   84180:	00083de9 	.word	0x00083de9

00084184 <udd_ep_abort>:
{
   84184:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84186:	f000 010f 	and.w	r1, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   8418a:	4b15      	ldr	r3, [pc, #84]	; (841e0 <udd_ep_abort+0x5c>)
   8418c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   84190:	2200      	movs	r2, #0
   84192:	609a      	str	r2, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   84194:	f010 0f80 	tst.w	r0, #128	; 0x80
   84198:	d115      	bne.n	841c6 <udd_ep_abort+0x42>
	udd_ep_abort_job(ep);
   8419a:	4b12      	ldr	r3, [pc, #72]	; (841e4 <udd_ep_abort+0x60>)
   8419c:	4798      	blx	r3
}
   8419e:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   841a0:	014b      	lsls	r3, r1, #5
   841a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   841a6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   841aa:	f44f 7400 	mov.w	r4, #512	; 0x200
   841ae:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   841b2:	0153      	lsls	r3, r2, #5
   841b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   841b8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   841bc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   841c0:	f413 7f00 	tst.w	r3, #512	; 0x200
   841c4:	d1f5      	bne.n	841b2 <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   841c6:	460a      	mov	r2, r1
   841c8:	014b      	lsls	r3, r1, #5
   841ca:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   841ce:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   841d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   841d6:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   841da:	d1e1      	bne.n	841a0 <udd_ep_abort+0x1c>
   841dc:	e7dd      	b.n	8419a <udd_ep_abort+0x16>
   841de:	bf00      	nop
   841e0:	400a4300 	.word	0x400a4300
   841e4:	00083399 	.word	0x00083399

000841e8 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   841e8:	4a07      	ldr	r2, [pc, #28]	; (84208 <udd_test_mode_j+0x20>)
   841ea:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   841ee:	f023 0303 	bic.w	r3, r3, #3
   841f2:	f043 0302 	orr.w	r3, r3, #2
   841f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   841fa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   841fe:	f043 0304 	orr.w	r3, r3, #4
   84202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84206:	4770      	bx	lr
   84208:	400a4000 	.word	0x400a4000

0008420c <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   8420c:	4a07      	ldr	r2, [pc, #28]	; (8422c <udd_test_mode_k+0x20>)
   8420e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84212:	f023 0303 	bic.w	r3, r3, #3
   84216:	f043 0302 	orr.w	r3, r3, #2
   8421a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8421e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84222:	f043 0308 	orr.w	r3, r3, #8
   84226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8422a:	4770      	bx	lr
   8422c:	400a4000 	.word	0x400a4000

00084230 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   84230:	4a04      	ldr	r2, [pc, #16]	; (84244 <udd_test_mode_se0_nak+0x14>)
   84232:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84236:	f023 0303 	bic.w	r3, r3, #3
   8423a:	f043 0302 	orr.w	r3, r3, #2
   8423e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84242:	4770      	bx	lr
   84244:	400a4000 	.word	0x400a4000

00084248 <udd_test_mode_packet>:
{
   84248:	b430      	push	{r4, r5}
   8424a:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   8424c:	466c      	mov	r4, sp
   8424e:	4d21      	ldr	r5, [pc, #132]	; (842d4 <udd_test_mode_packet+0x8c>)
   84250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8425a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8425c:	e895 0003 	ldmia.w	r5, {r0, r1}
   84260:	f844 0b04 	str.w	r0, [r4], #4
   84264:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   84266:	4b1c      	ldr	r3, [pc, #112]	; (842d8 <udd_test_mode_packet+0x90>)
   84268:	2101      	movs	r1, #1
   8426a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8426e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84272:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   84276:	f022 0203 	bic.w	r2, r2, #3
   8427a:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   8427e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84282:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   84286:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   8428a:	f022 0203 	bic.w	r2, r2, #3
   8428e:	f042 0202 	orr.w	r2, r2, #2
   84292:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   84296:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   8429a:	f042 0210 	orr.w	r2, r2, #16
   8429e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   842a2:	466a      	mov	r2, sp
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   842a4:	4b0d      	ldr	r3, [pc, #52]	; (842dc <udd_test_mode_packet+0x94>)
	for (i = 0; i < sizeof(test_packet); i++) {
   842a6:	2100      	movs	r1, #0
   842a8:	e005      	b.n	842b6 <udd_test_mode_packet+0x6e>
		*ptr_dest++ = *ptr_src++;
   842aa:	f812 0b01 	ldrb.w	r0, [r2], #1
   842ae:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   842b2:	3101      	adds	r1, #1
   842b4:	b2c9      	uxtb	r1, r1
   842b6:	2934      	cmp	r1, #52	; 0x34
   842b8:	d9f7      	bls.n	842aa <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   842ba:	4b07      	ldr	r3, [pc, #28]	; (842d8 <udd_test_mode_packet+0x90>)
   842bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   842c0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   842c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   842c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   842cc:	b00e      	add	sp, #56	; 0x38
   842ce:	bc30      	pop	{r4, r5}
   842d0:	4770      	bx	lr
   842d2:	bf00      	nop
   842d4:	0008b344 	.word	0x0008b344
   842d8:	400a4000 	.word	0x400a4000
   842dc:	20180000 	.word	0x20180000

000842e0 <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   842e0:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   842e2:	204f      	movs	r0, #79	; 0x4f
   842e4:	4c03      	ldr	r4, [pc, #12]	; (842f4 <ui_init+0x14>)
   842e6:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   842e8:	2050      	movs	r0, #80	; 0x50
   842ea:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   842ec:	2051      	movs	r0, #81	; 0x51
   842ee:	47a0      	blx	r4
}
   842f0:	bd10      	pop	{r4, pc}
   842f2:	bf00      	nop
   842f4:	000821ad 	.word	0x000821ad

000842f8 <ui_powerdown>:

void ui_powerdown(void)
{
   842f8:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   842fa:	204f      	movs	r0, #79	; 0x4f
   842fc:	4c04      	ldr	r4, [pc, #16]	; (84310 <ui_powerdown+0x18>)
   842fe:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84300:	2050      	movs	r0, #80	; 0x50
   84302:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   84304:	2051      	movs	r0, #81	; 0x51
   84306:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   84308:	203f      	movs	r0, #63	; 0x3f
   8430a:	4b02      	ldr	r3, [pc, #8]	; (84314 <ui_powerdown+0x1c>)
   8430c:	4798      	blx	r3
		
}
   8430e:	bd10      	pop	{r4, pc}
   84310:	000821ad 	.word	0x000821ad
   84314:	000823f1 	.word	0x000823f1

00084318 <ui_wakeup>:

void ui_wakeup(void)
{
   84318:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   8431a:	204f      	movs	r0, #79	; 0x4f
   8431c:	4b02      	ldr	r3, [pc, #8]	; (84328 <ui_wakeup+0x10>)
   8431e:	4798      	blx	r3
	board_power(1);
   84320:	203f      	movs	r0, #63	; 0x3f
   84322:	4b02      	ldr	r3, [pc, #8]	; (8432c <ui_wakeup+0x14>)
   84324:	4798      	blx	r3
}
   84326:	bd08      	pop	{r3, pc}
   84328:	000821ed 	.word	0x000821ed
   8432c:	000823d5 	.word	0x000823d5

00084330 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   84330:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
   84332:	4c0d      	ldr	r4, [pc, #52]	; (84368 <ui_process+0x38>)
   84334:	fba4 3400 	umull	r3, r4, r4, r0
   84338:	09a4      	lsrs	r4, r4, #6
   8433a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8433e:	fb03 0414 	mls	r4, r3, r4, r0
   84342:	b2a4      	uxth	r4, r4
   84344:	b13c      	cbz	r4, 84356 <ui_process+0x26>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   84346:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   8434a:	d008      	beq.n	8435e <ui_process+0x2e>
		LED_Off(LED0_GPIO);
	}
	
	task_tickCnt++;
   8434c:	4a07      	ldr	r2, [pc, #28]	; (8436c <ui_process+0x3c>)
   8434e:	6813      	ldr	r3, [r2, #0]
   84350:	3301      	adds	r3, #1
   84352:	6013      	str	r3, [r2, #0]
}
   84354:	bd10      	pop	{r4, pc}
		LED_On(LED0_GPIO);
   84356:	204f      	movs	r0, #79	; 0x4f
   84358:	4b05      	ldr	r3, [pc, #20]	; (84370 <ui_process+0x40>)
   8435a:	4798      	blx	r3
   8435c:	e7f3      	b.n	84346 <ui_process+0x16>
		LED_Off(LED0_GPIO);
   8435e:	204f      	movs	r0, #79	; 0x4f
   84360:	4b04      	ldr	r3, [pc, #16]	; (84374 <ui_process+0x44>)
   84362:	4798      	blx	r3
   84364:	e7f2      	b.n	8434c <ui_process+0x1c>
   84366:	bf00      	nop
   84368:	10624dd3 	.word	0x10624dd3
   8436c:	20000fbc 	.word	0x20000fbc
   84370:	000821ed 	.word	0x000821ed
   84374:	000821ad 	.word	0x000821ad

00084378 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   84378:	6943      	ldr	r3, [r0, #20]
   8437a:	f013 0f02 	tst.w	r3, #2
   8437e:	d004      	beq.n	8438a <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   84380:	f3c1 0108 	ubfx	r1, r1, #0, #9
   84384:	61c1      	str	r1, [r0, #28]
	return 0;
   84386:	2000      	movs	r0, #0
   84388:	4770      	bx	lr
		return 1;
   8438a:	2001      	movs	r0, #1
}
   8438c:	4770      	bx	lr

0008438e <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8438e:	6943      	ldr	r3, [r0, #20]
   84390:	f013 0f01 	tst.w	r3, #1
   84394:	d005      	beq.n	843a2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   84396:	6983      	ldr	r3, [r0, #24]
   84398:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8439c:	600b      	str	r3, [r1, #0]

	return 0;
   8439e:	2000      	movs	r0, #0
   843a0:	4770      	bx	lr
		return 1;
   843a2:	2001      	movs	r0, #1
}
   843a4:	4770      	bx	lr
   843a6:	0000      	movs	r0, r0

000843a8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   843a8:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   843aa:	3801      	subs	r0, #1
   843ac:	2802      	cmp	r0, #2
   843ae:	d80f      	bhi.n	843d0 <_write+0x28>
   843b0:	460c      	mov	r4, r1
   843b2:	4615      	mov	r5, r2
	int nChars = 0;
   843b4:	2600      	movs	r6, #0
		return -1;
	}

	for (; len != 0; --len) {
   843b6:	b185      	cbz	r5, 843da <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   843b8:	4b09      	ldr	r3, [pc, #36]	; (843e0 <_write+0x38>)
   843ba:	6818      	ldr	r0, [r3, #0]
   843bc:	4b09      	ldr	r3, [pc, #36]	; (843e4 <_write+0x3c>)
   843be:	681b      	ldr	r3, [r3, #0]
   843c0:	f814 1b01 	ldrb.w	r1, [r4], #1
   843c4:	4798      	blx	r3
   843c6:	2800      	cmp	r0, #0
   843c8:	db05      	blt.n	843d6 <_write+0x2e>
			return -1;
		}
		++nChars;
   843ca:	3601      	adds	r6, #1
	for (; len != 0; --len) {
   843cc:	3d01      	subs	r5, #1
   843ce:	e7f2      	b.n	843b6 <_write+0xe>
		return -1;
   843d0:	f04f 36ff 	mov.w	r6, #4294967295
   843d4:	e001      	b.n	843da <_write+0x32>
			return -1;
   843d6:	f04f 36ff 	mov.w	r6, #4294967295
	}
	return nChars;
}
   843da:	4630      	mov	r0, r6
   843dc:	bd70      	pop	{r4, r5, r6, pc}
   843de:	bf00      	nop
   843e0:	20001868 	.word	0x20001868
   843e4:	20001864 	.word	0x20001864

000843e8 <__libc_init_array>:
   843e8:	b570      	push	{r4, r5, r6, lr}
   843ea:	4e0d      	ldr	r6, [pc, #52]	; (84420 <__libc_init_array+0x38>)
   843ec:	4d0d      	ldr	r5, [pc, #52]	; (84424 <__libc_init_array+0x3c>)
   843ee:	1b76      	subs	r6, r6, r5
   843f0:	10b6      	asrs	r6, r6, #2
   843f2:	d006      	beq.n	84402 <__libc_init_array+0x1a>
   843f4:	2400      	movs	r4, #0
   843f6:	f855 3b04 	ldr.w	r3, [r5], #4
   843fa:	3401      	adds	r4, #1
   843fc:	4798      	blx	r3
   843fe:	42a6      	cmp	r6, r4
   84400:	d1f9      	bne.n	843f6 <__libc_init_array+0xe>
   84402:	4e09      	ldr	r6, [pc, #36]	; (84428 <__libc_init_array+0x40>)
   84404:	4d09      	ldr	r5, [pc, #36]	; (8442c <__libc_init_array+0x44>)
   84406:	f007 f9b7 	bl	8b778 <_init>
   8440a:	1b76      	subs	r6, r6, r5
   8440c:	10b6      	asrs	r6, r6, #2
   8440e:	d006      	beq.n	8441e <__libc_init_array+0x36>
   84410:	2400      	movs	r4, #0
   84412:	f855 3b04 	ldr.w	r3, [r5], #4
   84416:	3401      	adds	r4, #1
   84418:	4798      	blx	r3
   8441a:	42a6      	cmp	r6, r4
   8441c:	d1f9      	bne.n	84412 <__libc_init_array+0x2a>
   8441e:	bd70      	pop	{r4, r5, r6, pc}
   84420:	0008b784 	.word	0x0008b784
   84424:	0008b784 	.word	0x0008b784
   84428:	0008b78c 	.word	0x0008b78c
   8442c:	0008b784 	.word	0x0008b784

00084430 <iprintf>:
   84430:	b40f      	push	{r0, r1, r2, r3}
   84432:	b500      	push	{lr}
   84434:	4907      	ldr	r1, [pc, #28]	; (84454 <iprintf+0x24>)
   84436:	b083      	sub	sp, #12
   84438:	ab04      	add	r3, sp, #16
   8443a:	6808      	ldr	r0, [r1, #0]
   8443c:	f853 2b04 	ldr.w	r2, [r3], #4
   84440:	6881      	ldr	r1, [r0, #8]
   84442:	9301      	str	r3, [sp, #4]
   84444:	f002 f80e 	bl	86464 <_vfiprintf_r>
   84448:	b003      	add	sp, #12
   8444a:	f85d eb04 	ldr.w	lr, [sp], #4
   8444e:	b004      	add	sp, #16
   84450:	4770      	bx	lr
   84452:	bf00      	nop
   84454:	200003d0 	.word	0x200003d0

00084458 <memcpy>:
   84458:	4684      	mov	ip, r0
   8445a:	ea41 0300 	orr.w	r3, r1, r0
   8445e:	f013 0303 	ands.w	r3, r3, #3
   84462:	d149      	bne.n	844f8 <memcpy+0xa0>
   84464:	3a40      	subs	r2, #64	; 0x40
   84466:	d323      	bcc.n	844b0 <memcpy+0x58>
   84468:	680b      	ldr	r3, [r1, #0]
   8446a:	6003      	str	r3, [r0, #0]
   8446c:	684b      	ldr	r3, [r1, #4]
   8446e:	6043      	str	r3, [r0, #4]
   84470:	688b      	ldr	r3, [r1, #8]
   84472:	6083      	str	r3, [r0, #8]
   84474:	68cb      	ldr	r3, [r1, #12]
   84476:	60c3      	str	r3, [r0, #12]
   84478:	690b      	ldr	r3, [r1, #16]
   8447a:	6103      	str	r3, [r0, #16]
   8447c:	694b      	ldr	r3, [r1, #20]
   8447e:	6143      	str	r3, [r0, #20]
   84480:	698b      	ldr	r3, [r1, #24]
   84482:	6183      	str	r3, [r0, #24]
   84484:	69cb      	ldr	r3, [r1, #28]
   84486:	61c3      	str	r3, [r0, #28]
   84488:	6a0b      	ldr	r3, [r1, #32]
   8448a:	6203      	str	r3, [r0, #32]
   8448c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8448e:	6243      	str	r3, [r0, #36]	; 0x24
   84490:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84492:	6283      	str	r3, [r0, #40]	; 0x28
   84494:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84496:	62c3      	str	r3, [r0, #44]	; 0x2c
   84498:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8449a:	6303      	str	r3, [r0, #48]	; 0x30
   8449c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8449e:	6343      	str	r3, [r0, #52]	; 0x34
   844a0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   844a2:	6383      	str	r3, [r0, #56]	; 0x38
   844a4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   844a6:	63c3      	str	r3, [r0, #60]	; 0x3c
   844a8:	3040      	adds	r0, #64	; 0x40
   844aa:	3140      	adds	r1, #64	; 0x40
   844ac:	3a40      	subs	r2, #64	; 0x40
   844ae:	d2db      	bcs.n	84468 <memcpy+0x10>
   844b0:	3230      	adds	r2, #48	; 0x30
   844b2:	d30b      	bcc.n	844cc <memcpy+0x74>
   844b4:	680b      	ldr	r3, [r1, #0]
   844b6:	6003      	str	r3, [r0, #0]
   844b8:	684b      	ldr	r3, [r1, #4]
   844ba:	6043      	str	r3, [r0, #4]
   844bc:	688b      	ldr	r3, [r1, #8]
   844be:	6083      	str	r3, [r0, #8]
   844c0:	68cb      	ldr	r3, [r1, #12]
   844c2:	60c3      	str	r3, [r0, #12]
   844c4:	3010      	adds	r0, #16
   844c6:	3110      	adds	r1, #16
   844c8:	3a10      	subs	r2, #16
   844ca:	d2f3      	bcs.n	844b4 <memcpy+0x5c>
   844cc:	320c      	adds	r2, #12
   844ce:	d305      	bcc.n	844dc <memcpy+0x84>
   844d0:	f851 3b04 	ldr.w	r3, [r1], #4
   844d4:	f840 3b04 	str.w	r3, [r0], #4
   844d8:	3a04      	subs	r2, #4
   844da:	d2f9      	bcs.n	844d0 <memcpy+0x78>
   844dc:	3204      	adds	r2, #4
   844de:	d008      	beq.n	844f2 <memcpy+0x9a>
   844e0:	07d2      	lsls	r2, r2, #31
   844e2:	bf1c      	itt	ne
   844e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   844e8:	f800 3b01 	strbne.w	r3, [r0], #1
   844ec:	d301      	bcc.n	844f2 <memcpy+0x9a>
   844ee:	880b      	ldrh	r3, [r1, #0]
   844f0:	8003      	strh	r3, [r0, #0]
   844f2:	4660      	mov	r0, ip
   844f4:	4770      	bx	lr
   844f6:	bf00      	nop
   844f8:	2a08      	cmp	r2, #8
   844fa:	d313      	bcc.n	84524 <memcpy+0xcc>
   844fc:	078b      	lsls	r3, r1, #30
   844fe:	d0b1      	beq.n	84464 <memcpy+0xc>
   84500:	f010 0303 	ands.w	r3, r0, #3
   84504:	d0ae      	beq.n	84464 <memcpy+0xc>
   84506:	f1c3 0304 	rsb	r3, r3, #4
   8450a:	1ad2      	subs	r2, r2, r3
   8450c:	07db      	lsls	r3, r3, #31
   8450e:	bf1c      	itt	ne
   84510:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84514:	f800 3b01 	strbne.w	r3, [r0], #1
   84518:	d3a4      	bcc.n	84464 <memcpy+0xc>
   8451a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8451e:	f820 3b02 	strh.w	r3, [r0], #2
   84522:	e79f      	b.n	84464 <memcpy+0xc>
   84524:	3a04      	subs	r2, #4
   84526:	d3d9      	bcc.n	844dc <memcpy+0x84>
   84528:	3a01      	subs	r2, #1
   8452a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8452e:	f800 3b01 	strb.w	r3, [r0], #1
   84532:	d2f9      	bcs.n	84528 <memcpy+0xd0>
   84534:	780b      	ldrb	r3, [r1, #0]
   84536:	7003      	strb	r3, [r0, #0]
   84538:	784b      	ldrb	r3, [r1, #1]
   8453a:	7043      	strb	r3, [r0, #1]
   8453c:	788b      	ldrb	r3, [r1, #2]
   8453e:	7083      	strb	r3, [r0, #2]
   84540:	4660      	mov	r0, ip
   84542:	4770      	bx	lr

00084544 <memset>:
   84544:	b4f0      	push	{r4, r5, r6, r7}
   84546:	0786      	lsls	r6, r0, #30
   84548:	d046      	beq.n	845d8 <memset+0x94>
   8454a:	1e54      	subs	r4, r2, #1
   8454c:	2a00      	cmp	r2, #0
   8454e:	d03c      	beq.n	845ca <memset+0x86>
   84550:	4603      	mov	r3, r0
   84552:	b2ca      	uxtb	r2, r1
   84554:	e001      	b.n	8455a <memset+0x16>
   84556:	3c01      	subs	r4, #1
   84558:	d337      	bcc.n	845ca <memset+0x86>
   8455a:	f803 2b01 	strb.w	r2, [r3], #1
   8455e:	079d      	lsls	r5, r3, #30
   84560:	d1f9      	bne.n	84556 <memset+0x12>
   84562:	2c03      	cmp	r4, #3
   84564:	d92a      	bls.n	845bc <memset+0x78>
   84566:	b2cd      	uxtb	r5, r1
   84568:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8456c:	2c0f      	cmp	r4, #15
   8456e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84572:	d934      	bls.n	845de <memset+0x9a>
   84574:	f1a4 0210 	sub.w	r2, r4, #16
   84578:	f022 0c0f 	bic.w	ip, r2, #15
   8457c:	f103 0720 	add.w	r7, r3, #32
   84580:	0916      	lsrs	r6, r2, #4
   84582:	4467      	add	r7, ip
   84584:	f103 0210 	add.w	r2, r3, #16
   84588:	e942 5504 	strd	r5, r5, [r2, #-16]
   8458c:	e942 5502 	strd	r5, r5, [r2, #-8]
   84590:	3210      	adds	r2, #16
   84592:	42ba      	cmp	r2, r7
   84594:	d1f8      	bne.n	84588 <memset+0x44>
   84596:	1c72      	adds	r2, r6, #1
   84598:	f014 0f0c 	tst.w	r4, #12
   8459c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   845a0:	f004 060f 	and.w	r6, r4, #15
   845a4:	d013      	beq.n	845ce <memset+0x8a>
   845a6:	1f33      	subs	r3, r6, #4
   845a8:	f023 0303 	bic.w	r3, r3, #3
   845ac:	3304      	adds	r3, #4
   845ae:	4413      	add	r3, r2
   845b0:	f842 5b04 	str.w	r5, [r2], #4
   845b4:	4293      	cmp	r3, r2
   845b6:	d1fb      	bne.n	845b0 <memset+0x6c>
   845b8:	f006 0403 	and.w	r4, r6, #3
   845bc:	b12c      	cbz	r4, 845ca <memset+0x86>
   845be:	b2ca      	uxtb	r2, r1
   845c0:	441c      	add	r4, r3
   845c2:	f803 2b01 	strb.w	r2, [r3], #1
   845c6:	429c      	cmp	r4, r3
   845c8:	d1fb      	bne.n	845c2 <memset+0x7e>
   845ca:	bcf0      	pop	{r4, r5, r6, r7}
   845cc:	4770      	bx	lr
   845ce:	4634      	mov	r4, r6
   845d0:	4613      	mov	r3, r2
   845d2:	2c00      	cmp	r4, #0
   845d4:	d1f3      	bne.n	845be <memset+0x7a>
   845d6:	e7f8      	b.n	845ca <memset+0x86>
   845d8:	4614      	mov	r4, r2
   845da:	4603      	mov	r3, r0
   845dc:	e7c1      	b.n	84562 <memset+0x1e>
   845de:	461a      	mov	r2, r3
   845e0:	4626      	mov	r6, r4
   845e2:	e7e0      	b.n	845a6 <memset+0x62>

000845e4 <setbuf>:
   845e4:	2900      	cmp	r1, #0
   845e6:	bf0c      	ite	eq
   845e8:	2202      	moveq	r2, #2
   845ea:	2200      	movne	r2, #0
   845ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   845f0:	f000 b800 	b.w	845f4 <setvbuf>

000845f4 <setvbuf>:
   845f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   845f8:	4d65      	ldr	r5, [pc, #404]	; (84790 <setvbuf+0x19c>)
   845fa:	4604      	mov	r4, r0
   845fc:	f8d5 9000 	ldr.w	r9, [r5]
   84600:	460f      	mov	r7, r1
   84602:	4690      	mov	r8, r2
   84604:	461e      	mov	r6, r3
   84606:	b083      	sub	sp, #12
   84608:	f1b9 0f00 	cmp.w	r9, #0
   8460c:	d003      	beq.n	84616 <setvbuf+0x22>
   8460e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   84612:	2b00      	cmp	r3, #0
   84614:	d079      	beq.n	8470a <setvbuf+0x116>
   84616:	f1b8 0f02 	cmp.w	r8, #2
   8461a:	d006      	beq.n	8462a <setvbuf+0x36>
   8461c:	f1b8 0f01 	cmp.w	r8, #1
   84620:	f200 80a3 	bhi.w	8476a <setvbuf+0x176>
   84624:	2e00      	cmp	r6, #0
   84626:	f2c0 80a0 	blt.w	8476a <setvbuf+0x176>
   8462a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8462c:	07d9      	lsls	r1, r3, #31
   8462e:	d552      	bpl.n	846d6 <setvbuf+0xe2>
   84630:	4621      	mov	r1, r4
   84632:	4648      	mov	r0, r9
   84634:	f003 fef4 	bl	88420 <_fflush_r>
   84638:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8463a:	b141      	cbz	r1, 8464e <setvbuf+0x5a>
   8463c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84640:	4299      	cmp	r1, r3
   84642:	d002      	beq.n	8464a <setvbuf+0x56>
   84644:	4648      	mov	r0, r9
   84646:	f004 f86b 	bl	88720 <_free_r>
   8464a:	2300      	movs	r3, #0
   8464c:	6323      	str	r3, [r4, #48]	; 0x30
   8464e:	2300      	movs	r3, #0
   84650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   84654:	61a3      	str	r3, [r4, #24]
   84656:	6063      	str	r3, [r4, #4]
   84658:	062b      	lsls	r3, r5, #24
   8465a:	d465      	bmi.n	84728 <setvbuf+0x134>
   8465c:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   84660:	f025 0503 	bic.w	r5, r5, #3
   84664:	f1b8 0f02 	cmp.w	r8, #2
   84668:	81a5      	strh	r5, [r4, #12]
   8466a:	d064      	beq.n	84736 <setvbuf+0x142>
   8466c:	ab01      	add	r3, sp, #4
   8466e:	466a      	mov	r2, sp
   84670:	4621      	mov	r1, r4
   84672:	4648      	mov	r0, r9
   84674:	f004 fb06 	bl	88c84 <__swhatbuf_r>
   84678:	89a3      	ldrh	r3, [r4, #12]
   8467a:	4318      	orrs	r0, r3
   8467c:	81a0      	strh	r0, [r4, #12]
   8467e:	2e00      	cmp	r6, #0
   84680:	d030      	beq.n	846e4 <setvbuf+0xf0>
   84682:	2f00      	cmp	r7, #0
   84684:	d02f      	beq.n	846e6 <setvbuf+0xf2>
   84686:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   8468a:	2b00      	cmp	r3, #0
   8468c:	d039      	beq.n	84702 <setvbuf+0x10e>
   8468e:	9b00      	ldr	r3, [sp, #0]
   84690:	e9c4 7604 	strd	r7, r6, [r4, #16]
   84694:	42b3      	cmp	r3, r6
   84696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8469a:	6027      	str	r7, [r4, #0]
   8469c:	bf1c      	itt	ne
   8469e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   846a2:	81a3      	strhne	r3, [r4, #12]
   846a4:	f1b8 0f01 	cmp.w	r8, #1
   846a8:	bf04      	itt	eq
   846aa:	f043 0301 	orreq.w	r3, r3, #1
   846ae:	81a3      	strheq	r3, [r4, #12]
   846b0:	b29a      	uxth	r2, r3
   846b2:	f013 0308 	ands.w	r3, r3, #8
   846b6:	d02c      	beq.n	84712 <setvbuf+0x11e>
   846b8:	07d1      	lsls	r1, r2, #31
   846ba:	d554      	bpl.n	84766 <setvbuf+0x172>
   846bc:	2100      	movs	r1, #0
   846be:	4276      	negs	r6, r6
   846c0:	61a6      	str	r6, [r4, #24]
   846c2:	6e66      	ldr	r6, [r4, #100]	; 0x64
   846c4:	60a1      	str	r1, [r4, #8]
   846c6:	f016 0601 	ands.w	r6, r6, #1
   846ca:	d027      	beq.n	8471c <setvbuf+0x128>
   846cc:	2600      	movs	r6, #0
   846ce:	4630      	mov	r0, r6
   846d0:	b003      	add	sp, #12
   846d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   846d6:	89a3      	ldrh	r3, [r4, #12]
   846d8:	059a      	lsls	r2, r3, #22
   846da:	d4a9      	bmi.n	84630 <setvbuf+0x3c>
   846dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   846de:	f004 facd 	bl	88c7c <__retarget_lock_acquire_recursive>
   846e2:	e7a5      	b.n	84630 <setvbuf+0x3c>
   846e4:	9e00      	ldr	r6, [sp, #0]
   846e6:	4630      	mov	r0, r6
   846e8:	f004 fb44 	bl	88d74 <malloc>
   846ec:	4607      	mov	r7, r0
   846ee:	2800      	cmp	r0, #0
   846f0:	d03e      	beq.n	84770 <setvbuf+0x17c>
   846f2:	89a3      	ldrh	r3, [r4, #12]
   846f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   846f8:	81a3      	strh	r3, [r4, #12]
   846fa:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   846fe:	2b00      	cmp	r3, #0
   84700:	d1c5      	bne.n	8468e <setvbuf+0x9a>
   84702:	4648      	mov	r0, r9
   84704:	f003 fee8 	bl	884d8 <__sinit>
   84708:	e7c1      	b.n	8468e <setvbuf+0x9a>
   8470a:	4648      	mov	r0, r9
   8470c:	f003 fee4 	bl	884d8 <__sinit>
   84710:	e781      	b.n	84616 <setvbuf+0x22>
   84712:	60a3      	str	r3, [r4, #8]
   84714:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84716:	f016 0601 	ands.w	r6, r6, #1
   8471a:	d1d7      	bne.n	846cc <setvbuf+0xd8>
   8471c:	0593      	lsls	r3, r2, #22
   8471e:	d51b      	bpl.n	84758 <setvbuf+0x164>
   84720:	4630      	mov	r0, r6
   84722:	b003      	add	sp, #12
   84724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84728:	4648      	mov	r0, r9
   8472a:	6921      	ldr	r1, [r4, #16]
   8472c:	f003 fff8 	bl	88720 <_free_r>
   84730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   84734:	e792      	b.n	8465c <setvbuf+0x68>
   84736:	2600      	movs	r6, #0
   84738:	2300      	movs	r3, #0
   8473a:	2101      	movs	r1, #1
   8473c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8473e:	f045 0502 	orr.w	r5, r5, #2
   84742:	60a3      	str	r3, [r4, #8]
   84744:	07d7      	lsls	r7, r2, #31
   84746:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8474a:	81a5      	strh	r5, [r4, #12]
   8474c:	6161      	str	r1, [r4, #20]
   8474e:	6023      	str	r3, [r4, #0]
   84750:	6123      	str	r3, [r4, #16]
   84752:	d4e5      	bmi.n	84720 <setvbuf+0x12c>
   84754:	05a8      	lsls	r0, r5, #22
   84756:	d4e3      	bmi.n	84720 <setvbuf+0x12c>
   84758:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8475a:	f004 fa91 	bl	88c80 <__retarget_lock_release_recursive>
   8475e:	4630      	mov	r0, r6
   84760:	b003      	add	sp, #12
   84762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84766:	60a6      	str	r6, [r4, #8]
   84768:	e7d4      	b.n	84714 <setvbuf+0x120>
   8476a:	f04f 36ff 	mov.w	r6, #4294967295
   8476e:	e7d7      	b.n	84720 <setvbuf+0x12c>
   84770:	9d00      	ldr	r5, [sp, #0]
   84772:	42b5      	cmp	r5, r6
   84774:	d004      	beq.n	84780 <setvbuf+0x18c>
   84776:	4628      	mov	r0, r5
   84778:	f004 fafc 	bl	88d74 <malloc>
   8477c:	4607      	mov	r7, r0
   8477e:	b920      	cbnz	r0, 8478a <setvbuf+0x196>
   84780:	f04f 36ff 	mov.w	r6, #4294967295
   84784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   84788:	e7d6      	b.n	84738 <setvbuf+0x144>
   8478a:	462e      	mov	r6, r5
   8478c:	e7b1      	b.n	846f2 <setvbuf+0xfe>
   8478e:	bf00      	nop
   84790:	200003d0 	.word	0x200003d0

00084794 <sprintf>:
   84794:	b40e      	push	{r1, r2, r3}
   84796:	4601      	mov	r1, r0
   84798:	b530      	push	{r4, r5, lr}
   8479a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8479e:	b09c      	sub	sp, #112	; 0x70
   847a0:	ab1f      	add	r3, sp, #124	; 0x7c
   847a2:	480b      	ldr	r0, [pc, #44]	; (847d0 <sprintf+0x3c>)
   847a4:	f853 2b04 	ldr.w	r2, [r3], #4
   847a8:	4d0a      	ldr	r5, [pc, #40]	; (847d4 <sprintf+0x40>)
   847aa:	9102      	str	r1, [sp, #8]
   847ac:	9106      	str	r1, [sp, #24]
   847ae:	6800      	ldr	r0, [r0, #0]
   847b0:	a902      	add	r1, sp, #8
   847b2:	9301      	str	r3, [sp, #4]
   847b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   847b8:	9407      	str	r4, [sp, #28]
   847ba:	f000 f86f 	bl	8489c <_svfprintf_r>
   847be:	2200      	movs	r2, #0
   847c0:	9b02      	ldr	r3, [sp, #8]
   847c2:	701a      	strb	r2, [r3, #0]
   847c4:	b01c      	add	sp, #112	; 0x70
   847c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   847ca:	b003      	add	sp, #12
   847cc:	4770      	bx	lr
   847ce:	bf00      	nop
   847d0:	200003d0 	.word	0x200003d0
   847d4:	ffff0208 	.word	0xffff0208

000847d8 <strlen>:
   847d8:	f020 0103 	bic.w	r1, r0, #3
   847dc:	f010 0003 	ands.w	r0, r0, #3
   847e0:	f1c0 0000 	rsb	r0, r0, #0
   847e4:	f851 3b04 	ldr.w	r3, [r1], #4
   847e8:	f100 0c04 	add.w	ip, r0, #4
   847ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   847f0:	f06f 0200 	mvn.w	r2, #0
   847f4:	bf1c      	itt	ne
   847f6:	fa22 f20c 	lsrne.w	r2, r2, ip
   847fa:	4313      	orrne	r3, r2
   847fc:	f04f 0c01 	mov.w	ip, #1
   84800:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84804:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84808:	eba3 020c 	sub.w	r2, r3, ip
   8480c:	ea22 0203 	bic.w	r2, r2, r3
   84810:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84814:	bf04      	itt	eq
   84816:	f851 3b04 	ldreq.w	r3, [r1], #4
   8481a:	3004      	addeq	r0, #4
   8481c:	d0f4      	beq.n	84808 <strlen+0x30>
   8481e:	f1c2 0100 	rsb	r1, r2, #0
   84822:	ea02 0201 	and.w	r2, r2, r1
   84826:	fab2 f282 	clz	r2, r2
   8482a:	f1c2 021f 	rsb	r2, r2, #31
   8482e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   84832:	4770      	bx	lr

00084834 <strncpy>:
   84834:	b470      	push	{r4, r5, r6}
   84836:	ea40 0401 	orr.w	r4, r0, r1
   8483a:	07a3      	lsls	r3, r4, #30
   8483c:	d122      	bne.n	84884 <strncpy+0x50>
   8483e:	2a03      	cmp	r2, #3
   84840:	d920      	bls.n	84884 <strncpy+0x50>
   84842:	460b      	mov	r3, r1
   84844:	4604      	mov	r4, r0
   84846:	4619      	mov	r1, r3
   84848:	f853 6b04 	ldr.w	r6, [r3], #4
   8484c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   84850:	ea25 0506 	bic.w	r5, r5, r6
   84854:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   84858:	d115      	bne.n	84886 <strncpy+0x52>
   8485a:	3a04      	subs	r2, #4
   8485c:	2a03      	cmp	r2, #3
   8485e:	4619      	mov	r1, r3
   84860:	f844 6b04 	str.w	r6, [r4], #4
   84864:	d8ef      	bhi.n	84846 <strncpy+0x12>
   84866:	1e4d      	subs	r5, r1, #1
   84868:	b152      	cbz	r2, 84880 <strncpy+0x4c>
   8486a:	4623      	mov	r3, r4
   8486c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   84870:	1e56      	subs	r6, r2, #1
   84872:	f803 1b01 	strb.w	r1, [r3], #1
   84876:	b141      	cbz	r1, 8488a <strncpy+0x56>
   84878:	4632      	mov	r2, r6
   8487a:	461c      	mov	r4, r3
   8487c:	2a00      	cmp	r2, #0
   8487e:	d1f4      	bne.n	8486a <strncpy+0x36>
   84880:	bc70      	pop	{r4, r5, r6}
   84882:	4770      	bx	lr
   84884:	4604      	mov	r4, r0
   84886:	1e4d      	subs	r5, r1, #1
   84888:	e7ee      	b.n	84868 <strncpy+0x34>
   8488a:	4422      	add	r2, r4
   8488c:	2e00      	cmp	r6, #0
   8488e:	d0f7      	beq.n	84880 <strncpy+0x4c>
   84890:	f803 1b01 	strb.w	r1, [r3], #1
   84894:	4293      	cmp	r3, r2
   84896:	d1fb      	bne.n	84890 <strncpy+0x5c>
   84898:	bc70      	pop	{r4, r5, r6}
   8489a:	4770      	bx	lr

0008489c <_svfprintf_r>:
   8489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   848a0:	b0d7      	sub	sp, #348	; 0x15c
   848a2:	468b      	mov	fp, r1
   848a4:	4617      	mov	r7, r2
   848a6:	930e      	str	r3, [sp, #56]	; 0x38
   848a8:	4681      	mov	r9, r0
   848aa:	f004 f9df 	bl	88c6c <_localeconv_r>
   848ae:	6803      	ldr	r3, [r0, #0]
   848b0:	4618      	mov	r0, r3
   848b2:	9318      	str	r3, [sp, #96]	; 0x60
   848b4:	f7ff ff90 	bl	847d8 <strlen>
   848b8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   848bc:	9017      	str	r0, [sp, #92]	; 0x5c
   848be:	061d      	lsls	r5, r3, #24
   848c0:	d504      	bpl.n	848cc <_svfprintf_r+0x30>
   848c2:	f8db 3010 	ldr.w	r3, [fp, #16]
   848c6:	2b00      	cmp	r3, #0
   848c8:	f000 87df 	beq.w	8588a <_svfprintf_r+0xfee>
   848cc:	2300      	movs	r3, #0
   848ce:	2100      	movs	r1, #0
   848d0:	2200      	movs	r2, #0
   848d2:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   848d6:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   848da:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   848de:	9313      	str	r3, [sp, #76]	; 0x4c
   848e0:	9319      	str	r3, [sp, #100]	; 0x64
   848e2:	930a      	str	r3, [sp, #40]	; 0x28
   848e4:	ab2d      	add	r3, sp, #180	; 0xb4
   848e6:	4698      	mov	r8, r3
   848e8:	932a      	str	r3, [sp, #168]	; 0xa8
   848ea:	783b      	ldrb	r3, [r7, #0]
   848ec:	46da      	mov	sl, fp
   848ee:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   848f2:	2b00      	cmp	r3, #0
   848f4:	f000 81a4 	beq.w	84c40 <_svfprintf_r+0x3a4>
   848f8:	463c      	mov	r4, r7
   848fa:	e004      	b.n	84906 <_svfprintf_r+0x6a>
   848fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84900:	2b00      	cmp	r3, #0
   84902:	f000 80fd 	beq.w	84b00 <_svfprintf_r+0x264>
   84906:	2b25      	cmp	r3, #37	; 0x25
   84908:	d1f8      	bne.n	848fc <_svfprintf_r+0x60>
   8490a:	1be5      	subs	r5, r4, r7
   8490c:	f040 80fb 	bne.w	84b06 <_svfprintf_r+0x26a>
   84910:	7823      	ldrb	r3, [r4, #0]
   84912:	2b00      	cmp	r3, #0
   84914:	f000 8194 	beq.w	84c40 <_svfprintf_r+0x3a4>
   84918:	2300      	movs	r3, #0
   8491a:	930b      	str	r3, [sp, #44]	; 0x2c
   8491c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   84920:	9307      	str	r3, [sp, #28]
   84922:	f04f 33ff 	mov.w	r3, #4294967295
   84926:	7866      	ldrb	r6, [r4, #1]
   84928:	f104 0b01 	add.w	fp, r4, #1
   8492c:	2120      	movs	r1, #32
   8492e:	242b      	movs	r4, #43	; 0x2b
   84930:	9309      	str	r3, [sp, #36]	; 0x24
   84932:	f10b 0b01 	add.w	fp, fp, #1
   84936:	f1a6 0320 	sub.w	r3, r6, #32
   8493a:	2b5a      	cmp	r3, #90	; 0x5a
   8493c:	f200 80ff 	bhi.w	84b3e <_svfprintf_r+0x2a2>
   84940:	e8df f013 	tbh	[pc, r3, lsl #1]
   84944:	00fd02bc 	.word	0x00fd02bc
   84948:	02b500fd 	.word	0x02b500fd
   8494c:	00fd00fd 	.word	0x00fd00fd
   84950:	029100fd 	.word	0x029100fd
   84954:	00fd00fd 	.word	0x00fd00fd
   84958:	02e7006a 	.word	0x02e7006a
   8495c:	023400fd 	.word	0x023400fd
   84960:	00fd02cd 	.word	0x00fd02cd
   84964:	005b02c6 	.word	0x005b02c6
   84968:	005b005b 	.word	0x005b005b
   8496c:	005b005b 	.word	0x005b005b
   84970:	005b005b 	.word	0x005b005b
   84974:	005b005b 	.word	0x005b005b
   84978:	00fd00fd 	.word	0x00fd00fd
   8497c:	00fd00fd 	.word	0x00fd00fd
   84980:	00fd00fd 	.word	0x00fd00fd
   84984:	019000fd 	.word	0x019000fd
   84988:	01f700fd 	.word	0x01f700fd
   8498c:	0190007c 	.word	0x0190007c
   84990:	01900190 	.word	0x01900190
   84994:	00fd00fd 	.word	0x00fd00fd
   84998:	00fd00fd 	.word	0x00fd00fd
   8499c:	00fd028a 	.word	0x00fd028a
   849a0:	00a900fd 	.word	0x00a900fd
   849a4:	00fd00fd 	.word	0x00fd00fd
   849a8:	020b00fd 	.word	0x020b00fd
   849ac:	023b00fd 	.word	0x023b00fd
   849b0:	00fd00fd 	.word	0x00fd00fd
   849b4:	00fd0781 	.word	0x00fd0781
   849b8:	00fd00fd 	.word	0x00fd00fd
   849bc:	00fd00fd 	.word	0x00fd00fd
   849c0:	00fd00fd 	.word	0x00fd00fd
   849c4:	019000fd 	.word	0x019000fd
   849c8:	01f700fd 	.word	0x01f700fd
   849cc:	01900080 	.word	0x01900080
   849d0:	01900190 	.word	0x01900190
   849d4:	00800280 	.word	0x00800280
   849d8:	00fd0075 	.word	0x00fd0075
   849dc:	00fd0276 	.word	0x00fd0276
   849e0:	00ad025e 	.word	0x00ad025e
   849e4:	0075024c 	.word	0x0075024c
   849e8:	020b00fd 	.word	0x020b00fd
   849ec:	075b0072 	.word	0x075b0072
   849f0:	00fd00fd 	.word	0x00fd00fd
   849f4:	00fd075f 	.word	0x00fd075f
   849f8:	0072      	.short	0x0072
   849fa:	2200      	movs	r2, #0
   849fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   84a00:	f81b 6b01 	ldrb.w	r6, [fp], #1
   84a04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   84a08:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   84a0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   84a10:	2b09      	cmp	r3, #9
   84a12:	d9f5      	bls.n	84a00 <_svfprintf_r+0x164>
   84a14:	920b      	str	r2, [sp, #44]	; 0x2c
   84a16:	e78e      	b.n	84936 <_svfprintf_r+0x9a>
   84a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84a1a:	f853 2b04 	ldr.w	r2, [r3], #4
   84a1e:	2a00      	cmp	r2, #0
   84a20:	920b      	str	r2, [sp, #44]	; 0x2c
   84a22:	930e      	str	r3, [sp, #56]	; 0x38
   84a24:	f2c0 81bf 	blt.w	84da6 <_svfprintf_r+0x50a>
   84a28:	f89b 6000 	ldrb.w	r6, [fp]
   84a2c:	e781      	b.n	84932 <_svfprintf_r+0x96>
   84a2e:	9b07      	ldr	r3, [sp, #28]
   84a30:	f89b 6000 	ldrb.w	r6, [fp]
   84a34:	f043 0320 	orr.w	r3, r3, #32
   84a38:	9307      	str	r3, [sp, #28]
   84a3a:	e77a      	b.n	84932 <_svfprintf_r+0x96>
   84a3c:	9b07      	ldr	r3, [sp, #28]
   84a3e:	f043 0310 	orr.w	r3, r3, #16
   84a42:	9307      	str	r3, [sp, #28]
   84a44:	9b07      	ldr	r3, [sp, #28]
   84a46:	069c      	lsls	r4, r3, #26
   84a48:	f140 8162 	bpl.w	84d10 <_svfprintf_r+0x474>
   84a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84a4e:	3307      	adds	r3, #7
   84a50:	f023 0307 	bic.w	r3, r3, #7
   84a54:	4619      	mov	r1, r3
   84a56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   84a5a:	4614      	mov	r4, r2
   84a5c:	461d      	mov	r5, r3
   84a5e:	910e      	str	r1, [sp, #56]	; 0x38
   84a60:	2a00      	cmp	r2, #0
   84a62:	f173 0300 	sbcs.w	r3, r3, #0
   84a66:	f2c0 85ab 	blt.w	855c0 <_svfprintf_r+0xd24>
   84a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84a6c:	3301      	adds	r3, #1
   84a6e:	9b07      	ldr	r3, [sp, #28]
   84a70:	f000 8414 	beq.w	8529c <_svfprintf_r+0xa00>
   84a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84a78:	ea54 0205 	orrs.w	r2, r4, r5
   84a7c:	9308      	str	r3, [sp, #32]
   84a7e:	f040 840e 	bne.w	8529e <_svfprintf_r+0xa02>
   84a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84a84:	2a00      	cmp	r2, #0
   84a86:	f040 840f 	bne.w	852a8 <_svfprintf_r+0xa0c>
   84a8a:	9307      	str	r3, [sp, #28]
   84a8c:	2300      	movs	r3, #0
   84a8e:	af56      	add	r7, sp, #344	; 0x158
   84a90:	9309      	str	r3, [sp, #36]	; 0x24
   84a92:	930c      	str	r3, [sp, #48]	; 0x30
   84a94:	e26b      	b.n	84f6e <_svfprintf_r+0x6d2>
   84a96:	9b07      	ldr	r3, [sp, #28]
   84a98:	f043 0310 	orr.w	r3, r3, #16
   84a9c:	9307      	str	r3, [sp, #28]
   84a9e:	9b07      	ldr	r3, [sp, #28]
   84aa0:	069a      	lsls	r2, r3, #26
   84aa2:	f140 8126 	bpl.w	84cf2 <_svfprintf_r+0x456>
   84aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84aa8:	3307      	adds	r3, #7
   84aaa:	f023 0307 	bic.w	r3, r3, #7
   84aae:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   84ab2:	930e      	str	r3, [sp, #56]	; 0x38
   84ab4:	9b07      	ldr	r3, [sp, #28]
   84ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   84aba:	9308      	str	r3, [sp, #32]
   84abc:	2300      	movs	r3, #0
   84abe:	2200      	movs	r2, #0
   84ac0:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   84ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84ac6:	4611      	mov	r1, r2
   84ac8:	3101      	adds	r1, #1
   84aca:	f000 8231 	beq.w	84f30 <_svfprintf_r+0x694>
   84ace:	9908      	ldr	r1, [sp, #32]
   84ad0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   84ad4:	9107      	str	r1, [sp, #28]
   84ad6:	ea54 0105 	orrs.w	r1, r4, r5
   84ada:	f040 8227 	bne.w	84f2c <_svfprintf_r+0x690>
   84ade:	2a00      	cmp	r2, #0
   84ae0:	f040 837d 	bne.w	851de <_svfprintf_r+0x942>
   84ae4:	2b00      	cmp	r3, #0
   84ae6:	d1d1      	bne.n	84a8c <_svfprintf_r+0x1f0>
   84ae8:	9b08      	ldr	r3, [sp, #32]
   84aea:	f013 0301 	ands.w	r3, r3, #1
   84aee:	930c      	str	r3, [sp, #48]	; 0x30
   84af0:	f000 8590 	beq.w	85614 <_svfprintf_r+0xd78>
   84af4:	2330      	movs	r3, #48	; 0x30
   84af6:	f20d 1757 	addw	r7, sp, #343	; 0x157
   84afa:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   84afe:	e236      	b.n	84f6e <_svfprintf_r+0x6d2>
   84b00:	1be5      	subs	r5, r4, r7
   84b02:	f000 809d 	beq.w	84c40 <_svfprintf_r+0x3a4>
   84b06:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   84b0a:	3301      	adds	r3, #1
   84b0c:	442a      	add	r2, r5
   84b0e:	2b07      	cmp	r3, #7
   84b10:	e9c8 7500 	strd	r7, r5, [r8]
   84b14:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   84b18:	dc06      	bgt.n	84b28 <_svfprintf_r+0x28c>
   84b1a:	f108 0808 	add.w	r8, r8, #8
   84b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84b20:	7823      	ldrb	r3, [r4, #0]
   84b22:	442a      	add	r2, r5
   84b24:	920a      	str	r2, [sp, #40]	; 0x28
   84b26:	e6f4      	b.n	84912 <_svfprintf_r+0x76>
   84b28:	4651      	mov	r1, sl
   84b2a:	4648      	mov	r0, r9
   84b2c:	aa2a      	add	r2, sp, #168	; 0xa8
   84b2e:	f005 fa9f 	bl	8a070 <__ssprint_r>
   84b32:	2800      	cmp	r0, #0
   84b34:	f041 83ce 	bne.w	862d4 <_svfprintf_r+0x1a38>
   84b38:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   84b3c:	e7ef      	b.n	84b1e <_svfprintf_r+0x282>
   84b3e:	2e00      	cmp	r6, #0
   84b40:	d07e      	beq.n	84c40 <_svfprintf_r+0x3a4>
   84b42:	2300      	movs	r3, #0
   84b44:	2101      	movs	r1, #1
   84b46:	461a      	mov	r2, r3
   84b48:	9108      	str	r1, [sp, #32]
   84b4a:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   84b4e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   84b52:	930d      	str	r3, [sp, #52]	; 0x34
   84b54:	9309      	str	r3, [sp, #36]	; 0x24
   84b56:	9312      	str	r3, [sp, #72]	; 0x48
   84b58:	9316      	str	r3, [sp, #88]	; 0x58
   84b5a:	9310      	str	r3, [sp, #64]	; 0x40
   84b5c:	910c      	str	r1, [sp, #48]	; 0x30
   84b5e:	af3d      	add	r7, sp, #244	; 0xf4
   84b60:	9b07      	ldr	r3, [sp, #28]
   84b62:	f013 0302 	ands.w	r3, r3, #2
   84b66:	d002      	beq.n	84b6e <_svfprintf_r+0x2d2>
   84b68:	9908      	ldr	r1, [sp, #32]
   84b6a:	3102      	adds	r1, #2
   84b6c:	9108      	str	r1, [sp, #32]
   84b6e:	9907      	ldr	r1, [sp, #28]
   84b70:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   84b74:	910f      	str	r1, [sp, #60]	; 0x3c
   84b76:	d105      	bne.n	84b84 <_svfprintf_r+0x2e8>
   84b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b7a:	9808      	ldr	r0, [sp, #32]
   84b7c:	1a0d      	subs	r5, r1, r0
   84b7e:	2d00      	cmp	r5, #0
   84b80:	f300 834b 	bgt.w	8521a <_svfprintf_r+0x97e>
   84b84:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   84b86:	b172      	cbz	r2, 84ba6 <_svfprintf_r+0x30a>
   84b88:	2001      	movs	r0, #1
   84b8a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   84b8c:	4404      	add	r4, r0
   84b8e:	4402      	add	r2, r0
   84b90:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   84b94:	2a07      	cmp	r2, #7
   84b96:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   84b9a:	e9c8 1000 	strd	r1, r0, [r8]
   84b9e:	f300 83cd 	bgt.w	8533c <_svfprintf_r+0xaa0>
   84ba2:	f108 0808 	add.w	r8, r8, #8
   84ba6:	b16b      	cbz	r3, 84bc4 <_svfprintf_r+0x328>
   84ba8:	2102      	movs	r1, #2
   84baa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   84bac:	440c      	add	r4, r1
   84bae:	3301      	adds	r3, #1
   84bb0:	aa23      	add	r2, sp, #140	; 0x8c
   84bb2:	2b07      	cmp	r3, #7
   84bb4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   84bb8:	e9c8 2100 	strd	r2, r1, [r8]
   84bbc:	f300 83cc 	bgt.w	85358 <_svfprintf_r+0xabc>
   84bc0:	f108 0808 	add.w	r8, r8, #8
   84bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84bc6:	2b80      	cmp	r3, #128	; 0x80
   84bc8:	f000 8234 	beq.w	85034 <_svfprintf_r+0x798>
   84bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84bd0:	1a9d      	subs	r5, r3, r2
   84bd2:	2d00      	cmp	r5, #0
   84bd4:	f300 826e 	bgt.w	850b4 <_svfprintf_r+0x818>
   84bd8:	9b07      	ldr	r3, [sp, #28]
   84bda:	05d9      	lsls	r1, r3, #23
   84bdc:	f100 81d5 	bmi.w	84f8a <_svfprintf_r+0x6ee>
   84be0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   84be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84be4:	3301      	adds	r3, #1
   84be6:	4414      	add	r4, r2
   84be8:	2b07      	cmp	r3, #7
   84bea:	e9c8 7200 	strd	r7, r2, [r8]
   84bee:	942c      	str	r4, [sp, #176]	; 0xb0
   84bf0:	932b      	str	r3, [sp, #172]	; 0xac
   84bf2:	f300 8397 	bgt.w	85324 <_svfprintf_r+0xa88>
   84bf6:	f108 0808 	add.w	r8, r8, #8
   84bfa:	9b07      	ldr	r3, [sp, #28]
   84bfc:	0759      	lsls	r1, r3, #29
   84bfe:	d505      	bpl.n	84c0c <_svfprintf_r+0x370>
   84c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84c02:	9a08      	ldr	r2, [sp, #32]
   84c04:	1a9d      	subs	r5, r3, r2
   84c06:	2d00      	cmp	r5, #0
   84c08:	f300 83b2 	bgt.w	85370 <_svfprintf_r+0xad4>
   84c0c:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   84c10:	9908      	ldr	r1, [sp, #32]
   84c12:	428a      	cmp	r2, r1
   84c14:	bfac      	ite	ge
   84c16:	189b      	addge	r3, r3, r2
   84c18:	185b      	addlt	r3, r3, r1
   84c1a:	930a      	str	r3, [sp, #40]	; 0x28
   84c1c:	2c00      	cmp	r4, #0
   84c1e:	f040 827d 	bne.w	8511c <_svfprintf_r+0x880>
   84c22:	2300      	movs	r3, #0
   84c24:	932b      	str	r3, [sp, #172]	; 0xac
   84c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84c28:	b11b      	cbz	r3, 84c32 <_svfprintf_r+0x396>
   84c2a:	4648      	mov	r0, r9
   84c2c:	990d      	ldr	r1, [sp, #52]	; 0x34
   84c2e:	f003 fd77 	bl	88720 <_free_r>
   84c32:	465f      	mov	r7, fp
   84c34:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   84c38:	783b      	ldrb	r3, [r7, #0]
   84c3a:	2b00      	cmp	r3, #0
   84c3c:	f47f ae5c 	bne.w	848f8 <_svfprintf_r+0x5c>
   84c40:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84c42:	46d3      	mov	fp, sl
   84c44:	2b00      	cmp	r3, #0
   84c46:	f041 824b 	bne.w	860e0 <_svfprintf_r+0x1844>
   84c4a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   84c4e:	f013 0f40 	tst.w	r3, #64	; 0x40
   84c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84c54:	bf18      	it	ne
   84c56:	f04f 33ff 	movne.w	r3, #4294967295
   84c5a:	930a      	str	r3, [sp, #40]	; 0x28
   84c5c:	980a      	ldr	r0, [sp, #40]	; 0x28
   84c5e:	b057      	add	sp, #348	; 0x15c
   84c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84c66:	3307      	adds	r3, #7
   84c68:	f023 0307 	bic.w	r3, r3, #7
   84c6c:	4619      	mov	r1, r3
   84c6e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   84c72:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   84c76:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   84c7a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   84c7e:	461d      	mov	r5, r3
   84c80:	4618      	mov	r0, r3
   84c82:	910e      	str	r1, [sp, #56]	; 0x38
   84c84:	f04f 32ff 	mov.w	r2, #4294967295
   84c88:	4621      	mov	r1, r4
   84c8a:	4ba4      	ldr	r3, [pc, #656]	; (84f1c <_svfprintf_r+0x680>)
   84c8c:	f006 f924 	bl	8aed8 <__aeabi_dcmpun>
   84c90:	2800      	cmp	r0, #0
   84c92:	f040 84d9 	bne.w	85648 <_svfprintf_r+0xdac>
   84c96:	4628      	mov	r0, r5
   84c98:	4621      	mov	r1, r4
   84c9a:	f04f 32ff 	mov.w	r2, #4294967295
   84c9e:	4b9f      	ldr	r3, [pc, #636]	; (84f1c <_svfprintf_r+0x680>)
   84ca0:	f006 f8fc 	bl	8ae9c <__aeabi_dcmple>
   84ca4:	2800      	cmp	r0, #0
   84ca6:	f040 84cf 	bne.w	85648 <_svfprintf_r+0xdac>
   84caa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   84cae:	2200      	movs	r2, #0
   84cb0:	2300      	movs	r3, #0
   84cb2:	f006 f8e9 	bl	8ae88 <__aeabi_dcmplt>
   84cb6:	2800      	cmp	r0, #0
   84cb8:	f041 800e 	bne.w	85cd8 <_svfprintf_r+0x143c>
   84cbc:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   84cc0:	2003      	movs	r0, #3
   84cc2:	2100      	movs	r1, #0
   84cc4:	4f96      	ldr	r7, [pc, #600]	; (84f20 <_svfprintf_r+0x684>)
   84cc6:	4b97      	ldr	r3, [pc, #604]	; (84f24 <_svfprintf_r+0x688>)
   84cc8:	9008      	str	r0, [sp, #32]
   84cca:	910d      	str	r1, [sp, #52]	; 0x34
   84ccc:	2e47      	cmp	r6, #71	; 0x47
   84cce:	bfc8      	it	gt
   84cd0:	461f      	movgt	r7, r3
   84cd2:	9c07      	ldr	r4, [sp, #28]
   84cd4:	900c      	str	r0, [sp, #48]	; 0x30
   84cd6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   84cda:	9407      	str	r4, [sp, #28]
   84cdc:	9109      	str	r1, [sp, #36]	; 0x24
   84cde:	9112      	str	r1, [sp, #72]	; 0x48
   84ce0:	9116      	str	r1, [sp, #88]	; 0x58
   84ce2:	9110      	str	r1, [sp, #64]	; 0x40
   84ce4:	2a00      	cmp	r2, #0
   84ce6:	f43f af3b 	beq.w	84b60 <_svfprintf_r+0x2c4>
   84cea:	9b08      	ldr	r3, [sp, #32]
   84cec:	3301      	adds	r3, #1
   84cee:	9308      	str	r3, [sp, #32]
   84cf0:	e736      	b.n	84b60 <_svfprintf_r+0x2c4>
   84cf2:	9b07      	ldr	r3, [sp, #28]
   84cf4:	06db      	lsls	r3, r3, #27
   84cf6:	f100 849c 	bmi.w	85632 <_svfprintf_r+0xd96>
   84cfa:	9b07      	ldr	r3, [sp, #28]
   84cfc:	065f      	lsls	r7, r3, #25
   84cfe:	f140 87b2 	bpl.w	85c66 <_svfprintf_r+0x13ca>
   84d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84d04:	2500      	movs	r5, #0
   84d06:	f853 4b04 	ldr.w	r4, [r3], #4
   84d0a:	930e      	str	r3, [sp, #56]	; 0x38
   84d0c:	b2a4      	uxth	r4, r4
   84d0e:	e6d1      	b.n	84ab4 <_svfprintf_r+0x218>
   84d10:	9b07      	ldr	r3, [sp, #28]
   84d12:	06d8      	lsls	r0, r3, #27
   84d14:	f100 8568 	bmi.w	857e8 <_svfprintf_r+0xf4c>
   84d18:	9b07      	ldr	r3, [sp, #28]
   84d1a:	0659      	lsls	r1, r3, #25
   84d1c:	f140 87be 	bpl.w	85c9c <_svfprintf_r+0x1400>
   84d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84d22:	f853 4b04 	ldr.w	r4, [r3], #4
   84d26:	b224      	sxth	r4, r4
   84d28:	17e5      	asrs	r5, r4, #31
   84d2a:	930e      	str	r3, [sp, #56]	; 0x38
   84d2c:	4622      	mov	r2, r4
   84d2e:	462b      	mov	r3, r5
   84d30:	e696      	b.n	84a60 <_svfprintf_r+0x1c4>
   84d32:	2100      	movs	r1, #0
   84d34:	2401      	movs	r4, #1
   84d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84d38:	460a      	mov	r2, r1
   84d3a:	f853 0b04 	ldr.w	r0, [r3], #4
   84d3e:	9408      	str	r4, [sp, #32]
   84d40:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   84d44:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   84d48:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   84d4c:	9109      	str	r1, [sp, #36]	; 0x24
   84d4e:	9112      	str	r1, [sp, #72]	; 0x48
   84d50:	9116      	str	r1, [sp, #88]	; 0x58
   84d52:	9110      	str	r1, [sp, #64]	; 0x40
   84d54:	940c      	str	r4, [sp, #48]	; 0x30
   84d56:	af3d      	add	r7, sp, #244	; 0xf4
   84d58:	e702      	b.n	84b60 <_svfprintf_r+0x2c4>
   84d5a:	2500      	movs	r5, #0
   84d5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   84d5e:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   84d62:	f854 7b04 	ldr.w	r7, [r4], #4
   84d66:	2f00      	cmp	r7, #0
   84d68:	f000 859f 	beq.w	858aa <_svfprintf_r+0x100e>
   84d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84d6e:	4613      	mov	r3, r2
   84d70:	3301      	adds	r3, #1
   84d72:	f000 8770 	beq.w	85c56 <_svfprintf_r+0x13ba>
   84d76:	4629      	mov	r1, r5
   84d78:	4638      	mov	r0, r7
   84d7a:	f004 fac7 	bl	8930c <memchr>
   84d7e:	900d      	str	r0, [sp, #52]	; 0x34
   84d80:	2800      	cmp	r0, #0
   84d82:	f001 80b9 	beq.w	85ef8 <_svfprintf_r+0x165c>
   84d86:	462b      	mov	r3, r5
   84d88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84d8a:	9509      	str	r5, [sp, #36]	; 0x24
   84d8c:	1bd2      	subs	r2, r2, r7
   84d8e:	920c      	str	r2, [sp, #48]	; 0x30
   84d90:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   84d94:	9208      	str	r2, [sp, #32]
   84d96:	940e      	str	r4, [sp, #56]	; 0x38
   84d98:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   84d9c:	930d      	str	r3, [sp, #52]	; 0x34
   84d9e:	9312      	str	r3, [sp, #72]	; 0x48
   84da0:	9316      	str	r3, [sp, #88]	; 0x58
   84da2:	9310      	str	r3, [sp, #64]	; 0x40
   84da4:	e79e      	b.n	84ce4 <_svfprintf_r+0x448>
   84da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84da8:	425b      	negs	r3, r3
   84daa:	930b      	str	r3, [sp, #44]	; 0x2c
   84dac:	9b07      	ldr	r3, [sp, #28]
   84dae:	f89b 6000 	ldrb.w	r6, [fp]
   84db2:	f043 0304 	orr.w	r3, r3, #4
   84db6:	9307      	str	r3, [sp, #28]
   84db8:	e5bb      	b.n	84932 <_svfprintf_r+0x96>
   84dba:	9b07      	ldr	r3, [sp, #28]
   84dbc:	f043 0310 	orr.w	r3, r3, #16
   84dc0:	9308      	str	r3, [sp, #32]
   84dc2:	9b08      	ldr	r3, [sp, #32]
   84dc4:	069d      	lsls	r5, r3, #26
   84dc6:	f140 83ea 	bpl.w	8559e <_svfprintf_r+0xd02>
   84dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84dcc:	3307      	adds	r3, #7
   84dce:	f023 0307 	bic.w	r3, r3, #7
   84dd2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   84dd6:	930e      	str	r3, [sp, #56]	; 0x38
   84dd8:	2301      	movs	r3, #1
   84dda:	e670      	b.n	84abe <_svfprintf_r+0x222>
   84ddc:	f647 0230 	movw	r2, #30768	; 0x7830
   84de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84de2:	9907      	ldr	r1, [sp, #28]
   84de4:	f853 4b04 	ldr.w	r4, [r3], #4
   84de8:	f041 0102 	orr.w	r1, r1, #2
   84dec:	930e      	str	r3, [sp, #56]	; 0x38
   84dee:	4b4e      	ldr	r3, [pc, #312]	; (84f28 <_svfprintf_r+0x68c>)
   84df0:	2500      	movs	r5, #0
   84df2:	9319      	str	r3, [sp, #100]	; 0x64
   84df4:	2678      	movs	r6, #120	; 0x78
   84df6:	2302      	movs	r3, #2
   84df8:	9108      	str	r1, [sp, #32]
   84dfa:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   84dfe:	e65e      	b.n	84abe <_svfprintf_r+0x222>
   84e00:	9b07      	ldr	r3, [sp, #28]
   84e02:	069d      	lsls	r5, r3, #26
   84e04:	f100 8408 	bmi.w	85618 <_svfprintf_r+0xd7c>
   84e08:	9b07      	ldr	r3, [sp, #28]
   84e0a:	06dc      	lsls	r4, r3, #27
   84e0c:	f100 86e1 	bmi.w	85bd2 <_svfprintf_r+0x1336>
   84e10:	9b07      	ldr	r3, [sp, #28]
   84e12:	0658      	lsls	r0, r3, #25
   84e14:	f100 8795 	bmi.w	85d42 <_svfprintf_r+0x14a6>
   84e18:	9b07      	ldr	r3, [sp, #28]
   84e1a:	0599      	lsls	r1, r3, #22
   84e1c:	f140 86d9 	bpl.w	85bd2 <_svfprintf_r+0x1336>
   84e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84e22:	990a      	ldr	r1, [sp, #40]	; 0x28
   84e24:	f853 2b04 	ldr.w	r2, [r3], #4
   84e28:	465f      	mov	r7, fp
   84e2a:	7011      	strb	r1, [r2, #0]
   84e2c:	930e      	str	r3, [sp, #56]	; 0x38
   84e2e:	e703      	b.n	84c38 <_svfprintf_r+0x39c>
   84e30:	f89b 6000 	ldrb.w	r6, [fp]
   84e34:	9b07      	ldr	r3, [sp, #28]
   84e36:	2e6c      	cmp	r6, #108	; 0x6c
   84e38:	f000 8508 	beq.w	8584c <_svfprintf_r+0xfb0>
   84e3c:	f043 0310 	orr.w	r3, r3, #16
   84e40:	9307      	str	r3, [sp, #28]
   84e42:	e576      	b.n	84932 <_svfprintf_r+0x96>
   84e44:	f89b 6000 	ldrb.w	r6, [fp]
   84e48:	9b07      	ldr	r3, [sp, #28]
   84e4a:	2e68      	cmp	r6, #104	; 0x68
   84e4c:	f000 8507 	beq.w	8585e <_svfprintf_r+0xfc2>
   84e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84e54:	9307      	str	r3, [sp, #28]
   84e56:	e56c      	b.n	84932 <_svfprintf_r+0x96>
   84e58:	9b07      	ldr	r3, [sp, #28]
   84e5a:	f89b 6000 	ldrb.w	r6, [fp]
   84e5e:	f043 0308 	orr.w	r3, r3, #8
   84e62:	9307      	str	r3, [sp, #28]
   84e64:	e565      	b.n	84932 <_svfprintf_r+0x96>
   84e66:	4648      	mov	r0, r9
   84e68:	f003 ff00 	bl	88c6c <_localeconv_r>
   84e6c:	6843      	ldr	r3, [r0, #4]
   84e6e:	4618      	mov	r0, r3
   84e70:	931c      	str	r3, [sp, #112]	; 0x70
   84e72:	f7ff fcb1 	bl	847d8 <strlen>
   84e76:	4603      	mov	r3, r0
   84e78:	4648      	mov	r0, r9
   84e7a:	461d      	mov	r5, r3
   84e7c:	931d      	str	r3, [sp, #116]	; 0x74
   84e7e:	f003 fef5 	bl	88c6c <_localeconv_r>
   84e82:	6882      	ldr	r2, [r0, #8]
   84e84:	2120      	movs	r1, #32
   84e86:	921a      	str	r2, [sp, #104]	; 0x68
   84e88:	2d00      	cmp	r5, #0
   84e8a:	f43f adcd 	beq.w	84a28 <_svfprintf_r+0x18c>
   84e8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84e90:	2b00      	cmp	r3, #0
   84e92:	f43f adc9 	beq.w	84a28 <_svfprintf_r+0x18c>
   84e96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   84e98:	781b      	ldrb	r3, [r3, #0]
   84e9a:	2b00      	cmp	r3, #0
   84e9c:	f43f adc4 	beq.w	84a28 <_svfprintf_r+0x18c>
   84ea0:	9b07      	ldr	r3, [sp, #28]
   84ea2:	f89b 6000 	ldrb.w	r6, [fp]
   84ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   84eaa:	9307      	str	r3, [sp, #28]
   84eac:	e541      	b.n	84932 <_svfprintf_r+0x96>
   84eae:	9b07      	ldr	r3, [sp, #28]
   84eb0:	f89b 6000 	ldrb.w	r6, [fp]
   84eb4:	f043 0301 	orr.w	r3, r3, #1
   84eb8:	9307      	str	r3, [sp, #28]
   84eba:	e53a      	b.n	84932 <_svfprintf_r+0x96>
   84ebc:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   84ec0:	2b00      	cmp	r3, #0
   84ec2:	f47f adb1 	bne.w	84a28 <_svfprintf_r+0x18c>
   84ec6:	f89b 6000 	ldrb.w	r6, [fp]
   84eca:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   84ece:	e530      	b.n	84932 <_svfprintf_r+0x96>
   84ed0:	9b07      	ldr	r3, [sp, #28]
   84ed2:	f89b 6000 	ldrb.w	r6, [fp]
   84ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84eda:	9307      	str	r3, [sp, #28]
   84edc:	e529      	b.n	84932 <_svfprintf_r+0x96>
   84ede:	465a      	mov	r2, fp
   84ee0:	f812 6b01 	ldrb.w	r6, [r2], #1
   84ee4:	2e2a      	cmp	r6, #42	; 0x2a
   84ee6:	f001 8251 	beq.w	8638c <_svfprintf_r+0x1af0>
   84eea:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   84eee:	2b09      	cmp	r3, #9
   84ef0:	4693      	mov	fp, r2
   84ef2:	bf98      	it	ls
   84ef4:	2200      	movls	r2, #0
   84ef6:	f201 80ef 	bhi.w	860d8 <_svfprintf_r+0x183c>
   84efa:	f81b 6b01 	ldrb.w	r6, [fp], #1
   84efe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   84f02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   84f06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   84f0a:	2b09      	cmp	r3, #9
   84f0c:	d9f5      	bls.n	84efa <_svfprintf_r+0x65e>
   84f0e:	9209      	str	r2, [sp, #36]	; 0x24
   84f10:	e511      	b.n	84936 <_svfprintf_r+0x9a>
   84f12:	f89b 6000 	ldrb.w	r6, [fp]
   84f16:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   84f1a:	e50a      	b.n	84932 <_svfprintf_r+0x96>
   84f1c:	7fefffff 	.word	0x7fefffff
   84f20:	0008b380 	.word	0x0008b380
   84f24:	0008b384 	.word	0x0008b384
   84f28:	0008b390 	.word	0x0008b390
   84f2c:	9a07      	ldr	r2, [sp, #28]
   84f2e:	9208      	str	r2, [sp, #32]
   84f30:	2b01      	cmp	r3, #1
   84f32:	f000 81b4 	beq.w	8529e <_svfprintf_r+0xa02>
   84f36:	2b02      	cmp	r3, #2
   84f38:	f000 8159 	beq.w	851ee <_svfprintf_r+0x952>
   84f3c:	af56      	add	r7, sp, #344	; 0x158
   84f3e:	08e2      	lsrs	r2, r4, #3
   84f40:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84f44:	08e9      	lsrs	r1, r5, #3
   84f46:	f004 0307 	and.w	r3, r4, #7
   84f4a:	460d      	mov	r5, r1
   84f4c:	4614      	mov	r4, r2
   84f4e:	3330      	adds	r3, #48	; 0x30
   84f50:	ea54 0105 	orrs.w	r1, r4, r5
   84f54:	463a      	mov	r2, r7
   84f56:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84f5a:	d1f0      	bne.n	84f3e <_svfprintf_r+0x6a2>
   84f5c:	9908      	ldr	r1, [sp, #32]
   84f5e:	4608      	mov	r0, r1
   84f60:	07c0      	lsls	r0, r0, #31
   84f62:	f100 82b8 	bmi.w	854d6 <_svfprintf_r+0xc3a>
   84f66:	ab56      	add	r3, sp, #344	; 0x158
   84f68:	1bdb      	subs	r3, r3, r7
   84f6a:	9107      	str	r1, [sp, #28]
   84f6c:	930c      	str	r3, [sp, #48]	; 0x30
   84f6e:	2300      	movs	r3, #0
   84f70:	9909      	ldr	r1, [sp, #36]	; 0x24
   84f72:	930d      	str	r3, [sp, #52]	; 0x34
   84f74:	9312      	str	r3, [sp, #72]	; 0x48
   84f76:	9316      	str	r3, [sp, #88]	; 0x58
   84f78:	9310      	str	r3, [sp, #64]	; 0x40
   84f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84f7c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   84f80:	428b      	cmp	r3, r1
   84f82:	bfb8      	it	lt
   84f84:	460b      	movlt	r3, r1
   84f86:	9308      	str	r3, [sp, #32]
   84f88:	e6ac      	b.n	84ce4 <_svfprintf_r+0x448>
   84f8a:	2e65      	cmp	r6, #101	; 0x65
   84f8c:	f340 80d8 	ble.w	85140 <_svfprintf_r+0x8a4>
   84f90:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   84f94:	2200      	movs	r2, #0
   84f96:	2300      	movs	r3, #0
   84f98:	f005 ff6c 	bl	8ae74 <__aeabi_dcmpeq>
   84f9c:	2800      	cmp	r0, #0
   84f9e:	f000 821e 	beq.w	853de <_svfprintf_r+0xb42>
   84fa2:	2101      	movs	r1, #1
   84fa4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   84fa6:	4ac5      	ldr	r2, [pc, #788]	; (852bc <_svfprintf_r+0xa20>)
   84fa8:	440b      	add	r3, r1
   84faa:	440c      	add	r4, r1
   84fac:	2b07      	cmp	r3, #7
   84fae:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   84fb2:	e9c8 2100 	strd	r2, r1, [r8]
   84fb6:	f300 85bb 	bgt.w	85b30 <_svfprintf_r+0x1294>
   84fba:	f108 0808 	add.w	r8, r8, #8
   84fbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84fc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84fc2:	4293      	cmp	r3, r2
   84fc4:	f280 8321 	bge.w	8560a <_svfprintf_r+0xd6e>
   84fc8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   84fca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   84fcc:	3301      	adds	r3, #1
   84fce:	9918      	ldr	r1, [sp, #96]	; 0x60
   84fd0:	4414      	add	r4, r2
   84fd2:	2b07      	cmp	r3, #7
   84fd4:	e9c8 1200 	strd	r1, r2, [r8]
   84fd8:	942c      	str	r4, [sp, #176]	; 0xb0
   84fda:	932b      	str	r3, [sp, #172]	; 0xac
   84fdc:	f300 8448 	bgt.w	85870 <_svfprintf_r+0xfd4>
   84fe0:	f108 0808 	add.w	r8, r8, #8
   84fe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84fe6:	1e5d      	subs	r5, r3, #1
   84fe8:	2d00      	cmp	r5, #0
   84fea:	f77f ae06 	ble.w	84bfa <_svfprintf_r+0x35e>
   84fee:	2d10      	cmp	r5, #16
   84ff0:	f340 85c7 	ble.w	85b82 <_svfprintf_r+0x12e6>
   84ff4:	4fb2      	ldr	r7, [pc, #712]	; (852c0 <_svfprintf_r+0xa24>)
   84ff6:	2610      	movs	r6, #16
   84ff8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   84ffa:	970f      	str	r7, [sp, #60]	; 0x3c
   84ffc:	e005      	b.n	8500a <_svfprintf_r+0x76e>
   84ffe:	f108 0808 	add.w	r8, r8, #8
   85002:	3d10      	subs	r5, #16
   85004:	2d10      	cmp	r5, #16
   85006:	f340 85bf 	ble.w	85b88 <_svfprintf_r+0x12ec>
   8500a:	3301      	adds	r3, #1
   8500c:	3410      	adds	r4, #16
   8500e:	2b07      	cmp	r3, #7
   85010:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85014:	e9c8 7600 	strd	r7, r6, [r8]
   85018:	ddf1      	ble.n	84ffe <_svfprintf_r+0x762>
   8501a:	4651      	mov	r1, sl
   8501c:	4648      	mov	r0, r9
   8501e:	aa2a      	add	r2, sp, #168	; 0xa8
   85020:	f005 f826 	bl	8a070 <__ssprint_r>
   85024:	2800      	cmp	r0, #0
   85026:	f040 8081 	bne.w	8512c <_svfprintf_r+0x890>
   8502a:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8502e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85032:	e7e6      	b.n	85002 <_svfprintf_r+0x766>
   85034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85036:	9a08      	ldr	r2, [sp, #32]
   85038:	1a9d      	subs	r5, r3, r2
   8503a:	2d00      	cmp	r5, #0
   8503c:	f77f adc6 	ble.w	84bcc <_svfprintf_r+0x330>
   85040:	2d10      	cmp	r5, #16
   85042:	f341 8069 	ble.w	86118 <_svfprintf_r+0x187c>
   85046:	489e      	ldr	r0, [pc, #632]	; (852c0 <_svfprintf_r+0xa24>)
   85048:	4621      	mov	r1, r4
   8504a:	2310      	movs	r3, #16
   8504c:	4604      	mov	r4, r0
   8504e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85050:	900f      	str	r0, [sp, #60]	; 0x3c
   85052:	e004      	b.n	8505e <_svfprintf_r+0x7c2>
   85054:	3d10      	subs	r5, #16
   85056:	2d10      	cmp	r5, #16
   85058:	f108 0808 	add.w	r8, r8, #8
   8505c:	dd17      	ble.n	8508e <_svfprintf_r+0x7f2>
   8505e:	3201      	adds	r2, #1
   85060:	3110      	adds	r1, #16
   85062:	2a07      	cmp	r2, #7
   85064:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   85068:	e9c8 4300 	strd	r4, r3, [r8]
   8506c:	ddf2      	ble.n	85054 <_svfprintf_r+0x7b8>
   8506e:	4651      	mov	r1, sl
   85070:	4648      	mov	r0, r9
   85072:	aa2a      	add	r2, sp, #168	; 0xa8
   85074:	f004 fffc 	bl	8a070 <__ssprint_r>
   85078:	2800      	cmp	r0, #0
   8507a:	d157      	bne.n	8512c <_svfprintf_r+0x890>
   8507c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85080:	3d10      	subs	r5, #16
   85082:	2d10      	cmp	r5, #16
   85084:	f04f 0310 	mov.w	r3, #16
   85088:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8508c:	dce7      	bgt.n	8505e <_svfprintf_r+0x7c2>
   8508e:	460c      	mov	r4, r1
   85090:	3201      	adds	r2, #1
   85092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85094:	442c      	add	r4, r5
   85096:	2a07      	cmp	r2, #7
   85098:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8509c:	e9c8 3500 	strd	r3, r5, [r8]
   850a0:	f300 858a 	bgt.w	85bb8 <_svfprintf_r+0x131c>
   850a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   850a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   850a8:	f108 0808 	add.w	r8, r8, #8
   850ac:	1a9d      	subs	r5, r3, r2
   850ae:	2d00      	cmp	r5, #0
   850b0:	f77f ad92 	ble.w	84bd8 <_svfprintf_r+0x33c>
   850b4:	2d10      	cmp	r5, #16
   850b6:	f340 860a 	ble.w	85cce <_svfprintf_r+0x1432>
   850ba:	4881      	ldr	r0, [pc, #516]	; (852c0 <_svfprintf_r+0xa24>)
   850bc:	4621      	mov	r1, r4
   850be:	2310      	movs	r3, #16
   850c0:	4604      	mov	r4, r0
   850c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   850c4:	900f      	str	r0, [sp, #60]	; 0x3c
   850c6:	e004      	b.n	850d2 <_svfprintf_r+0x836>
   850c8:	3d10      	subs	r5, #16
   850ca:	2d10      	cmp	r5, #16
   850cc:	f108 0808 	add.w	r8, r8, #8
   850d0:	dd16      	ble.n	85100 <_svfprintf_r+0x864>
   850d2:	3201      	adds	r2, #1
   850d4:	3110      	adds	r1, #16
   850d6:	2a07      	cmp	r2, #7
   850d8:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   850dc:	e9c8 4300 	strd	r4, r3, [r8]
   850e0:	ddf2      	ble.n	850c8 <_svfprintf_r+0x82c>
   850e2:	4651      	mov	r1, sl
   850e4:	4648      	mov	r0, r9
   850e6:	aa2a      	add	r2, sp, #168	; 0xa8
   850e8:	f004 ffc2 	bl	8a070 <__ssprint_r>
   850ec:	b9f0      	cbnz	r0, 8512c <_svfprintf_r+0x890>
   850ee:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   850f2:	3d10      	subs	r5, #16
   850f4:	2d10      	cmp	r5, #16
   850f6:	f04f 0310 	mov.w	r3, #16
   850fa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   850fe:	dce8      	bgt.n	850d2 <_svfprintf_r+0x836>
   85100:	460c      	mov	r4, r1
   85102:	3201      	adds	r2, #1
   85104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85106:	442c      	add	r4, r5
   85108:	2a07      	cmp	r2, #7
   8510a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8510e:	e9c8 3500 	strd	r3, r5, [r8]
   85112:	f300 8237 	bgt.w	85584 <_svfprintf_r+0xce8>
   85116:	f108 0808 	add.w	r8, r8, #8
   8511a:	e55d      	b.n	84bd8 <_svfprintf_r+0x33c>
   8511c:	4651      	mov	r1, sl
   8511e:	4648      	mov	r0, r9
   85120:	aa2a      	add	r2, sp, #168	; 0xa8
   85122:	f004 ffa5 	bl	8a070 <__ssprint_r>
   85126:	2800      	cmp	r0, #0
   85128:	f43f ad7b 	beq.w	84c22 <_svfprintf_r+0x386>
   8512c:	46d3      	mov	fp, sl
   8512e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85130:	2b00      	cmp	r3, #0
   85132:	f43f ad8a 	beq.w	84c4a <_svfprintf_r+0x3ae>
   85136:	4648      	mov	r0, r9
   85138:	990d      	ldr	r1, [sp, #52]	; 0x34
   8513a:	f003 faf1 	bl	88720 <_free_r>
   8513e:	e584      	b.n	84c4a <_svfprintf_r+0x3ae>
   85140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85142:	2b01      	cmp	r3, #1
   85144:	f340 81d5 	ble.w	854f2 <_svfprintf_r+0xc56>
   85148:	2301      	movs	r3, #1
   8514a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   8514c:	441c      	add	r4, r3
   8514e:	441d      	add	r5, r3
   85150:	2d07      	cmp	r5, #7
   85152:	942c      	str	r4, [sp, #176]	; 0xb0
   85154:	f8c8 7000 	str.w	r7, [r8]
   85158:	952b      	str	r5, [sp, #172]	; 0xac
   8515a:	f8c8 3004 	str.w	r3, [r8, #4]
   8515e:	f300 823a 	bgt.w	855d6 <_svfprintf_r+0xd3a>
   85162:	f108 0808 	add.w	r8, r8, #8
   85166:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85168:	3501      	adds	r5, #1
   8516a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   8516c:	441c      	add	r4, r3
   8516e:	2d07      	cmp	r5, #7
   85170:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85174:	e9c8 2300 	strd	r2, r3, [r8]
   85178:	f300 823a 	bgt.w	855f0 <_svfprintf_r+0xd54>
   8517c:	f108 0808 	add.w	r8, r8, #8
   85180:	2300      	movs	r3, #0
   85182:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85186:	2200      	movs	r2, #0
   85188:	f005 fe74 	bl	8ae74 <__aeabi_dcmpeq>
   8518c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8518e:	2800      	cmp	r0, #0
   85190:	f040 81cd 	bne.w	8552e <_svfprintf_r+0xc92>
   85194:	3b01      	subs	r3, #1
   85196:	3501      	adds	r5, #1
   85198:	3701      	adds	r7, #1
   8519a:	441c      	add	r4, r3
   8519c:	2d07      	cmp	r5, #7
   8519e:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   851a2:	f8c8 7000 	str.w	r7, [r8]
   851a6:	f8c8 3004 	str.w	r3, [r8, #4]
   851aa:	f300 84dc 	bgt.w	85b66 <_svfprintf_r+0x12ca>
   851ae:	f108 0808 	add.w	r8, r8, #8
   851b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   851b4:	3501      	adds	r5, #1
   851b6:	4414      	add	r4, r2
   851b8:	ab26      	add	r3, sp, #152	; 0x98
   851ba:	2d07      	cmp	r5, #7
   851bc:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   851c0:	e9c8 3200 	strd	r3, r2, [r8]
   851c4:	f77f ad17 	ble.w	84bf6 <_svfprintf_r+0x35a>
   851c8:	4651      	mov	r1, sl
   851ca:	4648      	mov	r0, r9
   851cc:	aa2a      	add	r2, sp, #168	; 0xa8
   851ce:	f004 ff4f 	bl	8a070 <__ssprint_r>
   851d2:	2800      	cmp	r0, #0
   851d4:	d1aa      	bne.n	8512c <_svfprintf_r+0x890>
   851d6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   851d8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   851dc:	e50d      	b.n	84bfa <_svfprintf_r+0x35e>
   851de:	2b01      	cmp	r3, #1
   851e0:	f000 87ca 	beq.w	86178 <_svfprintf_r+0x18dc>
   851e4:	2b02      	cmp	r3, #2
   851e6:	9b07      	ldr	r3, [sp, #28]
   851e8:	9308      	str	r3, [sp, #32]
   851ea:	f47f aea7 	bne.w	84f3c <_svfprintf_r+0x6a0>
   851ee:	9819      	ldr	r0, [sp, #100]	; 0x64
   851f0:	af56      	add	r7, sp, #344	; 0x158
   851f2:	0923      	lsrs	r3, r4, #4
   851f4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   851f8:	0929      	lsrs	r1, r5, #4
   851fa:	f004 020f 	and.w	r2, r4, #15
   851fe:	460d      	mov	r5, r1
   85200:	461c      	mov	r4, r3
   85202:	5c83      	ldrb	r3, [r0, r2]
   85204:	f807 3d01 	strb.w	r3, [r7, #-1]!
   85208:	ea54 0305 	orrs.w	r3, r4, r5
   8520c:	d1f1      	bne.n	851f2 <_svfprintf_r+0x956>
   8520e:	9b08      	ldr	r3, [sp, #32]
   85210:	9307      	str	r3, [sp, #28]
   85212:	ab56      	add	r3, sp, #344	; 0x158
   85214:	1bdb      	subs	r3, r3, r7
   85216:	930c      	str	r3, [sp, #48]	; 0x30
   85218:	e6a9      	b.n	84f6e <_svfprintf_r+0x6d2>
   8521a:	2d10      	cmp	r5, #16
   8521c:	f340 8668 	ble.w	85ef0 <_svfprintf_r+0x1654>
   85220:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85224:	931e      	str	r3, [sp, #120]	; 0x78
   85226:	460b      	mov	r3, r1
   85228:	4639      	mov	r1, r7
   8522a:	2410      	movs	r4, #16
   8522c:	4637      	mov	r7, r6
   8522e:	4656      	mov	r6, sl
   85230:	46ca      	mov	sl, r9
   85232:	4689      	mov	r9, r1
   85234:	e004      	b.n	85240 <_svfprintf_r+0x9a4>
   85236:	3d10      	subs	r5, #16
   85238:	2d10      	cmp	r5, #16
   8523a:	f108 0808 	add.w	r8, r8, #8
   8523e:	dd17      	ble.n	85270 <_svfprintf_r+0x9d4>
   85240:	3201      	adds	r2, #1
   85242:	4920      	ldr	r1, [pc, #128]	; (852c4 <_svfprintf_r+0xa28>)
   85244:	3310      	adds	r3, #16
   85246:	2a07      	cmp	r2, #7
   85248:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   8524c:	e9c8 1400 	strd	r1, r4, [r8]
   85250:	ddf1      	ble.n	85236 <_svfprintf_r+0x99a>
   85252:	4631      	mov	r1, r6
   85254:	4650      	mov	r0, sl
   85256:	aa2a      	add	r2, sp, #168	; 0xa8
   85258:	f004 ff0a 	bl	8a070 <__ssprint_r>
   8525c:	2800      	cmp	r0, #0
   8525e:	f040 8458 	bne.w	85b12 <_svfprintf_r+0x1276>
   85262:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   85266:	3d10      	subs	r5, #16
   85268:	2d10      	cmp	r5, #16
   8526a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8526e:	dce7      	bgt.n	85240 <_svfprintf_r+0x9a4>
   85270:	4648      	mov	r0, r9
   85272:	46d1      	mov	r9, sl
   85274:	46b2      	mov	sl, r6
   85276:	463e      	mov	r6, r7
   85278:	4607      	mov	r7, r0
   8527a:	4619      	mov	r1, r3
   8527c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8527e:	194c      	adds	r4, r1, r5
   85280:	3201      	adds	r2, #1
   85282:	4910      	ldr	r1, [pc, #64]	; (852c4 <_svfprintf_r+0xa28>)
   85284:	2a07      	cmp	r2, #7
   85286:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8528a:	e9c8 1500 	strd	r1, r5, [r8]
   8528e:	f300 841f 	bgt.w	85ad0 <_svfprintf_r+0x1234>
   85292:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85296:	f108 0808 	add.w	r8, r8, #8
   8529a:	e474      	b.n	84b86 <_svfprintf_r+0x2ea>
   8529c:	9308      	str	r3, [sp, #32]
   8529e:	2d00      	cmp	r5, #0
   852a0:	bf08      	it	eq
   852a2:	2c0a      	cmpeq	r4, #10
   852a4:	f080 83d0 	bcs.w	85a48 <_svfprintf_r+0x11ac>
   852a8:	9b08      	ldr	r3, [sp, #32]
   852aa:	3430      	adds	r4, #48	; 0x30
   852ac:	9307      	str	r3, [sp, #28]
   852ae:	2301      	movs	r3, #1
   852b0:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   852b4:	930c      	str	r3, [sp, #48]	; 0x30
   852b6:	f20d 1757 	addw	r7, sp, #343	; 0x157
   852ba:	e658      	b.n	84f6e <_svfprintf_r+0x6d2>
   852bc:	0008b3c0 	.word	0x0008b3c0
   852c0:	0008b3d4 	.word	0x0008b3d4
   852c4:	0008b3c4 	.word	0x0008b3c4
   852c8:	4651      	mov	r1, sl
   852ca:	4648      	mov	r0, r9
   852cc:	aa2a      	add	r2, sp, #168	; 0xa8
   852ce:	f004 fecf 	bl	8a070 <__ssprint_r>
   852d2:	2800      	cmp	r0, #0
   852d4:	f47f af2a 	bne.w	8512c <_svfprintf_r+0x890>
   852d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   852da:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   852dc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   852e0:	2a00      	cmp	r2, #0
   852e2:	f040 847f 	bne.w	85be4 <_svfprintf_r+0x1348>
   852e6:	9b07      	ldr	r3, [sp, #28]
   852e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   852ea:	f003 0301 	and.w	r3, r3, #1
   852ee:	4313      	orrs	r3, r2
   852f0:	f43f ac83 	beq.w	84bfa <_svfprintf_r+0x35e>
   852f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   852f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   852f8:	3301      	adds	r3, #1
   852fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   852fc:	4414      	add	r4, r2
   852fe:	2b07      	cmp	r3, #7
   85300:	e9c8 1200 	strd	r1, r2, [r8]
   85304:	942c      	str	r4, [sp, #176]	; 0xb0
   85306:	932b      	str	r3, [sp, #172]	; 0xac
   85308:	f300 8524 	bgt.w	85d54 <_svfprintf_r+0x14b8>
   8530c:	f108 0808 	add.w	r8, r8, #8
   85310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85312:	3301      	adds	r3, #1
   85314:	4414      	add	r4, r2
   85316:	2b07      	cmp	r3, #7
   85318:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8531c:	e9c8 7200 	strd	r7, r2, [r8]
   85320:	f77f ac69 	ble.w	84bf6 <_svfprintf_r+0x35a>
   85324:	4651      	mov	r1, sl
   85326:	4648      	mov	r0, r9
   85328:	aa2a      	add	r2, sp, #168	; 0xa8
   8532a:	f004 fea1 	bl	8a070 <__ssprint_r>
   8532e:	2800      	cmp	r0, #0
   85330:	f47f aefc 	bne.w	8512c <_svfprintf_r+0x890>
   85334:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85336:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8533a:	e45e      	b.n	84bfa <_svfprintf_r+0x35e>
   8533c:	4651      	mov	r1, sl
   8533e:	4648      	mov	r0, r9
   85340:	aa2a      	add	r2, sp, #168	; 0xa8
   85342:	931e      	str	r3, [sp, #120]	; 0x78
   85344:	f004 fe94 	bl	8a070 <__ssprint_r>
   85348:	2800      	cmp	r0, #0
   8534a:	f47f aeef 	bne.w	8512c <_svfprintf_r+0x890>
   8534e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85350:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   85352:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85356:	e426      	b.n	84ba6 <_svfprintf_r+0x30a>
   85358:	4651      	mov	r1, sl
   8535a:	4648      	mov	r0, r9
   8535c:	aa2a      	add	r2, sp, #168	; 0xa8
   8535e:	f004 fe87 	bl	8a070 <__ssprint_r>
   85362:	2800      	cmp	r0, #0
   85364:	f47f aee2 	bne.w	8512c <_svfprintf_r+0x890>
   85368:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8536a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8536e:	e429      	b.n	84bc4 <_svfprintf_r+0x328>
   85370:	2d10      	cmp	r5, #16
   85372:	f340 86be 	ble.w	860f2 <_svfprintf_r+0x1856>
   85376:	2610      	movs	r6, #16
   85378:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8537a:	e004      	b.n	85386 <_svfprintf_r+0xaea>
   8537c:	3d10      	subs	r5, #16
   8537e:	2d10      	cmp	r5, #16
   85380:	f108 0808 	add.w	r8, r8, #8
   85384:	dd17      	ble.n	853b6 <_svfprintf_r+0xb1a>
   85386:	3301      	adds	r3, #1
   85388:	4aad      	ldr	r2, [pc, #692]	; (85640 <_svfprintf_r+0xda4>)
   8538a:	3410      	adds	r4, #16
   8538c:	2b07      	cmp	r3, #7
   8538e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85392:	e9c8 2600 	strd	r2, r6, [r8]
   85396:	ddf1      	ble.n	8537c <_svfprintf_r+0xae0>
   85398:	4651      	mov	r1, sl
   8539a:	4648      	mov	r0, r9
   8539c:	aa2a      	add	r2, sp, #168	; 0xa8
   8539e:	f004 fe67 	bl	8a070 <__ssprint_r>
   853a2:	2800      	cmp	r0, #0
   853a4:	f47f aec2 	bne.w	8512c <_svfprintf_r+0x890>
   853a8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   853ac:	3d10      	subs	r5, #16
   853ae:	2d10      	cmp	r5, #16
   853b0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   853b4:	dce7      	bgt.n	85386 <_svfprintf_r+0xaea>
   853b6:	3301      	adds	r3, #1
   853b8:	4aa1      	ldr	r2, [pc, #644]	; (85640 <_svfprintf_r+0xda4>)
   853ba:	442c      	add	r4, r5
   853bc:	2b07      	cmp	r3, #7
   853be:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   853c2:	e9c8 2500 	strd	r2, r5, [r8]
   853c6:	f77f ac21 	ble.w	84c0c <_svfprintf_r+0x370>
   853ca:	4651      	mov	r1, sl
   853cc:	4648      	mov	r0, r9
   853ce:	aa2a      	add	r2, sp, #168	; 0xa8
   853d0:	f004 fe4e 	bl	8a070 <__ssprint_r>
   853d4:	2800      	cmp	r0, #0
   853d6:	f47f aea9 	bne.w	8512c <_svfprintf_r+0x890>
   853da:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   853dc:	e416      	b.n	84c0c <_svfprintf_r+0x370>
   853de:	9a24      	ldr	r2, [sp, #144]	; 0x90
   853e0:	2a00      	cmp	r2, #0
   853e2:	f340 8386 	ble.w	85af2 <_svfprintf_r+0x1256>
   853e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   853e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   853ea:	4293      	cmp	r3, r2
   853ec:	bfa8      	it	ge
   853ee:	4613      	movge	r3, r2
   853f0:	2b00      	cmp	r3, #0
   853f2:	461d      	mov	r5, r3
   853f4:	dd0b      	ble.n	8540e <_svfprintf_r+0xb72>
   853f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   853f8:	442c      	add	r4, r5
   853fa:	3301      	adds	r3, #1
   853fc:	2b07      	cmp	r3, #7
   853fe:	e9c8 7500 	strd	r7, r5, [r8]
   85402:	942c      	str	r4, [sp, #176]	; 0xb0
   85404:	932b      	str	r3, [sp, #172]	; 0xac
   85406:	f300 851e 	bgt.w	85e46 <_svfprintf_r+0x15aa>
   8540a:	f108 0808 	add.w	r8, r8, #8
   8540e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85410:	2d00      	cmp	r5, #0
   85412:	bfa8      	it	ge
   85414:	1b5b      	subge	r3, r3, r5
   85416:	2b00      	cmp	r3, #0
   85418:	461d      	mov	r5, r3
   8541a:	f300 8256 	bgt.w	858ca <_svfprintf_r+0x102e>
   8541e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85420:	443b      	add	r3, r7
   85422:	461e      	mov	r6, r3
   85424:	9b07      	ldr	r3, [sp, #28]
   85426:	055b      	lsls	r3, r3, #21
   85428:	f100 8277 	bmi.w	8591a <_svfprintf_r+0x107e>
   8542c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8542e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85430:	4293      	cmp	r3, r2
   85432:	db03      	blt.n	8543c <_svfprintf_r+0xba0>
   85434:	9a07      	ldr	r2, [sp, #28]
   85436:	07d5      	lsls	r5, r2, #31
   85438:	f140 847a 	bpl.w	85d30 <_svfprintf_r+0x1494>
   8543c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8543e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   85440:	3201      	adds	r2, #1
   85442:	9818      	ldr	r0, [sp, #96]	; 0x60
   85444:	440c      	add	r4, r1
   85446:	2a07      	cmp	r2, #7
   85448:	e9c8 0100 	strd	r0, r1, [r8]
   8544c:	942c      	str	r4, [sp, #176]	; 0xb0
   8544e:	922b      	str	r2, [sp, #172]	; 0xac
   85450:	f300 8506 	bgt.w	85e60 <_svfprintf_r+0x15c4>
   85454:	f108 0808 	add.w	r8, r8, #8
   85458:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8545a:	18bd      	adds	r5, r7, r2
   8545c:	1bad      	subs	r5, r5, r6
   8545e:	1ad3      	subs	r3, r2, r3
   85460:	429d      	cmp	r5, r3
   85462:	bfa8      	it	ge
   85464:	461d      	movge	r5, r3
   85466:	2d00      	cmp	r5, #0
   85468:	dd0b      	ble.n	85482 <_svfprintf_r+0xbe6>
   8546a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8546c:	442c      	add	r4, r5
   8546e:	3201      	adds	r2, #1
   85470:	2a07      	cmp	r2, #7
   85472:	e9c8 6500 	strd	r6, r5, [r8]
   85476:	942c      	str	r4, [sp, #176]	; 0xb0
   85478:	922b      	str	r2, [sp, #172]	; 0xac
   8547a:	f300 855f 	bgt.w	85f3c <_svfprintf_r+0x16a0>
   8547e:	f108 0808 	add.w	r8, r8, #8
   85482:	2d00      	cmp	r5, #0
   85484:	bfb4      	ite	lt
   85486:	461d      	movlt	r5, r3
   85488:	1b5d      	subge	r5, r3, r5
   8548a:	2d00      	cmp	r5, #0
   8548c:	f77f abb5 	ble.w	84bfa <_svfprintf_r+0x35e>
   85490:	2d10      	cmp	r5, #16
   85492:	f340 8376 	ble.w	85b82 <_svfprintf_r+0x12e6>
   85496:	4f6b      	ldr	r7, [pc, #428]	; (85644 <_svfprintf_r+0xda8>)
   85498:	2610      	movs	r6, #16
   8549a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8549c:	970f      	str	r7, [sp, #60]	; 0x3c
   8549e:	e005      	b.n	854ac <_svfprintf_r+0xc10>
   854a0:	f108 0808 	add.w	r8, r8, #8
   854a4:	3d10      	subs	r5, #16
   854a6:	2d10      	cmp	r5, #16
   854a8:	f340 836e 	ble.w	85b88 <_svfprintf_r+0x12ec>
   854ac:	3301      	adds	r3, #1
   854ae:	3410      	adds	r4, #16
   854b0:	2b07      	cmp	r3, #7
   854b2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   854b6:	e9c8 7600 	strd	r7, r6, [r8]
   854ba:	ddf1      	ble.n	854a0 <_svfprintf_r+0xc04>
   854bc:	4651      	mov	r1, sl
   854be:	4648      	mov	r0, r9
   854c0:	aa2a      	add	r2, sp, #168	; 0xa8
   854c2:	f004 fdd5 	bl	8a070 <__ssprint_r>
   854c6:	2800      	cmp	r0, #0
   854c8:	f47f ae30 	bne.w	8512c <_svfprintf_r+0x890>
   854cc:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   854d0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   854d4:	e7e6      	b.n	854a4 <_svfprintf_r+0xc08>
   854d6:	2b30      	cmp	r3, #48	; 0x30
   854d8:	f43f ae99 	beq.w	8520e <_svfprintf_r+0x972>
   854dc:	2330      	movs	r3, #48	; 0x30
   854de:	3a02      	subs	r2, #2
   854e0:	f807 3c01 	strb.w	r3, [r7, #-1]
   854e4:	9908      	ldr	r1, [sp, #32]
   854e6:	ab56      	add	r3, sp, #344	; 0x158
   854e8:	1a9b      	subs	r3, r3, r2
   854ea:	4617      	mov	r7, r2
   854ec:	9107      	str	r1, [sp, #28]
   854ee:	930c      	str	r3, [sp, #48]	; 0x30
   854f0:	e53d      	b.n	84f6e <_svfprintf_r+0x6d2>
   854f2:	9b07      	ldr	r3, [sp, #28]
   854f4:	07d8      	lsls	r0, r3, #31
   854f6:	f53f ae27 	bmi.w	85148 <_svfprintf_r+0x8ac>
   854fa:	2301      	movs	r3, #1
   854fc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   854fe:	441c      	add	r4, r3
   85500:	441d      	add	r5, r3
   85502:	2d07      	cmp	r5, #7
   85504:	942c      	str	r4, [sp, #176]	; 0xb0
   85506:	f8c8 7000 	str.w	r7, [r8]
   8550a:	952b      	str	r5, [sp, #172]	; 0xac
   8550c:	f8c8 3004 	str.w	r3, [r8, #4]
   85510:	f77f ae4d 	ble.w	851ae <_svfprintf_r+0x912>
   85514:	4651      	mov	r1, sl
   85516:	4648      	mov	r0, r9
   85518:	aa2a      	add	r2, sp, #168	; 0xa8
   8551a:	f004 fda9 	bl	8a070 <__ssprint_r>
   8551e:	2800      	cmp	r0, #0
   85520:	f47f ae04 	bne.w	8512c <_svfprintf_r+0x890>
   85524:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   85528:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8552c:	e641      	b.n	851b2 <_svfprintf_r+0x916>
   8552e:	1e5e      	subs	r6, r3, #1
   85530:	2e00      	cmp	r6, #0
   85532:	f77f ae3e 	ble.w	851b2 <_svfprintf_r+0x916>
   85536:	2e10      	cmp	r6, #16
   85538:	f340 871e 	ble.w	86378 <_svfprintf_r+0x1adc>
   8553c:	4b41      	ldr	r3, [pc, #260]	; (85644 <_svfprintf_r+0xda8>)
   8553e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   85542:	2710      	movs	r7, #16
   85544:	46d3      	mov	fp, sl
   85546:	930f      	str	r3, [sp, #60]	; 0x3c
   85548:	46ca      	mov	sl, r9
   8554a:	4699      	mov	r9, r3
   8554c:	e005      	b.n	8555a <_svfprintf_r+0xcbe>
   8554e:	f108 0808 	add.w	r8, r8, #8
   85552:	3e10      	subs	r6, #16
   85554:	2e10      	cmp	r6, #16
   85556:	f340 82f8 	ble.w	85b4a <_svfprintf_r+0x12ae>
   8555a:	3501      	adds	r5, #1
   8555c:	3410      	adds	r4, #16
   8555e:	2d07      	cmp	r5, #7
   85560:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85564:	e9c8 9700 	strd	r9, r7, [r8]
   85568:	ddf1      	ble.n	8554e <_svfprintf_r+0xcb2>
   8556a:	4659      	mov	r1, fp
   8556c:	4650      	mov	r0, sl
   8556e:	aa2a      	add	r2, sp, #168	; 0xa8
   85570:	f004 fd7e 	bl	8a070 <__ssprint_r>
   85574:	2800      	cmp	r0, #0
   85576:	f040 85cc 	bne.w	86112 <_svfprintf_r+0x1876>
   8557a:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8557e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85582:	e7e6      	b.n	85552 <_svfprintf_r+0xcb6>
   85584:	4651      	mov	r1, sl
   85586:	4648      	mov	r0, r9
   85588:	aa2a      	add	r2, sp, #168	; 0xa8
   8558a:	f004 fd71 	bl	8a070 <__ssprint_r>
   8558e:	2800      	cmp	r0, #0
   85590:	f47f adcc 	bne.w	8512c <_svfprintf_r+0x890>
   85594:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85596:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8559a:	f7ff bb1d 	b.w	84bd8 <_svfprintf_r+0x33c>
   8559e:	9b08      	ldr	r3, [sp, #32]
   855a0:	06dc      	lsls	r4, r3, #27
   855a2:	f100 8119 	bmi.w	857d8 <_svfprintf_r+0xf3c>
   855a6:	9b08      	ldr	r3, [sp, #32]
   855a8:	0658      	lsls	r0, r3, #25
   855aa:	f140 8368 	bpl.w	85c7e <_svfprintf_r+0x13e2>
   855ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   855b0:	2301      	movs	r3, #1
   855b2:	f852 4b04 	ldr.w	r4, [r2], #4
   855b6:	2500      	movs	r5, #0
   855b8:	920e      	str	r2, [sp, #56]	; 0x38
   855ba:	b2a4      	uxth	r4, r4
   855bc:	f7ff ba7f 	b.w	84abe <_svfprintf_r+0x222>
   855c0:	232d      	movs	r3, #45	; 0x2d
   855c2:	9a07      	ldr	r2, [sp, #28]
   855c4:	4264      	negs	r4, r4
   855c6:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   855ca:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   855ce:	2301      	movs	r3, #1
   855d0:	9208      	str	r2, [sp, #32]
   855d2:	f7ff ba77 	b.w	84ac4 <_svfprintf_r+0x228>
   855d6:	4651      	mov	r1, sl
   855d8:	4648      	mov	r0, r9
   855da:	aa2a      	add	r2, sp, #168	; 0xa8
   855dc:	f004 fd48 	bl	8a070 <__ssprint_r>
   855e0:	2800      	cmp	r0, #0
   855e2:	f47f ada3 	bne.w	8512c <_svfprintf_r+0x890>
   855e6:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   855ea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   855ee:	e5ba      	b.n	85166 <_svfprintf_r+0x8ca>
   855f0:	4651      	mov	r1, sl
   855f2:	4648      	mov	r0, r9
   855f4:	aa2a      	add	r2, sp, #168	; 0xa8
   855f6:	f004 fd3b 	bl	8a070 <__ssprint_r>
   855fa:	2800      	cmp	r0, #0
   855fc:	f47f ad96 	bne.w	8512c <_svfprintf_r+0x890>
   85600:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   85604:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85608:	e5ba      	b.n	85180 <_svfprintf_r+0x8e4>
   8560a:	9b07      	ldr	r3, [sp, #28]
   8560c:	07da      	lsls	r2, r3, #31
   8560e:	f57f aaf4 	bpl.w	84bfa <_svfprintf_r+0x35e>
   85612:	e4d9      	b.n	84fc8 <_svfprintf_r+0x72c>
   85614:	af56      	add	r7, sp, #344	; 0x158
   85616:	e4aa      	b.n	84f6e <_svfprintf_r+0x6d2>
   85618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8561a:	465f      	mov	r7, fp
   8561c:	f853 1b04 	ldr.w	r1, [r3], #4
   85620:	930e      	str	r3, [sp, #56]	; 0x38
   85622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85624:	17dd      	asrs	r5, r3, #31
   85626:	461a      	mov	r2, r3
   85628:	462b      	mov	r3, r5
   8562a:	e9c1 2300 	strd	r2, r3, [r1]
   8562e:	f7ff bb03 	b.w	84c38 <_svfprintf_r+0x39c>
   85632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85634:	2500      	movs	r5, #0
   85636:	f853 4b04 	ldr.w	r4, [r3], #4
   8563a:	930e      	str	r3, [sp, #56]	; 0x38
   8563c:	f7ff ba3a 	b.w	84ab4 <_svfprintf_r+0x218>
   85640:	0008b3c4 	.word	0x0008b3c4
   85644:	0008b3d4 	.word	0x0008b3d4
   85648:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8564c:	460b      	mov	r3, r1
   8564e:	4602      	mov	r2, r0
   85650:	f005 fc42 	bl	8aed8 <__aeabi_dcmpun>
   85654:	4601      	mov	r1, r0
   85656:	2800      	cmp	r0, #0
   85658:	f040 8643 	bne.w	862e2 <_svfprintf_r+0x1a46>
   8565c:	2e61      	cmp	r6, #97	; 0x61
   8565e:	f000 8586 	beq.w	8616e <_svfprintf_r+0x18d2>
   85662:	2e41      	cmp	r6, #65	; 0x41
   85664:	f000 847a 	beq.w	85f5c <_svfprintf_r+0x16c0>
   85668:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8566a:	f026 0520 	bic.w	r5, r6, #32
   8566e:	1c5a      	adds	r2, r3, #1
   85670:	9508      	str	r5, [sp, #32]
   85672:	f000 837d 	beq.w	85d70 <_svfprintf_r+0x14d4>
   85676:	2d47      	cmp	r5, #71	; 0x47
   85678:	f000 859e 	beq.w	861b8 <_svfprintf_r+0x191c>
   8567c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85680:	9b07      	ldr	r3, [sp, #28]
   85682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85686:	9312      	str	r3, [sp, #72]	; 0x48
   85688:	460b      	mov	r3, r1
   8568a:	2b00      	cmp	r3, #0
   8568c:	f2c0 85ba 	blt.w	86204 <_svfprintf_r+0x1968>
   85690:	2200      	movs	r2, #0
   85692:	930f      	str	r3, [sp, #60]	; 0x3c
   85694:	921e      	str	r2, [sp, #120]	; 0x78
   85696:	920d      	str	r2, [sp, #52]	; 0x34
   85698:	900c      	str	r0, [sp, #48]	; 0x30
   8569a:	2d46      	cmp	r5, #70	; 0x46
   8569c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8569e:	f000 8407 	beq.w	85eb0 <_svfprintf_r+0x1614>
   856a2:	2d45      	cmp	r5, #69	; 0x45
   856a4:	f04f 0002 	mov.w	r0, #2
   856a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   856aa:	f040 83e7 	bne.w	85e7c <_svfprintf_r+0x15e0>
   856ae:	9909      	ldr	r1, [sp, #36]	; 0x24
   856b0:	9000      	str	r0, [sp, #0]
   856b2:	1c4c      	adds	r4, r1, #1
   856b4:	a928      	add	r1, sp, #160	; 0xa0
   856b6:	a825      	add	r0, sp, #148	; 0x94
   856b8:	9104      	str	r1, [sp, #16]
   856ba:	a924      	add	r1, sp, #144	; 0x90
   856bc:	e9cd 1002 	strd	r1, r0, [sp, #8]
   856c0:	9401      	str	r4, [sp, #4]
   856c2:	4648      	mov	r0, r9
   856c4:	f001 feb0 	bl	87428 <_dtoa_r>
   856c8:	4607      	mov	r7, r0
   856ca:	4404      	add	r4, r0
   856cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   856ce:	9d07      	ldr	r5, [sp, #28]
   856d0:	9307      	str	r3, [sp, #28]
   856d2:	2200      	movs	r2, #0
   856d4:	2300      	movs	r3, #0
   856d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   856d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   856da:	f005 fbcb 	bl	8ae74 <__aeabi_dcmpeq>
   856de:	2800      	cmp	r0, #0
   856e0:	f000 8398 	beq.w	85e14 <_svfprintf_r+0x1578>
   856e4:	4623      	mov	r3, r4
   856e6:	1bdb      	subs	r3, r3, r7
   856e8:	9313      	str	r3, [sp, #76]	; 0x4c
   856ea:	9b08      	ldr	r3, [sp, #32]
   856ec:	2b47      	cmp	r3, #71	; 0x47
   856ee:	f000 835e 	beq.w	85dae <_svfprintf_r+0x1512>
   856f2:	9b08      	ldr	r3, [sp, #32]
   856f4:	2b46      	cmp	r3, #70	; 0x46
   856f6:	f000 840b 	beq.w	85f10 <_svfprintf_r+0x1674>
   856fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   856fc:	9310      	str	r3, [sp, #64]	; 0x40
   856fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85700:	9a08      	ldr	r2, [sp, #32]
   85702:	3b01      	subs	r3, #1
   85704:	2a41      	cmp	r2, #65	; 0x41
   85706:	9324      	str	r3, [sp, #144]	; 0x90
   85708:	f000 85ad 	beq.w	86266 <_svfprintf_r+0x19ca>
   8570c:	2100      	movs	r1, #0
   8570e:	b2f2      	uxtb	r2, r6
   85710:	2b00      	cmp	r3, #0
   85712:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   85716:	bfb6      	itet	lt
   85718:	222d      	movlt	r2, #45	; 0x2d
   8571a:	222b      	movge	r2, #43	; 0x2b
   8571c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8571e:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   85722:	bfb8      	it	lt
   85724:	f1c3 0301 	rsblt	r3, r3, #1
   85728:	2b09      	cmp	r3, #9
   8572a:	f340 85a2 	ble.w	86272 <_svfprintf_r+0x19d6>
   8572e:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   85732:	4672      	mov	r2, lr
   85734:	469c      	mov	ip, r3
   85736:	4cbf      	ldr	r4, [pc, #764]	; (85a34 <_svfprintf_r+0x1198>)
   85738:	4660      	mov	r0, ip
   8573a:	4611      	mov	r1, r2
   8573c:	fb84 230c 	smull	r2, r3, r4, ip
   85740:	ea4f 72ec 	mov.w	r2, ip, asr #31
   85744:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   85748:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   8574c:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   85750:	3330      	adds	r3, #48	; 0x30
   85752:	2863      	cmp	r0, #99	; 0x63
   85754:	4694      	mov	ip, r2
   85756:	f801 3c01 	strb.w	r3, [r1, #-1]
   8575a:	f101 32ff 	add.w	r2, r1, #4294967295
   8575e:	dceb      	bgt.n	85738 <_svfprintf_r+0xe9c>
   85760:	4663      	mov	r3, ip
   85762:	3330      	adds	r3, #48	; 0x30
   85764:	b2d8      	uxtb	r0, r3
   85766:	1e8b      	subs	r3, r1, #2
   85768:	459e      	cmp	lr, r3
   8576a:	f802 0c01 	strb.w	r0, [r2, #-1]
   8576e:	f240 862c 	bls.w	863ca <_svfprintf_r+0x1b2e>
   85772:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   85776:	e001      	b.n	8577c <_svfprintf_r+0xee0>
   85778:	f812 0b01 	ldrb.w	r0, [r2], #1
   8577c:	4596      	cmp	lr, r2
   8577e:	f803 0b01 	strb.w	r0, [r3], #1
   85782:	d1f9      	bne.n	85778 <_svfprintf_r+0xedc>
   85784:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   85788:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   8578c:	1a5b      	subs	r3, r3, r1
   8578e:	4413      	add	r3, r2
   85790:	aa26      	add	r2, sp, #152	; 0x98
   85792:	1a9b      	subs	r3, r3, r2
   85794:	931b      	str	r3, [sp, #108]	; 0x6c
   85796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85798:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8579a:	2b01      	cmp	r3, #1
   8579c:	441a      	add	r2, r3
   8579e:	920c      	str	r2, [sp, #48]	; 0x30
   857a0:	f340 85cc 	ble.w	8633c <_svfprintf_r+0x1aa0>
   857a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   857a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   857a8:	4413      	add	r3, r2
   857aa:	930c      	str	r3, [sp, #48]	; 0x30
   857ac:	2300      	movs	r3, #0
   857ae:	9312      	str	r3, [sp, #72]	; 0x48
   857b0:	9316      	str	r3, [sp, #88]	; 0x58
   857b2:	9310      	str	r3, [sp, #64]	; 0x40
   857b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   857b6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   857ba:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   857be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   857c2:	9207      	str	r2, [sp, #28]
   857c4:	9308      	str	r3, [sp, #32]
   857c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   857c8:	2b00      	cmp	r3, #0
   857ca:	f040 8317 	bne.w	85dfc <_svfprintf_r+0x1560>
   857ce:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   857d2:	9309      	str	r3, [sp, #36]	; 0x24
   857d4:	f7ff ba86 	b.w	84ce4 <_svfprintf_r+0x448>
   857d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   857da:	2301      	movs	r3, #1
   857dc:	f852 4b04 	ldr.w	r4, [r2], #4
   857e0:	2500      	movs	r5, #0
   857e2:	920e      	str	r2, [sp, #56]	; 0x38
   857e4:	f7ff b96b 	b.w	84abe <_svfprintf_r+0x222>
   857e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   857ea:	f853 4b04 	ldr.w	r4, [r3], #4
   857ee:	17e5      	asrs	r5, r4, #31
   857f0:	930e      	str	r3, [sp, #56]	; 0x38
   857f2:	4622      	mov	r2, r4
   857f4:	462b      	mov	r3, r5
   857f6:	f7ff b933 	b.w	84a60 <_svfprintf_r+0x1c4>
   857fa:	9b07      	ldr	r3, [sp, #28]
   857fc:	9308      	str	r3, [sp, #32]
   857fe:	f7ff bae0 	b.w	84dc2 <_svfprintf_r+0x526>
   85802:	4b8d      	ldr	r3, [pc, #564]	; (85a38 <_svfprintf_r+0x119c>)
   85804:	9319      	str	r3, [sp, #100]	; 0x64
   85806:	9b07      	ldr	r3, [sp, #28]
   85808:	0699      	lsls	r1, r3, #26
   8580a:	f140 80fe 	bpl.w	85a0a <_svfprintf_r+0x116e>
   8580e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85810:	3307      	adds	r3, #7
   85812:	f023 0307 	bic.w	r3, r3, #7
   85816:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8581a:	930e      	str	r3, [sp, #56]	; 0x38
   8581c:	9a07      	ldr	r2, [sp, #28]
   8581e:	07d7      	lsls	r7, r2, #31
   85820:	d50a      	bpl.n	85838 <_svfprintf_r+0xf9c>
   85822:	ea54 0305 	orrs.w	r3, r4, r5
   85826:	d007      	beq.n	85838 <_svfprintf_r+0xf9c>
   85828:	2330      	movs	r3, #48	; 0x30
   8582a:	f042 0202 	orr.w	r2, r2, #2
   8582e:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   85832:	9207      	str	r2, [sp, #28]
   85834:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   85838:	9a07      	ldr	r2, [sp, #28]
   8583a:	2302      	movs	r3, #2
   8583c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   85840:	9208      	str	r2, [sp, #32]
   85842:	f7ff b93c 	b.w	84abe <_svfprintf_r+0x222>
   85846:	4b7d      	ldr	r3, [pc, #500]	; (85a3c <_svfprintf_r+0x11a0>)
   85848:	9319      	str	r3, [sp, #100]	; 0x64
   8584a:	e7dc      	b.n	85806 <_svfprintf_r+0xf6a>
   8584c:	f043 0320 	orr.w	r3, r3, #32
   85850:	f89b 6001 	ldrb.w	r6, [fp, #1]
   85854:	9307      	str	r3, [sp, #28]
   85856:	f10b 0b01 	add.w	fp, fp, #1
   8585a:	f7ff b86a 	b.w	84932 <_svfprintf_r+0x96>
   8585e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   85862:	f89b 6001 	ldrb.w	r6, [fp, #1]
   85866:	9307      	str	r3, [sp, #28]
   85868:	f10b 0b01 	add.w	fp, fp, #1
   8586c:	f7ff b861 	b.w	84932 <_svfprintf_r+0x96>
   85870:	4651      	mov	r1, sl
   85872:	4648      	mov	r0, r9
   85874:	aa2a      	add	r2, sp, #168	; 0xa8
   85876:	f004 fbfb 	bl	8a070 <__ssprint_r>
   8587a:	2800      	cmp	r0, #0
   8587c:	f47f ac56 	bne.w	8512c <_svfprintf_r+0x890>
   85880:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85882:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85886:	f7ff bbad 	b.w	84fe4 <_svfprintf_r+0x748>
   8588a:	2140      	movs	r1, #64	; 0x40
   8588c:	4648      	mov	r0, r9
   8588e:	f003 fa79 	bl	88d84 <_malloc_r>
   85892:	f8cb 0000 	str.w	r0, [fp]
   85896:	f8cb 0010 	str.w	r0, [fp, #16]
   8589a:	2800      	cmp	r0, #0
   8589c:	f000 858d 	beq.w	863ba <_svfprintf_r+0x1b1e>
   858a0:	2340      	movs	r3, #64	; 0x40
   858a2:	f8cb 3014 	str.w	r3, [fp, #20]
   858a6:	f7ff b811 	b.w	848cc <_svfprintf_r+0x30>
   858aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   858ac:	463a      	mov	r2, r7
   858ae:	2b06      	cmp	r3, #6
   858b0:	bf28      	it	cs
   858b2:	2306      	movcs	r3, #6
   858b4:	9709      	str	r7, [sp, #36]	; 0x24
   858b6:	9712      	str	r7, [sp, #72]	; 0x48
   858b8:	9716      	str	r7, [sp, #88]	; 0x58
   858ba:	9710      	str	r7, [sp, #64]	; 0x40
   858bc:	970d      	str	r7, [sp, #52]	; 0x34
   858be:	9308      	str	r3, [sp, #32]
   858c0:	4f5f      	ldr	r7, [pc, #380]	; (85a40 <_svfprintf_r+0x11a4>)
   858c2:	940e      	str	r4, [sp, #56]	; 0x38
   858c4:	930c      	str	r3, [sp, #48]	; 0x30
   858c6:	f7ff ba0d 	b.w	84ce4 <_svfprintf_r+0x448>
   858ca:	2b10      	cmp	r3, #16
   858cc:	f340 8558 	ble.w	86380 <_svfprintf_r+0x1ae4>
   858d0:	4651      	mov	r1, sl
   858d2:	4a5c      	ldr	r2, [pc, #368]	; (85a44 <_svfprintf_r+0x11a8>)
   858d4:	46ca      	mov	sl, r9
   858d6:	9709      	str	r7, [sp, #36]	; 0x24
   858d8:	2610      	movs	r6, #16
   858da:	4617      	mov	r7, r2
   858dc:	4689      	mov	r9, r1
   858de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   858e0:	920f      	str	r2, [sp, #60]	; 0x3c
   858e2:	e005      	b.n	858f0 <_svfprintf_r+0x1054>
   858e4:	f108 0808 	add.w	r8, r8, #8
   858e8:	3d10      	subs	r5, #16
   858ea:	2d10      	cmp	r5, #16
   858ec:	f340 81fa 	ble.w	85ce4 <_svfprintf_r+0x1448>
   858f0:	3301      	adds	r3, #1
   858f2:	3410      	adds	r4, #16
   858f4:	2b07      	cmp	r3, #7
   858f6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   858fa:	e9c8 7600 	strd	r7, r6, [r8]
   858fe:	ddf1      	ble.n	858e4 <_svfprintf_r+0x1048>
   85900:	4649      	mov	r1, r9
   85902:	4650      	mov	r0, sl
   85904:	aa2a      	add	r2, sp, #168	; 0xa8
   85906:	f004 fbb3 	bl	8a070 <__ssprint_r>
   8590a:	2800      	cmp	r0, #0
   8590c:	f040 83fd 	bne.w	8610a <_svfprintf_r+0x186e>
   85910:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85914:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85918:	e7e6      	b.n	858e8 <_svfprintf_r+0x104c>
   8591a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8591c:	4642      	mov	r2, r8
   8591e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   85922:	18fb      	adds	r3, r7, r3
   85924:	9309      	str	r3, [sp, #36]	; 0x24
   85926:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   8592a:	970f      	str	r7, [sp, #60]	; 0x3c
   8592c:	4620      	mov	r0, r4
   8592e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   85932:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   85934:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85936:	f1b8 0f00 	cmp.w	r8, #0
   8593a:	d02d      	beq.n	85998 <_svfprintf_r+0x10fc>
   8593c:	bb7b      	cbnz	r3, 8599e <_svfprintf_r+0x1102>
   8593e:	3f01      	subs	r7, #1
   85940:	f108 38ff 	add.w	r8, r8, #4294967295
   85944:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85946:	991c      	ldr	r1, [sp, #112]	; 0x70
   85948:	3301      	adds	r3, #1
   8594a:	4458      	add	r0, fp
   8594c:	2b07      	cmp	r3, #7
   8594e:	e9c2 1b00 	strd	r1, fp, [r2]
   85952:	902c      	str	r0, [sp, #176]	; 0xb0
   85954:	932b      	str	r3, [sp, #172]	; 0xac
   85956:	dc62      	bgt.n	85a1e <_svfprintf_r+0x1182>
   85958:	3208      	adds	r2, #8
   8595a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8595c:	783b      	ldrb	r3, [r7, #0]
   8595e:	1b8d      	subs	r5, r1, r6
   85960:	429d      	cmp	r5, r3
   85962:	bfa8      	it	ge
   85964:	461d      	movge	r5, r3
   85966:	2d00      	cmp	r5, #0
   85968:	dd0b      	ble.n	85982 <_svfprintf_r+0x10e6>
   8596a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8596c:	4428      	add	r0, r5
   8596e:	3301      	adds	r3, #1
   85970:	2b07      	cmp	r3, #7
   85972:	e9c2 6500 	strd	r6, r5, [r2]
   85976:	902c      	str	r0, [sp, #176]	; 0xb0
   85978:	932b      	str	r3, [sp, #172]	; 0xac
   8597a:	f300 8111 	bgt.w	85ba0 <_svfprintf_r+0x1304>
   8597e:	783b      	ldrb	r3, [r7, #0]
   85980:	3208      	adds	r2, #8
   85982:	2d00      	cmp	r5, #0
   85984:	bfb4      	ite	lt
   85986:	461d      	movlt	r5, r3
   85988:	1b5d      	subge	r5, r3, r5
   8598a:	2d00      	cmp	r5, #0
   8598c:	dc0b      	bgt.n	859a6 <_svfprintf_r+0x110a>
   8598e:	441e      	add	r6, r3
   85990:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85992:	f1b8 0f00 	cmp.w	r8, #0
   85996:	d1d1      	bne.n	8593c <_svfprintf_r+0x10a0>
   85998:	2b00      	cmp	r3, #0
   8599a:	f000 81f9 	beq.w	85d90 <_svfprintf_r+0x14f4>
   8599e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   859a0:	3b01      	subs	r3, #1
   859a2:	9312      	str	r3, [sp, #72]	; 0x48
   859a4:	e7ce      	b.n	85944 <_svfprintf_r+0x10a8>
   859a6:	2d10      	cmp	r5, #16
   859a8:	f340 84c5 	ble.w	86336 <_svfprintf_r+0x1a9a>
   859ac:	992b      	ldr	r1, [sp, #172]	; 0xac
   859ae:	2410      	movs	r4, #16
   859b0:	460b      	mov	r3, r1
   859b2:	e004      	b.n	859be <_svfprintf_r+0x1122>
   859b4:	3d10      	subs	r5, #16
   859b6:	2d10      	cmp	r5, #16
   859b8:	f102 0208 	add.w	r2, r2, #8
   859bc:	dd16      	ble.n	859ec <_svfprintf_r+0x1150>
   859be:	3301      	adds	r3, #1
   859c0:	4920      	ldr	r1, [pc, #128]	; (85a44 <_svfprintf_r+0x11a8>)
   859c2:	3010      	adds	r0, #16
   859c4:	2b07      	cmp	r3, #7
   859c6:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   859ca:	e9c2 1400 	strd	r1, r4, [r2]
   859ce:	ddf1      	ble.n	859b4 <_svfprintf_r+0x1118>
   859d0:	4651      	mov	r1, sl
   859d2:	4648      	mov	r0, r9
   859d4:	aa2a      	add	r2, sp, #168	; 0xa8
   859d6:	f004 fb4b 	bl	8a070 <__ssprint_r>
   859da:	2800      	cmp	r0, #0
   859dc:	f47f aba6 	bne.w	8512c <_svfprintf_r+0x890>
   859e0:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   859e4:	3d10      	subs	r5, #16
   859e6:	2d10      	cmp	r5, #16
   859e8:	aa2d      	add	r2, sp, #180	; 0xb4
   859ea:	dce8      	bgt.n	859be <_svfprintf_r+0x1122>
   859ec:	4619      	mov	r1, r3
   859ee:	1c4b      	adds	r3, r1, #1
   859f0:	4914      	ldr	r1, [pc, #80]	; (85a44 <_svfprintf_r+0x11a8>)
   859f2:	4428      	add	r0, r5
   859f4:	2b07      	cmp	r3, #7
   859f6:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   859fa:	e9c2 1500 	strd	r1, r5, [r2]
   859fe:	f300 8215 	bgt.w	85e2c <_svfprintf_r+0x1590>
   85a02:	783b      	ldrb	r3, [r7, #0]
   85a04:	3208      	adds	r2, #8
   85a06:	441e      	add	r6, r3
   85a08:	e7c2      	b.n	85990 <_svfprintf_r+0x10f4>
   85a0a:	9b07      	ldr	r3, [sp, #28]
   85a0c:	06da      	lsls	r2, r3, #27
   85a0e:	f140 8084 	bpl.w	85b1a <_svfprintf_r+0x127e>
   85a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85a14:	2500      	movs	r5, #0
   85a16:	f853 4b04 	ldr.w	r4, [r3], #4
   85a1a:	930e      	str	r3, [sp, #56]	; 0x38
   85a1c:	e6fe      	b.n	8581c <_svfprintf_r+0xf80>
   85a1e:	4651      	mov	r1, sl
   85a20:	4648      	mov	r0, r9
   85a22:	aa2a      	add	r2, sp, #168	; 0xa8
   85a24:	f004 fb24 	bl	8a070 <__ssprint_r>
   85a28:	2800      	cmp	r0, #0
   85a2a:	f47f ab7f 	bne.w	8512c <_svfprintf_r+0x890>
   85a2e:	982c      	ldr	r0, [sp, #176]	; 0xb0
   85a30:	aa2d      	add	r2, sp, #180	; 0xb4
   85a32:	e792      	b.n	8595a <_svfprintf_r+0x10be>
   85a34:	66666667 	.word	0x66666667
   85a38:	0008b390 	.word	0x0008b390
   85a3c:	0008b3a4 	.word	0x0008b3a4
   85a40:	0008b3b8 	.word	0x0008b3b8
   85a44:	0008b3d4 	.word	0x0008b3d4
   85a48:	2200      	movs	r2, #0
   85a4a:	9b08      	ldr	r3, [sp, #32]
   85a4c:	f8cd b01c 	str.w	fp, [sp, #28]
   85a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85a54:	960c      	str	r6, [sp, #48]	; 0x30
   85a56:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   85a5a:	4693      	mov	fp, r2
   85a5c:	46ca      	mov	sl, r9
   85a5e:	461e      	mov	r6, r3
   85a60:	46c1      	mov	r9, r8
   85a62:	af56      	add	r7, sp, #344	; 0x158
   85a64:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   85a68:	e00b      	b.n	85a82 <_svfprintf_r+0x11e6>
   85a6a:	220a      	movs	r2, #10
   85a6c:	2300      	movs	r3, #0
   85a6e:	4620      	mov	r0, r4
   85a70:	4629      	mov	r1, r5
   85a72:	f005 fa6f 	bl	8af54 <__aeabi_uldivmod>
   85a76:	2d00      	cmp	r5, #0
   85a78:	bf08      	it	eq
   85a7a:	2c0a      	cmpeq	r4, #10
   85a7c:	d31b      	bcc.n	85ab6 <_svfprintf_r+0x121a>
   85a7e:	4604      	mov	r4, r0
   85a80:	460d      	mov	r5, r1
   85a82:	220a      	movs	r2, #10
   85a84:	2300      	movs	r3, #0
   85a86:	4620      	mov	r0, r4
   85a88:	4629      	mov	r1, r5
   85a8a:	f005 fa63 	bl	8af54 <__aeabi_uldivmod>
   85a8e:	3230      	adds	r2, #48	; 0x30
   85a90:	f807 2c01 	strb.w	r2, [r7, #-1]
   85a94:	f10b 0b01 	add.w	fp, fp, #1
   85a98:	3f01      	subs	r7, #1
   85a9a:	2e00      	cmp	r6, #0
   85a9c:	d0e5      	beq.n	85a6a <_svfprintf_r+0x11ce>
   85a9e:	f898 3000 	ldrb.w	r3, [r8]
   85aa2:	459b      	cmp	fp, r3
   85aa4:	d1e1      	bne.n	85a6a <_svfprintf_r+0x11ce>
   85aa6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   85aaa:	d0de      	beq.n	85a6a <_svfprintf_r+0x11ce>
   85aac:	2d00      	cmp	r5, #0
   85aae:	bf08      	it	eq
   85ab0:	2c0a      	cmpeq	r4, #10
   85ab2:	f080 8128 	bcs.w	85d06 <_svfprintf_r+0x146a>
   85ab6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   85aba:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   85abe:	46c8      	mov	r8, r9
   85ac0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   85ac2:	46d1      	mov	r9, sl
   85ac4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85ac8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   85acc:	f7ff bb9f 	b.w	8520e <_svfprintf_r+0x972>
   85ad0:	4651      	mov	r1, sl
   85ad2:	4648      	mov	r0, r9
   85ad4:	aa2a      	add	r2, sp, #168	; 0xa8
   85ad6:	931e      	str	r3, [sp, #120]	; 0x78
   85ad8:	f004 faca 	bl	8a070 <__ssprint_r>
   85adc:	2800      	cmp	r0, #0
   85ade:	f47f ab25 	bne.w	8512c <_svfprintf_r+0x890>
   85ae2:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85ae6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85ae8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   85aea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85aee:	f7ff b84a 	b.w	84b86 <_svfprintf_r+0x2ea>
   85af2:	2001      	movs	r0, #1
   85af4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85af6:	49c5      	ldr	r1, [pc, #788]	; (85e0c <_svfprintf_r+0x1570>)
   85af8:	4403      	add	r3, r0
   85afa:	4404      	add	r4, r0
   85afc:	2b07      	cmp	r3, #7
   85afe:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85b02:	e9c8 1000 	strd	r1, r0, [r8]
   85b06:	f73f abdf 	bgt.w	852c8 <_svfprintf_r+0xa2c>
   85b0a:	f108 0808 	add.w	r8, r8, #8
   85b0e:	f7ff bbe7 	b.w	852e0 <_svfprintf_r+0xa44>
   85b12:	46d1      	mov	r9, sl
   85b14:	46b3      	mov	fp, r6
   85b16:	f7ff bb0a 	b.w	8512e <_svfprintf_r+0x892>
   85b1a:	9b07      	ldr	r3, [sp, #28]
   85b1c:	065b      	lsls	r3, r3, #25
   85b1e:	f140 80cb 	bpl.w	85cb8 <_svfprintf_r+0x141c>
   85b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85b24:	2500      	movs	r5, #0
   85b26:	f853 4b04 	ldr.w	r4, [r3], #4
   85b2a:	930e      	str	r3, [sp, #56]	; 0x38
   85b2c:	b2a4      	uxth	r4, r4
   85b2e:	e675      	b.n	8581c <_svfprintf_r+0xf80>
   85b30:	4651      	mov	r1, sl
   85b32:	4648      	mov	r0, r9
   85b34:	aa2a      	add	r2, sp, #168	; 0xa8
   85b36:	f004 fa9b 	bl	8a070 <__ssprint_r>
   85b3a:	2800      	cmp	r0, #0
   85b3c:	f47f aaf6 	bne.w	8512c <_svfprintf_r+0x890>
   85b40:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85b42:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85b46:	f7ff ba3a 	b.w	84fbe <_svfprintf_r+0x722>
   85b4a:	46d1      	mov	r9, sl
   85b4c:	46da      	mov	sl, fp
   85b4e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   85b52:	3501      	adds	r5, #1
   85b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85b56:	4434      	add	r4, r6
   85b58:	2d07      	cmp	r5, #7
   85b5a:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85b5e:	e9c8 3600 	strd	r3, r6, [r8]
   85b62:	f77f ab24 	ble.w	851ae <_svfprintf_r+0x912>
   85b66:	4651      	mov	r1, sl
   85b68:	4648      	mov	r0, r9
   85b6a:	aa2a      	add	r2, sp, #168	; 0xa8
   85b6c:	f004 fa80 	bl	8a070 <__ssprint_r>
   85b70:	2800      	cmp	r0, #0
   85b72:	f47f aadb 	bne.w	8512c <_svfprintf_r+0x890>
   85b76:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   85b7a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85b7e:	f7ff bb18 	b.w	851b2 <_svfprintf_r+0x916>
   85b82:	4aa3      	ldr	r2, [pc, #652]	; (85e10 <_svfprintf_r+0x1574>)
   85b84:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85b86:	920f      	str	r2, [sp, #60]	; 0x3c
   85b88:	3301      	adds	r3, #1
   85b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85b8c:	442c      	add	r4, r5
   85b8e:	2b07      	cmp	r3, #7
   85b90:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85b94:	e9c8 2500 	strd	r2, r5, [r8]
   85b98:	f77f a82d 	ble.w	84bf6 <_svfprintf_r+0x35a>
   85b9c:	f7ff bbc2 	b.w	85324 <_svfprintf_r+0xa88>
   85ba0:	4651      	mov	r1, sl
   85ba2:	4648      	mov	r0, r9
   85ba4:	aa2a      	add	r2, sp, #168	; 0xa8
   85ba6:	f004 fa63 	bl	8a070 <__ssprint_r>
   85baa:	2800      	cmp	r0, #0
   85bac:	f47f aabe 	bne.w	8512c <_svfprintf_r+0x890>
   85bb0:	783b      	ldrb	r3, [r7, #0]
   85bb2:	982c      	ldr	r0, [sp, #176]	; 0xb0
   85bb4:	aa2d      	add	r2, sp, #180	; 0xb4
   85bb6:	e6e4      	b.n	85982 <_svfprintf_r+0x10e6>
   85bb8:	4651      	mov	r1, sl
   85bba:	4648      	mov	r0, r9
   85bbc:	aa2a      	add	r2, sp, #168	; 0xa8
   85bbe:	f004 fa57 	bl	8a070 <__ssprint_r>
   85bc2:	2800      	cmp	r0, #0
   85bc4:	f47f aab2 	bne.w	8512c <_svfprintf_r+0x890>
   85bc8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85bca:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85bce:	f7fe bffd 	b.w	84bcc <_svfprintf_r+0x330>
   85bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85bd4:	990a      	ldr	r1, [sp, #40]	; 0x28
   85bd6:	f853 2b04 	ldr.w	r2, [r3], #4
   85bda:	465f      	mov	r7, fp
   85bdc:	6011      	str	r1, [r2, #0]
   85bde:	930e      	str	r3, [sp, #56]	; 0x38
   85be0:	f7ff b82a 	b.w	84c38 <_svfprintf_r+0x39c>
   85be4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85be6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   85be8:	3301      	adds	r3, #1
   85bea:	9818      	ldr	r0, [sp, #96]	; 0x60
   85bec:	440c      	add	r4, r1
   85bee:	2b07      	cmp	r3, #7
   85bf0:	e9c8 0100 	strd	r0, r1, [r8]
   85bf4:	942c      	str	r4, [sp, #176]	; 0xb0
   85bf6:	932b      	str	r3, [sp, #172]	; 0xac
   85bf8:	f300 80ac 	bgt.w	85d54 <_svfprintf_r+0x14b8>
   85bfc:	f108 0808 	add.w	r8, r8, #8
   85c00:	2a00      	cmp	r2, #0
   85c02:	f6bf ab85 	bge.w	85310 <_svfprintf_r+0xa74>
   85c06:	4255      	negs	r5, r2
   85c08:	3210      	adds	r2, #16
   85c0a:	f280 83d3 	bge.w	863b4 <_svfprintf_r+0x1b18>
   85c0e:	4651      	mov	r1, sl
   85c10:	4a7f      	ldr	r2, [pc, #508]	; (85e10 <_svfprintf_r+0x1574>)
   85c12:	46ca      	mov	sl, r9
   85c14:	9709      	str	r7, [sp, #36]	; 0x24
   85c16:	2610      	movs	r6, #16
   85c18:	4617      	mov	r7, r2
   85c1a:	4689      	mov	r9, r1
   85c1c:	920f      	str	r2, [sp, #60]	; 0x3c
   85c1e:	e005      	b.n	85c2c <_svfprintf_r+0x1390>
   85c20:	f108 0808 	add.w	r8, r8, #8
   85c24:	3d10      	subs	r5, #16
   85c26:	2d10      	cmp	r5, #16
   85c28:	f340 82aa 	ble.w	86180 <_svfprintf_r+0x18e4>
   85c2c:	3301      	adds	r3, #1
   85c2e:	3410      	adds	r4, #16
   85c30:	2b07      	cmp	r3, #7
   85c32:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85c36:	e9c8 7600 	strd	r7, r6, [r8]
   85c3a:	ddf1      	ble.n	85c20 <_svfprintf_r+0x1384>
   85c3c:	4649      	mov	r1, r9
   85c3e:	4650      	mov	r0, sl
   85c40:	aa2a      	add	r2, sp, #168	; 0xa8
   85c42:	f004 fa15 	bl	8a070 <__ssprint_r>
   85c46:	2800      	cmp	r0, #0
   85c48:	f040 825f 	bne.w	8610a <_svfprintf_r+0x186e>
   85c4c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85c50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85c54:	e7e6      	b.n	85c24 <_svfprintf_r+0x1388>
   85c56:	4638      	mov	r0, r7
   85c58:	f7fe fdbe 	bl	847d8 <strlen>
   85c5c:	462b      	mov	r3, r5
   85c5e:	4602      	mov	r2, r0
   85c60:	9509      	str	r5, [sp, #36]	; 0x24
   85c62:	f7ff b894 	b.w	84d8e <_svfprintf_r+0x4f2>
   85c66:	9b07      	ldr	r3, [sp, #28]
   85c68:	2500      	movs	r5, #0
   85c6a:	f413 7f00 	tst.w	r3, #512	; 0x200
   85c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85c70:	f853 4b04 	ldr.w	r4, [r3], #4
   85c74:	930e      	str	r3, [sp, #56]	; 0x38
   85c76:	bf18      	it	ne
   85c78:	b2e4      	uxtbne	r4, r4
   85c7a:	f7fe bf1b 	b.w	84ab4 <_svfprintf_r+0x218>
   85c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   85c80:	9b08      	ldr	r3, [sp, #32]
   85c82:	f852 4b04 	ldr.w	r4, [r2], #4
   85c86:	f413 7f00 	tst.w	r3, #512	; 0x200
   85c8a:	f04f 0500 	mov.w	r5, #0
   85c8e:	f04f 0301 	mov.w	r3, #1
   85c92:	920e      	str	r2, [sp, #56]	; 0x38
   85c94:	bf18      	it	ne
   85c96:	b2e4      	uxtbne	r4, r4
   85c98:	f7fe bf11 	b.w	84abe <_svfprintf_r+0x222>
   85c9c:	9b07      	ldr	r3, [sp, #28]
   85c9e:	f413 7f00 	tst.w	r3, #512	; 0x200
   85ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85ca4:	f853 4b04 	ldr.w	r4, [r3], #4
   85ca8:	bf18      	it	ne
   85caa:	b264      	sxtbne	r4, r4
   85cac:	17e5      	asrs	r5, r4, #31
   85cae:	930e      	str	r3, [sp, #56]	; 0x38
   85cb0:	4622      	mov	r2, r4
   85cb2:	462b      	mov	r3, r5
   85cb4:	f7fe bed4 	b.w	84a60 <_svfprintf_r+0x1c4>
   85cb8:	9b07      	ldr	r3, [sp, #28]
   85cba:	2500      	movs	r5, #0
   85cbc:	f413 7f00 	tst.w	r3, #512	; 0x200
   85cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85cc2:	f853 4b04 	ldr.w	r4, [r3], #4
   85cc6:	930e      	str	r3, [sp, #56]	; 0x38
   85cc8:	bf18      	it	ne
   85cca:	b2e4      	uxtbne	r4, r4
   85ccc:	e5a6      	b.n	8581c <_svfprintf_r+0xf80>
   85cce:	4b50      	ldr	r3, [pc, #320]	; (85e10 <_svfprintf_r+0x1574>)
   85cd0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85cd2:	930f      	str	r3, [sp, #60]	; 0x3c
   85cd4:	f7ff ba15 	b.w	85102 <_svfprintf_r+0x866>
   85cd8:	232d      	movs	r3, #45	; 0x2d
   85cda:	461a      	mov	r2, r3
   85cdc:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   85ce0:	f7fe bfee 	b.w	84cc0 <_svfprintf_r+0x424>
   85ce4:	464a      	mov	r2, r9
   85ce6:	46d1      	mov	r9, sl
   85ce8:	4692      	mov	sl, r2
   85cea:	9f09      	ldr	r7, [sp, #36]	; 0x24
   85cec:	3301      	adds	r3, #1
   85cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85cf0:	442c      	add	r4, r5
   85cf2:	2b07      	cmp	r3, #7
   85cf4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85cf8:	e9c8 2500 	strd	r2, r5, [r8]
   85cfc:	dc3b      	bgt.n	85d76 <_svfprintf_r+0x14da>
   85cfe:	f108 0808 	add.w	r8, r8, #8
   85d02:	f7ff bb8c 	b.w	8541e <_svfprintf_r+0xb82>
   85d06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   85d08:	991c      	ldr	r1, [sp, #112]	; 0x70
   85d0a:	1aff      	subs	r7, r7, r3
   85d0c:	461a      	mov	r2, r3
   85d0e:	4638      	mov	r0, r7
   85d10:	f7fe fd90 	bl	84834 <strncpy>
   85d14:	f898 3001 	ldrb.w	r3, [r8, #1]
   85d18:	b10b      	cbz	r3, 85d1e <_svfprintf_r+0x1482>
   85d1a:	f108 0801 	add.w	r8, r8, #1
   85d1e:	220a      	movs	r2, #10
   85d20:	2300      	movs	r3, #0
   85d22:	4620      	mov	r0, r4
   85d24:	4629      	mov	r1, r5
   85d26:	f005 f915 	bl	8af54 <__aeabi_uldivmod>
   85d2a:	f04f 0b00 	mov.w	fp, #0
   85d2e:	e6a6      	b.n	85a7e <_svfprintf_r+0x11e2>
   85d30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85d32:	18bd      	adds	r5, r7, r2
   85d34:	1bad      	subs	r5, r5, r6
   85d36:	1ad3      	subs	r3, r2, r3
   85d38:	429d      	cmp	r5, r3
   85d3a:	bfa8      	it	ge
   85d3c:	461d      	movge	r5, r3
   85d3e:	f7ff bba0 	b.w	85482 <_svfprintf_r+0xbe6>
   85d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85d44:	990a      	ldr	r1, [sp, #40]	; 0x28
   85d46:	f853 2b04 	ldr.w	r2, [r3], #4
   85d4a:	465f      	mov	r7, fp
   85d4c:	8011      	strh	r1, [r2, #0]
   85d4e:	930e      	str	r3, [sp, #56]	; 0x38
   85d50:	f7fe bf72 	b.w	84c38 <_svfprintf_r+0x39c>
   85d54:	4651      	mov	r1, sl
   85d56:	4648      	mov	r0, r9
   85d58:	aa2a      	add	r2, sp, #168	; 0xa8
   85d5a:	f004 f989 	bl	8a070 <__ssprint_r>
   85d5e:	2800      	cmp	r0, #0
   85d60:	f47f a9e4 	bne.w	8512c <_svfprintf_r+0x890>
   85d64:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85d68:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85d6a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85d6e:	e747      	b.n	85c00 <_svfprintf_r+0x1364>
   85d70:	2306      	movs	r3, #6
   85d72:	9309      	str	r3, [sp, #36]	; 0x24
   85d74:	e482      	b.n	8567c <_svfprintf_r+0xde0>
   85d76:	4651      	mov	r1, sl
   85d78:	4648      	mov	r0, r9
   85d7a:	aa2a      	add	r2, sp, #168	; 0xa8
   85d7c:	f004 f978 	bl	8a070 <__ssprint_r>
   85d80:	2800      	cmp	r0, #0
   85d82:	f47f a9d3 	bne.w	8512c <_svfprintf_r+0x890>
   85d86:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85d88:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85d8c:	f7ff bb47 	b.w	8541e <_svfprintf_r+0xb82>
   85d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85d92:	971a      	str	r7, [sp, #104]	; 0x68
   85d94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   85d96:	4690      	mov	r8, r2
   85d98:	18fb      	adds	r3, r7, r3
   85d9a:	429e      	cmp	r6, r3
   85d9c:	4632      	mov	r2, r6
   85d9e:	bf28      	it	cs
   85da0:	461a      	movcs	r2, r3
   85da2:	4604      	mov	r4, r0
   85da4:	4616      	mov	r6, r2
   85da6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85daa:	f7ff bb3f 	b.w	8542c <_svfprintf_r+0xb90>
   85dae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85db0:	1cd8      	adds	r0, r3, #3
   85db2:	9310      	str	r3, [sp, #64]	; 0x40
   85db4:	db02      	blt.n	85dbc <_svfprintf_r+0x1520>
   85db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85db8:	4293      	cmp	r3, r2
   85dba:	dd04      	ble.n	85dc6 <_svfprintf_r+0x152a>
   85dbc:	3e02      	subs	r6, #2
   85dbe:	f026 0320 	bic.w	r3, r6, #32
   85dc2:	9308      	str	r3, [sp, #32]
   85dc4:	e49b      	b.n	856fe <_svfprintf_r+0xe62>
   85dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85dc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
   85dca:	428b      	cmp	r3, r1
   85dcc:	f2c0 817a 	blt.w	860c4 <_svfprintf_r+0x1828>
   85dd0:	07ea      	lsls	r2, r5, #31
   85dd2:	f140 8283 	bpl.w	862dc <_svfprintf_r+0x1a40>
   85dd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85dd8:	4413      	add	r3, r2
   85dda:	930c      	str	r3, [sp, #48]	; 0x30
   85ddc:	056e      	lsls	r6, r5, #21
   85dde:	f140 8277 	bpl.w	862d0 <_svfprintf_r+0x1a34>
   85de2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85de4:	2b00      	cmp	r3, #0
   85de6:	f300 8210 	bgt.w	8620a <_svfprintf_r+0x196e>
   85dea:	2667      	movs	r6, #103	; 0x67
   85dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85dee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85df2:	9308      	str	r3, [sp, #32]
   85df4:	2300      	movs	r3, #0
   85df6:	9312      	str	r3, [sp, #72]	; 0x48
   85df8:	9316      	str	r3, [sp, #88]	; 0x58
   85dfa:	e4e4      	b.n	857c6 <_svfprintf_r+0xf2a>
   85dfc:	222d      	movs	r2, #45	; 0x2d
   85dfe:	2300      	movs	r3, #0
   85e00:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   85e04:	9309      	str	r3, [sp, #36]	; 0x24
   85e06:	f7fe bf70 	b.w	84cea <_svfprintf_r+0x44e>
   85e0a:	bf00      	nop
   85e0c:	0008b3c0 	.word	0x0008b3c0
   85e10:	0008b3d4 	.word	0x0008b3d4
   85e14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85e16:	42a3      	cmp	r3, r4
   85e18:	f4bf ac65 	bcs.w	856e6 <_svfprintf_r+0xe4a>
   85e1c:	2130      	movs	r1, #48	; 0x30
   85e1e:	1c5a      	adds	r2, r3, #1
   85e20:	9228      	str	r2, [sp, #160]	; 0xa0
   85e22:	7019      	strb	r1, [r3, #0]
   85e24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85e26:	429c      	cmp	r4, r3
   85e28:	d8f9      	bhi.n	85e1e <_svfprintf_r+0x1582>
   85e2a:	e45c      	b.n	856e6 <_svfprintf_r+0xe4a>
   85e2c:	4651      	mov	r1, sl
   85e2e:	4648      	mov	r0, r9
   85e30:	aa2a      	add	r2, sp, #168	; 0xa8
   85e32:	f004 f91d 	bl	8a070 <__ssprint_r>
   85e36:	2800      	cmp	r0, #0
   85e38:	f47f a978 	bne.w	8512c <_svfprintf_r+0x890>
   85e3c:	783b      	ldrb	r3, [r7, #0]
   85e3e:	982c      	ldr	r0, [sp, #176]	; 0xb0
   85e40:	aa2d      	add	r2, sp, #180	; 0xb4
   85e42:	441e      	add	r6, r3
   85e44:	e5a4      	b.n	85990 <_svfprintf_r+0x10f4>
   85e46:	4651      	mov	r1, sl
   85e48:	4648      	mov	r0, r9
   85e4a:	aa2a      	add	r2, sp, #168	; 0xa8
   85e4c:	f004 f910 	bl	8a070 <__ssprint_r>
   85e50:	2800      	cmp	r0, #0
   85e52:	f47f a96b 	bne.w	8512c <_svfprintf_r+0x890>
   85e56:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85e58:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85e5c:	f7ff bad7 	b.w	8540e <_svfprintf_r+0xb72>
   85e60:	4651      	mov	r1, sl
   85e62:	4648      	mov	r0, r9
   85e64:	aa2a      	add	r2, sp, #168	; 0xa8
   85e66:	f004 f903 	bl	8a070 <__ssprint_r>
   85e6a:	2800      	cmp	r0, #0
   85e6c:	f47f a95e 	bne.w	8512c <_svfprintf_r+0x890>
   85e70:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85e72:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85e74:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85e78:	f7ff baee 	b.w	85458 <_svfprintf_r+0xbbc>
   85e7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   85e7e:	a928      	add	r1, sp, #160	; 0xa0
   85e80:	e9cd 0400 	strd	r0, r4, [sp]
   85e84:	9104      	str	r1, [sp, #16]
   85e86:	a825      	add	r0, sp, #148	; 0x94
   85e88:	a924      	add	r1, sp, #144	; 0x90
   85e8a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   85e8e:	4648      	mov	r0, r9
   85e90:	f001 faca 	bl	87428 <_dtoa_r>
   85e94:	2d47      	cmp	r5, #71	; 0x47
   85e96:	4607      	mov	r7, r0
   85e98:	d119      	bne.n	85ece <_svfprintf_r+0x1632>
   85e9a:	9d07      	ldr	r5, [sp, #28]
   85e9c:	462b      	mov	r3, r5
   85e9e:	07db      	lsls	r3, r3, #31
   85ea0:	f100 812a 	bmi.w	860f8 <_svfprintf_r+0x185c>
   85ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85ea6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   85ea8:	9207      	str	r2, [sp, #28]
   85eaa:	2247      	movs	r2, #71	; 0x47
   85eac:	9208      	str	r2, [sp, #32]
   85eae:	e41a      	b.n	856e6 <_svfprintf_r+0xe4a>
   85eb0:	2003      	movs	r0, #3
   85eb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   85eb4:	a928      	add	r1, sp, #160	; 0xa0
   85eb6:	e9cd 0400 	strd	r0, r4, [sp]
   85eba:	9104      	str	r1, [sp, #16]
   85ebc:	a825      	add	r0, sp, #148	; 0x94
   85ebe:	a924      	add	r1, sp, #144	; 0x90
   85ec0:	e9cd 1002 	strd	r1, r0, [sp, #8]
   85ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85ec6:	4648      	mov	r0, r9
   85ec8:	f001 faae 	bl	87428 <_dtoa_r>
   85ecc:	4607      	mov	r7, r0
   85ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85ed0:	2d46      	cmp	r5, #70	; 0x46
   85ed2:	eb07 0403 	add.w	r4, r7, r3
   85ed6:	f47f abf9 	bne.w	856cc <_svfprintf_r+0xe30>
   85eda:	783b      	ldrb	r3, [r7, #0]
   85edc:	2b30      	cmp	r3, #48	; 0x30
   85ede:	f000 821c 	beq.w	8631a <_svfprintf_r+0x1a7e>
   85ee2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85ee6:	9d07      	ldr	r5, [sp, #28]
   85ee8:	441c      	add	r4, r3
   85eea:	9207      	str	r2, [sp, #28]
   85eec:	f7ff bbf1 	b.w	856d2 <_svfprintf_r+0xe36>
   85ef0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85ef4:	f7ff b9c3 	b.w	8527e <_svfprintf_r+0x9e2>
   85ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85efa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85efe:	9308      	str	r3, [sp, #32]
   85f00:	930c      	str	r3, [sp, #48]	; 0x30
   85f02:	9009      	str	r0, [sp, #36]	; 0x24
   85f04:	940e      	str	r4, [sp, #56]	; 0x38
   85f06:	9012      	str	r0, [sp, #72]	; 0x48
   85f08:	9016      	str	r0, [sp, #88]	; 0x58
   85f0a:	9010      	str	r0, [sp, #64]	; 0x40
   85f0c:	f7fe beea 	b.w	84ce4 <_svfprintf_r+0x448>
   85f10:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85f12:	2a00      	cmp	r2, #0
   85f14:	9210      	str	r2, [sp, #64]	; 0x40
   85f16:	f340 821b 	ble.w	86350 <_svfprintf_r+0x1ab4>
   85f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
   85f1c:	f005 0301 	and.w	r3, r5, #1
   85f20:	430b      	orrs	r3, r1
   85f22:	f040 819a 	bne.w	8625a <_svfprintf_r+0x19be>
   85f26:	2666      	movs	r6, #102	; 0x66
   85f28:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85f2a:	930c      	str	r3, [sp, #48]	; 0x30
   85f2c:	056a      	lsls	r2, r5, #21
   85f2e:	f100 816d 	bmi.w	8620c <_svfprintf_r+0x1970>
   85f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85f34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   85f38:	9308      	str	r3, [sp, #32]
   85f3a:	e75b      	b.n	85df4 <_svfprintf_r+0x1558>
   85f3c:	4651      	mov	r1, sl
   85f3e:	4648      	mov	r0, r9
   85f40:	aa2a      	add	r2, sp, #168	; 0xa8
   85f42:	f004 f895 	bl	8a070 <__ssprint_r>
   85f46:	2800      	cmp	r0, #0
   85f48:	f47f a8f0 	bne.w	8512c <_svfprintf_r+0x890>
   85f4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85f4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85f50:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85f52:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85f56:	1ad3      	subs	r3, r2, r3
   85f58:	f7ff ba93 	b.w	85482 <_svfprintf_r+0xbe6>
   85f5c:	2330      	movs	r3, #48	; 0x30
   85f5e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   85f62:	2358      	movs	r3, #88	; 0x58
   85f64:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   85f68:	9b07      	ldr	r3, [sp, #28]
   85f6a:	f043 0402 	orr.w	r4, r3, #2
   85f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85f70:	2b63      	cmp	r3, #99	; 0x63
   85f72:	f300 80f2 	bgt.w	8615a <_svfprintf_r+0x18be>
   85f76:	2300      	movs	r3, #0
   85f78:	af3d      	add	r7, sp, #244	; 0xf4
   85f7a:	930d      	str	r3, [sp, #52]	; 0x34
   85f7c:	9b07      	ldr	r3, [sp, #28]
   85f7e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   85f82:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   85f86:	9312      	str	r3, [sp, #72]	; 0x48
   85f88:	4613      	mov	r3, r2
   85f8a:	2b00      	cmp	r3, #0
   85f8c:	f026 0520 	bic.w	r5, r6, #32
   85f90:	9407      	str	r4, [sp, #28]
   85f92:	f2c0 808d 	blt.w	860b0 <_svfprintf_r+0x1814>
   85f96:	930f      	str	r3, [sp, #60]	; 0x3c
   85f98:	2300      	movs	r3, #0
   85f9a:	9508      	str	r5, [sp, #32]
   85f9c:	910c      	str	r1, [sp, #48]	; 0x30
   85f9e:	931e      	str	r3, [sp, #120]	; 0x78
   85fa0:	2e61      	cmp	r6, #97	; 0x61
   85fa2:	f000 817d 	beq.w	862a0 <_svfprintf_r+0x1a04>
   85fa6:	2e41      	cmp	r6, #65	; 0x41
   85fa8:	f47f ab77 	bne.w	8569a <_svfprintf_r+0xdfe>
   85fac:	aa24      	add	r2, sp, #144	; 0x90
   85fae:	980c      	ldr	r0, [sp, #48]	; 0x30
   85fb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   85fb2:	f003 ffcd 	bl	89f50 <frexp>
   85fb6:	2200      	movs	r2, #0
   85fb8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   85fbc:	f004 fcf2 	bl	8a9a4 <__aeabi_dmul>
   85fc0:	4604      	mov	r4, r0
   85fc2:	460d      	mov	r5, r1
   85fc4:	2200      	movs	r2, #0
   85fc6:	2300      	movs	r3, #0
   85fc8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   85fcc:	f004 ff52 	bl	8ae74 <__aeabi_dcmpeq>
   85fd0:	b108      	cbz	r0, 85fd6 <_svfprintf_r+0x173a>
   85fd2:	2301      	movs	r3, #1
   85fd4:	9324      	str	r3, [sp, #144]	; 0x90
   85fd6:	4bae      	ldr	r3, [pc, #696]	; (86290 <_svfprintf_r+0x19f4>)
   85fd8:	930c      	str	r3, [sp, #48]	; 0x30
   85fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85fdc:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   85fe0:	3b01      	subs	r3, #1
   85fe2:	9613      	str	r6, [sp, #76]	; 0x4c
   85fe4:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   85fe8:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   85fec:	9721      	str	r7, [sp, #132]	; 0x84
   85fee:	46ba      	mov	sl, r7
   85ff0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   85ff4:	4699      	mov	r9, r3
   85ff6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85ffa:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   85ffe:	e006      	b.n	8600e <_svfprintf_r+0x1772>
   86000:	2200      	movs	r2, #0
   86002:	2300      	movs	r3, #0
   86004:	f004 ff36 	bl	8ae74 <__aeabi_dcmpeq>
   86008:	f109 39ff 	add.w	r9, r9, #4294967295
   8600c:	b9e8      	cbnz	r0, 8604a <_svfprintf_r+0x17ae>
   8600e:	2200      	movs	r2, #0
   86010:	4ba0      	ldr	r3, [pc, #640]	; (86294 <_svfprintf_r+0x19f8>)
   86012:	4630      	mov	r0, r6
   86014:	4639      	mov	r1, r7
   86016:	f004 fcc5 	bl	8a9a4 <__aeabi_dmul>
   8601a:	460d      	mov	r5, r1
   8601c:	4604      	mov	r4, r0
   8601e:	f004 ff71 	bl	8af04 <__aeabi_d2iz>
   86022:	4680      	mov	r8, r0
   86024:	f004 fc54 	bl	8a8d0 <__aeabi_i2d>
   86028:	460b      	mov	r3, r1
   8602a:	4602      	mov	r2, r0
   8602c:	4629      	mov	r1, r5
   8602e:	4620      	mov	r0, r4
   86030:	f004 fb00 	bl	8a634 <__aeabi_dsub>
   86034:	f81b 3008 	ldrb.w	r3, [fp, r8]
   86038:	f1b9 3fff 	cmp.w	r9, #4294967295
   8603c:	4655      	mov	r5, sl
   8603e:	4606      	mov	r6, r0
   86040:	460f      	mov	r7, r1
   86042:	464c      	mov	r4, r9
   86044:	f80a 3b01 	strb.w	r3, [sl], #1
   86048:	d1da      	bne.n	86000 <_svfprintf_r+0x1764>
   8604a:	4630      	mov	r0, r6
   8604c:	4639      	mov	r1, r7
   8604e:	2200      	movs	r2, #0
   86050:	4b91      	ldr	r3, [pc, #580]	; (86298 <_svfprintf_r+0x19fc>)
   86052:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   86056:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   86058:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8605c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   86060:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86064:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   86068:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   8606c:	9f21      	ldr	r7, [sp, #132]	; 0x84
   8606e:	f004 ff29 	bl	8aec4 <__aeabi_dcmpgt>
   86072:	2800      	cmp	r0, #0
   86074:	d155      	bne.n	86122 <_svfprintf_r+0x1886>
   86076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8607a:	2200      	movs	r2, #0
   8607c:	4b86      	ldr	r3, [pc, #536]	; (86298 <_svfprintf_r+0x19fc>)
   8607e:	f004 fef9 	bl	8ae74 <__aeabi_dcmpeq>
   86082:	b110      	cbz	r0, 8608a <_svfprintf_r+0x17ee>
   86084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86086:	07db      	lsls	r3, r3, #31
   86088:	d44b      	bmi.n	86122 <_svfprintf_r+0x1886>
   8608a:	2c00      	cmp	r4, #0
   8608c:	db08      	blt.n	860a0 <_svfprintf_r+0x1804>
   8608e:	2230      	movs	r2, #48	; 0x30
   86090:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86092:	1c63      	adds	r3, r4, #1
   86094:	440b      	add	r3, r1
   86096:	f801 2b01 	strb.w	r2, [r1], #1
   8609a:	428b      	cmp	r3, r1
   8609c:	d1fb      	bne.n	86096 <_svfprintf_r+0x17fa>
   8609e:	910f      	str	r1, [sp, #60]	; 0x3c
   860a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   860a2:	9d07      	ldr	r5, [sp, #28]
   860a4:	1bdb      	subs	r3, r3, r7
   860a6:	9313      	str	r3, [sp, #76]	; 0x4c
   860a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   860aa:	9307      	str	r3, [sp, #28]
   860ac:	f7ff bb1d 	b.w	856ea <_svfprintf_r+0xe4e>
   860b0:	9508      	str	r5, [sp, #32]
   860b2:	232d      	movs	r3, #45	; 0x2d
   860b4:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   860b8:	931e      	str	r3, [sp, #120]	; 0x78
   860ba:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   860be:	910c      	str	r1, [sp, #48]	; 0x30
   860c0:	930f      	str	r3, [sp, #60]	; 0x3c
   860c2:	e76d      	b.n	85fa0 <_svfprintf_r+0x1704>
   860c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   860c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   860c8:	189a      	adds	r2, r3, r2
   860ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   860cc:	920c      	str	r2, [sp, #48]	; 0x30
   860ce:	2b00      	cmp	r3, #0
   860d0:	f340 811a 	ble.w	86308 <_svfprintf_r+0x1a6c>
   860d4:	2667      	movs	r6, #103	; 0x67
   860d6:	e729      	b.n	85f2c <_svfprintf_r+0x1690>
   860d8:	2300      	movs	r3, #0
   860da:	9309      	str	r3, [sp, #36]	; 0x24
   860dc:	f7fe bc2b 	b.w	84936 <_svfprintf_r+0x9a>
   860e0:	4648      	mov	r0, r9
   860e2:	4651      	mov	r1, sl
   860e4:	aa2a      	add	r2, sp, #168	; 0xa8
   860e6:	f003 ffc3 	bl	8a070 <__ssprint_r>
   860ea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   860ee:	f7fe bdae 	b.w	84c4e <_svfprintf_r+0x3b2>
   860f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   860f4:	f7ff b95f 	b.w	853b6 <_svfprintf_r+0xb1a>
   860f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   860fa:	9d07      	ldr	r5, [sp, #28]
   860fc:	18fc      	adds	r4, r7, r3
   860fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86100:	9307      	str	r3, [sp, #28]
   86102:	2347      	movs	r3, #71	; 0x47
   86104:	9308      	str	r3, [sp, #32]
   86106:	f7ff bae4 	b.w	856d2 <_svfprintf_r+0xe36>
   8610a:	46cb      	mov	fp, r9
   8610c:	46d1      	mov	r9, sl
   8610e:	f7ff b80e 	b.w	8512e <_svfprintf_r+0x892>
   86112:	46d1      	mov	r9, sl
   86114:	f7ff b80b 	b.w	8512e <_svfprintf_r+0x892>
   86118:	4b60      	ldr	r3, [pc, #384]	; (8629c <_svfprintf_r+0x1a00>)
   8611a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8611c:	930f      	str	r3, [sp, #60]	; 0x3c
   8611e:	f7fe bfb7 	b.w	85090 <_svfprintf_r+0x7f4>
   86122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86124:	990c      	ldr	r1, [sp, #48]	; 0x30
   86126:	9528      	str	r5, [sp, #160]	; 0xa0
   86128:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   8612c:	7bc9      	ldrb	r1, [r1, #15]
   8612e:	428a      	cmp	r2, r1
   86130:	f040 812a 	bne.w	86388 <_svfprintf_r+0x1aec>
   86134:	2030      	movs	r0, #48	; 0x30
   86136:	f803 0c01 	strb.w	r0, [r3, #-1]
   8613a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8613c:	1e5a      	subs	r2, r3, #1
   8613e:	9228      	str	r2, [sp, #160]	; 0xa0
   86140:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   86144:	4291      	cmp	r1, r2
   86146:	d0f6      	beq.n	86136 <_svfprintf_r+0x189a>
   86148:	2a39      	cmp	r2, #57	; 0x39
   8614a:	bf0b      	itete	eq
   8614c:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   8614e:	3201      	addne	r2, #1
   86150:	7a92      	ldrbeq	r2, [r2, #10]
   86152:	b2d2      	uxtbne	r2, r2
   86154:	f803 2c01 	strb.w	r2, [r3, #-1]
   86158:	e7a2      	b.n	860a0 <_svfprintf_r+0x1804>
   8615a:	4648      	mov	r0, r9
   8615c:	1c59      	adds	r1, r3, #1
   8615e:	f002 fe11 	bl	88d84 <_malloc_r>
   86162:	4607      	mov	r7, r0
   86164:	2800      	cmp	r0, #0
   86166:	f000 811d 	beq.w	863a4 <_svfprintf_r+0x1b08>
   8616a:	900d      	str	r0, [sp, #52]	; 0x34
   8616c:	e706      	b.n	85f7c <_svfprintf_r+0x16e0>
   8616e:	2330      	movs	r3, #48	; 0x30
   86170:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   86174:	2378      	movs	r3, #120	; 0x78
   86176:	e6f5      	b.n	85f64 <_svfprintf_r+0x16c8>
   86178:	9b07      	ldr	r3, [sp, #28]
   8617a:	9308      	str	r3, [sp, #32]
   8617c:	f7ff b894 	b.w	852a8 <_svfprintf_r+0xa0c>
   86180:	464a      	mov	r2, r9
   86182:	46d1      	mov	r9, sl
   86184:	4692      	mov	sl, r2
   86186:	9f09      	ldr	r7, [sp, #36]	; 0x24
   86188:	3301      	adds	r3, #1
   8618a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8618c:	442c      	add	r4, r5
   8618e:	2b07      	cmp	r3, #7
   86190:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86194:	e9c8 2500 	strd	r2, r5, [r8]
   86198:	f77f a8b8 	ble.w	8530c <_svfprintf_r+0xa70>
   8619c:	4651      	mov	r1, sl
   8619e:	4648      	mov	r0, r9
   861a0:	aa2a      	add	r2, sp, #168	; 0xa8
   861a2:	f003 ff65 	bl	8a070 <__ssprint_r>
   861a6:	2800      	cmp	r0, #0
   861a8:	f47e afc0 	bne.w	8512c <_svfprintf_r+0x890>
   861ac:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   861b0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   861b4:	f7ff b8ac 	b.w	85310 <_svfprintf_r+0xa74>
   861b8:	2b00      	cmp	r3, #0
   861ba:	bf08      	it	eq
   861bc:	2301      	moveq	r3, #1
   861be:	9309      	str	r3, [sp, #36]	; 0x24
   861c0:	9b07      	ldr	r3, [sp, #28]
   861c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   861c6:	9312      	str	r3, [sp, #72]	; 0x48
   861c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   861ca:	2b00      	cmp	r3, #0
   861cc:	930c      	str	r3, [sp, #48]	; 0x30
   861ce:	f2c0 80bd 	blt.w	8634c <_svfprintf_r+0x1ab0>
   861d2:	2402      	movs	r4, #2
   861d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   861d6:	a828      	add	r0, sp, #160	; 0xa0
   861d8:	aa25      	add	r2, sp, #148	; 0x94
   861da:	ab24      	add	r3, sp, #144	; 0x90
   861dc:	e9cd 2003 	strd	r2, r0, [sp, #12]
   861e0:	e9cd 4500 	strd	r4, r5, [sp]
   861e4:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   861e8:	9302      	str	r3, [sp, #8]
   861ea:	4622      	mov	r2, r4
   861ec:	462b      	mov	r3, r5
   861ee:	4648      	mov	r0, r9
   861f0:	911e      	str	r1, [sp, #120]	; 0x78
   861f2:	f001 f919 	bl	87428 <_dtoa_r>
   861f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   861f8:	4607      	mov	r7, r0
   861fa:	930f      	str	r3, [sp, #60]	; 0x3c
   861fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   861fe:	940c      	str	r4, [sp, #48]	; 0x30
   86200:	930d      	str	r3, [sp, #52]	; 0x34
   86202:	e64a      	b.n	85e9a <_svfprintf_r+0x15fe>
   86204:	2300      	movs	r3, #0
   86206:	930d      	str	r3, [sp, #52]	; 0x34
   86208:	e753      	b.n	860b2 <_svfprintf_r+0x1816>
   8620a:	2667      	movs	r6, #103	; 0x67
   8620c:	991a      	ldr	r1, [sp, #104]	; 0x68
   8620e:	780b      	ldrb	r3, [r1, #0]
   86210:	2bff      	cmp	r3, #255	; 0xff
   86212:	f000 80de 	beq.w	863d2 <_svfprintf_r+0x1b36>
   86216:	2400      	movs	r4, #0
   86218:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8621a:	4620      	mov	r0, r4
   8621c:	e003      	b.n	86226 <_svfprintf_r+0x198a>
   8621e:	3001      	adds	r0, #1
   86220:	3101      	adds	r1, #1
   86222:	2bff      	cmp	r3, #255	; 0xff
   86224:	d008      	beq.n	86238 <_svfprintf_r+0x199c>
   86226:	4293      	cmp	r3, r2
   86228:	da06      	bge.n	86238 <_svfprintf_r+0x199c>
   8622a:	1ad2      	subs	r2, r2, r3
   8622c:	784b      	ldrb	r3, [r1, #1]
   8622e:	2b00      	cmp	r3, #0
   86230:	d1f5      	bne.n	8621e <_svfprintf_r+0x1982>
   86232:	780b      	ldrb	r3, [r1, #0]
   86234:	3401      	adds	r4, #1
   86236:	e7f4      	b.n	86222 <_svfprintf_r+0x1986>
   86238:	911a      	str	r1, [sp, #104]	; 0x68
   8623a:	9210      	str	r2, [sp, #64]	; 0x40
   8623c:	9016      	str	r0, [sp, #88]	; 0x58
   8623e:	9412      	str	r4, [sp, #72]	; 0x48
   86240:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86242:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86244:	990c      	ldr	r1, [sp, #48]	; 0x30
   86246:	4413      	add	r3, r2
   86248:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   8624a:	fb02 1303 	mla	r3, r2, r3, r1
   8624e:	930c      	str	r3, [sp, #48]	; 0x30
   86250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86254:	9308      	str	r3, [sp, #32]
   86256:	f7ff bab6 	b.w	857c6 <_svfprintf_r+0xf2a>
   8625a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8625c:	2666      	movs	r6, #102	; 0x66
   8625e:	18d3      	adds	r3, r2, r3
   86260:	4419      	add	r1, r3
   86262:	910c      	str	r1, [sp, #48]	; 0x30
   86264:	e662      	b.n	85f2c <_svfprintf_r+0x1690>
   86266:	f106 020f 	add.w	r2, r6, #15
   8626a:	2101      	movs	r1, #1
   8626c:	b2d2      	uxtb	r2, r2
   8626e:	f7ff ba4f 	b.w	85710 <_svfprintf_r+0xe74>
   86272:	2900      	cmp	r1, #0
   86274:	d167      	bne.n	86346 <_svfprintf_r+0x1aaa>
   86276:	2230      	movs	r2, #48	; 0x30
   86278:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   8627c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   86280:	3330      	adds	r3, #48	; 0x30
   86282:	f802 3b01 	strb.w	r3, [r2], #1
   86286:	ab26      	add	r3, sp, #152	; 0x98
   86288:	1ad3      	subs	r3, r2, r3
   8628a:	931b      	str	r3, [sp, #108]	; 0x6c
   8628c:	f7ff ba83 	b.w	85796 <_svfprintf_r+0xefa>
   86290:	0008b3a4 	.word	0x0008b3a4
   86294:	40300000 	.word	0x40300000
   86298:	3fe00000 	.word	0x3fe00000
   8629c:	0008b3d4 	.word	0x0008b3d4
   862a0:	aa24      	add	r2, sp, #144	; 0x90
   862a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   862a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   862a6:	f003 fe53 	bl	89f50 <frexp>
   862aa:	2200      	movs	r2, #0
   862ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   862b0:	f004 fb78 	bl	8a9a4 <__aeabi_dmul>
   862b4:	4604      	mov	r4, r0
   862b6:	460d      	mov	r5, r1
   862b8:	2200      	movs	r2, #0
   862ba:	2300      	movs	r3, #0
   862bc:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   862c0:	f004 fdd8 	bl	8ae74 <__aeabi_dcmpeq>
   862c4:	b108      	cbz	r0, 862ca <_svfprintf_r+0x1a2e>
   862c6:	2301      	movs	r3, #1
   862c8:	9324      	str	r3, [sp, #144]	; 0x90
   862ca:	4b44      	ldr	r3, [pc, #272]	; (863dc <_svfprintf_r+0x1b40>)
   862cc:	930c      	str	r3, [sp, #48]	; 0x30
   862ce:	e684      	b.n	85fda <_svfprintf_r+0x173e>
   862d0:	2667      	movs	r6, #103	; 0x67
   862d2:	e62e      	b.n	85f32 <_svfprintf_r+0x1696>
   862d4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   862d8:	f7fe bcb9 	b.w	84c4e <_svfprintf_r+0x3b2>
   862dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   862de:	930c      	str	r3, [sp, #48]	; 0x30
   862e0:	e57c      	b.n	85ddc <_svfprintf_r+0x1540>
   862e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   862e4:	2003      	movs	r0, #3
   862e6:	2b00      	cmp	r3, #0
   862e8:	bfb8      	it	lt
   862ea:	232d      	movlt	r3, #45	; 0x2d
   862ec:	f04f 0100 	mov.w	r1, #0
   862f0:	bfba      	itte	lt
   862f2:	461a      	movlt	r2, r3
   862f4:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   862f8:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   862fc:	4f38      	ldr	r7, [pc, #224]	; (863e0 <_svfprintf_r+0x1b44>)
   862fe:	4b39      	ldr	r3, [pc, #228]	; (863e4 <_svfprintf_r+0x1b48>)
   86300:	9008      	str	r0, [sp, #32]
   86302:	910d      	str	r1, [sp, #52]	; 0x34
   86304:	f7fe bce2 	b.w	84ccc <_svfprintf_r+0x430>
   86308:	f1c3 0301 	rsb	r3, r3, #1
   8630c:	441a      	add	r2, r3
   8630e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86312:	2667      	movs	r6, #103	; 0x67
   86314:	920c      	str	r2, [sp, #48]	; 0x30
   86316:	9308      	str	r3, [sp, #32]
   86318:	e56c      	b.n	85df4 <_svfprintf_r+0x1558>
   8631a:	2200      	movs	r2, #0
   8631c:	2300      	movs	r3, #0
   8631e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86320:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86322:	f004 fda7 	bl	8ae74 <__aeabi_dcmpeq>
   86326:	2800      	cmp	r0, #0
   86328:	f47f addb 	bne.w	85ee2 <_svfprintf_r+0x1646>
   8632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8632e:	f1c3 0301 	rsb	r3, r3, #1
   86332:	9324      	str	r3, [sp, #144]	; 0x90
   86334:	e5d6      	b.n	85ee4 <_svfprintf_r+0x1648>
   86336:	992b      	ldr	r1, [sp, #172]	; 0xac
   86338:	f7ff bb59 	b.w	859ee <_svfprintf_r+0x1152>
   8633c:	07e9      	lsls	r1, r5, #31
   8633e:	f57f aa35 	bpl.w	857ac <_svfprintf_r+0xf10>
   86342:	f7ff ba2f 	b.w	857a4 <_svfprintf_r+0xf08>
   86346:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   8634a:	e799      	b.n	86280 <_svfprintf_r+0x19e4>
   8634c:	900d      	str	r0, [sp, #52]	; 0x34
   8634e:	e6b0      	b.n	860b2 <_svfprintf_r+0x1816>
   86350:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86352:	f005 0501 	and.w	r5, r5, #1
   86356:	4613      	mov	r3, r2
   86358:	432b      	orrs	r3, r5
   8635a:	d104      	bne.n	86366 <_svfprintf_r+0x1aca>
   8635c:	2301      	movs	r3, #1
   8635e:	2666      	movs	r6, #102	; 0x66
   86360:	9308      	str	r3, [sp, #32]
   86362:	930c      	str	r3, [sp, #48]	; 0x30
   86364:	e546      	b.n	85df4 <_svfprintf_r+0x1558>
   86366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86368:	2666      	movs	r6, #102	; 0x66
   8636a:	3301      	adds	r3, #1
   8636c:	441a      	add	r2, r3
   8636e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86372:	920c      	str	r2, [sp, #48]	; 0x30
   86374:	9308      	str	r3, [sp, #32]
   86376:	e53d      	b.n	85df4 <_svfprintf_r+0x1558>
   86378:	4b1b      	ldr	r3, [pc, #108]	; (863e8 <_svfprintf_r+0x1b4c>)
   8637a:	930f      	str	r3, [sp, #60]	; 0x3c
   8637c:	f7ff bbe9 	b.w	85b52 <_svfprintf_r+0x12b6>
   86380:	4a19      	ldr	r2, [pc, #100]	; (863e8 <_svfprintf_r+0x1b4c>)
   86382:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86384:	920f      	str	r2, [sp, #60]	; 0x3c
   86386:	e4b1      	b.n	85cec <_svfprintf_r+0x1450>
   86388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8638a:	e6dd      	b.n	86148 <_svfprintf_r+0x18ac>
   8638c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8638e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   86392:	f853 0b04 	ldr.w	r0, [r3], #4
   86396:	4693      	mov	fp, r2
   86398:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8639c:	9009      	str	r0, [sp, #36]	; 0x24
   8639e:	930e      	str	r3, [sp, #56]	; 0x38
   863a0:	f7fe bac7 	b.w	84932 <_svfprintf_r+0x96>
   863a4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   863a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   863ac:	f8aa 300c 	strh.w	r3, [sl, #12]
   863b0:	f7fe bc4d 	b.w	84c4e <_svfprintf_r+0x3b2>
   863b4:	4a0c      	ldr	r2, [pc, #48]	; (863e8 <_svfprintf_r+0x1b4c>)
   863b6:	920f      	str	r2, [sp, #60]	; 0x3c
   863b8:	e6e6      	b.n	86188 <_svfprintf_r+0x18ec>
   863ba:	230c      	movs	r3, #12
   863bc:	f04f 32ff 	mov.w	r2, #4294967295
   863c0:	f8c9 3000 	str.w	r3, [r9]
   863c4:	920a      	str	r2, [sp, #40]	; 0x28
   863c6:	f7fe bc49 	b.w	84c5c <_svfprintf_r+0x3c0>
   863ca:	2302      	movs	r3, #2
   863cc:	931b      	str	r3, [sp, #108]	; 0x6c
   863ce:	f7ff b9e2 	b.w	85796 <_svfprintf_r+0xefa>
   863d2:	2300      	movs	r3, #0
   863d4:	9312      	str	r3, [sp, #72]	; 0x48
   863d6:	9316      	str	r3, [sp, #88]	; 0x58
   863d8:	e732      	b.n	86240 <_svfprintf_r+0x19a4>
   863da:	bf00      	nop
   863dc:	0008b390 	.word	0x0008b390
   863e0:	0008b388 	.word	0x0008b388
   863e4:	0008b38c 	.word	0x0008b38c
   863e8:	0008b3d4 	.word	0x0008b3d4

000863ec <__sprint_r.part.0>:
   863ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   863f2:	4690      	mov	r8, r2
   863f4:	049c      	lsls	r4, r3, #18
   863f6:	d52d      	bpl.n	86454 <__sprint_r.part.0+0x68>
   863f8:	6893      	ldr	r3, [r2, #8]
   863fa:	6812      	ldr	r2, [r2, #0]
   863fc:	b343      	cbz	r3, 86450 <__sprint_r.part.0+0x64>
   863fe:	468b      	mov	fp, r1
   86400:	4606      	mov	r6, r0
   86402:	f102 0908 	add.w	r9, r2, #8
   86406:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   8640a:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8640e:	d015      	beq.n	8643c <__sprint_r.part.0+0x50>
   86410:	2400      	movs	r4, #0
   86412:	3d04      	subs	r5, #4
   86414:	e001      	b.n	8641a <__sprint_r.part.0+0x2e>
   86416:	42a7      	cmp	r7, r4
   86418:	d00e      	beq.n	86438 <__sprint_r.part.0+0x4c>
   8641a:	465a      	mov	r2, fp
   8641c:	4630      	mov	r0, r6
   8641e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   86422:	f002 f8f9 	bl	88618 <_fputwc_r>
   86426:	1c43      	adds	r3, r0, #1
   86428:	f104 0401 	add.w	r4, r4, #1
   8642c:	d1f3      	bne.n	86416 <__sprint_r.part.0+0x2a>
   8642e:	2300      	movs	r3, #0
   86430:	e9c8 3301 	strd	r3, r3, [r8, #4]
   86434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86438:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8643c:	f02a 0a03 	bic.w	sl, sl, #3
   86440:	eba3 030a 	sub.w	r3, r3, sl
   86444:	f8c8 3008 	str.w	r3, [r8, #8]
   86448:	f109 0908 	add.w	r9, r9, #8
   8644c:	2b00      	cmp	r3, #0
   8644e:	d1da      	bne.n	86406 <__sprint_r.part.0+0x1a>
   86450:	2000      	movs	r0, #0
   86452:	e7ec      	b.n	8642e <__sprint_r.part.0+0x42>
   86454:	f002 fa6a 	bl	8892c <__sfvwrite_r>
   86458:	2300      	movs	r3, #0
   8645a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8645e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86462:	bf00      	nop

00086464 <_vfiprintf_r>:
   86464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86468:	b0bb      	sub	sp, #236	; 0xec
   8646a:	461c      	mov	r4, r3
   8646c:	4689      	mov	r9, r1
   8646e:	4690      	mov	r8, r2
   86470:	e9cd 3004 	strd	r3, r0, [sp, #16]
   86474:	b118      	cbz	r0, 8647e <_vfiprintf_r+0x1a>
   86476:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86478:	2b00      	cmp	r3, #0
   8647a:	f000 827a 	beq.w	86972 <_vfiprintf_r+0x50e>
   8647e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   86482:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   86486:	07de      	lsls	r6, r3, #31
   86488:	b28a      	uxth	r2, r1
   8648a:	d402      	bmi.n	86492 <_vfiprintf_r+0x2e>
   8648c:	058d      	lsls	r5, r1, #22
   8648e:	f140 851a 	bpl.w	86ec6 <_vfiprintf_r+0xa62>
   86492:	0490      	lsls	r0, r2, #18
   86494:	d40a      	bmi.n	864ac <_vfiprintf_r+0x48>
   86496:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8649a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8649e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   864a2:	f8a9 200c 	strh.w	r2, [r9, #12]
   864a6:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   864aa:	b292      	uxth	r2, r2
   864ac:	0711      	lsls	r1, r2, #28
   864ae:	f140 80f6 	bpl.w	8669e <_vfiprintf_r+0x23a>
   864b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   864b6:	2b00      	cmp	r3, #0
   864b8:	f000 80f1 	beq.w	8669e <_vfiprintf_r+0x23a>
   864bc:	f002 031a 	and.w	r3, r2, #26
   864c0:	2b0a      	cmp	r3, #10
   864c2:	f000 80fa 	beq.w	866ba <_vfiprintf_r+0x256>
   864c6:	2300      	movs	r3, #0
   864c8:	46cb      	mov	fp, r9
   864ca:	e9cd 3308 	strd	r3, r3, [sp, #32]
   864ce:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   864d2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   864d6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   864da:	9303      	str	r3, [sp, #12]
   864dc:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   864e0:	f898 3000 	ldrb.w	r3, [r8]
   864e4:	2b00      	cmp	r3, #0
   864e6:	f000 81ed 	beq.w	868c4 <_vfiprintf_r+0x460>
   864ea:	4644      	mov	r4, r8
   864ec:	e004      	b.n	864f8 <_vfiprintf_r+0x94>
   864ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   864f2:	2b00      	cmp	r3, #0
   864f4:	f000 8127 	beq.w	86746 <_vfiprintf_r+0x2e2>
   864f8:	2b25      	cmp	r3, #37	; 0x25
   864fa:	d1f8      	bne.n	864ee <_vfiprintf_r+0x8a>
   864fc:	ebb4 0508 	subs.w	r5, r4, r8
   86500:	f040 8125 	bne.w	8674e <_vfiprintf_r+0x2ea>
   86504:	7823      	ldrb	r3, [r4, #0]
   86506:	2b00      	cmp	r3, #0
   86508:	f000 81dc 	beq.w	868c4 <_vfiprintf_r+0x460>
   8650c:	f04f 0200 	mov.w	r2, #0
   86510:	2300      	movs	r3, #0
   86512:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   86516:	f04f 32ff 	mov.w	r2, #4294967295
   8651a:	252b      	movs	r5, #43	; 0x2b
   8651c:	461f      	mov	r7, r3
   8651e:	9302      	str	r3, [sp, #8]
   86520:	7863      	ldrb	r3, [r4, #1]
   86522:	f104 0801 	add.w	r8, r4, #1
   86526:	9200      	str	r2, [sp, #0]
   86528:	f108 0801 	add.w	r8, r8, #1
   8652c:	f1a3 0220 	sub.w	r2, r3, #32
   86530:	2a5a      	cmp	r2, #90	; 0x5a
   86532:	f200 8141 	bhi.w	867b8 <_vfiprintf_r+0x354>
   86536:	e8df f012 	tbh	[pc, r2, lsl #1]
   8653a:	0272      	.short	0x0272
   8653c:	013f013f 	.word	0x013f013f
   86540:	013f026d 	.word	0x013f026d
   86544:	013f013f 	.word	0x013f013f
   86548:	013f024b 	.word	0x013f024b
   8654c:	006a013f 	.word	0x006a013f
   86550:	013f0227 	.word	0x013f0227
   86554:	02310222 	.word	0x02310222
   86558:	022c013f 	.word	0x022c013f
   8655c:	005b005b 	.word	0x005b005b
   86560:	005b005b 	.word	0x005b005b
   86564:	005b005b 	.word	0x005b005b
   86568:	005b005b 	.word	0x005b005b
   8656c:	013f005b 	.word	0x013f005b
   86570:	013f013f 	.word	0x013f013f
   86574:	013f013f 	.word	0x013f013f
   86578:	013f013f 	.word	0x013f013f
   8657c:	013f013f 	.word	0x013f013f
   86580:	007a020e 	.word	0x007a020e
   86584:	013f013f 	.word	0x013f013f
   86588:	013f013f 	.word	0x013f013f
   8658c:	013f013f 	.word	0x013f013f
   86590:	013f013f 	.word	0x013f013f
   86594:	013f013f 	.word	0x013f013f
   86598:	013f00d7 	.word	0x013f00d7
   8659c:	013f013f 	.word	0x013f013f
   865a0:	013f01f2 	.word	0x013f01f2
   865a4:	013f0297 	.word	0x013f0297
   865a8:	0500013f 	.word	0x0500013f
   865ac:	013f013f 	.word	0x013f013f
   865b0:	013f013f 	.word	0x013f013f
   865b4:	013f013f 	.word	0x013f013f
   865b8:	013f013f 	.word	0x013f013f
   865bc:	013f013f 	.word	0x013f013f
   865c0:	007c020e 	.word	0x007c020e
   865c4:	013f013f 	.word	0x013f013f
   865c8:	028a013f 	.word	0x028a013f
   865cc:	0075007c 	.word	0x0075007c
   865d0:	027d013f 	.word	0x027d013f
   865d4:	02b6013f 	.word	0x02b6013f
   865d8:	02a600d9 	.word	0x02a600d9
   865dc:	013f0075 	.word	0x013f0075
   865e0:	007201f2 	.word	0x007201f2
   865e4:	013f04fe 	.word	0x013f04fe
   865e8:	051c013f 	.word	0x051c013f
   865ec:	0072013f 	.word	0x0072013f
   865f0:	2100      	movs	r1, #0
   865f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   865f6:	f818 3b01 	ldrb.w	r3, [r8], #1
   865fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   865fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   86602:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   86606:	2a09      	cmp	r2, #9
   86608:	d9f5      	bls.n	865f6 <_vfiprintf_r+0x192>
   8660a:	9102      	str	r1, [sp, #8]
   8660c:	e78e      	b.n	8652c <_vfiprintf_r+0xc8>
   8660e:	9b04      	ldr	r3, [sp, #16]
   86610:	f853 2b04 	ldr.w	r2, [r3], #4
   86614:	2a00      	cmp	r2, #0
   86616:	9202      	str	r2, [sp, #8]
   86618:	9304      	str	r3, [sp, #16]
   8661a:	f2c0 81ad 	blt.w	86978 <_vfiprintf_r+0x514>
   8661e:	f898 3000 	ldrb.w	r3, [r8]
   86622:	e781      	b.n	86528 <_vfiprintf_r+0xc4>
   86624:	f898 3000 	ldrb.w	r3, [r8]
   86628:	f047 0720 	orr.w	r7, r7, #32
   8662c:	e77c      	b.n	86528 <_vfiprintf_r+0xc4>
   8662e:	f047 0710 	orr.w	r7, r7, #16
   86632:	06bc      	lsls	r4, r7, #26
   86634:	f140 8158 	bpl.w	868e8 <_vfiprintf_r+0x484>
   86638:	9c04      	ldr	r4, [sp, #16]
   8663a:	3407      	adds	r4, #7
   8663c:	f024 0307 	bic.w	r3, r4, #7
   86640:	4619      	mov	r1, r3
   86642:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86646:	4614      	mov	r4, r2
   86648:	461d      	mov	r5, r3
   8664a:	9104      	str	r1, [sp, #16]
   8664c:	2a00      	cmp	r2, #0
   8664e:	f173 0300 	sbcs.w	r3, r3, #0
   86652:	f2c0 841e 	blt.w	86e92 <_vfiprintf_r+0xa2e>
   86656:	9b00      	ldr	r3, [sp, #0]
   86658:	3301      	adds	r3, #1
   8665a:	f000 84f0 	beq.w	8703e <_vfiprintf_r+0xbda>
   8665e:	ea54 0305 	orrs.w	r3, r4, r5
   86662:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   86666:	f000 83fc 	beq.w	86e62 <_vfiprintf_r+0x9fe>
   8666a:	2d00      	cmp	r5, #0
   8666c:	bf08      	it	eq
   8666e:	2c0a      	cmpeq	r4, #10
   86670:	f080 84a9 	bcs.w	86fc6 <_vfiprintf_r+0xb62>
   86674:	2301      	movs	r3, #1
   86676:	464f      	mov	r7, r9
   86678:	3430      	adds	r4, #48	; 0x30
   8667a:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8667e:	9301      	str	r3, [sp, #4]
   86680:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   86684:	e9dd 2100 	ldrd	r2, r1, [sp]
   86688:	428a      	cmp	r2, r1
   8668a:	bfb8      	it	lt
   8668c:	460a      	movlt	r2, r1
   8668e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   86692:	4615      	mov	r5, r2
   86694:	2b00      	cmp	r3, #0
   86696:	f000 809d 	beq.w	867d4 <_vfiprintf_r+0x370>
   8669a:	3501      	adds	r5, #1
   8669c:	e09a      	b.n	867d4 <_vfiprintf_r+0x370>
   8669e:	4649      	mov	r1, r9
   866a0:	9805      	ldr	r0, [sp, #20]
   866a2:	f000 fdb9 	bl	87218 <__swsetup_r>
   866a6:	2800      	cmp	r0, #0
   866a8:	f040 854a 	bne.w	87140 <_vfiprintf_r+0xcdc>
   866ac:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   866b0:	f002 031a 	and.w	r3, r2, #26
   866b4:	2b0a      	cmp	r3, #10
   866b6:	f47f af06 	bne.w	864c6 <_vfiprintf_r+0x62>
   866ba:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   866be:	2b00      	cmp	r3, #0
   866c0:	f6ff af01 	blt.w	864c6 <_vfiprintf_r+0x62>
   866c4:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   866c8:	07de      	lsls	r6, r3, #31
   866ca:	d402      	bmi.n	866d2 <_vfiprintf_r+0x26e>
   866cc:	0595      	lsls	r5, r2, #22
   866ce:	f140 850e 	bpl.w	870ee <_vfiprintf_r+0xc8a>
   866d2:	4623      	mov	r3, r4
   866d4:	4642      	mov	r2, r8
   866d6:	4649      	mov	r1, r9
   866d8:	9805      	ldr	r0, [sp, #20]
   866da:	f000 fd59 	bl	87190 <__sbprintf>
   866de:	9003      	str	r0, [sp, #12]
   866e0:	9803      	ldr	r0, [sp, #12]
   866e2:	b03b      	add	sp, #236	; 0xec
   866e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   866e8:	f047 0710 	orr.w	r7, r7, #16
   866ec:	06b8      	lsls	r0, r7, #26
   866ee:	9c04      	ldr	r4, [sp, #16]
   866f0:	f140 8109 	bpl.w	86906 <_vfiprintf_r+0x4a2>
   866f4:	3407      	adds	r4, #7
   866f6:	f024 0307 	bic.w	r3, r4, #7
   866fa:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   866fe:	9304      	str	r3, [sp, #16]
   86700:	2300      	movs	r3, #0
   86702:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   86706:	f04f 0200 	mov.w	r2, #0
   8670a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8670e:	9a00      	ldr	r2, [sp, #0]
   86710:	4611      	mov	r1, r2
   86712:	3101      	adds	r1, #1
   86714:	f000 81db 	beq.w	86ace <_vfiprintf_r+0x66a>
   86718:	ea54 0105 	orrs.w	r1, r4, r5
   8671c:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   86720:	f040 81d4 	bne.w	86acc <_vfiprintf_r+0x668>
   86724:	2a00      	cmp	r2, #0
   86726:	f040 848d 	bne.w	87044 <_vfiprintf_r+0xbe0>
   8672a:	2b00      	cmp	r3, #0
   8672c:	f040 839e 	bne.w	86e6c <_vfiprintf_r+0xa08>
   86730:	f019 0301 	ands.w	r3, r9, #1
   86734:	9301      	str	r3, [sp, #4]
   86736:	f000 83c3 	beq.w	86ec0 <_vfiprintf_r+0xa5c>
   8673a:	2330      	movs	r3, #48	; 0x30
   8673c:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   86740:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   86744:	e79e      	b.n	86684 <_vfiprintf_r+0x220>
   86746:	ebb4 0508 	subs.w	r5, r4, r8
   8674a:	f000 80bb 	beq.w	868c4 <_vfiprintf_r+0x460>
   8674e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   86752:	3301      	adds	r3, #1
   86754:	442a      	add	r2, r5
   86756:	2b07      	cmp	r3, #7
   86758:	e9ca 8500 	strd	r8, r5, [sl]
   8675c:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   86760:	dc06      	bgt.n	86770 <_vfiprintf_r+0x30c>
   86762:	f10a 0a08 	add.w	sl, sl, #8
   86766:	9a03      	ldr	r2, [sp, #12]
   86768:	7823      	ldrb	r3, [r4, #0]
   8676a:	442a      	add	r2, r5
   8676c:	9203      	str	r2, [sp, #12]
   8676e:	e6ca      	b.n	86506 <_vfiprintf_r+0xa2>
   86770:	2a00      	cmp	r2, #0
   86772:	f000 8372 	beq.w	86e5a <_vfiprintf_r+0x9f6>
   86776:	4659      	mov	r1, fp
   86778:	9805      	ldr	r0, [sp, #20]
   8677a:	aa0e      	add	r2, sp, #56	; 0x38
   8677c:	f7ff fe36 	bl	863ec <__sprint_r.part.0>
   86780:	b950      	cbnz	r0, 86798 <_vfiprintf_r+0x334>
   86782:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86786:	e7ee      	b.n	86766 <_vfiprintf_r+0x302>
   86788:	4659      	mov	r1, fp
   8678a:	9805      	ldr	r0, [sp, #20]
   8678c:	aa0e      	add	r2, sp, #56	; 0x38
   8678e:	f7ff fe2d 	bl	863ec <__sprint_r.part.0>
   86792:	2800      	cmp	r0, #0
   86794:	f000 808d 	beq.w	868b2 <_vfiprintf_r+0x44e>
   86798:	46d9      	mov	r9, fp
   8679a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8679e:	f013 0f01 	tst.w	r3, #1
   867a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   867a6:	f000 8095 	beq.w	868d4 <_vfiprintf_r+0x470>
   867aa:	065b      	lsls	r3, r3, #25
   867ac:	f100 84d4 	bmi.w	87158 <_vfiprintf_r+0xcf4>
   867b0:	9803      	ldr	r0, [sp, #12]
   867b2:	b03b      	add	sp, #236	; 0xec
   867b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867b8:	2b00      	cmp	r3, #0
   867ba:	f000 8083 	beq.w	868c4 <_vfiprintf_r+0x460>
   867be:	2501      	movs	r5, #1
   867c0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   867c4:	f04f 0300 	mov.w	r3, #0
   867c8:	9501      	str	r5, [sp, #4]
   867ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   867ce:	ae21      	add	r6, sp, #132	; 0x84
   867d0:	2300      	movs	r3, #0
   867d2:	9300      	str	r3, [sp, #0]
   867d4:	f017 0302 	ands.w	r3, r7, #2
   867d8:	9307      	str	r3, [sp, #28]
   867da:	bf18      	it	ne
   867dc:	3502      	addne	r5, #2
   867de:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   867e2:	9306      	str	r3, [sp, #24]
   867e4:	d104      	bne.n	867f0 <_vfiprintf_r+0x38c>
   867e6:	9b02      	ldr	r3, [sp, #8]
   867e8:	1b5c      	subs	r4, r3, r5
   867ea:	2c00      	cmp	r4, #0
   867ec:	f300 8274 	bgt.w	86cd8 <_vfiprintf_r+0x874>
   867f0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   867f4:	1c48      	adds	r0, r1, #1
   867f6:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   867fa:	b174      	cbz	r4, 8681a <_vfiprintf_r+0x3b6>
   867fc:	2101      	movs	r1, #1
   867fe:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   86802:	440a      	add	r2, r1
   86804:	2807      	cmp	r0, #7
   86806:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   8680a:	e9ca 4100 	strd	r4, r1, [sl]
   8680e:	f300 8246 	bgt.w	86c9e <_vfiprintf_r+0x83a>
   86812:	4601      	mov	r1, r0
   86814:	f10a 0a08 	add.w	sl, sl, #8
   86818:	3001      	adds	r0, #1
   8681a:	9b07      	ldr	r3, [sp, #28]
   8681c:	b1c3      	cbz	r3, 86850 <_vfiprintf_r+0x3ec>
   8681e:	2102      	movs	r1, #2
   86820:	ab0d      	add	r3, sp, #52	; 0x34
   86822:	440a      	add	r2, r1
   86824:	2807      	cmp	r0, #7
   86826:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   8682a:	e9ca 3100 	strd	r3, r1, [sl]
   8682e:	f340 824e 	ble.w	86cce <_vfiprintf_r+0x86a>
   86832:	2a00      	cmp	r2, #0
   86834:	f000 830c 	beq.w	86e50 <_vfiprintf_r+0x9ec>
   86838:	4659      	mov	r1, fp
   8683a:	9805      	ldr	r0, [sp, #20]
   8683c:	aa0e      	add	r2, sp, #56	; 0x38
   8683e:	f7ff fdd5 	bl	863ec <__sprint_r.part.0>
   86842:	2800      	cmp	r0, #0
   86844:	d1a8      	bne.n	86798 <_vfiprintf_r+0x334>
   86846:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8684a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8684e:	1c48      	adds	r0, r1, #1
   86850:	9b06      	ldr	r3, [sp, #24]
   86852:	2b80      	cmp	r3, #128	; 0x80
   86854:	f000 817e 	beq.w	86b54 <_vfiprintf_r+0x6f0>
   86858:	e9dd 3400 	ldrd	r3, r4, [sp]
   8685c:	1b1c      	subs	r4, r3, r4
   8685e:	2c00      	cmp	r4, #0
   86860:	f300 81d3 	bgt.w	86c0a <_vfiprintf_r+0x7a6>
   86864:	9b01      	ldr	r3, [sp, #4]
   86866:	2807      	cmp	r0, #7
   86868:	441a      	add	r2, r3
   8686a:	e9ca 6300 	strd	r6, r3, [sl]
   8686e:	9210      	str	r2, [sp, #64]	; 0x40
   86870:	900f      	str	r0, [sp, #60]	; 0x3c
   86872:	f340 816c 	ble.w	86b4e <_vfiprintf_r+0x6ea>
   86876:	2a00      	cmp	r2, #0
   86878:	f000 8276 	beq.w	86d68 <_vfiprintf_r+0x904>
   8687c:	4659      	mov	r1, fp
   8687e:	9805      	ldr	r0, [sp, #20]
   86880:	aa0e      	add	r2, sp, #56	; 0x38
   86882:	f7ff fdb3 	bl	863ec <__sprint_r.part.0>
   86886:	2800      	cmp	r0, #0
   86888:	d186      	bne.n	86798 <_vfiprintf_r+0x334>
   8688a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8688c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86890:	0779      	lsls	r1, r7, #29
   86892:	d504      	bpl.n	8689e <_vfiprintf_r+0x43a>
   86894:	9b02      	ldr	r3, [sp, #8]
   86896:	1b5c      	subs	r4, r3, r5
   86898:	2c00      	cmp	r4, #0
   8689a:	f300 826e 	bgt.w	86d7a <_vfiprintf_r+0x916>
   8689e:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   868a2:	42a9      	cmp	r1, r5
   868a4:	bfac      	ite	ge
   868a6:	185b      	addge	r3, r3, r1
   868a8:	195b      	addlt	r3, r3, r5
   868aa:	9303      	str	r3, [sp, #12]
   868ac:	2a00      	cmp	r2, #0
   868ae:	f47f af6b 	bne.w	86788 <_vfiprintf_r+0x324>
   868b2:	2300      	movs	r3, #0
   868b4:	930f      	str	r3, [sp, #60]	; 0x3c
   868b6:	f898 3000 	ldrb.w	r3, [r8]
   868ba:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   868be:	2b00      	cmp	r3, #0
   868c0:	f47f ae13 	bne.w	864ea <_vfiprintf_r+0x86>
   868c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   868c6:	46d9      	mov	r9, fp
   868c8:	2b00      	cmp	r3, #0
   868ca:	f040 8426 	bne.w	8711a <_vfiprintf_r+0xcb6>
   868ce:	2300      	movs	r3, #0
   868d0:	930f      	str	r3, [sp, #60]	; 0x3c
   868d2:	e762      	b.n	8679a <_vfiprintf_r+0x336>
   868d4:	059a      	lsls	r2, r3, #22
   868d6:	f53f af68 	bmi.w	867aa <_vfiprintf_r+0x346>
   868da:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   868de:	f002 f9cf 	bl	88c80 <__retarget_lock_release_recursive>
   868e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   868e6:	e760      	b.n	867aa <_vfiprintf_r+0x346>
   868e8:	9b04      	ldr	r3, [sp, #16]
   868ea:	06f8      	lsls	r0, r7, #27
   868ec:	f853 4b04 	ldr.w	r4, [r3], #4
   868f0:	f100 8308 	bmi.w	86f04 <_vfiprintf_r+0xaa0>
   868f4:	0679      	lsls	r1, r7, #25
   868f6:	f140 8302 	bpl.w	86efe <_vfiprintf_r+0xa9a>
   868fa:	b224      	sxth	r4, r4
   868fc:	17e5      	asrs	r5, r4, #31
   868fe:	9304      	str	r3, [sp, #16]
   86900:	4622      	mov	r2, r4
   86902:	462b      	mov	r3, r5
   86904:	e6a2      	b.n	8664c <_vfiprintf_r+0x1e8>
   86906:	f854 3b04 	ldr.w	r3, [r4], #4
   8690a:	06f9      	lsls	r1, r7, #27
   8690c:	9404      	str	r4, [sp, #16]
   8690e:	f100 82f3 	bmi.w	86ef8 <_vfiprintf_r+0xa94>
   86912:	067a      	lsls	r2, r7, #25
   86914:	f140 82ed 	bpl.w	86ef2 <_vfiprintf_r+0xa8e>
   86918:	2500      	movs	r5, #0
   8691a:	b29c      	uxth	r4, r3
   8691c:	e6f0      	b.n	86700 <_vfiprintf_r+0x29c>
   8691e:	f04f 0300 	mov.w	r3, #0
   86922:	9c04      	ldr	r4, [sp, #16]
   86924:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   86928:	f854 6b04 	ldr.w	r6, [r4], #4
   8692c:	2e00      	cmp	r6, #0
   8692e:	f000 8397 	beq.w	87060 <_vfiprintf_r+0xbfc>
   86932:	9a00      	ldr	r2, [sp, #0]
   86934:	4613      	mov	r3, r2
   86936:	3301      	adds	r3, #1
   86938:	f000 831e 	beq.w	86f78 <_vfiprintf_r+0xb14>
   8693c:	2100      	movs	r1, #0
   8693e:	4630      	mov	r0, r6
   86940:	f002 fce4 	bl	8930c <memchr>
   86944:	2800      	cmp	r0, #0
   86946:	f000 83d8 	beq.w	870fa <_vfiprintf_r+0xc96>
   8694a:	1b83      	subs	r3, r0, r6
   8694c:	9301      	str	r3, [sp, #4]
   8694e:	2300      	movs	r3, #0
   86950:	9404      	str	r4, [sp, #16]
   86952:	9300      	str	r3, [sp, #0]
   86954:	e696      	b.n	86684 <_vfiprintf_r+0x220>
   86956:	2501      	movs	r5, #1
   86958:	f04f 0200 	mov.w	r2, #0
   8695c:	9c04      	ldr	r4, [sp, #16]
   8695e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   86962:	f854 3b04 	ldr.w	r3, [r4], #4
   86966:	9501      	str	r5, [sp, #4]
   86968:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8696c:	9404      	str	r4, [sp, #16]
   8696e:	ae21      	add	r6, sp, #132	; 0x84
   86970:	e72e      	b.n	867d0 <_vfiprintf_r+0x36c>
   86972:	f001 fdb1 	bl	884d8 <__sinit>
   86976:	e582      	b.n	8647e <_vfiprintf_r+0x1a>
   86978:	9b02      	ldr	r3, [sp, #8]
   8697a:	425b      	negs	r3, r3
   8697c:	9302      	str	r3, [sp, #8]
   8697e:	f898 3000 	ldrb.w	r3, [r8]
   86982:	f047 0704 	orr.w	r7, r7, #4
   86986:	e5cf      	b.n	86528 <_vfiprintf_r+0xc4>
   86988:	f898 3000 	ldrb.w	r3, [r8]
   8698c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   86990:	e5ca      	b.n	86528 <_vfiprintf_r+0xc4>
   86992:	f898 3000 	ldrb.w	r3, [r8]
   86996:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8699a:	e5c5      	b.n	86528 <_vfiprintf_r+0xc4>
   8699c:	4641      	mov	r1, r8
   8699e:	f811 3b01 	ldrb.w	r3, [r1], #1
   869a2:	2b2a      	cmp	r3, #42	; 0x2a
   869a4:	f000 83dd 	beq.w	87162 <_vfiprintf_r+0xcfe>
   869a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   869ac:	2a09      	cmp	r2, #9
   869ae:	4688      	mov	r8, r1
   869b0:	bf98      	it	ls
   869b2:	2100      	movls	r1, #0
   869b4:	f200 83ad 	bhi.w	87112 <_vfiprintf_r+0xcae>
   869b8:	f818 3b01 	ldrb.w	r3, [r8], #1
   869bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   869c0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   869c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   869c8:	2a09      	cmp	r2, #9
   869ca:	d9f5      	bls.n	869b8 <_vfiprintf_r+0x554>
   869cc:	9100      	str	r1, [sp, #0]
   869ce:	e5ad      	b.n	8652c <_vfiprintf_r+0xc8>
   869d0:	9c05      	ldr	r4, [sp, #20]
   869d2:	4620      	mov	r0, r4
   869d4:	f002 f94a 	bl	88c6c <_localeconv_r>
   869d8:	6843      	ldr	r3, [r0, #4]
   869da:	4618      	mov	r0, r3
   869dc:	930a      	str	r3, [sp, #40]	; 0x28
   869de:	f7fd fefb 	bl	847d8 <strlen>
   869e2:	4603      	mov	r3, r0
   869e4:	4620      	mov	r0, r4
   869e6:	930b      	str	r3, [sp, #44]	; 0x2c
   869e8:	461c      	mov	r4, r3
   869ea:	f002 f93f 	bl	88c6c <_localeconv_r>
   869ee:	6882      	ldr	r2, [r0, #8]
   869f0:	9209      	str	r2, [sp, #36]	; 0x24
   869f2:	2c00      	cmp	r4, #0
   869f4:	f43f ae13 	beq.w	8661e <_vfiprintf_r+0x1ba>
   869f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   869fa:	2b00      	cmp	r3, #0
   869fc:	f43f ae0f 	beq.w	8661e <_vfiprintf_r+0x1ba>
   86a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86a02:	781b      	ldrb	r3, [r3, #0]
   86a04:	2b00      	cmp	r3, #0
   86a06:	f43f ae0a 	beq.w	8661e <_vfiprintf_r+0x1ba>
   86a0a:	f898 3000 	ldrb.w	r3, [r8]
   86a0e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   86a12:	e589      	b.n	86528 <_vfiprintf_r+0xc4>
   86a14:	f898 3000 	ldrb.w	r3, [r8]
   86a18:	f047 0701 	orr.w	r7, r7, #1
   86a1c:	e584      	b.n	86528 <_vfiprintf_r+0xc4>
   86a1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   86a22:	2b00      	cmp	r3, #0
   86a24:	f47f adfb 	bne.w	8661e <_vfiprintf_r+0x1ba>
   86a28:	2320      	movs	r3, #32
   86a2a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   86a2e:	f898 3000 	ldrb.w	r3, [r8]
   86a32:	e579      	b.n	86528 <_vfiprintf_r+0xc4>
   86a34:	f898 3000 	ldrb.w	r3, [r8]
   86a38:	2b6c      	cmp	r3, #108	; 0x6c
   86a3a:	bf03      	ittte	eq
   86a3c:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   86a40:	f047 0720 	orreq.w	r7, r7, #32
   86a44:	f108 0801 	addeq.w	r8, r8, #1
   86a48:	f047 0710 	orrne.w	r7, r7, #16
   86a4c:	e56c      	b.n	86528 <_vfiprintf_r+0xc4>
   86a4e:	f898 3000 	ldrb.w	r3, [r8]
   86a52:	2b68      	cmp	r3, #104	; 0x68
   86a54:	bf03      	ittte	eq
   86a56:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   86a5a:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   86a5e:	f108 0801 	addeq.w	r8, r8, #1
   86a62:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   86a66:	e55f      	b.n	86528 <_vfiprintf_r+0xc4>
   86a68:	f047 0910 	orr.w	r9, r7, #16
   86a6c:	f019 0f20 	tst.w	r9, #32
   86a70:	9c04      	ldr	r4, [sp, #16]
   86a72:	f000 8200 	beq.w	86e76 <_vfiprintf_r+0xa12>
   86a76:	3407      	adds	r4, #7
   86a78:	f024 0307 	bic.w	r3, r4, #7
   86a7c:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86a80:	9304      	str	r3, [sp, #16]
   86a82:	2301      	movs	r3, #1
   86a84:	e63f      	b.n	86706 <_vfiprintf_r+0x2a2>
   86a86:	f647 0330 	movw	r3, #30768	; 0x7830
   86a8a:	9c04      	ldr	r4, [sp, #16]
   86a8c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   86a90:	f854 2b04 	ldr.w	r2, [r4], #4
   86a94:	4bbf      	ldr	r3, [pc, #764]	; (86d94 <_vfiprintf_r+0x930>)
   86a96:	9404      	str	r4, [sp, #16]
   86a98:	9308      	str	r3, [sp, #32]
   86a9a:	4614      	mov	r4, r2
   86a9c:	2500      	movs	r5, #0
   86a9e:	2302      	movs	r3, #2
   86aa0:	f047 0902 	orr.w	r9, r7, #2
   86aa4:	e62f      	b.n	86706 <_vfiprintf_r+0x2a2>
   86aa6:	06bb      	lsls	r3, r7, #26
   86aa8:	f100 8232 	bmi.w	86f10 <_vfiprintf_r+0xaac>
   86aac:	06fe      	lsls	r6, r7, #27
   86aae:	f100 82cf 	bmi.w	87050 <_vfiprintf_r+0xbec>
   86ab2:	067d      	lsls	r5, r7, #25
   86ab4:	f100 8301 	bmi.w	870ba <_vfiprintf_r+0xc56>
   86ab8:	05bc      	lsls	r4, r7, #22
   86aba:	f140 82c9 	bpl.w	87050 <_vfiprintf_r+0xbec>
   86abe:	9c04      	ldr	r4, [sp, #16]
   86ac0:	9a03      	ldr	r2, [sp, #12]
   86ac2:	f854 3b04 	ldr.w	r3, [r4], #4
   86ac6:	701a      	strb	r2, [r3, #0]
   86ac8:	9404      	str	r4, [sp, #16]
   86aca:	e509      	b.n	864e0 <_vfiprintf_r+0x7c>
   86acc:	46b9      	mov	r9, r7
   86ace:	2b01      	cmp	r3, #1
   86ad0:	f43f adcb 	beq.w	8666a <_vfiprintf_r+0x206>
   86ad4:	2b02      	cmp	r3, #2
   86ad6:	ae3a      	add	r6, sp, #232	; 0xe8
   86ad8:	d113      	bne.n	86b02 <_vfiprintf_r+0x69e>
   86ada:	9808      	ldr	r0, [sp, #32]
   86adc:	0923      	lsrs	r3, r4, #4
   86ade:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86ae2:	0929      	lsrs	r1, r5, #4
   86ae4:	f004 020f 	and.w	r2, r4, #15
   86ae8:	460d      	mov	r5, r1
   86aea:	461c      	mov	r4, r3
   86aec:	5c83      	ldrb	r3, [r0, r2]
   86aee:	f806 3d01 	strb.w	r3, [r6, #-1]!
   86af2:	ea54 0305 	orrs.w	r3, r4, r5
   86af6:	d1f1      	bne.n	86adc <_vfiprintf_r+0x678>
   86af8:	ab3a      	add	r3, sp, #232	; 0xe8
   86afa:	1b9b      	subs	r3, r3, r6
   86afc:	464f      	mov	r7, r9
   86afe:	9301      	str	r3, [sp, #4]
   86b00:	e5c0      	b.n	86684 <_vfiprintf_r+0x220>
   86b02:	08e2      	lsrs	r2, r4, #3
   86b04:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86b08:	08e9      	lsrs	r1, r5, #3
   86b0a:	f004 0307 	and.w	r3, r4, #7
   86b0e:	460d      	mov	r5, r1
   86b10:	4614      	mov	r4, r2
   86b12:	3330      	adds	r3, #48	; 0x30
   86b14:	ea54 0105 	orrs.w	r1, r4, r5
   86b18:	4632      	mov	r2, r6
   86b1a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   86b1e:	d1f0      	bne.n	86b02 <_vfiprintf_r+0x69e>
   86b20:	f019 0f01 	tst.w	r9, #1
   86b24:	d0e8      	beq.n	86af8 <_vfiprintf_r+0x694>
   86b26:	2b30      	cmp	r3, #48	; 0x30
   86b28:	d0e6      	beq.n	86af8 <_vfiprintf_r+0x694>
   86b2a:	2330      	movs	r3, #48	; 0x30
   86b2c:	3a02      	subs	r2, #2
   86b2e:	f806 3c01 	strb.w	r3, [r6, #-1]
   86b32:	ab3a      	add	r3, sp, #232	; 0xe8
   86b34:	1a9b      	subs	r3, r3, r2
   86b36:	464f      	mov	r7, r9
   86b38:	4616      	mov	r6, r2
   86b3a:	9301      	str	r3, [sp, #4]
   86b3c:	e5a2      	b.n	86684 <_vfiprintf_r+0x220>
   86b3e:	2301      	movs	r3, #1
   86b40:	9a01      	ldr	r2, [sp, #4]
   86b42:	930f      	str	r3, [sp, #60]	; 0x3c
   86b44:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   86b48:	9212      	str	r2, [sp, #72]	; 0x48
   86b4a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86b4e:	f10a 0a08 	add.w	sl, sl, #8
   86b52:	e69d      	b.n	86890 <_vfiprintf_r+0x42c>
   86b54:	9b02      	ldr	r3, [sp, #8]
   86b56:	1b5c      	subs	r4, r3, r5
   86b58:	2c00      	cmp	r4, #0
   86b5a:	f77f ae7d 	ble.w	86858 <_vfiprintf_r+0x3f4>
   86b5e:	2c10      	cmp	r4, #16
   86b60:	f340 82ea 	ble.w	87138 <_vfiprintf_r+0xcd4>
   86b64:	f8df 9230 	ldr.w	r9, [pc, #560]	; 86d98 <_vfiprintf_r+0x934>
   86b68:	4650      	mov	r0, sl
   86b6a:	9706      	str	r7, [sp, #24]
   86b6c:	46b2      	mov	sl, r6
   86b6e:	464e      	mov	r6, r9
   86b70:	46c1      	mov	r9, r8
   86b72:	46a8      	mov	r8, r5
   86b74:	9d05      	ldr	r5, [sp, #20]
   86b76:	e006      	b.n	86b86 <_vfiprintf_r+0x722>
   86b78:	f101 0c02 	add.w	ip, r1, #2
   86b7c:	4619      	mov	r1, r3
   86b7e:	3008      	adds	r0, #8
   86b80:	3c10      	subs	r4, #16
   86b82:	2c10      	cmp	r4, #16
   86b84:	dd1a      	ble.n	86bbc <_vfiprintf_r+0x758>
   86b86:	2710      	movs	r7, #16
   86b88:	1c4b      	adds	r3, r1, #1
   86b8a:	3210      	adds	r2, #16
   86b8c:	2b07      	cmp	r3, #7
   86b8e:	9210      	str	r2, [sp, #64]	; 0x40
   86b90:	6006      	str	r6, [r0, #0]
   86b92:	6047      	str	r7, [r0, #4]
   86b94:	930f      	str	r3, [sp, #60]	; 0x3c
   86b96:	ddef      	ble.n	86b78 <_vfiprintf_r+0x714>
   86b98:	2a00      	cmp	r2, #0
   86b9a:	d07b      	beq.n	86c94 <_vfiprintf_r+0x830>
   86b9c:	4659      	mov	r1, fp
   86b9e:	4628      	mov	r0, r5
   86ba0:	aa0e      	add	r2, sp, #56	; 0x38
   86ba2:	f7ff fc23 	bl	863ec <__sprint_r.part.0>
   86ba6:	2800      	cmp	r0, #0
   86ba8:	f47f adf6 	bne.w	86798 <_vfiprintf_r+0x334>
   86bac:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   86bb0:	3c10      	subs	r4, #16
   86bb2:	2c10      	cmp	r4, #16
   86bb4:	a811      	add	r0, sp, #68	; 0x44
   86bb6:	f101 0c01 	add.w	ip, r1, #1
   86bba:	dce4      	bgt.n	86b86 <_vfiprintf_r+0x722>
   86bbc:	4645      	mov	r5, r8
   86bbe:	46c8      	mov	r8, r9
   86bc0:	46b1      	mov	r9, r6
   86bc2:	4656      	mov	r6, sl
   86bc4:	4682      	mov	sl, r0
   86bc6:	9f06      	ldr	r7, [sp, #24]
   86bc8:	4422      	add	r2, r4
   86bca:	f1bc 0f07 	cmp.w	ip, #7
   86bce:	e9ca 9400 	strd	r9, r4, [sl]
   86bd2:	9210      	str	r2, [sp, #64]	; 0x40
   86bd4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   86bd8:	f340 817e 	ble.w	86ed8 <_vfiprintf_r+0xa74>
   86bdc:	2a00      	cmp	r2, #0
   86bde:	f000 825c 	beq.w	8709a <_vfiprintf_r+0xc36>
   86be2:	4659      	mov	r1, fp
   86be4:	9805      	ldr	r0, [sp, #20]
   86be6:	aa0e      	add	r2, sp, #56	; 0x38
   86be8:	f7ff fc00 	bl	863ec <__sprint_r.part.0>
   86bec:	2800      	cmp	r0, #0
   86bee:	f47f add3 	bne.w	86798 <_vfiprintf_r+0x334>
   86bf2:	e9dd 3400 	ldrd	r3, r4, [sp]
   86bf6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   86bfa:	1b1c      	subs	r4, r3, r4
   86bfc:	2c00      	cmp	r4, #0
   86bfe:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86c02:	f101 0001 	add.w	r0, r1, #1
   86c06:	f77f ae2d 	ble.w	86864 <_vfiprintf_r+0x400>
   86c0a:	2c10      	cmp	r4, #16
   86c0c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 86d98 <_vfiprintf_r+0x934>
   86c10:	dd2f      	ble.n	86c72 <_vfiprintf_r+0x80e>
   86c12:	46d4      	mov	ip, sl
   86c14:	46b2      	mov	sl, r6
   86c16:	464e      	mov	r6, r9
   86c18:	46c1      	mov	r9, r8
   86c1a:	46a8      	mov	r8, r5
   86c1c:	9d05      	ldr	r5, [sp, #20]
   86c1e:	e006      	b.n	86c2e <_vfiprintf_r+0x7ca>
   86c20:	1c88      	adds	r0, r1, #2
   86c22:	4619      	mov	r1, r3
   86c24:	f10c 0c08 	add.w	ip, ip, #8
   86c28:	3c10      	subs	r4, #16
   86c2a:	2c10      	cmp	r4, #16
   86c2c:	dd1c      	ble.n	86c68 <_vfiprintf_r+0x804>
   86c2e:	2010      	movs	r0, #16
   86c30:	1c4b      	adds	r3, r1, #1
   86c32:	3210      	adds	r2, #16
   86c34:	2b07      	cmp	r3, #7
   86c36:	9210      	str	r2, [sp, #64]	; 0x40
   86c38:	f8cc 6000 	str.w	r6, [ip]
   86c3c:	f8cc 0004 	str.w	r0, [ip, #4]
   86c40:	930f      	str	r3, [sp, #60]	; 0x3c
   86c42:	dded      	ble.n	86c20 <_vfiprintf_r+0x7bc>
   86c44:	b30a      	cbz	r2, 86c8a <_vfiprintf_r+0x826>
   86c46:	4659      	mov	r1, fp
   86c48:	4628      	mov	r0, r5
   86c4a:	aa0e      	add	r2, sp, #56	; 0x38
   86c4c:	f7ff fbce 	bl	863ec <__sprint_r.part.0>
   86c50:	2800      	cmp	r0, #0
   86c52:	f47f ada1 	bne.w	86798 <_vfiprintf_r+0x334>
   86c56:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   86c5a:	3c10      	subs	r4, #16
   86c5c:	2c10      	cmp	r4, #16
   86c5e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   86c62:	f101 0001 	add.w	r0, r1, #1
   86c66:	dce2      	bgt.n	86c2e <_vfiprintf_r+0x7ca>
   86c68:	4645      	mov	r5, r8
   86c6a:	46c8      	mov	r8, r9
   86c6c:	46b1      	mov	r9, r6
   86c6e:	4656      	mov	r6, sl
   86c70:	46e2      	mov	sl, ip
   86c72:	4422      	add	r2, r4
   86c74:	2807      	cmp	r0, #7
   86c76:	e9ca 9400 	strd	r9, r4, [sl]
   86c7a:	9210      	str	r2, [sp, #64]	; 0x40
   86c7c:	900f      	str	r0, [sp, #60]	; 0x3c
   86c7e:	f300 80d3 	bgt.w	86e28 <_vfiprintf_r+0x9c4>
   86c82:	f10a 0a08 	add.w	sl, sl, #8
   86c86:	3001      	adds	r0, #1
   86c88:	e5ec      	b.n	86864 <_vfiprintf_r+0x400>
   86c8a:	2001      	movs	r0, #1
   86c8c:	4611      	mov	r1, r2
   86c8e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   86c92:	e7c9      	b.n	86c28 <_vfiprintf_r+0x7c4>
   86c94:	f04f 0c01 	mov.w	ip, #1
   86c98:	4611      	mov	r1, r2
   86c9a:	a811      	add	r0, sp, #68	; 0x44
   86c9c:	e770      	b.n	86b80 <_vfiprintf_r+0x71c>
   86c9e:	2a00      	cmp	r2, #0
   86ca0:	f000 80d3 	beq.w	86e4a <_vfiprintf_r+0x9e6>
   86ca4:	4659      	mov	r1, fp
   86ca6:	9805      	ldr	r0, [sp, #20]
   86ca8:	aa0e      	add	r2, sp, #56	; 0x38
   86caa:	f7ff fb9f 	bl	863ec <__sprint_r.part.0>
   86cae:	2800      	cmp	r0, #0
   86cb0:	f47f ad72 	bne.w	86798 <_vfiprintf_r+0x334>
   86cb4:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   86cb8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86cbc:	1c48      	adds	r0, r1, #1
   86cbe:	e5ac      	b.n	8681a <_vfiprintf_r+0x3b6>
   86cc0:	2202      	movs	r2, #2
   86cc2:	2001      	movs	r0, #1
   86cc4:	ab0d      	add	r3, sp, #52	; 0x34
   86cc6:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   86cca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86cce:	4601      	mov	r1, r0
   86cd0:	f10a 0a08 	add.w	sl, sl, #8
   86cd4:	1c48      	adds	r0, r1, #1
   86cd6:	e5bb      	b.n	86850 <_vfiprintf_r+0x3ec>
   86cd8:	2c10      	cmp	r4, #16
   86cda:	f340 8214 	ble.w	87106 <_vfiprintf_r+0xca2>
   86cde:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   86ce2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 86d9c <_vfiprintf_r+0x938>
   86ce6:	46d4      	mov	ip, sl
   86ce8:	46b2      	mov	sl, r6
   86cea:	464e      	mov	r6, r9
   86cec:	46c1      	mov	r9, r8
   86cee:	46a8      	mov	r8, r5
   86cf0:	9d05      	ldr	r5, [sp, #20]
   86cf2:	e006      	b.n	86d02 <_vfiprintf_r+0x89e>
   86cf4:	1c99      	adds	r1, r3, #2
   86cf6:	4603      	mov	r3, r0
   86cf8:	f10c 0c08 	add.w	ip, ip, #8
   86cfc:	3c10      	subs	r4, #16
   86cfe:	2c10      	cmp	r4, #16
   86d00:	dd1c      	ble.n	86d3c <_vfiprintf_r+0x8d8>
   86d02:	2110      	movs	r1, #16
   86d04:	1c58      	adds	r0, r3, #1
   86d06:	3210      	adds	r2, #16
   86d08:	2807      	cmp	r0, #7
   86d0a:	9210      	str	r2, [sp, #64]	; 0x40
   86d0c:	f8cc 6000 	str.w	r6, [ip]
   86d10:	f8cc 1004 	str.w	r1, [ip, #4]
   86d14:	900f      	str	r0, [sp, #60]	; 0x3c
   86d16:	dded      	ble.n	86cf4 <_vfiprintf_r+0x890>
   86d18:	b30a      	cbz	r2, 86d5e <_vfiprintf_r+0x8fa>
   86d1a:	4659      	mov	r1, fp
   86d1c:	4628      	mov	r0, r5
   86d1e:	aa0e      	add	r2, sp, #56	; 0x38
   86d20:	f7ff fb64 	bl	863ec <__sprint_r.part.0>
   86d24:	2800      	cmp	r0, #0
   86d26:	f47f ad37 	bne.w	86798 <_vfiprintf_r+0x334>
   86d2a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   86d2e:	3c10      	subs	r4, #16
   86d30:	2c10      	cmp	r4, #16
   86d32:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   86d36:	f103 0101 	add.w	r1, r3, #1
   86d3a:	dce2      	bgt.n	86d02 <_vfiprintf_r+0x89e>
   86d3c:	4645      	mov	r5, r8
   86d3e:	46c8      	mov	r8, r9
   86d40:	46b1      	mov	r9, r6
   86d42:	4656      	mov	r6, sl
   86d44:	46e2      	mov	sl, ip
   86d46:	4422      	add	r2, r4
   86d48:	2907      	cmp	r1, #7
   86d4a:	e9ca 9400 	strd	r9, r4, [sl]
   86d4e:	9210      	str	r2, [sp, #64]	; 0x40
   86d50:	910f      	str	r1, [sp, #60]	; 0x3c
   86d52:	f300 80a8 	bgt.w	86ea6 <_vfiprintf_r+0xa42>
   86d56:	f10a 0a08 	add.w	sl, sl, #8
   86d5a:	1c48      	adds	r0, r1, #1
   86d5c:	e54b      	b.n	867f6 <_vfiprintf_r+0x392>
   86d5e:	4613      	mov	r3, r2
   86d60:	2101      	movs	r1, #1
   86d62:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   86d66:	e7c9      	b.n	86cfc <_vfiprintf_r+0x898>
   86d68:	0778      	lsls	r0, r7, #29
   86d6a:	920f      	str	r2, [sp, #60]	; 0x3c
   86d6c:	d554      	bpl.n	86e18 <_vfiprintf_r+0x9b4>
   86d6e:	9b02      	ldr	r3, [sp, #8]
   86d70:	1b5c      	subs	r4, r3, r5
   86d72:	2c00      	cmp	r4, #0
   86d74:	dd50      	ble.n	86e18 <_vfiprintf_r+0x9b4>
   86d76:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86d7a:	2c10      	cmp	r4, #16
   86d7c:	f340 81d7 	ble.w	8712e <_vfiprintf_r+0xcca>
   86d80:	f8df 9018 	ldr.w	r9, [pc, #24]	; 86d9c <_vfiprintf_r+0x938>
   86d84:	2610      	movs	r6, #16
   86d86:	464b      	mov	r3, r9
   86d88:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86d8a:	46a9      	mov	r9, r5
   86d8c:	9f05      	ldr	r7, [sp, #20]
   86d8e:	461d      	mov	r5, r3
   86d90:	e00d      	b.n	86dae <_vfiprintf_r+0x94a>
   86d92:	bf00      	nop
   86d94:	0008b390 	.word	0x0008b390
   86d98:	0008b3f4 	.word	0x0008b3f4
   86d9c:	0008b3e4 	.word	0x0008b3e4
   86da0:	1c88      	adds	r0, r1, #2
   86da2:	4619      	mov	r1, r3
   86da4:	f10a 0a08 	add.w	sl, sl, #8
   86da8:	3c10      	subs	r4, #16
   86daa:	2c10      	cmp	r4, #16
   86dac:	dd19      	ble.n	86de2 <_vfiprintf_r+0x97e>
   86dae:	1c4b      	adds	r3, r1, #1
   86db0:	3210      	adds	r2, #16
   86db2:	2b07      	cmp	r3, #7
   86db4:	e9ca 5600 	strd	r5, r6, [sl]
   86db8:	9210      	str	r2, [sp, #64]	; 0x40
   86dba:	930f      	str	r3, [sp, #60]	; 0x3c
   86dbc:	ddf0      	ble.n	86da0 <_vfiprintf_r+0x93c>
   86dbe:	b332      	cbz	r2, 86e0e <_vfiprintf_r+0x9aa>
   86dc0:	4659      	mov	r1, fp
   86dc2:	4638      	mov	r0, r7
   86dc4:	aa0e      	add	r2, sp, #56	; 0x38
   86dc6:	f7ff fb11 	bl	863ec <__sprint_r.part.0>
   86dca:	2800      	cmp	r0, #0
   86dcc:	f47f ace4 	bne.w	86798 <_vfiprintf_r+0x334>
   86dd0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   86dd4:	3c10      	subs	r4, #16
   86dd6:	2c10      	cmp	r4, #16
   86dd8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86ddc:	f101 0001 	add.w	r0, r1, #1
   86de0:	dce5      	bgt.n	86dae <_vfiprintf_r+0x94a>
   86de2:	462b      	mov	r3, r5
   86de4:	464d      	mov	r5, r9
   86de6:	4699      	mov	r9, r3
   86de8:	4422      	add	r2, r4
   86dea:	2807      	cmp	r0, #7
   86dec:	e9ca 9400 	strd	r9, r4, [sl]
   86df0:	9210      	str	r2, [sp, #64]	; 0x40
   86df2:	900f      	str	r0, [sp, #60]	; 0x3c
   86df4:	f77f ad53 	ble.w	8689e <_vfiprintf_r+0x43a>
   86df8:	b172      	cbz	r2, 86e18 <_vfiprintf_r+0x9b4>
   86dfa:	4659      	mov	r1, fp
   86dfc:	9805      	ldr	r0, [sp, #20]
   86dfe:	aa0e      	add	r2, sp, #56	; 0x38
   86e00:	f7ff faf4 	bl	863ec <__sprint_r.part.0>
   86e04:	2800      	cmp	r0, #0
   86e06:	f47f acc7 	bne.w	86798 <_vfiprintf_r+0x334>
   86e0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   86e0c:	e547      	b.n	8689e <_vfiprintf_r+0x43a>
   86e0e:	2001      	movs	r0, #1
   86e10:	4611      	mov	r1, r2
   86e12:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86e16:	e7c7      	b.n	86da8 <_vfiprintf_r+0x944>
   86e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86e1c:	42aa      	cmp	r2, r5
   86e1e:	bfac      	ite	ge
   86e20:	189b      	addge	r3, r3, r2
   86e22:	195b      	addlt	r3, r3, r5
   86e24:	9303      	str	r3, [sp, #12]
   86e26:	e544      	b.n	868b2 <_vfiprintf_r+0x44e>
   86e28:	2a00      	cmp	r2, #0
   86e2a:	f43f ae88 	beq.w	86b3e <_vfiprintf_r+0x6da>
   86e2e:	4659      	mov	r1, fp
   86e30:	9805      	ldr	r0, [sp, #20]
   86e32:	aa0e      	add	r2, sp, #56	; 0x38
   86e34:	f7ff fada 	bl	863ec <__sprint_r.part.0>
   86e38:	2800      	cmp	r0, #0
   86e3a:	f47f acad 	bne.w	86798 <_vfiprintf_r+0x334>
   86e3e:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   86e42:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86e46:	3001      	adds	r0, #1
   86e48:	e50c      	b.n	86864 <_vfiprintf_r+0x400>
   86e4a:	9b07      	ldr	r3, [sp, #28]
   86e4c:	2b00      	cmp	r3, #0
   86e4e:	d16b      	bne.n	86f28 <_vfiprintf_r+0xac4>
   86e50:	2001      	movs	r0, #1
   86e52:	4611      	mov	r1, r2
   86e54:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86e58:	e4fa      	b.n	86850 <_vfiprintf_r+0x3ec>
   86e5a:	920f      	str	r2, [sp, #60]	; 0x3c
   86e5c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86e60:	e481      	b.n	86766 <_vfiprintf_r+0x302>
   86e62:	9b00      	ldr	r3, [sp, #0]
   86e64:	2b00      	cmp	r3, #0
   86e66:	f47f ac05 	bne.w	86674 <_vfiprintf_r+0x210>
   86e6a:	464f      	mov	r7, r9
   86e6c:	2300      	movs	r3, #0
   86e6e:	ae3a      	add	r6, sp, #232	; 0xe8
   86e70:	9300      	str	r3, [sp, #0]
   86e72:	9301      	str	r3, [sp, #4]
   86e74:	e406      	b.n	86684 <_vfiprintf_r+0x220>
   86e76:	f854 2b04 	ldr.w	r2, [r4], #4
   86e7a:	f019 0f10 	tst.w	r9, #16
   86e7e:	f04f 0301 	mov.w	r3, #1
   86e82:	9404      	str	r4, [sp, #16]
   86e84:	d132      	bne.n	86eec <_vfiprintf_r+0xa88>
   86e86:	f019 0f40 	tst.w	r9, #64	; 0x40
   86e8a:	d02b      	beq.n	86ee4 <_vfiprintf_r+0xa80>
   86e8c:	2500      	movs	r5, #0
   86e8e:	b294      	uxth	r4, r2
   86e90:	e439      	b.n	86706 <_vfiprintf_r+0x2a2>
   86e92:	232d      	movs	r3, #45	; 0x2d
   86e94:	4264      	negs	r4, r4
   86e96:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   86e9a:	46b9      	mov	r9, r7
   86e9c:	f04f 0301 	mov.w	r3, #1
   86ea0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   86ea4:	e433      	b.n	8670e <_vfiprintf_r+0x2aa>
   86ea6:	2a00      	cmp	r2, #0
   86ea8:	d06f      	beq.n	86f8a <_vfiprintf_r+0xb26>
   86eaa:	4659      	mov	r1, fp
   86eac:	9805      	ldr	r0, [sp, #20]
   86eae:	aa0e      	add	r2, sp, #56	; 0x38
   86eb0:	f7ff fa9c 	bl	863ec <__sprint_r.part.0>
   86eb4:	2800      	cmp	r0, #0
   86eb6:	f47f ac6f 	bne.w	86798 <_vfiprintf_r+0x334>
   86eba:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86ebe:	e497      	b.n	867f0 <_vfiprintf_r+0x38c>
   86ec0:	ae3a      	add	r6, sp, #232	; 0xe8
   86ec2:	f7ff bbdf 	b.w	86684 <_vfiprintf_r+0x220>
   86ec6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   86eca:	f001 fed7 	bl	88c7c <__retarget_lock_acquire_recursive>
   86ece:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   86ed2:	b28a      	uxth	r2, r1
   86ed4:	f7ff badd 	b.w	86492 <_vfiprintf_r+0x2e>
   86ed8:	4661      	mov	r1, ip
   86eda:	f10a 0a08 	add.w	sl, sl, #8
   86ede:	f10c 0001 	add.w	r0, ip, #1
   86ee2:	e4b9      	b.n	86858 <_vfiprintf_r+0x3f4>
   86ee4:	f419 7f00 	tst.w	r9, #512	; 0x200
   86ee8:	f040 80ef 	bne.w	870ca <_vfiprintf_r+0xc66>
   86eec:	4614      	mov	r4, r2
   86eee:	2500      	movs	r5, #0
   86ef0:	e409      	b.n	86706 <_vfiprintf_r+0x2a2>
   86ef2:	05be      	lsls	r6, r7, #22
   86ef4:	f100 80f7 	bmi.w	870e6 <_vfiprintf_r+0xc82>
   86ef8:	461c      	mov	r4, r3
   86efa:	2500      	movs	r5, #0
   86efc:	e400      	b.n	86700 <_vfiprintf_r+0x29c>
   86efe:	05ba      	lsls	r2, r7, #22
   86f00:	f100 80ea 	bmi.w	870d8 <_vfiprintf_r+0xc74>
   86f04:	17e5      	asrs	r5, r4, #31
   86f06:	9304      	str	r3, [sp, #16]
   86f08:	4622      	mov	r2, r4
   86f0a:	462b      	mov	r3, r5
   86f0c:	f7ff bb9e 	b.w	8664c <_vfiprintf_r+0x1e8>
   86f10:	9b03      	ldr	r3, [sp, #12]
   86f12:	9c04      	ldr	r4, [sp, #16]
   86f14:	17dd      	asrs	r5, r3, #31
   86f16:	461a      	mov	r2, r3
   86f18:	462b      	mov	r3, r5
   86f1a:	f854 1b04 	ldr.w	r1, [r4], #4
   86f1e:	e9c1 2300 	strd	r2, r3, [r1]
   86f22:	9404      	str	r4, [sp, #16]
   86f24:	f7ff badc 	b.w	864e0 <_vfiprintf_r+0x7c>
   86f28:	2202      	movs	r2, #2
   86f2a:	ab0d      	add	r3, sp, #52	; 0x34
   86f2c:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   86f30:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86f34:	e6cc      	b.n	86cd0 <_vfiprintf_r+0x86c>
   86f36:	46b9      	mov	r9, r7
   86f38:	e598      	b.n	86a6c <_vfiprintf_r+0x608>
   86f3a:	4a90      	ldr	r2, [pc, #576]	; (8717c <_vfiprintf_r+0xd18>)
   86f3c:	9208      	str	r2, [sp, #32]
   86f3e:	06bd      	lsls	r5, r7, #26
   86f40:	9c04      	ldr	r4, [sp, #16]
   86f42:	d530      	bpl.n	86fa6 <_vfiprintf_r+0xb42>
   86f44:	3407      	adds	r4, #7
   86f46:	f024 0207 	bic.w	r2, r4, #7
   86f4a:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   86f4e:	9204      	str	r2, [sp, #16]
   86f50:	07fe      	lsls	r6, r7, #31
   86f52:	d509      	bpl.n	86f68 <_vfiprintf_r+0xb04>
   86f54:	ea54 0205 	orrs.w	r2, r4, r5
   86f58:	d006      	beq.n	86f68 <_vfiprintf_r+0xb04>
   86f5a:	2230      	movs	r2, #48	; 0x30
   86f5c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   86f60:	f047 0702 	orr.w	r7, r7, #2
   86f64:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   86f68:	2302      	movs	r3, #2
   86f6a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   86f6e:	f7ff bbca 	b.w	86706 <_vfiprintf_r+0x2a2>
   86f72:	4a83      	ldr	r2, [pc, #524]	; (87180 <_vfiprintf_r+0xd1c>)
   86f74:	9208      	str	r2, [sp, #32]
   86f76:	e7e2      	b.n	86f3e <_vfiprintf_r+0xada>
   86f78:	4630      	mov	r0, r6
   86f7a:	f7fd fc2d 	bl	847d8 <strlen>
   86f7e:	2300      	movs	r3, #0
   86f80:	9404      	str	r4, [sp, #16]
   86f82:	9001      	str	r0, [sp, #4]
   86f84:	9300      	str	r3, [sp, #0]
   86f86:	f7ff bb7d 	b.w	86684 <_vfiprintf_r+0x220>
   86f8a:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   86f8e:	2900      	cmp	r1, #0
   86f90:	f040 8089 	bne.w	870a6 <_vfiprintf_r+0xc42>
   86f94:	9b07      	ldr	r3, [sp, #28]
   86f96:	2b00      	cmp	r3, #0
   86f98:	f47f ae92 	bne.w	86cc0 <_vfiprintf_r+0x85c>
   86f9c:	4611      	mov	r1, r2
   86f9e:	2001      	movs	r0, #1
   86fa0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86fa4:	e458      	b.n	86858 <_vfiprintf_r+0x3f4>
   86fa6:	f854 2b04 	ldr.w	r2, [r4], #4
   86faa:	9404      	str	r4, [sp, #16]
   86fac:	06fc      	lsls	r4, r7, #27
   86fae:	d407      	bmi.n	86fc0 <_vfiprintf_r+0xb5c>
   86fb0:	0678      	lsls	r0, r7, #25
   86fb2:	d502      	bpl.n	86fba <_vfiprintf_r+0xb56>
   86fb4:	2500      	movs	r5, #0
   86fb6:	b294      	uxth	r4, r2
   86fb8:	e7ca      	b.n	86f50 <_vfiprintf_r+0xaec>
   86fba:	05b9      	lsls	r1, r7, #22
   86fbc:	f100 8089 	bmi.w	870d2 <_vfiprintf_r+0xc6e>
   86fc0:	4614      	mov	r4, r2
   86fc2:	2500      	movs	r5, #0
   86fc4:	e7c4      	b.n	86f50 <_vfiprintf_r+0xaec>
   86fc6:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   86fca:	f8cd 9004 	str.w	r9, [sp, #4]
   86fce:	f8cd 8018 	str.w	r8, [sp, #24]
   86fd2:	2700      	movs	r7, #0
   86fd4:	4698      	mov	r8, r3
   86fd6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   86fda:	ae3a      	add	r6, sp, #232	; 0xe8
   86fdc:	e00b      	b.n	86ff6 <_vfiprintf_r+0xb92>
   86fde:	220a      	movs	r2, #10
   86fe0:	2300      	movs	r3, #0
   86fe2:	4620      	mov	r0, r4
   86fe4:	4629      	mov	r1, r5
   86fe6:	f003 ffb5 	bl	8af54 <__aeabi_uldivmod>
   86fea:	2d00      	cmp	r5, #0
   86fec:	bf08      	it	eq
   86fee:	2c0a      	cmpeq	r4, #10
   86ff0:	d319      	bcc.n	87026 <_vfiprintf_r+0xbc2>
   86ff2:	4604      	mov	r4, r0
   86ff4:	460d      	mov	r5, r1
   86ff6:	220a      	movs	r2, #10
   86ff8:	2300      	movs	r3, #0
   86ffa:	4620      	mov	r0, r4
   86ffc:	4629      	mov	r1, r5
   86ffe:	f003 ffa9 	bl	8af54 <__aeabi_uldivmod>
   87002:	3230      	adds	r2, #48	; 0x30
   87004:	f806 2c01 	strb.w	r2, [r6, #-1]
   87008:	3701      	adds	r7, #1
   8700a:	3e01      	subs	r6, #1
   8700c:	f1b8 0f00 	cmp.w	r8, #0
   87010:	d0e5      	beq.n	86fde <_vfiprintf_r+0xb7a>
   87012:	f899 3000 	ldrb.w	r3, [r9]
   87016:	42bb      	cmp	r3, r7
   87018:	d1e1      	bne.n	86fde <_vfiprintf_r+0xb7a>
   8701a:	2fff      	cmp	r7, #255	; 0xff
   8701c:	d0df      	beq.n	86fde <_vfiprintf_r+0xb7a>
   8701e:	2d00      	cmp	r5, #0
   87020:	bf08      	it	eq
   87022:	2c0a      	cmpeq	r4, #10
   87024:	d225      	bcs.n	87072 <_vfiprintf_r+0xc0e>
   87026:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   8702a:	ab3a      	add	r3, sp, #232	; 0xe8
   8702c:	f8dd 9004 	ldr.w	r9, [sp, #4]
   87030:	1b9b      	subs	r3, r3, r6
   87032:	464f      	mov	r7, r9
   87034:	f8dd 8018 	ldr.w	r8, [sp, #24]
   87038:	9301      	str	r3, [sp, #4]
   8703a:	f7ff bb23 	b.w	86684 <_vfiprintf_r+0x220>
   8703e:	46b9      	mov	r9, r7
   87040:	f7ff bb13 	b.w	8666a <_vfiprintf_r+0x206>
   87044:	2b01      	cmp	r3, #1
   87046:	46b9      	mov	r9, r7
   87048:	f47f ad44 	bne.w	86ad4 <_vfiprintf_r+0x670>
   8704c:	f7ff bb12 	b.w	86674 <_vfiprintf_r+0x210>
   87050:	9c04      	ldr	r4, [sp, #16]
   87052:	9a03      	ldr	r2, [sp, #12]
   87054:	f854 3b04 	ldr.w	r3, [r4], #4
   87058:	601a      	str	r2, [r3, #0]
   8705a:	9404      	str	r4, [sp, #16]
   8705c:	f7ff ba40 	b.w	864e0 <_vfiprintf_r+0x7c>
   87060:	9d00      	ldr	r5, [sp, #0]
   87062:	4e48      	ldr	r6, [pc, #288]	; (87184 <_vfiprintf_r+0xd20>)
   87064:	2d06      	cmp	r5, #6
   87066:	bf28      	it	cs
   87068:	2506      	movcs	r5, #6
   8706a:	9404      	str	r4, [sp, #16]
   8706c:	9501      	str	r5, [sp, #4]
   8706e:	f7ff bbaf 	b.w	867d0 <_vfiprintf_r+0x36c>
   87072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87074:	990a      	ldr	r1, [sp, #40]	; 0x28
   87076:	1af6      	subs	r6, r6, r3
   87078:	461a      	mov	r2, r3
   8707a:	4630      	mov	r0, r6
   8707c:	f7fd fbda 	bl	84834 <strncpy>
   87080:	f899 3001 	ldrb.w	r3, [r9, #1]
   87084:	b10b      	cbz	r3, 8708a <_vfiprintf_r+0xc26>
   87086:	f109 0901 	add.w	r9, r9, #1
   8708a:	220a      	movs	r2, #10
   8708c:	2300      	movs	r3, #0
   8708e:	4620      	mov	r0, r4
   87090:	4629      	mov	r1, r5
   87092:	f003 ff5f 	bl	8af54 <__aeabi_uldivmod>
   87096:	2700      	movs	r7, #0
   87098:	e7ab      	b.n	86ff2 <_vfiprintf_r+0xb8e>
   8709a:	2001      	movs	r0, #1
   8709c:	4611      	mov	r1, r2
   8709e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   870a2:	f7ff bbd9 	b.w	86858 <_vfiprintf_r+0x3f4>
   870a6:	2201      	movs	r2, #1
   870a8:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   870ac:	4610      	mov	r0, r2
   870ae:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   870b2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   870b6:	f7ff bbac 	b.w	86812 <_vfiprintf_r+0x3ae>
   870ba:	9c04      	ldr	r4, [sp, #16]
   870bc:	9a03      	ldr	r2, [sp, #12]
   870be:	f854 3b04 	ldr.w	r3, [r4], #4
   870c2:	801a      	strh	r2, [r3, #0]
   870c4:	9404      	str	r4, [sp, #16]
   870c6:	f7ff ba0b 	b.w	864e0 <_vfiprintf_r+0x7c>
   870ca:	2500      	movs	r5, #0
   870cc:	b2d4      	uxtb	r4, r2
   870ce:	f7ff bb1a 	b.w	86706 <_vfiprintf_r+0x2a2>
   870d2:	2500      	movs	r5, #0
   870d4:	b2d4      	uxtb	r4, r2
   870d6:	e73b      	b.n	86f50 <_vfiprintf_r+0xaec>
   870d8:	b264      	sxtb	r4, r4
   870da:	17e5      	asrs	r5, r4, #31
   870dc:	9304      	str	r3, [sp, #16]
   870de:	4622      	mov	r2, r4
   870e0:	462b      	mov	r3, r5
   870e2:	f7ff bab3 	b.w	8664c <_vfiprintf_r+0x1e8>
   870e6:	2500      	movs	r5, #0
   870e8:	b2dc      	uxtb	r4, r3
   870ea:	f7ff bb09 	b.w	86700 <_vfiprintf_r+0x29c>
   870ee:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   870f2:	f001 fdc5 	bl	88c80 <__retarget_lock_release_recursive>
   870f6:	f7ff baec 	b.w	866d2 <_vfiprintf_r+0x26e>
   870fa:	9b00      	ldr	r3, [sp, #0]
   870fc:	9404      	str	r4, [sp, #16]
   870fe:	9301      	str	r3, [sp, #4]
   87100:	9000      	str	r0, [sp, #0]
   87102:	f7ff babf 	b.w	86684 <_vfiprintf_r+0x220>
   87106:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8710a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 87188 <_vfiprintf_r+0xd24>
   8710e:	3101      	adds	r1, #1
   87110:	e619      	b.n	86d46 <_vfiprintf_r+0x8e2>
   87112:	2200      	movs	r2, #0
   87114:	9200      	str	r2, [sp, #0]
   87116:	f7ff ba09 	b.w	8652c <_vfiprintf_r+0xc8>
   8711a:	4659      	mov	r1, fp
   8711c:	9805      	ldr	r0, [sp, #20]
   8711e:	aa0e      	add	r2, sp, #56	; 0x38
   87120:	f7ff f964 	bl	863ec <__sprint_r.part.0>
   87124:	2800      	cmp	r0, #0
   87126:	f43f abd2 	beq.w	868ce <_vfiprintf_r+0x46a>
   8712a:	f7ff bb36 	b.w	8679a <_vfiprintf_r+0x336>
   8712e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   87130:	f8df 9054 	ldr.w	r9, [pc, #84]	; 87188 <_vfiprintf_r+0xd24>
   87134:	3001      	adds	r0, #1
   87136:	e657      	b.n	86de8 <_vfiprintf_r+0x984>
   87138:	4684      	mov	ip, r0
   8713a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8718c <_vfiprintf_r+0xd28>
   8713e:	e543      	b.n	86bc8 <_vfiprintf_r+0x764>
   87140:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87144:	07db      	lsls	r3, r3, #31
   87146:	d407      	bmi.n	87158 <_vfiprintf_r+0xcf4>
   87148:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8714c:	059f      	lsls	r7, r3, #22
   8714e:	d403      	bmi.n	87158 <_vfiprintf_r+0xcf4>
   87150:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   87154:	f001 fd94 	bl	88c80 <__retarget_lock_release_recursive>
   87158:	f04f 33ff 	mov.w	r3, #4294967295
   8715c:	9303      	str	r3, [sp, #12]
   8715e:	f7ff bb27 	b.w	867b0 <_vfiprintf_r+0x34c>
   87162:	9a04      	ldr	r2, [sp, #16]
   87164:	f898 3001 	ldrb.w	r3, [r8, #1]
   87168:	f852 0b04 	ldr.w	r0, [r2], #4
   8716c:	4688      	mov	r8, r1
   8716e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   87172:	9000      	str	r0, [sp, #0]
   87174:	9204      	str	r2, [sp, #16]
   87176:	f7ff b9d7 	b.w	86528 <_vfiprintf_r+0xc4>
   8717a:	bf00      	nop
   8717c:	0008b3a4 	.word	0x0008b3a4
   87180:	0008b390 	.word	0x0008b390
   87184:	0008b3b8 	.word	0x0008b3b8
   87188:	0008b3e4 	.word	0x0008b3e4
   8718c:	0008b3f4 	.word	0x0008b3f4

00087190 <__sbprintf>:
   87190:	b5f0      	push	{r4, r5, r6, r7, lr}
   87192:	460c      	mov	r4, r1
   87194:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   87198:	f04f 0e00 	mov.w	lr, #0
   8719c:	4615      	mov	r5, r2
   8719e:	4606      	mov	r6, r0
   871a0:	461f      	mov	r7, r3
   871a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   871a4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   871a8:	89e2      	ldrh	r2, [r4, #14]
   871aa:	8989      	ldrh	r1, [r1, #12]
   871ac:	9319      	str	r3, [sp, #100]	; 0x64
   871ae:	69e3      	ldr	r3, [r4, #28]
   871b0:	f8ad 200e 	strh.w	r2, [sp, #14]
   871b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   871b6:	f021 0102 	bic.w	r1, r1, #2
   871ba:	9307      	str	r3, [sp, #28]
   871bc:	a816      	add	r0, sp, #88	; 0x58
   871be:	ab1a      	add	r3, sp, #104	; 0x68
   871c0:	f8ad 100c 	strh.w	r1, [sp, #12]
   871c4:	f8cd e018 	str.w	lr, [sp, #24]
   871c8:	9209      	str	r2, [sp, #36]	; 0x24
   871ca:	9300      	str	r3, [sp, #0]
   871cc:	9304      	str	r3, [sp, #16]
   871ce:	f8cd c008 	str.w	ip, [sp, #8]
   871d2:	f8cd c014 	str.w	ip, [sp, #20]
   871d6:	f001 fd4d 	bl	88c74 <__retarget_lock_init_recursive>
   871da:	462a      	mov	r2, r5
   871dc:	463b      	mov	r3, r7
   871de:	4669      	mov	r1, sp
   871e0:	4630      	mov	r0, r6
   871e2:	f7ff f93f 	bl	86464 <_vfiprintf_r>
   871e6:	1e05      	subs	r5, r0, #0
   871e8:	db07      	blt.n	871fa <__sbprintf+0x6a>
   871ea:	4630      	mov	r0, r6
   871ec:	4669      	mov	r1, sp
   871ee:	f001 f917 	bl	88420 <_fflush_r>
   871f2:	2800      	cmp	r0, #0
   871f4:	bf18      	it	ne
   871f6:	f04f 35ff 	movne.w	r5, #4294967295
   871fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   871fe:	065b      	lsls	r3, r3, #25
   87200:	d503      	bpl.n	8720a <__sbprintf+0x7a>
   87202:	89a3      	ldrh	r3, [r4, #12]
   87204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87208:	81a3      	strh	r3, [r4, #12]
   8720a:	9816      	ldr	r0, [sp, #88]	; 0x58
   8720c:	f001 fd34 	bl	88c78 <__retarget_lock_close_recursive>
   87210:	4628      	mov	r0, r5
   87212:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   87216:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087218 <__swsetup_r>:
   87218:	b538      	push	{r3, r4, r5, lr}
   8721a:	4b32      	ldr	r3, [pc, #200]	; (872e4 <__swsetup_r+0xcc>)
   8721c:	4605      	mov	r5, r0
   8721e:	6818      	ldr	r0, [r3, #0]
   87220:	460c      	mov	r4, r1
   87222:	b110      	cbz	r0, 8722a <__swsetup_r+0x12>
   87224:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87226:	2b00      	cmp	r3, #0
   87228:	d03c      	beq.n	872a4 <__swsetup_r+0x8c>
   8722a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8722e:	0718      	lsls	r0, r3, #28
   87230:	b29a      	uxth	r2, r3
   87232:	d50c      	bpl.n	8724e <__swsetup_r+0x36>
   87234:	6921      	ldr	r1, [r4, #16]
   87236:	b1a9      	cbz	r1, 87264 <__swsetup_r+0x4c>
   87238:	f012 0001 	ands.w	r0, r2, #1
   8723c:	d022      	beq.n	87284 <__swsetup_r+0x6c>
   8723e:	2500      	movs	r5, #0
   87240:	6960      	ldr	r0, [r4, #20]
   87242:	60a5      	str	r5, [r4, #8]
   87244:	4240      	negs	r0, r0
   87246:	61a0      	str	r0, [r4, #24]
   87248:	b311      	cbz	r1, 87290 <__swsetup_r+0x78>
   8724a:	2000      	movs	r0, #0
   8724c:	bd38      	pop	{r3, r4, r5, pc}
   8724e:	06d1      	lsls	r1, r2, #27
   87250:	d53f      	bpl.n	872d2 <__swsetup_r+0xba>
   87252:	0752      	lsls	r2, r2, #29
   87254:	d429      	bmi.n	872aa <__swsetup_r+0x92>
   87256:	6921      	ldr	r1, [r4, #16]
   87258:	f043 0308 	orr.w	r3, r3, #8
   8725c:	81a3      	strh	r3, [r4, #12]
   8725e:	b29a      	uxth	r2, r3
   87260:	2900      	cmp	r1, #0
   87262:	d1e9      	bne.n	87238 <__swsetup_r+0x20>
   87264:	f402 7020 	and.w	r0, r2, #640	; 0x280
   87268:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8726c:	d0e4      	beq.n	87238 <__swsetup_r+0x20>
   8726e:	4628      	mov	r0, r5
   87270:	4621      	mov	r1, r4
   87272:	f001 fd35 	bl	88ce0 <__smakebuf_r>
   87276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8727a:	6921      	ldr	r1, [r4, #16]
   8727c:	b29a      	uxth	r2, r3
   8727e:	f012 0001 	ands.w	r0, r2, #1
   87282:	d1dc      	bne.n	8723e <__swsetup_r+0x26>
   87284:	0795      	lsls	r5, r2, #30
   87286:	bf58      	it	pl
   87288:	6960      	ldrpl	r0, [r4, #20]
   8728a:	60a0      	str	r0, [r4, #8]
   8728c:	2900      	cmp	r1, #0
   8728e:	d1dc      	bne.n	8724a <__swsetup_r+0x32>
   87290:	0612      	lsls	r2, r2, #24
   87292:	bf58      	it	pl
   87294:	4608      	movpl	r0, r1
   87296:	d5d9      	bpl.n	8724c <__swsetup_r+0x34>
   87298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8729c:	f04f 30ff 	mov.w	r0, #4294967295
   872a0:	81a3      	strh	r3, [r4, #12]
   872a2:	bd38      	pop	{r3, r4, r5, pc}
   872a4:	f001 f918 	bl	884d8 <__sinit>
   872a8:	e7bf      	b.n	8722a <__swsetup_r+0x12>
   872aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   872ac:	b151      	cbz	r1, 872c4 <__swsetup_r+0xac>
   872ae:	f104 0240 	add.w	r2, r4, #64	; 0x40
   872b2:	4291      	cmp	r1, r2
   872b4:	d004      	beq.n	872c0 <__swsetup_r+0xa8>
   872b6:	4628      	mov	r0, r5
   872b8:	f001 fa32 	bl	88720 <_free_r>
   872bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   872c0:	2200      	movs	r2, #0
   872c2:	6322      	str	r2, [r4, #48]	; 0x30
   872c4:	2200      	movs	r2, #0
   872c6:	6921      	ldr	r1, [r4, #16]
   872c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   872cc:	e9c4 1200 	strd	r1, r2, [r4]
   872d0:	e7c2      	b.n	87258 <__swsetup_r+0x40>
   872d2:	2209      	movs	r2, #9
   872d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   872d8:	602a      	str	r2, [r5, #0]
   872da:	f04f 30ff 	mov.w	r0, #4294967295
   872de:	81a3      	strh	r3, [r4, #12]
   872e0:	bd38      	pop	{r3, r4, r5, pc}
   872e2:	bf00      	nop
   872e4:	200003d0 	.word	0x200003d0

000872e8 <register_fini>:
   872e8:	4b02      	ldr	r3, [pc, #8]	; (872f4 <register_fini+0xc>)
   872ea:	b113      	cbz	r3, 872f2 <register_fini+0xa>
   872ec:	4802      	ldr	r0, [pc, #8]	; (872f8 <register_fini+0x10>)
   872ee:	f000 b805 	b.w	872fc <atexit>
   872f2:	4770      	bx	lr
   872f4:	00000000 	.word	0x00000000
   872f8:	0008854d 	.word	0x0008854d

000872fc <atexit>:
   872fc:	2300      	movs	r3, #0
   872fe:	4601      	mov	r1, r0
   87300:	461a      	mov	r2, r3
   87302:	4618      	mov	r0, r3
   87304:	f002 bfca 	b.w	8a29c <__register_exitproc>

00087308 <quorem>:
   87308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8730c:	6903      	ldr	r3, [r0, #16]
   8730e:	690d      	ldr	r5, [r1, #16]
   87310:	b083      	sub	sp, #12
   87312:	42ab      	cmp	r3, r5
   87314:	f2c0 8084 	blt.w	87420 <quorem+0x118>
   87318:	3d01      	subs	r5, #1
   8731a:	f101 0614 	add.w	r6, r1, #20
   8731e:	f100 0914 	add.w	r9, r0, #20
   87322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   87326:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8732a:	3301      	adds	r3, #1
   8732c:	468e      	mov	lr, r1
   8732e:	00a9      	lsls	r1, r5, #2
   87330:	9100      	str	r1, [sp, #0]
   87332:	429a      	cmp	r2, r3
   87334:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   87338:	4682      	mov	sl, r0
   8733a:	fbb2 f7f3 	udiv	r7, r2, r3
   8733e:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   87342:	9101      	str	r1, [sp, #4]
   87344:	d337      	bcc.n	873b6 <quorem+0xae>
   87346:	2200      	movs	r2, #0
   87348:	46b4      	mov	ip, r6
   8734a:	4614      	mov	r4, r2
   8734c:	4648      	mov	r0, r9
   8734e:	f85c 3b04 	ldr.w	r3, [ip], #4
   87352:	6801      	ldr	r1, [r0, #0]
   87354:	fa1f fb83 	uxth.w	fp, r3
   87358:	fb07 220b 	mla	r2, r7, fp, r2
   8735c:	0c1b      	lsrs	r3, r3, #16
   8735e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   87362:	fb07 bb03 	mla	fp, r7, r3, fp
   87366:	b293      	uxth	r3, r2
   87368:	1ae3      	subs	r3, r4, r3
   8736a:	b28a      	uxth	r2, r1
   8736c:	fa1f f48b 	uxth.w	r4, fp
   87370:	4413      	add	r3, r2
   87372:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   87376:	eb04 4423 	add.w	r4, r4, r3, asr #16
   8737a:	b29b      	uxth	r3, r3
   8737c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   87380:	45e0      	cmp	r8, ip
   87382:	f840 3b04 	str.w	r3, [r0], #4
   87386:	ea4f 4424 	mov.w	r4, r4, asr #16
   8738a:	ea4f 421b 	mov.w	r2, fp, lsr #16
   8738e:	d2de      	bcs.n	8734e <quorem+0x46>
   87390:	9b00      	ldr	r3, [sp, #0]
   87392:	f859 3003 	ldr.w	r3, [r9, r3]
   87396:	b973      	cbnz	r3, 873b6 <quorem+0xae>
   87398:	9b01      	ldr	r3, [sp, #4]
   8739a:	3b04      	subs	r3, #4
   8739c:	4599      	cmp	r9, r3
   8739e:	d304      	bcc.n	873aa <quorem+0xa2>
   873a0:	e007      	b.n	873b2 <quorem+0xaa>
   873a2:	4599      	cmp	r9, r3
   873a4:	f105 35ff 	add.w	r5, r5, #4294967295
   873a8:	d203      	bcs.n	873b2 <quorem+0xaa>
   873aa:	f853 2904 	ldr.w	r2, [r3], #-4
   873ae:	2a00      	cmp	r2, #0
   873b0:	d0f7      	beq.n	873a2 <quorem+0x9a>
   873b2:	f8ca 5010 	str.w	r5, [sl, #16]
   873b6:	4671      	mov	r1, lr
   873b8:	4650      	mov	r0, sl
   873ba:	f002 fab1 	bl	89920 <__mcmp>
   873be:	2800      	cmp	r0, #0
   873c0:	db2a      	blt.n	87418 <quorem+0x110>
   873c2:	4648      	mov	r0, r9
   873c4:	2300      	movs	r3, #0
   873c6:	3701      	adds	r7, #1
   873c8:	f856 1b04 	ldr.w	r1, [r6], #4
   873cc:	6804      	ldr	r4, [r0, #0]
   873ce:	b28a      	uxth	r2, r1
   873d0:	1a9a      	subs	r2, r3, r2
   873d2:	0c0b      	lsrs	r3, r1, #16
   873d4:	b2a1      	uxth	r1, r4
   873d6:	440a      	add	r2, r1
   873d8:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   873dc:	eb03 4322 	add.w	r3, r3, r2, asr #16
   873e0:	b292      	uxth	r2, r2
   873e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   873e6:	45b0      	cmp	r8, r6
   873e8:	f840 2b04 	str.w	r2, [r0], #4
   873ec:	ea4f 4323 	mov.w	r3, r3, asr #16
   873f0:	d2ea      	bcs.n	873c8 <quorem+0xc0>
   873f2:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   873f6:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   873fa:	b96a      	cbnz	r2, 87418 <quorem+0x110>
   873fc:	3b04      	subs	r3, #4
   873fe:	4599      	cmp	r9, r3
   87400:	d304      	bcc.n	8740c <quorem+0x104>
   87402:	e007      	b.n	87414 <quorem+0x10c>
   87404:	4599      	cmp	r9, r3
   87406:	f105 35ff 	add.w	r5, r5, #4294967295
   8740a:	d203      	bcs.n	87414 <quorem+0x10c>
   8740c:	f853 2904 	ldr.w	r2, [r3], #-4
   87410:	2a00      	cmp	r2, #0
   87412:	d0f7      	beq.n	87404 <quorem+0xfc>
   87414:	f8ca 5010 	str.w	r5, [sl, #16]
   87418:	4638      	mov	r0, r7
   8741a:	b003      	add	sp, #12
   8741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87420:	2000      	movs	r0, #0
   87422:	b003      	add	sp, #12
   87424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087428 <_dtoa_r>:
   87428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8742c:	4616      	mov	r6, r2
   8742e:	461f      	mov	r7, r3
   87430:	6c01      	ldr	r1, [r0, #64]	; 0x40
   87432:	b09b      	sub	sp, #108	; 0x6c
   87434:	4604      	mov	r4, r0
   87436:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8743a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8743c:	b141      	cbz	r1, 87450 <_dtoa_r+0x28>
   8743e:	2301      	movs	r3, #1
   87440:	6c42      	ldr	r2, [r0, #68]	; 0x44
   87442:	4093      	lsls	r3, r2
   87444:	e9c1 2301 	strd	r2, r3, [r1, #4]
   87448:	f002 f83c 	bl	894c4 <_Bfree>
   8744c:	2300      	movs	r3, #0
   8744e:	6423      	str	r3, [r4, #64]	; 0x40
   87450:	f1b7 0900 	subs.w	r9, r7, #0
   87454:	bfb4      	ite	lt
   87456:	2301      	movlt	r3, #1
   87458:	2300      	movge	r3, #0
   8745a:	602b      	str	r3, [r5, #0]
   8745c:	4b76      	ldr	r3, [pc, #472]	; (87638 <_dtoa_r+0x210>)
   8745e:	bfbc      	itt	lt
   87460:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   87464:	f8cd 9014 	strlt.w	r9, [sp, #20]
   87468:	ea33 0309 	bics.w	r3, r3, r9
   8746c:	f000 80ab 	beq.w	875c6 <_dtoa_r+0x19e>
   87470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   87474:	4610      	mov	r0, r2
   87476:	4619      	mov	r1, r3
   87478:	2200      	movs	r2, #0
   8747a:	2300      	movs	r3, #0
   8747c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   87480:	f003 fcf8 	bl	8ae74 <__aeabi_dcmpeq>
   87484:	4680      	mov	r8, r0
   87486:	b170      	cbz	r0, 874a6 <_dtoa_r+0x7e>
   87488:	2301      	movs	r3, #1
   8748a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8748c:	6013      	str	r3, [r2, #0]
   8748e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87490:	2b00      	cmp	r3, #0
   87492:	f000 82c2 	beq.w	87a1a <_dtoa_r+0x5f2>
   87496:	4869      	ldr	r0, [pc, #420]	; (8763c <_dtoa_r+0x214>)
   87498:	6018      	str	r0, [r3, #0]
   8749a:	1e43      	subs	r3, r0, #1
   8749c:	9303      	str	r3, [sp, #12]
   8749e:	9803      	ldr	r0, [sp, #12]
   874a0:	b01b      	add	sp, #108	; 0x6c
   874a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   874a6:	aa18      	add	r2, sp, #96	; 0x60
   874a8:	ab19      	add	r3, sp, #100	; 0x64
   874aa:	e9cd 3200 	strd	r3, r2, [sp]
   874ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   874b2:	4620      	mov	r0, r4
   874b4:	f002 fafa 	bl	89aac <__d2b>
   874b8:	ea5f 5519 	movs.w	r5, r9, lsr #20
   874bc:	4682      	mov	sl, r0
   874be:	f040 8098 	bne.w	875f2 <_dtoa_r+0x1ca>
   874c2:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   874c6:	4445      	add	r5, r8
   874c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
   874cc:	2820      	cmp	r0, #32
   874ce:	f340 8390 	ble.w	87bf2 <_dtoa_r+0x7ca>
   874d2:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   874d6:	f205 4012 	addw	r0, r5, #1042	; 0x412
   874da:	fa09 f903 	lsl.w	r9, r9, r3
   874de:	fa26 f000 	lsr.w	r0, r6, r0
   874e2:	ea49 0000 	orr.w	r0, r9, r0
   874e6:	f003 f9e3 	bl	8a8b0 <__aeabi_ui2d>
   874ea:	2201      	movs	r2, #1
   874ec:	3d01      	subs	r5, #1
   874ee:	920f      	str	r2, [sp, #60]	; 0x3c
   874f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   874f4:	2200      	movs	r2, #0
   874f6:	4b52      	ldr	r3, [pc, #328]	; (87640 <_dtoa_r+0x218>)
   874f8:	f003 f89c 	bl	8a634 <__aeabi_dsub>
   874fc:	a348      	add	r3, pc, #288	; (adr r3, 87620 <_dtoa_r+0x1f8>)
   874fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   87502:	f003 fa4f 	bl	8a9a4 <__aeabi_dmul>
   87506:	a348      	add	r3, pc, #288	; (adr r3, 87628 <_dtoa_r+0x200>)
   87508:	e9d3 2300 	ldrd	r2, r3, [r3]
   8750c:	f003 f894 	bl	8a638 <__adddf3>
   87510:	4606      	mov	r6, r0
   87512:	4628      	mov	r0, r5
   87514:	460f      	mov	r7, r1
   87516:	f003 f9db 	bl	8a8d0 <__aeabi_i2d>
   8751a:	a345      	add	r3, pc, #276	; (adr r3, 87630 <_dtoa_r+0x208>)
   8751c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87520:	f003 fa40 	bl	8a9a4 <__aeabi_dmul>
   87524:	4602      	mov	r2, r0
   87526:	460b      	mov	r3, r1
   87528:	4630      	mov	r0, r6
   8752a:	4639      	mov	r1, r7
   8752c:	f003 f884 	bl	8a638 <__adddf3>
   87530:	4606      	mov	r6, r0
   87532:	460f      	mov	r7, r1
   87534:	f003 fce6 	bl	8af04 <__aeabi_d2iz>
   87538:	2200      	movs	r2, #0
   8753a:	4683      	mov	fp, r0
   8753c:	2300      	movs	r3, #0
   8753e:	4630      	mov	r0, r6
   87540:	4639      	mov	r1, r7
   87542:	f003 fca1 	bl	8ae88 <__aeabi_dcmplt>
   87546:	2800      	cmp	r0, #0
   87548:	f040 825a 	bne.w	87a00 <_dtoa_r+0x5d8>
   8754c:	f1bb 0f16 	cmp.w	fp, #22
   87550:	f200 8248 	bhi.w	879e4 <_dtoa_r+0x5bc>
   87554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87558:	4b3a      	ldr	r3, [pc, #232]	; (87644 <_dtoa_r+0x21c>)
   8755a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8755e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87562:	f003 fc91 	bl	8ae88 <__aeabi_dcmplt>
   87566:	2800      	cmp	r0, #0
   87568:	d072      	beq.n	87650 <_dtoa_r+0x228>
   8756a:	2300      	movs	r3, #0
   8756c:	eba8 0505 	sub.w	r5, r8, r5
   87570:	930e      	str	r3, [sp, #56]	; 0x38
   87572:	1e6b      	subs	r3, r5, #1
   87574:	f10b 3bff 	add.w	fp, fp, #4294967295
   87578:	9306      	str	r3, [sp, #24]
   8757a:	f100 823b 	bmi.w	879f4 <_dtoa_r+0x5cc>
   8757e:	2300      	movs	r3, #0
   87580:	930b      	str	r3, [sp, #44]	; 0x2c
   87582:	f1bb 0f00 	cmp.w	fp, #0
   87586:	da6b      	bge.n	87660 <_dtoa_r+0x238>
   87588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8758a:	f8cd b01c 	str.w	fp, [sp, #28]
   8758e:	eba3 030b 	sub.w	r3, r3, fp
   87592:	930b      	str	r3, [sp, #44]	; 0x2c
   87594:	f1cb 0300 	rsb	r3, fp, #0
   87598:	930d      	str	r3, [sp, #52]	; 0x34
   8759a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8759c:	f04f 0b00 	mov.w	fp, #0
   875a0:	2b09      	cmp	r3, #9
   875a2:	d866      	bhi.n	87672 <_dtoa_r+0x24a>
   875a4:	2b05      	cmp	r3, #5
   875a6:	f340 8322 	ble.w	87bee <_dtoa_r+0x7c6>
   875aa:	2500      	movs	r5, #0
   875ac:	3b04      	subs	r3, #4
   875ae:	9324      	str	r3, [sp, #144]	; 0x90
   875b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   875b2:	3b02      	subs	r3, #2
   875b4:	2b03      	cmp	r3, #3
   875b6:	f200 866e 	bhi.w	88296 <_dtoa_r+0xe6e>
   875ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   875be:	043b      	.short	0x043b
   875c0:	042f0438 	.word	0x042f0438
   875c4:	0412      	.short	0x0412
   875c6:	f242 730f 	movw	r3, #9999	; 0x270f
   875ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
   875cc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   875d0:	6013      	str	r3, [r2, #0]
   875d2:	ea59 0306 	orrs.w	r3, r9, r6
   875d6:	d11c      	bne.n	87612 <_dtoa_r+0x1ea>
   875d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   875da:	2b00      	cmp	r3, #0
   875dc:	f000 8657 	beq.w	8828e <_dtoa_r+0xe66>
   875e0:	4b19      	ldr	r3, [pc, #100]	; (87648 <_dtoa_r+0x220>)
   875e2:	9303      	str	r3, [sp, #12]
   875e4:	3308      	adds	r3, #8
   875e6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   875e8:	9803      	ldr	r0, [sp, #12]
   875ea:	6013      	str	r3, [r2, #0]
   875ec:	b01b      	add	sp, #108	; 0x6c
   875ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   875f2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   875f6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   875fa:	4608      	mov	r0, r1
   875fc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   87600:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   87604:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   87608:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8760c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87610:	e770      	b.n	874f4 <_dtoa_r+0xcc>
   87612:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87614:	2b00      	cmp	r3, #0
   87616:	f040 83c8 	bne.w	87daa <_dtoa_r+0x982>
   8761a:	4b0c      	ldr	r3, [pc, #48]	; (8764c <_dtoa_r+0x224>)
   8761c:	9303      	str	r3, [sp, #12]
   8761e:	e73e      	b.n	8749e <_dtoa_r+0x76>
   87620:	636f4361 	.word	0x636f4361
   87624:	3fd287a7 	.word	0x3fd287a7
   87628:	8b60c8b3 	.word	0x8b60c8b3
   8762c:	3fc68a28 	.word	0x3fc68a28
   87630:	509f79fb 	.word	0x509f79fb
   87634:	3fd34413 	.word	0x3fd34413
   87638:	7ff00000 	.word	0x7ff00000
   8763c:	0008b3c1 	.word	0x0008b3c1
   87640:	3ff80000 	.word	0x3ff80000
   87644:	0008b560 	.word	0x0008b560
   87648:	0008b408 	.word	0x0008b408
   8764c:	0008b404 	.word	0x0008b404
   87650:	eba8 0505 	sub.w	r5, r8, r5
   87654:	1e6b      	subs	r3, r5, #1
   87656:	9306      	str	r3, [sp, #24]
   87658:	f100 84a9 	bmi.w	87fae <_dtoa_r+0xb86>
   8765c:	900e      	str	r0, [sp, #56]	; 0x38
   8765e:	900b      	str	r0, [sp, #44]	; 0x2c
   87660:	9b06      	ldr	r3, [sp, #24]
   87662:	445b      	add	r3, fp
   87664:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   87668:	2300      	movs	r3, #0
   8766a:	930d      	str	r3, [sp, #52]	; 0x34
   8766c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8766e:	2b09      	cmp	r3, #9
   87670:	d998      	bls.n	875a4 <_dtoa_r+0x17c>
   87672:	2300      	movs	r3, #0
   87674:	2501      	movs	r5, #1
   87676:	9324      	str	r3, [sp, #144]	; 0x90
   87678:	9325      	str	r3, [sp, #148]	; 0x94
   8767a:	f04f 33ff 	mov.w	r3, #4294967295
   8767e:	950c      	str	r5, [sp, #48]	; 0x30
   87680:	930a      	str	r3, [sp, #40]	; 0x28
   87682:	2100      	movs	r1, #0
   87684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87686:	6461      	str	r1, [r4, #68]	; 0x44
   87688:	9312      	str	r3, [sp, #72]	; 0x48
   8768a:	4620      	mov	r0, r4
   8768c:	f001 fef4 	bl	89478 <_Balloc>
   87690:	9003      	str	r0, [sp, #12]
   87692:	2800      	cmp	r0, #0
   87694:	f000 8607 	beq.w	882a6 <_dtoa_r+0xe7e>
   87698:	9b03      	ldr	r3, [sp, #12]
   8769a:	6423      	str	r3, [r4, #64]	; 0x40
   8769c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8769e:	2b0e      	cmp	r3, #14
   876a0:	f200 80e9 	bhi.w	87876 <_dtoa_r+0x44e>
   876a4:	2d00      	cmp	r5, #0
   876a6:	f000 80e6 	beq.w	87876 <_dtoa_r+0x44e>
   876aa:	9907      	ldr	r1, [sp, #28]
   876ac:	2900      	cmp	r1, #0
   876ae:	f340 8452 	ble.w	87f56 <_dtoa_r+0xb2e>
   876b2:	4bb5      	ldr	r3, [pc, #724]	; (87988 <_dtoa_r+0x560>)
   876b4:	f001 020f 	and.w	r2, r1, #15
   876b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   876bc:	05c8      	lsls	r0, r1, #23
   876be:	ea4f 1521 	mov.w	r5, r1, asr #4
   876c2:	e9d3 6700 	ldrd	r6, r7, [r3]
   876c6:	f140 83ee 	bpl.w	87ea6 <_dtoa_r+0xa7e>
   876ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   876ce:	4baf      	ldr	r3, [pc, #700]	; (8798c <_dtoa_r+0x564>)
   876d0:	f04f 0903 	mov.w	r9, #3
   876d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   876d8:	f003 fa8e 	bl	8abf8 <__aeabi_ddiv>
   876dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   876e0:	f005 050f 	and.w	r5, r5, #15
   876e4:	b18d      	cbz	r5, 8770a <_dtoa_r+0x2e2>
   876e6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8798c <_dtoa_r+0x564>
   876ea:	07e9      	lsls	r1, r5, #31
   876ec:	d509      	bpl.n	87702 <_dtoa_r+0x2da>
   876ee:	e9d8 2300 	ldrd	r2, r3, [r8]
   876f2:	4630      	mov	r0, r6
   876f4:	4639      	mov	r1, r7
   876f6:	f003 f955 	bl	8a9a4 <__aeabi_dmul>
   876fa:	4606      	mov	r6, r0
   876fc:	460f      	mov	r7, r1
   876fe:	f109 0901 	add.w	r9, r9, #1
   87702:	106d      	asrs	r5, r5, #1
   87704:	f108 0808 	add.w	r8, r8, #8
   87708:	d1ef      	bne.n	876ea <_dtoa_r+0x2c2>
   8770a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8770e:	4632      	mov	r2, r6
   87710:	463b      	mov	r3, r7
   87712:	f003 fa71 	bl	8abf8 <__aeabi_ddiv>
   87716:	4606      	mov	r6, r0
   87718:	460f      	mov	r7, r1
   8771a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8771c:	b143      	cbz	r3, 87730 <_dtoa_r+0x308>
   8771e:	2200      	movs	r2, #0
   87720:	4630      	mov	r0, r6
   87722:	4639      	mov	r1, r7
   87724:	4b9a      	ldr	r3, [pc, #616]	; (87990 <_dtoa_r+0x568>)
   87726:	f003 fbaf 	bl	8ae88 <__aeabi_dcmplt>
   8772a:	2800      	cmp	r0, #0
   8772c:	f040 853b 	bne.w	881a6 <_dtoa_r+0xd7e>
   87730:	4648      	mov	r0, r9
   87732:	f003 f8cd 	bl	8a8d0 <__aeabi_i2d>
   87736:	4632      	mov	r2, r6
   87738:	463b      	mov	r3, r7
   8773a:	f003 f933 	bl	8a9a4 <__aeabi_dmul>
   8773e:	4b95      	ldr	r3, [pc, #596]	; (87994 <_dtoa_r+0x56c>)
   87740:	2200      	movs	r2, #0
   87742:	f002 ff79 	bl	8a638 <__adddf3>
   87746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87748:	4680      	mov	r8, r0
   8774a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8774e:	2b00      	cmp	r3, #0
   87750:	f000 83ce 	beq.w	87ef0 <_dtoa_r+0xac8>
   87754:	9b07      	ldr	r3, [sp, #28]
   87756:	9313      	str	r3, [sp, #76]	; 0x4c
   87758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8775a:	9310      	str	r3, [sp, #64]	; 0x40
   8775c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8775e:	2b00      	cmp	r3, #0
   87760:	f000 84b7 	beq.w	880d2 <_dtoa_r+0xcaa>
   87764:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87766:	4b88      	ldr	r3, [pc, #544]	; (87988 <_dtoa_r+0x560>)
   87768:	2000      	movs	r0, #0
   8776a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8776e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87772:	4989      	ldr	r1, [pc, #548]	; (87998 <_dtoa_r+0x570>)
   87774:	f003 fa40 	bl	8abf8 <__aeabi_ddiv>
   87778:	4642      	mov	r2, r8
   8777a:	464b      	mov	r3, r9
   8777c:	f002 ff5a 	bl	8a634 <__aeabi_dsub>
   87780:	4602      	mov	r2, r0
   87782:	460b      	mov	r3, r1
   87784:	4630      	mov	r0, r6
   87786:	4639      	mov	r1, r7
   87788:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8778c:	f003 fbba 	bl	8af04 <__aeabi_d2iz>
   87790:	4680      	mov	r8, r0
   87792:	f003 f89d 	bl	8a8d0 <__aeabi_i2d>
   87796:	4602      	mov	r2, r0
   87798:	460b      	mov	r3, r1
   8779a:	4630      	mov	r0, r6
   8779c:	4639      	mov	r1, r7
   8779e:	f002 ff49 	bl	8a634 <__aeabi_dsub>
   877a2:	9d03      	ldr	r5, [sp, #12]
   877a4:	f108 0330 	add.w	r3, r8, #48	; 0x30
   877a8:	4606      	mov	r6, r0
   877aa:	460f      	mov	r7, r1
   877ac:	4602      	mov	r2, r0
   877ae:	f805 3b01 	strb.w	r3, [r5], #1
   877b2:	460b      	mov	r3, r1
   877b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   877b8:	f003 fb84 	bl	8aec4 <__aeabi_dcmpgt>
   877bc:	2800      	cmp	r0, #0
   877be:	f040 853b 	bne.w	88238 <_dtoa_r+0xe10>
   877c2:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   877c6:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   877ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   877ce:	f04f 0900 	mov.w	r9, #0
   877d2:	9410      	str	r4, [sp, #64]	; 0x40
   877d4:	e02a      	b.n	8782c <_dtoa_r+0x404>
   877d6:	f109 0901 	add.w	r9, r9, #1
   877da:	45c1      	cmp	r9, r8
   877dc:	da48      	bge.n	87870 <_dtoa_r+0x448>
   877de:	4650      	mov	r0, sl
   877e0:	4659      	mov	r1, fp
   877e2:	2200      	movs	r2, #0
   877e4:	4b6d      	ldr	r3, [pc, #436]	; (8799c <_dtoa_r+0x574>)
   877e6:	f003 f8dd 	bl	8a9a4 <__aeabi_dmul>
   877ea:	2200      	movs	r2, #0
   877ec:	4b6b      	ldr	r3, [pc, #428]	; (8799c <_dtoa_r+0x574>)
   877ee:	4682      	mov	sl, r0
   877f0:	468b      	mov	fp, r1
   877f2:	4630      	mov	r0, r6
   877f4:	4639      	mov	r1, r7
   877f6:	f003 f8d5 	bl	8a9a4 <__aeabi_dmul>
   877fa:	460f      	mov	r7, r1
   877fc:	4606      	mov	r6, r0
   877fe:	f003 fb81 	bl	8af04 <__aeabi_d2iz>
   87802:	4604      	mov	r4, r0
   87804:	f003 f864 	bl	8a8d0 <__aeabi_i2d>
   87808:	4602      	mov	r2, r0
   8780a:	460b      	mov	r3, r1
   8780c:	4630      	mov	r0, r6
   8780e:	4639      	mov	r1, r7
   87810:	f002 ff10 	bl	8a634 <__aeabi_dsub>
   87814:	3430      	adds	r4, #48	; 0x30
   87816:	4652      	mov	r2, sl
   87818:	465b      	mov	r3, fp
   8781a:	f805 4b01 	strb.w	r4, [r5], #1
   8781e:	4606      	mov	r6, r0
   87820:	460f      	mov	r7, r1
   87822:	f003 fb31 	bl	8ae88 <__aeabi_dcmplt>
   87826:	2800      	cmp	r0, #0
   87828:	f040 8503 	bne.w	88232 <_dtoa_r+0xe0a>
   8782c:	4632      	mov	r2, r6
   8782e:	463b      	mov	r3, r7
   87830:	2000      	movs	r0, #0
   87832:	4957      	ldr	r1, [pc, #348]	; (87990 <_dtoa_r+0x568>)
   87834:	f002 fefe 	bl	8a634 <__aeabi_dsub>
   87838:	4652      	mov	r2, sl
   8783a:	465b      	mov	r3, fp
   8783c:	f003 fb24 	bl	8ae88 <__aeabi_dcmplt>
   87840:	2800      	cmp	r0, #0
   87842:	d0c8      	beq.n	877d6 <_dtoa_r+0x3ae>
   87844:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87846:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8784a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8784c:	9a03      	ldr	r2, [sp, #12]
   8784e:	9307      	str	r3, [sp, #28]
   87850:	e002      	b.n	87858 <_dtoa_r+0x430>
   87852:	4295      	cmp	r5, r2
   87854:	f000 84d2 	beq.w	881fc <_dtoa_r+0xdd4>
   87858:	46a9      	mov	r9, r5
   8785a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8785e:	2b39      	cmp	r3, #57	; 0x39
   87860:	d0f7      	beq.n	87852 <_dtoa_r+0x42a>
   87862:	3301      	adds	r3, #1
   87864:	b2db      	uxtb	r3, r3
   87866:	702b      	strb	r3, [r5, #0]
   87868:	9b07      	ldr	r3, [sp, #28]
   8786a:	3301      	adds	r3, #1
   8786c:	9307      	str	r3, [sp, #28]
   8786e:	e1a0      	b.n	87bb2 <_dtoa_r+0x78a>
   87870:	9c10      	ldr	r4, [sp, #64]	; 0x40
   87872:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   87876:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87878:	2b00      	cmp	r3, #0
   8787a:	f2c0 8093 	blt.w	879a4 <_dtoa_r+0x57c>
   8787e:	9a07      	ldr	r2, [sp, #28]
   87880:	2a0e      	cmp	r2, #14
   87882:	f300 808f 	bgt.w	879a4 <_dtoa_r+0x57c>
   87886:	4b40      	ldr	r3, [pc, #256]	; (87988 <_dtoa_r+0x560>)
   87888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8788c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87890:	e9cd 2304 	strd	r2, r3, [sp, #16]
   87894:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87896:	2b00      	cmp	r3, #0
   87898:	da1a      	bge.n	878d0 <_dtoa_r+0x4a8>
   8789a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8789c:	2b00      	cmp	r3, #0
   8789e:	dc17      	bgt.n	878d0 <_dtoa_r+0x4a8>
   878a0:	f040 833f 	bne.w	87f22 <_dtoa_r+0xafa>
   878a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   878a8:	2200      	movs	r2, #0
   878aa:	4b3d      	ldr	r3, [pc, #244]	; (879a0 <_dtoa_r+0x578>)
   878ac:	f003 f87a 	bl	8a9a4 <__aeabi_dmul>
   878b0:	4602      	mov	r2, r0
   878b2:	460b      	mov	r3, r1
   878b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   878b8:	f003 faf0 	bl	8ae9c <__aeabi_dcmple>
   878bc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   878c0:	4645      	mov	r5, r8
   878c2:	2800      	cmp	r0, #0
   878c4:	f000 82cd 	beq.w	87e62 <_dtoa_r+0xa3a>
   878c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   878ca:	9f03      	ldr	r7, [sp, #12]
   878cc:	43de      	mvns	r6, r3
   878ce:	e2d0      	b.n	87e72 <_dtoa_r+0xa4a>
   878d0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   878d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   878d8:	4632      	mov	r2, r6
   878da:	463b      	mov	r3, r7
   878dc:	f003 f98c 	bl	8abf8 <__aeabi_ddiv>
   878e0:	f003 fb10 	bl	8af04 <__aeabi_d2iz>
   878e4:	4680      	mov	r8, r0
   878e6:	f002 fff3 	bl	8a8d0 <__aeabi_i2d>
   878ea:	4632      	mov	r2, r6
   878ec:	463b      	mov	r3, r7
   878ee:	f003 f859 	bl	8a9a4 <__aeabi_dmul>
   878f2:	460b      	mov	r3, r1
   878f4:	4602      	mov	r2, r0
   878f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   878fa:	f002 fe9b 	bl	8a634 <__aeabi_dsub>
   878fe:	9d03      	ldr	r5, [sp, #12]
   87900:	f108 0330 	add.w	r3, r8, #48	; 0x30
   87904:	f805 3b01 	strb.w	r3, [r5], #1
   87908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8790a:	2b01      	cmp	r3, #1
   8790c:	f000 837f 	beq.w	8800e <_dtoa_r+0xbe6>
   87910:	f8cd a018 	str.w	sl, [sp, #24]
   87914:	f04f 0901 	mov.w	r9, #1
   87918:	469b      	mov	fp, r3
   8791a:	46aa      	mov	sl, r5
   8791c:	9408      	str	r4, [sp, #32]
   8791e:	e01d      	b.n	8795c <_dtoa_r+0x534>
   87920:	4632      	mov	r2, r6
   87922:	463b      	mov	r3, r7
   87924:	4620      	mov	r0, r4
   87926:	4629      	mov	r1, r5
   87928:	f003 f966 	bl	8abf8 <__aeabi_ddiv>
   8792c:	f003 faea 	bl	8af04 <__aeabi_d2iz>
   87930:	4680      	mov	r8, r0
   87932:	f002 ffcd 	bl	8a8d0 <__aeabi_i2d>
   87936:	4632      	mov	r2, r6
   87938:	463b      	mov	r3, r7
   8793a:	f003 f833 	bl	8a9a4 <__aeabi_dmul>
   8793e:	f109 0901 	add.w	r9, r9, #1
   87942:	460b      	mov	r3, r1
   87944:	4602      	mov	r2, r0
   87946:	4629      	mov	r1, r5
   87948:	4620      	mov	r0, r4
   8794a:	f002 fe73 	bl	8a634 <__aeabi_dsub>
   8794e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   87952:	45cb      	cmp	fp, r9
   87954:	f80a 3b01 	strb.w	r3, [sl], #1
   87958:	f000 8355 	beq.w	88006 <_dtoa_r+0xbde>
   8795c:	2200      	movs	r2, #0
   8795e:	4b0f      	ldr	r3, [pc, #60]	; (8799c <_dtoa_r+0x574>)
   87960:	f003 f820 	bl	8a9a4 <__aeabi_dmul>
   87964:	2200      	movs	r2, #0
   87966:	2300      	movs	r3, #0
   87968:	4604      	mov	r4, r0
   8796a:	460d      	mov	r5, r1
   8796c:	f003 fa82 	bl	8ae74 <__aeabi_dcmpeq>
   87970:	2800      	cmp	r0, #0
   87972:	d0d5      	beq.n	87920 <_dtoa_r+0x4f8>
   87974:	4655      	mov	r5, sl
   87976:	9c08      	ldr	r4, [sp, #32]
   87978:	f8dd a018 	ldr.w	sl, [sp, #24]
   8797c:	9b07      	ldr	r3, [sp, #28]
   8797e:	46a9      	mov	r9, r5
   87980:	3301      	adds	r3, #1
   87982:	9307      	str	r3, [sp, #28]
   87984:	e115      	b.n	87bb2 <_dtoa_r+0x78a>
   87986:	bf00      	nop
   87988:	0008b560 	.word	0x0008b560
   8798c:	0008b538 	.word	0x0008b538
   87990:	3ff00000 	.word	0x3ff00000
   87994:	401c0000 	.word	0x401c0000
   87998:	3fe00000 	.word	0x3fe00000
   8799c:	40240000 	.word	0x40240000
   879a0:	40140000 	.word	0x40140000
   879a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   879a6:	2a00      	cmp	r2, #0
   879a8:	d03d      	beq.n	87a26 <_dtoa_r+0x5fe>
   879aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   879ac:	2a01      	cmp	r2, #1
   879ae:	f340 82bc 	ble.w	87f2a <_dtoa_r+0xb02>
   879b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   879b4:	1e5f      	subs	r7, r3, #1
   879b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   879b8:	42bb      	cmp	r3, r7
   879ba:	f2c0 826e 	blt.w	87e9a <_dtoa_r+0xa72>
   879be:	1bdf      	subs	r7, r3, r7
   879c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   879c2:	2b00      	cmp	r3, #0
   879c4:	f2c0 8354 	blt.w	88070 <_dtoa_r+0xc48>
   879c8:	9a06      	ldr	r2, [sp, #24]
   879ca:	4611      	mov	r1, r2
   879cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   879ce:	4419      	add	r1, r3
   879d0:	4616      	mov	r6, r2
   879d2:	441a      	add	r2, r3
   879d4:	9106      	str	r1, [sp, #24]
   879d6:	920b      	str	r2, [sp, #44]	; 0x2c
   879d8:	2101      	movs	r1, #1
   879da:	4620      	mov	r0, r4
   879dc:	f001 fe1a 	bl	89614 <__i2b>
   879e0:	4605      	mov	r5, r0
   879e2:	e023      	b.n	87a2c <_dtoa_r+0x604>
   879e4:	2301      	movs	r3, #1
   879e6:	eba8 0505 	sub.w	r5, r8, r5
   879ea:	930e      	str	r3, [sp, #56]	; 0x38
   879ec:	1e6b      	subs	r3, r5, #1
   879ee:	9306      	str	r3, [sp, #24]
   879f0:	f57f adc5 	bpl.w	8757e <_dtoa_r+0x156>
   879f4:	f1c5 0301 	rsb	r3, r5, #1
   879f8:	930b      	str	r3, [sp, #44]	; 0x2c
   879fa:	2300      	movs	r3, #0
   879fc:	9306      	str	r3, [sp, #24]
   879fe:	e5c0      	b.n	87582 <_dtoa_r+0x15a>
   87a00:	4658      	mov	r0, fp
   87a02:	f002 ff65 	bl	8a8d0 <__aeabi_i2d>
   87a06:	4632      	mov	r2, r6
   87a08:	463b      	mov	r3, r7
   87a0a:	f003 fa33 	bl	8ae74 <__aeabi_dcmpeq>
   87a0e:	2800      	cmp	r0, #0
   87a10:	f47f ad9c 	bne.w	8754c <_dtoa_r+0x124>
   87a14:	f10b 3bff 	add.w	fp, fp, #4294967295
   87a18:	e598      	b.n	8754c <_dtoa_r+0x124>
   87a1a:	4bc7      	ldr	r3, [pc, #796]	; (87d38 <_dtoa_r+0x910>)
   87a1c:	9303      	str	r3, [sp, #12]
   87a1e:	9803      	ldr	r0, [sp, #12]
   87a20:	b01b      	add	sp, #108	; 0x6c
   87a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a26:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   87a28:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   87a2c:	2e00      	cmp	r6, #0
   87a2e:	dd0c      	ble.n	87a4a <_dtoa_r+0x622>
   87a30:	9a06      	ldr	r2, [sp, #24]
   87a32:	2a00      	cmp	r2, #0
   87a34:	dd09      	ble.n	87a4a <_dtoa_r+0x622>
   87a36:	42b2      	cmp	r2, r6
   87a38:	4613      	mov	r3, r2
   87a3a:	bfa8      	it	ge
   87a3c:	4633      	movge	r3, r6
   87a3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87a40:	1af6      	subs	r6, r6, r3
   87a42:	1ac9      	subs	r1, r1, r3
   87a44:	1ad3      	subs	r3, r2, r3
   87a46:	910b      	str	r1, [sp, #44]	; 0x2c
   87a48:	9306      	str	r3, [sp, #24]
   87a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87a4c:	b1d3      	cbz	r3, 87a84 <_dtoa_r+0x65c>
   87a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87a50:	2b00      	cmp	r3, #0
   87a52:	f000 81a3 	beq.w	87d9c <_dtoa_r+0x974>
   87a56:	2f00      	cmp	r7, #0
   87a58:	dd10      	ble.n	87a7c <_dtoa_r+0x654>
   87a5a:	4629      	mov	r1, r5
   87a5c:	463a      	mov	r2, r7
   87a5e:	4620      	mov	r0, r4
   87a60:	f001 fe9e 	bl	897a0 <__pow5mult>
   87a64:	4652      	mov	r2, sl
   87a66:	4601      	mov	r1, r0
   87a68:	4605      	mov	r5, r0
   87a6a:	4620      	mov	r0, r4
   87a6c:	f001 fde8 	bl	89640 <__multiply>
   87a70:	4603      	mov	r3, r0
   87a72:	4651      	mov	r1, sl
   87a74:	4620      	mov	r0, r4
   87a76:	469a      	mov	sl, r3
   87a78:	f001 fd24 	bl	894c4 <_Bfree>
   87a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87a7e:	1bda      	subs	r2, r3, r7
   87a80:	f040 818d 	bne.w	87d9e <_dtoa_r+0x976>
   87a84:	2101      	movs	r1, #1
   87a86:	4620      	mov	r0, r4
   87a88:	f001 fdc4 	bl	89614 <__i2b>
   87a8c:	f1bb 0f00 	cmp.w	fp, #0
   87a90:	4680      	mov	r8, r0
   87a92:	f300 80b3 	bgt.w	87bfc <_dtoa_r+0x7d4>
   87a96:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a98:	2b01      	cmp	r3, #1
   87a9a:	f340 818a 	ble.w	87db2 <_dtoa_r+0x98a>
   87a9e:	f04f 0900 	mov.w	r9, #0
   87aa2:	2001      	movs	r0, #1
   87aa4:	f1bb 0f00 	cmp.w	fp, #0
   87aa8:	f040 80b4 	bne.w	87c14 <_dtoa_r+0x7ec>
   87aac:	9a06      	ldr	r2, [sp, #24]
   87aae:	4410      	add	r0, r2
   87ab0:	f010 001f 	ands.w	r0, r0, #31
   87ab4:	f000 8092 	beq.w	87bdc <_dtoa_r+0x7b4>
   87ab8:	f1c0 0320 	rsb	r3, r0, #32
   87abc:	2b04      	cmp	r3, #4
   87abe:	f340 83f9 	ble.w	882b4 <_dtoa_r+0xe8c>
   87ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87ac4:	f1c0 001c 	rsb	r0, r0, #28
   87ac8:	4403      	add	r3, r0
   87aca:	4402      	add	r2, r0
   87acc:	930b      	str	r3, [sp, #44]	; 0x2c
   87ace:	4406      	add	r6, r0
   87ad0:	9206      	str	r2, [sp, #24]
   87ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87ad4:	2b00      	cmp	r3, #0
   87ad6:	dd05      	ble.n	87ae4 <_dtoa_r+0x6bc>
   87ad8:	4651      	mov	r1, sl
   87ada:	461a      	mov	r2, r3
   87adc:	4620      	mov	r0, r4
   87ade:	f001 feab 	bl	89838 <__lshift>
   87ae2:	4682      	mov	sl, r0
   87ae4:	9b06      	ldr	r3, [sp, #24]
   87ae6:	2b00      	cmp	r3, #0
   87ae8:	dd05      	ble.n	87af6 <_dtoa_r+0x6ce>
   87aea:	4641      	mov	r1, r8
   87aec:	461a      	mov	r2, r3
   87aee:	4620      	mov	r0, r4
   87af0:	f001 fea2 	bl	89838 <__lshift>
   87af4:	4680      	mov	r8, r0
   87af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87af8:	2b00      	cmp	r3, #0
   87afa:	f040 8135 	bne.w	87d68 <_dtoa_r+0x940>
   87afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87b00:	2b00      	cmp	r3, #0
   87b02:	f340 811b 	ble.w	87d3c <_dtoa_r+0x914>
   87b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87b08:	2b00      	cmp	r3, #0
   87b0a:	f040 809a 	bne.w	87c42 <_dtoa_r+0x81a>
   87b0e:	9b07      	ldr	r3, [sp, #28]
   87b10:	3301      	adds	r3, #1
   87b12:	9307      	str	r3, [sp, #28]
   87b14:	2601      	movs	r6, #1
   87b16:	9f03      	ldr	r7, [sp, #12]
   87b18:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87b1c:	e007      	b.n	87b2e <_dtoa_r+0x706>
   87b1e:	4651      	mov	r1, sl
   87b20:	2300      	movs	r3, #0
   87b22:	220a      	movs	r2, #10
   87b24:	4620      	mov	r0, r4
   87b26:	f001 fcd7 	bl	894d8 <__multadd>
   87b2a:	4682      	mov	sl, r0
   87b2c:	3601      	adds	r6, #1
   87b2e:	4641      	mov	r1, r8
   87b30:	4650      	mov	r0, sl
   87b32:	f7ff fbe9 	bl	87308 <quorem>
   87b36:	454e      	cmp	r6, r9
   87b38:	f100 0330 	add.w	r3, r0, #48	; 0x30
   87b3c:	f807 3b01 	strb.w	r3, [r7], #1
   87b40:	dbed      	blt.n	87b1e <_dtoa_r+0x6f6>
   87b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87b44:	2600      	movs	r6, #0
   87b46:	2a00      	cmp	r2, #0
   87b48:	bfcc      	ite	gt
   87b4a:	4693      	movgt	fp, r2
   87b4c:	f04f 0b01 	movle.w	fp, #1
   87b50:	9a03      	ldr	r2, [sp, #12]
   87b52:	4493      	add	fp, r2
   87b54:	4651      	mov	r1, sl
   87b56:	2201      	movs	r2, #1
   87b58:	4620      	mov	r0, r4
   87b5a:	9304      	str	r3, [sp, #16]
   87b5c:	f001 fe6c 	bl	89838 <__lshift>
   87b60:	4641      	mov	r1, r8
   87b62:	4682      	mov	sl, r0
   87b64:	f001 fedc 	bl	89920 <__mcmp>
   87b68:	2800      	cmp	r0, #0
   87b6a:	f340 81a8 	ble.w	87ebe <_dtoa_r+0xa96>
   87b6e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   87b72:	9a03      	ldr	r2, [sp, #12]
   87b74:	f10b 3bff 	add.w	fp, fp, #4294967295
   87b78:	e004      	b.n	87b84 <_dtoa_r+0x75c>
   87b7a:	455a      	cmp	r2, fp
   87b7c:	f000 81e4 	beq.w	87f48 <_dtoa_r+0xb20>
   87b80:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   87b84:	2b39      	cmp	r3, #57	; 0x39
   87b86:	f10b 0901 	add.w	r9, fp, #1
   87b8a:	d0f6      	beq.n	87b7a <_dtoa_r+0x752>
   87b8c:	3301      	adds	r3, #1
   87b8e:	f88b 3000 	strb.w	r3, [fp]
   87b92:	4641      	mov	r1, r8
   87b94:	4620      	mov	r0, r4
   87b96:	f001 fc95 	bl	894c4 <_Bfree>
   87b9a:	b155      	cbz	r5, 87bb2 <_dtoa_r+0x78a>
   87b9c:	b12e      	cbz	r6, 87baa <_dtoa_r+0x782>
   87b9e:	42ae      	cmp	r6, r5
   87ba0:	d003      	beq.n	87baa <_dtoa_r+0x782>
   87ba2:	4631      	mov	r1, r6
   87ba4:	4620      	mov	r0, r4
   87ba6:	f001 fc8d 	bl	894c4 <_Bfree>
   87baa:	4629      	mov	r1, r5
   87bac:	4620      	mov	r0, r4
   87bae:	f001 fc89 	bl	894c4 <_Bfree>
   87bb2:	4651      	mov	r1, sl
   87bb4:	4620      	mov	r0, r4
   87bb6:	f001 fc85 	bl	894c4 <_Bfree>
   87bba:	2300      	movs	r3, #0
   87bbc:	f889 3000 	strb.w	r3, [r9]
   87bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87bc2:	461a      	mov	r2, r3
   87bc4:	9b07      	ldr	r3, [sp, #28]
   87bc6:	6013      	str	r3, [r2, #0]
   87bc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87bca:	2b00      	cmp	r3, #0
   87bcc:	f43f ac67 	beq.w	8749e <_dtoa_r+0x76>
   87bd0:	9803      	ldr	r0, [sp, #12]
   87bd2:	f8c3 9000 	str.w	r9, [r3]
   87bd6:	b01b      	add	sp, #108	; 0x6c
   87bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bdc:	201c      	movs	r0, #28
   87bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87be0:	4406      	add	r6, r0
   87be2:	4403      	add	r3, r0
   87be4:	930b      	str	r3, [sp, #44]	; 0x2c
   87be6:	9b06      	ldr	r3, [sp, #24]
   87be8:	4403      	add	r3, r0
   87bea:	9306      	str	r3, [sp, #24]
   87bec:	e771      	b.n	87ad2 <_dtoa_r+0x6aa>
   87bee:	2501      	movs	r5, #1
   87bf0:	e4de      	b.n	875b0 <_dtoa_r+0x188>
   87bf2:	f1c0 0020 	rsb	r0, r0, #32
   87bf6:	fa06 f000 	lsl.w	r0, r6, r0
   87bfa:	e474      	b.n	874e6 <_dtoa_r+0xbe>
   87bfc:	4601      	mov	r1, r0
   87bfe:	465a      	mov	r2, fp
   87c00:	4620      	mov	r0, r4
   87c02:	f001 fdcd 	bl	897a0 <__pow5mult>
   87c06:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87c08:	4680      	mov	r8, r0
   87c0a:	2b01      	cmp	r3, #1
   87c0c:	f340 81d1 	ble.w	87fb2 <_dtoa_r+0xb8a>
   87c10:	f04f 0900 	mov.w	r9, #0
   87c14:	f8d8 3010 	ldr.w	r3, [r8, #16]
   87c18:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   87c1c:	6918      	ldr	r0, [r3, #16]
   87c1e:	f001 fca9 	bl	89574 <__hi0bits>
   87c22:	f1c0 0020 	rsb	r0, r0, #32
   87c26:	e741      	b.n	87aac <_dtoa_r+0x684>
   87c28:	4629      	mov	r1, r5
   87c2a:	2300      	movs	r3, #0
   87c2c:	220a      	movs	r2, #10
   87c2e:	4620      	mov	r0, r4
   87c30:	f001 fc52 	bl	894d8 <__multadd>
   87c34:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87c36:	4605      	mov	r5, r0
   87c38:	2b00      	cmp	r3, #0
   87c3a:	f340 8315 	ble.w	88268 <_dtoa_r+0xe40>
   87c3e:	9707      	str	r7, [sp, #28]
   87c40:	930a      	str	r3, [sp, #40]	; 0x28
   87c42:	2e00      	cmp	r6, #0
   87c44:	f300 8122 	bgt.w	87e8c <_dtoa_r+0xa64>
   87c48:	f1b9 0f00 	cmp.w	r9, #0
   87c4c:	f040 81f9 	bne.w	88042 <_dtoa_r+0xc1a>
   87c50:	462f      	mov	r7, r5
   87c52:	9903      	ldr	r1, [sp, #12]
   87c54:	9b04      	ldr	r3, [sp, #16]
   87c56:	460e      	mov	r6, r1
   87c58:	f003 0201 	and.w	r2, r3, #1
   87c5c:	1e4b      	subs	r3, r1, #1
   87c5e:	9924      	ldr	r1, [sp, #144]	; 0x90
   87c60:	920c      	str	r2, [sp, #48]	; 0x30
   87c62:	430a      	orrs	r2, r1
   87c64:	920b      	str	r2, [sp, #44]	; 0x2c
   87c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87c68:	441a      	add	r2, r3
   87c6a:	920a      	str	r2, [sp, #40]	; 0x28
   87c6c:	4641      	mov	r1, r8
   87c6e:	4650      	mov	r0, sl
   87c70:	f7ff fb4a 	bl	87308 <quorem>
   87c74:	4629      	mov	r1, r5
   87c76:	4683      	mov	fp, r0
   87c78:	4650      	mov	r0, sl
   87c7a:	f001 fe51 	bl	89920 <__mcmp>
   87c7e:	463a      	mov	r2, r7
   87c80:	4641      	mov	r1, r8
   87c82:	4681      	mov	r9, r0
   87c84:	4620      	mov	r0, r4
   87c86:	f001 fe69 	bl	8995c <__mdiff>
   87c8a:	68c2      	ldr	r2, [r0, #12]
   87c8c:	4601      	mov	r1, r0
   87c8e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   87c92:	2a00      	cmp	r2, #0
   87c94:	d142      	bne.n	87d1c <_dtoa_r+0x8f4>
   87c96:	9006      	str	r0, [sp, #24]
   87c98:	4650      	mov	r0, sl
   87c9a:	9308      	str	r3, [sp, #32]
   87c9c:	f001 fe40 	bl	89920 <__mcmp>
   87ca0:	9906      	ldr	r1, [sp, #24]
   87ca2:	9004      	str	r0, [sp, #16]
   87ca4:	4620      	mov	r0, r4
   87ca6:	f001 fc0d 	bl	894c4 <_Bfree>
   87caa:	9a04      	ldr	r2, [sp, #16]
   87cac:	9b08      	ldr	r3, [sp, #32]
   87cae:	b91a      	cbnz	r2, 87cb8 <_dtoa_r+0x890>
   87cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87cb2:	2900      	cmp	r1, #0
   87cb4:	f000 82cb 	beq.w	8824e <_dtoa_r+0xe26>
   87cb8:	f1b9 0f00 	cmp.w	r9, #0
   87cbc:	f2c0 8185 	blt.w	87fca <_dtoa_r+0xba2>
   87cc0:	9924      	ldr	r1, [sp, #144]	; 0x90
   87cc2:	ea41 0909 	orr.w	r9, r1, r9
   87cc6:	990c      	ldr	r1, [sp, #48]	; 0x30
   87cc8:	ea51 0109 	orrs.w	r1, r1, r9
   87ccc:	f000 817d 	beq.w	87fca <_dtoa_r+0xba2>
   87cd0:	2a00      	cmp	r2, #0
   87cd2:	f300 81d1 	bgt.w	88078 <_dtoa_r+0xc50>
   87cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87cd8:	f106 0901 	add.w	r9, r6, #1
   87cdc:	4296      	cmp	r6, r2
   87cde:	46cb      	mov	fp, r9
   87ce0:	7033      	strb	r3, [r6, #0]
   87ce2:	f000 81e3 	beq.w	880ac <_dtoa_r+0xc84>
   87ce6:	4651      	mov	r1, sl
   87ce8:	2300      	movs	r3, #0
   87cea:	220a      	movs	r2, #10
   87cec:	4620      	mov	r0, r4
   87cee:	f001 fbf3 	bl	894d8 <__multadd>
   87cf2:	42bd      	cmp	r5, r7
   87cf4:	4682      	mov	sl, r0
   87cf6:	4629      	mov	r1, r5
   87cf8:	f04f 0300 	mov.w	r3, #0
   87cfc:	f04f 020a 	mov.w	r2, #10
   87d00:	4620      	mov	r0, r4
   87d02:	d012      	beq.n	87d2a <_dtoa_r+0x902>
   87d04:	f001 fbe8 	bl	894d8 <__multadd>
   87d08:	4639      	mov	r1, r7
   87d0a:	4605      	mov	r5, r0
   87d0c:	2300      	movs	r3, #0
   87d0e:	220a      	movs	r2, #10
   87d10:	4620      	mov	r0, r4
   87d12:	f001 fbe1 	bl	894d8 <__multadd>
   87d16:	464e      	mov	r6, r9
   87d18:	4607      	mov	r7, r0
   87d1a:	e7a7      	b.n	87c6c <_dtoa_r+0x844>
   87d1c:	4620      	mov	r0, r4
   87d1e:	9304      	str	r3, [sp, #16]
   87d20:	f001 fbd0 	bl	894c4 <_Bfree>
   87d24:	2201      	movs	r2, #1
   87d26:	9b04      	ldr	r3, [sp, #16]
   87d28:	e7c6      	b.n	87cb8 <_dtoa_r+0x890>
   87d2a:	f001 fbd5 	bl	894d8 <__multadd>
   87d2e:	464e      	mov	r6, r9
   87d30:	4605      	mov	r5, r0
   87d32:	4607      	mov	r7, r0
   87d34:	e79a      	b.n	87c6c <_dtoa_r+0x844>
   87d36:	bf00      	nop
   87d38:	0008b3c0 	.word	0x0008b3c0
   87d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87d3e:	2b02      	cmp	r3, #2
   87d40:	dc7e      	bgt.n	87e40 <_dtoa_r+0xa18>
   87d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87d44:	2b00      	cmp	r3, #0
   87d46:	f47f af7c 	bne.w	87c42 <_dtoa_r+0x81a>
   87d4a:	4641      	mov	r1, r8
   87d4c:	4650      	mov	r0, sl
   87d4e:	f7ff fadb 	bl	87308 <quorem>
   87d52:	9a07      	ldr	r2, [sp, #28]
   87d54:	f8dd b00c 	ldr.w	fp, [sp, #12]
   87d58:	f100 0330 	add.w	r3, r0, #48	; 0x30
   87d5c:	3201      	adds	r2, #1
   87d5e:	2600      	movs	r6, #0
   87d60:	9207      	str	r2, [sp, #28]
   87d62:	f80b 3b01 	strb.w	r3, [fp], #1
   87d66:	e6f5      	b.n	87b54 <_dtoa_r+0x72c>
   87d68:	4641      	mov	r1, r8
   87d6a:	4650      	mov	r0, sl
   87d6c:	f001 fdd8 	bl	89920 <__mcmp>
   87d70:	2800      	cmp	r0, #0
   87d72:	f6bf aec4 	bge.w	87afe <_dtoa_r+0x6d6>
   87d76:	4651      	mov	r1, sl
   87d78:	2300      	movs	r3, #0
   87d7a:	220a      	movs	r2, #10
   87d7c:	4620      	mov	r0, r4
   87d7e:	f001 fbab 	bl	894d8 <__multadd>
   87d82:	9b07      	ldr	r3, [sp, #28]
   87d84:	4682      	mov	sl, r0
   87d86:	1e5f      	subs	r7, r3, #1
   87d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87d8a:	2b00      	cmp	r3, #0
   87d8c:	f47f af4c 	bne.w	87c28 <_dtoa_r+0x800>
   87d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87d92:	2b00      	cmp	r3, #0
   87d94:	f340 8262 	ble.w	8825c <_dtoa_r+0xe34>
   87d98:	930a      	str	r3, [sp, #40]	; 0x28
   87d9a:	e6bb      	b.n	87b14 <_dtoa_r+0x6ec>
   87d9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87d9e:	4651      	mov	r1, sl
   87da0:	4620      	mov	r0, r4
   87da2:	f001 fcfd 	bl	897a0 <__pow5mult>
   87da6:	4682      	mov	sl, r0
   87da8:	e66c      	b.n	87a84 <_dtoa_r+0x65c>
   87daa:	4bba      	ldr	r3, [pc, #744]	; (88094 <_dtoa_r+0xc6c>)
   87dac:	9303      	str	r3, [sp, #12]
   87dae:	3303      	adds	r3, #3
   87db0:	e419      	b.n	875e6 <_dtoa_r+0x1be>
   87db2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   87db6:	2900      	cmp	r1, #0
   87db8:	f47f ae71 	bne.w	87a9e <_dtoa_r+0x676>
   87dbc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   87dc0:	2b00      	cmp	r3, #0
   87dc2:	f47f ae6c 	bne.w	87a9e <_dtoa_r+0x676>
   87dc6:	4bb4      	ldr	r3, [pc, #720]	; (88098 <_dtoa_r+0xc70>)
   87dc8:	4013      	ands	r3, r2
   87dca:	2b00      	cmp	r3, #0
   87dcc:	f000 822a 	beq.w	88224 <_dtoa_r+0xdfc>
   87dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87dd2:	f04f 0901 	mov.w	r9, #1
   87dd6:	3301      	adds	r3, #1
   87dd8:	930b      	str	r3, [sp, #44]	; 0x2c
   87dda:	9b06      	ldr	r3, [sp, #24]
   87ddc:	3301      	adds	r3, #1
   87dde:	9306      	str	r3, [sp, #24]
   87de0:	e65f      	b.n	87aa2 <_dtoa_r+0x67a>
   87de2:	2301      	movs	r3, #1
   87de4:	930c      	str	r3, [sp, #48]	; 0x30
   87de6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87de8:	9a07      	ldr	r2, [sp, #28]
   87dea:	4413      	add	r3, r2
   87dec:	9312      	str	r3, [sp, #72]	; 0x48
   87dee:	3301      	adds	r3, #1
   87df0:	2b01      	cmp	r3, #1
   87df2:	461e      	mov	r6, r3
   87df4:	bfb8      	it	lt
   87df6:	2601      	movlt	r6, #1
   87df8:	930a      	str	r3, [sp, #40]	; 0x28
   87dfa:	2100      	movs	r1, #0
   87dfc:	2e17      	cmp	r6, #23
   87dfe:	6461      	str	r1, [r4, #68]	; 0x44
   87e00:	f77f ac43 	ble.w	8768a <_dtoa_r+0x262>
   87e04:	2201      	movs	r2, #1
   87e06:	2304      	movs	r3, #4
   87e08:	005b      	lsls	r3, r3, #1
   87e0a:	f103 0014 	add.w	r0, r3, #20
   87e0e:	42b0      	cmp	r0, r6
   87e10:	4611      	mov	r1, r2
   87e12:	f102 0201 	add.w	r2, r2, #1
   87e16:	d9f7      	bls.n	87e08 <_dtoa_r+0x9e0>
   87e18:	6461      	str	r1, [r4, #68]	; 0x44
   87e1a:	e436      	b.n	8768a <_dtoa_r+0x262>
   87e1c:	2301      	movs	r3, #1
   87e1e:	930c      	str	r3, [sp, #48]	; 0x30
   87e20:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87e22:	2b00      	cmp	r3, #0
   87e24:	dd46      	ble.n	87eb4 <_dtoa_r+0xa8c>
   87e26:	461e      	mov	r6, r3
   87e28:	9312      	str	r3, [sp, #72]	; 0x48
   87e2a:	930a      	str	r3, [sp, #40]	; 0x28
   87e2c:	e7e5      	b.n	87dfa <_dtoa_r+0x9d2>
   87e2e:	2300      	movs	r3, #0
   87e30:	930c      	str	r3, [sp, #48]	; 0x30
   87e32:	e7d8      	b.n	87de6 <_dtoa_r+0x9be>
   87e34:	2300      	movs	r3, #0
   87e36:	930c      	str	r3, [sp, #48]	; 0x30
   87e38:	e7f2      	b.n	87e20 <_dtoa_r+0x9f8>
   87e3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87e3c:	9707      	str	r7, [sp, #28]
   87e3e:	930a      	str	r3, [sp, #40]	; 0x28
   87e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87e42:	2b00      	cmp	r3, #0
   87e44:	f47f ad40 	bne.w	878c8 <_dtoa_r+0x4a0>
   87e48:	4641      	mov	r1, r8
   87e4a:	2205      	movs	r2, #5
   87e4c:	4620      	mov	r0, r4
   87e4e:	f001 fb43 	bl	894d8 <__multadd>
   87e52:	4680      	mov	r8, r0
   87e54:	4650      	mov	r0, sl
   87e56:	4641      	mov	r1, r8
   87e58:	f001 fd62 	bl	89920 <__mcmp>
   87e5c:	2800      	cmp	r0, #0
   87e5e:	f77f ad33 	ble.w	878c8 <_dtoa_r+0x4a0>
   87e62:	9f03      	ldr	r7, [sp, #12]
   87e64:	2231      	movs	r2, #49	; 0x31
   87e66:	463b      	mov	r3, r7
   87e68:	9e07      	ldr	r6, [sp, #28]
   87e6a:	f803 2b01 	strb.w	r2, [r3], #1
   87e6e:	3601      	adds	r6, #1
   87e70:	9303      	str	r3, [sp, #12]
   87e72:	4641      	mov	r1, r8
   87e74:	4620      	mov	r0, r4
   87e76:	f001 fb25 	bl	894c4 <_Bfree>
   87e7a:	1c73      	adds	r3, r6, #1
   87e7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   87e80:	9307      	str	r3, [sp, #28]
   87e82:	9703      	str	r7, [sp, #12]
   87e84:	2d00      	cmp	r5, #0
   87e86:	f47f ae90 	bne.w	87baa <_dtoa_r+0x782>
   87e8a:	e692      	b.n	87bb2 <_dtoa_r+0x78a>
   87e8c:	4629      	mov	r1, r5
   87e8e:	4632      	mov	r2, r6
   87e90:	4620      	mov	r0, r4
   87e92:	f001 fcd1 	bl	89838 <__lshift>
   87e96:	4605      	mov	r5, r0
   87e98:	e6d6      	b.n	87c48 <_dtoa_r+0x820>
   87e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87e9c:	970d      	str	r7, [sp, #52]	; 0x34
   87e9e:	1afb      	subs	r3, r7, r3
   87ea0:	449b      	add	fp, r3
   87ea2:	2700      	movs	r7, #0
   87ea4:	e58c      	b.n	879c0 <_dtoa_r+0x598>
   87ea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   87eaa:	f04f 0902 	mov.w	r9, #2
   87eae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   87eb2:	e417      	b.n	876e4 <_dtoa_r+0x2bc>
   87eb4:	2301      	movs	r3, #1
   87eb6:	9325      	str	r3, [sp, #148]	; 0x94
   87eb8:	930a      	str	r3, [sp, #40]	; 0x28
   87eba:	f7ff bbe2 	b.w	87682 <_dtoa_r+0x25a>
   87ebe:	d103      	bne.n	87ec8 <_dtoa_r+0xaa0>
   87ec0:	9b04      	ldr	r3, [sp, #16]
   87ec2:	07db      	lsls	r3, r3, #31
   87ec4:	f53f ae53 	bmi.w	87b6e <_dtoa_r+0x746>
   87ec8:	46d9      	mov	r9, fp
   87eca:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   87ece:	2b30      	cmp	r3, #48	; 0x30
   87ed0:	d0fa      	beq.n	87ec8 <_dtoa_r+0xaa0>
   87ed2:	e65e      	b.n	87b92 <_dtoa_r+0x76a>
   87ed4:	4648      	mov	r0, r9
   87ed6:	f002 fcfb 	bl	8a8d0 <__aeabi_i2d>
   87eda:	4632      	mov	r2, r6
   87edc:	463b      	mov	r3, r7
   87ede:	f002 fd61 	bl	8a9a4 <__aeabi_dmul>
   87ee2:	2200      	movs	r2, #0
   87ee4:	4b6d      	ldr	r3, [pc, #436]	; (8809c <_dtoa_r+0xc74>)
   87ee6:	f002 fba7 	bl	8a638 <__adddf3>
   87eea:	4680      	mov	r8, r0
   87eec:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   87ef0:	4630      	mov	r0, r6
   87ef2:	4639      	mov	r1, r7
   87ef4:	2200      	movs	r2, #0
   87ef6:	4b6a      	ldr	r3, [pc, #424]	; (880a0 <_dtoa_r+0xc78>)
   87ef8:	f002 fb9c 	bl	8a634 <__aeabi_dsub>
   87efc:	4642      	mov	r2, r8
   87efe:	464b      	mov	r3, r9
   87f00:	4606      	mov	r6, r0
   87f02:	460f      	mov	r7, r1
   87f04:	f002 ffde 	bl	8aec4 <__aeabi_dcmpgt>
   87f08:	2800      	cmp	r0, #0
   87f0a:	f040 8187 	bne.w	8821c <_dtoa_r+0xdf4>
   87f0e:	4642      	mov	r2, r8
   87f10:	4630      	mov	r0, r6
   87f12:	4639      	mov	r1, r7
   87f14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   87f18:	f002 ffb6 	bl	8ae88 <__aeabi_dcmplt>
   87f1c:	2800      	cmp	r0, #0
   87f1e:	f43f acaa 	beq.w	87876 <_dtoa_r+0x44e>
   87f22:	f04f 0800 	mov.w	r8, #0
   87f26:	4645      	mov	r5, r8
   87f28:	e4ce      	b.n	878c8 <_dtoa_r+0x4a0>
   87f2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87f2c:	2a00      	cmp	r2, #0
   87f2e:	f000 80c3 	beq.w	880b8 <_dtoa_r+0xc90>
   87f32:	9a06      	ldr	r2, [sp, #24]
   87f34:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87f38:	441a      	add	r2, r3
   87f3a:	9206      	str	r2, [sp, #24]
   87f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87f3e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   87f40:	4616      	mov	r6, r2
   87f42:	441a      	add	r2, r3
   87f44:	920b      	str	r2, [sp, #44]	; 0x2c
   87f46:	e547      	b.n	879d8 <_dtoa_r+0x5b0>
   87f48:	2331      	movs	r3, #49	; 0x31
   87f4a:	9a07      	ldr	r2, [sp, #28]
   87f4c:	3201      	adds	r2, #1
   87f4e:	9207      	str	r2, [sp, #28]
   87f50:	9a03      	ldr	r2, [sp, #12]
   87f52:	7013      	strb	r3, [r2, #0]
   87f54:	e61d      	b.n	87b92 <_dtoa_r+0x76a>
   87f56:	f000 814b 	beq.w	881f0 <_dtoa_r+0xdc8>
   87f5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87f5e:	9b07      	ldr	r3, [sp, #28]
   87f60:	425d      	negs	r5, r3
   87f62:	4b50      	ldr	r3, [pc, #320]	; (880a4 <_dtoa_r+0xc7c>)
   87f64:	f005 020f 	and.w	r2, r5, #15
   87f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87f70:	f002 fd18 	bl	8a9a4 <__aeabi_dmul>
   87f74:	112d      	asrs	r5, r5, #4
   87f76:	4606      	mov	r6, r0
   87f78:	460f      	mov	r7, r1
   87f7a:	f000 817d 	beq.w	88278 <_dtoa_r+0xe50>
   87f7e:	2300      	movs	r3, #0
   87f80:	f04f 0902 	mov.w	r9, #2
   87f84:	f8df 8120 	ldr.w	r8, [pc, #288]	; 880a8 <_dtoa_r+0xc80>
   87f88:	07ea      	lsls	r2, r5, #31
   87f8a:	d505      	bpl.n	87f98 <_dtoa_r+0xb70>
   87f8c:	e9d8 2300 	ldrd	r2, r3, [r8]
   87f90:	f002 fd08 	bl	8a9a4 <__aeabi_dmul>
   87f94:	2301      	movs	r3, #1
   87f96:	4499      	add	r9, r3
   87f98:	106d      	asrs	r5, r5, #1
   87f9a:	f108 0808 	add.w	r8, r8, #8
   87f9e:	d1f3      	bne.n	87f88 <_dtoa_r+0xb60>
   87fa0:	2b00      	cmp	r3, #0
   87fa2:	f43f abba 	beq.w	8771a <_dtoa_r+0x2f2>
   87fa6:	4606      	mov	r6, r0
   87fa8:	460f      	mov	r7, r1
   87faa:	f7ff bbb6 	b.w	8771a <_dtoa_r+0x2f2>
   87fae:	900e      	str	r0, [sp, #56]	; 0x38
   87fb0:	e520      	b.n	879f4 <_dtoa_r+0x5cc>
   87fb2:	9b04      	ldr	r3, [sp, #16]
   87fb4:	2b00      	cmp	r3, #0
   87fb6:	f47f ae2b 	bne.w	87c10 <_dtoa_r+0x7e8>
   87fba:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   87fbe:	f3c2 0313 	ubfx	r3, r2, #0, #20
   87fc2:	2b00      	cmp	r3, #0
   87fc4:	f43f aeff 	beq.w	87dc6 <_dtoa_r+0x99e>
   87fc8:	e622      	b.n	87c10 <_dtoa_r+0x7e8>
   87fca:	2a00      	cmp	r2, #0
   87fcc:	dd12      	ble.n	87ff4 <_dtoa_r+0xbcc>
   87fce:	4651      	mov	r1, sl
   87fd0:	2201      	movs	r2, #1
   87fd2:	4620      	mov	r0, r4
   87fd4:	9304      	str	r3, [sp, #16]
   87fd6:	f001 fc2f 	bl	89838 <__lshift>
   87fda:	4641      	mov	r1, r8
   87fdc:	4682      	mov	sl, r0
   87fde:	f001 fc9f 	bl	89920 <__mcmp>
   87fe2:	2800      	cmp	r0, #0
   87fe4:	9b04      	ldr	r3, [sp, #16]
   87fe6:	f340 812c 	ble.w	88242 <_dtoa_r+0xe1a>
   87fea:	2b39      	cmp	r3, #57	; 0x39
   87fec:	f000 810c 	beq.w	88208 <_dtoa_r+0xde0>
   87ff0:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   87ff4:	46b1      	mov	r9, r6
   87ff6:	f809 3b01 	strb.w	r3, [r9], #1
   87ffa:	9b07      	ldr	r3, [sp, #28]
   87ffc:	462e      	mov	r6, r5
   87ffe:	3301      	adds	r3, #1
   88000:	463d      	mov	r5, r7
   88002:	9307      	str	r3, [sp, #28]
   88004:	e5c5      	b.n	87b92 <_dtoa_r+0x76a>
   88006:	4655      	mov	r5, sl
   88008:	9c08      	ldr	r4, [sp, #32]
   8800a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8800e:	4602      	mov	r2, r0
   88010:	460b      	mov	r3, r1
   88012:	f002 fb11 	bl	8a638 <__adddf3>
   88016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8801a:	4606      	mov	r6, r0
   8801c:	460f      	mov	r7, r1
   8801e:	f002 ff51 	bl	8aec4 <__aeabi_dcmpgt>
   88022:	b960      	cbnz	r0, 8803e <_dtoa_r+0xc16>
   88024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88028:	4630      	mov	r0, r6
   8802a:	4639      	mov	r1, r7
   8802c:	f002 ff22 	bl	8ae74 <__aeabi_dcmpeq>
   88030:	2800      	cmp	r0, #0
   88032:	f43f aca3 	beq.w	8797c <_dtoa_r+0x554>
   88036:	f018 0f01 	tst.w	r8, #1
   8803a:	f43f ac9f 	beq.w	8797c <_dtoa_r+0x554>
   8803e:	9a03      	ldr	r2, [sp, #12]
   88040:	e40a      	b.n	87858 <_dtoa_r+0x430>
   88042:	4620      	mov	r0, r4
   88044:	6869      	ldr	r1, [r5, #4]
   88046:	f001 fa17 	bl	89478 <_Balloc>
   8804a:	4606      	mov	r6, r0
   8804c:	2800      	cmp	r0, #0
   8804e:	f000 8117 	beq.w	88280 <_dtoa_r+0xe58>
   88052:	692b      	ldr	r3, [r5, #16]
   88054:	f105 010c 	add.w	r1, r5, #12
   88058:	3302      	adds	r3, #2
   8805a:	009a      	lsls	r2, r3, #2
   8805c:	300c      	adds	r0, #12
   8805e:	f7fc f9fb 	bl	84458 <memcpy>
   88062:	4631      	mov	r1, r6
   88064:	2201      	movs	r2, #1
   88066:	4620      	mov	r0, r4
   88068:	f001 fbe6 	bl	89838 <__lshift>
   8806c:	4607      	mov	r7, r0
   8806e:	e5f0      	b.n	87c52 <_dtoa_r+0x82a>
   88070:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   88074:	1a9e      	subs	r6, r3, r2
   88076:	e4af      	b.n	879d8 <_dtoa_r+0x5b0>
   88078:	2b39      	cmp	r3, #57	; 0x39
   8807a:	f000 80c5 	beq.w	88208 <_dtoa_r+0xde0>
   8807e:	46b1      	mov	r9, r6
   88080:	3301      	adds	r3, #1
   88082:	f809 3b01 	strb.w	r3, [r9], #1
   88086:	9b07      	ldr	r3, [sp, #28]
   88088:	462e      	mov	r6, r5
   8808a:	3301      	adds	r3, #1
   8808c:	463d      	mov	r5, r7
   8808e:	9307      	str	r3, [sp, #28]
   88090:	e57f      	b.n	87b92 <_dtoa_r+0x76a>
   88092:	bf00      	nop
   88094:	0008b404 	.word	0x0008b404
   88098:	7ff00000 	.word	0x7ff00000
   8809c:	401c0000 	.word	0x401c0000
   880a0:	40140000 	.word	0x40140000
   880a4:	0008b560 	.word	0x0008b560
   880a8:	0008b538 	.word	0x0008b538
   880ac:	9a07      	ldr	r2, [sp, #28]
   880ae:	462e      	mov	r6, r5
   880b0:	3201      	adds	r2, #1
   880b2:	463d      	mov	r5, r7
   880b4:	9207      	str	r2, [sp, #28]
   880b6:	e54d      	b.n	87b54 <_dtoa_r+0x72c>
   880b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   880ba:	9a06      	ldr	r2, [sp, #24]
   880bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   880be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   880c2:	441a      	add	r2, r3
   880c4:	9206      	str	r2, [sp, #24]
   880c6:	460a      	mov	r2, r1
   880c8:	441a      	add	r2, r3
   880ca:	460e      	mov	r6, r1
   880cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   880ce:	920b      	str	r2, [sp, #44]	; 0x2c
   880d0:	e482      	b.n	879d8 <_dtoa_r+0x5b0>
   880d2:	9810      	ldr	r0, [sp, #64]	; 0x40
   880d4:	497f      	ldr	r1, [pc, #508]	; (882d4 <_dtoa_r+0xeac>)
   880d6:	4642      	mov	r2, r8
   880d8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   880dc:	464b      	mov	r3, r9
   880de:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   880e2:	f002 fc5f 	bl	8a9a4 <__aeabi_dmul>
   880e6:	4602      	mov	r2, r0
   880e8:	460b      	mov	r3, r1
   880ea:	4630      	mov	r0, r6
   880ec:	4639      	mov	r1, r7
   880ee:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   880f2:	f002 ff07 	bl	8af04 <__aeabi_d2iz>
   880f6:	4680      	mov	r8, r0
   880f8:	f002 fbea 	bl	8a8d0 <__aeabi_i2d>
   880fc:	460b      	mov	r3, r1
   880fe:	4602      	mov	r2, r0
   88100:	4639      	mov	r1, r7
   88102:	4630      	mov	r0, r6
   88104:	f002 fa96 	bl	8a634 <__aeabi_dsub>
   88108:	4606      	mov	r6, r0
   8810a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8810c:	9d03      	ldr	r5, [sp, #12]
   8810e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   88112:	2801      	cmp	r0, #1
   88114:	460f      	mov	r7, r1
   88116:	f805 3b01 	strb.w	r3, [r5], #1
   8811a:	d01e      	beq.n	8815a <_dtoa_r+0xd32>
   8811c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8811e:	9a03      	ldr	r2, [sp, #12]
   88120:	4413      	add	r3, r2
   88122:	4698      	mov	r8, r3
   88124:	2200      	movs	r2, #0
   88126:	4b6c      	ldr	r3, [pc, #432]	; (882d8 <_dtoa_r+0xeb0>)
   88128:	4630      	mov	r0, r6
   8812a:	4639      	mov	r1, r7
   8812c:	f002 fc3a 	bl	8a9a4 <__aeabi_dmul>
   88130:	460f      	mov	r7, r1
   88132:	4606      	mov	r6, r0
   88134:	f002 fee6 	bl	8af04 <__aeabi_d2iz>
   88138:	4681      	mov	r9, r0
   8813a:	f002 fbc9 	bl	8a8d0 <__aeabi_i2d>
   8813e:	4602      	mov	r2, r0
   88140:	460b      	mov	r3, r1
   88142:	4630      	mov	r0, r6
   88144:	4639      	mov	r1, r7
   88146:	f002 fa75 	bl	8a634 <__aeabi_dsub>
   8814a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8814e:	f805 9b01 	strb.w	r9, [r5], #1
   88152:	4545      	cmp	r5, r8
   88154:	4606      	mov	r6, r0
   88156:	460f      	mov	r7, r1
   88158:	d1e4      	bne.n	88124 <_dtoa_r+0xcfc>
   8815a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8815e:	2200      	movs	r2, #0
   88160:	4b5e      	ldr	r3, [pc, #376]	; (882dc <_dtoa_r+0xeb4>)
   88162:	4640      	mov	r0, r8
   88164:	4649      	mov	r1, r9
   88166:	f002 fa67 	bl	8a638 <__adddf3>
   8816a:	4632      	mov	r2, r6
   8816c:	463b      	mov	r3, r7
   8816e:	f002 fe8b 	bl	8ae88 <__aeabi_dcmplt>
   88172:	2800      	cmp	r0, #0
   88174:	d158      	bne.n	88228 <_dtoa_r+0xe00>
   88176:	4642      	mov	r2, r8
   88178:	464b      	mov	r3, r9
   8817a:	2000      	movs	r0, #0
   8817c:	4957      	ldr	r1, [pc, #348]	; (882dc <_dtoa_r+0xeb4>)
   8817e:	f002 fa59 	bl	8a634 <__aeabi_dsub>
   88182:	4632      	mov	r2, r6
   88184:	463b      	mov	r3, r7
   88186:	f002 fe9d 	bl	8aec4 <__aeabi_dcmpgt>
   8818a:	2800      	cmp	r0, #0
   8818c:	f43f ab73 	beq.w	87876 <_dtoa_r+0x44e>
   88190:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   88194:	46a9      	mov	r9, r5
   88196:	2b30      	cmp	r3, #48	; 0x30
   88198:	f105 35ff 	add.w	r5, r5, #4294967295
   8819c:	d0f8      	beq.n	88190 <_dtoa_r+0xd68>
   8819e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   881a0:	3301      	adds	r3, #1
   881a2:	9307      	str	r3, [sp, #28]
   881a4:	e505      	b.n	87bb2 <_dtoa_r+0x78a>
   881a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   881a8:	2b00      	cmp	r3, #0
   881aa:	f43f ae93 	beq.w	87ed4 <_dtoa_r+0xaac>
   881ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
   881b0:	2d00      	cmp	r5, #0
   881b2:	f77f ab60 	ble.w	87876 <_dtoa_r+0x44e>
   881b6:	2200      	movs	r2, #0
   881b8:	4b47      	ldr	r3, [pc, #284]	; (882d8 <_dtoa_r+0xeb0>)
   881ba:	4630      	mov	r0, r6
   881bc:	4639      	mov	r1, r7
   881be:	f002 fbf1 	bl	8a9a4 <__aeabi_dmul>
   881c2:	4606      	mov	r6, r0
   881c4:	460f      	mov	r7, r1
   881c6:	f109 0001 	add.w	r0, r9, #1
   881ca:	f002 fb81 	bl	8a8d0 <__aeabi_i2d>
   881ce:	4632      	mov	r2, r6
   881d0:	463b      	mov	r3, r7
   881d2:	f002 fbe7 	bl	8a9a4 <__aeabi_dmul>
   881d6:	2200      	movs	r2, #0
   881d8:	4b41      	ldr	r3, [pc, #260]	; (882e0 <_dtoa_r+0xeb8>)
   881da:	f002 fa2d 	bl	8a638 <__adddf3>
   881de:	9a07      	ldr	r2, [sp, #28]
   881e0:	4680      	mov	r8, r0
   881e2:	3a01      	subs	r2, #1
   881e4:	9213      	str	r2, [sp, #76]	; 0x4c
   881e6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   881ea:	9510      	str	r5, [sp, #64]	; 0x40
   881ec:	f7ff bab6 	b.w	8775c <_dtoa_r+0x334>
   881f0:	f04f 0902 	mov.w	r9, #2
   881f4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   881f8:	f7ff ba8f 	b.w	8771a <_dtoa_r+0x2f2>
   881fc:	9b07      	ldr	r3, [sp, #28]
   881fe:	3301      	adds	r3, #1
   88200:	9307      	str	r3, [sp, #28]
   88202:	2331      	movs	r3, #49	; 0x31
   88204:	f7ff bb2f 	b.w	87866 <_dtoa_r+0x43e>
   88208:	46b3      	mov	fp, r6
   8820a:	2339      	movs	r3, #57	; 0x39
   8820c:	9a07      	ldr	r2, [sp, #28]
   8820e:	462e      	mov	r6, r5
   88210:	3201      	adds	r2, #1
   88212:	463d      	mov	r5, r7
   88214:	9207      	str	r2, [sp, #28]
   88216:	f80b 3b01 	strb.w	r3, [fp], #1
   8821a:	e4aa      	b.n	87b72 <_dtoa_r+0x74a>
   8821c:	f04f 0800 	mov.w	r8, #0
   88220:	4645      	mov	r5, r8
   88222:	e61e      	b.n	87e62 <_dtoa_r+0xa3a>
   88224:	4699      	mov	r9, r3
   88226:	e43c      	b.n	87aa2 <_dtoa_r+0x67a>
   88228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8822a:	9a03      	ldr	r2, [sp, #12]
   8822c:	9307      	str	r3, [sp, #28]
   8822e:	f7ff bb13 	b.w	87858 <_dtoa_r+0x430>
   88232:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   88236:	9c10      	ldr	r4, [sp, #64]	; 0x40
   88238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8823a:	46a9      	mov	r9, r5
   8823c:	3301      	adds	r3, #1
   8823e:	9307      	str	r3, [sp, #28]
   88240:	e4b7      	b.n	87bb2 <_dtoa_r+0x78a>
   88242:	f47f aed7 	bne.w	87ff4 <_dtoa_r+0xbcc>
   88246:	07da      	lsls	r2, r3, #31
   88248:	f57f aed4 	bpl.w	87ff4 <_dtoa_r+0xbcc>
   8824c:	e6cd      	b.n	87fea <_dtoa_r+0xbc2>
   8824e:	2b39      	cmp	r3, #57	; 0x39
   88250:	d0da      	beq.n	88208 <_dtoa_r+0xde0>
   88252:	f1b9 0f00 	cmp.w	r9, #0
   88256:	f73f aecb 	bgt.w	87ff0 <_dtoa_r+0xbc8>
   8825a:	e6cb      	b.n	87ff4 <_dtoa_r+0xbcc>
   8825c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8825e:	2b02      	cmp	r3, #2
   88260:	f73f adeb 	bgt.w	87e3a <_dtoa_r+0xa12>
   88264:	9707      	str	r7, [sp, #28]
   88266:	e570      	b.n	87d4a <_dtoa_r+0x922>
   88268:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8826a:	2b02      	cmp	r3, #2
   8826c:	f73f ade5 	bgt.w	87e3a <_dtoa_r+0xa12>
   88270:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88272:	9707      	str	r7, [sp, #28]
   88274:	930a      	str	r3, [sp, #40]	; 0x28
   88276:	e4e4      	b.n	87c42 <_dtoa_r+0x81a>
   88278:	f04f 0902 	mov.w	r9, #2
   8827c:	f7ff ba4d 	b.w	8771a <_dtoa_r+0x2f2>
   88280:	4602      	mov	r2, r0
   88282:	f240 21ea 	movw	r1, #746	; 0x2ea
   88286:	4b17      	ldr	r3, [pc, #92]	; (882e4 <_dtoa_r+0xebc>)
   88288:	4817      	ldr	r0, [pc, #92]	; (882e8 <_dtoa_r+0xec0>)
   8828a:	f002 f84d 	bl	8a328 <__assert_func>
   8828e:	4b17      	ldr	r3, [pc, #92]	; (882ec <_dtoa_r+0xec4>)
   88290:	9303      	str	r3, [sp, #12]
   88292:	f7ff b904 	b.w	8749e <_dtoa_r+0x76>
   88296:	2500      	movs	r5, #0
   88298:	4620      	mov	r0, r4
   8829a:	4629      	mov	r1, r5
   8829c:	6465      	str	r5, [r4, #68]	; 0x44
   8829e:	f001 f8eb 	bl	89478 <_Balloc>
   882a2:	9003      	str	r0, [sp, #12]
   882a4:	b958      	cbnz	r0, 882be <_dtoa_r+0xe96>
   882a6:	2200      	movs	r2, #0
   882a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   882ac:	4b0d      	ldr	r3, [pc, #52]	; (882e4 <_dtoa_r+0xebc>)
   882ae:	480e      	ldr	r0, [pc, #56]	; (882e8 <_dtoa_r+0xec0>)
   882b0:	f002 f83a 	bl	8a328 <__assert_func>
   882b4:	f43f ac0d 	beq.w	87ad2 <_dtoa_r+0x6aa>
   882b8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   882bc:	e48f      	b.n	87bde <_dtoa_r+0x7b6>
   882be:	f04f 33ff 	mov.w	r3, #4294967295
   882c2:	9312      	str	r3, [sp, #72]	; 0x48
   882c4:	930a      	str	r3, [sp, #40]	; 0x28
   882c6:	2301      	movs	r3, #1
   882c8:	9a03      	ldr	r2, [sp, #12]
   882ca:	9525      	str	r5, [sp, #148]	; 0x94
   882cc:	6422      	str	r2, [r4, #64]	; 0x40
   882ce:	930c      	str	r3, [sp, #48]	; 0x30
   882d0:	f7ff bad1 	b.w	87876 <_dtoa_r+0x44e>
   882d4:	0008b560 	.word	0x0008b560
   882d8:	40240000 	.word	0x40240000
   882dc:	3fe00000 	.word	0x3fe00000
   882e0:	401c0000 	.word	0x401c0000
   882e4:	0008b414 	.word	0x0008b414
   882e8:	0008b428 	.word	0x0008b428
   882ec:	0008b408 	.word	0x0008b408

000882f0 <__sflush_r>:
   882f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   882f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   882f8:	460d      	mov	r5, r1
   882fa:	0711      	lsls	r1, r2, #28
   882fc:	4680      	mov	r8, r0
   882fe:	d447      	bmi.n	88390 <__sflush_r+0xa0>
   88300:	686b      	ldr	r3, [r5, #4]
   88302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   88306:	2b00      	cmp	r3, #0
   88308:	81aa      	strh	r2, [r5, #12]
   8830a:	dd5e      	ble.n	883ca <__sflush_r+0xda>
   8830c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8830e:	2c00      	cmp	r4, #0
   88310:	d058      	beq.n	883c4 <__sflush_r+0xd4>
   88312:	2300      	movs	r3, #0
   88314:	f8d8 6000 	ldr.w	r6, [r8]
   88318:	f8c8 3000 	str.w	r3, [r8]
   8831c:	b293      	uxth	r3, r2
   8831e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   88322:	d156      	bne.n	883d2 <__sflush_r+0xe2>
   88324:	2301      	movs	r3, #1
   88326:	4640      	mov	r0, r8
   88328:	69e9      	ldr	r1, [r5, #28]
   8832a:	47a0      	blx	r4
   8832c:	1c43      	adds	r3, r0, #1
   8832e:	d067      	beq.n	88400 <__sflush_r+0x110>
   88330:	89ab      	ldrh	r3, [r5, #12]
   88332:	6aac      	ldr	r4, [r5, #40]	; 0x28
   88334:	075f      	lsls	r7, r3, #29
   88336:	d505      	bpl.n	88344 <__sflush_r+0x54>
   88338:	686a      	ldr	r2, [r5, #4]
   8833a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8833c:	1a80      	subs	r0, r0, r2
   8833e:	b10b      	cbz	r3, 88344 <__sflush_r+0x54>
   88340:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   88342:	1ac0      	subs	r0, r0, r3
   88344:	4602      	mov	r2, r0
   88346:	69e9      	ldr	r1, [r5, #28]
   88348:	2300      	movs	r3, #0
   8834a:	4640      	mov	r0, r8
   8834c:	47a0      	blx	r4
   8834e:	1c41      	adds	r1, r0, #1
   88350:	d141      	bne.n	883d6 <__sflush_r+0xe6>
   88352:	f8d8 3000 	ldr.w	r3, [r8]
   88356:	2b00      	cmp	r3, #0
   88358:	d03d      	beq.n	883d6 <__sflush_r+0xe6>
   8835a:	2b1d      	cmp	r3, #29
   8835c:	d001      	beq.n	88362 <__sflush_r+0x72>
   8835e:	2b16      	cmp	r3, #22
   88360:	d156      	bne.n	88410 <__sflush_r+0x120>
   88362:	2100      	movs	r1, #0
   88364:	692a      	ldr	r2, [r5, #16]
   88366:	89ab      	ldrh	r3, [r5, #12]
   88368:	e9c5 2100 	strd	r2, r1, [r5]
   8836c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   88370:	81ab      	strh	r3, [r5, #12]
   88372:	6b29      	ldr	r1, [r5, #48]	; 0x30
   88374:	f8c8 6000 	str.w	r6, [r8]
   88378:	b321      	cbz	r1, 883c4 <__sflush_r+0xd4>
   8837a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8837e:	4299      	cmp	r1, r3
   88380:	d002      	beq.n	88388 <__sflush_r+0x98>
   88382:	4640      	mov	r0, r8
   88384:	f000 f9cc 	bl	88720 <_free_r>
   88388:	2000      	movs	r0, #0
   8838a:	6328      	str	r0, [r5, #48]	; 0x30
   8838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88390:	692f      	ldr	r7, [r5, #16]
   88392:	b1bf      	cbz	r7, 883c4 <__sflush_r+0xd4>
   88394:	b293      	uxth	r3, r2
   88396:	079a      	lsls	r2, r3, #30
   88398:	bf18      	it	ne
   8839a:	2300      	movne	r3, #0
   8839c:	682e      	ldr	r6, [r5, #0]
   8839e:	bf08      	it	eq
   883a0:	696b      	ldreq	r3, [r5, #20]
   883a2:	602f      	str	r7, [r5, #0]
   883a4:	1bf6      	subs	r6, r6, r7
   883a6:	60ab      	str	r3, [r5, #8]
   883a8:	e00a      	b.n	883c0 <__sflush_r+0xd0>
   883aa:	4633      	mov	r3, r6
   883ac:	463a      	mov	r2, r7
   883ae:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   883b0:	4640      	mov	r0, r8
   883b2:	69e9      	ldr	r1, [r5, #28]
   883b4:	47a0      	blx	r4
   883b6:	1e04      	subs	r4, r0, #0
   883b8:	eba6 0604 	sub.w	r6, r6, r4
   883bc:	4427      	add	r7, r4
   883be:	dd17      	ble.n	883f0 <__sflush_r+0x100>
   883c0:	2e00      	cmp	r6, #0
   883c2:	dcf2      	bgt.n	883aa <__sflush_r+0xba>
   883c4:	2000      	movs	r0, #0
   883c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   883ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   883cc:	2b00      	cmp	r3, #0
   883ce:	dc9d      	bgt.n	8830c <__sflush_r+0x1c>
   883d0:	e7f8      	b.n	883c4 <__sflush_r+0xd4>
   883d2:	6d28      	ldr	r0, [r5, #80]	; 0x50
   883d4:	e7ae      	b.n	88334 <__sflush_r+0x44>
   883d6:	2100      	movs	r1, #0
   883d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   883dc:	692a      	ldr	r2, [r5, #16]
   883de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   883e2:	81ab      	strh	r3, [r5, #12]
   883e4:	04db      	lsls	r3, r3, #19
   883e6:	e9c5 2100 	strd	r2, r1, [r5]
   883ea:	d5c2      	bpl.n	88372 <__sflush_r+0x82>
   883ec:	6528      	str	r0, [r5, #80]	; 0x50
   883ee:	e7c0      	b.n	88372 <__sflush_r+0x82>
   883f0:	89ab      	ldrh	r3, [r5, #12]
   883f2:	f04f 30ff 	mov.w	r0, #4294967295
   883f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   883fa:	81ab      	strh	r3, [r5, #12]
   883fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88400:	f8d8 3000 	ldr.w	r3, [r8]
   88404:	2b00      	cmp	r3, #0
   88406:	d093      	beq.n	88330 <__sflush_r+0x40>
   88408:	2b1d      	cmp	r3, #29
   8840a:	d006      	beq.n	8841a <__sflush_r+0x12a>
   8840c:	2b16      	cmp	r3, #22
   8840e:	d004      	beq.n	8841a <__sflush_r+0x12a>
   88410:	89ab      	ldrh	r3, [r5, #12]
   88412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88416:	81ab      	strh	r3, [r5, #12]
   88418:	e7d5      	b.n	883c6 <__sflush_r+0xd6>
   8841a:	f8c8 6000 	str.w	r6, [r8]
   8841e:	e7d1      	b.n	883c4 <__sflush_r+0xd4>

00088420 <_fflush_r>:
   88420:	b538      	push	{r3, r4, r5, lr}
   88422:	460c      	mov	r4, r1
   88424:	4605      	mov	r5, r0
   88426:	b108      	cbz	r0, 8842c <_fflush_r+0xc>
   88428:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8842a:	b1a3      	cbz	r3, 88456 <_fflush_r+0x36>
   8842c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   88430:	b1b8      	cbz	r0, 88462 <_fflush_r+0x42>
   88432:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88434:	07db      	lsls	r3, r3, #31
   88436:	d401      	bmi.n	8843c <_fflush_r+0x1c>
   88438:	0581      	lsls	r1, r0, #22
   8843a:	d515      	bpl.n	88468 <_fflush_r+0x48>
   8843c:	4628      	mov	r0, r5
   8843e:	4621      	mov	r1, r4
   88440:	f7ff ff56 	bl	882f0 <__sflush_r>
   88444:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88446:	4605      	mov	r5, r0
   88448:	07da      	lsls	r2, r3, #31
   8844a:	d402      	bmi.n	88452 <_fflush_r+0x32>
   8844c:	89a3      	ldrh	r3, [r4, #12]
   8844e:	059b      	lsls	r3, r3, #22
   88450:	d50e      	bpl.n	88470 <_fflush_r+0x50>
   88452:	4628      	mov	r0, r5
   88454:	bd38      	pop	{r3, r4, r5, pc}
   88456:	f000 f83f 	bl	884d8 <__sinit>
   8845a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8845e:	2800      	cmp	r0, #0
   88460:	d1e7      	bne.n	88432 <_fflush_r+0x12>
   88462:	4605      	mov	r5, r0
   88464:	4628      	mov	r0, r5
   88466:	bd38      	pop	{r3, r4, r5, pc}
   88468:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8846a:	f000 fc07 	bl	88c7c <__retarget_lock_acquire_recursive>
   8846e:	e7e5      	b.n	8843c <_fflush_r+0x1c>
   88470:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88472:	f000 fc05 	bl	88c80 <__retarget_lock_release_recursive>
   88476:	4628      	mov	r0, r5
   88478:	bd38      	pop	{r3, r4, r5, pc}
   8847a:	bf00      	nop

0008847c <std>:
   8847c:	2300      	movs	r3, #0
   8847e:	b510      	push	{r4, lr}
   88480:	4604      	mov	r4, r0
   88482:	e9c0 3300 	strd	r3, r3, [r0]
   88486:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8848a:	8181      	strh	r1, [r0, #12]
   8848c:	81c2      	strh	r2, [r0, #14]
   8848e:	4619      	mov	r1, r3
   88490:	6083      	str	r3, [r0, #8]
   88492:	6643      	str	r3, [r0, #100]	; 0x64
   88494:	6183      	str	r3, [r0, #24]
   88496:	2208      	movs	r2, #8
   88498:	305c      	adds	r0, #92	; 0x5c
   8849a:	f7fc f853 	bl	84544 <memset>
   8849e:	4807      	ldr	r0, [pc, #28]	; (884bc <std+0x40>)
   884a0:	4907      	ldr	r1, [pc, #28]	; (884c0 <std+0x44>)
   884a2:	4a08      	ldr	r2, [pc, #32]	; (884c4 <std+0x48>)
   884a4:	4b08      	ldr	r3, [pc, #32]	; (884c8 <std+0x4c>)
   884a6:	e9c4 4007 	strd	r4, r0, [r4, #28]
   884aa:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   884ae:	62e3      	str	r3, [r4, #44]	; 0x2c
   884b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   884b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   884b8:	f000 bbdc 	b.w	88c74 <__retarget_lock_init_recursive>
   884bc:	00089fe5 	.word	0x00089fe5
   884c0:	0008a009 	.word	0x0008a009
   884c4:	0008a049 	.word	0x0008a049
   884c8:	0008a069 	.word	0x0008a069

000884cc <_cleanup_r>:
   884cc:	4901      	ldr	r1, [pc, #4]	; (884d4 <_cleanup_r+0x8>)
   884ce:	f000 bba3 	b.w	88c18 <_fwalk_reent>
   884d2:	bf00      	nop
   884d4:	0008a3e9 	.word	0x0008a3e9

000884d8 <__sinit>:
   884d8:	b510      	push	{r4, lr}
   884da:	4604      	mov	r4, r0
   884dc:	4813      	ldr	r0, [pc, #76]	; (8852c <__sinit+0x54>)
   884de:	f000 fbcd 	bl	88c7c <__retarget_lock_acquire_recursive>
   884e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   884e4:	b9ea      	cbnz	r2, 88522 <__sinit+0x4a>
   884e6:	2003      	movs	r0, #3
   884e8:	4911      	ldr	r1, [pc, #68]	; (88530 <__sinit+0x58>)
   884ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   884ee:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   884f2:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   884f6:	63e1      	str	r1, [r4, #60]	; 0x3c
   884f8:	6860      	ldr	r0, [r4, #4]
   884fa:	2104      	movs	r1, #4
   884fc:	f7ff ffbe 	bl	8847c <std>
   88500:	68a0      	ldr	r0, [r4, #8]
   88502:	2201      	movs	r2, #1
   88504:	2109      	movs	r1, #9
   88506:	f7ff ffb9 	bl	8847c <std>
   8850a:	68e0      	ldr	r0, [r4, #12]
   8850c:	2202      	movs	r2, #2
   8850e:	2112      	movs	r1, #18
   88510:	f7ff ffb4 	bl	8847c <std>
   88514:	2301      	movs	r3, #1
   88516:	4805      	ldr	r0, [pc, #20]	; (8852c <__sinit+0x54>)
   88518:	63a3      	str	r3, [r4, #56]	; 0x38
   8851a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8851e:	f000 bbaf 	b.w	88c80 <__retarget_lock_release_recursive>
   88522:	4802      	ldr	r0, [pc, #8]	; (8852c <__sinit+0x54>)
   88524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   88528:	f000 bbaa 	b.w	88c80 <__retarget_lock_release_recursive>
   8852c:	20001878 	.word	0x20001878
   88530:	000884cd 	.word	0x000884cd

00088534 <__sfp_lock_acquire>:
   88534:	4801      	ldr	r0, [pc, #4]	; (8853c <__sfp_lock_acquire+0x8>)
   88536:	f000 bba1 	b.w	88c7c <__retarget_lock_acquire_recursive>
   8853a:	bf00      	nop
   8853c:	2000188c 	.word	0x2000188c

00088540 <__sfp_lock_release>:
   88540:	4801      	ldr	r0, [pc, #4]	; (88548 <__sfp_lock_release+0x8>)
   88542:	f000 bb9d 	b.w	88c80 <__retarget_lock_release_recursive>
   88546:	bf00      	nop
   88548:	2000188c 	.word	0x2000188c

0008854c <__libc_fini_array>:
   8854c:	b538      	push	{r3, r4, r5, lr}
   8854e:	4b08      	ldr	r3, [pc, #32]	; (88570 <__libc_fini_array+0x24>)
   88550:	4d08      	ldr	r5, [pc, #32]	; (88574 <__libc_fini_array+0x28>)
   88552:	1b5b      	subs	r3, r3, r5
   88554:	109c      	asrs	r4, r3, #2
   88556:	d007      	beq.n	88568 <__libc_fini_array+0x1c>
   88558:	3b04      	subs	r3, #4
   8855a:	441d      	add	r5, r3
   8855c:	3c01      	subs	r4, #1
   8855e:	f855 3904 	ldr.w	r3, [r5], #-4
   88562:	4798      	blx	r3
   88564:	2c00      	cmp	r4, #0
   88566:	d1f9      	bne.n	8855c <__libc_fini_array+0x10>
   88568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8856c:	f003 b90e 	b.w	8b78c <_fini>
   88570:	0008b79c 	.word	0x0008b79c
   88574:	0008b798 	.word	0x0008b798

00088578 <__fputwc>:
   88578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8857c:	b083      	sub	sp, #12
   8857e:	4607      	mov	r7, r0
   88580:	4688      	mov	r8, r1
   88582:	4614      	mov	r4, r2
   88584:	f000 fb6c 	bl	88c60 <__locale_mb_cur_max>
   88588:	2801      	cmp	r0, #1
   8858a:	d103      	bne.n	88594 <__fputwc+0x1c>
   8858c:	f108 33ff 	add.w	r3, r8, #4294967295
   88590:	2bfe      	cmp	r3, #254	; 0xfe
   88592:	d933      	bls.n	885fc <__fputwc+0x84>
   88594:	4642      	mov	r2, r8
   88596:	4638      	mov	r0, r7
   88598:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8859c:	a901      	add	r1, sp, #4
   8859e:	f001 fe3b 	bl	8a218 <_wcrtomb_r>
   885a2:	1c42      	adds	r2, r0, #1
   885a4:	4606      	mov	r6, r0
   885a6:	d02f      	beq.n	88608 <__fputwc+0x90>
   885a8:	b318      	cbz	r0, 885f2 <__fputwc+0x7a>
   885aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   885ae:	2500      	movs	r5, #0
   885b0:	f10d 0904 	add.w	r9, sp, #4
   885b4:	e008      	b.n	885c8 <__fputwc+0x50>
   885b6:	6823      	ldr	r3, [r4, #0]
   885b8:	1c5a      	adds	r2, r3, #1
   885ba:	6022      	str	r2, [r4, #0]
   885bc:	7019      	strb	r1, [r3, #0]
   885be:	3501      	adds	r5, #1
   885c0:	42b5      	cmp	r5, r6
   885c2:	d216      	bcs.n	885f2 <__fputwc+0x7a>
   885c4:	f815 1009 	ldrb.w	r1, [r5, r9]
   885c8:	68a3      	ldr	r3, [r4, #8]
   885ca:	3b01      	subs	r3, #1
   885cc:	2b00      	cmp	r3, #0
   885ce:	60a3      	str	r3, [r4, #8]
   885d0:	daf1      	bge.n	885b6 <__fputwc+0x3e>
   885d2:	69a2      	ldr	r2, [r4, #24]
   885d4:	4293      	cmp	r3, r2
   885d6:	db01      	blt.n	885dc <__fputwc+0x64>
   885d8:	290a      	cmp	r1, #10
   885da:	d1ec      	bne.n	885b6 <__fputwc+0x3e>
   885dc:	4622      	mov	r2, r4
   885de:	4638      	mov	r0, r7
   885e0:	f001 fdc2 	bl	8a168 <__swbuf_r>
   885e4:	1c43      	adds	r3, r0, #1
   885e6:	d1ea      	bne.n	885be <__fputwc+0x46>
   885e8:	4606      	mov	r6, r0
   885ea:	4630      	mov	r0, r6
   885ec:	b003      	add	sp, #12
   885ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   885f2:	4646      	mov	r6, r8
   885f4:	4630      	mov	r0, r6
   885f6:	b003      	add	sp, #12
   885f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   885fc:	fa5f f188 	uxtb.w	r1, r8
   88600:	4606      	mov	r6, r0
   88602:	f88d 1004 	strb.w	r1, [sp, #4]
   88606:	e7d2      	b.n	885ae <__fputwc+0x36>
   88608:	4630      	mov	r0, r6
   8860a:	89a3      	ldrh	r3, [r4, #12]
   8860c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88610:	81a3      	strh	r3, [r4, #12]
   88612:	b003      	add	sp, #12
   88614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00088618 <_fputwc_r>:
   88618:	b530      	push	{r4, r5, lr}
   8861a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8861c:	4614      	mov	r4, r2
   8861e:	f013 0f01 	tst.w	r3, #1
   88622:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   88626:	4605      	mov	r5, r0
   88628:	b083      	sub	sp, #12
   8862a:	b29a      	uxth	r2, r3
   8862c:	d101      	bne.n	88632 <_fputwc_r+0x1a>
   8862e:	0598      	lsls	r0, r3, #22
   88630:	d51c      	bpl.n	8866c <_fputwc_r+0x54>
   88632:	0490      	lsls	r0, r2, #18
   88634:	d406      	bmi.n	88644 <_fputwc_r+0x2c>
   88636:	6e62      	ldr	r2, [r4, #100]	; 0x64
   88638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8863c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   88640:	81a3      	strh	r3, [r4, #12]
   88642:	6662      	str	r2, [r4, #100]	; 0x64
   88644:	4628      	mov	r0, r5
   88646:	4622      	mov	r2, r4
   88648:	f7ff ff96 	bl	88578 <__fputwc>
   8864c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8864e:	4605      	mov	r5, r0
   88650:	07da      	lsls	r2, r3, #31
   88652:	d402      	bmi.n	8865a <_fputwc_r+0x42>
   88654:	89a3      	ldrh	r3, [r4, #12]
   88656:	059b      	lsls	r3, r3, #22
   88658:	d502      	bpl.n	88660 <_fputwc_r+0x48>
   8865a:	4628      	mov	r0, r5
   8865c:	b003      	add	sp, #12
   8865e:	bd30      	pop	{r4, r5, pc}
   88660:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88662:	f000 fb0d 	bl	88c80 <__retarget_lock_release_recursive>
   88666:	4628      	mov	r0, r5
   88668:	b003      	add	sp, #12
   8866a:	bd30      	pop	{r4, r5, pc}
   8866c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8866e:	9101      	str	r1, [sp, #4]
   88670:	f000 fb04 	bl	88c7c <__retarget_lock_acquire_recursive>
   88674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88678:	9901      	ldr	r1, [sp, #4]
   8867a:	b29a      	uxth	r2, r3
   8867c:	e7d9      	b.n	88632 <_fputwc_r+0x1a>
   8867e:	bf00      	nop

00088680 <_malloc_trim_r>:
   88680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88682:	460c      	mov	r4, r1
   88684:	4f23      	ldr	r7, [pc, #140]	; (88714 <_malloc_trim_r+0x94>)
   88686:	4606      	mov	r6, r0
   88688:	f000 feea 	bl	89460 <__malloc_lock>
   8868c:	68bb      	ldr	r3, [r7, #8]
   8868e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   88692:	685d      	ldr	r5, [r3, #4]
   88694:	310f      	adds	r1, #15
   88696:	f025 0503 	bic.w	r5, r5, #3
   8869a:	194b      	adds	r3, r1, r5
   8869c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   886a0:	f023 030f 	bic.w	r3, r3, #15
   886a4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   886a8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   886ac:	db07      	blt.n	886be <_malloc_trim_r+0x3e>
   886ae:	2100      	movs	r1, #0
   886b0:	4630      	mov	r0, r6
   886b2:	f001 fc85 	bl	89fc0 <_sbrk_r>
   886b6:	68bb      	ldr	r3, [r7, #8]
   886b8:	442b      	add	r3, r5
   886ba:	4298      	cmp	r0, r3
   886bc:	d004      	beq.n	886c8 <_malloc_trim_r+0x48>
   886be:	4630      	mov	r0, r6
   886c0:	f000 fed4 	bl	8946c <__malloc_unlock>
   886c4:	2000      	movs	r0, #0
   886c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   886c8:	4630      	mov	r0, r6
   886ca:	4261      	negs	r1, r4
   886cc:	f001 fc78 	bl	89fc0 <_sbrk_r>
   886d0:	3001      	adds	r0, #1
   886d2:	d00d      	beq.n	886f0 <_malloc_trim_r+0x70>
   886d4:	4a10      	ldr	r2, [pc, #64]	; (88718 <_malloc_trim_r+0x98>)
   886d6:	68b9      	ldr	r1, [r7, #8]
   886d8:	6813      	ldr	r3, [r2, #0]
   886da:	1b2d      	subs	r5, r5, r4
   886dc:	f045 0501 	orr.w	r5, r5, #1
   886e0:	4630      	mov	r0, r6
   886e2:	1b1b      	subs	r3, r3, r4
   886e4:	604d      	str	r5, [r1, #4]
   886e6:	6013      	str	r3, [r2, #0]
   886e8:	f000 fec0 	bl	8946c <__malloc_unlock>
   886ec:	2001      	movs	r0, #1
   886ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   886f0:	2100      	movs	r1, #0
   886f2:	4630      	mov	r0, r6
   886f4:	f001 fc64 	bl	89fc0 <_sbrk_r>
   886f8:	68ba      	ldr	r2, [r7, #8]
   886fa:	1a83      	subs	r3, r0, r2
   886fc:	2b0f      	cmp	r3, #15
   886fe:	ddde      	ble.n	886be <_malloc_trim_r+0x3e>
   88700:	4906      	ldr	r1, [pc, #24]	; (8871c <_malloc_trim_r+0x9c>)
   88702:	f043 0301 	orr.w	r3, r3, #1
   88706:	680c      	ldr	r4, [r1, #0]
   88708:	4903      	ldr	r1, [pc, #12]	; (88718 <_malloc_trim_r+0x98>)
   8870a:	1b00      	subs	r0, r0, r4
   8870c:	6053      	str	r3, [r2, #4]
   8870e:	6008      	str	r0, [r1, #0]
   88710:	e7d5      	b.n	886be <_malloc_trim_r+0x3e>
   88712:	bf00      	nop
   88714:	20000970 	.word	0x20000970
   88718:	20000f80 	.word	0x20000f80
   8871c:	20000d78 	.word	0x20000d78

00088720 <_free_r>:
   88720:	2900      	cmp	r1, #0
   88722:	d05f      	beq.n	887e4 <_free_r+0xc4>
   88724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88726:	460c      	mov	r4, r1
   88728:	4606      	mov	r6, r0
   8872a:	f000 fe99 	bl	89460 <__malloc_lock>
   8872e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88732:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 88928 <_free_r+0x208>
   88736:	f1a4 0008 	sub.w	r0, r4, #8
   8873a:	f023 0101 	bic.w	r1, r3, #1
   8873e:	1842      	adds	r2, r0, r1
   88740:	f8dc 7008 	ldr.w	r7, [ip, #8]
   88744:	6855      	ldr	r5, [r2, #4]
   88746:	4297      	cmp	r7, r2
   88748:	f025 0503 	bic.w	r5, r5, #3
   8874c:	f000 8089 	beq.w	88862 <_free_r+0x142>
   88750:	07df      	lsls	r7, r3, #31
   88752:	6055      	str	r5, [r2, #4]
   88754:	d434      	bmi.n	887c0 <_free_r+0xa0>
   88756:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8875a:	f10c 0408 	add.w	r4, ip, #8
   8875e:	1bc0      	subs	r0, r0, r7
   88760:	6883      	ldr	r3, [r0, #8]
   88762:	4439      	add	r1, r7
   88764:	42a3      	cmp	r3, r4
   88766:	d06a      	beq.n	8883e <_free_r+0x11e>
   88768:	1957      	adds	r7, r2, r5
   8876a:	687f      	ldr	r7, [r7, #4]
   8876c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   88770:	f8c3 e00c 	str.w	lr, [r3, #12]
   88774:	f8ce 3008 	str.w	r3, [lr, #8]
   88778:	07fb      	lsls	r3, r7, #31
   8877a:	f140 8097 	bpl.w	888ac <_free_r+0x18c>
   8877e:	f041 0301 	orr.w	r3, r1, #1
   88782:	6043      	str	r3, [r0, #4]
   88784:	6011      	str	r1, [r2, #0]
   88786:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8878a:	d234      	bcs.n	887f6 <_free_r+0xd6>
   8878c:	2201      	movs	r2, #1
   8878e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   88792:	08cb      	lsrs	r3, r1, #3
   88794:	0949      	lsrs	r1, r1, #5
   88796:	4413      	add	r3, r2
   88798:	fa02 f101 	lsl.w	r1, r2, r1
   8879c:	4321      	orrs	r1, r4
   8879e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   887a2:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   887a6:	3a08      	subs	r2, #8
   887a8:	e9c0 4202 	strd	r4, r2, [r0, #8]
   887ac:	f8cc 1004 	str.w	r1, [ip, #4]
   887b0:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   887b4:	60e0      	str	r0, [r4, #12]
   887b6:	4630      	mov	r0, r6
   887b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   887bc:	f000 be56 	b.w	8946c <__malloc_unlock>
   887c0:	1953      	adds	r3, r2, r5
   887c2:	685b      	ldr	r3, [r3, #4]
   887c4:	07df      	lsls	r7, r3, #31
   887c6:	d40e      	bmi.n	887e6 <_free_r+0xc6>
   887c8:	4429      	add	r1, r5
   887ca:	f10c 0408 	add.w	r4, ip, #8
   887ce:	6893      	ldr	r3, [r2, #8]
   887d0:	42a3      	cmp	r3, r4
   887d2:	d073      	beq.n	888bc <_free_r+0x19c>
   887d4:	68d4      	ldr	r4, [r2, #12]
   887d6:	f041 0201 	orr.w	r2, r1, #1
   887da:	60dc      	str	r4, [r3, #12]
   887dc:	60a3      	str	r3, [r4, #8]
   887de:	6042      	str	r2, [r0, #4]
   887e0:	5041      	str	r1, [r0, r1]
   887e2:	e7d0      	b.n	88786 <_free_r+0x66>
   887e4:	4770      	bx	lr
   887e6:	f041 0301 	orr.w	r3, r1, #1
   887ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   887ee:	f844 3c04 	str.w	r3, [r4, #-4]
   887f2:	6011      	str	r1, [r2, #0]
   887f4:	d3ca      	bcc.n	8878c <_free_r+0x6c>
   887f6:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   887fa:	ea4f 2351 	mov.w	r3, r1, lsr #9
   887fe:	d24a      	bcs.n	88896 <_free_r+0x176>
   88800:	098b      	lsrs	r3, r1, #6
   88802:	f103 0539 	add.w	r5, r3, #57	; 0x39
   88806:	00ed      	lsls	r5, r5, #3
   88808:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8880c:	f85c 3005 	ldr.w	r3, [ip, r5]
   88810:	eb0c 0405 	add.w	r4, ip, r5
   88814:	3c08      	subs	r4, #8
   88816:	429c      	cmp	r4, r3
   88818:	d059      	beq.n	888ce <_free_r+0x1ae>
   8881a:	685a      	ldr	r2, [r3, #4]
   8881c:	f022 0203 	bic.w	r2, r2, #3
   88820:	428a      	cmp	r2, r1
   88822:	d902      	bls.n	8882a <_free_r+0x10a>
   88824:	689b      	ldr	r3, [r3, #8]
   88826:	429c      	cmp	r4, r3
   88828:	d1f7      	bne.n	8881a <_free_r+0xfa>
   8882a:	68dc      	ldr	r4, [r3, #12]
   8882c:	e9c0 3402 	strd	r3, r4, [r0, #8]
   88830:	60a0      	str	r0, [r4, #8]
   88832:	60d8      	str	r0, [r3, #12]
   88834:	4630      	mov	r0, r6
   88836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8883a:	f000 be17 	b.w	8946c <__malloc_unlock>
   8883e:	1953      	adds	r3, r2, r5
   88840:	685b      	ldr	r3, [r3, #4]
   88842:	07db      	lsls	r3, r3, #31
   88844:	d466      	bmi.n	88914 <_free_r+0x1f4>
   88846:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8884a:	4429      	add	r1, r5
   8884c:	f041 0401 	orr.w	r4, r1, #1
   88850:	60d3      	str	r3, [r2, #12]
   88852:	609a      	str	r2, [r3, #8]
   88854:	6044      	str	r4, [r0, #4]
   88856:	5041      	str	r1, [r0, r1]
   88858:	4630      	mov	r0, r6
   8885a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8885e:	f000 be05 	b.w	8946c <__malloc_unlock>
   88862:	07db      	lsls	r3, r3, #31
   88864:	4429      	add	r1, r5
   88866:	d407      	bmi.n	88878 <_free_r+0x158>
   88868:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8886c:	1b00      	subs	r0, r0, r4
   8886e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   88872:	4421      	add	r1, r4
   88874:	60d3      	str	r3, [r2, #12]
   88876:	609a      	str	r2, [r3, #8]
   88878:	4b29      	ldr	r3, [pc, #164]	; (88920 <_free_r+0x200>)
   8887a:	f041 0201 	orr.w	r2, r1, #1
   8887e:	681b      	ldr	r3, [r3, #0]
   88880:	6042      	str	r2, [r0, #4]
   88882:	428b      	cmp	r3, r1
   88884:	f8cc 0008 	str.w	r0, [ip, #8]
   88888:	d895      	bhi.n	887b6 <_free_r+0x96>
   8888a:	4b26      	ldr	r3, [pc, #152]	; (88924 <_free_r+0x204>)
   8888c:	4630      	mov	r0, r6
   8888e:	6819      	ldr	r1, [r3, #0]
   88890:	f7ff fef6 	bl	88680 <_malloc_trim_r>
   88894:	e78f      	b.n	887b6 <_free_r+0x96>
   88896:	2b14      	cmp	r3, #20
   88898:	d90a      	bls.n	888b0 <_free_r+0x190>
   8889a:	2b54      	cmp	r3, #84	; 0x54
   8889c:	d821      	bhi.n	888e2 <_free_r+0x1c2>
   8889e:	0b0b      	lsrs	r3, r1, #12
   888a0:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   888a4:	00ed      	lsls	r5, r5, #3
   888a6:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   888aa:	e7af      	b.n	8880c <_free_r+0xec>
   888ac:	4429      	add	r1, r5
   888ae:	e78e      	b.n	887ce <_free_r+0xae>
   888b0:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   888b4:	00ed      	lsls	r5, r5, #3
   888b6:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   888ba:	e7a7      	b.n	8880c <_free_r+0xec>
   888bc:	f041 0301 	orr.w	r3, r1, #1
   888c0:	e9cc 0004 	strd	r0, r0, [ip, #16]
   888c4:	e9c0 4402 	strd	r4, r4, [r0, #8]
   888c8:	6043      	str	r3, [r0, #4]
   888ca:	5041      	str	r1, [r0, r1]
   888cc:	e773      	b.n	887b6 <_free_r+0x96>
   888ce:	2501      	movs	r5, #1
   888d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   888d4:	1092      	asrs	r2, r2, #2
   888d6:	fa05 f202 	lsl.w	r2, r5, r2
   888da:	430a      	orrs	r2, r1
   888dc:	f8cc 2004 	str.w	r2, [ip, #4]
   888e0:	e7a4      	b.n	8882c <_free_r+0x10c>
   888e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   888e6:	d806      	bhi.n	888f6 <_free_r+0x1d6>
   888e8:	0bcb      	lsrs	r3, r1, #15
   888ea:	f103 0578 	add.w	r5, r3, #120	; 0x78
   888ee:	00ed      	lsls	r5, r5, #3
   888f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   888f4:	e78a      	b.n	8880c <_free_r+0xec>
   888f6:	f240 5254 	movw	r2, #1364	; 0x554
   888fa:	4293      	cmp	r3, r2
   888fc:	d806      	bhi.n	8890c <_free_r+0x1ec>
   888fe:	0c8b      	lsrs	r3, r1, #18
   88900:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   88904:	00ed      	lsls	r5, r5, #3
   88906:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8890a:	e77f      	b.n	8880c <_free_r+0xec>
   8890c:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   88910:	227e      	movs	r2, #126	; 0x7e
   88912:	e77b      	b.n	8880c <_free_r+0xec>
   88914:	f041 0301 	orr.w	r3, r1, #1
   88918:	6043      	str	r3, [r0, #4]
   8891a:	6011      	str	r1, [r2, #0]
   8891c:	e74b      	b.n	887b6 <_free_r+0x96>
   8891e:	bf00      	nop
   88920:	20000d7c 	.word	0x20000d7c
   88924:	20000fb0 	.word	0x20000fb0
   88928:	20000970 	.word	0x20000970

0008892c <__sfvwrite_r>:
   8892c:	6893      	ldr	r3, [r2, #8]
   8892e:	2b00      	cmp	r3, #0
   88930:	f000 80bd 	beq.w	88aae <__sfvwrite_r+0x182>
   88934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88938:	4690      	mov	r8, r2
   8893a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8893e:	460c      	mov	r4, r1
   88940:	0711      	lsls	r1, r2, #28
   88942:	4681      	mov	r9, r0
   88944:	b083      	sub	sp, #12
   88946:	b293      	uxth	r3, r2
   88948:	d527      	bpl.n	8899a <__sfvwrite_r+0x6e>
   8894a:	6922      	ldr	r2, [r4, #16]
   8894c:	b32a      	cbz	r2, 8899a <__sfvwrite_r+0x6e>
   8894e:	f013 0702 	ands.w	r7, r3, #2
   88952:	f8d8 5000 	ldr.w	r5, [r8]
   88956:	d02f      	beq.n	889b8 <__sfvwrite_r+0x8c>
   88958:	f04f 0b00 	mov.w	fp, #0
   8895c:	465f      	mov	r7, fp
   8895e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 88c14 <__sfvwrite_r+0x2e8>
   88962:	2f00      	cmp	r7, #0
   88964:	f000 8089 	beq.w	88a7a <__sfvwrite_r+0x14e>
   88968:	4557      	cmp	r7, sl
   8896a:	463b      	mov	r3, r7
   8896c:	465a      	mov	r2, fp
   8896e:	bf28      	it	cs
   88970:	4653      	movcs	r3, sl
   88972:	4648      	mov	r0, r9
   88974:	69e1      	ldr	r1, [r4, #28]
   88976:	6a66      	ldr	r6, [r4, #36]	; 0x24
   88978:	47b0      	blx	r6
   8897a:	2800      	cmp	r0, #0
   8897c:	f340 808d 	ble.w	88a9a <__sfvwrite_r+0x16e>
   88980:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88984:	4483      	add	fp, r0
   88986:	1a1b      	subs	r3, r3, r0
   88988:	1a3f      	subs	r7, r7, r0
   8898a:	f8c8 3008 	str.w	r3, [r8, #8]
   8898e:	2b00      	cmp	r3, #0
   88990:	d1e7      	bne.n	88962 <__sfvwrite_r+0x36>
   88992:	2000      	movs	r0, #0
   88994:	b003      	add	sp, #12
   88996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8899a:	4621      	mov	r1, r4
   8899c:	4648      	mov	r0, r9
   8899e:	f7fe fc3b 	bl	87218 <__swsetup_r>
   889a2:	2800      	cmp	r0, #0
   889a4:	f040 8132 	bne.w	88c0c <__sfvwrite_r+0x2e0>
   889a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   889ac:	f8d8 5000 	ldr.w	r5, [r8]
   889b0:	b293      	uxth	r3, r2
   889b2:	f013 0702 	ands.w	r7, r3, #2
   889b6:	d1cf      	bne.n	88958 <__sfvwrite_r+0x2c>
   889b8:	f013 0a01 	ands.w	sl, r3, #1
   889bc:	d179      	bne.n	88ab2 <__sfvwrite_r+0x186>
   889be:	4656      	mov	r6, sl
   889c0:	2e00      	cmp	r6, #0
   889c2:	d056      	beq.n	88a72 <__sfvwrite_r+0x146>
   889c4:	059a      	lsls	r2, r3, #22
   889c6:	68a7      	ldr	r7, [r4, #8]
   889c8:	f140 80bd 	bpl.w	88b46 <__sfvwrite_r+0x21a>
   889cc:	42b7      	cmp	r7, r6
   889ce:	46bb      	mov	fp, r7
   889d0:	f200 80d2 	bhi.w	88b78 <__sfvwrite_r+0x24c>
   889d4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   889d8:	f000 80d0 	beq.w	88b7c <__sfvwrite_r+0x250>
   889dc:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   889e0:	6822      	ldr	r2, [r4, #0]
   889e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   889e6:	eba2 0b01 	sub.w	fp, r2, r1
   889ea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   889ee:	f10b 0001 	add.w	r0, fp, #1
   889f2:	107f      	asrs	r7, r7, #1
   889f4:	4430      	add	r0, r6
   889f6:	42b8      	cmp	r0, r7
   889f8:	463a      	mov	r2, r7
   889fa:	bf84      	itt	hi
   889fc:	4607      	movhi	r7, r0
   889fe:	463a      	movhi	r2, r7
   88a00:	055b      	lsls	r3, r3, #21
   88a02:	f140 80e7 	bpl.w	88bd4 <__sfvwrite_r+0x2a8>
   88a06:	4611      	mov	r1, r2
   88a08:	4648      	mov	r0, r9
   88a0a:	f000 f9bb 	bl	88d84 <_malloc_r>
   88a0e:	2800      	cmp	r0, #0
   88a10:	f000 80f6 	beq.w	88c00 <__sfvwrite_r+0x2d4>
   88a14:	465a      	mov	r2, fp
   88a16:	6921      	ldr	r1, [r4, #16]
   88a18:	9000      	str	r0, [sp, #0]
   88a1a:	f7fb fd1d 	bl	84458 <memcpy>
   88a1e:	89a2      	ldrh	r2, [r4, #12]
   88a20:	9b00      	ldr	r3, [sp, #0]
   88a22:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88a26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   88a2a:	81a2      	strh	r2, [r4, #12]
   88a2c:	eba7 020b 	sub.w	r2, r7, fp
   88a30:	eb03 000b 	add.w	r0, r3, fp
   88a34:	6167      	str	r7, [r4, #20]
   88a36:	46b3      	mov	fp, r6
   88a38:	4637      	mov	r7, r6
   88a3a:	6123      	str	r3, [r4, #16]
   88a3c:	6020      	str	r0, [r4, #0]
   88a3e:	60a2      	str	r2, [r4, #8]
   88a40:	465a      	mov	r2, fp
   88a42:	4651      	mov	r1, sl
   88a44:	f000 fca2 	bl	8938c <memmove>
   88a48:	68a2      	ldr	r2, [r4, #8]
   88a4a:	6823      	ldr	r3, [r4, #0]
   88a4c:	1bd2      	subs	r2, r2, r7
   88a4e:	4637      	mov	r7, r6
   88a50:	2600      	movs	r6, #0
   88a52:	445b      	add	r3, fp
   88a54:	60a2      	str	r2, [r4, #8]
   88a56:	6023      	str	r3, [r4, #0]
   88a58:	f8d8 2008 	ldr.w	r2, [r8, #8]
   88a5c:	44ba      	add	sl, r7
   88a5e:	1bd7      	subs	r7, r2, r7
   88a60:	f8c8 7008 	str.w	r7, [r8, #8]
   88a64:	2f00      	cmp	r7, #0
   88a66:	d094      	beq.n	88992 <__sfvwrite_r+0x66>
   88a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88a6c:	b29b      	uxth	r3, r3
   88a6e:	2e00      	cmp	r6, #0
   88a70:	d1a8      	bne.n	889c4 <__sfvwrite_r+0x98>
   88a72:	e9d5 a600 	ldrd	sl, r6, [r5]
   88a76:	3508      	adds	r5, #8
   88a78:	e7a2      	b.n	889c0 <__sfvwrite_r+0x94>
   88a7a:	e9d5 b700 	ldrd	fp, r7, [r5]
   88a7e:	3508      	adds	r5, #8
   88a80:	e76f      	b.n	88962 <__sfvwrite_r+0x36>
   88a82:	4629      	mov	r1, r5
   88a84:	465a      	mov	r2, fp
   88a86:	f000 fc81 	bl	8938c <memmove>
   88a8a:	6823      	ldr	r3, [r4, #0]
   88a8c:	4621      	mov	r1, r4
   88a8e:	445b      	add	r3, fp
   88a90:	4648      	mov	r0, r9
   88a92:	6023      	str	r3, [r4, #0]
   88a94:	f7ff fcc4 	bl	88420 <_fflush_r>
   88a98:	b358      	cbz	r0, 88af2 <__sfvwrite_r+0x1c6>
   88a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88a9e:	f04f 30ff 	mov.w	r0, #4294967295
   88aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88aa6:	81a3      	strh	r3, [r4, #12]
   88aa8:	b003      	add	sp, #12
   88aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88aae:	2000      	movs	r0, #0
   88ab0:	4770      	bx	lr
   88ab2:	463e      	mov	r6, r7
   88ab4:	46aa      	mov	sl, r5
   88ab6:	4638      	mov	r0, r7
   88ab8:	463d      	mov	r5, r7
   88aba:	9700      	str	r7, [sp, #0]
   88abc:	b36e      	cbz	r6, 88b1a <__sfvwrite_r+0x1ee>
   88abe:	2800      	cmp	r0, #0
   88ac0:	d035      	beq.n	88b2e <__sfvwrite_r+0x202>
   88ac2:	9a00      	ldr	r2, [sp, #0]
   88ac4:	6820      	ldr	r0, [r4, #0]
   88ac6:	6921      	ldr	r1, [r4, #16]
   88ac8:	42b2      	cmp	r2, r6
   88aca:	bf28      	it	cs
   88acc:	4632      	movcs	r2, r6
   88ace:	4288      	cmp	r0, r1
   88ad0:	6963      	ldr	r3, [r4, #20]
   88ad2:	d904      	bls.n	88ade <__sfvwrite_r+0x1b2>
   88ad4:	68a1      	ldr	r1, [r4, #8]
   88ad6:	eb03 0b01 	add.w	fp, r3, r1
   88ada:	455a      	cmp	r2, fp
   88adc:	dcd1      	bgt.n	88a82 <__sfvwrite_r+0x156>
   88ade:	4293      	cmp	r3, r2
   88ae0:	dc6b      	bgt.n	88bba <__sfvwrite_r+0x28e>
   88ae2:	462a      	mov	r2, r5
   88ae4:	4648      	mov	r0, r9
   88ae6:	69e1      	ldr	r1, [r4, #28]
   88ae8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   88aea:	47b8      	blx	r7
   88aec:	f1b0 0b00 	subs.w	fp, r0, #0
   88af0:	ddd3      	ble.n	88a9a <__sfvwrite_r+0x16e>
   88af2:	9b00      	ldr	r3, [sp, #0]
   88af4:	ebb3 030b 	subs.w	r3, r3, fp
   88af8:	9300      	str	r3, [sp, #0]
   88afa:	d057      	beq.n	88bac <__sfvwrite_r+0x280>
   88afc:	2001      	movs	r0, #1
   88afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88b02:	445d      	add	r5, fp
   88b04:	eba3 030b 	sub.w	r3, r3, fp
   88b08:	eba6 060b 	sub.w	r6, r6, fp
   88b0c:	f8c8 3008 	str.w	r3, [r8, #8]
   88b10:	2b00      	cmp	r3, #0
   88b12:	f43f af3e 	beq.w	88992 <__sfvwrite_r+0x66>
   88b16:	2e00      	cmp	r6, #0
   88b18:	d1d1      	bne.n	88abe <__sfvwrite_r+0x192>
   88b1a:	f10a 0308 	add.w	r3, sl, #8
   88b1e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88b22:	469a      	mov	sl, r3
   88b24:	f853 5c08 	ldr.w	r5, [r3, #-8]
   88b28:	3308      	adds	r3, #8
   88b2a:	2e00      	cmp	r6, #0
   88b2c:	d0f7      	beq.n	88b1e <__sfvwrite_r+0x1f2>
   88b2e:	4632      	mov	r2, r6
   88b30:	210a      	movs	r1, #10
   88b32:	4628      	mov	r0, r5
   88b34:	f000 fbea 	bl	8930c <memchr>
   88b38:	2800      	cmp	r0, #0
   88b3a:	d05e      	beq.n	88bfa <__sfvwrite_r+0x2ce>
   88b3c:	3001      	adds	r0, #1
   88b3e:	1b43      	subs	r3, r0, r5
   88b40:	461a      	mov	r2, r3
   88b42:	9300      	str	r3, [sp, #0]
   88b44:	e7be      	b.n	88ac4 <__sfvwrite_r+0x198>
   88b46:	6820      	ldr	r0, [r4, #0]
   88b48:	6923      	ldr	r3, [r4, #16]
   88b4a:	4298      	cmp	r0, r3
   88b4c:	d818      	bhi.n	88b80 <__sfvwrite_r+0x254>
   88b4e:	6962      	ldr	r2, [r4, #20]
   88b50:	42b2      	cmp	r2, r6
   88b52:	d815      	bhi.n	88b80 <__sfvwrite_r+0x254>
   88b54:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   88b58:	42b3      	cmp	r3, r6
   88b5a:	bf28      	it	cs
   88b5c:	4633      	movcs	r3, r6
   88b5e:	fb93 f3f2 	sdiv	r3, r3, r2
   88b62:	6a67      	ldr	r7, [r4, #36]	; 0x24
   88b64:	fb02 f303 	mul.w	r3, r2, r3
   88b68:	4648      	mov	r0, r9
   88b6a:	4652      	mov	r2, sl
   88b6c:	69e1      	ldr	r1, [r4, #28]
   88b6e:	47b8      	blx	r7
   88b70:	1e07      	subs	r7, r0, #0
   88b72:	dd92      	ble.n	88a9a <__sfvwrite_r+0x16e>
   88b74:	1bf6      	subs	r6, r6, r7
   88b76:	e76f      	b.n	88a58 <__sfvwrite_r+0x12c>
   88b78:	4637      	mov	r7, r6
   88b7a:	46b3      	mov	fp, r6
   88b7c:	6820      	ldr	r0, [r4, #0]
   88b7e:	e75f      	b.n	88a40 <__sfvwrite_r+0x114>
   88b80:	42b7      	cmp	r7, r6
   88b82:	bf28      	it	cs
   88b84:	4637      	movcs	r7, r6
   88b86:	4651      	mov	r1, sl
   88b88:	463a      	mov	r2, r7
   88b8a:	f000 fbff 	bl	8938c <memmove>
   88b8e:	68a3      	ldr	r3, [r4, #8]
   88b90:	6822      	ldr	r2, [r4, #0]
   88b92:	1bdb      	subs	r3, r3, r7
   88b94:	443a      	add	r2, r7
   88b96:	60a3      	str	r3, [r4, #8]
   88b98:	6022      	str	r2, [r4, #0]
   88b9a:	2b00      	cmp	r3, #0
   88b9c:	d1ea      	bne.n	88b74 <__sfvwrite_r+0x248>
   88b9e:	4621      	mov	r1, r4
   88ba0:	4648      	mov	r0, r9
   88ba2:	f7ff fc3d 	bl	88420 <_fflush_r>
   88ba6:	2800      	cmp	r0, #0
   88ba8:	d0e4      	beq.n	88b74 <__sfvwrite_r+0x248>
   88baa:	e776      	b.n	88a9a <__sfvwrite_r+0x16e>
   88bac:	4621      	mov	r1, r4
   88bae:	4648      	mov	r0, r9
   88bb0:	f7ff fc36 	bl	88420 <_fflush_r>
   88bb4:	2800      	cmp	r0, #0
   88bb6:	d0a2      	beq.n	88afe <__sfvwrite_r+0x1d2>
   88bb8:	e76f      	b.n	88a9a <__sfvwrite_r+0x16e>
   88bba:	4629      	mov	r1, r5
   88bbc:	4693      	mov	fp, r2
   88bbe:	9201      	str	r2, [sp, #4]
   88bc0:	f000 fbe4 	bl	8938c <memmove>
   88bc4:	68a1      	ldr	r1, [r4, #8]
   88bc6:	6823      	ldr	r3, [r4, #0]
   88bc8:	9a01      	ldr	r2, [sp, #4]
   88bca:	1a89      	subs	r1, r1, r2
   88bcc:	441a      	add	r2, r3
   88bce:	60a1      	str	r1, [r4, #8]
   88bd0:	6022      	str	r2, [r4, #0]
   88bd2:	e78e      	b.n	88af2 <__sfvwrite_r+0x1c6>
   88bd4:	4648      	mov	r0, r9
   88bd6:	f000 ffcb 	bl	89b70 <_realloc_r>
   88bda:	4603      	mov	r3, r0
   88bdc:	2800      	cmp	r0, #0
   88bde:	f47f af25 	bne.w	88a2c <__sfvwrite_r+0x100>
   88be2:	4648      	mov	r0, r9
   88be4:	6921      	ldr	r1, [r4, #16]
   88be6:	f7ff fd9b 	bl	88720 <_free_r>
   88bea:	220c      	movs	r2, #12
   88bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88bf0:	f8c9 2000 	str.w	r2, [r9]
   88bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   88bf8:	e751      	b.n	88a9e <__sfvwrite_r+0x172>
   88bfa:	1c72      	adds	r2, r6, #1
   88bfc:	9200      	str	r2, [sp, #0]
   88bfe:	e761      	b.n	88ac4 <__sfvwrite_r+0x198>
   88c00:	220c      	movs	r2, #12
   88c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88c06:	f8c9 2000 	str.w	r2, [r9]
   88c0a:	e748      	b.n	88a9e <__sfvwrite_r+0x172>
   88c0c:	f04f 30ff 	mov.w	r0, #4294967295
   88c10:	e6c0      	b.n	88994 <__sfvwrite_r+0x68>
   88c12:	bf00      	nop
   88c14:	7ffffc00 	.word	0x7ffffc00

00088c18 <_fwalk_reent>:
   88c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88c1c:	4607      	mov	r7, r0
   88c1e:	4688      	mov	r8, r1
   88c20:	f04f 0900 	mov.w	r9, #0
   88c24:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   88c28:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   88c2c:	3d01      	subs	r5, #1
   88c2e:	d410      	bmi.n	88c52 <_fwalk_reent+0x3a>
   88c30:	89a3      	ldrh	r3, [r4, #12]
   88c32:	3d01      	subs	r5, #1
   88c34:	2b01      	cmp	r3, #1
   88c36:	d908      	bls.n	88c4a <_fwalk_reent+0x32>
   88c38:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   88c3c:	3301      	adds	r3, #1
   88c3e:	d004      	beq.n	88c4a <_fwalk_reent+0x32>
   88c40:	4621      	mov	r1, r4
   88c42:	4638      	mov	r0, r7
   88c44:	47c0      	blx	r8
   88c46:	ea49 0900 	orr.w	r9, r9, r0
   88c4a:	1c6b      	adds	r3, r5, #1
   88c4c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   88c50:	d1ee      	bne.n	88c30 <_fwalk_reent+0x18>
   88c52:	6836      	ldr	r6, [r6, #0]
   88c54:	2e00      	cmp	r6, #0
   88c56:	d1e7      	bne.n	88c28 <_fwalk_reent+0x10>
   88c58:	4648      	mov	r0, r9
   88c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88c5e:	bf00      	nop

00088c60 <__locale_mb_cur_max>:
   88c60:	4b01      	ldr	r3, [pc, #4]	; (88c68 <__locale_mb_cur_max+0x8>)
   88c62:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   88c66:	4770      	bx	lr
   88c68:	20000804 	.word	0x20000804

00088c6c <_localeconv_r>:
   88c6c:	4800      	ldr	r0, [pc, #0]	; (88c70 <_localeconv_r+0x4>)
   88c6e:	4770      	bx	lr
   88c70:	200008f4 	.word	0x200008f4

00088c74 <__retarget_lock_init_recursive>:
   88c74:	4770      	bx	lr
   88c76:	bf00      	nop

00088c78 <__retarget_lock_close_recursive>:
   88c78:	4770      	bx	lr
   88c7a:	bf00      	nop

00088c7c <__retarget_lock_acquire_recursive>:
   88c7c:	4770      	bx	lr
   88c7e:	bf00      	nop

00088c80 <__retarget_lock_release_recursive>:
   88c80:	4770      	bx	lr
   88c82:	bf00      	nop

00088c84 <__swhatbuf_r>:
   88c84:	b570      	push	{r4, r5, r6, lr}
   88c86:	460c      	mov	r4, r1
   88c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88c8c:	4615      	mov	r5, r2
   88c8e:	2900      	cmp	r1, #0
   88c90:	461e      	mov	r6, r3
   88c92:	b096      	sub	sp, #88	; 0x58
   88c94:	db14      	blt.n	88cc0 <__swhatbuf_r+0x3c>
   88c96:	466a      	mov	r2, sp
   88c98:	f001 fc20 	bl	8a4dc <_fstat_r>
   88c9c:	2800      	cmp	r0, #0
   88c9e:	db0f      	blt.n	88cc0 <__swhatbuf_r+0x3c>
   88ca0:	9a01      	ldr	r2, [sp, #4]
   88ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   88ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   88caa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   88cae:	fab2 f282 	clz	r2, r2
   88cb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   88cb6:	0952      	lsrs	r2, r2, #5
   88cb8:	6032      	str	r2, [r6, #0]
   88cba:	602b      	str	r3, [r5, #0]
   88cbc:	b016      	add	sp, #88	; 0x58
   88cbe:	bd70      	pop	{r4, r5, r6, pc}
   88cc0:	2300      	movs	r3, #0
   88cc2:	89a1      	ldrh	r1, [r4, #12]
   88cc4:	6033      	str	r3, [r6, #0]
   88cc6:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   88cca:	d004      	beq.n	88cd6 <__swhatbuf_r+0x52>
   88ccc:	2240      	movs	r2, #64	; 0x40
   88cce:	4618      	mov	r0, r3
   88cd0:	602a      	str	r2, [r5, #0]
   88cd2:	b016      	add	sp, #88	; 0x58
   88cd4:	bd70      	pop	{r4, r5, r6, pc}
   88cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   88cda:	602b      	str	r3, [r5, #0]
   88cdc:	b016      	add	sp, #88	; 0x58
   88cde:	bd70      	pop	{r4, r5, r6, pc}

00088ce0 <__smakebuf_r>:
   88ce0:	b570      	push	{r4, r5, r6, lr}
   88ce2:	898b      	ldrh	r3, [r1, #12]
   88ce4:	460c      	mov	r4, r1
   88ce6:	079d      	lsls	r5, r3, #30
   88ce8:	b082      	sub	sp, #8
   88cea:	d507      	bpl.n	88cfc <__smakebuf_r+0x1c>
   88cec:	2201      	movs	r2, #1
   88cee:	f101 0343 	add.w	r3, r1, #67	; 0x43
   88cf2:	614a      	str	r2, [r1, #20]
   88cf4:	600b      	str	r3, [r1, #0]
   88cf6:	610b      	str	r3, [r1, #16]
   88cf8:	b002      	add	sp, #8
   88cfa:	bd70      	pop	{r4, r5, r6, pc}
   88cfc:	ab01      	add	r3, sp, #4
   88cfe:	466a      	mov	r2, sp
   88d00:	4606      	mov	r6, r0
   88d02:	f7ff ffbf 	bl	88c84 <__swhatbuf_r>
   88d06:	9900      	ldr	r1, [sp, #0]
   88d08:	4605      	mov	r5, r0
   88d0a:	4630      	mov	r0, r6
   88d0c:	f000 f83a 	bl	88d84 <_malloc_r>
   88d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d14:	b170      	cbz	r0, 88d34 <__smakebuf_r+0x54>
   88d16:	4916      	ldr	r1, [pc, #88]	; (88d70 <__smakebuf_r+0x90>)
   88d18:	9a00      	ldr	r2, [sp, #0]
   88d1a:	63f1      	str	r1, [r6, #60]	; 0x3c
   88d1c:	9901      	ldr	r1, [sp, #4]
   88d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   88d22:	e9c4 0204 	strd	r0, r2, [r4, #16]
   88d26:	81a3      	strh	r3, [r4, #12]
   88d28:	6020      	str	r0, [r4, #0]
   88d2a:	b989      	cbnz	r1, 88d50 <__smakebuf_r+0x70>
   88d2c:	432b      	orrs	r3, r5
   88d2e:	81a3      	strh	r3, [r4, #12]
   88d30:	b002      	add	sp, #8
   88d32:	bd70      	pop	{r4, r5, r6, pc}
   88d34:	059a      	lsls	r2, r3, #22
   88d36:	d4df      	bmi.n	88cf8 <__smakebuf_r+0x18>
   88d38:	2101      	movs	r1, #1
   88d3a:	f023 0303 	bic.w	r3, r3, #3
   88d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   88d42:	f043 0302 	orr.w	r3, r3, #2
   88d46:	81a3      	strh	r3, [r4, #12]
   88d48:	6161      	str	r1, [r4, #20]
   88d4a:	6022      	str	r2, [r4, #0]
   88d4c:	6122      	str	r2, [r4, #16]
   88d4e:	e7d3      	b.n	88cf8 <__smakebuf_r+0x18>
   88d50:	4630      	mov	r0, r6
   88d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88d56:	f001 fbd7 	bl	8a508 <_isatty_r>
   88d5a:	b910      	cbnz	r0, 88d62 <__smakebuf_r+0x82>
   88d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d60:	e7e4      	b.n	88d2c <__smakebuf_r+0x4c>
   88d62:	89a2      	ldrh	r2, [r4, #12]
   88d64:	f022 0203 	bic.w	r2, r2, #3
   88d68:	f042 0201 	orr.w	r2, r2, #1
   88d6c:	b213      	sxth	r3, r2
   88d6e:	e7dd      	b.n	88d2c <__smakebuf_r+0x4c>
   88d70:	000884cd 	.word	0x000884cd

00088d74 <malloc>:
   88d74:	4b02      	ldr	r3, [pc, #8]	; (88d80 <malloc+0xc>)
   88d76:	4601      	mov	r1, r0
   88d78:	6818      	ldr	r0, [r3, #0]
   88d7a:	f000 b803 	b.w	88d84 <_malloc_r>
   88d7e:	bf00      	nop
   88d80:	200003d0 	.word	0x200003d0

00088d84 <_malloc_r>:
   88d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d88:	f101 050b 	add.w	r5, r1, #11
   88d8c:	2d16      	cmp	r5, #22
   88d8e:	4606      	mov	r6, r0
   88d90:	b083      	sub	sp, #12
   88d92:	d824      	bhi.n	88dde <_malloc_r+0x5a>
   88d94:	2910      	cmp	r1, #16
   88d96:	f200 80b6 	bhi.w	88f06 <_malloc_r+0x182>
   88d9a:	f000 fb61 	bl	89460 <__malloc_lock>
   88d9e:	2510      	movs	r5, #16
   88da0:	2002      	movs	r0, #2
   88da2:	2318      	movs	r3, #24
   88da4:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 89290 <_malloc_r+0x50c>
   88da8:	4443      	add	r3, r8
   88daa:	685c      	ldr	r4, [r3, #4]
   88dac:	f1a3 0208 	sub.w	r2, r3, #8
   88db0:	4294      	cmp	r4, r2
   88db2:	f000 80b4 	beq.w	88f1e <_malloc_r+0x19a>
   88db6:	6863      	ldr	r3, [r4, #4]
   88db8:	68e1      	ldr	r1, [r4, #12]
   88dba:	f023 0303 	bic.w	r3, r3, #3
   88dbe:	4423      	add	r3, r4
   88dc0:	685a      	ldr	r2, [r3, #4]
   88dc2:	68a5      	ldr	r5, [r4, #8]
   88dc4:	f042 0201 	orr.w	r2, r2, #1
   88dc8:	60e9      	str	r1, [r5, #12]
   88dca:	4630      	mov	r0, r6
   88dcc:	608d      	str	r5, [r1, #8]
   88dce:	3408      	adds	r4, #8
   88dd0:	605a      	str	r2, [r3, #4]
   88dd2:	f000 fb4b 	bl	8946c <__malloc_unlock>
   88dd6:	4620      	mov	r0, r4
   88dd8:	b003      	add	sp, #12
   88dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88dde:	f035 0507 	bics.w	r5, r5, #7
   88de2:	f100 8090 	bmi.w	88f06 <_malloc_r+0x182>
   88de6:	42a9      	cmp	r1, r5
   88de8:	f200 808d 	bhi.w	88f06 <_malloc_r+0x182>
   88dec:	f000 fb38 	bl	89460 <__malloc_lock>
   88df0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   88df4:	f0c0 8185 	bcc.w	89102 <_malloc_r+0x37e>
   88df8:	0a6b      	lsrs	r3, r5, #9
   88dfa:	f000 808b 	beq.w	88f14 <_malloc_r+0x190>
   88dfe:	2b04      	cmp	r3, #4
   88e00:	f200 815b 	bhi.w	890ba <_malloc_r+0x336>
   88e04:	09ab      	lsrs	r3, r5, #6
   88e06:	f103 0039 	add.w	r0, r3, #57	; 0x39
   88e0a:	f103 0738 	add.w	r7, r3, #56	; 0x38
   88e0e:	00c1      	lsls	r1, r0, #3
   88e10:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 89290 <_malloc_r+0x50c>
   88e14:	4441      	add	r1, r8
   88e16:	684c      	ldr	r4, [r1, #4]
   88e18:	3908      	subs	r1, #8
   88e1a:	42a1      	cmp	r1, r4
   88e1c:	d106      	bne.n	88e2c <_malloc_r+0xa8>
   88e1e:	e00c      	b.n	88e3a <_malloc_r+0xb6>
   88e20:	2a00      	cmp	r2, #0
   88e22:	f280 8122 	bge.w	8906a <_malloc_r+0x2e6>
   88e26:	68e4      	ldr	r4, [r4, #12]
   88e28:	42a1      	cmp	r1, r4
   88e2a:	d006      	beq.n	88e3a <_malloc_r+0xb6>
   88e2c:	6863      	ldr	r3, [r4, #4]
   88e2e:	f023 0303 	bic.w	r3, r3, #3
   88e32:	1b5a      	subs	r2, r3, r5
   88e34:	2a0f      	cmp	r2, #15
   88e36:	ddf3      	ble.n	88e20 <_malloc_r+0x9c>
   88e38:	4638      	mov	r0, r7
   88e3a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   88e3e:	f8df c454 	ldr.w	ip, [pc, #1108]	; 89294 <_malloc_r+0x510>
   88e42:	4564      	cmp	r4, ip
   88e44:	d077      	beq.n	88f36 <_malloc_r+0x1b2>
   88e46:	6862      	ldr	r2, [r4, #4]
   88e48:	f022 0203 	bic.w	r2, r2, #3
   88e4c:	1b53      	subs	r3, r2, r5
   88e4e:	2b0f      	cmp	r3, #15
   88e50:	f300 8165 	bgt.w	8911e <_malloc_r+0x39a>
   88e54:	2b00      	cmp	r3, #0
   88e56:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   88e5a:	f280 8156 	bge.w	8910a <_malloc_r+0x386>
   88e5e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   88e62:	f080 8106 	bcs.w	89072 <_malloc_r+0x2ee>
   88e66:	2101      	movs	r1, #1
   88e68:	08d3      	lsrs	r3, r2, #3
   88e6a:	0952      	lsrs	r2, r2, #5
   88e6c:	440b      	add	r3, r1
   88e6e:	fa01 f202 	lsl.w	r2, r1, r2
   88e72:	f8d8 1004 	ldr.w	r1, [r8, #4]
   88e76:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   88e7a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   88e7e:	430a      	orrs	r2, r1
   88e80:	f1ae 0108 	sub.w	r1, lr, #8
   88e84:	e9c4 7102 	strd	r7, r1, [r4, #8]
   88e88:	f8c8 2004 	str.w	r2, [r8, #4]
   88e8c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   88e90:	60fc      	str	r4, [r7, #12]
   88e92:	2101      	movs	r1, #1
   88e94:	1083      	asrs	r3, r0, #2
   88e96:	4099      	lsls	r1, r3
   88e98:	4291      	cmp	r1, r2
   88e9a:	d853      	bhi.n	88f44 <_malloc_r+0x1c0>
   88e9c:	4211      	tst	r1, r2
   88e9e:	d106      	bne.n	88eae <_malloc_r+0x12a>
   88ea0:	f020 0003 	bic.w	r0, r0, #3
   88ea4:	0049      	lsls	r1, r1, #1
   88ea6:	4211      	tst	r1, r2
   88ea8:	f100 0004 	add.w	r0, r0, #4
   88eac:	d0fa      	beq.n	88ea4 <_malloc_r+0x120>
   88eae:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   88eb2:	464c      	mov	r4, r9
   88eb4:	4686      	mov	lr, r0
   88eb6:	68e7      	ldr	r7, [r4, #12]
   88eb8:	42bc      	cmp	r4, r7
   88eba:	d107      	bne.n	88ecc <_malloc_r+0x148>
   88ebc:	e109      	b.n	890d2 <_malloc_r+0x34e>
   88ebe:	2b00      	cmp	r3, #0
   88ec0:	f280 8110 	bge.w	890e4 <_malloc_r+0x360>
   88ec4:	68ff      	ldr	r7, [r7, #12]
   88ec6:	42bc      	cmp	r4, r7
   88ec8:	f000 8103 	beq.w	890d2 <_malloc_r+0x34e>
   88ecc:	687a      	ldr	r2, [r7, #4]
   88ece:	f022 0203 	bic.w	r2, r2, #3
   88ed2:	1b53      	subs	r3, r2, r5
   88ed4:	2b0f      	cmp	r3, #15
   88ed6:	ddf2      	ble.n	88ebe <_malloc_r+0x13a>
   88ed8:	f045 0e01 	orr.w	lr, r5, #1
   88edc:	4630      	mov	r0, r6
   88ede:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   88ee2:	443d      	add	r5, r7
   88ee4:	f043 0601 	orr.w	r6, r3, #1
   88ee8:	f8c7 e004 	str.w	lr, [r7, #4]
   88eec:	60e1      	str	r1, [r4, #12]
   88eee:	608c      	str	r4, [r1, #8]
   88ef0:	e9c8 5504 	strd	r5, r5, [r8, #16]
   88ef4:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   88ef8:	606e      	str	r6, [r5, #4]
   88efa:	50bb      	str	r3, [r7, r2]
   88efc:	f000 fab6 	bl	8946c <__malloc_unlock>
   88f00:	f107 0408 	add.w	r4, r7, #8
   88f04:	e002      	b.n	88f0c <_malloc_r+0x188>
   88f06:	230c      	movs	r3, #12
   88f08:	2400      	movs	r4, #0
   88f0a:	6033      	str	r3, [r6, #0]
   88f0c:	4620      	mov	r0, r4
   88f0e:	b003      	add	sp, #12
   88f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f14:	f44f 7100 	mov.w	r1, #512	; 0x200
   88f18:	2040      	movs	r0, #64	; 0x40
   88f1a:	273f      	movs	r7, #63	; 0x3f
   88f1c:	e778      	b.n	88e10 <_malloc_r+0x8c>
   88f1e:	68dc      	ldr	r4, [r3, #12]
   88f20:	42a3      	cmp	r3, r4
   88f22:	bf08      	it	eq
   88f24:	3002      	addeq	r0, #2
   88f26:	f47f af46 	bne.w	88db6 <_malloc_r+0x32>
   88f2a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   88f2e:	f8df c364 	ldr.w	ip, [pc, #868]	; 89294 <_malloc_r+0x510>
   88f32:	4564      	cmp	r4, ip
   88f34:	d187      	bne.n	88e46 <_malloc_r+0xc2>
   88f36:	2101      	movs	r1, #1
   88f38:	f8d8 2004 	ldr.w	r2, [r8, #4]
   88f3c:	1083      	asrs	r3, r0, #2
   88f3e:	4099      	lsls	r1, r3
   88f40:	4291      	cmp	r1, r2
   88f42:	d9ab      	bls.n	88e9c <_malloc_r+0x118>
   88f44:	f8d8 4008 	ldr.w	r4, [r8, #8]
   88f48:	6867      	ldr	r7, [r4, #4]
   88f4a:	f027 0703 	bic.w	r7, r7, #3
   88f4e:	42bd      	cmp	r5, r7
   88f50:	d802      	bhi.n	88f58 <_malloc_r+0x1d4>
   88f52:	1b7b      	subs	r3, r7, r5
   88f54:	2b0f      	cmp	r3, #15
   88f56:	dc77      	bgt.n	89048 <_malloc_r+0x2c4>
   88f58:	f8df 933c 	ldr.w	r9, [pc, #828]	; 89298 <_malloc_r+0x514>
   88f5c:	4bc8      	ldr	r3, [pc, #800]	; (89280 <_malloc_r+0x4fc>)
   88f5e:	f8d9 2000 	ldr.w	r2, [r9]
   88f62:	681b      	ldr	r3, [r3, #0]
   88f64:	3201      	adds	r2, #1
   88f66:	442b      	add	r3, r5
   88f68:	eb04 0a07 	add.w	sl, r4, r7
   88f6c:	f000 8124 	beq.w	891b8 <_malloc_r+0x434>
   88f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   88f74:	330f      	adds	r3, #15
   88f76:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   88f7a:	f02b 0b0f 	bic.w	fp, fp, #15
   88f7e:	4659      	mov	r1, fp
   88f80:	4630      	mov	r0, r6
   88f82:	f001 f81d 	bl	89fc0 <_sbrk_r>
   88f86:	1c41      	adds	r1, r0, #1
   88f88:	4602      	mov	r2, r0
   88f8a:	f000 80e1 	beq.w	89150 <_malloc_r+0x3cc>
   88f8e:	4582      	cmp	sl, r0
   88f90:	f200 80dc 	bhi.w	8914c <_malloc_r+0x3c8>
   88f94:	4bbb      	ldr	r3, [pc, #748]	; (89284 <_malloc_r+0x500>)
   88f96:	6819      	ldr	r1, [r3, #0]
   88f98:	4459      	add	r1, fp
   88f9a:	4608      	mov	r0, r1
   88f9c:	6019      	str	r1, [r3, #0]
   88f9e:	f000 8141 	beq.w	89224 <_malloc_r+0x4a0>
   88fa2:	f8d9 1000 	ldr.w	r1, [r9]
   88fa6:	9301      	str	r3, [sp, #4]
   88fa8:	3101      	adds	r1, #1
   88faa:	bf1b      	ittet	ne
   88fac:	eba2 0a0a 	subne.w	sl, r2, sl
   88fb0:	4450      	addne	r0, sl
   88fb2:	f8c9 2000 	streq.w	r2, [r9]
   88fb6:	6018      	strne	r0, [r3, #0]
   88fb8:	f012 0a07 	ands.w	sl, r2, #7
   88fbc:	f000 810a 	beq.w	891d4 <_malloc_r+0x450>
   88fc0:	f1ca 0108 	rsb	r1, sl, #8
   88fc4:	440a      	add	r2, r1
   88fc6:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   88fca:	4493      	add	fp, r2
   88fcc:	3108      	adds	r1, #8
   88fce:	eba1 010b 	sub.w	r1, r1, fp
   88fd2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   88fd6:	4649      	mov	r1, r9
   88fd8:	4630      	mov	r0, r6
   88fda:	9200      	str	r2, [sp, #0]
   88fdc:	f000 fff0 	bl	89fc0 <_sbrk_r>
   88fe0:	1c42      	adds	r2, r0, #1
   88fe2:	e9dd 2300 	ldrd	r2, r3, [sp]
   88fe6:	f000 8143 	beq.w	89270 <_malloc_r+0x4ec>
   88fea:	1a80      	subs	r0, r0, r2
   88fec:	eb00 0b09 	add.w	fp, r0, r9
   88ff0:	6819      	ldr	r1, [r3, #0]
   88ff2:	f04b 0001 	orr.w	r0, fp, #1
   88ff6:	4449      	add	r1, r9
   88ff8:	4544      	cmp	r4, r8
   88ffa:	f8c8 2008 	str.w	r2, [r8, #8]
   88ffe:	6019      	str	r1, [r3, #0]
   89000:	6050      	str	r0, [r2, #4]
   89002:	f000 811c 	beq.w	8923e <_malloc_r+0x4ba>
   89006:	2f0f      	cmp	r7, #15
   89008:	f240 811b 	bls.w	89242 <_malloc_r+0x4be>
   8900c:	f04f 0c05 	mov.w	ip, #5
   89010:	6860      	ldr	r0, [r4, #4]
   89012:	3f0c      	subs	r7, #12
   89014:	f027 0707 	bic.w	r7, r7, #7
   89018:	f000 0001 	and.w	r0, r0, #1
   8901c:	4338      	orrs	r0, r7
   8901e:	eb04 0e07 	add.w	lr, r4, r7
   89022:	2f0f      	cmp	r7, #15
   89024:	6060      	str	r0, [r4, #4]
   89026:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8902a:	f200 8137 	bhi.w	8929c <_malloc_r+0x518>
   8902e:	4614      	mov	r4, r2
   89030:	6850      	ldr	r0, [r2, #4]
   89032:	4b95      	ldr	r3, [pc, #596]	; (89288 <_malloc_r+0x504>)
   89034:	681a      	ldr	r2, [r3, #0]
   89036:	428a      	cmp	r2, r1
   89038:	bf38      	it	cc
   8903a:	6019      	strcc	r1, [r3, #0]
   8903c:	4b93      	ldr	r3, [pc, #588]	; (8928c <_malloc_r+0x508>)
   8903e:	681a      	ldr	r2, [r3, #0]
   89040:	428a      	cmp	r2, r1
   89042:	bf38      	it	cc
   89044:	6019      	strcc	r1, [r3, #0]
   89046:	e086      	b.n	89156 <_malloc_r+0x3d2>
   89048:	f045 0201 	orr.w	r2, r5, #1
   8904c:	f043 0301 	orr.w	r3, r3, #1
   89050:	4425      	add	r5, r4
   89052:	6062      	str	r2, [r4, #4]
   89054:	4630      	mov	r0, r6
   89056:	f8c8 5008 	str.w	r5, [r8, #8]
   8905a:	3408      	adds	r4, #8
   8905c:	606b      	str	r3, [r5, #4]
   8905e:	f000 fa05 	bl	8946c <__malloc_unlock>
   89062:	4620      	mov	r0, r4
   89064:	b003      	add	sp, #12
   89066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8906a:	4423      	add	r3, r4
   8906c:	685a      	ldr	r2, [r3, #4]
   8906e:	68e1      	ldr	r1, [r4, #12]
   89070:	e6a7      	b.n	88dc2 <_malloc_r+0x3e>
   89072:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   89076:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8907a:	d361      	bcc.n	89140 <_malloc_r+0x3bc>
   8907c:	2b14      	cmp	r3, #20
   8907e:	f200 80ba 	bhi.w	891f6 <_malloc_r+0x472>
   89082:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   89086:	00c9      	lsls	r1, r1, #3
   89088:	335b      	adds	r3, #91	; 0x5b
   8908a:	eb08 0701 	add.w	r7, r8, r1
   8908e:	f858 1001 	ldr.w	r1, [r8, r1]
   89092:	3f08      	subs	r7, #8
   89094:	428f      	cmp	r7, r1
   89096:	f000 8092 	beq.w	891be <_malloc_r+0x43a>
   8909a:	684b      	ldr	r3, [r1, #4]
   8909c:	f023 0303 	bic.w	r3, r3, #3
   890a0:	4293      	cmp	r3, r2
   890a2:	d902      	bls.n	890aa <_malloc_r+0x326>
   890a4:	6889      	ldr	r1, [r1, #8]
   890a6:	428f      	cmp	r7, r1
   890a8:	d1f7      	bne.n	8909a <_malloc_r+0x316>
   890aa:	68cf      	ldr	r7, [r1, #12]
   890ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
   890b0:	e9c4 1702 	strd	r1, r7, [r4, #8]
   890b4:	60bc      	str	r4, [r7, #8]
   890b6:	60cc      	str	r4, [r1, #12]
   890b8:	e6eb      	b.n	88e92 <_malloc_r+0x10e>
   890ba:	2b14      	cmp	r3, #20
   890bc:	d959      	bls.n	89172 <_malloc_r+0x3ee>
   890be:	2b54      	cmp	r3, #84	; 0x54
   890c0:	f200 80a1 	bhi.w	89206 <_malloc_r+0x482>
   890c4:	0b2b      	lsrs	r3, r5, #12
   890c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   890ca:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   890ce:	00c1      	lsls	r1, r0, #3
   890d0:	e69e      	b.n	88e10 <_malloc_r+0x8c>
   890d2:	f10e 0e01 	add.w	lr, lr, #1
   890d6:	f01e 0f03 	tst.w	lr, #3
   890da:	f104 0408 	add.w	r4, r4, #8
   890de:	f47f aeea 	bne.w	88eb6 <_malloc_r+0x132>
   890e2:	e051      	b.n	89188 <_malloc_r+0x404>
   890e4:	463c      	mov	r4, r7
   890e6:	443a      	add	r2, r7
   890e8:	6853      	ldr	r3, [r2, #4]
   890ea:	68f9      	ldr	r1, [r7, #12]
   890ec:	f854 5f08 	ldr.w	r5, [r4, #8]!
   890f0:	f043 0301 	orr.w	r3, r3, #1
   890f4:	6053      	str	r3, [r2, #4]
   890f6:	4630      	mov	r0, r6
   890f8:	60e9      	str	r1, [r5, #12]
   890fa:	608d      	str	r5, [r1, #8]
   890fc:	f000 f9b6 	bl	8946c <__malloc_unlock>
   89100:	e704      	b.n	88f0c <_malloc_r+0x188>
   89102:	08e8      	lsrs	r0, r5, #3
   89104:	f105 0308 	add.w	r3, r5, #8
   89108:	e64c      	b.n	88da4 <_malloc_r+0x20>
   8910a:	4422      	add	r2, r4
   8910c:	6853      	ldr	r3, [r2, #4]
   8910e:	4630      	mov	r0, r6
   89110:	f043 0301 	orr.w	r3, r3, #1
   89114:	6053      	str	r3, [r2, #4]
   89116:	3408      	adds	r4, #8
   89118:	f000 f9a8 	bl	8946c <__malloc_unlock>
   8911c:	e6f6      	b.n	88f0c <_malloc_r+0x188>
   8911e:	f045 0701 	orr.w	r7, r5, #1
   89122:	f043 0101 	orr.w	r1, r3, #1
   89126:	4425      	add	r5, r4
   89128:	6067      	str	r7, [r4, #4]
   8912a:	4630      	mov	r0, r6
   8912c:	e9c8 5504 	strd	r5, r5, [r8, #16]
   89130:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   89134:	6069      	str	r1, [r5, #4]
   89136:	50a3      	str	r3, [r4, r2]
   89138:	f000 f998 	bl	8946c <__malloc_unlock>
   8913c:	3408      	adds	r4, #8
   8913e:	e6e5      	b.n	88f0c <_malloc_r+0x188>
   89140:	0993      	lsrs	r3, r2, #6
   89142:	f103 0139 	add.w	r1, r3, #57	; 0x39
   89146:	00c9      	lsls	r1, r1, #3
   89148:	3338      	adds	r3, #56	; 0x38
   8914a:	e79e      	b.n	8908a <_malloc_r+0x306>
   8914c:	4544      	cmp	r4, r8
   8914e:	d064      	beq.n	8921a <_malloc_r+0x496>
   89150:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89154:	6860      	ldr	r0, [r4, #4]
   89156:	f020 0b03 	bic.w	fp, r0, #3
   8915a:	455d      	cmp	r5, fp
   8915c:	ebab 0305 	sub.w	r3, fp, r5
   89160:	d802      	bhi.n	89168 <_malloc_r+0x3e4>
   89162:	2b0f      	cmp	r3, #15
   89164:	f73f af70 	bgt.w	89048 <_malloc_r+0x2c4>
   89168:	4630      	mov	r0, r6
   8916a:	f000 f97f 	bl	8946c <__malloc_unlock>
   8916e:	2400      	movs	r4, #0
   89170:	e6cc      	b.n	88f0c <_malloc_r+0x188>
   89172:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   89176:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8917a:	00c1      	lsls	r1, r0, #3
   8917c:	e648      	b.n	88e10 <_malloc_r+0x8c>
   8917e:	f859 3908 	ldr.w	r3, [r9], #-8
   89182:	454b      	cmp	r3, r9
   89184:	f040 80a9 	bne.w	892da <_malloc_r+0x556>
   89188:	f010 0f03 	tst.w	r0, #3
   8918c:	f100 30ff 	add.w	r0, r0, #4294967295
   89190:	d1f5      	bne.n	8917e <_malloc_r+0x3fa>
   89192:	f8d8 3004 	ldr.w	r3, [r8, #4]
   89196:	ea23 0301 	bic.w	r3, r3, r1
   8919a:	f8c8 3004 	str.w	r3, [r8, #4]
   8919e:	0049      	lsls	r1, r1, #1
   891a0:	4299      	cmp	r1, r3
   891a2:	f63f aecf 	bhi.w	88f44 <_malloc_r+0x1c0>
   891a6:	b919      	cbnz	r1, 891b0 <_malloc_r+0x42c>
   891a8:	e6cc      	b.n	88f44 <_malloc_r+0x1c0>
   891aa:	0049      	lsls	r1, r1, #1
   891ac:	f10e 0e04 	add.w	lr, lr, #4
   891b0:	4219      	tst	r1, r3
   891b2:	d0fa      	beq.n	891aa <_malloc_r+0x426>
   891b4:	4670      	mov	r0, lr
   891b6:	e67a      	b.n	88eae <_malloc_r+0x12a>
   891b8:	f103 0b10 	add.w	fp, r3, #16
   891bc:	e6df      	b.n	88f7e <_malloc_r+0x1fa>
   891be:	f04f 0e01 	mov.w	lr, #1
   891c2:	109a      	asrs	r2, r3, #2
   891c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   891c8:	fa0e f202 	lsl.w	r2, lr, r2
   891cc:	431a      	orrs	r2, r3
   891ce:	f8c8 2004 	str.w	r2, [r8, #4]
   891d2:	e76d      	b.n	890b0 <_malloc_r+0x32c>
   891d4:	eb02 010b 	add.w	r1, r2, fp
   891d8:	4249      	negs	r1, r1
   891da:	f3c1 090b 	ubfx	r9, r1, #0, #12
   891de:	4649      	mov	r1, r9
   891e0:	4630      	mov	r0, r6
   891e2:	9200      	str	r2, [sp, #0]
   891e4:	f000 feec 	bl	89fc0 <_sbrk_r>
   891e8:	1c43      	adds	r3, r0, #1
   891ea:	e9dd 2300 	ldrd	r2, r3, [sp]
   891ee:	f47f aefc 	bne.w	88fea <_malloc_r+0x266>
   891f2:	46d1      	mov	r9, sl
   891f4:	e6fc      	b.n	88ff0 <_malloc_r+0x26c>
   891f6:	2b54      	cmp	r3, #84	; 0x54
   891f8:	d826      	bhi.n	89248 <_malloc_r+0x4c4>
   891fa:	0b13      	lsrs	r3, r2, #12
   891fc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   89200:	00c9      	lsls	r1, r1, #3
   89202:	336e      	adds	r3, #110	; 0x6e
   89204:	e741      	b.n	8908a <_malloc_r+0x306>
   89206:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8920a:	d826      	bhi.n	8925a <_malloc_r+0x4d6>
   8920c:	0beb      	lsrs	r3, r5, #15
   8920e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   89212:	f103 0777 	add.w	r7, r3, #119	; 0x77
   89216:	00c1      	lsls	r1, r0, #3
   89218:	e5fa      	b.n	88e10 <_malloc_r+0x8c>
   8921a:	4b1a      	ldr	r3, [pc, #104]	; (89284 <_malloc_r+0x500>)
   8921c:	6818      	ldr	r0, [r3, #0]
   8921e:	4458      	add	r0, fp
   89220:	6018      	str	r0, [r3, #0]
   89222:	e6be      	b.n	88fa2 <_malloc_r+0x21e>
   89224:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   89228:	f1bc 0f00 	cmp.w	ip, #0
   8922c:	f47f aeb9 	bne.w	88fa2 <_malloc_r+0x21e>
   89230:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89234:	44bb      	add	fp, r7
   89236:	f04b 0001 	orr.w	r0, fp, #1
   8923a:	6060      	str	r0, [r4, #4]
   8923c:	e6f9      	b.n	89032 <_malloc_r+0x2ae>
   8923e:	4614      	mov	r4, r2
   89240:	e6f7      	b.n	89032 <_malloc_r+0x2ae>
   89242:	2301      	movs	r3, #1
   89244:	6053      	str	r3, [r2, #4]
   89246:	e78f      	b.n	89168 <_malloc_r+0x3e4>
   89248:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8924c:	d832      	bhi.n	892b4 <_malloc_r+0x530>
   8924e:	0bd3      	lsrs	r3, r2, #15
   89250:	f103 0178 	add.w	r1, r3, #120	; 0x78
   89254:	00c9      	lsls	r1, r1, #3
   89256:	3377      	adds	r3, #119	; 0x77
   89258:	e717      	b.n	8908a <_malloc_r+0x306>
   8925a:	f240 5254 	movw	r2, #1364	; 0x554
   8925e:	4293      	cmp	r3, r2
   89260:	d832      	bhi.n	892c8 <_malloc_r+0x544>
   89262:	0cab      	lsrs	r3, r5, #18
   89264:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   89268:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8926c:	00c1      	lsls	r1, r0, #3
   8926e:	e5cf      	b.n	88e10 <_malloc_r+0x8c>
   89270:	f1aa 0a08 	sub.w	sl, sl, #8
   89274:	44d3      	add	fp, sl
   89276:	f04f 0900 	mov.w	r9, #0
   8927a:	ebab 0b02 	sub.w	fp, fp, r2
   8927e:	e6b7      	b.n	88ff0 <_malloc_r+0x26c>
   89280:	20000fb0 	.word	0x20000fb0
   89284:	20000f80 	.word	0x20000f80
   89288:	20000fa8 	.word	0x20000fa8
   8928c:	20000fac 	.word	0x20000fac
   89290:	20000970 	.word	0x20000970
   89294:	20000978 	.word	0x20000978
   89298:	20000d78 	.word	0x20000d78
   8929c:	f104 0108 	add.w	r1, r4, #8
   892a0:	4630      	mov	r0, r6
   892a2:	9300      	str	r3, [sp, #0]
   892a4:	f7ff fa3c 	bl	88720 <_free_r>
   892a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   892ac:	9b00      	ldr	r3, [sp, #0]
   892ae:	6860      	ldr	r0, [r4, #4]
   892b0:	6819      	ldr	r1, [r3, #0]
   892b2:	e6be      	b.n	89032 <_malloc_r+0x2ae>
   892b4:	f240 5154 	movw	r1, #1364	; 0x554
   892b8:	428b      	cmp	r3, r1
   892ba:	d80a      	bhi.n	892d2 <_malloc_r+0x54e>
   892bc:	0c93      	lsrs	r3, r2, #18
   892be:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   892c2:	00c9      	lsls	r1, r1, #3
   892c4:	337c      	adds	r3, #124	; 0x7c
   892c6:	e6e0      	b.n	8908a <_malloc_r+0x306>
   892c8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   892cc:	207f      	movs	r0, #127	; 0x7f
   892ce:	277e      	movs	r7, #126	; 0x7e
   892d0:	e59e      	b.n	88e10 <_malloc_r+0x8c>
   892d2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   892d6:	237e      	movs	r3, #126	; 0x7e
   892d8:	e6d7      	b.n	8908a <_malloc_r+0x306>
   892da:	f8d8 3004 	ldr.w	r3, [r8, #4]
   892de:	e75e      	b.n	8919e <_malloc_r+0x41a>

000892e0 <__ascii_mbtowc>:
   892e0:	b082      	sub	sp, #8
   892e2:	b149      	cbz	r1, 892f8 <__ascii_mbtowc+0x18>
   892e4:	b15a      	cbz	r2, 892fe <__ascii_mbtowc+0x1e>
   892e6:	b16b      	cbz	r3, 89304 <__ascii_mbtowc+0x24>
   892e8:	7813      	ldrb	r3, [r2, #0]
   892ea:	600b      	str	r3, [r1, #0]
   892ec:	7812      	ldrb	r2, [r2, #0]
   892ee:	1e10      	subs	r0, r2, #0
   892f0:	bf18      	it	ne
   892f2:	2001      	movne	r0, #1
   892f4:	b002      	add	sp, #8
   892f6:	4770      	bx	lr
   892f8:	a901      	add	r1, sp, #4
   892fa:	2a00      	cmp	r2, #0
   892fc:	d1f3      	bne.n	892e6 <__ascii_mbtowc+0x6>
   892fe:	4610      	mov	r0, r2
   89300:	b002      	add	sp, #8
   89302:	4770      	bx	lr
   89304:	f06f 0001 	mvn.w	r0, #1
   89308:	e7f4      	b.n	892f4 <__ascii_mbtowc+0x14>
   8930a:	bf00      	nop

0008930c <memchr>:
   8930c:	b470      	push	{r4, r5, r6}
   8930e:	0784      	lsls	r4, r0, #30
   89310:	b2cd      	uxtb	r5, r1
   89312:	d012      	beq.n	8933a <memchr+0x2e>
   89314:	4603      	mov	r3, r0
   89316:	1e54      	subs	r4, r2, #1
   89318:	b92a      	cbnz	r2, 89326 <memchr+0x1a>
   8931a:	e00b      	b.n	89334 <memchr+0x28>
   8931c:	079a      	lsls	r2, r3, #30
   8931e:	4618      	mov	r0, r3
   89320:	d00c      	beq.n	8933c <memchr+0x30>
   89322:	3c01      	subs	r4, #1
   89324:	d306      	bcc.n	89334 <memchr+0x28>
   89326:	4618      	mov	r0, r3
   89328:	f813 2b01 	ldrb.w	r2, [r3], #1
   8932c:	42aa      	cmp	r2, r5
   8932e:	d1f5      	bne.n	8931c <memchr+0x10>
   89330:	bc70      	pop	{r4, r5, r6}
   89332:	4770      	bx	lr
   89334:	2000      	movs	r0, #0
   89336:	bc70      	pop	{r4, r5, r6}
   89338:	4770      	bx	lr
   8933a:	4614      	mov	r4, r2
   8933c:	2c03      	cmp	r4, #3
   8933e:	d80d      	bhi.n	8935c <memchr+0x50>
   89340:	2c00      	cmp	r4, #0
   89342:	d0f7      	beq.n	89334 <memchr+0x28>
   89344:	4602      	mov	r2, r0
   89346:	1903      	adds	r3, r0, r4
   89348:	e001      	b.n	8934e <memchr+0x42>
   8934a:	429a      	cmp	r2, r3
   8934c:	d0f2      	beq.n	89334 <memchr+0x28>
   8934e:	4610      	mov	r0, r2
   89350:	f812 1b01 	ldrb.w	r1, [r2], #1
   89354:	42a9      	cmp	r1, r5
   89356:	d1f8      	bne.n	8934a <memchr+0x3e>
   89358:	bc70      	pop	{r4, r5, r6}
   8935a:	4770      	bx	lr
   8935c:	4606      	mov	r6, r0
   8935e:	020a      	lsls	r2, r1, #8
   89360:	b292      	uxth	r2, r2
   89362:	432a      	orrs	r2, r5
   89364:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   89368:	6833      	ldr	r3, [r6, #0]
   8936a:	4630      	mov	r0, r6
   8936c:	4053      	eors	r3, r2
   8936e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   89372:	ea21 0303 	bic.w	r3, r1, r3
   89376:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8937a:	f106 0604 	add.w	r6, r6, #4
   8937e:	d1e1      	bne.n	89344 <memchr+0x38>
   89380:	3c04      	subs	r4, #4
   89382:	2c03      	cmp	r4, #3
   89384:	4630      	mov	r0, r6
   89386:	d8ef      	bhi.n	89368 <memchr+0x5c>
   89388:	e7da      	b.n	89340 <memchr+0x34>
   8938a:	bf00      	nop

0008938c <memmove>:
   8938c:	4288      	cmp	r0, r1
   8938e:	b4f0      	push	{r4, r5, r6, r7}
   89390:	d90d      	bls.n	893ae <memmove+0x22>
   89392:	188b      	adds	r3, r1, r2
   89394:	4283      	cmp	r3, r0
   89396:	d90a      	bls.n	893ae <memmove+0x22>
   89398:	1884      	adds	r4, r0, r2
   8939a:	b132      	cbz	r2, 893aa <memmove+0x1e>
   8939c:	4622      	mov	r2, r4
   8939e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   893a2:	4299      	cmp	r1, r3
   893a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   893a8:	d1f9      	bne.n	8939e <memmove+0x12>
   893aa:	bcf0      	pop	{r4, r5, r6, r7}
   893ac:	4770      	bx	lr
   893ae:	2a0f      	cmp	r2, #15
   893b0:	d80e      	bhi.n	893d0 <memmove+0x44>
   893b2:	4603      	mov	r3, r0
   893b4:	1e54      	subs	r4, r2, #1
   893b6:	2a00      	cmp	r2, #0
   893b8:	d0f7      	beq.n	893aa <memmove+0x1e>
   893ba:	3401      	adds	r4, #1
   893bc:	440c      	add	r4, r1
   893be:	3b01      	subs	r3, #1
   893c0:	f811 2b01 	ldrb.w	r2, [r1], #1
   893c4:	42a1      	cmp	r1, r4
   893c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   893ca:	d1f9      	bne.n	893c0 <memmove+0x34>
   893cc:	bcf0      	pop	{r4, r5, r6, r7}
   893ce:	4770      	bx	lr
   893d0:	ea40 0301 	orr.w	r3, r0, r1
   893d4:	079b      	lsls	r3, r3, #30
   893d6:	d13e      	bne.n	89456 <memmove+0xca>
   893d8:	f1a2 0310 	sub.w	r3, r2, #16
   893dc:	f023 040f 	bic.w	r4, r3, #15
   893e0:	f101 0720 	add.w	r7, r1, #32
   893e4:	4427      	add	r7, r4
   893e6:	091b      	lsrs	r3, r3, #4
   893e8:	f101 0410 	add.w	r4, r1, #16
   893ec:	f100 0510 	add.w	r5, r0, #16
   893f0:	f854 6c10 	ldr.w	r6, [r4, #-16]
   893f4:	3410      	adds	r4, #16
   893f6:	f845 6c10 	str.w	r6, [r5, #-16]
   893fa:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   893fe:	3510      	adds	r5, #16
   89400:	f845 6c1c 	str.w	r6, [r5, #-28]
   89404:	f854 6c18 	ldr.w	r6, [r4, #-24]
   89408:	f845 6c18 	str.w	r6, [r5, #-24]
   8940c:	f854 6c14 	ldr.w	r6, [r4, #-20]
   89410:	42bc      	cmp	r4, r7
   89412:	f845 6c14 	str.w	r6, [r5, #-20]
   89416:	d1eb      	bne.n	893f0 <memmove+0x64>
   89418:	3301      	adds	r3, #1
   8941a:	f012 0f0c 	tst.w	r2, #12
   8941e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   89422:	f002 040f 	and.w	r4, r2, #15
   89426:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8942a:	d017      	beq.n	8945c <memmove+0xd0>
   8942c:	460e      	mov	r6, r1
   8942e:	3c04      	subs	r4, #4
   89430:	f024 0c03 	bic.w	ip, r4, #3
   89434:	08a5      	lsrs	r5, r4, #2
   89436:	449c      	add	ip, r3
   89438:	1f1c      	subs	r4, r3, #4
   8943a:	f856 7b04 	ldr.w	r7, [r6], #4
   8943e:	f844 7f04 	str.w	r7, [r4, #4]!
   89442:	4564      	cmp	r4, ip
   89444:	d1f9      	bne.n	8943a <memmove+0xae>
   89446:	1c6c      	adds	r4, r5, #1
   89448:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8944c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   89450:	f002 0203 	and.w	r2, r2, #3
   89454:	e7ae      	b.n	893b4 <memmove+0x28>
   89456:	4603      	mov	r3, r0
   89458:	1e54      	subs	r4, r2, #1
   8945a:	e7ae      	b.n	893ba <memmove+0x2e>
   8945c:	4622      	mov	r2, r4
   8945e:	e7a9      	b.n	893b4 <memmove+0x28>

00089460 <__malloc_lock>:
   89460:	4801      	ldr	r0, [pc, #4]	; (89468 <__malloc_lock+0x8>)
   89462:	f7ff bc0b 	b.w	88c7c <__retarget_lock_acquire_recursive>
   89466:	bf00      	nop
   89468:	2000187c 	.word	0x2000187c

0008946c <__malloc_unlock>:
   8946c:	4801      	ldr	r0, [pc, #4]	; (89474 <__malloc_unlock+0x8>)
   8946e:	f7ff bc07 	b.w	88c80 <__retarget_lock_release_recursive>
   89472:	bf00      	nop
   89474:	2000187c 	.word	0x2000187c

00089478 <_Balloc>:
   89478:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8947a:	b570      	push	{r4, r5, r6, lr}
   8947c:	4605      	mov	r5, r0
   8947e:	460c      	mov	r4, r1
   89480:	b14b      	cbz	r3, 89496 <_Balloc+0x1e>
   89482:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   89486:	b180      	cbz	r0, 894aa <_Balloc+0x32>
   89488:	6802      	ldr	r2, [r0, #0]
   8948a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8948e:	2300      	movs	r3, #0
   89490:	e9c0 3303 	strd	r3, r3, [r0, #12]
   89494:	bd70      	pop	{r4, r5, r6, pc}
   89496:	2221      	movs	r2, #33	; 0x21
   89498:	2104      	movs	r1, #4
   8949a:	f000 ff63 	bl	8a364 <_calloc_r>
   8949e:	4603      	mov	r3, r0
   894a0:	64e8      	str	r0, [r5, #76]	; 0x4c
   894a2:	2800      	cmp	r0, #0
   894a4:	d1ed      	bne.n	89482 <_Balloc+0xa>
   894a6:	2000      	movs	r0, #0
   894a8:	bd70      	pop	{r4, r5, r6, pc}
   894aa:	2101      	movs	r1, #1
   894ac:	fa01 f604 	lsl.w	r6, r1, r4
   894b0:	1d72      	adds	r2, r6, #5
   894b2:	4628      	mov	r0, r5
   894b4:	0092      	lsls	r2, r2, #2
   894b6:	f000 ff55 	bl	8a364 <_calloc_r>
   894ba:	2800      	cmp	r0, #0
   894bc:	d0f3      	beq.n	894a6 <_Balloc+0x2e>
   894be:	e9c0 4601 	strd	r4, r6, [r0, #4]
   894c2:	e7e4      	b.n	8948e <_Balloc+0x16>

000894c4 <_Bfree>:
   894c4:	b131      	cbz	r1, 894d4 <_Bfree+0x10>
   894c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   894c8:	684a      	ldr	r2, [r1, #4]
   894ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   894ce:	6008      	str	r0, [r1, #0]
   894d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   894d4:	4770      	bx	lr
   894d6:	bf00      	nop

000894d8 <__multadd>:
   894d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   894dc:	4680      	mov	r8, r0
   894de:	461c      	mov	r4, r3
   894e0:	2000      	movs	r0, #0
   894e2:	460f      	mov	r7, r1
   894e4:	690e      	ldr	r6, [r1, #16]
   894e6:	3114      	adds	r1, #20
   894e8:	680d      	ldr	r5, [r1, #0]
   894ea:	3001      	adds	r0, #1
   894ec:	b2ab      	uxth	r3, r5
   894ee:	fb02 4303 	mla	r3, r2, r3, r4
   894f2:	0c2c      	lsrs	r4, r5, #16
   894f4:	0c1d      	lsrs	r5, r3, #16
   894f6:	fb02 5404 	mla	r4, r2, r4, r5
   894fa:	b29b      	uxth	r3, r3
   894fc:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   89500:	4286      	cmp	r6, r0
   89502:	f841 3b04 	str.w	r3, [r1], #4
   89506:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8950a:	dced      	bgt.n	894e8 <__multadd+0x10>
   8950c:	b13c      	cbz	r4, 8951e <__multadd+0x46>
   8950e:	68bb      	ldr	r3, [r7, #8]
   89510:	42b3      	cmp	r3, r6
   89512:	dd07      	ble.n	89524 <__multadd+0x4c>
   89514:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   89518:	3601      	adds	r6, #1
   8951a:	615c      	str	r4, [r3, #20]
   8951c:	613e      	str	r6, [r7, #16]
   8951e:	4638      	mov	r0, r7
   89520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89524:	6879      	ldr	r1, [r7, #4]
   89526:	4640      	mov	r0, r8
   89528:	3101      	adds	r1, #1
   8952a:	f7ff ffa5 	bl	89478 <_Balloc>
   8952e:	4605      	mov	r5, r0
   89530:	b1b0      	cbz	r0, 89560 <__multadd+0x88>
   89532:	693a      	ldr	r2, [r7, #16]
   89534:	f107 010c 	add.w	r1, r7, #12
   89538:	3202      	adds	r2, #2
   8953a:	0092      	lsls	r2, r2, #2
   8953c:	300c      	adds	r0, #12
   8953e:	f7fa ff8b 	bl	84458 <memcpy>
   89542:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   89546:	687a      	ldr	r2, [r7, #4]
   89548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8954c:	6039      	str	r1, [r7, #0]
   8954e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   89552:	462f      	mov	r7, r5
   89554:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   89558:	3601      	adds	r6, #1
   8955a:	615c      	str	r4, [r3, #20]
   8955c:	613e      	str	r6, [r7, #16]
   8955e:	e7de      	b.n	8951e <__multadd+0x46>
   89560:	4602      	mov	r2, r0
   89562:	21b5      	movs	r1, #181	; 0xb5
   89564:	4b01      	ldr	r3, [pc, #4]	; (8956c <__multadd+0x94>)
   89566:	4802      	ldr	r0, [pc, #8]	; (89570 <__multadd+0x98>)
   89568:	f000 fede 	bl	8a328 <__assert_func>
   8956c:	0008b414 	.word	0x0008b414
   89570:	0008b4b4 	.word	0x0008b4b4

00089574 <__hi0bits>:
   89574:	0c02      	lsrs	r2, r0, #16
   89576:	0412      	lsls	r2, r2, #16
   89578:	4603      	mov	r3, r0
   8957a:	b9ca      	cbnz	r2, 895b0 <__hi0bits+0x3c>
   8957c:	0403      	lsls	r3, r0, #16
   8957e:	2010      	movs	r0, #16
   89580:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   89584:	bf04      	itt	eq
   89586:	021b      	lsleq	r3, r3, #8
   89588:	3008      	addeq	r0, #8
   8958a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8958e:	bf04      	itt	eq
   89590:	011b      	lsleq	r3, r3, #4
   89592:	3004      	addeq	r0, #4
   89594:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   89598:	bf04      	itt	eq
   8959a:	009b      	lsleq	r3, r3, #2
   8959c:	3002      	addeq	r0, #2
   8959e:	2b00      	cmp	r3, #0
   895a0:	db05      	blt.n	895ae <__hi0bits+0x3a>
   895a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   895a6:	f100 0001 	add.w	r0, r0, #1
   895aa:	bf08      	it	eq
   895ac:	2020      	moveq	r0, #32
   895ae:	4770      	bx	lr
   895b0:	2000      	movs	r0, #0
   895b2:	e7e5      	b.n	89580 <__hi0bits+0xc>

000895b4 <__lo0bits>:
   895b4:	6803      	ldr	r3, [r0, #0]
   895b6:	4601      	mov	r1, r0
   895b8:	f013 0207 	ands.w	r2, r3, #7
   895bc:	d007      	beq.n	895ce <__lo0bits+0x1a>
   895be:	07da      	lsls	r2, r3, #31
   895c0:	d420      	bmi.n	89604 <__lo0bits+0x50>
   895c2:	0798      	lsls	r0, r3, #30
   895c4:	d522      	bpl.n	8960c <__lo0bits+0x58>
   895c6:	085b      	lsrs	r3, r3, #1
   895c8:	2001      	movs	r0, #1
   895ca:	600b      	str	r3, [r1, #0]
   895cc:	4770      	bx	lr
   895ce:	b298      	uxth	r0, r3
   895d0:	b1a8      	cbz	r0, 895fe <__lo0bits+0x4a>
   895d2:	4610      	mov	r0, r2
   895d4:	f013 0fff 	tst.w	r3, #255	; 0xff
   895d8:	bf04      	itt	eq
   895da:	0a1b      	lsreq	r3, r3, #8
   895dc:	3008      	addeq	r0, #8
   895de:	071a      	lsls	r2, r3, #28
   895e0:	bf04      	itt	eq
   895e2:	091b      	lsreq	r3, r3, #4
   895e4:	3004      	addeq	r0, #4
   895e6:	079a      	lsls	r2, r3, #30
   895e8:	bf04      	itt	eq
   895ea:	089b      	lsreq	r3, r3, #2
   895ec:	3002      	addeq	r0, #2
   895ee:	07da      	lsls	r2, r3, #31
   895f0:	d403      	bmi.n	895fa <__lo0bits+0x46>
   895f2:	085b      	lsrs	r3, r3, #1
   895f4:	f100 0001 	add.w	r0, r0, #1
   895f8:	d006      	beq.n	89608 <__lo0bits+0x54>
   895fa:	600b      	str	r3, [r1, #0]
   895fc:	4770      	bx	lr
   895fe:	2010      	movs	r0, #16
   89600:	0c1b      	lsrs	r3, r3, #16
   89602:	e7e7      	b.n	895d4 <__lo0bits+0x20>
   89604:	2000      	movs	r0, #0
   89606:	4770      	bx	lr
   89608:	2020      	movs	r0, #32
   8960a:	4770      	bx	lr
   8960c:	089b      	lsrs	r3, r3, #2
   8960e:	2002      	movs	r0, #2
   89610:	600b      	str	r3, [r1, #0]
   89612:	4770      	bx	lr

00089614 <__i2b>:
   89614:	b510      	push	{r4, lr}
   89616:	460c      	mov	r4, r1
   89618:	2101      	movs	r1, #1
   8961a:	f7ff ff2d 	bl	89478 <_Balloc>
   8961e:	4602      	mov	r2, r0
   89620:	b118      	cbz	r0, 8962a <__i2b+0x16>
   89622:	2301      	movs	r3, #1
   89624:	e9c0 3404 	strd	r3, r4, [r0, #16]
   89628:	bd10      	pop	{r4, pc}
   8962a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8962e:	4b02      	ldr	r3, [pc, #8]	; (89638 <__i2b+0x24>)
   89630:	4802      	ldr	r0, [pc, #8]	; (8963c <__i2b+0x28>)
   89632:	f000 fe79 	bl	8a328 <__assert_func>
   89636:	bf00      	nop
   89638:	0008b414 	.word	0x0008b414
   8963c:	0008b4b4 	.word	0x0008b4b4

00089640 <__multiply>:
   89640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89644:	690d      	ldr	r5, [r1, #16]
   89646:	6917      	ldr	r7, [r2, #16]
   89648:	460e      	mov	r6, r1
   8964a:	42bd      	cmp	r5, r7
   8964c:	4614      	mov	r4, r2
   8964e:	b085      	sub	sp, #20
   89650:	db05      	blt.n	8965e <__multiply+0x1e>
   89652:	463a      	mov	r2, r7
   89654:	4623      	mov	r3, r4
   89656:	462f      	mov	r7, r5
   89658:	460c      	mov	r4, r1
   8965a:	4615      	mov	r5, r2
   8965c:	461e      	mov	r6, r3
   8965e:	68a3      	ldr	r3, [r4, #8]
   89660:	6861      	ldr	r1, [r4, #4]
   89662:	eb07 0805 	add.w	r8, r7, r5
   89666:	4543      	cmp	r3, r8
   89668:	bfb8      	it	lt
   8966a:	3101      	addlt	r1, #1
   8966c:	f7ff ff04 	bl	89478 <_Balloc>
   89670:	9001      	str	r0, [sp, #4]
   89672:	2800      	cmp	r0, #0
   89674:	f000 8088 	beq.w	89788 <__multiply+0x148>
   89678:	9b01      	ldr	r3, [sp, #4]
   8967a:	f103 0914 	add.w	r9, r3, #20
   8967e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   89682:	45d1      	cmp	r9, sl
   89684:	d205      	bcs.n	89692 <__multiply+0x52>
   89686:	464b      	mov	r3, r9
   89688:	2200      	movs	r2, #0
   8968a:	f843 2b04 	str.w	r2, [r3], #4
   8968e:	459a      	cmp	sl, r3
   89690:	d8fb      	bhi.n	8968a <__multiply+0x4a>
   89692:	f106 0e14 	add.w	lr, r6, #20
   89696:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8969a:	f104 0314 	add.w	r3, r4, #20
   8969e:	45de      	cmp	lr, fp
   896a0:	461a      	mov	r2, r3
   896a2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   896a6:	d23e      	bcs.n	89726 <__multiply+0xe6>
   896a8:	1b3b      	subs	r3, r7, r4
   896aa:	3b15      	subs	r3, #21
   896ac:	f023 0303 	bic.w	r3, r3, #3
   896b0:	3304      	adds	r3, #4
   896b2:	3415      	adds	r4, #21
   896b4:	42a7      	cmp	r7, r4
   896b6:	bf38      	it	cc
   896b8:	2304      	movcc	r3, #4
   896ba:	e9cd a802 	strd	sl, r8, [sp, #8]
   896be:	4698      	mov	r8, r3
   896c0:	4692      	mov	sl, r2
   896c2:	e003      	b.n	896cc <__multiply+0x8c>
   896c4:	45f3      	cmp	fp, lr
   896c6:	f109 0904 	add.w	r9, r9, #4
   896ca:	d92a      	bls.n	89722 <__multiply+0xe2>
   896cc:	f85e 0b04 	ldr.w	r0, [lr], #4
   896d0:	b286      	uxth	r6, r0
   896d2:	2e00      	cmp	r6, #0
   896d4:	d138      	bne.n	89748 <__multiply+0x108>
   896d6:	0c00      	lsrs	r0, r0, #16
   896d8:	d0f4      	beq.n	896c4 <__multiply+0x84>
   896da:	f8d9 3000 	ldr.w	r3, [r9]
   896de:	4654      	mov	r4, sl
   896e0:	461e      	mov	r6, r3
   896e2:	464d      	mov	r5, r9
   896e4:	f04f 0c00 	mov.w	ip, #0
   896e8:	8822      	ldrh	r2, [r4, #0]
   896ea:	0c36      	lsrs	r6, r6, #16
   896ec:	fb00 6602 	mla	r6, r0, r2, r6
   896f0:	b29b      	uxth	r3, r3
   896f2:	44b4      	add	ip, r6
   896f4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   896f8:	f845 3b04 	str.w	r3, [r5], #4
   896fc:	f854 3b04 	ldr.w	r3, [r4], #4
   89700:	682e      	ldr	r6, [r5, #0]
   89702:	0c1b      	lsrs	r3, r3, #16
   89704:	b2b2      	uxth	r2, r6
   89706:	fb00 2303 	mla	r3, r0, r3, r2
   8970a:	42a7      	cmp	r7, r4
   8970c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   89710:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   89714:	d8e8      	bhi.n	896e8 <__multiply+0xa8>
   89716:	45f3      	cmp	fp, lr
   89718:	f849 3008 	str.w	r3, [r9, r8]
   8971c:	f109 0904 	add.w	r9, r9, #4
   89720:	d8d4      	bhi.n	896cc <__multiply+0x8c>
   89722:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   89726:	f1b8 0f00 	cmp.w	r8, #0
   8972a:	dc03      	bgt.n	89734 <__multiply+0xf4>
   8972c:	e006      	b.n	8973c <__multiply+0xfc>
   8972e:	f1b8 0801 	subs.w	r8, r8, #1
   89732:	d003      	beq.n	8973c <__multiply+0xfc>
   89734:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   89738:	2b00      	cmp	r3, #0
   8973a:	d0f8      	beq.n	8972e <__multiply+0xee>
   8973c:	9801      	ldr	r0, [sp, #4]
   8973e:	f8c0 8010 	str.w	r8, [r0, #16]
   89742:	b005      	add	sp, #20
   89744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89748:	4655      	mov	r5, sl
   8974a:	464c      	mov	r4, r9
   8974c:	2300      	movs	r3, #0
   8974e:	f855 1b04 	ldr.w	r1, [r5], #4
   89752:	6820      	ldr	r0, [r4, #0]
   89754:	b28a      	uxth	r2, r1
   89756:	fa1f fc80 	uxth.w	ip, r0
   8975a:	fb06 c202 	mla	r2, r6, r2, ip
   8975e:	0c09      	lsrs	r1, r1, #16
   89760:	0c00      	lsrs	r0, r0, #16
   89762:	fb06 0101 	mla	r1, r6, r1, r0
   89766:	4413      	add	r3, r2
   89768:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8976c:	b29b      	uxth	r3, r3
   8976e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   89772:	42af      	cmp	r7, r5
   89774:	f844 3b04 	str.w	r3, [r4], #4
   89778:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8977c:	d8e7      	bhi.n	8974e <__multiply+0x10e>
   8977e:	f849 3008 	str.w	r3, [r9, r8]
   89782:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   89786:	e7a6      	b.n	896d6 <__multiply+0x96>
   89788:	4602      	mov	r2, r0
   8978a:	f240 115d 	movw	r1, #349	; 0x15d
   8978e:	4b02      	ldr	r3, [pc, #8]	; (89798 <__multiply+0x158>)
   89790:	4802      	ldr	r0, [pc, #8]	; (8979c <__multiply+0x15c>)
   89792:	f000 fdc9 	bl	8a328 <__assert_func>
   89796:	bf00      	nop
   89798:	0008b414 	.word	0x0008b414
   8979c:	0008b4b4 	.word	0x0008b4b4

000897a0 <__pow5mult>:
   897a0:	f012 0303 	ands.w	r3, r2, #3
   897a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   897a8:	4614      	mov	r4, r2
   897aa:	4607      	mov	r7, r0
   897ac:	d12e      	bne.n	8980c <__pow5mult+0x6c>
   897ae:	460e      	mov	r6, r1
   897b0:	10a4      	asrs	r4, r4, #2
   897b2:	d01c      	beq.n	897ee <__pow5mult+0x4e>
   897b4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   897b6:	b395      	cbz	r5, 8981e <__pow5mult+0x7e>
   897b8:	07e3      	lsls	r3, r4, #31
   897ba:	f04f 0800 	mov.w	r8, #0
   897be:	d406      	bmi.n	897ce <__pow5mult+0x2e>
   897c0:	1064      	asrs	r4, r4, #1
   897c2:	d014      	beq.n	897ee <__pow5mult+0x4e>
   897c4:	6828      	ldr	r0, [r5, #0]
   897c6:	b1a8      	cbz	r0, 897f4 <__pow5mult+0x54>
   897c8:	4605      	mov	r5, r0
   897ca:	07e3      	lsls	r3, r4, #31
   897cc:	d5f8      	bpl.n	897c0 <__pow5mult+0x20>
   897ce:	462a      	mov	r2, r5
   897d0:	4631      	mov	r1, r6
   897d2:	4638      	mov	r0, r7
   897d4:	f7ff ff34 	bl	89640 <__multiply>
   897d8:	b1b6      	cbz	r6, 89808 <__pow5mult+0x68>
   897da:	6871      	ldr	r1, [r6, #4]
   897dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   897de:	1064      	asrs	r4, r4, #1
   897e0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   897e4:	6032      	str	r2, [r6, #0]
   897e6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   897ea:	4606      	mov	r6, r0
   897ec:	d1ea      	bne.n	897c4 <__pow5mult+0x24>
   897ee:	4630      	mov	r0, r6
   897f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   897f4:	462a      	mov	r2, r5
   897f6:	4629      	mov	r1, r5
   897f8:	4638      	mov	r0, r7
   897fa:	f7ff ff21 	bl	89640 <__multiply>
   897fe:	6028      	str	r0, [r5, #0]
   89800:	4605      	mov	r5, r0
   89802:	f8c0 8000 	str.w	r8, [r0]
   89806:	e7e0      	b.n	897ca <__pow5mult+0x2a>
   89808:	4606      	mov	r6, r0
   8980a:	e7d9      	b.n	897c0 <__pow5mult+0x20>
   8980c:	4a09      	ldr	r2, [pc, #36]	; (89834 <__pow5mult+0x94>)
   8980e:	3b01      	subs	r3, #1
   89810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   89814:	2300      	movs	r3, #0
   89816:	f7ff fe5f 	bl	894d8 <__multadd>
   8981a:	4606      	mov	r6, r0
   8981c:	e7c8      	b.n	897b0 <__pow5mult+0x10>
   8981e:	f240 2171 	movw	r1, #625	; 0x271
   89822:	4638      	mov	r0, r7
   89824:	f7ff fef6 	bl	89614 <__i2b>
   89828:	2300      	movs	r3, #0
   8982a:	64b8      	str	r0, [r7, #72]	; 0x48
   8982c:	4605      	mov	r5, r0
   8982e:	6003      	str	r3, [r0, #0]
   89830:	e7c2      	b.n	897b8 <__pow5mult+0x18>
   89832:	bf00      	nop
   89834:	0008b628 	.word	0x0008b628

00089838 <__lshift>:
   89838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8983c:	690f      	ldr	r7, [r1, #16]
   8983e:	688b      	ldr	r3, [r1, #8]
   89840:	eb07 1762 	add.w	r7, r7, r2, asr #5
   89844:	1c7e      	adds	r6, r7, #1
   89846:	429e      	cmp	r6, r3
   89848:	460d      	mov	r5, r1
   8984a:	4691      	mov	r9, r2
   8984c:	4680      	mov	r8, r0
   8984e:	6849      	ldr	r1, [r1, #4]
   89850:	ea4f 1462 	mov.w	r4, r2, asr #5
   89854:	dd04      	ble.n	89860 <__lshift+0x28>
   89856:	005b      	lsls	r3, r3, #1
   89858:	429e      	cmp	r6, r3
   8985a:	f101 0101 	add.w	r1, r1, #1
   8985e:	dcfa      	bgt.n	89856 <__lshift+0x1e>
   89860:	4640      	mov	r0, r8
   89862:	f7ff fe09 	bl	89478 <_Balloc>
   89866:	2800      	cmp	r0, #0
   89868:	d04f      	beq.n	8990a <__lshift+0xd2>
   8986a:	2c00      	cmp	r4, #0
   8986c:	f100 0114 	add.w	r1, r0, #20
   89870:	dd0d      	ble.n	8988e <__lshift+0x56>
   89872:	460b      	mov	r3, r1
   89874:	2200      	movs	r2, #0
   89876:	3405      	adds	r4, #5
   89878:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8987c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   89880:	f843 2b04 	str.w	r2, [r3], #4
   89884:	42a3      	cmp	r3, r4
   89886:	d1fb      	bne.n	89880 <__lshift+0x48>
   89888:	f1ac 0314 	sub.w	r3, ip, #20
   8988c:	4419      	add	r1, r3
   8988e:	692c      	ldr	r4, [r5, #16]
   89890:	f105 0314 	add.w	r3, r5, #20
   89894:	f019 091f 	ands.w	r9, r9, #31
   89898:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8989c:	d02d      	beq.n	898fa <__lshift+0xc2>
   8989e:	468e      	mov	lr, r1
   898a0:	f04f 0a00 	mov.w	sl, #0
   898a4:	f1c9 0220 	rsb	r2, r9, #32
   898a8:	681c      	ldr	r4, [r3, #0]
   898aa:	fa04 f409 	lsl.w	r4, r4, r9
   898ae:	ea44 040a 	orr.w	r4, r4, sl
   898b2:	f84e 4b04 	str.w	r4, [lr], #4
   898b6:	f853 4b04 	ldr.w	r4, [r3], #4
   898ba:	459c      	cmp	ip, r3
   898bc:	fa24 fa02 	lsr.w	sl, r4, r2
   898c0:	d8f2      	bhi.n	898a8 <__lshift+0x70>
   898c2:	ebac 0305 	sub.w	r3, ip, r5
   898c6:	3b15      	subs	r3, #21
   898c8:	f023 0303 	bic.w	r3, r3, #3
   898cc:	3304      	adds	r3, #4
   898ce:	f105 0215 	add.w	r2, r5, #21
   898d2:	4594      	cmp	ip, r2
   898d4:	bf38      	it	cc
   898d6:	2304      	movcc	r3, #4
   898d8:	f1ba 0f00 	cmp.w	sl, #0
   898dc:	bf18      	it	ne
   898de:	4637      	movne	r7, r6
   898e0:	f841 a003 	str.w	sl, [r1, r3]
   898e4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   898e8:	686a      	ldr	r2, [r5, #4]
   898ea:	6107      	str	r7, [r0, #16]
   898ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   898f0:	6029      	str	r1, [r5, #0]
   898f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   898f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   898fa:	3904      	subs	r1, #4
   898fc:	f853 2b04 	ldr.w	r2, [r3], #4
   89900:	459c      	cmp	ip, r3
   89902:	f841 2f04 	str.w	r2, [r1, #4]!
   89906:	d8f9      	bhi.n	898fc <__lshift+0xc4>
   89908:	e7ec      	b.n	898e4 <__lshift+0xac>
   8990a:	4602      	mov	r2, r0
   8990c:	f240 11d9 	movw	r1, #473	; 0x1d9
   89910:	4b01      	ldr	r3, [pc, #4]	; (89918 <__lshift+0xe0>)
   89912:	4802      	ldr	r0, [pc, #8]	; (8991c <__lshift+0xe4>)
   89914:	f000 fd08 	bl	8a328 <__assert_func>
   89918:	0008b414 	.word	0x0008b414
   8991c:	0008b4b4 	.word	0x0008b4b4

00089920 <__mcmp>:
   89920:	b430      	push	{r4, r5}
   89922:	690b      	ldr	r3, [r1, #16]
   89924:	4605      	mov	r5, r0
   89926:	6900      	ldr	r0, [r0, #16]
   89928:	1ac0      	subs	r0, r0, r3
   8992a:	d111      	bne.n	89950 <__mcmp+0x30>
   8992c:	3514      	adds	r5, #20
   8992e:	3114      	adds	r1, #20
   89930:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   89934:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   89938:	e001      	b.n	8993e <__mcmp+0x1e>
   8993a:	429d      	cmp	r5, r3
   8993c:	d208      	bcs.n	89950 <__mcmp+0x30>
   8993e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   89942:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   89946:	428c      	cmp	r4, r1
   89948:	d0f7      	beq.n	8993a <__mcmp+0x1a>
   8994a:	d203      	bcs.n	89954 <__mcmp+0x34>
   8994c:	f04f 30ff 	mov.w	r0, #4294967295
   89950:	bc30      	pop	{r4, r5}
   89952:	4770      	bx	lr
   89954:	2001      	movs	r0, #1
   89956:	bc30      	pop	{r4, r5}
   89958:	4770      	bx	lr
   8995a:	bf00      	nop

0008995c <__mdiff>:
   8995c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89960:	690b      	ldr	r3, [r1, #16]
   89962:	460c      	mov	r4, r1
   89964:	6911      	ldr	r1, [r2, #16]
   89966:	4690      	mov	r8, r2
   89968:	eba3 0b01 	sub.w	fp, r3, r1
   8996c:	f1bb 0f00 	cmp.w	fp, #0
   89970:	d17c      	bne.n	89a6c <__mdiff+0x110>
   89972:	f104 0614 	add.w	r6, r4, #20
   89976:	3214      	adds	r2, #20
   89978:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8997c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   89980:	e001      	b.n	89986 <__mdiff+0x2a>
   89982:	429e      	cmp	r6, r3
   89984:	d276      	bcs.n	89a74 <__mdiff+0x118>
   89986:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8998a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8998e:	428d      	cmp	r5, r1
   89990:	d0f7      	beq.n	89982 <__mdiff+0x26>
   89992:	d365      	bcc.n	89a60 <__mdiff+0x104>
   89994:	6861      	ldr	r1, [r4, #4]
   89996:	f7ff fd6f 	bl	89478 <_Balloc>
   8999a:	2800      	cmp	r0, #0
   8999c:	d074      	beq.n	89a88 <__mdiff+0x12c>
   8999e:	f100 0614 	add.w	r6, r0, #20
   899a2:	46b4      	mov	ip, r6
   899a4:	2300      	movs	r3, #0
   899a6:	6927      	ldr	r7, [r4, #16]
   899a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
   899ac:	f104 0a14 	add.w	sl, r4, #20
   899b0:	f108 0514 	add.w	r5, r8, #20
   899b4:	f8c0 b00c 	str.w	fp, [r0, #12]
   899b8:	3410      	adds	r4, #16
   899ba:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   899be:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   899c2:	f854 2f04 	ldr.w	r2, [r4, #4]!
   899c6:	f855 bb04 	ldr.w	fp, [r5], #4
   899ca:	b291      	uxth	r1, r2
   899cc:	440b      	add	r3, r1
   899ce:	fa1f f18b 	uxth.w	r1, fp
   899d2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   899d6:	1a59      	subs	r1, r3, r1
   899d8:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   899dc:	eb03 4321 	add.w	r3, r3, r1, asr #16
   899e0:	b289      	uxth	r1, r1
   899e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   899e6:	45a9      	cmp	r9, r5
   899e8:	f84c 1b04 	str.w	r1, [ip], #4
   899ec:	ea4f 4323 	mov.w	r3, r3, asr #16
   899f0:	d8e7      	bhi.n	899c2 <__mdiff+0x66>
   899f2:	eba9 0208 	sub.w	r2, r9, r8
   899f6:	3a15      	subs	r2, #21
   899f8:	f108 0815 	add.w	r8, r8, #21
   899fc:	45c1      	cmp	r9, r8
   899fe:	f022 0403 	bic.w	r4, r2, #3
   89a02:	f104 0404 	add.w	r4, r4, #4
   89a06:	bf38      	it	cc
   89a08:	2404      	movcc	r4, #4
   89a0a:	f022 0203 	bic.w	r2, r2, #3
   89a0e:	bf38      	it	cc
   89a10:	2200      	movcc	r2, #0
   89a12:	44a2      	add	sl, r4
   89a14:	45d6      	cmp	lr, sl
   89a16:	4434      	add	r4, r6
   89a18:	4416      	add	r6, r2
   89a1a:	d918      	bls.n	89a4e <__mdiff+0xf2>
   89a1c:	4625      	mov	r5, r4
   89a1e:	4652      	mov	r2, sl
   89a20:	f852 6b04 	ldr.w	r6, [r2], #4
   89a24:	b2b1      	uxth	r1, r6
   89a26:	4419      	add	r1, r3
   89a28:	140b      	asrs	r3, r1, #16
   89a2a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   89a2e:	b289      	uxth	r1, r1
   89a30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   89a34:	4596      	cmp	lr, r2
   89a36:	f845 1b04 	str.w	r1, [r5], #4
   89a3a:	ea4f 4323 	mov.w	r3, r3, asr #16
   89a3e:	d8ef      	bhi.n	89a20 <__mdiff+0xc4>
   89a40:	f10e 36ff 	add.w	r6, lr, #4294967295
   89a44:	eba6 060a 	sub.w	r6, r6, sl
   89a48:	f026 0603 	bic.w	r6, r6, #3
   89a4c:	4426      	add	r6, r4
   89a4e:	b921      	cbnz	r1, 89a5a <__mdiff+0xfe>
   89a50:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   89a54:	3f01      	subs	r7, #1
   89a56:	2b00      	cmp	r3, #0
   89a58:	d0fa      	beq.n	89a50 <__mdiff+0xf4>
   89a5a:	6107      	str	r7, [r0, #16]
   89a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a60:	4623      	mov	r3, r4
   89a62:	f04f 0b01 	mov.w	fp, #1
   89a66:	4644      	mov	r4, r8
   89a68:	4698      	mov	r8, r3
   89a6a:	e793      	b.n	89994 <__mdiff+0x38>
   89a6c:	dbf8      	blt.n	89a60 <__mdiff+0x104>
   89a6e:	f04f 0b00 	mov.w	fp, #0
   89a72:	e78f      	b.n	89994 <__mdiff+0x38>
   89a74:	2100      	movs	r1, #0
   89a76:	f7ff fcff 	bl	89478 <_Balloc>
   89a7a:	b160      	cbz	r0, 89a96 <__mdiff+0x13a>
   89a7c:	2201      	movs	r2, #1
   89a7e:	2300      	movs	r3, #0
   89a80:	e9c0 2304 	strd	r2, r3, [r0, #16]
   89a84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a88:	4602      	mov	r2, r0
   89a8a:	f44f 7110 	mov.w	r1, #576	; 0x240
   89a8e:	4b05      	ldr	r3, [pc, #20]	; (89aa4 <__mdiff+0x148>)
   89a90:	4805      	ldr	r0, [pc, #20]	; (89aa8 <__mdiff+0x14c>)
   89a92:	f000 fc49 	bl	8a328 <__assert_func>
   89a96:	4602      	mov	r2, r0
   89a98:	f240 2132 	movw	r1, #562	; 0x232
   89a9c:	4b01      	ldr	r3, [pc, #4]	; (89aa4 <__mdiff+0x148>)
   89a9e:	4802      	ldr	r0, [pc, #8]	; (89aa8 <__mdiff+0x14c>)
   89aa0:	f000 fc42 	bl	8a328 <__assert_func>
   89aa4:	0008b414 	.word	0x0008b414
   89aa8:	0008b4b4 	.word	0x0008b4b4

00089aac <__d2b>:
   89aac:	b570      	push	{r4, r5, r6, lr}
   89aae:	2101      	movs	r1, #1
   89ab0:	b082      	sub	sp, #8
   89ab2:	4616      	mov	r6, r2
   89ab4:	461d      	mov	r5, r3
   89ab6:	f7ff fcdf 	bl	89478 <_Balloc>
   89aba:	4604      	mov	r4, r0
   89abc:	2800      	cmp	r0, #0
   89abe:	d04c      	beq.n	89b5a <__d2b+0xae>
   89ac0:	462b      	mov	r3, r5
   89ac2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   89ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   89aca:	b10d      	cbz	r5, 89ad0 <__d2b+0x24>
   89acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89ad0:	2e00      	cmp	r6, #0
   89ad2:	9301      	str	r3, [sp, #4]
   89ad4:	d022      	beq.n	89b1c <__d2b+0x70>
   89ad6:	4668      	mov	r0, sp
   89ad8:	9600      	str	r6, [sp, #0]
   89ada:	f7ff fd6b 	bl	895b4 <__lo0bits>
   89ade:	2800      	cmp	r0, #0
   89ae0:	d037      	beq.n	89b52 <__d2b+0xa6>
   89ae2:	9b01      	ldr	r3, [sp, #4]
   89ae4:	9900      	ldr	r1, [sp, #0]
   89ae6:	f1c0 0220 	rsb	r2, r0, #32
   89aea:	fa03 f202 	lsl.w	r2, r3, r2
   89aee:	430a      	orrs	r2, r1
   89af0:	40c3      	lsrs	r3, r0
   89af2:	9301      	str	r3, [sp, #4]
   89af4:	6162      	str	r2, [r4, #20]
   89af6:	2b00      	cmp	r3, #0
   89af8:	bf14      	ite	ne
   89afa:	2102      	movne	r1, #2
   89afc:	2101      	moveq	r1, #1
   89afe:	61a3      	str	r3, [r4, #24]
   89b00:	6121      	str	r1, [r4, #16]
   89b02:	b1b5      	cbz	r5, 89b32 <__d2b+0x86>
   89b04:	9a06      	ldr	r2, [sp, #24]
   89b06:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   89b0a:	4403      	add	r3, r0
   89b0c:	6013      	str	r3, [r2, #0]
   89b0e:	9b07      	ldr	r3, [sp, #28]
   89b10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   89b14:	6018      	str	r0, [r3, #0]
   89b16:	4620      	mov	r0, r4
   89b18:	b002      	add	sp, #8
   89b1a:	bd70      	pop	{r4, r5, r6, pc}
   89b1c:	a801      	add	r0, sp, #4
   89b1e:	f7ff fd49 	bl	895b4 <__lo0bits>
   89b22:	2301      	movs	r3, #1
   89b24:	9a01      	ldr	r2, [sp, #4]
   89b26:	4619      	mov	r1, r3
   89b28:	e9c4 3204 	strd	r3, r2, [r4, #16]
   89b2c:	3020      	adds	r0, #32
   89b2e:	2d00      	cmp	r5, #0
   89b30:	d1e8      	bne.n	89b04 <__d2b+0x58>
   89b32:	9a06      	ldr	r2, [sp, #24]
   89b34:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   89b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   89b3c:	6010      	str	r0, [r2, #0]
   89b3e:	6918      	ldr	r0, [r3, #16]
   89b40:	f7ff fd18 	bl	89574 <__hi0bits>
   89b44:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   89b48:	4620      	mov	r0, r4
   89b4a:	9b07      	ldr	r3, [sp, #28]
   89b4c:	6019      	str	r1, [r3, #0]
   89b4e:	b002      	add	sp, #8
   89b50:	bd70      	pop	{r4, r5, r6, pc}
   89b52:	e9dd 2300 	ldrd	r2, r3, [sp]
   89b56:	6162      	str	r2, [r4, #20]
   89b58:	e7cd      	b.n	89af6 <__d2b+0x4a>
   89b5a:	4602      	mov	r2, r0
   89b5c:	f240 310a 	movw	r1, #778	; 0x30a
   89b60:	4b01      	ldr	r3, [pc, #4]	; (89b68 <__d2b+0xbc>)
   89b62:	4802      	ldr	r0, [pc, #8]	; (89b6c <__d2b+0xc0>)
   89b64:	f000 fbe0 	bl	8a328 <__assert_func>
   89b68:	0008b414 	.word	0x0008b414
   89b6c:	0008b4b4 	.word	0x0008b4b4

00089b70 <_realloc_r>:
   89b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89b74:	4616      	mov	r6, r2
   89b76:	2900      	cmp	r1, #0
   89b78:	f000 80bd 	beq.w	89cf6 <_realloc_r+0x186>
   89b7c:	f106 050b 	add.w	r5, r6, #11
   89b80:	460c      	mov	r4, r1
   89b82:	4680      	mov	r8, r0
   89b84:	f7ff fc6c 	bl	89460 <__malloc_lock>
   89b88:	2d16      	cmp	r5, #22
   89b8a:	d85f      	bhi.n	89c4c <_realloc_r+0xdc>
   89b8c:	2510      	movs	r5, #16
   89b8e:	462a      	mov	r2, r5
   89b90:	42ae      	cmp	r6, r5
   89b92:	d860      	bhi.n	89c56 <_realloc_r+0xe6>
   89b94:	f854 1c04 	ldr.w	r1, [r4, #-4]
   89b98:	f1a4 0908 	sub.w	r9, r4, #8
   89b9c:	f021 0703 	bic.w	r7, r1, #3
   89ba0:	4297      	cmp	r7, r2
   89ba2:	f280 8086 	bge.w	89cb2 <_realloc_r+0x142>
   89ba6:	4bc9      	ldr	r3, [pc, #804]	; (89ecc <_realloc_r+0x35c>)
   89ba8:	eb09 0007 	add.w	r0, r9, r7
   89bac:	f8d3 c008 	ldr.w	ip, [r3, #8]
   89bb0:	4584      	cmp	ip, r0
   89bb2:	f000 80b9 	beq.w	89d28 <_realloc_r+0x1b8>
   89bb6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   89bba:	f02c 0301 	bic.w	r3, ip, #1
   89bbe:	4403      	add	r3, r0
   89bc0:	685b      	ldr	r3, [r3, #4]
   89bc2:	07db      	lsls	r3, r3, #31
   89bc4:	f100 808c 	bmi.w	89ce0 <_realloc_r+0x170>
   89bc8:	f02c 0c03 	bic.w	ip, ip, #3
   89bcc:	eb07 030c 	add.w	r3, r7, ip
   89bd0:	4293      	cmp	r3, r2
   89bd2:	f280 8115 	bge.w	89e00 <_realloc_r+0x290>
   89bd6:	07cb      	lsls	r3, r1, #31
   89bd8:	d40f      	bmi.n	89bfa <_realloc_r+0x8a>
   89bda:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89bde:	eba9 0a03 	sub.w	sl, r9, r3
   89be2:	f8da 3004 	ldr.w	r3, [sl, #4]
   89be6:	f023 0103 	bic.w	r1, r3, #3
   89bea:	448c      	add	ip, r1
   89bec:	44bc      	add	ip, r7
   89bee:	4594      	cmp	ip, r2
   89bf0:	da38      	bge.n	89c64 <_realloc_r+0xf4>
   89bf2:	187b      	adds	r3, r7, r1
   89bf4:	4293      	cmp	r3, r2
   89bf6:	f280 810f 	bge.w	89e18 <_realloc_r+0x2a8>
   89bfa:	4631      	mov	r1, r6
   89bfc:	4640      	mov	r0, r8
   89bfe:	f7ff f8c1 	bl	88d84 <_malloc_r>
   89c02:	4606      	mov	r6, r0
   89c04:	b1e0      	cbz	r0, 89c40 <_realloc_r+0xd0>
   89c06:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89c0a:	f1a0 0208 	sub.w	r2, r0, #8
   89c0e:	f023 0301 	bic.w	r3, r3, #1
   89c12:	444b      	add	r3, r9
   89c14:	4293      	cmp	r3, r2
   89c16:	f000 80f9 	beq.w	89e0c <_realloc_r+0x29c>
   89c1a:	1f3a      	subs	r2, r7, #4
   89c1c:	2a24      	cmp	r2, #36	; 0x24
   89c1e:	f200 811c 	bhi.w	89e5a <_realloc_r+0x2ea>
   89c22:	2a13      	cmp	r2, #19
   89c24:	f200 80cd 	bhi.w	89dc2 <_realloc_r+0x252>
   89c28:	4603      	mov	r3, r0
   89c2a:	4622      	mov	r2, r4
   89c2c:	6811      	ldr	r1, [r2, #0]
   89c2e:	6019      	str	r1, [r3, #0]
   89c30:	6851      	ldr	r1, [r2, #4]
   89c32:	6059      	str	r1, [r3, #4]
   89c34:	6892      	ldr	r2, [r2, #8]
   89c36:	609a      	str	r2, [r3, #8]
   89c38:	4621      	mov	r1, r4
   89c3a:	4640      	mov	r0, r8
   89c3c:	f7fe fd70 	bl	88720 <_free_r>
   89c40:	4640      	mov	r0, r8
   89c42:	f7ff fc13 	bl	8946c <__malloc_unlock>
   89c46:	4630      	mov	r0, r6
   89c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89c4c:	f025 0507 	bic.w	r5, r5, #7
   89c50:	2d00      	cmp	r5, #0
   89c52:	462a      	mov	r2, r5
   89c54:	da9c      	bge.n	89b90 <_realloc_r+0x20>
   89c56:	230c      	movs	r3, #12
   89c58:	2600      	movs	r6, #0
   89c5a:	f8c8 3000 	str.w	r3, [r8]
   89c5e:	4630      	mov	r0, r6
   89c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89c64:	4656      	mov	r6, sl
   89c66:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   89c6a:	60cb      	str	r3, [r1, #12]
   89c6c:	6099      	str	r1, [r3, #8]
   89c6e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   89c72:	f8da 300c 	ldr.w	r3, [sl, #12]
   89c76:	1f3a      	subs	r2, r7, #4
   89c78:	2a24      	cmp	r2, #36	; 0x24
   89c7a:	60cb      	str	r3, [r1, #12]
   89c7c:	6099      	str	r1, [r3, #8]
   89c7e:	f200 8107 	bhi.w	89e90 <_realloc_r+0x320>
   89c82:	2a13      	cmp	r2, #19
   89c84:	f240 8102 	bls.w	89e8c <_realloc_r+0x31c>
   89c88:	6823      	ldr	r3, [r4, #0]
   89c8a:	2a1b      	cmp	r2, #27
   89c8c:	f8ca 3008 	str.w	r3, [sl, #8]
   89c90:	6863      	ldr	r3, [r4, #4]
   89c92:	f8ca 300c 	str.w	r3, [sl, #12]
   89c96:	f200 811b 	bhi.w	89ed0 <_realloc_r+0x360>
   89c9a:	3408      	adds	r4, #8
   89c9c:	f10a 0310 	add.w	r3, sl, #16
   89ca0:	6822      	ldr	r2, [r4, #0]
   89ca2:	4667      	mov	r7, ip
   89ca4:	601a      	str	r2, [r3, #0]
   89ca6:	6862      	ldr	r2, [r4, #4]
   89ca8:	46d1      	mov	r9, sl
   89caa:	605a      	str	r2, [r3, #4]
   89cac:	68a2      	ldr	r2, [r4, #8]
   89cae:	4634      	mov	r4, r6
   89cb0:	609a      	str	r2, [r3, #8]
   89cb2:	1b7b      	subs	r3, r7, r5
   89cb4:	2b0f      	cmp	r3, #15
   89cb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   89cba:	d821      	bhi.n	89d00 <_realloc_r+0x190>
   89cbc:	f002 0201 	and.w	r2, r2, #1
   89cc0:	433a      	orrs	r2, r7
   89cc2:	eb09 0107 	add.w	r1, r9, r7
   89cc6:	f8c9 2004 	str.w	r2, [r9, #4]
   89cca:	684b      	ldr	r3, [r1, #4]
   89ccc:	f043 0301 	orr.w	r3, r3, #1
   89cd0:	604b      	str	r3, [r1, #4]
   89cd2:	4626      	mov	r6, r4
   89cd4:	4640      	mov	r0, r8
   89cd6:	f7ff fbc9 	bl	8946c <__malloc_unlock>
   89cda:	4630      	mov	r0, r6
   89cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ce0:	07c9      	lsls	r1, r1, #31
   89ce2:	d48a      	bmi.n	89bfa <_realloc_r+0x8a>
   89ce4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89ce8:	eba9 0a03 	sub.w	sl, r9, r3
   89cec:	f8da 1004 	ldr.w	r1, [sl, #4]
   89cf0:	f021 0103 	bic.w	r1, r1, #3
   89cf4:	e77d      	b.n	89bf2 <_realloc_r+0x82>
   89cf6:	4611      	mov	r1, r2
   89cf8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89cfc:	f7ff b842 	b.w	88d84 <_malloc_r>
   89d00:	f002 0201 	and.w	r2, r2, #1
   89d04:	eb09 0105 	add.w	r1, r9, r5
   89d08:	f043 0301 	orr.w	r3, r3, #1
   89d0c:	432a      	orrs	r2, r5
   89d0e:	f8c9 2004 	str.w	r2, [r9, #4]
   89d12:	444f      	add	r7, r9
   89d14:	604b      	str	r3, [r1, #4]
   89d16:	687b      	ldr	r3, [r7, #4]
   89d18:	4640      	mov	r0, r8
   89d1a:	f043 0301 	orr.w	r3, r3, #1
   89d1e:	3108      	adds	r1, #8
   89d20:	607b      	str	r3, [r7, #4]
   89d22:	f7fe fcfd 	bl	88720 <_free_r>
   89d26:	e7d4      	b.n	89cd2 <_realloc_r+0x162>
   89d28:	f8dc b004 	ldr.w	fp, [ip, #4]
   89d2c:	f105 0010 	add.w	r0, r5, #16
   89d30:	f02b 0b03 	bic.w	fp, fp, #3
   89d34:	eb07 0c0b 	add.w	ip, r7, fp
   89d38:	4584      	cmp	ip, r0
   89d3a:	da4d      	bge.n	89dd8 <_realloc_r+0x268>
   89d3c:	07c9      	lsls	r1, r1, #31
   89d3e:	f53f af5c 	bmi.w	89bfa <_realloc_r+0x8a>
   89d42:	f854 1c08 	ldr.w	r1, [r4, #-8]
   89d46:	eba9 0a01 	sub.w	sl, r9, r1
   89d4a:	f8da 1004 	ldr.w	r1, [sl, #4]
   89d4e:	f021 0103 	bic.w	r1, r1, #3
   89d52:	448b      	add	fp, r1
   89d54:	44bb      	add	fp, r7
   89d56:	4558      	cmp	r0, fp
   89d58:	f73f af4b 	bgt.w	89bf2 <_realloc_r+0x82>
   89d5c:	4656      	mov	r6, sl
   89d5e:	f8da 100c 	ldr.w	r1, [sl, #12]
   89d62:	f856 0f08 	ldr.w	r0, [r6, #8]!
   89d66:	1f3a      	subs	r2, r7, #4
   89d68:	2a24      	cmp	r2, #36	; 0x24
   89d6a:	60c1      	str	r1, [r0, #12]
   89d6c:	6088      	str	r0, [r1, #8]
   89d6e:	f200 80bd 	bhi.w	89eec <_realloc_r+0x37c>
   89d72:	2a13      	cmp	r2, #19
   89d74:	f240 80b8 	bls.w	89ee8 <_realloc_r+0x378>
   89d78:	6821      	ldr	r1, [r4, #0]
   89d7a:	2a1b      	cmp	r2, #27
   89d7c:	f8ca 1008 	str.w	r1, [sl, #8]
   89d80:	6861      	ldr	r1, [r4, #4]
   89d82:	f8ca 100c 	str.w	r1, [sl, #12]
   89d86:	f200 80c1 	bhi.w	89f0c <_realloc_r+0x39c>
   89d8a:	3408      	adds	r4, #8
   89d8c:	f10a 0210 	add.w	r2, sl, #16
   89d90:	6821      	ldr	r1, [r4, #0]
   89d92:	6011      	str	r1, [r2, #0]
   89d94:	6861      	ldr	r1, [r4, #4]
   89d96:	6051      	str	r1, [r2, #4]
   89d98:	68a1      	ldr	r1, [r4, #8]
   89d9a:	6091      	str	r1, [r2, #8]
   89d9c:	ebab 0205 	sub.w	r2, fp, r5
   89da0:	eb0a 0105 	add.w	r1, sl, r5
   89da4:	f042 0201 	orr.w	r2, r2, #1
   89da8:	6099      	str	r1, [r3, #8]
   89daa:	604a      	str	r2, [r1, #4]
   89dac:	f8da 3004 	ldr.w	r3, [sl, #4]
   89db0:	4640      	mov	r0, r8
   89db2:	f003 0301 	and.w	r3, r3, #1
   89db6:	431d      	orrs	r5, r3
   89db8:	f8ca 5004 	str.w	r5, [sl, #4]
   89dbc:	f7ff fb56 	bl	8946c <__malloc_unlock>
   89dc0:	e74d      	b.n	89c5e <_realloc_r+0xee>
   89dc2:	6823      	ldr	r3, [r4, #0]
   89dc4:	2a1b      	cmp	r2, #27
   89dc6:	6003      	str	r3, [r0, #0]
   89dc8:	6863      	ldr	r3, [r4, #4]
   89dca:	6043      	str	r3, [r0, #4]
   89dcc:	d849      	bhi.n	89e62 <_realloc_r+0x2f2>
   89dce:	f104 0208 	add.w	r2, r4, #8
   89dd2:	f100 0308 	add.w	r3, r0, #8
   89dd6:	e729      	b.n	89c2c <_realloc_r+0xbc>
   89dd8:	ebac 0205 	sub.w	r2, ip, r5
   89ddc:	eb09 0105 	add.w	r1, r9, r5
   89de0:	f042 0201 	orr.w	r2, r2, #1
   89de4:	6099      	str	r1, [r3, #8]
   89de6:	604a      	str	r2, [r1, #4]
   89de8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89dec:	4640      	mov	r0, r8
   89dee:	f003 0301 	and.w	r3, r3, #1
   89df2:	431d      	orrs	r5, r3
   89df4:	f844 5c04 	str.w	r5, [r4, #-4]
   89df8:	f7ff fb38 	bl	8946c <__malloc_unlock>
   89dfc:	4626      	mov	r6, r4
   89dfe:	e72e      	b.n	89c5e <_realloc_r+0xee>
   89e00:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   89e04:	461f      	mov	r7, r3
   89e06:	60ca      	str	r2, [r1, #12]
   89e08:	6091      	str	r1, [r2, #8]
   89e0a:	e752      	b.n	89cb2 <_realloc_r+0x142>
   89e0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   89e10:	f023 0303 	bic.w	r3, r3, #3
   89e14:	441f      	add	r7, r3
   89e16:	e74c      	b.n	89cb2 <_realloc_r+0x142>
   89e18:	4656      	mov	r6, sl
   89e1a:	f8da 100c 	ldr.w	r1, [sl, #12]
   89e1e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   89e22:	1f3a      	subs	r2, r7, #4
   89e24:	2a24      	cmp	r2, #36	; 0x24
   89e26:	60c1      	str	r1, [r0, #12]
   89e28:	6088      	str	r0, [r1, #8]
   89e2a:	d827      	bhi.n	89e7c <_realloc_r+0x30c>
   89e2c:	2a13      	cmp	r2, #19
   89e2e:	d923      	bls.n	89e78 <_realloc_r+0x308>
   89e30:	6821      	ldr	r1, [r4, #0]
   89e32:	2a1b      	cmp	r2, #27
   89e34:	f8ca 1008 	str.w	r1, [sl, #8]
   89e38:	6861      	ldr	r1, [r4, #4]
   89e3a:	f8ca 100c 	str.w	r1, [sl, #12]
   89e3e:	d82f      	bhi.n	89ea0 <_realloc_r+0x330>
   89e40:	3408      	adds	r4, #8
   89e42:	f10a 0210 	add.w	r2, sl, #16
   89e46:	6821      	ldr	r1, [r4, #0]
   89e48:	461f      	mov	r7, r3
   89e4a:	6011      	str	r1, [r2, #0]
   89e4c:	6863      	ldr	r3, [r4, #4]
   89e4e:	46d1      	mov	r9, sl
   89e50:	6053      	str	r3, [r2, #4]
   89e52:	68a3      	ldr	r3, [r4, #8]
   89e54:	4634      	mov	r4, r6
   89e56:	6093      	str	r3, [r2, #8]
   89e58:	e72b      	b.n	89cb2 <_realloc_r+0x142>
   89e5a:	4621      	mov	r1, r4
   89e5c:	f7ff fa96 	bl	8938c <memmove>
   89e60:	e6ea      	b.n	89c38 <_realloc_r+0xc8>
   89e62:	68a3      	ldr	r3, [r4, #8]
   89e64:	2a24      	cmp	r2, #36	; 0x24
   89e66:	6083      	str	r3, [r0, #8]
   89e68:	68e3      	ldr	r3, [r4, #12]
   89e6a:	60c3      	str	r3, [r0, #12]
   89e6c:	d024      	beq.n	89eb8 <_realloc_r+0x348>
   89e6e:	f104 0210 	add.w	r2, r4, #16
   89e72:	f100 0310 	add.w	r3, r0, #16
   89e76:	e6d9      	b.n	89c2c <_realloc_r+0xbc>
   89e78:	4632      	mov	r2, r6
   89e7a:	e7e4      	b.n	89e46 <_realloc_r+0x2d6>
   89e7c:	4621      	mov	r1, r4
   89e7e:	4630      	mov	r0, r6
   89e80:	461f      	mov	r7, r3
   89e82:	46d1      	mov	r9, sl
   89e84:	f7ff fa82 	bl	8938c <memmove>
   89e88:	4634      	mov	r4, r6
   89e8a:	e712      	b.n	89cb2 <_realloc_r+0x142>
   89e8c:	4633      	mov	r3, r6
   89e8e:	e707      	b.n	89ca0 <_realloc_r+0x130>
   89e90:	4621      	mov	r1, r4
   89e92:	4630      	mov	r0, r6
   89e94:	4667      	mov	r7, ip
   89e96:	46d1      	mov	r9, sl
   89e98:	f7ff fa78 	bl	8938c <memmove>
   89e9c:	4634      	mov	r4, r6
   89e9e:	e708      	b.n	89cb2 <_realloc_r+0x142>
   89ea0:	68a1      	ldr	r1, [r4, #8]
   89ea2:	2a24      	cmp	r2, #36	; 0x24
   89ea4:	f8ca 1010 	str.w	r1, [sl, #16]
   89ea8:	68e1      	ldr	r1, [r4, #12]
   89eaa:	f8ca 1014 	str.w	r1, [sl, #20]
   89eae:	d023      	beq.n	89ef8 <_realloc_r+0x388>
   89eb0:	3410      	adds	r4, #16
   89eb2:	f10a 0218 	add.w	r2, sl, #24
   89eb6:	e7c6      	b.n	89e46 <_realloc_r+0x2d6>
   89eb8:	6923      	ldr	r3, [r4, #16]
   89eba:	f104 0218 	add.w	r2, r4, #24
   89ebe:	6103      	str	r3, [r0, #16]
   89ec0:	6961      	ldr	r1, [r4, #20]
   89ec2:	f100 0318 	add.w	r3, r0, #24
   89ec6:	6141      	str	r1, [r0, #20]
   89ec8:	e6b0      	b.n	89c2c <_realloc_r+0xbc>
   89eca:	bf00      	nop
   89ecc:	20000970 	.word	0x20000970
   89ed0:	68a3      	ldr	r3, [r4, #8]
   89ed2:	2a24      	cmp	r2, #36	; 0x24
   89ed4:	f8ca 3010 	str.w	r3, [sl, #16]
   89ed8:	68e3      	ldr	r3, [r4, #12]
   89eda:	f8ca 3014 	str.w	r3, [sl, #20]
   89ede:	d021      	beq.n	89f24 <_realloc_r+0x3b4>
   89ee0:	3410      	adds	r4, #16
   89ee2:	f10a 0318 	add.w	r3, sl, #24
   89ee6:	e6db      	b.n	89ca0 <_realloc_r+0x130>
   89ee8:	4632      	mov	r2, r6
   89eea:	e751      	b.n	89d90 <_realloc_r+0x220>
   89eec:	4621      	mov	r1, r4
   89eee:	4630      	mov	r0, r6
   89ef0:	f7ff fa4c 	bl	8938c <memmove>
   89ef4:	4b15      	ldr	r3, [pc, #84]	; (89f4c <_realloc_r+0x3dc>)
   89ef6:	e751      	b.n	89d9c <_realloc_r+0x22c>
   89ef8:	6921      	ldr	r1, [r4, #16]
   89efa:	f10a 0220 	add.w	r2, sl, #32
   89efe:	f8ca 1018 	str.w	r1, [sl, #24]
   89f02:	6961      	ldr	r1, [r4, #20]
   89f04:	3418      	adds	r4, #24
   89f06:	f8ca 101c 	str.w	r1, [sl, #28]
   89f0a:	e79c      	b.n	89e46 <_realloc_r+0x2d6>
   89f0c:	68a1      	ldr	r1, [r4, #8]
   89f0e:	2a24      	cmp	r2, #36	; 0x24
   89f10:	f8ca 1010 	str.w	r1, [sl, #16]
   89f14:	68e1      	ldr	r1, [r4, #12]
   89f16:	f8ca 1014 	str.w	r1, [sl, #20]
   89f1a:	d00d      	beq.n	89f38 <_realloc_r+0x3c8>
   89f1c:	3410      	adds	r4, #16
   89f1e:	f10a 0218 	add.w	r2, sl, #24
   89f22:	e735      	b.n	89d90 <_realloc_r+0x220>
   89f24:	6922      	ldr	r2, [r4, #16]
   89f26:	f10a 0320 	add.w	r3, sl, #32
   89f2a:	f8ca 2018 	str.w	r2, [sl, #24]
   89f2e:	6962      	ldr	r2, [r4, #20]
   89f30:	3418      	adds	r4, #24
   89f32:	f8ca 201c 	str.w	r2, [sl, #28]
   89f36:	e6b3      	b.n	89ca0 <_realloc_r+0x130>
   89f38:	6921      	ldr	r1, [r4, #16]
   89f3a:	f10a 0220 	add.w	r2, sl, #32
   89f3e:	f8ca 1018 	str.w	r1, [sl, #24]
   89f42:	6961      	ldr	r1, [r4, #20]
   89f44:	3418      	adds	r4, #24
   89f46:	f8ca 101c 	str.w	r1, [sl, #28]
   89f4a:	e721      	b.n	89d90 <_realloc_r+0x220>
   89f4c:	20000970 	.word	0x20000970

00089f50 <frexp>:
   89f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89f52:	4617      	mov	r7, r2
   89f54:	2200      	movs	r2, #0
   89f56:	f8df c060 	ldr.w	ip, [pc, #96]	; 89fb8 <frexp+0x68>
   89f5a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89f5e:	4563      	cmp	r3, ip
   89f60:	4604      	mov	r4, r0
   89f62:	460d      	mov	r5, r1
   89f64:	603a      	str	r2, [r7, #0]
   89f66:	dc22      	bgt.n	89fae <frexp+0x5e>
   89f68:	4684      	mov	ip, r0
   89f6a:	ea53 0c0c 	orrs.w	ip, r3, ip
   89f6e:	d01e      	beq.n	89fae <frexp+0x5e>
   89f70:	f8df c048 	ldr.w	ip, [pc, #72]	; 89fbc <frexp+0x6c>
   89f74:	460e      	mov	r6, r1
   89f76:	ea01 0c0c 	and.w	ip, r1, ip
   89f7a:	f1bc 0f00 	cmp.w	ip, #0
   89f7e:	d109      	bne.n	89f94 <frexp+0x44>
   89f80:	2200      	movs	r2, #0
   89f82:	4b0c      	ldr	r3, [pc, #48]	; (89fb4 <frexp+0x64>)
   89f84:	f000 fd0e 	bl	8a9a4 <__aeabi_dmul>
   89f88:	f06f 0235 	mvn.w	r2, #53	; 0x35
   89f8c:	4604      	mov	r4, r0
   89f8e:	460e      	mov	r6, r1
   89f90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89f94:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   89f98:	151b      	asrs	r3, r3, #20
   89f9a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   89f9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   89fa2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   89fa6:	4413      	add	r3, r2
   89fa8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   89fac:	603b      	str	r3, [r7, #0]
   89fae:	4620      	mov	r0, r4
   89fb0:	4629      	mov	r1, r5
   89fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89fb4:	43500000 	.word	0x43500000
   89fb8:	7fefffff 	.word	0x7fefffff
   89fbc:	7ff00000 	.word	0x7ff00000

00089fc0 <_sbrk_r>:
   89fc0:	2200      	movs	r2, #0
   89fc2:	b538      	push	{r3, r4, r5, lr}
   89fc4:	4d06      	ldr	r5, [pc, #24]	; (89fe0 <_sbrk_r+0x20>)
   89fc6:	4604      	mov	r4, r0
   89fc8:	4608      	mov	r0, r1
   89fca:	602a      	str	r2, [r5, #0]
   89fcc:	f7f8 fc94 	bl	828f8 <_sbrk>
   89fd0:	1c43      	adds	r3, r0, #1
   89fd2:	d000      	beq.n	89fd6 <_sbrk_r+0x16>
   89fd4:	bd38      	pop	{r3, r4, r5, pc}
   89fd6:	682b      	ldr	r3, [r5, #0]
   89fd8:	2b00      	cmp	r3, #0
   89fda:	d0fb      	beq.n	89fd4 <_sbrk_r+0x14>
   89fdc:	6023      	str	r3, [r4, #0]
   89fde:	bd38      	pop	{r3, r4, r5, pc}
   89fe0:	20001890 	.word	0x20001890

00089fe4 <__sread>:
   89fe4:	b510      	push	{r4, lr}
   89fe6:	460c      	mov	r4, r1
   89fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   89fec:	f000 fab4 	bl	8a558 <_read_r>
   89ff0:	2800      	cmp	r0, #0
   89ff2:	db03      	blt.n	89ffc <__sread+0x18>
   89ff4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   89ff6:	4403      	add	r3, r0
   89ff8:	6523      	str	r3, [r4, #80]	; 0x50
   89ffa:	bd10      	pop	{r4, pc}
   89ffc:	89a3      	ldrh	r3, [r4, #12]
   89ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8a002:	81a3      	strh	r3, [r4, #12]
   8a004:	bd10      	pop	{r4, pc}
   8a006:	bf00      	nop

0008a008 <__swrite>:
   8a008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a00c:	460c      	mov	r4, r1
   8a00e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8a012:	461f      	mov	r7, r3
   8a014:	05cb      	lsls	r3, r1, #23
   8a016:	4616      	mov	r6, r2
   8a018:	4605      	mov	r5, r0
   8a01a:	d40b      	bmi.n	8a034 <__swrite+0x2c>
   8a01c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8a020:	81a1      	strh	r1, [r4, #12]
   8a022:	463b      	mov	r3, r7
   8a024:	4632      	mov	r2, r6
   8a026:	4628      	mov	r0, r5
   8a028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8a030:	f000 b91e 	b.w	8a270 <_write_r>
   8a034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a038:	2302      	movs	r3, #2
   8a03a:	2200      	movs	r2, #0
   8a03c:	f000 fa76 	bl	8a52c <_lseek_r>
   8a040:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8a044:	e7ea      	b.n	8a01c <__swrite+0x14>
   8a046:	bf00      	nop

0008a048 <__sseek>:
   8a048:	b510      	push	{r4, lr}
   8a04a:	460c      	mov	r4, r1
   8a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a050:	f000 fa6c 	bl	8a52c <_lseek_r>
   8a054:	89a3      	ldrh	r3, [r4, #12]
   8a056:	1c42      	adds	r2, r0, #1
   8a058:	bf0e      	itee	eq
   8a05a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8a05e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8a062:	6520      	strne	r0, [r4, #80]	; 0x50
   8a064:	81a3      	strh	r3, [r4, #12]
   8a066:	bd10      	pop	{r4, pc}

0008a068 <__sclose>:
   8a068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a06c:	f000 b9aa 	b.w	8a3c4 <_close_r>

0008a070 <__ssprint_r>:
   8a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a074:	6893      	ldr	r3, [r2, #8]
   8a076:	4691      	mov	r9, r2
   8a078:	b083      	sub	sp, #12
   8a07a:	2b00      	cmp	r3, #0
   8a07c:	d06d      	beq.n	8a15a <__ssprint_r+0xea>
   8a07e:	6817      	ldr	r7, [r2, #0]
   8a080:	4680      	mov	r8, r0
   8a082:	460c      	mov	r4, r1
   8a084:	6808      	ldr	r0, [r1, #0]
   8a086:	688d      	ldr	r5, [r1, #8]
   8a088:	3708      	adds	r7, #8
   8a08a:	e043      	b.n	8a114 <__ssprint_r+0xa4>
   8a08c:	89a3      	ldrh	r3, [r4, #12]
   8a08e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a092:	d02e      	beq.n	8a0f2 <__ssprint_r+0x82>
   8a094:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8a098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8a09c:	eba0 0a01 	sub.w	sl, r0, r1
   8a0a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8a0a4:	eb0a 0006 	add.w	r0, sl, r6
   8a0a8:	106d      	asrs	r5, r5, #1
   8a0aa:	3001      	adds	r0, #1
   8a0ac:	42a8      	cmp	r0, r5
   8a0ae:	462a      	mov	r2, r5
   8a0b0:	bf84      	itt	hi
   8a0b2:	4605      	movhi	r5, r0
   8a0b4:	462a      	movhi	r2, r5
   8a0b6:	055b      	lsls	r3, r3, #21
   8a0b8:	d536      	bpl.n	8a128 <__ssprint_r+0xb8>
   8a0ba:	4611      	mov	r1, r2
   8a0bc:	4640      	mov	r0, r8
   8a0be:	f7fe fe61 	bl	88d84 <_malloc_r>
   8a0c2:	2800      	cmp	r0, #0
   8a0c4:	d03a      	beq.n	8a13c <__ssprint_r+0xcc>
   8a0c6:	4652      	mov	r2, sl
   8a0c8:	6921      	ldr	r1, [r4, #16]
   8a0ca:	9001      	str	r0, [sp, #4]
   8a0cc:	f7fa f9c4 	bl	84458 <memcpy>
   8a0d0:	89a2      	ldrh	r2, [r4, #12]
   8a0d2:	9b01      	ldr	r3, [sp, #4]
   8a0d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8a0d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8a0dc:	81a2      	strh	r2, [r4, #12]
   8a0de:	eba5 020a 	sub.w	r2, r5, sl
   8a0e2:	eb03 000a 	add.w	r0, r3, sl
   8a0e6:	6165      	str	r5, [r4, #20]
   8a0e8:	46b2      	mov	sl, r6
   8a0ea:	4635      	mov	r5, r6
   8a0ec:	6123      	str	r3, [r4, #16]
   8a0ee:	6020      	str	r0, [r4, #0]
   8a0f0:	60a2      	str	r2, [r4, #8]
   8a0f2:	4659      	mov	r1, fp
   8a0f4:	4652      	mov	r2, sl
   8a0f6:	f7ff f949 	bl	8938c <memmove>
   8a0fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8a0fe:	68a1      	ldr	r1, [r4, #8]
   8a100:	6820      	ldr	r0, [r4, #0]
   8a102:	1b4d      	subs	r5, r1, r5
   8a104:	4450      	add	r0, sl
   8a106:	1b9e      	subs	r6, r3, r6
   8a108:	60a5      	str	r5, [r4, #8]
   8a10a:	6020      	str	r0, [r4, #0]
   8a10c:	f8c9 6008 	str.w	r6, [r9, #8]
   8a110:	b31e      	cbz	r6, 8a15a <__ssprint_r+0xea>
   8a112:	3708      	adds	r7, #8
   8a114:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8a118:	2e00      	cmp	r6, #0
   8a11a:	d0fa      	beq.n	8a112 <__ssprint_r+0xa2>
   8a11c:	42b5      	cmp	r5, r6
   8a11e:	46aa      	mov	sl, r5
   8a120:	d9b4      	bls.n	8a08c <__ssprint_r+0x1c>
   8a122:	4635      	mov	r5, r6
   8a124:	46b2      	mov	sl, r6
   8a126:	e7e4      	b.n	8a0f2 <__ssprint_r+0x82>
   8a128:	4640      	mov	r0, r8
   8a12a:	f7ff fd21 	bl	89b70 <_realloc_r>
   8a12e:	4603      	mov	r3, r0
   8a130:	2800      	cmp	r0, #0
   8a132:	d1d4      	bne.n	8a0de <__ssprint_r+0x6e>
   8a134:	4640      	mov	r0, r8
   8a136:	6921      	ldr	r1, [r4, #16]
   8a138:	f7fe faf2 	bl	88720 <_free_r>
   8a13c:	230c      	movs	r3, #12
   8a13e:	2200      	movs	r2, #0
   8a140:	f04f 30ff 	mov.w	r0, #4294967295
   8a144:	f8c8 3000 	str.w	r3, [r8]
   8a148:	89a3      	ldrh	r3, [r4, #12]
   8a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a14e:	81a3      	strh	r3, [r4, #12]
   8a150:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8a154:	b003      	add	sp, #12
   8a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a15a:	2000      	movs	r0, #0
   8a15c:	f8c9 0004 	str.w	r0, [r9, #4]
   8a160:	b003      	add	sp, #12
   8a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a166:	bf00      	nop

0008a168 <__swbuf_r>:
   8a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a16a:	460d      	mov	r5, r1
   8a16c:	4614      	mov	r4, r2
   8a16e:	4606      	mov	r6, r0
   8a170:	b110      	cbz	r0, 8a178 <__swbuf_r+0x10>
   8a172:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a174:	2b00      	cmp	r3, #0
   8a176:	d043      	beq.n	8a200 <__swbuf_r+0x98>
   8a178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a17c:	69a3      	ldr	r3, [r4, #24]
   8a17e:	0717      	lsls	r7, r2, #28
   8a180:	60a3      	str	r3, [r4, #8]
   8a182:	b290      	uxth	r0, r2
   8a184:	d51b      	bpl.n	8a1be <__swbuf_r+0x56>
   8a186:	6923      	ldr	r3, [r4, #16]
   8a188:	b1cb      	cbz	r3, 8a1be <__swbuf_r+0x56>
   8a18a:	b2ed      	uxtb	r5, r5
   8a18c:	0481      	lsls	r1, r0, #18
   8a18e:	462f      	mov	r7, r5
   8a190:	d522      	bpl.n	8a1d8 <__swbuf_r+0x70>
   8a192:	6822      	ldr	r2, [r4, #0]
   8a194:	6961      	ldr	r1, [r4, #20]
   8a196:	1ad3      	subs	r3, r2, r3
   8a198:	4299      	cmp	r1, r3
   8a19a:	dd29      	ble.n	8a1f0 <__swbuf_r+0x88>
   8a19c:	3301      	adds	r3, #1
   8a19e:	68a1      	ldr	r1, [r4, #8]
   8a1a0:	1c50      	adds	r0, r2, #1
   8a1a2:	3901      	subs	r1, #1
   8a1a4:	60a1      	str	r1, [r4, #8]
   8a1a6:	6020      	str	r0, [r4, #0]
   8a1a8:	7015      	strb	r5, [r2, #0]
   8a1aa:	6962      	ldr	r2, [r4, #20]
   8a1ac:	429a      	cmp	r2, r3
   8a1ae:	d02a      	beq.n	8a206 <__swbuf_r+0x9e>
   8a1b0:	89a3      	ldrh	r3, [r4, #12]
   8a1b2:	07db      	lsls	r3, r3, #31
   8a1b4:	d501      	bpl.n	8a1ba <__swbuf_r+0x52>
   8a1b6:	2d0a      	cmp	r5, #10
   8a1b8:	d025      	beq.n	8a206 <__swbuf_r+0x9e>
   8a1ba:	4638      	mov	r0, r7
   8a1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a1be:	4621      	mov	r1, r4
   8a1c0:	4630      	mov	r0, r6
   8a1c2:	f7fd f829 	bl	87218 <__swsetup_r>
   8a1c6:	bb20      	cbnz	r0, 8a212 <__swbuf_r+0xaa>
   8a1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a1cc:	b2ed      	uxtb	r5, r5
   8a1ce:	b290      	uxth	r0, r2
   8a1d0:	0481      	lsls	r1, r0, #18
   8a1d2:	462f      	mov	r7, r5
   8a1d4:	6923      	ldr	r3, [r4, #16]
   8a1d6:	d4dc      	bmi.n	8a192 <__swbuf_r+0x2a>
   8a1d8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8a1da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a1de:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8a1e2:	81a2      	strh	r2, [r4, #12]
   8a1e4:	6822      	ldr	r2, [r4, #0]
   8a1e6:	6661      	str	r1, [r4, #100]	; 0x64
   8a1e8:	6961      	ldr	r1, [r4, #20]
   8a1ea:	1ad3      	subs	r3, r2, r3
   8a1ec:	4299      	cmp	r1, r3
   8a1ee:	dcd5      	bgt.n	8a19c <__swbuf_r+0x34>
   8a1f0:	4621      	mov	r1, r4
   8a1f2:	4630      	mov	r0, r6
   8a1f4:	f7fe f914 	bl	88420 <_fflush_r>
   8a1f8:	b958      	cbnz	r0, 8a212 <__swbuf_r+0xaa>
   8a1fa:	2301      	movs	r3, #1
   8a1fc:	6822      	ldr	r2, [r4, #0]
   8a1fe:	e7ce      	b.n	8a19e <__swbuf_r+0x36>
   8a200:	f7fe f96a 	bl	884d8 <__sinit>
   8a204:	e7b8      	b.n	8a178 <__swbuf_r+0x10>
   8a206:	4621      	mov	r1, r4
   8a208:	4630      	mov	r0, r6
   8a20a:	f7fe f909 	bl	88420 <_fflush_r>
   8a20e:	2800      	cmp	r0, #0
   8a210:	d0d3      	beq.n	8a1ba <__swbuf_r+0x52>
   8a212:	f04f 37ff 	mov.w	r7, #4294967295
   8a216:	e7d0      	b.n	8a1ba <__swbuf_r+0x52>

0008a218 <_wcrtomb_r>:
   8a218:	b570      	push	{r4, r5, r6, lr}
   8a21a:	4606      	mov	r6, r0
   8a21c:	461d      	mov	r5, r3
   8a21e:	b084      	sub	sp, #16
   8a220:	b139      	cbz	r1, 8a232 <_wcrtomb_r+0x1a>
   8a222:	4c0b      	ldr	r4, [pc, #44]	; (8a250 <_wcrtomb_r+0x38>)
   8a224:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8a228:	47a0      	blx	r4
   8a22a:	1c43      	adds	r3, r0, #1
   8a22c:	d00a      	beq.n	8a244 <_wcrtomb_r+0x2c>
   8a22e:	b004      	add	sp, #16
   8a230:	bd70      	pop	{r4, r5, r6, pc}
   8a232:	460c      	mov	r4, r1
   8a234:	4906      	ldr	r1, [pc, #24]	; (8a250 <_wcrtomb_r+0x38>)
   8a236:	4622      	mov	r2, r4
   8a238:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8a23c:	a901      	add	r1, sp, #4
   8a23e:	47a0      	blx	r4
   8a240:	1c43      	adds	r3, r0, #1
   8a242:	d1f4      	bne.n	8a22e <_wcrtomb_r+0x16>
   8a244:	2200      	movs	r2, #0
   8a246:	238a      	movs	r3, #138	; 0x8a
   8a248:	602a      	str	r2, [r5, #0]
   8a24a:	6033      	str	r3, [r6, #0]
   8a24c:	b004      	add	sp, #16
   8a24e:	bd70      	pop	{r4, r5, r6, pc}
   8a250:	20000804 	.word	0x20000804

0008a254 <__ascii_wctomb>:
   8a254:	4603      	mov	r3, r0
   8a256:	b149      	cbz	r1, 8a26c <__ascii_wctomb+0x18>
   8a258:	2aff      	cmp	r2, #255	; 0xff
   8a25a:	d802      	bhi.n	8a262 <__ascii_wctomb+0xe>
   8a25c:	2001      	movs	r0, #1
   8a25e:	700a      	strb	r2, [r1, #0]
   8a260:	4770      	bx	lr
   8a262:	228a      	movs	r2, #138	; 0x8a
   8a264:	f04f 30ff 	mov.w	r0, #4294967295
   8a268:	601a      	str	r2, [r3, #0]
   8a26a:	4770      	bx	lr
   8a26c:	4608      	mov	r0, r1
   8a26e:	4770      	bx	lr

0008a270 <_write_r>:
   8a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a272:	460f      	mov	r7, r1
   8a274:	2600      	movs	r6, #0
   8a276:	4d08      	ldr	r5, [pc, #32]	; (8a298 <_write_r+0x28>)
   8a278:	4611      	mov	r1, r2
   8a27a:	4604      	mov	r4, r0
   8a27c:	461a      	mov	r2, r3
   8a27e:	4638      	mov	r0, r7
   8a280:	602e      	str	r6, [r5, #0]
   8a282:	f7fa f891 	bl	843a8 <_write>
   8a286:	1c43      	adds	r3, r0, #1
   8a288:	d000      	beq.n	8a28c <_write_r+0x1c>
   8a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a28c:	682b      	ldr	r3, [r5, #0]
   8a28e:	2b00      	cmp	r3, #0
   8a290:	d0fb      	beq.n	8a28a <_write_r+0x1a>
   8a292:	6023      	str	r3, [r4, #0]
   8a294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a296:	bf00      	nop
   8a298:	20001890 	.word	0x20001890

0008a29c <__register_exitproc>:
   8a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a2a0:	f8df a080 	ldr.w	sl, [pc, #128]	; 8a324 <__register_exitproc+0x88>
   8a2a4:	4606      	mov	r6, r0
   8a2a6:	f8da 0000 	ldr.w	r0, [sl]
   8a2aa:	4698      	mov	r8, r3
   8a2ac:	460f      	mov	r7, r1
   8a2ae:	4691      	mov	r9, r2
   8a2b0:	f7fe fce4 	bl	88c7c <__retarget_lock_acquire_recursive>
   8a2b4:	4b1a      	ldr	r3, [pc, #104]	; (8a320 <__register_exitproc+0x84>)
   8a2b6:	681b      	ldr	r3, [r3, #0]
   8a2b8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8a2bc:	b324      	cbz	r4, 8a308 <__register_exitproc+0x6c>
   8a2be:	6865      	ldr	r5, [r4, #4]
   8a2c0:	2d1f      	cmp	r5, #31
   8a2c2:	dc26      	bgt.n	8a312 <__register_exitproc+0x76>
   8a2c4:	b95e      	cbnz	r6, 8a2de <__register_exitproc+0x42>
   8a2c6:	1c6b      	adds	r3, r5, #1
   8a2c8:	3502      	adds	r5, #2
   8a2ca:	f8da 0000 	ldr.w	r0, [sl]
   8a2ce:	6063      	str	r3, [r4, #4]
   8a2d0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8a2d4:	f7fe fcd4 	bl	88c80 <__retarget_lock_release_recursive>
   8a2d8:	2000      	movs	r0, #0
   8a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a2de:	2301      	movs	r3, #1
   8a2e0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8a2e4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8a2e8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8a2ec:	40ab      	lsls	r3, r5
   8a2ee:	431a      	orrs	r2, r3
   8a2f0:	2e02      	cmp	r6, #2
   8a2f2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8a2f6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8a2fa:	d1e4      	bne.n	8a2c6 <__register_exitproc+0x2a>
   8a2fc:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8a300:	4313      	orrs	r3, r2
   8a302:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8a306:	e7de      	b.n	8a2c6 <__register_exitproc+0x2a>
   8a308:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8a30c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8a310:	e7d5      	b.n	8a2be <__register_exitproc+0x22>
   8a312:	f8da 0000 	ldr.w	r0, [sl]
   8a316:	f7fe fcb3 	bl	88c80 <__retarget_lock_release_recursive>
   8a31a:	f04f 30ff 	mov.w	r0, #4294967295
   8a31e:	e7dc      	b.n	8a2da <__register_exitproc+0x3e>
   8a320:	0008b37c 	.word	0x0008b37c
   8a324:	20000800 	.word	0x20000800

0008a328 <__assert_func>:
   8a328:	4614      	mov	r4, r2
   8a32a:	b500      	push	{lr}
   8a32c:	4d09      	ldr	r5, [pc, #36]	; (8a354 <__assert_func+0x2c>)
   8a32e:	461a      	mov	r2, r3
   8a330:	4603      	mov	r3, r0
   8a332:	6828      	ldr	r0, [r5, #0]
   8a334:	b085      	sub	sp, #20
   8a336:	68c0      	ldr	r0, [r0, #12]
   8a338:	b144      	cbz	r4, 8a34c <__assert_func+0x24>
   8a33a:	4d07      	ldr	r5, [pc, #28]	; (8a358 <__assert_func+0x30>)
   8a33c:	9100      	str	r1, [sp, #0]
   8a33e:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8a342:	4906      	ldr	r1, [pc, #24]	; (8a35c <__assert_func+0x34>)
   8a344:	f000 f8b6 	bl	8a4b4 <fiprintf>
   8a348:	f000 f91c 	bl	8a584 <abort>
   8a34c:	4d04      	ldr	r5, [pc, #16]	; (8a360 <__assert_func+0x38>)
   8a34e:	462c      	mov	r4, r5
   8a350:	e7f4      	b.n	8a33c <__assert_func+0x14>
   8a352:	bf00      	nop
   8a354:	200003d0 	.word	0x200003d0
   8a358:	0008b634 	.word	0x0008b634
   8a35c:	0008b644 	.word	0x0008b644
   8a360:	0008b340 	.word	0x0008b340

0008a364 <_calloc_r>:
   8a364:	b510      	push	{r4, lr}
   8a366:	fb02 f101 	mul.w	r1, r2, r1
   8a36a:	f7fe fd0b 	bl	88d84 <_malloc_r>
   8a36e:	4604      	mov	r4, r0
   8a370:	b168      	cbz	r0, 8a38e <_calloc_r+0x2a>
   8a372:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8a376:	f022 0203 	bic.w	r2, r2, #3
   8a37a:	3a04      	subs	r2, #4
   8a37c:	2a24      	cmp	r2, #36	; 0x24
   8a37e:	d818      	bhi.n	8a3b2 <_calloc_r+0x4e>
   8a380:	2a13      	cmp	r2, #19
   8a382:	d806      	bhi.n	8a392 <_calloc_r+0x2e>
   8a384:	4602      	mov	r2, r0
   8a386:	2300      	movs	r3, #0
   8a388:	e9c2 3300 	strd	r3, r3, [r2]
   8a38c:	6093      	str	r3, [r2, #8]
   8a38e:	4620      	mov	r0, r4
   8a390:	bd10      	pop	{r4, pc}
   8a392:	2300      	movs	r3, #0
   8a394:	2a1b      	cmp	r2, #27
   8a396:	e9c0 3300 	strd	r3, r3, [r0]
   8a39a:	d90f      	bls.n	8a3bc <_calloc_r+0x58>
   8a39c:	2a24      	cmp	r2, #36	; 0x24
   8a39e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8a3a2:	bf0a      	itet	eq
   8a3a4:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8a3a8:	f100 0210 	addne.w	r2, r0, #16
   8a3ac:	f100 0218 	addeq.w	r2, r0, #24
   8a3b0:	e7e9      	b.n	8a386 <_calloc_r+0x22>
   8a3b2:	2100      	movs	r1, #0
   8a3b4:	f7fa f8c6 	bl	84544 <memset>
   8a3b8:	4620      	mov	r0, r4
   8a3ba:	bd10      	pop	{r4, pc}
   8a3bc:	f100 0208 	add.w	r2, r0, #8
   8a3c0:	e7e1      	b.n	8a386 <_calloc_r+0x22>
   8a3c2:	bf00      	nop

0008a3c4 <_close_r>:
   8a3c4:	2200      	movs	r2, #0
   8a3c6:	b538      	push	{r3, r4, r5, lr}
   8a3c8:	4d06      	ldr	r5, [pc, #24]	; (8a3e4 <_close_r+0x20>)
   8a3ca:	4604      	mov	r4, r0
   8a3cc:	4608      	mov	r0, r1
   8a3ce:	602a      	str	r2, [r5, #0]
   8a3d0:	f7f8 faac 	bl	8292c <_close>
   8a3d4:	1c43      	adds	r3, r0, #1
   8a3d6:	d000      	beq.n	8a3da <_close_r+0x16>
   8a3d8:	bd38      	pop	{r3, r4, r5, pc}
   8a3da:	682b      	ldr	r3, [r5, #0]
   8a3dc:	2b00      	cmp	r3, #0
   8a3de:	d0fb      	beq.n	8a3d8 <_close_r+0x14>
   8a3e0:	6023      	str	r3, [r4, #0]
   8a3e2:	bd38      	pop	{r3, r4, r5, pc}
   8a3e4:	20001890 	.word	0x20001890

0008a3e8 <_fclose_r>:
   8a3e8:	b570      	push	{r4, r5, r6, lr}
   8a3ea:	2900      	cmp	r1, #0
   8a3ec:	d04b      	beq.n	8a486 <_fclose_r+0x9e>
   8a3ee:	460c      	mov	r4, r1
   8a3f0:	4605      	mov	r5, r0
   8a3f2:	b110      	cbz	r0, 8a3fa <_fclose_r+0x12>
   8a3f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a3f6:	2b00      	cmp	r3, #0
   8a3f8:	d048      	beq.n	8a48c <_fclose_r+0xa4>
   8a3fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a3fc:	07d8      	lsls	r0, r3, #31
   8a3fe:	d534      	bpl.n	8a46a <_fclose_r+0x82>
   8a400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a404:	2b00      	cmp	r3, #0
   8a406:	d03e      	beq.n	8a486 <_fclose_r+0x9e>
   8a408:	4621      	mov	r1, r4
   8a40a:	4628      	mov	r0, r5
   8a40c:	f7fd ff70 	bl	882f0 <__sflush_r>
   8a410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8a412:	4606      	mov	r6, r0
   8a414:	b133      	cbz	r3, 8a424 <_fclose_r+0x3c>
   8a416:	4628      	mov	r0, r5
   8a418:	69e1      	ldr	r1, [r4, #28]
   8a41a:	4798      	blx	r3
   8a41c:	2800      	cmp	r0, #0
   8a41e:	bfb8      	it	lt
   8a420:	f04f 36ff 	movlt.w	r6, #4294967295
   8a424:	89a3      	ldrh	r3, [r4, #12]
   8a426:	061a      	lsls	r2, r3, #24
   8a428:	d43b      	bmi.n	8a4a2 <_fclose_r+0xba>
   8a42a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8a42c:	b141      	cbz	r1, 8a440 <_fclose_r+0x58>
   8a42e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8a432:	4299      	cmp	r1, r3
   8a434:	d002      	beq.n	8a43c <_fclose_r+0x54>
   8a436:	4628      	mov	r0, r5
   8a438:	f7fe f972 	bl	88720 <_free_r>
   8a43c:	2300      	movs	r3, #0
   8a43e:	6323      	str	r3, [r4, #48]	; 0x30
   8a440:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8a442:	b121      	cbz	r1, 8a44e <_fclose_r+0x66>
   8a444:	4628      	mov	r0, r5
   8a446:	f7fe f96b 	bl	88720 <_free_r>
   8a44a:	2300      	movs	r3, #0
   8a44c:	6463      	str	r3, [r4, #68]	; 0x44
   8a44e:	f7fe f871 	bl	88534 <__sfp_lock_acquire>
   8a452:	2200      	movs	r2, #0
   8a454:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a456:	81a2      	strh	r2, [r4, #12]
   8a458:	07db      	lsls	r3, r3, #31
   8a45a:	d527      	bpl.n	8a4ac <_fclose_r+0xc4>
   8a45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a45e:	f7fe fc0b 	bl	88c78 <__retarget_lock_close_recursive>
   8a462:	f7fe f86d 	bl	88540 <__sfp_lock_release>
   8a466:	4630      	mov	r0, r6
   8a468:	bd70      	pop	{r4, r5, r6, pc}
   8a46a:	89a3      	ldrh	r3, [r4, #12]
   8a46c:	0599      	lsls	r1, r3, #22
   8a46e:	d4cb      	bmi.n	8a408 <_fclose_r+0x20>
   8a470:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a472:	f7fe fc03 	bl	88c7c <__retarget_lock_acquire_recursive>
   8a476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a47a:	2b00      	cmp	r3, #0
   8a47c:	d1c4      	bne.n	8a408 <_fclose_r+0x20>
   8a47e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8a480:	f016 0601 	ands.w	r6, r6, #1
   8a484:	d008      	beq.n	8a498 <_fclose_r+0xb0>
   8a486:	2600      	movs	r6, #0
   8a488:	4630      	mov	r0, r6
   8a48a:	bd70      	pop	{r4, r5, r6, pc}
   8a48c:	f7fe f824 	bl	884d8 <__sinit>
   8a490:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a492:	07d8      	lsls	r0, r3, #31
   8a494:	d4b4      	bmi.n	8a400 <_fclose_r+0x18>
   8a496:	e7e8      	b.n	8a46a <_fclose_r+0x82>
   8a498:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a49a:	f7fe fbf1 	bl	88c80 <__retarget_lock_release_recursive>
   8a49e:	4630      	mov	r0, r6
   8a4a0:	bd70      	pop	{r4, r5, r6, pc}
   8a4a2:	4628      	mov	r0, r5
   8a4a4:	6921      	ldr	r1, [r4, #16]
   8a4a6:	f7fe f93b 	bl	88720 <_free_r>
   8a4aa:	e7be      	b.n	8a42a <_fclose_r+0x42>
   8a4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a4ae:	f7fe fbe7 	bl	88c80 <__retarget_lock_release_recursive>
   8a4b2:	e7d3      	b.n	8a45c <_fclose_r+0x74>

0008a4b4 <fiprintf>:
   8a4b4:	b40e      	push	{r1, r2, r3}
   8a4b6:	b510      	push	{r4, lr}
   8a4b8:	b083      	sub	sp, #12
   8a4ba:	ab05      	add	r3, sp, #20
   8a4bc:	4c06      	ldr	r4, [pc, #24]	; (8a4d8 <fiprintf+0x24>)
   8a4be:	f853 2b04 	ldr.w	r2, [r3], #4
   8a4c2:	4601      	mov	r1, r0
   8a4c4:	6820      	ldr	r0, [r4, #0]
   8a4c6:	9301      	str	r3, [sp, #4]
   8a4c8:	f7fb ffcc 	bl	86464 <_vfiprintf_r>
   8a4cc:	b003      	add	sp, #12
   8a4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a4d2:	b003      	add	sp, #12
   8a4d4:	4770      	bx	lr
   8a4d6:	bf00      	nop
   8a4d8:	200003d0 	.word	0x200003d0

0008a4dc <_fstat_r>:
   8a4dc:	b570      	push	{r4, r5, r6, lr}
   8a4de:	460c      	mov	r4, r1
   8a4e0:	4603      	mov	r3, r0
   8a4e2:	2600      	movs	r6, #0
   8a4e4:	4d07      	ldr	r5, [pc, #28]	; (8a504 <_fstat_r+0x28>)
   8a4e6:	4620      	mov	r0, r4
   8a4e8:	4611      	mov	r1, r2
   8a4ea:	461c      	mov	r4, r3
   8a4ec:	602e      	str	r6, [r5, #0]
   8a4ee:	f7f8 fa20 	bl	82932 <_fstat>
   8a4f2:	1c43      	adds	r3, r0, #1
   8a4f4:	d000      	beq.n	8a4f8 <_fstat_r+0x1c>
   8a4f6:	bd70      	pop	{r4, r5, r6, pc}
   8a4f8:	682b      	ldr	r3, [r5, #0]
   8a4fa:	2b00      	cmp	r3, #0
   8a4fc:	d0fb      	beq.n	8a4f6 <_fstat_r+0x1a>
   8a4fe:	6023      	str	r3, [r4, #0]
   8a500:	bd70      	pop	{r4, r5, r6, pc}
   8a502:	bf00      	nop
   8a504:	20001890 	.word	0x20001890

0008a508 <_isatty_r>:
   8a508:	2200      	movs	r2, #0
   8a50a:	b538      	push	{r3, r4, r5, lr}
   8a50c:	4d06      	ldr	r5, [pc, #24]	; (8a528 <_isatty_r+0x20>)
   8a50e:	4604      	mov	r4, r0
   8a510:	4608      	mov	r0, r1
   8a512:	602a      	str	r2, [r5, #0]
   8a514:	f7f8 fa12 	bl	8293c <_isatty>
   8a518:	1c43      	adds	r3, r0, #1
   8a51a:	d000      	beq.n	8a51e <_isatty_r+0x16>
   8a51c:	bd38      	pop	{r3, r4, r5, pc}
   8a51e:	682b      	ldr	r3, [r5, #0]
   8a520:	2b00      	cmp	r3, #0
   8a522:	d0fb      	beq.n	8a51c <_isatty_r+0x14>
   8a524:	6023      	str	r3, [r4, #0]
   8a526:	bd38      	pop	{r3, r4, r5, pc}
   8a528:	20001890 	.word	0x20001890

0008a52c <_lseek_r>:
   8a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a52e:	460f      	mov	r7, r1
   8a530:	2600      	movs	r6, #0
   8a532:	4d08      	ldr	r5, [pc, #32]	; (8a554 <_lseek_r+0x28>)
   8a534:	4611      	mov	r1, r2
   8a536:	4604      	mov	r4, r0
   8a538:	461a      	mov	r2, r3
   8a53a:	4638      	mov	r0, r7
   8a53c:	602e      	str	r6, [r5, #0]
   8a53e:	f7f8 f9ff 	bl	82940 <_lseek>
   8a542:	1c43      	adds	r3, r0, #1
   8a544:	d000      	beq.n	8a548 <_lseek_r+0x1c>
   8a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a548:	682b      	ldr	r3, [r5, #0]
   8a54a:	2b00      	cmp	r3, #0
   8a54c:	d0fb      	beq.n	8a546 <_lseek_r+0x1a>
   8a54e:	6023      	str	r3, [r4, #0]
   8a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a552:	bf00      	nop
   8a554:	20001890 	.word	0x20001890

0008a558 <_read_r>:
   8a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a55a:	460f      	mov	r7, r1
   8a55c:	2600      	movs	r6, #0
   8a55e:	4d08      	ldr	r5, [pc, #32]	; (8a580 <_read_r+0x28>)
   8a560:	4611      	mov	r1, r2
   8a562:	4604      	mov	r4, r0
   8a564:	461a      	mov	r2, r3
   8a566:	4638      	mov	r0, r7
   8a568:	602e      	str	r6, [r5, #0]
   8a56a:	f7f8 f8e9 	bl	82740 <_read>
   8a56e:	1c43      	adds	r3, r0, #1
   8a570:	d000      	beq.n	8a574 <_read_r+0x1c>
   8a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a574:	682b      	ldr	r3, [r5, #0]
   8a576:	2b00      	cmp	r3, #0
   8a578:	d0fb      	beq.n	8a572 <_read_r+0x1a>
   8a57a:	6023      	str	r3, [r4, #0]
   8a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a57e:	bf00      	nop
   8a580:	20001890 	.word	0x20001890

0008a584 <abort>:
   8a584:	2006      	movs	r0, #6
   8a586:	b508      	push	{r3, lr}
   8a588:	f000 f830 	bl	8a5ec <raise>
   8a58c:	2001      	movs	r0, #1
   8a58e:	f7f8 f9d9 	bl	82944 <_exit>
   8a592:	bf00      	nop

0008a594 <_raise_r>:
   8a594:	291f      	cmp	r1, #31
   8a596:	b538      	push	{r3, r4, r5, lr}
   8a598:	4605      	mov	r5, r0
   8a59a:	d821      	bhi.n	8a5e0 <_raise_r+0x4c>
   8a59c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8a5a0:	460c      	mov	r4, r1
   8a5a2:	b16a      	cbz	r2, 8a5c0 <_raise_r+0x2c>
   8a5a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8a5a8:	b153      	cbz	r3, 8a5c0 <_raise_r+0x2c>
   8a5aa:	2b01      	cmp	r3, #1
   8a5ac:	d016      	beq.n	8a5dc <_raise_r+0x48>
   8a5ae:	1c59      	adds	r1, r3, #1
   8a5b0:	d010      	beq.n	8a5d4 <_raise_r+0x40>
   8a5b2:	2500      	movs	r5, #0
   8a5b4:	4620      	mov	r0, r4
   8a5b6:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8a5ba:	4798      	blx	r3
   8a5bc:	4628      	mov	r0, r5
   8a5be:	bd38      	pop	{r3, r4, r5, pc}
   8a5c0:	4628      	mov	r0, r5
   8a5c2:	f000 f831 	bl	8a628 <_getpid_r>
   8a5c6:	4622      	mov	r2, r4
   8a5c8:	4601      	mov	r1, r0
   8a5ca:	4628      	mov	r0, r5
   8a5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a5d0:	f000 b814 	b.w	8a5fc <_kill_r>
   8a5d4:	2316      	movs	r3, #22
   8a5d6:	2001      	movs	r0, #1
   8a5d8:	602b      	str	r3, [r5, #0]
   8a5da:	bd38      	pop	{r3, r4, r5, pc}
   8a5dc:	2000      	movs	r0, #0
   8a5de:	bd38      	pop	{r3, r4, r5, pc}
   8a5e0:	2316      	movs	r3, #22
   8a5e2:	f04f 30ff 	mov.w	r0, #4294967295
   8a5e6:	602b      	str	r3, [r5, #0]
   8a5e8:	bd38      	pop	{r3, r4, r5, pc}
   8a5ea:	bf00      	nop

0008a5ec <raise>:
   8a5ec:	4b02      	ldr	r3, [pc, #8]	; (8a5f8 <raise+0xc>)
   8a5ee:	4601      	mov	r1, r0
   8a5f0:	6818      	ldr	r0, [r3, #0]
   8a5f2:	f7ff bfcf 	b.w	8a594 <_raise_r>
   8a5f6:	bf00      	nop
   8a5f8:	200003d0 	.word	0x200003d0

0008a5fc <_kill_r>:
   8a5fc:	b570      	push	{r4, r5, r6, lr}
   8a5fe:	460c      	mov	r4, r1
   8a600:	4603      	mov	r3, r0
   8a602:	2600      	movs	r6, #0
   8a604:	4d07      	ldr	r5, [pc, #28]	; (8a624 <_kill_r+0x28>)
   8a606:	4620      	mov	r0, r4
   8a608:	4611      	mov	r1, r2
   8a60a:	461c      	mov	r4, r3
   8a60c:	602e      	str	r6, [r5, #0]
   8a60e:	f7f8 f9a3 	bl	82958 <_kill>
   8a612:	1c43      	adds	r3, r0, #1
   8a614:	d000      	beq.n	8a618 <_kill_r+0x1c>
   8a616:	bd70      	pop	{r4, r5, r6, pc}
   8a618:	682b      	ldr	r3, [r5, #0]
   8a61a:	2b00      	cmp	r3, #0
   8a61c:	d0fb      	beq.n	8a616 <_kill_r+0x1a>
   8a61e:	6023      	str	r3, [r4, #0]
   8a620:	bd70      	pop	{r4, r5, r6, pc}
   8a622:	bf00      	nop
   8a624:	20001890 	.word	0x20001890

0008a628 <_getpid_r>:
   8a628:	f7f8 b997 	b.w	8295a <_getpid>

0008a62c <__aeabi_drsub>:
   8a62c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8a630:	e002      	b.n	8a638 <__adddf3>
   8a632:	bf00      	nop

0008a634 <__aeabi_dsub>:
   8a634:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008a638 <__adddf3>:
   8a638:	b530      	push	{r4, r5, lr}
   8a63a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8a63e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8a642:	ea94 0f05 	teq	r4, r5
   8a646:	bf08      	it	eq
   8a648:	ea90 0f02 	teqeq	r0, r2
   8a64c:	bf1f      	itttt	ne
   8a64e:	ea54 0c00 	orrsne.w	ip, r4, r0
   8a652:	ea55 0c02 	orrsne.w	ip, r5, r2
   8a656:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8a65a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a65e:	f000 80e2 	beq.w	8a826 <__adddf3+0x1ee>
   8a662:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8a666:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8a66a:	bfb8      	it	lt
   8a66c:	426d      	neglt	r5, r5
   8a66e:	dd0c      	ble.n	8a68a <__adddf3+0x52>
   8a670:	442c      	add	r4, r5
   8a672:	ea80 0202 	eor.w	r2, r0, r2
   8a676:	ea81 0303 	eor.w	r3, r1, r3
   8a67a:	ea82 0000 	eor.w	r0, r2, r0
   8a67e:	ea83 0101 	eor.w	r1, r3, r1
   8a682:	ea80 0202 	eor.w	r2, r0, r2
   8a686:	ea81 0303 	eor.w	r3, r1, r3
   8a68a:	2d36      	cmp	r5, #54	; 0x36
   8a68c:	bf88      	it	hi
   8a68e:	bd30      	pophi	{r4, r5, pc}
   8a690:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a694:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a698:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8a69c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8a6a0:	d002      	beq.n	8a6a8 <__adddf3+0x70>
   8a6a2:	4240      	negs	r0, r0
   8a6a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a6a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8a6ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a6b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8a6b4:	d002      	beq.n	8a6bc <__adddf3+0x84>
   8a6b6:	4252      	negs	r2, r2
   8a6b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a6bc:	ea94 0f05 	teq	r4, r5
   8a6c0:	f000 80a7 	beq.w	8a812 <__adddf3+0x1da>
   8a6c4:	f1a4 0401 	sub.w	r4, r4, #1
   8a6c8:	f1d5 0e20 	rsbs	lr, r5, #32
   8a6cc:	db0d      	blt.n	8a6ea <__adddf3+0xb2>
   8a6ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   8a6d2:	fa22 f205 	lsr.w	r2, r2, r5
   8a6d6:	1880      	adds	r0, r0, r2
   8a6d8:	f141 0100 	adc.w	r1, r1, #0
   8a6dc:	fa03 f20e 	lsl.w	r2, r3, lr
   8a6e0:	1880      	adds	r0, r0, r2
   8a6e2:	fa43 f305 	asr.w	r3, r3, r5
   8a6e6:	4159      	adcs	r1, r3
   8a6e8:	e00e      	b.n	8a708 <__adddf3+0xd0>
   8a6ea:	f1a5 0520 	sub.w	r5, r5, #32
   8a6ee:	f10e 0e20 	add.w	lr, lr, #32
   8a6f2:	2a01      	cmp	r2, #1
   8a6f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   8a6f8:	bf28      	it	cs
   8a6fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   8a6fe:	fa43 f305 	asr.w	r3, r3, r5
   8a702:	18c0      	adds	r0, r0, r3
   8a704:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8a708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a70c:	d507      	bpl.n	8a71e <__adddf3+0xe6>
   8a70e:	f04f 0e00 	mov.w	lr, #0
   8a712:	f1dc 0c00 	rsbs	ip, ip, #0
   8a716:	eb7e 0000 	sbcs.w	r0, lr, r0
   8a71a:	eb6e 0101 	sbc.w	r1, lr, r1
   8a71e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8a722:	d31b      	bcc.n	8a75c <__adddf3+0x124>
   8a724:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8a728:	d30c      	bcc.n	8a744 <__adddf3+0x10c>
   8a72a:	0849      	lsrs	r1, r1, #1
   8a72c:	ea5f 0030 	movs.w	r0, r0, rrx
   8a730:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8a734:	f104 0401 	add.w	r4, r4, #1
   8a738:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8a73c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8a740:	f080 809a 	bcs.w	8a878 <__adddf3+0x240>
   8a744:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8a748:	bf08      	it	eq
   8a74a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a74e:	f150 0000 	adcs.w	r0, r0, #0
   8a752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a756:	ea41 0105 	orr.w	r1, r1, r5
   8a75a:	bd30      	pop	{r4, r5, pc}
   8a75c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8a760:	4140      	adcs	r0, r0
   8a762:	eb41 0101 	adc.w	r1, r1, r1
   8a766:	3c01      	subs	r4, #1
   8a768:	bf28      	it	cs
   8a76a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8a76e:	d2e9      	bcs.n	8a744 <__adddf3+0x10c>
   8a770:	f091 0f00 	teq	r1, #0
   8a774:	bf04      	itt	eq
   8a776:	4601      	moveq	r1, r0
   8a778:	2000      	moveq	r0, #0
   8a77a:	fab1 f381 	clz	r3, r1
   8a77e:	bf08      	it	eq
   8a780:	3320      	addeq	r3, #32
   8a782:	f1a3 030b 	sub.w	r3, r3, #11
   8a786:	f1b3 0220 	subs.w	r2, r3, #32
   8a78a:	da0c      	bge.n	8a7a6 <__adddf3+0x16e>
   8a78c:	320c      	adds	r2, #12
   8a78e:	dd08      	ble.n	8a7a2 <__adddf3+0x16a>
   8a790:	f102 0c14 	add.w	ip, r2, #20
   8a794:	f1c2 020c 	rsb	r2, r2, #12
   8a798:	fa01 f00c 	lsl.w	r0, r1, ip
   8a79c:	fa21 f102 	lsr.w	r1, r1, r2
   8a7a0:	e00c      	b.n	8a7bc <__adddf3+0x184>
   8a7a2:	f102 0214 	add.w	r2, r2, #20
   8a7a6:	bfd8      	it	le
   8a7a8:	f1c2 0c20 	rsble	ip, r2, #32
   8a7ac:	fa01 f102 	lsl.w	r1, r1, r2
   8a7b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   8a7b4:	bfdc      	itt	le
   8a7b6:	ea41 010c 	orrle.w	r1, r1, ip
   8a7ba:	4090      	lslle	r0, r2
   8a7bc:	1ae4      	subs	r4, r4, r3
   8a7be:	bfa2      	ittt	ge
   8a7c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8a7c4:	4329      	orrge	r1, r5
   8a7c6:	bd30      	popge	{r4, r5, pc}
   8a7c8:	ea6f 0404 	mvn.w	r4, r4
   8a7cc:	3c1f      	subs	r4, #31
   8a7ce:	da1c      	bge.n	8a80a <__adddf3+0x1d2>
   8a7d0:	340c      	adds	r4, #12
   8a7d2:	dc0e      	bgt.n	8a7f2 <__adddf3+0x1ba>
   8a7d4:	f104 0414 	add.w	r4, r4, #20
   8a7d8:	f1c4 0220 	rsb	r2, r4, #32
   8a7dc:	fa20 f004 	lsr.w	r0, r0, r4
   8a7e0:	fa01 f302 	lsl.w	r3, r1, r2
   8a7e4:	ea40 0003 	orr.w	r0, r0, r3
   8a7e8:	fa21 f304 	lsr.w	r3, r1, r4
   8a7ec:	ea45 0103 	orr.w	r1, r5, r3
   8a7f0:	bd30      	pop	{r4, r5, pc}
   8a7f2:	f1c4 040c 	rsb	r4, r4, #12
   8a7f6:	f1c4 0220 	rsb	r2, r4, #32
   8a7fa:	fa20 f002 	lsr.w	r0, r0, r2
   8a7fe:	fa01 f304 	lsl.w	r3, r1, r4
   8a802:	ea40 0003 	orr.w	r0, r0, r3
   8a806:	4629      	mov	r1, r5
   8a808:	bd30      	pop	{r4, r5, pc}
   8a80a:	fa21 f004 	lsr.w	r0, r1, r4
   8a80e:	4629      	mov	r1, r5
   8a810:	bd30      	pop	{r4, r5, pc}
   8a812:	f094 0f00 	teq	r4, #0
   8a816:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8a81a:	bf06      	itte	eq
   8a81c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8a820:	3401      	addeq	r4, #1
   8a822:	3d01      	subne	r5, #1
   8a824:	e74e      	b.n	8a6c4 <__adddf3+0x8c>
   8a826:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a82a:	bf18      	it	ne
   8a82c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a830:	d029      	beq.n	8a886 <__adddf3+0x24e>
   8a832:	ea94 0f05 	teq	r4, r5
   8a836:	bf08      	it	eq
   8a838:	ea90 0f02 	teqeq	r0, r2
   8a83c:	d005      	beq.n	8a84a <__adddf3+0x212>
   8a83e:	ea54 0c00 	orrs.w	ip, r4, r0
   8a842:	bf04      	itt	eq
   8a844:	4619      	moveq	r1, r3
   8a846:	4610      	moveq	r0, r2
   8a848:	bd30      	pop	{r4, r5, pc}
   8a84a:	ea91 0f03 	teq	r1, r3
   8a84e:	bf1e      	ittt	ne
   8a850:	2100      	movne	r1, #0
   8a852:	2000      	movne	r0, #0
   8a854:	bd30      	popne	{r4, r5, pc}
   8a856:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8a85a:	d105      	bne.n	8a868 <__adddf3+0x230>
   8a85c:	0040      	lsls	r0, r0, #1
   8a85e:	4149      	adcs	r1, r1
   8a860:	bf28      	it	cs
   8a862:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8a866:	bd30      	pop	{r4, r5, pc}
   8a868:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8a86c:	bf3c      	itt	cc
   8a86e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8a872:	bd30      	popcc	{r4, r5, pc}
   8a874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a878:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8a87c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a880:	f04f 0000 	mov.w	r0, #0
   8a884:	bd30      	pop	{r4, r5, pc}
   8a886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a88a:	bf1a      	itte	ne
   8a88c:	4619      	movne	r1, r3
   8a88e:	4610      	movne	r0, r2
   8a890:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8a894:	bf1c      	itt	ne
   8a896:	460b      	movne	r3, r1
   8a898:	4602      	movne	r2, r0
   8a89a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a89e:	bf06      	itte	eq
   8a8a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8a8a4:	ea91 0f03 	teqeq	r1, r3
   8a8a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8a8ac:	bd30      	pop	{r4, r5, pc}
   8a8ae:	bf00      	nop

0008a8b0 <__aeabi_ui2d>:
   8a8b0:	f090 0f00 	teq	r0, #0
   8a8b4:	bf04      	itt	eq
   8a8b6:	2100      	moveq	r1, #0
   8a8b8:	4770      	bxeq	lr
   8a8ba:	b530      	push	{r4, r5, lr}
   8a8bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a8c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a8c4:	f04f 0500 	mov.w	r5, #0
   8a8c8:	f04f 0100 	mov.w	r1, #0
   8a8cc:	e750      	b.n	8a770 <__adddf3+0x138>
   8a8ce:	bf00      	nop

0008a8d0 <__aeabi_i2d>:
   8a8d0:	f090 0f00 	teq	r0, #0
   8a8d4:	bf04      	itt	eq
   8a8d6:	2100      	moveq	r1, #0
   8a8d8:	4770      	bxeq	lr
   8a8da:	b530      	push	{r4, r5, lr}
   8a8dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a8e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a8e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8a8e8:	bf48      	it	mi
   8a8ea:	4240      	negmi	r0, r0
   8a8ec:	f04f 0100 	mov.w	r1, #0
   8a8f0:	e73e      	b.n	8a770 <__adddf3+0x138>
   8a8f2:	bf00      	nop

0008a8f4 <__aeabi_f2d>:
   8a8f4:	0042      	lsls	r2, r0, #1
   8a8f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8a8fa:	ea4f 0131 	mov.w	r1, r1, rrx
   8a8fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8a902:	bf1f      	itttt	ne
   8a904:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8a908:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a90c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8a910:	4770      	bxne	lr
   8a912:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8a916:	bf08      	it	eq
   8a918:	4770      	bxeq	lr
   8a91a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8a91e:	bf04      	itt	eq
   8a920:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8a924:	4770      	bxeq	lr
   8a926:	b530      	push	{r4, r5, lr}
   8a928:	f44f 7460 	mov.w	r4, #896	; 0x380
   8a92c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a930:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a934:	e71c      	b.n	8a770 <__adddf3+0x138>
   8a936:	bf00      	nop

0008a938 <__aeabi_ul2d>:
   8a938:	ea50 0201 	orrs.w	r2, r0, r1
   8a93c:	bf08      	it	eq
   8a93e:	4770      	bxeq	lr
   8a940:	b530      	push	{r4, r5, lr}
   8a942:	f04f 0500 	mov.w	r5, #0
   8a946:	e00a      	b.n	8a95e <__aeabi_l2d+0x16>

0008a948 <__aeabi_l2d>:
   8a948:	ea50 0201 	orrs.w	r2, r0, r1
   8a94c:	bf08      	it	eq
   8a94e:	4770      	bxeq	lr
   8a950:	b530      	push	{r4, r5, lr}
   8a952:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8a956:	d502      	bpl.n	8a95e <__aeabi_l2d+0x16>
   8a958:	4240      	negs	r0, r0
   8a95a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a95e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a962:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a966:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8a96a:	f43f aed8 	beq.w	8a71e <__adddf3+0xe6>
   8a96e:	f04f 0203 	mov.w	r2, #3
   8a972:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a976:	bf18      	it	ne
   8a978:	3203      	addne	r2, #3
   8a97a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a97e:	bf18      	it	ne
   8a980:	3203      	addne	r2, #3
   8a982:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8a986:	f1c2 0320 	rsb	r3, r2, #32
   8a98a:	fa00 fc03 	lsl.w	ip, r0, r3
   8a98e:	fa20 f002 	lsr.w	r0, r0, r2
   8a992:	fa01 fe03 	lsl.w	lr, r1, r3
   8a996:	ea40 000e 	orr.w	r0, r0, lr
   8a99a:	fa21 f102 	lsr.w	r1, r1, r2
   8a99e:	4414      	add	r4, r2
   8a9a0:	e6bd      	b.n	8a71e <__adddf3+0xe6>
   8a9a2:	bf00      	nop

0008a9a4 <__aeabi_dmul>:
   8a9a4:	b570      	push	{r4, r5, r6, lr}
   8a9a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a9aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a9ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a9b2:	bf1d      	ittte	ne
   8a9b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a9b8:	ea94 0f0c 	teqne	r4, ip
   8a9bc:	ea95 0f0c 	teqne	r5, ip
   8a9c0:	f000 f8de 	bleq	8ab80 <__aeabi_dmul+0x1dc>
   8a9c4:	442c      	add	r4, r5
   8a9c6:	ea81 0603 	eor.w	r6, r1, r3
   8a9ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8a9ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8a9d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8a9d6:	bf18      	it	ne
   8a9d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8a9dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a9e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a9e4:	d038      	beq.n	8aa58 <__aeabi_dmul+0xb4>
   8a9e6:	fba0 ce02 	umull	ip, lr, r0, r2
   8a9ea:	f04f 0500 	mov.w	r5, #0
   8a9ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   8a9f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8a9f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   8a9fa:	f04f 0600 	mov.w	r6, #0
   8a9fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   8aa02:	f09c 0f00 	teq	ip, #0
   8aa06:	bf18      	it	ne
   8aa08:	f04e 0e01 	orrne.w	lr, lr, #1
   8aa0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8aa10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8aa14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8aa18:	d204      	bcs.n	8aa24 <__aeabi_dmul+0x80>
   8aa1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8aa1e:	416d      	adcs	r5, r5
   8aa20:	eb46 0606 	adc.w	r6, r6, r6
   8aa24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8aa28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8aa2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8aa30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8aa34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8aa38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8aa3c:	bf88      	it	hi
   8aa3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8aa42:	d81e      	bhi.n	8aa82 <__aeabi_dmul+0xde>
   8aa44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8aa48:	bf08      	it	eq
   8aa4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8aa4e:	f150 0000 	adcs.w	r0, r0, #0
   8aa52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8aa56:	bd70      	pop	{r4, r5, r6, pc}
   8aa58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8aa5c:	ea46 0101 	orr.w	r1, r6, r1
   8aa60:	ea40 0002 	orr.w	r0, r0, r2
   8aa64:	ea81 0103 	eor.w	r1, r1, r3
   8aa68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8aa6c:	bfc2      	ittt	gt
   8aa6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8aa72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8aa76:	bd70      	popgt	{r4, r5, r6, pc}
   8aa78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8aa7c:	f04f 0e00 	mov.w	lr, #0
   8aa80:	3c01      	subs	r4, #1
   8aa82:	f300 80ab 	bgt.w	8abdc <__aeabi_dmul+0x238>
   8aa86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8aa8a:	bfde      	ittt	le
   8aa8c:	2000      	movle	r0, #0
   8aa8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8aa92:	bd70      	pople	{r4, r5, r6, pc}
   8aa94:	f1c4 0400 	rsb	r4, r4, #0
   8aa98:	3c20      	subs	r4, #32
   8aa9a:	da35      	bge.n	8ab08 <__aeabi_dmul+0x164>
   8aa9c:	340c      	adds	r4, #12
   8aa9e:	dc1b      	bgt.n	8aad8 <__aeabi_dmul+0x134>
   8aaa0:	f104 0414 	add.w	r4, r4, #20
   8aaa4:	f1c4 0520 	rsb	r5, r4, #32
   8aaa8:	fa00 f305 	lsl.w	r3, r0, r5
   8aaac:	fa20 f004 	lsr.w	r0, r0, r4
   8aab0:	fa01 f205 	lsl.w	r2, r1, r5
   8aab4:	ea40 0002 	orr.w	r0, r0, r2
   8aab8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8aabc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8aac0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8aac4:	fa21 f604 	lsr.w	r6, r1, r4
   8aac8:	eb42 0106 	adc.w	r1, r2, r6
   8aacc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8aad0:	bf08      	it	eq
   8aad2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8aad6:	bd70      	pop	{r4, r5, r6, pc}
   8aad8:	f1c4 040c 	rsb	r4, r4, #12
   8aadc:	f1c4 0520 	rsb	r5, r4, #32
   8aae0:	fa00 f304 	lsl.w	r3, r0, r4
   8aae4:	fa20 f005 	lsr.w	r0, r0, r5
   8aae8:	fa01 f204 	lsl.w	r2, r1, r4
   8aaec:	ea40 0002 	orr.w	r0, r0, r2
   8aaf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8aaf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8aaf8:	f141 0100 	adc.w	r1, r1, #0
   8aafc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8ab00:	bf08      	it	eq
   8ab02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8ab06:	bd70      	pop	{r4, r5, r6, pc}
   8ab08:	f1c4 0520 	rsb	r5, r4, #32
   8ab0c:	fa00 f205 	lsl.w	r2, r0, r5
   8ab10:	ea4e 0e02 	orr.w	lr, lr, r2
   8ab14:	fa20 f304 	lsr.w	r3, r0, r4
   8ab18:	fa01 f205 	lsl.w	r2, r1, r5
   8ab1c:	ea43 0302 	orr.w	r3, r3, r2
   8ab20:	fa21 f004 	lsr.w	r0, r1, r4
   8ab24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8ab28:	fa21 f204 	lsr.w	r2, r1, r4
   8ab2c:	ea20 0002 	bic.w	r0, r0, r2
   8ab30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8ab34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8ab38:	bf08      	it	eq
   8ab3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8ab3e:	bd70      	pop	{r4, r5, r6, pc}
   8ab40:	f094 0f00 	teq	r4, #0
   8ab44:	d10f      	bne.n	8ab66 <__aeabi_dmul+0x1c2>
   8ab46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8ab4a:	0040      	lsls	r0, r0, #1
   8ab4c:	eb41 0101 	adc.w	r1, r1, r1
   8ab50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8ab54:	bf08      	it	eq
   8ab56:	3c01      	subeq	r4, #1
   8ab58:	d0f7      	beq.n	8ab4a <__aeabi_dmul+0x1a6>
   8ab5a:	ea41 0106 	orr.w	r1, r1, r6
   8ab5e:	f095 0f00 	teq	r5, #0
   8ab62:	bf18      	it	ne
   8ab64:	4770      	bxne	lr
   8ab66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8ab6a:	0052      	lsls	r2, r2, #1
   8ab6c:	eb43 0303 	adc.w	r3, r3, r3
   8ab70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8ab74:	bf08      	it	eq
   8ab76:	3d01      	subeq	r5, #1
   8ab78:	d0f7      	beq.n	8ab6a <__aeabi_dmul+0x1c6>
   8ab7a:	ea43 0306 	orr.w	r3, r3, r6
   8ab7e:	4770      	bx	lr
   8ab80:	ea94 0f0c 	teq	r4, ip
   8ab84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8ab88:	bf18      	it	ne
   8ab8a:	ea95 0f0c 	teqne	r5, ip
   8ab8e:	d00c      	beq.n	8abaa <__aeabi_dmul+0x206>
   8ab90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8ab94:	bf18      	it	ne
   8ab96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8ab9a:	d1d1      	bne.n	8ab40 <__aeabi_dmul+0x19c>
   8ab9c:	ea81 0103 	eor.w	r1, r1, r3
   8aba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8aba4:	f04f 0000 	mov.w	r0, #0
   8aba8:	bd70      	pop	{r4, r5, r6, pc}
   8abaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8abae:	bf06      	itte	eq
   8abb0:	4610      	moveq	r0, r2
   8abb2:	4619      	moveq	r1, r3
   8abb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8abb8:	d019      	beq.n	8abee <__aeabi_dmul+0x24a>
   8abba:	ea94 0f0c 	teq	r4, ip
   8abbe:	d102      	bne.n	8abc6 <__aeabi_dmul+0x222>
   8abc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8abc4:	d113      	bne.n	8abee <__aeabi_dmul+0x24a>
   8abc6:	ea95 0f0c 	teq	r5, ip
   8abca:	d105      	bne.n	8abd8 <__aeabi_dmul+0x234>
   8abcc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8abd0:	bf1c      	itt	ne
   8abd2:	4610      	movne	r0, r2
   8abd4:	4619      	movne	r1, r3
   8abd6:	d10a      	bne.n	8abee <__aeabi_dmul+0x24a>
   8abd8:	ea81 0103 	eor.w	r1, r1, r3
   8abdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8abe0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8abe4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8abe8:	f04f 0000 	mov.w	r0, #0
   8abec:	bd70      	pop	{r4, r5, r6, pc}
   8abee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8abf2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8abf6:	bd70      	pop	{r4, r5, r6, pc}

0008abf8 <__aeabi_ddiv>:
   8abf8:	b570      	push	{r4, r5, r6, lr}
   8abfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8abfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8ac02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8ac06:	bf1d      	ittte	ne
   8ac08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8ac0c:	ea94 0f0c 	teqne	r4, ip
   8ac10:	ea95 0f0c 	teqne	r5, ip
   8ac14:	f000 f8a7 	bleq	8ad66 <__aeabi_ddiv+0x16e>
   8ac18:	eba4 0405 	sub.w	r4, r4, r5
   8ac1c:	ea81 0e03 	eor.w	lr, r1, r3
   8ac20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ac24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ac28:	f000 8088 	beq.w	8ad3c <__aeabi_ddiv+0x144>
   8ac2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8ac30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8ac34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8ac38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8ac3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8ac40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8ac44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8ac48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8ac4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8ac50:	429d      	cmp	r5, r3
   8ac52:	bf08      	it	eq
   8ac54:	4296      	cmpeq	r6, r2
   8ac56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8ac5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8ac5e:	d202      	bcs.n	8ac66 <__aeabi_ddiv+0x6e>
   8ac60:	085b      	lsrs	r3, r3, #1
   8ac62:	ea4f 0232 	mov.w	r2, r2, rrx
   8ac66:	1ab6      	subs	r6, r6, r2
   8ac68:	eb65 0503 	sbc.w	r5, r5, r3
   8ac6c:	085b      	lsrs	r3, r3, #1
   8ac6e:	ea4f 0232 	mov.w	r2, r2, rrx
   8ac72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8ac76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8ac7a:	ebb6 0e02 	subs.w	lr, r6, r2
   8ac7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ac82:	bf22      	ittt	cs
   8ac84:	1ab6      	subcs	r6, r6, r2
   8ac86:	4675      	movcs	r5, lr
   8ac88:	ea40 000c 	orrcs.w	r0, r0, ip
   8ac8c:	085b      	lsrs	r3, r3, #1
   8ac8e:	ea4f 0232 	mov.w	r2, r2, rrx
   8ac92:	ebb6 0e02 	subs.w	lr, r6, r2
   8ac96:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ac9a:	bf22      	ittt	cs
   8ac9c:	1ab6      	subcs	r6, r6, r2
   8ac9e:	4675      	movcs	r5, lr
   8aca0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8aca4:	085b      	lsrs	r3, r3, #1
   8aca6:	ea4f 0232 	mov.w	r2, r2, rrx
   8acaa:	ebb6 0e02 	subs.w	lr, r6, r2
   8acae:	eb75 0e03 	sbcs.w	lr, r5, r3
   8acb2:	bf22      	ittt	cs
   8acb4:	1ab6      	subcs	r6, r6, r2
   8acb6:	4675      	movcs	r5, lr
   8acb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8acbc:	085b      	lsrs	r3, r3, #1
   8acbe:	ea4f 0232 	mov.w	r2, r2, rrx
   8acc2:	ebb6 0e02 	subs.w	lr, r6, r2
   8acc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8acca:	bf22      	ittt	cs
   8accc:	1ab6      	subcs	r6, r6, r2
   8acce:	4675      	movcs	r5, lr
   8acd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8acd4:	ea55 0e06 	orrs.w	lr, r5, r6
   8acd8:	d018      	beq.n	8ad0c <__aeabi_ddiv+0x114>
   8acda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8acde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8ace2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8ace6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8acea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8acee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8acf2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8acf6:	d1c0      	bne.n	8ac7a <__aeabi_ddiv+0x82>
   8acf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8acfc:	d10b      	bne.n	8ad16 <__aeabi_ddiv+0x11e>
   8acfe:	ea41 0100 	orr.w	r1, r1, r0
   8ad02:	f04f 0000 	mov.w	r0, #0
   8ad06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8ad0a:	e7b6      	b.n	8ac7a <__aeabi_ddiv+0x82>
   8ad0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8ad10:	bf04      	itt	eq
   8ad12:	4301      	orreq	r1, r0
   8ad14:	2000      	moveq	r0, #0
   8ad16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8ad1a:	bf88      	it	hi
   8ad1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8ad20:	f63f aeaf 	bhi.w	8aa82 <__aeabi_dmul+0xde>
   8ad24:	ebb5 0c03 	subs.w	ip, r5, r3
   8ad28:	bf04      	itt	eq
   8ad2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8ad2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8ad32:	f150 0000 	adcs.w	r0, r0, #0
   8ad36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8ad3a:	bd70      	pop	{r4, r5, r6, pc}
   8ad3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8ad40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8ad44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8ad48:	bfc2      	ittt	gt
   8ad4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8ad4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8ad52:	bd70      	popgt	{r4, r5, r6, pc}
   8ad54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8ad58:	f04f 0e00 	mov.w	lr, #0
   8ad5c:	3c01      	subs	r4, #1
   8ad5e:	e690      	b.n	8aa82 <__aeabi_dmul+0xde>
   8ad60:	ea45 0e06 	orr.w	lr, r5, r6
   8ad64:	e68d      	b.n	8aa82 <__aeabi_dmul+0xde>
   8ad66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8ad6a:	ea94 0f0c 	teq	r4, ip
   8ad6e:	bf08      	it	eq
   8ad70:	ea95 0f0c 	teqeq	r5, ip
   8ad74:	f43f af3b 	beq.w	8abee <__aeabi_dmul+0x24a>
   8ad78:	ea94 0f0c 	teq	r4, ip
   8ad7c:	d10a      	bne.n	8ad94 <__aeabi_ddiv+0x19c>
   8ad7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8ad82:	f47f af34 	bne.w	8abee <__aeabi_dmul+0x24a>
   8ad86:	ea95 0f0c 	teq	r5, ip
   8ad8a:	f47f af25 	bne.w	8abd8 <__aeabi_dmul+0x234>
   8ad8e:	4610      	mov	r0, r2
   8ad90:	4619      	mov	r1, r3
   8ad92:	e72c      	b.n	8abee <__aeabi_dmul+0x24a>
   8ad94:	ea95 0f0c 	teq	r5, ip
   8ad98:	d106      	bne.n	8ada8 <__aeabi_ddiv+0x1b0>
   8ad9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ad9e:	f43f aefd 	beq.w	8ab9c <__aeabi_dmul+0x1f8>
   8ada2:	4610      	mov	r0, r2
   8ada4:	4619      	mov	r1, r3
   8ada6:	e722      	b.n	8abee <__aeabi_dmul+0x24a>
   8ada8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8adac:	bf18      	it	ne
   8adae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8adb2:	f47f aec5 	bne.w	8ab40 <__aeabi_dmul+0x19c>
   8adb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8adba:	f47f af0d 	bne.w	8abd8 <__aeabi_dmul+0x234>
   8adbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8adc2:	f47f aeeb 	bne.w	8ab9c <__aeabi_dmul+0x1f8>
   8adc6:	e712      	b.n	8abee <__aeabi_dmul+0x24a>

0008adc8 <__gedf2>:
   8adc8:	f04f 3cff 	mov.w	ip, #4294967295
   8adcc:	e006      	b.n	8addc <__cmpdf2+0x4>
   8adce:	bf00      	nop

0008add0 <__ledf2>:
   8add0:	f04f 0c01 	mov.w	ip, #1
   8add4:	e002      	b.n	8addc <__cmpdf2+0x4>
   8add6:	bf00      	nop

0008add8 <__cmpdf2>:
   8add8:	f04f 0c01 	mov.w	ip, #1
   8addc:	f84d cd04 	str.w	ip, [sp, #-4]!
   8ade0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ade4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ade8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8adec:	bf18      	it	ne
   8adee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8adf2:	d01b      	beq.n	8ae2c <__cmpdf2+0x54>
   8adf4:	b001      	add	sp, #4
   8adf6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8adfa:	bf0c      	ite	eq
   8adfc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8ae00:	ea91 0f03 	teqne	r1, r3
   8ae04:	bf02      	ittt	eq
   8ae06:	ea90 0f02 	teqeq	r0, r2
   8ae0a:	2000      	moveq	r0, #0
   8ae0c:	4770      	bxeq	lr
   8ae0e:	f110 0f00 	cmn.w	r0, #0
   8ae12:	ea91 0f03 	teq	r1, r3
   8ae16:	bf58      	it	pl
   8ae18:	4299      	cmppl	r1, r3
   8ae1a:	bf08      	it	eq
   8ae1c:	4290      	cmpeq	r0, r2
   8ae1e:	bf2c      	ite	cs
   8ae20:	17d8      	asrcs	r0, r3, #31
   8ae22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8ae26:	f040 0001 	orr.w	r0, r0, #1
   8ae2a:	4770      	bx	lr
   8ae2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ae30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ae34:	d102      	bne.n	8ae3c <__cmpdf2+0x64>
   8ae36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8ae3a:	d107      	bne.n	8ae4c <__cmpdf2+0x74>
   8ae3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ae40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ae44:	d1d6      	bne.n	8adf4 <__cmpdf2+0x1c>
   8ae46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8ae4a:	d0d3      	beq.n	8adf4 <__cmpdf2+0x1c>
   8ae4c:	f85d 0b04 	ldr.w	r0, [sp], #4
   8ae50:	4770      	bx	lr
   8ae52:	bf00      	nop

0008ae54 <__aeabi_cdrcmple>:
   8ae54:	4684      	mov	ip, r0
   8ae56:	4610      	mov	r0, r2
   8ae58:	4662      	mov	r2, ip
   8ae5a:	468c      	mov	ip, r1
   8ae5c:	4619      	mov	r1, r3
   8ae5e:	4663      	mov	r3, ip
   8ae60:	e000      	b.n	8ae64 <__aeabi_cdcmpeq>
   8ae62:	bf00      	nop

0008ae64 <__aeabi_cdcmpeq>:
   8ae64:	b501      	push	{r0, lr}
   8ae66:	f7ff ffb7 	bl	8add8 <__cmpdf2>
   8ae6a:	2800      	cmp	r0, #0
   8ae6c:	bf48      	it	mi
   8ae6e:	f110 0f00 	cmnmi.w	r0, #0
   8ae72:	bd01      	pop	{r0, pc}

0008ae74 <__aeabi_dcmpeq>:
   8ae74:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ae78:	f7ff fff4 	bl	8ae64 <__aeabi_cdcmpeq>
   8ae7c:	bf0c      	ite	eq
   8ae7e:	2001      	moveq	r0, #1
   8ae80:	2000      	movne	r0, #0
   8ae82:	f85d fb08 	ldr.w	pc, [sp], #8
   8ae86:	bf00      	nop

0008ae88 <__aeabi_dcmplt>:
   8ae88:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ae8c:	f7ff ffea 	bl	8ae64 <__aeabi_cdcmpeq>
   8ae90:	bf34      	ite	cc
   8ae92:	2001      	movcc	r0, #1
   8ae94:	2000      	movcs	r0, #0
   8ae96:	f85d fb08 	ldr.w	pc, [sp], #8
   8ae9a:	bf00      	nop

0008ae9c <__aeabi_dcmple>:
   8ae9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8aea0:	f7ff ffe0 	bl	8ae64 <__aeabi_cdcmpeq>
   8aea4:	bf94      	ite	ls
   8aea6:	2001      	movls	r0, #1
   8aea8:	2000      	movhi	r0, #0
   8aeaa:	f85d fb08 	ldr.w	pc, [sp], #8
   8aeae:	bf00      	nop

0008aeb0 <__aeabi_dcmpge>:
   8aeb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8aeb4:	f7ff ffce 	bl	8ae54 <__aeabi_cdrcmple>
   8aeb8:	bf94      	ite	ls
   8aeba:	2001      	movls	r0, #1
   8aebc:	2000      	movhi	r0, #0
   8aebe:	f85d fb08 	ldr.w	pc, [sp], #8
   8aec2:	bf00      	nop

0008aec4 <__aeabi_dcmpgt>:
   8aec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8aec8:	f7ff ffc4 	bl	8ae54 <__aeabi_cdrcmple>
   8aecc:	bf34      	ite	cc
   8aece:	2001      	movcc	r0, #1
   8aed0:	2000      	movcs	r0, #0
   8aed2:	f85d fb08 	ldr.w	pc, [sp], #8
   8aed6:	bf00      	nop

0008aed8 <__aeabi_dcmpun>:
   8aed8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8aedc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8aee0:	d102      	bne.n	8aee8 <__aeabi_dcmpun+0x10>
   8aee2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8aee6:	d10a      	bne.n	8aefe <__aeabi_dcmpun+0x26>
   8aee8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8aeec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8aef0:	d102      	bne.n	8aef8 <__aeabi_dcmpun+0x20>
   8aef2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8aef6:	d102      	bne.n	8aefe <__aeabi_dcmpun+0x26>
   8aef8:	f04f 0000 	mov.w	r0, #0
   8aefc:	4770      	bx	lr
   8aefe:	f04f 0001 	mov.w	r0, #1
   8af02:	4770      	bx	lr

0008af04 <__aeabi_d2iz>:
   8af04:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8af08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8af0c:	d215      	bcs.n	8af3a <__aeabi_d2iz+0x36>
   8af0e:	d511      	bpl.n	8af34 <__aeabi_d2iz+0x30>
   8af10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8af14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8af18:	d912      	bls.n	8af40 <__aeabi_d2iz+0x3c>
   8af1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8af1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8af22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8af26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8af2a:	fa23 f002 	lsr.w	r0, r3, r2
   8af2e:	bf18      	it	ne
   8af30:	4240      	negne	r0, r0
   8af32:	4770      	bx	lr
   8af34:	f04f 0000 	mov.w	r0, #0
   8af38:	4770      	bx	lr
   8af3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8af3e:	d105      	bne.n	8af4c <__aeabi_d2iz+0x48>
   8af40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8af44:	bf08      	it	eq
   8af46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8af4a:	4770      	bx	lr
   8af4c:	f04f 0000 	mov.w	r0, #0
   8af50:	4770      	bx	lr
   8af52:	bf00      	nop

0008af54 <__aeabi_uldivmod>:
   8af54:	b953      	cbnz	r3, 8af6c <__aeabi_uldivmod+0x18>
   8af56:	b94a      	cbnz	r2, 8af6c <__aeabi_uldivmod+0x18>
   8af58:	2900      	cmp	r1, #0
   8af5a:	bf08      	it	eq
   8af5c:	2800      	cmpeq	r0, #0
   8af5e:	bf1c      	itt	ne
   8af60:	f04f 31ff 	movne.w	r1, #4294967295
   8af64:	f04f 30ff 	movne.w	r0, #4294967295
   8af68:	f000 b96e 	b.w	8b248 <__aeabi_idiv0>
   8af6c:	f1ad 0c08 	sub.w	ip, sp, #8
   8af70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8af74:	f000 f806 	bl	8af84 <__udivmoddi4>
   8af78:	f8dd e004 	ldr.w	lr, [sp, #4]
   8af7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8af80:	b004      	add	sp, #16
   8af82:	4770      	bx	lr

0008af84 <__udivmoddi4>:
   8af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8af88:	9e08      	ldr	r6, [sp, #32]
   8af8a:	460d      	mov	r5, r1
   8af8c:	4604      	mov	r4, r0
   8af8e:	468e      	mov	lr, r1
   8af90:	2b00      	cmp	r3, #0
   8af92:	f040 8083 	bne.w	8b09c <__udivmoddi4+0x118>
   8af96:	428a      	cmp	r2, r1
   8af98:	4617      	mov	r7, r2
   8af9a:	d947      	bls.n	8b02c <__udivmoddi4+0xa8>
   8af9c:	fab2 f382 	clz	r3, r2
   8afa0:	b14b      	cbz	r3, 8afb6 <__udivmoddi4+0x32>
   8afa2:	f1c3 0120 	rsb	r1, r3, #32
   8afa6:	fa05 fe03 	lsl.w	lr, r5, r3
   8afaa:	fa20 f101 	lsr.w	r1, r0, r1
   8afae:	409f      	lsls	r7, r3
   8afb0:	ea41 0e0e 	orr.w	lr, r1, lr
   8afb4:	409c      	lsls	r4, r3
   8afb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8afba:	fbbe fcf8 	udiv	ip, lr, r8
   8afbe:	fa1f f987 	uxth.w	r9, r7
   8afc2:	fb08 e21c 	mls	r2, r8, ip, lr
   8afc6:	fb0c f009 	mul.w	r0, ip, r9
   8afca:	0c21      	lsrs	r1, r4, #16
   8afcc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8afd0:	4290      	cmp	r0, r2
   8afd2:	d90a      	bls.n	8afea <__udivmoddi4+0x66>
   8afd4:	18ba      	adds	r2, r7, r2
   8afd6:	f10c 31ff 	add.w	r1, ip, #4294967295
   8afda:	f080 8118 	bcs.w	8b20e <__udivmoddi4+0x28a>
   8afde:	4290      	cmp	r0, r2
   8afe0:	f240 8115 	bls.w	8b20e <__udivmoddi4+0x28a>
   8afe4:	f1ac 0c02 	sub.w	ip, ip, #2
   8afe8:	443a      	add	r2, r7
   8afea:	1a12      	subs	r2, r2, r0
   8afec:	fbb2 f0f8 	udiv	r0, r2, r8
   8aff0:	fb08 2210 	mls	r2, r8, r0, r2
   8aff4:	fb00 f109 	mul.w	r1, r0, r9
   8aff8:	b2a4      	uxth	r4, r4
   8affa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8affe:	42a1      	cmp	r1, r4
   8b000:	d909      	bls.n	8b016 <__udivmoddi4+0x92>
   8b002:	193c      	adds	r4, r7, r4
   8b004:	f100 32ff 	add.w	r2, r0, #4294967295
   8b008:	f080 8103 	bcs.w	8b212 <__udivmoddi4+0x28e>
   8b00c:	42a1      	cmp	r1, r4
   8b00e:	f240 8100 	bls.w	8b212 <__udivmoddi4+0x28e>
   8b012:	3802      	subs	r0, #2
   8b014:	443c      	add	r4, r7
   8b016:	1a64      	subs	r4, r4, r1
   8b018:	2100      	movs	r1, #0
   8b01a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8b01e:	b11e      	cbz	r6, 8b028 <__udivmoddi4+0xa4>
   8b020:	2200      	movs	r2, #0
   8b022:	40dc      	lsrs	r4, r3
   8b024:	e9c6 4200 	strd	r4, r2, [r6]
   8b028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b02c:	b902      	cbnz	r2, 8b030 <__udivmoddi4+0xac>
   8b02e:	deff      	udf	#255	; 0xff
   8b030:	fab2 f382 	clz	r3, r2
   8b034:	2b00      	cmp	r3, #0
   8b036:	d14f      	bne.n	8b0d8 <__udivmoddi4+0x154>
   8b038:	1a8d      	subs	r5, r1, r2
   8b03a:	2101      	movs	r1, #1
   8b03c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   8b040:	fa1f f882 	uxth.w	r8, r2
   8b044:	fbb5 fcfe 	udiv	ip, r5, lr
   8b048:	fb0e 551c 	mls	r5, lr, ip, r5
   8b04c:	fb08 f00c 	mul.w	r0, r8, ip
   8b050:	0c22      	lsrs	r2, r4, #16
   8b052:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8b056:	42a8      	cmp	r0, r5
   8b058:	d907      	bls.n	8b06a <__udivmoddi4+0xe6>
   8b05a:	197d      	adds	r5, r7, r5
   8b05c:	f10c 32ff 	add.w	r2, ip, #4294967295
   8b060:	d202      	bcs.n	8b068 <__udivmoddi4+0xe4>
   8b062:	42a8      	cmp	r0, r5
   8b064:	f200 80e9 	bhi.w	8b23a <__udivmoddi4+0x2b6>
   8b068:	4694      	mov	ip, r2
   8b06a:	1a2d      	subs	r5, r5, r0
   8b06c:	fbb5 f0fe 	udiv	r0, r5, lr
   8b070:	fb0e 5510 	mls	r5, lr, r0, r5
   8b074:	fb08 f800 	mul.w	r8, r8, r0
   8b078:	b2a4      	uxth	r4, r4
   8b07a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8b07e:	45a0      	cmp	r8, r4
   8b080:	d907      	bls.n	8b092 <__udivmoddi4+0x10e>
   8b082:	193c      	adds	r4, r7, r4
   8b084:	f100 32ff 	add.w	r2, r0, #4294967295
   8b088:	d202      	bcs.n	8b090 <__udivmoddi4+0x10c>
   8b08a:	45a0      	cmp	r8, r4
   8b08c:	f200 80d9 	bhi.w	8b242 <__udivmoddi4+0x2be>
   8b090:	4610      	mov	r0, r2
   8b092:	eba4 0408 	sub.w	r4, r4, r8
   8b096:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8b09a:	e7c0      	b.n	8b01e <__udivmoddi4+0x9a>
   8b09c:	428b      	cmp	r3, r1
   8b09e:	d908      	bls.n	8b0b2 <__udivmoddi4+0x12e>
   8b0a0:	2e00      	cmp	r6, #0
   8b0a2:	f000 80b1 	beq.w	8b208 <__udivmoddi4+0x284>
   8b0a6:	2100      	movs	r1, #0
   8b0a8:	e9c6 0500 	strd	r0, r5, [r6]
   8b0ac:	4608      	mov	r0, r1
   8b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b0b2:	fab3 f183 	clz	r1, r3
   8b0b6:	2900      	cmp	r1, #0
   8b0b8:	d14b      	bne.n	8b152 <__udivmoddi4+0x1ce>
   8b0ba:	42ab      	cmp	r3, r5
   8b0bc:	d302      	bcc.n	8b0c4 <__udivmoddi4+0x140>
   8b0be:	4282      	cmp	r2, r0
   8b0c0:	f200 80b9 	bhi.w	8b236 <__udivmoddi4+0x2b2>
   8b0c4:	1a84      	subs	r4, r0, r2
   8b0c6:	eb65 0303 	sbc.w	r3, r5, r3
   8b0ca:	2001      	movs	r0, #1
   8b0cc:	469e      	mov	lr, r3
   8b0ce:	2e00      	cmp	r6, #0
   8b0d0:	d0aa      	beq.n	8b028 <__udivmoddi4+0xa4>
   8b0d2:	e9c6 4e00 	strd	r4, lr, [r6]
   8b0d6:	e7a7      	b.n	8b028 <__udivmoddi4+0xa4>
   8b0d8:	409f      	lsls	r7, r3
   8b0da:	f1c3 0220 	rsb	r2, r3, #32
   8b0de:	40d1      	lsrs	r1, r2
   8b0e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8b0e4:	fbb1 f0fe 	udiv	r0, r1, lr
   8b0e8:	fa1f f887 	uxth.w	r8, r7
   8b0ec:	fb0e 1110 	mls	r1, lr, r0, r1
   8b0f0:	fa24 f202 	lsr.w	r2, r4, r2
   8b0f4:	409d      	lsls	r5, r3
   8b0f6:	fb00 fc08 	mul.w	ip, r0, r8
   8b0fa:	432a      	orrs	r2, r5
   8b0fc:	0c15      	lsrs	r5, r2, #16
   8b0fe:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8b102:	45ac      	cmp	ip, r5
   8b104:	fa04 f403 	lsl.w	r4, r4, r3
   8b108:	d909      	bls.n	8b11e <__udivmoddi4+0x19a>
   8b10a:	197d      	adds	r5, r7, r5
   8b10c:	f100 31ff 	add.w	r1, r0, #4294967295
   8b110:	f080 808f 	bcs.w	8b232 <__udivmoddi4+0x2ae>
   8b114:	45ac      	cmp	ip, r5
   8b116:	f240 808c 	bls.w	8b232 <__udivmoddi4+0x2ae>
   8b11a:	3802      	subs	r0, #2
   8b11c:	443d      	add	r5, r7
   8b11e:	eba5 050c 	sub.w	r5, r5, ip
   8b122:	fbb5 f1fe 	udiv	r1, r5, lr
   8b126:	fb0e 5c11 	mls	ip, lr, r1, r5
   8b12a:	fb01 f908 	mul.w	r9, r1, r8
   8b12e:	b295      	uxth	r5, r2
   8b130:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8b134:	45a9      	cmp	r9, r5
   8b136:	d907      	bls.n	8b148 <__udivmoddi4+0x1c4>
   8b138:	197d      	adds	r5, r7, r5
   8b13a:	f101 32ff 	add.w	r2, r1, #4294967295
   8b13e:	d274      	bcs.n	8b22a <__udivmoddi4+0x2a6>
   8b140:	45a9      	cmp	r9, r5
   8b142:	d972      	bls.n	8b22a <__udivmoddi4+0x2a6>
   8b144:	3902      	subs	r1, #2
   8b146:	443d      	add	r5, r7
   8b148:	eba5 0509 	sub.w	r5, r5, r9
   8b14c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8b150:	e778      	b.n	8b044 <__udivmoddi4+0xc0>
   8b152:	f1c1 0720 	rsb	r7, r1, #32
   8b156:	408b      	lsls	r3, r1
   8b158:	fa22 fc07 	lsr.w	ip, r2, r7
   8b15c:	ea4c 0c03 	orr.w	ip, ip, r3
   8b160:	fa25 f407 	lsr.w	r4, r5, r7
   8b164:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8b168:	fbb4 f9fe 	udiv	r9, r4, lr
   8b16c:	fa1f f88c 	uxth.w	r8, ip
   8b170:	fb0e 4419 	mls	r4, lr, r9, r4
   8b174:	fa20 f307 	lsr.w	r3, r0, r7
   8b178:	fb09 fa08 	mul.w	sl, r9, r8
   8b17c:	408d      	lsls	r5, r1
   8b17e:	431d      	orrs	r5, r3
   8b180:	0c2b      	lsrs	r3, r5, #16
   8b182:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8b186:	45a2      	cmp	sl, r4
   8b188:	fa02 f201 	lsl.w	r2, r2, r1
   8b18c:	fa00 f301 	lsl.w	r3, r0, r1
   8b190:	d909      	bls.n	8b1a6 <__udivmoddi4+0x222>
   8b192:	eb1c 0404 	adds.w	r4, ip, r4
   8b196:	f109 30ff 	add.w	r0, r9, #4294967295
   8b19a:	d248      	bcs.n	8b22e <__udivmoddi4+0x2aa>
   8b19c:	45a2      	cmp	sl, r4
   8b19e:	d946      	bls.n	8b22e <__udivmoddi4+0x2aa>
   8b1a0:	f1a9 0902 	sub.w	r9, r9, #2
   8b1a4:	4464      	add	r4, ip
   8b1a6:	eba4 040a 	sub.w	r4, r4, sl
   8b1aa:	fbb4 f0fe 	udiv	r0, r4, lr
   8b1ae:	fb0e 4410 	mls	r4, lr, r0, r4
   8b1b2:	fb00 fa08 	mul.w	sl, r0, r8
   8b1b6:	b2ad      	uxth	r5, r5
   8b1b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8b1bc:	45a2      	cmp	sl, r4
   8b1be:	d908      	bls.n	8b1d2 <__udivmoddi4+0x24e>
   8b1c0:	eb1c 0404 	adds.w	r4, ip, r4
   8b1c4:	f100 35ff 	add.w	r5, r0, #4294967295
   8b1c8:	d22d      	bcs.n	8b226 <__udivmoddi4+0x2a2>
   8b1ca:	45a2      	cmp	sl, r4
   8b1cc:	d92b      	bls.n	8b226 <__udivmoddi4+0x2a2>
   8b1ce:	3802      	subs	r0, #2
   8b1d0:	4464      	add	r4, ip
   8b1d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8b1d6:	fba0 8902 	umull	r8, r9, r0, r2
   8b1da:	eba4 040a 	sub.w	r4, r4, sl
   8b1de:	454c      	cmp	r4, r9
   8b1e0:	46c6      	mov	lr, r8
   8b1e2:	464d      	mov	r5, r9
   8b1e4:	d319      	bcc.n	8b21a <__udivmoddi4+0x296>
   8b1e6:	d016      	beq.n	8b216 <__udivmoddi4+0x292>
   8b1e8:	b15e      	cbz	r6, 8b202 <__udivmoddi4+0x27e>
   8b1ea:	ebb3 020e 	subs.w	r2, r3, lr
   8b1ee:	eb64 0405 	sbc.w	r4, r4, r5
   8b1f2:	fa04 f707 	lsl.w	r7, r4, r7
   8b1f6:	fa22 f301 	lsr.w	r3, r2, r1
   8b1fa:	431f      	orrs	r7, r3
   8b1fc:	40cc      	lsrs	r4, r1
   8b1fe:	e9c6 7400 	strd	r7, r4, [r6]
   8b202:	2100      	movs	r1, #0
   8b204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b208:	4631      	mov	r1, r6
   8b20a:	4630      	mov	r0, r6
   8b20c:	e70c      	b.n	8b028 <__udivmoddi4+0xa4>
   8b20e:	468c      	mov	ip, r1
   8b210:	e6eb      	b.n	8afea <__udivmoddi4+0x66>
   8b212:	4610      	mov	r0, r2
   8b214:	e6ff      	b.n	8b016 <__udivmoddi4+0x92>
   8b216:	4543      	cmp	r3, r8
   8b218:	d2e6      	bcs.n	8b1e8 <__udivmoddi4+0x264>
   8b21a:	ebb8 0e02 	subs.w	lr, r8, r2
   8b21e:	eb69 050c 	sbc.w	r5, r9, ip
   8b222:	3801      	subs	r0, #1
   8b224:	e7e0      	b.n	8b1e8 <__udivmoddi4+0x264>
   8b226:	4628      	mov	r0, r5
   8b228:	e7d3      	b.n	8b1d2 <__udivmoddi4+0x24e>
   8b22a:	4611      	mov	r1, r2
   8b22c:	e78c      	b.n	8b148 <__udivmoddi4+0x1c4>
   8b22e:	4681      	mov	r9, r0
   8b230:	e7b9      	b.n	8b1a6 <__udivmoddi4+0x222>
   8b232:	4608      	mov	r0, r1
   8b234:	e773      	b.n	8b11e <__udivmoddi4+0x19a>
   8b236:	4608      	mov	r0, r1
   8b238:	e749      	b.n	8b0ce <__udivmoddi4+0x14a>
   8b23a:	f1ac 0c02 	sub.w	ip, ip, #2
   8b23e:	443d      	add	r5, r7
   8b240:	e713      	b.n	8b06a <__udivmoddi4+0xe6>
   8b242:	3802      	subs	r0, #2
   8b244:	443c      	add	r4, r7
   8b246:	e724      	b.n	8b092 <__udivmoddi4+0x10e>

0008b248 <__aeabi_idiv0>:
   8b248:	4770      	bx	lr
   8b24a:	bf00      	nop
   8b24c:	78383025 	.word	0x78383025
   8b250:	00000000 	.word	0x00000000
   8b254:	206c754a 	.word	0x206c754a
   8b258:	32203631 	.word	0x32203631
   8b25c:	00313230 	.word	0x00313230
   8b260:	303a3030 	.word	0x303a3030
   8b264:	39303a33 	.word	0x39303a33
   8b268:	00000000 	.word	0x00000000
   8b26c:	70696843 	.word	0x70696843
   8b270:	73696857 	.word	0x73696857
   8b274:	65726570 	.word	0x65726570
   8b278:	57432d72 	.word	0x57432d72
   8b27c:	20353033 	.word	0x20353033
   8b280:	696c6e4f 	.word	0x696c6e4f
   8b284:	202e656e 	.word	0x202e656e
   8b288:	6d726946 	.word	0x6d726946
   8b28c:	65726177 	.word	0x65726177
   8b290:	69756220 	.word	0x69756220
   8b294:	203a646c 	.word	0x203a646c
   8b298:	252f7325 	.word	0x252f7325
   8b29c:	00000a73 	.word	0x00000a73
   8b2a0:	69726553 	.word	0x69726553
   8b2a4:	6e206c61 	.word	0x6e206c61
   8b2a8:	65626d75 	.word	0x65626d75
   8b2ac:	25203a72 	.word	0x25203a72
   8b2b0:	00000a73 	.word	0x00000a73
   8b2b4:	74746553 	.word	0x74746553
   8b2b8:	20676e69 	.word	0x20676e69
   8b2bc:	46207075 	.word	0x46207075
   8b2c0:	20414750 	.word	0x20414750
   8b2c4:	6d6d6f43 	.word	0x6d6d6f43
   8b2c8:	63696e75 	.word	0x63696e75
   8b2cc:	6f697461 	.word	0x6f697461
   8b2d0:	00000a6e 	.word	0x00000a6e
   8b2d4:	6e657645 	.word	0x6e657645
   8b2d8:	6f4c2074 	.word	0x6f4c2074
   8b2dc:	4520706f 	.word	0x4520706f
   8b2e0:	7265746e 	.word	0x7265746e
   8b2e4:	202c6465 	.word	0x202c6465
   8b2e8:	74696177 	.word	0x74696177
   8b2ec:	2e676e69 	.word	0x2e676e69
   8b2f0:	000a2e2e 	.word	0x000a2e2e
   8b2f4:	00000000 	.word	0x00000000

0008b2f8 <BUILD_DATE>:
   8b2f8:	206c754a 32203631 00313230              Jul 16 2021.

0008b304 <BUILD_TIME>:
   8b304:	303a3030 31313a33 00000000              00:03:11....

0008b310 <LED_DESCRIPTOR>:
   8b310:	0000004f 00000001 00000050 00000001     O.......P.......
   8b320:	00000051 00000001 74697845 20676e69     Q.......Exiting 
   8b330:	68746977 61747320 20737574 0a2e6425     with status %d..
   8b340:	00000000 00000000 00000000 aaaaaa00     ................
   8b350:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8b360:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8b370:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008b37c <_global_impure_ptr>:
   8b37c:	200003d8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8b38c:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8b39c:	66656463 00000000 33323130 37363534     cdef....01234567
   8b3ac:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8b3bc:	0000296c 00000030                       l)..0...

0008b3c4 <blanks.7335>:
   8b3c4:	20202020 20202020 20202020 20202020                     

0008b3d4 <zeroes.7336>:
   8b3d4:	30303030 30303030 30303030 30303030     0000000000000000

0008b3e4 <blanks.7328>:
   8b3e4:	20202020 20202020 20202020 20202020                     

0008b3f4 <zeroes.7329>:
   8b3f4:	30303030 30303030 30303030 30303030     0000000000000000
   8b404:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8b414:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8b424:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8b434:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8b444:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8b454:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8b464:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8b474:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8b484:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8b494:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8b4a4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8b4b4:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8b4c4:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8b4d4:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8b4e4:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8b4f4:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8b504:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8b514:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8b524:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8b534:	00000000                                ....

0008b538 <__mprec_bigtens>:
   8b538:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8b548:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8b558:	7f73bf3c 75154fdd                       <.s..O.u

0008b560 <__mprec_tens>:
   8b560:	00000000 3ff00000 00000000 40240000     .......?......$@
   8b570:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8b580:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8b590:	00000000 412e8480 00000000 416312d0     .......A......cA
   8b5a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8b5b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8b5c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8b5d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8b5e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8b5f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8b600:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8b610:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8b620:	79d99db4 44ea7843                       ...yCx.D

0008b628 <p05.6122>:
   8b628:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8b638:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8b648:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8b658:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8b668:	2520656e 25732564 00000a73              ne %d%s%s...

0008b674 <_ctype_>:
   8b674:	20202000 20202020 28282020 20282828     .         ((((( 
   8b684:	20202020 20202020 20202020 20202020                     
   8b694:	10108820 10101010 10101010 10101010      ...............
   8b6a4:	04040410 04040404 10040404 10101010     ................
   8b6b4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8b6c4:	01010101 01010101 01010101 10101010     ................
   8b6d4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8b6e4:	02020202 02020202 02020202 10101010     ................
   8b6f4:	00000020 00000000 00000000 00000000      ...............
   8b704:	00000000 00000000 00000000 00000000     ................
   8b714:	00000000 00000000 00000000 00000000     ................
   8b724:	00000000 00000000 00000000 00000000     ................
   8b734:	00000000 00000000 00000000 00000000     ................
   8b744:	00000000 00000000 00000000 00000000     ................
   8b754:	00000000 00000000 00000000 00000000     ................
   8b764:	00000000 00000000 00000000 00000000     ................
   8b774:	00000000                                ....

0008b778 <_init>:
   8b778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b77a:	bf00      	nop
   8b77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8b77e:	bc08      	pop	{r3}
   8b780:	469e      	mov	lr, r3
   8b782:	4770      	bx	lr

0008b784 <__init_array_start>:
   8b784:	000872e9 	.word	0x000872e9

0008b788 <__frame_dummy_init_array_entry>:
   8b788:	000800e1                                ....

0008b78c <_fini>:
   8b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b78e:	bf00      	nop
   8b790:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8b792:	bc08      	pop	{r3}
   8b794:	469e      	mov	lr, r3
   8b796:	4770      	bx	lr

0008b798 <__do_global_dtors_aux_fini_array_entry>:
   8b798:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000008:	4770      	bx	lr

2000000a <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000a:	b470      	push	{r4, r5, r6}
2000000c:	b083      	sub	sp, #12
2000000e:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000010:	b35b      	cbz	r3, 2000006a <efc_perform_read_sequence+0x60>
20000012:	4604      	mov	r4, r0
20000014:	461e      	mov	r6, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000016:	6803      	ldr	r3, [r0, #0]
20000018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000001c:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000001e:	b2c9      	uxtb	r1, r1
20000020:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000024:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000026:	68a3      	ldr	r3, [r4, #8]
20000028:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000002a:	9801      	ldr	r0, [sp, #4]
2000002c:	f010 0001 	ands.w	r0, r0, #1
20000030:	d1f9      	bne.n	20000026 <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000032:	4603      	mov	r3, r0
20000034:	42ab      	cmp	r3, r5
20000036:	d207      	bcs.n	20000048 <efc_perform_read_sequence+0x3e>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000038:	0099      	lsls	r1, r3, #2
2000003a:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
2000003e:	6809      	ldr	r1, [r1, #0]
20000040:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000044:	3301      	adds	r3, #1
20000046:	e7f5      	b.n	20000034 <efc_perform_read_sequence+0x2a>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000048:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000004a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000004e:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000050:	68a3      	ldr	r3, [r4, #8]
20000052:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000054:	9b01      	ldr	r3, [sp, #4]
20000056:	f013 0f01 	tst.w	r3, #1
2000005a:	d0f9      	beq.n	20000050 <efc_perform_read_sequence+0x46>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000005c:	6823      	ldr	r3, [r4, #0]
2000005e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000062:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
}
20000064:	b003      	add	sp, #12
20000066:	bc70      	pop	{r4, r5, r6}
20000068:	4770      	bx	lr
		return EFC_RC_INVALID;
2000006a:	2002      	movs	r0, #2
2000006c:	e7fa      	b.n	20000064 <efc_perform_read_sequence+0x5a>

2000006e <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
2000006e:	6001      	str	r1, [r0, #0]
}
20000070:	4770      	bx	lr

20000072 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000072:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
20000074:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000076:	6883      	ldr	r3, [r0, #8]
20000078:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000007a:	9b01      	ldr	r3, [sp, #4]
2000007c:	f013 0f01 	tst.w	r3, #1
20000080:	d0f9      	beq.n	20000076 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000082:	9801      	ldr	r0, [sp, #4]
}
20000084:	f000 0006 	and.w	r0, r0, #6
20000088:	b002      	add	sp, #8
2000008a:	4770      	bx	lr

2000008c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000008c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000090:	4a22      	ldr	r2, [pc, #136]	; (2000011c <SystemInit+0x90>)
20000092:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000098:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000009a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000009e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000a2:	6a1b      	ldr	r3, [r3, #32]
200000a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000a8:	d107      	bne.n	200000ba <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000aa:	4b1d      	ldr	r3, [pc, #116]	; (20000120 <SystemInit+0x94>)
200000ac:	4a1d      	ldr	r2, [pc, #116]	; (20000124 <SystemInit+0x98>)
200000ae:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b0:	4b1b      	ldr	r3, [pc, #108]	; (20000120 <SystemInit+0x94>)
200000b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000b4:	f013 0f01 	tst.w	r3, #1
200000b8:	d0fa      	beq.n	200000b0 <SystemInit+0x24>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ba:	4b19      	ldr	r3, [pc, #100]	; (20000120 <SystemInit+0x94>)
200000bc:	4a1a      	ldr	r2, [pc, #104]	; (20000128 <SystemInit+0x9c>)
200000be:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c0:	4b17      	ldr	r3, [pc, #92]	; (20000120 <SystemInit+0x94>)
200000c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000c8:	d0fa      	beq.n	200000c0 <SystemInit+0x34>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ca:	4a15      	ldr	r2, [pc, #84]	; (20000120 <SystemInit+0x94>)
200000cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000ce:	f023 0303 	bic.w	r3, r3, #3
200000d2:	f043 0301 	orr.w	r3, r3, #1
200000d6:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000d8:	4b11      	ldr	r3, [pc, #68]	; (20000120 <SystemInit+0x94>)
200000da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000dc:	f013 0f08 	tst.w	r3, #8
200000e0:	d0fa      	beq.n	200000d8 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e2:	4b0f      	ldr	r3, [pc, #60]	; (20000120 <SystemInit+0x94>)
200000e4:	4a11      	ldr	r2, [pc, #68]	; (2000012c <SystemInit+0xa0>)
200000e6:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000e8:	4b0d      	ldr	r3, [pc, #52]	; (20000120 <SystemInit+0x94>)
200000ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000ec:	f013 0f02 	tst.w	r3, #2
200000f0:	d0fa      	beq.n	200000e8 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f2:	4b0b      	ldr	r3, [pc, #44]	; (20000120 <SystemInit+0x94>)
200000f4:	2211      	movs	r2, #17
200000f6:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000f8:	4b09      	ldr	r3, [pc, #36]	; (20000120 <SystemInit+0x94>)
200000fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000fc:	f013 0f08 	tst.w	r3, #8
20000100:	d0fa      	beq.n	200000f8 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000102:	4b07      	ldr	r3, [pc, #28]	; (20000120 <SystemInit+0x94>)
20000104:	2212      	movs	r2, #18
20000106:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000108:	4b05      	ldr	r3, [pc, #20]	; (20000120 <SystemInit+0x94>)
2000010a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000010c:	f013 0f08 	tst.w	r3, #8
20000110:	d0fa      	beq.n	20000108 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000112:	4b07      	ldr	r3, [pc, #28]	; (20000130 <SystemInit+0xa4>)
20000114:	4a07      	ldr	r2, [pc, #28]	; (20000134 <SystemInit+0xa8>)
20000116:	601a      	str	r2, [r3, #0]
}
20000118:	4770      	bx	lr
2000011a:	bf00      	nop
2000011c:	400e0800 	.word	0x400e0800
20000120:	400e0400 	.word	0x400e0400
20000124:	00370809 	.word	0x00370809
20000128:	01370809 	.word	0x01370809
2000012c:	200f3f01 	.word	0x200f3f01
20000130:	2000032c 	.word	0x2000032c
20000134:	05b8d800 	.word	0x05b8d800

20000138 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000138:	4b19      	ldr	r3, [pc, #100]	; (200001a0 <system_init_flash+0x68>)
2000013a:	4298      	cmp	r0, r3
2000013c:	d206      	bcs.n	2000014c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000013e:	2300      	movs	r3, #0
20000140:	4a18      	ldr	r2, [pc, #96]	; (200001a4 <system_init_flash+0x6c>)
20000142:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000144:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000148:	6013      	str	r3, [r2, #0]
2000014a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000014c:	4b16      	ldr	r3, [pc, #88]	; (200001a8 <system_init_flash+0x70>)
2000014e:	4298      	cmp	r0, r3
20000150:	d207      	bcs.n	20000162 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000152:	f44f 7380 	mov.w	r3, #256	; 0x100
20000156:	4a13      	ldr	r2, [pc, #76]	; (200001a4 <system_init_flash+0x6c>)
20000158:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000162:	4b12      	ldr	r3, [pc, #72]	; (200001ac <system_init_flash+0x74>)
20000164:	4298      	cmp	r0, r3
20000166:	d807      	bhi.n	20000178 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000168:	f44f 7300 	mov.w	r3, #512	; 0x200
2000016c:	4a0d      	ldr	r2, [pc, #52]	; (200001a4 <system_init_flash+0x6c>)
2000016e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000174:	6013      	str	r3, [r2, #0]
20000176:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000178:	4b0d      	ldr	r3, [pc, #52]	; (200001b0 <system_init_flash+0x78>)
2000017a:	4298      	cmp	r0, r3
2000017c:	d807      	bhi.n	2000018e <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000017e:	f44f 7340 	mov.w	r3, #768	; 0x300
20000182:	4a08      	ldr	r2, [pc, #32]	; (200001a4 <system_init_flash+0x6c>)
20000184:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20000186:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000018a:	6013      	str	r3, [r2, #0]
2000018c:	4770      	bx	lr
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000018e:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000192:	4a04      	ldr	r2, [pc, #16]	; (200001a4 <system_init_flash+0x6c>)
20000194:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000196:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000019a:	6013      	str	r3, [r2, #0]
	}
}
2000019c:	4770      	bx	lr
2000019e:	bf00      	nop
200001a0:	016e3600 	.word	0x016e3600
200001a4:	400e0800 	.word	0x400e0800
200001a8:	02625a00 	.word	0x02625a00
200001ac:	044aa1ff 	.word	0x044aa1ff
200001b0:	0501bcff 	.word	0x0501bcff

200001b4 <usb_serial_number>:
200001b4:	30303030 30303030 30303030 44414544     000000000000DEAD
200001c4:	46454542 00000000 00000000 00000000     BEEF............
200001d4:	00000000                                ....

200001d8 <xram>:
200001d8:	60000000                                ...`

200001dc <pin_spi1_cs>:
200001dc:	ffffffff                                ....

200001e0 <pin_spi1_miso>:
200001e0:	ffffffff                                ....

200001e4 <pin_spi1_mosi>:
200001e4:	ffffffff                                ....

200001e8 <pin_spi1_sck>:
200001e8:	ffffffff                                ....

200001ec <main_b_vendor_enable>:
200001ec:	                                         ..

200001ee <vccint_setting>:
200001ee:	                                         ..

200001f0 <MS_BOS_PACKET>:
200001f0:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000200:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
20000210:	00000000                                ....

20000214 <MS_OS_DESC>:
20000214:	0000000a 06030000 0014009e 49570003     ..............WI
20000224:	4253554e 00000000 00000000 00800000     NUSB............
20000234:	00070004 00440028 00760065 00630069     ....(.D.e.v.i.c.
20000244:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
20000254:	00650063 00550047 00440049 004e0000     c.e.G.U.I.D...N.
20000264:	003e007b 0005002b 000000c3 00410000     {.>.+.........A.
20000274:	00450043 002b003e 00c30005 00000000     C.E.>.+.........
20000284:	00430041 003e0045 0005002b 000000c3     A.C.E.>.+.......
20000294:	00410000 00450043 002b003e 00c30005     ..A.C.E.>.+.....
200002a4:	00000000 00430041 007d0045 00000000     ....A.C.E.}.....

200002b4 <udc_string_desc>:
200002b4:	00000300 00000000 00000000 00000000     ................
200002c4:	00000000 00000000 00000000 00000000     ................
200002d4:	00000000 00000000 00000000 00000000     ................
200002e4:	00000000 00000000 00000000 00000000     ................
200002f4:	00000000                                ....

200002f8 <udc_string_desc_languageid>:
200002f8:	04090304                                ....

200002fc <udc_string_manufacturer_name>:
200002fc:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
2000030c:	636e4920 0000002e                        Inc....

20000314 <udc_string_product_name>:
20000314:	70696843 73696857 65726570 57432072     ChipWhisperer CW
20000324:	00353033                                305.

20000328 <g_interrupt_enabled>:
20000328:	00000001                                ....

2000032c <SystemCoreClock>:
2000032c:	003d0900                                ..=.

20000330 <udi_api_vendor>:
20000330:	00082d75 00082d99 00082db1 00082d69     u-...-...-..i-..
20000340:	00000000                                ....

20000344 <udc_config>:
20000344:	200003ac 20000364 200003ac 200003c0     ... d.. ... ... 
20000354:	2000035c 00000000                       \.. ....

2000035c <udc_config_hs>:
2000035c:	2000038c 200003cc                       ... ... 

20000364 <udc_config_lsfs>:
20000364:	2000036c 200003cc                       l.. ... 

2000036c <udc_desc_fs>:
2000036c:	00200209 80000101 000409fa ffff0200     .. .............
2000037c:	050700ff 00400281 02050700 00004002     ......@......@..

2000038c <udc_desc_hs>:
2000038c:	00200209 80000101 000409fa ffff0200     .. .............
2000039c:	050700ff 02000281 02050700 00020002     ................

200003ac <udc_device_desc>:
200003ac:	02000112 40000000 c3052b3e 02010100     .......@>+......
200003bc:	00000103                                ....

200003c0 <udc_device_qual>:
200003c0:	0200060a 40000000 00000001              .......@....

200003cc <udi_apis>:
200003cc:	20000330                                0.. 

200003d0 <_impure_ptr>:
200003d0:	200003d8 00000000                       ... ....

200003d8 <impure_data>:
200003d8:	00000000 200006c4 2000072c 20000794     ....... ,.. ... 
200003e8:	00000000 00000000 00000000 00000000     ................
200003f8:	00000000 00000000 00000000 00000000     ................
20000408:	00000000 00000000 00000000 00000000     ................
20000418:	00000000 00000000 00000000 00000000     ................
20000428:	00000000 00000000 00000000 00000000     ................
20000438:	00000000 00000000 00000000 00000000     ................
20000448:	00000000 00000000 00000000 00000000     ................
20000458:	00000000 00000000 00000000 00000000     ................
20000468:	00000000 00000000 00000000 00000000     ................
20000478:	00000000 00000000 00000001 00000000     ................
20000488:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000000 00000000     ................
200004f8:	00000000 00000000 00000000 00000000     ................
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000                       ........

20000800 <__atexit_recursive_mutex>:
20000800:	2000186c                                l.. 

20000804 <__global_locale>:
20000804:	00000043 00000000 00000000 00000000     C...............
20000814:	00000000 00000000 00000000 00000000     ................
20000824:	00000043 00000000 00000000 00000000     C...............
20000834:	00000000 00000000 00000000 00000000     ................
20000844:	00000043 00000000 00000000 00000000     C...............
20000854:	00000000 00000000 00000000 00000000     ................
20000864:	00000043 00000000 00000000 00000000     C...............
20000874:	00000000 00000000 00000000 00000000     ................
20000884:	00000043 00000000 00000000 00000000     C...............
20000894:	00000000 00000000 00000000 00000000     ................
200008a4:	00000043 00000000 00000000 00000000     C...............
200008b4:	00000000 00000000 00000000 00000000     ................
200008c4:	00000043 00000000 00000000 00000000     C...............
200008d4:	00000000 00000000 00000000 00000000     ................
200008e4:	0008a255 000892e1 00000000 0008b674     U...........t...
200008f4:	0008b4b0 0008b340 0008b340 0008b340     ....@...@...@...
20000904:	0008b340 0008b340 0008b340 0008b340     @...@...@...@...
20000914:	0008b340 0008b340 ffffffff ffffffff     @...@...........
20000924:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
20000934:	00000000 00000000 00000000 00000000     ................
20000944:	00000000 00000000 53410000 00494943     ..........ASCII.
20000954:	00000000 00000000 00000000 00000000     ................
20000964:	00000000 00000000 00000000              ............

20000970 <__malloc_av_>:
20000970:	00000000 00000000 20000970 20000970     ........p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68                       h.. h.. 

20000d78 <__malloc_sbrk_base>:
20000d78:	ffffffff                                ....

20000d7c <__malloc_trim_threshold>:
20000d7c:	00020000                                ....
