
ChipWhisperer-CW305-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c3b4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008c3b4  0008c3b4  0001c3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d78  20000000  0008c3bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c28  20000d78  0008d134  00020d78  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020d78  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020da1  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003b729  00000000  00000000  00020ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000862d  00000000  00000000  0005c516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000ba4a  00000000  00000000  00064b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000014d8  00000000  00000000  0007058d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001698  00000000  00000000  00071a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000218d9  00000000  00000000  000730fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000278b8  00000000  00000000  000949d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005df27  00000000  00000000  000bc28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  000045c8  00000000  00000000  0011a1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 0d 2a 08 00 05 22 08 00 05 22 08 00     .@. .*..."..."..
   80010:	05 22 08 00 05 22 08 00 05 22 08 00 00 00 00 00     ."..."..."......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 05 22 08 00     ............."..
   80030:	05 22 08 00 00 00 00 00 05 22 08 00 05 22 08 00     ."......."..."..
   80040:	05 22 08 00 05 22 08 00 05 22 08 00 05 22 08 00     ."..."..."..."..
   80050:	05 22 08 00 05 22 08 00 05 22 08 00 05 22 08 00     ."..."..."..."..
   80060:	05 22 08 00 05 22 08 00 c9 26 08 00 dd 26 08 00     ."..."...&...&..
   80070:	f1 26 08 00 05 22 08 00 05 22 08 00 05 22 08 00     .&..."..."..."..
   80080:	05 22 08 00 05 22 08 00 05 22 08 00 05 22 08 00     ."..."..."..."..
   80090:	05 22 08 00 05 22 08 00 19 17 08 00 05 22 08 00     ."..."......."..
   800a0:	05 22 08 00 05 22 08 00 05 22 08 00 05 22 08 00     ."..."..."..."..
   800b0:	05 22 08 00 45 43 08 00 05 22 08 00                 ."..EC..."..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000d78 	.word	0x20000d78
   800d8:	00000000 	.word	0x00000000
   800dc:	0008c3bc 	.word	0x0008c3bc

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000d7c 	.word	0x20000d7c
   800f8:	0008c3bc 	.word	0x0008c3bc

000800fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   800fc:	b530      	push	{r4, r5, lr}
   800fe:	b083      	sub	sp, #12
   80100:	4604      	mov	r4, r0
   80102:	460d      	mov	r5, r1
	uint32_t val = 0;
   80104:	2300      	movs	r3, #0
   80106:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80108:	4b1f      	ldr	r3, [pc, #124]	; (80188 <usart_serial_getchar+0x8c>)
   8010a:	4298      	cmp	r0, r3
   8010c:	d00d      	beq.n	8012a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8010e:	4b1f      	ldr	r3, [pc, #124]	; (8018c <usart_serial_getchar+0x90>)
   80110:	429c      	cmp	r4, r3
   80112:	d011      	beq.n	80138 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80114:	4b1e      	ldr	r3, [pc, #120]	; (80190 <usart_serial_getchar+0x94>)
   80116:	429c      	cmp	r4, r3
   80118:	d018      	beq.n	8014c <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8011a:	4b1e      	ldr	r3, [pc, #120]	; (80194 <usart_serial_getchar+0x98>)
   8011c:	429c      	cmp	r4, r3
   8011e:	d01f      	beq.n	80160 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80120:	4b1d      	ldr	r3, [pc, #116]	; (80198 <usart_serial_getchar+0x9c>)
   80122:	429c      	cmp	r4, r3
   80124:	d026      	beq.n	80174 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80126:	b003      	add	sp, #12
   80128:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
   8012a:	4629      	mov	r1, r5
   8012c:	4620      	mov	r0, r4
   8012e:	4b1b      	ldr	r3, [pc, #108]	; (8019c <usart_serial_getchar+0xa0>)
   80130:	4798      	blx	r3
   80132:	2800      	cmp	r0, #0
   80134:	d1f9      	bne.n	8012a <usart_serial_getchar+0x2e>
   80136:	e7ea      	b.n	8010e <usart_serial_getchar+0x12>
		while (usart_read(p_usart, &val));
   80138:	a901      	add	r1, sp, #4
   8013a:	4620      	mov	r0, r4
   8013c:	4b18      	ldr	r3, [pc, #96]	; (801a0 <usart_serial_getchar+0xa4>)
   8013e:	4798      	blx	r3
   80140:	2800      	cmp	r0, #0
   80142:	d1f9      	bne.n	80138 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   80144:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80148:	702b      	strb	r3, [r5, #0]
   8014a:	e7e3      	b.n	80114 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
   8014c:	a901      	add	r1, sp, #4
   8014e:	4620      	mov	r0, r4
   80150:	4b13      	ldr	r3, [pc, #76]	; (801a0 <usart_serial_getchar+0xa4>)
   80152:	4798      	blx	r3
   80154:	2800      	cmp	r0, #0
   80156:	d1f9      	bne.n	8014c <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   80158:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8015c:	702b      	strb	r3, [r5, #0]
   8015e:	e7dc      	b.n	8011a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80160:	a901      	add	r1, sp, #4
   80162:	4620      	mov	r0, r4
   80164:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <usart_serial_getchar+0xa4>)
   80166:	4798      	blx	r3
   80168:	2800      	cmp	r0, #0
   8016a:	d1f9      	bne.n	80160 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   8016c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80170:	702b      	strb	r3, [r5, #0]
   80172:	e7d5      	b.n	80120 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80174:	a901      	add	r1, sp, #4
   80176:	4620      	mov	r0, r4
   80178:	4b09      	ldr	r3, [pc, #36]	; (801a0 <usart_serial_getchar+0xa4>)
   8017a:	4798      	blx	r3
   8017c:	2800      	cmp	r0, #0
   8017e:	d1f9      	bne.n	80174 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   80180:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80184:	702b      	strb	r3, [r5, #0]
}
   80186:	e7ce      	b.n	80126 <usart_serial_getchar+0x2a>
   80188:	400e0600 	.word	0x400e0600
   8018c:	40090000 	.word	0x40090000
   80190:	40094000 	.word	0x40094000
   80194:	40098000 	.word	0x40098000
   80198:	4009c000 	.word	0x4009c000
   8019c:	00082f21 	.word	0x00082f21
   801a0:	00084ed5 	.word	0x00084ed5

000801a4 <usart_serial_putchar>:
{
   801a4:	b538      	push	{r3, r4, r5, lr}
   801a6:	4604      	mov	r4, r0
   801a8:	460d      	mov	r5, r1
	if (UART == (Uart*)p_usart) {
   801aa:	4b1c      	ldr	r3, [pc, #112]	; (8021c <usart_serial_putchar+0x78>)
   801ac:	4298      	cmp	r0, r3
   801ae:	d00d      	beq.n	801cc <usart_serial_putchar+0x28>
	if (USART0 == p_usart) {
   801b0:	4b1b      	ldr	r3, [pc, #108]	; (80220 <usart_serial_putchar+0x7c>)
   801b2:	4298      	cmp	r0, r3
   801b4:	d012      	beq.n	801dc <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   801b6:	4b1b      	ldr	r3, [pc, #108]	; (80224 <usart_serial_putchar+0x80>)
   801b8:	4298      	cmp	r0, r3
   801ba:	d017      	beq.n	801ec <usart_serial_putchar+0x48>
	if (USART2 == p_usart) {
   801bc:	4b1a      	ldr	r3, [pc, #104]	; (80228 <usart_serial_putchar+0x84>)
   801be:	4298      	cmp	r0, r3
   801c0:	d01c      	beq.n	801fc <usart_serial_putchar+0x58>
	if (USART3 == p_usart) {
   801c2:	4b1a      	ldr	r3, [pc, #104]	; (8022c <usart_serial_putchar+0x88>)
   801c4:	4298      	cmp	r0, r3
   801c6:	d021      	beq.n	8020c <usart_serial_putchar+0x68>
	return 0;
   801c8:	2000      	movs	r0, #0
}
   801ca:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   801cc:	4629      	mov	r1, r5
   801ce:	4620      	mov	r0, r4
   801d0:	4b17      	ldr	r3, [pc, #92]	; (80230 <usart_serial_putchar+0x8c>)
   801d2:	4798      	blx	r3
   801d4:	2800      	cmp	r0, #0
   801d6:	d1f9      	bne.n	801cc <usart_serial_putchar+0x28>
		return 1;
   801d8:	2001      	movs	r0, #1
   801da:	e7f6      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801dc:	4629      	mov	r1, r5
   801de:	4620      	mov	r0, r4
   801e0:	4b14      	ldr	r3, [pc, #80]	; (80234 <usart_serial_putchar+0x90>)
   801e2:	4798      	blx	r3
   801e4:	2800      	cmp	r0, #0
   801e6:	d1f9      	bne.n	801dc <usart_serial_putchar+0x38>
		return 1;
   801e8:	2001      	movs	r0, #1
   801ea:	e7ee      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801ec:	4629      	mov	r1, r5
   801ee:	4620      	mov	r0, r4
   801f0:	4b10      	ldr	r3, [pc, #64]	; (80234 <usart_serial_putchar+0x90>)
   801f2:	4798      	blx	r3
   801f4:	2800      	cmp	r0, #0
   801f6:	d1f9      	bne.n	801ec <usart_serial_putchar+0x48>
		return 1;
   801f8:	2001      	movs	r0, #1
   801fa:	e7e6      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   801fc:	4629      	mov	r1, r5
   801fe:	4620      	mov	r0, r4
   80200:	4b0c      	ldr	r3, [pc, #48]	; (80234 <usart_serial_putchar+0x90>)
   80202:	4798      	blx	r3
   80204:	2800      	cmp	r0, #0
   80206:	d1f9      	bne.n	801fc <usart_serial_putchar+0x58>
		return 1;
   80208:	2001      	movs	r0, #1
   8020a:	e7de      	b.n	801ca <usart_serial_putchar+0x26>
		while (usart_write(p_usart, c)!=0);
   8020c:	4629      	mov	r1, r5
   8020e:	4620      	mov	r0, r4
   80210:	4b08      	ldr	r3, [pc, #32]	; (80234 <usart_serial_putchar+0x90>)
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	d1f9      	bne.n	8020c <usart_serial_putchar+0x68>
		return 1;
   80218:	2001      	movs	r0, #1
   8021a:	e7d6      	b.n	801ca <usart_serial_putchar+0x26>
   8021c:	400e0600 	.word	0x400e0600
   80220:	40090000 	.word	0x40090000
   80224:	40094000 	.word	0x40094000
   80228:	40098000 	.word	0x40098000
   8022c:	4009c000 	.word	0x4009c000
   80230:	00082f0f 	.word	0x00082f0f
   80234:	00084ead 	.word	0x00084ead

00080238 <configure_console>:

/**
 *  Configure UART console.
 */
static void configure_console(void)
{
   80238:	b530      	push	{r4, r5, lr}
   8023a:	b089      	sub	sp, #36	; 0x24
	const usart_serial_options_t uart_serial_options = {
   8023c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80240:	9304      	str	r3, [sp, #16]
   80242:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80246:	9306      	str	r3, [sp, #24]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80248:	2008      	movs	r0, #8
   8024a:	4d11      	ldr	r5, [pc, #68]	; (80290 <configure_console+0x58>)
   8024c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8024e:	4c11      	ldr	r4, [pc, #68]	; (80294 <configure_console+0x5c>)
   80250:	4b11      	ldr	r3, [pc, #68]	; (80298 <configure_console+0x60>)
   80252:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80254:	4b11      	ldr	r3, [pc, #68]	; (8029c <configure_console+0x64>)
   80256:	4a12      	ldr	r2, [pc, #72]	; (802a0 <configure_console+0x68>)
   80258:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8025a:	4b12      	ldr	r3, [pc, #72]	; (802a4 <configure_console+0x6c>)
   8025c:	4a12      	ldr	r2, [pc, #72]	; (802a8 <configure_console+0x70>)
   8025e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80260:	4b12      	ldr	r3, [pc, #72]	; (802ac <configure_console+0x74>)
   80262:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80264:	9b04      	ldr	r3, [sp, #16]
   80266:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80268:	9b06      	ldr	r3, [sp, #24]
   8026a:	9303      	str	r3, [sp, #12]
   8026c:	2008      	movs	r0, #8
   8026e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80270:	a901      	add	r1, sp, #4
   80272:	4620      	mov	r0, r4
   80274:	4b0e      	ldr	r3, [pc, #56]	; (802b0 <configure_console+0x78>)
   80276:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80278:	4d0e      	ldr	r5, [pc, #56]	; (802b4 <configure_console+0x7c>)
   8027a:	682b      	ldr	r3, [r5, #0]
   8027c:	2100      	movs	r1, #0
   8027e:	6898      	ldr	r0, [r3, #8]
   80280:	4c0d      	ldr	r4, [pc, #52]	; (802b8 <configure_console+0x80>)
   80282:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80284:	682b      	ldr	r3, [r5, #0]
   80286:	2100      	movs	r1, #0
   80288:	6858      	ldr	r0, [r3, #4]
   8028a:	47a0      	blx	r4
	};
	
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
   8028c:	b009      	add	sp, #36	; 0x24
   8028e:	bd30      	pop	{r4, r5, pc}
   80290:	00082845 	.word	0x00082845
   80294:	400e0600 	.word	0x400e0600
   80298:	20001974 	.word	0x20001974
   8029c:	20001970 	.word	0x20001970
   802a0:	000801a5 	.word	0x000801a5
   802a4:	2000194c 	.word	0x2000194c
   802a8:	000800fd 	.word	0x000800fd
   802ac:	05b8d800 	.word	0x05b8d800
   802b0:	00082ed9 	.word	0x00082ed9
   802b4:	200003c8 	.word	0x200003c8
   802b8:	000851d1 	.word	0x000851d1

000802bc <fpga_pins>:
{
   802bc:	b570      	push	{r4, r5, r6, lr}
   802be:	4604      	mov	r4, r0
	gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
   802c0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802c4:	2036      	movs	r0, #54	; 0x36
   802c6:	4d95      	ldr	r5, [pc, #596]	; (8051c <fpga_pins+0x260>)
   802c8:	47a8      	blx	r5
	gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);
   802ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802ce:	2032      	movs	r0, #50	; 0x32
   802d0:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   802d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   802d6:	2007      	movs	r0, #7
   802d8:	47a8      	blx	r5
	if (enabled){
   802da:	2c00      	cmp	r4, #0
   802dc:	d07e      	beq.n	803dc <fpga_pins+0x120>
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802de:	4d90      	ldr	r5, [pc, #576]	; (80520 <fpga_pins+0x264>)
   802e0:	4629      	mov	r1, r5
   802e2:	2029      	movs	r0, #41	; 0x29
   802e4:	4c8d      	ldr	r4, [pc, #564]	; (8051c <fpga_pins+0x260>)
   802e6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   802e8:	4629      	mov	r1, r5
   802ea:	202a      	movs	r0, #42	; 0x2a
   802ec:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   802ee:	4629      	mov	r1, r5
   802f0:	202b      	movs	r0, #43	; 0x2b
   802f2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   802f4:	4629      	mov	r1, r5
   802f6:	202c      	movs	r0, #44	; 0x2c
   802f8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   802fa:	4629      	mov	r1, r5
   802fc:	202d      	movs	r0, #45	; 0x2d
   802fe:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80300:	4629      	mov	r1, r5
   80302:	202e      	movs	r0, #46	; 0x2e
   80304:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80306:	4629      	mov	r1, r5
   80308:	202f      	movs	r0, #47	; 0x2f
   8030a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   8030c:	4629      	mov	r1, r5
   8030e:	2030      	movs	r0, #48	; 0x30
   80310:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80312:	4629      	mov	r1, r5
   80314:	2033      	movs	r0, #51	; 0x33
   80316:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80318:	4629      	mov	r1, r5
   8031a:	2037      	movs	r0, #55	; 0x37
   8031c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8031e:	4629      	mov	r1, r5
   80320:	2034      	movs	r0, #52	; 0x34
   80322:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG2);
   80324:	4e7f      	ldr	r6, [pc, #508]	; (80524 <fpga_pins+0x268>)
   80326:	4631      	mov	r1, r6
   80328:	2027      	movs	r0, #39	; 0x27
   8032a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG2);
   8032c:	4631      	mov	r1, r6
   8032e:	2028      	movs	r0, #40	; 0x28
   80330:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
   80332:	4629      	mov	r1, r5
   80334:	2040      	movs	r0, #64	; 0x40
   80336:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
   80338:	4629      	mov	r1, r5
   8033a:	2041      	movs	r0, #65	; 0x41
   8033c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
   8033e:	4629      	mov	r1, r5
   80340:	2042      	movs	r0, #66	; 0x42
   80342:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
   80344:	4629      	mov	r1, r5
   80346:	2043      	movs	r0, #67	; 0x43
   80348:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
   8034a:	4629      	mov	r1, r5
   8034c:	2044      	movs	r0, #68	; 0x44
   8034e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
   80350:	4629      	mov	r1, r5
   80352:	2045      	movs	r0, #69	; 0x45
   80354:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
   80356:	4629      	mov	r1, r5
   80358:	2046      	movs	r0, #70	; 0x46
   8035a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
   8035c:	4629      	mov	r1, r5
   8035e:	2047      	movs	r0, #71	; 0x47
   80360:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
   80362:	4629      	mov	r1, r5
   80364:	2048      	movs	r0, #72	; 0x48
   80366:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
   80368:	4629      	mov	r1, r5
   8036a:	2049      	movs	r0, #73	; 0x49
   8036c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
   8036e:	4629      	mov	r1, r5
   80370:	204a      	movs	r0, #74	; 0x4a
   80372:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
   80374:	4629      	mov	r1, r5
   80376:	204b      	movs	r0, #75	; 0x4b
   80378:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
   8037a:	4629      	mov	r1, r5
   8037c:	2054      	movs	r0, #84	; 0x54
   8037e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
   80380:	4629      	mov	r1, r5
   80382:	2055      	movs	r0, #85	; 0x55
   80384:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
   80386:	4629      	mov	r1, r5
   80388:	2056      	movs	r0, #86	; 0x56
   8038a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
   8038c:	4629      	mov	r1, r5
   8038e:	2057      	movs	r0, #87	; 0x57
   80390:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
   80392:	4629      	mov	r1, r5
   80394:	2058      	movs	r0, #88	; 0x58
   80396:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
   80398:	4629      	mov	r1, r5
   8039a:	2059      	movs	r0, #89	; 0x59
   8039c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1);
   8039e:	4629      	mov	r1, r5
   803a0:	205a      	movs	r0, #90	; 0x5a
   803a2:	47a0      	blx	r4
		FPGA_NPROG_SETUP();
   803a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803a8:	2008      	movs	r0, #8
   803aa:	47a0      	blx	r4
		FPGA_NPROG_HIGH();
   803ac:	2008      	movs	r0, #8
   803ae:	4b5e      	ldr	r3, [pc, #376]	; (80528 <fpga_pins+0x26c>)
   803b0:	4798      	blx	r3
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   803b2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   803b6:	2031      	movs	r0, #49	; 0x31
   803b8:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   803ba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803be:	2008      	movs	r0, #8
   803c0:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   803c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803c6:	200d      	movs	r0, #13
   803c8:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   803ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ce:	200e      	movs	r0, #14
   803d0:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   803d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803d6:	200f      	movs	r0, #15
   803d8:	47a0      	blx	r4
}
   803da:	bd70      	pop	{r4, r5, r6, pc}
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   803dc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803e0:	2029      	movs	r0, #41	; 0x29
   803e2:	4c4e      	ldr	r4, [pc, #312]	; (8051c <fpga_pins+0x260>)
   803e4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   803e6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803ea:	202a      	movs	r0, #42	; 0x2a
   803ec:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   803ee:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803f2:	202b      	movs	r0, #43	; 0x2b
   803f4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   803f6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803fa:	202c      	movs	r0, #44	; 0x2c
   803fc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   803fe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80402:	202d      	movs	r0, #45	; 0x2d
   80404:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   80406:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8040a:	202e      	movs	r0, #46	; 0x2e
   8040c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   8040e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80412:	202f      	movs	r0, #47	; 0x2f
   80414:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   80416:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8041a:	2030      	movs	r0, #48	; 0x30
   8041c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   8041e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80422:	2033      	movs	r0, #51	; 0x33
   80424:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   80426:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8042a:	2037      	movs	r0, #55	; 0x37
   8042c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   8042e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80432:	2034      	movs	r0, #52	; 0x34
   80434:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIO_INPUT);
   80436:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8043a:	2027      	movs	r0, #39	; 0x27
   8043c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIO_INPUT);
   8043e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80442:	2028      	movs	r0, #40	; 0x28
   80444:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIO_INPUT);
   80446:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8044a:	2040      	movs	r0, #64	; 0x40
   8044c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIO_INPUT);
   8044e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80452:	2041      	movs	r0, #65	; 0x41
   80454:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIO_INPUT);
   80456:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8045a:	2042      	movs	r0, #66	; 0x42
   8045c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIO_INPUT);
   8045e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80462:	2043      	movs	r0, #67	; 0x43
   80464:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIO_INPUT);
   80466:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8046a:	2044      	movs	r0, #68	; 0x44
   8046c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIO_INPUT);
   8046e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80472:	2045      	movs	r0, #69	; 0x45
   80474:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIO_INPUT);
   80476:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8047a:	2046      	movs	r0, #70	; 0x46
   8047c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIO_INPUT);
   8047e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80482:	2047      	movs	r0, #71	; 0x47
   80484:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIO_INPUT);
   80486:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8048a:	2048      	movs	r0, #72	; 0x48
   8048c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIO_INPUT);
   8048e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80492:	2049      	movs	r0, #73	; 0x49
   80494:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIO_INPUT);
   80496:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8049a:	204a      	movs	r0, #74	; 0x4a
   8049c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIO_INPUT);
   8049e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804a2:	204b      	movs	r0, #75	; 0x4b
   804a4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIO_INPUT);
   804a6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804aa:	2054      	movs	r0, #84	; 0x54
   804ac:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIO_INPUT);
   804ae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804b2:	2055      	movs	r0, #85	; 0x55
   804b4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIO_INPUT);
   804b6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ba:	2056      	movs	r0, #86	; 0x56
   804bc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIO_INPUT);
   804be:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804c2:	2057      	movs	r0, #87	; 0x57
   804c4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIO_INPUT);
   804c6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ca:	2058      	movs	r0, #88	; 0x58
   804cc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIO_INPUT);
   804ce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804d2:	2059      	movs	r0, #89	; 0x59
   804d4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIO_INPUT);	
   804d6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804da:	205a      	movs	r0, #90	; 0x5a
   804dc:	47a0      	blx	r4
		gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, PIO_INPUT);
   804de:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
   804e2:	21ff      	movs	r1, #255	; 0xff
   804e4:	4811      	ldr	r0, [pc, #68]	; (8052c <fpga_pins+0x270>)
   804e6:	4b12      	ldr	r3, [pc, #72]	; (80530 <fpga_pins+0x274>)
   804e8:	4798      	blx	r3
		gpio_configure_pin(FPGA_ALE_GPIO, PIO_INPUT);
   804ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804ee:	2035      	movs	r0, #53	; 0x35
   804f0:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   804f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804f6:	2031      	movs	r0, #49	; 0x31
   804f8:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   804fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804fe:	2008      	movs	r0, #8
   80500:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT);
   80502:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80506:	200d      	movs	r0, #13
   80508:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT);
   8050a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8050e:	200e      	movs	r0, #14
   80510:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
   80512:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80516:	200f      	movs	r0, #15
   80518:	47a0      	blx	r4
}
   8051a:	e75e      	b.n	803da <fpga_pins+0x11e>
   8051c:	0008259d 	.word	0x0008259d
   80520:	08000001 	.word	0x08000001
   80524:	10000001 	.word	0x10000001
   80528:	00082565 	.word	0x00082565
   8052c:	400e0e00 	.word	0x400e0e00
   80530:	00082491 	.word	0x00082491

00080534 <main>:
{
   80534:	b5f0      	push	{r4, r5, r6, r7, lr}
   80536:	b085      	sub	sp, #20
	flash_read_unique_id(serial_number, sizeof(serial_number));
   80538:	2110      	movs	r1, #16
   8053a:	4668      	mov	r0, sp
   8053c:	4b37      	ldr	r3, [pc, #220]	; (8061c <main+0xe8>)
   8053e:	4798      	blx	r3
	configure_console();
   80540:	4b37      	ldr	r3, [pc, #220]	; (80620 <main+0xec>)
   80542:	4798      	blx	r3
	cpu_irq_enable();
   80544:	4b37      	ldr	r3, [pc, #220]	; (80624 <main+0xf0>)
   80546:	2201      	movs	r2, #1
   80548:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8054a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8054e:	b662      	cpsie	i
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80550:	2300      	movs	r3, #0
}
   80552:	e004      	b.n	8055e <main+0x2a>
		sleepmgr_locks[i] = 0;
   80554:	4a34      	ldr	r2, [pc, #208]	; (80628 <main+0xf4>)
   80556:	2100      	movs	r1, #0
   80558:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8055a:	3301      	adds	r3, #1
   8055c:	b2db      	uxtb	r3, r3
   8055e:	2b04      	cmp	r3, #4
   80560:	d9f8      	bls.n	80554 <main+0x20>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80562:	4b31      	ldr	r3, [pc, #196]	; (80628 <main+0xf4>)
   80564:	2201      	movs	r2, #1
   80566:	715a      	strb	r2, [r3, #5]
	sysclk_init();
   80568:	4b30      	ldr	r3, [pc, #192]	; (8062c <main+0xf8>)
   8056a:	4798      	blx	r3
	board_init();
   8056c:	4b30      	ldr	r3, [pc, #192]	; (80630 <main+0xfc>)
   8056e:	4798      	blx	r3
	fpga_program_init();
   80570:	4b30      	ldr	r3, [pc, #192]	; (80634 <main+0x100>)
   80572:	4798      	blx	r3
	tps56520_init();
   80574:	4b30      	ldr	r3, [pc, #192]	; (80638 <main+0x104>)
   80576:	4798      	blx	r3
	cdce906_init();
   80578:	4b30      	ldr	r3, [pc, #192]	; (8063c <main+0x108>)
   8057a:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   8057c:	2400      	movs	r4, #0
   8057e:	e00b      	b.n	80598 <main+0x64>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80580:	ab04      	add	r3, sp, #16
   80582:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   80586:	f853 2c10 	ldr.w	r2, [r3, #-16]
   8058a:	492d      	ldr	r1, [pc, #180]	; (80640 <main+0x10c>)
   8058c:	482d      	ldr	r0, [pc, #180]	; (80644 <main+0x110>)
   8058e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   80592:	4b2d      	ldr	r3, [pc, #180]	; (80648 <main+0x114>)
   80594:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80596:	3401      	adds	r4, #1
   80598:	2c03      	cmp	r4, #3
   8059a:	d9f1      	bls.n	80580 <main+0x4c>
	usb_serial_number[32] = 0;
   8059c:	4e29      	ldr	r6, [pc, #164]	; (80644 <main+0x110>)
   8059e:	2400      	movs	r4, #0
   805a0:	f886 4020 	strb.w	r4, [r6, #32]
	printf("ChipWhisperer-CW305 Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   805a4:	4a29      	ldr	r2, [pc, #164]	; (8064c <main+0x118>)
   805a6:	492a      	ldr	r1, [pc, #168]	; (80650 <main+0x11c>)
   805a8:	482a      	ldr	r0, [pc, #168]	; (80654 <main+0x120>)
   805aa:	4d2b      	ldr	r5, [pc, #172]	; (80658 <main+0x124>)
   805ac:	47a8      	blx	r5
	printf("Serial number: %s\n", usb_serial_number);
   805ae:	4631      	mov	r1, r6
   805b0:	482a      	ldr	r0, [pc, #168]	; (8065c <main+0x128>)
   805b2:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_SMC);	
   805b4:	2009      	movs	r0, #9
   805b6:	4b2a      	ldr	r3, [pc, #168]	; (80660 <main+0x12c>)
   805b8:	4798      	blx	r3
	fpga_pins(true);
   805ba:	2001      	movs	r0, #1
   805bc:	4f29      	ldr	r7, [pc, #164]	; (80664 <main+0x130>)
   805be:	47b8      	blx	r7
	printf("Setting up FPGA Communication\n");
   805c0:	4829      	ldr	r0, [pc, #164]	; (80668 <main+0x134>)
   805c2:	47a8      	blx	r5
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   805c4:	4e29      	ldr	r6, [pc, #164]	; (8066c <main+0x138>)
   805c6:	4a2a      	ldr	r2, [pc, #168]	; (80670 <main+0x13c>)
   805c8:	4621      	mov	r1, r4
   805ca:	4630      	mov	r0, r6
   805cc:	4b29      	ldr	r3, [pc, #164]	; (80674 <main+0x140>)
   805ce:	4798      	blx	r3
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(3)
   805d0:	4a29      	ldr	r2, [pc, #164]	; (80678 <main+0x144>)
   805d2:	4621      	mov	r1, r4
   805d4:	4630      	mov	r0, r6
   805d6:	4b29      	ldr	r3, [pc, #164]	; (8067c <main+0x148>)
   805d8:	4798      	blx	r3
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(4)
   805da:	f04f 1204 	mov.w	r2, #262148	; 0x40004
   805de:	4621      	mov	r1, r4
   805e0:	4630      	mov	r0, r6
   805e2:	4b27      	ldr	r3, [pc, #156]	; (80680 <main+0x14c>)
   805e4:	4798      	blx	r3
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   805e6:	2203      	movs	r2, #3
   805e8:	4621      	mov	r1, r4
   805ea:	4630      	mov	r0, r6
   805ec:	4b25      	ldr	r3, [pc, #148]	; (80684 <main+0x150>)
   805ee:	4798      	blx	r3
	ui_init();
   805f0:	4b25      	ldr	r3, [pc, #148]	; (80688 <main+0x154>)
   805f2:	4798      	blx	r3
	udc_start();
   805f4:	4b25      	ldr	r3, [pc, #148]	; (8068c <main+0x158>)
   805f6:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   805f8:	2204      	movs	r2, #4
   805fa:	4b25      	ldr	r3, [pc, #148]	; (80690 <main+0x15c>)
   805fc:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   805fe:	4620      	mov	r0, r4
   80600:	4b24      	ldr	r3, [pc, #144]	; (80694 <main+0x160>)
   80602:	4798      	blx	r3
	printf("Event Loop Entered, waiting...\n");	
   80604:	4824      	ldr	r0, [pc, #144]	; (80698 <main+0x164>)
   80606:	47a8      	blx	r5
	fpga_pins(false);
   80608:	4620      	mov	r0, r4
   8060a:	47b8      	blx	r7
	naeusb_register_handlers();
   8060c:	4b23      	ldr	r3, [pc, #140]	; (8069c <main+0x168>)
   8060e:	4798      	blx	r3
    fpga_target_register_handlers();
   80610:	4b23      	ldr	r3, [pc, #140]	; (806a0 <main+0x16c>)
   80612:	4798      	blx	r3
		process_events();
   80614:	4b23      	ldr	r3, [pc, #140]	; (806a4 <main+0x170>)
   80616:	4798      	blx	r3
	while (true) {
   80618:	e7fc      	b.n	80614 <main+0xe0>
   8061a:	bf00      	nop
   8061c:	00082209 	.word	0x00082209
   80620:	00080239 	.word	0x00080239
   80624:	20000200 	.word	0x20000200
   80628:	20001950 	.word	0x20001950
   8062c:	00082b25 	.word	0x00082b25
   80630:	000822a9 	.word	0x000822a9
   80634:	00080739 	.word	0x00080739
   80638:	00080ba9 	.word	0x00080ba9
   8063c:	0008088d 	.word	0x0008088d
   80640:	0008be3c 	.word	0x0008be3c
   80644:	200001b4 	.word	0x200001b4
   80648:	00085381 	.word	0x00085381
   8064c:	0008be44 	.word	0x0008be44
   80650:	0008be50 	.word	0x0008be50
   80654:	0008be5c 	.word	0x0008be5c
   80658:	0008501d 	.word	0x0008501d
   8065c:	0008be90 	.word	0x0008be90
   80660:	00082845 	.word	0x00082845
   80664:	000802bd 	.word	0x000802bd
   80668:	0008bea4 	.word	0x0008bea4
   8066c:	400e0000 	.word	0x400e0000
   80670:	01010100 	.word	0x01010100
   80674:	00082915 	.word	0x00082915
   80678:	03030103 	.word	0x03030103
   8067c:	00082921 	.word	0x00082921
   80680:	0008292d 	.word	0x0008292d
   80684:	00082939 	.word	0x00082939
   80688:	00084dcd 	.word	0x00084dcd
   8068c:	000834e9 	.word	0x000834e9
   80690:	400e0400 	.word	0x400e0400
   80694:	000828ad 	.word	0x000828ad
   80698:	0008bec4 	.word	0x0008bec4
   8069c:	00081a05 	.word	0x00081a05
   806a0:	00082195 	.word	0x00082195
   806a4:	0008173d 	.word	0x0008173d

000806a8 <do_task>:

/*
Can insert regular tasks here if needed
*/
void do_task(void)
{
   806a8:	b508      	push	{r3, lr}
	static bool last_power_state = false;
	
	//If change in external state pin
	if (board_get_powerstate() != last_power_state){
   806aa:	203e      	movs	r0, #62	; 0x3e
   806ac:	4b0e      	ldr	r3, [pc, #56]	; (806e8 <do_task+0x40>)
   806ae:	4798      	blx	r3
   806b0:	3800      	subs	r0, #0
   806b2:	bf18      	it	ne
   806b4:	2001      	movne	r0, #1
   806b6:	4b0d      	ldr	r3, [pc, #52]	; (806ec <do_task+0x44>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	4298      	cmp	r0, r3
   806bc:	d100      	bne.n	806c0 <do_task+0x18>
		}
		
		//Record new state
		last_power_state = board_get_powerstate();
	}
}
   806be:	bd08      	pop	{r3, pc}
		if (board_get_powerstate()){
   806c0:	203e      	movs	r0, #62	; 0x3e
   806c2:	4b09      	ldr	r3, [pc, #36]	; (806e8 <do_task+0x40>)
   806c4:	4798      	blx	r3
   806c6:	b158      	cbz	r0, 806e0 <do_task+0x38>
			fpga_pins(true);
   806c8:	2001      	movs	r0, #1
   806ca:	4b09      	ldr	r3, [pc, #36]	; (806f0 <do_task+0x48>)
   806cc:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   806ce:	203e      	movs	r0, #62	; 0x3e
   806d0:	4b05      	ldr	r3, [pc, #20]	; (806e8 <do_task+0x40>)
   806d2:	4798      	blx	r3
   806d4:	3800      	subs	r0, #0
   806d6:	bf18      	it	ne
   806d8:	2001      	movne	r0, #1
   806da:	4b04      	ldr	r3, [pc, #16]	; (806ec <do_task+0x44>)
   806dc:	7018      	strb	r0, [r3, #0]
}
   806de:	e7ee      	b.n	806be <do_task+0x16>
			fpga_pins(false);
   806e0:	2000      	movs	r0, #0
   806e2:	4b03      	ldr	r3, [pc, #12]	; (806f0 <do_task+0x48>)
   806e4:	4798      	blx	r3
   806e6:	e7f2      	b.n	806ce <do_task+0x26>
   806e8:	00082549 	.word	0x00082549
   806ec:	20000d94 	.word	0x20000d94
   806f0:	000802bd 	.word	0x000802bd

000806f4 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   806f4:	b510      	push	{r4, lr}
   806f6:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   806f8:	4b06      	ldr	r3, [pc, #24]	; (80714 <FPGA_setlock+0x20>)
   806fa:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   806fc:	4b06      	ldr	r3, [pc, #24]	; (80718 <FPGA_setlock+0x24>)
   806fe:	781b      	ldrb	r3, [r3, #0]
   80700:	b933      	cbnz	r3, 80710 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   80702:	4b05      	ldr	r3, [pc, #20]	; (80718 <FPGA_setlock+0x24>)
   80704:	701c      	strb	r4, [r3, #0]
    ret = 1;
   80706:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   80708:	4b04      	ldr	r3, [pc, #16]	; (8071c <FPGA_setlock+0x28>)
   8070a:	4798      	blx	r3
  return ret;
}
   8070c:	4620      	mov	r0, r4
   8070e:	bd10      	pop	{r4, pc}
  int ret = 0;
   80710:	2400      	movs	r4, #0
   80712:	e7f9      	b.n	80708 <FPGA_setlock+0x14>
   80714:	000822d5 	.word	0x000822d5
   80718:	20000d95 	.word	0x20000d95
   8071c:	00082311 	.word	0x00082311

00080720 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   80720:	4b01      	ldr	r3, [pc, #4]	; (80728 <FPGA_releaselock+0x8>)
   80722:	2200      	movs	r2, #0
   80724:	701a      	strb	r2, [r3, #0]
}
   80726:	4770      	bx	lr
   80728:	20000d95 	.word	0x20000d95

0008072c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   8072c:	4b01      	ldr	r3, [pc, #4]	; (80734 <FPGA_lockstatus+0x8>)
   8072e:	7818      	ldrb	r0, [r3, #0]
}
   80730:	4770      	bx	lr
   80732:	bf00      	nop
   80734:	20000d95 	.word	0x20000d95

00080738 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   80738:	b508      	push	{r3, lr}
    FPGA_NPROG_SETUP();
   8073a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8073e:	2008      	movs	r0, #8
   80740:	4b02      	ldr	r3, [pc, #8]	; (8074c <fpga_program_init+0x14>)
   80742:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   80744:	2008      	movs	r0, #8
   80746:	4b02      	ldr	r3, [pc, #8]	; (80750 <fpga_program_init+0x18>)
   80748:	4798      	blx	r3
}
   8074a:	bd08      	pop	{r3, pc}
   8074c:	0008259d 	.word	0x0008259d
   80750:	00082565 	.word	0x00082565

00080754 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   80754:	b510      	push	{r4, lr}
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   80756:	4c18      	ldr	r4, [pc, #96]	; (807b8 <fpga_program_setup1+0x64>)
   80758:	4620      	mov	r0, r4
   8075a:	4b18      	ldr	r3, [pc, #96]	; (807bc <fpga_program_setup1+0x68>)
   8075c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8075e:	2380      	movs	r3, #128	; 0x80
   80760:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80762:	6863      	ldr	r3, [r4, #4]
   80764:	f043 0301 	orr.w	r3, r3, #1
   80768:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8076a:	6863      	ldr	r3, [r4, #4]
   8076c:	f043 0310 	orr.w	r3, r3, #16
   80770:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80772:	6863      	ldr	r3, [r4, #4]
   80774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80778:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   8077a:	2200      	movs	r2, #0
   8077c:	4611      	mov	r1, r2
   8077e:	4620      	mov	r0, r4
   80780:	4b0f      	ldr	r3, [pc, #60]	; (807c0 <fpga_program_setup1+0x6c>)
   80782:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80784:	2201      	movs	r2, #1
   80786:	2100      	movs	r1, #0
   80788:	4620      	mov	r0, r4
   8078a:	4b0e      	ldr	r3, [pc, #56]	; (807c4 <fpga_program_setup1+0x70>)
   8078c:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   8078e:	490e      	ldr	r1, [pc, #56]	; (807c8 <fpga_program_setup1+0x74>)
   80790:	480e      	ldr	r0, [pc, #56]	; (807cc <fpga_program_setup1+0x78>)
   80792:	4b0f      	ldr	r3, [pc, #60]	; (807d0 <fpga_program_setup1+0x7c>)
   80794:	4798      	blx	r3
   80796:	b2c2      	uxtb	r2, r0
   80798:	2100      	movs	r1, #0
   8079a:	4620      	mov	r0, r4
   8079c:	4b0d      	ldr	r3, [pc, #52]	; (807d4 <fpga_program_setup1+0x80>)
   8079e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   807a0:	2301      	movs	r3, #1
   807a2:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   807a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807a8:	200e      	movs	r0, #14
   807aa:	4c0b      	ldr	r4, [pc, #44]	; (807d8 <fpga_program_setup1+0x84>)
   807ac:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   807ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807b2:	200f      	movs	r0, #15
   807b4:	47a0      	blx	r4
	#endif
#endif
}
   807b6:	bd10      	pop	{r4, pc}
   807b8:	40008000 	.word	0x40008000
   807bc:	00082949 	.word	0x00082949
   807c0:	00082991 	.word	0x00082991
   807c4:	000829b3 	.word	0x000829b3
   807c8:	05b8d800 	.word	0x05b8d800
   807cc:	000f4240 	.word	0x000f4240
   807d0:	000829d5 	.word	0x000829d5
   807d4:	000829ed 	.word	0x000829ed
   807d8:	0008259d 	.word	0x0008259d

000807dc <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   807dc:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   807de:	2008      	movs	r0, #8
   807e0:	4b01      	ldr	r3, [pc, #4]	; (807e8 <fpga_program_setup2+0xc>)
   807e2:	4798      	blx	r3
}
   807e4:	bd08      	pop	{r3, pc}
   807e6:	bf00      	nop
   807e8:	00082565 	.word	0x00082565

000807ec <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   807ec:	b510      	push	{r4, lr}
   807ee:	4601      	mov	r1, r0
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   807f0:	2300      	movs	r3, #0
   807f2:	461a      	mov	r2, r3
   807f4:	4801      	ldr	r0, [pc, #4]	; (807fc <fpga_program_sendbyte+0x10>)
   807f6:	4c02      	ldr	r4, [pc, #8]	; (80800 <fpga_program_sendbyte+0x14>)
   807f8:	47a0      	blx	r4
		#endif
	#endif
}
   807fa:	bd10      	pop	{r4, pc}
   807fc:	40008000 	.word	0x40008000
   80800:	00082959 	.word	0x00082959

00080804 <cdce906_write>:

	return false;
}

bool cdce906_write(uint8_t addr, uint8_t data)
{
   80804:	b500      	push	{lr}
   80806:	b089      	sub	sp, #36	; 0x24
   80808:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t packet_write = {
   8080c:	2300      	movs	r3, #0
   8080e:	9303      	str	r3, [sp, #12]
   80810:	9307      	str	r3, [sp, #28]
   80812:	f060 007f 	orn	r0, r0, #127	; 0x7f
   80816:	f88d 000c 	strb.w	r0, [sp, #12]
   8081a:	2301      	movs	r3, #1
   8081c:	9304      	str	r3, [sp, #16]
   8081e:	f10d 0207 	add.w	r2, sp, #7
   80822:	9205      	str	r2, [sp, #20]
   80824:	9306      	str	r3, [sp, #24]
   80826:	2369      	movs	r3, #105	; 0x69
   80828:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = &data, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI1, &packet_write) == TWI_SUCCESS){
   8082c:	a903      	add	r1, sp, #12
   8082e:	4805      	ldr	r0, [pc, #20]	; (80844 <cdce906_write+0x40>)
   80830:	4b05      	ldr	r3, [pc, #20]	; (80848 <cdce906_write+0x44>)
   80832:	4798      	blx	r3
   80834:	b918      	cbnz	r0, 8083e <cdce906_write+0x3a>
		return true;
   80836:	2001      	movs	r0, #1
	} else {
		return false;
	}
}
   80838:	b009      	add	sp, #36	; 0x24
   8083a:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   8083e:	2000      	movs	r0, #0
   80840:	e7fa      	b.n	80838 <cdce906_write+0x34>
   80842:	bf00      	nop
   80844:	40088000 	.word	0x40088000
   80848:	00082e15 	.word	0x00082e15

0008084c <cdce906_read>:

bool cdce906_read(uint8_t addr, uint8_t * data)
{
   8084c:	b500      	push	{lr}
   8084e:	b087      	sub	sp, #28
	twi_package_t packet_read = {
   80850:	2300      	movs	r3, #0
   80852:	9301      	str	r3, [sp, #4]
   80854:	9305      	str	r3, [sp, #20]
   80856:	f060 007f 	orn	r0, r0, #127	; 0x7f
   8085a:	f88d 0004 	strb.w	r0, [sp, #4]
   8085e:	2301      	movs	r3, #1
   80860:	9302      	str	r3, [sp, #8]
   80862:	9103      	str	r1, [sp, #12]
   80864:	9304      	str	r3, [sp, #16]
   80866:	2369      	movs	r3, #105	; 0x69
   80868:	f88d 3014 	strb.w	r3, [sp, #20]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   8086c:	a901      	add	r1, sp, #4
   8086e:	4805      	ldr	r0, [pc, #20]	; (80884 <cdce906_read+0x38>)
   80870:	4b05      	ldr	r3, [pc, #20]	; (80888 <cdce906_read+0x3c>)
   80872:	4798      	blx	r3
   80874:	b918      	cbnz	r0, 8087e <cdce906_read+0x32>
		return true;
   80876:	2001      	movs	r0, #1
	} else {
		return false;
	}	
   80878:	b007      	add	sp, #28
   8087a:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   8087e:	2000      	movs	r0, #0
   80880:	e7fa      	b.n	80878 <cdce906_read+0x2c>
   80882:	bf00      	nop
   80884:	40088000 	.word	0x40088000
   80888:	00082d71 	.word	0x00082d71

0008088c <cdce906_init>:
{
   8088c:	b510      	push	{r4, lr}
   8088e:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
   80890:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80894:	2018      	movs	r0, #24
   80896:	4c15      	ldr	r4, [pc, #84]	; (808ec <cdce906_init+0x60>)
   80898:	47a0      	blx	r4
	gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
   8089a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8089e:	2019      	movs	r0, #25
   808a0:	47a0      	blx	r4
	twi_master_options_t opt = {
   808a2:	2400      	movs	r4, #0
   808a4:	9403      	str	r4, [sp, #12]
   808a6:	f24c 3350 	movw	r3, #50000	; 0xc350
   808aa:	9302      	str	r3, [sp, #8]
   808ac:	2369      	movs	r3, #105	; 0x69
   808ae:	f88d 300c 	strb.w	r3, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   808b2:	4b0f      	ldr	r3, [pc, #60]	; (808f0 <cdce906_init+0x64>)
   808b4:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   808b6:	f88d 400d 	strb.w	r4, [sp, #13]
   808ba:	2013      	movs	r0, #19
   808bc:	4b0d      	ldr	r3, [pc, #52]	; (808f4 <cdce906_init+0x68>)
   808be:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   808c0:	a901      	add	r1, sp, #4
   808c2:	480d      	ldr	r0, [pc, #52]	; (808f8 <cdce906_init+0x6c>)
   808c4:	4b0d      	ldr	r3, [pc, #52]	; (808fc <cdce906_init+0x70>)
   808c6:	4798      	blx	r3
	uint8_t data = 0;
   808c8:	f88d 4003 	strb.w	r4, [sp, #3]
	if (cdce906_read(0, &data) == false){
   808cc:	f10d 0103 	add.w	r1, sp, #3
   808d0:	4620      	mov	r0, r4
   808d2:	4b0b      	ldr	r3, [pc, #44]	; (80900 <cdce906_init+0x74>)
   808d4:	4798      	blx	r3
   808d6:	b130      	cbz	r0, 808e6 <cdce906_init+0x5a>
	if ((data & 0x0F) == 0x01){
   808d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   808dc:	f003 030f 	and.w	r3, r3, #15
   808e0:	2b01      	cmp	r3, #1
   808e2:	d000      	beq.n	808e6 <cdce906_init+0x5a>
	return false;
   808e4:	4620      	mov	r0, r4
}
   808e6:	b004      	add	sp, #16
   808e8:	bd10      	pop	{r4, pc}
   808ea:	bf00      	nop
   808ec:	0008259d 	.word	0x0008259d
   808f0:	05b8d800 	.word	0x05b8d800
   808f4:	00082845 	.word	0x00082845
   808f8:	40088000 	.word	0x40088000
   808fc:	00082e95 	.word	0x00082e95
   80900:	0008084d 	.word	0x0008084d

00080904 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   80904:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   80906:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8090a:	200f      	movs	r0, #15
   8090c:	4c0a      	ldr	r4, [pc, #40]	; (80938 <fpgaspi_program_init+0x34>)
   8090e:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   80910:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80914:	2032      	movs	r0, #50	; 0x32
   80916:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   80918:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8091c:	200e      	movs	r0, #14
   8091e:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   80920:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80924:	2036      	movs	r0, #54	; 0x36
   80926:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   80928:	2036      	movs	r0, #54	; 0x36
   8092a:	4b04      	ldr	r3, [pc, #16]	; (8093c <fpgaspi_program_init+0x38>)
   8092c:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
   8092e:	200f      	movs	r0, #15
   80930:	4b03      	ldr	r3, [pc, #12]	; (80940 <fpgaspi_program_init+0x3c>)
   80932:	4798      	blx	r3
}
   80934:	bd10      	pop	{r4, pc}
   80936:	bf00      	nop
   80938:	0008259d 	.word	0x0008259d
   8093c:	00082565 	.word	0x00082565
   80940:	00082581 	.word	0x00082581

00080944 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
   80944:	b508      	push	{r3, lr}
	FPGASPI_CS_LOW();
   80946:	2036      	movs	r0, #54	; 0x36
   80948:	4b01      	ldr	r3, [pc, #4]	; (80950 <fpgaspi_cs_low+0xc>)
   8094a:	4798      	blx	r3
}
   8094c:	bd08      	pop	{r3, pc}
   8094e:	bf00      	nop
   80950:	00082581 	.word	0x00082581

00080954 <fpgaspi_cs_high>:

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
   80954:	b508      	push	{r3, lr}
	FPGASPI_CS_HIGH();
   80956:	2036      	movs	r0, #54	; 0x36
   80958:	4b01      	ldr	r3, [pc, #4]	; (80960 <fpgaspi_cs_high+0xc>)
   8095a:	4798      	blx	r3
}
   8095c:	bd08      	pop	{r3, pc}
   8095e:	bf00      	nop
   80960:	00082565 	.word	0x00082565

00080964 <fpgaspi_xferbyte>:


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   80964:	b570      	push	{r4, r5, r6, lr}
   80966:	4605      	mov	r5, r0
	uint8_t result = 0;

	for(unsigned int i=0; i < 8; i++){	
   80968:	2600      	movs	r6, #0
	uint8_t result = 0;
   8096a:	4634      	mov	r4, r6
	for(unsigned int i=0; i < 8; i++){	
   8096c:	e00a      	b.n	80984 <fpgaspi_xferbyte+0x20>
		//On first read this gets thrown away
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
   8096e:	2032      	movs	r0, #50	; 0x32
   80970:	4b14      	ldr	r3, [pc, #80]	; (809c4 <fpgaspi_xferbyte+0x60>)
   80972:	4798      	blx	r3
			} else {
			FPGASPI_DO_LOW();
		}
		
		FPGASPI_CCLK_HIGH();
   80974:	200f      	movs	r0, #15
   80976:	4b13      	ldr	r3, [pc, #76]	; (809c4 <fpgaspi_xferbyte+0x60>)
   80978:	4798      	blx	r3
		databyte = databyte << 1;
   8097a:	006d      	lsls	r5, r5, #1
   8097c:	b2ed      	uxtb	r5, r5
		result = result << 1;
   8097e:	0064      	lsls	r4, r4, #1
   80980:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   80982:	3601      	adds	r6, #1
   80984:	2e07      	cmp	r6, #7
   80986:	d810      	bhi.n	809aa <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80988:	200e      	movs	r0, #14
   8098a:	4b0f      	ldr	r3, [pc, #60]	; (809c8 <fpgaspi_xferbyte+0x64>)
   8098c:	4798      	blx	r3
   8098e:	2800      	cmp	r0, #0
   80990:	bf18      	it	ne
   80992:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   80996:	200f      	movs	r0, #15
   80998:	4b0c      	ldr	r3, [pc, #48]	; (809cc <fpgaspi_xferbyte+0x68>)
   8099a:	4798      	blx	r3
		if (databyte & 0x80){
   8099c:	f015 0f80 	tst.w	r5, #128	; 0x80
   809a0:	d1e5      	bne.n	8096e <fpgaspi_xferbyte+0xa>
			FPGASPI_DO_LOW();
   809a2:	2032      	movs	r0, #50	; 0x32
   809a4:	4b09      	ldr	r3, [pc, #36]	; (809cc <fpgaspi_xferbyte+0x68>)
   809a6:	4798      	blx	r3
   809a8:	e7e4      	b.n	80974 <fpgaspi_xferbyte+0x10>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   809aa:	200e      	movs	r0, #14
   809ac:	4b06      	ldr	r3, [pc, #24]	; (809c8 <fpgaspi_xferbyte+0x64>)
   809ae:	4798      	blx	r3
   809b0:	2800      	cmp	r0, #0
   809b2:	bf18      	it	ne
   809b4:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   809b8:	200f      	movs	r0, #15
   809ba:	4b04      	ldr	r3, [pc, #16]	; (809cc <fpgaspi_xferbyte+0x68>)
   809bc:	4798      	blx	r3

	return result;
}
   809be:	4620      	mov	r0, r4
   809c0:	bd70      	pop	{r4, r5, r6, pc}
   809c2:	bf00      	nop
   809c4:	00082565 	.word	0x00082565
   809c8:	00082549 	.word	0x00082549
   809cc:	00082581 	.word	0x00082581

000809d0 <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   809d0:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   809d2:	2100      	movs	r1, #0
   809d4:	200f      	movs	r0, #15
   809d6:	4c04      	ldr	r4, [pc, #16]	; (809e8 <fpgaspi_program_deinit+0x18>)
   809d8:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   809da:	2100      	movs	r1, #0
   809dc:	2032      	movs	r0, #50	; 0x32
   809de:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   809e0:	2100      	movs	r1, #0
   809e2:	2036      	movs	r0, #54	; 0x36
   809e4:	47a0      	blx	r4
   809e6:	bd10      	pop	{r4, pc}
   809e8:	0008259d 	.word	0x0008259d

000809ec <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   809ec:	b508      	push	{r3, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   809ee:	4b04      	ldr	r3, [pc, #16]	; (80a00 <spi1util_init+0x14>)
   809f0:	6818      	ldr	r0, [r3, #0]
   809f2:	4b04      	ldr	r3, [pc, #16]	; (80a04 <spi1util_init+0x18>)
   809f4:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
   809f6:	4b04      	ldr	r3, [pc, #16]	; (80a08 <spi1util_init+0x1c>)
   809f8:	6818      	ldr	r0, [r3, #0]
   809fa:	4b04      	ldr	r3, [pc, #16]	; (80a0c <spi1util_init+0x20>)
   809fc:	4798      	blx	r3
}
   809fe:	bd08      	pop	{r3, pc}
   80a00:	200001dc 	.word	0x200001dc
   80a04:	00082565 	.word	0x00082565
   80a08:	200001e8 	.word	0x200001e8
   80a0c:	00082581 	.word	0x00082581

00080a10 <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
   80a10:	b508      	push	{r3, lr}
	gpio_set_pin_low(pin_spi1_cs);
   80a12:	4b02      	ldr	r3, [pc, #8]	; (80a1c <spi1util_cs_low+0xc>)
   80a14:	6818      	ldr	r0, [r3, #0]
   80a16:	4b02      	ldr	r3, [pc, #8]	; (80a20 <spi1util_cs_low+0x10>)
   80a18:	4798      	blx	r3
}
   80a1a:	bd08      	pop	{r3, pc}
   80a1c:	200001dc 	.word	0x200001dc
   80a20:	00082581 	.word	0x00082581

00080a24 <spi1util_cs_high>:

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
   80a24:	b508      	push	{r3, lr}
	gpio_set_pin_high(pin_spi1_cs);
   80a26:	4b02      	ldr	r3, [pc, #8]	; (80a30 <spi1util_cs_high+0xc>)
   80a28:	6818      	ldr	r0, [r3, #0]
   80a2a:	4b02      	ldr	r3, [pc, #8]	; (80a34 <spi1util_cs_high+0x10>)
   80a2c:	4798      	blx	r3
}
   80a2e:	bd08      	pop	{r3, pc}
   80a30:	200001dc 	.word	0x200001dc
   80a34:	00082565 	.word	0x00082565

00080a38 <spi1util_xferbyte>:

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   80a38:	b570      	push	{r4, r5, r6, lr}
   80a3a:	4605      	mov	r5, r0
	uint8_t result = 0;

	for(unsigned int i=0; i < 8; i++){	
   80a3c:	2600      	movs	r6, #0
	uint8_t result = 0;
   80a3e:	4634      	mov	r4, r6
	for(unsigned int i=0; i < 8; i++){	
   80a40:	e00c      	b.n	80a5c <spi1util_xferbyte+0x24>
		//On first read this gets thrown away
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
   80a42:	4b18      	ldr	r3, [pc, #96]	; (80aa4 <spi1util_xferbyte+0x6c>)
   80a44:	6818      	ldr	r0, [r3, #0]
   80a46:	4b18      	ldr	r3, [pc, #96]	; (80aa8 <spi1util_xferbyte+0x70>)
   80a48:	4798      	blx	r3
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   80a4a:	4b18      	ldr	r3, [pc, #96]	; (80aac <spi1util_xferbyte+0x74>)
   80a4c:	6818      	ldr	r0, [r3, #0]
   80a4e:	4b16      	ldr	r3, [pc, #88]	; (80aa8 <spi1util_xferbyte+0x70>)
   80a50:	4798      	blx	r3
		databyte = databyte << 1;
   80a52:	006d      	lsls	r5, r5, #1
   80a54:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80a56:	0064      	lsls	r4, r4, #1
   80a58:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   80a5a:	3601      	adds	r6, #1
   80a5c:	2e07      	cmp	r6, #7
   80a5e:	d813      	bhi.n	80a88 <spi1util_xferbyte+0x50>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a60:	4b13      	ldr	r3, [pc, #76]	; (80ab0 <spi1util_xferbyte+0x78>)
   80a62:	6818      	ldr	r0, [r3, #0]
   80a64:	4b13      	ldr	r3, [pc, #76]	; (80ab4 <spi1util_xferbyte+0x7c>)
   80a66:	4798      	blx	r3
   80a68:	2800      	cmp	r0, #0
   80a6a:	bf18      	it	ne
   80a6c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80a70:	4b0e      	ldr	r3, [pc, #56]	; (80aac <spi1util_xferbyte+0x74>)
   80a72:	6818      	ldr	r0, [r3, #0]
   80a74:	4b10      	ldr	r3, [pc, #64]	; (80ab8 <spi1util_xferbyte+0x80>)
   80a76:	4798      	blx	r3
		if (databyte & 0x80){
   80a78:	f015 0f80 	tst.w	r5, #128	; 0x80
   80a7c:	d1e1      	bne.n	80a42 <spi1util_xferbyte+0xa>
			gpio_set_pin_low(pin_spi1_mosi);
   80a7e:	4b09      	ldr	r3, [pc, #36]	; (80aa4 <spi1util_xferbyte+0x6c>)
   80a80:	6818      	ldr	r0, [r3, #0]
   80a82:	4b0d      	ldr	r3, [pc, #52]	; (80ab8 <spi1util_xferbyte+0x80>)
   80a84:	4798      	blx	r3
   80a86:	e7e0      	b.n	80a4a <spi1util_xferbyte+0x12>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a88:	4b09      	ldr	r3, [pc, #36]	; (80ab0 <spi1util_xferbyte+0x78>)
   80a8a:	6818      	ldr	r0, [r3, #0]
   80a8c:	4b09      	ldr	r3, [pc, #36]	; (80ab4 <spi1util_xferbyte+0x7c>)
   80a8e:	4798      	blx	r3
   80a90:	2800      	cmp	r0, #0
   80a92:	bf18      	it	ne
   80a94:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80a98:	4b04      	ldr	r3, [pc, #16]	; (80aac <spi1util_xferbyte+0x74>)
   80a9a:	6818      	ldr	r0, [r3, #0]
   80a9c:	4b06      	ldr	r3, [pc, #24]	; (80ab8 <spi1util_xferbyte+0x80>)
   80a9e:	4798      	blx	r3

	return result;
}
   80aa0:	4620      	mov	r0, r4
   80aa2:	bd70      	pop	{r4, r5, r6, pc}
   80aa4:	200001e4 	.word	0x200001e4
   80aa8:	00082565 	.word	0x00082565
   80aac:	200001e8 	.word	0x200001e8
   80ab0:	200001e0 	.word	0x200001e0
   80ab4:	00082549 	.word	0x00082549
   80ab8:	00082581 	.word	0x00082581

00080abc <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   80abc:	4770      	bx	lr

00080abe <checkoddparity>:
unsigned char checkoddparity(unsigned char p);

/* Is current byte odd-parity already? */
unsigned char checkoddparity(unsigned char p)
{
	p = p ^ (p >> 4 | p << 4);
   80abe:	0903      	lsrs	r3, r0, #4
   80ac0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   80ac4:	b25b      	sxtb	r3, r3
   80ac6:	4058      	eors	r0, r3
   80ac8:	b2c3      	uxtb	r3, r0
	p = p ^ (p >> 2);
   80aca:	f3c0 0085 	ubfx	r0, r0, #2, #6
   80ace:	4058      	eors	r0, r3
	p = p ^ (p >> 1);
   80ad0:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
	return p & 1;
}
   80ad4:	f000 0001 	and.w	r0, r0, #1
   80ad8:	4770      	bx	lr
   80ada:	0000      	movs	r0, r0

00080adc <tps56520_set>:

/* Set voltage in mV for FPGA VCC_INT Voltage */
bool tps56520_set(uint16_t mv_output)
{
	/* Validate output voltage is in range */
	if ((mv_output < 600) || (mv_output > 1800)){
   80adc:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
   80ae0:	b29b      	uxth	r3, r3
   80ae2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   80ae6:	d84c      	bhi.n	80b82 <tps56520_set+0xa6>
		return false;
	}
	
	/* Avoid frying FPGA */
	if (mv_output > 1200){
   80ae8:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   80aec:	d84b      	bhi.n	80b86 <tps56520_set+0xaa>
{
   80aee:	b510      	push	{r4, lr}
   80af0:	b08c      	sub	sp, #48	; 0x30
		return false;
	}
	
	uint8_t setting = (mv_output - 600) / 10;
   80af2:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   80af6:	4c26      	ldr	r4, [pc, #152]	; (80b90 <tps56520_set+0xb4>)
   80af8:	fb84 3400 	smull	r3, r4, r4, r0
   80afc:	17c0      	asrs	r0, r0, #31
   80afe:	ebc0 04a4 	rsb	r4, r0, r4, asr #2
   80b02:	b2e4      	uxtb	r4, r4
   80b04:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
	
	if (!checkoddparity(setting)){
   80b08:	4620      	mov	r0, r4
   80b0a:	4b22      	ldr	r3, [pc, #136]	; (80b94 <tps56520_set+0xb8>)
   80b0c:	4798      	blx	r3
   80b0e:	b918      	cbnz	r0, 80b18 <tps56520_set+0x3c>
		setting |= 1<<7;
   80b10:	f064 047f 	orn	r4, r4, #127	; 0x7f
   80b14:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
	}
	twi_package_t packet_write = {
   80b18:	4b1f      	ldr	r3, [pc, #124]	; (80b98 <tps56520_set+0xbc>)
   80b1a:	681b      	ldr	r3, [r3, #0]
   80b1c:	f8ad 3018 	strh.w	r3, [sp, #24]
   80b20:	0c1b      	lsrs	r3, r3, #16
   80b22:	f88d 301a 	strb.w	r3, [sp, #26]
   80b26:	2301      	movs	r3, #1
   80b28:	9307      	str	r3, [sp, #28]
   80b2a:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   80b2e:	9208      	str	r2, [sp, #32]
   80b30:	9309      	str	r3, [sp, #36]	; 0x24
   80b32:	2334      	movs	r3, #52	; 0x34
   80b34:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80b38:	a906      	add	r1, sp, #24
   80b3a:	4818      	ldr	r0, [pc, #96]	; (80b9c <tps56520_set+0xc0>)
   80b3c:	4b18      	ldr	r3, [pc, #96]	; (80ba0 <tps56520_set+0xc4>)
   80b3e:	4798      	blx	r3
   80b40:	b110      	cbz	r0, 80b48 <tps56520_set+0x6c>
		return false;
   80b42:	2000      	movs	r0, #0
	if (volt_read == setting){
		return true;
	}
	
	return false;
   80b44:	b00c      	add	sp, #48	; 0x30
   80b46:	bd10      	pop	{r4, pc}
	twi_package_t packet_read = {
   80b48:	4b13      	ldr	r3, [pc, #76]	; (80b98 <tps56520_set+0xbc>)
   80b4a:	681b      	ldr	r3, [r3, #0]
   80b4c:	f8ad 3000 	strh.w	r3, [sp]
   80b50:	0c1b      	lsrs	r3, r3, #16
   80b52:	f88d 3002 	strb.w	r3, [sp, #2]
   80b56:	2301      	movs	r3, #1
   80b58:	9301      	str	r3, [sp, #4]
   80b5a:	f10d 0217 	add.w	r2, sp, #23
   80b5e:	9202      	str	r2, [sp, #8]
   80b60:	9303      	str	r3, [sp, #12]
   80b62:	2334      	movs	r3, #52	; 0x34
   80b64:	f88d 3010 	strb.w	r3, [sp, #16]
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80b68:	4669      	mov	r1, sp
   80b6a:	480c      	ldr	r0, [pc, #48]	; (80b9c <tps56520_set+0xc0>)
   80b6c:	4b0d      	ldr	r3, [pc, #52]	; (80ba4 <tps56520_set+0xc8>)
   80b6e:	4798      	blx	r3
   80b70:	b958      	cbnz	r0, 80b8a <tps56520_set+0xae>
	if (volt_read == setting){
   80b72:	f89d 2017 	ldrb.w	r2, [sp, #23]
   80b76:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   80b7a:	429a      	cmp	r2, r3
   80b7c:	d1e2      	bne.n	80b44 <tps56520_set+0x68>
		return true;
   80b7e:	2001      	movs	r0, #1
   80b80:	e7e0      	b.n	80b44 <tps56520_set+0x68>
		return false;
   80b82:	2000      	movs	r0, #0
   80b84:	4770      	bx	lr
		return false;
   80b86:	2000      	movs	r0, #0
   80b88:	4770      	bx	lr
		return false;
   80b8a:	2000      	movs	r0, #0
   80b8c:	e7da      	b.n	80b44 <tps56520_set+0x68>
   80b8e:	bf00      	nop
   80b90:	66666667 	.word	0x66666667
   80b94:	00080abf 	.word	0x00080abf
   80b98:	0008bee4 	.word	0x0008bee4
   80b9c:	40084000 	.word	0x40084000
   80ba0:	00082e15 	.word	0x00082e15
   80ba4:	00082d71 	.word	0x00082d71

00080ba8 <tps56520_init>:
{
   80ba8:	b510      	push	{r4, lr}
   80baa:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   80bac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bb0:	2009      	movs	r0, #9
   80bb2:	4c15      	ldr	r4, [pc, #84]	; (80c08 <tps56520_init+0x60>)
   80bb4:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   80bb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bba:	200a      	movs	r0, #10
   80bbc:	47a0      	blx	r4
	twi_master_options_t opt = {
   80bbe:	2300      	movs	r3, #0
   80bc0:	9303      	str	r3, [sp, #12]
   80bc2:	f24c 3250 	movw	r2, #50000	; 0xc350
   80bc6:	9202      	str	r2, [sp, #8]
   80bc8:	2234      	movs	r2, #52	; 0x34
   80bca:	f88d 200c 	strb.w	r2, [sp, #12]
	p_opt->master_clk = sysclk_get_cpu_hz();
   80bce:	4a0f      	ldr	r2, [pc, #60]	; (80c0c <tps56520_init+0x64>)
   80bd0:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   80bd2:	f88d 300d 	strb.w	r3, [sp, #13]
   80bd6:	2012      	movs	r0, #18
   80bd8:	4b0d      	ldr	r3, [pc, #52]	; (80c10 <tps56520_init+0x68>)
   80bda:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   80bdc:	a901      	add	r1, sp, #4
   80bde:	480d      	ldr	r0, [pc, #52]	; (80c14 <tps56520_init+0x6c>)
   80be0:	4b0d      	ldr	r3, [pc, #52]	; (80c18 <tps56520_init+0x70>)
   80be2:	4798      	blx	r3
	for(int retry = 3; retry > 0; retry--){
   80be4:	2403      	movs	r4, #3
   80be6:	e000      	b.n	80bea <tps56520_init+0x42>
   80be8:	3c01      	subs	r4, #1
   80bea:	2c00      	cmp	r4, #0
   80bec:	dd07      	ble.n	80bfe <tps56520_init+0x56>
		if(tps56520_set(1000)){
   80bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80bf2:	4b0a      	ldr	r3, [pc, #40]	; (80c1c <tps56520_init+0x74>)
   80bf4:	4798      	blx	r3
   80bf6:	4603      	mov	r3, r0
   80bf8:	2800      	cmp	r0, #0
   80bfa:	d0f5      	beq.n	80be8 <tps56520_init+0x40>
   80bfc:	e000      	b.n	80c00 <tps56520_init+0x58>
	return false;
   80bfe:	2300      	movs	r3, #0
}
   80c00:	4618      	mov	r0, r3
   80c02:	b004      	add	sp, #16
   80c04:	bd10      	pop	{r4, pc}
   80c06:	bf00      	nop
   80c08:	0008259d 	.word	0x0008259d
   80c0c:	05b8d800 	.word	0x05b8d800
   80c10:	00082845 	.word	0x00082845
   80c14:	40084000 	.word	0x40084000
   80c18:	00082e95 	.word	0x00082e95
   80c1c:	00080add 	.word	0x00080add

00080c20 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   80c20:	b538      	push	{r3, r4, r5, lr}
   80c22:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80c24:	b2c0      	uxtb	r0, r0
   80c26:	4d05      	ldr	r5, [pc, #20]	; (80c3c <XMEGANVM_SendAddress+0x1c>)
   80c28:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80c2a:	f3c4 2007 	ubfx	r0, r4, #8, #8
   80c2e:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80c30:	f3c4 4007 	ubfx	r0, r4, #16, #8
   80c34:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80c36:	0e20      	lsrs	r0, r4, #24
   80c38:	47a8      	blx	r5
}
   80c3a:	bd38      	pop	{r3, r4, r5, pc}
   80c3c:	000814e9 	.word	0x000814e9

00080c40 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   80c40:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80c42:	4b03      	ldr	r3, [pc, #12]	; (80c50 <XMEGANVM_SendNVMRegAddress+0x10>)
   80c44:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   80c46:	4318      	orrs	r0, r3
   80c48:	4b02      	ldr	r3, [pc, #8]	; (80c54 <XMEGANVM_SendNVMRegAddress+0x14>)
   80c4a:	4798      	blx	r3
}
   80c4c:	bd08      	pop	{r3, pc}
   80c4e:	bf00      	nop
   80c50:	200001f0 	.word	0x200001f0
   80c54:	00080c21 	.word	0x00080c21

00080c58 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   80c58:	b508      	push	{r3, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   80c5a:	2080      	movs	r0, #128	; 0x80
   80c5c:	4b06      	ldr	r3, [pc, #24]	; (80c78 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)
   80c5e:	4798      	blx	r3

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80c60:	4b06      	ldr	r3, [pc, #24]	; (80c7c <XMEGANVM_WaitWhileNVMBusBusy+0x24>)
   80c62:	4798      	blx	r3

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   80c64:	4b06      	ldr	r3, [pc, #24]	; (80c80 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
   80c66:	681b      	ldr	r3, [r3, #0]
   80c68:	b123      	cbz	r3, 80c74 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   80c6a:	f010 0f02 	tst.w	r0, #2
   80c6e:	d0f4      	beq.n	80c5a <XMEGANVM_WaitWhileNVMBusBusy+0x2>
		  return true;
   80c70:	2001      	movs	r0, #1
   80c72:	e000      	b.n	80c76 <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   80c74:	2000      	movs	r0, #0
		}
	}
}
   80c76:	bd08      	pop	{r3, pc}
   80c78:	000814e9 	.word	0x000814e9
   80c7c:	00081515 	.word	0x00081515
   80c80:	200010c0 	.word	0x200010c0

00080c84 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   80c84:	b508      	push	{r3, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80c86:	206b      	movs	r0, #107	; 0x6b
   80c88:	4b09      	ldr	r3, [pc, #36]	; (80cb0 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   80c8a:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   80c8c:	200f      	movs	r0, #15
   80c8e:	4b09      	ldr	r3, [pc, #36]	; (80cb4 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   80c90:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80c92:	2020      	movs	r0, #32
   80c94:	4b06      	ldr	r3, [pc, #24]	; (80cb0 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   80c96:	4798      	blx	r3

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80c98:	4b07      	ldr	r3, [pc, #28]	; (80cb8 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)
   80c9a:	4798      	blx	r3

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   80c9c:	4b07      	ldr	r3, [pc, #28]	; (80cbc <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
   80c9e:	681b      	ldr	r3, [r3, #0]
   80ca0:	b123      	cbz	r3, 80cac <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   80ca2:	f010 0f80 	tst.w	r0, #128	; 0x80
   80ca6:	d1f4      	bne.n	80c92 <XMEGANVM_WaitWhileNVMControllerBusy+0xe>
		  return true;
   80ca8:	2001      	movs	r0, #1
   80caa:	e000      	b.n	80cae <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   80cac:	2000      	movs	r0, #0
		}
	}
}
   80cae:	bd08      	pop	{r3, pc}
   80cb0:	000814e9 	.word	0x000814e9
   80cb4:	00080c41 	.word	0x00080c41
   80cb8:	00081515 	.word	0x00081515
   80cbc:	200010c0 	.word	0x200010c0

00080cc0 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   80cc0:	b510      	push	{r4, lr}
   80cc2:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   80cc4:	4b10      	ldr	r3, [pc, #64]	; (80d08 <XMEGANVM_EnablePDI+0x48>)
   80cc6:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   80cc8:	20c1      	movs	r0, #193	; 0xc1
   80cca:	4c10      	ldr	r4, [pc, #64]	; (80d0c <XMEGANVM_EnablePDI+0x4c>)
   80ccc:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   80cce:	2059      	movs	r0, #89	; 0x59
   80cd0:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   80cd2:	20c2      	movs	r0, #194	; 0xc2
   80cd4:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   80cd6:	2002      	movs	r0, #2
   80cd8:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   80cda:	20e0      	movs	r0, #224	; 0xe0
   80cdc:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   80cde:	2408      	movs	r4, #8
   80ce0:	e00c      	b.n	80cfc <XMEGANVM_EnablePDI+0x3c>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   80ce2:	4a0b      	ldr	r2, [pc, #44]	; (80d10 <XMEGANVM_EnablePDI+0x50>)
   80ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
   80ce8:	ab02      	add	r3, sp, #8
   80cea:	e903 0003 	stmdb	r3, {r0, r1}
   80cee:	3c01      	subs	r4, #1
   80cf0:	4423      	add	r3, r4
   80cf2:	f813 0c08 	ldrb.w	r0, [r3, #-8]
   80cf6:	4b05      	ldr	r3, [pc, #20]	; (80d0c <XMEGANVM_EnablePDI+0x4c>)
   80cf8:	4798      	blx	r3
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   80cfa:	b2e4      	uxtb	r4, r4
   80cfc:	2c00      	cmp	r4, #0
   80cfe:	d1f0      	bne.n	80ce2 <XMEGANVM_EnablePDI+0x22>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   80d00:	4b04      	ldr	r3, [pc, #16]	; (80d14 <XMEGANVM_EnablePDI+0x54>)
   80d02:	4798      	blx	r3
}
   80d04:	b002      	add	sp, #8
   80d06:	bd10      	pop	{r4, pc}
   80d08:	000815b9 	.word	0x000815b9
   80d0c:	000814e9 	.word	0x000814e9
   80d10:	0008bee8 	.word	0x0008bee8
   80d14:	00080c59 	.word	0x00080c59

00080d18 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   80d18:	b510      	push	{r4, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   80d1a:	4b09      	ldr	r3, [pc, #36]	; (80d40 <XMEGANVM_DisablePDI+0x28>)
   80d1c:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   80d1e:	20c1      	movs	r0, #193	; 0xc1
   80d20:	4c08      	ldr	r4, [pc, #32]	; (80d44 <XMEGANVM_DisablePDI+0x2c>)
   80d22:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   80d24:	2000      	movs	r0, #0
   80d26:	47a0      	blx	r4

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   80d28:	2081      	movs	r0, #129	; 0x81
   80d2a:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   80d2c:	4b06      	ldr	r3, [pc, #24]	; (80d48 <XMEGANVM_DisablePDI+0x30>)
   80d2e:	4798      	blx	r3
   80d30:	b118      	cbz	r0, 80d3a <XMEGANVM_DisablePDI+0x22>
   80d32:	4b06      	ldr	r3, [pc, #24]	; (80d4c <XMEGANVM_DisablePDI+0x34>)
   80d34:	681b      	ldr	r3, [r3, #0]
   80d36:	2b00      	cmp	r3, #0
   80d38:	d1f1      	bne.n	80d1e <XMEGANVM_DisablePDI+0x6>

	XPROGTarget_DisableTargetPDI();
   80d3a:	4b05      	ldr	r3, [pc, #20]	; (80d50 <XMEGANVM_DisablePDI+0x38>)
   80d3c:	4798      	blx	r3
}
   80d3e:	bd10      	pop	{r4, pc}
   80d40:	00080c59 	.word	0x00080c59
   80d44:	000814e9 	.word	0x000814e9
   80d48:	00081515 	.word	0x00081515
   80d4c:	200010c0 	.word	0x200010c0
   80d50:	0008148d 	.word	0x0008148d

00080d54 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   80d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d56:	4605      	mov	r5, r0
   80d58:	460e      	mov	r6, r1
   80d5a:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80d5c:	4b1c      	ldr	r3, [pc, #112]	; (80dd0 <XMEGANVM_ReadMemory+0x7c>)
   80d5e:	4798      	blx	r3
   80d60:	4603      	mov	r3, r0
   80d62:	b908      	cbnz	r0, 80d68 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   80d64:	4618      	mov	r0, r3
   80d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80d68:	204c      	movs	r0, #76	; 0x4c
   80d6a:	4f1a      	ldr	r7, [pc, #104]	; (80dd4 <XMEGANVM_ReadMemory+0x80>)
   80d6c:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80d6e:	200a      	movs	r0, #10
   80d70:	4b19      	ldr	r3, [pc, #100]	; (80dd8 <XMEGANVM_ReadMemory+0x84>)
   80d72:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   80d74:	2043      	movs	r0, #67	; 0x43
   80d76:	47b8      	blx	r7
	if (ReadSize > 1)
   80d78:	2c01      	cmp	r4, #1
   80d7a:	d919      	bls.n	80db0 <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80d7c:	206b      	movs	r0, #107	; 0x6b
   80d7e:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   80d80:	4628      	mov	r0, r5
   80d82:	4b16      	ldr	r3, [pc, #88]	; (80ddc <XMEGANVM_ReadMemory+0x88>)
   80d84:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80d86:	20a0      	movs	r0, #160	; 0xa0
   80d88:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   80d8a:	1e60      	subs	r0, r4, #1
   80d8c:	b2c0      	uxtb	r0, r0
   80d8e:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80d90:	2024      	movs	r0, #36	; 0x24
   80d92:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   80d94:	e004      	b.n	80da0 <XMEGANVM_ReadMemory+0x4c>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80d96:	4b12      	ldr	r3, [pc, #72]	; (80de0 <XMEGANVM_ReadMemory+0x8c>)
   80d98:	4798      	blx	r3
   80d9a:	f806 0b01 	strb.w	r0, [r6], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   80d9e:	462c      	mov	r4, r5
   80da0:	1e63      	subs	r3, r4, #1
   80da2:	b29d      	uxth	r5, r3
   80da4:	b16c      	cbz	r4, 80dc2 <XMEGANVM_ReadMemory+0x6e>
   80da6:	4b0f      	ldr	r3, [pc, #60]	; (80de4 <XMEGANVM_ReadMemory+0x90>)
   80da8:	681b      	ldr	r3, [r3, #0]
   80daa:	2b00      	cmp	r3, #0
   80dac:	d1f3      	bne.n	80d96 <XMEGANVM_ReadMemory+0x42>
   80dae:	e008      	b.n	80dc2 <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80db0:	200c      	movs	r0, #12
   80db2:	4b08      	ldr	r3, [pc, #32]	; (80dd4 <XMEGANVM_ReadMemory+0x80>)
   80db4:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   80db6:	4628      	mov	r0, r5
   80db8:	4b08      	ldr	r3, [pc, #32]	; (80ddc <XMEGANVM_ReadMemory+0x88>)
   80dba:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80dbc:	4b08      	ldr	r3, [pc, #32]	; (80de0 <XMEGANVM_ReadMemory+0x8c>)
   80dbe:	4798      	blx	r3
   80dc0:	7030      	strb	r0, [r6, #0]
	return (TimeoutTicksRemaining > 0);
   80dc2:	4b08      	ldr	r3, [pc, #32]	; (80de4 <XMEGANVM_ReadMemory+0x90>)
   80dc4:	681b      	ldr	r3, [r3, #0]
   80dc6:	3b00      	subs	r3, #0
   80dc8:	bf18      	it	ne
   80dca:	2301      	movne	r3, #1
   80dcc:	e7ca      	b.n	80d64 <XMEGANVM_ReadMemory+0x10>
   80dce:	bf00      	nop
   80dd0:	00080c85 	.word	0x00080c85
   80dd4:	000814e9 	.word	0x000814e9
   80dd8:	00080c41 	.word	0x00080c41
   80ddc:	00080c21 	.word	0x00080c21
   80de0:	00081515 	.word	0x00081515
   80de4:	200010c0 	.word	0x200010c0

00080de8 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   80de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80dec:	4607      	mov	r7, r0
   80dee:	4688      	mov	r8, r1
   80df0:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80df2:	4b0b      	ldr	r3, [pc, #44]	; (80e20 <XMEGANVM_WriteByteMemory+0x38>)
   80df4:	4798      	blx	r3
   80df6:	4605      	mov	r5, r0
   80df8:	b910      	cbnz	r0, 80e00 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   80dfa:	4628      	mov	r0, r5
   80dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e00:	204c      	movs	r0, #76	; 0x4c
   80e02:	4c08      	ldr	r4, [pc, #32]	; (80e24 <XMEGANVM_WriteByteMemory+0x3c>)
   80e04:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80e06:	200a      	movs	r0, #10
   80e08:	4b07      	ldr	r3, [pc, #28]	; (80e28 <XMEGANVM_WriteByteMemory+0x40>)
   80e0a:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   80e0c:	4638      	mov	r0, r7
   80e0e:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e10:	204c      	movs	r0, #76	; 0x4c
   80e12:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   80e14:	4640      	mov	r0, r8
   80e16:	4b05      	ldr	r3, [pc, #20]	; (80e2c <XMEGANVM_WriteByteMemory+0x44>)
   80e18:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   80e1a:	4630      	mov	r0, r6
   80e1c:	47a0      	blx	r4
	return true;
   80e1e:	e7ec      	b.n	80dfa <XMEGANVM_WriteByteMemory+0x12>
   80e20:	00080c85 	.word	0x00080c85
   80e24:	000814e9 	.word	0x000814e9
   80e28:	00080c41 	.word	0x00080c41
   80e2c:	00080c21 	.word	0x00080c21

00080e30 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   80e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80e34:	4607      	mov	r7, r0
   80e36:	4690      	mov	r8, r2
   80e38:	461e      	mov	r6, r3
   80e3a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   80e3e:	f013 0f01 	tst.w	r3, #1
   80e42:	d107      	bne.n	80e54 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   80e44:	b9e4      	cbnz	r4, 80e80 <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   80e46:	f016 0f02 	tst.w	r6, #2
   80e4a:	d13e      	bne.n	80eca <XMEGANVM_WritePageMemory+0x9a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   80e4c:	2501      	movs	r5, #1
}
   80e4e:	4628      	mov	r0, r5
   80e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80e54:	4689      	mov	r9, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80e56:	4b27      	ldr	r3, [pc, #156]	; (80ef4 <XMEGANVM_WritePageMemory+0xc4>)
   80e58:	4798      	blx	r3
   80e5a:	4605      	mov	r5, r0
   80e5c:	2800      	cmp	r0, #0
   80e5e:	d0f6      	beq.n	80e4e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e60:	204c      	movs	r0, #76	; 0x4c
   80e62:	4d25      	ldr	r5, [pc, #148]	; (80ef8 <XMEGANVM_WritePageMemory+0xc8>)
   80e64:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80e66:	200a      	movs	r0, #10
   80e68:	f8df a090 	ldr.w	sl, [pc, #144]	; 80efc <XMEGANVM_WritePageMemory+0xcc>
   80e6c:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   80e6e:	4648      	mov	r0, r9
   80e70:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e72:	204c      	movs	r0, #76	; 0x4c
   80e74:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80e76:	200b      	movs	r0, #11
   80e78:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80e7a:	2001      	movs	r0, #1
   80e7c:	47a8      	blx	r5
   80e7e:	e7e1      	b.n	80e44 <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80e80:	4b1c      	ldr	r3, [pc, #112]	; (80ef4 <XMEGANVM_WritePageMemory+0xc4>)
   80e82:	4798      	blx	r3
   80e84:	4605      	mov	r5, r0
   80e86:	2800      	cmp	r0, #0
   80e88:	d0e1      	beq.n	80e4e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e8a:	204c      	movs	r0, #76	; 0x4c
   80e8c:	4d1a      	ldr	r5, [pc, #104]	; (80ef8 <XMEGANVM_WritePageMemory+0xc8>)
   80e8e:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80e90:	200a      	movs	r0, #10
   80e92:	4b1a      	ldr	r3, [pc, #104]	; (80efc <XMEGANVM_WritePageMemory+0xcc>)
   80e94:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   80e96:	4638      	mov	r0, r7
   80e98:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80e9a:	206b      	movs	r0, #107	; 0x6b
   80e9c:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   80e9e:	9808      	ldr	r0, [sp, #32]
   80ea0:	4b17      	ldr	r3, [pc, #92]	; (80f00 <XMEGANVM_WritePageMemory+0xd0>)
   80ea2:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80ea4:	20a0      	movs	r0, #160	; 0xa0
   80ea6:	47a8      	blx	r5
		XPROGTarget_SendByte(WriteSize - 1);
   80ea8:	1e60      	subs	r0, r4, #1
   80eaa:	b2c0      	uxtb	r0, r0
   80eac:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80eae:	2064      	movs	r0, #100	; 0x64
   80eb0:	47a8      	blx	r5
		while (WriteSize--)
   80eb2:	1e61      	subs	r1, r4, #1
   80eb4:	b28d      	uxth	r5, r1
   80eb6:	2c00      	cmp	r4, #0
   80eb8:	d0c5      	beq.n	80e46 <XMEGANVM_WritePageMemory+0x16>
		  XPROGTarget_SendByte(*(WriteBuffer++));
   80eba:	9f09      	ldr	r7, [sp, #36]	; 0x24
   80ebc:	f817 0b01 	ldrb.w	r0, [r7], #1
   80ec0:	4b0d      	ldr	r3, [pc, #52]	; (80ef8 <XMEGANVM_WritePageMemory+0xc8>)
   80ec2:	4798      	blx	r3
		while (WriteSize--)
   80ec4:	462c      	mov	r4, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   80ec6:	9709      	str	r7, [sp, #36]	; 0x24
   80ec8:	e7f3      	b.n	80eb2 <XMEGANVM_WritePageMemory+0x82>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80eca:	4b0a      	ldr	r3, [pc, #40]	; (80ef4 <XMEGANVM_WritePageMemory+0xc4>)
   80ecc:	4798      	blx	r3
   80ece:	4605      	mov	r5, r0
   80ed0:	2800      	cmp	r0, #0
   80ed2:	d0bc      	beq.n	80e4e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ed4:	204c      	movs	r0, #76	; 0x4c
   80ed6:	4c08      	ldr	r4, [pc, #32]	; (80ef8 <XMEGANVM_WritePageMemory+0xc8>)
   80ed8:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80eda:	200a      	movs	r0, #10
   80edc:	4b07      	ldr	r3, [pc, #28]	; (80efc <XMEGANVM_WritePageMemory+0xcc>)
   80ede:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   80ee0:	4640      	mov	r0, r8
   80ee2:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ee4:	204c      	movs	r0, #76	; 0x4c
   80ee6:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   80ee8:	9808      	ldr	r0, [sp, #32]
   80eea:	4b05      	ldr	r3, [pc, #20]	; (80f00 <XMEGANVM_WritePageMemory+0xd0>)
   80eec:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   80eee:	2000      	movs	r0, #0
   80ef0:	47a0      	blx	r4
   80ef2:	e7ac      	b.n	80e4e <XMEGANVM_WritePageMemory+0x1e>
   80ef4:	00080c85 	.word	0x00080c85
   80ef8:	000814e9 	.word	0x000814e9
   80efc:	00080c41 	.word	0x00080c41
   80f00:	00080c21 	.word	0x00080c21

00080f04 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   80f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80f06:	4604      	mov	r4, r0
   80f08:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80f0a:	4b36      	ldr	r3, [pc, #216]	; (80fe4 <XMEGANVM_EraseMemory+0xe0>)
   80f0c:	4798      	blx	r3
   80f0e:	4603      	mov	r3, r0
   80f10:	b1a8      	cbz	r0, 80f3e <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   80f12:	2c40      	cmp	r4, #64	; 0x40
   80f14:	d015      	beq.n	80f42 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   80f16:	2c30      	cmp	r4, #48	; 0x30
   80f18:	d022      	beq.n	80f60 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f1a:	204c      	movs	r0, #76	; 0x4c
   80f1c:	4e32      	ldr	r6, [pc, #200]	; (80fe8 <XMEGANVM_EraseMemory+0xe4>)
   80f1e:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f20:	200a      	movs	r0, #10
   80f22:	4b32      	ldr	r3, [pc, #200]	; (80fec <XMEGANVM_EraseMemory+0xe8>)
   80f24:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   80f26:	4620      	mov	r0, r4
   80f28:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f2a:	204c      	movs	r0, #76	; 0x4c
   80f2c:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   80f2e:	4628      	mov	r0, r5
   80f30:	4b2f      	ldr	r3, [pc, #188]	; (80ff0 <XMEGANVM_EraseMemory+0xec>)
   80f32:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   80f34:	2000      	movs	r0, #0
   80f36:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   80f38:	4b2e      	ldr	r3, [pc, #184]	; (80ff4 <XMEGANVM_EraseMemory+0xf0>)
   80f3a:	4798      	blx	r3
   80f3c:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   80f3e:	4618      	mov	r0, r3
   80f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f42:	204c      	movs	r0, #76	; 0x4c
   80f44:	4d28      	ldr	r5, [pc, #160]	; (80fe8 <XMEGANVM_EraseMemory+0xe4>)
   80f46:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f48:	200a      	movs	r0, #10
   80f4a:	4e28      	ldr	r6, [pc, #160]	; (80fec <XMEGANVM_EraseMemory+0xe8>)
   80f4c:	47b0      	blx	r6
		XPROGTarget_SendByte(EraseCommand);
   80f4e:	4620      	mov	r0, r4
   80f50:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f52:	204c      	movs	r0, #76	; 0x4c
   80f54:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80f56:	200b      	movs	r0, #11
   80f58:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80f5a:	2001      	movs	r0, #1
   80f5c:	47a8      	blx	r5
   80f5e:	e7eb      	b.n	80f38 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f60:	204c      	movs	r0, #76	; 0x4c
   80f62:	4e21      	ldr	r6, [pc, #132]	; (80fe8 <XMEGANVM_EraseMemory+0xe4>)
   80f64:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f66:	200a      	movs	r0, #10
   80f68:	4f20      	ldr	r7, [pc, #128]	; (80fec <XMEGANVM_EraseMemory+0xe8>)
   80f6a:	47b8      	blx	r7
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   80f6c:	2036      	movs	r0, #54	; 0x36
   80f6e:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f70:	204c      	movs	r0, #76	; 0x4c
   80f72:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80f74:	200b      	movs	r0, #11
   80f76:	47b8      	blx	r7
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80f78:	2001      	movs	r0, #1
   80f7a:	47b0      	blx	r6
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80f7c:	4b19      	ldr	r3, [pc, #100]	; (80fe4 <XMEGANVM_EraseMemory+0xe0>)
   80f7e:	4798      	blx	r3
   80f80:	4603      	mov	r3, r0
   80f82:	2800      	cmp	r0, #0
   80f84:	d0db      	beq.n	80f3e <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f86:	204c      	movs	r0, #76	; 0x4c
   80f88:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80f8a:	200a      	movs	r0, #10
   80f8c:	47b8      	blx	r7
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   80f8e:	2033      	movs	r0, #51	; 0x33
   80f90:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80f92:	206b      	movs	r0, #107	; 0x6b
   80f94:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   80f96:	4628      	mov	r0, r5
   80f98:	4b15      	ldr	r3, [pc, #84]	; (80ff0 <XMEGANVM_EraseMemory+0xec>)
   80f9a:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80f9c:	20a0      	movs	r0, #160	; 0xa0
   80f9e:	47b0      	blx	r6
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   80fa0:	4b15      	ldr	r3, [pc, #84]	; (80ff8 <XMEGANVM_EraseMemory+0xf4>)
   80fa2:	7818      	ldrb	r0, [r3, #0]
   80fa4:	3801      	subs	r0, #1
   80fa6:	b2c0      	uxtb	r0, r0
   80fa8:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80faa:	2064      	movs	r0, #100	; 0x64
   80fac:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80fae:	2500      	movs	r5, #0
   80fb0:	e004      	b.n	80fbc <XMEGANVM_EraseMemory+0xb8>
		  XPROGTarget_SendByte(0x00);
   80fb2:	2000      	movs	r0, #0
   80fb4:	4b0c      	ldr	r3, [pc, #48]	; (80fe8 <XMEGANVM_EraseMemory+0xe4>)
   80fb6:	4798      	blx	r3
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80fb8:	3501      	adds	r5, #1
   80fba:	b2ed      	uxtb	r5, r5
   80fbc:	b2ab      	uxth	r3, r5
   80fbe:	4a0e      	ldr	r2, [pc, #56]	; (80ff8 <XMEGANVM_EraseMemory+0xf4>)
   80fc0:	8812      	ldrh	r2, [r2, #0]
   80fc2:	4293      	cmp	r3, r2
   80fc4:	d3f5      	bcc.n	80fb2 <XMEGANVM_EraseMemory+0xae>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80fc6:	204c      	movs	r0, #76	; 0x4c
   80fc8:	4d07      	ldr	r5, [pc, #28]	; (80fe8 <XMEGANVM_EraseMemory+0xe4>)
   80fca:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80fcc:	200a      	movs	r0, #10
   80fce:	4e07      	ldr	r6, [pc, #28]	; (80fec <XMEGANVM_EraseMemory+0xe8>)
   80fd0:	47b0      	blx	r6
		XPROGTarget_SendByte(EraseCommand);
   80fd2:	4620      	mov	r0, r4
   80fd4:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80fd6:	204c      	movs	r0, #76	; 0x4c
   80fd8:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80fda:	200b      	movs	r0, #11
   80fdc:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80fde:	2001      	movs	r0, #1
   80fe0:	47a8      	blx	r5
   80fe2:	e7a9      	b.n	80f38 <XMEGANVM_EraseMemory+0x34>
   80fe4:	00080c85 	.word	0x00080c85
   80fe8:	000814e9 	.word	0x000814e9
   80fec:	00080c41 	.word	0x00080c41
   80ff0:	00080c21 	.word	0x00080c21
   80ff4:	00080c59 	.word	0x00080c59
   80ff8:	200001ec 	.word	0x200001ec

00080ffc <XPROGProtocol_EnterXPROGMode>:
	
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
   80ffc:	b508      	push	{r3, lr}
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   80ffe:	4b03      	ldr	r3, [pc, #12]	; (8100c <XPROGProtocol_EnterXPROGMode+0x10>)
   81000:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   81002:	f080 0001 	eor.w	r0, r0, #1
   81006:	4b02      	ldr	r3, [pc, #8]	; (81010 <XPROGProtocol_EnterXPROGMode+0x14>)
   81008:	7018      	strb	r0, [r3, #0]
}
   8100a:	bd08      	pop	{r3, pc}
   8100c:	00080cc1 	.word	0x00080cc1
   81010:	200010bc 	.word	0x200010bc

00081014 <XPROGProtocol_LeaveXPROGMode>:

/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
   81014:	b508      	push	{r3, lr}
    XMEGANVM_DisablePDI();
   81016:	4b03      	ldr	r3, [pc, #12]	; (81024 <XPROGProtocol_LeaveXPROGMode+0x10>)
   81018:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   8101a:	4b03      	ldr	r3, [pc, #12]	; (81028 <XPROGProtocol_LeaveXPROGMode+0x14>)
   8101c:	2200      	movs	r2, #0
   8101e:	701a      	strb	r2, [r3, #0]
}
   81020:	bd08      	pop	{r3, pc}
   81022:	bf00      	nop
   81024:	00080d19 	.word	0x00080d19
   81028:	200010bc 	.word	0x200010bc

0008102c <XPROGProtocol_Erase>:

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
   8102c:	b508      	push	{r3, lr}
	XPROG_Status = XPROG_ERR_OK;
   8102e:	4b1d      	ldr	r3, [pc, #116]	; (810a4 <XPROGProtocol_Erase+0x78>)
   81030:	2200      	movs	r2, #0
   81032:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   81034:	4b1c      	ldr	r3, [pc, #112]	; (810a8 <XPROGProtocol_Erase+0x7c>)
   81036:	899b      	ldrh	r3, [r3, #12]
   81038:	2b04      	cmp	r3, #4
   8103a:	d915      	bls.n	81068 <XPROGProtocol_Erase+0x3c>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   8103c:	4b1a      	ldr	r3, [pc, #104]	; (810a8 <XPROGProtocol_Erase+0x7c>)
   8103e:	689b      	ldr	r3, [r3, #8]
   81040:	781a      	ldrb	r2, [r3, #0]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   81042:	7918      	ldrb	r0, [r3, #4]
   81044:	78d9      	ldrb	r1, [r3, #3]
   81046:	0409      	lsls	r1, r1, #16
   81048:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
   8104c:	7898      	ldrb	r0, [r3, #2]
   8104e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   81052:	785b      	ldrb	r3, [r3, #1]
   81054:	4319      	orrs	r1, r3

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   81056:	1e53      	subs	r3, r2, #1
   81058:	2b07      	cmp	r3, #7
   8105a:	d81e      	bhi.n	8109a <XPROGProtocol_Erase+0x6e>
   8105c:	e8df f003 	tbb	[pc, r3]
   81060:	13111f08 	.word	0x13111f08
   81064:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   81068:	4b0e      	ldr	r3, [pc, #56]	; (810a4 <XPROGProtocol_Erase+0x78>)
   8106a:	2201      	movs	r2, #1
   8106c:	701a      	strb	r2, [r3, #0]

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
		XPROG_Status = XPROG_ERR_TIMEOUT;		
	}
}
   8106e:	bd08      	pop	{r3, pc}
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   81070:	2040      	movs	r0, #64	; 0x40
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   81072:	4b0e      	ldr	r3, [pc, #56]	; (810ac <XPROGProtocol_Erase+0x80>)
   81074:	4798      	blx	r3
   81076:	2800      	cmp	r0, #0
   81078:	d1f9      	bne.n	8106e <XPROGProtocol_Erase+0x42>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   8107a:	4b0a      	ldr	r3, [pc, #40]	; (810a4 <XPROGProtocol_Erase+0x78>)
   8107c:	2203      	movs	r2, #3
   8107e:	701a      	strb	r2, [r3, #0]
   81080:	e7f5      	b.n	8106e <XPROGProtocol_Erase+0x42>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   81082:	2068      	movs	r0, #104	; 0x68
		break;
   81084:	e7f5      	b.n	81072 <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   81086:	2030      	movs	r0, #48	; 0x30
		break;
   81088:	e7f3      	b.n	81072 <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   8108a:	2022      	movs	r0, #34	; 0x22
		break;
   8108c:	e7f1      	b.n	81072 <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   8108e:	202a      	movs	r0, #42	; 0x2a
		break;
   81090:	e7ef      	b.n	81072 <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   81092:	2032      	movs	r0, #50	; 0x32
		break;
   81094:	e7ed      	b.n	81072 <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   81096:	2018      	movs	r0, #24
		break;
   81098:	e7eb      	b.n	81072 <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   8109a:	2000      	movs	r0, #0
		break;
   8109c:	e7e9      	b.n	81072 <XPROGProtocol_Erase+0x46>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   8109e:	2020      	movs	r0, #32
   810a0:	e7e7      	b.n	81072 <XPROGProtocol_Erase+0x46>
   810a2:	bf00      	nop
   810a4:	200010bc 	.word	0x200010bc
   810a8:	20001958 	.word	0x20001958
   810ac:	00080f05 	.word	0x00080f05

000810b0 <XPROGProtocol_WriteMemory>:

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
   810b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810b4:	b084      	sub	sp, #16
   810b6:	4605      	mov	r5, r0
	XPROG_Status = XPROG_ERR_OK;
   810b8:	4b35      	ldr	r3, [pc, #212]	; (81190 <XPROGProtocol_WriteMemory+0xe0>)
   810ba:	2200      	movs	r2, #0
   810bc:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   810be:	4b35      	ldr	r3, [pc, #212]	; (81194 <XPROGProtocol_WriteMemory+0xe4>)
   810c0:	88db      	ldrh	r3, [r3, #6]
   810c2:	2b07      	cmp	r3, #7
   810c4:	d802      	bhi.n	810cc <XPROGProtocol_WriteMemory+0x1c>
		XPROG_Status = XPROG_ERR_FAILED;
   810c6:	4b32      	ldr	r3, [pc, #200]	; (81190 <XPROGProtocol_WriteMemory+0xe0>)
   810c8:	2201      	movs	r2, #1
   810ca:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   810cc:	4b31      	ldr	r3, [pc, #196]	; (81194 <XPROGProtocol_WriteMemory+0xe4>)
   810ce:	689a      	ldr	r2, [r3, #8]
   810d0:	7810      	ldrb	r0, [r2, #0]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
   810d2:	7853      	ldrb	r3, [r2, #1]
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   810d4:	7954      	ldrb	r4, [r2, #5]
   810d6:	7911      	ldrb	r1, [r2, #4]
   810d8:	0409      	lsls	r1, r1, #16
   810da:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   810de:	78d4      	ldrb	r4, [r2, #3]
   810e0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   810e4:	7894      	ldrb	r4, [r2, #2]
   810e6:	430c      	orrs	r4, r1
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   810e8:	7996      	ldrb	r6, [r2, #6]
   810ea:	79d2      	ldrb	r2, [r2, #7]
   810ec:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
	
	if (Length > XMEGA_BUF_SIZE) {
   810f0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   810f4:	d901      	bls.n	810fa <XPROGProtocol_WriteMemory+0x4a>
		Length = XMEGA_BUF_SIZE;
   810f6:	f44f 7680 	mov.w	r6, #256	; 0x100
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   810fa:	1e42      	subs	r2, r0, #1
   810fc:	2a05      	cmp	r2, #5
   810fe:	d804      	bhi.n	8110a <XPROGProtocol_WriteMemory+0x5a>
   81100:	e8df f002 	tbb	[pc, r2]
   81104:	1b0f0927 	.word	0x1b0f0927
   81108:	1521      	.short	0x1521
		break;
		case XPROG_MEM_TYPE_USERSIG:
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
		break;
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   8110a:	2701      	movs	r7, #1
   8110c:	2126      	movs	r1, #38	; 0x26
   8110e:	2023      	movs	r0, #35	; 0x23
   81110:	f04f 082e 	mov.w	r8, #46	; 0x2e
   81114:	e022      	b.n	8115c <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   81116:	2701      	movs	r7, #1
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81118:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8111a:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   8111c:	f04f 082c 	mov.w	r8, #44	; 0x2c
		break;
   81120:	e01c      	b.n	8115c <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   81122:	2701      	movs	r7, #1
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   81124:	2136      	movs	r1, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   81126:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   81128:	f04f 0835 	mov.w	r8, #53	; 0x35
		break;
   8112c:	e016      	b.n	8115c <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   8112e:	2701      	movs	r7, #1
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81130:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   81132:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   81134:	f04f 081a 	mov.w	r8, #26
		break;
   81138:	e010      	b.n	8115c <XPROGProtocol_WriteMemory+0xac>
		PagedMemory      = false;
   8113a:	2700      	movs	r7, #0
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   8113c:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8113e:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   81140:	f04f 084c 	mov.w	r8, #76	; 0x4c
		break;
   81144:	e00a      	b.n	8115c <XPROGProtocol_WriteMemory+0xac>
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
		PagedMemory      = false;
   81146:	2700      	movs	r7, #0
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81148:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8114a:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   8114c:	f04f 0808 	mov.w	r8, #8
		break;
   81150:	e004      	b.n	8115c <XPROGProtocol_WriteMemory+0xac>
	bool    PagedMemory      = true;
   81152:	2701      	movs	r7, #1
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   81154:	2126      	movs	r1, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   81156:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   81158:	f04f 0824 	mov.w	r8, #36	; 0x24
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   8115c:	b91f      	cbnz	r7, 81166 <XPROGProtocol_WriteMemory+0xb6>
												   PageMode, Address,outbuf, Length)))          ||
   8115e:	b177      	cbz	r7, 8117e <XPROGProtocol_WriteMemory+0xce>
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
	}

}
   81160:	b004      	add	sp, #16
   81162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   81166:	9602      	str	r6, [sp, #8]
   81168:	9501      	str	r5, [sp, #4]
   8116a:	9400      	str	r4, [sp, #0]
   8116c:	4642      	mov	r2, r8
   8116e:	4e0a      	ldr	r6, [pc, #40]	; (81198 <XPROGProtocol_WriteMemory+0xe8>)
   81170:	47b0      	blx	r6
   81172:	2800      	cmp	r0, #0
   81174:	d1f3      	bne.n	8115e <XPROGProtocol_WriteMemory+0xae>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   81176:	4b06      	ldr	r3, [pc, #24]	; (81190 <XPROGProtocol_WriteMemory+0xe0>)
   81178:	2203      	movs	r2, #3
   8117a:	701a      	strb	r2, [r3, #0]
}
   8117c:	e7f0      	b.n	81160 <XPROGProtocol_WriteMemory+0xb0>
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   8117e:	782a      	ldrb	r2, [r5, #0]
   81180:	4621      	mov	r1, r4
   81182:	4640      	mov	r0, r8
   81184:	4b05      	ldr	r3, [pc, #20]	; (8119c <XPROGProtocol_WriteMemory+0xec>)
   81186:	4798      	blx	r3
   81188:	2800      	cmp	r0, #0
   8118a:	d1e9      	bne.n	81160 <XPROGProtocol_WriteMemory+0xb0>
   8118c:	e7f3      	b.n	81176 <XPROGProtocol_WriteMemory+0xc6>
   8118e:	bf00      	nop
   81190:	200010bc 	.word	0x200010bc
   81194:	20001958 	.word	0x20001958
   81198:	00080e31 	.word	0x00080e31
   8119c:	00080de9 	.word	0x00080de9

000811a0 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
   811a0:	b510      	push	{r4, lr}
   811a2:	4601      	mov	r1, r0
	XPROG_Status = XPROG_ERR_OK;
   811a4:	4b0f      	ldr	r3, [pc, #60]	; (811e4 <XPROGProtocol_ReadMemory+0x44>)
   811a6:	2200      	movs	r2, #0
   811a8:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   811aa:	4b0f      	ldr	r3, [pc, #60]	; (811e8 <XPROGProtocol_ReadMemory+0x48>)
   811ac:	689c      	ldr	r4, [r3, #8]
   811ae:	7920      	ldrb	r0, [r4, #4]
   811b0:	78e3      	ldrb	r3, [r4, #3]
   811b2:	041b      	lsls	r3, r3, #16
   811b4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   811b8:	78a0      	ldrb	r0, [r4, #2]
   811ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   811be:	7860      	ldrb	r0, [r4, #1]
   811c0:	4318      	orrs	r0, r3
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   811c2:	7962      	ldrb	r2, [r4, #5]
   811c4:	79a3      	ldrb	r3, [r4, #6]
   811c6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	
	if (Length > XMEGA_BUF_SIZE) {
   811ca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   811ce:	d901      	bls.n	811d4 <XPROGProtocol_ReadMemory+0x34>
		Length = XMEGA_BUF_SIZE;
   811d0:	f44f 7280 	mov.w	r2, #256	; 0x100
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   811d4:	4b05      	ldr	r3, [pc, #20]	; (811ec <XPROGProtocol_ReadMemory+0x4c>)
   811d6:	4798      	blx	r3
   811d8:	b910      	cbnz	r0, 811e0 <XPROGProtocol_ReadMemory+0x40>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   811da:	4b02      	ldr	r3, [pc, #8]	; (811e4 <XPROGProtocol_ReadMemory+0x44>)
   811dc:	2203      	movs	r2, #3
   811de:	701a      	strb	r2, [r3, #0]
	}
}
   811e0:	bd10      	pop	{r4, pc}
   811e2:	bf00      	nop
   811e4:	200010bc 	.word	0x200010bc
   811e8:	20001958 	.word	0x20001958
   811ec:	00080d55 	.word	0x00080d55

000811f0 <XPROGProtocol_SetParam>:


static void XPROGProtocol_SetParam(void)
{
   811f0:	b508      	push	{r3, lr}
	XPROG_Status = XPROG_ERR_OK;
   811f2:	4b2a      	ldr	r3, [pc, #168]	; (8129c <XPROGProtocol_SetParam+0xac>)
   811f4:	2200      	movs	r2, #0
   811f6:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   811f8:	4a29      	ldr	r2, [pc, #164]	; (812a0 <XPROGProtocol_SetParam+0xb0>)
   811fa:	6891      	ldr	r1, [r2, #8]
   811fc:	780b      	ldrb	r3, [r1, #0]
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   811fe:	8992      	ldrh	r2, [r2, #12]
   81200:	2a01      	cmp	r2, #1
   81202:	d908      	bls.n	81216 <XPROGProtocol_SetParam+0x26>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   81204:	3b01      	subs	r3, #1
   81206:	2b07      	cmp	r3, #7
   81208:	d844      	bhi.n	81294 <XPROGProtocol_SetParam+0xa4>
   8120a:	e8df f003 	tbb	[pc, r3]
   8120e:	1b08      	.short	0x1b08
   81210:	43432c28 	.word	0x43432c28
   81214:	3043      	.short	0x3043
		XPROG_Status = XPROG_ERR_FAILED;
   81216:	4b21      	ldr	r3, [pc, #132]	; (8129c <XPROGProtocol_SetParam+0xac>)
   81218:	2201      	movs	r2, #1
   8121a:	701a      	strb	r2, [r3, #0]
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
			break;
	}
   8121c:	bd08      	pop	{r3, pc}
			if (udd_g_ctrlreq.payload_size < 5){
   8121e:	2a04      	cmp	r2, #4
   81220:	d90c      	bls.n	8123c <XPROGProtocol_SetParam+0x4c>
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   81222:	790a      	ldrb	r2, [r1, #4]
   81224:	78cb      	ldrb	r3, [r1, #3]
   81226:	041b      	lsls	r3, r3, #16
   81228:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   8122c:	788a      	ldrb	r2, [r1, #2]
   8122e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   81232:	784a      	ldrb	r2, [r1, #1]
   81234:	4313      	orrs	r3, r2
   81236:	4a1b      	ldr	r2, [pc, #108]	; (812a4 <XPROGProtocol_SetParam+0xb4>)
   81238:	6013      	str	r3, [r2, #0]
			break;
   8123a:	e7ef      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
				XPROG_Status = XPROG_ERR_FAILED;
   8123c:	4b17      	ldr	r3, [pc, #92]	; (8129c <XPROGProtocol_SetParam+0xac>)
   8123e:	2201      	movs	r2, #1
   81240:	701a      	strb	r2, [r3, #0]
				return;
   81242:	e7eb      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
			if (udd_g_ctrlreq.payload_size < 3){
   81244:	2a02      	cmp	r2, #2
   81246:	d906      	bls.n	81256 <XPROGProtocol_SetParam+0x66>
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   81248:	784b      	ldrb	r3, [r1, #1]
   8124a:	788a      	ldrb	r2, [r1, #2]
   8124c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   81250:	4a15      	ldr	r2, [pc, #84]	; (812a8 <XPROGProtocol_SetParam+0xb8>)
   81252:	8013      	strh	r3, [r2, #0]
			break;
   81254:	e7e2      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
				XPROG_Status = XPROG_ERR_FAILED;
   81256:	4b11      	ldr	r3, [pc, #68]	; (8129c <XPROGProtocol_SetParam+0xac>)
   81258:	2201      	movs	r2, #1
   8125a:	701a      	strb	r2, [r3, #0]
				return;
   8125c:	e7de      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   8125e:	784a      	ldrb	r2, [r1, #1]
   81260:	4b12      	ldr	r3, [pc, #72]	; (812ac <XPROGProtocol_SetParam+0xbc>)
   81262:	701a      	strb	r2, [r3, #0]
			break;
   81264:	e7da      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   81266:	784a      	ldrb	r2, [r1, #1]
   81268:	4b11      	ldr	r3, [pc, #68]	; (812b0 <XPROGProtocol_SetParam+0xc0>)
   8126a:	701a      	strb	r2, [r3, #0]
			break;
   8126c:	e7d6      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
			if (udd_g_ctrlreq.payload_size < 5){
   8126e:	2a04      	cmp	r2, #4
   81270:	d803      	bhi.n	8127a <XPROGProtocol_SetParam+0x8a>
				XPROG_Status = XPROG_ERR_FAILED;
   81272:	4b0a      	ldr	r3, [pc, #40]	; (8129c <XPROGProtocol_SetParam+0xac>)
   81274:	2201      	movs	r2, #1
   81276:	701a      	strb	r2, [r3, #0]
				return;
   81278:	e7d0      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   8127a:	7908      	ldrb	r0, [r1, #4]
   8127c:	78cb      	ldrb	r3, [r1, #3]
   8127e:	041b      	lsls	r3, r3, #16
   81280:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   81284:	7888      	ldrb	r0, [r1, #2]
   81286:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   8128a:	7848      	ldrb	r0, [r1, #1]
   8128c:	4318      	orrs	r0, r3
   8128e:	4b09      	ldr	r3, [pc, #36]	; (812b4 <XPROGProtocol_SetParam+0xc4>)
   81290:	4798      	blx	r3
			break;
   81292:	e7c3      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
			XPROG_Status = XPROG_ERR_FAILED;
   81294:	4b01      	ldr	r3, [pc, #4]	; (8129c <XPROGProtocol_SetParam+0xac>)
   81296:	2201      	movs	r2, #1
   81298:	701a      	strb	r2, [r3, #0]
			break;
   8129a:	e7bf      	b.n	8121c <XPROGProtocol_SetParam+0x2c>
   8129c:	200010bc 	.word	0x200010bc
   812a0:	20001958 	.word	0x20001958
   812a4:	200001f0 	.word	0x200001f0
   812a8:	200001ec 	.word	0x200001ec
   812ac:	200001f4 	.word	0x200001f4
   812b0:	200001f5 	.word	0x200001f5
   812b4:	0008164d 	.word	0x0008164d

000812b8 <XPROGProtocol_Command>:
{
   812b8:	b508      	push	{r3, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   812ba:	4b39      	ldr	r3, [pc, #228]	; (813a0 <XPROGProtocol_Command+0xe8>)
   812bc:	8859      	ldrh	r1, [r3, #2]
   812be:	b2cb      	uxtb	r3, r1
   812c0:	4a38      	ldr	r2, [pc, #224]	; (813a4 <XPROGProtocol_Command+0xec>)
   812c2:	7013      	strb	r3, [r2, #0]
	switch (status_payload[0])
   812c4:	3b01      	subs	r3, #1
   812c6:	2b21      	cmp	r3, #33	; 0x21
   812c8:	d816      	bhi.n	812f8 <XPROGProtocol_Command+0x40>
   812ca:	e8df f003 	tbb	[pc, r3]
   812ce:	1911      	.short	0x1911
   812d0:	2f29231e 	.word	0x2f29231e
   812d4:	15151532 	.word	0x15151532
   812d8:	15151515 	.word	0x15151515
   812dc:	15151515 	.word	0x15151515
   812e0:	15151515 	.word	0x15151515
   812e4:	15151515 	.word	0x15151515
   812e8:	15151515 	.word	0x15151515
   812ec:	46375715 	.word	0x46375715
			start_timeoutcnt();
   812f0:	4b2d      	ldr	r3, [pc, #180]	; (813a8 <XPROGProtocol_Command+0xf0>)
   812f2:	4798      	blx	r3
			XPROGProtocol_EnterXPROGMode();
   812f4:	4b2d      	ldr	r3, [pc, #180]	; (813ac <XPROGProtocol_Command+0xf4>)
   812f6:	4798      	blx	r3
	stop_timeoutcnt();
   812f8:	4b2d      	ldr	r3, [pc, #180]	; (813b0 <XPROGProtocol_Command+0xf8>)
   812fa:	4798      	blx	r3
	return false;
   812fc:	2000      	movs	r0, #0
}
   812fe:	bd08      	pop	{r3, pc}
			start_timeoutcnt();
   81300:	4b29      	ldr	r3, [pc, #164]	; (813a8 <XPROGProtocol_Command+0xf0>)
   81302:	4798      	blx	r3
			XPROGProtocol_LeaveXPROGMode();
   81304:	4b2b      	ldr	r3, [pc, #172]	; (813b4 <XPROGProtocol_Command+0xfc>)
   81306:	4798      	blx	r3
			break;
   81308:	e7f6      	b.n	812f8 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   8130a:	4b27      	ldr	r3, [pc, #156]	; (813a8 <XPROGProtocol_Command+0xf0>)
   8130c:	4798      	blx	r3
			XPROGProtocol_Erase();
   8130e:	4b2a      	ldr	r3, [pc, #168]	; (813b8 <XPROGProtocol_Command+0x100>)
   81310:	4798      	blx	r3
			break;
   81312:	e7f1      	b.n	812f8 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   81314:	4b24      	ldr	r3, [pc, #144]	; (813a8 <XPROGProtocol_Command+0xf0>)
   81316:	4798      	blx	r3
			XPROGProtocol_WriteMemory(xprog_rambuf);
   81318:	4828      	ldr	r0, [pc, #160]	; (813bc <XPROGProtocol_Command+0x104>)
   8131a:	4b29      	ldr	r3, [pc, #164]	; (813c0 <XPROGProtocol_Command+0x108>)
   8131c:	4798      	blx	r3
			break;
   8131e:	e7eb      	b.n	812f8 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   81320:	4b21      	ldr	r3, [pc, #132]	; (813a8 <XPROGProtocol_Command+0xf0>)
   81322:	4798      	blx	r3
			XPROGProtocol_ReadMemory(xprog_rambuf);
   81324:	4825      	ldr	r0, [pc, #148]	; (813bc <XPROGProtocol_Command+0x104>)
   81326:	4b27      	ldr	r3, [pc, #156]	; (813c4 <XPROGProtocol_Command+0x10c>)
   81328:	4798      	blx	r3
			break;
   8132a:	e7e5      	b.n	812f8 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   8132c:	4b1e      	ldr	r3, [pc, #120]	; (813a8 <XPROGProtocol_Command+0xf0>)
   8132e:	4798      	blx	r3
			break;
   81330:	e7e2      	b.n	812f8 <XPROGProtocol_Command+0x40>
			start_timeoutcnt();
   81332:	4b1d      	ldr	r3, [pc, #116]	; (813a8 <XPROGProtocol_Command+0xf0>)
   81334:	4798      	blx	r3
			XPROGProtocol_SetParam();
   81336:	4b24      	ldr	r3, [pc, #144]	; (813c8 <XPROGProtocol_Command+0x110>)
   81338:	4798      	blx	r3
			break;
   8133a:	e7dd      	b.n	812f8 <XPROGProtocol_Command+0x40>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8133c:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8133e:	4b18      	ldr	r3, [pc, #96]	; (813a0 <XPROGProtocol_Command+0xe8>)
   81340:	88db      	ldrh	r3, [r3, #6]
   81342:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   81346:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8134a:	dc27      	bgt.n	8139c <XPROGProtocol_Command+0xe4>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   8134c:	4a1b      	ldr	r2, [pc, #108]	; (813bc <XPROGProtocol_Command+0x104>)
   8134e:	4402      	add	r2, r0
   81350:	4913      	ldr	r1, [pc, #76]	; (813a0 <XPROGProtocol_Command+0xe8>)
   81352:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81354:	818b      	strh	r3, [r1, #12]
			return true;
   81356:	2001      	movs	r0, #1
   81358:	e7d1      	b.n	812fe <XPROGProtocol_Command+0x46>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8135a:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8135c:	4b10      	ldr	r3, [pc, #64]	; (813a0 <XPROGProtocol_Command+0xe8>)
   8135e:	88da      	ldrh	r2, [r3, #6]
   81360:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   81364:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81368:	dd01      	ble.n	8136e <XPROGProtocol_Command+0xb6>
				return false;
   8136a:	2000      	movs	r0, #0
   8136c:	e7c7      	b.n	812fe <XPROGProtocol_Command+0x46>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8136e:	6899      	ldr	r1, [r3, #8]
   81370:	4b12      	ldr	r3, [pc, #72]	; (813bc <XPROGProtocol_Command+0x104>)
   81372:	4418      	add	r0, r3
   81374:	4b15      	ldr	r3, [pc, #84]	; (813cc <XPROGProtocol_Command+0x114>)
   81376:	4798      	blx	r3
			return true;
   81378:	2001      	movs	r0, #1
   8137a:	e7c0      	b.n	812fe <XPROGProtocol_Command+0x46>
			status_payload[1] = XPROG_Status;
   8137c:	4a09      	ldr	r2, [pc, #36]	; (813a4 <XPROGProtocol_Command+0xec>)
   8137e:	4b14      	ldr	r3, [pc, #80]	; (813d0 <XPROGProtocol_Command+0x118>)
   81380:	781b      	ldrb	r3, [r3, #0]
   81382:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   81384:	4b13      	ldr	r3, [pc, #76]	; (813d4 <XPROGProtocol_Command+0x11c>)
   81386:	681b      	ldr	r3, [r3, #0]
   81388:	fab3 f383 	clz	r3, r3
   8138c:	095b      	lsrs	r3, r3, #5
   8138e:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   81390:	4b03      	ldr	r3, [pc, #12]	; (813a0 <XPROGProtocol_Command+0xe8>)
   81392:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   81394:	2203      	movs	r2, #3
   81396:	819a      	strh	r2, [r3, #12]
			return true;
   81398:	2001      	movs	r0, #1
   8139a:	e7b0      	b.n	812fe <XPROGProtocol_Command+0x46>
				return false;
   8139c:	2000      	movs	r0, #0
   8139e:	e7ae      	b.n	812fe <XPROGProtocol_Command+0x46>
   813a0:	20001958 	.word	0x20001958
   813a4:	20000d98 	.word	0x20000d98
   813a8:	000816bd 	.word	0x000816bd
   813ac:	00080ffd 	.word	0x00080ffd
   813b0:	00081705 	.word	0x00081705
   813b4:	00081015 	.word	0x00081015
   813b8:	0008102d 	.word	0x0008102d
   813bc:	20000d9c 	.word	0x20000d9c
   813c0:	000810b1 	.word	0x000810b1
   813c4:	000811a1 	.word	0x000811a1
   813c8:	000811f1 	.word	0x000811f1
   813cc:	00085045 	.word	0x00085045
   813d0:	200010bc 	.word	0x200010bc
   813d4:	200010c0 	.word	0x200010c0

000813d8 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   813d8:	b510      	push	{r4, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   813da:	480a      	ldr	r0, [pc, #40]	; (81404 <XPROGTarget_SetRxMode+0x2c>)
   813dc:	4b0a      	ldr	r3, [pc, #40]	; (81408 <XPROGTarget_SetRxMode+0x30>)
   813de:	4798      	blx	r3
   813e0:	2800      	cmp	r0, #0
   813e2:	d0fa      	beq.n	813da <XPROGTarget_SetRxMode+0x2>

	usart_disable_tx(USART_PDI);
   813e4:	4c07      	ldr	r4, [pc, #28]	; (81404 <XPROGTarget_SetRxMode+0x2c>)
   813e6:	4620      	mov	r0, r4
   813e8:	4b08      	ldr	r3, [pc, #32]	; (8140c <XPROGTarget_SetRxMode+0x34>)
   813ea:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   813ec:	4620      	mov	r0, r4
   813ee:	4b08      	ldr	r3, [pc, #32]	; (81410 <XPROGTarget_SetRxMode+0x38>)
   813f0:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   813f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   813f6:	2012      	movs	r0, #18
   813f8:	4b06      	ldr	r3, [pc, #24]	; (81414 <XPROGTarget_SetRxMode+0x3c>)
   813fa:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   813fc:	4b06      	ldr	r3, [pc, #24]	; (81418 <XPROGTarget_SetRxMode+0x40>)
   813fe:	2200      	movs	r2, #0
   81400:	701a      	strb	r2, [r3, #0]
}
   81402:	bd10      	pop	{r4, pc}
   81404:	40090000 	.word	0x40090000
   81408:	00084ea5 	.word	0x00084ea5
   8140c:	00084e6f 	.word	0x00084e6f
   81410:	00084e7b 	.word	0x00084e7b
   81414:	0008259d 	.word	0x0008259d
   81418:	20000e9c 	.word	0x20000e9c

0008141c <XPROGTarget_SetTxMode>:
{
   8141c:	b510      	push	{r4, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8141e:	2011      	movs	r0, #17
   81420:	4b13      	ldr	r3, [pc, #76]	; (81470 <XPROGTarget_SetTxMode+0x54>)
   81422:	4798      	blx	r3
   81424:	b118      	cbz	r0, 8142e <XPROGTarget_SetTxMode+0x12>
   81426:	4b13      	ldr	r3, [pc, #76]	; (81474 <XPROGTarget_SetTxMode+0x58>)
   81428:	681b      	ldr	r3, [r3, #0]
   8142a:	2b00      	cmp	r3, #0
   8142c:	d1f7      	bne.n	8141e <XPROGTarget_SetTxMode+0x2>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8142e:	2011      	movs	r0, #17
   81430:	4b0f      	ldr	r3, [pc, #60]	; (81470 <XPROGTarget_SetTxMode+0x54>)
   81432:	4798      	blx	r3
   81434:	b918      	cbnz	r0, 8143e <XPROGTarget_SetTxMode+0x22>
   81436:	4b0f      	ldr	r3, [pc, #60]	; (81474 <XPROGTarget_SetTxMode+0x58>)
   81438:	681b      	ldr	r3, [r3, #0]
   8143a:	2b00      	cmp	r3, #0
   8143c:	d1f7      	bne.n	8142e <XPROGTarget_SetTxMode+0x12>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8143e:	2011      	movs	r0, #17
   81440:	4b0b      	ldr	r3, [pc, #44]	; (81470 <XPROGTarget_SetTxMode+0x54>)
   81442:	4798      	blx	r3
   81444:	b118      	cbz	r0, 8144e <XPROGTarget_SetTxMode+0x32>
   81446:	4b0b      	ldr	r3, [pc, #44]	; (81474 <XPROGTarget_SetTxMode+0x58>)
   81448:	681b      	ldr	r3, [r3, #0]
   8144a:	2b00      	cmp	r3, #0
   8144c:	d1f7      	bne.n	8143e <XPROGTarget_SetTxMode+0x22>
	usart_disable_rx(USART_PDI);
   8144e:	4c0a      	ldr	r4, [pc, #40]	; (81478 <XPROGTarget_SetTxMode+0x5c>)
   81450:	4620      	mov	r0, r4
   81452:	4b0a      	ldr	r3, [pc, #40]	; (8147c <XPROGTarget_SetTxMode+0x60>)
   81454:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   81456:	4620      	mov	r0, r4
   81458:	4b09      	ldr	r3, [pc, #36]	; (81480 <XPROGTarget_SetTxMode+0x64>)
   8145a:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   8145c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81460:	2012      	movs	r0, #18
   81462:	4b08      	ldr	r3, [pc, #32]	; (81484 <XPROGTarget_SetTxMode+0x68>)
   81464:	4798      	blx	r3
	IsSending = true;
   81466:	4b08      	ldr	r3, [pc, #32]	; (81488 <XPROGTarget_SetTxMode+0x6c>)
   81468:	2201      	movs	r2, #1
   8146a:	701a      	strb	r2, [r3, #0]
}
   8146c:	bd10      	pop	{r4, pc}
   8146e:	bf00      	nop
   81470:	00082549 	.word	0x00082549
   81474:	200010c0 	.word	0x200010c0
   81478:	40090000 	.word	0x40090000
   8147c:	00084e81 	.word	0x00084e81
   81480:	00084e69 	.word	0x00084e69
   81484:	0008259d 	.word	0x0008259d
   81488:	20000e9c 	.word	0x20000e9c

0008148c <XPROGTarget_DisableTargetPDI>:
{
   8148c:	b510      	push	{r4, lr}
	if (IsSending)
   8148e:	4b0f      	ldr	r3, [pc, #60]	; (814cc <XPROGTarget_DisableTargetPDI+0x40>)
   81490:	781b      	ldrb	r3, [r3, #0]
   81492:	b9bb      	cbnz	r3, 814c4 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   81494:	4c0e      	ldr	r4, [pc, #56]	; (814d0 <XPROGTarget_DisableTargetPDI+0x44>)
   81496:	4620      	mov	r0, r4
   81498:	4b0e      	ldr	r3, [pc, #56]	; (814d4 <XPROGTarget_DisableTargetPDI+0x48>)
   8149a:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   8149c:	4620      	mov	r0, r4
   8149e:	4b0e      	ldr	r3, [pc, #56]	; (814d8 <XPROGTarget_DisableTargetPDI+0x4c>)
   814a0:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   814a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   814a6:	2011      	movs	r0, #17
   814a8:	4c0c      	ldr	r4, [pc, #48]	; (814dc <XPROGTarget_DisableTargetPDI+0x50>)
   814aa:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   814ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   814b0:	2013      	movs	r0, #19
   814b2:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   814b4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   814b8:	2012      	movs	r0, #18
   814ba:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   814bc:	200d      	movs	r0, #13
   814be:	4b08      	ldr	r3, [pc, #32]	; (814e0 <XPROGTarget_DisableTargetPDI+0x54>)
   814c0:	4798      	blx	r3
}
   814c2:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   814c4:	4b07      	ldr	r3, [pc, #28]	; (814e4 <XPROGTarget_DisableTargetPDI+0x58>)
   814c6:	4798      	blx	r3
   814c8:	e7e4      	b.n	81494 <XPROGTarget_DisableTargetPDI+0x8>
   814ca:	bf00      	nop
   814cc:	20000e9c 	.word	0x20000e9c
   814d0:	40090000 	.word	0x40090000
   814d4:	00084e81 	.word	0x00084e81
   814d8:	00084e6f 	.word	0x00084e6f
   814dc:	0008259d 	.word	0x0008259d
   814e0:	00082879 	.word	0x00082879
   814e4:	000813d9 	.word	0x000813d9

000814e8 <XPROGTarget_SendByte>:
{
   814e8:	b510      	push	{r4, lr}
   814ea:	4604      	mov	r4, r0
	if (!(IsSending))
   814ec:	4b05      	ldr	r3, [pc, #20]	; (81504 <XPROGTarget_SendByte+0x1c>)
   814ee:	781b      	ldrb	r3, [r3, #0]
   814f0:	b123      	cbz	r3, 814fc <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   814f2:	4621      	mov	r1, r4
   814f4:	4804      	ldr	r0, [pc, #16]	; (81508 <XPROGTarget_SendByte+0x20>)
   814f6:	4b05      	ldr	r3, [pc, #20]	; (8150c <XPROGTarget_SendByte+0x24>)
   814f8:	4798      	blx	r3
}
   814fa:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   814fc:	4b04      	ldr	r3, [pc, #16]	; (81510 <XPROGTarget_SendByte+0x28>)
   814fe:	4798      	blx	r3
   81500:	e7f7      	b.n	814f2 <XPROGTarget_SendByte+0xa>
   81502:	bf00      	nop
   81504:	20000e9c 	.word	0x20000e9c
   81508:	40090000 	.word	0x40090000
   8150c:	00084ec3 	.word	0x00084ec3
   81510:	0008141d 	.word	0x0008141d

00081514 <XPROGTarget_ReceiveByte>:
{
   81514:	b500      	push	{lr}
   81516:	b083      	sub	sp, #12
	if (IsSending)
   81518:	4b0a      	ldr	r3, [pc, #40]	; (81544 <XPROGTarget_ReceiveByte+0x30>)
   8151a:	781b      	ldrb	r3, [r3, #0]
   8151c:	b973      	cbnz	r3, 8153c <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   8151e:	a901      	add	r1, sp, #4
   81520:	4809      	ldr	r0, [pc, #36]	; (81548 <XPROGTarget_ReceiveByte+0x34>)
   81522:	4b0a      	ldr	r3, [pc, #40]	; (8154c <XPROGTarget_ReceiveByte+0x38>)
   81524:	4798      	blx	r3
   81526:	2801      	cmp	r0, #1
   81528:	d103      	bne.n	81532 <XPROGTarget_ReceiveByte+0x1e>
   8152a:	4b09      	ldr	r3, [pc, #36]	; (81550 <XPROGTarget_ReceiveByte+0x3c>)
   8152c:	681b      	ldr	r3, [r3, #0]
   8152e:	2b00      	cmp	r3, #0
   81530:	d1f5      	bne.n	8151e <XPROGTarget_ReceiveByte+0xa>
}
   81532:	f89d 0004 	ldrb.w	r0, [sp, #4]
   81536:	b003      	add	sp, #12
   81538:	f85d fb04 	ldr.w	pc, [sp], #4
	  XPROGTarget_SetRxMode();
   8153c:	4b05      	ldr	r3, [pc, #20]	; (81554 <XPROGTarget_ReceiveByte+0x40>)
   8153e:	4798      	blx	r3
   81540:	e7ed      	b.n	8151e <XPROGTarget_ReceiveByte+0xa>
   81542:	bf00      	nop
   81544:	20000e9c 	.word	0x20000e9c
   81548:	40090000 	.word	0x40090000
   8154c:	00084ed5 	.word	0x00084ed5
   81550:	200010c0 	.word	0x200010c0
   81554:	000813d9 	.word	0x000813d9

00081558 <XPROGTarget_SendIdle>:
{
   81558:	b510      	push	{r4, lr}
	if (!(IsSending))
   8155a:	4b13      	ldr	r3, [pc, #76]	; (815a8 <XPROGTarget_SendIdle+0x50>)
   8155c:	781b      	ldrb	r3, [r3, #0]
   8155e:	b10b      	cbz	r3, 81564 <XPROGTarget_SendIdle+0xc>
{
   81560:	2400      	movs	r4, #0
   81562:	e004      	b.n	8156e <XPROGTarget_SendIdle+0x16>
	  XPROGTarget_SetTxMode();
   81564:	4b11      	ldr	r3, [pc, #68]	; (815ac <XPROGTarget_SendIdle+0x54>)
   81566:	4798      	blx	r3
   81568:	e7fa      	b.n	81560 <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   8156a:	3401      	adds	r4, #1
   8156c:	b2e4      	uxtb	r4, r4
   8156e:	2c0b      	cmp	r4, #11
   81570:	d819      	bhi.n	815a6 <XPROGTarget_SendIdle+0x4e>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81572:	2011      	movs	r0, #17
   81574:	4b0e      	ldr	r3, [pc, #56]	; (815b0 <XPROGTarget_SendIdle+0x58>)
   81576:	4798      	blx	r3
   81578:	b118      	cbz	r0, 81582 <XPROGTarget_SendIdle+0x2a>
   8157a:	4b0e      	ldr	r3, [pc, #56]	; (815b4 <XPROGTarget_SendIdle+0x5c>)
   8157c:	681b      	ldr	r3, [r3, #0]
   8157e:	2b00      	cmp	r3, #0
   81580:	d1f7      	bne.n	81572 <XPROGTarget_SendIdle+0x1a>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81582:	2011      	movs	r0, #17
   81584:	4b0a      	ldr	r3, [pc, #40]	; (815b0 <XPROGTarget_SendIdle+0x58>)
   81586:	4798      	blx	r3
   81588:	b918      	cbnz	r0, 81592 <XPROGTarget_SendIdle+0x3a>
   8158a:	4b0a      	ldr	r3, [pc, #40]	; (815b4 <XPROGTarget_SendIdle+0x5c>)
   8158c:	681b      	ldr	r3, [r3, #0]
   8158e:	2b00      	cmp	r3, #0
   81590:	d1f7      	bne.n	81582 <XPROGTarget_SendIdle+0x2a>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81592:	2011      	movs	r0, #17
   81594:	4b06      	ldr	r3, [pc, #24]	; (815b0 <XPROGTarget_SendIdle+0x58>)
   81596:	4798      	blx	r3
   81598:	2800      	cmp	r0, #0
   8159a:	d0e6      	beq.n	8156a <XPROGTarget_SendIdle+0x12>
   8159c:	4b05      	ldr	r3, [pc, #20]	; (815b4 <XPROGTarget_SendIdle+0x5c>)
   8159e:	681b      	ldr	r3, [r3, #0]
   815a0:	2b00      	cmp	r3, #0
   815a2:	d1f6      	bne.n	81592 <XPROGTarget_SendIdle+0x3a>
   815a4:	e7e1      	b.n	8156a <XPROGTarget_SendIdle+0x12>
}
   815a6:	bd10      	pop	{r4, pc}
   815a8:	20000e9c 	.word	0x20000e9c
   815ac:	0008141d 	.word	0x0008141d
   815b0:	00082549 	.word	0x00082549
   815b4:	200010c0 	.word	0x200010c0

000815b8 <XPROGTarget_EnableTargetPDI>:
{
   815b8:	b570      	push	{r4, r5, r6, lr}
   815ba:	b086      	sub	sp, #24
	IsSending = false;
   815bc:	2500      	movs	r5, #0
   815be:	4b19      	ldr	r3, [pc, #100]	; (81624 <XPROGTarget_EnableTargetPDI+0x6c>)
   815c0:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   815c2:	200d      	movs	r0, #13
   815c4:	4b18      	ldr	r3, [pc, #96]	; (81628 <XPROGTarget_EnableTargetPDI+0x70>)
   815c6:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   815c8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815cc:	2012      	movs	r0, #18
   815ce:	4c17      	ldr	r4, [pc, #92]	; (8162c <XPROGTarget_EnableTargetPDI+0x74>)
   815d0:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   815d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   815d6:	2013      	movs	r0, #19
   815d8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   815da:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815de:	2011      	movs	r0, #17
   815e0:	47a0      	blx	r4
	delay_us(50);
   815e2:	201b      	movs	r0, #27
   815e4:	4e12      	ldr	r6, [pc, #72]	; (81630 <XPROGTarget_EnableTargetPDI+0x78>)
   815e6:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   815e8:	2012      	movs	r0, #18
   815ea:	4b12      	ldr	r3, [pc, #72]	; (81634 <XPROGTarget_EnableTargetPDI+0x7c>)
   815ec:	4798      	blx	r3
	delay_us(10);
   815ee:	2006      	movs	r0, #6
   815f0:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   815f2:	9502      	str	r5, [sp, #8]
   815f4:	9504      	str	r5, [sp, #16]
   815f6:	9505      	str	r5, [sp, #20]
   815f8:	4b0f      	ldr	r3, [pc, #60]	; (81638 <XPROGTarget_EnableTargetPDI+0x80>)
   815fa:	9300      	str	r3, [sp, #0]
   815fc:	23c0      	movs	r3, #192	; 0xc0
   815fe:	9301      	str	r3, [sp, #4]
   81600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81604:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   81606:	4a0d      	ldr	r2, [pc, #52]	; (8163c <XPROGTarget_EnableTargetPDI+0x84>)
   81608:	4669      	mov	r1, sp
   8160a:	480d      	ldr	r0, [pc, #52]	; (81640 <XPROGTarget_EnableTargetPDI+0x88>)
   8160c:	4b0d      	ldr	r3, [pc, #52]	; (81644 <XPROGTarget_EnableTargetPDI+0x8c>)
   8160e:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   81610:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81614:	2011      	movs	r0, #17
   81616:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   81618:	4c0b      	ldr	r4, [pc, #44]	; (81648 <XPROGTarget_EnableTargetPDI+0x90>)
   8161a:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   8161c:	47a0      	blx	r4
}
   8161e:	b006      	add	sp, #24
   81620:	bd70      	pop	{r4, r5, r6, pc}
   81622:	bf00      	nop
   81624:	20000e9c 	.word	0x20000e9c
   81628:	00082845 	.word	0x00082845
   8162c:	0008259d 	.word	0x0008259d
   81630:	20000001 	.word	0x20000001
   81634:	00082565 	.word	0x00082565
   81638:	0007a120 	.word	0x0007a120
   8163c:	0b71b000 	.word	0x0b71b000
   81640:	40090000 	.word	0x40090000
   81644:	00084f41 	.word	0x00084f41
   81648:	00081559 	.word	0x00081559

0008164c <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   8164c:	4b01      	ldr	r3, [pc, #4]	; (81654 <set_timeout+0x8>)
   8164e:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   81650:	4770      	bx	lr
   81652:	bf00      	nop
   81654:	200001f8 	.word	0x200001f8

00081658 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   81658:	b538      	push	{r3, r4, r5, lr}
   8165a:	2016      	movs	r0, #22
   8165c:	4b10      	ldr	r3, [pc, #64]	; (816a0 <setup_timeoutcnt+0x48>)
   8165e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81660:	4b10      	ldr	r3, [pc, #64]	; (816a4 <setup_timeoutcnt+0x4c>)
   81662:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81666:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8166a:	2510      	movs	r5, #16
   8166c:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81670:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   81672:	4c0d      	ldr	r4, [pc, #52]	; (816a8 <setup_timeoutcnt+0x50>)
   81674:	f24c 0201 	movw	r2, #49153	; 0xc001
   81678:	2100      	movs	r1, #0
   8167a:	4620      	mov	r0, r4
   8167c:	4b0b      	ldr	r3, [pc, #44]	; (816ac <setup_timeoutcnt+0x54>)
   8167e:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   81680:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   81684:	2100      	movs	r1, #0
   81686:	4620      	mov	r0, r4
   81688:	4b09      	ldr	r3, [pc, #36]	; (816b0 <setup_timeoutcnt+0x58>)
   8168a:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   8168c:	462a      	mov	r2, r5
   8168e:	2100      	movs	r1, #0
   81690:	4620      	mov	r0, r4
   81692:	4b08      	ldr	r3, [pc, #32]	; (816b4 <setup_timeoutcnt+0x5c>)
   81694:	4798      	blx	r3
	
	timerEnabled = true;
   81696:	4b08      	ldr	r3, [pc, #32]	; (816b8 <setup_timeoutcnt+0x60>)
   81698:	2201      	movs	r2, #1
   8169a:	701a      	strb	r2, [r3, #0]
}
   8169c:	bd38      	pop	{r3, r4, r5, pc}
   8169e:	bf00      	nop
   816a0:	00082845 	.word	0x00082845
   816a4:	e000e100 	.word	0xe000e100
   816a8:	40080000 	.word	0x40080000
   816ac:	00082cc1 	.word	0x00082cc1
   816b0:	00082ceb 	.word	0x00082ceb
   816b4:	00082cf3 	.word	0x00082cf3
   816b8:	20000e9d 	.word	0x20000e9d

000816bc <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   816bc:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   816be:	4b0a      	ldr	r3, [pc, #40]	; (816e8 <start_timeoutcnt+0x2c>)
   816c0:	781b      	ldrb	r3, [r3, #0]
   816c2:	b16b      	cbz	r3, 816e0 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   816c4:	4c09      	ldr	r4, [pc, #36]	; (816ec <start_timeoutcnt+0x30>)
   816c6:	2100      	movs	r1, #0
   816c8:	4620      	mov	r0, r4
   816ca:	4b09      	ldr	r3, [pc, #36]	; (816f0 <start_timeoutcnt+0x34>)
   816cc:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   816ce:	4b09      	ldr	r3, [pc, #36]	; (816f4 <start_timeoutcnt+0x38>)
   816d0:	681a      	ldr	r2, [r3, #0]
   816d2:	4b09      	ldr	r3, [pc, #36]	; (816f8 <start_timeoutcnt+0x3c>)
   816d4:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   816d6:	2100      	movs	r1, #0
   816d8:	4620      	mov	r0, r4
   816da:	4b08      	ldr	r3, [pc, #32]	; (816fc <start_timeoutcnt+0x40>)
   816dc:	4798      	blx	r3
}
   816de:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   816e0:	4b07      	ldr	r3, [pc, #28]	; (81700 <start_timeoutcnt+0x44>)
   816e2:	4798      	blx	r3
   816e4:	e7ee      	b.n	816c4 <start_timeoutcnt+0x8>
   816e6:	bf00      	nop
   816e8:	20000e9d 	.word	0x20000e9d
   816ec:	40080000 	.word	0x40080000
   816f0:	00082ce3 	.word	0x00082ce3
   816f4:	200001f8 	.word	0x200001f8
   816f8:	200010c0 	.word	0x200010c0
   816fc:	00082cdb 	.word	0x00082cdb
   81700:	00081659 	.word	0x00081659

00081704 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   81704:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81706:	2100      	movs	r1, #0
   81708:	4801      	ldr	r0, [pc, #4]	; (81710 <stop_timeoutcnt+0xc>)
   8170a:	4b02      	ldr	r3, [pc, #8]	; (81714 <stop_timeoutcnt+0x10>)
   8170c:	4798      	blx	r3
}
   8170e:	bd08      	pop	{r3, pc}
   81710:	40080000 	.word	0x40080000
   81714:	00082ce3 	.word	0x00082ce3

00081718 <TC0_Handler>:

ISR(TC0_Handler)
{
   81718:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   8171a:	4b05      	ldr	r3, [pc, #20]	; (81730 <TC0_Handler+0x18>)
   8171c:	681b      	ldr	r3, [r3, #0]
   8171e:	b113      	cbz	r3, 81726 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   81720:	3b01      	subs	r3, #1
   81722:	4a03      	ldr	r2, [pc, #12]	; (81730 <TC0_Handler+0x18>)
   81724:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   81726:	2100      	movs	r1, #0
   81728:	4802      	ldr	r0, [pc, #8]	; (81734 <TC0_Handler+0x1c>)
   8172a:	4b03      	ldr	r3, [pc, #12]	; (81738 <TC0_Handler+0x20>)
   8172c:	4798      	blx	r3
}
   8172e:	bd08      	pop	{r3, pc}
   81730:	200010c0 	.word	0x200010c0
   81734:	40080000 	.word	0x40080000
   81738:	00082cfb 	.word	0x00082cfb

0008173c <process_events>:
/*
TODO: Need to have a proper event loop not this crappy hack
*/

void process_events(void)
{
   8173c:	b508      	push	{r3, lr}
	static uint32_t nextCnt = 0;
	
	/* Hack for now - fixed at 100 mS, one event */	
	if (task_tickCnt > nextCnt){
   8173e:	4b0c      	ldr	r3, [pc, #48]	; (81770 <process_events+0x34>)
   81740:	681a      	ldr	r2, [r3, #0]
   81742:	4b0c      	ldr	r3, [pc, #48]	; (81774 <process_events+0x38>)
   81744:	681b      	ldr	r3, [r3, #0]
   81746:	429a      	cmp	r2, r3
   81748:	d800      	bhi.n	8174c <process_events+0x10>
		if (nextCnt < task_tickCnt){
			task_tickCnt = 0;
			nextCnt = 100;
		}
	}
}
   8174a:	bd08      	pop	{r3, pc}
		do_task();
   8174c:	4b0a      	ldr	r3, [pc, #40]	; (81778 <process_events+0x3c>)
   8174e:	4798      	blx	r3
		nextCnt += 100;
   81750:	4a08      	ldr	r2, [pc, #32]	; (81774 <process_events+0x38>)
   81752:	6813      	ldr	r3, [r2, #0]
   81754:	3364      	adds	r3, #100	; 0x64
   81756:	6013      	str	r3, [r2, #0]
		if (nextCnt < task_tickCnt){
   81758:	4a05      	ldr	r2, [pc, #20]	; (81770 <process_events+0x34>)
   8175a:	6812      	ldr	r2, [r2, #0]
   8175c:	4293      	cmp	r3, r2
   8175e:	d2f4      	bcs.n	8174a <process_events+0xe>
			task_tickCnt = 0;
   81760:	4b03      	ldr	r3, [pc, #12]	; (81770 <process_events+0x34>)
   81762:	2200      	movs	r2, #0
   81764:	601a      	str	r2, [r3, #0]
			nextCnt = 100;
   81766:	4b03      	ldr	r3, [pc, #12]	; (81774 <process_events+0x38>)
   81768:	2264      	movs	r2, #100	; 0x64
   8176a:	601a      	str	r2, [r3, #0]
}
   8176c:	e7ed      	b.n	8174a <process_events+0xe>
   8176e:	bf00      	nop
   81770:	200010c8 	.word	0x200010c8
   81774:	20000ea0 	.word	0x20000ea0
   81778:	000806a9 	.word	0x000806a9

0008177c <naeusb_add_in_handler>:
COMPILER_WORD_ALIGNED
uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   8177c:	4b06      	ldr	r3, [pc, #24]	; (81798 <naeusb_add_in_handler+0x1c>)
   8177e:	781b      	ldrb	r3, [r3, #0]
   81780:	2b0f      	cmp	r3, #15
   81782:	d807      	bhi.n	81794 <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81784:	1c59      	adds	r1, r3, #1
   81786:	4a04      	ldr	r2, [pc, #16]	; (81798 <naeusb_add_in_handler+0x1c>)
   81788:	7011      	strb	r1, [r2, #0]
   8178a:	4a04      	ldr	r2, [pc, #16]	; (8179c <naeusb_add_in_handler+0x20>)
   8178c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   81790:	2001      	movs	r0, #1
   81792:	4770      	bx	lr
        return false;
   81794:	2000      	movs	r0, #0
}
   81796:	4770      	bx	lr
   81798:	20000ee4 	.word	0x20000ee4
   8179c:	20000ea4 	.word	0x20000ea4

000817a0 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   817a0:	4b06      	ldr	r3, [pc, #24]	; (817bc <naeusb_add_out_handler+0x1c>)
   817a2:	781b      	ldrb	r3, [r3, #0]
   817a4:	2b0f      	cmp	r3, #15
   817a6:	d807      	bhi.n	817b8 <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   817a8:	1c59      	adds	r1, r3, #1
   817aa:	4a04      	ldr	r2, [pc, #16]	; (817bc <naeusb_add_out_handler+0x1c>)
   817ac:	7011      	strb	r1, [r2, #0]
   817ae:	4a04      	ldr	r2, [pc, #16]	; (817c0 <naeusb_add_out_handler+0x20>)
   817b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   817b4:	2001      	movs	r0, #1
   817b6:	4770      	bx	lr
        return false;
   817b8:	2000      	movs	r0, #0
}
   817ba:	4770      	bx	lr
   817bc:	20000ee5 	.word	0x20000ee5
   817c0:	20000ee8 	.word	0x20000ee8

000817c4 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   817c4:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   817c6:	4b01      	ldr	r3, [pc, #4]	; (817cc <main_suspend_action+0x8>)
   817c8:	4798      	blx	r3
}
   817ca:	bd08      	pop	{r3, pc}
   817cc:	00084de1 	.word	0x00084de1

000817d0 <main_resume_action>:

void main_resume_action(void)
{
   817d0:	b508      	push	{r3, lr}
    ui_wakeup();
   817d2:	4b01      	ldr	r3, [pc, #4]	; (817d8 <main_resume_action+0x8>)
   817d4:	4798      	blx	r3
}
   817d6:	bd08      	pop	{r3, pc}
   817d8:	00084df5 	.word	0x00084df5

000817dc <main_sof_action>:

void main_sof_action(void)
{
   817dc:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   817de:	4b04      	ldr	r3, [pc, #16]	; (817f0 <main_sof_action+0x14>)
   817e0:	781b      	ldrb	r3, [r3, #0]
   817e2:	b903      	cbnz	r3, 817e6 <main_sof_action+0xa>
        return;
    ui_process(udd_get_frame_number());
}
   817e4:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   817e6:	4b03      	ldr	r3, [pc, #12]	; (817f4 <main_sof_action+0x18>)
   817e8:	4798      	blx	r3
   817ea:	4b03      	ldr	r3, [pc, #12]	; (817f8 <main_sof_action+0x1c>)
   817ec:	4798      	blx	r3
   817ee:	e7f9      	b.n	817e4 <main_sof_action+0x8>
   817f0:	200001fc 	.word	0x200001fc
   817f4:	00084675 	.word	0x00084675
   817f8:	00084e05 	.word	0x00084e05

000817fc <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   817fc:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   817fe:	2401      	movs	r4, #1
   81800:	4b04      	ldr	r3, [pc, #16]	; (81814 <main_vendor_enable+0x18>)
   81802:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81804:	4a04      	ldr	r2, [pc, #16]	; (81818 <main_vendor_enable+0x1c>)
   81806:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8180a:	4804      	ldr	r0, [pc, #16]	; (8181c <main_vendor_enable+0x20>)
   8180c:	4b04      	ldr	r3, [pc, #16]	; (81820 <main_vendor_enable+0x24>)
   8180e:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   81810:	4620      	mov	r0, r4
   81812:	bd10      	pop	{r4, pc}
   81814:	200001fc 	.word	0x200001fc
   81818:	00081ce9 	.word	0x00081ce9
   8181c:	2000114c 	.word	0x2000114c
   81820:	000838fd 	.word	0x000838fd

00081824 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   81824:	4b01      	ldr	r3, [pc, #4]	; (8182c <main_vendor_disable+0x8>)
   81826:	2200      	movs	r2, #0
   81828:	701a      	strb	r2, [r3, #0]
}
   8182a:	4770      	bx	lr
   8182c:	200001fc 	.word	0x200001fc

00081830 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81830:	b510      	push	{r4, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   81832:	4b0c      	ldr	r3, [pc, #48]	; (81864 <main_setup_out_received+0x34>)
   81834:	4a0c      	ldr	r2, [pc, #48]	; (81868 <main_setup_out_received+0x38>)
   81836:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81838:	88da      	ldrh	r2, [r3, #6]
   8183a:	2a40      	cmp	r2, #64	; 0x40
   8183c:	bf28      	it	cs
   8183e:	2240      	movcs	r2, #64	; 0x40
   81840:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81842:	4b0a      	ldr	r3, [pc, #40]	; (8186c <main_setup_out_received+0x3c>)
   81844:	781c      	ldrb	r4, [r3, #0]
   81846:	b14c      	cbz	r4, 8185c <main_setup_out_received+0x2c>
        handler_status = naeusb_out_request_handlers[i-1]();
   81848:	1e63      	subs	r3, r4, #1
   8184a:	4a09      	ldr	r2, [pc, #36]	; (81870 <main_setup_out_received+0x40>)
   8184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   81850:	4798      	blx	r3
        if (handler_status == true) {
   81852:	4603      	mov	r3, r0
   81854:	b918      	cbnz	r0, 8185e <main_setup_out_received+0x2e>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81856:	3c01      	subs	r4, #1
   81858:	b2e4      	uxtb	r4, r4
   8185a:	e7f4      	b.n	81846 <main_setup_out_received+0x16>
            return true;
        }
    }

    return false;
   8185c:	2300      	movs	r3, #0

}
   8185e:	4618      	mov	r0, r3
   81860:	bd10      	pop	{r4, pc}
   81862:	bf00      	nop
   81864:	20001958 	.word	0x20001958
   81868:	2000110c 	.word	0x2000110c
   8186c:	20000ee5 	.word	0x20000ee5
   81870:	20000ee8 	.word	0x20000ee8

00081874 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81874:	b510      	push	{r4, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81876:	4b08      	ldr	r3, [pc, #32]	; (81898 <main_setup_in_received+0x24>)
   81878:	781c      	ldrb	r4, [r3, #0]
   8187a:	b14c      	cbz	r4, 81890 <main_setup_in_received+0x1c>
        handler_status = naeusb_in_request_handlers[i-1]();
   8187c:	1e63      	subs	r3, r4, #1
   8187e:	4a07      	ldr	r2, [pc, #28]	; (8189c <main_setup_in_received+0x28>)
   81880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   81884:	4798      	blx	r3
        if (handler_status == true) {
   81886:	4603      	mov	r3, r0
   81888:	b918      	cbnz	r0, 81892 <main_setup_in_received+0x1e>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8188a:	3c01      	subs	r4, #1
   8188c:	b2e4      	uxtb	r4, r4
   8188e:	e7f4      	b.n	8187a <main_setup_in_received+0x6>
            return true;
        }
    }

    return false;
   81890:	2300      	movs	r3, #0

   81892:	4618      	mov	r0, r3
   81894:	bd10      	pop	{r4, pc}
   81896:	bf00      	nop
   81898:	20000ee4 	.word	0x20000ee4
   8189c:	20000ea4 	.word	0x20000ea4

000818a0 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   818a0:	4b05      	ldr	r3, [pc, #20]	; (818b8 <naeusb_setup_out_received+0x18>)
   818a2:	785b      	ldrb	r3, [r3, #1]
   818a4:	2b22      	cmp	r3, #34	; 0x22
   818a6:	d001      	beq.n	818ac <naeusb_setup_out_received+0xc>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
            return true;
            break;
    }
    return false;
   818a8:	2000      	movs	r0, #0
}
   818aa:	4770      	bx	lr
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   818ac:	4b02      	ldr	r3, [pc, #8]	; (818b8 <naeusb_setup_out_received+0x18>)
   818ae:	4a03      	ldr	r2, [pc, #12]	; (818bc <naeusb_setup_out_received+0x1c>)
   818b0:	611a      	str	r2, [r3, #16]
            return true;
   818b2:	2001      	movs	r0, #1
   818b4:	4770      	bx	lr
   818b6:	bf00      	nop
   818b8:	20001958 	.word	0x20001958
   818bc:	000818c1 	.word	0x000818c1

000818c0 <naeusb_sam_cfg_out>:
{
   818c0:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   818c2:	4b22      	ldr	r3, [pc, #136]	; (8194c <naeusb_sam_cfg_out+0x8c>)
   818c4:	789b      	ldrb	r3, [r3, #2]
   818c6:	3b01      	subs	r3, #1
   818c8:	2b10      	cmp	r3, #16
   818ca:	d814      	bhi.n	818f6 <naeusb_sam_cfg_out+0x36>
   818cc:	e8df f003 	tbb	[pc, r3]
   818d0:	13181409 	.word	0x13181409
   818d4:	13131313 	.word	0x13131313
   818d8:	13131313 	.word	0x13131313
   818dc:	2c131313 	.word	0x2c131313
   818e0:	3b          	.byte	0x3b
   818e1:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   818e2:	203e      	movs	r0, #62	; 0x3e
   818e4:	4b1a      	ldr	r3, [pc, #104]	; (81950 <naeusb_sam_cfg_out+0x90>)
   818e6:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   818e8:	4b1a      	ldr	r3, [pc, #104]	; (81954 <naeusb_sam_cfg_out+0x94>)
   818ea:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   818ec:	2800      	cmp	r0, #0
   818ee:	d0fb      	beq.n	818e8 <naeusb_sam_cfg_out+0x28>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   818f0:	2010      	movs	r0, #16
   818f2:	4b19      	ldr	r3, [pc, #100]	; (81958 <naeusb_sam_cfg_out+0x98>)
   818f4:	4798      	blx	r3
}
   818f6:	bd08      	pop	{r3, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   818f8:	2010      	movs	r0, #16
   818fa:	4b18      	ldr	r3, [pc, #96]	; (8195c <naeusb_sam_cfg_out+0x9c>)
   818fc:	4798      	blx	r3
        break;
   818fe:	e7fa      	b.n	818f6 <naeusb_sam_cfg_out+0x36>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81900:	2201      	movs	r2, #1
   81902:	210c      	movs	r1, #12
   81904:	4816      	ldr	r0, [pc, #88]	; (81960 <naeusb_sam_cfg_out+0xa0>)
   81906:	4b17      	ldr	r3, [pc, #92]	; (81964 <naeusb_sam_cfg_out+0xa4>)
   81908:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   8190a:	4b17      	ldr	r3, [pc, #92]	; (81968 <naeusb_sam_cfg_out+0xa8>)
   8190c:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8190e:	4b17      	ldr	r3, [pc, #92]	; (8196c <naeusb_sam_cfg_out+0xac>)
   81910:	685b      	ldr	r3, [r3, #4]
   81912:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   81916:	d1fa      	bne.n	8190e <naeusb_sam_cfg_out+0x4e>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81918:	4a14      	ldr	r2, [pc, #80]	; (8196c <naeusb_sam_cfg_out+0xac>)
   8191a:	6813      	ldr	r3, [r2, #0]
   8191c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81920:	f043 0305 	orr.w	r3, r3, #5
   81924:	6013      	str	r3, [r2, #0]
        while(1);
   81926:	e7fe      	b.n	81926 <naeusb_sam_cfg_out+0x66>
   81928:	4b0f      	ldr	r3, [pc, #60]	; (81968 <naeusb_sam_cfg_out+0xa8>)
   8192a:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8192c:	4b0f      	ldr	r3, [pc, #60]	; (8196c <naeusb_sam_cfg_out+0xac>)
   8192e:	685b      	ldr	r3, [r3, #4]
   81930:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   81934:	d1fa      	bne.n	8192c <naeusb_sam_cfg_out+0x6c>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81936:	4a0d      	ldr	r2, [pc, #52]	; (8196c <naeusb_sam_cfg_out+0xac>)
   81938:	6813      	ldr	r3, [r2, #0]
   8193a:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8193e:	f043 0305 	orr.w	r3, r3, #5
   81942:	6013      	str	r3, [r2, #0]
        while(1);
   81944:	e7fe      	b.n	81944 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   81946:	4b0a      	ldr	r3, [pc, #40]	; (81970 <naeusb_sam_cfg_out+0xb0>)
   81948:	4798      	blx	r3
}
   8194a:	e7d4      	b.n	818f6 <naeusb_sam_cfg_out+0x36>
   8194c:	20001958 	.word	0x20001958
   81950:	000827ad 	.word	0x000827ad
   81954:	000827d5 	.word	0x000827d5
   81958:	00082705 	.word	0x00082705
   8195c:	00082759 	.word	0x00082759
   81960:	400e0800 	.word	0x400e0800
   81964:	000821b5 	.word	0x000821b5
   81968:	000845f5 	.word	0x000845f5
   8196c:	400e1200 	.word	0x400e1200
   81970:	00080721 	.word	0x00080721

00081974 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   81974:	4b05      	ldr	r3, [pc, #20]	; (8198c <naeusb_fw_version_in+0x18>)
   81976:	2200      	movs	r2, #0
   81978:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   8197a:	2128      	movs	r1, #40	; 0x28
   8197c:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   8197e:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81980:	4a03      	ldr	r2, [pc, #12]	; (81990 <naeusb_fw_version_in+0x1c>)
   81982:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   81984:	2303      	movs	r3, #3
   81986:	8193      	strh	r3, [r2, #12]
}
   81988:	2001      	movs	r0, #1
   8198a:	4770      	bx	lr
   8198c:	200010cc 	.word	0x200010cc
   81990:	20001958 	.word	0x20001958

00081994 <naeusb_build_date_in>:
{
   81994:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   81996:	4c0a      	ldr	r4, [pc, #40]	; (819c0 <naeusb_build_date_in+0x2c>)
   81998:	2240      	movs	r2, #64	; 0x40
   8199a:	490a      	ldr	r1, [pc, #40]	; (819c4 <naeusb_build_date_in+0x30>)
   8199c:	4620      	mov	r0, r4
   8199e:	4d0a      	ldr	r5, [pc, #40]	; (819c8 <naeusb_build_date_in+0x34>)
   819a0:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   819a2:	2320      	movs	r3, #32
   819a4:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   819a6:	2237      	movs	r2, #55	; 0x37
   819a8:	4908      	ldr	r1, [pc, #32]	; (819cc <naeusb_build_date_in+0x38>)
   819aa:	f104 0009 	add.w	r0, r4, #9
   819ae:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   819b0:	4d07      	ldr	r5, [pc, #28]	; (819d0 <naeusb_build_date_in+0x3c>)
   819b2:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   819b4:	4620      	mov	r0, r4
   819b6:	4b07      	ldr	r3, [pc, #28]	; (819d4 <naeusb_build_date_in+0x40>)
   819b8:	4798      	blx	r3
   819ba:	81a8      	strh	r0, [r5, #12]
}
   819bc:	2001      	movs	r0, #1
   819be:	bd38      	pop	{r3, r4, r5, pc}
   819c0:	200010cc 	.word	0x200010cc
   819c4:	0008befc 	.word	0x0008befc
   819c8:	00085421 	.word	0x00085421
   819cc:	0008bef0 	.word	0x0008bef0
   819d0:	20001958 	.word	0x20001958
   819d4:	000853c5 	.word	0x000853c5

000819d8 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   819d8:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   819da:	4b07      	ldr	r3, [pc, #28]	; (819f8 <naeusb_setup_in_received+0x20>)
   819dc:	785b      	ldrb	r3, [r3, #1]
   819de:	2b17      	cmp	r3, #23
   819e0:	d003      	beq.n	819ea <naeusb_setup_in_received+0x12>
   819e2:	2b40      	cmp	r3, #64	; 0x40
   819e4:	d004      	beq.n	819f0 <naeusb_setup_in_received+0x18>
   819e6:	2000      	movs	r0, #0
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
}
   819e8:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   819ea:	4b04      	ldr	r3, [pc, #16]	; (819fc <naeusb_setup_in_received+0x24>)
   819ec:	4798      	blx	r3
   819ee:	e7fb      	b.n	819e8 <naeusb_setup_in_received+0x10>
            return naeusb_build_date_in();
   819f0:	4b03      	ldr	r3, [pc, #12]	; (81a00 <naeusb_setup_in_received+0x28>)
   819f2:	4798      	blx	r3
   819f4:	e7f8      	b.n	819e8 <naeusb_setup_in_received+0x10>
   819f6:	bf00      	nop
   819f8:	20001958 	.word	0x20001958
   819fc:	00081975 	.word	0x00081975
   81a00:	00081995 	.word	0x00081995

00081a04 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81a04:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81a06:	4803      	ldr	r0, [pc, #12]	; (81a14 <naeusb_register_handlers+0x10>)
   81a08:	4b03      	ldr	r3, [pc, #12]	; (81a18 <naeusb_register_handlers+0x14>)
   81a0a:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81a0c:	4803      	ldr	r0, [pc, #12]	; (81a1c <naeusb_register_handlers+0x18>)
   81a0e:	4b04      	ldr	r3, [pc, #16]	; (81a20 <naeusb_register_handlers+0x1c>)
   81a10:	4798      	blx	r3
   81a12:	bd08      	pop	{r3, pc}
   81a14:	000819d9 	.word	0x000819d9
   81a18:	0008177d 	.word	0x0008177d
   81a1c:	000818a1 	.word	0x000818a1
   81a20:	000817a1 	.word	0x000817a1

00081a24 <fpga_target_setup_out_received>:

}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   81a24:	4b2d      	ldr	r3, [pc, #180]	; (81adc <fpga_target_setup_out_received+0xb8>)
   81a26:	2200      	movs	r2, #0
   81a28:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   81a2a:	4b2d      	ldr	r3, [pc, #180]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a2c:	785b      	ldrb	r3, [r3, #1]
   81a2e:	3b10      	subs	r3, #16
   81a30:	2b25      	cmp	r3, #37	; 0x25
   81a32:	d850      	bhi.n	81ad6 <fpga_target_setup_out_received+0xb2>
   81a34:	e8df f003 	tbb	[pc, r3]
   81a38:	22181d13 	.word	0x22181d13
   81a3c:	4f2c274f 	.word	0x4f2c274f
   81a40:	4f4f4f4f 	.word	0x4f4f4f4f
   81a44:	4f4f4f4f 	.word	0x4f4f4f4f
   81a48:	4f4f4f31 	.word	0x4f4f4f31
   81a4c:	4f4f4f4f 	.word	0x4f4f4f4f
   81a50:	4f4f4f4f 	.word	0x4f4f4f4f
   81a54:	4f4f4f4f 	.word	0x4f4f4f4f
   81a58:	404f3b36 	.word	0x404f3b36
   81a5c:	4a45      	.short	0x4a45
        /* Memory Read */
        case REQ_MEMREAD_BULK:
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81a5e:	4b20      	ldr	r3, [pc, #128]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a60:	4a20      	ldr	r2, [pc, #128]	; (81ae4 <fpga_target_setup_out_received+0xc0>)
   81a62:	611a      	str	r2, [r3, #16]
            return true;
   81a64:	2001      	movs	r0, #1
   81a66:	4770      	bx	lr
        case REQ_MEMREAD_CTRL:
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81a68:	4b1d      	ldr	r3, [pc, #116]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a6a:	4a1f      	ldr	r2, [pc, #124]	; (81ae8 <fpga_target_setup_out_received+0xc4>)
   81a6c:	611a      	str	r2, [r3, #16]
            return true;	
   81a6e:	2001      	movs	r0, #1
   81a70:	4770      	bx	lr

            /* Memory Write */
        case REQ_MEMWRITE_BULK:
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81a72:	4b1b      	ldr	r3, [pc, #108]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a74:	4a1d      	ldr	r2, [pc, #116]	; (81aec <fpga_target_setup_out_received+0xc8>)
   81a76:	611a      	str	r2, [r3, #16]
            return true;
   81a78:	2001      	movs	r0, #1
   81a7a:	4770      	bx	lr

        case REQ_MEMWRITE_CTRL:
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81a7c:	4b18      	ldr	r3, [pc, #96]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a7e:	4a1c      	ldr	r2, [pc, #112]	; (81af0 <fpga_target_setup_out_received+0xcc>)
   81a80:	611a      	str	r2, [r3, #16]
            return true;		
   81a82:	2001      	movs	r0, #1
   81a84:	4770      	bx	lr

        case REQ_MEMWRITE_CTRL_SAMU3:
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   81a86:	4b16      	ldr	r3, [pc, #88]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a88:	4a1a      	ldr	r2, [pc, #104]	; (81af4 <fpga_target_setup_out_received+0xd0>)
   81a8a:	611a      	str	r2, [r3, #16]
            return true;		
   81a8c:	2001      	movs	r0, #1
   81a8e:	4770      	bx	lr

            /* Send bitstream to FPGA */
        case REQ_FPGA_PROGRAM:
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81a90:	4b13      	ldr	r3, [pc, #76]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a92:	4a19      	ldr	r2, [pc, #100]	; (81af8 <fpga_target_setup_out_received+0xd4>)
   81a94:	611a      	str	r2, [r3, #16]
            return true;
   81a96:	2001      	movs	r0, #1
   81a98:	4770      	bx	lr
        case REQ_XMEGA_PROGRAM:
            /*
               udd_g_ctrlreq.payload = xmegabuffer;
               udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
               */
            udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81a9a:	4b11      	ldr	r3, [pc, #68]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81a9c:	4a17      	ldr	r2, [pc, #92]	; (81afc <fpga_target_setup_out_received+0xd8>)
   81a9e:	611a      	str	r2, [r3, #16]
            return true;
   81aa0:	2001      	movs	r0, #1
   81aa2:	4770      	bx	lr

        case REQ_CDCE906:
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   81aa4:	4b0e      	ldr	r3, [pc, #56]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81aa6:	4a16      	ldr	r2, [pc, #88]	; (81b00 <fpga_target_setup_out_received+0xdc>)
   81aa8:	611a      	str	r2, [r3, #16]
            return true;
   81aaa:	2001      	movs	r0, #1
   81aac:	4770      	bx	lr

            /* VCC-INT Setting */
        case REQ_VCCINT:
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   81aae:	4b0c      	ldr	r3, [pc, #48]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81ab0:	4a14      	ldr	r2, [pc, #80]	; (81b04 <fpga_target_setup_out_received+0xe0>)
   81ab2:	611a      	str	r2, [r3, #16]
            return true;
   81ab4:	2001      	movs	r0, #1
   81ab6:	4770      	bx	lr

		/* Send SPI commands to FPGA-attached SPI flash */
		case REQ_FPGASPI_PROGRAM:
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   81ab8:	4b09      	ldr	r3, [pc, #36]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81aba:	4a13      	ldr	r2, [pc, #76]	; (81b08 <fpga_target_setup_out_received+0xe4>)
   81abc:	611a      	str	r2, [r3, #16]
			return true;
   81abe:	2001      	movs	r0, #1
   81ac0:	4770      	bx	lr

        /* IO Util Setup */
        case REQ_FPGAIO_UTIL:
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   81ac2:	4b07      	ldr	r3, [pc, #28]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81ac4:	4a11      	ldr	r2, [pc, #68]	; (81b0c <fpga_target_setup_out_received+0xe8>)
   81ac6:	611a      	str	r2, [r3, #16]
            return true;
   81ac8:	2001      	movs	r0, #1
   81aca:	4770      	bx	lr

        /* Bit-Banged SPI1 */
        case FREQ_FPGASPI1_XFER:
            udd_g_ctrlreq.callback = ctrl_spi1util;
   81acc:	4b04      	ldr	r3, [pc, #16]	; (81ae0 <fpga_target_setup_out_received+0xbc>)
   81ace:	4a10      	ldr	r2, [pc, #64]	; (81b10 <fpga_target_setup_out_received+0xec>)
   81ad0:	611a      	str	r2, [r3, #16]
            return true;
   81ad2:	2001      	movs	r0, #1
   81ad4:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest){
   81ad6:	2000      	movs	r0, #0

        default:
            return false;
    }					
}
   81ad8:	4770      	bx	lr
   81ada:	bf00      	nop
   81adc:	20000f28 	.word	0x20000f28
   81ae0:	20001958 	.word	0x20001958
   81ae4:	00081b8d 	.word	0x00081b8d
   81ae8:	00081b15 	.word	0x00081b15
   81aec:	00081b7d 	.word	0x00081b7d
   81af0:	00081b41 	.word	0x00081b41
   81af4:	00081bb9 	.word	0x00081bb9
   81af8:	00081ca9 	.word	0x00081ca9
   81afc:	00081c7d 	.word	0x00081c7d
   81b00:	00082125 	.word	0x00082125
   81b04:	000820a9 	.word	0x000820a9
   81b08:	00082035 	.word	0x00082035
   81b0c:	00081f0d 	.word	0x00081f0d
   81b10:	00081e99 	.word	0x00081e99

00081b14 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   81b14:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81b16:	4b06      	ldr	r3, [pc, #24]	; (81b30 <ctrl_readmem_ctrl+0x1c>)
   81b18:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81b1a:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   81b1c:	2005      	movs	r0, #5
   81b1e:	4b05      	ldr	r3, [pc, #20]	; (81b34 <ctrl_readmem_ctrl+0x20>)
   81b20:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   81b22:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   81b26:	4b04      	ldr	r3, [pc, #16]	; (81b38 <ctrl_readmem_ctrl+0x24>)
   81b28:	601c      	str	r4, [r3, #0]
    ctrlmemread_size = buflen;
   81b2a:	4b04      	ldr	r3, [pc, #16]	; (81b3c <ctrl_readmem_ctrl+0x28>)
   81b2c:	601d      	str	r5, [r3, #0]
}
   81b2e:	bd38      	pop	{r3, r4, r5, pc}
   81b30:	2000110c 	.word	0x2000110c
   81b34:	000806f5 	.word	0x000806f5
   81b38:	20000f2c 	.word	0x20000f2c
   81b3c:	20000f30 	.word	0x20000f30

00081b40 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   81b40:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81b42:	4b0a      	ldr	r3, [pc, #40]	; (81b6c <ctrl_writemem_ctrl+0x2c>)
   81b44:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81b46:	685d      	ldr	r5, [r3, #4]
    FPGA_setlock(fpga_generic);
   81b48:	2001      	movs	r0, #1
   81b4a:	4b09      	ldr	r3, [pc, #36]	; (81b70 <ctrl_writemem_ctrl+0x30>)
   81b4c:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   81b4e:	2300      	movs	r3, #0
   81b50:	42a3      	cmp	r3, r4
   81b52:	d207      	bcs.n	81b64 <ctrl_writemem_ctrl+0x24>
        xram[i+address] = ctrlbuf_payload[i];
   81b54:	195a      	adds	r2, r3, r5
   81b56:	4907      	ldr	r1, [pc, #28]	; (81b74 <ctrl_writemem_ctrl+0x34>)
   81b58:	6809      	ldr	r1, [r1, #0]
   81b5a:	4807      	ldr	r0, [pc, #28]	; (81b78 <ctrl_writemem_ctrl+0x38>)
   81b5c:	5c18      	ldrb	r0, [r3, r0]
   81b5e:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   81b60:	3301      	adds	r3, #1
   81b62:	e7f5      	b.n	81b50 <ctrl_writemem_ctrl+0x10>
    FPGA_setlock(fpga_unlocked);
   81b64:	2000      	movs	r0, #0
   81b66:	4b02      	ldr	r3, [pc, #8]	; (81b70 <ctrl_writemem_ctrl+0x30>)
   81b68:	4798      	blx	r3
}
   81b6a:	bd38      	pop	{r3, r4, r5, pc}
   81b6c:	2000110c 	.word	0x2000110c
   81b70:	000806f5 	.word	0x000806f5
   81b74:	200001d8 	.word	0x200001d8
   81b78:	20001114 	.word	0x20001114

00081b7c <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   81b7c:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   81b7e:	2004      	movs	r0, #4
   81b80:	4b01      	ldr	r3, [pc, #4]	; (81b88 <ctrl_writemem_bulk+0xc>)
   81b82:	4798      	blx	r3
}
   81b84:	bd08      	pop	{r3, pc}
   81b86:	bf00      	nop
   81b88:	000806f5 	.word	0x000806f5

00081b8c <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   81b8c:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   81b8e:	4b06      	ldr	r3, [pc, #24]	; (81ba8 <ctrl_readmem_bulk+0x1c>)
   81b90:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81b92:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_blockin);
   81b94:	2002      	movs	r0, #2
   81b96:	4b05      	ldr	r3, [pc, #20]	; (81bac <ctrl_readmem_bulk+0x20>)
   81b98:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   81b9a:	4a05      	ldr	r2, [pc, #20]	; (81bb0 <ctrl_readmem_bulk+0x24>)
   81b9c:	4629      	mov	r1, r5
   81b9e:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   81ba2:	4b04      	ldr	r3, [pc, #16]	; (81bb4 <ctrl_readmem_bulk+0x28>)
   81ba4:	4798      	blx	r3
}
   81ba6:	bd38      	pop	{r3, r4, r5, pc}
   81ba8:	2000110c 	.word	0x2000110c
   81bac:	000806f5 	.word	0x000806f5
   81bb0:	00081c89 	.word	0x00081c89
   81bb4:	000838e1 	.word	0x000838e1

00081bb8 <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   81bb8:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   81bba:	4b28      	ldr	r3, [pc, #160]	; (81c5c <ctrl_writemem_ctrl_sam3u+0xa4>)
   81bbc:	681c      	ldr	r4, [r3, #0]
   81bbe:	3c04      	subs	r4, #4
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81bc0:	685e      	ldr	r6, [r3, #4]
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   81bc2:	689d      	ldr	r5, [r3, #8]
    for(unsigned int i = 0; i < buflen; i++){
   81bc4:	2300      	movs	r3, #0
   81bc6:	42a3      	cmp	r3, r4
   81bc8:	d206      	bcs.n	81bd8 <ctrl_writemem_ctrl_sam3u+0x20>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   81bca:	1999      	adds	r1, r3, r6
   81bcc:	4a24      	ldr	r2, [pc, #144]	; (81c60 <ctrl_writemem_ctrl_sam3u+0xa8>)
   81bce:	5c98      	ldrb	r0, [r3, r2]
   81bd0:	4a24      	ldr	r2, [pc, #144]	; (81c64 <ctrl_writemem_ctrl_sam3u+0xac>)
   81bd2:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   81bd4:	3301      	adds	r3, #1
   81bd6:	e7f6      	b.n	81bc6 <ctrl_writemem_ctrl_sam3u+0xe>
    if ( flags & 0x1 ){ // encryptions have been requested
   81bd8:	f015 0f01 	tst.w	r5, #1
   81bdc:	d03c      	beq.n	81c58 <ctrl_writemem_ctrl_sam3u+0xa0>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   81bde:	4b21      	ldr	r3, [pc, #132]	; (81c64 <ctrl_writemem_ctrl_sam3u+0xac>)
   81be0:	681c      	ldr	r4, [r3, #0]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81be2:	2600      	movs	r6, #0
   81be4:	e01c      	b.n	81c20 <ctrl_writemem_ctrl_sam3u+0x68>
                for(unsigned int j = 0; j < 16; j++){
   81be6:	2300      	movs	r3, #0
   81be8:	2b0f      	cmp	r3, #15
   81bea:	d822      	bhi.n	81c32 <ctrl_writemem_ctrl_sam3u+0x7a>
                    xram[j+0x400+0x100] = seed >> 24;
   81bec:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
   81bf0:	491d      	ldr	r1, [pc, #116]	; (81c68 <ctrl_writemem_ctrl_sam3u+0xb0>)
   81bf2:	6809      	ldr	r1, [r1, #0]
   81bf4:	0e20      	lsrs	r0, r4, #24
   81bf6:	5488      	strb	r0, [r1, r2]
                    seed += (seed*seed) | 0x5;
   81bf8:	fb04 f204 	mul.w	r2, r4, r4
   81bfc:	f042 0205 	orr.w	r2, r2, #5
   81c00:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   81c02:	3301      	adds	r3, #1
   81c04:	e7f0      	b.n	81be8 <ctrl_writemem_ctrl_sam3u+0x30>
            FPGA_setlock(fpga_unlocked);
   81c06:	2000      	movs	r0, #0
   81c08:	4b18      	ldr	r3, [pc, #96]	; (81c6c <ctrl_writemem_ctrl_sam3u+0xb4>)
   81c0a:	4798      	blx	r3
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81c0c:	2031      	movs	r0, #49	; 0x31
   81c0e:	4b18      	ldr	r3, [pc, #96]	; (81c70 <ctrl_writemem_ctrl_sam3u+0xb8>)
   81c10:	4798      	blx	r3
            delay_cycles(50);
   81c12:	2032      	movs	r0, #50	; 0x32
   81c14:	4b17      	ldr	r3, [pc, #92]	; (81c74 <ctrl_writemem_ctrl_sam3u+0xbc>)
   81c16:	4798      	blx	r3
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   81c18:	2031      	movs	r0, #49	; 0x31
   81c1a:	4b17      	ldr	r3, [pc, #92]	; (81c78 <ctrl_writemem_ctrl_sam3u+0xc0>)
   81c1c:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81c1e:	3601      	adds	r6, #1
   81c20:	ebb6 4f15 	cmp.w	r6, r5, lsr #16
   81c24:	d218      	bcs.n	81c58 <ctrl_writemem_ctrl_sam3u+0xa0>
            FPGA_setlock(fpga_generic);
   81c26:	2001      	movs	r0, #1
   81c28:	4b10      	ldr	r3, [pc, #64]	; (81c6c <ctrl_writemem_ctrl_sam3u+0xb4>)
   81c2a:	4798      	blx	r3
            if ((flags >> 1) & 0x1){ // write the key
   81c2c:	f015 0f02 	tst.w	r5, #2
   81c30:	d1d9      	bne.n	81be6 <ctrl_writemem_ctrl_sam3u+0x2e>
            if ((flags >> 2) & 0x1){ // write the pts
   81c32:	f015 0f04 	tst.w	r5, #4
   81c36:	d0e6      	beq.n	81c06 <ctrl_writemem_ctrl_sam3u+0x4e>
                for(unsigned int j = 0; j < 16; j++){
   81c38:	2300      	movs	r3, #0
   81c3a:	2b0f      	cmp	r3, #15
   81c3c:	d8e3      	bhi.n	81c06 <ctrl_writemem_ctrl_sam3u+0x4e>
                    xram[j+0x400+0x200] = seed >> 24;
   81c3e:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
   81c42:	4909      	ldr	r1, [pc, #36]	; (81c68 <ctrl_writemem_ctrl_sam3u+0xb0>)
   81c44:	6809      	ldr	r1, [r1, #0]
   81c46:	0e20      	lsrs	r0, r4, #24
   81c48:	5488      	strb	r0, [r1, r2]
                    seed += (seed*seed) | 0x5;
   81c4a:	fb04 f204 	mul.w	r2, r4, r4
   81c4e:	f042 0205 	orr.w	r2, r2, #5
   81c52:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   81c54:	3301      	adds	r3, #1
   81c56:	e7f0      	b.n	81c3a <ctrl_writemem_ctrl_sam3u+0x82>
}
   81c58:	bd70      	pop	{r4, r5, r6, pc}
   81c5a:	bf00      	nop
   81c5c:	2000110c 	.word	0x2000110c
   81c60:	20001118 	.word	0x20001118
   81c64:	2000154c 	.word	0x2000154c
   81c68:	200001d8 	.word	0x200001d8
   81c6c:	000806f5 	.word	0x000806f5
   81c70:	00082565 	.word	0x00082565
   81c74:	20000001 	.word	0x20000001
   81c78:	00082581 	.word	0x00082581

00081c7c <ctrl_xmega_program_void>:
{
   81c7c:	b508      	push	{r3, lr}
    XPROGProtocol_Command();
   81c7e:	4b01      	ldr	r3, [pc, #4]	; (81c84 <ctrl_xmega_program_void+0x8>)
   81c80:	4798      	blx	r3
}
   81c82:	bd08      	pop	{r3, pc}
   81c84:	000812b9 	.word	0x000812b9

00081c88 <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   81c88:	b100      	cbz	r0, 81c8c <main_vendor_bulk_in_received+0x4>
   81c8a:	4770      	bx	lr
{
   81c8c:	b508      	push	{r3, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   81c8e:	4b04      	ldr	r3, [pc, #16]	; (81ca0 <main_vendor_bulk_in_received+0x18>)
   81c90:	4798      	blx	r3
   81c92:	2802      	cmp	r0, #2
   81c94:	d000      	beq.n	81c98 <main_vendor_bulk_in_received+0x10>
}
   81c96:	bd08      	pop	{r3, pc}
        FPGA_setlock(fpga_unlocked);
   81c98:	2000      	movs	r0, #0
   81c9a:	4b02      	ldr	r3, [pc, #8]	; (81ca4 <main_vendor_bulk_in_received+0x1c>)
   81c9c:	4798      	blx	r3
   81c9e:	e7fa      	b.n	81c96 <main_vendor_bulk_in_received+0xe>
   81ca0:	0008072d 	.word	0x0008072d
   81ca4:	000806f5 	.word	0x000806f5

00081ca8 <ctrl_progfpga_bulk>:
void ctrl_progfpga_bulk(void){
   81ca8:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.wValue){
   81caa:	4b0b      	ldr	r3, [pc, #44]	; (81cd8 <ctrl_progfpga_bulk+0x30>)
   81cac:	885b      	ldrh	r3, [r3, #2]
   81cae:	2ba1      	cmp	r3, #161	; 0xa1
   81cb0:	d007      	beq.n	81cc2 <ctrl_progfpga_bulk+0x1a>
   81cb2:	2ba2      	cmp	r3, #162	; 0xa2
   81cb4:	d00b      	beq.n	81cce <ctrl_progfpga_bulk+0x26>
   81cb6:	2ba0      	cmp	r3, #160	; 0xa0
   81cb8:	d000      	beq.n	81cbc <ctrl_progfpga_bulk+0x14>
}
   81cba:	bd08      	pop	{r3, pc}
            fpga_program_setup1();			
   81cbc:	4b07      	ldr	r3, [pc, #28]	; (81cdc <ctrl_progfpga_bulk+0x34>)
   81cbe:	4798      	blx	r3
            break;
   81cc0:	e7fb      	b.n	81cba <ctrl_progfpga_bulk+0x12>
            fpga_program_setup2();
   81cc2:	4b07      	ldr	r3, [pc, #28]	; (81ce0 <ctrl_progfpga_bulk+0x38>)
   81cc4:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   81cc6:	4b07      	ldr	r3, [pc, #28]	; (81ce4 <ctrl_progfpga_bulk+0x3c>)
   81cc8:	220a      	movs	r2, #10
   81cca:	701a      	strb	r2, [r3, #0]
            break;
   81ccc:	e7f5      	b.n	81cba <ctrl_progfpga_bulk+0x12>
            blockendpoint_usage = bep_emem;
   81cce:	4b05      	ldr	r3, [pc, #20]	; (81ce4 <ctrl_progfpga_bulk+0x3c>)
   81cd0:	2200      	movs	r2, #0
   81cd2:	701a      	strb	r2, [r3, #0]
}
   81cd4:	e7f1      	b.n	81cba <ctrl_progfpga_bulk+0x12>
   81cd6:	bf00      	nop
   81cd8:	20001958 	.word	0x20001958
   81cdc:	00080755 	.word	0x00080755
   81ce0:	000807dd 	.word	0x000807dd
   81ce4:	20000f28 	.word	0x20000f28

00081ce8 <main_vendor_bulk_out_received>:
{
   81ce8:	b538      	push	{r3, r4, r5, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   81cea:	b938      	cbnz	r0, 81cfc <main_vendor_bulk_out_received+0x14>
   81cec:	460c      	mov	r4, r1
    if (blockendpoint_usage == bep_emem){
   81cee:	4b19      	ldr	r3, [pc, #100]	; (81d54 <main_vendor_bulk_out_received+0x6c>)
   81cf0:	781b      	ldrb	r3, [r3, #0]
   81cf2:	b1eb      	cbz	r3, 81d30 <main_vendor_bulk_out_received+0x48>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81cf4:	2b0a      	cmp	r3, #10
   81cf6:	d114      	bne.n	81d22 <main_vendor_bulk_out_received+0x3a>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81cf8:	2500      	movs	r5, #0
   81cfa:	e024      	b.n	81d46 <main_vendor_bulk_out_received+0x5e>
        udi_vendor_bulk_out_run(
   81cfc:	4a16      	ldr	r2, [pc, #88]	; (81d58 <main_vendor_bulk_out_received+0x70>)
   81cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81d02:	4816      	ldr	r0, [pc, #88]	; (81d5c <main_vendor_bulk_out_received+0x74>)
   81d04:	4b16      	ldr	r3, [pc, #88]	; (81d60 <main_vendor_bulk_out_received+0x78>)
   81d06:	4798      	blx	r3
        return;
   81d08:	e011      	b.n	81d2e <main_vendor_bulk_out_received+0x46>
            xram[i] = main_buf_loopback[i];
   81d0a:	4a16      	ldr	r2, [pc, #88]	; (81d64 <main_vendor_bulk_out_received+0x7c>)
   81d0c:	6812      	ldr	r2, [r2, #0]
   81d0e:	4913      	ldr	r1, [pc, #76]	; (81d5c <main_vendor_bulk_out_received+0x74>)
   81d10:	5cc9      	ldrb	r1, [r1, r3]
   81d12:	54d1      	strb	r1, [r2, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d14:	3301      	adds	r3, #1
   81d16:	42a3      	cmp	r3, r4
   81d18:	d3f7      	bcc.n	81d0a <main_vendor_bulk_out_received+0x22>
        if (FPGA_lockstatus() == fpga_blockout){
   81d1a:	4b13      	ldr	r3, [pc, #76]	; (81d68 <main_vendor_bulk_out_received+0x80>)
   81d1c:	4798      	blx	r3
   81d1e:	2804      	cmp	r0, #4
   81d20:	d008      	beq.n	81d34 <main_vendor_bulk_out_received+0x4c>
    udi_vendor_bulk_out_run(
   81d22:	4a0d      	ldr	r2, [pc, #52]	; (81d58 <main_vendor_bulk_out_received+0x70>)
   81d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81d28:	480c      	ldr	r0, [pc, #48]	; (81d5c <main_vendor_bulk_out_received+0x74>)
   81d2a:	4b0d      	ldr	r3, [pc, #52]	; (81d60 <main_vendor_bulk_out_received+0x78>)
   81d2c:	4798      	blx	r3
}
   81d2e:	bd38      	pop	{r3, r4, r5, pc}
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d30:	2300      	movs	r3, #0
   81d32:	e7f0      	b.n	81d16 <main_vendor_bulk_out_received+0x2e>
            FPGA_setlock(fpga_unlocked);
   81d34:	2000      	movs	r0, #0
   81d36:	4b0d      	ldr	r3, [pc, #52]	; (81d6c <main_vendor_bulk_out_received+0x84>)
   81d38:	4798      	blx	r3
   81d3a:	e7f2      	b.n	81d22 <main_vendor_bulk_out_received+0x3a>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81d3c:	4b07      	ldr	r3, [pc, #28]	; (81d5c <main_vendor_bulk_out_received+0x74>)
   81d3e:	5d58      	ldrb	r0, [r3, r5]
   81d40:	4b0b      	ldr	r3, [pc, #44]	; (81d70 <main_vendor_bulk_out_received+0x88>)
   81d42:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d44:	3501      	adds	r5, #1
   81d46:	42a5      	cmp	r5, r4
   81d48:	d3f8      	bcc.n	81d3c <main_vendor_bulk_out_received+0x54>
        FPGA_CCLK_LOW();
   81d4a:	200f      	movs	r0, #15
   81d4c:	4b09      	ldr	r3, [pc, #36]	; (81d74 <main_vendor_bulk_out_received+0x8c>)
   81d4e:	4798      	blx	r3
   81d50:	e7e7      	b.n	81d22 <main_vendor_bulk_out_received+0x3a>
   81d52:	bf00      	nop
   81d54:	20000f28 	.word	0x20000f28
   81d58:	00081ce9 	.word	0x00081ce9
   81d5c:	2000114c 	.word	0x2000114c
   81d60:	000838fd 	.word	0x000838fd
   81d64:	200001d8 	.word	0x200001d8
   81d68:	0008072d 	.word	0x0008072d
   81d6c:	000806f5 	.word	0x000806f5
   81d70:	000807ed 	.word	0x000807ed
   81d74:	00082581 	.word	0x00082581

00081d78 <fpga_target_setup_in_received>:
{
   81d78:	b538      	push	{r3, r4, r5, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81d7a:	4b3b      	ldr	r3, [pc, #236]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81d7c:	785b      	ldrb	r3, [r3, #1]
   81d7e:	3b12      	subs	r3, #18
   81d80:	2b23      	cmp	r3, #35	; 0x23
   81d82:	d86b      	bhi.n	81e5c <fpga_target_setup_in_received+0xe4>
   81d84:	e8df f003 	tbb	[pc, r3]
   81d88:	1d6a6a12 	.word	0x1d6a6a12
   81d8c:	6a6a6a6a 	.word	0x6a6a6a6a
   81d90:	6a6a6a6a 	.word	0x6a6a6a6a
   81d94:	6a346a6a 	.word	0x6a346a6a
   81d98:	6a6a6a6a 	.word	0x6a6a6a6a
   81d9c:	6a6a6a6a 	.word	0x6a6a6a6a
   81da0:	6a6a6a6a 	.word	0x6a6a6a6a
   81da4:	473a6a6a 	.word	0x473a6a6a
   81da8:	606a566a 	.word	0x606a566a
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   81dac:	4a2e      	ldr	r2, [pc, #184]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81dae:	4b2f      	ldr	r3, [pc, #188]	; (81e6c <fpga_target_setup_in_received+0xf4>)
   81db0:	681b      	ldr	r3, [r3, #0]
   81db2:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81db4:	4b2e      	ldr	r3, [pc, #184]	; (81e70 <fpga_target_setup_in_received+0xf8>)
   81db6:	6819      	ldr	r1, [r3, #0]
   81db8:	8191      	strh	r1, [r2, #12]
            ctrlmemread_size = 0;
   81dba:	2200      	movs	r2, #0
   81dbc:	601a      	str	r2, [r3, #0]
            return true;
   81dbe:	2001      	movs	r0, #1
   81dc0:	e04d      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
            respbuf[0] = FPGA_ISDONE();
   81dc2:	2007      	movs	r0, #7
   81dc4:	4d2b      	ldr	r5, [pc, #172]	; (81e74 <fpga_target_setup_in_received+0xfc>)
   81dc6:	47a8      	blx	r5
   81dc8:	3800      	subs	r0, #0
   81dca:	bf18      	it	ne
   81dcc:	2001      	movne	r0, #1
   81dce:	4c2a      	ldr	r4, [pc, #168]	; (81e78 <fpga_target_setup_in_received+0x100>)
   81dd0:	7020      	strb	r0, [r4, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   81dd2:	205d      	movs	r0, #93	; 0x5d
   81dd4:	47a8      	blx	r5
   81dd6:	3800      	subs	r0, #0
   81dd8:	bf18      	it	ne
   81dda:	2001      	movne	r0, #1
   81ddc:	7060      	strb	r0, [r4, #1]
            respbuf[2] = 0;
   81dde:	2300      	movs	r3, #0
   81de0:	70a3      	strb	r3, [r4, #2]
            respbuf[3] = 0;
   81de2:	70e3      	strb	r3, [r4, #3]
            udd_g_ctrlreq.payload = respbuf;
   81de4:	4b20      	ldr	r3, [pc, #128]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81de6:	609c      	str	r4, [r3, #8]
            udd_g_ctrlreq.payload_size = 4;
   81de8:	2204      	movs	r2, #4
   81dea:	819a      	strh	r2, [r3, #12]
            return true;
   81dec:	2001      	movs	r0, #1
   81dee:	e036      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
            return XPROGProtocol_Command();
   81df0:	4b22      	ldr	r3, [pc, #136]	; (81e7c <fpga_target_setup_in_received+0x104>)
   81df2:	4798      	blx	r3
   81df4:	3800      	subs	r0, #0
   81df6:	bf18      	it	ne
   81df8:	2001      	movne	r0, #1
   81dfa:	e030      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
            respbuf[0] = cdce906_status;
   81dfc:	4b1e      	ldr	r3, [pc, #120]	; (81e78 <fpga_target_setup_in_received+0x100>)
   81dfe:	4a20      	ldr	r2, [pc, #128]	; (81e80 <fpga_target_setup_in_received+0x108>)
   81e00:	7812      	ldrb	r2, [r2, #0]
   81e02:	701a      	strb	r2, [r3, #0]
            respbuf[1] = cdce906_data;
   81e04:	4a1f      	ldr	r2, [pc, #124]	; (81e84 <fpga_target_setup_in_received+0x10c>)
   81e06:	7812      	ldrb	r2, [r2, #0]
   81e08:	705a      	strb	r2, [r3, #1]
            udd_g_ctrlreq.payload = respbuf;
   81e0a:	4a17      	ldr	r2, [pc, #92]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81e0c:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 2;
   81e0e:	2302      	movs	r3, #2
   81e10:	8193      	strh	r3, [r2, #12]
            return true;
   81e12:	2001      	movs	r0, #1
   81e14:	e023      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
            respbuf[0] = vccint_status;
   81e16:	4b18      	ldr	r3, [pc, #96]	; (81e78 <fpga_target_setup_in_received+0x100>)
   81e18:	4a1b      	ldr	r2, [pc, #108]	; (81e88 <fpga_target_setup_in_received+0x110>)
   81e1a:	7812      	ldrb	r2, [r2, #0]
   81e1c:	701a      	strb	r2, [r3, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   81e1e:	4a1b      	ldr	r2, [pc, #108]	; (81e8c <fpga_target_setup_in_received+0x114>)
   81e20:	8812      	ldrh	r2, [r2, #0]
   81e22:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   81e24:	0a12      	lsrs	r2, r2, #8
   81e26:	709a      	strb	r2, [r3, #2]
            udd_g_ctrlreq.payload = respbuf;
   81e28:	4a0f      	ldr	r2, [pc, #60]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81e2a:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 3;
   81e2c:	2303      	movs	r3, #3
   81e2e:	8193      	strh	r3, [r2, #12]
            return true;
   81e30:	2001      	movs	r0, #1
   81e32:	e014      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   81e34:	4b0c      	ldr	r3, [pc, #48]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81e36:	88db      	ldrh	r3, [r3, #6]
   81e38:	2b40      	cmp	r3, #64	; 0x40
   81e3a:	d811      	bhi.n	81e60 <fpga_target_setup_in_received+0xe8>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   81e3c:	4a0a      	ldr	r2, [pc, #40]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81e3e:	4914      	ldr	r1, [pc, #80]	; (81e90 <fpga_target_setup_in_received+0x118>)
   81e40:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81e42:	8193      	strh	r3, [r2, #12]
			return true;
   81e44:	2001      	movs	r0, #1
   81e46:	e00a      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   81e48:	4b07      	ldr	r3, [pc, #28]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81e4a:	88db      	ldrh	r3, [r3, #6]
   81e4c:	2b40      	cmp	r3, #64	; 0x40
   81e4e:	d809      	bhi.n	81e64 <fpga_target_setup_in_received+0xec>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   81e50:	4a05      	ldr	r2, [pc, #20]	; (81e68 <fpga_target_setup_in_received+0xf0>)
   81e52:	4910      	ldr	r1, [pc, #64]	; (81e94 <fpga_target_setup_in_received+0x11c>)
   81e54:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81e56:	8193      	strh	r3, [r2, #12]
			return true;
   81e58:	2001      	movs	r0, #1
   81e5a:	e000      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
    switch(udd_g_ctrlreq.req.bRequest){
   81e5c:	2000      	movs	r0, #0
}
   81e5e:	bd38      	pop	{r3, r4, r5, pc}
                return false;
   81e60:	2000      	movs	r0, #0
   81e62:	e7fc      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
                return false;
   81e64:	2000      	movs	r0, #0
   81e66:	e7fa      	b.n	81e5e <fpga_target_setup_in_received+0xe6>
   81e68:	20001958 	.word	0x20001958
   81e6c:	20000f2c 	.word	0x20000f2c
   81e70:	20000f30 	.word	0x20000f30
   81e74:	00082549 	.word	0x00082549
   81e78:	200010cc 	.word	0x200010cc
   81e7c:	000812b9 	.word	0x000812b9
   81e80:	20000f2a 	.word	0x20000f2a
   81e84:	20000f29 	.word	0x20000f29
   81e88:	20000fb4 	.word	0x20000fb4
   81e8c:	200001fe 	.word	0x200001fe
   81e90:	20000f34 	.word	0x20000f34
   81e94:	20000f74 	.word	0x20000f74

00081e98 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   81e98:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue){
   81e9a:	4b15      	ldr	r3, [pc, #84]	; (81ef0 <ctrl_spi1util+0x58>)
   81e9c:	885b      	ldrh	r3, [r3, #2]
   81e9e:	3ba0      	subs	r3, #160	; 0xa0
   81ea0:	2b04      	cmp	r3, #4
   81ea2:	d806      	bhi.n	81eb2 <ctrl_spi1util+0x1a>
   81ea4:	e8df f003 	tbb	[pc, r3]
   81ea8:	0c090603 	.word	0x0c090603
   81eac:	0f          	.byte	0x0f
   81ead:	00          	.byte	0x00
			spi1util_init();			
   81eae:	4b11      	ldr	r3, [pc, #68]	; (81ef4 <ctrl_spi1util+0x5c>)
   81eb0:	4798      	blx	r3
}
   81eb2:	bd10      	pop	{r4, pc}
			spi1util_deinit();
   81eb4:	4b10      	ldr	r3, [pc, #64]	; (81ef8 <ctrl_spi1util+0x60>)
   81eb6:	4798      	blx	r3
			break;
   81eb8:	e7fb      	b.n	81eb2 <ctrl_spi1util+0x1a>
			spi1util_cs_low();
   81eba:	4b10      	ldr	r3, [pc, #64]	; (81efc <ctrl_spi1util+0x64>)
   81ebc:	4798      	blx	r3
			break;
   81ebe:	e7f8      	b.n	81eb2 <ctrl_spi1util+0x1a>
			spi1util_cs_high();
   81ec0:	4b0f      	ldr	r3, [pc, #60]	; (81f00 <ctrl_spi1util+0x68>)
   81ec2:	4798      	blx	r3
			break;
   81ec4:	e7f5      	b.n	81eb2 <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81ec6:	4b0a      	ldr	r3, [pc, #40]	; (81ef0 <ctrl_spi1util+0x58>)
   81ec8:	88da      	ldrh	r2, [r3, #6]
   81eca:	899b      	ldrh	r3, [r3, #12]
   81ecc:	429a      	cmp	r2, r3
   81ece:	d8f0      	bhi.n	81eb2 <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   81ed0:	2a40      	cmp	r2, #64	; 0x40
   81ed2:	d8ee      	bhi.n	81eb2 <ctrl_spi1util+0x1a>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81ed4:	2400      	movs	r4, #0
   81ed6:	4b06      	ldr	r3, [pc, #24]	; (81ef0 <ctrl_spi1util+0x58>)
   81ed8:	88db      	ldrh	r3, [r3, #6]
   81eda:	42a3      	cmp	r3, r4
   81edc:	dde9      	ble.n	81eb2 <ctrl_spi1util+0x1a>
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   81ede:	4b04      	ldr	r3, [pc, #16]	; (81ef0 <ctrl_spi1util+0x58>)
   81ee0:	689b      	ldr	r3, [r3, #8]
   81ee2:	5d18      	ldrb	r0, [r3, r4]
   81ee4:	4b07      	ldr	r3, [pc, #28]	; (81f04 <ctrl_spi1util+0x6c>)
   81ee6:	4798      	blx	r3
   81ee8:	4b07      	ldr	r3, [pc, #28]	; (81f08 <ctrl_spi1util+0x70>)
   81eea:	5518      	strb	r0, [r3, r4]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81eec:	3401      	adds	r4, #1
   81eee:	e7f2      	b.n	81ed6 <ctrl_spi1util+0x3e>
   81ef0:	20001958 	.word	0x20001958
   81ef4:	000809ed 	.word	0x000809ed
   81ef8:	00080abd 	.word	0x00080abd
   81efc:	00080a11 	.word	0x00080a11
   81f00:	00080a25 	.word	0x00080a25
   81f04:	00080a39 	.word	0x00080a39
   81f08:	20000f74 	.word	0x20000f74

00081f0c <ctrl_fpgaioutil>:
static void ctrl_fpgaioutil(void){
   81f0c:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength != 2){
   81f0e:	4b41      	ldr	r3, [pc, #260]	; (82014 <ctrl_fpgaioutil+0x108>)
   81f10:	88db      	ldrh	r3, [r3, #6]
   81f12:	2b02      	cmp	r3, #2
   81f14:	d10d      	bne.n	81f32 <ctrl_fpgaioutil+0x26>
    int pin = udd_g_ctrlreq.payload[0];
   81f16:	4b3f      	ldr	r3, [pc, #252]	; (82014 <ctrl_fpgaioutil+0x108>)
   81f18:	689b      	ldr	r3, [r3, #8]
   81f1a:	781d      	ldrb	r5, [r3, #0]
    int config = udd_g_ctrlreq.payload[1];
   81f1c:	785c      	ldrb	r4, [r3, #1]
    if ((pin < 0) || (pin > 95)){
   81f1e:	2d5f      	cmp	r5, #95	; 0x5f
   81f20:	d807      	bhi.n	81f32 <ctrl_fpgaioutil+0x26>
	switch(udd_g_ctrlreq.req.wValue){
   81f22:	4b3c      	ldr	r3, [pc, #240]	; (82014 <ctrl_fpgaioutil+0x108>)
   81f24:	885b      	ldrh	r3, [r3, #2]
   81f26:	2ba1      	cmp	r3, #161	; 0xa1
   81f28:	d064      	beq.n	81ff4 <ctrl_fpgaioutil+0xe8>
   81f2a:	2ba2      	cmp	r3, #162	; 0xa2
   81f2c:	d067      	beq.n	81ffe <ctrl_fpgaioutil+0xf2>
   81f2e:	2ba0      	cmp	r3, #160	; 0xa0
   81f30:	d000      	beq.n	81f34 <ctrl_fpgaioutil+0x28>
}
   81f32:	bd38      	pop	{r3, r4, r5, pc}
            switch(config)
   81f34:	1e63      	subs	r3, r4, #1
   81f36:	2b12      	cmp	r3, #18
   81f38:	d857      	bhi.n	81fea <ctrl_fpgaioutil+0xde>
   81f3a:	e8df f003 	tbb	[pc, r3]
   81f3e:	100a      	.short	0x100a
   81f40:	56565656 	.word	0x56565656
   81f44:	56565656 	.word	0x56565656
   81f48:	56565656 	.word	0x56565656
   81f4c:	36261656 	.word	0x36261656
   81f50:	46          	.byte	0x46
   81f51:	00          	.byte	0x00
                    gpio_configure_pin(pin, PIO_INPUT);
   81f52:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81f56:	4628      	mov	r0, r5
   81f58:	4b2f      	ldr	r3, [pc, #188]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81f5a:	4798      	blx	r3
                    break;
   81f5c:	e7e9      	b.n	81f32 <ctrl_fpgaioutil+0x26>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   81f5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f62:	4628      	mov	r0, r5
   81f64:	4b2c      	ldr	r3, [pc, #176]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81f66:	4798      	blx	r3
                    break;
   81f68:	e7e3      	b.n	81f32 <ctrl_fpgaioutil+0x26>
                    if(pin_spi1_mosi > -1){
   81f6a:	4b2c      	ldr	r3, [pc, #176]	; (8201c <ctrl_fpgaioutil+0x110>)
   81f6c:	6818      	ldr	r0, [r3, #0]
   81f6e:	2800      	cmp	r0, #0
   81f70:	da07      	bge.n	81f82 <ctrl_fpgaioutil+0x76>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   81f72:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81f76:	4628      	mov	r0, r5
   81f78:	4b27      	ldr	r3, [pc, #156]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81f7a:	4798      	blx	r3
                    pin_spi1_mosi = pin;
   81f7c:	4b27      	ldr	r3, [pc, #156]	; (8201c <ctrl_fpgaioutil+0x110>)
   81f7e:	601d      	str	r5, [r3, #0]
                    break;
   81f80:	e7d7      	b.n	81f32 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_mosi, PIO_DEFAULT);
   81f82:	2100      	movs	r1, #0
   81f84:	4b24      	ldr	r3, [pc, #144]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81f86:	4798      	blx	r3
   81f88:	e7f3      	b.n	81f72 <ctrl_fpgaioutil+0x66>
                    if(pin_spi1_miso > -1){
   81f8a:	4b25      	ldr	r3, [pc, #148]	; (82020 <ctrl_fpgaioutil+0x114>)
   81f8c:	6818      	ldr	r0, [r3, #0]
   81f8e:	2800      	cmp	r0, #0
   81f90:	da07      	bge.n	81fa2 <ctrl_fpgaioutil+0x96>
                    gpio_configure_pin(pin, PIO_INPUT);
   81f92:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81f96:	4628      	mov	r0, r5
   81f98:	4b1f      	ldr	r3, [pc, #124]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81f9a:	4798      	blx	r3
                    pin_spi1_miso = pin;
   81f9c:	4b20      	ldr	r3, [pc, #128]	; (82020 <ctrl_fpgaioutil+0x114>)
   81f9e:	601d      	str	r5, [r3, #0]
                    break;
   81fa0:	e7c7      	b.n	81f32 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   81fa2:	2100      	movs	r1, #0
   81fa4:	4b1c      	ldr	r3, [pc, #112]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81fa6:	4798      	blx	r3
   81fa8:	e7f3      	b.n	81f92 <ctrl_fpgaioutil+0x86>
                    if(pin_spi1_sck > -1){
   81faa:	4b1e      	ldr	r3, [pc, #120]	; (82024 <ctrl_fpgaioutil+0x118>)
   81fac:	6818      	ldr	r0, [r3, #0]
   81fae:	2800      	cmp	r0, #0
   81fb0:	da07      	bge.n	81fc2 <ctrl_fpgaioutil+0xb6>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   81fb2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81fb6:	4628      	mov	r0, r5
   81fb8:	4b17      	ldr	r3, [pc, #92]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81fba:	4798      	blx	r3
                    pin_spi1_sck = pin;
   81fbc:	4b19      	ldr	r3, [pc, #100]	; (82024 <ctrl_fpgaioutil+0x118>)
   81fbe:	601d      	str	r5, [r3, #0]
                    break;
   81fc0:	e7b7      	b.n	81f32 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   81fc2:	2100      	movs	r1, #0
   81fc4:	4b14      	ldr	r3, [pc, #80]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81fc6:	4798      	blx	r3
   81fc8:	e7f3      	b.n	81fb2 <ctrl_fpgaioutil+0xa6>
                    if(pin_spi1_cs > -1){
   81fca:	4b17      	ldr	r3, [pc, #92]	; (82028 <ctrl_fpgaioutil+0x11c>)
   81fcc:	6818      	ldr	r0, [r3, #0]
   81fce:	2800      	cmp	r0, #0
   81fd0:	da07      	bge.n	81fe2 <ctrl_fpgaioutil+0xd6>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   81fd2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fd6:	4628      	mov	r0, r5
   81fd8:	4b0f      	ldr	r3, [pc, #60]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81fda:	4798      	blx	r3
                    pin_spi1_cs = pin;                    
   81fdc:	4b12      	ldr	r3, [pc, #72]	; (82028 <ctrl_fpgaioutil+0x11c>)
   81fde:	601d      	str	r5, [r3, #0]
                    break;
   81fe0:	e7a7      	b.n	81f32 <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   81fe2:	2100      	movs	r1, #0
   81fe4:	4b0c      	ldr	r3, [pc, #48]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81fe6:	4798      	blx	r3
   81fe8:	e7f3      	b.n	81fd2 <ctrl_fpgaioutil+0xc6>
                    gpio_configure_pin(pin, PIO_DEFAULT);
   81fea:	2100      	movs	r1, #0
   81fec:	4628      	mov	r0, r5
   81fee:	4b0a      	ldr	r3, [pc, #40]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81ff0:	4798      	blx	r3
                    break;
   81ff2:	e79e      	b.n	81f32 <ctrl_fpgaioutil+0x26>
            gpio_configure_pin(pin, PIO_DEFAULT);
   81ff4:	2100      	movs	r1, #0
   81ff6:	4628      	mov	r0, r5
   81ff8:	4b07      	ldr	r3, [pc, #28]	; (82018 <ctrl_fpgaioutil+0x10c>)
   81ffa:	4798      	blx	r3
			break;
   81ffc:	e799      	b.n	81f32 <ctrl_fpgaioutil+0x26>
            if (config == 0){
   81ffe:	b12c      	cbz	r4, 8200c <ctrl_fpgaioutil+0x100>
            if (config == 1){
   82000:	2c01      	cmp	r4, #1
   82002:	d196      	bne.n	81f32 <ctrl_fpgaioutil+0x26>
                gpio_set_pin_high(pin);
   82004:	4628      	mov	r0, r5
   82006:	4b09      	ldr	r3, [pc, #36]	; (8202c <ctrl_fpgaioutil+0x120>)
   82008:	4798      	blx	r3
   8200a:	e792      	b.n	81f32 <ctrl_fpgaioutil+0x26>
                gpio_set_pin_low(pin);
   8200c:	4628      	mov	r0, r5
   8200e:	4b08      	ldr	r3, [pc, #32]	; (82030 <ctrl_fpgaioutil+0x124>)
   82010:	4798      	blx	r3
   82012:	e7f5      	b.n	82000 <ctrl_fpgaioutil+0xf4>
   82014:	20001958 	.word	0x20001958
   82018:	0008259d 	.word	0x0008259d
   8201c:	200001e4 	.word	0x200001e4
   82020:	200001e0 	.word	0x200001e0
   82024:	200001e8 	.word	0x200001e8
   82028:	200001dc 	.word	0x200001dc
   8202c:	00082565 	.word	0x00082565
   82030:	00082581 	.word	0x00082581

00082034 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   82034:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82036:	4b15      	ldr	r3, [pc, #84]	; (8208c <ctrl_progfpgaspi+0x58>)
   82038:	885b      	ldrh	r3, [r3, #2]
   8203a:	3ba0      	subs	r3, #160	; 0xa0
   8203c:	2b04      	cmp	r3, #4
   8203e:	d806      	bhi.n	8204e <ctrl_progfpgaspi+0x1a>
   82040:	e8df f003 	tbb	[pc, r3]
   82044:	0c090603 	.word	0x0c090603
   82048:	0f          	.byte	0x0f
   82049:	00          	.byte	0x00
			fpgaspi_program_init();			
   8204a:	4b11      	ldr	r3, [pc, #68]	; (82090 <ctrl_progfpgaspi+0x5c>)
   8204c:	4798      	blx	r3
}
   8204e:	bd10      	pop	{r4, pc}
			fpgaspi_program_deinit();
   82050:	4b10      	ldr	r3, [pc, #64]	; (82094 <ctrl_progfpgaspi+0x60>)
   82052:	4798      	blx	r3
			break;
   82054:	e7fb      	b.n	8204e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_low();
   82056:	4b10      	ldr	r3, [pc, #64]	; (82098 <ctrl_progfpgaspi+0x64>)
   82058:	4798      	blx	r3
			break;
   8205a:	e7f8      	b.n	8204e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_high();
   8205c:	4b0f      	ldr	r3, [pc, #60]	; (8209c <ctrl_progfpgaspi+0x68>)
   8205e:	4798      	blx	r3
			break;
   82060:	e7f5      	b.n	8204e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82062:	4b0a      	ldr	r3, [pc, #40]	; (8208c <ctrl_progfpgaspi+0x58>)
   82064:	88da      	ldrh	r2, [r3, #6]
   82066:	899b      	ldrh	r3, [r3, #12]
   82068:	429a      	cmp	r2, r3
   8206a:	d8f0      	bhi.n	8204e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   8206c:	2a40      	cmp	r2, #64	; 0x40
   8206e:	d8ee      	bhi.n	8204e <ctrl_progfpgaspi+0x1a>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82070:	2400      	movs	r4, #0
   82072:	4b06      	ldr	r3, [pc, #24]	; (8208c <ctrl_progfpgaspi+0x58>)
   82074:	88db      	ldrh	r3, [r3, #6]
   82076:	42a3      	cmp	r3, r4
   82078:	dde9      	ble.n	8204e <ctrl_progfpgaspi+0x1a>
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   8207a:	4b04      	ldr	r3, [pc, #16]	; (8208c <ctrl_progfpgaspi+0x58>)
   8207c:	689b      	ldr	r3, [r3, #8]
   8207e:	5d18      	ldrb	r0, [r3, r4]
   82080:	4b07      	ldr	r3, [pc, #28]	; (820a0 <ctrl_progfpgaspi+0x6c>)
   82082:	4798      	blx	r3
   82084:	4b07      	ldr	r3, [pc, #28]	; (820a4 <ctrl_progfpgaspi+0x70>)
   82086:	5518      	strb	r0, [r3, r4]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82088:	3401      	adds	r4, #1
   8208a:	e7f2      	b.n	82072 <ctrl_progfpgaspi+0x3e>
   8208c:	20001958 	.word	0x20001958
   82090:	00080905 	.word	0x00080905
   82094:	000809d1 	.word	0x000809d1
   82098:	00080945 	.word	0x00080945
   8209c:	00080955 	.word	0x00080955
   820a0:	00080965 	.word	0x00080965
   820a4:	20000f34 	.word	0x20000f34

000820a8 <ctrl_vccint_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   820a8:	4b1a      	ldr	r3, [pc, #104]	; (82114 <ctrl_vccint_cb+0x6c>)
   820aa:	88d9      	ldrh	r1, [r3, #6]
   820ac:	899b      	ldrh	r3, [r3, #12]
   820ae:	4299      	cmp	r1, r3
   820b0:	d82f      	bhi.n	82112 <ctrl_vccint_cb+0x6a>
{
   820b2:	b510      	push	{r4, lr}
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   820b4:	4b17      	ldr	r3, [pc, #92]	; (82114 <ctrl_vccint_cb+0x6c>)
   820b6:	689a      	ldr	r2, [r3, #8]
   820b8:	7810      	ldrb	r0, [r2, #0]
   820ba:	7854      	ldrb	r4, [r2, #1]
   820bc:	ea80 0304 	eor.w	r3, r0, r4
   820c0:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   820c4:	7892      	ldrb	r2, [r2, #2]
   820c6:	4293      	cmp	r3, r2
   820c8:	d003      	beq.n	820d2 <ctrl_vccint_cb+0x2a>
        vccint_status = USB_STATUS_PARAMWRONG;
   820ca:	4b13      	ldr	r3, [pc, #76]	; (82118 <ctrl_vccint_cb+0x70>)
   820cc:	2201      	movs	r2, #1
   820ce:	701a      	strb	r2, [r3, #0]
}
   820d0:	bd10      	pop	{r4, pc}
    if (udd_g_ctrlreq.req.wLength < 3){
   820d2:	2902      	cmp	r1, #2
   820d4:	d90b      	bls.n	820ee <ctrl_vccint_cb+0x46>
    uint16_t vcctemp = (udd_g_ctrlreq.payload[0]) | (udd_g_ctrlreq.payload[1] << 8);
   820d6:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
    if ((vcctemp < 600) || (vcctemp > 1200)){
   820da:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   820de:	b29b      	uxth	r3, r3
   820e0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   820e4:	d907      	bls.n	820f6 <ctrl_vccint_cb+0x4e>
        vccint_status = USB_STATUS_PARAMWRONG;
   820e6:	4b0c      	ldr	r3, [pc, #48]	; (82118 <ctrl_vccint_cb+0x70>)
   820e8:	2201      	movs	r2, #1
   820ea:	701a      	strb	r2, [r3, #0]
        return;
   820ec:	e7f0      	b.n	820d0 <ctrl_vccint_cb+0x28>
        vccint_status = USB_STATUS_CSFAIL;
   820ee:	4b0a      	ldr	r3, [pc, #40]	; (82118 <ctrl_vccint_cb+0x70>)
   820f0:	2204      	movs	r2, #4
   820f2:	701a      	strb	r2, [r3, #0]
        return;
   820f4:	e7ec      	b.n	820d0 <ctrl_vccint_cb+0x28>
    vccint_status = USB_STATUS_COMMERR;
   820f6:	4b08      	ldr	r3, [pc, #32]	; (82118 <ctrl_vccint_cb+0x70>)
   820f8:	2203      	movs	r2, #3
   820fa:	701a      	strb	r2, [r3, #0]
    if (tps56520_set(vcctemp)){
   820fc:	4620      	mov	r0, r4
   820fe:	4b07      	ldr	r3, [pc, #28]	; (8211c <ctrl_vccint_cb+0x74>)
   82100:	4798      	blx	r3
   82102:	2800      	cmp	r0, #0
   82104:	d0e4      	beq.n	820d0 <ctrl_vccint_cb+0x28>
        vccint_setting = vcctemp;
   82106:	4b06      	ldr	r3, [pc, #24]	; (82120 <ctrl_vccint_cb+0x78>)
   82108:	801c      	strh	r4, [r3, #0]
        vccint_status = USB_STATUS_OK;
   8210a:	4b03      	ldr	r3, [pc, #12]	; (82118 <ctrl_vccint_cb+0x70>)
   8210c:	2202      	movs	r2, #2
   8210e:	701a      	strb	r2, [r3, #0]
   82110:	e7de      	b.n	820d0 <ctrl_vccint_cb+0x28>
   82112:	4770      	bx	lr
   82114:	20001958 	.word	0x20001958
   82118:	20000fb4 	.word	0x20000fb4
   8211c:	00080add 	.word	0x00080add
   82120:	200001fe 	.word	0x200001fe

00082124 <ctrl_cdce906_cb>:
{
   82124:	b508      	push	{r3, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82126:	4b16      	ldr	r3, [pc, #88]	; (82180 <ctrl_cdce906_cb+0x5c>)
   82128:	88da      	ldrh	r2, [r3, #6]
   8212a:	899b      	ldrh	r3, [r3, #12]
   8212c:	429a      	cmp	r2, r3
   8212e:	d811      	bhi.n	82154 <ctrl_cdce906_cb+0x30>
    if (udd_g_ctrlreq.req.wLength < 3){
   82130:	2a02      	cmp	r2, #2
   82132:	d90c      	bls.n	8214e <ctrl_cdce906_cb+0x2a>
    cdce906_status = USB_STATUS_COMMERR;
   82134:	4b13      	ldr	r3, [pc, #76]	; (82184 <ctrl_cdce906_cb+0x60>)
   82136:	2203      	movs	r2, #3
   82138:	701a      	strb	r2, [r3, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   8213a:	4b11      	ldr	r3, [pc, #68]	; (82180 <ctrl_cdce906_cb+0x5c>)
   8213c:	689b      	ldr	r3, [r3, #8]
   8213e:	781a      	ldrb	r2, [r3, #0]
   82140:	b14a      	cbz	r2, 82156 <ctrl_cdce906_cb+0x32>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   82142:	2a01      	cmp	r2, #1
   82144:	d011      	beq.n	8216a <ctrl_cdce906_cb+0x46>
        cdce906_status = USB_STATUS_PARAMWRONG;
   82146:	4b0f      	ldr	r3, [pc, #60]	; (82184 <ctrl_cdce906_cb+0x60>)
   82148:	2201      	movs	r2, #1
   8214a:	701a      	strb	r2, [r3, #0]
        return;
   8214c:	e002      	b.n	82154 <ctrl_cdce906_cb+0x30>
        cdce906_status = USB_STATUS_PARAMWRONG;
   8214e:	4b0d      	ldr	r3, [pc, #52]	; (82184 <ctrl_cdce906_cb+0x60>)
   82150:	2201      	movs	r2, #1
   82152:	701a      	strb	r2, [r3, #0]
}
   82154:	bd08      	pop	{r3, pc}
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   82156:	490c      	ldr	r1, [pc, #48]	; (82188 <ctrl_cdce906_cb+0x64>)
   82158:	7858      	ldrb	r0, [r3, #1]
   8215a:	4b0c      	ldr	r3, [pc, #48]	; (8218c <ctrl_cdce906_cb+0x68>)
   8215c:	4798      	blx	r3
   8215e:	2800      	cmp	r0, #0
   82160:	d0f8      	beq.n	82154 <ctrl_cdce906_cb+0x30>
            cdce906_status = USB_STATUS_OK;
   82162:	4b08      	ldr	r3, [pc, #32]	; (82184 <ctrl_cdce906_cb+0x60>)
   82164:	2202      	movs	r2, #2
   82166:	701a      	strb	r2, [r3, #0]
   82168:	e7f4      	b.n	82154 <ctrl_cdce906_cb+0x30>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   8216a:	7899      	ldrb	r1, [r3, #2]
   8216c:	7858      	ldrb	r0, [r3, #1]
   8216e:	4b08      	ldr	r3, [pc, #32]	; (82190 <ctrl_cdce906_cb+0x6c>)
   82170:	4798      	blx	r3
   82172:	2800      	cmp	r0, #0
   82174:	d0ee      	beq.n	82154 <ctrl_cdce906_cb+0x30>
            cdce906_status = USB_STATUS_OK;
   82176:	4b03      	ldr	r3, [pc, #12]	; (82184 <ctrl_cdce906_cb+0x60>)
   82178:	2202      	movs	r2, #2
   8217a:	701a      	strb	r2, [r3, #0]
   8217c:	e7ea      	b.n	82154 <ctrl_cdce906_cb+0x30>
   8217e:	bf00      	nop
   82180:	20001958 	.word	0x20001958
   82184:	20000f2a 	.word	0x20000f2a
   82188:	20000f29 	.word	0x20000f29
   8218c:	0008084d 	.word	0x0008084d
   82190:	00080805 	.word	0x00080805

00082194 <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   82194:	b508      	push	{r3, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   82196:	4803      	ldr	r0, [pc, #12]	; (821a4 <fpga_target_register_handlers+0x10>)
   82198:	4b03      	ldr	r3, [pc, #12]	; (821a8 <fpga_target_register_handlers+0x14>)
   8219a:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   8219c:	4803      	ldr	r0, [pc, #12]	; (821ac <fpga_target_register_handlers+0x18>)
   8219e:	4b04      	ldr	r3, [pc, #16]	; (821b0 <fpga_target_register_handlers+0x1c>)
   821a0:	4798      	blx	r3
   821a2:	bd08      	pop	{r3, pc}
   821a4:	00081d79 	.word	0x00081d79
   821a8:	0008177d 	.word	0x0008177d
   821ac:	00081a25 	.word	0x00081a25
   821b0:	000817a1 	.word	0x000817a1

000821b4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   821b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   821b6:	f1a1 030e 	sub.w	r3, r1, #14
   821ba:	2b01      	cmp	r3, #1
   821bc:	d91a      	bls.n	821f4 <efc_perform_command+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   821be:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   821c2:	b672      	cpsid	i
   821c4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   821c8:	4b0c      	ldr	r3, [pc, #48]	; (821fc <efc_perform_command+0x48>)
   821ca:	2500      	movs	r5, #0
   821cc:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   821ce:	0212      	lsls	r2, r2, #8
   821d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   821d4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   821d8:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   821da:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   821dc:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   821e0:	4b07      	ldr	r3, [pc, #28]	; (82200 <efc_perform_command+0x4c>)
   821e2:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   821e4:	b92c      	cbnz	r4, 821f2 <efc_perform_command+0x3e>
		cpu_irq_enable();
   821e6:	4b05      	ldr	r3, [pc, #20]	; (821fc <efc_perform_command+0x48>)
   821e8:	2201      	movs	r2, #1
   821ea:	701a      	strb	r2, [r3, #0]
   821ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   821f0:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   821f2:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   821f4:	f04f 30ff 	mov.w	r0, #4294967295
   821f8:	e7fb      	b.n	821f2 <efc_perform_command+0x3e>
   821fa:	bf00      	nop
   821fc:	20000200 	.word	0x20000200
   82200:	20000073 	.word	0x20000073

00082204 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   82204:	e7fe      	b.n	82204 <Dummy_Handler>
   82206:	0000      	movs	r0, r0

00082208 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82208:	b570      	push	{r4, r5, r6, lr}
   8220a:	b086      	sub	sp, #24
   8220c:	4605      	mov	r5, r0
   8220e:	460c      	mov	r4, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82210:	2304      	movs	r3, #4
   82212:	9300      	str	r3, [sp, #0]
   82214:	ab02      	add	r3, sp, #8
   82216:	220f      	movs	r2, #15
   82218:	210e      	movs	r1, #14
   8221a:	480c      	ldr	r0, [pc, #48]	; (8224c <flash_read_unique_id+0x44>)
   8221c:	4e0c      	ldr	r6, [pc, #48]	; (82250 <flash_read_unique_id+0x48>)
   8221e:	47b0      	blx	r6
   82220:	b990      	cbnz	r0, 82248 <flash_read_unique_id+0x40>
   82222:	4601      	mov	r1, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82224:	2c04      	cmp	r4, #4
   82226:	d900      	bls.n	8222a <flash_read_unique_id+0x22>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   82228:	2404      	movs	r4, #4
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   8222a:	460b      	mov	r3, r1
   8222c:	e007      	b.n	8223e <flash_read_unique_id+0x36>
		pul_data[ul_idx] = uid_buf[ul_idx];
   8222e:	aa06      	add	r2, sp, #24
   82230:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   82234:	f852 2c10 	ldr.w	r2, [r2, #-16]
   82238:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   8223c:	3301      	adds	r3, #1
   8223e:	429c      	cmp	r4, r3
   82240:	d8f5      	bhi.n	8222e <flash_read_unique_id+0x26>
	}

	return FLASH_RC_OK;
}
   82242:	4608      	mov	r0, r1
   82244:	b006      	add	sp, #24
   82246:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   82248:	2110      	movs	r1, #16
   8224a:	e7fa      	b.n	82242 <flash_read_unique_id+0x3a>
   8224c:	400e0800 	.word	0x400e0800
   82250:	2000000b 	.word	0x2000000b

00082254 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   82254:	b510      	push	{r4, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82256:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8225a:	204f      	movs	r0, #79	; 0x4f
   8225c:	4c0e      	ldr	r4, [pc, #56]	; (82298 <iopins_normal+0x44>)
   8225e:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82260:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82264:	2050      	movs	r0, #80	; 0x50
   82266:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8226c:	2051      	movs	r0, #81	; 0x51
   8226e:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   82270:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82274:	203f      	movs	r0, #63	; 0x3f
   82276:	47a0      	blx	r4
	board_power(0);
   82278:	203f      	movs	r0, #63	; 0x3f
   8227a:	4b08      	ldr	r3, [pc, #32]	; (8229c <iopins_normal+0x48>)
   8227c:	4798      	blx	r3

	//Detect state of switch
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   8227e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82282:	203e      	movs	r0, #62	; 0x3e
   82284:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82286:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8228a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8228e:	4804      	ldr	r0, [pc, #16]	; (822a0 <iopins_normal+0x4c>)
   82290:	4b04      	ldr	r3, [pc, #16]	; (822a4 <iopins_normal+0x50>)
   82292:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   82294:	bd10      	pop	{r4, pc}
   82296:	bf00      	nop
   82298:	0008259d 	.word	0x0008259d
   8229c:	00082581 	.word	0x00082581
   822a0:	400e0c00 	.word	0x400e0c00
   822a4:	00082491 	.word	0x00082491

000822a8 <board_init>:

void board_init(void)
{
   822a8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   822aa:	4b07      	ldr	r3, [pc, #28]	; (822c8 <board_init+0x20>)
   822ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   822b0:	605a      	str	r2, [r3, #4]
   822b2:	200a      	movs	r0, #10
   822b4:	4c05      	ldr	r4, [pc, #20]	; (822cc <board_init+0x24>)
   822b6:	47a0      	blx	r4
   822b8:	200b      	movs	r0, #11
   822ba:	47a0      	blx	r4
   822bc:	200c      	movs	r0, #12
   822be:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   822c0:	4b03      	ldr	r3, [pc, #12]	; (822d0 <board_init+0x28>)
   822c2:	4798      	blx	r3
}
   822c4:	bd10      	pop	{r4, pc}
   822c6:	bf00      	nop
   822c8:	400e1250 	.word	0x400e1250
   822cc:	00082845 	.word	0x00082845
   822d0:	00082255 	.word	0x00082255

000822d4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   822d4:	4b0b      	ldr	r3, [pc, #44]	; (82304 <cpu_irq_enter_critical+0x30>)
   822d6:	681b      	ldr	r3, [r3, #0]
   822d8:	b95b      	cbnz	r3, 822f2 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   822da:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   822de:	b96b      	cbnz	r3, 822fc <cpu_irq_enter_critical+0x28>
  __ASM volatile ("cpsid i");
   822e0:	b672      	cpsid	i
   822e2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   822e6:	4b08      	ldr	r3, [pc, #32]	; (82308 <cpu_irq_enter_critical+0x34>)
   822e8:	2200      	movs	r2, #0
   822ea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   822ec:	4b07      	ldr	r3, [pc, #28]	; (8230c <cpu_irq_enter_critical+0x38>)
   822ee:	2201      	movs	r2, #1
   822f0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
   822f2:	4a04      	ldr	r2, [pc, #16]	; (82304 <cpu_irq_enter_critical+0x30>)
   822f4:	6813      	ldr	r3, [r2, #0]
   822f6:	3301      	adds	r3, #1
   822f8:	6013      	str	r3, [r2, #0]
}
   822fa:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
   822fc:	4b03      	ldr	r3, [pc, #12]	; (8230c <cpu_irq_enter_critical+0x38>)
   822fe:	2200      	movs	r2, #0
   82300:	701a      	strb	r2, [r3, #0]
   82302:	e7f6      	b.n	822f2 <cpu_irq_enter_critical+0x1e>
   82304:	20000fb8 	.word	0x20000fb8
   82308:	20000200 	.word	0x20000200
   8230c:	20000fbc 	.word	0x20000fbc

00082310 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   82310:	4b07      	ldr	r3, [pc, #28]	; (82330 <cpu_irq_leave_critical+0x20>)
   82312:	681a      	ldr	r2, [r3, #0]
   82314:	3a01      	subs	r2, #1
   82316:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   82318:	681b      	ldr	r3, [r3, #0]
   8231a:	b943      	cbnz	r3, 8232e <cpu_irq_leave_critical+0x1e>
   8231c:	4b05      	ldr	r3, [pc, #20]	; (82334 <cpu_irq_leave_critical+0x24>)
   8231e:	781b      	ldrb	r3, [r3, #0]
   82320:	b12b      	cbz	r3, 8232e <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   82322:	4b05      	ldr	r3, [pc, #20]	; (82338 <cpu_irq_leave_critical+0x28>)
   82324:	2201      	movs	r2, #1
   82326:	701a      	strb	r2, [r3, #0]
   82328:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8232c:	b662      	cpsie	i
	}
}
   8232e:	4770      	bx	lr
   82330:	20000fb8 	.word	0x20000fb8
   82334:	20000fbc 	.word	0x20000fbc
   82338:	20000200 	.word	0x20000200

0008233c <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   8233c:	b538      	push	{r3, r4, r5, lr}
   8233e:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82340:	2400      	movs	r4, #0
   82342:	e003      	b.n	8234c <LED_Off+0x10>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   82344:	4628      	mov	r0, r5
   82346:	4b0a      	ldr	r3, [pc, #40]	; (82370 <LED_Off+0x34>)
   82348:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8234a:	3401      	adds	r4, #1
   8234c:	2c02      	cmp	r4, #2
   8234e:	d80e      	bhi.n	8236e <LED_Off+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82350:	4b08      	ldr	r3, [pc, #32]	; (82374 <LED_Off+0x38>)
   82352:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
   82356:	42ab      	cmp	r3, r5
   82358:	d1f7      	bne.n	8234a <LED_Off+0xe>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8235a:	4b06      	ldr	r3, [pc, #24]	; (82374 <LED_Off+0x38>)
   8235c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   82360:	685b      	ldr	r3, [r3, #4]
   82362:	2b01      	cmp	r3, #1
   82364:	d1ee      	bne.n	82344 <LED_Off+0x8>
				gpio_set_pin_low(led_gpio);
   82366:	4628      	mov	r0, r5
   82368:	4b03      	ldr	r3, [pc, #12]	; (82378 <LED_Off+0x3c>)
   8236a:	4798      	blx	r3
   8236c:	e7ed      	b.n	8234a <LED_Off+0xe>
			}
		}
	}
}
   8236e:	bd38      	pop	{r3, r4, r5, pc}
   82370:	00082565 	.word	0x00082565
   82374:	0008bf08 	.word	0x0008bf08
   82378:	00082581 	.word	0x00082581

0008237c <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   8237c:	b538      	push	{r3, r4, r5, lr}
   8237e:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82380:	2400      	movs	r4, #0
   82382:	e003      	b.n	8238c <LED_On+0x10>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   82384:	4628      	mov	r0, r5
   82386:	4b0a      	ldr	r3, [pc, #40]	; (823b0 <LED_On+0x34>)
   82388:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8238a:	3401      	adds	r4, #1
   8238c:	2c02      	cmp	r4, #2
   8238e:	d80e      	bhi.n	823ae <LED_On+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82390:	4b08      	ldr	r3, [pc, #32]	; (823b4 <LED_On+0x38>)
   82392:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
   82396:	42ab      	cmp	r3, r5
   82398:	d1f7      	bne.n	8238a <LED_On+0xe>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8239a:	4b06      	ldr	r3, [pc, #24]	; (823b4 <LED_On+0x38>)
   8239c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   823a0:	685b      	ldr	r3, [r3, #4]
   823a2:	2b01      	cmp	r3, #1
   823a4:	d1ee      	bne.n	82384 <LED_On+0x8>
				gpio_set_pin_high(led_gpio);
   823a6:	4628      	mov	r0, r5
   823a8:	4b03      	ldr	r3, [pc, #12]	; (823b8 <LED_On+0x3c>)
   823aa:	4798      	blx	r3
   823ac:	e7ed      	b.n	8238a <LED_On+0xe>
			}
		}
	}
}
   823ae:	bd38      	pop	{r3, r4, r5, pc}
   823b0:	00082581 	.word	0x00082581
   823b4:	0008bf08 	.word	0x0008bf08
   823b8:	00082565 	.word	0x00082565

000823bc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   823bc:	b10a      	cbz	r2, 823c2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   823be:	6641      	str	r1, [r0, #100]	; 0x64
   823c0:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   823c2:	6601      	str	r1, [r0, #96]	; 0x60
	}
}
   823c4:	4770      	bx	lr

000823c6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   823c6:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   823c8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   823cc:	d016      	beq.n	823fc <pio_set_peripheral+0x36>
   823ce:	d80a      	bhi.n	823e6 <pio_set_peripheral+0x20>
   823d0:	b199      	cbz	r1, 823fa <pio_set_peripheral+0x34>
   823d2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   823d6:	d10f      	bne.n	823f8 <pio_set_peripheral+0x32>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   823d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   823da:	6f03      	ldr	r3, [r0, #112]	; 0x70
   823dc:	ea21 0102 	bic.w	r1, r1, r2
   823e0:	400b      	ands	r3, r1
   823e2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   823e4:	e008      	b.n	823f8 <pio_set_peripheral+0x32>
	switch (ul_type) {
   823e6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   823ea:	d006      	beq.n	823fa <pio_set_peripheral+0x34>
   823ec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   823f0:	d003      	beq.n	823fa <pio_set_peripheral+0x34>
   823f2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   823f6:	d000      	beq.n	823fa <pio_set_peripheral+0x34>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   823f8:	6042      	str	r2, [r0, #4]
}
   823fa:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   823fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   823fe:	4313      	orrs	r3, r2
   82400:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82402:	e7f9      	b.n	823f8 <pio_set_peripheral+0x32>

00082404 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82404:	6441      	str	r1, [r0, #68]	; 0x44
}
   82406:	4770      	bx	lr

00082408 <pio_set_input>:
{
   82408:	b570      	push	{r4, r5, r6, lr}
   8240a:	4604      	mov	r4, r0
   8240c:	460d      	mov	r5, r1
   8240e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   82410:	4b0d      	ldr	r3, [pc, #52]	; (82448 <pio_set_input+0x40>)
   82412:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82414:	f006 0201 	and.w	r2, r6, #1
   82418:	4629      	mov	r1, r5
   8241a:	4620      	mov	r0, r4
   8241c:	4b0b      	ldr	r3, [pc, #44]	; (8244c <pio_set_input+0x44>)
   8241e:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82420:	f016 0f0a 	tst.w	r6, #10
   82424:	d008      	beq.n	82438 <pio_set_input+0x30>
		p_pio->PIO_IFER = ul_mask;
   82426:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
   82428:	f016 0f02 	tst.w	r6, #2
   8242c:	d006      	beq.n	8243c <pio_set_input+0x34>
		p_pio->PIO_SCIFSR = ul_mask;
   8242e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   82432:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   82434:	6025      	str	r5, [r4, #0]
}
   82436:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_IFDR = ul_mask;
   82438:	6265      	str	r5, [r4, #36]	; 0x24
   8243a:	e7f5      	b.n	82428 <pio_set_input+0x20>
		if (ul_attribute & PIO_DEBOUNCE) {
   8243c:	f016 0f08 	tst.w	r6, #8
   82440:	d0f7      	beq.n	82432 <pio_set_input+0x2a>
			p_pio->PIO_DIFSR = ul_mask;
   82442:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   82446:	e7f4      	b.n	82432 <pio_set_input+0x2a>
   82448:	00082405 	.word	0x00082405
   8244c:	000823bd 	.word	0x000823bd

00082450 <pio_set_output>:
{
   82450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82452:	4604      	mov	r4, r0
   82454:	460d      	mov	r5, r1
   82456:	4616      	mov	r6, r2
   82458:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8245a:	4b09      	ldr	r3, [pc, #36]	; (82480 <pio_set_output+0x30>)
   8245c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8245e:	9a06      	ldr	r2, [sp, #24]
   82460:	4629      	mov	r1, r5
   82462:	4620      	mov	r0, r4
   82464:	4b07      	ldr	r3, [pc, #28]	; (82484 <pio_set_output+0x34>)
   82466:	4798      	blx	r3
	if (ul_multidrive_enable) {
   82468:	b12f      	cbz	r7, 82476 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
   8246a:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
   8246c:	b12e      	cbz	r6, 8247a <pio_set_output+0x2a>
		p_pio->PIO_SODR = ul_mask;
   8246e:	6325      	str	r5, [r4, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   82470:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   82472:	6025      	str	r5, [r4, #0]
}
   82474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
   82476:	6565      	str	r5, [r4, #84]	; 0x54
   82478:	e7f8      	b.n	8246c <pio_set_output+0x1c>
		p_pio->PIO_CODR = ul_mask;
   8247a:	6365      	str	r5, [r4, #52]	; 0x34
   8247c:	e7f8      	b.n	82470 <pio_set_output+0x20>
   8247e:	bf00      	nop
   82480:	00082405 	.word	0x00082405
   82484:	000823bd 	.word	0x000823bd

00082488 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82488:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8248a:	4770      	bx	lr

0008248c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8248c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8248e:	4770      	bx	lr

00082490 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82490:	b570      	push	{r4, r5, r6, lr}
   82492:	b082      	sub	sp, #8
   82494:	4605      	mov	r5, r0
   82496:	460e      	mov	r6, r1
   82498:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8249a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8249e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   824a2:	d03d      	beq.n	82520 <pio_configure_pin_group+0x90>
   824a4:	d814      	bhi.n	824d0 <pio_configure_pin_group+0x40>
   824a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   824aa:	d02b      	beq.n	82504 <pio_configure_pin_group+0x74>
   824ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   824b0:	d10c      	bne.n	824cc <pio_configure_pin_group+0x3c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   824b2:	460a      	mov	r2, r1
   824b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   824b8:	4b1b      	ldr	r3, [pc, #108]	; (82528 <pio_configure_pin_group+0x98>)
   824ba:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   824bc:	f004 0201 	and.w	r2, r4, #1
   824c0:	4631      	mov	r1, r6
   824c2:	4628      	mov	r0, r5
   824c4:	4b19      	ldr	r3, [pc, #100]	; (8252c <pio_configure_pin_group+0x9c>)
   824c6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   824c8:	2001      	movs	r0, #1
		break;
   824ca:	e027      	b.n	8251c <pio_configure_pin_group+0x8c>
	switch (ul_flags & PIO_TYPE_Msk) {
   824cc:	2000      	movs	r0, #0
   824ce:	e025      	b.n	8251c <pio_configure_pin_group+0x8c>
   824d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   824d4:	d002      	beq.n	824dc <pio_configure_pin_group+0x4c>
   824d6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   824da:	d111      	bne.n	82500 <pio_configure_pin_group+0x70>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   824dc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   824e0:	f004 0301 	and.w	r3, r4, #1
   824e4:	9300      	str	r3, [sp, #0]
   824e6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   824ea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   824ee:	bf14      	ite	ne
   824f0:	2200      	movne	r2, #0
   824f2:	2201      	moveq	r2, #1
   824f4:	4631      	mov	r1, r6
   824f6:	4628      	mov	r0, r5
   824f8:	4c0d      	ldr	r4, [pc, #52]	; (82530 <pio_configure_pin_group+0xa0>)
   824fa:	47a0      	blx	r4
	return 1;
   824fc:	2001      	movs	r0, #1
		break;
   824fe:	e00d      	b.n	8251c <pio_configure_pin_group+0x8c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82500:	2000      	movs	r0, #0
   82502:	e00b      	b.n	8251c <pio_configure_pin_group+0x8c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82504:	460a      	mov	r2, r1
   82506:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8250a:	4b07      	ldr	r3, [pc, #28]	; (82528 <pio_configure_pin_group+0x98>)
   8250c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8250e:	f004 0201 	and.w	r2, r4, #1
   82512:	4631      	mov	r1, r6
   82514:	4628      	mov	r0, r5
   82516:	4b05      	ldr	r3, [pc, #20]	; (8252c <pio_configure_pin_group+0x9c>)
   82518:	4798      	blx	r3
	return 1;
   8251a:	2001      	movs	r0, #1
}
   8251c:	b002      	add	sp, #8
   8251e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82520:	4b04      	ldr	r3, [pc, #16]	; (82534 <pio_configure_pin_group+0xa4>)
   82522:	4798      	blx	r3
	return 1;
   82524:	2001      	movs	r0, #1
		break;
   82526:	e7f9      	b.n	8251c <pio_configure_pin_group+0x8c>
   82528:	000823c7 	.word	0x000823c7
   8252c:	000823bd 	.word	0x000823bd
   82530:	00082451 	.word	0x00082451
   82534:	00082409 	.word	0x00082409

00082538 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82538:	0940      	lsrs	r0, r0, #5
   8253a:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   8253e:	f200 7006 	addw	r0, r0, #1798	; 0x706
#endif
	return p_pio;
}
   82542:	0240      	lsls	r0, r0, #9
   82544:	4770      	bx	lr
   82546:	0000      	movs	r0, r0

00082548 <pio_get_pin_value>:
{
   82548:	b510      	push	{r4, lr}
   8254a:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   8254c:	4b04      	ldr	r3, [pc, #16]	; (82560 <pio_get_pin_value+0x18>)
   8254e:	4798      	blx	r3
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   82550:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   82552:	f004 041f 	and.w	r4, r4, #31
   82556:	40e0      	lsrs	r0, r4
}
   82558:	f000 0001 	and.w	r0, r0, #1
   8255c:	bd10      	pop	{r4, pc}
   8255e:	bf00      	nop
   82560:	00082539 	.word	0x00082539

00082564 <pio_set_pin_high>:
{
   82564:	b510      	push	{r4, lr}
   82566:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82568:	4b04      	ldr	r3, [pc, #16]	; (8257c <pio_set_pin_high+0x18>)
   8256a:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8256c:	f004 041f 	and.w	r4, r4, #31
   82570:	2301      	movs	r3, #1
   82572:	fa03 f404 	lsl.w	r4, r3, r4
   82576:	6304      	str	r4, [r0, #48]	; 0x30
}
   82578:	bd10      	pop	{r4, pc}
   8257a:	bf00      	nop
   8257c:	00082539 	.word	0x00082539

00082580 <pio_set_pin_low>:
{
   82580:	b510      	push	{r4, lr}
   82582:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82584:	4b04      	ldr	r3, [pc, #16]	; (82598 <pio_set_pin_low+0x18>)
   82586:	4798      	blx	r3
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82588:	f004 041f 	and.w	r4, r4, #31
   8258c:	2301      	movs	r3, #1
   8258e:	fa03 f404 	lsl.w	r4, r3, r4
   82592:	6344      	str	r4, [r0, #52]	; 0x34
}
   82594:	bd10      	pop	{r4, pc}
   82596:	bf00      	nop
   82598:	00082539 	.word	0x00082539

0008259c <pio_configure_pin>:
{
   8259c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8259e:	b083      	sub	sp, #12
   825a0:	4604      	mov	r4, r0
   825a2:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
   825a4:	4b2e      	ldr	r3, [pc, #184]	; (82660 <pio_configure_pin+0xc4>)
   825a6:	4798      	blx	r3
   825a8:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   825aa:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
   825ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   825b2:	d04b      	beq.n	8264c <pio_configure_pin+0xb0>
   825b4:	d819      	bhi.n	825ea <pio_configure_pin+0x4e>
   825b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   825ba:	d034      	beq.n	82626 <pio_configure_pin+0x8a>
   825bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   825c0:	d111      	bne.n	825e6 <pio_configure_pin+0x4a>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   825c2:	f004 041f 	and.w	r4, r4, #31
   825c6:	2701      	movs	r7, #1
   825c8:	fa07 f404 	lsl.w	r4, r7, r4
   825cc:	4622      	mov	r2, r4
   825ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   825d2:	4b24      	ldr	r3, [pc, #144]	; (82664 <pio_configure_pin+0xc8>)
   825d4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   825d6:	ea05 0207 	and.w	r2, r5, r7
   825da:	4621      	mov	r1, r4
   825dc:	4630      	mov	r0, r6
   825de:	4b22      	ldr	r3, [pc, #136]	; (82668 <pio_configure_pin+0xcc>)
   825e0:	4798      	blx	r3
	return 1;
   825e2:	4638      	mov	r0, r7
		break;
   825e4:	e030      	b.n	82648 <pio_configure_pin+0xac>
	switch (ul_flags & PIO_TYPE_Msk) {
   825e6:	2000      	movs	r0, #0
   825e8:	e02e      	b.n	82648 <pio_configure_pin+0xac>
   825ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   825ee:	d002      	beq.n	825f6 <pio_configure_pin+0x5a>
   825f0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   825f4:	d115      	bne.n	82622 <pio_configure_pin+0x86>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   825f6:	f004 041f 	and.w	r4, r4, #31
   825fa:	2701      	movs	r7, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   825fc:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82600:	ea05 0307 	and.w	r3, r5, r7
   82604:	9300      	str	r3, [sp, #0]
   82606:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8260a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8260e:	bf14      	ite	ne
   82610:	2200      	movne	r2, #0
   82612:	2201      	moveq	r2, #1
   82614:	fa07 f104 	lsl.w	r1, r7, r4
   82618:	4630      	mov	r0, r6
   8261a:	4c14      	ldr	r4, [pc, #80]	; (8266c <pio_configure_pin+0xd0>)
   8261c:	47a0      	blx	r4
	return 1;
   8261e:	4638      	mov	r0, r7
		break;
   82620:	e012      	b.n	82648 <pio_configure_pin+0xac>
	switch (ul_flags & PIO_TYPE_Msk) {
   82622:	2000      	movs	r0, #0
   82624:	e010      	b.n	82648 <pio_configure_pin+0xac>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82626:	f004 041f 	and.w	r4, r4, #31
   8262a:	2701      	movs	r7, #1
   8262c:	fa07 f404 	lsl.w	r4, r7, r4
   82630:	4622      	mov	r2, r4
   82632:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82636:	4b0b      	ldr	r3, [pc, #44]	; (82664 <pio_configure_pin+0xc8>)
   82638:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8263a:	ea05 0207 	and.w	r2, r5, r7
   8263e:	4621      	mov	r1, r4
   82640:	4630      	mov	r0, r6
   82642:	4b09      	ldr	r3, [pc, #36]	; (82668 <pio_configure_pin+0xcc>)
   82644:	4798      	blx	r3
	return 1;
   82646:	4638      	mov	r0, r7
}
   82648:	b003      	add	sp, #12
   8264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8264c:	f004 041f 	and.w	r4, r4, #31
   82650:	2701      	movs	r7, #1
   82652:	462a      	mov	r2, r5
   82654:	fa07 f104 	lsl.w	r1, r7, r4
   82658:	4b05      	ldr	r3, [pc, #20]	; (82670 <pio_configure_pin+0xd4>)
   8265a:	4798      	blx	r3
	return 1;
   8265c:	4638      	mov	r0, r7
		break;
   8265e:	e7f3      	b.n	82648 <pio_configure_pin+0xac>
   82660:	00082539 	.word	0x00082539
   82664:	000823c7 	.word	0x000823c7
   82668:	000823bd 	.word	0x000823bd
   8266c:	00082451 	.word	0x00082451
   82670:	00082409 	.word	0x00082409

00082674 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82676:	4604      	mov	r4, r0
   82678:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8267a:	4b10      	ldr	r3, [pc, #64]	; (826bc <pio_handler_process+0x48>)
   8267c:	4798      	blx	r3
   8267e:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82680:	4620      	mov	r0, r4
   82682:	4b0f      	ldr	r3, [pc, #60]	; (826c0 <pio_handler_process+0x4c>)
   82684:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82686:	4005      	ands	r5, r0
   82688:	d116      	bne.n	826b8 <pio_handler_process+0x44>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   8268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i++;
   8268c:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
   8268e:	2c06      	cmp	r4, #6
   82690:	d8fb      	bhi.n	8268a <pio_handler_process+0x16>
		while (status != 0) {
   82692:	2d00      	cmp	r5, #0
   82694:	d0f9      	beq.n	8268a <pio_handler_process+0x16>
			if (gs_interrupt_sources[i].id == ul_id) {
   82696:	0123      	lsls	r3, r4, #4
   82698:	4a0a      	ldr	r2, [pc, #40]	; (826c4 <pio_handler_process+0x50>)
   8269a:	58d0      	ldr	r0, [r2, r3]
   8269c:	42b0      	cmp	r0, r6
   8269e:	d1f5      	bne.n	8268c <pio_handler_process+0x18>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   826a0:	eb02 1304 	add.w	r3, r2, r4, lsl #4
   826a4:	6859      	ldr	r1, [r3, #4]
   826a6:	4229      	tst	r1, r5
   826a8:	d0f0      	beq.n	8268c <pio_handler_process+0x18>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   826aa:	461f      	mov	r7, r3
   826ac:	68db      	ldr	r3, [r3, #12]
   826ae:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   826b0:	687b      	ldr	r3, [r7, #4]
   826b2:	ea25 0503 	bic.w	r5, r5, r3
   826b6:	e7e9      	b.n	8268c <pio_handler_process+0x18>
		i = 0;
   826b8:	2400      	movs	r4, #0
   826ba:	e7ea      	b.n	82692 <pio_handler_process+0x1e>
   826bc:	00082489 	.word	0x00082489
   826c0:	0008248d 	.word	0x0008248d
   826c4:	20000fc0 	.word	0x20000fc0

000826c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   826c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   826ca:	210a      	movs	r1, #10
   826cc:	4801      	ldr	r0, [pc, #4]	; (826d4 <PIOA_Handler+0xc>)
   826ce:	4b02      	ldr	r3, [pc, #8]	; (826d8 <PIOA_Handler+0x10>)
   826d0:	4798      	blx	r3
}
   826d2:	bd08      	pop	{r3, pc}
   826d4:	400e0c00 	.word	0x400e0c00
   826d8:	00082675 	.word	0x00082675

000826dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   826dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   826de:	210b      	movs	r1, #11
   826e0:	4801      	ldr	r0, [pc, #4]	; (826e8 <PIOB_Handler+0xc>)
   826e2:	4b02      	ldr	r3, [pc, #8]	; (826ec <PIOB_Handler+0x10>)
   826e4:	4798      	blx	r3
}
   826e6:	bd08      	pop	{r3, pc}
   826e8:	400e0e00 	.word	0x400e0e00
   826ec:	00082675 	.word	0x00082675

000826f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   826f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   826f2:	210c      	movs	r1, #12
   826f4:	4801      	ldr	r0, [pc, #4]	; (826fc <PIOC_Handler+0xc>)
   826f6:	4b02      	ldr	r3, [pc, #8]	; (82700 <PIOC_Handler+0x10>)
   826f8:	4798      	blx	r3
}
   826fa:	bd08      	pop	{r3, pc}
   826fc:	400e1000 	.word	0x400e1000
   82700:	00082675 	.word	0x00082675

00082704 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82704:	4a13      	ldr	r2, [pc, #76]	; (82754 <pmc_switch_mck_to_mainck+0x50>)
   82706:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82708:	f023 0303 	bic.w	r3, r3, #3
   8270c:	f043 0301 	orr.w	r3, r3, #1
   82710:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82712:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82716:	4a0f      	ldr	r2, [pc, #60]	; (82754 <pmc_switch_mck_to_mainck+0x50>)
   82718:	6e92      	ldr	r2, [r2, #104]	; 0x68
   8271a:	f012 0f08 	tst.w	r2, #8
   8271e:	d102      	bne.n	82726 <pmc_switch_mck_to_mainck+0x22>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82720:	b19b      	cbz	r3, 8274a <pmc_switch_mck_to_mainck+0x46>
			--ul_timeout) {
   82722:	3b01      	subs	r3, #1
   82724:	e7f7      	b.n	82716 <pmc_switch_mck_to_mainck+0x12>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82726:	4a0b      	ldr	r2, [pc, #44]	; (82754 <pmc_switch_mck_to_mainck+0x50>)
   82728:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8272e:	4303      	orrs	r3, r0
   82730:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82732:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82736:	4a07      	ldr	r2, [pc, #28]	; (82754 <pmc_switch_mck_to_mainck+0x50>)
   82738:	6e92      	ldr	r2, [r2, #104]	; 0x68
   8273a:	f012 0f08 	tst.w	r2, #8
   8273e:	d102      	bne.n	82746 <pmc_switch_mck_to_mainck+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82740:	b12b      	cbz	r3, 8274e <pmc_switch_mck_to_mainck+0x4a>
			--ul_timeout) {
   82742:	3b01      	subs	r3, #1
   82744:	e7f7      	b.n	82736 <pmc_switch_mck_to_mainck+0x32>
			return 1;
		}
	}

	return 0;
   82746:	2000      	movs	r0, #0
   82748:	4770      	bx	lr
			return 1;
   8274a:	2001      	movs	r0, #1
   8274c:	4770      	bx	lr
			return 1;
   8274e:	2001      	movs	r0, #1
}
   82750:	4770      	bx	lr
   82752:	bf00      	nop
   82754:	400e0400 	.word	0x400e0400

00082758 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82758:	4a13      	ldr	r2, [pc, #76]	; (827a8 <pmc_switch_mck_to_pllack+0x50>)
   8275a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82760:	4303      	orrs	r3, r0
   82762:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82764:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82768:	4a0f      	ldr	r2, [pc, #60]	; (827a8 <pmc_switch_mck_to_pllack+0x50>)
   8276a:	6e92      	ldr	r2, [r2, #104]	; 0x68
   8276c:	f012 0f08 	tst.w	r2, #8
   82770:	d102      	bne.n	82778 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82772:	b1a3      	cbz	r3, 8279e <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
   82774:	3b01      	subs	r3, #1
   82776:	e7f7      	b.n	82768 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82778:	4a0b      	ldr	r2, [pc, #44]	; (827a8 <pmc_switch_mck_to_pllack+0x50>)
   8277a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8277c:	f023 0303 	bic.w	r3, r3, #3
   82780:	f043 0302 	orr.w	r3, r3, #2
   82784:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82786:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8278a:	4a07      	ldr	r2, [pc, #28]	; (827a8 <pmc_switch_mck_to_pllack+0x50>)
   8278c:	6e92      	ldr	r2, [r2, #104]	; 0x68
   8278e:	f012 0f08 	tst.w	r2, #8
   82792:	d102      	bne.n	8279a <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82794:	b12b      	cbz	r3, 827a2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
   82796:	3b01      	subs	r3, #1
   82798:	e7f7      	b.n	8278a <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
   8279a:	2000      	movs	r0, #0
   8279c:	4770      	bx	lr
			return 1;
   8279e:	2001      	movs	r0, #1
   827a0:	4770      	bx	lr
			return 1;
   827a2:	2001      	movs	r0, #1
}
   827a4:	4770      	bx	lr
   827a6:	bf00      	nop
   827a8:	400e0400 	.word	0x400e0400

000827ac <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   827ac:	4908      	ldr	r1, [pc, #32]	; (827d0 <pmc_osc_enable_main_xtal+0x24>)
   827ae:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   827b0:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   827b4:	0203      	lsls	r3, r0, #8
   827b6:	b29b      	uxth	r3, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827b8:	4313      	orrs	r3, r2
   827ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   827be:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   827c2:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   827c4:	4b02      	ldr	r3, [pc, #8]	; (827d0 <pmc_osc_enable_main_xtal+0x24>)
   827c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827c8:	f013 0f01 	tst.w	r3, #1
   827cc:	d0fa      	beq.n	827c4 <pmc_osc_enable_main_xtal+0x18>
}
   827ce:	4770      	bx	lr
   827d0:	400e0400 	.word	0x400e0400

000827d4 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   827d4:	4b02      	ldr	r3, [pc, #8]	; (827e0 <pmc_osc_is_ready_main_xtal+0xc>)
   827d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   827d8:	f000 0001 	and.w	r0, r0, #1
   827dc:	4770      	bx	lr
   827de:	bf00      	nop
   827e0:	400e0400 	.word	0x400e0400

000827e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   827e4:	4b02      	ldr	r3, [pc, #8]	; (827f0 <pmc_osc_is_ready_mainck+0xc>)
   827e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   827e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   827ec:	4770      	bx	lr
   827ee:	bf00      	nop
   827f0:	400e0400 	.word	0x400e0400

000827f4 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   827f4:	4b06      	ldr	r3, [pc, #24]	; (82810 <pmc_mainck_osc_select+0x1c>)
   827f6:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   827f8:	b130      	cbz	r0, 82808 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   827fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   827fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82802:	4a03      	ldr	r2, [pc, #12]	; (82810 <pmc_mainck_osc_select+0x1c>)
   82804:	6213      	str	r3, [r2, #32]
}
   82806:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   82808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   8280c:	e7f7      	b.n	827fe <pmc_mainck_osc_select+0xa>
   8280e:	bf00      	nop
   82810:	400e0400 	.word	0x400e0400

00082814 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82814:	4b02      	ldr	r3, [pc, #8]	; (82820 <pmc_disable_pllack+0xc>)
   82816:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8281a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8281c:	4770      	bx	lr
   8281e:	bf00      	nop
   82820:	400e0400 	.word	0x400e0400

00082824 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82824:	4b02      	ldr	r3, [pc, #8]	; (82830 <pmc_is_locked_pllack+0xc>)
   82826:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82828:	f000 0002 	and.w	r0, r0, #2
   8282c:	4770      	bx	lr
   8282e:	bf00      	nop
   82830:	400e0400 	.word	0x400e0400

00082834 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82834:	4b02      	ldr	r3, [pc, #8]	; (82840 <pmc_is_locked_upll+0xc>)
   82836:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82838:	f000 0040 	and.w	r0, r0, #64	; 0x40
   8283c:	4770      	bx	lr
   8283e:	bf00      	nop
   82840:	400e0400 	.word	0x400e0400

00082844 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82844:	281d      	cmp	r0, #29
   82846:	d80e      	bhi.n	82866 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   82848:	281f      	cmp	r0, #31
   8284a:	d80e      	bhi.n	8286a <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8284c:	4b09      	ldr	r3, [pc, #36]	; (82874 <pmc_enable_periph_clk+0x30>)
   8284e:	699a      	ldr	r2, [r3, #24]
   82850:	2301      	movs	r3, #1
   82852:	4083      	lsls	r3, r0
   82854:	4393      	bics	r3, r2
   82856:	d00a      	beq.n	8286e <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82858:	2301      	movs	r3, #1
   8285a:	fa03 f000 	lsl.w	r0, r3, r0
   8285e:	4b05      	ldr	r3, [pc, #20]	; (82874 <pmc_enable_periph_clk+0x30>)
   82860:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82862:	2000      	movs	r0, #0
   82864:	4770      	bx	lr
		return 1;
   82866:	2001      	movs	r0, #1
   82868:	4770      	bx	lr
	return 0;
   8286a:	2000      	movs	r0, #0
   8286c:	4770      	bx	lr
   8286e:	2000      	movs	r0, #0
}
   82870:	4770      	bx	lr
   82872:	bf00      	nop
   82874:	400e0400 	.word	0x400e0400

00082878 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82878:	281d      	cmp	r0, #29
   8287a:	d810      	bhi.n	8289e <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   8287c:	281f      	cmp	r0, #31
   8287e:	d810      	bhi.n	828a2 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82880:	4b09      	ldr	r3, [pc, #36]	; (828a8 <pmc_disable_periph_clk+0x30>)
   82882:	699a      	ldr	r2, [r3, #24]
   82884:	2301      	movs	r3, #1
   82886:	4083      	lsls	r3, r0
   82888:	4393      	bics	r3, r2
   8288a:	d001      	beq.n	82890 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   8288c:	2000      	movs	r0, #0
}
   8288e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   82890:	2301      	movs	r3, #1
   82892:	fa03 f000 	lsl.w	r0, r3, r0
   82896:	4b04      	ldr	r3, [pc, #16]	; (828a8 <pmc_disable_periph_clk+0x30>)
   82898:	6158      	str	r0, [r3, #20]
	return 0;
   8289a:	2000      	movs	r0, #0
   8289c:	4770      	bx	lr
		return 1;
   8289e:	2001      	movs	r0, #1
   828a0:	4770      	bx	lr
	return 0;
   828a2:	2000      	movs	r0, #0
   828a4:	4770      	bx	lr
   828a6:	bf00      	nop
   828a8:	400e0400 	.word	0x400e0400

000828ac <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   828ac:	f44f 7380 	mov.w	r3, #256	; 0x100
   828b0:	4083      	lsls	r3, r0
   828b2:	4a01      	ldr	r2, [pc, #4]	; (828b8 <pmc_enable_pck+0xc>)
   828b4:	6013      	str	r3, [r2, #0]
}
   828b6:	4770      	bx	lr
   828b8:	400e0400 	.word	0x400e0400

000828bc <pmc_set_fast_startup_input>:
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   828bc:	f3c0 0312 	ubfx	r3, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   828c0:	4a02      	ldr	r2, [pc, #8]	; (828cc <pmc_set_fast_startup_input+0x10>)
   828c2:	6f10      	ldr	r0, [r2, #112]	; 0x70
   828c4:	4318      	orrs	r0, r3
   828c6:	6710      	str	r0, [r2, #112]	; 0x70
}
   828c8:	4770      	bx	lr
   828ca:	bf00      	nop
   828cc:	400e0400 	.word	0x400e0400

000828d0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   828d0:	b570      	push	{r4, r5, r6, lr}
   828d2:	460d      	mov	r5, r1
   828d4:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
   828d6:	4606      	mov	r6, r0
   828d8:	b158      	cbz	r0, 828f2 <_read+0x22>
		return -1;
   828da:	f04f 36ff 	mov.w	r6, #4294967295
   828de:	e00a      	b.n	828f6 <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   828e0:	4b06      	ldr	r3, [pc, #24]	; (828fc <_read+0x2c>)
   828e2:	6818      	ldr	r0, [r3, #0]
   828e4:	4b06      	ldr	r3, [pc, #24]	; (82900 <_read+0x30>)
   828e6:	681b      	ldr	r3, [r3, #0]
   828e8:	4629      	mov	r1, r5
   828ea:	4798      	blx	r3
		ptr++;
   828ec:	3501      	adds	r5, #1
		nChars++;
   828ee:	3601      	adds	r6, #1
	for (; len > 0; --len) {
   828f0:	3c01      	subs	r4, #1
   828f2:	2c00      	cmp	r4, #0
   828f4:	dcf4      	bgt.n	828e0 <_read+0x10>
	}
	return nChars;
}
   828f6:	4630      	mov	r0, r6
   828f8:	bd70      	pop	{r4, r5, r6, pc}
   828fa:	bf00      	nop
   828fc:	20001974 	.word	0x20001974
   82900:	2000194c 	.word	0x2000194c

00082904 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   82904:	4b02      	ldr	r3, [pc, #8]	; (82910 <pmc_is_wakeup_clocks_restored+0xc>)
   82906:	7818      	ldrb	r0, [r3, #0]
}
   82908:	f080 0001 	eor.w	r0, r0, #1
   8290c:	4770      	bx	lr
   8290e:	bf00      	nop
   82910:	20001030 	.word	0x20001030

00082914 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82914:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82918:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8291c:	670a      	str	r2, [r1, #112]	; 0x70
}
   8291e:	4770      	bx	lr

00082920 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82920:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82924:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82928:	674a      	str	r2, [r1, #116]	; 0x74
}
   8292a:	4770      	bx	lr

0008292c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   8292c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82930:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82934:	678a      	str	r2, [r1, #120]	; 0x78
}
   82936:	4770      	bx	lr

00082938 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82938:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8293c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82940:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   82944:	4770      	bx	lr
   82946:	0000      	movs	r0, r0

00082948 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   82948:	b508      	push	{r3, lr}
   8294a:	2014      	movs	r0, #20
   8294c:	4b01      	ldr	r3, [pc, #4]	; (82954 <spi_enable_clock+0xc>)
   8294e:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   82950:	bd08      	pop	{r3, pc}
   82952:	bf00      	nop
   82954:	00082845 	.word	0x00082845

00082958 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   82958:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
   8295a:	f643 2498 	movw	r4, #15000	; 0x3a98
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   8295e:	6905      	ldr	r5, [r0, #16]
   82960:	f015 0f02 	tst.w	r5, #2
   82964:	d103      	bne.n	8296e <spi_write+0x16>
		if (!timeout--) {
   82966:	1e65      	subs	r5, r4, #1
   82968:	b184      	cbz	r4, 8298c <spi_write+0x34>
   8296a:	462c      	mov	r4, r5
   8296c:	e7f7      	b.n	8295e <spi_write+0x6>
	if (p_spi->SPI_MR & SPI_MR_PS) {
   8296e:	6844      	ldr	r4, [r0, #4]
   82970:	f014 0f02 	tst.w	r4, #2
   82974:	d006      	beq.n	82984 <spi_write+0x2c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   82976:	0412      	lsls	r2, r2, #16
   82978:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8297c:	4311      	orrs	r1, r2
		if (uc_last) {
   8297e:	b10b      	cbz	r3, 82984 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   82980:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   82984:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   82986:	2000      	movs	r0, #0
}
   82988:	bc30      	pop	{r4, r5}
   8298a:	4770      	bx	lr
			return SPI_ERROR_TIMEOUT;
   8298c:	2001      	movs	r0, #1
   8298e:	e7fb      	b.n	82988 <spi_write+0x30>

00082990 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   82990:	b13a      	cbz	r2, 829a2 <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   82992:	310c      	adds	r1, #12
   82994:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82998:	f043 0301 	orr.w	r3, r3, #1
   8299c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   829a0:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   829a2:	310c      	adds	r1, #12
   829a4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   829a8:	f023 0301 	bic.w	r3, r3, #1
   829ac:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
   829b0:	4770      	bx	lr

000829b2 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   829b2:	b13a      	cbz	r2, 829c4 <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   829b4:	310c      	adds	r1, #12
   829b6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   829ba:	f043 0302 	orr.w	r3, r3, #2
   829be:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   829c2:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   829c4:	310c      	adds	r1, #12
   829c6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   829ca:	f023 0302 	bic.w	r3, r3, #2
   829ce:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
   829d2:	4770      	bx	lr

000829d4 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   829d4:	4401      	add	r1, r0
   829d6:	3901      	subs	r1, #1
   829d8:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   829dc:	1e43      	subs	r3, r0, #1
   829de:	2bfe      	cmp	r3, #254	; 0xfe
   829e0:	d801      	bhi.n	829e6 <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
   829e2:	b200      	sxth	r0, r0
   829e4:	4770      	bx	lr
		return -1;
   829e6:	f04f 30ff 	mov.w	r0, #4294967295
}
   829ea:	4770      	bx	lr

000829ec <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   829ec:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   829ee:	310c      	adds	r1, #12
   829f0:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   829f4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
   829f8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   829fc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   82a00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   82a04:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   82a08:	bc10      	pop	{r4}
   82a0a:	4770      	bx	lr

00082a0c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82a0c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82a0e:	4a15      	ldr	r2, [pc, #84]	; (82a64 <Reset_Handler+0x58>)
   82a10:	4b15      	ldr	r3, [pc, #84]	; (82a68 <Reset_Handler+0x5c>)
   82a12:	429a      	cmp	r2, r3
   82a14:	d009      	beq.n	82a2a <Reset_Handler+0x1e>
	pDest = &_srelocate;
   82a16:	4b14      	ldr	r3, [pc, #80]	; (82a68 <Reset_Handler+0x5c>)
	pSrc = &_etext;
   82a18:	4a12      	ldr	r2, [pc, #72]	; (82a64 <Reset_Handler+0x58>)
   82a1a:	e003      	b.n	82a24 <Reset_Handler+0x18>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82a1c:	f852 1b04 	ldr.w	r1, [r2], #4
   82a20:	f843 1b04 	str.w	r1, [r3], #4
		for (; pDest < &_erelocate;) {
   82a24:	4911      	ldr	r1, [pc, #68]	; (82a6c <Reset_Handler+0x60>)
   82a26:	428b      	cmp	r3, r1
   82a28:	d3f8      	bcc.n	82a1c <Reset_Handler+0x10>
	pSrc = &_etext;
   82a2a:	4b11      	ldr	r3, [pc, #68]	; (82a70 <Reset_Handler+0x64>)
   82a2c:	e002      	b.n	82a34 <Reset_Handler+0x28>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82a2e:	2200      	movs	r2, #0
   82a30:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82a34:	4a0f      	ldr	r2, [pc, #60]	; (82a74 <Reset_Handler+0x68>)
   82a36:	4293      	cmp	r3, r2
   82a38:	d3f9      	bcc.n	82a2e <Reset_Handler+0x22>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82a3a:	4b0f      	ldr	r3, [pc, #60]	; (82a78 <Reset_Handler+0x6c>)
   82a3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82a40:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82a44:	490d      	ldr	r1, [pc, #52]	; (82a7c <Reset_Handler+0x70>)
   82a46:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   82a48:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82a50:	d203      	bcs.n	82a5a <Reset_Handler+0x4e>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82a52:	688b      	ldr	r3, [r1, #8]
   82a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82a58:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82a5a:	4b09      	ldr	r3, [pc, #36]	; (82a80 <Reset_Handler+0x74>)
   82a5c:	4798      	blx	r3

	/* Branch to main function */
	main();
   82a5e:	4b09      	ldr	r3, [pc, #36]	; (82a84 <Reset_Handler+0x78>)
   82a60:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82a62:	e7fe      	b.n	82a62 <Reset_Handler+0x56>
   82a64:	0008c3bc 	.word	0x0008c3bc
   82a68:	20000000 	.word	0x20000000
   82a6c:	20000d78 	.word	0x20000d78
   82a70:	20000d78 	.word	0x20000d78
   82a74:	200019a0 	.word	0x200019a0
   82a78:	00080000 	.word	0x00080000
   82a7c:	e000ed00 	.word	0xe000ed00
   82a80:	00084fd5 	.word	0x00084fd5
   82a84:	00080535 	.word	0x00080535

00082a88 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   82a88:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82a8a:	4a09      	ldr	r2, [pc, #36]	; (82ab0 <_sbrk+0x28>)
   82a8c:	6812      	ldr	r2, [r2, #0]
   82a8e:	b142      	cbz	r2, 82aa2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82a90:	4a07      	ldr	r2, [pc, #28]	; (82ab0 <_sbrk+0x28>)
   82a92:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   82a94:	18c1      	adds	r1, r0, r3
   82a96:	4a07      	ldr	r2, [pc, #28]	; (82ab4 <_sbrk+0x2c>)
   82a98:	4291      	cmp	r1, r2
   82a9a:	dc06      	bgt.n	82aaa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82a9c:	4a04      	ldr	r2, [pc, #16]	; (82ab0 <_sbrk+0x28>)
   82a9e:	6011      	str	r1, [r2, #0]

	return (caddr_t) prev_heap;
   82aa0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82aa2:	4a03      	ldr	r2, [pc, #12]	; (82ab0 <_sbrk+0x28>)
   82aa4:	4904      	ldr	r1, [pc, #16]	; (82ab8 <_sbrk+0x30>)
   82aa6:	6011      	str	r1, [r2, #0]
   82aa8:	e7f2      	b.n	82a90 <_sbrk+0x8>
		return (caddr_t) -1;	
   82aaa:	f04f 30ff 	mov.w	r0, #4294967295
}
   82aae:	4770      	bx	lr
   82ab0:	20001034 	.word	0x20001034
   82ab4:	20083ffc 	.word	0x20083ffc
   82ab8:	20084000 	.word	0x20084000

00082abc <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82abc:	f04f 30ff 	mov.w	r0, #4294967295
   82ac0:	4770      	bx	lr

00082ac2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82ac6:	604b      	str	r3, [r1, #4]

	return 0;
}
   82ac8:	2000      	movs	r0, #0
   82aca:	4770      	bx	lr

00082acc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82acc:	2001      	movs	r0, #1
   82ace:	4770      	bx	lr

00082ad0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82ad0:	2000      	movs	r0, #0
   82ad2:	4770      	bx	lr

00082ad4 <_exit>:

extern void _exit(int status)
{
   82ad4:	b508      	push	{r3, lr}
   82ad6:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   82ad8:	4801      	ldr	r0, [pc, #4]	; (82ae0 <_exit+0xc>)
   82ada:	4b02      	ldr	r3, [pc, #8]	; (82ae4 <_exit+0x10>)
   82adc:	4798      	blx	r3

	for (;;);
   82ade:	e7fe      	b.n	82ade <_exit+0xa>
   82ae0:	0008bf20 	.word	0x0008bf20
   82ae4:	0008501d 	.word	0x0008501d

00082ae8 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   82ae8:	4770      	bx	lr

00082aea <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   82aea:	f04f 30ff 	mov.w	r0, #4294967295
   82aee:	4770      	bx	lr

00082af0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82af0:	b508      	push	{r3, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82af2:	203e      	movs	r0, #62	; 0x3e
   82af4:	4b07      	ldr	r3, [pc, #28]	; (82b14 <sysclk_enable_usb+0x24>)
   82af6:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82af8:	4b07      	ldr	r3, [pc, #28]	; (82b18 <sysclk_enable_usb+0x28>)
   82afa:	4798      	blx	r3
   82afc:	2800      	cmp	r0, #0
   82afe:	d0fb      	beq.n	82af8 <sysclk_enable_usb+0x8>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82b00:	4b06      	ldr	r3, [pc, #24]	; (82b1c <sysclk_enable_usb+0x2c>)
   82b02:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   82b06:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   82b08:	4b05      	ldr	r3, [pc, #20]	; (82b20 <sysclk_enable_usb+0x30>)
   82b0a:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82b0c:	2800      	cmp	r0, #0
   82b0e:	d0fb      	beq.n	82b08 <sysclk_enable_usb+0x18>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   82b10:	bd08      	pop	{r3, pc}
   82b12:	bf00      	nop
   82b14:	000827ad 	.word	0x000827ad
   82b18:	000827d5 	.word	0x000827d5
   82b1c:	400e0400 	.word	0x400e0400
   82b20:	00082835 	.word	0x00082835

00082b24 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82b24:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82b26:	4812      	ldr	r0, [pc, #72]	; (82b70 <sysclk_init+0x4c>)
   82b28:	4b12      	ldr	r3, [pc, #72]	; (82b74 <sysclk_init+0x50>)
   82b2a:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82b2c:	203e      	movs	r0, #62	; 0x3e
   82b2e:	4b12      	ldr	r3, [pc, #72]	; (82b78 <sysclk_init+0x54>)
   82b30:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82b32:	4b12      	ldr	r3, [pc, #72]	; (82b7c <sysclk_init+0x58>)
   82b34:	4798      	blx	r3
   82b36:	2800      	cmp	r0, #0
   82b38:	d0fb      	beq.n	82b32 <sysclk_init+0xe>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82b3a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82b3e:	4b10      	ldr	r3, [pc, #64]	; (82b80 <sysclk_init+0x5c>)
   82b40:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   82b42:	4b10      	ldr	r3, [pc, #64]	; (82b84 <sysclk_init+0x60>)
   82b44:	4798      	blx	r3
   82b46:	2800      	cmp	r0, #0
   82b48:	d0fb      	beq.n	82b42 <sysclk_init+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
   82b4a:	4b0f      	ldr	r3, [pc, #60]	; (82b88 <sysclk_init+0x64>)
   82b4c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82b4e:	4b0f      	ldr	r3, [pc, #60]	; (82b8c <sysclk_init+0x68>)
   82b50:	4a0f      	ldr	r2, [pc, #60]	; (82b90 <sysclk_init+0x6c>)
   82b52:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   82b54:	4b0f      	ldr	r3, [pc, #60]	; (82b94 <sysclk_init+0x70>)
   82b56:	4798      	blx	r3
   82b58:	2800      	cmp	r0, #0
   82b5a:	d0fb      	beq.n	82b54 <sysclk_init+0x30>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82b5c:	2010      	movs	r0, #16
   82b5e:	4b0e      	ldr	r3, [pc, #56]	; (82b98 <sysclk_init+0x74>)
   82b60:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82b62:	4b0e      	ldr	r3, [pc, #56]	; (82b9c <sysclk_init+0x78>)
   82b64:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82b66:	4802      	ldr	r0, [pc, #8]	; (82b70 <sysclk_init+0x4c>)
   82b68:	4b02      	ldr	r3, [pc, #8]	; (82b74 <sysclk_init+0x50>)
   82b6a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82b6c:	bd08      	pop	{r3, pc}
   82b6e:	bf00      	nop
   82b70:	05b8d800 	.word	0x05b8d800
   82b74:	20000139 	.word	0x20000139
   82b78:	000827ad 	.word	0x000827ad
   82b7c:	000827d5 	.word	0x000827d5
   82b80:	000827f5 	.word	0x000827f5
   82b84:	000827e5 	.word	0x000827e5
   82b88:	00082815 	.word	0x00082815
   82b8c:	400e0400 	.word	0x400e0400
   82b90:	200f3f01 	.word	0x200f3f01
   82b94:	00082825 	.word	0x00082825
   82b98:	00082759 	.word	0x00082759
   82b9c:	00082ba1 	.word	0x00082ba1

00082ba0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82ba0:	4b3f      	ldr	r3, [pc, #252]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ba4:	f003 0303 	and.w	r3, r3, #3
   82ba8:	2b01      	cmp	r3, #1
   82baa:	d033      	beq.n	82c14 <SystemCoreClockUpdate+0x74>
   82bac:	d80a      	bhi.n	82bc4 <SystemCoreClockUpdate+0x24>
   82bae:	b9eb      	cbnz	r3, 82bec <SystemCoreClockUpdate+0x4c>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82bb0:	4b3c      	ldr	r3, [pc, #240]	; (82ca4 <SystemCoreClockUpdate+0x104>)
   82bb2:	695b      	ldr	r3, [r3, #20]
   82bb4:	f013 0f80 	tst.w	r3, #128	; 0x80
   82bb8:	d027      	beq.n	82c0a <SystemCoreClockUpdate+0x6a>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82bba:	4b3b      	ldr	r3, [pc, #236]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82bbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82bc0:	601a      	str	r2, [r3, #0]
   82bc2:	e013      	b.n	82bec <SystemCoreClockUpdate+0x4c>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82bc4:	3b02      	subs	r3, #2
   82bc6:	2b01      	cmp	r3, #1
   82bc8:	d810      	bhi.n	82bec <SystemCoreClockUpdate+0x4c>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82bca:	4b35      	ldr	r3, [pc, #212]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82bcc:	6a1b      	ldr	r3, [r3, #32]
   82bce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82bd2:	d03b      	beq.n	82c4c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82bd4:	4b34      	ldr	r3, [pc, #208]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82bd6:	4a35      	ldr	r2, [pc, #212]	; (82cac <SystemCoreClockUpdate+0x10c>)
   82bd8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82bda:	4b31      	ldr	r3, [pc, #196]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82bde:	f003 0303 	and.w	r3, r3, #3
   82be2:	2b02      	cmp	r3, #2
   82be4:	d045      	beq.n	82c72 <SystemCoreClockUpdate+0xd2>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82be6:	4b30      	ldr	r3, [pc, #192]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82be8:	4a31      	ldr	r2, [pc, #196]	; (82cb0 <SystemCoreClockUpdate+0x110>)
   82bea:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82bec:	4b2c      	ldr	r3, [pc, #176]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82bf4:	2b70      	cmp	r3, #112	; 0x70
   82bf6:	d04a      	beq.n	82c8e <SystemCoreClockUpdate+0xee>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82bf8:	4b29      	ldr	r3, [pc, #164]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82bfc:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82c00:	4929      	ldr	r1, [pc, #164]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c02:	680b      	ldr	r3, [r1, #0]
   82c04:	40d3      	lsrs	r3, r2
   82c06:	600b      	str	r3, [r1, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   82c08:	4770      	bx	lr
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82c0a:	4b27      	ldr	r3, [pc, #156]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c0c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82c10:	601a      	str	r2, [r3, #0]
   82c12:	e7eb      	b.n	82bec <SystemCoreClockUpdate+0x4c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82c14:	4b22      	ldr	r3, [pc, #136]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82c16:	6a1b      	ldr	r3, [r3, #32]
   82c18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82c1c:	d003      	beq.n	82c26 <SystemCoreClockUpdate+0x86>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82c1e:	4b22      	ldr	r3, [pc, #136]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c20:	4a22      	ldr	r2, [pc, #136]	; (82cac <SystemCoreClockUpdate+0x10c>)
   82c22:	601a      	str	r2, [r3, #0]
   82c24:	e7e2      	b.n	82bec <SystemCoreClockUpdate+0x4c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82c26:	4b20      	ldr	r3, [pc, #128]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c28:	4a22      	ldr	r2, [pc, #136]	; (82cb4 <SystemCoreClockUpdate+0x114>)
   82c2a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82c2c:	4b1c      	ldr	r3, [pc, #112]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82c2e:	6a1b      	ldr	r3, [r3, #32]
   82c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82c34:	2b10      	cmp	r3, #16
   82c36:	d005      	beq.n	82c44 <SystemCoreClockUpdate+0xa4>
   82c38:	2b20      	cmp	r3, #32
   82c3a:	d1d7      	bne.n	82bec <SystemCoreClockUpdate+0x4c>
				SystemCoreClock *= 3U;
   82c3c:	4b1a      	ldr	r3, [pc, #104]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c3e:	4a1b      	ldr	r2, [pc, #108]	; (82cac <SystemCoreClockUpdate+0x10c>)
   82c40:	601a      	str	r2, [r3, #0]
				break;
   82c42:	e7d3      	b.n	82bec <SystemCoreClockUpdate+0x4c>
				SystemCoreClock *= 2U;
   82c44:	4b18      	ldr	r3, [pc, #96]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c46:	4a1c      	ldr	r2, [pc, #112]	; (82cb8 <SystemCoreClockUpdate+0x118>)
   82c48:	601a      	str	r2, [r3, #0]
				break;
   82c4a:	e7cf      	b.n	82bec <SystemCoreClockUpdate+0x4c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82c4c:	4b16      	ldr	r3, [pc, #88]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c4e:	4a19      	ldr	r2, [pc, #100]	; (82cb4 <SystemCoreClockUpdate+0x114>)
   82c50:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82c52:	4b13      	ldr	r3, [pc, #76]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82c54:	6a1b      	ldr	r3, [r3, #32]
   82c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82c5a:	2b10      	cmp	r3, #16
   82c5c:	d005      	beq.n	82c6a <SystemCoreClockUpdate+0xca>
   82c5e:	2b20      	cmp	r3, #32
   82c60:	d1bb      	bne.n	82bda <SystemCoreClockUpdate+0x3a>
				SystemCoreClock *= 3U;
   82c62:	4b11      	ldr	r3, [pc, #68]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c64:	4a11      	ldr	r2, [pc, #68]	; (82cac <SystemCoreClockUpdate+0x10c>)
   82c66:	601a      	str	r2, [r3, #0]
				break;
   82c68:	e7b7      	b.n	82bda <SystemCoreClockUpdate+0x3a>
				SystemCoreClock *= 2U;
   82c6a:	4b0f      	ldr	r3, [pc, #60]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c6c:	4a12      	ldr	r2, [pc, #72]	; (82cb8 <SystemCoreClockUpdate+0x118>)
   82c6e:	601a      	str	r2, [r3, #0]
				break;
   82c70:	e7b3      	b.n	82bda <SystemCoreClockUpdate+0x3a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82c72:	480b      	ldr	r0, [pc, #44]	; (82ca0 <SystemCoreClockUpdate+0x100>)
   82c74:	6a82      	ldr	r2, [r0, #40]	; 0x28
   82c76:	f3c2 420a 	ubfx	r2, r2, #16, #11
   82c7a:	490b      	ldr	r1, [pc, #44]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c7c:	680b      	ldr	r3, [r1, #0]
   82c7e:	fb02 3303 	mla	r3, r2, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   82c82:	6a82      	ldr	r2, [r0, #40]	; 0x28
   82c84:	b2d2      	uxtb	r2, r2
   82c86:	fbb3 f3f2 	udiv	r3, r3, r2
   82c8a:	600b      	str	r3, [r1, #0]
   82c8c:	e7ae      	b.n	82bec <SystemCoreClockUpdate+0x4c>
		SystemCoreClock /= 3U;
   82c8e:	4a06      	ldr	r2, [pc, #24]	; (82ca8 <SystemCoreClockUpdate+0x108>)
   82c90:	6813      	ldr	r3, [r2, #0]
   82c92:	490a      	ldr	r1, [pc, #40]	; (82cbc <SystemCoreClockUpdate+0x11c>)
   82c94:	fba1 1303 	umull	r1, r3, r1, r3
   82c98:	085b      	lsrs	r3, r3, #1
   82c9a:	6013      	str	r3, [r2, #0]
   82c9c:	4770      	bx	lr
   82c9e:	bf00      	nop
   82ca0:	400e0400 	.word	0x400e0400
   82ca4:	400e1210 	.word	0x400e1210
   82ca8:	20000204 	.word	0x20000204
   82cac:	00b71b00 	.word	0x00b71b00
   82cb0:	0e4e1c00 	.word	0x0e4e1c00
   82cb4:	003d0900 	.word	0x003d0900
   82cb8:	007a1200 	.word	0x007a1200
   82cbc:	aaaaaaab 	.word	0xaaaaaaab

00082cc0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   82cc0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82cc2:	018b      	lsls	r3, r1, #6
   82cc4:	eb00 1181 	add.w	r1, r0, r1, lsl #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   82cc8:	2402      	movs	r4, #2
   82cca:	50c4      	str	r4, [r0, r3]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   82ccc:	f04f 33ff 	mov.w	r3, #4294967295
   82cd0:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   82cd2:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   82cd4:	604a      	str	r2, [r1, #4]
}
   82cd6:	bc10      	pop	{r4}
   82cd8:	4770      	bx	lr

00082cda <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   82cda:	0189      	lsls	r1, r1, #6
   82cdc:	2305      	movs	r3, #5
   82cde:	5043      	str	r3, [r0, r1]
}
   82ce0:	4770      	bx	lr

00082ce2 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   82ce2:	0189      	lsls	r1, r1, #6
   82ce4:	2302      	movs	r3, #2
   82ce6:	5043      	str	r3, [r0, r1]
}
   82ce8:	4770      	bx	lr

00082cea <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82cea:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   82cee:	61c2      	str	r2, [r0, #28]
}
   82cf0:	4770      	bx	lr

00082cf2 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82cf2:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   82cf6:	6242      	str	r2, [r0, #36]	; 0x24
}
   82cf8:	4770      	bx	lr

00082cfa <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82cfa:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   82cfe:	6a00      	ldr	r0, [r0, #32]
}
   82d00:	4770      	bx	lr

00082d02 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   82d02:	4603      	mov	r3, r0
	uint32_t val;

	if (len == 0)
   82d04:	460a      	mov	r2, r1
   82d06:	b159      	cbz	r1, 82d20 <twi_mk_addr+0x1e>
		return 0;

	val = addr[0];
   82d08:	7800      	ldrb	r0, [r0, #0]
	if (len > 1) {
   82d0a:	2901      	cmp	r1, #1
   82d0c:	dd02      	ble.n	82d14 <twi_mk_addr+0x12>
		val <<= 8;
		val |= addr[1];
   82d0e:	7859      	ldrb	r1, [r3, #1]
   82d10:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (len > 2) {
   82d14:	2a02      	cmp	r2, #2
   82d16:	dd04      	ble.n	82d22 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
   82d18:	789b      	ldrb	r3, [r3, #2]
   82d1a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   82d1e:	4770      	bx	lr
		return 0;
   82d20:	2000      	movs	r0, #0
	}
	return val;
}
   82d22:	4770      	bx	lr

00082d24 <twi_enable_master_mode>:
	p_twi->TWI_CR = TWI_CR_MSDIS;
   82d24:	2308      	movs	r3, #8
   82d26:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   82d28:	2320      	movs	r3, #32
   82d2a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   82d2c:	2304      	movs	r3, #4
   82d2e:	6003      	str	r3, [r0, #0]
}
   82d30:	4770      	bx	lr
   82d32:	0000      	movs	r0, r0

00082d34 <twi_set_speed>:
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   82d34:	4b0d      	ldr	r3, [pc, #52]	; (82d6c <twi_set_speed+0x38>)
   82d36:	4299      	cmp	r1, r3
   82d38:	d816      	bhi.n	82d68 <twi_set_speed+0x34>
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   82d3a:	004b      	lsls	r3, r1, #1
   82d3c:	fbb2 f2f3 	udiv	r2, r2, r3
   82d40:	1f13      	subs	r3, r2, #4
	uint32_t ckdiv = 0;
   82d42:	2200      	movs	r2, #0
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   82d44:	e001      	b.n	82d4a <twi_set_speed+0x16>
		ckdiv++;
   82d46:	3201      	adds	r2, #1
		c_lh_div /= TWI_CLK_DIVIDER;
   82d48:	085b      	lsrs	r3, r3, #1
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   82d4a:	2bff      	cmp	r3, #255	; 0xff
   82d4c:	d901      	bls.n	82d52 <twi_set_speed+0x1e>
   82d4e:	2a06      	cmp	r2, #6
   82d50:	d9f9      	bls.n	82d46 <twi_set_speed+0x12>
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   82d52:	b2d9      	uxtb	r1, r3
   82d54:	021b      	lsls	r3, r3, #8
   82d56:	b29b      	uxth	r3, r3
   82d58:	430b      	orrs	r3, r1
			TWI_CWGR_CKDIV(ckdiv);
   82d5a:	0412      	lsls	r2, r2, #16
   82d5c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   82d60:	431a      	orrs	r2, r3
	p_twi->TWI_CWGR =
   82d62:	6102      	str	r2, [r0, #16]
	return PASS;
   82d64:	2000      	movs	r0, #0
   82d66:	4770      	bx	lr
		return FAIL;
   82d68:	2001      	movs	r0, #1
}
   82d6a:	4770      	bx	lr
   82d6c:	00061a80 	.word	0x00061a80

00082d70 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   82d70:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   82d72:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   82d74:	688d      	ldr	r5, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   82d76:	2c00      	cmp	r4, #0
   82d78:	d042      	beq.n	82e00 <twi_master_read+0x90>
   82d7a:	4606      	mov	r6, r0
   82d7c:	4608      	mov	r0, r1
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   82d7e:	2100      	movs	r1, #0
   82d80:	6071      	str	r1, [r6, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   82d82:	7c03      	ldrb	r3, [r0, #16]
   82d84:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   82d86:	6842      	ldr	r2, [r0, #4]
   82d88:	0212      	lsls	r2, r2, #8
   82d8a:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   82d8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   82d92:	4313      	orrs	r3, r2
   82d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   82d98:	6073      	str	r3, [r6, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   82d9a:	60f1      	str	r1, [r6, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   82d9c:	6841      	ldr	r1, [r0, #4]
   82d9e:	4b1c      	ldr	r3, [pc, #112]	; (82e10 <twi_master_read+0xa0>)
   82da0:	4798      	blx	r3
   82da2:	60f0      	str	r0, [r6, #12]

	/* Send a START condition */
	if (cnt == 1) {
   82da4:	2c01      	cmp	r4, #1
   82da6:	d005      	beq.n	82db4 <twi_master_read+0x44>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
		stop_sent = 1;
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   82da8:	2301      	movs	r3, #1
   82daa:	6033      	str	r3, [r6, #0]
		stop_sent = 0;
   82dac:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   82dae:	f643 2398 	movw	r3, #15000	; 0x3a98
   82db2:	e00e      	b.n	82dd2 <twi_master_read+0x62>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   82db4:	2303      	movs	r3, #3
   82db6:	6033      	str	r3, [r6, #0]
		stop_sent = 1;
   82db8:	2001      	movs	r0, #1
   82dba:	e7f8      	b.n	82dae <twi_master_read+0x3e>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
   82dbc:	f012 0f02 	tst.w	r2, #2
   82dc0:	d016      	beq.n	82df0 <twi_master_read+0x80>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   82dc2:	6b32      	ldr	r2, [r6, #48]	; 0x30
   82dc4:	462b      	mov	r3, r5
   82dc6:	f803 2b01 	strb.w	r2, [r3], #1

		cnt--;
   82dca:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
   82dcc:	461d      	mov	r5, r3
		timeout = TWI_TIMEOUT;
   82dce:	f643 2398 	movw	r3, #15000	; 0x3a98
	while (cnt > 0) {
   82dd2:	b17c      	cbz	r4, 82df4 <twi_master_read+0x84>
		status = p_twi->TWI_SR;
   82dd4:	6a32      	ldr	r2, [r6, #32]
		if (status & TWI_SR_NACK) {
   82dd6:	f412 7f80 	tst.w	r2, #256	; 0x100
   82dda:	d114      	bne.n	82e06 <twi_master_read+0x96>
		if (!timeout--) {
   82ddc:	1e59      	subs	r1, r3, #1
   82dde:	b1a3      	cbz	r3, 82e0a <twi_master_read+0x9a>
		if (cnt == 1  && !stop_sent) {
   82de0:	2c01      	cmp	r4, #1
   82de2:	d1eb      	bne.n	82dbc <twi_master_read+0x4c>
   82de4:	2800      	cmp	r0, #0
   82de6:	d1e9      	bne.n	82dbc <twi_master_read+0x4c>
			p_twi->TWI_CR = TWI_CR_STOP;
   82de8:	2302      	movs	r3, #2
   82dea:	6033      	str	r3, [r6, #0]
			stop_sent = 1;
   82dec:	2001      	movs	r0, #1
   82dee:	e7e5      	b.n	82dbc <twi_master_read+0x4c>
		if (!timeout--) {
   82df0:	460b      	mov	r3, r1
   82df2:	e7ee      	b.n	82dd2 <twi_master_read+0x62>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   82df4:	6a33      	ldr	r3, [r6, #32]
   82df6:	f013 0f01 	tst.w	r3, #1
   82dfa:	d0fb      	beq.n	82df4 <twi_master_read+0x84>
	}

	p_twi->TWI_SR;
   82dfc:	6a33      	ldr	r3, [r6, #32]

	return TWI_SUCCESS;
   82dfe:	e000      	b.n	82e02 <twi_master_read+0x92>
		return TWI_INVALID_ARGUMENT;
   82e00:	2401      	movs	r4, #1
}
   82e02:	4620      	mov	r0, r4
   82e04:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
   82e06:	2405      	movs	r4, #5
   82e08:	e7fb      	b.n	82e02 <twi_master_read+0x92>
			return TWI_ERROR_TIMEOUT;
   82e0a:	2409      	movs	r4, #9
   82e0c:	e7f9      	b.n	82e02 <twi_master_read+0x92>
   82e0e:	bf00      	nop
   82e10:	00082d03 	.word	0x00082d03

00082e14 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   82e14:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
   82e16:	68ce      	ldr	r6, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   82e18:	688c      	ldr	r4, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   82e1a:	b37e      	cbz	r6, 82e7c <twi_master_write+0x68>
   82e1c:	4605      	mov	r5, r0
   82e1e:	4608      	mov	r0, r1
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   82e20:	2100      	movs	r1, #0
   82e22:	6069      	str	r1, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   82e24:	7c03      	ldrb	r3, [r0, #16]
   82e26:	041b      	lsls	r3, r3, #16
   82e28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   82e2c:	6842      	ldr	r2, [r0, #4]
   82e2e:	0212      	lsls	r2, r2, #8
   82e30:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   82e34:	4313      	orrs	r3, r2
   82e36:	606b      	str	r3, [r5, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   82e38:	60e9      	str	r1, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   82e3a:	6841      	ldr	r1, [r0, #4]
   82e3c:	4b12      	ldr	r3, [pc, #72]	; (82e88 <twi_master_write+0x74>)
   82e3e:	4798      	blx	r3
   82e40:	60e8      	str	r0, [r5, #12]

	/* Send all bytes */
	while (cnt > 0) {
   82e42:	b16e      	cbz	r6, 82e60 <twi_master_write+0x4c>
		status = p_twi->TWI_SR;
   82e44:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   82e46:	f413 7f80 	tst.w	r3, #256	; 0x100
   82e4a:	d119      	bne.n	82e80 <twi_master_write+0x6c>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   82e4c:	f013 0f04 	tst.w	r3, #4
   82e50:	d0f7      	beq.n	82e42 <twi_master_write+0x2e>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   82e52:	4623      	mov	r3, r4
   82e54:	f813 2b01 	ldrb.w	r2, [r3], #1
   82e58:	636a      	str	r2, [r5, #52]	; 0x34

		cnt--;
   82e5a:	3e01      	subs	r6, #1
		p_twi->TWI_THR = *buffer++;
   82e5c:	461c      	mov	r4, r3
   82e5e:	e7f0      	b.n	82e42 <twi_master_write+0x2e>
	}

	while (1) {
		status = p_twi->TWI_SR;
   82e60:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   82e62:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   82e66:	d10d      	bne.n	82e84 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   82e68:	f013 0f04 	tst.w	r3, #4
   82e6c:	d0f8      	beq.n	82e60 <twi_master_write+0x4c>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   82e6e:	2302      	movs	r3, #2
   82e70:	602b      	str	r3, [r5, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   82e72:	6a2b      	ldr	r3, [r5, #32]
   82e74:	f013 0f01 	tst.w	r3, #1
   82e78:	d0fb      	beq.n	82e72 <twi_master_write+0x5e>
   82e7a:	e000      	b.n	82e7e <twi_master_write+0x6a>
		return TWI_INVALID_ARGUMENT;
   82e7c:	2001      	movs	r0, #1
	}

	return TWI_SUCCESS;
}
   82e7e:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
   82e80:	2005      	movs	r0, #5
   82e82:	e7fc      	b.n	82e7e <twi_master_write+0x6a>
			return TWI_RECEIVE_NACK;
   82e84:	2005      	movs	r0, #5
   82e86:	e7fa      	b.n	82e7e <twi_master_write+0x6a>
   82e88:	00082d03 	.word	0x00082d03

00082e8c <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   82e8c:	2380      	movs	r3, #128	; 0x80
   82e8e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   82e90:	6b03      	ldr	r3, [r0, #48]	; 0x30
}
   82e92:	4770      	bx	lr

00082e94 <twi_master_init>:
{
   82e94:	b538      	push	{r3, r4, r5, lr}
   82e96:	4604      	mov	r4, r0
   82e98:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   82e9a:	f04f 33ff 	mov.w	r3, #4294967295
   82e9e:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   82ea0:	6a03      	ldr	r3, [r0, #32]
	twi_reset(p_twi);
   82ea2:	4b0a      	ldr	r3, [pc, #40]	; (82ecc <twi_master_init+0x38>)
   82ea4:	4798      	blx	r3
	twi_enable_master_mode(p_twi);
   82ea6:	4620      	mov	r0, r4
   82ea8:	4b09      	ldr	r3, [pc, #36]	; (82ed0 <twi_master_init+0x3c>)
   82eaa:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   82eac:	682a      	ldr	r2, [r5, #0]
   82eae:	6869      	ldr	r1, [r5, #4]
   82eb0:	4620      	mov	r0, r4
   82eb2:	4b08      	ldr	r3, [pc, #32]	; (82ed4 <twi_master_init+0x40>)
   82eb4:	4798      	blx	r3
   82eb6:	2801      	cmp	r0, #1
   82eb8:	d000      	beq.n	82ebc <twi_master_init+0x28>
	uint32_t status = TWI_SUCCESS;
   82eba:	2000      	movs	r0, #0
	if (p_opt->smbus == 1) {
   82ebc:	7a6b      	ldrb	r3, [r5, #9]
   82ebe:	2b01      	cmp	r3, #1
   82ec0:	d000      	beq.n	82ec4 <twi_master_init+0x30>
}
   82ec2:	bd38      	pop	{r3, r4, r5, pc}
		p_twi->TWI_CR = TWI_CR_QUICK;
   82ec4:	2340      	movs	r3, #64	; 0x40
   82ec6:	6023      	str	r3, [r4, #0]
	return status;
   82ec8:	e7fb      	b.n	82ec2 <twi_master_init+0x2e>
   82eca:	bf00      	nop
   82ecc:	00082e8d 	.word	0x00082e8d
   82ed0:	00082d25 	.word	0x00082d25
   82ed4:	00082d35 	.word	0x00082d35

00082ed8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82ed8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82eda:	23ac      	movs	r3, #172	; 0xac
   82edc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82ede:	680b      	ldr	r3, [r1, #0]
   82ee0:	684a      	ldr	r2, [r1, #4]
   82ee2:	fbb3 f3f2 	udiv	r3, r3, r2
   82ee6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82ee8:	1e5c      	subs	r4, r3, #1
   82eea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   82eee:	4294      	cmp	r4, r2
   82ef0:	d80b      	bhi.n	82f0a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   82ef2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   82ef4:	688b      	ldr	r3, [r1, #8]
   82ef6:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82ef8:	f240 2302 	movw	r3, #514	; 0x202
   82efc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   82f00:	2350      	movs	r3, #80	; 0x50
   82f02:	6003      	str	r3, [r0, #0]

	return 0;
   82f04:	2000      	movs	r0, #0
}
   82f06:	bc10      	pop	{r4}
   82f08:	4770      	bx	lr
		return 1;
   82f0a:	2001      	movs	r0, #1
   82f0c:	e7fb      	b.n	82f06 <uart_init+0x2e>

00082f0e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82f0e:	6943      	ldr	r3, [r0, #20]
   82f10:	f013 0f02 	tst.w	r3, #2
   82f14:	d002      	beq.n	82f1c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   82f16:	61c1      	str	r1, [r0, #28]
	return 0;
   82f18:	2000      	movs	r0, #0
   82f1a:	4770      	bx	lr
		return 1;
   82f1c:	2001      	movs	r0, #1
}
   82f1e:	4770      	bx	lr

00082f20 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82f20:	6943      	ldr	r3, [r0, #20]
   82f22:	f013 0f01 	tst.w	r3, #1
   82f26:	d003      	beq.n	82f30 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82f28:	6983      	ldr	r3, [r0, #24]
   82f2a:	700b      	strb	r3, [r1, #0]
	return 0;
   82f2c:	2000      	movs	r0, #0
   82f2e:	4770      	bx	lr
		return 1;
   82f30:	2001      	movs	r0, #1
}
   82f32:	4770      	bx	lr

00082f34 <udc_get_string_serial_name>:
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
	}
   82f34:	4800      	ldr	r0, [pc, #0]	; (82f38 <udc_get_string_serial_name+0x4>)
   82f36:	4770      	bx	lr
   82f38:	200001b4 	.word	0x200001b4

00082f3c <udc_get_eof_conf>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   82f3c:	4b02      	ldr	r3, [pc, #8]	; (82f48 <udc_get_eof_conf+0xc>)
   82f3e:	681b      	ldr	r3, [r3, #0]
   82f40:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82f42:	8858      	ldrh	r0, [r3, #2]
}
   82f44:	4418      	add	r0, r3
   82f46:	4770      	bx	lr
   82f48:	20001040 	.word	0x20001040

00082f4c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   82f4c:	b538      	push	{r3, r4, r5, lr}
   82f4e:	4604      	mov	r4, r0
   82f50:	460d      	mov	r5, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   82f52:	4b0a      	ldr	r3, [pc, #40]	; (82f7c <udc_next_desc_in_iface+0x30>)
   82f54:	4798      	blx	r3
   82f56:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   82f58:	7820      	ldrb	r0, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82f5a:	4420      	add	r0, r4
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   82f5c:	e001      	b.n	82f62 <udc_next_desc_in_iface+0x16>
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   82f5e:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82f60:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   82f62:	4290      	cmp	r0, r2
   82f64:	d205      	bcs.n	82f72 <udc_next_desc_in_iface+0x26>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82f66:	7843      	ldrb	r3, [r0, #1]
   82f68:	2b04      	cmp	r3, #4
   82f6a:	d004      	beq.n	82f76 <udc_next_desc_in_iface+0x2a>
		if (desc_id == desc->bDescriptorType) {
   82f6c:	42ab      	cmp	r3, r5
   82f6e:	d1f6      	bne.n	82f5e <udc_next_desc_in_iface+0x12>
   82f70:	e000      	b.n	82f74 <udc_next_desc_in_iface+0x28>
	}
	return NULL; // No specific descriptor found
   82f72:	2000      	movs	r0, #0
}
   82f74:	bd38      	pop	{r3, r4, r5, pc}
	return NULL; // No specific descriptor found
   82f76:	2000      	movs	r0, #0
   82f78:	e7fc      	b.n	82f74 <udc_next_desc_in_iface+0x28>
   82f7a:	bf00      	nop
   82f7c:	00082f3d 	.word	0x00082f3d

00082f80 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   82f80:	b538      	push	{r3, r4, r5, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   82f82:	4b14      	ldr	r3, [pc, #80]	; (82fd4 <udc_update_iface_desc+0x54>)
   82f84:	781b      	ldrb	r3, [r3, #0]
   82f86:	b30b      	cbz	r3, 82fcc <udc_update_iface_desc+0x4c>
   82f88:	4604      	mov	r4, r0
   82f8a:	460d      	mov	r5, r1
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82f8c:	4b12      	ldr	r3, [pc, #72]	; (82fd8 <udc_update_iface_desc+0x58>)
   82f8e:	681b      	ldr	r3, [r3, #0]
   82f90:	681b      	ldr	r3, [r3, #0]
   82f92:	791a      	ldrb	r2, [r3, #4]
   82f94:	4282      	cmp	r2, r0
   82f96:	d91b      	bls.n	82fd0 <udc_update_iface_desc+0x50>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   82f98:	4a10      	ldr	r2, [pc, #64]	; (82fdc <udc_update_iface_desc+0x5c>)
   82f9a:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   82f9c:	4b10      	ldr	r3, [pc, #64]	; (82fe0 <udc_update_iface_desc+0x60>)
   82f9e:	4798      	blx	r3
	while (ptr_end_desc >
   82fa0:	e003      	b.n	82faa <udc_update_iface_desc+0x2a>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   82fa2:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82fa4:	4413      	add	r3, r2
   82fa6:	4a0d      	ldr	r2, [pc, #52]	; (82fdc <udc_update_iface_desc+0x5c>)
   82fa8:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   82faa:	4b0c      	ldr	r3, [pc, #48]	; (82fdc <udc_update_iface_desc+0x5c>)
   82fac:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   82fae:	4283      	cmp	r3, r0
   82fb0:	d20a      	bcs.n	82fc8 <udc_update_iface_desc+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   82fb2:	785a      	ldrb	r2, [r3, #1]
   82fb4:	2a04      	cmp	r2, #4
   82fb6:	d1f4      	bne.n	82fa2 <udc_update_iface_desc+0x22>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82fb8:	789a      	ldrb	r2, [r3, #2]
   82fba:	42a2      	cmp	r2, r4
   82fbc:	d1f1      	bne.n	82fa2 <udc_update_iface_desc+0x22>
					udc_ptr_iface->bAlternateSetting)) {
   82fbe:	78da      	ldrb	r2, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82fc0:	42aa      	cmp	r2, r5
   82fc2:	d1ee      	bne.n	82fa2 <udc_update_iface_desc+0x22>
				return true; // Interface found
   82fc4:	2001      	movs	r0, #1
   82fc6:	e000      	b.n	82fca <udc_update_iface_desc+0x4a>
	}
	return false; // Interface not found
   82fc8:	2000      	movs	r0, #0
}
   82fca:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   82fcc:	2000      	movs	r0, #0
   82fce:	e7fc      	b.n	82fca <udc_update_iface_desc+0x4a>
		return false;
   82fd0:	2000      	movs	r0, #0
   82fd2:	e7fa      	b.n	82fca <udc_update_iface_desc+0x4a>
   82fd4:	2000103d 	.word	0x2000103d
   82fd8:	20001040 	.word	0x20001040
   82fdc:	20001044 	.word	0x20001044
   82fe0:	00082f3d 	.word	0x00082f3d

00082fe4 <udc_req_std_dev_clear_feature>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   82fe4:	4b08      	ldr	r3, [pc, #32]	; (83008 <udc_req_std_dev_clear_feature+0x24>)
   82fe6:	88db      	ldrh	r3, [r3, #6]
   82fe8:	b963      	cbnz	r3, 83004 <udc_req_std_dev_clear_feature+0x20>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   82fea:	4b07      	ldr	r3, [pc, #28]	; (83008 <udc_req_std_dev_clear_feature+0x24>)
   82fec:	885b      	ldrh	r3, [r3, #2]
   82fee:	2b01      	cmp	r3, #1
   82ff0:	d001      	beq.n	82ff6 <udc_req_std_dev_clear_feature+0x12>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   82ff2:	2000      	movs	r0, #0
}
   82ff4:	4770      	bx	lr
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   82ff6:	4a05      	ldr	r2, [pc, #20]	; (8300c <udc_req_std_dev_clear_feature+0x28>)
   82ff8:	8813      	ldrh	r3, [r2, #0]
   82ffa:	f023 0302 	bic.w	r3, r3, #2
   82ffe:	8013      	strh	r3, [r2, #0]
		return true;
   83000:	2001      	movs	r0, #1
   83002:	4770      	bx	lr
		return false;
   83004:	2000      	movs	r0, #0
   83006:	4770      	bx	lr
   83008:	20001958 	.word	0x20001958
   8300c:	20001038 	.word	0x20001038

00083010 <udc_req_std_dev_set_address>:
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   83010:	4b04      	ldr	r3, [pc, #16]	; (83024 <udc_req_std_dev_set_address+0x14>)
   83012:	88db      	ldrh	r3, [r3, #6]
   83014:	b923      	cbnz	r3, 83020 <udc_req_std_dev_set_address+0x10>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   83016:	4b03      	ldr	r3, [pc, #12]	; (83024 <udc_req_std_dev_set_address+0x14>)
   83018:	4a03      	ldr	r2, [pc, #12]	; (83028 <udc_req_std_dev_set_address+0x18>)
   8301a:	611a      	str	r2, [r3, #16]
	return true;
   8301c:	2001      	movs	r0, #1
   8301e:	4770      	bx	lr
		return false;
   83020:	2000      	movs	r0, #0
}
   83022:	4770      	bx	lr
   83024:	20001958 	.word	0x20001958
   83028:	000833d1 	.word	0x000833d1

0008302c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   8302c:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8302e:	4b11      	ldr	r3, [pc, #68]	; (83074 <udc_req_iface+0x48>)
   83030:	781b      	ldrb	r3, [r3, #0]
   83032:	b1eb      	cbz	r3, 83070 <udc_req_iface+0x44>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83034:	4b10      	ldr	r3, [pc, #64]	; (83078 <udc_req_iface+0x4c>)
   83036:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83038:	4b10      	ldr	r3, [pc, #64]	; (8307c <udc_req_iface+0x50>)
   8303a:	681b      	ldr	r3, [r3, #0]
   8303c:	681b      	ldr	r3, [r3, #0]
   8303e:	791b      	ldrb	r3, [r3, #4]
   83040:	42a3      	cmp	r3, r4
   83042:	d801      	bhi.n	83048 <udc_req_iface+0x1c>
		return false;
   83044:	2000      	movs	r0, #0
   83046:	e014      	b.n	83072 <udc_req_iface+0x46>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   83048:	2100      	movs	r1, #0
   8304a:	4620      	mov	r0, r4
   8304c:	4b0c      	ldr	r3, [pc, #48]	; (83080 <udc_req_iface+0x54>)
   8304e:	4798      	blx	r3
   83050:	b178      	cbz	r0, 83072 <udc_req_iface+0x46>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83052:	4b0a      	ldr	r3, [pc, #40]	; (8307c <udc_req_iface+0x50>)
   83054:	681b      	ldr	r3, [r3, #0]
   83056:	685b      	ldr	r3, [r3, #4]
   83058:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8305c:	68eb      	ldr	r3, [r5, #12]
   8305e:	4798      	blx	r3
   83060:	4601      	mov	r1, r0
   83062:	4620      	mov	r0, r4
   83064:	4b06      	ldr	r3, [pc, #24]	; (83080 <udc_req_iface+0x54>)
   83066:	4798      	blx	r3
   83068:	b118      	cbz	r0, 83072 <udc_req_iface+0x46>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   8306a:	68ab      	ldr	r3, [r5, #8]
   8306c:	4798      	blx	r3
   8306e:	e000      	b.n	83072 <udc_req_iface+0x46>
		return false; // The device is not is configured state yet
   83070:	2000      	movs	r0, #0
}
   83072:	bd38      	pop	{r3, r4, r5, pc}
   83074:	2000103d 	.word	0x2000103d
   83078:	20001958 	.word	0x20001958
   8307c:	20001040 	.word	0x20001040
   83080:	00082f81 	.word	0x00082f81

00083084 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   83084:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   83086:	4b11      	ldr	r3, [pc, #68]	; (830cc <udc_req_ep+0x48>)
   83088:	781b      	ldrb	r3, [r3, #0]
   8308a:	b1e3      	cbz	r3, 830c6 <udc_req_ep+0x42>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8308c:	2400      	movs	r4, #0
   8308e:	e001      	b.n	83094 <udc_req_ep+0x10>
			iface_num++) {
   83090:	3401      	adds	r4, #1
   83092:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83094:	4b0e      	ldr	r3, [pc, #56]	; (830d0 <udc_req_ep+0x4c>)
   83096:	681b      	ldr	r3, [r3, #0]
   83098:	681a      	ldr	r2, [r3, #0]
   8309a:	7912      	ldrb	r2, [r2, #4]
   8309c:	42a2      	cmp	r2, r4
   8309e:	d910      	bls.n	830c2 <udc_req_ep+0x3e>
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   830a0:	685b      	ldr	r3, [r3, #4]
   830a2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   830a6:	68eb      	ldr	r3, [r5, #12]
   830a8:	4798      	blx	r3
   830aa:	4601      	mov	r1, r0
   830ac:	4620      	mov	r0, r4
   830ae:	4b09      	ldr	r3, [pc, #36]	; (830d4 <udc_req_ep+0x50>)
   830b0:	4798      	blx	r3
   830b2:	4603      	mov	r3, r0
   830b4:	b140      	cbz	r0, 830c8 <udc_req_ep+0x44>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   830b6:	68ab      	ldr	r3, [r5, #8]
   830b8:	4798      	blx	r3
   830ba:	4603      	mov	r3, r0
   830bc:	2800      	cmp	r0, #0
   830be:	d0e7      	beq.n	83090 <udc_req_ep+0xc>
   830c0:	e002      	b.n	830c8 <udc_req_ep+0x44>
			return true;
		}
	}
	return false;
   830c2:	2300      	movs	r3, #0
   830c4:	e000      	b.n	830c8 <udc_req_ep+0x44>
		return false; // The device is not is configured state yet
   830c6:	2300      	movs	r3, #0
}
   830c8:	4618      	mov	r0, r3
   830ca:	bd38      	pop	{r3, r4, r5, pc}
   830cc:	2000103d 	.word	0x2000103d
   830d0:	20001040 	.word	0x20001040
   830d4:	00082f81 	.word	0x00082f81

000830d8 <udc_iface_disable>:
{
   830d8:	b570      	push	{r4, r5, r6, lr}
   830da:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   830dc:	2100      	movs	r1, #0
   830de:	4b11      	ldr	r3, [pc, #68]	; (83124 <udc_iface_disable+0x4c>)
   830e0:	4798      	blx	r3
   830e2:	4605      	mov	r5, r0
   830e4:	b1d8      	cbz	r0, 8311e <udc_iface_disable+0x46>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   830e6:	4b10      	ldr	r3, [pc, #64]	; (83128 <udc_iface_disable+0x50>)
   830e8:	681b      	ldr	r3, [r3, #0]
   830ea:	685b      	ldr	r3, [r3, #4]
   830ec:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   830f0:	68f3      	ldr	r3, [r6, #12]
   830f2:	4798      	blx	r3
   830f4:	4601      	mov	r1, r0
   830f6:	4620      	mov	r0, r4
   830f8:	4b0a      	ldr	r3, [pc, #40]	; (83124 <udc_iface_disable+0x4c>)
   830fa:	4798      	blx	r3
   830fc:	4605      	mov	r5, r0
   830fe:	b170      	cbz	r0, 8311e <udc_iface_disable+0x46>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83100:	4b0a      	ldr	r3, [pc, #40]	; (8312c <udc_iface_disable+0x54>)
   83102:	681c      	ldr	r4, [r3, #0]
   83104:	e002      	b.n	8310c <udc_iface_disable+0x34>
			udd_ep_free(ep_desc->bEndpointAddress);
   83106:	7880      	ldrb	r0, [r0, #2]
   83108:	4b09      	ldr	r3, [pc, #36]	; (83130 <udc_iface_disable+0x58>)
   8310a:	4798      	blx	r3
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   8310c:	2105      	movs	r1, #5
   8310e:	4620      	mov	r0, r4
   83110:	4b08      	ldr	r3, [pc, #32]	; (83134 <udc_iface_disable+0x5c>)
   83112:	4798      	blx	r3
			if (NULL == ep_desc) {
   83114:	4604      	mov	r4, r0
   83116:	2800      	cmp	r0, #0
   83118:	d1f5      	bne.n	83106 <udc_iface_disable+0x2e>
	udi_api->disable();
   8311a:	6873      	ldr	r3, [r6, #4]
   8311c:	4798      	blx	r3
}
   8311e:	4628      	mov	r0, r5
   83120:	bd70      	pop	{r4, r5, r6, pc}
   83122:	bf00      	nop
   83124:	00082f81 	.word	0x00082f81
   83128:	20001040 	.word	0x20001040
   8312c:	20001044 	.word	0x20001044
   83130:	00084691 	.word	0x00084691
   83134:	00082f4d 	.word	0x00082f4d

00083138 <udc_req_std_dev_get_status>:
{
   83138:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8313a:	4b06      	ldr	r3, [pc, #24]	; (83154 <udc_req_std_dev_get_status+0x1c>)
   8313c:	88db      	ldrh	r3, [r3, #6]
   8313e:	2b02      	cmp	r3, #2
   83140:	d001      	beq.n	83146 <udc_req_std_dev_get_status+0xe>
		return false;
   83142:	2000      	movs	r0, #0
}
   83144:	bd08      	pop	{r3, pc}
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83146:	2102      	movs	r1, #2
   83148:	4803      	ldr	r0, [pc, #12]	; (83158 <udc_req_std_dev_get_status+0x20>)
   8314a:	4b04      	ldr	r3, [pc, #16]	; (8315c <udc_req_std_dev_get_status+0x24>)
   8314c:	4798      	blx	r3
	return true;
   8314e:	2001      	movs	r0, #1
   83150:	e7f8      	b.n	83144 <udc_req_std_dev_get_status+0xc>
   83152:	bf00      	nop
   83154:	20001958 	.word	0x20001958
   83158:	20001038 	.word	0x20001038
   8315c:	00084685 	.word	0x00084685

00083160 <udc_req_std_dev_get_str_desc>:
{
   83160:	b510      	push	{r4, lr}
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83162:	4b16      	ldr	r3, [pc, #88]	; (831bc <udc_req_std_dev_get_str_desc+0x5c>)
   83164:	789b      	ldrb	r3, [r3, #2]
   83166:	2b03      	cmp	r3, #3
   83168:	d826      	bhi.n	831b8 <udc_req_std_dev_get_str_desc+0x58>
   8316a:	e8df f003 	tbb	[pc, r3]
   8316e:	1e02      	.short	0x1e02
   83170:	0822      	.short	0x0822
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83172:	2104      	movs	r1, #4
   83174:	4812      	ldr	r0, [pc, #72]	; (831c0 <udc_req_std_dev_get_str_desc+0x60>)
   83176:	4b13      	ldr	r3, [pc, #76]	; (831c4 <udc_req_std_dev_get_str_desc+0x64>)
   83178:	4798      	blx	r3
	return true;
   8317a:	2001      	movs	r0, #1
   8317c:	e014      	b.n	831a8 <udc_req_std_dev_get_str_desc+0x48>
		str = udc_get_string_serial_name();
   8317e:	4b12      	ldr	r3, [pc, #72]	; (831c8 <udc_req_std_dev_get_str_desc+0x68>)
   83180:	4798      	blx	r3
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   83182:	2120      	movs	r1, #32
   83184:	e013      	b.n	831ae <udc_req_std_dev_get_str_desc+0x4e>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83186:	5cc4      	ldrb	r4, [r0, r3]
   83188:	4a10      	ldr	r2, [pc, #64]	; (831cc <udc_req_std_dev_get_str_desc+0x6c>)
   8318a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   8318e:	8054      	strh	r4, [r2, #2]
		for(i = 0; i < str_length; i++) {
   83190:	3301      	adds	r3, #1
   83192:	b2db      	uxtb	r3, r3
   83194:	428b      	cmp	r3, r1
   83196:	d3f6      	bcc.n	83186 <udc_req_std_dev_get_str_desc+0x26>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   83198:	3101      	adds	r1, #1
   8319a:	0049      	lsls	r1, r1, #1
   8319c:	b2c9      	uxtb	r1, r1
   8319e:	480b      	ldr	r0, [pc, #44]	; (831cc <udc_req_std_dev_get_str_desc+0x6c>)
   831a0:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   831a2:	4b08      	ldr	r3, [pc, #32]	; (831c4 <udc_req_std_dev_get_str_desc+0x64>)
   831a4:	4798      	blx	r3
	return true;
   831a6:	2001      	movs	r0, #1
}
   831a8:	bd10      	pop	{r4, pc}
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   831aa:	2115      	movs	r1, #21
   831ac:	4808      	ldr	r0, [pc, #32]	; (831d0 <udc_req_std_dev_get_str_desc+0x70>)
   831ae:	2300      	movs	r3, #0
   831b0:	e7f0      	b.n	83194 <udc_req_std_dev_get_str_desc+0x34>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   831b2:	2113      	movs	r1, #19
		str = udc_string_product_name;
   831b4:	4807      	ldr	r0, [pc, #28]	; (831d4 <udc_req_std_dev_get_str_desc+0x74>)
   831b6:	e7fa      	b.n	831ae <udc_req_std_dev_get_str_desc+0x4e>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   831b8:	2000      	movs	r0, #0
   831ba:	e7f5      	b.n	831a8 <udc_req_std_dev_get_str_desc+0x48>
   831bc:	20001958 	.word	0x20001958
   831c0:	2000024c 	.word	0x2000024c
   831c4:	00084685 	.word	0x00084685
   831c8:	00082f35 	.word	0x00082f35
   831cc:	20000208 	.word	0x20000208
   831d0:	20000250 	.word	0x20000250
   831d4:	20000268 	.word	0x20000268

000831d8 <udc_req_std_dev_get_configuration>:
{
   831d8:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
   831da:	4b06      	ldr	r3, [pc, #24]	; (831f4 <udc_req_std_dev_get_configuration+0x1c>)
   831dc:	88db      	ldrh	r3, [r3, #6]
   831de:	2b01      	cmp	r3, #1
   831e0:	d001      	beq.n	831e6 <udc_req_std_dev_get_configuration+0xe>
		return false;
   831e2:	2000      	movs	r0, #0
}
   831e4:	bd08      	pop	{r3, pc}
	udd_set_setup_payload(&udc_num_configuration,1);
   831e6:	2101      	movs	r1, #1
   831e8:	4803      	ldr	r0, [pc, #12]	; (831f8 <udc_req_std_dev_get_configuration+0x20>)
   831ea:	4b04      	ldr	r3, [pc, #16]	; (831fc <udc_req_std_dev_get_configuration+0x24>)
   831ec:	4798      	blx	r3
	return true;
   831ee:	2001      	movs	r0, #1
   831f0:	e7f8      	b.n	831e4 <udc_req_std_dev_get_configuration+0xc>
   831f2:	bf00      	nop
   831f4:	20001958 	.word	0x20001958
   831f8:	2000103d 	.word	0x2000103d
   831fc:	00084685 	.word	0x00084685

00083200 <udc_req_std_iface_get_setting>:
{
   83200:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength != 1) {
   83202:	4b15      	ldr	r3, [pc, #84]	; (83258 <udc_req_std_iface_get_setting+0x58>)
   83204:	88db      	ldrh	r3, [r3, #6]
   83206:	2b01      	cmp	r3, #1
   83208:	d120      	bne.n	8324c <udc_req_std_iface_get_setting+0x4c>
	if (!udc_num_configuration) {
   8320a:	4b14      	ldr	r3, [pc, #80]	; (8325c <udc_req_std_iface_get_setting+0x5c>)
   8320c:	781b      	ldrb	r3, [r3, #0]
   8320e:	b303      	cbz	r3, 83252 <udc_req_std_iface_get_setting+0x52>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83210:	4b11      	ldr	r3, [pc, #68]	; (83258 <udc_req_std_iface_get_setting+0x58>)
   83212:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83214:	4b12      	ldr	r3, [pc, #72]	; (83260 <udc_req_std_iface_get_setting+0x60>)
   83216:	681b      	ldr	r3, [r3, #0]
   83218:	681b      	ldr	r3, [r3, #0]
   8321a:	791b      	ldrb	r3, [r3, #4]
   8321c:	42ab      	cmp	r3, r5
   8321e:	d801      	bhi.n	83224 <udc_req_std_iface_get_setting+0x24>
		return false;
   83220:	2400      	movs	r4, #0
   83222:	e014      	b.n	8324e <udc_req_std_iface_get_setting+0x4e>
	if (!udc_update_iface_desc(iface_num, 0)) {
   83224:	2100      	movs	r1, #0
   83226:	4628      	mov	r0, r5
   83228:	4b0e      	ldr	r3, [pc, #56]	; (83264 <udc_req_std_iface_get_setting+0x64>)
   8322a:	4798      	blx	r3
   8322c:	4604      	mov	r4, r0
   8322e:	b170      	cbz	r0, 8324e <udc_req_std_iface_get_setting+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83230:	4b0b      	ldr	r3, [pc, #44]	; (83260 <udc_req_std_iface_get_setting+0x60>)
   83232:	681b      	ldr	r3, [r3, #0]
   83234:	685b      	ldr	r3, [r3, #4]
   83236:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	udc_iface_setting = udi_api->getsetting();
   8323a:	68db      	ldr	r3, [r3, #12]
   8323c:	4798      	blx	r3
   8323e:	4b0a      	ldr	r3, [pc, #40]	; (83268 <udc_req_std_iface_get_setting+0x68>)
   83240:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   83242:	2101      	movs	r1, #1
   83244:	4618      	mov	r0, r3
   83246:	4b09      	ldr	r3, [pc, #36]	; (8326c <udc_req_std_iface_get_setting+0x6c>)
   83248:	4798      	blx	r3
	return true;
   8324a:	e000      	b.n	8324e <udc_req_std_iface_get_setting+0x4e>
		return false; // Error in request
   8324c:	2400      	movs	r4, #0
}
   8324e:	4620      	mov	r0, r4
   83250:	bd38      	pop	{r3, r4, r5, pc}
		return false; // The device is not is configured state yet
   83252:	2400      	movs	r4, #0
   83254:	e7fb      	b.n	8324e <udc_req_std_iface_get_setting+0x4e>
   83256:	bf00      	nop
   83258:	20001958 	.word	0x20001958
   8325c:	2000103d 	.word	0x2000103d
   83260:	20001040 	.word	0x20001040
   83264:	00082f81 	.word	0x00082f81
   83268:	2000103c 	.word	0x2000103c
   8326c:	00084685 	.word	0x00084685

00083270 <udc_req_std_dev_get_descriptor>:
{
   83270:	b510      	push	{r4, lr}
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   83272:	4b43      	ldr	r3, [pc, #268]	; (83380 <udc_req_std_dev_get_descriptor+0x110>)
   83274:	885b      	ldrh	r3, [r3, #2]
   83276:	b2dc      	uxtb	r4, r3
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83278:	0a1b      	lsrs	r3, r3, #8
   8327a:	3b01      	subs	r3, #1
   8327c:	2b0e      	cmp	r3, #14
   8327e:	d87b      	bhi.n	83378 <udc_req_std_dev_get_descriptor+0x108>
   83280:	e8df f003 	tbb	[pc, r3]
   83284:	7a751c08 	.word	0x7a751c08
   83288:	7a4d3f7a 	.word	0x7a4d3f7a
   8328c:	7a7a7a7a 	.word	0x7a7a7a7a
   83290:	7a7a      	.short	0x7a7a
   83292:	70          	.byte	0x70
   83293:	00          	.byte	0x00
		if (!udd_is_high_speed()) {
   83294:	4b3b      	ldr	r3, [pc, #236]	; (83384 <udc_req_std_dev_get_descriptor+0x114>)
   83296:	4798      	blx	r3
   83298:	b928      	cbnz	r0, 832a6 <udc_req_std_dev_get_descriptor+0x36>
				(uint8_t *) udc_config.confdev_hs,
   8329a:	4b3b      	ldr	r3, [pc, #236]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   8329c:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   8329e:	7801      	ldrb	r1, [r0, #0]
   832a0:	4b3a      	ldr	r3, [pc, #232]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   832a2:	4798      	blx	r3
   832a4:	e032      	b.n	8330c <udc_req_std_dev_get_descriptor+0x9c>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   832a6:	4b38      	ldr	r3, [pc, #224]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   832a8:	681a      	ldr	r2, [r3, #0]
   832aa:	2110      	movs	r1, #16
   832ac:	7091      	strb	r1, [r2, #2]
   832ae:	2102      	movs	r1, #2
   832b0:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   832b2:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   832b4:	7801      	ldrb	r1, [r0, #0]
   832b6:	4b35      	ldr	r3, [pc, #212]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   832b8:	4798      	blx	r3
   832ba:	e027      	b.n	8330c <udc_req_std_dev_get_descriptor+0x9c>
		if (udd_is_high_speed()) {
   832bc:	4b31      	ldr	r3, [pc, #196]	; (83384 <udc_req_std_dev_get_descriptor+0x114>)
   832be:	4798      	blx	r3
   832c0:	b190      	cbz	r0, 832e8 <udc_req_std_dev_get_descriptor+0x78>
			if (conf_num >= udc_config.confdev_hs->
   832c2:	4b31      	ldr	r3, [pc, #196]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   832c4:	689b      	ldr	r3, [r3, #8]
   832c6:	7c5b      	ldrb	r3, [r3, #17]
   832c8:	42a3      	cmp	r3, r4
   832ca:	d801      	bhi.n	832d0 <udc_req_std_dev_get_descriptor+0x60>
				return false;
   832cc:	2000      	movs	r0, #0
   832ce:	e054      	b.n	8337a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   832d0:	4b2d      	ldr	r3, [pc, #180]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   832d2:	691b      	ldr	r3, [r3, #16]
   832d4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   832d8:	8841      	ldrh	r1, [r0, #2]
   832da:	4b2c      	ldr	r3, [pc, #176]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   832dc:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   832de:	4b28      	ldr	r3, [pc, #160]	; (83380 <udc_req_std_dev_get_descriptor+0x110>)
   832e0:	689b      	ldr	r3, [r3, #8]
   832e2:	2202      	movs	r2, #2
   832e4:	705a      	strb	r2, [r3, #1]
		break;
   832e6:	e011      	b.n	8330c <udc_req_std_dev_get_descriptor+0x9c>
			if (conf_num >= udc_config.confdev_lsfs->
   832e8:	4b27      	ldr	r3, [pc, #156]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   832ea:	681b      	ldr	r3, [r3, #0]
   832ec:	7c5b      	ldrb	r3, [r3, #17]
   832ee:	42a3      	cmp	r3, r4
   832f0:	d943      	bls.n	8337a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   832f2:	4b25      	ldr	r3, [pc, #148]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   832f4:	685b      	ldr	r3, [r3, #4]
   832f6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   832fa:	8841      	ldrh	r1, [r0, #2]
   832fc:	4b23      	ldr	r3, [pc, #140]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   832fe:	4798      	blx	r3
   83300:	e7ed      	b.n	832de <udc_req_std_dev_get_descriptor+0x6e>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83302:	4b21      	ldr	r3, [pc, #132]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   83304:	68d8      	ldr	r0, [r3, #12]
   83306:	7801      	ldrb	r1, [r0, #0]
   83308:	4b20      	ldr	r3, [pc, #128]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   8330a:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   8330c:	4b1c      	ldr	r3, [pc, #112]	; (83380 <udc_req_std_dev_get_descriptor+0x110>)
   8330e:	88da      	ldrh	r2, [r3, #6]
   83310:	899b      	ldrh	r3, [r3, #12]
   83312:	429a      	cmp	r2, r3
   83314:	d232      	bcs.n	8337c <udc_req_std_dev_get_descriptor+0x10c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83316:	4b1a      	ldr	r3, [pc, #104]	; (83380 <udc_req_std_dev_get_descriptor+0x110>)
   83318:	819a      	strh	r2, [r3, #12]
	return true;
   8331a:	2001      	movs	r0, #1
   8331c:	e02d      	b.n	8337a <udc_req_std_dev_get_descriptor+0x10a>
		if (!udd_is_high_speed()) {
   8331e:	4b19      	ldr	r3, [pc, #100]	; (83384 <udc_req_std_dev_get_descriptor+0x114>)
   83320:	4798      	blx	r3
   83322:	b980      	cbnz	r0, 83346 <udc_req_std_dev_get_descriptor+0xd6>
			if (conf_num >= udc_config.confdev_hs->
   83324:	4b18      	ldr	r3, [pc, #96]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   83326:	689b      	ldr	r3, [r3, #8]
   83328:	7c5b      	ldrb	r3, [r3, #17]
   8332a:	42a3      	cmp	r3, r4
   8332c:	d925      	bls.n	8337a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8332e:	4b16      	ldr	r3, [pc, #88]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   83330:	691b      	ldr	r3, [r3, #16]
   83332:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83336:	8841      	ldrh	r1, [r0, #2]
   83338:	4b14      	ldr	r3, [pc, #80]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   8333a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8333c:	4b10      	ldr	r3, [pc, #64]	; (83380 <udc_req_std_dev_get_descriptor+0x110>)
   8333e:	689b      	ldr	r3, [r3, #8]
   83340:	2207      	movs	r2, #7
   83342:	705a      	strb	r2, [r3, #1]
		break;
   83344:	e7e2      	b.n	8330c <udc_req_std_dev_get_descriptor+0x9c>
			if (conf_num >= udc_config.confdev_lsfs->
   83346:	4b10      	ldr	r3, [pc, #64]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   83348:	681b      	ldr	r3, [r3, #0]
   8334a:	7c5b      	ldrb	r3, [r3, #17]
   8334c:	42a3      	cmp	r3, r4
   8334e:	d801      	bhi.n	83354 <udc_req_std_dev_get_descriptor+0xe4>
				return false;
   83350:	2000      	movs	r0, #0
   83352:	e012      	b.n	8337a <udc_req_std_dev_get_descriptor+0x10a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83354:	4b0c      	ldr	r3, [pc, #48]	; (83388 <udc_req_std_dev_get_descriptor+0x118>)
   83356:	685b      	ldr	r3, [r3, #4]
   83358:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8335c:	8841      	ldrh	r1, [r0, #2]
   8335e:	4b0b      	ldr	r3, [pc, #44]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   83360:	4798      	blx	r3
   83362:	e7eb      	b.n	8333c <udc_req_std_dev_get_descriptor+0xcc>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   83364:	2121      	movs	r1, #33	; 0x21
   83366:	480a      	ldr	r0, [pc, #40]	; (83390 <udc_req_std_dev_get_descriptor+0x120>)
   83368:	4b08      	ldr	r3, [pc, #32]	; (8338c <udc_req_std_dev_get_descriptor+0x11c>)
   8336a:	4798      	blx	r3
		break;
   8336c:	e7ce      	b.n	8330c <udc_req_std_dev_get_descriptor+0x9c>
		if (!udc_req_std_dev_get_str_desc()) {
   8336e:	4b09      	ldr	r3, [pc, #36]	; (83394 <udc_req_std_dev_get_descriptor+0x124>)
   83370:	4798      	blx	r3
   83372:	2800      	cmp	r0, #0
   83374:	d1ca      	bne.n	8330c <udc_req_std_dev_get_descriptor+0x9c>
   83376:	e000      	b.n	8337a <udc_req_std_dev_get_descriptor+0x10a>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83378:	2000      	movs	r0, #0
}
   8337a:	bd10      	pop	{r4, pc}
	return true;
   8337c:	2001      	movs	r0, #1
   8337e:	e7fc      	b.n	8337a <udc_req_std_dev_get_descriptor+0x10a>
   83380:	20001958 	.word	0x20001958
   83384:	0008462d 	.word	0x0008462d
   83388:	2000033c 	.word	0x2000033c
   8338c:	00084685 	.word	0x00084685
   83390:	0008bf3c 	.word	0x0008bf3c
   83394:	00083161 	.word	0x00083161

00083398 <udc_req_std_ep_get_status>:
{
   83398:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   8339a:	4b09      	ldr	r3, [pc, #36]	; (833c0 <udc_req_std_ep_get_status+0x28>)
   8339c:	88db      	ldrh	r3, [r3, #6]
   8339e:	2b02      	cmp	r3, #2
   833a0:	d001      	beq.n	833a6 <udc_req_std_ep_get_status+0xe>
		return false;
   833a2:	2000      	movs	r0, #0
}
   833a4:	bd08      	pop	{r3, pc}
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   833a6:	4b06      	ldr	r3, [pc, #24]	; (833c0 <udc_req_std_ep_get_status+0x28>)
   833a8:	7918      	ldrb	r0, [r3, #4]
   833aa:	4b06      	ldr	r3, [pc, #24]	; (833c4 <udc_req_std_ep_get_status+0x2c>)
   833ac:	4798      	blx	r3
   833ae:	4b06      	ldr	r3, [pc, #24]	; (833c8 <udc_req_std_ep_get_status+0x30>)
   833b0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   833b2:	2102      	movs	r1, #2
   833b4:	4618      	mov	r0, r3
   833b6:	4b05      	ldr	r3, [pc, #20]	; (833cc <udc_req_std_ep_get_status+0x34>)
   833b8:	4798      	blx	r3
	return true;
   833ba:	2001      	movs	r0, #1
   833bc:	e7f2      	b.n	833a4 <udc_req_std_ep_get_status+0xc>
   833be:	bf00      	nop
   833c0:	20001958 	.word	0x20001958
   833c4:	000846dd 	.word	0x000846dd
   833c8:	2000103a 	.word	0x2000103a
   833cc:	00084685 	.word	0x00084685

000833d0 <udc_valid_address>:
{
   833d0:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   833d2:	4b03      	ldr	r3, [pc, #12]	; (833e0 <udc_valid_address+0x10>)
   833d4:	7898      	ldrb	r0, [r3, #2]
   833d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   833da:	4b02      	ldr	r3, [pc, #8]	; (833e4 <udc_valid_address+0x14>)
   833dc:	4798      	blx	r3
}
   833de:	bd08      	pop	{r3, pc}
   833e0:	20001958 	.word	0x20001958
   833e4:	0008463d 	.word	0x0008463d

000833e8 <udc_iface_enable>:
{
   833e8:	b538      	push	{r3, r4, r5, lr}
   833ea:	4605      	mov	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   833ec:	4b0f      	ldr	r3, [pc, #60]	; (8342c <udc_iface_enable+0x44>)
   833ee:	4798      	blx	r3
   833f0:	4603      	mov	r3, r0
   833f2:	b1c0      	cbz	r0, 83426 <udc_iface_enable+0x3e>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   833f4:	4b0e      	ldr	r3, [pc, #56]	; (83430 <udc_iface_enable+0x48>)
   833f6:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   833f8:	2105      	movs	r1, #5
   833fa:	4620      	mov	r0, r4
   833fc:	4b0d      	ldr	r3, [pc, #52]	; (83434 <udc_iface_enable+0x4c>)
   833fe:	4798      	blx	r3
		if (NULL == ep_desc)
   83400:	4604      	mov	r4, r0
   83402:	b140      	cbz	r0, 83416 <udc_iface_enable+0x2e>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   83404:	8882      	ldrh	r2, [r0, #4]
   83406:	78c1      	ldrb	r1, [r0, #3]
   83408:	7880      	ldrb	r0, [r0, #2]
   8340a:	4b0b      	ldr	r3, [pc, #44]	; (83438 <udc_iface_enable+0x50>)
   8340c:	4798      	blx	r3
   8340e:	4603      	mov	r3, r0
   83410:	2800      	cmp	r0, #0
   83412:	d1f1      	bne.n	833f8 <udc_iface_enable+0x10>
   83414:	e007      	b.n	83426 <udc_iface_enable+0x3e>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   83416:	4b09      	ldr	r3, [pc, #36]	; (8343c <udc_iface_enable+0x54>)
   83418:	681b      	ldr	r3, [r3, #0]
   8341a:	685b      	ldr	r3, [r3, #4]
   8341c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   83420:	681b      	ldr	r3, [r3, #0]
   83422:	4798      	blx	r3
   83424:	4603      	mov	r3, r0
}
   83426:	4618      	mov	r0, r3
   83428:	bd38      	pop	{r3, r4, r5, pc}
   8342a:	bf00      	nop
   8342c:	00082f81 	.word	0x00082f81
   83430:	20001044 	.word	0x20001044
   83434:	00082f4d 	.word	0x00082f4d
   83438:	000849cd 	.word	0x000849cd
   8343c:	20001040 	.word	0x20001040

00083440 <udc_req_std_iface_set_setting>:
{
   83440:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength) {
   83442:	4b0b      	ldr	r3, [pc, #44]	; (83470 <udc_req_std_iface_set_setting+0x30>)
   83444:	88db      	ldrh	r3, [r3, #6]
   83446:	b983      	cbnz	r3, 8346a <udc_req_std_iface_set_setting+0x2a>
	if (!udc_num_configuration) {
   83448:	4b0a      	ldr	r3, [pc, #40]	; (83474 <udc_req_std_iface_set_setting+0x34>)
   8344a:	781b      	ldrb	r3, [r3, #0]
   8344c:	b90b      	cbnz	r3, 83452 <udc_req_std_iface_set_setting+0x12>
		return false; // The device is not is configured state yet
   8344e:	2000      	movs	r0, #0
   83450:	e00c      	b.n	8346c <udc_req_std_iface_set_setting+0x2c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83452:	4b07      	ldr	r3, [pc, #28]	; (83470 <udc_req_std_iface_set_setting+0x30>)
   83454:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   83456:	789d      	ldrb	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   83458:	4620      	mov	r0, r4
   8345a:	4b07      	ldr	r3, [pc, #28]	; (83478 <udc_req_std_iface_set_setting+0x38>)
   8345c:	4798      	blx	r3
   8345e:	b128      	cbz	r0, 8346c <udc_req_std_iface_set_setting+0x2c>
	return udc_iface_enable(iface_num, setting_num);
   83460:	4629      	mov	r1, r5
   83462:	4620      	mov	r0, r4
   83464:	4b05      	ldr	r3, [pc, #20]	; (8347c <udc_req_std_iface_set_setting+0x3c>)
   83466:	4798      	blx	r3
   83468:	e000      	b.n	8346c <udc_req_std_iface_set_setting+0x2c>
		return false; // Error in request
   8346a:	2000      	movs	r0, #0
}
   8346c:	bd38      	pop	{r3, r4, r5, pc}
   8346e:	bf00      	nop
   83470:	20001958 	.word	0x20001958
   83474:	2000103d 	.word	0x2000103d
   83478:	000830d9 	.word	0x000830d9
   8347c:	000833e9 	.word	0x000833e9

00083480 <udc_req_std_ep_clear_feature>:
{
   83480:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength) {
   83482:	4b07      	ldr	r3, [pc, #28]	; (834a0 <udc_req_std_ep_clear_feature+0x20>)
   83484:	88db      	ldrh	r3, [r3, #6]
   83486:	b94b      	cbnz	r3, 8349c <udc_req_std_ep_clear_feature+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83488:	4b05      	ldr	r3, [pc, #20]	; (834a0 <udc_req_std_ep_clear_feature+0x20>)
   8348a:	885b      	ldrh	r3, [r3, #2]
   8348c:	b10b      	cbz	r3, 83492 <udc_req_std_ep_clear_feature+0x12>
	return false;
   8348e:	2000      	movs	r0, #0
}
   83490:	bd08      	pop	{r3, pc}
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83492:	4b03      	ldr	r3, [pc, #12]	; (834a0 <udc_req_std_ep_clear_feature+0x20>)
   83494:	7918      	ldrb	r0, [r3, #4]
   83496:	4b03      	ldr	r3, [pc, #12]	; (834a4 <udc_req_std_ep_clear_feature+0x24>)
   83498:	4798      	blx	r3
   8349a:	e7f9      	b.n	83490 <udc_req_std_ep_clear_feature+0x10>
		return false;
   8349c:	2000      	movs	r0, #0
   8349e:	e7f7      	b.n	83490 <udc_req_std_ep_clear_feature+0x10>
   834a0:	20001958 	.word	0x20001958
   834a4:	000847e1 	.word	0x000847e1

000834a8 <udc_req_std_ep_set_feature>:
	if (udd_g_ctrlreq.req.wLength) {
   834a8:	4b09      	ldr	r3, [pc, #36]	; (834d0 <udc_req_std_ep_set_feature+0x28>)
   834aa:	88db      	ldrh	r3, [r3, #6]
   834ac:	b96b      	cbnz	r3, 834ca <udc_req_std_ep_set_feature+0x22>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   834ae:	4b08      	ldr	r3, [pc, #32]	; (834d0 <udc_req_std_ep_set_feature+0x28>)
   834b0:	885b      	ldrh	r3, [r3, #2]
   834b2:	b10b      	cbz	r3, 834b8 <udc_req_std_ep_set_feature+0x10>
	return false;
   834b4:	2000      	movs	r0, #0
}
   834b6:	4770      	bx	lr
{
   834b8:	b510      	push	{r4, lr}
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   834ba:	4c05      	ldr	r4, [pc, #20]	; (834d0 <udc_req_std_ep_set_feature+0x28>)
   834bc:	7920      	ldrb	r0, [r4, #4]
   834be:	4b05      	ldr	r3, [pc, #20]	; (834d4 <udc_req_std_ep_set_feature+0x2c>)
   834c0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   834c2:	7920      	ldrb	r0, [r4, #4]
   834c4:	4b04      	ldr	r3, [pc, #16]	; (834d8 <udc_req_std_ep_set_feature+0x30>)
   834c6:	4798      	blx	r3
}
   834c8:	bd10      	pop	{r4, pc}
		return false;
   834ca:	2000      	movs	r0, #0
   834cc:	4770      	bx	lr
   834ce:	bf00      	nop
   834d0:	20001958 	.word	0x20001958
   834d4:	00084c71 	.word	0x00084c71
   834d8:	00084719 	.word	0x00084719

000834dc <udc_get_interface_desc>:
}
   834dc:	4b01      	ldr	r3, [pc, #4]	; (834e4 <udc_get_interface_desc+0x8>)
   834de:	6818      	ldr	r0, [r3, #0]
   834e0:	4770      	bx	lr
   834e2:	bf00      	nop
   834e4:	20001044 	.word	0x20001044

000834e8 <udc_start>:
{
   834e8:	b508      	push	{r3, lr}
	udd_enable();
   834ea:	4b01      	ldr	r3, [pc, #4]	; (834f0 <udc_start+0x8>)
   834ec:	4798      	blx	r3
}
   834ee:	bd08      	pop	{r3, pc}
   834f0:	00084549 	.word	0x00084549

000834f4 <udc_reset>:
{
   834f4:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
   834f6:	4b0b      	ldr	r3, [pc, #44]	; (83524 <udc_reset+0x30>)
   834f8:	781b      	ldrb	r3, [r3, #0]
   834fa:	b92b      	cbnz	r3, 83508 <udc_reset+0x14>
	udc_num_configuration = 0;
   834fc:	2300      	movs	r3, #0
   834fe:	4a09      	ldr	r2, [pc, #36]	; (83524 <udc_reset+0x30>)
   83500:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   83502:	4a09      	ldr	r2, [pc, #36]	; (83528 <udc_reset+0x34>)
   83504:	8013      	strh	r3, [r2, #0]
}
   83506:	bd10      	pop	{r4, pc}
		for (iface_num = 0;
   83508:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8350a:	4b08      	ldr	r3, [pc, #32]	; (8352c <udc_reset+0x38>)
   8350c:	681b      	ldr	r3, [r3, #0]
   8350e:	681b      	ldr	r3, [r3, #0]
   83510:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83512:	42a3      	cmp	r3, r4
   83514:	d9f2      	bls.n	834fc <udc_reset+0x8>
			udc_iface_disable(iface_num);
   83516:	4620      	mov	r0, r4
   83518:	4b05      	ldr	r3, [pc, #20]	; (83530 <udc_reset+0x3c>)
   8351a:	4798      	blx	r3
				iface_num++) {
   8351c:	3401      	adds	r4, #1
   8351e:	b2e4      	uxtb	r4, r4
   83520:	e7f3      	b.n	8350a <udc_reset+0x16>
   83522:	bf00      	nop
   83524:	2000103d 	.word	0x2000103d
   83528:	20001038 	.word	0x20001038
   8352c:	20001040 	.word	0x20001040
   83530:	000830d9 	.word	0x000830d9

00083534 <udc_req_std_dev_set_feature>:
{
   83534:	b510      	push	{r4, lr}
	if (udd_g_ctrlreq.req.wLength) {
   83536:	4b1a      	ldr	r3, [pc, #104]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   83538:	88db      	ldrh	r3, [r3, #6]
   8353a:	2b00      	cmp	r3, #0
   8353c:	d12c      	bne.n	83598 <udc_req_std_dev_set_feature+0x64>
	switch (udd_g_ctrlreq.req.wValue) {
   8353e:	4b18      	ldr	r3, [pc, #96]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   83540:	885b      	ldrh	r3, [r3, #2]
   83542:	2b02      	cmp	r3, #2
   83544:	d002      	beq.n	8354c <udc_req_std_dev_set_feature+0x18>
		return false;
   83546:	2400      	movs	r4, #0
}
   83548:	4620      	mov	r0, r4
   8354a:	bd10      	pop	{r4, pc}
		if (!udd_is_high_speed()) {
   8354c:	4b15      	ldr	r3, [pc, #84]	; (835a4 <udc_req_std_dev_set_feature+0x70>)
   8354e:	4798      	blx	r3
   83550:	4604      	mov	r4, r0
   83552:	2800      	cmp	r0, #0
   83554:	d0f8      	beq.n	83548 <udc_req_std_dev_set_feature+0x14>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   83556:	4b12      	ldr	r3, [pc, #72]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   83558:	791b      	ldrb	r3, [r3, #4]
   8355a:	b10b      	cbz	r3, 83560 <udc_req_std_dev_set_feature+0x2c>
	return false;
   8355c:	2400      	movs	r4, #0
   8355e:	e7f3      	b.n	83548 <udc_req_std_dev_set_feature+0x14>
		udc_reset();
   83560:	4b11      	ldr	r3, [pc, #68]	; (835a8 <udc_req_std_dev_set_feature+0x74>)
   83562:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   83564:	4b0e      	ldr	r3, [pc, #56]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   83566:	889b      	ldrh	r3, [r3, #4]
   83568:	0a1b      	lsrs	r3, r3, #8
   8356a:	3b01      	subs	r3, #1
   8356c:	2b03      	cmp	r3, #3
   8356e:	d815      	bhi.n	8359c <udc_req_std_dev_set_feature+0x68>
   83570:	e8df f003 	tbb	[pc, r3]
   83574:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83578:	4b09      	ldr	r3, [pc, #36]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   8357a:	4a0c      	ldr	r2, [pc, #48]	; (835ac <udc_req_std_dev_set_feature+0x78>)
   8357c:	611a      	str	r2, [r3, #16]
			return true;
   8357e:	e7e3      	b.n	83548 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   83580:	4b07      	ldr	r3, [pc, #28]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   83582:	4a0b      	ldr	r2, [pc, #44]	; (835b0 <udc_req_std_dev_set_feature+0x7c>)
   83584:	611a      	str	r2, [r3, #16]
			return true;
   83586:	e7df      	b.n	83548 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83588:	4b05      	ldr	r3, [pc, #20]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   8358a:	4a0a      	ldr	r2, [pc, #40]	; (835b4 <udc_req_std_dev_set_feature+0x80>)
   8358c:	611a      	str	r2, [r3, #16]
			return true;
   8358e:	e7db      	b.n	83548 <udc_req_std_dev_set_feature+0x14>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   83590:	4b03      	ldr	r3, [pc, #12]	; (835a0 <udc_req_std_dev_set_feature+0x6c>)
   83592:	4a09      	ldr	r2, [pc, #36]	; (835b8 <udc_req_std_dev_set_feature+0x84>)
   83594:	611a      	str	r2, [r3, #16]
			return true;
   83596:	e7d7      	b.n	83548 <udc_req_std_dev_set_feature+0x14>
		return false;
   83598:	2400      	movs	r4, #0
   8359a:	e7d5      	b.n	83548 <udc_req_std_dev_set_feature+0x14>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8359c:	2400      	movs	r4, #0
   8359e:	e7d3      	b.n	83548 <udc_req_std_dev_set_feature+0x14>
   835a0:	20001958 	.word	0x20001958
   835a4:	0008462d 	.word	0x0008462d
   835a8:	000834f5 	.word	0x000834f5
   835ac:	00084cd5 	.word	0x00084cd5
   835b0:	00084cf9 	.word	0x00084cf9
   835b4:	00084d1d 	.word	0x00084d1d
   835b8:	00084d35 	.word	0x00084d35

000835bc <udc_req_std_dev_set_configuration>:
	if (udd_g_ctrlreq.req.wLength) {
   835bc:	4b29      	ldr	r3, [pc, #164]	; (83664 <udc_req_std_dev_set_configuration+0xa8>)
   835be:	88db      	ldrh	r3, [r3, #6]
   835c0:	b10b      	cbz	r3, 835c6 <udc_req_std_dev_set_configuration+0xa>
		return false;
   835c2:	2000      	movs	r0, #0
}
   835c4:	4770      	bx	lr
{
   835c6:	b510      	push	{r4, lr}
	if (!udd_getaddress()) {
   835c8:	4b27      	ldr	r3, [pc, #156]	; (83668 <udc_req_std_dev_set_configuration+0xac>)
   835ca:	4798      	blx	r3
   835cc:	b908      	cbnz	r0, 835d2 <udc_req_std_dev_set_configuration+0x16>
		return false;
   835ce:	2000      	movs	r0, #0
}
   835d0:	bd10      	pop	{r4, pc}
	if (udd_is_high_speed()) {
   835d2:	4b26      	ldr	r3, [pc, #152]	; (8366c <udc_req_std_dev_set_configuration+0xb0>)
   835d4:	4798      	blx	r3
   835d6:	b178      	cbz	r0, 835f8 <udc_req_std_dev_set_configuration+0x3c>
				udc_config.confdev_hs->bNumConfigurations) {
   835d8:	4b25      	ldr	r3, [pc, #148]	; (83670 <udc_req_std_dev_set_configuration+0xb4>)
   835da:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   835dc:	4a21      	ldr	r2, [pc, #132]	; (83664 <udc_req_std_dev_set_configuration+0xa8>)
   835de:	7892      	ldrb	r2, [r2, #2]
   835e0:	7c5b      	ldrb	r3, [r3, #17]
   835e2:	429a      	cmp	r2, r3
   835e4:	d83c      	bhi.n	83660 <udc_req_std_dev_set_configuration+0xa4>
	udc_reset();
   835e6:	4b23      	ldr	r3, [pc, #140]	; (83674 <udc_req_std_dev_set_configuration+0xb8>)
   835e8:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   835ea:	4b1e      	ldr	r3, [pc, #120]	; (83664 <udc_req_std_dev_set_configuration+0xa8>)
   835ec:	789b      	ldrb	r3, [r3, #2]
   835ee:	4a22      	ldr	r2, [pc, #136]	; (83678 <udc_req_std_dev_set_configuration+0xbc>)
   835f0:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   835f2:	b94b      	cbnz	r3, 83608 <udc_req_std_dev_set_configuration+0x4c>
		return true; // Default empty configuration requested
   835f4:	2001      	movs	r0, #1
   835f6:	e7eb      	b.n	835d0 <udc_req_std_dev_set_configuration+0x14>
				udc_config.confdev_lsfs->bNumConfigurations) {
   835f8:	4b1d      	ldr	r3, [pc, #116]	; (83670 <udc_req_std_dev_set_configuration+0xb4>)
   835fa:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   835fc:	4a19      	ldr	r2, [pc, #100]	; (83664 <udc_req_std_dev_set_configuration+0xa8>)
   835fe:	7892      	ldrb	r2, [r2, #2]
   83600:	7c5b      	ldrb	r3, [r3, #17]
   83602:	429a      	cmp	r2, r3
   83604:	d9ef      	bls.n	835e6 <udc_req_std_dev_set_configuration+0x2a>
   83606:	e7e3      	b.n	835d0 <udc_req_std_dev_set_configuration+0x14>
	if (udd_is_high_speed()) {
   83608:	4b18      	ldr	r3, [pc, #96]	; (8366c <udc_req_std_dev_set_configuration+0xb0>)
   8360a:	4798      	blx	r3
   8360c:	b1d0      	cbz	r0, 83644 <udc_req_std_dev_set_configuration+0x88>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8360e:	4b18      	ldr	r3, [pc, #96]	; (83670 <udc_req_std_dev_set_configuration+0xb4>)
   83610:	691a      	ldr	r2, [r3, #16]
   83612:	4b19      	ldr	r3, [pc, #100]	; (83678 <udc_req_std_dev_set_configuration+0xbc>)
   83614:	781b      	ldrb	r3, [r3, #0]
   83616:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8361a:	3b01      	subs	r3, #1
   8361c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83620:	4a16      	ldr	r2, [pc, #88]	; (8367c <udc_req_std_dev_set_configuration+0xc0>)
   83622:	6013      	str	r3, [r2, #0]
{
   83624:	2400      	movs	r4, #0
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83626:	4b15      	ldr	r3, [pc, #84]	; (8367c <udc_req_std_dev_set_configuration+0xc0>)
   83628:	681b      	ldr	r3, [r3, #0]
   8362a:	681b      	ldr	r3, [r3, #0]
   8362c:	791b      	ldrb	r3, [r3, #4]
   8362e:	42a3      	cmp	r3, r4
   83630:	d914      	bls.n	8365c <udc_req_std_dev_set_configuration+0xa0>
		if (!udc_iface_enable(iface_num, 0)) {
   83632:	2100      	movs	r1, #0
   83634:	4620      	mov	r0, r4
   83636:	4b12      	ldr	r3, [pc, #72]	; (83680 <udc_req_std_dev_set_configuration+0xc4>)
   83638:	4798      	blx	r3
   8363a:	2800      	cmp	r0, #0
   8363c:	d0c8      	beq.n	835d0 <udc_req_std_dev_set_configuration+0x14>
			iface_num++) {
   8363e:	3401      	adds	r4, #1
   83640:	b2e4      	uxtb	r4, r4
   83642:	e7f0      	b.n	83626 <udc_req_std_dev_set_configuration+0x6a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   83644:	4b0a      	ldr	r3, [pc, #40]	; (83670 <udc_req_std_dev_set_configuration+0xb4>)
   83646:	685a      	ldr	r2, [r3, #4]
   83648:	4b0b      	ldr	r3, [pc, #44]	; (83678 <udc_req_std_dev_set_configuration+0xbc>)
   8364a:	781b      	ldrb	r3, [r3, #0]
   8364c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   83650:	3b01      	subs	r3, #1
   83652:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83656:	4a09      	ldr	r2, [pc, #36]	; (8367c <udc_req_std_dev_set_configuration+0xc0>)
   83658:	6013      	str	r3, [r2, #0]
   8365a:	e7e3      	b.n	83624 <udc_req_std_dev_set_configuration+0x68>
	return true;
   8365c:	2001      	movs	r0, #1
   8365e:	e7b7      	b.n	835d0 <udc_req_std_dev_set_configuration+0x14>
			return false;
   83660:	2000      	movs	r0, #0
   83662:	e7b5      	b.n	835d0 <udc_req_std_dev_set_configuration+0x14>
   83664:	20001958 	.word	0x20001958
   83668:	00084665 	.word	0x00084665
   8366c:	0008462d 	.word	0x0008462d
   83670:	2000033c 	.word	0x2000033c
   83674:	000834f5 	.word	0x000834f5
   83678:	2000103d 	.word	0x2000103d
   8367c:	20001040 	.word	0x20001040
   83680:	000833e9 	.word	0x000833e9

00083684 <udc_reqstd>:
{
   83684:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   83686:	4a35      	ldr	r2, [pc, #212]	; (8375c <udc_reqstd+0xd8>)
   83688:	7813      	ldrb	r3, [r2, #0]
   8368a:	f992 2000 	ldrsb.w	r2, [r2]
   8368e:	2a00      	cmp	r2, #0
   83690:	db0e      	blt.n	836b0 <udc_reqstd+0x2c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83692:	f013 031f 	ands.w	r3, r3, #31
   83696:	d143      	bne.n	83720 <udc_reqstd+0x9c>
			switch (udd_g_ctrlreq.req.bRequest) {
   83698:	4a30      	ldr	r2, [pc, #192]	; (8375c <udc_reqstd+0xd8>)
   8369a:	7852      	ldrb	r2, [r2, #1]
   8369c:	3a01      	subs	r2, #1
   8369e:	2a08      	cmp	r2, #8
   836a0:	d83e      	bhi.n	83720 <udc_reqstd+0x9c>
   836a2:	e8df f002 	tbb	[pc, r2]
   836a6:	3d34      	.short	0x3d34
   836a8:	3d313d37 	.word	0x3d313d37
   836ac:	3d3d      	.short	0x3d3d
   836ae:	3a          	.byte	0x3a
   836af:	00          	.byte	0x00
		if (udd_g_ctrlreq.req.wLength == 0) {
   836b0:	4a2a      	ldr	r2, [pc, #168]	; (8375c <udc_reqstd+0xd8>)
   836b2:	88d2      	ldrh	r2, [r2, #6]
   836b4:	2a00      	cmp	r2, #0
   836b6:	d04e      	beq.n	83756 <udc_reqstd+0xd2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   836b8:	f013 031f 	ands.w	r3, r3, #31
   836bc:	d106      	bne.n	836cc <udc_reqstd+0x48>
			switch (udd_g_ctrlreq.req.bRequest) {
   836be:	4a27      	ldr	r2, [pc, #156]	; (8375c <udc_reqstd+0xd8>)
   836c0:	7852      	ldrb	r2, [r2, #1]
   836c2:	2a06      	cmp	r2, #6
   836c4:	d00b      	beq.n	836de <udc_reqstd+0x5a>
   836c6:	2a08      	cmp	r2, #8
   836c8:	d00c      	beq.n	836e4 <udc_reqstd+0x60>
   836ca:	b12a      	cbz	r2, 836d8 <udc_reqstd+0x54>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   836cc:	2b01      	cmp	r3, #1
   836ce:	d00c      	beq.n	836ea <udc_reqstd+0x66>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   836d0:	2b02      	cmp	r3, #2
   836d2:	d011      	beq.n	836f8 <udc_reqstd+0x74>
	return false;
   836d4:	2000      	movs	r0, #0
   836d6:	e028      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_dev_get_status();
   836d8:	4b21      	ldr	r3, [pc, #132]	; (83760 <udc_reqstd+0xdc>)
   836da:	4798      	blx	r3
   836dc:	e025      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_dev_get_descriptor();
   836de:	4b21      	ldr	r3, [pc, #132]	; (83764 <udc_reqstd+0xe0>)
   836e0:	4798      	blx	r3
   836e2:	e022      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_dev_get_configuration();
   836e4:	4b20      	ldr	r3, [pc, #128]	; (83768 <udc_reqstd+0xe4>)
   836e6:	4798      	blx	r3
   836e8:	e01f      	b.n	8372a <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   836ea:	4a1c      	ldr	r2, [pc, #112]	; (8375c <udc_reqstd+0xd8>)
   836ec:	7852      	ldrb	r2, [r2, #1]
   836ee:	2a0a      	cmp	r2, #10
   836f0:	d1ee      	bne.n	836d0 <udc_reqstd+0x4c>
				return udc_req_std_iface_get_setting();
   836f2:	4b1e      	ldr	r3, [pc, #120]	; (8376c <udc_reqstd+0xe8>)
   836f4:	4798      	blx	r3
   836f6:	e018      	b.n	8372a <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   836f8:	4b18      	ldr	r3, [pc, #96]	; (8375c <udc_reqstd+0xd8>)
   836fa:	785b      	ldrb	r3, [r3, #1]
   836fc:	b10b      	cbz	r3, 83702 <udc_reqstd+0x7e>
	return false;
   836fe:	2000      	movs	r0, #0
   83700:	e013      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_ep_get_status();
   83702:	4b1b      	ldr	r3, [pc, #108]	; (83770 <udc_reqstd+0xec>)
   83704:	4798      	blx	r3
   83706:	e010      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_dev_set_address();
   83708:	4b1a      	ldr	r3, [pc, #104]	; (83774 <udc_reqstd+0xf0>)
   8370a:	4798      	blx	r3
   8370c:	e00d      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_dev_clear_feature();
   8370e:	4b1a      	ldr	r3, [pc, #104]	; (83778 <udc_reqstd+0xf4>)
   83710:	4798      	blx	r3
   83712:	e00a      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_dev_set_feature();
   83714:	4b19      	ldr	r3, [pc, #100]	; (8377c <udc_reqstd+0xf8>)
   83716:	4798      	blx	r3
   83718:	e007      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_dev_set_configuration();
   8371a:	4b19      	ldr	r3, [pc, #100]	; (83780 <udc_reqstd+0xfc>)
   8371c:	4798      	blx	r3
   8371e:	e004      	b.n	8372a <udc_reqstd+0xa6>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83720:	2b01      	cmp	r3, #1
   83722:	d003      	beq.n	8372c <udc_reqstd+0xa8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83724:	2b02      	cmp	r3, #2
   83726:	d008      	beq.n	8373a <udc_reqstd+0xb6>
	return false;
   83728:	2000      	movs	r0, #0
}
   8372a:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
   8372c:	4a0b      	ldr	r2, [pc, #44]	; (8375c <udc_reqstd+0xd8>)
   8372e:	7852      	ldrb	r2, [r2, #1]
   83730:	2a0b      	cmp	r2, #11
   83732:	d1f7      	bne.n	83724 <udc_reqstd+0xa0>
				return udc_req_std_iface_set_setting();
   83734:	4b13      	ldr	r3, [pc, #76]	; (83784 <udc_reqstd+0x100>)
   83736:	4798      	blx	r3
   83738:	e7f7      	b.n	8372a <udc_reqstd+0xa6>
			switch (udd_g_ctrlreq.req.bRequest) {
   8373a:	4b08      	ldr	r3, [pc, #32]	; (8375c <udc_reqstd+0xd8>)
   8373c:	785b      	ldrb	r3, [r3, #1]
   8373e:	2b01      	cmp	r3, #1
   83740:	d003      	beq.n	8374a <udc_reqstd+0xc6>
   83742:	2b03      	cmp	r3, #3
   83744:	d004      	beq.n	83750 <udc_reqstd+0xcc>
   83746:	2000      	movs	r0, #0
   83748:	e7ef      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_ep_clear_feature();
   8374a:	4b0f      	ldr	r3, [pc, #60]	; (83788 <udc_reqstd+0x104>)
   8374c:	4798      	blx	r3
   8374e:	e7ec      	b.n	8372a <udc_reqstd+0xa6>
				return udc_req_std_ep_set_feature();
   83750:	4b0e      	ldr	r3, [pc, #56]	; (8378c <udc_reqstd+0x108>)
   83752:	4798      	blx	r3
   83754:	e7e9      	b.n	8372a <udc_reqstd+0xa6>
			return false; // Error for USB host
   83756:	2000      	movs	r0, #0
   83758:	e7e7      	b.n	8372a <udc_reqstd+0xa6>
   8375a:	bf00      	nop
   8375c:	20001958 	.word	0x20001958
   83760:	00083139 	.word	0x00083139
   83764:	00083271 	.word	0x00083271
   83768:	000831d9 	.word	0x000831d9
   8376c:	00083201 	.word	0x00083201
   83770:	00083399 	.word	0x00083399
   83774:	00083011 	.word	0x00083011
   83778:	00082fe5 	.word	0x00082fe5
   8377c:	00083535 	.word	0x00083535
   83780:	000835bd 	.word	0x000835bd
   83784:	00083441 	.word	0x00083441
   83788:	00083481 	.word	0x00083481
   8378c:	000834a9 	.word	0x000834a9

00083790 <udc_sof_notify>:
	if (udc_num_configuration) {
   83790:	4b0b      	ldr	r3, [pc, #44]	; (837c0 <udc_sof_notify+0x30>)
   83792:	781b      	ldrb	r3, [r3, #0]
   83794:	b983      	cbnz	r3, 837b8 <udc_sof_notify+0x28>
   83796:	4770      	bx	lr
				iface_num++) {
   83798:	3401      	adds	r4, #1
   8379a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8379c:	4b09      	ldr	r3, [pc, #36]	; (837c4 <udc_sof_notify+0x34>)
   8379e:	681b      	ldr	r3, [r3, #0]
   837a0:	681a      	ldr	r2, [r3, #0]
   837a2:	7912      	ldrb	r2, [r2, #4]
		for (iface_num = 0;
   837a4:	42a2      	cmp	r2, r4
   837a6:	d90a      	bls.n	837be <udc_sof_notify+0x2e>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   837a8:	685b      	ldr	r3, [r3, #4]
   837aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   837ae:	691b      	ldr	r3, [r3, #16]
   837b0:	2b00      	cmp	r3, #0
   837b2:	d0f1      	beq.n	83798 <udc_sof_notify+0x8>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   837b4:	4798      	blx	r3
   837b6:	e7ef      	b.n	83798 <udc_sof_notify+0x8>
{
   837b8:	b510      	push	{r4, lr}
		for (iface_num = 0;
   837ba:	2400      	movs	r4, #0
   837bc:	e7ee      	b.n	8379c <udc_sof_notify+0xc>
}
   837be:	bd10      	pop	{r4, pc}
   837c0:	2000103d 	.word	0x2000103d
   837c4:	20001040 	.word	0x20001040

000837c8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   837c8:	b508      	push	{r3, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   837ca:	4b1c      	ldr	r3, [pc, #112]	; (8383c <udc_process_setup+0x74>)
   837cc:	2200      	movs	r2, #0
   837ce:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   837d0:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   837d2:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   837d4:	881b      	ldrh	r3, [r3, #0]
   837d6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   837da:	d016      	beq.n	8380a <udc_process_setup+0x42>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   837dc:	4b17      	ldr	r3, [pc, #92]	; (8383c <udc_process_setup+0x74>)
   837de:	781a      	ldrb	r2, [r3, #0]
   837e0:	f993 3000 	ldrsb.w	r3, [r3]
   837e4:	2b00      	cmp	r3, #0
   837e6:	db16      	blt.n	83816 <udc_process_setup+0x4e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   837e8:	f012 0f60 	tst.w	r2, #96	; 0x60
   837ec:	d019      	beq.n	83822 <udc_process_setup+0x5a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   837ee:	4b13      	ldr	r3, [pc, #76]	; (8383c <udc_process_setup+0x74>)
   837f0:	781b      	ldrb	r3, [r3, #0]
   837f2:	f003 031f 	and.w	r3, r3, #31
   837f6:	2b01      	cmp	r3, #1
   837f8:	d018      	beq.n	8382c <udc_process_setup+0x64>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   837fa:	4b10      	ldr	r3, [pc, #64]	; (8383c <udc_process_setup+0x74>)
   837fc:	781b      	ldrb	r3, [r3, #0]
   837fe:	f003 031f 	and.w	r3, r3, #31
   83802:	2b02      	cmp	r3, #2
   83804:	d017      	beq.n	83836 <udc_process_setup+0x6e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   83806:	2000      	movs	r0, #0
#endif
}
   83808:	bd08      	pop	{r3, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8380a:	21ae      	movs	r1, #174	; 0xae
   8380c:	480c      	ldr	r0, [pc, #48]	; (83840 <udc_process_setup+0x78>)
   8380e:	4b0d      	ldr	r3, [pc, #52]	; (83844 <udc_process_setup+0x7c>)
   83810:	4798      	blx	r3
		return true;
   83812:	2001      	movs	r0, #1
   83814:	e7f8      	b.n	83808 <udc_process_setup+0x40>
		if (udd_g_ctrlreq.req.wLength == 0) {
   83816:	4b09      	ldr	r3, [pc, #36]	; (8383c <udc_process_setup+0x74>)
   83818:	88db      	ldrh	r3, [r3, #6]
   8381a:	2b00      	cmp	r3, #0
   8381c:	d1e4      	bne.n	837e8 <udc_process_setup+0x20>
			return false; // Error from USB host
   8381e:	2000      	movs	r0, #0
   83820:	e7f2      	b.n	83808 <udc_process_setup+0x40>
		if (udc_reqstd()) {
   83822:	4b09      	ldr	r3, [pc, #36]	; (83848 <udc_process_setup+0x80>)
   83824:	4798      	blx	r3
   83826:	2800      	cmp	r0, #0
   83828:	d0e1      	beq.n	837ee <udc_process_setup+0x26>
   8382a:	e7ed      	b.n	83808 <udc_process_setup+0x40>
		if (udc_req_iface()) {
   8382c:	4b07      	ldr	r3, [pc, #28]	; (8384c <udc_process_setup+0x84>)
   8382e:	4798      	blx	r3
   83830:	2800      	cmp	r0, #0
   83832:	d0e2      	beq.n	837fa <udc_process_setup+0x32>
   83834:	e7e8      	b.n	83808 <udc_process_setup+0x40>
		if (udc_req_ep()) {
   83836:	4b06      	ldr	r3, [pc, #24]	; (83850 <udc_process_setup+0x88>)
   83838:	4798      	blx	r3
   8383a:	e7e5      	b.n	83808 <udc_process_setup+0x40>
   8383c:	20001958 	.word	0x20001958
   83840:	2000027c 	.word	0x2000027c
   83844:	00084685 	.word	0x00084685
   83848:	00083685 	.word	0x00083685
   8384c:	0008302d 	.word	0x0008302d
   83850:	00083085 	.word	0x00083085

00083854 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   83854:	4b01      	ldr	r3, [pc, #4]	; (8385c <udi_vendor_getsetting+0x8>)
   83856:	7818      	ldrb	r0, [r3, #0]
   83858:	4770      	bx	lr
   8385a:	bf00      	nop
   8385c:	20001048 	.word	0x20001048

00083860 <udi_vendor_enable>:
{
   83860:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83862:	4b05      	ldr	r3, [pc, #20]	; (83878 <udi_vendor_enable+0x18>)
   83864:	4798      	blx	r3
   83866:	78c3      	ldrb	r3, [r0, #3]
   83868:	4a04      	ldr	r2, [pc, #16]	; (8387c <udi_vendor_enable+0x1c>)
   8386a:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   8386c:	b10b      	cbz	r3, 83872 <udi_vendor_enable+0x12>
	return true;
   8386e:	2001      	movs	r0, #1
}
   83870:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83872:	4b03      	ldr	r3, [pc, #12]	; (83880 <udi_vendor_enable+0x20>)
   83874:	4798      	blx	r3
   83876:	e7fb      	b.n	83870 <udi_vendor_enable+0x10>
   83878:	000834dd 	.word	0x000834dd
   8387c:	20001048 	.word	0x20001048
   83880:	000817fd 	.word	0x000817fd

00083884 <udi_vendor_disable>:
{
   83884:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   83886:	4b03      	ldr	r3, [pc, #12]	; (83894 <udi_vendor_disable+0x10>)
   83888:	781b      	ldrb	r3, [r3, #0]
   8388a:	b103      	cbz	r3, 8388e <udi_vendor_disable+0xa>
}
   8388c:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   8388e:	4b02      	ldr	r3, [pc, #8]	; (83898 <udi_vendor_disable+0x14>)
   83890:	4798      	blx	r3
}
   83892:	e7fb      	b.n	8388c <udi_vendor_disable+0x8>
   83894:	20001048 	.word	0x20001048
   83898:	00081825 	.word	0x00081825

0008389c <udi_vendor_setup>:
{
   8389c:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   8389e:	4a0d      	ldr	r2, [pc, #52]	; (838d4 <udi_vendor_setup+0x38>)
   838a0:	7813      	ldrb	r3, [r2, #0]
   838a2:	f992 2000 	ldrsb.w	r2, [r2]
   838a6:	2a00      	cmp	r2, #0
   838a8:	db07      	blt.n	838ba <udi_vendor_setup+0x1e>
	if (Udd_setup_is_out()) {
   838aa:	2a00      	cmp	r2, #0
   838ac:	db0f      	blt.n	838ce <udi_vendor_setup+0x32>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   838ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
   838b2:	2b40      	cmp	r3, #64	; 0x40
   838b4:	d008      	beq.n	838c8 <udi_vendor_setup+0x2c>
	return false; // Not supported request
   838b6:	2000      	movs	r0, #0
}
   838b8:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   838ba:	f003 0160 	and.w	r1, r3, #96	; 0x60
   838be:	2940      	cmp	r1, #64	; 0x40
   838c0:	d1f3      	bne.n	838aa <udi_vendor_setup+0xe>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   838c2:	4b05      	ldr	r3, [pc, #20]	; (838d8 <udi_vendor_setup+0x3c>)
   838c4:	4798      	blx	r3
   838c6:	e7f7      	b.n	838b8 <udi_vendor_setup+0x1c>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   838c8:	4b04      	ldr	r3, [pc, #16]	; (838dc <udi_vendor_setup+0x40>)
   838ca:	4798      	blx	r3
   838cc:	e7f4      	b.n	838b8 <udi_vendor_setup+0x1c>
	return false; // Not supported request
   838ce:	2000      	movs	r0, #0
   838d0:	e7f2      	b.n	838b8 <udi_vendor_setup+0x1c>
   838d2:	bf00      	nop
   838d4:	20001958 	.word	0x20001958
   838d8:	00081875 	.word	0x00081875
   838dc:	00081831 	.word	0x00081831

000838e0 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   838e0:	b510      	push	{r4, lr}
   838e2:	b082      	sub	sp, #8
   838e4:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   838e6:	9200      	str	r2, [sp, #0]
   838e8:	4602      	mov	r2, r0
   838ea:	2100      	movs	r1, #0
   838ec:	2081      	movs	r0, #129	; 0x81
   838ee:	4c02      	ldr	r4, [pc, #8]	; (838f8 <udi_vendor_bulk_in_run+0x18>)
   838f0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   838f2:	b002      	add	sp, #8
   838f4:	bd10      	pop	{r4, pc}
   838f6:	bf00      	nop
   838f8:	000848d5 	.word	0x000848d5

000838fc <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   838fc:	b510      	push	{r4, lr}
   838fe:	b082      	sub	sp, #8
   83900:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83902:	9200      	str	r2, [sp, #0]
   83904:	4602      	mov	r2, r0
   83906:	2100      	movs	r1, #0
   83908:	2002      	movs	r0, #2
   8390a:	4c02      	ldr	r4, [pc, #8]	; (83914 <udi_vendor_bulk_out_run+0x18>)
   8390c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8390e:	b002      	add	sp, #8
   83910:	bd10      	pop	{r4, pc}
   83912:	bf00      	nop
   83914:	000848d5 	.word	0x000848d5

00083918 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   83918:	4603      	mov	r3, r0
   8391a:	b9a8      	cbnz	r0, 83948 <udd_sleep_mode+0x30>
   8391c:	4a17      	ldr	r2, [pc, #92]	; (8397c <udd_sleep_mode+0x64>)
   8391e:	7812      	ldrb	r2, [r2, #0]
   83920:	b192      	cbz	r2, 83948 <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83922:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   83926:	b672      	cpsid	i
   83928:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8392c:	4a14      	ldr	r2, [pc, #80]	; (83980 <udd_sleep_mode+0x68>)
   8392e:	2100      	movs	r1, #0
   83930:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   83932:	4914      	ldr	r1, [pc, #80]	; (83984 <udd_sleep_mode+0x6c>)
   83934:	788a      	ldrb	r2, [r1, #2]
   83936:	3a01      	subs	r2, #1
   83938:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8393a:	b928      	cbnz	r0, 83948 <udd_sleep_mode+0x30>
		cpu_irq_enable();
   8393c:	4a10      	ldr	r2, [pc, #64]	; (83980 <udd_sleep_mode+0x68>)
   8393e:	2101      	movs	r1, #1
   83940:	7011      	strb	r1, [r2, #0]
   83942:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83946:	b662      	cpsie	i
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   83948:	b1ab      	cbz	r3, 83976 <udd_sleep_mode+0x5e>
   8394a:	4a0c      	ldr	r2, [pc, #48]	; (8397c <udd_sleep_mode+0x64>)
   8394c:	7812      	ldrb	r2, [r2, #0]
   8394e:	b992      	cbnz	r2, 83976 <udd_sleep_mode+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83950:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   83954:	b672      	cpsid	i
   83956:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8395a:	4a09      	ldr	r2, [pc, #36]	; (83980 <udd_sleep_mode+0x68>)
   8395c:	2100      	movs	r1, #0
   8395e:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   83960:	4908      	ldr	r1, [pc, #32]	; (83984 <udd_sleep_mode+0x6c>)
   83962:	788a      	ldrb	r2, [r1, #2]
   83964:	3201      	adds	r2, #1
   83966:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   83968:	b928      	cbnz	r0, 83976 <udd_sleep_mode+0x5e>
		cpu_irq_enable();
   8396a:	4a05      	ldr	r2, [pc, #20]	; (83980 <udd_sleep_mode+0x68>)
   8396c:	2101      	movs	r1, #1
   8396e:	7011      	strb	r1, [r2, #0]
   83970:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83974:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   83976:	4a01      	ldr	r2, [pc, #4]	; (8397c <udd_sleep_mode+0x64>)
   83978:	7013      	strb	r3, [r2, #0]
}
   8397a:	4770      	bx	lr
   8397c:	2000104a 	.word	0x2000104a
   83980:	20000200 	.word	0x20000200
   83984:	20001950 	.word	0x20001950

00083988 <udd_reset_ep_ctrl>:
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   83988:	4b18      	ldr	r3, [pc, #96]	; (839ec <udd_reset_ep_ctrl+0x64>)
   8398a:	681a      	ldr	r2, [r3, #0]
   8398c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83990:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   83992:	681a      	ldr	r2, [r3, #0]
   83994:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83998:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   8399a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8399e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   839a2:	f022 0203 	bic.w	r2, r2, #3
   839a6:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   839aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   839ae:	2201      	movs	r2, #1
   839b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   839b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   839b8:	b672      	cpsid	i
   839ba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   839be:	4a0c      	ldr	r2, [pc, #48]	; (839f0 <udd_reset_ep_ctrl+0x68>)
   839c0:	2000      	movs	r0, #0
   839c2:	7010      	strb	r0, [r2, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   839c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   839c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   839cc:	f44f 7200 	mov.w	r2, #512	; 0x200
   839d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   839d4:	691a      	ldr	r2, [r3, #16]
   839d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   839da:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   839dc:	b929      	cbnz	r1, 839ea <udd_reset_ep_ctrl+0x62>
		cpu_irq_enable();
   839de:	4b04      	ldr	r3, [pc, #16]	; (839f0 <udd_reset_ep_ctrl+0x68>)
   839e0:	2201      	movs	r2, #1
   839e2:	701a      	strb	r2, [r3, #0]
   839e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   839e8:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   839ea:	4770      	bx	lr
   839ec:	400a4000 	.word	0x400a4000
   839f0:	20000200 	.word	0x20000200

000839f4 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   839f4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   839f8:	b672      	cpsid	i
   839fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   839fe:	4a0e      	ldr	r2, [pc, #56]	; (83a38 <udd_ctrl_init+0x44>)
   83a00:	2100      	movs	r1, #0
   83a02:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   83a04:	4a0d      	ldr	r2, [pc, #52]	; (83a3c <udd_ctrl_init+0x48>)
   83a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83a0a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   83a0e:	b92b      	cbnz	r3, 83a1c <udd_ctrl_init+0x28>
		cpu_irq_enable();
   83a10:	4b09      	ldr	r3, [pc, #36]	; (83a38 <udd_ctrl_init+0x44>)
   83a12:	2201      	movs	r2, #1
   83a14:	701a      	strb	r2, [r3, #0]
   83a16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83a1a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   83a1c:	4b07      	ldr	r3, [pc, #28]	; (83a3c <udd_ctrl_init+0x48>)
   83a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
   83a22:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   83a26:	4a06      	ldr	r2, [pc, #24]	; (83a40 <udd_ctrl_init+0x4c>)
   83a28:	2300      	movs	r3, #0
   83a2a:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83a2c:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   83a2e:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83a30:	4a04      	ldr	r2, [pc, #16]	; (83a44 <udd_ctrl_init+0x50>)
   83a32:	7013      	strb	r3, [r2, #0]
}
   83a34:	4770      	bx	lr
   83a36:	bf00      	nop
   83a38:	20000200 	.word	0x20000200
   83a3c:	400a4000 	.word	0x400a4000
   83a40:	20001958 	.word	0x20001958
   83a44:	20001050 	.word	0x20001050

00083a48 <udd_ctrl_overflow>:
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   83a48:	4b07      	ldr	r3, [pc, #28]	; (83a68 <udd_ctrl_overflow+0x20>)
   83a4a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83a4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   83a52:	d103      	bne.n	83a5c <udd_ctrl_overflow+0x14>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83a54:	4b05      	ldr	r3, [pc, #20]	; (83a6c <udd_ctrl_overflow+0x24>)
   83a56:	781b      	ldrb	r3, [r3, #0]
   83a58:	2b03      	cmp	r3, #3
   83a5a:	d000      	beq.n	83a5e <udd_ctrl_overflow+0x16>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
   83a5c:	4770      	bx	lr
		udd_enable_stall_handshake(0);
   83a5e:	4b02      	ldr	r3, [pc, #8]	; (83a68 <udd_ctrl_overflow+0x20>)
   83a60:	2220      	movs	r2, #32
   83a62:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83a66:	e7f9      	b.n	83a5c <udd_ctrl_overflow+0x14>
   83a68:	400a4000 	.word	0x400a4000
   83a6c:	20001050 	.word	0x20001050

00083a70 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83a70:	4b03      	ldr	r3, [pc, #12]	; (83a80 <udd_ctrl_stall_data+0x10>)
   83a72:	2205      	movs	r2, #5
   83a74:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   83a76:	4b03      	ldr	r3, [pc, #12]	; (83a84 <udd_ctrl_stall_data+0x14>)
   83a78:	2220      	movs	r2, #32
   83a7a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   83a7e:	4770      	bx	lr
   83a80:	20001050 	.word	0x20001050
   83a84:	400a4000 	.word	0x400a4000

00083a88 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   83a88:	4b11      	ldr	r3, [pc, #68]	; (83ad0 <udd_ctrl_send_zlp_in+0x48>)
   83a8a:	2203      	movs	r2, #3
   83a8c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83a8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83a92:	b672      	cpsid	i
   83a94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83a98:	4b0e      	ldr	r3, [pc, #56]	; (83ad4 <udd_ctrl_send_zlp_in+0x4c>)
   83a9a:	2200      	movs	r2, #0
   83a9c:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   83a9e:	4b0e      	ldr	r3, [pc, #56]	; (83ad8 <udd_ctrl_send_zlp_in+0x50>)
   83aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83aa4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83aa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83aac:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83ab0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   83ab4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83ab8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   83abc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83ac0:	b929      	cbnz	r1, 83ace <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   83ac2:	4b04      	ldr	r3, [pc, #16]	; (83ad4 <udd_ctrl_send_zlp_in+0x4c>)
   83ac4:	2201      	movs	r2, #1
   83ac6:	701a      	strb	r2, [r3, #0]
   83ac8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83acc:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   83ace:	4770      	bx	lr
   83ad0:	20001050 	.word	0x20001050
   83ad4:	20000200 	.word	0x20000200
   83ad8:	400a4000 	.word	0x400a4000

00083adc <udd_ctrl_underflow>:
{
   83adc:	b508      	push	{r3, lr}
	if (Is_udd_out_received(0))
   83ade:	4b0a      	ldr	r3, [pc, #40]	; (83b08 <udd_ctrl_underflow+0x2c>)
   83ae0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83ae4:	f413 7f00 	tst.w	r3, #512	; 0x200
   83ae8:	d105      	bne.n	83af6 <udd_ctrl_underflow+0x1a>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   83aea:	4b08      	ldr	r3, [pc, #32]	; (83b0c <udd_ctrl_underflow+0x30>)
   83aec:	781b      	ldrb	r3, [r3, #0]
   83aee:	2b01      	cmp	r3, #1
   83af0:	d002      	beq.n	83af8 <udd_ctrl_underflow+0x1c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   83af2:	2b04      	cmp	r3, #4
   83af4:	d003      	beq.n	83afe <udd_ctrl_underflow+0x22>
}
   83af6:	bd08      	pop	{r3, pc}
		udd_ctrl_send_zlp_in();
   83af8:	4b05      	ldr	r3, [pc, #20]	; (83b10 <udd_ctrl_underflow+0x34>)
   83afa:	4798      	blx	r3
   83afc:	e7fb      	b.n	83af6 <udd_ctrl_underflow+0x1a>
		udd_enable_stall_handshake(0);
   83afe:	4b02      	ldr	r3, [pc, #8]	; (83b08 <udd_ctrl_underflow+0x2c>)
   83b00:	2220      	movs	r2, #32
   83b02:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83b06:	e7f6      	b.n	83af6 <udd_ctrl_underflow+0x1a>
   83b08:	400a4000 	.word	0x400a4000
   83b0c:	20001050 	.word	0x20001050
   83b10:	00083a89 	.word	0x00083a89

00083b14 <udd_ctrl_send_zlp_out>:

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83b14:	4b0c      	ldr	r3, [pc, #48]	; (83b48 <udd_ctrl_send_zlp_out+0x34>)
   83b16:	2204      	movs	r2, #4
   83b18:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83b1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83b1e:	b672      	cpsid	i
   83b20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83b24:	4b09      	ldr	r3, [pc, #36]	; (83b4c <udd_ctrl_send_zlp_out+0x38>)
   83b26:	2200      	movs	r2, #0
   83b28:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   83b2a:	4b09      	ldr	r3, [pc, #36]	; (83b50 <udd_ctrl_send_zlp_out+0x3c>)
   83b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83b30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   83b34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83b38:	b929      	cbnz	r1, 83b46 <udd_ctrl_send_zlp_out+0x32>
		cpu_irq_enable();
   83b3a:	4b04      	ldr	r3, [pc, #16]	; (83b4c <udd_ctrl_send_zlp_out+0x38>)
   83b3c:	2201      	movs	r2, #1
   83b3e:	701a      	strb	r2, [r3, #0]
   83b40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83b44:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   83b46:	4770      	bx	lr
   83b48:	20001050 	.word	0x20001050
   83b4c:	20000200 	.word	0x20000200
   83b50:	400a4000 	.word	0x400a4000

00083b54 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   83b54:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   83b56:	4b02      	ldr	r3, [pc, #8]	; (83b60 <udd_ctrl_endofrequest+0xc>)
   83b58:	691b      	ldr	r3, [r3, #16]
   83b5a:	b103      	cbz	r3, 83b5e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   83b5c:	4798      	blx	r3
	}
}
   83b5e:	bd08      	pop	{r3, pc}
   83b60:	20001958 	.word	0x20001958

00083b64 <udd_ctrl_in_sent>:
{
   83b64:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83b66:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   83b6a:	b672      	cpsid	i
   83b6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83b70:	4a41      	ldr	r2, [pc, #260]	; (83c78 <udd_ctrl_in_sent+0x114>)
   83b72:	2100      	movs	r1, #0
   83b74:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   83b76:	4a41      	ldr	r2, [pc, #260]	; (83c7c <udd_ctrl_in_sent+0x118>)
   83b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83b7c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   83b80:	b92b      	cbnz	r3, 83b8e <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   83b82:	4b3d      	ldr	r3, [pc, #244]	; (83c78 <udd_ctrl_in_sent+0x114>)
   83b84:	2201      	movs	r2, #1
   83b86:	701a      	strb	r2, [r3, #0]
   83b88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83b8c:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83b8e:	4b3c      	ldr	r3, [pc, #240]	; (83c80 <udd_ctrl_in_sent+0x11c>)
   83b90:	781b      	ldrb	r3, [r3, #0]
   83b92:	2b03      	cmp	r3, #3
   83b94:	d038      	beq.n	83c08 <udd_ctrl_in_sent+0xa4>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83b96:	4b3b      	ldr	r3, [pc, #236]	; (83c84 <udd_ctrl_in_sent+0x120>)
   83b98:	899c      	ldrh	r4, [r3, #12]
   83b9a:	4b3b      	ldr	r3, [pc, #236]	; (83c88 <udd_ctrl_in_sent+0x124>)
   83b9c:	881b      	ldrh	r3, [r3, #0]
   83b9e:	1ae4      	subs	r4, r4, r3
   83ba0:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   83ba2:	b9ac      	cbnz	r4, 83bd0 <udd_ctrl_in_sent+0x6c>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83ba4:	4a39      	ldr	r2, [pc, #228]	; (83c8c <udd_ctrl_in_sent+0x128>)
   83ba6:	8811      	ldrh	r1, [r2, #0]
   83ba8:	440b      	add	r3, r1
   83baa:	b29b      	uxth	r3, r3
   83bac:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83bae:	4a35      	ldr	r2, [pc, #212]	; (83c84 <udd_ctrl_in_sent+0x120>)
   83bb0:	88d2      	ldrh	r2, [r2, #6]
   83bb2:	4293      	cmp	r3, r2
   83bb4:	d02d      	beq.n	83c12 <udd_ctrl_in_sent+0xae>
				|| b_shortpacket) {
   83bb6:	4b36      	ldr	r3, [pc, #216]	; (83c90 <udd_ctrl_in_sent+0x12c>)
   83bb8:	781b      	ldrb	r3, [r3, #0]
   83bba:	bb53      	cbnz	r3, 83c12 <udd_ctrl_in_sent+0xae>
		if ((!udd_g_ctrlreq.over_under_run)
   83bbc:	4b31      	ldr	r3, [pc, #196]	; (83c84 <udd_ctrl_in_sent+0x120>)
   83bbe:	695b      	ldr	r3, [r3, #20]
   83bc0:	b133      	cbz	r3, 83bd0 <udd_ctrl_in_sent+0x6c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   83bc2:	4798      	blx	r3
   83bc4:	b120      	cbz	r0, 83bd0 <udd_ctrl_in_sent+0x6c>
			udd_ctrl_payload_buf_cnt = 0;
   83bc6:	4b30      	ldr	r3, [pc, #192]	; (83c88 <udd_ctrl_in_sent+0x124>)
   83bc8:	2200      	movs	r2, #0
   83bca:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   83bcc:	4b2d      	ldr	r3, [pc, #180]	; (83c84 <udd_ctrl_in_sent+0x120>)
   83bce:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   83bd0:	2c3f      	cmp	r4, #63	; 0x3f
   83bd2:	d921      	bls.n	83c18 <udd_ctrl_in_sent+0xb4>
		b_shortpacket = false;
   83bd4:	4b2e      	ldr	r3, [pc, #184]	; (83c90 <udd_ctrl_in_sent+0x12c>)
   83bd6:	2200      	movs	r2, #0
   83bd8:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   83bda:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83bdc:	4b29      	ldr	r3, [pc, #164]	; (83c84 <udd_ctrl_in_sent+0x120>)
   83bde:	689b      	ldr	r3, [r3, #8]
   83be0:	4a29      	ldr	r2, [pc, #164]	; (83c88 <udd_ctrl_in_sent+0x124>)
   83be2:	8812      	ldrh	r2, [r2, #0]
   83be4:	4413      	add	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83be6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   83bea:	b672      	cpsid	i
   83bec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83bf0:	4a21      	ldr	r2, [pc, #132]	; (83c78 <udd_ctrl_in_sent+0x114>)
   83bf2:	2100      	movs	r1, #0
   83bf4:	7011      	strb	r1, [r2, #0]
	if (Is_udd_out_received(0)) {
   83bf6:	4a21      	ldr	r2, [pc, #132]	; (83c7c <udd_ctrl_in_sent+0x118>)
   83bf8:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83bfc:	f412 7f00 	tst.w	r2, #512	; 0x200
   83c00:	d10e      	bne.n	83c20 <udd_ctrl_in_sent+0xbc>
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83c02:	4a24      	ldr	r2, [pc, #144]	; (83c94 <udd_ctrl_in_sent+0x130>)
	for (i = 0; i < nb_remain; i++) {
   83c04:	2100      	movs	r1, #0
   83c06:	e01c      	b.n	83c42 <udd_ctrl_in_sent+0xde>
		udd_ctrl_endofrequest();
   83c08:	4b23      	ldr	r3, [pc, #140]	; (83c98 <udd_ctrl_in_sent+0x134>)
   83c0a:	4798      	blx	r3
		udd_ctrl_init();
   83c0c:	4b23      	ldr	r3, [pc, #140]	; (83c9c <udd_ctrl_in_sent+0x138>)
   83c0e:	4798      	blx	r3
		return;
   83c10:	e010      	b.n	83c34 <udd_ctrl_in_sent+0xd0>
			udd_ctrl_send_zlp_out();
   83c12:	4b23      	ldr	r3, [pc, #140]	; (83ca0 <udd_ctrl_in_sent+0x13c>)
   83c14:	4798      	blx	r3
			return;
   83c16:	e00d      	b.n	83c34 <udd_ctrl_in_sent+0xd0>
		b_shortpacket = true;
   83c18:	4b1d      	ldr	r3, [pc, #116]	; (83c90 <udd_ctrl_in_sent+0x12c>)
   83c1a:	2201      	movs	r2, #1
   83c1c:	701a      	strb	r2, [r3, #0]
   83c1e:	e7dd      	b.n	83bdc <udd_ctrl_in_sent+0x78>
	if (cpu_irq_is_enabled_flags(flags))
   83c20:	b92d      	cbnz	r5, 83c2e <udd_ctrl_in_sent+0xca>
		cpu_irq_enable();
   83c22:	4b15      	ldr	r3, [pc, #84]	; (83c78 <udd_ctrl_in_sent+0x114>)
   83c24:	2201      	movs	r2, #1
   83c26:	701a      	strb	r2, [r3, #0]
   83c28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83c2c:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83c2e:	4b14      	ldr	r3, [pc, #80]	; (83c80 <udd_ctrl_in_sent+0x11c>)
   83c30:	2204      	movs	r2, #4
   83c32:	701a      	strb	r2, [r3, #0]
}
   83c34:	bd38      	pop	{r3, r4, r5, pc}
		*ptr_dest++ = *ptr_src++;
   83c36:	f813 0b01 	ldrb.w	r0, [r3], #1
   83c3a:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   83c3e:	3101      	adds	r1, #1
   83c40:	b2c9      	uxtb	r1, r1
   83c42:	b288      	uxth	r0, r1
   83c44:	42a0      	cmp	r0, r4
   83c46:	d3f6      	bcc.n	83c36 <udd_ctrl_in_sent+0xd2>
	udd_ctrl_payload_buf_cnt += nb_remain;
   83c48:	4b0f      	ldr	r3, [pc, #60]	; (83c88 <udd_ctrl_in_sent+0x124>)
   83c4a:	881a      	ldrh	r2, [r3, #0]
   83c4c:	4414      	add	r4, r2
   83c4e:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   83c50:	4b0a      	ldr	r3, [pc, #40]	; (83c7c <udd_ctrl_in_sent+0x118>)
   83c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83c56:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   83c5e:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83c62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83c66:	2d00      	cmp	r5, #0
   83c68:	d1e4      	bne.n	83c34 <udd_ctrl_in_sent+0xd0>
		cpu_irq_enable();
   83c6a:	4b03      	ldr	r3, [pc, #12]	; (83c78 <udd_ctrl_in_sent+0x114>)
   83c6c:	2201      	movs	r2, #1
   83c6e:	701a      	strb	r2, [r3, #0]
   83c70:	f3bf 8f5f 	dmb	sy
   83c74:	b662      	cpsie	i
}
   83c76:	e7dd      	b.n	83c34 <udd_ctrl_in_sent+0xd0>
   83c78:	20000200 	.word	0x20000200
   83c7c:	400a4000 	.word	0x400a4000
   83c80:	20001050 	.word	0x20001050
   83c84:	20001958 	.word	0x20001958
   83c88:	2000104c 	.word	0x2000104c
   83c8c:	2000104e 	.word	0x2000104e
   83c90:	20001049 	.word	0x20001049
   83c94:	20180000 	.word	0x20180000
   83c98:	00083b55 	.word	0x00083b55
   83c9c:	000839f5 	.word	0x000839f5
   83ca0:	00083b15 	.word	0x00083b15

00083ca4 <udd_ctrl_out_received>:
{
   83ca4:	b538      	push	{r3, r4, r5, lr}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   83ca6:	4b46      	ldr	r3, [pc, #280]	; (83dc0 <udd_ctrl_out_received+0x11c>)
   83ca8:	781b      	ldrb	r3, [r3, #0]
   83caa:	2b01      	cmp	r3, #1
   83cac:	d00b      	beq.n	83cc6 <udd_ctrl_out_received+0x22>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   83cae:	2b02      	cmp	r3, #2
   83cb0:	d001      	beq.n	83cb6 <udd_ctrl_out_received+0x12>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   83cb2:	2b04      	cmp	r3, #4
   83cb4:	d104      	bne.n	83cc0 <udd_ctrl_out_received+0x1c>
			udd_ctrl_endofrequest();
   83cb6:	4b43      	ldr	r3, [pc, #268]	; (83dc4 <udd_ctrl_out_received+0x120>)
   83cb8:	4798      	blx	r3
		udd_ctrl_init();
   83cba:	4b43      	ldr	r3, [pc, #268]	; (83dc8 <udd_ctrl_out_received+0x124>)
   83cbc:	4798      	blx	r3
}
   83cbe:	bd38      	pop	{r3, r4, r5, pc}
			udd_ctrl_stall_data();
   83cc0:	4b42      	ldr	r3, [pc, #264]	; (83dcc <udd_ctrl_out_received+0x128>)
   83cc2:	4798      	blx	r3
   83cc4:	e7f9      	b.n	83cba <udd_ctrl_out_received+0x16>
	nb_data = udd_byte_count(0);
   83cc6:	4b42      	ldr	r3, [pc, #264]	; (83dd0 <udd_ctrl_out_received+0x12c>)
   83cc8:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
   83ccc:	f3c4 540a 	ubfx	r4, r4, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   83cd0:	4b40      	ldr	r3, [pc, #256]	; (83dd4 <udd_ctrl_out_received+0x130>)
   83cd2:	899b      	ldrh	r3, [r3, #12]
   83cd4:	4a40      	ldr	r2, [pc, #256]	; (83dd8 <udd_ctrl_out_received+0x134>)
   83cd6:	8815      	ldrh	r5, [r2, #0]
   83cd8:	192a      	adds	r2, r5, r4
   83cda:	4293      	cmp	r3, r2
   83cdc:	da01      	bge.n	83ce2 <udd_ctrl_out_received+0x3e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83cde:	1b5c      	subs	r4, r3, r5
   83ce0:	b2a4      	uxth	r4, r4
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83ce2:	4b3c      	ldr	r3, [pc, #240]	; (83dd4 <udd_ctrl_out_received+0x130>)
   83ce4:	689b      	ldr	r3, [r3, #8]
   83ce6:	442b      	add	r3, r5
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83ce8:	4a3c      	ldr	r2, [pc, #240]	; (83ddc <udd_ctrl_out_received+0x138>)
	for (i = 0; i < nb_data; i++) {
   83cea:	2100      	movs	r1, #0
   83cec:	b288      	uxth	r0, r1
   83cee:	42a0      	cmp	r0, r4
   83cf0:	d206      	bcs.n	83d00 <udd_ctrl_out_received+0x5c>
		*ptr_dest++ = *ptr_src++;
   83cf2:	f812 0b01 	ldrb.w	r0, [r2], #1
   83cf6:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < nb_data; i++) {
   83cfa:	3101      	adds	r1, #1
   83cfc:	b2c9      	uxtb	r1, r1
   83cfe:	e7f5      	b.n	83cec <udd_ctrl_out_received+0x48>
	udd_ctrl_payload_buf_cnt += nb_data;
   83d00:	4425      	add	r5, r4
   83d02:	b2ad      	uxth	r5, r5
   83d04:	4b34      	ldr	r3, [pc, #208]	; (83dd8 <udd_ctrl_out_received+0x134>)
   83d06:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   83d08:	2c40      	cmp	r4, #64	; 0x40
   83d0a:	d00d      	beq.n	83d28 <udd_ctrl_out_received+0x84>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   83d0c:	4b31      	ldr	r3, [pc, #196]	; (83dd4 <udd_ctrl_out_received+0x130>)
   83d0e:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   83d10:	695b      	ldr	r3, [r3, #20]
   83d12:	b10b      	cbz	r3, 83d18 <udd_ctrl_out_received+0x74>
			if (!udd_g_ctrlreq.over_under_run()) {
   83d14:	4798      	blx	r3
   83d16:	b368      	cbz	r0, 83d74 <udd_ctrl_out_received+0xd0>
		udd_ack_out_received(0);
   83d18:	4b2d      	ldr	r3, [pc, #180]	; (83dd0 <udd_ctrl_out_received+0x12c>)
   83d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
   83d1e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   83d22:	4b2f      	ldr	r3, [pc, #188]	; (83de0 <udd_ctrl_out_received+0x13c>)
   83d24:	4798      	blx	r3
		return;
   83d26:	e7ca      	b.n	83cbe <udd_ctrl_out_received+0x1a>
			|| (udd_g_ctrlreq.req.wLength <=
   83d28:	4b2a      	ldr	r3, [pc, #168]	; (83dd4 <udd_ctrl_out_received+0x130>)
   83d2a:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   83d2c:	4b2d      	ldr	r3, [pc, #180]	; (83de4 <udd_ctrl_out_received+0x140>)
   83d2e:	881b      	ldrh	r3, [r3, #0]
   83d30:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
   83d32:	429a      	cmp	r2, r3
   83d34:	ddea      	ble.n	83d0c <udd_ctrl_out_received+0x68>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   83d36:	4b27      	ldr	r3, [pc, #156]	; (83dd4 <udd_ctrl_out_received+0x130>)
   83d38:	899b      	ldrh	r3, [r3, #12]
   83d3a:	429d      	cmp	r5, r3
   83d3c:	d022      	beq.n	83d84 <udd_ctrl_out_received+0xe0>
	udd_ack_out_received(0);
   83d3e:	4b24      	ldr	r3, [pc, #144]	; (83dd0 <udd_ctrl_out_received+0x12c>)
   83d40:	f44f 7200 	mov.w	r2, #512	; 0x200
   83d44:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   83d48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83d4c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83d50:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83d54:	b672      	cpsid	i
   83d56:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83d5a:	4823      	ldr	r0, [pc, #140]	; (83de8 <udd_ctrl_out_received+0x144>)
   83d5c:	2400      	movs	r4, #0
   83d5e:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   83d60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83d64:	2900      	cmp	r1, #0
   83d66:	d1aa      	bne.n	83cbe <udd_ctrl_out_received+0x1a>
		cpu_irq_enable();
   83d68:	2201      	movs	r2, #1
   83d6a:	7002      	strb	r2, [r0, #0]
   83d6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83d70:	b662      	cpsie	i
}
   83d72:	e7a4      	b.n	83cbe <udd_ctrl_out_received+0x1a>
				udd_ctrl_stall_data();
   83d74:	4b15      	ldr	r3, [pc, #84]	; (83dcc <udd_ctrl_out_received+0x128>)
   83d76:	4798      	blx	r3
				udd_ack_out_received(0);
   83d78:	4b15      	ldr	r3, [pc, #84]	; (83dd0 <udd_ctrl_out_received+0x12c>)
   83d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   83d7e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   83d82:	e79c      	b.n	83cbe <udd_ctrl_out_received+0x1a>
		if (!udd_g_ctrlreq.over_under_run) {
   83d84:	4b13      	ldr	r3, [pc, #76]	; (83dd4 <udd_ctrl_out_received+0x130>)
   83d86:	695b      	ldr	r3, [r3, #20]
   83d88:	b153      	cbz	r3, 83da0 <udd_ctrl_out_received+0xfc>
		if (!udd_g_ctrlreq.over_under_run()) {
   83d8a:	4798      	blx	r3
   83d8c:	b180      	cbz	r0, 83db0 <udd_ctrl_out_received+0x10c>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83d8e:	4915      	ldr	r1, [pc, #84]	; (83de4 <udd_ctrl_out_received+0x140>)
   83d90:	4a11      	ldr	r2, [pc, #68]	; (83dd8 <udd_ctrl_out_received+0x134>)
   83d92:	880b      	ldrh	r3, [r1, #0]
   83d94:	8810      	ldrh	r0, [r2, #0]
   83d96:	4403      	add	r3, r0
   83d98:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   83d9a:	2300      	movs	r3, #0
   83d9c:	8013      	strh	r3, [r2, #0]
   83d9e:	e7ce      	b.n	83d3e <udd_ctrl_out_received+0x9a>
			udd_ctrl_stall_data();
   83da0:	4b0a      	ldr	r3, [pc, #40]	; (83dcc <udd_ctrl_out_received+0x128>)
   83da2:	4798      	blx	r3
			udd_ack_out_received(0);
   83da4:	4b0a      	ldr	r3, [pc, #40]	; (83dd0 <udd_ctrl_out_received+0x12c>)
   83da6:	f44f 7200 	mov.w	r2, #512	; 0x200
   83daa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83dae:	e786      	b.n	83cbe <udd_ctrl_out_received+0x1a>
			udd_ctrl_stall_data();
   83db0:	4b06      	ldr	r3, [pc, #24]	; (83dcc <udd_ctrl_out_received+0x128>)
   83db2:	4798      	blx	r3
			udd_ack_out_received(0);
   83db4:	4b06      	ldr	r3, [pc, #24]	; (83dd0 <udd_ctrl_out_received+0x12c>)
   83db6:	f44f 7200 	mov.w	r2, #512	; 0x200
   83dba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83dbe:	e77e      	b.n	83cbe <udd_ctrl_out_received+0x1a>
   83dc0:	20001050 	.word	0x20001050
   83dc4:	00083b55 	.word	0x00083b55
   83dc8:	000839f5 	.word	0x000839f5
   83dcc:	00083a71 	.word	0x00083a71
   83dd0:	400a4000 	.word	0x400a4000
   83dd4:	20001958 	.word	0x20001958
   83dd8:	2000104c 	.word	0x2000104c
   83ddc:	20180000 	.word	0x20180000
   83de0:	00083a89 	.word	0x00083a89
   83de4:	2000104e 	.word	0x2000104e
   83de8:	20000200 	.word	0x20000200

00083dec <udd_ep_job_table_reset>:
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83dec:	2300      	movs	r3, #0
   83dee:	2b01      	cmp	r3, #1
   83df0:	d813      	bhi.n	83e1a <udd_ep_job_table_reset+0x2e>
{
   83df2:	b410      	push	{r4}
		udd_ep_job[i].busy = false;
   83df4:	4a09      	ldr	r2, [pc, #36]	; (83e1c <udd_ep_job_table_reset+0x30>)
   83df6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   83dfa:	00c1      	lsls	r1, r0, #3
   83dfc:	4608      	mov	r0, r1
   83dfe:	4411      	add	r1, r2
   83e00:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   83e02:	4402      	add	r2, r0
   83e04:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   83e08:	f36f 0182 	bfc	r1, #2, #1
   83e0c:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e0e:	3301      	adds	r3, #1
   83e10:	b2db      	uxtb	r3, r3
   83e12:	2b01      	cmp	r3, #1
   83e14:	d9ee      	bls.n	83df4 <udd_ep_job_table_reset+0x8>
	}
}
   83e16:	bc10      	pop	{r4}
   83e18:	4770      	bx	lr
   83e1a:	4770      	bx	lr
   83e1c:	20001054 	.word	0x20001054

00083e20 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   83e20:	b538      	push	{r3, r4, r5, lr}
   83e22:	4603      	mov	r3, r0
   83e24:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   83e26:	7d19      	ldrb	r1, [r3, #20]
   83e28:	f011 0f01 	tst.w	r1, #1
   83e2c:	d011      	beq.n	83e52 <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   83e2e:	7d19      	ldrb	r1, [r3, #20]
   83e30:	f36f 0100 	bfc	r1, #0, #1
   83e34:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   83e36:	681c      	ldr	r4, [r3, #0]
   83e38:	b15c      	cbz	r4, 83e52 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   83e3a:	f102 0108 	add.w	r1, r2, #8
   83e3e:	0149      	lsls	r1, r1, #5
   83e40:	4d04      	ldr	r5, [pc, #16]	; (83e54 <udd_ep_finish_job+0x34>)
   83e42:	5869      	ldr	r1, [r5, r1]
   83e44:	f011 0f08 	tst.w	r1, #8
   83e48:	d001      	beq.n	83e4e <udd_ep_finish_job+0x2e>
		ep_num |= USB_EP_DIR_IN;
   83e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83e4e:	6899      	ldr	r1, [r3, #8]
   83e50:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83e52:	bd38      	pop	{r3, r4, r5, pc}
   83e54:	400a4000 	.word	0x400a4000

00083e58 <udd_ep_job_table_kill>:
{
   83e58:	b510      	push	{r4, lr}
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e5a:	2400      	movs	r4, #0
   83e5c:	e00b      	b.n	83e76 <udd_ep_job_table_kill+0x1e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   83e5e:	4623      	mov	r3, r4
   83e60:	3401      	adds	r4, #1
   83e62:	b2e4      	uxtb	r4, r4
   83e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83e68:	00d8      	lsls	r0, r3, #3
   83e6a:	4622      	mov	r2, r4
   83e6c:	2101      	movs	r1, #1
   83e6e:	4b03      	ldr	r3, [pc, #12]	; (83e7c <udd_ep_job_table_kill+0x24>)
   83e70:	4418      	add	r0, r3
   83e72:	4b03      	ldr	r3, [pc, #12]	; (83e80 <udd_ep_job_table_kill+0x28>)
   83e74:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83e76:	2c01      	cmp	r4, #1
   83e78:	d9f1      	bls.n	83e5e <udd_ep_job_table_kill+0x6>
}
   83e7a:	bd10      	pop	{r4, pc}
   83e7c:	20001054 	.word	0x20001054
   83e80:	00083e21 	.word	0x00083e21

00083e84 <udd_ep_abort_job>:
{
   83e84:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   83e86:	f000 020f 	and.w	r2, r0, #15
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83e8a:	1e50      	subs	r0, r2, #1
   83e8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   83e90:	2101      	movs	r1, #1
   83e92:	4b03      	ldr	r3, [pc, #12]	; (83ea0 <udd_ep_abort_job+0x1c>)
   83e94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   83e98:	4b02      	ldr	r3, [pc, #8]	; (83ea4 <udd_ep_abort_job+0x20>)
   83e9a:	4798      	blx	r3
}
   83e9c:	bd08      	pop	{r3, pc}
   83e9e:	bf00      	nop
   83ea0:	20001054 	.word	0x20001054
   83ea4:	00083e21 	.word	0x00083e21

00083ea8 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83eaa:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83eac:	1e43      	subs	r3, r0, #1
   83eae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   83eb2:	4858      	ldr	r0, [pc, #352]	; (84014 <udd_ep_trans_done+0x16c>)
   83eb4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3

	if (!ptr_job->busy) {
   83eb8:	7d01      	ldrb	r1, [r0, #20]
   83eba:	f011 0f01 	tst.w	r1, #1
   83ebe:	d073      	beq.n	83fa8 <udd_ep_trans_done+0x100>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83ec0:	68c4      	ldr	r4, [r0, #12]
   83ec2:	6881      	ldr	r1, [r0, #8]
   83ec4:	428c      	cmp	r4, r1
   83ec6:	d05b      	beq.n	83f80 <udd_ep_trans_done+0xd8>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83ec8:	1b09      	subs	r1, r1, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83eca:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   83ece:	d81f      	bhi.n	83f10 <udd_ep_trans_done+0x68>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   83ed0:	040d      	lsls	r5, r1, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   83ed2:	f102 0608 	add.w	r6, r2, #8
   83ed6:	0176      	lsls	r6, r6, #5
   83ed8:	4f4f      	ldr	r7, [pc, #316]	; (84018 <udd_ep_trans_done+0x170>)
   83eda:	59be      	ldr	r6, [r7, r6]
   83edc:	f016 0f08 	tst.w	r6, #8
   83ee0:	d01a      	beq.n	83f18 <udd_ep_trans_done+0x70>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83ee2:	f102 0608 	add.w	r6, r2, #8
   83ee6:	0176      	lsls	r6, r6, #5
   83ee8:	59bf      	ldr	r7, [r7, r6]
   83eea:	f007 0707 	and.w	r7, r7, #7
   83eee:	2608      	movs	r6, #8
   83ef0:	40be      	lsls	r6, r7
   83ef2:	3e01      	subs	r6, #1
   83ef4:	420e      	tst	r6, r1
   83ef6:	d01a      	beq.n	83f2e <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   83ef8:	f045 0508 	orr.w	r5, r5, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83efc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   83f00:	4f44      	ldr	r7, [pc, #272]	; (84014 <udd_ep_trans_done+0x16c>)
   83f02:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   83f06:	7d37      	ldrb	r7, [r6, #20]
   83f08:	f36f 0741 	bfc	r7, #1, #1
   83f0c:	7537      	strb	r7, [r6, #20]
   83f0e:	e00e      	b.n	83f2e <udd_ep_trans_done+0x86>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83f10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   83f14:	2500      	movs	r5, #0
   83f16:	e7dc      	b.n	83ed2 <udd_ep_trans_done+0x2a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83f18:	f102 0608 	add.w	r6, r2, #8
   83f1c:	0176      	lsls	r6, r6, #5
   83f1e:	4f3e      	ldr	r7, [pc, #248]	; (84018 <udd_ep_trans_done+0x170>)
   83f20:	59be      	ldr	r6, [r7, r6]
   83f22:	f3c6 1601 	ubfx	r6, r6, #4, #2
   83f26:	2e01      	cmp	r6, #1
   83f28:	d03f      	beq.n	83faa <udd_ep_trans_done+0x102>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   83f2a:	f045 0514 	orr.w	r5, r5, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83f2e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   83f32:	4f38      	ldr	r7, [pc, #224]	; (84014 <udd_ep_trans_done+0x16c>)
   83f34:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   83f38:	6876      	ldr	r6, [r6, #4]
   83f3a:	4426      	add	r6, r4
   83f3c:	4c37      	ldr	r4, [pc, #220]	; (8401c <udd_ep_trans_done+0x174>)
   83f3e:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   83f42:	6066      	str	r6, [r4, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   83f44:	f045 0521 	orr.w	r5, r5, #33	; 0x21
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83f48:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   83f4c:	b672      	cpsid	i
   83f4e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83f52:	4f33      	ldr	r7, [pc, #204]	; (84020 <udd_ep_trans_done+0x178>)
   83f54:	f04f 0c00 	mov.w	ip, #0
   83f58:	f887 c000 	strb.w	ip, [r7]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   83f5c:	68e7      	ldr	r7, [r4, #12]
   83f5e:	f017 0f10 	tst.w	r7, #16
   83f62:	d02d      	beq.n	83fc0 <udd_ep_trans_done+0x118>
	if (cpu_irq_is_enabled_flags(flags))
   83f64:	b92e      	cbnz	r6, 83f72 <udd_ep_trans_done+0xca>
		cpu_irq_enable();
   83f66:	492e      	ldr	r1, [pc, #184]	; (84020 <udd_ep_trans_done+0x178>)
   83f68:	2401      	movs	r4, #1
   83f6a:	700c      	strb	r4, [r1, #0]
   83f6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83f70:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83f72:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   83f76:	4c27      	ldr	r4, [pc, #156]	; (84014 <udd_ep_trans_done+0x16c>)
   83f78:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   83f7c:	68cc      	ldr	r4, [r1, #12]
   83f7e:	608c      	str	r4, [r1, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   83f80:	f102 0108 	add.w	r1, r2, #8
   83f84:	0149      	lsls	r1, r1, #5
   83f86:	4c24      	ldr	r4, [pc, #144]	; (84018 <udd_ep_trans_done+0x170>)
   83f88:	5861      	ldr	r1, [r4, r1]
   83f8a:	f011 0f08 	tst.w	r1, #8
   83f8e:	d008      	beq.n	83fa2 <udd_ep_trans_done+0xfa>
		if (ptr_job->b_shortpacket) {
   83f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   83f94:	491f      	ldr	r1, [pc, #124]	; (84014 <udd_ep_trans_done+0x16c>)
   83f96:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   83f9a:	7d1b      	ldrb	r3, [r3, #20]
   83f9c:	f013 0f02 	tst.w	r3, #2
   83fa0:	d129      	bne.n	83ff6 <udd_ep_trans_done+0x14e>
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   83fa2:	2100      	movs	r1, #0
   83fa4:	4b1f      	ldr	r3, [pc, #124]	; (84024 <udd_ep_trans_done+0x17c>)
   83fa6:	4798      	blx	r3
}
   83fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83faa:	f102 0608 	add.w	r6, r2, #8
   83fae:	0176      	lsls	r6, r6, #5
   83fb0:	59bf      	ldr	r7, [r7, r6]
   83fb2:	f007 0707 	and.w	r7, r7, #7
   83fb6:	2608      	movs	r6, #8
   83fb8:	40be      	lsls	r6, r7
   83fba:	428e      	cmp	r6, r1
   83fbc:	d3b7      	bcc.n	83f2e <udd_ep_trans_done+0x86>
   83fbe:	e7b4      	b.n	83f2a <udd_ep_trans_done+0x82>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83fc0:	60a5      	str	r5, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   83fc2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   83fc6:	4a13      	ldr	r2, [pc, #76]	; (84014 <udd_ep_trans_done+0x16c>)
   83fc8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   83fcc:	68d0      	ldr	r0, [r2, #12]
   83fce:	4408      	add	r0, r1
   83fd0:	60d0      	str	r0, [r2, #12]
			ptr_job->buf_load = next_trans;
   83fd2:	6111      	str	r1, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   83fd4:	4810      	ldr	r0, [pc, #64]	; (84018 <udd_ep_trans_done+0x170>)
   83fd6:	6902      	ldr	r2, [r0, #16]
   83fd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83fdc:	fa01 f303 	lsl.w	r3, r1, r3
   83fe0:	4313      	orrs	r3, r2
   83fe2:	6103      	str	r3, [r0, #16]
	if (cpu_irq_is_enabled_flags(flags))
   83fe4:	2e00      	cmp	r6, #0
   83fe6:	d1df      	bne.n	83fa8 <udd_ep_trans_done+0x100>
		cpu_irq_enable();
   83fe8:	4b0d      	ldr	r3, [pc, #52]	; (84020 <udd_ep_trans_done+0x178>)
   83fea:	2201      	movs	r2, #1
   83fec:	701a      	strb	r2, [r3, #0]
   83fee:	f3bf 8f5f 	dmb	sy
   83ff2:	b662      	cpsie	i
			return;
   83ff4:	e7d8      	b.n	83fa8 <udd_ep_trans_done+0x100>
			udd_enable_tx_pkt_ready_interrupt(ep);
   83ff6:	f102 0108 	add.w	r1, r2, #8
   83ffa:	eb04 1141 	add.w	r1, r4, r1, lsl #5
   83ffe:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84002:	6048      	str	r0, [r1, #4]
			udd_enable_endpoint_interrupt(ep);
   84004:	6921      	ldr	r1, [r4, #16]
   84006:	f44f 7080 	mov.w	r0, #256	; 0x100
   8400a:	fa00 f202 	lsl.w	r2, r0, r2
   8400e:	4311      	orrs	r1, r2
   84010:	6121      	str	r1, [r4, #16]
			return;
   84012:	e7c9      	b.n	83fa8 <udd_ep_trans_done+0x100>
   84014:	20001054 	.word	0x20001054
   84018:	400a4000 	.word	0x400a4000
   8401c:	400a4300 	.word	0x400a4300
   84020:	20000200 	.word	0x20000200
   84024:	00083e21 	.word	0x00083e21

00084028 <udd_ep_interrupt>:
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84028:	2201      	movs	r2, #1
   8402a:	2a02      	cmp	r2, #2
   8402c:	f200 809f 	bhi.w	8416e <udd_ep_interrupt+0x146>
{
   84030:	b538      	push	{r3, r4, r5, lr}
   84032:	e035      	b.n	840a0 <udd_ep_interrupt+0x78>

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   84034:	484f      	ldr	r0, [pc, #316]	; (84174 <udd_ep_interrupt+0x14c>)
   84036:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   8403a:	68c4      	ldr	r4, [r0, #12]
   8403c:	f014 0f01 	tst.w	r4, #1
   84040:	f040 8093 	bne.w	8416a <udd_ep_interrupt+0x142>
					& UDPHS_DMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   84044:	4d4c      	ldr	r5, [pc, #304]	; (84178 <udd_ep_interrupt+0x150>)
   84046:	692c      	ldr	r4, [r5, #16]
   84048:	ea24 0303 	bic.w	r3, r4, r3
   8404c:	612b      	str	r3, [r5, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8404e:	68c3      	ldr	r3, [r0, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   84050:	0c1b      	lsrs	r3, r3, #16
   84052:	d00c      	beq.n	8406e <udd_ep_interrupt+0x46>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   84054:	4c49      	ldr	r4, [pc, #292]	; (8417c <udd_ep_interrupt+0x154>)
   84056:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   8405a:	00e8      	lsls	r0, r5, #3
   8405c:	4420      	add	r0, r4
   8405e:	68c5      	ldr	r5, [r0, #12]
   84060:	1aeb      	subs	r3, r5, r3
   84062:	60c3      	str	r3, [r0, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   84064:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   84068:	00c8      	lsls	r0, r1, #3
   8406a:	4404      	add	r4, r0
   8406c:	60a3      	str	r3, [r4, #8]
			}
			udd_ep_trans_done(ep);
   8406e:	4610      	mov	r0, r2
   84070:	4b43      	ldr	r3, [pc, #268]	; (84180 <udd_ep_interrupt+0x158>)
   84072:	4798      	blx	r3
			return true;
   84074:	2001      	movs	r0, #1
   84076:	e077      	b.n	84168 <udd_ep_interrupt+0x140>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   84078:	0163      	lsls	r3, r4, #5
   8407a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8407e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84082:	f44f 6100 	mov.w	r1, #2048	; 0x800
   84086:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   8408a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
				udd_ep_finish_job(ptr_job, false, ep);
   8408e:	2100      	movs	r1, #0
   84090:	4b3c      	ldr	r3, [pc, #240]	; (84184 <udd_ep_interrupt+0x15c>)
   84092:	4798      	blx	r3
				return true;
   84094:	2001      	movs	r0, #1
   84096:	e067      	b.n	84168 <udd_ep_interrupt+0x140>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84098:	3201      	adds	r2, #1
   8409a:	b2d2      	uxtb	r2, r2
   8409c:	2a02      	cmp	r2, #2
   8409e:	d862      	bhi.n	84166 <udd_ep_interrupt+0x13e>
		ptr_job = &udd_ep_job[ep - 1];
   840a0:	4614      	mov	r4, r2
   840a2:	1e51      	subs	r1, r2, #1
   840a4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   840a8:	00d8      	lsls	r0, r3, #3
   840aa:	4b34      	ldr	r3, [pc, #208]	; (8417c <udd_ep_interrupt+0x154>)
   840ac:	4418      	add	r0, r3
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   840ae:	4b32      	ldr	r3, [pc, #200]	; (84178 <udd_ep_interrupt+0x150>)
   840b0:	691d      	ldr	r5, [r3, #16]
   840b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   840b6:	408b      	lsls	r3, r1
   840b8:	421d      	tst	r5, r3
   840ba:	d003      	beq.n	840c4 <udd_ep_interrupt+0x9c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   840bc:	4d2e      	ldr	r5, [pc, #184]	; (84178 <udd_ep_interrupt+0x150>)
   840be:	696d      	ldr	r5, [r5, #20]
   840c0:	422b      	tst	r3, r5
   840c2:	d1b7      	bne.n	84034 <udd_ep_interrupt+0xc>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   840c4:	4b2c      	ldr	r3, [pc, #176]	; (84178 <udd_ep_interrupt+0x150>)
   840c6:	691d      	ldr	r5, [r3, #16]
   840c8:	f44f 7380 	mov.w	r3, #256	; 0x100
   840cc:	40a3      	lsls	r3, r4
   840ce:	421d      	tst	r5, r3
   840d0:	d0e2      	beq.n	84098 <udd_ep_interrupt+0x70>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   840d2:	0165      	lsls	r5, r4, #5
   840d4:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
   840d8:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   840dc:	f8d5 510c 	ldr.w	r5, [r5, #268]	; 0x10c
   840e0:	f415 6f00 	tst.w	r5, #2048	; 0x800
   840e4:	d009      	beq.n	840fa <udd_ep_interrupt+0xd2>
					&& !Is_udd_tx_pkt_ready(ep)) {
   840e6:	0165      	lsls	r5, r4, #5
   840e8:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
   840ec:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   840f0:	f8d5 511c 	ldr.w	r5, [r5, #284]	; 0x11c
   840f4:	f415 6f00 	tst.w	r5, #2048	; 0x800
   840f8:	d0be      	beq.n	84078 <udd_ep_interrupt+0x50>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   840fa:	0160      	lsls	r0, r4, #5
   840fc:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   84100:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   84104:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   84108:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   8410c:	d0c4      	beq.n	84098 <udd_ep_interrupt+0x70>
					&& (0 == udd_nb_busy_bank(ep))) {
   8410e:	0160      	lsls	r0, r4, #5
   84110:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   84114:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   84118:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   8411c:	f410 2f40 	tst.w	r0, #786432	; 0xc0000
   84120:	d1ba      	bne.n	84098 <udd_ep_interrupt+0x70>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84122:	4a15      	ldr	r2, [pc, #84]	; (84178 <udd_ep_interrupt+0x150>)
   84124:	eb02 1444 	add.w	r4, r2, r4, lsl #5
   84128:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8412c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   84130:	6910      	ldr	r0, [r2, #16]
   84132:	ea20 0303 	bic.w	r3, r0, r3
   84136:	6113      	str	r3, [r2, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   84138:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   8413c:	00ca      	lsls	r2, r1, #3
   8413e:	4b0f      	ldr	r3, [pc, #60]	; (8417c <udd_ep_interrupt+0x154>)
   84140:	4413      	add	r3, r2
   84142:	7d1a      	ldrb	r2, [r3, #20]
   84144:	f36f 0282 	bfc	r2, #2, #1
   84148:	751a      	strb	r2, [r3, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   8414a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   8414e:	f023 0302 	bic.w	r3, r3, #2
   84152:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   84156:	2320      	movs	r3, #32
   84158:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   8415c:	2340      	movs	r3, #64	; 0x40
   8415e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   84162:	2001      	movs	r0, #1
   84164:	e000      	b.n	84168 <udd_ep_interrupt+0x140>
			}
		}
	}
	return false;
   84166:	2000      	movs	r0, #0
}
   84168:	bd38      	pop	{r3, r4, r5, pc}
				return true; // Ignore EOT_STA interrupt
   8416a:	2001      	movs	r0, #1
   8416c:	e7fc      	b.n	84168 <udd_ep_interrupt+0x140>
	return false;
   8416e:	2000      	movs	r0, #0
}
   84170:	4770      	bx	lr
   84172:	bf00      	nop
   84174:	400a4300 	.word	0x400a4300
   84178:	400a4000 	.word	0x400a4000
   8417c:	20001054 	.word	0x20001054
   84180:	00083ea9 	.word	0x00083ea9
   84184:	00083e21 	.word	0x00083e21

00084188 <udd_ctrl_setup_received>:
{
   84188:	b510      	push	{r4, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8418a:	4b33      	ldr	r3, [pc, #204]	; (84258 <udd_ctrl_setup_received+0xd0>)
   8418c:	781b      	ldrb	r3, [r3, #0]
   8418e:	b94b      	cbnz	r3, 841a4 <udd_ctrl_setup_received+0x1c>
	if (8 != udd_byte_count(0)) {
   84190:	4b32      	ldr	r3, [pc, #200]	; (8425c <udd_ctrl_setup_received+0xd4>)
   84192:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84196:	f3c3 530a 	ubfx	r3, r3, #20, #11
   8419a:	2b08      	cmp	r3, #8
   8419c:	d107      	bne.n	841ae <udd_ctrl_setup_received+0x26>
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8419e:	4a30      	ldr	r2, [pc, #192]	; (84260 <udd_ctrl_setup_received+0xd8>)
	for (i = 0; i < 8; i++) {
   841a0:	2300      	movs	r3, #0
   841a2:	e012      	b.n	841ca <udd_ctrl_setup_received+0x42>
		udd_ctrl_endofrequest();
   841a4:	4b2f      	ldr	r3, [pc, #188]	; (84264 <udd_ctrl_setup_received+0xdc>)
   841a6:	4798      	blx	r3
		udd_ctrl_init();
   841a8:	4b2f      	ldr	r3, [pc, #188]	; (84268 <udd_ctrl_setup_received+0xe0>)
   841aa:	4798      	blx	r3
   841ac:	e7f0      	b.n	84190 <udd_ctrl_setup_received+0x8>
		udd_ctrl_stall_data();
   841ae:	4b2f      	ldr	r3, [pc, #188]	; (8426c <udd_ctrl_setup_received+0xe4>)
   841b0:	4798      	blx	r3
		udd_ack_setup_received(0);
   841b2:	4b2a      	ldr	r3, [pc, #168]	; (8425c <udd_ctrl_setup_received+0xd4>)
   841b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   841b8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
   841bc:	bd10      	pop	{r4, pc}
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   841be:	f812 0b01 	ldrb.w	r0, [r2], #1
   841c2:	492b      	ldr	r1, [pc, #172]	; (84270 <udd_ctrl_setup_received+0xe8>)
   841c4:	5458      	strb	r0, [r3, r1]
	for (i = 0; i < 8; i++) {
   841c6:	3301      	adds	r3, #1
   841c8:	b2db      	uxtb	r3, r3
   841ca:	2b07      	cmp	r3, #7
   841cc:	d9f7      	bls.n	841be <udd_ctrl_setup_received+0x36>
	if (udc_process_setup() == false) {
   841ce:	4b29      	ldr	r3, [pc, #164]	; (84274 <udd_ctrl_setup_received+0xec>)
   841d0:	4798      	blx	r3
   841d2:	b358      	cbz	r0, 8422c <udd_ctrl_setup_received+0xa4>
	udd_ack_setup_received(0);
   841d4:	4b21      	ldr	r3, [pc, #132]	; (8425c <udd_ctrl_setup_received+0xd4>)
   841d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   841da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   841de:	4b24      	ldr	r3, [pc, #144]	; (84270 <udd_ctrl_setup_received+0xe8>)
   841e0:	f993 3000 	ldrsb.w	r3, [r3]
   841e4:	2b00      	cmp	r3, #0
   841e6:	db29      	blt.n	8423c <udd_ctrl_setup_received+0xb4>
		if (0 == udd_g_ctrlreq.req.wLength) {
   841e8:	4b21      	ldr	r3, [pc, #132]	; (84270 <udd_ctrl_setup_received+0xe8>)
   841ea:	88db      	ldrh	r3, [r3, #6]
   841ec:	2b00      	cmp	r3, #0
   841ee:	d030      	beq.n	84252 <udd_ctrl_setup_received+0xca>
		udd_ctrl_prev_payload_buf_cnt = 0;
   841f0:	2300      	movs	r3, #0
   841f2:	4a21      	ldr	r2, [pc, #132]	; (84278 <udd_ctrl_setup_received+0xf0>)
   841f4:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   841f6:	4a21      	ldr	r2, [pc, #132]	; (8427c <udd_ctrl_setup_received+0xf4>)
   841f8:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   841fa:	4a17      	ldr	r2, [pc, #92]	; (84258 <udd_ctrl_setup_received+0xd0>)
   841fc:	2101      	movs	r1, #1
   841fe:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   84200:	4a16      	ldr	r2, [pc, #88]	; (8425c <udd_ctrl_setup_received+0xd4>)
   84202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84206:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8420a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8420e:	b672      	cpsid	i
   84210:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84214:	4c1a      	ldr	r4, [pc, #104]	; (84280 <udd_ctrl_setup_received+0xf8>)
   84216:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   84218:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8421c:	2800      	cmp	r0, #0
   8421e:	d1cd      	bne.n	841bc <udd_ctrl_setup_received+0x34>
		cpu_irq_enable();
   84220:	2201      	movs	r2, #1
   84222:	7022      	strb	r2, [r4, #0]
   84224:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84228:	b662      	cpsie	i
}
   8422a:	e7c7      	b.n	841bc <udd_ctrl_setup_received+0x34>
		udd_ctrl_stall_data();
   8422c:	4b0f      	ldr	r3, [pc, #60]	; (8426c <udd_ctrl_setup_received+0xe4>)
   8422e:	4798      	blx	r3
		udd_ack_setup_received(0);
   84230:	4b0a      	ldr	r3, [pc, #40]	; (8425c <udd_ctrl_setup_received+0xd4>)
   84232:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84236:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   8423a:	e7bf      	b.n	841bc <udd_ctrl_setup_received+0x34>
		udd_ctrl_prev_payload_buf_cnt = 0;
   8423c:	2300      	movs	r3, #0
   8423e:	4a0e      	ldr	r2, [pc, #56]	; (84278 <udd_ctrl_setup_received+0xf0>)
   84240:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84242:	4a0e      	ldr	r2, [pc, #56]	; (8427c <udd_ctrl_setup_received+0xf4>)
   84244:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84246:	4b04      	ldr	r3, [pc, #16]	; (84258 <udd_ctrl_setup_received+0xd0>)
   84248:	2202      	movs	r2, #2
   8424a:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8424c:	4b0d      	ldr	r3, [pc, #52]	; (84284 <udd_ctrl_setup_received+0xfc>)
   8424e:	4798      	blx	r3
   84250:	e7b4      	b.n	841bc <udd_ctrl_setup_received+0x34>
			udd_ctrl_send_zlp_in();
   84252:	4b0d      	ldr	r3, [pc, #52]	; (84288 <udd_ctrl_setup_received+0x100>)
   84254:	4798      	blx	r3
			return;
   84256:	e7b1      	b.n	841bc <udd_ctrl_setup_received+0x34>
   84258:	20001050 	.word	0x20001050
   8425c:	400a4000 	.word	0x400a4000
   84260:	20180000 	.word	0x20180000
   84264:	00083b55 	.word	0x00083b55
   84268:	000839f5 	.word	0x000839f5
   8426c:	00083a71 	.word	0x00083a71
   84270:	20001958 	.word	0x20001958
   84274:	000837c9 	.word	0x000837c9
   84278:	2000104e 	.word	0x2000104e
   8427c:	2000104c 	.word	0x2000104c
   84280:	20000200 	.word	0x20000200
   84284:	00083b65 	.word	0x00083b65
   84288:	00083a89 	.word	0x00083a89

0008428c <udd_ctrl_interrupt>:
{
   8428c:	b508      	push	{r3, lr}
	uint32_t status = udd_get_endpoint_status(0);
   8428e:	4a27      	ldr	r2, [pc, #156]	; (8432c <udd_ctrl_interrupt+0xa0>)
   84290:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   84294:	6952      	ldr	r2, [r2, #20]
   84296:	f412 7f80 	tst.w	r2, #256	; 0x100
   8429a:	d045      	beq.n	84328 <udd_ctrl_interrupt+0x9c>
	udd_disable_nak_in_interrupt(0);
   8429c:	4a23      	ldr	r2, [pc, #140]	; (8432c <udd_ctrl_interrupt+0xa0>)
   8429e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   842a2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   842a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   842aa:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   842ae:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   842b2:	d11b      	bne.n	842ec <udd_ctrl_interrupt+0x60>
	if (Is_udd_endpoint_status_in_sent(status)
   842b4:	f413 6f80 	tst.w	r3, #1024	; 0x400
   842b8:	d005      	beq.n	842c6 <udd_ctrl_interrupt+0x3a>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   842ba:	4a1c      	ldr	r2, [pc, #112]	; (8432c <udd_ctrl_interrupt+0xa0>)
   842bc:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   842c0:	f412 6f80 	tst.w	r2, #1024	; 0x400
   842c4:	d116      	bne.n	842f4 <udd_ctrl_interrupt+0x68>
	if (Is_udd_endpoint_status_out_received(status)) {
   842c6:	f413 7f00 	tst.w	r3, #512	; 0x200
   842ca:	d117      	bne.n	842fc <udd_ctrl_interrupt+0x70>
	if (Is_udd_endpoint_status_stall(status)) {
   842cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   842d0:	d004      	beq.n	842dc <udd_ctrl_interrupt+0x50>
		udd_ack_stall(0);
   842d2:	4a16      	ldr	r2, [pc, #88]	; (8432c <udd_ctrl_interrupt+0xa0>)
   842d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   842d8:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   842dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   842e0:	d110      	bne.n	84304 <udd_ctrl_interrupt+0x78>
	if (Is_udd_endpoint_status_nak_in(status)) {
   842e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   842e6:	d116      	bne.n	84316 <udd_ctrl_interrupt+0x8a>
	return false;
   842e8:	2000      	movs	r0, #0
   842ea:	e01e      	b.n	8432a <udd_ctrl_interrupt+0x9e>
		udd_ctrl_setup_received();
   842ec:	4b10      	ldr	r3, [pc, #64]	; (84330 <udd_ctrl_interrupt+0xa4>)
   842ee:	4798      	blx	r3
		return true;
   842f0:	2001      	movs	r0, #1
   842f2:	e01a      	b.n	8432a <udd_ctrl_interrupt+0x9e>
		udd_ctrl_in_sent();
   842f4:	4b0f      	ldr	r3, [pc, #60]	; (84334 <udd_ctrl_interrupt+0xa8>)
   842f6:	4798      	blx	r3
		return true;
   842f8:	2001      	movs	r0, #1
   842fa:	e016      	b.n	8432a <udd_ctrl_interrupt+0x9e>
		udd_ctrl_out_received();
   842fc:	4b0e      	ldr	r3, [pc, #56]	; (84338 <udd_ctrl_interrupt+0xac>)
   842fe:	4798      	blx	r3
		return true;
   84300:	2001      	movs	r0, #1
   84302:	e012      	b.n	8432a <udd_ctrl_interrupt+0x9e>
		udd_ack_nak_out(0);
   84304:	4b09      	ldr	r3, [pc, #36]	; (8432c <udd_ctrl_interrupt+0xa0>)
   84306:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8430a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   8430e:	4b0b      	ldr	r3, [pc, #44]	; (8433c <udd_ctrl_interrupt+0xb0>)
   84310:	4798      	blx	r3
		return true;
   84312:	2001      	movs	r0, #1
   84314:	e009      	b.n	8432a <udd_ctrl_interrupt+0x9e>
		udd_ack_nak_in(0);
   84316:	4b05      	ldr	r3, [pc, #20]	; (8432c <udd_ctrl_interrupt+0xa0>)
   84318:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8431c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   84320:	4b07      	ldr	r3, [pc, #28]	; (84340 <udd_ctrl_interrupt+0xb4>)
   84322:	4798      	blx	r3
		return true;
   84324:	2001      	movs	r0, #1
   84326:	e000      	b.n	8432a <udd_ctrl_interrupt+0x9e>
		return false; // No interrupt events on control endpoint
   84328:	2000      	movs	r0, #0
}
   8432a:	bd08      	pop	{r3, pc}
   8432c:	400a4000 	.word	0x400a4000
   84330:	00084189 	.word	0x00084189
   84334:	00083b65 	.word	0x00083b65
   84338:	00083ca5 	.word	0x00083ca5
   8433c:	00083a49 	.word	0x00083a49
   84340:	00083add 	.word	0x00083add

00084344 <UDPHS_Handler>:
{
   84344:	b510      	push	{r4, lr}
	udd_enable_periph_ck();
   84346:	201d      	movs	r0, #29
   84348:	4b49      	ldr	r3, [pc, #292]	; (84470 <UDPHS_Handler+0x12c>)
   8434a:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8434c:	4b49      	ldr	r3, [pc, #292]	; (84474 <UDPHS_Handler+0x130>)
   8434e:	4798      	blx	r3
   84350:	b920      	cbnz	r0, 8435c <UDPHS_Handler+0x18>
   84352:	4b49      	ldr	r3, [pc, #292]	; (84478 <UDPHS_Handler+0x134>)
   84354:	695b      	ldr	r3, [r3, #20]
   84356:	f013 0f02 	tst.w	r3, #2
   8435a:	d040      	beq.n	843de <UDPHS_Handler+0x9a>
	if (Is_udd_sof()) {
   8435c:	4b46      	ldr	r3, [pc, #280]	; (84478 <UDPHS_Handler+0x134>)
   8435e:	695b      	ldr	r3, [r3, #20]
   84360:	f013 0f08 	tst.w	r3, #8
   84364:	d142      	bne.n	843ec <UDPHS_Handler+0xa8>
	if (Is_udd_msof()) {
   84366:	4b44      	ldr	r3, [pc, #272]	; (84478 <UDPHS_Handler+0x134>)
   84368:	695b      	ldr	r3, [r3, #20]
   8436a:	f013 0f04 	tst.w	r3, #4
   8436e:	d14a      	bne.n	84406 <UDPHS_Handler+0xc2>
	if (udd_ctrl_interrupt()) {
   84370:	4b42      	ldr	r3, [pc, #264]	; (8447c <UDPHS_Handler+0x138>)
   84372:	4798      	blx	r3
   84374:	2800      	cmp	r0, #0
   84376:	d142      	bne.n	843fe <UDPHS_Handler+0xba>
	if (udd_ep_interrupt()) {
   84378:	4b41      	ldr	r3, [pc, #260]	; (84480 <UDPHS_Handler+0x13c>)
   8437a:	4798      	blx	r3
   8437c:	2800      	cmp	r0, #0
   8437e:	d13e      	bne.n	843fe <UDPHS_Handler+0xba>
	if (Is_udd_reset()) {
   84380:	4b3d      	ldr	r3, [pc, #244]	; (84478 <UDPHS_Handler+0x134>)
   84382:	695b      	ldr	r3, [r3, #20]
   84384:	f013 0f10 	tst.w	r3, #16
   84388:	d143      	bne.n	84412 <UDPHS_Handler+0xce>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8438a:	4b3b      	ldr	r3, [pc, #236]	; (84478 <UDPHS_Handler+0x134>)
   8438c:	691b      	ldr	r3, [r3, #16]
   8438e:	f013 0f02 	tst.w	r3, #2
   84392:	d004      	beq.n	8439e <UDPHS_Handler+0x5a>
   84394:	4b38      	ldr	r3, [pc, #224]	; (84478 <UDPHS_Handler+0x134>)
   84396:	695b      	ldr	r3, [r3, #20]
   84398:	f013 0f02 	tst.w	r3, #2
   8439c:	d151      	bne.n	84442 <UDPHS_Handler+0xfe>
	if (Is_udd_wake_up()) {
   8439e:	4b36      	ldr	r3, [pc, #216]	; (84478 <UDPHS_Handler+0x134>)
   843a0:	695b      	ldr	r3, [r3, #20]
   843a2:	f013 0f20 	tst.w	r3, #32
   843a6:	d02a      	beq.n	843fe <UDPHS_Handler+0xba>
		udd_sleep_mode(true); // Enter in IDLE mode
   843a8:	2001      	movs	r0, #1
   843aa:	4b36      	ldr	r3, [pc, #216]	; (84484 <UDPHS_Handler+0x140>)
   843ac:	4798      	blx	r3
		udd_ack_suspend();
   843ae:	4b32      	ldr	r3, [pc, #200]	; (84478 <UDPHS_Handler+0x134>)
   843b0:	2202      	movs	r2, #2
   843b2:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   843b4:	2220      	movs	r2, #32
   843b6:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   843b8:	691a      	ldr	r2, [r3, #16]
   843ba:	f022 0220 	bic.w	r2, r2, #32
   843be:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   843c0:	691a      	ldr	r2, [r3, #16]
   843c2:	f042 0202 	orr.w	r2, r2, #2
   843c6:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   843c8:	691a      	ldr	r2, [r3, #16]
   843ca:	f042 0208 	orr.w	r2, r2, #8
   843ce:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   843d0:	691a      	ldr	r2, [r3, #16]
   843d2:	f042 0204 	orr.w	r2, r2, #4
   843d6:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   843d8:	4b2b      	ldr	r3, [pc, #172]	; (84488 <UDPHS_Handler+0x144>)
   843da:	4798      	blx	r3
		goto udd_interrupt_end;
   843dc:	e00f      	b.n	843fe <UDPHS_Handler+0xba>
  __ASM volatile ("cpsid i");
   843de:	b672      	cpsid	i
   843e0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   843e4:	4b29      	ldr	r3, [pc, #164]	; (8448c <UDPHS_Handler+0x148>)
   843e6:	2200      	movs	r2, #0
   843e8:	701a      	strb	r2, [r3, #0]
		return;
   843ea:	e008      	b.n	843fe <UDPHS_Handler+0xba>
		udd_ack_sof();
   843ec:	4b22      	ldr	r3, [pc, #136]	; (84478 <UDPHS_Handler+0x134>)
   843ee:	2208      	movs	r2, #8
   843f0:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   843f2:	695b      	ldr	r3, [r3, #20]
   843f4:	f013 0f01 	tst.w	r3, #1
   843f8:	d002      	beq.n	84400 <UDPHS_Handler+0xbc>
		UDC_SOF_EVENT();
   843fa:	4b25      	ldr	r3, [pc, #148]	; (84490 <UDPHS_Handler+0x14c>)
   843fc:	4798      	blx	r3
}
   843fe:	bd10      	pop	{r4, pc}
			udc_sof_notify();
   84400:	4b24      	ldr	r3, [pc, #144]	; (84494 <UDPHS_Handler+0x150>)
   84402:	4798      	blx	r3
   84404:	e7f9      	b.n	843fa <UDPHS_Handler+0xb6>
		udd_ack_msof();
   84406:	4b1c      	ldr	r3, [pc, #112]	; (84478 <UDPHS_Handler+0x134>)
   84408:	2204      	movs	r2, #4
   8440a:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   8440c:	4b21      	ldr	r3, [pc, #132]	; (84494 <UDPHS_Handler+0x150>)
   8440e:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   84410:	e7f5      	b.n	843fe <UDPHS_Handler+0xba>
		udd_ack_reset();
   84412:	4c19      	ldr	r4, [pc, #100]	; (84478 <UDPHS_Handler+0x134>)
   84414:	2310      	movs	r3, #16
   84416:	61a3      	str	r3, [r4, #24]
		udd_ep_job_table_kill();
   84418:	4b1f      	ldr	r3, [pc, #124]	; (84498 <UDPHS_Handler+0x154>)
   8441a:	4798      	blx	r3
		udc_reset();
   8441c:	4b1f      	ldr	r3, [pc, #124]	; (8449c <UDPHS_Handler+0x158>)
   8441e:	4798      	blx	r3
		udd_reset_ep_ctrl();
   84420:	4b1f      	ldr	r3, [pc, #124]	; (844a0 <UDPHS_Handler+0x15c>)
   84422:	4798      	blx	r3
		udd_ctrl_init();
   84424:	4b1f      	ldr	r3, [pc, #124]	; (844a4 <UDPHS_Handler+0x160>)
   84426:	4798      	blx	r3
		udd_enable_sof_interrupt();
   84428:	6923      	ldr	r3, [r4, #16]
   8442a:	f043 0308 	orr.w	r3, r3, #8
   8442e:	6123      	str	r3, [r4, #16]
		udd_enable_msof_interrupt();
   84430:	6923      	ldr	r3, [r4, #16]
   84432:	f043 0304 	orr.w	r3, r3, #4
   84436:	6123      	str	r3, [r4, #16]
		udd_enable_suspend_interrupt();
   84438:	6923      	ldr	r3, [r4, #16]
   8443a:	f043 0302 	orr.w	r3, r3, #2
   8443e:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
   84440:	e7dd      	b.n	843fe <UDPHS_Handler+0xba>
		udd_ack_wake_up();
   84442:	4b0d      	ldr	r3, [pc, #52]	; (84478 <UDPHS_Handler+0x134>)
   84444:	2220      	movs	r2, #32
   84446:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   84448:	691a      	ldr	r2, [r3, #16]
   8444a:	f022 0202 	bic.w	r2, r2, #2
   8444e:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   84450:	691a      	ldr	r2, [r3, #16]
   84452:	f042 0220 	orr.w	r2, r2, #32
   84456:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   84458:	2202      	movs	r2, #2
   8445a:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   8445c:	201d      	movs	r0, #29
   8445e:	4b12      	ldr	r3, [pc, #72]	; (844a8 <UDPHS_Handler+0x164>)
   84460:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   84462:	4b12      	ldr	r3, [pc, #72]	; (844ac <UDPHS_Handler+0x168>)
   84464:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84466:	2000      	movs	r0, #0
   84468:	4b06      	ldr	r3, [pc, #24]	; (84484 <UDPHS_Handler+0x140>)
   8446a:	4798      	blx	r3
		goto udd_interrupt_end;
   8446c:	e7c7      	b.n	843fe <UDPHS_Handler+0xba>
   8446e:	bf00      	nop
   84470:	00082845 	.word	0x00082845
   84474:	00082905 	.word	0x00082905
   84478:	400a4000 	.word	0x400a4000
   8447c:	0008428d 	.word	0x0008428d
   84480:	00084029 	.word	0x00084029
   84484:	00083919 	.word	0x00083919
   84488:	000817d1 	.word	0x000817d1
   8448c:	20000200 	.word	0x20000200
   84490:	000817dd 	.word	0x000817dd
   84494:	00083791 	.word	0x00083791
   84498:	00083e59 	.word	0x00083e59
   8449c:	000834f5 	.word	0x000834f5
   844a0:	00083989 	.word	0x00083989
   844a4:	000839f5 	.word	0x000839f5
   844a8:	00082879 	.word	0x00082879
   844ac:	000817c5 	.word	0x000817c5

000844b0 <udd_attach>:
{
   844b0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   844b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   844b6:	b672      	cpsid	i
   844b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   844bc:	4b1d      	ldr	r3, [pc, #116]	; (84534 <udd_attach+0x84>)
   844be:	2200      	movs	r2, #0
   844c0:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   844c2:	2001      	movs	r0, #1
   844c4:	4b1c      	ldr	r3, [pc, #112]	; (84538 <udd_attach+0x88>)
   844c6:	4798      	blx	r3
	udd_enable_periph_ck();
   844c8:	201d      	movs	r0, #29
   844ca:	4b1c      	ldr	r3, [pc, #112]	; (8453c <udd_attach+0x8c>)
   844cc:	4798      	blx	r3
	udd_attach_device();
   844ce:	4b1c      	ldr	r3, [pc, #112]	; (84540 <udd_attach+0x90>)
   844d0:	681a      	ldr	r2, [r3, #0]
   844d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   844d6:	601a      	str	r2, [r3, #0]
   844d8:	681a      	ldr	r2, [r3, #0]
   844da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   844de:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   844e0:	691a      	ldr	r2, [r3, #16]
   844e2:	f042 0210 	orr.w	r2, r2, #16
   844e6:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   844e8:	691a      	ldr	r2, [r3, #16]
   844ea:	f042 0202 	orr.w	r2, r2, #2
   844ee:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   844f0:	691a      	ldr	r2, [r3, #16]
   844f2:	f042 0220 	orr.w	r2, r2, #32
   844f6:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   844f8:	691a      	ldr	r2, [r3, #16]
   844fa:	f042 0208 	orr.w	r2, r2, #8
   844fe:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   84500:	691a      	ldr	r2, [r3, #16]
   84502:	f042 0204 	orr.w	r2, r2, #4
   84506:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   84508:	2208      	movs	r2, #8
   8450a:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   8450c:	2204      	movs	r2, #4
   8450e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84510:	2210      	movs	r2, #16
   84512:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84514:	2202      	movs	r2, #2
   84516:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84518:	2220      	movs	r2, #32
   8451a:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   8451c:	201d      	movs	r0, #29
   8451e:	4b09      	ldr	r3, [pc, #36]	; (84544 <udd_attach+0x94>)
   84520:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84522:	b92c      	cbnz	r4, 84530 <udd_attach+0x80>
		cpu_irq_enable();
   84524:	4b03      	ldr	r3, [pc, #12]	; (84534 <udd_attach+0x84>)
   84526:	2201      	movs	r2, #1
   84528:	701a      	strb	r2, [r3, #0]
   8452a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8452e:	b662      	cpsie	i
}
   84530:	bd10      	pop	{r4, pc}
   84532:	bf00      	nop
   84534:	20000200 	.word	0x20000200
   84538:	00083919 	.word	0x00083919
   8453c:	00082845 	.word	0x00082845
   84540:	400a4000 	.word	0x400a4000
   84544:	00082879 	.word	0x00082879

00084548 <udd_enable>:
{
   84548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sysclk_enable_usb();
   8454a:	4b20      	ldr	r3, [pc, #128]	; (845cc <udd_enable+0x84>)
   8454c:	4798      	blx	r3
	udd_enable_periph_ck();
   8454e:	201d      	movs	r0, #29
   84550:	4b1f      	ldr	r3, [pc, #124]	; (845d0 <udd_enable+0x88>)
   84552:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84554:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   84558:	b672      	cpsid	i
   8455a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8455e:	4f1d      	ldr	r7, [pc, #116]	; (845d4 <udd_enable+0x8c>)
   84560:	2500      	movs	r5, #0
   84562:	703d      	strb	r5, [r7, #0]
	udd_enable_periph();
   84564:	4c1c      	ldr	r4, [pc, #112]	; (845d8 <udd_enable+0x90>)
   84566:	6823      	ldr	r3, [r4, #0]
   84568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8456c:	6023      	str	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8456e:	4b1b      	ldr	r3, [pc, #108]	; (845dc <udd_enable+0x94>)
   84570:	2250      	movs	r2, #80	; 0x50
   84572:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84576:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8457a:	601a      	str	r2, [r3, #0]
	udd_ep_job_table_reset();
   8457c:	4b18      	ldr	r3, [pc, #96]	; (845e0 <udd_enable+0x98>)
   8457e:	4798      	blx	r3
	udd_high_speed_enable();
   84580:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   84584:	f023 0303 	bic.w	r3, r3, #3
   84588:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8458c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84590:	4b14      	ldr	r3, [pc, #80]	; (845e4 <udd_enable+0x9c>)
   84592:	4798      	blx	r3
	udd_b_idle = false;
   84594:	4b14      	ldr	r3, [pc, #80]	; (845e8 <udd_enable+0xa0>)
   84596:	701d      	strb	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84598:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   8459c:	b672      	cpsid	i
   8459e:	f3bf 8f5f 	dmb	sy
   845a2:	703d      	strb	r5, [r7, #0]
   845a4:	4a11      	ldr	r2, [pc, #68]	; (845ec <udd_enable+0xa4>)
   845a6:	78d3      	ldrb	r3, [r2, #3]
   845a8:	3301      	adds	r3, #1
   845aa:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   845ac:	b921      	cbnz	r1, 845b8 <udd_enable+0x70>
		cpu_irq_enable();
   845ae:	2201      	movs	r2, #1
   845b0:	703a      	strb	r2, [r7, #0]
   845b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   845b6:	b662      	cpsie	i
	udd_attach();
   845b8:	4b0d      	ldr	r3, [pc, #52]	; (845f0 <udd_enable+0xa8>)
   845ba:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   845bc:	b92e      	cbnz	r6, 845ca <udd_enable+0x82>
		cpu_irq_enable();
   845be:	4b05      	ldr	r3, [pc, #20]	; (845d4 <udd_enable+0x8c>)
   845c0:	2201      	movs	r2, #1
   845c2:	701a      	strb	r2, [r3, #0]
   845c4:	f3bf 8f5f 	dmb	sy
   845c8:	b662      	cpsie	i
}
   845ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   845cc:	00082af1 	.word	0x00082af1
   845d0:	00082845 	.word	0x00082845
   845d4:	20000200 	.word	0x20000200
   845d8:	400a4000 	.word	0x400a4000
   845dc:	e000e100 	.word	0xe000e100
   845e0:	00083ded 	.word	0x00083ded
   845e4:	000828bd 	.word	0x000828bd
   845e8:	2000104a 	.word	0x2000104a
   845ec:	20001950 	.word	0x20001950
   845f0:	000844b1 	.word	0x000844b1

000845f4 <udd_detach>:
{
   845f4:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   845f6:	201d      	movs	r0, #29
   845f8:	4b08      	ldr	r3, [pc, #32]	; (8461c <udd_detach+0x28>)
   845fa:	4798      	blx	r3
	udd_detach_device();
   845fc:	4b08      	ldr	r3, [pc, #32]	; (84620 <udd_detach+0x2c>)
   845fe:	681a      	ldr	r2, [r3, #0]
   84600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   84604:	601a      	str	r2, [r3, #0]
   84606:	681a      	ldr	r2, [r3, #0]
   84608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8460c:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   8460e:	201d      	movs	r0, #29
   84610:	4b04      	ldr	r3, [pc, #16]	; (84624 <udd_detach+0x30>)
   84612:	4798      	blx	r3
	udd_sleep_mode(false);
   84614:	2000      	movs	r0, #0
   84616:	4b04      	ldr	r3, [pc, #16]	; (84628 <udd_detach+0x34>)
   84618:	4798      	blx	r3
}
   8461a:	bd08      	pop	{r3, pc}
   8461c:	00082845 	.word	0x00082845
   84620:	400a4000 	.word	0x400a4000
   84624:	00082879 	.word	0x00082879
   84628:	00083919 	.word	0x00083919

0008462c <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   8462c:	4b02      	ldr	r3, [pc, #8]	; (84638 <udd_is_high_speed+0xc>)
   8462e:	6958      	ldr	r0, [r3, #20]
   84630:	f000 0001 	and.w	r0, r0, #1
}
   84634:	4770      	bx	lr
   84636:	bf00      	nop
   84638:	400a4000 	.word	0x400a4000

0008463c <udd_set_address>:
	udd_disable_address();
   8463c:	4b08      	ldr	r3, [pc, #32]	; (84660 <udd_set_address+0x24>)
   8463e:	681a      	ldr	r2, [r3, #0]
   84640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84644:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   84646:	681a      	ldr	r2, [r3, #0]
   84648:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8464c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84650:	4302      	orrs	r2, r0
   84652:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84654:	681a      	ldr	r2, [r3, #0]
   84656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8465a:	601a      	str	r2, [r3, #0]
}
   8465c:	4770      	bx	lr
   8465e:	bf00      	nop
   84660:	400a4000 	.word	0x400a4000

00084664 <udd_getaddress>:
	return udd_get_configured_address();
   84664:	4b02      	ldr	r3, [pc, #8]	; (84670 <udd_getaddress+0xc>)
   84666:	6818      	ldr	r0, [r3, #0]
}
   84668:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8466c:	4770      	bx	lr
   8466e:	bf00      	nop
   84670:	400a4000 	.word	0x400a4000

00084674 <udd_get_frame_number>:
	return udd_frame_number();
   84674:	4b02      	ldr	r3, [pc, #8]	; (84680 <udd_get_frame_number+0xc>)
   84676:	6858      	ldr	r0, [r3, #4]
}
   84678:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   8467c:	4770      	bx	lr
   8467e:	bf00      	nop
   84680:	400a4000 	.word	0x400a4000

00084684 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84684:	4b01      	ldr	r3, [pc, #4]	; (8468c <udd_set_setup_payload+0x8>)
   84686:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84688:	8199      	strh	r1, [r3, #12]
}
   8468a:	4770      	bx	lr
   8468c:	20001958 	.word	0x20001958

00084690 <udd_ep_free>:
{
   84690:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84692:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84696:	2c02      	cmp	r4, #2
   84698:	d900      	bls.n	8469c <udd_ep_free+0xc>
}
   8469a:	bd10      	pop	{r4, pc}
	udd_disable_endpoint(ep_index);
   8469c:	4a0c      	ldr	r2, [pc, #48]	; (846d0 <udd_ep_free+0x40>)
   8469e:	eb02 1344 	add.w	r3, r2, r4, lsl #5
   846a2:	2101      	movs	r1, #1
   846a4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   846a8:	f104 0308 	add.w	r3, r4, #8
   846ac:	015b      	lsls	r3, r3, #5
   846ae:	58d1      	ldr	r1, [r2, r3]
   846b0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   846b4:	50d1      	str	r1, [r2, r3]
	udd_ep_abort_job(ep);
   846b6:	4b07      	ldr	r3, [pc, #28]	; (846d4 <udd_ep_free+0x44>)
   846b8:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   846ba:	3c01      	subs	r4, #1
   846bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   846c0:	4b05      	ldr	r3, [pc, #20]	; (846d8 <udd_ep_free+0x48>)
   846c2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   846c6:	7d23      	ldrb	r3, [r4, #20]
   846c8:	f36f 0382 	bfc	r3, #2, #1
   846cc:	7523      	strb	r3, [r4, #20]
   846ce:	e7e4      	b.n	8469a <udd_ep_free+0xa>
   846d0:	400a4000 	.word	0x400a4000
   846d4:	00083e85 	.word	0x00083e85
   846d8:	20001054 	.word	0x20001054

000846dc <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   846dc:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   846e0:	1e43      	subs	r3, r0, #1
	return (Is_udd_endpoint_stall_requested(ep_index)
   846e2:	0140      	lsls	r0, r0, #5
   846e4:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   846e8:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   846ec:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
			|| ptr_job->stall_requested);
   846f0:	f012 0f20 	tst.w	r2, #32
   846f4:	d10a      	bne.n	8470c <udd_ep_is_halted+0x30>
   846f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   846fa:	4a06      	ldr	r2, [pc, #24]	; (84714 <udd_ep_is_halted+0x38>)
   846fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84700:	7d1b      	ldrb	r3, [r3, #20]
   84702:	f013 0f04 	tst.w	r3, #4
   84706:	d003      	beq.n	84710 <udd_ep_is_halted+0x34>
   84708:	2001      	movs	r0, #1
   8470a:	4770      	bx	lr
   8470c:	2001      	movs	r0, #1
   8470e:	4770      	bx	lr
   84710:	2000      	movs	r0, #0
}
   84712:	4770      	bx	lr
   84714:	20001054 	.word	0x20001054

00084718 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84718:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8471c:	2b02      	cmp	r3, #2
   8471e:	d851      	bhi.n	847c4 <udd_ep_set_halt+0xac>
{
   84720:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   84722:	1e5c      	subs	r4, r3, #1
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84724:	015a      	lsls	r2, r3, #5
   84726:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8472a:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   8472e:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84732:	f012 0f20 	tst.w	r2, #32
   84736:	d147      	bne.n	847c8 <udd_ep_set_halt+0xb0>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84738:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   8473c:	4926      	ldr	r1, [pc, #152]	; (847d8 <udd_ep_set_halt+0xc0>)
   8473e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84742:	7d12      	ldrb	r2, [r2, #20]
   84744:	f012 0f04 	tst.w	r2, #4
   84748:	d141      	bne.n	847ce <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   8474a:	f012 0f01 	tst.w	r2, #1
   8474e:	d140      	bne.n	847d2 <udd_ep_set_halt+0xba>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84750:	f010 0f80 	tst.w	r0, #128	; 0x80
   84754:	d113      	bne.n	8477e <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84756:	015b      	lsls	r3, r3, #5
   84758:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8475c:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84760:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84764:	f022 0202 	bic.w	r2, r2, #2
   84768:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   8476c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84770:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   84774:	2220      	movs	r2, #32
   84776:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   8477a:	2001      	movs	r0, #1
   8477c:	e025      	b.n	847ca <udd_ep_set_halt+0xb2>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8477e:	015a      	lsls	r2, r3, #5
   84780:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84784:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84788:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8478c:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84790:	d0e1      	beq.n	84756 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   84792:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   84796:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   8479a:	7d22      	ldrb	r2, [r4, #20]
   8479c:	f042 0204 	orr.w	r2, r2, #4
   847a0:	7522      	strb	r2, [r4, #20]
			udd_enable_bank_interrupt(ep_index);
   847a2:	4a0e      	ldr	r2, [pc, #56]	; (847dc <udd_ep_set_halt+0xc4>)
   847a4:	f103 0108 	add.w	r1, r3, #8
   847a8:	eb02 1141 	add.w	r1, r2, r1, lsl #5
   847ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   847b0:	6048      	str	r0, [r1, #4]
			udd_enable_endpoint_interrupt(ep_index);
   847b2:	6911      	ldr	r1, [r2, #16]
   847b4:	f44f 7080 	mov.w	r0, #256	; 0x100
   847b8:	fa00 f303 	lsl.w	r3, r0, r3
   847bc:	430b      	orrs	r3, r1
   847be:	6113      	str	r3, [r2, #16]
			return true;
   847c0:	2001      	movs	r0, #1
   847c2:	e002      	b.n	847ca <udd_ep_set_halt+0xb2>
		return false;
   847c4:	2000      	movs	r0, #0
}
   847c6:	4770      	bx	lr
		return true; // Already STALL
   847c8:	2001      	movs	r0, #1
}
   847ca:	bc10      	pop	{r4}
   847cc:	4770      	bx	lr
		return true; // Already STALL
   847ce:	2001      	movs	r0, #1
   847d0:	e7fb      	b.n	847ca <udd_ep_set_halt+0xb2>
		return false; // Job on going, stall impossible
   847d2:	2000      	movs	r0, #0
   847d4:	e7f9      	b.n	847ca <udd_ep_set_halt+0xb2>
   847d6:	bf00      	nop
   847d8:	20001054 	.word	0x20001054
   847dc:	400a4000 	.word	0x400a4000

000847e0 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   847e0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   847e4:	2802      	cmp	r0, #2
   847e6:	d86c      	bhi.n	848c2 <udd_ep_clear_halt+0xe2>
{
   847e8:	b510      	push	{r4, lr}
	ptr_job = &udd_ep_job[ep - 1];
   847ea:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
   847ec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   847f0:	4a36      	ldr	r2, [pc, #216]	; (848cc <udd_ep_clear_halt+0xec>)
   847f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   847f6:	7d12      	ldrb	r2, [r2, #20]
   847f8:	f012 0f04 	tst.w	r2, #4
   847fc:	d017      	beq.n	8482e <udd_ep_clear_halt+0x4e>
		ptr_job->stall_requested = false;
   847fe:	460a      	mov	r2, r1
   84800:	4932      	ldr	r1, [pc, #200]	; (848cc <udd_ep_clear_halt+0xec>)
   84802:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84806:	7d11      	ldrb	r1, [r2, #20]
   84808:	f36f 0182 	bfc	r1, #2, #1
   8480c:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep);
   8480e:	4a30      	ldr	r2, [pc, #192]	; (848d0 <udd_ep_clear_halt+0xf0>)
   84810:	eb02 1140 	add.w	r1, r2, r0, lsl #5
   84814:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   84818:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   8481c:	6911      	ldr	r1, [r2, #16]
   8481e:	f44f 7480 	mov.w	r4, #256	; 0x100
   84822:	4084      	lsls	r4, r0
   84824:	ea21 0104 	bic.w	r1, r1, r4
   84828:	6111      	str	r1, [r2, #16]
		b_stall_cleared = true;
   8482a:	2101      	movs	r1, #1
   8482c:	e000      	b.n	84830 <udd_ep_clear_halt+0x50>
	bool b_stall_cleared = false;
   8482e:	2100      	movs	r1, #0
	if (Is_udd_endpoint_stall_requested(ep)) {
   84830:	0142      	lsls	r2, r0, #5
   84832:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84836:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   8483a:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8483e:	f012 0f20 	tst.w	r2, #32
   84842:	d03a      	beq.n	848ba <udd_ep_clear_halt+0xda>
		if (Is_udd_stall(ep)) {
   84844:	0142      	lsls	r2, r0, #5
   84846:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8484a:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   8484e:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84852:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   84856:	d00b      	beq.n	84870 <udd_ep_clear_halt+0x90>
			udd_ack_stall(ep);
   84858:	0142      	lsls	r2, r0, #5
   8485a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8485e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84866:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
			udd_reset_data_toggle(ep);
   8486a:	2140      	movs	r1, #64	; 0x40
   8486c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   84870:	4a17      	ldr	r2, [pc, #92]	; (848d0 <udd_ep_clear_halt+0xf0>)
   84872:	eb02 1140 	add.w	r1, r2, r0, lsl #5
   84876:	2420      	movs	r4, #32
   84878:	f8c1 4118 	str.w	r4, [r1, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   8487c:	3008      	adds	r0, #8
   8487e:	eb02 1040 	add.w	r0, r2, r0, lsl #5
   84882:	6842      	ldr	r2, [r0, #4]
   84884:	f042 0202 	orr.w	r2, r2, #2
   84888:	6042      	str	r2, [r0, #4]
		if (ptr_job->busy == true) {
   8488a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   8488e:	490f      	ldr	r1, [pc, #60]	; (848cc <udd_ep_clear_halt+0xec>)
   84890:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84894:	7d12      	ldrb	r2, [r2, #20]
   84896:	f012 0f01 	tst.w	r2, #1
   8489a:	d014      	beq.n	848c6 <udd_ep_clear_halt+0xe6>
			ptr_job->busy = false;
   8489c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   848a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   848a4:	7d10      	ldrb	r0, [r2, #20]
   848a6:	f36f 0000 	bfc	r0, #0, #1
   848aa:	7510      	strb	r0, [r2, #20]
			ptr_job->call_nohalt();
   848ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   848b0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   848b4:	4798      	blx	r3
	return true;
   848b6:	2001      	movs	r0, #1
   848b8:	e006      	b.n	848c8 <udd_ep_clear_halt+0xe8>
	if (b_stall_cleared) {
   848ba:	2900      	cmp	r1, #0
   848bc:	d1e5      	bne.n	8488a <udd_ep_clear_halt+0xaa>
	return true;
   848be:	2001      	movs	r0, #1
   848c0:	e002      	b.n	848c8 <udd_ep_clear_halt+0xe8>
		return false;
   848c2:	2000      	movs	r0, #0
}
   848c4:	4770      	bx	lr
	return true;
   848c6:	2001      	movs	r0, #1
}
   848c8:	bd10      	pop	{r4, pc}
   848ca:	bf00      	nop
   848cc:	20001054 	.word	0x20001054
   848d0:	400a4000 	.word	0x400a4000

000848d4 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   848d4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   848d8:	2802      	cmp	r0, #2
   848da:	d869      	bhi.n	849b0 <udd_ep_run+0xdc>
{
   848dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ptr_job = &udd_ep_job[ep - 1];
   848de:	1e45      	subs	r5, r0, #1
	if ((!Is_udd_endpoint_enabled(ep))
   848e0:	0144      	lsls	r4, r0, #5
   848e2:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   848e6:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   848ea:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   848ee:	f014 0f01 	tst.w	r4, #1
   848f2:	d05f      	beq.n	849b4 <udd_ep_run+0xe0>
			|| Is_udd_endpoint_stall_requested(ep)
   848f4:	0144      	lsls	r4, r0, #5
   848f6:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   848fa:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   848fe:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   84902:	f014 0f20 	tst.w	r4, #32
   84906:	d157      	bne.n	849b8 <udd_ep_run+0xe4>
			|| ptr_job->stall_requested) {
   84908:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   8490c:	4e2c      	ldr	r6, [pc, #176]	; (849c0 <udd_ep_run+0xec>)
   8490e:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   84912:	7d24      	ldrb	r4, [r4, #20]
   84914:	f014 0f04 	tst.w	r4, #4
   84918:	d150      	bne.n	849bc <udd_ep_run+0xe8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8491a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   8491e:	b672      	cpsid	i
   84920:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84924:	4c27      	ldr	r4, [pc, #156]	; (849c4 <udd_ep_run+0xf0>)
   84926:	2600      	movs	r6, #0
   84928:	7026      	strb	r6, [r4, #0]
	if (ptr_job->busy == true) {
   8492a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   8492e:	4e24      	ldr	r6, [pc, #144]	; (849c0 <udd_ep_run+0xec>)
   84930:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   84934:	7d24      	ldrb	r4, [r4, #20]
   84936:	f014 0f01 	tst.w	r4, #1
   8493a:	d120      	bne.n	8497e <udd_ep_run+0xaa>
	ptr_job->busy = true;
   8493c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   84940:	4e1f      	ldr	r6, [pc, #124]	; (849c0 <udd_ep_run+0xec>)
   84942:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   84946:	7d26      	ldrb	r6, [r4, #20]
   84948:	f046 0601 	orr.w	r6, r6, #1
   8494c:	7526      	strb	r6, [r4, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8494e:	b92f      	cbnz	r7, 8495c <udd_ep_run+0x88>
		cpu_irq_enable();
   84950:	4c1c      	ldr	r4, [pc, #112]	; (849c4 <udd_ep_run+0xf0>)
   84952:	2601      	movs	r6, #1
   84954:	7026      	strb	r6, [r4, #0]
   84956:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8495a:	b662      	cpsie	i
	ptr_job->buf = buf;
   8495c:	4e18      	ldr	r6, [pc, #96]	; (849c0 <udd_ep_run+0xec>)
   8495e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
   84962:	eb06 04c7 	add.w	r4, r6, r7, lsl #3
   84966:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   84968:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   8496a:	2200      	movs	r2, #0
   8496c:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   8496e:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   84970:	9a06      	ldr	r2, [sp, #24]
   84972:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84976:	b959      	cbnz	r1, 84990 <udd_ep_run+0xbc>
   84978:	b9c3      	cbnz	r3, 849ac <udd_ep_run+0xd8>
   8497a:	2201      	movs	r2, #1
   8497c:	e009      	b.n	84992 <udd_ep_run+0xbe>
	if (cpu_irq_is_enabled_flags(flags))
   8497e:	b92f      	cbnz	r7, 8498c <udd_ep_run+0xb8>
		cpu_irq_enable();
   84980:	4b10      	ldr	r3, [pc, #64]	; (849c4 <udd_ep_run+0xf0>)
   84982:	2201      	movs	r2, #1
   84984:	701a      	strb	r2, [r3, #0]
   84986:	f3bf 8f5f 	dmb	sy
   8498a:	b662      	cpsie	i
		return false; // Job already on going
   8498c:	2000      	movs	r0, #0
   8498e:	e012      	b.n	849b6 <udd_ep_run+0xe2>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84990:	2201      	movs	r2, #1
   84992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   84996:	4b0a      	ldr	r3, [pc, #40]	; (849c0 <udd_ep_run+0xec>)
   84998:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   8499c:	7d2b      	ldrb	r3, [r5, #20]
   8499e:	f362 0341 	bfi	r3, r2, #1, #1
   849a2:	752b      	strb	r3, [r5, #20]
	udd_ep_trans_done(ep);
   849a4:	4b08      	ldr	r3, [pc, #32]	; (849c8 <udd_ep_run+0xf4>)
   849a6:	4798      	blx	r3
	return true;
   849a8:	2001      	movs	r0, #1
   849aa:	e004      	b.n	849b6 <udd_ep_run+0xe2>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   849ac:	2200      	movs	r2, #0
   849ae:	e7f0      	b.n	84992 <udd_ep_run+0xbe>
		return false;
   849b0:	2000      	movs	r0, #0
}
   849b2:	4770      	bx	lr
		return false; // Endpoint is halted
   849b4:	2000      	movs	r0, #0
}
   849b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   849b8:	2000      	movs	r0, #0
   849ba:	e7fc      	b.n	849b6 <udd_ep_run+0xe2>
   849bc:	2000      	movs	r0, #0
   849be:	e7fa      	b.n	849b6 <udd_ep_run+0xe2>
   849c0:	20001054 	.word	0x20001054
   849c4:	20000200 	.word	0x20000200
   849c8:	00083ea9 	.word	0x00083ea9

000849cc <udd_ep_alloc>:
{
   849cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   849d0:	b082      	sub	sp, #8
	ep = ep & USB_EP_ADDR_MASK;
   849d2:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   849d6:	2c02      	cmp	r4, #2
   849d8:	f200 813a 	bhi.w	84c50 <udd_ep_alloc+0x284>
   849dc:	fa4f fc80 	sxtb.w	ip, r0
	if (Is_udd_endpoint_enabled(ep)) {
   849e0:	4625      	mov	r5, r4
   849e2:	0163      	lsls	r3, r4, #5
   849e4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   849e8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   849ec:	f8d3 610c 	ldr.w	r6, [r3, #268]	; 0x10c
   849f0:	f016 0601 	ands.w	r6, r6, #1
   849f4:	f040 8130 	bne.w	84c58 <udd_ep_alloc+0x28c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   849f8:	f001 0803 	and.w	r8, r1, #3
   849fc:	f1b8 0f02 	cmp.w	r8, #2
   84a00:	d014      	beq.n	84a2c <udd_ep_alloc+0x60>
   84a02:	f1b8 0f03 	cmp.w	r8, #3
   84a06:	d02c      	beq.n	84a62 <udd_ep_alloc+0x96>
   84a08:	f1b8 0f01 	cmp.w	r8, #1
   84a0c:	d001      	beq.n	84a12 <udd_ep_alloc+0x46>
   84a0e:	2000      	movs	r0, #0
   84a10:	e11f      	b.n	84c52 <udd_ep_alloc+0x286>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84a12:	b13c      	cbz	r4, 84a24 <udd_ep_alloc+0x58>
   84a14:	2c03      	cmp	r4, #3
   84a16:	d007      	beq.n	84a28 <udd_ep_alloc+0x5c>
   84a18:	2c04      	cmp	r4, #4
   84a1a:	d001      	beq.n	84a20 <udd_ep_alloc+0x54>
   84a1c:	2001      	movs	r0, #1
	switch (nb_bank) {
   84a1e:	e023      	b.n	84a68 <udd_ep_alloc+0x9c>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84a20:	2000      	movs	r0, #0
   84a22:	e021      	b.n	84a68 <udd_ep_alloc+0x9c>
   84a24:	2000      	movs	r0, #0
   84a26:	e01f      	b.n	84a68 <udd_ep_alloc+0x9c>
   84a28:	2000      	movs	r0, #0
   84a2a:	e01d      	b.n	84a68 <udd_ep_alloc+0x9c>
		nb_bank = UDD_BULK_NB_BANK(ep);
   84a2c:	2c05      	cmp	r4, #5
   84a2e:	d006      	beq.n	84a3e <udd_ep_alloc+0x72>
   84a30:	2c85      	cmp	r4, #133	; 0x85
   84a32:	d011      	beq.n	84a58 <udd_ep_alloc+0x8c>
   84a34:	2c06      	cmp	r4, #6
   84a36:	d004      	beq.n	84a42 <udd_ep_alloc+0x76>
   84a38:	f04f 0801 	mov.w	r8, #1
   84a3c:	e001      	b.n	84a42 <udd_ep_alloc+0x76>
   84a3e:	f04f 0803 	mov.w	r8, #3
	switch (nb_bank) {
   84a42:	f1b8 0f02 	cmp.w	r8, #2
   84a46:	d057      	beq.n	84af8 <udd_ep_alloc+0x12c>
   84a48:	f1b8 0f03 	cmp.w	r8, #3
   84a4c:	d056      	beq.n	84afc <udd_ep_alloc+0x130>
   84a4e:	f1b8 0f01 	cmp.w	r8, #1
   84a52:	d004      	beq.n	84a5e <udd_ep_alloc+0x92>
   84a54:	2000      	movs	r0, #0
   84a56:	e0fc      	b.n	84c52 <udd_ep_alloc+0x286>
		nb_bank = UDD_BULK_NB_BANK(ep);
   84a58:	f04f 0803 	mov.w	r8, #3
   84a5c:	e7f1      	b.n	84a42 <udd_ep_alloc+0x76>
	switch (nb_bank) {
   84a5e:	2000      	movs	r0, #0
   84a60:	e002      	b.n	84a68 <udd_ep_alloc+0x9c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   84a62:	2000      	movs	r0, #0
   84a64:	f04f 0801 	mov.w	r8, #1
	if (b_iso_hbw) {
   84a68:	2800      	cmp	r0, #0
   84a6a:	d04f      	beq.n	84b0c <udd_ep_alloc+0x140>
		switch(MaxEndpointSize & (0x3u << 11)) {
   84a6c:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   84a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84a74:	d044      	beq.n	84b00 <udd_ep_alloc+0x134>
   84a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   84a7a:	d144      	bne.n	84b06 <udd_ep_alloc+0x13a>
			nb_tran = 3;
   84a7c:	f04f 0e03 	mov.w	lr, #3
		MaxEndpointSize &= ~(0x3u << 11);
   84a80:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   84a84:	b292      	uxth	r2, r2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84a86:	f105 0308 	add.w	r3, r5, #8
   84a8a:	015b      	lsls	r3, r3, #5
   84a8c:	4f75      	ldr	r7, [pc, #468]	; (84c64 <udd_ep_alloc+0x298>)
   84a8e:	58ff      	ldr	r7, [r7, r3]
   84a90:	f427 777f 	bic.w	r7, r7, #1020	; 0x3fc
   84a94:	f027 0703 	bic.w	r7, r7, #3
   84a98:	010b      	lsls	r3, r1, #4
   84a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
   84a9e:	f1bc 0f00 	cmp.w	ip, #0
   84aa2:	db3a      	blt.n	84b1a <udd_ep_alloc+0x14e>
   84aa4:	4631      	mov	r1, r6
   84aa6:	430b      	orrs	r3, r1
   84aa8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84aac:	d237      	bcs.n	84b1e <udd_ep_alloc+0x152>
   84aae:	2a08      	cmp	r2, #8
   84ab0:	bf38      	it	cc
   84ab2:	2208      	movcc	r2, #8
   84ab4:	0052      	lsls	r2, r2, #1
   84ab6:	3a01      	subs	r2, #1
   84ab8:	fab2 f282 	clz	r2, r2
   84abc:	f1c2 021c 	rsb	r2, r2, #28
   84ac0:	4313      	orrs	r3, r2
   84ac2:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   84ac6:	b108      	cbz	r0, 84acc <udd_ep_alloc+0x100>
   84ac8:	ea4f 260e 	mov.w	r6, lr, lsl #8
   84acc:	4333      	orrs	r3, r6
   84ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
   84ad2:	433b      	orrs	r3, r7
   84ad4:	4963      	ldr	r1, [pc, #396]	; (84c64 <udd_ep_alloc+0x298>)
   84ad6:	f105 0208 	add.w	r2, r5, #8
   84ada:	0152      	lsls	r2, r2, #5
   84adc:	508b      	str	r3, [r1, r2]
	if (!Is_udd_endpoint_mapped(ep)) {
   84ade:	588b      	ldr	r3, [r1, r2]
   84ae0:	2b00      	cmp	r3, #0
   84ae2:	f280 80bb 	bge.w	84c5c <udd_ep_alloc+0x290>
	udd_enable_endpoint(ep);
   84ae6:	f102 2540 	add.w	r5, r2, #1073758208	; 0x40004000
   84aea:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   84aee:	2301      	movs	r3, #1
   84af0:	606b      	str	r3, [r5, #4]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84af2:	2302      	movs	r3, #2
	ep_allocated = 0;
   84af4:	2500      	movs	r5, #0
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84af6:	e017      	b.n	84b28 <udd_ep_alloc+0x15c>
	bool b_iso_hbw = false;
   84af8:	2000      	movs	r0, #0
   84afa:	e7b5      	b.n	84a68 <udd_ep_alloc+0x9c>
   84afc:	2000      	movs	r0, #0
   84afe:	e7b3      	b.n	84a68 <udd_ep_alloc+0x9c>
		switch(MaxEndpointSize & (0x3u << 11)) {
   84b00:	f04f 0e02 	mov.w	lr, #2
   84b04:	e7bc      	b.n	84a80 <udd_ep_alloc+0xb4>
			nb_tran = 1;
   84b06:	f04f 0e01 	mov.w	lr, #1
   84b0a:	e7b9      	b.n	84a80 <udd_ep_alloc+0xb4>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   84b0c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   84b10:	f040 809f 	bne.w	84c52 <udd_ep_alloc+0x286>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   84b14:	f04f 0e00 	mov.w	lr, #0
   84b18:	e7b5      	b.n	84a86 <udd_ep_alloc+0xba>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84b1a:	2108      	movs	r1, #8
   84b1c:	e7c3      	b.n	84aa6 <udd_ep_alloc+0xda>
   84b1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   84b22:	e7c9      	b.n	84ab8 <udd_ep_alloc+0xec>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84b24:	3b01      	subs	r3, #1
   84b26:	b2db      	uxtb	r3, r3
   84b28:	42a3      	cmp	r3, r4
   84b2a:	d339      	bcc.n	84ba0 <udd_ep_alloc+0x1d4>
		if (Is_udd_endpoint_enabled(i)) {
   84b2c:	015a      	lsls	r2, r3, #5
   84b2e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84b32:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84b36:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84b3a:	f012 0f01 	tst.w	r2, #1
   84b3e:	d0f1      	beq.n	84b24 <udd_ep_alloc+0x158>
			bank = udd_get_endpoint_bank(i);
   84b40:	4848      	ldr	r0, [pc, #288]	; (84c64 <udd_ep_alloc+0x298>)
   84b42:	f103 0108 	add.w	r1, r3, #8
   84b46:	0149      	lsls	r1, r1, #5
   84b48:	5842      	ldr	r2, [r0, r1]
   84b4a:	f3c2 1281 	ubfx	r2, r2, #6, #2
			ep_allocated |=  bank << (i * 2);
   84b4e:	005e      	lsls	r6, r3, #1
   84b50:	40b2      	lsls	r2, r6
   84b52:	4315      	orrs	r5, r2
   84b54:	b2ad      	uxth	r5, r5
			udd_disable_endpoint(i);
   84b56:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   84b5a:	2601      	movs	r6, #1
   84b5c:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   84b60:	5842      	ldr	r2, [r0, r1]
   84b62:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84b66:	5042      	str	r2, [r0, r1]
   84b68:	e7dc      	b.n	84b24 <udd_ep_alloc+0x158>
			if (NULL == ptr_job->call_trans) {
   84b6a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   84b6e:	493e      	ldr	r1, [pc, #248]	; (84c68 <udd_ep_alloc+0x29c>)
   84b70:	f851 5032 	ldr.w	r5, [r1, r2, lsl #3]
   84b74:	2d00      	cmp	r5, #0
   84b76:	d073      	beq.n	84c60 <udd_ep_alloc+0x294>
			if (Is_udd_endpoint_in(i)) {
   84b78:	f857 300e 	ldr.w	r3, [r7, lr]
   84b7c:	f013 0f08 	tst.w	r3, #8
   84b80:	d001      	beq.n	84b86 <udd_ep_alloc+0x1ba>
				i |= USB_EP_DIR_IN;
   84b82:	f044 0480 	orr.w	r4, r4, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84b86:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   84b8a:	4a37      	ldr	r2, [pc, #220]	; (84c68 <udd_ep_alloc+0x29c>)
   84b8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84b90:	4622      	mov	r2, r4
   84b92:	68d9      	ldr	r1, [r3, #12]
   84b94:	2001      	movs	r0, #1
   84b96:	47a8      	blx	r5
			return false;
   84b98:	2000      	movs	r0, #0
   84b9a:	e05a      	b.n	84c52 <udd_ep_alloc+0x286>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84b9c:	3401      	adds	r4, #1
   84b9e:	b2e4      	uxtb	r4, r4
   84ba0:	2c02      	cmp	r4, #2
   84ba2:	d853      	bhi.n	84c4c <udd_ep_alloc+0x280>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84ba4:	4623      	mov	r3, r4
   84ba6:	1e60      	subs	r0, r4, #1
		bool b_restart = ptr_job->busy;
   84ba8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   84bac:	4a2e      	ldr	r2, [pc, #184]	; (84c68 <udd_ep_alloc+0x29c>)
   84bae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   84bb2:	7d16      	ldrb	r6, [r2, #20]
   84bb4:	f006 0601 	and.w	r6, r6, #1
		bank = (ep_allocated >> (i * 2)) & 0x03;
   84bb8:	0062      	lsls	r2, r4, #1
   84bba:	fa45 f202 	asr.w	r2, r5, r2
		if (bank == 0) {
   84bbe:	f012 0203 	ands.w	r2, r2, #3
   84bc2:	d0eb      	beq.n	84b9c <udd_ep_alloc+0x1d0>
		ptr_job->busy = false;
   84bc4:	4f28      	ldr	r7, [pc, #160]	; (84c68 <udd_ep_alloc+0x29c>)
   84bc6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   84bca:	7d0f      	ldrb	r7, [r1, #20]
   84bcc:	f36f 0700 	bfc	r7, #0, #1
   84bd0:	750f      	strb	r7, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   84bd2:	4f24      	ldr	r7, [pc, #144]	; (84c64 <udd_ep_alloc+0x298>)
   84bd4:	f104 0108 	add.w	r1, r4, #8
   84bd8:	ea4f 1e41 	mov.w	lr, r1, lsl #5
   84bdc:	eb07 1c41 	add.w	ip, r7, r1, lsl #5
   84be0:	f857 100e 	ldr.w	r1, [r7, lr]
   84be4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   84be8:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   84bec:	f847 200e 	str.w	r2, [r7, lr]
		udd_enable_endpoint(i);
   84bf0:	2201      	movs	r2, #1
   84bf2:	f8cc 2004 	str.w	r2, [ip, #4]
		if (!Is_udd_endpoint_mapped(i)) {
   84bf6:	f857 200e 	ldr.w	r2, [r7, lr]
   84bfa:	2a00      	cmp	r2, #0
   84bfc:	dab5      	bge.n	84b6a <udd_ep_alloc+0x19e>
		udd_enable_endpoint_bank_autoswitch(i);
   84bfe:	3308      	adds	r3, #8
   84c00:	015b      	lsls	r3, r3, #5
   84c02:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84c06:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84c0a:	685a      	ldr	r2, [r3, #4]
   84c0c:	f042 0202 	orr.w	r2, r2, #2
   84c10:	605a      	str	r2, [r3, #4]
		if (b_restart) {
   84c12:	2e00      	cmp	r6, #0
   84c14:	d0c2      	beq.n	84b9c <udd_ep_alloc+0x1d0>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   84c16:	4e14      	ldr	r6, [pc, #80]	; (84c68 <udd_ep_alloc+0x29c>)
   84c18:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   84c1c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   84c20:	6919      	ldr	r1, [r3, #16]
   84c22:	68da      	ldr	r2, [r3, #12]
   84c24:	1a52      	subs	r2, r2, r1
   84c26:	60da      	str	r2, [r3, #12]
					ptr_job->b_shortpacket,
   84c28:	7d19      	ldrb	r1, [r3, #20]
					&ptr_job->buf[ptr_job->buf_cnt],
   84c2a:	685f      	ldr	r7, [r3, #4]
					ptr_job->buf_size
   84c2c:	689b      	ldr	r3, [r3, #8]
			b_restart = udd_ep_run(i,
   84c2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84c32:	f856 0030 	ldr.w	r0, [r6, r0, lsl #3]
   84c36:	9000      	str	r0, [sp, #0]
   84c38:	1a9b      	subs	r3, r3, r2
   84c3a:	443a      	add	r2, r7
   84c3c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   84c40:	4620      	mov	r0, r4
   84c42:	4e0a      	ldr	r6, [pc, #40]	; (84c6c <udd_ep_alloc+0x2a0>)
   84c44:	47b0      	blx	r6
			if (!b_restart) {
   84c46:	2800      	cmp	r0, #0
   84c48:	d1a8      	bne.n	84b9c <udd_ep_alloc+0x1d0>
   84c4a:	e002      	b.n	84c52 <udd_ep_alloc+0x286>
	return true;
   84c4c:	2001      	movs	r0, #1
   84c4e:	e000      	b.n	84c52 <udd_ep_alloc+0x286>
		return false;
   84c50:	2000      	movs	r0, #0
}
   84c52:	b002      	add	sp, #8
   84c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   84c58:	2000      	movs	r0, #0
   84c5a:	e7fa      	b.n	84c52 <udd_ep_alloc+0x286>
		return false;
   84c5c:	2000      	movs	r0, #0
   84c5e:	e7f8      	b.n	84c52 <udd_ep_alloc+0x286>
				return false;
   84c60:	2000      	movs	r0, #0
   84c62:	e7f6      	b.n	84c52 <udd_ep_alloc+0x286>
   84c64:	400a4000 	.word	0x400a4000
   84c68:	20001054 	.word	0x20001054
   84c6c:	000848d5 	.word	0x000848d5

00084c70 <udd_ep_abort>:
{
   84c70:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84c72:	f000 010f 	and.w	r1, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   84c76:	4b15      	ldr	r3, [pc, #84]	; (84ccc <udd_ep_abort+0x5c>)
   84c78:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   84c7c:	2200      	movs	r2, #0
   84c7e:	609a      	str	r2, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   84c80:	f010 0f80 	tst.w	r0, #128	; 0x80
   84c84:	d115      	bne.n	84cb2 <udd_ep_abort+0x42>
	udd_ep_abort_job(ep);
   84c86:	4b12      	ldr	r3, [pc, #72]	; (84cd0 <udd_ep_abort+0x60>)
   84c88:	4798      	blx	r3
}
   84c8a:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   84c8c:	014b      	lsls	r3, r1, #5
   84c8e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84c92:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84c96:	f44f 7400 	mov.w	r4, #512	; 0x200
   84c9a:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   84c9e:	0153      	lsls	r3, r2, #5
   84ca0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84ca4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84ca8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84cac:	f413 7f00 	tst.w	r3, #512	; 0x200
   84cb0:	d1f5      	bne.n	84c9e <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   84cb2:	460a      	mov	r2, r1
   84cb4:	014b      	lsls	r3, r1, #5
   84cb6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84cba:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84cbe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84cc2:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   84cc6:	d1e1      	bne.n	84c8c <udd_ep_abort+0x1c>
   84cc8:	e7dd      	b.n	84c86 <udd_ep_abort+0x16>
   84cca:	bf00      	nop
   84ccc:	400a4300 	.word	0x400a4300
   84cd0:	00083e85 	.word	0x00083e85

00084cd4 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   84cd4:	4a07      	ldr	r2, [pc, #28]	; (84cf4 <udd_test_mode_j+0x20>)
   84cd6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84cda:	f023 0303 	bic.w	r3, r3, #3
   84cde:	f043 0302 	orr.w	r3, r3, #2
   84ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   84ce6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84cea:	f043 0304 	orr.w	r3, r3, #4
   84cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84cf2:	4770      	bx	lr
   84cf4:	400a4000 	.word	0x400a4000

00084cf8 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   84cf8:	4a07      	ldr	r2, [pc, #28]	; (84d18 <udd_test_mode_k+0x20>)
   84cfa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84cfe:	f023 0303 	bic.w	r3, r3, #3
   84d02:	f043 0302 	orr.w	r3, r3, #2
   84d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   84d0a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84d0e:	f043 0308 	orr.w	r3, r3, #8
   84d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84d16:	4770      	bx	lr
   84d18:	400a4000 	.word	0x400a4000

00084d1c <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   84d1c:	4a04      	ldr	r2, [pc, #16]	; (84d30 <udd_test_mode_se0_nak+0x14>)
   84d1e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84d22:	f023 0303 	bic.w	r3, r3, #3
   84d26:	f043 0302 	orr.w	r3, r3, #2
   84d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84d2e:	4770      	bx	lr
   84d30:	400a4000 	.word	0x400a4000

00084d34 <udd_test_mode_packet>:
{
   84d34:	b430      	push	{r4, r5}
   84d36:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   84d38:	466c      	mov	r4, sp
   84d3a:	4d21      	ldr	r5, [pc, #132]	; (84dc0 <udd_test_mode_packet+0x8c>)
   84d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84d48:	e895 0003 	ldmia.w	r5, {r0, r1}
   84d4c:	f844 0b04 	str.w	r0, [r4], #4
   84d50:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   84d52:	4b1c      	ldr	r3, [pc, #112]	; (84dc4 <udd_test_mode_packet+0x90>)
   84d54:	2101      	movs	r1, #1
   84d56:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   84d5a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84d5e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   84d62:	f022 0203 	bic.w	r2, r2, #3
   84d66:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   84d6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84d6e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   84d72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   84d76:	f022 0203 	bic.w	r2, r2, #3
   84d7a:	f042 0202 	orr.w	r2, r2, #2
   84d7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   84d82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   84d86:	f042 0210 	orr.w	r2, r2, #16
   84d8a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   84d8e:	466a      	mov	r2, sp
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84d90:	4b0d      	ldr	r3, [pc, #52]	; (84dc8 <udd_test_mode_packet+0x94>)
	for (i = 0; i < sizeof(test_packet); i++) {
   84d92:	2100      	movs	r1, #0
   84d94:	e005      	b.n	84da2 <udd_test_mode_packet+0x6e>
		*ptr_dest++ = *ptr_src++;
   84d96:	f812 0b01 	ldrb.w	r0, [r2], #1
   84d9a:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   84d9e:	3101      	adds	r1, #1
   84da0:	b2c9      	uxtb	r1, r1
   84da2:	2934      	cmp	r1, #52	; 0x34
   84da4:	d9f7      	bls.n	84d96 <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   84da6:	4b07      	ldr	r3, [pc, #28]	; (84dc4 <udd_test_mode_packet+0x90>)
   84da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84dac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84db4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   84db8:	b00e      	add	sp, #56	; 0x38
   84dba:	bc30      	pop	{r4, r5}
   84dbc:	4770      	bx	lr
   84dbe:	bf00      	nop
   84dc0:	0008bf60 	.word	0x0008bf60
   84dc4:	400a4000 	.word	0x400a4000
   84dc8:	20180000 	.word	0x20180000

00084dcc <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   84dcc:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   84dce:	204f      	movs	r0, #79	; 0x4f
   84dd0:	4c02      	ldr	r4, [pc, #8]	; (84ddc <ui_init+0x10>)
   84dd2:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84dd4:	2050      	movs	r0, #80	; 0x50
   84dd6:	47a0      	blx	r4
	//LED_Off(LED2_GPIO);
}
   84dd8:	bd10      	pop	{r4, pc}
   84dda:	bf00      	nop
   84ddc:	0008233d 	.word	0x0008233d

00084de0 <ui_powerdown>:


void ui_powerdown(void)
{
   84de0:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   84de2:	204f      	movs	r0, #79	; 0x4f
   84de4:	4c02      	ldr	r4, [pc, #8]	; (84df0 <ui_powerdown+0x10>)
   84de6:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84de8:	2050      	movs	r0, #80	; 0x50
   84dea:	47a0      	blx	r4
	
	// Power off FPGA
	//board_sram_pwroff();
}
   84dec:	bd10      	pop	{r4, pc}
   84dee:	bf00      	nop
   84df0:	0008233d 	.word	0x0008233d

00084df4 <ui_wakeup>:

void ui_wakeup(void)
{
   84df4:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   84df6:	204f      	movs	r0, #79	; 0x4f
   84df8:	4b01      	ldr	r3, [pc, #4]	; (84e00 <ui_wakeup+0xc>)
   84dfa:	4798      	blx	r3
	//board_sram_pwron();
}
   84dfc:	bd08      	pop	{r3, pc}
   84dfe:	bf00      	nop
   84e00:	0008237d 	.word	0x0008237d

00084e04 <ui_process>:

void ui_process(uint16_t framenumber)
{
   84e04:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
   84e06:	4c0b      	ldr	r4, [pc, #44]	; (84e34 <ui_process+0x30>)
   84e08:	fba4 3400 	umull	r3, r4, r4, r0
   84e0c:	09a4      	lsrs	r4, r4, #6
   84e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   84e12:	fb03 0414 	mls	r4, r3, r4, r0
   84e16:	b2a4      	uxth	r4, r4
   84e18:	b11c      	cbz	r4, 84e22 <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   84e1a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   84e1e:	d004      	beq.n	84e2a <ui_process+0x26>
	
	if ((framenumber % 512) == 0) {
		// LED_Off(LED1_GPIO);
		//LED_Off(LED2_GPIO);
	}
}
   84e20:	bd10      	pop	{r4, pc}
		LED_On(LED0_GPIO);
   84e22:	204f      	movs	r0, #79	; 0x4f
   84e24:	4b04      	ldr	r3, [pc, #16]	; (84e38 <ui_process+0x34>)
   84e26:	4798      	blx	r3
   84e28:	e7f7      	b.n	84e1a <ui_process+0x16>
		LED_Off(LED0_GPIO);
   84e2a:	204f      	movs	r0, #79	; 0x4f
   84e2c:	4b03      	ldr	r3, [pc, #12]	; (84e3c <ui_process+0x38>)
   84e2e:	4798      	blx	r3
}
   84e30:	e7f6      	b.n	84e20 <ui_process+0x1c>
   84e32:	bf00      	nop
   84e34:	10624dd3 	.word	0x10624dd3
   84e38:	0008237d 	.word	0x0008237d
   84e3c:	0008233d 	.word	0x0008233d

00084e40 <usart_set_sync_master_baudrate>:
		uint32_t baudrate, uint32_t ul_mck)
{
	uint32_t cd;

	/* Calculate clock divider according to the formula in synchronous mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   84e40:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   84e44:	fbb2 f1f1 	udiv	r1, r2, r1

	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   84e48:	1e4a      	subs	r2, r1, #1
   84e4a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   84e4e:	429a      	cmp	r2, r3
   84e50:	d808      	bhi.n	84e64 <usart_set_sync_master_baudrate+0x24>
		return 1;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   84e52:	6201      	str	r1, [r0, #32]

	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   84e54:	6843      	ldr	r3, [r0, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   84e56:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   84e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   84e5e:	6043      	str	r3, [r0, #4]
	return 0;
   84e60:	2000      	movs	r0, #0
   84e62:	4770      	bx	lr
		return 1;
   84e64:	2001      	movs	r0, #1
}
   84e66:	4770      	bx	lr

00084e68 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   84e68:	2340      	movs	r3, #64	; 0x40
   84e6a:	6003      	str	r3, [r0, #0]
}
   84e6c:	4770      	bx	lr

00084e6e <usart_disable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXDIS;
   84e6e:	2380      	movs	r3, #128	; 0x80
   84e70:	6003      	str	r3, [r0, #0]
}
   84e72:	4770      	bx	lr

00084e74 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   84e74:	2388      	movs	r3, #136	; 0x88
   84e76:	6003      	str	r3, [r0, #0]
}
   84e78:	4770      	bx	lr

00084e7a <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   84e7a:	2310      	movs	r3, #16
   84e7c:	6003      	str	r3, [r0, #0]
}
   84e7e:	4770      	bx	lr

00084e80 <usart_disable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXDIS;
   84e80:	2320      	movs	r3, #32
   84e82:	6003      	str	r3, [r0, #0]
}
   84e84:	4770      	bx	lr

00084e86 <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   84e86:	2324      	movs	r3, #36	; 0x24
   84e88:	6003      	str	r3, [r0, #0]
}
   84e8a:	4770      	bx	lr

00084e8c <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   84e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
   84e90:	6003      	str	r3, [r0, #0]
}
   84e92:	4770      	bx	lr

00084e94 <usart_drive_DTR_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
   84e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   84e98:	6003      	str	r3, [r0, #0]
}
   84e9a:	4770      	bx	lr

00084e9c <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   84e9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   84ea0:	6003      	str	r3, [r0, #0]
}
   84ea2:	4770      	bx	lr

00084ea4 <usart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   84ea4:	6940      	ldr	r0, [r0, #20]
}
   84ea6:	f3c0 2040 	ubfx	r0, r0, #9, #1
   84eaa:	4770      	bx	lr

00084eac <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   84eac:	6943      	ldr	r3, [r0, #20]
   84eae:	f013 0f02 	tst.w	r3, #2
   84eb2:	d004      	beq.n	84ebe <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   84eb4:	f3c1 0108 	ubfx	r1, r1, #0, #9
   84eb8:	61c1      	str	r1, [r0, #28]
	return 0;
   84eba:	2000      	movs	r0, #0
   84ebc:	4770      	bx	lr
		return 1;
   84ebe:	2001      	movs	r0, #1
}
   84ec0:	4770      	bx	lr

00084ec2 <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   84ec2:	6943      	ldr	r3, [r0, #20]
   84ec4:	f013 0f02 	tst.w	r3, #2
   84ec8:	d0fb      	beq.n	84ec2 <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   84eca:	f3c1 0108 	ubfx	r1, r1, #0, #9
   84ece:	61c1      	str	r1, [r0, #28]

	return 0;
}
   84ed0:	2000      	movs	r0, #0
   84ed2:	4770      	bx	lr

00084ed4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   84ed4:	6943      	ldr	r3, [r0, #20]
   84ed6:	f013 0f01 	tst.w	r3, #1
   84eda:	d005      	beq.n	84ee8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   84edc:	6983      	ldr	r3, [r0, #24]
   84ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
   84ee2:	600b      	str	r3, [r1, #0]

	return 0;
   84ee4:	2000      	movs	r0, #0
   84ee6:	4770      	bx	lr
		return 1;
   84ee8:	2001      	movs	r0, #1
}
   84eea:	4770      	bx	lr

00084eec <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   84eec:	4b01      	ldr	r3, [pc, #4]	; (84ef4 <usart_disable_writeprotect+0x8>)
   84eee:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
}
   84ef2:	4770      	bx	lr
   84ef4:	55534100 	.word	0x55534100

00084ef8 <usart_reset>:
{
   84ef8:	b510      	push	{r4, lr}
   84efa:	4604      	mov	r4, r0
	usart_disable_writeprotect(p_usart);
   84efc:	4b0a      	ldr	r3, [pc, #40]	; (84f28 <usart_reset+0x30>)
   84efe:	4798      	blx	r3
	p_usart->US_MR = 0;
   84f00:	2300      	movs	r3, #0
   84f02:	6063      	str	r3, [r4, #4]
	p_usart->US_RTOR = 0;
   84f04:	6263      	str	r3, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
   84f06:	62a3      	str	r3, [r4, #40]	; 0x28
	usart_reset_tx(p_usart);
   84f08:	4620      	mov	r0, r4
   84f0a:	4b08      	ldr	r3, [pc, #32]	; (84f2c <usart_reset+0x34>)
   84f0c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   84f0e:	4620      	mov	r0, r4
   84f10:	4b07      	ldr	r3, [pc, #28]	; (84f30 <usart_reset+0x38>)
   84f12:	4798      	blx	r3
	usart_reset_status(p_usart);
   84f14:	4620      	mov	r0, r4
   84f16:	4b07      	ldr	r3, [pc, #28]	; (84f34 <usart_reset+0x3c>)
   84f18:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   84f1a:	4620      	mov	r0, r4
   84f1c:	4b06      	ldr	r3, [pc, #24]	; (84f38 <usart_reset+0x40>)
   84f1e:	4798      	blx	r3
	usart_drive_DTR_pin_high(p_usart);
   84f20:	4620      	mov	r0, r4
   84f22:	4b06      	ldr	r3, [pc, #24]	; (84f3c <usart_reset+0x44>)
   84f24:	4798      	blx	r3
}
   84f26:	bd10      	pop	{r4, pc}
   84f28:	00084eed 	.word	0x00084eed
   84f2c:	00084e75 	.word	0x00084e75
   84f30:	00084e87 	.word	0x00084e87
   84f34:	00084e8d 	.word	0x00084e8d
   84f38:	00084e9d 	.word	0x00084e9d
   84f3c:	00084e95 	.word	0x00084e95

00084f40 <usart_init_sync_master>:
{
   84f40:	b570      	push	{r4, r5, r6, lr}
   84f42:	4604      	mov	r4, r0
   84f44:	460d      	mov	r5, r1
   84f46:	4616      	mov	r6, r2
	usart_reset(p_usart);
   84f48:	4b0f      	ldr	r3, [pc, #60]	; (84f88 <usart_init_sync_master+0x48>)
   84f4a:	4798      	blx	r3
	ul_reg_val = 0;
   84f4c:	4b0f      	ldr	r3, [pc, #60]	; (84f8c <usart_init_sync_master+0x4c>)
   84f4e:	2200      	movs	r2, #0
   84f50:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   84f52:	b1b5      	cbz	r5, 84f82 <usart_init_sync_master+0x42>
   84f54:	4632      	mov	r2, r6
   84f56:	6829      	ldr	r1, [r5, #0]
   84f58:	4620      	mov	r0, r4
   84f5a:	4b0d      	ldr	r3, [pc, #52]	; (84f90 <usart_init_sync_master+0x50>)
   84f5c:	4798      	blx	r3
   84f5e:	b980      	cbnz	r0, 84f82 <usart_init_sync_master+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   84f60:	686b      	ldr	r3, [r5, #4]
   84f62:	68aa      	ldr	r2, [r5, #8]
   84f64:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   84f66:	692a      	ldr	r2, [r5, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   84f68:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   84f6a:	68ea      	ldr	r2, [r5, #12]
   84f6c:	4313      	orrs	r3, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   84f6e:	4a07      	ldr	r2, [pc, #28]	; (84f8c <usart_init_sync_master+0x4c>)
   84f70:	6811      	ldr	r1, [r2, #0]
   84f72:	430b      	orrs	r3, r1
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   84f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   84f78:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   84f7a:	6862      	ldr	r2, [r4, #4]
   84f7c:	4313      	orrs	r3, r2
   84f7e:	6063      	str	r3, [r4, #4]
	return 0;
   84f80:	e000      	b.n	84f84 <usart_init_sync_master+0x44>
		return 1;
   84f82:	2001      	movs	r0, #1
}
   84f84:	bd70      	pop	{r4, r5, r6, pc}
   84f86:	bf00      	nop
   84f88:	00084ef9 	.word	0x00084ef9
   84f8c:	20001084 	.word	0x20001084
   84f90:	00084e41 	.word	0x00084e41

00084f94 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   84f94:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84f96:	3801      	subs	r0, #1
   84f98:	2802      	cmp	r0, #2
   84f9a:	d80f      	bhi.n	84fbc <_write+0x28>
   84f9c:	460c      	mov	r4, r1
   84f9e:	4615      	mov	r5, r2
	int nChars = 0;
   84fa0:	2600      	movs	r6, #0
		return -1;
	}

	for (; len != 0; --len) {
   84fa2:	b185      	cbz	r5, 84fc6 <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84fa4:	4b09      	ldr	r3, [pc, #36]	; (84fcc <_write+0x38>)
   84fa6:	6818      	ldr	r0, [r3, #0]
   84fa8:	4b09      	ldr	r3, [pc, #36]	; (84fd0 <_write+0x3c>)
   84faa:	681b      	ldr	r3, [r3, #0]
   84fac:	f814 1b01 	ldrb.w	r1, [r4], #1
   84fb0:	4798      	blx	r3
   84fb2:	2800      	cmp	r0, #0
   84fb4:	db05      	blt.n	84fc2 <_write+0x2e>
			return -1;
		}
		++nChars;
   84fb6:	3601      	adds	r6, #1
	for (; len != 0; --len) {
   84fb8:	3d01      	subs	r5, #1
   84fba:	e7f2      	b.n	84fa2 <_write+0xe>
		return -1;
   84fbc:	f04f 36ff 	mov.w	r6, #4294967295
   84fc0:	e001      	b.n	84fc6 <_write+0x32>
			return -1;
   84fc2:	f04f 36ff 	mov.w	r6, #4294967295
	}
	return nChars;
}
   84fc6:	4630      	mov	r0, r6
   84fc8:	bd70      	pop	{r4, r5, r6, pc}
   84fca:	bf00      	nop
   84fcc:	20001974 	.word	0x20001974
   84fd0:	20001970 	.word	0x20001970

00084fd4 <__libc_init_array>:
   84fd4:	b570      	push	{r4, r5, r6, lr}
   84fd6:	4e0d      	ldr	r6, [pc, #52]	; (8500c <__libc_init_array+0x38>)
   84fd8:	4d0d      	ldr	r5, [pc, #52]	; (85010 <__libc_init_array+0x3c>)
   84fda:	1b76      	subs	r6, r6, r5
   84fdc:	10b6      	asrs	r6, r6, #2
   84fde:	d006      	beq.n	84fee <__libc_init_array+0x1a>
   84fe0:	2400      	movs	r4, #0
   84fe2:	f855 3b04 	ldr.w	r3, [r5], #4
   84fe6:	3401      	adds	r4, #1
   84fe8:	4798      	blx	r3
   84fea:	42a6      	cmp	r6, r4
   84fec:	d1f9      	bne.n	84fe2 <__libc_init_array+0xe>
   84fee:	4e09      	ldr	r6, [pc, #36]	; (85014 <__libc_init_array+0x40>)
   84ff0:	4d09      	ldr	r5, [pc, #36]	; (85018 <__libc_init_array+0x44>)
   84ff2:	f007 f9cd 	bl	8c390 <_init>
   84ff6:	1b76      	subs	r6, r6, r5
   84ff8:	10b6      	asrs	r6, r6, #2
   84ffa:	d006      	beq.n	8500a <__libc_init_array+0x36>
   84ffc:	2400      	movs	r4, #0
   84ffe:	f855 3b04 	ldr.w	r3, [r5], #4
   85002:	3401      	adds	r4, #1
   85004:	4798      	blx	r3
   85006:	42a6      	cmp	r6, r4
   85008:	d1f9      	bne.n	84ffe <__libc_init_array+0x2a>
   8500a:	bd70      	pop	{r4, r5, r6, pc}
   8500c:	0008c39c 	.word	0x0008c39c
   85010:	0008c39c 	.word	0x0008c39c
   85014:	0008c3a4 	.word	0x0008c3a4
   85018:	0008c39c 	.word	0x0008c39c

0008501c <iprintf>:
   8501c:	b40f      	push	{r0, r1, r2, r3}
   8501e:	b500      	push	{lr}
   85020:	4907      	ldr	r1, [pc, #28]	; (85040 <iprintf+0x24>)
   85022:	b083      	sub	sp, #12
   85024:	ab04      	add	r3, sp, #16
   85026:	6808      	ldr	r0, [r1, #0]
   85028:	f853 2b04 	ldr.w	r2, [r3], #4
   8502c:	6881      	ldr	r1, [r0, #8]
   8502e:	9301      	str	r3, [sp, #4]
   85030:	f002 f80e 	bl	87050 <_vfiprintf_r>
   85034:	b003      	add	sp, #12
   85036:	f85d eb04 	ldr.w	lr, [sp], #4
   8503a:	b004      	add	sp, #16
   8503c:	4770      	bx	lr
   8503e:	bf00      	nop
   85040:	200003c8 	.word	0x200003c8

00085044 <memcpy>:
   85044:	4684      	mov	ip, r0
   85046:	ea41 0300 	orr.w	r3, r1, r0
   8504a:	f013 0303 	ands.w	r3, r3, #3
   8504e:	d149      	bne.n	850e4 <memcpy+0xa0>
   85050:	3a40      	subs	r2, #64	; 0x40
   85052:	d323      	bcc.n	8509c <memcpy+0x58>
   85054:	680b      	ldr	r3, [r1, #0]
   85056:	6003      	str	r3, [r0, #0]
   85058:	684b      	ldr	r3, [r1, #4]
   8505a:	6043      	str	r3, [r0, #4]
   8505c:	688b      	ldr	r3, [r1, #8]
   8505e:	6083      	str	r3, [r0, #8]
   85060:	68cb      	ldr	r3, [r1, #12]
   85062:	60c3      	str	r3, [r0, #12]
   85064:	690b      	ldr	r3, [r1, #16]
   85066:	6103      	str	r3, [r0, #16]
   85068:	694b      	ldr	r3, [r1, #20]
   8506a:	6143      	str	r3, [r0, #20]
   8506c:	698b      	ldr	r3, [r1, #24]
   8506e:	6183      	str	r3, [r0, #24]
   85070:	69cb      	ldr	r3, [r1, #28]
   85072:	61c3      	str	r3, [r0, #28]
   85074:	6a0b      	ldr	r3, [r1, #32]
   85076:	6203      	str	r3, [r0, #32]
   85078:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8507a:	6243      	str	r3, [r0, #36]	; 0x24
   8507c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8507e:	6283      	str	r3, [r0, #40]	; 0x28
   85080:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85082:	62c3      	str	r3, [r0, #44]	; 0x2c
   85084:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85086:	6303      	str	r3, [r0, #48]	; 0x30
   85088:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8508a:	6343      	str	r3, [r0, #52]	; 0x34
   8508c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8508e:	6383      	str	r3, [r0, #56]	; 0x38
   85090:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85092:	63c3      	str	r3, [r0, #60]	; 0x3c
   85094:	3040      	adds	r0, #64	; 0x40
   85096:	3140      	adds	r1, #64	; 0x40
   85098:	3a40      	subs	r2, #64	; 0x40
   8509a:	d2db      	bcs.n	85054 <memcpy+0x10>
   8509c:	3230      	adds	r2, #48	; 0x30
   8509e:	d30b      	bcc.n	850b8 <memcpy+0x74>
   850a0:	680b      	ldr	r3, [r1, #0]
   850a2:	6003      	str	r3, [r0, #0]
   850a4:	684b      	ldr	r3, [r1, #4]
   850a6:	6043      	str	r3, [r0, #4]
   850a8:	688b      	ldr	r3, [r1, #8]
   850aa:	6083      	str	r3, [r0, #8]
   850ac:	68cb      	ldr	r3, [r1, #12]
   850ae:	60c3      	str	r3, [r0, #12]
   850b0:	3010      	adds	r0, #16
   850b2:	3110      	adds	r1, #16
   850b4:	3a10      	subs	r2, #16
   850b6:	d2f3      	bcs.n	850a0 <memcpy+0x5c>
   850b8:	320c      	adds	r2, #12
   850ba:	d305      	bcc.n	850c8 <memcpy+0x84>
   850bc:	f851 3b04 	ldr.w	r3, [r1], #4
   850c0:	f840 3b04 	str.w	r3, [r0], #4
   850c4:	3a04      	subs	r2, #4
   850c6:	d2f9      	bcs.n	850bc <memcpy+0x78>
   850c8:	3204      	adds	r2, #4
   850ca:	d008      	beq.n	850de <memcpy+0x9a>
   850cc:	07d2      	lsls	r2, r2, #31
   850ce:	bf1c      	itt	ne
   850d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   850d4:	f800 3b01 	strbne.w	r3, [r0], #1
   850d8:	d301      	bcc.n	850de <memcpy+0x9a>
   850da:	880b      	ldrh	r3, [r1, #0]
   850dc:	8003      	strh	r3, [r0, #0]
   850de:	4660      	mov	r0, ip
   850e0:	4770      	bx	lr
   850e2:	bf00      	nop
   850e4:	2a08      	cmp	r2, #8
   850e6:	d313      	bcc.n	85110 <memcpy+0xcc>
   850e8:	078b      	lsls	r3, r1, #30
   850ea:	d0b1      	beq.n	85050 <memcpy+0xc>
   850ec:	f010 0303 	ands.w	r3, r0, #3
   850f0:	d0ae      	beq.n	85050 <memcpy+0xc>
   850f2:	f1c3 0304 	rsb	r3, r3, #4
   850f6:	1ad2      	subs	r2, r2, r3
   850f8:	07db      	lsls	r3, r3, #31
   850fa:	bf1c      	itt	ne
   850fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85100:	f800 3b01 	strbne.w	r3, [r0], #1
   85104:	d3a4      	bcc.n	85050 <memcpy+0xc>
   85106:	f831 3b02 	ldrh.w	r3, [r1], #2
   8510a:	f820 3b02 	strh.w	r3, [r0], #2
   8510e:	e79f      	b.n	85050 <memcpy+0xc>
   85110:	3a04      	subs	r2, #4
   85112:	d3d9      	bcc.n	850c8 <memcpy+0x84>
   85114:	3a01      	subs	r2, #1
   85116:	f811 3b01 	ldrb.w	r3, [r1], #1
   8511a:	f800 3b01 	strb.w	r3, [r0], #1
   8511e:	d2f9      	bcs.n	85114 <memcpy+0xd0>
   85120:	780b      	ldrb	r3, [r1, #0]
   85122:	7003      	strb	r3, [r0, #0]
   85124:	784b      	ldrb	r3, [r1, #1]
   85126:	7043      	strb	r3, [r0, #1]
   85128:	788b      	ldrb	r3, [r1, #2]
   8512a:	7083      	strb	r3, [r0, #2]
   8512c:	4660      	mov	r0, ip
   8512e:	4770      	bx	lr

00085130 <memset>:
   85130:	b4f0      	push	{r4, r5, r6, r7}
   85132:	0786      	lsls	r6, r0, #30
   85134:	d046      	beq.n	851c4 <memset+0x94>
   85136:	1e54      	subs	r4, r2, #1
   85138:	2a00      	cmp	r2, #0
   8513a:	d03c      	beq.n	851b6 <memset+0x86>
   8513c:	4603      	mov	r3, r0
   8513e:	b2ca      	uxtb	r2, r1
   85140:	e001      	b.n	85146 <memset+0x16>
   85142:	3c01      	subs	r4, #1
   85144:	d337      	bcc.n	851b6 <memset+0x86>
   85146:	f803 2b01 	strb.w	r2, [r3], #1
   8514a:	079d      	lsls	r5, r3, #30
   8514c:	d1f9      	bne.n	85142 <memset+0x12>
   8514e:	2c03      	cmp	r4, #3
   85150:	d92a      	bls.n	851a8 <memset+0x78>
   85152:	b2cd      	uxtb	r5, r1
   85154:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85158:	2c0f      	cmp	r4, #15
   8515a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8515e:	d934      	bls.n	851ca <memset+0x9a>
   85160:	f1a4 0210 	sub.w	r2, r4, #16
   85164:	f022 0c0f 	bic.w	ip, r2, #15
   85168:	f103 0720 	add.w	r7, r3, #32
   8516c:	0916      	lsrs	r6, r2, #4
   8516e:	4467      	add	r7, ip
   85170:	f103 0210 	add.w	r2, r3, #16
   85174:	e942 5504 	strd	r5, r5, [r2, #-16]
   85178:	e942 5502 	strd	r5, r5, [r2, #-8]
   8517c:	3210      	adds	r2, #16
   8517e:	42ba      	cmp	r2, r7
   85180:	d1f8      	bne.n	85174 <memset+0x44>
   85182:	1c72      	adds	r2, r6, #1
   85184:	f014 0f0c 	tst.w	r4, #12
   85188:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   8518c:	f004 060f 	and.w	r6, r4, #15
   85190:	d013      	beq.n	851ba <memset+0x8a>
   85192:	1f33      	subs	r3, r6, #4
   85194:	f023 0303 	bic.w	r3, r3, #3
   85198:	3304      	adds	r3, #4
   8519a:	4413      	add	r3, r2
   8519c:	f842 5b04 	str.w	r5, [r2], #4
   851a0:	4293      	cmp	r3, r2
   851a2:	d1fb      	bne.n	8519c <memset+0x6c>
   851a4:	f006 0403 	and.w	r4, r6, #3
   851a8:	b12c      	cbz	r4, 851b6 <memset+0x86>
   851aa:	b2ca      	uxtb	r2, r1
   851ac:	441c      	add	r4, r3
   851ae:	f803 2b01 	strb.w	r2, [r3], #1
   851b2:	429c      	cmp	r4, r3
   851b4:	d1fb      	bne.n	851ae <memset+0x7e>
   851b6:	bcf0      	pop	{r4, r5, r6, r7}
   851b8:	4770      	bx	lr
   851ba:	4634      	mov	r4, r6
   851bc:	4613      	mov	r3, r2
   851be:	2c00      	cmp	r4, #0
   851c0:	d1f3      	bne.n	851aa <memset+0x7a>
   851c2:	e7f8      	b.n	851b6 <memset+0x86>
   851c4:	4614      	mov	r4, r2
   851c6:	4603      	mov	r3, r0
   851c8:	e7c1      	b.n	8514e <memset+0x1e>
   851ca:	461a      	mov	r2, r3
   851cc:	4626      	mov	r6, r4
   851ce:	e7e0      	b.n	85192 <memset+0x62>

000851d0 <setbuf>:
   851d0:	2900      	cmp	r1, #0
   851d2:	bf0c      	ite	eq
   851d4:	2202      	moveq	r2, #2
   851d6:	2200      	movne	r2, #0
   851d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   851dc:	f000 b800 	b.w	851e0 <setvbuf>

000851e0 <setvbuf>:
   851e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   851e4:	4d65      	ldr	r5, [pc, #404]	; (8537c <setvbuf+0x19c>)
   851e6:	4604      	mov	r4, r0
   851e8:	f8d5 9000 	ldr.w	r9, [r5]
   851ec:	460f      	mov	r7, r1
   851ee:	4690      	mov	r8, r2
   851f0:	461e      	mov	r6, r3
   851f2:	b083      	sub	sp, #12
   851f4:	f1b9 0f00 	cmp.w	r9, #0
   851f8:	d003      	beq.n	85202 <setvbuf+0x22>
   851fa:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   851fe:	2b00      	cmp	r3, #0
   85200:	d079      	beq.n	852f6 <setvbuf+0x116>
   85202:	f1b8 0f02 	cmp.w	r8, #2
   85206:	d006      	beq.n	85216 <setvbuf+0x36>
   85208:	f1b8 0f01 	cmp.w	r8, #1
   8520c:	f200 80a3 	bhi.w	85356 <setvbuf+0x176>
   85210:	2e00      	cmp	r6, #0
   85212:	f2c0 80a0 	blt.w	85356 <setvbuf+0x176>
   85216:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85218:	07d9      	lsls	r1, r3, #31
   8521a:	d552      	bpl.n	852c2 <setvbuf+0xe2>
   8521c:	4621      	mov	r1, r4
   8521e:	4648      	mov	r0, r9
   85220:	f003 fef6 	bl	89010 <_fflush_r>
   85224:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85226:	b141      	cbz	r1, 8523a <setvbuf+0x5a>
   85228:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8522c:	4299      	cmp	r1, r3
   8522e:	d002      	beq.n	85236 <setvbuf+0x56>
   85230:	4648      	mov	r0, r9
   85232:	f004 f86d 	bl	89310 <_free_r>
   85236:	2300      	movs	r3, #0
   85238:	6323      	str	r3, [r4, #48]	; 0x30
   8523a:	2300      	movs	r3, #0
   8523c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   85240:	61a3      	str	r3, [r4, #24]
   85242:	6063      	str	r3, [r4, #4]
   85244:	062b      	lsls	r3, r5, #24
   85246:	d465      	bmi.n	85314 <setvbuf+0x134>
   85248:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   8524c:	f025 0503 	bic.w	r5, r5, #3
   85250:	f1b8 0f02 	cmp.w	r8, #2
   85254:	81a5      	strh	r5, [r4, #12]
   85256:	d064      	beq.n	85322 <setvbuf+0x142>
   85258:	ab01      	add	r3, sp, #4
   8525a:	466a      	mov	r2, sp
   8525c:	4621      	mov	r1, r4
   8525e:	4648      	mov	r0, r9
   85260:	f004 fb08 	bl	89874 <__swhatbuf_r>
   85264:	89a3      	ldrh	r3, [r4, #12]
   85266:	4318      	orrs	r0, r3
   85268:	81a0      	strh	r0, [r4, #12]
   8526a:	2e00      	cmp	r6, #0
   8526c:	d030      	beq.n	852d0 <setvbuf+0xf0>
   8526e:	2f00      	cmp	r7, #0
   85270:	d02f      	beq.n	852d2 <setvbuf+0xf2>
   85272:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   85276:	2b00      	cmp	r3, #0
   85278:	d039      	beq.n	852ee <setvbuf+0x10e>
   8527a:	9b00      	ldr	r3, [sp, #0]
   8527c:	e9c4 7604 	strd	r7, r6, [r4, #16]
   85280:	42b3      	cmp	r3, r6
   85282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85286:	6027      	str	r7, [r4, #0]
   85288:	bf1c      	itt	ne
   8528a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   8528e:	81a3      	strhne	r3, [r4, #12]
   85290:	f1b8 0f01 	cmp.w	r8, #1
   85294:	bf04      	itt	eq
   85296:	f043 0301 	orreq.w	r3, r3, #1
   8529a:	81a3      	strheq	r3, [r4, #12]
   8529c:	b29a      	uxth	r2, r3
   8529e:	f013 0308 	ands.w	r3, r3, #8
   852a2:	d02c      	beq.n	852fe <setvbuf+0x11e>
   852a4:	07d1      	lsls	r1, r2, #31
   852a6:	d554      	bpl.n	85352 <setvbuf+0x172>
   852a8:	2100      	movs	r1, #0
   852aa:	4276      	negs	r6, r6
   852ac:	61a6      	str	r6, [r4, #24]
   852ae:	6e66      	ldr	r6, [r4, #100]	; 0x64
   852b0:	60a1      	str	r1, [r4, #8]
   852b2:	f016 0601 	ands.w	r6, r6, #1
   852b6:	d027      	beq.n	85308 <setvbuf+0x128>
   852b8:	2600      	movs	r6, #0
   852ba:	4630      	mov	r0, r6
   852bc:	b003      	add	sp, #12
   852be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   852c2:	89a3      	ldrh	r3, [r4, #12]
   852c4:	059a      	lsls	r2, r3, #22
   852c6:	d4a9      	bmi.n	8521c <setvbuf+0x3c>
   852c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   852ca:	f004 facf 	bl	8986c <__retarget_lock_acquire_recursive>
   852ce:	e7a5      	b.n	8521c <setvbuf+0x3c>
   852d0:	9e00      	ldr	r6, [sp, #0]
   852d2:	4630      	mov	r0, r6
   852d4:	f004 fb46 	bl	89964 <malloc>
   852d8:	4607      	mov	r7, r0
   852da:	2800      	cmp	r0, #0
   852dc:	d03e      	beq.n	8535c <setvbuf+0x17c>
   852de:	89a3      	ldrh	r3, [r4, #12]
   852e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   852e4:	81a3      	strh	r3, [r4, #12]
   852e6:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   852ea:	2b00      	cmp	r3, #0
   852ec:	d1c5      	bne.n	8527a <setvbuf+0x9a>
   852ee:	4648      	mov	r0, r9
   852f0:	f003 feea 	bl	890c8 <__sinit>
   852f4:	e7c1      	b.n	8527a <setvbuf+0x9a>
   852f6:	4648      	mov	r0, r9
   852f8:	f003 fee6 	bl	890c8 <__sinit>
   852fc:	e781      	b.n	85202 <setvbuf+0x22>
   852fe:	60a3      	str	r3, [r4, #8]
   85300:	6e66      	ldr	r6, [r4, #100]	; 0x64
   85302:	f016 0601 	ands.w	r6, r6, #1
   85306:	d1d7      	bne.n	852b8 <setvbuf+0xd8>
   85308:	0593      	lsls	r3, r2, #22
   8530a:	d51b      	bpl.n	85344 <setvbuf+0x164>
   8530c:	4630      	mov	r0, r6
   8530e:	b003      	add	sp, #12
   85310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85314:	4648      	mov	r0, r9
   85316:	6921      	ldr	r1, [r4, #16]
   85318:	f003 fffa 	bl	89310 <_free_r>
   8531c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   85320:	e792      	b.n	85248 <setvbuf+0x68>
   85322:	2600      	movs	r6, #0
   85324:	2300      	movs	r3, #0
   85326:	2101      	movs	r1, #1
   85328:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8532a:	f045 0502 	orr.w	r5, r5, #2
   8532e:	60a3      	str	r3, [r4, #8]
   85330:	07d7      	lsls	r7, r2, #31
   85332:	f104 0343 	add.w	r3, r4, #67	; 0x43
   85336:	81a5      	strh	r5, [r4, #12]
   85338:	6161      	str	r1, [r4, #20]
   8533a:	6023      	str	r3, [r4, #0]
   8533c:	6123      	str	r3, [r4, #16]
   8533e:	d4e5      	bmi.n	8530c <setvbuf+0x12c>
   85340:	05a8      	lsls	r0, r5, #22
   85342:	d4e3      	bmi.n	8530c <setvbuf+0x12c>
   85344:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85346:	f004 fa93 	bl	89870 <__retarget_lock_release_recursive>
   8534a:	4630      	mov	r0, r6
   8534c:	b003      	add	sp, #12
   8534e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85352:	60a6      	str	r6, [r4, #8]
   85354:	e7d4      	b.n	85300 <setvbuf+0x120>
   85356:	f04f 36ff 	mov.w	r6, #4294967295
   8535a:	e7d7      	b.n	8530c <setvbuf+0x12c>
   8535c:	9d00      	ldr	r5, [sp, #0]
   8535e:	42b5      	cmp	r5, r6
   85360:	d004      	beq.n	8536c <setvbuf+0x18c>
   85362:	4628      	mov	r0, r5
   85364:	f004 fafe 	bl	89964 <malloc>
   85368:	4607      	mov	r7, r0
   8536a:	b920      	cbnz	r0, 85376 <setvbuf+0x196>
   8536c:	f04f 36ff 	mov.w	r6, #4294967295
   85370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   85374:	e7d6      	b.n	85324 <setvbuf+0x144>
   85376:	462e      	mov	r6, r5
   85378:	e7b1      	b.n	852de <setvbuf+0xfe>
   8537a:	bf00      	nop
   8537c:	200003c8 	.word	0x200003c8

00085380 <sprintf>:
   85380:	b40e      	push	{r1, r2, r3}
   85382:	4601      	mov	r1, r0
   85384:	b530      	push	{r4, r5, lr}
   85386:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8538a:	b09c      	sub	sp, #112	; 0x70
   8538c:	ab1f      	add	r3, sp, #124	; 0x7c
   8538e:	480b      	ldr	r0, [pc, #44]	; (853bc <sprintf+0x3c>)
   85390:	f853 2b04 	ldr.w	r2, [r3], #4
   85394:	4d0a      	ldr	r5, [pc, #40]	; (853c0 <sprintf+0x40>)
   85396:	9102      	str	r1, [sp, #8]
   85398:	9106      	str	r1, [sp, #24]
   8539a:	6800      	ldr	r0, [r0, #0]
   8539c:	a902      	add	r1, sp, #8
   8539e:	9301      	str	r3, [sp, #4]
   853a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   853a4:	9407      	str	r4, [sp, #28]
   853a6:	f000 f86f 	bl	85488 <_svfprintf_r>
   853aa:	2200      	movs	r2, #0
   853ac:	9b02      	ldr	r3, [sp, #8]
   853ae:	701a      	strb	r2, [r3, #0]
   853b0:	b01c      	add	sp, #112	; 0x70
   853b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   853b6:	b003      	add	sp, #12
   853b8:	4770      	bx	lr
   853ba:	bf00      	nop
   853bc:	200003c8 	.word	0x200003c8
   853c0:	ffff0208 	.word	0xffff0208

000853c4 <strlen>:
   853c4:	f020 0103 	bic.w	r1, r0, #3
   853c8:	f010 0003 	ands.w	r0, r0, #3
   853cc:	f1c0 0000 	rsb	r0, r0, #0
   853d0:	f851 3b04 	ldr.w	r3, [r1], #4
   853d4:	f100 0c04 	add.w	ip, r0, #4
   853d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   853dc:	f06f 0200 	mvn.w	r2, #0
   853e0:	bf1c      	itt	ne
   853e2:	fa22 f20c 	lsrne.w	r2, r2, ip
   853e6:	4313      	orrne	r3, r2
   853e8:	f04f 0c01 	mov.w	ip, #1
   853ec:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   853f0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   853f4:	eba3 020c 	sub.w	r2, r3, ip
   853f8:	ea22 0203 	bic.w	r2, r2, r3
   853fc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85400:	bf04      	itt	eq
   85402:	f851 3b04 	ldreq.w	r3, [r1], #4
   85406:	3004      	addeq	r0, #4
   85408:	d0f4      	beq.n	853f4 <strlen+0x30>
   8540a:	f1c2 0100 	rsb	r1, r2, #0
   8540e:	ea02 0201 	and.w	r2, r2, r1
   85412:	fab2 f282 	clz	r2, r2
   85416:	f1c2 021f 	rsb	r2, r2, #31
   8541a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8541e:	4770      	bx	lr

00085420 <strncpy>:
   85420:	b470      	push	{r4, r5, r6}
   85422:	ea40 0401 	orr.w	r4, r0, r1
   85426:	07a3      	lsls	r3, r4, #30
   85428:	d122      	bne.n	85470 <strncpy+0x50>
   8542a:	2a03      	cmp	r2, #3
   8542c:	d920      	bls.n	85470 <strncpy+0x50>
   8542e:	460b      	mov	r3, r1
   85430:	4604      	mov	r4, r0
   85432:	4619      	mov	r1, r3
   85434:	f853 6b04 	ldr.w	r6, [r3], #4
   85438:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8543c:	ea25 0506 	bic.w	r5, r5, r6
   85440:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   85444:	d115      	bne.n	85472 <strncpy+0x52>
   85446:	3a04      	subs	r2, #4
   85448:	2a03      	cmp	r2, #3
   8544a:	4619      	mov	r1, r3
   8544c:	f844 6b04 	str.w	r6, [r4], #4
   85450:	d8ef      	bhi.n	85432 <strncpy+0x12>
   85452:	1e4d      	subs	r5, r1, #1
   85454:	b152      	cbz	r2, 8546c <strncpy+0x4c>
   85456:	4623      	mov	r3, r4
   85458:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8545c:	1e56      	subs	r6, r2, #1
   8545e:	f803 1b01 	strb.w	r1, [r3], #1
   85462:	b141      	cbz	r1, 85476 <strncpy+0x56>
   85464:	4632      	mov	r2, r6
   85466:	461c      	mov	r4, r3
   85468:	2a00      	cmp	r2, #0
   8546a:	d1f4      	bne.n	85456 <strncpy+0x36>
   8546c:	bc70      	pop	{r4, r5, r6}
   8546e:	4770      	bx	lr
   85470:	4604      	mov	r4, r0
   85472:	1e4d      	subs	r5, r1, #1
   85474:	e7ee      	b.n	85454 <strncpy+0x34>
   85476:	4422      	add	r2, r4
   85478:	2e00      	cmp	r6, #0
   8547a:	d0f7      	beq.n	8546c <strncpy+0x4c>
   8547c:	f803 1b01 	strb.w	r1, [r3], #1
   85480:	4293      	cmp	r3, r2
   85482:	d1fb      	bne.n	8547c <strncpy+0x5c>
   85484:	bc70      	pop	{r4, r5, r6}
   85486:	4770      	bx	lr

00085488 <_svfprintf_r>:
   85488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8548c:	b0d7      	sub	sp, #348	; 0x15c
   8548e:	468b      	mov	fp, r1
   85490:	4617      	mov	r7, r2
   85492:	930e      	str	r3, [sp, #56]	; 0x38
   85494:	4681      	mov	r9, r0
   85496:	f004 f9e1 	bl	8985c <_localeconv_r>
   8549a:	6803      	ldr	r3, [r0, #0]
   8549c:	4618      	mov	r0, r3
   8549e:	9318      	str	r3, [sp, #96]	; 0x60
   854a0:	f7ff ff90 	bl	853c4 <strlen>
   854a4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   854a8:	9017      	str	r0, [sp, #92]	; 0x5c
   854aa:	061d      	lsls	r5, r3, #24
   854ac:	d504      	bpl.n	854b8 <_svfprintf_r+0x30>
   854ae:	f8db 3010 	ldr.w	r3, [fp, #16]
   854b2:	2b00      	cmp	r3, #0
   854b4:	f000 87df 	beq.w	86476 <_svfprintf_r+0xfee>
   854b8:	2300      	movs	r3, #0
   854ba:	2100      	movs	r1, #0
   854bc:	2200      	movs	r2, #0
   854be:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   854c2:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   854c6:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   854ca:	9313      	str	r3, [sp, #76]	; 0x4c
   854cc:	9319      	str	r3, [sp, #100]	; 0x64
   854ce:	930a      	str	r3, [sp, #40]	; 0x28
   854d0:	ab2d      	add	r3, sp, #180	; 0xb4
   854d2:	4698      	mov	r8, r3
   854d4:	932a      	str	r3, [sp, #168]	; 0xa8
   854d6:	783b      	ldrb	r3, [r7, #0]
   854d8:	46da      	mov	sl, fp
   854da:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   854de:	2b00      	cmp	r3, #0
   854e0:	f000 81a4 	beq.w	8582c <_svfprintf_r+0x3a4>
   854e4:	463c      	mov	r4, r7
   854e6:	e004      	b.n	854f2 <_svfprintf_r+0x6a>
   854e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   854ec:	2b00      	cmp	r3, #0
   854ee:	f000 80fd 	beq.w	856ec <_svfprintf_r+0x264>
   854f2:	2b25      	cmp	r3, #37	; 0x25
   854f4:	d1f8      	bne.n	854e8 <_svfprintf_r+0x60>
   854f6:	1be5      	subs	r5, r4, r7
   854f8:	f040 80fb 	bne.w	856f2 <_svfprintf_r+0x26a>
   854fc:	7823      	ldrb	r3, [r4, #0]
   854fe:	2b00      	cmp	r3, #0
   85500:	f000 8194 	beq.w	8582c <_svfprintf_r+0x3a4>
   85504:	2300      	movs	r3, #0
   85506:	930b      	str	r3, [sp, #44]	; 0x2c
   85508:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8550c:	9307      	str	r3, [sp, #28]
   8550e:	f04f 33ff 	mov.w	r3, #4294967295
   85512:	7866      	ldrb	r6, [r4, #1]
   85514:	f104 0b01 	add.w	fp, r4, #1
   85518:	2120      	movs	r1, #32
   8551a:	242b      	movs	r4, #43	; 0x2b
   8551c:	9309      	str	r3, [sp, #36]	; 0x24
   8551e:	f10b 0b01 	add.w	fp, fp, #1
   85522:	f1a6 0320 	sub.w	r3, r6, #32
   85526:	2b5a      	cmp	r3, #90	; 0x5a
   85528:	f200 80ff 	bhi.w	8572a <_svfprintf_r+0x2a2>
   8552c:	e8df f013 	tbh	[pc, r3, lsl #1]
   85530:	00fd02bc 	.word	0x00fd02bc
   85534:	02b500fd 	.word	0x02b500fd
   85538:	00fd00fd 	.word	0x00fd00fd
   8553c:	029100fd 	.word	0x029100fd
   85540:	00fd00fd 	.word	0x00fd00fd
   85544:	02e7006a 	.word	0x02e7006a
   85548:	023400fd 	.word	0x023400fd
   8554c:	00fd02cd 	.word	0x00fd02cd
   85550:	005b02c6 	.word	0x005b02c6
   85554:	005b005b 	.word	0x005b005b
   85558:	005b005b 	.word	0x005b005b
   8555c:	005b005b 	.word	0x005b005b
   85560:	005b005b 	.word	0x005b005b
   85564:	00fd00fd 	.word	0x00fd00fd
   85568:	00fd00fd 	.word	0x00fd00fd
   8556c:	00fd00fd 	.word	0x00fd00fd
   85570:	019000fd 	.word	0x019000fd
   85574:	01f700fd 	.word	0x01f700fd
   85578:	0190007c 	.word	0x0190007c
   8557c:	01900190 	.word	0x01900190
   85580:	00fd00fd 	.word	0x00fd00fd
   85584:	00fd00fd 	.word	0x00fd00fd
   85588:	00fd028a 	.word	0x00fd028a
   8558c:	00a900fd 	.word	0x00a900fd
   85590:	00fd00fd 	.word	0x00fd00fd
   85594:	020b00fd 	.word	0x020b00fd
   85598:	023b00fd 	.word	0x023b00fd
   8559c:	00fd00fd 	.word	0x00fd00fd
   855a0:	00fd0781 	.word	0x00fd0781
   855a4:	00fd00fd 	.word	0x00fd00fd
   855a8:	00fd00fd 	.word	0x00fd00fd
   855ac:	00fd00fd 	.word	0x00fd00fd
   855b0:	019000fd 	.word	0x019000fd
   855b4:	01f700fd 	.word	0x01f700fd
   855b8:	01900080 	.word	0x01900080
   855bc:	01900190 	.word	0x01900190
   855c0:	00800280 	.word	0x00800280
   855c4:	00fd0075 	.word	0x00fd0075
   855c8:	00fd0276 	.word	0x00fd0276
   855cc:	00ad025e 	.word	0x00ad025e
   855d0:	0075024c 	.word	0x0075024c
   855d4:	020b00fd 	.word	0x020b00fd
   855d8:	075b0072 	.word	0x075b0072
   855dc:	00fd00fd 	.word	0x00fd00fd
   855e0:	00fd075f 	.word	0x00fd075f
   855e4:	0072      	.short	0x0072
   855e6:	2200      	movs	r2, #0
   855e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   855ec:	f81b 6b01 	ldrb.w	r6, [fp], #1
   855f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   855f4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   855f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   855fc:	2b09      	cmp	r3, #9
   855fe:	d9f5      	bls.n	855ec <_svfprintf_r+0x164>
   85600:	920b      	str	r2, [sp, #44]	; 0x2c
   85602:	e78e      	b.n	85522 <_svfprintf_r+0x9a>
   85604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85606:	f853 2b04 	ldr.w	r2, [r3], #4
   8560a:	2a00      	cmp	r2, #0
   8560c:	920b      	str	r2, [sp, #44]	; 0x2c
   8560e:	930e      	str	r3, [sp, #56]	; 0x38
   85610:	f2c0 81bf 	blt.w	85992 <_svfprintf_r+0x50a>
   85614:	f89b 6000 	ldrb.w	r6, [fp]
   85618:	e781      	b.n	8551e <_svfprintf_r+0x96>
   8561a:	9b07      	ldr	r3, [sp, #28]
   8561c:	f89b 6000 	ldrb.w	r6, [fp]
   85620:	f043 0320 	orr.w	r3, r3, #32
   85624:	9307      	str	r3, [sp, #28]
   85626:	e77a      	b.n	8551e <_svfprintf_r+0x96>
   85628:	9b07      	ldr	r3, [sp, #28]
   8562a:	f043 0310 	orr.w	r3, r3, #16
   8562e:	9307      	str	r3, [sp, #28]
   85630:	9b07      	ldr	r3, [sp, #28]
   85632:	069c      	lsls	r4, r3, #26
   85634:	f140 8162 	bpl.w	858fc <_svfprintf_r+0x474>
   85638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8563a:	3307      	adds	r3, #7
   8563c:	f023 0307 	bic.w	r3, r3, #7
   85640:	4619      	mov	r1, r3
   85642:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   85646:	4614      	mov	r4, r2
   85648:	461d      	mov	r5, r3
   8564a:	910e      	str	r1, [sp, #56]	; 0x38
   8564c:	2a00      	cmp	r2, #0
   8564e:	f173 0300 	sbcs.w	r3, r3, #0
   85652:	f2c0 85ab 	blt.w	861ac <_svfprintf_r+0xd24>
   85656:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85658:	3301      	adds	r3, #1
   8565a:	9b07      	ldr	r3, [sp, #28]
   8565c:	f000 8414 	beq.w	85e88 <_svfprintf_r+0xa00>
   85660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85664:	ea54 0205 	orrs.w	r2, r4, r5
   85668:	9308      	str	r3, [sp, #32]
   8566a:	f040 840e 	bne.w	85e8a <_svfprintf_r+0xa02>
   8566e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85670:	2a00      	cmp	r2, #0
   85672:	f040 840f 	bne.w	85e94 <_svfprintf_r+0xa0c>
   85676:	9307      	str	r3, [sp, #28]
   85678:	2300      	movs	r3, #0
   8567a:	af56      	add	r7, sp, #344	; 0x158
   8567c:	9309      	str	r3, [sp, #36]	; 0x24
   8567e:	930c      	str	r3, [sp, #48]	; 0x30
   85680:	e26b      	b.n	85b5a <_svfprintf_r+0x6d2>
   85682:	9b07      	ldr	r3, [sp, #28]
   85684:	f043 0310 	orr.w	r3, r3, #16
   85688:	9307      	str	r3, [sp, #28]
   8568a:	9b07      	ldr	r3, [sp, #28]
   8568c:	069a      	lsls	r2, r3, #26
   8568e:	f140 8126 	bpl.w	858de <_svfprintf_r+0x456>
   85692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85694:	3307      	adds	r3, #7
   85696:	f023 0307 	bic.w	r3, r3, #7
   8569a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8569e:	930e      	str	r3, [sp, #56]	; 0x38
   856a0:	9b07      	ldr	r3, [sp, #28]
   856a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   856a6:	9308      	str	r3, [sp, #32]
   856a8:	2300      	movs	r3, #0
   856aa:	2200      	movs	r2, #0
   856ac:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   856b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   856b2:	4611      	mov	r1, r2
   856b4:	3101      	adds	r1, #1
   856b6:	f000 8231 	beq.w	85b1c <_svfprintf_r+0x694>
   856ba:	9908      	ldr	r1, [sp, #32]
   856bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   856c0:	9107      	str	r1, [sp, #28]
   856c2:	ea54 0105 	orrs.w	r1, r4, r5
   856c6:	f040 8227 	bne.w	85b18 <_svfprintf_r+0x690>
   856ca:	2a00      	cmp	r2, #0
   856cc:	f040 837d 	bne.w	85dca <_svfprintf_r+0x942>
   856d0:	2b00      	cmp	r3, #0
   856d2:	d1d1      	bne.n	85678 <_svfprintf_r+0x1f0>
   856d4:	9b08      	ldr	r3, [sp, #32]
   856d6:	f013 0301 	ands.w	r3, r3, #1
   856da:	930c      	str	r3, [sp, #48]	; 0x30
   856dc:	f000 8590 	beq.w	86200 <_svfprintf_r+0xd78>
   856e0:	2330      	movs	r3, #48	; 0x30
   856e2:	f20d 1757 	addw	r7, sp, #343	; 0x157
   856e6:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   856ea:	e236      	b.n	85b5a <_svfprintf_r+0x6d2>
   856ec:	1be5      	subs	r5, r4, r7
   856ee:	f000 809d 	beq.w	8582c <_svfprintf_r+0x3a4>
   856f2:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   856f6:	3301      	adds	r3, #1
   856f8:	442a      	add	r2, r5
   856fa:	2b07      	cmp	r3, #7
   856fc:	e9c8 7500 	strd	r7, r5, [r8]
   85700:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   85704:	dc06      	bgt.n	85714 <_svfprintf_r+0x28c>
   85706:	f108 0808 	add.w	r8, r8, #8
   8570a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8570c:	7823      	ldrb	r3, [r4, #0]
   8570e:	442a      	add	r2, r5
   85710:	920a      	str	r2, [sp, #40]	; 0x28
   85712:	e6f4      	b.n	854fe <_svfprintf_r+0x76>
   85714:	4651      	mov	r1, sl
   85716:	4648      	mov	r0, r9
   85718:	aa2a      	add	r2, sp, #168	; 0xa8
   8571a:	f005 faa1 	bl	8ac60 <__ssprint_r>
   8571e:	2800      	cmp	r0, #0
   85720:	f041 83ce 	bne.w	86ec0 <_svfprintf_r+0x1a38>
   85724:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85728:	e7ef      	b.n	8570a <_svfprintf_r+0x282>
   8572a:	2e00      	cmp	r6, #0
   8572c:	d07e      	beq.n	8582c <_svfprintf_r+0x3a4>
   8572e:	2300      	movs	r3, #0
   85730:	2101      	movs	r1, #1
   85732:	461a      	mov	r2, r3
   85734:	9108      	str	r1, [sp, #32]
   85736:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   8573a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8573e:	930d      	str	r3, [sp, #52]	; 0x34
   85740:	9309      	str	r3, [sp, #36]	; 0x24
   85742:	9312      	str	r3, [sp, #72]	; 0x48
   85744:	9316      	str	r3, [sp, #88]	; 0x58
   85746:	9310      	str	r3, [sp, #64]	; 0x40
   85748:	910c      	str	r1, [sp, #48]	; 0x30
   8574a:	af3d      	add	r7, sp, #244	; 0xf4
   8574c:	9b07      	ldr	r3, [sp, #28]
   8574e:	f013 0302 	ands.w	r3, r3, #2
   85752:	d002      	beq.n	8575a <_svfprintf_r+0x2d2>
   85754:	9908      	ldr	r1, [sp, #32]
   85756:	3102      	adds	r1, #2
   85758:	9108      	str	r1, [sp, #32]
   8575a:	9907      	ldr	r1, [sp, #28]
   8575c:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   85760:	910f      	str	r1, [sp, #60]	; 0x3c
   85762:	d105      	bne.n	85770 <_svfprintf_r+0x2e8>
   85764:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85766:	9808      	ldr	r0, [sp, #32]
   85768:	1a0d      	subs	r5, r1, r0
   8576a:	2d00      	cmp	r5, #0
   8576c:	f300 834b 	bgt.w	85e06 <_svfprintf_r+0x97e>
   85770:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85772:	b172      	cbz	r2, 85792 <_svfprintf_r+0x30a>
   85774:	2001      	movs	r0, #1
   85776:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85778:	4404      	add	r4, r0
   8577a:	4402      	add	r2, r0
   8577c:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   85780:	2a07      	cmp	r2, #7
   85782:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   85786:	e9c8 1000 	strd	r1, r0, [r8]
   8578a:	f300 83cd 	bgt.w	85f28 <_svfprintf_r+0xaa0>
   8578e:	f108 0808 	add.w	r8, r8, #8
   85792:	b16b      	cbz	r3, 857b0 <_svfprintf_r+0x328>
   85794:	2102      	movs	r1, #2
   85796:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85798:	440c      	add	r4, r1
   8579a:	3301      	adds	r3, #1
   8579c:	aa23      	add	r2, sp, #140	; 0x8c
   8579e:	2b07      	cmp	r3, #7
   857a0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   857a4:	e9c8 2100 	strd	r2, r1, [r8]
   857a8:	f300 83cc 	bgt.w	85f44 <_svfprintf_r+0xabc>
   857ac:	f108 0808 	add.w	r8, r8, #8
   857b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   857b2:	2b80      	cmp	r3, #128	; 0x80
   857b4:	f000 8234 	beq.w	85c20 <_svfprintf_r+0x798>
   857b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   857ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   857bc:	1a9d      	subs	r5, r3, r2
   857be:	2d00      	cmp	r5, #0
   857c0:	f300 826e 	bgt.w	85ca0 <_svfprintf_r+0x818>
   857c4:	9b07      	ldr	r3, [sp, #28]
   857c6:	05d9      	lsls	r1, r3, #23
   857c8:	f100 81d5 	bmi.w	85b76 <_svfprintf_r+0x6ee>
   857cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   857ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   857d0:	3301      	adds	r3, #1
   857d2:	4414      	add	r4, r2
   857d4:	2b07      	cmp	r3, #7
   857d6:	e9c8 7200 	strd	r7, r2, [r8]
   857da:	942c      	str	r4, [sp, #176]	; 0xb0
   857dc:	932b      	str	r3, [sp, #172]	; 0xac
   857de:	f300 8397 	bgt.w	85f10 <_svfprintf_r+0xa88>
   857e2:	f108 0808 	add.w	r8, r8, #8
   857e6:	9b07      	ldr	r3, [sp, #28]
   857e8:	0759      	lsls	r1, r3, #29
   857ea:	d505      	bpl.n	857f8 <_svfprintf_r+0x370>
   857ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   857ee:	9a08      	ldr	r2, [sp, #32]
   857f0:	1a9d      	subs	r5, r3, r2
   857f2:	2d00      	cmp	r5, #0
   857f4:	f300 83b2 	bgt.w	85f5c <_svfprintf_r+0xad4>
   857f8:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   857fc:	9908      	ldr	r1, [sp, #32]
   857fe:	428a      	cmp	r2, r1
   85800:	bfac      	ite	ge
   85802:	189b      	addge	r3, r3, r2
   85804:	185b      	addlt	r3, r3, r1
   85806:	930a      	str	r3, [sp, #40]	; 0x28
   85808:	2c00      	cmp	r4, #0
   8580a:	f040 827d 	bne.w	85d08 <_svfprintf_r+0x880>
   8580e:	2300      	movs	r3, #0
   85810:	932b      	str	r3, [sp, #172]	; 0xac
   85812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85814:	b11b      	cbz	r3, 8581e <_svfprintf_r+0x396>
   85816:	4648      	mov	r0, r9
   85818:	990d      	ldr	r1, [sp, #52]	; 0x34
   8581a:	f003 fd79 	bl	89310 <_free_r>
   8581e:	465f      	mov	r7, fp
   85820:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85824:	783b      	ldrb	r3, [r7, #0]
   85826:	2b00      	cmp	r3, #0
   85828:	f47f ae5c 	bne.w	854e4 <_svfprintf_r+0x5c>
   8582c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8582e:	46d3      	mov	fp, sl
   85830:	2b00      	cmp	r3, #0
   85832:	f041 824b 	bne.w	86ccc <_svfprintf_r+0x1844>
   85836:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8583a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8583e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85840:	bf18      	it	ne
   85842:	f04f 33ff 	movne.w	r3, #4294967295
   85846:	930a      	str	r3, [sp, #40]	; 0x28
   85848:	980a      	ldr	r0, [sp, #40]	; 0x28
   8584a:	b057      	add	sp, #348	; 0x15c
   8584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85852:	3307      	adds	r3, #7
   85854:	f023 0307 	bic.w	r3, r3, #7
   85858:	4619      	mov	r1, r3
   8585a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8585e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   85862:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   85866:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   8586a:	461d      	mov	r5, r3
   8586c:	4618      	mov	r0, r3
   8586e:	910e      	str	r1, [sp, #56]	; 0x38
   85870:	f04f 32ff 	mov.w	r2, #4294967295
   85874:	4621      	mov	r1, r4
   85876:	4ba4      	ldr	r3, [pc, #656]	; (85b08 <_svfprintf_r+0x680>)
   85878:	f006 f926 	bl	8bac8 <__aeabi_dcmpun>
   8587c:	2800      	cmp	r0, #0
   8587e:	f040 84d9 	bne.w	86234 <_svfprintf_r+0xdac>
   85882:	4628      	mov	r0, r5
   85884:	4621      	mov	r1, r4
   85886:	f04f 32ff 	mov.w	r2, #4294967295
   8588a:	4b9f      	ldr	r3, [pc, #636]	; (85b08 <_svfprintf_r+0x680>)
   8588c:	f006 f8fe 	bl	8ba8c <__aeabi_dcmple>
   85890:	2800      	cmp	r0, #0
   85892:	f040 84cf 	bne.w	86234 <_svfprintf_r+0xdac>
   85896:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8589a:	2200      	movs	r2, #0
   8589c:	2300      	movs	r3, #0
   8589e:	f006 f8eb 	bl	8ba78 <__aeabi_dcmplt>
   858a2:	2800      	cmp	r0, #0
   858a4:	f041 800e 	bne.w	868c4 <_svfprintf_r+0x143c>
   858a8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   858ac:	2003      	movs	r0, #3
   858ae:	2100      	movs	r1, #0
   858b0:	4f96      	ldr	r7, [pc, #600]	; (85b0c <_svfprintf_r+0x684>)
   858b2:	4b97      	ldr	r3, [pc, #604]	; (85b10 <_svfprintf_r+0x688>)
   858b4:	9008      	str	r0, [sp, #32]
   858b6:	910d      	str	r1, [sp, #52]	; 0x34
   858b8:	2e47      	cmp	r6, #71	; 0x47
   858ba:	bfc8      	it	gt
   858bc:	461f      	movgt	r7, r3
   858be:	9c07      	ldr	r4, [sp, #28]
   858c0:	900c      	str	r0, [sp, #48]	; 0x30
   858c2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   858c6:	9407      	str	r4, [sp, #28]
   858c8:	9109      	str	r1, [sp, #36]	; 0x24
   858ca:	9112      	str	r1, [sp, #72]	; 0x48
   858cc:	9116      	str	r1, [sp, #88]	; 0x58
   858ce:	9110      	str	r1, [sp, #64]	; 0x40
   858d0:	2a00      	cmp	r2, #0
   858d2:	f43f af3b 	beq.w	8574c <_svfprintf_r+0x2c4>
   858d6:	9b08      	ldr	r3, [sp, #32]
   858d8:	3301      	adds	r3, #1
   858da:	9308      	str	r3, [sp, #32]
   858dc:	e736      	b.n	8574c <_svfprintf_r+0x2c4>
   858de:	9b07      	ldr	r3, [sp, #28]
   858e0:	06db      	lsls	r3, r3, #27
   858e2:	f100 849c 	bmi.w	8621e <_svfprintf_r+0xd96>
   858e6:	9b07      	ldr	r3, [sp, #28]
   858e8:	065f      	lsls	r7, r3, #25
   858ea:	f140 87b2 	bpl.w	86852 <_svfprintf_r+0x13ca>
   858ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   858f0:	2500      	movs	r5, #0
   858f2:	f853 4b04 	ldr.w	r4, [r3], #4
   858f6:	930e      	str	r3, [sp, #56]	; 0x38
   858f8:	b2a4      	uxth	r4, r4
   858fa:	e6d1      	b.n	856a0 <_svfprintf_r+0x218>
   858fc:	9b07      	ldr	r3, [sp, #28]
   858fe:	06d8      	lsls	r0, r3, #27
   85900:	f100 8568 	bmi.w	863d4 <_svfprintf_r+0xf4c>
   85904:	9b07      	ldr	r3, [sp, #28]
   85906:	0659      	lsls	r1, r3, #25
   85908:	f140 87be 	bpl.w	86888 <_svfprintf_r+0x1400>
   8590c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8590e:	f853 4b04 	ldr.w	r4, [r3], #4
   85912:	b224      	sxth	r4, r4
   85914:	17e5      	asrs	r5, r4, #31
   85916:	930e      	str	r3, [sp, #56]	; 0x38
   85918:	4622      	mov	r2, r4
   8591a:	462b      	mov	r3, r5
   8591c:	e696      	b.n	8564c <_svfprintf_r+0x1c4>
   8591e:	2100      	movs	r1, #0
   85920:	2401      	movs	r4, #1
   85922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85924:	460a      	mov	r2, r1
   85926:	f853 0b04 	ldr.w	r0, [r3], #4
   8592a:	9408      	str	r4, [sp, #32]
   8592c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   85930:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   85934:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   85938:	9109      	str	r1, [sp, #36]	; 0x24
   8593a:	9112      	str	r1, [sp, #72]	; 0x48
   8593c:	9116      	str	r1, [sp, #88]	; 0x58
   8593e:	9110      	str	r1, [sp, #64]	; 0x40
   85940:	940c      	str	r4, [sp, #48]	; 0x30
   85942:	af3d      	add	r7, sp, #244	; 0xf4
   85944:	e702      	b.n	8574c <_svfprintf_r+0x2c4>
   85946:	2500      	movs	r5, #0
   85948:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8594a:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8594e:	f854 7b04 	ldr.w	r7, [r4], #4
   85952:	2f00      	cmp	r7, #0
   85954:	f000 859f 	beq.w	86496 <_svfprintf_r+0x100e>
   85958:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8595a:	4613      	mov	r3, r2
   8595c:	3301      	adds	r3, #1
   8595e:	f000 8770 	beq.w	86842 <_svfprintf_r+0x13ba>
   85962:	4629      	mov	r1, r5
   85964:	4638      	mov	r0, r7
   85966:	f004 fac9 	bl	89efc <memchr>
   8596a:	900d      	str	r0, [sp, #52]	; 0x34
   8596c:	2800      	cmp	r0, #0
   8596e:	f001 80b9 	beq.w	86ae4 <_svfprintf_r+0x165c>
   85972:	462b      	mov	r3, r5
   85974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85976:	9509      	str	r5, [sp, #36]	; 0x24
   85978:	1bd2      	subs	r2, r2, r7
   8597a:	920c      	str	r2, [sp, #48]	; 0x30
   8597c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   85980:	9208      	str	r2, [sp, #32]
   85982:	940e      	str	r4, [sp, #56]	; 0x38
   85984:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85988:	930d      	str	r3, [sp, #52]	; 0x34
   8598a:	9312      	str	r3, [sp, #72]	; 0x48
   8598c:	9316      	str	r3, [sp, #88]	; 0x58
   8598e:	9310      	str	r3, [sp, #64]	; 0x40
   85990:	e79e      	b.n	858d0 <_svfprintf_r+0x448>
   85992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85994:	425b      	negs	r3, r3
   85996:	930b      	str	r3, [sp, #44]	; 0x2c
   85998:	9b07      	ldr	r3, [sp, #28]
   8599a:	f89b 6000 	ldrb.w	r6, [fp]
   8599e:	f043 0304 	orr.w	r3, r3, #4
   859a2:	9307      	str	r3, [sp, #28]
   859a4:	e5bb      	b.n	8551e <_svfprintf_r+0x96>
   859a6:	9b07      	ldr	r3, [sp, #28]
   859a8:	f043 0310 	orr.w	r3, r3, #16
   859ac:	9308      	str	r3, [sp, #32]
   859ae:	9b08      	ldr	r3, [sp, #32]
   859b0:	069d      	lsls	r5, r3, #26
   859b2:	f140 83ea 	bpl.w	8618a <_svfprintf_r+0xd02>
   859b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   859b8:	3307      	adds	r3, #7
   859ba:	f023 0307 	bic.w	r3, r3, #7
   859be:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   859c2:	930e      	str	r3, [sp, #56]	; 0x38
   859c4:	2301      	movs	r3, #1
   859c6:	e670      	b.n	856aa <_svfprintf_r+0x222>
   859c8:	f647 0230 	movw	r2, #30768	; 0x7830
   859cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   859ce:	9907      	ldr	r1, [sp, #28]
   859d0:	f853 4b04 	ldr.w	r4, [r3], #4
   859d4:	f041 0102 	orr.w	r1, r1, #2
   859d8:	930e      	str	r3, [sp, #56]	; 0x38
   859da:	4b4e      	ldr	r3, [pc, #312]	; (85b14 <_svfprintf_r+0x68c>)
   859dc:	2500      	movs	r5, #0
   859de:	9319      	str	r3, [sp, #100]	; 0x64
   859e0:	2678      	movs	r6, #120	; 0x78
   859e2:	2302      	movs	r3, #2
   859e4:	9108      	str	r1, [sp, #32]
   859e6:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   859ea:	e65e      	b.n	856aa <_svfprintf_r+0x222>
   859ec:	9b07      	ldr	r3, [sp, #28]
   859ee:	069d      	lsls	r5, r3, #26
   859f0:	f100 8408 	bmi.w	86204 <_svfprintf_r+0xd7c>
   859f4:	9b07      	ldr	r3, [sp, #28]
   859f6:	06dc      	lsls	r4, r3, #27
   859f8:	f100 86e1 	bmi.w	867be <_svfprintf_r+0x1336>
   859fc:	9b07      	ldr	r3, [sp, #28]
   859fe:	0658      	lsls	r0, r3, #25
   85a00:	f100 8795 	bmi.w	8692e <_svfprintf_r+0x14a6>
   85a04:	9b07      	ldr	r3, [sp, #28]
   85a06:	0599      	lsls	r1, r3, #22
   85a08:	f140 86d9 	bpl.w	867be <_svfprintf_r+0x1336>
   85a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
   85a10:	f853 2b04 	ldr.w	r2, [r3], #4
   85a14:	465f      	mov	r7, fp
   85a16:	7011      	strb	r1, [r2, #0]
   85a18:	930e      	str	r3, [sp, #56]	; 0x38
   85a1a:	e703      	b.n	85824 <_svfprintf_r+0x39c>
   85a1c:	f89b 6000 	ldrb.w	r6, [fp]
   85a20:	9b07      	ldr	r3, [sp, #28]
   85a22:	2e6c      	cmp	r6, #108	; 0x6c
   85a24:	f000 8508 	beq.w	86438 <_svfprintf_r+0xfb0>
   85a28:	f043 0310 	orr.w	r3, r3, #16
   85a2c:	9307      	str	r3, [sp, #28]
   85a2e:	e576      	b.n	8551e <_svfprintf_r+0x96>
   85a30:	f89b 6000 	ldrb.w	r6, [fp]
   85a34:	9b07      	ldr	r3, [sp, #28]
   85a36:	2e68      	cmp	r6, #104	; 0x68
   85a38:	f000 8507 	beq.w	8644a <_svfprintf_r+0xfc2>
   85a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85a40:	9307      	str	r3, [sp, #28]
   85a42:	e56c      	b.n	8551e <_svfprintf_r+0x96>
   85a44:	9b07      	ldr	r3, [sp, #28]
   85a46:	f89b 6000 	ldrb.w	r6, [fp]
   85a4a:	f043 0308 	orr.w	r3, r3, #8
   85a4e:	9307      	str	r3, [sp, #28]
   85a50:	e565      	b.n	8551e <_svfprintf_r+0x96>
   85a52:	4648      	mov	r0, r9
   85a54:	f003 ff02 	bl	8985c <_localeconv_r>
   85a58:	6843      	ldr	r3, [r0, #4]
   85a5a:	4618      	mov	r0, r3
   85a5c:	931c      	str	r3, [sp, #112]	; 0x70
   85a5e:	f7ff fcb1 	bl	853c4 <strlen>
   85a62:	4603      	mov	r3, r0
   85a64:	4648      	mov	r0, r9
   85a66:	461d      	mov	r5, r3
   85a68:	931d      	str	r3, [sp, #116]	; 0x74
   85a6a:	f003 fef7 	bl	8985c <_localeconv_r>
   85a6e:	6882      	ldr	r2, [r0, #8]
   85a70:	2120      	movs	r1, #32
   85a72:	921a      	str	r2, [sp, #104]	; 0x68
   85a74:	2d00      	cmp	r5, #0
   85a76:	f43f adcd 	beq.w	85614 <_svfprintf_r+0x18c>
   85a7a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85a7c:	2b00      	cmp	r3, #0
   85a7e:	f43f adc9 	beq.w	85614 <_svfprintf_r+0x18c>
   85a82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85a84:	781b      	ldrb	r3, [r3, #0]
   85a86:	2b00      	cmp	r3, #0
   85a88:	f43f adc4 	beq.w	85614 <_svfprintf_r+0x18c>
   85a8c:	9b07      	ldr	r3, [sp, #28]
   85a8e:	f89b 6000 	ldrb.w	r6, [fp]
   85a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   85a96:	9307      	str	r3, [sp, #28]
   85a98:	e541      	b.n	8551e <_svfprintf_r+0x96>
   85a9a:	9b07      	ldr	r3, [sp, #28]
   85a9c:	f89b 6000 	ldrb.w	r6, [fp]
   85aa0:	f043 0301 	orr.w	r3, r3, #1
   85aa4:	9307      	str	r3, [sp, #28]
   85aa6:	e53a      	b.n	8551e <_svfprintf_r+0x96>
   85aa8:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   85aac:	2b00      	cmp	r3, #0
   85aae:	f47f adb1 	bne.w	85614 <_svfprintf_r+0x18c>
   85ab2:	f89b 6000 	ldrb.w	r6, [fp]
   85ab6:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   85aba:	e530      	b.n	8551e <_svfprintf_r+0x96>
   85abc:	9b07      	ldr	r3, [sp, #28]
   85abe:	f89b 6000 	ldrb.w	r6, [fp]
   85ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85ac6:	9307      	str	r3, [sp, #28]
   85ac8:	e529      	b.n	8551e <_svfprintf_r+0x96>
   85aca:	465a      	mov	r2, fp
   85acc:	f812 6b01 	ldrb.w	r6, [r2], #1
   85ad0:	2e2a      	cmp	r6, #42	; 0x2a
   85ad2:	f001 8251 	beq.w	86f78 <_svfprintf_r+0x1af0>
   85ad6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   85ada:	2b09      	cmp	r3, #9
   85adc:	4693      	mov	fp, r2
   85ade:	bf98      	it	ls
   85ae0:	2200      	movls	r2, #0
   85ae2:	f201 80ef 	bhi.w	86cc4 <_svfprintf_r+0x183c>
   85ae6:	f81b 6b01 	ldrb.w	r6, [fp], #1
   85aea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   85aee:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   85af2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   85af6:	2b09      	cmp	r3, #9
   85af8:	d9f5      	bls.n	85ae6 <_svfprintf_r+0x65e>
   85afa:	9209      	str	r2, [sp, #36]	; 0x24
   85afc:	e511      	b.n	85522 <_svfprintf_r+0x9a>
   85afe:	f89b 6000 	ldrb.w	r6, [fp]
   85b02:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   85b06:	e50a      	b.n	8551e <_svfprintf_r+0x96>
   85b08:	7fefffff 	.word	0x7fefffff
   85b0c:	0008bf9c 	.word	0x0008bf9c
   85b10:	0008bfa0 	.word	0x0008bfa0
   85b14:	0008bfac 	.word	0x0008bfac
   85b18:	9a07      	ldr	r2, [sp, #28]
   85b1a:	9208      	str	r2, [sp, #32]
   85b1c:	2b01      	cmp	r3, #1
   85b1e:	f000 81b4 	beq.w	85e8a <_svfprintf_r+0xa02>
   85b22:	2b02      	cmp	r3, #2
   85b24:	f000 8159 	beq.w	85dda <_svfprintf_r+0x952>
   85b28:	af56      	add	r7, sp, #344	; 0x158
   85b2a:	08e2      	lsrs	r2, r4, #3
   85b2c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   85b30:	08e9      	lsrs	r1, r5, #3
   85b32:	f004 0307 	and.w	r3, r4, #7
   85b36:	460d      	mov	r5, r1
   85b38:	4614      	mov	r4, r2
   85b3a:	3330      	adds	r3, #48	; 0x30
   85b3c:	ea54 0105 	orrs.w	r1, r4, r5
   85b40:	463a      	mov	r2, r7
   85b42:	f807 3d01 	strb.w	r3, [r7, #-1]!
   85b46:	d1f0      	bne.n	85b2a <_svfprintf_r+0x6a2>
   85b48:	9908      	ldr	r1, [sp, #32]
   85b4a:	4608      	mov	r0, r1
   85b4c:	07c0      	lsls	r0, r0, #31
   85b4e:	f100 82b8 	bmi.w	860c2 <_svfprintf_r+0xc3a>
   85b52:	ab56      	add	r3, sp, #344	; 0x158
   85b54:	1bdb      	subs	r3, r3, r7
   85b56:	9107      	str	r1, [sp, #28]
   85b58:	930c      	str	r3, [sp, #48]	; 0x30
   85b5a:	2300      	movs	r3, #0
   85b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   85b5e:	930d      	str	r3, [sp, #52]	; 0x34
   85b60:	9312      	str	r3, [sp, #72]	; 0x48
   85b62:	9316      	str	r3, [sp, #88]	; 0x58
   85b64:	9310      	str	r3, [sp, #64]	; 0x40
   85b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85b68:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85b6c:	428b      	cmp	r3, r1
   85b6e:	bfb8      	it	lt
   85b70:	460b      	movlt	r3, r1
   85b72:	9308      	str	r3, [sp, #32]
   85b74:	e6ac      	b.n	858d0 <_svfprintf_r+0x448>
   85b76:	2e65      	cmp	r6, #101	; 0x65
   85b78:	f340 80d8 	ble.w	85d2c <_svfprintf_r+0x8a4>
   85b7c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85b80:	2200      	movs	r2, #0
   85b82:	2300      	movs	r3, #0
   85b84:	f005 ff6e 	bl	8ba64 <__aeabi_dcmpeq>
   85b88:	2800      	cmp	r0, #0
   85b8a:	f000 821e 	beq.w	85fca <_svfprintf_r+0xb42>
   85b8e:	2101      	movs	r1, #1
   85b90:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85b92:	4ac5      	ldr	r2, [pc, #788]	; (85ea8 <_svfprintf_r+0xa20>)
   85b94:	440b      	add	r3, r1
   85b96:	440c      	add	r4, r1
   85b98:	2b07      	cmp	r3, #7
   85b9a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85b9e:	e9c8 2100 	strd	r2, r1, [r8]
   85ba2:	f300 85bb 	bgt.w	8671c <_svfprintf_r+0x1294>
   85ba6:	f108 0808 	add.w	r8, r8, #8
   85baa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85bac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85bae:	4293      	cmp	r3, r2
   85bb0:	f280 8321 	bge.w	861f6 <_svfprintf_r+0xd6e>
   85bb4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85bb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85bb8:	3301      	adds	r3, #1
   85bba:	9918      	ldr	r1, [sp, #96]	; 0x60
   85bbc:	4414      	add	r4, r2
   85bbe:	2b07      	cmp	r3, #7
   85bc0:	e9c8 1200 	strd	r1, r2, [r8]
   85bc4:	942c      	str	r4, [sp, #176]	; 0xb0
   85bc6:	932b      	str	r3, [sp, #172]	; 0xac
   85bc8:	f300 8448 	bgt.w	8645c <_svfprintf_r+0xfd4>
   85bcc:	f108 0808 	add.w	r8, r8, #8
   85bd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85bd2:	1e5d      	subs	r5, r3, #1
   85bd4:	2d00      	cmp	r5, #0
   85bd6:	f77f ae06 	ble.w	857e6 <_svfprintf_r+0x35e>
   85bda:	2d10      	cmp	r5, #16
   85bdc:	f340 85c7 	ble.w	8676e <_svfprintf_r+0x12e6>
   85be0:	4fb2      	ldr	r7, [pc, #712]	; (85eac <_svfprintf_r+0xa24>)
   85be2:	2610      	movs	r6, #16
   85be4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85be6:	970f      	str	r7, [sp, #60]	; 0x3c
   85be8:	e005      	b.n	85bf6 <_svfprintf_r+0x76e>
   85bea:	f108 0808 	add.w	r8, r8, #8
   85bee:	3d10      	subs	r5, #16
   85bf0:	2d10      	cmp	r5, #16
   85bf2:	f340 85bf 	ble.w	86774 <_svfprintf_r+0x12ec>
   85bf6:	3301      	adds	r3, #1
   85bf8:	3410      	adds	r4, #16
   85bfa:	2b07      	cmp	r3, #7
   85bfc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85c00:	e9c8 7600 	strd	r7, r6, [r8]
   85c04:	ddf1      	ble.n	85bea <_svfprintf_r+0x762>
   85c06:	4651      	mov	r1, sl
   85c08:	4648      	mov	r0, r9
   85c0a:	aa2a      	add	r2, sp, #168	; 0xa8
   85c0c:	f005 f828 	bl	8ac60 <__ssprint_r>
   85c10:	2800      	cmp	r0, #0
   85c12:	f040 8081 	bne.w	85d18 <_svfprintf_r+0x890>
   85c16:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85c1a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85c1e:	e7e6      	b.n	85bee <_svfprintf_r+0x766>
   85c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85c22:	9a08      	ldr	r2, [sp, #32]
   85c24:	1a9d      	subs	r5, r3, r2
   85c26:	2d00      	cmp	r5, #0
   85c28:	f77f adc6 	ble.w	857b8 <_svfprintf_r+0x330>
   85c2c:	2d10      	cmp	r5, #16
   85c2e:	f341 8069 	ble.w	86d04 <_svfprintf_r+0x187c>
   85c32:	489e      	ldr	r0, [pc, #632]	; (85eac <_svfprintf_r+0xa24>)
   85c34:	4621      	mov	r1, r4
   85c36:	2310      	movs	r3, #16
   85c38:	4604      	mov	r4, r0
   85c3a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85c3c:	900f      	str	r0, [sp, #60]	; 0x3c
   85c3e:	e004      	b.n	85c4a <_svfprintf_r+0x7c2>
   85c40:	3d10      	subs	r5, #16
   85c42:	2d10      	cmp	r5, #16
   85c44:	f108 0808 	add.w	r8, r8, #8
   85c48:	dd17      	ble.n	85c7a <_svfprintf_r+0x7f2>
   85c4a:	3201      	adds	r2, #1
   85c4c:	3110      	adds	r1, #16
   85c4e:	2a07      	cmp	r2, #7
   85c50:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   85c54:	e9c8 4300 	strd	r4, r3, [r8]
   85c58:	ddf2      	ble.n	85c40 <_svfprintf_r+0x7b8>
   85c5a:	4651      	mov	r1, sl
   85c5c:	4648      	mov	r0, r9
   85c5e:	aa2a      	add	r2, sp, #168	; 0xa8
   85c60:	f004 fffe 	bl	8ac60 <__ssprint_r>
   85c64:	2800      	cmp	r0, #0
   85c66:	d157      	bne.n	85d18 <_svfprintf_r+0x890>
   85c68:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85c6c:	3d10      	subs	r5, #16
   85c6e:	2d10      	cmp	r5, #16
   85c70:	f04f 0310 	mov.w	r3, #16
   85c74:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85c78:	dce7      	bgt.n	85c4a <_svfprintf_r+0x7c2>
   85c7a:	460c      	mov	r4, r1
   85c7c:	3201      	adds	r2, #1
   85c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85c80:	442c      	add	r4, r5
   85c82:	2a07      	cmp	r2, #7
   85c84:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   85c88:	e9c8 3500 	strd	r3, r5, [r8]
   85c8c:	f300 858a 	bgt.w	867a4 <_svfprintf_r+0x131c>
   85c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85c94:	f108 0808 	add.w	r8, r8, #8
   85c98:	1a9d      	subs	r5, r3, r2
   85c9a:	2d00      	cmp	r5, #0
   85c9c:	f77f ad92 	ble.w	857c4 <_svfprintf_r+0x33c>
   85ca0:	2d10      	cmp	r5, #16
   85ca2:	f340 860a 	ble.w	868ba <_svfprintf_r+0x1432>
   85ca6:	4881      	ldr	r0, [pc, #516]	; (85eac <_svfprintf_r+0xa24>)
   85ca8:	4621      	mov	r1, r4
   85caa:	2310      	movs	r3, #16
   85cac:	4604      	mov	r4, r0
   85cae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85cb0:	900f      	str	r0, [sp, #60]	; 0x3c
   85cb2:	e004      	b.n	85cbe <_svfprintf_r+0x836>
   85cb4:	3d10      	subs	r5, #16
   85cb6:	2d10      	cmp	r5, #16
   85cb8:	f108 0808 	add.w	r8, r8, #8
   85cbc:	dd16      	ble.n	85cec <_svfprintf_r+0x864>
   85cbe:	3201      	adds	r2, #1
   85cc0:	3110      	adds	r1, #16
   85cc2:	2a07      	cmp	r2, #7
   85cc4:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   85cc8:	e9c8 4300 	strd	r4, r3, [r8]
   85ccc:	ddf2      	ble.n	85cb4 <_svfprintf_r+0x82c>
   85cce:	4651      	mov	r1, sl
   85cd0:	4648      	mov	r0, r9
   85cd2:	aa2a      	add	r2, sp, #168	; 0xa8
   85cd4:	f004 ffc4 	bl	8ac60 <__ssprint_r>
   85cd8:	b9f0      	cbnz	r0, 85d18 <_svfprintf_r+0x890>
   85cda:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85cde:	3d10      	subs	r5, #16
   85ce0:	2d10      	cmp	r5, #16
   85ce2:	f04f 0310 	mov.w	r3, #16
   85ce6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85cea:	dce8      	bgt.n	85cbe <_svfprintf_r+0x836>
   85cec:	460c      	mov	r4, r1
   85cee:	3201      	adds	r2, #1
   85cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85cf2:	442c      	add	r4, r5
   85cf4:	2a07      	cmp	r2, #7
   85cf6:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   85cfa:	e9c8 3500 	strd	r3, r5, [r8]
   85cfe:	f300 8237 	bgt.w	86170 <_svfprintf_r+0xce8>
   85d02:	f108 0808 	add.w	r8, r8, #8
   85d06:	e55d      	b.n	857c4 <_svfprintf_r+0x33c>
   85d08:	4651      	mov	r1, sl
   85d0a:	4648      	mov	r0, r9
   85d0c:	aa2a      	add	r2, sp, #168	; 0xa8
   85d0e:	f004 ffa7 	bl	8ac60 <__ssprint_r>
   85d12:	2800      	cmp	r0, #0
   85d14:	f43f ad7b 	beq.w	8580e <_svfprintf_r+0x386>
   85d18:	46d3      	mov	fp, sl
   85d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85d1c:	2b00      	cmp	r3, #0
   85d1e:	f43f ad8a 	beq.w	85836 <_svfprintf_r+0x3ae>
   85d22:	4648      	mov	r0, r9
   85d24:	990d      	ldr	r1, [sp, #52]	; 0x34
   85d26:	f003 faf3 	bl	89310 <_free_r>
   85d2a:	e584      	b.n	85836 <_svfprintf_r+0x3ae>
   85d2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85d2e:	2b01      	cmp	r3, #1
   85d30:	f340 81d5 	ble.w	860de <_svfprintf_r+0xc56>
   85d34:	2301      	movs	r3, #1
   85d36:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   85d38:	441c      	add	r4, r3
   85d3a:	441d      	add	r5, r3
   85d3c:	2d07      	cmp	r5, #7
   85d3e:	942c      	str	r4, [sp, #176]	; 0xb0
   85d40:	f8c8 7000 	str.w	r7, [r8]
   85d44:	952b      	str	r5, [sp, #172]	; 0xac
   85d46:	f8c8 3004 	str.w	r3, [r8, #4]
   85d4a:	f300 823a 	bgt.w	861c2 <_svfprintf_r+0xd3a>
   85d4e:	f108 0808 	add.w	r8, r8, #8
   85d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85d54:	3501      	adds	r5, #1
   85d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
   85d58:	441c      	add	r4, r3
   85d5a:	2d07      	cmp	r5, #7
   85d5c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85d60:	e9c8 2300 	strd	r2, r3, [r8]
   85d64:	f300 823a 	bgt.w	861dc <_svfprintf_r+0xd54>
   85d68:	f108 0808 	add.w	r8, r8, #8
   85d6c:	2300      	movs	r3, #0
   85d6e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85d72:	2200      	movs	r2, #0
   85d74:	f005 fe76 	bl	8ba64 <__aeabi_dcmpeq>
   85d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85d7a:	2800      	cmp	r0, #0
   85d7c:	f040 81cd 	bne.w	8611a <_svfprintf_r+0xc92>
   85d80:	3b01      	subs	r3, #1
   85d82:	3501      	adds	r5, #1
   85d84:	3701      	adds	r7, #1
   85d86:	441c      	add	r4, r3
   85d88:	2d07      	cmp	r5, #7
   85d8a:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85d8e:	f8c8 7000 	str.w	r7, [r8]
   85d92:	f8c8 3004 	str.w	r3, [r8, #4]
   85d96:	f300 84dc 	bgt.w	86752 <_svfprintf_r+0x12ca>
   85d9a:	f108 0808 	add.w	r8, r8, #8
   85d9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   85da0:	3501      	adds	r5, #1
   85da2:	4414      	add	r4, r2
   85da4:	ab26      	add	r3, sp, #152	; 0x98
   85da6:	2d07      	cmp	r5, #7
   85da8:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85dac:	e9c8 3200 	strd	r3, r2, [r8]
   85db0:	f77f ad17 	ble.w	857e2 <_svfprintf_r+0x35a>
   85db4:	4651      	mov	r1, sl
   85db6:	4648      	mov	r0, r9
   85db8:	aa2a      	add	r2, sp, #168	; 0xa8
   85dba:	f004 ff51 	bl	8ac60 <__ssprint_r>
   85dbe:	2800      	cmp	r0, #0
   85dc0:	d1aa      	bne.n	85d18 <_svfprintf_r+0x890>
   85dc2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85dc4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85dc8:	e50d      	b.n	857e6 <_svfprintf_r+0x35e>
   85dca:	2b01      	cmp	r3, #1
   85dcc:	f000 87ca 	beq.w	86d64 <_svfprintf_r+0x18dc>
   85dd0:	2b02      	cmp	r3, #2
   85dd2:	9b07      	ldr	r3, [sp, #28]
   85dd4:	9308      	str	r3, [sp, #32]
   85dd6:	f47f aea7 	bne.w	85b28 <_svfprintf_r+0x6a0>
   85dda:	9819      	ldr	r0, [sp, #100]	; 0x64
   85ddc:	af56      	add	r7, sp, #344	; 0x158
   85dde:	0923      	lsrs	r3, r4, #4
   85de0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85de4:	0929      	lsrs	r1, r5, #4
   85de6:	f004 020f 	and.w	r2, r4, #15
   85dea:	460d      	mov	r5, r1
   85dec:	461c      	mov	r4, r3
   85dee:	5c83      	ldrb	r3, [r0, r2]
   85df0:	f807 3d01 	strb.w	r3, [r7, #-1]!
   85df4:	ea54 0305 	orrs.w	r3, r4, r5
   85df8:	d1f1      	bne.n	85dde <_svfprintf_r+0x956>
   85dfa:	9b08      	ldr	r3, [sp, #32]
   85dfc:	9307      	str	r3, [sp, #28]
   85dfe:	ab56      	add	r3, sp, #344	; 0x158
   85e00:	1bdb      	subs	r3, r3, r7
   85e02:	930c      	str	r3, [sp, #48]	; 0x30
   85e04:	e6a9      	b.n	85b5a <_svfprintf_r+0x6d2>
   85e06:	2d10      	cmp	r5, #16
   85e08:	f340 8668 	ble.w	86adc <_svfprintf_r+0x1654>
   85e0c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85e10:	931e      	str	r3, [sp, #120]	; 0x78
   85e12:	460b      	mov	r3, r1
   85e14:	4639      	mov	r1, r7
   85e16:	2410      	movs	r4, #16
   85e18:	4637      	mov	r7, r6
   85e1a:	4656      	mov	r6, sl
   85e1c:	46ca      	mov	sl, r9
   85e1e:	4689      	mov	r9, r1
   85e20:	e004      	b.n	85e2c <_svfprintf_r+0x9a4>
   85e22:	3d10      	subs	r5, #16
   85e24:	2d10      	cmp	r5, #16
   85e26:	f108 0808 	add.w	r8, r8, #8
   85e2a:	dd17      	ble.n	85e5c <_svfprintf_r+0x9d4>
   85e2c:	3201      	adds	r2, #1
   85e2e:	4920      	ldr	r1, [pc, #128]	; (85eb0 <_svfprintf_r+0xa28>)
   85e30:	3310      	adds	r3, #16
   85e32:	2a07      	cmp	r2, #7
   85e34:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   85e38:	e9c8 1400 	strd	r1, r4, [r8]
   85e3c:	ddf1      	ble.n	85e22 <_svfprintf_r+0x99a>
   85e3e:	4631      	mov	r1, r6
   85e40:	4650      	mov	r0, sl
   85e42:	aa2a      	add	r2, sp, #168	; 0xa8
   85e44:	f004 ff0c 	bl	8ac60 <__ssprint_r>
   85e48:	2800      	cmp	r0, #0
   85e4a:	f040 8458 	bne.w	866fe <_svfprintf_r+0x1276>
   85e4e:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   85e52:	3d10      	subs	r5, #16
   85e54:	2d10      	cmp	r5, #16
   85e56:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85e5a:	dce7      	bgt.n	85e2c <_svfprintf_r+0x9a4>
   85e5c:	4648      	mov	r0, r9
   85e5e:	46d1      	mov	r9, sl
   85e60:	46b2      	mov	sl, r6
   85e62:	463e      	mov	r6, r7
   85e64:	4607      	mov	r7, r0
   85e66:	4619      	mov	r1, r3
   85e68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   85e6a:	194c      	adds	r4, r1, r5
   85e6c:	3201      	adds	r2, #1
   85e6e:	4910      	ldr	r1, [pc, #64]	; (85eb0 <_svfprintf_r+0xa28>)
   85e70:	2a07      	cmp	r2, #7
   85e72:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   85e76:	e9c8 1500 	strd	r1, r5, [r8]
   85e7a:	f300 841f 	bgt.w	866bc <_svfprintf_r+0x1234>
   85e7e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85e82:	f108 0808 	add.w	r8, r8, #8
   85e86:	e474      	b.n	85772 <_svfprintf_r+0x2ea>
   85e88:	9308      	str	r3, [sp, #32]
   85e8a:	2d00      	cmp	r5, #0
   85e8c:	bf08      	it	eq
   85e8e:	2c0a      	cmpeq	r4, #10
   85e90:	f080 83d0 	bcs.w	86634 <_svfprintf_r+0x11ac>
   85e94:	9b08      	ldr	r3, [sp, #32]
   85e96:	3430      	adds	r4, #48	; 0x30
   85e98:	9307      	str	r3, [sp, #28]
   85e9a:	2301      	movs	r3, #1
   85e9c:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   85ea0:	930c      	str	r3, [sp, #48]	; 0x30
   85ea2:	f20d 1757 	addw	r7, sp, #343	; 0x157
   85ea6:	e658      	b.n	85b5a <_svfprintf_r+0x6d2>
   85ea8:	0008bfdc 	.word	0x0008bfdc
   85eac:	0008bff0 	.word	0x0008bff0
   85eb0:	0008bfe0 	.word	0x0008bfe0
   85eb4:	4651      	mov	r1, sl
   85eb6:	4648      	mov	r0, r9
   85eb8:	aa2a      	add	r2, sp, #168	; 0xa8
   85eba:	f004 fed1 	bl	8ac60 <__ssprint_r>
   85ebe:	2800      	cmp	r0, #0
   85ec0:	f47f af2a 	bne.w	85d18 <_svfprintf_r+0x890>
   85ec4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85ec6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85ec8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85ecc:	2a00      	cmp	r2, #0
   85ece:	f040 847f 	bne.w	867d0 <_svfprintf_r+0x1348>
   85ed2:	9b07      	ldr	r3, [sp, #28]
   85ed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85ed6:	f003 0301 	and.w	r3, r3, #1
   85eda:	4313      	orrs	r3, r2
   85edc:	f43f ac83 	beq.w	857e6 <_svfprintf_r+0x35e>
   85ee0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85ee2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85ee4:	3301      	adds	r3, #1
   85ee6:	9918      	ldr	r1, [sp, #96]	; 0x60
   85ee8:	4414      	add	r4, r2
   85eea:	2b07      	cmp	r3, #7
   85eec:	e9c8 1200 	strd	r1, r2, [r8]
   85ef0:	942c      	str	r4, [sp, #176]	; 0xb0
   85ef2:	932b      	str	r3, [sp, #172]	; 0xac
   85ef4:	f300 8524 	bgt.w	86940 <_svfprintf_r+0x14b8>
   85ef8:	f108 0808 	add.w	r8, r8, #8
   85efc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85efe:	3301      	adds	r3, #1
   85f00:	4414      	add	r4, r2
   85f02:	2b07      	cmp	r3, #7
   85f04:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85f08:	e9c8 7200 	strd	r7, r2, [r8]
   85f0c:	f77f ac69 	ble.w	857e2 <_svfprintf_r+0x35a>
   85f10:	4651      	mov	r1, sl
   85f12:	4648      	mov	r0, r9
   85f14:	aa2a      	add	r2, sp, #168	; 0xa8
   85f16:	f004 fea3 	bl	8ac60 <__ssprint_r>
   85f1a:	2800      	cmp	r0, #0
   85f1c:	f47f aefc 	bne.w	85d18 <_svfprintf_r+0x890>
   85f20:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85f22:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85f26:	e45e      	b.n	857e6 <_svfprintf_r+0x35e>
   85f28:	4651      	mov	r1, sl
   85f2a:	4648      	mov	r0, r9
   85f2c:	aa2a      	add	r2, sp, #168	; 0xa8
   85f2e:	931e      	str	r3, [sp, #120]	; 0x78
   85f30:	f004 fe96 	bl	8ac60 <__ssprint_r>
   85f34:	2800      	cmp	r0, #0
   85f36:	f47f aeef 	bne.w	85d18 <_svfprintf_r+0x890>
   85f3a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85f3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   85f3e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85f42:	e426      	b.n	85792 <_svfprintf_r+0x30a>
   85f44:	4651      	mov	r1, sl
   85f46:	4648      	mov	r0, r9
   85f48:	aa2a      	add	r2, sp, #168	; 0xa8
   85f4a:	f004 fe89 	bl	8ac60 <__ssprint_r>
   85f4e:	2800      	cmp	r0, #0
   85f50:	f47f aee2 	bne.w	85d18 <_svfprintf_r+0x890>
   85f54:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85f56:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85f5a:	e429      	b.n	857b0 <_svfprintf_r+0x328>
   85f5c:	2d10      	cmp	r5, #16
   85f5e:	f340 86be 	ble.w	86cde <_svfprintf_r+0x1856>
   85f62:	2610      	movs	r6, #16
   85f64:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85f66:	e004      	b.n	85f72 <_svfprintf_r+0xaea>
   85f68:	3d10      	subs	r5, #16
   85f6a:	2d10      	cmp	r5, #16
   85f6c:	f108 0808 	add.w	r8, r8, #8
   85f70:	dd17      	ble.n	85fa2 <_svfprintf_r+0xb1a>
   85f72:	3301      	adds	r3, #1
   85f74:	4aad      	ldr	r2, [pc, #692]	; (8622c <_svfprintf_r+0xda4>)
   85f76:	3410      	adds	r4, #16
   85f78:	2b07      	cmp	r3, #7
   85f7a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85f7e:	e9c8 2600 	strd	r2, r6, [r8]
   85f82:	ddf1      	ble.n	85f68 <_svfprintf_r+0xae0>
   85f84:	4651      	mov	r1, sl
   85f86:	4648      	mov	r0, r9
   85f88:	aa2a      	add	r2, sp, #168	; 0xa8
   85f8a:	f004 fe69 	bl	8ac60 <__ssprint_r>
   85f8e:	2800      	cmp	r0, #0
   85f90:	f47f aec2 	bne.w	85d18 <_svfprintf_r+0x890>
   85f94:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85f98:	3d10      	subs	r5, #16
   85f9a:	2d10      	cmp	r5, #16
   85f9c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85fa0:	dce7      	bgt.n	85f72 <_svfprintf_r+0xaea>
   85fa2:	3301      	adds	r3, #1
   85fa4:	4aa1      	ldr	r2, [pc, #644]	; (8622c <_svfprintf_r+0xda4>)
   85fa6:	442c      	add	r4, r5
   85fa8:	2b07      	cmp	r3, #7
   85faa:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85fae:	e9c8 2500 	strd	r2, r5, [r8]
   85fb2:	f77f ac21 	ble.w	857f8 <_svfprintf_r+0x370>
   85fb6:	4651      	mov	r1, sl
   85fb8:	4648      	mov	r0, r9
   85fba:	aa2a      	add	r2, sp, #168	; 0xa8
   85fbc:	f004 fe50 	bl	8ac60 <__ssprint_r>
   85fc0:	2800      	cmp	r0, #0
   85fc2:	f47f aea9 	bne.w	85d18 <_svfprintf_r+0x890>
   85fc6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85fc8:	e416      	b.n	857f8 <_svfprintf_r+0x370>
   85fca:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85fcc:	2a00      	cmp	r2, #0
   85fce:	f340 8386 	ble.w	866de <_svfprintf_r+0x1256>
   85fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85fd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85fd6:	4293      	cmp	r3, r2
   85fd8:	bfa8      	it	ge
   85fda:	4613      	movge	r3, r2
   85fdc:	2b00      	cmp	r3, #0
   85fde:	461d      	mov	r5, r3
   85fe0:	dd0b      	ble.n	85ffa <_svfprintf_r+0xb72>
   85fe2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85fe4:	442c      	add	r4, r5
   85fe6:	3301      	adds	r3, #1
   85fe8:	2b07      	cmp	r3, #7
   85fea:	e9c8 7500 	strd	r7, r5, [r8]
   85fee:	942c      	str	r4, [sp, #176]	; 0xb0
   85ff0:	932b      	str	r3, [sp, #172]	; 0xac
   85ff2:	f300 851e 	bgt.w	86a32 <_svfprintf_r+0x15aa>
   85ff6:	f108 0808 	add.w	r8, r8, #8
   85ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85ffc:	2d00      	cmp	r5, #0
   85ffe:	bfa8      	it	ge
   86000:	1b5b      	subge	r3, r3, r5
   86002:	2b00      	cmp	r3, #0
   86004:	461d      	mov	r5, r3
   86006:	f300 8256 	bgt.w	864b6 <_svfprintf_r+0x102e>
   8600a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8600c:	443b      	add	r3, r7
   8600e:	461e      	mov	r6, r3
   86010:	9b07      	ldr	r3, [sp, #28]
   86012:	055b      	lsls	r3, r3, #21
   86014:	f100 8277 	bmi.w	86506 <_svfprintf_r+0x107e>
   86018:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8601a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8601c:	4293      	cmp	r3, r2
   8601e:	db03      	blt.n	86028 <_svfprintf_r+0xba0>
   86020:	9a07      	ldr	r2, [sp, #28]
   86022:	07d5      	lsls	r5, r2, #31
   86024:	f140 847a 	bpl.w	8691c <_svfprintf_r+0x1494>
   86028:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8602a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8602c:	3201      	adds	r2, #1
   8602e:	9818      	ldr	r0, [sp, #96]	; 0x60
   86030:	440c      	add	r4, r1
   86032:	2a07      	cmp	r2, #7
   86034:	e9c8 0100 	strd	r0, r1, [r8]
   86038:	942c      	str	r4, [sp, #176]	; 0xb0
   8603a:	922b      	str	r2, [sp, #172]	; 0xac
   8603c:	f300 8506 	bgt.w	86a4c <_svfprintf_r+0x15c4>
   86040:	f108 0808 	add.w	r8, r8, #8
   86044:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86046:	18bd      	adds	r5, r7, r2
   86048:	1bad      	subs	r5, r5, r6
   8604a:	1ad3      	subs	r3, r2, r3
   8604c:	429d      	cmp	r5, r3
   8604e:	bfa8      	it	ge
   86050:	461d      	movge	r5, r3
   86052:	2d00      	cmp	r5, #0
   86054:	dd0b      	ble.n	8606e <_svfprintf_r+0xbe6>
   86056:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86058:	442c      	add	r4, r5
   8605a:	3201      	adds	r2, #1
   8605c:	2a07      	cmp	r2, #7
   8605e:	e9c8 6500 	strd	r6, r5, [r8]
   86062:	942c      	str	r4, [sp, #176]	; 0xb0
   86064:	922b      	str	r2, [sp, #172]	; 0xac
   86066:	f300 855f 	bgt.w	86b28 <_svfprintf_r+0x16a0>
   8606a:	f108 0808 	add.w	r8, r8, #8
   8606e:	2d00      	cmp	r5, #0
   86070:	bfb4      	ite	lt
   86072:	461d      	movlt	r5, r3
   86074:	1b5d      	subge	r5, r3, r5
   86076:	2d00      	cmp	r5, #0
   86078:	f77f abb5 	ble.w	857e6 <_svfprintf_r+0x35e>
   8607c:	2d10      	cmp	r5, #16
   8607e:	f340 8376 	ble.w	8676e <_svfprintf_r+0x12e6>
   86082:	4f6b      	ldr	r7, [pc, #428]	; (86230 <_svfprintf_r+0xda8>)
   86084:	2610      	movs	r6, #16
   86086:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86088:	970f      	str	r7, [sp, #60]	; 0x3c
   8608a:	e005      	b.n	86098 <_svfprintf_r+0xc10>
   8608c:	f108 0808 	add.w	r8, r8, #8
   86090:	3d10      	subs	r5, #16
   86092:	2d10      	cmp	r5, #16
   86094:	f340 836e 	ble.w	86774 <_svfprintf_r+0x12ec>
   86098:	3301      	adds	r3, #1
   8609a:	3410      	adds	r4, #16
   8609c:	2b07      	cmp	r3, #7
   8609e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   860a2:	e9c8 7600 	strd	r7, r6, [r8]
   860a6:	ddf1      	ble.n	8608c <_svfprintf_r+0xc04>
   860a8:	4651      	mov	r1, sl
   860aa:	4648      	mov	r0, r9
   860ac:	aa2a      	add	r2, sp, #168	; 0xa8
   860ae:	f004 fdd7 	bl	8ac60 <__ssprint_r>
   860b2:	2800      	cmp	r0, #0
   860b4:	f47f ae30 	bne.w	85d18 <_svfprintf_r+0x890>
   860b8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   860bc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   860c0:	e7e6      	b.n	86090 <_svfprintf_r+0xc08>
   860c2:	2b30      	cmp	r3, #48	; 0x30
   860c4:	f43f ae99 	beq.w	85dfa <_svfprintf_r+0x972>
   860c8:	2330      	movs	r3, #48	; 0x30
   860ca:	3a02      	subs	r2, #2
   860cc:	f807 3c01 	strb.w	r3, [r7, #-1]
   860d0:	9908      	ldr	r1, [sp, #32]
   860d2:	ab56      	add	r3, sp, #344	; 0x158
   860d4:	1a9b      	subs	r3, r3, r2
   860d6:	4617      	mov	r7, r2
   860d8:	9107      	str	r1, [sp, #28]
   860da:	930c      	str	r3, [sp, #48]	; 0x30
   860dc:	e53d      	b.n	85b5a <_svfprintf_r+0x6d2>
   860de:	9b07      	ldr	r3, [sp, #28]
   860e0:	07d8      	lsls	r0, r3, #31
   860e2:	f53f ae27 	bmi.w	85d34 <_svfprintf_r+0x8ac>
   860e6:	2301      	movs	r3, #1
   860e8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   860ea:	441c      	add	r4, r3
   860ec:	441d      	add	r5, r3
   860ee:	2d07      	cmp	r5, #7
   860f0:	942c      	str	r4, [sp, #176]	; 0xb0
   860f2:	f8c8 7000 	str.w	r7, [r8]
   860f6:	952b      	str	r5, [sp, #172]	; 0xac
   860f8:	f8c8 3004 	str.w	r3, [r8, #4]
   860fc:	f77f ae4d 	ble.w	85d9a <_svfprintf_r+0x912>
   86100:	4651      	mov	r1, sl
   86102:	4648      	mov	r0, r9
   86104:	aa2a      	add	r2, sp, #168	; 0xa8
   86106:	f004 fdab 	bl	8ac60 <__ssprint_r>
   8610a:	2800      	cmp	r0, #0
   8610c:	f47f ae04 	bne.w	85d18 <_svfprintf_r+0x890>
   86110:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   86114:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86118:	e641      	b.n	85d9e <_svfprintf_r+0x916>
   8611a:	1e5e      	subs	r6, r3, #1
   8611c:	2e00      	cmp	r6, #0
   8611e:	f77f ae3e 	ble.w	85d9e <_svfprintf_r+0x916>
   86122:	2e10      	cmp	r6, #16
   86124:	f340 871e 	ble.w	86f64 <_svfprintf_r+0x1adc>
   86128:	4b41      	ldr	r3, [pc, #260]	; (86230 <_svfprintf_r+0xda8>)
   8612a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8612e:	2710      	movs	r7, #16
   86130:	46d3      	mov	fp, sl
   86132:	930f      	str	r3, [sp, #60]	; 0x3c
   86134:	46ca      	mov	sl, r9
   86136:	4699      	mov	r9, r3
   86138:	e005      	b.n	86146 <_svfprintf_r+0xcbe>
   8613a:	f108 0808 	add.w	r8, r8, #8
   8613e:	3e10      	subs	r6, #16
   86140:	2e10      	cmp	r6, #16
   86142:	f340 82f8 	ble.w	86736 <_svfprintf_r+0x12ae>
   86146:	3501      	adds	r5, #1
   86148:	3410      	adds	r4, #16
   8614a:	2d07      	cmp	r5, #7
   8614c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86150:	e9c8 9700 	strd	r9, r7, [r8]
   86154:	ddf1      	ble.n	8613a <_svfprintf_r+0xcb2>
   86156:	4659      	mov	r1, fp
   86158:	4650      	mov	r0, sl
   8615a:	aa2a      	add	r2, sp, #168	; 0xa8
   8615c:	f004 fd80 	bl	8ac60 <__ssprint_r>
   86160:	2800      	cmp	r0, #0
   86162:	f040 85cc 	bne.w	86cfe <_svfprintf_r+0x1876>
   86166:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8616a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8616e:	e7e6      	b.n	8613e <_svfprintf_r+0xcb6>
   86170:	4651      	mov	r1, sl
   86172:	4648      	mov	r0, r9
   86174:	aa2a      	add	r2, sp, #168	; 0xa8
   86176:	f004 fd73 	bl	8ac60 <__ssprint_r>
   8617a:	2800      	cmp	r0, #0
   8617c:	f47f adcc 	bne.w	85d18 <_svfprintf_r+0x890>
   86180:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86182:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86186:	f7ff bb1d 	b.w	857c4 <_svfprintf_r+0x33c>
   8618a:	9b08      	ldr	r3, [sp, #32]
   8618c:	06dc      	lsls	r4, r3, #27
   8618e:	f100 8119 	bmi.w	863c4 <_svfprintf_r+0xf3c>
   86192:	9b08      	ldr	r3, [sp, #32]
   86194:	0658      	lsls	r0, r3, #25
   86196:	f140 8368 	bpl.w	8686a <_svfprintf_r+0x13e2>
   8619a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8619c:	2301      	movs	r3, #1
   8619e:	f852 4b04 	ldr.w	r4, [r2], #4
   861a2:	2500      	movs	r5, #0
   861a4:	920e      	str	r2, [sp, #56]	; 0x38
   861a6:	b2a4      	uxth	r4, r4
   861a8:	f7ff ba7f 	b.w	856aa <_svfprintf_r+0x222>
   861ac:	232d      	movs	r3, #45	; 0x2d
   861ae:	9a07      	ldr	r2, [sp, #28]
   861b0:	4264      	negs	r4, r4
   861b2:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   861b6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   861ba:	2301      	movs	r3, #1
   861bc:	9208      	str	r2, [sp, #32]
   861be:	f7ff ba77 	b.w	856b0 <_svfprintf_r+0x228>
   861c2:	4651      	mov	r1, sl
   861c4:	4648      	mov	r0, r9
   861c6:	aa2a      	add	r2, sp, #168	; 0xa8
   861c8:	f004 fd4a 	bl	8ac60 <__ssprint_r>
   861cc:	2800      	cmp	r0, #0
   861ce:	f47f ada3 	bne.w	85d18 <_svfprintf_r+0x890>
   861d2:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   861d6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   861da:	e5ba      	b.n	85d52 <_svfprintf_r+0x8ca>
   861dc:	4651      	mov	r1, sl
   861de:	4648      	mov	r0, r9
   861e0:	aa2a      	add	r2, sp, #168	; 0xa8
   861e2:	f004 fd3d 	bl	8ac60 <__ssprint_r>
   861e6:	2800      	cmp	r0, #0
   861e8:	f47f ad96 	bne.w	85d18 <_svfprintf_r+0x890>
   861ec:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   861f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   861f4:	e5ba      	b.n	85d6c <_svfprintf_r+0x8e4>
   861f6:	9b07      	ldr	r3, [sp, #28]
   861f8:	07da      	lsls	r2, r3, #31
   861fa:	f57f aaf4 	bpl.w	857e6 <_svfprintf_r+0x35e>
   861fe:	e4d9      	b.n	85bb4 <_svfprintf_r+0x72c>
   86200:	af56      	add	r7, sp, #344	; 0x158
   86202:	e4aa      	b.n	85b5a <_svfprintf_r+0x6d2>
   86204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86206:	465f      	mov	r7, fp
   86208:	f853 1b04 	ldr.w	r1, [r3], #4
   8620c:	930e      	str	r3, [sp, #56]	; 0x38
   8620e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86210:	17dd      	asrs	r5, r3, #31
   86212:	461a      	mov	r2, r3
   86214:	462b      	mov	r3, r5
   86216:	e9c1 2300 	strd	r2, r3, [r1]
   8621a:	f7ff bb03 	b.w	85824 <_svfprintf_r+0x39c>
   8621e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86220:	2500      	movs	r5, #0
   86222:	f853 4b04 	ldr.w	r4, [r3], #4
   86226:	930e      	str	r3, [sp, #56]	; 0x38
   86228:	f7ff ba3a 	b.w	856a0 <_svfprintf_r+0x218>
   8622c:	0008bfe0 	.word	0x0008bfe0
   86230:	0008bff0 	.word	0x0008bff0
   86234:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86238:	460b      	mov	r3, r1
   8623a:	4602      	mov	r2, r0
   8623c:	f005 fc44 	bl	8bac8 <__aeabi_dcmpun>
   86240:	4601      	mov	r1, r0
   86242:	2800      	cmp	r0, #0
   86244:	f040 8643 	bne.w	86ece <_svfprintf_r+0x1a46>
   86248:	2e61      	cmp	r6, #97	; 0x61
   8624a:	f000 8586 	beq.w	86d5a <_svfprintf_r+0x18d2>
   8624e:	2e41      	cmp	r6, #65	; 0x41
   86250:	f000 847a 	beq.w	86b48 <_svfprintf_r+0x16c0>
   86254:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86256:	f026 0520 	bic.w	r5, r6, #32
   8625a:	1c5a      	adds	r2, r3, #1
   8625c:	9508      	str	r5, [sp, #32]
   8625e:	f000 837d 	beq.w	8695c <_svfprintf_r+0x14d4>
   86262:	2d47      	cmp	r5, #71	; 0x47
   86264:	f000 859e 	beq.w	86da4 <_svfprintf_r+0x191c>
   86268:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8626c:	9b07      	ldr	r3, [sp, #28]
   8626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86272:	9312      	str	r3, [sp, #72]	; 0x48
   86274:	460b      	mov	r3, r1
   86276:	2b00      	cmp	r3, #0
   86278:	f2c0 85ba 	blt.w	86df0 <_svfprintf_r+0x1968>
   8627c:	2200      	movs	r2, #0
   8627e:	930f      	str	r3, [sp, #60]	; 0x3c
   86280:	921e      	str	r2, [sp, #120]	; 0x78
   86282:	920d      	str	r2, [sp, #52]	; 0x34
   86284:	900c      	str	r0, [sp, #48]	; 0x30
   86286:	2d46      	cmp	r5, #70	; 0x46
   86288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8628a:	f000 8407 	beq.w	86a9c <_svfprintf_r+0x1614>
   8628e:	2d45      	cmp	r5, #69	; 0x45
   86290:	f04f 0002 	mov.w	r0, #2
   86294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86296:	f040 83e7 	bne.w	86a68 <_svfprintf_r+0x15e0>
   8629a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8629c:	9000      	str	r0, [sp, #0]
   8629e:	1c4c      	adds	r4, r1, #1
   862a0:	a928      	add	r1, sp, #160	; 0xa0
   862a2:	a825      	add	r0, sp, #148	; 0x94
   862a4:	9104      	str	r1, [sp, #16]
   862a6:	a924      	add	r1, sp, #144	; 0x90
   862a8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   862ac:	9401      	str	r4, [sp, #4]
   862ae:	4648      	mov	r0, r9
   862b0:	f001 feb2 	bl	88018 <_dtoa_r>
   862b4:	4607      	mov	r7, r0
   862b6:	4404      	add	r4, r0
   862b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   862ba:	9d07      	ldr	r5, [sp, #28]
   862bc:	9307      	str	r3, [sp, #28]
   862be:	2200      	movs	r2, #0
   862c0:	2300      	movs	r3, #0
   862c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   862c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   862c6:	f005 fbcd 	bl	8ba64 <__aeabi_dcmpeq>
   862ca:	2800      	cmp	r0, #0
   862cc:	f000 8398 	beq.w	86a00 <_svfprintf_r+0x1578>
   862d0:	4623      	mov	r3, r4
   862d2:	1bdb      	subs	r3, r3, r7
   862d4:	9313      	str	r3, [sp, #76]	; 0x4c
   862d6:	9b08      	ldr	r3, [sp, #32]
   862d8:	2b47      	cmp	r3, #71	; 0x47
   862da:	f000 835e 	beq.w	8699a <_svfprintf_r+0x1512>
   862de:	9b08      	ldr	r3, [sp, #32]
   862e0:	2b46      	cmp	r3, #70	; 0x46
   862e2:	f000 840b 	beq.w	86afc <_svfprintf_r+0x1674>
   862e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   862e8:	9310      	str	r3, [sp, #64]	; 0x40
   862ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   862ec:	9a08      	ldr	r2, [sp, #32]
   862ee:	3b01      	subs	r3, #1
   862f0:	2a41      	cmp	r2, #65	; 0x41
   862f2:	9324      	str	r3, [sp, #144]	; 0x90
   862f4:	f000 85ad 	beq.w	86e52 <_svfprintf_r+0x19ca>
   862f8:	2100      	movs	r1, #0
   862fa:	b2f2      	uxtb	r2, r6
   862fc:	2b00      	cmp	r3, #0
   862fe:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   86302:	bfb6      	itet	lt
   86304:	222d      	movlt	r2, #45	; 0x2d
   86306:	222b      	movge	r2, #43	; 0x2b
   86308:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8630a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   8630e:	bfb8      	it	lt
   86310:	f1c3 0301 	rsblt	r3, r3, #1
   86314:	2b09      	cmp	r3, #9
   86316:	f340 85a2 	ble.w	86e5e <_svfprintf_r+0x19d6>
   8631a:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   8631e:	4672      	mov	r2, lr
   86320:	469c      	mov	ip, r3
   86322:	4cbf      	ldr	r4, [pc, #764]	; (86620 <_svfprintf_r+0x1198>)
   86324:	4660      	mov	r0, ip
   86326:	4611      	mov	r1, r2
   86328:	fb84 230c 	smull	r2, r3, r4, ip
   8632c:	ea4f 72ec 	mov.w	r2, ip, asr #31
   86330:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   86334:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   86338:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   8633c:	3330      	adds	r3, #48	; 0x30
   8633e:	2863      	cmp	r0, #99	; 0x63
   86340:	4694      	mov	ip, r2
   86342:	f801 3c01 	strb.w	r3, [r1, #-1]
   86346:	f101 32ff 	add.w	r2, r1, #4294967295
   8634a:	dceb      	bgt.n	86324 <_svfprintf_r+0xe9c>
   8634c:	4663      	mov	r3, ip
   8634e:	3330      	adds	r3, #48	; 0x30
   86350:	b2d8      	uxtb	r0, r3
   86352:	1e8b      	subs	r3, r1, #2
   86354:	459e      	cmp	lr, r3
   86356:	f802 0c01 	strb.w	r0, [r2, #-1]
   8635a:	f240 862c 	bls.w	86fb6 <_svfprintf_r+0x1b2e>
   8635e:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   86362:	e001      	b.n	86368 <_svfprintf_r+0xee0>
   86364:	f812 0b01 	ldrb.w	r0, [r2], #1
   86368:	4596      	cmp	lr, r2
   8636a:	f803 0b01 	strb.w	r0, [r3], #1
   8636e:	d1f9      	bne.n	86364 <_svfprintf_r+0xedc>
   86370:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   86374:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   86378:	1a5b      	subs	r3, r3, r1
   8637a:	4413      	add	r3, r2
   8637c:	aa26      	add	r2, sp, #152	; 0x98
   8637e:	1a9b      	subs	r3, r3, r2
   86380:	931b      	str	r3, [sp, #108]	; 0x6c
   86382:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86384:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86386:	2b01      	cmp	r3, #1
   86388:	441a      	add	r2, r3
   8638a:	920c      	str	r2, [sp, #48]	; 0x30
   8638c:	f340 85cc 	ble.w	86f28 <_svfprintf_r+0x1aa0>
   86390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86392:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86394:	4413      	add	r3, r2
   86396:	930c      	str	r3, [sp, #48]	; 0x30
   86398:	2300      	movs	r3, #0
   8639a:	9312      	str	r3, [sp, #72]	; 0x48
   8639c:	9316      	str	r3, [sp, #88]	; 0x58
   8639e:	9310      	str	r3, [sp, #64]	; 0x40
   863a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   863a2:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   863a6:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   863aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   863ae:	9207      	str	r2, [sp, #28]
   863b0:	9308      	str	r3, [sp, #32]
   863b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   863b4:	2b00      	cmp	r3, #0
   863b6:	f040 8317 	bne.w	869e8 <_svfprintf_r+0x1560>
   863ba:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   863be:	9309      	str	r3, [sp, #36]	; 0x24
   863c0:	f7ff ba86 	b.w	858d0 <_svfprintf_r+0x448>
   863c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   863c6:	2301      	movs	r3, #1
   863c8:	f852 4b04 	ldr.w	r4, [r2], #4
   863cc:	2500      	movs	r5, #0
   863ce:	920e      	str	r2, [sp, #56]	; 0x38
   863d0:	f7ff b96b 	b.w	856aa <_svfprintf_r+0x222>
   863d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   863d6:	f853 4b04 	ldr.w	r4, [r3], #4
   863da:	17e5      	asrs	r5, r4, #31
   863dc:	930e      	str	r3, [sp, #56]	; 0x38
   863de:	4622      	mov	r2, r4
   863e0:	462b      	mov	r3, r5
   863e2:	f7ff b933 	b.w	8564c <_svfprintf_r+0x1c4>
   863e6:	9b07      	ldr	r3, [sp, #28]
   863e8:	9308      	str	r3, [sp, #32]
   863ea:	f7ff bae0 	b.w	859ae <_svfprintf_r+0x526>
   863ee:	4b8d      	ldr	r3, [pc, #564]	; (86624 <_svfprintf_r+0x119c>)
   863f0:	9319      	str	r3, [sp, #100]	; 0x64
   863f2:	9b07      	ldr	r3, [sp, #28]
   863f4:	0699      	lsls	r1, r3, #26
   863f6:	f140 80fe 	bpl.w	865f6 <_svfprintf_r+0x116e>
   863fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   863fc:	3307      	adds	r3, #7
   863fe:	f023 0307 	bic.w	r3, r3, #7
   86402:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86406:	930e      	str	r3, [sp, #56]	; 0x38
   86408:	9a07      	ldr	r2, [sp, #28]
   8640a:	07d7      	lsls	r7, r2, #31
   8640c:	d50a      	bpl.n	86424 <_svfprintf_r+0xf9c>
   8640e:	ea54 0305 	orrs.w	r3, r4, r5
   86412:	d007      	beq.n	86424 <_svfprintf_r+0xf9c>
   86414:	2330      	movs	r3, #48	; 0x30
   86416:	f042 0202 	orr.w	r2, r2, #2
   8641a:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   8641e:	9207      	str	r2, [sp, #28]
   86420:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   86424:	9a07      	ldr	r2, [sp, #28]
   86426:	2302      	movs	r3, #2
   86428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   8642c:	9208      	str	r2, [sp, #32]
   8642e:	f7ff b93c 	b.w	856aa <_svfprintf_r+0x222>
   86432:	4b7d      	ldr	r3, [pc, #500]	; (86628 <_svfprintf_r+0x11a0>)
   86434:	9319      	str	r3, [sp, #100]	; 0x64
   86436:	e7dc      	b.n	863f2 <_svfprintf_r+0xf6a>
   86438:	f043 0320 	orr.w	r3, r3, #32
   8643c:	f89b 6001 	ldrb.w	r6, [fp, #1]
   86440:	9307      	str	r3, [sp, #28]
   86442:	f10b 0b01 	add.w	fp, fp, #1
   86446:	f7ff b86a 	b.w	8551e <_svfprintf_r+0x96>
   8644a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8644e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   86452:	9307      	str	r3, [sp, #28]
   86454:	f10b 0b01 	add.w	fp, fp, #1
   86458:	f7ff b861 	b.w	8551e <_svfprintf_r+0x96>
   8645c:	4651      	mov	r1, sl
   8645e:	4648      	mov	r0, r9
   86460:	aa2a      	add	r2, sp, #168	; 0xa8
   86462:	f004 fbfd 	bl	8ac60 <__ssprint_r>
   86466:	2800      	cmp	r0, #0
   86468:	f47f ac56 	bne.w	85d18 <_svfprintf_r+0x890>
   8646c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8646e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86472:	f7ff bbad 	b.w	85bd0 <_svfprintf_r+0x748>
   86476:	2140      	movs	r1, #64	; 0x40
   86478:	4648      	mov	r0, r9
   8647a:	f003 fa7b 	bl	89974 <_malloc_r>
   8647e:	f8cb 0000 	str.w	r0, [fp]
   86482:	f8cb 0010 	str.w	r0, [fp, #16]
   86486:	2800      	cmp	r0, #0
   86488:	f000 858d 	beq.w	86fa6 <_svfprintf_r+0x1b1e>
   8648c:	2340      	movs	r3, #64	; 0x40
   8648e:	f8cb 3014 	str.w	r3, [fp, #20]
   86492:	f7ff b811 	b.w	854b8 <_svfprintf_r+0x30>
   86496:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86498:	463a      	mov	r2, r7
   8649a:	2b06      	cmp	r3, #6
   8649c:	bf28      	it	cs
   8649e:	2306      	movcs	r3, #6
   864a0:	9709      	str	r7, [sp, #36]	; 0x24
   864a2:	9712      	str	r7, [sp, #72]	; 0x48
   864a4:	9716      	str	r7, [sp, #88]	; 0x58
   864a6:	9710      	str	r7, [sp, #64]	; 0x40
   864a8:	970d      	str	r7, [sp, #52]	; 0x34
   864aa:	9308      	str	r3, [sp, #32]
   864ac:	4f5f      	ldr	r7, [pc, #380]	; (8662c <_svfprintf_r+0x11a4>)
   864ae:	940e      	str	r4, [sp, #56]	; 0x38
   864b0:	930c      	str	r3, [sp, #48]	; 0x30
   864b2:	f7ff ba0d 	b.w	858d0 <_svfprintf_r+0x448>
   864b6:	2b10      	cmp	r3, #16
   864b8:	f340 8558 	ble.w	86f6c <_svfprintf_r+0x1ae4>
   864bc:	4651      	mov	r1, sl
   864be:	4a5c      	ldr	r2, [pc, #368]	; (86630 <_svfprintf_r+0x11a8>)
   864c0:	46ca      	mov	sl, r9
   864c2:	9709      	str	r7, [sp, #36]	; 0x24
   864c4:	2610      	movs	r6, #16
   864c6:	4617      	mov	r7, r2
   864c8:	4689      	mov	r9, r1
   864ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   864cc:	920f      	str	r2, [sp, #60]	; 0x3c
   864ce:	e005      	b.n	864dc <_svfprintf_r+0x1054>
   864d0:	f108 0808 	add.w	r8, r8, #8
   864d4:	3d10      	subs	r5, #16
   864d6:	2d10      	cmp	r5, #16
   864d8:	f340 81fa 	ble.w	868d0 <_svfprintf_r+0x1448>
   864dc:	3301      	adds	r3, #1
   864de:	3410      	adds	r4, #16
   864e0:	2b07      	cmp	r3, #7
   864e2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   864e6:	e9c8 7600 	strd	r7, r6, [r8]
   864ea:	ddf1      	ble.n	864d0 <_svfprintf_r+0x1048>
   864ec:	4649      	mov	r1, r9
   864ee:	4650      	mov	r0, sl
   864f0:	aa2a      	add	r2, sp, #168	; 0xa8
   864f2:	f004 fbb5 	bl	8ac60 <__ssprint_r>
   864f6:	2800      	cmp	r0, #0
   864f8:	f040 83fd 	bne.w	86cf6 <_svfprintf_r+0x186e>
   864fc:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86500:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86504:	e7e6      	b.n	864d4 <_svfprintf_r+0x104c>
   86506:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86508:	4642      	mov	r2, r8
   8650a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   8650e:	18fb      	adds	r3, r7, r3
   86510:	9309      	str	r3, [sp, #36]	; 0x24
   86512:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   86516:	970f      	str	r7, [sp, #60]	; 0x3c
   86518:	4620      	mov	r0, r4
   8651a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   8651e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   86520:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86522:	f1b8 0f00 	cmp.w	r8, #0
   86526:	d02d      	beq.n	86584 <_svfprintf_r+0x10fc>
   86528:	bb7b      	cbnz	r3, 8658a <_svfprintf_r+0x1102>
   8652a:	3f01      	subs	r7, #1
   8652c:	f108 38ff 	add.w	r8, r8, #4294967295
   86530:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86532:	991c      	ldr	r1, [sp, #112]	; 0x70
   86534:	3301      	adds	r3, #1
   86536:	4458      	add	r0, fp
   86538:	2b07      	cmp	r3, #7
   8653a:	e9c2 1b00 	strd	r1, fp, [r2]
   8653e:	902c      	str	r0, [sp, #176]	; 0xb0
   86540:	932b      	str	r3, [sp, #172]	; 0xac
   86542:	dc62      	bgt.n	8660a <_svfprintf_r+0x1182>
   86544:	3208      	adds	r2, #8
   86546:	9909      	ldr	r1, [sp, #36]	; 0x24
   86548:	783b      	ldrb	r3, [r7, #0]
   8654a:	1b8d      	subs	r5, r1, r6
   8654c:	429d      	cmp	r5, r3
   8654e:	bfa8      	it	ge
   86550:	461d      	movge	r5, r3
   86552:	2d00      	cmp	r5, #0
   86554:	dd0b      	ble.n	8656e <_svfprintf_r+0x10e6>
   86556:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86558:	4428      	add	r0, r5
   8655a:	3301      	adds	r3, #1
   8655c:	2b07      	cmp	r3, #7
   8655e:	e9c2 6500 	strd	r6, r5, [r2]
   86562:	902c      	str	r0, [sp, #176]	; 0xb0
   86564:	932b      	str	r3, [sp, #172]	; 0xac
   86566:	f300 8111 	bgt.w	8678c <_svfprintf_r+0x1304>
   8656a:	783b      	ldrb	r3, [r7, #0]
   8656c:	3208      	adds	r2, #8
   8656e:	2d00      	cmp	r5, #0
   86570:	bfb4      	ite	lt
   86572:	461d      	movlt	r5, r3
   86574:	1b5d      	subge	r5, r3, r5
   86576:	2d00      	cmp	r5, #0
   86578:	dc0b      	bgt.n	86592 <_svfprintf_r+0x110a>
   8657a:	441e      	add	r6, r3
   8657c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8657e:	f1b8 0f00 	cmp.w	r8, #0
   86582:	d1d1      	bne.n	86528 <_svfprintf_r+0x10a0>
   86584:	2b00      	cmp	r3, #0
   86586:	f000 81f9 	beq.w	8697c <_svfprintf_r+0x14f4>
   8658a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8658c:	3b01      	subs	r3, #1
   8658e:	9312      	str	r3, [sp, #72]	; 0x48
   86590:	e7ce      	b.n	86530 <_svfprintf_r+0x10a8>
   86592:	2d10      	cmp	r5, #16
   86594:	f340 84c5 	ble.w	86f22 <_svfprintf_r+0x1a9a>
   86598:	992b      	ldr	r1, [sp, #172]	; 0xac
   8659a:	2410      	movs	r4, #16
   8659c:	460b      	mov	r3, r1
   8659e:	e004      	b.n	865aa <_svfprintf_r+0x1122>
   865a0:	3d10      	subs	r5, #16
   865a2:	2d10      	cmp	r5, #16
   865a4:	f102 0208 	add.w	r2, r2, #8
   865a8:	dd16      	ble.n	865d8 <_svfprintf_r+0x1150>
   865aa:	3301      	adds	r3, #1
   865ac:	4920      	ldr	r1, [pc, #128]	; (86630 <_svfprintf_r+0x11a8>)
   865ae:	3010      	adds	r0, #16
   865b0:	2b07      	cmp	r3, #7
   865b2:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   865b6:	e9c2 1400 	strd	r1, r4, [r2]
   865ba:	ddf1      	ble.n	865a0 <_svfprintf_r+0x1118>
   865bc:	4651      	mov	r1, sl
   865be:	4648      	mov	r0, r9
   865c0:	aa2a      	add	r2, sp, #168	; 0xa8
   865c2:	f004 fb4d 	bl	8ac60 <__ssprint_r>
   865c6:	2800      	cmp	r0, #0
   865c8:	f47f aba6 	bne.w	85d18 <_svfprintf_r+0x890>
   865cc:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   865d0:	3d10      	subs	r5, #16
   865d2:	2d10      	cmp	r5, #16
   865d4:	aa2d      	add	r2, sp, #180	; 0xb4
   865d6:	dce8      	bgt.n	865aa <_svfprintf_r+0x1122>
   865d8:	4619      	mov	r1, r3
   865da:	1c4b      	adds	r3, r1, #1
   865dc:	4914      	ldr	r1, [pc, #80]	; (86630 <_svfprintf_r+0x11a8>)
   865de:	4428      	add	r0, r5
   865e0:	2b07      	cmp	r3, #7
   865e2:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   865e6:	e9c2 1500 	strd	r1, r5, [r2]
   865ea:	f300 8215 	bgt.w	86a18 <_svfprintf_r+0x1590>
   865ee:	783b      	ldrb	r3, [r7, #0]
   865f0:	3208      	adds	r2, #8
   865f2:	441e      	add	r6, r3
   865f4:	e7c2      	b.n	8657c <_svfprintf_r+0x10f4>
   865f6:	9b07      	ldr	r3, [sp, #28]
   865f8:	06da      	lsls	r2, r3, #27
   865fa:	f140 8084 	bpl.w	86706 <_svfprintf_r+0x127e>
   865fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86600:	2500      	movs	r5, #0
   86602:	f853 4b04 	ldr.w	r4, [r3], #4
   86606:	930e      	str	r3, [sp, #56]	; 0x38
   86608:	e6fe      	b.n	86408 <_svfprintf_r+0xf80>
   8660a:	4651      	mov	r1, sl
   8660c:	4648      	mov	r0, r9
   8660e:	aa2a      	add	r2, sp, #168	; 0xa8
   86610:	f004 fb26 	bl	8ac60 <__ssprint_r>
   86614:	2800      	cmp	r0, #0
   86616:	f47f ab7f 	bne.w	85d18 <_svfprintf_r+0x890>
   8661a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   8661c:	aa2d      	add	r2, sp, #180	; 0xb4
   8661e:	e792      	b.n	86546 <_svfprintf_r+0x10be>
   86620:	66666667 	.word	0x66666667
   86624:	0008bfac 	.word	0x0008bfac
   86628:	0008bfc0 	.word	0x0008bfc0
   8662c:	0008bfd4 	.word	0x0008bfd4
   86630:	0008bff0 	.word	0x0008bff0
   86634:	2200      	movs	r2, #0
   86636:	9b08      	ldr	r3, [sp, #32]
   86638:	f8cd b01c 	str.w	fp, [sp, #28]
   8663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   86640:	960c      	str	r6, [sp, #48]	; 0x30
   86642:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   86646:	4693      	mov	fp, r2
   86648:	46ca      	mov	sl, r9
   8664a:	461e      	mov	r6, r3
   8664c:	46c1      	mov	r9, r8
   8664e:	af56      	add	r7, sp, #344	; 0x158
   86650:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   86654:	e00b      	b.n	8666e <_svfprintf_r+0x11e6>
   86656:	220a      	movs	r2, #10
   86658:	2300      	movs	r3, #0
   8665a:	4620      	mov	r0, r4
   8665c:	4629      	mov	r1, r5
   8665e:	f005 fa71 	bl	8bb44 <__aeabi_uldivmod>
   86662:	2d00      	cmp	r5, #0
   86664:	bf08      	it	eq
   86666:	2c0a      	cmpeq	r4, #10
   86668:	d31b      	bcc.n	866a2 <_svfprintf_r+0x121a>
   8666a:	4604      	mov	r4, r0
   8666c:	460d      	mov	r5, r1
   8666e:	220a      	movs	r2, #10
   86670:	2300      	movs	r3, #0
   86672:	4620      	mov	r0, r4
   86674:	4629      	mov	r1, r5
   86676:	f005 fa65 	bl	8bb44 <__aeabi_uldivmod>
   8667a:	3230      	adds	r2, #48	; 0x30
   8667c:	f807 2c01 	strb.w	r2, [r7, #-1]
   86680:	f10b 0b01 	add.w	fp, fp, #1
   86684:	3f01      	subs	r7, #1
   86686:	2e00      	cmp	r6, #0
   86688:	d0e5      	beq.n	86656 <_svfprintf_r+0x11ce>
   8668a:	f898 3000 	ldrb.w	r3, [r8]
   8668e:	459b      	cmp	fp, r3
   86690:	d1e1      	bne.n	86656 <_svfprintf_r+0x11ce>
   86692:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   86696:	d0de      	beq.n	86656 <_svfprintf_r+0x11ce>
   86698:	2d00      	cmp	r5, #0
   8669a:	bf08      	it	eq
   8669c:	2c0a      	cmpeq	r4, #10
   8669e:	f080 8128 	bcs.w	868f2 <_svfprintf_r+0x146a>
   866a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   866a6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   866aa:	46c8      	mov	r8, r9
   866ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   866ae:	46d1      	mov	r9, sl
   866b0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   866b4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   866b8:	f7ff bb9f 	b.w	85dfa <_svfprintf_r+0x972>
   866bc:	4651      	mov	r1, sl
   866be:	4648      	mov	r0, r9
   866c0:	aa2a      	add	r2, sp, #168	; 0xa8
   866c2:	931e      	str	r3, [sp, #120]	; 0x78
   866c4:	f004 facc 	bl	8ac60 <__ssprint_r>
   866c8:	2800      	cmp	r0, #0
   866ca:	f47f ab25 	bne.w	85d18 <_svfprintf_r+0x890>
   866ce:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   866d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   866d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   866d6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   866da:	f7ff b84a 	b.w	85772 <_svfprintf_r+0x2ea>
   866de:	2001      	movs	r0, #1
   866e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   866e2:	49c5      	ldr	r1, [pc, #788]	; (869f8 <_svfprintf_r+0x1570>)
   866e4:	4403      	add	r3, r0
   866e6:	4404      	add	r4, r0
   866e8:	2b07      	cmp	r3, #7
   866ea:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   866ee:	e9c8 1000 	strd	r1, r0, [r8]
   866f2:	f73f abdf 	bgt.w	85eb4 <_svfprintf_r+0xa2c>
   866f6:	f108 0808 	add.w	r8, r8, #8
   866fa:	f7ff bbe7 	b.w	85ecc <_svfprintf_r+0xa44>
   866fe:	46d1      	mov	r9, sl
   86700:	46b3      	mov	fp, r6
   86702:	f7ff bb0a 	b.w	85d1a <_svfprintf_r+0x892>
   86706:	9b07      	ldr	r3, [sp, #28]
   86708:	065b      	lsls	r3, r3, #25
   8670a:	f140 80cb 	bpl.w	868a4 <_svfprintf_r+0x141c>
   8670e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86710:	2500      	movs	r5, #0
   86712:	f853 4b04 	ldr.w	r4, [r3], #4
   86716:	930e      	str	r3, [sp, #56]	; 0x38
   86718:	b2a4      	uxth	r4, r4
   8671a:	e675      	b.n	86408 <_svfprintf_r+0xf80>
   8671c:	4651      	mov	r1, sl
   8671e:	4648      	mov	r0, r9
   86720:	aa2a      	add	r2, sp, #168	; 0xa8
   86722:	f004 fa9d 	bl	8ac60 <__ssprint_r>
   86726:	2800      	cmp	r0, #0
   86728:	f47f aaf6 	bne.w	85d18 <_svfprintf_r+0x890>
   8672c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8672e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86732:	f7ff ba3a 	b.w	85baa <_svfprintf_r+0x722>
   86736:	46d1      	mov	r9, sl
   86738:	46da      	mov	sl, fp
   8673a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8673e:	3501      	adds	r5, #1
   86740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86742:	4434      	add	r4, r6
   86744:	2d07      	cmp	r5, #7
   86746:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8674a:	e9c8 3600 	strd	r3, r6, [r8]
   8674e:	f77f ab24 	ble.w	85d9a <_svfprintf_r+0x912>
   86752:	4651      	mov	r1, sl
   86754:	4648      	mov	r0, r9
   86756:	aa2a      	add	r2, sp, #168	; 0xa8
   86758:	f004 fa82 	bl	8ac60 <__ssprint_r>
   8675c:	2800      	cmp	r0, #0
   8675e:	f47f aadb 	bne.w	85d18 <_svfprintf_r+0x890>
   86762:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   86766:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8676a:	f7ff bb18 	b.w	85d9e <_svfprintf_r+0x916>
   8676e:	4aa3      	ldr	r2, [pc, #652]	; (869fc <_svfprintf_r+0x1574>)
   86770:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86772:	920f      	str	r2, [sp, #60]	; 0x3c
   86774:	3301      	adds	r3, #1
   86776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86778:	442c      	add	r4, r5
   8677a:	2b07      	cmp	r3, #7
   8677c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86780:	e9c8 2500 	strd	r2, r5, [r8]
   86784:	f77f a82d 	ble.w	857e2 <_svfprintf_r+0x35a>
   86788:	f7ff bbc2 	b.w	85f10 <_svfprintf_r+0xa88>
   8678c:	4651      	mov	r1, sl
   8678e:	4648      	mov	r0, r9
   86790:	aa2a      	add	r2, sp, #168	; 0xa8
   86792:	f004 fa65 	bl	8ac60 <__ssprint_r>
   86796:	2800      	cmp	r0, #0
   86798:	f47f aabe 	bne.w	85d18 <_svfprintf_r+0x890>
   8679c:	783b      	ldrb	r3, [r7, #0]
   8679e:	982c      	ldr	r0, [sp, #176]	; 0xb0
   867a0:	aa2d      	add	r2, sp, #180	; 0xb4
   867a2:	e6e4      	b.n	8656e <_svfprintf_r+0x10e6>
   867a4:	4651      	mov	r1, sl
   867a6:	4648      	mov	r0, r9
   867a8:	aa2a      	add	r2, sp, #168	; 0xa8
   867aa:	f004 fa59 	bl	8ac60 <__ssprint_r>
   867ae:	2800      	cmp	r0, #0
   867b0:	f47f aab2 	bne.w	85d18 <_svfprintf_r+0x890>
   867b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   867b6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   867ba:	f7fe bffd 	b.w	857b8 <_svfprintf_r+0x330>
   867be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   867c2:	f853 2b04 	ldr.w	r2, [r3], #4
   867c6:	465f      	mov	r7, fp
   867c8:	6011      	str	r1, [r2, #0]
   867ca:	930e      	str	r3, [sp, #56]	; 0x38
   867cc:	f7ff b82a 	b.w	85824 <_svfprintf_r+0x39c>
   867d0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   867d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   867d4:	3301      	adds	r3, #1
   867d6:	9818      	ldr	r0, [sp, #96]	; 0x60
   867d8:	440c      	add	r4, r1
   867da:	2b07      	cmp	r3, #7
   867dc:	e9c8 0100 	strd	r0, r1, [r8]
   867e0:	942c      	str	r4, [sp, #176]	; 0xb0
   867e2:	932b      	str	r3, [sp, #172]	; 0xac
   867e4:	f300 80ac 	bgt.w	86940 <_svfprintf_r+0x14b8>
   867e8:	f108 0808 	add.w	r8, r8, #8
   867ec:	2a00      	cmp	r2, #0
   867ee:	f6bf ab85 	bge.w	85efc <_svfprintf_r+0xa74>
   867f2:	4255      	negs	r5, r2
   867f4:	3210      	adds	r2, #16
   867f6:	f280 83d3 	bge.w	86fa0 <_svfprintf_r+0x1b18>
   867fa:	4651      	mov	r1, sl
   867fc:	4a7f      	ldr	r2, [pc, #508]	; (869fc <_svfprintf_r+0x1574>)
   867fe:	46ca      	mov	sl, r9
   86800:	9709      	str	r7, [sp, #36]	; 0x24
   86802:	2610      	movs	r6, #16
   86804:	4617      	mov	r7, r2
   86806:	4689      	mov	r9, r1
   86808:	920f      	str	r2, [sp, #60]	; 0x3c
   8680a:	e005      	b.n	86818 <_svfprintf_r+0x1390>
   8680c:	f108 0808 	add.w	r8, r8, #8
   86810:	3d10      	subs	r5, #16
   86812:	2d10      	cmp	r5, #16
   86814:	f340 82aa 	ble.w	86d6c <_svfprintf_r+0x18e4>
   86818:	3301      	adds	r3, #1
   8681a:	3410      	adds	r4, #16
   8681c:	2b07      	cmp	r3, #7
   8681e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86822:	e9c8 7600 	strd	r7, r6, [r8]
   86826:	ddf1      	ble.n	8680c <_svfprintf_r+0x1384>
   86828:	4649      	mov	r1, r9
   8682a:	4650      	mov	r0, sl
   8682c:	aa2a      	add	r2, sp, #168	; 0xa8
   8682e:	f004 fa17 	bl	8ac60 <__ssprint_r>
   86832:	2800      	cmp	r0, #0
   86834:	f040 825f 	bne.w	86cf6 <_svfprintf_r+0x186e>
   86838:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8683c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86840:	e7e6      	b.n	86810 <_svfprintf_r+0x1388>
   86842:	4638      	mov	r0, r7
   86844:	f7fe fdbe 	bl	853c4 <strlen>
   86848:	462b      	mov	r3, r5
   8684a:	4602      	mov	r2, r0
   8684c:	9509      	str	r5, [sp, #36]	; 0x24
   8684e:	f7ff b894 	b.w	8597a <_svfprintf_r+0x4f2>
   86852:	9b07      	ldr	r3, [sp, #28]
   86854:	2500      	movs	r5, #0
   86856:	f413 7f00 	tst.w	r3, #512	; 0x200
   8685a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8685c:	f853 4b04 	ldr.w	r4, [r3], #4
   86860:	930e      	str	r3, [sp, #56]	; 0x38
   86862:	bf18      	it	ne
   86864:	b2e4      	uxtbne	r4, r4
   86866:	f7fe bf1b 	b.w	856a0 <_svfprintf_r+0x218>
   8686a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8686c:	9b08      	ldr	r3, [sp, #32]
   8686e:	f852 4b04 	ldr.w	r4, [r2], #4
   86872:	f413 7f00 	tst.w	r3, #512	; 0x200
   86876:	f04f 0500 	mov.w	r5, #0
   8687a:	f04f 0301 	mov.w	r3, #1
   8687e:	920e      	str	r2, [sp, #56]	; 0x38
   86880:	bf18      	it	ne
   86882:	b2e4      	uxtbne	r4, r4
   86884:	f7fe bf11 	b.w	856aa <_svfprintf_r+0x222>
   86888:	9b07      	ldr	r3, [sp, #28]
   8688a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8688e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86890:	f853 4b04 	ldr.w	r4, [r3], #4
   86894:	bf18      	it	ne
   86896:	b264      	sxtbne	r4, r4
   86898:	17e5      	asrs	r5, r4, #31
   8689a:	930e      	str	r3, [sp, #56]	; 0x38
   8689c:	4622      	mov	r2, r4
   8689e:	462b      	mov	r3, r5
   868a0:	f7fe bed4 	b.w	8564c <_svfprintf_r+0x1c4>
   868a4:	9b07      	ldr	r3, [sp, #28]
   868a6:	2500      	movs	r5, #0
   868a8:	f413 7f00 	tst.w	r3, #512	; 0x200
   868ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868ae:	f853 4b04 	ldr.w	r4, [r3], #4
   868b2:	930e      	str	r3, [sp, #56]	; 0x38
   868b4:	bf18      	it	ne
   868b6:	b2e4      	uxtbne	r4, r4
   868b8:	e5a6      	b.n	86408 <_svfprintf_r+0xf80>
   868ba:	4b50      	ldr	r3, [pc, #320]	; (869fc <_svfprintf_r+0x1574>)
   868bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   868be:	930f      	str	r3, [sp, #60]	; 0x3c
   868c0:	f7ff ba15 	b.w	85cee <_svfprintf_r+0x866>
   868c4:	232d      	movs	r3, #45	; 0x2d
   868c6:	461a      	mov	r2, r3
   868c8:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   868cc:	f7fe bfee 	b.w	858ac <_svfprintf_r+0x424>
   868d0:	464a      	mov	r2, r9
   868d2:	46d1      	mov	r9, sl
   868d4:	4692      	mov	sl, r2
   868d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   868d8:	3301      	adds	r3, #1
   868da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   868dc:	442c      	add	r4, r5
   868de:	2b07      	cmp	r3, #7
   868e0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   868e4:	e9c8 2500 	strd	r2, r5, [r8]
   868e8:	dc3b      	bgt.n	86962 <_svfprintf_r+0x14da>
   868ea:	f108 0808 	add.w	r8, r8, #8
   868ee:	f7ff bb8c 	b.w	8600a <_svfprintf_r+0xb82>
   868f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   868f4:	991c      	ldr	r1, [sp, #112]	; 0x70
   868f6:	1aff      	subs	r7, r7, r3
   868f8:	461a      	mov	r2, r3
   868fa:	4638      	mov	r0, r7
   868fc:	f7fe fd90 	bl	85420 <strncpy>
   86900:	f898 3001 	ldrb.w	r3, [r8, #1]
   86904:	b10b      	cbz	r3, 8690a <_svfprintf_r+0x1482>
   86906:	f108 0801 	add.w	r8, r8, #1
   8690a:	220a      	movs	r2, #10
   8690c:	2300      	movs	r3, #0
   8690e:	4620      	mov	r0, r4
   86910:	4629      	mov	r1, r5
   86912:	f005 f917 	bl	8bb44 <__aeabi_uldivmod>
   86916:	f04f 0b00 	mov.w	fp, #0
   8691a:	e6a6      	b.n	8666a <_svfprintf_r+0x11e2>
   8691c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8691e:	18bd      	adds	r5, r7, r2
   86920:	1bad      	subs	r5, r5, r6
   86922:	1ad3      	subs	r3, r2, r3
   86924:	429d      	cmp	r5, r3
   86926:	bfa8      	it	ge
   86928:	461d      	movge	r5, r3
   8692a:	f7ff bba0 	b.w	8606e <_svfprintf_r+0xbe6>
   8692e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86930:	990a      	ldr	r1, [sp, #40]	; 0x28
   86932:	f853 2b04 	ldr.w	r2, [r3], #4
   86936:	465f      	mov	r7, fp
   86938:	8011      	strh	r1, [r2, #0]
   8693a:	930e      	str	r3, [sp, #56]	; 0x38
   8693c:	f7fe bf72 	b.w	85824 <_svfprintf_r+0x39c>
   86940:	4651      	mov	r1, sl
   86942:	4648      	mov	r0, r9
   86944:	aa2a      	add	r2, sp, #168	; 0xa8
   86946:	f004 f98b 	bl	8ac60 <__ssprint_r>
   8694a:	2800      	cmp	r0, #0
   8694c:	f47f a9e4 	bne.w	85d18 <_svfprintf_r+0x890>
   86950:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86954:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86956:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8695a:	e747      	b.n	867ec <_svfprintf_r+0x1364>
   8695c:	2306      	movs	r3, #6
   8695e:	9309      	str	r3, [sp, #36]	; 0x24
   86960:	e482      	b.n	86268 <_svfprintf_r+0xde0>
   86962:	4651      	mov	r1, sl
   86964:	4648      	mov	r0, r9
   86966:	aa2a      	add	r2, sp, #168	; 0xa8
   86968:	f004 f97a 	bl	8ac60 <__ssprint_r>
   8696c:	2800      	cmp	r0, #0
   8696e:	f47f a9d3 	bne.w	85d18 <_svfprintf_r+0x890>
   86972:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86974:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86978:	f7ff bb47 	b.w	8600a <_svfprintf_r+0xb82>
   8697c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8697e:	971a      	str	r7, [sp, #104]	; 0x68
   86980:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86982:	4690      	mov	r8, r2
   86984:	18fb      	adds	r3, r7, r3
   86986:	429e      	cmp	r6, r3
   86988:	4632      	mov	r2, r6
   8698a:	bf28      	it	cs
   8698c:	461a      	movcs	r2, r3
   8698e:	4604      	mov	r4, r0
   86990:	4616      	mov	r6, r2
   86992:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86996:	f7ff bb3f 	b.w	86018 <_svfprintf_r+0xb90>
   8699a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8699c:	1cd8      	adds	r0, r3, #3
   8699e:	9310      	str	r3, [sp, #64]	; 0x40
   869a0:	db02      	blt.n	869a8 <_svfprintf_r+0x1520>
   869a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   869a4:	4293      	cmp	r3, r2
   869a6:	dd04      	ble.n	869b2 <_svfprintf_r+0x152a>
   869a8:	3e02      	subs	r6, #2
   869aa:	f026 0320 	bic.w	r3, r6, #32
   869ae:	9308      	str	r3, [sp, #32]
   869b0:	e49b      	b.n	862ea <_svfprintf_r+0xe62>
   869b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   869b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   869b6:	428b      	cmp	r3, r1
   869b8:	f2c0 817a 	blt.w	86cb0 <_svfprintf_r+0x1828>
   869bc:	07ea      	lsls	r2, r5, #31
   869be:	f140 8283 	bpl.w	86ec8 <_svfprintf_r+0x1a40>
   869c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   869c4:	4413      	add	r3, r2
   869c6:	930c      	str	r3, [sp, #48]	; 0x30
   869c8:	056e      	lsls	r6, r5, #21
   869ca:	f140 8277 	bpl.w	86ebc <_svfprintf_r+0x1a34>
   869ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   869d0:	2b00      	cmp	r3, #0
   869d2:	f300 8210 	bgt.w	86df6 <_svfprintf_r+0x196e>
   869d6:	2667      	movs	r6, #103	; 0x67
   869d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   869da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   869de:	9308      	str	r3, [sp, #32]
   869e0:	2300      	movs	r3, #0
   869e2:	9312      	str	r3, [sp, #72]	; 0x48
   869e4:	9316      	str	r3, [sp, #88]	; 0x58
   869e6:	e4e4      	b.n	863b2 <_svfprintf_r+0xf2a>
   869e8:	222d      	movs	r2, #45	; 0x2d
   869ea:	2300      	movs	r3, #0
   869ec:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   869f0:	9309      	str	r3, [sp, #36]	; 0x24
   869f2:	f7fe bf70 	b.w	858d6 <_svfprintf_r+0x44e>
   869f6:	bf00      	nop
   869f8:	0008bfdc 	.word	0x0008bfdc
   869fc:	0008bff0 	.word	0x0008bff0
   86a00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86a02:	42a3      	cmp	r3, r4
   86a04:	f4bf ac65 	bcs.w	862d2 <_svfprintf_r+0xe4a>
   86a08:	2130      	movs	r1, #48	; 0x30
   86a0a:	1c5a      	adds	r2, r3, #1
   86a0c:	9228      	str	r2, [sp, #160]	; 0xa0
   86a0e:	7019      	strb	r1, [r3, #0]
   86a10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86a12:	429c      	cmp	r4, r3
   86a14:	d8f9      	bhi.n	86a0a <_svfprintf_r+0x1582>
   86a16:	e45c      	b.n	862d2 <_svfprintf_r+0xe4a>
   86a18:	4651      	mov	r1, sl
   86a1a:	4648      	mov	r0, r9
   86a1c:	aa2a      	add	r2, sp, #168	; 0xa8
   86a1e:	f004 f91f 	bl	8ac60 <__ssprint_r>
   86a22:	2800      	cmp	r0, #0
   86a24:	f47f a978 	bne.w	85d18 <_svfprintf_r+0x890>
   86a28:	783b      	ldrb	r3, [r7, #0]
   86a2a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   86a2c:	aa2d      	add	r2, sp, #180	; 0xb4
   86a2e:	441e      	add	r6, r3
   86a30:	e5a4      	b.n	8657c <_svfprintf_r+0x10f4>
   86a32:	4651      	mov	r1, sl
   86a34:	4648      	mov	r0, r9
   86a36:	aa2a      	add	r2, sp, #168	; 0xa8
   86a38:	f004 f912 	bl	8ac60 <__ssprint_r>
   86a3c:	2800      	cmp	r0, #0
   86a3e:	f47f a96b 	bne.w	85d18 <_svfprintf_r+0x890>
   86a42:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86a44:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86a48:	f7ff bad7 	b.w	85ffa <_svfprintf_r+0xb72>
   86a4c:	4651      	mov	r1, sl
   86a4e:	4648      	mov	r0, r9
   86a50:	aa2a      	add	r2, sp, #168	; 0xa8
   86a52:	f004 f905 	bl	8ac60 <__ssprint_r>
   86a56:	2800      	cmp	r0, #0
   86a58:	f47f a95e 	bne.w	85d18 <_svfprintf_r+0x890>
   86a5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86a5e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86a60:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86a64:	f7ff baee 	b.w	86044 <_svfprintf_r+0xbbc>
   86a68:	9c09      	ldr	r4, [sp, #36]	; 0x24
   86a6a:	a928      	add	r1, sp, #160	; 0xa0
   86a6c:	e9cd 0400 	strd	r0, r4, [sp]
   86a70:	9104      	str	r1, [sp, #16]
   86a72:	a825      	add	r0, sp, #148	; 0x94
   86a74:	a924      	add	r1, sp, #144	; 0x90
   86a76:	e9cd 1002 	strd	r1, r0, [sp, #8]
   86a7a:	4648      	mov	r0, r9
   86a7c:	f001 facc 	bl	88018 <_dtoa_r>
   86a80:	2d47      	cmp	r5, #71	; 0x47
   86a82:	4607      	mov	r7, r0
   86a84:	d119      	bne.n	86aba <_svfprintf_r+0x1632>
   86a86:	9d07      	ldr	r5, [sp, #28]
   86a88:	462b      	mov	r3, r5
   86a8a:	07db      	lsls	r3, r3, #31
   86a8c:	f100 812a 	bmi.w	86ce4 <_svfprintf_r+0x185c>
   86a90:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86a92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86a94:	9207      	str	r2, [sp, #28]
   86a96:	2247      	movs	r2, #71	; 0x47
   86a98:	9208      	str	r2, [sp, #32]
   86a9a:	e41a      	b.n	862d2 <_svfprintf_r+0xe4a>
   86a9c:	2003      	movs	r0, #3
   86a9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   86aa0:	a928      	add	r1, sp, #160	; 0xa0
   86aa2:	e9cd 0400 	strd	r0, r4, [sp]
   86aa6:	9104      	str	r1, [sp, #16]
   86aa8:	a825      	add	r0, sp, #148	; 0x94
   86aaa:	a924      	add	r1, sp, #144	; 0x90
   86aac:	e9cd 1002 	strd	r1, r0, [sp, #8]
   86ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86ab2:	4648      	mov	r0, r9
   86ab4:	f001 fab0 	bl	88018 <_dtoa_r>
   86ab8:	4607      	mov	r7, r0
   86aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86abc:	2d46      	cmp	r5, #70	; 0x46
   86abe:	eb07 0403 	add.w	r4, r7, r3
   86ac2:	f47f abf9 	bne.w	862b8 <_svfprintf_r+0xe30>
   86ac6:	783b      	ldrb	r3, [r7, #0]
   86ac8:	2b30      	cmp	r3, #48	; 0x30
   86aca:	f000 821c 	beq.w	86f06 <_svfprintf_r+0x1a7e>
   86ace:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86ad2:	9d07      	ldr	r5, [sp, #28]
   86ad4:	441c      	add	r4, r3
   86ad6:	9207      	str	r2, [sp, #28]
   86ad8:	f7ff bbf1 	b.w	862be <_svfprintf_r+0xe36>
   86adc:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86ae0:	f7ff b9c3 	b.w	85e6a <_svfprintf_r+0x9e2>
   86ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86ae6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86aea:	9308      	str	r3, [sp, #32]
   86aec:	930c      	str	r3, [sp, #48]	; 0x30
   86aee:	9009      	str	r0, [sp, #36]	; 0x24
   86af0:	940e      	str	r4, [sp, #56]	; 0x38
   86af2:	9012      	str	r0, [sp, #72]	; 0x48
   86af4:	9016      	str	r0, [sp, #88]	; 0x58
   86af6:	9010      	str	r0, [sp, #64]	; 0x40
   86af8:	f7fe beea 	b.w	858d0 <_svfprintf_r+0x448>
   86afc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86afe:	2a00      	cmp	r2, #0
   86b00:	9210      	str	r2, [sp, #64]	; 0x40
   86b02:	f340 821b 	ble.w	86f3c <_svfprintf_r+0x1ab4>
   86b06:	9909      	ldr	r1, [sp, #36]	; 0x24
   86b08:	f005 0301 	and.w	r3, r5, #1
   86b0c:	430b      	orrs	r3, r1
   86b0e:	f040 819a 	bne.w	86e46 <_svfprintf_r+0x19be>
   86b12:	2666      	movs	r6, #102	; 0x66
   86b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86b16:	930c      	str	r3, [sp, #48]	; 0x30
   86b18:	056a      	lsls	r2, r5, #21
   86b1a:	f100 816d 	bmi.w	86df8 <_svfprintf_r+0x1970>
   86b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86b20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86b24:	9308      	str	r3, [sp, #32]
   86b26:	e75b      	b.n	869e0 <_svfprintf_r+0x1558>
   86b28:	4651      	mov	r1, sl
   86b2a:	4648      	mov	r0, r9
   86b2c:	aa2a      	add	r2, sp, #168	; 0xa8
   86b2e:	f004 f897 	bl	8ac60 <__ssprint_r>
   86b32:	2800      	cmp	r0, #0
   86b34:	f47f a8f0 	bne.w	85d18 <_svfprintf_r+0x890>
   86b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86b3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86b3c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86b3e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86b42:	1ad3      	subs	r3, r2, r3
   86b44:	f7ff ba93 	b.w	8606e <_svfprintf_r+0xbe6>
   86b48:	2330      	movs	r3, #48	; 0x30
   86b4a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   86b4e:	2358      	movs	r3, #88	; 0x58
   86b50:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   86b54:	9b07      	ldr	r3, [sp, #28]
   86b56:	f043 0402 	orr.w	r4, r3, #2
   86b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86b5c:	2b63      	cmp	r3, #99	; 0x63
   86b5e:	f300 80f2 	bgt.w	86d46 <_svfprintf_r+0x18be>
   86b62:	2300      	movs	r3, #0
   86b64:	af3d      	add	r7, sp, #244	; 0xf4
   86b66:	930d      	str	r3, [sp, #52]	; 0x34
   86b68:	9b07      	ldr	r3, [sp, #28]
   86b6a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86b6e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   86b72:	9312      	str	r3, [sp, #72]	; 0x48
   86b74:	4613      	mov	r3, r2
   86b76:	2b00      	cmp	r3, #0
   86b78:	f026 0520 	bic.w	r5, r6, #32
   86b7c:	9407      	str	r4, [sp, #28]
   86b7e:	f2c0 808d 	blt.w	86c9c <_svfprintf_r+0x1814>
   86b82:	930f      	str	r3, [sp, #60]	; 0x3c
   86b84:	2300      	movs	r3, #0
   86b86:	9508      	str	r5, [sp, #32]
   86b88:	910c      	str	r1, [sp, #48]	; 0x30
   86b8a:	931e      	str	r3, [sp, #120]	; 0x78
   86b8c:	2e61      	cmp	r6, #97	; 0x61
   86b8e:	f000 817d 	beq.w	86e8c <_svfprintf_r+0x1a04>
   86b92:	2e41      	cmp	r6, #65	; 0x41
   86b94:	f47f ab77 	bne.w	86286 <_svfprintf_r+0xdfe>
   86b98:	aa24      	add	r2, sp, #144	; 0x90
   86b9a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86b9e:	f003 ffcf 	bl	8ab40 <frexp>
   86ba2:	2200      	movs	r2, #0
   86ba4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86ba8:	f004 fcf4 	bl	8b594 <__aeabi_dmul>
   86bac:	4604      	mov	r4, r0
   86bae:	460d      	mov	r5, r1
   86bb0:	2200      	movs	r2, #0
   86bb2:	2300      	movs	r3, #0
   86bb4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   86bb8:	f004 ff54 	bl	8ba64 <__aeabi_dcmpeq>
   86bbc:	b108      	cbz	r0, 86bc2 <_svfprintf_r+0x173a>
   86bbe:	2301      	movs	r3, #1
   86bc0:	9324      	str	r3, [sp, #144]	; 0x90
   86bc2:	4bae      	ldr	r3, [pc, #696]	; (86e7c <_svfprintf_r+0x19f4>)
   86bc4:	930c      	str	r3, [sp, #48]	; 0x30
   86bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86bc8:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   86bcc:	3b01      	subs	r3, #1
   86bce:	9613      	str	r6, [sp, #76]	; 0x4c
   86bd0:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   86bd4:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   86bd8:	9721      	str	r7, [sp, #132]	; 0x84
   86bda:	46ba      	mov	sl, r7
   86bdc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   86be0:	4699      	mov	r9, r3
   86be2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86be6:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   86bea:	e006      	b.n	86bfa <_svfprintf_r+0x1772>
   86bec:	2200      	movs	r2, #0
   86bee:	2300      	movs	r3, #0
   86bf0:	f004 ff38 	bl	8ba64 <__aeabi_dcmpeq>
   86bf4:	f109 39ff 	add.w	r9, r9, #4294967295
   86bf8:	b9e8      	cbnz	r0, 86c36 <_svfprintf_r+0x17ae>
   86bfa:	2200      	movs	r2, #0
   86bfc:	4ba0      	ldr	r3, [pc, #640]	; (86e80 <_svfprintf_r+0x19f8>)
   86bfe:	4630      	mov	r0, r6
   86c00:	4639      	mov	r1, r7
   86c02:	f004 fcc7 	bl	8b594 <__aeabi_dmul>
   86c06:	460d      	mov	r5, r1
   86c08:	4604      	mov	r4, r0
   86c0a:	f004 ff73 	bl	8baf4 <__aeabi_d2iz>
   86c0e:	4680      	mov	r8, r0
   86c10:	f004 fc56 	bl	8b4c0 <__aeabi_i2d>
   86c14:	460b      	mov	r3, r1
   86c16:	4602      	mov	r2, r0
   86c18:	4629      	mov	r1, r5
   86c1a:	4620      	mov	r0, r4
   86c1c:	f004 fb02 	bl	8b224 <__aeabi_dsub>
   86c20:	f81b 3008 	ldrb.w	r3, [fp, r8]
   86c24:	f1b9 3fff 	cmp.w	r9, #4294967295
   86c28:	4655      	mov	r5, sl
   86c2a:	4606      	mov	r6, r0
   86c2c:	460f      	mov	r7, r1
   86c2e:	464c      	mov	r4, r9
   86c30:	f80a 3b01 	strb.w	r3, [sl], #1
   86c34:	d1da      	bne.n	86bec <_svfprintf_r+0x1764>
   86c36:	4630      	mov	r0, r6
   86c38:	4639      	mov	r1, r7
   86c3a:	2200      	movs	r2, #0
   86c3c:	4b91      	ldr	r3, [pc, #580]	; (86e84 <_svfprintf_r+0x19fc>)
   86c3e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   86c42:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   86c44:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   86c48:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   86c4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86c50:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   86c54:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   86c58:	9f21      	ldr	r7, [sp, #132]	; 0x84
   86c5a:	f004 ff2b 	bl	8bab4 <__aeabi_dcmpgt>
   86c5e:	2800      	cmp	r0, #0
   86c60:	d155      	bne.n	86d0e <_svfprintf_r+0x1886>
   86c62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86c66:	2200      	movs	r2, #0
   86c68:	4b86      	ldr	r3, [pc, #536]	; (86e84 <_svfprintf_r+0x19fc>)
   86c6a:	f004 fefb 	bl	8ba64 <__aeabi_dcmpeq>
   86c6e:	b110      	cbz	r0, 86c76 <_svfprintf_r+0x17ee>
   86c70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86c72:	07db      	lsls	r3, r3, #31
   86c74:	d44b      	bmi.n	86d0e <_svfprintf_r+0x1886>
   86c76:	2c00      	cmp	r4, #0
   86c78:	db08      	blt.n	86c8c <_svfprintf_r+0x1804>
   86c7a:	2230      	movs	r2, #48	; 0x30
   86c7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86c7e:	1c63      	adds	r3, r4, #1
   86c80:	440b      	add	r3, r1
   86c82:	f801 2b01 	strb.w	r2, [r1], #1
   86c86:	428b      	cmp	r3, r1
   86c88:	d1fb      	bne.n	86c82 <_svfprintf_r+0x17fa>
   86c8a:	910f      	str	r1, [sp, #60]	; 0x3c
   86c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86c8e:	9d07      	ldr	r5, [sp, #28]
   86c90:	1bdb      	subs	r3, r3, r7
   86c92:	9313      	str	r3, [sp, #76]	; 0x4c
   86c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86c96:	9307      	str	r3, [sp, #28]
   86c98:	f7ff bb1d 	b.w	862d6 <_svfprintf_r+0xe4e>
   86c9c:	9508      	str	r5, [sp, #32]
   86c9e:	232d      	movs	r3, #45	; 0x2d
   86ca0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86ca4:	931e      	str	r3, [sp, #120]	; 0x78
   86ca6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   86caa:	910c      	str	r1, [sp, #48]	; 0x30
   86cac:	930f      	str	r3, [sp, #60]	; 0x3c
   86cae:	e76d      	b.n	86b8c <_svfprintf_r+0x1704>
   86cb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86cb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86cb4:	189a      	adds	r2, r3, r2
   86cb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86cb8:	920c      	str	r2, [sp, #48]	; 0x30
   86cba:	2b00      	cmp	r3, #0
   86cbc:	f340 811a 	ble.w	86ef4 <_svfprintf_r+0x1a6c>
   86cc0:	2667      	movs	r6, #103	; 0x67
   86cc2:	e729      	b.n	86b18 <_svfprintf_r+0x1690>
   86cc4:	2300      	movs	r3, #0
   86cc6:	9309      	str	r3, [sp, #36]	; 0x24
   86cc8:	f7fe bc2b 	b.w	85522 <_svfprintf_r+0x9a>
   86ccc:	4648      	mov	r0, r9
   86cce:	4651      	mov	r1, sl
   86cd0:	aa2a      	add	r2, sp, #168	; 0xa8
   86cd2:	f003 ffc5 	bl	8ac60 <__ssprint_r>
   86cd6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   86cda:	f7fe bdae 	b.w	8583a <_svfprintf_r+0x3b2>
   86cde:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ce0:	f7ff b95f 	b.w	85fa2 <_svfprintf_r+0xb1a>
   86ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86ce6:	9d07      	ldr	r5, [sp, #28]
   86ce8:	18fc      	adds	r4, r7, r3
   86cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86cec:	9307      	str	r3, [sp, #28]
   86cee:	2347      	movs	r3, #71	; 0x47
   86cf0:	9308      	str	r3, [sp, #32]
   86cf2:	f7ff bae4 	b.w	862be <_svfprintf_r+0xe36>
   86cf6:	46cb      	mov	fp, r9
   86cf8:	46d1      	mov	r9, sl
   86cfa:	f7ff b80e 	b.w	85d1a <_svfprintf_r+0x892>
   86cfe:	46d1      	mov	r9, sl
   86d00:	f7ff b80b 	b.w	85d1a <_svfprintf_r+0x892>
   86d04:	4b60      	ldr	r3, [pc, #384]	; (86e88 <_svfprintf_r+0x1a00>)
   86d06:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86d08:	930f      	str	r3, [sp, #60]	; 0x3c
   86d0a:	f7fe bfb7 	b.w	85c7c <_svfprintf_r+0x7f4>
   86d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86d10:	990c      	ldr	r1, [sp, #48]	; 0x30
   86d12:	9528      	str	r5, [sp, #160]	; 0xa0
   86d14:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   86d18:	7bc9      	ldrb	r1, [r1, #15]
   86d1a:	428a      	cmp	r2, r1
   86d1c:	f040 812a 	bne.w	86f74 <_svfprintf_r+0x1aec>
   86d20:	2030      	movs	r0, #48	; 0x30
   86d22:	f803 0c01 	strb.w	r0, [r3, #-1]
   86d26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86d28:	1e5a      	subs	r2, r3, #1
   86d2a:	9228      	str	r2, [sp, #160]	; 0xa0
   86d2c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   86d30:	4291      	cmp	r1, r2
   86d32:	d0f6      	beq.n	86d22 <_svfprintf_r+0x189a>
   86d34:	2a39      	cmp	r2, #57	; 0x39
   86d36:	bf0b      	itete	eq
   86d38:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   86d3a:	3201      	addne	r2, #1
   86d3c:	7a92      	ldrbeq	r2, [r2, #10]
   86d3e:	b2d2      	uxtbne	r2, r2
   86d40:	f803 2c01 	strb.w	r2, [r3, #-1]
   86d44:	e7a2      	b.n	86c8c <_svfprintf_r+0x1804>
   86d46:	4648      	mov	r0, r9
   86d48:	1c59      	adds	r1, r3, #1
   86d4a:	f002 fe13 	bl	89974 <_malloc_r>
   86d4e:	4607      	mov	r7, r0
   86d50:	2800      	cmp	r0, #0
   86d52:	f000 811d 	beq.w	86f90 <_svfprintf_r+0x1b08>
   86d56:	900d      	str	r0, [sp, #52]	; 0x34
   86d58:	e706      	b.n	86b68 <_svfprintf_r+0x16e0>
   86d5a:	2330      	movs	r3, #48	; 0x30
   86d5c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   86d60:	2378      	movs	r3, #120	; 0x78
   86d62:	e6f5      	b.n	86b50 <_svfprintf_r+0x16c8>
   86d64:	9b07      	ldr	r3, [sp, #28]
   86d66:	9308      	str	r3, [sp, #32]
   86d68:	f7ff b894 	b.w	85e94 <_svfprintf_r+0xa0c>
   86d6c:	464a      	mov	r2, r9
   86d6e:	46d1      	mov	r9, sl
   86d70:	4692      	mov	sl, r2
   86d72:	9f09      	ldr	r7, [sp, #36]	; 0x24
   86d74:	3301      	adds	r3, #1
   86d76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86d78:	442c      	add	r4, r5
   86d7a:	2b07      	cmp	r3, #7
   86d7c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86d80:	e9c8 2500 	strd	r2, r5, [r8]
   86d84:	f77f a8b8 	ble.w	85ef8 <_svfprintf_r+0xa70>
   86d88:	4651      	mov	r1, sl
   86d8a:	4648      	mov	r0, r9
   86d8c:	aa2a      	add	r2, sp, #168	; 0xa8
   86d8e:	f003 ff67 	bl	8ac60 <__ssprint_r>
   86d92:	2800      	cmp	r0, #0
   86d94:	f47e afc0 	bne.w	85d18 <_svfprintf_r+0x890>
   86d98:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86d9c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86da0:	f7ff b8ac 	b.w	85efc <_svfprintf_r+0xa74>
   86da4:	2b00      	cmp	r3, #0
   86da6:	bf08      	it	eq
   86da8:	2301      	moveq	r3, #1
   86daa:	9309      	str	r3, [sp, #36]	; 0x24
   86dac:	9b07      	ldr	r3, [sp, #28]
   86dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86db2:	9312      	str	r3, [sp, #72]	; 0x48
   86db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86db6:	2b00      	cmp	r3, #0
   86db8:	930c      	str	r3, [sp, #48]	; 0x30
   86dba:	f2c0 80bd 	blt.w	86f38 <_svfprintf_r+0x1ab0>
   86dbe:	2402      	movs	r4, #2
   86dc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   86dc2:	a828      	add	r0, sp, #160	; 0xa0
   86dc4:	aa25      	add	r2, sp, #148	; 0x94
   86dc6:	ab24      	add	r3, sp, #144	; 0x90
   86dc8:	e9cd 2003 	strd	r2, r0, [sp, #12]
   86dcc:	e9cd 4500 	strd	r4, r5, [sp]
   86dd0:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   86dd4:	9302      	str	r3, [sp, #8]
   86dd6:	4622      	mov	r2, r4
   86dd8:	462b      	mov	r3, r5
   86dda:	4648      	mov	r0, r9
   86ddc:	911e      	str	r1, [sp, #120]	; 0x78
   86dde:	f001 f91b 	bl	88018 <_dtoa_r>
   86de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86de4:	4607      	mov	r7, r0
   86de6:	930f      	str	r3, [sp, #60]	; 0x3c
   86de8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86dea:	940c      	str	r4, [sp, #48]	; 0x30
   86dec:	930d      	str	r3, [sp, #52]	; 0x34
   86dee:	e64a      	b.n	86a86 <_svfprintf_r+0x15fe>
   86df0:	2300      	movs	r3, #0
   86df2:	930d      	str	r3, [sp, #52]	; 0x34
   86df4:	e753      	b.n	86c9e <_svfprintf_r+0x1816>
   86df6:	2667      	movs	r6, #103	; 0x67
   86df8:	991a      	ldr	r1, [sp, #104]	; 0x68
   86dfa:	780b      	ldrb	r3, [r1, #0]
   86dfc:	2bff      	cmp	r3, #255	; 0xff
   86dfe:	f000 80de 	beq.w	86fbe <_svfprintf_r+0x1b36>
   86e02:	2400      	movs	r4, #0
   86e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
   86e06:	4620      	mov	r0, r4
   86e08:	e003      	b.n	86e12 <_svfprintf_r+0x198a>
   86e0a:	3001      	adds	r0, #1
   86e0c:	3101      	adds	r1, #1
   86e0e:	2bff      	cmp	r3, #255	; 0xff
   86e10:	d008      	beq.n	86e24 <_svfprintf_r+0x199c>
   86e12:	4293      	cmp	r3, r2
   86e14:	da06      	bge.n	86e24 <_svfprintf_r+0x199c>
   86e16:	1ad2      	subs	r2, r2, r3
   86e18:	784b      	ldrb	r3, [r1, #1]
   86e1a:	2b00      	cmp	r3, #0
   86e1c:	d1f5      	bne.n	86e0a <_svfprintf_r+0x1982>
   86e1e:	780b      	ldrb	r3, [r1, #0]
   86e20:	3401      	adds	r4, #1
   86e22:	e7f4      	b.n	86e0e <_svfprintf_r+0x1986>
   86e24:	911a      	str	r1, [sp, #104]	; 0x68
   86e26:	9210      	str	r2, [sp, #64]	; 0x40
   86e28:	9016      	str	r0, [sp, #88]	; 0x58
   86e2a:	9412      	str	r4, [sp, #72]	; 0x48
   86e2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86e2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86e30:	990c      	ldr	r1, [sp, #48]	; 0x30
   86e32:	4413      	add	r3, r2
   86e34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   86e36:	fb02 1303 	mla	r3, r2, r3, r1
   86e3a:	930c      	str	r3, [sp, #48]	; 0x30
   86e3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86e40:	9308      	str	r3, [sp, #32]
   86e42:	f7ff bab6 	b.w	863b2 <_svfprintf_r+0xf2a>
   86e46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86e48:	2666      	movs	r6, #102	; 0x66
   86e4a:	18d3      	adds	r3, r2, r3
   86e4c:	4419      	add	r1, r3
   86e4e:	910c      	str	r1, [sp, #48]	; 0x30
   86e50:	e662      	b.n	86b18 <_svfprintf_r+0x1690>
   86e52:	f106 020f 	add.w	r2, r6, #15
   86e56:	2101      	movs	r1, #1
   86e58:	b2d2      	uxtb	r2, r2
   86e5a:	f7ff ba4f 	b.w	862fc <_svfprintf_r+0xe74>
   86e5e:	2900      	cmp	r1, #0
   86e60:	d167      	bne.n	86f32 <_svfprintf_r+0x1aaa>
   86e62:	2230      	movs	r2, #48	; 0x30
   86e64:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   86e68:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   86e6c:	3330      	adds	r3, #48	; 0x30
   86e6e:	f802 3b01 	strb.w	r3, [r2], #1
   86e72:	ab26      	add	r3, sp, #152	; 0x98
   86e74:	1ad3      	subs	r3, r2, r3
   86e76:	931b      	str	r3, [sp, #108]	; 0x6c
   86e78:	f7ff ba83 	b.w	86382 <_svfprintf_r+0xefa>
   86e7c:	0008bfc0 	.word	0x0008bfc0
   86e80:	40300000 	.word	0x40300000
   86e84:	3fe00000 	.word	0x3fe00000
   86e88:	0008bff0 	.word	0x0008bff0
   86e8c:	aa24      	add	r2, sp, #144	; 0x90
   86e8e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86e92:	f003 fe55 	bl	8ab40 <frexp>
   86e96:	2200      	movs	r2, #0
   86e98:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86e9c:	f004 fb7a 	bl	8b594 <__aeabi_dmul>
   86ea0:	4604      	mov	r4, r0
   86ea2:	460d      	mov	r5, r1
   86ea4:	2200      	movs	r2, #0
   86ea6:	2300      	movs	r3, #0
   86ea8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   86eac:	f004 fdda 	bl	8ba64 <__aeabi_dcmpeq>
   86eb0:	b108      	cbz	r0, 86eb6 <_svfprintf_r+0x1a2e>
   86eb2:	2301      	movs	r3, #1
   86eb4:	9324      	str	r3, [sp, #144]	; 0x90
   86eb6:	4b44      	ldr	r3, [pc, #272]	; (86fc8 <_svfprintf_r+0x1b40>)
   86eb8:	930c      	str	r3, [sp, #48]	; 0x30
   86eba:	e684      	b.n	86bc6 <_svfprintf_r+0x173e>
   86ebc:	2667      	movs	r6, #103	; 0x67
   86ebe:	e62e      	b.n	86b1e <_svfprintf_r+0x1696>
   86ec0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   86ec4:	f7fe bcb9 	b.w	8583a <_svfprintf_r+0x3b2>
   86ec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86eca:	930c      	str	r3, [sp, #48]	; 0x30
   86ecc:	e57c      	b.n	869c8 <_svfprintf_r+0x1540>
   86ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86ed0:	2003      	movs	r0, #3
   86ed2:	2b00      	cmp	r3, #0
   86ed4:	bfb8      	it	lt
   86ed6:	232d      	movlt	r3, #45	; 0x2d
   86ed8:	f04f 0100 	mov.w	r1, #0
   86edc:	bfba      	itte	lt
   86ede:	461a      	movlt	r2, r3
   86ee0:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   86ee4:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   86ee8:	4f38      	ldr	r7, [pc, #224]	; (86fcc <_svfprintf_r+0x1b44>)
   86eea:	4b39      	ldr	r3, [pc, #228]	; (86fd0 <_svfprintf_r+0x1b48>)
   86eec:	9008      	str	r0, [sp, #32]
   86eee:	910d      	str	r1, [sp, #52]	; 0x34
   86ef0:	f7fe bce2 	b.w	858b8 <_svfprintf_r+0x430>
   86ef4:	f1c3 0301 	rsb	r3, r3, #1
   86ef8:	441a      	add	r2, r3
   86efa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86efe:	2667      	movs	r6, #103	; 0x67
   86f00:	920c      	str	r2, [sp, #48]	; 0x30
   86f02:	9308      	str	r3, [sp, #32]
   86f04:	e56c      	b.n	869e0 <_svfprintf_r+0x1558>
   86f06:	2200      	movs	r2, #0
   86f08:	2300      	movs	r3, #0
   86f0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86f0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86f0e:	f004 fda9 	bl	8ba64 <__aeabi_dcmpeq>
   86f12:	2800      	cmp	r0, #0
   86f14:	f47f addb 	bne.w	86ace <_svfprintf_r+0x1646>
   86f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86f1a:	f1c3 0301 	rsb	r3, r3, #1
   86f1e:	9324      	str	r3, [sp, #144]	; 0x90
   86f20:	e5d6      	b.n	86ad0 <_svfprintf_r+0x1648>
   86f22:	992b      	ldr	r1, [sp, #172]	; 0xac
   86f24:	f7ff bb59 	b.w	865da <_svfprintf_r+0x1152>
   86f28:	07e9      	lsls	r1, r5, #31
   86f2a:	f57f aa35 	bpl.w	86398 <_svfprintf_r+0xf10>
   86f2e:	f7ff ba2f 	b.w	86390 <_svfprintf_r+0xf08>
   86f32:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   86f36:	e799      	b.n	86e6c <_svfprintf_r+0x19e4>
   86f38:	900d      	str	r0, [sp, #52]	; 0x34
   86f3a:	e6b0      	b.n	86c9e <_svfprintf_r+0x1816>
   86f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86f3e:	f005 0501 	and.w	r5, r5, #1
   86f42:	4613      	mov	r3, r2
   86f44:	432b      	orrs	r3, r5
   86f46:	d104      	bne.n	86f52 <_svfprintf_r+0x1aca>
   86f48:	2301      	movs	r3, #1
   86f4a:	2666      	movs	r6, #102	; 0x66
   86f4c:	9308      	str	r3, [sp, #32]
   86f4e:	930c      	str	r3, [sp, #48]	; 0x30
   86f50:	e546      	b.n	869e0 <_svfprintf_r+0x1558>
   86f52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86f54:	2666      	movs	r6, #102	; 0x66
   86f56:	3301      	adds	r3, #1
   86f58:	441a      	add	r2, r3
   86f5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86f5e:	920c      	str	r2, [sp, #48]	; 0x30
   86f60:	9308      	str	r3, [sp, #32]
   86f62:	e53d      	b.n	869e0 <_svfprintf_r+0x1558>
   86f64:	4b1b      	ldr	r3, [pc, #108]	; (86fd4 <_svfprintf_r+0x1b4c>)
   86f66:	930f      	str	r3, [sp, #60]	; 0x3c
   86f68:	f7ff bbe9 	b.w	8673e <_svfprintf_r+0x12b6>
   86f6c:	4a19      	ldr	r2, [pc, #100]	; (86fd4 <_svfprintf_r+0x1b4c>)
   86f6e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86f70:	920f      	str	r2, [sp, #60]	; 0x3c
   86f72:	e4b1      	b.n	868d8 <_svfprintf_r+0x1450>
   86f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86f76:	e6dd      	b.n	86d34 <_svfprintf_r+0x18ac>
   86f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f7a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   86f7e:	f853 0b04 	ldr.w	r0, [r3], #4
   86f82:	4693      	mov	fp, r2
   86f84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86f88:	9009      	str	r0, [sp, #36]	; 0x24
   86f8a:	930e      	str	r3, [sp, #56]	; 0x38
   86f8c:	f7fe bac7 	b.w	8551e <_svfprintf_r+0x96>
   86f90:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   86f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86f98:	f8aa 300c 	strh.w	r3, [sl, #12]
   86f9c:	f7fe bc4d 	b.w	8583a <_svfprintf_r+0x3b2>
   86fa0:	4a0c      	ldr	r2, [pc, #48]	; (86fd4 <_svfprintf_r+0x1b4c>)
   86fa2:	920f      	str	r2, [sp, #60]	; 0x3c
   86fa4:	e6e6      	b.n	86d74 <_svfprintf_r+0x18ec>
   86fa6:	230c      	movs	r3, #12
   86fa8:	f04f 32ff 	mov.w	r2, #4294967295
   86fac:	f8c9 3000 	str.w	r3, [r9]
   86fb0:	920a      	str	r2, [sp, #40]	; 0x28
   86fb2:	f7fe bc49 	b.w	85848 <_svfprintf_r+0x3c0>
   86fb6:	2302      	movs	r3, #2
   86fb8:	931b      	str	r3, [sp, #108]	; 0x6c
   86fba:	f7ff b9e2 	b.w	86382 <_svfprintf_r+0xefa>
   86fbe:	2300      	movs	r3, #0
   86fc0:	9312      	str	r3, [sp, #72]	; 0x48
   86fc2:	9316      	str	r3, [sp, #88]	; 0x58
   86fc4:	e732      	b.n	86e2c <_svfprintf_r+0x19a4>
   86fc6:	bf00      	nop
   86fc8:	0008bfac 	.word	0x0008bfac
   86fcc:	0008bfa4 	.word	0x0008bfa4
   86fd0:	0008bfa8 	.word	0x0008bfa8
   86fd4:	0008bff0 	.word	0x0008bff0

00086fd8 <__sprint_r.part.0>:
   86fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86fdc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   86fde:	4690      	mov	r8, r2
   86fe0:	049c      	lsls	r4, r3, #18
   86fe2:	d52d      	bpl.n	87040 <__sprint_r.part.0+0x68>
   86fe4:	6893      	ldr	r3, [r2, #8]
   86fe6:	6812      	ldr	r2, [r2, #0]
   86fe8:	b343      	cbz	r3, 8703c <__sprint_r.part.0+0x64>
   86fea:	468b      	mov	fp, r1
   86fec:	4606      	mov	r6, r0
   86fee:	f102 0908 	add.w	r9, r2, #8
   86ff2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   86ff6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   86ffa:	d015      	beq.n	87028 <__sprint_r.part.0+0x50>
   86ffc:	2400      	movs	r4, #0
   86ffe:	3d04      	subs	r5, #4
   87000:	e001      	b.n	87006 <__sprint_r.part.0+0x2e>
   87002:	42a7      	cmp	r7, r4
   87004:	d00e      	beq.n	87024 <__sprint_r.part.0+0x4c>
   87006:	465a      	mov	r2, fp
   87008:	4630      	mov	r0, r6
   8700a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8700e:	f002 f8fb 	bl	89208 <_fputwc_r>
   87012:	1c43      	adds	r3, r0, #1
   87014:	f104 0401 	add.w	r4, r4, #1
   87018:	d1f3      	bne.n	87002 <__sprint_r.part.0+0x2a>
   8701a:	2300      	movs	r3, #0
   8701c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87024:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87028:	f02a 0a03 	bic.w	sl, sl, #3
   8702c:	eba3 030a 	sub.w	r3, r3, sl
   87030:	f8c8 3008 	str.w	r3, [r8, #8]
   87034:	f109 0908 	add.w	r9, r9, #8
   87038:	2b00      	cmp	r3, #0
   8703a:	d1da      	bne.n	86ff2 <__sprint_r.part.0+0x1a>
   8703c:	2000      	movs	r0, #0
   8703e:	e7ec      	b.n	8701a <__sprint_r.part.0+0x42>
   87040:	f002 fa6c 	bl	8951c <__sfvwrite_r>
   87044:	2300      	movs	r3, #0
   87046:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8704a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8704e:	bf00      	nop

00087050 <_vfiprintf_r>:
   87050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87054:	b0bb      	sub	sp, #236	; 0xec
   87056:	461c      	mov	r4, r3
   87058:	4689      	mov	r9, r1
   8705a:	4690      	mov	r8, r2
   8705c:	e9cd 3004 	strd	r3, r0, [sp, #16]
   87060:	b118      	cbz	r0, 8706a <_vfiprintf_r+0x1a>
   87062:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87064:	2b00      	cmp	r3, #0
   87066:	f000 827a 	beq.w	8755e <_vfiprintf_r+0x50e>
   8706a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8706e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   87072:	07de      	lsls	r6, r3, #31
   87074:	b28a      	uxth	r2, r1
   87076:	d402      	bmi.n	8707e <_vfiprintf_r+0x2e>
   87078:	058d      	lsls	r5, r1, #22
   8707a:	f140 851a 	bpl.w	87ab2 <_vfiprintf_r+0xa62>
   8707e:	0490      	lsls	r0, r2, #18
   87080:	d40a      	bmi.n	87098 <_vfiprintf_r+0x48>
   87082:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87086:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8708a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8708e:	f8a9 200c 	strh.w	r2, [r9, #12]
   87092:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   87096:	b292      	uxth	r2, r2
   87098:	0711      	lsls	r1, r2, #28
   8709a:	f140 80f6 	bpl.w	8728a <_vfiprintf_r+0x23a>
   8709e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   870a2:	2b00      	cmp	r3, #0
   870a4:	f000 80f1 	beq.w	8728a <_vfiprintf_r+0x23a>
   870a8:	f002 031a 	and.w	r3, r2, #26
   870ac:	2b0a      	cmp	r3, #10
   870ae:	f000 80fa 	beq.w	872a6 <_vfiprintf_r+0x256>
   870b2:	2300      	movs	r3, #0
   870b4:	46cb      	mov	fp, r9
   870b6:	e9cd 3308 	strd	r3, r3, [sp, #32]
   870ba:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   870be:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   870c2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   870c6:	9303      	str	r3, [sp, #12]
   870c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   870cc:	f898 3000 	ldrb.w	r3, [r8]
   870d0:	2b00      	cmp	r3, #0
   870d2:	f000 81ed 	beq.w	874b0 <_vfiprintf_r+0x460>
   870d6:	4644      	mov	r4, r8
   870d8:	e004      	b.n	870e4 <_vfiprintf_r+0x94>
   870da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   870de:	2b00      	cmp	r3, #0
   870e0:	f000 8127 	beq.w	87332 <_vfiprintf_r+0x2e2>
   870e4:	2b25      	cmp	r3, #37	; 0x25
   870e6:	d1f8      	bne.n	870da <_vfiprintf_r+0x8a>
   870e8:	ebb4 0508 	subs.w	r5, r4, r8
   870ec:	f040 8125 	bne.w	8733a <_vfiprintf_r+0x2ea>
   870f0:	7823      	ldrb	r3, [r4, #0]
   870f2:	2b00      	cmp	r3, #0
   870f4:	f000 81dc 	beq.w	874b0 <_vfiprintf_r+0x460>
   870f8:	f04f 0200 	mov.w	r2, #0
   870fc:	2300      	movs	r3, #0
   870fe:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   87102:	f04f 32ff 	mov.w	r2, #4294967295
   87106:	252b      	movs	r5, #43	; 0x2b
   87108:	461f      	mov	r7, r3
   8710a:	9302      	str	r3, [sp, #8]
   8710c:	7863      	ldrb	r3, [r4, #1]
   8710e:	f104 0801 	add.w	r8, r4, #1
   87112:	9200      	str	r2, [sp, #0]
   87114:	f108 0801 	add.w	r8, r8, #1
   87118:	f1a3 0220 	sub.w	r2, r3, #32
   8711c:	2a5a      	cmp	r2, #90	; 0x5a
   8711e:	f200 8141 	bhi.w	873a4 <_vfiprintf_r+0x354>
   87122:	e8df f012 	tbh	[pc, r2, lsl #1]
   87126:	0272      	.short	0x0272
   87128:	013f013f 	.word	0x013f013f
   8712c:	013f026d 	.word	0x013f026d
   87130:	013f013f 	.word	0x013f013f
   87134:	013f024b 	.word	0x013f024b
   87138:	006a013f 	.word	0x006a013f
   8713c:	013f0227 	.word	0x013f0227
   87140:	02310222 	.word	0x02310222
   87144:	022c013f 	.word	0x022c013f
   87148:	005b005b 	.word	0x005b005b
   8714c:	005b005b 	.word	0x005b005b
   87150:	005b005b 	.word	0x005b005b
   87154:	005b005b 	.word	0x005b005b
   87158:	013f005b 	.word	0x013f005b
   8715c:	013f013f 	.word	0x013f013f
   87160:	013f013f 	.word	0x013f013f
   87164:	013f013f 	.word	0x013f013f
   87168:	013f013f 	.word	0x013f013f
   8716c:	007a020e 	.word	0x007a020e
   87170:	013f013f 	.word	0x013f013f
   87174:	013f013f 	.word	0x013f013f
   87178:	013f013f 	.word	0x013f013f
   8717c:	013f013f 	.word	0x013f013f
   87180:	013f013f 	.word	0x013f013f
   87184:	013f00d7 	.word	0x013f00d7
   87188:	013f013f 	.word	0x013f013f
   8718c:	013f01f2 	.word	0x013f01f2
   87190:	013f0297 	.word	0x013f0297
   87194:	0500013f 	.word	0x0500013f
   87198:	013f013f 	.word	0x013f013f
   8719c:	013f013f 	.word	0x013f013f
   871a0:	013f013f 	.word	0x013f013f
   871a4:	013f013f 	.word	0x013f013f
   871a8:	013f013f 	.word	0x013f013f
   871ac:	007c020e 	.word	0x007c020e
   871b0:	013f013f 	.word	0x013f013f
   871b4:	028a013f 	.word	0x028a013f
   871b8:	0075007c 	.word	0x0075007c
   871bc:	027d013f 	.word	0x027d013f
   871c0:	02b6013f 	.word	0x02b6013f
   871c4:	02a600d9 	.word	0x02a600d9
   871c8:	013f0075 	.word	0x013f0075
   871cc:	007201f2 	.word	0x007201f2
   871d0:	013f04fe 	.word	0x013f04fe
   871d4:	051c013f 	.word	0x051c013f
   871d8:	0072013f 	.word	0x0072013f
   871dc:	2100      	movs	r1, #0
   871de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   871e2:	f818 3b01 	ldrb.w	r3, [r8], #1
   871e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   871ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   871ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   871f2:	2a09      	cmp	r2, #9
   871f4:	d9f5      	bls.n	871e2 <_vfiprintf_r+0x192>
   871f6:	9102      	str	r1, [sp, #8]
   871f8:	e78e      	b.n	87118 <_vfiprintf_r+0xc8>
   871fa:	9b04      	ldr	r3, [sp, #16]
   871fc:	f853 2b04 	ldr.w	r2, [r3], #4
   87200:	2a00      	cmp	r2, #0
   87202:	9202      	str	r2, [sp, #8]
   87204:	9304      	str	r3, [sp, #16]
   87206:	f2c0 81ad 	blt.w	87564 <_vfiprintf_r+0x514>
   8720a:	f898 3000 	ldrb.w	r3, [r8]
   8720e:	e781      	b.n	87114 <_vfiprintf_r+0xc4>
   87210:	f898 3000 	ldrb.w	r3, [r8]
   87214:	f047 0720 	orr.w	r7, r7, #32
   87218:	e77c      	b.n	87114 <_vfiprintf_r+0xc4>
   8721a:	f047 0710 	orr.w	r7, r7, #16
   8721e:	06bc      	lsls	r4, r7, #26
   87220:	f140 8158 	bpl.w	874d4 <_vfiprintf_r+0x484>
   87224:	9c04      	ldr	r4, [sp, #16]
   87226:	3407      	adds	r4, #7
   87228:	f024 0307 	bic.w	r3, r4, #7
   8722c:	4619      	mov	r1, r3
   8722e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   87232:	4614      	mov	r4, r2
   87234:	461d      	mov	r5, r3
   87236:	9104      	str	r1, [sp, #16]
   87238:	2a00      	cmp	r2, #0
   8723a:	f173 0300 	sbcs.w	r3, r3, #0
   8723e:	f2c0 841e 	blt.w	87a7e <_vfiprintf_r+0xa2e>
   87242:	9b00      	ldr	r3, [sp, #0]
   87244:	3301      	adds	r3, #1
   87246:	f000 84f0 	beq.w	87c2a <_vfiprintf_r+0xbda>
   8724a:	ea54 0305 	orrs.w	r3, r4, r5
   8724e:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   87252:	f000 83fc 	beq.w	87a4e <_vfiprintf_r+0x9fe>
   87256:	2d00      	cmp	r5, #0
   87258:	bf08      	it	eq
   8725a:	2c0a      	cmpeq	r4, #10
   8725c:	f080 84a9 	bcs.w	87bb2 <_vfiprintf_r+0xb62>
   87260:	2301      	movs	r3, #1
   87262:	464f      	mov	r7, r9
   87264:	3430      	adds	r4, #48	; 0x30
   87266:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8726a:	9301      	str	r3, [sp, #4]
   8726c:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   87270:	e9dd 2100 	ldrd	r2, r1, [sp]
   87274:	428a      	cmp	r2, r1
   87276:	bfb8      	it	lt
   87278:	460a      	movlt	r2, r1
   8727a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8727e:	4615      	mov	r5, r2
   87280:	2b00      	cmp	r3, #0
   87282:	f000 809d 	beq.w	873c0 <_vfiprintf_r+0x370>
   87286:	3501      	adds	r5, #1
   87288:	e09a      	b.n	873c0 <_vfiprintf_r+0x370>
   8728a:	4649      	mov	r1, r9
   8728c:	9805      	ldr	r0, [sp, #20]
   8728e:	f000 fdb9 	bl	87e04 <__swsetup_r>
   87292:	2800      	cmp	r0, #0
   87294:	f040 854a 	bne.w	87d2c <_vfiprintf_r+0xcdc>
   87298:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8729c:	f002 031a 	and.w	r3, r2, #26
   872a0:	2b0a      	cmp	r3, #10
   872a2:	f47f af06 	bne.w	870b2 <_vfiprintf_r+0x62>
   872a6:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   872aa:	2b00      	cmp	r3, #0
   872ac:	f6ff af01 	blt.w	870b2 <_vfiprintf_r+0x62>
   872b0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   872b4:	07de      	lsls	r6, r3, #31
   872b6:	d402      	bmi.n	872be <_vfiprintf_r+0x26e>
   872b8:	0595      	lsls	r5, r2, #22
   872ba:	f140 850e 	bpl.w	87cda <_vfiprintf_r+0xc8a>
   872be:	4623      	mov	r3, r4
   872c0:	4642      	mov	r2, r8
   872c2:	4649      	mov	r1, r9
   872c4:	9805      	ldr	r0, [sp, #20]
   872c6:	f000 fd59 	bl	87d7c <__sbprintf>
   872ca:	9003      	str	r0, [sp, #12]
   872cc:	9803      	ldr	r0, [sp, #12]
   872ce:	b03b      	add	sp, #236	; 0xec
   872d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872d4:	f047 0710 	orr.w	r7, r7, #16
   872d8:	06b8      	lsls	r0, r7, #26
   872da:	9c04      	ldr	r4, [sp, #16]
   872dc:	f140 8109 	bpl.w	874f2 <_vfiprintf_r+0x4a2>
   872e0:	3407      	adds	r4, #7
   872e2:	f024 0307 	bic.w	r3, r4, #7
   872e6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   872ea:	9304      	str	r3, [sp, #16]
   872ec:	2300      	movs	r3, #0
   872ee:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   872f2:	f04f 0200 	mov.w	r2, #0
   872f6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   872fa:	9a00      	ldr	r2, [sp, #0]
   872fc:	4611      	mov	r1, r2
   872fe:	3101      	adds	r1, #1
   87300:	f000 81db 	beq.w	876ba <_vfiprintf_r+0x66a>
   87304:	ea54 0105 	orrs.w	r1, r4, r5
   87308:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   8730c:	f040 81d4 	bne.w	876b8 <_vfiprintf_r+0x668>
   87310:	2a00      	cmp	r2, #0
   87312:	f040 848d 	bne.w	87c30 <_vfiprintf_r+0xbe0>
   87316:	2b00      	cmp	r3, #0
   87318:	f040 839e 	bne.w	87a58 <_vfiprintf_r+0xa08>
   8731c:	f019 0301 	ands.w	r3, r9, #1
   87320:	9301      	str	r3, [sp, #4]
   87322:	f000 83c3 	beq.w	87aac <_vfiprintf_r+0xa5c>
   87326:	2330      	movs	r3, #48	; 0x30
   87328:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8732c:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   87330:	e79e      	b.n	87270 <_vfiprintf_r+0x220>
   87332:	ebb4 0508 	subs.w	r5, r4, r8
   87336:	f000 80bb 	beq.w	874b0 <_vfiprintf_r+0x460>
   8733a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8733e:	3301      	adds	r3, #1
   87340:	442a      	add	r2, r5
   87342:	2b07      	cmp	r3, #7
   87344:	e9ca 8500 	strd	r8, r5, [sl]
   87348:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   8734c:	dc06      	bgt.n	8735c <_vfiprintf_r+0x30c>
   8734e:	f10a 0a08 	add.w	sl, sl, #8
   87352:	9a03      	ldr	r2, [sp, #12]
   87354:	7823      	ldrb	r3, [r4, #0]
   87356:	442a      	add	r2, r5
   87358:	9203      	str	r2, [sp, #12]
   8735a:	e6ca      	b.n	870f2 <_vfiprintf_r+0xa2>
   8735c:	2a00      	cmp	r2, #0
   8735e:	f000 8372 	beq.w	87a46 <_vfiprintf_r+0x9f6>
   87362:	4659      	mov	r1, fp
   87364:	9805      	ldr	r0, [sp, #20]
   87366:	aa0e      	add	r2, sp, #56	; 0x38
   87368:	f7ff fe36 	bl	86fd8 <__sprint_r.part.0>
   8736c:	b950      	cbnz	r0, 87384 <_vfiprintf_r+0x334>
   8736e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87372:	e7ee      	b.n	87352 <_vfiprintf_r+0x302>
   87374:	4659      	mov	r1, fp
   87376:	9805      	ldr	r0, [sp, #20]
   87378:	aa0e      	add	r2, sp, #56	; 0x38
   8737a:	f7ff fe2d 	bl	86fd8 <__sprint_r.part.0>
   8737e:	2800      	cmp	r0, #0
   87380:	f000 808d 	beq.w	8749e <_vfiprintf_r+0x44e>
   87384:	46d9      	mov	r9, fp
   87386:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8738a:	f013 0f01 	tst.w	r3, #1
   8738e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   87392:	f000 8095 	beq.w	874c0 <_vfiprintf_r+0x470>
   87396:	065b      	lsls	r3, r3, #25
   87398:	f100 84d4 	bmi.w	87d44 <_vfiprintf_r+0xcf4>
   8739c:	9803      	ldr	r0, [sp, #12]
   8739e:	b03b      	add	sp, #236	; 0xec
   873a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   873a4:	2b00      	cmp	r3, #0
   873a6:	f000 8083 	beq.w	874b0 <_vfiprintf_r+0x460>
   873aa:	2501      	movs	r5, #1
   873ac:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   873b0:	f04f 0300 	mov.w	r3, #0
   873b4:	9501      	str	r5, [sp, #4]
   873b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   873ba:	ae21      	add	r6, sp, #132	; 0x84
   873bc:	2300      	movs	r3, #0
   873be:	9300      	str	r3, [sp, #0]
   873c0:	f017 0302 	ands.w	r3, r7, #2
   873c4:	9307      	str	r3, [sp, #28]
   873c6:	bf18      	it	ne
   873c8:	3502      	addne	r5, #2
   873ca:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   873ce:	9306      	str	r3, [sp, #24]
   873d0:	d104      	bne.n	873dc <_vfiprintf_r+0x38c>
   873d2:	9b02      	ldr	r3, [sp, #8]
   873d4:	1b5c      	subs	r4, r3, r5
   873d6:	2c00      	cmp	r4, #0
   873d8:	f300 8274 	bgt.w	878c4 <_vfiprintf_r+0x874>
   873dc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   873e0:	1c48      	adds	r0, r1, #1
   873e2:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   873e6:	b174      	cbz	r4, 87406 <_vfiprintf_r+0x3b6>
   873e8:	2101      	movs	r1, #1
   873ea:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   873ee:	440a      	add	r2, r1
   873f0:	2807      	cmp	r0, #7
   873f2:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   873f6:	e9ca 4100 	strd	r4, r1, [sl]
   873fa:	f300 8246 	bgt.w	8788a <_vfiprintf_r+0x83a>
   873fe:	4601      	mov	r1, r0
   87400:	f10a 0a08 	add.w	sl, sl, #8
   87404:	3001      	adds	r0, #1
   87406:	9b07      	ldr	r3, [sp, #28]
   87408:	b1c3      	cbz	r3, 8743c <_vfiprintf_r+0x3ec>
   8740a:	2102      	movs	r1, #2
   8740c:	ab0d      	add	r3, sp, #52	; 0x34
   8740e:	440a      	add	r2, r1
   87410:	2807      	cmp	r0, #7
   87412:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   87416:	e9ca 3100 	strd	r3, r1, [sl]
   8741a:	f340 824e 	ble.w	878ba <_vfiprintf_r+0x86a>
   8741e:	2a00      	cmp	r2, #0
   87420:	f000 830c 	beq.w	87a3c <_vfiprintf_r+0x9ec>
   87424:	4659      	mov	r1, fp
   87426:	9805      	ldr	r0, [sp, #20]
   87428:	aa0e      	add	r2, sp, #56	; 0x38
   8742a:	f7ff fdd5 	bl	86fd8 <__sprint_r.part.0>
   8742e:	2800      	cmp	r0, #0
   87430:	d1a8      	bne.n	87384 <_vfiprintf_r+0x334>
   87432:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87436:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8743a:	1c48      	adds	r0, r1, #1
   8743c:	9b06      	ldr	r3, [sp, #24]
   8743e:	2b80      	cmp	r3, #128	; 0x80
   87440:	f000 817e 	beq.w	87740 <_vfiprintf_r+0x6f0>
   87444:	e9dd 3400 	ldrd	r3, r4, [sp]
   87448:	1b1c      	subs	r4, r3, r4
   8744a:	2c00      	cmp	r4, #0
   8744c:	f300 81d3 	bgt.w	877f6 <_vfiprintf_r+0x7a6>
   87450:	9b01      	ldr	r3, [sp, #4]
   87452:	2807      	cmp	r0, #7
   87454:	441a      	add	r2, r3
   87456:	e9ca 6300 	strd	r6, r3, [sl]
   8745a:	9210      	str	r2, [sp, #64]	; 0x40
   8745c:	900f      	str	r0, [sp, #60]	; 0x3c
   8745e:	f340 816c 	ble.w	8773a <_vfiprintf_r+0x6ea>
   87462:	2a00      	cmp	r2, #0
   87464:	f000 8276 	beq.w	87954 <_vfiprintf_r+0x904>
   87468:	4659      	mov	r1, fp
   8746a:	9805      	ldr	r0, [sp, #20]
   8746c:	aa0e      	add	r2, sp, #56	; 0x38
   8746e:	f7ff fdb3 	bl	86fd8 <__sprint_r.part.0>
   87472:	2800      	cmp	r0, #0
   87474:	d186      	bne.n	87384 <_vfiprintf_r+0x334>
   87476:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87478:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8747c:	0779      	lsls	r1, r7, #29
   8747e:	d504      	bpl.n	8748a <_vfiprintf_r+0x43a>
   87480:	9b02      	ldr	r3, [sp, #8]
   87482:	1b5c      	subs	r4, r3, r5
   87484:	2c00      	cmp	r4, #0
   87486:	f300 826e 	bgt.w	87966 <_vfiprintf_r+0x916>
   8748a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   8748e:	42a9      	cmp	r1, r5
   87490:	bfac      	ite	ge
   87492:	185b      	addge	r3, r3, r1
   87494:	195b      	addlt	r3, r3, r5
   87496:	9303      	str	r3, [sp, #12]
   87498:	2a00      	cmp	r2, #0
   8749a:	f47f af6b 	bne.w	87374 <_vfiprintf_r+0x324>
   8749e:	2300      	movs	r3, #0
   874a0:	930f      	str	r3, [sp, #60]	; 0x3c
   874a2:	f898 3000 	ldrb.w	r3, [r8]
   874a6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   874aa:	2b00      	cmp	r3, #0
   874ac:	f47f ae13 	bne.w	870d6 <_vfiprintf_r+0x86>
   874b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   874b2:	46d9      	mov	r9, fp
   874b4:	2b00      	cmp	r3, #0
   874b6:	f040 8426 	bne.w	87d06 <_vfiprintf_r+0xcb6>
   874ba:	2300      	movs	r3, #0
   874bc:	930f      	str	r3, [sp, #60]	; 0x3c
   874be:	e762      	b.n	87386 <_vfiprintf_r+0x336>
   874c0:	059a      	lsls	r2, r3, #22
   874c2:	f53f af68 	bmi.w	87396 <_vfiprintf_r+0x346>
   874c6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   874ca:	f002 f9d1 	bl	89870 <__retarget_lock_release_recursive>
   874ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   874d2:	e760      	b.n	87396 <_vfiprintf_r+0x346>
   874d4:	9b04      	ldr	r3, [sp, #16]
   874d6:	06f8      	lsls	r0, r7, #27
   874d8:	f853 4b04 	ldr.w	r4, [r3], #4
   874dc:	f100 8308 	bmi.w	87af0 <_vfiprintf_r+0xaa0>
   874e0:	0679      	lsls	r1, r7, #25
   874e2:	f140 8302 	bpl.w	87aea <_vfiprintf_r+0xa9a>
   874e6:	b224      	sxth	r4, r4
   874e8:	17e5      	asrs	r5, r4, #31
   874ea:	9304      	str	r3, [sp, #16]
   874ec:	4622      	mov	r2, r4
   874ee:	462b      	mov	r3, r5
   874f0:	e6a2      	b.n	87238 <_vfiprintf_r+0x1e8>
   874f2:	f854 3b04 	ldr.w	r3, [r4], #4
   874f6:	06f9      	lsls	r1, r7, #27
   874f8:	9404      	str	r4, [sp, #16]
   874fa:	f100 82f3 	bmi.w	87ae4 <_vfiprintf_r+0xa94>
   874fe:	067a      	lsls	r2, r7, #25
   87500:	f140 82ed 	bpl.w	87ade <_vfiprintf_r+0xa8e>
   87504:	2500      	movs	r5, #0
   87506:	b29c      	uxth	r4, r3
   87508:	e6f0      	b.n	872ec <_vfiprintf_r+0x29c>
   8750a:	f04f 0300 	mov.w	r3, #0
   8750e:	9c04      	ldr	r4, [sp, #16]
   87510:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   87514:	f854 6b04 	ldr.w	r6, [r4], #4
   87518:	2e00      	cmp	r6, #0
   8751a:	f000 8397 	beq.w	87c4c <_vfiprintf_r+0xbfc>
   8751e:	9a00      	ldr	r2, [sp, #0]
   87520:	4613      	mov	r3, r2
   87522:	3301      	adds	r3, #1
   87524:	f000 831e 	beq.w	87b64 <_vfiprintf_r+0xb14>
   87528:	2100      	movs	r1, #0
   8752a:	4630      	mov	r0, r6
   8752c:	f002 fce6 	bl	89efc <memchr>
   87530:	2800      	cmp	r0, #0
   87532:	f000 83d8 	beq.w	87ce6 <_vfiprintf_r+0xc96>
   87536:	1b83      	subs	r3, r0, r6
   87538:	9301      	str	r3, [sp, #4]
   8753a:	2300      	movs	r3, #0
   8753c:	9404      	str	r4, [sp, #16]
   8753e:	9300      	str	r3, [sp, #0]
   87540:	e696      	b.n	87270 <_vfiprintf_r+0x220>
   87542:	2501      	movs	r5, #1
   87544:	f04f 0200 	mov.w	r2, #0
   87548:	9c04      	ldr	r4, [sp, #16]
   8754a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8754e:	f854 3b04 	ldr.w	r3, [r4], #4
   87552:	9501      	str	r5, [sp, #4]
   87554:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87558:	9404      	str	r4, [sp, #16]
   8755a:	ae21      	add	r6, sp, #132	; 0x84
   8755c:	e72e      	b.n	873bc <_vfiprintf_r+0x36c>
   8755e:	f001 fdb3 	bl	890c8 <__sinit>
   87562:	e582      	b.n	8706a <_vfiprintf_r+0x1a>
   87564:	9b02      	ldr	r3, [sp, #8]
   87566:	425b      	negs	r3, r3
   87568:	9302      	str	r3, [sp, #8]
   8756a:	f898 3000 	ldrb.w	r3, [r8]
   8756e:	f047 0704 	orr.w	r7, r7, #4
   87572:	e5cf      	b.n	87114 <_vfiprintf_r+0xc4>
   87574:	f898 3000 	ldrb.w	r3, [r8]
   87578:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   8757c:	e5ca      	b.n	87114 <_vfiprintf_r+0xc4>
   8757e:	f898 3000 	ldrb.w	r3, [r8]
   87582:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   87586:	e5c5      	b.n	87114 <_vfiprintf_r+0xc4>
   87588:	4641      	mov	r1, r8
   8758a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8758e:	2b2a      	cmp	r3, #42	; 0x2a
   87590:	f000 83dd 	beq.w	87d4e <_vfiprintf_r+0xcfe>
   87594:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87598:	2a09      	cmp	r2, #9
   8759a:	4688      	mov	r8, r1
   8759c:	bf98      	it	ls
   8759e:	2100      	movls	r1, #0
   875a0:	f200 83ad 	bhi.w	87cfe <_vfiprintf_r+0xcae>
   875a4:	f818 3b01 	ldrb.w	r3, [r8], #1
   875a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   875ac:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   875b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   875b4:	2a09      	cmp	r2, #9
   875b6:	d9f5      	bls.n	875a4 <_vfiprintf_r+0x554>
   875b8:	9100      	str	r1, [sp, #0]
   875ba:	e5ad      	b.n	87118 <_vfiprintf_r+0xc8>
   875bc:	9c05      	ldr	r4, [sp, #20]
   875be:	4620      	mov	r0, r4
   875c0:	f002 f94c 	bl	8985c <_localeconv_r>
   875c4:	6843      	ldr	r3, [r0, #4]
   875c6:	4618      	mov	r0, r3
   875c8:	930a      	str	r3, [sp, #40]	; 0x28
   875ca:	f7fd fefb 	bl	853c4 <strlen>
   875ce:	4603      	mov	r3, r0
   875d0:	4620      	mov	r0, r4
   875d2:	930b      	str	r3, [sp, #44]	; 0x2c
   875d4:	461c      	mov	r4, r3
   875d6:	f002 f941 	bl	8985c <_localeconv_r>
   875da:	6882      	ldr	r2, [r0, #8]
   875dc:	9209      	str	r2, [sp, #36]	; 0x24
   875de:	2c00      	cmp	r4, #0
   875e0:	f43f ae13 	beq.w	8720a <_vfiprintf_r+0x1ba>
   875e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   875e6:	2b00      	cmp	r3, #0
   875e8:	f43f ae0f 	beq.w	8720a <_vfiprintf_r+0x1ba>
   875ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   875ee:	781b      	ldrb	r3, [r3, #0]
   875f0:	2b00      	cmp	r3, #0
   875f2:	f43f ae0a 	beq.w	8720a <_vfiprintf_r+0x1ba>
   875f6:	f898 3000 	ldrb.w	r3, [r8]
   875fa:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   875fe:	e589      	b.n	87114 <_vfiprintf_r+0xc4>
   87600:	f898 3000 	ldrb.w	r3, [r8]
   87604:	f047 0701 	orr.w	r7, r7, #1
   87608:	e584      	b.n	87114 <_vfiprintf_r+0xc4>
   8760a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8760e:	2b00      	cmp	r3, #0
   87610:	f47f adfb 	bne.w	8720a <_vfiprintf_r+0x1ba>
   87614:	2320      	movs	r3, #32
   87616:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8761a:	f898 3000 	ldrb.w	r3, [r8]
   8761e:	e579      	b.n	87114 <_vfiprintf_r+0xc4>
   87620:	f898 3000 	ldrb.w	r3, [r8]
   87624:	2b6c      	cmp	r3, #108	; 0x6c
   87626:	bf03      	ittte	eq
   87628:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   8762c:	f047 0720 	orreq.w	r7, r7, #32
   87630:	f108 0801 	addeq.w	r8, r8, #1
   87634:	f047 0710 	orrne.w	r7, r7, #16
   87638:	e56c      	b.n	87114 <_vfiprintf_r+0xc4>
   8763a:	f898 3000 	ldrb.w	r3, [r8]
   8763e:	2b68      	cmp	r3, #104	; 0x68
   87640:	bf03      	ittte	eq
   87642:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   87646:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   8764a:	f108 0801 	addeq.w	r8, r8, #1
   8764e:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   87652:	e55f      	b.n	87114 <_vfiprintf_r+0xc4>
   87654:	f047 0910 	orr.w	r9, r7, #16
   87658:	f019 0f20 	tst.w	r9, #32
   8765c:	9c04      	ldr	r4, [sp, #16]
   8765e:	f000 8200 	beq.w	87a62 <_vfiprintf_r+0xa12>
   87662:	3407      	adds	r4, #7
   87664:	f024 0307 	bic.w	r3, r4, #7
   87668:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8766c:	9304      	str	r3, [sp, #16]
   8766e:	2301      	movs	r3, #1
   87670:	e63f      	b.n	872f2 <_vfiprintf_r+0x2a2>
   87672:	f647 0330 	movw	r3, #30768	; 0x7830
   87676:	9c04      	ldr	r4, [sp, #16]
   87678:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   8767c:	f854 2b04 	ldr.w	r2, [r4], #4
   87680:	4bbf      	ldr	r3, [pc, #764]	; (87980 <_vfiprintf_r+0x930>)
   87682:	9404      	str	r4, [sp, #16]
   87684:	9308      	str	r3, [sp, #32]
   87686:	4614      	mov	r4, r2
   87688:	2500      	movs	r5, #0
   8768a:	2302      	movs	r3, #2
   8768c:	f047 0902 	orr.w	r9, r7, #2
   87690:	e62f      	b.n	872f2 <_vfiprintf_r+0x2a2>
   87692:	06bb      	lsls	r3, r7, #26
   87694:	f100 8232 	bmi.w	87afc <_vfiprintf_r+0xaac>
   87698:	06fe      	lsls	r6, r7, #27
   8769a:	f100 82cf 	bmi.w	87c3c <_vfiprintf_r+0xbec>
   8769e:	067d      	lsls	r5, r7, #25
   876a0:	f100 8301 	bmi.w	87ca6 <_vfiprintf_r+0xc56>
   876a4:	05bc      	lsls	r4, r7, #22
   876a6:	f140 82c9 	bpl.w	87c3c <_vfiprintf_r+0xbec>
   876aa:	9c04      	ldr	r4, [sp, #16]
   876ac:	9a03      	ldr	r2, [sp, #12]
   876ae:	f854 3b04 	ldr.w	r3, [r4], #4
   876b2:	701a      	strb	r2, [r3, #0]
   876b4:	9404      	str	r4, [sp, #16]
   876b6:	e509      	b.n	870cc <_vfiprintf_r+0x7c>
   876b8:	46b9      	mov	r9, r7
   876ba:	2b01      	cmp	r3, #1
   876bc:	f43f adcb 	beq.w	87256 <_vfiprintf_r+0x206>
   876c0:	2b02      	cmp	r3, #2
   876c2:	ae3a      	add	r6, sp, #232	; 0xe8
   876c4:	d113      	bne.n	876ee <_vfiprintf_r+0x69e>
   876c6:	9808      	ldr	r0, [sp, #32]
   876c8:	0923      	lsrs	r3, r4, #4
   876ca:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   876ce:	0929      	lsrs	r1, r5, #4
   876d0:	f004 020f 	and.w	r2, r4, #15
   876d4:	460d      	mov	r5, r1
   876d6:	461c      	mov	r4, r3
   876d8:	5c83      	ldrb	r3, [r0, r2]
   876da:	f806 3d01 	strb.w	r3, [r6, #-1]!
   876de:	ea54 0305 	orrs.w	r3, r4, r5
   876e2:	d1f1      	bne.n	876c8 <_vfiprintf_r+0x678>
   876e4:	ab3a      	add	r3, sp, #232	; 0xe8
   876e6:	1b9b      	subs	r3, r3, r6
   876e8:	464f      	mov	r7, r9
   876ea:	9301      	str	r3, [sp, #4]
   876ec:	e5c0      	b.n	87270 <_vfiprintf_r+0x220>
   876ee:	08e2      	lsrs	r2, r4, #3
   876f0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   876f4:	08e9      	lsrs	r1, r5, #3
   876f6:	f004 0307 	and.w	r3, r4, #7
   876fa:	460d      	mov	r5, r1
   876fc:	4614      	mov	r4, r2
   876fe:	3330      	adds	r3, #48	; 0x30
   87700:	ea54 0105 	orrs.w	r1, r4, r5
   87704:	4632      	mov	r2, r6
   87706:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8770a:	d1f0      	bne.n	876ee <_vfiprintf_r+0x69e>
   8770c:	f019 0f01 	tst.w	r9, #1
   87710:	d0e8      	beq.n	876e4 <_vfiprintf_r+0x694>
   87712:	2b30      	cmp	r3, #48	; 0x30
   87714:	d0e6      	beq.n	876e4 <_vfiprintf_r+0x694>
   87716:	2330      	movs	r3, #48	; 0x30
   87718:	3a02      	subs	r2, #2
   8771a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8771e:	ab3a      	add	r3, sp, #232	; 0xe8
   87720:	1a9b      	subs	r3, r3, r2
   87722:	464f      	mov	r7, r9
   87724:	4616      	mov	r6, r2
   87726:	9301      	str	r3, [sp, #4]
   87728:	e5a2      	b.n	87270 <_vfiprintf_r+0x220>
   8772a:	2301      	movs	r3, #1
   8772c:	9a01      	ldr	r2, [sp, #4]
   8772e:	930f      	str	r3, [sp, #60]	; 0x3c
   87730:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   87734:	9212      	str	r2, [sp, #72]	; 0x48
   87736:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8773a:	f10a 0a08 	add.w	sl, sl, #8
   8773e:	e69d      	b.n	8747c <_vfiprintf_r+0x42c>
   87740:	9b02      	ldr	r3, [sp, #8]
   87742:	1b5c      	subs	r4, r3, r5
   87744:	2c00      	cmp	r4, #0
   87746:	f77f ae7d 	ble.w	87444 <_vfiprintf_r+0x3f4>
   8774a:	2c10      	cmp	r4, #16
   8774c:	f340 82ea 	ble.w	87d24 <_vfiprintf_r+0xcd4>
   87750:	f8df 9230 	ldr.w	r9, [pc, #560]	; 87984 <_vfiprintf_r+0x934>
   87754:	4650      	mov	r0, sl
   87756:	9706      	str	r7, [sp, #24]
   87758:	46b2      	mov	sl, r6
   8775a:	464e      	mov	r6, r9
   8775c:	46c1      	mov	r9, r8
   8775e:	46a8      	mov	r8, r5
   87760:	9d05      	ldr	r5, [sp, #20]
   87762:	e006      	b.n	87772 <_vfiprintf_r+0x722>
   87764:	f101 0c02 	add.w	ip, r1, #2
   87768:	4619      	mov	r1, r3
   8776a:	3008      	adds	r0, #8
   8776c:	3c10      	subs	r4, #16
   8776e:	2c10      	cmp	r4, #16
   87770:	dd1a      	ble.n	877a8 <_vfiprintf_r+0x758>
   87772:	2710      	movs	r7, #16
   87774:	1c4b      	adds	r3, r1, #1
   87776:	3210      	adds	r2, #16
   87778:	2b07      	cmp	r3, #7
   8777a:	9210      	str	r2, [sp, #64]	; 0x40
   8777c:	6006      	str	r6, [r0, #0]
   8777e:	6047      	str	r7, [r0, #4]
   87780:	930f      	str	r3, [sp, #60]	; 0x3c
   87782:	ddef      	ble.n	87764 <_vfiprintf_r+0x714>
   87784:	2a00      	cmp	r2, #0
   87786:	d07b      	beq.n	87880 <_vfiprintf_r+0x830>
   87788:	4659      	mov	r1, fp
   8778a:	4628      	mov	r0, r5
   8778c:	aa0e      	add	r2, sp, #56	; 0x38
   8778e:	f7ff fc23 	bl	86fd8 <__sprint_r.part.0>
   87792:	2800      	cmp	r0, #0
   87794:	f47f adf6 	bne.w	87384 <_vfiprintf_r+0x334>
   87798:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8779c:	3c10      	subs	r4, #16
   8779e:	2c10      	cmp	r4, #16
   877a0:	a811      	add	r0, sp, #68	; 0x44
   877a2:	f101 0c01 	add.w	ip, r1, #1
   877a6:	dce4      	bgt.n	87772 <_vfiprintf_r+0x722>
   877a8:	4645      	mov	r5, r8
   877aa:	46c8      	mov	r8, r9
   877ac:	46b1      	mov	r9, r6
   877ae:	4656      	mov	r6, sl
   877b0:	4682      	mov	sl, r0
   877b2:	9f06      	ldr	r7, [sp, #24]
   877b4:	4422      	add	r2, r4
   877b6:	f1bc 0f07 	cmp.w	ip, #7
   877ba:	e9ca 9400 	strd	r9, r4, [sl]
   877be:	9210      	str	r2, [sp, #64]	; 0x40
   877c0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   877c4:	f340 817e 	ble.w	87ac4 <_vfiprintf_r+0xa74>
   877c8:	2a00      	cmp	r2, #0
   877ca:	f000 825c 	beq.w	87c86 <_vfiprintf_r+0xc36>
   877ce:	4659      	mov	r1, fp
   877d0:	9805      	ldr	r0, [sp, #20]
   877d2:	aa0e      	add	r2, sp, #56	; 0x38
   877d4:	f7ff fc00 	bl	86fd8 <__sprint_r.part.0>
   877d8:	2800      	cmp	r0, #0
   877da:	f47f add3 	bne.w	87384 <_vfiprintf_r+0x334>
   877de:	e9dd 3400 	ldrd	r3, r4, [sp]
   877e2:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   877e6:	1b1c      	subs	r4, r3, r4
   877e8:	2c00      	cmp	r4, #0
   877ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   877ee:	f101 0001 	add.w	r0, r1, #1
   877f2:	f77f ae2d 	ble.w	87450 <_vfiprintf_r+0x400>
   877f6:	2c10      	cmp	r4, #16
   877f8:	f8df 9188 	ldr.w	r9, [pc, #392]	; 87984 <_vfiprintf_r+0x934>
   877fc:	dd2f      	ble.n	8785e <_vfiprintf_r+0x80e>
   877fe:	46d4      	mov	ip, sl
   87800:	46b2      	mov	sl, r6
   87802:	464e      	mov	r6, r9
   87804:	46c1      	mov	r9, r8
   87806:	46a8      	mov	r8, r5
   87808:	9d05      	ldr	r5, [sp, #20]
   8780a:	e006      	b.n	8781a <_vfiprintf_r+0x7ca>
   8780c:	1c88      	adds	r0, r1, #2
   8780e:	4619      	mov	r1, r3
   87810:	f10c 0c08 	add.w	ip, ip, #8
   87814:	3c10      	subs	r4, #16
   87816:	2c10      	cmp	r4, #16
   87818:	dd1c      	ble.n	87854 <_vfiprintf_r+0x804>
   8781a:	2010      	movs	r0, #16
   8781c:	1c4b      	adds	r3, r1, #1
   8781e:	3210      	adds	r2, #16
   87820:	2b07      	cmp	r3, #7
   87822:	9210      	str	r2, [sp, #64]	; 0x40
   87824:	f8cc 6000 	str.w	r6, [ip]
   87828:	f8cc 0004 	str.w	r0, [ip, #4]
   8782c:	930f      	str	r3, [sp, #60]	; 0x3c
   8782e:	dded      	ble.n	8780c <_vfiprintf_r+0x7bc>
   87830:	b30a      	cbz	r2, 87876 <_vfiprintf_r+0x826>
   87832:	4659      	mov	r1, fp
   87834:	4628      	mov	r0, r5
   87836:	aa0e      	add	r2, sp, #56	; 0x38
   87838:	f7ff fbce 	bl	86fd8 <__sprint_r.part.0>
   8783c:	2800      	cmp	r0, #0
   8783e:	f47f ada1 	bne.w	87384 <_vfiprintf_r+0x334>
   87842:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87846:	3c10      	subs	r4, #16
   87848:	2c10      	cmp	r4, #16
   8784a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8784e:	f101 0001 	add.w	r0, r1, #1
   87852:	dce2      	bgt.n	8781a <_vfiprintf_r+0x7ca>
   87854:	4645      	mov	r5, r8
   87856:	46c8      	mov	r8, r9
   87858:	46b1      	mov	r9, r6
   8785a:	4656      	mov	r6, sl
   8785c:	46e2      	mov	sl, ip
   8785e:	4422      	add	r2, r4
   87860:	2807      	cmp	r0, #7
   87862:	e9ca 9400 	strd	r9, r4, [sl]
   87866:	9210      	str	r2, [sp, #64]	; 0x40
   87868:	900f      	str	r0, [sp, #60]	; 0x3c
   8786a:	f300 80d3 	bgt.w	87a14 <_vfiprintf_r+0x9c4>
   8786e:	f10a 0a08 	add.w	sl, sl, #8
   87872:	3001      	adds	r0, #1
   87874:	e5ec      	b.n	87450 <_vfiprintf_r+0x400>
   87876:	2001      	movs	r0, #1
   87878:	4611      	mov	r1, r2
   8787a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8787e:	e7c9      	b.n	87814 <_vfiprintf_r+0x7c4>
   87880:	f04f 0c01 	mov.w	ip, #1
   87884:	4611      	mov	r1, r2
   87886:	a811      	add	r0, sp, #68	; 0x44
   87888:	e770      	b.n	8776c <_vfiprintf_r+0x71c>
   8788a:	2a00      	cmp	r2, #0
   8788c:	f000 80d3 	beq.w	87a36 <_vfiprintf_r+0x9e6>
   87890:	4659      	mov	r1, fp
   87892:	9805      	ldr	r0, [sp, #20]
   87894:	aa0e      	add	r2, sp, #56	; 0x38
   87896:	f7ff fb9f 	bl	86fd8 <__sprint_r.part.0>
   8789a:	2800      	cmp	r0, #0
   8789c:	f47f ad72 	bne.w	87384 <_vfiprintf_r+0x334>
   878a0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   878a4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   878a8:	1c48      	adds	r0, r1, #1
   878aa:	e5ac      	b.n	87406 <_vfiprintf_r+0x3b6>
   878ac:	2202      	movs	r2, #2
   878ae:	2001      	movs	r0, #1
   878b0:	ab0d      	add	r3, sp, #52	; 0x34
   878b2:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   878b6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   878ba:	4601      	mov	r1, r0
   878bc:	f10a 0a08 	add.w	sl, sl, #8
   878c0:	1c48      	adds	r0, r1, #1
   878c2:	e5bb      	b.n	8743c <_vfiprintf_r+0x3ec>
   878c4:	2c10      	cmp	r4, #16
   878c6:	f340 8214 	ble.w	87cf2 <_vfiprintf_r+0xca2>
   878ca:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   878ce:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 87988 <_vfiprintf_r+0x938>
   878d2:	46d4      	mov	ip, sl
   878d4:	46b2      	mov	sl, r6
   878d6:	464e      	mov	r6, r9
   878d8:	46c1      	mov	r9, r8
   878da:	46a8      	mov	r8, r5
   878dc:	9d05      	ldr	r5, [sp, #20]
   878de:	e006      	b.n	878ee <_vfiprintf_r+0x89e>
   878e0:	1c99      	adds	r1, r3, #2
   878e2:	4603      	mov	r3, r0
   878e4:	f10c 0c08 	add.w	ip, ip, #8
   878e8:	3c10      	subs	r4, #16
   878ea:	2c10      	cmp	r4, #16
   878ec:	dd1c      	ble.n	87928 <_vfiprintf_r+0x8d8>
   878ee:	2110      	movs	r1, #16
   878f0:	1c58      	adds	r0, r3, #1
   878f2:	3210      	adds	r2, #16
   878f4:	2807      	cmp	r0, #7
   878f6:	9210      	str	r2, [sp, #64]	; 0x40
   878f8:	f8cc 6000 	str.w	r6, [ip]
   878fc:	f8cc 1004 	str.w	r1, [ip, #4]
   87900:	900f      	str	r0, [sp, #60]	; 0x3c
   87902:	dded      	ble.n	878e0 <_vfiprintf_r+0x890>
   87904:	b30a      	cbz	r2, 8794a <_vfiprintf_r+0x8fa>
   87906:	4659      	mov	r1, fp
   87908:	4628      	mov	r0, r5
   8790a:	aa0e      	add	r2, sp, #56	; 0x38
   8790c:	f7ff fb64 	bl	86fd8 <__sprint_r.part.0>
   87910:	2800      	cmp	r0, #0
   87912:	f47f ad37 	bne.w	87384 <_vfiprintf_r+0x334>
   87916:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8791a:	3c10      	subs	r4, #16
   8791c:	2c10      	cmp	r4, #16
   8791e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   87922:	f103 0101 	add.w	r1, r3, #1
   87926:	dce2      	bgt.n	878ee <_vfiprintf_r+0x89e>
   87928:	4645      	mov	r5, r8
   8792a:	46c8      	mov	r8, r9
   8792c:	46b1      	mov	r9, r6
   8792e:	4656      	mov	r6, sl
   87930:	46e2      	mov	sl, ip
   87932:	4422      	add	r2, r4
   87934:	2907      	cmp	r1, #7
   87936:	e9ca 9400 	strd	r9, r4, [sl]
   8793a:	9210      	str	r2, [sp, #64]	; 0x40
   8793c:	910f      	str	r1, [sp, #60]	; 0x3c
   8793e:	f300 80a8 	bgt.w	87a92 <_vfiprintf_r+0xa42>
   87942:	f10a 0a08 	add.w	sl, sl, #8
   87946:	1c48      	adds	r0, r1, #1
   87948:	e54b      	b.n	873e2 <_vfiprintf_r+0x392>
   8794a:	4613      	mov	r3, r2
   8794c:	2101      	movs	r1, #1
   8794e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   87952:	e7c9      	b.n	878e8 <_vfiprintf_r+0x898>
   87954:	0778      	lsls	r0, r7, #29
   87956:	920f      	str	r2, [sp, #60]	; 0x3c
   87958:	d554      	bpl.n	87a04 <_vfiprintf_r+0x9b4>
   8795a:	9b02      	ldr	r3, [sp, #8]
   8795c:	1b5c      	subs	r4, r3, r5
   8795e:	2c00      	cmp	r4, #0
   87960:	dd50      	ble.n	87a04 <_vfiprintf_r+0x9b4>
   87962:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87966:	2c10      	cmp	r4, #16
   87968:	f340 81d7 	ble.w	87d1a <_vfiprintf_r+0xcca>
   8796c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 87988 <_vfiprintf_r+0x938>
   87970:	2610      	movs	r6, #16
   87972:	464b      	mov	r3, r9
   87974:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87976:	46a9      	mov	r9, r5
   87978:	9f05      	ldr	r7, [sp, #20]
   8797a:	461d      	mov	r5, r3
   8797c:	e00d      	b.n	8799a <_vfiprintf_r+0x94a>
   8797e:	bf00      	nop
   87980:	0008bfac 	.word	0x0008bfac
   87984:	0008c010 	.word	0x0008c010
   87988:	0008c000 	.word	0x0008c000
   8798c:	1c88      	adds	r0, r1, #2
   8798e:	4619      	mov	r1, r3
   87990:	f10a 0a08 	add.w	sl, sl, #8
   87994:	3c10      	subs	r4, #16
   87996:	2c10      	cmp	r4, #16
   87998:	dd19      	ble.n	879ce <_vfiprintf_r+0x97e>
   8799a:	1c4b      	adds	r3, r1, #1
   8799c:	3210      	adds	r2, #16
   8799e:	2b07      	cmp	r3, #7
   879a0:	e9ca 5600 	strd	r5, r6, [sl]
   879a4:	9210      	str	r2, [sp, #64]	; 0x40
   879a6:	930f      	str	r3, [sp, #60]	; 0x3c
   879a8:	ddf0      	ble.n	8798c <_vfiprintf_r+0x93c>
   879aa:	b332      	cbz	r2, 879fa <_vfiprintf_r+0x9aa>
   879ac:	4659      	mov	r1, fp
   879ae:	4638      	mov	r0, r7
   879b0:	aa0e      	add	r2, sp, #56	; 0x38
   879b2:	f7ff fb11 	bl	86fd8 <__sprint_r.part.0>
   879b6:	2800      	cmp	r0, #0
   879b8:	f47f ace4 	bne.w	87384 <_vfiprintf_r+0x334>
   879bc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   879c0:	3c10      	subs	r4, #16
   879c2:	2c10      	cmp	r4, #16
   879c4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   879c8:	f101 0001 	add.w	r0, r1, #1
   879cc:	dce5      	bgt.n	8799a <_vfiprintf_r+0x94a>
   879ce:	462b      	mov	r3, r5
   879d0:	464d      	mov	r5, r9
   879d2:	4699      	mov	r9, r3
   879d4:	4422      	add	r2, r4
   879d6:	2807      	cmp	r0, #7
   879d8:	e9ca 9400 	strd	r9, r4, [sl]
   879dc:	9210      	str	r2, [sp, #64]	; 0x40
   879de:	900f      	str	r0, [sp, #60]	; 0x3c
   879e0:	f77f ad53 	ble.w	8748a <_vfiprintf_r+0x43a>
   879e4:	b172      	cbz	r2, 87a04 <_vfiprintf_r+0x9b4>
   879e6:	4659      	mov	r1, fp
   879e8:	9805      	ldr	r0, [sp, #20]
   879ea:	aa0e      	add	r2, sp, #56	; 0x38
   879ec:	f7ff faf4 	bl	86fd8 <__sprint_r.part.0>
   879f0:	2800      	cmp	r0, #0
   879f2:	f47f acc7 	bne.w	87384 <_vfiprintf_r+0x334>
   879f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   879f8:	e547      	b.n	8748a <_vfiprintf_r+0x43a>
   879fa:	2001      	movs	r0, #1
   879fc:	4611      	mov	r1, r2
   879fe:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87a02:	e7c7      	b.n	87994 <_vfiprintf_r+0x944>
   87a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87a08:	42aa      	cmp	r2, r5
   87a0a:	bfac      	ite	ge
   87a0c:	189b      	addge	r3, r3, r2
   87a0e:	195b      	addlt	r3, r3, r5
   87a10:	9303      	str	r3, [sp, #12]
   87a12:	e544      	b.n	8749e <_vfiprintf_r+0x44e>
   87a14:	2a00      	cmp	r2, #0
   87a16:	f43f ae88 	beq.w	8772a <_vfiprintf_r+0x6da>
   87a1a:	4659      	mov	r1, fp
   87a1c:	9805      	ldr	r0, [sp, #20]
   87a1e:	aa0e      	add	r2, sp, #56	; 0x38
   87a20:	f7ff fada 	bl	86fd8 <__sprint_r.part.0>
   87a24:	2800      	cmp	r0, #0
   87a26:	f47f acad 	bne.w	87384 <_vfiprintf_r+0x334>
   87a2a:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   87a2e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87a32:	3001      	adds	r0, #1
   87a34:	e50c      	b.n	87450 <_vfiprintf_r+0x400>
   87a36:	9b07      	ldr	r3, [sp, #28]
   87a38:	2b00      	cmp	r3, #0
   87a3a:	d16b      	bne.n	87b14 <_vfiprintf_r+0xac4>
   87a3c:	2001      	movs	r0, #1
   87a3e:	4611      	mov	r1, r2
   87a40:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87a44:	e4fa      	b.n	8743c <_vfiprintf_r+0x3ec>
   87a46:	920f      	str	r2, [sp, #60]	; 0x3c
   87a48:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87a4c:	e481      	b.n	87352 <_vfiprintf_r+0x302>
   87a4e:	9b00      	ldr	r3, [sp, #0]
   87a50:	2b00      	cmp	r3, #0
   87a52:	f47f ac05 	bne.w	87260 <_vfiprintf_r+0x210>
   87a56:	464f      	mov	r7, r9
   87a58:	2300      	movs	r3, #0
   87a5a:	ae3a      	add	r6, sp, #232	; 0xe8
   87a5c:	9300      	str	r3, [sp, #0]
   87a5e:	9301      	str	r3, [sp, #4]
   87a60:	e406      	b.n	87270 <_vfiprintf_r+0x220>
   87a62:	f854 2b04 	ldr.w	r2, [r4], #4
   87a66:	f019 0f10 	tst.w	r9, #16
   87a6a:	f04f 0301 	mov.w	r3, #1
   87a6e:	9404      	str	r4, [sp, #16]
   87a70:	d132      	bne.n	87ad8 <_vfiprintf_r+0xa88>
   87a72:	f019 0f40 	tst.w	r9, #64	; 0x40
   87a76:	d02b      	beq.n	87ad0 <_vfiprintf_r+0xa80>
   87a78:	2500      	movs	r5, #0
   87a7a:	b294      	uxth	r4, r2
   87a7c:	e439      	b.n	872f2 <_vfiprintf_r+0x2a2>
   87a7e:	232d      	movs	r3, #45	; 0x2d
   87a80:	4264      	negs	r4, r4
   87a82:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   87a86:	46b9      	mov	r9, r7
   87a88:	f04f 0301 	mov.w	r3, #1
   87a8c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87a90:	e433      	b.n	872fa <_vfiprintf_r+0x2aa>
   87a92:	2a00      	cmp	r2, #0
   87a94:	d06f      	beq.n	87b76 <_vfiprintf_r+0xb26>
   87a96:	4659      	mov	r1, fp
   87a98:	9805      	ldr	r0, [sp, #20]
   87a9a:	aa0e      	add	r2, sp, #56	; 0x38
   87a9c:	f7ff fa9c 	bl	86fd8 <__sprint_r.part.0>
   87aa0:	2800      	cmp	r0, #0
   87aa2:	f47f ac6f 	bne.w	87384 <_vfiprintf_r+0x334>
   87aa6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87aaa:	e497      	b.n	873dc <_vfiprintf_r+0x38c>
   87aac:	ae3a      	add	r6, sp, #232	; 0xe8
   87aae:	f7ff bbdf 	b.w	87270 <_vfiprintf_r+0x220>
   87ab2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   87ab6:	f001 fed9 	bl	8986c <__retarget_lock_acquire_recursive>
   87aba:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   87abe:	b28a      	uxth	r2, r1
   87ac0:	f7ff badd 	b.w	8707e <_vfiprintf_r+0x2e>
   87ac4:	4661      	mov	r1, ip
   87ac6:	f10a 0a08 	add.w	sl, sl, #8
   87aca:	f10c 0001 	add.w	r0, ip, #1
   87ace:	e4b9      	b.n	87444 <_vfiprintf_r+0x3f4>
   87ad0:	f419 7f00 	tst.w	r9, #512	; 0x200
   87ad4:	f040 80ef 	bne.w	87cb6 <_vfiprintf_r+0xc66>
   87ad8:	4614      	mov	r4, r2
   87ada:	2500      	movs	r5, #0
   87adc:	e409      	b.n	872f2 <_vfiprintf_r+0x2a2>
   87ade:	05be      	lsls	r6, r7, #22
   87ae0:	f100 80f7 	bmi.w	87cd2 <_vfiprintf_r+0xc82>
   87ae4:	461c      	mov	r4, r3
   87ae6:	2500      	movs	r5, #0
   87ae8:	e400      	b.n	872ec <_vfiprintf_r+0x29c>
   87aea:	05ba      	lsls	r2, r7, #22
   87aec:	f100 80ea 	bmi.w	87cc4 <_vfiprintf_r+0xc74>
   87af0:	17e5      	asrs	r5, r4, #31
   87af2:	9304      	str	r3, [sp, #16]
   87af4:	4622      	mov	r2, r4
   87af6:	462b      	mov	r3, r5
   87af8:	f7ff bb9e 	b.w	87238 <_vfiprintf_r+0x1e8>
   87afc:	9b03      	ldr	r3, [sp, #12]
   87afe:	9c04      	ldr	r4, [sp, #16]
   87b00:	17dd      	asrs	r5, r3, #31
   87b02:	461a      	mov	r2, r3
   87b04:	462b      	mov	r3, r5
   87b06:	f854 1b04 	ldr.w	r1, [r4], #4
   87b0a:	e9c1 2300 	strd	r2, r3, [r1]
   87b0e:	9404      	str	r4, [sp, #16]
   87b10:	f7ff badc 	b.w	870cc <_vfiprintf_r+0x7c>
   87b14:	2202      	movs	r2, #2
   87b16:	ab0d      	add	r3, sp, #52	; 0x34
   87b18:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   87b1c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87b20:	e6cc      	b.n	878bc <_vfiprintf_r+0x86c>
   87b22:	46b9      	mov	r9, r7
   87b24:	e598      	b.n	87658 <_vfiprintf_r+0x608>
   87b26:	4a90      	ldr	r2, [pc, #576]	; (87d68 <_vfiprintf_r+0xd18>)
   87b28:	9208      	str	r2, [sp, #32]
   87b2a:	06bd      	lsls	r5, r7, #26
   87b2c:	9c04      	ldr	r4, [sp, #16]
   87b2e:	d530      	bpl.n	87b92 <_vfiprintf_r+0xb42>
   87b30:	3407      	adds	r4, #7
   87b32:	f024 0207 	bic.w	r2, r4, #7
   87b36:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   87b3a:	9204      	str	r2, [sp, #16]
   87b3c:	07fe      	lsls	r6, r7, #31
   87b3e:	d509      	bpl.n	87b54 <_vfiprintf_r+0xb04>
   87b40:	ea54 0205 	orrs.w	r2, r4, r5
   87b44:	d006      	beq.n	87b54 <_vfiprintf_r+0xb04>
   87b46:	2230      	movs	r2, #48	; 0x30
   87b48:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   87b4c:	f047 0702 	orr.w	r7, r7, #2
   87b50:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   87b54:	2302      	movs	r3, #2
   87b56:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   87b5a:	f7ff bbca 	b.w	872f2 <_vfiprintf_r+0x2a2>
   87b5e:	4a83      	ldr	r2, [pc, #524]	; (87d6c <_vfiprintf_r+0xd1c>)
   87b60:	9208      	str	r2, [sp, #32]
   87b62:	e7e2      	b.n	87b2a <_vfiprintf_r+0xada>
   87b64:	4630      	mov	r0, r6
   87b66:	f7fd fc2d 	bl	853c4 <strlen>
   87b6a:	2300      	movs	r3, #0
   87b6c:	9404      	str	r4, [sp, #16]
   87b6e:	9001      	str	r0, [sp, #4]
   87b70:	9300      	str	r3, [sp, #0]
   87b72:	f7ff bb7d 	b.w	87270 <_vfiprintf_r+0x220>
   87b76:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   87b7a:	2900      	cmp	r1, #0
   87b7c:	f040 8089 	bne.w	87c92 <_vfiprintf_r+0xc42>
   87b80:	9b07      	ldr	r3, [sp, #28]
   87b82:	2b00      	cmp	r3, #0
   87b84:	f47f ae92 	bne.w	878ac <_vfiprintf_r+0x85c>
   87b88:	4611      	mov	r1, r2
   87b8a:	2001      	movs	r0, #1
   87b8c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87b90:	e458      	b.n	87444 <_vfiprintf_r+0x3f4>
   87b92:	f854 2b04 	ldr.w	r2, [r4], #4
   87b96:	9404      	str	r4, [sp, #16]
   87b98:	06fc      	lsls	r4, r7, #27
   87b9a:	d407      	bmi.n	87bac <_vfiprintf_r+0xb5c>
   87b9c:	0678      	lsls	r0, r7, #25
   87b9e:	d502      	bpl.n	87ba6 <_vfiprintf_r+0xb56>
   87ba0:	2500      	movs	r5, #0
   87ba2:	b294      	uxth	r4, r2
   87ba4:	e7ca      	b.n	87b3c <_vfiprintf_r+0xaec>
   87ba6:	05b9      	lsls	r1, r7, #22
   87ba8:	f100 8089 	bmi.w	87cbe <_vfiprintf_r+0xc6e>
   87bac:	4614      	mov	r4, r2
   87bae:	2500      	movs	r5, #0
   87bb0:	e7c4      	b.n	87b3c <_vfiprintf_r+0xaec>
   87bb2:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   87bb6:	f8cd 9004 	str.w	r9, [sp, #4]
   87bba:	f8cd 8018 	str.w	r8, [sp, #24]
   87bbe:	2700      	movs	r7, #0
   87bc0:	4698      	mov	r8, r3
   87bc2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   87bc6:	ae3a      	add	r6, sp, #232	; 0xe8
   87bc8:	e00b      	b.n	87be2 <_vfiprintf_r+0xb92>
   87bca:	220a      	movs	r2, #10
   87bcc:	2300      	movs	r3, #0
   87bce:	4620      	mov	r0, r4
   87bd0:	4629      	mov	r1, r5
   87bd2:	f003 ffb7 	bl	8bb44 <__aeabi_uldivmod>
   87bd6:	2d00      	cmp	r5, #0
   87bd8:	bf08      	it	eq
   87bda:	2c0a      	cmpeq	r4, #10
   87bdc:	d319      	bcc.n	87c12 <_vfiprintf_r+0xbc2>
   87bde:	4604      	mov	r4, r0
   87be0:	460d      	mov	r5, r1
   87be2:	220a      	movs	r2, #10
   87be4:	2300      	movs	r3, #0
   87be6:	4620      	mov	r0, r4
   87be8:	4629      	mov	r1, r5
   87bea:	f003 ffab 	bl	8bb44 <__aeabi_uldivmod>
   87bee:	3230      	adds	r2, #48	; 0x30
   87bf0:	f806 2c01 	strb.w	r2, [r6, #-1]
   87bf4:	3701      	adds	r7, #1
   87bf6:	3e01      	subs	r6, #1
   87bf8:	f1b8 0f00 	cmp.w	r8, #0
   87bfc:	d0e5      	beq.n	87bca <_vfiprintf_r+0xb7a>
   87bfe:	f899 3000 	ldrb.w	r3, [r9]
   87c02:	42bb      	cmp	r3, r7
   87c04:	d1e1      	bne.n	87bca <_vfiprintf_r+0xb7a>
   87c06:	2fff      	cmp	r7, #255	; 0xff
   87c08:	d0df      	beq.n	87bca <_vfiprintf_r+0xb7a>
   87c0a:	2d00      	cmp	r5, #0
   87c0c:	bf08      	it	eq
   87c0e:	2c0a      	cmpeq	r4, #10
   87c10:	d225      	bcs.n	87c5e <_vfiprintf_r+0xc0e>
   87c12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   87c16:	ab3a      	add	r3, sp, #232	; 0xe8
   87c18:	f8dd 9004 	ldr.w	r9, [sp, #4]
   87c1c:	1b9b      	subs	r3, r3, r6
   87c1e:	464f      	mov	r7, r9
   87c20:	f8dd 8018 	ldr.w	r8, [sp, #24]
   87c24:	9301      	str	r3, [sp, #4]
   87c26:	f7ff bb23 	b.w	87270 <_vfiprintf_r+0x220>
   87c2a:	46b9      	mov	r9, r7
   87c2c:	f7ff bb13 	b.w	87256 <_vfiprintf_r+0x206>
   87c30:	2b01      	cmp	r3, #1
   87c32:	46b9      	mov	r9, r7
   87c34:	f47f ad44 	bne.w	876c0 <_vfiprintf_r+0x670>
   87c38:	f7ff bb12 	b.w	87260 <_vfiprintf_r+0x210>
   87c3c:	9c04      	ldr	r4, [sp, #16]
   87c3e:	9a03      	ldr	r2, [sp, #12]
   87c40:	f854 3b04 	ldr.w	r3, [r4], #4
   87c44:	601a      	str	r2, [r3, #0]
   87c46:	9404      	str	r4, [sp, #16]
   87c48:	f7ff ba40 	b.w	870cc <_vfiprintf_r+0x7c>
   87c4c:	9d00      	ldr	r5, [sp, #0]
   87c4e:	4e48      	ldr	r6, [pc, #288]	; (87d70 <_vfiprintf_r+0xd20>)
   87c50:	2d06      	cmp	r5, #6
   87c52:	bf28      	it	cs
   87c54:	2506      	movcs	r5, #6
   87c56:	9404      	str	r4, [sp, #16]
   87c58:	9501      	str	r5, [sp, #4]
   87c5a:	f7ff bbaf 	b.w	873bc <_vfiprintf_r+0x36c>
   87c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87c60:	990a      	ldr	r1, [sp, #40]	; 0x28
   87c62:	1af6      	subs	r6, r6, r3
   87c64:	461a      	mov	r2, r3
   87c66:	4630      	mov	r0, r6
   87c68:	f7fd fbda 	bl	85420 <strncpy>
   87c6c:	f899 3001 	ldrb.w	r3, [r9, #1]
   87c70:	b10b      	cbz	r3, 87c76 <_vfiprintf_r+0xc26>
   87c72:	f109 0901 	add.w	r9, r9, #1
   87c76:	220a      	movs	r2, #10
   87c78:	2300      	movs	r3, #0
   87c7a:	4620      	mov	r0, r4
   87c7c:	4629      	mov	r1, r5
   87c7e:	f003 ff61 	bl	8bb44 <__aeabi_uldivmod>
   87c82:	2700      	movs	r7, #0
   87c84:	e7ab      	b.n	87bde <_vfiprintf_r+0xb8e>
   87c86:	2001      	movs	r0, #1
   87c88:	4611      	mov	r1, r2
   87c8a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87c8e:	f7ff bbd9 	b.w	87444 <_vfiprintf_r+0x3f4>
   87c92:	2201      	movs	r2, #1
   87c94:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   87c98:	4610      	mov	r0, r2
   87c9a:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   87c9e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87ca2:	f7ff bbac 	b.w	873fe <_vfiprintf_r+0x3ae>
   87ca6:	9c04      	ldr	r4, [sp, #16]
   87ca8:	9a03      	ldr	r2, [sp, #12]
   87caa:	f854 3b04 	ldr.w	r3, [r4], #4
   87cae:	801a      	strh	r2, [r3, #0]
   87cb0:	9404      	str	r4, [sp, #16]
   87cb2:	f7ff ba0b 	b.w	870cc <_vfiprintf_r+0x7c>
   87cb6:	2500      	movs	r5, #0
   87cb8:	b2d4      	uxtb	r4, r2
   87cba:	f7ff bb1a 	b.w	872f2 <_vfiprintf_r+0x2a2>
   87cbe:	2500      	movs	r5, #0
   87cc0:	b2d4      	uxtb	r4, r2
   87cc2:	e73b      	b.n	87b3c <_vfiprintf_r+0xaec>
   87cc4:	b264      	sxtb	r4, r4
   87cc6:	17e5      	asrs	r5, r4, #31
   87cc8:	9304      	str	r3, [sp, #16]
   87cca:	4622      	mov	r2, r4
   87ccc:	462b      	mov	r3, r5
   87cce:	f7ff bab3 	b.w	87238 <_vfiprintf_r+0x1e8>
   87cd2:	2500      	movs	r5, #0
   87cd4:	b2dc      	uxtb	r4, r3
   87cd6:	f7ff bb09 	b.w	872ec <_vfiprintf_r+0x29c>
   87cda:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   87cde:	f001 fdc7 	bl	89870 <__retarget_lock_release_recursive>
   87ce2:	f7ff baec 	b.w	872be <_vfiprintf_r+0x26e>
   87ce6:	9b00      	ldr	r3, [sp, #0]
   87ce8:	9404      	str	r4, [sp, #16]
   87cea:	9301      	str	r3, [sp, #4]
   87cec:	9000      	str	r0, [sp, #0]
   87cee:	f7ff babf 	b.w	87270 <_vfiprintf_r+0x220>
   87cf2:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87cf6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 87d74 <_vfiprintf_r+0xd24>
   87cfa:	3101      	adds	r1, #1
   87cfc:	e619      	b.n	87932 <_vfiprintf_r+0x8e2>
   87cfe:	2200      	movs	r2, #0
   87d00:	9200      	str	r2, [sp, #0]
   87d02:	f7ff ba09 	b.w	87118 <_vfiprintf_r+0xc8>
   87d06:	4659      	mov	r1, fp
   87d08:	9805      	ldr	r0, [sp, #20]
   87d0a:	aa0e      	add	r2, sp, #56	; 0x38
   87d0c:	f7ff f964 	bl	86fd8 <__sprint_r.part.0>
   87d10:	2800      	cmp	r0, #0
   87d12:	f43f abd2 	beq.w	874ba <_vfiprintf_r+0x46a>
   87d16:	f7ff bb36 	b.w	87386 <_vfiprintf_r+0x336>
   87d1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   87d1c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 87d74 <_vfiprintf_r+0xd24>
   87d20:	3001      	adds	r0, #1
   87d22:	e657      	b.n	879d4 <_vfiprintf_r+0x984>
   87d24:	4684      	mov	ip, r0
   87d26:	f8df 9050 	ldr.w	r9, [pc, #80]	; 87d78 <_vfiprintf_r+0xd28>
   87d2a:	e543      	b.n	877b4 <_vfiprintf_r+0x764>
   87d2c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87d30:	07db      	lsls	r3, r3, #31
   87d32:	d407      	bmi.n	87d44 <_vfiprintf_r+0xcf4>
   87d34:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   87d38:	059f      	lsls	r7, r3, #22
   87d3a:	d403      	bmi.n	87d44 <_vfiprintf_r+0xcf4>
   87d3c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   87d40:	f001 fd96 	bl	89870 <__retarget_lock_release_recursive>
   87d44:	f04f 33ff 	mov.w	r3, #4294967295
   87d48:	9303      	str	r3, [sp, #12]
   87d4a:	f7ff bb27 	b.w	8739c <_vfiprintf_r+0x34c>
   87d4e:	9a04      	ldr	r2, [sp, #16]
   87d50:	f898 3001 	ldrb.w	r3, [r8, #1]
   87d54:	f852 0b04 	ldr.w	r0, [r2], #4
   87d58:	4688      	mov	r8, r1
   87d5a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   87d5e:	9000      	str	r0, [sp, #0]
   87d60:	9204      	str	r2, [sp, #16]
   87d62:	f7ff b9d7 	b.w	87114 <_vfiprintf_r+0xc4>
   87d66:	bf00      	nop
   87d68:	0008bfc0 	.word	0x0008bfc0
   87d6c:	0008bfac 	.word	0x0008bfac
   87d70:	0008bfd4 	.word	0x0008bfd4
   87d74:	0008c000 	.word	0x0008c000
   87d78:	0008c010 	.word	0x0008c010

00087d7c <__sbprintf>:
   87d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   87d7e:	460c      	mov	r4, r1
   87d80:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   87d84:	f04f 0e00 	mov.w	lr, #0
   87d88:	4615      	mov	r5, r2
   87d8a:	4606      	mov	r6, r0
   87d8c:	461f      	mov	r7, r3
   87d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87d90:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   87d94:	89e2      	ldrh	r2, [r4, #14]
   87d96:	8989      	ldrh	r1, [r1, #12]
   87d98:	9319      	str	r3, [sp, #100]	; 0x64
   87d9a:	69e3      	ldr	r3, [r4, #28]
   87d9c:	f8ad 200e 	strh.w	r2, [sp, #14]
   87da0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   87da2:	f021 0102 	bic.w	r1, r1, #2
   87da6:	9307      	str	r3, [sp, #28]
   87da8:	a816      	add	r0, sp, #88	; 0x58
   87daa:	ab1a      	add	r3, sp, #104	; 0x68
   87dac:	f8ad 100c 	strh.w	r1, [sp, #12]
   87db0:	f8cd e018 	str.w	lr, [sp, #24]
   87db4:	9209      	str	r2, [sp, #36]	; 0x24
   87db6:	9300      	str	r3, [sp, #0]
   87db8:	9304      	str	r3, [sp, #16]
   87dba:	f8cd c008 	str.w	ip, [sp, #8]
   87dbe:	f8cd c014 	str.w	ip, [sp, #20]
   87dc2:	f001 fd4f 	bl	89864 <__retarget_lock_init_recursive>
   87dc6:	462a      	mov	r2, r5
   87dc8:	463b      	mov	r3, r7
   87dca:	4669      	mov	r1, sp
   87dcc:	4630      	mov	r0, r6
   87dce:	f7ff f93f 	bl	87050 <_vfiprintf_r>
   87dd2:	1e05      	subs	r5, r0, #0
   87dd4:	db07      	blt.n	87de6 <__sbprintf+0x6a>
   87dd6:	4630      	mov	r0, r6
   87dd8:	4669      	mov	r1, sp
   87dda:	f001 f919 	bl	89010 <_fflush_r>
   87dde:	2800      	cmp	r0, #0
   87de0:	bf18      	it	ne
   87de2:	f04f 35ff 	movne.w	r5, #4294967295
   87de6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   87dea:	065b      	lsls	r3, r3, #25
   87dec:	d503      	bpl.n	87df6 <__sbprintf+0x7a>
   87dee:	89a3      	ldrh	r3, [r4, #12]
   87df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87df4:	81a3      	strh	r3, [r4, #12]
   87df6:	9816      	ldr	r0, [sp, #88]	; 0x58
   87df8:	f001 fd36 	bl	89868 <__retarget_lock_close_recursive>
   87dfc:	4628      	mov	r0, r5
   87dfe:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   87e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087e04 <__swsetup_r>:
   87e04:	b538      	push	{r3, r4, r5, lr}
   87e06:	4b32      	ldr	r3, [pc, #200]	; (87ed0 <__swsetup_r+0xcc>)
   87e08:	4605      	mov	r5, r0
   87e0a:	6818      	ldr	r0, [r3, #0]
   87e0c:	460c      	mov	r4, r1
   87e0e:	b110      	cbz	r0, 87e16 <__swsetup_r+0x12>
   87e10:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87e12:	2b00      	cmp	r3, #0
   87e14:	d03c      	beq.n	87e90 <__swsetup_r+0x8c>
   87e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87e1a:	0718      	lsls	r0, r3, #28
   87e1c:	b29a      	uxth	r2, r3
   87e1e:	d50c      	bpl.n	87e3a <__swsetup_r+0x36>
   87e20:	6921      	ldr	r1, [r4, #16]
   87e22:	b1a9      	cbz	r1, 87e50 <__swsetup_r+0x4c>
   87e24:	f012 0001 	ands.w	r0, r2, #1
   87e28:	d022      	beq.n	87e70 <__swsetup_r+0x6c>
   87e2a:	2500      	movs	r5, #0
   87e2c:	6960      	ldr	r0, [r4, #20]
   87e2e:	60a5      	str	r5, [r4, #8]
   87e30:	4240      	negs	r0, r0
   87e32:	61a0      	str	r0, [r4, #24]
   87e34:	b311      	cbz	r1, 87e7c <__swsetup_r+0x78>
   87e36:	2000      	movs	r0, #0
   87e38:	bd38      	pop	{r3, r4, r5, pc}
   87e3a:	06d1      	lsls	r1, r2, #27
   87e3c:	d53f      	bpl.n	87ebe <__swsetup_r+0xba>
   87e3e:	0752      	lsls	r2, r2, #29
   87e40:	d429      	bmi.n	87e96 <__swsetup_r+0x92>
   87e42:	6921      	ldr	r1, [r4, #16]
   87e44:	f043 0308 	orr.w	r3, r3, #8
   87e48:	81a3      	strh	r3, [r4, #12]
   87e4a:	b29a      	uxth	r2, r3
   87e4c:	2900      	cmp	r1, #0
   87e4e:	d1e9      	bne.n	87e24 <__swsetup_r+0x20>
   87e50:	f402 7020 	and.w	r0, r2, #640	; 0x280
   87e54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   87e58:	d0e4      	beq.n	87e24 <__swsetup_r+0x20>
   87e5a:	4628      	mov	r0, r5
   87e5c:	4621      	mov	r1, r4
   87e5e:	f001 fd37 	bl	898d0 <__smakebuf_r>
   87e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87e66:	6921      	ldr	r1, [r4, #16]
   87e68:	b29a      	uxth	r2, r3
   87e6a:	f012 0001 	ands.w	r0, r2, #1
   87e6e:	d1dc      	bne.n	87e2a <__swsetup_r+0x26>
   87e70:	0795      	lsls	r5, r2, #30
   87e72:	bf58      	it	pl
   87e74:	6960      	ldrpl	r0, [r4, #20]
   87e76:	60a0      	str	r0, [r4, #8]
   87e78:	2900      	cmp	r1, #0
   87e7a:	d1dc      	bne.n	87e36 <__swsetup_r+0x32>
   87e7c:	0612      	lsls	r2, r2, #24
   87e7e:	bf58      	it	pl
   87e80:	4608      	movpl	r0, r1
   87e82:	d5d9      	bpl.n	87e38 <__swsetup_r+0x34>
   87e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87e88:	f04f 30ff 	mov.w	r0, #4294967295
   87e8c:	81a3      	strh	r3, [r4, #12]
   87e8e:	bd38      	pop	{r3, r4, r5, pc}
   87e90:	f001 f91a 	bl	890c8 <__sinit>
   87e94:	e7bf      	b.n	87e16 <__swsetup_r+0x12>
   87e96:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87e98:	b151      	cbz	r1, 87eb0 <__swsetup_r+0xac>
   87e9a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   87e9e:	4291      	cmp	r1, r2
   87ea0:	d004      	beq.n	87eac <__swsetup_r+0xa8>
   87ea2:	4628      	mov	r0, r5
   87ea4:	f001 fa34 	bl	89310 <_free_r>
   87ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87eac:	2200      	movs	r2, #0
   87eae:	6322      	str	r2, [r4, #48]	; 0x30
   87eb0:	2200      	movs	r2, #0
   87eb2:	6921      	ldr	r1, [r4, #16]
   87eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   87eb8:	e9c4 1200 	strd	r1, r2, [r4]
   87ebc:	e7c2      	b.n	87e44 <__swsetup_r+0x40>
   87ebe:	2209      	movs	r2, #9
   87ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87ec4:	602a      	str	r2, [r5, #0]
   87ec6:	f04f 30ff 	mov.w	r0, #4294967295
   87eca:	81a3      	strh	r3, [r4, #12]
   87ecc:	bd38      	pop	{r3, r4, r5, pc}
   87ece:	bf00      	nop
   87ed0:	200003c8 	.word	0x200003c8

00087ed4 <register_fini>:
   87ed4:	4b02      	ldr	r3, [pc, #8]	; (87ee0 <register_fini+0xc>)
   87ed6:	b113      	cbz	r3, 87ede <register_fini+0xa>
   87ed8:	4802      	ldr	r0, [pc, #8]	; (87ee4 <register_fini+0x10>)
   87eda:	f000 b805 	b.w	87ee8 <atexit>
   87ede:	4770      	bx	lr
   87ee0:	00000000 	.word	0x00000000
   87ee4:	0008913d 	.word	0x0008913d

00087ee8 <atexit>:
   87ee8:	2300      	movs	r3, #0
   87eea:	4601      	mov	r1, r0
   87eec:	461a      	mov	r2, r3
   87eee:	4618      	mov	r0, r3
   87ef0:	f002 bfcc 	b.w	8ae8c <__register_exitproc>

00087ef4 <quorem>:
   87ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87ef8:	6903      	ldr	r3, [r0, #16]
   87efa:	690d      	ldr	r5, [r1, #16]
   87efc:	b083      	sub	sp, #12
   87efe:	42ab      	cmp	r3, r5
   87f00:	f2c0 8084 	blt.w	8800c <quorem+0x118>
   87f04:	3d01      	subs	r5, #1
   87f06:	f101 0614 	add.w	r6, r1, #20
   87f0a:	f100 0914 	add.w	r9, r0, #20
   87f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   87f12:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   87f16:	3301      	adds	r3, #1
   87f18:	468e      	mov	lr, r1
   87f1a:	00a9      	lsls	r1, r5, #2
   87f1c:	9100      	str	r1, [sp, #0]
   87f1e:	429a      	cmp	r2, r3
   87f20:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   87f24:	4682      	mov	sl, r0
   87f26:	fbb2 f7f3 	udiv	r7, r2, r3
   87f2a:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   87f2e:	9101      	str	r1, [sp, #4]
   87f30:	d337      	bcc.n	87fa2 <quorem+0xae>
   87f32:	2200      	movs	r2, #0
   87f34:	46b4      	mov	ip, r6
   87f36:	4614      	mov	r4, r2
   87f38:	4648      	mov	r0, r9
   87f3a:	f85c 3b04 	ldr.w	r3, [ip], #4
   87f3e:	6801      	ldr	r1, [r0, #0]
   87f40:	fa1f fb83 	uxth.w	fp, r3
   87f44:	fb07 220b 	mla	r2, r7, fp, r2
   87f48:	0c1b      	lsrs	r3, r3, #16
   87f4a:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   87f4e:	fb07 bb03 	mla	fp, r7, r3, fp
   87f52:	b293      	uxth	r3, r2
   87f54:	1ae3      	subs	r3, r4, r3
   87f56:	b28a      	uxth	r2, r1
   87f58:	fa1f f48b 	uxth.w	r4, fp
   87f5c:	4413      	add	r3, r2
   87f5e:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   87f62:	eb04 4423 	add.w	r4, r4, r3, asr #16
   87f66:	b29b      	uxth	r3, r3
   87f68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   87f6c:	45e0      	cmp	r8, ip
   87f6e:	f840 3b04 	str.w	r3, [r0], #4
   87f72:	ea4f 4424 	mov.w	r4, r4, asr #16
   87f76:	ea4f 421b 	mov.w	r2, fp, lsr #16
   87f7a:	d2de      	bcs.n	87f3a <quorem+0x46>
   87f7c:	9b00      	ldr	r3, [sp, #0]
   87f7e:	f859 3003 	ldr.w	r3, [r9, r3]
   87f82:	b973      	cbnz	r3, 87fa2 <quorem+0xae>
   87f84:	9b01      	ldr	r3, [sp, #4]
   87f86:	3b04      	subs	r3, #4
   87f88:	4599      	cmp	r9, r3
   87f8a:	d304      	bcc.n	87f96 <quorem+0xa2>
   87f8c:	e007      	b.n	87f9e <quorem+0xaa>
   87f8e:	4599      	cmp	r9, r3
   87f90:	f105 35ff 	add.w	r5, r5, #4294967295
   87f94:	d203      	bcs.n	87f9e <quorem+0xaa>
   87f96:	f853 2904 	ldr.w	r2, [r3], #-4
   87f9a:	2a00      	cmp	r2, #0
   87f9c:	d0f7      	beq.n	87f8e <quorem+0x9a>
   87f9e:	f8ca 5010 	str.w	r5, [sl, #16]
   87fa2:	4671      	mov	r1, lr
   87fa4:	4650      	mov	r0, sl
   87fa6:	f002 fab3 	bl	8a510 <__mcmp>
   87faa:	2800      	cmp	r0, #0
   87fac:	db2a      	blt.n	88004 <quorem+0x110>
   87fae:	4648      	mov	r0, r9
   87fb0:	2300      	movs	r3, #0
   87fb2:	3701      	adds	r7, #1
   87fb4:	f856 1b04 	ldr.w	r1, [r6], #4
   87fb8:	6804      	ldr	r4, [r0, #0]
   87fba:	b28a      	uxth	r2, r1
   87fbc:	1a9a      	subs	r2, r3, r2
   87fbe:	0c0b      	lsrs	r3, r1, #16
   87fc0:	b2a1      	uxth	r1, r4
   87fc2:	440a      	add	r2, r1
   87fc4:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   87fc8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87fcc:	b292      	uxth	r2, r2
   87fce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87fd2:	45b0      	cmp	r8, r6
   87fd4:	f840 2b04 	str.w	r2, [r0], #4
   87fd8:	ea4f 4323 	mov.w	r3, r3, asr #16
   87fdc:	d2ea      	bcs.n	87fb4 <quorem+0xc0>
   87fde:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   87fe2:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   87fe6:	b96a      	cbnz	r2, 88004 <quorem+0x110>
   87fe8:	3b04      	subs	r3, #4
   87fea:	4599      	cmp	r9, r3
   87fec:	d304      	bcc.n	87ff8 <quorem+0x104>
   87fee:	e007      	b.n	88000 <quorem+0x10c>
   87ff0:	4599      	cmp	r9, r3
   87ff2:	f105 35ff 	add.w	r5, r5, #4294967295
   87ff6:	d203      	bcs.n	88000 <quorem+0x10c>
   87ff8:	f853 2904 	ldr.w	r2, [r3], #-4
   87ffc:	2a00      	cmp	r2, #0
   87ffe:	d0f7      	beq.n	87ff0 <quorem+0xfc>
   88000:	f8ca 5010 	str.w	r5, [sl, #16]
   88004:	4638      	mov	r0, r7
   88006:	b003      	add	sp, #12
   88008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8800c:	2000      	movs	r0, #0
   8800e:	b003      	add	sp, #12
   88010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88014:	0000      	movs	r0, r0
   88016:	0000      	movs	r0, r0

00088018 <_dtoa_r>:
   88018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8801c:	4616      	mov	r6, r2
   8801e:	461f      	mov	r7, r3
   88020:	6c01      	ldr	r1, [r0, #64]	; 0x40
   88022:	b09b      	sub	sp, #108	; 0x6c
   88024:	4604      	mov	r4, r0
   88026:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8802a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8802c:	b141      	cbz	r1, 88040 <_dtoa_r+0x28>
   8802e:	2301      	movs	r3, #1
   88030:	6c42      	ldr	r2, [r0, #68]	; 0x44
   88032:	4093      	lsls	r3, r2
   88034:	e9c1 2301 	strd	r2, r3, [r1, #4]
   88038:	f002 f83c 	bl	8a0b4 <_Bfree>
   8803c:	2300      	movs	r3, #0
   8803e:	6423      	str	r3, [r4, #64]	; 0x40
   88040:	f1b7 0900 	subs.w	r9, r7, #0
   88044:	bfb4      	ite	lt
   88046:	2301      	movlt	r3, #1
   88048:	2300      	movge	r3, #0
   8804a:	602b      	str	r3, [r5, #0]
   8804c:	4b76      	ldr	r3, [pc, #472]	; (88228 <_dtoa_r+0x210>)
   8804e:	bfbc      	itt	lt
   88050:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   88054:	f8cd 9014 	strlt.w	r9, [sp, #20]
   88058:	ea33 0309 	bics.w	r3, r3, r9
   8805c:	f000 80ab 	beq.w	881b6 <_dtoa_r+0x19e>
   88060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88064:	4610      	mov	r0, r2
   88066:	4619      	mov	r1, r3
   88068:	2200      	movs	r2, #0
   8806a:	2300      	movs	r3, #0
   8806c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   88070:	f003 fcf8 	bl	8ba64 <__aeabi_dcmpeq>
   88074:	4680      	mov	r8, r0
   88076:	b170      	cbz	r0, 88096 <_dtoa_r+0x7e>
   88078:	2301      	movs	r3, #1
   8807a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8807c:	6013      	str	r3, [r2, #0]
   8807e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88080:	2b00      	cmp	r3, #0
   88082:	f000 82c2 	beq.w	8860a <_dtoa_r+0x5f2>
   88086:	4869      	ldr	r0, [pc, #420]	; (8822c <_dtoa_r+0x214>)
   88088:	6018      	str	r0, [r3, #0]
   8808a:	1e43      	subs	r3, r0, #1
   8808c:	9303      	str	r3, [sp, #12]
   8808e:	9803      	ldr	r0, [sp, #12]
   88090:	b01b      	add	sp, #108	; 0x6c
   88092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88096:	aa18      	add	r2, sp, #96	; 0x60
   88098:	ab19      	add	r3, sp, #100	; 0x64
   8809a:	e9cd 3200 	strd	r3, r2, [sp]
   8809e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   880a2:	4620      	mov	r0, r4
   880a4:	f002 fafa 	bl	8a69c <__d2b>
   880a8:	ea5f 5519 	movs.w	r5, r9, lsr #20
   880ac:	4682      	mov	sl, r0
   880ae:	f040 8098 	bne.w	881e2 <_dtoa_r+0x1ca>
   880b2:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   880b6:	4445      	add	r5, r8
   880b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
   880bc:	2820      	cmp	r0, #32
   880be:	f340 8390 	ble.w	887e2 <_dtoa_r+0x7ca>
   880c2:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   880c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
   880ca:	fa09 f903 	lsl.w	r9, r9, r3
   880ce:	fa26 f000 	lsr.w	r0, r6, r0
   880d2:	ea49 0000 	orr.w	r0, r9, r0
   880d6:	f003 f9e3 	bl	8b4a0 <__aeabi_ui2d>
   880da:	2201      	movs	r2, #1
   880dc:	3d01      	subs	r5, #1
   880de:	920f      	str	r2, [sp, #60]	; 0x3c
   880e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   880e4:	2200      	movs	r2, #0
   880e6:	4b52      	ldr	r3, [pc, #328]	; (88230 <_dtoa_r+0x218>)
   880e8:	f003 f89c 	bl	8b224 <__aeabi_dsub>
   880ec:	a348      	add	r3, pc, #288	; (adr r3, 88210 <_dtoa_r+0x1f8>)
   880ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   880f2:	f003 fa4f 	bl	8b594 <__aeabi_dmul>
   880f6:	a348      	add	r3, pc, #288	; (adr r3, 88218 <_dtoa_r+0x200>)
   880f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   880fc:	f003 f894 	bl	8b228 <__adddf3>
   88100:	4606      	mov	r6, r0
   88102:	4628      	mov	r0, r5
   88104:	460f      	mov	r7, r1
   88106:	f003 f9db 	bl	8b4c0 <__aeabi_i2d>
   8810a:	a345      	add	r3, pc, #276	; (adr r3, 88220 <_dtoa_r+0x208>)
   8810c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88110:	f003 fa40 	bl	8b594 <__aeabi_dmul>
   88114:	4602      	mov	r2, r0
   88116:	460b      	mov	r3, r1
   88118:	4630      	mov	r0, r6
   8811a:	4639      	mov	r1, r7
   8811c:	f003 f884 	bl	8b228 <__adddf3>
   88120:	4606      	mov	r6, r0
   88122:	460f      	mov	r7, r1
   88124:	f003 fce6 	bl	8baf4 <__aeabi_d2iz>
   88128:	2200      	movs	r2, #0
   8812a:	4683      	mov	fp, r0
   8812c:	2300      	movs	r3, #0
   8812e:	4630      	mov	r0, r6
   88130:	4639      	mov	r1, r7
   88132:	f003 fca1 	bl	8ba78 <__aeabi_dcmplt>
   88136:	2800      	cmp	r0, #0
   88138:	f040 825a 	bne.w	885f0 <_dtoa_r+0x5d8>
   8813c:	f1bb 0f16 	cmp.w	fp, #22
   88140:	f200 8248 	bhi.w	885d4 <_dtoa_r+0x5bc>
   88144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   88148:	4b3a      	ldr	r3, [pc, #232]	; (88234 <_dtoa_r+0x21c>)
   8814a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8814e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88152:	f003 fc91 	bl	8ba78 <__aeabi_dcmplt>
   88156:	2800      	cmp	r0, #0
   88158:	d072      	beq.n	88240 <_dtoa_r+0x228>
   8815a:	2300      	movs	r3, #0
   8815c:	eba8 0505 	sub.w	r5, r8, r5
   88160:	930e      	str	r3, [sp, #56]	; 0x38
   88162:	1e6b      	subs	r3, r5, #1
   88164:	f10b 3bff 	add.w	fp, fp, #4294967295
   88168:	9306      	str	r3, [sp, #24]
   8816a:	f100 823b 	bmi.w	885e4 <_dtoa_r+0x5cc>
   8816e:	2300      	movs	r3, #0
   88170:	930b      	str	r3, [sp, #44]	; 0x2c
   88172:	f1bb 0f00 	cmp.w	fp, #0
   88176:	da6b      	bge.n	88250 <_dtoa_r+0x238>
   88178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8817a:	f8cd b01c 	str.w	fp, [sp, #28]
   8817e:	eba3 030b 	sub.w	r3, r3, fp
   88182:	930b      	str	r3, [sp, #44]	; 0x2c
   88184:	f1cb 0300 	rsb	r3, fp, #0
   88188:	930d      	str	r3, [sp, #52]	; 0x34
   8818a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8818c:	f04f 0b00 	mov.w	fp, #0
   88190:	2b09      	cmp	r3, #9
   88192:	d866      	bhi.n	88262 <_dtoa_r+0x24a>
   88194:	2b05      	cmp	r3, #5
   88196:	f340 8322 	ble.w	887de <_dtoa_r+0x7c6>
   8819a:	2500      	movs	r5, #0
   8819c:	3b04      	subs	r3, #4
   8819e:	9324      	str	r3, [sp, #144]	; 0x90
   881a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   881a2:	3b02      	subs	r3, #2
   881a4:	2b03      	cmp	r3, #3
   881a6:	f200 866e 	bhi.w	88e86 <_dtoa_r+0xe6e>
   881aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   881ae:	043b      	.short	0x043b
   881b0:	042f0438 	.word	0x042f0438
   881b4:	0412      	.short	0x0412
   881b6:	f242 730f 	movw	r3, #9999	; 0x270f
   881ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
   881bc:	f3c9 0913 	ubfx	r9, r9, #0, #20
   881c0:	6013      	str	r3, [r2, #0]
   881c2:	ea59 0306 	orrs.w	r3, r9, r6
   881c6:	d11c      	bne.n	88202 <_dtoa_r+0x1ea>
   881c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   881ca:	2b00      	cmp	r3, #0
   881cc:	f000 8657 	beq.w	88e7e <_dtoa_r+0xe66>
   881d0:	4b19      	ldr	r3, [pc, #100]	; (88238 <_dtoa_r+0x220>)
   881d2:	9303      	str	r3, [sp, #12]
   881d4:	3308      	adds	r3, #8
   881d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   881d8:	9803      	ldr	r0, [sp, #12]
   881da:	6013      	str	r3, [r2, #0]
   881dc:	b01b      	add	sp, #108	; 0x6c
   881de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   881e2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   881e6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   881ea:	4608      	mov	r0, r1
   881ec:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   881f0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   881f4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   881f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   881fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   88200:	e770      	b.n	880e4 <_dtoa_r+0xcc>
   88202:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88204:	2b00      	cmp	r3, #0
   88206:	f040 83c8 	bne.w	8899a <_dtoa_r+0x982>
   8820a:	4b0c      	ldr	r3, [pc, #48]	; (8823c <_dtoa_r+0x224>)
   8820c:	9303      	str	r3, [sp, #12]
   8820e:	e73e      	b.n	8808e <_dtoa_r+0x76>
   88210:	636f4361 	.word	0x636f4361
   88214:	3fd287a7 	.word	0x3fd287a7
   88218:	8b60c8b3 	.word	0x8b60c8b3
   8821c:	3fc68a28 	.word	0x3fc68a28
   88220:	509f79fb 	.word	0x509f79fb
   88224:	3fd34413 	.word	0x3fd34413
   88228:	7ff00000 	.word	0x7ff00000
   8822c:	0008bfdd 	.word	0x0008bfdd
   88230:	3ff80000 	.word	0x3ff80000
   88234:	0008c178 	.word	0x0008c178
   88238:	0008c024 	.word	0x0008c024
   8823c:	0008c020 	.word	0x0008c020
   88240:	eba8 0505 	sub.w	r5, r8, r5
   88244:	1e6b      	subs	r3, r5, #1
   88246:	9306      	str	r3, [sp, #24]
   88248:	f100 84a9 	bmi.w	88b9e <_dtoa_r+0xb86>
   8824c:	900e      	str	r0, [sp, #56]	; 0x38
   8824e:	900b      	str	r0, [sp, #44]	; 0x2c
   88250:	9b06      	ldr	r3, [sp, #24]
   88252:	445b      	add	r3, fp
   88254:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   88258:	2300      	movs	r3, #0
   8825a:	930d      	str	r3, [sp, #52]	; 0x34
   8825c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8825e:	2b09      	cmp	r3, #9
   88260:	d998      	bls.n	88194 <_dtoa_r+0x17c>
   88262:	2300      	movs	r3, #0
   88264:	2501      	movs	r5, #1
   88266:	9324      	str	r3, [sp, #144]	; 0x90
   88268:	9325      	str	r3, [sp, #148]	; 0x94
   8826a:	f04f 33ff 	mov.w	r3, #4294967295
   8826e:	950c      	str	r5, [sp, #48]	; 0x30
   88270:	930a      	str	r3, [sp, #40]	; 0x28
   88272:	2100      	movs	r1, #0
   88274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88276:	6461      	str	r1, [r4, #68]	; 0x44
   88278:	9312      	str	r3, [sp, #72]	; 0x48
   8827a:	4620      	mov	r0, r4
   8827c:	f001 fef4 	bl	8a068 <_Balloc>
   88280:	9003      	str	r0, [sp, #12]
   88282:	2800      	cmp	r0, #0
   88284:	f000 8607 	beq.w	88e96 <_dtoa_r+0xe7e>
   88288:	9b03      	ldr	r3, [sp, #12]
   8828a:	6423      	str	r3, [r4, #64]	; 0x40
   8828c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8828e:	2b0e      	cmp	r3, #14
   88290:	f200 80e9 	bhi.w	88466 <_dtoa_r+0x44e>
   88294:	2d00      	cmp	r5, #0
   88296:	f000 80e6 	beq.w	88466 <_dtoa_r+0x44e>
   8829a:	9907      	ldr	r1, [sp, #28]
   8829c:	2900      	cmp	r1, #0
   8829e:	f340 8452 	ble.w	88b46 <_dtoa_r+0xb2e>
   882a2:	4bb5      	ldr	r3, [pc, #724]	; (88578 <_dtoa_r+0x560>)
   882a4:	f001 020f 	and.w	r2, r1, #15
   882a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   882ac:	05c8      	lsls	r0, r1, #23
   882ae:	ea4f 1521 	mov.w	r5, r1, asr #4
   882b2:	e9d3 6700 	ldrd	r6, r7, [r3]
   882b6:	f140 83ee 	bpl.w	88a96 <_dtoa_r+0xa7e>
   882ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   882be:	4baf      	ldr	r3, [pc, #700]	; (8857c <_dtoa_r+0x564>)
   882c0:	f04f 0903 	mov.w	r9, #3
   882c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   882c8:	f003 fa8e 	bl	8b7e8 <__aeabi_ddiv>
   882cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   882d0:	f005 050f 	and.w	r5, r5, #15
   882d4:	b18d      	cbz	r5, 882fa <_dtoa_r+0x2e2>
   882d6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8857c <_dtoa_r+0x564>
   882da:	07e9      	lsls	r1, r5, #31
   882dc:	d509      	bpl.n	882f2 <_dtoa_r+0x2da>
   882de:	e9d8 2300 	ldrd	r2, r3, [r8]
   882e2:	4630      	mov	r0, r6
   882e4:	4639      	mov	r1, r7
   882e6:	f003 f955 	bl	8b594 <__aeabi_dmul>
   882ea:	4606      	mov	r6, r0
   882ec:	460f      	mov	r7, r1
   882ee:	f109 0901 	add.w	r9, r9, #1
   882f2:	106d      	asrs	r5, r5, #1
   882f4:	f108 0808 	add.w	r8, r8, #8
   882f8:	d1ef      	bne.n	882da <_dtoa_r+0x2c2>
   882fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   882fe:	4632      	mov	r2, r6
   88300:	463b      	mov	r3, r7
   88302:	f003 fa71 	bl	8b7e8 <__aeabi_ddiv>
   88306:	4606      	mov	r6, r0
   88308:	460f      	mov	r7, r1
   8830a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8830c:	b143      	cbz	r3, 88320 <_dtoa_r+0x308>
   8830e:	2200      	movs	r2, #0
   88310:	4630      	mov	r0, r6
   88312:	4639      	mov	r1, r7
   88314:	4b9a      	ldr	r3, [pc, #616]	; (88580 <_dtoa_r+0x568>)
   88316:	f003 fbaf 	bl	8ba78 <__aeabi_dcmplt>
   8831a:	2800      	cmp	r0, #0
   8831c:	f040 853b 	bne.w	88d96 <_dtoa_r+0xd7e>
   88320:	4648      	mov	r0, r9
   88322:	f003 f8cd 	bl	8b4c0 <__aeabi_i2d>
   88326:	4632      	mov	r2, r6
   88328:	463b      	mov	r3, r7
   8832a:	f003 f933 	bl	8b594 <__aeabi_dmul>
   8832e:	4b95      	ldr	r3, [pc, #596]	; (88584 <_dtoa_r+0x56c>)
   88330:	2200      	movs	r2, #0
   88332:	f002 ff79 	bl	8b228 <__adddf3>
   88336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88338:	4680      	mov	r8, r0
   8833a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8833e:	2b00      	cmp	r3, #0
   88340:	f000 83ce 	beq.w	88ae0 <_dtoa_r+0xac8>
   88344:	9b07      	ldr	r3, [sp, #28]
   88346:	9313      	str	r3, [sp, #76]	; 0x4c
   88348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8834a:	9310      	str	r3, [sp, #64]	; 0x40
   8834c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8834e:	2b00      	cmp	r3, #0
   88350:	f000 84b7 	beq.w	88cc2 <_dtoa_r+0xcaa>
   88354:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88356:	4b88      	ldr	r3, [pc, #544]	; (88578 <_dtoa_r+0x560>)
   88358:	2000      	movs	r0, #0
   8835a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8835e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   88362:	4989      	ldr	r1, [pc, #548]	; (88588 <_dtoa_r+0x570>)
   88364:	f003 fa40 	bl	8b7e8 <__aeabi_ddiv>
   88368:	4642      	mov	r2, r8
   8836a:	464b      	mov	r3, r9
   8836c:	f002 ff5a 	bl	8b224 <__aeabi_dsub>
   88370:	4602      	mov	r2, r0
   88372:	460b      	mov	r3, r1
   88374:	4630      	mov	r0, r6
   88376:	4639      	mov	r1, r7
   88378:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8837c:	f003 fbba 	bl	8baf4 <__aeabi_d2iz>
   88380:	4680      	mov	r8, r0
   88382:	f003 f89d 	bl	8b4c0 <__aeabi_i2d>
   88386:	4602      	mov	r2, r0
   88388:	460b      	mov	r3, r1
   8838a:	4630      	mov	r0, r6
   8838c:	4639      	mov	r1, r7
   8838e:	f002 ff49 	bl	8b224 <__aeabi_dsub>
   88392:	9d03      	ldr	r5, [sp, #12]
   88394:	f108 0330 	add.w	r3, r8, #48	; 0x30
   88398:	4606      	mov	r6, r0
   8839a:	460f      	mov	r7, r1
   8839c:	4602      	mov	r2, r0
   8839e:	f805 3b01 	strb.w	r3, [r5], #1
   883a2:	460b      	mov	r3, r1
   883a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   883a8:	f003 fb84 	bl	8bab4 <__aeabi_dcmpgt>
   883ac:	2800      	cmp	r0, #0
   883ae:	f040 853b 	bne.w	88e28 <_dtoa_r+0xe10>
   883b2:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   883b6:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   883ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   883be:	f04f 0900 	mov.w	r9, #0
   883c2:	9410      	str	r4, [sp, #64]	; 0x40
   883c4:	e02a      	b.n	8841c <_dtoa_r+0x404>
   883c6:	f109 0901 	add.w	r9, r9, #1
   883ca:	45c1      	cmp	r9, r8
   883cc:	da48      	bge.n	88460 <_dtoa_r+0x448>
   883ce:	4650      	mov	r0, sl
   883d0:	4659      	mov	r1, fp
   883d2:	2200      	movs	r2, #0
   883d4:	4b6d      	ldr	r3, [pc, #436]	; (8858c <_dtoa_r+0x574>)
   883d6:	f003 f8dd 	bl	8b594 <__aeabi_dmul>
   883da:	2200      	movs	r2, #0
   883dc:	4b6b      	ldr	r3, [pc, #428]	; (8858c <_dtoa_r+0x574>)
   883de:	4682      	mov	sl, r0
   883e0:	468b      	mov	fp, r1
   883e2:	4630      	mov	r0, r6
   883e4:	4639      	mov	r1, r7
   883e6:	f003 f8d5 	bl	8b594 <__aeabi_dmul>
   883ea:	460f      	mov	r7, r1
   883ec:	4606      	mov	r6, r0
   883ee:	f003 fb81 	bl	8baf4 <__aeabi_d2iz>
   883f2:	4604      	mov	r4, r0
   883f4:	f003 f864 	bl	8b4c0 <__aeabi_i2d>
   883f8:	4602      	mov	r2, r0
   883fa:	460b      	mov	r3, r1
   883fc:	4630      	mov	r0, r6
   883fe:	4639      	mov	r1, r7
   88400:	f002 ff10 	bl	8b224 <__aeabi_dsub>
   88404:	3430      	adds	r4, #48	; 0x30
   88406:	4652      	mov	r2, sl
   88408:	465b      	mov	r3, fp
   8840a:	f805 4b01 	strb.w	r4, [r5], #1
   8840e:	4606      	mov	r6, r0
   88410:	460f      	mov	r7, r1
   88412:	f003 fb31 	bl	8ba78 <__aeabi_dcmplt>
   88416:	2800      	cmp	r0, #0
   88418:	f040 8503 	bne.w	88e22 <_dtoa_r+0xe0a>
   8841c:	4632      	mov	r2, r6
   8841e:	463b      	mov	r3, r7
   88420:	2000      	movs	r0, #0
   88422:	4957      	ldr	r1, [pc, #348]	; (88580 <_dtoa_r+0x568>)
   88424:	f002 fefe 	bl	8b224 <__aeabi_dsub>
   88428:	4652      	mov	r2, sl
   8842a:	465b      	mov	r3, fp
   8842c:	f003 fb24 	bl	8ba78 <__aeabi_dcmplt>
   88430:	2800      	cmp	r0, #0
   88432:	d0c8      	beq.n	883c6 <_dtoa_r+0x3ae>
   88434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88436:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8843a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8843c:	9a03      	ldr	r2, [sp, #12]
   8843e:	9307      	str	r3, [sp, #28]
   88440:	e002      	b.n	88448 <_dtoa_r+0x430>
   88442:	4295      	cmp	r5, r2
   88444:	f000 84d2 	beq.w	88dec <_dtoa_r+0xdd4>
   88448:	46a9      	mov	r9, r5
   8844a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8844e:	2b39      	cmp	r3, #57	; 0x39
   88450:	d0f7      	beq.n	88442 <_dtoa_r+0x42a>
   88452:	3301      	adds	r3, #1
   88454:	b2db      	uxtb	r3, r3
   88456:	702b      	strb	r3, [r5, #0]
   88458:	9b07      	ldr	r3, [sp, #28]
   8845a:	3301      	adds	r3, #1
   8845c:	9307      	str	r3, [sp, #28]
   8845e:	e1a0      	b.n	887a2 <_dtoa_r+0x78a>
   88460:	9c10      	ldr	r4, [sp, #64]	; 0x40
   88462:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   88466:	9b19      	ldr	r3, [sp, #100]	; 0x64
   88468:	2b00      	cmp	r3, #0
   8846a:	f2c0 8093 	blt.w	88594 <_dtoa_r+0x57c>
   8846e:	9a07      	ldr	r2, [sp, #28]
   88470:	2a0e      	cmp	r2, #14
   88472:	f300 808f 	bgt.w	88594 <_dtoa_r+0x57c>
   88476:	4b40      	ldr	r3, [pc, #256]	; (88578 <_dtoa_r+0x560>)
   88478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8847c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88480:	e9cd 2304 	strd	r2, r3, [sp, #16]
   88484:	9b25      	ldr	r3, [sp, #148]	; 0x94
   88486:	2b00      	cmp	r3, #0
   88488:	da1a      	bge.n	884c0 <_dtoa_r+0x4a8>
   8848a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8848c:	2b00      	cmp	r3, #0
   8848e:	dc17      	bgt.n	884c0 <_dtoa_r+0x4a8>
   88490:	f040 833f 	bne.w	88b12 <_dtoa_r+0xafa>
   88494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   88498:	2200      	movs	r2, #0
   8849a:	4b3d      	ldr	r3, [pc, #244]	; (88590 <_dtoa_r+0x578>)
   8849c:	f003 f87a 	bl	8b594 <__aeabi_dmul>
   884a0:	4602      	mov	r2, r0
   884a2:	460b      	mov	r3, r1
   884a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   884a8:	f003 faf0 	bl	8ba8c <__aeabi_dcmple>
   884ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   884b0:	4645      	mov	r5, r8
   884b2:	2800      	cmp	r0, #0
   884b4:	f000 82cd 	beq.w	88a52 <_dtoa_r+0xa3a>
   884b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   884ba:	9f03      	ldr	r7, [sp, #12]
   884bc:	43de      	mvns	r6, r3
   884be:	e2d0      	b.n	88a62 <_dtoa_r+0xa4a>
   884c0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   884c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   884c8:	4632      	mov	r2, r6
   884ca:	463b      	mov	r3, r7
   884cc:	f003 f98c 	bl	8b7e8 <__aeabi_ddiv>
   884d0:	f003 fb10 	bl	8baf4 <__aeabi_d2iz>
   884d4:	4680      	mov	r8, r0
   884d6:	f002 fff3 	bl	8b4c0 <__aeabi_i2d>
   884da:	4632      	mov	r2, r6
   884dc:	463b      	mov	r3, r7
   884de:	f003 f859 	bl	8b594 <__aeabi_dmul>
   884e2:	460b      	mov	r3, r1
   884e4:	4602      	mov	r2, r0
   884e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   884ea:	f002 fe9b 	bl	8b224 <__aeabi_dsub>
   884ee:	9d03      	ldr	r5, [sp, #12]
   884f0:	f108 0330 	add.w	r3, r8, #48	; 0x30
   884f4:	f805 3b01 	strb.w	r3, [r5], #1
   884f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   884fa:	2b01      	cmp	r3, #1
   884fc:	f000 837f 	beq.w	88bfe <_dtoa_r+0xbe6>
   88500:	f8cd a018 	str.w	sl, [sp, #24]
   88504:	f04f 0901 	mov.w	r9, #1
   88508:	469b      	mov	fp, r3
   8850a:	46aa      	mov	sl, r5
   8850c:	9408      	str	r4, [sp, #32]
   8850e:	e01d      	b.n	8854c <_dtoa_r+0x534>
   88510:	4632      	mov	r2, r6
   88512:	463b      	mov	r3, r7
   88514:	4620      	mov	r0, r4
   88516:	4629      	mov	r1, r5
   88518:	f003 f966 	bl	8b7e8 <__aeabi_ddiv>
   8851c:	f003 faea 	bl	8baf4 <__aeabi_d2iz>
   88520:	4680      	mov	r8, r0
   88522:	f002 ffcd 	bl	8b4c0 <__aeabi_i2d>
   88526:	4632      	mov	r2, r6
   88528:	463b      	mov	r3, r7
   8852a:	f003 f833 	bl	8b594 <__aeabi_dmul>
   8852e:	f109 0901 	add.w	r9, r9, #1
   88532:	460b      	mov	r3, r1
   88534:	4602      	mov	r2, r0
   88536:	4629      	mov	r1, r5
   88538:	4620      	mov	r0, r4
   8853a:	f002 fe73 	bl	8b224 <__aeabi_dsub>
   8853e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   88542:	45cb      	cmp	fp, r9
   88544:	f80a 3b01 	strb.w	r3, [sl], #1
   88548:	f000 8355 	beq.w	88bf6 <_dtoa_r+0xbde>
   8854c:	2200      	movs	r2, #0
   8854e:	4b0f      	ldr	r3, [pc, #60]	; (8858c <_dtoa_r+0x574>)
   88550:	f003 f820 	bl	8b594 <__aeabi_dmul>
   88554:	2200      	movs	r2, #0
   88556:	2300      	movs	r3, #0
   88558:	4604      	mov	r4, r0
   8855a:	460d      	mov	r5, r1
   8855c:	f003 fa82 	bl	8ba64 <__aeabi_dcmpeq>
   88560:	2800      	cmp	r0, #0
   88562:	d0d5      	beq.n	88510 <_dtoa_r+0x4f8>
   88564:	4655      	mov	r5, sl
   88566:	9c08      	ldr	r4, [sp, #32]
   88568:	f8dd a018 	ldr.w	sl, [sp, #24]
   8856c:	9b07      	ldr	r3, [sp, #28]
   8856e:	46a9      	mov	r9, r5
   88570:	3301      	adds	r3, #1
   88572:	9307      	str	r3, [sp, #28]
   88574:	e115      	b.n	887a2 <_dtoa_r+0x78a>
   88576:	bf00      	nop
   88578:	0008c178 	.word	0x0008c178
   8857c:	0008c150 	.word	0x0008c150
   88580:	3ff00000 	.word	0x3ff00000
   88584:	401c0000 	.word	0x401c0000
   88588:	3fe00000 	.word	0x3fe00000
   8858c:	40240000 	.word	0x40240000
   88590:	40140000 	.word	0x40140000
   88594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88596:	2a00      	cmp	r2, #0
   88598:	d03d      	beq.n	88616 <_dtoa_r+0x5fe>
   8859a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8859c:	2a01      	cmp	r2, #1
   8859e:	f340 82bc 	ble.w	88b1a <_dtoa_r+0xb02>
   885a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   885a4:	1e5f      	subs	r7, r3, #1
   885a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   885a8:	42bb      	cmp	r3, r7
   885aa:	f2c0 826e 	blt.w	88a8a <_dtoa_r+0xa72>
   885ae:	1bdf      	subs	r7, r3, r7
   885b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   885b2:	2b00      	cmp	r3, #0
   885b4:	f2c0 8354 	blt.w	88c60 <_dtoa_r+0xc48>
   885b8:	9a06      	ldr	r2, [sp, #24]
   885ba:	4611      	mov	r1, r2
   885bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   885be:	4419      	add	r1, r3
   885c0:	4616      	mov	r6, r2
   885c2:	441a      	add	r2, r3
   885c4:	9106      	str	r1, [sp, #24]
   885c6:	920b      	str	r2, [sp, #44]	; 0x2c
   885c8:	2101      	movs	r1, #1
   885ca:	4620      	mov	r0, r4
   885cc:	f001 fe1a 	bl	8a204 <__i2b>
   885d0:	4605      	mov	r5, r0
   885d2:	e023      	b.n	8861c <_dtoa_r+0x604>
   885d4:	2301      	movs	r3, #1
   885d6:	eba8 0505 	sub.w	r5, r8, r5
   885da:	930e      	str	r3, [sp, #56]	; 0x38
   885dc:	1e6b      	subs	r3, r5, #1
   885de:	9306      	str	r3, [sp, #24]
   885e0:	f57f adc5 	bpl.w	8816e <_dtoa_r+0x156>
   885e4:	f1c5 0301 	rsb	r3, r5, #1
   885e8:	930b      	str	r3, [sp, #44]	; 0x2c
   885ea:	2300      	movs	r3, #0
   885ec:	9306      	str	r3, [sp, #24]
   885ee:	e5c0      	b.n	88172 <_dtoa_r+0x15a>
   885f0:	4658      	mov	r0, fp
   885f2:	f002 ff65 	bl	8b4c0 <__aeabi_i2d>
   885f6:	4632      	mov	r2, r6
   885f8:	463b      	mov	r3, r7
   885fa:	f003 fa33 	bl	8ba64 <__aeabi_dcmpeq>
   885fe:	2800      	cmp	r0, #0
   88600:	f47f ad9c 	bne.w	8813c <_dtoa_r+0x124>
   88604:	f10b 3bff 	add.w	fp, fp, #4294967295
   88608:	e598      	b.n	8813c <_dtoa_r+0x124>
   8860a:	4bc7      	ldr	r3, [pc, #796]	; (88928 <_dtoa_r+0x910>)
   8860c:	9303      	str	r3, [sp, #12]
   8860e:	9803      	ldr	r0, [sp, #12]
   88610:	b01b      	add	sp, #108	; 0x6c
   88612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88616:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   88618:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8861c:	2e00      	cmp	r6, #0
   8861e:	dd0c      	ble.n	8863a <_dtoa_r+0x622>
   88620:	9a06      	ldr	r2, [sp, #24]
   88622:	2a00      	cmp	r2, #0
   88624:	dd09      	ble.n	8863a <_dtoa_r+0x622>
   88626:	42b2      	cmp	r2, r6
   88628:	4613      	mov	r3, r2
   8862a:	bfa8      	it	ge
   8862c:	4633      	movge	r3, r6
   8862e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88630:	1af6      	subs	r6, r6, r3
   88632:	1ac9      	subs	r1, r1, r3
   88634:	1ad3      	subs	r3, r2, r3
   88636:	910b      	str	r1, [sp, #44]	; 0x2c
   88638:	9306      	str	r3, [sp, #24]
   8863a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8863c:	b1d3      	cbz	r3, 88674 <_dtoa_r+0x65c>
   8863e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88640:	2b00      	cmp	r3, #0
   88642:	f000 81a3 	beq.w	8898c <_dtoa_r+0x974>
   88646:	2f00      	cmp	r7, #0
   88648:	dd10      	ble.n	8866c <_dtoa_r+0x654>
   8864a:	4629      	mov	r1, r5
   8864c:	463a      	mov	r2, r7
   8864e:	4620      	mov	r0, r4
   88650:	f001 fe9e 	bl	8a390 <__pow5mult>
   88654:	4652      	mov	r2, sl
   88656:	4601      	mov	r1, r0
   88658:	4605      	mov	r5, r0
   8865a:	4620      	mov	r0, r4
   8865c:	f001 fde8 	bl	8a230 <__multiply>
   88660:	4603      	mov	r3, r0
   88662:	4651      	mov	r1, sl
   88664:	4620      	mov	r0, r4
   88666:	469a      	mov	sl, r3
   88668:	f001 fd24 	bl	8a0b4 <_Bfree>
   8866c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8866e:	1bda      	subs	r2, r3, r7
   88670:	f040 818d 	bne.w	8898e <_dtoa_r+0x976>
   88674:	2101      	movs	r1, #1
   88676:	4620      	mov	r0, r4
   88678:	f001 fdc4 	bl	8a204 <__i2b>
   8867c:	f1bb 0f00 	cmp.w	fp, #0
   88680:	4680      	mov	r8, r0
   88682:	f300 80b3 	bgt.w	887ec <_dtoa_r+0x7d4>
   88686:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88688:	2b01      	cmp	r3, #1
   8868a:	f340 818a 	ble.w	889a2 <_dtoa_r+0x98a>
   8868e:	f04f 0900 	mov.w	r9, #0
   88692:	2001      	movs	r0, #1
   88694:	f1bb 0f00 	cmp.w	fp, #0
   88698:	f040 80b4 	bne.w	88804 <_dtoa_r+0x7ec>
   8869c:	9a06      	ldr	r2, [sp, #24]
   8869e:	4410      	add	r0, r2
   886a0:	f010 001f 	ands.w	r0, r0, #31
   886a4:	f000 8092 	beq.w	887cc <_dtoa_r+0x7b4>
   886a8:	f1c0 0320 	rsb	r3, r0, #32
   886ac:	2b04      	cmp	r3, #4
   886ae:	f340 83f9 	ble.w	88ea4 <_dtoa_r+0xe8c>
   886b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   886b4:	f1c0 001c 	rsb	r0, r0, #28
   886b8:	4403      	add	r3, r0
   886ba:	4402      	add	r2, r0
   886bc:	930b      	str	r3, [sp, #44]	; 0x2c
   886be:	4406      	add	r6, r0
   886c0:	9206      	str	r2, [sp, #24]
   886c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   886c4:	2b00      	cmp	r3, #0
   886c6:	dd05      	ble.n	886d4 <_dtoa_r+0x6bc>
   886c8:	4651      	mov	r1, sl
   886ca:	461a      	mov	r2, r3
   886cc:	4620      	mov	r0, r4
   886ce:	f001 feab 	bl	8a428 <__lshift>
   886d2:	4682      	mov	sl, r0
   886d4:	9b06      	ldr	r3, [sp, #24]
   886d6:	2b00      	cmp	r3, #0
   886d8:	dd05      	ble.n	886e6 <_dtoa_r+0x6ce>
   886da:	4641      	mov	r1, r8
   886dc:	461a      	mov	r2, r3
   886de:	4620      	mov	r0, r4
   886e0:	f001 fea2 	bl	8a428 <__lshift>
   886e4:	4680      	mov	r8, r0
   886e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   886e8:	2b00      	cmp	r3, #0
   886ea:	f040 8135 	bne.w	88958 <_dtoa_r+0x940>
   886ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   886f0:	2b00      	cmp	r3, #0
   886f2:	f340 811b 	ble.w	8892c <_dtoa_r+0x914>
   886f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   886f8:	2b00      	cmp	r3, #0
   886fa:	f040 809a 	bne.w	88832 <_dtoa_r+0x81a>
   886fe:	9b07      	ldr	r3, [sp, #28]
   88700:	3301      	adds	r3, #1
   88702:	9307      	str	r3, [sp, #28]
   88704:	2601      	movs	r6, #1
   88706:	9f03      	ldr	r7, [sp, #12]
   88708:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8870c:	e007      	b.n	8871e <_dtoa_r+0x706>
   8870e:	4651      	mov	r1, sl
   88710:	2300      	movs	r3, #0
   88712:	220a      	movs	r2, #10
   88714:	4620      	mov	r0, r4
   88716:	f001 fcd7 	bl	8a0c8 <__multadd>
   8871a:	4682      	mov	sl, r0
   8871c:	3601      	adds	r6, #1
   8871e:	4641      	mov	r1, r8
   88720:	4650      	mov	r0, sl
   88722:	f7ff fbe7 	bl	87ef4 <quorem>
   88726:	454e      	cmp	r6, r9
   88728:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8872c:	f807 3b01 	strb.w	r3, [r7], #1
   88730:	dbed      	blt.n	8870e <_dtoa_r+0x6f6>
   88732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88734:	2600      	movs	r6, #0
   88736:	2a00      	cmp	r2, #0
   88738:	bfcc      	ite	gt
   8873a:	4693      	movgt	fp, r2
   8873c:	f04f 0b01 	movle.w	fp, #1
   88740:	9a03      	ldr	r2, [sp, #12]
   88742:	4493      	add	fp, r2
   88744:	4651      	mov	r1, sl
   88746:	2201      	movs	r2, #1
   88748:	4620      	mov	r0, r4
   8874a:	9304      	str	r3, [sp, #16]
   8874c:	f001 fe6c 	bl	8a428 <__lshift>
   88750:	4641      	mov	r1, r8
   88752:	4682      	mov	sl, r0
   88754:	f001 fedc 	bl	8a510 <__mcmp>
   88758:	2800      	cmp	r0, #0
   8875a:	f340 81a8 	ble.w	88aae <_dtoa_r+0xa96>
   8875e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   88762:	9a03      	ldr	r2, [sp, #12]
   88764:	f10b 3bff 	add.w	fp, fp, #4294967295
   88768:	e004      	b.n	88774 <_dtoa_r+0x75c>
   8876a:	455a      	cmp	r2, fp
   8876c:	f000 81e4 	beq.w	88b38 <_dtoa_r+0xb20>
   88770:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   88774:	2b39      	cmp	r3, #57	; 0x39
   88776:	f10b 0901 	add.w	r9, fp, #1
   8877a:	d0f6      	beq.n	8876a <_dtoa_r+0x752>
   8877c:	3301      	adds	r3, #1
   8877e:	f88b 3000 	strb.w	r3, [fp]
   88782:	4641      	mov	r1, r8
   88784:	4620      	mov	r0, r4
   88786:	f001 fc95 	bl	8a0b4 <_Bfree>
   8878a:	b155      	cbz	r5, 887a2 <_dtoa_r+0x78a>
   8878c:	b12e      	cbz	r6, 8879a <_dtoa_r+0x782>
   8878e:	42ae      	cmp	r6, r5
   88790:	d003      	beq.n	8879a <_dtoa_r+0x782>
   88792:	4631      	mov	r1, r6
   88794:	4620      	mov	r0, r4
   88796:	f001 fc8d 	bl	8a0b4 <_Bfree>
   8879a:	4629      	mov	r1, r5
   8879c:	4620      	mov	r0, r4
   8879e:	f001 fc89 	bl	8a0b4 <_Bfree>
   887a2:	4651      	mov	r1, sl
   887a4:	4620      	mov	r0, r4
   887a6:	f001 fc85 	bl	8a0b4 <_Bfree>
   887aa:	2300      	movs	r3, #0
   887ac:	f889 3000 	strb.w	r3, [r9]
   887b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   887b2:	461a      	mov	r2, r3
   887b4:	9b07      	ldr	r3, [sp, #28]
   887b6:	6013      	str	r3, [r2, #0]
   887b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   887ba:	2b00      	cmp	r3, #0
   887bc:	f43f ac67 	beq.w	8808e <_dtoa_r+0x76>
   887c0:	9803      	ldr	r0, [sp, #12]
   887c2:	f8c3 9000 	str.w	r9, [r3]
   887c6:	b01b      	add	sp, #108	; 0x6c
   887c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   887cc:	201c      	movs	r0, #28
   887ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   887d0:	4406      	add	r6, r0
   887d2:	4403      	add	r3, r0
   887d4:	930b      	str	r3, [sp, #44]	; 0x2c
   887d6:	9b06      	ldr	r3, [sp, #24]
   887d8:	4403      	add	r3, r0
   887da:	9306      	str	r3, [sp, #24]
   887dc:	e771      	b.n	886c2 <_dtoa_r+0x6aa>
   887de:	2501      	movs	r5, #1
   887e0:	e4de      	b.n	881a0 <_dtoa_r+0x188>
   887e2:	f1c0 0020 	rsb	r0, r0, #32
   887e6:	fa06 f000 	lsl.w	r0, r6, r0
   887ea:	e474      	b.n	880d6 <_dtoa_r+0xbe>
   887ec:	4601      	mov	r1, r0
   887ee:	465a      	mov	r2, fp
   887f0:	4620      	mov	r0, r4
   887f2:	f001 fdcd 	bl	8a390 <__pow5mult>
   887f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   887f8:	4680      	mov	r8, r0
   887fa:	2b01      	cmp	r3, #1
   887fc:	f340 81d1 	ble.w	88ba2 <_dtoa_r+0xb8a>
   88800:	f04f 0900 	mov.w	r9, #0
   88804:	f8d8 3010 	ldr.w	r3, [r8, #16]
   88808:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8880c:	6918      	ldr	r0, [r3, #16]
   8880e:	f001 fca9 	bl	8a164 <__hi0bits>
   88812:	f1c0 0020 	rsb	r0, r0, #32
   88816:	e741      	b.n	8869c <_dtoa_r+0x684>
   88818:	4629      	mov	r1, r5
   8881a:	2300      	movs	r3, #0
   8881c:	220a      	movs	r2, #10
   8881e:	4620      	mov	r0, r4
   88820:	f001 fc52 	bl	8a0c8 <__multadd>
   88824:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88826:	4605      	mov	r5, r0
   88828:	2b00      	cmp	r3, #0
   8882a:	f340 8315 	ble.w	88e58 <_dtoa_r+0xe40>
   8882e:	9707      	str	r7, [sp, #28]
   88830:	930a      	str	r3, [sp, #40]	; 0x28
   88832:	2e00      	cmp	r6, #0
   88834:	f300 8122 	bgt.w	88a7c <_dtoa_r+0xa64>
   88838:	f1b9 0f00 	cmp.w	r9, #0
   8883c:	f040 81f9 	bne.w	88c32 <_dtoa_r+0xc1a>
   88840:	462f      	mov	r7, r5
   88842:	9903      	ldr	r1, [sp, #12]
   88844:	9b04      	ldr	r3, [sp, #16]
   88846:	460e      	mov	r6, r1
   88848:	f003 0201 	and.w	r2, r3, #1
   8884c:	1e4b      	subs	r3, r1, #1
   8884e:	9924      	ldr	r1, [sp, #144]	; 0x90
   88850:	920c      	str	r2, [sp, #48]	; 0x30
   88852:	430a      	orrs	r2, r1
   88854:	920b      	str	r2, [sp, #44]	; 0x2c
   88856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88858:	441a      	add	r2, r3
   8885a:	920a      	str	r2, [sp, #40]	; 0x28
   8885c:	4641      	mov	r1, r8
   8885e:	4650      	mov	r0, sl
   88860:	f7ff fb48 	bl	87ef4 <quorem>
   88864:	4629      	mov	r1, r5
   88866:	4683      	mov	fp, r0
   88868:	4650      	mov	r0, sl
   8886a:	f001 fe51 	bl	8a510 <__mcmp>
   8886e:	463a      	mov	r2, r7
   88870:	4641      	mov	r1, r8
   88872:	4681      	mov	r9, r0
   88874:	4620      	mov	r0, r4
   88876:	f001 fe69 	bl	8a54c <__mdiff>
   8887a:	68c2      	ldr	r2, [r0, #12]
   8887c:	4601      	mov	r1, r0
   8887e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   88882:	2a00      	cmp	r2, #0
   88884:	d142      	bne.n	8890c <_dtoa_r+0x8f4>
   88886:	9006      	str	r0, [sp, #24]
   88888:	4650      	mov	r0, sl
   8888a:	9308      	str	r3, [sp, #32]
   8888c:	f001 fe40 	bl	8a510 <__mcmp>
   88890:	9906      	ldr	r1, [sp, #24]
   88892:	9004      	str	r0, [sp, #16]
   88894:	4620      	mov	r0, r4
   88896:	f001 fc0d 	bl	8a0b4 <_Bfree>
   8889a:	9a04      	ldr	r2, [sp, #16]
   8889c:	9b08      	ldr	r3, [sp, #32]
   8889e:	b91a      	cbnz	r2, 888a8 <_dtoa_r+0x890>
   888a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   888a2:	2900      	cmp	r1, #0
   888a4:	f000 82cb 	beq.w	88e3e <_dtoa_r+0xe26>
   888a8:	f1b9 0f00 	cmp.w	r9, #0
   888ac:	f2c0 8185 	blt.w	88bba <_dtoa_r+0xba2>
   888b0:	9924      	ldr	r1, [sp, #144]	; 0x90
   888b2:	ea41 0909 	orr.w	r9, r1, r9
   888b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   888b8:	ea51 0109 	orrs.w	r1, r1, r9
   888bc:	f000 817d 	beq.w	88bba <_dtoa_r+0xba2>
   888c0:	2a00      	cmp	r2, #0
   888c2:	f300 81d1 	bgt.w	88c68 <_dtoa_r+0xc50>
   888c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   888c8:	f106 0901 	add.w	r9, r6, #1
   888cc:	4296      	cmp	r6, r2
   888ce:	46cb      	mov	fp, r9
   888d0:	7033      	strb	r3, [r6, #0]
   888d2:	f000 81e3 	beq.w	88c9c <_dtoa_r+0xc84>
   888d6:	4651      	mov	r1, sl
   888d8:	2300      	movs	r3, #0
   888da:	220a      	movs	r2, #10
   888dc:	4620      	mov	r0, r4
   888de:	f001 fbf3 	bl	8a0c8 <__multadd>
   888e2:	42bd      	cmp	r5, r7
   888e4:	4682      	mov	sl, r0
   888e6:	4629      	mov	r1, r5
   888e8:	f04f 0300 	mov.w	r3, #0
   888ec:	f04f 020a 	mov.w	r2, #10
   888f0:	4620      	mov	r0, r4
   888f2:	d012      	beq.n	8891a <_dtoa_r+0x902>
   888f4:	f001 fbe8 	bl	8a0c8 <__multadd>
   888f8:	4639      	mov	r1, r7
   888fa:	4605      	mov	r5, r0
   888fc:	2300      	movs	r3, #0
   888fe:	220a      	movs	r2, #10
   88900:	4620      	mov	r0, r4
   88902:	f001 fbe1 	bl	8a0c8 <__multadd>
   88906:	464e      	mov	r6, r9
   88908:	4607      	mov	r7, r0
   8890a:	e7a7      	b.n	8885c <_dtoa_r+0x844>
   8890c:	4620      	mov	r0, r4
   8890e:	9304      	str	r3, [sp, #16]
   88910:	f001 fbd0 	bl	8a0b4 <_Bfree>
   88914:	2201      	movs	r2, #1
   88916:	9b04      	ldr	r3, [sp, #16]
   88918:	e7c6      	b.n	888a8 <_dtoa_r+0x890>
   8891a:	f001 fbd5 	bl	8a0c8 <__multadd>
   8891e:	464e      	mov	r6, r9
   88920:	4605      	mov	r5, r0
   88922:	4607      	mov	r7, r0
   88924:	e79a      	b.n	8885c <_dtoa_r+0x844>
   88926:	bf00      	nop
   88928:	0008bfdc 	.word	0x0008bfdc
   8892c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8892e:	2b02      	cmp	r3, #2
   88930:	dc7e      	bgt.n	88a30 <_dtoa_r+0xa18>
   88932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88934:	2b00      	cmp	r3, #0
   88936:	f47f af7c 	bne.w	88832 <_dtoa_r+0x81a>
   8893a:	4641      	mov	r1, r8
   8893c:	4650      	mov	r0, sl
   8893e:	f7ff fad9 	bl	87ef4 <quorem>
   88942:	9a07      	ldr	r2, [sp, #28]
   88944:	f8dd b00c 	ldr.w	fp, [sp, #12]
   88948:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8894c:	3201      	adds	r2, #1
   8894e:	2600      	movs	r6, #0
   88950:	9207      	str	r2, [sp, #28]
   88952:	f80b 3b01 	strb.w	r3, [fp], #1
   88956:	e6f5      	b.n	88744 <_dtoa_r+0x72c>
   88958:	4641      	mov	r1, r8
   8895a:	4650      	mov	r0, sl
   8895c:	f001 fdd8 	bl	8a510 <__mcmp>
   88960:	2800      	cmp	r0, #0
   88962:	f6bf aec4 	bge.w	886ee <_dtoa_r+0x6d6>
   88966:	4651      	mov	r1, sl
   88968:	2300      	movs	r3, #0
   8896a:	220a      	movs	r2, #10
   8896c:	4620      	mov	r0, r4
   8896e:	f001 fbab 	bl	8a0c8 <__multadd>
   88972:	9b07      	ldr	r3, [sp, #28]
   88974:	4682      	mov	sl, r0
   88976:	1e5f      	subs	r7, r3, #1
   88978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8897a:	2b00      	cmp	r3, #0
   8897c:	f47f af4c 	bne.w	88818 <_dtoa_r+0x800>
   88980:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88982:	2b00      	cmp	r3, #0
   88984:	f340 8262 	ble.w	88e4c <_dtoa_r+0xe34>
   88988:	930a      	str	r3, [sp, #40]	; 0x28
   8898a:	e6bb      	b.n	88704 <_dtoa_r+0x6ec>
   8898c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8898e:	4651      	mov	r1, sl
   88990:	4620      	mov	r0, r4
   88992:	f001 fcfd 	bl	8a390 <__pow5mult>
   88996:	4682      	mov	sl, r0
   88998:	e66c      	b.n	88674 <_dtoa_r+0x65c>
   8899a:	4bba      	ldr	r3, [pc, #744]	; (88c84 <_dtoa_r+0xc6c>)
   8899c:	9303      	str	r3, [sp, #12]
   8899e:	3303      	adds	r3, #3
   889a0:	e419      	b.n	881d6 <_dtoa_r+0x1be>
   889a2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   889a6:	2900      	cmp	r1, #0
   889a8:	f47f ae71 	bne.w	8868e <_dtoa_r+0x676>
   889ac:	f3c2 0313 	ubfx	r3, r2, #0, #20
   889b0:	2b00      	cmp	r3, #0
   889b2:	f47f ae6c 	bne.w	8868e <_dtoa_r+0x676>
   889b6:	4bb4      	ldr	r3, [pc, #720]	; (88c88 <_dtoa_r+0xc70>)
   889b8:	4013      	ands	r3, r2
   889ba:	2b00      	cmp	r3, #0
   889bc:	f000 822a 	beq.w	88e14 <_dtoa_r+0xdfc>
   889c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   889c2:	f04f 0901 	mov.w	r9, #1
   889c6:	3301      	adds	r3, #1
   889c8:	930b      	str	r3, [sp, #44]	; 0x2c
   889ca:	9b06      	ldr	r3, [sp, #24]
   889cc:	3301      	adds	r3, #1
   889ce:	9306      	str	r3, [sp, #24]
   889d0:	e65f      	b.n	88692 <_dtoa_r+0x67a>
   889d2:	2301      	movs	r3, #1
   889d4:	930c      	str	r3, [sp, #48]	; 0x30
   889d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   889d8:	9a07      	ldr	r2, [sp, #28]
   889da:	4413      	add	r3, r2
   889dc:	9312      	str	r3, [sp, #72]	; 0x48
   889de:	3301      	adds	r3, #1
   889e0:	2b01      	cmp	r3, #1
   889e2:	461e      	mov	r6, r3
   889e4:	bfb8      	it	lt
   889e6:	2601      	movlt	r6, #1
   889e8:	930a      	str	r3, [sp, #40]	; 0x28
   889ea:	2100      	movs	r1, #0
   889ec:	2e17      	cmp	r6, #23
   889ee:	6461      	str	r1, [r4, #68]	; 0x44
   889f0:	f77f ac43 	ble.w	8827a <_dtoa_r+0x262>
   889f4:	2201      	movs	r2, #1
   889f6:	2304      	movs	r3, #4
   889f8:	005b      	lsls	r3, r3, #1
   889fa:	f103 0014 	add.w	r0, r3, #20
   889fe:	42b0      	cmp	r0, r6
   88a00:	4611      	mov	r1, r2
   88a02:	f102 0201 	add.w	r2, r2, #1
   88a06:	d9f7      	bls.n	889f8 <_dtoa_r+0x9e0>
   88a08:	6461      	str	r1, [r4, #68]	; 0x44
   88a0a:	e436      	b.n	8827a <_dtoa_r+0x262>
   88a0c:	2301      	movs	r3, #1
   88a0e:	930c      	str	r3, [sp, #48]	; 0x30
   88a10:	9b25      	ldr	r3, [sp, #148]	; 0x94
   88a12:	2b00      	cmp	r3, #0
   88a14:	dd46      	ble.n	88aa4 <_dtoa_r+0xa8c>
   88a16:	461e      	mov	r6, r3
   88a18:	9312      	str	r3, [sp, #72]	; 0x48
   88a1a:	930a      	str	r3, [sp, #40]	; 0x28
   88a1c:	e7e5      	b.n	889ea <_dtoa_r+0x9d2>
   88a1e:	2300      	movs	r3, #0
   88a20:	930c      	str	r3, [sp, #48]	; 0x30
   88a22:	e7d8      	b.n	889d6 <_dtoa_r+0x9be>
   88a24:	2300      	movs	r3, #0
   88a26:	930c      	str	r3, [sp, #48]	; 0x30
   88a28:	e7f2      	b.n	88a10 <_dtoa_r+0x9f8>
   88a2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a2c:	9707      	str	r7, [sp, #28]
   88a2e:	930a      	str	r3, [sp, #40]	; 0x28
   88a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88a32:	2b00      	cmp	r3, #0
   88a34:	f47f ad40 	bne.w	884b8 <_dtoa_r+0x4a0>
   88a38:	4641      	mov	r1, r8
   88a3a:	2205      	movs	r2, #5
   88a3c:	4620      	mov	r0, r4
   88a3e:	f001 fb43 	bl	8a0c8 <__multadd>
   88a42:	4680      	mov	r8, r0
   88a44:	4650      	mov	r0, sl
   88a46:	4641      	mov	r1, r8
   88a48:	f001 fd62 	bl	8a510 <__mcmp>
   88a4c:	2800      	cmp	r0, #0
   88a4e:	f77f ad33 	ble.w	884b8 <_dtoa_r+0x4a0>
   88a52:	9f03      	ldr	r7, [sp, #12]
   88a54:	2231      	movs	r2, #49	; 0x31
   88a56:	463b      	mov	r3, r7
   88a58:	9e07      	ldr	r6, [sp, #28]
   88a5a:	f803 2b01 	strb.w	r2, [r3], #1
   88a5e:	3601      	adds	r6, #1
   88a60:	9303      	str	r3, [sp, #12]
   88a62:	4641      	mov	r1, r8
   88a64:	4620      	mov	r0, r4
   88a66:	f001 fb25 	bl	8a0b4 <_Bfree>
   88a6a:	1c73      	adds	r3, r6, #1
   88a6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   88a70:	9307      	str	r3, [sp, #28]
   88a72:	9703      	str	r7, [sp, #12]
   88a74:	2d00      	cmp	r5, #0
   88a76:	f47f ae90 	bne.w	8879a <_dtoa_r+0x782>
   88a7a:	e692      	b.n	887a2 <_dtoa_r+0x78a>
   88a7c:	4629      	mov	r1, r5
   88a7e:	4632      	mov	r2, r6
   88a80:	4620      	mov	r0, r4
   88a82:	f001 fcd1 	bl	8a428 <__lshift>
   88a86:	4605      	mov	r5, r0
   88a88:	e6d6      	b.n	88838 <_dtoa_r+0x820>
   88a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88a8c:	970d      	str	r7, [sp, #52]	; 0x34
   88a8e:	1afb      	subs	r3, r7, r3
   88a90:	449b      	add	fp, r3
   88a92:	2700      	movs	r7, #0
   88a94:	e58c      	b.n	885b0 <_dtoa_r+0x598>
   88a96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88a9a:	f04f 0902 	mov.w	r9, #2
   88a9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   88aa2:	e417      	b.n	882d4 <_dtoa_r+0x2bc>
   88aa4:	2301      	movs	r3, #1
   88aa6:	9325      	str	r3, [sp, #148]	; 0x94
   88aa8:	930a      	str	r3, [sp, #40]	; 0x28
   88aaa:	f7ff bbe2 	b.w	88272 <_dtoa_r+0x25a>
   88aae:	d103      	bne.n	88ab8 <_dtoa_r+0xaa0>
   88ab0:	9b04      	ldr	r3, [sp, #16]
   88ab2:	07db      	lsls	r3, r3, #31
   88ab4:	f53f ae53 	bmi.w	8875e <_dtoa_r+0x746>
   88ab8:	46d9      	mov	r9, fp
   88aba:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   88abe:	2b30      	cmp	r3, #48	; 0x30
   88ac0:	d0fa      	beq.n	88ab8 <_dtoa_r+0xaa0>
   88ac2:	e65e      	b.n	88782 <_dtoa_r+0x76a>
   88ac4:	4648      	mov	r0, r9
   88ac6:	f002 fcfb 	bl	8b4c0 <__aeabi_i2d>
   88aca:	4632      	mov	r2, r6
   88acc:	463b      	mov	r3, r7
   88ace:	f002 fd61 	bl	8b594 <__aeabi_dmul>
   88ad2:	2200      	movs	r2, #0
   88ad4:	4b6d      	ldr	r3, [pc, #436]	; (88c8c <_dtoa_r+0xc74>)
   88ad6:	f002 fba7 	bl	8b228 <__adddf3>
   88ada:	4680      	mov	r8, r0
   88adc:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   88ae0:	4630      	mov	r0, r6
   88ae2:	4639      	mov	r1, r7
   88ae4:	2200      	movs	r2, #0
   88ae6:	4b6a      	ldr	r3, [pc, #424]	; (88c90 <_dtoa_r+0xc78>)
   88ae8:	f002 fb9c 	bl	8b224 <__aeabi_dsub>
   88aec:	4642      	mov	r2, r8
   88aee:	464b      	mov	r3, r9
   88af0:	4606      	mov	r6, r0
   88af2:	460f      	mov	r7, r1
   88af4:	f002 ffde 	bl	8bab4 <__aeabi_dcmpgt>
   88af8:	2800      	cmp	r0, #0
   88afa:	f040 8187 	bne.w	88e0c <_dtoa_r+0xdf4>
   88afe:	4642      	mov	r2, r8
   88b00:	4630      	mov	r0, r6
   88b02:	4639      	mov	r1, r7
   88b04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   88b08:	f002 ffb6 	bl	8ba78 <__aeabi_dcmplt>
   88b0c:	2800      	cmp	r0, #0
   88b0e:	f43f acaa 	beq.w	88466 <_dtoa_r+0x44e>
   88b12:	f04f 0800 	mov.w	r8, #0
   88b16:	4645      	mov	r5, r8
   88b18:	e4ce      	b.n	884b8 <_dtoa_r+0x4a0>
   88b1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88b1c:	2a00      	cmp	r2, #0
   88b1e:	f000 80c3 	beq.w	88ca8 <_dtoa_r+0xc90>
   88b22:	9a06      	ldr	r2, [sp, #24]
   88b24:	f203 4333 	addw	r3, r3, #1075	; 0x433
   88b28:	441a      	add	r2, r3
   88b2a:	9206      	str	r2, [sp, #24]
   88b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   88b2e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   88b30:	4616      	mov	r6, r2
   88b32:	441a      	add	r2, r3
   88b34:	920b      	str	r2, [sp, #44]	; 0x2c
   88b36:	e547      	b.n	885c8 <_dtoa_r+0x5b0>
   88b38:	2331      	movs	r3, #49	; 0x31
   88b3a:	9a07      	ldr	r2, [sp, #28]
   88b3c:	3201      	adds	r2, #1
   88b3e:	9207      	str	r2, [sp, #28]
   88b40:	9a03      	ldr	r2, [sp, #12]
   88b42:	7013      	strb	r3, [r2, #0]
   88b44:	e61d      	b.n	88782 <_dtoa_r+0x76a>
   88b46:	f000 814b 	beq.w	88de0 <_dtoa_r+0xdc8>
   88b4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   88b4e:	9b07      	ldr	r3, [sp, #28]
   88b50:	425d      	negs	r5, r3
   88b52:	4b50      	ldr	r3, [pc, #320]	; (88c94 <_dtoa_r+0xc7c>)
   88b54:	f005 020f 	and.w	r2, r5, #15
   88b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88b60:	f002 fd18 	bl	8b594 <__aeabi_dmul>
   88b64:	112d      	asrs	r5, r5, #4
   88b66:	4606      	mov	r6, r0
   88b68:	460f      	mov	r7, r1
   88b6a:	f000 817d 	beq.w	88e68 <_dtoa_r+0xe50>
   88b6e:	2300      	movs	r3, #0
   88b70:	f04f 0902 	mov.w	r9, #2
   88b74:	f8df 8120 	ldr.w	r8, [pc, #288]	; 88c98 <_dtoa_r+0xc80>
   88b78:	07ea      	lsls	r2, r5, #31
   88b7a:	d505      	bpl.n	88b88 <_dtoa_r+0xb70>
   88b7c:	e9d8 2300 	ldrd	r2, r3, [r8]
   88b80:	f002 fd08 	bl	8b594 <__aeabi_dmul>
   88b84:	2301      	movs	r3, #1
   88b86:	4499      	add	r9, r3
   88b88:	106d      	asrs	r5, r5, #1
   88b8a:	f108 0808 	add.w	r8, r8, #8
   88b8e:	d1f3      	bne.n	88b78 <_dtoa_r+0xb60>
   88b90:	2b00      	cmp	r3, #0
   88b92:	f43f abba 	beq.w	8830a <_dtoa_r+0x2f2>
   88b96:	4606      	mov	r6, r0
   88b98:	460f      	mov	r7, r1
   88b9a:	f7ff bbb6 	b.w	8830a <_dtoa_r+0x2f2>
   88b9e:	900e      	str	r0, [sp, #56]	; 0x38
   88ba0:	e520      	b.n	885e4 <_dtoa_r+0x5cc>
   88ba2:	9b04      	ldr	r3, [sp, #16]
   88ba4:	2b00      	cmp	r3, #0
   88ba6:	f47f ae2b 	bne.w	88800 <_dtoa_r+0x7e8>
   88baa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88bae:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88bb2:	2b00      	cmp	r3, #0
   88bb4:	f43f aeff 	beq.w	889b6 <_dtoa_r+0x99e>
   88bb8:	e622      	b.n	88800 <_dtoa_r+0x7e8>
   88bba:	2a00      	cmp	r2, #0
   88bbc:	dd12      	ble.n	88be4 <_dtoa_r+0xbcc>
   88bbe:	4651      	mov	r1, sl
   88bc0:	2201      	movs	r2, #1
   88bc2:	4620      	mov	r0, r4
   88bc4:	9304      	str	r3, [sp, #16]
   88bc6:	f001 fc2f 	bl	8a428 <__lshift>
   88bca:	4641      	mov	r1, r8
   88bcc:	4682      	mov	sl, r0
   88bce:	f001 fc9f 	bl	8a510 <__mcmp>
   88bd2:	2800      	cmp	r0, #0
   88bd4:	9b04      	ldr	r3, [sp, #16]
   88bd6:	f340 812c 	ble.w	88e32 <_dtoa_r+0xe1a>
   88bda:	2b39      	cmp	r3, #57	; 0x39
   88bdc:	f000 810c 	beq.w	88df8 <_dtoa_r+0xde0>
   88be0:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   88be4:	46b1      	mov	r9, r6
   88be6:	f809 3b01 	strb.w	r3, [r9], #1
   88bea:	9b07      	ldr	r3, [sp, #28]
   88bec:	462e      	mov	r6, r5
   88bee:	3301      	adds	r3, #1
   88bf0:	463d      	mov	r5, r7
   88bf2:	9307      	str	r3, [sp, #28]
   88bf4:	e5c5      	b.n	88782 <_dtoa_r+0x76a>
   88bf6:	4655      	mov	r5, sl
   88bf8:	9c08      	ldr	r4, [sp, #32]
   88bfa:	f8dd a018 	ldr.w	sl, [sp, #24]
   88bfe:	4602      	mov	r2, r0
   88c00:	460b      	mov	r3, r1
   88c02:	f002 fb11 	bl	8b228 <__adddf3>
   88c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88c0a:	4606      	mov	r6, r0
   88c0c:	460f      	mov	r7, r1
   88c0e:	f002 ff51 	bl	8bab4 <__aeabi_dcmpgt>
   88c12:	b960      	cbnz	r0, 88c2e <_dtoa_r+0xc16>
   88c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88c18:	4630      	mov	r0, r6
   88c1a:	4639      	mov	r1, r7
   88c1c:	f002 ff22 	bl	8ba64 <__aeabi_dcmpeq>
   88c20:	2800      	cmp	r0, #0
   88c22:	f43f aca3 	beq.w	8856c <_dtoa_r+0x554>
   88c26:	f018 0f01 	tst.w	r8, #1
   88c2a:	f43f ac9f 	beq.w	8856c <_dtoa_r+0x554>
   88c2e:	9a03      	ldr	r2, [sp, #12]
   88c30:	e40a      	b.n	88448 <_dtoa_r+0x430>
   88c32:	4620      	mov	r0, r4
   88c34:	6869      	ldr	r1, [r5, #4]
   88c36:	f001 fa17 	bl	8a068 <_Balloc>
   88c3a:	4606      	mov	r6, r0
   88c3c:	2800      	cmp	r0, #0
   88c3e:	f000 8117 	beq.w	88e70 <_dtoa_r+0xe58>
   88c42:	692b      	ldr	r3, [r5, #16]
   88c44:	f105 010c 	add.w	r1, r5, #12
   88c48:	3302      	adds	r3, #2
   88c4a:	009a      	lsls	r2, r3, #2
   88c4c:	300c      	adds	r0, #12
   88c4e:	f7fc f9f9 	bl	85044 <memcpy>
   88c52:	4631      	mov	r1, r6
   88c54:	2201      	movs	r2, #1
   88c56:	4620      	mov	r0, r4
   88c58:	f001 fbe6 	bl	8a428 <__lshift>
   88c5c:	4607      	mov	r7, r0
   88c5e:	e5f0      	b.n	88842 <_dtoa_r+0x82a>
   88c60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   88c64:	1a9e      	subs	r6, r3, r2
   88c66:	e4af      	b.n	885c8 <_dtoa_r+0x5b0>
   88c68:	2b39      	cmp	r3, #57	; 0x39
   88c6a:	f000 80c5 	beq.w	88df8 <_dtoa_r+0xde0>
   88c6e:	46b1      	mov	r9, r6
   88c70:	3301      	adds	r3, #1
   88c72:	f809 3b01 	strb.w	r3, [r9], #1
   88c76:	9b07      	ldr	r3, [sp, #28]
   88c78:	462e      	mov	r6, r5
   88c7a:	3301      	adds	r3, #1
   88c7c:	463d      	mov	r5, r7
   88c7e:	9307      	str	r3, [sp, #28]
   88c80:	e57f      	b.n	88782 <_dtoa_r+0x76a>
   88c82:	bf00      	nop
   88c84:	0008c020 	.word	0x0008c020
   88c88:	7ff00000 	.word	0x7ff00000
   88c8c:	401c0000 	.word	0x401c0000
   88c90:	40140000 	.word	0x40140000
   88c94:	0008c178 	.word	0x0008c178
   88c98:	0008c150 	.word	0x0008c150
   88c9c:	9a07      	ldr	r2, [sp, #28]
   88c9e:	462e      	mov	r6, r5
   88ca0:	3201      	adds	r2, #1
   88ca2:	463d      	mov	r5, r7
   88ca4:	9207      	str	r2, [sp, #28]
   88ca6:	e54d      	b.n	88744 <_dtoa_r+0x72c>
   88ca8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   88caa:	9a06      	ldr	r2, [sp, #24]
   88cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   88cb2:	441a      	add	r2, r3
   88cb4:	9206      	str	r2, [sp, #24]
   88cb6:	460a      	mov	r2, r1
   88cb8:	441a      	add	r2, r3
   88cba:	460e      	mov	r6, r1
   88cbc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   88cbe:	920b      	str	r2, [sp, #44]	; 0x2c
   88cc0:	e482      	b.n	885c8 <_dtoa_r+0x5b0>
   88cc2:	9810      	ldr	r0, [sp, #64]	; 0x40
   88cc4:	497f      	ldr	r1, [pc, #508]	; (88ec4 <_dtoa_r+0xeac>)
   88cc6:	4642      	mov	r2, r8
   88cc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   88ccc:	464b      	mov	r3, r9
   88cce:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   88cd2:	f002 fc5f 	bl	8b594 <__aeabi_dmul>
   88cd6:	4602      	mov	r2, r0
   88cd8:	460b      	mov	r3, r1
   88cda:	4630      	mov	r0, r6
   88cdc:	4639      	mov	r1, r7
   88cde:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   88ce2:	f002 ff07 	bl	8baf4 <__aeabi_d2iz>
   88ce6:	4680      	mov	r8, r0
   88ce8:	f002 fbea 	bl	8b4c0 <__aeabi_i2d>
   88cec:	460b      	mov	r3, r1
   88cee:	4602      	mov	r2, r0
   88cf0:	4639      	mov	r1, r7
   88cf2:	4630      	mov	r0, r6
   88cf4:	f002 fa96 	bl	8b224 <__aeabi_dsub>
   88cf8:	4606      	mov	r6, r0
   88cfa:	9810      	ldr	r0, [sp, #64]	; 0x40
   88cfc:	9d03      	ldr	r5, [sp, #12]
   88cfe:	f108 0330 	add.w	r3, r8, #48	; 0x30
   88d02:	2801      	cmp	r0, #1
   88d04:	460f      	mov	r7, r1
   88d06:	f805 3b01 	strb.w	r3, [r5], #1
   88d0a:	d01e      	beq.n	88d4a <_dtoa_r+0xd32>
   88d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88d0e:	9a03      	ldr	r2, [sp, #12]
   88d10:	4413      	add	r3, r2
   88d12:	4698      	mov	r8, r3
   88d14:	2200      	movs	r2, #0
   88d16:	4b6c      	ldr	r3, [pc, #432]	; (88ec8 <_dtoa_r+0xeb0>)
   88d18:	4630      	mov	r0, r6
   88d1a:	4639      	mov	r1, r7
   88d1c:	f002 fc3a 	bl	8b594 <__aeabi_dmul>
   88d20:	460f      	mov	r7, r1
   88d22:	4606      	mov	r6, r0
   88d24:	f002 fee6 	bl	8baf4 <__aeabi_d2iz>
   88d28:	4681      	mov	r9, r0
   88d2a:	f002 fbc9 	bl	8b4c0 <__aeabi_i2d>
   88d2e:	4602      	mov	r2, r0
   88d30:	460b      	mov	r3, r1
   88d32:	4630      	mov	r0, r6
   88d34:	4639      	mov	r1, r7
   88d36:	f002 fa75 	bl	8b224 <__aeabi_dsub>
   88d3a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   88d3e:	f805 9b01 	strb.w	r9, [r5], #1
   88d42:	4545      	cmp	r5, r8
   88d44:	4606      	mov	r6, r0
   88d46:	460f      	mov	r7, r1
   88d48:	d1e4      	bne.n	88d14 <_dtoa_r+0xcfc>
   88d4a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   88d4e:	2200      	movs	r2, #0
   88d50:	4b5e      	ldr	r3, [pc, #376]	; (88ecc <_dtoa_r+0xeb4>)
   88d52:	4640      	mov	r0, r8
   88d54:	4649      	mov	r1, r9
   88d56:	f002 fa67 	bl	8b228 <__adddf3>
   88d5a:	4632      	mov	r2, r6
   88d5c:	463b      	mov	r3, r7
   88d5e:	f002 fe8b 	bl	8ba78 <__aeabi_dcmplt>
   88d62:	2800      	cmp	r0, #0
   88d64:	d158      	bne.n	88e18 <_dtoa_r+0xe00>
   88d66:	4642      	mov	r2, r8
   88d68:	464b      	mov	r3, r9
   88d6a:	2000      	movs	r0, #0
   88d6c:	4957      	ldr	r1, [pc, #348]	; (88ecc <_dtoa_r+0xeb4>)
   88d6e:	f002 fa59 	bl	8b224 <__aeabi_dsub>
   88d72:	4632      	mov	r2, r6
   88d74:	463b      	mov	r3, r7
   88d76:	f002 fe9d 	bl	8bab4 <__aeabi_dcmpgt>
   88d7a:	2800      	cmp	r0, #0
   88d7c:	f43f ab73 	beq.w	88466 <_dtoa_r+0x44e>
   88d80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   88d84:	46a9      	mov	r9, r5
   88d86:	2b30      	cmp	r3, #48	; 0x30
   88d88:	f105 35ff 	add.w	r5, r5, #4294967295
   88d8c:	d0f8      	beq.n	88d80 <_dtoa_r+0xd68>
   88d8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88d90:	3301      	adds	r3, #1
   88d92:	9307      	str	r3, [sp, #28]
   88d94:	e505      	b.n	887a2 <_dtoa_r+0x78a>
   88d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88d98:	2b00      	cmp	r3, #0
   88d9a:	f43f ae93 	beq.w	88ac4 <_dtoa_r+0xaac>
   88d9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   88da0:	2d00      	cmp	r5, #0
   88da2:	f77f ab60 	ble.w	88466 <_dtoa_r+0x44e>
   88da6:	2200      	movs	r2, #0
   88da8:	4b47      	ldr	r3, [pc, #284]	; (88ec8 <_dtoa_r+0xeb0>)
   88daa:	4630      	mov	r0, r6
   88dac:	4639      	mov	r1, r7
   88dae:	f002 fbf1 	bl	8b594 <__aeabi_dmul>
   88db2:	4606      	mov	r6, r0
   88db4:	460f      	mov	r7, r1
   88db6:	f109 0001 	add.w	r0, r9, #1
   88dba:	f002 fb81 	bl	8b4c0 <__aeabi_i2d>
   88dbe:	4632      	mov	r2, r6
   88dc0:	463b      	mov	r3, r7
   88dc2:	f002 fbe7 	bl	8b594 <__aeabi_dmul>
   88dc6:	2200      	movs	r2, #0
   88dc8:	4b41      	ldr	r3, [pc, #260]	; (88ed0 <_dtoa_r+0xeb8>)
   88dca:	f002 fa2d 	bl	8b228 <__adddf3>
   88dce:	9a07      	ldr	r2, [sp, #28]
   88dd0:	4680      	mov	r8, r0
   88dd2:	3a01      	subs	r2, #1
   88dd4:	9213      	str	r2, [sp, #76]	; 0x4c
   88dd6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   88dda:	9510      	str	r5, [sp, #64]	; 0x40
   88ddc:	f7ff bab6 	b.w	8834c <_dtoa_r+0x334>
   88de0:	f04f 0902 	mov.w	r9, #2
   88de4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   88de8:	f7ff ba8f 	b.w	8830a <_dtoa_r+0x2f2>
   88dec:	9b07      	ldr	r3, [sp, #28]
   88dee:	3301      	adds	r3, #1
   88df0:	9307      	str	r3, [sp, #28]
   88df2:	2331      	movs	r3, #49	; 0x31
   88df4:	f7ff bb2f 	b.w	88456 <_dtoa_r+0x43e>
   88df8:	46b3      	mov	fp, r6
   88dfa:	2339      	movs	r3, #57	; 0x39
   88dfc:	9a07      	ldr	r2, [sp, #28]
   88dfe:	462e      	mov	r6, r5
   88e00:	3201      	adds	r2, #1
   88e02:	463d      	mov	r5, r7
   88e04:	9207      	str	r2, [sp, #28]
   88e06:	f80b 3b01 	strb.w	r3, [fp], #1
   88e0a:	e4aa      	b.n	88762 <_dtoa_r+0x74a>
   88e0c:	f04f 0800 	mov.w	r8, #0
   88e10:	4645      	mov	r5, r8
   88e12:	e61e      	b.n	88a52 <_dtoa_r+0xa3a>
   88e14:	4699      	mov	r9, r3
   88e16:	e43c      	b.n	88692 <_dtoa_r+0x67a>
   88e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88e1a:	9a03      	ldr	r2, [sp, #12]
   88e1c:	9307      	str	r3, [sp, #28]
   88e1e:	f7ff bb13 	b.w	88448 <_dtoa_r+0x430>
   88e22:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   88e26:	9c10      	ldr	r4, [sp, #64]	; 0x40
   88e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88e2a:	46a9      	mov	r9, r5
   88e2c:	3301      	adds	r3, #1
   88e2e:	9307      	str	r3, [sp, #28]
   88e30:	e4b7      	b.n	887a2 <_dtoa_r+0x78a>
   88e32:	f47f aed7 	bne.w	88be4 <_dtoa_r+0xbcc>
   88e36:	07da      	lsls	r2, r3, #31
   88e38:	f57f aed4 	bpl.w	88be4 <_dtoa_r+0xbcc>
   88e3c:	e6cd      	b.n	88bda <_dtoa_r+0xbc2>
   88e3e:	2b39      	cmp	r3, #57	; 0x39
   88e40:	d0da      	beq.n	88df8 <_dtoa_r+0xde0>
   88e42:	f1b9 0f00 	cmp.w	r9, #0
   88e46:	f73f aecb 	bgt.w	88be0 <_dtoa_r+0xbc8>
   88e4a:	e6cb      	b.n	88be4 <_dtoa_r+0xbcc>
   88e4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88e4e:	2b02      	cmp	r3, #2
   88e50:	f73f adeb 	bgt.w	88a2a <_dtoa_r+0xa12>
   88e54:	9707      	str	r7, [sp, #28]
   88e56:	e570      	b.n	8893a <_dtoa_r+0x922>
   88e58:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88e5a:	2b02      	cmp	r3, #2
   88e5c:	f73f ade5 	bgt.w	88a2a <_dtoa_r+0xa12>
   88e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88e62:	9707      	str	r7, [sp, #28]
   88e64:	930a      	str	r3, [sp, #40]	; 0x28
   88e66:	e4e4      	b.n	88832 <_dtoa_r+0x81a>
   88e68:	f04f 0902 	mov.w	r9, #2
   88e6c:	f7ff ba4d 	b.w	8830a <_dtoa_r+0x2f2>
   88e70:	4602      	mov	r2, r0
   88e72:	f240 21ea 	movw	r1, #746	; 0x2ea
   88e76:	4b17      	ldr	r3, [pc, #92]	; (88ed4 <_dtoa_r+0xebc>)
   88e78:	4817      	ldr	r0, [pc, #92]	; (88ed8 <_dtoa_r+0xec0>)
   88e7a:	f002 f84d 	bl	8af18 <__assert_func>
   88e7e:	4b17      	ldr	r3, [pc, #92]	; (88edc <_dtoa_r+0xec4>)
   88e80:	9303      	str	r3, [sp, #12]
   88e82:	f7ff b904 	b.w	8808e <_dtoa_r+0x76>
   88e86:	2500      	movs	r5, #0
   88e88:	4620      	mov	r0, r4
   88e8a:	4629      	mov	r1, r5
   88e8c:	6465      	str	r5, [r4, #68]	; 0x44
   88e8e:	f001 f8eb 	bl	8a068 <_Balloc>
   88e92:	9003      	str	r0, [sp, #12]
   88e94:	b958      	cbnz	r0, 88eae <_dtoa_r+0xe96>
   88e96:	2200      	movs	r2, #0
   88e98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   88e9c:	4b0d      	ldr	r3, [pc, #52]	; (88ed4 <_dtoa_r+0xebc>)
   88e9e:	480e      	ldr	r0, [pc, #56]	; (88ed8 <_dtoa_r+0xec0>)
   88ea0:	f002 f83a 	bl	8af18 <__assert_func>
   88ea4:	f43f ac0d 	beq.w	886c2 <_dtoa_r+0x6aa>
   88ea8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   88eac:	e48f      	b.n	887ce <_dtoa_r+0x7b6>
   88eae:	f04f 33ff 	mov.w	r3, #4294967295
   88eb2:	9312      	str	r3, [sp, #72]	; 0x48
   88eb4:	930a      	str	r3, [sp, #40]	; 0x28
   88eb6:	2301      	movs	r3, #1
   88eb8:	9a03      	ldr	r2, [sp, #12]
   88eba:	9525      	str	r5, [sp, #148]	; 0x94
   88ebc:	6422      	str	r2, [r4, #64]	; 0x40
   88ebe:	930c      	str	r3, [sp, #48]	; 0x30
   88ec0:	f7ff bad1 	b.w	88466 <_dtoa_r+0x44e>
   88ec4:	0008c178 	.word	0x0008c178
   88ec8:	40240000 	.word	0x40240000
   88ecc:	3fe00000 	.word	0x3fe00000
   88ed0:	401c0000 	.word	0x401c0000
   88ed4:	0008c030 	.word	0x0008c030
   88ed8:	0008c044 	.word	0x0008c044
   88edc:	0008c024 	.word	0x0008c024

00088ee0 <__sflush_r>:
   88ee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   88ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88ee8:	460d      	mov	r5, r1
   88eea:	0711      	lsls	r1, r2, #28
   88eec:	4680      	mov	r8, r0
   88eee:	d447      	bmi.n	88f80 <__sflush_r+0xa0>
   88ef0:	686b      	ldr	r3, [r5, #4]
   88ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   88ef6:	2b00      	cmp	r3, #0
   88ef8:	81aa      	strh	r2, [r5, #12]
   88efa:	dd5e      	ble.n	88fba <__sflush_r+0xda>
   88efc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   88efe:	2c00      	cmp	r4, #0
   88f00:	d058      	beq.n	88fb4 <__sflush_r+0xd4>
   88f02:	2300      	movs	r3, #0
   88f04:	f8d8 6000 	ldr.w	r6, [r8]
   88f08:	f8c8 3000 	str.w	r3, [r8]
   88f0c:	b293      	uxth	r3, r2
   88f0e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   88f12:	d156      	bne.n	88fc2 <__sflush_r+0xe2>
   88f14:	2301      	movs	r3, #1
   88f16:	4640      	mov	r0, r8
   88f18:	69e9      	ldr	r1, [r5, #28]
   88f1a:	47a0      	blx	r4
   88f1c:	1c43      	adds	r3, r0, #1
   88f1e:	d067      	beq.n	88ff0 <__sflush_r+0x110>
   88f20:	89ab      	ldrh	r3, [r5, #12]
   88f22:	6aac      	ldr	r4, [r5, #40]	; 0x28
   88f24:	075f      	lsls	r7, r3, #29
   88f26:	d505      	bpl.n	88f34 <__sflush_r+0x54>
   88f28:	686a      	ldr	r2, [r5, #4]
   88f2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   88f2c:	1a80      	subs	r0, r0, r2
   88f2e:	b10b      	cbz	r3, 88f34 <__sflush_r+0x54>
   88f30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   88f32:	1ac0      	subs	r0, r0, r3
   88f34:	4602      	mov	r2, r0
   88f36:	69e9      	ldr	r1, [r5, #28]
   88f38:	2300      	movs	r3, #0
   88f3a:	4640      	mov	r0, r8
   88f3c:	47a0      	blx	r4
   88f3e:	1c41      	adds	r1, r0, #1
   88f40:	d141      	bne.n	88fc6 <__sflush_r+0xe6>
   88f42:	f8d8 3000 	ldr.w	r3, [r8]
   88f46:	2b00      	cmp	r3, #0
   88f48:	d03d      	beq.n	88fc6 <__sflush_r+0xe6>
   88f4a:	2b1d      	cmp	r3, #29
   88f4c:	d001      	beq.n	88f52 <__sflush_r+0x72>
   88f4e:	2b16      	cmp	r3, #22
   88f50:	d156      	bne.n	89000 <__sflush_r+0x120>
   88f52:	2100      	movs	r1, #0
   88f54:	692a      	ldr	r2, [r5, #16]
   88f56:	89ab      	ldrh	r3, [r5, #12]
   88f58:	e9c5 2100 	strd	r2, r1, [r5]
   88f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   88f60:	81ab      	strh	r3, [r5, #12]
   88f62:	6b29      	ldr	r1, [r5, #48]	; 0x30
   88f64:	f8c8 6000 	str.w	r6, [r8]
   88f68:	b321      	cbz	r1, 88fb4 <__sflush_r+0xd4>
   88f6a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   88f6e:	4299      	cmp	r1, r3
   88f70:	d002      	beq.n	88f78 <__sflush_r+0x98>
   88f72:	4640      	mov	r0, r8
   88f74:	f000 f9cc 	bl	89310 <_free_r>
   88f78:	2000      	movs	r0, #0
   88f7a:	6328      	str	r0, [r5, #48]	; 0x30
   88f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88f80:	692f      	ldr	r7, [r5, #16]
   88f82:	b1bf      	cbz	r7, 88fb4 <__sflush_r+0xd4>
   88f84:	b293      	uxth	r3, r2
   88f86:	079a      	lsls	r2, r3, #30
   88f88:	bf18      	it	ne
   88f8a:	2300      	movne	r3, #0
   88f8c:	682e      	ldr	r6, [r5, #0]
   88f8e:	bf08      	it	eq
   88f90:	696b      	ldreq	r3, [r5, #20]
   88f92:	602f      	str	r7, [r5, #0]
   88f94:	1bf6      	subs	r6, r6, r7
   88f96:	60ab      	str	r3, [r5, #8]
   88f98:	e00a      	b.n	88fb0 <__sflush_r+0xd0>
   88f9a:	4633      	mov	r3, r6
   88f9c:	463a      	mov	r2, r7
   88f9e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   88fa0:	4640      	mov	r0, r8
   88fa2:	69e9      	ldr	r1, [r5, #28]
   88fa4:	47a0      	blx	r4
   88fa6:	1e04      	subs	r4, r0, #0
   88fa8:	eba6 0604 	sub.w	r6, r6, r4
   88fac:	4427      	add	r7, r4
   88fae:	dd17      	ble.n	88fe0 <__sflush_r+0x100>
   88fb0:	2e00      	cmp	r6, #0
   88fb2:	dcf2      	bgt.n	88f9a <__sflush_r+0xba>
   88fb4:	2000      	movs	r0, #0
   88fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88fba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   88fbc:	2b00      	cmp	r3, #0
   88fbe:	dc9d      	bgt.n	88efc <__sflush_r+0x1c>
   88fc0:	e7f8      	b.n	88fb4 <__sflush_r+0xd4>
   88fc2:	6d28      	ldr	r0, [r5, #80]	; 0x50
   88fc4:	e7ae      	b.n	88f24 <__sflush_r+0x44>
   88fc6:	2100      	movs	r1, #0
   88fc8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   88fcc:	692a      	ldr	r2, [r5, #16]
   88fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   88fd2:	81ab      	strh	r3, [r5, #12]
   88fd4:	04db      	lsls	r3, r3, #19
   88fd6:	e9c5 2100 	strd	r2, r1, [r5]
   88fda:	d5c2      	bpl.n	88f62 <__sflush_r+0x82>
   88fdc:	6528      	str	r0, [r5, #80]	; 0x50
   88fde:	e7c0      	b.n	88f62 <__sflush_r+0x82>
   88fe0:	89ab      	ldrh	r3, [r5, #12]
   88fe2:	f04f 30ff 	mov.w	r0, #4294967295
   88fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88fea:	81ab      	strh	r3, [r5, #12]
   88fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88ff0:	f8d8 3000 	ldr.w	r3, [r8]
   88ff4:	2b00      	cmp	r3, #0
   88ff6:	d093      	beq.n	88f20 <__sflush_r+0x40>
   88ff8:	2b1d      	cmp	r3, #29
   88ffa:	d006      	beq.n	8900a <__sflush_r+0x12a>
   88ffc:	2b16      	cmp	r3, #22
   88ffe:	d004      	beq.n	8900a <__sflush_r+0x12a>
   89000:	89ab      	ldrh	r3, [r5, #12]
   89002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89006:	81ab      	strh	r3, [r5, #12]
   89008:	e7d5      	b.n	88fb6 <__sflush_r+0xd6>
   8900a:	f8c8 6000 	str.w	r6, [r8]
   8900e:	e7d1      	b.n	88fb4 <__sflush_r+0xd4>

00089010 <_fflush_r>:
   89010:	b538      	push	{r3, r4, r5, lr}
   89012:	460c      	mov	r4, r1
   89014:	4605      	mov	r5, r0
   89016:	b108      	cbz	r0, 8901c <_fflush_r+0xc>
   89018:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8901a:	b1a3      	cbz	r3, 89046 <_fflush_r+0x36>
   8901c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89020:	b1b8      	cbz	r0, 89052 <_fflush_r+0x42>
   89022:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89024:	07db      	lsls	r3, r3, #31
   89026:	d401      	bmi.n	8902c <_fflush_r+0x1c>
   89028:	0581      	lsls	r1, r0, #22
   8902a:	d515      	bpl.n	89058 <_fflush_r+0x48>
   8902c:	4628      	mov	r0, r5
   8902e:	4621      	mov	r1, r4
   89030:	f7ff ff56 	bl	88ee0 <__sflush_r>
   89034:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89036:	4605      	mov	r5, r0
   89038:	07da      	lsls	r2, r3, #31
   8903a:	d402      	bmi.n	89042 <_fflush_r+0x32>
   8903c:	89a3      	ldrh	r3, [r4, #12]
   8903e:	059b      	lsls	r3, r3, #22
   89040:	d50e      	bpl.n	89060 <_fflush_r+0x50>
   89042:	4628      	mov	r0, r5
   89044:	bd38      	pop	{r3, r4, r5, pc}
   89046:	f000 f83f 	bl	890c8 <__sinit>
   8904a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8904e:	2800      	cmp	r0, #0
   89050:	d1e7      	bne.n	89022 <_fflush_r+0x12>
   89052:	4605      	mov	r5, r0
   89054:	4628      	mov	r0, r5
   89056:	bd38      	pop	{r3, r4, r5, pc}
   89058:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8905a:	f000 fc07 	bl	8986c <__retarget_lock_acquire_recursive>
   8905e:	e7e5      	b.n	8902c <_fflush_r+0x1c>
   89060:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89062:	f000 fc05 	bl	89870 <__retarget_lock_release_recursive>
   89066:	4628      	mov	r0, r5
   89068:	bd38      	pop	{r3, r4, r5, pc}
   8906a:	bf00      	nop

0008906c <std>:
   8906c:	2300      	movs	r3, #0
   8906e:	b510      	push	{r4, lr}
   89070:	4604      	mov	r4, r0
   89072:	e9c0 3300 	strd	r3, r3, [r0]
   89076:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8907a:	8181      	strh	r1, [r0, #12]
   8907c:	81c2      	strh	r2, [r0, #14]
   8907e:	4619      	mov	r1, r3
   89080:	6083      	str	r3, [r0, #8]
   89082:	6643      	str	r3, [r0, #100]	; 0x64
   89084:	6183      	str	r3, [r0, #24]
   89086:	2208      	movs	r2, #8
   89088:	305c      	adds	r0, #92	; 0x5c
   8908a:	f7fc f851 	bl	85130 <memset>
   8908e:	4807      	ldr	r0, [pc, #28]	; (890ac <std+0x40>)
   89090:	4907      	ldr	r1, [pc, #28]	; (890b0 <std+0x44>)
   89092:	4a08      	ldr	r2, [pc, #32]	; (890b4 <std+0x48>)
   89094:	4b08      	ldr	r3, [pc, #32]	; (890b8 <std+0x4c>)
   89096:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8909a:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8909e:	62e3      	str	r3, [r4, #44]	; 0x2c
   890a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   890a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   890a8:	f000 bbdc 	b.w	89864 <__retarget_lock_init_recursive>
   890ac:	0008abd5 	.word	0x0008abd5
   890b0:	0008abf9 	.word	0x0008abf9
   890b4:	0008ac39 	.word	0x0008ac39
   890b8:	0008ac59 	.word	0x0008ac59

000890bc <_cleanup_r>:
   890bc:	4901      	ldr	r1, [pc, #4]	; (890c4 <_cleanup_r+0x8>)
   890be:	f000 bba3 	b.w	89808 <_fwalk_reent>
   890c2:	bf00      	nop
   890c4:	0008afd9 	.word	0x0008afd9

000890c8 <__sinit>:
   890c8:	b510      	push	{r4, lr}
   890ca:	4604      	mov	r4, r0
   890cc:	4813      	ldr	r0, [pc, #76]	; (8911c <__sinit+0x54>)
   890ce:	f000 fbcd 	bl	8986c <__retarget_lock_acquire_recursive>
   890d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   890d4:	b9ea      	cbnz	r2, 89112 <__sinit+0x4a>
   890d6:	2003      	movs	r0, #3
   890d8:	4911      	ldr	r1, [pc, #68]	; (89120 <__sinit+0x58>)
   890da:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   890de:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   890e2:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   890e6:	63e1      	str	r1, [r4, #60]	; 0x3c
   890e8:	6860      	ldr	r0, [r4, #4]
   890ea:	2104      	movs	r1, #4
   890ec:	f7ff ffbe 	bl	8906c <std>
   890f0:	68a0      	ldr	r0, [r4, #8]
   890f2:	2201      	movs	r2, #1
   890f4:	2109      	movs	r1, #9
   890f6:	f7ff ffb9 	bl	8906c <std>
   890fa:	68e0      	ldr	r0, [r4, #12]
   890fc:	2202      	movs	r2, #2
   890fe:	2112      	movs	r1, #18
   89100:	f7ff ffb4 	bl	8906c <std>
   89104:	2301      	movs	r3, #1
   89106:	4805      	ldr	r0, [pc, #20]	; (8911c <__sinit+0x54>)
   89108:	63a3      	str	r3, [r4, #56]	; 0x38
   8910a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8910e:	f000 bbaf 	b.w	89870 <__retarget_lock_release_recursive>
   89112:	4802      	ldr	r0, [pc, #8]	; (8911c <__sinit+0x54>)
   89114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89118:	f000 bbaa 	b.w	89870 <__retarget_lock_release_recursive>
   8911c:	20001984 	.word	0x20001984
   89120:	000890bd 	.word	0x000890bd

00089124 <__sfp_lock_acquire>:
   89124:	4801      	ldr	r0, [pc, #4]	; (8912c <__sfp_lock_acquire+0x8>)
   89126:	f000 bba1 	b.w	8986c <__retarget_lock_acquire_recursive>
   8912a:	bf00      	nop
   8912c:	20001998 	.word	0x20001998

00089130 <__sfp_lock_release>:
   89130:	4801      	ldr	r0, [pc, #4]	; (89138 <__sfp_lock_release+0x8>)
   89132:	f000 bb9d 	b.w	89870 <__retarget_lock_release_recursive>
   89136:	bf00      	nop
   89138:	20001998 	.word	0x20001998

0008913c <__libc_fini_array>:
   8913c:	b538      	push	{r3, r4, r5, lr}
   8913e:	4b08      	ldr	r3, [pc, #32]	; (89160 <__libc_fini_array+0x24>)
   89140:	4d08      	ldr	r5, [pc, #32]	; (89164 <__libc_fini_array+0x28>)
   89142:	1b5b      	subs	r3, r3, r5
   89144:	109c      	asrs	r4, r3, #2
   89146:	d007      	beq.n	89158 <__libc_fini_array+0x1c>
   89148:	3b04      	subs	r3, #4
   8914a:	441d      	add	r5, r3
   8914c:	3c01      	subs	r4, #1
   8914e:	f855 3904 	ldr.w	r3, [r5], #-4
   89152:	4798      	blx	r3
   89154:	2c00      	cmp	r4, #0
   89156:	d1f9      	bne.n	8914c <__libc_fini_array+0x10>
   89158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8915c:	f003 b922 	b.w	8c3a4 <_fini>
   89160:	0008c3b4 	.word	0x0008c3b4
   89164:	0008c3b0 	.word	0x0008c3b0

00089168 <__fputwc>:
   89168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8916c:	b083      	sub	sp, #12
   8916e:	4607      	mov	r7, r0
   89170:	4688      	mov	r8, r1
   89172:	4614      	mov	r4, r2
   89174:	f000 fb6c 	bl	89850 <__locale_mb_cur_max>
   89178:	2801      	cmp	r0, #1
   8917a:	d103      	bne.n	89184 <__fputwc+0x1c>
   8917c:	f108 33ff 	add.w	r3, r8, #4294967295
   89180:	2bfe      	cmp	r3, #254	; 0xfe
   89182:	d933      	bls.n	891ec <__fputwc+0x84>
   89184:	4642      	mov	r2, r8
   89186:	4638      	mov	r0, r7
   89188:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8918c:	a901      	add	r1, sp, #4
   8918e:	f001 fe3b 	bl	8ae08 <_wcrtomb_r>
   89192:	1c42      	adds	r2, r0, #1
   89194:	4606      	mov	r6, r0
   89196:	d02f      	beq.n	891f8 <__fputwc+0x90>
   89198:	b318      	cbz	r0, 891e2 <__fputwc+0x7a>
   8919a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8919e:	2500      	movs	r5, #0
   891a0:	f10d 0904 	add.w	r9, sp, #4
   891a4:	e008      	b.n	891b8 <__fputwc+0x50>
   891a6:	6823      	ldr	r3, [r4, #0]
   891a8:	1c5a      	adds	r2, r3, #1
   891aa:	6022      	str	r2, [r4, #0]
   891ac:	7019      	strb	r1, [r3, #0]
   891ae:	3501      	adds	r5, #1
   891b0:	42b5      	cmp	r5, r6
   891b2:	d216      	bcs.n	891e2 <__fputwc+0x7a>
   891b4:	f815 1009 	ldrb.w	r1, [r5, r9]
   891b8:	68a3      	ldr	r3, [r4, #8]
   891ba:	3b01      	subs	r3, #1
   891bc:	2b00      	cmp	r3, #0
   891be:	60a3      	str	r3, [r4, #8]
   891c0:	daf1      	bge.n	891a6 <__fputwc+0x3e>
   891c2:	69a2      	ldr	r2, [r4, #24]
   891c4:	4293      	cmp	r3, r2
   891c6:	db01      	blt.n	891cc <__fputwc+0x64>
   891c8:	290a      	cmp	r1, #10
   891ca:	d1ec      	bne.n	891a6 <__fputwc+0x3e>
   891cc:	4622      	mov	r2, r4
   891ce:	4638      	mov	r0, r7
   891d0:	f001 fdc2 	bl	8ad58 <__swbuf_r>
   891d4:	1c43      	adds	r3, r0, #1
   891d6:	d1ea      	bne.n	891ae <__fputwc+0x46>
   891d8:	4606      	mov	r6, r0
   891da:	4630      	mov	r0, r6
   891dc:	b003      	add	sp, #12
   891de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   891e2:	4646      	mov	r6, r8
   891e4:	4630      	mov	r0, r6
   891e6:	b003      	add	sp, #12
   891e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   891ec:	fa5f f188 	uxtb.w	r1, r8
   891f0:	4606      	mov	r6, r0
   891f2:	f88d 1004 	strb.w	r1, [sp, #4]
   891f6:	e7d2      	b.n	8919e <__fputwc+0x36>
   891f8:	4630      	mov	r0, r6
   891fa:	89a3      	ldrh	r3, [r4, #12]
   891fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89200:	81a3      	strh	r3, [r4, #12]
   89202:	b003      	add	sp, #12
   89204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00089208 <_fputwc_r>:
   89208:	b530      	push	{r4, r5, lr}
   8920a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8920c:	4614      	mov	r4, r2
   8920e:	f013 0f01 	tst.w	r3, #1
   89212:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   89216:	4605      	mov	r5, r0
   89218:	b083      	sub	sp, #12
   8921a:	b29a      	uxth	r2, r3
   8921c:	d101      	bne.n	89222 <_fputwc_r+0x1a>
   8921e:	0598      	lsls	r0, r3, #22
   89220:	d51c      	bpl.n	8925c <_fputwc_r+0x54>
   89222:	0490      	lsls	r0, r2, #18
   89224:	d406      	bmi.n	89234 <_fputwc_r+0x2c>
   89226:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8922c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89230:	81a3      	strh	r3, [r4, #12]
   89232:	6662      	str	r2, [r4, #100]	; 0x64
   89234:	4628      	mov	r0, r5
   89236:	4622      	mov	r2, r4
   89238:	f7ff ff96 	bl	89168 <__fputwc>
   8923c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8923e:	4605      	mov	r5, r0
   89240:	07da      	lsls	r2, r3, #31
   89242:	d402      	bmi.n	8924a <_fputwc_r+0x42>
   89244:	89a3      	ldrh	r3, [r4, #12]
   89246:	059b      	lsls	r3, r3, #22
   89248:	d502      	bpl.n	89250 <_fputwc_r+0x48>
   8924a:	4628      	mov	r0, r5
   8924c:	b003      	add	sp, #12
   8924e:	bd30      	pop	{r4, r5, pc}
   89250:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89252:	f000 fb0d 	bl	89870 <__retarget_lock_release_recursive>
   89256:	4628      	mov	r0, r5
   89258:	b003      	add	sp, #12
   8925a:	bd30      	pop	{r4, r5, pc}
   8925c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8925e:	9101      	str	r1, [sp, #4]
   89260:	f000 fb04 	bl	8986c <__retarget_lock_acquire_recursive>
   89264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89268:	9901      	ldr	r1, [sp, #4]
   8926a:	b29a      	uxth	r2, r3
   8926c:	e7d9      	b.n	89222 <_fputwc_r+0x1a>
   8926e:	bf00      	nop

00089270 <_malloc_trim_r>:
   89270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89272:	460c      	mov	r4, r1
   89274:	4f23      	ldr	r7, [pc, #140]	; (89304 <_malloc_trim_r+0x94>)
   89276:	4606      	mov	r6, r0
   89278:	f000 feea 	bl	8a050 <__malloc_lock>
   8927c:	68bb      	ldr	r3, [r7, #8]
   8927e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   89282:	685d      	ldr	r5, [r3, #4]
   89284:	310f      	adds	r1, #15
   89286:	f025 0503 	bic.w	r5, r5, #3
   8928a:	194b      	adds	r3, r1, r5
   8928c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   89290:	f023 030f 	bic.w	r3, r3, #15
   89294:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   89298:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8929c:	db07      	blt.n	892ae <_malloc_trim_r+0x3e>
   8929e:	2100      	movs	r1, #0
   892a0:	4630      	mov	r0, r6
   892a2:	f001 fc85 	bl	8abb0 <_sbrk_r>
   892a6:	68bb      	ldr	r3, [r7, #8]
   892a8:	442b      	add	r3, r5
   892aa:	4298      	cmp	r0, r3
   892ac:	d004      	beq.n	892b8 <_malloc_trim_r+0x48>
   892ae:	4630      	mov	r0, r6
   892b0:	f000 fed4 	bl	8a05c <__malloc_unlock>
   892b4:	2000      	movs	r0, #0
   892b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   892b8:	4630      	mov	r0, r6
   892ba:	4261      	negs	r1, r4
   892bc:	f001 fc78 	bl	8abb0 <_sbrk_r>
   892c0:	3001      	adds	r0, #1
   892c2:	d00d      	beq.n	892e0 <_malloc_trim_r+0x70>
   892c4:	4a10      	ldr	r2, [pc, #64]	; (89308 <_malloc_trim_r+0x98>)
   892c6:	68b9      	ldr	r1, [r7, #8]
   892c8:	6813      	ldr	r3, [r2, #0]
   892ca:	1b2d      	subs	r5, r5, r4
   892cc:	f045 0501 	orr.w	r5, r5, #1
   892d0:	4630      	mov	r0, r6
   892d2:	1b1b      	subs	r3, r3, r4
   892d4:	604d      	str	r5, [r1, #4]
   892d6:	6013      	str	r3, [r2, #0]
   892d8:	f000 fec0 	bl	8a05c <__malloc_unlock>
   892dc:	2001      	movs	r0, #1
   892de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   892e0:	2100      	movs	r1, #0
   892e2:	4630      	mov	r0, r6
   892e4:	f001 fc64 	bl	8abb0 <_sbrk_r>
   892e8:	68ba      	ldr	r2, [r7, #8]
   892ea:	1a83      	subs	r3, r0, r2
   892ec:	2b0f      	cmp	r3, #15
   892ee:	ddde      	ble.n	892ae <_malloc_trim_r+0x3e>
   892f0:	4906      	ldr	r1, [pc, #24]	; (8930c <_malloc_trim_r+0x9c>)
   892f2:	f043 0301 	orr.w	r3, r3, #1
   892f6:	680c      	ldr	r4, [r1, #0]
   892f8:	4903      	ldr	r1, [pc, #12]	; (89308 <_malloc_trim_r+0x98>)
   892fa:	1b00      	subs	r0, r0, r4
   892fc:	6053      	str	r3, [r2, #4]
   892fe:	6008      	str	r0, [r1, #0]
   89300:	e7d5      	b.n	892ae <_malloc_trim_r+0x3e>
   89302:	bf00      	nop
   89304:	20000968 	.word	0x20000968
   89308:	20001088 	.word	0x20001088
   8930c:	20000d70 	.word	0x20000d70

00089310 <_free_r>:
   89310:	2900      	cmp	r1, #0
   89312:	d05f      	beq.n	893d4 <_free_r+0xc4>
   89314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89316:	460c      	mov	r4, r1
   89318:	4606      	mov	r6, r0
   8931a:	f000 fe99 	bl	8a050 <__malloc_lock>
   8931e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89322:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 89518 <_free_r+0x208>
   89326:	f1a4 0008 	sub.w	r0, r4, #8
   8932a:	f023 0101 	bic.w	r1, r3, #1
   8932e:	1842      	adds	r2, r0, r1
   89330:	f8dc 7008 	ldr.w	r7, [ip, #8]
   89334:	6855      	ldr	r5, [r2, #4]
   89336:	4297      	cmp	r7, r2
   89338:	f025 0503 	bic.w	r5, r5, #3
   8933c:	f000 8089 	beq.w	89452 <_free_r+0x142>
   89340:	07df      	lsls	r7, r3, #31
   89342:	6055      	str	r5, [r2, #4]
   89344:	d434      	bmi.n	893b0 <_free_r+0xa0>
   89346:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8934a:	f10c 0408 	add.w	r4, ip, #8
   8934e:	1bc0      	subs	r0, r0, r7
   89350:	6883      	ldr	r3, [r0, #8]
   89352:	4439      	add	r1, r7
   89354:	42a3      	cmp	r3, r4
   89356:	d06a      	beq.n	8942e <_free_r+0x11e>
   89358:	1957      	adds	r7, r2, r5
   8935a:	687f      	ldr	r7, [r7, #4]
   8935c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   89360:	f8c3 e00c 	str.w	lr, [r3, #12]
   89364:	f8ce 3008 	str.w	r3, [lr, #8]
   89368:	07fb      	lsls	r3, r7, #31
   8936a:	f140 8097 	bpl.w	8949c <_free_r+0x18c>
   8936e:	f041 0301 	orr.w	r3, r1, #1
   89372:	6043      	str	r3, [r0, #4]
   89374:	6011      	str	r1, [r2, #0]
   89376:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8937a:	d234      	bcs.n	893e6 <_free_r+0xd6>
   8937c:	2201      	movs	r2, #1
   8937e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   89382:	08cb      	lsrs	r3, r1, #3
   89384:	0949      	lsrs	r1, r1, #5
   89386:	4413      	add	r3, r2
   89388:	fa02 f101 	lsl.w	r1, r2, r1
   8938c:	4321      	orrs	r1, r4
   8938e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   89392:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   89396:	3a08      	subs	r2, #8
   89398:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8939c:	f8cc 1004 	str.w	r1, [ip, #4]
   893a0:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   893a4:	60e0      	str	r0, [r4, #12]
   893a6:	4630      	mov	r0, r6
   893a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   893ac:	f000 be56 	b.w	8a05c <__malloc_unlock>
   893b0:	1953      	adds	r3, r2, r5
   893b2:	685b      	ldr	r3, [r3, #4]
   893b4:	07df      	lsls	r7, r3, #31
   893b6:	d40e      	bmi.n	893d6 <_free_r+0xc6>
   893b8:	4429      	add	r1, r5
   893ba:	f10c 0408 	add.w	r4, ip, #8
   893be:	6893      	ldr	r3, [r2, #8]
   893c0:	42a3      	cmp	r3, r4
   893c2:	d073      	beq.n	894ac <_free_r+0x19c>
   893c4:	68d4      	ldr	r4, [r2, #12]
   893c6:	f041 0201 	orr.w	r2, r1, #1
   893ca:	60dc      	str	r4, [r3, #12]
   893cc:	60a3      	str	r3, [r4, #8]
   893ce:	6042      	str	r2, [r0, #4]
   893d0:	5041      	str	r1, [r0, r1]
   893d2:	e7d0      	b.n	89376 <_free_r+0x66>
   893d4:	4770      	bx	lr
   893d6:	f041 0301 	orr.w	r3, r1, #1
   893da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   893de:	f844 3c04 	str.w	r3, [r4, #-4]
   893e2:	6011      	str	r1, [r2, #0]
   893e4:	d3ca      	bcc.n	8937c <_free_r+0x6c>
   893e6:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   893ea:	ea4f 2351 	mov.w	r3, r1, lsr #9
   893ee:	d24a      	bcs.n	89486 <_free_r+0x176>
   893f0:	098b      	lsrs	r3, r1, #6
   893f2:	f103 0539 	add.w	r5, r3, #57	; 0x39
   893f6:	00ed      	lsls	r5, r5, #3
   893f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
   893fc:	f85c 3005 	ldr.w	r3, [ip, r5]
   89400:	eb0c 0405 	add.w	r4, ip, r5
   89404:	3c08      	subs	r4, #8
   89406:	429c      	cmp	r4, r3
   89408:	d059      	beq.n	894be <_free_r+0x1ae>
   8940a:	685a      	ldr	r2, [r3, #4]
   8940c:	f022 0203 	bic.w	r2, r2, #3
   89410:	428a      	cmp	r2, r1
   89412:	d902      	bls.n	8941a <_free_r+0x10a>
   89414:	689b      	ldr	r3, [r3, #8]
   89416:	429c      	cmp	r4, r3
   89418:	d1f7      	bne.n	8940a <_free_r+0xfa>
   8941a:	68dc      	ldr	r4, [r3, #12]
   8941c:	e9c0 3402 	strd	r3, r4, [r0, #8]
   89420:	60a0      	str	r0, [r4, #8]
   89422:	60d8      	str	r0, [r3, #12]
   89424:	4630      	mov	r0, r6
   89426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8942a:	f000 be17 	b.w	8a05c <__malloc_unlock>
   8942e:	1953      	adds	r3, r2, r5
   89430:	685b      	ldr	r3, [r3, #4]
   89432:	07db      	lsls	r3, r3, #31
   89434:	d466      	bmi.n	89504 <_free_r+0x1f4>
   89436:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8943a:	4429      	add	r1, r5
   8943c:	f041 0401 	orr.w	r4, r1, #1
   89440:	60d3      	str	r3, [r2, #12]
   89442:	609a      	str	r2, [r3, #8]
   89444:	6044      	str	r4, [r0, #4]
   89446:	5041      	str	r1, [r0, r1]
   89448:	4630      	mov	r0, r6
   8944a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8944e:	f000 be05 	b.w	8a05c <__malloc_unlock>
   89452:	07db      	lsls	r3, r3, #31
   89454:	4429      	add	r1, r5
   89456:	d407      	bmi.n	89468 <_free_r+0x158>
   89458:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8945c:	1b00      	subs	r0, r0, r4
   8945e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   89462:	4421      	add	r1, r4
   89464:	60d3      	str	r3, [r2, #12]
   89466:	609a      	str	r2, [r3, #8]
   89468:	4b29      	ldr	r3, [pc, #164]	; (89510 <_free_r+0x200>)
   8946a:	f041 0201 	orr.w	r2, r1, #1
   8946e:	681b      	ldr	r3, [r3, #0]
   89470:	6042      	str	r2, [r0, #4]
   89472:	428b      	cmp	r3, r1
   89474:	f8cc 0008 	str.w	r0, [ip, #8]
   89478:	d895      	bhi.n	893a6 <_free_r+0x96>
   8947a:	4b26      	ldr	r3, [pc, #152]	; (89514 <_free_r+0x204>)
   8947c:	4630      	mov	r0, r6
   8947e:	6819      	ldr	r1, [r3, #0]
   89480:	f7ff fef6 	bl	89270 <_malloc_trim_r>
   89484:	e78f      	b.n	893a6 <_free_r+0x96>
   89486:	2b14      	cmp	r3, #20
   89488:	d90a      	bls.n	894a0 <_free_r+0x190>
   8948a:	2b54      	cmp	r3, #84	; 0x54
   8948c:	d821      	bhi.n	894d2 <_free_r+0x1c2>
   8948e:	0b0b      	lsrs	r3, r1, #12
   89490:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   89494:	00ed      	lsls	r5, r5, #3
   89496:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8949a:	e7af      	b.n	893fc <_free_r+0xec>
   8949c:	4429      	add	r1, r5
   8949e:	e78e      	b.n	893be <_free_r+0xae>
   894a0:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   894a4:	00ed      	lsls	r5, r5, #3
   894a6:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   894aa:	e7a7      	b.n	893fc <_free_r+0xec>
   894ac:	f041 0301 	orr.w	r3, r1, #1
   894b0:	e9cc 0004 	strd	r0, r0, [ip, #16]
   894b4:	e9c0 4402 	strd	r4, r4, [r0, #8]
   894b8:	6043      	str	r3, [r0, #4]
   894ba:	5041      	str	r1, [r0, r1]
   894bc:	e773      	b.n	893a6 <_free_r+0x96>
   894be:	2501      	movs	r5, #1
   894c0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   894c4:	1092      	asrs	r2, r2, #2
   894c6:	fa05 f202 	lsl.w	r2, r5, r2
   894ca:	430a      	orrs	r2, r1
   894cc:	f8cc 2004 	str.w	r2, [ip, #4]
   894d0:	e7a4      	b.n	8941c <_free_r+0x10c>
   894d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   894d6:	d806      	bhi.n	894e6 <_free_r+0x1d6>
   894d8:	0bcb      	lsrs	r3, r1, #15
   894da:	f103 0578 	add.w	r5, r3, #120	; 0x78
   894de:	00ed      	lsls	r5, r5, #3
   894e0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   894e4:	e78a      	b.n	893fc <_free_r+0xec>
   894e6:	f240 5254 	movw	r2, #1364	; 0x554
   894ea:	4293      	cmp	r3, r2
   894ec:	d806      	bhi.n	894fc <_free_r+0x1ec>
   894ee:	0c8b      	lsrs	r3, r1, #18
   894f0:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   894f4:	00ed      	lsls	r5, r5, #3
   894f6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   894fa:	e77f      	b.n	893fc <_free_r+0xec>
   894fc:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   89500:	227e      	movs	r2, #126	; 0x7e
   89502:	e77b      	b.n	893fc <_free_r+0xec>
   89504:	f041 0301 	orr.w	r3, r1, #1
   89508:	6043      	str	r3, [r0, #4]
   8950a:	6011      	str	r1, [r2, #0]
   8950c:	e74b      	b.n	893a6 <_free_r+0x96>
   8950e:	bf00      	nop
   89510:	20000d74 	.word	0x20000d74
   89514:	200010b8 	.word	0x200010b8
   89518:	20000968 	.word	0x20000968

0008951c <__sfvwrite_r>:
   8951c:	6893      	ldr	r3, [r2, #8]
   8951e:	2b00      	cmp	r3, #0
   89520:	f000 80bd 	beq.w	8969e <__sfvwrite_r+0x182>
   89524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89528:	4690      	mov	r8, r2
   8952a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8952e:	460c      	mov	r4, r1
   89530:	0711      	lsls	r1, r2, #28
   89532:	4681      	mov	r9, r0
   89534:	b083      	sub	sp, #12
   89536:	b293      	uxth	r3, r2
   89538:	d527      	bpl.n	8958a <__sfvwrite_r+0x6e>
   8953a:	6922      	ldr	r2, [r4, #16]
   8953c:	b32a      	cbz	r2, 8958a <__sfvwrite_r+0x6e>
   8953e:	f013 0702 	ands.w	r7, r3, #2
   89542:	f8d8 5000 	ldr.w	r5, [r8]
   89546:	d02f      	beq.n	895a8 <__sfvwrite_r+0x8c>
   89548:	f04f 0b00 	mov.w	fp, #0
   8954c:	465f      	mov	r7, fp
   8954e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 89804 <__sfvwrite_r+0x2e8>
   89552:	2f00      	cmp	r7, #0
   89554:	f000 8089 	beq.w	8966a <__sfvwrite_r+0x14e>
   89558:	4557      	cmp	r7, sl
   8955a:	463b      	mov	r3, r7
   8955c:	465a      	mov	r2, fp
   8955e:	bf28      	it	cs
   89560:	4653      	movcs	r3, sl
   89562:	4648      	mov	r0, r9
   89564:	69e1      	ldr	r1, [r4, #28]
   89566:	6a66      	ldr	r6, [r4, #36]	; 0x24
   89568:	47b0      	blx	r6
   8956a:	2800      	cmp	r0, #0
   8956c:	f340 808d 	ble.w	8968a <__sfvwrite_r+0x16e>
   89570:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89574:	4483      	add	fp, r0
   89576:	1a1b      	subs	r3, r3, r0
   89578:	1a3f      	subs	r7, r7, r0
   8957a:	f8c8 3008 	str.w	r3, [r8, #8]
   8957e:	2b00      	cmp	r3, #0
   89580:	d1e7      	bne.n	89552 <__sfvwrite_r+0x36>
   89582:	2000      	movs	r0, #0
   89584:	b003      	add	sp, #12
   89586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8958a:	4621      	mov	r1, r4
   8958c:	4648      	mov	r0, r9
   8958e:	f7fe fc39 	bl	87e04 <__swsetup_r>
   89592:	2800      	cmp	r0, #0
   89594:	f040 8132 	bne.w	897fc <__sfvwrite_r+0x2e0>
   89598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8959c:	f8d8 5000 	ldr.w	r5, [r8]
   895a0:	b293      	uxth	r3, r2
   895a2:	f013 0702 	ands.w	r7, r3, #2
   895a6:	d1cf      	bne.n	89548 <__sfvwrite_r+0x2c>
   895a8:	f013 0a01 	ands.w	sl, r3, #1
   895ac:	d179      	bne.n	896a2 <__sfvwrite_r+0x186>
   895ae:	4656      	mov	r6, sl
   895b0:	2e00      	cmp	r6, #0
   895b2:	d056      	beq.n	89662 <__sfvwrite_r+0x146>
   895b4:	059a      	lsls	r2, r3, #22
   895b6:	68a7      	ldr	r7, [r4, #8]
   895b8:	f140 80bd 	bpl.w	89736 <__sfvwrite_r+0x21a>
   895bc:	42b7      	cmp	r7, r6
   895be:	46bb      	mov	fp, r7
   895c0:	f200 80d2 	bhi.w	89768 <__sfvwrite_r+0x24c>
   895c4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   895c8:	f000 80d0 	beq.w	8976c <__sfvwrite_r+0x250>
   895cc:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   895d0:	6822      	ldr	r2, [r4, #0]
   895d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   895d6:	eba2 0b01 	sub.w	fp, r2, r1
   895da:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   895de:	f10b 0001 	add.w	r0, fp, #1
   895e2:	107f      	asrs	r7, r7, #1
   895e4:	4430      	add	r0, r6
   895e6:	42b8      	cmp	r0, r7
   895e8:	463a      	mov	r2, r7
   895ea:	bf84      	itt	hi
   895ec:	4607      	movhi	r7, r0
   895ee:	463a      	movhi	r2, r7
   895f0:	055b      	lsls	r3, r3, #21
   895f2:	f140 80e7 	bpl.w	897c4 <__sfvwrite_r+0x2a8>
   895f6:	4611      	mov	r1, r2
   895f8:	4648      	mov	r0, r9
   895fa:	f000 f9bb 	bl	89974 <_malloc_r>
   895fe:	2800      	cmp	r0, #0
   89600:	f000 80f6 	beq.w	897f0 <__sfvwrite_r+0x2d4>
   89604:	465a      	mov	r2, fp
   89606:	6921      	ldr	r1, [r4, #16]
   89608:	9000      	str	r0, [sp, #0]
   8960a:	f7fb fd1b 	bl	85044 <memcpy>
   8960e:	89a2      	ldrh	r2, [r4, #12]
   89610:	9b00      	ldr	r3, [sp, #0]
   89612:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8961a:	81a2      	strh	r2, [r4, #12]
   8961c:	eba7 020b 	sub.w	r2, r7, fp
   89620:	eb03 000b 	add.w	r0, r3, fp
   89624:	6167      	str	r7, [r4, #20]
   89626:	46b3      	mov	fp, r6
   89628:	4637      	mov	r7, r6
   8962a:	6123      	str	r3, [r4, #16]
   8962c:	6020      	str	r0, [r4, #0]
   8962e:	60a2      	str	r2, [r4, #8]
   89630:	465a      	mov	r2, fp
   89632:	4651      	mov	r1, sl
   89634:	f000 fca2 	bl	89f7c <memmove>
   89638:	68a2      	ldr	r2, [r4, #8]
   8963a:	6823      	ldr	r3, [r4, #0]
   8963c:	1bd2      	subs	r2, r2, r7
   8963e:	4637      	mov	r7, r6
   89640:	2600      	movs	r6, #0
   89642:	445b      	add	r3, fp
   89644:	60a2      	str	r2, [r4, #8]
   89646:	6023      	str	r3, [r4, #0]
   89648:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8964c:	44ba      	add	sl, r7
   8964e:	1bd7      	subs	r7, r2, r7
   89650:	f8c8 7008 	str.w	r7, [r8, #8]
   89654:	2f00      	cmp	r7, #0
   89656:	d094      	beq.n	89582 <__sfvwrite_r+0x66>
   89658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8965c:	b29b      	uxth	r3, r3
   8965e:	2e00      	cmp	r6, #0
   89660:	d1a8      	bne.n	895b4 <__sfvwrite_r+0x98>
   89662:	e9d5 a600 	ldrd	sl, r6, [r5]
   89666:	3508      	adds	r5, #8
   89668:	e7a2      	b.n	895b0 <__sfvwrite_r+0x94>
   8966a:	e9d5 b700 	ldrd	fp, r7, [r5]
   8966e:	3508      	adds	r5, #8
   89670:	e76f      	b.n	89552 <__sfvwrite_r+0x36>
   89672:	4629      	mov	r1, r5
   89674:	465a      	mov	r2, fp
   89676:	f000 fc81 	bl	89f7c <memmove>
   8967a:	6823      	ldr	r3, [r4, #0]
   8967c:	4621      	mov	r1, r4
   8967e:	445b      	add	r3, fp
   89680:	4648      	mov	r0, r9
   89682:	6023      	str	r3, [r4, #0]
   89684:	f7ff fcc4 	bl	89010 <_fflush_r>
   89688:	b358      	cbz	r0, 896e2 <__sfvwrite_r+0x1c6>
   8968a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8968e:	f04f 30ff 	mov.w	r0, #4294967295
   89692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89696:	81a3      	strh	r3, [r4, #12]
   89698:	b003      	add	sp, #12
   8969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8969e:	2000      	movs	r0, #0
   896a0:	4770      	bx	lr
   896a2:	463e      	mov	r6, r7
   896a4:	46aa      	mov	sl, r5
   896a6:	4638      	mov	r0, r7
   896a8:	463d      	mov	r5, r7
   896aa:	9700      	str	r7, [sp, #0]
   896ac:	b36e      	cbz	r6, 8970a <__sfvwrite_r+0x1ee>
   896ae:	2800      	cmp	r0, #0
   896b0:	d035      	beq.n	8971e <__sfvwrite_r+0x202>
   896b2:	9a00      	ldr	r2, [sp, #0]
   896b4:	6820      	ldr	r0, [r4, #0]
   896b6:	6921      	ldr	r1, [r4, #16]
   896b8:	42b2      	cmp	r2, r6
   896ba:	bf28      	it	cs
   896bc:	4632      	movcs	r2, r6
   896be:	4288      	cmp	r0, r1
   896c0:	6963      	ldr	r3, [r4, #20]
   896c2:	d904      	bls.n	896ce <__sfvwrite_r+0x1b2>
   896c4:	68a1      	ldr	r1, [r4, #8]
   896c6:	eb03 0b01 	add.w	fp, r3, r1
   896ca:	455a      	cmp	r2, fp
   896cc:	dcd1      	bgt.n	89672 <__sfvwrite_r+0x156>
   896ce:	4293      	cmp	r3, r2
   896d0:	dc6b      	bgt.n	897aa <__sfvwrite_r+0x28e>
   896d2:	462a      	mov	r2, r5
   896d4:	4648      	mov	r0, r9
   896d6:	69e1      	ldr	r1, [r4, #28]
   896d8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   896da:	47b8      	blx	r7
   896dc:	f1b0 0b00 	subs.w	fp, r0, #0
   896e0:	ddd3      	ble.n	8968a <__sfvwrite_r+0x16e>
   896e2:	9b00      	ldr	r3, [sp, #0]
   896e4:	ebb3 030b 	subs.w	r3, r3, fp
   896e8:	9300      	str	r3, [sp, #0]
   896ea:	d057      	beq.n	8979c <__sfvwrite_r+0x280>
   896ec:	2001      	movs	r0, #1
   896ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   896f2:	445d      	add	r5, fp
   896f4:	eba3 030b 	sub.w	r3, r3, fp
   896f8:	eba6 060b 	sub.w	r6, r6, fp
   896fc:	f8c8 3008 	str.w	r3, [r8, #8]
   89700:	2b00      	cmp	r3, #0
   89702:	f43f af3e 	beq.w	89582 <__sfvwrite_r+0x66>
   89706:	2e00      	cmp	r6, #0
   89708:	d1d1      	bne.n	896ae <__sfvwrite_r+0x192>
   8970a:	f10a 0308 	add.w	r3, sl, #8
   8970e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   89712:	469a      	mov	sl, r3
   89714:	f853 5c08 	ldr.w	r5, [r3, #-8]
   89718:	3308      	adds	r3, #8
   8971a:	2e00      	cmp	r6, #0
   8971c:	d0f7      	beq.n	8970e <__sfvwrite_r+0x1f2>
   8971e:	4632      	mov	r2, r6
   89720:	210a      	movs	r1, #10
   89722:	4628      	mov	r0, r5
   89724:	f000 fbea 	bl	89efc <memchr>
   89728:	2800      	cmp	r0, #0
   8972a:	d05e      	beq.n	897ea <__sfvwrite_r+0x2ce>
   8972c:	3001      	adds	r0, #1
   8972e:	1b43      	subs	r3, r0, r5
   89730:	461a      	mov	r2, r3
   89732:	9300      	str	r3, [sp, #0]
   89734:	e7be      	b.n	896b4 <__sfvwrite_r+0x198>
   89736:	6820      	ldr	r0, [r4, #0]
   89738:	6923      	ldr	r3, [r4, #16]
   8973a:	4298      	cmp	r0, r3
   8973c:	d818      	bhi.n	89770 <__sfvwrite_r+0x254>
   8973e:	6962      	ldr	r2, [r4, #20]
   89740:	42b2      	cmp	r2, r6
   89742:	d815      	bhi.n	89770 <__sfvwrite_r+0x254>
   89744:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   89748:	42b3      	cmp	r3, r6
   8974a:	bf28      	it	cs
   8974c:	4633      	movcs	r3, r6
   8974e:	fb93 f3f2 	sdiv	r3, r3, r2
   89752:	6a67      	ldr	r7, [r4, #36]	; 0x24
   89754:	fb02 f303 	mul.w	r3, r2, r3
   89758:	4648      	mov	r0, r9
   8975a:	4652      	mov	r2, sl
   8975c:	69e1      	ldr	r1, [r4, #28]
   8975e:	47b8      	blx	r7
   89760:	1e07      	subs	r7, r0, #0
   89762:	dd92      	ble.n	8968a <__sfvwrite_r+0x16e>
   89764:	1bf6      	subs	r6, r6, r7
   89766:	e76f      	b.n	89648 <__sfvwrite_r+0x12c>
   89768:	4637      	mov	r7, r6
   8976a:	46b3      	mov	fp, r6
   8976c:	6820      	ldr	r0, [r4, #0]
   8976e:	e75f      	b.n	89630 <__sfvwrite_r+0x114>
   89770:	42b7      	cmp	r7, r6
   89772:	bf28      	it	cs
   89774:	4637      	movcs	r7, r6
   89776:	4651      	mov	r1, sl
   89778:	463a      	mov	r2, r7
   8977a:	f000 fbff 	bl	89f7c <memmove>
   8977e:	68a3      	ldr	r3, [r4, #8]
   89780:	6822      	ldr	r2, [r4, #0]
   89782:	1bdb      	subs	r3, r3, r7
   89784:	443a      	add	r2, r7
   89786:	60a3      	str	r3, [r4, #8]
   89788:	6022      	str	r2, [r4, #0]
   8978a:	2b00      	cmp	r3, #0
   8978c:	d1ea      	bne.n	89764 <__sfvwrite_r+0x248>
   8978e:	4621      	mov	r1, r4
   89790:	4648      	mov	r0, r9
   89792:	f7ff fc3d 	bl	89010 <_fflush_r>
   89796:	2800      	cmp	r0, #0
   89798:	d0e4      	beq.n	89764 <__sfvwrite_r+0x248>
   8979a:	e776      	b.n	8968a <__sfvwrite_r+0x16e>
   8979c:	4621      	mov	r1, r4
   8979e:	4648      	mov	r0, r9
   897a0:	f7ff fc36 	bl	89010 <_fflush_r>
   897a4:	2800      	cmp	r0, #0
   897a6:	d0a2      	beq.n	896ee <__sfvwrite_r+0x1d2>
   897a8:	e76f      	b.n	8968a <__sfvwrite_r+0x16e>
   897aa:	4629      	mov	r1, r5
   897ac:	4693      	mov	fp, r2
   897ae:	9201      	str	r2, [sp, #4]
   897b0:	f000 fbe4 	bl	89f7c <memmove>
   897b4:	68a1      	ldr	r1, [r4, #8]
   897b6:	6823      	ldr	r3, [r4, #0]
   897b8:	9a01      	ldr	r2, [sp, #4]
   897ba:	1a89      	subs	r1, r1, r2
   897bc:	441a      	add	r2, r3
   897be:	60a1      	str	r1, [r4, #8]
   897c0:	6022      	str	r2, [r4, #0]
   897c2:	e78e      	b.n	896e2 <__sfvwrite_r+0x1c6>
   897c4:	4648      	mov	r0, r9
   897c6:	f000 ffcb 	bl	8a760 <_realloc_r>
   897ca:	4603      	mov	r3, r0
   897cc:	2800      	cmp	r0, #0
   897ce:	f47f af25 	bne.w	8961c <__sfvwrite_r+0x100>
   897d2:	4648      	mov	r0, r9
   897d4:	6921      	ldr	r1, [r4, #16]
   897d6:	f7ff fd9b 	bl	89310 <_free_r>
   897da:	220c      	movs	r2, #12
   897dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   897e0:	f8c9 2000 	str.w	r2, [r9]
   897e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   897e8:	e751      	b.n	8968e <__sfvwrite_r+0x172>
   897ea:	1c72      	adds	r2, r6, #1
   897ec:	9200      	str	r2, [sp, #0]
   897ee:	e761      	b.n	896b4 <__sfvwrite_r+0x198>
   897f0:	220c      	movs	r2, #12
   897f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   897f6:	f8c9 2000 	str.w	r2, [r9]
   897fa:	e748      	b.n	8968e <__sfvwrite_r+0x172>
   897fc:	f04f 30ff 	mov.w	r0, #4294967295
   89800:	e6c0      	b.n	89584 <__sfvwrite_r+0x68>
   89802:	bf00      	nop
   89804:	7ffffc00 	.word	0x7ffffc00

00089808 <_fwalk_reent>:
   89808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8980c:	4607      	mov	r7, r0
   8980e:	4688      	mov	r8, r1
   89810:	f04f 0900 	mov.w	r9, #0
   89814:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   89818:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8981c:	3d01      	subs	r5, #1
   8981e:	d410      	bmi.n	89842 <_fwalk_reent+0x3a>
   89820:	89a3      	ldrh	r3, [r4, #12]
   89822:	3d01      	subs	r5, #1
   89824:	2b01      	cmp	r3, #1
   89826:	d908      	bls.n	8983a <_fwalk_reent+0x32>
   89828:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8982c:	3301      	adds	r3, #1
   8982e:	d004      	beq.n	8983a <_fwalk_reent+0x32>
   89830:	4621      	mov	r1, r4
   89832:	4638      	mov	r0, r7
   89834:	47c0      	blx	r8
   89836:	ea49 0900 	orr.w	r9, r9, r0
   8983a:	1c6b      	adds	r3, r5, #1
   8983c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   89840:	d1ee      	bne.n	89820 <_fwalk_reent+0x18>
   89842:	6836      	ldr	r6, [r6, #0]
   89844:	2e00      	cmp	r6, #0
   89846:	d1e7      	bne.n	89818 <_fwalk_reent+0x10>
   89848:	4648      	mov	r0, r9
   8984a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8984e:	bf00      	nop

00089850 <__locale_mb_cur_max>:
   89850:	4b01      	ldr	r3, [pc, #4]	; (89858 <__locale_mb_cur_max+0x8>)
   89852:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   89856:	4770      	bx	lr
   89858:	200007fc 	.word	0x200007fc

0008985c <_localeconv_r>:
   8985c:	4800      	ldr	r0, [pc, #0]	; (89860 <_localeconv_r+0x4>)
   8985e:	4770      	bx	lr
   89860:	200008ec 	.word	0x200008ec

00089864 <__retarget_lock_init_recursive>:
   89864:	4770      	bx	lr
   89866:	bf00      	nop

00089868 <__retarget_lock_close_recursive>:
   89868:	4770      	bx	lr
   8986a:	bf00      	nop

0008986c <__retarget_lock_acquire_recursive>:
   8986c:	4770      	bx	lr
   8986e:	bf00      	nop

00089870 <__retarget_lock_release_recursive>:
   89870:	4770      	bx	lr
   89872:	bf00      	nop

00089874 <__swhatbuf_r>:
   89874:	b570      	push	{r4, r5, r6, lr}
   89876:	460c      	mov	r4, r1
   89878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8987c:	4615      	mov	r5, r2
   8987e:	2900      	cmp	r1, #0
   89880:	461e      	mov	r6, r3
   89882:	b096      	sub	sp, #88	; 0x58
   89884:	db14      	blt.n	898b0 <__swhatbuf_r+0x3c>
   89886:	466a      	mov	r2, sp
   89888:	f001 fc20 	bl	8b0cc <_fstat_r>
   8988c:	2800      	cmp	r0, #0
   8988e:	db0f      	blt.n	898b0 <__swhatbuf_r+0x3c>
   89890:	9a01      	ldr	r2, [sp, #4]
   89892:	f44f 6380 	mov.w	r3, #1024	; 0x400
   89896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8989a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8989e:	fab2 f282 	clz	r2, r2
   898a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   898a6:	0952      	lsrs	r2, r2, #5
   898a8:	6032      	str	r2, [r6, #0]
   898aa:	602b      	str	r3, [r5, #0]
   898ac:	b016      	add	sp, #88	; 0x58
   898ae:	bd70      	pop	{r4, r5, r6, pc}
   898b0:	2300      	movs	r3, #0
   898b2:	89a1      	ldrh	r1, [r4, #12]
   898b4:	6033      	str	r3, [r6, #0]
   898b6:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   898ba:	d004      	beq.n	898c6 <__swhatbuf_r+0x52>
   898bc:	2240      	movs	r2, #64	; 0x40
   898be:	4618      	mov	r0, r3
   898c0:	602a      	str	r2, [r5, #0]
   898c2:	b016      	add	sp, #88	; 0x58
   898c4:	bd70      	pop	{r4, r5, r6, pc}
   898c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   898ca:	602b      	str	r3, [r5, #0]
   898cc:	b016      	add	sp, #88	; 0x58
   898ce:	bd70      	pop	{r4, r5, r6, pc}

000898d0 <__smakebuf_r>:
   898d0:	b570      	push	{r4, r5, r6, lr}
   898d2:	898b      	ldrh	r3, [r1, #12]
   898d4:	460c      	mov	r4, r1
   898d6:	079d      	lsls	r5, r3, #30
   898d8:	b082      	sub	sp, #8
   898da:	d507      	bpl.n	898ec <__smakebuf_r+0x1c>
   898dc:	2201      	movs	r2, #1
   898de:	f101 0343 	add.w	r3, r1, #67	; 0x43
   898e2:	614a      	str	r2, [r1, #20]
   898e4:	600b      	str	r3, [r1, #0]
   898e6:	610b      	str	r3, [r1, #16]
   898e8:	b002      	add	sp, #8
   898ea:	bd70      	pop	{r4, r5, r6, pc}
   898ec:	ab01      	add	r3, sp, #4
   898ee:	466a      	mov	r2, sp
   898f0:	4606      	mov	r6, r0
   898f2:	f7ff ffbf 	bl	89874 <__swhatbuf_r>
   898f6:	9900      	ldr	r1, [sp, #0]
   898f8:	4605      	mov	r5, r0
   898fa:	4630      	mov	r0, r6
   898fc:	f000 f83a 	bl	89974 <_malloc_r>
   89900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89904:	b170      	cbz	r0, 89924 <__smakebuf_r+0x54>
   89906:	4916      	ldr	r1, [pc, #88]	; (89960 <__smakebuf_r+0x90>)
   89908:	9a00      	ldr	r2, [sp, #0]
   8990a:	63f1      	str	r1, [r6, #60]	; 0x3c
   8990c:	9901      	ldr	r1, [sp, #4]
   8990e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   89912:	e9c4 0204 	strd	r0, r2, [r4, #16]
   89916:	81a3      	strh	r3, [r4, #12]
   89918:	6020      	str	r0, [r4, #0]
   8991a:	b989      	cbnz	r1, 89940 <__smakebuf_r+0x70>
   8991c:	432b      	orrs	r3, r5
   8991e:	81a3      	strh	r3, [r4, #12]
   89920:	b002      	add	sp, #8
   89922:	bd70      	pop	{r4, r5, r6, pc}
   89924:	059a      	lsls	r2, r3, #22
   89926:	d4df      	bmi.n	898e8 <__smakebuf_r+0x18>
   89928:	2101      	movs	r1, #1
   8992a:	f023 0303 	bic.w	r3, r3, #3
   8992e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   89932:	f043 0302 	orr.w	r3, r3, #2
   89936:	81a3      	strh	r3, [r4, #12]
   89938:	6161      	str	r1, [r4, #20]
   8993a:	6022      	str	r2, [r4, #0]
   8993c:	6122      	str	r2, [r4, #16]
   8993e:	e7d3      	b.n	898e8 <__smakebuf_r+0x18>
   89940:	4630      	mov	r0, r6
   89942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   89946:	f001 fbd7 	bl	8b0f8 <_isatty_r>
   8994a:	b910      	cbnz	r0, 89952 <__smakebuf_r+0x82>
   8994c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89950:	e7e4      	b.n	8991c <__smakebuf_r+0x4c>
   89952:	89a2      	ldrh	r2, [r4, #12]
   89954:	f022 0203 	bic.w	r2, r2, #3
   89958:	f042 0201 	orr.w	r2, r2, #1
   8995c:	b213      	sxth	r3, r2
   8995e:	e7dd      	b.n	8991c <__smakebuf_r+0x4c>
   89960:	000890bd 	.word	0x000890bd

00089964 <malloc>:
   89964:	4b02      	ldr	r3, [pc, #8]	; (89970 <malloc+0xc>)
   89966:	4601      	mov	r1, r0
   89968:	6818      	ldr	r0, [r3, #0]
   8996a:	f000 b803 	b.w	89974 <_malloc_r>
   8996e:	bf00      	nop
   89970:	200003c8 	.word	0x200003c8

00089974 <_malloc_r>:
   89974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89978:	f101 050b 	add.w	r5, r1, #11
   8997c:	2d16      	cmp	r5, #22
   8997e:	4606      	mov	r6, r0
   89980:	b083      	sub	sp, #12
   89982:	d824      	bhi.n	899ce <_malloc_r+0x5a>
   89984:	2910      	cmp	r1, #16
   89986:	f200 80b6 	bhi.w	89af6 <_malloc_r+0x182>
   8998a:	f000 fb61 	bl	8a050 <__malloc_lock>
   8998e:	2510      	movs	r5, #16
   89990:	2002      	movs	r0, #2
   89992:	2318      	movs	r3, #24
   89994:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 89e80 <_malloc_r+0x50c>
   89998:	4443      	add	r3, r8
   8999a:	685c      	ldr	r4, [r3, #4]
   8999c:	f1a3 0208 	sub.w	r2, r3, #8
   899a0:	4294      	cmp	r4, r2
   899a2:	f000 80b4 	beq.w	89b0e <_malloc_r+0x19a>
   899a6:	6863      	ldr	r3, [r4, #4]
   899a8:	68e1      	ldr	r1, [r4, #12]
   899aa:	f023 0303 	bic.w	r3, r3, #3
   899ae:	4423      	add	r3, r4
   899b0:	685a      	ldr	r2, [r3, #4]
   899b2:	68a5      	ldr	r5, [r4, #8]
   899b4:	f042 0201 	orr.w	r2, r2, #1
   899b8:	60e9      	str	r1, [r5, #12]
   899ba:	4630      	mov	r0, r6
   899bc:	608d      	str	r5, [r1, #8]
   899be:	3408      	adds	r4, #8
   899c0:	605a      	str	r2, [r3, #4]
   899c2:	f000 fb4b 	bl	8a05c <__malloc_unlock>
   899c6:	4620      	mov	r0, r4
   899c8:	b003      	add	sp, #12
   899ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   899ce:	f035 0507 	bics.w	r5, r5, #7
   899d2:	f100 8090 	bmi.w	89af6 <_malloc_r+0x182>
   899d6:	42a9      	cmp	r1, r5
   899d8:	f200 808d 	bhi.w	89af6 <_malloc_r+0x182>
   899dc:	f000 fb38 	bl	8a050 <__malloc_lock>
   899e0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   899e4:	f0c0 8185 	bcc.w	89cf2 <_malloc_r+0x37e>
   899e8:	0a6b      	lsrs	r3, r5, #9
   899ea:	f000 808b 	beq.w	89b04 <_malloc_r+0x190>
   899ee:	2b04      	cmp	r3, #4
   899f0:	f200 815b 	bhi.w	89caa <_malloc_r+0x336>
   899f4:	09ab      	lsrs	r3, r5, #6
   899f6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   899fa:	f103 0738 	add.w	r7, r3, #56	; 0x38
   899fe:	00c1      	lsls	r1, r0, #3
   89a00:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 89e80 <_malloc_r+0x50c>
   89a04:	4441      	add	r1, r8
   89a06:	684c      	ldr	r4, [r1, #4]
   89a08:	3908      	subs	r1, #8
   89a0a:	42a1      	cmp	r1, r4
   89a0c:	d106      	bne.n	89a1c <_malloc_r+0xa8>
   89a0e:	e00c      	b.n	89a2a <_malloc_r+0xb6>
   89a10:	2a00      	cmp	r2, #0
   89a12:	f280 8122 	bge.w	89c5a <_malloc_r+0x2e6>
   89a16:	68e4      	ldr	r4, [r4, #12]
   89a18:	42a1      	cmp	r1, r4
   89a1a:	d006      	beq.n	89a2a <_malloc_r+0xb6>
   89a1c:	6863      	ldr	r3, [r4, #4]
   89a1e:	f023 0303 	bic.w	r3, r3, #3
   89a22:	1b5a      	subs	r2, r3, r5
   89a24:	2a0f      	cmp	r2, #15
   89a26:	ddf3      	ble.n	89a10 <_malloc_r+0x9c>
   89a28:	4638      	mov	r0, r7
   89a2a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   89a2e:	f8df c454 	ldr.w	ip, [pc, #1108]	; 89e84 <_malloc_r+0x510>
   89a32:	4564      	cmp	r4, ip
   89a34:	d077      	beq.n	89b26 <_malloc_r+0x1b2>
   89a36:	6862      	ldr	r2, [r4, #4]
   89a38:	f022 0203 	bic.w	r2, r2, #3
   89a3c:	1b53      	subs	r3, r2, r5
   89a3e:	2b0f      	cmp	r3, #15
   89a40:	f300 8165 	bgt.w	89d0e <_malloc_r+0x39a>
   89a44:	2b00      	cmp	r3, #0
   89a46:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   89a4a:	f280 8156 	bge.w	89cfa <_malloc_r+0x386>
   89a4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89a52:	f080 8106 	bcs.w	89c62 <_malloc_r+0x2ee>
   89a56:	2101      	movs	r1, #1
   89a58:	08d3      	lsrs	r3, r2, #3
   89a5a:	0952      	lsrs	r2, r2, #5
   89a5c:	440b      	add	r3, r1
   89a5e:	fa01 f202 	lsl.w	r2, r1, r2
   89a62:	f8d8 1004 	ldr.w	r1, [r8, #4]
   89a66:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   89a6a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   89a6e:	430a      	orrs	r2, r1
   89a70:	f1ae 0108 	sub.w	r1, lr, #8
   89a74:	e9c4 7102 	strd	r7, r1, [r4, #8]
   89a78:	f8c8 2004 	str.w	r2, [r8, #4]
   89a7c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   89a80:	60fc      	str	r4, [r7, #12]
   89a82:	2101      	movs	r1, #1
   89a84:	1083      	asrs	r3, r0, #2
   89a86:	4099      	lsls	r1, r3
   89a88:	4291      	cmp	r1, r2
   89a8a:	d853      	bhi.n	89b34 <_malloc_r+0x1c0>
   89a8c:	4211      	tst	r1, r2
   89a8e:	d106      	bne.n	89a9e <_malloc_r+0x12a>
   89a90:	f020 0003 	bic.w	r0, r0, #3
   89a94:	0049      	lsls	r1, r1, #1
   89a96:	4211      	tst	r1, r2
   89a98:	f100 0004 	add.w	r0, r0, #4
   89a9c:	d0fa      	beq.n	89a94 <_malloc_r+0x120>
   89a9e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   89aa2:	464c      	mov	r4, r9
   89aa4:	4686      	mov	lr, r0
   89aa6:	68e7      	ldr	r7, [r4, #12]
   89aa8:	42bc      	cmp	r4, r7
   89aaa:	d107      	bne.n	89abc <_malloc_r+0x148>
   89aac:	e109      	b.n	89cc2 <_malloc_r+0x34e>
   89aae:	2b00      	cmp	r3, #0
   89ab0:	f280 8110 	bge.w	89cd4 <_malloc_r+0x360>
   89ab4:	68ff      	ldr	r7, [r7, #12]
   89ab6:	42bc      	cmp	r4, r7
   89ab8:	f000 8103 	beq.w	89cc2 <_malloc_r+0x34e>
   89abc:	687a      	ldr	r2, [r7, #4]
   89abe:	f022 0203 	bic.w	r2, r2, #3
   89ac2:	1b53      	subs	r3, r2, r5
   89ac4:	2b0f      	cmp	r3, #15
   89ac6:	ddf2      	ble.n	89aae <_malloc_r+0x13a>
   89ac8:	f045 0e01 	orr.w	lr, r5, #1
   89acc:	4630      	mov	r0, r6
   89ace:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   89ad2:	443d      	add	r5, r7
   89ad4:	f043 0601 	orr.w	r6, r3, #1
   89ad8:	f8c7 e004 	str.w	lr, [r7, #4]
   89adc:	60e1      	str	r1, [r4, #12]
   89ade:	608c      	str	r4, [r1, #8]
   89ae0:	e9c8 5504 	strd	r5, r5, [r8, #16]
   89ae4:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   89ae8:	606e      	str	r6, [r5, #4]
   89aea:	50bb      	str	r3, [r7, r2]
   89aec:	f000 fab6 	bl	8a05c <__malloc_unlock>
   89af0:	f107 0408 	add.w	r4, r7, #8
   89af4:	e002      	b.n	89afc <_malloc_r+0x188>
   89af6:	230c      	movs	r3, #12
   89af8:	2400      	movs	r4, #0
   89afa:	6033      	str	r3, [r6, #0]
   89afc:	4620      	mov	r0, r4
   89afe:	b003      	add	sp, #12
   89b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b04:	f44f 7100 	mov.w	r1, #512	; 0x200
   89b08:	2040      	movs	r0, #64	; 0x40
   89b0a:	273f      	movs	r7, #63	; 0x3f
   89b0c:	e778      	b.n	89a00 <_malloc_r+0x8c>
   89b0e:	68dc      	ldr	r4, [r3, #12]
   89b10:	42a3      	cmp	r3, r4
   89b12:	bf08      	it	eq
   89b14:	3002      	addeq	r0, #2
   89b16:	f47f af46 	bne.w	899a6 <_malloc_r+0x32>
   89b1a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   89b1e:	f8df c364 	ldr.w	ip, [pc, #868]	; 89e84 <_malloc_r+0x510>
   89b22:	4564      	cmp	r4, ip
   89b24:	d187      	bne.n	89a36 <_malloc_r+0xc2>
   89b26:	2101      	movs	r1, #1
   89b28:	f8d8 2004 	ldr.w	r2, [r8, #4]
   89b2c:	1083      	asrs	r3, r0, #2
   89b2e:	4099      	lsls	r1, r3
   89b30:	4291      	cmp	r1, r2
   89b32:	d9ab      	bls.n	89a8c <_malloc_r+0x118>
   89b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89b38:	6867      	ldr	r7, [r4, #4]
   89b3a:	f027 0703 	bic.w	r7, r7, #3
   89b3e:	42bd      	cmp	r5, r7
   89b40:	d802      	bhi.n	89b48 <_malloc_r+0x1d4>
   89b42:	1b7b      	subs	r3, r7, r5
   89b44:	2b0f      	cmp	r3, #15
   89b46:	dc77      	bgt.n	89c38 <_malloc_r+0x2c4>
   89b48:	f8df 933c 	ldr.w	r9, [pc, #828]	; 89e88 <_malloc_r+0x514>
   89b4c:	4bc8      	ldr	r3, [pc, #800]	; (89e70 <_malloc_r+0x4fc>)
   89b4e:	f8d9 2000 	ldr.w	r2, [r9]
   89b52:	681b      	ldr	r3, [r3, #0]
   89b54:	3201      	adds	r2, #1
   89b56:	442b      	add	r3, r5
   89b58:	eb04 0a07 	add.w	sl, r4, r7
   89b5c:	f000 8124 	beq.w	89da8 <_malloc_r+0x434>
   89b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   89b64:	330f      	adds	r3, #15
   89b66:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   89b6a:	f02b 0b0f 	bic.w	fp, fp, #15
   89b6e:	4659      	mov	r1, fp
   89b70:	4630      	mov	r0, r6
   89b72:	f001 f81d 	bl	8abb0 <_sbrk_r>
   89b76:	1c41      	adds	r1, r0, #1
   89b78:	4602      	mov	r2, r0
   89b7a:	f000 80e1 	beq.w	89d40 <_malloc_r+0x3cc>
   89b7e:	4582      	cmp	sl, r0
   89b80:	f200 80dc 	bhi.w	89d3c <_malloc_r+0x3c8>
   89b84:	4bbb      	ldr	r3, [pc, #748]	; (89e74 <_malloc_r+0x500>)
   89b86:	6819      	ldr	r1, [r3, #0]
   89b88:	4459      	add	r1, fp
   89b8a:	4608      	mov	r0, r1
   89b8c:	6019      	str	r1, [r3, #0]
   89b8e:	f000 8141 	beq.w	89e14 <_malloc_r+0x4a0>
   89b92:	f8d9 1000 	ldr.w	r1, [r9]
   89b96:	9301      	str	r3, [sp, #4]
   89b98:	3101      	adds	r1, #1
   89b9a:	bf1b      	ittet	ne
   89b9c:	eba2 0a0a 	subne.w	sl, r2, sl
   89ba0:	4450      	addne	r0, sl
   89ba2:	f8c9 2000 	streq.w	r2, [r9]
   89ba6:	6018      	strne	r0, [r3, #0]
   89ba8:	f012 0a07 	ands.w	sl, r2, #7
   89bac:	f000 810a 	beq.w	89dc4 <_malloc_r+0x450>
   89bb0:	f1ca 0108 	rsb	r1, sl, #8
   89bb4:	440a      	add	r2, r1
   89bb6:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   89bba:	4493      	add	fp, r2
   89bbc:	3108      	adds	r1, #8
   89bbe:	eba1 010b 	sub.w	r1, r1, fp
   89bc2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   89bc6:	4649      	mov	r1, r9
   89bc8:	4630      	mov	r0, r6
   89bca:	9200      	str	r2, [sp, #0]
   89bcc:	f000 fff0 	bl	8abb0 <_sbrk_r>
   89bd0:	1c42      	adds	r2, r0, #1
   89bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
   89bd6:	f000 8143 	beq.w	89e60 <_malloc_r+0x4ec>
   89bda:	1a80      	subs	r0, r0, r2
   89bdc:	eb00 0b09 	add.w	fp, r0, r9
   89be0:	6819      	ldr	r1, [r3, #0]
   89be2:	f04b 0001 	orr.w	r0, fp, #1
   89be6:	4449      	add	r1, r9
   89be8:	4544      	cmp	r4, r8
   89bea:	f8c8 2008 	str.w	r2, [r8, #8]
   89bee:	6019      	str	r1, [r3, #0]
   89bf0:	6050      	str	r0, [r2, #4]
   89bf2:	f000 811c 	beq.w	89e2e <_malloc_r+0x4ba>
   89bf6:	2f0f      	cmp	r7, #15
   89bf8:	f240 811b 	bls.w	89e32 <_malloc_r+0x4be>
   89bfc:	f04f 0c05 	mov.w	ip, #5
   89c00:	6860      	ldr	r0, [r4, #4]
   89c02:	3f0c      	subs	r7, #12
   89c04:	f027 0707 	bic.w	r7, r7, #7
   89c08:	f000 0001 	and.w	r0, r0, #1
   89c0c:	4338      	orrs	r0, r7
   89c0e:	eb04 0e07 	add.w	lr, r4, r7
   89c12:	2f0f      	cmp	r7, #15
   89c14:	6060      	str	r0, [r4, #4]
   89c16:	e9ce cc01 	strd	ip, ip, [lr, #4]
   89c1a:	f200 8137 	bhi.w	89e8c <_malloc_r+0x518>
   89c1e:	4614      	mov	r4, r2
   89c20:	6850      	ldr	r0, [r2, #4]
   89c22:	4b95      	ldr	r3, [pc, #596]	; (89e78 <_malloc_r+0x504>)
   89c24:	681a      	ldr	r2, [r3, #0]
   89c26:	428a      	cmp	r2, r1
   89c28:	bf38      	it	cc
   89c2a:	6019      	strcc	r1, [r3, #0]
   89c2c:	4b93      	ldr	r3, [pc, #588]	; (89e7c <_malloc_r+0x508>)
   89c2e:	681a      	ldr	r2, [r3, #0]
   89c30:	428a      	cmp	r2, r1
   89c32:	bf38      	it	cc
   89c34:	6019      	strcc	r1, [r3, #0]
   89c36:	e086      	b.n	89d46 <_malloc_r+0x3d2>
   89c38:	f045 0201 	orr.w	r2, r5, #1
   89c3c:	f043 0301 	orr.w	r3, r3, #1
   89c40:	4425      	add	r5, r4
   89c42:	6062      	str	r2, [r4, #4]
   89c44:	4630      	mov	r0, r6
   89c46:	f8c8 5008 	str.w	r5, [r8, #8]
   89c4a:	3408      	adds	r4, #8
   89c4c:	606b      	str	r3, [r5, #4]
   89c4e:	f000 fa05 	bl	8a05c <__malloc_unlock>
   89c52:	4620      	mov	r0, r4
   89c54:	b003      	add	sp, #12
   89c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89c5a:	4423      	add	r3, r4
   89c5c:	685a      	ldr	r2, [r3, #4]
   89c5e:	68e1      	ldr	r1, [r4, #12]
   89c60:	e6a7      	b.n	899b2 <_malloc_r+0x3e>
   89c62:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   89c66:	ea4f 2352 	mov.w	r3, r2, lsr #9
   89c6a:	d361      	bcc.n	89d30 <_malloc_r+0x3bc>
   89c6c:	2b14      	cmp	r3, #20
   89c6e:	f200 80ba 	bhi.w	89de6 <_malloc_r+0x472>
   89c72:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   89c76:	00c9      	lsls	r1, r1, #3
   89c78:	335b      	adds	r3, #91	; 0x5b
   89c7a:	eb08 0701 	add.w	r7, r8, r1
   89c7e:	f858 1001 	ldr.w	r1, [r8, r1]
   89c82:	3f08      	subs	r7, #8
   89c84:	428f      	cmp	r7, r1
   89c86:	f000 8092 	beq.w	89dae <_malloc_r+0x43a>
   89c8a:	684b      	ldr	r3, [r1, #4]
   89c8c:	f023 0303 	bic.w	r3, r3, #3
   89c90:	4293      	cmp	r3, r2
   89c92:	d902      	bls.n	89c9a <_malloc_r+0x326>
   89c94:	6889      	ldr	r1, [r1, #8]
   89c96:	428f      	cmp	r7, r1
   89c98:	d1f7      	bne.n	89c8a <_malloc_r+0x316>
   89c9a:	68cf      	ldr	r7, [r1, #12]
   89c9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   89ca0:	e9c4 1702 	strd	r1, r7, [r4, #8]
   89ca4:	60bc      	str	r4, [r7, #8]
   89ca6:	60cc      	str	r4, [r1, #12]
   89ca8:	e6eb      	b.n	89a82 <_malloc_r+0x10e>
   89caa:	2b14      	cmp	r3, #20
   89cac:	d959      	bls.n	89d62 <_malloc_r+0x3ee>
   89cae:	2b54      	cmp	r3, #84	; 0x54
   89cb0:	f200 80a1 	bhi.w	89df6 <_malloc_r+0x482>
   89cb4:	0b2b      	lsrs	r3, r5, #12
   89cb6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   89cba:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   89cbe:	00c1      	lsls	r1, r0, #3
   89cc0:	e69e      	b.n	89a00 <_malloc_r+0x8c>
   89cc2:	f10e 0e01 	add.w	lr, lr, #1
   89cc6:	f01e 0f03 	tst.w	lr, #3
   89cca:	f104 0408 	add.w	r4, r4, #8
   89cce:	f47f aeea 	bne.w	89aa6 <_malloc_r+0x132>
   89cd2:	e051      	b.n	89d78 <_malloc_r+0x404>
   89cd4:	463c      	mov	r4, r7
   89cd6:	443a      	add	r2, r7
   89cd8:	6853      	ldr	r3, [r2, #4]
   89cda:	68f9      	ldr	r1, [r7, #12]
   89cdc:	f854 5f08 	ldr.w	r5, [r4, #8]!
   89ce0:	f043 0301 	orr.w	r3, r3, #1
   89ce4:	6053      	str	r3, [r2, #4]
   89ce6:	4630      	mov	r0, r6
   89ce8:	60e9      	str	r1, [r5, #12]
   89cea:	608d      	str	r5, [r1, #8]
   89cec:	f000 f9b6 	bl	8a05c <__malloc_unlock>
   89cf0:	e704      	b.n	89afc <_malloc_r+0x188>
   89cf2:	08e8      	lsrs	r0, r5, #3
   89cf4:	f105 0308 	add.w	r3, r5, #8
   89cf8:	e64c      	b.n	89994 <_malloc_r+0x20>
   89cfa:	4422      	add	r2, r4
   89cfc:	6853      	ldr	r3, [r2, #4]
   89cfe:	4630      	mov	r0, r6
   89d00:	f043 0301 	orr.w	r3, r3, #1
   89d04:	6053      	str	r3, [r2, #4]
   89d06:	3408      	adds	r4, #8
   89d08:	f000 f9a8 	bl	8a05c <__malloc_unlock>
   89d0c:	e6f6      	b.n	89afc <_malloc_r+0x188>
   89d0e:	f045 0701 	orr.w	r7, r5, #1
   89d12:	f043 0101 	orr.w	r1, r3, #1
   89d16:	4425      	add	r5, r4
   89d18:	6067      	str	r7, [r4, #4]
   89d1a:	4630      	mov	r0, r6
   89d1c:	e9c8 5504 	strd	r5, r5, [r8, #16]
   89d20:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   89d24:	6069      	str	r1, [r5, #4]
   89d26:	50a3      	str	r3, [r4, r2]
   89d28:	f000 f998 	bl	8a05c <__malloc_unlock>
   89d2c:	3408      	adds	r4, #8
   89d2e:	e6e5      	b.n	89afc <_malloc_r+0x188>
   89d30:	0993      	lsrs	r3, r2, #6
   89d32:	f103 0139 	add.w	r1, r3, #57	; 0x39
   89d36:	00c9      	lsls	r1, r1, #3
   89d38:	3338      	adds	r3, #56	; 0x38
   89d3a:	e79e      	b.n	89c7a <_malloc_r+0x306>
   89d3c:	4544      	cmp	r4, r8
   89d3e:	d064      	beq.n	89e0a <_malloc_r+0x496>
   89d40:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89d44:	6860      	ldr	r0, [r4, #4]
   89d46:	f020 0b03 	bic.w	fp, r0, #3
   89d4a:	455d      	cmp	r5, fp
   89d4c:	ebab 0305 	sub.w	r3, fp, r5
   89d50:	d802      	bhi.n	89d58 <_malloc_r+0x3e4>
   89d52:	2b0f      	cmp	r3, #15
   89d54:	f73f af70 	bgt.w	89c38 <_malloc_r+0x2c4>
   89d58:	4630      	mov	r0, r6
   89d5a:	f000 f97f 	bl	8a05c <__malloc_unlock>
   89d5e:	2400      	movs	r4, #0
   89d60:	e6cc      	b.n	89afc <_malloc_r+0x188>
   89d62:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   89d66:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   89d6a:	00c1      	lsls	r1, r0, #3
   89d6c:	e648      	b.n	89a00 <_malloc_r+0x8c>
   89d6e:	f859 3908 	ldr.w	r3, [r9], #-8
   89d72:	454b      	cmp	r3, r9
   89d74:	f040 80a9 	bne.w	89eca <_malloc_r+0x556>
   89d78:	f010 0f03 	tst.w	r0, #3
   89d7c:	f100 30ff 	add.w	r0, r0, #4294967295
   89d80:	d1f5      	bne.n	89d6e <_malloc_r+0x3fa>
   89d82:	f8d8 3004 	ldr.w	r3, [r8, #4]
   89d86:	ea23 0301 	bic.w	r3, r3, r1
   89d8a:	f8c8 3004 	str.w	r3, [r8, #4]
   89d8e:	0049      	lsls	r1, r1, #1
   89d90:	4299      	cmp	r1, r3
   89d92:	f63f aecf 	bhi.w	89b34 <_malloc_r+0x1c0>
   89d96:	b919      	cbnz	r1, 89da0 <_malloc_r+0x42c>
   89d98:	e6cc      	b.n	89b34 <_malloc_r+0x1c0>
   89d9a:	0049      	lsls	r1, r1, #1
   89d9c:	f10e 0e04 	add.w	lr, lr, #4
   89da0:	4219      	tst	r1, r3
   89da2:	d0fa      	beq.n	89d9a <_malloc_r+0x426>
   89da4:	4670      	mov	r0, lr
   89da6:	e67a      	b.n	89a9e <_malloc_r+0x12a>
   89da8:	f103 0b10 	add.w	fp, r3, #16
   89dac:	e6df      	b.n	89b6e <_malloc_r+0x1fa>
   89dae:	f04f 0e01 	mov.w	lr, #1
   89db2:	109a      	asrs	r2, r3, #2
   89db4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   89db8:	fa0e f202 	lsl.w	r2, lr, r2
   89dbc:	431a      	orrs	r2, r3
   89dbe:	f8c8 2004 	str.w	r2, [r8, #4]
   89dc2:	e76d      	b.n	89ca0 <_malloc_r+0x32c>
   89dc4:	eb02 010b 	add.w	r1, r2, fp
   89dc8:	4249      	negs	r1, r1
   89dca:	f3c1 090b 	ubfx	r9, r1, #0, #12
   89dce:	4649      	mov	r1, r9
   89dd0:	4630      	mov	r0, r6
   89dd2:	9200      	str	r2, [sp, #0]
   89dd4:	f000 feec 	bl	8abb0 <_sbrk_r>
   89dd8:	1c43      	adds	r3, r0, #1
   89dda:	e9dd 2300 	ldrd	r2, r3, [sp]
   89dde:	f47f aefc 	bne.w	89bda <_malloc_r+0x266>
   89de2:	46d1      	mov	r9, sl
   89de4:	e6fc      	b.n	89be0 <_malloc_r+0x26c>
   89de6:	2b54      	cmp	r3, #84	; 0x54
   89de8:	d826      	bhi.n	89e38 <_malloc_r+0x4c4>
   89dea:	0b13      	lsrs	r3, r2, #12
   89dec:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   89df0:	00c9      	lsls	r1, r1, #3
   89df2:	336e      	adds	r3, #110	; 0x6e
   89df4:	e741      	b.n	89c7a <_malloc_r+0x306>
   89df6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89dfa:	d826      	bhi.n	89e4a <_malloc_r+0x4d6>
   89dfc:	0beb      	lsrs	r3, r5, #15
   89dfe:	f103 0078 	add.w	r0, r3, #120	; 0x78
   89e02:	f103 0777 	add.w	r7, r3, #119	; 0x77
   89e06:	00c1      	lsls	r1, r0, #3
   89e08:	e5fa      	b.n	89a00 <_malloc_r+0x8c>
   89e0a:	4b1a      	ldr	r3, [pc, #104]	; (89e74 <_malloc_r+0x500>)
   89e0c:	6818      	ldr	r0, [r3, #0]
   89e0e:	4458      	add	r0, fp
   89e10:	6018      	str	r0, [r3, #0]
   89e12:	e6be      	b.n	89b92 <_malloc_r+0x21e>
   89e14:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   89e18:	f1bc 0f00 	cmp.w	ip, #0
   89e1c:	f47f aeb9 	bne.w	89b92 <_malloc_r+0x21e>
   89e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89e24:	44bb      	add	fp, r7
   89e26:	f04b 0001 	orr.w	r0, fp, #1
   89e2a:	6060      	str	r0, [r4, #4]
   89e2c:	e6f9      	b.n	89c22 <_malloc_r+0x2ae>
   89e2e:	4614      	mov	r4, r2
   89e30:	e6f7      	b.n	89c22 <_malloc_r+0x2ae>
   89e32:	2301      	movs	r3, #1
   89e34:	6053      	str	r3, [r2, #4]
   89e36:	e78f      	b.n	89d58 <_malloc_r+0x3e4>
   89e38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89e3c:	d832      	bhi.n	89ea4 <_malloc_r+0x530>
   89e3e:	0bd3      	lsrs	r3, r2, #15
   89e40:	f103 0178 	add.w	r1, r3, #120	; 0x78
   89e44:	00c9      	lsls	r1, r1, #3
   89e46:	3377      	adds	r3, #119	; 0x77
   89e48:	e717      	b.n	89c7a <_malloc_r+0x306>
   89e4a:	f240 5254 	movw	r2, #1364	; 0x554
   89e4e:	4293      	cmp	r3, r2
   89e50:	d832      	bhi.n	89eb8 <_malloc_r+0x544>
   89e52:	0cab      	lsrs	r3, r5, #18
   89e54:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   89e58:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   89e5c:	00c1      	lsls	r1, r0, #3
   89e5e:	e5cf      	b.n	89a00 <_malloc_r+0x8c>
   89e60:	f1aa 0a08 	sub.w	sl, sl, #8
   89e64:	44d3      	add	fp, sl
   89e66:	f04f 0900 	mov.w	r9, #0
   89e6a:	ebab 0b02 	sub.w	fp, fp, r2
   89e6e:	e6b7      	b.n	89be0 <_malloc_r+0x26c>
   89e70:	200010b8 	.word	0x200010b8
   89e74:	20001088 	.word	0x20001088
   89e78:	200010b0 	.word	0x200010b0
   89e7c:	200010b4 	.word	0x200010b4
   89e80:	20000968 	.word	0x20000968
   89e84:	20000970 	.word	0x20000970
   89e88:	20000d70 	.word	0x20000d70
   89e8c:	f104 0108 	add.w	r1, r4, #8
   89e90:	4630      	mov	r0, r6
   89e92:	9300      	str	r3, [sp, #0]
   89e94:	f7ff fa3c 	bl	89310 <_free_r>
   89e98:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89e9c:	9b00      	ldr	r3, [sp, #0]
   89e9e:	6860      	ldr	r0, [r4, #4]
   89ea0:	6819      	ldr	r1, [r3, #0]
   89ea2:	e6be      	b.n	89c22 <_malloc_r+0x2ae>
   89ea4:	f240 5154 	movw	r1, #1364	; 0x554
   89ea8:	428b      	cmp	r3, r1
   89eaa:	d80a      	bhi.n	89ec2 <_malloc_r+0x54e>
   89eac:	0c93      	lsrs	r3, r2, #18
   89eae:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   89eb2:	00c9      	lsls	r1, r1, #3
   89eb4:	337c      	adds	r3, #124	; 0x7c
   89eb6:	e6e0      	b.n	89c7a <_malloc_r+0x306>
   89eb8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   89ebc:	207f      	movs	r0, #127	; 0x7f
   89ebe:	277e      	movs	r7, #126	; 0x7e
   89ec0:	e59e      	b.n	89a00 <_malloc_r+0x8c>
   89ec2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   89ec6:	237e      	movs	r3, #126	; 0x7e
   89ec8:	e6d7      	b.n	89c7a <_malloc_r+0x306>
   89eca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   89ece:	e75e      	b.n	89d8e <_malloc_r+0x41a>

00089ed0 <__ascii_mbtowc>:
   89ed0:	b082      	sub	sp, #8
   89ed2:	b149      	cbz	r1, 89ee8 <__ascii_mbtowc+0x18>
   89ed4:	b15a      	cbz	r2, 89eee <__ascii_mbtowc+0x1e>
   89ed6:	b16b      	cbz	r3, 89ef4 <__ascii_mbtowc+0x24>
   89ed8:	7813      	ldrb	r3, [r2, #0]
   89eda:	600b      	str	r3, [r1, #0]
   89edc:	7812      	ldrb	r2, [r2, #0]
   89ede:	1e10      	subs	r0, r2, #0
   89ee0:	bf18      	it	ne
   89ee2:	2001      	movne	r0, #1
   89ee4:	b002      	add	sp, #8
   89ee6:	4770      	bx	lr
   89ee8:	a901      	add	r1, sp, #4
   89eea:	2a00      	cmp	r2, #0
   89eec:	d1f3      	bne.n	89ed6 <__ascii_mbtowc+0x6>
   89eee:	4610      	mov	r0, r2
   89ef0:	b002      	add	sp, #8
   89ef2:	4770      	bx	lr
   89ef4:	f06f 0001 	mvn.w	r0, #1
   89ef8:	e7f4      	b.n	89ee4 <__ascii_mbtowc+0x14>
   89efa:	bf00      	nop

00089efc <memchr>:
   89efc:	b470      	push	{r4, r5, r6}
   89efe:	0784      	lsls	r4, r0, #30
   89f00:	b2cd      	uxtb	r5, r1
   89f02:	d012      	beq.n	89f2a <memchr+0x2e>
   89f04:	4603      	mov	r3, r0
   89f06:	1e54      	subs	r4, r2, #1
   89f08:	b92a      	cbnz	r2, 89f16 <memchr+0x1a>
   89f0a:	e00b      	b.n	89f24 <memchr+0x28>
   89f0c:	079a      	lsls	r2, r3, #30
   89f0e:	4618      	mov	r0, r3
   89f10:	d00c      	beq.n	89f2c <memchr+0x30>
   89f12:	3c01      	subs	r4, #1
   89f14:	d306      	bcc.n	89f24 <memchr+0x28>
   89f16:	4618      	mov	r0, r3
   89f18:	f813 2b01 	ldrb.w	r2, [r3], #1
   89f1c:	42aa      	cmp	r2, r5
   89f1e:	d1f5      	bne.n	89f0c <memchr+0x10>
   89f20:	bc70      	pop	{r4, r5, r6}
   89f22:	4770      	bx	lr
   89f24:	2000      	movs	r0, #0
   89f26:	bc70      	pop	{r4, r5, r6}
   89f28:	4770      	bx	lr
   89f2a:	4614      	mov	r4, r2
   89f2c:	2c03      	cmp	r4, #3
   89f2e:	d80d      	bhi.n	89f4c <memchr+0x50>
   89f30:	2c00      	cmp	r4, #0
   89f32:	d0f7      	beq.n	89f24 <memchr+0x28>
   89f34:	4602      	mov	r2, r0
   89f36:	1903      	adds	r3, r0, r4
   89f38:	e001      	b.n	89f3e <memchr+0x42>
   89f3a:	429a      	cmp	r2, r3
   89f3c:	d0f2      	beq.n	89f24 <memchr+0x28>
   89f3e:	4610      	mov	r0, r2
   89f40:	f812 1b01 	ldrb.w	r1, [r2], #1
   89f44:	42a9      	cmp	r1, r5
   89f46:	d1f8      	bne.n	89f3a <memchr+0x3e>
   89f48:	bc70      	pop	{r4, r5, r6}
   89f4a:	4770      	bx	lr
   89f4c:	4606      	mov	r6, r0
   89f4e:	020a      	lsls	r2, r1, #8
   89f50:	b292      	uxth	r2, r2
   89f52:	432a      	orrs	r2, r5
   89f54:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   89f58:	6833      	ldr	r3, [r6, #0]
   89f5a:	4630      	mov	r0, r6
   89f5c:	4053      	eors	r3, r2
   89f5e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   89f62:	ea21 0303 	bic.w	r3, r1, r3
   89f66:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   89f6a:	f106 0604 	add.w	r6, r6, #4
   89f6e:	d1e1      	bne.n	89f34 <memchr+0x38>
   89f70:	3c04      	subs	r4, #4
   89f72:	2c03      	cmp	r4, #3
   89f74:	4630      	mov	r0, r6
   89f76:	d8ef      	bhi.n	89f58 <memchr+0x5c>
   89f78:	e7da      	b.n	89f30 <memchr+0x34>
   89f7a:	bf00      	nop

00089f7c <memmove>:
   89f7c:	4288      	cmp	r0, r1
   89f7e:	b4f0      	push	{r4, r5, r6, r7}
   89f80:	d90d      	bls.n	89f9e <memmove+0x22>
   89f82:	188b      	adds	r3, r1, r2
   89f84:	4283      	cmp	r3, r0
   89f86:	d90a      	bls.n	89f9e <memmove+0x22>
   89f88:	1884      	adds	r4, r0, r2
   89f8a:	b132      	cbz	r2, 89f9a <memmove+0x1e>
   89f8c:	4622      	mov	r2, r4
   89f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   89f92:	4299      	cmp	r1, r3
   89f94:	f802 4d01 	strb.w	r4, [r2, #-1]!
   89f98:	d1f9      	bne.n	89f8e <memmove+0x12>
   89f9a:	bcf0      	pop	{r4, r5, r6, r7}
   89f9c:	4770      	bx	lr
   89f9e:	2a0f      	cmp	r2, #15
   89fa0:	d80e      	bhi.n	89fc0 <memmove+0x44>
   89fa2:	4603      	mov	r3, r0
   89fa4:	1e54      	subs	r4, r2, #1
   89fa6:	2a00      	cmp	r2, #0
   89fa8:	d0f7      	beq.n	89f9a <memmove+0x1e>
   89faa:	3401      	adds	r4, #1
   89fac:	440c      	add	r4, r1
   89fae:	3b01      	subs	r3, #1
   89fb0:	f811 2b01 	ldrb.w	r2, [r1], #1
   89fb4:	42a1      	cmp	r1, r4
   89fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
   89fba:	d1f9      	bne.n	89fb0 <memmove+0x34>
   89fbc:	bcf0      	pop	{r4, r5, r6, r7}
   89fbe:	4770      	bx	lr
   89fc0:	ea40 0301 	orr.w	r3, r0, r1
   89fc4:	079b      	lsls	r3, r3, #30
   89fc6:	d13e      	bne.n	8a046 <memmove+0xca>
   89fc8:	f1a2 0310 	sub.w	r3, r2, #16
   89fcc:	f023 040f 	bic.w	r4, r3, #15
   89fd0:	f101 0720 	add.w	r7, r1, #32
   89fd4:	4427      	add	r7, r4
   89fd6:	091b      	lsrs	r3, r3, #4
   89fd8:	f101 0410 	add.w	r4, r1, #16
   89fdc:	f100 0510 	add.w	r5, r0, #16
   89fe0:	f854 6c10 	ldr.w	r6, [r4, #-16]
   89fe4:	3410      	adds	r4, #16
   89fe6:	f845 6c10 	str.w	r6, [r5, #-16]
   89fea:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   89fee:	3510      	adds	r5, #16
   89ff0:	f845 6c1c 	str.w	r6, [r5, #-28]
   89ff4:	f854 6c18 	ldr.w	r6, [r4, #-24]
   89ff8:	f845 6c18 	str.w	r6, [r5, #-24]
   89ffc:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8a000:	42bc      	cmp	r4, r7
   8a002:	f845 6c14 	str.w	r6, [r5, #-20]
   8a006:	d1eb      	bne.n	89fe0 <memmove+0x64>
   8a008:	3301      	adds	r3, #1
   8a00a:	f012 0f0c 	tst.w	r2, #12
   8a00e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8a012:	f002 040f 	and.w	r4, r2, #15
   8a016:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8a01a:	d017      	beq.n	8a04c <memmove+0xd0>
   8a01c:	460e      	mov	r6, r1
   8a01e:	3c04      	subs	r4, #4
   8a020:	f024 0c03 	bic.w	ip, r4, #3
   8a024:	08a5      	lsrs	r5, r4, #2
   8a026:	449c      	add	ip, r3
   8a028:	1f1c      	subs	r4, r3, #4
   8a02a:	f856 7b04 	ldr.w	r7, [r6], #4
   8a02e:	f844 7f04 	str.w	r7, [r4, #4]!
   8a032:	4564      	cmp	r4, ip
   8a034:	d1f9      	bne.n	8a02a <memmove+0xae>
   8a036:	1c6c      	adds	r4, r5, #1
   8a038:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8a03c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8a040:	f002 0203 	and.w	r2, r2, #3
   8a044:	e7ae      	b.n	89fa4 <memmove+0x28>
   8a046:	4603      	mov	r3, r0
   8a048:	1e54      	subs	r4, r2, #1
   8a04a:	e7ae      	b.n	89faa <memmove+0x2e>
   8a04c:	4622      	mov	r2, r4
   8a04e:	e7a9      	b.n	89fa4 <memmove+0x28>

0008a050 <__malloc_lock>:
   8a050:	4801      	ldr	r0, [pc, #4]	; (8a058 <__malloc_lock+0x8>)
   8a052:	f7ff bc0b 	b.w	8986c <__retarget_lock_acquire_recursive>
   8a056:	bf00      	nop
   8a058:	20001988 	.word	0x20001988

0008a05c <__malloc_unlock>:
   8a05c:	4801      	ldr	r0, [pc, #4]	; (8a064 <__malloc_unlock+0x8>)
   8a05e:	f7ff bc07 	b.w	89870 <__retarget_lock_release_recursive>
   8a062:	bf00      	nop
   8a064:	20001988 	.word	0x20001988

0008a068 <_Balloc>:
   8a068:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a06a:	b570      	push	{r4, r5, r6, lr}
   8a06c:	4605      	mov	r5, r0
   8a06e:	460c      	mov	r4, r1
   8a070:	b14b      	cbz	r3, 8a086 <_Balloc+0x1e>
   8a072:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8a076:	b180      	cbz	r0, 8a09a <_Balloc+0x32>
   8a078:	6802      	ldr	r2, [r0, #0]
   8a07a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8a07e:	2300      	movs	r3, #0
   8a080:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8a084:	bd70      	pop	{r4, r5, r6, pc}
   8a086:	2221      	movs	r2, #33	; 0x21
   8a088:	2104      	movs	r1, #4
   8a08a:	f000 ff63 	bl	8af54 <_calloc_r>
   8a08e:	4603      	mov	r3, r0
   8a090:	64e8      	str	r0, [r5, #76]	; 0x4c
   8a092:	2800      	cmp	r0, #0
   8a094:	d1ed      	bne.n	8a072 <_Balloc+0xa>
   8a096:	2000      	movs	r0, #0
   8a098:	bd70      	pop	{r4, r5, r6, pc}
   8a09a:	2101      	movs	r1, #1
   8a09c:	fa01 f604 	lsl.w	r6, r1, r4
   8a0a0:	1d72      	adds	r2, r6, #5
   8a0a2:	4628      	mov	r0, r5
   8a0a4:	0092      	lsls	r2, r2, #2
   8a0a6:	f000 ff55 	bl	8af54 <_calloc_r>
   8a0aa:	2800      	cmp	r0, #0
   8a0ac:	d0f3      	beq.n	8a096 <_Balloc+0x2e>
   8a0ae:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8a0b2:	e7e4      	b.n	8a07e <_Balloc+0x16>

0008a0b4 <_Bfree>:
   8a0b4:	b131      	cbz	r1, 8a0c4 <_Bfree+0x10>
   8a0b6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a0b8:	684a      	ldr	r2, [r1, #4]
   8a0ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8a0be:	6008      	str	r0, [r1, #0]
   8a0c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8a0c4:	4770      	bx	lr
   8a0c6:	bf00      	nop

0008a0c8 <__multadd>:
   8a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a0cc:	4680      	mov	r8, r0
   8a0ce:	461c      	mov	r4, r3
   8a0d0:	2000      	movs	r0, #0
   8a0d2:	460f      	mov	r7, r1
   8a0d4:	690e      	ldr	r6, [r1, #16]
   8a0d6:	3114      	adds	r1, #20
   8a0d8:	680d      	ldr	r5, [r1, #0]
   8a0da:	3001      	adds	r0, #1
   8a0dc:	b2ab      	uxth	r3, r5
   8a0de:	fb02 4303 	mla	r3, r2, r3, r4
   8a0e2:	0c2c      	lsrs	r4, r5, #16
   8a0e4:	0c1d      	lsrs	r5, r3, #16
   8a0e6:	fb02 5404 	mla	r4, r2, r4, r5
   8a0ea:	b29b      	uxth	r3, r3
   8a0ec:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8a0f0:	4286      	cmp	r6, r0
   8a0f2:	f841 3b04 	str.w	r3, [r1], #4
   8a0f6:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8a0fa:	dced      	bgt.n	8a0d8 <__multadd+0x10>
   8a0fc:	b13c      	cbz	r4, 8a10e <__multadd+0x46>
   8a0fe:	68bb      	ldr	r3, [r7, #8]
   8a100:	42b3      	cmp	r3, r6
   8a102:	dd07      	ble.n	8a114 <__multadd+0x4c>
   8a104:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8a108:	3601      	adds	r6, #1
   8a10a:	615c      	str	r4, [r3, #20]
   8a10c:	613e      	str	r6, [r7, #16]
   8a10e:	4638      	mov	r0, r7
   8a110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a114:	6879      	ldr	r1, [r7, #4]
   8a116:	4640      	mov	r0, r8
   8a118:	3101      	adds	r1, #1
   8a11a:	f7ff ffa5 	bl	8a068 <_Balloc>
   8a11e:	4605      	mov	r5, r0
   8a120:	b1b0      	cbz	r0, 8a150 <__multadd+0x88>
   8a122:	693a      	ldr	r2, [r7, #16]
   8a124:	f107 010c 	add.w	r1, r7, #12
   8a128:	3202      	adds	r2, #2
   8a12a:	0092      	lsls	r2, r2, #2
   8a12c:	300c      	adds	r0, #12
   8a12e:	f7fa ff89 	bl	85044 <memcpy>
   8a132:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8a136:	687a      	ldr	r2, [r7, #4]
   8a138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a13c:	6039      	str	r1, [r7, #0]
   8a13e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8a142:	462f      	mov	r7, r5
   8a144:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8a148:	3601      	adds	r6, #1
   8a14a:	615c      	str	r4, [r3, #20]
   8a14c:	613e      	str	r6, [r7, #16]
   8a14e:	e7de      	b.n	8a10e <__multadd+0x46>
   8a150:	4602      	mov	r2, r0
   8a152:	21b5      	movs	r1, #181	; 0xb5
   8a154:	4b01      	ldr	r3, [pc, #4]	; (8a15c <__multadd+0x94>)
   8a156:	4802      	ldr	r0, [pc, #8]	; (8a160 <__multadd+0x98>)
   8a158:	f000 fede 	bl	8af18 <__assert_func>
   8a15c:	0008c030 	.word	0x0008c030
   8a160:	0008c0d0 	.word	0x0008c0d0

0008a164 <__hi0bits>:
   8a164:	0c02      	lsrs	r2, r0, #16
   8a166:	0412      	lsls	r2, r2, #16
   8a168:	4603      	mov	r3, r0
   8a16a:	b9ca      	cbnz	r2, 8a1a0 <__hi0bits+0x3c>
   8a16c:	0403      	lsls	r3, r0, #16
   8a16e:	2010      	movs	r0, #16
   8a170:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8a174:	bf04      	itt	eq
   8a176:	021b      	lsleq	r3, r3, #8
   8a178:	3008      	addeq	r0, #8
   8a17a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8a17e:	bf04      	itt	eq
   8a180:	011b      	lsleq	r3, r3, #4
   8a182:	3004      	addeq	r0, #4
   8a184:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8a188:	bf04      	itt	eq
   8a18a:	009b      	lsleq	r3, r3, #2
   8a18c:	3002      	addeq	r0, #2
   8a18e:	2b00      	cmp	r3, #0
   8a190:	db05      	blt.n	8a19e <__hi0bits+0x3a>
   8a192:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8a196:	f100 0001 	add.w	r0, r0, #1
   8a19a:	bf08      	it	eq
   8a19c:	2020      	moveq	r0, #32
   8a19e:	4770      	bx	lr
   8a1a0:	2000      	movs	r0, #0
   8a1a2:	e7e5      	b.n	8a170 <__hi0bits+0xc>

0008a1a4 <__lo0bits>:
   8a1a4:	6803      	ldr	r3, [r0, #0]
   8a1a6:	4601      	mov	r1, r0
   8a1a8:	f013 0207 	ands.w	r2, r3, #7
   8a1ac:	d007      	beq.n	8a1be <__lo0bits+0x1a>
   8a1ae:	07da      	lsls	r2, r3, #31
   8a1b0:	d420      	bmi.n	8a1f4 <__lo0bits+0x50>
   8a1b2:	0798      	lsls	r0, r3, #30
   8a1b4:	d522      	bpl.n	8a1fc <__lo0bits+0x58>
   8a1b6:	085b      	lsrs	r3, r3, #1
   8a1b8:	2001      	movs	r0, #1
   8a1ba:	600b      	str	r3, [r1, #0]
   8a1bc:	4770      	bx	lr
   8a1be:	b298      	uxth	r0, r3
   8a1c0:	b1a8      	cbz	r0, 8a1ee <__lo0bits+0x4a>
   8a1c2:	4610      	mov	r0, r2
   8a1c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   8a1c8:	bf04      	itt	eq
   8a1ca:	0a1b      	lsreq	r3, r3, #8
   8a1cc:	3008      	addeq	r0, #8
   8a1ce:	071a      	lsls	r2, r3, #28
   8a1d0:	bf04      	itt	eq
   8a1d2:	091b      	lsreq	r3, r3, #4
   8a1d4:	3004      	addeq	r0, #4
   8a1d6:	079a      	lsls	r2, r3, #30
   8a1d8:	bf04      	itt	eq
   8a1da:	089b      	lsreq	r3, r3, #2
   8a1dc:	3002      	addeq	r0, #2
   8a1de:	07da      	lsls	r2, r3, #31
   8a1e0:	d403      	bmi.n	8a1ea <__lo0bits+0x46>
   8a1e2:	085b      	lsrs	r3, r3, #1
   8a1e4:	f100 0001 	add.w	r0, r0, #1
   8a1e8:	d006      	beq.n	8a1f8 <__lo0bits+0x54>
   8a1ea:	600b      	str	r3, [r1, #0]
   8a1ec:	4770      	bx	lr
   8a1ee:	2010      	movs	r0, #16
   8a1f0:	0c1b      	lsrs	r3, r3, #16
   8a1f2:	e7e7      	b.n	8a1c4 <__lo0bits+0x20>
   8a1f4:	2000      	movs	r0, #0
   8a1f6:	4770      	bx	lr
   8a1f8:	2020      	movs	r0, #32
   8a1fa:	4770      	bx	lr
   8a1fc:	089b      	lsrs	r3, r3, #2
   8a1fe:	2002      	movs	r0, #2
   8a200:	600b      	str	r3, [r1, #0]
   8a202:	4770      	bx	lr

0008a204 <__i2b>:
   8a204:	b510      	push	{r4, lr}
   8a206:	460c      	mov	r4, r1
   8a208:	2101      	movs	r1, #1
   8a20a:	f7ff ff2d 	bl	8a068 <_Balloc>
   8a20e:	4602      	mov	r2, r0
   8a210:	b118      	cbz	r0, 8a21a <__i2b+0x16>
   8a212:	2301      	movs	r3, #1
   8a214:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8a218:	bd10      	pop	{r4, pc}
   8a21a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a21e:	4b02      	ldr	r3, [pc, #8]	; (8a228 <__i2b+0x24>)
   8a220:	4802      	ldr	r0, [pc, #8]	; (8a22c <__i2b+0x28>)
   8a222:	f000 fe79 	bl	8af18 <__assert_func>
   8a226:	bf00      	nop
   8a228:	0008c030 	.word	0x0008c030
   8a22c:	0008c0d0 	.word	0x0008c0d0

0008a230 <__multiply>:
   8a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a234:	690d      	ldr	r5, [r1, #16]
   8a236:	6917      	ldr	r7, [r2, #16]
   8a238:	460e      	mov	r6, r1
   8a23a:	42bd      	cmp	r5, r7
   8a23c:	4614      	mov	r4, r2
   8a23e:	b085      	sub	sp, #20
   8a240:	db05      	blt.n	8a24e <__multiply+0x1e>
   8a242:	463a      	mov	r2, r7
   8a244:	4623      	mov	r3, r4
   8a246:	462f      	mov	r7, r5
   8a248:	460c      	mov	r4, r1
   8a24a:	4615      	mov	r5, r2
   8a24c:	461e      	mov	r6, r3
   8a24e:	68a3      	ldr	r3, [r4, #8]
   8a250:	6861      	ldr	r1, [r4, #4]
   8a252:	eb07 0805 	add.w	r8, r7, r5
   8a256:	4543      	cmp	r3, r8
   8a258:	bfb8      	it	lt
   8a25a:	3101      	addlt	r1, #1
   8a25c:	f7ff ff04 	bl	8a068 <_Balloc>
   8a260:	9001      	str	r0, [sp, #4]
   8a262:	2800      	cmp	r0, #0
   8a264:	f000 8088 	beq.w	8a378 <__multiply+0x148>
   8a268:	9b01      	ldr	r3, [sp, #4]
   8a26a:	f103 0914 	add.w	r9, r3, #20
   8a26e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8a272:	45d1      	cmp	r9, sl
   8a274:	d205      	bcs.n	8a282 <__multiply+0x52>
   8a276:	464b      	mov	r3, r9
   8a278:	2200      	movs	r2, #0
   8a27a:	f843 2b04 	str.w	r2, [r3], #4
   8a27e:	459a      	cmp	sl, r3
   8a280:	d8fb      	bhi.n	8a27a <__multiply+0x4a>
   8a282:	f106 0e14 	add.w	lr, r6, #20
   8a286:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8a28a:	f104 0314 	add.w	r3, r4, #20
   8a28e:	45de      	cmp	lr, fp
   8a290:	461a      	mov	r2, r3
   8a292:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8a296:	d23e      	bcs.n	8a316 <__multiply+0xe6>
   8a298:	1b3b      	subs	r3, r7, r4
   8a29a:	3b15      	subs	r3, #21
   8a29c:	f023 0303 	bic.w	r3, r3, #3
   8a2a0:	3304      	adds	r3, #4
   8a2a2:	3415      	adds	r4, #21
   8a2a4:	42a7      	cmp	r7, r4
   8a2a6:	bf38      	it	cc
   8a2a8:	2304      	movcc	r3, #4
   8a2aa:	e9cd a802 	strd	sl, r8, [sp, #8]
   8a2ae:	4698      	mov	r8, r3
   8a2b0:	4692      	mov	sl, r2
   8a2b2:	e003      	b.n	8a2bc <__multiply+0x8c>
   8a2b4:	45f3      	cmp	fp, lr
   8a2b6:	f109 0904 	add.w	r9, r9, #4
   8a2ba:	d92a      	bls.n	8a312 <__multiply+0xe2>
   8a2bc:	f85e 0b04 	ldr.w	r0, [lr], #4
   8a2c0:	b286      	uxth	r6, r0
   8a2c2:	2e00      	cmp	r6, #0
   8a2c4:	d138      	bne.n	8a338 <__multiply+0x108>
   8a2c6:	0c00      	lsrs	r0, r0, #16
   8a2c8:	d0f4      	beq.n	8a2b4 <__multiply+0x84>
   8a2ca:	f8d9 3000 	ldr.w	r3, [r9]
   8a2ce:	4654      	mov	r4, sl
   8a2d0:	461e      	mov	r6, r3
   8a2d2:	464d      	mov	r5, r9
   8a2d4:	f04f 0c00 	mov.w	ip, #0
   8a2d8:	8822      	ldrh	r2, [r4, #0]
   8a2da:	0c36      	lsrs	r6, r6, #16
   8a2dc:	fb00 6602 	mla	r6, r0, r2, r6
   8a2e0:	b29b      	uxth	r3, r3
   8a2e2:	44b4      	add	ip, r6
   8a2e4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8a2e8:	f845 3b04 	str.w	r3, [r5], #4
   8a2ec:	f854 3b04 	ldr.w	r3, [r4], #4
   8a2f0:	682e      	ldr	r6, [r5, #0]
   8a2f2:	0c1b      	lsrs	r3, r3, #16
   8a2f4:	b2b2      	uxth	r2, r6
   8a2f6:	fb00 2303 	mla	r3, r0, r3, r2
   8a2fa:	42a7      	cmp	r7, r4
   8a2fc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8a300:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8a304:	d8e8      	bhi.n	8a2d8 <__multiply+0xa8>
   8a306:	45f3      	cmp	fp, lr
   8a308:	f849 3008 	str.w	r3, [r9, r8]
   8a30c:	f109 0904 	add.w	r9, r9, #4
   8a310:	d8d4      	bhi.n	8a2bc <__multiply+0x8c>
   8a312:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8a316:	f1b8 0f00 	cmp.w	r8, #0
   8a31a:	dc03      	bgt.n	8a324 <__multiply+0xf4>
   8a31c:	e006      	b.n	8a32c <__multiply+0xfc>
   8a31e:	f1b8 0801 	subs.w	r8, r8, #1
   8a322:	d003      	beq.n	8a32c <__multiply+0xfc>
   8a324:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8a328:	2b00      	cmp	r3, #0
   8a32a:	d0f8      	beq.n	8a31e <__multiply+0xee>
   8a32c:	9801      	ldr	r0, [sp, #4]
   8a32e:	f8c0 8010 	str.w	r8, [r0, #16]
   8a332:	b005      	add	sp, #20
   8a334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a338:	4655      	mov	r5, sl
   8a33a:	464c      	mov	r4, r9
   8a33c:	2300      	movs	r3, #0
   8a33e:	f855 1b04 	ldr.w	r1, [r5], #4
   8a342:	6820      	ldr	r0, [r4, #0]
   8a344:	b28a      	uxth	r2, r1
   8a346:	fa1f fc80 	uxth.w	ip, r0
   8a34a:	fb06 c202 	mla	r2, r6, r2, ip
   8a34e:	0c09      	lsrs	r1, r1, #16
   8a350:	0c00      	lsrs	r0, r0, #16
   8a352:	fb06 0101 	mla	r1, r6, r1, r0
   8a356:	4413      	add	r3, r2
   8a358:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8a35c:	b29b      	uxth	r3, r3
   8a35e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a362:	42af      	cmp	r7, r5
   8a364:	f844 3b04 	str.w	r3, [r4], #4
   8a368:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8a36c:	d8e7      	bhi.n	8a33e <__multiply+0x10e>
   8a36e:	f849 3008 	str.w	r3, [r9, r8]
   8a372:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8a376:	e7a6      	b.n	8a2c6 <__multiply+0x96>
   8a378:	4602      	mov	r2, r0
   8a37a:	f240 115d 	movw	r1, #349	; 0x15d
   8a37e:	4b02      	ldr	r3, [pc, #8]	; (8a388 <__multiply+0x158>)
   8a380:	4802      	ldr	r0, [pc, #8]	; (8a38c <__multiply+0x15c>)
   8a382:	f000 fdc9 	bl	8af18 <__assert_func>
   8a386:	bf00      	nop
   8a388:	0008c030 	.word	0x0008c030
   8a38c:	0008c0d0 	.word	0x0008c0d0

0008a390 <__pow5mult>:
   8a390:	f012 0303 	ands.w	r3, r2, #3
   8a394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a398:	4614      	mov	r4, r2
   8a39a:	4607      	mov	r7, r0
   8a39c:	d12e      	bne.n	8a3fc <__pow5mult+0x6c>
   8a39e:	460e      	mov	r6, r1
   8a3a0:	10a4      	asrs	r4, r4, #2
   8a3a2:	d01c      	beq.n	8a3de <__pow5mult+0x4e>
   8a3a4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8a3a6:	b395      	cbz	r5, 8a40e <__pow5mult+0x7e>
   8a3a8:	07e3      	lsls	r3, r4, #31
   8a3aa:	f04f 0800 	mov.w	r8, #0
   8a3ae:	d406      	bmi.n	8a3be <__pow5mult+0x2e>
   8a3b0:	1064      	asrs	r4, r4, #1
   8a3b2:	d014      	beq.n	8a3de <__pow5mult+0x4e>
   8a3b4:	6828      	ldr	r0, [r5, #0]
   8a3b6:	b1a8      	cbz	r0, 8a3e4 <__pow5mult+0x54>
   8a3b8:	4605      	mov	r5, r0
   8a3ba:	07e3      	lsls	r3, r4, #31
   8a3bc:	d5f8      	bpl.n	8a3b0 <__pow5mult+0x20>
   8a3be:	462a      	mov	r2, r5
   8a3c0:	4631      	mov	r1, r6
   8a3c2:	4638      	mov	r0, r7
   8a3c4:	f7ff ff34 	bl	8a230 <__multiply>
   8a3c8:	b1b6      	cbz	r6, 8a3f8 <__pow5mult+0x68>
   8a3ca:	6871      	ldr	r1, [r6, #4]
   8a3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a3ce:	1064      	asrs	r4, r4, #1
   8a3d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8a3d4:	6032      	str	r2, [r6, #0]
   8a3d6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8a3da:	4606      	mov	r6, r0
   8a3dc:	d1ea      	bne.n	8a3b4 <__pow5mult+0x24>
   8a3de:	4630      	mov	r0, r6
   8a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a3e4:	462a      	mov	r2, r5
   8a3e6:	4629      	mov	r1, r5
   8a3e8:	4638      	mov	r0, r7
   8a3ea:	f7ff ff21 	bl	8a230 <__multiply>
   8a3ee:	6028      	str	r0, [r5, #0]
   8a3f0:	4605      	mov	r5, r0
   8a3f2:	f8c0 8000 	str.w	r8, [r0]
   8a3f6:	e7e0      	b.n	8a3ba <__pow5mult+0x2a>
   8a3f8:	4606      	mov	r6, r0
   8a3fa:	e7d9      	b.n	8a3b0 <__pow5mult+0x20>
   8a3fc:	4a09      	ldr	r2, [pc, #36]	; (8a424 <__pow5mult+0x94>)
   8a3fe:	3b01      	subs	r3, #1
   8a400:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a404:	2300      	movs	r3, #0
   8a406:	f7ff fe5f 	bl	8a0c8 <__multadd>
   8a40a:	4606      	mov	r6, r0
   8a40c:	e7c8      	b.n	8a3a0 <__pow5mult+0x10>
   8a40e:	f240 2171 	movw	r1, #625	; 0x271
   8a412:	4638      	mov	r0, r7
   8a414:	f7ff fef6 	bl	8a204 <__i2b>
   8a418:	2300      	movs	r3, #0
   8a41a:	64b8      	str	r0, [r7, #72]	; 0x48
   8a41c:	4605      	mov	r5, r0
   8a41e:	6003      	str	r3, [r0, #0]
   8a420:	e7c2      	b.n	8a3a8 <__pow5mult+0x18>
   8a422:	bf00      	nop
   8a424:	0008c240 	.word	0x0008c240

0008a428 <__lshift>:
   8a428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a42c:	690f      	ldr	r7, [r1, #16]
   8a42e:	688b      	ldr	r3, [r1, #8]
   8a430:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8a434:	1c7e      	adds	r6, r7, #1
   8a436:	429e      	cmp	r6, r3
   8a438:	460d      	mov	r5, r1
   8a43a:	4691      	mov	r9, r2
   8a43c:	4680      	mov	r8, r0
   8a43e:	6849      	ldr	r1, [r1, #4]
   8a440:	ea4f 1462 	mov.w	r4, r2, asr #5
   8a444:	dd04      	ble.n	8a450 <__lshift+0x28>
   8a446:	005b      	lsls	r3, r3, #1
   8a448:	429e      	cmp	r6, r3
   8a44a:	f101 0101 	add.w	r1, r1, #1
   8a44e:	dcfa      	bgt.n	8a446 <__lshift+0x1e>
   8a450:	4640      	mov	r0, r8
   8a452:	f7ff fe09 	bl	8a068 <_Balloc>
   8a456:	2800      	cmp	r0, #0
   8a458:	d04f      	beq.n	8a4fa <__lshift+0xd2>
   8a45a:	2c00      	cmp	r4, #0
   8a45c:	f100 0114 	add.w	r1, r0, #20
   8a460:	dd0d      	ble.n	8a47e <__lshift+0x56>
   8a462:	460b      	mov	r3, r1
   8a464:	2200      	movs	r2, #0
   8a466:	3405      	adds	r4, #5
   8a468:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8a46c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8a470:	f843 2b04 	str.w	r2, [r3], #4
   8a474:	42a3      	cmp	r3, r4
   8a476:	d1fb      	bne.n	8a470 <__lshift+0x48>
   8a478:	f1ac 0314 	sub.w	r3, ip, #20
   8a47c:	4419      	add	r1, r3
   8a47e:	692c      	ldr	r4, [r5, #16]
   8a480:	f105 0314 	add.w	r3, r5, #20
   8a484:	f019 091f 	ands.w	r9, r9, #31
   8a488:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8a48c:	d02d      	beq.n	8a4ea <__lshift+0xc2>
   8a48e:	468e      	mov	lr, r1
   8a490:	f04f 0a00 	mov.w	sl, #0
   8a494:	f1c9 0220 	rsb	r2, r9, #32
   8a498:	681c      	ldr	r4, [r3, #0]
   8a49a:	fa04 f409 	lsl.w	r4, r4, r9
   8a49e:	ea44 040a 	orr.w	r4, r4, sl
   8a4a2:	f84e 4b04 	str.w	r4, [lr], #4
   8a4a6:	f853 4b04 	ldr.w	r4, [r3], #4
   8a4aa:	459c      	cmp	ip, r3
   8a4ac:	fa24 fa02 	lsr.w	sl, r4, r2
   8a4b0:	d8f2      	bhi.n	8a498 <__lshift+0x70>
   8a4b2:	ebac 0305 	sub.w	r3, ip, r5
   8a4b6:	3b15      	subs	r3, #21
   8a4b8:	f023 0303 	bic.w	r3, r3, #3
   8a4bc:	3304      	adds	r3, #4
   8a4be:	f105 0215 	add.w	r2, r5, #21
   8a4c2:	4594      	cmp	ip, r2
   8a4c4:	bf38      	it	cc
   8a4c6:	2304      	movcc	r3, #4
   8a4c8:	f1ba 0f00 	cmp.w	sl, #0
   8a4cc:	bf18      	it	ne
   8a4ce:	4637      	movne	r7, r6
   8a4d0:	f841 a003 	str.w	sl, [r1, r3]
   8a4d4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8a4d8:	686a      	ldr	r2, [r5, #4]
   8a4da:	6107      	str	r7, [r0, #16]
   8a4dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a4e0:	6029      	str	r1, [r5, #0]
   8a4e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8a4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a4ea:	3904      	subs	r1, #4
   8a4ec:	f853 2b04 	ldr.w	r2, [r3], #4
   8a4f0:	459c      	cmp	ip, r3
   8a4f2:	f841 2f04 	str.w	r2, [r1, #4]!
   8a4f6:	d8f9      	bhi.n	8a4ec <__lshift+0xc4>
   8a4f8:	e7ec      	b.n	8a4d4 <__lshift+0xac>
   8a4fa:	4602      	mov	r2, r0
   8a4fc:	f240 11d9 	movw	r1, #473	; 0x1d9
   8a500:	4b01      	ldr	r3, [pc, #4]	; (8a508 <__lshift+0xe0>)
   8a502:	4802      	ldr	r0, [pc, #8]	; (8a50c <__lshift+0xe4>)
   8a504:	f000 fd08 	bl	8af18 <__assert_func>
   8a508:	0008c030 	.word	0x0008c030
   8a50c:	0008c0d0 	.word	0x0008c0d0

0008a510 <__mcmp>:
   8a510:	b430      	push	{r4, r5}
   8a512:	690b      	ldr	r3, [r1, #16]
   8a514:	4605      	mov	r5, r0
   8a516:	6900      	ldr	r0, [r0, #16]
   8a518:	1ac0      	subs	r0, r0, r3
   8a51a:	d111      	bne.n	8a540 <__mcmp+0x30>
   8a51c:	3514      	adds	r5, #20
   8a51e:	3114      	adds	r1, #20
   8a520:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8a524:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8a528:	e001      	b.n	8a52e <__mcmp+0x1e>
   8a52a:	429d      	cmp	r5, r3
   8a52c:	d208      	bcs.n	8a540 <__mcmp+0x30>
   8a52e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8a532:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8a536:	428c      	cmp	r4, r1
   8a538:	d0f7      	beq.n	8a52a <__mcmp+0x1a>
   8a53a:	d203      	bcs.n	8a544 <__mcmp+0x34>
   8a53c:	f04f 30ff 	mov.w	r0, #4294967295
   8a540:	bc30      	pop	{r4, r5}
   8a542:	4770      	bx	lr
   8a544:	2001      	movs	r0, #1
   8a546:	bc30      	pop	{r4, r5}
   8a548:	4770      	bx	lr
   8a54a:	bf00      	nop

0008a54c <__mdiff>:
   8a54c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a550:	690b      	ldr	r3, [r1, #16]
   8a552:	460c      	mov	r4, r1
   8a554:	6911      	ldr	r1, [r2, #16]
   8a556:	4690      	mov	r8, r2
   8a558:	eba3 0b01 	sub.w	fp, r3, r1
   8a55c:	f1bb 0f00 	cmp.w	fp, #0
   8a560:	d17c      	bne.n	8a65c <__mdiff+0x110>
   8a562:	f104 0614 	add.w	r6, r4, #20
   8a566:	3214      	adds	r2, #20
   8a568:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8a56c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8a570:	e001      	b.n	8a576 <__mdiff+0x2a>
   8a572:	429e      	cmp	r6, r3
   8a574:	d276      	bcs.n	8a664 <__mdiff+0x118>
   8a576:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8a57a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8a57e:	428d      	cmp	r5, r1
   8a580:	d0f7      	beq.n	8a572 <__mdiff+0x26>
   8a582:	d365      	bcc.n	8a650 <__mdiff+0x104>
   8a584:	6861      	ldr	r1, [r4, #4]
   8a586:	f7ff fd6f 	bl	8a068 <_Balloc>
   8a58a:	2800      	cmp	r0, #0
   8a58c:	d074      	beq.n	8a678 <__mdiff+0x12c>
   8a58e:	f100 0614 	add.w	r6, r0, #20
   8a592:	46b4      	mov	ip, r6
   8a594:	2300      	movs	r3, #0
   8a596:	6927      	ldr	r7, [r4, #16]
   8a598:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8a59c:	f104 0a14 	add.w	sl, r4, #20
   8a5a0:	f108 0514 	add.w	r5, r8, #20
   8a5a4:	f8c0 b00c 	str.w	fp, [r0, #12]
   8a5a8:	3410      	adds	r4, #16
   8a5aa:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8a5ae:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8a5b2:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8a5b6:	f855 bb04 	ldr.w	fp, [r5], #4
   8a5ba:	b291      	uxth	r1, r2
   8a5bc:	440b      	add	r3, r1
   8a5be:	fa1f f18b 	uxth.w	r1, fp
   8a5c2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8a5c6:	1a59      	subs	r1, r3, r1
   8a5c8:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8a5cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8a5d0:	b289      	uxth	r1, r1
   8a5d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8a5d6:	45a9      	cmp	r9, r5
   8a5d8:	f84c 1b04 	str.w	r1, [ip], #4
   8a5dc:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a5e0:	d8e7      	bhi.n	8a5b2 <__mdiff+0x66>
   8a5e2:	eba9 0208 	sub.w	r2, r9, r8
   8a5e6:	3a15      	subs	r2, #21
   8a5e8:	f108 0815 	add.w	r8, r8, #21
   8a5ec:	45c1      	cmp	r9, r8
   8a5ee:	f022 0403 	bic.w	r4, r2, #3
   8a5f2:	f104 0404 	add.w	r4, r4, #4
   8a5f6:	bf38      	it	cc
   8a5f8:	2404      	movcc	r4, #4
   8a5fa:	f022 0203 	bic.w	r2, r2, #3
   8a5fe:	bf38      	it	cc
   8a600:	2200      	movcc	r2, #0
   8a602:	44a2      	add	sl, r4
   8a604:	45d6      	cmp	lr, sl
   8a606:	4434      	add	r4, r6
   8a608:	4416      	add	r6, r2
   8a60a:	d918      	bls.n	8a63e <__mdiff+0xf2>
   8a60c:	4625      	mov	r5, r4
   8a60e:	4652      	mov	r2, sl
   8a610:	f852 6b04 	ldr.w	r6, [r2], #4
   8a614:	b2b1      	uxth	r1, r6
   8a616:	4419      	add	r1, r3
   8a618:	140b      	asrs	r3, r1, #16
   8a61a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8a61e:	b289      	uxth	r1, r1
   8a620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8a624:	4596      	cmp	lr, r2
   8a626:	f845 1b04 	str.w	r1, [r5], #4
   8a62a:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a62e:	d8ef      	bhi.n	8a610 <__mdiff+0xc4>
   8a630:	f10e 36ff 	add.w	r6, lr, #4294967295
   8a634:	eba6 060a 	sub.w	r6, r6, sl
   8a638:	f026 0603 	bic.w	r6, r6, #3
   8a63c:	4426      	add	r6, r4
   8a63e:	b921      	cbnz	r1, 8a64a <__mdiff+0xfe>
   8a640:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8a644:	3f01      	subs	r7, #1
   8a646:	2b00      	cmp	r3, #0
   8a648:	d0fa      	beq.n	8a640 <__mdiff+0xf4>
   8a64a:	6107      	str	r7, [r0, #16]
   8a64c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a650:	4623      	mov	r3, r4
   8a652:	f04f 0b01 	mov.w	fp, #1
   8a656:	4644      	mov	r4, r8
   8a658:	4698      	mov	r8, r3
   8a65a:	e793      	b.n	8a584 <__mdiff+0x38>
   8a65c:	dbf8      	blt.n	8a650 <__mdiff+0x104>
   8a65e:	f04f 0b00 	mov.w	fp, #0
   8a662:	e78f      	b.n	8a584 <__mdiff+0x38>
   8a664:	2100      	movs	r1, #0
   8a666:	f7ff fcff 	bl	8a068 <_Balloc>
   8a66a:	b160      	cbz	r0, 8a686 <__mdiff+0x13a>
   8a66c:	2201      	movs	r2, #1
   8a66e:	2300      	movs	r3, #0
   8a670:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a678:	4602      	mov	r2, r0
   8a67a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8a67e:	4b05      	ldr	r3, [pc, #20]	; (8a694 <__mdiff+0x148>)
   8a680:	4805      	ldr	r0, [pc, #20]	; (8a698 <__mdiff+0x14c>)
   8a682:	f000 fc49 	bl	8af18 <__assert_func>
   8a686:	4602      	mov	r2, r0
   8a688:	f240 2132 	movw	r1, #562	; 0x232
   8a68c:	4b01      	ldr	r3, [pc, #4]	; (8a694 <__mdiff+0x148>)
   8a68e:	4802      	ldr	r0, [pc, #8]	; (8a698 <__mdiff+0x14c>)
   8a690:	f000 fc42 	bl	8af18 <__assert_func>
   8a694:	0008c030 	.word	0x0008c030
   8a698:	0008c0d0 	.word	0x0008c0d0

0008a69c <__d2b>:
   8a69c:	b570      	push	{r4, r5, r6, lr}
   8a69e:	2101      	movs	r1, #1
   8a6a0:	b082      	sub	sp, #8
   8a6a2:	4616      	mov	r6, r2
   8a6a4:	461d      	mov	r5, r3
   8a6a6:	f7ff fcdf 	bl	8a068 <_Balloc>
   8a6aa:	4604      	mov	r4, r0
   8a6ac:	2800      	cmp	r0, #0
   8a6ae:	d04c      	beq.n	8a74a <__d2b+0xae>
   8a6b0:	462b      	mov	r3, r5
   8a6b2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8a6b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8a6ba:	b10d      	cbz	r5, 8a6c0 <__d2b+0x24>
   8a6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a6c0:	2e00      	cmp	r6, #0
   8a6c2:	9301      	str	r3, [sp, #4]
   8a6c4:	d022      	beq.n	8a70c <__d2b+0x70>
   8a6c6:	4668      	mov	r0, sp
   8a6c8:	9600      	str	r6, [sp, #0]
   8a6ca:	f7ff fd6b 	bl	8a1a4 <__lo0bits>
   8a6ce:	2800      	cmp	r0, #0
   8a6d0:	d037      	beq.n	8a742 <__d2b+0xa6>
   8a6d2:	9b01      	ldr	r3, [sp, #4]
   8a6d4:	9900      	ldr	r1, [sp, #0]
   8a6d6:	f1c0 0220 	rsb	r2, r0, #32
   8a6da:	fa03 f202 	lsl.w	r2, r3, r2
   8a6de:	430a      	orrs	r2, r1
   8a6e0:	40c3      	lsrs	r3, r0
   8a6e2:	9301      	str	r3, [sp, #4]
   8a6e4:	6162      	str	r2, [r4, #20]
   8a6e6:	2b00      	cmp	r3, #0
   8a6e8:	bf14      	ite	ne
   8a6ea:	2102      	movne	r1, #2
   8a6ec:	2101      	moveq	r1, #1
   8a6ee:	61a3      	str	r3, [r4, #24]
   8a6f0:	6121      	str	r1, [r4, #16]
   8a6f2:	b1b5      	cbz	r5, 8a722 <__d2b+0x86>
   8a6f4:	9a06      	ldr	r2, [sp, #24]
   8a6f6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8a6fa:	4403      	add	r3, r0
   8a6fc:	6013      	str	r3, [r2, #0]
   8a6fe:	9b07      	ldr	r3, [sp, #28]
   8a700:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8a704:	6018      	str	r0, [r3, #0]
   8a706:	4620      	mov	r0, r4
   8a708:	b002      	add	sp, #8
   8a70a:	bd70      	pop	{r4, r5, r6, pc}
   8a70c:	a801      	add	r0, sp, #4
   8a70e:	f7ff fd49 	bl	8a1a4 <__lo0bits>
   8a712:	2301      	movs	r3, #1
   8a714:	9a01      	ldr	r2, [sp, #4]
   8a716:	4619      	mov	r1, r3
   8a718:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8a71c:	3020      	adds	r0, #32
   8a71e:	2d00      	cmp	r5, #0
   8a720:	d1e8      	bne.n	8a6f4 <__d2b+0x58>
   8a722:	9a06      	ldr	r2, [sp, #24]
   8a724:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8a728:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8a72c:	6010      	str	r0, [r2, #0]
   8a72e:	6918      	ldr	r0, [r3, #16]
   8a730:	f7ff fd18 	bl	8a164 <__hi0bits>
   8a734:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8a738:	4620      	mov	r0, r4
   8a73a:	9b07      	ldr	r3, [sp, #28]
   8a73c:	6019      	str	r1, [r3, #0]
   8a73e:	b002      	add	sp, #8
   8a740:	bd70      	pop	{r4, r5, r6, pc}
   8a742:	e9dd 2300 	ldrd	r2, r3, [sp]
   8a746:	6162      	str	r2, [r4, #20]
   8a748:	e7cd      	b.n	8a6e6 <__d2b+0x4a>
   8a74a:	4602      	mov	r2, r0
   8a74c:	f240 310a 	movw	r1, #778	; 0x30a
   8a750:	4b01      	ldr	r3, [pc, #4]	; (8a758 <__d2b+0xbc>)
   8a752:	4802      	ldr	r0, [pc, #8]	; (8a75c <__d2b+0xc0>)
   8a754:	f000 fbe0 	bl	8af18 <__assert_func>
   8a758:	0008c030 	.word	0x0008c030
   8a75c:	0008c0d0 	.word	0x0008c0d0

0008a760 <_realloc_r>:
   8a760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a764:	4616      	mov	r6, r2
   8a766:	2900      	cmp	r1, #0
   8a768:	f000 80bd 	beq.w	8a8e6 <_realloc_r+0x186>
   8a76c:	f106 050b 	add.w	r5, r6, #11
   8a770:	460c      	mov	r4, r1
   8a772:	4680      	mov	r8, r0
   8a774:	f7ff fc6c 	bl	8a050 <__malloc_lock>
   8a778:	2d16      	cmp	r5, #22
   8a77a:	d85f      	bhi.n	8a83c <_realloc_r+0xdc>
   8a77c:	2510      	movs	r5, #16
   8a77e:	462a      	mov	r2, r5
   8a780:	42ae      	cmp	r6, r5
   8a782:	d860      	bhi.n	8a846 <_realloc_r+0xe6>
   8a784:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8a788:	f1a4 0908 	sub.w	r9, r4, #8
   8a78c:	f021 0703 	bic.w	r7, r1, #3
   8a790:	4297      	cmp	r7, r2
   8a792:	f280 8086 	bge.w	8a8a2 <_realloc_r+0x142>
   8a796:	4bc9      	ldr	r3, [pc, #804]	; (8aabc <_realloc_r+0x35c>)
   8a798:	eb09 0007 	add.w	r0, r9, r7
   8a79c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8a7a0:	4584      	cmp	ip, r0
   8a7a2:	f000 80b9 	beq.w	8a918 <_realloc_r+0x1b8>
   8a7a6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8a7aa:	f02c 0301 	bic.w	r3, ip, #1
   8a7ae:	4403      	add	r3, r0
   8a7b0:	685b      	ldr	r3, [r3, #4]
   8a7b2:	07db      	lsls	r3, r3, #31
   8a7b4:	f100 808c 	bmi.w	8a8d0 <_realloc_r+0x170>
   8a7b8:	f02c 0c03 	bic.w	ip, ip, #3
   8a7bc:	eb07 030c 	add.w	r3, r7, ip
   8a7c0:	4293      	cmp	r3, r2
   8a7c2:	f280 8115 	bge.w	8a9f0 <_realloc_r+0x290>
   8a7c6:	07cb      	lsls	r3, r1, #31
   8a7c8:	d40f      	bmi.n	8a7ea <_realloc_r+0x8a>
   8a7ca:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a7ce:	eba9 0a03 	sub.w	sl, r9, r3
   8a7d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a7d6:	f023 0103 	bic.w	r1, r3, #3
   8a7da:	448c      	add	ip, r1
   8a7dc:	44bc      	add	ip, r7
   8a7de:	4594      	cmp	ip, r2
   8a7e0:	da38      	bge.n	8a854 <_realloc_r+0xf4>
   8a7e2:	187b      	adds	r3, r7, r1
   8a7e4:	4293      	cmp	r3, r2
   8a7e6:	f280 810f 	bge.w	8aa08 <_realloc_r+0x2a8>
   8a7ea:	4631      	mov	r1, r6
   8a7ec:	4640      	mov	r0, r8
   8a7ee:	f7ff f8c1 	bl	89974 <_malloc_r>
   8a7f2:	4606      	mov	r6, r0
   8a7f4:	b1e0      	cbz	r0, 8a830 <_realloc_r+0xd0>
   8a7f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a7fa:	f1a0 0208 	sub.w	r2, r0, #8
   8a7fe:	f023 0301 	bic.w	r3, r3, #1
   8a802:	444b      	add	r3, r9
   8a804:	4293      	cmp	r3, r2
   8a806:	f000 80f9 	beq.w	8a9fc <_realloc_r+0x29c>
   8a80a:	1f3a      	subs	r2, r7, #4
   8a80c:	2a24      	cmp	r2, #36	; 0x24
   8a80e:	f200 811c 	bhi.w	8aa4a <_realloc_r+0x2ea>
   8a812:	2a13      	cmp	r2, #19
   8a814:	f200 80cd 	bhi.w	8a9b2 <_realloc_r+0x252>
   8a818:	4603      	mov	r3, r0
   8a81a:	4622      	mov	r2, r4
   8a81c:	6811      	ldr	r1, [r2, #0]
   8a81e:	6019      	str	r1, [r3, #0]
   8a820:	6851      	ldr	r1, [r2, #4]
   8a822:	6059      	str	r1, [r3, #4]
   8a824:	6892      	ldr	r2, [r2, #8]
   8a826:	609a      	str	r2, [r3, #8]
   8a828:	4621      	mov	r1, r4
   8a82a:	4640      	mov	r0, r8
   8a82c:	f7fe fd70 	bl	89310 <_free_r>
   8a830:	4640      	mov	r0, r8
   8a832:	f7ff fc13 	bl	8a05c <__malloc_unlock>
   8a836:	4630      	mov	r0, r6
   8a838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a83c:	f025 0507 	bic.w	r5, r5, #7
   8a840:	2d00      	cmp	r5, #0
   8a842:	462a      	mov	r2, r5
   8a844:	da9c      	bge.n	8a780 <_realloc_r+0x20>
   8a846:	230c      	movs	r3, #12
   8a848:	2600      	movs	r6, #0
   8a84a:	f8c8 3000 	str.w	r3, [r8]
   8a84e:	4630      	mov	r0, r6
   8a850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a854:	4656      	mov	r6, sl
   8a856:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8a85a:	60cb      	str	r3, [r1, #12]
   8a85c:	6099      	str	r1, [r3, #8]
   8a85e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8a862:	f8da 300c 	ldr.w	r3, [sl, #12]
   8a866:	1f3a      	subs	r2, r7, #4
   8a868:	2a24      	cmp	r2, #36	; 0x24
   8a86a:	60cb      	str	r3, [r1, #12]
   8a86c:	6099      	str	r1, [r3, #8]
   8a86e:	f200 8107 	bhi.w	8aa80 <_realloc_r+0x320>
   8a872:	2a13      	cmp	r2, #19
   8a874:	f240 8102 	bls.w	8aa7c <_realloc_r+0x31c>
   8a878:	6823      	ldr	r3, [r4, #0]
   8a87a:	2a1b      	cmp	r2, #27
   8a87c:	f8ca 3008 	str.w	r3, [sl, #8]
   8a880:	6863      	ldr	r3, [r4, #4]
   8a882:	f8ca 300c 	str.w	r3, [sl, #12]
   8a886:	f200 811b 	bhi.w	8aac0 <_realloc_r+0x360>
   8a88a:	3408      	adds	r4, #8
   8a88c:	f10a 0310 	add.w	r3, sl, #16
   8a890:	6822      	ldr	r2, [r4, #0]
   8a892:	4667      	mov	r7, ip
   8a894:	601a      	str	r2, [r3, #0]
   8a896:	6862      	ldr	r2, [r4, #4]
   8a898:	46d1      	mov	r9, sl
   8a89a:	605a      	str	r2, [r3, #4]
   8a89c:	68a2      	ldr	r2, [r4, #8]
   8a89e:	4634      	mov	r4, r6
   8a8a0:	609a      	str	r2, [r3, #8]
   8a8a2:	1b7b      	subs	r3, r7, r5
   8a8a4:	2b0f      	cmp	r3, #15
   8a8a6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8a8aa:	d821      	bhi.n	8a8f0 <_realloc_r+0x190>
   8a8ac:	f002 0201 	and.w	r2, r2, #1
   8a8b0:	433a      	orrs	r2, r7
   8a8b2:	eb09 0107 	add.w	r1, r9, r7
   8a8b6:	f8c9 2004 	str.w	r2, [r9, #4]
   8a8ba:	684b      	ldr	r3, [r1, #4]
   8a8bc:	f043 0301 	orr.w	r3, r3, #1
   8a8c0:	604b      	str	r3, [r1, #4]
   8a8c2:	4626      	mov	r6, r4
   8a8c4:	4640      	mov	r0, r8
   8a8c6:	f7ff fbc9 	bl	8a05c <__malloc_unlock>
   8a8ca:	4630      	mov	r0, r6
   8a8cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a8d0:	07c9      	lsls	r1, r1, #31
   8a8d2:	d48a      	bmi.n	8a7ea <_realloc_r+0x8a>
   8a8d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a8d8:	eba9 0a03 	sub.w	sl, r9, r3
   8a8dc:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a8e0:	f021 0103 	bic.w	r1, r1, #3
   8a8e4:	e77d      	b.n	8a7e2 <_realloc_r+0x82>
   8a8e6:	4611      	mov	r1, r2
   8a8e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a8ec:	f7ff b842 	b.w	89974 <_malloc_r>
   8a8f0:	f002 0201 	and.w	r2, r2, #1
   8a8f4:	eb09 0105 	add.w	r1, r9, r5
   8a8f8:	f043 0301 	orr.w	r3, r3, #1
   8a8fc:	432a      	orrs	r2, r5
   8a8fe:	f8c9 2004 	str.w	r2, [r9, #4]
   8a902:	444f      	add	r7, r9
   8a904:	604b      	str	r3, [r1, #4]
   8a906:	687b      	ldr	r3, [r7, #4]
   8a908:	4640      	mov	r0, r8
   8a90a:	f043 0301 	orr.w	r3, r3, #1
   8a90e:	3108      	adds	r1, #8
   8a910:	607b      	str	r3, [r7, #4]
   8a912:	f7fe fcfd 	bl	89310 <_free_r>
   8a916:	e7d4      	b.n	8a8c2 <_realloc_r+0x162>
   8a918:	f8dc b004 	ldr.w	fp, [ip, #4]
   8a91c:	f105 0010 	add.w	r0, r5, #16
   8a920:	f02b 0b03 	bic.w	fp, fp, #3
   8a924:	eb07 0c0b 	add.w	ip, r7, fp
   8a928:	4584      	cmp	ip, r0
   8a92a:	da4d      	bge.n	8a9c8 <_realloc_r+0x268>
   8a92c:	07c9      	lsls	r1, r1, #31
   8a92e:	f53f af5c 	bmi.w	8a7ea <_realloc_r+0x8a>
   8a932:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8a936:	eba9 0a01 	sub.w	sl, r9, r1
   8a93a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a93e:	f021 0103 	bic.w	r1, r1, #3
   8a942:	448b      	add	fp, r1
   8a944:	44bb      	add	fp, r7
   8a946:	4558      	cmp	r0, fp
   8a948:	f73f af4b 	bgt.w	8a7e2 <_realloc_r+0x82>
   8a94c:	4656      	mov	r6, sl
   8a94e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a952:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a956:	1f3a      	subs	r2, r7, #4
   8a958:	2a24      	cmp	r2, #36	; 0x24
   8a95a:	60c1      	str	r1, [r0, #12]
   8a95c:	6088      	str	r0, [r1, #8]
   8a95e:	f200 80bd 	bhi.w	8aadc <_realloc_r+0x37c>
   8a962:	2a13      	cmp	r2, #19
   8a964:	f240 80b8 	bls.w	8aad8 <_realloc_r+0x378>
   8a968:	6821      	ldr	r1, [r4, #0]
   8a96a:	2a1b      	cmp	r2, #27
   8a96c:	f8ca 1008 	str.w	r1, [sl, #8]
   8a970:	6861      	ldr	r1, [r4, #4]
   8a972:	f8ca 100c 	str.w	r1, [sl, #12]
   8a976:	f200 80c1 	bhi.w	8aafc <_realloc_r+0x39c>
   8a97a:	3408      	adds	r4, #8
   8a97c:	f10a 0210 	add.w	r2, sl, #16
   8a980:	6821      	ldr	r1, [r4, #0]
   8a982:	6011      	str	r1, [r2, #0]
   8a984:	6861      	ldr	r1, [r4, #4]
   8a986:	6051      	str	r1, [r2, #4]
   8a988:	68a1      	ldr	r1, [r4, #8]
   8a98a:	6091      	str	r1, [r2, #8]
   8a98c:	ebab 0205 	sub.w	r2, fp, r5
   8a990:	eb0a 0105 	add.w	r1, sl, r5
   8a994:	f042 0201 	orr.w	r2, r2, #1
   8a998:	6099      	str	r1, [r3, #8]
   8a99a:	604a      	str	r2, [r1, #4]
   8a99c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a9a0:	4640      	mov	r0, r8
   8a9a2:	f003 0301 	and.w	r3, r3, #1
   8a9a6:	431d      	orrs	r5, r3
   8a9a8:	f8ca 5004 	str.w	r5, [sl, #4]
   8a9ac:	f7ff fb56 	bl	8a05c <__malloc_unlock>
   8a9b0:	e74d      	b.n	8a84e <_realloc_r+0xee>
   8a9b2:	6823      	ldr	r3, [r4, #0]
   8a9b4:	2a1b      	cmp	r2, #27
   8a9b6:	6003      	str	r3, [r0, #0]
   8a9b8:	6863      	ldr	r3, [r4, #4]
   8a9ba:	6043      	str	r3, [r0, #4]
   8a9bc:	d849      	bhi.n	8aa52 <_realloc_r+0x2f2>
   8a9be:	f104 0208 	add.w	r2, r4, #8
   8a9c2:	f100 0308 	add.w	r3, r0, #8
   8a9c6:	e729      	b.n	8a81c <_realloc_r+0xbc>
   8a9c8:	ebac 0205 	sub.w	r2, ip, r5
   8a9cc:	eb09 0105 	add.w	r1, r9, r5
   8a9d0:	f042 0201 	orr.w	r2, r2, #1
   8a9d4:	6099      	str	r1, [r3, #8]
   8a9d6:	604a      	str	r2, [r1, #4]
   8a9d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a9dc:	4640      	mov	r0, r8
   8a9de:	f003 0301 	and.w	r3, r3, #1
   8a9e2:	431d      	orrs	r5, r3
   8a9e4:	f844 5c04 	str.w	r5, [r4, #-4]
   8a9e8:	f7ff fb38 	bl	8a05c <__malloc_unlock>
   8a9ec:	4626      	mov	r6, r4
   8a9ee:	e72e      	b.n	8a84e <_realloc_r+0xee>
   8a9f0:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8a9f4:	461f      	mov	r7, r3
   8a9f6:	60ca      	str	r2, [r1, #12]
   8a9f8:	6091      	str	r1, [r2, #8]
   8a9fa:	e752      	b.n	8a8a2 <_realloc_r+0x142>
   8a9fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8aa00:	f023 0303 	bic.w	r3, r3, #3
   8aa04:	441f      	add	r7, r3
   8aa06:	e74c      	b.n	8a8a2 <_realloc_r+0x142>
   8aa08:	4656      	mov	r6, sl
   8aa0a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8aa0e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8aa12:	1f3a      	subs	r2, r7, #4
   8aa14:	2a24      	cmp	r2, #36	; 0x24
   8aa16:	60c1      	str	r1, [r0, #12]
   8aa18:	6088      	str	r0, [r1, #8]
   8aa1a:	d827      	bhi.n	8aa6c <_realloc_r+0x30c>
   8aa1c:	2a13      	cmp	r2, #19
   8aa1e:	d923      	bls.n	8aa68 <_realloc_r+0x308>
   8aa20:	6821      	ldr	r1, [r4, #0]
   8aa22:	2a1b      	cmp	r2, #27
   8aa24:	f8ca 1008 	str.w	r1, [sl, #8]
   8aa28:	6861      	ldr	r1, [r4, #4]
   8aa2a:	f8ca 100c 	str.w	r1, [sl, #12]
   8aa2e:	d82f      	bhi.n	8aa90 <_realloc_r+0x330>
   8aa30:	3408      	adds	r4, #8
   8aa32:	f10a 0210 	add.w	r2, sl, #16
   8aa36:	6821      	ldr	r1, [r4, #0]
   8aa38:	461f      	mov	r7, r3
   8aa3a:	6011      	str	r1, [r2, #0]
   8aa3c:	6863      	ldr	r3, [r4, #4]
   8aa3e:	46d1      	mov	r9, sl
   8aa40:	6053      	str	r3, [r2, #4]
   8aa42:	68a3      	ldr	r3, [r4, #8]
   8aa44:	4634      	mov	r4, r6
   8aa46:	6093      	str	r3, [r2, #8]
   8aa48:	e72b      	b.n	8a8a2 <_realloc_r+0x142>
   8aa4a:	4621      	mov	r1, r4
   8aa4c:	f7ff fa96 	bl	89f7c <memmove>
   8aa50:	e6ea      	b.n	8a828 <_realloc_r+0xc8>
   8aa52:	68a3      	ldr	r3, [r4, #8]
   8aa54:	2a24      	cmp	r2, #36	; 0x24
   8aa56:	6083      	str	r3, [r0, #8]
   8aa58:	68e3      	ldr	r3, [r4, #12]
   8aa5a:	60c3      	str	r3, [r0, #12]
   8aa5c:	d024      	beq.n	8aaa8 <_realloc_r+0x348>
   8aa5e:	f104 0210 	add.w	r2, r4, #16
   8aa62:	f100 0310 	add.w	r3, r0, #16
   8aa66:	e6d9      	b.n	8a81c <_realloc_r+0xbc>
   8aa68:	4632      	mov	r2, r6
   8aa6a:	e7e4      	b.n	8aa36 <_realloc_r+0x2d6>
   8aa6c:	4621      	mov	r1, r4
   8aa6e:	4630      	mov	r0, r6
   8aa70:	461f      	mov	r7, r3
   8aa72:	46d1      	mov	r9, sl
   8aa74:	f7ff fa82 	bl	89f7c <memmove>
   8aa78:	4634      	mov	r4, r6
   8aa7a:	e712      	b.n	8a8a2 <_realloc_r+0x142>
   8aa7c:	4633      	mov	r3, r6
   8aa7e:	e707      	b.n	8a890 <_realloc_r+0x130>
   8aa80:	4621      	mov	r1, r4
   8aa82:	4630      	mov	r0, r6
   8aa84:	4667      	mov	r7, ip
   8aa86:	46d1      	mov	r9, sl
   8aa88:	f7ff fa78 	bl	89f7c <memmove>
   8aa8c:	4634      	mov	r4, r6
   8aa8e:	e708      	b.n	8a8a2 <_realloc_r+0x142>
   8aa90:	68a1      	ldr	r1, [r4, #8]
   8aa92:	2a24      	cmp	r2, #36	; 0x24
   8aa94:	f8ca 1010 	str.w	r1, [sl, #16]
   8aa98:	68e1      	ldr	r1, [r4, #12]
   8aa9a:	f8ca 1014 	str.w	r1, [sl, #20]
   8aa9e:	d023      	beq.n	8aae8 <_realloc_r+0x388>
   8aaa0:	3410      	adds	r4, #16
   8aaa2:	f10a 0218 	add.w	r2, sl, #24
   8aaa6:	e7c6      	b.n	8aa36 <_realloc_r+0x2d6>
   8aaa8:	6923      	ldr	r3, [r4, #16]
   8aaaa:	f104 0218 	add.w	r2, r4, #24
   8aaae:	6103      	str	r3, [r0, #16]
   8aab0:	6961      	ldr	r1, [r4, #20]
   8aab2:	f100 0318 	add.w	r3, r0, #24
   8aab6:	6141      	str	r1, [r0, #20]
   8aab8:	e6b0      	b.n	8a81c <_realloc_r+0xbc>
   8aaba:	bf00      	nop
   8aabc:	20000968 	.word	0x20000968
   8aac0:	68a3      	ldr	r3, [r4, #8]
   8aac2:	2a24      	cmp	r2, #36	; 0x24
   8aac4:	f8ca 3010 	str.w	r3, [sl, #16]
   8aac8:	68e3      	ldr	r3, [r4, #12]
   8aaca:	f8ca 3014 	str.w	r3, [sl, #20]
   8aace:	d021      	beq.n	8ab14 <_realloc_r+0x3b4>
   8aad0:	3410      	adds	r4, #16
   8aad2:	f10a 0318 	add.w	r3, sl, #24
   8aad6:	e6db      	b.n	8a890 <_realloc_r+0x130>
   8aad8:	4632      	mov	r2, r6
   8aada:	e751      	b.n	8a980 <_realloc_r+0x220>
   8aadc:	4621      	mov	r1, r4
   8aade:	4630      	mov	r0, r6
   8aae0:	f7ff fa4c 	bl	89f7c <memmove>
   8aae4:	4b15      	ldr	r3, [pc, #84]	; (8ab3c <_realloc_r+0x3dc>)
   8aae6:	e751      	b.n	8a98c <_realloc_r+0x22c>
   8aae8:	6921      	ldr	r1, [r4, #16]
   8aaea:	f10a 0220 	add.w	r2, sl, #32
   8aaee:	f8ca 1018 	str.w	r1, [sl, #24]
   8aaf2:	6961      	ldr	r1, [r4, #20]
   8aaf4:	3418      	adds	r4, #24
   8aaf6:	f8ca 101c 	str.w	r1, [sl, #28]
   8aafa:	e79c      	b.n	8aa36 <_realloc_r+0x2d6>
   8aafc:	68a1      	ldr	r1, [r4, #8]
   8aafe:	2a24      	cmp	r2, #36	; 0x24
   8ab00:	f8ca 1010 	str.w	r1, [sl, #16]
   8ab04:	68e1      	ldr	r1, [r4, #12]
   8ab06:	f8ca 1014 	str.w	r1, [sl, #20]
   8ab0a:	d00d      	beq.n	8ab28 <_realloc_r+0x3c8>
   8ab0c:	3410      	adds	r4, #16
   8ab0e:	f10a 0218 	add.w	r2, sl, #24
   8ab12:	e735      	b.n	8a980 <_realloc_r+0x220>
   8ab14:	6922      	ldr	r2, [r4, #16]
   8ab16:	f10a 0320 	add.w	r3, sl, #32
   8ab1a:	f8ca 2018 	str.w	r2, [sl, #24]
   8ab1e:	6962      	ldr	r2, [r4, #20]
   8ab20:	3418      	adds	r4, #24
   8ab22:	f8ca 201c 	str.w	r2, [sl, #28]
   8ab26:	e6b3      	b.n	8a890 <_realloc_r+0x130>
   8ab28:	6921      	ldr	r1, [r4, #16]
   8ab2a:	f10a 0220 	add.w	r2, sl, #32
   8ab2e:	f8ca 1018 	str.w	r1, [sl, #24]
   8ab32:	6961      	ldr	r1, [r4, #20]
   8ab34:	3418      	adds	r4, #24
   8ab36:	f8ca 101c 	str.w	r1, [sl, #28]
   8ab3a:	e721      	b.n	8a980 <_realloc_r+0x220>
   8ab3c:	20000968 	.word	0x20000968

0008ab40 <frexp>:
   8ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ab42:	4617      	mov	r7, r2
   8ab44:	2200      	movs	r2, #0
   8ab46:	f8df c060 	ldr.w	ip, [pc, #96]	; 8aba8 <frexp+0x68>
   8ab4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ab4e:	4563      	cmp	r3, ip
   8ab50:	4604      	mov	r4, r0
   8ab52:	460d      	mov	r5, r1
   8ab54:	603a      	str	r2, [r7, #0]
   8ab56:	dc22      	bgt.n	8ab9e <frexp+0x5e>
   8ab58:	4684      	mov	ip, r0
   8ab5a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8ab5e:	d01e      	beq.n	8ab9e <frexp+0x5e>
   8ab60:	f8df c048 	ldr.w	ip, [pc, #72]	; 8abac <frexp+0x6c>
   8ab64:	460e      	mov	r6, r1
   8ab66:	ea01 0c0c 	and.w	ip, r1, ip
   8ab6a:	f1bc 0f00 	cmp.w	ip, #0
   8ab6e:	d109      	bne.n	8ab84 <frexp+0x44>
   8ab70:	2200      	movs	r2, #0
   8ab72:	4b0c      	ldr	r3, [pc, #48]	; (8aba4 <frexp+0x64>)
   8ab74:	f000 fd0e 	bl	8b594 <__aeabi_dmul>
   8ab78:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8ab7c:	4604      	mov	r4, r0
   8ab7e:	460e      	mov	r6, r1
   8ab80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ab84:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8ab88:	151b      	asrs	r3, r3, #20
   8ab8a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8ab8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8ab92:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8ab96:	4413      	add	r3, r2
   8ab98:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8ab9c:	603b      	str	r3, [r7, #0]
   8ab9e:	4620      	mov	r0, r4
   8aba0:	4629      	mov	r1, r5
   8aba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aba4:	43500000 	.word	0x43500000
   8aba8:	7fefffff 	.word	0x7fefffff
   8abac:	7ff00000 	.word	0x7ff00000

0008abb0 <_sbrk_r>:
   8abb0:	2200      	movs	r2, #0
   8abb2:	b538      	push	{r3, r4, r5, lr}
   8abb4:	4d06      	ldr	r5, [pc, #24]	; (8abd0 <_sbrk_r+0x20>)
   8abb6:	4604      	mov	r4, r0
   8abb8:	4608      	mov	r0, r1
   8abba:	602a      	str	r2, [r5, #0]
   8abbc:	f7f7 ff64 	bl	82a88 <_sbrk>
   8abc0:	1c43      	adds	r3, r0, #1
   8abc2:	d000      	beq.n	8abc6 <_sbrk_r+0x16>
   8abc4:	bd38      	pop	{r3, r4, r5, pc}
   8abc6:	682b      	ldr	r3, [r5, #0]
   8abc8:	2b00      	cmp	r3, #0
   8abca:	d0fb      	beq.n	8abc4 <_sbrk_r+0x14>
   8abcc:	6023      	str	r3, [r4, #0]
   8abce:	bd38      	pop	{r3, r4, r5, pc}
   8abd0:	2000199c 	.word	0x2000199c

0008abd4 <__sread>:
   8abd4:	b510      	push	{r4, lr}
   8abd6:	460c      	mov	r4, r1
   8abd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8abdc:	f000 fab4 	bl	8b148 <_read_r>
   8abe0:	2800      	cmp	r0, #0
   8abe2:	db03      	blt.n	8abec <__sread+0x18>
   8abe4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8abe6:	4403      	add	r3, r0
   8abe8:	6523      	str	r3, [r4, #80]	; 0x50
   8abea:	bd10      	pop	{r4, pc}
   8abec:	89a3      	ldrh	r3, [r4, #12]
   8abee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8abf2:	81a3      	strh	r3, [r4, #12]
   8abf4:	bd10      	pop	{r4, pc}
   8abf6:	bf00      	nop

0008abf8 <__swrite>:
   8abf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8abfc:	460c      	mov	r4, r1
   8abfe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8ac02:	461f      	mov	r7, r3
   8ac04:	05cb      	lsls	r3, r1, #23
   8ac06:	4616      	mov	r6, r2
   8ac08:	4605      	mov	r5, r0
   8ac0a:	d40b      	bmi.n	8ac24 <__swrite+0x2c>
   8ac0c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8ac10:	81a1      	strh	r1, [r4, #12]
   8ac12:	463b      	mov	r3, r7
   8ac14:	4632      	mov	r2, r6
   8ac16:	4628      	mov	r0, r5
   8ac18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ac1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8ac20:	f000 b91e 	b.w	8ae60 <_write_r>
   8ac24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ac28:	2302      	movs	r3, #2
   8ac2a:	2200      	movs	r2, #0
   8ac2c:	f000 fa76 	bl	8b11c <_lseek_r>
   8ac30:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8ac34:	e7ea      	b.n	8ac0c <__swrite+0x14>
   8ac36:	bf00      	nop

0008ac38 <__sseek>:
   8ac38:	b510      	push	{r4, lr}
   8ac3a:	460c      	mov	r4, r1
   8ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ac40:	f000 fa6c 	bl	8b11c <_lseek_r>
   8ac44:	89a3      	ldrh	r3, [r4, #12]
   8ac46:	1c42      	adds	r2, r0, #1
   8ac48:	bf0e      	itee	eq
   8ac4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8ac4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8ac52:	6520      	strne	r0, [r4, #80]	; 0x50
   8ac54:	81a3      	strh	r3, [r4, #12]
   8ac56:	bd10      	pop	{r4, pc}

0008ac58 <__sclose>:
   8ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ac5c:	f000 b9aa 	b.w	8afb4 <_close_r>

0008ac60 <__ssprint_r>:
   8ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ac64:	6893      	ldr	r3, [r2, #8]
   8ac66:	4691      	mov	r9, r2
   8ac68:	b083      	sub	sp, #12
   8ac6a:	2b00      	cmp	r3, #0
   8ac6c:	d06d      	beq.n	8ad4a <__ssprint_r+0xea>
   8ac6e:	6817      	ldr	r7, [r2, #0]
   8ac70:	4680      	mov	r8, r0
   8ac72:	460c      	mov	r4, r1
   8ac74:	6808      	ldr	r0, [r1, #0]
   8ac76:	688d      	ldr	r5, [r1, #8]
   8ac78:	3708      	adds	r7, #8
   8ac7a:	e043      	b.n	8ad04 <__ssprint_r+0xa4>
   8ac7c:	89a3      	ldrh	r3, [r4, #12]
   8ac7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8ac82:	d02e      	beq.n	8ace2 <__ssprint_r+0x82>
   8ac84:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8ac88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8ac8c:	eba0 0a01 	sub.w	sl, r0, r1
   8ac90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8ac94:	eb0a 0006 	add.w	r0, sl, r6
   8ac98:	106d      	asrs	r5, r5, #1
   8ac9a:	3001      	adds	r0, #1
   8ac9c:	42a8      	cmp	r0, r5
   8ac9e:	462a      	mov	r2, r5
   8aca0:	bf84      	itt	hi
   8aca2:	4605      	movhi	r5, r0
   8aca4:	462a      	movhi	r2, r5
   8aca6:	055b      	lsls	r3, r3, #21
   8aca8:	d536      	bpl.n	8ad18 <__ssprint_r+0xb8>
   8acaa:	4611      	mov	r1, r2
   8acac:	4640      	mov	r0, r8
   8acae:	f7fe fe61 	bl	89974 <_malloc_r>
   8acb2:	2800      	cmp	r0, #0
   8acb4:	d03a      	beq.n	8ad2c <__ssprint_r+0xcc>
   8acb6:	4652      	mov	r2, sl
   8acb8:	6921      	ldr	r1, [r4, #16]
   8acba:	9001      	str	r0, [sp, #4]
   8acbc:	f7fa f9c2 	bl	85044 <memcpy>
   8acc0:	89a2      	ldrh	r2, [r4, #12]
   8acc2:	9b01      	ldr	r3, [sp, #4]
   8acc4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8acc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8accc:	81a2      	strh	r2, [r4, #12]
   8acce:	eba5 020a 	sub.w	r2, r5, sl
   8acd2:	eb03 000a 	add.w	r0, r3, sl
   8acd6:	6165      	str	r5, [r4, #20]
   8acd8:	46b2      	mov	sl, r6
   8acda:	4635      	mov	r5, r6
   8acdc:	6123      	str	r3, [r4, #16]
   8acde:	6020      	str	r0, [r4, #0]
   8ace0:	60a2      	str	r2, [r4, #8]
   8ace2:	4659      	mov	r1, fp
   8ace4:	4652      	mov	r2, sl
   8ace6:	f7ff f949 	bl	89f7c <memmove>
   8acea:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8acee:	68a1      	ldr	r1, [r4, #8]
   8acf0:	6820      	ldr	r0, [r4, #0]
   8acf2:	1b4d      	subs	r5, r1, r5
   8acf4:	4450      	add	r0, sl
   8acf6:	1b9e      	subs	r6, r3, r6
   8acf8:	60a5      	str	r5, [r4, #8]
   8acfa:	6020      	str	r0, [r4, #0]
   8acfc:	f8c9 6008 	str.w	r6, [r9, #8]
   8ad00:	b31e      	cbz	r6, 8ad4a <__ssprint_r+0xea>
   8ad02:	3708      	adds	r7, #8
   8ad04:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8ad08:	2e00      	cmp	r6, #0
   8ad0a:	d0fa      	beq.n	8ad02 <__ssprint_r+0xa2>
   8ad0c:	42b5      	cmp	r5, r6
   8ad0e:	46aa      	mov	sl, r5
   8ad10:	d9b4      	bls.n	8ac7c <__ssprint_r+0x1c>
   8ad12:	4635      	mov	r5, r6
   8ad14:	46b2      	mov	sl, r6
   8ad16:	e7e4      	b.n	8ace2 <__ssprint_r+0x82>
   8ad18:	4640      	mov	r0, r8
   8ad1a:	f7ff fd21 	bl	8a760 <_realloc_r>
   8ad1e:	4603      	mov	r3, r0
   8ad20:	2800      	cmp	r0, #0
   8ad22:	d1d4      	bne.n	8acce <__ssprint_r+0x6e>
   8ad24:	4640      	mov	r0, r8
   8ad26:	6921      	ldr	r1, [r4, #16]
   8ad28:	f7fe faf2 	bl	89310 <_free_r>
   8ad2c:	230c      	movs	r3, #12
   8ad2e:	2200      	movs	r2, #0
   8ad30:	f04f 30ff 	mov.w	r0, #4294967295
   8ad34:	f8c8 3000 	str.w	r3, [r8]
   8ad38:	89a3      	ldrh	r3, [r4, #12]
   8ad3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ad3e:	81a3      	strh	r3, [r4, #12]
   8ad40:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8ad44:	b003      	add	sp, #12
   8ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad4a:	2000      	movs	r0, #0
   8ad4c:	f8c9 0004 	str.w	r0, [r9, #4]
   8ad50:	b003      	add	sp, #12
   8ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad56:	bf00      	nop

0008ad58 <__swbuf_r>:
   8ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ad5a:	460d      	mov	r5, r1
   8ad5c:	4614      	mov	r4, r2
   8ad5e:	4606      	mov	r6, r0
   8ad60:	b110      	cbz	r0, 8ad68 <__swbuf_r+0x10>
   8ad62:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ad64:	2b00      	cmp	r3, #0
   8ad66:	d043      	beq.n	8adf0 <__swbuf_r+0x98>
   8ad68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8ad6c:	69a3      	ldr	r3, [r4, #24]
   8ad6e:	0717      	lsls	r7, r2, #28
   8ad70:	60a3      	str	r3, [r4, #8]
   8ad72:	b290      	uxth	r0, r2
   8ad74:	d51b      	bpl.n	8adae <__swbuf_r+0x56>
   8ad76:	6923      	ldr	r3, [r4, #16]
   8ad78:	b1cb      	cbz	r3, 8adae <__swbuf_r+0x56>
   8ad7a:	b2ed      	uxtb	r5, r5
   8ad7c:	0481      	lsls	r1, r0, #18
   8ad7e:	462f      	mov	r7, r5
   8ad80:	d522      	bpl.n	8adc8 <__swbuf_r+0x70>
   8ad82:	6822      	ldr	r2, [r4, #0]
   8ad84:	6961      	ldr	r1, [r4, #20]
   8ad86:	1ad3      	subs	r3, r2, r3
   8ad88:	4299      	cmp	r1, r3
   8ad8a:	dd29      	ble.n	8ade0 <__swbuf_r+0x88>
   8ad8c:	3301      	adds	r3, #1
   8ad8e:	68a1      	ldr	r1, [r4, #8]
   8ad90:	1c50      	adds	r0, r2, #1
   8ad92:	3901      	subs	r1, #1
   8ad94:	60a1      	str	r1, [r4, #8]
   8ad96:	6020      	str	r0, [r4, #0]
   8ad98:	7015      	strb	r5, [r2, #0]
   8ad9a:	6962      	ldr	r2, [r4, #20]
   8ad9c:	429a      	cmp	r2, r3
   8ad9e:	d02a      	beq.n	8adf6 <__swbuf_r+0x9e>
   8ada0:	89a3      	ldrh	r3, [r4, #12]
   8ada2:	07db      	lsls	r3, r3, #31
   8ada4:	d501      	bpl.n	8adaa <__swbuf_r+0x52>
   8ada6:	2d0a      	cmp	r5, #10
   8ada8:	d025      	beq.n	8adf6 <__swbuf_r+0x9e>
   8adaa:	4638      	mov	r0, r7
   8adac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8adae:	4621      	mov	r1, r4
   8adb0:	4630      	mov	r0, r6
   8adb2:	f7fd f827 	bl	87e04 <__swsetup_r>
   8adb6:	bb20      	cbnz	r0, 8ae02 <__swbuf_r+0xaa>
   8adb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8adbc:	b2ed      	uxtb	r5, r5
   8adbe:	b290      	uxth	r0, r2
   8adc0:	0481      	lsls	r1, r0, #18
   8adc2:	462f      	mov	r7, r5
   8adc4:	6923      	ldr	r3, [r4, #16]
   8adc6:	d4dc      	bmi.n	8ad82 <__swbuf_r+0x2a>
   8adc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8adca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8adce:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8add2:	81a2      	strh	r2, [r4, #12]
   8add4:	6822      	ldr	r2, [r4, #0]
   8add6:	6661      	str	r1, [r4, #100]	; 0x64
   8add8:	6961      	ldr	r1, [r4, #20]
   8adda:	1ad3      	subs	r3, r2, r3
   8addc:	4299      	cmp	r1, r3
   8adde:	dcd5      	bgt.n	8ad8c <__swbuf_r+0x34>
   8ade0:	4621      	mov	r1, r4
   8ade2:	4630      	mov	r0, r6
   8ade4:	f7fe f914 	bl	89010 <_fflush_r>
   8ade8:	b958      	cbnz	r0, 8ae02 <__swbuf_r+0xaa>
   8adea:	2301      	movs	r3, #1
   8adec:	6822      	ldr	r2, [r4, #0]
   8adee:	e7ce      	b.n	8ad8e <__swbuf_r+0x36>
   8adf0:	f7fe f96a 	bl	890c8 <__sinit>
   8adf4:	e7b8      	b.n	8ad68 <__swbuf_r+0x10>
   8adf6:	4621      	mov	r1, r4
   8adf8:	4630      	mov	r0, r6
   8adfa:	f7fe f909 	bl	89010 <_fflush_r>
   8adfe:	2800      	cmp	r0, #0
   8ae00:	d0d3      	beq.n	8adaa <__swbuf_r+0x52>
   8ae02:	f04f 37ff 	mov.w	r7, #4294967295
   8ae06:	e7d0      	b.n	8adaa <__swbuf_r+0x52>

0008ae08 <_wcrtomb_r>:
   8ae08:	b570      	push	{r4, r5, r6, lr}
   8ae0a:	4606      	mov	r6, r0
   8ae0c:	461d      	mov	r5, r3
   8ae0e:	b084      	sub	sp, #16
   8ae10:	b139      	cbz	r1, 8ae22 <_wcrtomb_r+0x1a>
   8ae12:	4c0b      	ldr	r4, [pc, #44]	; (8ae40 <_wcrtomb_r+0x38>)
   8ae14:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8ae18:	47a0      	blx	r4
   8ae1a:	1c43      	adds	r3, r0, #1
   8ae1c:	d00a      	beq.n	8ae34 <_wcrtomb_r+0x2c>
   8ae1e:	b004      	add	sp, #16
   8ae20:	bd70      	pop	{r4, r5, r6, pc}
   8ae22:	460c      	mov	r4, r1
   8ae24:	4906      	ldr	r1, [pc, #24]	; (8ae40 <_wcrtomb_r+0x38>)
   8ae26:	4622      	mov	r2, r4
   8ae28:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8ae2c:	a901      	add	r1, sp, #4
   8ae2e:	47a0      	blx	r4
   8ae30:	1c43      	adds	r3, r0, #1
   8ae32:	d1f4      	bne.n	8ae1e <_wcrtomb_r+0x16>
   8ae34:	2200      	movs	r2, #0
   8ae36:	238a      	movs	r3, #138	; 0x8a
   8ae38:	602a      	str	r2, [r5, #0]
   8ae3a:	6033      	str	r3, [r6, #0]
   8ae3c:	b004      	add	sp, #16
   8ae3e:	bd70      	pop	{r4, r5, r6, pc}
   8ae40:	200007fc 	.word	0x200007fc

0008ae44 <__ascii_wctomb>:
   8ae44:	4603      	mov	r3, r0
   8ae46:	b149      	cbz	r1, 8ae5c <__ascii_wctomb+0x18>
   8ae48:	2aff      	cmp	r2, #255	; 0xff
   8ae4a:	d802      	bhi.n	8ae52 <__ascii_wctomb+0xe>
   8ae4c:	2001      	movs	r0, #1
   8ae4e:	700a      	strb	r2, [r1, #0]
   8ae50:	4770      	bx	lr
   8ae52:	228a      	movs	r2, #138	; 0x8a
   8ae54:	f04f 30ff 	mov.w	r0, #4294967295
   8ae58:	601a      	str	r2, [r3, #0]
   8ae5a:	4770      	bx	lr
   8ae5c:	4608      	mov	r0, r1
   8ae5e:	4770      	bx	lr

0008ae60 <_write_r>:
   8ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ae62:	460f      	mov	r7, r1
   8ae64:	2600      	movs	r6, #0
   8ae66:	4d08      	ldr	r5, [pc, #32]	; (8ae88 <_write_r+0x28>)
   8ae68:	4611      	mov	r1, r2
   8ae6a:	4604      	mov	r4, r0
   8ae6c:	461a      	mov	r2, r3
   8ae6e:	4638      	mov	r0, r7
   8ae70:	602e      	str	r6, [r5, #0]
   8ae72:	f7fa f88f 	bl	84f94 <_write>
   8ae76:	1c43      	adds	r3, r0, #1
   8ae78:	d000      	beq.n	8ae7c <_write_r+0x1c>
   8ae7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ae7c:	682b      	ldr	r3, [r5, #0]
   8ae7e:	2b00      	cmp	r3, #0
   8ae80:	d0fb      	beq.n	8ae7a <_write_r+0x1a>
   8ae82:	6023      	str	r3, [r4, #0]
   8ae84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ae86:	bf00      	nop
   8ae88:	2000199c 	.word	0x2000199c

0008ae8c <__register_exitproc>:
   8ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ae90:	f8df a080 	ldr.w	sl, [pc, #128]	; 8af14 <__register_exitproc+0x88>
   8ae94:	4606      	mov	r6, r0
   8ae96:	f8da 0000 	ldr.w	r0, [sl]
   8ae9a:	4698      	mov	r8, r3
   8ae9c:	460f      	mov	r7, r1
   8ae9e:	4691      	mov	r9, r2
   8aea0:	f7fe fce4 	bl	8986c <__retarget_lock_acquire_recursive>
   8aea4:	4b1a      	ldr	r3, [pc, #104]	; (8af10 <__register_exitproc+0x84>)
   8aea6:	681b      	ldr	r3, [r3, #0]
   8aea8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8aeac:	b324      	cbz	r4, 8aef8 <__register_exitproc+0x6c>
   8aeae:	6865      	ldr	r5, [r4, #4]
   8aeb0:	2d1f      	cmp	r5, #31
   8aeb2:	dc26      	bgt.n	8af02 <__register_exitproc+0x76>
   8aeb4:	b95e      	cbnz	r6, 8aece <__register_exitproc+0x42>
   8aeb6:	1c6b      	adds	r3, r5, #1
   8aeb8:	3502      	adds	r5, #2
   8aeba:	f8da 0000 	ldr.w	r0, [sl]
   8aebe:	6063      	str	r3, [r4, #4]
   8aec0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8aec4:	f7fe fcd4 	bl	89870 <__retarget_lock_release_recursive>
   8aec8:	2000      	movs	r0, #0
   8aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8aece:	2301      	movs	r3, #1
   8aed0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8aed4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8aed8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8aedc:	40ab      	lsls	r3, r5
   8aede:	431a      	orrs	r2, r3
   8aee0:	2e02      	cmp	r6, #2
   8aee2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8aee6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8aeea:	d1e4      	bne.n	8aeb6 <__register_exitproc+0x2a>
   8aeec:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8aef0:	4313      	orrs	r3, r2
   8aef2:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8aef6:	e7de      	b.n	8aeb6 <__register_exitproc+0x2a>
   8aef8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8aefc:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8af00:	e7d5      	b.n	8aeae <__register_exitproc+0x22>
   8af02:	f8da 0000 	ldr.w	r0, [sl]
   8af06:	f7fe fcb3 	bl	89870 <__retarget_lock_release_recursive>
   8af0a:	f04f 30ff 	mov.w	r0, #4294967295
   8af0e:	e7dc      	b.n	8aeca <__register_exitproc+0x3e>
   8af10:	0008bf98 	.word	0x0008bf98
   8af14:	200007f8 	.word	0x200007f8

0008af18 <__assert_func>:
   8af18:	4614      	mov	r4, r2
   8af1a:	b500      	push	{lr}
   8af1c:	4d09      	ldr	r5, [pc, #36]	; (8af44 <__assert_func+0x2c>)
   8af1e:	461a      	mov	r2, r3
   8af20:	4603      	mov	r3, r0
   8af22:	6828      	ldr	r0, [r5, #0]
   8af24:	b085      	sub	sp, #20
   8af26:	68c0      	ldr	r0, [r0, #12]
   8af28:	b144      	cbz	r4, 8af3c <__assert_func+0x24>
   8af2a:	4d07      	ldr	r5, [pc, #28]	; (8af48 <__assert_func+0x30>)
   8af2c:	9100      	str	r1, [sp, #0]
   8af2e:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8af32:	4906      	ldr	r1, [pc, #24]	; (8af4c <__assert_func+0x34>)
   8af34:	f000 f8b6 	bl	8b0a4 <fiprintf>
   8af38:	f000 f91c 	bl	8b174 <abort>
   8af3c:	4d04      	ldr	r5, [pc, #16]	; (8af50 <__assert_func+0x38>)
   8af3e:	462c      	mov	r4, r5
   8af40:	e7f4      	b.n	8af2c <__assert_func+0x14>
   8af42:	bf00      	nop
   8af44:	200003c8 	.word	0x200003c8
   8af48:	0008c24c 	.word	0x0008c24c
   8af4c:	0008c25c 	.word	0x0008c25c
   8af50:	0008bf38 	.word	0x0008bf38

0008af54 <_calloc_r>:
   8af54:	b510      	push	{r4, lr}
   8af56:	fb02 f101 	mul.w	r1, r2, r1
   8af5a:	f7fe fd0b 	bl	89974 <_malloc_r>
   8af5e:	4604      	mov	r4, r0
   8af60:	b168      	cbz	r0, 8af7e <_calloc_r+0x2a>
   8af62:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8af66:	f022 0203 	bic.w	r2, r2, #3
   8af6a:	3a04      	subs	r2, #4
   8af6c:	2a24      	cmp	r2, #36	; 0x24
   8af6e:	d818      	bhi.n	8afa2 <_calloc_r+0x4e>
   8af70:	2a13      	cmp	r2, #19
   8af72:	d806      	bhi.n	8af82 <_calloc_r+0x2e>
   8af74:	4602      	mov	r2, r0
   8af76:	2300      	movs	r3, #0
   8af78:	e9c2 3300 	strd	r3, r3, [r2]
   8af7c:	6093      	str	r3, [r2, #8]
   8af7e:	4620      	mov	r0, r4
   8af80:	bd10      	pop	{r4, pc}
   8af82:	2300      	movs	r3, #0
   8af84:	2a1b      	cmp	r2, #27
   8af86:	e9c0 3300 	strd	r3, r3, [r0]
   8af8a:	d90f      	bls.n	8afac <_calloc_r+0x58>
   8af8c:	2a24      	cmp	r2, #36	; 0x24
   8af8e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8af92:	bf0a      	itet	eq
   8af94:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8af98:	f100 0210 	addne.w	r2, r0, #16
   8af9c:	f100 0218 	addeq.w	r2, r0, #24
   8afa0:	e7e9      	b.n	8af76 <_calloc_r+0x22>
   8afa2:	2100      	movs	r1, #0
   8afa4:	f7fa f8c4 	bl	85130 <memset>
   8afa8:	4620      	mov	r0, r4
   8afaa:	bd10      	pop	{r4, pc}
   8afac:	f100 0208 	add.w	r2, r0, #8
   8afb0:	e7e1      	b.n	8af76 <_calloc_r+0x22>
   8afb2:	bf00      	nop

0008afb4 <_close_r>:
   8afb4:	2200      	movs	r2, #0
   8afb6:	b538      	push	{r3, r4, r5, lr}
   8afb8:	4d06      	ldr	r5, [pc, #24]	; (8afd4 <_close_r+0x20>)
   8afba:	4604      	mov	r4, r0
   8afbc:	4608      	mov	r0, r1
   8afbe:	602a      	str	r2, [r5, #0]
   8afc0:	f7f7 fd7c 	bl	82abc <_close>
   8afc4:	1c43      	adds	r3, r0, #1
   8afc6:	d000      	beq.n	8afca <_close_r+0x16>
   8afc8:	bd38      	pop	{r3, r4, r5, pc}
   8afca:	682b      	ldr	r3, [r5, #0]
   8afcc:	2b00      	cmp	r3, #0
   8afce:	d0fb      	beq.n	8afc8 <_close_r+0x14>
   8afd0:	6023      	str	r3, [r4, #0]
   8afd2:	bd38      	pop	{r3, r4, r5, pc}
   8afd4:	2000199c 	.word	0x2000199c

0008afd8 <_fclose_r>:
   8afd8:	b570      	push	{r4, r5, r6, lr}
   8afda:	2900      	cmp	r1, #0
   8afdc:	d04b      	beq.n	8b076 <_fclose_r+0x9e>
   8afde:	460c      	mov	r4, r1
   8afe0:	4605      	mov	r5, r0
   8afe2:	b110      	cbz	r0, 8afea <_fclose_r+0x12>
   8afe4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8afe6:	2b00      	cmp	r3, #0
   8afe8:	d048      	beq.n	8b07c <_fclose_r+0xa4>
   8afea:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8afec:	07d8      	lsls	r0, r3, #31
   8afee:	d534      	bpl.n	8b05a <_fclose_r+0x82>
   8aff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aff4:	2b00      	cmp	r3, #0
   8aff6:	d03e      	beq.n	8b076 <_fclose_r+0x9e>
   8aff8:	4621      	mov	r1, r4
   8affa:	4628      	mov	r0, r5
   8affc:	f7fd ff70 	bl	88ee0 <__sflush_r>
   8b000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8b002:	4606      	mov	r6, r0
   8b004:	b133      	cbz	r3, 8b014 <_fclose_r+0x3c>
   8b006:	4628      	mov	r0, r5
   8b008:	69e1      	ldr	r1, [r4, #28]
   8b00a:	4798      	blx	r3
   8b00c:	2800      	cmp	r0, #0
   8b00e:	bfb8      	it	lt
   8b010:	f04f 36ff 	movlt.w	r6, #4294967295
   8b014:	89a3      	ldrh	r3, [r4, #12]
   8b016:	061a      	lsls	r2, r3, #24
   8b018:	d43b      	bmi.n	8b092 <_fclose_r+0xba>
   8b01a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b01c:	b141      	cbz	r1, 8b030 <_fclose_r+0x58>
   8b01e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8b022:	4299      	cmp	r1, r3
   8b024:	d002      	beq.n	8b02c <_fclose_r+0x54>
   8b026:	4628      	mov	r0, r5
   8b028:	f7fe f972 	bl	89310 <_free_r>
   8b02c:	2300      	movs	r3, #0
   8b02e:	6323      	str	r3, [r4, #48]	; 0x30
   8b030:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8b032:	b121      	cbz	r1, 8b03e <_fclose_r+0x66>
   8b034:	4628      	mov	r0, r5
   8b036:	f7fe f96b 	bl	89310 <_free_r>
   8b03a:	2300      	movs	r3, #0
   8b03c:	6463      	str	r3, [r4, #68]	; 0x44
   8b03e:	f7fe f871 	bl	89124 <__sfp_lock_acquire>
   8b042:	2200      	movs	r2, #0
   8b044:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b046:	81a2      	strh	r2, [r4, #12]
   8b048:	07db      	lsls	r3, r3, #31
   8b04a:	d527      	bpl.n	8b09c <_fclose_r+0xc4>
   8b04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b04e:	f7fe fc0b 	bl	89868 <__retarget_lock_close_recursive>
   8b052:	f7fe f86d 	bl	89130 <__sfp_lock_release>
   8b056:	4630      	mov	r0, r6
   8b058:	bd70      	pop	{r4, r5, r6, pc}
   8b05a:	89a3      	ldrh	r3, [r4, #12]
   8b05c:	0599      	lsls	r1, r3, #22
   8b05e:	d4cb      	bmi.n	8aff8 <_fclose_r+0x20>
   8b060:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b062:	f7fe fc03 	bl	8986c <__retarget_lock_acquire_recursive>
   8b066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b06a:	2b00      	cmp	r3, #0
   8b06c:	d1c4      	bne.n	8aff8 <_fclose_r+0x20>
   8b06e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8b070:	f016 0601 	ands.w	r6, r6, #1
   8b074:	d008      	beq.n	8b088 <_fclose_r+0xb0>
   8b076:	2600      	movs	r6, #0
   8b078:	4630      	mov	r0, r6
   8b07a:	bd70      	pop	{r4, r5, r6, pc}
   8b07c:	f7fe f824 	bl	890c8 <__sinit>
   8b080:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b082:	07d8      	lsls	r0, r3, #31
   8b084:	d4b4      	bmi.n	8aff0 <_fclose_r+0x18>
   8b086:	e7e8      	b.n	8b05a <_fclose_r+0x82>
   8b088:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b08a:	f7fe fbf1 	bl	89870 <__retarget_lock_release_recursive>
   8b08e:	4630      	mov	r0, r6
   8b090:	bd70      	pop	{r4, r5, r6, pc}
   8b092:	4628      	mov	r0, r5
   8b094:	6921      	ldr	r1, [r4, #16]
   8b096:	f7fe f93b 	bl	89310 <_free_r>
   8b09a:	e7be      	b.n	8b01a <_fclose_r+0x42>
   8b09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b09e:	f7fe fbe7 	bl	89870 <__retarget_lock_release_recursive>
   8b0a2:	e7d3      	b.n	8b04c <_fclose_r+0x74>

0008b0a4 <fiprintf>:
   8b0a4:	b40e      	push	{r1, r2, r3}
   8b0a6:	b510      	push	{r4, lr}
   8b0a8:	b083      	sub	sp, #12
   8b0aa:	ab05      	add	r3, sp, #20
   8b0ac:	4c06      	ldr	r4, [pc, #24]	; (8b0c8 <fiprintf+0x24>)
   8b0ae:	f853 2b04 	ldr.w	r2, [r3], #4
   8b0b2:	4601      	mov	r1, r0
   8b0b4:	6820      	ldr	r0, [r4, #0]
   8b0b6:	9301      	str	r3, [sp, #4]
   8b0b8:	f7fb ffca 	bl	87050 <_vfiprintf_r>
   8b0bc:	b003      	add	sp, #12
   8b0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b0c2:	b003      	add	sp, #12
   8b0c4:	4770      	bx	lr
   8b0c6:	bf00      	nop
   8b0c8:	200003c8 	.word	0x200003c8

0008b0cc <_fstat_r>:
   8b0cc:	b570      	push	{r4, r5, r6, lr}
   8b0ce:	460c      	mov	r4, r1
   8b0d0:	4603      	mov	r3, r0
   8b0d2:	2600      	movs	r6, #0
   8b0d4:	4d07      	ldr	r5, [pc, #28]	; (8b0f4 <_fstat_r+0x28>)
   8b0d6:	4620      	mov	r0, r4
   8b0d8:	4611      	mov	r1, r2
   8b0da:	461c      	mov	r4, r3
   8b0dc:	602e      	str	r6, [r5, #0]
   8b0de:	f7f7 fcf0 	bl	82ac2 <_fstat>
   8b0e2:	1c43      	adds	r3, r0, #1
   8b0e4:	d000      	beq.n	8b0e8 <_fstat_r+0x1c>
   8b0e6:	bd70      	pop	{r4, r5, r6, pc}
   8b0e8:	682b      	ldr	r3, [r5, #0]
   8b0ea:	2b00      	cmp	r3, #0
   8b0ec:	d0fb      	beq.n	8b0e6 <_fstat_r+0x1a>
   8b0ee:	6023      	str	r3, [r4, #0]
   8b0f0:	bd70      	pop	{r4, r5, r6, pc}
   8b0f2:	bf00      	nop
   8b0f4:	2000199c 	.word	0x2000199c

0008b0f8 <_isatty_r>:
   8b0f8:	2200      	movs	r2, #0
   8b0fa:	b538      	push	{r3, r4, r5, lr}
   8b0fc:	4d06      	ldr	r5, [pc, #24]	; (8b118 <_isatty_r+0x20>)
   8b0fe:	4604      	mov	r4, r0
   8b100:	4608      	mov	r0, r1
   8b102:	602a      	str	r2, [r5, #0]
   8b104:	f7f7 fce2 	bl	82acc <_isatty>
   8b108:	1c43      	adds	r3, r0, #1
   8b10a:	d000      	beq.n	8b10e <_isatty_r+0x16>
   8b10c:	bd38      	pop	{r3, r4, r5, pc}
   8b10e:	682b      	ldr	r3, [r5, #0]
   8b110:	2b00      	cmp	r3, #0
   8b112:	d0fb      	beq.n	8b10c <_isatty_r+0x14>
   8b114:	6023      	str	r3, [r4, #0]
   8b116:	bd38      	pop	{r3, r4, r5, pc}
   8b118:	2000199c 	.word	0x2000199c

0008b11c <_lseek_r>:
   8b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b11e:	460f      	mov	r7, r1
   8b120:	2600      	movs	r6, #0
   8b122:	4d08      	ldr	r5, [pc, #32]	; (8b144 <_lseek_r+0x28>)
   8b124:	4611      	mov	r1, r2
   8b126:	4604      	mov	r4, r0
   8b128:	461a      	mov	r2, r3
   8b12a:	4638      	mov	r0, r7
   8b12c:	602e      	str	r6, [r5, #0]
   8b12e:	f7f7 fccf 	bl	82ad0 <_lseek>
   8b132:	1c43      	adds	r3, r0, #1
   8b134:	d000      	beq.n	8b138 <_lseek_r+0x1c>
   8b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b138:	682b      	ldr	r3, [r5, #0]
   8b13a:	2b00      	cmp	r3, #0
   8b13c:	d0fb      	beq.n	8b136 <_lseek_r+0x1a>
   8b13e:	6023      	str	r3, [r4, #0]
   8b140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b142:	bf00      	nop
   8b144:	2000199c 	.word	0x2000199c

0008b148 <_read_r>:
   8b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b14a:	460f      	mov	r7, r1
   8b14c:	2600      	movs	r6, #0
   8b14e:	4d08      	ldr	r5, [pc, #32]	; (8b170 <_read_r+0x28>)
   8b150:	4611      	mov	r1, r2
   8b152:	4604      	mov	r4, r0
   8b154:	461a      	mov	r2, r3
   8b156:	4638      	mov	r0, r7
   8b158:	602e      	str	r6, [r5, #0]
   8b15a:	f7f7 fbb9 	bl	828d0 <_read>
   8b15e:	1c43      	adds	r3, r0, #1
   8b160:	d000      	beq.n	8b164 <_read_r+0x1c>
   8b162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b164:	682b      	ldr	r3, [r5, #0]
   8b166:	2b00      	cmp	r3, #0
   8b168:	d0fb      	beq.n	8b162 <_read_r+0x1a>
   8b16a:	6023      	str	r3, [r4, #0]
   8b16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b16e:	bf00      	nop
   8b170:	2000199c 	.word	0x2000199c

0008b174 <abort>:
   8b174:	2006      	movs	r0, #6
   8b176:	b508      	push	{r3, lr}
   8b178:	f000 f830 	bl	8b1dc <raise>
   8b17c:	2001      	movs	r0, #1
   8b17e:	f7f7 fca9 	bl	82ad4 <_exit>
   8b182:	bf00      	nop

0008b184 <_raise_r>:
   8b184:	291f      	cmp	r1, #31
   8b186:	b538      	push	{r3, r4, r5, lr}
   8b188:	4605      	mov	r5, r0
   8b18a:	d821      	bhi.n	8b1d0 <_raise_r+0x4c>
   8b18c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8b190:	460c      	mov	r4, r1
   8b192:	b16a      	cbz	r2, 8b1b0 <_raise_r+0x2c>
   8b194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8b198:	b153      	cbz	r3, 8b1b0 <_raise_r+0x2c>
   8b19a:	2b01      	cmp	r3, #1
   8b19c:	d016      	beq.n	8b1cc <_raise_r+0x48>
   8b19e:	1c59      	adds	r1, r3, #1
   8b1a0:	d010      	beq.n	8b1c4 <_raise_r+0x40>
   8b1a2:	2500      	movs	r5, #0
   8b1a4:	4620      	mov	r0, r4
   8b1a6:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8b1aa:	4798      	blx	r3
   8b1ac:	4628      	mov	r0, r5
   8b1ae:	bd38      	pop	{r3, r4, r5, pc}
   8b1b0:	4628      	mov	r0, r5
   8b1b2:	f000 f831 	bl	8b218 <_getpid_r>
   8b1b6:	4622      	mov	r2, r4
   8b1b8:	4601      	mov	r1, r0
   8b1ba:	4628      	mov	r0, r5
   8b1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b1c0:	f000 b814 	b.w	8b1ec <_kill_r>
   8b1c4:	2316      	movs	r3, #22
   8b1c6:	2001      	movs	r0, #1
   8b1c8:	602b      	str	r3, [r5, #0]
   8b1ca:	bd38      	pop	{r3, r4, r5, pc}
   8b1cc:	2000      	movs	r0, #0
   8b1ce:	bd38      	pop	{r3, r4, r5, pc}
   8b1d0:	2316      	movs	r3, #22
   8b1d2:	f04f 30ff 	mov.w	r0, #4294967295
   8b1d6:	602b      	str	r3, [r5, #0]
   8b1d8:	bd38      	pop	{r3, r4, r5, pc}
   8b1da:	bf00      	nop

0008b1dc <raise>:
   8b1dc:	4b02      	ldr	r3, [pc, #8]	; (8b1e8 <raise+0xc>)
   8b1de:	4601      	mov	r1, r0
   8b1e0:	6818      	ldr	r0, [r3, #0]
   8b1e2:	f7ff bfcf 	b.w	8b184 <_raise_r>
   8b1e6:	bf00      	nop
   8b1e8:	200003c8 	.word	0x200003c8

0008b1ec <_kill_r>:
   8b1ec:	b570      	push	{r4, r5, r6, lr}
   8b1ee:	460c      	mov	r4, r1
   8b1f0:	4603      	mov	r3, r0
   8b1f2:	2600      	movs	r6, #0
   8b1f4:	4d07      	ldr	r5, [pc, #28]	; (8b214 <_kill_r+0x28>)
   8b1f6:	4620      	mov	r0, r4
   8b1f8:	4611      	mov	r1, r2
   8b1fa:	461c      	mov	r4, r3
   8b1fc:	602e      	str	r6, [r5, #0]
   8b1fe:	f7f7 fc73 	bl	82ae8 <_kill>
   8b202:	1c43      	adds	r3, r0, #1
   8b204:	d000      	beq.n	8b208 <_kill_r+0x1c>
   8b206:	bd70      	pop	{r4, r5, r6, pc}
   8b208:	682b      	ldr	r3, [r5, #0]
   8b20a:	2b00      	cmp	r3, #0
   8b20c:	d0fb      	beq.n	8b206 <_kill_r+0x1a>
   8b20e:	6023      	str	r3, [r4, #0]
   8b210:	bd70      	pop	{r4, r5, r6, pc}
   8b212:	bf00      	nop
   8b214:	2000199c 	.word	0x2000199c

0008b218 <_getpid_r>:
   8b218:	f7f7 bc67 	b.w	82aea <_getpid>

0008b21c <__aeabi_drsub>:
   8b21c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8b220:	e002      	b.n	8b228 <__adddf3>
   8b222:	bf00      	nop

0008b224 <__aeabi_dsub>:
   8b224:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008b228 <__adddf3>:
   8b228:	b530      	push	{r4, r5, lr}
   8b22a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8b22e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8b232:	ea94 0f05 	teq	r4, r5
   8b236:	bf08      	it	eq
   8b238:	ea90 0f02 	teqeq	r0, r2
   8b23c:	bf1f      	itttt	ne
   8b23e:	ea54 0c00 	orrsne.w	ip, r4, r0
   8b242:	ea55 0c02 	orrsne.w	ip, r5, r2
   8b246:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8b24a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b24e:	f000 80e2 	beq.w	8b416 <__adddf3+0x1ee>
   8b252:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8b256:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8b25a:	bfb8      	it	lt
   8b25c:	426d      	neglt	r5, r5
   8b25e:	dd0c      	ble.n	8b27a <__adddf3+0x52>
   8b260:	442c      	add	r4, r5
   8b262:	ea80 0202 	eor.w	r2, r0, r2
   8b266:	ea81 0303 	eor.w	r3, r1, r3
   8b26a:	ea82 0000 	eor.w	r0, r2, r0
   8b26e:	ea83 0101 	eor.w	r1, r3, r1
   8b272:	ea80 0202 	eor.w	r2, r0, r2
   8b276:	ea81 0303 	eor.w	r3, r1, r3
   8b27a:	2d36      	cmp	r5, #54	; 0x36
   8b27c:	bf88      	it	hi
   8b27e:	bd30      	pophi	{r4, r5, pc}
   8b280:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8b284:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b288:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8b28c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8b290:	d002      	beq.n	8b298 <__adddf3+0x70>
   8b292:	4240      	negs	r0, r0
   8b294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b298:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8b29c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b2a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8b2a4:	d002      	beq.n	8b2ac <__adddf3+0x84>
   8b2a6:	4252      	negs	r2, r2
   8b2a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b2ac:	ea94 0f05 	teq	r4, r5
   8b2b0:	f000 80a7 	beq.w	8b402 <__adddf3+0x1da>
   8b2b4:	f1a4 0401 	sub.w	r4, r4, #1
   8b2b8:	f1d5 0e20 	rsbs	lr, r5, #32
   8b2bc:	db0d      	blt.n	8b2da <__adddf3+0xb2>
   8b2be:	fa02 fc0e 	lsl.w	ip, r2, lr
   8b2c2:	fa22 f205 	lsr.w	r2, r2, r5
   8b2c6:	1880      	adds	r0, r0, r2
   8b2c8:	f141 0100 	adc.w	r1, r1, #0
   8b2cc:	fa03 f20e 	lsl.w	r2, r3, lr
   8b2d0:	1880      	adds	r0, r0, r2
   8b2d2:	fa43 f305 	asr.w	r3, r3, r5
   8b2d6:	4159      	adcs	r1, r3
   8b2d8:	e00e      	b.n	8b2f8 <__adddf3+0xd0>
   8b2da:	f1a5 0520 	sub.w	r5, r5, #32
   8b2de:	f10e 0e20 	add.w	lr, lr, #32
   8b2e2:	2a01      	cmp	r2, #1
   8b2e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   8b2e8:	bf28      	it	cs
   8b2ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   8b2ee:	fa43 f305 	asr.w	r3, r3, r5
   8b2f2:	18c0      	adds	r0, r0, r3
   8b2f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8b2f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b2fc:	d507      	bpl.n	8b30e <__adddf3+0xe6>
   8b2fe:	f04f 0e00 	mov.w	lr, #0
   8b302:	f1dc 0c00 	rsbs	ip, ip, #0
   8b306:	eb7e 0000 	sbcs.w	r0, lr, r0
   8b30a:	eb6e 0101 	sbc.w	r1, lr, r1
   8b30e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8b312:	d31b      	bcc.n	8b34c <__adddf3+0x124>
   8b314:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8b318:	d30c      	bcc.n	8b334 <__adddf3+0x10c>
   8b31a:	0849      	lsrs	r1, r1, #1
   8b31c:	ea5f 0030 	movs.w	r0, r0, rrx
   8b320:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8b324:	f104 0401 	add.w	r4, r4, #1
   8b328:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8b32c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8b330:	f080 809a 	bcs.w	8b468 <__adddf3+0x240>
   8b334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8b338:	bf08      	it	eq
   8b33a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b33e:	f150 0000 	adcs.w	r0, r0, #0
   8b342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b346:	ea41 0105 	orr.w	r1, r1, r5
   8b34a:	bd30      	pop	{r4, r5, pc}
   8b34c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8b350:	4140      	adcs	r0, r0
   8b352:	eb41 0101 	adc.w	r1, r1, r1
   8b356:	3c01      	subs	r4, #1
   8b358:	bf28      	it	cs
   8b35a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8b35e:	d2e9      	bcs.n	8b334 <__adddf3+0x10c>
   8b360:	f091 0f00 	teq	r1, #0
   8b364:	bf04      	itt	eq
   8b366:	4601      	moveq	r1, r0
   8b368:	2000      	moveq	r0, #0
   8b36a:	fab1 f381 	clz	r3, r1
   8b36e:	bf08      	it	eq
   8b370:	3320      	addeq	r3, #32
   8b372:	f1a3 030b 	sub.w	r3, r3, #11
   8b376:	f1b3 0220 	subs.w	r2, r3, #32
   8b37a:	da0c      	bge.n	8b396 <__adddf3+0x16e>
   8b37c:	320c      	adds	r2, #12
   8b37e:	dd08      	ble.n	8b392 <__adddf3+0x16a>
   8b380:	f102 0c14 	add.w	ip, r2, #20
   8b384:	f1c2 020c 	rsb	r2, r2, #12
   8b388:	fa01 f00c 	lsl.w	r0, r1, ip
   8b38c:	fa21 f102 	lsr.w	r1, r1, r2
   8b390:	e00c      	b.n	8b3ac <__adddf3+0x184>
   8b392:	f102 0214 	add.w	r2, r2, #20
   8b396:	bfd8      	it	le
   8b398:	f1c2 0c20 	rsble	ip, r2, #32
   8b39c:	fa01 f102 	lsl.w	r1, r1, r2
   8b3a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   8b3a4:	bfdc      	itt	le
   8b3a6:	ea41 010c 	orrle.w	r1, r1, ip
   8b3aa:	4090      	lslle	r0, r2
   8b3ac:	1ae4      	subs	r4, r4, r3
   8b3ae:	bfa2      	ittt	ge
   8b3b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8b3b4:	4329      	orrge	r1, r5
   8b3b6:	bd30      	popge	{r4, r5, pc}
   8b3b8:	ea6f 0404 	mvn.w	r4, r4
   8b3bc:	3c1f      	subs	r4, #31
   8b3be:	da1c      	bge.n	8b3fa <__adddf3+0x1d2>
   8b3c0:	340c      	adds	r4, #12
   8b3c2:	dc0e      	bgt.n	8b3e2 <__adddf3+0x1ba>
   8b3c4:	f104 0414 	add.w	r4, r4, #20
   8b3c8:	f1c4 0220 	rsb	r2, r4, #32
   8b3cc:	fa20 f004 	lsr.w	r0, r0, r4
   8b3d0:	fa01 f302 	lsl.w	r3, r1, r2
   8b3d4:	ea40 0003 	orr.w	r0, r0, r3
   8b3d8:	fa21 f304 	lsr.w	r3, r1, r4
   8b3dc:	ea45 0103 	orr.w	r1, r5, r3
   8b3e0:	bd30      	pop	{r4, r5, pc}
   8b3e2:	f1c4 040c 	rsb	r4, r4, #12
   8b3e6:	f1c4 0220 	rsb	r2, r4, #32
   8b3ea:	fa20 f002 	lsr.w	r0, r0, r2
   8b3ee:	fa01 f304 	lsl.w	r3, r1, r4
   8b3f2:	ea40 0003 	orr.w	r0, r0, r3
   8b3f6:	4629      	mov	r1, r5
   8b3f8:	bd30      	pop	{r4, r5, pc}
   8b3fa:	fa21 f004 	lsr.w	r0, r1, r4
   8b3fe:	4629      	mov	r1, r5
   8b400:	bd30      	pop	{r4, r5, pc}
   8b402:	f094 0f00 	teq	r4, #0
   8b406:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8b40a:	bf06      	itte	eq
   8b40c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8b410:	3401      	addeq	r4, #1
   8b412:	3d01      	subne	r5, #1
   8b414:	e74e      	b.n	8b2b4 <__adddf3+0x8c>
   8b416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b41a:	bf18      	it	ne
   8b41c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b420:	d029      	beq.n	8b476 <__adddf3+0x24e>
   8b422:	ea94 0f05 	teq	r4, r5
   8b426:	bf08      	it	eq
   8b428:	ea90 0f02 	teqeq	r0, r2
   8b42c:	d005      	beq.n	8b43a <__adddf3+0x212>
   8b42e:	ea54 0c00 	orrs.w	ip, r4, r0
   8b432:	bf04      	itt	eq
   8b434:	4619      	moveq	r1, r3
   8b436:	4610      	moveq	r0, r2
   8b438:	bd30      	pop	{r4, r5, pc}
   8b43a:	ea91 0f03 	teq	r1, r3
   8b43e:	bf1e      	ittt	ne
   8b440:	2100      	movne	r1, #0
   8b442:	2000      	movne	r0, #0
   8b444:	bd30      	popne	{r4, r5, pc}
   8b446:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8b44a:	d105      	bne.n	8b458 <__adddf3+0x230>
   8b44c:	0040      	lsls	r0, r0, #1
   8b44e:	4149      	adcs	r1, r1
   8b450:	bf28      	it	cs
   8b452:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8b456:	bd30      	pop	{r4, r5, pc}
   8b458:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8b45c:	bf3c      	itt	cc
   8b45e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8b462:	bd30      	popcc	{r4, r5, pc}
   8b464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b468:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8b46c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b470:	f04f 0000 	mov.w	r0, #0
   8b474:	bd30      	pop	{r4, r5, pc}
   8b476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b47a:	bf1a      	itte	ne
   8b47c:	4619      	movne	r1, r3
   8b47e:	4610      	movne	r0, r2
   8b480:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8b484:	bf1c      	itt	ne
   8b486:	460b      	movne	r3, r1
   8b488:	4602      	movne	r2, r0
   8b48a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b48e:	bf06      	itte	eq
   8b490:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8b494:	ea91 0f03 	teqeq	r1, r3
   8b498:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8b49c:	bd30      	pop	{r4, r5, pc}
   8b49e:	bf00      	nop

0008b4a0 <__aeabi_ui2d>:
   8b4a0:	f090 0f00 	teq	r0, #0
   8b4a4:	bf04      	itt	eq
   8b4a6:	2100      	moveq	r1, #0
   8b4a8:	4770      	bxeq	lr
   8b4aa:	b530      	push	{r4, r5, lr}
   8b4ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b4b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b4b4:	f04f 0500 	mov.w	r5, #0
   8b4b8:	f04f 0100 	mov.w	r1, #0
   8b4bc:	e750      	b.n	8b360 <__adddf3+0x138>
   8b4be:	bf00      	nop

0008b4c0 <__aeabi_i2d>:
   8b4c0:	f090 0f00 	teq	r0, #0
   8b4c4:	bf04      	itt	eq
   8b4c6:	2100      	moveq	r1, #0
   8b4c8:	4770      	bxeq	lr
   8b4ca:	b530      	push	{r4, r5, lr}
   8b4cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b4d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b4d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8b4d8:	bf48      	it	mi
   8b4da:	4240      	negmi	r0, r0
   8b4dc:	f04f 0100 	mov.w	r1, #0
   8b4e0:	e73e      	b.n	8b360 <__adddf3+0x138>
   8b4e2:	bf00      	nop

0008b4e4 <__aeabi_f2d>:
   8b4e4:	0042      	lsls	r2, r0, #1
   8b4e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8b4ea:	ea4f 0131 	mov.w	r1, r1, rrx
   8b4ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8b4f2:	bf1f      	itttt	ne
   8b4f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8b4f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8b4fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8b500:	4770      	bxne	lr
   8b502:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8b506:	bf08      	it	eq
   8b508:	4770      	bxeq	lr
   8b50a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8b50e:	bf04      	itt	eq
   8b510:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8b514:	4770      	bxeq	lr
   8b516:	b530      	push	{r4, r5, lr}
   8b518:	f44f 7460 	mov.w	r4, #896	; 0x380
   8b51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b524:	e71c      	b.n	8b360 <__adddf3+0x138>
   8b526:	bf00      	nop

0008b528 <__aeabi_ul2d>:
   8b528:	ea50 0201 	orrs.w	r2, r0, r1
   8b52c:	bf08      	it	eq
   8b52e:	4770      	bxeq	lr
   8b530:	b530      	push	{r4, r5, lr}
   8b532:	f04f 0500 	mov.w	r5, #0
   8b536:	e00a      	b.n	8b54e <__aeabi_l2d+0x16>

0008b538 <__aeabi_l2d>:
   8b538:	ea50 0201 	orrs.w	r2, r0, r1
   8b53c:	bf08      	it	eq
   8b53e:	4770      	bxeq	lr
   8b540:	b530      	push	{r4, r5, lr}
   8b542:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8b546:	d502      	bpl.n	8b54e <__aeabi_l2d+0x16>
   8b548:	4240      	negs	r0, r0
   8b54a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b54e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b552:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b556:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8b55a:	f43f aed8 	beq.w	8b30e <__adddf3+0xe6>
   8b55e:	f04f 0203 	mov.w	r2, #3
   8b562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b566:	bf18      	it	ne
   8b568:	3203      	addne	r2, #3
   8b56a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b56e:	bf18      	it	ne
   8b570:	3203      	addne	r2, #3
   8b572:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8b576:	f1c2 0320 	rsb	r3, r2, #32
   8b57a:	fa00 fc03 	lsl.w	ip, r0, r3
   8b57e:	fa20 f002 	lsr.w	r0, r0, r2
   8b582:	fa01 fe03 	lsl.w	lr, r1, r3
   8b586:	ea40 000e 	orr.w	r0, r0, lr
   8b58a:	fa21 f102 	lsr.w	r1, r1, r2
   8b58e:	4414      	add	r4, r2
   8b590:	e6bd      	b.n	8b30e <__adddf3+0xe6>
   8b592:	bf00      	nop

0008b594 <__aeabi_dmul>:
   8b594:	b570      	push	{r4, r5, r6, lr}
   8b596:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8b59a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8b59e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8b5a2:	bf1d      	ittte	ne
   8b5a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8b5a8:	ea94 0f0c 	teqne	r4, ip
   8b5ac:	ea95 0f0c 	teqne	r5, ip
   8b5b0:	f000 f8de 	bleq	8b770 <__aeabi_dmul+0x1dc>
   8b5b4:	442c      	add	r4, r5
   8b5b6:	ea81 0603 	eor.w	r6, r1, r3
   8b5ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8b5be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8b5c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8b5c6:	bf18      	it	ne
   8b5c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8b5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b5d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b5d4:	d038      	beq.n	8b648 <__aeabi_dmul+0xb4>
   8b5d6:	fba0 ce02 	umull	ip, lr, r0, r2
   8b5da:	f04f 0500 	mov.w	r5, #0
   8b5de:	fbe1 e502 	umlal	lr, r5, r1, r2
   8b5e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8b5e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   8b5ea:	f04f 0600 	mov.w	r6, #0
   8b5ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   8b5f2:	f09c 0f00 	teq	ip, #0
   8b5f6:	bf18      	it	ne
   8b5f8:	f04e 0e01 	orrne.w	lr, lr, #1
   8b5fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8b600:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8b604:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8b608:	d204      	bcs.n	8b614 <__aeabi_dmul+0x80>
   8b60a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8b60e:	416d      	adcs	r5, r5
   8b610:	eb46 0606 	adc.w	r6, r6, r6
   8b614:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8b618:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8b61c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8b620:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8b624:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8b628:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8b62c:	bf88      	it	hi
   8b62e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8b632:	d81e      	bhi.n	8b672 <__aeabi_dmul+0xde>
   8b634:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8b638:	bf08      	it	eq
   8b63a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8b63e:	f150 0000 	adcs.w	r0, r0, #0
   8b642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b646:	bd70      	pop	{r4, r5, r6, pc}
   8b648:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8b64c:	ea46 0101 	orr.w	r1, r6, r1
   8b650:	ea40 0002 	orr.w	r0, r0, r2
   8b654:	ea81 0103 	eor.w	r1, r1, r3
   8b658:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8b65c:	bfc2      	ittt	gt
   8b65e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8b662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8b666:	bd70      	popgt	{r4, r5, r6, pc}
   8b668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b66c:	f04f 0e00 	mov.w	lr, #0
   8b670:	3c01      	subs	r4, #1
   8b672:	f300 80ab 	bgt.w	8b7cc <__aeabi_dmul+0x238>
   8b676:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8b67a:	bfde      	ittt	le
   8b67c:	2000      	movle	r0, #0
   8b67e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8b682:	bd70      	pople	{r4, r5, r6, pc}
   8b684:	f1c4 0400 	rsb	r4, r4, #0
   8b688:	3c20      	subs	r4, #32
   8b68a:	da35      	bge.n	8b6f8 <__aeabi_dmul+0x164>
   8b68c:	340c      	adds	r4, #12
   8b68e:	dc1b      	bgt.n	8b6c8 <__aeabi_dmul+0x134>
   8b690:	f104 0414 	add.w	r4, r4, #20
   8b694:	f1c4 0520 	rsb	r5, r4, #32
   8b698:	fa00 f305 	lsl.w	r3, r0, r5
   8b69c:	fa20 f004 	lsr.w	r0, r0, r4
   8b6a0:	fa01 f205 	lsl.w	r2, r1, r5
   8b6a4:	ea40 0002 	orr.w	r0, r0, r2
   8b6a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8b6ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b6b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b6b4:	fa21 f604 	lsr.w	r6, r1, r4
   8b6b8:	eb42 0106 	adc.w	r1, r2, r6
   8b6bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b6c0:	bf08      	it	eq
   8b6c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b6c6:	bd70      	pop	{r4, r5, r6, pc}
   8b6c8:	f1c4 040c 	rsb	r4, r4, #12
   8b6cc:	f1c4 0520 	rsb	r5, r4, #32
   8b6d0:	fa00 f304 	lsl.w	r3, r0, r4
   8b6d4:	fa20 f005 	lsr.w	r0, r0, r5
   8b6d8:	fa01 f204 	lsl.w	r2, r1, r4
   8b6dc:	ea40 0002 	orr.w	r0, r0, r2
   8b6e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b6e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b6e8:	f141 0100 	adc.w	r1, r1, #0
   8b6ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b6f0:	bf08      	it	eq
   8b6f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b6f6:	bd70      	pop	{r4, r5, r6, pc}
   8b6f8:	f1c4 0520 	rsb	r5, r4, #32
   8b6fc:	fa00 f205 	lsl.w	r2, r0, r5
   8b700:	ea4e 0e02 	orr.w	lr, lr, r2
   8b704:	fa20 f304 	lsr.w	r3, r0, r4
   8b708:	fa01 f205 	lsl.w	r2, r1, r5
   8b70c:	ea43 0302 	orr.w	r3, r3, r2
   8b710:	fa21 f004 	lsr.w	r0, r1, r4
   8b714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b718:	fa21 f204 	lsr.w	r2, r1, r4
   8b71c:	ea20 0002 	bic.w	r0, r0, r2
   8b720:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8b724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b728:	bf08      	it	eq
   8b72a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b72e:	bd70      	pop	{r4, r5, r6, pc}
   8b730:	f094 0f00 	teq	r4, #0
   8b734:	d10f      	bne.n	8b756 <__aeabi_dmul+0x1c2>
   8b736:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8b73a:	0040      	lsls	r0, r0, #1
   8b73c:	eb41 0101 	adc.w	r1, r1, r1
   8b740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b744:	bf08      	it	eq
   8b746:	3c01      	subeq	r4, #1
   8b748:	d0f7      	beq.n	8b73a <__aeabi_dmul+0x1a6>
   8b74a:	ea41 0106 	orr.w	r1, r1, r6
   8b74e:	f095 0f00 	teq	r5, #0
   8b752:	bf18      	it	ne
   8b754:	4770      	bxne	lr
   8b756:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8b75a:	0052      	lsls	r2, r2, #1
   8b75c:	eb43 0303 	adc.w	r3, r3, r3
   8b760:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8b764:	bf08      	it	eq
   8b766:	3d01      	subeq	r5, #1
   8b768:	d0f7      	beq.n	8b75a <__aeabi_dmul+0x1c6>
   8b76a:	ea43 0306 	orr.w	r3, r3, r6
   8b76e:	4770      	bx	lr
   8b770:	ea94 0f0c 	teq	r4, ip
   8b774:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8b778:	bf18      	it	ne
   8b77a:	ea95 0f0c 	teqne	r5, ip
   8b77e:	d00c      	beq.n	8b79a <__aeabi_dmul+0x206>
   8b780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b784:	bf18      	it	ne
   8b786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b78a:	d1d1      	bne.n	8b730 <__aeabi_dmul+0x19c>
   8b78c:	ea81 0103 	eor.w	r1, r1, r3
   8b790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b794:	f04f 0000 	mov.w	r0, #0
   8b798:	bd70      	pop	{r4, r5, r6, pc}
   8b79a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b79e:	bf06      	itte	eq
   8b7a0:	4610      	moveq	r0, r2
   8b7a2:	4619      	moveq	r1, r3
   8b7a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b7a8:	d019      	beq.n	8b7de <__aeabi_dmul+0x24a>
   8b7aa:	ea94 0f0c 	teq	r4, ip
   8b7ae:	d102      	bne.n	8b7b6 <__aeabi_dmul+0x222>
   8b7b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8b7b4:	d113      	bne.n	8b7de <__aeabi_dmul+0x24a>
   8b7b6:	ea95 0f0c 	teq	r5, ip
   8b7ba:	d105      	bne.n	8b7c8 <__aeabi_dmul+0x234>
   8b7bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8b7c0:	bf1c      	itt	ne
   8b7c2:	4610      	movne	r0, r2
   8b7c4:	4619      	movne	r1, r3
   8b7c6:	d10a      	bne.n	8b7de <__aeabi_dmul+0x24a>
   8b7c8:	ea81 0103 	eor.w	r1, r1, r3
   8b7cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b7d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8b7d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b7d8:	f04f 0000 	mov.w	r0, #0
   8b7dc:	bd70      	pop	{r4, r5, r6, pc}
   8b7de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8b7e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8b7e6:	bd70      	pop	{r4, r5, r6, pc}

0008b7e8 <__aeabi_ddiv>:
   8b7e8:	b570      	push	{r4, r5, r6, lr}
   8b7ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8b7ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8b7f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8b7f6:	bf1d      	ittte	ne
   8b7f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8b7fc:	ea94 0f0c 	teqne	r4, ip
   8b800:	ea95 0f0c 	teqne	r5, ip
   8b804:	f000 f8a7 	bleq	8b956 <__aeabi_ddiv+0x16e>
   8b808:	eba4 0405 	sub.w	r4, r4, r5
   8b80c:	ea81 0e03 	eor.w	lr, r1, r3
   8b810:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8b814:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b818:	f000 8088 	beq.w	8b92c <__aeabi_ddiv+0x144>
   8b81c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b820:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8b824:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8b828:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8b82c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8b830:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8b834:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8b838:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8b83c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8b840:	429d      	cmp	r5, r3
   8b842:	bf08      	it	eq
   8b844:	4296      	cmpeq	r6, r2
   8b846:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8b84a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8b84e:	d202      	bcs.n	8b856 <__aeabi_ddiv+0x6e>
   8b850:	085b      	lsrs	r3, r3, #1
   8b852:	ea4f 0232 	mov.w	r2, r2, rrx
   8b856:	1ab6      	subs	r6, r6, r2
   8b858:	eb65 0503 	sbc.w	r5, r5, r3
   8b85c:	085b      	lsrs	r3, r3, #1
   8b85e:	ea4f 0232 	mov.w	r2, r2, rrx
   8b862:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8b866:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8b86a:	ebb6 0e02 	subs.w	lr, r6, r2
   8b86e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b872:	bf22      	ittt	cs
   8b874:	1ab6      	subcs	r6, r6, r2
   8b876:	4675      	movcs	r5, lr
   8b878:	ea40 000c 	orrcs.w	r0, r0, ip
   8b87c:	085b      	lsrs	r3, r3, #1
   8b87e:	ea4f 0232 	mov.w	r2, r2, rrx
   8b882:	ebb6 0e02 	subs.w	lr, r6, r2
   8b886:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b88a:	bf22      	ittt	cs
   8b88c:	1ab6      	subcs	r6, r6, r2
   8b88e:	4675      	movcs	r5, lr
   8b890:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8b894:	085b      	lsrs	r3, r3, #1
   8b896:	ea4f 0232 	mov.w	r2, r2, rrx
   8b89a:	ebb6 0e02 	subs.w	lr, r6, r2
   8b89e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b8a2:	bf22      	ittt	cs
   8b8a4:	1ab6      	subcs	r6, r6, r2
   8b8a6:	4675      	movcs	r5, lr
   8b8a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8b8ac:	085b      	lsrs	r3, r3, #1
   8b8ae:	ea4f 0232 	mov.w	r2, r2, rrx
   8b8b2:	ebb6 0e02 	subs.w	lr, r6, r2
   8b8b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b8ba:	bf22      	ittt	cs
   8b8bc:	1ab6      	subcs	r6, r6, r2
   8b8be:	4675      	movcs	r5, lr
   8b8c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8b8c4:	ea55 0e06 	orrs.w	lr, r5, r6
   8b8c8:	d018      	beq.n	8b8fc <__aeabi_ddiv+0x114>
   8b8ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8b8ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8b8d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8b8d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8b8da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8b8de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8b8e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8b8e6:	d1c0      	bne.n	8b86a <__aeabi_ddiv+0x82>
   8b8e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b8ec:	d10b      	bne.n	8b906 <__aeabi_ddiv+0x11e>
   8b8ee:	ea41 0100 	orr.w	r1, r1, r0
   8b8f2:	f04f 0000 	mov.w	r0, #0
   8b8f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8b8fa:	e7b6      	b.n	8b86a <__aeabi_ddiv+0x82>
   8b8fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b900:	bf04      	itt	eq
   8b902:	4301      	orreq	r1, r0
   8b904:	2000      	moveq	r0, #0
   8b906:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8b90a:	bf88      	it	hi
   8b90c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8b910:	f63f aeaf 	bhi.w	8b672 <__aeabi_dmul+0xde>
   8b914:	ebb5 0c03 	subs.w	ip, r5, r3
   8b918:	bf04      	itt	eq
   8b91a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8b91e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b922:	f150 0000 	adcs.w	r0, r0, #0
   8b926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b92a:	bd70      	pop	{r4, r5, r6, pc}
   8b92c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8b930:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8b934:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8b938:	bfc2      	ittt	gt
   8b93a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8b93e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8b942:	bd70      	popgt	{r4, r5, r6, pc}
   8b944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b948:	f04f 0e00 	mov.w	lr, #0
   8b94c:	3c01      	subs	r4, #1
   8b94e:	e690      	b.n	8b672 <__aeabi_dmul+0xde>
   8b950:	ea45 0e06 	orr.w	lr, r5, r6
   8b954:	e68d      	b.n	8b672 <__aeabi_dmul+0xde>
   8b956:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8b95a:	ea94 0f0c 	teq	r4, ip
   8b95e:	bf08      	it	eq
   8b960:	ea95 0f0c 	teqeq	r5, ip
   8b964:	f43f af3b 	beq.w	8b7de <__aeabi_dmul+0x24a>
   8b968:	ea94 0f0c 	teq	r4, ip
   8b96c:	d10a      	bne.n	8b984 <__aeabi_ddiv+0x19c>
   8b96e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b972:	f47f af34 	bne.w	8b7de <__aeabi_dmul+0x24a>
   8b976:	ea95 0f0c 	teq	r5, ip
   8b97a:	f47f af25 	bne.w	8b7c8 <__aeabi_dmul+0x234>
   8b97e:	4610      	mov	r0, r2
   8b980:	4619      	mov	r1, r3
   8b982:	e72c      	b.n	8b7de <__aeabi_dmul+0x24a>
   8b984:	ea95 0f0c 	teq	r5, ip
   8b988:	d106      	bne.n	8b998 <__aeabi_ddiv+0x1b0>
   8b98a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8b98e:	f43f aefd 	beq.w	8b78c <__aeabi_dmul+0x1f8>
   8b992:	4610      	mov	r0, r2
   8b994:	4619      	mov	r1, r3
   8b996:	e722      	b.n	8b7de <__aeabi_dmul+0x24a>
   8b998:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b99c:	bf18      	it	ne
   8b99e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b9a2:	f47f aec5 	bne.w	8b730 <__aeabi_dmul+0x19c>
   8b9a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8b9aa:	f47f af0d 	bne.w	8b7c8 <__aeabi_dmul+0x234>
   8b9ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8b9b2:	f47f aeeb 	bne.w	8b78c <__aeabi_dmul+0x1f8>
   8b9b6:	e712      	b.n	8b7de <__aeabi_dmul+0x24a>

0008b9b8 <__gedf2>:
   8b9b8:	f04f 3cff 	mov.w	ip, #4294967295
   8b9bc:	e006      	b.n	8b9cc <__cmpdf2+0x4>
   8b9be:	bf00      	nop

0008b9c0 <__ledf2>:
   8b9c0:	f04f 0c01 	mov.w	ip, #1
   8b9c4:	e002      	b.n	8b9cc <__cmpdf2+0x4>
   8b9c6:	bf00      	nop

0008b9c8 <__cmpdf2>:
   8b9c8:	f04f 0c01 	mov.w	ip, #1
   8b9cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   8b9d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8b9d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8b9d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8b9dc:	bf18      	it	ne
   8b9de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8b9e2:	d01b      	beq.n	8ba1c <__cmpdf2+0x54>
   8b9e4:	b001      	add	sp, #4
   8b9e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8b9ea:	bf0c      	ite	eq
   8b9ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8b9f0:	ea91 0f03 	teqne	r1, r3
   8b9f4:	bf02      	ittt	eq
   8b9f6:	ea90 0f02 	teqeq	r0, r2
   8b9fa:	2000      	moveq	r0, #0
   8b9fc:	4770      	bxeq	lr
   8b9fe:	f110 0f00 	cmn.w	r0, #0
   8ba02:	ea91 0f03 	teq	r1, r3
   8ba06:	bf58      	it	pl
   8ba08:	4299      	cmppl	r1, r3
   8ba0a:	bf08      	it	eq
   8ba0c:	4290      	cmpeq	r0, r2
   8ba0e:	bf2c      	ite	cs
   8ba10:	17d8      	asrcs	r0, r3, #31
   8ba12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8ba16:	f040 0001 	orr.w	r0, r0, #1
   8ba1a:	4770      	bx	lr
   8ba1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ba20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ba24:	d102      	bne.n	8ba2c <__cmpdf2+0x64>
   8ba26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8ba2a:	d107      	bne.n	8ba3c <__cmpdf2+0x74>
   8ba2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ba30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ba34:	d1d6      	bne.n	8b9e4 <__cmpdf2+0x1c>
   8ba36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8ba3a:	d0d3      	beq.n	8b9e4 <__cmpdf2+0x1c>
   8ba3c:	f85d 0b04 	ldr.w	r0, [sp], #4
   8ba40:	4770      	bx	lr
   8ba42:	bf00      	nop

0008ba44 <__aeabi_cdrcmple>:
   8ba44:	4684      	mov	ip, r0
   8ba46:	4610      	mov	r0, r2
   8ba48:	4662      	mov	r2, ip
   8ba4a:	468c      	mov	ip, r1
   8ba4c:	4619      	mov	r1, r3
   8ba4e:	4663      	mov	r3, ip
   8ba50:	e000      	b.n	8ba54 <__aeabi_cdcmpeq>
   8ba52:	bf00      	nop

0008ba54 <__aeabi_cdcmpeq>:
   8ba54:	b501      	push	{r0, lr}
   8ba56:	f7ff ffb7 	bl	8b9c8 <__cmpdf2>
   8ba5a:	2800      	cmp	r0, #0
   8ba5c:	bf48      	it	mi
   8ba5e:	f110 0f00 	cmnmi.w	r0, #0
   8ba62:	bd01      	pop	{r0, pc}

0008ba64 <__aeabi_dcmpeq>:
   8ba64:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba68:	f7ff fff4 	bl	8ba54 <__aeabi_cdcmpeq>
   8ba6c:	bf0c      	ite	eq
   8ba6e:	2001      	moveq	r0, #1
   8ba70:	2000      	movne	r0, #0
   8ba72:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba76:	bf00      	nop

0008ba78 <__aeabi_dcmplt>:
   8ba78:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba7c:	f7ff ffea 	bl	8ba54 <__aeabi_cdcmpeq>
   8ba80:	bf34      	ite	cc
   8ba82:	2001      	movcc	r0, #1
   8ba84:	2000      	movcs	r0, #0
   8ba86:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba8a:	bf00      	nop

0008ba8c <__aeabi_dcmple>:
   8ba8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba90:	f7ff ffe0 	bl	8ba54 <__aeabi_cdcmpeq>
   8ba94:	bf94      	ite	ls
   8ba96:	2001      	movls	r0, #1
   8ba98:	2000      	movhi	r0, #0
   8ba9a:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba9e:	bf00      	nop

0008baa0 <__aeabi_dcmpge>:
   8baa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8baa4:	f7ff ffce 	bl	8ba44 <__aeabi_cdrcmple>
   8baa8:	bf94      	ite	ls
   8baaa:	2001      	movls	r0, #1
   8baac:	2000      	movhi	r0, #0
   8baae:	f85d fb08 	ldr.w	pc, [sp], #8
   8bab2:	bf00      	nop

0008bab4 <__aeabi_dcmpgt>:
   8bab4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bab8:	f7ff ffc4 	bl	8ba44 <__aeabi_cdrcmple>
   8babc:	bf34      	ite	cc
   8babe:	2001      	movcc	r0, #1
   8bac0:	2000      	movcs	r0, #0
   8bac2:	f85d fb08 	ldr.w	pc, [sp], #8
   8bac6:	bf00      	nop

0008bac8 <__aeabi_dcmpun>:
   8bac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8bacc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bad0:	d102      	bne.n	8bad8 <__aeabi_dcmpun+0x10>
   8bad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8bad6:	d10a      	bne.n	8baee <__aeabi_dcmpun+0x26>
   8bad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8badc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bae0:	d102      	bne.n	8bae8 <__aeabi_dcmpun+0x20>
   8bae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8bae6:	d102      	bne.n	8baee <__aeabi_dcmpun+0x26>
   8bae8:	f04f 0000 	mov.w	r0, #0
   8baec:	4770      	bx	lr
   8baee:	f04f 0001 	mov.w	r0, #1
   8baf2:	4770      	bx	lr

0008baf4 <__aeabi_d2iz>:
   8baf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8baf8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8bafc:	d215      	bcs.n	8bb2a <__aeabi_d2iz+0x36>
   8bafe:	d511      	bpl.n	8bb24 <__aeabi_d2iz+0x30>
   8bb00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8bb04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8bb08:	d912      	bls.n	8bb30 <__aeabi_d2iz+0x3c>
   8bb0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8bb0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8bb12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8bb16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8bb1a:	fa23 f002 	lsr.w	r0, r3, r2
   8bb1e:	bf18      	it	ne
   8bb20:	4240      	negne	r0, r0
   8bb22:	4770      	bx	lr
   8bb24:	f04f 0000 	mov.w	r0, #0
   8bb28:	4770      	bx	lr
   8bb2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8bb2e:	d105      	bne.n	8bb3c <__aeabi_d2iz+0x48>
   8bb30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8bb34:	bf08      	it	eq
   8bb36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8bb3a:	4770      	bx	lr
   8bb3c:	f04f 0000 	mov.w	r0, #0
   8bb40:	4770      	bx	lr
   8bb42:	bf00      	nop

0008bb44 <__aeabi_uldivmod>:
   8bb44:	b953      	cbnz	r3, 8bb5c <__aeabi_uldivmod+0x18>
   8bb46:	b94a      	cbnz	r2, 8bb5c <__aeabi_uldivmod+0x18>
   8bb48:	2900      	cmp	r1, #0
   8bb4a:	bf08      	it	eq
   8bb4c:	2800      	cmpeq	r0, #0
   8bb4e:	bf1c      	itt	ne
   8bb50:	f04f 31ff 	movne.w	r1, #4294967295
   8bb54:	f04f 30ff 	movne.w	r0, #4294967295
   8bb58:	f000 b96e 	b.w	8be38 <__aeabi_idiv0>
   8bb5c:	f1ad 0c08 	sub.w	ip, sp, #8
   8bb60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8bb64:	f000 f806 	bl	8bb74 <__udivmoddi4>
   8bb68:	f8dd e004 	ldr.w	lr, [sp, #4]
   8bb6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8bb70:	b004      	add	sp, #16
   8bb72:	4770      	bx	lr

0008bb74 <__udivmoddi4>:
   8bb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bb78:	9e08      	ldr	r6, [sp, #32]
   8bb7a:	460d      	mov	r5, r1
   8bb7c:	4604      	mov	r4, r0
   8bb7e:	468e      	mov	lr, r1
   8bb80:	2b00      	cmp	r3, #0
   8bb82:	f040 8083 	bne.w	8bc8c <__udivmoddi4+0x118>
   8bb86:	428a      	cmp	r2, r1
   8bb88:	4617      	mov	r7, r2
   8bb8a:	d947      	bls.n	8bc1c <__udivmoddi4+0xa8>
   8bb8c:	fab2 f382 	clz	r3, r2
   8bb90:	b14b      	cbz	r3, 8bba6 <__udivmoddi4+0x32>
   8bb92:	f1c3 0120 	rsb	r1, r3, #32
   8bb96:	fa05 fe03 	lsl.w	lr, r5, r3
   8bb9a:	fa20 f101 	lsr.w	r1, r0, r1
   8bb9e:	409f      	lsls	r7, r3
   8bba0:	ea41 0e0e 	orr.w	lr, r1, lr
   8bba4:	409c      	lsls	r4, r3
   8bba6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8bbaa:	fbbe fcf8 	udiv	ip, lr, r8
   8bbae:	fa1f f987 	uxth.w	r9, r7
   8bbb2:	fb08 e21c 	mls	r2, r8, ip, lr
   8bbb6:	fb0c f009 	mul.w	r0, ip, r9
   8bbba:	0c21      	lsrs	r1, r4, #16
   8bbbc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8bbc0:	4290      	cmp	r0, r2
   8bbc2:	d90a      	bls.n	8bbda <__udivmoddi4+0x66>
   8bbc4:	18ba      	adds	r2, r7, r2
   8bbc6:	f10c 31ff 	add.w	r1, ip, #4294967295
   8bbca:	f080 8118 	bcs.w	8bdfe <__udivmoddi4+0x28a>
   8bbce:	4290      	cmp	r0, r2
   8bbd0:	f240 8115 	bls.w	8bdfe <__udivmoddi4+0x28a>
   8bbd4:	f1ac 0c02 	sub.w	ip, ip, #2
   8bbd8:	443a      	add	r2, r7
   8bbda:	1a12      	subs	r2, r2, r0
   8bbdc:	fbb2 f0f8 	udiv	r0, r2, r8
   8bbe0:	fb08 2210 	mls	r2, r8, r0, r2
   8bbe4:	fb00 f109 	mul.w	r1, r0, r9
   8bbe8:	b2a4      	uxth	r4, r4
   8bbea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8bbee:	42a1      	cmp	r1, r4
   8bbf0:	d909      	bls.n	8bc06 <__udivmoddi4+0x92>
   8bbf2:	193c      	adds	r4, r7, r4
   8bbf4:	f100 32ff 	add.w	r2, r0, #4294967295
   8bbf8:	f080 8103 	bcs.w	8be02 <__udivmoddi4+0x28e>
   8bbfc:	42a1      	cmp	r1, r4
   8bbfe:	f240 8100 	bls.w	8be02 <__udivmoddi4+0x28e>
   8bc02:	3802      	subs	r0, #2
   8bc04:	443c      	add	r4, r7
   8bc06:	1a64      	subs	r4, r4, r1
   8bc08:	2100      	movs	r1, #0
   8bc0a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8bc0e:	b11e      	cbz	r6, 8bc18 <__udivmoddi4+0xa4>
   8bc10:	2200      	movs	r2, #0
   8bc12:	40dc      	lsrs	r4, r3
   8bc14:	e9c6 4200 	strd	r4, r2, [r6]
   8bc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bc1c:	b902      	cbnz	r2, 8bc20 <__udivmoddi4+0xac>
   8bc1e:	deff      	udf	#255	; 0xff
   8bc20:	fab2 f382 	clz	r3, r2
   8bc24:	2b00      	cmp	r3, #0
   8bc26:	d14f      	bne.n	8bcc8 <__udivmoddi4+0x154>
   8bc28:	1a8d      	subs	r5, r1, r2
   8bc2a:	2101      	movs	r1, #1
   8bc2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   8bc30:	fa1f f882 	uxth.w	r8, r2
   8bc34:	fbb5 fcfe 	udiv	ip, r5, lr
   8bc38:	fb0e 551c 	mls	r5, lr, ip, r5
   8bc3c:	fb08 f00c 	mul.w	r0, r8, ip
   8bc40:	0c22      	lsrs	r2, r4, #16
   8bc42:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8bc46:	42a8      	cmp	r0, r5
   8bc48:	d907      	bls.n	8bc5a <__udivmoddi4+0xe6>
   8bc4a:	197d      	adds	r5, r7, r5
   8bc4c:	f10c 32ff 	add.w	r2, ip, #4294967295
   8bc50:	d202      	bcs.n	8bc58 <__udivmoddi4+0xe4>
   8bc52:	42a8      	cmp	r0, r5
   8bc54:	f200 80e9 	bhi.w	8be2a <__udivmoddi4+0x2b6>
   8bc58:	4694      	mov	ip, r2
   8bc5a:	1a2d      	subs	r5, r5, r0
   8bc5c:	fbb5 f0fe 	udiv	r0, r5, lr
   8bc60:	fb0e 5510 	mls	r5, lr, r0, r5
   8bc64:	fb08 f800 	mul.w	r8, r8, r0
   8bc68:	b2a4      	uxth	r4, r4
   8bc6a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8bc6e:	45a0      	cmp	r8, r4
   8bc70:	d907      	bls.n	8bc82 <__udivmoddi4+0x10e>
   8bc72:	193c      	adds	r4, r7, r4
   8bc74:	f100 32ff 	add.w	r2, r0, #4294967295
   8bc78:	d202      	bcs.n	8bc80 <__udivmoddi4+0x10c>
   8bc7a:	45a0      	cmp	r8, r4
   8bc7c:	f200 80d9 	bhi.w	8be32 <__udivmoddi4+0x2be>
   8bc80:	4610      	mov	r0, r2
   8bc82:	eba4 0408 	sub.w	r4, r4, r8
   8bc86:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8bc8a:	e7c0      	b.n	8bc0e <__udivmoddi4+0x9a>
   8bc8c:	428b      	cmp	r3, r1
   8bc8e:	d908      	bls.n	8bca2 <__udivmoddi4+0x12e>
   8bc90:	2e00      	cmp	r6, #0
   8bc92:	f000 80b1 	beq.w	8bdf8 <__udivmoddi4+0x284>
   8bc96:	2100      	movs	r1, #0
   8bc98:	e9c6 0500 	strd	r0, r5, [r6]
   8bc9c:	4608      	mov	r0, r1
   8bc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bca2:	fab3 f183 	clz	r1, r3
   8bca6:	2900      	cmp	r1, #0
   8bca8:	d14b      	bne.n	8bd42 <__udivmoddi4+0x1ce>
   8bcaa:	42ab      	cmp	r3, r5
   8bcac:	d302      	bcc.n	8bcb4 <__udivmoddi4+0x140>
   8bcae:	4282      	cmp	r2, r0
   8bcb0:	f200 80b9 	bhi.w	8be26 <__udivmoddi4+0x2b2>
   8bcb4:	1a84      	subs	r4, r0, r2
   8bcb6:	eb65 0303 	sbc.w	r3, r5, r3
   8bcba:	2001      	movs	r0, #1
   8bcbc:	469e      	mov	lr, r3
   8bcbe:	2e00      	cmp	r6, #0
   8bcc0:	d0aa      	beq.n	8bc18 <__udivmoddi4+0xa4>
   8bcc2:	e9c6 4e00 	strd	r4, lr, [r6]
   8bcc6:	e7a7      	b.n	8bc18 <__udivmoddi4+0xa4>
   8bcc8:	409f      	lsls	r7, r3
   8bcca:	f1c3 0220 	rsb	r2, r3, #32
   8bcce:	40d1      	lsrs	r1, r2
   8bcd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8bcd4:	fbb1 f0fe 	udiv	r0, r1, lr
   8bcd8:	fa1f f887 	uxth.w	r8, r7
   8bcdc:	fb0e 1110 	mls	r1, lr, r0, r1
   8bce0:	fa24 f202 	lsr.w	r2, r4, r2
   8bce4:	409d      	lsls	r5, r3
   8bce6:	fb00 fc08 	mul.w	ip, r0, r8
   8bcea:	432a      	orrs	r2, r5
   8bcec:	0c15      	lsrs	r5, r2, #16
   8bcee:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8bcf2:	45ac      	cmp	ip, r5
   8bcf4:	fa04 f403 	lsl.w	r4, r4, r3
   8bcf8:	d909      	bls.n	8bd0e <__udivmoddi4+0x19a>
   8bcfa:	197d      	adds	r5, r7, r5
   8bcfc:	f100 31ff 	add.w	r1, r0, #4294967295
   8bd00:	f080 808f 	bcs.w	8be22 <__udivmoddi4+0x2ae>
   8bd04:	45ac      	cmp	ip, r5
   8bd06:	f240 808c 	bls.w	8be22 <__udivmoddi4+0x2ae>
   8bd0a:	3802      	subs	r0, #2
   8bd0c:	443d      	add	r5, r7
   8bd0e:	eba5 050c 	sub.w	r5, r5, ip
   8bd12:	fbb5 f1fe 	udiv	r1, r5, lr
   8bd16:	fb0e 5c11 	mls	ip, lr, r1, r5
   8bd1a:	fb01 f908 	mul.w	r9, r1, r8
   8bd1e:	b295      	uxth	r5, r2
   8bd20:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8bd24:	45a9      	cmp	r9, r5
   8bd26:	d907      	bls.n	8bd38 <__udivmoddi4+0x1c4>
   8bd28:	197d      	adds	r5, r7, r5
   8bd2a:	f101 32ff 	add.w	r2, r1, #4294967295
   8bd2e:	d274      	bcs.n	8be1a <__udivmoddi4+0x2a6>
   8bd30:	45a9      	cmp	r9, r5
   8bd32:	d972      	bls.n	8be1a <__udivmoddi4+0x2a6>
   8bd34:	3902      	subs	r1, #2
   8bd36:	443d      	add	r5, r7
   8bd38:	eba5 0509 	sub.w	r5, r5, r9
   8bd3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8bd40:	e778      	b.n	8bc34 <__udivmoddi4+0xc0>
   8bd42:	f1c1 0720 	rsb	r7, r1, #32
   8bd46:	408b      	lsls	r3, r1
   8bd48:	fa22 fc07 	lsr.w	ip, r2, r7
   8bd4c:	ea4c 0c03 	orr.w	ip, ip, r3
   8bd50:	fa25 f407 	lsr.w	r4, r5, r7
   8bd54:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8bd58:	fbb4 f9fe 	udiv	r9, r4, lr
   8bd5c:	fa1f f88c 	uxth.w	r8, ip
   8bd60:	fb0e 4419 	mls	r4, lr, r9, r4
   8bd64:	fa20 f307 	lsr.w	r3, r0, r7
   8bd68:	fb09 fa08 	mul.w	sl, r9, r8
   8bd6c:	408d      	lsls	r5, r1
   8bd6e:	431d      	orrs	r5, r3
   8bd70:	0c2b      	lsrs	r3, r5, #16
   8bd72:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8bd76:	45a2      	cmp	sl, r4
   8bd78:	fa02 f201 	lsl.w	r2, r2, r1
   8bd7c:	fa00 f301 	lsl.w	r3, r0, r1
   8bd80:	d909      	bls.n	8bd96 <__udivmoddi4+0x222>
   8bd82:	eb1c 0404 	adds.w	r4, ip, r4
   8bd86:	f109 30ff 	add.w	r0, r9, #4294967295
   8bd8a:	d248      	bcs.n	8be1e <__udivmoddi4+0x2aa>
   8bd8c:	45a2      	cmp	sl, r4
   8bd8e:	d946      	bls.n	8be1e <__udivmoddi4+0x2aa>
   8bd90:	f1a9 0902 	sub.w	r9, r9, #2
   8bd94:	4464      	add	r4, ip
   8bd96:	eba4 040a 	sub.w	r4, r4, sl
   8bd9a:	fbb4 f0fe 	udiv	r0, r4, lr
   8bd9e:	fb0e 4410 	mls	r4, lr, r0, r4
   8bda2:	fb00 fa08 	mul.w	sl, r0, r8
   8bda6:	b2ad      	uxth	r5, r5
   8bda8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8bdac:	45a2      	cmp	sl, r4
   8bdae:	d908      	bls.n	8bdc2 <__udivmoddi4+0x24e>
   8bdb0:	eb1c 0404 	adds.w	r4, ip, r4
   8bdb4:	f100 35ff 	add.w	r5, r0, #4294967295
   8bdb8:	d22d      	bcs.n	8be16 <__udivmoddi4+0x2a2>
   8bdba:	45a2      	cmp	sl, r4
   8bdbc:	d92b      	bls.n	8be16 <__udivmoddi4+0x2a2>
   8bdbe:	3802      	subs	r0, #2
   8bdc0:	4464      	add	r4, ip
   8bdc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8bdc6:	fba0 8902 	umull	r8, r9, r0, r2
   8bdca:	eba4 040a 	sub.w	r4, r4, sl
   8bdce:	454c      	cmp	r4, r9
   8bdd0:	46c6      	mov	lr, r8
   8bdd2:	464d      	mov	r5, r9
   8bdd4:	d319      	bcc.n	8be0a <__udivmoddi4+0x296>
   8bdd6:	d016      	beq.n	8be06 <__udivmoddi4+0x292>
   8bdd8:	b15e      	cbz	r6, 8bdf2 <__udivmoddi4+0x27e>
   8bdda:	ebb3 020e 	subs.w	r2, r3, lr
   8bdde:	eb64 0405 	sbc.w	r4, r4, r5
   8bde2:	fa04 f707 	lsl.w	r7, r4, r7
   8bde6:	fa22 f301 	lsr.w	r3, r2, r1
   8bdea:	431f      	orrs	r7, r3
   8bdec:	40cc      	lsrs	r4, r1
   8bdee:	e9c6 7400 	strd	r7, r4, [r6]
   8bdf2:	2100      	movs	r1, #0
   8bdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bdf8:	4631      	mov	r1, r6
   8bdfa:	4630      	mov	r0, r6
   8bdfc:	e70c      	b.n	8bc18 <__udivmoddi4+0xa4>
   8bdfe:	468c      	mov	ip, r1
   8be00:	e6eb      	b.n	8bbda <__udivmoddi4+0x66>
   8be02:	4610      	mov	r0, r2
   8be04:	e6ff      	b.n	8bc06 <__udivmoddi4+0x92>
   8be06:	4543      	cmp	r3, r8
   8be08:	d2e6      	bcs.n	8bdd8 <__udivmoddi4+0x264>
   8be0a:	ebb8 0e02 	subs.w	lr, r8, r2
   8be0e:	eb69 050c 	sbc.w	r5, r9, ip
   8be12:	3801      	subs	r0, #1
   8be14:	e7e0      	b.n	8bdd8 <__udivmoddi4+0x264>
   8be16:	4628      	mov	r0, r5
   8be18:	e7d3      	b.n	8bdc2 <__udivmoddi4+0x24e>
   8be1a:	4611      	mov	r1, r2
   8be1c:	e78c      	b.n	8bd38 <__udivmoddi4+0x1c4>
   8be1e:	4681      	mov	r9, r0
   8be20:	e7b9      	b.n	8bd96 <__udivmoddi4+0x222>
   8be22:	4608      	mov	r0, r1
   8be24:	e773      	b.n	8bd0e <__udivmoddi4+0x19a>
   8be26:	4608      	mov	r0, r1
   8be28:	e749      	b.n	8bcbe <__udivmoddi4+0x14a>
   8be2a:	f1ac 0c02 	sub.w	ip, ip, #2
   8be2e:	443d      	add	r5, r7
   8be30:	e713      	b.n	8bc5a <__udivmoddi4+0xe6>
   8be32:	3802      	subs	r0, #2
   8be34:	443c      	add	r4, r7
   8be36:	e724      	b.n	8bc82 <__udivmoddi4+0x10e>

0008be38 <__aeabi_idiv0>:
   8be38:	4770      	bx	lr
   8be3a:	bf00      	nop
   8be3c:	78383025 	.word	0x78383025
   8be40:	00000000 	.word	0x00000000
   8be44:	206c754a 	.word	0x206c754a
   8be48:	32203331 	.word	0x32203331
   8be4c:	00313230 	.word	0x00313230
   8be50:	303a3030 	.word	0x303a3030
   8be54:	35313a32 	.word	0x35313a32
   8be58:	00000000 	.word	0x00000000
   8be5c:	70696843 	.word	0x70696843
   8be60:	73696857 	.word	0x73696857
   8be64:	65726570 	.word	0x65726570
   8be68:	57432d72 	.word	0x57432d72
   8be6c:	20353033 	.word	0x20353033
   8be70:	696c6e4f 	.word	0x696c6e4f
   8be74:	202e656e 	.word	0x202e656e
   8be78:	6d726946 	.word	0x6d726946
   8be7c:	65726177 	.word	0x65726177
   8be80:	69756220 	.word	0x69756220
   8be84:	203a646c 	.word	0x203a646c
   8be88:	252f7325 	.word	0x252f7325
   8be8c:	00000a73 	.word	0x00000a73
   8be90:	69726553 	.word	0x69726553
   8be94:	6e206c61 	.word	0x6e206c61
   8be98:	65626d75 	.word	0x65626d75
   8be9c:	25203a72 	.word	0x25203a72
   8bea0:	00000a73 	.word	0x00000a73
   8bea4:	74746553 	.word	0x74746553
   8bea8:	20676e69 	.word	0x20676e69
   8beac:	46207075 	.word	0x46207075
   8beb0:	20414750 	.word	0x20414750
   8beb4:	6d6d6f43 	.word	0x6d6d6f43
   8beb8:	63696e75 	.word	0x63696e75
   8bebc:	6f697461 	.word	0x6f697461
   8bec0:	00000a6e 	.word	0x00000a6e
   8bec4:	6e657645 	.word	0x6e657645
   8bec8:	6f4c2074 	.word	0x6f4c2074
   8becc:	4520706f 	.word	0x4520706f
   8bed0:	7265746e 	.word	0x7265746e
   8bed4:	202c6465 	.word	0x202c6465
   8bed8:	74696177 	.word	0x74696177
   8bedc:	2e676e69 	.word	0x2e676e69
   8bee0:	000a2e2e 	.word	0x000a2e2e
   8bee4:	00000000 	.word	0x00000000
   8bee8:	45ab8912 	.word	0x45ab8912
   8beec:	ff88d8cd 	.word	0xff88d8cd

0008bef0 <BUILD_DATE>:
   8bef0:	206c754a 32203331 00313230              Jul 13 2021.

0008befc <BUILD_TIME>:
   8befc:	303a3030 39313a32 00000000              00:02:19....

0008bf08 <LED_DESCRIPTOR>:
   8bf08:	0000004f 00000001 00000050 00000001     O.......P.......
   8bf18:	00000051 00000001 74697845 20676e69     Q.......Exiting 
   8bf28:	68746977 61747320 20737574 0a2e6425     with status %d..
   8bf38:	00000000                                ....

0008bf3c <BOS_DESC>:
   8bf3c:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8bf4c:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
   8bf5c:	00000000 00000000 00000000 aaaaaa00     ................
   8bf6c:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8bf7c:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8bf8c:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008bf98 <_global_impure_ptr>:
   8bf98:	200003d0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8bfa8:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8bfb8:	66656463 00000000 33323130 37363534     cdef....01234567
   8bfc8:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8bfd8:	0000296c 00000030                       l)..0...

0008bfe0 <blanks.7335>:
   8bfe0:	20202020 20202020 20202020 20202020                     

0008bff0 <zeroes.7336>:
   8bff0:	30303030 30303030 30303030 30303030     0000000000000000

0008c000 <blanks.7328>:
   8c000:	20202020 20202020 20202020 20202020                     

0008c010 <zeroes.7329>:
   8c010:	30303030 30303030 30303030 30303030     0000000000000000
   8c020:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8c030:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8c040:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8c050:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8c060:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8c070:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8c080:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8c090:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8c0a0:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8c0b0:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8c0c0:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8c0d0:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8c0e0:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8c0f0:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8c100:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8c110:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8c120:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8c130:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8c140:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008c150 <__mprec_bigtens>:
   8c150:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8c160:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8c170:	7f73bf3c 75154fdd                       <.s..O.u

0008c178 <__mprec_tens>:
   8c178:	00000000 3ff00000 00000000 40240000     .......?......$@
   8c188:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8c198:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8c1a8:	00000000 412e8480 00000000 416312d0     .......A......cA
   8c1b8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8c1c8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8c1d8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8c1e8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8c1f8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8c208:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8c218:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8c228:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8c238:	79d99db4 44ea7843                       ...yCx.D

0008c240 <p05.6122>:
   8c240:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8c250:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8c260:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8c270:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8c280:	2520656e 25732564 00000a73              ne %d%s%s...

0008c28c <_ctype_>:
   8c28c:	20202000 20202020 28282020 20282828     .         ((((( 
   8c29c:	20202020 20202020 20202020 20202020                     
   8c2ac:	10108820 10101010 10101010 10101010      ...............
   8c2bc:	04040410 04040404 10040404 10101010     ................
   8c2cc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8c2dc:	01010101 01010101 01010101 10101010     ................
   8c2ec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8c2fc:	02020202 02020202 02020202 10101010     ................
   8c30c:	00000020 00000000 00000000 00000000      ...............
   8c31c:	00000000 00000000 00000000 00000000     ................
   8c32c:	00000000 00000000 00000000 00000000     ................
   8c33c:	00000000 00000000 00000000 00000000     ................
   8c34c:	00000000 00000000 00000000 00000000     ................
   8c35c:	00000000 00000000 00000000 00000000     ................
   8c36c:	00000000 00000000 00000000 00000000     ................
   8c37c:	00000000 00000000 00000000 00000000     ................
   8c38c:	00000000                                ....

0008c390 <_init>:
   8c390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c392:	bf00      	nop
   8c394:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c396:	bc08      	pop	{r3}
   8c398:	469e      	mov	lr, r3
   8c39a:	4770      	bx	lr

0008c39c <__init_array_start>:
   8c39c:	00087ed5 	.word	0x00087ed5

0008c3a0 <__frame_dummy_init_array_entry>:
   8c3a0:	000800e1                                ....

0008c3a4 <_fini>:
   8c3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c3a6:	bf00      	nop
   8c3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c3aa:	bc08      	pop	{r3}
   8c3ac:	469e      	mov	lr, r3
   8c3ae:	4770      	bx	lr

0008c3b0 <__do_global_dtors_aux_fini_array_entry>:
   8c3b0:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000008:	4770      	bx	lr

2000000a <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000000a:	b470      	push	{r4, r5, r6}
2000000c:	b083      	sub	sp, #12
2000000e:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000010:	b35b      	cbz	r3, 2000006a <efc_perform_read_sequence+0x60>
20000012:	4604      	mov	r4, r0
20000014:	461e      	mov	r6, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000016:	6803      	ldr	r3, [r0, #0]
20000018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000001c:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000001e:	b2c9      	uxtb	r1, r1
20000020:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000024:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000026:	68a3      	ldr	r3, [r4, #8]
20000028:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000002a:	9801      	ldr	r0, [sp, #4]
2000002c:	f010 0001 	ands.w	r0, r0, #1
20000030:	d1f9      	bne.n	20000026 <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000032:	4603      	mov	r3, r0
20000034:	42ab      	cmp	r3, r5
20000036:	d207      	bcs.n	20000048 <efc_perform_read_sequence+0x3e>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000038:	0099      	lsls	r1, r3, #2
2000003a:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
2000003e:	6809      	ldr	r1, [r1, #0]
20000040:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000044:	3301      	adds	r3, #1
20000046:	e7f5      	b.n	20000034 <efc_perform_read_sequence+0x2a>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000048:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000004a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000004e:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000050:	68a3      	ldr	r3, [r4, #8]
20000052:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000054:	9b01      	ldr	r3, [sp, #4]
20000056:	f013 0f01 	tst.w	r3, #1
2000005a:	d0f9      	beq.n	20000050 <efc_perform_read_sequence+0x46>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000005c:	6823      	ldr	r3, [r4, #0]
2000005e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000062:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
}
20000064:	b003      	add	sp, #12
20000066:	bc70      	pop	{r4, r5, r6}
20000068:	4770      	bx	lr
		return EFC_RC_INVALID;
2000006a:	2002      	movs	r0, #2
2000006c:	e7fa      	b.n	20000064 <efc_perform_read_sequence+0x5a>

2000006e <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
2000006e:	6001      	str	r1, [r0, #0]
}
20000070:	4770      	bx	lr

20000072 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000072:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
20000074:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000076:	6883      	ldr	r3, [r0, #8]
20000078:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000007a:	9b01      	ldr	r3, [sp, #4]
2000007c:	f013 0f01 	tst.w	r3, #1
20000080:	d0f9      	beq.n	20000076 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000082:	9801      	ldr	r0, [sp, #4]
}
20000084:	f000 0006 	and.w	r0, r0, #6
20000088:	b002      	add	sp, #8
2000008a:	4770      	bx	lr

2000008c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000008c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000090:	4a22      	ldr	r2, [pc, #136]	; (2000011c <SystemInit+0x90>)
20000092:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000098:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000009a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000009e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000a2:	6a1b      	ldr	r3, [r3, #32]
200000a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000a8:	d107      	bne.n	200000ba <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000aa:	4b1d      	ldr	r3, [pc, #116]	; (20000120 <SystemInit+0x94>)
200000ac:	4a1d      	ldr	r2, [pc, #116]	; (20000124 <SystemInit+0x98>)
200000ae:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b0:	4b1b      	ldr	r3, [pc, #108]	; (20000120 <SystemInit+0x94>)
200000b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000b4:	f013 0f01 	tst.w	r3, #1
200000b8:	d0fa      	beq.n	200000b0 <SystemInit+0x24>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ba:	4b19      	ldr	r3, [pc, #100]	; (20000120 <SystemInit+0x94>)
200000bc:	4a1a      	ldr	r2, [pc, #104]	; (20000128 <SystemInit+0x9c>)
200000be:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c0:	4b17      	ldr	r3, [pc, #92]	; (20000120 <SystemInit+0x94>)
200000c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000c8:	d0fa      	beq.n	200000c0 <SystemInit+0x34>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ca:	4a15      	ldr	r2, [pc, #84]	; (20000120 <SystemInit+0x94>)
200000cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000ce:	f023 0303 	bic.w	r3, r3, #3
200000d2:	f043 0301 	orr.w	r3, r3, #1
200000d6:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000d8:	4b11      	ldr	r3, [pc, #68]	; (20000120 <SystemInit+0x94>)
200000da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000dc:	f013 0f08 	tst.w	r3, #8
200000e0:	d0fa      	beq.n	200000d8 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e2:	4b0f      	ldr	r3, [pc, #60]	; (20000120 <SystemInit+0x94>)
200000e4:	4a11      	ldr	r2, [pc, #68]	; (2000012c <SystemInit+0xa0>)
200000e6:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000e8:	4b0d      	ldr	r3, [pc, #52]	; (20000120 <SystemInit+0x94>)
200000ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000ec:	f013 0f02 	tst.w	r3, #2
200000f0:	d0fa      	beq.n	200000e8 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f2:	4b0b      	ldr	r3, [pc, #44]	; (20000120 <SystemInit+0x94>)
200000f4:	2211      	movs	r2, #17
200000f6:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000f8:	4b09      	ldr	r3, [pc, #36]	; (20000120 <SystemInit+0x94>)
200000fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200000fc:	f013 0f08 	tst.w	r3, #8
20000100:	d0fa      	beq.n	200000f8 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000102:	4b07      	ldr	r3, [pc, #28]	; (20000120 <SystemInit+0x94>)
20000104:	2212      	movs	r2, #18
20000106:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000108:	4b05      	ldr	r3, [pc, #20]	; (20000120 <SystemInit+0x94>)
2000010a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000010c:	f013 0f08 	tst.w	r3, #8
20000110:	d0fa      	beq.n	20000108 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000112:	4b07      	ldr	r3, [pc, #28]	; (20000130 <SystemInit+0xa4>)
20000114:	4a07      	ldr	r2, [pc, #28]	; (20000134 <SystemInit+0xa8>)
20000116:	601a      	str	r2, [r3, #0]
}
20000118:	4770      	bx	lr
2000011a:	bf00      	nop
2000011c:	400e0800 	.word	0x400e0800
20000120:	400e0400 	.word	0x400e0400
20000124:	00370809 	.word	0x00370809
20000128:	01370809 	.word	0x01370809
2000012c:	200f3f01 	.word	0x200f3f01
20000130:	20000204 	.word	0x20000204
20000134:	05b8d800 	.word	0x05b8d800

20000138 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000138:	4b19      	ldr	r3, [pc, #100]	; (200001a0 <system_init_flash+0x68>)
2000013a:	4298      	cmp	r0, r3
2000013c:	d206      	bcs.n	2000014c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000013e:	2300      	movs	r3, #0
20000140:	4a18      	ldr	r2, [pc, #96]	; (200001a4 <system_init_flash+0x6c>)
20000142:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000144:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000148:	6013      	str	r3, [r2, #0]
2000014a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000014c:	4b16      	ldr	r3, [pc, #88]	; (200001a8 <system_init_flash+0x70>)
2000014e:	4298      	cmp	r0, r3
20000150:	d207      	bcs.n	20000162 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000152:	f44f 7380 	mov.w	r3, #256	; 0x100
20000156:	4a13      	ldr	r2, [pc, #76]	; (200001a4 <system_init_flash+0x6c>)
20000158:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000162:	4b12      	ldr	r3, [pc, #72]	; (200001ac <system_init_flash+0x74>)
20000164:	4298      	cmp	r0, r3
20000166:	d807      	bhi.n	20000178 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000168:	f44f 7300 	mov.w	r3, #512	; 0x200
2000016c:	4a0d      	ldr	r2, [pc, #52]	; (200001a4 <system_init_flash+0x6c>)
2000016e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000174:	6013      	str	r3, [r2, #0]
20000176:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000178:	4b0d      	ldr	r3, [pc, #52]	; (200001b0 <system_init_flash+0x78>)
2000017a:	4298      	cmp	r0, r3
2000017c:	d807      	bhi.n	2000018e <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000017e:	f44f 7340 	mov.w	r3, #768	; 0x300
20000182:	4a08      	ldr	r2, [pc, #32]	; (200001a4 <system_init_flash+0x6c>)
20000184:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20000186:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000018a:	6013      	str	r3, [r2, #0]
2000018c:	4770      	bx	lr
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000018e:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000192:	4a04      	ldr	r2, [pc, #16]	; (200001a4 <system_init_flash+0x6c>)
20000194:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000196:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000019a:	6013      	str	r3, [r2, #0]
	}
}
2000019c:	4770      	bx	lr
2000019e:	bf00      	nop
200001a0:	016e3600 	.word	0x016e3600
200001a4:	400e0800 	.word	0x400e0800
200001a8:	02625a00 	.word	0x02625a00
200001ac:	044aa1ff 	.word	0x044aa1ff
200001b0:	0501bcff 	.word	0x0501bcff

200001b4 <usb_serial_number>:
200001b4:	30303030 30303030 30303030 44414544     000000000000DEAD
200001c4:	46454542 00000000 00000000 00000000     BEEF............
200001d4:	00000000                                ....

200001d8 <xram>:
200001d8:	60000000                                ...`

200001dc <pin_spi1_cs>:
200001dc:	ffffffff                                ....

200001e0 <pin_spi1_miso>:
200001e0:	ffffffff                                ....

200001e4 <pin_spi1_mosi>:
200001e4:	ffffffff                                ....

200001e8 <pin_spi1_sck>:
200001e8:	ffffffff                                ....

200001ec <XPROG_Param_EEPageSize>:
200001ec:	00000020                                 ...

200001f0 <XPROG_Param_NVMBase>:
200001f0:	010001c0                                ....

200001f4 <XPROG_Param_NVMCMDRegAddr>:
200001f4:	                                         3

200001f5 <XPROG_Param_NVMCSRRegAddr>:
200001f5:	                                         2..

200001f8 <defaultTimeoutTicks>:
200001f8:	000001f4                                ....

200001fc <main_b_vendor_enable>:
200001fc:	                                         ..

200001fe <vccint_setting>:
200001fe:	                                         ..

20000200 <g_interrupt_enabled>:
20000200:	00000001                                ....

20000204 <SystemCoreClock>:
20000204:	003d0900                                ..=.

20000208 <udc_string_desc>:
20000208:	00000300 00000000 00000000 00000000     ................
20000218:	00000000 00000000 00000000 00000000     ................
20000228:	00000000 00000000 00000000 00000000     ................
20000238:	00000000 00000000 00000000 00000000     ................
20000248:	00000000                                ....

2000024c <udc_string_desc_languageid>:
2000024c:	04090304                                ....

20000250 <udc_string_manufacturer_name>:
20000250:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000260:	636e4920 0000002e                        Inc....

20000268 <udc_string_product_name>:
20000268:	70696843 73696857 65726570 57432072     ChipWhisperer CW
20000278:	00353033                                305.

2000027c <winusb_20_desc>:
2000027c:	0000000a 06030000 000800ae 00000002     ................
2000028c:	001400a4 49570003 4253554e 00000000     ......WINUSB....
2000029c:	00000000 00880000 00070004 0044002a     ............*.D.
200002ac:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
200002bc:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
200002cc:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
200002dc:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
200002ec:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
200002fc:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
2000030c:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
2000031c:	00390045 0000007d 00000000              E.9.}.......

20000328 <udi_api_vendor>:
20000328:	00083861 00083885 0008389d 00083855     a8...8...8..U8..
20000338:	00000000                                ....

2000033c <udc_config>:
2000033c:	200003a4 2000035c 200003a4 200003b8     ... \.. ... ... 
2000034c:	20000354 00000000                       T.. ....

20000354 <udc_config_hs>:
20000354:	20000384 200003c4                       ... ... 

2000035c <udc_config_lsfs>:
2000035c:	20000364 200003c4                       d.. ... 

20000364 <udc_desc_fs>:
20000364:	00200209 80000101 000409fa ffff0200     .. .............
20000374:	050700ff 00400281 02050700 00004002     ......@......@..

20000384 <udc_desc_hs>:
20000384:	00200209 80000101 000409fa ffff0200     .. .............
20000394:	050700ff 02000281 02050700 00020002     ................

200003a4 <udc_device_desc>:
200003a4:	02000112 40000000 c3052b3e 02010100     .......@>+......
200003b4:	00000103                                ....

200003b8 <udc_device_qual>:
200003b8:	0200060a 40000000 00000001              .......@....

200003c4 <udi_apis>:
200003c4:	20000328                                (.. 

200003c8 <_impure_ptr>:
200003c8:	200003d0 00000000                       ... ....

200003d0 <impure_data>:
200003d0:	00000000 200006bc 20000724 2000078c     ....... $.. ... 
200003e0:	00000000 00000000 00000000 00000000     ................
200003f0:	00000000 00000000 00000000 00000000     ................
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000000 00000000     ................
20000460:	00000000 00000000 00000000 00000000     ................
20000470:	00000000 00000000 00000001 00000000     ................
20000480:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000 00000000 00000000     ................
200007e0:	00000000 00000000 00000000 00000000     ................
200007f0:	00000000 00000000                       ........

200007f8 <__atexit_recursive_mutex>:
200007f8:	20001978                                x.. 

200007fc <__global_locale>:
200007fc:	00000043 00000000 00000000 00000000     C...............
2000080c:	00000000 00000000 00000000 00000000     ................
2000081c:	00000043 00000000 00000000 00000000     C...............
2000082c:	00000000 00000000 00000000 00000000     ................
2000083c:	00000043 00000000 00000000 00000000     C...............
2000084c:	00000000 00000000 00000000 00000000     ................
2000085c:	00000043 00000000 00000000 00000000     C...............
2000086c:	00000000 00000000 00000000 00000000     ................
2000087c:	00000043 00000000 00000000 00000000     C...............
2000088c:	00000000 00000000 00000000 00000000     ................
2000089c:	00000043 00000000 00000000 00000000     C...............
200008ac:	00000000 00000000 00000000 00000000     ................
200008bc:	00000043 00000000 00000000 00000000     C...............
200008cc:	00000000 00000000 00000000 00000000     ................
200008dc:	0008ae45 00089ed1 00000000 0008c28c     E...............
200008ec:	0008c0cc 0008bf38 0008bf38 0008bf38     ....8...8...8...
200008fc:	0008bf38 0008bf38 0008bf38 0008bf38     8...8...8...8...
2000090c:	0008bf38 0008bf38 ffffffff ffffffff     8...8...........
2000091c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
2000092c:	00000000 00000000 00000000 00000000     ................
2000093c:	00000000 00000000 53410000 00494943     ..........ASCII.
2000094c:	00000000 00000000 00000000 00000000     ................
2000095c:	00000000 00000000 00000000              ............

20000968 <__malloc_av_>:
20000968:	00000000 00000000 20000968 20000968     ........h.. h.. 
20000978:	20000970 20000970 20000978 20000978     p.. p.. x.. x.. 
20000988:	20000980 20000980 20000988 20000988     ... ... ... ... 
20000998:	20000990 20000990 20000998 20000998     ... ... ... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 
200009d8:	200009d0 200009d0 200009d8 200009d8     ... ... ... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60                       `.. `.. 

20000d70 <__malloc_sbrk_base>:
20000d70:	ffffffff                                ....

20000d74 <__malloc_trim_threshold>:
20000d74:	00020000                                ....
