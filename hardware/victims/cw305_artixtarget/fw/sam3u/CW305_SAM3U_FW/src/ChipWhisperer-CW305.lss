
ChipWhisperer-CW305.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c2fc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008c2fc  0008c2fc  0001c2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d70  20000000  0008c304  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c0c  20000d70  0008d074  00020d70  2**2
                  ALLOC
  4 .stack        00003000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020d70  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00020d99  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001e794  00000000  00000000  00020de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00006473  00000000  00000000  0003f576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000c79b  00000000  00000000  000459e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001320  00000000  00000000  00052184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000038c0  00000000  00000000  000534a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00021a09  00000000  00000000  00056d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00029dd7  00000000  00000000  0007876d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00060731  00000000  00000000  000a2544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004518  00000000  00000000  00102c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 30 08 20 71 42 08 00 39 49 08 00 39 49 08 00     .0. qB..9I..9I..
   80010:	39 49 08 00 39 49 08 00 39 49 08 00 00 00 00 00     9I..9I..9I......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 39 49 08 00     ............9I..
   80030:	39 49 08 00 00 00 00 00 39 49 08 00 39 49 08 00     9I......9I..9I..
   80040:	39 49 08 00 39 49 08 00 39 49 08 00 39 49 08 00     9I..9I..9I..9I..
   80050:	39 49 08 00 39 49 08 00 39 49 08 00 39 49 08 00     9I..9I..9I..9I..
   80060:	39 49 08 00 39 49 08 00 6d 2d 08 00 7d 2d 08 00     9I..9I..m-..}-..
   80070:	8d 2d 08 00 39 49 08 00 39 49 08 00 39 49 08 00     .-..9I..9I..9I..
   80080:	39 49 08 00 39 49 08 00 39 49 08 00 39 49 08 00     9I..9I..9I..9I..
   80090:	39 49 08 00 39 49 08 00 81 18 08 00 39 49 08 00     9I..9I......9I..
   800a0:	39 49 08 00 39 49 08 00 39 49 08 00 39 49 08 00     9I..9I..9I..9I..
   800b0:	39 49 08 00 2d 31 08 00 39 49 08 00                 9I..-1..9I..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000d70 	.word	0x20000d70
   800d8:	00000000 	.word	0x00000000
   800dc:	0008c304 	.word	0x0008c304

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000d74 	.word	0x20000d74
   800f8:	0008c304 	.word	0x0008c304

000800fc <usart_serial_getchar>:
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   800fc:	2200      	movs	r2, #0
{
   800fe:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80100:	4b1e      	ldr	r3, [pc, #120]	; (8017c <usart_serial_getchar+0x80>)
{
   80102:	b083      	sub	sp, #12
	if (UART == (Uart*)p_usart) {
   80104:	4298      	cmp	r0, r3
{
   80106:	4604      	mov	r4, r0
   80108:	460f      	mov	r7, r1
	uint32_t val = 0;
   8010a:	9201      	str	r2, [sp, #4]
	if (UART == (Uart*)p_usart) {
   8010c:	d023      	beq.n	80156 <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8010e:	4b1c      	ldr	r3, [pc, #112]	; (80180 <usart_serial_getchar+0x84>)
   80110:	4298      	cmp	r0, r3
   80112:	d00d      	beq.n	80130 <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80114:	4b1b      	ldr	r3, [pc, #108]	; (80184 <usart_serial_getchar+0x88>)
   80116:	4298      	cmp	r0, r3
   80118:	d112      	bne.n	80140 <usart_serial_getchar+0x44>
   8011a:	4e1b      	ldr	r6, [pc, #108]	; (80188 <usart_serial_getchar+0x8c>)
   8011c:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   8011e:	4629      	mov	r1, r5
   80120:	4620      	mov	r0, r4
   80122:	47b0      	blx	r6
   80124:	2800      	cmp	r0, #0
   80126:	d1fa      	bne.n	8011e <usart_serial_getchar+0x22>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
   80128:	9b01      	ldr	r3, [sp, #4]
   8012a:	703b      	strb	r3, [r7, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8012c:	b003      	add	sp, #12
   8012e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80130:	4e15      	ldr	r6, [pc, #84]	; (80188 <usart_serial_getchar+0x8c>)
   80132:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   80134:	4629      	mov	r1, r5
   80136:	4620      	mov	r0, r4
   80138:	47b0      	blx	r6
   8013a:	2800      	cmp	r0, #0
   8013c:	d1fa      	bne.n	80134 <usart_serial_getchar+0x38>
   8013e:	e7f3      	b.n	80128 <usart_serial_getchar+0x2c>
	if (USART2 == p_usart) {
   80140:	4b12      	ldr	r3, [pc, #72]	; (8018c <usart_serial_getchar+0x90>)
   80142:	4298      	cmp	r0, r3
   80144:	d10f      	bne.n	80166 <usart_serial_getchar+0x6a>
   80146:	4e10      	ldr	r6, [pc, #64]	; (80188 <usart_serial_getchar+0x8c>)
   80148:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   8014a:	4629      	mov	r1, r5
   8014c:	4620      	mov	r0, r4
   8014e:	47b0      	blx	r6
   80150:	2800      	cmp	r0, #0
   80152:	d1fa      	bne.n	8014a <usart_serial_getchar+0x4e>
   80154:	e7e8      	b.n	80128 <usart_serial_getchar+0x2c>
   80156:	4d0e      	ldr	r5, [pc, #56]	; (80190 <usart_serial_getchar+0x94>)
		while (uart_read((Uart*)p_usart, data));
   80158:	4639      	mov	r1, r7
   8015a:	4620      	mov	r0, r4
   8015c:	47a8      	blx	r5
   8015e:	2800      	cmp	r0, #0
   80160:	d1fa      	bne.n	80158 <usart_serial_getchar+0x5c>
}
   80162:	b003      	add	sp, #12
   80164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USART3 == p_usart) {
   80166:	4b0b      	ldr	r3, [pc, #44]	; (80194 <usart_serial_getchar+0x98>)
   80168:	4298      	cmp	r0, r3
   8016a:	d1df      	bne.n	8012c <usart_serial_getchar+0x30>
   8016c:	4e06      	ldr	r6, [pc, #24]	; (80188 <usart_serial_getchar+0x8c>)
   8016e:	ad01      	add	r5, sp, #4
		while (usart_read(p_usart, &val));
   80170:	4629      	mov	r1, r5
   80172:	4620      	mov	r0, r4
   80174:	47b0      	blx	r6
   80176:	2800      	cmp	r0, #0
   80178:	d1fa      	bne.n	80170 <usart_serial_getchar+0x74>
   8017a:	e7d5      	b.n	80128 <usart_serial_getchar+0x2c>
   8017c:	400e0600 	.word	0x400e0600
   80180:	40090000 	.word	0x40090000
   80184:	40094000 	.word	0x40094000
   80188:	00082cc9 	.word	0x00082cc9
   8018c:	40098000 	.word	0x40098000
   80190:	00084bf5 	.word	0x00084bf5
   80194:	4009c000 	.word	0x4009c000

00080198 <usart_serial_putchar>:
	if (UART == (Uart*)p_usart) {
   80198:	4b1d      	ldr	r3, [pc, #116]	; (80210 <usart_serial_putchar+0x78>)
{
   8019a:	b570      	push	{r4, r5, r6, lr}
	if (UART == (Uart*)p_usart) {
   8019c:	4298      	cmp	r0, r3
{
   8019e:	4604      	mov	r4, r0
   801a0:	460e      	mov	r6, r1
	if (UART == (Uart*)p_usart) {
   801a2:	d015      	beq.n	801d0 <usart_serial_putchar+0x38>
	if (USART0 == p_usart) {
   801a4:	4b1b      	ldr	r3, [pc, #108]	; (80214 <usart_serial_putchar+0x7c>)
   801a6:	4298      	cmp	r0, r3
   801a8:	d01a      	beq.n	801e0 <usart_serial_putchar+0x48>
	if (USART1 == p_usart) {
   801aa:	4b1b      	ldr	r3, [pc, #108]	; (80218 <usart_serial_putchar+0x80>)
   801ac:	4298      	cmp	r0, r3
   801ae:	d01f      	beq.n	801f0 <usart_serial_putchar+0x58>
	if (USART2 == p_usart) {
   801b0:	4b1a      	ldr	r3, [pc, #104]	; (8021c <usart_serial_putchar+0x84>)
   801b2:	4298      	cmp	r0, r3
   801b4:	d004      	beq.n	801c0 <usart_serial_putchar+0x28>
	if (USART3 == p_usart) {
   801b6:	4b1a      	ldr	r3, [pc, #104]	; (80220 <usart_serial_putchar+0x88>)
   801b8:	4298      	cmp	r0, r3
   801ba:	d021      	beq.n	80200 <usart_serial_putchar+0x68>
	return 0;
   801bc:	2000      	movs	r0, #0
}
   801be:	bd70      	pop	{r4, r5, r6, pc}
   801c0:	4d18      	ldr	r5, [pc, #96]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   801c2:	4631      	mov	r1, r6
   801c4:	4620      	mov	r0, r4
   801c6:	47a8      	blx	r5
   801c8:	2800      	cmp	r0, #0
   801ca:	d1fa      	bne.n	801c2 <usart_serial_putchar+0x2a>
		return 1;
   801cc:	2001      	movs	r0, #1
}
   801ce:	bd70      	pop	{r4, r5, r6, pc}
   801d0:	4d15      	ldr	r5, [pc, #84]	; (80228 <usart_serial_putchar+0x90>)
		while (uart_write((Uart*)p_usart, c)!=0);
   801d2:	4631      	mov	r1, r6
   801d4:	4620      	mov	r0, r4
   801d6:	47a8      	blx	r5
   801d8:	2800      	cmp	r0, #0
   801da:	d1fa      	bne.n	801d2 <usart_serial_putchar+0x3a>
		return 1;
   801dc:	2001      	movs	r0, #1
   801de:	e7f6      	b.n	801ce <usart_serial_putchar+0x36>
   801e0:	4d10      	ldr	r5, [pc, #64]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   801e2:	4631      	mov	r1, r6
   801e4:	4620      	mov	r0, r4
   801e6:	47a8      	blx	r5
   801e8:	2800      	cmp	r0, #0
   801ea:	d1fa      	bne.n	801e2 <usart_serial_putchar+0x4a>
		return 1;
   801ec:	2001      	movs	r0, #1
   801ee:	e7ee      	b.n	801ce <usart_serial_putchar+0x36>
   801f0:	4d0c      	ldr	r5, [pc, #48]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   801f2:	4631      	mov	r1, r6
   801f4:	4620      	mov	r0, r4
   801f6:	47a8      	blx	r5
   801f8:	2800      	cmp	r0, #0
   801fa:	d1fa      	bne.n	801f2 <usart_serial_putchar+0x5a>
		return 1;
   801fc:	2001      	movs	r0, #1
   801fe:	e7e6      	b.n	801ce <usart_serial_putchar+0x36>
   80200:	4d08      	ldr	r5, [pc, #32]	; (80224 <usart_serial_putchar+0x8c>)
		while (usart_write(p_usart, c)!=0);
   80202:	4631      	mov	r1, r6
   80204:	4620      	mov	r0, r4
   80206:	47a8      	blx	r5
   80208:	2800      	cmp	r0, #0
   8020a:	d1fa      	bne.n	80202 <usart_serial_putchar+0x6a>
   8020c:	e7de      	b.n	801cc <usart_serial_putchar+0x34>
   8020e:	bf00      	nop
   80210:	400e0600 	.word	0x400e0600
   80214:	40090000 	.word	0x40090000
   80218:	40094000 	.word	0x40094000
   8021c:	40098000 	.word	0x40098000
   80220:	4009c000 	.word	0x4009c000
   80224:	00082ca5 	.word	0x00082ca5
   80228:	00084be5 	.word	0x00084be5

0008022c <fpga_pins>:
//     genclk_config_set_divider(&gcfg, divider);
//     genclk_enable(&gcfg, id);
// }

void fpga_pins(bool enabled)
{
   8022c:	b570      	push	{r4, r5, r6, lr}
   8022e:	4605      	mov	r5, r0
	
	gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
   80230:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80234:	4c95      	ldr	r4, [pc, #596]	; (8048c <fpga_pins+0x260>)
   80236:	2036      	movs	r0, #54	; 0x36
   80238:	47a0      	blx	r4
	gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);
   8023a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8023e:	2032      	movs	r0, #50	; 0x32
   80240:	47a0      	blx	r4
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   80242:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80246:	2007      	movs	r0, #7
   80248:	47a0      	blx	r4
	
	if (enabled){
   8024a:	2d00      	cmp	r5, #0
   8024c:	d07d      	beq.n	8034a <fpga_pins+0x11e>

		#ifdef CONF_BOARD_PCK1
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
		#endif
		
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   8024e:	4990      	ldr	r1, [pc, #576]	; (80490 <fpga_pins+0x264>)
   80250:	2029      	movs	r0, #41	; 0x29
   80252:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80254:	498e      	ldr	r1, [pc, #568]	; (80490 <fpga_pins+0x264>)
   80256:	202a      	movs	r0, #42	; 0x2a
   80258:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8025a:	498d      	ldr	r1, [pc, #564]	; (80490 <fpga_pins+0x264>)
   8025c:	202b      	movs	r0, #43	; 0x2b
   8025e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80260:	498b      	ldr	r1, [pc, #556]	; (80490 <fpga_pins+0x264>)
   80262:	202c      	movs	r0, #44	; 0x2c
   80264:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80266:	498a      	ldr	r1, [pc, #552]	; (80490 <fpga_pins+0x264>)
   80268:	202d      	movs	r0, #45	; 0x2d
   8026a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   8026c:	4988      	ldr	r1, [pc, #544]	; (80490 <fpga_pins+0x264>)
   8026e:	202e      	movs	r0, #46	; 0x2e
   80270:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80272:	4987      	ldr	r1, [pc, #540]	; (80490 <fpga_pins+0x264>)
   80274:	202f      	movs	r0, #47	; 0x2f
   80276:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80278:	4985      	ldr	r1, [pc, #532]	; (80490 <fpga_pins+0x264>)
   8027a:	2030      	movs	r0, #48	; 0x30
   8027c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8027e:	4984      	ldr	r1, [pc, #528]	; (80490 <fpga_pins+0x264>)
   80280:	2033      	movs	r0, #51	; 0x33
   80282:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80284:	4982      	ldr	r1, [pc, #520]	; (80490 <fpga_pins+0x264>)
   80286:	2037      	movs	r0, #55	; 0x37
   80288:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8028a:	4981      	ldr	r1, [pc, #516]	; (80490 <fpga_pins+0x264>)
   8028c:	2034      	movs	r0, #52	; 0x34
   8028e:	47a0      	blx	r4
			
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG2);
   80290:	4980      	ldr	r1, [pc, #512]	; (80494 <fpga_pins+0x268>)
   80292:	2027      	movs	r0, #39	; 0x27
   80294:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG2);
   80296:	497f      	ldr	r1, [pc, #508]	; (80494 <fpga_pins+0x268>)
   80298:	2028      	movs	r0, #40	; 0x28
   8029a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
   8029c:	497c      	ldr	r1, [pc, #496]	; (80490 <fpga_pins+0x264>)
   8029e:	2040      	movs	r0, #64	; 0x40
   802a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
   802a2:	497b      	ldr	r1, [pc, #492]	; (80490 <fpga_pins+0x264>)
   802a4:	2041      	movs	r0, #65	; 0x41
   802a6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
   802a8:	4979      	ldr	r1, [pc, #484]	; (80490 <fpga_pins+0x264>)
   802aa:	2042      	movs	r0, #66	; 0x42
   802ac:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
   802ae:	4978      	ldr	r1, [pc, #480]	; (80490 <fpga_pins+0x264>)
   802b0:	2043      	movs	r0, #67	; 0x43
   802b2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
   802b4:	4976      	ldr	r1, [pc, #472]	; (80490 <fpga_pins+0x264>)
   802b6:	2044      	movs	r0, #68	; 0x44
   802b8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
   802ba:	4975      	ldr	r1, [pc, #468]	; (80490 <fpga_pins+0x264>)
   802bc:	2045      	movs	r0, #69	; 0x45
   802be:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
   802c0:	4973      	ldr	r1, [pc, #460]	; (80490 <fpga_pins+0x264>)
   802c2:	2046      	movs	r0, #70	; 0x46
   802c4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
   802c6:	4972      	ldr	r1, [pc, #456]	; (80490 <fpga_pins+0x264>)
   802c8:	2047      	movs	r0, #71	; 0x47
   802ca:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
   802cc:	4970      	ldr	r1, [pc, #448]	; (80490 <fpga_pins+0x264>)
   802ce:	2048      	movs	r0, #72	; 0x48
   802d0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
   802d2:	496f      	ldr	r1, [pc, #444]	; (80490 <fpga_pins+0x264>)
   802d4:	2049      	movs	r0, #73	; 0x49
   802d6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
   802d8:	496d      	ldr	r1, [pc, #436]	; (80490 <fpga_pins+0x264>)
   802da:	204a      	movs	r0, #74	; 0x4a
   802dc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
   802de:	496c      	ldr	r1, [pc, #432]	; (80490 <fpga_pins+0x264>)
   802e0:	204b      	movs	r0, #75	; 0x4b
   802e2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
   802e4:	496a      	ldr	r1, [pc, #424]	; (80490 <fpga_pins+0x264>)
   802e6:	2054      	movs	r0, #84	; 0x54
   802e8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
   802ea:	4969      	ldr	r1, [pc, #420]	; (80490 <fpga_pins+0x264>)
   802ec:	2055      	movs	r0, #85	; 0x55
   802ee:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
   802f0:	4967      	ldr	r1, [pc, #412]	; (80490 <fpga_pins+0x264>)
   802f2:	2056      	movs	r0, #86	; 0x56
   802f4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
   802f6:	4966      	ldr	r1, [pc, #408]	; (80490 <fpga_pins+0x264>)
   802f8:	2057      	movs	r0, #87	; 0x57
   802fa:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
   802fc:	4964      	ldr	r1, [pc, #400]	; (80490 <fpga_pins+0x264>)
   802fe:	2058      	movs	r0, #88	; 0x58
   80300:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
   80302:	4963      	ldr	r1, [pc, #396]	; (80490 <fpga_pins+0x264>)
   80304:	2059      	movs	r0, #89	; 0x59
   80306:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1);
   80308:	4961      	ldr	r1, [pc, #388]	; (80490 <fpga_pins+0x264>)
   8030a:	205a      	movs	r0, #90	; 0x5a
   8030c:	47a0      	blx	r4
		
		/* FPGA Programming pins */
		FPGA_NPROG_SETUP();
   8030e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80312:	2008      	movs	r0, #8
   80314:	47a0      	blx	r4
		FPGA_NPROG_HIGH();
   80316:	4b60      	ldr	r3, [pc, #384]	; (80498 <fpga_pins+0x26c>)
   80318:	2008      	movs	r0, #8
   8031a:	4798      	blx	r3
		//ALE pin under SW control
		//gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
		//gpio_set_pin_high(FPGA_ALE_GPIO);
			
		//Force FPGA trigger
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   8031c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80320:	2031      	movs	r0, #49	; 0x31
   80322:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   80324:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80328:	2008      	movs	r0, #8
   8032a:	47a0      	blx	r4
		
		gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   8032c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80330:	200d      	movs	r0, #13
   80332:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80334:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80338:	200e      	movs	r0, #14
   8033a:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8033c:	4623      	mov	r3, r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT);
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT);
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
	}
	
}
   8033e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80342:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80346:	200f      	movs	r0, #15
   80348:	4718      	bx	r3
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   8034a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8034e:	2029      	movs	r0, #41	; 0x29
   80350:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   80352:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80356:	202a      	movs	r0, #42	; 0x2a
   80358:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   8035a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8035e:	202b      	movs	r0, #43	; 0x2b
   80360:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   80362:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80366:	202c      	movs	r0, #44	; 0x2c
   80368:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   8036a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8036e:	202d      	movs	r0, #45	; 0x2d
   80370:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   80372:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80376:	202e      	movs	r0, #46	; 0x2e
   80378:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   8037a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8037e:	202f      	movs	r0, #47	; 0x2f
   80380:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   80382:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80386:	2030      	movs	r0, #48	; 0x30
   80388:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   8038a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8038e:	2033      	movs	r0, #51	; 0x33
   80390:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   80392:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80396:	2037      	movs	r0, #55	; 0x37
   80398:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   8039a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8039e:	2034      	movs	r0, #52	; 0x34
   803a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIO_INPUT);
   803a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803a6:	2027      	movs	r0, #39	; 0x27
   803a8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIO_INPUT);
   803aa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803ae:	2028      	movs	r0, #40	; 0x28
   803b0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIO_INPUT);
   803b2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803b6:	2040      	movs	r0, #64	; 0x40
   803b8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIO_INPUT);
   803ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803be:	2041      	movs	r0, #65	; 0x41
   803c0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIO_INPUT);
   803c2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803c6:	2042      	movs	r0, #66	; 0x42
   803c8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIO_INPUT);
   803ca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803ce:	2043      	movs	r0, #67	; 0x43
   803d0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIO_INPUT);
   803d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803d6:	2044      	movs	r0, #68	; 0x44
   803d8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIO_INPUT);
   803da:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803de:	2045      	movs	r0, #69	; 0x45
   803e0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIO_INPUT);
   803e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803e6:	2046      	movs	r0, #70	; 0x46
   803e8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIO_INPUT);
   803ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803ee:	2047      	movs	r0, #71	; 0x47
   803f0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIO_INPUT);
   803f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803f6:	2048      	movs	r0, #72	; 0x48
   803f8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIO_INPUT);
   803fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803fe:	2049      	movs	r0, #73	; 0x49
   80400:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIO_INPUT);
   80402:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80406:	204a      	movs	r0, #74	; 0x4a
   80408:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIO_INPUT);
   8040a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8040e:	204b      	movs	r0, #75	; 0x4b
   80410:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIO_INPUT);
   80412:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80416:	2054      	movs	r0, #84	; 0x54
   80418:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIO_INPUT);
   8041a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8041e:	2055      	movs	r0, #85	; 0x55
   80420:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIO_INPUT);
   80422:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80426:	2056      	movs	r0, #86	; 0x56
   80428:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIO_INPUT);
   8042a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8042e:	2057      	movs	r0, #87	; 0x57
   80430:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIO_INPUT);
   80432:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80436:	2058      	movs	r0, #88	; 0x58
   80438:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIO_INPUT);
   8043a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8043e:	2059      	movs	r0, #89	; 0x59
   80440:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIO_INPUT);	
   80442:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80446:	205a      	movs	r0, #90	; 0x5a
   80448:	47a0      	blx	r4
		gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, PIO_INPUT);
   8044a:	4b14      	ldr	r3, [pc, #80]	; (8049c <fpga_pins+0x270>)
   8044c:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
   80450:	21ff      	movs	r1, #255	; 0xff
   80452:	4813      	ldr	r0, [pc, #76]	; (804a0 <fpga_pins+0x274>)
   80454:	4798      	blx	r3
		gpio_configure_pin(FPGA_ALE_GPIO, PIO_INPUT);
   80456:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8045a:	2035      	movs	r0, #53	; 0x35
   8045c:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   8045e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80462:	2031      	movs	r0, #49	; 0x31
   80464:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   80466:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8046a:	2008      	movs	r0, #8
   8046c:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT);
   8046e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80472:	200d      	movs	r0, #13
   80474:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT);
   80476:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8047a:	200e      	movs	r0, #14
   8047c:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
   8047e:	4623      	mov	r3, r4
}
   80480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
   80484:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80488:	200f      	movs	r0, #15
   8048a:	4718      	bx	r3
   8048c:	0008477d 	.word	0x0008477d
   80490:	08000001 	.word	0x08000001
   80494:	10000001 	.word	0x10000001
   80498:	00084745 	.word	0x00084745
   8049c:	00084875 	.word	0x00084875
   804a0:	400e0e00 	.word	0x400e0e00

000804a4 <main>:
int main(void)
{
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   804a4:	2110      	movs	r1, #16
{
   804a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   804aa:	b088      	sub	sp, #32
	flash_read_unique_id(serial_number, sizeof(serial_number));
   804ac:	eb0d 0001 	add.w	r0, sp, r1
   804b0:	4b3f      	ldr	r3, [pc, #252]	; (805b0 <main+0x10c>)
   804b2:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   804b4:	4f3f      	ldr	r7, [pc, #252]	; (805b4 <main+0x110>)
   804b6:	2008      	movs	r0, #8
   804b8:	47b8      	blx	r7
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   804ba:	4c3f      	ldr	r4, [pc, #252]	; (805b8 <main+0x114>)
   804bc:	4a3f      	ldr	r2, [pc, #252]	; (805bc <main+0x118>)
	uart_settings.ul_mode = opt->paritytype;
   804be:	f44f 6100 	mov.w	r1, #2048	; 0x800
   804c2:	6014      	str	r4, [r2, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   804c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   804c8:	4b3d      	ldr	r3, [pc, #244]	; (805c0 <main+0x11c>)
   804ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
   804ce:	4a3d      	ldr	r2, [pc, #244]	; (805c4 <main+0x120>)
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   804d0:	4d3d      	ldr	r5, [pc, #244]	; (805c8 <main+0x124>)
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   804d2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   804d4:	4a3d      	ldr	r2, [pc, #244]	; (805cc <main+0x128>)
   804d6:	4b3e      	ldr	r3, [pc, #248]	; (805d0 <main+0x12c>)
   804d8:	2008      	movs	r0, #8
   804da:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   804dc:	4b3d      	ldr	r3, [pc, #244]	; (805d4 <main+0x130>)
   804de:	9301      	str	r3, [sp, #4]
   804e0:	47b8      	blx	r7
		uart_init((Uart*)p_usart, &uart_settings);
   804e2:	a901      	add	r1, sp, #4
   804e4:	4620      	mov	r0, r4
   804e6:	4b3c      	ldr	r3, [pc, #240]	; (805d8 <main+0x134>)
   804e8:	4798      	blx	r3
	setbuf(stdout, NULL);
   804ea:	682b      	ldr	r3, [r5, #0]
   804ec:	4c3b      	ldr	r4, [pc, #236]	; (805dc <main+0x138>)
   804ee:	6898      	ldr	r0, [r3, #8]
   804f0:	2100      	movs	r1, #0
   804f2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   804f4:	682b      	ldr	r3, [r5, #0]
   804f6:	2100      	movs	r1, #0
   804f8:	6858      	ldr	r0, [r3, #4]
   804fa:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   804fc:	2101      	movs	r1, #1
   804fe:	4b38      	ldr	r3, [pc, #224]	; (805e0 <main+0x13c>)
   80500:	7019      	strb	r1, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80502:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80506:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   80508:	2200      	movs	r2, #0
   8050a:	4b36      	ldr	r3, [pc, #216]	; (805e4 <main+0x140>)
   8050c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 805e8 <main+0x144>
   80510:	701a      	strb	r2, [r3, #0]
   80512:	705a      	strb	r2, [r3, #1]
   80514:	709a      	strb	r2, [r3, #2]
   80516:	70da      	strb	r2, [r3, #3]
   80518:	711a      	strb	r2, [r3, #4]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8051a:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   8051c:	4933      	ldr	r1, [pc, #204]	; (805ec <main+0x148>)
   8051e:	4788      	blx	r1
	board_init();
   80520:	4b33      	ldr	r3, [pc, #204]	; (805f0 <main+0x14c>)
   80522:	4798      	blx	r3
#else
	system_init();
#endif

	fpga_program_init();
   80524:	4b33      	ldr	r3, [pc, #204]	; (805f4 <main+0x150>)
   80526:	4798      	blx	r3
	tps56520_init();
   80528:	4b33      	ldr	r3, [pc, #204]	; (805f8 <main+0x154>)
   8052a:	4798      	blx	r3
	
	//Init CDCE906 Chip
	cdce906_init();
   8052c:	4b33      	ldr	r3, [pc, #204]	; (805fc <main+0x158>)
   8052e:	4645      	mov	r5, r8
   80530:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80600 <main+0x15c>

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80534:	4e33      	ldr	r6, [pc, #204]	; (80604 <main+0x160>)
   80536:	ac04      	add	r4, sp, #16
   80538:	f10d 0a20 	add.w	sl, sp, #32
	cdce906_init();
   8053c:	4798      	blx	r3
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   8053e:	f854 2b04 	ldr.w	r2, [r4], #4
   80542:	4628      	mov	r0, r5
   80544:	4631      	mov	r1, r6
   80546:	47c8      	blx	r9
	for(unsigned int i = 0; i < 4; i++){
   80548:	45a2      	cmp	sl, r4
   8054a:	f105 0508 	add.w	r5, r5, #8
   8054e:	d1f6      	bne.n	8053e <main+0x9a>
	}
	usb_serial_number[32] = 0;
   80550:	2500      	movs	r5, #0
	printf("ChipWhisperer-CW305 Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
	printf("Serial number: %s\n", usb_serial_number);
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   80552:	2009      	movs	r0, #9
	fpga_pins(true);
   80554:	4e2c      	ldr	r6, [pc, #176]	; (80608 <main+0x164>)
	usb_serial_number[32] = 0;
   80556:	f888 5020 	strb.w	r5, [r8, #32]
	pmc_enable_periph_clk(ID_SMC);	
   8055a:	47b8      	blx	r7
	fpga_pins(true);
   8055c:	2001      	movs	r0, #1
   8055e:	47b0      	blx	r6
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80560:	4629      	mov	r1, r5
   80562:	4a2a      	ldr	r2, [pc, #168]	; (8060c <main+0x168>)
   80564:	482a      	ldr	r0, [pc, #168]	; (80610 <main+0x16c>)
   80566:	4b2b      	ldr	r3, [pc, #172]	; (80614 <main+0x170>)
   80568:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(3)
   8056a:	4629      	mov	r1, r5
   8056c:	4a2a      	ldr	r2, [pc, #168]	; (80618 <main+0x174>)
   8056e:	4828      	ldr	r0, [pc, #160]	; (80610 <main+0x16c>)
   80570:	4b2a      	ldr	r3, [pc, #168]	; (8061c <main+0x178>)
   80572:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(3));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(4)
   80574:	f04f 1204 	mov.w	r2, #262148	; 0x40004
   80578:	4629      	mov	r1, r5
   8057a:	4825      	ldr	r0, [pc, #148]	; (80610 <main+0x16c>)
   8057c:	4b28      	ldr	r3, [pc, #160]	; (80620 <main+0x17c>)
   8057e:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80580:	2203      	movs	r2, #3
   80582:	4629      	mov	r1, r5
   80584:	4822      	ldr	r0, [pc, #136]	; (80610 <main+0x16c>)
   80586:	4b27      	ldr	r3, [pc, #156]	; (80624 <main+0x180>)
   80588:	4798      	blx	r3
        | SMC_MODE_DBW_BIT_8);
	
	
	ui_init();
   8058a:	4b27      	ldr	r3, [pc, #156]	; (80628 <main+0x184>)
   8058c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8058e:	4b27      	ldr	r3, [pc, #156]	; (8062c <main+0x188>)
   80590:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80592:	2104      	movs	r1, #4
   80594:	4a26      	ldr	r2, [pc, #152]	; (80630 <main+0x18c>)
	pmc_enable_pck(ul_id);
   80596:	4b27      	ldr	r3, [pc, #156]	; (80634 <main+0x190>)
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80598:	6411      	str	r1, [r2, #64]	; 0x40
	pmc_enable_pck(ul_id);
   8059a:	4628      	mov	r0, r5
   8059c:	4798      	blx	r3
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");	
	
	//Turn off FPGA pins for now, will be enabled in event loop
	fpga_pins(false);
   8059e:	4628      	mov	r0, r5
   805a0:	47b0      	blx	r6
		
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	
	naeusb_register_handlers();
   805a2:	4b25      	ldr	r3, [pc, #148]	; (80638 <main+0x194>)
   805a4:	4798      	blx	r3
    fpga_target_register_handlers();
   805a6:	4b25      	ldr	r3, [pc, #148]	; (8063c <main+0x198>)
   805a8:	4c25      	ldr	r4, [pc, #148]	; (80640 <main+0x19c>)
   805aa:	4798      	blx	r3
	while (true) {
		// sleepmgr_enter_sleep();
		process_events();
   805ac:	47a0      	blx	r4
	while (true) {
   805ae:	e7fd      	b.n	805ac <main+0x108>
   805b0:	00082bad 	.word	0x00082bad
   805b4:	000845a9 	.word	0x000845a9
   805b8:	400e0600 	.word	0x400e0600
   805bc:	20001914 	.word	0x20001914
   805c0:	20001910 	.word	0x20001910
   805c4:	00080199 	.word	0x00080199
   805c8:	200003c0 	.word	0x200003c0
   805cc:	000800fd 	.word	0x000800fd
   805d0:	20001928 	.word	0x20001928
   805d4:	05b8d800 	.word	0x05b8d800
   805d8:	00084bad 	.word	0x00084bad
   805dc:	00085099 	.word	0x00085099
   805e0:	2000032c 	.word	0x2000032c
   805e4:	2000192c 	.word	0x2000192c
   805e8:	20000194 	.word	0x20000194
   805ec:	000843d9 	.word	0x000843d9
   805f0:	00084c91 	.word	0x00084c91
   805f4:	000806d1 	.word	0x000806d1
   805f8:	00080a81 	.word	0x00080a81
   805fc:	000807b1 	.word	0x000807b1
   80600:	00085259 	.word	0x00085259
   80604:	0008be20 	.word	0x0008be20
   80608:	0008022d 	.word	0x0008022d
   8060c:	01010100 	.word	0x01010100
   80610:	400e0000 	.word	0x400e0000
   80614:	00082ce1 	.word	0x00082ce1
   80618:	03030103 	.word	0x03030103
   8061c:	00082ced 	.word	0x00082ced
   80620:	00082cf9 	.word	0x00082cf9
   80624:	00082d05 	.word	0x00082d05
   80628:	00080c11 	.word	0x00080c11
   8062c:	00082509 	.word	0x00082509
   80630:	400e0400 	.word	0x400e0400
   80634:	000845f1 	.word	0x000845f1
   80638:	00081b59 	.word	0x00081b59
   8063c:	00082361 	.word	0x00082361
   80640:	000818a1 	.word	0x000818a1

00080644 <do_task>:

/*
Can insert regular tasks here if needed
*/
void do_task(void)
{
   80644:	b538      	push	{r3, r4, r5, lr}
	static bool last_power_state = false;
	
	//If change in external state pin
	if (board_get_powerstate() != last_power_state){
   80646:	203e      	movs	r0, #62	; 0x3e
   80648:	4c0c      	ldr	r4, [pc, #48]	; (8067c <do_task+0x38>)
   8064a:	47a0      	blx	r4
   8064c:	3800      	subs	r0, #0
   8064e:	bf18      	it	ne
   80650:	2001      	movne	r0, #1
   80652:	4d0b      	ldr	r5, [pc, #44]	; (80680 <do_task+0x3c>)
   80654:	782b      	ldrb	r3, [r5, #0]
   80656:	4298      	cmp	r0, r3
   80658:	d100      	bne.n	8065c <do_task+0x18>
		}
		
		//Record new state
		last_power_state = board_get_powerstate();
	}
}
   8065a:	bd38      	pop	{r3, r4, r5, pc}
		if (board_get_powerstate()){
   8065c:	203e      	movs	r0, #62	; 0x3e
   8065e:	47a0      	blx	r4
   80660:	b148      	cbz	r0, 80676 <do_task+0x32>
			fpga_pins(true);
   80662:	2001      	movs	r0, #1
   80664:	4b07      	ldr	r3, [pc, #28]	; (80684 <do_task+0x40>)
   80666:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   80668:	203e      	movs	r0, #62	; 0x3e
   8066a:	47a0      	blx	r4
   8066c:	3800      	subs	r0, #0
   8066e:	bf18      	it	ne
   80670:	2001      	movne	r0, #1
   80672:	7028      	strb	r0, [r5, #0]
}
   80674:	bd38      	pop	{r3, r4, r5, pc}
			fpga_pins(false);
   80676:	4b03      	ldr	r3, [pc, #12]	; (80684 <do_task+0x40>)
   80678:	4798      	blx	r3
   8067a:	e7f5      	b.n	80668 <do_task+0x24>
   8067c:	00084729 	.word	0x00084729
   80680:	20000d8c 	.word	0x20000d8c
   80684:	0008022d 	.word	0x0008022d

00080688 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   80688:	b538      	push	{r3, r4, r5, lr}
  int ret = 0;
  cpu_irq_enter_critical();
   8068a:	4b08      	ldr	r3, [pc, #32]	; (806ac <FPGA_setlock+0x24>)
{
   8068c:	4604      	mov	r4, r0
  cpu_irq_enter_critical();
   8068e:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   80690:	4b07      	ldr	r3, [pc, #28]	; (806b0 <FPGA_setlock+0x28>)
   80692:	781a      	ldrb	r2, [r3, #0]
   80694:	b92a      	cbnz	r2, 806a2 <FPGA_setlock+0x1a>
  {
    ret = 1;
   80696:	2501      	movs	r5, #1
    _fpga_locked = lockstatus;
   80698:	701c      	strb	r4, [r3, #0]
  }
  cpu_irq_leave_critical();
   8069a:	4b06      	ldr	r3, [pc, #24]	; (806b4 <FPGA_setlock+0x2c>)
   8069c:	4798      	blx	r3
  return ret;
}
   8069e:	4628      	mov	r0, r5
   806a0:	bd38      	pop	{r3, r4, r5, pc}
  int ret = 0;
   806a2:	2500      	movs	r5, #0
  cpu_irq_leave_critical();
   806a4:	4b03      	ldr	r3, [pc, #12]	; (806b4 <FPGA_setlock+0x2c>)
   806a6:	4798      	blx	r3
}
   806a8:	4628      	mov	r0, r5
   806aa:	bd38      	pop	{r3, r4, r5, pc}
   806ac:	00084cbd 	.word	0x00084cbd
   806b0:	20000d8d 	.word	0x20000d8d
   806b4:	00084cfd 	.word	0x00084cfd

000806b8 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   806b8:	2200      	movs	r2, #0
   806ba:	4b01      	ldr	r3, [pc, #4]	; (806c0 <FPGA_releaselock+0x8>)
   806bc:	701a      	strb	r2, [r3, #0]
}
   806be:	4770      	bx	lr
   806c0:	20000d8d 	.word	0x20000d8d

000806c4 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   806c4:	4b01      	ldr	r3, [pc, #4]	; (806cc <FPGA_lockstatus+0x8>)
   806c6:	7818      	ldrb	r0, [r3, #0]
}
   806c8:	4770      	bx	lr
   806ca:	bf00      	nop
   806cc:	20000d8d 	.word	0x20000d8d

000806d0 <fpga_program_init>:
	#endif
}

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   806d0:	b510      	push	{r4, lr}
    FPGA_NPROG_SETUP();
   806d2:	4b05      	ldr	r3, [pc, #20]	; (806e8 <fpga_program_init+0x18>)
   806d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806d8:	2008      	movs	r0, #8
   806da:	4798      	blx	r3
    FPGA_NPROG_HIGH();
}
   806dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    FPGA_NPROG_HIGH();
   806e0:	2008      	movs	r0, #8
   806e2:	4b02      	ldr	r3, [pc, #8]	; (806ec <fpga_program_init+0x1c>)
   806e4:	4718      	bx	r3
   806e6:	bf00      	nop
   806e8:	0008477d 	.word	0x0008477d
   806ec:	00084745 	.word	0x00084745

000806f0 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   806f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   806f4:	4c1b      	ldr	r4, [pc, #108]	; (80764 <fpga_program_setup1+0x74>)
{
   806f6:	4605      	mov	r5, r0
	FPGA_NPROG_LOW();
   806f8:	4b1b      	ldr	r3, [pc, #108]	; (80768 <fpga_program_setup1+0x78>)
   806fa:	2008      	movs	r0, #8
   806fc:	4798      	blx	r3
	spi_enable_clock(SPI);
   806fe:	4620      	mov	r0, r4
   80700:	4b1a      	ldr	r3, [pc, #104]	; (8076c <fpga_program_setup1+0x7c>)
   80702:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   80704:	2380      	movs	r3, #128	; 0x80
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80706:	2200      	movs	r2, #0
   80708:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8070a:	6863      	ldr	r3, [r4, #4]
   8070c:	4620      	mov	r0, r4
   8070e:	f043 0301 	orr.w	r3, r3, #1
   80712:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80714:	6863      	ldr	r3, [r4, #4]
   80716:	4611      	mov	r1, r2
   80718:	f043 0310 	orr.w	r3, r3, #16
   8071c:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8071e:	6863      	ldr	r3, [r4, #4]
   80720:	4f13      	ldr	r7, [pc, #76]	; (80770 <fpga_program_setup1+0x80>)
   80722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80726:	6063      	str	r3, [r4, #4]
   80728:	47b8      	blx	r7
	spi_set_clock_phase(SPI, 0, 1);
   8072a:	2201      	movs	r2, #1
   8072c:	4620      	mov	r0, r4
   8072e:	2100      	movs	r1, #0
   80730:	4b10      	ldr	r3, [pc, #64]	; (80774 <fpga_program_setup1+0x84>)
   80732:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   80734:	4628      	mov	r0, r5
   80736:	4910      	ldr	r1, [pc, #64]	; (80778 <fpga_program_setup1+0x88>)
   80738:	4b10      	ldr	r3, [pc, #64]	; (8077c <fpga_program_setup1+0x8c>)
   8073a:	4798      	blx	r3
   8073c:	4602      	mov	r2, r0
   8073e:	2100      	movs	r1, #0
   80740:	4620      	mov	r0, r4
   80742:	4b0f      	ldr	r3, [pc, #60]	; (80780 <fpga_program_setup1+0x90>)
   80744:	b2d2      	uxtb	r2, r2
   80746:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80748:	2301      	movs	r3, #1

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8074a:	4e0e      	ldr	r6, [pc, #56]	; (80784 <fpga_program_setup1+0x94>)
   8074c:	6023      	str	r3, [r4, #0]
   8074e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80752:	200e      	movs	r0, #14
   80754:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80756:	4633      	mov	r3, r6
	#endif
#endif
}
   80758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8075c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80760:	200f      	movs	r0, #15
   80762:	4718      	bx	r3
   80764:	40008000 	.word	0x40008000
   80768:	00084761 	.word	0x00084761
   8076c:	000842fd 	.word	0x000842fd
   80770:	00084345 	.word	0x00084345
   80774:	0008435d 	.word	0x0008435d
   80778:	05b8d800 	.word	0x05b8d800
   8077c:	00084375 	.word	0x00084375
   80780:	0008438d 	.word	0x0008438d
   80784:	0008477d 	.word	0x0008477d

00080788 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
    FPGA_NPROG_HIGH();
   80788:	2008      	movs	r0, #8
   8078a:	4b01      	ldr	r3, [pc, #4]	; (80790 <fpga_program_setup2+0x8>)
   8078c:	4718      	bx	r3
   8078e:	bf00      	nop
   80790:	00084745 	.word	0x00084745

00080794 <fpga_program_sendbyte>:
   80794:	2300      	movs	r3, #0
   80796:	b410      	push	{r4}
   80798:	4c03      	ldr	r4, [pc, #12]	; (807a8 <fpga_program_sendbyte+0x14>)
   8079a:	4601      	mov	r1, r0
   8079c:	46a4      	mov	ip, r4
   8079e:	461a      	mov	r2, r3
   807a0:	4802      	ldr	r0, [pc, #8]	; (807ac <fpga_program_sendbyte+0x18>)
   807a2:	bc10      	pop	{r4}
   807a4:	4760      	bx	ip
   807a6:	bf00      	nop
   807a8:	00084309 	.word	0x00084309
   807ac:	40008000 	.word	0x40008000

000807b0 <cdce906_init>:

#define CDCE906_ADDR 0x69

/* Init the CDCE906 chip, set offline */
bool cdce906_init(void)
{
   807b0:	b570      	push	{r4, r5, r6, lr}
	gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
   807b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
{
   807b6:	b08a      	sub	sp, #40	; 0x28
	gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
   807b8:	4c1c      	ldr	r4, [pc, #112]	; (8082c <cdce906_init+0x7c>)
   807ba:	2018      	movs	r0, #24
   807bc:	47a0      	blx	r4
	gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
   807be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807c2:	2019      	movs	r0, #25
   807c4:	47a0      	blx	r4
	
	twi_master_options_t opt = {
   807c6:	2569      	movs	r5, #105	; 0x69
   807c8:	f24c 3250 	movw	r2, #50000	; 0xc350
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   807cc:	4918      	ldr	r1, [pc, #96]	; (80830 <cdce906_init+0x80>)
   807ce:	e9cd 2503 	strd	r2, r5, [sp, #12]
   807d2:	4b18      	ldr	r3, [pc, #96]	; (80834 <cdce906_init+0x84>)
   807d4:	2013      	movs	r0, #19
   807d6:	9102      	str	r1, [sp, #8]
   807d8:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   807da:	4b17      	ldr	r3, [pc, #92]	; (80838 <cdce906_init+0x88>)
   807dc:	a902      	add	r1, sp, #8
   807de:	4817      	ldr	r0, [pc, #92]	; (8083c <cdce906_init+0x8c>)
   807e0:	4798      	blx	r3
		.chip  = CDCE906_ADDR
	};
	
	twi_master_setup(TWI1, &opt);
	
	uint8_t data = 0;
   807e2:	2400      	movs	r4, #0
	}
}

bool cdce906_read(uint8_t addr, uint8_t * data)
{
	twi_package_t packet_read = {
   807e4:	f04f 0c80 	mov.w	ip, #128	; 0x80
   807e8:	2301      	movs	r3, #1
   807ea:	9405      	str	r4, [sp, #20]
   807ec:	f10d 0607 	add.w	r6, sp, #7
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   807f0:	4812      	ldr	r0, [pc, #72]	; (8083c <cdce906_init+0x8c>)
   807f2:	4a13      	ldr	r2, [pc, #76]	; (80840 <cdce906_init+0x90>)
   807f4:	a905      	add	r1, sp, #20
	twi_package_t packet_read = {
   807f6:	f88d c014 	strb.w	ip, [sp, #20]
   807fa:	9409      	str	r4, [sp, #36]	; 0x24
	uint8_t data = 0;
   807fc:	f88d 4007 	strb.w	r4, [sp, #7]
	twi_package_t packet_read = {
   80800:	9607      	str	r6, [sp, #28]
   80802:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   80806:	9306      	str	r3, [sp, #24]
   80808:	9308      	str	r3, [sp, #32]
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   8080a:	4790      	blx	r2
   8080c:	b110      	cbz	r0, 80814 <cdce906_init+0x64>
		return false;
   8080e:	4620      	mov	r0, r4
}
   80810:	b00a      	add	sp, #40	; 0x28
   80812:	bd70      	pop	{r4, r5, r6, pc}
	if ((data & 0x0F) == 0x01){
   80814:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80818:	f000 000f 	and.w	r0, r0, #15
   8081c:	f1a0 0001 	sub.w	r0, r0, #1
   80820:	fab0 f080 	clz	r0, r0
   80824:	0940      	lsrs	r0, r0, #5
}
   80826:	b00a      	add	sp, #40	; 0x28
   80828:	bd70      	pop	{r4, r5, r6, pc}
   8082a:	bf00      	nop
   8082c:	0008477d 	.word	0x0008477d
   80830:	05b8d800 	.word	0x05b8d800
   80834:	000845a9 	.word	0x000845a9
   80838:	0008493d 	.word	0x0008493d
   8083c:	40088000 	.word	0x40088000
   80840:	000849bd 	.word	0x000849bd

00080844 <cdce906_write>:
{
   80844:	4603      	mov	r3, r0
   80846:	b570      	push	{r4, r5, r6, lr}
	twi_package_t packet_write = {
   80848:	2201      	movs	r2, #1
{
   8084a:	468e      	mov	lr, r1
	twi_package_t packet_write = {
   8084c:	2400      	movs	r4, #0
   8084e:	f04f 0c69 	mov.w	ip, #105	; 0x69
{
   80852:	b088      	sub	sp, #32
	twi_package_t packet_write = {
   80854:	f063 037f 	orn	r3, r3, #127	; 0x7f
	if (twi_master_write(TWI1, &packet_write) == TWI_SUCCESS){
   80858:	4d0a      	ldr	r5, [pc, #40]	; (80884 <cdce906_write+0x40>)
   8085a:	a903      	add	r1, sp, #12
	twi_package_t packet_write = {
   8085c:	f10d 0607 	add.w	r6, sp, #7
	if (twi_master_write(TWI1, &packet_write) == TWI_SUCCESS){
   80860:	4809      	ldr	r0, [pc, #36]	; (80888 <cdce906_write+0x44>)
	twi_package_t packet_write = {
   80862:	9407      	str	r4, [sp, #28]
   80864:	9403      	str	r4, [sp, #12]
   80866:	9605      	str	r6, [sp, #20]
{
   80868:	f88d e007 	strb.w	lr, [sp, #7]
	twi_package_t packet_write = {
   8086c:	f88d 300c 	strb.w	r3, [sp, #12]
   80870:	f88d c01c 	strb.w	ip, [sp, #28]
   80874:	9204      	str	r2, [sp, #16]
   80876:	9206      	str	r2, [sp, #24]
	if (twi_master_write(TWI1, &packet_write) == TWI_SUCCESS){
   80878:	47a8      	blx	r5
}
   8087a:	fab0 f080 	clz	r0, r0
   8087e:	0940      	lsrs	r0, r0, #5
   80880:	b008      	add	sp, #32
   80882:	bd70      	pop	{r4, r5, r6, pc}
   80884:	00084a95 	.word	0x00084a95
   80888:	40088000 	.word	0x40088000

0008088c <cdce906_read>:
{
   8088c:	b510      	push	{r4, lr}
	twi_package_t packet_read = {
   8088e:	2400      	movs	r4, #0
   80890:	2201      	movs	r2, #1
   80892:	f04f 0c69 	mov.w	ip, #105	; 0x69
{
   80896:	b086      	sub	sp, #24
	twi_package_t packet_read = {
   80898:	f060 037f 	orn	r3, r0, #127	; 0x7f
   8089c:	9103      	str	r1, [sp, #12]
   8089e:	9401      	str	r4, [sp, #4]
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   808a0:	a901      	add	r1, sp, #4
	twi_package_t packet_read = {
   808a2:	f88d 3004 	strb.w	r3, [sp, #4]
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   808a6:	4806      	ldr	r0, [pc, #24]	; (808c0 <cdce906_read+0x34>)
   808a8:	4b06      	ldr	r3, [pc, #24]	; (808c4 <cdce906_read+0x38>)
	twi_package_t packet_read = {
   808aa:	9405      	str	r4, [sp, #20]
   808ac:	9202      	str	r2, [sp, #8]
   808ae:	9204      	str	r2, [sp, #16]
   808b0:	f88d c014 	strb.w	ip, [sp, #20]
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   808b4:	4798      	blx	r3
		return true;
	} else {
		return false;
	}	
   808b6:	fab0 f080 	clz	r0, r0
   808ba:	0940      	lsrs	r0, r0, #5
   808bc:	b006      	add	sp, #24
   808be:	bd10      	pop	{r4, pc}
   808c0:	40088000 	.word	0x40088000
   808c4:	000849bd 	.word	0x000849bd

000808c8 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   808c8:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   808ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   808ce:	4c0b      	ldr	r4, [pc, #44]	; (808fc <fpgaspi_program_init+0x34>)
   808d0:	200f      	movs	r0, #15
   808d2:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   808d4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   808d8:	2032      	movs	r0, #50	; 0x32
   808da:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   808dc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   808e0:	200e      	movs	r0, #14
   808e2:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   808e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808e8:	2036      	movs	r0, #54	; 0x36
   808ea:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   808ec:	2036      	movs	r0, #54	; 0x36
   808ee:	4b04      	ldr	r3, [pc, #16]	; (80900 <fpgaspi_program_init+0x38>)
   808f0:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
}
   808f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CCLK_LOW();
   808f6:	200f      	movs	r0, #15
   808f8:	4b02      	ldr	r3, [pc, #8]	; (80904 <fpgaspi_program_init+0x3c>)
   808fa:	4718      	bx	r3
   808fc:	0008477d 	.word	0x0008477d
   80900:	00084745 	.word	0x00084745
   80904:	00084761 	.word	0x00084761

00080908 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
	FPGASPI_CS_LOW();
   80908:	2036      	movs	r0, #54	; 0x36
   8090a:	4b01      	ldr	r3, [pc, #4]	; (80910 <fpgaspi_cs_low+0x8>)
   8090c:	4718      	bx	r3
   8090e:	bf00      	nop
   80910:	00084761 	.word	0x00084761

00080914 <fpgaspi_cs_high>:
}

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
	FPGASPI_CS_HIGH();
   80914:	2036      	movs	r0, #54	; 0x36
   80916:	4b01      	ldr	r3, [pc, #4]	; (8091c <fpgaspi_cs_high+0x8>)
   80918:	4718      	bx	r3
   8091a:	bf00      	nop
   8091c:	00084745 	.word	0x00084745

00080920 <fpgaspi_xferbyte>:
}


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   80920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80924:	2608      	movs	r6, #8
	uint8_t result = 0;
   80926:	2400      	movs	r4, #0
{
   80928:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   8092a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80980 <fpgaspi_xferbyte+0x60>
   8092e:	4f15      	ldr	r7, [pc, #84]	; (80984 <fpgaspi_xferbyte+0x64>)
   80930:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80988 <fpgaspi_xferbyte+0x68>
   80934:	e008      	b.n	80948 <fpgaspi_xferbyte+0x28>
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
			} else {
			FPGASPI_DO_LOW();
   80936:	47b8      	blx	r7
		}
		
		FPGASPI_CCLK_HIGH();
   80938:	200f      	movs	r0, #15
   8093a:	47c0      	blx	r8
		databyte = databyte << 1;
   8093c:	006d      	lsls	r5, r5, #1
		result = result << 1;
   8093e:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   80940:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   80942:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80944:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   80946:	d00e      	beq.n	80966 <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80948:	200e      	movs	r0, #14
   8094a:	47c8      	blx	r9
   8094c:	4603      	mov	r3, r0
		FPGASPI_CCLK_LOW();
   8094e:	200f      	movs	r0, #15
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80950:	2b00      	cmp	r3, #0
   80952:	bf18      	it	ne
   80954:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   80958:	47b8      	blx	r7
		if (databyte & 0x80){
   8095a:	062b      	lsls	r3, r5, #24
			FPGASPI_DO_HIGH();
   8095c:	f04f 0032 	mov.w	r0, #50	; 0x32
		if (databyte & 0x80){
   80960:	d5e9      	bpl.n	80936 <fpgaspi_xferbyte+0x16>
			FPGASPI_DO_HIGH();
   80962:	47c0      	blx	r8
   80964:	e7e8      	b.n	80938 <fpgaspi_xferbyte+0x18>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80966:	200e      	movs	r0, #14
   80968:	47c8      	blx	r9
   8096a:	4603      	mov	r3, r0
   8096c:	2b00      	cmp	r3, #0
   8096e:	bf18      	it	ne
   80970:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   80974:	200f      	movs	r0, #15
	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80976:	b264      	sxtb	r4, r4
	FPGASPI_CCLK_LOW();
   80978:	47b8      	blx	r7

	return result;
}
   8097a:	b2e0      	uxtb	r0, r4
   8097c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80980:	00084729 	.word	0x00084729
   80984:	00084761 	.word	0x00084761
   80988:	00084745 	.word	0x00084745

0008098c <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   8098c:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   8098e:	2100      	movs	r1, #0
   80990:	4c05      	ldr	r4, [pc, #20]	; (809a8 <fpgaspi_program_deinit+0x1c>)
   80992:	200f      	movs	r0, #15
   80994:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   80996:	2100      	movs	r1, #0
   80998:	2032      	movs	r0, #50	; 0x32
   8099a:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   8099c:	4623      	mov	r3, r4
   8099e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CS_RELEASE();
   809a2:	2100      	movs	r1, #0
   809a4:	2036      	movs	r0, #54	; 0x36
   809a6:	4718      	bx	r3
   809a8:	0008477d 	.word	0x0008477d

000809ac <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   809ac:	b510      	push	{r4, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   809ae:	4a05      	ldr	r2, [pc, #20]	; (809c4 <spi1util_init+0x18>)
   809b0:	4b05      	ldr	r3, [pc, #20]	; (809c8 <spi1util_init+0x1c>)
   809b2:	6810      	ldr	r0, [r2, #0]
   809b4:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
}
   809b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_pin_low(pin_spi1_sck);
   809ba:	4a04      	ldr	r2, [pc, #16]	; (809cc <spi1util_init+0x20>)
   809bc:	4b04      	ldr	r3, [pc, #16]	; (809d0 <spi1util_init+0x24>)
   809be:	6810      	ldr	r0, [r2, #0]
   809c0:	4718      	bx	r3
   809c2:	bf00      	nop
   809c4:	200001bc 	.word	0x200001bc
   809c8:	00084745 	.word	0x00084745
   809cc:	200001c8 	.word	0x200001c8
   809d0:	00084761 	.word	0x00084761

000809d4 <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
	gpio_set_pin_low(pin_spi1_cs);
   809d4:	4a01      	ldr	r2, [pc, #4]	; (809dc <spi1util_cs_low+0x8>)
   809d6:	4b02      	ldr	r3, [pc, #8]	; (809e0 <spi1util_cs_low+0xc>)
   809d8:	6810      	ldr	r0, [r2, #0]
   809da:	4718      	bx	r3
   809dc:	200001bc 	.word	0x200001bc
   809e0:	00084761 	.word	0x00084761

000809e4 <spi1util_cs_high>:
}

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
	gpio_set_pin_high(pin_spi1_cs);
   809e4:	4a01      	ldr	r2, [pc, #4]	; (809ec <spi1util_cs_high+0x8>)
   809e6:	4b02      	ldr	r3, [pc, #8]	; (809f0 <spi1util_cs_high+0xc>)
   809e8:	6810      	ldr	r0, [r2, #0]
   809ea:	4718      	bx	r3
   809ec:	200001bc 	.word	0x200001bc
   809f0:	00084745 	.word	0x00084745

000809f4 <spi1util_xferbyte>:
}

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   809f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809f8:	2608      	movs	r6, #8
	uint8_t result = 0;
   809fa:	2400      	movs	r4, #0
{
   809fc:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   809fe:	f8df b064 	ldr.w	fp, [pc, #100]	; 80a64 <spi1util_xferbyte+0x70>
   80a02:	4f19      	ldr	r7, [pc, #100]	; (80a68 <spi1util_xferbyte+0x74>)
   80a04:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80a6c <spi1util_xferbyte+0x78>
   80a08:	f8df a064 	ldr.w	sl, [pc, #100]	; 80a70 <spi1util_xferbyte+0x7c>
   80a0c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80a74 <spi1util_xferbyte+0x80>
   80a10:	e008      	b.n	80a24 <spi1util_xferbyte+0x30>
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
   80a12:	47c0      	blx	r8
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   80a14:	6838      	ldr	r0, [r7, #0]
   80a16:	47c8      	blx	r9
		databyte = databyte << 1;
   80a18:	006d      	lsls	r5, r5, #1
		result = result << 1;
   80a1a:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   80a1c:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   80a1e:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80a20:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   80a22:	d010      	beq.n	80a46 <spi1util_xferbyte+0x52>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a24:	4b14      	ldr	r3, [pc, #80]	; (80a78 <spi1util_xferbyte+0x84>)
   80a26:	f8db 0000 	ldr.w	r0, [fp]
   80a2a:	4798      	blx	r3
   80a2c:	4603      	mov	r3, r0
		gpio_set_pin_low(pin_spi1_sck);
   80a2e:	6838      	ldr	r0, [r7, #0]
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a30:	2b00      	cmp	r3, #0
   80a32:	bf18      	it	ne
   80a34:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80a38:	47c0      	blx	r8
		if (databyte & 0x80){
   80a3a:	062b      	lsls	r3, r5, #24
			gpio_set_pin_high(pin_spi1_mosi);
   80a3c:	f8da 0000 	ldr.w	r0, [sl]
		if (databyte & 0x80){
   80a40:	d5e7      	bpl.n	80a12 <spi1util_xferbyte+0x1e>
			gpio_set_pin_high(pin_spi1_mosi);
   80a42:	47c8      	blx	r9
   80a44:	e7e6      	b.n	80a14 <spi1util_xferbyte+0x20>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a46:	f8db 0000 	ldr.w	r0, [fp]
   80a4a:	4b0b      	ldr	r3, [pc, #44]	; (80a78 <spi1util_xferbyte+0x84>)
   80a4c:	4798      	blx	r3
   80a4e:	4603      	mov	r3, r0
   80a50:	2b00      	cmp	r3, #0
   80a52:	bf18      	it	ne
   80a54:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80a58:	6838      	ldr	r0, [r7, #0]
	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80a5a:	b264      	sxtb	r4, r4
	gpio_set_pin_low(pin_spi1_sck);
   80a5c:	47c0      	blx	r8

	return result;
}
   80a5e:	b2e0      	uxtb	r0, r4
   80a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80a64:	200001c0 	.word	0x200001c0
   80a68:	200001c8 	.word	0x200001c8
   80a6c:	00084761 	.word	0x00084761
   80a70:	200001c4 	.word	0x200001c4
   80a74:	00084745 	.word	0x00084745
   80a78:	00084729 	.word	0x00084729

00080a7c <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   80a7c:	4770      	bx	lr
   80a7e:	bf00      	nop

00080a80 <tps56520_init>:
	return p & 1;
}

/* Init the TPS56520 chip, set to 1.00V output */
bool tps56520_init(void)
{
   80a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   80a84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
{
   80a88:	b08f      	sub	sp, #60	; 0x3c
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   80a8a:	4c2a      	ldr	r4, [pc, #168]	; (80b34 <tps56520_init+0xb4>)
   80a8c:	2009      	movs	r0, #9
   80a8e:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   80a90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a94:	200a      	movs	r0, #10
   80a96:	47a0      	blx	r4
	
	twi_master_options_t opt = {
   80a98:	f24c 3150 	movw	r1, #50000	; 0xc350
   80a9c:	2234      	movs	r2, #52	; 0x34
   80a9e:	2403      	movs	r4, #3
	p_opt->master_clk = sysclk_get_cpu_hz();
   80aa0:	4b25      	ldr	r3, [pc, #148]	; (80b38 <tps56520_init+0xb8>)
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80aa2:	f8df a098 	ldr.w	sl, [pc, #152]	; 80b3c <tps56520_init+0xbc>
	twi_master_options_t opt = {
   80aa6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   80aaa:	9301      	str	r3, [sp, #4]
   80aac:	2012      	movs	r0, #18
   80aae:	4b24      	ldr	r3, [pc, #144]	; (80b40 <tps56520_init+0xc0>)
   80ab0:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   80ab2:	4b24      	ldr	r3, [pc, #144]	; (80b44 <tps56520_init+0xc4>)
   80ab4:	4650      	mov	r0, sl
   80ab6:	a901      	add	r1, sp, #4
   80ab8:	4798      	blx	r3
	for(int retry = 3; retry > 0; retry--){
   80aba:	4b23      	ldr	r3, [pc, #140]	; (80b48 <tps56520_init+0xc8>)
   80abc:	ae04      	add	r6, sp, #16
	twi_package_t packet_write = {
   80abe:	f8d3 8000 	ldr.w	r8, [r3]
   80ac2:	f10d 0702 	add.w	r7, sp, #2
   80ac6:	ea4f 4918 	mov.w	r9, r8, lsr #16
		setting |= 1<<7;
   80aca:	22a8      	movs	r2, #168	; 0xa8
	twi_package_t packet_write = {
   80acc:	2501      	movs	r5, #1
   80ace:	f04f 0b34 	mov.w	fp, #52	; 0x34
   80ad2:	f8a6 8000 	strh.w	r8, [r6]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80ad6:	ae04      	add	r6, sp, #16
   80ad8:	4631      	mov	r1, r6
   80ada:	4650      	mov	r0, sl
   80adc:	4b1b      	ldr	r3, [pc, #108]	; (80b4c <tps56520_init+0xcc>)
		setting |= 1<<7;
   80ade:	f88d 2002 	strb.w	r2, [sp, #2]
	twi_package_t packet_write = {
   80ae2:	f88d 9012 	strb.w	r9, [sp, #18]
   80ae6:	9706      	str	r7, [sp, #24]
   80ae8:	9505      	str	r5, [sp, #20]
   80aea:	9507      	str	r5, [sp, #28]
   80aec:	f88d b020 	strb.w	fp, [sp, #32]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80af0:	4798      	blx	r3
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &volt_read,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80af2:	4a17      	ldr	r2, [pc, #92]	; (80b50 <tps56520_init+0xd0>)
   80af4:	a909      	add	r1, sp, #36	; 0x24
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80af6:	b998      	cbnz	r0, 80b20 <tps56520_init+0xa0>
	twi_package_t packet_read = {
   80af8:	f10d 0303 	add.w	r3, sp, #3
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80afc:	4650      	mov	r0, sl
	twi_package_t packet_read = {
   80afe:	930b      	str	r3, [sp, #44]	; 0x2c
   80b00:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
   80b04:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
   80b08:	f88d 9026 	strb.w	r9, [sp, #38]	; 0x26
   80b0c:	950a      	str	r5, [sp, #40]	; 0x28
   80b0e:	950c      	str	r5, [sp, #48]	; 0x30
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80b10:	4790      	blx	r2
   80b12:	b928      	cbnz	r0, 80b20 <tps56520_init+0xa0>
		return false;
	}
	
	if (volt_read == setting){
   80b14:	f89d 2003 	ldrb.w	r2, [sp, #3]
   80b18:	f89d 3002 	ldrb.w	r3, [sp, #2]
   80b1c:	429a      	cmp	r2, r3
   80b1e:	d005      	beq.n	80b2c <tps56520_init+0xac>
	for(int retry = 3; retry > 0; retry--){
   80b20:	3c01      	subs	r4, #1
   80b22:	d1d2      	bne.n	80aca <tps56520_init+0x4a>
	return false;
   80b24:	4620      	mov	r0, r4
}
   80b26:	b00f      	add	sp, #60	; 0x3c
   80b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return true;
   80b2c:	4628      	mov	r0, r5
}
   80b2e:	b00f      	add	sp, #60	; 0x3c
   80b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80b34:	0008477d 	.word	0x0008477d
   80b38:	05b8d800 	.word	0x05b8d800
   80b3c:	40084000 	.word	0x40084000
   80b40:	000845a9 	.word	0x000845a9
   80b44:	0008493d 	.word	0x0008493d
   80b48:	0008be28 	.word	0x0008be28
   80b4c:	00084a95 	.word	0x00084a95
   80b50:	000849bd 	.word	0x000849bd

00080b54 <tps56520_set>:
	if (mv_output > 1200){
   80b54:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   80b58:	b283      	uxth	r3, r0
   80b5a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   80b5e:	d84b      	bhi.n	80bf8 <tps56520_set+0xa4>
{
   80b60:	b5f0      	push	{r4, r5, r6, r7, lr}
	twi_package_t packet_write = {
   80b62:	2401      	movs	r4, #1
   80b64:	2634      	movs	r6, #52	; 0x34
	uint8_t setting = (mv_output - 600) / 10;
   80b66:	4b25      	ldr	r3, [pc, #148]	; (80bfc <tps56520_set+0xa8>)
{
   80b68:	b08d      	sub	sp, #52	; 0x34
	uint8_t setting = (mv_output - 600) / 10;
   80b6a:	fba3 3000 	umull	r3, r0, r3, r0
   80b6e:	08c2      	lsrs	r2, r0, #3
	p = p ^ (p >> 4 | p << 4);
   80b70:	f3c0 13c3 	ubfx	r3, r0, #7, #4
   80b74:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   80b78:	4053      	eors	r3, r2
   80b7a:	b2da      	uxtb	r2, r3
	p = p ^ (p >> 2);
   80b7c:	f3c3 0385 	ubfx	r3, r3, #2, #6
   80b80:	4053      	eors	r3, r2
	twi_package_t packet_write = {
   80b82:	4a1f      	ldr	r2, [pc, #124]	; (80c00 <tps56520_set+0xac>)
	p = p ^ (p >> 1);
   80b84:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
	uint8_t setting = (mv_output - 600) / 10;
   80b88:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (!checkoddparity(setting)){
   80b8c:	07db      	lsls	r3, r3, #31
	twi_package_t packet_write = {
   80b8e:	6815      	ldr	r5, [r2, #0]
		setting |= 1<<7;
   80b90:	bf58      	it	pl
   80b92:	f060 007f 	ornpl	r0, r0, #127	; 0x7f
	twi_package_t packet_write = {
   80b96:	f10d 0306 	add.w	r3, sp, #6
		setting |= 1<<7;
   80b9a:	f88d 0006 	strb.w	r0, [sp, #6]
	twi_package_t packet_write = {
   80b9e:	0c2f      	lsrs	r7, r5, #16
   80ba0:	9304      	str	r3, [sp, #16]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80ba2:	4818      	ldr	r0, [pc, #96]	; (80c04 <tps56520_set+0xb0>)
   80ba4:	4b18      	ldr	r3, [pc, #96]	; (80c08 <tps56520_set+0xb4>)
   80ba6:	a902      	add	r1, sp, #8
	twi_package_t packet_write = {
   80ba8:	f8ad 5008 	strh.w	r5, [sp, #8]
   80bac:	f88d 700a 	strb.w	r7, [sp, #10]
   80bb0:	9403      	str	r4, [sp, #12]
   80bb2:	9405      	str	r4, [sp, #20]
   80bb4:	f88d 6018 	strb.w	r6, [sp, #24]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   80bb8:	4798      	blx	r3
   80bba:	b110      	cbz	r0, 80bc2 <tps56520_set+0x6e>
		return false;
   80bbc:	2000      	movs	r0, #0
		return true;
	}
	
	return false;
   80bbe:	b00d      	add	sp, #52	; 0x34
   80bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	twi_package_t packet_read = {
   80bc2:	f10d 0307 	add.w	r3, sp, #7
   80bc6:	9309      	str	r3, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80bc8:	480e      	ldr	r0, [pc, #56]	; (80c04 <tps56520_set+0xb0>)
   80bca:	4b10      	ldr	r3, [pc, #64]	; (80c0c <tps56520_set+0xb8>)
   80bcc:	a907      	add	r1, sp, #28
	twi_package_t packet_read = {
   80bce:	f8ad 501c 	strh.w	r5, [sp, #28]
   80bd2:	f88d 701e 	strb.w	r7, [sp, #30]
   80bd6:	9408      	str	r4, [sp, #32]
   80bd8:	940a      	str	r4, [sp, #40]	; 0x28
   80bda:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   80bde:	4798      	blx	r3
   80be0:	2800      	cmp	r0, #0
   80be2:	d1eb      	bne.n	80bbc <tps56520_set+0x68>
	if (volt_read == setting){
   80be4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80be8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80bec:	1ac0      	subs	r0, r0, r3
   80bee:	fab0 f080 	clz	r0, r0
   80bf2:	0940      	lsrs	r0, r0, #5
   80bf4:	b00d      	add	sp, #52	; 0x34
   80bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   80bf8:	2000      	movs	r0, #0
   80bfa:	4770      	bx	lr
   80bfc:	cccccccd 	.word	0xcccccccd
   80c00:	0008be28 	.word	0x0008be28
   80c04:	40084000 	.word	0x40084000
   80c08:	00084a95 	.word	0x00084a95
   80c0c:	000849bd 	.word	0x000849bd

00080c10 <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   80c10:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   80c12:	204f      	movs	r0, #79	; 0x4f
   80c14:	4c04      	ldr	r4, [pc, #16]	; (80c28 <ui_init+0x18>)
   80c16:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   80c18:	2050      	movs	r0, #80	; 0x50
   80c1a:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   80c1c:	4623      	mov	r3, r4
}
   80c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LED_Off(LED2_GPIO);
   80c22:	2051      	movs	r0, #81	; 0x51
   80c24:	4718      	bx	r3
   80c26:	bf00      	nop
   80c28:	000841e1 	.word	0x000841e1

00080c2c <ui_powerdown>:

void ui_powerdown(void)
{
   80c2c:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   80c2e:	204f      	movs	r0, #79	; 0x4f
   80c30:	4c05      	ldr	r4, [pc, #20]	; (80c48 <ui_powerdown+0x1c>)
   80c32:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   80c34:	2050      	movs	r0, #80	; 0x50
   80c36:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   80c38:	2051      	movs	r0, #81	; 0x51
   80c3a:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
		
}
   80c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	board_power(0);
   80c40:	203f      	movs	r0, #63	; 0x3f
   80c42:	4b02      	ldr	r3, [pc, #8]	; (80c4c <ui_powerdown+0x20>)
   80c44:	4718      	bx	r3
   80c46:	bf00      	nop
   80c48:	000841e1 	.word	0x000841e1
   80c4c:	00084761 	.word	0x00084761

00080c50 <ui_wakeup>:

void ui_wakeup(void)
{
   80c50:	b510      	push	{r4, lr}
	LED_On(LED0_GPIO);
   80c52:	204f      	movs	r0, #79	; 0x4f
   80c54:	4b03      	ldr	r3, [pc, #12]	; (80c64 <ui_wakeup+0x14>)
   80c56:	4798      	blx	r3
	board_power(1);
}
   80c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	board_power(1);
   80c5c:	203f      	movs	r0, #63	; 0x3f
   80c5e:	4b02      	ldr	r3, [pc, #8]	; (80c68 <ui_wakeup+0x18>)
   80c60:	4718      	bx	r3
   80c62:	bf00      	nop
   80c64:	00084229 	.word	0x00084229
   80c68:	00084745 	.word	0x00084745

00080c6c <ui_process>:
	}
}

void ui_process(uint16_t framenumber)
{
	if ((framenumber % 1000) == 0) {
   80c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
   80c70:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   80c72:	4b0c      	ldr	r3, [pc, #48]	; (80ca4 <ui_process+0x38>)
   80c74:	fba3 1300 	umull	r1, r3, r3, r0
   80c78:	099b      	lsrs	r3, r3, #6
   80c7a:	fb02 0013 	mls	r0, r2, r3, r0
   80c7e:	b280      	uxth	r0, r0
   80c80:	b158      	cbz	r0, 80c9a <ui_process+0x2e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   80c82:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   80c86:	d004      	beq.n	80c92 <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
	
	task_tickCnt++;
   80c88:	4a07      	ldr	r2, [pc, #28]	; (80ca8 <ui_process+0x3c>)
   80c8a:	6813      	ldr	r3, [r2, #0]
   80c8c:	3301      	adds	r3, #1
   80c8e:	6013      	str	r3, [r2, #0]
}
   80c90:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   80c92:	204f      	movs	r0, #79	; 0x4f
   80c94:	4b05      	ldr	r3, [pc, #20]	; (80cac <ui_process+0x40>)
   80c96:	4798      	blx	r3
   80c98:	e7f6      	b.n	80c88 <ui_process+0x1c>
		LED_On(LED0_GPIO);
   80c9a:	204f      	movs	r0, #79	; 0x4f
   80c9c:	4b04      	ldr	r3, [pc, #16]	; (80cb0 <ui_process+0x44>)
   80c9e:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   80ca0:	e7f2      	b.n	80c88 <ui_process+0x1c>
   80ca2:	bf00      	nop
   80ca4:	10624dd3 	.word	0x10624dd3
   80ca8:	20000ea4 	.word	0x20000ea4
   80cac:	000841e1 	.word	0x000841e1
   80cb0:	00084229 	.word	0x00084229

00080cb4 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   80cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80cb6:	206b      	movs	r0, #107	; 0x6b
   80cb8:	4c0f      	ldr	r4, [pc, #60]	; (80cf8 <XMEGANVM_WaitWhileNVMControllerBusy+0x44>)
   80cba:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80cbc:	4b0f      	ldr	r3, [pc, #60]	; (80cfc <XMEGANVM_WaitWhileNVMControllerBusy+0x48>)
   80cbe:	4e10      	ldr	r6, [pc, #64]	; (80d00 <XMEGANVM_WaitWhileNVMControllerBusy+0x4c>)
   80cc0:	681f      	ldr	r7, [r3, #0]
   80cc2:	4d10      	ldr	r5, [pc, #64]	; (80d04 <XMEGANVM_WaitWhileNVMControllerBusy+0x50>)
   80cc4:	f047 070f 	orr.w	r7, r7, #15
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80cc8:	b2f8      	uxtb	r0, r7
   80cca:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80ccc:	f3c7 2007 	ubfx	r0, r7, #8, #8
   80cd0:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80cd2:	f3c7 4007 	ubfx	r0, r7, #16, #8
   80cd6:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80cd8:	0e38      	lsrs	r0, r7, #24
   80cda:	47a0      	blx	r4
}
   80cdc:	e001      	b.n	80ce2 <XMEGANVM_WaitWhileNVMControllerBusy+0x2e>
		if (TimeoutTicksRemaining == 0){
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   80cde:	0603      	lsls	r3, r0, #24
   80ce0:	d507      	bpl.n	80cf2 <XMEGANVM_WaitWhileNVMControllerBusy+0x3e>
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80ce2:	2020      	movs	r0, #32
   80ce4:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80ce6:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0){
   80ce8:	682b      	ldr	r3, [r5, #0]
   80cea:	2b00      	cmp	r3, #0
   80cec:	d1f7      	bne.n	80cde <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   80cee:	4618      	mov	r0, r3
		  return true;
		}
	}
}
   80cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  return true;
   80cf2:	2001      	movs	r0, #1
}
   80cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80cf6:	bf00      	nop
   80cf8:	00081629 	.word	0x00081629
   80cfc:	200001d0 	.word	0x200001d0
   80d00:	00081655 	.word	0x00081655
   80d04:	20000e98 	.word	0x20000e98

00080d08 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   80d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   80d0c:	4b23      	ldr	r3, [pc, #140]	; (80d9c <XMEGANVM_EnablePDI+0x94>)
{
   80d0e:	b082      	sub	sp, #8
	XPROGTarget_EnableTargetPDI();
   80d10:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   80d12:	4d23      	ldr	r5, [pc, #140]	; (80da0 <XMEGANVM_EnablePDI+0x98>)
   80d14:	20c1      	movs	r0, #193	; 0xc1
   80d16:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_RESET_KEY);
   80d18:	2059      	movs	r0, #89	; 0x59
   80d1a:	47a8      	blx	r5

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   80d1c:	20c2      	movs	r0, #194	; 0xc2
   80d1e:	47a8      	blx	r5
	XPROGTarget_SendByte(0x02);
   80d20:	2002      	movs	r0, #2
   80d22:	47a8      	blx	r5

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   80d24:	20e0      	movs	r0, #224	; 0xe0
   80d26:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   80d28:	f04f 0a12 	mov.w	sl, #18
   80d2c:	f04f 0989 	mov.w	r9, #137	; 0x89
   80d30:	f04f 08ab 	mov.w	r8, #171	; 0xab
   80d34:	466f      	mov	r7, sp
   80d36:	f10d 0407 	add.w	r4, sp, #7
   80d3a:	f04f 0c45 	mov.w	ip, #69	; 0x45
   80d3e:	20cd      	movs	r0, #205	; 0xcd
   80d40:	21d8      	movs	r1, #216	; 0xd8
   80d42:	2288      	movs	r2, #136	; 0x88
   80d44:	23ff      	movs	r3, #255	; 0xff
   80d46:	4626      	mov	r6, r4
   80d48:	f88d a000 	strb.w	sl, [sp]
   80d4c:	f88d 9001 	strb.w	r9, [sp, #1]
   80d50:	f88d 8002 	strb.w	r8, [sp, #2]
   80d54:	f88d c003 	strb.w	ip, [sp, #3]
   80d58:	f88d 0004 	strb.w	r0, [sp, #4]
   80d5c:	f88d 1005 	strb.w	r1, [sp, #5]
   80d60:	f88d 2006 	strb.w	r2, [sp, #6]
   80d64:	f88d 3007 	strb.w	r3, [sp, #7]
   80d68:	7820      	ldrb	r0, [r4, #0]
   80d6a:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   80d6c:	42be      	cmp	r6, r7
   80d6e:	f104 34ff 	add.w	r4, r4, #4294967295
   80d72:	d1e2      	bne.n	80d3a <XMEGANVM_EnablePDI+0x32>
   80d74:	4e0b      	ldr	r6, [pc, #44]	; (80da4 <XMEGANVM_EnablePDI+0x9c>)
   80d76:	4c0c      	ldr	r4, [pc, #48]	; (80da8 <XMEGANVM_EnablePDI+0xa0>)
   80d78:	e001      	b.n	80d7e <XMEGANVM_EnablePDI+0x76>
		if (StatusRegister & PDI_STATUS_NVM) {
   80d7a:	0783      	lsls	r3, r0, #30
   80d7c:	d409      	bmi.n	80d92 <XMEGANVM_EnablePDI+0x8a>
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   80d7e:	2080      	movs	r0, #128	; 0x80
   80d80:	47a8      	blx	r5
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80d82:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0) {
   80d84:	6823      	ldr	r3, [r4, #0]
   80d86:	2b00      	cmp	r3, #0
   80d88:	d1f7      	bne.n	80d7a <XMEGANVM_EnablePDI+0x72>
		  return false;
   80d8a:	4618      	mov	r0, r3

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
}
   80d8c:	b002      	add	sp, #8
   80d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		  return true;
   80d92:	2001      	movs	r0, #1
}
   80d94:	b002      	add	sp, #8
   80d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80d9a:	bf00      	nop
   80d9c:	00081725 	.word	0x00081725
   80da0:	00081629 	.word	0x00081629
   80da4:	00081655 	.word	0x00081655
   80da8:	20000e98 	.word	0x20000e98

00080dac <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   80dac:	b570      	push	{r4, r5, r6, lr}
   80dae:	4c0e      	ldr	r4, [pc, #56]	; (80de8 <XMEGANVM_DisablePDI+0x3c>)
   80db0:	4d0e      	ldr	r5, [pc, #56]	; (80dec <XMEGANVM_DisablePDI+0x40>)
   80db2:	4e0f      	ldr	r6, [pc, #60]	; (80df0 <XMEGANVM_DisablePDI+0x44>)
   80db4:	e001      	b.n	80dba <XMEGANVM_DisablePDI+0xe>
		if (StatusRegister & PDI_STATUS_NVM) {
   80db6:	0783      	lsls	r3, r0, #30
   80db8:	d408      	bmi.n	80dcc <XMEGANVM_DisablePDI+0x20>
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   80dba:	2080      	movs	r0, #128	; 0x80
   80dbc:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80dbe:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   80dc0:	6833      	ldr	r3, [r6, #0]
   80dc2:	2b00      	cmp	r3, #0
   80dc4:	d1f7      	bne.n	80db6 <XMEGANVM_DisablePDI+0xa>
   80dc6:	e001      	b.n	80dcc <XMEGANVM_DisablePDI+0x20>
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   80dc8:	6833      	ldr	r3, [r6, #0]
   80dca:	b143      	cbz	r3, 80dde <XMEGANVM_DisablePDI+0x32>
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   80dcc:	20c1      	movs	r0, #193	; 0xc1
   80dce:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   80dd0:	2000      	movs	r0, #0
   80dd2:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   80dd4:	2081      	movs	r0, #129	; 0x81
   80dd6:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   80dd8:	47a8      	blx	r5
   80dda:	2800      	cmp	r0, #0
   80ddc:	d1f4      	bne.n	80dc8 <XMEGANVM_DisablePDI+0x1c>

	XPROGTarget_DisableTargetPDI();
   80dde:	4b05      	ldr	r3, [pc, #20]	; (80df4 <XMEGANVM_DisablePDI+0x48>)
}
   80de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	XPROGTarget_DisableTargetPDI();
   80de4:	4718      	bx	r3
   80de6:	bf00      	nop
   80de8:	00081629 	.word	0x00081629
   80dec:	00081655 	.word	0x00081655
   80df0:	20000e98 	.word	0x20000e98
   80df4:	000815a9 	.word	0x000815a9

00080df8 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   80df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80dfc:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80eec <XMEGANVM_ReadMemory+0xf4>
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80e00:	4c3b      	ldr	r4, [pc, #236]	; (80ef0 <XMEGANVM_ReadMemory+0xf8>)
{
   80e02:	4681      	mov	r9, r0
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80e04:	206b      	movs	r0, #107	; 0x6b
{
   80e06:	460f      	mov	r7, r1
   80e08:	4690      	mov	r8, r2
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80e0a:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80e0c:	f8da 3000 	ldr.w	r3, [sl]
   80e10:	4e38      	ldr	r6, [pc, #224]	; (80ef4 <XMEGANVM_ReadMemory+0xfc>)
   80e12:	f043 0b0f 	orr.w	fp, r3, #15
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80e16:	fa5f f08b 	uxtb.w	r0, fp
   80e1a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80e1c:	f3cb 2007 	ubfx	r0, fp, #8, #8
   80e20:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80e22:	f3cb 4007 	ubfx	r0, fp, #16, #8
   80e26:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80e28:	ea4f 601b 	mov.w	r0, fp, lsr #24
   80e2c:	4d32      	ldr	r5, [pc, #200]	; (80ef8 <XMEGANVM_ReadMemory+0x100>)
   80e2e:	47a0      	blx	r4
}
   80e30:	e001      	b.n	80e36 <XMEGANVM_ReadMemory+0x3e>
		if (!(StatusRegister & (1 << 7))) {
   80e32:	0603      	lsls	r3, r0, #24
   80e34:	d508      	bpl.n	80e48 <XMEGANVM_ReadMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80e36:	2020      	movs	r0, #32
   80e38:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80e3a:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0){
   80e3c:	682b      	ldr	r3, [r5, #0]
   80e3e:	2b00      	cmp	r3, #0
   80e40:	d1f7      	bne.n	80e32 <XMEGANVM_ReadMemory+0x3a>
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
   80e42:	4618      	mov	r0, r3
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   80e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80e48:	204c      	movs	r0, #76	; 0x4c
   80e4a:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80e4c:	f8da 3000 	ldr.w	r3, [sl]
   80e50:	f043 0a0a 	orr.w	sl, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80e54:	fa5f f08a 	uxtb.w	r0, sl
   80e58:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80e5a:	f3ca 2007 	ubfx	r0, sl, #8, #8
   80e5e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80e60:	f3ca 4007 	ubfx	r0, sl, #16, #8
   80e64:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80e66:	ea4f 601a 	mov.w	r0, sl, lsr #24
   80e6a:	47a0      	blx	r4
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   80e6c:	2043      	movs	r0, #67	; 0x43
   80e6e:	47a0      	blx	r4
	if (ReadSize > 1)
   80e70:	f1b8 0f01 	cmp.w	r8, #1
   80e74:	d924      	bls.n	80ec0 <XMEGANVM_ReadMemory+0xc8>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80e76:	206b      	movs	r0, #107	; 0x6b
   80e78:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80e7a:	fa5f f089 	uxtb.w	r0, r9
   80e7e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80e80:	f3c9 2007 	ubfx	r0, r9, #8, #8
   80e84:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80e86:	f3c9 4007 	ubfx	r0, r9, #16, #8
   80e8a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80e8c:	ea4f 6019 	mov.w	r0, r9, lsr #24
   80e90:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80e92:	20a0      	movs	r0, #160	; 0xa0
   80e94:	47a0      	blx	r4
		XPROGTarget_SendByte(ReadSize - 1);
   80e96:	f108 30ff 	add.w	r0, r8, #4294967295
   80e9a:	b2c0      	uxtb	r0, r0
   80e9c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80e9e:	2024      	movs	r0, #36	; 0x24
   80ea0:	44b8      	add	r8, r7
   80ea2:	47a0      	blx	r4
		while (ReadSize-- && TimeoutTicksRemaining)
   80ea4:	e004      	b.n	80eb0 <XMEGANVM_ReadMemory+0xb8>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80ea6:	47b0      	blx	r6
   80ea8:	f807 0b01 	strb.w	r0, [r7], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   80eac:	4547      	cmp	r7, r8
   80eae:	d017      	beq.n	80ee0 <XMEGANVM_ReadMemory+0xe8>
   80eb0:	6828      	ldr	r0, [r5, #0]
   80eb2:	2800      	cmp	r0, #0
   80eb4:	d1f7      	bne.n	80ea6 <XMEGANVM_ReadMemory+0xae>
	return (TimeoutTicksRemaining > 0);
   80eb6:	3800      	subs	r0, #0
   80eb8:	bf18      	it	ne
   80eba:	2001      	movne	r0, #1
}
   80ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ec0:	200c      	movs	r0, #12
   80ec2:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80ec4:	fa5f f089 	uxtb.w	r0, r9
   80ec8:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80eca:	f3c9 2007 	ubfx	r0, r9, #8, #8
   80ece:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80ed0:	f3c9 4007 	ubfx	r0, r9, #16, #8
   80ed4:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80ed6:	ea4f 6019 	mov.w	r0, r9, lsr #24
   80eda:	47a0      	blx	r4
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80edc:	47b0      	blx	r6
   80ede:	7038      	strb	r0, [r7, #0]
	return (TimeoutTicksRemaining > 0);
   80ee0:	6828      	ldr	r0, [r5, #0]
   80ee2:	3800      	subs	r0, #0
   80ee4:	bf18      	it	ne
   80ee6:	2001      	movne	r0, #1
   80ee8:	e7e8      	b.n	80ebc <XMEGANVM_ReadMemory+0xc4>
   80eea:	bf00      	nop
   80eec:	200001d0 	.word	0x200001d0
   80ef0:	00081629 	.word	0x00081629
   80ef4:	00081655 	.word	0x00081655
   80ef8:	20000e98 	.word	0x20000e98

00080efc <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   80efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80f00:	f8df a090 	ldr.w	sl, [pc, #144]	; 80f94 <XMEGANVM_WriteByteMemory+0x98>
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80f04:	4c24      	ldr	r4, [pc, #144]	; (80f98 <XMEGANVM_WriteByteMemory+0x9c>)
{
   80f06:	4681      	mov	r9, r0
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80f08:	206b      	movs	r0, #107	; 0x6b
{
   80f0a:	460f      	mov	r7, r1
   80f0c:	4690      	mov	r8, r2
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80f0e:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80f10:	f8da 3000 	ldr.w	r3, [sl]
   80f14:	4e21      	ldr	r6, [pc, #132]	; (80f9c <XMEGANVM_WriteByteMemory+0xa0>)
   80f16:	f043 0b0f 	orr.w	fp, r3, #15
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80f1a:	fa5f f08b 	uxtb.w	r0, fp
   80f1e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80f20:	f3cb 2007 	ubfx	r0, fp, #8, #8
   80f24:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80f26:	f3cb 4007 	ubfx	r0, fp, #16, #8
   80f2a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80f2c:	ea4f 601b 	mov.w	r0, fp, lsr #24
   80f30:	4d1b      	ldr	r5, [pc, #108]	; (80fa0 <XMEGANVM_WriteByteMemory+0xa4>)
   80f32:	47a0      	blx	r4
}
   80f34:	e001      	b.n	80f3a <XMEGANVM_WriteByteMemory+0x3e>
		if (!(StatusRegister & (1 << 7))) {
   80f36:	0603      	lsls	r3, r0, #24
   80f38:	d508      	bpl.n	80f4c <XMEGANVM_WriteByteMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80f3a:	2020      	movs	r0, #32
   80f3c:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80f3e:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0){
   80f40:	682b      	ldr	r3, [r5, #0]
   80f42:	2b00      	cmp	r3, #0
   80f44:	d1f7      	bne.n	80f36 <XMEGANVM_WriteByteMemory+0x3a>
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
   80f46:	4618      	mov	r0, r3
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   80f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f4c:	204c      	movs	r0, #76	; 0x4c
   80f4e:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80f50:	f8da 5000 	ldr.w	r5, [sl]
   80f54:	f045 050a 	orr.w	r5, r5, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80f58:	b2e8      	uxtb	r0, r5
   80f5a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80f5c:	f3c5 2007 	ubfx	r0, r5, #8, #8
   80f60:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80f62:	f3c5 4007 	ubfx	r0, r5, #16, #8
   80f66:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80f68:	0e28      	lsrs	r0, r5, #24
   80f6a:	47a0      	blx	r4
	XPROGTarget_SendByte(WriteCommand);
   80f6c:	4648      	mov	r0, r9
   80f6e:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80f70:	204c      	movs	r0, #76	; 0x4c
   80f72:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80f74:	b2f8      	uxtb	r0, r7
   80f76:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80f78:	f3c7 2007 	ubfx	r0, r7, #8, #8
   80f7c:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80f7e:	f3c7 4007 	ubfx	r0, r7, #16, #8
   80f82:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80f84:	0e38      	lsrs	r0, r7, #24
   80f86:	47a0      	blx	r4
	XPROGTarget_SendByte(data);
   80f88:	4640      	mov	r0, r8
   80f8a:	47a0      	blx	r4
	return true;
   80f8c:	2001      	movs	r0, #1
}
   80f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f92:	bf00      	nop
   80f94:	200001d0 	.word	0x200001d0
   80f98:	00081629 	.word	0x00081629
   80f9c:	00081655 	.word	0x00081655
   80fa0:	20000e98 	.word	0x20000e98

00080fa4 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   80fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80fa8:	4690      	mov	r8, r2
	if (PageMode & XPROG_PAGEMODE_ERASE)
   80faa:	07da      	lsls	r2, r3, #31
{
   80fac:	461c      	mov	r4, r3
   80fae:	4681      	mov	r9, r0
   80fb0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   80fb2:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   80fb6:	d407      	bmi.n	80fc8 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   80fb8:	2e00      	cmp	r6, #0
   80fba:	d13b      	bne.n	81034 <XMEGANVM_WritePageMemory+0x90>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   80fbc:	07a3      	lsls	r3, r4, #30
   80fbe:	d40c      	bmi.n	80fda <XMEGANVM_WritePageMemory+0x36>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   80fc0:	2401      	movs	r4, #1
}
   80fc2:	4620      	mov	r0, r4
   80fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80fc8:	4b4a      	ldr	r3, [pc, #296]	; (810f4 <XMEGANVM_WritePageMemory+0x150>)
   80fca:	460f      	mov	r7, r1
   80fcc:	4798      	blx	r3
   80fce:	2800      	cmp	r0, #0
   80fd0:	d167      	bne.n	810a2 <XMEGANVM_WritePageMemory+0xfe>
		  return false;
   80fd2:	2400      	movs	r4, #0
}
   80fd4:	4620      	mov	r0, r4
   80fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80fda:	4b46      	ldr	r3, [pc, #280]	; (810f4 <XMEGANVM_WritePageMemory+0x150>)
   80fdc:	4798      	blx	r3
   80fde:	4604      	mov	r4, r0
   80fe0:	2800      	cmp	r0, #0
   80fe2:	d0f6      	beq.n	80fd2 <XMEGANVM_WritePageMemory+0x2e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80fe4:	4d44      	ldr	r5, [pc, #272]	; (810f8 <XMEGANVM_WritePageMemory+0x154>)
   80fe6:	204c      	movs	r0, #76	; 0x4c
   80fe8:	47a8      	blx	r5
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80fea:	4b44      	ldr	r3, [pc, #272]	; (810fc <XMEGANVM_WritePageMemory+0x158>)
   80fec:	681e      	ldr	r6, [r3, #0]
   80fee:	f046 060a 	orr.w	r6, r6, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80ff2:	b2f0      	uxtb	r0, r6
   80ff4:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80ff6:	f3c6 2007 	ubfx	r0, r6, #8, #8
   80ffa:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80ffc:	f3c6 4007 	ubfx	r0, r6, #16, #8
   81000:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   81002:	0e30      	lsrs	r0, r6, #24
   81004:	47a8      	blx	r5
		XPROGTarget_SendByte(WritePageCommand);
   81006:	4640      	mov	r0, r8
   81008:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8100a:	204c      	movs	r0, #76	; 0x4c
   8100c:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8100e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81010:	b2d8      	uxtb	r0, r3
   81012:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81016:	f3c3 2007 	ubfx	r0, r3, #8, #8
   8101a:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8101c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8101e:	f3c3 4007 	ubfx	r0, r3, #16, #8
   81022:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   81024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81026:	0e18      	lsrs	r0, r3, #24
   81028:	47a8      	blx	r5
		XPROGTarget_SendByte(0x00);
   8102a:	2000      	movs	r0, #0
   8102c:	47a8      	blx	r5
}
   8102e:	4620      	mov	r0, r4
   81030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   81034:	4b2f      	ldr	r3, [pc, #188]	; (810f4 <XMEGANVM_WritePageMemory+0x150>)
   81036:	4798      	blx	r3
   81038:	2800      	cmp	r0, #0
   8103a:	d0ca      	beq.n	80fd2 <XMEGANVM_WritePageMemory+0x2e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8103c:	4f2e      	ldr	r7, [pc, #184]	; (810f8 <XMEGANVM_WritePageMemory+0x154>)
   8103e:	204c      	movs	r0, #76	; 0x4c
   81040:	47b8      	blx	r7
	uint32_t Address = XPROG_Param_NVMBase | Register;
   81042:	4b2e      	ldr	r3, [pc, #184]	; (810fc <XMEGANVM_WritePageMemory+0x158>)
   81044:	681b      	ldr	r3, [r3, #0]
   81046:	f043 0a0a 	orr.w	sl, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8104a:	fa5f f08a 	uxtb.w	r0, sl
   8104e:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81050:	f3ca 2007 	ubfx	r0, sl, #8, #8
   81054:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   81056:	f3ca 4007 	ubfx	r0, sl, #16, #8
   8105a:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   8105c:	ea4f 601a 	mov.w	r0, sl, lsr #24
   81060:	47b8      	blx	r7
		XPROGTarget_SendByte(WriteBuffCommand);
   81062:	4648      	mov	r0, r9
   81064:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   81066:	206b      	movs	r0, #107	; 0x6b
   81068:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8106a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8106c:	b2d8      	uxtb	r0, r3
   8106e:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81072:	f3c3 2007 	ubfx	r0, r3, #8, #8
   81076:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   81078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8107a:	f3c3 4007 	ubfx	r0, r3, #16, #8
   8107e:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   81080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81082:	0e18      	lsrs	r0, r3, #24
   81084:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   81086:	20a0      	movs	r0, #160	; 0xa0
   81088:	47b8      	blx	r7
		XPROGTarget_SendByte(WriteSize - 1);
   8108a:	1e70      	subs	r0, r6, #1
   8108c:	b2c0      	uxtb	r0, r0
   8108e:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   81090:	2064      	movs	r0, #100	; 0x64
   81092:	442e      	add	r6, r5
   81094:	47b8      	blx	r7
		  XPROGTarget_SendByte(*(WriteBuffer++));
   81096:	f815 0b01 	ldrb.w	r0, [r5], #1
   8109a:	47b8      	blx	r7
		while (WriteSize--)
   8109c:	42b5      	cmp	r5, r6
   8109e:	d1fa      	bne.n	81096 <XMEGANVM_WritePageMemory+0xf2>
   810a0:	e78c      	b.n	80fbc <XMEGANVM_WritePageMemory+0x18>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   810a2:	f8df a054 	ldr.w	sl, [pc, #84]	; 810f8 <XMEGANVM_WritePageMemory+0x154>
   810a6:	204c      	movs	r0, #76	; 0x4c
   810a8:	47d0      	blx	sl
	uint32_t Address = XPROG_Param_NVMBase | Register;
   810aa:	4b14      	ldr	r3, [pc, #80]	; (810fc <XMEGANVM_WritePageMemory+0x158>)
   810ac:	681a      	ldr	r2, [r3, #0]
   810ae:	f042 0b0a 	orr.w	fp, r2, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   810b2:	fa5f f08b 	uxtb.w	r0, fp
   810b6:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   810b8:	f3cb 2007 	ubfx	r0, fp, #8, #8
   810bc:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   810be:	f3cb 4007 	ubfx	r0, fp, #16, #8
   810c2:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   810c4:	ea4f 601b 	mov.w	r0, fp, lsr #24
   810c8:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   810ca:	4638      	mov	r0, r7
   810cc:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   810ce:	204c      	movs	r0, #76	; 0x4c
   810d0:	47d0      	blx	sl
	uint32_t Address = XPROG_Param_NVMBase | Register;
   810d2:	4b0a      	ldr	r3, [pc, #40]	; (810fc <XMEGANVM_WritePageMemory+0x158>)
   810d4:	681f      	ldr	r7, [r3, #0]
   810d6:	f047 070b 	orr.w	r7, r7, #11
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   810da:	b2f8      	uxtb	r0, r7
   810dc:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   810de:	f3c7 2007 	ubfx	r0, r7, #8, #8
   810e2:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   810e4:	f3c7 4007 	ubfx	r0, r7, #16, #8
   810e8:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   810ea:	0e38      	lsrs	r0, r7, #24
   810ec:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   810ee:	2001      	movs	r0, #1
   810f0:	47d0      	blx	sl
   810f2:	e761      	b.n	80fb8 <XMEGANVM_WritePageMemory+0x14>
   810f4:	00080cb5 	.word	0x00080cb5
   810f8:	00081629 	.word	0x00081629
   810fc:	200001d0 	.word	0x200001d0

00081100 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   81100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   81104:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 812c0 <XMEGANVM_EraseMemory+0x1c0>
{
   81108:	4606      	mov	r6, r0
   8110a:	460d      	mov	r5, r1
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8110c:	47c0      	blx	r8
   8110e:	2800      	cmp	r0, #0
   81110:	d033      	beq.n	8117a <XMEGANVM_EraseMemory+0x7a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   81112:	2e40      	cmp	r6, #64	; 0x40
   81114:	4607      	mov	r7, r0
   81116:	f000 80b8 	beq.w	8128a <XMEGANVM_EraseMemory+0x18a>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   8111a:	2e30      	cmp	r6, #48	; 0x30
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8111c:	4c69      	ldr	r4, [pc, #420]	; (812c4 <XMEGANVM_EraseMemory+0x1c4>)
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   8111e:	d030      	beq.n	81182 <XMEGANVM_EraseMemory+0x82>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   81120:	204c      	movs	r0, #76	; 0x4c
   81122:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   81124:	4b68      	ldr	r3, [pc, #416]	; (812c8 <XMEGANVM_EraseMemory+0x1c8>)
   81126:	681b      	ldr	r3, [r3, #0]
   81128:	f043 080a 	orr.w	r8, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8112c:	fa5f f088 	uxtb.w	r0, r8
   81130:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81132:	f3c8 2007 	ubfx	r0, r8, #8, #8
   81136:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   81138:	f3c8 4007 	ubfx	r0, r8, #16, #8
   8113c:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   8113e:	ea4f 6018 	mov.w	r0, r8, lsr #24
   81142:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
		XPROGTarget_SendByte(EraseCommand);
   81144:	4630      	mov	r0, r6
   81146:	47a0      	blx	r4

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   81148:	204c      	movs	r0, #76	; 0x4c
   8114a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8114c:	b2e8      	uxtb	r0, r5
   8114e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81150:	f3c5 2007 	ubfx	r0, r5, #8, #8
   81154:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   81156:	f3c5 4007 	ubfx	r0, r5, #16, #8
   8115a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   8115c:	0e28      	lsrs	r0, r5, #24
   8115e:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
		XPROGTarget_SendByte(0x00);
   81160:	2000      	movs	r0, #0
   81162:	47a0      	blx	r4
   81164:	4e59      	ldr	r6, [pc, #356]	; (812cc <XMEGANVM_EraseMemory+0x1cc>)
   81166:	4d5a      	ldr	r5, [pc, #360]	; (812d0 <XMEGANVM_EraseMemory+0x1d0>)
   81168:	e001      	b.n	8116e <XMEGANVM_EraseMemory+0x6e>
		if (StatusRegister & PDI_STATUS_NVM) {
   8116a:	0783      	lsls	r3, r0, #30
   8116c:	d406      	bmi.n	8117c <XMEGANVM_EraseMemory+0x7c>
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   8116e:	2080      	movs	r0, #128	; 0x80
   81170:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   81172:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0) {
   81174:	682b      	ldr	r3, [r5, #0]
   81176:	2b00      	cmp	r3, #0
   81178:	d1f7      	bne.n	8116a <XMEGANVM_EraseMemory+0x6a>
	  return false;
   8117a:	2700      	movs	r7, #0
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
	  return false;
	}

	return true;
}
   8117c:	4638      	mov	r0, r7
   8117e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t Address = XPROG_Param_NVMBase | Register;
   81182:	4e51      	ldr	r6, [pc, #324]	; (812c8 <XMEGANVM_EraseMemory+0x1c8>)
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   81184:	204c      	movs	r0, #76	; 0x4c
   81186:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   81188:	6833      	ldr	r3, [r6, #0]
   8118a:	f043 090a 	orr.w	r9, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8118e:	fa5f f089 	uxtb.w	r0, r9
   81192:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81194:	f3c9 2007 	ubfx	r0, r9, #8, #8
   81198:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8119a:	f3c9 4007 	ubfx	r0, r9, #16, #8
   8119e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   811a0:	ea4f 6019 	mov.w	r0, r9, lsr #24
   811a4:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   811a6:	2036      	movs	r0, #54	; 0x36
   811a8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   811aa:	204c      	movs	r0, #76	; 0x4c
   811ac:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   811ae:	6833      	ldr	r3, [r6, #0]
   811b0:	f043 090b 	orr.w	r9, r3, #11
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   811b4:	fa5f f089 	uxtb.w	r0, r9
   811b8:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   811ba:	f3c9 2007 	ubfx	r0, r9, #8, #8
   811be:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   811c0:	f3c9 4007 	ubfx	r0, r9, #16, #8
   811c4:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   811c6:	ea4f 6019 	mov.w	r0, r9, lsr #24
   811ca:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   811cc:	2001      	movs	r0, #1
   811ce:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   811d0:	47c0      	blx	r8
   811d2:	2800      	cmp	r0, #0
   811d4:	d0d1      	beq.n	8117a <XMEGANVM_EraseMemory+0x7a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   811d6:	204c      	movs	r0, #76	; 0x4c
   811d8:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   811da:	6833      	ldr	r3, [r6, #0]
   811dc:	f043 080a 	orr.w	r8, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   811e0:	fa5f f088 	uxtb.w	r0, r8
   811e4:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   811e6:	f3c8 2007 	ubfx	r0, r8, #8, #8
   811ea:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   811ec:	f3c8 4007 	ubfx	r0, r8, #16, #8
   811f0:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   811f2:	ea4f 6018 	mov.w	r0, r8, lsr #24
   811f6:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   811f8:	2033      	movs	r0, #51	; 0x33
   811fa:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   811fc:	206b      	movs	r0, #107	; 0x6b
   811fe:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   81200:	b2e8      	uxtb	r0, r5
   81202:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81204:	f3c5 2007 	ubfx	r0, r5, #8, #8
   81208:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8120a:	f3c5 4007 	ubfx	r0, r5, #16, #8
   8120e:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   81210:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 812d4 <XMEGANVM_EraseMemory+0x1d4>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   81214:	0e28      	lsrs	r0, r5, #24
   81216:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   81218:	20a0      	movs	r0, #160	; 0xa0
   8121a:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   8121c:	f8b8 0000 	ldrh.w	r0, [r8]
   81220:	3801      	subs	r0, #1
   81222:	b2c0      	uxtb	r0, r0
   81224:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   81226:	2064      	movs	r0, #100	; 0x64
   81228:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   8122a:	f8b8 3000 	ldrh.w	r3, [r8]
   8122e:	b14b      	cbz	r3, 81244 <XMEGANVM_EraseMemory+0x144>
   81230:	2500      	movs	r5, #0
		  XPROGTarget_SendByte(0x00);
   81232:	2000      	movs	r0, #0
   81234:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   81236:	1c6b      	adds	r3, r5, #1
   81238:	f8b8 1000 	ldrh.w	r1, [r8]
   8123c:	b2da      	uxtb	r2, r3
   8123e:	4291      	cmp	r1, r2
   81240:	4615      	mov	r5, r2
   81242:	d8f6      	bhi.n	81232 <XMEGANVM_EraseMemory+0x132>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   81244:	204c      	movs	r0, #76	; 0x4c
   81246:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   81248:	6835      	ldr	r5, [r6, #0]
   8124a:	f045 050a 	orr.w	r5, r5, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8124e:	b2e8      	uxtb	r0, r5
   81250:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81252:	f3c5 2007 	ubfx	r0, r5, #8, #8
   81256:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   81258:	f3c5 4007 	ubfx	r0, r5, #16, #8
   8125c:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   8125e:	0e28      	lsrs	r0, r5, #24
   81260:	47a0      	blx	r4
		XPROGTarget_SendByte(EraseCommand);
   81262:	2030      	movs	r0, #48	; 0x30
   81264:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   81266:	204c      	movs	r0, #76	; 0x4c
   81268:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   8126a:	6835      	ldr	r5, [r6, #0]
   8126c:	f045 050b 	orr.w	r5, r5, #11
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   81270:	b2e8      	uxtb	r0, r5
   81272:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   81274:	f3c5 2007 	ubfx	r0, r5, #8, #8
   81278:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8127a:	f3c5 4007 	ubfx	r0, r5, #16, #8
   8127e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   81280:	0e28      	lsrs	r0, r5, #24
   81282:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   81284:	2001      	movs	r0, #1
   81286:	47a0      	blx	r4
   81288:	e76c      	b.n	81164 <XMEGANVM_EraseMemory+0x64>
	uint32_t Address = XPROG_Param_NVMBase | Register;
   8128a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 812c8 <XMEGANVM_EraseMemory+0x1c8>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8128e:	4c0d      	ldr	r4, [pc, #52]	; (812c4 <XMEGANVM_EraseMemory+0x1c4>)
   81290:	204c      	movs	r0, #76	; 0x4c
   81292:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   81294:	f8d8 5000 	ldr.w	r5, [r8]
   81298:	f045 050a 	orr.w	r5, r5, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8129c:	b2e8      	uxtb	r0, r5
   8129e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   812a0:	f3c5 2007 	ubfx	r0, r5, #8, #8
   812a4:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   812a6:	f3c5 4007 	ubfx	r0, r5, #16, #8
   812aa:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   812ac:	0e28      	lsrs	r0, r5, #24
   812ae:	47a0      	blx	r4
		XPROGTarget_SendByte(EraseCommand);
   812b0:	4630      	mov	r0, r6
   812b2:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   812b4:	204c      	movs	r0, #76	; 0x4c
   812b6:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   812b8:	f8d8 5000 	ldr.w	r5, [r8]
   812bc:	e7d6      	b.n	8126c <XMEGANVM_EraseMemory+0x16c>
   812be:	bf00      	nop
   812c0:	00080cb5 	.word	0x00080cb5
   812c4:	00081629 	.word	0x00081629
   812c8:	200001d0 	.word	0x200001d0
   812cc:	00081655 	.word	0x00081655
   812d0:	20000e98 	.word	0x20000e98
   812d4:	200001cc 	.word	0x200001cc

000812d8 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   812d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   812da:	4c7f      	ldr	r4, [pc, #508]	; (814d8 <XPROGProtocol_Command+0x200>)
   812dc:	4d7f      	ldr	r5, [pc, #508]	; (814dc <XPROGProtocol_Command+0x204>)
   812de:	8861      	ldrh	r1, [r4, #2]
{
   812e0:	b085      	sub	sp, #20
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   812e2:	b2ca      	uxtb	r2, r1
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   812e4:	1e53      	subs	r3, r2, #1
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   812e6:	702a      	strb	r2, [r5, #0]
	switch (status_payload[0])
   812e8:	2b21      	cmp	r3, #33	; 0x21
   812ea:	d829      	bhi.n	81340 <XPROGProtocol_Command+0x68>
   812ec:	e8df f003 	tbb	[pc, r3]
   812f0:	5f484037 	.word	0x5f484037
   812f4:	288a8711 	.word	0x288a8711
   812f8:	28282828 	.word	0x28282828
   812fc:	28282828 	.word	0x28282828
   81300:	28282828 	.word	0x28282828
   81304:	28282828 	.word	0x28282828
   81308:	28282828 	.word	0x28282828
   8130c:	9d282828 	.word	0x9d282828
   81310:	2dab      	.short	0x2dab
		case XPROG_CMD_WRITE_MEM:
			start_timeoutcnt();
			XPROGProtocol_WriteMemory(xprog_rambuf);
			break;
		case XPROG_CMD_READ_MEM:
			start_timeoutcnt();
   81312:	4b73      	ldr	r3, [pc, #460]	; (814e0 <XPROGProtocol_Command+0x208>)
   81314:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   81316:	f04f 0c00 	mov.w	ip, #0
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8131a:	68a3      	ldr	r3, [r4, #8]
	XPROG_Status = XPROG_ERR_OK;
   8131c:	4d71      	ldr	r5, [pc, #452]	; (814e4 <XPROGProtocol_Command+0x20c>)
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   8131e:	f8b3 2005 	ldrh.w	r2, [r3, #5]
   81322:	f8d3 0001 	ldr.w	r0, [r3, #1]
   81326:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   8132a:	bf28      	it	cs
   8132c:	f44f 7280 	movcs.w	r2, #256	; 0x100
   81330:	496d      	ldr	r1, [pc, #436]	; (814e8 <XPROGProtocol_Command+0x210>)
   81332:	4b6e      	ldr	r3, [pc, #440]	; (814ec <XPROGProtocol_Command+0x214>)
	XPROG_Status = XPROG_ERR_OK;
   81334:	f885 c000 	strb.w	ip, [r5]
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   81338:	4798      	blx	r3
   8133a:	b908      	cbnz	r0, 81340 <XPROGProtocol_Command+0x68>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   8133c:	2303      	movs	r3, #3
   8133e:	702b      	strb	r3, [r5, #0]
	stop_timeoutcnt();
   81340:	4b6b      	ldr	r3, [pc, #428]	; (814f0 <XPROGProtocol_Command+0x218>)
   81342:	4798      	blx	r3
	return false;
   81344:	2000      	movs	r0, #0
}
   81346:	b005      	add	sp, #20
   81348:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8134a:	88e2      	ldrh	r2, [r4, #6]
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8134c:	0a0b      	lsrs	r3, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8134e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   81352:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81356:	f340 809a 	ble.w	8148e <XPROGProtocol_Command+0x1b6>
				return false;
   8135a:	2000      	movs	r0, #0
   8135c:	e7f3      	b.n	81346 <XPROGProtocol_Command+0x6e>
			start_timeoutcnt();
   8135e:	4b60      	ldr	r3, [pc, #384]	; (814e0 <XPROGProtocol_Command+0x208>)
   81360:	4798      	blx	r3
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   81362:	4b64      	ldr	r3, [pc, #400]	; (814f4 <XPROGProtocol_Command+0x21c>)
   81364:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   81366:	4b5f      	ldr	r3, [pc, #380]	; (814e4 <XPROGProtocol_Command+0x20c>)
   81368:	f080 0001 	eor.w	r0, r0, #1
   8136c:	7018      	strb	r0, [r3, #0]
}
   8136e:	e7e7      	b.n	81340 <XPROGProtocol_Command+0x68>
			start_timeoutcnt();
   81370:	4b5b      	ldr	r3, [pc, #364]	; (814e0 <XPROGProtocol_Command+0x208>)
   81372:	4798      	blx	r3
    XMEGANVM_DisablePDI();
   81374:	4b60      	ldr	r3, [pc, #384]	; (814f8 <XPROGProtocol_Command+0x220>)
   81376:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   81378:	2200      	movs	r2, #0
   8137a:	4b5a      	ldr	r3, [pc, #360]	; (814e4 <XPROGProtocol_Command+0x20c>)
   8137c:	701a      	strb	r2, [r3, #0]
}
   8137e:	e7df      	b.n	81340 <XPROGProtocol_Command+0x68>
			start_timeoutcnt();
   81380:	4b57      	ldr	r3, [pc, #348]	; (814e0 <XPROGProtocol_Command+0x208>)
   81382:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   81384:	2000      	movs	r0, #0
	if (udd_g_ctrlreq.payload_size < 5){
   81386:	89a3      	ldrh	r3, [r4, #12]
	XPROG_Status = XPROG_ERR_OK;
   81388:	4d56      	ldr	r5, [pc, #344]	; (814e4 <XPROGProtocol_Command+0x20c>)
	if (udd_g_ctrlreq.payload_size < 5){
   8138a:	2b04      	cmp	r3, #4
	XPROG_Status = XPROG_ERR_OK;
   8138c:	7028      	strb	r0, [r5, #0]
	if (udd_g_ctrlreq.payload_size < 5){
   8138e:	d967      	bls.n	81460 <XPROGProtocol_Command+0x188>
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   81390:	68a2      	ldr	r2, [r4, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   81392:	7813      	ldrb	r3, [r2, #0]
   81394:	f8d2 1001 	ldr.w	r1, [r2, #1]
	switch (MemoryType)
   81398:	3b01      	subs	r3, #1
   8139a:	b2db      	uxtb	r3, r3
   8139c:	2b07      	cmp	r3, #7
   8139e:	bf9c      	itt	ls
   813a0:	4a56      	ldrls	r2, [pc, #344]	; (814fc <XPROGProtocol_Command+0x224>)
   813a2:	5cd0      	ldrbls	r0, [r2, r3]
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   813a4:	4b56      	ldr	r3, [pc, #344]	; (81500 <XPROGProtocol_Command+0x228>)
   813a6:	4798      	blx	r3
   813a8:	2800      	cmp	r0, #0
   813aa:	d1c9      	bne.n	81340 <XPROGProtocol_Command+0x68>
   813ac:	e7c6      	b.n	8133c <XPROGProtocol_Command+0x64>
			start_timeoutcnt();
   813ae:	4b4c      	ldr	r3, [pc, #304]	; (814e0 <XPROGProtocol_Command+0x208>)
   813b0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < 8) {
   813b2:	88e3      	ldrh	r3, [r4, #6]
	XPROG_Status = XPROG_ERR_OK;
   813b4:	2200      	movs	r2, #0
	if (udd_g_ctrlreq.req.wLength < 8) {
   813b6:	2b07      	cmp	r3, #7
		XPROG_Status = XPROG_ERR_FAILED;
   813b8:	bf98      	it	ls
   813ba:	2301      	movls	r3, #1
	XPROG_Status = XPROG_ERR_OK;
   813bc:	4d49      	ldr	r5, [pc, #292]	; (814e4 <XPROGProtocol_Command+0x20c>)
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   813be:	68a4      	ldr	r4, [r4, #8]
	XPROG_Status = XPROG_ERR_OK;
   813c0:	702a      	strb	r2, [r5, #0]
		XPROG_Status = XPROG_ERR_FAILED;
   813c2:	bf98      	it	ls
   813c4:	702b      	strbls	r3, [r5, #0]
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   813c6:	7823      	ldrb	r3, [r4, #0]
   813c8:	f8d4 6002 	ldr.w	r6, [r4, #2]
	switch (MemoryType)
   813cc:	3b01      	subs	r3, #1
   813ce:	b2db      	uxtb	r3, r3
   813d0:	2b05      	cmp	r3, #5
   813d2:	d948      	bls.n	81466 <XPROGProtocol_Command+0x18e>
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   813d4:	222e      	movs	r2, #46	; 0x2e
   813d6:	2126      	movs	r1, #38	; 0x26
   813d8:	2023      	movs	r0, #35	; 0x23
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   813da:	f8b4 c006 	ldrh.w	ip, [r4, #6]
   813de:	7863      	ldrb	r3, [r4, #1]
   813e0:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
   813e4:	4664      	mov	r4, ip
   813e6:	bf28      	it	cs
   813e8:	f44f 7480 	movcs.w	r4, #256	; 0x100
   813ec:	9402      	str	r4, [sp, #8]
   813ee:	4c3e      	ldr	r4, [pc, #248]	; (814e8 <XPROGProtocol_Command+0x210>)
   813f0:	9600      	str	r6, [sp, #0]
   813f2:	9401      	str	r4, [sp, #4]
   813f4:	4c43      	ldr	r4, [pc, #268]	; (81504 <XPROGProtocol_Command+0x22c>)
   813f6:	47a0      	blx	r4
   813f8:	2800      	cmp	r0, #0
   813fa:	d1a1      	bne.n	81340 <XPROGProtocol_Command+0x68>
   813fc:	e79e      	b.n	8133c <XPROGProtocol_Command+0x64>
			start_timeoutcnt();
   813fe:	4b38      	ldr	r3, [pc, #224]	; (814e0 <XPROGProtocol_Command+0x208>)
   81400:	4798      	blx	r3
			break;
   81402:	e79d      	b.n	81340 <XPROGProtocol_Command+0x68>
			start_timeoutcnt();
   81404:	4b36      	ldr	r3, [pc, #216]	; (814e0 <XPROGProtocol_Command+0x208>)
   81406:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   81408:	2300      	movs	r3, #0

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   8140a:	89a2      	ldrh	r2, [r4, #12]
	XPROG_Status = XPROG_ERR_OK;
   8140c:	4d35      	ldr	r5, [pc, #212]	; (814e4 <XPROGProtocol_Command+0x20c>)
	if (udd_g_ctrlreq.payload_size < 2){
   8140e:	2a01      	cmp	r2, #1
	XPROG_Status = XPROG_ERR_OK;
   81410:	702b      	strb	r3, [r5, #0]
	if (udd_g_ctrlreq.payload_size < 2){
   81412:	d925      	bls.n	81460 <XPROGProtocol_Command+0x188>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   81414:	68a1      	ldr	r1, [r4, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   81416:	780b      	ldrb	r3, [r1, #0]
   81418:	3b01      	subs	r3, #1
   8141a:	2b07      	cmp	r3, #7
   8141c:	d820      	bhi.n	81460 <XPROGProtocol_Command+0x188>
   8141e:	e8df f003 	tbb	[pc, r3]
   81422:	4c53      	.short	0x4c53
   81424:	1f1f4448 	.word	0x1f1f4448
   81428:	3d1f      	.short	0x3d1f
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   8142a:	4b37      	ldr	r3, [pc, #220]	; (81508 <XPROGProtocol_Command+0x230>)
			udd_g_ctrlreq.payload_size = 3;
   8142c:	2203      	movs	r2, #3
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   8142e:	681b      	ldr	r3, [r3, #0]
			status_payload[1] = XPROG_Status;
   81430:	492c      	ldr	r1, [pc, #176]	; (814e4 <XPROGProtocol_Command+0x20c>)
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   81432:	fab3 f383 	clz	r3, r3
			status_payload[1] = XPROG_Status;
   81436:	7809      	ldrb	r1, [r1, #0]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   81438:	095b      	lsrs	r3, r3, #5
			return true;
   8143a:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = status_payload;
   8143c:	60a5      	str	r5, [r4, #8]
			status_payload[1] = XPROG_Status;
   8143e:	7069      	strb	r1, [r5, #1]
			udd_g_ctrlreq.payload_size = 3;
   81440:	81a2      	strh	r2, [r4, #12]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   81442:	70ab      	strb	r3, [r5, #2]
			return true;
   81444:	e77f      	b.n	81346 <XPROGProtocol_Command+0x6e>
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   81446:	88e3      	ldrh	r3, [r4, #6]
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   81448:	0a0d      	lsrs	r5, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8144a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   8144e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   81452:	dc82      	bgt.n	8135a <XPROGProtocol_Command+0x82>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   81454:	4a24      	ldr	r2, [pc, #144]	; (814e8 <XPROGProtocol_Command+0x210>)
			return true;
   81456:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   81458:	442a      	add	r2, r5
   8145a:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8145c:	81a3      	strh	r3, [r4, #12]
			return true;
   8145e:	e772      	b.n	81346 <XPROGProtocol_Command+0x6e>
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   81460:	2301      	movs	r3, #1
   81462:	702b      	strb	r3, [r5, #0]
			break;
   81464:	e76c      	b.n	81340 <XPROGProtocol_Command+0x68>
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   81466:	4929      	ldr	r1, [pc, #164]	; (8150c <XPROGProtocol_Command+0x234>)
   81468:	4a29      	ldr	r2, [pc, #164]	; (81510 <XPROGProtocol_Command+0x238>)
   8146a:	5ccf      	ldrb	r7, [r1, r3]
   8146c:	4929      	ldr	r1, [pc, #164]	; (81514 <XPROGProtocol_Command+0x23c>)
   8146e:	5cd2      	ldrb	r2, [r2, r3]
   81470:	5cc8      	ldrb	r0, [r1, r3]
   81472:	4929      	ldr	r1, [pc, #164]	; (81518 <XPROGProtocol_Command+0x240>)
   81474:	5cc9      	ldrb	r1, [r1, r3]
   81476:	2f00      	cmp	r7, #0
   81478:	d1af      	bne.n	813da <XPROGProtocol_Command+0x102>
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   8147a:	4b1b      	ldr	r3, [pc, #108]	; (814e8 <XPROGProtocol_Command+0x210>)
   8147c:	4610      	mov	r0, r2
   8147e:	4631      	mov	r1, r6
   81480:	781a      	ldrb	r2, [r3, #0]
   81482:	4b26      	ldr	r3, [pc, #152]	; (8151c <XPROGProtocol_Command+0x244>)
   81484:	4798      	blx	r3
   81486:	2800      	cmp	r0, #0
   81488:	f47f af5a 	bne.w	81340 <XPROGProtocol_Command+0x68>
   8148c:	e756      	b.n	8133c <XPROGProtocol_Command+0x64>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8148e:	4816      	ldr	r0, [pc, #88]	; (814e8 <XPROGProtocol_Command+0x210>)
   81490:	68a1      	ldr	r1, [r4, #8]
   81492:	4418      	add	r0, r3
   81494:	4c22      	ldr	r4, [pc, #136]	; (81520 <XPROGProtocol_Command+0x248>)
   81496:	47a0      	blx	r4
			return true;
   81498:	2001      	movs	r0, #1
   8149a:	e754      	b.n	81346 <XPROGProtocol_Command+0x6e>
			if (udd_g_ctrlreq.payload_size < 5){
   8149c:	2a04      	cmp	r2, #4
   8149e:	d9df      	bls.n	81460 <XPROGProtocol_Command+0x188>
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   814a0:	f8d1 0001 	ldr.w	r0, [r1, #1]
   814a4:	4b1f      	ldr	r3, [pc, #124]	; (81524 <XPROGProtocol_Command+0x24c>)
   814a6:	4798      	blx	r3
			break;
   814a8:	e74a      	b.n	81340 <XPROGProtocol_Command+0x68>
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   814aa:	4b1f      	ldr	r3, [pc, #124]	; (81528 <XPROGProtocol_Command+0x250>)
   814ac:	784a      	ldrb	r2, [r1, #1]
   814ae:	701a      	strb	r2, [r3, #0]
			break;
   814b0:	e746      	b.n	81340 <XPROGProtocol_Command+0x68>
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   814b2:	4b1e      	ldr	r3, [pc, #120]	; (8152c <XPROGProtocol_Command+0x254>)
   814b4:	784a      	ldrb	r2, [r1, #1]
   814b6:	701a      	strb	r2, [r3, #0]
			break;
   814b8:	e742      	b.n	81340 <XPROGProtocol_Command+0x68>
			if (udd_g_ctrlreq.payload_size < 3){
   814ba:	2a02      	cmp	r2, #2
   814bc:	d0d0      	beq.n	81460 <XPROGProtocol_Command+0x188>
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   814be:	f8b1 2001 	ldrh.w	r2, [r1, #1]
   814c2:	4b1b      	ldr	r3, [pc, #108]	; (81530 <XPROGProtocol_Command+0x258>)
   814c4:	801a      	strh	r2, [r3, #0]
			break;
   814c6:	e73b      	b.n	81340 <XPROGProtocol_Command+0x68>
			if (udd_g_ctrlreq.payload_size < 5){
   814c8:	2a04      	cmp	r2, #4
   814ca:	d9c9      	bls.n	81460 <XPROGProtocol_Command+0x188>
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   814cc:	f8d1 2001 	ldr.w	r2, [r1, #1]
   814d0:	4b18      	ldr	r3, [pc, #96]	; (81534 <XPROGProtocol_Command+0x25c>)
   814d2:	601a      	str	r2, [r3, #0]
			break;
   814d4:	e734      	b.n	81340 <XPROGProtocol_Command+0x68>
   814d6:	bf00      	nop
   814d8:	200018f8 	.word	0x200018f8
   814dc:	20000d90 	.word	0x20000d90
   814e0:	00081829 	.word	0x00081829
   814e4:	20000d8e 	.word	0x20000d8e
   814e8:	20000d94 	.word	0x20000d94
   814ec:	00080df9 	.word	0x00080df9
   814f0:	00081871 	.word	0x00081871
   814f4:	00080d09 	.word	0x00080d09
   814f8:	00080dad 	.word	0x00080dad
   814fc:	0008be34 	.word	0x0008be34
   81500:	00081101 	.word	0x00081101
   81504:	00080fa5 	.word	0x00080fa5
   81508:	20000e98 	.word	0x20000e98
   8150c:	0008be2c 	.word	0x0008be2c
   81510:	0008be3c 	.word	0x0008be3c
   81514:	0008be44 	.word	0x0008be44
   81518:	0008be4c 	.word	0x0008be4c
   8151c:	00080efd 	.word	0x00080efd
   81520:	00084f09 	.word	0x00084f09
   81524:	000817b9 	.word	0x000817b9
   81528:	200001d5 	.word	0x200001d5
   8152c:	200001d4 	.word	0x200001d4
   81530:	200001cc 	.word	0x200001cc
   81534:	200001d0 	.word	0x200001d0

00081538 <XPROGTarget_SetTxMode>:
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
	}
}

static void XPROGTarget_SetTxMode(void)
{
   81538:	b538      	push	{r3, r4, r5, lr}
   8153a:	4c14      	ldr	r4, [pc, #80]	; (8158c <XPROGTarget_SetTxMode+0x54>)
	/* Wait for a full cycle of the clock */
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8153c:	4d14      	ldr	r5, [pc, #80]	; (81590 <XPROGTarget_SetTxMode+0x58>)
   8153e:	e001      	b.n	81544 <XPROGTarget_SetTxMode+0xc>
   81540:	682b      	ldr	r3, [r5, #0]
   81542:	b11b      	cbz	r3, 8154c <XPROGTarget_SetTxMode+0x14>
   81544:	2011      	movs	r0, #17
   81546:	47a0      	blx	r4
   81548:	2800      	cmp	r0, #0
   8154a:	d1f9      	bne.n	81540 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8154c:	4d10      	ldr	r5, [pc, #64]	; (81590 <XPROGTarget_SetTxMode+0x58>)
   8154e:	e001      	b.n	81554 <XPROGTarget_SetTxMode+0x1c>
   81550:	682b      	ldr	r3, [r5, #0]
   81552:	b11b      	cbz	r3, 8155c <XPROGTarget_SetTxMode+0x24>
   81554:	2011      	movs	r0, #17
   81556:	47a0      	blx	r4
   81558:	2800      	cmp	r0, #0
   8155a:	d0f9      	beq.n	81550 <XPROGTarget_SetTxMode+0x18>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8155c:	4d0c      	ldr	r5, [pc, #48]	; (81590 <XPROGTarget_SetTxMode+0x58>)
   8155e:	e001      	b.n	81564 <XPROGTarget_SetTxMode+0x2c>
   81560:	682b      	ldr	r3, [r5, #0]
   81562:	b11b      	cbz	r3, 8156c <XPROGTarget_SetTxMode+0x34>
   81564:	2011      	movs	r0, #17
   81566:	47a0      	blx	r4
   81568:	2800      	cmp	r0, #0
   8156a:	d1f9      	bne.n	81560 <XPROGTarget_SetTxMode+0x28>
		
	usart_disable_rx(USART_PDI);
   8156c:	4809      	ldr	r0, [pc, #36]	; (81594 <XPROGTarget_SetTxMode+0x5c>)
   8156e:	4b0a      	ldr	r3, [pc, #40]	; (81598 <XPROGTarget_SetTxMode+0x60>)
   81570:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   81572:	4808      	ldr	r0, [pc, #32]	; (81594 <XPROGTarget_SetTxMode+0x5c>)
   81574:	4b09      	ldr	r3, [pc, #36]	; (8159c <XPROGTarget_SetTxMode+0x64>)
   81576:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   81578:	4b09      	ldr	r3, [pc, #36]	; (815a0 <XPROGTarget_SetTxMode+0x68>)
   8157a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8157e:	2012      	movs	r0, #18
   81580:	4798      	blx	r3
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_high(PIN_PDIDWR_GPIO);
	gpio_set_pin_high(PIN_PDICWR_GPIO);
#endif

	IsSending = true;
   81582:	2201      	movs	r2, #1
   81584:	4b07      	ldr	r3, [pc, #28]	; (815a4 <XPROGTarget_SetTxMode+0x6c>)
   81586:	701a      	strb	r2, [r3, #0]
}
   81588:	bd38      	pop	{r3, r4, r5, pc}
   8158a:	bf00      	nop
   8158c:	00084729 	.word	0x00084729
   81590:	20000e98 	.word	0x20000e98
   81594:	40090000 	.word	0x40090000
   81598:	00082c95 	.word	0x00082c95
   8159c:	00082c7d 	.word	0x00082c7d
   815a0:	0008477d 	.word	0x0008477d
   815a4:	20000e94 	.word	0x20000e94

000815a8 <XPROGTarget_DisableTargetPDI>:
{
   815a8:	b570      	push	{r4, r5, r6, lr}
	if (IsSending)
   815aa:	4e17      	ldr	r6, [pc, #92]	; (81608 <XPROGTarget_DisableTargetPDI+0x60>)
   815ac:	7833      	ldrb	r3, [r6, #0]
   815ae:	b9bb      	cbnz	r3, 815e0 <XPROGTarget_DisableTargetPDI+0x38>
   815b0:	4d16      	ldr	r5, [pc, #88]	; (8160c <XPROGTarget_DisableTargetPDI+0x64>)
   815b2:	4c17      	ldr	r4, [pc, #92]	; (81610 <XPROGTarget_DisableTargetPDI+0x68>)
	usart_disable_rx(USART_PDI);
   815b4:	4b17      	ldr	r3, [pc, #92]	; (81614 <XPROGTarget_DisableTargetPDI+0x6c>)
   815b6:	4818      	ldr	r0, [pc, #96]	; (81618 <XPROGTarget_DisableTargetPDI+0x70>)
   815b8:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   815ba:	4817      	ldr	r0, [pc, #92]	; (81618 <XPROGTarget_DisableTargetPDI+0x70>)
   815bc:	47a8      	blx	r5
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   815be:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   815c2:	2011      	movs	r0, #17
   815c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   815c6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   815ca:	2013      	movs	r0, #19
   815cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   815ce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   815d2:	2012      	movs	r0, #18
   815d4:	47a0      	blx	r4
}
   815d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   815da:	200d      	movs	r0, #13
   815dc:	4b0f      	ldr	r3, [pc, #60]	; (8161c <XPROGTarget_DisableTargetPDI+0x74>)
   815de:	4718      	bx	r3
   815e0:	4d0f      	ldr	r5, [pc, #60]	; (81620 <XPROGTarget_DisableTargetPDI+0x78>)

static void XPROGTarget_SetRxMode(void)
{
	while(usart_is_tx_empty(USART_PDI) == 0);
   815e2:	4c0d      	ldr	r4, [pc, #52]	; (81618 <XPROGTarget_DisableTargetPDI+0x70>)
   815e4:	4620      	mov	r0, r4
   815e6:	47a8      	blx	r5
   815e8:	2800      	cmp	r0, #0
   815ea:	d0fb      	beq.n	815e4 <XPROGTarget_DisableTargetPDI+0x3c>

	usart_disable_tx(USART_PDI);
   815ec:	480a      	ldr	r0, [pc, #40]	; (81618 <XPROGTarget_DisableTargetPDI+0x70>)
   815ee:	4d07      	ldr	r5, [pc, #28]	; (8160c <XPROGTarget_DisableTargetPDI+0x64>)
   815f0:	47a8      	blx	r5
	usart_enable_rx(USART_PDI);
   815f2:	4b0c      	ldr	r3, [pc, #48]	; (81624 <XPROGTarget_DisableTargetPDI+0x7c>)
   815f4:	4808      	ldr	r0, [pc, #32]	; (81618 <XPROGTarget_DisableTargetPDI+0x70>)
   815f6:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   815f8:	4c05      	ldr	r4, [pc, #20]	; (81610 <XPROGTarget_DisableTargetPDI+0x68>)
   815fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   815fe:	2012      	movs	r0, #18
   81600:	47a0      	blx	r4
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   81602:	2300      	movs	r3, #0
   81604:	7033      	strb	r3, [r6, #0]
}
   81606:	e7d5      	b.n	815b4 <XPROGTarget_DisableTargetPDI+0xc>
   81608:	20000e94 	.word	0x20000e94
   8160c:	00082c85 	.word	0x00082c85
   81610:	0008477d 	.word	0x0008477d
   81614:	00082c95 	.word	0x00082c95
   81618:	40090000 	.word	0x40090000
   8161c:	000845cd 	.word	0x000845cd
   81620:	00082c9d 	.word	0x00082c9d
   81624:	00082c8d 	.word	0x00082c8d

00081628 <XPROGTarget_SendByte>:
{
   81628:	b510      	push	{r4, lr}
	if (!(IsSending))
   8162a:	4b06      	ldr	r3, [pc, #24]	; (81644 <XPROGTarget_SendByte+0x1c>)
{
   8162c:	4604      	mov	r4, r0
	if (!(IsSending))
   8162e:	781b      	ldrb	r3, [r3, #0]
   81630:	b12b      	cbz	r3, 8163e <XPROGTarget_SendByte+0x16>
	usart_putchar(USART_PDI, data);	
   81632:	4621      	mov	r1, r4
}
   81634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usart_putchar(USART_PDI, data);	
   81638:	4803      	ldr	r0, [pc, #12]	; (81648 <XPROGTarget_SendByte+0x20>)
   8163a:	4b04      	ldr	r3, [pc, #16]	; (8164c <XPROGTarget_SendByte+0x24>)
   8163c:	4718      	bx	r3
	  XPROGTarget_SetTxMode();
   8163e:	4b04      	ldr	r3, [pc, #16]	; (81650 <XPROGTarget_SendByte+0x28>)
   81640:	4798      	blx	r3
   81642:	e7f6      	b.n	81632 <XPROGTarget_SendByte+0xa>
   81644:	20000e94 	.word	0x20000e94
   81648:	40090000 	.word	0x40090000
   8164c:	00082cb9 	.word	0x00082cb9
   81650:	00081539 	.word	0x00081539

00081654 <XPROGTarget_ReceiveByte>:
{
   81654:	b570      	push	{r4, r5, r6, lr}
	if (IsSending)
   81656:	4e13      	ldr	r6, [pc, #76]	; (816a4 <XPROGTarget_ReceiveByte+0x50>)
{
   81658:	b082      	sub	sp, #8
	if (IsSending)
   8165a:	7833      	ldrb	r3, [r6, #0]
   8165c:	b973      	cbnz	r3, 8167c <XPROGTarget_ReceiveByte+0x28>
   8165e:	4d12      	ldr	r5, [pc, #72]	; (816a8 <XPROGTarget_ReceiveByte+0x54>)
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   81660:	4c12      	ldr	r4, [pc, #72]	; (816ac <XPROGTarget_ReceiveByte+0x58>)
   81662:	4e13      	ldr	r6, [pc, #76]	; (816b0 <XPROGTarget_ReceiveByte+0x5c>)
   81664:	e001      	b.n	8166a <XPROGTarget_ReceiveByte+0x16>
   81666:	6833      	ldr	r3, [r6, #0]
   81668:	b123      	cbz	r3, 81674 <XPROGTarget_ReceiveByte+0x20>
   8166a:	4620      	mov	r0, r4
   8166c:	a901      	add	r1, sp, #4
   8166e:	47a8      	blx	r5
   81670:	2801      	cmp	r0, #1
   81672:	d0f8      	beq.n	81666 <XPROGTarget_ReceiveByte+0x12>
}
   81674:	f89d 0004 	ldrb.w	r0, [sp, #4]
   81678:	b002      	add	sp, #8
   8167a:	bd70      	pop	{r4, r5, r6, pc}
   8167c:	4d0d      	ldr	r5, [pc, #52]	; (816b4 <XPROGTarget_ReceiveByte+0x60>)
	while(usart_is_tx_empty(USART_PDI) == 0);
   8167e:	4c0b      	ldr	r4, [pc, #44]	; (816ac <XPROGTarget_ReceiveByte+0x58>)
   81680:	4620      	mov	r0, r4
   81682:	47a8      	blx	r5
   81684:	2800      	cmp	r0, #0
   81686:	d0fb      	beq.n	81680 <XPROGTarget_ReceiveByte+0x2c>
	usart_disable_tx(USART_PDI);
   81688:	4808      	ldr	r0, [pc, #32]	; (816ac <XPROGTarget_ReceiveByte+0x58>)
   8168a:	4b0b      	ldr	r3, [pc, #44]	; (816b8 <XPROGTarget_ReceiveByte+0x64>)
   8168c:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   8168e:	4807      	ldr	r0, [pc, #28]	; (816ac <XPROGTarget_ReceiveByte+0x58>)
   81690:	4b0a      	ldr	r3, [pc, #40]	; (816bc <XPROGTarget_ReceiveByte+0x68>)
   81692:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   81694:	4b0a      	ldr	r3, [pc, #40]	; (816c0 <XPROGTarget_ReceiveByte+0x6c>)
   81696:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8169a:	2012      	movs	r0, #18
   8169c:	4798      	blx	r3
	IsSending = false;
   8169e:	2300      	movs	r3, #0
   816a0:	7033      	strb	r3, [r6, #0]
}
   816a2:	e7dc      	b.n	8165e <XPROGTarget_ReceiveByte+0xa>
   816a4:	20000e94 	.word	0x20000e94
   816a8:	00082cc9 	.word	0x00082cc9
   816ac:	40090000 	.word	0x40090000
   816b0:	20000e98 	.word	0x20000e98
   816b4:	00082c9d 	.word	0x00082c9d
   816b8:	00082c85 	.word	0x00082c85
   816bc:	00082c8d 	.word	0x00082c8d
   816c0:	0008477d 	.word	0x0008477d

000816c4 <XPROGTarget_SendIdle>:
{
   816c4:	b570      	push	{r4, r5, r6, lr}
	if (!(IsSending))
   816c6:	4b13      	ldr	r3, [pc, #76]	; (81714 <XPROGTarget_SendIdle+0x50>)
   816c8:	781b      	ldrb	r3, [r3, #0]
   816ca:	b303      	cbz	r3, 8170e <XPROGTarget_SendIdle+0x4a>
{
   816cc:	260c      	movs	r6, #12
   816ce:	4c12      	ldr	r4, [pc, #72]	; (81718 <XPROGTarget_SendIdle+0x54>)
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   816d0:	4d12      	ldr	r5, [pc, #72]	; (8171c <XPROGTarget_SendIdle+0x58>)
   816d2:	e001      	b.n	816d8 <XPROGTarget_SendIdle+0x14>
   816d4:	682b      	ldr	r3, [r5, #0]
   816d6:	b143      	cbz	r3, 816ea <XPROGTarget_SendIdle+0x26>
   816d8:	2011      	movs	r0, #17
   816da:	47a0      	blx	r4
   816dc:	2800      	cmp	r0, #0
   816de:	d1f9      	bne.n	816d4 <XPROGTarget_SendIdle+0x10>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   816e0:	2011      	movs	r0, #17
   816e2:	47a0      	blx	r4
   816e4:	b950      	cbnz	r0, 816fc <XPROGTarget_SendIdle+0x38>
   816e6:	682b      	ldr	r3, [r5, #0]
   816e8:	b143      	cbz	r3, 816fc <XPROGTarget_SendIdle+0x38>
   816ea:	2011      	movs	r0, #17
   816ec:	47a0      	blx	r4
   816ee:	2800      	cmp	r0, #0
   816f0:	d0f9      	beq.n	816e6 <XPROGTarget_SendIdle+0x22>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   816f2:	2011      	movs	r0, #17
   816f4:	47a0      	blx	r4
   816f6:	b128      	cbz	r0, 81704 <XPROGTarget_SendIdle+0x40>
   816f8:	682b      	ldr	r3, [r5, #0]
   816fa:	b11b      	cbz	r3, 81704 <XPROGTarget_SendIdle+0x40>
   816fc:	2011      	movs	r0, #17
   816fe:	47a0      	blx	r4
   81700:	2800      	cmp	r0, #0
   81702:	d1f9      	bne.n	816f8 <XPROGTarget_SendIdle+0x34>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   81704:	3e01      	subs	r6, #1
   81706:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   8170a:	d1e5      	bne.n	816d8 <XPROGTarget_SendIdle+0x14>
}
   8170c:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetTxMode();
   8170e:	4b04      	ldr	r3, [pc, #16]	; (81720 <XPROGTarget_SendIdle+0x5c>)
   81710:	4798      	blx	r3
   81712:	e7db      	b.n	816cc <XPROGTarget_SendIdle+0x8>
   81714:	20000e94 	.word	0x20000e94
   81718:	00084729 	.word	0x00084729
   8171c:	20000e98 	.word	0x20000e98
   81720:	00081539 	.word	0x00081539

00081724 <XPROGTarget_EnableTargetPDI>:
{
   81724:	b5f0      	push	{r4, r5, r6, r7, lr}
	IsSending = false;
   81726:	2500      	movs	r5, #0
   81728:	4a19      	ldr	r2, [pc, #100]	; (81790 <XPROGTarget_EnableTargetPDI+0x6c>)
{
   8172a:	b087      	sub	sp, #28
	pmc_enable_periph_clk(ul_id);
   8172c:	4b19      	ldr	r3, [pc, #100]	; (81794 <XPROGTarget_EnableTargetPDI+0x70>)
   8172e:	200d      	movs	r0, #13
	IsSending = false;
   81730:	7015      	strb	r5, [r2, #0]
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   81732:	4c19      	ldr	r4, [pc, #100]	; (81798 <XPROGTarget_EnableTargetPDI+0x74>)
   81734:	4798      	blx	r3
   81736:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8173a:	2012      	movs	r0, #18
   8173c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   8173e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81742:	2013      	movs	r0, #19
   81744:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   81746:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8174a:	2011      	movs	r0, #17
   8174c:	47a0      	blx	r4
	delay_us(50);
   8174e:	4f13      	ldr	r7, [pc, #76]	; (8179c <XPROGTarget_EnableTargetPDI+0x78>)
   81750:	f240 1057 	movw	r0, #343	; 0x157
   81754:	47b8      	blx	r7
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   81756:	4b12      	ldr	r3, [pc, #72]	; (817a0 <XPROGTarget_EnableTargetPDI+0x7c>)
   81758:	2012      	movs	r0, #18
   8175a:	4798      	blx	r3
	delay_us(10);
   8175c:	2045      	movs	r0, #69	; 0x45
   8175e:	47b8      	blx	r7
	const sam_usart_opt_t usart_pdid_settings = {
   81760:	23c0      	movs	r3, #192	; 0xc0
   81762:	f44f 5700 	mov.w	r7, #8192	; 0x2000
   81766:	4a0f      	ldr	r2, [pc, #60]	; (817a4 <XPROGTarget_EnableTargetPDI+0x80>)
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   81768:	4669      	mov	r1, sp
	const sam_usart_opt_t usart_pdid_settings = {
   8176a:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
   8176e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   81772:	4a0d      	ldr	r2, [pc, #52]	; (817a8 <XPROGTarget_EnableTargetPDI+0x84>)
   81774:	4b0d      	ldr	r3, [pc, #52]	; (817ac <XPROGTarget_EnableTargetPDI+0x88>)
   81776:	480e      	ldr	r0, [pc, #56]	; (817b0 <XPROGTarget_EnableTargetPDI+0x8c>)
	XPROGTarget_SendIdle();
   81778:	4e0e      	ldr	r6, [pc, #56]	; (817b4 <XPROGTarget_EnableTargetPDI+0x90>)
	const sam_usart_opt_t usart_pdid_settings = {
   8177a:	9703      	str	r7, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   8177c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   8177e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81782:	2011      	movs	r0, #17
   81784:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   81786:	47b0      	blx	r6
	XPROGTarget_SendIdle();
   81788:	47b0      	blx	r6
}
   8178a:	b007      	add	sp, #28
   8178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8178e:	bf00      	nop
   81790:	20000e94 	.word	0x20000e94
   81794:	000845a9 	.word	0x000845a9
   81798:	0008477d 	.word	0x0008477d
   8179c:	20000091 	.word	0x20000091
   817a0:	00084745 	.word	0x00084745
   817a4:	0007a120 	.word	0x0007a120
   817a8:	0b71b000 	.word	0x0b71b000
   817ac:	00082bf9 	.word	0x00082bf9
   817b0:	40090000 	.word	0x40090000
   817b4:	000816c5 	.word	0x000816c5

000817b8 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   817b8:	4b01      	ldr	r3, [pc, #4]	; (817c0 <set_timeout+0x8>)
   817ba:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   817bc:	4770      	bx	lr
   817be:	bf00      	nop
   817c0:	200001d8 	.word	0x200001d8

000817c4 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   817c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   817c6:	2510      	movs	r5, #16
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   817c8:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
   817cc:	4b0f      	ldr	r3, [pc, #60]	; (8180c <setup_timeoutcnt+0x48>)
   817ce:	2016      	movs	r0, #22
   817d0:	4798      	blx	r3
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   817d2:	4c0f      	ldr	r4, [pc, #60]	; (81810 <setup_timeoutcnt+0x4c>)
   817d4:	4b0f      	ldr	r3, [pc, #60]	; (81814 <setup_timeoutcnt+0x50>)
   817d6:	f24c 0201 	movw	r2, #49153	; 0xc001
   817da:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
   817de:	2100      	movs	r1, #0
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   817e0:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
   817e4:	4620      	mov	r0, r4
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   817e6:	601e      	str	r6, [r3, #0]
   817e8:	4f0b      	ldr	r7, [pc, #44]	; (81818 <setup_timeoutcnt+0x54>)
   817ea:	47b8      	blx	r7
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   817ec:	2100      	movs	r1, #0
   817ee:	4620      	mov	r0, r4
   817f0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   817f4:	4b09      	ldr	r3, [pc, #36]	; (8181c <setup_timeoutcnt+0x58>)
   817f6:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   817f8:	462a      	mov	r2, r5
   817fa:	4b09      	ldr	r3, [pc, #36]	; (81820 <setup_timeoutcnt+0x5c>)
   817fc:	2100      	movs	r1, #0
   817fe:	4620      	mov	r0, r4
   81800:	4798      	blx	r3
	
	timerEnabled = true;
   81802:	2201      	movs	r2, #1
   81804:	4b07      	ldr	r3, [pc, #28]	; (81824 <setup_timeoutcnt+0x60>)
   81806:	701a      	strb	r2, [r3, #0]
}
   81808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8180a:	bf00      	nop
   8180c:	000845a9 	.word	0x000845a9
   81810:	40080000 	.word	0x40080000
   81814:	e000e100 	.word	0xe000e100
   81818:	00084e51 	.word	0x00084e51
   8181c:	00084e81 	.word	0x00084e81
   81820:	00084e89 	.word	0x00084e89
   81824:	20000e9c 	.word	0x20000e9c

00081828 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   81828:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   8182a:	4b0a      	ldr	r3, [pc, #40]	; (81854 <start_timeoutcnt+0x2c>)
   8182c:	781b      	ldrb	r3, [r3, #0]
   8182e:	b16b      	cbz	r3, 8184c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81830:	2100      	movs	r1, #0
   81832:	4809      	ldr	r0, [pc, #36]	; (81858 <start_timeoutcnt+0x30>)
   81834:	4b09      	ldr	r3, [pc, #36]	; (8185c <start_timeoutcnt+0x34>)
   81836:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   81838:	4b09      	ldr	r3, [pc, #36]	; (81860 <start_timeoutcnt+0x38>)
   8183a:	4a0a      	ldr	r2, [pc, #40]	; (81864 <start_timeoutcnt+0x3c>)
   8183c:	681b      	ldr	r3, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   8183e:	2100      	movs	r1, #0
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   81840:	6013      	str	r3, [r2, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   81842:	4805      	ldr	r0, [pc, #20]	; (81858 <start_timeoutcnt+0x30>)
   81844:	4b08      	ldr	r3, [pc, #32]	; (81868 <start_timeoutcnt+0x40>)
}
   81846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   8184a:	4718      	bx	r3
		setup_timeoutcnt();
   8184c:	4b07      	ldr	r3, [pc, #28]	; (8186c <start_timeoutcnt+0x44>)
   8184e:	4798      	blx	r3
   81850:	e7ee      	b.n	81830 <start_timeoutcnt+0x8>
   81852:	bf00      	nop
   81854:	20000e9c 	.word	0x20000e9c
   81858:	40080000 	.word	0x40080000
   8185c:	00084e79 	.word	0x00084e79
   81860:	200001d8 	.word	0x200001d8
   81864:	20000e98 	.word	0x20000e98
   81868:	00084e71 	.word	0x00084e71
   8186c:	000817c5 	.word	0x000817c5

00081870 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81870:	2100      	movs	r1, #0
   81872:	4801      	ldr	r0, [pc, #4]	; (81878 <stop_timeoutcnt+0x8>)
   81874:	4b01      	ldr	r3, [pc, #4]	; (8187c <stop_timeoutcnt+0xc>)
   81876:	4718      	bx	r3
   81878:	40080000 	.word	0x40080000
   8187c:	00084e79 	.word	0x00084e79

00081880 <TC0_Handler>:
}

ISR(TC0_Handler)
{
	if(TimeoutTicksRemaining){
   81880:	4a04      	ldr	r2, [pc, #16]	; (81894 <TC0_Handler+0x14>)
   81882:	6813      	ldr	r3, [r2, #0]
   81884:	b10b      	cbz	r3, 8188a <TC0_Handler+0xa>
		TimeoutTicksRemaining--;
   81886:	3b01      	subs	r3, #1
   81888:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   8188a:	2100      	movs	r1, #0
   8188c:	4802      	ldr	r0, [pc, #8]	; (81898 <TC0_Handler+0x18>)
   8188e:	4b03      	ldr	r3, [pc, #12]	; (8189c <TC0_Handler+0x1c>)
   81890:	4718      	bx	r3
   81892:	bf00      	nop
   81894:	20000e98 	.word	0x20000e98
   81898:	40080000 	.word	0x40080000
   8189c:	00084e91 	.word	0x00084e91

000818a0 <process_events>:
/*
TODO: Need to have a proper event loop not this crappy hack
*/

void process_events(void)
{
   818a0:	b538      	push	{r3, r4, r5, lr}
	static uint32_t nextCnt = 0;
	
	/* Hack for now - fixed at 100 mS, one event */	
	if (task_tickCnt > nextCnt){
   818a2:	4d0a      	ldr	r5, [pc, #40]	; (818cc <process_events+0x2c>)
   818a4:	4c0a      	ldr	r4, [pc, #40]	; (818d0 <process_events+0x30>)
   818a6:	682a      	ldr	r2, [r5, #0]
   818a8:	6823      	ldr	r3, [r4, #0]
   818aa:	429a      	cmp	r2, r3
   818ac:	d800      	bhi.n	818b0 <process_events+0x10>
		if (nextCnt < task_tickCnt){
			task_tickCnt = 0;
			nextCnt = 100;
		}
	}
}
   818ae:	bd38      	pop	{r3, r4, r5, pc}
		do_task();
   818b0:	4b08      	ldr	r3, [pc, #32]	; (818d4 <process_events+0x34>)
   818b2:	4798      	blx	r3
		nextCnt += 100;
   818b4:	6823      	ldr	r3, [r4, #0]
		if (nextCnt < task_tickCnt){
   818b6:	682a      	ldr	r2, [r5, #0]
		nextCnt += 100;
   818b8:	3364      	adds	r3, #100	; 0x64
		if (nextCnt < task_tickCnt){
   818ba:	4293      	cmp	r3, r2
		nextCnt += 100;
   818bc:	6023      	str	r3, [r4, #0]
		if (nextCnt < task_tickCnt){
   818be:	d2f6      	bcs.n	818ae <process_events+0xe>
			task_tickCnt = 0;
   818c0:	2200      	movs	r2, #0
			nextCnt = 100;
   818c2:	2364      	movs	r3, #100	; 0x64
			task_tickCnt = 0;
   818c4:	602a      	str	r2, [r5, #0]
			nextCnt = 100;
   818c6:	6023      	str	r3, [r4, #0]
}
   818c8:	bd38      	pop	{r3, r4, r5, pc}
   818ca:	bf00      	nop
   818cc:	20000ea4 	.word	0x20000ea4
   818d0:	20000ea0 	.word	0x20000ea0
   818d4:	00080645 	.word	0x00080645

000818d8 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   818d8:	4907      	ldr	r1, [pc, #28]	; (818f8 <naeusb_add_in_handler+0x20>)
   818da:	780a      	ldrb	r2, [r1, #0]
   818dc:	2a0f      	cmp	r2, #15
   818de:	d901      	bls.n	818e4 <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
   818e0:	2000      	movs	r0, #0
    
}
   818e2:	4770      	bx	lr
   818e4:	4603      	mov	r3, r0
{
   818e6:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   818e8:	1c50      	adds	r0, r2, #1
   818ea:	4c04      	ldr	r4, [pc, #16]	; (818fc <naeusb_add_in_handler+0x24>)
   818ec:	7008      	strb	r0, [r1, #0]
   818ee:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   818f2:	2001      	movs	r0, #1
}
   818f4:	bc10      	pop	{r4}
   818f6:	4770      	bx	lr
   818f8:	20001328 	.word	0x20001328
   818fc:	200012e8 	.word	0x200012e8

00081900 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   81900:	4907      	ldr	r1, [pc, #28]	; (81920 <naeusb_add_out_handler+0x20>)
   81902:	780a      	ldrb	r2, [r1, #0]
   81904:	2a0f      	cmp	r2, #15
   81906:	d901      	bls.n	8190c <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
   81908:	2000      	movs	r0, #0
    
}
   8190a:	4770      	bx	lr
   8190c:	4603      	mov	r3, r0
{
   8190e:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81910:	1c50      	adds	r0, r2, #1
   81912:	4c04      	ldr	r4, [pc, #16]	; (81924 <naeusb_add_out_handler+0x24>)
   81914:	7008      	strb	r0, [r1, #0]
   81916:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   8191a:	2001      	movs	r0, #1
}
   8191c:	bc10      	pop	{r4}
   8191e:	4770      	bx	lr
   81920:	20001329 	.word	0x20001329
   81924:	2000132c 	.word	0x2000132c

00081928 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
   81928:	4b00      	ldr	r3, [pc, #0]	; (8192c <main_suspend_action+0x4>)
   8192a:	4718      	bx	r3
   8192c:	00080c2d 	.word	0x00080c2d

00081930 <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
   81930:	4b00      	ldr	r3, [pc, #0]	; (81934 <main_resume_action+0x4>)
   81932:	4718      	bx	r3
   81934:	00080c51 	.word	0x00080c51

00081938 <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
   81938:	4b05      	ldr	r3, [pc, #20]	; (81950 <main_sof_action+0x18>)
   8193a:	781b      	ldrb	r3, [r3, #0]
   8193c:	b903      	cbnz	r3, 81940 <main_sof_action+0x8>
   8193e:	4770      	bx	lr
{
   81940:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
   81942:	4b04      	ldr	r3, [pc, #16]	; (81954 <main_sof_action+0x1c>)
   81944:	4798      	blx	r3
}
   81946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
   8194a:	4b03      	ldr	r3, [pc, #12]	; (81958 <main_sof_action+0x20>)
   8194c:	4718      	bx	r3
   8194e:	bf00      	nop
   81950:	200001dc 	.word	0x200001dc
   81954:	00083b11 	.word	0x00083b11
   81958:	00080c6d 	.word	0x00080c6d

0008195c <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   8195c:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
   8195e:	2401      	movs	r4, #1
   81960:	4d04      	ldr	r5, [pc, #16]	; (81974 <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81962:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81966:	4a04      	ldr	r2, [pc, #16]	; (81978 <main_vendor_enable+0x1c>)
   81968:	4b04      	ldr	r3, [pc, #16]	; (8197c <main_vendor_enable+0x20>)
   8196a:	4805      	ldr	r0, [pc, #20]	; (81980 <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
   8196c:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
   8196e:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   81970:	4620      	mov	r0, r4
   81972:	bd38      	pop	{r3, r4, r5, pc}
   81974:	200001dc 	.word	0x200001dc
   81978:	00081e0d 	.word	0x00081e0d
   8197c:	000846ad 	.word	0x000846ad
   81980:	20000ee8 	.word	0x20000ee8

00081984 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   81984:	2200      	movs	r2, #0
   81986:	4b01      	ldr	r3, [pc, #4]	; (8198c <main_vendor_disable+0x8>)
   81988:	701a      	strb	r2, [r3, #0]
}
   8198a:	4770      	bx	lr
   8198c:	200001dc 	.word	0x200001dc

00081990 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81990:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   81992:	4b0f      	ldr	r3, [pc, #60]	; (819d0 <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81994:	4a0f      	ldr	r2, [pc, #60]	; (819d4 <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81996:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   81998:	480f      	ldr	r0, [pc, #60]	; (819d8 <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8199a:	2940      	cmp	r1, #64	; 0x40
   8199c:	bf28      	it	cs
   8199e:	2140      	movcs	r1, #64	; 0x40
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   819a0:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
   819a2:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   819a4:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   819a6:	b18a      	cbz	r2, 819cc <main_setup_out_received+0x3c>
   819a8:	4c0c      	ldr	r4, [pc, #48]	; (819dc <main_setup_out_received+0x4c>)
   819aa:	1e55      	subs	r5, r2, #1
   819ac:	b2ed      	uxtb	r5, r5
   819ae:	1b53      	subs	r3, r2, r5
   819b0:	1f25      	subs	r5, r4, #4
   819b2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   819b6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   819ba:	e001      	b.n	819c0 <main_setup_out_received+0x30>
   819bc:	42ac      	cmp	r4, r5
   819be:	d005      	beq.n	819cc <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
   819c0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   819c4:	4798      	blx	r3
        if (handler_status == true) {
   819c6:	2800      	cmp	r0, #0
   819c8:	d0f8      	beq.n	819bc <main_setup_out_received+0x2c>
        }
    }

    return false;

}
   819ca:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   819cc:	2000      	movs	r0, #0
}
   819ce:	bd38      	pop	{r3, r4, r5, pc}
   819d0:	200018f8 	.word	0x200018f8
   819d4:	20001329 	.word	0x20001329
   819d8:	20000ea8 	.word	0x20000ea8
   819dc:	2000132c 	.word	0x2000132c

000819e0 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   819e0:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   819e2:	4b0b      	ldr	r3, [pc, #44]	; (81a10 <main_setup_in_received+0x30>)
   819e4:	781a      	ldrb	r2, [r3, #0]
   819e6:	b18a      	cbz	r2, 81a0c <main_setup_in_received+0x2c>
   819e8:	4c0a      	ldr	r4, [pc, #40]	; (81a14 <main_setup_in_received+0x34>)
   819ea:	1e55      	subs	r5, r2, #1
   819ec:	b2ed      	uxtb	r5, r5
   819ee:	1b53      	subs	r3, r2, r5
   819f0:	1f25      	subs	r5, r4, #4
   819f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   819f6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   819fa:	e001      	b.n	81a00 <main_setup_in_received+0x20>
   819fc:	42ac      	cmp	r4, r5
   819fe:	d005      	beq.n	81a0c <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
   81a00:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81a04:	4798      	blx	r3
        if (handler_status == true) {
   81a06:	2800      	cmp	r0, #0
   81a08:	d0f8      	beq.n	819fc <main_setup_in_received+0x1c>
        }
    }

    return false;

   81a0a:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81a0c:	2000      	movs	r0, #0
   81a0e:	bd38      	pop	{r3, r4, r5, pc}
   81a10:	20001328 	.word	0x20001328
   81a14:	200012e8 	.word	0x200012e8

00081a18 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81a18:	4b04      	ldr	r3, [pc, #16]	; (81a2c <naeusb_setup_out_received+0x14>)
   81a1a:	785a      	ldrb	r2, [r3, #1]
   81a1c:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81a1e:	bf03      	ittte	eq
   81a20:	4a03      	ldreq	r2, [pc, #12]	; (81a30 <naeusb_setup_out_received+0x18>)
            return true;
   81a22:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81a24:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
   81a26:	2000      	movne	r0, #0
}
   81a28:	4770      	bx	lr
   81a2a:	bf00      	nop
   81a2c:	200018f8 	.word	0x200018f8
   81a30:	00081a35 	.word	0x00081a35

00081a34 <naeusb_sam_cfg_out>:
{
   81a34:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81a36:	4b22      	ldr	r3, [pc, #136]	; (81ac0 <naeusb_sam_cfg_out+0x8c>)
   81a38:	789b      	ldrb	r3, [r3, #2]
   81a3a:	3b01      	subs	r3, #1
   81a3c:	2b10      	cmp	r3, #16
   81a3e:	d80a      	bhi.n	81a56 <naeusb_sam_cfg_out+0x22>
   81a40:	e8df f003 	tbb	[pc, r3]
   81a44:	091b160a 	.word	0x091b160a
   81a48:	09090909 	.word	0x09090909
   81a4c:	09090909 	.word	0x09090909
   81a50:	2d090909 	.word	0x2d090909
   81a54:	3a          	.byte	0x3a
   81a55:	00          	.byte	0x00
}
   81a56:	bd10      	pop	{r4, pc}
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   81a58:	203e      	movs	r0, #62	; 0x3e
   81a5a:	4b1a      	ldr	r3, [pc, #104]	; (81ac4 <naeusb_sam_cfg_out+0x90>)
   81a5c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   81a5e:	4c1a      	ldr	r4, [pc, #104]	; (81ac8 <naeusb_sam_cfg_out+0x94>)
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   81a60:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81a62:	2800      	cmp	r0, #0
   81a64:	d0fc      	beq.n	81a60 <naeusb_sam_cfg_out+0x2c>
   81a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   81a6a:	2010      	movs	r0, #16
   81a6c:	4b17      	ldr	r3, [pc, #92]	; (81acc <naeusb_sam_cfg_out+0x98>)
   81a6e:	4718      	bx	r3
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81a70:	2010      	movs	r0, #16
}
   81a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81a76:	4b16      	ldr	r3, [pc, #88]	; (81ad0 <naeusb_sam_cfg_out+0x9c>)
   81a78:	4718      	bx	r3
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81a7a:	2201      	movs	r2, #1
   81a7c:	210c      	movs	r1, #12
   81a7e:	4b15      	ldr	r3, [pc, #84]	; (81ad4 <naeusb_sam_cfg_out+0xa0>)
   81a80:	4815      	ldr	r0, [pc, #84]	; (81ad8 <naeusb_sam_cfg_out+0xa4>)
   81a82:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   81a84:	4b15      	ldr	r3, [pc, #84]	; (81adc <naeusb_sam_cfg_out+0xa8>)
   81a86:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81a88:	4a15      	ldr	r2, [pc, #84]	; (81ae0 <naeusb_sam_cfg_out+0xac>)
   81a8a:	6853      	ldr	r3, [r2, #4]
   81a8c:	0399      	lsls	r1, r3, #14
   81a8e:	d4fc      	bmi.n	81a8a <naeusb_sam_cfg_out+0x56>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81a90:	6813      	ldr	r3, [r2, #0]
   81a92:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81a96:	f043 0305 	orr.w	r3, r3, #5
   81a9a:	6013      	str	r3, [r2, #0]
        while(1);
   81a9c:	e7fe      	b.n	81a9c <naeusb_sam_cfg_out+0x68>
   81a9e:	4b0f      	ldr	r3, [pc, #60]	; (81adc <naeusb_sam_cfg_out+0xa8>)
   81aa0:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81aa2:	4a0f      	ldr	r2, [pc, #60]	; (81ae0 <naeusb_sam_cfg_out+0xac>)
   81aa4:	6853      	ldr	r3, [r2, #4]
   81aa6:	039b      	lsls	r3, r3, #14
   81aa8:	d4fc      	bmi.n	81aa4 <naeusb_sam_cfg_out+0x70>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81aaa:	6813      	ldr	r3, [r2, #0]
   81aac:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81ab0:	f043 0305 	orr.w	r3, r3, #5
   81ab4:	6013      	str	r3, [r2, #0]
        while(1);
   81ab6:	e7fe      	b.n	81ab6 <naeusb_sam_cfg_out+0x82>
        FPGA_releaselock();
   81ab8:	4b0a      	ldr	r3, [pc, #40]	; (81ae4 <naeusb_sam_cfg_out+0xb0>)
}
   81aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_releaselock();
   81abe:	4718      	bx	r3
   81ac0:	200018f8 	.word	0x200018f8
   81ac4:	0008450d 	.word	0x0008450d
   81ac8:	00084531 	.word	0x00084531
   81acc:	00084455 	.word	0x00084455
   81ad0:	000844b1 	.word	0x000844b1
   81ad4:	000846cd 	.word	0x000846cd
   81ad8:	400e0800 	.word	0x400e0800
   81adc:	00083a55 	.word	0x00083a55
   81ae0:	400e1200 	.word	0x400e1200
   81ae4:	000806b9 	.word	0x000806b9

00081ae8 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   81ae8:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   81aea:	4c15      	ldr	r4, [pc, #84]	; (81b40 <naeusb_setup_in_received+0x58>)
   81aec:	7863      	ldrb	r3, [r4, #1]
   81aee:	2b17      	cmp	r3, #23
   81af0:	d01b      	beq.n	81b2a <naeusb_setup_in_received+0x42>
   81af2:	2b40      	cmp	r3, #64	; 0x40
   81af4:	d117      	bne.n	81b26 <naeusb_setup_in_received+0x3e>
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81af6:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
   81afa:	4d12      	ldr	r5, [pc, #72]	; (81b44 <naeusb_setup_in_received+0x5c>)
   81afc:	4b12      	ldr	r3, [pc, #72]	; (81b48 <naeusb_setup_in_received+0x60>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81afe:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
   81b00:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81b04:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
   81b08:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81b0c:	4b0f      	ldr	r3, [pc, #60]	; (81b4c <naeusb_setup_in_received+0x64>)
   81b0e:	4910      	ldr	r1, [pc, #64]	; (81b50 <naeusb_setup_in_received+0x68>)
   81b10:	f105 0009 	add.w	r0, r5, #9
   81b14:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81b16:	4628      	mov	r0, r5
   81b18:	4b0e      	ldr	r3, [pc, #56]	; (81b54 <naeusb_setup_in_received+0x6c>)
    udd_g_ctrlreq.payload = respbuf;
   81b1a:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81b1c:	4798      	blx	r3
   81b1e:	4603      	mov	r3, r0
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   81b20:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81b22:	81a3      	strh	r3, [r4, #12]
            break;
    }
    return false;
}
   81b24:	bd38      	pop	{r3, r4, r5, pc}
    switch (udd_g_ctrlreq.req.bRequest) {
   81b26:	2000      	movs	r0, #0
}
   81b28:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
   81b2a:	f44f 5554 	mov.w	r5, #13568	; 0x3500
    respbuf[2] = FW_VER_DEBUG;
   81b2e:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
   81b30:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
   81b32:	4b04      	ldr	r3, [pc, #16]	; (81b44 <naeusb_setup_in_received+0x5c>)
    udd_g_ctrlreq.payload_size = 3;
   81b34:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
   81b36:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
   81b38:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81b3a:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   81b3c:	81a2      	strh	r2, [r4, #12]
}
   81b3e:	bd38      	pop	{r3, r4, r5, pc}
   81b40:	200018f8 	.word	0x200018f8
   81b44:	2000136c 	.word	0x2000136c
   81b48:	0008be60 	.word	0x0008be60
   81b4c:	000852f9 	.word	0x000852f9
   81b50:	0008be54 	.word	0x0008be54
   81b54:	0008529d 	.word	0x0008529d

00081b58 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81b58:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81b5a:	4b04      	ldr	r3, [pc, #16]	; (81b6c <naeusb_register_handlers+0x14>)
   81b5c:	4804      	ldr	r0, [pc, #16]	; (81b70 <naeusb_register_handlers+0x18>)
   81b5e:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
   81b64:	4803      	ldr	r0, [pc, #12]	; (81b74 <naeusb_register_handlers+0x1c>)
   81b66:	4b04      	ldr	r3, [pc, #16]	; (81b78 <naeusb_register_handlers+0x20>)
   81b68:	4718      	bx	r3
   81b6a:	bf00      	nop
   81b6c:	000818d9 	.word	0x000818d9
   81b70:	00081ae9 	.word	0x00081ae9
   81b74:	00081a19 	.word	0x00081a19
   81b78:	00081901 	.word	0x00081901

00081b7c <fpga_target_setup_out_received>:
	}
}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   81b7c:	2000      	movs	r0, #0
    switch(udd_g_ctrlreq.req.bRequest){
   81b7e:	4a2b      	ldr	r2, [pc, #172]	; (81c2c <fpga_target_setup_out_received+0xb0>)
    blockendpoint_usage = bep_emem;
   81b80:	492b      	ldr	r1, [pc, #172]	; (81c30 <fpga_target_setup_out_received+0xb4>)
    switch(udd_g_ctrlreq.req.bRequest){
   81b82:	7853      	ldrb	r3, [r2, #1]
    blockendpoint_usage = bep_emem;
   81b84:	7008      	strb	r0, [r1, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   81b86:	3b10      	subs	r3, #16
   81b88:	2b25      	cmp	r3, #37	; 0x25
   81b8a:	d818      	bhi.n	81bbe <fpga_target_setup_out_received+0x42>
   81b8c:	e8df f003 	tbb	[pc, r3]
   81b90:	2925211d 	.word	0x2925211d
   81b94:	17312d17 	.word	0x17312d17
   81b98:	17171717 	.word	0x17171717
   81b9c:	17171717 	.word	0x17171717
   81ba0:	17131735 	.word	0x17131735
   81ba4:	17171717 	.word	0x17171717
   81ba8:	17171717 	.word	0x17171717
   81bac:	17171717 	.word	0x17171717
   81bb0:	41173d39 	.word	0x41173d39
   81bb4:	1945      	.short	0x1945
		case REQ_SAM_CFG:
			0;
			uint16_t wVal = udd_g_ctrlreq.req.wValue & 0xFF;
   81bb6:	7893      	ldrb	r3, [r2, #2]
			if ((wVal > 0x03) && (wVal < 0x10)) {
   81bb8:	3b04      	subs	r3, #4
   81bba:	2b0b      	cmp	r3, #11
   81bbc:	d931      	bls.n	81c22 <fpga_target_setup_out_received+0xa6>
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
				return true;
			} else {
				return false;
   81bbe:	2000      	movs	r0, #0
            return true;

        default:
            return false;
    }					
}
   81bc0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_spi1util;
   81bc2:	4b1c      	ldr	r3, [pc, #112]	; (81c34 <fpga_target_setup_out_received+0xb8>)
            return true;
   81bc4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_spi1util;
   81bc6:	6113      	str	r3, [r2, #16]
            return true;
   81bc8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81bca:	4b1b      	ldr	r3, [pc, #108]	; (81c38 <fpga_target_setup_out_received+0xbc>)
            return true;
   81bcc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81bce:	6113      	str	r3, [r2, #16]
            return true;
   81bd0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81bd2:	4b1a      	ldr	r3, [pc, #104]	; (81c3c <fpga_target_setup_out_received+0xc0>)
            return true;
   81bd4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81bd6:	6113      	str	r3, [r2, #16]
            return true;
   81bd8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81bda:	4b19      	ldr	r3, [pc, #100]	; (81c40 <fpga_target_setup_out_received+0xc4>)
            return true;	
   81bdc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81bde:	6113      	str	r3, [r2, #16]
            return true;	
   81be0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81be2:	4b18      	ldr	r3, [pc, #96]	; (81c44 <fpga_target_setup_out_received+0xc8>)
            return true;		
   81be4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81be6:	6113      	str	r3, [r2, #16]
            return true;		
   81be8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   81bea:	4b17      	ldr	r3, [pc, #92]	; (81c48 <fpga_target_setup_out_received+0xcc>)
            return true;		
   81bec:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   81bee:	6113      	str	r3, [r2, #16]
            return true;		
   81bf0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81bf2:	4b16      	ldr	r3, [pc, #88]	; (81c4c <fpga_target_setup_out_received+0xd0>)
            return true;
   81bf4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81bf6:	6113      	str	r3, [r2, #16]
            return true;
   81bf8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81bfa:	4b15      	ldr	r3, [pc, #84]	; (81c50 <fpga_target_setup_out_received+0xd4>)
            return true;
   81bfc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81bfe:	6113      	str	r3, [r2, #16]
            return true;
   81c00:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   81c02:	4b14      	ldr	r3, [pc, #80]	; (81c54 <fpga_target_setup_out_received+0xd8>)
            return true;
   81c04:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   81c06:	6113      	str	r3, [r2, #16]
            return true;
   81c08:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   81c0a:	4b13      	ldr	r3, [pc, #76]	; (81c58 <fpga_target_setup_out_received+0xdc>)
            return true;
   81c0c:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   81c0e:	6113      	str	r3, [r2, #16]
            return true;
   81c10:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   81c12:	4b12      	ldr	r3, [pc, #72]	; (81c5c <fpga_target_setup_out_received+0xe0>)
			return true;
   81c14:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   81c16:	6113      	str	r3, [r2, #16]
			return true;
   81c18:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   81c1a:	4b11      	ldr	r3, [pc, #68]	; (81c60 <fpga_target_setup_out_received+0xe4>)
            return true;
   81c1c:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   81c1e:	6113      	str	r3, [r2, #16]
            return true;
   81c20:	4770      	bx	lr
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   81c22:	4b10      	ldr	r3, [pc, #64]	; (81c64 <fpga_target_setup_out_received+0xe8>)
				return true;
   81c24:	2001      	movs	r0, #1
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   81c26:	6113      	str	r3, [r2, #16]
				return true;
   81c28:	4770      	bx	lr
   81c2a:	bf00      	nop
   81c2c:	200018f8 	.word	0x200018f8
   81c30:	200013ac 	.word	0x200013ac
   81c34:	00082205 	.word	0x00082205
   81c38:	00081cfd 	.word	0x00081cfd
   81c3c:	00081cdd 	.word	0x00081cdd
   81c40:	00081c69 	.word	0x00081c69
   81c44:	00081c95 	.word	0x00081c95
   81c48:	00081d2d 	.word	0x00081d2d
   81c4c:	00082055 	.word	0x00082055
   81c50:	00081e05 	.word	0x00081e05
   81c54:	00082305 	.word	0x00082305
   81c58:	00081fc5 	.word	0x00081fc5
   81c5c:	00082285 	.word	0x00082285
   81c60:	000820f9 	.word	0x000820f9
   81c64:	000820a5 	.word	0x000820a5

00081c68 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   81c68:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81c6a:	4b06      	ldr	r3, [pc, #24]	; (81c84 <ctrl_readmem_ctrl+0x1c>)
    FPGA_setlock(fpga_ctrlmem);
   81c6c:	4a06      	ldr	r2, [pc, #24]	; (81c88 <ctrl_readmem_ctrl+0x20>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81c6e:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   81c70:	2005      	movs	r0, #5
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81c72:	681d      	ldr	r5, [r3, #0]
    FPGA_setlock(fpga_ctrlmem);
   81c74:	4790      	blx	r2
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   81c76:	4a05      	ldr	r2, [pc, #20]	; (81c8c <ctrl_readmem_ctrl+0x24>)
    ctrlmemread_size = buflen;
   81c78:	4b05      	ldr	r3, [pc, #20]	; (81c90 <ctrl_readmem_ctrl+0x28>)
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   81c7a:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   81c7e:	6014      	str	r4, [r2, #0]
    ctrlmemread_size = buflen;
   81c80:	601d      	str	r5, [r3, #0]
}
   81c82:	bd38      	pop	{r3, r4, r5, pc}
   81c84:	20000ea8 	.word	0x20000ea8
   81c88:	00080689 	.word	0x00080689
   81c8c:	200013b8 	.word	0x200013b8
   81c90:	200013bc 	.word	0x200013bc

00081c94 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   81c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81c98:	4f0d      	ldr	r7, [pc, #52]	; (81cd0 <ctrl_writemem_ctrl+0x3c>)
    FPGA_setlock(fpga_generic);
   81c9a:	2001      	movs	r0, #1
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81c9c:	683c      	ldr	r4, [r7, #0]
    FPGA_setlock(fpga_generic);
   81c9e:	4e0d      	ldr	r6, [pc, #52]	; (81cd4 <ctrl_writemem_ctrl+0x40>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81ca0:	687d      	ldr	r5, [r7, #4]
    FPGA_setlock(fpga_generic);
   81ca2:	47b0      	blx	r6
    for(unsigned int i = 0; i < buflen; i++){
   81ca4:	b174      	cbz	r4, 81cc4 <ctrl_writemem_ctrl+0x30>
   81ca6:	eb07 0c04 	add.w	ip, r7, r4
   81caa:	1fec      	subs	r4, r5, #7
   81cac:	4d0a      	ldr	r5, [pc, #40]	; (81cd8 <ctrl_writemem_ctrl+0x44>)
   81cae:	1dfb      	adds	r3, r7, #7
        xram[i+address] = ctrlbuf_payload[i];
   81cb0:	1be4      	subs	r4, r4, r7
   81cb2:	f10c 0c07 	add.w	ip, ip, #7
   81cb6:	18e2      	adds	r2, r4, r3
   81cb8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   81cbc:	6829      	ldr	r1, [r5, #0]
    for(unsigned int i = 0; i < buflen; i++){
   81cbe:	4563      	cmp	r3, ip
        xram[i+address] = ctrlbuf_payload[i];
   81cc0:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   81cc2:	d1f8      	bne.n	81cb6 <ctrl_writemem_ctrl+0x22>
    FPGA_setlock(fpga_unlocked);
   81cc4:	4633      	mov	r3, r6
}
   81cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FPGA_setlock(fpga_unlocked);
   81cca:	2000      	movs	r0, #0
   81ccc:	4718      	bx	r3
   81cce:	bf00      	nop
   81cd0:	20000ea8 	.word	0x20000ea8
   81cd4:	00080689 	.word	0x00080689
   81cd8:	200001b8 	.word	0x200001b8

00081cdc <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   81cdc:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   81cde:	2004      	movs	r0, #4
   81ce0:	4b03      	ldr	r3, [pc, #12]	; (81cf0 <ctrl_writemem_bulk+0x14>)
   81ce2:	4798      	blx	r3
    bulk_fpga_write_addr = *(CTRLBUFFER_WORDPTR + 1);
   81ce4:	4a03      	ldr	r2, [pc, #12]	; (81cf4 <ctrl_writemem_bulk+0x18>)
   81ce6:	4b04      	ldr	r3, [pc, #16]	; (81cf8 <ctrl_writemem_bulk+0x1c>)
   81ce8:	6852      	ldr	r2, [r2, #4]
   81cea:	601a      	str	r2, [r3, #0]
}
   81cec:	bd08      	pop	{r3, pc}
   81cee:	bf00      	nop
   81cf0:	00080689 	.word	0x00080689
   81cf4:	20000ea8 	.word	0x20000ea8
   81cf8:	200013b0 	.word	0x200013b0

00081cfc <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   81cfc:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   81cfe:	4b07      	ldr	r3, [pc, #28]	; (81d1c <ctrl_readmem_bulk+0x20>)
    FPGA_setlock(fpga_blockin);
   81d00:	2002      	movs	r0, #2
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81d02:	e9d3 5400 	ldrd	r5, r4, [r3]
    FPGA_setlock(fpga_blockin);
   81d06:	4b06      	ldr	r3, [pc, #24]	; (81d20 <ctrl_readmem_bulk+0x24>)
   81d08:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   81d0a:	4629      	mov	r1, r5
   81d0c:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   81d10:	4a04      	ldr	r2, [pc, #16]	; (81d24 <ctrl_readmem_bulk+0x28>)
   81d12:	4b05      	ldr	r3, [pc, #20]	; (81d28 <ctrl_readmem_bulk+0x2c>)
}
   81d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    udi_vendor_bulk_in_run(
   81d18:	4718      	bx	r3
   81d1a:	bf00      	nop
   81d1c:	20000ea8 	.word	0x20000ea8
   81d20:	00080689 	.word	0x00080689
   81d24:	00082031 	.word	0x00082031
   81d28:	0008468d 	.word	0x0008468d

00081d2c <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   81d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   81d30:	492c      	ldr	r1, [pc, #176]	; (81de4 <ctrl_writemem_ctrl_sam3u+0xb8>)
void ctrl_writemem_ctrl_sam3u(void){
   81d32:	b083      	sub	sp, #12
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81d34:	e9d1 2300 	ldrd	r2, r3, [r1]
    for(unsigned int i = 0; i < buflen; i++){
   81d38:	3a04      	subs	r2, #4
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   81d3a:	688e      	ldr	r6, [r1, #8]
    for(unsigned int i = 0; i < buflen; i++){
   81d3c:	d004      	beq.n	81d48 <ctrl_writemem_ctrl_sam3u+0x1c>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   81d3e:	482a      	ldr	r0, [pc, #168]	; (81de8 <ctrl_writemem_ctrl_sam3u+0xbc>)
   81d40:	310c      	adds	r1, #12
   81d42:	4418      	add	r0, r3
   81d44:	4b29      	ldr	r3, [pc, #164]	; (81dec <ctrl_writemem_ctrl_sam3u+0xc0>)
   81d46:	4798      	blx	r3
    if ( flags & 0x1 ){ // encryptions have been requested
   81d48:	07f3      	lsls	r3, r6, #31
   81d4a:	d522      	bpl.n	81d92 <ctrl_writemem_ctrl_sam3u+0x66>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   81d4c:	4b26      	ldr	r3, [pc, #152]	; (81de8 <ctrl_writemem_ctrl_sam3u+0xbc>)
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81d4e:	0c37      	lsrs	r7, r6, #16
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   81d50:	f8d3 8000 	ldr.w	r8, [r3]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81d54:	d01d      	beq.n	81d92 <ctrl_writemem_ctrl_sam3u+0x66>
   81d56:	2400      	movs	r4, #0
            if ((flags >> 1) & 0x1){ // write the key
   81d58:	f3c6 0340 	ubfx	r3, r6, #1, #1
   81d5c:	4d24      	ldr	r5, [pc, #144]	; (81df0 <ctrl_writemem_ctrl_sam3u+0xc4>)
   81d5e:	f8df a094 	ldr.w	sl, [pc, #148]	; 81df4 <ctrl_writemem_ctrl_sam3u+0xc8>
   81d62:	f8df 9094 	ldr.w	r9, [pc, #148]	; 81df8 <ctrl_writemem_ctrl_sam3u+0xcc>
   81d66:	f8df b094 	ldr.w	fp, [pc, #148]	; 81dfc <ctrl_writemem_ctrl_sam3u+0xd0>
   81d6a:	9301      	str	r3, [sp, #4]
            if ((flags >> 2) & 0x1){ // write the pts
   81d6c:	f3c6 0680 	ubfx	r6, r6, #2, #1
            FPGA_setlock(fpga_generic);
   81d70:	2001      	movs	r0, #1
   81d72:	47a8      	blx	r5
            if ((flags >> 1) & 0x1){ // write the key
   81d74:	9b01      	ldr	r3, [sp, #4]
   81d76:	b97b      	cbnz	r3, 81d98 <ctrl_writemem_ctrl_sam3u+0x6c>
            if ((flags >> 2) & 0x1){ // write the pts
   81d78:	bb0e      	cbnz	r6, 81dbe <ctrl_writemem_ctrl_sam3u+0x92>
            FPGA_setlock(fpga_unlocked);
   81d7a:	2000      	movs	r0, #0
   81d7c:	47a8      	blx	r5
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81d7e:	2031      	movs	r0, #49	; 0x31
   81d80:	47d0      	blx	sl
            delay_cycles(50);
   81d82:	2032      	movs	r0, #50	; 0x32
   81d84:	47c8      	blx	r9
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81d86:	3401      	adds	r4, #1
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   81d88:	2031      	movs	r0, #49	; 0x31
   81d8a:	4b1d      	ldr	r3, [pc, #116]	; (81e00 <ctrl_writemem_ctrl_sam3u+0xd4>)
   81d8c:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81d8e:	42bc      	cmp	r4, r7
   81d90:	d1ee      	bne.n	81d70 <ctrl_writemem_ctrl_sam3u+0x44>
}
   81d92:	b003      	add	sp, #12
   81d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d98:	f44f 62a0 	mov.w	r2, #1280	; 0x500
                    xram[j+0x400+0x100] = seed >> 24;
   81d9c:	f8db 0000 	ldr.w	r0, [fp]
   81da0:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   81da4:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   81da8:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   81dac:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   81dae:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   81db2:	f5b2 6fa2 	cmp.w	r2, #1296	; 0x510
                    seed += (seed*seed) | 0x5;
   81db6:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   81db8:	d1f0      	bne.n	81d9c <ctrl_writemem_ctrl_sam3u+0x70>
            if ((flags >> 2) & 0x1){ // write the pts
   81dba:	2e00      	cmp	r6, #0
   81dbc:	d0dd      	beq.n	81d7a <ctrl_writemem_ctrl_sam3u+0x4e>
   81dbe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
                    xram[j+0x400+0x200] = seed >> 24;
   81dc2:	f8db 0000 	ldr.w	r0, [fp]
   81dc6:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   81dca:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   81dce:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   81dd2:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   81dd4:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   81dd8:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
                    seed += (seed*seed) | 0x5;
   81ddc:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   81dde:	d1f0      	bne.n	81dc2 <ctrl_writemem_ctrl_sam3u+0x96>
   81de0:	e7cb      	b.n	81d7a <ctrl_writemem_ctrl_sam3u+0x4e>
   81de2:	bf00      	nop
   81de4:	20000ea8 	.word	0x20000ea8
   81de8:	20001400 	.word	0x20001400
   81dec:	00084f09 	.word	0x00084f09
   81df0:	00080689 	.word	0x00080689
   81df4:	00084745 	.word	0x00084745
   81df8:	20000091 	.word	0x20000091
   81dfc:	200001b8 	.word	0x200001b8
   81e00:	00084761 	.word	0x00084761

00081e04 <ctrl_xmega_program_void>:
    XPROGProtocol_Command();
   81e04:	4b00      	ldr	r3, [pc, #0]	; (81e08 <ctrl_xmega_program_void+0x4>)
   81e06:	4718      	bx	r3
   81e08:	000812d9 	.word	0x000812d9

00081e0c <main_vendor_bulk_out_received>:
{
   81e0c:	b570      	push	{r4, r5, r6, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   81e0e:	b9a8      	cbnz	r0, 81e3c <main_vendor_bulk_out_received+0x30>
    if (blockendpoint_usage == bep_emem){
   81e10:	4b18      	ldr	r3, [pc, #96]	; (81e74 <main_vendor_bulk_out_received+0x68>)
   81e12:	781b      	ldrb	r3, [r3, #0]
   81e14:	b9d3      	cbnz	r3, 81e4c <main_vendor_bulk_out_received+0x40>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81e16:	b169      	cbz	r1, 81e34 <main_vendor_bulk_out_received+0x28>
   81e18:	4b17      	ldr	r3, [pc, #92]	; (81e78 <main_vendor_bulk_out_received+0x6c>)
   81e1a:	4e18      	ldr	r6, [pc, #96]	; (81e7c <main_vendor_bulk_out_received+0x70>)
   81e1c:	4818      	ldr	r0, [pc, #96]	; (81e80 <main_vendor_bulk_out_received+0x74>)
   81e1e:	4419      	add	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   81e20:	6802      	ldr	r2, [r0, #0]
   81e22:	f813 cb01 	ldrb.w	ip, [r3], #1
   81e26:	6834      	ldr	r4, [r6, #0]
   81e28:	1c55      	adds	r5, r2, #1
        for(unsigned int i = 0; i < nb_transfered; i++){
   81e2a:	4299      	cmp	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   81e2c:	6005      	str	r5, [r0, #0]
   81e2e:	f804 c002 	strb.w	ip, [r4, r2]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81e32:	d1f5      	bne.n	81e20 <main_vendor_bulk_out_received+0x14>
        if (FPGA_lockstatus() == fpga_blockout){
   81e34:	4b13      	ldr	r3, [pc, #76]	; (81e84 <main_vendor_bulk_out_received+0x78>)
   81e36:	4798      	blx	r3
   81e38:	2804      	cmp	r0, #4
   81e3a:	d016      	beq.n	81e6a <main_vendor_bulk_out_received+0x5e>
}
   81e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        udi_vendor_bulk_out_run(
   81e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81e44:	4a10      	ldr	r2, [pc, #64]	; (81e88 <main_vendor_bulk_out_received+0x7c>)
   81e46:	480c      	ldr	r0, [pc, #48]	; (81e78 <main_vendor_bulk_out_received+0x6c>)
   81e48:	4b10      	ldr	r3, [pc, #64]	; (81e8c <main_vendor_bulk_out_received+0x80>)
   81e4a:	4718      	bx	r3
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81e4c:	2b0a      	cmp	r3, #10
   81e4e:	d1f5      	bne.n	81e3c <main_vendor_bulk_out_received+0x30>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81e50:	b139      	cbz	r1, 81e62 <main_vendor_bulk_out_received+0x56>
   81e52:	4d09      	ldr	r5, [pc, #36]	; (81e78 <main_vendor_bulk_out_received+0x6c>)
   81e54:	4e0e      	ldr	r6, [pc, #56]	; (81e90 <main_vendor_bulk_out_received+0x84>)
   81e56:	194c      	adds	r4, r1, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   81e58:	f815 0b01 	ldrb.w	r0, [r5], #1
   81e5c:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   81e5e:	42a5      	cmp	r5, r4
   81e60:	d1fa      	bne.n	81e58 <main_vendor_bulk_out_received+0x4c>
        FPGA_CCLK_LOW();
   81e62:	200f      	movs	r0, #15
   81e64:	4b0b      	ldr	r3, [pc, #44]	; (81e94 <main_vendor_bulk_out_received+0x88>)
   81e66:	4798      	blx	r3
   81e68:	e7e8      	b.n	81e3c <main_vendor_bulk_out_received+0x30>
            FPGA_setlock(fpga_unlocked);
   81e6a:	4b0b      	ldr	r3, [pc, #44]	; (81e98 <main_vendor_bulk_out_received+0x8c>)
   81e6c:	2000      	movs	r0, #0
   81e6e:	4798      	blx	r3
   81e70:	e7e4      	b.n	81e3c <main_vendor_bulk_out_received+0x30>
   81e72:	bf00      	nop
   81e74:	200013ac 	.word	0x200013ac
   81e78:	20000ee8 	.word	0x20000ee8
   81e7c:	200001b8 	.word	0x200001b8
   81e80:	200013b0 	.word	0x200013b0
   81e84:	000806c5 	.word	0x000806c5
   81e88:	00081e0d 	.word	0x00081e0d
   81e8c:	000846ad 	.word	0x000846ad
   81e90:	00080795 	.word	0x00080795
   81e94:	00084761 	.word	0x00084761
   81e98:	00080689 	.word	0x00080689

00081e9c <fpga_target_setup_in_received>:
{
   81e9c:	b570      	push	{r4, r5, r6, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81e9e:	4c3d      	ldr	r4, [pc, #244]	; (81f94 <fpga_target_setup_in_received+0xf8>)
   81ea0:	7863      	ldrb	r3, [r4, #1]
   81ea2:	3b12      	subs	r3, #18
   81ea4:	2b23      	cmp	r3, #35	; 0x23
   81ea6:	d813      	bhi.n	81ed0 <fpga_target_setup_in_received+0x34>
   81ea8:	e8df f003 	tbb	[pc, r3]
   81eac:	2612121c 	.word	0x2612121c
   81eb0:	12121212 	.word	0x12121212
   81eb4:	12121212 	.word	0x12121212
   81eb8:	123e1212 	.word	0x123e1212
   81ebc:	12121212 	.word	0x12121212
   81ec0:	12121212 	.word	0x12121212
   81ec4:	12121212 	.word	0x12121212
   81ec8:	50441212 	.word	0x50441212
   81ecc:	14665e12 	.word	0x14665e12
                return false;
   81ed0:	2000      	movs	r0, #0
}
   81ed2:	bd70      	pop	{r4, r5, r6, pc}
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   81ed4:	88e3      	ldrh	r3, [r4, #6]
   81ed6:	2b40      	cmp	r3, #64	; 0x40
   81ed8:	d8fa      	bhi.n	81ed0 <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   81eda:	4a2f      	ldr	r2, [pc, #188]	; (81f98 <fpga_target_setup_in_received+0xfc>)
			return true;
   81edc:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   81ede:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81ee0:	81a3      	strh	r3, [r4, #12]
}
   81ee2:	bd70      	pop	{r4, r5, r6, pc}
            ctrlmemread_size = 0;
   81ee4:	2200      	movs	r2, #0
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81ee6:	4b2d      	ldr	r3, [pc, #180]	; (81f9c <fpga_target_setup_in_received+0x100>)
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   81ee8:	492d      	ldr	r1, [pc, #180]	; (81fa0 <fpga_target_setup_in_received+0x104>)
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81eea:	6818      	ldr	r0, [r3, #0]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   81eec:	6809      	ldr	r1, [r1, #0]
            ctrlmemread_size = 0;
   81eee:	601a      	str	r2, [r3, #0]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81ef0:	81a0      	strh	r0, [r4, #12]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   81ef2:	60a1      	str	r1, [r4, #8]
            return true;
   81ef4:	2001      	movs	r0, #1
}
   81ef6:	bd70      	pop	{r4, r5, r6, pc}
            respbuf[0] = FPGA_ISDONE();
   81ef8:	4e2a      	ldr	r6, [pc, #168]	; (81fa4 <fpga_target_setup_in_received+0x108>)
   81efa:	2007      	movs	r0, #7
   81efc:	47b0      	blx	r6
   81efe:	4603      	mov	r3, r0
   81f00:	3b00      	subs	r3, #0
   81f02:	bf18      	it	ne
   81f04:	2301      	movne	r3, #1
   81f06:	4d28      	ldr	r5, [pc, #160]	; (81fa8 <fpga_target_setup_in_received+0x10c>)
            respbuf[1] = FPGA_INITB_STATUS();
   81f08:	205d      	movs	r0, #93	; 0x5d
            respbuf[0] = FPGA_ISDONE();
   81f0a:	702b      	strb	r3, [r5, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   81f0c:	47b0      	blx	r6
            respbuf[2] = 0;
   81f0e:	2100      	movs	r1, #0
            respbuf[1] = FPGA_INITB_STATUS();
   81f10:	4603      	mov	r3, r0
   81f12:	1a5b      	subs	r3, r3, r1
            udd_g_ctrlreq.payload_size = 4;
   81f14:	f04f 0204 	mov.w	r2, #4
            respbuf[1] = FPGA_INITB_STATUS();
   81f18:	bf18      	it	ne
   81f1a:	2301      	movne	r3, #1
            return true;
   81f1c:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   81f1e:	60a5      	str	r5, [r4, #8]
            respbuf[2] = 0;
   81f20:	8069      	strh	r1, [r5, #2]
            udd_g_ctrlreq.payload_size = 4;
   81f22:	81a2      	strh	r2, [r4, #12]
            respbuf[1] = FPGA_INITB_STATUS();
   81f24:	706b      	strb	r3, [r5, #1]
}
   81f26:	bd70      	pop	{r4, r5, r6, pc}
            return XPROGProtocol_Command();
   81f28:	4b20      	ldr	r3, [pc, #128]	; (81fac <fpga_target_setup_in_received+0x110>)
   81f2a:	4798      	blx	r3
   81f2c:	3800      	subs	r0, #0
   81f2e:	bf18      	it	ne
   81f30:	2001      	movne	r0, #1
}
   81f32:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 2;
   81f34:	2202      	movs	r2, #2
            respbuf[0] = cdce906_status;
   81f36:	481e      	ldr	r0, [pc, #120]	; (81fb0 <fpga_target_setup_in_received+0x114>)
            respbuf[1] = cdce906_data;
   81f38:	491e      	ldr	r1, [pc, #120]	; (81fb4 <fpga_target_setup_in_received+0x118>)
            respbuf[0] = cdce906_status;
   81f3a:	4b1b      	ldr	r3, [pc, #108]	; (81fa8 <fpga_target_setup_in_received+0x10c>)
   81f3c:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = cdce906_data;
   81f3e:	7809      	ldrb	r1, [r1, #0]
            respbuf[0] = cdce906_status;
   81f40:	7018      	strb	r0, [r3, #0]
            respbuf[1] = cdce906_data;
   81f42:	7059      	strb	r1, [r3, #1]
            return true;
   81f44:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   81f46:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 2;
   81f48:	81a2      	strh	r2, [r4, #12]
}
   81f4a:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 3;
   81f4c:	2103      	movs	r1, #3
            respbuf[1] = (uint8_t)vccint_setting;
   81f4e:	4b1a      	ldr	r3, [pc, #104]	; (81fb8 <fpga_target_setup_in_received+0x11c>)
            respbuf[0] = vccint_status;
   81f50:	481a      	ldr	r0, [pc, #104]	; (81fbc <fpga_target_setup_in_received+0x120>)
            respbuf[1] = (uint8_t)vccint_setting;
   81f52:	881a      	ldrh	r2, [r3, #0]
            respbuf[0] = vccint_status;
   81f54:	4b14      	ldr	r3, [pc, #80]	; (81fa8 <fpga_target_setup_in_received+0x10c>)
   81f56:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   81f58:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   81f5a:	0a12      	lsrs	r2, r2, #8
            respbuf[0] = vccint_status;
   81f5c:	7018      	strb	r0, [r3, #0]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   81f5e:	709a      	strb	r2, [r3, #2]
            return true;
   81f60:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   81f62:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 3;
   81f64:	81a1      	strh	r1, [r4, #12]
}
   81f66:	bd70      	pop	{r4, r5, r6, pc}
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   81f68:	88e3      	ldrh	r3, [r4, #6]
   81f6a:	2b40      	cmp	r3, #64	; 0x40
   81f6c:	d8b0      	bhi.n	81ed0 <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   81f6e:	4a14      	ldr	r2, [pc, #80]	; (81fc0 <fpga_target_setup_in_received+0x124>)
			return true;
   81f70:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   81f72:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81f74:	81a3      	strh	r3, [r4, #12]
}
   81f76:	bd70      	pop	{r4, r5, r6, pc}
			respbuf[0] = gpio_pin_is_high(pin);
   81f78:	78a0      	ldrb	r0, [r4, #2]
   81f7a:	4b0a      	ldr	r3, [pc, #40]	; (81fa4 <fpga_target_setup_in_received+0x108>)
   81f7c:	4798      	blx	r3
   81f7e:	1e03      	subs	r3, r0, #0
   81f80:	bf18      	it	ne
   81f82:	2301      	movne	r3, #1
			udd_g_ctrlreq.payload_size = 1;
   81f84:	2101      	movs	r1, #1
			respbuf[0] = gpio_pin_is_high(pin);
   81f86:	4a08      	ldr	r2, [pc, #32]	; (81fa8 <fpga_target_setup_in_received+0x10c>)
			return true;
   81f88:	4608      	mov	r0, r1
			respbuf[0] = gpio_pin_is_high(pin);
   81f8a:	7013      	strb	r3, [r2, #0]
			udd_g_ctrlreq.payload = respbuf;
   81f8c:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 1;
   81f8e:	81a1      	strh	r1, [r4, #12]
}
   81f90:	bd70      	pop	{r4, r5, r6, pc}
   81f92:	bf00      	nop
   81f94:	200018f8 	.word	0x200018f8
   81f98:	20001800 	.word	0x20001800
   81f9c:	200013bc 	.word	0x200013bc
   81fa0:	200013b8 	.word	0x200013b8
   81fa4:	00084729 	.word	0x00084729
   81fa8:	2000136c 	.word	0x2000136c
   81fac:	000812d9 	.word	0x000812d9
   81fb0:	200013b5 	.word	0x200013b5
   81fb4:	200013b4 	.word	0x200013b4
   81fb8:	200001de 	.word	0x200001de
   81fbc:	20001840 	.word	0x20001840
   81fc0:	200013c0 	.word	0x200013c0

00081fc4 <ctrl_vccint_cb>:
{
   81fc4:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81fc6:	4b16      	ldr	r3, [pc, #88]	; (82020 <ctrl_vccint_cb+0x5c>)
   81fc8:	88d9      	ldrh	r1, [r3, #6]
   81fca:	899a      	ldrh	r2, [r3, #12]
   81fcc:	428a      	cmp	r2, r1
   81fce:	d315      	bcc.n	81ffc <ctrl_vccint_cb+0x38>
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   81fd0:	689a      	ldr	r2, [r3, #8]
   81fd2:	7813      	ldrb	r3, [r2, #0]
   81fd4:	f892 c001 	ldrb.w	ip, [r2, #1]
   81fd8:	7890      	ldrb	r0, [r2, #2]
   81fda:	ea83 030c 	eor.w	r3, r3, ip
   81fde:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   81fe2:	4298      	cmp	r0, r3
   81fe4:	d107      	bne.n	81ff6 <ctrl_vccint_cb+0x32>
    if (udd_g_ctrlreq.req.wLength < 3){
   81fe6:	2902      	cmp	r1, #2
   81fe8:	d916      	bls.n	82018 <ctrl_vccint_cb+0x54>
   81fea:	8814      	ldrh	r4, [r2, #0]
    if ((vcctemp < 600) || (vcctemp > 1200)){
   81fec:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   81ff0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   81ff4:	d903      	bls.n	81ffe <ctrl_vccint_cb+0x3a>
        vccint_status = USB_STATUS_PARAMWRONG;
   81ff6:	2201      	movs	r2, #1
   81ff8:	4b0a      	ldr	r3, [pc, #40]	; (82024 <ctrl_vccint_cb+0x60>)
   81ffa:	701a      	strb	r2, [r3, #0]
}
   81ffc:	bd38      	pop	{r3, r4, r5, pc}
    vccint_status = USB_STATUS_COMMERR;
   81ffe:	2203      	movs	r2, #3
   82000:	4d08      	ldr	r5, [pc, #32]	; (82024 <ctrl_vccint_cb+0x60>)
    if (tps56520_set(vcctemp)){
   82002:	4620      	mov	r0, r4
   82004:	4b08      	ldr	r3, [pc, #32]	; (82028 <ctrl_vccint_cb+0x64>)
    vccint_status = USB_STATUS_COMMERR;
   82006:	702a      	strb	r2, [r5, #0]
    if (tps56520_set(vcctemp)){
   82008:	4798      	blx	r3
   8200a:	2800      	cmp	r0, #0
   8200c:	d0f6      	beq.n	81ffc <ctrl_vccint_cb+0x38>
        vccint_status = USB_STATUS_OK;
   8200e:	2302      	movs	r3, #2
        vccint_setting = vcctemp;
   82010:	4a06      	ldr	r2, [pc, #24]	; (8202c <ctrl_vccint_cb+0x68>)
        vccint_status = USB_STATUS_OK;
   82012:	702b      	strb	r3, [r5, #0]
        vccint_setting = vcctemp;
   82014:	8014      	strh	r4, [r2, #0]
}
   82016:	bd38      	pop	{r3, r4, r5, pc}
        vccint_status = USB_STATUS_CSFAIL;
   82018:	2204      	movs	r2, #4
   8201a:	4b02      	ldr	r3, [pc, #8]	; (82024 <ctrl_vccint_cb+0x60>)
   8201c:	701a      	strb	r2, [r3, #0]
}
   8201e:	bd38      	pop	{r3, r4, r5, pc}
   82020:	200018f8 	.word	0x200018f8
   82024:	20001840 	.word	0x20001840
   82028:	00080b55 	.word	0x00080b55
   8202c:	200001de 	.word	0x200001de

00082030 <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   82030:	b100      	cbz	r0, 82034 <main_vendor_bulk_in_received+0x4>
   82032:	4770      	bx	lr
{
   82034:	b510      	push	{r4, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   82036:	4b05      	ldr	r3, [pc, #20]	; (8204c <main_vendor_bulk_in_received+0x1c>)
   82038:	4604      	mov	r4, r0
   8203a:	4798      	blx	r3
   8203c:	2802      	cmp	r0, #2
   8203e:	d000      	beq.n	82042 <main_vendor_bulk_in_received+0x12>
}
   82040:	bd10      	pop	{r4, pc}
        FPGA_setlock(fpga_unlocked);
   82042:	4620      	mov	r0, r4
}
   82044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_setlock(fpga_unlocked);
   82048:	4b01      	ldr	r3, [pc, #4]	; (82050 <main_vendor_bulk_in_received+0x20>)
   8204a:	4718      	bx	r3
   8204c:	000806c5 	.word	0x000806c5
   82050:	00080689 	.word	0x00080689

00082054 <ctrl_progfpga_bulk>:
    switch(udd_g_ctrlreq.req.wValue){
   82054:	4a0d      	ldr	r2, [pc, #52]	; (8208c <ctrl_progfpga_bulk+0x38>)
   82056:	8853      	ldrh	r3, [r2, #2]
   82058:	2ba1      	cmp	r3, #161	; 0xa1
   8205a:	d004      	beq.n	82066 <ctrl_progfpga_bulk+0x12>
   8205c:	2ba2      	cmp	r3, #162	; 0xa2
   8205e:	d011      	beq.n	82084 <ctrl_progfpga_bulk+0x30>
   82060:	2ba0      	cmp	r3, #160	; 0xa0
   82062:	d007      	beq.n	82074 <ctrl_progfpga_bulk+0x20>
   82064:	4770      	bx	lr
            fpga_program_setup2();
   82066:	4b0a      	ldr	r3, [pc, #40]	; (82090 <ctrl_progfpga_bulk+0x3c>)
void ctrl_progfpga_bulk(void){
   82068:	b510      	push	{r4, lr}
            fpga_program_setup2();
   8206a:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   8206c:	220a      	movs	r2, #10
   8206e:	4b09      	ldr	r3, [pc, #36]	; (82094 <ctrl_progfpga_bulk+0x40>)
   82070:	701a      	strb	r2, [r3, #0]
}
   82072:	bd10      	pop	{r4, pc}
            if (udd_g_ctrlreq.req.wLength == 4) {
   82074:	88d3      	ldrh	r3, [r2, #6]
   82076:	2b04      	cmp	r3, #4
                prog_freq = *(CTRLBUFFER_WORDPTR);
   82078:	bf0a      	itet	eq
   8207a:	4b07      	ldreq	r3, [pc, #28]	; (82098 <ctrl_progfpga_bulk+0x44>)
    uint32_t prog_freq = 1E6;
   8207c:	4807      	ldrne	r0, [pc, #28]	; (8209c <ctrl_progfpga_bulk+0x48>)
                prog_freq = *(CTRLBUFFER_WORDPTR);
   8207e:	6818      	ldreq	r0, [r3, #0]
            fpga_program_setup1(prog_freq);			
   82080:	4b07      	ldr	r3, [pc, #28]	; (820a0 <ctrl_progfpga_bulk+0x4c>)
   82082:	4718      	bx	r3
            blockendpoint_usage = bep_emem;
   82084:	2200      	movs	r2, #0
   82086:	4b03      	ldr	r3, [pc, #12]	; (82094 <ctrl_progfpga_bulk+0x40>)
   82088:	701a      	strb	r2, [r3, #0]
}
   8208a:	4770      	bx	lr
   8208c:	200018f8 	.word	0x200018f8
   82090:	00080789 	.word	0x00080789
   82094:	200013ac 	.word	0x200013ac
   82098:	20000ea8 	.word	0x20000ea8
   8209c:	000f4240 	.word	0x000f4240
   820a0:	000806f1 	.word	0x000806f1

000820a4 <fpga_target_sam_cfg_out>:
	switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   820a4:	4b0f      	ldr	r3, [pc, #60]	; (820e4 <fpga_target_sam_cfg_out+0x40>)
   820a6:	789b      	ldrb	r3, [r3, #2]
   820a8:	2b05      	cmp	r3, #5
   820aa:	d004      	beq.n	820b6 <fpga_target_sam_cfg_out+0x12>
   820ac:	2b06      	cmp	r3, #6
   820ae:	d00c      	beq.n	820ca <fpga_target_sam_cfg_out+0x26>
   820b0:	2b04      	cmp	r3, #4
   820b2:	d005      	beq.n	820c0 <fpga_target_sam_cfg_out+0x1c>
   820b4:	4770      	bx	lr
	    gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   820b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   820ba:	201b      	movs	r0, #27
   820bc:	4b0a      	ldr	r3, [pc, #40]	; (820e8 <fpga_target_sam_cfg_out+0x44>)
   820be:	4718      	bx	r3
	    gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   820c0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   820c4:	201b      	movs	r0, #27
   820c6:	4b08      	ldr	r3, [pc, #32]	; (820e8 <fpga_target_sam_cfg_out+0x44>)
   820c8:	4718      	bx	r3
{
   820ca:	b510      	push	{r4, lr}
	    gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   820cc:	2031      	movs	r0, #49	; 0x31
   820ce:	4b07      	ldr	r3, [pc, #28]	; (820ec <fpga_target_sam_cfg_out+0x48>)
   820d0:	4798      	blx	r3
	    delay_cycles(250);
   820d2:	20fa      	movs	r0, #250	; 0xfa
   820d4:	4b06      	ldr	r3, [pc, #24]	; (820f0 <fpga_target_sam_cfg_out+0x4c>)
   820d6:	4798      	blx	r3
}
   820d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   820dc:	2031      	movs	r0, #49	; 0x31
   820de:	4b05      	ldr	r3, [pc, #20]	; (820f4 <fpga_target_sam_cfg_out+0x50>)
   820e0:	4718      	bx	r3
   820e2:	bf00      	nop
   820e4:	200018f8 	.word	0x200018f8
   820e8:	0008477d 	.word	0x0008477d
   820ec:	00084745 	.word	0x00084745
   820f0:	20000091 	.word	0x20000091
   820f4:	00084761 	.word	0x00084761

000820f8 <ctrl_fpgaioutil>:
    if (udd_g_ctrlreq.req.wLength != 2){
   820f8:	4b3a      	ldr	r3, [pc, #232]	; (821e4 <ctrl_fpgaioutil+0xec>)
   820fa:	88da      	ldrh	r2, [r3, #6]
   820fc:	2a02      	cmp	r2, #2
   820fe:	d000      	beq.n	82102 <ctrl_fpgaioutil+0xa>
   82100:	4770      	bx	lr
static void ctrl_fpgaioutil(void){
   82102:	b570      	push	{r4, r5, r6, lr}
    int pin = udd_g_ctrlreq.payload[0];
   82104:	689a      	ldr	r2, [r3, #8]
   82106:	7814      	ldrb	r4, [r2, #0]
	if ((pin < 0) || (pin > 95)){
   82108:	2c5f      	cmp	r4, #95	; 0x5f
   8210a:	d807      	bhi.n	8211c <ctrl_fpgaioutil+0x24>
	switch(udd_g_ctrlreq.req.wValue){
   8210c:	885b      	ldrh	r3, [r3, #2]
    int config = udd_g_ctrlreq.payload[1];
   8210e:	7852      	ldrb	r2, [r2, #1]
	switch(udd_g_ctrlreq.req.wValue){
   82110:	2ba1      	cmp	r3, #161	; 0xa1
   82112:	d013      	beq.n	8213c <ctrl_fpgaioutil+0x44>
   82114:	2ba2      	cmp	r3, #162	; 0xa2
   82116:	d017      	beq.n	82148 <ctrl_fpgaioutil+0x50>
   82118:	2ba0      	cmp	r3, #160	; 0xa0
   8211a:	d000      	beq.n	8211e <ctrl_fpgaioutil+0x26>
}
   8211c:	bd70      	pop	{r4, r5, r6, pc}
            switch(config)
   8211e:	3a01      	subs	r2, #1
   82120:	2a12      	cmp	r2, #18
   82122:	d80b      	bhi.n	8213c <ctrl_fpgaioutil+0x44>
   82124:	e8df f002 	tbb	[pc, r2]
   82128:	0a0a3a49 	.word	0x0a0a3a49
   8212c:	0a0a0a0a 	.word	0x0a0a0a0a
   82130:	0a0a0a0a 	.word	0x0a0a0a0a
   82134:	410a0a0a 	.word	0x410a0a0a
   82138:	242f      	.short	0x242f
   8213a:	19          	.byte	0x19
   8213b:	00          	.byte	0x00
            gpio_configure_pin(pin, PIO_DEFAULT);
   8213c:	4620      	mov	r0, r4
}
   8213e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            gpio_configure_pin(pin, PIO_DEFAULT);
   82142:	2100      	movs	r1, #0
   82144:	4b28      	ldr	r3, [pc, #160]	; (821e8 <ctrl_fpgaioutil+0xf0>)
   82146:	4718      	bx	r3
            if (config == 0){
   82148:	2a00      	cmp	r2, #0
   8214a:	d03d      	beq.n	821c8 <ctrl_fpgaioutil+0xd0>
            if (config == 1){
   8214c:	2a01      	cmp	r2, #1
   8214e:	d1e5      	bne.n	8211c <ctrl_fpgaioutil+0x24>
                gpio_set_pin_high(pin);
   82150:	4620      	mov	r0, r4
}
   82152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_high(pin);
   82156:	4b25      	ldr	r3, [pc, #148]	; (821ec <ctrl_fpgaioutil+0xf4>)
   82158:	4718      	bx	r3
                    if(pin_spi1_cs > -1){
   8215a:	4e25      	ldr	r6, [pc, #148]	; (821f0 <ctrl_fpgaioutil+0xf8>)
   8215c:	6830      	ldr	r0, [r6, #0]
   8215e:	2800      	cmp	r0, #0
   82160:	da3b      	bge.n	821da <ctrl_fpgaioutil+0xe2>
   82162:	4d21      	ldr	r5, [pc, #132]	; (821e8 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82164:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82168:	4620      	mov	r0, r4
   8216a:	47a8      	blx	r5
                    pin_spi1_cs = pin;                    
   8216c:	6034      	str	r4, [r6, #0]
}
   8216e:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_sck > -1){
   82170:	4e20      	ldr	r6, [pc, #128]	; (821f4 <ctrl_fpgaioutil+0xfc>)
   82172:	6830      	ldr	r0, [r6, #0]
   82174:	2800      	cmp	r0, #0
   82176:	da1c      	bge.n	821b2 <ctrl_fpgaioutil+0xba>
   82178:	4d1b      	ldr	r5, [pc, #108]	; (821e8 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   8217a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8217e:	4620      	mov	r0, r4
   82180:	47a8      	blx	r5
                    pin_spi1_sck = pin;
   82182:	6034      	str	r4, [r6, #0]
}
   82184:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_miso > -1){
   82186:	4e1c      	ldr	r6, [pc, #112]	; (821f8 <ctrl_fpgaioutil+0x100>)
   82188:	6830      	ldr	r0, [r6, #0]
   8218a:	2800      	cmp	r0, #0
   8218c:	da21      	bge.n	821d2 <ctrl_fpgaioutil+0xda>
   8218e:	4d16      	ldr	r5, [pc, #88]	; (821e8 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_INPUT);
   82190:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82194:	4620      	mov	r0, r4
   82196:	47a8      	blx	r5
                    pin_spi1_miso = pin;
   82198:	6034      	str	r4, [r6, #0]
}
   8219a:	bd70      	pop	{r4, r5, r6, pc}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   8219c:	4620      	mov	r0, r4
}
   8219e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   821a2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821a6:	4b10      	ldr	r3, [pc, #64]	; (821e8 <ctrl_fpgaioutil+0xf0>)
   821a8:	4718      	bx	r3
                    if(pin_spi1_mosi > -1){
   821aa:	4e14      	ldr	r6, [pc, #80]	; (821fc <ctrl_fpgaioutil+0x104>)
   821ac:	6830      	ldr	r0, [r6, #0]
   821ae:	2800      	cmp	r0, #0
   821b0:	dbe2      	blt.n	82178 <ctrl_fpgaioutil+0x80>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   821b2:	2100      	movs	r1, #0
   821b4:	4d0c      	ldr	r5, [pc, #48]	; (821e8 <ctrl_fpgaioutil+0xf0>)
   821b6:	47a8      	blx	r5
   821b8:	e7df      	b.n	8217a <ctrl_fpgaioutil+0x82>
                    gpio_configure_pin(pin, PIO_INPUT);
   821ba:	4620      	mov	r0, r4
}
   821bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_INPUT);
   821c0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   821c4:	4b08      	ldr	r3, [pc, #32]	; (821e8 <ctrl_fpgaioutil+0xf0>)
   821c6:	4718      	bx	r3
                gpio_set_pin_low(pin);
   821c8:	4620      	mov	r0, r4
}
   821ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_low(pin);
   821ce:	4b0c      	ldr	r3, [pc, #48]	; (82200 <ctrl_fpgaioutil+0x108>)
   821d0:	4718      	bx	r3
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   821d2:	2100      	movs	r1, #0
   821d4:	4d04      	ldr	r5, [pc, #16]	; (821e8 <ctrl_fpgaioutil+0xf0>)
   821d6:	47a8      	blx	r5
   821d8:	e7da      	b.n	82190 <ctrl_fpgaioutil+0x98>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   821da:	2100      	movs	r1, #0
   821dc:	4d02      	ldr	r5, [pc, #8]	; (821e8 <ctrl_fpgaioutil+0xf0>)
   821de:	47a8      	blx	r5
   821e0:	e7c0      	b.n	82164 <ctrl_fpgaioutil+0x6c>
   821e2:	bf00      	nop
   821e4:	200018f8 	.word	0x200018f8
   821e8:	0008477d 	.word	0x0008477d
   821ec:	00084745 	.word	0x00084745
   821f0:	200001bc 	.word	0x200001bc
   821f4:	200001c8 	.word	0x200001c8
   821f8:	200001c0 	.word	0x200001c0
   821fc:	200001c4 	.word	0x200001c4
   82200:	00084761 	.word	0x00084761

00082204 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   82204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82208:	4c17      	ldr	r4, [pc, #92]	; (82268 <ctrl_spi1util+0x64>)
   8220a:	8863      	ldrh	r3, [r4, #2]
   8220c:	3ba0      	subs	r3, #160	; 0xa0
   8220e:	2b04      	cmp	r3, #4
   82210:	d817      	bhi.n	82242 <ctrl_spi1util+0x3e>
   82212:	e8df f003 	tbb	[pc, r3]
   82216:	1c18      	.short	0x1c18
   82218:	2420      	.short	0x2420
   8221a:	03          	.byte	0x03
   8221b:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   8221c:	88e3      	ldrh	r3, [r4, #6]
   8221e:	89a2      	ldrh	r2, [r4, #12]
   82220:	429a      	cmp	r2, r3
   82222:	d30e      	bcc.n	82242 <ctrl_spi1util+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   82224:	3b01      	subs	r3, #1
   82226:	2b3f      	cmp	r3, #63	; 0x3f
   82228:	d80b      	bhi.n	82242 <ctrl_spi1util+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   8222a:	2500      	movs	r5, #0
   8222c:	4e0f      	ldr	r6, [pc, #60]	; (8226c <ctrl_spi1util+0x68>)
   8222e:	4f10      	ldr	r7, [pc, #64]	; (82270 <ctrl_spi1util+0x6c>)
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   82230:	68a3      	ldr	r3, [r4, #8]
   82232:	5d58      	ldrb	r0, [r3, r5]
   82234:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82236:	88e3      	ldrh	r3, [r4, #6]
   82238:	3501      	adds	r5, #1
   8223a:	429d      	cmp	r5, r3
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   8223c:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82240:	dbf6      	blt.n	82230 <ctrl_spi1util+0x2c>
}
   82242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			spi1util_init();			
   82246:	4b0b      	ldr	r3, [pc, #44]	; (82274 <ctrl_spi1util+0x70>)
}
   82248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_init();			
   8224c:	4718      	bx	r3
			spi1util_deinit();
   8224e:	4b0a      	ldr	r3, [pc, #40]	; (82278 <ctrl_spi1util+0x74>)
}
   82250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_deinit();
   82254:	4718      	bx	r3
			spi1util_cs_low();
   82256:	4b09      	ldr	r3, [pc, #36]	; (8227c <ctrl_spi1util+0x78>)
}
   82258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_low();
   8225c:	4718      	bx	r3
			spi1util_cs_high();
   8225e:	4b08      	ldr	r3, [pc, #32]	; (82280 <ctrl_spi1util+0x7c>)
}
   82260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_high();
   82264:	4718      	bx	r3
   82266:	bf00      	nop
   82268:	200018f8 	.word	0x200018f8
   8226c:	20001800 	.word	0x20001800
   82270:	000809f5 	.word	0x000809f5
   82274:	000809ad 	.word	0x000809ad
   82278:	00080a7d 	.word	0x00080a7d
   8227c:	000809d5 	.word	0x000809d5
   82280:	000809e5 	.word	0x000809e5

00082284 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   82284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82288:	4c17      	ldr	r4, [pc, #92]	; (822e8 <ctrl_progfpgaspi+0x64>)
   8228a:	8863      	ldrh	r3, [r4, #2]
   8228c:	3ba0      	subs	r3, #160	; 0xa0
   8228e:	2b04      	cmp	r3, #4
   82290:	d817      	bhi.n	822c2 <ctrl_progfpgaspi+0x3e>
   82292:	e8df f003 	tbb	[pc, r3]
   82296:	1c18      	.short	0x1c18
   82298:	2420      	.short	0x2420
   8229a:	03          	.byte	0x03
   8229b:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   8229c:	88e3      	ldrh	r3, [r4, #6]
   8229e:	89a2      	ldrh	r2, [r4, #12]
   822a0:	429a      	cmp	r2, r3
   822a2:	d30e      	bcc.n	822c2 <ctrl_progfpgaspi+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   822a4:	3b01      	subs	r3, #1
   822a6:	2b3f      	cmp	r3, #63	; 0x3f
   822a8:	d80b      	bhi.n	822c2 <ctrl_progfpgaspi+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   822aa:	2500      	movs	r5, #0
   822ac:	4e0f      	ldr	r6, [pc, #60]	; (822ec <ctrl_progfpgaspi+0x68>)
   822ae:	4f10      	ldr	r7, [pc, #64]	; (822f0 <ctrl_progfpgaspi+0x6c>)
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   822b0:	68a3      	ldr	r3, [r4, #8]
   822b2:	5d58      	ldrb	r0, [r3, r5]
   822b4:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   822b6:	88e3      	ldrh	r3, [r4, #6]
   822b8:	3501      	adds	r5, #1
   822ba:	429d      	cmp	r5, r3
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   822bc:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   822c0:	dbf6      	blt.n	822b0 <ctrl_progfpgaspi+0x2c>
}
   822c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fpgaspi_program_init();			
   822c6:	4b0b      	ldr	r3, [pc, #44]	; (822f4 <ctrl_progfpgaspi+0x70>)
}
   822c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_init();			
   822cc:	4718      	bx	r3
			fpgaspi_program_deinit();
   822ce:	4b0a      	ldr	r3, [pc, #40]	; (822f8 <ctrl_progfpgaspi+0x74>)
}
   822d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_deinit();
   822d4:	4718      	bx	r3
			fpgaspi_cs_low();
   822d6:	4b09      	ldr	r3, [pc, #36]	; (822fc <ctrl_progfpgaspi+0x78>)
}
   822d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_low();
   822dc:	4718      	bx	r3
			fpgaspi_cs_high();
   822de:	4b08      	ldr	r3, [pc, #32]	; (82300 <ctrl_progfpgaspi+0x7c>)
}
   822e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_high();
   822e4:	4718      	bx	r3
   822e6:	bf00      	nop
   822e8:	200018f8 	.word	0x200018f8
   822ec:	200013c0 	.word	0x200013c0
   822f0:	00080921 	.word	0x00080921
   822f4:	000808c9 	.word	0x000808c9
   822f8:	0008098d 	.word	0x0008098d
   822fc:	00080909 	.word	0x00080909
   82300:	00080915 	.word	0x00080915

00082304 <ctrl_cdce906_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82304:	4b11      	ldr	r3, [pc, #68]	; (8234c <ctrl_cdce906_cb+0x48>)
   82306:	88da      	ldrh	r2, [r3, #6]
   82308:	8999      	ldrh	r1, [r3, #12]
   8230a:	4291      	cmp	r1, r2
   8230c:	d316      	bcc.n	8233c <ctrl_cdce906_cb+0x38>
    if (udd_g_ctrlreq.req.wLength < 3){
   8230e:	2a02      	cmp	r2, #2
{
   82310:	b510      	push	{r4, lr}
    if (udd_g_ctrlreq.req.wLength < 3){
   82312:	d90f      	bls.n	82334 <ctrl_cdce906_cb+0x30>
    cdce906_status = USB_STATUS_COMMERR;
   82314:	2103      	movs	r1, #3
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82316:	689b      	ldr	r3, [r3, #8]
    cdce906_status = USB_STATUS_COMMERR;
   82318:	4c0d      	ldr	r4, [pc, #52]	; (82350 <ctrl_cdce906_cb+0x4c>)
    if (udd_g_ctrlreq.payload[0] == 0x00){
   8231a:	781a      	ldrb	r2, [r3, #0]
    cdce906_status = USB_STATUS_COMMERR;
   8231c:	7021      	strb	r1, [r4, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   8231e:	b172      	cbz	r2, 8233e <ctrl_cdce906_cb+0x3a>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   82320:	2a01      	cmp	r2, #1
   82322:	d108      	bne.n	82336 <ctrl_cdce906_cb+0x32>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   82324:	7899      	ldrb	r1, [r3, #2]
   82326:	7858      	ldrb	r0, [r3, #1]
   82328:	4b0a      	ldr	r3, [pc, #40]	; (82354 <ctrl_cdce906_cb+0x50>)
   8232a:	4798      	blx	r3
   8232c:	b108      	cbz	r0, 82332 <ctrl_cdce906_cb+0x2e>
            cdce906_status = USB_STATUS_OK;
   8232e:	2302      	movs	r3, #2
   82330:	7023      	strb	r3, [r4, #0]
}
   82332:	bd10      	pop	{r4, pc}
   82334:	4c06      	ldr	r4, [pc, #24]	; (82350 <ctrl_cdce906_cb+0x4c>)
        cdce906_status = USB_STATUS_PARAMWRONG;
   82336:	2301      	movs	r3, #1
   82338:	7023      	strb	r3, [r4, #0]
}
   8233a:	bd10      	pop	{r4, pc}
   8233c:	4770      	bx	lr
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   8233e:	7858      	ldrb	r0, [r3, #1]
   82340:	4905      	ldr	r1, [pc, #20]	; (82358 <ctrl_cdce906_cb+0x54>)
   82342:	4b06      	ldr	r3, [pc, #24]	; (8235c <ctrl_cdce906_cb+0x58>)
   82344:	4798      	blx	r3
   82346:	2800      	cmp	r0, #0
   82348:	d0f3      	beq.n	82332 <ctrl_cdce906_cb+0x2e>
   8234a:	e7f0      	b.n	8232e <ctrl_cdce906_cb+0x2a>
   8234c:	200018f8 	.word	0x200018f8
   82350:	200013b5 	.word	0x200013b5
   82354:	00080845 	.word	0x00080845
   82358:	200013b4 	.word	0x200013b4
   8235c:	0008088d 	.word	0x0008088d

00082360 <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   82360:	b510      	push	{r4, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   82362:	4b04      	ldr	r3, [pc, #16]	; (82374 <fpga_target_register_handlers+0x14>)
   82364:	4804      	ldr	r0, [pc, #16]	; (82378 <fpga_target_register_handlers+0x18>)
   82366:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   82368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(fpga_target_setup_out_received);
   8236c:	4803      	ldr	r0, [pc, #12]	; (8237c <fpga_target_register_handlers+0x1c>)
   8236e:	4b04      	ldr	r3, [pc, #16]	; (82380 <fpga_target_register_handlers+0x20>)
   82370:	4718      	bx	r3
   82372:	bf00      	nop
   82374:	000818d9 	.word	0x000818d9
   82378:	00081e9d 	.word	0x00081e9d
   8237c:	00081b7d 	.word	0x00081b7d
   82380:	00081901 	.word	0x00081901

00082384 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   82384:	4a02      	ldr	r2, [pc, #8]	; (82390 <udc_valid_address+0xc>)
   82386:	4b03      	ldr	r3, [pc, #12]	; (82394 <udc_valid_address+0x10>)
   82388:	8850      	ldrh	r0, [r2, #2]
   8238a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8238e:	4718      	bx	r3
   82390:	200018f8 	.word	0x200018f8
   82394:	00083ad9 	.word	0x00083ad9

00082398 <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82398:	4b15      	ldr	r3, [pc, #84]	; (823f0 <udc_update_iface_desc.part.0+0x58>)
   8239a:	681b      	ldr	r3, [r3, #0]
   8239c:	681b      	ldr	r3, [r3, #0]
   8239e:	791a      	ldrb	r2, [r3, #4]
   823a0:	4282      	cmp	r2, r0
   823a2:	d922      	bls.n	823ea <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
   823a4:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   823a6:	4c13      	ldr	r4, [pc, #76]	; (823f4 <udc_update_iface_desc.part.0+0x5c>)
   823a8:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   823aa:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   823ae:	449c      	add	ip, r3
	while (ptr_end_desc >
   823b0:	4563      	cmp	r3, ip
   823b2:	d217      	bcs.n	823e4 <udc_update_iface_desc.part.0+0x4c>
   823b4:	2500      	movs	r5, #0
   823b6:	e004      	b.n	823c2 <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
   823b8:	781a      	ldrb	r2, [r3, #0]
   823ba:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   823bc:	4413      	add	r3, r2
	while (ptr_end_desc >
   823be:	459c      	cmp	ip, r3
   823c0:	d90c      	bls.n	823dc <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   823c2:	785a      	ldrb	r2, [r3, #1]
   823c4:	2a04      	cmp	r2, #4
   823c6:	d1f7      	bne.n	823b8 <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   823c8:	789a      	ldrb	r2, [r3, #2]
   823ca:	4282      	cmp	r2, r0
   823cc:	d1f4      	bne.n	823b8 <udc_update_iface_desc.part.0+0x20>
   823ce:	78da      	ldrb	r2, [r3, #3]
   823d0:	428a      	cmp	r2, r1
   823d2:	d1f1      	bne.n	823b8 <udc_update_iface_desc.part.0+0x20>
   823d4:	b105      	cbz	r5, 823d8 <udc_update_iface_desc.part.0+0x40>
   823d6:	6023      	str	r3, [r4, #0]
				return true; // Interface found
   823d8:	2001      	movs	r0, #1
   823da:	e001      	b.n	823e0 <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
   823dc:	2000      	movs	r0, #0
   823de:	6023      	str	r3, [r4, #0]
}
   823e0:	bc30      	pop	{r4, r5}
   823e2:	4770      	bx	lr
		return false;
   823e4:	2000      	movs	r0, #0
}
   823e6:	bc30      	pop	{r4, r5}
   823e8:	4770      	bx	lr
		return false;
   823ea:	2000      	movs	r0, #0
}
   823ec:	4770      	bx	lr
   823ee:	bf00      	nop
   823f0:	20001848 	.word	0x20001848
   823f4:	2000184c 	.word	0x2000184c

000823f8 <udc_iface_disable>:
{
   823f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (0 == udc_num_configuration) {
   823fc:	4c1c      	ldr	r4, [pc, #112]	; (82470 <udc_iface_disable+0x78>)
   823fe:	7823      	ldrb	r3, [r4, #0]
   82400:	b37b      	cbz	r3, 82462 <udc_iface_disable+0x6a>
   82402:	2100      	movs	r1, #0
   82404:	4e1b      	ldr	r6, [pc, #108]	; (82474 <udc_iface_disable+0x7c>)
   82406:	4605      	mov	r5, r0
   82408:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
   8240a:	b350      	cbz	r0, 82462 <udc_iface_disable+0x6a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8240c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 82478 <udc_iface_disable+0x80>
   82410:	f8d8 3000 	ldr.w	r3, [r8]
   82414:	685b      	ldr	r3, [r3, #4]
   82416:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8241a:	68fb      	ldr	r3, [r7, #12]
   8241c:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   8241e:	7823      	ldrb	r3, [r4, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82420:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   82422:	b1f3      	cbz	r3, 82462 <udc_iface_disable+0x6a>
   82424:	4628      	mov	r0, r5
   82426:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82428:	4605      	mov	r5, r0
   8242a:	b1d0      	cbz	r0, 82462 <udc_iface_disable+0x6a>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8242c:	4b13      	ldr	r3, [pc, #76]	; (8247c <udc_iface_disable+0x84>)
			udd_ep_free(ep_desc->bEndpointAddress);
   8242e:	4e14      	ldr	r6, [pc, #80]	; (82480 <udc_iface_disable+0x88>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82430:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
   82432:	f8d8 2000 	ldr.w	r2, [r8]
			desc->bLength);
   82436:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   82438:	6812      	ldr	r2, [r2, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8243a:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8243c:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8243e:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   82440:	42a2      	cmp	r2, r4
   82442:	d806      	bhi.n	82452 <udc_iface_disable+0x5a>
   82444:	e008      	b.n	82458 <udc_iface_disable+0x60>
		if (desc_id == desc->bDescriptorType) {
   82446:	2b05      	cmp	r3, #5
   82448:	d00f      	beq.n	8246a <udc_iface_disable+0x72>
				desc->bLength);
   8244a:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8244c:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   8244e:	42a2      	cmp	r2, r4
   82450:	d902      	bls.n	82458 <udc_iface_disable+0x60>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82452:	7863      	ldrb	r3, [r4, #1]
   82454:	2b04      	cmp	r3, #4
   82456:	d1f6      	bne.n	82446 <udc_iface_disable+0x4e>
	udi_api->disable();
   82458:	687b      	ldr	r3, [r7, #4]
   8245a:	4798      	blx	r3
}
   8245c:	4628      	mov	r0, r5
   8245e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   82462:	2500      	movs	r5, #0
}
   82464:	4628      	mov	r0, r5
   82466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
   8246a:	78a0      	ldrb	r0, [r4, #2]
   8246c:	47b0      	blx	r6
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8246e:	e7e0      	b.n	82432 <udc_iface_disable+0x3a>
   82470:	20001847 	.word	0x20001847
   82474:	00082399 	.word	0x00082399
   82478:	20001848 	.word	0x20001848
   8247c:	2000184c 	.word	0x2000184c
   82480:	00083b2d 	.word	0x00083b2d

00082484 <udc_iface_enable>:
	if (0 == udc_num_configuration) {
   82484:	4b18      	ldr	r3, [pc, #96]	; (824e8 <udc_iface_enable+0x64>)
   82486:	781b      	ldrb	r3, [r3, #0]
   82488:	b35b      	cbz	r3, 824e2 <udc_iface_enable+0x5e>
{
   8248a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8248e:	4b17      	ldr	r3, [pc, #92]	; (824ec <udc_iface_enable+0x68>)
   82490:	4605      	mov	r5, r0
   82492:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   82494:	b310      	cbz	r0, 824dc <udc_iface_enable+0x58>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82496:	4b16      	ldr	r3, [pc, #88]	; (824f0 <udc_iface_enable+0x6c>)
   82498:	4e16      	ldr	r6, [pc, #88]	; (824f4 <udc_iface_enable+0x70>)
   8249a:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8249c:	4f16      	ldr	r7, [pc, #88]	; (824f8 <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
   8249e:	6831      	ldr	r1, [r6, #0]
			desc->bLength);
   824a0:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   824a2:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   824a4:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   824a6:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   824a8:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   824aa:	42a2      	cmp	r2, r4
   824ac:	d806      	bhi.n	824bc <udc_iface_enable+0x38>
   824ae:	e008      	b.n	824c2 <udc_iface_enable+0x3e>
		if (desc_id == desc->bDescriptorType) {
   824b0:	2b05      	cmp	r3, #5
   824b2:	d00d      	beq.n	824d0 <udc_iface_enable+0x4c>
				desc->bLength);
   824b4:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   824b6:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   824b8:	42a2      	cmp	r2, r4
   824ba:	d902      	bls.n	824c2 <udc_iface_enable+0x3e>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   824bc:	7863      	ldrb	r3, [r4, #1]
   824be:	2b04      	cmp	r3, #4
   824c0:	d1f6      	bne.n	824b0 <udc_iface_enable+0x2c>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   824c2:	684b      	ldr	r3, [r1, #4]
   824c4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
   824c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   824cc:	681b      	ldr	r3, [r3, #0]
   824ce:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   824d0:	88a2      	ldrh	r2, [r4, #4]
   824d2:	78e1      	ldrb	r1, [r4, #3]
   824d4:	78a0      	ldrb	r0, [r4, #2]
   824d6:	47b8      	blx	r7
   824d8:	2800      	cmp	r0, #0
   824da:	d1e0      	bne.n	8249e <udc_iface_enable+0x1a>
}
   824dc:	2000      	movs	r0, #0
   824de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824e2:	2000      	movs	r0, #0
   824e4:	4770      	bx	lr
   824e6:	bf00      	nop
   824e8:	20001847 	.word	0x20001847
   824ec:	00082399 	.word	0x00082399
   824f0:	2000184c 	.word	0x2000184c
   824f4:	20001848 	.word	0x20001848
   824f8:	00083dfd 	.word	0x00083dfd

000824fc <udc_get_interface_desc>:
	return udc_ptr_iface;
   824fc:	4b01      	ldr	r3, [pc, #4]	; (82504 <udc_get_interface_desc+0x8>)
}
   824fe:	6818      	ldr	r0, [r3, #0]
   82500:	4770      	bx	lr
   82502:	bf00      	nop
   82504:	2000184c 	.word	0x2000184c

00082508 <udc_start>:
	udd_enable();
   82508:	4b00      	ldr	r3, [pc, #0]	; (8250c <udc_start+0x4>)
   8250a:	4718      	bx	r3
   8250c:	00083995 	.word	0x00083995

00082510 <udc_reset>:
{
   82510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   82512:	4f0c      	ldr	r7, [pc, #48]	; (82544 <udc_reset+0x34>)
   82514:	783b      	ldrb	r3, [r7, #0]
   82516:	b17b      	cbz	r3, 82538 <udc_reset+0x28>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82518:	4d0b      	ldr	r5, [pc, #44]	; (82548 <udc_reset+0x38>)
   8251a:	682b      	ldr	r3, [r5, #0]
   8251c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8251e:	791b      	ldrb	r3, [r3, #4]
   82520:	b153      	cbz	r3, 82538 <udc_reset+0x28>
   82522:	2400      	movs	r4, #0
   82524:	4620      	mov	r0, r4
   82526:	4e09      	ldr	r6, [pc, #36]	; (8254c <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   82528:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8252a:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   8252c:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8252e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82530:	b2e0      	uxtb	r0, r4
   82532:	791b      	ldrb	r3, [r3, #4]
   82534:	4283      	cmp	r3, r0
   82536:	d8f7      	bhi.n	82528 <udc_reset+0x18>
	udc_num_configuration = 0;
   82538:	2300      	movs	r3, #0
	udc_device_status =
   8253a:	4a05      	ldr	r2, [pc, #20]	; (82550 <udc_reset+0x40>)
	udc_num_configuration = 0;
   8253c:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   8253e:	8013      	strh	r3, [r2, #0]
}
   82540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82542:	bf00      	nop
   82544:	20001847 	.word	0x20001847
   82548:	20001848 	.word	0x20001848
   8254c:	000823f9 	.word	0x000823f9
   82550:	20001842 	.word	0x20001842

00082554 <udc_sof_notify>:
{
   82554:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   82556:	4b0c      	ldr	r3, [pc, #48]	; (82588 <udc_sof_notify+0x34>)
   82558:	781b      	ldrb	r3, [r3, #0]
   8255a:	b19b      	cbz	r3, 82584 <udc_sof_notify+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8255c:	4d0b      	ldr	r5, [pc, #44]	; (8258c <udc_sof_notify+0x38>)
   8255e:	682b      	ldr	r3, [r5, #0]
   82560:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   82562:	7912      	ldrb	r2, [r2, #4]
   82564:	b172      	cbz	r2, 82584 <udc_sof_notify+0x30>
   82566:	2400      	movs	r4, #0
   82568:	4622      	mov	r2, r4
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8256a:	685b      	ldr	r3, [r3, #4]
		for (iface_num = 0;
   8256c:	3401      	adds	r4, #1
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82572:	691b      	ldr	r3, [r3, #16]
   82574:	b103      	cbz	r3, 82578 <udc_sof_notify+0x24>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   82576:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82578:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   8257a:	b2e2      	uxtb	r2, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8257c:	6819      	ldr	r1, [r3, #0]
		for (iface_num = 0;
   8257e:	7909      	ldrb	r1, [r1, #4]
   82580:	4291      	cmp	r1, r2
   82582:	d8f2      	bhi.n	8256a <udc_sof_notify+0x16>
}
   82584:	bd38      	pop	{r3, r4, r5, pc}
   82586:	bf00      	nop
   82588:	20001847 	.word	0x20001847
   8258c:	20001848 	.word	0x20001848

00082590 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   82590:	2300      	movs	r3, #0
{
   82592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
   82596:	4c8b      	ldr	r4, [pc, #556]	; (827c4 <udc_process_setup+0x234>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   82598:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
   8259a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8259e:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
   825a2:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   825a4:	f000 80d0 	beq.w	82748 <udc_process_setup+0x1b8>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   825a8:	f994 2000 	ldrsb.w	r2, [r4]
   825ac:	7823      	ldrb	r3, [r4, #0]
   825ae:	2a00      	cmp	r2, #0
   825b0:	db0e      	blt.n	825d0 <udc_process_setup+0x40>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   825b2:	f013 0f60 	tst.w	r3, #96	; 0x60
   825b6:	d079      	beq.n	826ac <udc_process_setup+0x11c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   825b8:	f013 0f1e 	tst.w	r3, #30
   825bc:	d040      	beq.n	82640 <udc_process_setup+0xb0>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   825be:	f003 031f 	and.w	r3, r3, #31
   825c2:	2b02      	cmp	r3, #2
   825c4:	f000 80b6 	beq.w	82734 <udc_process_setup+0x1a4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   825c8:	2500      	movs	r5, #0
#endif
}
   825ca:	4628      	mov	r0, r5
   825cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   825d0:	88e5      	ldrh	r5, [r4, #6]
   825d2:	2d00      	cmp	r5, #0
   825d4:	d0f8      	beq.n	825c8 <udc_process_setup+0x38>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   825d6:	f013 0f60 	tst.w	r3, #96	; 0x60
   825da:	d1ed      	bne.n	825b8 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   825dc:	f013 021f 	ands.w	r2, r3, #31
   825e0:	f000 8165 	beq.w	828ae <udc_process_setup+0x31e>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   825e4:	2a01      	cmp	r2, #1
   825e6:	f040 80b9 	bne.w	8275c <udc_process_setup+0x1cc>
			switch (udd_g_ctrlreq.req.bRequest) {
   825ea:	7862      	ldrb	r2, [r4, #1]
   825ec:	2a0a      	cmp	r2, #10
   825ee:	d124      	bne.n	8263a <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != 1) {
   825f0:	2d01      	cmp	r5, #1
   825f2:	d122      	bne.n	8263a <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   825f4:	4a74      	ldr	r2, [pc, #464]	; (827c8 <udc_process_setup+0x238>)
   825f6:	7812      	ldrb	r2, [r2, #0]
   825f8:	b1fa      	cbz	r2, 8263a <udc_process_setup+0xaa>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   825fa:	4a74      	ldr	r2, [pc, #464]	; (827cc <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   825fc:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   825fe:	6817      	ldr	r7, [r2, #0]
   82600:	683a      	ldr	r2, [r7, #0]
   82602:	7912      	ldrb	r2, [r2, #4]
   82604:	42b2      	cmp	r2, r6
   82606:	d918      	bls.n	8263a <udc_process_setup+0xaa>
	if (0 == udc_num_configuration) {
   82608:	2100      	movs	r1, #0
   8260a:	4630      	mov	r0, r6
   8260c:	4b70      	ldr	r3, [pc, #448]	; (827d0 <udc_process_setup+0x240>)
   8260e:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
   82610:	4605      	mov	r5, r0
   82612:	2800      	cmp	r0, #0
   82614:	f000 80c5 	beq.w	827a2 <udc_process_setup+0x212>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82618:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
   8261a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   8261e:	68db      	ldr	r3, [r3, #12]
   82620:	4798      	blx	r3
   82622:	4602      	mov	r2, r0
   82624:	486b      	ldr	r0, [pc, #428]	; (827d4 <udc_process_setup+0x244>)
	udd_set_setup_payload(&udc_iface_setting,1);
   82626:	2101      	movs	r1, #1
   82628:	4b6b      	ldr	r3, [pc, #428]	; (827d8 <udc_process_setup+0x248>)
	udc_iface_setting = udi_api->getsetting();
   8262a:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   8262c:	4798      	blx	r3
	return true;
   8262e:	e7cc      	b.n	825ca <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82630:	2a01      	cmp	r2, #1
   82632:	f000 814d 	beq.w	828d0 <udc_process_setup+0x340>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82636:	2a02      	cmp	r2, #2
   82638:	d06c      	beq.n	82714 <udc_process_setup+0x184>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   8263a:	f013 0f1e 	tst.w	r3, #30
   8263e:	d1c3      	bne.n	825c8 <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   82640:	88a3      	ldrh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   82642:	4e61      	ldr	r6, [pc, #388]	; (827c8 <udc_process_setup+0x238>)
		if (udd_g_ctrlreq.req.wIndex == 2) {
   82644:	2b02      	cmp	r3, #2
			udd_g_ctrlreq.req.wIndex = 1;
   82646:	bf04      	itt	eq
   82648:	2301      	moveq	r3, #1
   8264a:	80a3      	strheq	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   8264c:	7833      	ldrb	r3, [r6, #0]
   8264e:	2b00      	cmp	r3, #0
   82650:	d0ba      	beq.n	825c8 <udc_process_setup+0x38>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82652:	4f5e      	ldr	r7, [pc, #376]	; (827cc <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82654:	f894 8004 	ldrb.w	r8, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82658:	683d      	ldr	r5, [r7, #0]
   8265a:	682b      	ldr	r3, [r5, #0]
   8265c:	791b      	ldrb	r3, [r3, #4]
   8265e:	4598      	cmp	r8, r3
   82660:	d340      	bcc.n	826e4 <udc_process_setup+0x154>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82662:	7822      	ldrb	r2, [r4, #0]
   82664:	f002 021f 	and.w	r2, r2, #31
   82668:	2a02      	cmp	r2, #2
   8266a:	d1ad      	bne.n	825c8 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8266c:	2b00      	cmp	r3, #0
   8266e:	d0ab      	beq.n	825c8 <udc_process_setup+0x38>
   82670:	2400      	movs	r4, #0
   82672:	46a0      	mov	r8, r4
   82674:	f8df 9158 	ldr.w	r9, [pc, #344]	; 827d0 <udc_process_setup+0x240>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   82678:	686b      	ldr	r3, [r5, #4]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8267a:	3401      	adds	r4, #1
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8267c:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82680:	68eb      	ldr	r3, [r5, #12]
   82682:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   82684:	7833      	ldrb	r3, [r6, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82686:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   82688:	2b00      	cmp	r3, #0
   8268a:	d09d      	beq.n	825c8 <udc_process_setup+0x38>
   8268c:	4640      	mov	r0, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8268e:	fa5f f884 	uxtb.w	r8, r4
   82692:	47c8      	blx	r9
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82694:	2800      	cmp	r0, #0
   82696:	d097      	beq.n	825c8 <udc_process_setup+0x38>
		if (udi_api->setup()) {
   82698:	68ab      	ldr	r3, [r5, #8]
   8269a:	4798      	blx	r3
   8269c:	2800      	cmp	r0, #0
   8269e:	d137      	bne.n	82710 <udc_process_setup+0x180>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   826a0:	683d      	ldr	r5, [r7, #0]
   826a2:	682b      	ldr	r3, [r5, #0]
   826a4:	791b      	ldrb	r3, [r3, #4]
   826a6:	4543      	cmp	r3, r8
   826a8:	d8e6      	bhi.n	82678 <udc_process_setup+0xe8>
   826aa:	e78d      	b.n	825c8 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   826ac:	f013 021f 	ands.w	r2, r3, #31
   826b0:	d1be      	bne.n	82630 <udc_process_setup+0xa0>
			switch (udd_g_ctrlreq.req.bRequest) {
   826b2:	7862      	ldrb	r2, [r4, #1]
   826b4:	3a01      	subs	r2, #1
   826b6:	2a08      	cmp	r2, #8
   826b8:	d8bf      	bhi.n	8263a <udc_process_setup+0xaa>
   826ba:	a101      	add	r1, pc, #4	; (adr r1, 826c0 <udc_process_setup+0x130>)
   826bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   826c0:	000827a7 	.word	0x000827a7
   826c4:	0008263b 	.word	0x0008263b
   826c8:	00082783 	.word	0x00082783
   826cc:	0008263b 	.word	0x0008263b
   826d0:	0008289f 	.word	0x0008289f
   826d4:	0008263b 	.word	0x0008263b
   826d8:	0008263b 	.word	0x0008263b
   826dc:	0008263b 	.word	0x0008263b
   826e0:	000827f1 	.word	0x000827f1
	if (0 == udc_num_configuration) {
   826e4:	2100      	movs	r1, #0
   826e6:	4640      	mov	r0, r8
   826e8:	4f39      	ldr	r7, [pc, #228]	; (827d0 <udc_process_setup+0x240>)
   826ea:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, 0)) {
   826ec:	2800      	cmp	r0, #0
   826ee:	d033      	beq.n	82758 <udc_process_setup+0x1c8>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   826f0:	686b      	ldr	r3, [r5, #4]
   826f2:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   826f6:	68eb      	ldr	r3, [r5, #12]
   826f8:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   826fa:	7833      	ldrb	r3, [r6, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   826fc:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   826fe:	2b00      	cmp	r3, #0
   82700:	f43f af62 	beq.w	825c8 <udc_process_setup+0x38>
   82704:	4640      	mov	r0, r8
   82706:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82708:	b330      	cbz	r0, 82758 <udc_process_setup+0x1c8>
	return udi_api->setup();
   8270a:	68ab      	ldr	r3, [r5, #8]
   8270c:	4798      	blx	r3
		if (udc_req_iface()) {
   8270e:	b318      	cbz	r0, 82758 <udc_process_setup+0x1c8>
			return true;
   82710:	2501      	movs	r5, #1
   82712:	e75a      	b.n	825ca <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   82714:	7862      	ldrb	r2, [r4, #1]
   82716:	2a01      	cmp	r2, #1
   82718:	f000 80f7 	beq.w	8290a <udc_process_setup+0x37a>
   8271c:	2a03      	cmp	r2, #3
   8271e:	d106      	bne.n	8272e <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   82720:	88e2      	ldrh	r2, [r4, #6]
   82722:	8861      	ldrh	r1, [r4, #2]
   82724:	430a      	orrs	r2, r1
   82726:	b292      	uxth	r2, r2
   82728:	2a00      	cmp	r2, #0
   8272a:	f000 81c1 	beq.w	82ab0 <udc_process_setup+0x520>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   8272e:	f013 0f1e 	tst.w	r3, #30
   82732:	d085      	beq.n	82640 <udc_process_setup+0xb0>
	if (0 == udc_num_configuration) {
   82734:	4e24      	ldr	r6, [pc, #144]	; (827c8 <udc_process_setup+0x238>)
   82736:	7833      	ldrb	r3, [r6, #0]
   82738:	2b00      	cmp	r3, #0
   8273a:	f43f af45 	beq.w	825c8 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8273e:	4f23      	ldr	r7, [pc, #140]	; (827cc <udc_process_setup+0x23c>)
   82740:	683d      	ldr	r5, [r7, #0]
   82742:	682b      	ldr	r3, [r5, #0]
   82744:	791b      	ldrb	r3, [r3, #4]
   82746:	e791      	b.n	8266c <udc_process_setup+0xdc>
		return true;
   82748:	2501      	movs	r5, #1
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   8274a:	219e      	movs	r1, #158	; 0x9e
   8274c:	4823      	ldr	r0, [pc, #140]	; (827dc <udc_process_setup+0x24c>)
   8274e:	4b22      	ldr	r3, [pc, #136]	; (827d8 <udc_process_setup+0x248>)
   82750:	4798      	blx	r3
}
   82752:	4628      	mov	r0, r5
   82754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82758:	7823      	ldrb	r3, [r4, #0]
   8275a:	e730      	b.n	825be <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8275c:	2a02      	cmp	r2, #2
   8275e:	f47f af6c 	bne.w	8263a <udc_process_setup+0xaa>
			switch (udd_g_ctrlreq.req.bRequest) {
   82762:	7862      	ldrb	r2, [r4, #1]
   82764:	2a00      	cmp	r2, #0
   82766:	d1e2      	bne.n	8272e <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   82768:	2d02      	cmp	r5, #2
   8276a:	d1e0      	bne.n	8272e <udc_process_setup+0x19e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8276c:	7920      	ldrb	r0, [r4, #4]
   8276e:	4b1c      	ldr	r3, [pc, #112]	; (827e0 <udc_process_setup+0x250>)
   82770:	4798      	blx	r3
   82772:	4602      	mov	r2, r0
   82774:	481b      	ldr	r0, [pc, #108]	; (827e4 <udc_process_setup+0x254>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   82776:	4629      	mov	r1, r5
   82778:	4b17      	ldr	r3, [pc, #92]	; (827d8 <udc_process_setup+0x248>)
			return true;
   8277a:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   8277c:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8277e:	4798      	blx	r3
	return true;
   82780:	e723      	b.n	825ca <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   82782:	88e2      	ldrh	r2, [r4, #6]
   82784:	2a00      	cmp	r2, #0
   82786:	f47f af58 	bne.w	8263a <udc_process_setup+0xaa>
	switch (udd_g_ctrlreq.req.wValue) {
   8278a:	8862      	ldrh	r2, [r4, #2]
   8278c:	2a02      	cmp	r2, #2
   8278e:	f47f af54 	bne.w	8263a <udc_process_setup+0xaa>
		if (!udd_is_high_speed()) {
   82792:	4b15      	ldr	r3, [pc, #84]	; (827e8 <udc_process_setup+0x258>)
   82794:	4798      	blx	r3
   82796:	4605      	mov	r5, r0
   82798:	b118      	cbz	r0, 827a2 <udc_process_setup+0x212>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8279a:	7923      	ldrb	r3, [r4, #4]
   8279c:	2b00      	cmp	r3, #0
   8279e:	f000 81bc 	beq.w	82b1a <udc_process_setup+0x58a>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   827a2:	7823      	ldrb	r3, [r4, #0]
   827a4:	e708      	b.n	825b8 <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength) {
   827a6:	88e2      	ldrh	r2, [r4, #6]
   827a8:	2a00      	cmp	r2, #0
   827aa:	f47f af46 	bne.w	8263a <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   827ae:	8865      	ldrh	r5, [r4, #2]
   827b0:	2d01      	cmp	r5, #1
   827b2:	f47f af42 	bne.w	8263a <udc_process_setup+0xaa>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   827b6:	4a0d      	ldr	r2, [pc, #52]	; (827ec <udc_process_setup+0x25c>)
   827b8:	8813      	ldrh	r3, [r2, #0]
   827ba:	f023 0302 	bic.w	r3, r3, #2
   827be:	8013      	strh	r3, [r2, #0]
		return true;
   827c0:	e703      	b.n	825ca <udc_process_setup+0x3a>
   827c2:	bf00      	nop
   827c4:	200018f8 	.word	0x200018f8
   827c8:	20001847 	.word	0x20001847
   827cc:	20001848 	.word	0x20001848
   827d0:	00082399 	.word	0x00082399
   827d4:	20001846 	.word	0x20001846
   827d8:	00083b21 	.word	0x00083b21
   827dc:	20000204 	.word	0x20000204
   827e0:	00083b7d 	.word	0x00083b7d
   827e4:	20001844 	.word	0x20001844
   827e8:	00083ac9 	.word	0x00083ac9
   827ec:	20001842 	.word	0x20001842
	if (udd_g_ctrlreq.req.wLength) {
   827f0:	88e2      	ldrh	r2, [r4, #6]
   827f2:	2a00      	cmp	r2, #0
   827f4:	f47f af21 	bne.w	8263a <udc_process_setup+0xaa>
	if (!udd_getaddress()) {
   827f8:	4b9c      	ldr	r3, [pc, #624]	; (82a6c <udc_process_setup+0x4dc>)
   827fa:	4798      	blx	r3
   827fc:	2800      	cmp	r0, #0
   827fe:	d0d0      	beq.n	827a2 <udc_process_setup+0x212>
	if (udd_is_high_speed()) {
   82800:	f8df 926c 	ldr.w	r9, [pc, #620]	; 82a70 <udc_process_setup+0x4e0>
   82804:	47c8      	blx	r9
				udc_config.confdev_hs->bNumConfigurations) {
   82806:	f8df a26c 	ldr.w	sl, [pc, #620]	; 82a74 <udc_process_setup+0x4e4>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8280a:	78a3      	ldrb	r3, [r4, #2]
	if (udd_is_high_speed()) {
   8280c:	2800      	cmp	r0, #0
   8280e:	f000 8125 	beq.w	82a5c <udc_process_setup+0x4cc>
				udc_config.confdev_hs->bNumConfigurations) {
   82812:	f8da 2008 	ldr.w	r2, [sl, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82816:	7c52      	ldrb	r2, [r2, #17]
   82818:	429a      	cmp	r2, r3
   8281a:	d3c2      	bcc.n	827a2 <udc_process_setup+0x212>
	if (udc_num_configuration) {
   8281c:	4e96      	ldr	r6, [pc, #600]	; (82a78 <udc_process_setup+0x4e8>)
   8281e:	7833      	ldrb	r3, [r6, #0]
   82820:	b183      	cbz	r3, 82844 <udc_process_setup+0x2b4>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82822:	4f96      	ldr	r7, [pc, #600]	; (82a7c <udc_process_setup+0x4ec>)
   82824:	683b      	ldr	r3, [r7, #0]
   82826:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82828:	791b      	ldrb	r3, [r3, #4]
   8282a:	b15b      	cbz	r3, 82844 <udc_process_setup+0x2b4>
   8282c:	2500      	movs	r5, #0
   8282e:	4628      	mov	r0, r5
   82830:	f8df 824c 	ldr.w	r8, [pc, #588]	; 82a80 <udc_process_setup+0x4f0>
			udc_iface_disable(iface_num);
   82834:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82836:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   82838:	3501      	adds	r5, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8283a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8283c:	b2e8      	uxtb	r0, r5
   8283e:	791b      	ldrb	r3, [r3, #4]
   82840:	4283      	cmp	r3, r0
   82842:	d8f7      	bhi.n	82834 <udc_process_setup+0x2a4>
	udc_device_status =
   82844:	2200      	movs	r2, #0
   82846:	4b8f      	ldr	r3, [pc, #572]	; (82a84 <udc_process_setup+0x4f4>)
   82848:	801a      	strh	r2, [r3, #0]
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   8284a:	78a3      	ldrb	r3, [r4, #2]
   8284c:	7033      	strb	r3, [r6, #0]
	if (udc_num_configuration == 0) {
   8284e:	2b00      	cmp	r3, #0
   82850:	f43f af5e 	beq.w	82710 <udc_process_setup+0x180>
	if (udd_is_high_speed()) {
   82854:	47c8      	blx	r9
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   82856:	7832      	ldrb	r2, [r6, #0]
	if (udd_is_high_speed()) {
   82858:	2800      	cmp	r0, #0
   8285a:	f000 8133 	beq.w	82ac4 <udc_process_setup+0x534>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8285e:	f8da 3010 	ldr.w	r3, [sl, #16]
   82862:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   82866:	3a01      	subs	r2, #1
   82868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8286c:	681a      	ldr	r2, [r3, #0]
   8286e:	4f83      	ldr	r7, [pc, #524]	; (82a7c <udc_process_setup+0x4ec>)
   82870:	7912      	ldrb	r2, [r2, #4]
   82872:	603b      	str	r3, [r7, #0]
   82874:	2a00      	cmp	r2, #0
   82876:	f43f af4b 	beq.w	82710 <udc_process_setup+0x180>
   8287a:	2500      	movs	r5, #0
   8287c:	4e82      	ldr	r6, [pc, #520]	; (82a88 <udc_process_setup+0x4f8>)
   8287e:	462b      	mov	r3, r5
   82880:	e005      	b.n	8288e <udc_process_setup+0x2fe>
   82882:	683a      	ldr	r2, [r7, #0]
   82884:	6812      	ldr	r2, [r2, #0]
   82886:	7912      	ldrb	r2, [r2, #4]
   82888:	429a      	cmp	r2, r3
   8288a:	f67f af41 	bls.w	82710 <udc_process_setup+0x180>
		if (!udc_iface_enable(iface_num, 0)) {
   8288e:	4618      	mov	r0, r3
   82890:	2100      	movs	r1, #0
   82892:	47b0      	blx	r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82894:	3501      	adds	r5, #1
   82896:	b2eb      	uxtb	r3, r5
		if (!udc_iface_enable(iface_num, 0)) {
   82898:	2800      	cmp	r0, #0
   8289a:	d1f2      	bne.n	82882 <udc_process_setup+0x2f2>
   8289c:	e781      	b.n	827a2 <udc_process_setup+0x212>
	if (udd_g_ctrlreq.req.wLength) {
   8289e:	88e2      	ldrh	r2, [r4, #6]
   828a0:	2a00      	cmp	r2, #0
   828a2:	f47f aeca 	bne.w	8263a <udc_process_setup+0xaa>
	udd_g_ctrlreq.callback = udc_valid_address;
   828a6:	4b79      	ldr	r3, [pc, #484]	; (82a8c <udc_process_setup+0x4fc>)
			return true;
   828a8:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
   828aa:	6123      	str	r3, [r4, #16]
	return true;
   828ac:	e68d      	b.n	825ca <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   828ae:	7862      	ldrb	r2, [r4, #1]
   828b0:	2a06      	cmp	r2, #6
   828b2:	d040      	beq.n	82936 <udc_process_setup+0x3a6>
   828b4:	2a08      	cmp	r2, #8
   828b6:	d036      	beq.n	82926 <udc_process_setup+0x396>
   828b8:	2a00      	cmp	r2, #0
   828ba:	f47f aebe 	bne.w	8263a <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   828be:	2d02      	cmp	r5, #2
   828c0:	f47f aebb 	bne.w	8263a <udc_process_setup+0xaa>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   828c4:	4629      	mov	r1, r5
   828c6:	486f      	ldr	r0, [pc, #444]	; (82a84 <udc_process_setup+0x4f4>)
   828c8:	4b71      	ldr	r3, [pc, #452]	; (82a90 <udc_process_setup+0x500>)
   828ca:	4798      	blx	r3
			return true;
   828cc:	2501      	movs	r5, #1
   828ce:	e67c      	b.n	825ca <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   828d0:	7862      	ldrb	r2, [r4, #1]
   828d2:	2a0b      	cmp	r2, #11
   828d4:	f47f aeb1 	bne.w	8263a <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength) {
   828d8:	88e2      	ldrh	r2, [r4, #6]
   828da:	2a00      	cmp	r2, #0
   828dc:	f47f aead 	bne.w	8263a <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   828e0:	4a65      	ldr	r2, [pc, #404]	; (82a78 <udc_process_setup+0x4e8>)
   828e2:	7812      	ldrb	r2, [r2, #0]
   828e4:	2a00      	cmp	r2, #0
   828e6:	f43f aea8 	beq.w	8263a <udc_process_setup+0xaa>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   828ea:	7925      	ldrb	r5, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
   828ec:	4b64      	ldr	r3, [pc, #400]	; (82a80 <udc_process_setup+0x4f0>)
   828ee:	4628      	mov	r0, r5
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   828f0:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
   828f2:	4798      	blx	r3
   828f4:	2800      	cmp	r0, #0
   828f6:	f43f af54 	beq.w	827a2 <udc_process_setup+0x212>
	return udc_iface_enable(iface_num, setting_num);
   828fa:	4628      	mov	r0, r5
   828fc:	4b62      	ldr	r3, [pc, #392]	; (82a88 <udc_process_setup+0x4f8>)
   828fe:	b2f1      	uxtb	r1, r6
   82900:	4798      	blx	r3
		if (udc_reqstd()) {
   82902:	2800      	cmp	r0, #0
   82904:	f47f af04 	bne.w	82710 <udc_process_setup+0x180>
   82908:	e74b      	b.n	827a2 <udc_process_setup+0x212>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8290a:	88e2      	ldrh	r2, [r4, #6]
   8290c:	8861      	ldrh	r1, [r4, #2]
   8290e:	430a      	orrs	r2, r1
   82910:	b292      	uxth	r2, r2
   82912:	2a00      	cmp	r2, #0
   82914:	f47f af0b 	bne.w	8272e <udc_process_setup+0x19e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   82918:	7920      	ldrb	r0, [r4, #4]
   8291a:	4b5e      	ldr	r3, [pc, #376]	; (82a94 <udc_process_setup+0x504>)
   8291c:	4798      	blx	r3
		if (udc_reqstd()) {
   8291e:	2800      	cmp	r0, #0
   82920:	f47f aef6 	bne.w	82710 <udc_process_setup+0x180>
   82924:	e73d      	b.n	827a2 <udc_process_setup+0x212>
	if (udd_g_ctrlreq.req.wLength != 1) {
   82926:	2d01      	cmp	r5, #1
   82928:	f47f ae87 	bne.w	8263a <udc_process_setup+0xaa>
	udd_set_setup_payload(&udc_num_configuration,1);
   8292c:	4629      	mov	r1, r5
   8292e:	4852      	ldr	r0, [pc, #328]	; (82a78 <udc_process_setup+0x4e8>)
   82930:	4b57      	ldr	r3, [pc, #348]	; (82a90 <udc_process_setup+0x500>)
   82932:	4798      	blx	r3
	return true;
   82934:	e649      	b.n	825ca <udc_process_setup+0x3a>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   82936:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82938:	0a0a      	lsrs	r2, r1, #8
   8293a:	3a01      	subs	r2, #1
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8293c:	b2cd      	uxtb	r5, r1
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8293e:	2a0e      	cmp	r2, #14
   82940:	f63f ae3a 	bhi.w	825b8 <udc_process_setup+0x28>
   82944:	a101      	add	r1, pc, #4	; (adr r1, 8294c <udc_process_setup+0x3bc>)
   82946:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   8294a:	bf00      	nop
   8294c:	00082a01 	.word	0x00082a01
   82950:	000829d7 	.word	0x000829d7
   82954:	00082a15 	.word	0x00082a15
   82958:	000825b9 	.word	0x000825b9
   8295c:	000825b9 	.word	0x000825b9
   82960:	000829cb 	.word	0x000829cb
   82964:	000829a1 	.word	0x000829a1
   82968:	000825b9 	.word	0x000825b9
   8296c:	000825b9 	.word	0x000825b9
   82970:	000825b9 	.word	0x000825b9
   82974:	000825b9 	.word	0x000825b9
   82978:	000825b9 	.word	0x000825b9
   8297c:	000825b9 	.word	0x000825b9
   82980:	000825b9 	.word	0x000825b9
   82984:	00082989 	.word	0x00082989
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   82988:	2121      	movs	r1, #33	; 0x21
   8298a:	4843      	ldr	r0, [pc, #268]	; (82a98 <udc_process_setup+0x508>)
   8298c:	4b40      	ldr	r3, [pc, #256]	; (82a90 <udc_process_setup+0x500>)
   8298e:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   82990:	88e3      	ldrh	r3, [r4, #6]
   82992:	89a2      	ldrh	r2, [r4, #12]
   82994:	429a      	cmp	r2, r3
   82996:	f67f aebb 	bls.w	82710 <udc_process_setup+0x180>
			return true;
   8299a:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8299c:	81a3      	strh	r3, [r4, #12]
   8299e:	e614      	b.n	825ca <udc_process_setup+0x3a>
		if (!udd_is_high_speed()) {
   829a0:	4b33      	ldr	r3, [pc, #204]	; (82a70 <udc_process_setup+0x4e0>)
   829a2:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   829a4:	4b33      	ldr	r3, [pc, #204]	; (82a74 <udc_process_setup+0x4e4>)
		if (!udd_is_high_speed()) {
   829a6:	2800      	cmp	r0, #0
   829a8:	f040 8094 	bne.w	82ad4 <udc_process_setup+0x544>
			if (conf_num >= udc_config.confdev_hs->
   829ac:	689a      	ldr	r2, [r3, #8]
   829ae:	7c52      	ldrb	r2, [r2, #17]
   829b0:	42aa      	cmp	r2, r5
   829b2:	f67f aef6 	bls.w	827a2 <udc_process_setup+0x212>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   829b6:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   829b8:	4b35      	ldr	r3, [pc, #212]	; (82a90 <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   829ba:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   829be:	8841      	ldrh	r1, [r0, #2]
   829c0:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   829c2:	2207      	movs	r2, #7
   829c4:	68a3      	ldr	r3, [r4, #8]
   829c6:	705a      	strb	r2, [r3, #1]
		break;
   829c8:	e7e2      	b.n	82990 <udc_process_setup+0x400>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   829ca:	4a2a      	ldr	r2, [pc, #168]	; (82a74 <udc_process_setup+0x4e4>)
   829cc:	4b30      	ldr	r3, [pc, #192]	; (82a90 <udc_process_setup+0x500>)
   829ce:	68d0      	ldr	r0, [r2, #12]
   829d0:	7801      	ldrb	r1, [r0, #0]
   829d2:	4798      	blx	r3
		break;
   829d4:	e7dc      	b.n	82990 <udc_process_setup+0x400>
		if (udd_is_high_speed()) {
   829d6:	4b26      	ldr	r3, [pc, #152]	; (82a70 <udc_process_setup+0x4e0>)
   829d8:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   829da:	4b26      	ldr	r3, [pc, #152]	; (82a74 <udc_process_setup+0x4e4>)
		if (udd_is_high_speed()) {
   829dc:	2800      	cmp	r0, #0
   829de:	f000 8090 	beq.w	82b02 <udc_process_setup+0x572>
			if (conf_num >= udc_config.confdev_hs->
   829e2:	689a      	ldr	r2, [r3, #8]
   829e4:	7c52      	ldrb	r2, [r2, #17]
   829e6:	42aa      	cmp	r2, r5
   829e8:	f67f aedb 	bls.w	827a2 <udc_process_setup+0x212>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   829ec:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   829ee:	4b28      	ldr	r3, [pc, #160]	; (82a90 <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   829f0:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   829f4:	8841      	ldrh	r1, [r0, #2]
   829f6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   829f8:	2202      	movs	r2, #2
   829fa:	68a3      	ldr	r3, [r4, #8]
   829fc:	705a      	strb	r2, [r3, #1]
		break;
   829fe:	e7c7      	b.n	82990 <udc_process_setup+0x400>
		if (!udd_is_high_speed()) {
   82a00:	4b1b      	ldr	r3, [pc, #108]	; (82a70 <udc_process_setup+0x4e0>)
   82a02:	4798      	blx	r3
   82a04:	2800      	cmp	r0, #0
   82a06:	d171      	bne.n	82aec <udc_process_setup+0x55c>
				(uint8_t *) udc_config.confdev_hs,
   82a08:	4a1a      	ldr	r2, [pc, #104]	; (82a74 <udc_process_setup+0x4e4>)
			udd_set_setup_payload(
   82a0a:	4b21      	ldr	r3, [pc, #132]	; (82a90 <udc_process_setup+0x500>)
				(uint8_t *) udc_config.confdev_hs,
   82a0c:	6890      	ldr	r0, [r2, #8]
			udd_set_setup_payload(
   82a0e:	7801      	ldrb	r1, [r0, #0]
   82a10:	4798      	blx	r3
   82a12:	e7bd      	b.n	82990 <udc_process_setup+0x400>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   82a14:	2d03      	cmp	r5, #3
   82a16:	f63f adcf 	bhi.w	825b8 <udc_process_setup+0x28>
   82a1a:	e8df f005 	tbb	[pc, r5]
   82a1e:	171a      	.short	0x171a
   82a20:	0214      	.short	0x0214
   82a22:	2120      	movs	r1, #32
   82a24:	4b1d      	ldr	r3, [pc, #116]	; (82a9c <udc_process_setup+0x50c>)
		for(i = 0; i < str_length; i++) {
   82a26:	4e1e      	ldr	r6, [pc, #120]	; (82aa0 <udc_process_setup+0x510>)
   82a28:	185d      	adds	r5, r3, r1
   82a2a:	4632      	mov	r2, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   82a2c:	f813 0b01 	ldrb.w	r0, [r3], #1
		for(i = 0; i < str_length; i++) {
   82a30:	42ab      	cmp	r3, r5
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   82a32:	f822 0f02 	strh.w	r0, [r2, #2]!
		for(i = 0; i < str_length; i++) {
   82a36:	d1f9      	bne.n	82a2c <udc_process_setup+0x49c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   82a38:	0049      	lsls	r1, r1, #1
   82a3a:	3102      	adds	r1, #2
		udd_set_setup_payload(
   82a3c:	4818      	ldr	r0, [pc, #96]	; (82aa0 <udc_process_setup+0x510>)
   82a3e:	4b14      	ldr	r3, [pc, #80]	; (82a90 <udc_process_setup+0x500>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   82a40:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
   82a42:	4798      	blx	r3
   82a44:	e7a4      	b.n	82990 <udc_process_setup+0x400>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   82a46:	2113      	movs	r1, #19
		str = udc_string_product_name;
   82a48:	4b16      	ldr	r3, [pc, #88]	; (82aa4 <udc_process_setup+0x514>)
   82a4a:	e7ec      	b.n	82a26 <udc_process_setup+0x496>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   82a4c:	2115      	movs	r1, #21
		str = udc_string_manufacturer_name;
   82a4e:	4b16      	ldr	r3, [pc, #88]	; (82aa8 <udc_process_setup+0x518>)
   82a50:	e7e9      	b.n	82a26 <udc_process_setup+0x496>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   82a52:	2104      	movs	r1, #4
   82a54:	4815      	ldr	r0, [pc, #84]	; (82aac <udc_process_setup+0x51c>)
   82a56:	4b0e      	ldr	r3, [pc, #56]	; (82a90 <udc_process_setup+0x500>)
   82a58:	4798      	blx	r3
	if (str_length) {
   82a5a:	e799      	b.n	82990 <udc_process_setup+0x400>
				udc_config.confdev_lsfs->bNumConfigurations) {
   82a5c:	f8da 2000 	ldr.w	r2, [sl]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82a60:	7c52      	ldrb	r2, [r2, #17]
   82a62:	429a      	cmp	r2, r3
   82a64:	f4bf aeda 	bcs.w	8281c <udc_process_setup+0x28c>
   82a68:	e69b      	b.n	827a2 <udc_process_setup+0x212>
   82a6a:	bf00      	nop
   82a6c:	00083b01 	.word	0x00083b01
   82a70:	00083ac9 	.word	0x00083ac9
   82a74:	20000334 	.word	0x20000334
   82a78:	20001847 	.word	0x20001847
   82a7c:	20001848 	.word	0x20001848
   82a80:	000823f9 	.word	0x000823f9
   82a84:	20001842 	.word	0x20001842
   82a88:	00082485 	.word	0x00082485
   82a8c:	00082385 	.word	0x00082385
   82a90:	00083b21 	.word	0x00083b21
   82a94:	00083c59 	.word	0x00083c59
   82a98:	200001e0 	.word	0x200001e0
   82a9c:	20000194 	.word	0x20000194
   82aa0:	200002a4 	.word	0x200002a4
   82aa4:	20000304 	.word	0x20000304
   82aa8:	200002ec 	.word	0x200002ec
   82aac:	200002e8 	.word	0x200002e8
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   82ab0:	7920      	ldrb	r0, [r4, #4]
   82ab2:	4b32      	ldr	r3, [pc, #200]	; (82b7c <udc_process_setup+0x5ec>)
   82ab4:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   82ab6:	7920      	ldrb	r0, [r4, #4]
   82ab8:	4b31      	ldr	r3, [pc, #196]	; (82b80 <udc_process_setup+0x5f0>)
   82aba:	4798      	blx	r3
		if (udc_reqstd()) {
   82abc:	2800      	cmp	r0, #0
   82abe:	f47f ae27 	bne.w	82710 <udc_process_setup+0x180>
   82ac2:	e66e      	b.n	827a2 <udc_process_setup+0x212>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   82ac4:	f8da 3004 	ldr.w	r3, [sl, #4]
   82ac8:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   82acc:	3a01      	subs	r2, #1
   82ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   82ad2:	e6cb      	b.n	8286c <udc_process_setup+0x2dc>
			if (conf_num >= udc_config.confdev_lsfs->
   82ad4:	681a      	ldr	r2, [r3, #0]
   82ad6:	7c52      	ldrb	r2, [r2, #17]
   82ad8:	42aa      	cmp	r2, r5
   82ada:	f67f ae62 	bls.w	827a2 <udc_process_setup+0x212>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82ade:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   82ae0:	4b28      	ldr	r3, [pc, #160]	; (82b84 <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82ae2:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   82ae6:	8841      	ldrh	r1, [r0, #2]
   82ae8:	4798      	blx	r3
   82aea:	e76a      	b.n	829c2 <udc_process_setup+0x432>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82aec:	2010      	movs	r0, #16
   82aee:	2102      	movs	r1, #2
   82af0:	4b25      	ldr	r3, [pc, #148]	; (82b88 <udc_process_setup+0x5f8>)
			udd_set_setup_payload(
   82af2:	4d24      	ldr	r5, [pc, #144]	; (82b84 <udc_process_setup+0x5f4>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82af4:	681a      	ldr	r2, [r3, #0]
   82af6:	7090      	strb	r0, [r2, #2]
   82af8:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   82afa:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   82afc:	7801      	ldrb	r1, [r0, #0]
   82afe:	47a8      	blx	r5
   82b00:	e746      	b.n	82990 <udc_process_setup+0x400>
			if (conf_num >= udc_config.confdev_lsfs->
   82b02:	681a      	ldr	r2, [r3, #0]
   82b04:	7c52      	ldrb	r2, [r2, #17]
   82b06:	42aa      	cmp	r2, r5
   82b08:	f67f ae4b 	bls.w	827a2 <udc_process_setup+0x212>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82b0c:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   82b0e:	4b1d      	ldr	r3, [pc, #116]	; (82b84 <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82b10:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   82b14:	8841      	ldrh	r1, [r0, #2]
   82b16:	4798      	blx	r3
   82b18:	e76e      	b.n	829f8 <udc_process_setup+0x468>
	if (udc_num_configuration) {
   82b1a:	4e1c      	ldr	r6, [pc, #112]	; (82b8c <udc_process_setup+0x5fc>)
   82b1c:	7832      	ldrb	r2, [r6, #0]
   82b1e:	b192      	cbz	r2, 82b46 <udc_process_setup+0x5b6>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82b20:	4f1b      	ldr	r7, [pc, #108]	; (82b90 <udc_process_setup+0x600>)
   82b22:	683a      	ldr	r2, [r7, #0]
   82b24:	6812      	ldr	r2, [r2, #0]
		for (iface_num = 0;
   82b26:	7912      	ldrb	r2, [r2, #4]
   82b28:	b16a      	cbz	r2, 82b46 <udc_process_setup+0x5b6>
   82b2a:	4699      	mov	r9, r3
   82b2c:	4618      	mov	r0, r3
   82b2e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 82b94 <udc_process_setup+0x604>
			udc_iface_disable(iface_num);
   82b32:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82b34:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   82b36:	f109 0901 	add.w	r9, r9, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82b3a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82b3c:	fa5f f089 	uxtb.w	r0, r9
   82b40:	791b      	ldrb	r3, [r3, #4]
   82b42:	4283      	cmp	r3, r0
   82b44:	d8f5      	bhi.n	82b32 <udc_process_setup+0x5a2>
	udc_num_configuration = 0;
   82b46:	2200      	movs	r2, #0
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   82b48:	88a3      	ldrh	r3, [r4, #4]
	udc_device_status =
   82b4a:	4913      	ldr	r1, [pc, #76]	; (82b98 <udc_process_setup+0x608>)
   82b4c:	0a1b      	lsrs	r3, r3, #8
   82b4e:	3b01      	subs	r3, #1
   82b50:	800a      	strh	r2, [r1, #0]
	udc_num_configuration = 0;
   82b52:	7032      	strb	r2, [r6, #0]
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   82b54:	2b03      	cmp	r3, #3
   82b56:	f63f ae24 	bhi.w	827a2 <udc_process_setup+0x212>
   82b5a:	e8df f003 	tbb	[pc, r3]
   82b5e:	080b      	.short	0x080b
   82b60:	0205      	.short	0x0205
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   82b62:	4b0e      	ldr	r3, [pc, #56]	; (82b9c <udc_process_setup+0x60c>)
   82b64:	6123      	str	r3, [r4, #16]
			return true;
   82b66:	e530      	b.n	825ca <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   82b68:	4b0d      	ldr	r3, [pc, #52]	; (82ba0 <udc_process_setup+0x610>)
   82b6a:	6123      	str	r3, [r4, #16]
			return true;
   82b6c:	e52d      	b.n	825ca <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   82b6e:	4b0d      	ldr	r3, [pc, #52]	; (82ba4 <udc_process_setup+0x614>)
   82b70:	6123      	str	r3, [r4, #16]
			return true;
   82b72:	e52a      	b.n	825ca <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_j;
   82b74:	4b0c      	ldr	r3, [pc, #48]	; (82ba8 <udc_process_setup+0x618>)
   82b76:	6123      	str	r3, [r4, #16]
			return true;
   82b78:	e527      	b.n	825ca <udc_process_setup+0x3a>
   82b7a:	bf00      	nop
   82b7c:	00084029 	.word	0x00084029
   82b80:	00083bb1 	.word	0x00083bb1
   82b84:	00083b21 	.word	0x00083b21
   82b88:	20000334 	.word	0x20000334
   82b8c:	20001847 	.word	0x20001847
   82b90:	20001848 	.word	0x20001848
   82b94:	000823f9 	.word	0x000823f9
   82b98:	20001842 	.word	0x20001842
   82b9c:	000840f5 	.word	0x000840f5
   82ba0:	000840dd 	.word	0x000840dd
   82ba4:	000840b9 	.word	0x000840b9
   82ba8:	00084095 	.word	0x00084095

00082bac <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82bae:	2604      	movs	r6, #4
{
   82bb0:	b087      	sub	sp, #28
   82bb2:	4604      	mov	r4, r0
   82bb4:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82bb6:	220f      	movs	r2, #15
   82bb8:	210e      	movs	r1, #14
   82bba:	480c      	ldr	r0, [pc, #48]	; (82bec <flash_read_unique_id+0x40>)
   82bbc:	4f0c      	ldr	r7, [pc, #48]	; (82bf0 <flash_read_unique_id+0x44>)
   82bbe:	ab02      	add	r3, sp, #8
   82bc0:	9600      	str	r6, [sp, #0]
   82bc2:	47b8      	blx	r7
   82bc4:	b970      	cbnz	r0, 82be4 <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82bc6:	2d04      	cmp	r5, #4
   82bc8:	4626      	mov	r6, r4
   82bca:	462a      	mov	r2, r5
   82bcc:	4604      	mov	r4, r0
   82bce:	bf28      	it	cs
   82bd0:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82bd2:	b125      	cbz	r5, 82bde <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
   82bd4:	4630      	mov	r0, r6
   82bd6:	4b07      	ldr	r3, [pc, #28]	; (82bf4 <flash_read_unique_id+0x48>)
   82bd8:	a902      	add	r1, sp, #8
   82bda:	0092      	lsls	r2, r2, #2
   82bdc:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
   82bde:	4620      	mov	r0, r4
   82be0:	b007      	add	sp, #28
   82be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
   82be4:	2410      	movs	r4, #16
}
   82be6:	4620      	mov	r0, r4
   82be8:	b007      	add	sp, #28
   82bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82bec:	400e0800 	.word	0x400e0800
   82bf0:	20000001 	.word	0x20000001
   82bf4:	00084f09 	.word	0x00084f09

00082bf8 <usart_init_sync_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_sync_master(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82bfc:	f04f 0c24 	mov.w	ip, #36	; 0x24
	p_usart->US_MR = 0;
   82c00:	2500      	movs	r5, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82c02:	f04f 0e88 	mov.w	lr, #136	; 0x88
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   82c06:	f44f 7780 	mov.w	r7, #256	; 0x100
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   82c0a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
	p_usart->US_CR = US_CR_DTRDIS;
   82c0e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82c12:	f8df 8064 	ldr.w	r8, [pc, #100]	; 82c78 <usart_init_sync_master+0x80>
   82c16:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   82c1a:	6045      	str	r5, [r0, #4]
	p_usart->US_RTOR = 0;
   82c1c:	6245      	str	r5, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82c1e:	6285      	str	r5, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82c20:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82c24:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   82c28:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   82c2a:	6006      	str	r6, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   82c2c:	6004      	str	r4, [r0, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   82c2e:	b1f9      	cbz	r1, 82c70 <usart_init_sync_master+0x78>
   82c30:	680c      	ldr	r4, [r1, #0]
   82c32:	4603      	mov	r3, r0
	cd = (ul_mck + baudrate / 2) / baudrate;
   82c34:	eb02 0254 	add.w	r2, r2, r4, lsr #1
   82c38:	fbb2 f2f4 	udiv	r2, r2, r4
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82c3c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   82c40:	1e54      	subs	r4, r2, #1
   82c42:	4284      	cmp	r4, r0
   82c44:	d814      	bhi.n	82c70 <usart_init_sync_master+0x78>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   82c46:	621a      	str	r2, [r3, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   82c48:	685a      	ldr	r2, [r3, #4]
	return 0;
   82c4a:	4628      	mov	r0, r5
			US_MR_USCLKS_MCK | US_MR_SYNC;
   82c4c:	f422 7298 	bic.w	r2, r2, #304	; 0x130
   82c50:	433a      	orrs	r2, r7
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   82c52:	605a      	str	r2, [r3, #4]
	p_usart->US_MR |= ul_reg_val;
   82c54:	685c      	ldr	r4, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82c56:	e9d1 2501 	ldrd	r2, r5, [r1, #4]
   82c5a:	432a      	orrs	r2, r5
	p_usart->US_MR |= ul_reg_val;
   82c5c:	4322      	orrs	r2, r4
   82c5e:	690c      	ldr	r4, [r1, #16]
   82c60:	68c9      	ldr	r1, [r1, #12]
   82c62:	4322      	orrs	r2, r4
   82c64:	430a      	orrs	r2, r1
   82c66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   82c6a:	605a      	str	r2, [r3, #4]
}
   82c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   82c70:	2001      	movs	r0, #1
}
   82c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c76:	bf00      	nop
   82c78:	55534100 	.word	0x55534100

00082c7c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   82c7c:	2340      	movs	r3, #64	; 0x40
   82c7e:	6003      	str	r3, [r0, #0]
}
   82c80:	4770      	bx	lr
   82c82:	bf00      	nop

00082c84 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   82c84:	2380      	movs	r3, #128	; 0x80
   82c86:	6003      	str	r3, [r0, #0]
}
   82c88:	4770      	bx	lr
   82c8a:	bf00      	nop

00082c8c <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   82c8c:	2310      	movs	r3, #16
   82c8e:	6003      	str	r3, [r0, #0]
}
   82c90:	4770      	bx	lr
   82c92:	bf00      	nop

00082c94 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   82c94:	2320      	movs	r3, #32
   82c96:	6003      	str	r3, [r0, #0]
}
   82c98:	4770      	bx	lr
   82c9a:	bf00      	nop

00082c9c <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   82c9c:	6940      	ldr	r0, [r0, #20]
}
   82c9e:	f3c0 2040 	ubfx	r0, r0, #9, #1
   82ca2:	4770      	bx	lr

00082ca4 <usart_write>:
{
   82ca4:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82ca6:	6942      	ldr	r2, [r0, #20]
   82ca8:	0792      	lsls	r2, r2, #30
	p_usart->US_THR = US_THR_TXCHR(c);
   82caa:	bf43      	ittte	mi
   82cac:	f3c1 0108 	ubfxmi	r1, r1, #0, #9
	return 0;
   82cb0:	2000      	movmi	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
   82cb2:	61d9      	strmi	r1, [r3, #28]
		return 1;
   82cb4:	2001      	movpl	r0, #1
}
   82cb6:	4770      	bx	lr

00082cb8 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82cb8:	6943      	ldr	r3, [r0, #20]
   82cba:	079b      	lsls	r3, r3, #30
   82cbc:	d5fc      	bpl.n	82cb8 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   82cbe:	f3c1 0108 	ubfx	r1, r1, #0, #9
   82cc2:	61c1      	str	r1, [r0, #28]
}
   82cc4:	2000      	movs	r0, #0
   82cc6:	4770      	bx	lr

00082cc8 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82cc8:	6943      	ldr	r3, [r0, #20]
   82cca:	07db      	lsls	r3, r3, #31
   82ccc:	d505      	bpl.n	82cda <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82cce:	6983      	ldr	r3, [r0, #24]
	return 0;
   82cd0:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   82cd6:	600b      	str	r3, [r1, #0]
	return 0;
   82cd8:	4770      	bx	lr
		return 1;
   82cda:	2001      	movs	r0, #1
}
   82cdc:	4770      	bx	lr
   82cde:	bf00      	nop

00082ce0 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82ce0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82ce8:	670a      	str	r2, [r1, #112]	; 0x70
}
   82cea:	4770      	bx	lr

00082cec <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82cec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82cf0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82cf4:	674a      	str	r2, [r1, #116]	; 0x74
}
   82cf6:	4770      	bx	lr

00082cf8 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82cf8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82cfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82d00:	678a      	str	r2, [r1, #120]	; 0x78
}
   82d02:	4770      	bx	lr

00082d04 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82d04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82d08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82d0c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   82d10:	4770      	bx	lr
   82d12:	bf00      	nop

00082d14 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82d16:	4b12      	ldr	r3, [pc, #72]	; (82d60 <pio_handler_process+0x4c>)
{
   82d18:	4604      	mov	r4, r0
   82d1a:	460e      	mov	r6, r1
	status = pio_get_interrupt_status(p_pio);
   82d1c:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   82d1e:	4b11      	ldr	r3, [pc, #68]	; (82d64 <pio_handler_process+0x50>)
	status = pio_get_interrupt_status(p_pio);
   82d20:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82d22:	4620      	mov	r0, r4
   82d24:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82d26:	4005      	ands	r5, r0
   82d28:	d019      	beq.n	82d5e <pio_handler_process+0x4a>
   82d2a:	4c0f      	ldr	r4, [pc, #60]	; (82d68 <pio_handler_process+0x54>)
   82d2c:	f104 0760 	add.w	r7, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82d30:	6823      	ldr	r3, [r4, #0]
   82d32:	42b3      	cmp	r3, r6
   82d34:	d005      	beq.n	82d42 <pio_handler_process+0x2e>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82d36:	42bc      	cmp	r4, r7
   82d38:	d011      	beq.n	82d5e <pio_handler_process+0x4a>
			if (gs_interrupt_sources[i].id == ul_id) {
   82d3a:	6923      	ldr	r3, [r4, #16]
		while (status != 0) {
   82d3c:	3410      	adds	r4, #16
			if (gs_interrupt_sources[i].id == ul_id) {
   82d3e:	42b3      	cmp	r3, r6
   82d40:	d1f9      	bne.n	82d36 <pio_handler_process+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82d42:	6861      	ldr	r1, [r4, #4]
   82d44:	4229      	tst	r1, r5
   82d46:	d0f6      	beq.n	82d36 <pio_handler_process+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82d48:	68e3      	ldr	r3, [r4, #12]
   82d4a:	4630      	mov	r0, r6
   82d4c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82d4e:	6863      	ldr	r3, [r4, #4]
			if (i >= MAX_INTERRUPT_SOURCES) {
   82d50:	42bc      	cmp	r4, r7
					status &= ~(gs_interrupt_sources[i].mask);
   82d52:	ea25 0503 	bic.w	r5, r5, r3
			if (i >= MAX_INTERRUPT_SOURCES) {
   82d56:	d002      	beq.n	82d5e <pio_handler_process+0x4a>
		while (status != 0) {
   82d58:	3410      	adds	r4, #16
   82d5a:	2d00      	cmp	r5, #0
   82d5c:	d1e8      	bne.n	82d30 <pio_handler_process+0x1c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d60:	00084721 	.word	0x00084721
   82d64:	00084725 	.word	0x00084725
   82d68:	20001850 	.word	0x20001850

00082d6c <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
   82d6c:	210a      	movs	r1, #10
   82d6e:	4801      	ldr	r0, [pc, #4]	; (82d74 <PIOA_Handler+0x8>)
   82d70:	4b01      	ldr	r3, [pc, #4]	; (82d78 <PIOA_Handler+0xc>)
   82d72:	4718      	bx	r3
   82d74:	400e0c00 	.word	0x400e0c00
   82d78:	00082d15 	.word	0x00082d15

00082d7c <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
   82d7c:	210b      	movs	r1, #11
   82d7e:	4801      	ldr	r0, [pc, #4]	; (82d84 <PIOB_Handler+0x8>)
   82d80:	4b01      	ldr	r3, [pc, #4]	; (82d88 <PIOB_Handler+0xc>)
   82d82:	4718      	bx	r3
   82d84:	400e0e00 	.word	0x400e0e00
   82d88:	00082d15 	.word	0x00082d15

00082d8c <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
   82d8c:	210c      	movs	r1, #12
   82d8e:	4801      	ldr	r0, [pc, #4]	; (82d94 <PIOC_Handler+0x8>)
   82d90:	4b01      	ldr	r3, [pc, #4]	; (82d98 <PIOC_Handler+0xc>)
   82d92:	4718      	bx	r3
   82d94:	400e1000 	.word	0x400e1000
   82d98:	00082d15 	.word	0x00082d15

00082d9c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   82d9c:	f890 c014 	ldrb.w	ip, [r0, #20]
{
   82da0:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   82da2:	f01c 0f01 	tst.w	ip, #1
   82da6:	d016      	beq.n	82dd6 <udd_ep_finish_job+0x3a>
{
   82da8:	b430      	push	{r4, r5}
		return; // No on-going job
	}
	ptr_job->busy = false;
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   82daa:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
   82dac:	f36f 0c00 	bfc	ip, #0, #1
   82db0:	f880 c014 	strb.w	ip, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   82db4:	b16c      	cbz	r4, 82dd2 <udd_ep_finish_job+0x36>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   82db6:	4d08      	ldr	r5, [pc, #32]	; (82dd8 <udd_ep_finish_job+0x3c>)
   82db8:	4608      	mov	r0, r1
   82dba:	f102 0108 	add.w	r1, r2, #8
   82dbe:	0149      	lsls	r1, r1, #5
   82dc0:	5869      	ldr	r1, [r5, r1]
   82dc2:	0709      	lsls	r1, r1, #28
		ep_num |= USB_EP_DIR_IN;
   82dc4:	bf48      	it	mi
   82dc6:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82dca:	6899      	ldr	r1, [r3, #8]
   82dcc:	4623      	mov	r3, r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   82dce:	bc30      	pop	{r4, r5}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82dd0:	4718      	bx	r3
}
   82dd2:	bc30      	pop	{r4, r5}
   82dd4:	4770      	bx	lr
   82dd6:	4770      	bx	lr
   82dd8:	400a4000 	.word	0x400a4000

00082ddc <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   82ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82de0:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   82de2:	4c66      	ldr	r4, [pc, #408]	; (82f7c <udd_ep_trans_done+0x1a0>)
   82de4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   82de8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   82dec:	f891 c014 	ldrb.w	ip, [r1, #20]
   82df0:	f01c 0f01 	tst.w	ip, #1
   82df4:	d039      	beq.n	82e6a <udd_ep_trans_done+0x8e>
   82df6:	4602      	mov	r2, r0
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   82df8:	e9d1 5002 	ldrd	r5, r0, [r1, #8]
   82dfc:	42a8      	cmp	r0, r5
   82dfe:	ea4f 0643 	mov.w	r6, r3, lsl #1
   82e02:	d034      	beq.n	82e6e <udd_ep_trans_done+0x92>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   82e04:	1a2d      	subs	r5, r5, r0

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   82e06:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   82e0a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
   82e0e:	d847      	bhi.n	82ea0 <udd_ep_trans_done+0xc4>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   82e10:	f10c 2e40 	add.w	lr, ip, #1073758208	; 0x40004000
   82e14:	f50e 2e20 	add.w	lr, lr, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   82e18:	f8de 8100 	ldr.w	r8, [lr, #256]	; 0x100
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   82e1c:	042f      	lsls	r7, r5, #16
		if (Is_udd_endpoint_in(ep)) {
   82e1e:	f018 0f08 	tst.w	r8, #8
   82e22:	d072      	beq.n	82f0a <udd_ep_trans_done+0x12e>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   82e24:	f8de 8100 	ldr.w	r8, [lr, #256]	; 0x100
   82e28:	f04f 0e08 	mov.w	lr, #8
   82e2c:	f008 0807 	and.w	r8, r8, #7
   82e30:	fa0e fe08 	lsl.w	lr, lr, r8
   82e34:	f10e 3eff 	add.w	lr, lr, #4294967295
   82e38:	ea1e 0f05 	tst.w	lr, r5
   82e3c:	f000 809a 	beq.w	82f74 <udd_ep_trans_done+0x198>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   82e40:	f891 e014 	ldrb.w	lr, [r1, #20]
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   82e44:	f047 0729 	orr.w	r7, r7, #41	; 0x29
				ptr_job->b_shortpacket = false;
   82e48:	f36f 0e41 	bfc	lr, #1, #1
   82e4c:	f881 e014 	strb.w	lr, [r1, #20]
   82e50:	e033      	b.n	82eba <udd_ep_trans_done+0xde>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   82e52:	f44f 6400 	mov.w	r4, #2048	; 0x800
			udd_enable_endpoint_interrupt(ep);
   82e56:	f44f 7380 	mov.w	r3, #256	; 0x100
   82e5a:	4849      	ldr	r0, [pc, #292]	; (82f80 <udd_ep_trans_done+0x1a4>)
			udd_enable_tx_pkt_ready_interrupt(ep);
   82e5c:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   82e60:	fa03 f202 	lsl.w	r2, r3, r2
   82e64:	6903      	ldr	r3, [r0, #16]
   82e66:	431a      	orrs	r2, r3
   82e68:	6102      	str	r2, [r0, #16]
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
   82e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82e6e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	if (Is_udd_endpoint_in(ep)) {
   82e72:	f10c 2140 	add.w	r1, ip, #1073758208	; 0x40004000
   82e76:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   82e7a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   82e7e:	0700      	lsls	r0, r0, #28
   82e80:	d505      	bpl.n	82e8e <udd_ep_trans_done+0xb2>
		if (ptr_job->b_shortpacket) {
   82e82:	18f0      	adds	r0, r6, r3
   82e84:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   82e88:	7d00      	ldrb	r0, [r0, #20]
   82e8a:	0787      	lsls	r7, r0, #30
   82e8c:	d4e1      	bmi.n	82e52 <udd_ep_trans_done+0x76>
	udd_ep_finish_job(ptr_job, false, ep);
   82e8e:	4d3d      	ldr	r5, [pc, #244]	; (82f84 <udd_ep_trans_done+0x1a8>)
	ptr_job = &udd_ep_job[ep - 1];
   82e90:	18f0      	adds	r0, r6, r3
	udd_ep_finish_job(ptr_job, false, ep);
   82e92:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   82e96:	462b      	mov	r3, r5
}
   82e98:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	udd_ep_finish_job(ptr_job, false, ep);
   82e9c:	2100      	movs	r1, #0
   82e9e:	4718      	bx	r3
		if (Is_udd_endpoint_in(ep)) {
   82ea0:	f10c 2140 	add.w	r1, ip, #1073758208	; 0x40004000
   82ea4:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   82ea8:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   82eac:	072d      	lsls	r5, r5, #28
   82eae:	d535      	bpl.n	82f1c <udd_ep_trans_done+0x140>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   82eb0:	2721      	movs	r7, #33	; 0x21
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   82eb2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   82eb6:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   82eba:	eb06 0e03 	add.w	lr, r6, r3
   82ebe:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
   82ec2:	f8de 1004 	ldr.w	r1, [lr, #4]
   82ec6:	4408      	add	r0, r1
   82ec8:	492f      	ldr	r1, [pc, #188]	; (82f88 <udd_ep_trans_done+0x1ac>)
   82eca:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   82ece:	6048      	str	r0, [r1, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82ed0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i");
   82ed4:	b672      	cpsid	i
   82ed6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   82eda:	f04f 0900 	mov.w	r9, #0
   82ede:	482b      	ldr	r0, [pc, #172]	; (82f8c <udd_ep_trans_done+0x1b0>)
   82ee0:	f880 9000 	strb.w	r9, [r0]
		if (!(udd_endpoint_dma_get_status(ep)
   82ee4:	f8d1 900c 	ldr.w	r9, [r1, #12]
   82ee8:	f019 0f10 	tst.w	r9, #16
   82eec:	d020      	beq.n	82f30 <udd_ep_trans_done+0x154>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82eee:	f1b8 0f00 	cmp.w	r8, #0
   82ef2:	d104      	bne.n	82efe <udd_ep_trans_done+0x122>
		cpu_irq_enable();
   82ef4:	2101      	movs	r1, #1
   82ef6:	7001      	strb	r1, [r0, #0]
   82ef8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82efc:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   82efe:	18f1      	adds	r1, r6, r3
   82f00:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   82f04:	68c8      	ldr	r0, [r1, #12]
   82f06:	6088      	str	r0, [r1, #8]
   82f08:	e7b3      	b.n	82e72 <udd_ep_trans_done+0x96>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   82f0a:	f8de 1100 	ldr.w	r1, [lr, #256]	; 0x100
   82f0e:	f3c1 1101 	ubfx	r1, r1, #4, #2
   82f12:	2901      	cmp	r1, #1
   82f14:	d025      	beq.n	82f62 <udd_ep_trans_done+0x186>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   82f16:	f047 0735 	orr.w	r7, r7, #53	; 0x35
   82f1a:	e7ce      	b.n	82eba <udd_ep_trans_done+0xde>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   82f1c:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   82f20:	f3c5 1501 	ubfx	r5, r5, #4, #2
   82f24:	2d01      	cmp	r5, #1
   82f26:	d0c3      	beq.n	82eb0 <udd_ep_trans_done+0xd4>
   82f28:	2735      	movs	r7, #53	; 0x35
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   82f2a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   82f2e:	e7c4      	b.n	82eba <udd_ep_trans_done+0xde>
			udd_enable_endpoint_dma_interrupt(ep);
   82f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   82f34:	608f      	str	r7, [r1, #8]
			udd_enable_endpoint_dma_interrupt(ep);
   82f36:	fa02 f303 	lsl.w	r3, r2, r3
			ptr_job->buf_cnt += next_trans;
   82f3a:	f8de 200c 	ldr.w	r2, [lr, #12]
			ptr_job->buf_load = next_trans;
   82f3e:	f8ce 5010 	str.w	r5, [lr, #16]
			ptr_job->buf_cnt += next_trans;
   82f42:	4415      	add	r5, r2
			udd_enable_endpoint_dma_interrupt(ep);
   82f44:	4a0e      	ldr	r2, [pc, #56]	; (82f80 <udd_ep_trans_done+0x1a4>)
			ptr_job->buf_cnt += next_trans;
   82f46:	f8ce 500c 	str.w	r5, [lr, #12]
			udd_enable_endpoint_dma_interrupt(ep);
   82f4a:	6911      	ldr	r1, [r2, #16]
   82f4c:	430b      	orrs	r3, r1
   82f4e:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   82f50:	f1b8 0f00 	cmp.w	r8, #0
   82f54:	d189      	bne.n	82e6a <udd_ep_trans_done+0x8e>
		cpu_irq_enable();
   82f56:	2301      	movs	r3, #1
   82f58:	7003      	strb	r3, [r0, #0]
   82f5a:	f3bf 8f5f 	dmb	sy
   82f5e:	b662      	cpsie	i
}
   82f60:	e783      	b.n	82e6a <udd_ep_trans_done+0x8e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   82f62:	f8de 1100 	ldr.w	r1, [lr, #256]	; 0x100
   82f66:	f001 0e07 	and.w	lr, r1, #7
   82f6a:	2108      	movs	r1, #8
   82f6c:	fa01 f10e 	lsl.w	r1, r1, lr
   82f70:	42a9      	cmp	r1, r5
   82f72:	d2d0      	bcs.n	82f16 <udd_ep_trans_done+0x13a>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   82f74:	f047 0721 	orr.w	r7, r7, #33	; 0x21
   82f78:	e79f      	b.n	82eba <udd_ep_trans_done+0xde>
   82f7a:	bf00      	nop
   82f7c:	200018c8 	.word	0x200018c8
   82f80:	400a4000 	.word	0x400a4000
   82f84:	00082d9d 	.word	0x00082d9d
   82f88:	400a4300 	.word	0x400a4300
   82f8c:	2000032c 	.word	0x2000032c

00082f90 <udd_ctrl_in_sent>:
{
   82f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82f94:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   82f98:	b672      	cpsid	i
   82f9a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82f9e:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   82fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82fa4:	4d59      	ldr	r5, [pc, #356]	; (8310c <udd_ctrl_in_sent+0x17c>)
   82fa6:	4a5a      	ldr	r2, [pc, #360]	; (83110 <udd_ctrl_in_sent+0x180>)
   82fa8:	7028      	strb	r0, [r5, #0]
   82faa:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   82fae:	b923      	cbnz	r3, 82fba <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   82fb0:	2301      	movs	r3, #1
   82fb2:	702b      	strb	r3, [r5, #0]
   82fb4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82fb8:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82fba:	f8df 8158 	ldr.w	r8, [pc, #344]	; 83114 <udd_ctrl_in_sent+0x184>
   82fbe:	f898 3000 	ldrb.w	r3, [r8]
   82fc2:	2b03      	cmp	r3, #3
   82fc4:	d063      	beq.n	8308e <udd_ctrl_in_sent+0xfe>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82fc6:	4f54      	ldr	r7, [pc, #336]	; (83118 <udd_ctrl_in_sent+0x188>)
   82fc8:	4e54      	ldr	r6, [pc, #336]	; (8311c <udd_ctrl_in_sent+0x18c>)
   82fca:	883a      	ldrh	r2, [r7, #0]
   82fcc:	89b4      	ldrh	r4, [r6, #12]
   82fce:	1aa4      	subs	r4, r4, r2
   82fd0:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   82fd2:	2c00      	cmp	r4, #0
   82fd4:	d038      	beq.n	83048 <udd_ctrl_in_sent+0xb8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82fd6:	4613      	mov	r3, r2
   82fd8:	f8df 9144 	ldr.w	r9, [pc, #324]	; 83120 <udd_ctrl_in_sent+0x190>
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   82fdc:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
   82fde:	bf86      	itte	hi
   82fe0:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   82fe2:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
   82fe4:	2201      	movls	r2, #1
   82fe6:	f889 2000 	strb.w	r2, [r9]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82fea:	68b2      	ldr	r2, [r6, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82fec:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   82ff0:	b672      	cpsid	i
   82ff2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82ff6:	2100      	movs	r1, #0
   82ff8:	7029      	strb	r1, [r5, #0]
	if (Is_udd_out_received(0)) {
   82ffa:	4945      	ldr	r1, [pc, #276]	; (83110 <udd_ctrl_in_sent+0x180>)
   82ffc:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   83000:	0589      	lsls	r1, r1, #22
   83002:	d439      	bmi.n	83078 <udd_ctrl_in_sent+0xe8>
	for (i = 0; i < nb_remain; i++) {
   83004:	b154      	cbz	r4, 8301c <udd_ctrl_in_sent+0x8c>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83006:	441a      	add	r2, r3
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83008:	4b46      	ldr	r3, [pc, #280]	; (83124 <udd_ctrl_in_sent+0x194>)
		*ptr_dest++ = *ptr_src++;
   8300a:	4618      	mov	r0, r3
   8300c:	3301      	adds	r3, #1
   8300e:	f812 cb01 	ldrb.w	ip, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   83012:	b2d9      	uxtb	r1, r3
   83014:	42a1      	cmp	r1, r4
		*ptr_dest++ = *ptr_src++;
   83016:	f880 c000 	strb.w	ip, [r0]
	for (i = 0; i < nb_remain; i++) {
   8301a:	d3f6      	bcc.n	8300a <udd_ctrl_in_sent+0x7a>
	udd_ack_in_send(0);
   8301c:	f44f 6280 	mov.w	r2, #1024	; 0x400
	udd_raise_tx_pkt_ready(0);
   83020:	f44f 6100 	mov.w	r1, #2048	; 0x800
	udd_ctrl_payload_buf_cnt += nb_remain;
   83024:	883b      	ldrh	r3, [r7, #0]
   83026:	441c      	add	r4, r3
	udd_ack_in_send(0);
   83028:	4b39      	ldr	r3, [pc, #228]	; (83110 <udd_ctrl_in_sent+0x180>)
	udd_ctrl_payload_buf_cnt += nb_remain;
   8302a:	803c      	strh	r4, [r7, #0]
	udd_ack_in_send(0);
   8302c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83030:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83034:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83038:	b926      	cbnz	r6, 83044 <udd_ctrl_in_sent+0xb4>
		cpu_irq_enable();
   8303a:	2301      	movs	r3, #1
   8303c:	702b      	strb	r3, [r5, #0]
   8303e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83042:	b662      	cpsie	i
}
   83044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83048:	4937      	ldr	r1, [pc, #220]	; (83128 <udd_ctrl_in_sent+0x198>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8304a:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8304c:	880b      	ldrh	r3, [r1, #0]
   8304e:	4413      	add	r3, r2
   83050:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83052:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83054:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83056:	d040      	beq.n	830da <udd_ctrl_in_sent+0x14a>
				|| b_shortpacket) {
   83058:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 83120 <udd_ctrl_in_sent+0x190>
   8305c:	f899 a000 	ldrb.w	sl, [r9]
   83060:	f1ba 0f00 	cmp.w	sl, #0
   83064:	d139      	bne.n	830da <udd_ctrl_in_sent+0x14a>
		if ((!udd_g_ctrlreq.over_under_run)
   83066:	6973      	ldr	r3, [r6, #20]
   83068:	2b00      	cmp	r3, #0
   8306a:	d033      	beq.n	830d4 <udd_ctrl_in_sent+0x144>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8306c:	4798      	blx	r3
   8306e:	2800      	cmp	r0, #0
   83070:	d147      	bne.n	83102 <udd_ctrl_in_sent+0x172>
		b_shortpacket = true;
   83072:	2201      	movs	r2, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83074:	883b      	ldrh	r3, [r7, #0]
   83076:	e7b6      	b.n	82fe6 <udd_ctrl_in_sent+0x56>
	if (cpu_irq_is_enabled_flags(flags))
   83078:	b926      	cbnz	r6, 83084 <udd_ctrl_in_sent+0xf4>
		cpu_irq_enable();
   8307a:	2301      	movs	r3, #1
   8307c:	702b      	strb	r3, [r5, #0]
   8307e:	f3bf 8f5f 	dmb	sy
   83082:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83084:	2304      	movs	r3, #4
   83086:	f888 3000 	strb.w	r3, [r8]
}
   8308a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (udd_g_ctrlreq.callback) {
   8308e:	4e23      	ldr	r6, [pc, #140]	; (8311c <udd_ctrl_in_sent+0x18c>)
   83090:	6933      	ldr	r3, [r6, #16]
   83092:	b103      	cbz	r3, 83096 <udd_ctrl_in_sent+0x106>
		udd_g_ctrlreq.callback();
   83094:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83096:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8309a:	b672      	cpsid	i
   8309c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   830a0:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   830a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   830a6:	4a1a      	ldr	r2, [pc, #104]	; (83110 <udd_ctrl_in_sent+0x180>)
   830a8:	7028      	strb	r0, [r5, #0]
   830aa:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   830ae:	b923      	cbnz	r3, 830ba <udd_ctrl_in_sent+0x12a>
		cpu_irq_enable();
   830b0:	2301      	movs	r3, #1
   830b2:	702b      	strb	r3, [r5, #0]
   830b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   830b8:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   830ba:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   830bc:	f44f 7100 	mov.w	r1, #512	; 0x200
   830c0:	4a13      	ldr	r2, [pc, #76]	; (83110 <udd_ctrl_in_sent+0x180>)
   830c2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.over_under_run = NULL;
   830c6:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
   830ca:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   830cc:	f888 3000 	strb.w	r3, [r8]
}
   830d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   830d4:	4613      	mov	r3, r2
		b_shortpacket = true;
   830d6:	2201      	movs	r2, #1
   830d8:	e785      	b.n	82fe6 <udd_ctrl_in_sent+0x56>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   830da:	2304      	movs	r3, #4
   830dc:	f888 3000 	strb.w	r3, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   830e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   830e4:	b672      	cpsid	i
   830e6:	f3bf 8f5f 	dmb	sy
	udd_ack_nak_in(0);
   830ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	cpu_irq_disable();
   830ee:	2000      	movs	r0, #0
   830f0:	4b07      	ldr	r3, [pc, #28]	; (83110 <udd_ctrl_in_sent+0x180>)
   830f2:	7028      	strb	r0, [r5, #0]
   830f4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   830f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   830fc:	2900      	cmp	r1, #0
   830fe:	d1a1      	bne.n	83044 <udd_ctrl_in_sent+0xb4>
   83100:	e79b      	b.n	8303a <udd_ctrl_in_sent+0xaa>
			udd_ctrl_payload_buf_cnt = 0;
   83102:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   83104:	4653      	mov	r3, sl
   83106:	89b4      	ldrh	r4, [r6, #12]
   83108:	e768      	b.n	82fdc <udd_ctrl_in_sent+0x4c>
   8310a:	bf00      	nop
   8310c:	2000032c 	.word	0x2000032c
   83110:	400a4000 	.word	0x400a4000
   83114:	200018c6 	.word	0x200018c6
   83118:	200018c2 	.word	0x200018c2
   8311c:	200018f8 	.word	0x200018f8
   83120:	200018c0 	.word	0x200018c0
   83124:	20180000 	.word	0x20180000
   83128:	200018c4 	.word	0x200018c4

0008312c <UDPHS_Handler>:
{
   8312c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   83130:	4b9b      	ldr	r3, [pc, #620]	; (833a0 <UDPHS_Handler+0x274>)
   83132:	201d      	movs	r0, #29
   83134:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   83136:	4b9b      	ldr	r3, [pc, #620]	; (833a4 <UDPHS_Handler+0x278>)
   83138:	4798      	blx	r3
   8313a:	b928      	cbnz	r0, 83148 <UDPHS_Handler+0x1c>
   8313c:	4b9a      	ldr	r3, [pc, #616]	; (833a8 <UDPHS_Handler+0x27c>)
   8313e:	695b      	ldr	r3, [r3, #20]
   83140:	f013 0302 	ands.w	r3, r3, #2
   83144:	f000 8096 	beq.w	83274 <UDPHS_Handler+0x148>
	if (Is_udd_sof()) {
   83148:	4b97      	ldr	r3, [pc, #604]	; (833a8 <UDPHS_Handler+0x27c>)
   8314a:	695a      	ldr	r2, [r3, #20]
   8314c:	0712      	lsls	r2, r2, #28
   8314e:	f100 8082 	bmi.w	83256 <UDPHS_Handler+0x12a>
	if (Is_udd_msof()) {
   83152:	695a      	ldr	r2, [r3, #20]
   83154:	0756      	lsls	r6, r2, #29
   83156:	f100 8087 	bmi.w	83268 <UDPHS_Handler+0x13c>
	uint32_t status = udd_get_endpoint_status(0);
   8315a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   8315e:	6959      	ldr	r1, [r3, #20]
   83160:	05cd      	lsls	r5, r1, #23
   83162:	d521      	bpl.n	831a8 <UDPHS_Handler+0x7c>
	udd_disable_nak_in_interrupt(0);
   83164:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	udd_disable_nak_out_interrupt(0);
   83168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	if (Is_udd_endpoint_status_setup_received(status)) {
   8316c:	04d4      	lsls	r4, r2, #19
	udd_disable_nak_in_interrupt(0);
   8316e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   83172:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   83176:	f100 80ac 	bmi.w	832d2 <UDPHS_Handler+0x1a6>
	if (Is_udd_endpoint_status_in_sent(status)
   8317a:	0550      	lsls	r0, r2, #21
   8317c:	d504      	bpl.n	83188 <UDPHS_Handler+0x5c>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8317e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   83182:	0559      	lsls	r1, r3, #21
   83184:	f100 824d 	bmi.w	83622 <UDPHS_Handler+0x4f6>
	if (Is_udd_endpoint_status_out_received(status)) {
   83188:	0593      	lsls	r3, r2, #22
   8318a:	f100 8147 	bmi.w	8341c <UDPHS_Handler+0x2f0>
	if (Is_udd_endpoint_status_stall(status)) {
   8318e:	0497      	lsls	r7, r2, #18
   83190:	d504      	bpl.n	8319c <UDPHS_Handler+0x70>
		udd_ack_stall(0);
   83192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   83196:	4b84      	ldr	r3, [pc, #528]	; (833a8 <UDPHS_Handler+0x27c>)
   83198:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   8319c:	0416      	lsls	r6, r2, #16
   8319e:	f100 816d 	bmi.w	8347c <UDPHS_Handler+0x350>
	if (Is_udd_endpoint_status_nak_in(status)) {
   831a2:	0454      	lsls	r4, r2, #17
   831a4:	f100 80cb 	bmi.w	8333e <UDPHS_Handler+0x212>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   831a8:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   831aa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   831ae:	f44f 7680 	mov.w	r6, #256	; 0x100
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   831b2:	4a7d      	ldr	r2, [pc, #500]	; (833a8 <UDPHS_Handler+0x27c>)
   831b4:	6910      	ldr	r0, [r2, #16]
   831b6:	f103 3eff 	add.w	lr, r3, #4294967295
   831ba:	fa05 f10e 	lsl.w	r1, r5, lr
   831be:	4208      	tst	r0, r1
   831c0:	b2df      	uxtb	r7, r3
   831c2:	d003      	beq.n	831cc <UDPHS_Handler+0xa0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   831c4:	6950      	ldr	r0, [r2, #20]
   831c6:	4201      	tst	r1, r0
   831c8:	f040 80ce 	bne.w	83368 <UDPHS_Handler+0x23c>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   831cc:	6911      	ldr	r1, [r2, #16]
   831ce:	fa06 f003 	lsl.w	r0, r6, r3
   831d2:	4201      	tst	r1, r0
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   831d4:	eb02 1443 	add.w	r4, r2, r3, lsl #5
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   831d8:	d017      	beq.n	8320a <UDPHS_Handler+0xde>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   831da:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   831de:	46a4      	mov	ip, r4
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   831e0:	f411 6f00 	tst.w	r1, #2048	; 0x800
   831e4:	d005      	beq.n	831f2 <UDPHS_Handler+0xc6>
					&& !Is_udd_tx_pkt_ready(ep)) {
   831e6:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
   831ea:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
   831ee:	f000 8335 	beq.w	8385c <UDPHS_Handler+0x730>
			if (Is_udd_bank_interrupt_enabled(ep)
   831f2:	f8dc 110c 	ldr.w	r1, [ip, #268]	; 0x10c
   831f6:	034f      	lsls	r7, r1, #13
   831f8:	d507      	bpl.n	8320a <UDPHS_Handler+0xde>
					&& (0 == udd_nb_busy_bank(ep))) {
   831fa:	f8dc 111c 	ldr.w	r1, [ip, #284]	; 0x11c
   831fe:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   83202:	f3c1 4481 	ubfx	r4, r1, #18, #2
   83206:	f000 80e9 	beq.w	833dc <UDPHS_Handler+0x2b0>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8320a:	2b02      	cmp	r3, #2
   8320c:	d139      	bne.n	83282 <UDPHS_Handler+0x156>
	if (Is_udd_reset()) {
   8320e:	4966      	ldr	r1, [pc, #408]	; (833a8 <UDPHS_Handler+0x27c>)
   83210:	694c      	ldr	r4, [r1, #20]
   83212:	f014 0410 	ands.w	r4, r4, #16
   83216:	f040 817e 	bne.w	83516 <UDPHS_Handler+0x3ea>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8321a:	690a      	ldr	r2, [r1, #16]
   8321c:	0790      	lsls	r0, r2, #30
   8321e:	d535      	bpl.n	8328c <UDPHS_Handler+0x160>
   83220:	694a      	ldr	r2, [r1, #20]
   83222:	0792      	lsls	r2, r2, #30
   83224:	d532      	bpl.n	8328c <UDPHS_Handler+0x160>
		udd_ack_wake_up();
   83226:	2220      	movs	r2, #32
   83228:	618a      	str	r2, [r1, #24]
		udd_disable_suspend_interrupt();
   8322a:	690a      	ldr	r2, [r1, #16]
		udd_disable_periph_ck();
   8322c:	201d      	movs	r0, #29
		udd_disable_suspend_interrupt();
   8322e:	f022 0202 	bic.w	r2, r2, #2
   83232:	610a      	str	r2, [r1, #16]
		udd_enable_wake_up_interrupt();
   83234:	690a      	ldr	r2, [r1, #16]
		udd_disable_periph_ck();
   83236:	4d5d      	ldr	r5, [pc, #372]	; (833ac <UDPHS_Handler+0x280>)
		udd_enable_wake_up_interrupt();
   83238:	f042 0220 	orr.w	r2, r2, #32
   8323c:	610a      	str	r2, [r1, #16]
		udd_ack_suspend();
   8323e:	618b      	str	r3, [r1, #24]
		udd_disable_periph_ck();
   83240:	47a8      	blx	r5
		UDC_SUSPEND_EVENT();
   83242:	4b5b      	ldr	r3, [pc, #364]	; (833b0 <UDPHS_Handler+0x284>)
   83244:	4798      	blx	r3
	if (!b_idle && udd_b_idle) {
   83246:	4a5b      	ldr	r2, [pc, #364]	; (833b4 <UDPHS_Handler+0x288>)
   83248:	7813      	ldrb	r3, [r2, #0]
   8324a:	2b00      	cmp	r3, #0
   8324c:	f040 82bf 	bne.w	837ce <UDPHS_Handler+0x6a2>
	udd_b_idle = b_idle;
   83250:	2300      	movs	r3, #0
   83252:	7013      	strb	r3, [r2, #0]
		goto udd_interrupt_end;
   83254:	e013      	b.n	8327e <UDPHS_Handler+0x152>
		udd_ack_sof();
   83256:	2208      	movs	r2, #8
   83258:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   8325a:	695b      	ldr	r3, [r3, #20]
   8325c:	07df      	lsls	r7, r3, #31
   8325e:	d512      	bpl.n	83286 <UDPHS_Handler+0x15a>
}
   83260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		UDC_SOF_EVENT();
   83264:	4b54      	ldr	r3, [pc, #336]	; (833b8 <UDPHS_Handler+0x28c>)
   83266:	4718      	bx	r3
		udd_ack_msof();
   83268:	2104      	movs	r1, #4
   8326a:	6199      	str	r1, [r3, #24]
		udc_sof_notify();
   8326c:	4a53      	ldr	r2, [pc, #332]	; (833bc <UDPHS_Handler+0x290>)
}
   8326e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udc_sof_notify();
   83272:	4710      	bx	r2
   83274:	b672      	cpsid	i
   83276:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   8327a:	4a51      	ldr	r2, [pc, #324]	; (833c0 <UDPHS_Handler+0x294>)
   8327c:	7013      	strb	r3, [r2, #0]
}
   8327e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83282:	2302      	movs	r3, #2
   83284:	e796      	b.n	831b4 <UDPHS_Handler+0x88>
			udc_sof_notify();
   83286:	4b4d      	ldr	r3, [pc, #308]	; (833bc <UDPHS_Handler+0x290>)
   83288:	4798      	blx	r3
   8328a:	e7e9      	b.n	83260 <UDPHS_Handler+0x134>
	if (Is_udd_wake_up()) {
   8328c:	4b46      	ldr	r3, [pc, #280]	; (833a8 <UDPHS_Handler+0x27c>)
   8328e:	695b      	ldr	r3, [r3, #20]
   83290:	069b      	lsls	r3, r3, #26
   83292:	d5f4      	bpl.n	8327e <UDPHS_Handler+0x152>
	if (b_idle && !udd_b_idle) {
   83294:	4a47      	ldr	r2, [pc, #284]	; (833b4 <UDPHS_Handler+0x288>)
   83296:	7813      	ldrb	r3, [r2, #0]
   83298:	2b00      	cmp	r3, #0
   8329a:	f000 8279 	beq.w	83790 <UDPHS_Handler+0x664>
		udd_ack_suspend();
   8329e:	2402      	movs	r4, #2
	udd_b_idle = b_idle;
   832a0:	2501      	movs	r5, #1
		udd_ack_wake_up();
   832a2:	2020      	movs	r0, #32
		udd_ack_suspend();
   832a4:	4b40      	ldr	r3, [pc, #256]	; (833a8 <UDPHS_Handler+0x27c>)
	udd_b_idle = b_idle;
   832a6:	7015      	strb	r5, [r2, #0]
		udd_ack_suspend();
   832a8:	619c      	str	r4, [r3, #24]
		udd_ack_wake_up();
   832aa:	6198      	str	r0, [r3, #24]
		udd_disable_wake_up_interrupt();
   832ac:	691a      	ldr	r2, [r3, #16]
		UDC_RESUME_EVENT();
   832ae:	4945      	ldr	r1, [pc, #276]	; (833c4 <UDPHS_Handler+0x298>)
		udd_disable_wake_up_interrupt();
   832b0:	f022 0220 	bic.w	r2, r2, #32
   832b4:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   832b6:	691a      	ldr	r2, [r3, #16]
   832b8:	4322      	orrs	r2, r4
   832ba:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   832bc:	691a      	ldr	r2, [r3, #16]
   832be:	f042 0208 	orr.w	r2, r2, #8
   832c2:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   832c4:	691a      	ldr	r2, [r3, #16]
   832c6:	f042 0204 	orr.w	r2, r2, #4
   832ca:	611a      	str	r2, [r3, #16]
}
   832cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		UDC_RESUME_EVENT();
   832d0:	4708      	bx	r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   832d2:	4d3d      	ldr	r5, [pc, #244]	; (833c8 <UDPHS_Handler+0x29c>)
   832d4:	782b      	ldrb	r3, [r5, #0]
   832d6:	b303      	cbz	r3, 8331a <UDPHS_Handler+0x1ee>
	if (udd_g_ctrlreq.callback) {
   832d8:	4c3c      	ldr	r4, [pc, #240]	; (833cc <UDPHS_Handler+0x2a0>)
   832da:	6923      	ldr	r3, [r4, #16]
   832dc:	b103      	cbz	r3, 832e0 <UDPHS_Handler+0x1b4>
		udd_g_ctrlreq.callback();
   832de:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   832e0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   832e4:	b672      	cpsid	i
   832e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   832ea:	2100      	movs	r1, #0
	udd_disable_in_send_interrupt(0);
   832ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
   832f0:	4b33      	ldr	r3, [pc, #204]	; (833c0 <UDPHS_Handler+0x294>)
   832f2:	7019      	strb	r1, [r3, #0]
   832f4:	492c      	ldr	r1, [pc, #176]	; (833a8 <UDPHS_Handler+0x27c>)
   832f6:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   832fa:	b922      	cbnz	r2, 83306 <UDPHS_Handler+0x1da>
		cpu_irq_enable();
   832fc:	2201      	movs	r2, #1
   832fe:	701a      	strb	r2, [r3, #0]
   83300:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83304:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   83306:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   83308:	f44f 7100 	mov.w	r1, #512	; 0x200
   8330c:	4a26      	ldr	r2, [pc, #152]	; (833a8 <UDPHS_Handler+0x27c>)
   8330e:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.over_under_run = NULL;
   83312:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   83316:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83318:	702b      	strb	r3, [r5, #0]
	if (8 != udd_byte_count(0)) {
   8331a:	4a23      	ldr	r2, [pc, #140]	; (833a8 <UDPHS_Handler+0x27c>)
   8331c:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
   83320:	f3c3 530a 	ubfx	r3, r3, #20, #11
   83324:	2b08      	cmp	r3, #8
   83326:	f000 80bc 	beq.w	834a2 <UDPHS_Handler+0x376>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   8332a:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   8332c:	2120      	movs	r1, #32
		udd_ack_setup_received(0);
   8332e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83332:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   83334:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
		udd_ack_setup_received(0);
   83338:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   8333c:	e79f      	b.n	8327e <UDPHS_Handler+0x152>
		udd_ack_nak_in(0);
   8333e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   83342:	4a19      	ldr	r2, [pc, #100]	; (833a8 <UDPHS_Handler+0x27c>)
   83344:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	if (Is_udd_out_received(0))
   83348:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
   8334c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   83350:	d195      	bne.n	8327e <UDPHS_Handler+0x152>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   83352:	481d      	ldr	r0, [pc, #116]	; (833c8 <UDPHS_Handler+0x29c>)
   83354:	7801      	ldrb	r1, [r0, #0]
   83356:	2901      	cmp	r1, #1
   83358:	f000 824d 	beq.w	837f6 <UDPHS_Handler+0x6ca>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   8335c:	2904      	cmp	r1, #4
   8335e:	d18e      	bne.n	8327e <UDPHS_Handler+0x152>
		udd_enable_stall_handshake(0);
   83360:	2320      	movs	r3, #32
   83362:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   83366:	e78a      	b.n	8327e <UDPHS_Handler+0x152>
			if (udd_endpoint_dma_get_status(ep)
   83368:	4819      	ldr	r0, [pc, #100]	; (833d0 <UDPHS_Handler+0x2a4>)
   8336a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8336e:	68d8      	ldr	r0, [r3, #12]
   83370:	07c0      	lsls	r0, r0, #31
   83372:	d484      	bmi.n	8327e <UDPHS_Handler+0x152>
			udd_disable_endpoint_dma_interrupt(ep);
   83374:	6910      	ldr	r0, [r2, #16]
   83376:	ea20 0101 	bic.w	r1, r0, r1
   8337a:	6111      	str	r1, [r2, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8337c:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   8337e:	0c1b      	lsrs	r3, r3, #16
   83380:	d008      	beq.n	83394 <UDPHS_Handler+0x268>
				ptr_job->buf_cnt -= nb_remaining;
   83382:	4a14      	ldr	r2, [pc, #80]	; (833d4 <UDPHS_Handler+0x2a8>)
   83384:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   83388:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
   8338c:	68d1      	ldr	r1, [r2, #12]
   8338e:	1acb      	subs	r3, r1, r3
				ptr_job->buf_size = ptr_job->buf_cnt;
   83390:	e9c2 3302 	strd	r3, r3, [r2, #8]
			udd_ep_trans_done(ep);
   83394:	4638      	mov	r0, r7
}
   83396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			udd_ep_trans_done(ep);
   8339a:	4b0f      	ldr	r3, [pc, #60]	; (833d8 <UDPHS_Handler+0x2ac>)
   8339c:	4718      	bx	r3
   8339e:	bf00      	nop
   833a0:	000845a9 	.word	0x000845a9
   833a4:	00084b21 	.word	0x00084b21
   833a8:	400a4000 	.word	0x400a4000
   833ac:	000845cd 	.word	0x000845cd
   833b0:	00081929 	.word	0x00081929
   833b4:	200018c1 	.word	0x200018c1
   833b8:	00081939 	.word	0x00081939
   833bc:	00082555 	.word	0x00082555
   833c0:	2000032c 	.word	0x2000032c
   833c4:	00081931 	.word	0x00081931
   833c8:	200018c6 	.word	0x200018c6
   833cc:	200018f8 	.word	0x200018f8
   833d0:	400a4300 	.word	0x400a4300
   833d4:	200018c8 	.word	0x200018c8
   833d8:	00082ddd 	.word	0x00082ddd
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   833dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
				udd_disable_endpoint_bank_autoswitch(ep);
				udd_enable_stall_handshake(ep);
   833e0:	2520      	movs	r5, #32
				udd_reset_data_toggle(ep);
   833e2:	2140      	movs	r1, #64	; 0x40
				udd_disable_bank_interrupt(ep);
   833e4:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   833e8:	6913      	ldr	r3, [r2, #16]
				ptr_job->stall_requested = false;
   833ea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
				udd_disable_endpoint_interrupt(ep);
   833ee:	ea23 0000 	bic.w	r0, r3, r0
				ptr_job->stall_requested = false;
   833f2:	4bb3      	ldr	r3, [pc, #716]	; (836c0 <UDPHS_Handler+0x594>)
				udd_disable_endpoint_interrupt(ep);
   833f4:	6110      	str	r0, [r2, #16]
				ptr_job->stall_requested = false;
   833f6:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   833fa:	f89e 3014 	ldrb.w	r3, [lr, #20]
   833fe:	f364 0382 	bfi	r3, r4, #2, #1
   83402:	f88e 3014 	strb.w	r3, [lr, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   83406:	f8dc 3108 	ldr.w	r3, [ip, #264]	; 0x108
   8340a:	f023 0302 	bic.w	r3, r3, #2
   8340e:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   83412:	f8cc 5114 	str.w	r5, [ip, #276]	; 0x114
				udd_reset_data_toggle(ep);
   83416:	f8cc 1118 	str.w	r1, [ip, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   8341a:	e730      	b.n	8327e <UDPHS_Handler+0x152>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8341c:	4da9      	ldr	r5, [pc, #676]	; (836c4 <UDPHS_Handler+0x598>)
   8341e:	782b      	ldrb	r3, [r5, #0]
   83420:	2b01      	cmp	r3, #1
   83422:	f000 8102 	beq.w	8362a <UDPHS_Handler+0x4fe>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   83426:	2b02      	cmp	r3, #2
   83428:	f000 8137 	beq.w	8369a <UDPHS_Handler+0x56e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8342c:	2b04      	cmp	r3, #4
   8342e:	f000 8134 	beq.w	8369a <UDPHS_Handler+0x56e>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83432:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   83434:	2220      	movs	r2, #32
   83436:	4ba4      	ldr	r3, [pc, #656]	; (836c8 <UDPHS_Handler+0x59c>)
   83438:	4ca4      	ldr	r4, [pc, #656]	; (836cc <UDPHS_Handler+0x5a0>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   8343a:	7029      	strb	r1, [r5, #0]
	udd_enable_stall_handshake(0);
   8343c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83440:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   83444:	b672      	cpsid	i
   83446:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8344a:	2100      	movs	r1, #0
	udd_disable_in_send_interrupt(0);
   8344c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83450:	4b9f      	ldr	r3, [pc, #636]	; (836d0 <UDPHS_Handler+0x5a4>)
   83452:	7019      	strb	r1, [r3, #0]
   83454:	499c      	ldr	r1, [pc, #624]	; (836c8 <UDPHS_Handler+0x59c>)
   83456:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8345a:	b922      	cbnz	r2, 83466 <UDPHS_Handler+0x33a>
		cpu_irq_enable();
   8345c:	2201      	movs	r2, #1
   8345e:	701a      	strb	r2, [r3, #0]
   83460:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83464:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   83466:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   83468:	f44f 7100 	mov.w	r1, #512	; 0x200
   8346c:	4a96      	ldr	r2, [pc, #600]	; (836c8 <UDPHS_Handler+0x59c>)
   8346e:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.over_under_run = NULL;
   83472:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   83476:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83478:	702b      	strb	r3, [r5, #0]
   8347a:	e700      	b.n	8327e <UDPHS_Handler+0x152>
		udd_ack_nak_out(0);
   8347c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83480:	4b91      	ldr	r3, [pc, #580]	; (836c8 <UDPHS_Handler+0x59c>)
   83482:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   83486:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
   8348a:	0555      	lsls	r5, r2, #21
   8348c:	f53f aef7 	bmi.w	8327e <UDPHS_Handler+0x152>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83490:	4a8c      	ldr	r2, [pc, #560]	; (836c4 <UDPHS_Handler+0x598>)
   83492:	7812      	ldrb	r2, [r2, #0]
   83494:	2a03      	cmp	r2, #3
   83496:	f47f aef2 	bne.w	8327e <UDPHS_Handler+0x152>
		udd_enable_stall_handshake(0);
   8349a:	2220      	movs	r2, #32
   8349c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   834a0:	e6ed      	b.n	8327e <UDPHS_Handler+0x152>
   834a2:	4a8c      	ldr	r2, [pc, #560]	; (836d4 <UDPHS_Handler+0x5a8>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   834a4:	4b8c      	ldr	r3, [pc, #560]	; (836d8 <UDPHS_Handler+0x5ac>)
	for (i = 0; i < 8; i++) {
   834a6:	488d      	ldr	r0, [pc, #564]	; (836dc <UDPHS_Handler+0x5b0>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   834a8:	4619      	mov	r1, r3
   834aa:	3301      	adds	r3, #1
   834ac:	7809      	ldrb	r1, [r1, #0]
	for (i = 0; i < 8; i++) {
   834ae:	4283      	cmp	r3, r0
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   834b0:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   834b4:	d1f8      	bne.n	834a8 <UDPHS_Handler+0x37c>
	if (udc_process_setup() == false) {
   834b6:	4b8a      	ldr	r3, [pc, #552]	; (836e0 <UDPHS_Handler+0x5b4>)
   834b8:	4798      	blx	r3
   834ba:	2800      	cmp	r0, #0
   834bc:	f000 80f4 	beq.w	836a8 <UDPHS_Handler+0x57c>
	udd_ack_setup_received(0);
   834c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   834c4:	4b80      	ldr	r3, [pc, #512]	; (836c8 <UDPHS_Handler+0x59c>)
	if (Udd_setup_is_in()) {
   834c6:	4a81      	ldr	r2, [pc, #516]	; (836cc <UDPHS_Handler+0x5a0>)
	udd_ack_setup_received(0);
   834c8:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   834cc:	f992 1000 	ldrsb.w	r1, [r2]
   834d0:	2900      	cmp	r1, #0
   834d2:	f2c0 8171 	blt.w	837b8 <UDPHS_Handler+0x68c>
		if (0 == udd_g_ctrlreq.req.wLength) {
   834d6:	88d2      	ldrh	r2, [r2, #6]
   834d8:	2a00      	cmp	r2, #0
   834da:	f000 81ad 	beq.w	83838 <UDPHS_Handler+0x70c>
		udd_ctrl_prev_payload_buf_cnt = 0;
   834de:	2200      	movs	r2, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   834e0:	2401      	movs	r4, #1
		udd_ack_nak_in(0);
   834e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
		udd_ctrl_prev_payload_buf_cnt = 0;
   834e6:	487f      	ldr	r0, [pc, #508]	; (836e4 <UDPHS_Handler+0x5b8>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   834e8:	702c      	strb	r4, [r5, #0]
		udd_ctrl_prev_payload_buf_cnt = 0;
   834ea:	8002      	strh	r2, [r0, #0]
		udd_ctrl_payload_buf_cnt = 0;
   834ec:	487e      	ldr	r0, [pc, #504]	; (836e8 <UDPHS_Handler+0x5bc>)
   834ee:	8002      	strh	r2, [r0, #0]
		udd_ack_nak_in(0);
   834f0:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   834f4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   834f8:	b672      	cpsid	i
   834fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   834fe:	4874      	ldr	r0, [pc, #464]	; (836d0 <UDPHS_Handler+0x5a4>)
   83500:	7002      	strb	r2, [r0, #0]
		udd_enable_nak_in_interrupt(0);
   83502:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83506:	2d00      	cmp	r5, #0
   83508:	f47f aeb9 	bne.w	8327e <UDPHS_Handler+0x152>
		cpu_irq_enable();
   8350c:	7004      	strb	r4, [r0, #0]
   8350e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83512:	b662      	cpsie	i
   83514:	e6b3      	b.n	8327e <UDPHS_Handler+0x152>
		udd_ack_reset();
   83516:	2210      	movs	r2, #16
	if (ptr_job->busy == false) {
   83518:	4c69      	ldr	r4, [pc, #420]	; (836c0 <UDPHS_Handler+0x594>)
   8351a:	7d23      	ldrb	r3, [r4, #20]
		udd_ack_reset();
   8351c:	618a      	str	r2, [r1, #24]
	if (ptr_job->busy == false) {
   8351e:	f013 0201 	ands.w	r2, r3, #1
   83522:	d00d      	beq.n	83540 <UDPHS_Handler+0x414>
	if (NULL == ptr_job->call_trans) {
   83524:	6825      	ldr	r5, [r4, #0]
	ptr_job->busy = false;
   83526:	f36f 0300 	bfc	r3, #0, #1
   8352a:	7523      	strb	r3, [r4, #20]
	if (NULL == ptr_job->call_trans) {
   8352c:	b145      	cbz	r5, 83540 <UDPHS_Handler+0x414>
	if (Is_udd_endpoint_in(ep_num)) {
   8352e:	f8d1 3120 	ldr.w	r3, [r1, #288]	; 0x120
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83532:	2001      	movs	r0, #1
		ep_num |= USB_EP_DIR_IN;
   83534:	f013 0f08 	tst.w	r3, #8
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83538:	bf18      	it	ne
   8353a:	2281      	movne	r2, #129	; 0x81
   8353c:	68a1      	ldr	r1, [r4, #8]
   8353e:	47a8      	blx	r5
	if (ptr_job->busy == false) {
   83540:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   83544:	07dd      	lsls	r5, r3, #31
   83546:	d510      	bpl.n	8356a <UDPHS_Handler+0x43e>
	if (NULL == ptr_job->call_trans) {
   83548:	69a5      	ldr	r5, [r4, #24]
	ptr_job->busy = false;
   8354a:	f36f 0300 	bfc	r3, #0, #1
   8354e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (NULL == ptr_job->call_trans) {
   83552:	b155      	cbz	r5, 8356a <UDPHS_Handler+0x43e>
	if (Is_udd_endpoint_in(ep_num)) {
   83554:	4b5c      	ldr	r3, [pc, #368]	; (836c8 <UDPHS_Handler+0x59c>)
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83556:	2001      	movs	r0, #1
	if (Is_udd_endpoint_in(ep_num)) {
   83558:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8355c:	6a21      	ldr	r1, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8355e:	f013 0f08 	tst.w	r3, #8
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83562:	bf14      	ite	ne
   83564:	2282      	movne	r2, #130	; 0x82
   83566:	2202      	moveq	r2, #2
   83568:	47a8      	blx	r5
		udc_reset();
   8356a:	4b60      	ldr	r3, [pc, #384]	; (836ec <UDPHS_Handler+0x5c0>)
   8356c:	4798      	blx	r3
	udd_enable_endpoint(0);
   8356e:	2001      	movs	r0, #1
	udd_configure_address(0);
   83570:	4b55      	ldr	r3, [pc, #340]	; (836c8 <UDPHS_Handler+0x59c>)
   83572:	681a      	ldr	r2, [r3, #0]
   83574:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83578:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8357a:	681a      	ldr	r2, [r3, #0]
   8357c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83580:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   83582:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   83586:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   8358a:	f022 0203 	bic.w	r2, r2, #3
   8358e:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   83592:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   83596:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8359a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   8359e:	b672      	cpsid	i
   835a0:	f3bf 8f5f 	dmb	sy
	udd_enable_setup_received_interrupt(0);
   835a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	cpu_irq_disable();
   835a8:	2500      	movs	r5, #0
   835aa:	4949      	ldr	r1, [pc, #292]	; (836d0 <UDPHS_Handler+0x5a4>)
   835ac:	700d      	strb	r5, [r1, #0]
   835ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   835b2:	f44f 7200 	mov.w	r2, #512	; 0x200
   835b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   835ba:	691a      	ldr	r2, [r3, #16]
   835bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   835c0:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   835c2:	b91c      	cbnz	r4, 835cc <UDPHS_Handler+0x4a0>
		cpu_irq_enable();
   835c4:	7008      	strb	r0, [r1, #0]
   835c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   835ca:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   835cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   835d0:	b672      	cpsid	i
   835d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   835d6:	2400      	movs	r4, #0
	udd_disable_in_send_interrupt(0);
   835d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   835dc:	4a3a      	ldr	r2, [pc, #232]	; (836c8 <UDPHS_Handler+0x59c>)
   835de:	700c      	strb	r4, [r1, #0]
   835e0:	f8c2 0108 	str.w	r0, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   835e4:	b923      	cbnz	r3, 835f0 <UDPHS_Handler+0x4c4>
		cpu_irq_enable();
   835e6:	2301      	movs	r3, #1
   835e8:	700b      	strb	r3, [r1, #0]
   835ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   835ee:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   835f0:	2200      	movs	r2, #0
	udd_ack_out_received(0);
   835f2:	f44f 7400 	mov.w	r4, #512	; 0x200
   835f6:	4b34      	ldr	r3, [pc, #208]	; (836c8 <UDPHS_Handler+0x59c>)
	udd_g_ctrlreq.callback = NULL;
   835f8:	4834      	ldr	r0, [pc, #208]	; (836cc <UDPHS_Handler+0x5a0>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   835fa:	4932      	ldr	r1, [pc, #200]	; (836c4 <UDPHS_Handler+0x598>)
	udd_g_ctrlreq.callback = NULL;
   835fc:	6102      	str	r2, [r0, #16]
	udd_ack_out_received(0);
   835fe:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83602:	700a      	strb	r2, [r1, #0]
		udd_enable_sof_interrupt();
   83604:	6919      	ldr	r1, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83606:	6142      	str	r2, [r0, #20]
		udd_enable_sof_interrupt();
   83608:	f041 0108 	orr.w	r1, r1, #8
   8360c:	6119      	str	r1, [r3, #16]
		udd_enable_msof_interrupt();
   8360e:	6919      	ldr	r1, [r3, #16]
	udd_g_ctrlreq.payload_size = 0;
   83610:	8182      	strh	r2, [r0, #12]
		udd_enable_msof_interrupt();
   83612:	f041 0104 	orr.w	r1, r1, #4
   83616:	6119      	str	r1, [r3, #16]
		udd_enable_suspend_interrupt();
   83618:	691a      	ldr	r2, [r3, #16]
   8361a:	f042 0202 	orr.w	r2, r2, #2
   8361e:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   83620:	e62d      	b.n	8327e <UDPHS_Handler+0x152>
		udd_ctrl_in_sent();
   83622:	4b33      	ldr	r3, [pc, #204]	; (836f0 <UDPHS_Handler+0x5c4>)
}
   83624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udd_ctrl_in_sent();
   83628:	4718      	bx	r3
	nb_data = udd_byte_count(0);
   8362a:	4b27      	ldr	r3, [pc, #156]	; (836c8 <UDPHS_Handler+0x59c>)
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8362c:	4f2e      	ldr	r7, [pc, #184]	; (836e8 <UDPHS_Handler+0x5bc>)
	nb_data = udd_byte_count(0);
   8362e:	f8d3 611c 	ldr.w	r6, [r3, #284]	; 0x11c
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   83632:	4c26      	ldr	r4, [pc, #152]	; (836cc <UDPHS_Handler+0x5a0>)
   83634:	883b      	ldrh	r3, [r7, #0]
   83636:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
	nb_data = udd_byte_count(0);
   8363a:	f3c6 560a 	ubfx	r6, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8363e:	199a      	adds	r2, r3, r6
   83640:	4594      	cmp	ip, r2
	udd_ctrl_payload_buf_cnt += nb_data;
   83642:	bfac      	ite	ge
   83644:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83648:	ebac 0603 	sublt.w	r6, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8364c:	68a2      	ldr	r2, [r4, #8]
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8364e:	bfb8      	it	lt
   83650:	b2b6      	uxthlt	r6, r6
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83652:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
   83654:	2e00      	cmp	r6, #0
   83656:	f000 8112 	beq.w	8387e <UDPHS_Handler+0x752>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8365a:	4b1f      	ldr	r3, [pc, #124]	; (836d8 <UDPHS_Handler+0x5ac>)
		*ptr_dest++ = *ptr_src++;
   8365c:	4618      	mov	r0, r3
   8365e:	3301      	adds	r3, #1
   83660:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < nb_data; i++) {
   83662:	b2d9      	uxtb	r1, r3
   83664:	42b1      	cmp	r1, r6
		*ptr_dest++ = *ptr_src++;
   83666:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_data; i++) {
   8366a:	d3f7      	bcc.n	8365c <UDPHS_Handler+0x530>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8366c:	2e40      	cmp	r6, #64	; 0x40
	udd_ctrl_payload_buf_cnt += nb_data;
   8366e:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   83672:	d067      	beq.n	83744 <UDPHS_Handler+0x618>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   83674:	6963      	ldr	r3, [r4, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   83676:	f8a4 c00c 	strh.w	ip, [r4, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8367a:	2b00      	cmp	r3, #0
   8367c:	d03a      	beq.n	836f4 <UDPHS_Handler+0x5c8>
			if (!udd_g_ctrlreq.over_under_run()) {
   8367e:	4798      	blx	r3
   83680:	2800      	cmp	r0, #0
   83682:	d137      	bne.n	836f4 <UDPHS_Handler+0x5c8>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83684:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   83686:	2120      	movs	r1, #32
			udd_ack_out_received(0);
   83688:	f44f 7200 	mov.w	r2, #512	; 0x200
	udd_enable_stall_handshake(0);
   8368c:	4b0e      	ldr	r3, [pc, #56]	; (836c8 <UDPHS_Handler+0x59c>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   8368e:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   83690:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
			udd_ack_out_received(0);
   83694:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83698:	e5f1      	b.n	8327e <UDPHS_Handler+0x152>
	if (udd_g_ctrlreq.callback) {
   8369a:	4c0c      	ldr	r4, [pc, #48]	; (836cc <UDPHS_Handler+0x5a0>)
   8369c:	6923      	ldr	r3, [r4, #16]
   8369e:	2b00      	cmp	r3, #0
   836a0:	f43f aece 	beq.w	83440 <UDPHS_Handler+0x314>
		udd_g_ctrlreq.callback();
   836a4:	4798      	blx	r3
   836a6:	e6cb      	b.n	83440 <UDPHS_Handler+0x314>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   836a8:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   836aa:	2120      	movs	r1, #32
		udd_ack_setup_received(0);
   836ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	udd_enable_stall_handshake(0);
   836b0:	4b05      	ldr	r3, [pc, #20]	; (836c8 <UDPHS_Handler+0x59c>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   836b2:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   836b4:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		udd_ack_setup_received(0);
   836b8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   836bc:	e5df      	b.n	8327e <UDPHS_Handler+0x152>
   836be:	bf00      	nop
   836c0:	200018c8 	.word	0x200018c8
   836c4:	200018c6 	.word	0x200018c6
   836c8:	400a4000 	.word	0x400a4000
   836cc:	200018f8 	.word	0x200018f8
   836d0:	2000032c 	.word	0x2000032c
   836d4:	200018f7 	.word	0x200018f7
   836d8:	20180000 	.word	0x20180000
   836dc:	20180008 	.word	0x20180008
   836e0:	00082591 	.word	0x00082591
   836e4:	200018c4 	.word	0x200018c4
   836e8:	200018c2 	.word	0x200018c2
   836ec:	00082511 	.word	0x00082511
   836f0:	00082f91 	.word	0x00082f91
		udd_ack_out_received(0);
   836f4:	f44f 7100 	mov.w	r1, #512	; 0x200
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   836f8:	2203      	movs	r2, #3
		udd_ack_out_received(0);
   836fa:	4b6a      	ldr	r3, [pc, #424]	; (838a4 <UDPHS_Handler+0x778>)
   836fc:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   83700:	702a      	strb	r2, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83702:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83706:	b672      	cpsid	i
   83708:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8370c:	2500      	movs	r5, #0
   8370e:	4866      	ldr	r0, [pc, #408]	; (838a8 <UDPHS_Handler+0x77c>)
	udd_ack_in_send(0);
   83710:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83714:	7005      	strb	r5, [r0, #0]
	udd_ack_nak_out(0);
   83716:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	udd_raise_tx_pkt_ready(0);
   8371a:	f44f 6500 	mov.w	r5, #2048	; 0x800
	udd_ack_in_send(0);
   8371e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83722:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83726:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_ack_nak_out(0);
   8372a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   8372e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83732:	2c00      	cmp	r4, #0
   83734:	f47f ada3 	bne.w	8327e <UDPHS_Handler+0x152>
		cpu_irq_enable();
   83738:	2301      	movs	r3, #1
   8373a:	7003      	strb	r3, [r0, #0]
   8373c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83740:	b662      	cpsie	i
   83742:	e59c      	b.n	8327e <UDPHS_Handler+0x152>
			(udd_ctrl_prev_payload_buf_cnt +
   83744:	4e59      	ldr	r6, [pc, #356]	; (838ac <UDPHS_Handler+0x780>)
			|| (udd_g_ctrlreq.req.wLength <=
   83746:	88e2      	ldrh	r2, [r4, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   83748:	8833      	ldrh	r3, [r6, #0]
   8374a:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
   8374c:	429a      	cmp	r2, r3
   8374e:	dd91      	ble.n	83674 <UDPHS_Handler+0x548>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   83750:	89a3      	ldrh	r3, [r4, #12]
   83752:	4563      	cmp	r3, ip
   83754:	f000 8096 	beq.w	83884 <UDPHS_Handler+0x758>
	udd_ack_out_received(0);
   83758:	f44f 7100 	mov.w	r1, #512	; 0x200
	udd_ack_nak_in(0);
   8375c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	udd_ack_out_received(0);
   83760:	4b50      	ldr	r3, [pc, #320]	; (838a4 <UDPHS_Handler+0x778>)
   83762:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   83766:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8376a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8376e:	b672      	cpsid	i
   83770:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83774:	2400      	movs	r4, #0
   83776:	494c      	ldr	r1, [pc, #304]	; (838a8 <UDPHS_Handler+0x77c>)
   83778:	700c      	strb	r4, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   8377a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8377e:	2800      	cmp	r0, #0
   83780:	f47f ad7d 	bne.w	8327e <UDPHS_Handler+0x152>
		cpu_irq_enable();
   83784:	2301      	movs	r3, #1
   83786:	700b      	strb	r3, [r1, #0]
   83788:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8378c:	b662      	cpsie	i
   8378e:	e576      	b.n	8327e <UDPHS_Handler+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83790:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83794:	b672      	cpsid	i
   83796:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8379a:	4843      	ldr	r0, [pc, #268]	; (838a8 <UDPHS_Handler+0x77c>)
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   8379c:	4944      	ldr	r1, [pc, #272]	; (838b0 <UDPHS_Handler+0x784>)
   8379e:	7003      	strb	r3, [r0, #0]
   837a0:	788b      	ldrb	r3, [r1, #2]
   837a2:	3301      	adds	r3, #1
   837a4:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   837a6:	2c00      	cmp	r4, #0
   837a8:	f47f ad79 	bne.w	8329e <UDPHS_Handler+0x172>
		cpu_irq_enable();
   837ac:	2301      	movs	r3, #1
   837ae:	7003      	strb	r3, [r0, #0]
   837b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   837b4:	b662      	cpsie	i
}
   837b6:	e572      	b.n	8329e <UDPHS_Handler+0x172>
		udd_ctrl_prev_payload_buf_cnt = 0;
   837b8:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   837ba:	2102      	movs	r1, #2
		udd_ctrl_prev_payload_buf_cnt = 0;
   837bc:	4c3b      	ldr	r4, [pc, #236]	; (838ac <UDPHS_Handler+0x780>)
		udd_ctrl_payload_buf_cnt = 0;
   837be:	483d      	ldr	r0, [pc, #244]	; (838b4 <UDPHS_Handler+0x788>)
		udd_ctrl_prev_payload_buf_cnt = 0;
   837c0:	8023      	strh	r3, [r4, #0]
		udd_ctrl_payload_buf_cnt = 0;
   837c2:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   837c4:	7029      	strb	r1, [r5, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   837c6:	4a3c      	ldr	r2, [pc, #240]	; (838b8 <UDPHS_Handler+0x78c>)
}
   837c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udd_ctrl_in_sent(); // Send first data transfer
   837cc:	4710      	bx	r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   837ce:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   837d2:	b672      	cpsid	i
   837d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   837d8:	4833      	ldr	r0, [pc, #204]	; (838a8 <UDPHS_Handler+0x77c>)
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   837da:	4935      	ldr	r1, [pc, #212]	; (838b0 <UDPHS_Handler+0x784>)
   837dc:	7004      	strb	r4, [r0, #0]
   837de:	788b      	ldrb	r3, [r1, #2]
   837e0:	3b01      	subs	r3, #1
   837e2:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   837e4:	2d00      	cmp	r5, #0
   837e6:	f47f ad33 	bne.w	83250 <UDPHS_Handler+0x124>
		cpu_irq_enable();
   837ea:	2301      	movs	r3, #1
   837ec:	7003      	strb	r3, [r0, #0]
   837ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   837f2:	b662      	cpsie	i
}
   837f4:	e52c      	b.n	83250 <UDPHS_Handler+0x124>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   837f6:	2403      	movs	r4, #3
   837f8:	7004      	strb	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   837fa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   837fe:	b672      	cpsid	i
   83800:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83804:	4c28      	ldr	r4, [pc, #160]	; (838a8 <UDPHS_Handler+0x77c>)
	udd_ack_in_send(0);
   83806:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8380a:	7023      	strb	r3, [r4, #0]
	udd_raise_tx_pkt_ready(0);
   8380c:	f44f 6600 	mov.w	r6, #2048	; 0x800
	udd_ack_nak_out(0);
   83810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	udd_ack_in_send(0);
   83814:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83818:	f8c2 6114 	str.w	r6, [r2, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8381c:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
	udd_ack_nak_out(0);
   83820:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   83824:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83828:	2d00      	cmp	r5, #0
   8382a:	f47f ad28 	bne.w	8327e <UDPHS_Handler+0x152>
		cpu_irq_enable();
   8382e:	7021      	strb	r1, [r4, #0]
   83830:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83834:	b662      	cpsie	i
   83836:	e522      	b.n	8327e <UDPHS_Handler+0x152>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   83838:	2103      	movs	r1, #3
   8383a:	7029      	strb	r1, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8383c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83840:	b672      	cpsid	i
   83842:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   83846:	f44f 6180 	mov.w	r1, #1024	; 0x400
	cpu_irq_disable();
   8384a:	4817      	ldr	r0, [pc, #92]	; (838a8 <UDPHS_Handler+0x77c>)
	udd_raise_tx_pkt_ready(0);
   8384c:	f44f 6500 	mov.w	r5, #2048	; 0x800
   83850:	7002      	strb	r2, [r0, #0]
	udd_ack_nak_out(0);
   83852:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	udd_ack_in_send(0);
   83856:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8385a:	e762      	b.n	83722 <UDPHS_Handler+0x5f6>
				udd_disable_tx_pkt_ready_interrupt(ep);
   8385c:	f44f 6300 	mov.w	r3, #2048	; 0x800
				udd_ep_finish_job(ptr_job, false, ep);
   83860:	4d16      	ldr	r5, [pc, #88]	; (838bc <UDPHS_Handler+0x790>)
		ptr_job = &udd_ep_job[ep - 1];
   83862:	4817      	ldr	r0, [pc, #92]	; (838c0 <UDPHS_Handler+0x794>)
				udd_disable_tx_pkt_ready_interrupt(ep);
   83864:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		ptr_job = &udd_ep_job[ep - 1];
   83868:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
				udd_raise_tx_pkt_ready(ep);
   8386c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_ep_finish_job(ptr_job, false, ep);
   83870:	463a      	mov	r2, r7
   83872:	462b      	mov	r3, r5
   83874:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
}
   83878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				udd_ep_finish_job(ptr_job, false, ep);
   8387c:	4718      	bx	r3
	udd_ctrl_payload_buf_cnt += nb_data;
   8387e:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   83882:	e6f7      	b.n	83674 <UDPHS_Handler+0x548>
		if (!udd_g_ctrlreq.over_under_run) {
   83884:	6963      	ldr	r3, [r4, #20]
   83886:	2b00      	cmp	r3, #0
   83888:	f43f aefc 	beq.w	83684 <UDPHS_Handler+0x558>
		if (!udd_g_ctrlreq.over_under_run()) {
   8388c:	4798      	blx	r3
   8388e:	2800      	cmp	r0, #0
   83890:	f43f aef8 	beq.w	83684 <UDPHS_Handler+0x558>
		udd_ctrl_payload_buf_cnt = 0;
   83894:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83896:	8833      	ldrh	r3, [r6, #0]
   83898:	8839      	ldrh	r1, [r7, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8389a:	803a      	strh	r2, [r7, #0]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8389c:	440b      	add	r3, r1
   8389e:	8033      	strh	r3, [r6, #0]
		udd_ctrl_payload_buf_cnt = 0;
   838a0:	e75a      	b.n	83758 <UDPHS_Handler+0x62c>
   838a2:	bf00      	nop
   838a4:	400a4000 	.word	0x400a4000
   838a8:	2000032c 	.word	0x2000032c
   838ac:	200018c4 	.word	0x200018c4
   838b0:	2000192c 	.word	0x2000192c
   838b4:	200018c2 	.word	0x200018c2
   838b8:	00082f91 	.word	0x00082f91
   838bc:	00082d9d 	.word	0x00082d9d
   838c0:	200018c8 	.word	0x200018c8

000838c4 <udd_attach>:
{
   838c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   838c8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   838cc:	b672      	cpsid	i
   838ce:	f3bf 8f5f 	dmb	sy
   838d2:	2100      	movs	r1, #0
	if (b_idle && !udd_b_idle) {
   838d4:	4b29      	ldr	r3, [pc, #164]	; (8397c <udd_attach+0xb8>)
   838d6:	4c2a      	ldr	r4, [pc, #168]	; (83980 <udd_attach+0xbc>)
   838d8:	781a      	ldrb	r2, [r3, #0]
   838da:	7021      	strb	r1, [r4, #0]
   838dc:	2a00      	cmp	r2, #0
   838de:	d03b      	beq.n	83958 <udd_attach+0x94>
	udd_b_idle = b_idle;
   838e0:	2501      	movs	r5, #1
	udd_enable_periph_ck();
   838e2:	4a28      	ldr	r2, [pc, #160]	; (83984 <udd_attach+0xc0>)
   838e4:	201d      	movs	r0, #29
	udd_b_idle = b_idle;
   838e6:	701d      	strb	r5, [r3, #0]
	udd_ack_sof();
   838e8:	f04f 0808 	mov.w	r8, #8
	udd_enable_periph_ck();
   838ec:	4790      	blx	r2
	udd_ack_suspend();
   838ee:	2702      	movs	r7, #2
	udd_ack_msof();
   838f0:	f04f 0e04 	mov.w	lr, #4
	udd_ack_reset();
   838f4:	f04f 0c10 	mov.w	ip, #16
	udd_ack_wake_up();
   838f8:	2120      	movs	r1, #32
	udd_attach_device();
   838fa:	4b23      	ldr	r3, [pc, #140]	; (83988 <udd_attach+0xc4>)
	udd_disable_periph_ck();
   838fc:	201d      	movs	r0, #29
	udd_attach_device();
   838fe:	681a      	ldr	r2, [r3, #0]
   83900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   83904:	601a      	str	r2, [r3, #0]
   83906:	681a      	ldr	r2, [r3, #0]
   83908:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8390c:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   8390e:	691a      	ldr	r2, [r3, #16]
   83910:	f042 0210 	orr.w	r2, r2, #16
   83914:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   83916:	691a      	ldr	r2, [r3, #16]
   83918:	f042 0202 	orr.w	r2, r2, #2
   8391c:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   8391e:	691a      	ldr	r2, [r3, #16]
   83920:	f042 0220 	orr.w	r2, r2, #32
   83924:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   83926:	691a      	ldr	r2, [r3, #16]
   83928:	f042 0208 	orr.w	r2, r2, #8
   8392c:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   8392e:	691a      	ldr	r2, [r3, #16]
   83930:	f042 0204 	orr.w	r2, r2, #4
   83934:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   83936:	f8c3 8018 	str.w	r8, [r3, #24]
	udd_disable_periph_ck();
   8393a:	4a14      	ldr	r2, [pc, #80]	; (8398c <udd_attach+0xc8>)
	udd_ack_msof();
   8393c:	f8c3 e018 	str.w	lr, [r3, #24]
	udd_ack_reset();
   83940:	f8c3 c018 	str.w	ip, [r3, #24]
	udd_ack_suspend();
   83944:	619f      	str	r7, [r3, #24]
	udd_ack_wake_up();
   83946:	6199      	str	r1, [r3, #24]
	udd_disable_periph_ck();
   83948:	4790      	blx	r2
	if (cpu_irq_is_enabled_flags(flags))
   8394a:	b91e      	cbnz	r6, 83954 <udd_attach+0x90>
		cpu_irq_enable();
   8394c:	7025      	strb	r5, [r4, #0]
   8394e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83952:	b662      	cpsie	i
}
   83954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83958:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8395c:	b672      	cpsid	i
   8395e:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   83962:	490b      	ldr	r1, [pc, #44]	; (83990 <udd_attach+0xcc>)
	cpu_irq_disable();
   83964:	7022      	strb	r2, [r4, #0]
   83966:	788a      	ldrb	r2, [r1, #2]
   83968:	3201      	adds	r2, #1
   8396a:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8396c:	2800      	cmp	r0, #0
   8396e:	d1b7      	bne.n	838e0 <udd_attach+0x1c>
		cpu_irq_enable();
   83970:	2201      	movs	r2, #1
   83972:	7022      	strb	r2, [r4, #0]
   83974:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83978:	b662      	cpsie	i
}
   8397a:	e7b1      	b.n	838e0 <udd_attach+0x1c>
   8397c:	200018c1 	.word	0x200018c1
   83980:	2000032c 	.word	0x2000032c
   83984:	000845a9 	.word	0x000845a9
   83988:	400a4000 	.word	0x400a4000
   8398c:	000845cd 	.word	0x000845cd
   83990:	2000192c 	.word	0x2000192c

00083994 <udd_enable>:
{
   83994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sysclk_enable_usb();
   83996:	4b25      	ldr	r3, [pc, #148]	; (83a2c <udd_enable+0x98>)
   83998:	4798      	blx	r3
	udd_enable_periph_ck();
   8399a:	4b25      	ldr	r3, [pc, #148]	; (83a30 <udd_enable+0x9c>)
   8399c:	201d      	movs	r0, #29
   8399e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   839a0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   839a4:	b672      	cpsid	i
   839a6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   839aa:	2400      	movs	r4, #0
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   839ac:	f04f 0e50 	mov.w	lr, #80	; 0x50
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   839b0:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		udd_ep_job[i].busy = false;
   839b4:	4a1f      	ldr	r2, [pc, #124]	; (83a34 <udd_enable+0xa0>)
   839b6:	4d20      	ldr	r5, [pc, #128]	; (83a38 <udd_enable+0xa4>)
   839b8:	7d11      	ldrb	r1, [r2, #20]
	udd_enable_periph();
   839ba:	4b20      	ldr	r3, [pc, #128]	; (83a3c <udd_enable+0xa8>)
		udd_ep_job[i].busy = false;
   839bc:	f021 0105 	bic.w	r1, r1, #5
   839c0:	7511      	strb	r1, [r2, #20]
   839c2:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
   839c6:	702c      	strb	r4, [r5, #0]
   839c8:	f021 0105 	bic.w	r1, r1, #5
   839cc:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
	udd_enable_periph();
   839d0:	681a      	ldr	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   839d2:	4f1b      	ldr	r7, [pc, #108]	; (83a40 <udd_enable+0xac>)
   839d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   839d8:	601a      	str	r2, [r3, #0]
   839da:	f887 e31d 	strb.w	lr, [r7, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   839de:	f8c7 c000 	str.w	ip, [r7]
	udd_high_speed_enable();
   839e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   839e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	udd_high_speed_enable();
   839ea:	f022 0203 	bic.w	r2, r2, #3
   839ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   839f2:	4b14      	ldr	r3, [pc, #80]	; (83a44 <udd_enable+0xb0>)
   839f4:	4798      	blx	r3
	udd_b_idle = false;
   839f6:	4b14      	ldr	r3, [pc, #80]	; (83a48 <udd_enable+0xb4>)
   839f8:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   839fa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   839fe:	b672      	cpsid	i
   83a00:	f3bf 8f5f 	dmb	sy
   83a04:	4a11      	ldr	r2, [pc, #68]	; (83a4c <udd_enable+0xb8>)
   83a06:	702c      	strb	r4, [r5, #0]
   83a08:	78d3      	ldrb	r3, [r2, #3]
   83a0a:	3301      	adds	r3, #1
   83a0c:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   83a0e:	b921      	cbnz	r1, 83a1a <udd_enable+0x86>
		cpu_irq_enable();
   83a10:	2301      	movs	r3, #1
   83a12:	702b      	strb	r3, [r5, #0]
   83a14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83a18:	b662      	cpsie	i
	udd_attach();
   83a1a:	4b0d      	ldr	r3, [pc, #52]	; (83a50 <udd_enable+0xbc>)
   83a1c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83a1e:	b926      	cbnz	r6, 83a2a <udd_enable+0x96>
		cpu_irq_enable();
   83a20:	2301      	movs	r3, #1
   83a22:	702b      	strb	r3, [r5, #0]
   83a24:	f3bf 8f5f 	dmb	sy
   83a28:	b662      	cpsie	i
}
   83a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a2c:	000843a5 	.word	0x000843a5
   83a30:	000845a9 	.word	0x000845a9
   83a34:	200018c8 	.word	0x200018c8
   83a38:	2000032c 	.word	0x2000032c
   83a3c:	400a4000 	.word	0x400a4000
   83a40:	e000e100 	.word	0xe000e100
   83a44:	00084601 	.word	0x00084601
   83a48:	200018c1 	.word	0x200018c1
   83a4c:	2000192c 	.word	0x2000192c
   83a50:	000838c5 	.word	0x000838c5

00083a54 <udd_detach>:
{
   83a54:	b510      	push	{r4, lr}
	udd_enable_periph_ck();
   83a56:	4b16      	ldr	r3, [pc, #88]	; (83ab0 <udd_detach+0x5c>)
   83a58:	201d      	movs	r0, #29
   83a5a:	4798      	blx	r3
	udd_detach_device();
   83a5c:	4b15      	ldr	r3, [pc, #84]	; (83ab4 <udd_detach+0x60>)
	udd_disable_periph_ck();
   83a5e:	201d      	movs	r0, #29
	udd_detach_device();
   83a60:	681a      	ldr	r2, [r3, #0]
	udd_disable_periph_ck();
   83a62:	4915      	ldr	r1, [pc, #84]	; (83ab8 <udd_detach+0x64>)
	udd_detach_device();
   83a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   83a68:	601a      	str	r2, [r3, #0]
   83a6a:	681a      	ldr	r2, [r3, #0]
   83a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83a70:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   83a72:	4788      	blx	r1
	if (!b_idle && udd_b_idle) {
   83a74:	4b11      	ldr	r3, [pc, #68]	; (83abc <udd_detach+0x68>)
   83a76:	781a      	ldrb	r2, [r3, #0]
   83a78:	b912      	cbnz	r2, 83a80 <udd_detach+0x2c>
	udd_b_idle = b_idle;
   83a7a:	2200      	movs	r2, #0
   83a7c:	701a      	strb	r2, [r3, #0]
}
   83a7e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83a80:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83a84:	b672      	cpsid	i
   83a86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83a8a:	f04f 0c00 	mov.w	ip, #0
	--sleepmgr_locks[mode];
   83a8e:	490c      	ldr	r1, [pc, #48]	; (83ac0 <udd_detach+0x6c>)
   83a90:	480c      	ldr	r0, [pc, #48]	; (83ac4 <udd_detach+0x70>)
   83a92:	788a      	ldrb	r2, [r1, #2]
   83a94:	3a01      	subs	r2, #1
   83a96:	708a      	strb	r2, [r1, #2]
   83a98:	f880 c000 	strb.w	ip, [r0]
	if (cpu_irq_is_enabled_flags(flags))
   83a9c:	2c00      	cmp	r4, #0
   83a9e:	d1ec      	bne.n	83a7a <udd_detach+0x26>
		cpu_irq_enable();
   83aa0:	2201      	movs	r2, #1
   83aa2:	7002      	strb	r2, [r0, #0]
   83aa4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83aa8:	b662      	cpsie	i
	udd_b_idle = b_idle;
   83aaa:	2200      	movs	r2, #0
   83aac:	701a      	strb	r2, [r3, #0]
}
   83aae:	bd10      	pop	{r4, pc}
   83ab0:	000845a9 	.word	0x000845a9
   83ab4:	400a4000 	.word	0x400a4000
   83ab8:	000845cd 	.word	0x000845cd
   83abc:	200018c1 	.word	0x200018c1
   83ac0:	2000192c 	.word	0x2000192c
   83ac4:	2000032c 	.word	0x2000032c

00083ac8 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   83ac8:	4b02      	ldr	r3, [pc, #8]	; (83ad4 <udd_is_high_speed+0xc>)
   83aca:	6958      	ldr	r0, [r3, #20]
}
   83acc:	f000 0001 	and.w	r0, r0, #1
   83ad0:	4770      	bx	lr
   83ad2:	bf00      	nop
   83ad4:	400a4000 	.word	0x400a4000

00083ad8 <udd_set_address>:
	udd_disable_address();
   83ad8:	4b08      	ldr	r3, [pc, #32]	; (83afc <udd_set_address+0x24>)
	udd_configure_address(address);
   83ada:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	udd_disable_address();
   83ade:	681a      	ldr	r2, [r3, #0]
   83ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   83ae4:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   83ae6:	681a      	ldr	r2, [r3, #0]
   83ae8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83aec:	4302      	orrs	r2, r0
   83aee:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   83af0:	681a      	ldr	r2, [r3, #0]
   83af2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83af6:	601a      	str	r2, [r3, #0]
}
   83af8:	4770      	bx	lr
   83afa:	bf00      	nop
   83afc:	400a4000 	.word	0x400a4000

00083b00 <udd_getaddress>:
	return udd_get_configured_address();
   83b00:	4b02      	ldr	r3, [pc, #8]	; (83b0c <udd_getaddress+0xc>)
   83b02:	6818      	ldr	r0, [r3, #0]
}
   83b04:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83b08:	4770      	bx	lr
   83b0a:	bf00      	nop
   83b0c:	400a4000 	.word	0x400a4000

00083b10 <udd_get_frame_number>:
	return udd_frame_number();
   83b10:	4b02      	ldr	r3, [pc, #8]	; (83b1c <udd_get_frame_number+0xc>)
   83b12:	6858      	ldr	r0, [r3, #4]
}
   83b14:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   83b18:	4770      	bx	lr
   83b1a:	bf00      	nop
   83b1c:	400a4000 	.word	0x400a4000

00083b20 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   83b20:	4b01      	ldr	r3, [pc, #4]	; (83b28 <udd_set_setup_payload+0x8>)
   83b22:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   83b24:	8199      	strh	r1, [r3, #12]
}
   83b26:	4770      	bx	lr
   83b28:	200018f8 	.word	0x200018f8

00083b2c <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83b2c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   83b30:	2a02      	cmp	r2, #2
   83b32:	d900      	bls.n	83b36 <udd_ep_free+0xa>
   83b34:	4770      	bx	lr
	udd_disable_endpoint(ep_index);
   83b36:	2101      	movs	r1, #1
{
   83b38:	b538      	push	{r3, r4, r5, lr}
	udd_disable_endpoint(ep_index);
   83b3a:	0153      	lsls	r3, r2, #5
   83b3c:	f103 2540 	add.w	r5, r3, #1073758208	; 0x40004000
   83b40:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   83b44:	462b      	mov	r3, r5
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83b46:	1e54      	subs	r4, r2, #1
	udd_disable_endpoint(ep_index);
   83b48:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   83b4c:	f8d5 5100 	ldr.w	r5, [r5, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83b50:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   83b54:	4c07      	ldr	r4, [pc, #28]	; (83b74 <udd_ep_free+0x48>)
	udd_configure_endpoint_bank(ep_index, 0);
   83b56:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83b5a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
	udd_configure_endpoint_bank(ep_index, 0);
   83b5e:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83b62:	4620      	mov	r0, r4
   83b64:	4b04      	ldr	r3, [pc, #16]	; (83b78 <udd_ep_free+0x4c>)
   83b66:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   83b68:	7d23      	ldrb	r3, [r4, #20]
   83b6a:	f36f 0382 	bfc	r3, #2, #1
   83b6e:	7523      	strb	r3, [r4, #20]
}
   83b70:	bd38      	pop	{r3, r4, r5, pc}
   83b72:	bf00      	nop
   83b74:	200018c8 	.word	0x200018c8
   83b78:	00082d9d 	.word	0x00082d9d

00083b7c <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   83b7c:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   83b80:	0143      	lsls	r3, r0, #5
   83b82:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   83b86:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   83b8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   83b8e:	069b      	lsls	r3, r3, #26
   83b90:	d409      	bmi.n	83ba6 <udd_ep_is_halted+0x2a>
   83b92:	4b06      	ldr	r3, [pc, #24]	; (83bac <udd_ep_is_halted+0x30>)
   83b94:	3801      	subs	r0, #1
   83b96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   83b9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   83b9e:	7d00      	ldrb	r0, [r0, #20]
   83ba0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   83ba4:	4770      	bx	lr
   83ba6:	2001      	movs	r0, #1
}
   83ba8:	4770      	bx	lr
   83baa:	bf00      	nop
   83bac:	200018c8 	.word	0x200018c8

00083bb0 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83bb0:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   83bb4:	2b02      	cmp	r3, #2
   83bb6:	d82c      	bhi.n	83c12 <udd_ep_set_halt+0x62>
{
   83bb8:	b530      	push	{r4, r5, lr}
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   83bba:	4d25      	ldr	r5, [pc, #148]	; (83c50 <udd_ep_set_halt+0xa0>)
   83bbc:	0159      	lsls	r1, r3, #5
   83bbe:	eb05 1e43 	add.w	lr, r5, r3, lsl #5
   83bc2:	f8de 211c 	ldr.w	r2, [lr, #284]	; 0x11c
   83bc6:	0692      	lsls	r2, r2, #26
   83bc8:	d421      	bmi.n	83c0e <udd_ep_set_halt+0x5e>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   83bca:	4c22      	ldr	r4, [pc, #136]	; (83c54 <udd_ep_set_halt+0xa4>)
	ptr_job = &udd_ep_job[ep_index - 1];
   83bcc:	1e5a      	subs	r2, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   83bce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   83bd2:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
   83bd6:	f89c 4014 	ldrb.w	r4, [ip, #20]
   83bda:	f014 0204 	ands.w	r2, r4, #4
   83bde:	d116      	bne.n	83c0e <udd_ep_set_halt+0x5e>
	if (ptr_job->busy == true) {
   83be0:	07e4      	lsls	r4, r4, #31
   83be2:	d418      	bmi.n	83c16 <udd_ep_set_halt+0x66>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83be4:	0602      	lsls	r2, r0, #24
   83be6:	d418      	bmi.n	83c1a <udd_ep_set_halt+0x6a>
	udd_ack_stall(ep_index);
   83be8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	udd_enable_stall_handshake(ep_index);
   83bec:	2420      	movs	r4, #32
	udd_disable_endpoint_bank_autoswitch(ep_index);
   83bee:	f101 2340 	add.w	r3, r1, #1073758208	; 0x40004000
   83bf2:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   83bf6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
	return true;
   83bfa:	2001      	movs	r0, #1
	udd_disable_endpoint_bank_autoswitch(ep_index);
   83bfc:	f022 0202 	bic.w	r2, r2, #2
   83c00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   83c04:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   83c08:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
}
   83c0c:	bd30      	pop	{r4, r5, pc}
		return true; // Already STALL
   83c0e:	2001      	movs	r0, #1
}
   83c10:	bd30      	pop	{r4, r5, pc}
		return false;
   83c12:	2000      	movs	r0, #0
}
   83c14:	4770      	bx	lr
		return false;
   83c16:	4610      	mov	r0, r2
}
   83c18:	bd30      	pop	{r4, r5, pc}
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83c1a:	f8de 211c 	ldr.w	r2, [lr, #284]	; 0x11c
   83c1e:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   83c22:	d0e1      	beq.n	83be8 <udd_ep_set_halt+0x38>
			udd_enable_bank_interrupt(ep_index);
   83c24:	f44f 2480 	mov.w	r4, #262144	; 0x40000
			udd_enable_endpoint_interrupt(ep_index);
   83c28:	f44f 7280 	mov.w	r2, #256	; 0x100
			ptr_job->stall_requested = true;
   83c2c:	f89c 1014 	ldrb.w	r1, [ip, #20]
			return true;
   83c30:	2001      	movs	r0, #1
			ptr_job->stall_requested = true;
   83c32:	f041 0104 	orr.w	r1, r1, #4
   83c36:	f88c 1014 	strb.w	r1, [ip, #20]
			udd_enable_bank_interrupt(ep_index);
   83c3a:	f103 0108 	add.w	r1, r3, #8
   83c3e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   83c42:	604c      	str	r4, [r1, #4]
			udd_enable_endpoint_interrupt(ep_index);
   83c44:	6929      	ldr	r1, [r5, #16]
   83c46:	fa02 f303 	lsl.w	r3, r2, r3
   83c4a:	430b      	orrs	r3, r1
   83c4c:	612b      	str	r3, [r5, #16]
}
   83c4e:	bd30      	pop	{r4, r5, pc}
   83c50:	400a4000 	.word	0x400a4000
   83c54:	200018c8 	.word	0x200018c8

00083c58 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   83c58:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   83c5c:	2802      	cmp	r0, #2
   83c5e:	d85a      	bhi.n	83d16 <udd_ep_clear_halt+0xbe>
{
   83c60:	b570      	push	{r4, r5, r6, lr}
	ptr_job = &udd_ep_job[ep - 1];
   83c62:	f100 3cff 	add.w	ip, r0, #4294967295
	if (ptr_job->stall_requested) {
   83c66:	4c2d      	ldr	r4, [pc, #180]	; (83d1c <udd_ep_clear_halt+0xc4>)
   83c68:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
   83c6c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   83c70:	7d0b      	ldrb	r3, [r1, #20]
   83c72:	ea4f 024c 	mov.w	r2, ip, lsl #1
   83c76:	075d      	lsls	r5, r3, #29
   83c78:	d526      	bpl.n	83cc8 <udd_ep_clear_halt+0x70>
		udd_disable_bank_interrupt(ep);
   83c7a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
		udd_disable_endpoint_interrupt(ep);
   83c7e:	f44f 7e80 	mov.w	lr, #256	; 0x100
		ptr_job->stall_requested = false;
   83c82:	7d0b      	ldrb	r3, [r1, #20]
		udd_disable_endpoint_interrupt(ep);
   83c84:	fa0e fe00 	lsl.w	lr, lr, r0
		ptr_job->stall_requested = false;
   83c88:	f36f 0382 	bfc	r3, #2, #1
   83c8c:	750b      	strb	r3, [r1, #20]
		udd_disable_bank_interrupt(ep);
   83c8e:	4924      	ldr	r1, [pc, #144]	; (83d20 <udd_ep_clear_halt+0xc8>)
   83c90:	0143      	lsls	r3, r0, #5
   83c92:	eb01 1540 	add.w	r5, r1, r0, lsl #5
   83c96:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   83c9a:	6908      	ldr	r0, [r1, #16]
   83c9c:	ea20 000e 	bic.w	r0, r0, lr
   83ca0:	6108      	str	r0, [r1, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   83ca2:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
   83ca6:	068d      	lsls	r5, r1, #26
   83ca8:	d417      	bmi.n	83cda <udd_ep_clear_halt+0x82>
		if (ptr_job->busy == true) {
   83caa:	eb02 030c 	add.w	r3, r2, ip
   83cae:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   83cb2:	7d11      	ldrb	r1, [r2, #20]
   83cb4:	00db      	lsls	r3, r3, #3
   83cb6:	07c8      	lsls	r0, r1, #31
   83cb8:	d504      	bpl.n	83cc4 <udd_ep_clear_halt+0x6c>
			ptr_job->busy = false;
   83cba:	f36f 0100 	bfc	r1, #0, #1
			ptr_job->call_nohalt();
   83cbe:	58e3      	ldr	r3, [r4, r3]
			ptr_job->busy = false;
   83cc0:	7511      	strb	r1, [r2, #20]
			ptr_job->call_nohalt();
   83cc2:	4798      	blx	r3
	return true;
   83cc4:	2001      	movs	r0, #1
}
   83cc6:	bd70      	pop	{r4, r5, r6, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   83cc8:	0143      	lsls	r3, r0, #5
   83cca:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   83cce:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   83cd2:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   83cd6:	0689      	lsls	r1, r1, #26
   83cd8:	d5f4      	bpl.n	83cc4 <udd_ep_clear_halt+0x6c>
		if (Is_udd_stall(ep)) {
   83cda:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   83cde:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   83ce2:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
   83ce6:	0486      	lsls	r6, r0, #18
   83ce8:	d506      	bpl.n	83cf8 <udd_ep_clear_halt+0xa0>
			udd_ack_stall(ep);
   83cea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   83cee:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
			udd_reset_data_toggle(ep);
   83cf2:	2040      	movs	r0, #64	; 0x40
   83cf4:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   83cf8:	2020      	movs	r0, #32
   83cfa:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   83cfe:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   83d02:	460b      	mov	r3, r1
   83d04:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   83d08:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   83d0c:	f041 0102 	orr.w	r1, r1, #2
   83d10:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (b_stall_cleared) {
   83d14:	e7c9      	b.n	83caa <udd_ep_clear_halt+0x52>
		return false;
   83d16:	2000      	movs	r0, #0
}
   83d18:	4770      	bx	lr
   83d1a:	bf00      	nop
   83d1c:	200018c8 	.word	0x200018c8
   83d20:	400a4000 	.word	0x400a4000

00083d24 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   83d24:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   83d28:	2802      	cmp	r0, #2
   83d2a:	d857      	bhi.n	83ddc <udd_ep_run+0xb8>
{
   83d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   83d30:	ea4f 1c40 	mov.w	ip, r0, lsl #5
   83d34:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
   83d38:	f50c 2c20 	add.w	ip, ip, #655360	; 0xa0000
   83d3c:	f8dc 410c 	ldr.w	r4, [ip, #268]	; 0x10c
   83d40:	07e5      	lsls	r5, r4, #31
   83d42:	d548      	bpl.n	83dd6 <udd_ep_run+0xb2>
			|| Is_udd_endpoint_stall_requested(ep)
   83d44:	f8dc 411c 	ldr.w	r4, [ip, #284]	; 0x11c
   83d48:	06a4      	lsls	r4, r4, #26
   83d4a:	d444      	bmi.n	83dd6 <udd_ep_run+0xb2>
	ptr_job = &udd_ep_job[ep - 1];
   83d4c:	1e45      	subs	r5, r0, #1
			|| ptr_job->stall_requested) {
   83d4e:	4e28      	ldr	r6, [pc, #160]	; (83df0 <udd_ep_run+0xcc>)
   83d50:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
   83d54:	eb06 0ccc 	add.w	ip, r6, ip, lsl #3
   83d58:	f89c 4014 	ldrb.w	r4, [ip, #20]
   83d5c:	006f      	lsls	r7, r5, #1
   83d5e:	f014 0e04 	ands.w	lr, r4, #4
   83d62:	d138      	bne.n	83dd6 <udd_ep_run+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83d64:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83d68:	b672      	cpsid	i
   83d6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83d6e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 83df4 <udd_ep_run+0xd0>
   83d72:	f888 e000 	strb.w	lr, [r8]
	if (ptr_job->busy == true) {
   83d76:	f89c e014 	ldrb.w	lr, [ip, #20]
   83d7a:	f01e 0f01 	tst.w	lr, #1
   83d7e:	d129      	bne.n	83dd4 <udd_ep_run+0xb0>
	ptr_job->busy = true;
   83d80:	f89c e014 	ldrb.w	lr, [ip, #20]
   83d84:	f04e 0e01 	orr.w	lr, lr, #1
   83d88:	f88c e014 	strb.w	lr, [ip, #20]
	if (cpu_irq_is_enabled_flags(flags))
   83d8c:	b92c      	cbnz	r4, 83d9a <udd_ep_run+0x76>
		cpu_irq_enable();
   83d8e:	2401      	movs	r4, #1
   83d90:	f888 4000 	strb.w	r4, [r8]
   83d94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83d98:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
   83d9a:	f04f 0c00 	mov.w	ip, #0
	ptr_job->call_trans = callback;
   83d9e:	f8dd e018 	ldr.w	lr, [sp, #24]
	ptr_job->buf = buf;
   83da2:	197c      	adds	r4, r7, r5
	ptr_job->call_trans = callback;
   83da4:	f846 e034 	str.w	lr, [r6, r4, lsl #3]
	ptr_job->buf = buf;
   83da8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	ptr_job->buf_size = buf_size;
   83dac:	e9c4 2301 	strd	r2, r3, [r4, #4]
	ptr_job->buf_load = 0;
   83db0:	e9c4 cc03 	strd	ip, ip, [r4, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83db4:	b911      	cbnz	r1, 83dbc <udd_ep_run+0x98>
   83db6:	fab3 f183 	clz	r1, r3
   83dba:	0949      	lsrs	r1, r1, #5
   83dbc:	197b      	adds	r3, r7, r5
   83dbe:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   83dc2:	7d1a      	ldrb	r2, [r3, #20]
   83dc4:	f361 0241 	bfi	r2, r1, #1, #1
   83dc8:	751a      	strb	r2, [r3, #20]
	udd_ep_trans_done(ep);
   83dca:	490b      	ldr	r1, [pc, #44]	; (83df8 <udd_ep_run+0xd4>)
   83dcc:	4788      	blx	r1
	return true;
   83dce:	2001      	movs	r0, #1
}
   83dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cpu_irq_is_enabled_flags(flags))
   83dd4:	b124      	cbz	r4, 83de0 <udd_ep_run+0xbc>
		return false;
   83dd6:	2000      	movs	r0, #0
}
   83dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   83ddc:	2000      	movs	r0, #0
}
   83dde:	4770      	bx	lr
		cpu_irq_enable();
   83de0:	2301      	movs	r3, #1
   83de2:	f888 3000 	strb.w	r3, [r8]
   83de6:	f3bf 8f5f 	dmb	sy
   83dea:	b662      	cpsie	i
		return false; // Job already on going
   83dec:	4620      	mov	r0, r4
}
   83dee:	e7f3      	b.n	83dd8 <udd_ep_run+0xb4>
   83df0:	200018c8 	.word	0x200018c8
   83df4:	2000032c 	.word	0x2000032c
   83df8:	00082ddd 	.word	0x00082ddd

00083dfc <udd_ep_alloc>:
{
   83dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ep = ep & USB_EP_ADDR_MASK;
   83e00:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   83e04:	2c02      	cmp	r4, #2
{
   83e06:	b085      	sub	sp, #20
	if (ep > USB_DEVICE_MAX_EP) {
   83e08:	f200 80d4 	bhi.w	83fb4 <udd_ep_alloc+0x1b8>
	if (Is_udd_endpoint_enabled(ep)) {
   83e0c:	0165      	lsls	r5, r4, #5
   83e0e:	f105 2640 	add.w	r6, r5, #1073758208	; 0x40004000
   83e12:	f506 2620 	add.w	r6, r6, #655360	; 0xa0000
   83e16:	f8d6 710c 	ldr.w	r7, [r6, #268]	; 0x10c
   83e1a:	f017 0701 	ands.w	r7, r7, #1
   83e1e:	f040 80c9 	bne.w	83fb4 <udd_ep_alloc+0x1b8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   83e22:	f001 0c03 	and.w	ip, r1, #3
   83e26:	f1bc 0f01 	cmp.w	ip, #1
   83e2a:	f000 80c7 	beq.w	83fbc <udd_ep_alloc+0x1c0>
   83e2e:	f1ac 0c02 	sub.w	ip, ip, #2
   83e32:	f1bc 0f01 	cmp.w	ip, #1
   83e36:	f200 80bd 	bhi.w	83fb4 <udd_ep_alloc+0x1b8>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   83e3a:	f412 5ec0 	ands.w	lr, r2, #6144	; 0x1800
   83e3e:	f040 80b9 	bne.w	83fb4 <udd_ep_alloc+0x1b8>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   83e42:	46f4      	mov	ip, lr
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   83e44:	f105 2640 	add.w	r6, r5, #1073758208	; 0x40004000
   83e48:	f506 2620 	add.w	r6, r6, #655360	; 0xa0000
   83e4c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   83e50:	f010 0f80 	tst.w	r0, #128	; 0x80
   83e54:	bf18      	it	ne
   83e56:	2708      	movne	r7, #8
   83e58:	0109      	lsls	r1, r1, #4
   83e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83e5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   83e62:	f001 0030 	and.w	r0, r1, #48	; 0x30
   83e66:	f023 0303 	bic.w	r3, r3, #3
   83e6a:	f080 80ba 	bcs.w	83fe2 <udd_ep_alloc+0x1e6>
   83e6e:	2a08      	cmp	r2, #8
   83e70:	bf38      	it	cc
   83e72:	2208      	movcc	r2, #8
   83e74:	0052      	lsls	r2, r2, #1
   83e76:	3a01      	subs	r2, #1
   83e78:	fab2 f282 	clz	r2, r2
   83e7c:	f1c2 021c 	rsb	r2, r2, #28
   83e80:	f1be 0f00 	cmp.w	lr, #0
   83e84:	d001      	beq.n	83e8a <udd_ep_alloc+0x8e>
   83e86:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   83e8a:	4303      	orrs	r3, r0
   83e8c:	433b      	orrs	r3, r7
   83e8e:	4313      	orrs	r3, r2
   83e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83e94:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   83e98:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   83e9c:	2b00      	cmp	r3, #0
   83e9e:	f280 8089 	bge.w	83fb4 <udd_ep_alloc+0x1b8>
	udd_enable_endpoint(ep);
   83ea2:	f04f 0c01 	mov.w	ip, #1
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   83ea6:	2302      	movs	r3, #2
	ep_allocated = 0;
   83ea8:	2500      	movs	r5, #0
		if (Is_udd_endpoint_enabled(i)) {
   83eaa:	4f5c      	ldr	r7, [pc, #368]	; (8401c <udd_ep_alloc+0x220>)
	udd_enable_endpoint(ep);
   83eac:	f8c6 c104 	str.w	ip, [r6, #260]	; 0x104
		if (Is_udd_endpoint_enabled(i)) {
   83eb0:	eb07 1043 	add.w	r0, r7, r3, lsl #5
   83eb4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   83eb8:	1e5e      	subs	r6, r3, #1
		if (Is_udd_endpoint_enabled(i)) {
   83eba:	07c9      	lsls	r1, r1, #31
   83ebc:	ea4f 1243 	mov.w	r2, r3, lsl #5
   83ec0:	d514      	bpl.n	83eec <udd_ep_alloc+0xf0>
   83ec2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   83ec6:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   83eca:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   83ece:	005b      	lsls	r3, r3, #1
			udd_disable_endpoint(i);
   83ed0:	f8c0 c108 	str.w	ip, [r0, #264]	; 0x108
			ep_allocated |=  bank << (i * 2);
   83ed4:	f3c1 1181 	ubfx	r1, r1, #6, #2
   83ed8:	fa01 f303 	lsl.w	r3, r1, r3
			udd_configure_endpoint_bank(i, 0);
   83edc:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   83ee0:	432b      	orrs	r3, r5
			udd_configure_endpoint_bank(i, 0);
   83ee2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
			ep_allocated |=  bank << (i * 2);
   83ee6:	b29d      	uxth	r5, r3
			udd_configure_endpoint_bank(i, 0);
   83ee8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   83eec:	b2f3      	uxtb	r3, r6
   83eee:	429c      	cmp	r4, r3
   83ef0:	d9de      	bls.n	83eb0 <udd_ep_alloc+0xb4>
   83ef2:	4f4b      	ldr	r7, [pc, #300]	; (84020 <udd_ep_alloc+0x224>)
   83ef4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   83ef8:	b2e0      	uxtb	r0, r4
   83efa:	4686      	mov	lr, r0
   83efc:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   83f00:	e007      	b.n	83f12 <udd_ep_alloc+0x116>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   83f02:	3401      	adds	r4, #1
   83f04:	fa5f fe84 	uxtb.w	lr, r4
   83f08:	f1be 0f02 	cmp.w	lr, #2
   83f0c:	f106 0618 	add.w	r6, r6, #24
   83f10:	d869      	bhi.n	83fe6 <udd_ep_alloc+0x1ea>
		udd_enable_endpoint_bank_autoswitch(i);
   83f12:	f104 38ff 	add.w	r8, r4, #4294967295
		bank = (ep_allocated >> (i * 2)) & 0x03;
   83f16:	0062      	lsls	r2, r4, #1
		bool b_restart = ptr_job->busy;
   83f18:	eb08 0c48 	add.w	ip, r8, r8, lsl #1
		bank = (ep_allocated >> (i * 2)) & 0x03;
   83f1c:	fa45 f202 	asr.w	r2, r5, r2
		bool b_restart = ptr_job->busy;
   83f20:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   83f24:	ea4f 0348 	mov.w	r3, r8, lsl #1
		if (bank == 0) {
   83f28:	f012 0203 	ands.w	r2, r2, #3
   83f2c:	46f3      	mov	fp, lr
		bool b_restart = ptr_job->busy;
   83f2e:	f10c 0910 	add.w	r9, ip, #16
   83f32:	9303      	str	r3, [sp, #12]
		if (bank == 0) {
   83f34:	d0e5      	beq.n	83f02 <udd_ep_alloc+0x106>
   83f36:	0163      	lsls	r3, r4, #5
   83f38:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   83f3c:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   83f40:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
		bool b_restart = ptr_job->busy;
   83f44:	f89c 0014 	ldrb.w	r0, [ip, #20]
		udd_configure_endpoint_bank(i, bank);
   83f48:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   83f4c:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   83f50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   83f54:	2201      	movs	r2, #1
		ptr_job->busy = false;
   83f56:	4682      	mov	sl, r0
		udd_enable_endpoint(i);
   83f58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   83f5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		ptr_job->busy = false;
   83f60:	f36f 0a00 	bfc	sl, #0, #1
		if (!Is_udd_endpoint_mapped(i)) {
   83f64:	2a00      	cmp	r2, #0
		bool b_restart = ptr_job->busy;
   83f66:	f000 0001 	and.w	r0, r0, #1
		ptr_job->busy = false;
   83f6a:	f889 a004 	strb.w	sl, [r9, #4]
		if (!Is_udd_endpoint_mapped(i)) {
   83f6e:	da3f      	bge.n	83ff0 <udd_ep_alloc+0x1f4>
		udd_enable_endpoint_bank_autoswitch(i);
   83f70:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   83f74:	f042 0202 	orr.w	r2, r2, #2
   83f78:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   83f7c:	2800      	cmp	r0, #0
   83f7e:	d0c0      	beq.n	83f02 <udd_ep_alloc+0x106>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   83f80:	e956 3203 	ldrd	r3, r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   83f84:	f856 1c10 	ldr.w	r1, [r6, #-16]
   83f88:	f856 cc14 	ldr.w	ip, [r6, #-20]
   83f8c:	4411      	add	r1, r2
			ptr_job->buf_cnt -= ptr_job->buf_load;
   83f8e:	1a9a      	subs	r2, r3, r2
   83f90:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   83f94:	1acb      	subs	r3, r1, r3
   83f96:	4462      	add	r2, ip
					ptr_job->b_shortpacket,
   83f98:	f899 1004 	ldrb.w	r1, [r9, #4]
			b_restart = udd_ep_run(i,
   83f9c:	f856 cc18 	ldr.w	ip, [r6, #-24]
   83fa0:	4670      	mov	r0, lr
   83fa2:	f8cd c000 	str.w	ip, [sp]
   83fa6:	f3c1 0140 	ubfx	r1, r1, #1, #1
   83faa:	f8df c078 	ldr.w	ip, [pc, #120]	; 84024 <udd_ep_alloc+0x228>
   83fae:	47e0      	blx	ip
			if (!b_restart) {
   83fb0:	2800      	cmp	r0, #0
   83fb2:	d1a6      	bne.n	83f02 <udd_ep_alloc+0x106>
			return false;
   83fb4:	2000      	movs	r0, #0
}
   83fb6:	b005      	add	sp, #20
   83fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   83fbc:	2c00      	cmp	r4, #0
   83fbe:	f43f af3c 	beq.w	83e3a <udd_ep_alloc+0x3e>
		switch(MaxEndpointSize & (0x3u << 11)) {
   83fc2:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   83fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   83fca:	d00e      	beq.n	83fea <udd_ep_alloc+0x1ee>
			nb_tran = 3;
   83fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   83fd0:	bf08      	it	eq
   83fd2:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   83fd6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   83fda:	f04f 0e01 	mov.w	lr, #1
   83fde:	b292      	uxth	r2, r2
   83fe0:	e730      	b.n	83e44 <udd_ep_alloc+0x48>
   83fe2:	2207      	movs	r2, #7
   83fe4:	e74c      	b.n	83e80 <udd_ep_alloc+0x84>
	return true;
   83fe6:	2001      	movs	r0, #1
   83fe8:	e7e5      	b.n	83fb6 <udd_ep_alloc+0x1ba>
		switch(MaxEndpointSize & (0x3u << 11)) {
   83fea:	f04f 0c02 	mov.w	ip, #2
   83fee:	e7f2      	b.n	83fd6 <udd_ep_alloc+0x1da>
			if (NULL == ptr_job->call_trans) {
   83ff0:	f8dc 3000 	ldr.w	r3, [ip]
   83ff4:	2b00      	cmp	r3, #0
   83ff6:	d0dd      	beq.n	83fb4 <udd_ep_alloc+0x1b8>
			if (Is_udd_endpoint_in(i)) {
   83ff8:	4a08      	ldr	r2, [pc, #32]	; (8401c <udd_ep_alloc+0x220>)
   83ffa:	3408      	adds	r4, #8
   83ffc:	0164      	lsls	r4, r4, #5
   83ffe:	5912      	ldr	r2, [r2, r4]
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84000:	2001      	movs	r0, #1
			if (Is_udd_endpoint_in(i)) {
   84002:	0712      	lsls	r2, r2, #28
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84004:	9a03      	ldr	r2, [sp, #12]
				i |= USB_EP_DIR_IN;
   84006:	bf48      	it	mi
   84008:	f04e 0b80 	orrmi.w	fp, lr, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8400c:	4442      	add	r2, r8
   8400e:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
   84012:	68f9      	ldr	r1, [r7, #12]
   84014:	465a      	mov	r2, fp
   84016:	4798      	blx	r3
   84018:	e7cc      	b.n	83fb4 <udd_ep_alloc+0x1b8>
   8401a:	bf00      	nop
   8401c:	400a4000 	.word	0x400a4000
   84020:	200018c8 	.word	0x200018c8
   84024:	00083d25 	.word	0x00083d25

00084028 <udd_ep_abort>:
	udd_endpoint_dma_set_control(ep_index, 0);
   84028:	2100      	movs	r1, #0
   8402a:	4b17      	ldr	r3, [pc, #92]	; (84088 <udd_ep_abort+0x60>)
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8402c:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   84030:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	if (ep & USB_EP_DIR_IN) {
   84034:	0600      	lsls	r0, r0, #24
{
   84036:	b410      	push	{r4}
	udd_endpoint_dma_set_control(ep_index, 0);
   84038:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   8403a:	d40a      	bmi.n	84052 <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8403c:	4c13      	ldr	r4, [pc, #76]	; (8408c <udd_ep_abort+0x64>)
   8403e:	4814      	ldr	r0, [pc, #80]	; (84090 <udd_ep_abort+0x68>)
   84040:	1e53      	subs	r3, r2, #1
   84042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84046:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   8404a:	2101      	movs	r1, #1
   8404c:	4623      	mov	r3, r4
}
   8404e:	bc10      	pop	{r4}
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84050:	4718      	bx	r3
		for(;udd_nb_busy_bank(ep_index);) {
   84052:	0153      	lsls	r3, r2, #5
   84054:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84058:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8405c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   84060:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   84064:	d0ea      	beq.n	8403c <udd_ep_abort+0x14>
			udd_kill_last_in_bank(ep_index);
   84066:	f44f 7400 	mov.w	r4, #512	; 0x200
   8406a:	f503 7c8a 	add.w	ip, r3, #276	; 0x114
   8406e:	f8cc 4000 	str.w	r4, [ip]
			while(Is_udd_kill_last(ep_index));
   84072:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   84076:	0589      	lsls	r1, r1, #22
   84078:	d4fb      	bmi.n	84072 <udd_ep_abort+0x4a>
		for(;udd_nb_busy_bank(ep_index);) {
   8407a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   8407e:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   84082:	d1f4      	bne.n	8406e <udd_ep_abort+0x46>
   84084:	e7da      	b.n	8403c <udd_ep_abort+0x14>
   84086:	bf00      	nop
   84088:	400a4300 	.word	0x400a4300
   8408c:	00082d9d 	.word	0x00082d9d
   84090:	200018c8 	.word	0x200018c8

00084094 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   84094:	4a07      	ldr	r2, [pc, #28]	; (840b4 <udd_test_mode_j+0x20>)
   84096:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8409a:	f023 0303 	bic.w	r3, r3, #3
   8409e:	f043 0302 	orr.w	r3, r3, #2
   840a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   840a6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   840aa:	f043 0304 	orr.w	r3, r3, #4
   840ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   840b2:	4770      	bx	lr
   840b4:	400a4000 	.word	0x400a4000

000840b8 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   840b8:	4a07      	ldr	r2, [pc, #28]	; (840d8 <udd_test_mode_k+0x20>)
   840ba:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   840be:	f023 0303 	bic.w	r3, r3, #3
   840c2:	f043 0302 	orr.w	r3, r3, #2
   840c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   840ca:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   840ce:	f043 0308 	orr.w	r3, r3, #8
   840d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   840d6:	4770      	bx	lr
   840d8:	400a4000 	.word	0x400a4000

000840dc <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   840dc:	4a04      	ldr	r2, [pc, #16]	; (840f0 <udd_test_mode_se0_nak+0x14>)
   840de:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   840e2:	f023 0303 	bic.w	r3, r3, #3
   840e6:	f043 0302 	orr.w	r3, r3, #2
   840ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   840ee:	4770      	bx	lr
   840f0:	400a4000 	.word	0x400a4000

000840f4 <udd_test_mode_packet>:
{
   840f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   840f8:	b08f      	sub	sp, #60	; 0x3c
	const uint8_t test_packet[] = {
   840fa:	466e      	mov	r6, sp
	udd_disable_endpoint(0);
   840fc:	f04f 0901 	mov.w	r9, #1
	udd_enable_hs_test_mode_packet();
   84100:	46ec      	mov	ip, sp
	const uint8_t test_packet[] = {
   84102:	4f22      	ldr	r7, [pc, #136]	; (8418c <udd_test_mode_packet+0x98>)
	udd_disable_endpoint(0);
   84104:	f8df 8088 	ldr.w	r8, [pc, #136]	; 84190 <udd_test_mode_packet+0x9c>
	const uint8_t test_packet[] = {
   84108:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   8410a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   8410c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   8410e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   84110:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   84112:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   84114:	e897 0003 	ldmia.w	r7, {r0, r1}
   84118:	f846 0b04 	str.w	r0, [r6], #4
   8411c:	7031      	strb	r1, [r6, #0]
	udd_disable_endpoint(0);
   8411e:	f8c8 9108 	str.w	r9, [r8, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   84122:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   84126:	f1cc 5400 	rsb	r4, ip, #536870912	; 0x20000000
   8412a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8412e:	f023 0303 	bic.w	r3, r3, #3
   84132:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   84136:	f8c8 3100 	str.w	r3, [r8, #256]	; 0x100
	udd_enable_endpoint(0);
   8413a:	f8c8 9104 	str.w	r9, [r8, #260]	; 0x104
	udd_enable_hs_test_mode();
   8413e:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   84142:	f04f 0e00 	mov.w	lr, #0
	udd_enable_hs_test_mode();
   84146:	f023 0303 	bic.w	r3, r3, #3
   8414a:	f043 0302 	orr.w	r3, r3, #2
   8414e:	f8c8 30e0 	str.w	r3, [r8, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   84152:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
   84156:	ad0d      	add	r5, sp, #52	; 0x34
   84158:	f043 0310 	orr.w	r3, r3, #16
   8415c:	f504 14c0 	add.w	r4, r4, #1572864	; 0x180000
   84160:	f8c8 30e0 	str.w	r3, [r8, #224]	; 0xe0
	for (i = 0; i < sizeof(test_packet); i++) {
   84164:	e001      	b.n	8416a <udd_test_mode_packet+0x76>
		*ptr_dest++ = *ptr_src++;
   84166:	f81c ef01 	ldrb.w	lr, [ip, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   8416a:	45ac      	cmp	ip, r5
		*ptr_dest++ = *ptr_src++;
   8416c:	f804 e00c 	strb.w	lr, [r4, ip]
	for (i = 0; i < sizeof(test_packet); i++) {
   84170:	d1f9      	bne.n	84166 <udd_test_mode_packet+0x72>
	udd_ack_in_send(0);
   84172:	f44f 6180 	mov.w	r1, #1024	; 0x400
	udd_raise_tx_pkt_ready(0);
   84176:	f44f 6200 	mov.w	r2, #2048	; 0x800
	udd_ack_in_send(0);
   8417a:	4b05      	ldr	r3, [pc, #20]	; (84190 <udd_test_mode_packet+0x9c>)
   8417c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84180:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   84184:	b00f      	add	sp, #60	; 0x3c
   84186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8418a:	bf00      	nop
   8418c:	0008be6c 	.word	0x0008be6c
   84190:	400a4000 	.word	0x400a4000

00084194 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84194:	3801      	subs	r0, #1
   84196:	2802      	cmp	r0, #2
   84198:	d81a      	bhi.n	841d0 <_write+0x3c>
		return -1;
	}

	for (; len != 0; --len) {
   8419a:	b1da      	cbz	r2, 841d4 <_write+0x40>
{
   8419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   841a0:	460d      	mov	r5, r1
	for (; len != 0; --len) {
   841a2:	4614      	mov	r4, r2
   841a4:	4f0c      	ldr	r7, [pc, #48]	; (841d8 <_write+0x44>)
   841a6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 841dc <_write+0x48>
   841aa:	1c56      	adds	r6, r2, #1
   841ac:	e001      	b.n	841b2 <_write+0x1e>
   841ae:	3c01      	subs	r4, #1
   841b0:	d00b      	beq.n	841ca <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   841b2:	6838      	ldr	r0, [r7, #0]
   841b4:	f8d8 3000 	ldr.w	r3, [r8]
   841b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   841bc:	4798      	blx	r3
   841be:	2800      	cmp	r0, #0
   841c0:	eba6 0204 	sub.w	r2, r6, r4
   841c4:	daf3      	bge.n	841ae <_write+0x1a>
		return -1;
   841c6:	f04f 32ff 	mov.w	r2, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   841ca:	4610      	mov	r0, r2
   841cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   841d0:	f04f 32ff 	mov.w	r2, #4294967295
}
   841d4:	4610      	mov	r0, r2
   841d6:	4770      	bx	lr
   841d8:	20001914 	.word	0x20001914
   841dc:	20001910 	.word	0x20001910

000841e0 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   841e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   841e4:	234f      	movs	r3, #79	; 0x4f
   841e6:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   841e8:	4c0c      	ldr	r4, [pc, #48]	; (8421c <LED_Off+0x3c>)
   841ea:	42ab      	cmp	r3, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   841ec:	4f0c      	ldr	r7, [pc, #48]	; (84220 <LED_Off+0x40>)
				gpio_set_pin_low(led_gpio);
   841ee:	f8df 8034 	ldr.w	r8, [pc, #52]	; 84224 <LED_Off+0x44>
   841f2:	f104 0610 	add.w	r6, r4, #16
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   841f6:	d005      	beq.n	84204 <LED_Off+0x24>
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   841f8:	42b4      	cmp	r4, r6
   841fa:	d00a      	beq.n	84212 <LED_Off+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   841fc:	f854 3f08 	ldr.w	r3, [r4, #8]!
   84200:	42ab      	cmp	r3, r5
   84202:	d1f9      	bne.n	841f8 <LED_Off+0x18>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   84204:	6863      	ldr	r3, [r4, #4]
				gpio_set_pin_low(led_gpio);
   84206:	4628      	mov	r0, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   84208:	2b01      	cmp	r3, #1
   8420a:	d004      	beq.n	84216 <LED_Off+0x36>
				gpio_set_pin_high(led_gpio);
   8420c:	47b8      	blx	r7
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8420e:	42b4      	cmp	r4, r6
   84210:	d1f4      	bne.n	841fc <LED_Off+0x1c>
			}
		}
	}
}
   84212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				gpio_set_pin_low(led_gpio);
   84216:	47c0      	blx	r8
   84218:	e7ee      	b.n	841f8 <LED_Off+0x18>
   8421a:	bf00      	nop
   8421c:	0008bea4 	.word	0x0008bea4
   84220:	00084745 	.word	0x00084745
   84224:	00084761 	.word	0x00084761

00084228 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   84228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8422c:	234f      	movs	r3, #79	; 0x4f
   8422e:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84230:	4c0c      	ldr	r4, [pc, #48]	; (84264 <LED_On+0x3c>)
   84232:	42ab      	cmp	r3, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   84234:	4f0c      	ldr	r7, [pc, #48]	; (84268 <LED_On+0x40>)
				gpio_set_pin_high(led_gpio);
   84236:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8426c <LED_On+0x44>
   8423a:	f104 0610 	add.w	r6, r4, #16
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8423e:	d005      	beq.n	8424c <LED_On+0x24>
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84240:	42b4      	cmp	r4, r6
   84242:	d00a      	beq.n	8425a <LED_On+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84244:	f854 3f08 	ldr.w	r3, [r4, #8]!
   84248:	42ab      	cmp	r3, r5
   8424a:	d1f9      	bne.n	84240 <LED_On+0x18>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   8424c:	6863      	ldr	r3, [r4, #4]
				gpio_set_pin_high(led_gpio);
   8424e:	4628      	mov	r0, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   84250:	2b01      	cmp	r3, #1
   84252:	d004      	beq.n	8425e <LED_On+0x36>
				gpio_set_pin_low(led_gpio);
   84254:	47b8      	blx	r7
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84256:	42b4      	cmp	r4, r6
   84258:	d1f4      	bne.n	84244 <LED_On+0x1c>
			}
		}
	}
}
   8425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				gpio_set_pin_high(led_gpio);
   8425e:	47c0      	blx	r8
   84260:	e7ee      	b.n	84240 <LED_On+0x18>
   84262:	bf00      	nop
   84264:	0008bea4 	.word	0x0008bea4
   84268:	00084761 	.word	0x00084761
   8426c:	00084745 	.word	0x00084745

00084270 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   84270:	4917      	ldr	r1, [pc, #92]	; (842d0 <Reset_Handler+0x60>)
   84272:	4818      	ldr	r0, [pc, #96]	; (842d4 <Reset_Handler+0x64>)
{
   84274:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   84276:	4281      	cmp	r1, r0
   84278:	d009      	beq.n	8428e <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   8427a:	4a17      	ldr	r2, [pc, #92]	; (842d8 <Reset_Handler+0x68>)
   8427c:	4290      	cmp	r0, r2
   8427e:	d206      	bcs.n	8428e <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   84280:	3a01      	subs	r2, #1
   84282:	1a12      	subs	r2, r2, r0
   84284:	f022 0203 	bic.w	r2, r2, #3
   84288:	4b14      	ldr	r3, [pc, #80]	; (842dc <Reset_Handler+0x6c>)
   8428a:	3204      	adds	r2, #4
   8428c:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8428e:	4814      	ldr	r0, [pc, #80]	; (842e0 <Reset_Handler+0x70>)
   84290:	4a14      	ldr	r2, [pc, #80]	; (842e4 <Reset_Handler+0x74>)
   84292:	4290      	cmp	r0, r2
   84294:	d207      	bcs.n	842a6 <Reset_Handler+0x36>
		*pDest++ = 0;
   84296:	3a01      	subs	r2, #1
   84298:	1a12      	subs	r2, r2, r0
   8429a:	f022 0203 	bic.w	r2, r2, #3
   8429e:	2100      	movs	r1, #0
   842a0:	4b11      	ldr	r3, [pc, #68]	; (842e8 <Reset_Handler+0x78>)
   842a2:	3204      	adds	r2, #4
   842a4:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   842a6:	4b11      	ldr	r3, [pc, #68]	; (842ec <Reset_Handler+0x7c>)
   842a8:	4911      	ldr	r1, [pc, #68]	; (842f0 <Reset_Handler+0x80>)
   842aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   842ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   842b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   842b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   842ba:	608a      	str	r2, [r1, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   842bc:	d203      	bcs.n	842c6 <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   842be:	688b      	ldr	r3, [r1, #8]
   842c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   842c4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   842c6:	4b0b      	ldr	r3, [pc, #44]	; (842f4 <Reset_Handler+0x84>)
   842c8:	4798      	blx	r3

	/* Branch to main function */
	main();
   842ca:	4b0b      	ldr	r3, [pc, #44]	; (842f8 <Reset_Handler+0x88>)
   842cc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   842ce:	e7fe      	b.n	842ce <Reset_Handler+0x5e>
   842d0:	0008c304 	.word	0x0008c304
   842d4:	20000000 	.word	0x20000000
   842d8:	20000d70 	.word	0x20000d70
   842dc:	00084f09 	.word	0x00084f09
   842e0:	20000d70 	.word	0x20000d70
   842e4:	2000197c 	.word	0x2000197c
   842e8:	00084ff5 	.word	0x00084ff5
   842ec:	00080000 	.word	0x00080000
   842f0:	e000ed00 	.word	0xe000ed00
   842f4:	00084e99 	.word	0x00084e99
   842f8:	000804a5 	.word	0x000804a5

000842fc <spi_enable_clock>:
   842fc:	2014      	movs	r0, #20
   842fe:	4b01      	ldr	r3, [pc, #4]	; (84304 <spi_enable_clock+0x8>)
   84300:	4718      	bx	r3
   84302:	bf00      	nop
   84304:	000845a9 	.word	0x000845a9

00084308 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   84308:	b510      	push	{r4, lr}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   8430a:	f643 2c99 	movw	ip, #15001	; 0x3a99
{
   8430e:	4686      	mov	lr, r0
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   84310:	e002      	b.n	84318 <spi_write+0x10>
		if (!timeout--) {
   84312:	f1bc 0c01 	subs.w	ip, ip, #1
   84316:	d012      	beq.n	8433e <spi_write+0x36>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   84318:	f8de 4010 	ldr.w	r4, [lr, #16]
   8431c:	07a4      	lsls	r4, r4, #30
   8431e:	d5f8      	bpl.n	84312 <spi_write+0xa>
	if (p_spi->SPI_MR & SPI_MR_PS) {
   84320:	f8de 0004 	ldr.w	r0, [lr, #4]
   84324:	0780      	lsls	r0, r0, #30
   84326:	d506      	bpl.n	84336 <spi_write+0x2e>
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   84328:	0412      	lsls	r2, r2, #16
   8432a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8432e:	4311      	orrs	r1, r2
		if (uc_last) {
   84330:	b10b      	cbz	r3, 84336 <spi_write+0x2e>
			value |= SPI_TDR_LASTXFER;
   84332:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   84336:	f8ce 100c 	str.w	r1, [lr, #12]

	return SPI_OK;
   8433a:	2000      	movs	r0, #0
}
   8433c:	bd10      	pop	{r4, pc}
			return SPI_ERROR_TIMEOUT;
   8433e:	2001      	movs	r0, #1
}
   84340:	bd10      	pop	{r4, pc}
   84342:	bf00      	nop

00084344 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   84344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   84348:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if (ul_polarity) {
   8434a:	b11a      	cbz	r2, 84354 <spi_set_clock_polarity+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8434c:	f043 0301 	orr.w	r3, r3, #1
   84350:	6303      	str	r3, [r0, #48]	; 0x30
   84352:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   84354:	f023 0301 	bic.w	r3, r3, #1
   84358:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   8435a:	4770      	bx	lr

0008435c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   8435c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   84360:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if (ul_phase) {
   84362:	b11a      	cbz	r2, 8436c <spi_set_clock_phase+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   84364:	f043 0302 	orr.w	r3, r3, #2
   84368:	6303      	str	r3, [r0, #48]	; 0x30
   8436a:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8436c:	f023 0302 	bic.w	r3, r3, #2
   84370:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   84372:	4770      	bx	lr

00084374 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   84374:	1e43      	subs	r3, r0, #1
   84376:	440b      	add	r3, r1
   84378:	fbb3 f0f0 	udiv	r0, r3, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8437c:	1e43      	subs	r3, r0, #1
   8437e:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   84380:	bf94      	ite	ls
   84382:	b200      	sxthls	r0, r0
		return -1;
   84384:	f04f 30ff 	movhi.w	r0, #4294967295
}
   84388:	4770      	bx	lr
   8438a:	bf00      	nop

0008438c <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8438c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84390:	6b08      	ldr	r0, [r1, #48]	; 0x30
   84392:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
   84396:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   84398:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8439a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8439e:	630b      	str	r3, [r1, #48]	; 0x30
}
   843a0:	4770      	bx	lr
   843a2:	bf00      	nop

000843a4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   843a4:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   843a6:	203e      	movs	r0, #62	; 0x3e
   843a8:	4b07      	ldr	r3, [pc, #28]	; (843c8 <sysclk_enable_usb+0x24>)
   843aa:	4798      	blx	r3
		break;
   843ac:	4c07      	ldr	r4, [pc, #28]	; (843cc <sysclk_enable_usb+0x28>)
		return pmc_osc_is_ready_main_xtal();
   843ae:	47a0      	blx	r4
   843b0:	2800      	cmp	r0, #0
   843b2:	d0fc      	beq.n	843ae <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   843b4:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   843b8:	4b05      	ldr	r3, [pc, #20]	; (843d0 <sysclk_enable_usb+0x2c>)
   843ba:	4c06      	ldr	r4, [pc, #24]	; (843d4 <sysclk_enable_usb+0x30>)
   843bc:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   843be:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   843c0:	2800      	cmp	r0, #0
   843c2:	d0fc      	beq.n	843be <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   843c4:	bd10      	pop	{r4, pc}
   843c6:	bf00      	nop
   843c8:	0008450d 	.word	0x0008450d
   843cc:	00084531 	.word	0x00084531
   843d0:	400e0400 	.word	0x400e0400
   843d4:	00084599 	.word	0x00084599

000843d8 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   843d8:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   843da:	4812      	ldr	r0, [pc, #72]	; (84424 <sysclk_init+0x4c>)
   843dc:	4d12      	ldr	r5, [pc, #72]	; (84428 <sysclk_init+0x50>)
   843de:	47a8      	blx	r5
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   843e0:	203e      	movs	r0, #62	; 0x3e
   843e2:	4b12      	ldr	r3, [pc, #72]	; (8442c <sysclk_init+0x54>)
   843e4:	4798      	blx	r3
		break;
   843e6:	4c12      	ldr	r4, [pc, #72]	; (84430 <sysclk_init+0x58>)
		return pmc_osc_is_ready_main_xtal();
   843e8:	47a0      	blx	r4
   843ea:	2800      	cmp	r0, #0
   843ec:	d0fc      	beq.n	843e8 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   843ee:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   843f2:	4b10      	ldr	r3, [pc, #64]	; (84434 <sysclk_init+0x5c>)
   843f4:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   843f6:	4c10      	ldr	r4, [pc, #64]	; (84438 <sysclk_init+0x60>)
   843f8:	47a0      	blx	r4
   843fa:	2800      	cmp	r0, #0
   843fc:	d0fc      	beq.n	843f8 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   843fe:	4b0f      	ldr	r3, [pc, #60]	; (8443c <sysclk_init+0x64>)
   84400:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   84402:	4b0f      	ldr	r3, [pc, #60]	; (84440 <sysclk_init+0x68>)
   84404:	4a0f      	ldr	r2, [pc, #60]	; (84444 <sysclk_init+0x6c>)
   84406:	4c10      	ldr	r4, [pc, #64]	; (84448 <sysclk_init+0x70>)
   84408:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   8440a:	47a0      	blx	r4
   8440c:	2800      	cmp	r0, #0
   8440e:	d0fc      	beq.n	8440a <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84410:	4b0e      	ldr	r3, [pc, #56]	; (8444c <sysclk_init+0x74>)
   84412:	2010      	movs	r0, #16
   84414:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   84416:	4b0e      	ldr	r3, [pc, #56]	; (84450 <sysclk_init+0x78>)
   84418:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8441a:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8441c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   84420:	4800      	ldr	r0, [pc, #0]	; (84424 <sysclk_init+0x4c>)
   84422:	4718      	bx	r3
   84424:	05b8d800 	.word	0x05b8d800
   84428:	20000129 	.word	0x20000129
   8442c:	0008450d 	.word	0x0008450d
   84430:	00084531 	.word	0x00084531
   84434:	00084551 	.word	0x00084551
   84438:	00084541 	.word	0x00084541
   8443c:	00084579 	.word	0x00084579
   84440:	400e0400 	.word	0x400e0400
   84444:	200f3f01 	.word	0x200f3f01
   84448:	00084589 	.word	0x00084589
   8444c:	000844b1 	.word	0x000844b1
   84450:	00084d69 	.word	0x00084d69

00084454 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84454:	4915      	ldr	r1, [pc, #84]	; (844ac <pmc_switch_mck_to_mainck+0x58>)
   84456:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84458:	f023 0303 	bic.w	r3, r3, #3
   8445c:	f043 0301 	orr.w	r3, r3, #1
   84460:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84462:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   84464:	071b      	lsls	r3, r3, #28
   84466:	bf58      	it	pl
   84468:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   8446c:	d502      	bpl.n	84474 <pmc_switch_mck_to_mainck+0x20>
   8446e:	e004      	b.n	8447a <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84470:	3b01      	subs	r3, #1
   84472:	d016      	beq.n	844a2 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84474:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84476:	0712      	lsls	r2, r2, #28
   84478:	d5fa      	bpl.n	84470 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8447a:	490c      	ldr	r1, [pc, #48]	; (844ac <pmc_switch_mck_to_mainck+0x58>)
   8447c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   84482:	4303      	orrs	r3, r0
   84484:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84486:	6e88      	ldr	r0, [r1, #104]	; 0x68
   84488:	f010 0008 	ands.w	r0, r0, #8
   8448c:	bf08      	it	eq
   8448e:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   84492:	d002      	beq.n	8449a <pmc_switch_mck_to_mainck+0x46>
   84494:	e007      	b.n	844a6 <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84496:	3b01      	subs	r3, #1
   84498:	d003      	beq.n	844a2 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8449a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8449c:	0712      	lsls	r2, r2, #28
   8449e:	d5fa      	bpl.n	84496 <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
   844a0:	4770      	bx	lr
			return 1;
   844a2:	2001      	movs	r0, #1
   844a4:	4770      	bx	lr
	return 0;
   844a6:	2000      	movs	r0, #0
   844a8:	4770      	bx	lr
   844aa:	bf00      	nop
   844ac:	400e0400 	.word	0x400e0400

000844b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   844b0:	4915      	ldr	r1, [pc, #84]	; (84508 <pmc_switch_mck_to_pllack+0x58>)
   844b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   844b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   844b8:	4303      	orrs	r3, r0
   844ba:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   844bc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   844be:	071b      	lsls	r3, r3, #28
   844c0:	bf58      	it	pl
   844c2:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   844c6:	d502      	bpl.n	844ce <pmc_switch_mck_to_pllack+0x1e>
   844c8:	e004      	b.n	844d4 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   844ca:	3b01      	subs	r3, #1
   844cc:	d017      	beq.n	844fe <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   844ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   844d0:	0710      	lsls	r0, r2, #28
   844d2:	d5fa      	bpl.n	844ca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   844d4:	490c      	ldr	r1, [pc, #48]	; (84508 <pmc_switch_mck_to_pllack+0x58>)
   844d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   844d8:	f023 0303 	bic.w	r3, r3, #3
   844dc:	f043 0302 	orr.w	r3, r3, #2
   844e0:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   844e2:	6e88      	ldr	r0, [r1, #104]	; 0x68
   844e4:	f010 0008 	ands.w	r0, r0, #8
   844e8:	bf08      	it	eq
   844ea:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   844ee:	d002      	beq.n	844f6 <pmc_switch_mck_to_pllack+0x46>
   844f0:	e007      	b.n	84502 <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   844f2:	3b01      	subs	r3, #1
   844f4:	d003      	beq.n	844fe <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   844f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   844f8:	0712      	lsls	r2, r2, #28
   844fa:	d5fa      	bpl.n	844f2 <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
   844fc:	4770      	bx	lr
			return 1;
   844fe:	2001      	movs	r0, #1
   84500:	4770      	bx	lr
	return 0;
   84502:	2000      	movs	r0, #0
   84504:	4770      	bx	lr
   84506:	bf00      	nop
   84508:	400e0400 	.word	0x400e0400

0008450c <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   8450c:	4a07      	ldr	r2, [pc, #28]	; (8452c <pmc_osc_enable_main_xtal+0x20>)
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8450e:	0203      	lsls	r3, r0, #8
	uint32_t mor = PMC->CKGR_MOR;
   84510:	6a11      	ldr	r1, [r2, #32]
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84512:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84514:	f021 0103 	bic.w	r1, r1, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84518:	430b      	orrs	r3, r1
   8451a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8451e:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   84522:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84524:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84526:	07db      	lsls	r3, r3, #31
   84528:	d5fc      	bpl.n	84524 <pmc_osc_enable_main_xtal+0x18>
}
   8452a:	4770      	bx	lr
   8452c:	400e0400 	.word	0x400e0400

00084530 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84530:	4b02      	ldr	r3, [pc, #8]	; (8453c <pmc_osc_is_ready_main_xtal+0xc>)
   84532:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84534:	f000 0001 	and.w	r0, r0, #1
   84538:	4770      	bx	lr
   8453a:	bf00      	nop
   8453c:	400e0400 	.word	0x400e0400

00084540 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84540:	4b02      	ldr	r3, [pc, #8]	; (8454c <pmc_osc_is_ready_mainck+0xc>)
   84542:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84544:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   84548:	4770      	bx	lr
   8454a:	bf00      	nop
   8454c:	400e0400 	.word	0x400e0400

00084550 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   84550:	4b08      	ldr	r3, [pc, #32]	; (84574 <pmc_mainck_osc_select+0x24>)
   84552:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   84554:	b130      	cbz	r0, 84564 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   84556:	4a07      	ldr	r2, [pc, #28]	; (84574 <pmc_mainck_osc_select+0x24>)
		mor |=  CKGR_MOR_MOSCSEL;
   84558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8455c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84560:	6213      	str	r3, [r2, #32]
}
   84562:	4770      	bx	lr
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   84564:	4a03      	ldr	r2, [pc, #12]	; (84574 <pmc_mainck_osc_select+0x24>)
		mor &= ~CKGR_MOR_MOSCSEL;
   84566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8456a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8456e:	6213      	str	r3, [r2, #32]
}
   84570:	4770      	bx	lr
   84572:	bf00      	nop
   84574:	400e0400 	.word	0x400e0400

00084578 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84578:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8457c:	4b01      	ldr	r3, [pc, #4]	; (84584 <pmc_disable_pllack+0xc>)
   8457e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   84580:	4770      	bx	lr
   84582:	bf00      	nop
   84584:	400e0400 	.word	0x400e0400

00084588 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84588:	4b02      	ldr	r3, [pc, #8]	; (84594 <pmc_is_locked_pllack+0xc>)
   8458a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8458c:	f000 0002 	and.w	r0, r0, #2
   84590:	4770      	bx	lr
   84592:	bf00      	nop
   84594:	400e0400 	.word	0x400e0400

00084598 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   84598:	4b02      	ldr	r3, [pc, #8]	; (845a4 <pmc_is_locked_upll+0xc>)
   8459a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8459c:	f000 0040 	and.w	r0, r0, #64	; 0x40
   845a0:	4770      	bx	lr
   845a2:	bf00      	nop
   845a4:	400e0400 	.word	0x400e0400

000845a8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   845a8:	281d      	cmp	r0, #29
   845aa:	d80a      	bhi.n	845c2 <pmc_enable_periph_clk+0x1a>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   845ac:	2301      	movs	r3, #1
   845ae:	4a06      	ldr	r2, [pc, #24]	; (845c8 <pmc_enable_periph_clk+0x20>)
   845b0:	4083      	lsls	r3, r0
   845b2:	6991      	ldr	r1, [r2, #24]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   845b4:	2000      	movs	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   845b6:	ea33 0101 	bics.w	r1, r3, r1
   845ba:	d001      	beq.n	845c0 <pmc_enable_periph_clk+0x18>
			PMC->PMC_PCER0 = 1 << ul_id;
   845bc:	6113      	str	r3, [r2, #16]
   845be:	4770      	bx	lr
}
   845c0:	4770      	bx	lr
		return 1;
   845c2:	2001      	movs	r0, #1
   845c4:	4770      	bx	lr
   845c6:	bf00      	nop
   845c8:	400e0400 	.word	0x400e0400

000845cc <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   845cc:	281d      	cmp	r0, #29
   845ce:	d80a      	bhi.n	845e6 <pmc_disable_periph_clk+0x1a>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   845d0:	2301      	movs	r3, #1
   845d2:	4a06      	ldr	r2, [pc, #24]	; (845ec <pmc_disable_periph_clk+0x20>)
   845d4:	4083      	lsls	r3, r0
   845d6:	6991      	ldr	r1, [r2, #24]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   845d8:	2000      	movs	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   845da:	ea33 0101 	bics.w	r1, r3, r1
   845de:	d000      	beq.n	845e2 <pmc_disable_periph_clk+0x16>
}
   845e0:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   845e2:	6153      	str	r3, [r2, #20]
   845e4:	4770      	bx	lr
		return 1;
   845e6:	2001      	movs	r0, #1
   845e8:	4770      	bx	lr
   845ea:	bf00      	nop
   845ec:	400e0400 	.word	0x400e0400

000845f0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   845f0:	f44f 7380 	mov.w	r3, #256	; 0x100
   845f4:	4a01      	ldr	r2, [pc, #4]	; (845fc <pmc_enable_pck+0xc>)
   845f6:	4083      	lsls	r3, r0
   845f8:	6013      	str	r3, [r2, #0]
}
   845fa:	4770      	bx	lr
   845fc:	400e0400 	.word	0x400e0400

00084600 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   84600:	4b03      	ldr	r3, [pc, #12]	; (84610 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84602:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   84606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84608:	4310      	orrs	r0, r2
   8460a:	6718      	str	r0, [r3, #112]	; 0x70
}
   8460c:	4770      	bx	lr
   8460e:	bf00      	nop
   84610:	400e0400 	.word	0x400e0400

00084614 <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
   84614:	4b01      	ldr	r3, [pc, #4]	; (8461c <udi_vendor_getsetting+0x8>)
}
   84616:	7818      	ldrb	r0, [r3, #0]
   84618:	4770      	bx	lr
   8461a:	bf00      	nop
   8461c:	20001918 	.word	0x20001918

00084620 <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
   84620:	4b02      	ldr	r3, [pc, #8]	; (8462c <udi_vendor_disable+0xc>)
   84622:	781b      	ldrb	r3, [r3, #0]
   84624:	b103      	cbz	r3, 84628 <udi_vendor_disable+0x8>
}
   84626:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
   84628:	4b01      	ldr	r3, [pc, #4]	; (84630 <udi_vendor_disable+0x10>)
   8462a:	4718      	bx	r3
   8462c:	20001918 	.word	0x20001918
   84630:	00081985 	.word	0x00081985

00084634 <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
   84634:	4b08      	ldr	r3, [pc, #32]	; (84658 <udi_vendor_setup+0x24>)
   84636:	f993 2000 	ldrsb.w	r2, [r3]
   8463a:	781b      	ldrb	r3, [r3, #0]
   8463c:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8463e:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   84642:	db03      	blt.n	8464c <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84644:	2b40      	cmp	r3, #64	; 0x40
   84646:	d005      	beq.n	84654 <udi_vendor_setup+0x20>
}
   84648:	2000      	movs	r0, #0
   8464a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8464c:	2b40      	cmp	r3, #64	; 0x40
   8464e:	d1fb      	bne.n	84648 <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84650:	4b02      	ldr	r3, [pc, #8]	; (8465c <udi_vendor_setup+0x28>)
   84652:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84654:	4b02      	ldr	r3, [pc, #8]	; (84660 <udi_vendor_setup+0x2c>)
   84656:	4718      	bx	r3
   84658:	200018f8 	.word	0x200018f8
   8465c:	000819e1 	.word	0x000819e1
   84660:	00081991 	.word	0x00081991

00084664 <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84664:	4b06      	ldr	r3, [pc, #24]	; (84680 <udi_vendor_enable+0x1c>)
{
   84666:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84668:	4798      	blx	r3
   8466a:	4a06      	ldr	r2, [pc, #24]	; (84684 <udi_vendor_enable+0x20>)
   8466c:	78c3      	ldrb	r3, [r0, #3]
   8466e:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   84670:	b10b      	cbz	r3, 84676 <udi_vendor_enable+0x12>
}
   84672:	2001      	movs	r0, #1
   84674:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84676:	4b04      	ldr	r3, [pc, #16]	; (84688 <udi_vendor_enable+0x24>)
}
   84678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8467c:	4718      	bx	r3
   8467e:	bf00      	nop
   84680:	000824fd 	.word	0x000824fd
   84684:	20001918 	.word	0x20001918
   84688:	0008195d 	.word	0x0008195d

0008468c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8468c:	b530      	push	{r4, r5, lr}
   8468e:	4684      	mov	ip, r0
   84690:	4615      	mov	r5, r2
   84692:	b083      	sub	sp, #12
   84694:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84696:	4662      	mov	r2, ip
   84698:	2100      	movs	r1, #0
   8469a:	4c03      	ldr	r4, [pc, #12]	; (846a8 <udi_vendor_bulk_in_run+0x1c>)
   8469c:	9500      	str	r5, [sp, #0]
   8469e:	2081      	movs	r0, #129	; 0x81
   846a0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   846a2:	b003      	add	sp, #12
   846a4:	bd30      	pop	{r4, r5, pc}
   846a6:	bf00      	nop
   846a8:	00083d25 	.word	0x00083d25

000846ac <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   846ac:	b530      	push	{r4, r5, lr}
   846ae:	4684      	mov	ip, r0
   846b0:	4615      	mov	r5, r2
   846b2:	b083      	sub	sp, #12
   846b4:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   846b6:	4662      	mov	r2, ip
   846b8:	2100      	movs	r1, #0
   846ba:	4c03      	ldr	r4, [pc, #12]	; (846c8 <udi_vendor_bulk_out_run+0x1c>)
   846bc:	9500      	str	r5, [sp, #0]
   846be:	2002      	movs	r0, #2
   846c0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   846c2:	b003      	add	sp, #12
   846c4:	bd30      	pop	{r4, r5, pc}
   846c6:	bf00      	nop
   846c8:	00083d25 	.word	0x00083d25

000846cc <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   846cc:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   846ce:	f1a1 030e 	sub.w	r3, r1, #14
   846d2:	2b01      	cmp	r3, #1
   846d4:	d917      	bls.n	84706 <efc_perform_command+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   846d6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   846da:	b672      	cpsid	i
   846dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   846e0:	2300      	movs	r3, #0
   846e2:	4c0a      	ldr	r4, [pc, #40]	; (8470c <efc_perform_command+0x40>)

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
   846e4:	b2c9      	uxtb	r1, r1
   846e6:	7023      	strb	r3, [r4, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   846e8:	4b09      	ldr	r3, [pc, #36]	; (84710 <efc_perform_command+0x44>)
   846ea:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   846ee:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   846f0:	4b08      	ldr	r3, [pc, #32]	; (84714 <efc_perform_command+0x48>)
   846f2:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   846f6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   846f8:	b925      	cbnz	r5, 84704 <efc_perform_command+0x38>
		cpu_irq_enable();
   846fa:	2301      	movs	r3, #1
   846fc:	7023      	strb	r3, [r4, #0]
   846fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84702:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   84704:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   84706:	f04f 30ff 	mov.w	r0, #4294967295
}
   8470a:	bd38      	pop	{r3, r4, r5, pc}
   8470c:	2000032c 	.word	0x2000032c
   84710:	00ffff00 	.word	0x00ffff00
   84714:	20000079 	.word	0x20000079

00084718 <pio_enable_output_write>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_OWER = ul_mask;
   84718:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
   8471c:	4770      	bx	lr
   8471e:	bf00      	nop

00084720 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   84720:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   84722:	4770      	bx	lr

00084724 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   84724:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   84726:	4770      	bx	lr

00084728 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84728:	0943      	lsrs	r3, r0, #5
   8472a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8472e:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84732:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   84734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   84736:	f000 001f 	and.w	r0, r0, #31
   8473a:	fa23 f000 	lsr.w	r0, r3, r0
}
   8473e:	f000 0001 	and.w	r0, r0, #1
   84742:	4770      	bx	lr

00084744 <pio_set_pin_high>:
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84744:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84746:	0943      	lsrs	r3, r0, #5
   84748:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8474c:	f203 7306 	addw	r3, r3, #1798	; 0x706
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84750:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84754:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84756:	fa02 f000 	lsl.w	r0, r2, r0
   8475a:	6318      	str	r0, [r3, #48]	; 0x30
}
   8475c:	4770      	bx	lr
   8475e:	bf00      	nop

00084760 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84760:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84762:	0943      	lsrs	r3, r0, #5
   84764:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84768:	f203 7306 	addw	r3, r3, #1798	; 0x706
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8476c:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84770:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84772:	fa02 f000 	lsl.w	r0, r2, r0
   84776:	6358      	str	r0, [r3, #52]	; 0x34
}
   84778:	4770      	bx	lr
   8477a:	bf00      	nop

0008477c <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8477c:	0943      	lsrs	r3, r0, #5
   8477e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   84782:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84786:	f203 7306 	addw	r3, r3, #1798	; 0x706
	switch (ul_flags & PIO_TYPE_Msk) {
   8478a:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8478e:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   84792:	d035      	beq.n	84800 <pio_configure_pin+0x84>
{
   84794:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   84796:	d816      	bhi.n	847c6 <pio_configure_pin+0x4a>
   84798:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   8479c:	d01b      	beq.n	847d6 <pio_configure_pin+0x5a>
   8479e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   847a2:	d115      	bne.n	847d0 <pio_configure_pin+0x54>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   847a4:	f04f 0c01 	mov.w	ip, #1
   847a8:	f000 001f 	and.w	r0, r0, #31
   847ac:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   847b0:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   847b2:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   847b4:	4310      	orrs	r0, r2
   847b6:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   847b8:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   847bc:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   847be:	d01b      	beq.n	847f8 <pio_configure_pin+0x7c>
		p_pio->PIO_PUER = ul_mask;
   847c0:	665a      	str	r2, [r3, #100]	; 0x64
}
   847c2:	bc10      	pop	{r4}
   847c4:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   847c6:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   847ca:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   847ce:	d02f      	beq.n	84830 <pio_configure_pin+0xb4>
   847d0:	2000      	movs	r0, #0
}
   847d2:	bc10      	pop	{r4}
   847d4:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   847d6:	f04f 0c01 	mov.w	ip, #1
   847da:	f000 001f 	and.w	r0, r0, #31
   847de:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   847e2:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   847e4:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   847e6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   847e8:	4020      	ands	r0, r4
   847ea:	ea20 0002 	bic.w	r0, r0, r2
   847ee:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   847f0:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   847f4:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   847f6:	d1e3      	bne.n	847c0 <pio_configure_pin+0x44>
		p_pio->PIO_PUDR = ul_mask;
   847f8:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   847fa:	4660      	mov	r0, ip
}
   847fc:	bc10      	pop	{r4}
   847fe:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   84800:	2201      	movs	r2, #1
   84802:	f000 001f 	and.w	r0, r0, #31
   84806:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   84808:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   8480a:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   8480c:	bf4c      	ite	mi
   8480e:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84810:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   84812:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   84816:	bf14      	ite	ne
   84818:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   8481a:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8481c:	0788      	lsls	r0, r1, #30
   8481e:	d422      	bmi.n	84866 <pio_configure_pin+0xea>
		if (ul_attribute & PIO_DEBOUNCE) {
   84820:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   84822:	bf48      	it	mi
   84824:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   84828:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   8482a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8482c:	601a      	str	r2, [r3, #0]
}
   8482e:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84830:	2201      	movs	r2, #1
   84832:	f000 001f 	and.w	r0, r0, #31
   84836:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84838:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8483c:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
   84840:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   84842:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   84844:	bf4c      	ite	mi
   84846:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84848:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   8484a:	b954      	cbnz	r4, 84862 <pio_configure_pin+0xe6>
		p_pio->PIO_MDDR = ul_mask;
   8484c:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   8484e:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   84852:	bf0c      	ite	eq
   84854:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   84856:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   84858:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8485a:	601a      	str	r2, [r3, #0]
	return 1;
   8485c:	2001      	movs	r0, #1
}
   8485e:	bc10      	pop	{r4}
   84860:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   84862:	651a      	str	r2, [r3, #80]	; 0x50
   84864:	e7f3      	b.n	8484e <pio_configure_pin+0xd2>
		p_pio->PIO_SCIFSR = ul_mask;
   84866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   8486a:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   8486c:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8486e:	601a      	str	r2, [r3, #0]
}
   84870:	4770      	bx	lr
   84872:	bf00      	nop

00084874 <pio_configure_pin_group>:
{
   84874:	4603      	mov	r3, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   84876:	f002 40f0 	and.w	r0, r2, #2013265920	; 0x78000000
   8487a:	f1b0 5f20 	cmp.w	r0, #671088640	; 0x28000000
   8487e:	d029      	beq.n	848d4 <pio_configure_pin_group+0x60>
{
   84880:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   84882:	d810      	bhi.n	848a6 <pio_configure_pin_group+0x32>
   84884:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   84888:	d015      	beq.n	848b6 <pio_configure_pin_group+0x42>
   8488a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   8488e:	d10f      	bne.n	848b0 <pio_configure_pin_group+0x3c>
	p_pio->PIO_IDR = ul_mask;
   84890:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   84892:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   84894:	4308      	orrs	r0, r1
   84896:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   84898:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   8489c:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   8489e:	d015      	beq.n	848cc <pio_configure_pin_group+0x58>
		p_pio->PIO_PUER = ul_mask;
   848a0:	6659      	str	r1, [r3, #100]	; 0x64
}
   848a2:	bc10      	pop	{r4}
   848a4:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   848a6:	f002 40e0 	and.w	r0, r2, #1879048192	; 0x70000000
   848aa:	f1b0 5f40 	cmp.w	r0, #805306368	; 0x30000000
   848ae:	d025      	beq.n	848fc <pio_configure_pin_group+0x88>
   848b0:	2000      	movs	r0, #0
}
   848b2:	bc10      	pop	{r4}
   848b4:	4770      	bx	lr
	p_pio->PIO_IDR = ul_mask;
   848b6:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   848b8:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   848ba:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   848bc:	4020      	ands	r0, r4
   848be:	ea20 0001 	bic.w	r0, r0, r1
   848c2:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   848c4:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   848c8:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   848ca:	d1e9      	bne.n	848a0 <pio_configure_pin_group+0x2c>
		p_pio->PIO_PUDR = ul_mask;
   848cc:	6619      	str	r1, [r3, #96]	; 0x60
	return 1;
   848ce:	2001      	movs	r0, #1
}
   848d0:	bc10      	pop	{r4}
   848d2:	4770      	bx	lr
	if (ul_pull_up_enable) {
   848d4:	07d0      	lsls	r0, r2, #31
	p_pio->PIO_IDR = ul_mask;
   848d6:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   848d8:	bf4c      	ite	mi
   848da:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   848dc:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   848de:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   848e2:	bf14      	ite	ne
   848e4:	6219      	strne	r1, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   848e6:	6259      	streq	r1, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   848e8:	0790      	lsls	r0, r2, #30
   848ea:	d41e      	bmi.n	8492a <pio_configure_pin_group+0xb6>
		if (ul_attribute & PIO_DEBOUNCE) {
   848ec:	0710      	lsls	r0, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   848ee:	bf48      	it	mi
   848f0:	f8c3 1084 	strmi.w	r1, [r3, #132]	; 0x84
	return 1;
   848f4:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   848f6:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   848f8:	6019      	str	r1, [r3, #0]
}
   848fa:	4770      	bx	lr
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   848fc:	f002 5060 	and.w	r0, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   84900:	f3c2 0480 	ubfx	r4, r2, #2, #1
	if (ul_pull_up_enable) {
   84904:	07d2      	lsls	r2, r2, #31
	p_pio->PIO_IDR = ul_mask;
   84906:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   84908:	bf4c      	ite	mi
   8490a:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8490c:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   8490e:	b954      	cbnz	r4, 84926 <pio_configure_pin_group+0xb2>
		p_pio->PIO_MDDR = ul_mask;
   84910:	6559      	str	r1, [r3, #84]	; 0x54
	if (ul_default_level) {
   84912:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   84916:	bf0c      	ite	eq
   84918:	6319      	streq	r1, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   8491a:	6359      	strne	r1, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8491c:	6119      	str	r1, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8491e:	6019      	str	r1, [r3, #0]
	return 1;
   84920:	2001      	movs	r0, #1
}
   84922:	bc10      	pop	{r4}
   84924:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   84926:	6519      	str	r1, [r3, #80]	; 0x50
   84928:	e7f3      	b.n	84912 <pio_configure_pin_group+0x9e>
		p_pio->PIO_SCIFSR = ul_mask;
   8492a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	return 1;
   8492e:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   84930:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   84932:	6019      	str	r1, [r3, #0]
}
   84934:	4770      	bx	lr
   84936:	bf00      	nop

00084938 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   84938:	e7fe      	b.n	84938 <Dummy_Handler>
   8493a:	bf00      	nop

0008493c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   8493c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   8493e:	f04f 37ff 	mov.w	r7, #4294967295
{
   84942:	4684      	mov	ip, r0
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   84944:	2680      	movs	r6, #128	; 0x80
	p_twi->TWI_CR = TWI_CR_MSEN;
   84946:	2204      	movs	r2, #4
	p_twi->TWI_CR = TWI_CR_MSDIS;
   84948:	2508      	movs	r5, #8
	p_twi->TWI_CR = TWI_CR_SVDIS;
   8494a:	2420      	movs	r4, #32
	p_twi->TWI_IDR = ~0UL;
   8494c:	6287      	str	r7, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   8494e:	6a00      	ldr	r0, [r0, #32]
	p_twi->TWI_CR = TWI_CR_SWRST;
   84950:	f8cc 6000 	str.w	r6, [ip]
	p_twi->TWI_RHR;
   84954:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   84958:	f8cc 5000 	str.w	r5, [ip]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   8495c:	f8cc 4000 	str.w	r4, [ip]
	p_twi->TWI_CR = TWI_CR_MSEN;
   84960:	f8cc 2000 	str.w	r2, [ip]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   84964:	4b14      	ldr	r3, [pc, #80]	; (849b8 <twi_master_init+0x7c>)
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   84966:	684a      	ldr	r2, [r1, #4]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   84968:	429a      	cmp	r2, r3
   8496a:	d821      	bhi.n	849b0 <twi_master_init+0x74>
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8496c:	680b      	ldr	r3, [r1, #0]
   8496e:	0052      	lsls	r2, r2, #1
   84970:	fbb3 f3f2 	udiv	r3, r3, r2
   84974:	3b04      	subs	r3, #4
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84976:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   84978:	f04f 0200 	mov.w	r2, #0
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8497c:	d908      	bls.n	84990 <twi_master_init+0x54>
		c_lh_div /= TWI_CLK_DIVIDER;
   8497e:	085b      	lsrs	r3, r3, #1
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84980:	2bff      	cmp	r3, #255	; 0xff
		ckdiv++;
   84982:	f102 0201 	add.w	r2, r2, #1
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84986:	d915      	bls.n	849b4 <twi_master_init+0x78>
   84988:	2a07      	cmp	r2, #7
   8498a:	d1f8      	bne.n	8497e <twi_master_init+0x42>
   8498c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   84990:	b2d8      	uxtb	r0, r3
   84992:	4302      	orrs	r2, r0
	uint32_t status = TWI_SUCCESS;
   84994:	2000      	movs	r0, #0
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   84996:	021b      	lsls	r3, r3, #8
   84998:	b29b      	uxth	r3, r3
   8499a:	4313      	orrs	r3, r2
	p_twi->TWI_CWGR =
   8499c:	f8cc 3010 	str.w	r3, [ip, #16]
	if (p_opt->smbus == 1) {
   849a0:	7a4b      	ldrb	r3, [r1, #9]
   849a2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   849a4:	bf04      	itt	eq
   849a6:	2340      	moveq	r3, #64	; 0x40
   849a8:	f8cc 3000 	streq.w	r3, [ip]
}
   849ac:	bcf0      	pop	{r4, r5, r6, r7}
   849ae:	4770      	bx	lr
		status = TWI_INVALID_ARGUMENT;
   849b0:	2001      	movs	r0, #1
   849b2:	e7f5      	b.n	849a0 <twi_master_init+0x64>
			TWI_CWGR_CKDIV(ckdiv);
   849b4:	0412      	lsls	r2, r2, #16
   849b6:	e7eb      	b.n	84990 <twi_master_init+0x54>
   849b8:	00061a80 	.word	0x00061a80

000849bc <twi_master_read>:
{
   849bc:	4684      	mov	ip, r0
	uint32_t cnt = p_packet->length;
   849be:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
   849c0:	2800      	cmp	r0, #0
   849c2:	d061      	beq.n	84a88 <twi_master_read+0xcc>
{
   849c4:	b470      	push	{r4, r5, r6}
	p_twi->TWI_MMR = 0;
   849c6:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   849c8:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
   849ca:	f8cc 5004 	str.w	r5, [ip, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   849ce:	7c0b      	ldrb	r3, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   849d0:	684a      	ldr	r2, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   849d2:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   849d4:	0212      	lsls	r2, r2, #8
   849d6:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   849da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   849de:	4313      	orrs	r3, r2
   849e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   849e4:	f8cc 3004 	str.w	r3, [ip, #4]
	p_twi->TWI_IADR = 0;
   849e8:	f8cc 500c 	str.w	r5, [ip, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   849ec:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
   849ee:	2a00      	cmp	r2, #0
   849f0:	d03a      	beq.n	84a68 <twi_master_read+0xac>
	if (len > 1) {
   849f2:	2a01      	cmp	r2, #1
	val = addr[0];
   849f4:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
   849f6:	dd02      	ble.n	849fe <twi_master_read+0x42>
		val |= addr[1];
   849f8:	880b      	ldrh	r3, [r1, #0]
   849fa:	ba5b      	rev16	r3, r3
   849fc:	b29b      	uxth	r3, r3
	if (len > 2) {
   849fe:	2a02      	cmp	r2, #2
   84a00:	dd02      	ble.n	84a08 <twi_master_read+0x4c>
		val |= addr[2];
   84a02:	788a      	ldrb	r2, [r1, #2]
   84a04:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	if (cnt == 1) {
   84a08:	2801      	cmp	r0, #1
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   84a0a:	f8cc 300c 	str.w	r3, [ip, #12]
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   84a0e:	bf0b      	itete	eq
   84a10:	2303      	moveq	r3, #3
		p_twi->TWI_CR = TWI_CR_START;
   84a12:	2301      	movne	r3, #1
		stop_sent = 1;
   84a14:	4605      	moveq	r5, r0
		stop_sent = 0;
   84a16:	2500      	movne	r5, #0
   84a18:	f643 2298 	movw	r2, #15000	; 0x3a98
			p_twi->TWI_CR = TWI_CR_STOP;
   84a1c:	2602      	movs	r6, #2
		p_twi->TWI_CR = TWI_CR_START;
   84a1e:	f8cc 3000 	str.w	r3, [ip]
		status = p_twi->TWI_SR;
   84a22:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   84a26:	05d9      	lsls	r1, r3, #23
   84a28:	d413      	bmi.n	84a52 <twi_master_read+0x96>
		if (!timeout--) {
   84a2a:	1e51      	subs	r1, r2, #1
   84a2c:	b372      	cbz	r2, 84a8c <twi_master_read+0xd0>
		if (cnt == 1  && !stop_sent) {
   84a2e:	2801      	cmp	r0, #1
   84a30:	d01c      	beq.n	84a6c <twi_master_read+0xb0>
		if (!(status & TWI_SR_RXRDY)) {
   84a32:	079b      	lsls	r3, r3, #30
   84a34:	d521      	bpl.n	84a7a <twi_master_read+0xbe>
		*buffer++ = p_twi->TWI_RHR;
   84a36:	4623      	mov	r3, r4
   84a38:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
	while (cnt > 0) {
   84a3c:	3801      	subs	r0, #1
		*buffer++ = p_twi->TWI_RHR;
   84a3e:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt > 0) {
   84a42:	d009      	beq.n	84a58 <twi_master_read+0x9c>
		timeout = TWI_TIMEOUT;
   84a44:	f643 2298 	movw	r2, #15000	; 0x3a98
   84a48:	461c      	mov	r4, r3
		status = p_twi->TWI_SR;
   84a4a:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   84a4e:	05d9      	lsls	r1, r3, #23
   84a50:	d5eb      	bpl.n	84a2a <twi_master_read+0x6e>
			return TWI_RECEIVE_NACK;
   84a52:	2005      	movs	r0, #5
}
   84a54:	bc70      	pop	{r4, r5, r6}
   84a56:	4770      	bx	lr
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   84a58:	f8dc 3020 	ldr.w	r3, [ip, #32]
   84a5c:	07da      	lsls	r2, r3, #31
   84a5e:	d5fb      	bpl.n	84a58 <twi_master_read+0x9c>
}
   84a60:	bc70      	pop	{r4, r5, r6}
	p_twi->TWI_SR;
   84a62:	f8dc 3020 	ldr.w	r3, [ip, #32]
}
   84a66:	4770      	bx	lr
		return 0;
   84a68:	4613      	mov	r3, r2
   84a6a:	e7cd      	b.n	84a08 <twi_master_read+0x4c>
		if (cnt == 1  && !stop_sent) {
   84a6c:	b90d      	cbnz	r5, 84a72 <twi_master_read+0xb6>
			p_twi->TWI_CR = TWI_CR_STOP;
   84a6e:	f8cc 6000 	str.w	r6, [ip]
		if (!(status & TWI_SR_RXRDY)) {
   84a72:	079b      	lsls	r3, r3, #30
   84a74:	d505      	bpl.n	84a82 <twi_master_read+0xc6>
   84a76:	2501      	movs	r5, #1
   84a78:	e7dd      	b.n	84a36 <twi_master_read+0x7a>
   84a7a:	4623      	mov	r3, r4
   84a7c:	460a      	mov	r2, r1
		timeout = TWI_TIMEOUT;
   84a7e:	461c      	mov	r4, r3
   84a80:	e7e3      	b.n	84a4a <twi_master_read+0x8e>
		if (!(status & TWI_SR_RXRDY)) {
   84a82:	460a      	mov	r2, r1
   84a84:	2501      	movs	r5, #1
   84a86:	e7cc      	b.n	84a22 <twi_master_read+0x66>
		return TWI_INVALID_ARGUMENT;
   84a88:	2001      	movs	r0, #1
}
   84a8a:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
   84a8c:	2009      	movs	r0, #9
}
   84a8e:	bc70      	pop	{r4, r5, r6}
   84a90:	4770      	bx	lr
   84a92:	bf00      	nop

00084a94 <twi_master_write>:
	uint32_t cnt = p_packet->length;
   84a94:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
   84a96:	2a00      	cmp	r2, #0
   84a98:	d038      	beq.n	84b0c <twi_master_write+0x78>
{
   84a9a:	b430      	push	{r4, r5}
   84a9c:	4603      	mov	r3, r0
	p_twi->TWI_MMR = 0;
   84a9e:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   84aa0:	6888      	ldr	r0, [r1, #8]
	p_twi->TWI_MMR = 0;
   84aa2:	605d      	str	r5, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84aa4:	7c0c      	ldrb	r4, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84aa6:	f8d1 c004 	ldr.w	ip, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84aaa:	0424      	lsls	r4, r4, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84aac:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84ab0:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84ab4:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84ab8:	ea44 040c 	orr.w	r4, r4, ip
   84abc:	605c      	str	r4, [r3, #4]
	p_twi->TWI_IADR = 0;
   84abe:	60dd      	str	r5, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   84ac0:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
   84ac2:	b30d      	cbz	r5, 84b08 <twi_master_write+0x74>
	if (len > 1) {
   84ac4:	2d01      	cmp	r5, #1
	val = addr[0];
   84ac6:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
   84ac8:	dd02      	ble.n	84ad0 <twi_master_write+0x3c>
		val |= addr[1];
   84aca:	880c      	ldrh	r4, [r1, #0]
   84acc:	ba64      	rev16	r4, r4
   84ace:	b2a4      	uxth	r4, r4
	if (len > 2) {
   84ad0:	2d02      	cmp	r5, #2
   84ad2:	dd02      	ble.n	84ada <twi_master_write+0x46>
		val |= addr[2];
   84ad4:	7889      	ldrb	r1, [r1, #2]
   84ad6:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   84ada:	60dc      	str	r4, [r3, #12]
	while (cnt > 0) {
   84adc:	1881      	adds	r1, r0, r2
   84ade:	e007      	b.n	84af0 <twi_master_write+0x5c>
		status = p_twi->TWI_SR;
   84ae0:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   84ae2:	05d5      	lsls	r5, r2, #23
   84ae4:	d40d      	bmi.n	84b02 <twi_master_write+0x6e>
		if (!(status & TWI_SR_TXRDY)) {
   84ae6:	0754      	lsls	r4, r2, #29
		p_twi->TWI_THR = *buffer++;
   84ae8:	bf44      	itt	mi
   84aea:	f810 2b01 	ldrbmi.w	r2, [r0], #1
   84aee:	635a      	strmi	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
   84af0:	4288      	cmp	r0, r1
   84af2:	d1f5      	bne.n	84ae0 <twi_master_write+0x4c>
   84af4:	e001      	b.n	84afa <twi_master_write+0x66>
		if (status & TWI_SR_TXRDY) {
   84af6:	0751      	lsls	r1, r2, #29
   84af8:	d40a      	bmi.n	84b10 <twi_master_write+0x7c>
		status = p_twi->TWI_SR;
   84afa:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   84afc:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   84b00:	d0f9      	beq.n	84af6 <twi_master_write+0x62>
			return TWI_RECEIVE_NACK;
   84b02:	2005      	movs	r0, #5
}
   84b04:	bc30      	pop	{r4, r5}
   84b06:	4770      	bx	lr
		return 0;
   84b08:	462c      	mov	r4, r5
   84b0a:	e7e6      	b.n	84ada <twi_master_write+0x46>
		return TWI_INVALID_ARGUMENT;
   84b0c:	2001      	movs	r0, #1
}
   84b0e:	4770      	bx	lr
	p_twi->TWI_CR = TWI_CR_STOP;
   84b10:	2202      	movs	r2, #2
   84b12:	601a      	str	r2, [r3, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   84b14:	6a1a      	ldr	r2, [r3, #32]
   84b16:	07d2      	lsls	r2, r2, #31
   84b18:	d5fc      	bpl.n	84b14 <twi_master_write+0x80>
}
   84b1a:	bc30      	pop	{r4, r5}
   84b1c:	4770      	bx	lr
   84b1e:	bf00      	nop

00084b20 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84b20:	4b02      	ldr	r3, [pc, #8]	; (84b2c <pmc_is_wakeup_clocks_restored+0xc>)
   84b22:	7818      	ldrb	r0, [r3, #0]
}
   84b24:	f080 0001 	eor.w	r0, r0, #1
   84b28:	4770      	bx	lr
   84b2a:	bf00      	nop
   84b2c:	20001919 	.word	0x20001919

00084b30 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   84b30:	4a0c      	ldr	r2, [pc, #48]	; (84b64 <_sbrk+0x34>)
{
   84b32:	4603      	mov	r3, r0
	if (heap == NULL) {
   84b34:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
   84b36:	490c      	ldr	r1, [pc, #48]	; (84b68 <_sbrk+0x38>)
	if (heap == NULL) {
   84b38:	b130      	cbz	r0, 84b48 <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   84b3a:	4403      	add	r3, r0
   84b3c:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
   84b3e:	bfcc      	ite	gt
   84b40:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
   84b44:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   84b46:	4770      	bx	lr
{
   84b48:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   84b4a:	4c08      	ldr	r4, [pc, #32]	; (84b6c <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
   84b4c:	4423      	add	r3, r4
   84b4e:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
   84b50:	6014      	str	r4, [r2, #0]
	heap += incr;
   84b52:	bfd8      	it	le
   84b54:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
   84b56:	4620      	mov	r0, r4
		return (caddr_t) -1;	
   84b58:	bfc8      	it	gt
   84b5a:	f04f 30ff 	movgt.w	r0, #4294967295
}
   84b5e:	bc10      	pop	{r4}
   84b60:	4770      	bx	lr
   84b62:	bf00      	nop
   84b64:	2000191c 	.word	0x2000191c
   84b68:	20083ffc 	.word	0x20083ffc
   84b6c:	20083000 	.word	0x20083000

00084b70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   84b70:	f04f 30ff 	mov.w	r0, #4294967295
   84b74:	4770      	bx	lr
   84b76:	bf00      	nop

00084b78 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   84b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
   84b7c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   84b7e:	604b      	str	r3, [r1, #4]
}
   84b80:	4770      	bx	lr
   84b82:	bf00      	nop

00084b84 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   84b84:	2001      	movs	r0, #1
   84b86:	4770      	bx	lr

00084b88 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   84b88:	2000      	movs	r0, #0
   84b8a:	4770      	bx	lr

00084b8c <_exit>:

extern void _exit(int status)
{
   84b8c:	4601      	mov	r1, r0
   84b8e:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
   84b90:	4801      	ldr	r0, [pc, #4]	; (84b98 <_exit+0xc>)
   84b92:	4b02      	ldr	r3, [pc, #8]	; (84b9c <_exit+0x10>)
   84b94:	4798      	blx	r3

	for (;;);
   84b96:	e7fe      	b.n	84b96 <_exit+0xa>
   84b98:	0008bebc 	.word	0x0008bebc
   84b9c:	00084ee1 	.word	0x00084ee1

00084ba0 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   84ba0:	4770      	bx	lr
   84ba2:	bf00      	nop

00084ba4 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   84ba4:	f04f 30ff 	mov.w	r0, #4294967295
   84ba8:	4770      	bx	lr
   84baa:	bf00      	nop

00084bac <uart_init>:
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   84bac:	23ac      	movs	r3, #172	; 0xac
   84bae:	6003      	str	r3, [r0, #0]
{
   84bb0:	4602      	mov	r2, r0
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   84bb2:	e9d1 3000 	ldrd	r3, r0, [r1]
   84bb6:	fbb3 f3f0 	udiv	r3, r3, r0
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   84bba:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   84bbe:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   84bc0:	1e58      	subs	r0, r3, #1
   84bc2:	4560      	cmp	r0, ip
   84bc4:	d80c      	bhi.n	84be0 <uart_init+0x34>
{
   84bc6:	b430      	push	{r4, r5}
	p_uart->UART_BRGR = cd;
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   84bc8:	f240 2502 	movw	r5, #514	; 0x202

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   84bcc:	2450      	movs	r4, #80	; 0x50
	p_uart->UART_BRGR = cd;
   84bce:	6213      	str	r3, [r2, #32]
	p_uart->UART_MR = p_uart_opt->ul_mode;
   84bd0:	688b      	ldr	r3, [r1, #8]

	return 0;
   84bd2:	2000      	movs	r0, #0
	p_uart->UART_MR = p_uart_opt->ul_mode;
   84bd4:	6053      	str	r3, [r2, #4]
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   84bd6:	f8c2 5120 	str.w	r5, [r2, #288]	; 0x120
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   84bda:	6014      	str	r4, [r2, #0]
}
   84bdc:	bc30      	pop	{r4, r5}
   84bde:	4770      	bx	lr
		return 1;
   84be0:	2001      	movs	r0, #1
}
   84be2:	4770      	bx	lr

00084be4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   84be4:	4603      	mov	r3, r0
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   84be6:	6942      	ldr	r2, [r0, #20]
   84be8:	0792      	lsls	r2, r2, #30
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
   84bea:	bf46      	itte	mi
   84bec:	2000      	movmi	r0, #0
	p_uart->UART_THR = uc_data;
   84bee:	61d9      	strmi	r1, [r3, #28]
		return 1;
   84bf0:	2001      	movpl	r0, #1
}
   84bf2:	4770      	bx	lr

00084bf4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   84bf4:	6943      	ldr	r3, [r0, #20]
   84bf6:	07db      	lsls	r3, r3, #31
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   84bf8:	bf43      	ittte	mi
   84bfa:	6983      	ldrmi	r3, [r0, #24]
	return 0;
   84bfc:	2000      	movmi	r0, #0
	*puc_data = (uint8_t) p_uart->UART_RHR;
   84bfe:	700b      	strbmi	r3, [r1, #0]
		return 1;
   84c00:	2001      	movpl	r0, #1
}
   84c02:	4770      	bx	lr

00084c04 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   84c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84c08:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84c0c:	4c19      	ldr	r4, [pc, #100]	; (84c74 <iopins_normal+0x70>)
   84c0e:	204f      	movs	r0, #79	; 0x4f
   84c10:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84c12:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84c16:	2050      	movs	r0, #80	; 0x50
   84c18:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   84c1a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84c1e:	203f      	movs	r0, #63	; 0x3f
   84c20:	47a0      	blx	r4
	board_power(0);
   84c22:	4b15      	ldr	r3, [pc, #84]	; (84c78 <iopins_normal+0x74>)
   84c24:	203f      	movs	r0, #63	; 0x3f
   84c26:	4798      	blx	r3
	FPGA_NPROG_SETUP();
	FPGA_NPROG_HIGH();
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   84c28:	4f14      	ldr	r7, [pc, #80]	; (84c7c <iopins_normal+0x78>)
	FPGA_NPROG_SETUP();
   84c2a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84c2e:	2008      	movs	r0, #8
   84c30:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   84c32:	4e13      	ldr	r6, [pc, #76]	; (84c80 <iopins_normal+0x7c>)
   84c34:	2008      	movs	r0, #8
   84c36:	47b0      	blx	r6
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   84c38:	4d12      	ldr	r5, [pc, #72]	; (84c84 <iopins_normal+0x80>)
   84c3a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   84c3e:	21ff      	movs	r1, #255	; 0xff
   84c40:	4638      	mov	r0, r7
   84c42:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   84c44:	4b10      	ldr	r3, [pc, #64]	; (84c88 <iopins_normal+0x84>)
   84c46:	4638      	mov	r0, r7
   84c48:	21ff      	movs	r1, #255	; 0xff
   84c4a:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   84c4c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84c50:	2035      	movs	r0, #53	; 0x35
   84c52:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   84c54:	2035      	movs	r0, #53	; 0x35
   84c56:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   84c58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   84c5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   84c60:	480a      	ldr	r0, [pc, #40]	; (84c8c <iopins_normal+0x88>)
   84c62:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   84c64:	4623      	mov	r3, r4
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   84c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   84c6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84c6e:	201b      	movs	r0, #27
   84c70:	4718      	bx	r3
   84c72:	bf00      	nop
   84c74:	0008477d 	.word	0x0008477d
   84c78:	00084761 	.word	0x00084761
   84c7c:	400e0e00 	.word	0x400e0e00
   84c80:	00084745 	.word	0x00084745
   84c84:	00084875 	.word	0x00084875
   84c88:	00084719 	.word	0x00084719
   84c8c:	400e0c00 	.word	0x400e0c00

00084c90 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   84c90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
   84c94:	b510      	push	{r4, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
   84c96:	4b06      	ldr	r3, [pc, #24]	; (84cb0 <board_init+0x20>)
   84c98:	4c06      	ldr	r4, [pc, #24]	; (84cb4 <board_init+0x24>)
   84c9a:	655a      	str	r2, [r3, #84]	; 0x54
   84c9c:	200a      	movs	r0, #10
   84c9e:	47a0      	blx	r4
   84ca0:	200b      	movs	r0, #11
   84ca2:	47a0      	blx	r4
   84ca4:	200c      	movs	r0, #12
   84ca6:	47a0      	blx	r4
	 */
	ioport_init();

	iopins_normal();

}
   84ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	iopins_normal();
   84cac:	4b02      	ldr	r3, [pc, #8]	; (84cb8 <board_init+0x28>)
   84cae:	4718      	bx	r3
   84cb0:	400e1200 	.word	0x400e1200
   84cb4:	000845a9 	.word	0x000845a9
   84cb8:	00084c05 	.word	0x00084c05

00084cbc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84cbc:	4b0c      	ldr	r3, [pc, #48]	; (84cf0 <cpu_irq_enter_critical+0x34>)
   84cbe:	681a      	ldr	r2, [r3, #0]
   84cc0:	b922      	cbnz	r2, 84ccc <cpu_irq_enter_critical+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84cc2:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
   84cc6:	b129      	cbz	r1, 84cd4 <cpu_irq_enter_critical+0x18>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84cc8:	490a      	ldr	r1, [pc, #40]	; (84cf4 <cpu_irq_enter_critical+0x38>)
   84cca:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84ccc:	681a      	ldr	r2, [r3, #0]
   84cce:	3201      	adds	r2, #1
   84cd0:	601a      	str	r2, [r3, #0]
   84cd2:	4770      	bx	lr
{
   84cd4:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   84cd6:	b672      	cpsid	i
   84cd8:	f3bf 8f5f 	dmb	sy
			cpu_irq_prev_interrupt_state = true;
   84cdc:	2001      	movs	r0, #1
			cpu_irq_disable();
   84cde:	4c06      	ldr	r4, [pc, #24]	; (84cf8 <cpu_irq_enter_critical+0x3c>)
			cpu_irq_prev_interrupt_state = true;
   84ce0:	4a04      	ldr	r2, [pc, #16]	; (84cf4 <cpu_irq_enter_critical+0x38>)
			cpu_irq_disable();
   84ce2:	7021      	strb	r1, [r4, #0]
			cpu_irq_prev_interrupt_state = true;
   84ce4:	7010      	strb	r0, [r2, #0]
	cpu_irq_critical_section_counter++;
   84ce6:	681a      	ldr	r2, [r3, #0]
   84ce8:	3201      	adds	r2, #1
   84cea:	601a      	str	r2, [r3, #0]
}
   84cec:	bc10      	pop	{r4}
   84cee:	4770      	bx	lr
   84cf0:	20001920 	.word	0x20001920
   84cf4:	20001924 	.word	0x20001924
   84cf8:	2000032c 	.word	0x2000032c

00084cfc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84cfc:	4b07      	ldr	r3, [pc, #28]	; (84d1c <cpu_irq_leave_critical+0x20>)
   84cfe:	681a      	ldr	r2, [r3, #0]
   84d00:	3a01      	subs	r2, #1
   84d02:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84d04:	681b      	ldr	r3, [r3, #0]
   84d06:	b943      	cbnz	r3, 84d1a <cpu_irq_leave_critical+0x1e>
   84d08:	4b05      	ldr	r3, [pc, #20]	; (84d20 <cpu_irq_leave_critical+0x24>)
   84d0a:	781b      	ldrb	r3, [r3, #0]
   84d0c:	b12b      	cbz	r3, 84d1a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84d0e:	2201      	movs	r2, #1
   84d10:	4b04      	ldr	r3, [pc, #16]	; (84d24 <cpu_irq_leave_critical+0x28>)
   84d12:	701a      	strb	r2, [r3, #0]
   84d14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d18:	b662      	cpsie	i
	}
}
   84d1a:	4770      	bx	lr
   84d1c:	20001920 	.word	0x20001920
   84d20:	20001924 	.word	0x20001924
   84d24:	2000032c 	.word	0x2000032c

00084d28 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   84d2c:	b9a0      	cbnz	r0, 84d58 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
   84d2e:	2a00      	cmp	r2, #0
   84d30:	4690      	mov	r8, r2
   84d32:	dd0d      	ble.n	84d50 <_read+0x28>
   84d34:	460c      	mov	r4, r1
   84d36:	4f0a      	ldr	r7, [pc, #40]	; (84d60 <_read+0x38>)
   84d38:	4e0a      	ldr	r6, [pc, #40]	; (84d64 <_read+0x3c>)
   84d3a:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
   84d3c:	4621      	mov	r1, r4
   84d3e:	6838      	ldr	r0, [r7, #0]
   84d40:	6833      	ldr	r3, [r6, #0]
		ptr++;
   84d42:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   84d44:	4798      	blx	r3
	for (; len > 0; --len) {
   84d46:	42ac      	cmp	r4, r5
   84d48:	d1f8      	bne.n	84d3c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   84d4a:	4640      	mov	r0, r8
   84d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int nChars = 0;
   84d50:	4680      	mov	r8, r0
}
   84d52:	4640      	mov	r0, r8
   84d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84d58:	f04f 38ff 	mov.w	r8, #4294967295
   84d5c:	e7f5      	b.n	84d4a <_read+0x22>
   84d5e:	bf00      	nop
   84d60:	20001914 	.word	0x20001914
   84d64:	20001928 	.word	0x20001928

00084d68 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84d68:	4a31      	ldr	r2, [pc, #196]	; (84e30 <SystemCoreClockUpdate+0xc8>)
   84d6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84d6c:	f003 0303 	and.w	r3, r3, #3
   84d70:	2b01      	cmp	r3, #1
   84d72:	d02c      	beq.n	84dce <SystemCoreClockUpdate+0x66>
   84d74:	3b02      	subs	r3, #2
   84d76:	2b01      	cmp	r3, #1
   84d78:	d81e      	bhi.n	84db8 <SystemCoreClockUpdate+0x50>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84d7a:	6a13      	ldr	r3, [r2, #32]
   84d7c:	01d9      	lsls	r1, r3, #7
   84d7e:	d538      	bpl.n	84df2 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84d80:	482c      	ldr	r0, [pc, #176]	; (84e34 <SystemCoreClockUpdate+0xcc>)
   84d82:	4b2d      	ldr	r3, [pc, #180]	; (84e38 <SystemCoreClockUpdate+0xd0>)
   84d84:	6003      	str	r3, [r0, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84d86:	4a2a      	ldr	r2, [pc, #168]	; (84e30 <SystemCoreClockUpdate+0xc8>)
   84d88:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84d8a:	f003 0303 	and.w	r3, r3, #3
   84d8e:	2b02      	cmp	r3, #2
   84d90:	d03c      	beq.n	84e0c <SystemCoreClockUpdate+0xa4>
   84d92:	4b2a      	ldr	r3, [pc, #168]	; (84e3c <SystemCoreClockUpdate+0xd4>)
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   84d94:	4926      	ldr	r1, [pc, #152]	; (84e30 <SystemCoreClockUpdate+0xc8>)
   84d96:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   84d98:	f002 0270 	and.w	r2, r2, #112	; 0x70
   84d9c:	2a70      	cmp	r2, #112	; 0x70
   84d9e:	d005      	beq.n	84dac <SystemCoreClockUpdate+0x44>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84da0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   84da2:	f3c2 1202 	ubfx	r2, r2, #4, #3
   84da6:	40d3      	lsrs	r3, r2
   84da8:	6003      	str	r3, [r0, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   84daa:	4770      	bx	lr
		SystemCoreClock /= 3U;
   84dac:	4a24      	ldr	r2, [pc, #144]	; (84e40 <SystemCoreClockUpdate+0xd8>)
   84dae:	fba2 2303 	umull	r2, r3, r2, r3
   84db2:	085b      	lsrs	r3, r3, #1
   84db4:	6003      	str	r3, [r0, #0]
}
   84db6:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   84db8:	4b22      	ldr	r3, [pc, #136]	; (84e44 <SystemCoreClockUpdate+0xdc>)
   84dba:	481e      	ldr	r0, [pc, #120]	; (84e34 <SystemCoreClockUpdate+0xcc>)
   84dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84dbe:	f013 0f80 	tst.w	r3, #128	; 0x80
   84dc2:	bf14      	ite	ne
   84dc4:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   84dc8:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
   84dcc:	e7e2      	b.n	84d94 <SystemCoreClockUpdate+0x2c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84dce:	6a13      	ldr	r3, [r2, #32]
   84dd0:	01db      	lsls	r3, r3, #7
   84dd2:	d40b      	bmi.n	84dec <SystemCoreClockUpdate+0x84>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84dd4:	6a12      	ldr	r2, [r2, #32]
   84dd6:	f002 0270 	and.w	r2, r2, #112	; 0x70
   84dda:	2a10      	cmp	r2, #16
   84ddc:	d021      	beq.n	84e22 <SystemCoreClockUpdate+0xba>
   84dde:	4b16      	ldr	r3, [pc, #88]	; (84e38 <SystemCoreClockUpdate+0xd0>)
   84de0:	4919      	ldr	r1, [pc, #100]	; (84e48 <SystemCoreClockUpdate+0xe0>)
   84de2:	4814      	ldr	r0, [pc, #80]	; (84e34 <SystemCoreClockUpdate+0xcc>)
   84de4:	2a20      	cmp	r2, #32
   84de6:	bf18      	it	ne
   84de8:	460b      	movne	r3, r1
   84dea:	e7d3      	b.n	84d94 <SystemCoreClockUpdate+0x2c>
   84dec:	4b12      	ldr	r3, [pc, #72]	; (84e38 <SystemCoreClockUpdate+0xd0>)
   84dee:	4811      	ldr	r0, [pc, #68]	; (84e34 <SystemCoreClockUpdate+0xcc>)
   84df0:	e7d0      	b.n	84d94 <SystemCoreClockUpdate+0x2c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84df2:	4b15      	ldr	r3, [pc, #84]	; (84e48 <SystemCoreClockUpdate+0xe0>)
   84df4:	480f      	ldr	r0, [pc, #60]	; (84e34 <SystemCoreClockUpdate+0xcc>)
   84df6:	6003      	str	r3, [r0, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84df8:	6a13      	ldr	r3, [r2, #32]
   84dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84dfe:	2b10      	cmp	r3, #16
   84e00:	d012      	beq.n	84e28 <SystemCoreClockUpdate+0xc0>
   84e02:	2b20      	cmp	r3, #32
   84e04:	d1bf      	bne.n	84d86 <SystemCoreClockUpdate+0x1e>
				SystemCoreClock *= 3U;
   84e06:	4b0c      	ldr	r3, [pc, #48]	; (84e38 <SystemCoreClockUpdate+0xd0>)
   84e08:	6003      	str	r3, [r0, #0]
				break;
   84e0a:	e7bc      	b.n	84d86 <SystemCoreClockUpdate+0x1e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84e0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   84e0e:	6803      	ldr	r3, [r0, #0]
   84e10:	f3c1 410a 	ubfx	r1, r1, #16, #11
   84e14:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   84e18:	6a92      	ldr	r2, [r2, #40]	; 0x28
   84e1a:	b2d2      	uxtb	r2, r2
   84e1c:	fbb3 f3f2 	udiv	r3, r3, r2
   84e20:	e7b8      	b.n	84d94 <SystemCoreClockUpdate+0x2c>
   84e22:	4b0a      	ldr	r3, [pc, #40]	; (84e4c <SystemCoreClockUpdate+0xe4>)
   84e24:	4803      	ldr	r0, [pc, #12]	; (84e34 <SystemCoreClockUpdate+0xcc>)
   84e26:	e7b5      	b.n	84d94 <SystemCoreClockUpdate+0x2c>
				SystemCoreClock *= 2U;
   84e28:	4b08      	ldr	r3, [pc, #32]	; (84e4c <SystemCoreClockUpdate+0xe4>)
   84e2a:	6003      	str	r3, [r0, #0]
				break;
   84e2c:	e7ab      	b.n	84d86 <SystemCoreClockUpdate+0x1e>
   84e2e:	bf00      	nop
   84e30:	400e0400 	.word	0x400e0400
   84e34:	20000330 	.word	0x20000330
   84e38:	00b71b00 	.word	0x00b71b00
   84e3c:	0e4e1c00 	.word	0x0e4e1c00
   84e40:	aaaaaaab 	.word	0xaaaaaaab
   84e44:	400e1200 	.word	0x400e1200
   84e48:	003d0900 	.word	0x003d0900
   84e4c:	007a1200 	.word	0x007a1200

00084e50 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   84e50:	b410      	push	{r4}

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   84e52:	f04f 33ff 	mov.w	r3, #4294967295
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   84e56:	2402      	movs	r4, #2
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84e58:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   84e5c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   84e60:	f840 400c 	str.w	r4, [r0, ip]
	tc_channel->TC_IDR = 0xFFFFFFFF;
   84e64:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   84e66:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   84e68:	604a      	str	r2, [r1, #4]
}
   84e6a:	bc10      	pop	{r4}
   84e6c:	4770      	bx	lr
   84e6e:	bf00      	nop

00084e70 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   84e70:	2305      	movs	r3, #5
   84e72:	0189      	lsls	r1, r1, #6
   84e74:	5043      	str	r3, [r0, r1]
}
   84e76:	4770      	bx	lr

00084e78 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   84e78:	2302      	movs	r3, #2
   84e7a:	0189      	lsls	r1, r1, #6
   84e7c:	5043      	str	r3, [r0, r1]
}
   84e7e:	4770      	bx	lr

00084e80 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   84e80:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   84e84:	61c2      	str	r2, [r0, #28]
}
   84e86:	4770      	bx	lr

00084e88 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84e88:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   84e8c:	6242      	str	r2, [r0, #36]	; 0x24
}
   84e8e:	4770      	bx	lr

00084e90 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84e90:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   84e94:	6a00      	ldr	r0, [r0, #32]
}
   84e96:	4770      	bx	lr

00084e98 <__libc_init_array>:
   84e98:	b570      	push	{r4, r5, r6, lr}
   84e9a:	4e0d      	ldr	r6, [pc, #52]	; (84ed0 <__libc_init_array+0x38>)
   84e9c:	4d0d      	ldr	r5, [pc, #52]	; (84ed4 <__libc_init_array+0x3c>)
   84e9e:	1b76      	subs	r6, r6, r5
   84ea0:	10b6      	asrs	r6, r6, #2
   84ea2:	d006      	beq.n	84eb2 <__libc_init_array+0x1a>
   84ea4:	2400      	movs	r4, #0
   84ea6:	f855 3b04 	ldr.w	r3, [r5], #4
   84eaa:	3401      	adds	r4, #1
   84eac:	4798      	blx	r3
   84eae:	42a6      	cmp	r6, r4
   84eb0:	d1f9      	bne.n	84ea6 <__libc_init_array+0xe>
   84eb2:	4e09      	ldr	r6, [pc, #36]	; (84ed8 <__libc_init_array+0x40>)
   84eb4:	4d09      	ldr	r5, [pc, #36]	; (84edc <__libc_init_array+0x44>)
   84eb6:	f007 fa0f 	bl	8c2d8 <_init>
   84eba:	1b76      	subs	r6, r6, r5
   84ebc:	10b6      	asrs	r6, r6, #2
   84ebe:	d006      	beq.n	84ece <__libc_init_array+0x36>
   84ec0:	2400      	movs	r4, #0
   84ec2:	f855 3b04 	ldr.w	r3, [r5], #4
   84ec6:	3401      	adds	r4, #1
   84ec8:	4798      	blx	r3
   84eca:	42a6      	cmp	r6, r4
   84ecc:	d1f9      	bne.n	84ec2 <__libc_init_array+0x2a>
   84ece:	bd70      	pop	{r4, r5, r6, pc}
   84ed0:	0008c2e4 	.word	0x0008c2e4
   84ed4:	0008c2e4 	.word	0x0008c2e4
   84ed8:	0008c2ec 	.word	0x0008c2ec
   84edc:	0008c2e4 	.word	0x0008c2e4

00084ee0 <iprintf>:
   84ee0:	b40f      	push	{r0, r1, r2, r3}
   84ee2:	b500      	push	{lr}
   84ee4:	4a07      	ldr	r2, [pc, #28]	; (84f04 <iprintf+0x24>)
   84ee6:	b083      	sub	sp, #12
   84ee8:	ab04      	add	r3, sp, #16
   84eea:	6810      	ldr	r0, [r2, #0]
   84eec:	f853 2b04 	ldr.w	r2, [r3], #4
   84ef0:	6881      	ldr	r1, [r0, #8]
   84ef2:	9301      	str	r3, [sp, #4]
   84ef4:	f001 ffc2 	bl	86e7c <_vfiprintf_r>
   84ef8:	b003      	add	sp, #12
   84efa:	f85d eb04 	ldr.w	lr, [sp], #4
   84efe:	b004      	add	sp, #16
   84f00:	4770      	bx	lr
   84f02:	bf00      	nop
   84f04:	200003c0 	.word	0x200003c0

00084f08 <memcpy>:
   84f08:	4684      	mov	ip, r0
   84f0a:	ea41 0300 	orr.w	r3, r1, r0
   84f0e:	f013 0303 	ands.w	r3, r3, #3
   84f12:	d149      	bne.n	84fa8 <memcpy+0xa0>
   84f14:	3a40      	subs	r2, #64	; 0x40
   84f16:	d323      	bcc.n	84f60 <memcpy+0x58>
   84f18:	680b      	ldr	r3, [r1, #0]
   84f1a:	6003      	str	r3, [r0, #0]
   84f1c:	684b      	ldr	r3, [r1, #4]
   84f1e:	6043      	str	r3, [r0, #4]
   84f20:	688b      	ldr	r3, [r1, #8]
   84f22:	6083      	str	r3, [r0, #8]
   84f24:	68cb      	ldr	r3, [r1, #12]
   84f26:	60c3      	str	r3, [r0, #12]
   84f28:	690b      	ldr	r3, [r1, #16]
   84f2a:	6103      	str	r3, [r0, #16]
   84f2c:	694b      	ldr	r3, [r1, #20]
   84f2e:	6143      	str	r3, [r0, #20]
   84f30:	698b      	ldr	r3, [r1, #24]
   84f32:	6183      	str	r3, [r0, #24]
   84f34:	69cb      	ldr	r3, [r1, #28]
   84f36:	61c3      	str	r3, [r0, #28]
   84f38:	6a0b      	ldr	r3, [r1, #32]
   84f3a:	6203      	str	r3, [r0, #32]
   84f3c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84f3e:	6243      	str	r3, [r0, #36]	; 0x24
   84f40:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84f42:	6283      	str	r3, [r0, #40]	; 0x28
   84f44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84f46:	62c3      	str	r3, [r0, #44]	; 0x2c
   84f48:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84f4a:	6303      	str	r3, [r0, #48]	; 0x30
   84f4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84f4e:	6343      	str	r3, [r0, #52]	; 0x34
   84f50:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   84f52:	6383      	str	r3, [r0, #56]	; 0x38
   84f54:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84f56:	63c3      	str	r3, [r0, #60]	; 0x3c
   84f58:	3040      	adds	r0, #64	; 0x40
   84f5a:	3140      	adds	r1, #64	; 0x40
   84f5c:	3a40      	subs	r2, #64	; 0x40
   84f5e:	d2db      	bcs.n	84f18 <memcpy+0x10>
   84f60:	3230      	adds	r2, #48	; 0x30
   84f62:	d30b      	bcc.n	84f7c <memcpy+0x74>
   84f64:	680b      	ldr	r3, [r1, #0]
   84f66:	6003      	str	r3, [r0, #0]
   84f68:	684b      	ldr	r3, [r1, #4]
   84f6a:	6043      	str	r3, [r0, #4]
   84f6c:	688b      	ldr	r3, [r1, #8]
   84f6e:	6083      	str	r3, [r0, #8]
   84f70:	68cb      	ldr	r3, [r1, #12]
   84f72:	60c3      	str	r3, [r0, #12]
   84f74:	3010      	adds	r0, #16
   84f76:	3110      	adds	r1, #16
   84f78:	3a10      	subs	r2, #16
   84f7a:	d2f3      	bcs.n	84f64 <memcpy+0x5c>
   84f7c:	320c      	adds	r2, #12
   84f7e:	d305      	bcc.n	84f8c <memcpy+0x84>
   84f80:	f851 3b04 	ldr.w	r3, [r1], #4
   84f84:	f840 3b04 	str.w	r3, [r0], #4
   84f88:	3a04      	subs	r2, #4
   84f8a:	d2f9      	bcs.n	84f80 <memcpy+0x78>
   84f8c:	3204      	adds	r2, #4
   84f8e:	d008      	beq.n	84fa2 <memcpy+0x9a>
   84f90:	07d2      	lsls	r2, r2, #31
   84f92:	bf1c      	itt	ne
   84f94:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84f98:	f800 3b01 	strbne.w	r3, [r0], #1
   84f9c:	d301      	bcc.n	84fa2 <memcpy+0x9a>
   84f9e:	880b      	ldrh	r3, [r1, #0]
   84fa0:	8003      	strh	r3, [r0, #0]
   84fa2:	4660      	mov	r0, ip
   84fa4:	4770      	bx	lr
   84fa6:	bf00      	nop
   84fa8:	2a08      	cmp	r2, #8
   84faa:	d313      	bcc.n	84fd4 <memcpy+0xcc>
   84fac:	078b      	lsls	r3, r1, #30
   84fae:	d0b1      	beq.n	84f14 <memcpy+0xc>
   84fb0:	f010 0303 	ands.w	r3, r0, #3
   84fb4:	d0ae      	beq.n	84f14 <memcpy+0xc>
   84fb6:	f1c3 0304 	rsb	r3, r3, #4
   84fba:	1ad2      	subs	r2, r2, r3
   84fbc:	07db      	lsls	r3, r3, #31
   84fbe:	bf1c      	itt	ne
   84fc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84fc4:	f800 3b01 	strbne.w	r3, [r0], #1
   84fc8:	d3a4      	bcc.n	84f14 <memcpy+0xc>
   84fca:	f831 3b02 	ldrh.w	r3, [r1], #2
   84fce:	f820 3b02 	strh.w	r3, [r0], #2
   84fd2:	e79f      	b.n	84f14 <memcpy+0xc>
   84fd4:	3a04      	subs	r2, #4
   84fd6:	d3d9      	bcc.n	84f8c <memcpy+0x84>
   84fd8:	3a01      	subs	r2, #1
   84fda:	f811 3b01 	ldrb.w	r3, [r1], #1
   84fde:	f800 3b01 	strb.w	r3, [r0], #1
   84fe2:	d2f9      	bcs.n	84fd8 <memcpy+0xd0>
   84fe4:	780b      	ldrb	r3, [r1, #0]
   84fe6:	7003      	strb	r3, [r0, #0]
   84fe8:	784b      	ldrb	r3, [r1, #1]
   84fea:	7043      	strb	r3, [r0, #1]
   84fec:	788b      	ldrb	r3, [r1, #2]
   84fee:	7083      	strb	r3, [r0, #2]
   84ff0:	4660      	mov	r0, ip
   84ff2:	4770      	bx	lr

00084ff4 <memset>:
   84ff4:	0783      	lsls	r3, r0, #30
   84ff6:	b530      	push	{r4, r5, lr}
   84ff8:	d048      	beq.n	8508c <memset+0x98>
   84ffa:	1e54      	subs	r4, r2, #1
   84ffc:	2a00      	cmp	r2, #0
   84ffe:	d03f      	beq.n	85080 <memset+0x8c>
   85000:	4603      	mov	r3, r0
   85002:	b2ca      	uxtb	r2, r1
   85004:	e001      	b.n	8500a <memset+0x16>
   85006:	3c01      	subs	r4, #1
   85008:	d33a      	bcc.n	85080 <memset+0x8c>
   8500a:	f803 2b01 	strb.w	r2, [r3], #1
   8500e:	079d      	lsls	r5, r3, #30
   85010:	d1f9      	bne.n	85006 <memset+0x12>
   85012:	2c03      	cmp	r4, #3
   85014:	d92d      	bls.n	85072 <memset+0x7e>
   85016:	b2cd      	uxtb	r5, r1
   85018:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8501c:	2c0f      	cmp	r4, #15
   8501e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85022:	d936      	bls.n	85092 <memset+0x9e>
   85024:	f1a4 0210 	sub.w	r2, r4, #16
   85028:	f022 0c0f 	bic.w	ip, r2, #15
   8502c:	f103 0e20 	add.w	lr, r3, #32
   85030:	44e6      	add	lr, ip
   85032:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   85036:	f103 0210 	add.w	r2, r3, #16
   8503a:	e942 5504 	strd	r5, r5, [r2, #-16]
   8503e:	e942 5502 	strd	r5, r5, [r2, #-8]
   85042:	3210      	adds	r2, #16
   85044:	4572      	cmp	r2, lr
   85046:	d1f8      	bne.n	8503a <memset+0x46>
   85048:	f10c 0201 	add.w	r2, ip, #1
   8504c:	f014 0f0c 	tst.w	r4, #12
   85050:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85054:	f004 0c0f 	and.w	ip, r4, #15
   85058:	d013      	beq.n	85082 <memset+0x8e>
   8505a:	f1ac 0304 	sub.w	r3, ip, #4
   8505e:	f023 0303 	bic.w	r3, r3, #3
   85062:	3304      	adds	r3, #4
   85064:	4413      	add	r3, r2
   85066:	f842 5b04 	str.w	r5, [r2], #4
   8506a:	4293      	cmp	r3, r2
   8506c:	d1fb      	bne.n	85066 <memset+0x72>
   8506e:	f00c 0403 	and.w	r4, ip, #3
   85072:	b12c      	cbz	r4, 85080 <memset+0x8c>
   85074:	b2ca      	uxtb	r2, r1
   85076:	441c      	add	r4, r3
   85078:	f803 2b01 	strb.w	r2, [r3], #1
   8507c:	429c      	cmp	r4, r3
   8507e:	d1fb      	bne.n	85078 <memset+0x84>
   85080:	bd30      	pop	{r4, r5, pc}
   85082:	4664      	mov	r4, ip
   85084:	4613      	mov	r3, r2
   85086:	2c00      	cmp	r4, #0
   85088:	d1f4      	bne.n	85074 <memset+0x80>
   8508a:	e7f9      	b.n	85080 <memset+0x8c>
   8508c:	4603      	mov	r3, r0
   8508e:	4614      	mov	r4, r2
   85090:	e7bf      	b.n	85012 <memset+0x1e>
   85092:	461a      	mov	r2, r3
   85094:	46a4      	mov	ip, r4
   85096:	e7e0      	b.n	8505a <memset+0x66>

00085098 <setbuf>:
   85098:	2900      	cmp	r1, #0
   8509a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8509e:	bf0c      	ite	eq
   850a0:	2202      	moveq	r2, #2
   850a2:	2200      	movne	r2, #0
   850a4:	f000 b800 	b.w	850a8 <setvbuf>

000850a8 <setvbuf>:
   850a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   850ac:	4c69      	ldr	r4, [pc, #420]	; (85254 <setvbuf+0x1ac>)
   850ae:	460e      	mov	r6, r1
   850b0:	f8d4 8000 	ldr.w	r8, [r4]
   850b4:	4617      	mov	r7, r2
   850b6:	4604      	mov	r4, r0
   850b8:	461d      	mov	r5, r3
   850ba:	b083      	sub	sp, #12
   850bc:	f1b8 0f00 	cmp.w	r8, #0
   850c0:	d003      	beq.n	850ca <setvbuf+0x22>
   850c2:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   850c6:	2b00      	cmp	r3, #0
   850c8:	d077      	beq.n	851ba <setvbuf+0x112>
   850ca:	2f02      	cmp	r7, #2
   850cc:	d005      	beq.n	850da <setvbuf+0x32>
   850ce:	2f01      	cmp	r7, #1
   850d0:	f200 80ac 	bhi.w	8522c <setvbuf+0x184>
   850d4:	2d00      	cmp	r5, #0
   850d6:	f2c0 80a9 	blt.w	8522c <setvbuf+0x184>
   850da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   850dc:	07da      	lsls	r2, r3, #31
   850de:	d552      	bpl.n	85186 <setvbuf+0xde>
   850e0:	4621      	mov	r1, r4
   850e2:	4640      	mov	r0, r8
   850e4:	f003 fee0 	bl	88ea8 <_fflush_r>
   850e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   850ea:	b141      	cbz	r1, 850fe <setvbuf+0x56>
   850ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
   850f0:	4299      	cmp	r1, r3
   850f2:	d002      	beq.n	850fa <setvbuf+0x52>
   850f4:	4640      	mov	r0, r8
   850f6:	f004 f887 	bl	89208 <_free_r>
   850fa:	2300      	movs	r3, #0
   850fc:	6323      	str	r3, [r4, #48]	; 0x30
   850fe:	2300      	movs	r3, #0
   85100:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   85104:	61a3      	str	r3, [r4, #24]
   85106:	f01c 0f80 	tst.w	ip, #128	; 0x80
   8510a:	6063      	str	r3, [r4, #4]
   8510c:	d164      	bne.n	851d8 <setvbuf+0x130>
   8510e:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   85112:	f02c 0c03 	bic.w	ip, ip, #3
   85116:	2f02      	cmp	r7, #2
   85118:	f8a4 c00c 	strh.w	ip, [r4, #12]
   8511c:	d06a      	beq.n	851f4 <setvbuf+0x14c>
   8511e:	ab01      	add	r3, sp, #4
   85120:	4621      	mov	r1, r4
   85122:	4640      	mov	r0, r8
   85124:	466a      	mov	r2, sp
   85126:	f004 fb8d 	bl	89844 <__swhatbuf_r>
   8512a:	89a3      	ldrh	r3, [r4, #12]
   8512c:	4318      	orrs	r0, r3
   8512e:	81a0      	strh	r0, [r4, #12]
   85130:	2d00      	cmp	r5, #0
   85132:	d02f      	beq.n	85194 <setvbuf+0xec>
   85134:	2e00      	cmp	r6, #0
   85136:	d02e      	beq.n	85196 <setvbuf+0xee>
   85138:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   8513c:	2b00      	cmp	r3, #0
   8513e:	d038      	beq.n	851b2 <setvbuf+0x10a>
   85140:	9b00      	ldr	r3, [sp, #0]
   85142:	e9c4 6504 	strd	r6, r5, [r4, #16]
   85146:	42ab      	cmp	r3, r5
   85148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8514c:	6026      	str	r6, [r4, #0]
   8514e:	bf1c      	itt	ne
   85150:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   85154:	81a3      	strhne	r3, [r4, #12]
   85156:	2f01      	cmp	r7, #1
   85158:	bf04      	itt	eq
   8515a:	f043 0301 	orreq.w	r3, r3, #1
   8515e:	81a3      	strheq	r3, [r4, #12]
   85160:	b29a      	uxth	r2, r3
   85162:	f013 0308 	ands.w	r3, r3, #8
   85166:	d02c      	beq.n	851c2 <setvbuf+0x11a>
   85168:	07d1      	lsls	r1, r2, #31
   8516a:	d55d      	bpl.n	85228 <setvbuf+0x180>
   8516c:	2100      	movs	r1, #0
   8516e:	426d      	negs	r5, r5
   85170:	61a5      	str	r5, [r4, #24]
   85172:	6e65      	ldr	r5, [r4, #100]	; 0x64
   85174:	60a1      	str	r1, [r4, #8]
   85176:	f015 0501 	ands.w	r5, r5, #1
   8517a:	d027      	beq.n	851cc <setvbuf+0x124>
   8517c:	2500      	movs	r5, #0
   8517e:	4628      	mov	r0, r5
   85180:	b003      	add	sp, #12
   85182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85186:	89a3      	ldrh	r3, [r4, #12]
   85188:	059b      	lsls	r3, r3, #22
   8518a:	d4a9      	bmi.n	850e0 <setvbuf+0x38>
   8518c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8518e:	f004 fae5 	bl	8975c <__retarget_lock_acquire_recursive>
   85192:	e7a5      	b.n	850e0 <setvbuf+0x38>
   85194:	9d00      	ldr	r5, [sp, #0]
   85196:	4628      	mov	r0, r5
   85198:	f004 fb84 	bl	898a4 <malloc>
   8519c:	4606      	mov	r6, r0
   8519e:	2800      	cmp	r0, #0
   851a0:	d047      	beq.n	85232 <setvbuf+0x18a>
   851a2:	89a3      	ldrh	r3, [r4, #12]
   851a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   851a8:	81a3      	strh	r3, [r4, #12]
   851aa:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   851ae:	2b00      	cmp	r3, #0
   851b0:	d1c6      	bne.n	85140 <setvbuf+0x98>
   851b2:	4640      	mov	r0, r8
   851b4:	f003 feac 	bl	88f10 <__sinit>
   851b8:	e7c2      	b.n	85140 <setvbuf+0x98>
   851ba:	4640      	mov	r0, r8
   851bc:	f003 fea8 	bl	88f10 <__sinit>
   851c0:	e783      	b.n	850ca <setvbuf+0x22>
   851c2:	60a3      	str	r3, [r4, #8]
   851c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
   851c6:	f015 0501 	ands.w	r5, r5, #1
   851ca:	d1d7      	bne.n	8517c <setvbuf+0xd4>
   851cc:	0593      	lsls	r3, r2, #22
   851ce:	d524      	bpl.n	8521a <setvbuf+0x172>
   851d0:	4628      	mov	r0, r5
   851d2:	b003      	add	sp, #12
   851d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   851d8:	4640      	mov	r0, r8
   851da:	6921      	ldr	r1, [r4, #16]
   851dc:	f004 f814 	bl	89208 <_free_r>
   851e0:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   851e4:	2f02      	cmp	r7, #2
   851e6:	f42c 6c4a 	bic.w	ip, ip, #3232	; 0xca0
   851ea:	f02c 0c03 	bic.w	ip, ip, #3
   851ee:	f8a4 c00c 	strh.w	ip, [r4, #12]
   851f2:	d194      	bne.n	8511e <setvbuf+0x76>
   851f4:	2500      	movs	r5, #0
   851f6:	2100      	movs	r1, #0
   851f8:	2201      	movs	r2, #1
   851fa:	f104 0343 	add.w	r3, r4, #67	; 0x43
   851fe:	6023      	str	r3, [r4, #0]
   85200:	6123      	str	r3, [r4, #16]
   85202:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85204:	f04c 0c02 	orr.w	ip, ip, #2
   85208:	07d8      	lsls	r0, r3, #31
   8520a:	f8a4 c00c 	strh.w	ip, [r4, #12]
   8520e:	60a1      	str	r1, [r4, #8]
   85210:	6162      	str	r2, [r4, #20]
   85212:	d4dd      	bmi.n	851d0 <setvbuf+0x128>
   85214:	f41c 7f00 	tst.w	ip, #512	; 0x200
   85218:	d1da      	bne.n	851d0 <setvbuf+0x128>
   8521a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8521c:	f004 faa0 	bl	89760 <__retarget_lock_release_recursive>
   85220:	4628      	mov	r0, r5
   85222:	b003      	add	sp, #12
   85224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85228:	60a5      	str	r5, [r4, #8]
   8522a:	e7cb      	b.n	851c4 <setvbuf+0x11c>
   8522c:	f04f 35ff 	mov.w	r5, #4294967295
   85230:	e7ce      	b.n	851d0 <setvbuf+0x128>
   85232:	f8dd 9000 	ldr.w	r9, [sp]
   85236:	45a9      	cmp	r9, r5
   85238:	d004      	beq.n	85244 <setvbuf+0x19c>
   8523a:	4648      	mov	r0, r9
   8523c:	f004 fb32 	bl	898a4 <malloc>
   85240:	4606      	mov	r6, r0
   85242:	b920      	cbnz	r0, 8524e <setvbuf+0x1a6>
   85244:	f04f 35ff 	mov.w	r5, #4294967295
   85248:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   8524c:	e7d3      	b.n	851f6 <setvbuf+0x14e>
   8524e:	464d      	mov	r5, r9
   85250:	e7a7      	b.n	851a2 <setvbuf+0xfa>
   85252:	bf00      	nop
   85254:	200003c0 	.word	0x200003c0

00085258 <sprintf>:
   85258:	b40e      	push	{r1, r2, r3}
   8525a:	b530      	push	{r4, r5, lr}
   8525c:	4604      	mov	r4, r0
   8525e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85262:	b09c      	sub	sp, #112	; 0x70
   85264:	4a0b      	ldr	r2, [pc, #44]	; (85294 <sprintf+0x3c>)
   85266:	ab1f      	add	r3, sp, #124	; 0x7c
   85268:	490b      	ldr	r1, [pc, #44]	; (85298 <sprintf+0x40>)
   8526a:	9205      	str	r2, [sp, #20]
   8526c:	f853 2b04 	ldr.w	r2, [r3], #4
   85270:	6808      	ldr	r0, [r1, #0]
   85272:	a902      	add	r1, sp, #8
   85274:	e9cd 3401 	strd	r3, r4, [sp, #4]
   85278:	9507      	str	r5, [sp, #28]
   8527a:	9504      	str	r5, [sp, #16]
   8527c:	9406      	str	r4, [sp, #24]
   8527e:	f000 f86f 	bl	85360 <_svfprintf_r>
   85282:	2200      	movs	r2, #0
   85284:	9b02      	ldr	r3, [sp, #8]
   85286:	701a      	strb	r2, [r3, #0]
   85288:	b01c      	add	sp, #112	; 0x70
   8528a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8528e:	b003      	add	sp, #12
   85290:	4770      	bx	lr
   85292:	bf00      	nop
   85294:	ffff0208 	.word	0xffff0208
   85298:	200003c0 	.word	0x200003c0

0008529c <strlen>:
   8529c:	f020 0103 	bic.w	r1, r0, #3
   852a0:	f010 0003 	ands.w	r0, r0, #3
   852a4:	f1c0 0000 	rsb	r0, r0, #0
   852a8:	f851 3b04 	ldr.w	r3, [r1], #4
   852ac:	f100 0c04 	add.w	ip, r0, #4
   852b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   852b4:	f06f 0200 	mvn.w	r2, #0
   852b8:	bf1c      	itt	ne
   852ba:	fa22 f20c 	lsrne.w	r2, r2, ip
   852be:	4313      	orrne	r3, r2
   852c0:	f04f 0c01 	mov.w	ip, #1
   852c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   852c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   852cc:	eba3 020c 	sub.w	r2, r3, ip
   852d0:	ea22 0203 	bic.w	r2, r2, r3
   852d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   852d8:	bf04      	itt	eq
   852da:	f851 3b04 	ldreq.w	r3, [r1], #4
   852de:	3004      	addeq	r0, #4
   852e0:	d0f4      	beq.n	852cc <strlen+0x30>
   852e2:	f1c2 0100 	rsb	r1, r2, #0
   852e6:	ea02 0201 	and.w	r2, r2, r1
   852ea:	fab2 f282 	clz	r2, r2
   852ee:	f1c2 021f 	rsb	r2, r2, #31
   852f2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   852f6:	4770      	bx	lr

000852f8 <strncpy>:
   852f8:	b530      	push	{r4, r5, lr}
   852fa:	ea40 0401 	orr.w	r4, r0, r1
   852fe:	07a3      	lsls	r3, r4, #30
   85300:	d122      	bne.n	85348 <strncpy+0x50>
   85302:	2a03      	cmp	r2, #3
   85304:	d920      	bls.n	85348 <strncpy+0x50>
   85306:	460b      	mov	r3, r1
   85308:	4684      	mov	ip, r0
   8530a:	4619      	mov	r1, r3
   8530c:	f853 5b04 	ldr.w	r5, [r3], #4
   85310:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   85314:	ea24 0405 	bic.w	r4, r4, r5
   85318:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   8531c:	d115      	bne.n	8534a <strncpy+0x52>
   8531e:	3a04      	subs	r2, #4
   85320:	2a03      	cmp	r2, #3
   85322:	4619      	mov	r1, r3
   85324:	f84c 5b04 	str.w	r5, [ip], #4
   85328:	d8ef      	bhi.n	8530a <strncpy+0x12>
   8532a:	f101 3eff 	add.w	lr, r1, #4294967295
   8532e:	b152      	cbz	r2, 85346 <strncpy+0x4e>
   85330:	4663      	mov	r3, ip
   85332:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   85336:	1e54      	subs	r4, r2, #1
   85338:	f803 1b01 	strb.w	r1, [r3], #1
   8533c:	b141      	cbz	r1, 85350 <strncpy+0x58>
   8533e:	4622      	mov	r2, r4
   85340:	469c      	mov	ip, r3
   85342:	2a00      	cmp	r2, #0
   85344:	d1f4      	bne.n	85330 <strncpy+0x38>
   85346:	bd30      	pop	{r4, r5, pc}
   85348:	4684      	mov	ip, r0
   8534a:	f101 3eff 	add.w	lr, r1, #4294967295
   8534e:	e7ee      	b.n	8532e <strncpy+0x36>
   85350:	4462      	add	r2, ip
   85352:	2c00      	cmp	r4, #0
   85354:	d0f7      	beq.n	85346 <strncpy+0x4e>
   85356:	f803 1b01 	strb.w	r1, [r3], #1
   8535a:	4293      	cmp	r3, r2
   8535c:	d1fb      	bne.n	85356 <strncpy+0x5e>
   8535e:	bd30      	pop	{r4, r5, pc}

00085360 <_svfprintf_r>:
   85360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85364:	b0d5      	sub	sp, #340	; 0x154
   85366:	460c      	mov	r4, r1
   85368:	910c      	str	r1, [sp, #48]	; 0x30
   8536a:	4691      	mov	r9, r2
   8536c:	930e      	str	r3, [sp, #56]	; 0x38
   8536e:	900a      	str	r0, [sp, #40]	; 0x28
   85370:	f004 f9ec 	bl	8974c <_localeconv_r>
   85374:	6803      	ldr	r3, [r0, #0]
   85376:	4618      	mov	r0, r3
   85378:	9317      	str	r3, [sp, #92]	; 0x5c
   8537a:	f7ff ff8f 	bl	8529c <strlen>
   8537e:	89a3      	ldrh	r3, [r4, #12]
   85380:	9016      	str	r0, [sp, #88]	; 0x58
   85382:	0619      	lsls	r1, r3, #24
   85384:	d503      	bpl.n	8538e <_svfprintf_r+0x2e>
   85386:	6923      	ldr	r3, [r4, #16]
   85388:	2b00      	cmp	r3, #0
   8538a:	f000 878f 	beq.w	862ac <_svfprintf_r+0xf4c>
   8538e:	2400      	movs	r4, #0
   85390:	ab2b      	add	r3, sp, #172	; 0xac
   85392:	4622      	mov	r2, r4
   85394:	4698      	mov	r8, r3
   85396:	464d      	mov	r5, r9
   85398:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   8539c:	9328      	str	r3, [sp, #160]	; 0xa0
   8539e:	9412      	str	r4, [sp, #72]	; 0x48
   853a0:	2300      	movs	r3, #0
   853a2:	2400      	movs	r4, #0
   853a4:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   853a8:	782b      	ldrb	r3, [r5, #0]
   853aa:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   853ae:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   853b2:	9218      	str	r2, [sp, #96]	; 0x60
   853b4:	9208      	str	r2, [sp, #32]
   853b6:	2b00      	cmp	r3, #0
   853b8:	f000 81ce 	beq.w	85758 <_svfprintf_r+0x3f8>
   853bc:	46aa      	mov	sl, r5
   853be:	e004      	b.n	853ca <_svfprintf_r+0x6a>
   853c0:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   853c4:	2b00      	cmp	r3, #0
   853c6:	f000 8109 	beq.w	855dc <_svfprintf_r+0x27c>
   853ca:	2b25      	cmp	r3, #37	; 0x25
   853cc:	d1f8      	bne.n	853c0 <_svfprintf_r+0x60>
   853ce:	ebba 0605 	subs.w	r6, sl, r5
   853d2:	f040 8107 	bne.w	855e4 <_svfprintf_r+0x284>
   853d6:	f89a 3000 	ldrb.w	r3, [sl]
   853da:	2b00      	cmp	r3, #0
   853dc:	f000 81bc 	beq.w	85758 <_svfprintf_r+0x3f8>
   853e0:	2300      	movs	r3, #0
   853e2:	f04f 32ff 	mov.w	r2, #4294967295
   853e6:	f04f 092b 	mov.w	r9, #43	; 0x2b
   853ea:	2420      	movs	r4, #32
   853ec:	461f      	mov	r7, r3
   853ee:	f89a 6001 	ldrb.w	r6, [sl, #1]
   853f2:	9207      	str	r2, [sp, #28]
   853f4:	f10a 0a01 	add.w	sl, sl, #1
   853f8:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   853fc:	9309      	str	r3, [sp, #36]	; 0x24
   853fe:	f10a 0a01 	add.w	sl, sl, #1
   85402:	f1a6 0320 	sub.w	r3, r6, #32
   85406:	2b5a      	cmp	r3, #90	; 0x5a
   85408:	f200 8120 	bhi.w	8564c <_svfprintf_r+0x2ec>
   8540c:	e8df f013 	tbh	[pc, r3, lsl #1]
   85410:	011e02ca 	.word	0x011e02ca
   85414:	02c5011e 	.word	0x02c5011e
   85418:	011e011e 	.word	0x011e011e
   8541c:	02a3011e 	.word	0x02a3011e
   85420:	011e011e 	.word	0x011e011e
   85424:	02f3006a 	.word	0x02f3006a
   85428:	0247011e 	.word	0x0247011e
   8542c:	011e02d9 	.word	0x011e02d9
   85430:	005b02d4 	.word	0x005b02d4
   85434:	005b005b 	.word	0x005b005b
   85438:	005b005b 	.word	0x005b005b
   8543c:	005b005b 	.word	0x005b005b
   85440:	005b005b 	.word	0x005b005b
   85444:	011e011e 	.word	0x011e011e
   85448:	011e011e 	.word	0x011e011e
   8544c:	011e011e 	.word	0x011e011e
   85450:	01b0011e 	.word	0x01b0011e
   85454:	020b011e 	.word	0x020b011e
   85458:	01b0007a 	.word	0x01b0007a
   8545c:	01b001b0 	.word	0x01b001b0
   85460:	011e011e 	.word	0x011e011e
   85464:	011e011e 	.word	0x011e011e
   85468:	011e029e 	.word	0x011e029e
   8546c:	00b6011e 	.word	0x00b6011e
   85470:	011e011e 	.word	0x011e011e
   85474:	0219011e 	.word	0x0219011e
   85478:	024c011e 	.word	0x024c011e
   8547c:	011e011e 	.word	0x011e011e
   85480:	011e073f 	.word	0x011e073f
   85484:	011e011e 	.word	0x011e011e
   85488:	011e011e 	.word	0x011e011e
   8548c:	011e011e 	.word	0x011e011e
   85490:	01b0011e 	.word	0x01b0011e
   85494:	020b011e 	.word	0x020b011e
   85498:	01b0007c 	.word	0x01b0007c
   8549c:	01b001b0 	.word	0x01b001b0
   854a0:	007c0291 	.word	0x007c0291
   854a4:	011e0075 	.word	0x011e0075
   854a8:	011e0284 	.word	0x011e0284
   854ac:	00b80270 	.word	0x00b80270
   854b0:	0075025e 	.word	0x0075025e
   854b4:	0219011e 	.word	0x0219011e
   854b8:	071c0072 	.word	0x071c0072
   854bc:	011e011e 	.word	0x011e011e
   854c0:	011e071f 	.word	0x011e071f
   854c4:	0072      	.short	0x0072
   854c6:	2200      	movs	r2, #0
   854c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   854cc:	f81a 6b01 	ldrb.w	r6, [sl], #1
   854d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   854d4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   854d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   854dc:	2b09      	cmp	r3, #9
   854de:	d9f5      	bls.n	854cc <_svfprintf_r+0x16c>
   854e0:	9209      	str	r2, [sp, #36]	; 0x24
   854e2:	e78e      	b.n	85402 <_svfprintf_r+0xa2>
   854e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   854e6:	f853 2b04 	ldr.w	r2, [r3], #4
   854ea:	2a00      	cmp	r2, #0
   854ec:	9209      	str	r2, [sp, #36]	; 0x24
   854ee:	930e      	str	r3, [sp, #56]	; 0x38
   854f0:	f2c0 81d2 	blt.w	85898 <_svfprintf_r+0x538>
   854f4:	f89a 6000 	ldrb.w	r6, [sl]
   854f8:	e781      	b.n	853fe <_svfprintf_r+0x9e>
   854fa:	f89a 6000 	ldrb.w	r6, [sl]
   854fe:	f047 0720 	orr.w	r7, r7, #32
   85502:	e77c      	b.n	853fe <_svfprintf_r+0x9e>
   85504:	f047 0710 	orr.w	r7, r7, #16
   85508:	06ba      	lsls	r2, r7, #26
   8550a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8550c:	f140 817d 	bpl.w	8580a <_svfprintf_r+0x4aa>
   85510:	3307      	adds	r3, #7
   85512:	f023 0307 	bic.w	r3, r3, #7
   85516:	461a      	mov	r2, r3
   85518:	685b      	ldr	r3, [r3, #4]
   8551a:	f852 4b08 	ldr.w	r4, [r2], #8
   8551e:	4699      	mov	r9, r3
   85520:	920e      	str	r2, [sp, #56]	; 0x38
   85522:	2b00      	cmp	r3, #0
   85524:	f2c0 857f 	blt.w	86026 <_svfprintf_r+0xcc6>
   85528:	9b07      	ldr	r3, [sp, #28]
   8552a:	3301      	adds	r3, #1
   8552c:	f001 8039 	beq.w	865a2 <_svfprintf_r+0x1242>
   85530:	ea54 0309 	orrs.w	r3, r4, r9
   85534:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   85538:	f000 8505 	beq.w	85f46 <_svfprintf_r+0xbe6>
   8553c:	2c0a      	cmp	r4, #10
   8553e:	f179 0300 	sbcs.w	r3, r9, #0
   85542:	f080 8793 	bcs.w	8646c <_svfprintf_r+0x110c>
   85546:	2301      	movs	r3, #1
   85548:	465f      	mov	r7, fp
   8554a:	3430      	adds	r4, #48	; 0x30
   8554c:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   85550:	930b      	str	r3, [sp, #44]	; 0x2c
   85552:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   85556:	9a07      	ldr	r2, [sp, #28]
   85558:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8555a:	2300      	movs	r3, #0
   8555c:	428a      	cmp	r2, r1
   8555e:	bfb8      	it	lt
   85560:	460a      	movlt	r2, r1
   85562:	9206      	str	r2, [sp, #24]
   85564:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   85568:	930d      	str	r3, [sp, #52]	; 0x34
   8556a:	930f      	str	r3, [sp, #60]	; 0x3c
   8556c:	9313      	str	r3, [sp, #76]	; 0x4c
   8556e:	9310      	str	r3, [sp, #64]	; 0x40
   85570:	2a00      	cmp	r2, #0
   85572:	d07c      	beq.n	8566e <_svfprintf_r+0x30e>
   85574:	9b06      	ldr	r3, [sp, #24]
   85576:	3301      	adds	r3, #1
   85578:	9306      	str	r3, [sp, #24]
   8557a:	e078      	b.n	8566e <_svfprintf_r+0x30e>
   8557c:	f047 0710 	orr.w	r7, r7, #16
   85580:	f017 0920 	ands.w	r9, r7, #32
   85584:	f000 8132 	beq.w	857ec <_svfprintf_r+0x48c>
   85588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8558a:	3307      	adds	r3, #7
   8558c:	f023 0307 	bic.w	r3, r3, #7
   85590:	f8d3 9004 	ldr.w	r9, [r3, #4]
   85594:	f853 4b08 	ldr.w	r4, [r3], #8
   85598:	930e      	str	r3, [sp, #56]	; 0x38
   8559a:	2300      	movs	r3, #0
   8559c:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   855a0:	2200      	movs	r2, #0
   855a2:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   855a6:	9a07      	ldr	r2, [sp, #28]
   855a8:	1c51      	adds	r1, r2, #1
   855aa:	f000 822a 	beq.w	85a02 <_svfprintf_r+0x6a2>
   855ae:	ea54 0109 	orrs.w	r1, r4, r9
   855b2:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   855b6:	f040 8223 	bne.w	85a00 <_svfprintf_r+0x6a0>
   855ba:	2a00      	cmp	r2, #0
   855bc:	f041 802b 	bne.w	86616 <_svfprintf_r+0x12b6>
   855c0:	2b00      	cmp	r3, #0
   855c2:	f040 84c5 	bne.w	85f50 <_svfprintf_r+0xbf0>
   855c6:	f01b 0301 	ands.w	r3, fp, #1
   855ca:	930b      	str	r3, [sp, #44]	; 0x2c
   855cc:	f000 8554 	beq.w	86078 <_svfprintf_r+0xd18>
   855d0:	2330      	movs	r3, #48	; 0x30
   855d2:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   855d6:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   855da:	e7bc      	b.n	85556 <_svfprintf_r+0x1f6>
   855dc:	ebba 0605 	subs.w	r6, sl, r5
   855e0:	f000 80ba 	beq.w	85758 <_svfprintf_r+0x3f8>
   855e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   855e6:	e9c8 5600 	strd	r5, r6, [r8]
   855ea:	4433      	add	r3, r6
   855ec:	932a      	str	r3, [sp, #168]	; 0xa8
   855ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   855f0:	3301      	adds	r3, #1
   855f2:	2b07      	cmp	r3, #7
   855f4:	9329      	str	r3, [sp, #164]	; 0xa4
   855f6:	dc05      	bgt.n	85604 <_svfprintf_r+0x2a4>
   855f8:	f108 0808 	add.w	r8, r8, #8
   855fc:	9b08      	ldr	r3, [sp, #32]
   855fe:	4433      	add	r3, r6
   85600:	9308      	str	r3, [sp, #32]
   85602:	e6e8      	b.n	853d6 <_svfprintf_r+0x76>
   85604:	990c      	ldr	r1, [sp, #48]	; 0x30
   85606:	980a      	ldr	r0, [sp, #40]	; 0x28
   85608:	aa28      	add	r2, sp, #160	; 0xa0
   8560a:	f005 fb07 	bl	8ac1c <__ssprint_r>
   8560e:	b980      	cbnz	r0, 85632 <_svfprintf_r+0x2d2>
   85610:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85614:	e7f2      	b.n	855fc <_svfprintf_r+0x29c>
   85616:	990c      	ldr	r1, [sp, #48]	; 0x30
   85618:	980a      	ldr	r0, [sp, #40]	; 0x28
   8561a:	aa28      	add	r2, sp, #160	; 0xa0
   8561c:	f005 fafe 	bl	8ac1c <__ssprint_r>
   85620:	2800      	cmp	r0, #0
   85622:	f000 808a 	beq.w	8573a <_svfprintf_r+0x3da>
   85626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85628:	b11b      	cbz	r3, 85632 <_svfprintf_r+0x2d2>
   8562a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8562c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8562e:	f003 fdeb 	bl	89208 <_free_r>
   85632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85634:	899b      	ldrh	r3, [r3, #12]
   85636:	f013 0f40 	tst.w	r3, #64	; 0x40
   8563a:	9b08      	ldr	r3, [sp, #32]
   8563c:	bf18      	it	ne
   8563e:	f04f 33ff 	movne.w	r3, #4294967295
   85642:	9308      	str	r3, [sp, #32]
   85644:	9808      	ldr	r0, [sp, #32]
   85646:	b055      	add	sp, #340	; 0x154
   85648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8564c:	2e00      	cmp	r6, #0
   8564e:	f000 8083 	beq.w	85758 <_svfprintf_r+0x3f8>
   85652:	2301      	movs	r3, #1
   85654:	2200      	movs	r2, #0
   85656:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   8565a:	9306      	str	r3, [sp, #24]
   8565c:	ad3b      	add	r5, sp, #236	; 0xec
   8565e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   85662:	930b      	str	r3, [sp, #44]	; 0x2c
   85664:	920d      	str	r2, [sp, #52]	; 0x34
   85666:	9207      	str	r2, [sp, #28]
   85668:	920f      	str	r2, [sp, #60]	; 0x3c
   8566a:	9213      	str	r2, [sp, #76]	; 0x4c
   8566c:	9210      	str	r2, [sp, #64]	; 0x40
   8566e:	f017 0302 	ands.w	r3, r7, #2
   85672:	d002      	beq.n	8567a <_svfprintf_r+0x31a>
   85674:	9906      	ldr	r1, [sp, #24]
   85676:	3102      	adds	r1, #2
   85678:	9106      	str	r1, [sp, #24]
   8567a:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   8567e:	d107      	bne.n	85690 <_svfprintf_r+0x330>
   85680:	9909      	ldr	r1, [sp, #36]	; 0x24
   85682:	9806      	ldr	r0, [sp, #24]
   85684:	eba1 0900 	sub.w	r9, r1, r0
   85688:	f1b9 0f00 	cmp.w	r9, #0
   8568c:	f300 8336 	bgt.w	85cfc <_svfprintf_r+0x99c>
   85690:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85692:	b182      	cbz	r2, 856b6 <_svfprintf_r+0x356>
   85694:	2201      	movs	r2, #1
   85696:	f8c8 2004 	str.w	r2, [r8, #4]
   8569a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8569c:	3401      	adds	r4, #1
   8569e:	3201      	adds	r2, #1
   856a0:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   856a4:	2a07      	cmp	r2, #7
   856a6:	942a      	str	r4, [sp, #168]	; 0xa8
   856a8:	9229      	str	r2, [sp, #164]	; 0xa4
   856aa:	f8c8 1000 	str.w	r1, [r8]
   856ae:	f300 8369 	bgt.w	85d84 <_svfprintf_r+0xa24>
   856b2:	f108 0808 	add.w	r8, r8, #8
   856b6:	b17b      	cbz	r3, 856d8 <_svfprintf_r+0x378>
   856b8:	2302      	movs	r3, #2
   856ba:	f8c8 3004 	str.w	r3, [r8, #4]
   856be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   856c0:	3402      	adds	r4, #2
   856c2:	3301      	adds	r3, #1
   856c4:	aa21      	add	r2, sp, #132	; 0x84
   856c6:	2b07      	cmp	r3, #7
   856c8:	942a      	str	r4, [sp, #168]	; 0xa8
   856ca:	9329      	str	r3, [sp, #164]	; 0xa4
   856cc:	f8c8 2000 	str.w	r2, [r8]
   856d0:	f300 836c 	bgt.w	85dac <_svfprintf_r+0xa4c>
   856d4:	f108 0808 	add.w	r8, r8, #8
   856d8:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   856dc:	f000 822e 	beq.w	85b3c <_svfprintf_r+0x7dc>
   856e0:	9b07      	ldr	r3, [sp, #28]
   856e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   856e4:	eba3 0b02 	sub.w	fp, r3, r2
   856e8:	f1bb 0f00 	cmp.w	fp, #0
   856ec:	f300 8271 	bgt.w	85bd2 <_svfprintf_r+0x872>
   856f0:	05fb      	lsls	r3, r7, #23
   856f2:	f100 81c5 	bmi.w	85a80 <_svfprintf_r+0x720>
   856f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   856f8:	f8c8 5000 	str.w	r5, [r8]
   856fc:	441c      	add	r4, r3
   856fe:	f8c8 3004 	str.w	r3, [r8, #4]
   85702:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85704:	942a      	str	r4, [sp, #168]	; 0xa8
   85706:	3301      	adds	r3, #1
   85708:	2b07      	cmp	r3, #7
   8570a:	9329      	str	r3, [sp, #164]	; 0xa4
   8570c:	f300 82ea 	bgt.w	85ce4 <_svfprintf_r+0x984>
   85710:	f108 0808 	add.w	r8, r8, #8
   85714:	077b      	lsls	r3, r7, #29
   85716:	d505      	bpl.n	85724 <_svfprintf_r+0x3c4>
   85718:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8571a:	9a06      	ldr	r2, [sp, #24]
   8571c:	1a9d      	subs	r5, r3, r2
   8571e:	2d00      	cmp	r5, #0
   85720:	f300 8350 	bgt.w	85dc4 <_svfprintf_r+0xa64>
   85724:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   85728:	9906      	ldr	r1, [sp, #24]
   8572a:	428a      	cmp	r2, r1
   8572c:	bfac      	ite	ge
   8572e:	189b      	addge	r3, r3, r2
   85730:	185b      	addlt	r3, r3, r1
   85732:	9308      	str	r3, [sp, #32]
   85734:	2c00      	cmp	r4, #0
   85736:	f47f af6e 	bne.w	85616 <_svfprintf_r+0x2b6>
   8573a:	2300      	movs	r3, #0
   8573c:	9329      	str	r3, [sp, #164]	; 0xa4
   8573e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85740:	b11b      	cbz	r3, 8574a <_svfprintf_r+0x3ea>
   85742:	990d      	ldr	r1, [sp, #52]	; 0x34
   85744:	980a      	ldr	r0, [sp, #40]	; 0x28
   85746:	f003 fd5f 	bl	89208 <_free_r>
   8574a:	4655      	mov	r5, sl
   8574c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85750:	782b      	ldrb	r3, [r5, #0]
   85752:	2b00      	cmp	r3, #0
   85754:	f47f ae32 	bne.w	853bc <_svfprintf_r+0x5c>
   85758:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   8575a:	2b00      	cmp	r3, #0
   8575c:	f43f af69 	beq.w	85632 <_svfprintf_r+0x2d2>
   85760:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85762:	980a      	ldr	r0, [sp, #40]	; 0x28
   85764:	4621      	mov	r1, r4
   85766:	aa28      	add	r2, sp, #160	; 0xa0
   85768:	f005 fa58 	bl	8ac1c <__ssprint_r>
   8576c:	89a3      	ldrh	r3, [r4, #12]
   8576e:	e762      	b.n	85636 <_svfprintf_r+0x2d6>
   85770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85772:	3307      	adds	r3, #7
   85774:	f023 0207 	bic.w	r2, r3, #7
   85778:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   8577c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   85780:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   85784:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   85788:	4699      	mov	r9, r3
   8578a:	4618      	mov	r0, r3
   8578c:	920e      	str	r2, [sp, #56]	; 0x38
   8578e:	4621      	mov	r1, r4
   85790:	f04f 32ff 	mov.w	r2, #4294967295
   85794:	4bb6      	ldr	r3, [pc, #728]	; (85a70 <_svfprintf_r+0x710>)
   85796:	f006 f981 	bl	8ba9c <__aeabi_dcmpun>
   8579a:	2800      	cmp	r0, #0
   8579c:	f040 8496 	bne.w	860cc <_svfprintf_r+0xd6c>
   857a0:	4648      	mov	r0, r9
   857a2:	4621      	mov	r1, r4
   857a4:	f04f 32ff 	mov.w	r2, #4294967295
   857a8:	4bb1      	ldr	r3, [pc, #708]	; (85a70 <_svfprintf_r+0x710>)
   857aa:	f006 f959 	bl	8ba60 <__aeabi_dcmple>
   857ae:	2800      	cmp	r0, #0
   857b0:	f040 848c 	bne.w	860cc <_svfprintf_r+0xd6c>
   857b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   857b8:	2200      	movs	r2, #0
   857ba:	2300      	movs	r3, #0
   857bc:	f006 f946 	bl	8ba4c <__aeabi_dcmplt>
   857c0:	2800      	cmp	r0, #0
   857c2:	f040 87a6 	bne.w	86712 <_svfprintf_r+0x13b2>
   857c6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   857ca:	2100      	movs	r1, #0
   857cc:	2003      	movs	r0, #3
   857ce:	4da9      	ldr	r5, [pc, #676]	; (85a74 <_svfprintf_r+0x714>)
   857d0:	4ba9      	ldr	r3, [pc, #676]	; (85a78 <_svfprintf_r+0x718>)
   857d2:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   857d6:	910d      	str	r1, [sp, #52]	; 0x34
   857d8:	9006      	str	r0, [sp, #24]
   857da:	2e47      	cmp	r6, #71	; 0x47
   857dc:	bfc8      	it	gt
   857de:	461d      	movgt	r5, r3
   857e0:	9107      	str	r1, [sp, #28]
   857e2:	900b      	str	r0, [sp, #44]	; 0x2c
   857e4:	910f      	str	r1, [sp, #60]	; 0x3c
   857e6:	9113      	str	r1, [sp, #76]	; 0x4c
   857e8:	9110      	str	r1, [sp, #64]	; 0x40
   857ea:	e6c1      	b.n	85570 <_svfprintf_r+0x210>
   857ec:	f017 0310 	ands.w	r3, r7, #16
   857f0:	f040 8462 	bne.w	860b8 <_svfprintf_r+0xd58>
   857f4:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   857f8:	f000 877b 	beq.w	866f2 <_svfprintf_r+0x1392>
   857fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   857fe:	4699      	mov	r9, r3
   85800:	f852 4b04 	ldr.w	r4, [r2], #4
   85804:	920e      	str	r2, [sp, #56]	; 0x38
   85806:	b2a4      	uxth	r4, r4
   85808:	e6c7      	b.n	8559a <_svfprintf_r+0x23a>
   8580a:	f853 4b04 	ldr.w	r4, [r3], #4
   8580e:	930e      	str	r3, [sp, #56]	; 0x38
   85810:	06fb      	lsls	r3, r7, #27
   85812:	f100 8441 	bmi.w	86098 <_svfprintf_r+0xd38>
   85816:	067d      	lsls	r5, r7, #25
   85818:	f140 843b 	bpl.w	86092 <_svfprintf_r+0xd32>
   8581c:	f344 39c0 	sbfx	r9, r4, #15, #1
   85820:	464b      	mov	r3, r9
   85822:	b224      	sxth	r4, r4
   85824:	e67d      	b.n	85522 <_svfprintf_r+0x1c2>
   85826:	2001      	movs	r0, #1
   85828:	2200      	movs	r2, #0
   8582a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8582c:	9006      	str	r0, [sp, #24]
   8582e:	f853 1b04 	ldr.w	r1, [r3], #4
   85832:	ad3b      	add	r5, sp, #236	; 0xec
   85834:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   85838:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   8583c:	930e      	str	r3, [sp, #56]	; 0x38
   8583e:	900b      	str	r0, [sp, #44]	; 0x2c
   85840:	e710      	b.n	85664 <_svfprintf_r+0x304>
   85842:	f04f 0900 	mov.w	r9, #0
   85846:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   85848:	9b07      	ldr	r3, [sp, #28]
   8584a:	f854 5b04 	ldr.w	r5, [r4], #4
   8584e:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   85852:	2d00      	cmp	r5, #0
   85854:	f000 86ee 	beq.w	86634 <_svfprintf_r+0x12d4>
   85858:	1c5a      	adds	r2, r3, #1
   8585a:	f000 8560 	beq.w	8631e <_svfprintf_r+0xfbe>
   8585e:	461a      	mov	r2, r3
   85860:	4649      	mov	r1, r9
   85862:	4628      	mov	r0, r5
   85864:	f004 fae8 	bl	89e38 <memchr>
   85868:	900d      	str	r0, [sp, #52]	; 0x34
   8586a:	2800      	cmp	r0, #0
   8586c:	f001 809e 	beq.w	869ac <_svfprintf_r+0x164c>
   85870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85872:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   85876:	1b5b      	subs	r3, r3, r5
   85878:	930b      	str	r3, [sp, #44]	; 0x2c
   8587a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8587e:	f8cd 901c 	str.w	r9, [sp, #28]
   85882:	940e      	str	r4, [sp, #56]	; 0x38
   85884:	9306      	str	r3, [sp, #24]
   85886:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   8588a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8588e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   85892:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   85896:	e66b      	b.n	85570 <_svfprintf_r+0x210>
   85898:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8589a:	425b      	negs	r3, r3
   8589c:	9309      	str	r3, [sp, #36]	; 0x24
   8589e:	f89a 6000 	ldrb.w	r6, [sl]
   858a2:	f047 0704 	orr.w	r7, r7, #4
   858a6:	e5aa      	b.n	853fe <_svfprintf_r+0x9e>
   858a8:	f047 0b10 	orr.w	fp, r7, #16
   858ac:	f01b 0920 	ands.w	r9, fp, #32
   858b0:	f000 83aa 	beq.w	86008 <_svfprintf_r+0xca8>
   858b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   858b6:	3307      	adds	r3, #7
   858b8:	f023 0307 	bic.w	r3, r3, #7
   858bc:	461a      	mov	r2, r3
   858be:	f852 4b08 	ldr.w	r4, [r2], #8
   858c2:	f8d3 9004 	ldr.w	r9, [r3, #4]
   858c6:	920e      	str	r2, [sp, #56]	; 0x38
   858c8:	2301      	movs	r3, #1
   858ca:	e669      	b.n	855a0 <_svfprintf_r+0x240>
   858cc:	2230      	movs	r2, #48	; 0x30
   858ce:	2678      	movs	r6, #120	; 0x78
   858d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   858d2:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   858d6:	f853 4b04 	ldr.w	r4, [r3], #4
   858da:	4a68      	ldr	r2, [pc, #416]	; (85a7c <_svfprintf_r+0x71c>)
   858dc:	930e      	str	r3, [sp, #56]	; 0x38
   858de:	f04f 0900 	mov.w	r9, #0
   858e2:	2302      	movs	r3, #2
   858e4:	f047 0b02 	orr.w	fp, r7, #2
   858e8:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   858ec:	9218      	str	r2, [sp, #96]	; 0x60
   858ee:	e657      	b.n	855a0 <_svfprintf_r+0x240>
   858f0:	06bd      	lsls	r5, r7, #26
   858f2:	f100 83d6 	bmi.w	860a2 <_svfprintf_r+0xd42>
   858f6:	06fc      	lsls	r4, r7, #27
   858f8:	f100 8693 	bmi.w	86622 <_svfprintf_r+0x12c2>
   858fc:	0678      	lsls	r0, r7, #25
   858fe:	f100 875d 	bmi.w	867bc <_svfprintf_r+0x145c>
   85902:	05b9      	lsls	r1, r7, #22
   85904:	f140 868d 	bpl.w	86622 <_svfprintf_r+0x12c2>
   85908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8590a:	9908      	ldr	r1, [sp, #32]
   8590c:	f853 2b04 	ldr.w	r2, [r3], #4
   85910:	4655      	mov	r5, sl
   85912:	7011      	strb	r1, [r2, #0]
   85914:	930e      	str	r3, [sp, #56]	; 0x38
   85916:	e71b      	b.n	85750 <_svfprintf_r+0x3f0>
   85918:	f89a 6000 	ldrb.w	r6, [sl]
   8591c:	2e6c      	cmp	r6, #108	; 0x6c
   8591e:	bf03      	ittte	eq
   85920:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   85924:	f047 0720 	orreq.w	r7, r7, #32
   85928:	f10a 0a01 	addeq.w	sl, sl, #1
   8592c:	f047 0710 	orrne.w	r7, r7, #16
   85930:	e565      	b.n	853fe <_svfprintf_r+0x9e>
   85932:	f89a 6000 	ldrb.w	r6, [sl]
   85936:	2e68      	cmp	r6, #104	; 0x68
   85938:	bf03      	ittte	eq
   8593a:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   8593e:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   85942:	f10a 0a01 	addeq.w	sl, sl, #1
   85946:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   8594a:	e558      	b.n	853fe <_svfprintf_r+0x9e>
   8594c:	f89a 6000 	ldrb.w	r6, [sl]
   85950:	f047 0708 	orr.w	r7, r7, #8
   85954:	e553      	b.n	853fe <_svfprintf_r+0x9e>
   85956:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   85958:	4630      	mov	r0, r6
   8595a:	f003 fef7 	bl	8974c <_localeconv_r>
   8595e:	6843      	ldr	r3, [r0, #4]
   85960:	4618      	mov	r0, r3
   85962:	931b      	str	r3, [sp, #108]	; 0x6c
   85964:	f7ff fc9a 	bl	8529c <strlen>
   85968:	4603      	mov	r3, r0
   8596a:	4630      	mov	r0, r6
   8596c:	931c      	str	r3, [sp, #112]	; 0x70
   8596e:	461e      	mov	r6, r3
   85970:	f003 feec 	bl	8974c <_localeconv_r>
   85974:	6883      	ldr	r3, [r0, #8]
   85976:	9319      	str	r3, [sp, #100]	; 0x64
   85978:	2e00      	cmp	r6, #0
   8597a:	f43f adbb 	beq.w	854f4 <_svfprintf_r+0x194>
   8597e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85980:	2b00      	cmp	r3, #0
   85982:	f43f adb7 	beq.w	854f4 <_svfprintf_r+0x194>
   85986:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85988:	781b      	ldrb	r3, [r3, #0]
   8598a:	2b00      	cmp	r3, #0
   8598c:	f43f adb2 	beq.w	854f4 <_svfprintf_r+0x194>
   85990:	f89a 6000 	ldrb.w	r6, [sl]
   85994:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   85998:	e531      	b.n	853fe <_svfprintf_r+0x9e>
   8599a:	f89a 6000 	ldrb.w	r6, [sl]
   8599e:	f047 0701 	orr.w	r7, r7, #1
   859a2:	e52c      	b.n	853fe <_svfprintf_r+0x9e>
   859a4:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   859a8:	2b00      	cmp	r3, #0
   859aa:	f47f ada3 	bne.w	854f4 <_svfprintf_r+0x194>
   859ae:	f89a 6000 	ldrb.w	r6, [sl]
   859b2:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   859b6:	e522      	b.n	853fe <_svfprintf_r+0x9e>
   859b8:	f89a 6000 	ldrb.w	r6, [sl]
   859bc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   859c0:	e51d      	b.n	853fe <_svfprintf_r+0x9e>
   859c2:	4652      	mov	r2, sl
   859c4:	f812 6b01 	ldrb.w	r6, [r2], #1
   859c8:	2e2a      	cmp	r6, #42	; 0x2a
   859ca:	f001 81eb 	beq.w	86da4 <_svfprintf_r+0x1a44>
   859ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   859d2:	2b09      	cmp	r3, #9
   859d4:	4692      	mov	sl, r2
   859d6:	bf98      	it	ls
   859d8:	2200      	movls	r2, #0
   859da:	f201 8003 	bhi.w	869e4 <_svfprintf_r+0x1684>
   859de:	f81a 6b01 	ldrb.w	r6, [sl], #1
   859e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   859e6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   859ea:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   859ee:	2b09      	cmp	r3, #9
   859f0:	d9f5      	bls.n	859de <_svfprintf_r+0x67e>
   859f2:	9207      	str	r2, [sp, #28]
   859f4:	e505      	b.n	85402 <_svfprintf_r+0xa2>
   859f6:	f89a 6000 	ldrb.w	r6, [sl]
   859fa:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   859fe:	e4fe      	b.n	853fe <_svfprintf_r+0x9e>
   85a00:	46bb      	mov	fp, r7
   85a02:	2b01      	cmp	r3, #1
   85a04:	f43f ad9a 	beq.w	8553c <_svfprintf_r+0x1dc>
   85a08:	2b02      	cmp	r3, #2
   85a0a:	ad54      	add	r5, sp, #336	; 0x150
   85a0c:	d112      	bne.n	85a34 <_svfprintf_r+0x6d4>
   85a0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   85a10:	f004 030f 	and.w	r3, r4, #15
   85a14:	5cd3      	ldrb	r3, [r2, r3]
   85a16:	0924      	lsrs	r4, r4, #4
   85a18:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   85a1c:	ea4f 1919 	mov.w	r9, r9, lsr #4
   85a20:	f805 3d01 	strb.w	r3, [r5, #-1]!
   85a24:	ea54 0309 	orrs.w	r3, r4, r9
   85a28:	d1f2      	bne.n	85a10 <_svfprintf_r+0x6b0>
   85a2a:	ab54      	add	r3, sp, #336	; 0x150
   85a2c:	1b5b      	subs	r3, r3, r5
   85a2e:	465f      	mov	r7, fp
   85a30:	930b      	str	r3, [sp, #44]	; 0x2c
   85a32:	e590      	b.n	85556 <_svfprintf_r+0x1f6>
   85a34:	f004 0307 	and.w	r3, r4, #7
   85a38:	08e4      	lsrs	r4, r4, #3
   85a3a:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   85a3e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   85a42:	3330      	adds	r3, #48	; 0x30
   85a44:	ea54 0109 	orrs.w	r1, r4, r9
   85a48:	462a      	mov	r2, r5
   85a4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
   85a4e:	d1f1      	bne.n	85a34 <_svfprintf_r+0x6d4>
   85a50:	f01b 0f01 	tst.w	fp, #1
   85a54:	d0e9      	beq.n	85a2a <_svfprintf_r+0x6ca>
   85a56:	2b30      	cmp	r3, #48	; 0x30
   85a58:	d0e7      	beq.n	85a2a <_svfprintf_r+0x6ca>
   85a5a:	2330      	movs	r3, #48	; 0x30
   85a5c:	3a02      	subs	r2, #2
   85a5e:	f805 3c01 	strb.w	r3, [r5, #-1]
   85a62:	ab54      	add	r3, sp, #336	; 0x150
   85a64:	1a9b      	subs	r3, r3, r2
   85a66:	465f      	mov	r7, fp
   85a68:	4615      	mov	r5, r2
   85a6a:	930b      	str	r3, [sp, #44]	; 0x2c
   85a6c:	e573      	b.n	85556 <_svfprintf_r+0x1f6>
   85a6e:	bf00      	nop
   85a70:	7fefffff 	.word	0x7fefffff
   85a74:	0008bedc 	.word	0x0008bedc
   85a78:	0008bee0 	.word	0x0008bee0
   85a7c:	0008beec 	.word	0x0008beec
   85a80:	2e65      	cmp	r6, #101	; 0x65
   85a82:	f340 80e9 	ble.w	85c58 <_svfprintf_r+0x8f8>
   85a86:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85a8a:	2200      	movs	r2, #0
   85a8c:	2300      	movs	r3, #0
   85a8e:	f005 ffd3 	bl	8ba38 <__aeabi_dcmpeq>
   85a92:	2800      	cmp	r0, #0
   85a94:	f000 81d2 	beq.w	85e3c <_svfprintf_r+0xadc>
   85a98:	2301      	movs	r3, #1
   85a9a:	f8c8 3004 	str.w	r3, [r8, #4]
   85a9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85aa0:	4abf      	ldr	r2, [pc, #764]	; (85da0 <_svfprintf_r+0xa40>)
   85aa2:	3301      	adds	r3, #1
   85aa4:	3401      	adds	r4, #1
   85aa6:	2b07      	cmp	r3, #7
   85aa8:	942a      	str	r4, [sp, #168]	; 0xa8
   85aaa:	9329      	str	r3, [sp, #164]	; 0xa4
   85aac:	f8c8 2000 	str.w	r2, [r8]
   85ab0:	f300 857a 	bgt.w	865a8 <_svfprintf_r+0x1248>
   85ab4:	f108 0808 	add.w	r8, r8, #8
   85ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   85aba:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85abc:	4293      	cmp	r3, r2
   85abe:	f280 82d7 	bge.w	86070 <_svfprintf_r+0xd10>
   85ac2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   85ac4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85ac6:	441c      	add	r4, r3
   85ac8:	e9c8 2300 	strd	r2, r3, [r8]
   85acc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85ace:	942a      	str	r4, [sp, #168]	; 0xa8
   85ad0:	3301      	adds	r3, #1
   85ad2:	2b07      	cmp	r3, #7
   85ad4:	9329      	str	r3, [sp, #164]	; 0xa4
   85ad6:	f300 83dd 	bgt.w	86294 <_svfprintf_r+0xf34>
   85ada:	f108 0808 	add.w	r8, r8, #8
   85ade:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85ae0:	1e5d      	subs	r5, r3, #1
   85ae2:	2d00      	cmp	r5, #0
   85ae4:	f77f ae16 	ble.w	85714 <_svfprintf_r+0x3b4>
   85ae8:	2d10      	cmp	r5, #16
   85aea:	f341 8141 	ble.w	86d70 <_svfprintf_r+0x1a10>
   85aee:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 85da4 <_svfprintf_r+0xa44>
   85af2:	4622      	mov	r2, r4
   85af4:	4649      	mov	r1, r9
   85af6:	2610      	movs	r6, #16
   85af8:	46b9      	mov	r9, r7
   85afa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85afc:	460f      	mov	r7, r1
   85afe:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   85b02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85b04:	e005      	b.n	85b12 <_svfprintf_r+0x7b2>
   85b06:	f108 0808 	add.w	r8, r8, #8
   85b0a:	3d10      	subs	r5, #16
   85b0c:	2d10      	cmp	r5, #16
   85b0e:	f340 8558 	ble.w	865c2 <_svfprintf_r+0x1262>
   85b12:	3301      	adds	r3, #1
   85b14:	3210      	adds	r2, #16
   85b16:	2b07      	cmp	r3, #7
   85b18:	e9c8 7600 	strd	r7, r6, [r8]
   85b1c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   85b20:	ddf1      	ble.n	85b06 <_svfprintf_r+0x7a6>
   85b22:	4621      	mov	r1, r4
   85b24:	4658      	mov	r0, fp
   85b26:	aa28      	add	r2, sp, #160	; 0xa0
   85b28:	f005 f878 	bl	8ac1c <__ssprint_r>
   85b2c:	2800      	cmp	r0, #0
   85b2e:	f47f ad7a 	bne.w	85626 <_svfprintf_r+0x2c6>
   85b32:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   85b36:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85b3a:	e7e6      	b.n	85b0a <_svfprintf_r+0x7aa>
   85b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85b3e:	9a06      	ldr	r2, [sp, #24]
   85b40:	eba3 0b02 	sub.w	fp, r3, r2
   85b44:	f1bb 0f00 	cmp.w	fp, #0
   85b48:	f77f adca 	ble.w	856e0 <_svfprintf_r+0x380>
   85b4c:	f1bb 0f10 	cmp.w	fp, #16
   85b50:	f341 8005 	ble.w	86b5e <_svfprintf_r+0x17fe>
   85b54:	f8df 924c 	ldr.w	r9, [pc, #588]	; 85da4 <_svfprintf_r+0xa44>
   85b58:	4641      	mov	r1, r8
   85b5a:	4620      	mov	r0, r4
   85b5c:	46a8      	mov	r8, r5
   85b5e:	464c      	mov	r4, r9
   85b60:	2310      	movs	r3, #16
   85b62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   85b64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85b66:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85b6a:	e006      	b.n	85b7a <_svfprintf_r+0x81a>
   85b6c:	f1ab 0b10 	sub.w	fp, fp, #16
   85b70:	f1bb 0f10 	cmp.w	fp, #16
   85b74:	f101 0108 	add.w	r1, r1, #8
   85b78:	dd19      	ble.n	85bae <_svfprintf_r+0x84e>
   85b7a:	3201      	adds	r2, #1
   85b7c:	3010      	adds	r0, #16
   85b7e:	2a07      	cmp	r2, #7
   85b80:	e9c1 4300 	strd	r4, r3, [r1]
   85b84:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   85b88:	ddf0      	ble.n	85b6c <_svfprintf_r+0x80c>
   85b8a:	4629      	mov	r1, r5
   85b8c:	4648      	mov	r0, r9
   85b8e:	aa28      	add	r2, sp, #160	; 0xa0
   85b90:	f005 f844 	bl	8ac1c <__ssprint_r>
   85b94:	2800      	cmp	r0, #0
   85b96:	f47f ad46 	bne.w	85626 <_svfprintf_r+0x2c6>
   85b9a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   85b9e:	f1ab 0b10 	sub.w	fp, fp, #16
   85ba2:	f1bb 0f10 	cmp.w	fp, #16
   85ba6:	f04f 0310 	mov.w	r3, #16
   85baa:	a92b      	add	r1, sp, #172	; 0xac
   85bac:	dce5      	bgt.n	85b7a <_svfprintf_r+0x81a>
   85bae:	4645      	mov	r5, r8
   85bb0:	46a1      	mov	r9, r4
   85bb2:	4688      	mov	r8, r1
   85bb4:	4604      	mov	r4, r0
   85bb6:	3201      	adds	r2, #1
   85bb8:	445c      	add	r4, fp
   85bba:	2a07      	cmp	r2, #7
   85bbc:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   85bc0:	f8c8 9000 	str.w	r9, [r8]
   85bc4:	f8c8 b004 	str.w	fp, [r8, #4]
   85bc8:	f300 8518 	bgt.w	865fc <_svfprintf_r+0x129c>
   85bcc:	f108 0808 	add.w	r8, r8, #8
   85bd0:	e586      	b.n	856e0 <_svfprintf_r+0x380>
   85bd2:	f1bb 0f10 	cmp.w	fp, #16
   85bd6:	f340 8597 	ble.w	86708 <_svfprintf_r+0x13a8>
   85bda:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 85da4 <_svfprintf_r+0xa44>
   85bde:	4641      	mov	r1, r8
   85be0:	4620      	mov	r0, r4
   85be2:	46a8      	mov	r8, r5
   85be4:	464c      	mov	r4, r9
   85be6:	2310      	movs	r3, #16
   85be8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   85bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85bec:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85bf0:	e006      	b.n	85c00 <_svfprintf_r+0x8a0>
   85bf2:	f1ab 0b10 	sub.w	fp, fp, #16
   85bf6:	f1bb 0f10 	cmp.w	fp, #16
   85bfa:	f101 0108 	add.w	r1, r1, #8
   85bfe:	dd19      	ble.n	85c34 <_svfprintf_r+0x8d4>
   85c00:	3201      	adds	r2, #1
   85c02:	3010      	adds	r0, #16
   85c04:	2a07      	cmp	r2, #7
   85c06:	e9c1 4300 	strd	r4, r3, [r1]
   85c0a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   85c0e:	ddf0      	ble.n	85bf2 <_svfprintf_r+0x892>
   85c10:	4629      	mov	r1, r5
   85c12:	4648      	mov	r0, r9
   85c14:	aa28      	add	r2, sp, #160	; 0xa0
   85c16:	f005 f801 	bl	8ac1c <__ssprint_r>
   85c1a:	2800      	cmp	r0, #0
   85c1c:	f47f ad03 	bne.w	85626 <_svfprintf_r+0x2c6>
   85c20:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   85c24:	f1ab 0b10 	sub.w	fp, fp, #16
   85c28:	f1bb 0f10 	cmp.w	fp, #16
   85c2c:	f04f 0310 	mov.w	r3, #16
   85c30:	a92b      	add	r1, sp, #172	; 0xac
   85c32:	dce5      	bgt.n	85c00 <_svfprintf_r+0x8a0>
   85c34:	4645      	mov	r5, r8
   85c36:	46a1      	mov	r9, r4
   85c38:	4688      	mov	r8, r1
   85c3a:	4604      	mov	r4, r0
   85c3c:	3201      	adds	r2, #1
   85c3e:	445c      	add	r4, fp
   85c40:	2a07      	cmp	r2, #7
   85c42:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   85c46:	f8c8 9000 	str.w	r9, [r8]
   85c4a:	f8c8 b004 	str.w	fp, [r8, #4]
   85c4e:	f300 81ce 	bgt.w	85fee <_svfprintf_r+0xc8e>
   85c52:	f108 0808 	add.w	r8, r8, #8
   85c56:	e54b      	b.n	856f0 <_svfprintf_r+0x390>
   85c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85c5a:	2b01      	cmp	r3, #1
   85c5c:	f340 817e 	ble.w	85f5c <_svfprintf_r+0xbfc>
   85c60:	2301      	movs	r3, #1
   85c62:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   85c64:	3401      	adds	r4, #1
   85c66:	441e      	add	r6, r3
   85c68:	2e07      	cmp	r6, #7
   85c6a:	f8c8 5000 	str.w	r5, [r8]
   85c6e:	942a      	str	r4, [sp, #168]	; 0xa8
   85c70:	f8c8 3004 	str.w	r3, [r8, #4]
   85c74:	9629      	str	r6, [sp, #164]	; 0xa4
   85c76:	f300 81e1 	bgt.w	8603c <_svfprintf_r+0xcdc>
   85c7a:	f108 0808 	add.w	r8, r8, #8
   85c7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   85c80:	3601      	adds	r6, #1
   85c82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85c84:	441c      	add	r4, r3
   85c86:	2e07      	cmp	r6, #7
   85c88:	e9c8 2300 	strd	r2, r3, [r8]
   85c8c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   85c90:	f300 81e1 	bgt.w	86056 <_svfprintf_r+0xcf6>
   85c94:	f108 0808 	add.w	r8, r8, #8
   85c98:	2200      	movs	r2, #0
   85c9a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85c9e:	2300      	movs	r3, #0
   85ca0:	f005 feca 	bl	8ba38 <__aeabi_dcmpeq>
   85ca4:	2800      	cmp	r0, #0
   85ca6:	f040 8176 	bne.w	85f96 <_svfprintf_r+0xc36>
   85caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85cac:	3601      	adds	r6, #1
   85cae:	3b01      	subs	r3, #1
   85cb0:	3501      	adds	r5, #1
   85cb2:	441c      	add	r4, r3
   85cb4:	2e07      	cmp	r6, #7
   85cb6:	f8c8 5000 	str.w	r5, [r8]
   85cba:	9629      	str	r6, [sp, #164]	; 0xa4
   85cbc:	f8c8 3004 	str.w	r3, [r8, #4]
   85cc0:	942a      	str	r4, [sp, #168]	; 0xa8
   85cc2:	f300 815b 	bgt.w	85f7c <_svfprintf_r+0xc1c>
   85cc6:	f108 0808 	add.w	r8, r8, #8
   85cca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85ccc:	3601      	adds	r6, #1
   85cce:	441c      	add	r4, r3
   85cd0:	f8c8 3004 	str.w	r3, [r8, #4]
   85cd4:	2e07      	cmp	r6, #7
   85cd6:	ab24      	add	r3, sp, #144	; 0x90
   85cd8:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   85cdc:	f8c8 3000 	str.w	r3, [r8]
   85ce0:	f77f ad16 	ble.w	85710 <_svfprintf_r+0x3b0>
   85ce4:	990c      	ldr	r1, [sp, #48]	; 0x30
   85ce6:	980a      	ldr	r0, [sp, #40]	; 0x28
   85ce8:	aa28      	add	r2, sp, #160	; 0xa0
   85cea:	f004 ff97 	bl	8ac1c <__ssprint_r>
   85cee:	2800      	cmp	r0, #0
   85cf0:	f47f ac99 	bne.w	85626 <_svfprintf_r+0x2c6>
   85cf4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85cf6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85cfa:	e50b      	b.n	85714 <_svfprintf_r+0x3b4>
   85cfc:	f1b9 0f10 	cmp.w	r9, #16
   85d00:	f340 8650 	ble.w	869a4 <_svfprintf_r+0x1644>
   85d04:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   85d08:	4640      	mov	r0, r8
   85d0a:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   85d0e:	46b8      	mov	r8, r7
   85d10:	2410      	movs	r4, #16
   85d12:	464f      	mov	r7, r9
   85d14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   85d16:	46a9      	mov	r9, r5
   85d18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85d1a:	e004      	b.n	85d26 <_svfprintf_r+0x9c6>
   85d1c:	3f10      	subs	r7, #16
   85d1e:	2f10      	cmp	r7, #16
   85d20:	f100 0008 	add.w	r0, r0, #8
   85d24:	dd16      	ble.n	85d54 <_svfprintf_r+0x9f4>
   85d26:	3201      	adds	r2, #1
   85d28:	4b1f      	ldr	r3, [pc, #124]	; (85da8 <_svfprintf_r+0xa48>)
   85d2a:	3110      	adds	r1, #16
   85d2c:	2a07      	cmp	r2, #7
   85d2e:	e9c0 3400 	strd	r3, r4, [r0]
   85d32:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   85d36:	ddf1      	ble.n	85d1c <_svfprintf_r+0x9bc>
   85d38:	4631      	mov	r1, r6
   85d3a:	4628      	mov	r0, r5
   85d3c:	aa28      	add	r2, sp, #160	; 0xa0
   85d3e:	f004 ff6d 	bl	8ac1c <__ssprint_r>
   85d42:	2800      	cmp	r0, #0
   85d44:	f47f ac6f 	bne.w	85626 <_svfprintf_r+0x2c6>
   85d48:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   85d4c:	3f10      	subs	r7, #16
   85d4e:	2f10      	cmp	r7, #16
   85d50:	a82b      	add	r0, sp, #172	; 0xac
   85d52:	dce8      	bgt.n	85d26 <_svfprintf_r+0x9c6>
   85d54:	464d      	mov	r5, r9
   85d56:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   85d5a:	46b9      	mov	r9, r7
   85d5c:	4647      	mov	r7, r8
   85d5e:	4680      	mov	r8, r0
   85d60:	eb09 0401 	add.w	r4, r9, r1
   85d64:	3201      	adds	r2, #1
   85d66:	4910      	ldr	r1, [pc, #64]	; (85da8 <_svfprintf_r+0xa48>)
   85d68:	2a07      	cmp	r2, #7
   85d6a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   85d6e:	f8c8 9004 	str.w	r9, [r8, #4]
   85d72:	f8c8 1000 	str.w	r1, [r8]
   85d76:	f300 83c3 	bgt.w	86500 <_svfprintf_r+0x11a0>
   85d7a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   85d7e:	f108 0808 	add.w	r8, r8, #8
   85d82:	e486      	b.n	85692 <_svfprintf_r+0x332>
   85d84:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d86:	980a      	ldr	r0, [sp, #40]	; 0x28
   85d88:	aa28      	add	r2, sp, #160	; 0xa0
   85d8a:	931d      	str	r3, [sp, #116]	; 0x74
   85d8c:	f004 ff46 	bl	8ac1c <__ssprint_r>
   85d90:	2800      	cmp	r0, #0
   85d92:	f47f ac48 	bne.w	85626 <_svfprintf_r+0x2c6>
   85d96:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85d98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   85d9a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85d9e:	e48a      	b.n	856b6 <_svfprintf_r+0x356>
   85da0:	0008bf1c 	.word	0x0008bf1c
   85da4:	0008bf30 	.word	0x0008bf30
   85da8:	0008bf20 	.word	0x0008bf20
   85dac:	990c      	ldr	r1, [sp, #48]	; 0x30
   85dae:	980a      	ldr	r0, [sp, #40]	; 0x28
   85db0:	aa28      	add	r2, sp, #160	; 0xa0
   85db2:	f004 ff33 	bl	8ac1c <__ssprint_r>
   85db6:	2800      	cmp	r0, #0
   85db8:	f47f ac35 	bne.w	85626 <_svfprintf_r+0x2c6>
   85dbc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85dbe:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85dc2:	e489      	b.n	856d8 <_svfprintf_r+0x378>
   85dc4:	2d10      	cmp	r5, #16
   85dc6:	f340 86c4 	ble.w	86b52 <_svfprintf_r+0x17f2>
   85dca:	2610      	movs	r6, #16
   85dcc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85dce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   85dd0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   85dd4:	e004      	b.n	85de0 <_svfprintf_r+0xa80>
   85dd6:	3d10      	subs	r5, #16
   85dd8:	2d10      	cmp	r5, #16
   85dda:	f108 0808 	add.w	r8, r8, #8
   85dde:	dd17      	ble.n	85e10 <_svfprintf_r+0xab0>
   85de0:	3301      	adds	r3, #1
   85de2:	4ab8      	ldr	r2, [pc, #736]	; (860c4 <_svfprintf_r+0xd64>)
   85de4:	3410      	adds	r4, #16
   85de6:	2b07      	cmp	r3, #7
   85de8:	e9c8 2600 	strd	r2, r6, [r8]
   85dec:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   85df0:	ddf1      	ble.n	85dd6 <_svfprintf_r+0xa76>
   85df2:	4649      	mov	r1, r9
   85df4:	4638      	mov	r0, r7
   85df6:	aa28      	add	r2, sp, #160	; 0xa0
   85df8:	f004 ff10 	bl	8ac1c <__ssprint_r>
   85dfc:	2800      	cmp	r0, #0
   85dfe:	f47f ac12 	bne.w	85626 <_svfprintf_r+0x2c6>
   85e02:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   85e06:	3d10      	subs	r5, #16
   85e08:	2d10      	cmp	r5, #16
   85e0a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85e0e:	dce7      	bgt.n	85de0 <_svfprintf_r+0xa80>
   85e10:	3301      	adds	r3, #1
   85e12:	4aac      	ldr	r2, [pc, #688]	; (860c4 <_svfprintf_r+0xd64>)
   85e14:	442c      	add	r4, r5
   85e16:	2b07      	cmp	r3, #7
   85e18:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   85e1c:	f8c8 5004 	str.w	r5, [r8, #4]
   85e20:	f8c8 2000 	str.w	r2, [r8]
   85e24:	f77f ac7e 	ble.w	85724 <_svfprintf_r+0x3c4>
   85e28:	990c      	ldr	r1, [sp, #48]	; 0x30
   85e2a:	980a      	ldr	r0, [sp, #40]	; 0x28
   85e2c:	aa28      	add	r2, sp, #160	; 0xa0
   85e2e:	f004 fef5 	bl	8ac1c <__ssprint_r>
   85e32:	2800      	cmp	r0, #0
   85e34:	f47f abf7 	bne.w	85626 <_svfprintf_r+0x2c6>
   85e38:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   85e3a:	e473      	b.n	85724 <_svfprintf_r+0x3c4>
   85e3c:	9922      	ldr	r1, [sp, #136]	; 0x88
   85e3e:	2900      	cmp	r1, #0
   85e40:	f340 836f 	ble.w	86522 <_svfprintf_r+0x11c2>
   85e44:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   85e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85e4a:	4599      	cmp	r9, r3
   85e4c:	bfa8      	it	ge
   85e4e:	4699      	movge	r9, r3
   85e50:	f1b9 0f00 	cmp.w	r9, #0
   85e54:	dd0b      	ble.n	85e6e <_svfprintf_r+0xb0e>
   85e56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85e58:	444c      	add	r4, r9
   85e5a:	3301      	adds	r3, #1
   85e5c:	2b07      	cmp	r3, #7
   85e5e:	e9c8 5900 	strd	r5, r9, [r8]
   85e62:	942a      	str	r4, [sp, #168]	; 0xa8
   85e64:	9329      	str	r3, [sp, #164]	; 0xa4
   85e66:	f300 851d 	bgt.w	868a4 <_svfprintf_r+0x1544>
   85e6a:	f108 0808 	add.w	r8, r8, #8
   85e6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   85e70:	f1b9 0f00 	cmp.w	r9, #0
   85e74:	bfa8      	it	ge
   85e76:	eba6 0609 	subge.w	r6, r6, r9
   85e7a:	2e00      	cmp	r6, #0
   85e7c:	f300 8225 	bgt.w	862ca <_svfprintf_r+0xf6a>
   85e80:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   85e84:	0578      	lsls	r0, r7, #21
   85e86:	44ab      	add	fp, r5
   85e88:	f100 825f 	bmi.w	8634a <_svfprintf_r+0xfea>
   85e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   85e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85e90:	4293      	cmp	r3, r2
   85e92:	db02      	blt.n	85e9a <_svfprintf_r+0xb3a>
   85e94:	07f9      	lsls	r1, r7, #31
   85e96:	f140 8476 	bpl.w	86786 <_svfprintf_r+0x1426>
   85e9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   85e9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   85e9e:	4414      	add	r4, r2
   85ea0:	e9c8 1200 	strd	r1, r2, [r8]
   85ea4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   85ea6:	942a      	str	r4, [sp, #168]	; 0xa8
   85ea8:	3201      	adds	r2, #1
   85eaa:	2a07      	cmp	r2, #7
   85eac:	9229      	str	r2, [sp, #164]	; 0xa4
   85eae:	f300 8513 	bgt.w	868d8 <_svfprintf_r+0x1578>
   85eb2:	f108 0808 	add.w	r8, r8, #8
   85eb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   85eb8:	18ae      	adds	r6, r5, r2
   85eba:	eba6 060b 	sub.w	r6, r6, fp
   85ebe:	1ad5      	subs	r5, r2, r3
   85ec0:	42ae      	cmp	r6, r5
   85ec2:	bfa8      	it	ge
   85ec4:	462e      	movge	r6, r5
   85ec6:	2e00      	cmp	r6, #0
   85ec8:	dd0d      	ble.n	85ee6 <_svfprintf_r+0xb86>
   85eca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85ecc:	4434      	add	r4, r6
   85ece:	3301      	adds	r3, #1
   85ed0:	2b07      	cmp	r3, #7
   85ed2:	f8c8 b000 	str.w	fp, [r8]
   85ed6:	f8c8 6004 	str.w	r6, [r8, #4]
   85eda:	942a      	str	r4, [sp, #168]	; 0xa8
   85edc:	9329      	str	r3, [sp, #164]	; 0xa4
   85ede:	f300 8571 	bgt.w	869c4 <_svfprintf_r+0x1664>
   85ee2:	f108 0808 	add.w	r8, r8, #8
   85ee6:	2e00      	cmp	r6, #0
   85ee8:	bfa8      	it	ge
   85eea:	1bad      	subge	r5, r5, r6
   85eec:	2d00      	cmp	r5, #0
   85eee:	f77f ac11 	ble.w	85714 <_svfprintf_r+0x3b4>
   85ef2:	2d10      	cmp	r5, #16
   85ef4:	f340 873c 	ble.w	86d70 <_svfprintf_r+0x1a10>
   85ef8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 860c8 <_svfprintf_r+0xd68>
   85efc:	4622      	mov	r2, r4
   85efe:	4649      	mov	r1, r9
   85f00:	2610      	movs	r6, #16
   85f02:	46b9      	mov	r9, r7
   85f04:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85f06:	460f      	mov	r7, r1
   85f08:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   85f0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85f0e:	e005      	b.n	85f1c <_svfprintf_r+0xbbc>
   85f10:	f108 0808 	add.w	r8, r8, #8
   85f14:	3d10      	subs	r5, #16
   85f16:	2d10      	cmp	r5, #16
   85f18:	f340 8353 	ble.w	865c2 <_svfprintf_r+0x1262>
   85f1c:	3301      	adds	r3, #1
   85f1e:	3210      	adds	r2, #16
   85f20:	2b07      	cmp	r3, #7
   85f22:	e9c8 7600 	strd	r7, r6, [r8]
   85f26:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   85f2a:	ddf1      	ble.n	85f10 <_svfprintf_r+0xbb0>
   85f2c:	4621      	mov	r1, r4
   85f2e:	4658      	mov	r0, fp
   85f30:	aa28      	add	r2, sp, #160	; 0xa0
   85f32:	f004 fe73 	bl	8ac1c <__ssprint_r>
   85f36:	2800      	cmp	r0, #0
   85f38:	f47f ab75 	bne.w	85626 <_svfprintf_r+0x2c6>
   85f3c:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   85f40:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85f44:	e7e6      	b.n	85f14 <_svfprintf_r+0xbb4>
   85f46:	9b07      	ldr	r3, [sp, #28]
   85f48:	2b00      	cmp	r3, #0
   85f4a:	f47f aafc 	bne.w	85546 <_svfprintf_r+0x1e6>
   85f4e:	465f      	mov	r7, fp
   85f50:	2300      	movs	r3, #0
   85f52:	ad54      	add	r5, sp, #336	; 0x150
   85f54:	9307      	str	r3, [sp, #28]
   85f56:	930b      	str	r3, [sp, #44]	; 0x2c
   85f58:	f7ff bafd 	b.w	85556 <_svfprintf_r+0x1f6>
   85f5c:	07fa      	lsls	r2, r7, #31
   85f5e:	f53f ae7f 	bmi.w	85c60 <_svfprintf_r+0x900>
   85f62:	2301      	movs	r3, #1
   85f64:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   85f66:	3401      	adds	r4, #1
   85f68:	441e      	add	r6, r3
   85f6a:	2e07      	cmp	r6, #7
   85f6c:	f8c8 5000 	str.w	r5, [r8]
   85f70:	942a      	str	r4, [sp, #168]	; 0xa8
   85f72:	f8c8 3004 	str.w	r3, [r8, #4]
   85f76:	9629      	str	r6, [sp, #164]	; 0xa4
   85f78:	f77f aea5 	ble.w	85cc6 <_svfprintf_r+0x966>
   85f7c:	990c      	ldr	r1, [sp, #48]	; 0x30
   85f7e:	980a      	ldr	r0, [sp, #40]	; 0x28
   85f80:	aa28      	add	r2, sp, #160	; 0xa0
   85f82:	f004 fe4b 	bl	8ac1c <__ssprint_r>
   85f86:	2800      	cmp	r0, #0
   85f88:	f47f ab4d 	bne.w	85626 <_svfprintf_r+0x2c6>
   85f8c:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   85f90:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85f94:	e699      	b.n	85cca <_svfprintf_r+0x96a>
   85f96:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85f98:	1e5d      	subs	r5, r3, #1
   85f9a:	2d00      	cmp	r5, #0
   85f9c:	f77f ae95 	ble.w	85cca <_svfprintf_r+0x96a>
   85fa0:	2d10      	cmp	r5, #16
   85fa2:	f340 86df 	ble.w	86d64 <_svfprintf_r+0x1a04>
   85fa6:	4622      	mov	r2, r4
   85fa8:	9707      	str	r7, [sp, #28]
   85faa:	f04f 0b10 	mov.w	fp, #16
   85fae:	f8df 9118 	ldr.w	r9, [pc, #280]	; 860c8 <_svfprintf_r+0xd68>
   85fb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85fb4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85fb6:	e005      	b.n	85fc4 <_svfprintf_r+0xc64>
   85fb8:	f108 0808 	add.w	r8, r8, #8
   85fbc:	3d10      	subs	r5, #16
   85fbe:	2d10      	cmp	r5, #16
   85fc0:	f340 837f 	ble.w	866c2 <_svfprintf_r+0x1362>
   85fc4:	3601      	adds	r6, #1
   85fc6:	3210      	adds	r2, #16
   85fc8:	2e07      	cmp	r6, #7
   85fca:	e9c8 9b00 	strd	r9, fp, [r8]
   85fce:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   85fd2:	ddf1      	ble.n	85fb8 <_svfprintf_r+0xc58>
   85fd4:	4639      	mov	r1, r7
   85fd6:	4620      	mov	r0, r4
   85fd8:	aa28      	add	r2, sp, #160	; 0xa0
   85fda:	f004 fe1f 	bl	8ac1c <__ssprint_r>
   85fde:	2800      	cmp	r0, #0
   85fe0:	f47f ab21 	bne.w	85626 <_svfprintf_r+0x2c6>
   85fe4:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   85fe8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   85fec:	e7e6      	b.n	85fbc <_svfprintf_r+0xc5c>
   85fee:	990c      	ldr	r1, [sp, #48]	; 0x30
   85ff0:	980a      	ldr	r0, [sp, #40]	; 0x28
   85ff2:	aa28      	add	r2, sp, #160	; 0xa0
   85ff4:	f004 fe12 	bl	8ac1c <__ssprint_r>
   85ff8:	2800      	cmp	r0, #0
   85ffa:	f47f ab14 	bne.w	85626 <_svfprintf_r+0x2c6>
   85ffe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86000:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86004:	f7ff bb74 	b.w	856f0 <_svfprintf_r+0x390>
   86008:	f01b 0310 	ands.w	r3, fp, #16
   8600c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8600e:	d13a      	bne.n	86086 <_svfprintf_r+0xd26>
   86010:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   86014:	d033      	beq.n	8607e <_svfprintf_r+0xd1e>
   86016:	f852 4b04 	ldr.w	r4, [r2], #4
   8601a:	4699      	mov	r9, r3
   8601c:	920e      	str	r2, [sp, #56]	; 0x38
   8601e:	2301      	movs	r3, #1
   86020:	b2a4      	uxth	r4, r4
   86022:	f7ff babd 	b.w	855a0 <_svfprintf_r+0x240>
   86026:	232d      	movs	r3, #45	; 0x2d
   86028:	4264      	negs	r4, r4
   8602a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   8602e:	46bb      	mov	fp, r7
   86030:	f04f 0301 	mov.w	r3, #1
   86034:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   86038:	f7ff bab5 	b.w	855a6 <_svfprintf_r+0x246>
   8603c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8603e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86040:	aa28      	add	r2, sp, #160	; 0xa0
   86042:	f004 fdeb 	bl	8ac1c <__ssprint_r>
   86046:	2800      	cmp	r0, #0
   86048:	f47f aaed 	bne.w	85626 <_svfprintf_r+0x2c6>
   8604c:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86050:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86054:	e613      	b.n	85c7e <_svfprintf_r+0x91e>
   86056:	990c      	ldr	r1, [sp, #48]	; 0x30
   86058:	980a      	ldr	r0, [sp, #40]	; 0x28
   8605a:	aa28      	add	r2, sp, #160	; 0xa0
   8605c:	f004 fdde 	bl	8ac1c <__ssprint_r>
   86060:	2800      	cmp	r0, #0
   86062:	f47f aae0 	bne.w	85626 <_svfprintf_r+0x2c6>
   86066:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   8606a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8606e:	e613      	b.n	85c98 <_svfprintf_r+0x938>
   86070:	07fd      	lsls	r5, r7, #31
   86072:	f57f ab4f 	bpl.w	85714 <_svfprintf_r+0x3b4>
   86076:	e524      	b.n	85ac2 <_svfprintf_r+0x762>
   86078:	ad54      	add	r5, sp, #336	; 0x150
   8607a:	f7ff ba6c 	b.w	85556 <_svfprintf_r+0x1f6>
   8607e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   86082:	f040 838a 	bne.w	8679a <_svfprintf_r+0x143a>
   86086:	f852 4b04 	ldr.w	r4, [r2], #4
   8608a:	2301      	movs	r3, #1
   8608c:	920e      	str	r2, [sp, #56]	; 0x38
   8608e:	f7ff ba87 	b.w	855a0 <_svfprintf_r+0x240>
   86092:	05b8      	lsls	r0, r7, #22
   86094:	f100 839b 	bmi.w	867ce <_svfprintf_r+0x146e>
   86098:	ea4f 79e4 	mov.w	r9, r4, asr #31
   8609c:	464b      	mov	r3, r9
   8609e:	f7ff ba40 	b.w	85522 <_svfprintf_r+0x1c2>
   860a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   860a4:	9808      	ldr	r0, [sp, #32]
   860a6:	f853 1b04 	ldr.w	r1, [r3], #4
   860aa:	17c2      	asrs	r2, r0, #31
   860ac:	4655      	mov	r5, sl
   860ae:	e9c1 0200 	strd	r0, r2, [r1]
   860b2:	930e      	str	r3, [sp, #56]	; 0x38
   860b4:	f7ff bb4c 	b.w	85750 <_svfprintf_r+0x3f0>
   860b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   860ba:	f853 4b04 	ldr.w	r4, [r3], #4
   860be:	930e      	str	r3, [sp, #56]	; 0x38
   860c0:	f7ff ba6b 	b.w	8559a <_svfprintf_r+0x23a>
   860c4:	0008bf20 	.word	0x0008bf20
   860c8:	0008bf30 	.word	0x0008bf30
   860cc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   860d0:	4602      	mov	r2, r0
   860d2:	460b      	mov	r3, r1
   860d4:	f005 fce2 	bl	8ba9c <__aeabi_dcmpun>
   860d8:	2800      	cmp	r0, #0
   860da:	f040 85e9 	bne.w	86cb0 <_svfprintf_r+0x1950>
   860de:	2e61      	cmp	r6, #97	; 0x61
   860e0:	f000 857d 	beq.w	86bde <_svfprintf_r+0x187e>
   860e4:	2e41      	cmp	r6, #65	; 0x41
   860e6:	f000 848b 	beq.w	86a00 <_svfprintf_r+0x16a0>
   860ea:	9b07      	ldr	r3, [sp, #28]
   860ec:	3301      	adds	r3, #1
   860ee:	f000 838f 	beq.w	86810 <_svfprintf_r+0x14b0>
   860f2:	f026 0320 	bic.w	r3, r6, #32
   860f6:	2b47      	cmp	r3, #71	; 0x47
   860f8:	9306      	str	r3, [sp, #24]
   860fa:	f000 858f 	beq.w	86c1c <_svfprintf_r+0x18bc>
   860fe:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86102:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   86106:	930f      	str	r3, [sp, #60]	; 0x3c
   86108:	4613      	mov	r3, r2
   8610a:	2b00      	cmp	r3, #0
   8610c:	f2c0 85b0 	blt.w	86c70 <_svfprintf_r+0x1910>
   86110:	930b      	str	r3, [sp, #44]	; 0x2c
   86112:	2300      	movs	r3, #0
   86114:	468b      	mov	fp, r1
   86116:	931d      	str	r3, [sp, #116]	; 0x74
   86118:	930d      	str	r3, [sp, #52]	; 0x34
   8611a:	9b06      	ldr	r3, [sp, #24]
   8611c:	2b46      	cmp	r3, #70	; 0x46
   8611e:	f000 83e9 	beq.w	868f4 <_svfprintf_r+0x1594>
   86122:	2b45      	cmp	r3, #69	; 0x45
   86124:	f000 8546 	beq.w	86bb4 <_svfprintf_r+0x1854>
   86128:	9907      	ldr	r1, [sp, #28]
   8612a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8612c:	9101      	str	r1, [sp, #4]
   8612e:	2102      	movs	r1, #2
   86130:	9100      	str	r1, [sp, #0]
   86132:	a926      	add	r1, sp, #152	; 0x98
   86134:	9104      	str	r1, [sp, #16]
   86136:	a923      	add	r1, sp, #140	; 0x8c
   86138:	9103      	str	r1, [sp, #12]
   8613a:	a922      	add	r1, sp, #136	; 0x88
   8613c:	465a      	mov	r2, fp
   8613e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86140:	9102      	str	r1, [sp, #8]
   86142:	f001 feb9 	bl	87eb8 <_dtoa_r>
   86146:	9b06      	ldr	r3, [sp, #24]
   86148:	4605      	mov	r5, r0
   8614a:	2b47      	cmp	r3, #71	; 0x47
   8614c:	f040 863a 	bne.w	86dc4 <_svfprintf_r+0x1a64>
   86150:	f017 0f01 	tst.w	r7, #1
   86154:	46b9      	mov	r9, r7
   86156:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86158:	f040 84fe 	bne.w	86b58 <_svfprintf_r+0x17f8>
   8615c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8615e:	1b5b      	subs	r3, r3, r5
   86160:	9312      	str	r3, [sp, #72]	; 0x48
   86162:	9b06      	ldr	r3, [sp, #24]
   86164:	2b47      	cmp	r3, #71	; 0x47
   86166:	f000 836e 	beq.w	86846 <_svfprintf_r+0x14e6>
   8616a:	9b06      	ldr	r3, [sp, #24]
   8616c:	2b46      	cmp	r3, #70	; 0x46
   8616e:	f000 83f0 	beq.w	86952 <_svfprintf_r+0x15f2>
   86172:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86174:	9310      	str	r3, [sp, #64]	; 0x40
   86176:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86178:	9a06      	ldr	r2, [sp, #24]
   8617a:	3b01      	subs	r3, #1
   8617c:	2a41      	cmp	r2, #65	; 0x41
   8617e:	9322      	str	r3, [sp, #136]	; 0x88
   86180:	f000 85bb 	beq.w	86cfa <_svfprintf_r+0x199a>
   86184:	2100      	movs	r1, #0
   86186:	b2f2      	uxtb	r2, r6
   86188:	2b00      	cmp	r3, #0
   8618a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   8618e:	bfb6      	itet	lt
   86190:	222d      	movlt	r2, #45	; 0x2d
   86192:	222b      	movge	r2, #43	; 0x2b
   86194:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   86196:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   8619a:	bfb8      	it	lt
   8619c:	f1c3 0301 	rsblt	r3, r3, #1
   861a0:	2b09      	cmp	r3, #9
   861a2:	f340 859b 	ble.w	86cdc <_svfprintf_r+0x197c>
   861a6:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   861aa:	4662      	mov	r2, ip
   861ac:	4fb6      	ldr	r7, [pc, #728]	; (86488 <_svfprintf_r+0x1128>)
   861ae:	461c      	mov	r4, r3
   861b0:	4610      	mov	r0, r2
   861b2:	fb87 1203 	smull	r1, r2, r7, r3
   861b6:	17d9      	asrs	r1, r3, #31
   861b8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   861bc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   861c0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   861c4:	3230      	adds	r2, #48	; 0x30
   861c6:	2c63      	cmp	r4, #99	; 0x63
   861c8:	f800 2c01 	strb.w	r2, [r0, #-1]
   861cc:	460b      	mov	r3, r1
   861ce:	f100 32ff 	add.w	r2, r0, #4294967295
   861d2:	dcec      	bgt.n	861ae <_svfprintf_r+0xe4e>
   861d4:	3330      	adds	r3, #48	; 0x30
   861d6:	1e81      	subs	r1, r0, #2
   861d8:	b2db      	uxtb	r3, r3
   861da:	458c      	cmp	ip, r1
   861dc:	f802 3c01 	strb.w	r3, [r2, #-1]
   861e0:	f240 85f9 	bls.w	86dd6 <_svfprintf_r+0x1a76>
   861e4:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   861e8:	e001      	b.n	861ee <_svfprintf_r+0xe8e>
   861ea:	f812 3b01 	ldrb.w	r3, [r2], #1
   861ee:	4594      	cmp	ip, r2
   861f0:	f801 3b01 	strb.w	r3, [r1], #1
   861f4:	d1f9      	bne.n	861ea <_svfprintf_r+0xe8a>
   861f6:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   861fa:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   861fe:	1a1b      	subs	r3, r3, r0
   86200:	4413      	add	r3, r2
   86202:	aa24      	add	r2, sp, #144	; 0x90
   86204:	1a9b      	subs	r3, r3, r2
   86206:	931a      	str	r3, [sp, #104]	; 0x68
   86208:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8620a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   8620c:	2b01      	cmp	r3, #1
   8620e:	441a      	add	r2, r3
   86210:	920b      	str	r2, [sp, #44]	; 0x2c
   86212:	f340 8581 	ble.w	86d18 <_svfprintf_r+0x19b8>
   86216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86218:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8621a:	4413      	add	r3, r2
   8621c:	930b      	str	r3, [sp, #44]	; 0x2c
   8621e:	2300      	movs	r3, #0
   86220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86222:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   86226:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   8622a:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   8622e:	930f      	str	r3, [sp, #60]	; 0x3c
   86230:	9206      	str	r2, [sp, #24]
   86232:	9313      	str	r3, [sp, #76]	; 0x4c
   86234:	9310      	str	r3, [sp, #64]	; 0x40
   86236:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86238:	2b00      	cmp	r3, #0
   8623a:	f040 832c 	bne.w	86896 <_svfprintf_r+0x1536>
   8623e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86242:	9307      	str	r3, [sp, #28]
   86244:	f7ff b994 	b.w	85570 <_svfprintf_r+0x210>
   86248:	46bb      	mov	fp, r7
   8624a:	f7ff bb2f 	b.w	858ac <_svfprintf_r+0x54c>
   8624e:	4b8f      	ldr	r3, [pc, #572]	; (8648c <_svfprintf_r+0x112c>)
   86250:	9318      	str	r3, [sp, #96]	; 0x60
   86252:	f017 0920 	ands.w	r9, r7, #32
   86256:	f000 80f5 	beq.w	86444 <_svfprintf_r+0x10e4>
   8625a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8625c:	3307      	adds	r3, #7
   8625e:	f023 0307 	bic.w	r3, r3, #7
   86262:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86266:	f853 4b08 	ldr.w	r4, [r3], #8
   8626a:	930e      	str	r3, [sp, #56]	; 0x38
   8626c:	07f8      	lsls	r0, r7, #31
   8626e:	d509      	bpl.n	86284 <_svfprintf_r+0xf24>
   86270:	ea54 0309 	orrs.w	r3, r4, r9
   86274:	d006      	beq.n	86284 <_svfprintf_r+0xf24>
   86276:	2330      	movs	r3, #48	; 0x30
   86278:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   8627c:	f047 0702 	orr.w	r7, r7, #2
   86280:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86284:	2302      	movs	r3, #2
   86286:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   8628a:	f7ff b989 	b.w	855a0 <_svfprintf_r+0x240>
   8628e:	4b80      	ldr	r3, [pc, #512]	; (86490 <_svfprintf_r+0x1130>)
   86290:	9318      	str	r3, [sp, #96]	; 0x60
   86292:	e7de      	b.n	86252 <_svfprintf_r+0xef2>
   86294:	990c      	ldr	r1, [sp, #48]	; 0x30
   86296:	980a      	ldr	r0, [sp, #40]	; 0x28
   86298:	aa28      	add	r2, sp, #160	; 0xa0
   8629a:	f004 fcbf 	bl	8ac1c <__ssprint_r>
   8629e:	2800      	cmp	r0, #0
   862a0:	f47f a9c1 	bne.w	85626 <_svfprintf_r+0x2c6>
   862a4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   862a6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   862aa:	e418      	b.n	85ade <_svfprintf_r+0x77e>
   862ac:	2140      	movs	r1, #64	; 0x40
   862ae:	980a      	ldr	r0, [sp, #40]	; 0x28
   862b0:	f003 fb00 	bl	898b4 <_malloc_r>
   862b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   862b6:	6018      	str	r0, [r3, #0]
   862b8:	6118      	str	r0, [r3, #16]
   862ba:	2800      	cmp	r0, #0
   862bc:	f000 8597 	beq.w	86dee <_svfprintf_r+0x1a8e>
   862c0:	2340      	movs	r3, #64	; 0x40
   862c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   862c4:	6153      	str	r3, [r2, #20]
   862c6:	f7ff b862 	b.w	8538e <_svfprintf_r+0x2e>
   862ca:	2e10      	cmp	r6, #16
   862cc:	f340 8576 	ble.w	86dbc <_svfprintf_r+0x1a5c>
   862d0:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 86494 <_svfprintf_r+0x1134>
   862d4:	4642      	mov	r2, r8
   862d6:	4648      	mov	r0, r9
   862d8:	4621      	mov	r1, r4
   862da:	46a8      	mov	r8, r5
   862dc:	46b9      	mov	r9, r7
   862de:	f04f 0b10 	mov.w	fp, #16
   862e2:	4607      	mov	r7, r0
   862e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   862e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   862e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   862ea:	e004      	b.n	862f6 <_svfprintf_r+0xf96>
   862ec:	3208      	adds	r2, #8
   862ee:	3e10      	subs	r6, #16
   862f0:	2e10      	cmp	r6, #16
   862f2:	f340 8213 	ble.w	8671c <_svfprintf_r+0x13bc>
   862f6:	3301      	adds	r3, #1
   862f8:	3110      	adds	r1, #16
   862fa:	2b07      	cmp	r3, #7
   862fc:	e9c2 7b00 	strd	r7, fp, [r2]
   86300:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   86304:	ddf2      	ble.n	862ec <_svfprintf_r+0xf8c>
   86306:	4629      	mov	r1, r5
   86308:	4620      	mov	r0, r4
   8630a:	aa28      	add	r2, sp, #160	; 0xa0
   8630c:	f004 fc86 	bl	8ac1c <__ssprint_r>
   86310:	2800      	cmp	r0, #0
   86312:	f47f a988 	bne.w	85626 <_svfprintf_r+0x2c6>
   86316:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   8631a:	aa2b      	add	r2, sp, #172	; 0xac
   8631c:	e7e7      	b.n	862ee <_svfprintf_r+0xf8e>
   8631e:	4628      	mov	r0, r5
   86320:	f8cd 901c 	str.w	r9, [sp, #28]
   86324:	940e      	str	r4, [sp, #56]	; 0x38
   86326:	f7fe ffb9 	bl	8529c <strlen>
   8632a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   8632e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86332:	900b      	str	r0, [sp, #44]	; 0x2c
   86334:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   86338:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8633c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86340:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86344:	9306      	str	r3, [sp, #24]
   86346:	f7ff b913 	b.w	85570 <_svfprintf_r+0x210>
   8634a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8634c:	4642      	mov	r2, r8
   8634e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   86352:	18eb      	adds	r3, r5, r3
   86354:	465e      	mov	r6, fp
   86356:	9307      	str	r3, [sp, #28]
   86358:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   8635c:	9710      	str	r7, [sp, #64]	; 0x40
   8635e:	4621      	mov	r1, r4
   86360:	9f19      	ldr	r7, [sp, #100]	; 0x64
   86362:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   86366:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   8636a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8636e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86370:	9513      	str	r5, [sp, #76]	; 0x4c
   86372:	f1b8 0f00 	cmp.w	r8, #0
   86376:	d02e      	beq.n	863d6 <_svfprintf_r+0x1076>
   86378:	bb83      	cbnz	r3, 863dc <_svfprintf_r+0x107c>
   8637a:	3f01      	subs	r7, #1
   8637c:	f108 38ff 	add.w	r8, r8, #4294967295
   86380:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   86382:	4449      	add	r1, r9
   86384:	e9c2 3900 	strd	r3, r9, [r2]
   86388:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8638a:	912a      	str	r1, [sp, #168]	; 0xa8
   8638c:	3301      	adds	r3, #1
   8638e:	2b07      	cmp	r3, #7
   86390:	9329      	str	r3, [sp, #164]	; 0xa4
   86392:	dc60      	bgt.n	86456 <_svfprintf_r+0x10f6>
   86394:	3208      	adds	r2, #8
   86396:	9b07      	ldr	r3, [sp, #28]
   86398:	7838      	ldrb	r0, [r7, #0]
   8639a:	1b9b      	subs	r3, r3, r6
   8639c:	4283      	cmp	r3, r0
   8639e:	bfa8      	it	ge
   863a0:	4603      	movge	r3, r0
   863a2:	2b00      	cmp	r3, #0
   863a4:	461c      	mov	r4, r3
   863a6:	dd0b      	ble.n	863c0 <_svfprintf_r+0x1060>
   863a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   863aa:	4419      	add	r1, r3
   863ac:	3001      	adds	r0, #1
   863ae:	2807      	cmp	r0, #7
   863b0:	e9c2 6300 	strd	r6, r3, [r2]
   863b4:	912a      	str	r1, [sp, #168]	; 0xa8
   863b6:	9029      	str	r0, [sp, #164]	; 0xa4
   863b8:	f300 8114 	bgt.w	865e4 <_svfprintf_r+0x1284>
   863bc:	7838      	ldrb	r0, [r7, #0]
   863be:	3208      	adds	r2, #8
   863c0:	2c00      	cmp	r4, #0
   863c2:	bfb4      	ite	lt
   863c4:	4605      	movlt	r5, r0
   863c6:	1b05      	subge	r5, r0, r4
   863c8:	2d00      	cmp	r5, #0
   863ca:	dc0b      	bgt.n	863e4 <_svfprintf_r+0x1084>
   863cc:	4406      	add	r6, r0
   863ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   863d0:	f1b8 0f00 	cmp.w	r8, #0
   863d4:	d1d0      	bne.n	86378 <_svfprintf_r+0x1018>
   863d6:	2b00      	cmp	r3, #0
   863d8:	f000 8226 	beq.w	86828 <_svfprintf_r+0x14c8>
   863dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   863de:	3b01      	subs	r3, #1
   863e0:	930f      	str	r3, [sp, #60]	; 0x3c
   863e2:	e7cd      	b.n	86380 <_svfprintf_r+0x1020>
   863e4:	2d10      	cmp	r5, #16
   863e6:	f340 849d 	ble.w	86d24 <_svfprintf_r+0x19c4>
   863ea:	2410      	movs	r4, #16
   863ec:	9829      	ldr	r0, [sp, #164]	; 0xa4
   863ee:	e004      	b.n	863fa <_svfprintf_r+0x109a>
   863f0:	3d10      	subs	r5, #16
   863f2:	2d10      	cmp	r5, #16
   863f4:	f102 0208 	add.w	r2, r2, #8
   863f8:	dd16      	ble.n	86428 <_svfprintf_r+0x10c8>
   863fa:	3001      	adds	r0, #1
   863fc:	4b25      	ldr	r3, [pc, #148]	; (86494 <_svfprintf_r+0x1134>)
   863fe:	3110      	adds	r1, #16
   86400:	2807      	cmp	r0, #7
   86402:	e9c2 3400 	strd	r3, r4, [r2]
   86406:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   8640a:	ddf1      	ble.n	863f0 <_svfprintf_r+0x1090>
   8640c:	4659      	mov	r1, fp
   8640e:	4650      	mov	r0, sl
   86410:	aa28      	add	r2, sp, #160	; 0xa0
   86412:	f004 fc03 	bl	8ac1c <__ssprint_r>
   86416:	2800      	cmp	r0, #0
   86418:	f47f a905 	bne.w	85626 <_svfprintf_r+0x2c6>
   8641c:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   86420:	3d10      	subs	r5, #16
   86422:	2d10      	cmp	r5, #16
   86424:	aa2b      	add	r2, sp, #172	; 0xac
   86426:	dce8      	bgt.n	863fa <_svfprintf_r+0x109a>
   86428:	3001      	adds	r0, #1
   8642a:	4b1a      	ldr	r3, [pc, #104]	; (86494 <_svfprintf_r+0x1134>)
   8642c:	4429      	add	r1, r5
   8642e:	2807      	cmp	r0, #7
   86430:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   86434:	6055      	str	r5, [r2, #4]
   86436:	6013      	str	r3, [r2, #0]
   86438:	f300 8241 	bgt.w	868be <_svfprintf_r+0x155e>
   8643c:	7838      	ldrb	r0, [r7, #0]
   8643e:	3208      	adds	r2, #8
   86440:	4406      	add	r6, r0
   86442:	e7c4      	b.n	863ce <_svfprintf_r+0x106e>
   86444:	f017 0310 	ands.w	r3, r7, #16
   86448:	f000 80a0 	beq.w	8658c <_svfprintf_r+0x122c>
   8644c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8644e:	f853 4b04 	ldr.w	r4, [r3], #4
   86452:	930e      	str	r3, [sp, #56]	; 0x38
   86454:	e70a      	b.n	8626c <_svfprintf_r+0xf0c>
   86456:	4659      	mov	r1, fp
   86458:	4650      	mov	r0, sl
   8645a:	aa28      	add	r2, sp, #160	; 0xa0
   8645c:	f004 fbde 	bl	8ac1c <__ssprint_r>
   86460:	2800      	cmp	r0, #0
   86462:	f47f a8e0 	bne.w	85626 <_svfprintf_r+0x2c6>
   86466:	992a      	ldr	r1, [sp, #168]	; 0xa8
   86468:	aa2b      	add	r2, sp, #172	; 0xac
   8646a:	e794      	b.n	86396 <_svfprintf_r+0x1036>
   8646c:	2300      	movs	r3, #0
   8646e:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   86472:	9606      	str	r6, [sp, #24]
   86474:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   86478:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   8647c:	4692      	mov	sl, r2
   8647e:	461e      	mov	r6, r3
   86480:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   86484:	af54      	add	r7, sp, #336	; 0x150
   86486:	e014      	b.n	864b2 <_svfprintf_r+0x1152>
   86488:	66666667 	.word	0x66666667
   8648c:	0008beec 	.word	0x0008beec
   86490:	0008bf00 	.word	0x0008bf00
   86494:	0008bf30 	.word	0x0008bf30
   86498:	2300      	movs	r3, #0
   8649a:	4620      	mov	r0, r4
   8649c:	4649      	mov	r1, r9
   8649e:	220a      	movs	r2, #10
   864a0:	f005 fb3a 	bl	8bb18 <__aeabi_uldivmod>
   864a4:	2c0a      	cmp	r4, #10
   864a6:	f179 0300 	sbcs.w	r3, r9, #0
   864aa:	d31b      	bcc.n	864e4 <_svfprintf_r+0x1184>
   864ac:	4604      	mov	r4, r0
   864ae:	4689      	mov	r9, r1
   864b0:	462f      	mov	r7, r5
   864b2:	4620      	mov	r0, r4
   864b4:	220a      	movs	r2, #10
   864b6:	2300      	movs	r3, #0
   864b8:	4649      	mov	r1, r9
   864ba:	f005 fb2d 	bl	8bb18 <__aeabi_uldivmod>
   864be:	3230      	adds	r2, #48	; 0x30
   864c0:	1e7d      	subs	r5, r7, #1
   864c2:	3601      	adds	r6, #1
   864c4:	f807 2c01 	strb.w	r2, [r7, #-1]
   864c8:	f1ba 0f00 	cmp.w	sl, #0
   864cc:	d0e4      	beq.n	86498 <_svfprintf_r+0x1138>
   864ce:	f898 3000 	ldrb.w	r3, [r8]
   864d2:	429e      	cmp	r6, r3
   864d4:	d1e0      	bne.n	86498 <_svfprintf_r+0x1138>
   864d6:	2eff      	cmp	r6, #255	; 0xff
   864d8:	d0de      	beq.n	86498 <_svfprintf_r+0x1138>
   864da:	2c0a      	cmp	r4, #10
   864dc:	f179 0300 	sbcs.w	r3, r9, #0
   864e0:	f080 8130 	bcs.w	86744 <_svfprintf_r+0x13e4>
   864e4:	ab54      	add	r3, sp, #336	; 0x150
   864e6:	1b5b      	subs	r3, r3, r5
   864e8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   864ec:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   864f0:	9612      	str	r6, [sp, #72]	; 0x48
   864f2:	465f      	mov	r7, fp
   864f4:	9e06      	ldr	r6, [sp, #24]
   864f6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   864fa:	930b      	str	r3, [sp, #44]	; 0x2c
   864fc:	f7ff b82b 	b.w	85556 <_svfprintf_r+0x1f6>
   86500:	990c      	ldr	r1, [sp, #48]	; 0x30
   86502:	980a      	ldr	r0, [sp, #40]	; 0x28
   86504:	aa28      	add	r2, sp, #160	; 0xa0
   86506:	931d      	str	r3, [sp, #116]	; 0x74
   86508:	f004 fb88 	bl	8ac1c <__ssprint_r>
   8650c:	2800      	cmp	r0, #0
   8650e:	f47f a88a 	bne.w	85626 <_svfprintf_r+0x2c6>
   86512:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86516:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8651a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8651e:	f7ff b8b8 	b.w	85692 <_svfprintf_r+0x332>
   86522:	2301      	movs	r3, #1
   86524:	f8c8 3004 	str.w	r3, [r8, #4]
   86528:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8652a:	4abc      	ldr	r2, [pc, #752]	; (8681c <_svfprintf_r+0x14bc>)
   8652c:	3301      	adds	r3, #1
   8652e:	3401      	adds	r4, #1
   86530:	2b07      	cmp	r3, #7
   86532:	942a      	str	r4, [sp, #168]	; 0xa8
   86534:	9329      	str	r3, [sp, #164]	; 0xa4
   86536:	f8c8 2000 	str.w	r2, [r8]
   8653a:	f300 8117 	bgt.w	8676c <_svfprintf_r+0x140c>
   8653e:	f108 0808 	add.w	r8, r8, #8
   86542:	2900      	cmp	r1, #0
   86544:	f040 8086 	bne.w	86654 <_svfprintf_r+0x12f4>
   86548:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8654a:	f007 0301 	and.w	r3, r7, #1
   8654e:	4313      	orrs	r3, r2
   86550:	f43f a8e0 	beq.w	85714 <_svfprintf_r+0x3b4>
   86554:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86556:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86558:	191a      	adds	r2, r3, r4
   8655a:	e9c8 1300 	strd	r1, r3, [r8]
   8655e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86560:	922a      	str	r2, [sp, #168]	; 0xa8
   86562:	3301      	adds	r3, #1
   86564:	2b07      	cmp	r3, #7
   86566:	9329      	str	r3, [sp, #164]	; 0xa4
   86568:	f300 8137 	bgt.w	867da <_svfprintf_r+0x147a>
   8656c:	f108 0808 	add.w	r8, r8, #8
   86570:	9912      	ldr	r1, [sp, #72]	; 0x48
   86572:	3301      	adds	r3, #1
   86574:	188c      	adds	r4, r1, r2
   86576:	2b07      	cmp	r3, #7
   86578:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8657c:	f8c8 5000 	str.w	r5, [r8]
   86580:	f8c8 1004 	str.w	r1, [r8, #4]
   86584:	f77f a8c4 	ble.w	85710 <_svfprintf_r+0x3b0>
   86588:	f7ff bbac 	b.w	85ce4 <_svfprintf_r+0x984>
   8658c:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   86590:	f000 80a5 	beq.w	866de <_svfprintf_r+0x137e>
   86594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86596:	4699      	mov	r9, r3
   86598:	f852 4b04 	ldr.w	r4, [r2], #4
   8659c:	920e      	str	r2, [sp, #56]	; 0x38
   8659e:	b2a4      	uxth	r4, r4
   865a0:	e664      	b.n	8626c <_svfprintf_r+0xf0c>
   865a2:	46bb      	mov	fp, r7
   865a4:	f7fe bfca 	b.w	8553c <_svfprintf_r+0x1dc>
   865a8:	990c      	ldr	r1, [sp, #48]	; 0x30
   865aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   865ac:	aa28      	add	r2, sp, #160	; 0xa0
   865ae:	f004 fb35 	bl	8ac1c <__ssprint_r>
   865b2:	2800      	cmp	r0, #0
   865b4:	f47f a837 	bne.w	85626 <_svfprintf_r+0x2c6>
   865b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   865ba:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   865be:	f7ff ba7b 	b.w	85ab8 <_svfprintf_r+0x758>
   865c2:	4614      	mov	r4, r2
   865c4:	463a      	mov	r2, r7
   865c6:	464f      	mov	r7, r9
   865c8:	4691      	mov	r9, r2
   865ca:	3301      	adds	r3, #1
   865cc:	442c      	add	r4, r5
   865ce:	2b07      	cmp	r3, #7
   865d0:	f8c8 9000 	str.w	r9, [r8]
   865d4:	f8c8 5004 	str.w	r5, [r8, #4]
   865d8:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   865dc:	f77f a898 	ble.w	85710 <_svfprintf_r+0x3b0>
   865e0:	f7ff bb80 	b.w	85ce4 <_svfprintf_r+0x984>
   865e4:	4659      	mov	r1, fp
   865e6:	4650      	mov	r0, sl
   865e8:	aa28      	add	r2, sp, #160	; 0xa0
   865ea:	f004 fb17 	bl	8ac1c <__ssprint_r>
   865ee:	2800      	cmp	r0, #0
   865f0:	f47f a819 	bne.w	85626 <_svfprintf_r+0x2c6>
   865f4:	7838      	ldrb	r0, [r7, #0]
   865f6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   865f8:	aa2b      	add	r2, sp, #172	; 0xac
   865fa:	e6e1      	b.n	863c0 <_svfprintf_r+0x1060>
   865fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   865fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   86600:	aa28      	add	r2, sp, #160	; 0xa0
   86602:	f004 fb0b 	bl	8ac1c <__ssprint_r>
   86606:	2800      	cmp	r0, #0
   86608:	f47f a80d 	bne.w	85626 <_svfprintf_r+0x2c6>
   8660c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8660e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86612:	f7ff b865 	b.w	856e0 <_svfprintf_r+0x380>
   86616:	2b01      	cmp	r3, #1
   86618:	46bb      	mov	fp, r7
   8661a:	f47f a9f5 	bne.w	85a08 <_svfprintf_r+0x6a8>
   8661e:	f7fe bf92 	b.w	85546 <_svfprintf_r+0x1e6>
   86622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86624:	9908      	ldr	r1, [sp, #32]
   86626:	f853 2b04 	ldr.w	r2, [r3], #4
   8662a:	4655      	mov	r5, sl
   8662c:	6011      	str	r1, [r2, #0]
   8662e:	930e      	str	r3, [sp, #56]	; 0x38
   86630:	f7ff b88e 	b.w	85750 <_svfprintf_r+0x3f0>
   86634:	2b06      	cmp	r3, #6
   86636:	4629      	mov	r1, r5
   86638:	bf28      	it	cs
   8663a:	2306      	movcs	r3, #6
   8663c:	462a      	mov	r2, r5
   8663e:	9507      	str	r5, [sp, #28]
   86640:	950d      	str	r5, [sp, #52]	; 0x34
   86642:	9306      	str	r3, [sp, #24]
   86644:	4d76      	ldr	r5, [pc, #472]	; (86820 <_svfprintf_r+0x14c0>)
   86646:	940e      	str	r4, [sp, #56]	; 0x38
   86648:	930b      	str	r3, [sp, #44]	; 0x2c
   8664a:	910f      	str	r1, [sp, #60]	; 0x3c
   8664c:	9113      	str	r1, [sp, #76]	; 0x4c
   8664e:	9110      	str	r1, [sp, #64]	; 0x40
   86650:	f7fe bf8e 	b.w	85570 <_svfprintf_r+0x210>
   86654:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86656:	9817      	ldr	r0, [sp, #92]	; 0x5c
   86658:	191a      	adds	r2, r3, r4
   8665a:	e9c8 0300 	strd	r0, r3, [r8]
   8665e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86660:	922a      	str	r2, [sp, #168]	; 0xa8
   86662:	3301      	adds	r3, #1
   86664:	2b07      	cmp	r3, #7
   86666:	9329      	str	r3, [sp, #164]	; 0xa4
   86668:	f300 80b7 	bgt.w	867da <_svfprintf_r+0x147a>
   8666c:	f108 0808 	add.w	r8, r8, #8
   86670:	2900      	cmp	r1, #0
   86672:	f6bf af7d 	bge.w	86570 <_svfprintf_r+0x1210>
   86676:	424e      	negs	r6, r1
   86678:	3110      	adds	r1, #16
   8667a:	f280 83a9 	bge.w	86dd0 <_svfprintf_r+0x1a70>
   8667e:	4641      	mov	r1, r8
   86680:	2410      	movs	r4, #16
   86682:	46a8      	mov	r8, r5
   86684:	f8df 919c 	ldr.w	r9, [pc, #412]	; 86824 <_svfprintf_r+0x14c4>
   86688:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8668c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8668e:	e004      	b.n	8669a <_svfprintf_r+0x133a>
   86690:	3108      	adds	r1, #8
   86692:	3e10      	subs	r6, #16
   86694:	2e10      	cmp	r6, #16
   86696:	f340 82a7 	ble.w	86be8 <_svfprintf_r+0x1888>
   8669a:	3301      	adds	r3, #1
   8669c:	3210      	adds	r2, #16
   8669e:	2b07      	cmp	r3, #7
   866a0:	e9c1 9400 	strd	r9, r4, [r1]
   866a4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   866a8:	ddf2      	ble.n	86690 <_svfprintf_r+0x1330>
   866aa:	4629      	mov	r1, r5
   866ac:	4658      	mov	r0, fp
   866ae:	aa28      	add	r2, sp, #160	; 0xa0
   866b0:	f004 fab4 	bl	8ac1c <__ssprint_r>
   866b4:	2800      	cmp	r0, #0
   866b6:	f47e afb6 	bne.w	85626 <_svfprintf_r+0x2c6>
   866ba:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   866be:	a92b      	add	r1, sp, #172	; 0xac
   866c0:	e7e7      	b.n	86692 <_svfprintf_r+0x1332>
   866c2:	4614      	mov	r4, r2
   866c4:	9f07      	ldr	r7, [sp, #28]
   866c6:	3601      	adds	r6, #1
   866c8:	442c      	add	r4, r5
   866ca:	2e07      	cmp	r6, #7
   866cc:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   866d0:	f8c8 9000 	str.w	r9, [r8]
   866d4:	f8c8 5004 	str.w	r5, [r8, #4]
   866d8:	f77f aaf5 	ble.w	85cc6 <_svfprintf_r+0x966>
   866dc:	e44e      	b.n	85f7c <_svfprintf_r+0xc1c>
   866de:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   866e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   866e4:	d066      	beq.n	867b4 <_svfprintf_r+0x1454>
   866e6:	f853 4b04 	ldr.w	r4, [r3], #4
   866ea:	4691      	mov	r9, r2
   866ec:	930e      	str	r3, [sp, #56]	; 0x38
   866ee:	b2e4      	uxtb	r4, r4
   866f0:	e5bc      	b.n	8626c <_svfprintf_r+0xf0c>
   866f2:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   866f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   866f8:	d057      	beq.n	867aa <_svfprintf_r+0x144a>
   866fa:	f853 4b04 	ldr.w	r4, [r3], #4
   866fe:	4691      	mov	r9, r2
   86700:	930e      	str	r3, [sp, #56]	; 0x38
   86702:	b2e4      	uxtb	r4, r4
   86704:	f7fe bf49 	b.w	8559a <_svfprintf_r+0x23a>
   86708:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8670a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 86824 <_svfprintf_r+0x14c4>
   8670e:	f7ff ba95 	b.w	85c3c <_svfprintf_r+0x8dc>
   86712:	222d      	movs	r2, #45	; 0x2d
   86714:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86718:	f7ff b857 	b.w	857ca <_svfprintf_r+0x46a>
   8671c:	4645      	mov	r5, r8
   8671e:	4690      	mov	r8, r2
   86720:	463a      	mov	r2, r7
   86722:	460c      	mov	r4, r1
   86724:	464f      	mov	r7, r9
   86726:	4691      	mov	r9, r2
   86728:	3301      	adds	r3, #1
   8672a:	4434      	add	r4, r6
   8672c:	2b07      	cmp	r3, #7
   8672e:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86732:	f8c8 9000 	str.w	r9, [r8]
   86736:	f8c8 6004 	str.w	r6, [r8, #4]
   8673a:	dc5c      	bgt.n	867f6 <_svfprintf_r+0x1496>
   8673c:	f108 0808 	add.w	r8, r8, #8
   86740:	f7ff bb9e 	b.w	85e80 <_svfprintf_r+0xb20>
   86744:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   86746:	991b      	ldr	r1, [sp, #108]	; 0x6c
   86748:	1aed      	subs	r5, r5, r3
   8674a:	461a      	mov	r2, r3
   8674c:	4628      	mov	r0, r5
   8674e:	f7fe fdd3 	bl	852f8 <strncpy>
   86752:	f898 3001 	ldrb.w	r3, [r8, #1]
   86756:	b10b      	cbz	r3, 8675c <_svfprintf_r+0x13fc>
   86758:	f108 0801 	add.w	r8, r8, #1
   8675c:	4620      	mov	r0, r4
   8675e:	4649      	mov	r1, r9
   86760:	220a      	movs	r2, #10
   86762:	2300      	movs	r3, #0
   86764:	2600      	movs	r6, #0
   86766:	f005 f9d7 	bl	8bb18 <__aeabi_uldivmod>
   8676a:	e69f      	b.n	864ac <_svfprintf_r+0x114c>
   8676c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8676e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86770:	aa28      	add	r2, sp, #160	; 0xa0
   86772:	f004 fa53 	bl	8ac1c <__ssprint_r>
   86776:	2800      	cmp	r0, #0
   86778:	f47e af55 	bne.w	85626 <_svfprintf_r+0x2c6>
   8677c:	9922      	ldr	r1, [sp, #136]	; 0x88
   8677e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86780:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86784:	e6dd      	b.n	86542 <_svfprintf_r+0x11e2>
   86786:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86788:	18ae      	adds	r6, r5, r2
   8678a:	eba6 060b 	sub.w	r6, r6, fp
   8678e:	1ad5      	subs	r5, r2, r3
   86790:	42ae      	cmp	r6, r5
   86792:	bfa8      	it	ge
   86794:	462e      	movge	r6, r5
   86796:	f7ff bba6 	b.w	85ee6 <_svfprintf_r+0xb86>
   8679a:	f852 4b04 	ldr.w	r4, [r2], #4
   8679e:	4689      	mov	r9, r1
   867a0:	2301      	movs	r3, #1
   867a2:	920e      	str	r2, [sp, #56]	; 0x38
   867a4:	b2e4      	uxtb	r4, r4
   867a6:	f7fe befb 	b.w	855a0 <_svfprintf_r+0x240>
   867aa:	f853 4b04 	ldr.w	r4, [r3], #4
   867ae:	930e      	str	r3, [sp, #56]	; 0x38
   867b0:	f7fe bef3 	b.w	8559a <_svfprintf_r+0x23a>
   867b4:	f853 4b04 	ldr.w	r4, [r3], #4
   867b8:	930e      	str	r3, [sp, #56]	; 0x38
   867ba:	e557      	b.n	8626c <_svfprintf_r+0xf0c>
   867bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867be:	9908      	ldr	r1, [sp, #32]
   867c0:	f853 2b04 	ldr.w	r2, [r3], #4
   867c4:	4655      	mov	r5, sl
   867c6:	8011      	strh	r1, [r2, #0]
   867c8:	930e      	str	r3, [sp, #56]	; 0x38
   867ca:	f7fe bfc1 	b.w	85750 <_svfprintf_r+0x3f0>
   867ce:	f344 19c0 	sbfx	r9, r4, #7, #1
   867d2:	464b      	mov	r3, r9
   867d4:	b264      	sxtb	r4, r4
   867d6:	f7fe bea4 	b.w	85522 <_svfprintf_r+0x1c2>
   867da:	990c      	ldr	r1, [sp, #48]	; 0x30
   867dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   867de:	aa28      	add	r2, sp, #160	; 0xa0
   867e0:	f004 fa1c 	bl	8ac1c <__ssprint_r>
   867e4:	2800      	cmp	r0, #0
   867e6:	f47e af1e 	bne.w	85626 <_svfprintf_r+0x2c6>
   867ea:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   867ee:	9922      	ldr	r1, [sp, #136]	; 0x88
   867f0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   867f4:	e73c      	b.n	86670 <_svfprintf_r+0x1310>
   867f6:	990c      	ldr	r1, [sp, #48]	; 0x30
   867f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   867fa:	aa28      	add	r2, sp, #160	; 0xa0
   867fc:	f004 fa0e 	bl	8ac1c <__ssprint_r>
   86800:	2800      	cmp	r0, #0
   86802:	f47e af10 	bne.w	85626 <_svfprintf_r+0x2c6>
   86806:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86808:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8680c:	f7ff bb38 	b.w	85e80 <_svfprintf_r+0xb20>
   86810:	2306      	movs	r3, #6
   86812:	9307      	str	r3, [sp, #28]
   86814:	f026 0320 	bic.w	r3, r6, #32
   86818:	9306      	str	r3, [sp, #24]
   8681a:	e470      	b.n	860fe <_svfprintf_r+0xd9e>
   8681c:	0008bf1c 	.word	0x0008bf1c
   86820:	0008bf14 	.word	0x0008bf14
   86824:	0008bf30 	.word	0x0008bf30
   86828:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   8682c:	18eb      	adds	r3, r5, r3
   8682e:	429e      	cmp	r6, r3
   86830:	46b3      	mov	fp, r6
   86832:	9719      	str	r7, [sp, #100]	; 0x64
   86834:	4690      	mov	r8, r2
   86836:	460c      	mov	r4, r1
   86838:	bf28      	it	cs
   8683a:	469b      	movcs	fp, r3
   8683c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   86840:	9f10      	ldr	r7, [sp, #64]	; 0x40
   86842:	f7ff bb23 	b.w	85e8c <_svfprintf_r+0xb2c>
   86846:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86848:	1cda      	adds	r2, r3, #3
   8684a:	9310      	str	r3, [sp, #64]	; 0x40
   8684c:	db02      	blt.n	86854 <_svfprintf_r+0x14f4>
   8684e:	9a07      	ldr	r2, [sp, #28]
   86850:	4293      	cmp	r3, r2
   86852:	dd04      	ble.n	8685e <_svfprintf_r+0x14fe>
   86854:	3e02      	subs	r6, #2
   86856:	f026 0320 	bic.w	r3, r6, #32
   8685a:	9306      	str	r3, [sp, #24]
   8685c:	e48b      	b.n	86176 <_svfprintf_r+0xe16>
   8685e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86860:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86862:	4293      	cmp	r3, r2
   86864:	f2c0 80c2 	blt.w	869ec <_svfprintf_r+0x168c>
   86868:	f019 0f01 	tst.w	r9, #1
   8686c:	f000 821d 	beq.w	86caa <_svfprintf_r+0x194a>
   86870:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86872:	4413      	add	r3, r2
   86874:	930b      	str	r3, [sp, #44]	; 0x2c
   86876:	f419 6f80 	tst.w	r9, #1024	; 0x400
   8687a:	f000 8214 	beq.w	86ca6 <_svfprintf_r+0x1946>
   8687e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86880:	2667      	movs	r6, #103	; 0x67
   86882:	2b00      	cmp	r3, #0
   86884:	dc76      	bgt.n	86974 <_svfprintf_r+0x1614>
   86886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86888:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8688c:	9306      	str	r3, [sp, #24]
   8688e:	2300      	movs	r3, #0
   86890:	930f      	str	r3, [sp, #60]	; 0x3c
   86892:	9313      	str	r3, [sp, #76]	; 0x4c
   86894:	e4cf      	b.n	86236 <_svfprintf_r+0xed6>
   86896:	222d      	movs	r2, #45	; 0x2d
   86898:	2300      	movs	r3, #0
   8689a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8689e:	9307      	str	r3, [sp, #28]
   868a0:	f7fe be68 	b.w	85574 <_svfprintf_r+0x214>
   868a4:	990c      	ldr	r1, [sp, #48]	; 0x30
   868a6:	980a      	ldr	r0, [sp, #40]	; 0x28
   868a8:	aa28      	add	r2, sp, #160	; 0xa0
   868aa:	f004 f9b7 	bl	8ac1c <__ssprint_r>
   868ae:	2800      	cmp	r0, #0
   868b0:	f47e aeb9 	bne.w	85626 <_svfprintf_r+0x2c6>
   868b4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   868b6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   868ba:	f7ff bad8 	b.w	85e6e <_svfprintf_r+0xb0e>
   868be:	4659      	mov	r1, fp
   868c0:	4650      	mov	r0, sl
   868c2:	aa28      	add	r2, sp, #160	; 0xa0
   868c4:	f004 f9aa 	bl	8ac1c <__ssprint_r>
   868c8:	2800      	cmp	r0, #0
   868ca:	f47e aeac 	bne.w	85626 <_svfprintf_r+0x2c6>
   868ce:	7838      	ldrb	r0, [r7, #0]
   868d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
   868d2:	aa2b      	add	r2, sp, #172	; 0xac
   868d4:	4406      	add	r6, r0
   868d6:	e57a      	b.n	863ce <_svfprintf_r+0x106e>
   868d8:	990c      	ldr	r1, [sp, #48]	; 0x30
   868da:	980a      	ldr	r0, [sp, #40]	; 0x28
   868dc:	aa28      	add	r2, sp, #160	; 0xa0
   868de:	f004 f99d 	bl	8ac1c <__ssprint_r>
   868e2:	2800      	cmp	r0, #0
   868e4:	f47e ae9f 	bne.w	85626 <_svfprintf_r+0x2c6>
   868e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   868ea:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   868ec:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   868f0:	f7ff bae1 	b.w	85eb6 <_svfprintf_r+0xb56>
   868f4:	9907      	ldr	r1, [sp, #28]
   868f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   868f8:	9101      	str	r1, [sp, #4]
   868fa:	2103      	movs	r1, #3
   868fc:	9100      	str	r1, [sp, #0]
   868fe:	a926      	add	r1, sp, #152	; 0x98
   86900:	9104      	str	r1, [sp, #16]
   86902:	a923      	add	r1, sp, #140	; 0x8c
   86904:	9103      	str	r1, [sp, #12]
   86906:	a922      	add	r1, sp, #136	; 0x88
   86908:	465a      	mov	r2, fp
   8690a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8690c:	9102      	str	r1, [sp, #8]
   8690e:	f001 fad3 	bl	87eb8 <_dtoa_r>
   86912:	7803      	ldrb	r3, [r0, #0]
   86914:	4605      	mov	r5, r0
   86916:	2b30      	cmp	r3, #48	; 0x30
   86918:	f000 8216 	beq.w	86d48 <_svfprintf_r+0x19e8>
   8691c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8691e:	9a07      	ldr	r2, [sp, #28]
   86920:	46b9      	mov	r9, r7
   86922:	4413      	add	r3, r2
   86924:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86926:	18ec      	adds	r4, r5, r3
   86928:	4658      	mov	r0, fp
   8692a:	2200      	movs	r2, #0
   8692c:	2300      	movs	r3, #0
   8692e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86930:	f005 f882 	bl	8ba38 <__aeabi_dcmpeq>
   86934:	b108      	cbz	r0, 8693a <_svfprintf_r+0x15da>
   86936:	4623      	mov	r3, r4
   86938:	e411      	b.n	8615e <_svfprintf_r+0xdfe>
   8693a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8693c:	42a3      	cmp	r3, r4
   8693e:	f4bf ac0e 	bcs.w	8615e <_svfprintf_r+0xdfe>
   86942:	2130      	movs	r1, #48	; 0x30
   86944:	1c5a      	adds	r2, r3, #1
   86946:	9226      	str	r2, [sp, #152]	; 0x98
   86948:	7019      	strb	r1, [r3, #0]
   8694a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8694c:	429c      	cmp	r4, r3
   8694e:	d8f9      	bhi.n	86944 <_svfprintf_r+0x15e4>
   86950:	e405      	b.n	8615e <_svfprintf_r+0xdfe>
   86952:	9a22      	ldr	r2, [sp, #136]	; 0x88
   86954:	2a00      	cmp	r2, #0
   86956:	9210      	str	r2, [sp, #64]	; 0x40
   86958:	f340 820e 	ble.w	86d78 <_svfprintf_r+0x1a18>
   8695c:	9907      	ldr	r1, [sp, #28]
   8695e:	f009 0301 	and.w	r3, r9, #1
   86962:	430b      	orrs	r3, r1
   86964:	f040 817e 	bne.w	86c64 <_svfprintf_r+0x1904>
   86968:	2666      	movs	r6, #102	; 0x66
   8696a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8696c:	930b      	str	r3, [sp, #44]	; 0x2c
   8696e:	f419 6f80 	tst.w	r9, #1024	; 0x400
   86972:	d088      	beq.n	86886 <_svfprintf_r+0x1526>
   86974:	9919      	ldr	r1, [sp, #100]	; 0x64
   86976:	780b      	ldrb	r3, [r1, #0]
   86978:	2bff      	cmp	r3, #255	; 0xff
   8697a:	f000 8225 	beq.w	86dc8 <_svfprintf_r+0x1a68>
   8697e:	2400      	movs	r4, #0
   86980:	9a10      	ldr	r2, [sp, #64]	; 0x40
   86982:	4620      	mov	r0, r4
   86984:	e004      	b.n	86990 <_svfprintf_r+0x1630>
   86986:	3001      	adds	r0, #1
   86988:	3101      	adds	r1, #1
   8698a:	2bff      	cmp	r3, #255	; 0xff
   8698c:	f000 8159 	beq.w	86c42 <_svfprintf_r+0x18e2>
   86990:	4293      	cmp	r3, r2
   86992:	f280 8156 	bge.w	86c42 <_svfprintf_r+0x18e2>
   86996:	1ad2      	subs	r2, r2, r3
   86998:	784b      	ldrb	r3, [r1, #1]
   8699a:	2b00      	cmp	r3, #0
   8699c:	d1f3      	bne.n	86986 <_svfprintf_r+0x1626>
   8699e:	780b      	ldrb	r3, [r1, #0]
   869a0:	3401      	adds	r4, #1
   869a2:	e7f2      	b.n	8698a <_svfprintf_r+0x162a>
   869a4:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   869a8:	f7ff b9da 	b.w	85d60 <_svfprintf_r+0xa00>
   869ac:	9b07      	ldr	r3, [sp, #28]
   869ae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   869b2:	940e      	str	r4, [sp, #56]	; 0x38
   869b4:	9306      	str	r3, [sp, #24]
   869b6:	930b      	str	r3, [sp, #44]	; 0x2c
   869b8:	9007      	str	r0, [sp, #28]
   869ba:	900f      	str	r0, [sp, #60]	; 0x3c
   869bc:	9013      	str	r0, [sp, #76]	; 0x4c
   869be:	9010      	str	r0, [sp, #64]	; 0x40
   869c0:	f7fe bdd6 	b.w	85570 <_svfprintf_r+0x210>
   869c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   869c6:	980a      	ldr	r0, [sp, #40]	; 0x28
   869c8:	aa28      	add	r2, sp, #160	; 0xa0
   869ca:	f004 f927 	bl	8ac1c <__ssprint_r>
   869ce:	2800      	cmp	r0, #0
   869d0:	f47e ae29 	bne.w	85626 <_svfprintf_r+0x2c6>
   869d4:	9d22      	ldr	r5, [sp, #136]	; 0x88
   869d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869d8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   869da:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   869de:	1b5d      	subs	r5, r3, r5
   869e0:	f7ff ba81 	b.w	85ee6 <_svfprintf_r+0xb86>
   869e4:	2300      	movs	r3, #0
   869e6:	9307      	str	r3, [sp, #28]
   869e8:	f7fe bd0b 	b.w	85402 <_svfprintf_r+0xa2>
   869ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
   869f0:	189a      	adds	r2, r3, r2
   869f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   869f4:	920b      	str	r2, [sp, #44]	; 0x2c
   869f6:	2b00      	cmp	r3, #0
   869f8:	f340 8185 	ble.w	86d06 <_svfprintf_r+0x19a6>
   869fc:	2667      	movs	r6, #103	; 0x67
   869fe:	e7b6      	b.n	8696e <_svfprintf_r+0x160e>
   86a00:	2330      	movs	r3, #48	; 0x30
   86a02:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86a06:	2358      	movs	r3, #88	; 0x58
   86a08:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   86a0c:	9b07      	ldr	r3, [sp, #28]
   86a0e:	f047 0402 	orr.w	r4, r7, #2
   86a12:	2b63      	cmp	r3, #99	; 0x63
   86a14:	f300 80c4 	bgt.w	86ba0 <_svfprintf_r+0x1840>
   86a18:	2300      	movs	r3, #0
   86a1a:	ad3b      	add	r5, sp, #236	; 0xec
   86a1c:	930d      	str	r3, [sp, #52]	; 0x34
   86a1e:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   86a22:	930f      	str	r3, [sp, #60]	; 0x3c
   86a24:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86a28:	4613      	mov	r3, r2
   86a2a:	2b00      	cmp	r3, #0
   86a2c:	4627      	mov	r7, r4
   86a2e:	f2c0 8084 	blt.w	86b3a <_svfprintf_r+0x17da>
   86a32:	930b      	str	r3, [sp, #44]	; 0x2c
   86a34:	2300      	movs	r3, #0
   86a36:	468b      	mov	fp, r1
   86a38:	931d      	str	r3, [sp, #116]	; 0x74
   86a3a:	f026 0320 	bic.w	r3, r6, #32
   86a3e:	9306      	str	r3, [sp, #24]
   86a40:	2e61      	cmp	r6, #97	; 0x61
   86a42:	f000 8118 	beq.w	86c76 <_svfprintf_r+0x1916>
   86a46:	2e41      	cmp	r6, #65	; 0x41
   86a48:	f47f ab67 	bne.w	8611a <_svfprintf_r+0xdba>
   86a4c:	aa22      	add	r2, sp, #136	; 0x88
   86a4e:	4658      	mov	r0, fp
   86a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a52:	f004 f853 	bl	8aafc <frexp>
   86a56:	2200      	movs	r2, #0
   86a58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86a5c:	f004 fd84 	bl	8b568 <__aeabi_dmul>
   86a60:	4602      	mov	r2, r0
   86a62:	460b      	mov	r3, r1
   86a64:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   86a68:	2200      	movs	r2, #0
   86a6a:	2300      	movs	r3, #0
   86a6c:	f004 ffe4 	bl	8ba38 <__aeabi_dcmpeq>
   86a70:	b108      	cbz	r0, 86a76 <_svfprintf_r+0x1716>
   86a72:	2301      	movs	r3, #1
   86a74:	9322      	str	r3, [sp, #136]	; 0x88
   86a76:	4bad      	ldr	r3, [pc, #692]	; (86d2c <_svfprintf_r+0x19cc>)
   86a78:	930b      	str	r3, [sp, #44]	; 0x2c
   86a7a:	9b07      	ldr	r3, [sp, #28]
   86a7c:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   86a80:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   86a84:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   86a88:	46ab      	mov	fp, r5
   86a8a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   86a8e:	f103 39ff 	add.w	r9, r3, #4294967295
   86a92:	9510      	str	r5, [sp, #64]	; 0x40
   86a94:	e006      	b.n	86aa4 <_svfprintf_r+0x1744>
   86a96:	2200      	movs	r2, #0
   86a98:	2300      	movs	r3, #0
   86a9a:	f109 39ff 	add.w	r9, r9, #4294967295
   86a9e:	f004 ffcb 	bl	8ba38 <__aeabi_dcmpeq>
   86aa2:	b9e8      	cbnz	r0, 86ae0 <_svfprintf_r+0x1780>
   86aa4:	2200      	movs	r2, #0
   86aa6:	4ba2      	ldr	r3, [pc, #648]	; (86d30 <_svfprintf_r+0x19d0>)
   86aa8:	4630      	mov	r0, r6
   86aaa:	4639      	mov	r1, r7
   86aac:	f004 fd5c 	bl	8b568 <__aeabi_dmul>
   86ab0:	460f      	mov	r7, r1
   86ab2:	4606      	mov	r6, r0
   86ab4:	f005 f808 	bl	8bac8 <__aeabi_d2iz>
   86ab8:	4604      	mov	r4, r0
   86aba:	f004 fceb 	bl	8b494 <__aeabi_i2d>
   86abe:	460b      	mov	r3, r1
   86ac0:	4602      	mov	r2, r0
   86ac2:	4639      	mov	r1, r7
   86ac4:	4630      	mov	r0, r6
   86ac6:	f004 fb97 	bl	8b1f8 <__aeabi_dsub>
   86aca:	f81a 3004 	ldrb.w	r3, [sl, r4]
   86ace:	f1b9 3fff 	cmp.w	r9, #4294967295
   86ad2:	46d8      	mov	r8, fp
   86ad4:	464d      	mov	r5, r9
   86ad6:	4606      	mov	r6, r0
   86ad8:	460f      	mov	r7, r1
   86ada:	f80b 3b01 	strb.w	r3, [fp], #1
   86ade:	d1da      	bne.n	86a96 <_svfprintf_r+0x1736>
   86ae0:	4630      	mov	r0, r6
   86ae2:	4639      	mov	r1, r7
   86ae4:	2200      	movs	r2, #0
   86ae6:	4b93      	ldr	r3, [pc, #588]	; (86d34 <_svfprintf_r+0x19d4>)
   86ae8:	46a9      	mov	r9, r5
   86aea:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   86aee:	9d10      	ldr	r5, [sp, #64]	; 0x40
   86af0:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   86af4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86af8:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   86afc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   86afe:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   86b00:	f004 ffc2 	bl	8ba88 <__aeabi_dcmpgt>
   86b04:	bb80      	cbnz	r0, 86b68 <_svfprintf_r+0x1808>
   86b06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86b0a:	2200      	movs	r2, #0
   86b0c:	4b89      	ldr	r3, [pc, #548]	; (86d34 <_svfprintf_r+0x19d4>)
   86b0e:	f004 ff93 	bl	8ba38 <__aeabi_dcmpeq>
   86b12:	b108      	cbz	r0, 86b18 <_svfprintf_r+0x17b8>
   86b14:	07e1      	lsls	r1, r4, #31
   86b16:	d427      	bmi.n	86b68 <_svfprintf_r+0x1808>
   86b18:	464b      	mov	r3, r9
   86b1a:	2b00      	cmp	r3, #0
   86b1c:	db06      	blt.n	86b2c <_svfprintf_r+0x17cc>
   86b1e:	2230      	movs	r2, #48	; 0x30
   86b20:	3301      	adds	r3, #1
   86b22:	445b      	add	r3, fp
   86b24:	f80b 2b01 	strb.w	r2, [fp], #1
   86b28:	455b      	cmp	r3, fp
   86b2a:	d1fb      	bne.n	86b24 <_svfprintf_r+0x17c4>
   86b2c:	ebab 0305 	sub.w	r3, fp, r5
   86b30:	46b9      	mov	r9, r7
   86b32:	9312      	str	r3, [sp, #72]	; 0x48
   86b34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86b36:	f7ff bb14 	b.w	86162 <_svfprintf_r+0xe02>
   86b3a:	f026 0320 	bic.w	r3, r6, #32
   86b3e:	9306      	str	r3, [sp, #24]
   86b40:	222d      	movs	r2, #45	; 0x2d
   86b42:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86b46:	469b      	mov	fp, r3
   86b48:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   86b4c:	921d      	str	r2, [sp, #116]	; 0x74
   86b4e:	930b      	str	r3, [sp, #44]	; 0x2c
   86b50:	e776      	b.n	86a40 <_svfprintf_r+0x16e0>
   86b52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86b54:	f7ff b95c 	b.w	85e10 <_svfprintf_r+0xab0>
   86b58:	9b07      	ldr	r3, [sp, #28]
   86b5a:	18ec      	adds	r4, r5, r3
   86b5c:	e6e4      	b.n	86928 <_svfprintf_r+0x15c8>
   86b5e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86b60:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 86d38 <_svfprintf_r+0x19d8>
   86b64:	f7ff b827 	b.w	85bb6 <_svfprintf_r+0x856>
   86b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86b6a:	9326      	str	r3, [sp, #152]	; 0x98
   86b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86b6e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   86b72:	7bd9      	ldrb	r1, [r3, #15]
   86b74:	465b      	mov	r3, fp
   86b76:	428a      	cmp	r2, r1
   86b78:	d109      	bne.n	86b8e <_svfprintf_r+0x182e>
   86b7a:	2030      	movs	r0, #48	; 0x30
   86b7c:	f803 0c01 	strb.w	r0, [r3, #-1]
   86b80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86b82:	1e5a      	subs	r2, r3, #1
   86b84:	9226      	str	r2, [sp, #152]	; 0x98
   86b86:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   86b8a:	4291      	cmp	r1, r2
   86b8c:	d0f6      	beq.n	86b7c <_svfprintf_r+0x181c>
   86b8e:	2a39      	cmp	r2, #57	; 0x39
   86b90:	bf0b      	itete	eq
   86b92:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   86b94:	3201      	addne	r2, #1
   86b96:	7a92      	ldrbeq	r2, [r2, #10]
   86b98:	b2d2      	uxtbne	r2, r2
   86b9a:	f803 2c01 	strb.w	r2, [r3, #-1]
   86b9e:	e7c5      	b.n	86b2c <_svfprintf_r+0x17cc>
   86ba0:	980a      	ldr	r0, [sp, #40]	; 0x28
   86ba2:	1c59      	adds	r1, r3, #1
   86ba4:	f002 fe86 	bl	898b4 <_malloc_r>
   86ba8:	4605      	mov	r5, r0
   86baa:	2800      	cmp	r0, #0
   86bac:	f000 8117 	beq.w	86dde <_svfprintf_r+0x1a7e>
   86bb0:	900d      	str	r0, [sp, #52]	; 0x34
   86bb2:	e734      	b.n	86a1e <_svfprintf_r+0x16be>
   86bb4:	2102      	movs	r1, #2
   86bb6:	9100      	str	r1, [sp, #0]
   86bb8:	9907      	ldr	r1, [sp, #28]
   86bba:	465a      	mov	r2, fp
   86bbc:	1c4c      	adds	r4, r1, #1
   86bbe:	a926      	add	r1, sp, #152	; 0x98
   86bc0:	9104      	str	r1, [sp, #16]
   86bc2:	a923      	add	r1, sp, #140	; 0x8c
   86bc4:	9103      	str	r1, [sp, #12]
   86bc6:	a922      	add	r1, sp, #136	; 0x88
   86bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86bca:	980a      	ldr	r0, [sp, #40]	; 0x28
   86bcc:	9401      	str	r4, [sp, #4]
   86bce:	9102      	str	r1, [sp, #8]
   86bd0:	f001 f972 	bl	87eb8 <_dtoa_r>
   86bd4:	4605      	mov	r5, r0
   86bd6:	46b9      	mov	r9, r7
   86bd8:	442c      	add	r4, r5
   86bda:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86bdc:	e6a4      	b.n	86928 <_svfprintf_r+0x15c8>
   86bde:	2330      	movs	r3, #48	; 0x30
   86be0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86be4:	2378      	movs	r3, #120	; 0x78
   86be6:	e70f      	b.n	86a08 <_svfprintf_r+0x16a8>
   86be8:	4645      	mov	r5, r8
   86bea:	4688      	mov	r8, r1
   86bec:	3301      	adds	r3, #1
   86bee:	4432      	add	r2, r6
   86bf0:	2b07      	cmp	r3, #7
   86bf2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   86bf6:	f8c8 9000 	str.w	r9, [r8]
   86bfa:	f8c8 6004 	str.w	r6, [r8, #4]
   86bfe:	f77f acb5 	ble.w	8656c <_svfprintf_r+0x120c>
   86c02:	990c      	ldr	r1, [sp, #48]	; 0x30
   86c04:	980a      	ldr	r0, [sp, #40]	; 0x28
   86c06:	aa28      	add	r2, sp, #160	; 0xa0
   86c08:	f004 f808 	bl	8ac1c <__ssprint_r>
   86c0c:	2800      	cmp	r0, #0
   86c0e:	f47e ad0a 	bne.w	85626 <_svfprintf_r+0x2c6>
   86c12:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86c16:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86c1a:	e4a9      	b.n	86570 <_svfprintf_r+0x1210>
   86c1c:	9b07      	ldr	r3, [sp, #28]
   86c1e:	2b00      	cmp	r3, #0
   86c20:	bf08      	it	eq
   86c22:	2301      	moveq	r3, #1
   86c24:	9307      	str	r3, [sp, #28]
   86c26:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   86c2a:	930f      	str	r3, [sp, #60]	; 0x3c
   86c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86c2e:	2b00      	cmp	r3, #0
   86c30:	f2c0 80b6 	blt.w	86da0 <_svfprintf_r+0x1a40>
   86c34:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   86c38:	900d      	str	r0, [sp, #52]	; 0x34
   86c3a:	930b      	str	r3, [sp, #44]	; 0x2c
   86c3c:	901d      	str	r0, [sp, #116]	; 0x74
   86c3e:	f7ff ba73 	b.w	86128 <_svfprintf_r+0xdc8>
   86c42:	9119      	str	r1, [sp, #100]	; 0x64
   86c44:	9210      	str	r2, [sp, #64]	; 0x40
   86c46:	9013      	str	r0, [sp, #76]	; 0x4c
   86c48:	940f      	str	r4, [sp, #60]	; 0x3c
   86c4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86c4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86c4e:	991c      	ldr	r1, [sp, #112]	; 0x70
   86c50:	4413      	add	r3, r2
   86c52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86c54:	fb01 2303 	mla	r3, r1, r3, r2
   86c58:	930b      	str	r3, [sp, #44]	; 0x2c
   86c5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86c5e:	9306      	str	r3, [sp, #24]
   86c60:	f7ff bae9 	b.w	86236 <_svfprintf_r+0xed6>
   86c64:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86c66:	2666      	movs	r6, #102	; 0x66
   86c68:	18d3      	adds	r3, r2, r3
   86c6a:	4419      	add	r1, r3
   86c6c:	910b      	str	r1, [sp, #44]	; 0x2c
   86c6e:	e67e      	b.n	8696e <_svfprintf_r+0x160e>
   86c70:	2300      	movs	r3, #0
   86c72:	930d      	str	r3, [sp, #52]	; 0x34
   86c74:	e764      	b.n	86b40 <_svfprintf_r+0x17e0>
   86c76:	aa22      	add	r2, sp, #136	; 0x88
   86c78:	4658      	mov	r0, fp
   86c7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c7c:	f003 ff3e 	bl	8aafc <frexp>
   86c80:	2200      	movs	r2, #0
   86c82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86c86:	f004 fc6f 	bl	8b568 <__aeabi_dmul>
   86c8a:	4602      	mov	r2, r0
   86c8c:	460b      	mov	r3, r1
   86c8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   86c92:	2200      	movs	r2, #0
   86c94:	2300      	movs	r3, #0
   86c96:	f004 fecf 	bl	8ba38 <__aeabi_dcmpeq>
   86c9a:	b108      	cbz	r0, 86ca0 <_svfprintf_r+0x1940>
   86c9c:	2301      	movs	r3, #1
   86c9e:	9322      	str	r3, [sp, #136]	; 0x88
   86ca0:	4b26      	ldr	r3, [pc, #152]	; (86d3c <_svfprintf_r+0x19dc>)
   86ca2:	930b      	str	r3, [sp, #44]	; 0x2c
   86ca4:	e6e9      	b.n	86a7a <_svfprintf_r+0x171a>
   86ca6:	2667      	movs	r6, #103	; 0x67
   86ca8:	e5ed      	b.n	86886 <_svfprintf_r+0x1526>
   86caa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86cac:	930b      	str	r3, [sp, #44]	; 0x2c
   86cae:	e5e2      	b.n	86876 <_svfprintf_r+0x1516>
   86cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86cb2:	2003      	movs	r0, #3
   86cb4:	2b00      	cmp	r3, #0
   86cb6:	bfb8      	it	lt
   86cb8:	222d      	movlt	r2, #45	; 0x2d
   86cba:	f04f 0300 	mov.w	r3, #0
   86cbe:	bfa8      	it	ge
   86cc0:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   86cc4:	4619      	mov	r1, r3
   86cc6:	930d      	str	r3, [sp, #52]	; 0x34
   86cc8:	4d1d      	ldr	r5, [pc, #116]	; (86d40 <_svfprintf_r+0x19e0>)
   86cca:	4b1e      	ldr	r3, [pc, #120]	; (86d44 <_svfprintf_r+0x19e4>)
   86ccc:	bfb8      	it	lt
   86cce:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   86cd2:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   86cd6:	9006      	str	r0, [sp, #24]
   86cd8:	f7fe bd7f 	b.w	857da <_svfprintf_r+0x47a>
   86cdc:	2900      	cmp	r1, #0
   86cde:	d144      	bne.n	86d6a <_svfprintf_r+0x1a0a>
   86ce0:	2230      	movs	r2, #48	; 0x30
   86ce2:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   86ce6:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   86cea:	3330      	adds	r3, #48	; 0x30
   86cec:	f802 3b01 	strb.w	r3, [r2], #1
   86cf0:	ab24      	add	r3, sp, #144	; 0x90
   86cf2:	1ad3      	subs	r3, r2, r3
   86cf4:	931a      	str	r3, [sp, #104]	; 0x68
   86cf6:	f7ff ba87 	b.w	86208 <_svfprintf_r+0xea8>
   86cfa:	f106 020f 	add.w	r2, r6, #15
   86cfe:	2101      	movs	r1, #1
   86d00:	b2d2      	uxtb	r2, r2
   86d02:	f7ff ba41 	b.w	86188 <_svfprintf_r+0xe28>
   86d06:	f1c3 0301 	rsb	r3, r3, #1
   86d0a:	441a      	add	r2, r3
   86d0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86d10:	2667      	movs	r6, #103	; 0x67
   86d12:	920b      	str	r2, [sp, #44]	; 0x2c
   86d14:	9306      	str	r3, [sp, #24]
   86d16:	e5ba      	b.n	8688e <_svfprintf_r+0x152e>
   86d18:	f019 0f01 	tst.w	r9, #1
   86d1c:	f43f aa7f 	beq.w	8621e <_svfprintf_r+0xebe>
   86d20:	f7ff ba79 	b.w	86216 <_svfprintf_r+0xeb6>
   86d24:	9829      	ldr	r0, [sp, #164]	; 0xa4
   86d26:	f7ff bb7f 	b.w	86428 <_svfprintf_r+0x10c8>
   86d2a:	bf00      	nop
   86d2c:	0008bf00 	.word	0x0008bf00
   86d30:	40300000 	.word	0x40300000
   86d34:	3fe00000 	.word	0x3fe00000
   86d38:	0008bf30 	.word	0x0008bf30
   86d3c:	0008beec 	.word	0x0008beec
   86d40:	0008bee4 	.word	0x0008bee4
   86d44:	0008bee8 	.word	0x0008bee8
   86d48:	4658      	mov	r0, fp
   86d4a:	2200      	movs	r2, #0
   86d4c:	2300      	movs	r3, #0
   86d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86d50:	f004 fe72 	bl	8ba38 <__aeabi_dcmpeq>
   86d54:	2800      	cmp	r0, #0
   86d56:	f47f ade1 	bne.w	8691c <_svfprintf_r+0x15bc>
   86d5a:	9b07      	ldr	r3, [sp, #28]
   86d5c:	f1c3 0301 	rsb	r3, r3, #1
   86d60:	9322      	str	r3, [sp, #136]	; 0x88
   86d62:	e5dc      	b.n	8691e <_svfprintf_r+0x15be>
   86d64:	f8df 9098 	ldr.w	r9, [pc, #152]	; 86e00 <_svfprintf_r+0x1aa0>
   86d68:	e4ad      	b.n	866c6 <_svfprintf_r+0x1366>
   86d6a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   86d6e:	e7bc      	b.n	86cea <_svfprintf_r+0x198a>
   86d70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86d72:	f8df 908c 	ldr.w	r9, [pc, #140]	; 86e00 <_svfprintf_r+0x1aa0>
   86d76:	e428      	b.n	865ca <_svfprintf_r+0x126a>
   86d78:	9a07      	ldr	r2, [sp, #28]
   86d7a:	f009 0901 	and.w	r9, r9, #1
   86d7e:	ea59 0302 	orrs.w	r3, r9, r2
   86d82:	d104      	bne.n	86d8e <_svfprintf_r+0x1a2e>
   86d84:	2301      	movs	r3, #1
   86d86:	2666      	movs	r6, #102	; 0x66
   86d88:	9306      	str	r3, [sp, #24]
   86d8a:	930b      	str	r3, [sp, #44]	; 0x2c
   86d8c:	e57f      	b.n	8688e <_svfprintf_r+0x152e>
   86d8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86d90:	2666      	movs	r6, #102	; 0x66
   86d92:	3301      	adds	r3, #1
   86d94:	441a      	add	r2, r3
   86d96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86d9a:	920b      	str	r2, [sp, #44]	; 0x2c
   86d9c:	9306      	str	r3, [sp, #24]
   86d9e:	e576      	b.n	8688e <_svfprintf_r+0x152e>
   86da0:	900d      	str	r0, [sp, #52]	; 0x34
   86da2:	e6cd      	b.n	86b40 <_svfprintf_r+0x17e0>
   86da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86da6:	f89a 6001 	ldrb.w	r6, [sl, #1]
   86daa:	4692      	mov	sl, r2
   86dac:	f853 2b04 	ldr.w	r2, [r3], #4
   86db0:	930e      	str	r3, [sp, #56]	; 0x38
   86db2:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   86db6:	9307      	str	r3, [sp, #28]
   86db8:	f7fe bb21 	b.w	853fe <_svfprintf_r+0x9e>
   86dbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86dbe:	f8df 9040 	ldr.w	r9, [pc, #64]	; 86e00 <_svfprintf_r+0x1aa0>
   86dc2:	e4b1      	b.n	86728 <_svfprintf_r+0x13c8>
   86dc4:	9c07      	ldr	r4, [sp, #28]
   86dc6:	e706      	b.n	86bd6 <_svfprintf_r+0x1876>
   86dc8:	2300      	movs	r3, #0
   86dca:	930f      	str	r3, [sp, #60]	; 0x3c
   86dcc:	9313      	str	r3, [sp, #76]	; 0x4c
   86dce:	e73c      	b.n	86c4a <_svfprintf_r+0x18ea>
   86dd0:	f8df 902c 	ldr.w	r9, [pc, #44]	; 86e00 <_svfprintf_r+0x1aa0>
   86dd4:	e70a      	b.n	86bec <_svfprintf_r+0x188c>
   86dd6:	2302      	movs	r3, #2
   86dd8:	931a      	str	r3, [sp, #104]	; 0x68
   86dda:	f7ff ba15 	b.w	86208 <_svfprintf_r+0xea8>
   86dde:	990c      	ldr	r1, [sp, #48]	; 0x30
   86de0:	898b      	ldrh	r3, [r1, #12]
   86de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   86de6:	4613      	mov	r3, r2
   86de8:	818a      	strh	r2, [r1, #12]
   86dea:	f7fe bc24 	b.w	85636 <_svfprintf_r+0x2d6>
   86dee:	f04f 32ff 	mov.w	r2, #4294967295
   86df2:	230c      	movs	r3, #12
   86df4:	9208      	str	r2, [sp, #32]
   86df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86df8:	6013      	str	r3, [r2, #0]
   86dfa:	f7fe bc23 	b.w	85644 <_svfprintf_r+0x2e4>
   86dfe:	bf00      	nop
   86e00:	0008bf30 	.word	0x0008bf30

00086e04 <__sprint_r.part.0>:
   86e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e08:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   86e0a:	4690      	mov	r8, r2
   86e0c:	049c      	lsls	r4, r3, #18
   86e0e:	d52d      	bpl.n	86e6c <__sprint_r.part.0+0x68>
   86e10:	6893      	ldr	r3, [r2, #8]
   86e12:	6812      	ldr	r2, [r2, #0]
   86e14:	b343      	cbz	r3, 86e68 <__sprint_r.part.0+0x64>
   86e16:	468b      	mov	fp, r1
   86e18:	4606      	mov	r6, r0
   86e1a:	f102 0908 	add.w	r9, r2, #8
   86e1e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   86e22:	ea5f 079a 	movs.w	r7, sl, lsr #2
   86e26:	d015      	beq.n	86e54 <__sprint_r.part.0+0x50>
   86e28:	2400      	movs	r4, #0
   86e2a:	3d04      	subs	r5, #4
   86e2c:	e001      	b.n	86e32 <__sprint_r.part.0+0x2e>
   86e2e:	42a7      	cmp	r7, r4
   86e30:	d00e      	beq.n	86e50 <__sprint_r.part.0+0x4c>
   86e32:	465a      	mov	r2, fp
   86e34:	4630      	mov	r0, r6
   86e36:	f855 1f04 	ldr.w	r1, [r5, #4]!
   86e3a:	f002 f961 	bl	89100 <_fputwc_r>
   86e3e:	1c43      	adds	r3, r0, #1
   86e40:	f104 0401 	add.w	r4, r4, #1
   86e44:	d1f3      	bne.n	86e2e <__sprint_r.part.0+0x2a>
   86e46:	2300      	movs	r3, #0
   86e48:	e9c8 3301 	strd	r3, r3, [r8, #4]
   86e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e50:	f8d8 3008 	ldr.w	r3, [r8, #8]
   86e54:	f02a 0a03 	bic.w	sl, sl, #3
   86e58:	eba3 030a 	sub.w	r3, r3, sl
   86e5c:	f8c8 3008 	str.w	r3, [r8, #8]
   86e60:	f109 0908 	add.w	r9, r9, #8
   86e64:	2b00      	cmp	r3, #0
   86e66:	d1da      	bne.n	86e1e <__sprint_r.part.0+0x1a>
   86e68:	2000      	movs	r0, #0
   86e6a:	e7ec      	b.n	86e46 <__sprint_r.part.0+0x42>
   86e6c:	f002 facc 	bl	89408 <__sfvwrite_r>
   86e70:	2300      	movs	r3, #0
   86e72:	e9c8 3301 	strd	r3, r3, [r8, #4]
   86e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e7a:	bf00      	nop

00086e7c <_vfiprintf_r>:
   86e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e80:	b0bd      	sub	sp, #244	; 0xf4
   86e82:	461c      	mov	r4, r3
   86e84:	4617      	mov	r7, r2
   86e86:	e9cd 3005 	strd	r3, r0, [sp, #20]
   86e8a:	9102      	str	r1, [sp, #8]
   86e8c:	b118      	cbz	r0, 86e96 <_vfiprintf_r+0x1a>
   86e8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86e90:	2b00      	cmp	r3, #0
   86e92:	f000 8277 	beq.w	87384 <_vfiprintf_r+0x508>
   86e96:	9a02      	ldr	r2, [sp, #8]
   86e98:	6e53      	ldr	r3, [r2, #100]	; 0x64
   86e9a:	07de      	lsls	r6, r3, #31
   86e9c:	f140 8184 	bpl.w	871a8 <_vfiprintf_r+0x32c>
   86ea0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   86ea4:	b28a      	uxth	r2, r1
   86ea6:	0490      	lsls	r0, r2, #18
   86ea8:	d408      	bmi.n	86ebc <_vfiprintf_r+0x40>
   86eaa:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   86eae:	9902      	ldr	r1, [sp, #8]
   86eb0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   86eb2:	818a      	strh	r2, [r1, #12]
   86eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   86eb8:	b292      	uxth	r2, r2
   86eba:	664b      	str	r3, [r1, #100]	; 0x64
   86ebc:	0711      	lsls	r1, r2, #28
   86ebe:	f140 80ec 	bpl.w	8709a <_vfiprintf_r+0x21e>
   86ec2:	9b02      	ldr	r3, [sp, #8]
   86ec4:	691b      	ldr	r3, [r3, #16]
   86ec6:	2b00      	cmp	r3, #0
   86ec8:	f000 80e7 	beq.w	8709a <_vfiprintf_r+0x21e>
   86ecc:	f002 031a 	and.w	r3, r2, #26
   86ed0:	2b0a      	cmp	r3, #10
   86ed2:	f000 80f0 	beq.w	870b6 <_vfiprintf_r+0x23a>
   86ed6:	ab13      	add	r3, sp, #76	; 0x4c
   86ed8:	9310      	str	r3, [sp, #64]	; 0x40
   86eda:	2300      	movs	r3, #0
   86edc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   86ee0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   86ee4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   86ee8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   86eec:	9304      	str	r3, [sp, #16]
   86eee:	783b      	ldrb	r3, [r7, #0]
   86ef0:	2b00      	cmp	r3, #0
   86ef2:	f000 8146 	beq.w	87182 <_vfiprintf_r+0x306>
   86ef6:	463c      	mov	r4, r7
   86ef8:	e004      	b.n	86f04 <_vfiprintf_r+0x88>
   86efa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86efe:	2b00      	cmp	r3, #0
   86f00:	f000 8121 	beq.w	87146 <_vfiprintf_r+0x2ca>
   86f04:	2b25      	cmp	r3, #37	; 0x25
   86f06:	d1f8      	bne.n	86efa <_vfiprintf_r+0x7e>
   86f08:	1be5      	subs	r5, r4, r7
   86f0a:	f040 811e 	bne.w	8714a <_vfiprintf_r+0x2ce>
   86f0e:	7823      	ldrb	r3, [r4, #0]
   86f10:	2b00      	cmp	r3, #0
   86f12:	f000 8136 	beq.w	87182 <_vfiprintf_r+0x306>
   86f16:	f04f 0300 	mov.w	r3, #0
   86f1a:	2500      	movs	r5, #0
   86f1c:	f04f 3bff 	mov.w	fp, #4294967295
   86f20:	f04f 082b 	mov.w	r8, #43	; 0x2b
   86f24:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   86f28:	7863      	ldrb	r3, [r4, #1]
   86f2a:	9503      	str	r5, [sp, #12]
   86f2c:	1c67      	adds	r7, r4, #1
   86f2e:	3701      	adds	r7, #1
   86f30:	f1a3 0220 	sub.w	r2, r3, #32
   86f34:	2a5a      	cmp	r2, #90	; 0x5a
   86f36:	f200 8146 	bhi.w	871c6 <_vfiprintf_r+0x34a>
   86f3a:	e8df f012 	tbh	[pc, r2, lsl #1]
   86f3e:	02a1      	.short	0x02a1
   86f40:	01440144 	.word	0x01440144
   86f44:	0144029d 	.word	0x0144029d
   86f48:	01440144 	.word	0x01440144
   86f4c:	0144027c 	.word	0x0144027c
   86f50:	006a0144 	.word	0x006a0144
   86f54:	01440253 	.word	0x01440253
   86f58:	02af0229 	.word	0x02af0229
   86f5c:	02ab0144 	.word	0x02ab0144
   86f60:	005b005b 	.word	0x005b005b
   86f64:	005b005b 	.word	0x005b005b
   86f68:	005b005b 	.word	0x005b005b
   86f6c:	005b005b 	.word	0x005b005b
   86f70:	0144005b 	.word	0x0144005b
   86f74:	01440144 	.word	0x01440144
   86f78:	01440144 	.word	0x01440144
   86f7c:	01440144 	.word	0x01440144
   86f80:	01440144 	.word	0x01440144
   86f84:	00780213 	.word	0x00780213
   86f88:	01440144 	.word	0x01440144
   86f8c:	01440144 	.word	0x01440144
   86f90:	01440144 	.word	0x01440144
   86f94:	01440144 	.word	0x01440144
   86f98:	01440144 	.word	0x01440144
   86f9c:	014400d1 	.word	0x014400d1
   86fa0:	01440144 	.word	0x01440144
   86fa4:	014401f7 	.word	0x014401f7
   86fa8:	01440241 	.word	0x01440241
   86fac:	05210144 	.word	0x05210144
   86fb0:	01440144 	.word	0x01440144
   86fb4:	01440144 	.word	0x01440144
   86fb8:	01440144 	.word	0x01440144
   86fbc:	01440144 	.word	0x01440144
   86fc0:	01440144 	.word	0x01440144
   86fc4:	007a0213 	.word	0x007a0213
   86fc8:	01440144 	.word	0x01440144
   86fcc:	02370144 	.word	0x02370144
   86fd0:	0074007a 	.word	0x0074007a
   86fd4:	022d0144 	.word	0x022d0144
   86fd8:	02690144 	.word	0x02690144
   86fdc:	025700d3 	.word	0x025700d3
   86fe0:	01440074 	.word	0x01440074
   86fe4:	007201f7 	.word	0x007201f7
   86fe8:	01440541 	.word	0x01440541
   86fec:	05430144 	.word	0x05430144
   86ff0:	00720144 	.word	0x00720144
   86ff4:	2100      	movs	r1, #0
   86ff6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   86ffa:	f817 3b01 	ldrb.w	r3, [r7], #1
   86ffe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   87002:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   87006:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8700a:	2a09      	cmp	r2, #9
   8700c:	d9f5      	bls.n	86ffa <_vfiprintf_r+0x17e>
   8700e:	9103      	str	r1, [sp, #12]
   87010:	e78e      	b.n	86f30 <_vfiprintf_r+0xb4>
   87012:	9b05      	ldr	r3, [sp, #20]
   87014:	f853 2b04 	ldr.w	r2, [r3], #4
   87018:	2a00      	cmp	r2, #0
   8701a:	9203      	str	r2, [sp, #12]
   8701c:	9305      	str	r3, [sp, #20]
   8701e:	f2c0 81b4 	blt.w	8738a <_vfiprintf_r+0x50e>
   87022:	783b      	ldrb	r3, [r7, #0]
   87024:	e783      	b.n	86f2e <_vfiprintf_r+0xb2>
   87026:	783b      	ldrb	r3, [r7, #0]
   87028:	f045 0520 	orr.w	r5, r5, #32
   8702c:	e77f      	b.n	86f2e <_vfiprintf_r+0xb2>
   8702e:	f045 0510 	orr.w	r5, r5, #16
   87032:	06ac      	lsls	r4, r5, #26
   87034:	9e05      	ldr	r6, [sp, #20]
   87036:	f140 816b 	bpl.w	87310 <_vfiprintf_r+0x494>
   8703a:	3607      	adds	r6, #7
   8703c:	f026 0607 	bic.w	r6, r6, #7
   87040:	4632      	mov	r2, r6
   87042:	6873      	ldr	r3, [r6, #4]
   87044:	f852 6b08 	ldr.w	r6, [r2], #8
   87048:	4698      	mov	r8, r3
   8704a:	9205      	str	r2, [sp, #20]
   8704c:	2b00      	cmp	r3, #0
   8704e:	f2c0 8449 	blt.w	878e4 <_vfiprintf_r+0xa68>
   87052:	f1bb 3fff 	cmp.w	fp, #4294967295
   87056:	f000 8531 	beq.w	87abc <_vfiprintf_r+0xc40>
   8705a:	ea56 0308 	orrs.w	r3, r6, r8
   8705e:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   87062:	f000 8425 	beq.w	878b0 <_vfiprintf_r+0xa34>
   87066:	2e0a      	cmp	r6, #10
   87068:	f178 0300 	sbcs.w	r3, r8, #0
   8706c:	f080 84e1 	bcs.w	87a32 <_vfiprintf_r+0xbb6>
   87070:	2301      	movs	r3, #1
   87072:	4655      	mov	r5, sl
   87074:	3630      	adds	r6, #48	; 0x30
   87076:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   8707a:	9301      	str	r3, [sp, #4]
   8707c:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   87080:	f8dd 8004 	ldr.w	r8, [sp, #4]
   87084:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   87088:	45d8      	cmp	r8, fp
   8708a:	bfb8      	it	lt
   8708c:	46d8      	movlt	r8, fp
   8708e:	2b00      	cmp	r3, #0
   87090:	f000 80a8 	beq.w	871e4 <_vfiprintf_r+0x368>
   87094:	f108 0801 	add.w	r8, r8, #1
   87098:	e0a4      	b.n	871e4 <_vfiprintf_r+0x368>
   8709a:	9d02      	ldr	r5, [sp, #8]
   8709c:	9806      	ldr	r0, [sp, #24]
   8709e:	4629      	mov	r1, r5
   870a0:	f000 fdfa 	bl	87c98 <__swsetup_r>
   870a4:	2800      	cmp	r0, #0
   870a6:	f040 8594 	bne.w	87bd2 <_vfiprintf_r+0xd56>
   870aa:	89aa      	ldrh	r2, [r5, #12]
   870ac:	f002 031a 	and.w	r3, r2, #26
   870b0:	2b0a      	cmp	r3, #10
   870b2:	f47f af10 	bne.w	86ed6 <_vfiprintf_r+0x5a>
   870b6:	9902      	ldr	r1, [sp, #8]
   870b8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   870bc:	2b00      	cmp	r3, #0
   870be:	f6ff af0a 	blt.w	86ed6 <_vfiprintf_r+0x5a>
   870c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   870c4:	07de      	lsls	r6, r3, #31
   870c6:	d402      	bmi.n	870ce <_vfiprintf_r+0x252>
   870c8:	0595      	lsls	r5, r2, #22
   870ca:	f140 8562 	bpl.w	87b92 <_vfiprintf_r+0xd16>
   870ce:	4623      	mov	r3, r4
   870d0:	463a      	mov	r2, r7
   870d2:	9902      	ldr	r1, [sp, #8]
   870d4:	9806      	ldr	r0, [sp, #24]
   870d6:	b03d      	add	sp, #244	; 0xf4
   870d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870dc:	f000 bd9a 	b.w	87c14 <__sbprintf>
   870e0:	f045 0510 	orr.w	r5, r5, #16
   870e4:	f015 0820 	ands.w	r8, r5, #32
   870e8:	f000 8103 	beq.w	872f2 <_vfiprintf_r+0x476>
   870ec:	9e05      	ldr	r6, [sp, #20]
   870ee:	3607      	adds	r6, #7
   870f0:	f026 0607 	bic.w	r6, r6, #7
   870f4:	4633      	mov	r3, r6
   870f6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   870fa:	f853 6b08 	ldr.w	r6, [r3], #8
   870fe:	9305      	str	r3, [sp, #20]
   87100:	2300      	movs	r3, #0
   87102:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   87106:	f04f 0200 	mov.w	r2, #0
   8710a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   8710e:	f1bb 3fff 	cmp.w	fp, #4294967295
   87112:	f000 81dd 	beq.w	874d0 <_vfiprintf_r+0x654>
   87116:	ea56 0208 	orrs.w	r2, r6, r8
   8711a:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   8711e:	f040 81d6 	bne.w	874ce <_vfiprintf_r+0x652>
   87122:	f1bb 0f00 	cmp.w	fp, #0
   87126:	f040 84cc 	bne.w	87ac2 <_vfiprintf_r+0xc46>
   8712a:	2b00      	cmp	r3, #0
   8712c:	f040 83c5 	bne.w	878ba <_vfiprintf_r+0xa3e>
   87130:	f01a 0301 	ands.w	r3, sl, #1
   87134:	9301      	str	r3, [sp, #4]
   87136:	f000 83ec 	beq.w	87912 <_vfiprintf_r+0xa96>
   8713a:	2330      	movs	r3, #48	; 0x30
   8713c:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   87140:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   87144:	e79c      	b.n	87080 <_vfiprintf_r+0x204>
   87146:	1be5      	subs	r5, r4, r7
   87148:	d01b      	beq.n	87182 <_vfiprintf_r+0x306>
   8714a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8714c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8714e:	3301      	adds	r3, #1
   87150:	442a      	add	r2, r5
   87152:	2b07      	cmp	r3, #7
   87154:	e9c9 7500 	strd	r7, r5, [r9]
   87158:	9212      	str	r2, [sp, #72]	; 0x48
   8715a:	9311      	str	r3, [sp, #68]	; 0x44
   8715c:	dc05      	bgt.n	8716a <_vfiprintf_r+0x2ee>
   8715e:	f109 0908 	add.w	r9, r9, #8
   87162:	9b04      	ldr	r3, [sp, #16]
   87164:	442b      	add	r3, r5
   87166:	9304      	str	r3, [sp, #16]
   87168:	e6d1      	b.n	86f0e <_vfiprintf_r+0x92>
   8716a:	2a00      	cmp	r2, #0
   8716c:	f000 839c 	beq.w	878a8 <_vfiprintf_r+0xa2c>
   87170:	9902      	ldr	r1, [sp, #8]
   87172:	9806      	ldr	r0, [sp, #24]
   87174:	aa10      	add	r2, sp, #64	; 0x40
   87176:	f7ff fe45 	bl	86e04 <__sprint_r.part.0>
   8717a:	b940      	cbnz	r0, 8718e <_vfiprintf_r+0x312>
   8717c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87180:	e7ef      	b.n	87162 <_vfiprintf_r+0x2e6>
   87182:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87184:	2b00      	cmp	r3, #0
   87186:	f040 8515 	bne.w	87bb4 <_vfiprintf_r+0xd38>
   8718a:	2300      	movs	r3, #0
   8718c:	9311      	str	r3, [sp, #68]	; 0x44
   8718e:	9a02      	ldr	r2, [sp, #8]
   87190:	6e53      	ldr	r3, [r2, #100]	; 0x64
   87192:	07d9      	lsls	r1, r3, #31
   87194:	f140 80a2 	bpl.w	872dc <_vfiprintf_r+0x460>
   87198:	8993      	ldrh	r3, [r2, #12]
   8719a:	065b      	lsls	r3, r3, #25
   8719c:	f100 8525 	bmi.w	87bea <_vfiprintf_r+0xd6e>
   871a0:	9804      	ldr	r0, [sp, #16]
   871a2:	b03d      	add	sp, #244	; 0xf4
   871a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   871a8:	9b02      	ldr	r3, [sp, #8]
   871aa:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   871ae:	058d      	lsls	r5, r1, #22
   871b0:	b28a      	uxth	r2, r1
   871b2:	f53f ae78 	bmi.w	86ea6 <_vfiprintf_r+0x2a>
   871b6:	461d      	mov	r5, r3
   871b8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   871ba:	f002 facf 	bl	8975c <__retarget_lock_acquire_recursive>
   871be:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   871c2:	b28a      	uxth	r2, r1
   871c4:	e66f      	b.n	86ea6 <_vfiprintf_r+0x2a>
   871c6:	2b00      	cmp	r3, #0
   871c8:	d0db      	beq.n	87182 <_vfiprintf_r+0x306>
   871ca:	f04f 0801 	mov.w	r8, #1
   871ce:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   871d2:	f04f 0300 	mov.w	r3, #0
   871d6:	ac23      	add	r4, sp, #140	; 0x8c
   871d8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   871dc:	f8cd 8004 	str.w	r8, [sp, #4]
   871e0:	f04f 0b00 	mov.w	fp, #0
   871e4:	f015 0302 	ands.w	r3, r5, #2
   871e8:	9307      	str	r3, [sp, #28]
   871ea:	bf18      	it	ne
   871ec:	f108 0802 	addne.w	r8, r8, #2
   871f0:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   871f4:	9308      	str	r3, [sp, #32]
   871f6:	d105      	bne.n	87204 <_vfiprintf_r+0x388>
   871f8:	9b03      	ldr	r3, [sp, #12]
   871fa:	eba3 0608 	sub.w	r6, r3, r8
   871fe:	2e00      	cmp	r6, #0
   87200:	f300 828a 	bgt.w	87718 <_vfiprintf_r+0x89c>
   87204:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87208:	1c48      	adds	r0, r1, #1
   8720a:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   8720e:	b176      	cbz	r6, 8722e <_vfiprintf_r+0x3b2>
   87210:	2101      	movs	r1, #1
   87212:	3201      	adds	r2, #1
   87214:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   87218:	2807      	cmp	r0, #7
   8721a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8721e:	e9c9 6100 	strd	r6, r1, [r9]
   87222:	f300 8258 	bgt.w	876d6 <_vfiprintf_r+0x85a>
   87226:	4601      	mov	r1, r0
   87228:	f109 0908 	add.w	r9, r9, #8
   8722c:	3001      	adds	r0, #1
   8722e:	9b07      	ldr	r3, [sp, #28]
   87230:	b1d3      	cbz	r3, 87268 <_vfiprintf_r+0x3ec>
   87232:	2302      	movs	r3, #2
   87234:	3202      	adds	r2, #2
   87236:	f8c9 3004 	str.w	r3, [r9, #4]
   8723a:	2807      	cmp	r0, #7
   8723c:	ab0f      	add	r3, sp, #60	; 0x3c
   8723e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87242:	f8c9 3000 	str.w	r3, [r9]
   87246:	f340 8262 	ble.w	8770e <_vfiprintf_r+0x892>
   8724a:	2a00      	cmp	r2, #0
   8724c:	f000 8327 	beq.w	8789e <_vfiprintf_r+0xa22>
   87250:	9902      	ldr	r1, [sp, #8]
   87252:	9806      	ldr	r0, [sp, #24]
   87254:	aa10      	add	r2, sp, #64	; 0x40
   87256:	f7ff fdd5 	bl	86e04 <__sprint_r.part.0>
   8725a:	2800      	cmp	r0, #0
   8725c:	d197      	bne.n	8718e <_vfiprintf_r+0x312>
   8725e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87262:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87266:	1c48      	adds	r0, r1, #1
   87268:	9b08      	ldr	r3, [sp, #32]
   8726a:	2b80      	cmp	r3, #128	; 0x80
   8726c:	f000 8171 	beq.w	87552 <_vfiprintf_r+0x6d6>
   87270:	9b01      	ldr	r3, [sp, #4]
   87272:	ebab 0603 	sub.w	r6, fp, r3
   87276:	2e00      	cmp	r6, #0
   87278:	f300 81cf 	bgt.w	8761a <_vfiprintf_r+0x79e>
   8727c:	9b01      	ldr	r3, [sp, #4]
   8727e:	2807      	cmp	r0, #7
   87280:	441a      	add	r2, r3
   87282:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87286:	f8c9 4000 	str.w	r4, [r9]
   8728a:	f8c9 3004 	str.w	r3, [r9, #4]
   8728e:	f340 815d 	ble.w	8754c <_vfiprintf_r+0x6d0>
   87292:	2a00      	cmp	r2, #0
   87294:	f000 8293 	beq.w	877be <_vfiprintf_r+0x942>
   87298:	9902      	ldr	r1, [sp, #8]
   8729a:	9806      	ldr	r0, [sp, #24]
   8729c:	aa10      	add	r2, sp, #64	; 0x40
   8729e:	f7ff fdb1 	bl	86e04 <__sprint_r.part.0>
   872a2:	2800      	cmp	r0, #0
   872a4:	f47f af73 	bne.w	8718e <_vfiprintf_r+0x312>
   872a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   872aa:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   872ae:	0768      	lsls	r0, r5, #29
   872b0:	d505      	bpl.n	872be <_vfiprintf_r+0x442>
   872b2:	9b03      	ldr	r3, [sp, #12]
   872b4:	eba3 0408 	sub.w	r4, r3, r8
   872b8:	2c00      	cmp	r4, #0
   872ba:	f300 828a 	bgt.w	877d2 <_vfiprintf_r+0x956>
   872be:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   872c2:	4541      	cmp	r1, r8
   872c4:	bfac      	ite	ge
   872c6:	185b      	addge	r3, r3, r1
   872c8:	4443      	addlt	r3, r8
   872ca:	9304      	str	r3, [sp, #16]
   872cc:	2a00      	cmp	r2, #0
   872ce:	f040 81f3 	bne.w	876b8 <_vfiprintf_r+0x83c>
   872d2:	2300      	movs	r3, #0
   872d4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   872d8:	9311      	str	r3, [sp, #68]	; 0x44
   872da:	e608      	b.n	86eee <_vfiprintf_r+0x72>
   872dc:	9b02      	ldr	r3, [sp, #8]
   872de:	899b      	ldrh	r3, [r3, #12]
   872e0:	059a      	lsls	r2, r3, #22
   872e2:	f53f af5a 	bmi.w	8719a <_vfiprintf_r+0x31e>
   872e6:	9c02      	ldr	r4, [sp, #8]
   872e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   872ea:	f002 fa39 	bl	89760 <__retarget_lock_release_recursive>
   872ee:	89a3      	ldrh	r3, [r4, #12]
   872f0:	e753      	b.n	8719a <_vfiprintf_r+0x31e>
   872f2:	f015 0310 	ands.w	r3, r5, #16
   872f6:	f040 8318 	bne.w	8792a <_vfiprintf_r+0xaae>
   872fa:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   872fe:	f000 8310 	beq.w	87922 <_vfiprintf_r+0xaa6>
   87302:	9e05      	ldr	r6, [sp, #20]
   87304:	4698      	mov	r8, r3
   87306:	f856 3b04 	ldr.w	r3, [r6], #4
   8730a:	9605      	str	r6, [sp, #20]
   8730c:	b29e      	uxth	r6, r3
   8730e:	e6f7      	b.n	87100 <_vfiprintf_r+0x284>
   87310:	f856 3b04 	ldr.w	r3, [r6], #4
   87314:	06e8      	lsls	r0, r5, #27
   87316:	9605      	str	r6, [sp, #20]
   87318:	f100 8310 	bmi.w	8793c <_vfiprintf_r+0xac0>
   8731c:	0669      	lsls	r1, r5, #25
   8731e:	f140 830a 	bpl.w	87936 <_vfiprintf_r+0xaba>
   87322:	f343 38c0 	sbfx	r8, r3, #15, #1
   87326:	b21e      	sxth	r6, r3
   87328:	4643      	mov	r3, r8
   8732a:	e68f      	b.n	8704c <_vfiprintf_r+0x1d0>
   8732c:	f04f 0300 	mov.w	r3, #0
   87330:	9e05      	ldr	r6, [sp, #20]
   87332:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87336:	f856 4b04 	ldr.w	r4, [r6], #4
   8733a:	2c00      	cmp	r4, #0
   8733c:	f000 83cf 	beq.w	87ade <_vfiprintf_r+0xc62>
   87340:	f1bb 3fff 	cmp.w	fp, #4294967295
   87344:	f000 8341 	beq.w	879ca <_vfiprintf_r+0xb4e>
   87348:	465a      	mov	r2, fp
   8734a:	2100      	movs	r1, #0
   8734c:	4620      	mov	r0, r4
   8734e:	f002 fd73 	bl	89e38 <memchr>
   87352:	2800      	cmp	r0, #0
   87354:	f000 8422 	beq.w	87b9c <_vfiprintf_r+0xd20>
   87358:	1b03      	subs	r3, r0, r4
   8735a:	f04f 0b00 	mov.w	fp, #0
   8735e:	9605      	str	r6, [sp, #20]
   87360:	9301      	str	r3, [sp, #4]
   87362:	e68d      	b.n	87080 <_vfiprintf_r+0x204>
   87364:	f04f 0300 	mov.w	r3, #0
   87368:	f04f 0801 	mov.w	r8, #1
   8736c:	9e05      	ldr	r6, [sp, #20]
   8736e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87372:	f856 3b04 	ldr.w	r3, [r6], #4
   87376:	ac23      	add	r4, sp, #140	; 0x8c
   87378:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8737c:	9605      	str	r6, [sp, #20]
   8737e:	f8cd 8004 	str.w	r8, [sp, #4]
   87382:	e72d      	b.n	871e0 <_vfiprintf_r+0x364>
   87384:	f001 fdc4 	bl	88f10 <__sinit>
   87388:	e585      	b.n	86e96 <_vfiprintf_r+0x1a>
   8738a:	9b03      	ldr	r3, [sp, #12]
   8738c:	425b      	negs	r3, r3
   8738e:	9303      	str	r3, [sp, #12]
   87390:	783b      	ldrb	r3, [r7, #0]
   87392:	f045 0504 	orr.w	r5, r5, #4
   87396:	e5ca      	b.n	86f2e <_vfiprintf_r+0xb2>
   87398:	783b      	ldrb	r3, [r7, #0]
   8739a:	2b6c      	cmp	r3, #108	; 0x6c
   8739c:	bf03      	ittte	eq
   8739e:	787b      	ldrbeq	r3, [r7, #1]
   873a0:	f045 0520 	orreq.w	r5, r5, #32
   873a4:	3701      	addeq	r7, #1
   873a6:	f045 0510 	orrne.w	r5, r5, #16
   873aa:	e5c0      	b.n	86f2e <_vfiprintf_r+0xb2>
   873ac:	783b      	ldrb	r3, [r7, #0]
   873ae:	2b68      	cmp	r3, #104	; 0x68
   873b0:	bf03      	ittte	eq
   873b2:	787b      	ldrbeq	r3, [r7, #1]
   873b4:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   873b8:	3701      	addeq	r7, #1
   873ba:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   873be:	e5b6      	b.n	86f2e <_vfiprintf_r+0xb2>
   873c0:	f045 0a10 	orr.w	sl, r5, #16
   873c4:	f01a 0820 	ands.w	r8, sl, #32
   873c8:	f000 827e 	beq.w	878c8 <_vfiprintf_r+0xa4c>
   873cc:	9e05      	ldr	r6, [sp, #20]
   873ce:	2301      	movs	r3, #1
   873d0:	3607      	adds	r6, #7
   873d2:	f026 0607 	bic.w	r6, r6, #7
   873d6:	4632      	mov	r2, r6
   873d8:	f8d6 8004 	ldr.w	r8, [r6, #4]
   873dc:	f852 6b08 	ldr.w	r6, [r2], #8
   873e0:	9205      	str	r2, [sp, #20]
   873e2:	e690      	b.n	87106 <_vfiprintf_r+0x28a>
   873e4:	783b      	ldrb	r3, [r7, #0]
   873e6:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   873ea:	e5a0      	b.n	86f2e <_vfiprintf_r+0xb2>
   873ec:	2230      	movs	r2, #48	; 0x30
   873ee:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   873f2:	2278      	movs	r2, #120	; 0x78
   873f4:	9b05      	ldr	r3, [sp, #20]
   873f6:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   873fa:	f853 6b04 	ldr.w	r6, [r3], #4
   873fe:	4abe      	ldr	r2, [pc, #760]	; (876f8 <_vfiprintf_r+0x87c>)
   87400:	9305      	str	r3, [sp, #20]
   87402:	f04f 0800 	mov.w	r8, #0
   87406:	2302      	movs	r3, #2
   87408:	f045 0a02 	orr.w	sl, r5, #2
   8740c:	9209      	str	r2, [sp, #36]	; 0x24
   8740e:	e67a      	b.n	87106 <_vfiprintf_r+0x28a>
   87410:	06ae      	lsls	r6, r5, #26
   87412:	f100 82a4 	bmi.w	8795e <_vfiprintf_r+0xae2>
   87416:	06ec      	lsls	r4, r5, #27
   87418:	f100 8359 	bmi.w	87ace <_vfiprintf_r+0xc52>
   8741c:	0668      	lsls	r0, r5, #25
   8741e:	f100 83b0 	bmi.w	87b82 <_vfiprintf_r+0xd06>
   87422:	05a9      	lsls	r1, r5, #22
   87424:	f140 8353 	bpl.w	87ace <_vfiprintf_r+0xc52>
   87428:	9e05      	ldr	r6, [sp, #20]
   8742a:	9a04      	ldr	r2, [sp, #16]
   8742c:	f856 3b04 	ldr.w	r3, [r6], #4
   87430:	701a      	strb	r2, [r3, #0]
   87432:	9605      	str	r6, [sp, #20]
   87434:	e55b      	b.n	86eee <_vfiprintf_r+0x72>
   87436:	9c06      	ldr	r4, [sp, #24]
   87438:	4620      	mov	r0, r4
   8743a:	f002 f987 	bl	8974c <_localeconv_r>
   8743e:	6843      	ldr	r3, [r0, #4]
   87440:	4618      	mov	r0, r3
   87442:	930b      	str	r3, [sp, #44]	; 0x2c
   87444:	f7fd ff2a 	bl	8529c <strlen>
   87448:	4603      	mov	r3, r0
   8744a:	4620      	mov	r0, r4
   8744c:	930c      	str	r3, [sp, #48]	; 0x30
   8744e:	461c      	mov	r4, r3
   87450:	f002 f97c 	bl	8974c <_localeconv_r>
   87454:	6883      	ldr	r3, [r0, #8]
   87456:	930a      	str	r3, [sp, #40]	; 0x28
   87458:	2c00      	cmp	r4, #0
   8745a:	f43f ade2 	beq.w	87022 <_vfiprintf_r+0x1a6>
   8745e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87460:	2b00      	cmp	r3, #0
   87462:	f43f adde 	beq.w	87022 <_vfiprintf_r+0x1a6>
   87466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87468:	781b      	ldrb	r3, [r3, #0]
   8746a:	2b00      	cmp	r3, #0
   8746c:	f43f add9 	beq.w	87022 <_vfiprintf_r+0x1a6>
   87470:	783b      	ldrb	r3, [r7, #0]
   87472:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   87476:	e55a      	b.n	86f2e <_vfiprintf_r+0xb2>
   87478:	783b      	ldrb	r3, [r7, #0]
   8747a:	f045 0501 	orr.w	r5, r5, #1
   8747e:	e556      	b.n	86f2e <_vfiprintf_r+0xb2>
   87480:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   87484:	2b00      	cmp	r3, #0
   87486:	f47f adcc 	bne.w	87022 <_vfiprintf_r+0x1a6>
   8748a:	2320      	movs	r3, #32
   8748c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   87490:	783b      	ldrb	r3, [r7, #0]
   87492:	e54c      	b.n	86f2e <_vfiprintf_r+0xb2>
   87494:	783b      	ldrb	r3, [r7, #0]
   87496:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   8749a:	e548      	b.n	86f2e <_vfiprintf_r+0xb2>
   8749c:	4639      	mov	r1, r7
   8749e:	f811 3b01 	ldrb.w	r3, [r1], #1
   874a2:	2b2a      	cmp	r3, #42	; 0x2a
   874a4:	f000 83a6 	beq.w	87bf4 <_vfiprintf_r+0xd78>
   874a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   874ac:	2a09      	cmp	r2, #9
   874ae:	460f      	mov	r7, r1
   874b0:	f04f 0b00 	mov.w	fp, #0
   874b4:	f63f ad3c 	bhi.w	86f30 <_vfiprintf_r+0xb4>
   874b8:	f817 3b01 	ldrb.w	r3, [r7], #1
   874bc:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   874c0:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   874c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   874c8:	2a09      	cmp	r2, #9
   874ca:	d9f5      	bls.n	874b8 <_vfiprintf_r+0x63c>
   874cc:	e530      	b.n	86f30 <_vfiprintf_r+0xb4>
   874ce:	46aa      	mov	sl, r5
   874d0:	2b01      	cmp	r3, #1
   874d2:	f43f adc8 	beq.w	87066 <_vfiprintf_r+0x1ea>
   874d6:	2b02      	cmp	r3, #2
   874d8:	ac3c      	add	r4, sp, #240	; 0xf0
   874da:	d112      	bne.n	87502 <_vfiprintf_r+0x686>
   874dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   874de:	f006 030f 	and.w	r3, r6, #15
   874e2:	5cd3      	ldrb	r3, [r2, r3]
   874e4:	0936      	lsrs	r6, r6, #4
   874e6:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   874ea:	ea4f 1818 	mov.w	r8, r8, lsr #4
   874ee:	f804 3d01 	strb.w	r3, [r4, #-1]!
   874f2:	ea56 0308 	orrs.w	r3, r6, r8
   874f6:	d1f2      	bne.n	874de <_vfiprintf_r+0x662>
   874f8:	ab3c      	add	r3, sp, #240	; 0xf0
   874fa:	1b1b      	subs	r3, r3, r4
   874fc:	4655      	mov	r5, sl
   874fe:	9301      	str	r3, [sp, #4]
   87500:	e5be      	b.n	87080 <_vfiprintf_r+0x204>
   87502:	f006 0307 	and.w	r3, r6, #7
   87506:	08f6      	lsrs	r6, r6, #3
   87508:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   8750c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   87510:	3330      	adds	r3, #48	; 0x30
   87512:	ea56 0108 	orrs.w	r1, r6, r8
   87516:	4622      	mov	r2, r4
   87518:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8751c:	d1f1      	bne.n	87502 <_vfiprintf_r+0x686>
   8751e:	f01a 0f01 	tst.w	sl, #1
   87522:	d0e9      	beq.n	874f8 <_vfiprintf_r+0x67c>
   87524:	2b30      	cmp	r3, #48	; 0x30
   87526:	d0e7      	beq.n	874f8 <_vfiprintf_r+0x67c>
   87528:	2330      	movs	r3, #48	; 0x30
   8752a:	3a02      	subs	r2, #2
   8752c:	f804 3c01 	strb.w	r3, [r4, #-1]
   87530:	ab3c      	add	r3, sp, #240	; 0xf0
   87532:	1a9b      	subs	r3, r3, r2
   87534:	4655      	mov	r5, sl
   87536:	4614      	mov	r4, r2
   87538:	9301      	str	r3, [sp, #4]
   8753a:	e5a1      	b.n	87080 <_vfiprintf_r+0x204>
   8753c:	2301      	movs	r3, #1
   8753e:	9a01      	ldr	r2, [sp, #4]
   87540:	9413      	str	r4, [sp, #76]	; 0x4c
   87542:	9311      	str	r3, [sp, #68]	; 0x44
   87544:	9214      	str	r2, [sp, #80]	; 0x50
   87546:	9212      	str	r2, [sp, #72]	; 0x48
   87548:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8754c:	f109 0908 	add.w	r9, r9, #8
   87550:	e6ad      	b.n	872ae <_vfiprintf_r+0x432>
   87552:	9b03      	ldr	r3, [sp, #12]
   87554:	eba3 0608 	sub.w	r6, r3, r8
   87558:	2e00      	cmp	r6, #0
   8755a:	f77f ae89 	ble.w	87270 <_vfiprintf_r+0x3f4>
   8755e:	2e10      	cmp	r6, #16
   87560:	f8df a198 	ldr.w	sl, [pc, #408]	; 876fc <_vfiprintf_r+0x880>
   87564:	dd38      	ble.n	875d8 <_vfiprintf_r+0x75c>
   87566:	4653      	mov	r3, sl
   87568:	46cc      	mov	ip, r9
   8756a:	46ba      	mov	sl, r7
   8756c:	46c1      	mov	r9, r8
   8756e:	9407      	str	r4, [sp, #28]
   87570:	46a8      	mov	r8, r5
   87572:	461f      	mov	r7, r3
   87574:	9c06      	ldr	r4, [sp, #24]
   87576:	9d02      	ldr	r5, [sp, #8]
   87578:	e007      	b.n	8758a <_vfiprintf_r+0x70e>
   8757a:	f101 0e02 	add.w	lr, r1, #2
   8757e:	4601      	mov	r1, r0
   87580:	f10c 0c08 	add.w	ip, ip, #8
   87584:	3e10      	subs	r6, #16
   87586:	2e10      	cmp	r6, #16
   87588:	dd1e      	ble.n	875c8 <_vfiprintf_r+0x74c>
   8758a:	2310      	movs	r3, #16
   8758c:	1c48      	adds	r0, r1, #1
   8758e:	3210      	adds	r2, #16
   87590:	2807      	cmp	r0, #7
   87592:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87596:	f8cc 7000 	str.w	r7, [ip]
   8759a:	f8cc 3004 	str.w	r3, [ip, #4]
   8759e:	ddec      	ble.n	8757a <_vfiprintf_r+0x6fe>
   875a0:	2a00      	cmp	r2, #0
   875a2:	f000 8092 	beq.w	876ca <_vfiprintf_r+0x84e>
   875a6:	4629      	mov	r1, r5
   875a8:	4620      	mov	r0, r4
   875aa:	aa10      	add	r2, sp, #64	; 0x40
   875ac:	f7ff fc2a 	bl	86e04 <__sprint_r.part.0>
   875b0:	2800      	cmp	r0, #0
   875b2:	f47f adec 	bne.w	8718e <_vfiprintf_r+0x312>
   875b6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   875ba:	3e10      	subs	r6, #16
   875bc:	2e10      	cmp	r6, #16
   875be:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   875c2:	f101 0e01 	add.w	lr, r1, #1
   875c6:	dce0      	bgt.n	8758a <_vfiprintf_r+0x70e>
   875c8:	463b      	mov	r3, r7
   875ca:	4645      	mov	r5, r8
   875cc:	4657      	mov	r7, sl
   875ce:	46c8      	mov	r8, r9
   875d0:	4670      	mov	r0, lr
   875d2:	46e1      	mov	r9, ip
   875d4:	469a      	mov	sl, r3
   875d6:	9c07      	ldr	r4, [sp, #28]
   875d8:	4432      	add	r2, r6
   875da:	2807      	cmp	r0, #7
   875dc:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   875e0:	f8c9 a000 	str.w	sl, [r9]
   875e4:	f8c9 6004 	str.w	r6, [r9, #4]
   875e8:	f340 8196 	ble.w	87918 <_vfiprintf_r+0xa9c>
   875ec:	2a00      	cmp	r2, #0
   875ee:	f000 829a 	beq.w	87b26 <_vfiprintf_r+0xcaa>
   875f2:	9902      	ldr	r1, [sp, #8]
   875f4:	9806      	ldr	r0, [sp, #24]
   875f6:	aa10      	add	r2, sp, #64	; 0x40
   875f8:	f7ff fc04 	bl	86e04 <__sprint_r.part.0>
   875fc:	2800      	cmp	r0, #0
   875fe:	f47f adc6 	bne.w	8718e <_vfiprintf_r+0x312>
   87602:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87606:	9b01      	ldr	r3, [sp, #4]
   87608:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8760c:	ebab 0603 	sub.w	r6, fp, r3
   87610:	2e00      	cmp	r6, #0
   87612:	f101 0001 	add.w	r0, r1, #1
   87616:	f77f ae31 	ble.w	8727c <_vfiprintf_r+0x400>
   8761a:	2e10      	cmp	r6, #16
   8761c:	f340 826b 	ble.w	87af6 <_vfiprintf_r+0xc7a>
   87620:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 876fc <_vfiprintf_r+0x880>
   87624:	46cc      	mov	ip, r9
   87626:	4653      	mov	r3, sl
   87628:	46c1      	mov	r9, r8
   8762a:	46ba      	mov	sl, r7
   8762c:	46a8      	mov	r8, r5
   8762e:	9407      	str	r4, [sp, #28]
   87630:	f04f 0b10 	mov.w	fp, #16
   87634:	461f      	mov	r7, r3
   87636:	9c06      	ldr	r4, [sp, #24]
   87638:	9d02      	ldr	r5, [sp, #8]
   8763a:	e007      	b.n	8764c <_vfiprintf_r+0x7d0>
   8763c:	f101 0e02 	add.w	lr, r1, #2
   87640:	4601      	mov	r1, r0
   87642:	f10c 0c08 	add.w	ip, ip, #8
   87646:	3e10      	subs	r6, #16
   87648:	2e10      	cmp	r6, #16
   8764a:	dd19      	ble.n	87680 <_vfiprintf_r+0x804>
   8764c:	1c48      	adds	r0, r1, #1
   8764e:	3210      	adds	r2, #16
   87650:	2807      	cmp	r0, #7
   87652:	e9cc 7b00 	strd	r7, fp, [ip]
   87656:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8765a:	ddef      	ble.n	8763c <_vfiprintf_r+0x7c0>
   8765c:	b332      	cbz	r2, 876ac <_vfiprintf_r+0x830>
   8765e:	4629      	mov	r1, r5
   87660:	4620      	mov	r0, r4
   87662:	aa10      	add	r2, sp, #64	; 0x40
   87664:	f7ff fbce 	bl	86e04 <__sprint_r.part.0>
   87668:	2800      	cmp	r0, #0
   8766a:	f47f ad90 	bne.w	8718e <_vfiprintf_r+0x312>
   8766e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87672:	3e10      	subs	r6, #16
   87674:	2e10      	cmp	r6, #16
   87676:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8767a:	f101 0e01 	add.w	lr, r1, #1
   8767e:	dce5      	bgt.n	8764c <_vfiprintf_r+0x7d0>
   87680:	463b      	mov	r3, r7
   87682:	4645      	mov	r5, r8
   87684:	4657      	mov	r7, sl
   87686:	46c8      	mov	r8, r9
   87688:	4670      	mov	r0, lr
   8768a:	46e1      	mov	r9, ip
   8768c:	469a      	mov	sl, r3
   8768e:	9c07      	ldr	r4, [sp, #28]
   87690:	4432      	add	r2, r6
   87692:	2807      	cmp	r0, #7
   87694:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87698:	f8c9 a000 	str.w	sl, [r9]
   8769c:	f8c9 6004 	str.w	r6, [r9, #4]
   876a0:	f300 80e9 	bgt.w	87876 <_vfiprintf_r+0x9fa>
   876a4:	f109 0908 	add.w	r9, r9, #8
   876a8:	3001      	adds	r0, #1
   876aa:	e5e7      	b.n	8727c <_vfiprintf_r+0x400>
   876ac:	f04f 0e01 	mov.w	lr, #1
   876b0:	4611      	mov	r1, r2
   876b2:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   876b6:	e7c6      	b.n	87646 <_vfiprintf_r+0x7ca>
   876b8:	9902      	ldr	r1, [sp, #8]
   876ba:	9806      	ldr	r0, [sp, #24]
   876bc:	aa10      	add	r2, sp, #64	; 0x40
   876be:	f7ff fba1 	bl	86e04 <__sprint_r.part.0>
   876c2:	2800      	cmp	r0, #0
   876c4:	f43f ae05 	beq.w	872d2 <_vfiprintf_r+0x456>
   876c8:	e561      	b.n	8718e <_vfiprintf_r+0x312>
   876ca:	f04f 0e01 	mov.w	lr, #1
   876ce:	4611      	mov	r1, r2
   876d0:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   876d4:	e756      	b.n	87584 <_vfiprintf_r+0x708>
   876d6:	2a00      	cmp	r2, #0
   876d8:	f000 80de 	beq.w	87898 <_vfiprintf_r+0xa1c>
   876dc:	9902      	ldr	r1, [sp, #8]
   876de:	9806      	ldr	r0, [sp, #24]
   876e0:	aa10      	add	r2, sp, #64	; 0x40
   876e2:	f7ff fb8f 	bl	86e04 <__sprint_r.part.0>
   876e6:	2800      	cmp	r0, #0
   876e8:	f47f ad51 	bne.w	8718e <_vfiprintf_r+0x312>
   876ec:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   876f0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   876f4:	1c48      	adds	r0, r1, #1
   876f6:	e59a      	b.n	8722e <_vfiprintf_r+0x3b2>
   876f8:	0008beec 	.word	0x0008beec
   876fc:	0008bf50 	.word	0x0008bf50
   87700:	2202      	movs	r2, #2
   87702:	2001      	movs	r0, #1
   87704:	ab0f      	add	r3, sp, #60	; 0x3c
   87706:	9313      	str	r3, [sp, #76]	; 0x4c
   87708:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8770c:	9214      	str	r2, [sp, #80]	; 0x50
   8770e:	4601      	mov	r1, r0
   87710:	f109 0908 	add.w	r9, r9, #8
   87714:	1c48      	adds	r0, r1, #1
   87716:	e5a7      	b.n	87268 <_vfiprintf_r+0x3ec>
   87718:	2e10      	cmp	r6, #16
   8771a:	f340 8245 	ble.w	87ba8 <_vfiprintf_r+0xd2c>
   8771e:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   87722:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 87a14 <_vfiprintf_r+0xb98>
   87726:	4619      	mov	r1, r3
   87728:	4653      	mov	r3, sl
   8772a:	46cc      	mov	ip, r9
   8772c:	46ba      	mov	sl, r7
   8772e:	46c1      	mov	r9, r8
   87730:	940d      	str	r4, [sp, #52]	; 0x34
   87732:	46a8      	mov	r8, r5
   87734:	461f      	mov	r7, r3
   87736:	9c06      	ldr	r4, [sp, #24]
   87738:	9d02      	ldr	r5, [sp, #8]
   8773a:	e007      	b.n	8774c <_vfiprintf_r+0x8d0>
   8773c:	f101 0e02 	add.w	lr, r1, #2
   87740:	4601      	mov	r1, r0
   87742:	f10c 0c08 	add.w	ip, ip, #8
   87746:	3e10      	subs	r6, #16
   87748:	2e10      	cmp	r6, #16
   8774a:	dd1c      	ble.n	87786 <_vfiprintf_r+0x90a>
   8774c:	2310      	movs	r3, #16
   8774e:	1c48      	adds	r0, r1, #1
   87750:	3210      	adds	r2, #16
   87752:	2807      	cmp	r0, #7
   87754:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87758:	f8cc 7000 	str.w	r7, [ip]
   8775c:	f8cc 3004 	str.w	r3, [ip, #4]
   87760:	ddec      	ble.n	8773c <_vfiprintf_r+0x8c0>
   87762:	b332      	cbz	r2, 877b2 <_vfiprintf_r+0x936>
   87764:	4629      	mov	r1, r5
   87766:	4620      	mov	r0, r4
   87768:	aa10      	add	r2, sp, #64	; 0x40
   8776a:	f7ff fb4b 	bl	86e04 <__sprint_r.part.0>
   8776e:	2800      	cmp	r0, #0
   87770:	f47f ad0d 	bne.w	8718e <_vfiprintf_r+0x312>
   87774:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87778:	3e10      	subs	r6, #16
   8777a:	2e10      	cmp	r6, #16
   8777c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   87780:	f101 0e01 	add.w	lr, r1, #1
   87784:	dce2      	bgt.n	8774c <_vfiprintf_r+0x8d0>
   87786:	463b      	mov	r3, r7
   87788:	4645      	mov	r5, r8
   8778a:	4657      	mov	r7, sl
   8778c:	46c8      	mov	r8, r9
   8778e:	4671      	mov	r1, lr
   87790:	46e1      	mov	r9, ip
   87792:	469a      	mov	sl, r3
   87794:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   87796:	4432      	add	r2, r6
   87798:	2907      	cmp	r1, #7
   8779a:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8779e:	f8c9 a000 	str.w	sl, [r9]
   877a2:	f8c9 6004 	str.w	r6, [r9, #4]
   877a6:	f300 80a7 	bgt.w	878f8 <_vfiprintf_r+0xa7c>
   877aa:	f109 0908 	add.w	r9, r9, #8
   877ae:	1c48      	adds	r0, r1, #1
   877b0:	e52b      	b.n	8720a <_vfiprintf_r+0x38e>
   877b2:	4611      	mov	r1, r2
   877b4:	f04f 0e01 	mov.w	lr, #1
   877b8:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   877bc:	e7c3      	b.n	87746 <_vfiprintf_r+0x8ca>
   877be:	076c      	lsls	r4, r5, #29
   877c0:	9211      	str	r2, [sp, #68]	; 0x44
   877c2:	d550      	bpl.n	87866 <_vfiprintf_r+0x9ea>
   877c4:	9b03      	ldr	r3, [sp, #12]
   877c6:	eba3 0408 	sub.w	r4, r3, r8
   877ca:	2c00      	cmp	r4, #0
   877cc:	dd4b      	ble.n	87866 <_vfiprintf_r+0x9ea>
   877ce:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   877d2:	2c10      	cmp	r4, #16
   877d4:	f340 81f8 	ble.w	87bc8 <_vfiprintf_r+0xd4c>
   877d8:	f8df a238 	ldr.w	sl, [pc, #568]	; 87a14 <_vfiprintf_r+0xb98>
   877dc:	2510      	movs	r5, #16
   877de:	4653      	mov	r3, sl
   877e0:	9911      	ldr	r1, [sp, #68]	; 0x44
   877e2:	46ba      	mov	sl, r7
   877e4:	9e06      	ldr	r6, [sp, #24]
   877e6:	461f      	mov	r7, r3
   877e8:	f8dd b008 	ldr.w	fp, [sp, #8]
   877ec:	e006      	b.n	877fc <_vfiprintf_r+0x980>
   877ee:	1c88      	adds	r0, r1, #2
   877f0:	4619      	mov	r1, r3
   877f2:	f109 0908 	add.w	r9, r9, #8
   877f6:	3c10      	subs	r4, #16
   877f8:	2c10      	cmp	r4, #16
   877fa:	dd19      	ble.n	87830 <_vfiprintf_r+0x9b4>
   877fc:	1c4b      	adds	r3, r1, #1
   877fe:	3210      	adds	r2, #16
   87800:	2b07      	cmp	r3, #7
   87802:	e9c9 7500 	strd	r7, r5, [r9]
   87806:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8780a:	ddf0      	ble.n	877ee <_vfiprintf_r+0x972>
   8780c:	b332      	cbz	r2, 8785c <_vfiprintf_r+0x9e0>
   8780e:	4659      	mov	r1, fp
   87810:	4630      	mov	r0, r6
   87812:	aa10      	add	r2, sp, #64	; 0x40
   87814:	f7ff faf6 	bl	86e04 <__sprint_r.part.0>
   87818:	2800      	cmp	r0, #0
   8781a:	f47f acb8 	bne.w	8718e <_vfiprintf_r+0x312>
   8781e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   87822:	3c10      	subs	r4, #16
   87824:	2c10      	cmp	r4, #16
   87826:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8782a:	f101 0001 	add.w	r0, r1, #1
   8782e:	dce5      	bgt.n	877fc <_vfiprintf_r+0x980>
   87830:	463b      	mov	r3, r7
   87832:	4657      	mov	r7, sl
   87834:	469a      	mov	sl, r3
   87836:	4422      	add	r2, r4
   87838:	2807      	cmp	r0, #7
   8783a:	e9c9 a400 	strd	sl, r4, [r9]
   8783e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   87842:	f77f ad3c 	ble.w	872be <_vfiprintf_r+0x442>
   87846:	b172      	cbz	r2, 87866 <_vfiprintf_r+0x9ea>
   87848:	9902      	ldr	r1, [sp, #8]
   8784a:	9806      	ldr	r0, [sp, #24]
   8784c:	aa10      	add	r2, sp, #64	; 0x40
   8784e:	f7ff fad9 	bl	86e04 <__sprint_r.part.0>
   87852:	2800      	cmp	r0, #0
   87854:	f47f ac9b 	bne.w	8718e <_vfiprintf_r+0x312>
   87858:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8785a:	e530      	b.n	872be <_vfiprintf_r+0x442>
   8785c:	2001      	movs	r0, #1
   8785e:	4611      	mov	r1, r2
   87860:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87864:	e7c7      	b.n	877f6 <_vfiprintf_r+0x97a>
   87866:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   8786a:	4542      	cmp	r2, r8
   8786c:	bfac      	ite	ge
   8786e:	189b      	addge	r3, r3, r2
   87870:	4443      	addlt	r3, r8
   87872:	9304      	str	r3, [sp, #16]
   87874:	e52d      	b.n	872d2 <_vfiprintf_r+0x456>
   87876:	2a00      	cmp	r2, #0
   87878:	f43f ae60 	beq.w	8753c <_vfiprintf_r+0x6c0>
   8787c:	9902      	ldr	r1, [sp, #8]
   8787e:	9806      	ldr	r0, [sp, #24]
   87880:	aa10      	add	r2, sp, #64	; 0x40
   87882:	f7ff fabf 	bl	86e04 <__sprint_r.part.0>
   87886:	2800      	cmp	r0, #0
   87888:	f47f ac81 	bne.w	8718e <_vfiprintf_r+0x312>
   8788c:	9811      	ldr	r0, [sp, #68]	; 0x44
   8788e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87890:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87894:	3001      	adds	r0, #1
   87896:	e4f1      	b.n	8727c <_vfiprintf_r+0x400>
   87898:	9b07      	ldr	r3, [sp, #28]
   8789a:	2b00      	cmp	r3, #0
   8789c:	d169      	bne.n	87972 <_vfiprintf_r+0xaf6>
   8789e:	2001      	movs	r0, #1
   878a0:	4611      	mov	r1, r2
   878a2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   878a6:	e4df      	b.n	87268 <_vfiprintf_r+0x3ec>
   878a8:	9211      	str	r2, [sp, #68]	; 0x44
   878aa:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   878ae:	e458      	b.n	87162 <_vfiprintf_r+0x2e6>
   878b0:	f1bb 0f00 	cmp.w	fp, #0
   878b4:	f47f abdc 	bne.w	87070 <_vfiprintf_r+0x1f4>
   878b8:	4655      	mov	r5, sl
   878ba:	f04f 0b00 	mov.w	fp, #0
   878be:	ac3c      	add	r4, sp, #240	; 0xf0
   878c0:	f8cd b004 	str.w	fp, [sp, #4]
   878c4:	f7ff bbdc 	b.w	87080 <_vfiprintf_r+0x204>
   878c8:	f01a 0310 	ands.w	r3, sl, #16
   878cc:	d140      	bne.n	87950 <_vfiprintf_r+0xad4>
   878ce:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   878d2:	d039      	beq.n	87948 <_vfiprintf_r+0xacc>
   878d4:	9e05      	ldr	r6, [sp, #20]
   878d6:	4698      	mov	r8, r3
   878d8:	f856 2b04 	ldr.w	r2, [r6], #4
   878dc:	2301      	movs	r3, #1
   878de:	9605      	str	r6, [sp, #20]
   878e0:	b296      	uxth	r6, r2
   878e2:	e410      	b.n	87106 <_vfiprintf_r+0x28a>
   878e4:	232d      	movs	r3, #45	; 0x2d
   878e6:	4276      	negs	r6, r6
   878e8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   878ec:	46aa      	mov	sl, r5
   878ee:	f04f 0301 	mov.w	r3, #1
   878f2:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   878f6:	e40a      	b.n	8710e <_vfiprintf_r+0x292>
   878f8:	2a00      	cmp	r2, #0
   878fa:	d06f      	beq.n	879dc <_vfiprintf_r+0xb60>
   878fc:	9902      	ldr	r1, [sp, #8]
   878fe:	9806      	ldr	r0, [sp, #24]
   87900:	aa10      	add	r2, sp, #64	; 0x40
   87902:	f7ff fa7f 	bl	86e04 <__sprint_r.part.0>
   87906:	2800      	cmp	r0, #0
   87908:	f47f ac41 	bne.w	8718e <_vfiprintf_r+0x312>
   8790c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87910:	e478      	b.n	87204 <_vfiprintf_r+0x388>
   87912:	ac3c      	add	r4, sp, #240	; 0xf0
   87914:	f7ff bbb4 	b.w	87080 <_vfiprintf_r+0x204>
   87918:	4601      	mov	r1, r0
   8791a:	f109 0908 	add.w	r9, r9, #8
   8791e:	3001      	adds	r0, #1
   87920:	e4a6      	b.n	87270 <_vfiprintf_r+0x3f4>
   87922:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   87926:	f040 811d 	bne.w	87b64 <_vfiprintf_r+0xce8>
   8792a:	9b05      	ldr	r3, [sp, #20]
   8792c:	f853 6b04 	ldr.w	r6, [r3], #4
   87930:	9305      	str	r3, [sp, #20]
   87932:	f7ff bbe5 	b.w	87100 <_vfiprintf_r+0x284>
   87936:	05aa      	lsls	r2, r5, #22
   87938:	f100 810e 	bmi.w	87b58 <_vfiprintf_r+0xcdc>
   8793c:	ea4f 78e3 	mov.w	r8, r3, asr #31
   87940:	461e      	mov	r6, r3
   87942:	4643      	mov	r3, r8
   87944:	f7ff bb82 	b.w	8704c <_vfiprintf_r+0x1d0>
   87948:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   8794c:	f040 80fb 	bne.w	87b46 <_vfiprintf_r+0xcca>
   87950:	9a05      	ldr	r2, [sp, #20]
   87952:	2301      	movs	r3, #1
   87954:	f852 6b04 	ldr.w	r6, [r2], #4
   87958:	9205      	str	r2, [sp, #20]
   8795a:	f7ff bbd4 	b.w	87106 <_vfiprintf_r+0x28a>
   8795e:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   87962:	f856 2b04 	ldr.w	r2, [r6], #4
   87966:	17cb      	asrs	r3, r1, #31
   87968:	e9c2 1300 	strd	r1, r3, [r2]
   8796c:	9605      	str	r6, [sp, #20]
   8796e:	f7ff babe 	b.w	86eee <_vfiprintf_r+0x72>
   87972:	2202      	movs	r2, #2
   87974:	ab0f      	add	r3, sp, #60	; 0x3c
   87976:	9313      	str	r3, [sp, #76]	; 0x4c
   87978:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8797c:	9214      	str	r2, [sp, #80]	; 0x50
   8797e:	e6c7      	b.n	87710 <_vfiprintf_r+0x894>
   87980:	4a25      	ldr	r2, [pc, #148]	; (87a18 <_vfiprintf_r+0xb9c>)
   87982:	9209      	str	r2, [sp, #36]	; 0x24
   87984:	f015 0820 	ands.w	r8, r5, #32
   87988:	d036      	beq.n	879f8 <_vfiprintf_r+0xb7c>
   8798a:	9e05      	ldr	r6, [sp, #20]
   8798c:	3607      	adds	r6, #7
   8798e:	f026 0607 	bic.w	r6, r6, #7
   87992:	4632      	mov	r2, r6
   87994:	f8d6 8004 	ldr.w	r8, [r6, #4]
   87998:	f852 6b08 	ldr.w	r6, [r2], #8
   8799c:	9205      	str	r2, [sp, #20]
   8799e:	07ea      	lsls	r2, r5, #31
   879a0:	d509      	bpl.n	879b6 <_vfiprintf_r+0xb3a>
   879a2:	ea56 0208 	orrs.w	r2, r6, r8
   879a6:	d006      	beq.n	879b6 <_vfiprintf_r+0xb3a>
   879a8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   879ac:	2330      	movs	r3, #48	; 0x30
   879ae:	f045 0502 	orr.w	r5, r5, #2
   879b2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   879b6:	2302      	movs	r3, #2
   879b8:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   879bc:	f7ff bba3 	b.w	87106 <_vfiprintf_r+0x28a>
   879c0:	46aa      	mov	sl, r5
   879c2:	e4ff      	b.n	873c4 <_vfiprintf_r+0x548>
   879c4:	4a15      	ldr	r2, [pc, #84]	; (87a1c <_vfiprintf_r+0xba0>)
   879c6:	9209      	str	r2, [sp, #36]	; 0x24
   879c8:	e7dc      	b.n	87984 <_vfiprintf_r+0xb08>
   879ca:	4620      	mov	r0, r4
   879cc:	9605      	str	r6, [sp, #20]
   879ce:	f7fd fc65 	bl	8529c <strlen>
   879d2:	f04f 0b00 	mov.w	fp, #0
   879d6:	9001      	str	r0, [sp, #4]
   879d8:	f7ff bb52 	b.w	87080 <_vfiprintf_r+0x204>
   879dc:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   879e0:	2900      	cmp	r1, #0
   879e2:	f000 80a6 	beq.w	87b32 <_vfiprintf_r+0xcb6>
   879e6:	2001      	movs	r0, #1
   879e8:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   879ec:	9213      	str	r2, [sp, #76]	; 0x4c
   879ee:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   879f2:	4602      	mov	r2, r0
   879f4:	9014      	str	r0, [sp, #80]	; 0x50
   879f6:	e416      	b.n	87226 <_vfiprintf_r+0x3aa>
   879f8:	f015 0210 	ands.w	r2, r5, #16
   879fc:	d114      	bne.n	87a28 <_vfiprintf_r+0xbac>
   879fe:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   87a02:	d00d      	beq.n	87a20 <_vfiprintf_r+0xba4>
   87a04:	9e05      	ldr	r6, [sp, #20]
   87a06:	4690      	mov	r8, r2
   87a08:	f856 2b04 	ldr.w	r2, [r6], #4
   87a0c:	9605      	str	r6, [sp, #20]
   87a0e:	b296      	uxth	r6, r2
   87a10:	e7c5      	b.n	8799e <_vfiprintf_r+0xb22>
   87a12:	bf00      	nop
   87a14:	0008bf40 	.word	0x0008bf40
   87a18:	0008bf00 	.word	0x0008bf00
   87a1c:	0008beec 	.word	0x0008beec
   87a20:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   87a24:	f040 80a6 	bne.w	87b74 <_vfiprintf_r+0xcf8>
   87a28:	9a05      	ldr	r2, [sp, #20]
   87a2a:	f852 6b04 	ldr.w	r6, [r2], #4
   87a2e:	9205      	str	r2, [sp, #20]
   87a30:	e7b5      	b.n	8799e <_vfiprintf_r+0xb22>
   87a32:	2300      	movs	r3, #0
   87a34:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   87a38:	f8cd b004 	str.w	fp, [sp, #4]
   87a3c:	f8cd a01c 	str.w	sl, [sp, #28]
   87a40:	46bb      	mov	fp, r7
   87a42:	f8cd 9020 	str.w	r9, [sp, #32]
   87a46:	469a      	mov	sl, r3
   87a48:	4617      	mov	r7, r2
   87a4a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87a4e:	ad3c      	add	r5, sp, #240	; 0xf0
   87a50:	e00c      	b.n	87a6c <_vfiprintf_r+0xbf0>
   87a52:	2300      	movs	r3, #0
   87a54:	4630      	mov	r0, r6
   87a56:	4641      	mov	r1, r8
   87a58:	220a      	movs	r2, #10
   87a5a:	f004 f85d 	bl	8bb18 <__aeabi_uldivmod>
   87a5e:	2e0a      	cmp	r6, #10
   87a60:	f178 0300 	sbcs.w	r3, r8, #0
   87a64:	d31b      	bcc.n	87a9e <_vfiprintf_r+0xc22>
   87a66:	4606      	mov	r6, r0
   87a68:	4688      	mov	r8, r1
   87a6a:	4625      	mov	r5, r4
   87a6c:	4630      	mov	r0, r6
   87a6e:	4641      	mov	r1, r8
   87a70:	220a      	movs	r2, #10
   87a72:	2300      	movs	r3, #0
   87a74:	f004 f850 	bl	8bb18 <__aeabi_uldivmod>
   87a78:	3230      	adds	r2, #48	; 0x30
   87a7a:	1e6c      	subs	r4, r5, #1
   87a7c:	f10a 0a01 	add.w	sl, sl, #1
   87a80:	f805 2c01 	strb.w	r2, [r5, #-1]
   87a84:	2f00      	cmp	r7, #0
   87a86:	d0e4      	beq.n	87a52 <_vfiprintf_r+0xbd6>
   87a88:	f899 3000 	ldrb.w	r3, [r9]
   87a8c:	4553      	cmp	r3, sl
   87a8e:	d1e0      	bne.n	87a52 <_vfiprintf_r+0xbd6>
   87a90:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   87a94:	d0dd      	beq.n	87a52 <_vfiprintf_r+0xbd6>
   87a96:	2e0a      	cmp	r6, #10
   87a98:	f178 0300 	sbcs.w	r3, r8, #0
   87a9c:	d22e      	bcs.n	87afc <_vfiprintf_r+0xc80>
   87a9e:	f8dd a01c 	ldr.w	sl, [sp, #28]
   87aa2:	ab3c      	add	r3, sp, #240	; 0xf0
   87aa4:	1b1b      	subs	r3, r3, r4
   87aa6:	465f      	mov	r7, fp
   87aa8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87aac:	f8dd b004 	ldr.w	fp, [sp, #4]
   87ab0:	4655      	mov	r5, sl
   87ab2:	f8dd 9020 	ldr.w	r9, [sp, #32]
   87ab6:	9301      	str	r3, [sp, #4]
   87ab8:	f7ff bae2 	b.w	87080 <_vfiprintf_r+0x204>
   87abc:	46aa      	mov	sl, r5
   87abe:	f7ff bad2 	b.w	87066 <_vfiprintf_r+0x1ea>
   87ac2:	2b01      	cmp	r3, #1
   87ac4:	46aa      	mov	sl, r5
   87ac6:	f47f ad06 	bne.w	874d6 <_vfiprintf_r+0x65a>
   87aca:	f7ff bad1 	b.w	87070 <_vfiprintf_r+0x1f4>
   87ace:	9e05      	ldr	r6, [sp, #20]
   87ad0:	9a04      	ldr	r2, [sp, #16]
   87ad2:	f856 3b04 	ldr.w	r3, [r6], #4
   87ad6:	601a      	str	r2, [r3, #0]
   87ad8:	9605      	str	r6, [sp, #20]
   87ada:	f7ff ba08 	b.w	86eee <_vfiprintf_r+0x72>
   87ade:	f1bb 0f06 	cmp.w	fp, #6
   87ae2:	46d8      	mov	r8, fp
   87ae4:	bf28      	it	cs
   87ae6:	f04f 0806 	movcs.w	r8, #6
   87aea:	4c47      	ldr	r4, [pc, #284]	; (87c08 <_vfiprintf_r+0xd8c>)
   87aec:	f8cd 8004 	str.w	r8, [sp, #4]
   87af0:	9605      	str	r6, [sp, #20]
   87af2:	f7ff bb75 	b.w	871e0 <_vfiprintf_r+0x364>
   87af6:	f8df a114 	ldr.w	sl, [pc, #276]	; 87c0c <_vfiprintf_r+0xd90>
   87afa:	e5c9      	b.n	87690 <_vfiprintf_r+0x814>
   87afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87afe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b00:	1ae4      	subs	r4, r4, r3
   87b02:	461a      	mov	r2, r3
   87b04:	4620      	mov	r0, r4
   87b06:	f7fd fbf7 	bl	852f8 <strncpy>
   87b0a:	f899 3001 	ldrb.w	r3, [r9, #1]
   87b0e:	b10b      	cbz	r3, 87b14 <_vfiprintf_r+0xc98>
   87b10:	f109 0901 	add.w	r9, r9, #1
   87b14:	4630      	mov	r0, r6
   87b16:	4641      	mov	r1, r8
   87b18:	220a      	movs	r2, #10
   87b1a:	2300      	movs	r3, #0
   87b1c:	f04f 0a00 	mov.w	sl, #0
   87b20:	f003 fffa 	bl	8bb18 <__aeabi_uldivmod>
   87b24:	e79f      	b.n	87a66 <_vfiprintf_r+0xbea>
   87b26:	2001      	movs	r0, #1
   87b28:	4611      	mov	r1, r2
   87b2a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87b2e:	f7ff bb9f 	b.w	87270 <_vfiprintf_r+0x3f4>
   87b32:	9b07      	ldr	r3, [sp, #28]
   87b34:	2b00      	cmp	r3, #0
   87b36:	f47f ade3 	bne.w	87700 <_vfiprintf_r+0x884>
   87b3a:	4611      	mov	r1, r2
   87b3c:	2001      	movs	r0, #1
   87b3e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   87b42:	f7ff bb95 	b.w	87270 <_vfiprintf_r+0x3f4>
   87b46:	9e05      	ldr	r6, [sp, #20]
   87b48:	4690      	mov	r8, r2
   87b4a:	f856 2b04 	ldr.w	r2, [r6], #4
   87b4e:	2301      	movs	r3, #1
   87b50:	9605      	str	r6, [sp, #20]
   87b52:	b2d6      	uxtb	r6, r2
   87b54:	f7ff bad7 	b.w	87106 <_vfiprintf_r+0x28a>
   87b58:	f343 18c0 	sbfx	r8, r3, #7, #1
   87b5c:	b25e      	sxtb	r6, r3
   87b5e:	4643      	mov	r3, r8
   87b60:	f7ff ba74 	b.w	8704c <_vfiprintf_r+0x1d0>
   87b64:	9e05      	ldr	r6, [sp, #20]
   87b66:	4690      	mov	r8, r2
   87b68:	f856 3b04 	ldr.w	r3, [r6], #4
   87b6c:	9605      	str	r6, [sp, #20]
   87b6e:	b2de      	uxtb	r6, r3
   87b70:	f7ff bac6 	b.w	87100 <_vfiprintf_r+0x284>
   87b74:	9e05      	ldr	r6, [sp, #20]
   87b76:	4688      	mov	r8, r1
   87b78:	f856 2b04 	ldr.w	r2, [r6], #4
   87b7c:	9605      	str	r6, [sp, #20]
   87b7e:	b2d6      	uxtb	r6, r2
   87b80:	e70d      	b.n	8799e <_vfiprintf_r+0xb22>
   87b82:	9e05      	ldr	r6, [sp, #20]
   87b84:	9a04      	ldr	r2, [sp, #16]
   87b86:	f856 3b04 	ldr.w	r3, [r6], #4
   87b8a:	801a      	strh	r2, [r3, #0]
   87b8c:	9605      	str	r6, [sp, #20]
   87b8e:	f7ff b9ae 	b.w	86eee <_vfiprintf_r+0x72>
   87b92:	6d88      	ldr	r0, [r1, #88]	; 0x58
   87b94:	f001 fde4 	bl	89760 <__retarget_lock_release_recursive>
   87b98:	f7ff ba99 	b.w	870ce <_vfiprintf_r+0x252>
   87b9c:	f8cd b004 	str.w	fp, [sp, #4]
   87ba0:	9605      	str	r6, [sp, #20]
   87ba2:	4683      	mov	fp, r0
   87ba4:	f7ff ba6c 	b.w	87080 <_vfiprintf_r+0x204>
   87ba8:	9911      	ldr	r1, [sp, #68]	; 0x44
   87baa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87bac:	f8df a060 	ldr.w	sl, [pc, #96]	; 87c10 <_vfiprintf_r+0xd94>
   87bb0:	3101      	adds	r1, #1
   87bb2:	e5f0      	b.n	87796 <_vfiprintf_r+0x91a>
   87bb4:	9902      	ldr	r1, [sp, #8]
   87bb6:	9806      	ldr	r0, [sp, #24]
   87bb8:	aa10      	add	r2, sp, #64	; 0x40
   87bba:	f7ff f923 	bl	86e04 <__sprint_r.part.0>
   87bbe:	2800      	cmp	r0, #0
   87bc0:	f43f aae3 	beq.w	8718a <_vfiprintf_r+0x30e>
   87bc4:	f7ff bae3 	b.w	8718e <_vfiprintf_r+0x312>
   87bc8:	9811      	ldr	r0, [sp, #68]	; 0x44
   87bca:	f8df a044 	ldr.w	sl, [pc, #68]	; 87c10 <_vfiprintf_r+0xd94>
   87bce:	3001      	adds	r0, #1
   87bd0:	e631      	b.n	87836 <_vfiprintf_r+0x9ba>
   87bd2:	9b02      	ldr	r3, [sp, #8]
   87bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   87bd6:	07db      	lsls	r3, r3, #31
   87bd8:	d407      	bmi.n	87bea <_vfiprintf_r+0xd6e>
   87bda:	9b02      	ldr	r3, [sp, #8]
   87bdc:	899b      	ldrh	r3, [r3, #12]
   87bde:	059f      	lsls	r7, r3, #22
   87be0:	d403      	bmi.n	87bea <_vfiprintf_r+0xd6e>
   87be2:	9b02      	ldr	r3, [sp, #8]
   87be4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   87be6:	f001 fdbb 	bl	89760 <__retarget_lock_release_recursive>
   87bea:	f04f 33ff 	mov.w	r3, #4294967295
   87bee:	9304      	str	r3, [sp, #16]
   87bf0:	f7ff bad6 	b.w	871a0 <_vfiprintf_r+0x324>
   87bf4:	9a05      	ldr	r2, [sp, #20]
   87bf6:	787b      	ldrb	r3, [r7, #1]
   87bf8:	460f      	mov	r7, r1
   87bfa:	f852 1b04 	ldr.w	r1, [r2], #4
   87bfe:	9205      	str	r2, [sp, #20]
   87c00:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   87c04:	f7ff b993 	b.w	86f2e <_vfiprintf_r+0xb2>
   87c08:	0008bf14 	.word	0x0008bf14
   87c0c:	0008bf50 	.word	0x0008bf50
   87c10:	0008bf40 	.word	0x0008bf40

00087c14 <__sbprintf>:
   87c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   87c16:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   87c1a:	4615      	mov	r5, r2
   87c1c:	2400      	movs	r4, #0
   87c1e:	4606      	mov	r6, r0
   87c20:	461f      	mov	r7, r3
   87c22:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   87c26:	ab1a      	add	r3, sp, #104	; 0x68
   87c28:	9300      	str	r3, [sp, #0]
   87c2a:	9304      	str	r3, [sp, #16]
   87c2c:	898b      	ldrh	r3, [r1, #12]
   87c2e:	a816      	add	r0, sp, #88	; 0x58
   87c30:	f023 0302 	bic.w	r3, r3, #2
   87c34:	f8ad 300c 	strh.w	r3, [sp, #12]
   87c38:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87c3a:	9406      	str	r4, [sp, #24]
   87c3c:	9319      	str	r3, [sp, #100]	; 0x64
   87c3e:	89cb      	ldrh	r3, [r1, #14]
   87c40:	460c      	mov	r4, r1
   87c42:	f8ad 300e 	strh.w	r3, [sp, #14]
   87c46:	69cb      	ldr	r3, [r1, #28]
   87c48:	f8cd c008 	str.w	ip, [sp, #8]
   87c4c:	9307      	str	r3, [sp, #28]
   87c4e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87c50:	f8cd c014 	str.w	ip, [sp, #20]
   87c54:	9309      	str	r3, [sp, #36]	; 0x24
   87c56:	f001 fd7d 	bl	89754 <__retarget_lock_init_recursive>
   87c5a:	462a      	mov	r2, r5
   87c5c:	463b      	mov	r3, r7
   87c5e:	4669      	mov	r1, sp
   87c60:	4630      	mov	r0, r6
   87c62:	f7ff f90b 	bl	86e7c <_vfiprintf_r>
   87c66:	1e05      	subs	r5, r0, #0
   87c68:	db07      	blt.n	87c7a <__sbprintf+0x66>
   87c6a:	4669      	mov	r1, sp
   87c6c:	4630      	mov	r0, r6
   87c6e:	f001 f91b 	bl	88ea8 <_fflush_r>
   87c72:	2800      	cmp	r0, #0
   87c74:	bf18      	it	ne
   87c76:	f04f 35ff 	movne.w	r5, #4294967295
   87c7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   87c7e:	065b      	lsls	r3, r3, #25
   87c80:	d503      	bpl.n	87c8a <__sbprintf+0x76>
   87c82:	89a3      	ldrh	r3, [r4, #12]
   87c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87c88:	81a3      	strh	r3, [r4, #12]
   87c8a:	9816      	ldr	r0, [sp, #88]	; 0x58
   87c8c:	f001 fd64 	bl	89758 <__retarget_lock_close_recursive>
   87c90:	4628      	mov	r0, r5
   87c92:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   87c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087c98 <__swsetup_r>:
   87c98:	b538      	push	{r3, r4, r5, lr}
   87c9a:	4b33      	ldr	r3, [pc, #204]	; (87d68 <__swsetup_r+0xd0>)
   87c9c:	4605      	mov	r5, r0
   87c9e:	681b      	ldr	r3, [r3, #0]
   87ca0:	460c      	mov	r4, r1
   87ca2:	b10b      	cbz	r3, 87ca8 <__swsetup_r+0x10>
   87ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   87ca6:	b312      	cbz	r2, 87cee <__swsetup_r+0x56>
   87ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87cac:	0718      	lsls	r0, r3, #28
   87cae:	b29a      	uxth	r2, r3
   87cb0:	d525      	bpl.n	87cfe <__swsetup_r+0x66>
   87cb2:	6921      	ldr	r1, [r4, #16]
   87cb4:	2900      	cmp	r1, #0
   87cb6:	d02d      	beq.n	87d14 <__swsetup_r+0x7c>
   87cb8:	f012 0001 	ands.w	r0, r2, #1
   87cbc:	d007      	beq.n	87cce <__swsetup_r+0x36>
   87cbe:	2500      	movs	r5, #0
   87cc0:	6960      	ldr	r0, [r4, #20]
   87cc2:	60a5      	str	r5, [r4, #8]
   87cc4:	4240      	negs	r0, r0
   87cc6:	61a0      	str	r0, [r4, #24]
   87cc8:	b139      	cbz	r1, 87cda <__swsetup_r+0x42>
   87cca:	2000      	movs	r0, #0
   87ccc:	bd38      	pop	{r3, r4, r5, pc}
   87cce:	0795      	lsls	r5, r2, #30
   87cd0:	bf58      	it	pl
   87cd2:	6960      	ldrpl	r0, [r4, #20]
   87cd4:	60a0      	str	r0, [r4, #8]
   87cd6:	2900      	cmp	r1, #0
   87cd8:	d1f7      	bne.n	87cca <__swsetup_r+0x32>
   87cda:	0612      	lsls	r2, r2, #24
   87cdc:	bf58      	it	pl
   87cde:	4608      	movpl	r0, r1
   87ce0:	d5f4      	bpl.n	87ccc <__swsetup_r+0x34>
   87ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87ce6:	f04f 30ff 	mov.w	r0, #4294967295
   87cea:	81a3      	strh	r3, [r4, #12]
   87cec:	bd38      	pop	{r3, r4, r5, pc}
   87cee:	4618      	mov	r0, r3
   87cf0:	f001 f90e 	bl	88f10 <__sinit>
   87cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87cf8:	0718      	lsls	r0, r3, #28
   87cfa:	b29a      	uxth	r2, r3
   87cfc:	d4d9      	bmi.n	87cb2 <__swsetup_r+0x1a>
   87cfe:	06d1      	lsls	r1, r2, #27
   87d00:	d52a      	bpl.n	87d58 <__swsetup_r+0xc0>
   87d02:	0752      	lsls	r2, r2, #29
   87d04:	d414      	bmi.n	87d30 <__swsetup_r+0x98>
   87d06:	6921      	ldr	r1, [r4, #16]
   87d08:	f043 0308 	orr.w	r3, r3, #8
   87d0c:	81a3      	strh	r3, [r4, #12]
   87d0e:	b29a      	uxth	r2, r3
   87d10:	2900      	cmp	r1, #0
   87d12:	d1d1      	bne.n	87cb8 <__swsetup_r+0x20>
   87d14:	f402 7020 	and.w	r0, r2, #640	; 0x280
   87d18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   87d1c:	d0cc      	beq.n	87cb8 <__swsetup_r+0x20>
   87d1e:	4621      	mov	r1, r4
   87d20:	4628      	mov	r0, r5
   87d22:	f001 fd1f 	bl	89764 <__smakebuf_r>
   87d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87d2a:	6921      	ldr	r1, [r4, #16]
   87d2c:	b29a      	uxth	r2, r3
   87d2e:	e7c3      	b.n	87cb8 <__swsetup_r+0x20>
   87d30:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87d32:	b151      	cbz	r1, 87d4a <__swsetup_r+0xb2>
   87d34:	f104 0240 	add.w	r2, r4, #64	; 0x40
   87d38:	4291      	cmp	r1, r2
   87d3a:	d004      	beq.n	87d46 <__swsetup_r+0xae>
   87d3c:	4628      	mov	r0, r5
   87d3e:	f001 fa63 	bl	89208 <_free_r>
   87d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87d46:	2200      	movs	r2, #0
   87d48:	6322      	str	r2, [r4, #48]	; 0x30
   87d4a:	2200      	movs	r2, #0
   87d4c:	6921      	ldr	r1, [r4, #16]
   87d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   87d52:	e9c4 1200 	strd	r1, r2, [r4]
   87d56:	e7d7      	b.n	87d08 <__swsetup_r+0x70>
   87d58:	2209      	movs	r2, #9
   87d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87d5e:	602a      	str	r2, [r5, #0]
   87d60:	f04f 30ff 	mov.w	r0, #4294967295
   87d64:	81a3      	strh	r3, [r4, #12]
   87d66:	bd38      	pop	{r3, r4, r5, pc}
   87d68:	200003c0 	.word	0x200003c0

00087d6c <register_fini>:
   87d6c:	4b02      	ldr	r3, [pc, #8]	; (87d78 <register_fini+0xc>)
   87d6e:	b113      	cbz	r3, 87d76 <register_fini+0xa>
   87d70:	4802      	ldr	r0, [pc, #8]	; (87d7c <register_fini+0x10>)
   87d72:	f000 b805 	b.w	87d80 <atexit>
   87d76:	4770      	bx	lr
   87d78:	00000000 	.word	0x00000000
   87d7c:	00089035 	.word	0x00089035

00087d80 <atexit>:
   87d80:	2300      	movs	r3, #0
   87d82:	4601      	mov	r1, r0
   87d84:	461a      	mov	r2, r3
   87d86:	4618      	mov	r0, r3
   87d88:	f003 b860 	b.w	8ae4c <__register_exitproc>

00087d8c <quorem>:
   87d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87d90:	6903      	ldr	r3, [r0, #16]
   87d92:	690c      	ldr	r4, [r1, #16]
   87d94:	b085      	sub	sp, #20
   87d96:	42a3      	cmp	r3, r4
   87d98:	f2c0 8089 	blt.w	87eae <quorem+0x122>
   87d9c:	3c01      	subs	r4, #1
   87d9e:	f101 0514 	add.w	r5, r1, #20
   87da2:	00a3      	lsls	r3, r4, #2
   87da4:	f100 0814 	add.w	r8, r0, #20
   87da8:	9301      	str	r3, [sp, #4]
   87daa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   87dae:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   87db2:	3301      	adds	r3, #1
   87db4:	468a      	mov	sl, r1
   87db6:	429a      	cmp	r2, r3
   87db8:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   87dbc:	4681      	mov	r9, r0
   87dbe:	fbb2 f6f3 	udiv	r6, r2, r3
   87dc2:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   87dc6:	9102      	str	r1, [sp, #8]
   87dc8:	d33a      	bcc.n	87e40 <quorem+0xb4>
   87dca:	2100      	movs	r1, #0
   87dcc:	46ae      	mov	lr, r5
   87dce:	4640      	mov	r0, r8
   87dd0:	460a      	mov	r2, r1
   87dd2:	46a3      	mov	fp, r4
   87dd4:	9503      	str	r5, [sp, #12]
   87dd6:	f85e 5b04 	ldr.w	r5, [lr], #4
   87dda:	6804      	ldr	r4, [r0, #0]
   87ddc:	b2ab      	uxth	r3, r5
   87dde:	fb06 1303 	mla	r3, r6, r3, r1
   87de2:	0c2d      	lsrs	r5, r5, #16
   87de4:	0c19      	lsrs	r1, r3, #16
   87de6:	fb06 1105 	mla	r1, r6, r5, r1
   87dea:	b29b      	uxth	r3, r3
   87dec:	1ad2      	subs	r2, r2, r3
   87dee:	fa1f fc84 	uxth.w	ip, r4
   87df2:	4494      	add	ip, r2
   87df4:	b28a      	uxth	r2, r1
   87df6:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   87dfa:	eb02 422c 	add.w	r2, r2, ip, asr #16
   87dfe:	fa1f fc8c 	uxth.w	ip, ip
   87e02:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   87e06:	4577      	cmp	r7, lr
   87e08:	f840 3b04 	str.w	r3, [r0], #4
   87e0c:	ea4f 4111 	mov.w	r1, r1, lsr #16
   87e10:	ea4f 4222 	mov.w	r2, r2, asr #16
   87e14:	d2df      	bcs.n	87dd6 <quorem+0x4a>
   87e16:	9b01      	ldr	r3, [sp, #4]
   87e18:	465c      	mov	r4, fp
   87e1a:	f858 3003 	ldr.w	r3, [r8, r3]
   87e1e:	9d03      	ldr	r5, [sp, #12]
   87e20:	b973      	cbnz	r3, 87e40 <quorem+0xb4>
   87e22:	9b02      	ldr	r3, [sp, #8]
   87e24:	3b04      	subs	r3, #4
   87e26:	4598      	cmp	r8, r3
   87e28:	d304      	bcc.n	87e34 <quorem+0xa8>
   87e2a:	e007      	b.n	87e3c <quorem+0xb0>
   87e2c:	4598      	cmp	r8, r3
   87e2e:	f104 34ff 	add.w	r4, r4, #4294967295
   87e32:	d203      	bcs.n	87e3c <quorem+0xb0>
   87e34:	f853 2904 	ldr.w	r2, [r3], #-4
   87e38:	2a00      	cmp	r2, #0
   87e3a:	d0f7      	beq.n	87e2c <quorem+0xa0>
   87e3c:	f8c9 4010 	str.w	r4, [r9, #16]
   87e40:	4651      	mov	r1, sl
   87e42:	4648      	mov	r0, r9
   87e44:	f002 fb44 	bl	8a4d0 <__mcmp>
   87e48:	2800      	cmp	r0, #0
   87e4a:	db2c      	blt.n	87ea6 <quorem+0x11a>
   87e4c:	4640      	mov	r0, r8
   87e4e:	2300      	movs	r3, #0
   87e50:	3601      	adds	r6, #1
   87e52:	f855 1b04 	ldr.w	r1, [r5], #4
   87e56:	f8d0 c000 	ldr.w	ip, [r0]
   87e5a:	b28a      	uxth	r2, r1
   87e5c:	1a9a      	subs	r2, r3, r2
   87e5e:	fa1f fe8c 	uxth.w	lr, ip
   87e62:	0c0b      	lsrs	r3, r1, #16
   87e64:	4472      	add	r2, lr
   87e66:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   87e6a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87e6e:	b292      	uxth	r2, r2
   87e70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87e74:	42af      	cmp	r7, r5
   87e76:	f840 2b04 	str.w	r2, [r0], #4
   87e7a:	ea4f 4323 	mov.w	r3, r3, asr #16
   87e7e:	d2e8      	bcs.n	87e52 <quorem+0xc6>
   87e80:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   87e84:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   87e88:	b96a      	cbnz	r2, 87ea6 <quorem+0x11a>
   87e8a:	3b04      	subs	r3, #4
   87e8c:	4598      	cmp	r8, r3
   87e8e:	d304      	bcc.n	87e9a <quorem+0x10e>
   87e90:	e007      	b.n	87ea2 <quorem+0x116>
   87e92:	4598      	cmp	r8, r3
   87e94:	f104 34ff 	add.w	r4, r4, #4294967295
   87e98:	d203      	bcs.n	87ea2 <quorem+0x116>
   87e9a:	f853 2904 	ldr.w	r2, [r3], #-4
   87e9e:	2a00      	cmp	r2, #0
   87ea0:	d0f7      	beq.n	87e92 <quorem+0x106>
   87ea2:	f8c9 4010 	str.w	r4, [r9, #16]
   87ea6:	4630      	mov	r0, r6
   87ea8:	b005      	add	sp, #20
   87eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87eae:	2000      	movs	r0, #0
   87eb0:	b005      	add	sp, #20
   87eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87eb6:	bf00      	nop

00087eb8 <_dtoa_r>:
   87eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87ebc:	4690      	mov	r8, r2
   87ebe:	4699      	mov	r9, r3
   87ec0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   87ec2:	b099      	sub	sp, #100	; 0x64
   87ec4:	4604      	mov	r4, r0
   87ec6:	e9cd 8904 	strd	r8, r9, [sp, #16]
   87eca:	9d25      	ldr	r5, [sp, #148]	; 0x94
   87ecc:	b141      	cbz	r1, 87ee0 <_dtoa_r+0x28>
   87ece:	2301      	movs	r3, #1
   87ed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   87ed2:	4093      	lsls	r3, r2
   87ed4:	608b      	str	r3, [r1, #8]
   87ed6:	604a      	str	r2, [r1, #4]
   87ed8:	f002 f8a4 	bl	8a024 <_Bfree>
   87edc:	2300      	movs	r3, #0
   87ede:	6423      	str	r3, [r4, #64]	; 0x40
   87ee0:	f1b9 0a00 	subs.w	sl, r9, #0
   87ee4:	bfb4      	ite	lt
   87ee6:	2301      	movlt	r3, #1
   87ee8:	2300      	movge	r3, #0
   87eea:	602b      	str	r3, [r5, #0]
   87eec:	4b76      	ldr	r3, [pc, #472]	; (880c8 <_dtoa_r+0x210>)
   87eee:	bfbc      	itt	lt
   87ef0:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   87ef4:	f8cd a014 	strlt.w	sl, [sp, #20]
   87ef8:	ea33 030a 	bics.w	r3, r3, sl
   87efc:	f000 80aa 	beq.w	88054 <_dtoa_r+0x19c>
   87f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   87f04:	4610      	mov	r0, r2
   87f06:	4619      	mov	r1, r3
   87f08:	2200      	movs	r2, #0
   87f0a:	2300      	movs	r3, #0
   87f0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   87f10:	f003 fd92 	bl	8ba38 <__aeabi_dcmpeq>
   87f14:	4607      	mov	r7, r0
   87f16:	b170      	cbz	r0, 87f36 <_dtoa_r+0x7e>
   87f18:	2301      	movs	r3, #1
   87f1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87f1c:	6013      	str	r3, [r2, #0]
   87f1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87f20:	2b00      	cmp	r3, #0
   87f22:	f000 82e6 	beq.w	884f2 <_dtoa_r+0x63a>
   87f26:	4869      	ldr	r0, [pc, #420]	; (880cc <_dtoa_r+0x214>)
   87f28:	6018      	str	r0, [r3, #0]
   87f2a:	1e43      	subs	r3, r0, #1
   87f2c:	9303      	str	r3, [sp, #12]
   87f2e:	9803      	ldr	r0, [sp, #12]
   87f30:	b019      	add	sp, #100	; 0x64
   87f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f36:	ab16      	add	r3, sp, #88	; 0x58
   87f38:	9301      	str	r3, [sp, #4]
   87f3a:	ab17      	add	r3, sp, #92	; 0x5c
   87f3c:	9300      	str	r3, [sp, #0]
   87f3e:	4620      	mov	r0, r4
   87f40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   87f44:	f002 fb8a 	bl	8a65c <__d2b>
   87f48:	ea5f 561a 	movs.w	r6, sl, lsr #20
   87f4c:	4605      	mov	r5, r0
   87f4e:	f040 8097 	bne.w	88080 <_dtoa_r+0x1c8>
   87f52:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   87f56:	443e      	add	r6, r7
   87f58:	f206 4032 	addw	r0, r6, #1074	; 0x432
   87f5c:	2820      	cmp	r0, #32
   87f5e:	f340 83b7 	ble.w	886d0 <_dtoa_r+0x818>
   87f62:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   87f66:	fa0a fa00 	lsl.w	sl, sl, r0
   87f6a:	f206 4012 	addw	r0, r6, #1042	; 0x412
   87f6e:	fa28 f000 	lsr.w	r0, r8, r0
   87f72:	ea4a 0000 	orr.w	r0, sl, r0
   87f76:	f003 fa7d 	bl	8b474 <__aeabi_ui2d>
   87f7a:	2301      	movs	r3, #1
   87f7c:	3e01      	subs	r6, #1
   87f7e:	930f      	str	r3, [sp, #60]	; 0x3c
   87f80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87f84:	2200      	movs	r2, #0
   87f86:	4b52      	ldr	r3, [pc, #328]	; (880d0 <_dtoa_r+0x218>)
   87f88:	f003 f936 	bl	8b1f8 <__aeabi_dsub>
   87f8c:	a348      	add	r3, pc, #288	; (adr r3, 880b0 <_dtoa_r+0x1f8>)
   87f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87f92:	f003 fae9 	bl	8b568 <__aeabi_dmul>
   87f96:	a348      	add	r3, pc, #288	; (adr r3, 880b8 <_dtoa_r+0x200>)
   87f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   87f9c:	f003 f92e 	bl	8b1fc <__adddf3>
   87fa0:	4680      	mov	r8, r0
   87fa2:	4630      	mov	r0, r6
   87fa4:	4689      	mov	r9, r1
   87fa6:	f003 fa75 	bl	8b494 <__aeabi_i2d>
   87faa:	a345      	add	r3, pc, #276	; (adr r3, 880c0 <_dtoa_r+0x208>)
   87fac:	e9d3 2300 	ldrd	r2, r3, [r3]
   87fb0:	f003 fada 	bl	8b568 <__aeabi_dmul>
   87fb4:	4602      	mov	r2, r0
   87fb6:	460b      	mov	r3, r1
   87fb8:	4640      	mov	r0, r8
   87fba:	4649      	mov	r1, r9
   87fbc:	f003 f91e 	bl	8b1fc <__adddf3>
   87fc0:	4680      	mov	r8, r0
   87fc2:	4689      	mov	r9, r1
   87fc4:	f003 fd80 	bl	8bac8 <__aeabi_d2iz>
   87fc8:	2200      	movs	r2, #0
   87fca:	4683      	mov	fp, r0
   87fcc:	2300      	movs	r3, #0
   87fce:	4640      	mov	r0, r8
   87fd0:	4649      	mov	r1, r9
   87fd2:	f003 fd3b 	bl	8ba4c <__aeabi_dcmplt>
   87fd6:	2800      	cmp	r0, #0
   87fd8:	f040 827e 	bne.w	884d8 <_dtoa_r+0x620>
   87fdc:	f1bb 0f16 	cmp.w	fp, #22
   87fe0:	f200 826d 	bhi.w	884be <_dtoa_r+0x606>
   87fe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87fe8:	4b3a      	ldr	r3, [pc, #232]	; (880d4 <_dtoa_r+0x21c>)
   87fea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   87fee:	e9d3 2300 	ldrd	r2, r3, [r3]
   87ff2:	f003 fd2b 	bl	8ba4c <__aeabi_dcmplt>
   87ff6:	2800      	cmp	r0, #0
   87ff8:	d072      	beq.n	880e0 <_dtoa_r+0x228>
   87ffa:	2300      	movs	r3, #0
   87ffc:	1bbe      	subs	r6, r7, r6
   87ffe:	930e      	str	r3, [sp, #56]	; 0x38
   88000:	1e73      	subs	r3, r6, #1
   88002:	f10b 3bff 	add.w	fp, fp, #4294967295
   88006:	9306      	str	r3, [sp, #24]
   88008:	f100 8260 	bmi.w	884cc <_dtoa_r+0x614>
   8800c:	2300      	movs	r3, #0
   8800e:	9309      	str	r3, [sp, #36]	; 0x24
   88010:	f1bb 0f00 	cmp.w	fp, #0
   88014:	da6b      	bge.n	880ee <_dtoa_r+0x236>
   88016:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88018:	f8cd b01c 	str.w	fp, [sp, #28]
   8801c:	eba3 030b 	sub.w	r3, r3, fp
   88020:	9309      	str	r3, [sp, #36]	; 0x24
   88022:	f1cb 0300 	rsb	r3, fp, #0
   88026:	930d      	str	r3, [sp, #52]	; 0x34
   88028:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8802a:	f04f 0b00 	mov.w	fp, #0
   8802e:	2b09      	cmp	r3, #9
   88030:	d866      	bhi.n	88100 <_dtoa_r+0x248>
   88032:	2b05      	cmp	r3, #5
   88034:	f340 834a 	ble.w	886cc <_dtoa_r+0x814>
   88038:	2600      	movs	r6, #0
   8803a:	3b04      	subs	r3, #4
   8803c:	9322      	str	r3, [sp, #136]	; 0x88
   8803e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88040:	3b02      	subs	r3, #2
   88042:	2b03      	cmp	r3, #3
   88044:	f200 866c 	bhi.w	88d20 <_dtoa_r+0xe68>
   88048:	e8df f013 	tbh	[pc, r3, lsl #1]
   8804c:	045e0461 	.word	0x045e0461
   88050:	04380455 	.word	0x04380455
   88054:	f242 730f 	movw	r3, #9999	; 0x270f
   88058:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8805a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   8805e:	6013      	str	r3, [r2, #0]
   88060:	ea5a 0308 	orrs.w	r3, sl, r8
   88064:	d11a      	bne.n	8809c <_dtoa_r+0x1e4>
   88066:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88068:	2b00      	cmp	r3, #0
   8806a:	f000 8668 	beq.w	88d3e <_dtoa_r+0xe86>
   8806e:	4b1a      	ldr	r3, [pc, #104]	; (880d8 <_dtoa_r+0x220>)
   88070:	9303      	str	r3, [sp, #12]
   88072:	3308      	adds	r3, #8
   88074:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88076:	9803      	ldr	r0, [sp, #12]
   88078:	6013      	str	r3, [r2, #0]
   8807a:	b019      	add	sp, #100	; 0x64
   8807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88080:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   88084:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88088:	4608      	mov	r0, r1
   8808a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   8808e:	970f      	str	r7, [sp, #60]	; 0x3c
   88090:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   88094:	9f16      	ldr	r7, [sp, #88]	; 0x58
   88096:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8809a:	e773      	b.n	87f84 <_dtoa_r+0xcc>
   8809c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8809e:	2b00      	cmp	r3, #0
   880a0:	f040 83ef 	bne.w	88882 <_dtoa_r+0x9ca>
   880a4:	4b0d      	ldr	r3, [pc, #52]	; (880dc <_dtoa_r+0x224>)
   880a6:	9303      	str	r3, [sp, #12]
   880a8:	e741      	b.n	87f2e <_dtoa_r+0x76>
   880aa:	bf00      	nop
   880ac:	f3af 8000 	nop.w
   880b0:	636f4361 	.word	0x636f4361
   880b4:	3fd287a7 	.word	0x3fd287a7
   880b8:	8b60c8b3 	.word	0x8b60c8b3
   880bc:	3fc68a28 	.word	0x3fc68a28
   880c0:	509f79fb 	.word	0x509f79fb
   880c4:	3fd34413 	.word	0x3fd34413
   880c8:	7ff00000 	.word	0x7ff00000
   880cc:	0008bf1d 	.word	0x0008bf1d
   880d0:	3ff80000 	.word	0x3ff80000
   880d4:	0008c0c0 	.word	0x0008c0c0
   880d8:	0008bf64 	.word	0x0008bf64
   880dc:	0008bf60 	.word	0x0008bf60
   880e0:	1bbe      	subs	r6, r7, r6
   880e2:	1e73      	subs	r3, r6, #1
   880e4:	9306      	str	r3, [sp, #24]
   880e6:	f100 848a 	bmi.w	889fe <_dtoa_r+0xb46>
   880ea:	900e      	str	r0, [sp, #56]	; 0x38
   880ec:	9009      	str	r0, [sp, #36]	; 0x24
   880ee:	9b06      	ldr	r3, [sp, #24]
   880f0:	445b      	add	r3, fp
   880f2:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   880f6:	2300      	movs	r3, #0
   880f8:	930d      	str	r3, [sp, #52]	; 0x34
   880fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   880fc:	2b09      	cmp	r3, #9
   880fe:	d998      	bls.n	88032 <_dtoa_r+0x17a>
   88100:	2300      	movs	r3, #0
   88102:	9322      	str	r3, [sp, #136]	; 0x88
   88104:	f04f 33ff 	mov.w	r3, #4294967295
   88108:	2601      	movs	r6, #1
   8810a:	9308      	str	r3, [sp, #32]
   8810c:	2300      	movs	r3, #0
   8810e:	960c      	str	r6, [sp, #48]	; 0x30
   88110:	9323      	str	r3, [sp, #140]	; 0x8c
   88112:	2100      	movs	r1, #0
   88114:	9b08      	ldr	r3, [sp, #32]
   88116:	6461      	str	r1, [r4, #68]	; 0x44
   88118:	9312      	str	r3, [sp, #72]	; 0x48
   8811a:	4620      	mov	r0, r4
   8811c:	f001 ff5c 	bl	89fd8 <_Balloc>
   88120:	9003      	str	r0, [sp, #12]
   88122:	2800      	cmp	r0, #0
   88124:	f000 8604 	beq.w	88d30 <_dtoa_r+0xe78>
   88128:	9b03      	ldr	r3, [sp, #12]
   8812a:	6423      	str	r3, [r4, #64]	; 0x40
   8812c:	9b08      	ldr	r3, [sp, #32]
   8812e:	2b0e      	cmp	r3, #14
   88130:	f200 8114 	bhi.w	8835c <_dtoa_r+0x4a4>
   88134:	2e00      	cmp	r6, #0
   88136:	f000 8111 	beq.w	8835c <_dtoa_r+0x4a4>
   8813a:	9907      	ldr	r1, [sp, #28]
   8813c:	2900      	cmp	r1, #0
   8813e:	f340 8460 	ble.w	88a02 <_dtoa_r+0xb4a>
   88142:	4baf      	ldr	r3, [pc, #700]	; (88400 <_dtoa_r+0x548>)
   88144:	f001 020f 	and.w	r2, r1, #15
   88148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8814c:	460a      	mov	r2, r1
   8814e:	e9d3 6700 	ldrd	r6, r7, [r3]
   88152:	ea4f 1821 	mov.w	r8, r1, asr #4
   88156:	05d1      	lsls	r1, r2, #23
   88158:	f140 8417 	bpl.w	8898a <_dtoa_r+0xad2>
   8815c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88160:	4ba8      	ldr	r3, [pc, #672]	; (88404 <_dtoa_r+0x54c>)
   88162:	f04f 0a03 	mov.w	sl, #3
   88166:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8816a:	f003 fb27 	bl	8b7bc <__aeabi_ddiv>
   8816e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88172:	f008 080f 	and.w	r8, r8, #15
   88176:	f1b8 0f00 	cmp.w	r8, #0
   8817a:	d013      	beq.n	881a4 <_dtoa_r+0x2ec>
   8817c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 88404 <_dtoa_r+0x54c>
   88180:	f018 0f01 	tst.w	r8, #1
   88184:	d009      	beq.n	8819a <_dtoa_r+0x2e2>
   88186:	e9d9 2300 	ldrd	r2, r3, [r9]
   8818a:	4630      	mov	r0, r6
   8818c:	4639      	mov	r1, r7
   8818e:	f003 f9eb 	bl	8b568 <__aeabi_dmul>
   88192:	4606      	mov	r6, r0
   88194:	460f      	mov	r7, r1
   88196:	f10a 0a01 	add.w	sl, sl, #1
   8819a:	ea5f 0868 	movs.w	r8, r8, asr #1
   8819e:	f109 0908 	add.w	r9, r9, #8
   881a2:	d1ed      	bne.n	88180 <_dtoa_r+0x2c8>
   881a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   881a8:	4632      	mov	r2, r6
   881aa:	463b      	mov	r3, r7
   881ac:	f003 fb06 	bl	8b7bc <__aeabi_ddiv>
   881b0:	4680      	mov	r8, r0
   881b2:	4689      	mov	r9, r1
   881b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881b6:	b143      	cbz	r3, 881ca <_dtoa_r+0x312>
   881b8:	2200      	movs	r2, #0
   881ba:	4640      	mov	r0, r8
   881bc:	4649      	mov	r1, r9
   881be:	4b92      	ldr	r3, [pc, #584]	; (88408 <_dtoa_r+0x550>)
   881c0:	f003 fc44 	bl	8ba4c <__aeabi_dcmplt>
   881c4:	2800      	cmp	r0, #0
   881c6:	f040 8535 	bne.w	88c34 <_dtoa_r+0xd7c>
   881ca:	4650      	mov	r0, sl
   881cc:	f003 f962 	bl	8b494 <__aeabi_i2d>
   881d0:	4642      	mov	r2, r8
   881d2:	464b      	mov	r3, r9
   881d4:	f003 f9c8 	bl	8b568 <__aeabi_dmul>
   881d8:	4b8c      	ldr	r3, [pc, #560]	; (8840c <_dtoa_r+0x554>)
   881da:	2200      	movs	r2, #0
   881dc:	f003 f80e 	bl	8b1fc <__adddf3>
   881e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   881e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   881e8:	9311      	str	r3, [sp, #68]	; 0x44
   881ea:	9b08      	ldr	r3, [sp, #32]
   881ec:	2b00      	cmp	r3, #0
   881ee:	f000 8097 	beq.w	88320 <_dtoa_r+0x468>
   881f2:	9b07      	ldr	r3, [sp, #28]
   881f4:	9314      	str	r3, [sp, #80]	; 0x50
   881f6:	9b08      	ldr	r3, [sp, #32]
   881f8:	9313      	str	r3, [sp, #76]	; 0x4c
   881fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   881fc:	2b00      	cmp	r3, #0
   881fe:	f000 84a9 	beq.w	88b54 <_dtoa_r+0xc9c>
   88202:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88204:	4b7e      	ldr	r3, [pc, #504]	; (88400 <_dtoa_r+0x548>)
   88206:	2000      	movs	r0, #0
   88208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8820c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   88210:	497f      	ldr	r1, [pc, #508]	; (88410 <_dtoa_r+0x558>)
   88212:	f003 fad3 	bl	8b7bc <__aeabi_ddiv>
   88216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8821a:	f002 ffed 	bl	8b1f8 <__aeabi_dsub>
   8821e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88222:	4649      	mov	r1, r9
   88224:	4640      	mov	r0, r8
   88226:	f003 fc4f 	bl	8bac8 <__aeabi_d2iz>
   8822a:	4607      	mov	r7, r0
   8822c:	f003 f932 	bl	8b494 <__aeabi_i2d>
   88230:	4602      	mov	r2, r0
   88232:	460b      	mov	r3, r1
   88234:	4640      	mov	r0, r8
   88236:	4649      	mov	r1, r9
   88238:	f002 ffde 	bl	8b1f8 <__aeabi_dsub>
   8823c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88240:	9e03      	ldr	r6, [sp, #12]
   88242:	3730      	adds	r7, #48	; 0x30
   88244:	f806 7b01 	strb.w	r7, [r6], #1
   88248:	4680      	mov	r8, r0
   8824a:	4689      	mov	r9, r1
   8824c:	f003 fbfe 	bl	8ba4c <__aeabi_dcmplt>
   88250:	2800      	cmp	r0, #0
   88252:	f040 852e 	bne.w	88cb2 <_dtoa_r+0xdfa>
   88256:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   8825a:	2700      	movs	r7, #0
   8825c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   88260:	9510      	str	r5, [sp, #64]	; 0x40
   88262:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   88264:	9413      	str	r4, [sp, #76]	; 0x4c
   88266:	e02a      	b.n	882be <_dtoa_r+0x406>
   88268:	3701      	adds	r7, #1
   8826a:	42af      	cmp	r7, r5
   8826c:	f280 852e 	bge.w	88ccc <_dtoa_r+0xe14>
   88270:	4650      	mov	r0, sl
   88272:	4659      	mov	r1, fp
   88274:	2200      	movs	r2, #0
   88276:	4b67      	ldr	r3, [pc, #412]	; (88414 <_dtoa_r+0x55c>)
   88278:	f003 f976 	bl	8b568 <__aeabi_dmul>
   8827c:	2200      	movs	r2, #0
   8827e:	4b65      	ldr	r3, [pc, #404]	; (88414 <_dtoa_r+0x55c>)
   88280:	4682      	mov	sl, r0
   88282:	468b      	mov	fp, r1
   88284:	4640      	mov	r0, r8
   88286:	4649      	mov	r1, r9
   88288:	f003 f96e 	bl	8b568 <__aeabi_dmul>
   8828c:	4689      	mov	r9, r1
   8828e:	4680      	mov	r8, r0
   88290:	f003 fc1a 	bl	8bac8 <__aeabi_d2iz>
   88294:	4604      	mov	r4, r0
   88296:	f003 f8fd 	bl	8b494 <__aeabi_i2d>
   8829a:	4602      	mov	r2, r0
   8829c:	460b      	mov	r3, r1
   8829e:	4640      	mov	r0, r8
   882a0:	4649      	mov	r1, r9
   882a2:	f002 ffa9 	bl	8b1f8 <__aeabi_dsub>
   882a6:	3430      	adds	r4, #48	; 0x30
   882a8:	4652      	mov	r2, sl
   882aa:	465b      	mov	r3, fp
   882ac:	f806 4b01 	strb.w	r4, [r6], #1
   882b0:	4680      	mov	r8, r0
   882b2:	4689      	mov	r9, r1
   882b4:	f003 fbca 	bl	8ba4c <__aeabi_dcmplt>
   882b8:	2800      	cmp	r0, #0
   882ba:	f040 84f8 	bne.w	88cae <_dtoa_r+0xdf6>
   882be:	4642      	mov	r2, r8
   882c0:	464b      	mov	r3, r9
   882c2:	2000      	movs	r0, #0
   882c4:	4950      	ldr	r1, [pc, #320]	; (88408 <_dtoa_r+0x550>)
   882c6:	f002 ff97 	bl	8b1f8 <__aeabi_dsub>
   882ca:	4652      	mov	r2, sl
   882cc:	465b      	mov	r3, fp
   882ce:	f003 fbbd 	bl	8ba4c <__aeabi_dcmplt>
   882d2:	2800      	cmp	r0, #0
   882d4:	d0c8      	beq.n	88268 <_dtoa_r+0x3b0>
   882d6:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   882da:	9d10      	ldr	r5, [sp, #64]	; 0x40
   882dc:	9a03      	ldr	r2, [sp, #12]
   882de:	9307      	str	r3, [sp, #28]
   882e0:	e002      	b.n	882e8 <_dtoa_r+0x430>
   882e2:	4296      	cmp	r6, r2
   882e4:	f000 84cd 	beq.w	88c82 <_dtoa_r+0xdca>
   882e8:	46b2      	mov	sl, r6
   882ea:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   882ee:	2b39      	cmp	r3, #57	; 0x39
   882f0:	d0f7      	beq.n	882e2 <_dtoa_r+0x42a>
   882f2:	3301      	adds	r3, #1
   882f4:	b2db      	uxtb	r3, r3
   882f6:	7033      	strb	r3, [r6, #0]
   882f8:	9b07      	ldr	r3, [sp, #28]
   882fa:	3301      	adds	r3, #1
   882fc:	9307      	str	r3, [sp, #28]
   882fe:	e1c8      	b.n	88692 <_dtoa_r+0x7da>
   88300:	4650      	mov	r0, sl
   88302:	f003 f8c7 	bl	8b494 <__aeabi_i2d>
   88306:	4642      	mov	r2, r8
   88308:	464b      	mov	r3, r9
   8830a:	f003 f92d 	bl	8b568 <__aeabi_dmul>
   8830e:	4b3f      	ldr	r3, [pc, #252]	; (8840c <_dtoa_r+0x554>)
   88310:	2200      	movs	r2, #0
   88312:	f002 ff73 	bl	8b1fc <__adddf3>
   88316:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   8831a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8831e:	9311      	str	r3, [sp, #68]	; 0x44
   88320:	4640      	mov	r0, r8
   88322:	4649      	mov	r1, r9
   88324:	2200      	movs	r2, #0
   88326:	4b3c      	ldr	r3, [pc, #240]	; (88418 <_dtoa_r+0x560>)
   88328:	f002 ff66 	bl	8b1f8 <__aeabi_dsub>
   8832c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   88330:	464b      	mov	r3, r9
   88332:	4642      	mov	r2, r8
   88334:	4606      	mov	r6, r0
   88336:	460f      	mov	r7, r1
   88338:	f003 fba6 	bl	8ba88 <__aeabi_dcmpgt>
   8833c:	4681      	mov	r9, r0
   8833e:	2800      	cmp	r0, #0
   88340:	f040 84af 	bne.w	88ca2 <_dtoa_r+0xdea>
   88344:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88348:	4602      	mov	r2, r0
   8834a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   8834e:	4630      	mov	r0, r6
   88350:	4639      	mov	r1, r7
   88352:	f003 fb7b 	bl	8ba4c <__aeabi_dcmplt>
   88356:	2800      	cmp	r0, #0
   88358:	f040 8348 	bne.w	889ec <_dtoa_r+0xb34>
   8835c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8835e:	2b00      	cmp	r3, #0
   88360:	f2c0 808c 	blt.w	8847c <_dtoa_r+0x5c4>
   88364:	9a07      	ldr	r2, [sp, #28]
   88366:	2a0e      	cmp	r2, #14
   88368:	f300 8088 	bgt.w	8847c <_dtoa_r+0x5c4>
   8836c:	4b24      	ldr	r3, [pc, #144]	; (88400 <_dtoa_r+0x548>)
   8836e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88372:	e9d3 ab00 	ldrd	sl, fp, [r3]
   88376:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88378:	2b00      	cmp	r3, #0
   8837a:	da1b      	bge.n	883b4 <_dtoa_r+0x4fc>
   8837c:	9b08      	ldr	r3, [sp, #32]
   8837e:	2b00      	cmp	r3, #0
   88380:	dc18      	bgt.n	883b4 <_dtoa_r+0x4fc>
   88382:	f040 8331 	bne.w	889e8 <_dtoa_r+0xb30>
   88386:	2200      	movs	r2, #0
   88388:	4b23      	ldr	r3, [pc, #140]	; (88418 <_dtoa_r+0x560>)
   8838a:	4650      	mov	r0, sl
   8838c:	4659      	mov	r1, fp
   8838e:	f003 f8eb 	bl	8b568 <__aeabi_dmul>
   88392:	4602      	mov	r2, r0
   88394:	460b      	mov	r3, r1
   88396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   8839a:	f003 fb61 	bl	8ba60 <__aeabi_dcmple>
   8839e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   883a2:	464e      	mov	r6, r9
   883a4:	2800      	cmp	r0, #0
   883a6:	f000 82ca 	beq.w	8893e <_dtoa_r+0xa86>
   883aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   883ac:	f8dd 800c 	ldr.w	r8, [sp, #12]
   883b0:	43df      	mvns	r7, r3
   883b2:	e2cc      	b.n	8894e <_dtoa_r+0xa96>
   883b4:	4652      	mov	r2, sl
   883b6:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   883ba:	465b      	mov	r3, fp
   883bc:	4638      	mov	r0, r7
   883be:	4641      	mov	r1, r8
   883c0:	f003 f9fc 	bl	8b7bc <__aeabi_ddiv>
   883c4:	f003 fb80 	bl	8bac8 <__aeabi_d2iz>
   883c8:	4681      	mov	r9, r0
   883ca:	9009      	str	r0, [sp, #36]	; 0x24
   883cc:	f003 f862 	bl	8b494 <__aeabi_i2d>
   883d0:	4652      	mov	r2, sl
   883d2:	465b      	mov	r3, fp
   883d4:	f003 f8c8 	bl	8b568 <__aeabi_dmul>
   883d8:	9e03      	ldr	r6, [sp, #12]
   883da:	460b      	mov	r3, r1
   883dc:	4602      	mov	r2, r0
   883de:	4641      	mov	r1, r8
   883e0:	4638      	mov	r0, r7
   883e2:	f002 ff09 	bl	8b1f8 <__aeabi_dsub>
   883e6:	f109 0330 	add.w	r3, r9, #48	; 0x30
   883ea:	f806 3b01 	strb.w	r3, [r6], #1
   883ee:	9b08      	ldr	r3, [sp, #32]
   883f0:	2b01      	cmp	r3, #1
   883f2:	f000 835f 	beq.w	88ab4 <_dtoa_r+0xbfc>
   883f6:	9406      	str	r4, [sp, #24]
   883f8:	2701      	movs	r7, #1
   883fa:	461c      	mov	r4, r3
   883fc:	9504      	str	r5, [sp, #16]
   883fe:	e02a      	b.n	88456 <_dtoa_r+0x59e>
   88400:	0008c0c0 	.word	0x0008c0c0
   88404:	0008c098 	.word	0x0008c098
   88408:	3ff00000 	.word	0x3ff00000
   8840c:	401c0000 	.word	0x401c0000
   88410:	3fe00000 	.word	0x3fe00000
   88414:	40240000 	.word	0x40240000
   88418:	40140000 	.word	0x40140000
   8841c:	4652      	mov	r2, sl
   8841e:	465b      	mov	r3, fp
   88420:	4640      	mov	r0, r8
   88422:	4649      	mov	r1, r9
   88424:	f003 f9ca 	bl	8b7bc <__aeabi_ddiv>
   88428:	f003 fb4e 	bl	8bac8 <__aeabi_d2iz>
   8842c:	4605      	mov	r5, r0
   8842e:	f003 f831 	bl	8b494 <__aeabi_i2d>
   88432:	4652      	mov	r2, sl
   88434:	465b      	mov	r3, fp
   88436:	f003 f897 	bl	8b568 <__aeabi_dmul>
   8843a:	3701      	adds	r7, #1
   8843c:	460b      	mov	r3, r1
   8843e:	4602      	mov	r2, r0
   88440:	4649      	mov	r1, r9
   88442:	4640      	mov	r0, r8
   88444:	f002 fed8 	bl	8b1f8 <__aeabi_dsub>
   88448:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8844c:	42a7      	cmp	r7, r4
   8844e:	f806 3b01 	strb.w	r3, [r6], #1
   88452:	f000 832c 	beq.w	88aae <_dtoa_r+0xbf6>
   88456:	2200      	movs	r2, #0
   88458:	4bab      	ldr	r3, [pc, #684]	; (88708 <_dtoa_r+0x850>)
   8845a:	f003 f885 	bl	8b568 <__aeabi_dmul>
   8845e:	2200      	movs	r2, #0
   88460:	2300      	movs	r3, #0
   88462:	4680      	mov	r8, r0
   88464:	4689      	mov	r9, r1
   88466:	f003 fae7 	bl	8ba38 <__aeabi_dcmpeq>
   8846a:	2800      	cmp	r0, #0
   8846c:	d0d6      	beq.n	8841c <_dtoa_r+0x564>
   8846e:	9d04      	ldr	r5, [sp, #16]
   88470:	9c06      	ldr	r4, [sp, #24]
   88472:	9b07      	ldr	r3, [sp, #28]
   88474:	46b2      	mov	sl, r6
   88476:	3301      	adds	r3, #1
   88478:	9307      	str	r3, [sp, #28]
   8847a:	e10a      	b.n	88692 <_dtoa_r+0x7da>
   8847c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8847e:	2a00      	cmp	r2, #0
   88480:	d03d      	beq.n	884fe <_dtoa_r+0x646>
   88482:	9a22      	ldr	r2, [sp, #136]	; 0x88
   88484:	2a01      	cmp	r2, #1
   88486:	f340 829f 	ble.w	889c8 <_dtoa_r+0xb10>
   8848a:	9b08      	ldr	r3, [sp, #32]
   8848c:	f103 38ff 	add.w	r8, r3, #4294967295
   88490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88492:	4543      	cmp	r3, r8
   88494:	f2c0 8270 	blt.w	88978 <_dtoa_r+0xac0>
   88498:	eba3 0808 	sub.w	r8, r3, r8
   8849c:	9b08      	ldr	r3, [sp, #32]
   8849e:	2b00      	cmp	r3, #0
   884a0:	f2c0 8340 	blt.w	88b24 <_dtoa_r+0xc6c>
   884a4:	9a06      	ldr	r2, [sp, #24]
   884a6:	441a      	add	r2, r3
   884a8:	9206      	str	r2, [sp, #24]
   884aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   884ac:	4617      	mov	r7, r2
   884ae:	441a      	add	r2, r3
   884b0:	9209      	str	r2, [sp, #36]	; 0x24
   884b2:	2101      	movs	r1, #1
   884b4:	4620      	mov	r0, r4
   884b6:	f001 fe5d 	bl	8a174 <__i2b>
   884ba:	4606      	mov	r6, r0
   884bc:	e023      	b.n	88506 <_dtoa_r+0x64e>
   884be:	2301      	movs	r3, #1
   884c0:	1bbe      	subs	r6, r7, r6
   884c2:	930e      	str	r3, [sp, #56]	; 0x38
   884c4:	1e73      	subs	r3, r6, #1
   884c6:	9306      	str	r3, [sp, #24]
   884c8:	f57f ada0 	bpl.w	8800c <_dtoa_r+0x154>
   884cc:	f1c6 0301 	rsb	r3, r6, #1
   884d0:	9309      	str	r3, [sp, #36]	; 0x24
   884d2:	2300      	movs	r3, #0
   884d4:	9306      	str	r3, [sp, #24]
   884d6:	e59b      	b.n	88010 <_dtoa_r+0x158>
   884d8:	4658      	mov	r0, fp
   884da:	f002 ffdb 	bl	8b494 <__aeabi_i2d>
   884de:	4642      	mov	r2, r8
   884e0:	464b      	mov	r3, r9
   884e2:	f003 faa9 	bl	8ba38 <__aeabi_dcmpeq>
   884e6:	2800      	cmp	r0, #0
   884e8:	f47f ad78 	bne.w	87fdc <_dtoa_r+0x124>
   884ec:	f10b 3bff 	add.w	fp, fp, #4294967295
   884f0:	e574      	b.n	87fdc <_dtoa_r+0x124>
   884f2:	4b86      	ldr	r3, [pc, #536]	; (8870c <_dtoa_r+0x854>)
   884f4:	9303      	str	r3, [sp, #12]
   884f6:	9803      	ldr	r0, [sp, #12]
   884f8:	b019      	add	sp, #100	; 0x64
   884fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   884fe:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   88502:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88504:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   88506:	2f00      	cmp	r7, #0
   88508:	dd0c      	ble.n	88524 <_dtoa_r+0x66c>
   8850a:	9906      	ldr	r1, [sp, #24]
   8850c:	2900      	cmp	r1, #0
   8850e:	460b      	mov	r3, r1
   88510:	dd08      	ble.n	88524 <_dtoa_r+0x66c>
   88512:	42b9      	cmp	r1, r7
   88514:	bfa8      	it	ge
   88516:	463b      	movge	r3, r7
   88518:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8851a:	1aff      	subs	r7, r7, r3
   8851c:	1ad2      	subs	r2, r2, r3
   8851e:	1acb      	subs	r3, r1, r3
   88520:	9209      	str	r2, [sp, #36]	; 0x24
   88522:	9306      	str	r3, [sp, #24]
   88524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88526:	b1e3      	cbz	r3, 88562 <_dtoa_r+0x6aa>
   88528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8852a:	2b00      	cmp	r3, #0
   8852c:	f000 8260 	beq.w	889f0 <_dtoa_r+0xb38>
   88530:	f1b8 0f00 	cmp.w	r8, #0
   88534:	dd10      	ble.n	88558 <_dtoa_r+0x6a0>
   88536:	4631      	mov	r1, r6
   88538:	4642      	mov	r2, r8
   8853a:	4620      	mov	r0, r4
   8853c:	f001 fef6 	bl	8a32c <__pow5mult>
   88540:	4606      	mov	r6, r0
   88542:	462a      	mov	r2, r5
   88544:	4631      	mov	r1, r6
   88546:	4620      	mov	r0, r4
   88548:	f001 fe42 	bl	8a1d0 <__multiply>
   8854c:	4603      	mov	r3, r0
   8854e:	4629      	mov	r1, r5
   88550:	4620      	mov	r0, r4
   88552:	461d      	mov	r5, r3
   88554:	f001 fd66 	bl	8a024 <_Bfree>
   88558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8855a:	ebb3 0208 	subs.w	r2, r3, r8
   8855e:	f040 82db 	bne.w	88b18 <_dtoa_r+0xc60>
   88562:	2101      	movs	r1, #1
   88564:	4620      	mov	r0, r4
   88566:	f001 fe05 	bl	8a174 <__i2b>
   8856a:	f1bb 0f00 	cmp.w	fp, #0
   8856e:	4681      	mov	r9, r0
   88570:	f300 80b3 	bgt.w	886da <_dtoa_r+0x822>
   88574:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88576:	2b01      	cmp	r3, #1
   88578:	f340 8188 	ble.w	8888c <_dtoa_r+0x9d4>
   8857c:	f04f 0a00 	mov.w	sl, #0
   88580:	2001      	movs	r0, #1
   88582:	f1bb 0f00 	cmp.w	fp, #0
   88586:	f040 80b4 	bne.w	886f2 <_dtoa_r+0x83a>
   8858a:	9a06      	ldr	r2, [sp, #24]
   8858c:	4410      	add	r0, r2
   8858e:	f010 001f 	ands.w	r0, r0, #31
   88592:	f000 8092 	beq.w	886ba <_dtoa_r+0x802>
   88596:	f1c0 0320 	rsb	r3, r0, #32
   8859a:	2b04      	cmp	r3, #4
   8859c:	f340 83d3 	ble.w	88d46 <_dtoa_r+0xe8e>
   885a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   885a2:	f1c0 001c 	rsb	r0, r0, #28
   885a6:	4403      	add	r3, r0
   885a8:	4402      	add	r2, r0
   885aa:	9309      	str	r3, [sp, #36]	; 0x24
   885ac:	4407      	add	r7, r0
   885ae:	9206      	str	r2, [sp, #24]
   885b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   885b2:	2b00      	cmp	r3, #0
   885b4:	dd05      	ble.n	885c2 <_dtoa_r+0x70a>
   885b6:	4629      	mov	r1, r5
   885b8:	461a      	mov	r2, r3
   885ba:	4620      	mov	r0, r4
   885bc:	f001 ff12 	bl	8a3e4 <__lshift>
   885c0:	4605      	mov	r5, r0
   885c2:	9b06      	ldr	r3, [sp, #24]
   885c4:	2b00      	cmp	r3, #0
   885c6:	dd05      	ble.n	885d4 <_dtoa_r+0x71c>
   885c8:	4649      	mov	r1, r9
   885ca:	461a      	mov	r2, r3
   885cc:	4620      	mov	r0, r4
   885ce:	f001 ff09 	bl	8a3e4 <__lshift>
   885d2:	4681      	mov	r9, r0
   885d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   885d6:	2b00      	cmp	r3, #0
   885d8:	f040 8138 	bne.w	8884c <_dtoa_r+0x994>
   885dc:	9b08      	ldr	r3, [sp, #32]
   885de:	2b00      	cmp	r3, #0
   885e0:	f340 811e 	ble.w	88820 <_dtoa_r+0x968>
   885e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   885e6:	2b00      	cmp	r3, #0
   885e8:	f040 809f 	bne.w	8872a <_dtoa_r+0x872>
   885ec:	9b07      	ldr	r3, [sp, #28]
   885ee:	3301      	adds	r3, #1
   885f0:	9307      	str	r3, [sp, #28]
   885f2:	2701      	movs	r7, #1
   885f4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   885f8:	f8dd a020 	ldr.w	sl, [sp, #32]
   885fc:	e007      	b.n	8860e <_dtoa_r+0x756>
   885fe:	4629      	mov	r1, r5
   88600:	2300      	movs	r3, #0
   88602:	220a      	movs	r2, #10
   88604:	4620      	mov	r0, r4
   88606:	f001 fd17 	bl	8a038 <__multadd>
   8860a:	4605      	mov	r5, r0
   8860c:	3701      	adds	r7, #1
   8860e:	4649      	mov	r1, r9
   88610:	4628      	mov	r0, r5
   88612:	f7ff fbbb 	bl	87d8c <quorem>
   88616:	4557      	cmp	r7, sl
   88618:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8861c:	f808 3b01 	strb.w	r3, [r8], #1
   88620:	dbed      	blt.n	885fe <_dtoa_r+0x746>
   88622:	9a08      	ldr	r2, [sp, #32]
   88624:	2700      	movs	r7, #0
   88626:	2a00      	cmp	r2, #0
   88628:	bfcc      	ite	gt
   8862a:	4693      	movgt	fp, r2
   8862c:	f04f 0b01 	movle.w	fp, #1
   88630:	9a03      	ldr	r2, [sp, #12]
   88632:	4493      	add	fp, r2
   88634:	4629      	mov	r1, r5
   88636:	2201      	movs	r2, #1
   88638:	4620      	mov	r0, r4
   8863a:	9304      	str	r3, [sp, #16]
   8863c:	f001 fed2 	bl	8a3e4 <__lshift>
   88640:	4649      	mov	r1, r9
   88642:	4605      	mov	r5, r0
   88644:	f001 ff44 	bl	8a4d0 <__mcmp>
   88648:	2800      	cmp	r0, #0
   8864a:	f340 81ab 	ble.w	889a4 <_dtoa_r+0xaec>
   8864e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   88652:	9a03      	ldr	r2, [sp, #12]
   88654:	f10b 3bff 	add.w	fp, fp, #4294967295
   88658:	e004      	b.n	88664 <_dtoa_r+0x7ac>
   8865a:	455a      	cmp	r2, fp
   8865c:	f000 81ad 	beq.w	889ba <_dtoa_r+0xb02>
   88660:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   88664:	2b39      	cmp	r3, #57	; 0x39
   88666:	f10b 0a01 	add.w	sl, fp, #1
   8866a:	d0f6      	beq.n	8865a <_dtoa_r+0x7a2>
   8866c:	3301      	adds	r3, #1
   8866e:	f88b 3000 	strb.w	r3, [fp]
   88672:	4649      	mov	r1, r9
   88674:	4620      	mov	r0, r4
   88676:	f001 fcd5 	bl	8a024 <_Bfree>
   8867a:	b156      	cbz	r6, 88692 <_dtoa_r+0x7da>
   8867c:	b12f      	cbz	r7, 8868a <_dtoa_r+0x7d2>
   8867e:	42b7      	cmp	r7, r6
   88680:	d003      	beq.n	8868a <_dtoa_r+0x7d2>
   88682:	4639      	mov	r1, r7
   88684:	4620      	mov	r0, r4
   88686:	f001 fccd 	bl	8a024 <_Bfree>
   8868a:	4631      	mov	r1, r6
   8868c:	4620      	mov	r0, r4
   8868e:	f001 fcc9 	bl	8a024 <_Bfree>
   88692:	4629      	mov	r1, r5
   88694:	4620      	mov	r0, r4
   88696:	f001 fcc5 	bl	8a024 <_Bfree>
   8869a:	2300      	movs	r3, #0
   8869c:	9a07      	ldr	r2, [sp, #28]
   8869e:	f88a 3000 	strb.w	r3, [sl]
   886a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   886a4:	601a      	str	r2, [r3, #0]
   886a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   886a8:	2b00      	cmp	r3, #0
   886aa:	f43f ac40 	beq.w	87f2e <_dtoa_r+0x76>
   886ae:	9803      	ldr	r0, [sp, #12]
   886b0:	f8c3 a000 	str.w	sl, [r3]
   886b4:	b019      	add	sp, #100	; 0x64
   886b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   886ba:	201c      	movs	r0, #28
   886bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   886be:	4407      	add	r7, r0
   886c0:	4403      	add	r3, r0
   886c2:	9309      	str	r3, [sp, #36]	; 0x24
   886c4:	9b06      	ldr	r3, [sp, #24]
   886c6:	4403      	add	r3, r0
   886c8:	9306      	str	r3, [sp, #24]
   886ca:	e771      	b.n	885b0 <_dtoa_r+0x6f8>
   886cc:	2601      	movs	r6, #1
   886ce:	e4b6      	b.n	8803e <_dtoa_r+0x186>
   886d0:	f1c0 0020 	rsb	r0, r0, #32
   886d4:	fa08 f000 	lsl.w	r0, r8, r0
   886d8:	e44d      	b.n	87f76 <_dtoa_r+0xbe>
   886da:	4601      	mov	r1, r0
   886dc:	465a      	mov	r2, fp
   886de:	4620      	mov	r0, r4
   886e0:	f001 fe24 	bl	8a32c <__pow5mult>
   886e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   886e6:	4681      	mov	r9, r0
   886e8:	2b01      	cmp	r3, #1
   886ea:	f340 81b6 	ble.w	88a5a <_dtoa_r+0xba2>
   886ee:	f04f 0a00 	mov.w	sl, #0
   886f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   886f6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   886fa:	6918      	ldr	r0, [r3, #16]
   886fc:	f001 fcee 	bl	8a0dc <__hi0bits>
   88700:	f1c0 0020 	rsb	r0, r0, #32
   88704:	e741      	b.n	8858a <_dtoa_r+0x6d2>
   88706:	bf00      	nop
   88708:	40240000 	.word	0x40240000
   8870c:	0008bf1c 	.word	0x0008bf1c
   88710:	4631      	mov	r1, r6
   88712:	2300      	movs	r3, #0
   88714:	220a      	movs	r2, #10
   88716:	4620      	mov	r0, r4
   88718:	f001 fc8e 	bl	8a038 <__multadd>
   8871c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8871e:	4606      	mov	r6, r0
   88720:	2b00      	cmp	r3, #0
   88722:	f340 82e9 	ble.w	88cf8 <_dtoa_r+0xe40>
   88726:	e9cd 8307 	strd	r8, r3, [sp, #28]
   8872a:	2f00      	cmp	r7, #0
   8872c:	f300 811d 	bgt.w	8896a <_dtoa_r+0xab2>
   88730:	f1ba 0f00 	cmp.w	sl, #0
   88734:	f040 81d9 	bne.w	88aea <_dtoa_r+0xc32>
   88738:	46b0      	mov	r8, r6
   8873a:	9b04      	ldr	r3, [sp, #16]
   8873c:	9908      	ldr	r1, [sp, #32]
   8873e:	f003 0201 	and.w	r2, r3, #1
   88742:	9b03      	ldr	r3, [sp, #12]
   88744:	920a      	str	r2, [sp, #40]	; 0x28
   88746:	461f      	mov	r7, r3
   88748:	3b01      	subs	r3, #1
   8874a:	4419      	add	r1, r3
   8874c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8874e:	9108      	str	r1, [sp, #32]
   88750:	4313      	orrs	r3, r2
   88752:	9309      	str	r3, [sp, #36]	; 0x24
   88754:	4649      	mov	r1, r9
   88756:	4628      	mov	r0, r5
   88758:	f7ff fb18 	bl	87d8c <quorem>
   8875c:	4631      	mov	r1, r6
   8875e:	4683      	mov	fp, r0
   88760:	4628      	mov	r0, r5
   88762:	f001 feb5 	bl	8a4d0 <__mcmp>
   88766:	4642      	mov	r2, r8
   88768:	4649      	mov	r1, r9
   8876a:	4682      	mov	sl, r0
   8876c:	4620      	mov	r0, r4
   8876e:	f001 fecf 	bl	8a510 <__mdiff>
   88772:	68c2      	ldr	r2, [r0, #12]
   88774:	4601      	mov	r1, r0
   88776:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8877a:	2a00      	cmp	r2, #0
   8877c:	d143      	bne.n	88806 <_dtoa_r+0x94e>
   8877e:	9004      	str	r0, [sp, #16]
   88780:	4628      	mov	r0, r5
   88782:	9306      	str	r3, [sp, #24]
   88784:	f001 fea4 	bl	8a4d0 <__mcmp>
   88788:	4602      	mov	r2, r0
   8878a:	9904      	ldr	r1, [sp, #16]
   8878c:	4620      	mov	r0, r4
   8878e:	9204      	str	r2, [sp, #16]
   88790:	f001 fc48 	bl	8a024 <_Bfree>
   88794:	9a04      	ldr	r2, [sp, #16]
   88796:	9b06      	ldr	r3, [sp, #24]
   88798:	b91a      	cbnz	r2, 887a2 <_dtoa_r+0x8ea>
   8879a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8879c:	2900      	cmp	r1, #0
   8879e:	f000 829b 	beq.w	88cd8 <_dtoa_r+0xe20>
   887a2:	f1ba 0f00 	cmp.w	sl, #0
   887a6:	f2c0 8164 	blt.w	88a72 <_dtoa_r+0xbba>
   887aa:	9922      	ldr	r1, [sp, #136]	; 0x88
   887ac:	ea4a 0a01 	orr.w	sl, sl, r1
   887b0:	990a      	ldr	r1, [sp, #40]	; 0x28
   887b2:	ea51 010a 	orrs.w	r1, r1, sl
   887b6:	f000 815c 	beq.w	88a72 <_dtoa_r+0xbba>
   887ba:	2a00      	cmp	r2, #0
   887bc:	f300 81b6 	bgt.w	88b2c <_dtoa_r+0xc74>
   887c0:	9a08      	ldr	r2, [sp, #32]
   887c2:	f107 0a01 	add.w	sl, r7, #1
   887c6:	4297      	cmp	r7, r2
   887c8:	46d3      	mov	fp, sl
   887ca:	703b      	strb	r3, [r7, #0]
   887cc:	f000 81b4 	beq.w	88b38 <_dtoa_r+0xc80>
   887d0:	4629      	mov	r1, r5
   887d2:	2300      	movs	r3, #0
   887d4:	220a      	movs	r2, #10
   887d6:	4620      	mov	r0, r4
   887d8:	f001 fc2e 	bl	8a038 <__multadd>
   887dc:	4546      	cmp	r6, r8
   887de:	4605      	mov	r5, r0
   887e0:	4631      	mov	r1, r6
   887e2:	f04f 0300 	mov.w	r3, #0
   887e6:	f04f 020a 	mov.w	r2, #10
   887ea:	4620      	mov	r0, r4
   887ec:	d012      	beq.n	88814 <_dtoa_r+0x95c>
   887ee:	f001 fc23 	bl	8a038 <__multadd>
   887f2:	4641      	mov	r1, r8
   887f4:	4606      	mov	r6, r0
   887f6:	2300      	movs	r3, #0
   887f8:	220a      	movs	r2, #10
   887fa:	4620      	mov	r0, r4
   887fc:	f001 fc1c 	bl	8a038 <__multadd>
   88800:	4657      	mov	r7, sl
   88802:	4680      	mov	r8, r0
   88804:	e7a6      	b.n	88754 <_dtoa_r+0x89c>
   88806:	4620      	mov	r0, r4
   88808:	9304      	str	r3, [sp, #16]
   8880a:	f001 fc0b 	bl	8a024 <_Bfree>
   8880e:	2201      	movs	r2, #1
   88810:	9b04      	ldr	r3, [sp, #16]
   88812:	e7c6      	b.n	887a2 <_dtoa_r+0x8ea>
   88814:	f001 fc10 	bl	8a038 <__multadd>
   88818:	4657      	mov	r7, sl
   8881a:	4606      	mov	r6, r0
   8881c:	4680      	mov	r8, r0
   8881e:	e799      	b.n	88754 <_dtoa_r+0x89c>
   88820:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88822:	2b02      	cmp	r3, #2
   88824:	dc7a      	bgt.n	8891c <_dtoa_r+0xa64>
   88826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88828:	2b00      	cmp	r3, #0
   8882a:	f47f af7e 	bne.w	8872a <_dtoa_r+0x872>
   8882e:	9b07      	ldr	r3, [sp, #28]
   88830:	4649      	mov	r1, r9
   88832:	3301      	adds	r3, #1
   88834:	4628      	mov	r0, r5
   88836:	9307      	str	r3, [sp, #28]
   88838:	f7ff faa8 	bl	87d8c <quorem>
   8883c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   88840:	f100 0330 	add.w	r3, r0, #48	; 0x30
   88844:	2700      	movs	r7, #0
   88846:	f80b 3b01 	strb.w	r3, [fp], #1
   8884a:	e6f3      	b.n	88634 <_dtoa_r+0x77c>
   8884c:	4649      	mov	r1, r9
   8884e:	4628      	mov	r0, r5
   88850:	f001 fe3e 	bl	8a4d0 <__mcmp>
   88854:	2800      	cmp	r0, #0
   88856:	f6bf aec1 	bge.w	885dc <_dtoa_r+0x724>
   8885a:	4629      	mov	r1, r5
   8885c:	2300      	movs	r3, #0
   8885e:	220a      	movs	r2, #10
   88860:	4620      	mov	r0, r4
   88862:	f001 fbe9 	bl	8a038 <__multadd>
   88866:	9b07      	ldr	r3, [sp, #28]
   88868:	4605      	mov	r5, r0
   8886a:	f103 38ff 	add.w	r8, r3, #4294967295
   8886e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88870:	2b00      	cmp	r3, #0
   88872:	f47f af4d 	bne.w	88710 <_dtoa_r+0x858>
   88876:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88878:	2b00      	cmp	r3, #0
   8887a:	f340 8234 	ble.w	88ce6 <_dtoa_r+0xe2e>
   8887e:	9308      	str	r3, [sp, #32]
   88880:	e6b7      	b.n	885f2 <_dtoa_r+0x73a>
   88882:	4bb0      	ldr	r3, [pc, #704]	; (88b44 <_dtoa_r+0xc8c>)
   88884:	9303      	str	r3, [sp, #12]
   88886:	3303      	adds	r3, #3
   88888:	f7ff bbf4 	b.w	88074 <_dtoa_r+0x1bc>
   8888c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88890:	2900      	cmp	r1, #0
   88892:	f47f ae73 	bne.w	8857c <_dtoa_r+0x6c4>
   88896:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8889a:	2b00      	cmp	r3, #0
   8889c:	f47f ae6e 	bne.w	8857c <_dtoa_r+0x6c4>
   888a0:	4ba9      	ldr	r3, [pc, #676]	; (88b48 <_dtoa_r+0xc90>)
   888a2:	4013      	ands	r3, r2
   888a4:	2b00      	cmp	r3, #0
   888a6:	f000 8200 	beq.w	88caa <_dtoa_r+0xdf2>
   888aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   888ac:	f04f 0a01 	mov.w	sl, #1
   888b0:	3301      	adds	r3, #1
   888b2:	9309      	str	r3, [sp, #36]	; 0x24
   888b4:	9b06      	ldr	r3, [sp, #24]
   888b6:	3301      	adds	r3, #1
   888b8:	9306      	str	r3, [sp, #24]
   888ba:	e661      	b.n	88580 <_dtoa_r+0x6c8>
   888bc:	2301      	movs	r3, #1
   888be:	930c      	str	r3, [sp, #48]	; 0x30
   888c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   888c2:	9a07      	ldr	r2, [sp, #28]
   888c4:	4413      	add	r3, r2
   888c6:	9312      	str	r3, [sp, #72]	; 0x48
   888c8:	3301      	adds	r3, #1
   888ca:	2b01      	cmp	r3, #1
   888cc:	461f      	mov	r7, r3
   888ce:	bfb8      	it	lt
   888d0:	2701      	movlt	r7, #1
   888d2:	9308      	str	r3, [sp, #32]
   888d4:	2100      	movs	r1, #0
   888d6:	2f17      	cmp	r7, #23
   888d8:	6461      	str	r1, [r4, #68]	; 0x44
   888da:	f77f ac1e 	ble.w	8811a <_dtoa_r+0x262>
   888de:	2201      	movs	r2, #1
   888e0:	2304      	movs	r3, #4
   888e2:	005b      	lsls	r3, r3, #1
   888e4:	f103 0014 	add.w	r0, r3, #20
   888e8:	42b8      	cmp	r0, r7
   888ea:	4611      	mov	r1, r2
   888ec:	f102 0201 	add.w	r2, r2, #1
   888f0:	d9f7      	bls.n	888e2 <_dtoa_r+0xa2a>
   888f2:	6461      	str	r1, [r4, #68]	; 0x44
   888f4:	e411      	b.n	8811a <_dtoa_r+0x262>
   888f6:	2301      	movs	r3, #1
   888f8:	930c      	str	r3, [sp, #48]	; 0x30
   888fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   888fc:	2b00      	cmp	r3, #0
   888fe:	dd4c      	ble.n	8899a <_dtoa_r+0xae2>
   88900:	461f      	mov	r7, r3
   88902:	9312      	str	r3, [sp, #72]	; 0x48
   88904:	9308      	str	r3, [sp, #32]
   88906:	e7e5      	b.n	888d4 <_dtoa_r+0xa1c>
   88908:	2300      	movs	r3, #0
   8890a:	930c      	str	r3, [sp, #48]	; 0x30
   8890c:	e7d8      	b.n	888c0 <_dtoa_r+0xa08>
   8890e:	2300      	movs	r3, #0
   88910:	930c      	str	r3, [sp, #48]	; 0x30
   88912:	e7f2      	b.n	888fa <_dtoa_r+0xa42>
   88914:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88916:	f8cd 801c 	str.w	r8, [sp, #28]
   8891a:	9308      	str	r3, [sp, #32]
   8891c:	9b08      	ldr	r3, [sp, #32]
   8891e:	2b00      	cmp	r3, #0
   88920:	f47f ad43 	bne.w	883aa <_dtoa_r+0x4f2>
   88924:	4649      	mov	r1, r9
   88926:	2205      	movs	r2, #5
   88928:	4620      	mov	r0, r4
   8892a:	f001 fb85 	bl	8a038 <__multadd>
   8892e:	4681      	mov	r9, r0
   88930:	4628      	mov	r0, r5
   88932:	4649      	mov	r1, r9
   88934:	f001 fdcc 	bl	8a4d0 <__mcmp>
   88938:	2800      	cmp	r0, #0
   8893a:	f77f ad36 	ble.w	883aa <_dtoa_r+0x4f2>
   8893e:	2331      	movs	r3, #49	; 0x31
   88940:	9803      	ldr	r0, [sp, #12]
   88942:	9f07      	ldr	r7, [sp, #28]
   88944:	4680      	mov	r8, r0
   88946:	f800 3b01 	strb.w	r3, [r0], #1
   8894a:	3701      	adds	r7, #1
   8894c:	9003      	str	r0, [sp, #12]
   8894e:	4649      	mov	r1, r9
   88950:	4620      	mov	r0, r4
   88952:	f001 fb67 	bl	8a024 <_Bfree>
   88956:	1c7b      	adds	r3, r7, #1
   88958:	f8dd a00c 	ldr.w	sl, [sp, #12]
   8895c:	9307      	str	r3, [sp, #28]
   8895e:	f8cd 800c 	str.w	r8, [sp, #12]
   88962:	2e00      	cmp	r6, #0
   88964:	f47f ae91 	bne.w	8868a <_dtoa_r+0x7d2>
   88968:	e693      	b.n	88692 <_dtoa_r+0x7da>
   8896a:	4631      	mov	r1, r6
   8896c:	463a      	mov	r2, r7
   8896e:	4620      	mov	r0, r4
   88970:	f001 fd38 	bl	8a3e4 <__lshift>
   88974:	4606      	mov	r6, r0
   88976:	e6db      	b.n	88730 <_dtoa_r+0x878>
   88978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8897a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   8897e:	eba8 0303 	sub.w	r3, r8, r3
   88982:	449b      	add	fp, r3
   88984:	f04f 0800 	mov.w	r8, #0
   88988:	e588      	b.n	8849c <_dtoa_r+0x5e4>
   8898a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8898e:	f04f 0a02 	mov.w	sl, #2
   88992:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   88996:	f7ff bbee 	b.w	88176 <_dtoa_r+0x2be>
   8899a:	2301      	movs	r3, #1
   8899c:	9323      	str	r3, [sp, #140]	; 0x8c
   8899e:	9308      	str	r3, [sp, #32]
   889a0:	f7ff bbb7 	b.w	88112 <_dtoa_r+0x25a>
   889a4:	d103      	bne.n	889ae <_dtoa_r+0xaf6>
   889a6:	9b04      	ldr	r3, [sp, #16]
   889a8:	07d8      	lsls	r0, r3, #31
   889aa:	f53f ae50 	bmi.w	8864e <_dtoa_r+0x796>
   889ae:	46da      	mov	sl, fp
   889b0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   889b4:	2b30      	cmp	r3, #48	; 0x30
   889b6:	d0fa      	beq.n	889ae <_dtoa_r+0xaf6>
   889b8:	e65b      	b.n	88672 <_dtoa_r+0x7ba>
   889ba:	9b07      	ldr	r3, [sp, #28]
   889bc:	9a03      	ldr	r2, [sp, #12]
   889be:	3301      	adds	r3, #1
   889c0:	9307      	str	r3, [sp, #28]
   889c2:	2331      	movs	r3, #49	; 0x31
   889c4:	7013      	strb	r3, [r2, #0]
   889c6:	e654      	b.n	88672 <_dtoa_r+0x7ba>
   889c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   889ca:	2a00      	cmp	r2, #0
   889cc:	f000 8128 	beq.w	88c20 <_dtoa_r+0xd68>
   889d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   889d4:	9a06      	ldr	r2, [sp, #24]
   889d6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   889da:	441a      	add	r2, r3
   889dc:	9206      	str	r2, [sp, #24]
   889de:	9a09      	ldr	r2, [sp, #36]	; 0x24
   889e0:	4617      	mov	r7, r2
   889e2:	441a      	add	r2, r3
   889e4:	9209      	str	r2, [sp, #36]	; 0x24
   889e6:	e564      	b.n	884b2 <_dtoa_r+0x5fa>
   889e8:	f04f 0900 	mov.w	r9, #0
   889ec:	464e      	mov	r6, r9
   889ee:	e4dc      	b.n	883aa <_dtoa_r+0x4f2>
   889f0:	4629      	mov	r1, r5
   889f2:	4620      	mov	r0, r4
   889f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   889f6:	f001 fc99 	bl	8a32c <__pow5mult>
   889fa:	4605      	mov	r5, r0
   889fc:	e5b1      	b.n	88562 <_dtoa_r+0x6aa>
   889fe:	900e      	str	r0, [sp, #56]	; 0x38
   88a00:	e564      	b.n	884cc <_dtoa_r+0x614>
   88a02:	f000 8111 	beq.w	88c28 <_dtoa_r+0xd70>
   88a06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88a0a:	9a07      	ldr	r2, [sp, #28]
   88a0c:	4b4f      	ldr	r3, [pc, #316]	; (88b4c <_dtoa_r+0xc94>)
   88a0e:	4256      	negs	r6, r2
   88a10:	f006 020f 	and.w	r2, r6, #15
   88a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88a18:	e9d3 2300 	ldrd	r2, r3, [r3]
   88a1c:	f002 fda4 	bl	8b568 <__aeabi_dmul>
   88a20:	1136      	asrs	r6, r6, #4
   88a22:	4680      	mov	r8, r0
   88a24:	4689      	mov	r9, r1
   88a26:	f000 8170 	beq.w	88d0a <_dtoa_r+0xe52>
   88a2a:	2300      	movs	r3, #0
   88a2c:	f04f 0a02 	mov.w	sl, #2
   88a30:	4f47      	ldr	r7, [pc, #284]	; (88b50 <_dtoa_r+0xc98>)
   88a32:	07f2      	lsls	r2, r6, #31
   88a34:	d506      	bpl.n	88a44 <_dtoa_r+0xb8c>
   88a36:	e9d7 2300 	ldrd	r2, r3, [r7]
   88a3a:	f002 fd95 	bl	8b568 <__aeabi_dmul>
   88a3e:	2301      	movs	r3, #1
   88a40:	f10a 0a01 	add.w	sl, sl, #1
   88a44:	1076      	asrs	r6, r6, #1
   88a46:	f107 0708 	add.w	r7, r7, #8
   88a4a:	d1f2      	bne.n	88a32 <_dtoa_r+0xb7a>
   88a4c:	2b00      	cmp	r3, #0
   88a4e:	f43f abb1 	beq.w	881b4 <_dtoa_r+0x2fc>
   88a52:	4680      	mov	r8, r0
   88a54:	4689      	mov	r9, r1
   88a56:	f7ff bbad 	b.w	881b4 <_dtoa_r+0x2fc>
   88a5a:	9b04      	ldr	r3, [sp, #16]
   88a5c:	2b00      	cmp	r3, #0
   88a5e:	f47f ae46 	bne.w	886ee <_dtoa_r+0x836>
   88a62:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88a66:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88a6a:	2b00      	cmp	r3, #0
   88a6c:	f43f af18 	beq.w	888a0 <_dtoa_r+0x9e8>
   88a70:	e63d      	b.n	886ee <_dtoa_r+0x836>
   88a72:	2a00      	cmp	r2, #0
   88a74:	dd12      	ble.n	88a9c <_dtoa_r+0xbe4>
   88a76:	4629      	mov	r1, r5
   88a78:	2201      	movs	r2, #1
   88a7a:	4620      	mov	r0, r4
   88a7c:	9304      	str	r3, [sp, #16]
   88a7e:	f001 fcb1 	bl	8a3e4 <__lshift>
   88a82:	4649      	mov	r1, r9
   88a84:	4605      	mov	r5, r0
   88a86:	f001 fd23 	bl	8a4d0 <__mcmp>
   88a8a:	2800      	cmp	r0, #0
   88a8c:	9b04      	ldr	r3, [sp, #16]
   88a8e:	f340 8117 	ble.w	88cc0 <_dtoa_r+0xe08>
   88a92:	2b39      	cmp	r3, #57	; 0x39
   88a94:	f000 80fb 	beq.w	88c8e <_dtoa_r+0xdd6>
   88a98:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   88a9c:	46ba      	mov	sl, r7
   88a9e:	9a07      	ldr	r2, [sp, #28]
   88aa0:	4637      	mov	r7, r6
   88aa2:	3201      	adds	r2, #1
   88aa4:	4646      	mov	r6, r8
   88aa6:	9207      	str	r2, [sp, #28]
   88aa8:	f80a 3b01 	strb.w	r3, [sl], #1
   88aac:	e5e1      	b.n	88672 <_dtoa_r+0x7ba>
   88aae:	9509      	str	r5, [sp, #36]	; 0x24
   88ab0:	9c06      	ldr	r4, [sp, #24]
   88ab2:	9d04      	ldr	r5, [sp, #16]
   88ab4:	4602      	mov	r2, r0
   88ab6:	460b      	mov	r3, r1
   88ab8:	f002 fba0 	bl	8b1fc <__adddf3>
   88abc:	4652      	mov	r2, sl
   88abe:	465b      	mov	r3, fp
   88ac0:	4680      	mov	r8, r0
   88ac2:	4689      	mov	r9, r1
   88ac4:	f002 ffe0 	bl	8ba88 <__aeabi_dcmpgt>
   88ac8:	b960      	cbnz	r0, 88ae4 <_dtoa_r+0xc2c>
   88aca:	4652      	mov	r2, sl
   88acc:	465b      	mov	r3, fp
   88ace:	4640      	mov	r0, r8
   88ad0:	4649      	mov	r1, r9
   88ad2:	f002 ffb1 	bl	8ba38 <__aeabi_dcmpeq>
   88ad6:	2800      	cmp	r0, #0
   88ad8:	f43f accb 	beq.w	88472 <_dtoa_r+0x5ba>
   88adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88ade:	07d9      	lsls	r1, r3, #31
   88ae0:	f57f acc7 	bpl.w	88472 <_dtoa_r+0x5ba>
   88ae4:	9a03      	ldr	r2, [sp, #12]
   88ae6:	f7ff bbff 	b.w	882e8 <_dtoa_r+0x430>
   88aea:	4620      	mov	r0, r4
   88aec:	6871      	ldr	r1, [r6, #4]
   88aee:	f001 fa73 	bl	89fd8 <_Balloc>
   88af2:	4607      	mov	r7, r0
   88af4:	2800      	cmp	r0, #0
   88af6:	f000 810c 	beq.w	88d12 <_dtoa_r+0xe5a>
   88afa:	6933      	ldr	r3, [r6, #16]
   88afc:	f106 010c 	add.w	r1, r6, #12
   88b00:	3302      	adds	r3, #2
   88b02:	009a      	lsls	r2, r3, #2
   88b04:	300c      	adds	r0, #12
   88b06:	f7fc f9ff 	bl	84f08 <memcpy>
   88b0a:	4639      	mov	r1, r7
   88b0c:	2201      	movs	r2, #1
   88b0e:	4620      	mov	r0, r4
   88b10:	f001 fc68 	bl	8a3e4 <__lshift>
   88b14:	4680      	mov	r8, r0
   88b16:	e610      	b.n	8873a <_dtoa_r+0x882>
   88b18:	4629      	mov	r1, r5
   88b1a:	4620      	mov	r0, r4
   88b1c:	f001 fc06 	bl	8a32c <__pow5mult>
   88b20:	4605      	mov	r5, r0
   88b22:	e51e      	b.n	88562 <_dtoa_r+0x6aa>
   88b24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88b28:	1a9f      	subs	r7, r3, r2
   88b2a:	e4c2      	b.n	884b2 <_dtoa_r+0x5fa>
   88b2c:	2b39      	cmp	r3, #57	; 0x39
   88b2e:	f000 80ae 	beq.w	88c8e <_dtoa_r+0xdd6>
   88b32:	46ba      	mov	sl, r7
   88b34:	3301      	adds	r3, #1
   88b36:	e7b2      	b.n	88a9e <_dtoa_r+0xbe6>
   88b38:	9a07      	ldr	r2, [sp, #28]
   88b3a:	4637      	mov	r7, r6
   88b3c:	3201      	adds	r2, #1
   88b3e:	4646      	mov	r6, r8
   88b40:	9207      	str	r2, [sp, #28]
   88b42:	e577      	b.n	88634 <_dtoa_r+0x77c>
   88b44:	0008bf60 	.word	0x0008bf60
   88b48:	7ff00000 	.word	0x7ff00000
   88b4c:	0008c0c0 	.word	0x0008c0c0
   88b50:	0008c098 	.word	0x0008c098
   88b54:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   88b58:	4983      	ldr	r1, [pc, #524]	; (88d68 <_dtoa_r+0xeb0>)
   88b5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88b5e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   88b62:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   88b66:	f002 fcff 	bl	8b568 <__aeabi_dmul>
   88b6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88b6e:	4649      	mov	r1, r9
   88b70:	4640      	mov	r0, r8
   88b72:	f002 ffa9 	bl	8bac8 <__aeabi_d2iz>
   88b76:	4606      	mov	r6, r0
   88b78:	f002 fc8c 	bl	8b494 <__aeabi_i2d>
   88b7c:	460b      	mov	r3, r1
   88b7e:	4602      	mov	r2, r0
   88b80:	4649      	mov	r1, r9
   88b82:	4640      	mov	r0, r8
   88b84:	f002 fb38 	bl	8b1f8 <__aeabi_dsub>
   88b88:	4653      	mov	r3, sl
   88b8a:	9f03      	ldr	r7, [sp, #12]
   88b8c:	3630      	adds	r6, #48	; 0x30
   88b8e:	2b01      	cmp	r3, #1
   88b90:	4680      	mov	r8, r0
   88b92:	4689      	mov	r9, r1
   88b94:	f807 6b01 	strb.w	r6, [r7], #1
   88b98:	f000 80ac 	beq.w	88cf4 <_dtoa_r+0xe3c>
   88b9c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88b9e:	9b03      	ldr	r3, [sp, #12]
   88ba0:	441e      	add	r6, r3
   88ba2:	2200      	movs	r2, #0
   88ba4:	4b71      	ldr	r3, [pc, #452]	; (88d6c <_dtoa_r+0xeb4>)
   88ba6:	4640      	mov	r0, r8
   88ba8:	4649      	mov	r1, r9
   88baa:	f002 fcdd 	bl	8b568 <__aeabi_dmul>
   88bae:	4689      	mov	r9, r1
   88bb0:	4680      	mov	r8, r0
   88bb2:	f002 ff89 	bl	8bac8 <__aeabi_d2iz>
   88bb6:	4682      	mov	sl, r0
   88bb8:	f002 fc6c 	bl	8b494 <__aeabi_i2d>
   88bbc:	4602      	mov	r2, r0
   88bbe:	460b      	mov	r3, r1
   88bc0:	4640      	mov	r0, r8
   88bc2:	4649      	mov	r1, r9
   88bc4:	f002 fb18 	bl	8b1f8 <__aeabi_dsub>
   88bc8:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   88bcc:	f807 ab01 	strb.w	sl, [r7], #1
   88bd0:	42b7      	cmp	r7, r6
   88bd2:	4680      	mov	r8, r0
   88bd4:	4689      	mov	r9, r1
   88bd6:	d1e4      	bne.n	88ba2 <_dtoa_r+0xcea>
   88bd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88bdc:	2200      	movs	r2, #0
   88bde:	4b64      	ldr	r3, [pc, #400]	; (88d70 <_dtoa_r+0xeb8>)
   88be0:	f002 fb0c 	bl	8b1fc <__adddf3>
   88be4:	4642      	mov	r2, r8
   88be6:	464b      	mov	r3, r9
   88be8:	f002 ff30 	bl	8ba4c <__aeabi_dcmplt>
   88bec:	2800      	cmp	r0, #0
   88bee:	d162      	bne.n	88cb6 <_dtoa_r+0xdfe>
   88bf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88bf4:	2000      	movs	r0, #0
   88bf6:	495e      	ldr	r1, [pc, #376]	; (88d70 <_dtoa_r+0xeb8>)
   88bf8:	f002 fafe 	bl	8b1f8 <__aeabi_dsub>
   88bfc:	4642      	mov	r2, r8
   88bfe:	464b      	mov	r3, r9
   88c00:	f002 ff42 	bl	8ba88 <__aeabi_dcmpgt>
   88c04:	2800      	cmp	r0, #0
   88c06:	f43f aba9 	beq.w	8835c <_dtoa_r+0x4a4>
   88c0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   88c0e:	46b2      	mov	sl, r6
   88c10:	2b30      	cmp	r3, #48	; 0x30
   88c12:	f106 36ff 	add.w	r6, r6, #4294967295
   88c16:	d0f8      	beq.n	88c0a <_dtoa_r+0xd52>
   88c18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88c1a:	3301      	adds	r3, #1
   88c1c:	9307      	str	r3, [sp, #28]
   88c1e:	e538      	b.n	88692 <_dtoa_r+0x7da>
   88c20:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88c22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   88c26:	e6d5      	b.n	889d4 <_dtoa_r+0xb1c>
   88c28:	f04f 0a02 	mov.w	sl, #2
   88c2c:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   88c30:	f7ff bac0 	b.w	881b4 <_dtoa_r+0x2fc>
   88c34:	9b08      	ldr	r3, [sp, #32]
   88c36:	2b00      	cmp	r3, #0
   88c38:	f43f ab62 	beq.w	88300 <_dtoa_r+0x448>
   88c3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88c3e:	2b00      	cmp	r3, #0
   88c40:	f77f ab8c 	ble.w	8835c <_dtoa_r+0x4a4>
   88c44:	9313      	str	r3, [sp, #76]	; 0x4c
   88c46:	9b07      	ldr	r3, [sp, #28]
   88c48:	2200      	movs	r2, #0
   88c4a:	3b01      	subs	r3, #1
   88c4c:	4640      	mov	r0, r8
   88c4e:	4649      	mov	r1, r9
   88c50:	9314      	str	r3, [sp, #80]	; 0x50
   88c52:	4b46      	ldr	r3, [pc, #280]	; (88d6c <_dtoa_r+0xeb4>)
   88c54:	f002 fc88 	bl	8b568 <__aeabi_dmul>
   88c58:	4680      	mov	r8, r0
   88c5a:	4689      	mov	r9, r1
   88c5c:	f10a 0001 	add.w	r0, sl, #1
   88c60:	f002 fc18 	bl	8b494 <__aeabi_i2d>
   88c64:	4642      	mov	r2, r8
   88c66:	464b      	mov	r3, r9
   88c68:	f002 fc7e 	bl	8b568 <__aeabi_dmul>
   88c6c:	4b41      	ldr	r3, [pc, #260]	; (88d74 <_dtoa_r+0xebc>)
   88c6e:	2200      	movs	r2, #0
   88c70:	f002 fac4 	bl	8b1fc <__adddf3>
   88c74:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88c7c:	9311      	str	r3, [sp, #68]	; 0x44
   88c7e:	f7ff babc 	b.w	881fa <_dtoa_r+0x342>
   88c82:	9b07      	ldr	r3, [sp, #28]
   88c84:	3301      	adds	r3, #1
   88c86:	9307      	str	r3, [sp, #28]
   88c88:	2331      	movs	r3, #49	; 0x31
   88c8a:	f7ff bb34 	b.w	882f6 <_dtoa_r+0x43e>
   88c8e:	9b07      	ldr	r3, [sp, #28]
   88c90:	46bb      	mov	fp, r7
   88c92:	3301      	adds	r3, #1
   88c94:	9307      	str	r3, [sp, #28]
   88c96:	2339      	movs	r3, #57	; 0x39
   88c98:	4637      	mov	r7, r6
   88c9a:	f80b 3b01 	strb.w	r3, [fp], #1
   88c9e:	4646      	mov	r6, r8
   88ca0:	e4d7      	b.n	88652 <_dtoa_r+0x79a>
   88ca2:	f04f 0900 	mov.w	r9, #0
   88ca6:	464e      	mov	r6, r9
   88ca8:	e649      	b.n	8893e <_dtoa_r+0xa86>
   88caa:	469a      	mov	sl, r3
   88cac:	e468      	b.n	88580 <_dtoa_r+0x6c8>
   88cae:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88cb0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   88cb2:	46b2      	mov	sl, r6
   88cb4:	e7b0      	b.n	88c18 <_dtoa_r+0xd60>
   88cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88cb8:	9a03      	ldr	r2, [sp, #12]
   88cba:	9307      	str	r3, [sp, #28]
   88cbc:	f7ff bb14 	b.w	882e8 <_dtoa_r+0x430>
   88cc0:	f47f aeec 	bne.w	88a9c <_dtoa_r+0xbe4>
   88cc4:	07da      	lsls	r2, r3, #31
   88cc6:	f57f aee9 	bpl.w	88a9c <_dtoa_r+0xbe4>
   88cca:	e6e2      	b.n	88a92 <_dtoa_r+0xbda>
   88ccc:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   88cd0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88cd2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   88cd4:	f7ff bb42 	b.w	8835c <_dtoa_r+0x4a4>
   88cd8:	2b39      	cmp	r3, #57	; 0x39
   88cda:	d0d8      	beq.n	88c8e <_dtoa_r+0xdd6>
   88cdc:	f1ba 0f00 	cmp.w	sl, #0
   88ce0:	f73f aeda 	bgt.w	88a98 <_dtoa_r+0xbe0>
   88ce4:	e6da      	b.n	88a9c <_dtoa_r+0xbe4>
   88ce6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88ce8:	2b02      	cmp	r3, #2
   88cea:	f73f ae13 	bgt.w	88914 <_dtoa_r+0xa5c>
   88cee:	f8cd 801c 	str.w	r8, [sp, #28]
   88cf2:	e59c      	b.n	8882e <_dtoa_r+0x976>
   88cf4:	463e      	mov	r6, r7
   88cf6:	e76f      	b.n	88bd8 <_dtoa_r+0xd20>
   88cf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88cfa:	2b02      	cmp	r3, #2
   88cfc:	f73f ae0a 	bgt.w	88914 <_dtoa_r+0xa5c>
   88d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88d02:	f8cd 801c 	str.w	r8, [sp, #28]
   88d06:	9308      	str	r3, [sp, #32]
   88d08:	e50f      	b.n	8872a <_dtoa_r+0x872>
   88d0a:	f04f 0a02 	mov.w	sl, #2
   88d0e:	f7ff ba51 	b.w	881b4 <_dtoa_r+0x2fc>
   88d12:	4602      	mov	r2, r0
   88d14:	f240 21ea 	movw	r1, #746	; 0x2ea
   88d18:	4b17      	ldr	r3, [pc, #92]	; (88d78 <_dtoa_r+0xec0>)
   88d1a:	4818      	ldr	r0, [pc, #96]	; (88d7c <_dtoa_r+0xec4>)
   88d1c:	f002 f8dc 	bl	8aed8 <__assert_func>
   88d20:	2600      	movs	r6, #0
   88d22:	4620      	mov	r0, r4
   88d24:	4631      	mov	r1, r6
   88d26:	6466      	str	r6, [r4, #68]	; 0x44
   88d28:	f001 f956 	bl	89fd8 <_Balloc>
   88d2c:	9003      	str	r0, [sp, #12]
   88d2e:	b978      	cbnz	r0, 88d50 <_dtoa_r+0xe98>
   88d30:	2200      	movs	r2, #0
   88d32:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   88d36:	4b10      	ldr	r3, [pc, #64]	; (88d78 <_dtoa_r+0xec0>)
   88d38:	4810      	ldr	r0, [pc, #64]	; (88d7c <_dtoa_r+0xec4>)
   88d3a:	f002 f8cd 	bl	8aed8 <__assert_func>
   88d3e:	4b10      	ldr	r3, [pc, #64]	; (88d80 <_dtoa_r+0xec8>)
   88d40:	9303      	str	r3, [sp, #12]
   88d42:	f7ff b8f4 	b.w	87f2e <_dtoa_r+0x76>
   88d46:	f43f ac33 	beq.w	885b0 <_dtoa_r+0x6f8>
   88d4a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   88d4e:	e4b5      	b.n	886bc <_dtoa_r+0x804>
   88d50:	9b03      	ldr	r3, [sp, #12]
   88d52:	2201      	movs	r2, #1
   88d54:	6423      	str	r3, [r4, #64]	; 0x40
   88d56:	f04f 33ff 	mov.w	r3, #4294967295
   88d5a:	9623      	str	r6, [sp, #140]	; 0x8c
   88d5c:	9312      	str	r3, [sp, #72]	; 0x48
   88d5e:	920c      	str	r2, [sp, #48]	; 0x30
   88d60:	9308      	str	r3, [sp, #32]
   88d62:	f7ff bafb 	b.w	8835c <_dtoa_r+0x4a4>
   88d66:	bf00      	nop
   88d68:	0008c0c0 	.word	0x0008c0c0
   88d6c:	40240000 	.word	0x40240000
   88d70:	3fe00000 	.word	0x3fe00000
   88d74:	401c0000 	.word	0x401c0000
   88d78:	0008bf70 	.word	0x0008bf70
   88d7c:	0008bf84 	.word	0x0008bf84
   88d80:	0008bf64 	.word	0x0008bf64

00088d84 <__sflush_r>:
   88d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   88d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88d8a:	460c      	mov	r4, r1
   88d8c:	0711      	lsls	r1, r2, #28
   88d8e:	4607      	mov	r7, r0
   88d90:	d443      	bmi.n	88e1a <__sflush_r+0x96>
   88d92:	6863      	ldr	r3, [r4, #4]
   88d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   88d98:	2b00      	cmp	r3, #0
   88d9a:	81a2      	strh	r2, [r4, #12]
   88d9c:	dd5b      	ble.n	88e56 <__sflush_r+0xd2>
   88d9e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   88da0:	2d00      	cmp	r5, #0
   88da2:	d056      	beq.n	88e52 <__sflush_r+0xce>
   88da4:	2300      	movs	r3, #0
   88da6:	683e      	ldr	r6, [r7, #0]
   88da8:	603b      	str	r3, [r7, #0]
   88daa:	b293      	uxth	r3, r2
   88dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   88db0:	d155      	bne.n	88e5e <__sflush_r+0xda>
   88db2:	2301      	movs	r3, #1
   88db4:	4638      	mov	r0, r7
   88db6:	69e1      	ldr	r1, [r4, #28]
   88db8:	47a8      	blx	r5
   88dba:	1c42      	adds	r2, r0, #1
   88dbc:	d065      	beq.n	88e8a <__sflush_r+0x106>
   88dbe:	89a3      	ldrh	r3, [r4, #12]
   88dc0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   88dc2:	075b      	lsls	r3, r3, #29
   88dc4:	d505      	bpl.n	88dd2 <__sflush_r+0x4e>
   88dc6:	6863      	ldr	r3, [r4, #4]
   88dc8:	1ac0      	subs	r0, r0, r3
   88dca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   88dcc:	b10b      	cbz	r3, 88dd2 <__sflush_r+0x4e>
   88dce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   88dd0:	1ac0      	subs	r0, r0, r3
   88dd2:	4602      	mov	r2, r0
   88dd4:	69e1      	ldr	r1, [r4, #28]
   88dd6:	2300      	movs	r3, #0
   88dd8:	4638      	mov	r0, r7
   88dda:	47a8      	blx	r5
   88ddc:	1c41      	adds	r1, r0, #1
   88dde:	d140      	bne.n	88e62 <__sflush_r+0xde>
   88de0:	683b      	ldr	r3, [r7, #0]
   88de2:	2b00      	cmp	r3, #0
   88de4:	d03d      	beq.n	88e62 <__sflush_r+0xde>
   88de6:	2b1d      	cmp	r3, #29
   88de8:	d001      	beq.n	88dee <__sflush_r+0x6a>
   88dea:	2b16      	cmp	r3, #22
   88dec:	d154      	bne.n	88e98 <__sflush_r+0x114>
   88dee:	2200      	movs	r2, #0
   88df0:	89a3      	ldrh	r3, [r4, #12]
   88df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   88df6:	81a3      	strh	r3, [r4, #12]
   88df8:	6923      	ldr	r3, [r4, #16]
   88dfa:	e9c4 3200 	strd	r3, r2, [r4]
   88dfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88e00:	603e      	str	r6, [r7, #0]
   88e02:	b331      	cbz	r1, 88e52 <__sflush_r+0xce>
   88e04:	f104 0340 	add.w	r3, r4, #64	; 0x40
   88e08:	4299      	cmp	r1, r3
   88e0a:	d002      	beq.n	88e12 <__sflush_r+0x8e>
   88e0c:	4638      	mov	r0, r7
   88e0e:	f000 f9fb 	bl	89208 <_free_r>
   88e12:	2300      	movs	r3, #0
   88e14:	4618      	mov	r0, r3
   88e16:	6323      	str	r3, [r4, #48]	; 0x30
   88e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88e1a:	6926      	ldr	r6, [r4, #16]
   88e1c:	b1ce      	cbz	r6, 88e52 <__sflush_r+0xce>
   88e1e:	b293      	uxth	r3, r2
   88e20:	079a      	lsls	r2, r3, #30
   88e22:	bf18      	it	ne
   88e24:	2300      	movne	r3, #0
   88e26:	6825      	ldr	r5, [r4, #0]
   88e28:	bf08      	it	eq
   88e2a:	6963      	ldreq	r3, [r4, #20]
   88e2c:	6026      	str	r6, [r4, #0]
   88e2e:	1bad      	subs	r5, r5, r6
   88e30:	60a3      	str	r3, [r4, #8]
   88e32:	e00c      	b.n	88e4e <__sflush_r+0xca>
   88e34:	462b      	mov	r3, r5
   88e36:	4632      	mov	r2, r6
   88e38:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   88e3c:	4638      	mov	r0, r7
   88e3e:	69e1      	ldr	r1, [r4, #28]
   88e40:	47e0      	blx	ip
   88e42:	f1b0 0c00 	subs.w	ip, r0, #0
   88e46:	eba5 050c 	sub.w	r5, r5, ip
   88e4a:	4466      	add	r6, ip
   88e4c:	dd16      	ble.n	88e7c <__sflush_r+0xf8>
   88e4e:	2d00      	cmp	r5, #0
   88e50:	dcf0      	bgt.n	88e34 <__sflush_r+0xb0>
   88e52:	2000      	movs	r0, #0
   88e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88e56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   88e58:	2b00      	cmp	r3, #0
   88e5a:	dca0      	bgt.n	88d9e <__sflush_r+0x1a>
   88e5c:	e7f9      	b.n	88e52 <__sflush_r+0xce>
   88e5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   88e60:	e7af      	b.n	88dc2 <__sflush_r+0x3e>
   88e62:	2200      	movs	r2, #0
   88e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88e68:	6062      	str	r2, [r4, #4]
   88e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   88e6e:	6922      	ldr	r2, [r4, #16]
   88e70:	81a3      	strh	r3, [r4, #12]
   88e72:	04db      	lsls	r3, r3, #19
   88e74:	6022      	str	r2, [r4, #0]
   88e76:	d5c2      	bpl.n	88dfe <__sflush_r+0x7a>
   88e78:	6520      	str	r0, [r4, #80]	; 0x50
   88e7a:	e7c0      	b.n	88dfe <__sflush_r+0x7a>
   88e7c:	89a3      	ldrh	r3, [r4, #12]
   88e7e:	f04f 30ff 	mov.w	r0, #4294967295
   88e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88e86:	81a3      	strh	r3, [r4, #12]
   88e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88e8a:	683b      	ldr	r3, [r7, #0]
   88e8c:	2b00      	cmp	r3, #0
   88e8e:	d096      	beq.n	88dbe <__sflush_r+0x3a>
   88e90:	2b1d      	cmp	r3, #29
   88e92:	d006      	beq.n	88ea2 <__sflush_r+0x11e>
   88e94:	2b16      	cmp	r3, #22
   88e96:	d004      	beq.n	88ea2 <__sflush_r+0x11e>
   88e98:	89a3      	ldrh	r3, [r4, #12]
   88e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88e9e:	81a3      	strh	r3, [r4, #12]
   88ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88ea2:	2000      	movs	r0, #0
   88ea4:	603e      	str	r6, [r7, #0]
   88ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00088ea8 <_fflush_r>:
   88ea8:	b538      	push	{r3, r4, r5, lr}
   88eaa:	4605      	mov	r5, r0
   88eac:	460c      	mov	r4, r1
   88eae:	b108      	cbz	r0, 88eb4 <_fflush_r+0xc>
   88eb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88eb2:	b1a3      	cbz	r3, 88ede <_fflush_r+0x36>
   88eb4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   88eb8:	b1b8      	cbz	r0, 88eea <_fflush_r+0x42>
   88eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88ebc:	07db      	lsls	r3, r3, #31
   88ebe:	d401      	bmi.n	88ec4 <_fflush_r+0x1c>
   88ec0:	0581      	lsls	r1, r0, #22
   88ec2:	d515      	bpl.n	88ef0 <_fflush_r+0x48>
   88ec4:	4628      	mov	r0, r5
   88ec6:	4621      	mov	r1, r4
   88ec8:	f7ff ff5c 	bl	88d84 <__sflush_r>
   88ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88ece:	4605      	mov	r5, r0
   88ed0:	07da      	lsls	r2, r3, #31
   88ed2:	d402      	bmi.n	88eda <_fflush_r+0x32>
   88ed4:	89a3      	ldrh	r3, [r4, #12]
   88ed6:	059b      	lsls	r3, r3, #22
   88ed8:	d50e      	bpl.n	88ef8 <_fflush_r+0x50>
   88eda:	4628      	mov	r0, r5
   88edc:	bd38      	pop	{r3, r4, r5, pc}
   88ede:	f000 f817 	bl	88f10 <__sinit>
   88ee2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   88ee6:	2800      	cmp	r0, #0
   88ee8:	d1e7      	bne.n	88eba <_fflush_r+0x12>
   88eea:	4605      	mov	r5, r0
   88eec:	4628      	mov	r0, r5
   88eee:	bd38      	pop	{r3, r4, r5, pc}
   88ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88ef2:	f000 fc33 	bl	8975c <__retarget_lock_acquire_recursive>
   88ef6:	e7e5      	b.n	88ec4 <_fflush_r+0x1c>
   88ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88efa:	f000 fc31 	bl	89760 <__retarget_lock_release_recursive>
   88efe:	4628      	mov	r0, r5
   88f00:	bd38      	pop	{r3, r4, r5, pc}
   88f02:	bf00      	nop

00088f04 <_cleanup_r>:
   88f04:	4901      	ldr	r1, [pc, #4]	; (88f0c <_cleanup_r+0x8>)
   88f06:	f000 bbf7 	b.w	896f8 <_fwalk_reent>
   88f0a:	bf00      	nop
   88f0c:	0008afc1 	.word	0x0008afc1

00088f10 <__sinit>:
   88f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88f14:	4682      	mov	sl, r0
   88f16:	4839      	ldr	r0, [pc, #228]	; (88ffc <__sinit+0xec>)
   88f18:	f000 fc20 	bl	8975c <__retarget_lock_acquire_recursive>
   88f1c:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   88f20:	2c00      	cmp	r4, #0
   88f22:	d166      	bne.n	88ff2 <__sinit+0xe2>
   88f24:	2304      	movs	r3, #4
   88f26:	2203      	movs	r2, #3
   88f28:	4935      	ldr	r1, [pc, #212]	; (89000 <__sinit+0xf0>)
   88f2a:	f8da 5004 	ldr.w	r5, [sl, #4]
   88f2e:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   88f32:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 89004 <__sinit+0xf4>
   88f36:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 89008 <__sinit+0xf8>
   88f3a:	4f34      	ldr	r7, [pc, #208]	; (8900c <__sinit+0xfc>)
   88f3c:	4e34      	ldr	r6, [pc, #208]	; (89010 <__sinit+0x100>)
   88f3e:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   88f42:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   88f46:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   88f4a:	4621      	mov	r1, r4
   88f4c:	60eb      	str	r3, [r5, #12]
   88f4e:	2208      	movs	r2, #8
   88f50:	e9c5 4400 	strd	r4, r4, [r5]
   88f54:	e9c5 4404 	strd	r4, r4, [r5, #16]
   88f58:	666c      	str	r4, [r5, #100]	; 0x64
   88f5a:	60ac      	str	r4, [r5, #8]
   88f5c:	61ac      	str	r4, [r5, #24]
   88f5e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   88f62:	f7fc f847 	bl	84ff4 <memset>
   88f66:	e9c5 5907 	strd	r5, r9, [r5, #28]
   88f6a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   88f6e:	62ee      	str	r6, [r5, #44]	; 0x2c
   88f70:	f105 0058 	add.w	r0, r5, #88	; 0x58
   88f74:	f000 fbee 	bl	89754 <__retarget_lock_init_recursive>
   88f78:	f8da 5008 	ldr.w	r5, [sl, #8]
   88f7c:	4b25      	ldr	r3, [pc, #148]	; (89014 <__sinit+0x104>)
   88f7e:	4621      	mov	r1, r4
   88f80:	60eb      	str	r3, [r5, #12]
   88f82:	2208      	movs	r2, #8
   88f84:	e9c5 4400 	strd	r4, r4, [r5]
   88f88:	e9c5 4404 	strd	r4, r4, [r5, #16]
   88f8c:	666c      	str	r4, [r5, #100]	; 0x64
   88f8e:	60ac      	str	r4, [r5, #8]
   88f90:	61ac      	str	r4, [r5, #24]
   88f92:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   88f96:	f7fc f82d 	bl	84ff4 <memset>
   88f9a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   88f9e:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   88fa2:	62ee      	str	r6, [r5, #44]	; 0x2c
   88fa4:	f105 0058 	add.w	r0, r5, #88	; 0x58
   88fa8:	f000 fbd4 	bl	89754 <__retarget_lock_init_recursive>
   88fac:	f8da 500c 	ldr.w	r5, [sl, #12]
   88fb0:	4b19      	ldr	r3, [pc, #100]	; (89018 <__sinit+0x108>)
   88fb2:	4621      	mov	r1, r4
   88fb4:	60eb      	str	r3, [r5, #12]
   88fb6:	2208      	movs	r2, #8
   88fb8:	e9c5 4400 	strd	r4, r4, [r5]
   88fbc:	e9c5 4404 	strd	r4, r4, [r5, #16]
   88fc0:	666c      	str	r4, [r5, #100]	; 0x64
   88fc2:	60ac      	str	r4, [r5, #8]
   88fc4:	61ac      	str	r4, [r5, #24]
   88fc6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   88fca:	f7fc f813 	bl	84ff4 <memset>
   88fce:	f105 0058 	add.w	r0, r5, #88	; 0x58
   88fd2:	e9c5 5907 	strd	r5, r9, [r5, #28]
   88fd6:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   88fda:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   88fde:	f000 fbb9 	bl	89754 <__retarget_lock_init_recursive>
   88fe2:	2301      	movs	r3, #1
   88fe4:	4805      	ldr	r0, [pc, #20]	; (88ffc <__sinit+0xec>)
   88fe6:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   88fea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88fee:	f000 bbb7 	b.w	89760 <__retarget_lock_release_recursive>
   88ff2:	4802      	ldr	r0, [pc, #8]	; (88ffc <__sinit+0xec>)
   88ff4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88ff8:	f000 bbb2 	b.w	89760 <__retarget_lock_release_recursive>
   88ffc:	20001940 	.word	0x20001940
   89000:	00088f05 	.word	0x00088f05
   89004:	0008ab91 	.word	0x0008ab91
   89008:	0008abb5 	.word	0x0008abb5
   8900c:	0008abf5 	.word	0x0008abf5
   89010:	0008ac15 	.word	0x0008ac15
   89014:	00010009 	.word	0x00010009
   89018:	00020012 	.word	0x00020012

0008901c <__sfp_lock_acquire>:
   8901c:	4801      	ldr	r0, [pc, #4]	; (89024 <__sfp_lock_acquire+0x8>)
   8901e:	f000 bb9d 	b.w	8975c <__retarget_lock_acquire_recursive>
   89022:	bf00      	nop
   89024:	2000193c 	.word	0x2000193c

00089028 <__sfp_lock_release>:
   89028:	4801      	ldr	r0, [pc, #4]	; (89030 <__sfp_lock_release+0x8>)
   8902a:	f000 bb99 	b.w	89760 <__retarget_lock_release_recursive>
   8902e:	bf00      	nop
   89030:	2000193c 	.word	0x2000193c

00089034 <__libc_fini_array>:
   89034:	b538      	push	{r3, r4, r5, lr}
   89036:	4b08      	ldr	r3, [pc, #32]	; (89058 <__libc_fini_array+0x24>)
   89038:	4d08      	ldr	r5, [pc, #32]	; (8905c <__libc_fini_array+0x28>)
   8903a:	1b5b      	subs	r3, r3, r5
   8903c:	109c      	asrs	r4, r3, #2
   8903e:	d007      	beq.n	89050 <__libc_fini_array+0x1c>
   89040:	3b04      	subs	r3, #4
   89042:	441d      	add	r5, r3
   89044:	3c01      	subs	r4, #1
   89046:	f855 3904 	ldr.w	r3, [r5], #-4
   8904a:	4798      	blx	r3
   8904c:	2c00      	cmp	r4, #0
   8904e:	d1f9      	bne.n	89044 <__libc_fini_array+0x10>
   89050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   89054:	f003 b94a 	b.w	8c2ec <_fini>
   89058:	0008c2fc 	.word	0x0008c2fc
   8905c:	0008c2f8 	.word	0x0008c2f8

00089060 <__fputwc>:
   89060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   89064:	b083      	sub	sp, #12
   89066:	4607      	mov	r7, r0
   89068:	4688      	mov	r8, r1
   8906a:	4614      	mov	r4, r2
   8906c:	f000 fb68 	bl	89740 <__locale_mb_cur_max>
   89070:	2801      	cmp	r0, #1
   89072:	d103      	bne.n	8907c <__fputwc+0x1c>
   89074:	f108 33ff 	add.w	r3, r8, #4294967295
   89078:	2bfe      	cmp	r3, #254	; 0xfe
   8907a:	d933      	bls.n	890e4 <__fputwc+0x84>
   8907c:	4642      	mov	r2, r8
   8907e:	4638      	mov	r0, r7
   89080:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   89084:	a901      	add	r1, sp, #4
   89086:	f001 fe9f 	bl	8adc8 <_wcrtomb_r>
   8908a:	1c42      	adds	r2, r0, #1
   8908c:	4606      	mov	r6, r0
   8908e:	d02f      	beq.n	890f0 <__fputwc+0x90>
   89090:	b318      	cbz	r0, 890da <__fputwc+0x7a>
   89092:	f89d 1004 	ldrb.w	r1, [sp, #4]
   89096:	2500      	movs	r5, #0
   89098:	f10d 0905 	add.w	r9, sp, #5
   8909c:	e008      	b.n	890b0 <__fputwc+0x50>
   8909e:	6823      	ldr	r3, [r4, #0]
   890a0:	1c5a      	adds	r2, r3, #1
   890a2:	6022      	str	r2, [r4, #0]
   890a4:	7019      	strb	r1, [r3, #0]
   890a6:	3501      	adds	r5, #1
   890a8:	42b5      	cmp	r5, r6
   890aa:	d216      	bcs.n	890da <__fputwc+0x7a>
   890ac:	f819 1b01 	ldrb.w	r1, [r9], #1
   890b0:	68a3      	ldr	r3, [r4, #8]
   890b2:	3b01      	subs	r3, #1
   890b4:	2b00      	cmp	r3, #0
   890b6:	60a3      	str	r3, [r4, #8]
   890b8:	daf1      	bge.n	8909e <__fputwc+0x3e>
   890ba:	69a2      	ldr	r2, [r4, #24]
   890bc:	4293      	cmp	r3, r2
   890be:	db01      	blt.n	890c4 <__fputwc+0x64>
   890c0:	290a      	cmp	r1, #10
   890c2:	d1ec      	bne.n	8909e <__fputwc+0x3e>
   890c4:	4622      	mov	r2, r4
   890c6:	4638      	mov	r0, r7
   890c8:	f001 fe26 	bl	8ad18 <__swbuf_r>
   890cc:	1c43      	adds	r3, r0, #1
   890ce:	d1ea      	bne.n	890a6 <__fputwc+0x46>
   890d0:	4606      	mov	r6, r0
   890d2:	4630      	mov	r0, r6
   890d4:	b003      	add	sp, #12
   890d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   890da:	4646      	mov	r6, r8
   890dc:	4630      	mov	r0, r6
   890de:	b003      	add	sp, #12
   890e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   890e4:	fa5f f188 	uxtb.w	r1, r8
   890e8:	4606      	mov	r6, r0
   890ea:	f88d 1004 	strb.w	r1, [sp, #4]
   890ee:	e7d2      	b.n	89096 <__fputwc+0x36>
   890f0:	4630      	mov	r0, r6
   890f2:	89a3      	ldrh	r3, [r4, #12]
   890f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   890f8:	81a3      	strh	r3, [r4, #12]
   890fa:	b003      	add	sp, #12
   890fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00089100 <_fputwc_r>:
   89100:	b530      	push	{r4, r5, lr}
   89102:	6e53      	ldr	r3, [r2, #100]	; 0x64
   89104:	4614      	mov	r4, r2
   89106:	f013 0f01 	tst.w	r3, #1
   8910a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8910e:	4605      	mov	r5, r0
   89110:	b083      	sub	sp, #12
   89112:	b29a      	uxth	r2, r3
   89114:	d101      	bne.n	8911a <_fputwc_r+0x1a>
   89116:	0598      	lsls	r0, r3, #22
   89118:	d51c      	bpl.n	89154 <_fputwc_r+0x54>
   8911a:	0490      	lsls	r0, r2, #18
   8911c:	d406      	bmi.n	8912c <_fputwc_r+0x2c>
   8911e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89120:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   89124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89128:	81a3      	strh	r3, [r4, #12]
   8912a:	6662      	str	r2, [r4, #100]	; 0x64
   8912c:	4622      	mov	r2, r4
   8912e:	4628      	mov	r0, r5
   89130:	f7ff ff96 	bl	89060 <__fputwc>
   89134:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89136:	4605      	mov	r5, r0
   89138:	07da      	lsls	r2, r3, #31
   8913a:	d402      	bmi.n	89142 <_fputwc_r+0x42>
   8913c:	89a3      	ldrh	r3, [r4, #12]
   8913e:	059b      	lsls	r3, r3, #22
   89140:	d502      	bpl.n	89148 <_fputwc_r+0x48>
   89142:	4628      	mov	r0, r5
   89144:	b003      	add	sp, #12
   89146:	bd30      	pop	{r4, r5, pc}
   89148:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8914a:	f000 fb09 	bl	89760 <__retarget_lock_release_recursive>
   8914e:	4628      	mov	r0, r5
   89150:	b003      	add	sp, #12
   89152:	bd30      	pop	{r4, r5, pc}
   89154:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89156:	9101      	str	r1, [sp, #4]
   89158:	f000 fb00 	bl	8975c <__retarget_lock_acquire_recursive>
   8915c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89160:	9901      	ldr	r1, [sp, #4]
   89162:	b29a      	uxth	r2, r3
   89164:	e7d9      	b.n	8911a <_fputwc_r+0x1a>
   89166:	bf00      	nop

00089168 <_malloc_trim_r>:
   89168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8916a:	460c      	mov	r4, r1
   8916c:	4f23      	ldr	r7, [pc, #140]	; (891fc <_malloc_trim_r+0x94>)
   8916e:	4606      	mov	r6, r0
   89170:	f000 ff26 	bl	89fc0 <__malloc_lock>
   89174:	68bb      	ldr	r3, [r7, #8]
   89176:	685d      	ldr	r5, [r3, #4]
   89178:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   8917c:	f025 0503 	bic.w	r5, r5, #3
   89180:	330f      	adds	r3, #15
   89182:	442b      	add	r3, r5
   89184:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   89188:	f023 030f 	bic.w	r3, r3, #15
   8918c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   89190:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   89194:	db07      	blt.n	891a6 <_malloc_trim_r+0x3e>
   89196:	2100      	movs	r1, #0
   89198:	4630      	mov	r0, r6
   8919a:	f001 fce7 	bl	8ab6c <_sbrk_r>
   8919e:	68bb      	ldr	r3, [r7, #8]
   891a0:	442b      	add	r3, r5
   891a2:	4298      	cmp	r0, r3
   891a4:	d004      	beq.n	891b0 <_malloc_trim_r+0x48>
   891a6:	4630      	mov	r0, r6
   891a8:	f000 ff10 	bl	89fcc <__malloc_unlock>
   891ac:	2000      	movs	r0, #0
   891ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   891b0:	4630      	mov	r0, r6
   891b2:	4261      	negs	r1, r4
   891b4:	f001 fcda 	bl	8ab6c <_sbrk_r>
   891b8:	3001      	adds	r0, #1
   891ba:	d00d      	beq.n	891d8 <_malloc_trim_r+0x70>
   891bc:	4a10      	ldr	r2, [pc, #64]	; (89200 <_malloc_trim_r+0x98>)
   891be:	68bb      	ldr	r3, [r7, #8]
   891c0:	1b2d      	subs	r5, r5, r4
   891c2:	f045 0501 	orr.w	r5, r5, #1
   891c6:	605d      	str	r5, [r3, #4]
   891c8:	6813      	ldr	r3, [r2, #0]
   891ca:	4630      	mov	r0, r6
   891cc:	1b1b      	subs	r3, r3, r4
   891ce:	6013      	str	r3, [r2, #0]
   891d0:	f000 fefc 	bl	89fcc <__malloc_unlock>
   891d4:	2001      	movs	r0, #1
   891d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   891d8:	2100      	movs	r1, #0
   891da:	4630      	mov	r0, r6
   891dc:	f001 fcc6 	bl	8ab6c <_sbrk_r>
   891e0:	68ba      	ldr	r2, [r7, #8]
   891e2:	1a83      	subs	r3, r0, r2
   891e4:	2b0f      	cmp	r3, #15
   891e6:	ddde      	ble.n	891a6 <_malloc_trim_r+0x3e>
   891e8:	f043 0301 	orr.w	r3, r3, #1
   891ec:	6053      	str	r3, [r2, #4]
   891ee:	4b05      	ldr	r3, [pc, #20]	; (89204 <_malloc_trim_r+0x9c>)
   891f0:	4903      	ldr	r1, [pc, #12]	; (89200 <_malloc_trim_r+0x98>)
   891f2:	681b      	ldr	r3, [r3, #0]
   891f4:	1ac0      	subs	r0, r0, r3
   891f6:	6008      	str	r0, [r1, #0]
   891f8:	e7d5      	b.n	891a6 <_malloc_trim_r+0x3e>
   891fa:	bf00      	nop
   891fc:	20000960 	.word	0x20000960
   89200:	20001944 	.word	0x20001944
   89204:	20000d68 	.word	0x20000d68

00089208 <_free_r>:
   89208:	2900      	cmp	r1, #0
   8920a:	d05e      	beq.n	892ca <_free_r+0xc2>
   8920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8920e:	460c      	mov	r4, r1
   89210:	4606      	mov	r6, r0
   89212:	f000 fed5 	bl	89fc0 <__malloc_lock>
   89216:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8921a:	4f78      	ldr	r7, [pc, #480]	; (893fc <_free_r+0x1f4>)
   8921c:	f1a4 0508 	sub.w	r5, r4, #8
   89220:	f022 0101 	bic.w	r1, r2, #1
   89224:	1868      	adds	r0, r5, r1
   89226:	f8d7 c008 	ldr.w	ip, [r7, #8]
   8922a:	6843      	ldr	r3, [r0, #4]
   8922c:	4584      	cmp	ip, r0
   8922e:	f023 0303 	bic.w	r3, r3, #3
   89232:	f000 8087 	beq.w	89344 <_free_r+0x13c>
   89236:	07d2      	lsls	r2, r2, #31
   89238:	6043      	str	r3, [r0, #4]
   8923a:	d434      	bmi.n	892a6 <_free_r+0x9e>
   8923c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   89240:	f107 0408 	add.w	r4, r7, #8
   89244:	1aad      	subs	r5, r5, r2
   89246:	4411      	add	r1, r2
   89248:	68aa      	ldr	r2, [r5, #8]
   8924a:	42a2      	cmp	r2, r4
   8924c:	d068      	beq.n	89320 <_free_r+0x118>
   8924e:	eb00 0c03 	add.w	ip, r0, r3
   89252:	f8dc e004 	ldr.w	lr, [ip, #4]
   89256:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   8925a:	f01e 0f01 	tst.w	lr, #1
   8925e:	f8c2 c00c 	str.w	ip, [r2, #12]
   89262:	f8cc 2008 	str.w	r2, [ip, #8]
   89266:	f000 8091 	beq.w	8938c <_free_r+0x184>
   8926a:	f041 0301 	orr.w	r3, r1, #1
   8926e:	606b      	str	r3, [r5, #4]
   89270:	6001      	str	r1, [r0, #0]
   89272:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   89276:	d231      	bcs.n	892dc <_free_r+0xd4>
   89278:	094a      	lsrs	r2, r1, #5
   8927a:	08cb      	lsrs	r3, r1, #3
   8927c:	2101      	movs	r1, #1
   8927e:	4091      	lsls	r1, r2
   89280:	687a      	ldr	r2, [r7, #4]
   89282:	3301      	adds	r3, #1
   89284:	4311      	orrs	r1, r2
   89286:	6079      	str	r1, [r7, #4]
   89288:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   8928c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   89290:	3a08      	subs	r2, #8
   89292:	e9c5 1202 	strd	r1, r2, [r5, #8]
   89296:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   8929a:	60cd      	str	r5, [r1, #12]
   8929c:	4630      	mov	r0, r6
   8929e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   892a2:	f000 be93 	b.w	89fcc <__malloc_unlock>
   892a6:	18c2      	adds	r2, r0, r3
   892a8:	6852      	ldr	r2, [r2, #4]
   892aa:	07d2      	lsls	r2, r2, #31
   892ac:	d40e      	bmi.n	892cc <_free_r+0xc4>
   892ae:	4419      	add	r1, r3
   892b0:	f107 0408 	add.w	r4, r7, #8
   892b4:	6883      	ldr	r3, [r0, #8]
   892b6:	42a3      	cmp	r3, r4
   892b8:	d070      	beq.n	8939c <_free_r+0x194>
   892ba:	68c2      	ldr	r2, [r0, #12]
   892bc:	60da      	str	r2, [r3, #12]
   892be:	6093      	str	r3, [r2, #8]
   892c0:	f041 0301 	orr.w	r3, r1, #1
   892c4:	606b      	str	r3, [r5, #4]
   892c6:	5069      	str	r1, [r5, r1]
   892c8:	e7d3      	b.n	89272 <_free_r+0x6a>
   892ca:	4770      	bx	lr
   892cc:	f041 0301 	orr.w	r3, r1, #1
   892d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   892d4:	f844 3c04 	str.w	r3, [r4, #-4]
   892d8:	6001      	str	r1, [r0, #0]
   892da:	d3cd      	bcc.n	89278 <_free_r+0x70>
   892dc:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   892e0:	ea4f 2351 	mov.w	r3, r1, lsr #9
   892e4:	d247      	bcs.n	89376 <_free_r+0x16e>
   892e6:	098b      	lsrs	r3, r1, #6
   892e8:	f103 0039 	add.w	r0, r3, #57	; 0x39
   892ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
   892f0:	00c3      	lsls	r3, r0, #3
   892f2:	18f8      	adds	r0, r7, r3
   892f4:	58fb      	ldr	r3, [r7, r3]
   892f6:	3808      	subs	r0, #8
   892f8:	4298      	cmp	r0, r3
   892fa:	d058      	beq.n	893ae <_free_r+0x1a6>
   892fc:	685a      	ldr	r2, [r3, #4]
   892fe:	f022 0203 	bic.w	r2, r2, #3
   89302:	428a      	cmp	r2, r1
   89304:	d902      	bls.n	8930c <_free_r+0x104>
   89306:	689b      	ldr	r3, [r3, #8]
   89308:	4298      	cmp	r0, r3
   8930a:	d1f7      	bne.n	892fc <_free_r+0xf4>
   8930c:	68d8      	ldr	r0, [r3, #12]
   8930e:	e9c5 3002 	strd	r3, r0, [r5, #8]
   89312:	6085      	str	r5, [r0, #8]
   89314:	4630      	mov	r0, r6
   89316:	60dd      	str	r5, [r3, #12]
   89318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8931c:	f000 be56 	b.w	89fcc <__malloc_unlock>
   89320:	18c2      	adds	r2, r0, r3
   89322:	6852      	ldr	r2, [r2, #4]
   89324:	07d2      	lsls	r2, r2, #31
   89326:	d463      	bmi.n	893f0 <_free_r+0x1e8>
   89328:	440b      	add	r3, r1
   8932a:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8932e:	60ca      	str	r2, [r1, #12]
   89330:	6091      	str	r1, [r2, #8]
   89332:	f043 0201 	orr.w	r2, r3, #1
   89336:	606a      	str	r2, [r5, #4]
   89338:	4630      	mov	r0, r6
   8933a:	50eb      	str	r3, [r5, r3]
   8933c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89340:	f000 be44 	b.w	89fcc <__malloc_unlock>
   89344:	440b      	add	r3, r1
   89346:	07d1      	lsls	r1, r2, #31
   89348:	d407      	bmi.n	8935a <_free_r+0x152>
   8934a:	f854 2c08 	ldr.w	r2, [r4, #-8]
   8934e:	1aad      	subs	r5, r5, r2
   89350:	4413      	add	r3, r2
   89352:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   89356:	60ca      	str	r2, [r1, #12]
   89358:	6091      	str	r1, [r2, #8]
   8935a:	f043 0201 	orr.w	r2, r3, #1
   8935e:	606a      	str	r2, [r5, #4]
   89360:	4a27      	ldr	r2, [pc, #156]	; (89400 <_free_r+0x1f8>)
   89362:	60bd      	str	r5, [r7, #8]
   89364:	6812      	ldr	r2, [r2, #0]
   89366:	429a      	cmp	r2, r3
   89368:	d898      	bhi.n	8929c <_free_r+0x94>
   8936a:	4b26      	ldr	r3, [pc, #152]	; (89404 <_free_r+0x1fc>)
   8936c:	4630      	mov	r0, r6
   8936e:	6819      	ldr	r1, [r3, #0]
   89370:	f7ff fefa 	bl	89168 <_malloc_trim_r>
   89374:	e792      	b.n	8929c <_free_r+0x94>
   89376:	2b14      	cmp	r3, #20
   89378:	d90a      	bls.n	89390 <_free_r+0x188>
   8937a:	2b54      	cmp	r3, #84	; 0x54
   8937c:	d81f      	bhi.n	893be <_free_r+0x1b6>
   8937e:	0b0b      	lsrs	r3, r1, #12
   89380:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   89384:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   89388:	00c3      	lsls	r3, r0, #3
   8938a:	e7b2      	b.n	892f2 <_free_r+0xea>
   8938c:	4419      	add	r1, r3
   8938e:	e791      	b.n	892b4 <_free_r+0xac>
   89390:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   89394:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   89398:	00c3      	lsls	r3, r0, #3
   8939a:	e7aa      	b.n	892f2 <_free_r+0xea>
   8939c:	f041 0301 	orr.w	r3, r1, #1
   893a0:	e9c7 5504 	strd	r5, r5, [r7, #16]
   893a4:	e9c5 4402 	strd	r4, r4, [r5, #8]
   893a8:	606b      	str	r3, [r5, #4]
   893aa:	5069      	str	r1, [r5, r1]
   893ac:	e776      	b.n	8929c <_free_r+0x94>
   893ae:	2101      	movs	r1, #1
   893b0:	1092      	asrs	r2, r2, #2
   893b2:	fa01 f202 	lsl.w	r2, r1, r2
   893b6:	6879      	ldr	r1, [r7, #4]
   893b8:	430a      	orrs	r2, r1
   893ba:	607a      	str	r2, [r7, #4]
   893bc:	e7a7      	b.n	8930e <_free_r+0x106>
   893be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   893c2:	d806      	bhi.n	893d2 <_free_r+0x1ca>
   893c4:	0bcb      	lsrs	r3, r1, #15
   893c6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   893ca:	f103 0277 	add.w	r2, r3, #119	; 0x77
   893ce:	00c3      	lsls	r3, r0, #3
   893d0:	e78f      	b.n	892f2 <_free_r+0xea>
   893d2:	f240 5254 	movw	r2, #1364	; 0x554
   893d6:	4293      	cmp	r3, r2
   893d8:	d806      	bhi.n	893e8 <_free_r+0x1e0>
   893da:	0c8b      	lsrs	r3, r1, #18
   893dc:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   893e0:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   893e4:	00c3      	lsls	r3, r0, #3
   893e6:	e784      	b.n	892f2 <_free_r+0xea>
   893e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   893ec:	227e      	movs	r2, #126	; 0x7e
   893ee:	e780      	b.n	892f2 <_free_r+0xea>
   893f0:	f041 0301 	orr.w	r3, r1, #1
   893f4:	606b      	str	r3, [r5, #4]
   893f6:	6001      	str	r1, [r0, #0]
   893f8:	e750      	b.n	8929c <_free_r+0x94>
   893fa:	bf00      	nop
   893fc:	20000960 	.word	0x20000960
   89400:	20000d6c 	.word	0x20000d6c
   89404:	20001974 	.word	0x20001974

00089408 <__sfvwrite_r>:
   89408:	6893      	ldr	r3, [r2, #8]
   8940a:	2b00      	cmp	r3, #0
   8940c:	f000 80b7 	beq.w	8957e <__sfvwrite_r+0x176>
   89410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89414:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   89418:	460c      	mov	r4, r1
   8941a:	0719      	lsls	r1, r3, #28
   8941c:	4680      	mov	r8, r0
   8941e:	4617      	mov	r7, r2
   89420:	b083      	sub	sp, #12
   89422:	b298      	uxth	r0, r3
   89424:	d525      	bpl.n	89472 <__sfvwrite_r+0x6a>
   89426:	6923      	ldr	r3, [r4, #16]
   89428:	b31b      	cbz	r3, 89472 <__sfvwrite_r+0x6a>
   8942a:	f010 0302 	ands.w	r3, r0, #2
   8942e:	683d      	ldr	r5, [r7, #0]
   89430:	d02d      	beq.n	8948e <__sfvwrite_r+0x86>
   89432:	f04f 0b00 	mov.w	fp, #0
   89436:	465e      	mov	r6, fp
   89438:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 896f4 <__sfvwrite_r+0x2ec>
   8943c:	2e00      	cmp	r6, #0
   8943e:	f000 808b 	beq.w	89558 <__sfvwrite_r+0x150>
   89442:	4556      	cmp	r6, sl
   89444:	4633      	mov	r3, r6
   89446:	465a      	mov	r2, fp
   89448:	bf28      	it	cs
   8944a:	4653      	movcs	r3, sl
   8944c:	4640      	mov	r0, r8
   8944e:	69e1      	ldr	r1, [r4, #28]
   89450:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   89454:	47e0      	blx	ip
   89456:	2800      	cmp	r0, #0
   89458:	f340 8087 	ble.w	8956a <__sfvwrite_r+0x162>
   8945c:	68bb      	ldr	r3, [r7, #8]
   8945e:	4483      	add	fp, r0
   89460:	1a1b      	subs	r3, r3, r0
   89462:	1a36      	subs	r6, r6, r0
   89464:	60bb      	str	r3, [r7, #8]
   89466:	2b00      	cmp	r3, #0
   89468:	d1e8      	bne.n	8943c <__sfvwrite_r+0x34>
   8946a:	2000      	movs	r0, #0
   8946c:	b003      	add	sp, #12
   8946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89472:	4621      	mov	r1, r4
   89474:	4640      	mov	r0, r8
   89476:	f7fe fc0f 	bl	87c98 <__swsetup_r>
   8947a:	2800      	cmp	r0, #0
   8947c:	f040 8136 	bne.w	896ec <__sfvwrite_r+0x2e4>
   89480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89484:	683d      	ldr	r5, [r7, #0]
   89486:	b298      	uxth	r0, r3
   89488:	f010 0302 	ands.w	r3, r0, #2
   8948c:	d1d1      	bne.n	89432 <__sfvwrite_r+0x2a>
   8948e:	f010 0901 	ands.w	r9, r0, #1
   89492:	d176      	bne.n	89582 <__sfvwrite_r+0x17a>
   89494:	464e      	mov	r6, r9
   89496:	2e00      	cmp	r6, #0
   89498:	d05a      	beq.n	89550 <__sfvwrite_r+0x148>
   8949a:	0582      	lsls	r2, r0, #22
   8949c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   894a0:	f140 80b5 	bpl.w	8960e <__sfvwrite_r+0x206>
   894a4:	45b3      	cmp	fp, r6
   894a6:	465a      	mov	r2, fp
   894a8:	f200 80cd 	bhi.w	89646 <__sfvwrite_r+0x23e>
   894ac:	f410 6f90 	tst.w	r0, #1152	; 0x480
   894b0:	f000 80cb 	beq.w	8964a <__sfvwrite_r+0x242>
   894b4:	6823      	ldr	r3, [r4, #0]
   894b6:	6921      	ldr	r1, [r4, #16]
   894b8:	eba3 0b01 	sub.w	fp, r3, r1
   894bc:	6963      	ldr	r3, [r4, #20]
   894be:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   894c2:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   894c6:	f10b 0301 	add.w	r3, fp, #1
   894ca:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   894ce:	4433      	add	r3, r6
   894d0:	4553      	cmp	r3, sl
   894d2:	4652      	mov	r2, sl
   894d4:	bf84      	itt	hi
   894d6:	469a      	movhi	sl, r3
   894d8:	4652      	movhi	r2, sl
   894da:	0543      	lsls	r3, r0, #21
   894dc:	f140 80ea 	bpl.w	896b4 <__sfvwrite_r+0x2ac>
   894e0:	4611      	mov	r1, r2
   894e2:	4640      	mov	r0, r8
   894e4:	f000 f9e6 	bl	898b4 <_malloc_r>
   894e8:	2800      	cmp	r0, #0
   894ea:	f000 80f9 	beq.w	896e0 <__sfvwrite_r+0x2d8>
   894ee:	465a      	mov	r2, fp
   894f0:	6921      	ldr	r1, [r4, #16]
   894f2:	9001      	str	r0, [sp, #4]
   894f4:	f7fb fd08 	bl	84f08 <memcpy>
   894f8:	89a2      	ldrh	r2, [r4, #12]
   894fa:	9b01      	ldr	r3, [sp, #4]
   894fc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89504:	81a2      	strh	r2, [r4, #12]
   89506:	eb03 000b 	add.w	r0, r3, fp
   8950a:	6123      	str	r3, [r4, #16]
   8950c:	4632      	mov	r2, r6
   8950e:	ebaa 030b 	sub.w	r3, sl, fp
   89512:	46b3      	mov	fp, r6
   89514:	f8c4 a014 	str.w	sl, [r4, #20]
   89518:	60a3      	str	r3, [r4, #8]
   8951a:	6020      	str	r0, [r4, #0]
   8951c:	46b2      	mov	sl, r6
   8951e:	2600      	movs	r6, #0
   89520:	4649      	mov	r1, r9
   89522:	9201      	str	r2, [sp, #4]
   89524:	f000 fcd0 	bl	89ec8 <memmove>
   89528:	68a3      	ldr	r3, [r4, #8]
   8952a:	6821      	ldr	r1, [r4, #0]
   8952c:	9a01      	ldr	r2, [sp, #4]
   8952e:	eba3 030b 	sub.w	r3, r3, fp
   89532:	440a      	add	r2, r1
   89534:	60a3      	str	r3, [r4, #8]
   89536:	6022      	str	r2, [r4, #0]
   89538:	68b8      	ldr	r0, [r7, #8]
   8953a:	44d1      	add	r9, sl
   8953c:	eba0 000a 	sub.w	r0, r0, sl
   89540:	60b8      	str	r0, [r7, #8]
   89542:	2800      	cmp	r0, #0
   89544:	d091      	beq.n	8946a <__sfvwrite_r+0x62>
   89546:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8954a:	b280      	uxth	r0, r0
   8954c:	2e00      	cmp	r6, #0
   8954e:	d1a4      	bne.n	8949a <__sfvwrite_r+0x92>
   89550:	e9d5 9600 	ldrd	r9, r6, [r5]
   89554:	3508      	adds	r5, #8
   89556:	e79e      	b.n	89496 <__sfvwrite_r+0x8e>
   89558:	e9d5 b600 	ldrd	fp, r6, [r5]
   8955c:	3508      	adds	r5, #8
   8955e:	e76d      	b.n	8943c <__sfvwrite_r+0x34>
   89560:	4621      	mov	r1, r4
   89562:	4640      	mov	r0, r8
   89564:	f7ff fca0 	bl	88ea8 <_fflush_r>
   89568:	b380      	cbz	r0, 895cc <__sfvwrite_r+0x1c4>
   8956a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8956e:	f04f 30ff 	mov.w	r0, #4294967295
   89572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89576:	81a3      	strh	r3, [r4, #12]
   89578:	b003      	add	sp, #12
   8957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8957e:	2000      	movs	r0, #0
   89580:	4770      	bx	lr
   89582:	461e      	mov	r6, r3
   89584:	46aa      	mov	sl, r5
   89586:	4699      	mov	r9, r3
   89588:	4618      	mov	r0, r3
   8958a:	461d      	mov	r5, r3
   8958c:	b356      	cbz	r6, 895e4 <__sfvwrite_r+0x1dc>
   8958e:	2800      	cmp	r0, #0
   89590:	d032      	beq.n	895f8 <__sfvwrite_r+0x1f0>
   89592:	464a      	mov	r2, r9
   89594:	6820      	ldr	r0, [r4, #0]
   89596:	6921      	ldr	r1, [r4, #16]
   89598:	42b2      	cmp	r2, r6
   8959a:	bf28      	it	cs
   8959c:	4632      	movcs	r2, r6
   8959e:	4288      	cmp	r0, r1
   895a0:	6963      	ldr	r3, [r4, #20]
   895a2:	d904      	bls.n	895ae <__sfvwrite_r+0x1a6>
   895a4:	68a1      	ldr	r1, [r4, #8]
   895a6:	eb03 0b01 	add.w	fp, r3, r1
   895aa:	455a      	cmp	r2, fp
   895ac:	dc74      	bgt.n	89698 <__sfvwrite_r+0x290>
   895ae:	4293      	cmp	r3, r2
   895b0:	dc65      	bgt.n	8967e <__sfvwrite_r+0x276>
   895b2:	462a      	mov	r2, r5
   895b4:	4640      	mov	r0, r8
   895b6:	69e1      	ldr	r1, [r4, #28]
   895b8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   895bc:	47e0      	blx	ip
   895be:	f1b0 0b00 	subs.w	fp, r0, #0
   895c2:	ddd2      	ble.n	8956a <__sfvwrite_r+0x162>
   895c4:	ebb9 090b 	subs.w	r9, r9, fp
   895c8:	d0ca      	beq.n	89560 <__sfvwrite_r+0x158>
   895ca:	2001      	movs	r0, #1
   895cc:	68bb      	ldr	r3, [r7, #8]
   895ce:	445d      	add	r5, fp
   895d0:	eba3 030b 	sub.w	r3, r3, fp
   895d4:	eba6 060b 	sub.w	r6, r6, fp
   895d8:	60bb      	str	r3, [r7, #8]
   895da:	2b00      	cmp	r3, #0
   895dc:	f43f af45 	beq.w	8946a <__sfvwrite_r+0x62>
   895e0:	2e00      	cmp	r6, #0
   895e2:	d1d4      	bne.n	8958e <__sfvwrite_r+0x186>
   895e4:	f10a 0308 	add.w	r3, sl, #8
   895e8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   895ec:	469a      	mov	sl, r3
   895ee:	f853 5c08 	ldr.w	r5, [r3, #-8]
   895f2:	3308      	adds	r3, #8
   895f4:	2e00      	cmp	r6, #0
   895f6:	d0f7      	beq.n	895e8 <__sfvwrite_r+0x1e0>
   895f8:	4632      	mov	r2, r6
   895fa:	210a      	movs	r1, #10
   895fc:	4628      	mov	r0, r5
   895fe:	f000 fc1b 	bl	89e38 <memchr>
   89602:	2800      	cmp	r0, #0
   89604:	d069      	beq.n	896da <__sfvwrite_r+0x2d2>
   89606:	3001      	adds	r0, #1
   89608:	eba0 0905 	sub.w	r9, r0, r5
   8960c:	e7c1      	b.n	89592 <__sfvwrite_r+0x18a>
   8960e:	6820      	ldr	r0, [r4, #0]
   89610:	6923      	ldr	r3, [r4, #16]
   89612:	4298      	cmp	r0, r3
   89614:	d81b      	bhi.n	8964e <__sfvwrite_r+0x246>
   89616:	6963      	ldr	r3, [r4, #20]
   89618:	42b3      	cmp	r3, r6
   8961a:	d818      	bhi.n	8964e <__sfvwrite_r+0x246>
   8961c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   89620:	45b4      	cmp	ip, r6
   89622:	bf28      	it	cs
   89624:	46b4      	movcs	ip, r6
   89626:	fb9c fcf3 	sdiv	ip, ip, r3
   8962a:	464a      	mov	r2, r9
   8962c:	fb03 f30c 	mul.w	r3, r3, ip
   89630:	4640      	mov	r0, r8
   89632:	69e1      	ldr	r1, [r4, #28]
   89634:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   89638:	47e0      	blx	ip
   8963a:	f1b0 0a00 	subs.w	sl, r0, #0
   8963e:	dd94      	ble.n	8956a <__sfvwrite_r+0x162>
   89640:	eba6 060a 	sub.w	r6, r6, sl
   89644:	e778      	b.n	89538 <__sfvwrite_r+0x130>
   89646:	46b3      	mov	fp, r6
   89648:	4632      	mov	r2, r6
   8964a:	6820      	ldr	r0, [r4, #0]
   8964c:	e766      	b.n	8951c <__sfvwrite_r+0x114>
   8964e:	45b3      	cmp	fp, r6
   89650:	46da      	mov	sl, fp
   89652:	bf28      	it	cs
   89654:	46b2      	movcs	sl, r6
   89656:	4649      	mov	r1, r9
   89658:	4652      	mov	r2, sl
   8965a:	f000 fc35 	bl	89ec8 <memmove>
   8965e:	68a3      	ldr	r3, [r4, #8]
   89660:	6822      	ldr	r2, [r4, #0]
   89662:	eba3 030a 	sub.w	r3, r3, sl
   89666:	4452      	add	r2, sl
   89668:	60a3      	str	r3, [r4, #8]
   8966a:	6022      	str	r2, [r4, #0]
   8966c:	2b00      	cmp	r3, #0
   8966e:	d1e7      	bne.n	89640 <__sfvwrite_r+0x238>
   89670:	4621      	mov	r1, r4
   89672:	4640      	mov	r0, r8
   89674:	f7ff fc18 	bl	88ea8 <_fflush_r>
   89678:	2800      	cmp	r0, #0
   8967a:	d0e1      	beq.n	89640 <__sfvwrite_r+0x238>
   8967c:	e775      	b.n	8956a <__sfvwrite_r+0x162>
   8967e:	4629      	mov	r1, r5
   89680:	4693      	mov	fp, r2
   89682:	9201      	str	r2, [sp, #4]
   89684:	f000 fc20 	bl	89ec8 <memmove>
   89688:	68a3      	ldr	r3, [r4, #8]
   8968a:	9a01      	ldr	r2, [sp, #4]
   8968c:	1a9b      	subs	r3, r3, r2
   8968e:	60a3      	str	r3, [r4, #8]
   89690:	6823      	ldr	r3, [r4, #0]
   89692:	441a      	add	r2, r3
   89694:	6022      	str	r2, [r4, #0]
   89696:	e795      	b.n	895c4 <__sfvwrite_r+0x1bc>
   89698:	4629      	mov	r1, r5
   8969a:	465a      	mov	r2, fp
   8969c:	f000 fc14 	bl	89ec8 <memmove>
   896a0:	6823      	ldr	r3, [r4, #0]
   896a2:	4621      	mov	r1, r4
   896a4:	445b      	add	r3, fp
   896a6:	4640      	mov	r0, r8
   896a8:	6023      	str	r3, [r4, #0]
   896aa:	f7ff fbfd 	bl	88ea8 <_fflush_r>
   896ae:	2800      	cmp	r0, #0
   896b0:	d088      	beq.n	895c4 <__sfvwrite_r+0x1bc>
   896b2:	e75a      	b.n	8956a <__sfvwrite_r+0x162>
   896b4:	4640      	mov	r0, r8
   896b6:	f001 f833 	bl	8a720 <_realloc_r>
   896ba:	4603      	mov	r3, r0
   896bc:	2800      	cmp	r0, #0
   896be:	f47f af22 	bne.w	89506 <__sfvwrite_r+0xfe>
   896c2:	4640      	mov	r0, r8
   896c4:	6921      	ldr	r1, [r4, #16]
   896c6:	f7ff fd9f 	bl	89208 <_free_r>
   896ca:	220c      	movs	r2, #12
   896cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   896d0:	f8c8 2000 	str.w	r2, [r8]
   896d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   896d8:	e749      	b.n	8956e <__sfvwrite_r+0x166>
   896da:	1c72      	adds	r2, r6, #1
   896dc:	4691      	mov	r9, r2
   896de:	e759      	b.n	89594 <__sfvwrite_r+0x18c>
   896e0:	220c      	movs	r2, #12
   896e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   896e6:	f8c8 2000 	str.w	r2, [r8]
   896ea:	e740      	b.n	8956e <__sfvwrite_r+0x166>
   896ec:	f04f 30ff 	mov.w	r0, #4294967295
   896f0:	e6bc      	b.n	8946c <__sfvwrite_r+0x64>
   896f2:	bf00      	nop
   896f4:	7ffffc00 	.word	0x7ffffc00

000896f8 <_fwalk_reent>:
   896f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   896fc:	f04f 0900 	mov.w	r9, #0
   89700:	4607      	mov	r7, r0
   89702:	4688      	mov	r8, r1
   89704:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   89708:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8970c:	3d01      	subs	r5, #1
   8970e:	d410      	bmi.n	89732 <_fwalk_reent+0x3a>
   89710:	89a3      	ldrh	r3, [r4, #12]
   89712:	3d01      	subs	r5, #1
   89714:	2b01      	cmp	r3, #1
   89716:	d908      	bls.n	8972a <_fwalk_reent+0x32>
   89718:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8971c:	3301      	adds	r3, #1
   8971e:	d004      	beq.n	8972a <_fwalk_reent+0x32>
   89720:	4621      	mov	r1, r4
   89722:	4638      	mov	r0, r7
   89724:	47c0      	blx	r8
   89726:	ea49 0900 	orr.w	r9, r9, r0
   8972a:	1c6b      	adds	r3, r5, #1
   8972c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   89730:	d1ee      	bne.n	89710 <_fwalk_reent+0x18>
   89732:	6836      	ldr	r6, [r6, #0]
   89734:	2e00      	cmp	r6, #0
   89736:	d1e7      	bne.n	89708 <_fwalk_reent+0x10>
   89738:	4648      	mov	r0, r9
   8973a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8973e:	bf00      	nop

00089740 <__locale_mb_cur_max>:
   89740:	4b01      	ldr	r3, [pc, #4]	; (89748 <__locale_mb_cur_max+0x8>)
   89742:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   89746:	4770      	bx	lr
   89748:	200007f4 	.word	0x200007f4

0008974c <_localeconv_r>:
   8974c:	4800      	ldr	r0, [pc, #0]	; (89750 <_localeconv_r+0x4>)
   8974e:	4770      	bx	lr
   89750:	200008e4 	.word	0x200008e4

00089754 <__retarget_lock_init_recursive>:
   89754:	4770      	bx	lr
   89756:	bf00      	nop

00089758 <__retarget_lock_close_recursive>:
   89758:	4770      	bx	lr
   8975a:	bf00      	nop

0008975c <__retarget_lock_acquire_recursive>:
   8975c:	4770      	bx	lr
   8975e:	bf00      	nop

00089760 <__retarget_lock_release_recursive>:
   89760:	4770      	bx	lr
   89762:	bf00      	nop

00089764 <__smakebuf_r>:
   89764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89768:	898b      	ldrh	r3, [r1, #12]
   8976a:	460c      	mov	r4, r1
   8976c:	0799      	lsls	r1, r3, #30
   8976e:	b096      	sub	sp, #88	; 0x58
   89770:	d508      	bpl.n	89784 <__smakebuf_r+0x20>
   89772:	2201      	movs	r2, #1
   89774:	f104 0343 	add.w	r3, r4, #67	; 0x43
   89778:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8977c:	6023      	str	r3, [r4, #0]
   8977e:	b016      	add	sp, #88	; 0x58
   89780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   89788:	4606      	mov	r6, r0
   8978a:	2900      	cmp	r1, #0
   8978c:	db27      	blt.n	897de <__smakebuf_r+0x7a>
   8978e:	466a      	mov	r2, sp
   89790:	f001 fc90 	bl	8b0b4 <_fstat_r>
   89794:	2800      	cmp	r0, #0
   89796:	db21      	blt.n	897dc <__smakebuf_r+0x78>
   89798:	9d01      	ldr	r5, [sp, #4]
   8979a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8979e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   897a2:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   897a6:	fab5 f585 	clz	r5, r5
   897aa:	f44f 6700 	mov.w	r7, #2048	; 0x800
   897ae:	096d      	lsrs	r5, r5, #5
   897b0:	4641      	mov	r1, r8
   897b2:	4630      	mov	r0, r6
   897b4:	f000 f87e 	bl	898b4 <_malloc_r>
   897b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   897bc:	b1f0      	cbz	r0, 897fc <__smakebuf_r+0x98>
   897be:	4a20      	ldr	r2, [pc, #128]	; (89840 <__smakebuf_r+0xdc>)
   897c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   897c4:	63f2      	str	r2, [r6, #60]	; 0x3c
   897c6:	f8c4 8014 	str.w	r8, [r4, #20]
   897ca:	81a3      	strh	r3, [r4, #12]
   897cc:	6020      	str	r0, [r4, #0]
   897ce:	6120      	str	r0, [r4, #16]
   897d0:	bb35      	cbnz	r5, 89820 <__smakebuf_r+0xbc>
   897d2:	433b      	orrs	r3, r7
   897d4:	81a3      	strh	r3, [r4, #12]
   897d6:	b016      	add	sp, #88	; 0x58
   897d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   897dc:	89a3      	ldrh	r3, [r4, #12]
   897de:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   897e2:	d019      	beq.n	89818 <__smakebuf_r+0xb4>
   897e4:	f04f 0840 	mov.w	r8, #64	; 0x40
   897e8:	4630      	mov	r0, r6
   897ea:	4641      	mov	r1, r8
   897ec:	2500      	movs	r5, #0
   897ee:	f000 f861 	bl	898b4 <_malloc_r>
   897f2:	462f      	mov	r7, r5
   897f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   897f8:	2800      	cmp	r0, #0
   897fa:	d1e0      	bne.n	897be <__smakebuf_r+0x5a>
   897fc:	059a      	lsls	r2, r3, #22
   897fe:	d4be      	bmi.n	8977e <__smakebuf_r+0x1a>
   89800:	2101      	movs	r1, #1
   89802:	f023 0303 	bic.w	r3, r3, #3
   89806:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8980a:	f043 0302 	orr.w	r3, r3, #2
   8980e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   89812:	81a3      	strh	r3, [r4, #12]
   89814:	6022      	str	r2, [r4, #0]
   89816:	e7b2      	b.n	8977e <__smakebuf_r+0x1a>
   89818:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8981c:	462f      	mov	r7, r5
   8981e:	e7c7      	b.n	897b0 <__smakebuf_r+0x4c>
   89820:	4630      	mov	r0, r6
   89822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   89826:	f001 fc59 	bl	8b0dc <_isatty_r>
   8982a:	b910      	cbnz	r0, 89832 <__smakebuf_r+0xce>
   8982c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89830:	e7cf      	b.n	897d2 <__smakebuf_r+0x6e>
   89832:	89a3      	ldrh	r3, [r4, #12]
   89834:	f023 0303 	bic.w	r3, r3, #3
   89838:	f043 0301 	orr.w	r3, r3, #1
   8983c:	b21b      	sxth	r3, r3
   8983e:	e7c8      	b.n	897d2 <__smakebuf_r+0x6e>
   89840:	00088f05 	.word	0x00088f05

00089844 <__swhatbuf_r>:
   89844:	b570      	push	{r4, r5, r6, lr}
   89846:	460c      	mov	r4, r1
   89848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8984c:	4615      	mov	r5, r2
   8984e:	2900      	cmp	r1, #0
   89850:	461e      	mov	r6, r3
   89852:	b096      	sub	sp, #88	; 0x58
   89854:	db14      	blt.n	89880 <__swhatbuf_r+0x3c>
   89856:	466a      	mov	r2, sp
   89858:	f001 fc2c 	bl	8b0b4 <_fstat_r>
   8985c:	2800      	cmp	r0, #0
   8985e:	db0f      	blt.n	89880 <__swhatbuf_r+0x3c>
   89860:	9a01      	ldr	r2, [sp, #4]
   89862:	f44f 6380 	mov.w	r3, #1024	; 0x400
   89866:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8986a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8986e:	fab2 f282 	clz	r2, r2
   89872:	f44f 6000 	mov.w	r0, #2048	; 0x800
   89876:	0952      	lsrs	r2, r2, #5
   89878:	6032      	str	r2, [r6, #0]
   8987a:	602b      	str	r3, [r5, #0]
   8987c:	b016      	add	sp, #88	; 0x58
   8987e:	bd70      	pop	{r4, r5, r6, pc}
   89880:	2300      	movs	r3, #0
   89882:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   89886:	6033      	str	r3, [r6, #0]
   89888:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8988c:	d004      	beq.n	89898 <__swhatbuf_r+0x54>
   8988e:	2240      	movs	r2, #64	; 0x40
   89890:	4618      	mov	r0, r3
   89892:	602a      	str	r2, [r5, #0]
   89894:	b016      	add	sp, #88	; 0x58
   89896:	bd70      	pop	{r4, r5, r6, pc}
   89898:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8989c:	602b      	str	r3, [r5, #0]
   8989e:	b016      	add	sp, #88	; 0x58
   898a0:	bd70      	pop	{r4, r5, r6, pc}
   898a2:	bf00      	nop

000898a4 <malloc>:
   898a4:	4b02      	ldr	r3, [pc, #8]	; (898b0 <malloc+0xc>)
   898a6:	4601      	mov	r1, r0
   898a8:	6818      	ldr	r0, [r3, #0]
   898aa:	f000 b803 	b.w	898b4 <_malloc_r>
   898ae:	bf00      	nop
   898b0:	200003c0 	.word	0x200003c0

000898b4 <_malloc_r>:
   898b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   898b8:	f101 050b 	add.w	r5, r1, #11
   898bc:	2d16      	cmp	r5, #22
   898be:	4606      	mov	r6, r0
   898c0:	b083      	sub	sp, #12
   898c2:	d825      	bhi.n	89910 <_malloc_r+0x5c>
   898c4:	2910      	cmp	r1, #16
   898c6:	f200 80b8 	bhi.w	89a3a <_malloc_r+0x186>
   898ca:	f000 fb79 	bl	89fc0 <__malloc_lock>
   898ce:	2510      	movs	r5, #16
   898d0:	2218      	movs	r2, #24
   898d2:	f04f 0c02 	mov.w	ip, #2
   898d6:	4fb5      	ldr	r7, [pc, #724]	; (89bac <_malloc_r+0x2f8>)
   898d8:	443a      	add	r2, r7
   898da:	6853      	ldr	r3, [r2, #4]
   898dc:	f1a2 0108 	sub.w	r1, r2, #8
   898e0:	428b      	cmp	r3, r1
   898e2:	f000 80b7 	beq.w	89a54 <_malloc_r+0x1a0>
   898e6:	685a      	ldr	r2, [r3, #4]
   898e8:	68d9      	ldr	r1, [r3, #12]
   898ea:	f022 0203 	bic.w	r2, r2, #3
   898ee:	441a      	add	r2, r3
   898f0:	689c      	ldr	r4, [r3, #8]
   898f2:	4630      	mov	r0, r6
   898f4:	60e1      	str	r1, [r4, #12]
   898f6:	608c      	str	r4, [r1, #8]
   898f8:	6851      	ldr	r1, [r2, #4]
   898fa:	f103 0408 	add.w	r4, r3, #8
   898fe:	f041 0101 	orr.w	r1, r1, #1
   89902:	6051      	str	r1, [r2, #4]
   89904:	f000 fb62 	bl	89fcc <__malloc_unlock>
   89908:	4620      	mov	r0, r4
   8990a:	b003      	add	sp, #12
   8990c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89910:	f035 0507 	bics.w	r5, r5, #7
   89914:	f100 8091 	bmi.w	89a3a <_malloc_r+0x186>
   89918:	42a9      	cmp	r1, r5
   8991a:	f200 808e 	bhi.w	89a3a <_malloc_r+0x186>
   8991e:	f000 fb4f 	bl	89fc0 <__malloc_lock>
   89922:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   89926:	f0c0 8194 	bcc.w	89c52 <_malloc_r+0x39e>
   8992a:	0a6b      	lsrs	r3, r5, #9
   8992c:	f000 808c 	beq.w	89a48 <_malloc_r+0x194>
   89930:	2b04      	cmp	r3, #4
   89932:	f200 816a 	bhi.w	89c0a <_malloc_r+0x356>
   89936:	09ab      	lsrs	r3, r5, #6
   89938:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   8993c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   89940:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89944:	4f99      	ldr	r7, [pc, #612]	; (89bac <_malloc_r+0x2f8>)
   89946:	4438      	add	r0, r7
   89948:	6843      	ldr	r3, [r0, #4]
   8994a:	3808      	subs	r0, #8
   8994c:	4298      	cmp	r0, r3
   8994e:	d106      	bne.n	8995e <_malloc_r+0xaa>
   89950:	e00c      	b.n	8996c <_malloc_r+0xb8>
   89952:	2900      	cmp	r1, #0
   89954:	f280 8126 	bge.w	89ba4 <_malloc_r+0x2f0>
   89958:	68db      	ldr	r3, [r3, #12]
   8995a:	4298      	cmp	r0, r3
   8995c:	d006      	beq.n	8996c <_malloc_r+0xb8>
   8995e:	685a      	ldr	r2, [r3, #4]
   89960:	f022 0203 	bic.w	r2, r2, #3
   89964:	1b51      	subs	r1, r2, r5
   89966:	290f      	cmp	r1, #15
   89968:	ddf3      	ble.n	89952 <_malloc_r+0x9e>
   8996a:	46a4      	mov	ip, r4
   8996c:	693c      	ldr	r4, [r7, #16]
   8996e:	f8df e240 	ldr.w	lr, [pc, #576]	; 89bb0 <_malloc_r+0x2fc>
   89972:	4574      	cmp	r4, lr
   89974:	d07a      	beq.n	89a6c <_malloc_r+0x1b8>
   89976:	6862      	ldr	r2, [r4, #4]
   89978:	f022 0203 	bic.w	r2, r2, #3
   8997c:	1b53      	subs	r3, r2, r5
   8997e:	2b0f      	cmp	r3, #15
   89980:	f300 8176 	bgt.w	89c70 <_malloc_r+0x3bc>
   89984:	2b00      	cmp	r3, #0
   89986:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   8998a:	f280 8167 	bge.w	89c5c <_malloc_r+0x3a8>
   8998e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89992:	f080 8119 	bcs.w	89bc8 <_malloc_r+0x314>
   89996:	2101      	movs	r1, #1
   89998:	08d3      	lsrs	r3, r2, #3
   8999a:	0952      	lsrs	r2, r2, #5
   8999c:	440b      	add	r3, r1
   8999e:	4091      	lsls	r1, r2
   899a0:	687a      	ldr	r2, [r7, #4]
   899a2:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   899a6:	430a      	orrs	r2, r1
   899a8:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   899ac:	3908      	subs	r1, #8
   899ae:	60a0      	str	r0, [r4, #8]
   899b0:	60e1      	str	r1, [r4, #12]
   899b2:	607a      	str	r2, [r7, #4]
   899b4:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   899b8:	60c4      	str	r4, [r0, #12]
   899ba:	2101      	movs	r1, #1
   899bc:	ea4f 03ac 	mov.w	r3, ip, asr #2
   899c0:	4099      	lsls	r1, r3
   899c2:	4291      	cmp	r1, r2
   899c4:	d859      	bhi.n	89a7a <_malloc_r+0x1c6>
   899c6:	4211      	tst	r1, r2
   899c8:	d106      	bne.n	899d8 <_malloc_r+0x124>
   899ca:	f02c 0c03 	bic.w	ip, ip, #3
   899ce:	0049      	lsls	r1, r1, #1
   899d0:	4211      	tst	r1, r2
   899d2:	f10c 0c04 	add.w	ip, ip, #4
   899d6:	d0fa      	beq.n	899ce <_malloc_r+0x11a>
   899d8:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   899dc:	4648      	mov	r0, r9
   899de:	4664      	mov	r4, ip
   899e0:	f8d0 800c 	ldr.w	r8, [r0, #12]
   899e4:	4540      	cmp	r0, r8
   899e6:	d108      	bne.n	899fa <_malloc_r+0x146>
   899e8:	e11c      	b.n	89c24 <_malloc_r+0x370>
   899ea:	2b00      	cmp	r3, #0
   899ec:	f280 8121 	bge.w	89c32 <_malloc_r+0x37e>
   899f0:	f8d8 800c 	ldr.w	r8, [r8, #12]
   899f4:	4540      	cmp	r0, r8
   899f6:	f000 8115 	beq.w	89c24 <_malloc_r+0x370>
   899fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
   899fe:	f022 0203 	bic.w	r2, r2, #3
   89a02:	1b53      	subs	r3, r2, r5
   89a04:	2b0f      	cmp	r3, #15
   89a06:	ddf0      	ble.n	899ea <_malloc_r+0x136>
   89a08:	eb08 0105 	add.w	r1, r8, r5
   89a0c:	f045 0501 	orr.w	r5, r5, #1
   89a10:	f8c8 5004 	str.w	r5, [r8, #4]
   89a14:	4630      	mov	r0, r6
   89a16:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   89a1a:	60f4      	str	r4, [r6, #12]
   89a1c:	60a6      	str	r6, [r4, #8]
   89a1e:	f043 0401 	orr.w	r4, r3, #1
   89a22:	e9c7 1104 	strd	r1, r1, [r7, #16]
   89a26:	604c      	str	r4, [r1, #4]
   89a28:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   89a2c:	f848 3002 	str.w	r3, [r8, r2]
   89a30:	f000 facc 	bl	89fcc <__malloc_unlock>
   89a34:	f108 0408 	add.w	r4, r8, #8
   89a38:	e002      	b.n	89a40 <_malloc_r+0x18c>
   89a3a:	230c      	movs	r3, #12
   89a3c:	2400      	movs	r4, #0
   89a3e:	6033      	str	r3, [r6, #0]
   89a40:	4620      	mov	r0, r4
   89a42:	b003      	add	sp, #12
   89a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a48:	f44f 7000 	mov.w	r0, #512	; 0x200
   89a4c:	f04f 0c40 	mov.w	ip, #64	; 0x40
   89a50:	243f      	movs	r4, #63	; 0x3f
   89a52:	e777      	b.n	89944 <_malloc_r+0x90>
   89a54:	68d3      	ldr	r3, [r2, #12]
   89a56:	429a      	cmp	r2, r3
   89a58:	bf08      	it	eq
   89a5a:	f10c 0c02 	addeq.w	ip, ip, #2
   89a5e:	f47f af42 	bne.w	898e6 <_malloc_r+0x32>
   89a62:	693c      	ldr	r4, [r7, #16]
   89a64:	f8df e148 	ldr.w	lr, [pc, #328]	; 89bb0 <_malloc_r+0x2fc>
   89a68:	4574      	cmp	r4, lr
   89a6a:	d184      	bne.n	89976 <_malloc_r+0xc2>
   89a6c:	2101      	movs	r1, #1
   89a6e:	687a      	ldr	r2, [r7, #4]
   89a70:	ea4f 03ac 	mov.w	r3, ip, asr #2
   89a74:	4099      	lsls	r1, r3
   89a76:	4291      	cmp	r1, r2
   89a78:	d9a5      	bls.n	899c6 <_malloc_r+0x112>
   89a7a:	68bc      	ldr	r4, [r7, #8]
   89a7c:	6863      	ldr	r3, [r4, #4]
   89a7e:	f023 0903 	bic.w	r9, r3, #3
   89a82:	454d      	cmp	r5, r9
   89a84:	d803      	bhi.n	89a8e <_malloc_r+0x1da>
   89a86:	eba9 0305 	sub.w	r3, r9, r5
   89a8a:	2b0f      	cmp	r3, #15
   89a8c:	dc7a      	bgt.n	89b84 <_malloc_r+0x2d0>
   89a8e:	f8df b124 	ldr.w	fp, [pc, #292]	; 89bb4 <_malloc_r+0x300>
   89a92:	4b49      	ldr	r3, [pc, #292]	; (89bb8 <_malloc_r+0x304>)
   89a94:	f8db 2000 	ldr.w	r2, [fp]
   89a98:	681b      	ldr	r3, [r3, #0]
   89a9a:	3201      	adds	r2, #1
   89a9c:	442b      	add	r3, r5
   89a9e:	eb04 0a09 	add.w	sl, r4, r9
   89aa2:	f000 812f 	beq.w	89d04 <_malloc_r+0x450>
   89aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   89aaa:	330f      	adds	r3, #15
   89aac:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   89ab0:	f028 080f 	bic.w	r8, r8, #15
   89ab4:	4641      	mov	r1, r8
   89ab6:	4630      	mov	r0, r6
   89ab8:	f001 f858 	bl	8ab6c <_sbrk_r>
   89abc:	1c41      	adds	r1, r0, #1
   89abe:	4602      	mov	r2, r0
   89ac0:	f000 80ef 	beq.w	89ca2 <_malloc_r+0x3ee>
   89ac4:	4582      	cmp	sl, r0
   89ac6:	f200 80ea 	bhi.w	89c9e <_malloc_r+0x3ea>
   89aca:	4b3c      	ldr	r3, [pc, #240]	; (89bbc <_malloc_r+0x308>)
   89acc:	6819      	ldr	r1, [r3, #0]
   89ace:	4441      	add	r1, r8
   89ad0:	4608      	mov	r0, r1
   89ad2:	6019      	str	r1, [r3, #0]
   89ad4:	f000 8149 	beq.w	89d6a <_malloc_r+0x4b6>
   89ad8:	f8db 1000 	ldr.w	r1, [fp]
   89adc:	9301      	str	r3, [sp, #4]
   89ade:	3101      	adds	r1, #1
   89ae0:	bf1b      	ittet	ne
   89ae2:	eba2 0a0a 	subne.w	sl, r2, sl
   89ae6:	4450      	addne	r0, sl
   89ae8:	f8cb 2000 	streq.w	r2, [fp]
   89aec:	6018      	strne	r0, [r3, #0]
   89aee:	f012 0b07 	ands.w	fp, r2, #7
   89af2:	f000 8111 	beq.w	89d18 <_malloc_r+0x464>
   89af6:	f1cb 0108 	rsb	r1, fp, #8
   89afa:	440a      	add	r2, r1
   89afc:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   89b00:	4490      	add	r8, r2
   89b02:	3108      	adds	r1, #8
   89b04:	eba1 0108 	sub.w	r1, r1, r8
   89b08:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   89b0c:	4651      	mov	r1, sl
   89b0e:	4630      	mov	r0, r6
   89b10:	9200      	str	r2, [sp, #0]
   89b12:	f001 f82b 	bl	8ab6c <_sbrk_r>
   89b16:	1c42      	adds	r2, r0, #1
   89b18:	e9dd 2300 	ldrd	r2, r3, [sp]
   89b1c:	f000 814b 	beq.w	89db6 <_malloc_r+0x502>
   89b20:	1a80      	subs	r0, r0, r2
   89b22:	eb00 080a 	add.w	r8, r0, sl
   89b26:	6819      	ldr	r1, [r3, #0]
   89b28:	f048 0001 	orr.w	r0, r8, #1
   89b2c:	4451      	add	r1, sl
   89b2e:	42bc      	cmp	r4, r7
   89b30:	60ba      	str	r2, [r7, #8]
   89b32:	6019      	str	r1, [r3, #0]
   89b34:	6050      	str	r0, [r2, #4]
   89b36:	f000 8124 	beq.w	89d82 <_malloc_r+0x4ce>
   89b3a:	f1b9 0f0f 	cmp.w	r9, #15
   89b3e:	f240 8122 	bls.w	89d86 <_malloc_r+0x4d2>
   89b42:	f04f 0e05 	mov.w	lr, #5
   89b46:	6860      	ldr	r0, [r4, #4]
   89b48:	f1a9 0c0c 	sub.w	ip, r9, #12
   89b4c:	f02c 0c07 	bic.w	ip, ip, #7
   89b50:	f000 0001 	and.w	r0, r0, #1
   89b54:	ea40 000c 	orr.w	r0, r0, ip
   89b58:	6060      	str	r0, [r4, #4]
   89b5a:	f1bc 0f0f 	cmp.w	ip, #15
   89b5e:	eb04 000c 	add.w	r0, r4, ip
   89b62:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   89b66:	f200 812e 	bhi.w	89dc6 <_malloc_r+0x512>
   89b6a:	4614      	mov	r4, r2
   89b6c:	6850      	ldr	r0, [r2, #4]
   89b6e:	4b14      	ldr	r3, [pc, #80]	; (89bc0 <_malloc_r+0x30c>)
   89b70:	681a      	ldr	r2, [r3, #0]
   89b72:	428a      	cmp	r2, r1
   89b74:	bf38      	it	cc
   89b76:	6019      	strcc	r1, [r3, #0]
   89b78:	4b12      	ldr	r3, [pc, #72]	; (89bc4 <_malloc_r+0x310>)
   89b7a:	681a      	ldr	r2, [r3, #0]
   89b7c:	428a      	cmp	r2, r1
   89b7e:	bf38      	it	cc
   89b80:	6019      	strcc	r1, [r3, #0]
   89b82:	e090      	b.n	89ca6 <_malloc_r+0x3f2>
   89b84:	1962      	adds	r2, r4, r5
   89b86:	f043 0301 	orr.w	r3, r3, #1
   89b8a:	f045 0501 	orr.w	r5, r5, #1
   89b8e:	6065      	str	r5, [r4, #4]
   89b90:	4630      	mov	r0, r6
   89b92:	60ba      	str	r2, [r7, #8]
   89b94:	3408      	adds	r4, #8
   89b96:	6053      	str	r3, [r2, #4]
   89b98:	f000 fa18 	bl	89fcc <__malloc_unlock>
   89b9c:	4620      	mov	r0, r4
   89b9e:	b003      	add	sp, #12
   89ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ba4:	68d9      	ldr	r1, [r3, #12]
   89ba6:	441a      	add	r2, r3
   89ba8:	e6a2      	b.n	898f0 <_malloc_r+0x3c>
   89baa:	bf00      	nop
   89bac:	20000960 	.word	0x20000960
   89bb0:	20000968 	.word	0x20000968
   89bb4:	20000d68 	.word	0x20000d68
   89bb8:	20001974 	.word	0x20001974
   89bbc:	20001944 	.word	0x20001944
   89bc0:	2000196c 	.word	0x2000196c
   89bc4:	20001970 	.word	0x20001970
   89bc8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   89bcc:	ea4f 2352 	mov.w	r3, r2, lsr #9
   89bd0:	d35f      	bcc.n	89c92 <_malloc_r+0x3de>
   89bd2:	2b14      	cmp	r3, #20
   89bd4:	f200 80b1 	bhi.w	89d3a <_malloc_r+0x486>
   89bd8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   89bdc:	00c9      	lsls	r1, r1, #3
   89bde:	335b      	adds	r3, #91	; 0x5b
   89be0:	1878      	adds	r0, r7, r1
   89be2:	5879      	ldr	r1, [r7, r1]
   89be4:	3808      	subs	r0, #8
   89be6:	4288      	cmp	r0, r1
   89be8:	f000 808f 	beq.w	89d0a <_malloc_r+0x456>
   89bec:	684b      	ldr	r3, [r1, #4]
   89bee:	f023 0303 	bic.w	r3, r3, #3
   89bf2:	4293      	cmp	r3, r2
   89bf4:	d902      	bls.n	89bfc <_malloc_r+0x348>
   89bf6:	6889      	ldr	r1, [r1, #8]
   89bf8:	4288      	cmp	r0, r1
   89bfa:	d1f7      	bne.n	89bec <_malloc_r+0x338>
   89bfc:	68c8      	ldr	r0, [r1, #12]
   89bfe:	687a      	ldr	r2, [r7, #4]
   89c00:	e9c4 1002 	strd	r1, r0, [r4, #8]
   89c04:	6084      	str	r4, [r0, #8]
   89c06:	60cc      	str	r4, [r1, #12]
   89c08:	e6d7      	b.n	899ba <_malloc_r+0x106>
   89c0a:	2b14      	cmp	r3, #20
   89c0c:	d959      	bls.n	89cc2 <_malloc_r+0x40e>
   89c0e:	2b54      	cmp	r3, #84	; 0x54
   89c10:	f200 809b 	bhi.w	89d4a <_malloc_r+0x496>
   89c14:	0b2b      	lsrs	r3, r5, #12
   89c16:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   89c1a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   89c1e:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89c22:	e68f      	b.n	89944 <_malloc_r+0x90>
   89c24:	3401      	adds	r4, #1
   89c26:	07a3      	lsls	r3, r4, #30
   89c28:	f100 0008 	add.w	r0, r0, #8
   89c2c:	f47f aed8 	bne.w	899e0 <_malloc_r+0x12c>
   89c30:	e053      	b.n	89cda <_malloc_r+0x426>
   89c32:	4644      	mov	r4, r8
   89c34:	4442      	add	r2, r8
   89c36:	6853      	ldr	r3, [r2, #4]
   89c38:	f8d8 100c 	ldr.w	r1, [r8, #12]
   89c3c:	f043 0301 	orr.w	r3, r3, #1
   89c40:	6053      	str	r3, [r2, #4]
   89c42:	f854 3f08 	ldr.w	r3, [r4, #8]!
   89c46:	4630      	mov	r0, r6
   89c48:	60d9      	str	r1, [r3, #12]
   89c4a:	608b      	str	r3, [r1, #8]
   89c4c:	f000 f9be 	bl	89fcc <__malloc_unlock>
   89c50:	e6f6      	b.n	89a40 <_malloc_r+0x18c>
   89c52:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   89c56:	f105 0208 	add.w	r2, r5, #8
   89c5a:	e63c      	b.n	898d6 <_malloc_r+0x22>
   89c5c:	4422      	add	r2, r4
   89c5e:	6853      	ldr	r3, [r2, #4]
   89c60:	4630      	mov	r0, r6
   89c62:	f043 0301 	orr.w	r3, r3, #1
   89c66:	6053      	str	r3, [r2, #4]
   89c68:	f000 f9b0 	bl	89fcc <__malloc_unlock>
   89c6c:	3408      	adds	r4, #8
   89c6e:	e6e7      	b.n	89a40 <_malloc_r+0x18c>
   89c70:	1961      	adds	r1, r4, r5
   89c72:	f045 0501 	orr.w	r5, r5, #1
   89c76:	6065      	str	r5, [r4, #4]
   89c78:	f043 0501 	orr.w	r5, r3, #1
   89c7c:	e9c7 1104 	strd	r1, r1, [r7, #16]
   89c80:	4630      	mov	r0, r6
   89c82:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   89c86:	604d      	str	r5, [r1, #4]
   89c88:	50a3      	str	r3, [r4, r2]
   89c8a:	f000 f99f 	bl	89fcc <__malloc_unlock>
   89c8e:	3408      	adds	r4, #8
   89c90:	e6d6      	b.n	89a40 <_malloc_r+0x18c>
   89c92:	0993      	lsrs	r3, r2, #6
   89c94:	f103 0139 	add.w	r1, r3, #57	; 0x39
   89c98:	00c9      	lsls	r1, r1, #3
   89c9a:	3338      	adds	r3, #56	; 0x38
   89c9c:	e7a0      	b.n	89be0 <_malloc_r+0x32c>
   89c9e:	42bc      	cmp	r4, r7
   89ca0:	d05e      	beq.n	89d60 <_malloc_r+0x4ac>
   89ca2:	68bc      	ldr	r4, [r7, #8]
   89ca4:	6860      	ldr	r0, [r4, #4]
   89ca6:	f020 0803 	bic.w	r8, r0, #3
   89caa:	4545      	cmp	r5, r8
   89cac:	eba8 0305 	sub.w	r3, r8, r5
   89cb0:	d802      	bhi.n	89cb8 <_malloc_r+0x404>
   89cb2:	2b0f      	cmp	r3, #15
   89cb4:	f73f af66 	bgt.w	89b84 <_malloc_r+0x2d0>
   89cb8:	4630      	mov	r0, r6
   89cba:	f000 f987 	bl	89fcc <__malloc_unlock>
   89cbe:	2400      	movs	r4, #0
   89cc0:	e6be      	b.n	89a40 <_malloc_r+0x18c>
   89cc2:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   89cc6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   89cca:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89cce:	e639      	b.n	89944 <_malloc_r+0x90>
   89cd0:	f859 3908 	ldr.w	r3, [r9], #-8
   89cd4:	454b      	cmp	r3, r9
   89cd6:	f040 8095 	bne.w	89e04 <_malloc_r+0x550>
   89cda:	f01c 0f03 	tst.w	ip, #3
   89cde:	f10c 3cff 	add.w	ip, ip, #4294967295
   89ce2:	d1f5      	bne.n	89cd0 <_malloc_r+0x41c>
   89ce4:	687b      	ldr	r3, [r7, #4]
   89ce6:	ea23 0301 	bic.w	r3, r3, r1
   89cea:	607b      	str	r3, [r7, #4]
   89cec:	0049      	lsls	r1, r1, #1
   89cee:	4299      	cmp	r1, r3
   89cf0:	f63f aec3 	bhi.w	89a7a <_malloc_r+0x1c6>
   89cf4:	b911      	cbnz	r1, 89cfc <_malloc_r+0x448>
   89cf6:	e6c0      	b.n	89a7a <_malloc_r+0x1c6>
   89cf8:	0049      	lsls	r1, r1, #1
   89cfa:	3404      	adds	r4, #4
   89cfc:	4219      	tst	r1, r3
   89cfe:	d0fb      	beq.n	89cf8 <_malloc_r+0x444>
   89d00:	46a4      	mov	ip, r4
   89d02:	e669      	b.n	899d8 <_malloc_r+0x124>
   89d04:	f103 0810 	add.w	r8, r3, #16
   89d08:	e6d4      	b.n	89ab4 <_malloc_r+0x200>
   89d0a:	2201      	movs	r2, #1
   89d0c:	109b      	asrs	r3, r3, #2
   89d0e:	409a      	lsls	r2, r3
   89d10:	687b      	ldr	r3, [r7, #4]
   89d12:	431a      	orrs	r2, r3
   89d14:	607a      	str	r2, [r7, #4]
   89d16:	e773      	b.n	89c00 <_malloc_r+0x34c>
   89d18:	eb02 0108 	add.w	r1, r2, r8
   89d1c:	4249      	negs	r1, r1
   89d1e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   89d22:	4651      	mov	r1, sl
   89d24:	4630      	mov	r0, r6
   89d26:	9200      	str	r2, [sp, #0]
   89d28:	f000 ff20 	bl	8ab6c <_sbrk_r>
   89d2c:	1c43      	adds	r3, r0, #1
   89d2e:	e9dd 2300 	ldrd	r2, r3, [sp]
   89d32:	f47f aef5 	bne.w	89b20 <_malloc_r+0x26c>
   89d36:	46da      	mov	sl, fp
   89d38:	e6f5      	b.n	89b26 <_malloc_r+0x272>
   89d3a:	2b54      	cmp	r3, #84	; 0x54
   89d3c:	d826      	bhi.n	89d8c <_malloc_r+0x4d8>
   89d3e:	0b13      	lsrs	r3, r2, #12
   89d40:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   89d44:	00c9      	lsls	r1, r1, #3
   89d46:	336e      	adds	r3, #110	; 0x6e
   89d48:	e74a      	b.n	89be0 <_malloc_r+0x32c>
   89d4a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89d4e:	d826      	bhi.n	89d9e <_malloc_r+0x4ea>
   89d50:	0beb      	lsrs	r3, r5, #15
   89d52:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   89d56:	f103 0477 	add.w	r4, r3, #119	; 0x77
   89d5a:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89d5e:	e5f1      	b.n	89944 <_malloc_r+0x90>
   89d60:	4b29      	ldr	r3, [pc, #164]	; (89e08 <_malloc_r+0x554>)
   89d62:	6818      	ldr	r0, [r3, #0]
   89d64:	4440      	add	r0, r8
   89d66:	6018      	str	r0, [r3, #0]
   89d68:	e6b6      	b.n	89ad8 <_malloc_r+0x224>
   89d6a:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   89d6e:	f1bc 0f00 	cmp.w	ip, #0
   89d72:	f47f aeb1 	bne.w	89ad8 <_malloc_r+0x224>
   89d76:	68bc      	ldr	r4, [r7, #8]
   89d78:	44c8      	add	r8, r9
   89d7a:	f048 0001 	orr.w	r0, r8, #1
   89d7e:	6060      	str	r0, [r4, #4]
   89d80:	e6f5      	b.n	89b6e <_malloc_r+0x2ba>
   89d82:	4614      	mov	r4, r2
   89d84:	e6f3      	b.n	89b6e <_malloc_r+0x2ba>
   89d86:	2301      	movs	r3, #1
   89d88:	6053      	str	r3, [r2, #4]
   89d8a:	e795      	b.n	89cb8 <_malloc_r+0x404>
   89d8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89d90:	d824      	bhi.n	89ddc <_malloc_r+0x528>
   89d92:	0bd3      	lsrs	r3, r2, #15
   89d94:	f103 0178 	add.w	r1, r3, #120	; 0x78
   89d98:	00c9      	lsls	r1, r1, #3
   89d9a:	3377      	adds	r3, #119	; 0x77
   89d9c:	e720      	b.n	89be0 <_malloc_r+0x32c>
   89d9e:	f240 5254 	movw	r2, #1364	; 0x554
   89da2:	4293      	cmp	r3, r2
   89da4:	d824      	bhi.n	89df0 <_malloc_r+0x53c>
   89da6:	0cab      	lsrs	r3, r5, #18
   89da8:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   89dac:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   89db0:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89db4:	e5c6      	b.n	89944 <_malloc_r+0x90>
   89db6:	f1ab 0b08 	sub.w	fp, fp, #8
   89dba:	44d8      	add	r8, fp
   89dbc:	f04f 0a00 	mov.w	sl, #0
   89dc0:	eba8 0802 	sub.w	r8, r8, r2
   89dc4:	e6af      	b.n	89b26 <_malloc_r+0x272>
   89dc6:	f104 0108 	add.w	r1, r4, #8
   89dca:	4630      	mov	r0, r6
   89dcc:	9300      	str	r3, [sp, #0]
   89dce:	f7ff fa1b 	bl	89208 <_free_r>
   89dd2:	68bc      	ldr	r4, [r7, #8]
   89dd4:	9b00      	ldr	r3, [sp, #0]
   89dd6:	6860      	ldr	r0, [r4, #4]
   89dd8:	6819      	ldr	r1, [r3, #0]
   89dda:	e6c8      	b.n	89b6e <_malloc_r+0x2ba>
   89ddc:	f240 5154 	movw	r1, #1364	; 0x554
   89de0:	428b      	cmp	r3, r1
   89de2:	d80b      	bhi.n	89dfc <_malloc_r+0x548>
   89de4:	0c93      	lsrs	r3, r2, #18
   89de6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   89dea:	00c9      	lsls	r1, r1, #3
   89dec:	337c      	adds	r3, #124	; 0x7c
   89dee:	e6f7      	b.n	89be0 <_malloc_r+0x32c>
   89df0:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   89df4:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   89df8:	247e      	movs	r4, #126	; 0x7e
   89dfa:	e5a3      	b.n	89944 <_malloc_r+0x90>
   89dfc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   89e00:	237e      	movs	r3, #126	; 0x7e
   89e02:	e6ed      	b.n	89be0 <_malloc_r+0x32c>
   89e04:	687b      	ldr	r3, [r7, #4]
   89e06:	e771      	b.n	89cec <_malloc_r+0x438>
   89e08:	20001944 	.word	0x20001944

00089e0c <__ascii_mbtowc>:
   89e0c:	b082      	sub	sp, #8
   89e0e:	b149      	cbz	r1, 89e24 <__ascii_mbtowc+0x18>
   89e10:	b15a      	cbz	r2, 89e2a <__ascii_mbtowc+0x1e>
   89e12:	b16b      	cbz	r3, 89e30 <__ascii_mbtowc+0x24>
   89e14:	7813      	ldrb	r3, [r2, #0]
   89e16:	600b      	str	r3, [r1, #0]
   89e18:	7812      	ldrb	r2, [r2, #0]
   89e1a:	1e10      	subs	r0, r2, #0
   89e1c:	bf18      	it	ne
   89e1e:	2001      	movne	r0, #1
   89e20:	b002      	add	sp, #8
   89e22:	4770      	bx	lr
   89e24:	a901      	add	r1, sp, #4
   89e26:	2a00      	cmp	r2, #0
   89e28:	d1f3      	bne.n	89e12 <__ascii_mbtowc+0x6>
   89e2a:	4610      	mov	r0, r2
   89e2c:	b002      	add	sp, #8
   89e2e:	4770      	bx	lr
   89e30:	f06f 0001 	mvn.w	r0, #1
   89e34:	e7f4      	b.n	89e20 <__ascii_mbtowc+0x14>
   89e36:	bf00      	nop

00089e38 <memchr>:
   89e38:	fa5f fc81 	uxtb.w	ip, r1
   89e3c:	0781      	lsls	r1, r0, #30
   89e3e:	d010      	beq.n	89e62 <memchr+0x2a>
   89e40:	4603      	mov	r3, r0
   89e42:	1e51      	subs	r1, r2, #1
   89e44:	b92a      	cbnz	r2, 89e52 <memchr+0x1a>
   89e46:	e00a      	b.n	89e5e <memchr+0x26>
   89e48:	079a      	lsls	r2, r3, #30
   89e4a:	4618      	mov	r0, r3
   89e4c:	d00a      	beq.n	89e64 <memchr+0x2c>
   89e4e:	3901      	subs	r1, #1
   89e50:	d305      	bcc.n	89e5e <memchr+0x26>
   89e52:	4618      	mov	r0, r3
   89e54:	f813 2b01 	ldrb.w	r2, [r3], #1
   89e58:	4562      	cmp	r2, ip
   89e5a:	d1f5      	bne.n	89e48 <memchr+0x10>
   89e5c:	4770      	bx	lr
   89e5e:	2000      	movs	r0, #0
   89e60:	4770      	bx	lr
   89e62:	4611      	mov	r1, r2
   89e64:	2903      	cmp	r1, #3
   89e66:	d80c      	bhi.n	89e82 <memchr+0x4a>
   89e68:	2900      	cmp	r1, #0
   89e6a:	d0f8      	beq.n	89e5e <memchr+0x26>
   89e6c:	4603      	mov	r3, r0
   89e6e:	4401      	add	r1, r0
   89e70:	e001      	b.n	89e76 <memchr+0x3e>
   89e72:	428b      	cmp	r3, r1
   89e74:	d0f3      	beq.n	89e5e <memchr+0x26>
   89e76:	4618      	mov	r0, r3
   89e78:	f813 2b01 	ldrb.w	r2, [r3], #1
   89e7c:	4562      	cmp	r2, ip
   89e7e:	d1f8      	bne.n	89e72 <memchr+0x3a>
   89e80:	e7ec      	b.n	89e5c <memchr+0x24>
   89e82:	4602      	mov	r2, r0
   89e84:	b510      	push	{r4, lr}
   89e86:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   89e8a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   89e8e:	4610      	mov	r0, r2
   89e90:	6803      	ldr	r3, [r0, #0]
   89e92:	3204      	adds	r2, #4
   89e94:	4063      	eors	r3, r4
   89e96:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   89e9a:	ea2e 0303 	bic.w	r3, lr, r3
   89e9e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   89ea2:	d104      	bne.n	89eae <memchr+0x76>
   89ea4:	3904      	subs	r1, #4
   89ea6:	2903      	cmp	r1, #3
   89ea8:	4610      	mov	r0, r2
   89eaa:	d8f0      	bhi.n	89e8e <memchr+0x56>
   89eac:	b151      	cbz	r1, 89ec4 <memchr+0x8c>
   89eae:	4603      	mov	r3, r0
   89eb0:	4401      	add	r1, r0
   89eb2:	e001      	b.n	89eb8 <memchr+0x80>
   89eb4:	428b      	cmp	r3, r1
   89eb6:	d005      	beq.n	89ec4 <memchr+0x8c>
   89eb8:	4618      	mov	r0, r3
   89eba:	f813 2b01 	ldrb.w	r2, [r3], #1
   89ebe:	4562      	cmp	r2, ip
   89ec0:	d1f8      	bne.n	89eb4 <memchr+0x7c>
   89ec2:	bd10      	pop	{r4, pc}
   89ec4:	2000      	movs	r0, #0
   89ec6:	bd10      	pop	{r4, pc}

00089ec8 <memmove>:
   89ec8:	4288      	cmp	r0, r1
   89eca:	d90d      	bls.n	89ee8 <memmove+0x20>
   89ecc:	188b      	adds	r3, r1, r2
   89ece:	4283      	cmp	r3, r0
   89ed0:	d90a      	bls.n	89ee8 <memmove+0x20>
   89ed2:	eb00 0c02 	add.w	ip, r0, r2
   89ed6:	b1ba      	cbz	r2, 89f08 <memmove+0x40>
   89ed8:	4662      	mov	r2, ip
   89eda:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   89ede:	4299      	cmp	r1, r3
   89ee0:	f802 cd01 	strb.w	ip, [r2, #-1]!
   89ee4:	d1f9      	bne.n	89eda <memmove+0x12>
   89ee6:	4770      	bx	lr
   89ee8:	2a0f      	cmp	r2, #15
   89eea:	d80e      	bhi.n	89f0a <memmove+0x42>
   89eec:	4603      	mov	r3, r0
   89eee:	f102 3cff 	add.w	ip, r2, #4294967295
   89ef2:	b14a      	cbz	r2, 89f08 <memmove+0x40>
   89ef4:	f10c 0c01 	add.w	ip, ip, #1
   89ef8:	3b01      	subs	r3, #1
   89efa:	448c      	add	ip, r1
   89efc:	f811 2b01 	ldrb.w	r2, [r1], #1
   89f00:	4561      	cmp	r1, ip
   89f02:	f803 2f01 	strb.w	r2, [r3, #1]!
   89f06:	d1f9      	bne.n	89efc <memmove+0x34>
   89f08:	4770      	bx	lr
   89f0a:	ea40 0301 	orr.w	r3, r0, r1
   89f0e:	079b      	lsls	r3, r3, #30
   89f10:	d14f      	bne.n	89fb2 <memmove+0xea>
   89f12:	f1a2 0310 	sub.w	r3, r2, #16
   89f16:	b570      	push	{r4, r5, r6, lr}
   89f18:	f101 0c20 	add.w	ip, r1, #32
   89f1c:	f023 050f 	bic.w	r5, r3, #15
   89f20:	f101 0e10 	add.w	lr, r1, #16
   89f24:	f100 0410 	add.w	r4, r0, #16
   89f28:	44ac      	add	ip, r5
   89f2a:	091b      	lsrs	r3, r3, #4
   89f2c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   89f30:	f10e 0e10 	add.w	lr, lr, #16
   89f34:	f844 5c10 	str.w	r5, [r4, #-16]
   89f38:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   89f3c:	3410      	adds	r4, #16
   89f3e:	f844 5c1c 	str.w	r5, [r4, #-28]
   89f42:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   89f46:	f844 5c18 	str.w	r5, [r4, #-24]
   89f4a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   89f4e:	45e6      	cmp	lr, ip
   89f50:	f844 5c14 	str.w	r5, [r4, #-20]
   89f54:	d1ea      	bne.n	89f2c <memmove+0x64>
   89f56:	3301      	adds	r3, #1
   89f58:	f012 0f0c 	tst.w	r2, #12
   89f5c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   89f60:	f002 040f 	and.w	r4, r2, #15
   89f64:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   89f68:	d027      	beq.n	89fba <memmove+0xf2>
   89f6a:	468e      	mov	lr, r1
   89f6c:	3c04      	subs	r4, #4
   89f6e:	f024 0603 	bic.w	r6, r4, #3
   89f72:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   89f76:	441e      	add	r6, r3
   89f78:	1f1c      	subs	r4, r3, #4
   89f7a:	f85e 5b04 	ldr.w	r5, [lr], #4
   89f7e:	f844 5f04 	str.w	r5, [r4, #4]!
   89f82:	42b4      	cmp	r4, r6
   89f84:	d1f9      	bne.n	89f7a <memmove+0xb2>
   89f86:	f10c 0401 	add.w	r4, ip, #1
   89f8a:	f002 0203 	and.w	r2, r2, #3
   89f8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   89f92:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   89f96:	f102 3cff 	add.w	ip, r2, #4294967295
   89f9a:	b14a      	cbz	r2, 89fb0 <memmove+0xe8>
   89f9c:	f10c 0c01 	add.w	ip, ip, #1
   89fa0:	3b01      	subs	r3, #1
   89fa2:	448c      	add	ip, r1
   89fa4:	f811 2b01 	ldrb.w	r2, [r1], #1
   89fa8:	4561      	cmp	r1, ip
   89faa:	f803 2f01 	strb.w	r2, [r3, #1]!
   89fae:	d1f9      	bne.n	89fa4 <memmove+0xdc>
   89fb0:	bd70      	pop	{r4, r5, r6, pc}
   89fb2:	4603      	mov	r3, r0
   89fb4:	f102 3cff 	add.w	ip, r2, #4294967295
   89fb8:	e79c      	b.n	89ef4 <memmove+0x2c>
   89fba:	4622      	mov	r2, r4
   89fbc:	e7eb      	b.n	89f96 <memmove+0xce>
   89fbe:	bf00      	nop

00089fc0 <__malloc_lock>:
   89fc0:	4801      	ldr	r0, [pc, #4]	; (89fc8 <__malloc_lock+0x8>)
   89fc2:	f7ff bbcb 	b.w	8975c <__retarget_lock_acquire_recursive>
   89fc6:	bf00      	nop
   89fc8:	20001938 	.word	0x20001938

00089fcc <__malloc_unlock>:
   89fcc:	4801      	ldr	r0, [pc, #4]	; (89fd4 <__malloc_unlock+0x8>)
   89fce:	f7ff bbc7 	b.w	89760 <__retarget_lock_release_recursive>
   89fd2:	bf00      	nop
   89fd4:	20001938 	.word	0x20001938

00089fd8 <_Balloc>:
   89fd8:	b538      	push	{r3, r4, r5, lr}
   89fda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89fdc:	4605      	mov	r5, r0
   89fde:	460c      	mov	r4, r1
   89fe0:	b14b      	cbz	r3, 89ff6 <_Balloc+0x1e>
   89fe2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   89fe6:	b180      	cbz	r0, 8a00a <_Balloc+0x32>
   89fe8:	6802      	ldr	r2, [r0, #0]
   89fea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   89fee:	2300      	movs	r3, #0
   89ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   89ff4:	bd38      	pop	{r3, r4, r5, pc}
   89ff6:	2221      	movs	r2, #33	; 0x21
   89ff8:	2104      	movs	r1, #4
   89ffa:	f000 ff8d 	bl	8af18 <_calloc_r>
   89ffe:	4603      	mov	r3, r0
   8a000:	64e8      	str	r0, [r5, #76]	; 0x4c
   8a002:	2800      	cmp	r0, #0
   8a004:	d1ed      	bne.n	89fe2 <_Balloc+0xa>
   8a006:	2000      	movs	r0, #0
   8a008:	bd38      	pop	{r3, r4, r5, pc}
   8a00a:	2101      	movs	r1, #1
   8a00c:	4628      	mov	r0, r5
   8a00e:	fa01 f504 	lsl.w	r5, r1, r4
   8a012:	1d6a      	adds	r2, r5, #5
   8a014:	0092      	lsls	r2, r2, #2
   8a016:	f000 ff7f 	bl	8af18 <_calloc_r>
   8a01a:	2800      	cmp	r0, #0
   8a01c:	d0f3      	beq.n	8a006 <_Balloc+0x2e>
   8a01e:	e9c0 4501 	strd	r4, r5, [r0, #4]
   8a022:	e7e4      	b.n	89fee <_Balloc+0x16>

0008a024 <_Bfree>:
   8a024:	b131      	cbz	r1, 8a034 <_Bfree+0x10>
   8a026:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a028:	684a      	ldr	r2, [r1, #4]
   8a02a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8a02e:	6008      	str	r0, [r1, #0]
   8a030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8a034:	4770      	bx	lr
   8a036:	bf00      	nop

0008a038 <__multadd>:
   8a038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a03c:	f04f 0e00 	mov.w	lr, #0
   8a040:	460e      	mov	r6, r1
   8a042:	461c      	mov	r4, r3
   8a044:	690d      	ldr	r5, [r1, #16]
   8a046:	4607      	mov	r7, r0
   8a048:	f101 0014 	add.w	r0, r1, #20
   8a04c:	6801      	ldr	r1, [r0, #0]
   8a04e:	f10e 0e01 	add.w	lr, lr, #1
   8a052:	b28b      	uxth	r3, r1
   8a054:	fb02 4303 	mla	r3, r2, r3, r4
   8a058:	0c09      	lsrs	r1, r1, #16
   8a05a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8a05e:	fb02 cc01 	mla	ip, r2, r1, ip
   8a062:	b29b      	uxth	r3, r3
   8a064:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   8a068:	4575      	cmp	r5, lr
   8a06a:	f840 3b04 	str.w	r3, [r0], #4
   8a06e:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8a072:	dceb      	bgt.n	8a04c <__multadd+0x14>
   8a074:	b13c      	cbz	r4, 8a086 <__multadd+0x4e>
   8a076:	68b3      	ldr	r3, [r6, #8]
   8a078:	42ab      	cmp	r3, r5
   8a07a:	dd07      	ble.n	8a08c <__multadd+0x54>
   8a07c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8a080:	3501      	adds	r5, #1
   8a082:	615c      	str	r4, [r3, #20]
   8a084:	6135      	str	r5, [r6, #16]
   8a086:	4630      	mov	r0, r6
   8a088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a08c:	6871      	ldr	r1, [r6, #4]
   8a08e:	4638      	mov	r0, r7
   8a090:	3101      	adds	r1, #1
   8a092:	f7ff ffa1 	bl	89fd8 <_Balloc>
   8a096:	4680      	mov	r8, r0
   8a098:	b1a8      	cbz	r0, 8a0c6 <__multadd+0x8e>
   8a09a:	6932      	ldr	r2, [r6, #16]
   8a09c:	f106 010c 	add.w	r1, r6, #12
   8a0a0:	3202      	adds	r2, #2
   8a0a2:	0092      	lsls	r2, r2, #2
   8a0a4:	300c      	adds	r0, #12
   8a0a6:	f7fa ff2f 	bl	84f08 <memcpy>
   8a0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a0ac:	6872      	ldr	r2, [r6, #4]
   8a0ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a0b2:	6031      	str	r1, [r6, #0]
   8a0b4:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8a0b8:	4646      	mov	r6, r8
   8a0ba:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8a0be:	3501      	adds	r5, #1
   8a0c0:	615c      	str	r4, [r3, #20]
   8a0c2:	6135      	str	r5, [r6, #16]
   8a0c4:	e7df      	b.n	8a086 <__multadd+0x4e>
   8a0c6:	4602      	mov	r2, r0
   8a0c8:	21b5      	movs	r1, #181	; 0xb5
   8a0ca:	4b02      	ldr	r3, [pc, #8]	; (8a0d4 <__multadd+0x9c>)
   8a0cc:	4802      	ldr	r0, [pc, #8]	; (8a0d8 <__multadd+0xa0>)
   8a0ce:	f000 ff03 	bl	8aed8 <__assert_func>
   8a0d2:	bf00      	nop
   8a0d4:	0008bf70 	.word	0x0008bf70
   8a0d8:	0008c014 	.word	0x0008c014

0008a0dc <__hi0bits>:
   8a0dc:	0c02      	lsrs	r2, r0, #16
   8a0de:	0412      	lsls	r2, r2, #16
   8a0e0:	4603      	mov	r3, r0
   8a0e2:	b9ca      	cbnz	r2, 8a118 <__hi0bits+0x3c>
   8a0e4:	2010      	movs	r0, #16
   8a0e6:	4083      	lsls	r3, r0
   8a0e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8a0ec:	bf04      	itt	eq
   8a0ee:	021b      	lsleq	r3, r3, #8
   8a0f0:	3008      	addeq	r0, #8
   8a0f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8a0f6:	bf04      	itt	eq
   8a0f8:	011b      	lsleq	r3, r3, #4
   8a0fa:	3004      	addeq	r0, #4
   8a0fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8a100:	bf04      	itt	eq
   8a102:	009b      	lsleq	r3, r3, #2
   8a104:	3002      	addeq	r0, #2
   8a106:	2b00      	cmp	r3, #0
   8a108:	db05      	blt.n	8a116 <__hi0bits+0x3a>
   8a10a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8a10e:	f100 0001 	add.w	r0, r0, #1
   8a112:	bf08      	it	eq
   8a114:	2020      	moveq	r0, #32
   8a116:	4770      	bx	lr
   8a118:	2000      	movs	r0, #0
   8a11a:	e7e5      	b.n	8a0e8 <__hi0bits+0xc>

0008a11c <__lo0bits>:
   8a11c:	6803      	ldr	r3, [r0, #0]
   8a11e:	4602      	mov	r2, r0
   8a120:	f013 0007 	ands.w	r0, r3, #7
   8a124:	d009      	beq.n	8a13a <__lo0bits+0x1e>
   8a126:	07d9      	lsls	r1, r3, #31
   8a128:	d41f      	bmi.n	8a16a <__lo0bits+0x4e>
   8a12a:	0798      	lsls	r0, r3, #30
   8a12c:	bf4b      	itete	mi
   8a12e:	085b      	lsrmi	r3, r3, #1
   8a130:	089b      	lsrpl	r3, r3, #2
   8a132:	2001      	movmi	r0, #1
   8a134:	2002      	movpl	r0, #2
   8a136:	6013      	str	r3, [r2, #0]
   8a138:	4770      	bx	lr
   8a13a:	b299      	uxth	r1, r3
   8a13c:	b909      	cbnz	r1, 8a142 <__lo0bits+0x26>
   8a13e:	2010      	movs	r0, #16
   8a140:	40c3      	lsrs	r3, r0
   8a142:	b2d9      	uxtb	r1, r3
   8a144:	b909      	cbnz	r1, 8a14a <__lo0bits+0x2e>
   8a146:	3008      	adds	r0, #8
   8a148:	0a1b      	lsrs	r3, r3, #8
   8a14a:	0719      	lsls	r1, r3, #28
   8a14c:	bf04      	itt	eq
   8a14e:	091b      	lsreq	r3, r3, #4
   8a150:	3004      	addeq	r0, #4
   8a152:	0799      	lsls	r1, r3, #30
   8a154:	bf04      	itt	eq
   8a156:	089b      	lsreq	r3, r3, #2
   8a158:	3002      	addeq	r0, #2
   8a15a:	07d9      	lsls	r1, r3, #31
   8a15c:	d403      	bmi.n	8a166 <__lo0bits+0x4a>
   8a15e:	085b      	lsrs	r3, r3, #1
   8a160:	f100 0001 	add.w	r0, r0, #1
   8a164:	d003      	beq.n	8a16e <__lo0bits+0x52>
   8a166:	6013      	str	r3, [r2, #0]
   8a168:	4770      	bx	lr
   8a16a:	2000      	movs	r0, #0
   8a16c:	4770      	bx	lr
   8a16e:	2020      	movs	r0, #32
   8a170:	4770      	bx	lr
   8a172:	bf00      	nop

0008a174 <__i2b>:
   8a174:	b538      	push	{r3, r4, r5, lr}
   8a176:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a178:	4604      	mov	r4, r0
   8a17a:	460d      	mov	r5, r1
   8a17c:	b14b      	cbz	r3, 8a192 <__i2b+0x1e>
   8a17e:	6858      	ldr	r0, [r3, #4]
   8a180:	b1b0      	cbz	r0, 8a1b0 <__i2b+0x3c>
   8a182:	6802      	ldr	r2, [r0, #0]
   8a184:	605a      	str	r2, [r3, #4]
   8a186:	2200      	movs	r2, #0
   8a188:	2301      	movs	r3, #1
   8a18a:	6145      	str	r5, [r0, #20]
   8a18c:	e9c0 2303 	strd	r2, r3, [r0, #12]
   8a190:	bd38      	pop	{r3, r4, r5, pc}
   8a192:	2221      	movs	r2, #33	; 0x21
   8a194:	2104      	movs	r1, #4
   8a196:	f000 febf 	bl	8af18 <_calloc_r>
   8a19a:	4603      	mov	r3, r0
   8a19c:	64e0      	str	r0, [r4, #76]	; 0x4c
   8a19e:	2800      	cmp	r0, #0
   8a1a0:	d1ed      	bne.n	8a17e <__i2b+0xa>
   8a1a2:	2200      	movs	r2, #0
   8a1a4:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a1a8:	4b07      	ldr	r3, [pc, #28]	; (8a1c8 <__i2b+0x54>)
   8a1aa:	4808      	ldr	r0, [pc, #32]	; (8a1cc <__i2b+0x58>)
   8a1ac:	f000 fe94 	bl	8aed8 <__assert_func>
   8a1b0:	221c      	movs	r2, #28
   8a1b2:	2101      	movs	r1, #1
   8a1b4:	4620      	mov	r0, r4
   8a1b6:	f000 feaf 	bl	8af18 <_calloc_r>
   8a1ba:	2800      	cmp	r0, #0
   8a1bc:	d0f1      	beq.n	8a1a2 <__i2b+0x2e>
   8a1be:	2201      	movs	r2, #1
   8a1c0:	2302      	movs	r3, #2
   8a1c2:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8a1c6:	e7de      	b.n	8a186 <__i2b+0x12>
   8a1c8:	0008bf70 	.word	0x0008bf70
   8a1cc:	0008c014 	.word	0x0008c014

0008a1d0 <__multiply>:
   8a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a1d4:	690e      	ldr	r6, [r1, #16]
   8a1d6:	6915      	ldr	r5, [r2, #16]
   8a1d8:	4688      	mov	r8, r1
   8a1da:	42ae      	cmp	r6, r5
   8a1dc:	4614      	mov	r4, r2
   8a1de:	b085      	sub	sp, #20
   8a1e0:	db05      	blt.n	8a1ee <__multiply+0x1e>
   8a1e2:	462a      	mov	r2, r5
   8a1e4:	4623      	mov	r3, r4
   8a1e6:	4635      	mov	r5, r6
   8a1e8:	460c      	mov	r4, r1
   8a1ea:	4616      	mov	r6, r2
   8a1ec:	4698      	mov	r8, r3
   8a1ee:	68a3      	ldr	r3, [r4, #8]
   8a1f0:	6861      	ldr	r1, [r4, #4]
   8a1f2:	19af      	adds	r7, r5, r6
   8a1f4:	42bb      	cmp	r3, r7
   8a1f6:	bfb8      	it	lt
   8a1f8:	3101      	addlt	r1, #1
   8a1fa:	f7ff feed 	bl	89fd8 <_Balloc>
   8a1fe:	9001      	str	r0, [sp, #4]
   8a200:	2800      	cmp	r0, #0
   8a202:	f000 8087 	beq.w	8a314 <__multiply+0x144>
   8a206:	9b01      	ldr	r3, [sp, #4]
   8a208:	f103 0914 	add.w	r9, r3, #20
   8a20c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   8a210:	45d1      	cmp	r9, sl
   8a212:	d205      	bcs.n	8a220 <__multiply+0x50>
   8a214:	464b      	mov	r3, r9
   8a216:	2200      	movs	r2, #0
   8a218:	f843 2b04 	str.w	r2, [r3], #4
   8a21c:	459a      	cmp	sl, r3
   8a21e:	d8fb      	bhi.n	8a218 <__multiply+0x48>
   8a220:	f108 0814 	add.w	r8, r8, #20
   8a224:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   8a228:	f104 0314 	add.w	r3, r4, #20
   8a22c:	45d8      	cmp	r8, fp
   8a22e:	461a      	mov	r2, r3
   8a230:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   8a234:	d25f      	bcs.n	8a2f6 <__multiply+0x126>
   8a236:	1b2b      	subs	r3, r5, r4
   8a238:	3b15      	subs	r3, #21
   8a23a:	f023 0303 	bic.w	r3, r3, #3
   8a23e:	3304      	adds	r3, #4
   8a240:	3415      	adds	r4, #21
   8a242:	42a5      	cmp	r5, r4
   8a244:	bf38      	it	cc
   8a246:	2304      	movcc	r3, #4
   8a248:	e9cd a702 	strd	sl, r7, [sp, #8]
   8a24c:	46ac      	mov	ip, r5
   8a24e:	461f      	mov	r7, r3
   8a250:	4692      	mov	sl, r2
   8a252:	e005      	b.n	8a260 <__multiply+0x90>
   8a254:	0c00      	lsrs	r0, r0, #16
   8a256:	d129      	bne.n	8a2ac <__multiply+0xdc>
   8a258:	45c3      	cmp	fp, r8
   8a25a:	f109 0904 	add.w	r9, r9, #4
   8a25e:	d948      	bls.n	8a2f2 <__multiply+0x122>
   8a260:	f858 0b04 	ldr.w	r0, [r8], #4
   8a264:	b285      	uxth	r5, r0
   8a266:	2d00      	cmp	r5, #0
   8a268:	d0f4      	beq.n	8a254 <__multiply+0x84>
   8a26a:	4656      	mov	r6, sl
   8a26c:	464c      	mov	r4, r9
   8a26e:	2300      	movs	r3, #0
   8a270:	f856 0b04 	ldr.w	r0, [r6], #4
   8a274:	6821      	ldr	r1, [r4, #0]
   8a276:	b282      	uxth	r2, r0
   8a278:	fa1f fe81 	uxth.w	lr, r1
   8a27c:	fb05 ee02 	mla	lr, r5, r2, lr
   8a280:	0c00      	lsrs	r0, r0, #16
   8a282:	0c0a      	lsrs	r2, r1, #16
   8a284:	fb05 2200 	mla	r2, r5, r0, r2
   8a288:	4473      	add	r3, lr
   8a28a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8a28e:	b29b      	uxth	r3, r3
   8a290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a294:	45b4      	cmp	ip, r6
   8a296:	f844 3b04 	str.w	r3, [r4], #4
   8a29a:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8a29e:	d8e7      	bhi.n	8a270 <__multiply+0xa0>
   8a2a0:	f849 3007 	str.w	r3, [r9, r7]
   8a2a4:	f858 0c04 	ldr.w	r0, [r8, #-4]
   8a2a8:	0c00      	lsrs	r0, r0, #16
   8a2aa:	d0d5      	beq.n	8a258 <__multiply+0x88>
   8a2ac:	f8d9 3000 	ldr.w	r3, [r9]
   8a2b0:	4654      	mov	r4, sl
   8a2b2:	4619      	mov	r1, r3
   8a2b4:	464d      	mov	r5, r9
   8a2b6:	2200      	movs	r2, #0
   8a2b8:	8826      	ldrh	r6, [r4, #0]
   8a2ba:	0c09      	lsrs	r1, r1, #16
   8a2bc:	fb00 1106 	mla	r1, r0, r6, r1
   8a2c0:	b29b      	uxth	r3, r3
   8a2c2:	440a      	add	r2, r1
   8a2c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a2c8:	f845 3b04 	str.w	r3, [r5], #4
   8a2cc:	f854 6b04 	ldr.w	r6, [r4], #4
   8a2d0:	6829      	ldr	r1, [r5, #0]
   8a2d2:	0c36      	lsrs	r6, r6, #16
   8a2d4:	b28b      	uxth	r3, r1
   8a2d6:	fb00 3306 	mla	r3, r0, r6, r3
   8a2da:	45a4      	cmp	ip, r4
   8a2dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8a2e0:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8a2e4:	d8e8      	bhi.n	8a2b8 <__multiply+0xe8>
   8a2e6:	45c3      	cmp	fp, r8
   8a2e8:	f849 3007 	str.w	r3, [r9, r7]
   8a2ec:	f109 0904 	add.w	r9, r9, #4
   8a2f0:	d8b6      	bhi.n	8a260 <__multiply+0x90>
   8a2f2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8a2f6:	2f00      	cmp	r7, #0
   8a2f8:	dc02      	bgt.n	8a300 <__multiply+0x130>
   8a2fa:	e005      	b.n	8a308 <__multiply+0x138>
   8a2fc:	3f01      	subs	r7, #1
   8a2fe:	d003      	beq.n	8a308 <__multiply+0x138>
   8a300:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8a304:	2b00      	cmp	r3, #0
   8a306:	d0f9      	beq.n	8a2fc <__multiply+0x12c>
   8a308:	9b01      	ldr	r3, [sp, #4]
   8a30a:	4618      	mov	r0, r3
   8a30c:	611f      	str	r7, [r3, #16]
   8a30e:	b005      	add	sp, #20
   8a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a314:	4602      	mov	r2, r0
   8a316:	f240 115d 	movw	r1, #349	; 0x15d
   8a31a:	4b02      	ldr	r3, [pc, #8]	; (8a324 <__multiply+0x154>)
   8a31c:	4802      	ldr	r0, [pc, #8]	; (8a328 <__multiply+0x158>)
   8a31e:	f000 fddb 	bl	8aed8 <__assert_func>
   8a322:	bf00      	nop
   8a324:	0008bf70 	.word	0x0008bf70
   8a328:	0008c014 	.word	0x0008c014

0008a32c <__pow5mult>:
   8a32c:	f012 0303 	ands.w	r3, r2, #3
   8a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a334:	4614      	mov	r4, r2
   8a336:	4607      	mov	r7, r0
   8a338:	d12e      	bne.n	8a398 <__pow5mult+0x6c>
   8a33a:	460e      	mov	r6, r1
   8a33c:	10a4      	asrs	r4, r4, #2
   8a33e:	d01c      	beq.n	8a37a <__pow5mult+0x4e>
   8a340:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8a342:	b395      	cbz	r5, 8a3aa <__pow5mult+0x7e>
   8a344:	07e3      	lsls	r3, r4, #31
   8a346:	f04f 0800 	mov.w	r8, #0
   8a34a:	d406      	bmi.n	8a35a <__pow5mult+0x2e>
   8a34c:	1064      	asrs	r4, r4, #1
   8a34e:	d014      	beq.n	8a37a <__pow5mult+0x4e>
   8a350:	6828      	ldr	r0, [r5, #0]
   8a352:	b1a8      	cbz	r0, 8a380 <__pow5mult+0x54>
   8a354:	4605      	mov	r5, r0
   8a356:	07e3      	lsls	r3, r4, #31
   8a358:	d5f8      	bpl.n	8a34c <__pow5mult+0x20>
   8a35a:	462a      	mov	r2, r5
   8a35c:	4631      	mov	r1, r6
   8a35e:	4638      	mov	r0, r7
   8a360:	f7ff ff36 	bl	8a1d0 <__multiply>
   8a364:	b1b6      	cbz	r6, 8a394 <__pow5mult+0x68>
   8a366:	6871      	ldr	r1, [r6, #4]
   8a368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a36a:	1064      	asrs	r4, r4, #1
   8a36c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8a370:	6032      	str	r2, [r6, #0]
   8a372:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8a376:	4606      	mov	r6, r0
   8a378:	d1ea      	bne.n	8a350 <__pow5mult+0x24>
   8a37a:	4630      	mov	r0, r6
   8a37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a380:	462a      	mov	r2, r5
   8a382:	4629      	mov	r1, r5
   8a384:	4638      	mov	r0, r7
   8a386:	f7ff ff23 	bl	8a1d0 <__multiply>
   8a38a:	6028      	str	r0, [r5, #0]
   8a38c:	4605      	mov	r5, r0
   8a38e:	f8c0 8000 	str.w	r8, [r0]
   8a392:	e7e0      	b.n	8a356 <__pow5mult+0x2a>
   8a394:	4606      	mov	r6, r0
   8a396:	e7d9      	b.n	8a34c <__pow5mult+0x20>
   8a398:	4a0f      	ldr	r2, [pc, #60]	; (8a3d8 <__pow5mult+0xac>)
   8a39a:	3b01      	subs	r3, #1
   8a39c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a3a0:	2300      	movs	r3, #0
   8a3a2:	f7ff fe49 	bl	8a038 <__multadd>
   8a3a6:	4606      	mov	r6, r0
   8a3a8:	e7c8      	b.n	8a33c <__pow5mult+0x10>
   8a3aa:	2101      	movs	r1, #1
   8a3ac:	4638      	mov	r0, r7
   8a3ae:	f7ff fe13 	bl	89fd8 <_Balloc>
   8a3b2:	4605      	mov	r5, r0
   8a3b4:	b140      	cbz	r0, 8a3c8 <__pow5mult+0x9c>
   8a3b6:	f240 2371 	movw	r3, #625	; 0x271
   8a3ba:	2201      	movs	r2, #1
   8a3bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a3c0:	2300      	movs	r3, #0
   8a3c2:	64b8      	str	r0, [r7, #72]	; 0x48
   8a3c4:	6003      	str	r3, [r0, #0]
   8a3c6:	e7bd      	b.n	8a344 <__pow5mult+0x18>
   8a3c8:	4602      	mov	r2, r0
   8a3ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a3ce:	4b03      	ldr	r3, [pc, #12]	; (8a3dc <__pow5mult+0xb0>)
   8a3d0:	4803      	ldr	r0, [pc, #12]	; (8a3e0 <__pow5mult+0xb4>)
   8a3d2:	f000 fd81 	bl	8aed8 <__assert_func>
   8a3d6:	bf00      	nop
   8a3d8:	0008c188 	.word	0x0008c188
   8a3dc:	0008bf70 	.word	0x0008bf70
   8a3e0:	0008c014 	.word	0x0008c014

0008a3e4 <__lshift>:
   8a3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a3e8:	460c      	mov	r4, r1
   8a3ea:	6926      	ldr	r6, [r4, #16]
   8a3ec:	68a3      	ldr	r3, [r4, #8]
   8a3ee:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8a3f2:	1c75      	adds	r5, r6, #1
   8a3f4:	429d      	cmp	r5, r3
   8a3f6:	4690      	mov	r8, r2
   8a3f8:	4607      	mov	r7, r0
   8a3fa:	6849      	ldr	r1, [r1, #4]
   8a3fc:	ea4f 1962 	mov.w	r9, r2, asr #5
   8a400:	dd04      	ble.n	8a40c <__lshift+0x28>
   8a402:	005b      	lsls	r3, r3, #1
   8a404:	429d      	cmp	r5, r3
   8a406:	f101 0101 	add.w	r1, r1, #1
   8a40a:	dcfa      	bgt.n	8a402 <__lshift+0x1e>
   8a40c:	4638      	mov	r0, r7
   8a40e:	f7ff fde3 	bl	89fd8 <_Balloc>
   8a412:	2800      	cmp	r0, #0
   8a414:	d051      	beq.n	8a4ba <__lshift+0xd6>
   8a416:	f1b9 0f00 	cmp.w	r9, #0
   8a41a:	f100 0114 	add.w	r1, r0, #20
   8a41e:	dd0f      	ble.n	8a440 <__lshift+0x5c>
   8a420:	460b      	mov	r3, r1
   8a422:	f04f 0c00 	mov.w	ip, #0
   8a426:	f109 0205 	add.w	r2, r9, #5
   8a42a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   8a42e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   8a432:	f843 cb04 	str.w	ip, [r3], #4
   8a436:	4293      	cmp	r3, r2
   8a438:	d1fb      	bne.n	8a432 <__lshift+0x4e>
   8a43a:	f1ae 0314 	sub.w	r3, lr, #20
   8a43e:	4419      	add	r1, r3
   8a440:	6922      	ldr	r2, [r4, #16]
   8a442:	f104 0314 	add.w	r3, r4, #20
   8a446:	f018 081f 	ands.w	r8, r8, #31
   8a44a:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   8a44e:	d02c      	beq.n	8a4aa <__lshift+0xc6>
   8a450:	468e      	mov	lr, r1
   8a452:	f04f 0a00 	mov.w	sl, #0
   8a456:	f1c8 0920 	rsb	r9, r8, #32
   8a45a:	681a      	ldr	r2, [r3, #0]
   8a45c:	fa02 f208 	lsl.w	r2, r2, r8
   8a460:	ea42 020a 	orr.w	r2, r2, sl
   8a464:	f84e 2b04 	str.w	r2, [lr], #4
   8a468:	f853 2b04 	ldr.w	r2, [r3], #4
   8a46c:	459c      	cmp	ip, r3
   8a46e:	fa22 fa09 	lsr.w	sl, r2, r9
   8a472:	d8f2      	bhi.n	8a45a <__lshift+0x76>
   8a474:	ebac 0304 	sub.w	r3, ip, r4
   8a478:	3b15      	subs	r3, #21
   8a47a:	f023 0303 	bic.w	r3, r3, #3
   8a47e:	3304      	adds	r3, #4
   8a480:	f104 0215 	add.w	r2, r4, #21
   8a484:	4594      	cmp	ip, r2
   8a486:	bf38      	it	cc
   8a488:	2304      	movcc	r3, #4
   8a48a:	f1ba 0f00 	cmp.w	sl, #0
   8a48e:	bf18      	it	ne
   8a490:	462e      	movne	r6, r5
   8a492:	f841 a003 	str.w	sl, [r1, r3]
   8a496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a498:	6862      	ldr	r2, [r4, #4]
   8a49a:	6106      	str	r6, [r0, #16]
   8a49c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a4a0:	6021      	str	r1, [r4, #0]
   8a4a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a4aa:	3904      	subs	r1, #4
   8a4ac:	f853 2b04 	ldr.w	r2, [r3], #4
   8a4b0:	459c      	cmp	ip, r3
   8a4b2:	f841 2f04 	str.w	r2, [r1, #4]!
   8a4b6:	d8f9      	bhi.n	8a4ac <__lshift+0xc8>
   8a4b8:	e7ed      	b.n	8a496 <__lshift+0xb2>
   8a4ba:	4602      	mov	r2, r0
   8a4bc:	f240 11d9 	movw	r1, #473	; 0x1d9
   8a4c0:	4b01      	ldr	r3, [pc, #4]	; (8a4c8 <__lshift+0xe4>)
   8a4c2:	4802      	ldr	r0, [pc, #8]	; (8a4cc <__lshift+0xe8>)
   8a4c4:	f000 fd08 	bl	8aed8 <__assert_func>
   8a4c8:	0008bf70 	.word	0x0008bf70
   8a4cc:	0008c014 	.word	0x0008c014

0008a4d0 <__mcmp>:
   8a4d0:	4684      	mov	ip, r0
   8a4d2:	690b      	ldr	r3, [r1, #16]
   8a4d4:	6900      	ldr	r0, [r0, #16]
   8a4d6:	1ac0      	subs	r0, r0, r3
   8a4d8:	d115      	bne.n	8a506 <__mcmp+0x36>
   8a4da:	f10c 0c14 	add.w	ip, ip, #20
   8a4de:	3114      	adds	r1, #20
   8a4e0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8a4e4:	b410      	push	{r4}
   8a4e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8a4ea:	e001      	b.n	8a4f0 <__mcmp+0x20>
   8a4ec:	4594      	cmp	ip, r2
   8a4ee:	d208      	bcs.n	8a502 <__mcmp+0x32>
   8a4f0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8a4f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   8a4f8:	428c      	cmp	r4, r1
   8a4fa:	d0f7      	beq.n	8a4ec <__mcmp+0x1c>
   8a4fc:	d204      	bcs.n	8a508 <__mcmp+0x38>
   8a4fe:	f04f 30ff 	mov.w	r0, #4294967295
   8a502:	bc10      	pop	{r4}
   8a504:	4770      	bx	lr
   8a506:	4770      	bx	lr
   8a508:	2001      	movs	r0, #1
   8a50a:	bc10      	pop	{r4}
   8a50c:	4770      	bx	lr
   8a50e:	bf00      	nop

0008a510 <__mdiff>:
   8a510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a514:	690c      	ldr	r4, [r1, #16]
   8a516:	6913      	ldr	r3, [r2, #16]
   8a518:	4689      	mov	r9, r1
   8a51a:	1ae4      	subs	r4, r4, r3
   8a51c:	2c00      	cmp	r4, #0
   8a51e:	4617      	mov	r7, r2
   8a520:	d17d      	bne.n	8a61e <__mdiff+0x10e>
   8a522:	f101 0614 	add.w	r6, r1, #20
   8a526:	3214      	adds	r2, #20
   8a528:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   8a52c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   8a530:	e001      	b.n	8a536 <__mdiff+0x26>
   8a532:	429e      	cmp	r6, r3
   8a534:	d276      	bcs.n	8a624 <__mdiff+0x114>
   8a536:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8a53a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8a53e:	428d      	cmp	r5, r1
   8a540:	d0f7      	beq.n	8a532 <__mdiff+0x22>
   8a542:	d367      	bcc.n	8a614 <__mdiff+0x104>
   8a544:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8a548:	f7ff fd46 	bl	89fd8 <_Balloc>
   8a54c:	2800      	cmp	r0, #0
   8a54e:	d073      	beq.n	8a638 <__mdiff+0x128>
   8a550:	f8d9 5010 	ldr.w	r5, [r9, #16]
   8a554:	60c4      	str	r4, [r0, #12]
   8a556:	f100 0414 	add.w	r4, r0, #20
   8a55a:	4626      	mov	r6, r4
   8a55c:	f04f 0a00 	mov.w	sl, #0
   8a560:	693b      	ldr	r3, [r7, #16]
   8a562:	f109 0814 	add.w	r8, r9, #20
   8a566:	f107 0e14 	add.w	lr, r7, #20
   8a56a:	f109 0c10 	add.w	ip, r9, #16
   8a56e:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8a572:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8a576:	f85c bf04 	ldr.w	fp, [ip, #4]!
   8a57a:	f85e 1b04 	ldr.w	r1, [lr], #4
   8a57e:	fa1f f38b 	uxth.w	r3, fp
   8a582:	4453      	add	r3, sl
   8a584:	fa1f fa81 	uxth.w	sl, r1
   8a588:	0c09      	lsrs	r1, r1, #16
   8a58a:	eba3 030a 	sub.w	r3, r3, sl
   8a58e:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8a592:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8a596:	b29b      	uxth	r3, r3
   8a598:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a59c:	45f1      	cmp	r9, lr
   8a59e:	f846 3b04 	str.w	r3, [r6], #4
   8a5a2:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8a5a6:	d8e6      	bhi.n	8a576 <__mdiff+0x66>
   8a5a8:	eba9 0107 	sub.w	r1, r9, r7
   8a5ac:	3915      	subs	r1, #21
   8a5ae:	3715      	adds	r7, #21
   8a5b0:	45b9      	cmp	r9, r7
   8a5b2:	f021 0603 	bic.w	r6, r1, #3
   8a5b6:	f106 0604 	add.w	r6, r6, #4
   8a5ba:	bf38      	it	cc
   8a5bc:	2604      	movcc	r6, #4
   8a5be:	f021 0103 	bic.w	r1, r1, #3
   8a5c2:	bf38      	it	cc
   8a5c4:	2100      	movcc	r1, #0
   8a5c6:	44b0      	add	r8, r6
   8a5c8:	4542      	cmp	r2, r8
   8a5ca:	4426      	add	r6, r4
   8a5cc:	440c      	add	r4, r1
   8a5ce:	d918      	bls.n	8a602 <__mdiff+0xf2>
   8a5d0:	4637      	mov	r7, r6
   8a5d2:	4644      	mov	r4, r8
   8a5d4:	f854 1b04 	ldr.w	r1, [r4], #4
   8a5d8:	b28b      	uxth	r3, r1
   8a5da:	4453      	add	r3, sl
   8a5dc:	ea4f 4a23 	mov.w	sl, r3, asr #16
   8a5e0:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8a5e4:	b29b      	uxth	r3, r3
   8a5e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a5ea:	42a2      	cmp	r2, r4
   8a5ec:	f847 3b04 	str.w	r3, [r7], #4
   8a5f0:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8a5f4:	d8ee      	bhi.n	8a5d4 <__mdiff+0xc4>
   8a5f6:	1e54      	subs	r4, r2, #1
   8a5f8:	eba4 0408 	sub.w	r4, r4, r8
   8a5fc:	f024 0403 	bic.w	r4, r4, #3
   8a600:	4434      	add	r4, r6
   8a602:	b923      	cbnz	r3, 8a60e <__mdiff+0xfe>
   8a604:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8a608:	3d01      	subs	r5, #1
   8a60a:	2b00      	cmp	r3, #0
   8a60c:	d0fa      	beq.n	8a604 <__mdiff+0xf4>
   8a60e:	6105      	str	r5, [r0, #16]
   8a610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a614:	464b      	mov	r3, r9
   8a616:	2401      	movs	r4, #1
   8a618:	46b9      	mov	r9, r7
   8a61a:	461f      	mov	r7, r3
   8a61c:	e792      	b.n	8a544 <__mdiff+0x34>
   8a61e:	dbf9      	blt.n	8a614 <__mdiff+0x104>
   8a620:	2400      	movs	r4, #0
   8a622:	e78f      	b.n	8a544 <__mdiff+0x34>
   8a624:	2100      	movs	r1, #0
   8a626:	f7ff fcd7 	bl	89fd8 <_Balloc>
   8a62a:	b160      	cbz	r0, 8a646 <__mdiff+0x136>
   8a62c:	2201      	movs	r2, #1
   8a62e:	2300      	movs	r3, #0
   8a630:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a638:	4602      	mov	r2, r0
   8a63a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8a63e:	4b05      	ldr	r3, [pc, #20]	; (8a654 <__mdiff+0x144>)
   8a640:	4805      	ldr	r0, [pc, #20]	; (8a658 <__mdiff+0x148>)
   8a642:	f000 fc49 	bl	8aed8 <__assert_func>
   8a646:	4602      	mov	r2, r0
   8a648:	f240 2132 	movw	r1, #562	; 0x232
   8a64c:	4b01      	ldr	r3, [pc, #4]	; (8a654 <__mdiff+0x144>)
   8a64e:	4802      	ldr	r0, [pc, #8]	; (8a658 <__mdiff+0x148>)
   8a650:	f000 fc42 	bl	8aed8 <__assert_func>
   8a654:	0008bf70 	.word	0x0008bf70
   8a658:	0008c014 	.word	0x0008c014

0008a65c <__d2b>:
   8a65c:	b570      	push	{r4, r5, r6, lr}
   8a65e:	2101      	movs	r1, #1
   8a660:	b082      	sub	sp, #8
   8a662:	4616      	mov	r6, r2
   8a664:	461d      	mov	r5, r3
   8a666:	f7ff fcb7 	bl	89fd8 <_Balloc>
   8a66a:	4604      	mov	r4, r0
   8a66c:	2800      	cmp	r0, #0
   8a66e:	d04c      	beq.n	8a70a <__d2b+0xae>
   8a670:	462b      	mov	r3, r5
   8a672:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8a676:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8a67a:	b10d      	cbz	r5, 8a680 <__d2b+0x24>
   8a67c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a680:	2e00      	cmp	r6, #0
   8a682:	9301      	str	r3, [sp, #4]
   8a684:	d022      	beq.n	8a6cc <__d2b+0x70>
   8a686:	4668      	mov	r0, sp
   8a688:	9600      	str	r6, [sp, #0]
   8a68a:	f7ff fd47 	bl	8a11c <__lo0bits>
   8a68e:	2800      	cmp	r0, #0
   8a690:	d037      	beq.n	8a702 <__d2b+0xa6>
   8a692:	9b01      	ldr	r3, [sp, #4]
   8a694:	9900      	ldr	r1, [sp, #0]
   8a696:	f1c0 0220 	rsb	r2, r0, #32
   8a69a:	fa03 f202 	lsl.w	r2, r3, r2
   8a69e:	430a      	orrs	r2, r1
   8a6a0:	40c3      	lsrs	r3, r0
   8a6a2:	9301      	str	r3, [sp, #4]
   8a6a4:	6162      	str	r2, [r4, #20]
   8a6a6:	2b00      	cmp	r3, #0
   8a6a8:	bf14      	ite	ne
   8a6aa:	2102      	movne	r1, #2
   8a6ac:	2101      	moveq	r1, #1
   8a6ae:	61a3      	str	r3, [r4, #24]
   8a6b0:	6121      	str	r1, [r4, #16]
   8a6b2:	b1b5      	cbz	r5, 8a6e2 <__d2b+0x86>
   8a6b4:	9b06      	ldr	r3, [sp, #24]
   8a6b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   8a6ba:	4405      	add	r5, r0
   8a6bc:	601d      	str	r5, [r3, #0]
   8a6be:	9b07      	ldr	r3, [sp, #28]
   8a6c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8a6c4:	6018      	str	r0, [r3, #0]
   8a6c6:	4620      	mov	r0, r4
   8a6c8:	b002      	add	sp, #8
   8a6ca:	bd70      	pop	{r4, r5, r6, pc}
   8a6cc:	a801      	add	r0, sp, #4
   8a6ce:	f7ff fd25 	bl	8a11c <__lo0bits>
   8a6d2:	2301      	movs	r3, #1
   8a6d4:	9a01      	ldr	r2, [sp, #4]
   8a6d6:	4619      	mov	r1, r3
   8a6d8:	6162      	str	r2, [r4, #20]
   8a6da:	3020      	adds	r0, #32
   8a6dc:	6123      	str	r3, [r4, #16]
   8a6de:	2d00      	cmp	r5, #0
   8a6e0:	d1e8      	bne.n	8a6b4 <__d2b+0x58>
   8a6e2:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8a6e6:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   8a6ea:	6910      	ldr	r0, [r2, #16]
   8a6ec:	9a06      	ldr	r2, [sp, #24]
   8a6ee:	6013      	str	r3, [r2, #0]
   8a6f0:	f7ff fcf4 	bl	8a0dc <__hi0bits>
   8a6f4:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8a6f8:	4620      	mov	r0, r4
   8a6fa:	9b07      	ldr	r3, [sp, #28]
   8a6fc:	6019      	str	r1, [r3, #0]
   8a6fe:	b002      	add	sp, #8
   8a700:	bd70      	pop	{r4, r5, r6, pc}
   8a702:	e9dd 2300 	ldrd	r2, r3, [sp]
   8a706:	6162      	str	r2, [r4, #20]
   8a708:	e7cd      	b.n	8a6a6 <__d2b+0x4a>
   8a70a:	4602      	mov	r2, r0
   8a70c:	f240 310a 	movw	r1, #778	; 0x30a
   8a710:	4b01      	ldr	r3, [pc, #4]	; (8a718 <__d2b+0xbc>)
   8a712:	4802      	ldr	r0, [pc, #8]	; (8a71c <__d2b+0xc0>)
   8a714:	f000 fbe0 	bl	8aed8 <__assert_func>
   8a718:	0008bf70 	.word	0x0008bf70
   8a71c:	0008c014 	.word	0x0008c014

0008a720 <_realloc_r>:
   8a720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a724:	4616      	mov	r6, r2
   8a726:	2900      	cmp	r1, #0
   8a728:	f000 8098 	beq.w	8a85c <_realloc_r+0x13c>
   8a72c:	f106 050b 	add.w	r5, r6, #11
   8a730:	4680      	mov	r8, r0
   8a732:	460c      	mov	r4, r1
   8a734:	f7ff fc44 	bl	89fc0 <__malloc_lock>
   8a738:	2d16      	cmp	r5, #22
   8a73a:	d85d      	bhi.n	8a7f8 <_realloc_r+0xd8>
   8a73c:	2510      	movs	r5, #16
   8a73e:	462a      	mov	r2, r5
   8a740:	42ae      	cmp	r6, r5
   8a742:	d85e      	bhi.n	8a802 <_realloc_r+0xe2>
   8a744:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8a748:	f1a4 0908 	sub.w	r9, r4, #8
   8a74c:	f021 0703 	bic.w	r7, r1, #3
   8a750:	4297      	cmp	r7, r2
   8a752:	da62      	bge.n	8a81a <_realloc_r+0xfa>
   8a754:	4bbc      	ldr	r3, [pc, #752]	; (8aa48 <_realloc_r+0x328>)
   8a756:	eb09 0007 	add.w	r0, r9, r7
   8a75a:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8a75e:	4584      	cmp	ip, r0
   8a760:	f000 8097 	beq.w	8a892 <_realloc_r+0x172>
   8a764:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8a768:	f02c 0301 	bic.w	r3, ip, #1
   8a76c:	4403      	add	r3, r0
   8a76e:	685b      	ldr	r3, [r3, #4]
   8a770:	07db      	lsls	r3, r3, #31
   8a772:	d468      	bmi.n	8a846 <_realloc_r+0x126>
   8a774:	f02c 0c03 	bic.w	ip, ip, #3
   8a778:	eb07 030c 	add.w	r3, r7, ip
   8a77c:	4293      	cmp	r3, r2
   8a77e:	da47      	bge.n	8a810 <_realloc_r+0xf0>
   8a780:	07cb      	lsls	r3, r1, #31
   8a782:	d410      	bmi.n	8a7a6 <_realloc_r+0x86>
   8a784:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a788:	eba9 0a03 	sub.w	sl, r9, r3
   8a78c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a790:	f023 0103 	bic.w	r1, r3, #3
   8a794:	448c      	add	ip, r1
   8a796:	44bc      	add	ip, r7
   8a798:	4594      	cmp	ip, r2
   8a79a:	f280 8111 	bge.w	8a9c0 <_realloc_r+0x2a0>
   8a79e:	187b      	adds	r3, r7, r1
   8a7a0:	4293      	cmp	r3, r2
   8a7a2:	f280 80e8 	bge.w	8a976 <_realloc_r+0x256>
   8a7a6:	4631      	mov	r1, r6
   8a7a8:	4640      	mov	r0, r8
   8a7aa:	f7ff f883 	bl	898b4 <_malloc_r>
   8a7ae:	4606      	mov	r6, r0
   8a7b0:	b1e0      	cbz	r0, 8a7ec <_realloc_r+0xcc>
   8a7b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a7b6:	f1a0 0208 	sub.w	r2, r0, #8
   8a7ba:	f023 0301 	bic.w	r3, r3, #1
   8a7be:	444b      	add	r3, r9
   8a7c0:	4293      	cmp	r3, r2
   8a7c2:	f000 80d2 	beq.w	8a96a <_realloc_r+0x24a>
   8a7c6:	1f3a      	subs	r2, r7, #4
   8a7c8:	2a24      	cmp	r2, #36	; 0x24
   8a7ca:	f200 80f5 	bhi.w	8a9b8 <_realloc_r+0x298>
   8a7ce:	2a13      	cmp	r2, #19
   8a7d0:	f200 80ac 	bhi.w	8a92c <_realloc_r+0x20c>
   8a7d4:	4603      	mov	r3, r0
   8a7d6:	4622      	mov	r2, r4
   8a7d8:	6811      	ldr	r1, [r2, #0]
   8a7da:	6019      	str	r1, [r3, #0]
   8a7dc:	6851      	ldr	r1, [r2, #4]
   8a7de:	6059      	str	r1, [r3, #4]
   8a7e0:	6892      	ldr	r2, [r2, #8]
   8a7e2:	609a      	str	r2, [r3, #8]
   8a7e4:	4621      	mov	r1, r4
   8a7e6:	4640      	mov	r0, r8
   8a7e8:	f7fe fd0e 	bl	89208 <_free_r>
   8a7ec:	4640      	mov	r0, r8
   8a7ee:	f7ff fbed 	bl	89fcc <__malloc_unlock>
   8a7f2:	4630      	mov	r0, r6
   8a7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a7f8:	f025 0507 	bic.w	r5, r5, #7
   8a7fc:	2d00      	cmp	r5, #0
   8a7fe:	462a      	mov	r2, r5
   8a800:	da9e      	bge.n	8a740 <_realloc_r+0x20>
   8a802:	230c      	movs	r3, #12
   8a804:	2600      	movs	r6, #0
   8a806:	f8c8 3000 	str.w	r3, [r8]
   8a80a:	4630      	mov	r0, r6
   8a80c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a810:	461f      	mov	r7, r3
   8a812:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a816:	60d3      	str	r3, [r2, #12]
   8a818:	609a      	str	r2, [r3, #8]
   8a81a:	1b7b      	subs	r3, r7, r5
   8a81c:	2b0f      	cmp	r3, #15
   8a81e:	d822      	bhi.n	8a866 <_realloc_r+0x146>
   8a820:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8a824:	f003 0301 	and.w	r3, r3, #1
   8a828:	433b      	orrs	r3, r7
   8a82a:	f8c9 3004 	str.w	r3, [r9, #4]
   8a82e:	444f      	add	r7, r9
   8a830:	687b      	ldr	r3, [r7, #4]
   8a832:	f043 0301 	orr.w	r3, r3, #1
   8a836:	607b      	str	r3, [r7, #4]
   8a838:	4626      	mov	r6, r4
   8a83a:	4640      	mov	r0, r8
   8a83c:	f7ff fbc6 	bl	89fcc <__malloc_unlock>
   8a840:	4630      	mov	r0, r6
   8a842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a846:	07c9      	lsls	r1, r1, #31
   8a848:	d4ad      	bmi.n	8a7a6 <_realloc_r+0x86>
   8a84a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a84e:	eba9 0a03 	sub.w	sl, r9, r3
   8a852:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a856:	f021 0103 	bic.w	r1, r1, #3
   8a85a:	e7a0      	b.n	8a79e <_realloc_r+0x7e>
   8a85c:	4611      	mov	r1, r2
   8a85e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a862:	f7ff b827 	b.w	898b4 <_malloc_r>
   8a866:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8a86a:	f043 0301 	orr.w	r3, r3, #1
   8a86e:	f001 0101 	and.w	r1, r1, #1
   8a872:	4329      	orrs	r1, r5
   8a874:	f8c9 1004 	str.w	r1, [r9, #4]
   8a878:	eb09 0105 	add.w	r1, r9, r5
   8a87c:	604b      	str	r3, [r1, #4]
   8a87e:	444f      	add	r7, r9
   8a880:	687b      	ldr	r3, [r7, #4]
   8a882:	4640      	mov	r0, r8
   8a884:	f043 0301 	orr.w	r3, r3, #1
   8a888:	3108      	adds	r1, #8
   8a88a:	607b      	str	r3, [r7, #4]
   8a88c:	f7fe fcbc 	bl	89208 <_free_r>
   8a890:	e7d2      	b.n	8a838 <_realloc_r+0x118>
   8a892:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8a896:	f020 0b03 	bic.w	fp, r0, #3
   8a89a:	eb07 0c0b 	add.w	ip, r7, fp
   8a89e:	f105 0010 	add.w	r0, r5, #16
   8a8a2:	4584      	cmp	ip, r0
   8a8a4:	da4d      	bge.n	8a942 <_realloc_r+0x222>
   8a8a6:	07c9      	lsls	r1, r1, #31
   8a8a8:	f53f af7d 	bmi.w	8a7a6 <_realloc_r+0x86>
   8a8ac:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8a8b0:	eba9 0a01 	sub.w	sl, r9, r1
   8a8b4:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a8b8:	f021 0103 	bic.w	r1, r1, #3
   8a8bc:	448b      	add	fp, r1
   8a8be:	44bb      	add	fp, r7
   8a8c0:	4558      	cmp	r0, fp
   8a8c2:	f73f af6c 	bgt.w	8a79e <_realloc_r+0x7e>
   8a8c6:	4656      	mov	r6, sl
   8a8c8:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a8cc:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a8d0:	1f3a      	subs	r2, r7, #4
   8a8d2:	2a24      	cmp	r2, #36	; 0x24
   8a8d4:	60c1      	str	r1, [r0, #12]
   8a8d6:	6088      	str	r0, [r1, #8]
   8a8d8:	f200 80db 	bhi.w	8aa92 <_realloc_r+0x372>
   8a8dc:	2a13      	cmp	r2, #19
   8a8de:	f240 80d6 	bls.w	8aa8e <_realloc_r+0x36e>
   8a8e2:	6821      	ldr	r1, [r4, #0]
   8a8e4:	2a1b      	cmp	r2, #27
   8a8e6:	f8ca 1008 	str.w	r1, [sl, #8]
   8a8ea:	6861      	ldr	r1, [r4, #4]
   8a8ec:	f8ca 100c 	str.w	r1, [sl, #12]
   8a8f0:	f200 80e0 	bhi.w	8aab4 <_realloc_r+0x394>
   8a8f4:	3408      	adds	r4, #8
   8a8f6:	f10a 0210 	add.w	r2, sl, #16
   8a8fa:	6821      	ldr	r1, [r4, #0]
   8a8fc:	6011      	str	r1, [r2, #0]
   8a8fe:	6861      	ldr	r1, [r4, #4]
   8a900:	6051      	str	r1, [r2, #4]
   8a902:	68a1      	ldr	r1, [r4, #8]
   8a904:	6091      	str	r1, [r2, #8]
   8a906:	ebab 0205 	sub.w	r2, fp, r5
   8a90a:	eb0a 0105 	add.w	r1, sl, r5
   8a90e:	f042 0201 	orr.w	r2, r2, #1
   8a912:	6099      	str	r1, [r3, #8]
   8a914:	604a      	str	r2, [r1, #4]
   8a916:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a91a:	4640      	mov	r0, r8
   8a91c:	f003 0301 	and.w	r3, r3, #1
   8a920:	431d      	orrs	r5, r3
   8a922:	f8ca 5004 	str.w	r5, [sl, #4]
   8a926:	f7ff fb51 	bl	89fcc <__malloc_unlock>
   8a92a:	e76e      	b.n	8a80a <_realloc_r+0xea>
   8a92c:	6823      	ldr	r3, [r4, #0]
   8a92e:	2a1b      	cmp	r2, #27
   8a930:	6003      	str	r3, [r0, #0]
   8a932:	6863      	ldr	r3, [r4, #4]
   8a934:	6043      	str	r3, [r0, #4]
   8a936:	d868      	bhi.n	8aa0a <_realloc_r+0x2ea>
   8a938:	f104 0208 	add.w	r2, r4, #8
   8a93c:	f100 0308 	add.w	r3, r0, #8
   8a940:	e74a      	b.n	8a7d8 <_realloc_r+0xb8>
   8a942:	eb09 0205 	add.w	r2, r9, r5
   8a946:	ebac 0c05 	sub.w	ip, ip, r5
   8a94a:	609a      	str	r2, [r3, #8]
   8a94c:	f04c 0301 	orr.w	r3, ip, #1
   8a950:	6053      	str	r3, [r2, #4]
   8a952:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a956:	4640      	mov	r0, r8
   8a958:	f003 0301 	and.w	r3, r3, #1
   8a95c:	431d      	orrs	r5, r3
   8a95e:	f844 5c04 	str.w	r5, [r4, #-4]
   8a962:	f7ff fb33 	bl	89fcc <__malloc_unlock>
   8a966:	4626      	mov	r6, r4
   8a968:	e74f      	b.n	8a80a <_realloc_r+0xea>
   8a96a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8a96e:	f023 0303 	bic.w	r3, r3, #3
   8a972:	441f      	add	r7, r3
   8a974:	e751      	b.n	8a81a <_realloc_r+0xfa>
   8a976:	4656      	mov	r6, sl
   8a978:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a97c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a980:	1f3a      	subs	r2, r7, #4
   8a982:	2a24      	cmp	r2, #36	; 0x24
   8a984:	60c1      	str	r1, [r0, #12]
   8a986:	6088      	str	r0, [r1, #8]
   8a988:	d84c      	bhi.n	8aa24 <_realloc_r+0x304>
   8a98a:	2a13      	cmp	r2, #19
   8a98c:	d948      	bls.n	8aa20 <_realloc_r+0x300>
   8a98e:	6821      	ldr	r1, [r4, #0]
   8a990:	2a1b      	cmp	r2, #27
   8a992:	f8ca 1008 	str.w	r1, [sl, #8]
   8a996:	6861      	ldr	r1, [r4, #4]
   8a998:	f8ca 100c 	str.w	r1, [sl, #12]
   8a99c:	d856      	bhi.n	8aa4c <_realloc_r+0x32c>
   8a99e:	3408      	adds	r4, #8
   8a9a0:	f10a 0210 	add.w	r2, sl, #16
   8a9a4:	461f      	mov	r7, r3
   8a9a6:	6823      	ldr	r3, [r4, #0]
   8a9a8:	46d1      	mov	r9, sl
   8a9aa:	6013      	str	r3, [r2, #0]
   8a9ac:	6863      	ldr	r3, [r4, #4]
   8a9ae:	6053      	str	r3, [r2, #4]
   8a9b0:	68a3      	ldr	r3, [r4, #8]
   8a9b2:	4634      	mov	r4, r6
   8a9b4:	6093      	str	r3, [r2, #8]
   8a9b6:	e730      	b.n	8a81a <_realloc_r+0xfa>
   8a9b8:	4621      	mov	r1, r4
   8a9ba:	f7ff fa85 	bl	89ec8 <memmove>
   8a9be:	e711      	b.n	8a7e4 <_realloc_r+0xc4>
   8a9c0:	4656      	mov	r6, sl
   8a9c2:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8a9c6:	60cb      	str	r3, [r1, #12]
   8a9c8:	6099      	str	r1, [r3, #8]
   8a9ca:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8a9ce:	f8da 300c 	ldr.w	r3, [sl, #12]
   8a9d2:	1f3a      	subs	r2, r7, #4
   8a9d4:	2a24      	cmp	r2, #36	; 0x24
   8a9d6:	60cb      	str	r3, [r1, #12]
   8a9d8:	6099      	str	r1, [r3, #8]
   8a9da:	d82d      	bhi.n	8aa38 <_realloc_r+0x318>
   8a9dc:	2a13      	cmp	r2, #19
   8a9de:	d929      	bls.n	8aa34 <_realloc_r+0x314>
   8a9e0:	6823      	ldr	r3, [r4, #0]
   8a9e2:	2a1b      	cmp	r2, #27
   8a9e4:	f8ca 3008 	str.w	r3, [sl, #8]
   8a9e8:	6863      	ldr	r3, [r4, #4]
   8a9ea:	f8ca 300c 	str.w	r3, [sl, #12]
   8a9ee:	d842      	bhi.n	8aa76 <_realloc_r+0x356>
   8a9f0:	3408      	adds	r4, #8
   8a9f2:	f10a 0310 	add.w	r3, sl, #16
   8a9f6:	6822      	ldr	r2, [r4, #0]
   8a9f8:	4667      	mov	r7, ip
   8a9fa:	601a      	str	r2, [r3, #0]
   8a9fc:	6862      	ldr	r2, [r4, #4]
   8a9fe:	46d1      	mov	r9, sl
   8aa00:	605a      	str	r2, [r3, #4]
   8aa02:	68a2      	ldr	r2, [r4, #8]
   8aa04:	4634      	mov	r4, r6
   8aa06:	609a      	str	r2, [r3, #8]
   8aa08:	e707      	b.n	8a81a <_realloc_r+0xfa>
   8aa0a:	68a3      	ldr	r3, [r4, #8]
   8aa0c:	2a24      	cmp	r2, #36	; 0x24
   8aa0e:	6083      	str	r3, [r0, #8]
   8aa10:	68e3      	ldr	r3, [r4, #12]
   8aa12:	60c3      	str	r3, [r0, #12]
   8aa14:	d026      	beq.n	8aa64 <_realloc_r+0x344>
   8aa16:	f104 0210 	add.w	r2, r4, #16
   8aa1a:	f100 0310 	add.w	r3, r0, #16
   8aa1e:	e6db      	b.n	8a7d8 <_realloc_r+0xb8>
   8aa20:	4632      	mov	r2, r6
   8aa22:	e7bf      	b.n	8a9a4 <_realloc_r+0x284>
   8aa24:	4621      	mov	r1, r4
   8aa26:	4630      	mov	r0, r6
   8aa28:	461f      	mov	r7, r3
   8aa2a:	46d1      	mov	r9, sl
   8aa2c:	f7ff fa4c 	bl	89ec8 <memmove>
   8aa30:	4634      	mov	r4, r6
   8aa32:	e6f2      	b.n	8a81a <_realloc_r+0xfa>
   8aa34:	4633      	mov	r3, r6
   8aa36:	e7de      	b.n	8a9f6 <_realloc_r+0x2d6>
   8aa38:	4621      	mov	r1, r4
   8aa3a:	4630      	mov	r0, r6
   8aa3c:	4667      	mov	r7, ip
   8aa3e:	46d1      	mov	r9, sl
   8aa40:	f7ff fa42 	bl	89ec8 <memmove>
   8aa44:	4634      	mov	r4, r6
   8aa46:	e6e8      	b.n	8a81a <_realloc_r+0xfa>
   8aa48:	20000960 	.word	0x20000960
   8aa4c:	68a1      	ldr	r1, [r4, #8]
   8aa4e:	2a24      	cmp	r2, #36	; 0x24
   8aa50:	f8ca 1010 	str.w	r1, [sl, #16]
   8aa54:	68e1      	ldr	r1, [r4, #12]
   8aa56:	f8ca 1014 	str.w	r1, [sl, #20]
   8aa5a:	d020      	beq.n	8aa9e <_realloc_r+0x37e>
   8aa5c:	3410      	adds	r4, #16
   8aa5e:	f10a 0218 	add.w	r2, sl, #24
   8aa62:	e79f      	b.n	8a9a4 <_realloc_r+0x284>
   8aa64:	6923      	ldr	r3, [r4, #16]
   8aa66:	f104 0218 	add.w	r2, r4, #24
   8aa6a:	6103      	str	r3, [r0, #16]
   8aa6c:	6963      	ldr	r3, [r4, #20]
   8aa6e:	6143      	str	r3, [r0, #20]
   8aa70:	f100 0318 	add.w	r3, r0, #24
   8aa74:	e6b0      	b.n	8a7d8 <_realloc_r+0xb8>
   8aa76:	68a3      	ldr	r3, [r4, #8]
   8aa78:	2a24      	cmp	r2, #36	; 0x24
   8aa7a:	f8ca 3010 	str.w	r3, [sl, #16]
   8aa7e:	68e3      	ldr	r3, [r4, #12]
   8aa80:	f8ca 3014 	str.w	r3, [sl, #20]
   8aa84:	d022      	beq.n	8aacc <_realloc_r+0x3ac>
   8aa86:	3410      	adds	r4, #16
   8aa88:	f10a 0318 	add.w	r3, sl, #24
   8aa8c:	e7b3      	b.n	8a9f6 <_realloc_r+0x2d6>
   8aa8e:	4632      	mov	r2, r6
   8aa90:	e733      	b.n	8a8fa <_realloc_r+0x1da>
   8aa92:	4621      	mov	r1, r4
   8aa94:	4630      	mov	r0, r6
   8aa96:	f7ff fa17 	bl	89ec8 <memmove>
   8aa9a:	4b17      	ldr	r3, [pc, #92]	; (8aaf8 <_realloc_r+0x3d8>)
   8aa9c:	e733      	b.n	8a906 <_realloc_r+0x1e6>
   8aa9e:	6922      	ldr	r2, [r4, #16]
   8aaa0:	3418      	adds	r4, #24
   8aaa2:	f8ca 2018 	str.w	r2, [sl, #24]
   8aaa6:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8aaaa:	f8ca 201c 	str.w	r2, [sl, #28]
   8aaae:	f10a 0220 	add.w	r2, sl, #32
   8aab2:	e777      	b.n	8a9a4 <_realloc_r+0x284>
   8aab4:	68a1      	ldr	r1, [r4, #8]
   8aab6:	2a24      	cmp	r2, #36	; 0x24
   8aab8:	f8ca 1010 	str.w	r1, [sl, #16]
   8aabc:	68e1      	ldr	r1, [r4, #12]
   8aabe:	f8ca 1014 	str.w	r1, [sl, #20]
   8aac2:	d00e      	beq.n	8aae2 <_realloc_r+0x3c2>
   8aac4:	3410      	adds	r4, #16
   8aac6:	f10a 0218 	add.w	r2, sl, #24
   8aaca:	e716      	b.n	8a8fa <_realloc_r+0x1da>
   8aacc:	6923      	ldr	r3, [r4, #16]
   8aace:	3418      	adds	r4, #24
   8aad0:	f8ca 3018 	str.w	r3, [sl, #24]
   8aad4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8aad8:	f8ca 301c 	str.w	r3, [sl, #28]
   8aadc:	f10a 0320 	add.w	r3, sl, #32
   8aae0:	e789      	b.n	8a9f6 <_realloc_r+0x2d6>
   8aae2:	6922      	ldr	r2, [r4, #16]
   8aae4:	3418      	adds	r4, #24
   8aae6:	f8ca 2018 	str.w	r2, [sl, #24]
   8aaea:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8aaee:	f8ca 201c 	str.w	r2, [sl, #28]
   8aaf2:	f10a 0220 	add.w	r2, sl, #32
   8aaf6:	e700      	b.n	8a8fa <_realloc_r+0x1da>
   8aaf8:	20000960 	.word	0x20000960

0008aafc <frexp>:
   8aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aafe:	2700      	movs	r7, #0
   8ab00:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8ab60 <frexp+0x64>
   8ab04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ab08:	4563      	cmp	r3, ip
   8ab0a:	4604      	mov	r4, r0
   8ab0c:	460d      	mov	r5, r1
   8ab0e:	6017      	str	r7, [r2, #0]
   8ab10:	dc23      	bgt.n	8ab5a <frexp+0x5e>
   8ab12:	4684      	mov	ip, r0
   8ab14:	ea53 0c0c 	orrs.w	ip, r3, ip
   8ab18:	d01f      	beq.n	8ab5a <frexp+0x5e>
   8ab1a:	f8df c048 	ldr.w	ip, [pc, #72]	; 8ab64 <frexp+0x68>
   8ab1e:	4616      	mov	r6, r2
   8ab20:	ea01 0c0c 	and.w	ip, r1, ip
   8ab24:	460a      	mov	r2, r1
   8ab26:	f1bc 0f00 	cmp.w	ip, #0
   8ab2a:	d109      	bne.n	8ab40 <frexp+0x44>
   8ab2c:	2200      	movs	r2, #0
   8ab2e:	4b0e      	ldr	r3, [pc, #56]	; (8ab68 <frexp+0x6c>)
   8ab30:	f000 fd1a 	bl	8b568 <__aeabi_dmul>
   8ab34:	f06f 0735 	mvn.w	r7, #53	; 0x35
   8ab38:	4604      	mov	r4, r0
   8ab3a:	460a      	mov	r2, r1
   8ab3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ab40:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   8ab44:	151b      	asrs	r3, r3, #20
   8ab46:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   8ab4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8ab4e:	443b      	add	r3, r7
   8ab50:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   8ab54:	6033      	str	r3, [r6, #0]
   8ab56:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8ab5a:	4620      	mov	r0, r4
   8ab5c:	4629      	mov	r1, r5
   8ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ab60:	7fefffff 	.word	0x7fefffff
   8ab64:	7ff00000 	.word	0x7ff00000
   8ab68:	43500000 	.word	0x43500000

0008ab6c <_sbrk_r>:
   8ab6c:	2200      	movs	r2, #0
   8ab6e:	b538      	push	{r3, r4, r5, lr}
   8ab70:	4d06      	ldr	r5, [pc, #24]	; (8ab8c <_sbrk_r+0x20>)
   8ab72:	4604      	mov	r4, r0
   8ab74:	4608      	mov	r0, r1
   8ab76:	602a      	str	r2, [r5, #0]
   8ab78:	f7f9 ffda 	bl	84b30 <_sbrk>
   8ab7c:	1c43      	adds	r3, r0, #1
   8ab7e:	d000      	beq.n	8ab82 <_sbrk_r+0x16>
   8ab80:	bd38      	pop	{r3, r4, r5, pc}
   8ab82:	682b      	ldr	r3, [r5, #0]
   8ab84:	2b00      	cmp	r3, #0
   8ab86:	d0fb      	beq.n	8ab80 <_sbrk_r+0x14>
   8ab88:	6023      	str	r3, [r4, #0]
   8ab8a:	bd38      	pop	{r3, r4, r5, pc}
   8ab8c:	20001978 	.word	0x20001978

0008ab90 <__sread>:
   8ab90:	b510      	push	{r4, lr}
   8ab92:	460c      	mov	r4, r1
   8ab94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ab98:	f000 fac8 	bl	8b12c <_read_r>
   8ab9c:	2800      	cmp	r0, #0
   8ab9e:	db03      	blt.n	8aba8 <__sread+0x18>
   8aba0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8aba2:	4403      	add	r3, r0
   8aba4:	6523      	str	r3, [r4, #80]	; 0x50
   8aba6:	bd10      	pop	{r4, pc}
   8aba8:	89a3      	ldrh	r3, [r4, #12]
   8abaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8abae:	81a3      	strh	r3, [r4, #12]
   8abb0:	bd10      	pop	{r4, pc}
   8abb2:	bf00      	nop

0008abb4 <__swrite>:
   8abb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8abb8:	460c      	mov	r4, r1
   8abba:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8abbe:	461f      	mov	r7, r3
   8abc0:	05cb      	lsls	r3, r1, #23
   8abc2:	4605      	mov	r5, r0
   8abc4:	4616      	mov	r6, r2
   8abc6:	d40b      	bmi.n	8abe0 <__swrite+0x2c>
   8abc8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8abcc:	81a1      	strh	r1, [r4, #12]
   8abce:	463b      	mov	r3, r7
   8abd0:	4632      	mov	r2, r6
   8abd2:	4628      	mov	r0, r5
   8abd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8abd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8abdc:	f000 b920 	b.w	8ae20 <_write_r>
   8abe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8abe4:	2302      	movs	r3, #2
   8abe6:	2200      	movs	r2, #0
   8abe8:	f000 fa8a 	bl	8b100 <_lseek_r>
   8abec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8abf0:	e7ea      	b.n	8abc8 <__swrite+0x14>
   8abf2:	bf00      	nop

0008abf4 <__sseek>:
   8abf4:	b510      	push	{r4, lr}
   8abf6:	460c      	mov	r4, r1
   8abf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8abfc:	f000 fa80 	bl	8b100 <_lseek_r>
   8ac00:	89a3      	ldrh	r3, [r4, #12]
   8ac02:	1c42      	adds	r2, r0, #1
   8ac04:	bf0e      	itee	eq
   8ac06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8ac0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8ac0e:	6520      	strne	r0, [r4, #80]	; 0x50
   8ac10:	81a3      	strh	r3, [r4, #12]
   8ac12:	bd10      	pop	{r4, pc}

0008ac14 <__sclose>:
   8ac14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ac18:	f000 b9ba 	b.w	8af90 <_close_r>

0008ac1c <__ssprint_r>:
   8ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ac20:	6893      	ldr	r3, [r2, #8]
   8ac22:	4691      	mov	r9, r2
   8ac24:	b083      	sub	sp, #12
   8ac26:	2b00      	cmp	r3, #0
   8ac28:	d06e      	beq.n	8ad08 <__ssprint_r+0xec>
   8ac2a:	6817      	ldr	r7, [r2, #0]
   8ac2c:	4680      	mov	r8, r0
   8ac2e:	460c      	mov	r4, r1
   8ac30:	6808      	ldr	r0, [r1, #0]
   8ac32:	688d      	ldr	r5, [r1, #8]
   8ac34:	3708      	adds	r7, #8
   8ac36:	e044      	b.n	8acc2 <__ssprint_r+0xa6>
   8ac38:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   8ac3c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   8ac40:	d02e      	beq.n	8aca0 <__ssprint_r+0x84>
   8ac42:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   8ac46:	1a45      	subs	r5, r0, r1
   8ac48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8ac4c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   8ac50:	19aa      	adds	r2, r5, r6
   8ac52:	ea4f 0a63 	mov.w	sl, r3, asr #1
   8ac56:	1c53      	adds	r3, r2, #1
   8ac58:	4553      	cmp	r3, sl
   8ac5a:	4652      	mov	r2, sl
   8ac5c:	bf84      	itt	hi
   8ac5e:	469a      	movhi	sl, r3
   8ac60:	4652      	movhi	r2, sl
   8ac62:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   8ac66:	d036      	beq.n	8acd6 <__ssprint_r+0xba>
   8ac68:	4611      	mov	r1, r2
   8ac6a:	4640      	mov	r0, r8
   8ac6c:	f7fe fe22 	bl	898b4 <_malloc_r>
   8ac70:	2800      	cmp	r0, #0
   8ac72:	d03a      	beq.n	8acea <__ssprint_r+0xce>
   8ac74:	462a      	mov	r2, r5
   8ac76:	6921      	ldr	r1, [r4, #16]
   8ac78:	9001      	str	r0, [sp, #4]
   8ac7a:	f7fa f945 	bl	84f08 <memcpy>
   8ac7e:	89a2      	ldrh	r2, [r4, #12]
   8ac80:	9b01      	ldr	r3, [sp, #4]
   8ac82:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8ac86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8ac8a:	81a2      	strh	r2, [r4, #12]
   8ac8c:	1958      	adds	r0, r3, r5
   8ac8e:	ebaa 0505 	sub.w	r5, sl, r5
   8ac92:	60a5      	str	r5, [r4, #8]
   8ac94:	f8c4 a014 	str.w	sl, [r4, #20]
   8ac98:	4635      	mov	r5, r6
   8ac9a:	46b2      	mov	sl, r6
   8ac9c:	6123      	str	r3, [r4, #16]
   8ac9e:	6020      	str	r0, [r4, #0]
   8aca0:	4659      	mov	r1, fp
   8aca2:	4652      	mov	r2, sl
   8aca4:	f7ff f910 	bl	89ec8 <memmove>
   8aca8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8acac:	68a1      	ldr	r1, [r4, #8]
   8acae:	6820      	ldr	r0, [r4, #0]
   8acb0:	1b4d      	subs	r5, r1, r5
   8acb2:	4450      	add	r0, sl
   8acb4:	1b9e      	subs	r6, r3, r6
   8acb6:	60a5      	str	r5, [r4, #8]
   8acb8:	6020      	str	r0, [r4, #0]
   8acba:	f8c9 6008 	str.w	r6, [r9, #8]
   8acbe:	b31e      	cbz	r6, 8ad08 <__ssprint_r+0xec>
   8acc0:	3708      	adds	r7, #8
   8acc2:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8acc6:	2e00      	cmp	r6, #0
   8acc8:	d0fa      	beq.n	8acc0 <__ssprint_r+0xa4>
   8acca:	42b5      	cmp	r5, r6
   8accc:	46aa      	mov	sl, r5
   8acce:	d9b3      	bls.n	8ac38 <__ssprint_r+0x1c>
   8acd0:	4635      	mov	r5, r6
   8acd2:	46b2      	mov	sl, r6
   8acd4:	e7e4      	b.n	8aca0 <__ssprint_r+0x84>
   8acd6:	4640      	mov	r0, r8
   8acd8:	f7ff fd22 	bl	8a720 <_realloc_r>
   8acdc:	4603      	mov	r3, r0
   8acde:	2800      	cmp	r0, #0
   8ace0:	d1d4      	bne.n	8ac8c <__ssprint_r+0x70>
   8ace2:	4640      	mov	r0, r8
   8ace4:	6921      	ldr	r1, [r4, #16]
   8ace6:	f7fe fa8f 	bl	89208 <_free_r>
   8acea:	230c      	movs	r3, #12
   8acec:	2200      	movs	r2, #0
   8acee:	f04f 30ff 	mov.w	r0, #4294967295
   8acf2:	f8c8 3000 	str.w	r3, [r8]
   8acf6:	89a3      	ldrh	r3, [r4, #12]
   8acf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8acfc:	81a3      	strh	r3, [r4, #12]
   8acfe:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8ad02:	b003      	add	sp, #12
   8ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad08:	2300      	movs	r3, #0
   8ad0a:	4618      	mov	r0, r3
   8ad0c:	f8c9 3004 	str.w	r3, [r9, #4]
   8ad10:	b003      	add	sp, #12
   8ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad16:	bf00      	nop

0008ad18 <__swbuf_r>:
   8ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ad1a:	4606      	mov	r6, r0
   8ad1c:	460d      	mov	r5, r1
   8ad1e:	4614      	mov	r4, r2
   8ad20:	b110      	cbz	r0, 8ad28 <__swbuf_r+0x10>
   8ad22:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ad24:	2b00      	cmp	r3, #0
   8ad26:	d043      	beq.n	8adb0 <__swbuf_r+0x98>
   8ad28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8ad2c:	69a3      	ldr	r3, [r4, #24]
   8ad2e:	0710      	lsls	r0, r2, #28
   8ad30:	60a3      	str	r3, [r4, #8]
   8ad32:	b291      	uxth	r1, r2
   8ad34:	d51b      	bpl.n	8ad6e <__swbuf_r+0x56>
   8ad36:	6923      	ldr	r3, [r4, #16]
   8ad38:	b1cb      	cbz	r3, 8ad6e <__swbuf_r+0x56>
   8ad3a:	b2ed      	uxtb	r5, r5
   8ad3c:	0489      	lsls	r1, r1, #18
   8ad3e:	462f      	mov	r7, r5
   8ad40:	d522      	bpl.n	8ad88 <__swbuf_r+0x70>
   8ad42:	6822      	ldr	r2, [r4, #0]
   8ad44:	6961      	ldr	r1, [r4, #20]
   8ad46:	1ad3      	subs	r3, r2, r3
   8ad48:	4299      	cmp	r1, r3
   8ad4a:	dd29      	ble.n	8ada0 <__swbuf_r+0x88>
   8ad4c:	3301      	adds	r3, #1
   8ad4e:	68a1      	ldr	r1, [r4, #8]
   8ad50:	3901      	subs	r1, #1
   8ad52:	60a1      	str	r1, [r4, #8]
   8ad54:	1c51      	adds	r1, r2, #1
   8ad56:	6021      	str	r1, [r4, #0]
   8ad58:	7015      	strb	r5, [r2, #0]
   8ad5a:	6962      	ldr	r2, [r4, #20]
   8ad5c:	429a      	cmp	r2, r3
   8ad5e:	d02a      	beq.n	8adb6 <__swbuf_r+0x9e>
   8ad60:	89a3      	ldrh	r3, [r4, #12]
   8ad62:	07db      	lsls	r3, r3, #31
   8ad64:	d501      	bpl.n	8ad6a <__swbuf_r+0x52>
   8ad66:	2d0a      	cmp	r5, #10
   8ad68:	d025      	beq.n	8adb6 <__swbuf_r+0x9e>
   8ad6a:	4638      	mov	r0, r7
   8ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ad6e:	4621      	mov	r1, r4
   8ad70:	4630      	mov	r0, r6
   8ad72:	f7fc ff91 	bl	87c98 <__swsetup_r>
   8ad76:	bb20      	cbnz	r0, 8adc2 <__swbuf_r+0xaa>
   8ad78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8ad7c:	b2ed      	uxtb	r5, r5
   8ad7e:	b291      	uxth	r1, r2
   8ad80:	0489      	lsls	r1, r1, #18
   8ad82:	462f      	mov	r7, r5
   8ad84:	6923      	ldr	r3, [r4, #16]
   8ad86:	d4dc      	bmi.n	8ad42 <__swbuf_r+0x2a>
   8ad88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8ad8c:	81a2      	strh	r2, [r4, #12]
   8ad8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8ad90:	6961      	ldr	r1, [r4, #20]
   8ad92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8ad96:	6662      	str	r2, [r4, #100]	; 0x64
   8ad98:	6822      	ldr	r2, [r4, #0]
   8ad9a:	1ad3      	subs	r3, r2, r3
   8ad9c:	4299      	cmp	r1, r3
   8ad9e:	dcd5      	bgt.n	8ad4c <__swbuf_r+0x34>
   8ada0:	4621      	mov	r1, r4
   8ada2:	4630      	mov	r0, r6
   8ada4:	f7fe f880 	bl	88ea8 <_fflush_r>
   8ada8:	b958      	cbnz	r0, 8adc2 <__swbuf_r+0xaa>
   8adaa:	2301      	movs	r3, #1
   8adac:	6822      	ldr	r2, [r4, #0]
   8adae:	e7ce      	b.n	8ad4e <__swbuf_r+0x36>
   8adb0:	f7fe f8ae 	bl	88f10 <__sinit>
   8adb4:	e7b8      	b.n	8ad28 <__swbuf_r+0x10>
   8adb6:	4621      	mov	r1, r4
   8adb8:	4630      	mov	r0, r6
   8adba:	f7fe f875 	bl	88ea8 <_fflush_r>
   8adbe:	2800      	cmp	r0, #0
   8adc0:	d0d3      	beq.n	8ad6a <__swbuf_r+0x52>
   8adc2:	f04f 37ff 	mov.w	r7, #4294967295
   8adc6:	e7d0      	b.n	8ad6a <__swbuf_r+0x52>

0008adc8 <_wcrtomb_r>:
   8adc8:	b570      	push	{r4, r5, r6, lr}
   8adca:	4605      	mov	r5, r0
   8adcc:	461c      	mov	r4, r3
   8adce:	b084      	sub	sp, #16
   8add0:	b139      	cbz	r1, 8ade2 <_wcrtomb_r+0x1a>
   8add2:	4e0b      	ldr	r6, [pc, #44]	; (8ae00 <_wcrtomb_r+0x38>)
   8add4:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8add8:	47b0      	blx	r6
   8adda:	1c43      	adds	r3, r0, #1
   8addc:	d009      	beq.n	8adf2 <_wcrtomb_r+0x2a>
   8adde:	b004      	add	sp, #16
   8ade0:	bd70      	pop	{r4, r5, r6, pc}
   8ade2:	460a      	mov	r2, r1
   8ade4:	4906      	ldr	r1, [pc, #24]	; (8ae00 <_wcrtomb_r+0x38>)
   8ade6:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8adea:	a901      	add	r1, sp, #4
   8adec:	47b0      	blx	r6
   8adee:	1c43      	adds	r3, r0, #1
   8adf0:	d1f5      	bne.n	8adde <_wcrtomb_r+0x16>
   8adf2:	2200      	movs	r2, #0
   8adf4:	238a      	movs	r3, #138	; 0x8a
   8adf6:	6022      	str	r2, [r4, #0]
   8adf8:	602b      	str	r3, [r5, #0]
   8adfa:	b004      	add	sp, #16
   8adfc:	bd70      	pop	{r4, r5, r6, pc}
   8adfe:	bf00      	nop
   8ae00:	200007f4 	.word	0x200007f4

0008ae04 <__ascii_wctomb>:
   8ae04:	4603      	mov	r3, r0
   8ae06:	b149      	cbz	r1, 8ae1c <__ascii_wctomb+0x18>
   8ae08:	2aff      	cmp	r2, #255	; 0xff
   8ae0a:	d802      	bhi.n	8ae12 <__ascii_wctomb+0xe>
   8ae0c:	2001      	movs	r0, #1
   8ae0e:	700a      	strb	r2, [r1, #0]
   8ae10:	4770      	bx	lr
   8ae12:	228a      	movs	r2, #138	; 0x8a
   8ae14:	f04f 30ff 	mov.w	r0, #4294967295
   8ae18:	601a      	str	r2, [r3, #0]
   8ae1a:	4770      	bx	lr
   8ae1c:	4608      	mov	r0, r1
   8ae1e:	4770      	bx	lr

0008ae20 <_write_r>:
   8ae20:	b538      	push	{r3, r4, r5, lr}
   8ae22:	460c      	mov	r4, r1
   8ae24:	4611      	mov	r1, r2
   8ae26:	2200      	movs	r2, #0
   8ae28:	4684      	mov	ip, r0
   8ae2a:	4d07      	ldr	r5, [pc, #28]	; (8ae48 <_write_r+0x28>)
   8ae2c:	4620      	mov	r0, r4
   8ae2e:	602a      	str	r2, [r5, #0]
   8ae30:	461a      	mov	r2, r3
   8ae32:	4664      	mov	r4, ip
   8ae34:	f7f9 f9ae 	bl	84194 <_write>
   8ae38:	1c43      	adds	r3, r0, #1
   8ae3a:	d000      	beq.n	8ae3e <_write_r+0x1e>
   8ae3c:	bd38      	pop	{r3, r4, r5, pc}
   8ae3e:	682b      	ldr	r3, [r5, #0]
   8ae40:	2b00      	cmp	r3, #0
   8ae42:	d0fb      	beq.n	8ae3c <_write_r+0x1c>
   8ae44:	6023      	str	r3, [r4, #0]
   8ae46:	bd38      	pop	{r3, r4, r5, pc}
   8ae48:	20001978 	.word	0x20001978

0008ae4c <__register_exitproc>:
   8ae4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ae50:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8aed0 <__register_exitproc+0x84>
   8ae54:	4606      	mov	r6, r0
   8ae56:	f8da 0000 	ldr.w	r0, [sl]
   8ae5a:	4698      	mov	r8, r3
   8ae5c:	460f      	mov	r7, r1
   8ae5e:	4691      	mov	r9, r2
   8ae60:	f7fe fc7c 	bl	8975c <__retarget_lock_acquire_recursive>
   8ae64:	4b1b      	ldr	r3, [pc, #108]	; (8aed4 <__register_exitproc+0x88>)
   8ae66:	681b      	ldr	r3, [r3, #0]
   8ae68:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8ae6c:	b324      	cbz	r4, 8aeb8 <__register_exitproc+0x6c>
   8ae6e:	6865      	ldr	r5, [r4, #4]
   8ae70:	2d1f      	cmp	r5, #31
   8ae72:	dc26      	bgt.n	8aec2 <__register_exitproc+0x76>
   8ae74:	b95e      	cbnz	r6, 8ae8e <__register_exitproc+0x42>
   8ae76:	1c6b      	adds	r3, r5, #1
   8ae78:	3502      	adds	r5, #2
   8ae7a:	f8da 0000 	ldr.w	r0, [sl]
   8ae7e:	6063      	str	r3, [r4, #4]
   8ae80:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8ae84:	f7fe fc6c 	bl	89760 <__retarget_lock_release_recursive>
   8ae88:	2000      	movs	r0, #0
   8ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8ae8e:	2301      	movs	r3, #1
   8ae90:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8ae94:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8ae98:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8ae9c:	40ab      	lsls	r3, r5
   8ae9e:	431a      	orrs	r2, r3
   8aea0:	2e02      	cmp	r6, #2
   8aea2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8aea6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8aeaa:	d1e4      	bne.n	8ae76 <__register_exitproc+0x2a>
   8aeac:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8aeb0:	4313      	orrs	r3, r2
   8aeb2:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8aeb6:	e7de      	b.n	8ae76 <__register_exitproc+0x2a>
   8aeb8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8aebc:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8aec0:	e7d5      	b.n	8ae6e <__register_exitproc+0x22>
   8aec2:	f8da 0000 	ldr.w	r0, [sl]
   8aec6:	f7fe fc4b 	bl	89760 <__retarget_lock_release_recursive>
   8aeca:	f04f 30ff 	mov.w	r0, #4294967295
   8aece:	e7dc      	b.n	8ae8a <__register_exitproc+0x3e>
   8aed0:	200007f0 	.word	0x200007f0
   8aed4:	0008bed8 	.word	0x0008bed8

0008aed8 <__assert_func>:
   8aed8:	4614      	mov	r4, r2
   8aeda:	b500      	push	{lr}
   8aedc:	461a      	mov	r2, r3
   8aede:	4b0a      	ldr	r3, [pc, #40]	; (8af08 <__assert_func+0x30>)
   8aee0:	460d      	mov	r5, r1
   8aee2:	681b      	ldr	r3, [r3, #0]
   8aee4:	b085      	sub	sp, #20
   8aee6:	68de      	ldr	r6, [r3, #12]
   8aee8:	4603      	mov	r3, r0
   8aeea:	b14c      	cbz	r4, 8af00 <__assert_func+0x28>
   8aeec:	4907      	ldr	r1, [pc, #28]	; (8af0c <__assert_func+0x34>)
   8aeee:	9101      	str	r1, [sp, #4]
   8aef0:	4630      	mov	r0, r6
   8aef2:	4907      	ldr	r1, [pc, #28]	; (8af10 <__assert_func+0x38>)
   8aef4:	9402      	str	r4, [sp, #8]
   8aef6:	9500      	str	r5, [sp, #0]
   8aef8:	f000 f8c8 	bl	8b08c <fiprintf>
   8aefc:	f000 f92c 	bl	8b158 <abort>
   8af00:	4904      	ldr	r1, [pc, #16]	; (8af14 <__assert_func+0x3c>)
   8af02:	460c      	mov	r4, r1
   8af04:	e7f3      	b.n	8aeee <__assert_func+0x16>
   8af06:	bf00      	nop
   8af08:	200003c0 	.word	0x200003c0
   8af0c:	0008c194 	.word	0x0008c194
   8af10:	0008c1a4 	.word	0x0008c1a4
   8af14:	0008bed4 	.word	0x0008bed4

0008af18 <_calloc_r>:
   8af18:	b538      	push	{r3, r4, r5, lr}
   8af1a:	fba1 1402 	umull	r1, r4, r1, r2
   8af1e:	bb84      	cbnz	r4, 8af82 <_calloc_r+0x6a>
   8af20:	f7fe fcc8 	bl	898b4 <_malloc_r>
   8af24:	4605      	mov	r5, r0
   8af26:	b1d8      	cbz	r0, 8af60 <_calloc_r+0x48>
   8af28:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8af2c:	f022 0203 	bic.w	r2, r2, #3
   8af30:	3a04      	subs	r2, #4
   8af32:	2a24      	cmp	r2, #36	; 0x24
   8af34:	d816      	bhi.n	8af64 <_calloc_r+0x4c>
   8af36:	2a13      	cmp	r2, #19
   8af38:	d919      	bls.n	8af6e <_calloc_r+0x56>
   8af3a:	2a1b      	cmp	r2, #27
   8af3c:	e9c0 4400 	strd	r4, r4, [r0]
   8af40:	d91c      	bls.n	8af7c <_calloc_r+0x64>
   8af42:	2300      	movs	r3, #0
   8af44:	2a24      	cmp	r2, #36	; 0x24
   8af46:	bf14      	ite	ne
   8af48:	f100 0210 	addne.w	r2, r0, #16
   8af4c:	f100 0218 	addeq.w	r2, r0, #24
   8af50:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8af54:	bf04      	itt	eq
   8af56:	6104      	streq	r4, [r0, #16]
   8af58:	6144      	streq	r4, [r0, #20]
   8af5a:	e9c2 3300 	strd	r3, r3, [r2]
   8af5e:	6093      	str	r3, [r2, #8]
   8af60:	4628      	mov	r0, r5
   8af62:	bd38      	pop	{r3, r4, r5, pc}
   8af64:	4621      	mov	r1, r4
   8af66:	f7fa f845 	bl	84ff4 <memset>
   8af6a:	4628      	mov	r0, r5
   8af6c:	bd38      	pop	{r3, r4, r5, pc}
   8af6e:	4602      	mov	r2, r0
   8af70:	2300      	movs	r3, #0
   8af72:	4628      	mov	r0, r5
   8af74:	e9c2 3300 	strd	r3, r3, [r2]
   8af78:	6093      	str	r3, [r2, #8]
   8af7a:	bd38      	pop	{r3, r4, r5, pc}
   8af7c:	f100 0208 	add.w	r2, r0, #8
   8af80:	e7f6      	b.n	8af70 <_calloc_r+0x58>
   8af82:	f000 f817 	bl	8afb4 <__errno>
   8af86:	230c      	movs	r3, #12
   8af88:	2500      	movs	r5, #0
   8af8a:	6003      	str	r3, [r0, #0]
   8af8c:	e7e8      	b.n	8af60 <_calloc_r+0x48>
   8af8e:	bf00      	nop

0008af90 <_close_r>:
   8af90:	2200      	movs	r2, #0
   8af92:	b538      	push	{r3, r4, r5, lr}
   8af94:	4d06      	ldr	r5, [pc, #24]	; (8afb0 <_close_r+0x20>)
   8af96:	4604      	mov	r4, r0
   8af98:	4608      	mov	r0, r1
   8af9a:	602a      	str	r2, [r5, #0]
   8af9c:	f7f9 fde8 	bl	84b70 <_close>
   8afa0:	1c43      	adds	r3, r0, #1
   8afa2:	d000      	beq.n	8afa6 <_close_r+0x16>
   8afa4:	bd38      	pop	{r3, r4, r5, pc}
   8afa6:	682b      	ldr	r3, [r5, #0]
   8afa8:	2b00      	cmp	r3, #0
   8afaa:	d0fb      	beq.n	8afa4 <_close_r+0x14>
   8afac:	6023      	str	r3, [r4, #0]
   8afae:	bd38      	pop	{r3, r4, r5, pc}
   8afb0:	20001978 	.word	0x20001978

0008afb4 <__errno>:
   8afb4:	4b01      	ldr	r3, [pc, #4]	; (8afbc <__errno+0x8>)
   8afb6:	6818      	ldr	r0, [r3, #0]
   8afb8:	4770      	bx	lr
   8afba:	bf00      	nop
   8afbc:	200003c0 	.word	0x200003c0

0008afc0 <_fclose_r>:
   8afc0:	b570      	push	{r4, r5, r6, lr}
   8afc2:	2900      	cmp	r1, #0
   8afc4:	d04b      	beq.n	8b05e <_fclose_r+0x9e>
   8afc6:	4606      	mov	r6, r0
   8afc8:	460c      	mov	r4, r1
   8afca:	b110      	cbz	r0, 8afd2 <_fclose_r+0x12>
   8afcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8afce:	2b00      	cmp	r3, #0
   8afd0:	d048      	beq.n	8b064 <_fclose_r+0xa4>
   8afd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8afd4:	07d8      	lsls	r0, r3, #31
   8afd6:	d534      	bpl.n	8b042 <_fclose_r+0x82>
   8afd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8afdc:	2b00      	cmp	r3, #0
   8afde:	d03e      	beq.n	8b05e <_fclose_r+0x9e>
   8afe0:	4621      	mov	r1, r4
   8afe2:	4630      	mov	r0, r6
   8afe4:	f7fd fece 	bl	88d84 <__sflush_r>
   8afe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8afea:	4605      	mov	r5, r0
   8afec:	b133      	cbz	r3, 8affc <_fclose_r+0x3c>
   8afee:	4630      	mov	r0, r6
   8aff0:	69e1      	ldr	r1, [r4, #28]
   8aff2:	4798      	blx	r3
   8aff4:	2800      	cmp	r0, #0
   8aff6:	bfb8      	it	lt
   8aff8:	f04f 35ff 	movlt.w	r5, #4294967295
   8affc:	89a3      	ldrh	r3, [r4, #12]
   8affe:	061a      	lsls	r2, r3, #24
   8b000:	d43b      	bmi.n	8b07a <_fclose_r+0xba>
   8b002:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b004:	b141      	cbz	r1, 8b018 <_fclose_r+0x58>
   8b006:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8b00a:	4299      	cmp	r1, r3
   8b00c:	d002      	beq.n	8b014 <_fclose_r+0x54>
   8b00e:	4630      	mov	r0, r6
   8b010:	f7fe f8fa 	bl	89208 <_free_r>
   8b014:	2300      	movs	r3, #0
   8b016:	6323      	str	r3, [r4, #48]	; 0x30
   8b018:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8b01a:	b121      	cbz	r1, 8b026 <_fclose_r+0x66>
   8b01c:	4630      	mov	r0, r6
   8b01e:	f7fe f8f3 	bl	89208 <_free_r>
   8b022:	2300      	movs	r3, #0
   8b024:	6463      	str	r3, [r4, #68]	; 0x44
   8b026:	f7fd fff9 	bl	8901c <__sfp_lock_acquire>
   8b02a:	2200      	movs	r2, #0
   8b02c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b02e:	81a2      	strh	r2, [r4, #12]
   8b030:	07db      	lsls	r3, r3, #31
   8b032:	d527      	bpl.n	8b084 <_fclose_r+0xc4>
   8b034:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b036:	f7fe fb8f 	bl	89758 <__retarget_lock_close_recursive>
   8b03a:	f7fd fff5 	bl	89028 <__sfp_lock_release>
   8b03e:	4628      	mov	r0, r5
   8b040:	bd70      	pop	{r4, r5, r6, pc}
   8b042:	89a3      	ldrh	r3, [r4, #12]
   8b044:	0599      	lsls	r1, r3, #22
   8b046:	d4cb      	bmi.n	8afe0 <_fclose_r+0x20>
   8b048:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b04a:	f7fe fb87 	bl	8975c <__retarget_lock_acquire_recursive>
   8b04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b052:	2b00      	cmp	r3, #0
   8b054:	d1c4      	bne.n	8afe0 <_fclose_r+0x20>
   8b056:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8b058:	f015 0501 	ands.w	r5, r5, #1
   8b05c:	d008      	beq.n	8b070 <_fclose_r+0xb0>
   8b05e:	2500      	movs	r5, #0
   8b060:	4628      	mov	r0, r5
   8b062:	bd70      	pop	{r4, r5, r6, pc}
   8b064:	f7fd ff54 	bl	88f10 <__sinit>
   8b068:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b06a:	07d8      	lsls	r0, r3, #31
   8b06c:	d4b4      	bmi.n	8afd8 <_fclose_r+0x18>
   8b06e:	e7e8      	b.n	8b042 <_fclose_r+0x82>
   8b070:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b072:	f7fe fb75 	bl	89760 <__retarget_lock_release_recursive>
   8b076:	4628      	mov	r0, r5
   8b078:	bd70      	pop	{r4, r5, r6, pc}
   8b07a:	4630      	mov	r0, r6
   8b07c:	6921      	ldr	r1, [r4, #16]
   8b07e:	f7fe f8c3 	bl	89208 <_free_r>
   8b082:	e7be      	b.n	8b002 <_fclose_r+0x42>
   8b084:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b086:	f7fe fb6b 	bl	89760 <__retarget_lock_release_recursive>
   8b08a:	e7d3      	b.n	8b034 <_fclose_r+0x74>

0008b08c <fiprintf>:
   8b08c:	b40e      	push	{r1, r2, r3}
   8b08e:	b500      	push	{lr}
   8b090:	4a07      	ldr	r2, [pc, #28]	; (8b0b0 <fiprintf+0x24>)
   8b092:	b082      	sub	sp, #8
   8b094:	ab03      	add	r3, sp, #12
   8b096:	4601      	mov	r1, r0
   8b098:	6810      	ldr	r0, [r2, #0]
   8b09a:	f853 2b04 	ldr.w	r2, [r3], #4
   8b09e:	9301      	str	r3, [sp, #4]
   8b0a0:	f7fb feec 	bl	86e7c <_vfiprintf_r>
   8b0a4:	b002      	add	sp, #8
   8b0a6:	f85d eb04 	ldr.w	lr, [sp], #4
   8b0aa:	b003      	add	sp, #12
   8b0ac:	4770      	bx	lr
   8b0ae:	bf00      	nop
   8b0b0:	200003c0 	.word	0x200003c0

0008b0b4 <_fstat_r>:
   8b0b4:	b570      	push	{r4, r5, r6, lr}
   8b0b6:	2600      	movs	r6, #0
   8b0b8:	4d07      	ldr	r5, [pc, #28]	; (8b0d8 <_fstat_r+0x24>)
   8b0ba:	4604      	mov	r4, r0
   8b0bc:	4608      	mov	r0, r1
   8b0be:	4611      	mov	r1, r2
   8b0c0:	602e      	str	r6, [r5, #0]
   8b0c2:	f7f9 fd59 	bl	84b78 <_fstat>
   8b0c6:	1c43      	adds	r3, r0, #1
   8b0c8:	d000      	beq.n	8b0cc <_fstat_r+0x18>
   8b0ca:	bd70      	pop	{r4, r5, r6, pc}
   8b0cc:	682b      	ldr	r3, [r5, #0]
   8b0ce:	2b00      	cmp	r3, #0
   8b0d0:	d0fb      	beq.n	8b0ca <_fstat_r+0x16>
   8b0d2:	6023      	str	r3, [r4, #0]
   8b0d4:	bd70      	pop	{r4, r5, r6, pc}
   8b0d6:	bf00      	nop
   8b0d8:	20001978 	.word	0x20001978

0008b0dc <_isatty_r>:
   8b0dc:	2200      	movs	r2, #0
   8b0de:	b538      	push	{r3, r4, r5, lr}
   8b0e0:	4d06      	ldr	r5, [pc, #24]	; (8b0fc <_isatty_r+0x20>)
   8b0e2:	4604      	mov	r4, r0
   8b0e4:	4608      	mov	r0, r1
   8b0e6:	602a      	str	r2, [r5, #0]
   8b0e8:	f7f9 fd4c 	bl	84b84 <_isatty>
   8b0ec:	1c43      	adds	r3, r0, #1
   8b0ee:	d000      	beq.n	8b0f2 <_isatty_r+0x16>
   8b0f0:	bd38      	pop	{r3, r4, r5, pc}
   8b0f2:	682b      	ldr	r3, [r5, #0]
   8b0f4:	2b00      	cmp	r3, #0
   8b0f6:	d0fb      	beq.n	8b0f0 <_isatty_r+0x14>
   8b0f8:	6023      	str	r3, [r4, #0]
   8b0fa:	bd38      	pop	{r3, r4, r5, pc}
   8b0fc:	20001978 	.word	0x20001978

0008b100 <_lseek_r>:
   8b100:	b538      	push	{r3, r4, r5, lr}
   8b102:	460c      	mov	r4, r1
   8b104:	4611      	mov	r1, r2
   8b106:	2200      	movs	r2, #0
   8b108:	4684      	mov	ip, r0
   8b10a:	4d07      	ldr	r5, [pc, #28]	; (8b128 <_lseek_r+0x28>)
   8b10c:	4620      	mov	r0, r4
   8b10e:	602a      	str	r2, [r5, #0]
   8b110:	461a      	mov	r2, r3
   8b112:	4664      	mov	r4, ip
   8b114:	f7f9 fd38 	bl	84b88 <_lseek>
   8b118:	1c43      	adds	r3, r0, #1
   8b11a:	d000      	beq.n	8b11e <_lseek_r+0x1e>
   8b11c:	bd38      	pop	{r3, r4, r5, pc}
   8b11e:	682b      	ldr	r3, [r5, #0]
   8b120:	2b00      	cmp	r3, #0
   8b122:	d0fb      	beq.n	8b11c <_lseek_r+0x1c>
   8b124:	6023      	str	r3, [r4, #0]
   8b126:	bd38      	pop	{r3, r4, r5, pc}
   8b128:	20001978 	.word	0x20001978

0008b12c <_read_r>:
   8b12c:	b538      	push	{r3, r4, r5, lr}
   8b12e:	460c      	mov	r4, r1
   8b130:	4611      	mov	r1, r2
   8b132:	2200      	movs	r2, #0
   8b134:	4684      	mov	ip, r0
   8b136:	4d07      	ldr	r5, [pc, #28]	; (8b154 <_read_r+0x28>)
   8b138:	4620      	mov	r0, r4
   8b13a:	602a      	str	r2, [r5, #0]
   8b13c:	461a      	mov	r2, r3
   8b13e:	4664      	mov	r4, ip
   8b140:	f7f9 fdf2 	bl	84d28 <_read>
   8b144:	1c43      	adds	r3, r0, #1
   8b146:	d000      	beq.n	8b14a <_read_r+0x1e>
   8b148:	bd38      	pop	{r3, r4, r5, pc}
   8b14a:	682b      	ldr	r3, [r5, #0]
   8b14c:	2b00      	cmp	r3, #0
   8b14e:	d0fb      	beq.n	8b148 <_read_r+0x1c>
   8b150:	6023      	str	r3, [r4, #0]
   8b152:	bd38      	pop	{r3, r4, r5, pc}
   8b154:	20001978 	.word	0x20001978

0008b158 <abort>:
   8b158:	2006      	movs	r0, #6
   8b15a:	b508      	push	{r3, lr}
   8b15c:	f000 f804 	bl	8b168 <raise>
   8b160:	2001      	movs	r0, #1
   8b162:	f7f9 fd13 	bl	84b8c <_exit>
   8b166:	bf00      	nop

0008b168 <raise>:
   8b168:	b538      	push	{r3, r4, r5, lr}
   8b16a:	4b15      	ldr	r3, [pc, #84]	; (8b1c0 <raise+0x58>)
   8b16c:	281f      	cmp	r0, #31
   8b16e:	681d      	ldr	r5, [r3, #0]
   8b170:	d820      	bhi.n	8b1b4 <raise+0x4c>
   8b172:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8b176:	4604      	mov	r4, r0
   8b178:	b162      	cbz	r2, 8b194 <raise+0x2c>
   8b17a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8b17e:	b14b      	cbz	r3, 8b194 <raise+0x2c>
   8b180:	2b01      	cmp	r3, #1
   8b182:	d015      	beq.n	8b1b0 <raise+0x48>
   8b184:	1c59      	adds	r1, r3, #1
   8b186:	d00f      	beq.n	8b1a8 <raise+0x40>
   8b188:	2500      	movs	r5, #0
   8b18a:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8b18e:	4798      	blx	r3
   8b190:	4628      	mov	r0, r5
   8b192:	bd38      	pop	{r3, r4, r5, pc}
   8b194:	4628      	mov	r0, r5
   8b196:	f000 f829 	bl	8b1ec <_getpid_r>
   8b19a:	4622      	mov	r2, r4
   8b19c:	4601      	mov	r1, r0
   8b19e:	4628      	mov	r0, r5
   8b1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b1a4:	f000 b80e 	b.w	8b1c4 <_kill_r>
   8b1a8:	2316      	movs	r3, #22
   8b1aa:	2001      	movs	r0, #1
   8b1ac:	602b      	str	r3, [r5, #0]
   8b1ae:	bd38      	pop	{r3, r4, r5, pc}
   8b1b0:	2000      	movs	r0, #0
   8b1b2:	bd38      	pop	{r3, r4, r5, pc}
   8b1b4:	2316      	movs	r3, #22
   8b1b6:	f04f 30ff 	mov.w	r0, #4294967295
   8b1ba:	602b      	str	r3, [r5, #0]
   8b1bc:	bd38      	pop	{r3, r4, r5, pc}
   8b1be:	bf00      	nop
   8b1c0:	200003c0 	.word	0x200003c0

0008b1c4 <_kill_r>:
   8b1c4:	b570      	push	{r4, r5, r6, lr}
   8b1c6:	2600      	movs	r6, #0
   8b1c8:	4d07      	ldr	r5, [pc, #28]	; (8b1e8 <_kill_r+0x24>)
   8b1ca:	4604      	mov	r4, r0
   8b1cc:	4608      	mov	r0, r1
   8b1ce:	4611      	mov	r1, r2
   8b1d0:	602e      	str	r6, [r5, #0]
   8b1d2:	f7f9 fce5 	bl	84ba0 <_kill>
   8b1d6:	1c43      	adds	r3, r0, #1
   8b1d8:	d000      	beq.n	8b1dc <_kill_r+0x18>
   8b1da:	bd70      	pop	{r4, r5, r6, pc}
   8b1dc:	682b      	ldr	r3, [r5, #0]
   8b1de:	2b00      	cmp	r3, #0
   8b1e0:	d0fb      	beq.n	8b1da <_kill_r+0x16>
   8b1e2:	6023      	str	r3, [r4, #0]
   8b1e4:	bd70      	pop	{r4, r5, r6, pc}
   8b1e6:	bf00      	nop
   8b1e8:	20001978 	.word	0x20001978

0008b1ec <_getpid_r>:
   8b1ec:	f7f9 bcda 	b.w	84ba4 <_getpid>

0008b1f0 <__aeabi_drsub>:
   8b1f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8b1f4:	e002      	b.n	8b1fc <__adddf3>
   8b1f6:	bf00      	nop

0008b1f8 <__aeabi_dsub>:
   8b1f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008b1fc <__adddf3>:
   8b1fc:	b530      	push	{r4, r5, lr}
   8b1fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8b202:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8b206:	ea94 0f05 	teq	r4, r5
   8b20a:	bf08      	it	eq
   8b20c:	ea90 0f02 	teqeq	r0, r2
   8b210:	bf1f      	itttt	ne
   8b212:	ea54 0c00 	orrsne.w	ip, r4, r0
   8b216:	ea55 0c02 	orrsne.w	ip, r5, r2
   8b21a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8b21e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b222:	f000 80e2 	beq.w	8b3ea <__adddf3+0x1ee>
   8b226:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8b22a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8b22e:	bfb8      	it	lt
   8b230:	426d      	neglt	r5, r5
   8b232:	dd0c      	ble.n	8b24e <__adddf3+0x52>
   8b234:	442c      	add	r4, r5
   8b236:	ea80 0202 	eor.w	r2, r0, r2
   8b23a:	ea81 0303 	eor.w	r3, r1, r3
   8b23e:	ea82 0000 	eor.w	r0, r2, r0
   8b242:	ea83 0101 	eor.w	r1, r3, r1
   8b246:	ea80 0202 	eor.w	r2, r0, r2
   8b24a:	ea81 0303 	eor.w	r3, r1, r3
   8b24e:	2d36      	cmp	r5, #54	; 0x36
   8b250:	bf88      	it	hi
   8b252:	bd30      	pophi	{r4, r5, pc}
   8b254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8b258:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b25c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8b260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8b264:	d002      	beq.n	8b26c <__adddf3+0x70>
   8b266:	4240      	negs	r0, r0
   8b268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b26c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8b270:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8b278:	d002      	beq.n	8b280 <__adddf3+0x84>
   8b27a:	4252      	negs	r2, r2
   8b27c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b280:	ea94 0f05 	teq	r4, r5
   8b284:	f000 80a7 	beq.w	8b3d6 <__adddf3+0x1da>
   8b288:	f1a4 0401 	sub.w	r4, r4, #1
   8b28c:	f1d5 0e20 	rsbs	lr, r5, #32
   8b290:	db0d      	blt.n	8b2ae <__adddf3+0xb2>
   8b292:	fa02 fc0e 	lsl.w	ip, r2, lr
   8b296:	fa22 f205 	lsr.w	r2, r2, r5
   8b29a:	1880      	adds	r0, r0, r2
   8b29c:	f141 0100 	adc.w	r1, r1, #0
   8b2a0:	fa03 f20e 	lsl.w	r2, r3, lr
   8b2a4:	1880      	adds	r0, r0, r2
   8b2a6:	fa43 f305 	asr.w	r3, r3, r5
   8b2aa:	4159      	adcs	r1, r3
   8b2ac:	e00e      	b.n	8b2cc <__adddf3+0xd0>
   8b2ae:	f1a5 0520 	sub.w	r5, r5, #32
   8b2b2:	f10e 0e20 	add.w	lr, lr, #32
   8b2b6:	2a01      	cmp	r2, #1
   8b2b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8b2bc:	bf28      	it	cs
   8b2be:	f04c 0c02 	orrcs.w	ip, ip, #2
   8b2c2:	fa43 f305 	asr.w	r3, r3, r5
   8b2c6:	18c0      	adds	r0, r0, r3
   8b2c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8b2cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b2d0:	d507      	bpl.n	8b2e2 <__adddf3+0xe6>
   8b2d2:	f04f 0e00 	mov.w	lr, #0
   8b2d6:	f1dc 0c00 	rsbs	ip, ip, #0
   8b2da:	eb7e 0000 	sbcs.w	r0, lr, r0
   8b2de:	eb6e 0101 	sbc.w	r1, lr, r1
   8b2e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8b2e6:	d31b      	bcc.n	8b320 <__adddf3+0x124>
   8b2e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8b2ec:	d30c      	bcc.n	8b308 <__adddf3+0x10c>
   8b2ee:	0849      	lsrs	r1, r1, #1
   8b2f0:	ea5f 0030 	movs.w	r0, r0, rrx
   8b2f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8b2f8:	f104 0401 	add.w	r4, r4, #1
   8b2fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8b300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8b304:	f080 809a 	bcs.w	8b43c <__adddf3+0x240>
   8b308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8b30c:	bf08      	it	eq
   8b30e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b312:	f150 0000 	adcs.w	r0, r0, #0
   8b316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b31a:	ea41 0105 	orr.w	r1, r1, r5
   8b31e:	bd30      	pop	{r4, r5, pc}
   8b320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8b324:	4140      	adcs	r0, r0
   8b326:	eb41 0101 	adc.w	r1, r1, r1
   8b32a:	3c01      	subs	r4, #1
   8b32c:	bf28      	it	cs
   8b32e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8b332:	d2e9      	bcs.n	8b308 <__adddf3+0x10c>
   8b334:	f091 0f00 	teq	r1, #0
   8b338:	bf04      	itt	eq
   8b33a:	4601      	moveq	r1, r0
   8b33c:	2000      	moveq	r0, #0
   8b33e:	fab1 f381 	clz	r3, r1
   8b342:	bf08      	it	eq
   8b344:	3320      	addeq	r3, #32
   8b346:	f1a3 030b 	sub.w	r3, r3, #11
   8b34a:	f1b3 0220 	subs.w	r2, r3, #32
   8b34e:	da0c      	bge.n	8b36a <__adddf3+0x16e>
   8b350:	320c      	adds	r2, #12
   8b352:	dd08      	ble.n	8b366 <__adddf3+0x16a>
   8b354:	f102 0c14 	add.w	ip, r2, #20
   8b358:	f1c2 020c 	rsb	r2, r2, #12
   8b35c:	fa01 f00c 	lsl.w	r0, r1, ip
   8b360:	fa21 f102 	lsr.w	r1, r1, r2
   8b364:	e00c      	b.n	8b380 <__adddf3+0x184>
   8b366:	f102 0214 	add.w	r2, r2, #20
   8b36a:	bfd8      	it	le
   8b36c:	f1c2 0c20 	rsble	ip, r2, #32
   8b370:	fa01 f102 	lsl.w	r1, r1, r2
   8b374:	fa20 fc0c 	lsr.w	ip, r0, ip
   8b378:	bfdc      	itt	le
   8b37a:	ea41 010c 	orrle.w	r1, r1, ip
   8b37e:	4090      	lslle	r0, r2
   8b380:	1ae4      	subs	r4, r4, r3
   8b382:	bfa2      	ittt	ge
   8b384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8b388:	4329      	orrge	r1, r5
   8b38a:	bd30      	popge	{r4, r5, pc}
   8b38c:	ea6f 0404 	mvn.w	r4, r4
   8b390:	3c1f      	subs	r4, #31
   8b392:	da1c      	bge.n	8b3ce <__adddf3+0x1d2>
   8b394:	340c      	adds	r4, #12
   8b396:	dc0e      	bgt.n	8b3b6 <__adddf3+0x1ba>
   8b398:	f104 0414 	add.w	r4, r4, #20
   8b39c:	f1c4 0220 	rsb	r2, r4, #32
   8b3a0:	fa20 f004 	lsr.w	r0, r0, r4
   8b3a4:	fa01 f302 	lsl.w	r3, r1, r2
   8b3a8:	ea40 0003 	orr.w	r0, r0, r3
   8b3ac:	fa21 f304 	lsr.w	r3, r1, r4
   8b3b0:	ea45 0103 	orr.w	r1, r5, r3
   8b3b4:	bd30      	pop	{r4, r5, pc}
   8b3b6:	f1c4 040c 	rsb	r4, r4, #12
   8b3ba:	f1c4 0220 	rsb	r2, r4, #32
   8b3be:	fa20 f002 	lsr.w	r0, r0, r2
   8b3c2:	fa01 f304 	lsl.w	r3, r1, r4
   8b3c6:	ea40 0003 	orr.w	r0, r0, r3
   8b3ca:	4629      	mov	r1, r5
   8b3cc:	bd30      	pop	{r4, r5, pc}
   8b3ce:	fa21 f004 	lsr.w	r0, r1, r4
   8b3d2:	4629      	mov	r1, r5
   8b3d4:	bd30      	pop	{r4, r5, pc}
   8b3d6:	f094 0f00 	teq	r4, #0
   8b3da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8b3de:	bf06      	itte	eq
   8b3e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8b3e4:	3401      	addeq	r4, #1
   8b3e6:	3d01      	subne	r5, #1
   8b3e8:	e74e      	b.n	8b288 <__adddf3+0x8c>
   8b3ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b3ee:	bf18      	it	ne
   8b3f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b3f4:	d029      	beq.n	8b44a <__adddf3+0x24e>
   8b3f6:	ea94 0f05 	teq	r4, r5
   8b3fa:	bf08      	it	eq
   8b3fc:	ea90 0f02 	teqeq	r0, r2
   8b400:	d005      	beq.n	8b40e <__adddf3+0x212>
   8b402:	ea54 0c00 	orrs.w	ip, r4, r0
   8b406:	bf04      	itt	eq
   8b408:	4619      	moveq	r1, r3
   8b40a:	4610      	moveq	r0, r2
   8b40c:	bd30      	pop	{r4, r5, pc}
   8b40e:	ea91 0f03 	teq	r1, r3
   8b412:	bf1e      	ittt	ne
   8b414:	2100      	movne	r1, #0
   8b416:	2000      	movne	r0, #0
   8b418:	bd30      	popne	{r4, r5, pc}
   8b41a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8b41e:	d105      	bne.n	8b42c <__adddf3+0x230>
   8b420:	0040      	lsls	r0, r0, #1
   8b422:	4149      	adcs	r1, r1
   8b424:	bf28      	it	cs
   8b426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8b42a:	bd30      	pop	{r4, r5, pc}
   8b42c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8b430:	bf3c      	itt	cc
   8b432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8b436:	bd30      	popcc	{r4, r5, pc}
   8b438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b43c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8b440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b444:	f04f 0000 	mov.w	r0, #0
   8b448:	bd30      	pop	{r4, r5, pc}
   8b44a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b44e:	bf1a      	itte	ne
   8b450:	4619      	movne	r1, r3
   8b452:	4610      	movne	r0, r2
   8b454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8b458:	bf1c      	itt	ne
   8b45a:	460b      	movne	r3, r1
   8b45c:	4602      	movne	r2, r0
   8b45e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b462:	bf06      	itte	eq
   8b464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8b468:	ea91 0f03 	teqeq	r1, r3
   8b46c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8b470:	bd30      	pop	{r4, r5, pc}
   8b472:	bf00      	nop

0008b474 <__aeabi_ui2d>:
   8b474:	f090 0f00 	teq	r0, #0
   8b478:	bf04      	itt	eq
   8b47a:	2100      	moveq	r1, #0
   8b47c:	4770      	bxeq	lr
   8b47e:	b530      	push	{r4, r5, lr}
   8b480:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b484:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b488:	f04f 0500 	mov.w	r5, #0
   8b48c:	f04f 0100 	mov.w	r1, #0
   8b490:	e750      	b.n	8b334 <__adddf3+0x138>
   8b492:	bf00      	nop

0008b494 <__aeabi_i2d>:
   8b494:	f090 0f00 	teq	r0, #0
   8b498:	bf04      	itt	eq
   8b49a:	2100      	moveq	r1, #0
   8b49c:	4770      	bxeq	lr
   8b49e:	b530      	push	{r4, r5, lr}
   8b4a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b4a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b4a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8b4ac:	bf48      	it	mi
   8b4ae:	4240      	negmi	r0, r0
   8b4b0:	f04f 0100 	mov.w	r1, #0
   8b4b4:	e73e      	b.n	8b334 <__adddf3+0x138>
   8b4b6:	bf00      	nop

0008b4b8 <__aeabi_f2d>:
   8b4b8:	0042      	lsls	r2, r0, #1
   8b4ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8b4be:	ea4f 0131 	mov.w	r1, r1, rrx
   8b4c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8b4c6:	bf1f      	itttt	ne
   8b4c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8b4cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8b4d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8b4d4:	4770      	bxne	lr
   8b4d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8b4da:	bf08      	it	eq
   8b4dc:	4770      	bxeq	lr
   8b4de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8b4e2:	bf04      	itt	eq
   8b4e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8b4e8:	4770      	bxeq	lr
   8b4ea:	b530      	push	{r4, r5, lr}
   8b4ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   8b4f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b4f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b4f8:	e71c      	b.n	8b334 <__adddf3+0x138>
   8b4fa:	bf00      	nop

0008b4fc <__aeabi_ul2d>:
   8b4fc:	ea50 0201 	orrs.w	r2, r0, r1
   8b500:	bf08      	it	eq
   8b502:	4770      	bxeq	lr
   8b504:	b530      	push	{r4, r5, lr}
   8b506:	f04f 0500 	mov.w	r5, #0
   8b50a:	e00a      	b.n	8b522 <__aeabi_l2d+0x16>

0008b50c <__aeabi_l2d>:
   8b50c:	ea50 0201 	orrs.w	r2, r0, r1
   8b510:	bf08      	it	eq
   8b512:	4770      	bxeq	lr
   8b514:	b530      	push	{r4, r5, lr}
   8b516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8b51a:	d502      	bpl.n	8b522 <__aeabi_l2d+0x16>
   8b51c:	4240      	negs	r0, r0
   8b51e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b522:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b526:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b52a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8b52e:	f43f aed8 	beq.w	8b2e2 <__adddf3+0xe6>
   8b532:	f04f 0203 	mov.w	r2, #3
   8b536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b53a:	bf18      	it	ne
   8b53c:	3203      	addne	r2, #3
   8b53e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b542:	bf18      	it	ne
   8b544:	3203      	addne	r2, #3
   8b546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8b54a:	f1c2 0320 	rsb	r3, r2, #32
   8b54e:	fa00 fc03 	lsl.w	ip, r0, r3
   8b552:	fa20 f002 	lsr.w	r0, r0, r2
   8b556:	fa01 fe03 	lsl.w	lr, r1, r3
   8b55a:	ea40 000e 	orr.w	r0, r0, lr
   8b55e:	fa21 f102 	lsr.w	r1, r1, r2
   8b562:	4414      	add	r4, r2
   8b564:	e6bd      	b.n	8b2e2 <__adddf3+0xe6>
   8b566:	bf00      	nop

0008b568 <__aeabi_dmul>:
   8b568:	b570      	push	{r4, r5, r6, lr}
   8b56a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8b56e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8b572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8b576:	bf1d      	ittte	ne
   8b578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8b57c:	ea94 0f0c 	teqne	r4, ip
   8b580:	ea95 0f0c 	teqne	r5, ip
   8b584:	f000 f8de 	bleq	8b744 <__aeabi_dmul+0x1dc>
   8b588:	442c      	add	r4, r5
   8b58a:	ea81 0603 	eor.w	r6, r1, r3
   8b58e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8b592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8b596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8b59a:	bf18      	it	ne
   8b59c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8b5a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b5a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b5a8:	d038      	beq.n	8b61c <__aeabi_dmul+0xb4>
   8b5aa:	fba0 ce02 	umull	ip, lr, r0, r2
   8b5ae:	f04f 0500 	mov.w	r5, #0
   8b5b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   8b5b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8b5ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   8b5be:	f04f 0600 	mov.w	r6, #0
   8b5c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   8b5c6:	f09c 0f00 	teq	ip, #0
   8b5ca:	bf18      	it	ne
   8b5cc:	f04e 0e01 	orrne.w	lr, lr, #1
   8b5d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8b5d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8b5d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8b5dc:	d204      	bcs.n	8b5e8 <__aeabi_dmul+0x80>
   8b5de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8b5e2:	416d      	adcs	r5, r5
   8b5e4:	eb46 0606 	adc.w	r6, r6, r6
   8b5e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8b5ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8b5f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8b5f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8b5f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8b5fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8b600:	bf88      	it	hi
   8b602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8b606:	d81e      	bhi.n	8b646 <__aeabi_dmul+0xde>
   8b608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8b60c:	bf08      	it	eq
   8b60e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8b612:	f150 0000 	adcs.w	r0, r0, #0
   8b616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b61a:	bd70      	pop	{r4, r5, r6, pc}
   8b61c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8b620:	ea46 0101 	orr.w	r1, r6, r1
   8b624:	ea40 0002 	orr.w	r0, r0, r2
   8b628:	ea81 0103 	eor.w	r1, r1, r3
   8b62c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8b630:	bfc2      	ittt	gt
   8b632:	ebd4 050c 	rsbsgt	r5, r4, ip
   8b636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8b63a:	bd70      	popgt	{r4, r5, r6, pc}
   8b63c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b640:	f04f 0e00 	mov.w	lr, #0
   8b644:	3c01      	subs	r4, #1
   8b646:	f300 80ab 	bgt.w	8b7a0 <__aeabi_dmul+0x238>
   8b64a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8b64e:	bfde      	ittt	le
   8b650:	2000      	movle	r0, #0
   8b652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8b656:	bd70      	pople	{r4, r5, r6, pc}
   8b658:	f1c4 0400 	rsb	r4, r4, #0
   8b65c:	3c20      	subs	r4, #32
   8b65e:	da35      	bge.n	8b6cc <__aeabi_dmul+0x164>
   8b660:	340c      	adds	r4, #12
   8b662:	dc1b      	bgt.n	8b69c <__aeabi_dmul+0x134>
   8b664:	f104 0414 	add.w	r4, r4, #20
   8b668:	f1c4 0520 	rsb	r5, r4, #32
   8b66c:	fa00 f305 	lsl.w	r3, r0, r5
   8b670:	fa20 f004 	lsr.w	r0, r0, r4
   8b674:	fa01 f205 	lsl.w	r2, r1, r5
   8b678:	ea40 0002 	orr.w	r0, r0, r2
   8b67c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8b680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b688:	fa21 f604 	lsr.w	r6, r1, r4
   8b68c:	eb42 0106 	adc.w	r1, r2, r6
   8b690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b694:	bf08      	it	eq
   8b696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b69a:	bd70      	pop	{r4, r5, r6, pc}
   8b69c:	f1c4 040c 	rsb	r4, r4, #12
   8b6a0:	f1c4 0520 	rsb	r5, r4, #32
   8b6a4:	fa00 f304 	lsl.w	r3, r0, r4
   8b6a8:	fa20 f005 	lsr.w	r0, r0, r5
   8b6ac:	fa01 f204 	lsl.w	r2, r1, r4
   8b6b0:	ea40 0002 	orr.w	r0, r0, r2
   8b6b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b6b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b6bc:	f141 0100 	adc.w	r1, r1, #0
   8b6c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b6c4:	bf08      	it	eq
   8b6c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b6ca:	bd70      	pop	{r4, r5, r6, pc}
   8b6cc:	f1c4 0520 	rsb	r5, r4, #32
   8b6d0:	fa00 f205 	lsl.w	r2, r0, r5
   8b6d4:	ea4e 0e02 	orr.w	lr, lr, r2
   8b6d8:	fa20 f304 	lsr.w	r3, r0, r4
   8b6dc:	fa01 f205 	lsl.w	r2, r1, r5
   8b6e0:	ea43 0302 	orr.w	r3, r3, r2
   8b6e4:	fa21 f004 	lsr.w	r0, r1, r4
   8b6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b6ec:	fa21 f204 	lsr.w	r2, r1, r4
   8b6f0:	ea20 0002 	bic.w	r0, r0, r2
   8b6f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8b6f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b6fc:	bf08      	it	eq
   8b6fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b702:	bd70      	pop	{r4, r5, r6, pc}
   8b704:	f094 0f00 	teq	r4, #0
   8b708:	d10f      	bne.n	8b72a <__aeabi_dmul+0x1c2>
   8b70a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8b70e:	0040      	lsls	r0, r0, #1
   8b710:	eb41 0101 	adc.w	r1, r1, r1
   8b714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b718:	bf08      	it	eq
   8b71a:	3c01      	subeq	r4, #1
   8b71c:	d0f7      	beq.n	8b70e <__aeabi_dmul+0x1a6>
   8b71e:	ea41 0106 	orr.w	r1, r1, r6
   8b722:	f095 0f00 	teq	r5, #0
   8b726:	bf18      	it	ne
   8b728:	4770      	bxne	lr
   8b72a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8b72e:	0052      	lsls	r2, r2, #1
   8b730:	eb43 0303 	adc.w	r3, r3, r3
   8b734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8b738:	bf08      	it	eq
   8b73a:	3d01      	subeq	r5, #1
   8b73c:	d0f7      	beq.n	8b72e <__aeabi_dmul+0x1c6>
   8b73e:	ea43 0306 	orr.w	r3, r3, r6
   8b742:	4770      	bx	lr
   8b744:	ea94 0f0c 	teq	r4, ip
   8b748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8b74c:	bf18      	it	ne
   8b74e:	ea95 0f0c 	teqne	r5, ip
   8b752:	d00c      	beq.n	8b76e <__aeabi_dmul+0x206>
   8b754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b758:	bf18      	it	ne
   8b75a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b75e:	d1d1      	bne.n	8b704 <__aeabi_dmul+0x19c>
   8b760:	ea81 0103 	eor.w	r1, r1, r3
   8b764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b768:	f04f 0000 	mov.w	r0, #0
   8b76c:	bd70      	pop	{r4, r5, r6, pc}
   8b76e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b772:	bf06      	itte	eq
   8b774:	4610      	moveq	r0, r2
   8b776:	4619      	moveq	r1, r3
   8b778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b77c:	d019      	beq.n	8b7b2 <__aeabi_dmul+0x24a>
   8b77e:	ea94 0f0c 	teq	r4, ip
   8b782:	d102      	bne.n	8b78a <__aeabi_dmul+0x222>
   8b784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8b788:	d113      	bne.n	8b7b2 <__aeabi_dmul+0x24a>
   8b78a:	ea95 0f0c 	teq	r5, ip
   8b78e:	d105      	bne.n	8b79c <__aeabi_dmul+0x234>
   8b790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8b794:	bf1c      	itt	ne
   8b796:	4610      	movne	r0, r2
   8b798:	4619      	movne	r1, r3
   8b79a:	d10a      	bne.n	8b7b2 <__aeabi_dmul+0x24a>
   8b79c:	ea81 0103 	eor.w	r1, r1, r3
   8b7a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b7a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8b7a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b7ac:	f04f 0000 	mov.w	r0, #0
   8b7b0:	bd70      	pop	{r4, r5, r6, pc}
   8b7b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8b7b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8b7ba:	bd70      	pop	{r4, r5, r6, pc}

0008b7bc <__aeabi_ddiv>:
   8b7bc:	b570      	push	{r4, r5, r6, lr}
   8b7be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8b7c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8b7c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8b7ca:	bf1d      	ittte	ne
   8b7cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8b7d0:	ea94 0f0c 	teqne	r4, ip
   8b7d4:	ea95 0f0c 	teqne	r5, ip
   8b7d8:	f000 f8a7 	bleq	8b92a <__aeabi_ddiv+0x16e>
   8b7dc:	eba4 0405 	sub.w	r4, r4, r5
   8b7e0:	ea81 0e03 	eor.w	lr, r1, r3
   8b7e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8b7e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b7ec:	f000 8088 	beq.w	8b900 <__aeabi_ddiv+0x144>
   8b7f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b7f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8b7f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8b7fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8b800:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8b804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8b808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8b80c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8b810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8b814:	429d      	cmp	r5, r3
   8b816:	bf08      	it	eq
   8b818:	4296      	cmpeq	r6, r2
   8b81a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8b81e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8b822:	d202      	bcs.n	8b82a <__aeabi_ddiv+0x6e>
   8b824:	085b      	lsrs	r3, r3, #1
   8b826:	ea4f 0232 	mov.w	r2, r2, rrx
   8b82a:	1ab6      	subs	r6, r6, r2
   8b82c:	eb65 0503 	sbc.w	r5, r5, r3
   8b830:	085b      	lsrs	r3, r3, #1
   8b832:	ea4f 0232 	mov.w	r2, r2, rrx
   8b836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8b83a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8b83e:	ebb6 0e02 	subs.w	lr, r6, r2
   8b842:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b846:	bf22      	ittt	cs
   8b848:	1ab6      	subcs	r6, r6, r2
   8b84a:	4675      	movcs	r5, lr
   8b84c:	ea40 000c 	orrcs.w	r0, r0, ip
   8b850:	085b      	lsrs	r3, r3, #1
   8b852:	ea4f 0232 	mov.w	r2, r2, rrx
   8b856:	ebb6 0e02 	subs.w	lr, r6, r2
   8b85a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b85e:	bf22      	ittt	cs
   8b860:	1ab6      	subcs	r6, r6, r2
   8b862:	4675      	movcs	r5, lr
   8b864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8b868:	085b      	lsrs	r3, r3, #1
   8b86a:	ea4f 0232 	mov.w	r2, r2, rrx
   8b86e:	ebb6 0e02 	subs.w	lr, r6, r2
   8b872:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b876:	bf22      	ittt	cs
   8b878:	1ab6      	subcs	r6, r6, r2
   8b87a:	4675      	movcs	r5, lr
   8b87c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8b880:	085b      	lsrs	r3, r3, #1
   8b882:	ea4f 0232 	mov.w	r2, r2, rrx
   8b886:	ebb6 0e02 	subs.w	lr, r6, r2
   8b88a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b88e:	bf22      	ittt	cs
   8b890:	1ab6      	subcs	r6, r6, r2
   8b892:	4675      	movcs	r5, lr
   8b894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8b898:	ea55 0e06 	orrs.w	lr, r5, r6
   8b89c:	d018      	beq.n	8b8d0 <__aeabi_ddiv+0x114>
   8b89e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8b8a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8b8a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8b8aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8b8ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8b8b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8b8b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8b8ba:	d1c0      	bne.n	8b83e <__aeabi_ddiv+0x82>
   8b8bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b8c0:	d10b      	bne.n	8b8da <__aeabi_ddiv+0x11e>
   8b8c2:	ea41 0100 	orr.w	r1, r1, r0
   8b8c6:	f04f 0000 	mov.w	r0, #0
   8b8ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8b8ce:	e7b6      	b.n	8b83e <__aeabi_ddiv+0x82>
   8b8d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b8d4:	bf04      	itt	eq
   8b8d6:	4301      	orreq	r1, r0
   8b8d8:	2000      	moveq	r0, #0
   8b8da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8b8de:	bf88      	it	hi
   8b8e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8b8e4:	f63f aeaf 	bhi.w	8b646 <__aeabi_dmul+0xde>
   8b8e8:	ebb5 0c03 	subs.w	ip, r5, r3
   8b8ec:	bf04      	itt	eq
   8b8ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   8b8f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b8f6:	f150 0000 	adcs.w	r0, r0, #0
   8b8fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b8fe:	bd70      	pop	{r4, r5, r6, pc}
   8b900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8b904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8b908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8b90c:	bfc2      	ittt	gt
   8b90e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8b912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8b916:	bd70      	popgt	{r4, r5, r6, pc}
   8b918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b91c:	f04f 0e00 	mov.w	lr, #0
   8b920:	3c01      	subs	r4, #1
   8b922:	e690      	b.n	8b646 <__aeabi_dmul+0xde>
   8b924:	ea45 0e06 	orr.w	lr, r5, r6
   8b928:	e68d      	b.n	8b646 <__aeabi_dmul+0xde>
   8b92a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8b92e:	ea94 0f0c 	teq	r4, ip
   8b932:	bf08      	it	eq
   8b934:	ea95 0f0c 	teqeq	r5, ip
   8b938:	f43f af3b 	beq.w	8b7b2 <__aeabi_dmul+0x24a>
   8b93c:	ea94 0f0c 	teq	r4, ip
   8b940:	d10a      	bne.n	8b958 <__aeabi_ddiv+0x19c>
   8b942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b946:	f47f af34 	bne.w	8b7b2 <__aeabi_dmul+0x24a>
   8b94a:	ea95 0f0c 	teq	r5, ip
   8b94e:	f47f af25 	bne.w	8b79c <__aeabi_dmul+0x234>
   8b952:	4610      	mov	r0, r2
   8b954:	4619      	mov	r1, r3
   8b956:	e72c      	b.n	8b7b2 <__aeabi_dmul+0x24a>
   8b958:	ea95 0f0c 	teq	r5, ip
   8b95c:	d106      	bne.n	8b96c <__aeabi_ddiv+0x1b0>
   8b95e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8b962:	f43f aefd 	beq.w	8b760 <__aeabi_dmul+0x1f8>
   8b966:	4610      	mov	r0, r2
   8b968:	4619      	mov	r1, r3
   8b96a:	e722      	b.n	8b7b2 <__aeabi_dmul+0x24a>
   8b96c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b970:	bf18      	it	ne
   8b972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b976:	f47f aec5 	bne.w	8b704 <__aeabi_dmul+0x19c>
   8b97a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8b97e:	f47f af0d 	bne.w	8b79c <__aeabi_dmul+0x234>
   8b982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8b986:	f47f aeeb 	bne.w	8b760 <__aeabi_dmul+0x1f8>
   8b98a:	e712      	b.n	8b7b2 <__aeabi_dmul+0x24a>

0008b98c <__gedf2>:
   8b98c:	f04f 3cff 	mov.w	ip, #4294967295
   8b990:	e006      	b.n	8b9a0 <__cmpdf2+0x4>
   8b992:	bf00      	nop

0008b994 <__ledf2>:
   8b994:	f04f 0c01 	mov.w	ip, #1
   8b998:	e002      	b.n	8b9a0 <__cmpdf2+0x4>
   8b99a:	bf00      	nop

0008b99c <__cmpdf2>:
   8b99c:	f04f 0c01 	mov.w	ip, #1
   8b9a0:	f84d cd04 	str.w	ip, [sp, #-4]!
   8b9a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8b9a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8b9ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8b9b0:	bf18      	it	ne
   8b9b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8b9b6:	d01b      	beq.n	8b9f0 <__cmpdf2+0x54>
   8b9b8:	b001      	add	sp, #4
   8b9ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8b9be:	bf0c      	ite	eq
   8b9c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8b9c4:	ea91 0f03 	teqne	r1, r3
   8b9c8:	bf02      	ittt	eq
   8b9ca:	ea90 0f02 	teqeq	r0, r2
   8b9ce:	2000      	moveq	r0, #0
   8b9d0:	4770      	bxeq	lr
   8b9d2:	f110 0f00 	cmn.w	r0, #0
   8b9d6:	ea91 0f03 	teq	r1, r3
   8b9da:	bf58      	it	pl
   8b9dc:	4299      	cmppl	r1, r3
   8b9de:	bf08      	it	eq
   8b9e0:	4290      	cmpeq	r0, r2
   8b9e2:	bf2c      	ite	cs
   8b9e4:	17d8      	asrcs	r0, r3, #31
   8b9e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8b9ea:	f040 0001 	orr.w	r0, r0, #1
   8b9ee:	4770      	bx	lr
   8b9f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8b9f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8b9f8:	d102      	bne.n	8ba00 <__cmpdf2+0x64>
   8b9fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8b9fe:	d107      	bne.n	8ba10 <__cmpdf2+0x74>
   8ba00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ba04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ba08:	d1d6      	bne.n	8b9b8 <__cmpdf2+0x1c>
   8ba0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8ba0e:	d0d3      	beq.n	8b9b8 <__cmpdf2+0x1c>
   8ba10:	f85d 0b04 	ldr.w	r0, [sp], #4
   8ba14:	4770      	bx	lr
   8ba16:	bf00      	nop

0008ba18 <__aeabi_cdrcmple>:
   8ba18:	4684      	mov	ip, r0
   8ba1a:	4610      	mov	r0, r2
   8ba1c:	4662      	mov	r2, ip
   8ba1e:	468c      	mov	ip, r1
   8ba20:	4619      	mov	r1, r3
   8ba22:	4663      	mov	r3, ip
   8ba24:	e000      	b.n	8ba28 <__aeabi_cdcmpeq>
   8ba26:	bf00      	nop

0008ba28 <__aeabi_cdcmpeq>:
   8ba28:	b501      	push	{r0, lr}
   8ba2a:	f7ff ffb7 	bl	8b99c <__cmpdf2>
   8ba2e:	2800      	cmp	r0, #0
   8ba30:	bf48      	it	mi
   8ba32:	f110 0f00 	cmnmi.w	r0, #0
   8ba36:	bd01      	pop	{r0, pc}

0008ba38 <__aeabi_dcmpeq>:
   8ba38:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba3c:	f7ff fff4 	bl	8ba28 <__aeabi_cdcmpeq>
   8ba40:	bf0c      	ite	eq
   8ba42:	2001      	moveq	r0, #1
   8ba44:	2000      	movne	r0, #0
   8ba46:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba4a:	bf00      	nop

0008ba4c <__aeabi_dcmplt>:
   8ba4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba50:	f7ff ffea 	bl	8ba28 <__aeabi_cdcmpeq>
   8ba54:	bf34      	ite	cc
   8ba56:	2001      	movcc	r0, #1
   8ba58:	2000      	movcs	r0, #0
   8ba5a:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba5e:	bf00      	nop

0008ba60 <__aeabi_dcmple>:
   8ba60:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba64:	f7ff ffe0 	bl	8ba28 <__aeabi_cdcmpeq>
   8ba68:	bf94      	ite	ls
   8ba6a:	2001      	movls	r0, #1
   8ba6c:	2000      	movhi	r0, #0
   8ba6e:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba72:	bf00      	nop

0008ba74 <__aeabi_dcmpge>:
   8ba74:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba78:	f7ff ffce 	bl	8ba18 <__aeabi_cdrcmple>
   8ba7c:	bf94      	ite	ls
   8ba7e:	2001      	movls	r0, #1
   8ba80:	2000      	movhi	r0, #0
   8ba82:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba86:	bf00      	nop

0008ba88 <__aeabi_dcmpgt>:
   8ba88:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba8c:	f7ff ffc4 	bl	8ba18 <__aeabi_cdrcmple>
   8ba90:	bf34      	ite	cc
   8ba92:	2001      	movcc	r0, #1
   8ba94:	2000      	movcs	r0, #0
   8ba96:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba9a:	bf00      	nop

0008ba9c <__aeabi_dcmpun>:
   8ba9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8baa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8baa4:	d102      	bne.n	8baac <__aeabi_dcmpun+0x10>
   8baa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8baaa:	d10a      	bne.n	8bac2 <__aeabi_dcmpun+0x26>
   8baac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8bab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bab4:	d102      	bne.n	8babc <__aeabi_dcmpun+0x20>
   8bab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8baba:	d102      	bne.n	8bac2 <__aeabi_dcmpun+0x26>
   8babc:	f04f 0000 	mov.w	r0, #0
   8bac0:	4770      	bx	lr
   8bac2:	f04f 0001 	mov.w	r0, #1
   8bac6:	4770      	bx	lr

0008bac8 <__aeabi_d2iz>:
   8bac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8bacc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8bad0:	d215      	bcs.n	8bafe <__aeabi_d2iz+0x36>
   8bad2:	d511      	bpl.n	8baf8 <__aeabi_d2iz+0x30>
   8bad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8bad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8badc:	d912      	bls.n	8bb04 <__aeabi_d2iz+0x3c>
   8bade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8bae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8bae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8baea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8baee:	fa23 f002 	lsr.w	r0, r3, r2
   8baf2:	bf18      	it	ne
   8baf4:	4240      	negne	r0, r0
   8baf6:	4770      	bx	lr
   8baf8:	f04f 0000 	mov.w	r0, #0
   8bafc:	4770      	bx	lr
   8bafe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8bb02:	d105      	bne.n	8bb10 <__aeabi_d2iz+0x48>
   8bb04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8bb08:	bf08      	it	eq
   8bb0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8bb0e:	4770      	bx	lr
   8bb10:	f04f 0000 	mov.w	r0, #0
   8bb14:	4770      	bx	lr
   8bb16:	bf00      	nop

0008bb18 <__aeabi_uldivmod>:
   8bb18:	b953      	cbnz	r3, 8bb30 <__aeabi_uldivmod+0x18>
   8bb1a:	b94a      	cbnz	r2, 8bb30 <__aeabi_uldivmod+0x18>
   8bb1c:	2900      	cmp	r1, #0
   8bb1e:	bf08      	it	eq
   8bb20:	2800      	cmpeq	r0, #0
   8bb22:	bf1c      	itt	ne
   8bb24:	f04f 31ff 	movne.w	r1, #4294967295
   8bb28:	f04f 30ff 	movne.w	r0, #4294967295
   8bb2c:	f000 b976 	b.w	8be1c <__aeabi_idiv0>
   8bb30:	f1ad 0c08 	sub.w	ip, sp, #8
   8bb34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8bb38:	f000 f806 	bl	8bb48 <__udivmoddi4>
   8bb3c:	f8dd e004 	ldr.w	lr, [sp, #4]
   8bb40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8bb44:	b004      	add	sp, #16
   8bb46:	4770      	bx	lr

0008bb48 <__udivmoddi4>:
   8bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bb4c:	9e08      	ldr	r6, [sp, #32]
   8bb4e:	460d      	mov	r5, r1
   8bb50:	4604      	mov	r4, r0
   8bb52:	4688      	mov	r8, r1
   8bb54:	2b00      	cmp	r3, #0
   8bb56:	d14d      	bne.n	8bbf4 <__udivmoddi4+0xac>
   8bb58:	428a      	cmp	r2, r1
   8bb5a:	4694      	mov	ip, r2
   8bb5c:	d968      	bls.n	8bc30 <__udivmoddi4+0xe8>
   8bb5e:	fab2 f282 	clz	r2, r2
   8bb62:	b152      	cbz	r2, 8bb7a <__udivmoddi4+0x32>
   8bb64:	fa01 f302 	lsl.w	r3, r1, r2
   8bb68:	f1c2 0120 	rsb	r1, r2, #32
   8bb6c:	fa20 f101 	lsr.w	r1, r0, r1
   8bb70:	fa0c fc02 	lsl.w	ip, ip, r2
   8bb74:	ea41 0803 	orr.w	r8, r1, r3
   8bb78:	4094      	lsls	r4, r2
   8bb7a:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8bb7e:	fbb8 f7f1 	udiv	r7, r8, r1
   8bb82:	fa1f fe8c 	uxth.w	lr, ip
   8bb86:	fb01 8817 	mls	r8, r1, r7, r8
   8bb8a:	fb07 f00e 	mul.w	r0, r7, lr
   8bb8e:	0c23      	lsrs	r3, r4, #16
   8bb90:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8bb94:	4298      	cmp	r0, r3
   8bb96:	d90a      	bls.n	8bbae <__udivmoddi4+0x66>
   8bb98:	eb1c 0303 	adds.w	r3, ip, r3
   8bb9c:	f107 35ff 	add.w	r5, r7, #4294967295
   8bba0:	f080 811e 	bcs.w	8bde0 <__udivmoddi4+0x298>
   8bba4:	4298      	cmp	r0, r3
   8bba6:	f240 811b 	bls.w	8bde0 <__udivmoddi4+0x298>
   8bbaa:	3f02      	subs	r7, #2
   8bbac:	4463      	add	r3, ip
   8bbae:	1a1b      	subs	r3, r3, r0
   8bbb0:	fbb3 f0f1 	udiv	r0, r3, r1
   8bbb4:	fb01 3310 	mls	r3, r1, r0, r3
   8bbb8:	fb00 fe0e 	mul.w	lr, r0, lr
   8bbbc:	b2a4      	uxth	r4, r4
   8bbbe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8bbc2:	45a6      	cmp	lr, r4
   8bbc4:	d90a      	bls.n	8bbdc <__udivmoddi4+0x94>
   8bbc6:	eb1c 0404 	adds.w	r4, ip, r4
   8bbca:	f100 33ff 	add.w	r3, r0, #4294967295
   8bbce:	f080 8109 	bcs.w	8bde4 <__udivmoddi4+0x29c>
   8bbd2:	45a6      	cmp	lr, r4
   8bbd4:	f240 8106 	bls.w	8bde4 <__udivmoddi4+0x29c>
   8bbd8:	4464      	add	r4, ip
   8bbda:	3802      	subs	r0, #2
   8bbdc:	2100      	movs	r1, #0
   8bbde:	eba4 040e 	sub.w	r4, r4, lr
   8bbe2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8bbe6:	b11e      	cbz	r6, 8bbf0 <__udivmoddi4+0xa8>
   8bbe8:	2300      	movs	r3, #0
   8bbea:	40d4      	lsrs	r4, r2
   8bbec:	e9c6 4300 	strd	r4, r3, [r6]
   8bbf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bbf4:	428b      	cmp	r3, r1
   8bbf6:	d908      	bls.n	8bc0a <__udivmoddi4+0xc2>
   8bbf8:	2e00      	cmp	r6, #0
   8bbfa:	f000 80ee 	beq.w	8bdda <__udivmoddi4+0x292>
   8bbfe:	2100      	movs	r1, #0
   8bc00:	e9c6 0500 	strd	r0, r5, [r6]
   8bc04:	4608      	mov	r0, r1
   8bc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bc0a:	fab3 f183 	clz	r1, r3
   8bc0e:	2900      	cmp	r1, #0
   8bc10:	d14a      	bne.n	8bca8 <__udivmoddi4+0x160>
   8bc12:	42ab      	cmp	r3, r5
   8bc14:	d302      	bcc.n	8bc1c <__udivmoddi4+0xd4>
   8bc16:	4282      	cmp	r2, r0
   8bc18:	f200 80fc 	bhi.w	8be14 <__udivmoddi4+0x2cc>
   8bc1c:	1a84      	subs	r4, r0, r2
   8bc1e:	eb65 0303 	sbc.w	r3, r5, r3
   8bc22:	2001      	movs	r0, #1
   8bc24:	4698      	mov	r8, r3
   8bc26:	2e00      	cmp	r6, #0
   8bc28:	d0e2      	beq.n	8bbf0 <__udivmoddi4+0xa8>
   8bc2a:	e9c6 4800 	strd	r4, r8, [r6]
   8bc2e:	e7df      	b.n	8bbf0 <__udivmoddi4+0xa8>
   8bc30:	b902      	cbnz	r2, 8bc34 <__udivmoddi4+0xec>
   8bc32:	deff      	udf	#255	; 0xff
   8bc34:	fab2 f282 	clz	r2, r2
   8bc38:	2a00      	cmp	r2, #0
   8bc3a:	f040 8091 	bne.w	8bd60 <__udivmoddi4+0x218>
   8bc3e:	eba1 000c 	sub.w	r0, r1, ip
   8bc42:	2101      	movs	r1, #1
   8bc44:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8bc48:	fa1f fe8c 	uxth.w	lr, ip
   8bc4c:	fbb0 f3f7 	udiv	r3, r0, r7
   8bc50:	fb07 0013 	mls	r0, r7, r3, r0
   8bc54:	0c25      	lsrs	r5, r4, #16
   8bc56:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8bc5a:	fb0e f003 	mul.w	r0, lr, r3
   8bc5e:	42a8      	cmp	r0, r5
   8bc60:	d908      	bls.n	8bc74 <__udivmoddi4+0x12c>
   8bc62:	eb1c 0505 	adds.w	r5, ip, r5
   8bc66:	f103 38ff 	add.w	r8, r3, #4294967295
   8bc6a:	d202      	bcs.n	8bc72 <__udivmoddi4+0x12a>
   8bc6c:	42a8      	cmp	r0, r5
   8bc6e:	f200 80ce 	bhi.w	8be0e <__udivmoddi4+0x2c6>
   8bc72:	4643      	mov	r3, r8
   8bc74:	1a2d      	subs	r5, r5, r0
   8bc76:	fbb5 f0f7 	udiv	r0, r5, r7
   8bc7a:	fb07 5510 	mls	r5, r7, r0, r5
   8bc7e:	fb0e fe00 	mul.w	lr, lr, r0
   8bc82:	b2a4      	uxth	r4, r4
   8bc84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8bc88:	45a6      	cmp	lr, r4
   8bc8a:	d908      	bls.n	8bc9e <__udivmoddi4+0x156>
   8bc8c:	eb1c 0404 	adds.w	r4, ip, r4
   8bc90:	f100 35ff 	add.w	r5, r0, #4294967295
   8bc94:	d202      	bcs.n	8bc9c <__udivmoddi4+0x154>
   8bc96:	45a6      	cmp	lr, r4
   8bc98:	f200 80b6 	bhi.w	8be08 <__udivmoddi4+0x2c0>
   8bc9c:	4628      	mov	r0, r5
   8bc9e:	eba4 040e 	sub.w	r4, r4, lr
   8bca2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8bca6:	e79e      	b.n	8bbe6 <__udivmoddi4+0x9e>
   8bca8:	f1c1 0720 	rsb	r7, r1, #32
   8bcac:	408b      	lsls	r3, r1
   8bcae:	fa22 fc07 	lsr.w	ip, r2, r7
   8bcb2:	ea4c 0c03 	orr.w	ip, ip, r3
   8bcb6:	fa25 fa07 	lsr.w	sl, r5, r7
   8bcba:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8bcbe:	fbba f8f9 	udiv	r8, sl, r9
   8bcc2:	fa20 f307 	lsr.w	r3, r0, r7
   8bcc6:	fb09 aa18 	mls	sl, r9, r8, sl
   8bcca:	408d      	lsls	r5, r1
   8bccc:	fa1f fe8c 	uxth.w	lr, ip
   8bcd0:	431d      	orrs	r5, r3
   8bcd2:	fa00 f301 	lsl.w	r3, r0, r1
   8bcd6:	fb08 f00e 	mul.w	r0, r8, lr
   8bcda:	0c2c      	lsrs	r4, r5, #16
   8bcdc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8bce0:	42a0      	cmp	r0, r4
   8bce2:	fa02 f201 	lsl.w	r2, r2, r1
   8bce6:	d90b      	bls.n	8bd00 <__udivmoddi4+0x1b8>
   8bce8:	eb1c 0404 	adds.w	r4, ip, r4
   8bcec:	f108 3aff 	add.w	sl, r8, #4294967295
   8bcf0:	f080 8088 	bcs.w	8be04 <__udivmoddi4+0x2bc>
   8bcf4:	42a0      	cmp	r0, r4
   8bcf6:	f240 8085 	bls.w	8be04 <__udivmoddi4+0x2bc>
   8bcfa:	f1a8 0802 	sub.w	r8, r8, #2
   8bcfe:	4464      	add	r4, ip
   8bd00:	1a24      	subs	r4, r4, r0
   8bd02:	fbb4 f0f9 	udiv	r0, r4, r9
   8bd06:	fb09 4410 	mls	r4, r9, r0, r4
   8bd0a:	fb00 fe0e 	mul.w	lr, r0, lr
   8bd0e:	b2ad      	uxth	r5, r5
   8bd10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8bd14:	45a6      	cmp	lr, r4
   8bd16:	d908      	bls.n	8bd2a <__udivmoddi4+0x1e2>
   8bd18:	eb1c 0404 	adds.w	r4, ip, r4
   8bd1c:	f100 35ff 	add.w	r5, r0, #4294967295
   8bd20:	d26c      	bcs.n	8bdfc <__udivmoddi4+0x2b4>
   8bd22:	45a6      	cmp	lr, r4
   8bd24:	d96a      	bls.n	8bdfc <__udivmoddi4+0x2b4>
   8bd26:	3802      	subs	r0, #2
   8bd28:	4464      	add	r4, ip
   8bd2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8bd2e:	fba0 9502 	umull	r9, r5, r0, r2
   8bd32:	eba4 040e 	sub.w	r4, r4, lr
   8bd36:	42ac      	cmp	r4, r5
   8bd38:	46c8      	mov	r8, r9
   8bd3a:	46ae      	mov	lr, r5
   8bd3c:	d356      	bcc.n	8bdec <__udivmoddi4+0x2a4>
   8bd3e:	d053      	beq.n	8bde8 <__udivmoddi4+0x2a0>
   8bd40:	2e00      	cmp	r6, #0
   8bd42:	d069      	beq.n	8be18 <__udivmoddi4+0x2d0>
   8bd44:	ebb3 0208 	subs.w	r2, r3, r8
   8bd48:	eb64 040e 	sbc.w	r4, r4, lr
   8bd4c:	fa22 f301 	lsr.w	r3, r2, r1
   8bd50:	fa04 f707 	lsl.w	r7, r4, r7
   8bd54:	431f      	orrs	r7, r3
   8bd56:	40cc      	lsrs	r4, r1
   8bd58:	e9c6 7400 	strd	r7, r4, [r6]
   8bd5c:	2100      	movs	r1, #0
   8bd5e:	e747      	b.n	8bbf0 <__udivmoddi4+0xa8>
   8bd60:	fa0c fc02 	lsl.w	ip, ip, r2
   8bd64:	f1c2 0120 	rsb	r1, r2, #32
   8bd68:	fa25 f301 	lsr.w	r3, r5, r1
   8bd6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8bd70:	fa20 f101 	lsr.w	r1, r0, r1
   8bd74:	4095      	lsls	r5, r2
   8bd76:	430d      	orrs	r5, r1
   8bd78:	fbb3 f1f7 	udiv	r1, r3, r7
   8bd7c:	fb07 3311 	mls	r3, r7, r1, r3
   8bd80:	fa1f fe8c 	uxth.w	lr, ip
   8bd84:	0c28      	lsrs	r0, r5, #16
   8bd86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8bd8a:	fb01 f30e 	mul.w	r3, r1, lr
   8bd8e:	4283      	cmp	r3, r0
   8bd90:	fa04 f402 	lsl.w	r4, r4, r2
   8bd94:	d908      	bls.n	8bda8 <__udivmoddi4+0x260>
   8bd96:	eb1c 0000 	adds.w	r0, ip, r0
   8bd9a:	f101 38ff 	add.w	r8, r1, #4294967295
   8bd9e:	d22f      	bcs.n	8be00 <__udivmoddi4+0x2b8>
   8bda0:	4283      	cmp	r3, r0
   8bda2:	d92d      	bls.n	8be00 <__udivmoddi4+0x2b8>
   8bda4:	3902      	subs	r1, #2
   8bda6:	4460      	add	r0, ip
   8bda8:	1ac0      	subs	r0, r0, r3
   8bdaa:	fbb0 f3f7 	udiv	r3, r0, r7
   8bdae:	fb07 0013 	mls	r0, r7, r3, r0
   8bdb2:	b2ad      	uxth	r5, r5
   8bdb4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8bdb8:	fb03 f00e 	mul.w	r0, r3, lr
   8bdbc:	42a8      	cmp	r0, r5
   8bdbe:	d908      	bls.n	8bdd2 <__udivmoddi4+0x28a>
   8bdc0:	eb1c 0505 	adds.w	r5, ip, r5
   8bdc4:	f103 38ff 	add.w	r8, r3, #4294967295
   8bdc8:	d216      	bcs.n	8bdf8 <__udivmoddi4+0x2b0>
   8bdca:	42a8      	cmp	r0, r5
   8bdcc:	d914      	bls.n	8bdf8 <__udivmoddi4+0x2b0>
   8bdce:	3b02      	subs	r3, #2
   8bdd0:	4465      	add	r5, ip
   8bdd2:	1a28      	subs	r0, r5, r0
   8bdd4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8bdd8:	e738      	b.n	8bc4c <__udivmoddi4+0x104>
   8bdda:	4631      	mov	r1, r6
   8bddc:	4630      	mov	r0, r6
   8bdde:	e707      	b.n	8bbf0 <__udivmoddi4+0xa8>
   8bde0:	462f      	mov	r7, r5
   8bde2:	e6e4      	b.n	8bbae <__udivmoddi4+0x66>
   8bde4:	4618      	mov	r0, r3
   8bde6:	e6f9      	b.n	8bbdc <__udivmoddi4+0x94>
   8bde8:	454b      	cmp	r3, r9
   8bdea:	d2a9      	bcs.n	8bd40 <__udivmoddi4+0x1f8>
   8bdec:	ebb9 0802 	subs.w	r8, r9, r2
   8bdf0:	eb65 0e0c 	sbc.w	lr, r5, ip
   8bdf4:	3801      	subs	r0, #1
   8bdf6:	e7a3      	b.n	8bd40 <__udivmoddi4+0x1f8>
   8bdf8:	4643      	mov	r3, r8
   8bdfa:	e7ea      	b.n	8bdd2 <__udivmoddi4+0x28a>
   8bdfc:	4628      	mov	r0, r5
   8bdfe:	e794      	b.n	8bd2a <__udivmoddi4+0x1e2>
   8be00:	4641      	mov	r1, r8
   8be02:	e7d1      	b.n	8bda8 <__udivmoddi4+0x260>
   8be04:	46d0      	mov	r8, sl
   8be06:	e77b      	b.n	8bd00 <__udivmoddi4+0x1b8>
   8be08:	4464      	add	r4, ip
   8be0a:	3802      	subs	r0, #2
   8be0c:	e747      	b.n	8bc9e <__udivmoddi4+0x156>
   8be0e:	3b02      	subs	r3, #2
   8be10:	4465      	add	r5, ip
   8be12:	e72f      	b.n	8bc74 <__udivmoddi4+0x12c>
   8be14:	4608      	mov	r0, r1
   8be16:	e706      	b.n	8bc26 <__udivmoddi4+0xde>
   8be18:	4631      	mov	r1, r6
   8be1a:	e6e9      	b.n	8bbf0 <__udivmoddi4+0xa8>

0008be1c <__aeabi_idiv0>:
   8be1c:	4770      	bx	lr
   8be1e:	bf00      	nop
   8be20:	78383025 	.word	0x78383025
   8be24:	00000000 	.word	0x00000000
   8be28:	00000000 	.word	0x00000000

0008be2c <CSWTCH.10>:
   8be2c:	00010101 00000100                       ........

0008be34 <CSWTCH.5>:
   8be34:	30682040 18322a22                       @ h0"*2.

0008be3c <CSWTCH.7>:
   8be3c:	4c352c24 00001a08                       $,5L....

0008be44 <CSWTCH.8>:
   8be44:	23332323 00002323                       ##3###..

0008be4c <CSWTCH.9>:
   8be4c:	26362626 00002626                       &&6&&&..

0008be54 <BUILD_DATE>:
   8be54:	206c754a 32203232 00323230              Jul 22 2022.

0008be60 <BUILD_TIME>:
   8be60:	303a3731 35333a30 00000000 00000000     17:00:35........
   8be70:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8be80:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8be90:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8bea0:	0000007e                                ~...

0008bea4 <LED_DESCRIPTOR>:
   8bea4:	0000004f 00000001 00000050 00000001     O.......P.......
   8beb4:	00000051 00000001 74697845 20676e69     Q.......Exiting 
   8bec4:	68746977 61747320 20737574 0a2e6425     with status %d..
   8bed4:	00000000                                ....

0008bed8 <_global_impure_ptr>:
   8bed8:	200003c8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8bee8:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8bef8:	66656463 00000000 33323130 37363534     cdef....01234567
   8bf08:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8bf18:	0000296c 00000030                       l)..0...

0008bf20 <blanks.1>:
   8bf20:	20202020 20202020 20202020 20202020                     

0008bf30 <zeroes.0>:
   8bf30:	30303030 30303030 30303030 30303030     0000000000000000

0008bf40 <blanks.1>:
   8bf40:	20202020 20202020 20202020 20202020                     

0008bf50 <zeroes.0>:
   8bf50:	30303030 30303030 30303030 30303030     0000000000000000
   8bf60:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8bf70:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8bf80:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8bf90:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8bfa0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8bfb0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8bfc0:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8bfd0:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8bfe0:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8bff0:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8c000:	00000063 00000043 49534f50 00000058     c...C...POSIX...
   8c010:	0000002e 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8c020:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8c030:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8c040:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8c050:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8c060:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8c070:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8c080:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8c090:	0000632e 00000000                       .c......

0008c098 <__mprec_bigtens>:
   8c098:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8c0a8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8c0b8:	7f73bf3c 75154fdd                       <.s..O.u

0008c0c0 <__mprec_tens>:
   8c0c0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8c0d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8c0e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8c0f0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8c100:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8c110:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8c120:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8c130:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8c140:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8c150:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8c160:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8c170:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8c180:	79d99db4 44ea7843                       ...yCx.D

0008c188 <p05.0>:
   8c188:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8c198:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8c1a8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8c1b8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8c1c8:	2520656e 25732564 00000a73              ne %d%s%s...

0008c1d4 <_ctype_>:
   8c1d4:	20202000 20202020 28282020 20282828     .         ((((( 
   8c1e4:	20202020 20202020 20202020 20202020                     
   8c1f4:	10108820 10101010 10101010 10101010      ...............
   8c204:	04040410 04040404 10040404 10101010     ................
   8c214:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8c224:	01010101 01010101 01010101 10101010     ................
   8c234:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8c244:	02020202 02020202 02020202 10101010     ................
   8c254:	00000020 00000000 00000000 00000000      ...............
   8c264:	00000000 00000000 00000000 00000000     ................
   8c274:	00000000 00000000 00000000 00000000     ................
   8c284:	00000000 00000000 00000000 00000000     ................
   8c294:	00000000 00000000 00000000 00000000     ................
   8c2a4:	00000000 00000000 00000000 00000000     ................
   8c2b4:	00000000 00000000 00000000 00000000     ................
   8c2c4:	00000000 00000000 00000000 00000000     ................
   8c2d4:	00000000                                ....

0008c2d8 <_init>:
   8c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c2da:	bf00      	nop
   8c2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c2de:	bc08      	pop	{r3}
   8c2e0:	469e      	mov	lr, r3
   8c2e2:	4770      	bx	lr

0008c2e4 <__init_array_start>:
   8c2e4:	00087d6d 	.word	0x00087d6d

0008c2e8 <__frame_dummy_init_array_entry>:
   8c2e8:	000800e1                                ....

0008c2ec <_fini>:
   8c2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c2ee:	bf00      	nop
   8c2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c2f2:	bc08      	pop	{r3}
   8c2f4:	469e      	mov	lr, r3
   8c2f6:	4770      	bx	lr

0008c2f8 <__do_global_dtors_aux_fini_array_entry>:
   8c2f8:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b510      	push	{r4, lr}
20000002:	b082      	sub	sp, #8
20000004:	9c04      	ldr	r4, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b393      	cbz	r3, 2000006e <efc_perform_read_sequence+0x6e>
20000008:	4684      	mov	ip, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6800      	ldr	r0, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000000c:	b2c9      	uxtb	r1, r1
2000000e:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20000012:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20000016:	f8cc 0000 	str.w	r0, [ip]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	f8cc 1004 	str.w	r1, [ip, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001e:	f8dc 1008 	ldr.w	r1, [ip, #8]
20000022:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000024:	9801      	ldr	r0, [sp, #4]
20000026:	f010 0001 	ands.w	r0, r0, #1
2000002a:	d1f8      	bne.n	2000001e <efc_perform_read_sequence+0x1e>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000002c:	b164      	cbz	r4, 20000048 <efc_perform_read_sequence+0x48>
2000002e:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
20000032:	f5c3 2400 	rsb	r4, r3, #524288	; 0x80000
20000036:	f1ae 0e04 	sub.w	lr, lr, #4
2000003a:	3b04      	subs	r3, #4
2000003c:	3404      	adds	r4, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000003e:	58e1      	ldr	r1, [r4, r3]
20000040:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000044:	4573      	cmp	r3, lr
20000046:	d1fa      	bne.n	2000003e <efc_perform_read_sequence+0x3e>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000048:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000004a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000004e:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000052:	f8dc 3008 	ldr.w	r3, [ip, #8]
20000056:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000058:	9b01      	ldr	r3, [sp, #4]
2000005a:	07db      	lsls	r3, r3, #31
2000005c:	d5f9      	bpl.n	20000052 <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000005e:	f8dc 3000 	ldr.w	r3, [ip]
20000062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000066:	f8cc 3000 	str.w	r3, [ip]

	return EFC_RC_OK;
}
2000006a:	b002      	add	sp, #8
2000006c:	bd10      	pop	{r4, pc}
		return EFC_RC_INVALID;
2000006e:	2002      	movs	r0, #2
}
20000070:	b002      	add	sp, #8
20000072:	bd10      	pop	{r4, pc}

20000074 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000074:	6001      	str	r1, [r0, #0]
}
20000076:	4770      	bx	lr

20000078 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000078:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000007a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2000007c:	6883      	ldr	r3, [r0, #8]
2000007e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	9b01      	ldr	r3, [sp, #4]
20000082:	07db      	lsls	r3, r3, #31
20000084:	d5fa      	bpl.n	2000007c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000086:	9801      	ldr	r0, [sp, #4]
}
20000088:	f000 0006 	and.w	r0, r0, #6
2000008c:	b002      	add	sp, #8
2000008e:	4770      	bx	lr

20000090 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000090:	f3bf 8f5f 	dmb	sy
20000094:	3801      	subs	r0, #1
20000096:	d1fb      	bne.n	20000090 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000098:	4770      	bx	lr
2000009a:	0000      	movs	r0, r0

2000009c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f44f 6380 	mov.w	r3, #1024	; 0x400
200000a0:	4819      	ldr	r0, [pc, #100]	; (20000108 <SystemInit+0x6c>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000a2:	491a      	ldr	r1, [pc, #104]	; (2000010c <SystemInit+0x70>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a4:	4a1a      	ldr	r2, [pc, #104]	; (20000110 <SystemInit+0x74>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000a6:	6003      	str	r3, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000a8:	600b      	str	r3, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000aa:	6a13      	ldr	r3, [r2, #32]
200000ac:	01db      	lsls	r3, r3, #7
200000ae:	d404      	bmi.n	200000ba <SystemInit+0x1e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b0:	4b18      	ldr	r3, [pc, #96]	; (20000114 <SystemInit+0x78>)
200000b2:	6213      	str	r3, [r2, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000b6:	07d8      	lsls	r0, r3, #31
200000b8:	d5fc      	bpl.n	200000b4 <SystemInit+0x18>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ba:	4a15      	ldr	r2, [pc, #84]	; (20000110 <SystemInit+0x74>)
200000bc:	4b16      	ldr	r3, [pc, #88]	; (20000118 <SystemInit+0x7c>)
200000be:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000c2:	03d9      	lsls	r1, r3, #15
200000c4:	d5fc      	bpl.n	200000c0 <SystemInit+0x24>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000c8:	4811      	ldr	r0, [pc, #68]	; (20000110 <SystemInit+0x74>)
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ca:	f023 0303 	bic.w	r3, r3, #3
200000ce:	f043 0301 	orr.w	r3, r3, #1
200000d2:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
200000d6:	071b      	lsls	r3, r3, #28
200000d8:	d5fc      	bpl.n	200000d4 <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000da:	4b10      	ldr	r3, [pc, #64]	; (2000011c <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000dc:	490c      	ldr	r1, [pc, #48]	; (20000110 <SystemInit+0x74>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000de:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000e0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
200000e2:	0798      	lsls	r0, r3, #30
200000e4:	d5fc      	bpl.n	200000e0 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000e6:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <SystemInit+0x74>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000ea:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000ee:	0719      	lsls	r1, r3, #28
200000f0:	d5fc      	bpl.n	200000ec <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
200000f2:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000f4:	4906      	ldr	r1, [pc, #24]	; (20000110 <SystemInit+0x74>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
200000f6:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000f8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
200000fa:	071b      	lsls	r3, r3, #28
200000fc:	d5fc      	bpl.n	200000f8 <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200000fe:	4b08      	ldr	r3, [pc, #32]	; (20000120 <SystemInit+0x84>)
20000100:	4a08      	ldr	r2, [pc, #32]	; (20000124 <SystemInit+0x88>)
20000102:	601a      	str	r2, [r3, #0]
}
20000104:	4770      	bx	lr
20000106:	bf00      	nop
20000108:	400e0800 	.word	0x400e0800
2000010c:	400e0a00 	.word	0x400e0a00
20000110:	400e0400 	.word	0x400e0400
20000114:	00370809 	.word	0x00370809
20000118:	01370809 	.word	0x01370809
2000011c:	200f3f01 	.word	0x200f3f01
20000120:	20000330 	.word	0x20000330
20000124:	05b8d800 	.word	0x05b8d800

20000128 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000128:	4b14      	ldr	r3, [pc, #80]	; (2000017c <system_init_flash+0x54>)
2000012a:	4298      	cmp	r0, r3
2000012c:	d205      	bcs.n	2000013a <system_init_flash+0x12>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000012e:	2300      	movs	r3, #0
20000130:	4913      	ldr	r1, [pc, #76]	; (20000180 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000132:	4a14      	ldr	r2, [pc, #80]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000134:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000136:	6013      	str	r3, [r2, #0]
20000138:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000013a:	4b13      	ldr	r3, [pc, #76]	; (20000188 <system_init_flash+0x60>)
2000013c:	4298      	cmp	r0, r3
2000013e:	d206      	bcs.n	2000014e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000140:	f44f 7380 	mov.w	r3, #256	; 0x100
20000144:	490e      	ldr	r1, [pc, #56]	; (20000180 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20000146:	4a0f      	ldr	r2, [pc, #60]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000148:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000014a:	6013      	str	r3, [r2, #0]
2000014c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
2000014e:	4b0f      	ldr	r3, [pc, #60]	; (2000018c <system_init_flash+0x64>)
20000150:	4298      	cmp	r0, r3
20000152:	d806      	bhi.n	20000162 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000154:	f44f 7300 	mov.w	r3, #512	; 0x200
20000158:	4909      	ldr	r1, [pc, #36]	; (20000180 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000015a:	4a0a      	ldr	r2, [pc, #40]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
2000015c:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000162:	4b0b      	ldr	r3, [pc, #44]	; (20000190 <system_init_flash+0x68>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000164:	4906      	ldr	r1, [pc, #24]	; (20000180 <system_init_flash+0x58>)
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000166:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000168:	bf94      	ite	ls
2000016a:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000016e:	f44f 6380 	movhi.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000172:	4a04      	ldr	r2, [pc, #16]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000174:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000176:	6013      	str	r3, [r2, #0]
	}
}
20000178:	4770      	bx	lr
2000017a:	bf00      	nop
2000017c:	016e3600 	.word	0x016e3600
20000180:	400e0800 	.word	0x400e0800
20000184:	400e0a00 	.word	0x400e0a00
20000188:	02625a00 	.word	0x02625a00
2000018c:	044aa1ff 	.word	0x044aa1ff
20000190:	0501bcff 	.word	0x0501bcff

20000194 <usb_serial_number>:
20000194:	30303030 30303030 30303030 44414544     000000000000DEAD
200001a4:	46454542 00000000 00000000 00000000     BEEF............
200001b4:	00000000                                ....

200001b8 <xram>:
200001b8:	60000000                                ...`

200001bc <pin_spi1_cs>:
200001bc:	ffffffff                                ....

200001c0 <pin_spi1_miso>:
200001c0:	ffffffff                                ....

200001c4 <pin_spi1_mosi>:
200001c4:	ffffffff                                ....

200001c8 <pin_spi1_sck>:
200001c8:	ffffffff                                ....

200001cc <XPROG_Param_EEPageSize>:
200001cc:	00000020                                 ...

200001d0 <XPROG_Param_NVMBase>:
200001d0:	010001c0                                ....

200001d4 <XPROG_Param_NVMCMDRegAddr>:
200001d4:	                                         3

200001d5 <XPROG_Param_NVMCSRRegAddr>:
200001d5:	                                         2..

200001d8 <defaultTimeoutTicks>:
200001d8:	000001f4                                ....

200001dc <main_b_vendor_enable>:
200001dc:	                                         ..

200001de <vccint_setting>:
200001de:	                                         ..

200001e0 <MS_BOS_PACKET>:
200001e0:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
200001f0:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
20000200:	00000000                                ....

20000204 <MS_OS_DESC>:
20000204:	0000000a 06030000 0014009e 49570003     ..............WI
20000214:	4253554e 00000000 00000000 00800000     NUSB............
20000224:	00070004 00440028 00760065 00630069     ....(.D.e.v.i.c.
20000234:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
20000244:	00650063 00550047 00440049 004e0000     c.e.G.U.I.D...N.
20000254:	0030007b 00430041 00320045 00330042     {.0.A.C.E.2.B.3.
20000264:	002d0045 00420032 00450033 0032002d     E.-.2.B.3.E.-.2.
20000274:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
20000284:	0034002d 00300033 00300035 00430041     -.4.3.0.5.0.A.C.
20000294:	00320045 00330042 007d0045 00000000     E.2.B.3.E.}.....

200002a4 <udc_string_desc>:
200002a4:	00000300 00000000 00000000 00000000     ................
200002b4:	00000000 00000000 00000000 00000000     ................
200002c4:	00000000 00000000 00000000 00000000     ................
200002d4:	00000000 00000000 00000000 00000000     ................
200002e4:	00000000                                ....

200002e8 <udc_string_desc_languageid>:
200002e8:	04090304                                ....

200002ec <udc_string_manufacturer_name>:
200002ec:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002fc:	636e4920 0000002e                        Inc....

20000304 <udc_string_product_name>:
20000304:	70696843 73696857 65726570 57432072     ChipWhisperer CW
20000314:	00353033                                305.

20000318 <udi_api_vendor>:
20000318:	00084665 00084621 00084635 00084615     eF..!F..5F...F..
20000328:	00000000                                ....

2000032c <g_interrupt_enabled>:
2000032c:	00000001                                ....

20000330 <SystemCoreClock>:
20000330:	003d0900                                ..=.

20000334 <udc_config>:
20000334:	2000039c 20000354 2000039c 200003b0     ... T.. ... ... 
20000344:	2000034c 00000000                       L.. ....

2000034c <udc_config_hs>:
2000034c:	2000037c 200003bc                       |.. ... 

20000354 <udc_config_lsfs>:
20000354:	2000035c 200003bc                       \.. ... 

2000035c <udc_desc_fs>:
2000035c:	00200209 80000101 000409fa ffff0200     .. .............
2000036c:	050700ff 00400281 02050700 00004002     ......@......@..

2000037c <udc_desc_hs>:
2000037c:	00200209 80000101 000409fa ffff0200     .. .............
2000038c:	050700ff 02000281 02050700 00020002     ................

2000039c <udc_device_desc>:
2000039c:	02000112 40000000 c3052b3e 02010100     .......@>+......
200003ac:	00000103                                ....

200003b0 <udc_device_qual>:
200003b0:	0200060a 40000000 00000001              .......@....

200003bc <udi_apis>:
200003bc:	20000318                                ... 

200003c0 <_impure_ptr>:
200003c0:	200003c8 00000000                       ... ....

200003c8 <impure_data>:
200003c8:	00000000 200006b4 2000071c 20000784     ....... ... ... 
200003d8:	00000000 00000000 00000000 00000000     ................
200003e8:	00000000 00000000 00000000 00000000     ................
200003f8:	00000000 00000000 00000000 00000000     ................
20000408:	00000000 00000000 00000000 00000000     ................
20000418:	00000000 00000000 00000000 00000000     ................
20000428:	00000000 00000000 00000000 00000000     ................
20000438:	00000000 00000000 00000000 00000000     ................
20000448:	00000000 00000000 00000000 00000000     ................
20000458:	00000000 00000000 00000000 00000000     ................
20000468:	00000000 00000000 00000001 00000000     ................
20000478:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000000 00000000     ................
200004f8:	00000000 00000000 00000000 00000000     ................
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000                       ........

200007f0 <__atexit_recursive_mutex>:
200007f0:	20001934                                4.. 

200007f4 <__global_locale>:
200007f4:	00000043 00000000 00000000 00000000     C...............
20000804:	00000000 00000000 00000000 00000000     ................
20000814:	00000043 00000000 00000000 00000000     C...............
20000824:	00000000 00000000 00000000 00000000     ................
20000834:	00000043 00000000 00000000 00000000     C...............
20000844:	00000000 00000000 00000000 00000000     ................
20000854:	00000043 00000000 00000000 00000000     C...............
20000864:	00000000 00000000 00000000 00000000     ................
20000874:	00000043 00000000 00000000 00000000     C...............
20000884:	00000000 00000000 00000000 00000000     ................
20000894:	00000043 00000000 00000000 00000000     C...............
200008a4:	00000000 00000000 00000000 00000000     ................
200008b4:	00000043 00000000 00000000 00000000     C...............
200008c4:	00000000 00000000 00000000 00000000     ................
200008d4:	0008ae05 00089e0d 00000000 0008c1d4     ................
200008e4:	0008c010 0008bed4 0008bed4 0008bed4     ................
200008f4:	0008bed4 0008bed4 0008bed4 0008bed4     ................
20000904:	0008bed4 0008bed4 ffffffff ffffffff     ................
20000914:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
20000924:	00000000 00000000 00000000 00000000     ................
20000934:	00000000 00000000 53410000 00494943     ..........ASCII.
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	00000000 00000000 00000000              ............

20000960 <__malloc_av_>:
20000960:	00000000 00000000 20000960 20000960     ........`.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58                       X.. X.. 

20000d68 <__malloc_sbrk_base>:
20000d68:	ffffffff                                ....

20000d6c <__malloc_trim_threshold>:
20000d6c:	00020000                                ....
