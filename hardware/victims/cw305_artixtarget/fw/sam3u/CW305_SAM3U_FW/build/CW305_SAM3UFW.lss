
CW305_SAM3UFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c30c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008c30c  0008c30c  0001c30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d58  20000000  0008c314  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000ee4  20000d58  0008d06c  00020d58  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020d58  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020d81  2**0
                  CONTENTS, READONLY
  7 .debug_info   00036d3d  00000000  00000000  00020dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00008b76  00000000  00000000  00057b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000aa17  00000000  00000000  00060680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001330  00000000  00000000  0006b097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000017a8  00000000  00000000  0006c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00012637  00000000  00000000  0006db6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002dbaf  00000000  00000000  000801a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005de6d  00000000  00000000  000add55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  0000415c  00000000  00000000  0010bbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 25 47 08 00 21 47 08 00 21 47 08 00     . . %G..!G..!G..
   80010:	21 47 08 00 21 47 08 00 21 47 08 00 00 00 00 00     !G..!G..!G......
	...
   8002c:	21 47 08 00 21 47 08 00 00 00 00 00 21 47 08 00     !G..!G......!G..
   8003c:	21 47 08 00 21 47 08 00 21 47 08 00 21 47 08 00     !G..!G..!G..!G..
   8004c:	21 47 08 00 21 47 08 00 21 47 08 00 21 47 08 00     !G..!G..!G..!G..
   8005c:	21 47 08 00 21 47 08 00 21 47 08 00 79 2d 08 00     !G..!G..!G..y-..
   8006c:	8d 2d 08 00 a1 2d 08 00 a5 15 08 00 c5 15 08 00     .-...-..........
   8007c:	e5 15 08 00 21 47 08 00 21 47 08 00 21 47 08 00     ....!G..!G..!G..
   8008c:	21 47 08 00 21 47 08 00 21 47 08 00 8d 13 08 00     !G..!G..!G......
   8009c:	21 47 08 00 21 47 08 00 21 47 08 00 21 47 08 00     !G..!G..!G..!G..
   800ac:	21 47 08 00 21 47 08 00 d1 37 08 00 21 47 08 00     !G..!G...7..!G..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000d58 	.word	0x20000d58
   800d8:	00000000 	.word	0x00000000
   800dc:	0008c314 	.word	0x0008c314

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000d5c 	.word	0x20000d5c
   800f8:	0008c314 	.word	0x0008c314

000800fc <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   800fc:	b510      	push	{r4, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   800fe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80102:	204f      	movs	r0, #79	; 0x4f
   80104:	4c0e      	ldr	r4, [pc, #56]	; (80140 <iopins_normal+0x44>)
   80106:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80108:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8010c:	2050      	movs	r0, #80	; 0x50
   8010e:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80110:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80114:	2051      	movs	r0, #81	; 0x51
   80116:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   80118:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8011c:	203f      	movs	r0, #63	; 0x3f
   8011e:	47a0      	blx	r4
	board_power(0);
   80120:	203f      	movs	r0, #63	; 0x3f
   80122:	4b08      	ldr	r3, [pc, #32]	; (80144 <iopins_normal+0x48>)
   80124:	4798      	blx	r3

	//Detect state of switch
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   80126:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8012a:	203e      	movs	r0, #62	; 0x3e
   8012c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8012e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80132:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   80136:	4804      	ldr	r0, [pc, #16]	; (80148 <iopins_normal+0x4c>)
   80138:	4b04      	ldr	r3, [pc, #16]	; (8014c <iopins_normal+0x50>)
   8013a:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   8013c:	bd10      	pop	{r4, pc}
   8013e:	bf00      	nop
   80140:	00082bbd 	.word	0x00082bbd
   80144:	00082ba1 	.word	0x00082ba1
   80148:	400e0c00 	.word	0x400e0c00
   8014c:	00082c8d 	.word	0x00082c8d

00080150 <board_init>:

void board_init(void)
{
   80150:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80152:	4b07      	ldr	r3, [pc, #28]	; (80170 <board_init+0x20>)
   80154:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80158:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8015a:	200a      	movs	r0, #10
   8015c:	4c05      	ldr	r4, [pc, #20]	; (80174 <board_init+0x24>)
   8015e:	47a0      	blx	r4
   80160:	200b      	movs	r0, #11
   80162:	47a0      	blx	r4
   80164:	200c      	movs	r0, #12
   80166:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   80168:	4b03      	ldr	r3, [pc, #12]	; (80178 <board_init+0x28>)
   8016a:	4798      	blx	r3
}
   8016c:	bd10      	pop	{r4, pc}
   8016e:	bf00      	nop
   80170:	400e1250 	.word	0x400e1250
   80174:	00082f1d 	.word	0x00082f1d
   80178:	000800fd 	.word	0x000800fd

0008017c <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   8017c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80180:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   80182:	4e0c      	ldr	r6, [pc, #48]	; (801b4 <LED_Off+0x38>)
   80184:	1d34      	adds	r4, r6, #4
   80186:	361c      	adds	r6, #28
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   80188:	4f0b      	ldr	r7, [pc, #44]	; (801b8 <LED_Off+0x3c>)
				gpio_set_pin_low(led_gpio);
   8018a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 801bc <LED_Off+0x40>
   8018e:	e004      	b.n	8019a <LED_Off+0x1e>
				gpio_set_pin_high(led_gpio);
   80190:	4628      	mov	r0, r5
   80192:	47b8      	blx	r7
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   80194:	3408      	adds	r4, #8
   80196:	42b4      	cmp	r4, r6
   80198:	d009      	beq.n	801ae <LED_Off+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8019a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8019e:	42ab      	cmp	r3, r5
   801a0:	d1f8      	bne.n	80194 <LED_Off+0x18>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   801a2:	6823      	ldr	r3, [r4, #0]
   801a4:	2b01      	cmp	r3, #1
   801a6:	d1f3      	bne.n	80190 <LED_Off+0x14>
				gpio_set_pin_low(led_gpio);
   801a8:	4628      	mov	r0, r5
   801aa:	47c0      	blx	r8
   801ac:	e7f2      	b.n	80194 <LED_Off+0x18>
			}
		}
	}
}
   801ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801b2:	bf00      	nop
   801b4:	0008bdb0 	.word	0x0008bdb0
   801b8:	00082b87 	.word	0x00082b87
   801bc:	00082ba1 	.word	0x00082ba1

000801c0 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   801c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801c4:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   801c6:	4e0c      	ldr	r6, [pc, #48]	; (801f8 <LED_On+0x38>)
   801c8:	1d34      	adds	r4, r6, #4
   801ca:	361c      	adds	r6, #28
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   801cc:	4f0b      	ldr	r7, [pc, #44]	; (801fc <LED_On+0x3c>)
				gpio_set_pin_high(led_gpio);
   801ce:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80200 <LED_On+0x40>
   801d2:	e004      	b.n	801de <LED_On+0x1e>
				gpio_set_pin_low(led_gpio);
   801d4:	4628      	mov	r0, r5
   801d6:	47b8      	blx	r7
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   801d8:	3408      	adds	r4, #8
   801da:	42b4      	cmp	r4, r6
   801dc:	d009      	beq.n	801f2 <LED_On+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   801de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   801e2:	42ab      	cmp	r3, r5
   801e4:	d1f8      	bne.n	801d8 <LED_On+0x18>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   801e6:	6823      	ldr	r3, [r4, #0]
   801e8:	2b01      	cmp	r3, #1
   801ea:	d1f3      	bne.n	801d4 <LED_On+0x14>
				gpio_set_pin_high(led_gpio);
   801ec:	4628      	mov	r0, r5
   801ee:	47c0      	blx	r8
   801f0:	e7f2      	b.n	801d8 <LED_On+0x18>
			}
		}
	}
}
   801f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801f6:	bf00      	nop
   801f8:	0008bdb0 	.word	0x0008bdb0
   801fc:	00082ba1 	.word	0x00082ba1
   80200:	00082b87 	.word	0x00082b87

00080204 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80204:	4b10      	ldr	r3, [pc, #64]	; (80248 <twi_set_speed+0x44>)
   80206:	4299      	cmp	r1, r3
   80208:	d81b      	bhi.n	80242 <twi_set_speed+0x3e>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8020a:	004b      	lsls	r3, r1, #1
   8020c:	fbb2 f2f3 	udiv	r2, r2, r3
   80210:	1f13      	subs	r3, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80212:	2bff      	cmp	r3, #255	; 0xff
   80214:	d913      	bls.n	8023e <twi_set_speed+0x3a>
	uint32_t ckdiv = 0;
   80216:	2200      	movs	r2, #0
		/* Increase clock divider */
		ckdiv++;
   80218:	3201      	adds	r2, #1
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8021a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8021e:	ea4f 0353 	mov.w	r3, r3, lsr #1
   80222:	d301      	bcc.n	80228 <twi_set_speed+0x24>
   80224:	2a07      	cmp	r2, #7
   80226:	d1f7      	bne.n	80218 <twi_set_speed+0x14>
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80228:	0219      	lsls	r1, r3, #8
   8022a:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   8022c:	0412      	lsls	r2, r2, #16
   8022e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80232:	430a      	orrs	r2, r1
   80234:	b2db      	uxtb	r3, r3
   80236:	4313      	orrs	r3, r2
	p_twi->TWI_CWGR =
   80238:	6103      	str	r3, [r0, #16]

	return PASS;
   8023a:	2000      	movs	r0, #0
   8023c:	4770      	bx	lr
	uint32_t ckdiv = 0;
   8023e:	2200      	movs	r2, #0
   80240:	e7f2      	b.n	80228 <twi_set_speed+0x24>
		return FAIL;
   80242:	2001      	movs	r0, #1
}
   80244:	4770      	bx	lr
   80246:	bf00      	nop
   80248:	00061a80 	.word	0x00061a80

0008024c <twi_master_init>:
{
   8024c:	b538      	push	{r3, r4, r5, lr}
   8024e:	4604      	mov	r4, r0
   80250:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   80252:	f04f 33ff 	mov.w	r3, #4294967295
   80256:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   80258:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8025a:	2380      	movs	r3, #128	; 0x80
   8025c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8025e:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80260:	2308      	movs	r3, #8
   80262:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80264:	2320      	movs	r3, #32
   80266:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   80268:	2304      	movs	r3, #4
   8026a:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8026c:	680a      	ldr	r2, [r1, #0]
   8026e:	6849      	ldr	r1, [r1, #4]
   80270:	4b05      	ldr	r3, [pc, #20]	; (80288 <twi_master_init+0x3c>)
   80272:	4798      	blx	r3
   80274:	2801      	cmp	r0, #1
   80276:	bf14      	ite	ne
   80278:	2000      	movne	r0, #0
   8027a:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
   8027c:	7a6b      	ldrb	r3, [r5, #9]
   8027e:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80280:	bf04      	itt	eq
   80282:	2340      	moveq	r3, #64	; 0x40
   80284:	6023      	streq	r3, [r4, #0]
}
   80286:	bd38      	pop	{r3, r4, r5, pc}
   80288:	00080205 	.word	0x00080205

0008028c <twi_master_read>:
{
   8028c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8028e:	4605      	mov	r5, r0
	uint32_t cnt = p_packet->length;
   80290:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
   80292:	2800      	cmp	r0, #0
   80294:	d055      	beq.n	80342 <twi_master_read+0xb6>
	uint8_t *buffer = p_packet->buffer;
   80296:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
   80298:	2600      	movs	r6, #0
   8029a:	606e      	str	r6, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8029c:	7c0b      	ldrb	r3, [r1, #16]
   8029e:	041b      	lsls	r3, r3, #16
   802a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   802a4:	684a      	ldr	r2, [r1, #4]
   802a6:	0212      	lsls	r2, r2, #8
   802a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   802ac:	4313      	orrs	r3, r2
   802ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   802b2:	606b      	str	r3, [r5, #4]
	p_twi->TWI_IADR = 0;
   802b4:	60ee      	str	r6, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   802b6:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
   802b8:	b15a      	cbz	r2, 802d2 <twi_master_read+0x46>
	val = addr[0];
   802ba:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
   802bc:	2a01      	cmp	r2, #1
		val |= addr[1];
   802be:	bfc4      	itt	gt
   802c0:	784e      	ldrbgt	r6, [r1, #1]
   802c2:	ea46 2303 	orrgt.w	r3, r6, r3, lsl #8
	if (len > 2) {
   802c6:	2a02      	cmp	r2, #2
   802c8:	dd04      	ble.n	802d4 <twi_master_read+0x48>
		val |= addr[2];
   802ca:	788a      	ldrb	r2, [r1, #2]
   802cc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   802d0:	e000      	b.n	802d4 <twi_master_read+0x48>
		return 0;
   802d2:	2300      	movs	r3, #0
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   802d4:	60eb      	str	r3, [r5, #12]
	if (cnt == 1) {
   802d6:	2801      	cmp	r0, #1
   802d8:	d00a      	beq.n	802f0 <twi_master_read+0x64>
		p_twi->TWI_CR = TWI_CR_START;
   802da:	2301      	movs	r3, #1
   802dc:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
   802de:	2600      	movs	r6, #0
		stop_sent = 1;
   802e0:	f643 2398 	movw	r3, #15000	; 0x3a98
		timeout = TWI_TIMEOUT;
   802e4:	461f      	mov	r7, r3
		if (!(status & TWI_SR_RXRDY)) {
   802e6:	f04f 0c01 	mov.w	ip, #1
			p_twi->TWI_CR = TWI_CR_STOP;
   802ea:	f04f 0e02 	mov.w	lr, #2
   802ee:	e012      	b.n	80316 <twi_master_read+0x8a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   802f0:	2303      	movs	r3, #3
   802f2:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
   802f4:	2601      	movs	r6, #1
   802f6:	e7f3      	b.n	802e0 <twi_master_read+0x54>
		if (cnt == 1  && !stop_sent) {
   802f8:	b90e      	cbnz	r6, 802fe <twi_master_read+0x72>
			p_twi->TWI_CR = TWI_CR_STOP;
   802fa:	f8c5 e000 	str.w	lr, [r5]
		if (!(status & TWI_SR_RXRDY)) {
   802fe:	f012 0f02 	tst.w	r2, #2
   80302:	d015      	beq.n	80330 <twi_master_read+0xa4>
   80304:	4666      	mov	r6, ip
		*buffer++ = p_twi->TWI_RHR;
   80306:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   80308:	4623      	mov	r3, r4
   8030a:	f803 2b01 	strb.w	r2, [r3], #1
		cnt--;
   8030e:	3801      	subs	r0, #1
		*buffer++ = p_twi->TWI_RHR;
   80310:	461c      	mov	r4, r3
		timeout = TWI_TIMEOUT;
   80312:	463b      	mov	r3, r7
	while (cnt > 0) {
   80314:	b178      	cbz	r0, 80336 <twi_master_read+0xaa>
		status = p_twi->TWI_SR;
   80316:	6a2a      	ldr	r2, [r5, #32]
		if (status & TWI_SR_NACK) {
   80318:	f412 7f80 	tst.w	r2, #256	; 0x100
   8031c:	d113      	bne.n	80346 <twi_master_read+0xba>
		if (!timeout--) {
   8031e:	1e59      	subs	r1, r3, #1
   80320:	b19b      	cbz	r3, 8034a <twi_master_read+0xbe>
		if (cnt == 1  && !stop_sent) {
   80322:	2801      	cmp	r0, #1
   80324:	d0e8      	beq.n	802f8 <twi_master_read+0x6c>
		if (!(status & TWI_SR_RXRDY)) {
   80326:	f012 0f02 	tst.w	r2, #2
   8032a:	d1ec      	bne.n	80306 <twi_master_read+0x7a>
		if (!timeout--) {
   8032c:	460b      	mov	r3, r1
   8032e:	e7f1      	b.n	80314 <twi_master_read+0x88>
   80330:	460b      	mov	r3, r1
		if (!(status & TWI_SR_RXRDY)) {
   80332:	4666      	mov	r6, ip
   80334:	e7ef      	b.n	80316 <twi_master_read+0x8a>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80336:	6a2b      	ldr	r3, [r5, #32]
   80338:	f013 0f01 	tst.w	r3, #1
   8033c:	d0fb      	beq.n	80336 <twi_master_read+0xaa>
	p_twi->TWI_SR;
   8033e:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
   80340:	e000      	b.n	80344 <twi_master_read+0xb8>
		return TWI_INVALID_ARGUMENT;
   80342:	2001      	movs	r0, #1
}
   80344:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
   80346:	2005      	movs	r0, #5
   80348:	e7fc      	b.n	80344 <twi_master_read+0xb8>
			return TWI_ERROR_TIMEOUT;
   8034a:	2009      	movs	r0, #9
   8034c:	e7fa      	b.n	80344 <twi_master_read+0xb8>

0008034e <twi_master_write>:
	uint32_t cnt = p_packet->length;
   8034e:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
   80350:	2a00      	cmp	r2, #0
   80352:	d03b      	beq.n	803cc <twi_master_write+0x7e>
{
   80354:	b470      	push	{r4, r5, r6}
   80356:	4603      	mov	r3, r0
	uint8_t *buffer = p_packet->buffer;
   80358:	6888      	ldr	r0, [r1, #8]
	p_twi->TWI_MMR = 0;
   8035a:	2600      	movs	r6, #0
   8035c:	605e      	str	r6, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8035e:	7c0c      	ldrb	r4, [r1, #16]
   80360:	0424      	lsls	r4, r4, #16
   80362:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80366:	684d      	ldr	r5, [r1, #4]
   80368:	022d      	lsls	r5, r5, #8
   8036a:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8036e:	432c      	orrs	r4, r5
   80370:	605c      	str	r4, [r3, #4]
	p_twi->TWI_IADR = 0;
   80372:	60de      	str	r6, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80374:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
   80376:	b15d      	cbz	r5, 80390 <twi_master_write+0x42>
	val = addr[0];
   80378:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
   8037a:	2d01      	cmp	r5, #1
		val |= addr[1];
   8037c:	bfc4      	itt	gt
   8037e:	784e      	ldrbgt	r6, [r1, #1]
   80380:	ea46 2404 	orrgt.w	r4, r6, r4, lsl #8
	if (len > 2) {
   80384:	2d02      	cmp	r5, #2
   80386:	dd04      	ble.n	80392 <twi_master_write+0x44>
		val |= addr[2];
   80388:	7889      	ldrb	r1, [r1, #2]
   8038a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   8038e:	e000      	b.n	80392 <twi_master_write+0x44>
		return 0;
   80390:	2400      	movs	r4, #0
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80392:	60dc      	str	r4, [r3, #12]
	while (cnt > 0) {
   80394:	1881      	adds	r1, r0, r2
   80396:	4281      	cmp	r1, r0
   80398:	d00a      	beq.n	803b0 <twi_master_write+0x62>
		status = p_twi->TWI_SR;
   8039a:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   8039c:	f412 7f80 	tst.w	r2, #256	; 0x100
   803a0:	d116      	bne.n	803d0 <twi_master_write+0x82>
		if (!(status & TWI_SR_TXRDY)) {
   803a2:	f012 0f04 	tst.w	r2, #4
		p_twi->TWI_THR = *buffer++;
   803a6:	bf1c      	itt	ne
   803a8:	f810 2b01 	ldrbne.w	r2, [r0], #1
   803ac:	635a      	strne	r2, [r3, #52]	; 0x34
		cnt--;
   803ae:	e7f2      	b.n	80396 <twi_master_write+0x48>
		status = p_twi->TWI_SR;
   803b0:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   803b2:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   803b6:	d10e      	bne.n	803d6 <twi_master_write+0x88>
		if (status & TWI_SR_TXRDY) {
   803b8:	f012 0f04 	tst.w	r2, #4
   803bc:	d0f8      	beq.n	803b0 <twi_master_write+0x62>
	p_twi->TWI_CR = TWI_CR_STOP;
   803be:	2202      	movs	r2, #2
   803c0:	601a      	str	r2, [r3, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   803c2:	6a1a      	ldr	r2, [r3, #32]
   803c4:	f012 0f01 	tst.w	r2, #1
   803c8:	d0fb      	beq.n	803c2 <twi_master_write+0x74>
   803ca:	e002      	b.n	803d2 <twi_master_write+0x84>
		return TWI_INVALID_ARGUMENT;
   803cc:	2001      	movs	r0, #1
}
   803ce:	4770      	bx	lr
			return TWI_RECEIVE_NACK;
   803d0:	2005      	movs	r0, #5
}
   803d2:	bc70      	pop	{r4, r5, r6}
   803d4:	4770      	bx	lr
			return TWI_RECEIVE_NACK;
   803d6:	2005      	movs	r0, #5
   803d8:	e7fb      	b.n	803d2 <twi_master_write+0x84>
	...

000803dc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   803dc:	4b0a      	ldr	r3, [pc, #40]	; (80408 <usart_reset+0x2c>)
   803de:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   803e2:	2300      	movs	r3, #0
   803e4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   803e6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   803e8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   803ea:	2388      	movs	r3, #136	; 0x88
   803ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   803ee:	2324      	movs	r3, #36	; 0x24
   803f0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   803f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   803f6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   803f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   803fc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   803fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   80402:	6003      	str	r3, [r0, #0]
}
   80404:	4770      	bx	lr
   80406:	bf00      	nop
   80408:	55534100 	.word	0x55534100

0008040c <usart_init_sync_master>:
{
   8040c:	b570      	push	{r4, r5, r6, lr}
   8040e:	4606      	mov	r6, r0
   80410:	460d      	mov	r5, r1
   80412:	4614      	mov	r4, r2
	usart_reset(p_usart);
   80414:	4b15      	ldr	r3, [pc, #84]	; (8046c <usart_init_sync_master+0x60>)
   80416:	4798      	blx	r3
	ul_reg_val = 0;
   80418:	4b15      	ldr	r3, [pc, #84]	; (80470 <usart_init_sync_master+0x64>)
   8041a:	2200      	movs	r2, #0
   8041c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   8041e:	b305      	cbz	r5, 80462 <usart_init_sync_master+0x56>
   80420:	682b      	ldr	r3, [r5, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   80422:	eb04 0253 	add.w	r2, r4, r3, lsr #1
   80426:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8042a:	1e51      	subs	r1, r2, #1
   8042c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   80430:	4299      	cmp	r1, r3
   80432:	d818      	bhi.n	80466 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   80434:	6232      	str	r2, [r6, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   80436:	6873      	ldr	r3, [r6, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   80438:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   8043c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   80440:	6073      	str	r3, [r6, #4]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80442:	686b      	ldr	r3, [r5, #4]
   80444:	68ea      	ldr	r2, [r5, #12]
   80446:	4313      	orrs	r3, r2
   80448:	68aa      	ldr	r2, [r5, #8]
   8044a:	4313      	orrs	r3, r2
   8044c:	692a      	ldr	r2, [r5, #16]
   8044e:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   80450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   80454:	4a06      	ldr	r2, [pc, #24]	; (80470 <usart_init_sync_master+0x64>)
   80456:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   80458:	6872      	ldr	r2, [r6, #4]
   8045a:	4313      	orrs	r3, r2
   8045c:	6073      	str	r3, [r6, #4]
	return 0;
   8045e:	2000      	movs	r0, #0
}
   80460:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   80462:	2001      	movs	r0, #1
   80464:	e7fc      	b.n	80460 <usart_init_sync_master+0x54>
   80466:	2001      	movs	r0, #1
   80468:	e7fa      	b.n	80460 <usart_init_sync_master+0x54>
   8046a:	bf00      	nop
   8046c:	000803dd 	.word	0x000803dd
   80470:	20000d74 	.word	0x20000d74

00080474 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   80474:	2340      	movs	r3, #64	; 0x40
   80476:	6003      	str	r3, [r0, #0]
}
   80478:	4770      	bx	lr

0008047a <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   8047a:	2380      	movs	r3, #128	; 0x80
   8047c:	6003      	str	r3, [r0, #0]
}
   8047e:	4770      	bx	lr

00080480 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   80480:	2310      	movs	r3, #16
   80482:	6003      	str	r3, [r0, #0]
}
   80484:	4770      	bx	lr

00080486 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   80486:	2320      	movs	r3, #32
   80488:	6003      	str	r3, [r0, #0]
}
   8048a:	4770      	bx	lr

0008048c <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   8048c:	60c1      	str	r1, [r0, #12]
}
   8048e:	4770      	bx	lr

00080490 <usart_get_status>:
	return p_usart->US_CSR;
   80490:	6940      	ldr	r0, [r0, #20]
}
   80492:	4770      	bx	lr

00080494 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   80494:	6940      	ldr	r0, [r0, #20]
}
   80496:	f3c0 2040 	ubfx	r0, r0, #9, #1
   8049a:	4770      	bx	lr

0008049c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8049c:	6943      	ldr	r3, [r0, #20]
   8049e:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   804a2:	bf1d      	ittte	ne
   804a4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   804a8:	61c1      	strne	r1, [r0, #28]
	return 0;
   804aa:	2000      	movne	r0, #0
		return 1;
   804ac:	2001      	moveq	r0, #1
}
   804ae:	4770      	bx	lr

000804b0 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   804b0:	6943      	ldr	r3, [r0, #20]
   804b2:	f013 0f02 	tst.w	r3, #2
   804b6:	d0fb      	beq.n	804b0 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   804b8:	f3c1 0108 	ubfx	r1, r1, #0, #9
   804bc:	61c1      	str	r1, [r0, #28]
}
   804be:	2000      	movs	r0, #0
   804c0:	4770      	bx	lr

000804c2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   804c2:	6943      	ldr	r3, [r0, #20]
   804c4:	f013 0f01 	tst.w	r3, #1
   804c8:	d005      	beq.n	804d6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   804ca:	6983      	ldr	r3, [r0, #24]
   804cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   804d0:	600b      	str	r3, [r1, #0]
	return 0;
   804d2:	2000      	movs	r0, #0
   804d4:	4770      	bx	lr
		return 1;
   804d6:	2001      	movs	r0, #1
}
   804d8:	4770      	bx	lr
	...

000804dc <cdce906_write>:

	return false;
}

bool cdce906_write(uint8_t addr, uint8_t data)
{
   804dc:	b500      	push	{lr}
   804de:	b089      	sub	sp, #36	; 0x24
   804e0:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t packet_write = {
   804e4:	2300      	movs	r3, #0
   804e6:	9303      	str	r3, [sp, #12]
   804e8:	9307      	str	r3, [sp, #28]
   804ea:	f060 007f 	orn	r0, r0, #127	; 0x7f
   804ee:	f88d 000c 	strb.w	r0, [sp, #12]
   804f2:	2301      	movs	r3, #1
   804f4:	9304      	str	r3, [sp, #16]
   804f6:	f10d 0207 	add.w	r2, sp, #7
   804fa:	9205      	str	r2, [sp, #20]
   804fc:	9306      	str	r3, [sp, #24]
   804fe:	2369      	movs	r3, #105	; 0x69
   80500:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = &data, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI1, &packet_write) == TWI_SUCCESS){
   80504:	a903      	add	r1, sp, #12
   80506:	4804      	ldr	r0, [pc, #16]	; (80518 <cdce906_write+0x3c>)
   80508:	4b04      	ldr	r3, [pc, #16]	; (8051c <cdce906_write+0x40>)
   8050a:	4798      	blx	r3
		return true;
	} else {
		return false;
	}
}
   8050c:	fab0 f080 	clz	r0, r0
   80510:	0940      	lsrs	r0, r0, #5
   80512:	b009      	add	sp, #36	; 0x24
   80514:	f85d fb04 	ldr.w	pc, [sp], #4
   80518:	40088000 	.word	0x40088000
   8051c:	0008034f 	.word	0x0008034f

00080520 <cdce906_read>:

bool cdce906_read(uint8_t addr, uint8_t * data)
{
   80520:	b500      	push	{lr}
   80522:	b087      	sub	sp, #28
	twi_package_t packet_read = {
   80524:	2300      	movs	r3, #0
   80526:	9301      	str	r3, [sp, #4]
   80528:	9305      	str	r3, [sp, #20]
   8052a:	f060 007f 	orn	r0, r0, #127	; 0x7f
   8052e:	f88d 0004 	strb.w	r0, [sp, #4]
   80532:	2301      	movs	r3, #1
   80534:	9302      	str	r3, [sp, #8]
   80536:	9103      	str	r1, [sp, #12]
   80538:	9304      	str	r3, [sp, #16]
   8053a:	2369      	movs	r3, #105	; 0x69
   8053c:	f88d 3014 	strb.w	r3, [sp, #20]
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI1, &packet_read) == TWI_SUCCESS){
   80540:	a901      	add	r1, sp, #4
   80542:	4804      	ldr	r0, [pc, #16]	; (80554 <cdce906_read+0x34>)
   80544:	4b04      	ldr	r3, [pc, #16]	; (80558 <cdce906_read+0x38>)
   80546:	4798      	blx	r3
		return true;
	} else {
		return false;
	}	
   80548:	fab0 f080 	clz	r0, r0
   8054c:	0940      	lsrs	r0, r0, #5
   8054e:	b007      	add	sp, #28
   80550:	f85d fb04 	ldr.w	pc, [sp], #4
   80554:	40088000 	.word	0x40088000
   80558:	0008028d 	.word	0x0008028d

0008055c <cdce906_init>:
{
   8055c:	b510      	push	{r4, lr}
   8055e:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
   80560:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80564:	2018      	movs	r0, #24
   80566:	4c17      	ldr	r4, [pc, #92]	; (805c4 <cdce906_init+0x68>)
   80568:	47a0      	blx	r4
	gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
   8056a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8056e:	2019      	movs	r0, #25
   80570:	47a0      	blx	r4
	twi_master_options_t opt = {
   80572:	2400      	movs	r4, #0
   80574:	f8ad 400e 	strh.w	r4, [sp, #14]
   80578:	f24c 3350 	movw	r3, #50000	; 0xc350
   8057c:	9302      	str	r3, [sp, #8]
   8057e:	2369      	movs	r3, #105	; 0x69
   80580:	f88d 300c 	strb.w	r3, [sp, #12]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80584:	4b10      	ldr	r3, [pc, #64]	; (805c8 <cdce906_init+0x6c>)
   80586:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   80588:	f88d 400d 	strb.w	r4, [sp, #13]
   8058c:	2013      	movs	r0, #19
   8058e:	4b0f      	ldr	r3, [pc, #60]	; (805cc <cdce906_init+0x70>)
   80590:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   80592:	a901      	add	r1, sp, #4
   80594:	480e      	ldr	r0, [pc, #56]	; (805d0 <cdce906_init+0x74>)
   80596:	4b0f      	ldr	r3, [pc, #60]	; (805d4 <cdce906_init+0x78>)
   80598:	4798      	blx	r3
	uint8_t data = 0;
   8059a:	f88d 4003 	strb.w	r4, [sp, #3]
	if (cdce906_read(0, &data) == false){
   8059e:	f10d 0103 	add.w	r1, sp, #3
   805a2:	4620      	mov	r0, r4
   805a4:	4b0c      	ldr	r3, [pc, #48]	; (805d8 <cdce906_init+0x7c>)
   805a6:	4798      	blx	r3
   805a8:	4603      	mov	r3, r0
   805aa:	b138      	cbz	r0, 805bc <cdce906_init+0x60>
	if ((data & 0x0F) == 0x01){
   805ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
   805b0:	f003 030f 	and.w	r3, r3, #15
   805b4:	2b01      	cmp	r3, #1
   805b6:	bf14      	ite	ne
   805b8:	2300      	movne	r3, #0
   805ba:	2301      	moveq	r3, #1
}
   805bc:	4618      	mov	r0, r3
   805be:	b004      	add	sp, #16
   805c0:	bd10      	pop	{r4, pc}
   805c2:	bf00      	nop
   805c4:	00082bbd 	.word	0x00082bbd
   805c8:	05b8d800 	.word	0x05b8d800
   805cc:	00082f1d 	.word	0x00082f1d
   805d0:	40088000 	.word	0x40088000
   805d4:	0008024d 	.word	0x0008024d
   805d8:	00080521 	.word	0x00080521

000805dc <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   805dc:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   805de:	6804      	ldr	r4, [r0, #0]
    newhead++;
   805e0:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   805e2:	2c80      	cmp	r4, #128	; 0x80
   805e4:	bf28      	it	cs
   805e6:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   805e8:	6843      	ldr	r3, [r0, #4]
   805ea:	42a3      	cmp	r3, r4
   805ec:	d105      	bne.n	805fa <add_to_circ_buf+0x1e>
    {
        if (!block)
   805ee:	2a00      	cmp	r2, #0
   805f0:	d1fa      	bne.n	805e8 <add_to_circ_buf+0xc>
        {
            cbuf->dropped++;
   805f2:	6883      	ldr	r3, [r0, #8]
   805f4:	3301      	adds	r3, #1
   805f6:	6083      	str	r3, [r0, #8]
            return;
   805f8:	e003      	b.n	80602 <add_to_circ_buf+0x26>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   805fa:	6803      	ldr	r3, [r0, #0]
   805fc:	4403      	add	r3, r0
   805fe:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   80600:	6004      	str	r4, [r0, #0]
}
   80602:	bc10      	pop	{r4}
   80604:	4770      	bx	lr

00080606 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   80606:	4602      	mov	r2, r0
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   80608:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   8060a:	18c1      	adds	r1, r0, r3
   8060c:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head)
   8060e:	6811      	ldr	r1, [r2, #0]
   80610:	4299      	cmp	r1, r3
   80612:	d005      	beq.n	80620 <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   80614:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   80616:	2b80      	cmp	r3, #128	; 0x80
   80618:	bf28      	it	cs
   8061a:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   8061c:	6053      	str	r3, [r2, #4]

    return retval;
   8061e:	4770      	bx	lr
        return SERIAL_ERR;
   80620:	20ff      	movs	r0, #255	; 0xff
}
   80622:	4770      	bx	lr

00080624 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   80624:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   80626:	6840      	ldr	r0, [r0, #4]
}
   80628:	1ac0      	subs	r0, r0, r3
   8062a:	bf18      	it	ne
   8062c:	2001      	movne	r0, #1
   8062e:	4770      	bx	lr

00080630 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   80630:	b508      	push	{r3, lr}
	FPGA_NPROG_SETUP();
   80632:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80636:	2008      	movs	r0, #8
   80638:	4b02      	ldr	r3, [pc, #8]	; (80644 <fpga_program_init+0x14>)
   8063a:	4798      	blx	r3
	FPGA_NPROG_HIGH();
   8063c:	2008      	movs	r0, #8
   8063e:	4b02      	ldr	r3, [pc, #8]	; (80648 <fpga_program_init+0x18>)
   80640:	4798      	blx	r3
}
   80642:	bd08      	pop	{r3, pc}
   80644:	00082bbd 	.word	0x00082bbd
   80648:	00082b87 	.word	0x00082b87

0008064c <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   8064c:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   8064e:	2008      	movs	r0, #8
   80650:	4b19      	ldr	r3, [pc, #100]	; (806b8 <fpga_program_setup1+0x6c>)
   80652:	4798      	blx	r3
	FPGA_CCLK_SETUP();
	FPGA_DO_SETUP();
	
#else
				
	spi_enable_clock(SPI);
   80654:	4c19      	ldr	r4, [pc, #100]	; (806bc <fpga_program_setup1+0x70>)
   80656:	4620      	mov	r0, r4
   80658:	4b19      	ldr	r3, [pc, #100]	; (806c0 <fpga_program_setup1+0x74>)
   8065a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8065c:	2380      	movs	r3, #128	; 0x80
   8065e:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80660:	6863      	ldr	r3, [r4, #4]
   80662:	f043 0301 	orr.w	r3, r3, #1
   80666:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80668:	6863      	ldr	r3, [r4, #4]
   8066a:	f043 0310 	orr.w	r3, r3, #16
   8066e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80670:	6863      	ldr	r3, [r4, #4]
   80672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80676:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
				
	spi_set_clock_polarity(SPI, 0, 0);
   80678:	2200      	movs	r2, #0
   8067a:	4611      	mov	r1, r2
   8067c:	4620      	mov	r0, r4
   8067e:	4b11      	ldr	r3, [pc, #68]	; (806c4 <fpga_program_setup1+0x78>)
   80680:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80682:	2201      	movs	r2, #1
   80684:	2100      	movs	r1, #0
   80686:	4620      	mov	r0, r4
   80688:	4b0f      	ldr	r3, [pc, #60]	; (806c8 <fpga_program_setup1+0x7c>)
   8068a:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(24000000, sysclk_get_cpu_hz()));
   8068c:	490f      	ldr	r1, [pc, #60]	; (806cc <fpga_program_setup1+0x80>)
   8068e:	4810      	ldr	r0, [pc, #64]	; (806d0 <fpga_program_setup1+0x84>)
   80690:	4b10      	ldr	r3, [pc, #64]	; (806d4 <fpga_program_setup1+0x88>)
   80692:	4798      	blx	r3
   80694:	b2c2      	uxtb	r2, r0
   80696:	2100      	movs	r1, #0
   80698:	4620      	mov	r0, r4
   8069a:	4b0f      	ldr	r3, [pc, #60]	; (806d8 <fpga_program_setup1+0x8c>)
   8069c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8069e:	2301      	movs	r3, #1
   806a0:	6023      	str	r3, [r4, #0]
				
	spi_enable(SPI);
				
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   806a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   806a6:	200e      	movs	r0, #14
   806a8:	4c0c      	ldr	r4, [pc, #48]	; (806dc <fpga_program_setup1+0x90>)
   806aa:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   806ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   806b0:	200f      	movs	r0, #15
   806b2:	47a0      	blx	r4
					
#endif
}
   806b4:	bd10      	pop	{r4, pc}
   806b6:	bf00      	nop
   806b8:	00082ba1 	.word	0x00082ba1
   806bc:	40008000 	.word	0x40008000
   806c0:	00083271 	.word	0x00083271
   806c4:	000832b5 	.word	0x000832b5
   806c8:	000832d3 	.word	0x000832d3
   806cc:	05b8d800 	.word	0x05b8d800
   806d0:	016e3600 	.word	0x016e3600
   806d4:	000832f1 	.word	0x000832f1
   806d8:	00083307 	.word	0x00083307
   806dc:	00082bbd 	.word	0x00082bbd

000806e0 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   806e0:	b508      	push	{r3, lr}
	FPGA_NPROG_HIGH();	
   806e2:	2008      	movs	r0, #8
   806e4:	4b01      	ldr	r3, [pc, #4]	; (806ec <fpga_program_setup2+0xc>)
   806e6:	4798      	blx	r3
}
   806e8:	bd08      	pop	{r3, pc}
   806ea:	bf00      	nop
   806ec:	00082b87 	.word	0x00082b87

000806f0 <fpga_program_sendbyte>:

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   806f0:	b510      	push	{r4, lr}
   806f2:	4601      	mov	r1, r0
		
		FPGA_CCLK_HIGH();
		databyte = databyte >> 1;
	}
	#else
	spi_write(SPI, databyte, 0, 0);
   806f4:	2300      	movs	r3, #0
   806f6:	461a      	mov	r2, r3
   806f8:	4801      	ldr	r0, [pc, #4]	; (80700 <fpga_program_sendbyte+0x10>)
   806fa:	4c02      	ldr	r4, [pc, #8]	; (80704 <fpga_program_sendbyte+0x14>)
   806fc:	47a0      	blx	r4
	#endif
}
   806fe:	bd10      	pop	{r4, pc}
   80700:	40008000 	.word	0x40008000
   80704:	00083281 	.word	0x00083281

00080708 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   80708:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   8070a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8070e:	200f      	movs	r0, #15
   80710:	4c0a      	ldr	r4, [pc, #40]	; (8073c <fpgaspi_program_init+0x34>)
   80712:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   80714:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80718:	2032      	movs	r0, #50	; 0x32
   8071a:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   8071c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80720:	200e      	movs	r0, #14
   80722:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   80724:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80728:	2036      	movs	r0, #54	; 0x36
   8072a:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   8072c:	2036      	movs	r0, #54	; 0x36
   8072e:	4b04      	ldr	r3, [pc, #16]	; (80740 <fpgaspi_program_init+0x38>)
   80730:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
   80732:	200f      	movs	r0, #15
   80734:	4b03      	ldr	r3, [pc, #12]	; (80744 <fpgaspi_program_init+0x3c>)
   80736:	4798      	blx	r3
}
   80738:	bd10      	pop	{r4, pc}
   8073a:	bf00      	nop
   8073c:	00082bbd 	.word	0x00082bbd
   80740:	00082b87 	.word	0x00082b87
   80744:	00082ba1 	.word	0x00082ba1

00080748 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
   80748:	b508      	push	{r3, lr}
	FPGASPI_CS_LOW();
   8074a:	2036      	movs	r0, #54	; 0x36
   8074c:	4b01      	ldr	r3, [pc, #4]	; (80754 <fpgaspi_cs_low+0xc>)
   8074e:	4798      	blx	r3
}
   80750:	bd08      	pop	{r3, pc}
   80752:	bf00      	nop
   80754:	00082ba1 	.word	0x00082ba1

00080758 <fpgaspi_cs_high>:

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
   80758:	b508      	push	{r3, lr}
	FPGASPI_CS_HIGH();
   8075a:	2036      	movs	r0, #54	; 0x36
   8075c:	4b01      	ldr	r3, [pc, #4]	; (80764 <fpgaspi_cs_high+0xc>)
   8075e:	4798      	blx	r3
}
   80760:	bd08      	pop	{r3, pc}
   80762:	bf00      	nop
   80764:	00082b87 	.word	0x00082b87

00080768 <fpgaspi_xferbyte>:


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   80768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8076c:	4605      	mov	r5, r0
   8076e:	2608      	movs	r6, #8
	uint8_t result = 0;
   80770:	2400      	movs	r4, #0

	for(unsigned int i=0; i < 8; i++){	
		//On first read this gets thrown away
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80772:	f8df 9060 	ldr.w	r9, [pc, #96]	; 807d4 <fpgaspi_xferbyte+0x6c>
		FPGASPI_CCLK_LOW();
   80776:	270f      	movs	r7, #15

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
   80778:	f8df 805c 	ldr.w	r8, [pc, #92]	; 807d8 <fpgaspi_xferbyte+0x70>
   8077c:	e009      	b.n	80792 <fpgaspi_xferbyte+0x2a>
   8077e:	2032      	movs	r0, #50	; 0x32
   80780:	47c0      	blx	r8
			} else {
			FPGASPI_DO_LOW();
		}
		
		FPGASPI_CCLK_HIGH();
   80782:	4638      	mov	r0, r7
   80784:	47c0      	blx	r8
		databyte = databyte << 1;
   80786:	006d      	lsls	r5, r5, #1
   80788:	b2ed      	uxtb	r5, r5
		result = result << 1;
   8078a:	0064      	lsls	r4, r4, #1
   8078c:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   8078e:	3e01      	subs	r6, #1
   80790:	d00f      	beq.n	807b2 <fpgaspi_xferbyte+0x4a>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80792:	200e      	movs	r0, #14
   80794:	47c8      	blx	r9
   80796:	2800      	cmp	r0, #0
   80798:	bf18      	it	ne
   8079a:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   8079e:	4638      	mov	r0, r7
   807a0:	4b0b      	ldr	r3, [pc, #44]	; (807d0 <fpgaspi_xferbyte+0x68>)
   807a2:	4798      	blx	r3
		if (databyte & 0x80){
   807a4:	f015 0f80 	tst.w	r5, #128	; 0x80
   807a8:	d1e9      	bne.n	8077e <fpgaspi_xferbyte+0x16>
			FPGASPI_DO_LOW();
   807aa:	2032      	movs	r0, #50	; 0x32
   807ac:	4b08      	ldr	r3, [pc, #32]	; (807d0 <fpgaspi_xferbyte+0x68>)
   807ae:	4798      	blx	r3
   807b0:	e7e7      	b.n	80782 <fpgaspi_xferbyte+0x1a>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   807b2:	200e      	movs	r0, #14
   807b4:	4b07      	ldr	r3, [pc, #28]	; (807d4 <fpgaspi_xferbyte+0x6c>)
   807b6:	4798      	blx	r3
   807b8:	2800      	cmp	r0, #0
   807ba:	bf18      	it	ne
   807bc:	f044 0401 	orrne.w	r4, r4, #1
   807c0:	b264      	sxtb	r4, r4

	FPGASPI_CCLK_LOW();
   807c2:	200f      	movs	r0, #15
   807c4:	4b02      	ldr	r3, [pc, #8]	; (807d0 <fpgaspi_xferbyte+0x68>)
   807c6:	4798      	blx	r3

	return result;
}
   807c8:	b2e0      	uxtb	r0, r4
   807ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   807ce:	bf00      	nop
   807d0:	00082ba1 	.word	0x00082ba1
   807d4:	00082b6b 	.word	0x00082b6b
   807d8:	00082b87 	.word	0x00082b87

000807dc <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   807dc:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   807de:	2100      	movs	r1, #0
   807e0:	200f      	movs	r0, #15
   807e2:	4c04      	ldr	r4, [pc, #16]	; (807f4 <fpgaspi_program_deinit+0x18>)
   807e4:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   807e6:	2100      	movs	r1, #0
   807e8:	2032      	movs	r0, #50	; 0x32
   807ea:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   807ec:	2100      	movs	r1, #0
   807ee:	2036      	movs	r0, #54	; 0x36
   807f0:	47a0      	blx	r4
   807f2:	bd10      	pop	{r4, pc}
   807f4:	00082bbd 	.word	0x00082bbd

000807f8 <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   807f8:	b508      	push	{r3, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   807fa:	4b04      	ldr	r3, [pc, #16]	; (8080c <spi1util_init+0x14>)
   807fc:	6818      	ldr	r0, [r3, #0]
   807fe:	4b04      	ldr	r3, [pc, #16]	; (80810 <spi1util_init+0x18>)
   80800:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
   80802:	4b04      	ldr	r3, [pc, #16]	; (80814 <spi1util_init+0x1c>)
   80804:	6818      	ldr	r0, [r3, #0]
   80806:	4b04      	ldr	r3, [pc, #16]	; (80818 <spi1util_init+0x20>)
   80808:	4798      	blx	r3
}
   8080a:	bd08      	pop	{r3, pc}
   8080c:	200001a8 	.word	0x200001a8
   80810:	00082b87 	.word	0x00082b87
   80814:	200001b4 	.word	0x200001b4
   80818:	00082ba1 	.word	0x00082ba1

0008081c <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
   8081c:	b508      	push	{r3, lr}
	gpio_set_pin_low(pin_spi1_cs);
   8081e:	4b02      	ldr	r3, [pc, #8]	; (80828 <spi1util_cs_low+0xc>)
   80820:	6818      	ldr	r0, [r3, #0]
   80822:	4b02      	ldr	r3, [pc, #8]	; (8082c <spi1util_cs_low+0x10>)
   80824:	4798      	blx	r3
}
   80826:	bd08      	pop	{r3, pc}
   80828:	200001a8 	.word	0x200001a8
   8082c:	00082ba1 	.word	0x00082ba1

00080830 <spi1util_cs_high>:

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
   80830:	b508      	push	{r3, lr}
	gpio_set_pin_high(pin_spi1_cs);
   80832:	4b02      	ldr	r3, [pc, #8]	; (8083c <spi1util_cs_high+0xc>)
   80834:	6818      	ldr	r0, [r3, #0]
   80836:	4b02      	ldr	r3, [pc, #8]	; (80840 <spi1util_cs_high+0x10>)
   80838:	4798      	blx	r3
}
   8083a:	bd08      	pop	{r3, pc}
   8083c:	200001a8 	.word	0x200001a8
   80840:	00082b87 	.word	0x00082b87

00080844 <spi1util_xferbyte>:

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   80844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80848:	4605      	mov	r5, r0
   8084a:	2608      	movs	r6, #8
	uint8_t result = 0;
   8084c:	2400      	movs	r4, #0

	for(unsigned int i=0; i < 8; i++){	
		//On first read this gets thrown away
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8084e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 808c8 <spi1util_xferbyte+0x84>
		gpio_set_pin_low(pin_spi1_sck);
   80852:	4f19      	ldr	r7, [pc, #100]	; (808b8 <spi1util_xferbyte+0x74>)

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
   80854:	f8df 8074 	ldr.w	r8, [pc, #116]	; 808cc <spi1util_xferbyte+0x88>
   80858:	e00a      	b.n	80870 <spi1util_xferbyte+0x2c>
   8085a:	4b18      	ldr	r3, [pc, #96]	; (808bc <spi1util_xferbyte+0x78>)
   8085c:	6818      	ldr	r0, [r3, #0]
   8085e:	47c0      	blx	r8
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   80860:	6838      	ldr	r0, [r7, #0]
   80862:	47c0      	blx	r8
		databyte = databyte << 1;
   80864:	006d      	lsls	r5, r5, #1
   80866:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80868:	0064      	lsls	r4, r4, #1
   8086a:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   8086c:	3e01      	subs	r6, #1
   8086e:	d012      	beq.n	80896 <spi1util_xferbyte+0x52>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80870:	f8d9 0000 	ldr.w	r0, [r9]
   80874:	4b12      	ldr	r3, [pc, #72]	; (808c0 <spi1util_xferbyte+0x7c>)
   80876:	4798      	blx	r3
   80878:	2800      	cmp	r0, #0
   8087a:	bf18      	it	ne
   8087c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80880:	6838      	ldr	r0, [r7, #0]
   80882:	4b10      	ldr	r3, [pc, #64]	; (808c4 <spi1util_xferbyte+0x80>)
   80884:	4798      	blx	r3
		if (databyte & 0x80){
   80886:	f015 0f80 	tst.w	r5, #128	; 0x80
   8088a:	d1e6      	bne.n	8085a <spi1util_xferbyte+0x16>
			gpio_set_pin_low(pin_spi1_mosi);
   8088c:	4b0b      	ldr	r3, [pc, #44]	; (808bc <spi1util_xferbyte+0x78>)
   8088e:	6818      	ldr	r0, [r3, #0]
   80890:	4b0c      	ldr	r3, [pc, #48]	; (808c4 <spi1util_xferbyte+0x80>)
   80892:	4798      	blx	r3
   80894:	e7e4      	b.n	80860 <spi1util_xferbyte+0x1c>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80896:	4b0c      	ldr	r3, [pc, #48]	; (808c8 <spi1util_xferbyte+0x84>)
   80898:	6818      	ldr	r0, [r3, #0]
   8089a:	4b09      	ldr	r3, [pc, #36]	; (808c0 <spi1util_xferbyte+0x7c>)
   8089c:	4798      	blx	r3
   8089e:	2800      	cmp	r0, #0
   808a0:	bf18      	it	ne
   808a2:	f044 0401 	orrne.w	r4, r4, #1
   808a6:	b264      	sxtb	r4, r4

	gpio_set_pin_low(pin_spi1_sck);
   808a8:	4b03      	ldr	r3, [pc, #12]	; (808b8 <spi1util_xferbyte+0x74>)
   808aa:	6818      	ldr	r0, [r3, #0]
   808ac:	4b05      	ldr	r3, [pc, #20]	; (808c4 <spi1util_xferbyte+0x80>)
   808ae:	4798      	blx	r3

	return result;
}
   808b0:	b2e0      	uxtb	r0, r4
   808b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808b6:	bf00      	nop
   808b8:	200001b4 	.word	0x200001b4
   808bc:	200001b0 	.word	0x200001b0
   808c0:	00082b6b 	.word	0x00082b6b
   808c4:	00082ba1 	.word	0x00082ba1
   808c8:	200001ac 	.word	0x200001ac
   808cc:	00082b87 	.word	0x00082b87

000808d0 <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   808d0:	4770      	bx	lr
	...

000808d4 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   808d4:	b538      	push	{r3, r4, r5, lr}
   808d6:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   808d8:	b2c0      	uxtb	r0, r0
   808da:	4d05      	ldr	r5, [pc, #20]	; (808f0 <XMEGANVM_SendAddress+0x1c>)
   808dc:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   808de:	f3c4 2007 	ubfx	r0, r4, #8, #8
   808e2:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   808e4:	f3c4 4007 	ubfx	r0, r4, #16, #8
   808e8:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   808ea:	0e20      	lsrs	r0, r4, #24
   808ec:	47a8      	blx	r5
}
   808ee:	bd38      	pop	{r3, r4, r5, pc}
   808f0:	00081161 	.word	0x00081161

000808f4 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   808f4:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   808f6:	4b03      	ldr	r3, [pc, #12]	; (80904 <XMEGANVM_SendNVMRegAddress+0x10>)
   808f8:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   808fa:	4318      	orrs	r0, r3
   808fc:	4b02      	ldr	r3, [pc, #8]	; (80908 <XMEGANVM_SendNVMRegAddress+0x14>)
   808fe:	4798      	blx	r3
}
   80900:	bd08      	pop	{r3, pc}
   80902:	bf00      	nop
   80904:	200001bc 	.word	0x200001bc
   80908:	000808d5 	.word	0x000808d5

0008090c <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   8090c:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   8090e:	4e07      	ldr	r6, [pc, #28]	; (8092c <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80910:	4d07      	ldr	r5, [pc, #28]	; (80930 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   80912:	4c08      	ldr	r4, [pc, #32]	; (80934 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   80914:	2080      	movs	r0, #128	; 0x80
   80916:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80918:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   8091a:	6823      	ldr	r3, [r4, #0]
   8091c:	b123      	cbz	r3, 80928 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   8091e:	f010 0f02 	tst.w	r0, #2
   80922:	d0f7      	beq.n	80914 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   80924:	2001      	movs	r0, #1
   80926:	e000      	b.n	8092a <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   80928:	2000      	movs	r0, #0
		}
	}
}
   8092a:	bd70      	pop	{r4, r5, r6, pc}
   8092c:	00081161 	.word	0x00081161
   80930:	0008118d 	.word	0x0008118d
   80934:	20001494 	.word	0x20001494

00080938 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   80938:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8093a:	206b      	movs	r0, #107	; 0x6b
   8093c:	4b09      	ldr	r3, [pc, #36]	; (80964 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   8093e:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   80940:	200f      	movs	r0, #15
   80942:	4b09      	ldr	r3, [pc, #36]	; (80968 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   80944:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80946:	4e07      	ldr	r6, [pc, #28]	; (80964 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80948:	4d08      	ldr	r5, [pc, #32]	; (8096c <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   8094a:	4c09      	ldr	r4, [pc, #36]	; (80970 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8094c:	2020      	movs	r0, #32
   8094e:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80950:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   80952:	6823      	ldr	r3, [r4, #0]
   80954:	b123      	cbz	r3, 80960 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   80956:	f010 0f80 	tst.w	r0, #128	; 0x80
   8095a:	d1f7      	bne.n	8094c <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   8095c:	2001      	movs	r0, #1
   8095e:	e000      	b.n	80962 <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   80960:	2000      	movs	r0, #0
		}
	}
}
   80962:	bd70      	pop	{r4, r5, r6, pc}
   80964:	00081161 	.word	0x00081161
   80968:	000808f5 	.word	0x000808f5
   8096c:	0008118d 	.word	0x0008118d
   80970:	20001494 	.word	0x20001494

00080974 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   80974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80978:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   8097a:	4b1a      	ldr	r3, [pc, #104]	; (809e4 <XMEGANVM_EnablePDI+0x70>)
   8097c:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8097e:	20c1      	movs	r0, #193	; 0xc1
   80980:	4c19      	ldr	r4, [pc, #100]	; (809e8 <XMEGANVM_EnablePDI+0x74>)
   80982:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   80984:	2059      	movs	r0, #89	; 0x59
   80986:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   80988:	20c2      	movs	r0, #194	; 0xc2
   8098a:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   8098c:	2002      	movs	r0, #2
   8098e:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   80990:	20e0      	movs	r0, #224	; 0xe0
   80992:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   80994:	f10d 0407 	add.w	r4, sp, #7
   80998:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   8099a:	f04f 0812 	mov.w	r8, #18
   8099e:	2789      	movs	r7, #137	; 0x89
   809a0:	4e11      	ldr	r6, [pc, #68]	; (809e8 <XMEGANVM_EnablePDI+0x74>)
   809a2:	f88d 8000 	strb.w	r8, [sp]
   809a6:	f88d 7001 	strb.w	r7, [sp, #1]
   809aa:	23ab      	movs	r3, #171	; 0xab
   809ac:	f88d 3002 	strb.w	r3, [sp, #2]
   809b0:	2345      	movs	r3, #69	; 0x45
   809b2:	f88d 3003 	strb.w	r3, [sp, #3]
   809b6:	23cd      	movs	r3, #205	; 0xcd
   809b8:	f88d 3004 	strb.w	r3, [sp, #4]
   809bc:	23d8      	movs	r3, #216	; 0xd8
   809be:	f88d 3005 	strb.w	r3, [sp, #5]
   809c2:	2388      	movs	r3, #136	; 0x88
   809c4:	f88d 3006 	strb.w	r3, [sp, #6]
   809c8:	23ff      	movs	r3, #255	; 0xff
   809ca:	f88d 3007 	strb.w	r3, [sp, #7]
   809ce:	7820      	ldrb	r0, [r4, #0]
   809d0:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   809d2:	454c      	cmp	r4, r9
   809d4:	f104 34ff 	add.w	r4, r4, #4294967295
   809d8:	d1e3      	bne.n	809a2 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   809da:	4b04      	ldr	r3, [pc, #16]	; (809ec <XMEGANVM_EnablePDI+0x78>)
   809dc:	4798      	blx	r3
}
   809de:	b003      	add	sp, #12
   809e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   809e4:	0008122d 	.word	0x0008122d
   809e8:	00081161 	.word	0x00081161
   809ec:	0008090d 	.word	0x0008090d

000809f0 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   809f0:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   809f2:	4b09      	ldr	r3, [pc, #36]	; (80a18 <XMEGANVM_DisablePDI+0x28>)
   809f4:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   809f6:	4c09      	ldr	r4, [pc, #36]	; (80a1c <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   809f8:	4d09      	ldr	r5, [pc, #36]	; (80a20 <XMEGANVM_DisablePDI+0x30>)
   809fa:	4e0a      	ldr	r6, [pc, #40]	; (80a24 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   809fc:	20c1      	movs	r0, #193	; 0xc1
   809fe:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   80a00:	2000      	movs	r0, #0
   80a02:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   80a04:	2081      	movs	r0, #129	; 0x81
   80a06:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   80a08:	47a8      	blx	r5
   80a0a:	b110      	cbz	r0, 80a12 <XMEGANVM_DisablePDI+0x22>
   80a0c:	6833      	ldr	r3, [r6, #0]
   80a0e:	2b00      	cmp	r3, #0
   80a10:	d1f4      	bne.n	809fc <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   80a12:	4b05      	ldr	r3, [pc, #20]	; (80a28 <XMEGANVM_DisablePDI+0x38>)
   80a14:	4798      	blx	r3
}
   80a16:	bd70      	pop	{r4, r5, r6, pc}
   80a18:	0008090d 	.word	0x0008090d
   80a1c:	00081161 	.word	0x00081161
   80a20:	0008118d 	.word	0x0008118d
   80a24:	20001494 	.word	0x20001494
   80a28:	00081105 	.word	0x00081105

00080a2c <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   80a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a2e:	4606      	mov	r6, r0
   80a30:	460c      	mov	r4, r1
   80a32:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80a34:	4b1c      	ldr	r3, [pc, #112]	; (80aa8 <XMEGANVM_ReadMemory+0x7c>)
   80a36:	4798      	blx	r3
   80a38:	4603      	mov	r3, r0
   80a3a:	b908      	cbnz	r0, 80a40 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   80a3c:	4618      	mov	r0, r3
   80a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80a40:	204c      	movs	r0, #76	; 0x4c
   80a42:	4f1a      	ldr	r7, [pc, #104]	; (80aac <XMEGANVM_ReadMemory+0x80>)
   80a44:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80a46:	200a      	movs	r0, #10
   80a48:	4b19      	ldr	r3, [pc, #100]	; (80ab0 <XMEGANVM_ReadMemory+0x84>)
   80a4a:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   80a4c:	2043      	movs	r0, #67	; 0x43
   80a4e:	47b8      	blx	r7
	if (ReadSize > 1)
   80a50:	2d01      	cmp	r5, #1
   80a52:	d919      	bls.n	80a88 <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80a54:	206b      	movs	r0, #107	; 0x6b
   80a56:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   80a58:	4630      	mov	r0, r6
   80a5a:	4b16      	ldr	r3, [pc, #88]	; (80ab4 <XMEGANVM_ReadMemory+0x88>)
   80a5c:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80a5e:	20a0      	movs	r0, #160	; 0xa0
   80a60:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   80a62:	1e68      	subs	r0, r5, #1
   80a64:	b2c0      	uxtb	r0, r0
   80a66:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80a68:	2024      	movs	r0, #36	; 0x24
   80a6a:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   80a6c:	3d01      	subs	r5, #1
   80a6e:	b2ad      	uxth	r5, r5
   80a70:	3501      	adds	r5, #1
   80a72:	4425      	add	r5, r4
   80a74:	4e10      	ldr	r6, [pc, #64]	; (80ab8 <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80a76:	4f11      	ldr	r7, [pc, #68]	; (80abc <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   80a78:	6833      	ldr	r3, [r6, #0]
   80a7a:	b173      	cbz	r3, 80a9a <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80a7c:	47b8      	blx	r7
   80a7e:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   80a82:	42ac      	cmp	r4, r5
   80a84:	d1f8      	bne.n	80a78 <XMEGANVM_ReadMemory+0x4c>
   80a86:	e008      	b.n	80a9a <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80a88:	200c      	movs	r0, #12
   80a8a:	4b08      	ldr	r3, [pc, #32]	; (80aac <XMEGANVM_ReadMemory+0x80>)
   80a8c:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   80a8e:	4630      	mov	r0, r6
   80a90:	4b08      	ldr	r3, [pc, #32]	; (80ab4 <XMEGANVM_ReadMemory+0x88>)
   80a92:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80a94:	4b09      	ldr	r3, [pc, #36]	; (80abc <XMEGANVM_ReadMemory+0x90>)
   80a96:	4798      	blx	r3
   80a98:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   80a9a:	4b07      	ldr	r3, [pc, #28]	; (80ab8 <XMEGANVM_ReadMemory+0x8c>)
   80a9c:	681b      	ldr	r3, [r3, #0]
   80a9e:	3b00      	subs	r3, #0
   80aa0:	bf18      	it	ne
   80aa2:	2301      	movne	r3, #1
   80aa4:	e7ca      	b.n	80a3c <XMEGANVM_ReadMemory+0x10>
   80aa6:	bf00      	nop
   80aa8:	00080939 	.word	0x00080939
   80aac:	00081161 	.word	0x00081161
   80ab0:	000808f5 	.word	0x000808f5
   80ab4:	000808d5 	.word	0x000808d5
   80ab8:	20001494 	.word	0x20001494
   80abc:	0008118d 	.word	0x0008118d

00080ac0 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   80ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ac4:	4607      	mov	r7, r0
   80ac6:	4688      	mov	r8, r1
   80ac8:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80aca:	4b0b      	ldr	r3, [pc, #44]	; (80af8 <XMEGANVM_WriteByteMemory+0x38>)
   80acc:	4798      	blx	r3
   80ace:	4605      	mov	r5, r0
   80ad0:	b910      	cbnz	r0, 80ad8 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   80ad2:	4628      	mov	r0, r5
   80ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ad8:	204c      	movs	r0, #76	; 0x4c
   80ada:	4c08      	ldr	r4, [pc, #32]	; (80afc <XMEGANVM_WriteByteMemory+0x3c>)
   80adc:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80ade:	200a      	movs	r0, #10
   80ae0:	4b07      	ldr	r3, [pc, #28]	; (80b00 <XMEGANVM_WriteByteMemory+0x40>)
   80ae2:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   80ae4:	4638      	mov	r0, r7
   80ae6:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ae8:	204c      	movs	r0, #76	; 0x4c
   80aea:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   80aec:	4640      	mov	r0, r8
   80aee:	4b05      	ldr	r3, [pc, #20]	; (80b04 <XMEGANVM_WriteByteMemory+0x44>)
   80af0:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   80af2:	4630      	mov	r0, r6
   80af4:	47a0      	blx	r4
	return true;
   80af6:	e7ec      	b.n	80ad2 <XMEGANVM_WriteByteMemory+0x12>
   80af8:	00080939 	.word	0x00080939
   80afc:	00081161 	.word	0x00081161
   80b00:	000808f5 	.word	0x000808f5
   80b04:	000808d5 	.word	0x000808d5

00080b08 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   80b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b0c:	4681      	mov	r9, r0
   80b0e:	4617      	mov	r7, r2
   80b10:	461c      	mov	r4, r3
   80b12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   80b14:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   80b18:	f013 0f01 	tst.w	r3, #1
   80b1c:	d108      	bne.n	80b30 <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   80b1e:	b9f6      	cbnz	r6, 80b5e <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   80b20:	f014 0f02 	tst.w	r4, #2
   80b24:	d13f      	bne.n	80ba6 <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   80b26:	f04f 0a01 	mov.w	sl, #1
}
   80b2a:	4650      	mov	r0, sl
   80b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80b30:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80b32:	4b27      	ldr	r3, [pc, #156]	; (80bd0 <XMEGANVM_WritePageMemory+0xc8>)
   80b34:	4798      	blx	r3
   80b36:	4682      	mov	sl, r0
   80b38:	2800      	cmp	r0, #0
   80b3a:	d0f6      	beq.n	80b2a <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80b3c:	204c      	movs	r0, #76	; 0x4c
   80b3e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80bdc <XMEGANVM_WritePageMemory+0xd4>
   80b42:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80b44:	200a      	movs	r0, #10
   80b46:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80bd4 <XMEGANVM_WritePageMemory+0xcc>
   80b4a:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   80b4c:	4640      	mov	r0, r8
   80b4e:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80b50:	204c      	movs	r0, #76	; 0x4c
   80b52:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80b54:	200b      	movs	r0, #11
   80b56:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80b58:	2001      	movs	r0, #1
   80b5a:	47d0      	blx	sl
   80b5c:	e7df      	b.n	80b1e <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80b5e:	4b1c      	ldr	r3, [pc, #112]	; (80bd0 <XMEGANVM_WritePageMemory+0xc8>)
   80b60:	4798      	blx	r3
   80b62:	4682      	mov	sl, r0
   80b64:	2800      	cmp	r0, #0
   80b66:	d0e0      	beq.n	80b2a <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80b68:	204c      	movs	r0, #76	; 0x4c
   80b6a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80bdc <XMEGANVM_WritePageMemory+0xd4>
   80b6e:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80b70:	200a      	movs	r0, #10
   80b72:	4b18      	ldr	r3, [pc, #96]	; (80bd4 <XMEGANVM_WritePageMemory+0xcc>)
   80b74:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   80b76:	4648      	mov	r0, r9
   80b78:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80b7a:	206b      	movs	r0, #107	; 0x6b
   80b7c:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   80b7e:	980a      	ldr	r0, [sp, #40]	; 0x28
   80b80:	4b15      	ldr	r3, [pc, #84]	; (80bd8 <XMEGANVM_WritePageMemory+0xd0>)
   80b82:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80b84:	20a0      	movs	r0, #160	; 0xa0
   80b86:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   80b88:	1e70      	subs	r0, r6, #1
   80b8a:	b2c0      	uxtb	r0, r0
   80b8c:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80b8e:	2064      	movs	r0, #100	; 0x64
   80b90:	47c0      	blx	r8
		while (WriteSize--)
   80b92:	3e01      	subs	r6, #1
   80b94:	b2b6      	uxth	r6, r6
   80b96:	3601      	adds	r6, #1
   80b98:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   80b9a:	f815 0b01 	ldrb.w	r0, [r5], #1
   80b9e:	47c0      	blx	r8
		while (WriteSize--)
   80ba0:	42b5      	cmp	r5, r6
   80ba2:	d1fa      	bne.n	80b9a <XMEGANVM_WritePageMemory+0x92>
   80ba4:	e7bc      	b.n	80b20 <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80ba6:	4b0a      	ldr	r3, [pc, #40]	; (80bd0 <XMEGANVM_WritePageMemory+0xc8>)
   80ba8:	4798      	blx	r3
   80baa:	4682      	mov	sl, r0
   80bac:	2800      	cmp	r0, #0
   80bae:	d0bc      	beq.n	80b2a <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80bb0:	204c      	movs	r0, #76	; 0x4c
   80bb2:	4c0a      	ldr	r4, [pc, #40]	; (80bdc <XMEGANVM_WritePageMemory+0xd4>)
   80bb4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80bb6:	200a      	movs	r0, #10
   80bb8:	4b06      	ldr	r3, [pc, #24]	; (80bd4 <XMEGANVM_WritePageMemory+0xcc>)
   80bba:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   80bbc:	4638      	mov	r0, r7
   80bbe:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80bc0:	204c      	movs	r0, #76	; 0x4c
   80bc2:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   80bc4:	980a      	ldr	r0, [sp, #40]	; 0x28
   80bc6:	4b04      	ldr	r3, [pc, #16]	; (80bd8 <XMEGANVM_WritePageMemory+0xd0>)
   80bc8:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   80bca:	2000      	movs	r0, #0
   80bcc:	47a0      	blx	r4
   80bce:	e7ac      	b.n	80b2a <XMEGANVM_WritePageMemory+0x22>
   80bd0:	00080939 	.word	0x00080939
   80bd4:	000808f5 	.word	0x000808f5
   80bd8:	000808d5 	.word	0x000808d5
   80bdc:	00081161 	.word	0x00081161

00080be0 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   80be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80be2:	4604      	mov	r4, r0
   80be4:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80be6:	4b36      	ldr	r3, [pc, #216]	; (80cc0 <XMEGANVM_EraseMemory+0xe0>)
   80be8:	4798      	blx	r3
   80bea:	4603      	mov	r3, r0
   80bec:	b1a8      	cbz	r0, 80c1a <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   80bee:	2c40      	cmp	r4, #64	; 0x40
   80bf0:	d015      	beq.n	80c1e <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   80bf2:	2c30      	cmp	r4, #48	; 0x30
   80bf4:	d022      	beq.n	80c3c <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80bf6:	204c      	movs	r0, #76	; 0x4c
   80bf8:	4e32      	ldr	r6, [pc, #200]	; (80cc4 <XMEGANVM_EraseMemory+0xe4>)
   80bfa:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80bfc:	200a      	movs	r0, #10
   80bfe:	4b32      	ldr	r3, [pc, #200]	; (80cc8 <XMEGANVM_EraseMemory+0xe8>)
   80c00:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   80c02:	4620      	mov	r0, r4
   80c04:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c06:	204c      	movs	r0, #76	; 0x4c
   80c08:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   80c0a:	4628      	mov	r0, r5
   80c0c:	4b2f      	ldr	r3, [pc, #188]	; (80ccc <XMEGANVM_EraseMemory+0xec>)
   80c0e:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   80c10:	2000      	movs	r0, #0
   80c12:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   80c14:	4b2e      	ldr	r3, [pc, #184]	; (80cd0 <XMEGANVM_EraseMemory+0xf0>)
   80c16:	4798      	blx	r3
   80c18:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   80c1a:	4618      	mov	r0, r3
   80c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c1e:	204c      	movs	r0, #76	; 0x4c
   80c20:	4c28      	ldr	r4, [pc, #160]	; (80cc4 <XMEGANVM_EraseMemory+0xe4>)
   80c22:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80c24:	200a      	movs	r0, #10
   80c26:	4d28      	ldr	r5, [pc, #160]	; (80cc8 <XMEGANVM_EraseMemory+0xe8>)
   80c28:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   80c2a:	2040      	movs	r0, #64	; 0x40
   80c2c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c2e:	204c      	movs	r0, #76	; 0x4c
   80c30:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80c32:	200b      	movs	r0, #11
   80c34:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80c36:	2001      	movs	r0, #1
   80c38:	47a0      	blx	r4
   80c3a:	e7eb      	b.n	80c14 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c3c:	204c      	movs	r0, #76	; 0x4c
   80c3e:	4c21      	ldr	r4, [pc, #132]	; (80cc4 <XMEGANVM_EraseMemory+0xe4>)
   80c40:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80c42:	200a      	movs	r0, #10
   80c44:	4e20      	ldr	r6, [pc, #128]	; (80cc8 <XMEGANVM_EraseMemory+0xe8>)
   80c46:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   80c48:	2036      	movs	r0, #54	; 0x36
   80c4a:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c4c:	204c      	movs	r0, #76	; 0x4c
   80c4e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80c50:	200b      	movs	r0, #11
   80c52:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80c54:	2001      	movs	r0, #1
   80c56:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80c58:	4b19      	ldr	r3, [pc, #100]	; (80cc0 <XMEGANVM_EraseMemory+0xe0>)
   80c5a:	4798      	blx	r3
   80c5c:	4603      	mov	r3, r0
   80c5e:	2800      	cmp	r0, #0
   80c60:	d0db      	beq.n	80c1a <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c62:	204c      	movs	r0, #76	; 0x4c
   80c64:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80c66:	200a      	movs	r0, #10
   80c68:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   80c6a:	2033      	movs	r0, #51	; 0x33
   80c6c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80c6e:	206b      	movs	r0, #107	; 0x6b
   80c70:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   80c72:	4628      	mov	r0, r5
   80c74:	4b15      	ldr	r3, [pc, #84]	; (80ccc <XMEGANVM_EraseMemory+0xec>)
   80c76:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80c78:	20a0      	movs	r0, #160	; 0xa0
   80c7a:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   80c7c:	4d15      	ldr	r5, [pc, #84]	; (80cd4 <XMEGANVM_EraseMemory+0xf4>)
   80c7e:	7828      	ldrb	r0, [r5, #0]
   80c80:	3801      	subs	r0, #1
   80c82:	b2c0      	uxtb	r0, r0
   80c84:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80c86:	2064      	movs	r0, #100	; 0x64
   80c88:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80c8a:	882b      	ldrh	r3, [r5, #0]
   80c8c:	b14b      	cbz	r3, 80ca2 <XMEGANVM_EraseMemory+0xc2>
   80c8e:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   80c90:	4627      	mov	r7, r4
   80c92:	4e0c      	ldr	r6, [pc, #48]	; (80cc4 <XMEGANVM_EraseMemory+0xe4>)
   80c94:	4638      	mov	r0, r7
   80c96:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80c98:	1c63      	adds	r3, r4, #1
   80c9a:	b2dc      	uxtb	r4, r3
   80c9c:	882a      	ldrh	r2, [r5, #0]
   80c9e:	42a2      	cmp	r2, r4
   80ca0:	d8f8      	bhi.n	80c94 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80ca2:	204c      	movs	r0, #76	; 0x4c
   80ca4:	4c07      	ldr	r4, [pc, #28]	; (80cc4 <XMEGANVM_EraseMemory+0xe4>)
   80ca6:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   80ca8:	200a      	movs	r0, #10
   80caa:	4d07      	ldr	r5, [pc, #28]	; (80cc8 <XMEGANVM_EraseMemory+0xe8>)
   80cac:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   80cae:	2030      	movs	r0, #48	; 0x30
   80cb0:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80cb2:	204c      	movs	r0, #76	; 0x4c
   80cb4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   80cb6:	200b      	movs	r0, #11
   80cb8:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80cba:	2001      	movs	r0, #1
   80cbc:	47a0      	blx	r4
   80cbe:	e7a9      	b.n	80c14 <XMEGANVM_EraseMemory+0x34>
   80cc0:	00080939 	.word	0x00080939
   80cc4:	00081161 	.word	0x00081161
   80cc8:	000808f5 	.word	0x000808f5
   80ccc:	000808d5 	.word	0x000808d5
   80cd0:	0008090d 	.word	0x0008090d
   80cd4:	200001b8 	.word	0x200001b8

00080cd8 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   80cd8:	b570      	push	{r4, r5, r6, lr}
   80cda:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   80cdc:	4b8f      	ldr	r3, [pc, #572]	; (80f1c <XPROGProtocol_Command+0x244>)
   80cde:	8859      	ldrh	r1, [r3, #2]
   80ce0:	b2cb      	uxtb	r3, r1
   80ce2:	4a8f      	ldr	r2, [pc, #572]	; (80f20 <XPROGProtocol_Command+0x248>)
   80ce4:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   80ce6:	3b01      	subs	r3, #1
   80ce8:	2b21      	cmp	r3, #33	; 0x21
   80cea:	d82b      	bhi.n	80d44 <XPROGProtocol_Command+0x6c>
   80cec:	e8df f013 	tbh	[pc, r3, lsl #1]
   80cf0:	002f0022 	.word	0x002f0022
   80cf4:	00730037 	.word	0x00730037
   80cf8:	00e600c2 	.word	0x00e600c2
   80cfc:	002a00e9 	.word	0x002a00e9
   80d00:	002a002a 	.word	0x002a002a
   80d04:	002a002a 	.word	0x002a002a
   80d08:	002a002a 	.word	0x002a002a
   80d0c:	002a002a 	.word	0x002a002a
   80d10:	002a002a 	.word	0x002a002a
   80d14:	002a002a 	.word	0x002a002a
   80d18:	002a002a 	.word	0x002a002a
   80d1c:	002a002a 	.word	0x002a002a
   80d20:	002a002a 	.word	0x002a002a
   80d24:	002a002a 	.word	0x002a002a
   80d28:	002a002a 	.word	0x002a002a
   80d2c:	017c002a 	.word	0x017c002a
   80d30:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   80d34:	4b7b      	ldr	r3, [pc, #492]	; (80f24 <XPROGProtocol_Command+0x24c>)
   80d36:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   80d38:	4b7b      	ldr	r3, [pc, #492]	; (80f28 <XPROGProtocol_Command+0x250>)
   80d3a:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   80d3c:	f080 0001 	eor.w	r0, r0, #1
   80d40:	4b7a      	ldr	r3, [pc, #488]	; (80f2c <XPROGProtocol_Command+0x254>)
   80d42:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   80d44:	4b7a      	ldr	r3, [pc, #488]	; (80f30 <XPROGProtocol_Command+0x258>)
   80d46:	4798      	blx	r3
	return false;
   80d48:	2000      	movs	r0, #0
}
   80d4a:	b004      	add	sp, #16
   80d4c:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   80d4e:	4b75      	ldr	r3, [pc, #468]	; (80f24 <XPROGProtocol_Command+0x24c>)
   80d50:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   80d52:	4b78      	ldr	r3, [pc, #480]	; (80f34 <XPROGProtocol_Command+0x25c>)
   80d54:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   80d56:	4b75      	ldr	r3, [pc, #468]	; (80f2c <XPROGProtocol_Command+0x254>)
   80d58:	2200      	movs	r2, #0
   80d5a:	701a      	strb	r2, [r3, #0]
}
   80d5c:	e7f2      	b.n	80d44 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   80d5e:	4b71      	ldr	r3, [pc, #452]	; (80f24 <XPROGProtocol_Command+0x24c>)
   80d60:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   80d62:	4b72      	ldr	r3, [pc, #456]	; (80f2c <XPROGProtocol_Command+0x254>)
   80d64:	2200      	movs	r2, #0
   80d66:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   80d68:	4b6c      	ldr	r3, [pc, #432]	; (80f1c <XPROGProtocol_Command+0x244>)
   80d6a:	899b      	ldrh	r3, [r3, #12]
   80d6c:	2b04      	cmp	r3, #4
   80d6e:	d915      	bls.n	80d9c <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   80d70:	4b6a      	ldr	r3, [pc, #424]	; (80f1c <XPROGProtocol_Command+0x244>)
   80d72:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80d74:	791a      	ldrb	r2, [r3, #4]
   80d76:	78d9      	ldrb	r1, [r3, #3]
   80d78:	0409      	lsls	r1, r1, #16
   80d7a:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   80d7e:	785a      	ldrb	r2, [r3, #1]
   80d80:	4311      	orrs	r1, r2
   80d82:	789a      	ldrb	r2, [r3, #2]
   80d84:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   80d88:	781b      	ldrb	r3, [r3, #0]
   80d8a:	3b01      	subs	r3, #1
   80d8c:	2b07      	cmp	r3, #7
   80d8e:	d81e      	bhi.n	80dce <XPROGProtocol_Command+0xf6>
   80d90:	e8df f003 	tbb	[pc, r3]
   80d94:	1311081f 	.word	0x1311081f
   80d98:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   80d9c:	4b63      	ldr	r3, [pc, #396]	; (80f2c <XPROGProtocol_Command+0x254>)
   80d9e:	2201      	movs	r2, #1
   80da0:	701a      	strb	r2, [r3, #0]
		return;
   80da2:	e7cf      	b.n	80d44 <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80da4:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   80da6:	4b64      	ldr	r3, [pc, #400]	; (80f38 <XPROGProtocol_Command+0x260>)
   80da8:	4798      	blx	r3
   80daa:	2800      	cmp	r0, #0
   80dac:	d1ca      	bne.n	80d44 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   80dae:	4b5f      	ldr	r3, [pc, #380]	; (80f2c <XPROGProtocol_Command+0x254>)
   80db0:	2203      	movs	r2, #3
   80db2:	701a      	strb	r2, [r3, #0]
   80db4:	e7c6      	b.n	80d44 <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   80db6:	2068      	movs	r0, #104	; 0x68
		break;
   80db8:	e7f5      	b.n	80da6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   80dba:	2030      	movs	r0, #48	; 0x30
		break;
   80dbc:	e7f3      	b.n	80da6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   80dbe:	2022      	movs	r0, #34	; 0x22
		break;
   80dc0:	e7f1      	b.n	80da6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   80dc2:	202a      	movs	r0, #42	; 0x2a
		break;
   80dc4:	e7ef      	b.n	80da6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   80dc6:	2032      	movs	r0, #50	; 0x32
		break;
   80dc8:	e7ed      	b.n	80da6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   80dca:	2018      	movs	r0, #24
		break;
   80dcc:	e7eb      	b.n	80da6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   80dce:	2000      	movs	r0, #0
		break;
   80dd0:	e7e9      	b.n	80da6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   80dd2:	2040      	movs	r0, #64	; 0x40
   80dd4:	e7e7      	b.n	80da6 <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   80dd6:	4b53      	ldr	r3, [pc, #332]	; (80f24 <XPROGProtocol_Command+0x24c>)
   80dd8:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   80dda:	4b54      	ldr	r3, [pc, #336]	; (80f2c <XPROGProtocol_Command+0x254>)
   80ddc:	2200      	movs	r2, #0
   80dde:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   80de0:	4b4e      	ldr	r3, [pc, #312]	; (80f1c <XPROGProtocol_Command+0x244>)
   80de2:	88db      	ldrh	r3, [r3, #6]
   80de4:	2b07      	cmp	r3, #7
   80de6:	d802      	bhi.n	80dee <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   80de8:	4b50      	ldr	r3, [pc, #320]	; (80f2c <XPROGProtocol_Command+0x254>)
   80dea:	2201      	movs	r2, #1
   80dec:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   80dee:	4b4b      	ldr	r3, [pc, #300]	; (80f1c <XPROGProtocol_Command+0x244>)
   80df0:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   80df2:	795a      	ldrb	r2, [r3, #5]
   80df4:	7919      	ldrb	r1, [r3, #4]
   80df6:	0409      	lsls	r1, r1, #16
   80df8:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   80dfc:	789a      	ldrb	r2, [r3, #2]
   80dfe:	4311      	orrs	r1, r2
   80e00:	78da      	ldrb	r2, [r3, #3]
   80e02:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   80e06:	781a      	ldrb	r2, [r3, #0]
   80e08:	3a01      	subs	r2, #1
   80e0a:	2a05      	cmp	r2, #5
   80e0c:	d82e      	bhi.n	80e6c <XPROGProtocol_Command+0x194>
   80e0e:	e8df f012 	tbh	[pc, r2, lsl #1]
   80e12:	00fd      	.short	0x00fd
   80e14:	0101000e 	.word	0x0101000e
   80e18:	00060105 	.word	0x00060105
   80e1c:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   80e1e:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   80e20:	4b46      	ldr	r3, [pc, #280]	; (80f3c <XPROGProtocol_Command+0x264>)
   80e22:	781a      	ldrb	r2, [r3, #0]
   80e24:	4b46      	ldr	r3, [pc, #280]	; (80f40 <XPROGProtocol_Command+0x268>)
   80e26:	4798      	blx	r3
   80e28:	2800      	cmp	r0, #0
   80e2a:	d18b      	bne.n	80d44 <XPROGProtocol_Command+0x6c>
   80e2c:	e016      	b.n	80e5c <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   80e2e:	2526      	movs	r5, #38	; 0x26
   80e30:	2023      	movs	r0, #35	; 0x23
   80e32:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   80e34:	79de      	ldrb	r6, [r3, #7]
   80e36:	799c      	ldrb	r4, [r3, #6]
   80e38:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   80e3c:	785b      	ldrb	r3, [r3, #1]
   80e3e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80e42:	bf28      	it	cs
   80e44:	f44f 7480 	movcs.w	r4, #256	; 0x100
   80e48:	9402      	str	r4, [sp, #8]
   80e4a:	4c3c      	ldr	r4, [pc, #240]	; (80f3c <XPROGProtocol_Command+0x264>)
   80e4c:	9401      	str	r4, [sp, #4]
   80e4e:	9100      	str	r1, [sp, #0]
   80e50:	4629      	mov	r1, r5
   80e52:	4c3c      	ldr	r4, [pc, #240]	; (80f44 <XPROGProtocol_Command+0x26c>)
   80e54:	47a0      	blx	r4
   80e56:	2800      	cmp	r0, #0
   80e58:	f47f af74 	bne.w	80d44 <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   80e5c:	4b33      	ldr	r3, [pc, #204]	; (80f2c <XPROGProtocol_Command+0x254>)
   80e5e:	2203      	movs	r2, #3
   80e60:	701a      	strb	r2, [r3, #0]
   80e62:	e76f      	b.n	80d44 <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   80e64:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   80e66:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   80e68:	221a      	movs	r2, #26
		break;
   80e6a:	e7e3      	b.n	80e34 <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   80e6c:	222e      	movs	r2, #46	; 0x2e
   80e6e:	2526      	movs	r5, #38	; 0x26
   80e70:	2023      	movs	r0, #35	; 0x23
   80e72:	e7df      	b.n	80e34 <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   80e74:	4b2b      	ldr	r3, [pc, #172]	; (80f24 <XPROGProtocol_Command+0x24c>)
   80e76:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   80e78:	4b2c      	ldr	r3, [pc, #176]	; (80f2c <XPROGProtocol_Command+0x254>)
   80e7a:	2200      	movs	r2, #0
   80e7c:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80e7e:	4b27      	ldr	r3, [pc, #156]	; (80f1c <XPROGProtocol_Command+0x244>)
   80e80:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   80e82:	798b      	ldrb	r3, [r1, #6]
   80e84:	794a      	ldrb	r2, [r1, #5]
   80e86:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80e8a:	7908      	ldrb	r0, [r1, #4]
   80e8c:	78cb      	ldrb	r3, [r1, #3]
   80e8e:	041b      	lsls	r3, r3, #16
   80e90:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   80e94:	7848      	ldrb	r0, [r1, #1]
   80e96:	4303      	orrs	r3, r0
   80e98:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   80e9a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   80e9e:	bf28      	it	cs
   80ea0:	f44f 7280 	movcs.w	r2, #256	; 0x100
   80ea4:	4925      	ldr	r1, [pc, #148]	; (80f3c <XPROGProtocol_Command+0x264>)
   80ea6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   80eaa:	4b27      	ldr	r3, [pc, #156]	; (80f48 <XPROGProtocol_Command+0x270>)
   80eac:	4798      	blx	r3
   80eae:	2800      	cmp	r0, #0
   80eb0:	f47f af48 	bne.w	80d44 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   80eb4:	4b1d      	ldr	r3, [pc, #116]	; (80f2c <XPROGProtocol_Command+0x254>)
   80eb6:	2203      	movs	r2, #3
   80eb8:	701a      	strb	r2, [r3, #0]
   80eba:	e743      	b.n	80d44 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   80ebc:	4b19      	ldr	r3, [pc, #100]	; (80f24 <XPROGProtocol_Command+0x24c>)
   80ebe:	4798      	blx	r3
			break;
   80ec0:	e740      	b.n	80d44 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   80ec2:	4b18      	ldr	r3, [pc, #96]	; (80f24 <XPROGProtocol_Command+0x24c>)
   80ec4:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   80ec6:	4b19      	ldr	r3, [pc, #100]	; (80f2c <XPROGProtocol_Command+0x254>)
   80ec8:	2200      	movs	r2, #0
   80eca:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   80ecc:	4b13      	ldr	r3, [pc, #76]	; (80f1c <XPROGProtocol_Command+0x244>)
   80ece:	8999      	ldrh	r1, [r3, #12]
   80ed0:	2901      	cmp	r1, #1
   80ed2:	d90b      	bls.n	80eec <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   80ed4:	4b11      	ldr	r3, [pc, #68]	; (80f1c <XPROGProtocol_Command+0x244>)
   80ed6:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   80ed8:	7813      	ldrb	r3, [r2, #0]
   80eda:	3b01      	subs	r3, #1
   80edc:	2b07      	cmp	r3, #7
   80ede:	d85f      	bhi.n	80fa0 <XPROGProtocol_Command+0x2c8>
   80ee0:	e8df f003 	tbb	[pc, r3]
   80ee4:	47433608 	.word	0x47433608
   80ee8:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   80eec:	4b0f      	ldr	r3, [pc, #60]	; (80f2c <XPROGProtocol_Command+0x254>)
   80eee:	2201      	movs	r2, #1
   80ef0:	701a      	strb	r2, [r3, #0]
		return;
   80ef2:	e727      	b.n	80d44 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   80ef4:	2904      	cmp	r1, #4
   80ef6:	d90c      	bls.n	80f12 <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80ef8:	7911      	ldrb	r1, [r2, #4]
   80efa:	78d3      	ldrb	r3, [r2, #3]
   80efc:	041b      	lsls	r3, r3, #16
   80efe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   80f02:	7851      	ldrb	r1, [r2, #1]
   80f04:	430b      	orrs	r3, r1
   80f06:	7892      	ldrb	r2, [r2, #2]
   80f08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80f0c:	4a0f      	ldr	r2, [pc, #60]	; (80f4c <XPROGProtocol_Command+0x274>)
   80f0e:	6013      	str	r3, [r2, #0]
			break;
   80f10:	e718      	b.n	80d44 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   80f12:	4b06      	ldr	r3, [pc, #24]	; (80f2c <XPROGProtocol_Command+0x254>)
   80f14:	2201      	movs	r2, #1
   80f16:	701a      	strb	r2, [r3, #0]
				return;
   80f18:	e714      	b.n	80d44 <XPROGProtocol_Command+0x6c>
   80f1a:	bf00      	nop
   80f1c:	20001bfc 	.word	0x20001bfc
   80f20:	20000d78 	.word	0x20000d78
   80f24:	00081331 	.word	0x00081331
   80f28:	00080975 	.word	0x00080975
   80f2c:	20001490 	.word	0x20001490
   80f30:	00081379 	.word	0x00081379
   80f34:	000809f1 	.word	0x000809f1
   80f38:	00080be1 	.word	0x00080be1
   80f3c:	20000d7c 	.word	0x20000d7c
   80f40:	00080ac1 	.word	0x00080ac1
   80f44:	00080b09 	.word	0x00080b09
   80f48:	00080a2d 	.word	0x00080a2d
   80f4c:	200001bc 	.word	0x200001bc
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   80f50:	2902      	cmp	r1, #2
   80f52:	d906      	bls.n	80f62 <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   80f54:	7891      	ldrb	r1, [r2, #2]
   80f56:	7853      	ldrb	r3, [r2, #1]
   80f58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   80f5c:	4a30      	ldr	r2, [pc, #192]	; (81020 <XPROGProtocol_Command+0x348>)
   80f5e:	8013      	strh	r3, [r2, #0]
			break;
   80f60:	e6f0      	b.n	80d44 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   80f62:	4b30      	ldr	r3, [pc, #192]	; (81024 <XPROGProtocol_Command+0x34c>)
   80f64:	2201      	movs	r2, #1
   80f66:	701a      	strb	r2, [r3, #0]
				return;
   80f68:	e6ec      	b.n	80d44 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   80f6a:	7852      	ldrb	r2, [r2, #1]
   80f6c:	4b2e      	ldr	r3, [pc, #184]	; (81028 <XPROGProtocol_Command+0x350>)
   80f6e:	701a      	strb	r2, [r3, #0]
			break;
   80f70:	e6e8      	b.n	80d44 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   80f72:	7852      	ldrb	r2, [r2, #1]
   80f74:	4b2d      	ldr	r3, [pc, #180]	; (8102c <XPROGProtocol_Command+0x354>)
   80f76:	701a      	strb	r2, [r3, #0]
			break;
   80f78:	e6e4      	b.n	80d44 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   80f7a:	2904      	cmp	r1, #4
   80f7c:	d803      	bhi.n	80f86 <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   80f7e:	4b29      	ldr	r3, [pc, #164]	; (81024 <XPROGProtocol_Command+0x34c>)
   80f80:	2201      	movs	r2, #1
   80f82:	701a      	strb	r2, [r3, #0]
				return;
   80f84:	e6de      	b.n	80d44 <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   80f86:	7911      	ldrb	r1, [r2, #4]
   80f88:	78d3      	ldrb	r3, [r2, #3]
   80f8a:	041b      	lsls	r3, r3, #16
   80f8c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   80f90:	7851      	ldrb	r1, [r2, #1]
   80f92:	430b      	orrs	r3, r1
   80f94:	7890      	ldrb	r0, [r2, #2]
   80f96:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   80f9a:	4b25      	ldr	r3, [pc, #148]	; (81030 <XPROGProtocol_Command+0x358>)
   80f9c:	4798      	blx	r3
			break;
   80f9e:	e6d1      	b.n	80d44 <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   80fa0:	4b20      	ldr	r3, [pc, #128]	; (81024 <XPROGProtocol_Command+0x34c>)
   80fa2:	2201      	movs	r2, #1
   80fa4:	701a      	strb	r2, [r3, #0]
			break;
   80fa6:	e6cd      	b.n	80d44 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   80fa8:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   80faa:	4b22      	ldr	r3, [pc, #136]	; (81034 <XPROGProtocol_Command+0x35c>)
   80fac:	88db      	ldrh	r3, [r3, #6]
   80fae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   80fb2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80fb6:	dc27      	bgt.n	81008 <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   80fb8:	491e      	ldr	r1, [pc, #120]	; (81034 <XPROGProtocol_Command+0x35c>)
   80fba:	4a1f      	ldr	r2, [pc, #124]	; (81038 <XPROGProtocol_Command+0x360>)
   80fbc:	4402      	add	r2, r0
   80fbe:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   80fc0:	818b      	strh	r3, [r1, #12]
			return true;
   80fc2:	2001      	movs	r0, #1
   80fc4:	e6c1      	b.n	80d4a <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   80fc6:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   80fc8:	4b1a      	ldr	r3, [pc, #104]	; (81034 <XPROGProtocol_Command+0x35c>)
   80fca:	88da      	ldrh	r2, [r3, #6]
   80fcc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   80fd0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80fd4:	dd01      	ble.n	80fda <XPROGProtocol_Command+0x302>
				return false;
   80fd6:	2000      	movs	r0, #0
   80fd8:	e6b7      	b.n	80d4a <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   80fda:	6899      	ldr	r1, [r3, #8]
   80fdc:	4b16      	ldr	r3, [pc, #88]	; (81038 <XPROGProtocol_Command+0x360>)
   80fde:	4418      	add	r0, r3
   80fe0:	4b16      	ldr	r3, [pc, #88]	; (8103c <XPROGProtocol_Command+0x364>)
   80fe2:	4798      	blx	r3
			return true;
   80fe4:	2001      	movs	r0, #1
   80fe6:	e6b0      	b.n	80d4a <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   80fe8:	4a15      	ldr	r2, [pc, #84]	; (81040 <XPROGProtocol_Command+0x368>)
   80fea:	4b0e      	ldr	r3, [pc, #56]	; (81024 <XPROGProtocol_Command+0x34c>)
   80fec:	781b      	ldrb	r3, [r3, #0]
   80fee:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   80ff0:	4b14      	ldr	r3, [pc, #80]	; (81044 <XPROGProtocol_Command+0x36c>)
   80ff2:	681b      	ldr	r3, [r3, #0]
   80ff4:	fab3 f383 	clz	r3, r3
   80ff8:	095b      	lsrs	r3, r3, #5
   80ffa:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   80ffc:	4b0d      	ldr	r3, [pc, #52]	; (81034 <XPROGProtocol_Command+0x35c>)
   80ffe:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   81000:	2203      	movs	r2, #3
   81002:	819a      	strh	r2, [r3, #12]
			return true;
   81004:	2001      	movs	r0, #1
   81006:	e6a0      	b.n	80d4a <XPROGProtocol_Command+0x72>
				return false;
   81008:	2000      	movs	r0, #0
   8100a:	e69e      	b.n	80d4a <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   8100c:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8100e:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   81010:	2224      	movs	r2, #36	; 0x24
   81012:	e70f      	b.n	80e34 <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   81014:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   81016:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   81018:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   8101a:	e70b      	b.n	80e34 <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   8101c:	204c      	movs	r0, #76	; 0x4c
   8101e:	e6ff      	b.n	80e20 <XPROGProtocol_Command+0x148>
   81020:	200001b8 	.word	0x200001b8
   81024:	20001490 	.word	0x20001490
   81028:	200001c0 	.word	0x200001c0
   8102c:	200001c1 	.word	0x200001c1
   81030:	000812c1 	.word	0x000812c1
   81034:	20001bfc 	.word	0x20001bfc
   81038:	20000d7c 	.word	0x20000d7c
   8103c:	00084fbd 	.word	0x00084fbd
   81040:	20000d78 	.word	0x20000d78
   81044:	20001494 	.word	0x20001494

00081048 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   81048:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   8104a:	4d0b      	ldr	r5, [pc, #44]	; (81078 <XPROGTarget_SetRxMode+0x30>)
   8104c:	4c0b      	ldr	r4, [pc, #44]	; (8107c <XPROGTarget_SetRxMode+0x34>)
   8104e:	4628      	mov	r0, r5
   81050:	47a0      	blx	r4
   81052:	2800      	cmp	r0, #0
   81054:	d0fb      	beq.n	8104e <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   81056:	4c08      	ldr	r4, [pc, #32]	; (81078 <XPROGTarget_SetRxMode+0x30>)
   81058:	4620      	mov	r0, r4
   8105a:	4b09      	ldr	r3, [pc, #36]	; (81080 <XPROGTarget_SetRxMode+0x38>)
   8105c:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   8105e:	4620      	mov	r0, r4
   81060:	4b08      	ldr	r3, [pc, #32]	; (81084 <XPROGTarget_SetRxMode+0x3c>)
   81062:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   81064:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81068:	2012      	movs	r0, #18
   8106a:	4b07      	ldr	r3, [pc, #28]	; (81088 <XPROGTarget_SetRxMode+0x40>)
   8106c:	4798      	blx	r3
	
	IsSending = false;
   8106e:	4b07      	ldr	r3, [pc, #28]	; (8108c <XPROGTarget_SetRxMode+0x44>)
   81070:	2200      	movs	r2, #0
   81072:	701a      	strb	r2, [r3, #0]
}
   81074:	bd38      	pop	{r3, r4, r5, pc}
   81076:	bf00      	nop
   81078:	40090000 	.word	0x40090000
   8107c:	00080495 	.word	0x00080495
   81080:	0008047b 	.word	0x0008047b
   81084:	00080481 	.word	0x00080481
   81088:	00082bbd 	.word	0x00082bbd
   8108c:	20000e7c 	.word	0x20000e7c

00081090 <XPROGTarget_SetTxMode>:
{
   81090:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81092:	2511      	movs	r5, #17
   81094:	4c14      	ldr	r4, [pc, #80]	; (810e8 <XPROGTarget_SetTxMode+0x58>)
   81096:	4e15      	ldr	r6, [pc, #84]	; (810ec <XPROGTarget_SetTxMode+0x5c>)
   81098:	4628      	mov	r0, r5
   8109a:	47a0      	blx	r4
   8109c:	b110      	cbz	r0, 810a4 <XPROGTarget_SetTxMode+0x14>
   8109e:	6833      	ldr	r3, [r6, #0]
   810a0:	2b00      	cmp	r3, #0
   810a2:	d1f9      	bne.n	81098 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   810a4:	2511      	movs	r5, #17
   810a6:	4c10      	ldr	r4, [pc, #64]	; (810e8 <XPROGTarget_SetTxMode+0x58>)
   810a8:	4e10      	ldr	r6, [pc, #64]	; (810ec <XPROGTarget_SetTxMode+0x5c>)
   810aa:	4628      	mov	r0, r5
   810ac:	47a0      	blx	r4
   810ae:	b910      	cbnz	r0, 810b6 <XPROGTarget_SetTxMode+0x26>
   810b0:	6833      	ldr	r3, [r6, #0]
   810b2:	2b00      	cmp	r3, #0
   810b4:	d1f9      	bne.n	810aa <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   810b6:	2511      	movs	r5, #17
   810b8:	4c0b      	ldr	r4, [pc, #44]	; (810e8 <XPROGTarget_SetTxMode+0x58>)
   810ba:	4e0c      	ldr	r6, [pc, #48]	; (810ec <XPROGTarget_SetTxMode+0x5c>)
   810bc:	4628      	mov	r0, r5
   810be:	47a0      	blx	r4
   810c0:	b110      	cbz	r0, 810c8 <XPROGTarget_SetTxMode+0x38>
   810c2:	6833      	ldr	r3, [r6, #0]
   810c4:	2b00      	cmp	r3, #0
   810c6:	d1f9      	bne.n	810bc <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   810c8:	4c09      	ldr	r4, [pc, #36]	; (810f0 <XPROGTarget_SetTxMode+0x60>)
   810ca:	4620      	mov	r0, r4
   810cc:	4b09      	ldr	r3, [pc, #36]	; (810f4 <XPROGTarget_SetTxMode+0x64>)
   810ce:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   810d0:	4620      	mov	r0, r4
   810d2:	4b09      	ldr	r3, [pc, #36]	; (810f8 <XPROGTarget_SetTxMode+0x68>)
   810d4:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   810d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810da:	2012      	movs	r0, #18
   810dc:	4b07      	ldr	r3, [pc, #28]	; (810fc <XPROGTarget_SetTxMode+0x6c>)
   810de:	4798      	blx	r3
	IsSending = true;
   810e0:	4b07      	ldr	r3, [pc, #28]	; (81100 <XPROGTarget_SetTxMode+0x70>)
   810e2:	2201      	movs	r2, #1
   810e4:	701a      	strb	r2, [r3, #0]
}
   810e6:	bd70      	pop	{r4, r5, r6, pc}
   810e8:	00082b6b 	.word	0x00082b6b
   810ec:	20001494 	.word	0x20001494
   810f0:	40090000 	.word	0x40090000
   810f4:	00080487 	.word	0x00080487
   810f8:	00080475 	.word	0x00080475
   810fc:	00082bbd 	.word	0x00082bbd
   81100:	20000e7c 	.word	0x20000e7c

00081104 <XPROGTarget_DisableTargetPDI>:
{
   81104:	b510      	push	{r4, lr}
	if (IsSending)
   81106:	4b0f      	ldr	r3, [pc, #60]	; (81144 <XPROGTarget_DisableTargetPDI+0x40>)
   81108:	781b      	ldrb	r3, [r3, #0]
   8110a:	b9bb      	cbnz	r3, 8113c <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   8110c:	4c0e      	ldr	r4, [pc, #56]	; (81148 <XPROGTarget_DisableTargetPDI+0x44>)
   8110e:	4620      	mov	r0, r4
   81110:	4b0e      	ldr	r3, [pc, #56]	; (8114c <XPROGTarget_DisableTargetPDI+0x48>)
   81112:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   81114:	4620      	mov	r0, r4
   81116:	4b0e      	ldr	r3, [pc, #56]	; (81150 <XPROGTarget_DisableTargetPDI+0x4c>)
   81118:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   8111a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8111e:	2011      	movs	r0, #17
   81120:	4c0c      	ldr	r4, [pc, #48]	; (81154 <XPROGTarget_DisableTargetPDI+0x50>)
   81122:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   81124:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81128:	2013      	movs	r0, #19
   8112a:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   8112c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81130:	2012      	movs	r0, #18
   81132:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   81134:	200d      	movs	r0, #13
   81136:	4b08      	ldr	r3, [pc, #32]	; (81158 <XPROGTarget_DisableTargetPDI+0x54>)
   81138:	4798      	blx	r3
}
   8113a:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   8113c:	4b07      	ldr	r3, [pc, #28]	; (8115c <XPROGTarget_DisableTargetPDI+0x58>)
   8113e:	4798      	blx	r3
   81140:	e7e4      	b.n	8110c <XPROGTarget_DisableTargetPDI+0x8>
   81142:	bf00      	nop
   81144:	20000e7c 	.word	0x20000e7c
   81148:	40090000 	.word	0x40090000
   8114c:	00080487 	.word	0x00080487
   81150:	0008047b 	.word	0x0008047b
   81154:	00082bbd 	.word	0x00082bbd
   81158:	00082f49 	.word	0x00082f49
   8115c:	00081049 	.word	0x00081049

00081160 <XPROGTarget_SendByte>:
{
   81160:	b510      	push	{r4, lr}
   81162:	4604      	mov	r4, r0
	if (!(IsSending))
   81164:	4b05      	ldr	r3, [pc, #20]	; (8117c <XPROGTarget_SendByte+0x1c>)
   81166:	781b      	ldrb	r3, [r3, #0]
   81168:	b123      	cbz	r3, 81174 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   8116a:	4621      	mov	r1, r4
   8116c:	4804      	ldr	r0, [pc, #16]	; (81180 <XPROGTarget_SendByte+0x20>)
   8116e:	4b05      	ldr	r3, [pc, #20]	; (81184 <XPROGTarget_SendByte+0x24>)
   81170:	4798      	blx	r3
}
   81172:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   81174:	4b04      	ldr	r3, [pc, #16]	; (81188 <XPROGTarget_SendByte+0x28>)
   81176:	4798      	blx	r3
   81178:	e7f7      	b.n	8116a <XPROGTarget_SendByte+0xa>
   8117a:	bf00      	nop
   8117c:	20000e7c 	.word	0x20000e7c
   81180:	40090000 	.word	0x40090000
   81184:	000804b1 	.word	0x000804b1
   81188:	00081091 	.word	0x00081091

0008118c <XPROGTarget_ReceiveByte>:
{
   8118c:	b570      	push	{r4, r5, r6, lr}
   8118e:	b082      	sub	sp, #8
	if (IsSending)
   81190:	4b0a      	ldr	r3, [pc, #40]	; (811bc <XPROGTarget_ReceiveByte+0x30>)
   81192:	781b      	ldrb	r3, [r3, #0]
   81194:	b973      	cbnz	r3, 811b4 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   81196:	4d0a      	ldr	r5, [pc, #40]	; (811c0 <XPROGTarget_ReceiveByte+0x34>)
   81198:	4c0a      	ldr	r4, [pc, #40]	; (811c4 <XPROGTarget_ReceiveByte+0x38>)
   8119a:	4e0b      	ldr	r6, [pc, #44]	; (811c8 <XPROGTarget_ReceiveByte+0x3c>)
   8119c:	a901      	add	r1, sp, #4
   8119e:	4628      	mov	r0, r5
   811a0:	47a0      	blx	r4
   811a2:	2801      	cmp	r0, #1
   811a4:	d102      	bne.n	811ac <XPROGTarget_ReceiveByte+0x20>
   811a6:	6833      	ldr	r3, [r6, #0]
   811a8:	2b00      	cmp	r3, #0
   811aa:	d1f7      	bne.n	8119c <XPROGTarget_ReceiveByte+0x10>
}
   811ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
   811b0:	b002      	add	sp, #8
   811b2:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   811b4:	4b05      	ldr	r3, [pc, #20]	; (811cc <XPROGTarget_ReceiveByte+0x40>)
   811b6:	4798      	blx	r3
   811b8:	e7ed      	b.n	81196 <XPROGTarget_ReceiveByte+0xa>
   811ba:	bf00      	nop
   811bc:	20000e7c 	.word	0x20000e7c
   811c0:	40090000 	.word	0x40090000
   811c4:	000804c3 	.word	0x000804c3
   811c8:	20001494 	.word	0x20001494
   811cc:	00081049 	.word	0x00081049

000811d0 <XPROGTarget_SendIdle>:
{
   811d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   811d2:	4b12      	ldr	r3, [pc, #72]	; (8121c <XPROGTarget_SendIdle+0x4c>)
   811d4:	781b      	ldrb	r3, [r3, #0]
   811d6:	b123      	cbz	r3, 811e2 <XPROGTarget_SendIdle+0x12>
{
   811d8:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   811da:	2511      	movs	r5, #17
   811dc:	4c10      	ldr	r4, [pc, #64]	; (81220 <XPROGTarget_SendIdle+0x50>)
   811de:	4e11      	ldr	r6, [pc, #68]	; (81224 <XPROGTarget_SendIdle+0x54>)
   811e0:	e006      	b.n	811f0 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   811e2:	4b11      	ldr	r3, [pc, #68]	; (81228 <XPROGTarget_SendIdle+0x58>)
   811e4:	4798      	blx	r3
   811e6:	e7f7      	b.n	811d8 <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   811e8:	3f01      	subs	r7, #1
   811ea:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   811ee:	d013      	beq.n	81218 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   811f0:	4628      	mov	r0, r5
   811f2:	47a0      	blx	r4
   811f4:	b110      	cbz	r0, 811fc <XPROGTarget_SendIdle+0x2c>
   811f6:	6833      	ldr	r3, [r6, #0]
   811f8:	2b00      	cmp	r3, #0
   811fa:	d1f9      	bne.n	811f0 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   811fc:	4628      	mov	r0, r5
   811fe:	47a0      	blx	r4
   81200:	b910      	cbnz	r0, 81208 <XPROGTarget_SendIdle+0x38>
   81202:	6833      	ldr	r3, [r6, #0]
   81204:	2b00      	cmp	r3, #0
   81206:	d1f9      	bne.n	811fc <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   81208:	4628      	mov	r0, r5
   8120a:	47a0      	blx	r4
   8120c:	2800      	cmp	r0, #0
   8120e:	d0eb      	beq.n	811e8 <XPROGTarget_SendIdle+0x18>
   81210:	6833      	ldr	r3, [r6, #0]
   81212:	2b00      	cmp	r3, #0
   81214:	d1f8      	bne.n	81208 <XPROGTarget_SendIdle+0x38>
   81216:	e7e7      	b.n	811e8 <XPROGTarget_SendIdle+0x18>
}
   81218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8121a:	bf00      	nop
   8121c:	20000e7c 	.word	0x20000e7c
   81220:	00082b6b 	.word	0x00082b6b
   81224:	20001494 	.word	0x20001494
   81228:	00081091 	.word	0x00081091

0008122c <XPROGTarget_EnableTargetPDI>:
{
   8122c:	b570      	push	{r4, r5, r6, lr}
   8122e:	b086      	sub	sp, #24
	IsSending = false;
   81230:	2500      	movs	r5, #0
   81232:	4b19      	ldr	r3, [pc, #100]	; (81298 <XPROGTarget_EnableTargetPDI+0x6c>)
   81234:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   81236:	200d      	movs	r0, #13
   81238:	4b18      	ldr	r3, [pc, #96]	; (8129c <XPROGTarget_EnableTargetPDI+0x70>)
   8123a:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   8123c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81240:	2012      	movs	r0, #18
   81242:	4c17      	ldr	r4, [pc, #92]	; (812a0 <XPROGTarget_EnableTargetPDI+0x74>)
   81244:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   81246:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8124a:	2013      	movs	r0, #19
   8124c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   8124e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81252:	2011      	movs	r0, #17
   81254:	47a0      	blx	r4
	delay_us(50);
   81256:	f240 1057 	movw	r0, #343	; 0x157
   8125a:	4e12      	ldr	r6, [pc, #72]	; (812a4 <XPROGTarget_EnableTargetPDI+0x78>)
   8125c:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   8125e:	2012      	movs	r0, #18
   81260:	4b11      	ldr	r3, [pc, #68]	; (812a8 <XPROGTarget_EnableTargetPDI+0x7c>)
   81262:	4798      	blx	r3
	delay_us(10);
   81264:	2045      	movs	r0, #69	; 0x45
   81266:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   81268:	9502      	str	r5, [sp, #8]
   8126a:	9504      	str	r5, [sp, #16]
   8126c:	9505      	str	r5, [sp, #20]
   8126e:	4b0f      	ldr	r3, [pc, #60]	; (812ac <XPROGTarget_EnableTargetPDI+0x80>)
   81270:	9300      	str	r3, [sp, #0]
   81272:	23c0      	movs	r3, #192	; 0xc0
   81274:	9301      	str	r3, [sp, #4]
   81276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8127a:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   8127c:	4a0c      	ldr	r2, [pc, #48]	; (812b0 <XPROGTarget_EnableTargetPDI+0x84>)
   8127e:	4669      	mov	r1, sp
   81280:	480c      	ldr	r0, [pc, #48]	; (812b4 <XPROGTarget_EnableTargetPDI+0x88>)
   81282:	4b0d      	ldr	r3, [pc, #52]	; (812b8 <XPROGTarget_EnableTargetPDI+0x8c>)
   81284:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   81286:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8128a:	2011      	movs	r0, #17
   8128c:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   8128e:	4c0b      	ldr	r4, [pc, #44]	; (812bc <XPROGTarget_EnableTargetPDI+0x90>)
   81290:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   81292:	47a0      	blx	r4
}
   81294:	b006      	add	sp, #24
   81296:	bd70      	pop	{r4, r5, r6, pc}
   81298:	20000e7c 	.word	0x20000e7c
   8129c:	00082f1d 	.word	0x00082f1d
   812a0:	00082bbd 	.word	0x00082bbd
   812a4:	20000087 	.word	0x20000087
   812a8:	00082b87 	.word	0x00082b87
   812ac:	0007a120 	.word	0x0007a120
   812b0:	0b71b000 	.word	0x0b71b000
   812b4:	40090000 	.word	0x40090000
   812b8:	0008040d 	.word	0x0008040d
   812bc:	000811d1 	.word	0x000811d1

000812c0 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   812c0:	4b01      	ldr	r3, [pc, #4]	; (812c8 <set_timeout+0x8>)
   812c2:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   812c4:	4770      	bx	lr
   812c6:	bf00      	nop
   812c8:	200001c4 	.word	0x200001c4

000812cc <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   812cc:	b538      	push	{r3, r4, r5, lr}
   812ce:	2016      	movs	r0, #22
   812d0:	4b10      	ldr	r3, [pc, #64]	; (81314 <setup_timeoutcnt+0x48>)
   812d2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   812d4:	4b10      	ldr	r3, [pc, #64]	; (81318 <setup_timeoutcnt+0x4c>)
   812d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   812da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   812de:	2510      	movs	r5, #16
   812e0:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   812e4:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   812e6:	4c0d      	ldr	r4, [pc, #52]	; (8131c <setup_timeoutcnt+0x50>)
   812e8:	f24c 0201 	movw	r2, #49153	; 0xc001
   812ec:	2100      	movs	r1, #0
   812ee:	4620      	mov	r0, r4
   812f0:	4b0b      	ldr	r3, [pc, #44]	; (81320 <setup_timeoutcnt+0x54>)
   812f2:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   812f4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   812f8:	2100      	movs	r1, #0
   812fa:	4620      	mov	r0, r4
   812fc:	4b09      	ldr	r3, [pc, #36]	; (81324 <setup_timeoutcnt+0x58>)
   812fe:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   81300:	462a      	mov	r2, r5
   81302:	2100      	movs	r1, #0
   81304:	4620      	mov	r0, r4
   81306:	4b08      	ldr	r3, [pc, #32]	; (81328 <setup_timeoutcnt+0x5c>)
   81308:	4798      	blx	r3
	
	timerEnabled = true;
   8130a:	4b08      	ldr	r3, [pc, #32]	; (8132c <setup_timeoutcnt+0x60>)
   8130c:	2201      	movs	r2, #1
   8130e:	701a      	strb	r2, [r3, #0]
}
   81310:	bd38      	pop	{r3, r4, r5, pc}
   81312:	bf00      	nop
   81314:	00082f1d 	.word	0x00082f1d
   81318:	e000e100 	.word	0xe000e100
   8131c:	40080000 	.word	0x40080000
   81320:	00081f79 	.word	0x00081f79
   81324:	00081fa3 	.word	0x00081fa3
   81328:	00081fab 	.word	0x00081fab
   8132c:	20000e7d 	.word	0x20000e7d

00081330 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   81330:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   81332:	4b0a      	ldr	r3, [pc, #40]	; (8135c <start_timeoutcnt+0x2c>)
   81334:	781b      	ldrb	r3, [r3, #0]
   81336:	b16b      	cbz	r3, 81354 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81338:	4c09      	ldr	r4, [pc, #36]	; (81360 <start_timeoutcnt+0x30>)
   8133a:	2100      	movs	r1, #0
   8133c:	4620      	mov	r0, r4
   8133e:	4b09      	ldr	r3, [pc, #36]	; (81364 <start_timeoutcnt+0x34>)
   81340:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   81342:	4b09      	ldr	r3, [pc, #36]	; (81368 <start_timeoutcnt+0x38>)
   81344:	681a      	ldr	r2, [r3, #0]
   81346:	4b09      	ldr	r3, [pc, #36]	; (8136c <start_timeoutcnt+0x3c>)
   81348:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   8134a:	2100      	movs	r1, #0
   8134c:	4620      	mov	r0, r4
   8134e:	4b08      	ldr	r3, [pc, #32]	; (81370 <start_timeoutcnt+0x40>)
   81350:	4798      	blx	r3
}
   81352:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   81354:	4b07      	ldr	r3, [pc, #28]	; (81374 <start_timeoutcnt+0x44>)
   81356:	4798      	blx	r3
   81358:	e7ee      	b.n	81338 <start_timeoutcnt+0x8>
   8135a:	bf00      	nop
   8135c:	20000e7d 	.word	0x20000e7d
   81360:	40080000 	.word	0x40080000
   81364:	00081f9b 	.word	0x00081f9b
   81368:	200001c4 	.word	0x200001c4
   8136c:	20001494 	.word	0x20001494
   81370:	00081f93 	.word	0x00081f93
   81374:	000812cd 	.word	0x000812cd

00081378 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   81378:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   8137a:	2100      	movs	r1, #0
   8137c:	4801      	ldr	r0, [pc, #4]	; (81384 <stop_timeoutcnt+0xc>)
   8137e:	4b02      	ldr	r3, [pc, #8]	; (81388 <stop_timeoutcnt+0x10>)
   81380:	4798      	blx	r3
}
   81382:	bd08      	pop	{r3, pc}
   81384:	40080000 	.word	0x40080000
   81388:	00081f9b 	.word	0x00081f9b

0008138c <TC0_Handler>:

ISR(TC0_Handler)
{
   8138c:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   8138e:	4b05      	ldr	r3, [pc, #20]	; (813a4 <TC0_Handler+0x18>)
   81390:	681b      	ldr	r3, [r3, #0]
   81392:	b113      	cbz	r3, 8139a <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   81394:	3b01      	subs	r3, #1
   81396:	4a03      	ldr	r2, [pc, #12]	; (813a4 <TC0_Handler+0x18>)
   81398:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   8139a:	2100      	movs	r1, #0
   8139c:	4802      	ldr	r0, [pc, #8]	; (813a8 <TC0_Handler+0x1c>)
   8139e:	4b03      	ldr	r3, [pc, #12]	; (813ac <TC0_Handler+0x20>)
   813a0:	4798      	blx	r3
}
   813a2:	bd08      	pop	{r3, pc}
   813a4:	20001494 	.word	0x20001494
   813a8:	40080000 	.word	0x40080000
   813ac:	00081fb3 	.word	0x00081fb3

000813b0 <process_events>:
/*
TODO: Need to have a proper event loop not this crappy hack
*/

void process_events(void)
{
   813b0:	b508      	push	{r3, lr}
	static uint32_t nextCnt = 0;
	
	/* Hack for now - fixed at 100 mS, one event */	
	if (task_tickCnt > nextCnt){
   813b2:	4b0c      	ldr	r3, [pc, #48]	; (813e4 <process_events+0x34>)
   813b4:	681a      	ldr	r2, [r3, #0]
   813b6:	4b0c      	ldr	r3, [pc, #48]	; (813e8 <process_events+0x38>)
   813b8:	681b      	ldr	r3, [r3, #0]
   813ba:	429a      	cmp	r2, r3
   813bc:	d800      	bhi.n	813c0 <process_events+0x10>
		if (nextCnt < task_tickCnt){
			task_tickCnt = 0;
			nextCnt = 100;
		}
	}
}
   813be:	bd08      	pop	{r3, pc}
		do_task();
   813c0:	4b0a      	ldr	r3, [pc, #40]	; (813ec <process_events+0x3c>)
   813c2:	4798      	blx	r3
		nextCnt += 100;
   813c4:	4a08      	ldr	r2, [pc, #32]	; (813e8 <process_events+0x38>)
   813c6:	6813      	ldr	r3, [r2, #0]
   813c8:	3364      	adds	r3, #100	; 0x64
   813ca:	6013      	str	r3, [r2, #0]
		if (nextCnt < task_tickCnt){
   813cc:	4a05      	ldr	r2, [pc, #20]	; (813e4 <process_events+0x34>)
   813ce:	6812      	ldr	r2, [r2, #0]
   813d0:	4293      	cmp	r3, r2
   813d2:	d2f4      	bcs.n	813be <process_events+0xe>
			task_tickCnt = 0;
   813d4:	4b03      	ldr	r3, [pc, #12]	; (813e4 <process_events+0x34>)
   813d6:	2200      	movs	r2, #0
   813d8:	601a      	str	r2, [r3, #0]
			nextCnt = 100;
   813da:	4b03      	ldr	r3, [pc, #12]	; (813e8 <process_events+0x38>)
   813dc:	2264      	movs	r2, #100	; 0x64
   813de:	601a      	str	r2, [r3, #0]
}
   813e0:	e7ed      	b.n	813be <process_events+0xe>
   813e2:	bf00      	nop
   813e4:	2000149c 	.word	0x2000149c
   813e8:	20000e80 	.word	0x20000e80
   813ec:	00084f01 	.word	0x00084f01

000813f0 <checkoddparity>:
unsigned char checkoddparity(unsigned char p);

/* Is current byte odd-parity already? */
unsigned char checkoddparity(unsigned char p)
{
	p = p ^ (p >> 4 | p << 4);
   813f0:	0103      	lsls	r3, r0, #4
   813f2:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   813f6:	4058      	eors	r0, r3
   813f8:	b2c3      	uxtb	r3, r0
	p = p ^ (p >> 2);
   813fa:	f3c0 0085 	ubfx	r0, r0, #2, #6
   813fe:	4058      	eors	r0, r3
	p = p ^ (p >> 1);
   81400:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
	return p & 1;
}
   81404:	f000 0001 	and.w	r0, r0, #1
   81408:	4770      	bx	lr
	...

0008140c <tps56520_set>:
	if ((mv_output < 600) || (mv_output > 1800)){
		return false;
	}
	
	/* Avoid frying FPGA */
	if (mv_output > 1200){
   8140c:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
   81410:	b29b      	uxth	r3, r3
   81412:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   81416:	d84b      	bhi.n	814b0 <tps56520_set+0xa4>
{
   81418:	b510      	push	{r4, lr}
   8141a:	b08c      	sub	sp, #48	; 0x30
		return false;
	}
	
	uint8_t setting = (mv_output - 600) / 10;
   8141c:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   81420:	4c25      	ldr	r4, [pc, #148]	; (814b8 <tps56520_set+0xac>)
   81422:	fb84 3400 	smull	r3, r4, r4, r0
   81426:	17c0      	asrs	r0, r0, #31
   81428:	ebc0 04a4 	rsb	r4, r0, r4, asr #2
   8142c:	b2e4      	uxtb	r4, r4
	
	if (!checkoddparity(setting)){
   8142e:	4620      	mov	r0, r4
   81430:	4b22      	ldr	r3, [pc, #136]	; (814bc <tps56520_set+0xb0>)
   81432:	4798      	blx	r3
   81434:	b1c8      	cbz	r0, 8146a <tps56520_set+0x5e>
	uint8_t setting = (mv_output - 600) / 10;
   81436:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
		setting |= 1<<7;
	}
	twi_package_t packet_write = {
   8143a:	4b21      	ldr	r3, [pc, #132]	; (814c0 <tps56520_set+0xb4>)
   8143c:	681b      	ldr	r3, [r3, #0]
   8143e:	f8ad 3018 	strh.w	r3, [sp, #24]
   81442:	0c1b      	lsrs	r3, r3, #16
   81444:	f88d 301a 	strb.w	r3, [sp, #26]
   81448:	2301      	movs	r3, #1
   8144a:	9307      	str	r3, [sp, #28]
   8144c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   81450:	9208      	str	r2, [sp, #32]
   81452:	9309      	str	r3, [sp, #36]	; 0x24
   81454:	2334      	movs	r3, #52	; 0x34
   81456:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   8145a:	a906      	add	r1, sp, #24
   8145c:	4819      	ldr	r0, [pc, #100]	; (814c4 <tps56520_set+0xb8>)
   8145e:	4b1a      	ldr	r3, [pc, #104]	; (814c8 <tps56520_set+0xbc>)
   81460:	4798      	blx	r3
   81462:	b138      	cbz	r0, 81474 <tps56520_set+0x68>
		return false;
   81464:	2000      	movs	r0, #0
	if (volt_read == setting){
		return true;
	}
	
	return false;
   81466:	b00c      	add	sp, #48	; 0x30
   81468:	bd10      	pop	{r4, pc}
		setting |= 1<<7;
   8146a:	f064 047f 	orn	r4, r4, #127	; 0x7f
   8146e:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   81472:	e7e2      	b.n	8143a <tps56520_set+0x2e>
	twi_package_t packet_read = {
   81474:	4b12      	ldr	r3, [pc, #72]	; (814c0 <tps56520_set+0xb4>)
   81476:	681b      	ldr	r3, [r3, #0]
   81478:	f8ad 3000 	strh.w	r3, [sp]
   8147c:	0c1b      	lsrs	r3, r3, #16
   8147e:	f88d 3002 	strb.w	r3, [sp, #2]
   81482:	2301      	movs	r3, #1
   81484:	9301      	str	r3, [sp, #4]
   81486:	f10d 0217 	add.w	r2, sp, #23
   8148a:	9202      	str	r2, [sp, #8]
   8148c:	9303      	str	r3, [sp, #12]
   8148e:	2334      	movs	r3, #52	; 0x34
   81490:	f88d 3010 	strb.w	r3, [sp, #16]
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   81494:	4669      	mov	r1, sp
   81496:	480b      	ldr	r0, [pc, #44]	; (814c4 <tps56520_set+0xb8>)
   81498:	4b0c      	ldr	r3, [pc, #48]	; (814cc <tps56520_set+0xc0>)
   8149a:	4798      	blx	r3
   8149c:	b950      	cbnz	r0, 814b4 <tps56520_set+0xa8>
	if (volt_read == setting){
   8149e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   814a2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   814a6:	4298      	cmp	r0, r3
   814a8:	bf14      	ite	ne
   814aa:	2000      	movne	r0, #0
   814ac:	2001      	moveq	r0, #1
   814ae:	e7da      	b.n	81466 <tps56520_set+0x5a>
		return false;
   814b0:	2000      	movs	r0, #0
   814b2:	4770      	bx	lr
		return false;
   814b4:	2000      	movs	r0, #0
   814b6:	e7d6      	b.n	81466 <tps56520_set+0x5a>
   814b8:	66666667 	.word	0x66666667
   814bc:	000813f1 	.word	0x000813f1
   814c0:	0008bdc8 	.word	0x0008bdc8
   814c4:	40084000 	.word	0x40084000
   814c8:	0008034f 	.word	0x0008034f
   814cc:	0008028d 	.word	0x0008028d

000814d0 <tps56520_init>:
{
   814d0:	b570      	push	{r4, r5, r6, lr}
   814d2:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   814d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814d8:	2009      	movs	r0, #9
   814da:	4c13      	ldr	r4, [pc, #76]	; (81528 <tps56520_init+0x58>)
   814dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   814de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814e2:	200a      	movs	r0, #10
   814e4:	47a0      	blx	r4
	twi_master_options_t opt = {
   814e6:	2300      	movs	r3, #0
   814e8:	f8ad 300e 	strh.w	r3, [sp, #14]
   814ec:	f24c 3250 	movw	r2, #50000	; 0xc350
   814f0:	9202      	str	r2, [sp, #8]
   814f2:	2234      	movs	r2, #52	; 0x34
   814f4:	f88d 200c 	strb.w	r2, [sp, #12]
	p_opt->master_clk = sysclk_get_cpu_hz();
   814f8:	4a0c      	ldr	r2, [pc, #48]	; (8152c <tps56520_init+0x5c>)
   814fa:	9201      	str	r2, [sp, #4]
	p_opt->smbus      = 0;
   814fc:	f88d 300d 	strb.w	r3, [sp, #13]
   81500:	2012      	movs	r0, #18
   81502:	4b0b      	ldr	r3, [pc, #44]	; (81530 <tps56520_init+0x60>)
   81504:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   81506:	a901      	add	r1, sp, #4
   81508:	480a      	ldr	r0, [pc, #40]	; (81534 <tps56520_init+0x64>)
   8150a:	4b0b      	ldr	r3, [pc, #44]	; (81538 <tps56520_init+0x68>)
   8150c:	4798      	blx	r3
   8150e:	2403      	movs	r4, #3
		if(tps56520_set(1000)){
   81510:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   81514:	4d09      	ldr	r5, [pc, #36]	; (8153c <tps56520_init+0x6c>)
   81516:	4630      	mov	r0, r6
   81518:	47a8      	blx	r5
   8151a:	4603      	mov	r3, r0
   8151c:	b908      	cbnz	r0, 81522 <tps56520_init+0x52>
	for(int retry = 3; retry > 0; retry--){
   8151e:	3c01      	subs	r4, #1
   81520:	d1f9      	bne.n	81516 <tps56520_init+0x46>
}
   81522:	4618      	mov	r0, r3
   81524:	b004      	add	sp, #16
   81526:	bd70      	pop	{r4, r5, r6, pc}
   81528:	00082bbd 	.word	0x00082bbd
   8152c:	05b8d800 	.word	0x05b8d800
   81530:	00082f1d 	.word	0x00082f1d
   81534:	40084000 	.word	0x40084000
   81538:	0008024d 	.word	0x0008024d
   8153c:	0008140d 	.word	0x0008140d

00081540 <generic_isr>:
	return get_from_circ_buf(rxbuf);
}

void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   81540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81542:	4607      	mov	r7, r0
   81544:	460d      	mov	r5, r1
   81546:	4616      	mov	r6, r2
	uint32_t status;
	status = usart_get_status(usart);
   81548:	4b10      	ldr	r3, [pc, #64]	; (8158c <generic_isr+0x4c>)
   8154a:	4798      	blx	r3
   8154c:	4604      	mov	r4, r0
	if (status & US_CSR_RXRDY){
   8154e:	f010 0f01 	tst.w	r0, #1
   81552:	d103      	bne.n	8155c <generic_isr+0x1c>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
		add_to_circ_buf(rxbuf, temp, false);
	}
	
	if (status & US_CSR_TXRDY){
   81554:	f014 0f02 	tst.w	r4, #2
   81558:	d107      	bne.n	8156a <generic_isr+0x2a>
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   8155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   8155c:	69b9      	ldr	r1, [r7, #24]
		add_to_circ_buf(rxbuf, temp, false);
   8155e:	2200      	movs	r2, #0
   81560:	b2c9      	uxtb	r1, r1
   81562:	4628      	mov	r0, r5
   81564:	4b0a      	ldr	r3, [pc, #40]	; (81590 <generic_isr+0x50>)
   81566:	4798      	blx	r3
   81568:	e7f4      	b.n	81554 <generic_isr+0x14>
		if (circ_buf_has_char(txbuf)){
   8156a:	4630      	mov	r0, r6
   8156c:	4b09      	ldr	r3, [pc, #36]	; (81594 <generic_isr+0x54>)
   8156e:	4798      	blx	r3
   81570:	b138      	cbz	r0, 81582 <generic_isr+0x42>
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81572:	4630      	mov	r0, r6
   81574:	4b08      	ldr	r3, [pc, #32]	; (81598 <generic_isr+0x58>)
   81576:	4798      	blx	r3
   81578:	4601      	mov	r1, r0
   8157a:	4638      	mov	r0, r7
   8157c:	4b07      	ldr	r3, [pc, #28]	; (8159c <generic_isr+0x5c>)
   8157e:	4798      	blx	r3
   81580:	e7eb      	b.n	8155a <generic_isr+0x1a>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81582:	2102      	movs	r1, #2
   81584:	4638      	mov	r0, r7
   81586:	4b06      	ldr	r3, [pc, #24]	; (815a0 <generic_isr+0x60>)
   81588:	4798      	blx	r3
}
   8158a:	e7e6      	b.n	8155a <generic_isr+0x1a>
   8158c:	00080491 	.word	0x00080491
   81590:	000805dd 	.word	0x000805dd
   81594:	00080625 	.word	0x00080625
   81598:	00080607 	.word	0x00080607
   8159c:	000804b1 	.word	0x000804b1
   815a0:	0008048d 	.word	0x0008048d

000815a4 <USART0_Handler>:

ISR(USART0_Handler)
{
   815a4:	b508      	push	{r3, lr}
	generic_isr(USART0, &rx0buf, &tx0buf);
   815a6:	4a03      	ldr	r2, [pc, #12]	; (815b4 <USART0_Handler+0x10>)
   815a8:	4903      	ldr	r1, [pc, #12]	; (815b8 <USART0_Handler+0x14>)
   815aa:	4804      	ldr	r0, [pc, #16]	; (815bc <USART0_Handler+0x18>)
   815ac:	4b04      	ldr	r3, [pc, #16]	; (815c0 <USART0_Handler+0x1c>)
   815ae:	4798      	blx	r3
}
   815b0:	bd08      	pop	{r3, pc}
   815b2:	bf00      	nop
   815b4:	2000175c 	.word	0x2000175c
   815b8:	2000152c 	.word	0x2000152c
   815bc:	40090000 	.word	0x40090000
   815c0:	00081541 	.word	0x00081541

000815c4 <USART1_Handler>:

ISR(USART1_Handler)
{
   815c4:	b508      	push	{r3, lr}
	generic_isr(USART1, &rx1buf, &tx1buf);
   815c6:	4a03      	ldr	r2, [pc, #12]	; (815d4 <USART1_Handler+0x10>)
   815c8:	4903      	ldr	r1, [pc, #12]	; (815d8 <USART1_Handler+0x14>)
   815ca:	4804      	ldr	r0, [pc, #16]	; (815dc <USART1_Handler+0x18>)
   815cc:	4b04      	ldr	r3, [pc, #16]	; (815e0 <USART1_Handler+0x1c>)
   815ce:	4798      	blx	r3
}
   815d0:	bd08      	pop	{r3, pc}
   815d2:	bf00      	nop
   815d4:	200015b8 	.word	0x200015b8
   815d8:	200016d0 	.word	0x200016d0
   815dc:	40094000 	.word	0x40094000
   815e0:	00081541 	.word	0x00081541

000815e4 <USART2_Handler>:

ISR(USART2_Handler)
{
   815e4:	b508      	push	{r3, lr}
	generic_isr(USART2, &rx2buf, &tx2buf);
   815e6:	4a03      	ldr	r2, [pc, #12]	; (815f4 <USART2_Handler+0x10>)
   815e8:	4903      	ldr	r1, [pc, #12]	; (815f8 <USART2_Handler+0x14>)
   815ea:	4804      	ldr	r0, [pc, #16]	; (815fc <USART2_Handler+0x18>)
   815ec:	4b04      	ldr	r3, [pc, #16]	; (81600 <USART2_Handler+0x1c>)
   815ee:	4798      	blx	r3
}
   815f0:	bd08      	pop	{r3, pc}
   815f2:	bf00      	nop
   815f4:	200014a0 	.word	0x200014a0
   815f8:	20001644 	.word	0x20001644
   815fc:	40098000 	.word	0x40098000
   81600:	00081541 	.word	0x00081541

00081604 <ctrl_xmega_program_void>:
void ctrl_xmega_program_void(void);

uint32_t sam3u_mem[256];

void ctrl_xmega_program_void(void)
{
   81604:	b508      	push	{r3, lr}
    XPROGProtocol_Command();
   81606:	4b01      	ldr	r3, [pc, #4]	; (8160c <ctrl_xmega_program_void+0x8>)
   81608:	4798      	blx	r3
}
   8160a:	bd08      	pop	{r3, pc}
   8160c:	00080cd9 	.word	0x00080cd9

00081610 <ctrl_readmem_ctrl>:
            buflen,
            main_vendor_bulk_in_received
            );	
}

void ctrl_readmem_ctrl(void){
   81610:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81612:	4b06      	ldr	r3, [pc, #24]	; (8162c <ctrl_readmem_ctrl+0x1c>)
   81614:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81616:	685c      	ldr	r4, [r3, #4]

    FPGA_setlock(fpga_ctrlmem);
   81618:	2004      	movs	r0, #4
   8161a:	4b05      	ldr	r3, [pc, #20]	; (81630 <ctrl_readmem_ctrl+0x20>)
   8161c:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   8161e:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   81622:	4b04      	ldr	r3, [pc, #16]	; (81634 <ctrl_readmem_ctrl+0x24>)
   81624:	601c      	str	r4, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   81626:	4b04      	ldr	r3, [pc, #16]	; (81638 <ctrl_readmem_ctrl+0x28>)
   81628:	601d      	str	r5, [r3, #0]

    /* Start Transaction */
}
   8162a:	bd38      	pop	{r3, r4, r5, pc}
   8162c:	20000e88 	.word	0x20000e88
   81630:	00081f11 	.word	0x00081f11
   81634:	20000ec8 	.word	0x20000ec8
   81638:	20000ecc 	.word	0x20000ecc

0008163c <ctrl_writemem_ctrl>:

    }

}

void ctrl_writemem_ctrl(void){
   8163c:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8163e:	4b0c      	ldr	r3, [pc, #48]	; (81670 <ctrl_writemem_ctrl+0x34>)
   81640:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81642:	685d      	ldr	r5, [r3, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_setlock(fpga_generic);
   81644:	2001      	movs	r0, #1
   81646:	4b0b      	ldr	r3, [pc, #44]	; (81674 <ctrl_writemem_ctrl+0x38>)
   81648:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   8164a:	b16c      	cbz	r4, 81668 <ctrl_writemem_ctrl+0x2c>
   8164c:	4a08      	ldr	r2, [pc, #32]	; (81670 <ctrl_writemem_ctrl+0x34>)
   8164e:	1dd3      	adds	r3, r2, #7
   81650:	4414      	add	r4, r2
   81652:	3407      	adds	r4, #7
        xram[i+address] = ctrlbuf_payload[i];
   81654:	4e08      	ldr	r6, [pc, #32]	; (81678 <ctrl_writemem_ctrl+0x3c>)
   81656:	3d07      	subs	r5, #7
   81658:	1aad      	subs	r5, r5, r2
   8165a:	18ea      	adds	r2, r5, r3
   8165c:	6831      	ldr	r1, [r6, #0]
   8165e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   81662:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   81664:	42a3      	cmp	r3, r4
   81666:	d1f8      	bne.n	8165a <ctrl_writemem_ctrl+0x1e>
    }

    FPGA_setlock(fpga_unlocked);
   81668:	2000      	movs	r0, #0
   8166a:	4b02      	ldr	r3, [pc, #8]	; (81674 <ctrl_writemem_ctrl+0x38>)
   8166c:	4798      	blx	r3
}
   8166e:	bd70      	pop	{r4, r5, r6, pc}
   81670:	20000e88 	.word	0x20000e88
   81674:	00081f11 	.word	0x00081f11
   81678:	200001cc 	.word	0x200001cc

0008167c <ctrl_writemem_bulk>:

void ctrl_writemem_bulk(void){
   8167c:	b508      	push	{r3, lr}
    //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    //uint32_t address = *(CTRLBUFFER_WORDPTR + 1);

    FPGA_setlock(fpga_blockout);
   8167e:	2003      	movs	r0, #3
   81680:	4b01      	ldr	r3, [pc, #4]	; (81688 <ctrl_writemem_bulk+0xc>)
   81682:	4798      	blx	r3
    /* Set address */
    //Not required - this is done automatically via the XMEM interface
    //instead of using a "cheater" port.

    /* Transaction done in generic callback */
}
   81684:	bd08      	pop	{r3, pc}
   81686:	bf00      	nop
   81688:	00081f11 	.word	0x00081f11

0008168c <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   8168c:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   8168e:	4b06      	ldr	r3, [pc, #24]	; (816a8 <ctrl_readmem_bulk+0x1c>)
   81690:	681d      	ldr	r5, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81692:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_blockin);
   81694:	2002      	movs	r0, #2
   81696:	4b05      	ldr	r3, [pc, #20]	; (816ac <ctrl_readmem_bulk+0x20>)
   81698:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   8169a:	4a05      	ldr	r2, [pc, #20]	; (816b0 <ctrl_readmem_bulk+0x24>)
   8169c:	4629      	mov	r1, r5
   8169e:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   816a2:	4b04      	ldr	r3, [pc, #16]	; (816b4 <ctrl_readmem_bulk+0x28>)
   816a4:	4798      	blx	r3
}
   816a6:	bd38      	pop	{r3, r4, r5, pc}
   816a8:	20000e88 	.word	0x20000e88
   816ac:	00081f11 	.word	0x00081f11
   816b0:	00081ad9 	.word	0x00081ad9
   816b4:	000821d9 	.word	0x000821d9

000816b8 <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   816b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   816bc:	4b2c      	ldr	r3, [pc, #176]	; (81770 <ctrl_writemem_ctrl_sam3u+0xb8>)
   816be:	6819      	ldr	r1, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   816c0:	685a      	ldr	r2, [r3, #4]
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   816c2:	689d      	ldr	r5, [r3, #8]
    for(unsigned int i = 0; i < buflen; i++){
   816c4:	2904      	cmp	r1, #4
   816c6:	d00b      	beq.n	816e0 <ctrl_writemem_ctrl_sam3u+0x28>
   816c8:	4618      	mov	r0, r3
   816ca:	330b      	adds	r3, #11
   816cc:	4c29      	ldr	r4, [pc, #164]	; (81774 <ctrl_writemem_ctrl_sam3u+0xbc>)
   816ce:	4422      	add	r2, r4
   816d0:	4408      	add	r0, r1
   816d2:	3007      	adds	r0, #7
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   816d4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   816d8:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(unsigned int i = 0; i < buflen; i++){
   816dc:	4283      	cmp	r3, r0
   816de:	d1f9      	bne.n	816d4 <ctrl_writemem_ctrl_sam3u+0x1c>
    if ( flags & 0x1 ){ // encryptions have been requested
   816e0:	f015 0f01 	tst.w	r5, #1
   816e4:	d042      	beq.n	8176c <ctrl_writemem_ctrl_sam3u+0xb4>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   816e6:	4b24      	ldr	r3, [pc, #144]	; (81778 <ctrl_writemem_ctrl_sam3u+0xc0>)
   816e8:	681c      	ldr	r4, [r3, #0]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   816ea:	ea5f 4a15 	movs.w	sl, r5, lsr #16
   816ee:	d03d      	beq.n	8176c <ctrl_writemem_ctrl_sam3u+0xb4>
            if ((flags >> 1) & 0x1){ // write the key
   816f0:	f3c5 0b40 	ubfx	fp, r5, #1, #1
            if ((flags >> 2) & 0x1){ // write the pts
   816f4:	f3c5 0980 	ubfx	r9, r5, #2, #1
        for(unsigned int b = 0; b < (flags >> 16); b++){
   816f8:	2600      	movs	r6, #0
            FPGA_setlock(fpga_generic);
   816fa:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8178c <ctrl_writemem_ctrl_sam3u+0xd4>
                    xram[j+0x400+0x100] = seed >> 24;
   816fe:	4d1f      	ldr	r5, [pc, #124]	; (8177c <ctrl_writemem_ctrl_sam3u+0xc4>)
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81700:	2731      	movs	r7, #49	; 0x31
   81702:	e01c      	b.n	8173e <ctrl_writemem_ctrl_sam3u+0x86>
   81704:	f44f 63a0 	mov.w	r3, #1280	; 0x500
                    xram[j+0x400+0x100] = seed >> 24;
   81708:	682a      	ldr	r2, [r5, #0]
   8170a:	0e21      	lsrs	r1, r4, #24
   8170c:	54d1      	strb	r1, [r2, r3]
                    seed += (seed*seed) | 0x5;
   8170e:	fb04 f204 	mul.w	r2, r4, r4
   81712:	f042 0205 	orr.w	r2, r2, #5
   81716:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   81718:	3301      	adds	r3, #1
   8171a:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
   8171e:	d1f3      	bne.n	81708 <ctrl_writemem_ctrl_sam3u+0x50>
   81720:	e012      	b.n	81748 <ctrl_writemem_ctrl_sam3u+0x90>
            FPGA_setlock(fpga_unlocked);
   81722:	2000      	movs	r0, #0
   81724:	47c0      	blx	r8
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81726:	4638      	mov	r0, r7
   81728:	4b15      	ldr	r3, [pc, #84]	; (81780 <ctrl_writemem_ctrl_sam3u+0xc8>)
   8172a:	4798      	blx	r3
            delay_cycles(50);
   8172c:	2032      	movs	r0, #50	; 0x32
   8172e:	4b15      	ldr	r3, [pc, #84]	; (81784 <ctrl_writemem_ctrl_sam3u+0xcc>)
   81730:	4798      	blx	r3
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   81732:	4638      	mov	r0, r7
   81734:	4b14      	ldr	r3, [pc, #80]	; (81788 <ctrl_writemem_ctrl_sam3u+0xd0>)
   81736:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   81738:	3601      	adds	r6, #1
   8173a:	4556      	cmp	r6, sl
   8173c:	d016      	beq.n	8176c <ctrl_writemem_ctrl_sam3u+0xb4>
            FPGA_setlock(fpga_generic);
   8173e:	2001      	movs	r0, #1
   81740:	47c0      	blx	r8
            if ((flags >> 1) & 0x1){ // write the key
   81742:	f1bb 0f00 	cmp.w	fp, #0
   81746:	d1dd      	bne.n	81704 <ctrl_writemem_ctrl_sam3u+0x4c>
            if ((flags >> 2) & 0x1){ // write the pts
   81748:	f1b9 0f00 	cmp.w	r9, #0
   8174c:	d0e9      	beq.n	81722 <ctrl_writemem_ctrl_sam3u+0x6a>
   8174e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
                    xram[j+0x400+0x200] = seed >> 24;
   81752:	682a      	ldr	r2, [r5, #0]
   81754:	0e21      	lsrs	r1, r4, #24
   81756:	54d1      	strb	r1, [r2, r3]
                    seed += (seed*seed) | 0x5;
   81758:	fb04 f204 	mul.w	r2, r4, r4
   8175c:	f042 0205 	orr.w	r2, r2, #5
   81760:	4414      	add	r4, r2
                for(unsigned int j = 0; j < 16; j++){
   81762:	3301      	adds	r3, #1
   81764:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
   81768:	d1f3      	bne.n	81752 <ctrl_writemem_ctrl_sam3u+0x9a>
   8176a:	e7da      	b.n	81722 <ctrl_writemem_ctrl_sam3u+0x6a>
}
   8176c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81770:	20000e88 	.word	0x20000e88
   81774:	200017e7 	.word	0x200017e7
   81778:	200017e8 	.word	0x200017e8
   8177c:	200001cc 	.word	0x200001cc
   81780:	00082b87 	.word	0x00082b87
   81784:	20000087 	.word	0x20000087
   81788:	00082ba1 	.word	0x00082ba1
   8178c:	00081f11 	.word	0x00081f11

00081790 <ctrl_spi1util>:
}

static uint8_t spi1util_data_buffer[64];
static int spi1util_databuffer_len = 0;

static void ctrl_spi1util(void){
   81790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
    
	switch(udd_g_ctrlreq.req.wValue){
   81792:	4b16      	ldr	r3, [pc, #88]	; (817ec <ctrl_spi1util+0x5c>)
   81794:	885b      	ldrh	r3, [r3, #2]
   81796:	3ba0      	subs	r3, #160	; 0xa0
   81798:	2b04      	cmp	r3, #4
   8179a:	d806      	bhi.n	817aa <ctrl_spi1util+0x1a>
   8179c:	e8df f003 	tbb	[pc, r3]
   817a0:	0c090603 	.word	0x0c090603
   817a4:	0f          	.byte	0x0f
   817a5:	00          	.byte	0x00
		case 0xA0:
			spi1util_init();			
   817a6:	4b12      	ldr	r3, [pc, #72]	; (817f0 <ctrl_spi1util+0x60>)
   817a8:	4798      	blx	r3
			break;

		default:
			break;
	}
}
   817aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			spi1util_deinit();
   817ac:	4b11      	ldr	r3, [pc, #68]	; (817f4 <ctrl_spi1util+0x64>)
   817ae:	4798      	blx	r3
			break;
   817b0:	e7fb      	b.n	817aa <ctrl_spi1util+0x1a>
			spi1util_cs_low();
   817b2:	4b11      	ldr	r3, [pc, #68]	; (817f8 <ctrl_spi1util+0x68>)
   817b4:	4798      	blx	r3
			break;
   817b6:	e7f8      	b.n	817aa <ctrl_spi1util+0x1a>
			spi1util_cs_high();
   817b8:	4b10      	ldr	r3, [pc, #64]	; (817fc <ctrl_spi1util+0x6c>)
   817ba:	4798      	blx	r3
			break;
   817bc:	e7f5      	b.n	817aa <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   817be:	4a0b      	ldr	r2, [pc, #44]	; (817ec <ctrl_spi1util+0x5c>)
   817c0:	88d3      	ldrh	r3, [r2, #6]
   817c2:	8992      	ldrh	r2, [r2, #12]
   817c4:	429a      	cmp	r2, r3
   817c6:	d3f0      	bcc.n	817aa <ctrl_spi1util+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   817c8:	3b01      	subs	r3, #1
   817ca:	b29b      	uxth	r3, r3
   817cc:	2b3f      	cmp	r3, #63	; 0x3f
   817ce:	d8ec      	bhi.n	817aa <ctrl_spi1util+0x1a>
   817d0:	4e0b      	ldr	r6, [pc, #44]	; (81800 <ctrl_spi1util+0x70>)
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   817d2:	2400      	movs	r4, #0
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   817d4:	4d05      	ldr	r5, [pc, #20]	; (817ec <ctrl_spi1util+0x5c>)
   817d6:	4f0b      	ldr	r7, [pc, #44]	; (81804 <ctrl_spi1util+0x74>)
   817d8:	68ab      	ldr	r3, [r5, #8]
   817da:	5d18      	ldrb	r0, [r3, r4]
   817dc:	47b8      	blx	r7
   817de:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   817e2:	3401      	adds	r4, #1
   817e4:	88eb      	ldrh	r3, [r5, #6]
   817e6:	42a3      	cmp	r3, r4
   817e8:	dcf6      	bgt.n	817d8 <ctrl_spi1util+0x48>
   817ea:	e7de      	b.n	817aa <ctrl_spi1util+0x1a>
   817ec:	20001bfc 	.word	0x20001bfc
   817f0:	000807f9 	.word	0x000807f9
   817f4:	000808d1 	.word	0x000808d1
   817f8:	0008081d 	.word	0x0008081d
   817fc:	00080831 	.word	0x00080831
   81800:	20001350 	.word	0x20001350
   81804:	00080845 	.word	0x00080845

00081808 <ctrl_fpgaioutil>:
    if (udd_g_ctrlreq.req.wLength != 2){
   81808:	4b42      	ldr	r3, [pc, #264]	; (81914 <ctrl_fpgaioutil+0x10c>)
   8180a:	88db      	ldrh	r3, [r3, #6]
   8180c:	2b02      	cmp	r3, #2
   8180e:	d17f      	bne.n	81910 <ctrl_fpgaioutil+0x108>
static void ctrl_fpgaioutil(void){
   81810:	b510      	push	{r4, lr}
    int pin = udd_g_ctrlreq.payload[0];
   81812:	4b40      	ldr	r3, [pc, #256]	; (81914 <ctrl_fpgaioutil+0x10c>)
   81814:	689b      	ldr	r3, [r3, #8]
   81816:	781c      	ldrb	r4, [r3, #0]
    if ((pin < 0) || (pin > 95)){
   81818:	2c5f      	cmp	r4, #95	; 0x5f
   8181a:	d808      	bhi.n	8182e <ctrl_fpgaioutil+0x26>
    int config = udd_g_ctrlreq.payload[1];
   8181c:	785a      	ldrb	r2, [r3, #1]
	switch(udd_g_ctrlreq.req.wValue){
   8181e:	4b3d      	ldr	r3, [pc, #244]	; (81914 <ctrl_fpgaioutil+0x10c>)
   81820:	885b      	ldrh	r3, [r3, #2]
   81822:	2ba1      	cmp	r3, #161	; 0xa1
   81824:	d064      	beq.n	818f0 <ctrl_fpgaioutil+0xe8>
   81826:	2ba2      	cmp	r3, #162	; 0xa2
   81828:	d067      	beq.n	818fa <ctrl_fpgaioutil+0xf2>
   8182a:	2ba0      	cmp	r3, #160	; 0xa0
   8182c:	d000      	beq.n	81830 <ctrl_fpgaioutil+0x28>
}
   8182e:	bd10      	pop	{r4, pc}
            switch(config)
   81830:	3a01      	subs	r2, #1
   81832:	2a12      	cmp	r2, #18
   81834:	d857      	bhi.n	818e6 <ctrl_fpgaioutil+0xde>
   81836:	e8df f002 	tbb	[pc, r2]
   8183a:	100a      	.short	0x100a
   8183c:	56565656 	.word	0x56565656
   81840:	56565656 	.word	0x56565656
   81844:	56565656 	.word	0x56565656
   81848:	36261656 	.word	0x36261656
   8184c:	46          	.byte	0x46
   8184d:	00          	.byte	0x00
                    gpio_configure_pin(pin, PIO_INPUT);
   8184e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81852:	4620      	mov	r0, r4
   81854:	4b30      	ldr	r3, [pc, #192]	; (81918 <ctrl_fpgaioutil+0x110>)
   81856:	4798      	blx	r3
                    break;
   81858:	e7e9      	b.n	8182e <ctrl_fpgaioutil+0x26>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   8185a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8185e:	4620      	mov	r0, r4
   81860:	4b2d      	ldr	r3, [pc, #180]	; (81918 <ctrl_fpgaioutil+0x110>)
   81862:	4798      	blx	r3
                    break;
   81864:	e7e3      	b.n	8182e <ctrl_fpgaioutil+0x26>
                    if(pin_spi1_mosi > -1){
   81866:	4b2d      	ldr	r3, [pc, #180]	; (8191c <ctrl_fpgaioutil+0x114>)
   81868:	6818      	ldr	r0, [r3, #0]
   8186a:	2800      	cmp	r0, #0
   8186c:	da07      	bge.n	8187e <ctrl_fpgaioutil+0x76>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   8186e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81872:	4620      	mov	r0, r4
   81874:	4b28      	ldr	r3, [pc, #160]	; (81918 <ctrl_fpgaioutil+0x110>)
   81876:	4798      	blx	r3
                    pin_spi1_mosi = pin;
   81878:	4b28      	ldr	r3, [pc, #160]	; (8191c <ctrl_fpgaioutil+0x114>)
   8187a:	601c      	str	r4, [r3, #0]
                    break;
   8187c:	e7d7      	b.n	8182e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_mosi, PIO_DEFAULT);
   8187e:	2100      	movs	r1, #0
   81880:	4b25      	ldr	r3, [pc, #148]	; (81918 <ctrl_fpgaioutil+0x110>)
   81882:	4798      	blx	r3
   81884:	e7f3      	b.n	8186e <ctrl_fpgaioutil+0x66>
                    if(pin_spi1_miso > -1){
   81886:	4b26      	ldr	r3, [pc, #152]	; (81920 <ctrl_fpgaioutil+0x118>)
   81888:	6818      	ldr	r0, [r3, #0]
   8188a:	2800      	cmp	r0, #0
   8188c:	da07      	bge.n	8189e <ctrl_fpgaioutil+0x96>
                    gpio_configure_pin(pin, PIO_INPUT);
   8188e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81892:	4620      	mov	r0, r4
   81894:	4b20      	ldr	r3, [pc, #128]	; (81918 <ctrl_fpgaioutil+0x110>)
   81896:	4798      	blx	r3
                    pin_spi1_miso = pin;
   81898:	4b21      	ldr	r3, [pc, #132]	; (81920 <ctrl_fpgaioutil+0x118>)
   8189a:	601c      	str	r4, [r3, #0]
                    break;
   8189c:	e7c7      	b.n	8182e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   8189e:	2100      	movs	r1, #0
   818a0:	4b1d      	ldr	r3, [pc, #116]	; (81918 <ctrl_fpgaioutil+0x110>)
   818a2:	4798      	blx	r3
   818a4:	e7f3      	b.n	8188e <ctrl_fpgaioutil+0x86>
                    if(pin_spi1_sck > -1){
   818a6:	4b1f      	ldr	r3, [pc, #124]	; (81924 <ctrl_fpgaioutil+0x11c>)
   818a8:	6818      	ldr	r0, [r3, #0]
   818aa:	2800      	cmp	r0, #0
   818ac:	da07      	bge.n	818be <ctrl_fpgaioutil+0xb6>
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   818ae:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818b2:	4620      	mov	r0, r4
   818b4:	4b18      	ldr	r3, [pc, #96]	; (81918 <ctrl_fpgaioutil+0x110>)
   818b6:	4798      	blx	r3
                    pin_spi1_sck = pin;
   818b8:	4b1a      	ldr	r3, [pc, #104]	; (81924 <ctrl_fpgaioutil+0x11c>)
   818ba:	601c      	str	r4, [r3, #0]
                    break;
   818bc:	e7b7      	b.n	8182e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   818be:	2100      	movs	r1, #0
   818c0:	4b15      	ldr	r3, [pc, #84]	; (81918 <ctrl_fpgaioutil+0x110>)
   818c2:	4798      	blx	r3
   818c4:	e7f3      	b.n	818ae <ctrl_fpgaioutil+0xa6>
                    if(pin_spi1_cs > -1){
   818c6:	4b18      	ldr	r3, [pc, #96]	; (81928 <ctrl_fpgaioutil+0x120>)
   818c8:	6818      	ldr	r0, [r3, #0]
   818ca:	2800      	cmp	r0, #0
   818cc:	da07      	bge.n	818de <ctrl_fpgaioutil+0xd6>
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   818ce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818d2:	4620      	mov	r0, r4
   818d4:	4b10      	ldr	r3, [pc, #64]	; (81918 <ctrl_fpgaioutil+0x110>)
   818d6:	4798      	blx	r3
                    pin_spi1_cs = pin;                    
   818d8:	4b13      	ldr	r3, [pc, #76]	; (81928 <ctrl_fpgaioutil+0x120>)
   818da:	601c      	str	r4, [r3, #0]
                    break;
   818dc:	e7a7      	b.n	8182e <ctrl_fpgaioutil+0x26>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   818de:	2100      	movs	r1, #0
   818e0:	4b0d      	ldr	r3, [pc, #52]	; (81918 <ctrl_fpgaioutil+0x110>)
   818e2:	4798      	blx	r3
   818e4:	e7f3      	b.n	818ce <ctrl_fpgaioutil+0xc6>
                    gpio_configure_pin(pin, PIO_DEFAULT);
   818e6:	2100      	movs	r1, #0
   818e8:	4620      	mov	r0, r4
   818ea:	4b0b      	ldr	r3, [pc, #44]	; (81918 <ctrl_fpgaioutil+0x110>)
   818ec:	4798      	blx	r3
                    break;
   818ee:	e79e      	b.n	8182e <ctrl_fpgaioutil+0x26>
            gpio_configure_pin(pin, PIO_DEFAULT);
   818f0:	2100      	movs	r1, #0
   818f2:	4620      	mov	r0, r4
   818f4:	4b08      	ldr	r3, [pc, #32]	; (81918 <ctrl_fpgaioutil+0x110>)
   818f6:	4798      	blx	r3
			break;
   818f8:	e799      	b.n	8182e <ctrl_fpgaioutil+0x26>
            if (config == 0){
   818fa:	b12a      	cbz	r2, 81908 <ctrl_fpgaioutil+0x100>
            if (config == 1){
   818fc:	2a01      	cmp	r2, #1
   818fe:	d196      	bne.n	8182e <ctrl_fpgaioutil+0x26>
                gpio_set_pin_high(pin);
   81900:	4620      	mov	r0, r4
   81902:	4b0a      	ldr	r3, [pc, #40]	; (8192c <ctrl_fpgaioutil+0x124>)
   81904:	4798      	blx	r3
   81906:	e792      	b.n	8182e <ctrl_fpgaioutil+0x26>
                gpio_set_pin_low(pin);
   81908:	4620      	mov	r0, r4
   8190a:	4b09      	ldr	r3, [pc, #36]	; (81930 <ctrl_fpgaioutil+0x128>)
   8190c:	4798      	blx	r3
            if (config == 1){
   8190e:	e78e      	b.n	8182e <ctrl_fpgaioutil+0x26>
   81910:	4770      	bx	lr
   81912:	bf00      	nop
   81914:	20001bfc 	.word	0x20001bfc
   81918:	00082bbd 	.word	0x00082bbd
   8191c:	200001b0 	.word	0x200001b0
   81920:	200001ac 	.word	0x200001ac
   81924:	200001b4 	.word	0x200001b4
   81928:	200001a8 	.word	0x200001a8
   8192c:	00082b87 	.word	0x00082b87
   81930:	00082ba1 	.word	0x00082ba1

00081934 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   81934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(udd_g_ctrlreq.req.wValue){
   81936:	4b16      	ldr	r3, [pc, #88]	; (81990 <ctrl_progfpgaspi+0x5c>)
   81938:	885b      	ldrh	r3, [r3, #2]
   8193a:	3ba0      	subs	r3, #160	; 0xa0
   8193c:	2b04      	cmp	r3, #4
   8193e:	d806      	bhi.n	8194e <ctrl_progfpgaspi+0x1a>
   81940:	e8df f003 	tbb	[pc, r3]
   81944:	0c090603 	.word	0x0c090603
   81948:	0f          	.byte	0x0f
   81949:	00          	.byte	0x00
			fpgaspi_program_init();			
   8194a:	4b12      	ldr	r3, [pc, #72]	; (81994 <ctrl_progfpgaspi+0x60>)
   8194c:	4798      	blx	r3
}
   8194e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			fpgaspi_program_deinit();
   81950:	4b11      	ldr	r3, [pc, #68]	; (81998 <ctrl_progfpgaspi+0x64>)
   81952:	4798      	blx	r3
			break;
   81954:	e7fb      	b.n	8194e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_low();
   81956:	4b11      	ldr	r3, [pc, #68]	; (8199c <ctrl_progfpgaspi+0x68>)
   81958:	4798      	blx	r3
			break;
   8195a:	e7f8      	b.n	8194e <ctrl_progfpgaspi+0x1a>
			fpgaspi_cs_high();
   8195c:	4b10      	ldr	r3, [pc, #64]	; (819a0 <ctrl_progfpgaspi+0x6c>)
   8195e:	4798      	blx	r3
			break;
   81960:	e7f5      	b.n	8194e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81962:	4a0b      	ldr	r2, [pc, #44]	; (81990 <ctrl_progfpgaspi+0x5c>)
   81964:	88d3      	ldrh	r3, [r2, #6]
   81966:	8992      	ldrh	r2, [r2, #12]
   81968:	429a      	cmp	r2, r3
   8196a:	d3f0      	bcc.n	8194e <ctrl_progfpgaspi+0x1a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   8196c:	3b01      	subs	r3, #1
   8196e:	b29b      	uxth	r3, r3
   81970:	2b3f      	cmp	r3, #63	; 0x3f
   81972:	d8ec      	bhi.n	8194e <ctrl_progfpgaspi+0x1a>
   81974:	4e0b      	ldr	r6, [pc, #44]	; (819a4 <ctrl_progfpgaspi+0x70>)
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81976:	2400      	movs	r4, #0
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   81978:	4d05      	ldr	r5, [pc, #20]	; (81990 <ctrl_progfpgaspi+0x5c>)
   8197a:	4f0b      	ldr	r7, [pc, #44]	; (819a8 <ctrl_progfpgaspi+0x74>)
   8197c:	68ab      	ldr	r3, [r5, #8]
   8197e:	5d18      	ldrb	r0, [r3, r4]
   81980:	47b8      	blx	r7
   81982:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81986:	3401      	adds	r4, #1
   81988:	88eb      	ldrh	r3, [r5, #6]
   8198a:	42a3      	cmp	r3, r4
   8198c:	dcf6      	bgt.n	8197c <ctrl_progfpgaspi+0x48>
   8198e:	e7de      	b.n	8194e <ctrl_progfpgaspi+0x1a>
   81990:	20001bfc 	.word	0x20001bfc
   81994:	00080709 	.word	0x00080709
   81998:	000807dd 	.word	0x000807dd
   8199c:	00080749 	.word	0x00080749
   819a0:	00080759 	.word	0x00080759
   819a4:	20000ed0 	.word	0x20000ed0
   819a8:	00080769 	.word	0x00080769

000819ac <ctrl_vccint_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   819ac:	4b1a      	ldr	r3, [pc, #104]	; (81a18 <ctrl_vccint_cb+0x6c>)
   819ae:	88d9      	ldrh	r1, [r3, #6]
   819b0:	899b      	ldrh	r3, [r3, #12]
   819b2:	428b      	cmp	r3, r1
   819b4:	d32f      	bcc.n	81a16 <ctrl_vccint_cb+0x6a>
{
   819b6:	b510      	push	{r4, lr}
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   819b8:	4b17      	ldr	r3, [pc, #92]	; (81a18 <ctrl_vccint_cb+0x6c>)
   819ba:	689a      	ldr	r2, [r3, #8]
   819bc:	7810      	ldrb	r0, [r2, #0]
   819be:	7854      	ldrb	r4, [r2, #1]
   819c0:	ea80 0304 	eor.w	r3, r0, r4
   819c4:	7892      	ldrb	r2, [r2, #2]
   819c6:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   819ca:	429a      	cmp	r2, r3
   819cc:	d003      	beq.n	819d6 <ctrl_vccint_cb+0x2a>
        vccint_status = USB_STATUS_PARAMWRONG;
   819ce:	4b13      	ldr	r3, [pc, #76]	; (81a1c <ctrl_vccint_cb+0x70>)
   819d0:	2201      	movs	r2, #1
   819d2:	701a      	strb	r2, [r3, #0]
}
   819d4:	bd10      	pop	{r4, pc}
    if (udd_g_ctrlreq.req.wLength < 3){
   819d6:	2902      	cmp	r1, #2
   819d8:	d90b      	bls.n	819f2 <ctrl_vccint_cb+0x46>
    uint16_t vcctemp = (udd_g_ctrlreq.payload[0]) | (udd_g_ctrlreq.payload[1] << 8);
   819da:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
    if ((vcctemp < 600) || (vcctemp > 1200)){
   819de:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   819e2:	b29b      	uxth	r3, r3
   819e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   819e8:	d907      	bls.n	819fa <ctrl_vccint_cb+0x4e>
        vccint_status = USB_STATUS_PARAMWRONG;
   819ea:	4b0c      	ldr	r3, [pc, #48]	; (81a1c <ctrl_vccint_cb+0x70>)
   819ec:	2201      	movs	r2, #1
   819ee:	701a      	strb	r2, [r3, #0]
        return;
   819f0:	e7f0      	b.n	819d4 <ctrl_vccint_cb+0x28>
        vccint_status = USB_STATUS_CSFAIL;
   819f2:	4b0a      	ldr	r3, [pc, #40]	; (81a1c <ctrl_vccint_cb+0x70>)
   819f4:	2204      	movs	r2, #4
   819f6:	701a      	strb	r2, [r3, #0]
        return;
   819f8:	e7ec      	b.n	819d4 <ctrl_vccint_cb+0x28>
    vccint_status = USB_STATUS_COMMERR;
   819fa:	4b08      	ldr	r3, [pc, #32]	; (81a1c <ctrl_vccint_cb+0x70>)
   819fc:	2203      	movs	r2, #3
   819fe:	701a      	strb	r2, [r3, #0]
    if (tps56520_set(vcctemp)){
   81a00:	4620      	mov	r0, r4
   81a02:	4b07      	ldr	r3, [pc, #28]	; (81a20 <ctrl_vccint_cb+0x74>)
   81a04:	4798      	blx	r3
   81a06:	2800      	cmp	r0, #0
   81a08:	d0e4      	beq.n	819d4 <ctrl_vccint_cb+0x28>
        vccint_setting = vcctemp;
   81a0a:	4b06      	ldr	r3, [pc, #24]	; (81a24 <ctrl_vccint_cb+0x78>)
   81a0c:	801c      	strh	r4, [r3, #0]
        vccint_status = USB_STATUS_OK;
   81a0e:	4b03      	ldr	r3, [pc, #12]	; (81a1c <ctrl_vccint_cb+0x70>)
   81a10:	2202      	movs	r2, #2
   81a12:	701a      	strb	r2, [r3, #0]
   81a14:	e7de      	b.n	819d4 <ctrl_vccint_cb+0x28>
   81a16:	4770      	bx	lr
   81a18:	20001bfc 	.word	0x20001bfc
   81a1c:	20001390 	.word	0x20001390
   81a20:	0008140d 	.word	0x0008140d
   81a24:	200001ca 	.word	0x200001ca

00081a28 <ctrl_cdce906_cb>:
{
   81a28:	b508      	push	{r3, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81a2a:	4b16      	ldr	r3, [pc, #88]	; (81a84 <ctrl_cdce906_cb+0x5c>)
   81a2c:	88da      	ldrh	r2, [r3, #6]
   81a2e:	899b      	ldrh	r3, [r3, #12]
   81a30:	4293      	cmp	r3, r2
   81a32:	d311      	bcc.n	81a58 <ctrl_cdce906_cb+0x30>
    if (udd_g_ctrlreq.req.wLength < 3){
   81a34:	2a02      	cmp	r2, #2
   81a36:	d90c      	bls.n	81a52 <ctrl_cdce906_cb+0x2a>
    cdce906_status = USB_STATUS_COMMERR;
   81a38:	4b13      	ldr	r3, [pc, #76]	; (81a88 <ctrl_cdce906_cb+0x60>)
   81a3a:	2203      	movs	r2, #3
   81a3c:	701a      	strb	r2, [r3, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   81a3e:	4b11      	ldr	r3, [pc, #68]	; (81a84 <ctrl_cdce906_cb+0x5c>)
   81a40:	689b      	ldr	r3, [r3, #8]
   81a42:	781a      	ldrb	r2, [r3, #0]
   81a44:	b14a      	cbz	r2, 81a5a <ctrl_cdce906_cb+0x32>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   81a46:	2a01      	cmp	r2, #1
   81a48:	d011      	beq.n	81a6e <ctrl_cdce906_cb+0x46>
        cdce906_status = USB_STATUS_PARAMWRONG;
   81a4a:	4b0f      	ldr	r3, [pc, #60]	; (81a88 <ctrl_cdce906_cb+0x60>)
   81a4c:	2201      	movs	r2, #1
   81a4e:	701a      	strb	r2, [r3, #0]
        return;
   81a50:	e002      	b.n	81a58 <ctrl_cdce906_cb+0x30>
        cdce906_status = USB_STATUS_PARAMWRONG;
   81a52:	4b0d      	ldr	r3, [pc, #52]	; (81a88 <ctrl_cdce906_cb+0x60>)
   81a54:	2201      	movs	r2, #1
   81a56:	701a      	strb	r2, [r3, #0]
}
   81a58:	bd08      	pop	{r3, pc}
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   81a5a:	490c      	ldr	r1, [pc, #48]	; (81a8c <ctrl_cdce906_cb+0x64>)
   81a5c:	7858      	ldrb	r0, [r3, #1]
   81a5e:	4b0c      	ldr	r3, [pc, #48]	; (81a90 <ctrl_cdce906_cb+0x68>)
   81a60:	4798      	blx	r3
   81a62:	2800      	cmp	r0, #0
   81a64:	d0f8      	beq.n	81a58 <ctrl_cdce906_cb+0x30>
            cdce906_status = USB_STATUS_OK;
   81a66:	4b08      	ldr	r3, [pc, #32]	; (81a88 <ctrl_cdce906_cb+0x60>)
   81a68:	2202      	movs	r2, #2
   81a6a:	701a      	strb	r2, [r3, #0]
   81a6c:	e7f4      	b.n	81a58 <ctrl_cdce906_cb+0x30>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   81a6e:	7899      	ldrb	r1, [r3, #2]
   81a70:	7858      	ldrb	r0, [r3, #1]
   81a72:	4b08      	ldr	r3, [pc, #32]	; (81a94 <ctrl_cdce906_cb+0x6c>)
   81a74:	4798      	blx	r3
   81a76:	2800      	cmp	r0, #0
   81a78:	d0ee      	beq.n	81a58 <ctrl_cdce906_cb+0x30>
            cdce906_status = USB_STATUS_OK;
   81a7a:	4b03      	ldr	r3, [pc, #12]	; (81a88 <ctrl_cdce906_cb+0x60>)
   81a7c:	2202      	movs	r2, #2
   81a7e:	701a      	strb	r2, [r3, #0]
   81a80:	e7ea      	b.n	81a58 <ctrl_cdce906_cb+0x30>
   81a82:	bf00      	nop
   81a84:	20001bfc 	.word	0x20001bfc
   81a88:	20000e86 	.word	0x20000e86
   81a8c:	20000e85 	.word	0x20000e85
   81a90:	00080521 	.word	0x00080521
   81a94:	000804dd 	.word	0x000804dd

00081a98 <ctrl_progfpga_bulk>:
            return false;
    }					
}


void ctrl_progfpga_bulk(void){
   81a98:	b508      	push	{r3, lr}

    switch(udd_g_ctrlreq.req.wValue){
   81a9a:	4b0b      	ldr	r3, [pc, #44]	; (81ac8 <ctrl_progfpga_bulk+0x30>)
   81a9c:	885b      	ldrh	r3, [r3, #2]
   81a9e:	2ba1      	cmp	r3, #161	; 0xa1
   81aa0:	d007      	beq.n	81ab2 <ctrl_progfpga_bulk+0x1a>
   81aa2:	2ba2      	cmp	r3, #162	; 0xa2
   81aa4:	d00b      	beq.n	81abe <ctrl_progfpga_bulk+0x26>
   81aa6:	2ba0      	cmp	r3, #160	; 0xa0
   81aa8:	d000      	beq.n	81aac <ctrl_progfpga_bulk+0x14>
            break;

        default:
            break;
    }
}
   81aaa:	bd08      	pop	{r3, pc}
            fpga_program_setup1();			
   81aac:	4b07      	ldr	r3, [pc, #28]	; (81acc <ctrl_progfpga_bulk+0x34>)
   81aae:	4798      	blx	r3
            break;
   81ab0:	e7fb      	b.n	81aaa <ctrl_progfpga_bulk+0x12>
            fpga_program_setup2();
   81ab2:	4b07      	ldr	r3, [pc, #28]	; (81ad0 <ctrl_progfpga_bulk+0x38>)
   81ab4:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   81ab6:	4b07      	ldr	r3, [pc, #28]	; (81ad4 <ctrl_progfpga_bulk+0x3c>)
   81ab8:	220a      	movs	r2, #10
   81aba:	701a      	strb	r2, [r3, #0]
            break;
   81abc:	e7f5      	b.n	81aaa <ctrl_progfpga_bulk+0x12>
            blockendpoint_usage = bep_emem;
   81abe:	4b05      	ldr	r3, [pc, #20]	; (81ad4 <ctrl_progfpga_bulk+0x3c>)
   81ac0:	2200      	movs	r2, #0
   81ac2:	701a      	strb	r2, [r3, #0]
}
   81ac4:	e7f1      	b.n	81aaa <ctrl_progfpga_bulk+0x12>
   81ac6:	bf00      	nop
   81ac8:	20001bfc 	.word	0x20001bfc
   81acc:	0008064d 	.word	0x0008064d
   81ad0:	000806e1 	.word	0x000806e1
   81ad4:	20000e84 	.word	0x20000e84

00081ad8 <main_vendor_bulk_in_received>:
void main_vendor_bulk_in_received(udd_ep_status_t status,
        iram_size_t nb_transfered, udd_ep_id_t ep)
{
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81ad8:	b100      	cbz	r0, 81adc <main_vendor_bulk_in_received+0x4>
   81ada:	4770      	bx	lr
{
   81adc:	b508      	push	{r3, lr}
        return; // Transfer aborted/error
    }	

    if (FPGA_lockstatus() == fpga_blockin){		
   81ade:	4b04      	ldr	r3, [pc, #16]	; (81af0 <main_vendor_bulk_in_received+0x18>)
   81ae0:	4798      	blx	r3
   81ae2:	2802      	cmp	r0, #2
   81ae4:	d000      	beq.n	81ae8 <main_vendor_bulk_in_received+0x10>
        FPGA_setlock(fpga_unlocked);
    }
}
   81ae6:	bd08      	pop	{r3, pc}
        FPGA_setlock(fpga_unlocked);
   81ae8:	2000      	movs	r0, #0
   81aea:	4b02      	ldr	r3, [pc, #8]	; (81af4 <main_vendor_bulk_in_received+0x1c>)
   81aec:	4798      	blx	r3
   81aee:	e7fa      	b.n	81ae6 <main_vendor_bulk_in_received+0xe>
   81af0:	00081f1d 	.word	0x00081f1d
   81af4:	00081f11 	.word	0x00081f11

00081af8 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
        iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81af8:	b570      	push	{r4, r5, r6, lr}
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81afa:	b9b8      	cbnz	r0, 81b2c <main_vendor_bulk_out_received+0x34>
                main_vendor_bulk_out_received);

        return;
    }

    if (blockendpoint_usage == bep_emem){
   81afc:	4b18      	ldr	r3, [pc, #96]	; (81b60 <main_vendor_bulk_out_received+0x68>)
   81afe:	781b      	ldrb	r3, [r3, #0]
   81b00:	b9fb      	cbnz	r3, 81b42 <main_vendor_bulk_out_received+0x4a>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81b02:	b141      	cbz	r1, 81b16 <main_vendor_bulk_out_received+0x1e>
   81b04:	4a17      	ldr	r2, [pc, #92]	; (81b64 <main_vendor_bulk_out_received+0x6c>)
            xram[i] = main_buf_loopback[i];
   81b06:	4d18      	ldr	r5, [pc, #96]	; (81b68 <main_vendor_bulk_out_received+0x70>)
   81b08:	6828      	ldr	r0, [r5, #0]
   81b0a:	f812 4b01 	ldrb.w	r4, [r2], #1
   81b0e:	54c4      	strb	r4, [r0, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81b10:	3301      	adds	r3, #1
   81b12:	4299      	cmp	r1, r3
   81b14:	d1f8      	bne.n	81b08 <main_vendor_bulk_out_received+0x10>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   81b16:	4b15      	ldr	r3, [pc, #84]	; (81b6c <main_vendor_bulk_out_received+0x74>)
   81b18:	4798      	blx	r3
   81b1a:	2803      	cmp	r0, #3
   81b1c:	d00d      	beq.n	81b3a <main_vendor_bulk_out_received+0x42>
        FPGA_CCLK_LOW();
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81b1e:	4a14      	ldr	r2, [pc, #80]	; (81b70 <main_vendor_bulk_out_received+0x78>)
   81b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81b24:	480f      	ldr	r0, [pc, #60]	; (81b64 <main_vendor_bulk_out_received+0x6c>)
   81b26:	4b13      	ldr	r3, [pc, #76]	; (81b74 <main_vendor_bulk_out_received+0x7c>)
   81b28:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);
}
   81b2a:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   81b2c:	4a10      	ldr	r2, [pc, #64]	; (81b70 <main_vendor_bulk_out_received+0x78>)
   81b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81b32:	480c      	ldr	r0, [pc, #48]	; (81b64 <main_vendor_bulk_out_received+0x6c>)
   81b34:	4b0f      	ldr	r3, [pc, #60]	; (81b74 <main_vendor_bulk_out_received+0x7c>)
   81b36:	4798      	blx	r3
        return;
   81b38:	e7f7      	b.n	81b2a <main_vendor_bulk_out_received+0x32>
            FPGA_setlock(fpga_unlocked);
   81b3a:	2000      	movs	r0, #0
   81b3c:	4b0e      	ldr	r3, [pc, #56]	; (81b78 <main_vendor_bulk_out_received+0x80>)
   81b3e:	4798      	blx	r3
   81b40:	e7ed      	b.n	81b1e <main_vendor_bulk_out_received+0x26>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81b42:	2b0a      	cmp	r3, #10
   81b44:	d1eb      	bne.n	81b1e <main_vendor_bulk_out_received+0x26>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81b46:	b139      	cbz	r1, 81b58 <main_vendor_bulk_out_received+0x60>
   81b48:	4d06      	ldr	r5, [pc, #24]	; (81b64 <main_vendor_bulk_out_received+0x6c>)
   81b4a:	194c      	adds	r4, r1, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   81b4c:	4e0b      	ldr	r6, [pc, #44]	; (81b7c <main_vendor_bulk_out_received+0x84>)
   81b4e:	f815 0b01 	ldrb.w	r0, [r5], #1
   81b52:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   81b54:	42a5      	cmp	r5, r4
   81b56:	d1fa      	bne.n	81b4e <main_vendor_bulk_out_received+0x56>
        FPGA_CCLK_LOW();
   81b58:	200f      	movs	r0, #15
   81b5a:	4b09      	ldr	r3, [pc, #36]	; (81b80 <main_vendor_bulk_out_received+0x88>)
   81b5c:	4798      	blx	r3
   81b5e:	e7de      	b.n	81b1e <main_vendor_bulk_out_received+0x26>
   81b60:	20000e84 	.word	0x20000e84
   81b64:	20000f10 	.word	0x20000f10
   81b68:	200001cc 	.word	0x200001cc
   81b6c:	00081f1d 	.word	0x00081f1d
   81b70:	00081af9 	.word	0x00081af9
   81b74:	000821f5 	.word	0x000821f5
   81b78:	00081f11 	.word	0x00081f11
   81b7c:	000806f1 	.word	0x000806f1
   81b80:	00082ba1 	.word	0x00082ba1

00081b84 <ctrl_sam3ucfg_cb>:
{
   81b84:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81b86:	4b23      	ldr	r3, [pc, #140]	; (81c14 <ctrl_sam3ucfg_cb+0x90>)
   81b88:	789b      	ldrb	r3, [r3, #2]
   81b8a:	3b01      	subs	r3, #1
   81b8c:	2b05      	cmp	r3, #5
   81b8e:	d80e      	bhi.n	81bae <ctrl_sam3ucfg_cb+0x2a>
   81b90:	e8df f003 	tbb	[pc, r3]
   81b94:	29120e03 	.word	0x29120e03
   81b98:	352f      	.short	0x352f
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   81b9a:	203e      	movs	r0, #62	; 0x3e
   81b9c:	4b1e      	ldr	r3, [pc, #120]	; (81c18 <ctrl_sam3ucfg_cb+0x94>)
   81b9e:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   81ba0:	4c1e      	ldr	r4, [pc, #120]	; (81c1c <ctrl_sam3ucfg_cb+0x98>)
   81ba2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81ba4:	2800      	cmp	r0, #0
   81ba6:	d0fc      	beq.n	81ba2 <ctrl_sam3ucfg_cb+0x1e>
            pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   81ba8:	2010      	movs	r0, #16
   81baa:	4b1d      	ldr	r3, [pc, #116]	; (81c20 <ctrl_sam3ucfg_cb+0x9c>)
   81bac:	4798      	blx	r3
}
   81bae:	bd10      	pop	{r4, pc}
            pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81bb0:	2010      	movs	r0, #16
   81bb2:	4b1c      	ldr	r3, [pc, #112]	; (81c24 <ctrl_sam3ucfg_cb+0xa0>)
   81bb4:	4798      	blx	r3
            break;
   81bb6:	e7fa      	b.n	81bae <ctrl_sam3ucfg_cb+0x2a>
            board_power(0);
   81bb8:	203f      	movs	r0, #63	; 0x3f
   81bba:	4b1b      	ldr	r3, [pc, #108]	; (81c28 <ctrl_sam3ucfg_cb+0xa4>)
   81bbc:	4798      	blx	r3
            efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81bbe:	2201      	movs	r2, #1
   81bc0:	210c      	movs	r1, #12
   81bc2:	481a      	ldr	r0, [pc, #104]	; (81c2c <ctrl_sam3ucfg_cb+0xa8>)
   81bc4:	4b1a      	ldr	r3, [pc, #104]	; (81c30 <ctrl_sam3ucfg_cb+0xac>)
   81bc6:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   81bc8:	4b1a      	ldr	r3, [pc, #104]	; (81c34 <ctrl_sam3ucfg_cb+0xb0>)
   81bca:	4798      	blx	r3
            while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81bcc:	4b1a      	ldr	r3, [pc, #104]	; (81c38 <ctrl_sam3ucfg_cb+0xb4>)
   81bce:	685a      	ldr	r2, [r3, #4]
   81bd0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81bd4:	d1fb      	bne.n	81bce <ctrl_sam3ucfg_cb+0x4a>
            RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81bd6:	4a18      	ldr	r2, [pc, #96]	; (81c38 <ctrl_sam3ucfg_cb+0xb4>)
   81bd8:	6813      	ldr	r3, [r2, #0]
   81bda:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81bde:	f043 0305 	orr.w	r3, r3, #5
   81be2:	6013      	str	r3, [r2, #0]
            while(1);
   81be4:	e7fe      	b.n	81be4 <ctrl_sam3ucfg_cb+0x60>
            gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   81be6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81bea:	201b      	movs	r0, #27
   81bec:	4b13      	ldr	r3, [pc, #76]	; (81c3c <ctrl_sam3ucfg_cb+0xb8>)
   81bee:	4798      	blx	r3
            break;
   81bf0:	e7dd      	b.n	81bae <ctrl_sam3ucfg_cb+0x2a>
            gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   81bf2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81bf6:	201b      	movs	r0, #27
   81bf8:	4b10      	ldr	r3, [pc, #64]	; (81c3c <ctrl_sam3ucfg_cb+0xb8>)
   81bfa:	4798      	blx	r3
            break;
   81bfc:	e7d7      	b.n	81bae <ctrl_sam3ucfg_cb+0x2a>
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   81bfe:	2031      	movs	r0, #49	; 0x31
   81c00:	4b0f      	ldr	r3, [pc, #60]	; (81c40 <ctrl_sam3ucfg_cb+0xbc>)
   81c02:	4798      	blx	r3
            delay_cycles(250);
   81c04:	20fa      	movs	r0, #250	; 0xfa
   81c06:	4b0f      	ldr	r3, [pc, #60]	; (81c44 <ctrl_sam3ucfg_cb+0xc0>)
   81c08:	4798      	blx	r3
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   81c0a:	2031      	movs	r0, #49	; 0x31
   81c0c:	4b06      	ldr	r3, [pc, #24]	; (81c28 <ctrl_sam3ucfg_cb+0xa4>)
   81c0e:	4798      	blx	r3
}
   81c10:	e7cd      	b.n	81bae <ctrl_sam3ucfg_cb+0x2a>
   81c12:	bf00      	nop
   81c14:	20001bfc 	.word	0x20001bfc
   81c18:	00082e75 	.word	0x00082e75
   81c1c:	00082e9d 	.word	0x00082e9d
   81c20:	00082db5 	.word	0x00082db5
   81c24:	00082e15 	.word	0x00082e15
   81c28:	00082ba1 	.word	0x00082ba1
   81c2c:	400e0800 	.word	0x400e0800
   81c30:	00081f29 	.word	0x00081f29
   81c34:	00083f1d 	.word	0x00083f1d
   81c38:	400e1200 	.word	0x400e1200
   81c3c:	00082bbd 	.word	0x00082bbd
   81c40:	00082b87 	.word	0x00082b87
   81c44:	20000087 	.word	0x20000087

00081c48 <main_suspend_action>:
{
   81c48:	b508      	push	{r3, lr}
    ui_powerdown();
   81c4a:	4b01      	ldr	r3, [pc, #4]	; (81c50 <main_suspend_action+0x8>)
   81c4c:	4798      	blx	r3
}
   81c4e:	bd08      	pop	{r3, pc}
   81c50:	00082021 	.word	0x00082021

00081c54 <main_resume_action>:
{
   81c54:	b508      	push	{r3, lr}
    ui_wakeup();
   81c56:	4b01      	ldr	r3, [pc, #4]	; (81c5c <main_resume_action+0x8>)
   81c58:	4798      	blx	r3
}
   81c5a:	bd08      	pop	{r3, pc}
   81c5c:	00082041 	.word	0x00082041

00081c60 <main_sof_action>:
{
   81c60:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   81c62:	4b04      	ldr	r3, [pc, #16]	; (81c74 <main_sof_action+0x14>)
   81c64:	781b      	ldrb	r3, [r3, #0]
   81c66:	b903      	cbnz	r3, 81c6a <main_sof_action+0xa>
}
   81c68:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   81c6a:	4b03      	ldr	r3, [pc, #12]	; (81c78 <main_sof_action+0x18>)
   81c6c:	4798      	blx	r3
   81c6e:	4b03      	ldr	r3, [pc, #12]	; (81c7c <main_sof_action+0x1c>)
   81c70:	4798      	blx	r3
   81c72:	e7f9      	b.n	81c68 <main_sof_action+0x8>
   81c74:	200001c8 	.word	0x200001c8
   81c78:	00083f9d 	.word	0x00083f9d
   81c7c:	00082059 	.word	0x00082059

00081c80 <main_vendor_enable>:
{
   81c80:	b510      	push	{r4, lr}
    main_b_vendor_enable = true;
   81c82:	2401      	movs	r4, #1
   81c84:	4b04      	ldr	r3, [pc, #16]	; (81c98 <main_vendor_enable+0x18>)
   81c86:	701c      	strb	r4, [r3, #0]
    udi_vendor_bulk_out_run(
   81c88:	4a04      	ldr	r2, [pc, #16]	; (81c9c <main_vendor_enable+0x1c>)
   81c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81c8e:	4804      	ldr	r0, [pc, #16]	; (81ca0 <main_vendor_enable+0x20>)
   81c90:	4b04      	ldr	r3, [pc, #16]	; (81ca4 <main_vendor_enable+0x24>)
   81c92:	4798      	blx	r3
}
   81c94:	4620      	mov	r0, r4
   81c96:	bd10      	pop	{r4, pc}
   81c98:	200001c8 	.word	0x200001c8
   81c9c:	00081af9 	.word	0x00081af9
   81ca0:	20000f10 	.word	0x20000f10
   81ca4:	000821f5 	.word	0x000821f5

00081ca8 <main_vendor_disable>:
    main_b_vendor_enable = false;
   81ca8:	4b01      	ldr	r3, [pc, #4]	; (81cb0 <main_vendor_disable+0x8>)
   81caa:	2200      	movs	r2, #0
   81cac:	701a      	strb	r2, [r3, #0]
}
   81cae:	4770      	bx	lr
   81cb0:	200001c8 	.word	0x200001c8

00081cb4 <main_setup_out_received>:
    udd_g_ctrlreq.payload = ctrlbuffer;
   81cb4:	4b33      	ldr	r3, [pc, #204]	; (81d84 <main_setup_out_received+0xd0>)
   81cb6:	4a34      	ldr	r2, [pc, #208]	; (81d88 <main_setup_out_received+0xd4>)
   81cb8:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81cba:	88da      	ldrh	r2, [r3, #6]
   81cbc:	2a40      	cmp	r2, #64	; 0x40
   81cbe:	bf28      	it	cs
   81cc0:	2240      	movcs	r2, #64	; 0x40
   81cc2:	819a      	strh	r2, [r3, #12]
    blockendpoint_usage = bep_emem;
   81cc4:	4a31      	ldr	r2, [pc, #196]	; (81d8c <main_setup_out_received+0xd8>)
   81cc6:	2100      	movs	r1, #0
   81cc8:	7011      	strb	r1, [r2, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   81cca:	785b      	ldrb	r3, [r3, #1]
   81ccc:	3b10      	subs	r3, #16
   81cce:	2b25      	cmp	r3, #37	; 0x25
   81cd0:	d855      	bhi.n	81d7e <main_setup_out_received+0xca>
   81cd2:	e8df f003 	tbb	[pc, r3]
   81cd6:	1d13      	.short	0x1d13
   81cd8:	27542218 	.word	0x27542218
   81cdc:	5454542c 	.word	0x5454542c
   81ce0:	54545454 	.word	0x54545454
   81ce4:	54315454 	.word	0x54315454
   81ce8:	54545436 	.word	0x54545436
   81cec:	54545454 	.word	0x54545454
   81cf0:	54545454 	.word	0x54545454
   81cf4:	403b5454 	.word	0x403b5454
   81cf8:	4f4a4554 	.word	0x4f4a4554
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81cfc:	4b21      	ldr	r3, [pc, #132]	; (81d84 <main_setup_out_received+0xd0>)
   81cfe:	4a24      	ldr	r2, [pc, #144]	; (81d90 <main_setup_out_received+0xdc>)
   81d00:	611a      	str	r2, [r3, #16]
            return true;
   81d02:	2001      	movs	r0, #1
   81d04:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81d06:	4b1f      	ldr	r3, [pc, #124]	; (81d84 <main_setup_out_received+0xd0>)
   81d08:	4a22      	ldr	r2, [pc, #136]	; (81d94 <main_setup_out_received+0xe0>)
   81d0a:	611a      	str	r2, [r3, #16]
            return true;	
   81d0c:	2001      	movs	r0, #1
   81d0e:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81d10:	4b1c      	ldr	r3, [pc, #112]	; (81d84 <main_setup_out_received+0xd0>)
   81d12:	4a21      	ldr	r2, [pc, #132]	; (81d98 <main_setup_out_received+0xe4>)
   81d14:	611a      	str	r2, [r3, #16]
            return true;
   81d16:	2001      	movs	r0, #1
   81d18:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81d1a:	4b1a      	ldr	r3, [pc, #104]	; (81d84 <main_setup_out_received+0xd0>)
   81d1c:	4a1f      	ldr	r2, [pc, #124]	; (81d9c <main_setup_out_received+0xe8>)
   81d1e:	611a      	str	r2, [r3, #16]
            return true;		
   81d20:	2001      	movs	r0, #1
   81d22:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   81d24:	4b17      	ldr	r3, [pc, #92]	; (81d84 <main_setup_out_received+0xd0>)
   81d26:	4a1e      	ldr	r2, [pc, #120]	; (81da0 <main_setup_out_received+0xec>)
   81d28:	611a      	str	r2, [r3, #16]
            return true;		
   81d2a:	2001      	movs	r0, #1
   81d2c:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81d2e:	4b15      	ldr	r3, [pc, #84]	; (81d84 <main_setup_out_received+0xd0>)
   81d30:	4a1c      	ldr	r2, [pc, #112]	; (81da4 <main_setup_out_received+0xf0>)
   81d32:	611a      	str	r2, [r3, #16]
            return true;
   81d34:	2001      	movs	r0, #1
   81d36:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81d38:	4b12      	ldr	r3, [pc, #72]	; (81d84 <main_setup_out_received+0xd0>)
   81d3a:	4a1b      	ldr	r2, [pc, #108]	; (81da8 <main_setup_out_received+0xf4>)
   81d3c:	611a      	str	r2, [r3, #16]
            return true;
   81d3e:	2001      	movs	r0, #1
   81d40:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   81d42:	4b10      	ldr	r3, [pc, #64]	; (81d84 <main_setup_out_received+0xd0>)
   81d44:	4a19      	ldr	r2, [pc, #100]	; (81dac <main_setup_out_received+0xf8>)
   81d46:	611a      	str	r2, [r3, #16]
            return true;
   81d48:	2001      	movs	r0, #1
   81d4a:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   81d4c:	4b0d      	ldr	r3, [pc, #52]	; (81d84 <main_setup_out_received+0xd0>)
   81d4e:	4a18      	ldr	r2, [pc, #96]	; (81db0 <main_setup_out_received+0xfc>)
   81d50:	611a      	str	r2, [r3, #16]
            return true;
   81d52:	2001      	movs	r0, #1
   81d54:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   81d56:	4b0b      	ldr	r3, [pc, #44]	; (81d84 <main_setup_out_received+0xd0>)
   81d58:	4a16      	ldr	r2, [pc, #88]	; (81db4 <main_setup_out_received+0x100>)
   81d5a:	611a      	str	r2, [r3, #16]
            return true;
   81d5c:	2001      	movs	r0, #1
   81d5e:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   81d60:	4b08      	ldr	r3, [pc, #32]	; (81d84 <main_setup_out_received+0xd0>)
   81d62:	4a15      	ldr	r2, [pc, #84]	; (81db8 <main_setup_out_received+0x104>)
   81d64:	611a      	str	r2, [r3, #16]
			return true;
   81d66:	2001      	movs	r0, #1
   81d68:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   81d6a:	4b06      	ldr	r3, [pc, #24]	; (81d84 <main_setup_out_received+0xd0>)
   81d6c:	4a13      	ldr	r2, [pc, #76]	; (81dbc <main_setup_out_received+0x108>)
   81d6e:	611a      	str	r2, [r3, #16]
            return true;
   81d70:	2001      	movs	r0, #1
   81d72:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_spi1util;
   81d74:	4b03      	ldr	r3, [pc, #12]	; (81d84 <main_setup_out_received+0xd0>)
   81d76:	4a12      	ldr	r2, [pc, #72]	; (81dc0 <main_setup_out_received+0x10c>)
   81d78:	611a      	str	r2, [r3, #16]
            return true;
   81d7a:	2001      	movs	r0, #1
   81d7c:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest){
   81d7e:	2000      	movs	r0, #0
}
   81d80:	4770      	bx	lr
   81d82:	bf00      	nop
   81d84:	20001bfc 	.word	0x20001bfc
   81d88:	20000e88 	.word	0x20000e88
   81d8c:	20000e84 	.word	0x20000e84
   81d90:	0008168d 	.word	0x0008168d
   81d94:	00081611 	.word	0x00081611
   81d98:	0008167d 	.word	0x0008167d
   81d9c:	0008163d 	.word	0x0008163d
   81da0:	000816b9 	.word	0x000816b9
   81da4:	00081a99 	.word	0x00081a99
   81da8:	00081605 	.word	0x00081605
   81dac:	00081b85 	.word	0x00081b85
   81db0:	00081a29 	.word	0x00081a29
   81db4:	000819ad 	.word	0x000819ad
   81db8:	00081935 	.word	0x00081935
   81dbc:	00081809 	.word	0x00081809
   81dc0:	00081791 	.word	0x00081791

00081dc4 <main_setup_in_received>:
{
   81dc4:	b538      	push	{r3, r4, r5, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81dc6:	4b44      	ldr	r3, [pc, #272]	; (81ed8 <main_setup_in_received+0x114>)
   81dc8:	785b      	ldrb	r3, [r3, #1]
   81dca:	3b12      	subs	r3, #18
   81dcc:	2b23      	cmp	r3, #35	; 0x23
   81dce:	d87d      	bhi.n	81ecc <main_setup_in_received+0x108>
   81dd0:	e8df f003 	tbb	[pc, r3]
   81dd4:	267c7c12 	.word	0x267c7c12
   81dd8:	7c7c407c 	.word	0x7c7c407c
   81ddc:	7c7c7c7c 	.word	0x7c7c7c7c
   81de0:	7c3d7c7c 	.word	0x7c3d7c7c
   81de4:	7c7c7c7c 	.word	0x7c7c7c7c
   81de8:	7c7c7c7c 	.word	0x7c7c7c7c
   81dec:	7c7c7c7c 	.word	0x7c7c7c7c
   81df0:	594c7c7c 	.word	0x594c7c7c
   81df4:	727c687c 	.word	0x727c687c
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   81df8:	4a37      	ldr	r2, [pc, #220]	; (81ed8 <main_setup_in_received+0x114>)
   81dfa:	4b38      	ldr	r3, [pc, #224]	; (81edc <main_setup_in_received+0x118>)
   81dfc:	681b      	ldr	r3, [r3, #0]
   81dfe:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81e00:	4b37      	ldr	r3, [pc, #220]	; (81ee0 <main_setup_in_received+0x11c>)
   81e02:	6819      	ldr	r1, [r3, #0]
   81e04:	8191      	strh	r1, [r2, #12]
            ctrlmemread_size = 0;
   81e06:	2200      	movs	r2, #0
   81e08:	601a      	str	r2, [r3, #0]
            if (FPGA_lockstatus() == fpga_ctrlmem){
   81e0a:	4b36      	ldr	r3, [pc, #216]	; (81ee4 <main_setup_in_received+0x120>)
   81e0c:	4798      	blx	r3
   81e0e:	2804      	cmp	r0, #4
   81e10:	d001      	beq.n	81e16 <main_setup_in_received+0x52>
            return true;
   81e12:	2001      	movs	r0, #1
   81e14:	e05b      	b.n	81ece <main_setup_in_received+0x10a>
                FPGA_setlock(fpga_unlocked);
   81e16:	2000      	movs	r0, #0
   81e18:	4b33      	ldr	r3, [pc, #204]	; (81ee8 <main_setup_in_received+0x124>)
   81e1a:	4798      	blx	r3
            return true;
   81e1c:	2001      	movs	r0, #1
   81e1e:	e056      	b.n	81ece <main_setup_in_received+0x10a>
            respbuf[0] = FPGA_ISDONE();
   81e20:	2007      	movs	r0, #7
   81e22:	4d32      	ldr	r5, [pc, #200]	; (81eec <main_setup_in_received+0x128>)
   81e24:	47a8      	blx	r5
   81e26:	4c32      	ldr	r4, [pc, #200]	; (81ef0 <main_setup_in_received+0x12c>)
   81e28:	3800      	subs	r0, #0
   81e2a:	bf18      	it	ne
   81e2c:	2001      	movne	r0, #1
   81e2e:	7020      	strb	r0, [r4, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   81e30:	205d      	movs	r0, #93	; 0x5d
   81e32:	47a8      	blx	r5
   81e34:	3800      	subs	r0, #0
   81e36:	bf18      	it	ne
   81e38:	2001      	movne	r0, #1
   81e3a:	7060      	strb	r0, [r4, #1]
            respbuf[2] = 0;
   81e3c:	2300      	movs	r3, #0
   81e3e:	70a3      	strb	r3, [r4, #2]
            respbuf[3] = 0;
   81e40:	70e3      	strb	r3, [r4, #3]
            udd_g_ctrlreq.payload = respbuf;
   81e42:	4b25      	ldr	r3, [pc, #148]	; (81ed8 <main_setup_in_received+0x114>)
   81e44:	609c      	str	r4, [r3, #8]
            udd_g_ctrlreq.payload_size = 4;
   81e46:	2204      	movs	r2, #4
   81e48:	819a      	strh	r2, [r3, #12]
            return true;
   81e4a:	2001      	movs	r0, #1
   81e4c:	e03f      	b.n	81ece <main_setup_in_received+0x10a>
            return XPROGProtocol_Command();
   81e4e:	4b29      	ldr	r3, [pc, #164]	; (81ef4 <main_setup_in_received+0x130>)
   81e50:	4798      	blx	r3
   81e52:	e03c      	b.n	81ece <main_setup_in_received+0x10a>
            respbuf[0] = FW_VER_MAJOR;
   81e54:	4b26      	ldr	r3, [pc, #152]	; (81ef0 <main_setup_in_received+0x12c>)
   81e56:	2200      	movs	r2, #0
   81e58:	701a      	strb	r2, [r3, #0]
            respbuf[1] = FW_VER_MINOR;
   81e5a:	2228      	movs	r2, #40	; 0x28
   81e5c:	705a      	strb	r2, [r3, #1]
            respbuf[2] = FW_VER_DEBUG;
   81e5e:	2001      	movs	r0, #1
   81e60:	7098      	strb	r0, [r3, #2]
            udd_g_ctrlreq.payload = respbuf;
   81e62:	4a1d      	ldr	r2, [pc, #116]	; (81ed8 <main_setup_in_received+0x114>)
   81e64:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 3;
   81e66:	2303      	movs	r3, #3
   81e68:	8193      	strh	r3, [r2, #12]
            return true;
   81e6a:	e030      	b.n	81ece <main_setup_in_received+0x10a>
            respbuf[0] = cdce906_status;
   81e6c:	4b20      	ldr	r3, [pc, #128]	; (81ef0 <main_setup_in_received+0x12c>)
   81e6e:	4a22      	ldr	r2, [pc, #136]	; (81ef8 <main_setup_in_received+0x134>)
   81e70:	7812      	ldrb	r2, [r2, #0]
   81e72:	701a      	strb	r2, [r3, #0]
            respbuf[1] = cdce906_data;
   81e74:	4a21      	ldr	r2, [pc, #132]	; (81efc <main_setup_in_received+0x138>)
   81e76:	7812      	ldrb	r2, [r2, #0]
   81e78:	705a      	strb	r2, [r3, #1]
            udd_g_ctrlreq.payload = respbuf;
   81e7a:	4a17      	ldr	r2, [pc, #92]	; (81ed8 <main_setup_in_received+0x114>)
   81e7c:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 2;
   81e7e:	2302      	movs	r3, #2
   81e80:	8193      	strh	r3, [r2, #12]
            return true;
   81e82:	2001      	movs	r0, #1
   81e84:	e023      	b.n	81ece <main_setup_in_received+0x10a>
            respbuf[0] = vccint_status;
   81e86:	4b1a      	ldr	r3, [pc, #104]	; (81ef0 <main_setup_in_received+0x12c>)
   81e88:	4a1d      	ldr	r2, [pc, #116]	; (81f00 <main_setup_in_received+0x13c>)
   81e8a:	7812      	ldrb	r2, [r2, #0]
   81e8c:	701a      	strb	r2, [r3, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   81e8e:	4a1d      	ldr	r2, [pc, #116]	; (81f04 <main_setup_in_received+0x140>)
   81e90:	8812      	ldrh	r2, [r2, #0]
   81e92:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   81e94:	0a12      	lsrs	r2, r2, #8
   81e96:	709a      	strb	r2, [r3, #2]
            udd_g_ctrlreq.payload = respbuf;
   81e98:	4a0f      	ldr	r2, [pc, #60]	; (81ed8 <main_setup_in_received+0x114>)
   81e9a:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 3;
   81e9c:	2303      	movs	r3, #3
   81e9e:	8193      	strh	r3, [r2, #12]
            return true;
   81ea0:	2001      	movs	r0, #1
   81ea2:	e014      	b.n	81ece <main_setup_in_received+0x10a>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   81ea4:	4b0c      	ldr	r3, [pc, #48]	; (81ed8 <main_setup_in_received+0x114>)
   81ea6:	88db      	ldrh	r3, [r3, #6]
   81ea8:	2b40      	cmp	r3, #64	; 0x40
   81eaa:	d811      	bhi.n	81ed0 <main_setup_in_received+0x10c>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   81eac:	4a0a      	ldr	r2, [pc, #40]	; (81ed8 <main_setup_in_received+0x114>)
   81eae:	4916      	ldr	r1, [pc, #88]	; (81f08 <main_setup_in_received+0x144>)
   81eb0:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81eb2:	8193      	strh	r3, [r2, #12]
			return true;
   81eb4:	2001      	movs	r0, #1
   81eb6:	e00a      	b.n	81ece <main_setup_in_received+0x10a>
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   81eb8:	4b07      	ldr	r3, [pc, #28]	; (81ed8 <main_setup_in_received+0x114>)
   81eba:	88db      	ldrh	r3, [r3, #6]
   81ebc:	2b40      	cmp	r3, #64	; 0x40
   81ebe:	d809      	bhi.n	81ed4 <main_setup_in_received+0x110>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   81ec0:	4a05      	ldr	r2, [pc, #20]	; (81ed8 <main_setup_in_received+0x114>)
   81ec2:	4912      	ldr	r1, [pc, #72]	; (81f0c <main_setup_in_received+0x148>)
   81ec4:	6091      	str	r1, [r2, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81ec6:	8193      	strh	r3, [r2, #12]
			return true;
   81ec8:	2001      	movs	r0, #1
   81eca:	e000      	b.n	81ece <main_setup_in_received+0x10a>
    switch(udd_g_ctrlreq.req.bRequest){
   81ecc:	2000      	movs	r0, #0
}
   81ece:	bd38      	pop	{r3, r4, r5, pc}
                return false;
   81ed0:	2000      	movs	r0, #0
   81ed2:	e7fc      	b.n	81ece <main_setup_in_received+0x10a>
                return false;
   81ed4:	2000      	movs	r0, #0
   81ed6:	e7fa      	b.n	81ece <main_setup_in_received+0x10a>
   81ed8:	20001bfc 	.word	0x20001bfc
   81edc:	20000ec8 	.word	0x20000ec8
   81ee0:	20000ecc 	.word	0x20000ecc
   81ee4:	00081f1d 	.word	0x00081f1d
   81ee8:	00081f11 	.word	0x00081f11
   81eec:	00082b6b 	.word	0x00082b6b
   81ef0:	20001310 	.word	0x20001310
   81ef4:	00080cd9 	.word	0x00080cd9
   81ef8:	20000e86 	.word	0x20000e86
   81efc:	20000e85 	.word	0x20000e85
   81f00:	20001390 	.word	0x20001390
   81f04:	200001ca 	.word	0x200001ca
   81f08:	20000ed0 	.word	0x20000ed0
   81f0c:	20001350 	.word	0x20001350

00081f10 <FPGA_setlock>:

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

void FPGA_setlock(fpga_lockstatus_t lockstatus)
{
	_fpga_locked = lockstatus;
   81f10:	4b01      	ldr	r3, [pc, #4]	; (81f18 <FPGA_setlock+0x8>)
   81f12:	7018      	strb	r0, [r3, #0]
}
   81f14:	4770      	bx	lr
   81f16:	bf00      	nop
   81f18:	20001391 	.word	0x20001391

00081f1c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
	return _fpga_locked;
   81f1c:	4b01      	ldr	r3, [pc, #4]	; (81f24 <FPGA_lockstatus+0x8>)
   81f1e:	7818      	ldrb	r0, [r3, #0]
}
   81f20:	4770      	bx	lr
   81f22:	bf00      	nop
   81f24:	20001391 	.word	0x20001391

00081f28 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81f28:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81f2a:	f1a1 030e 	sub.w	r3, r1, #14
   81f2e:	2b01      	cmp	r3, #1
   81f30:	d91a      	bls.n	81f68 <efc_perform_command+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81f32:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   81f36:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81f38:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81f3c:	4b0c      	ldr	r3, [pc, #48]	; (81f70 <efc_perform_command+0x48>)
   81f3e:	2500      	movs	r5, #0
   81f40:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81f42:	0212      	lsls	r2, r2, #8
   81f44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   81f48:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   81f4c:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81f4e:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   81f50:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   81f54:	4b07      	ldr	r3, [pc, #28]	; (81f74 <efc_perform_command+0x4c>)
   81f56:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81f58:	b92c      	cbnz	r4, 81f66 <efc_perform_command+0x3e>
		cpu_irq_enable();
   81f5a:	4b05      	ldr	r3, [pc, #20]	; (81f70 <efc_perform_command+0x48>)
   81f5c:	2201      	movs	r2, #1
   81f5e:	701a      	strb	r2, [r3, #0]
   81f60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f64:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   81f66:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   81f68:	f04f 30ff 	mov.w	r0, #4294967295
   81f6c:	e7fb      	b.n	81f66 <efc_perform_command+0x3e>
   81f6e:	bf00      	nop
   81f70:	20000382 	.word	0x20000382
   81f74:	2000006d 	.word	0x2000006d

00081f78 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81f78:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81f7a:	018b      	lsls	r3, r1, #6
   81f7c:	eb00 1181 	add.w	r1, r0, r1, lsl #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81f80:	2402      	movs	r4, #2
   81f82:	50c4      	str	r4, [r0, r3]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81f84:	f04f 33ff 	mov.w	r3, #4294967295
   81f88:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81f8a:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81f8c:	604a      	str	r2, [r1, #4]
}
   81f8e:	bc10      	pop	{r4}
   81f90:	4770      	bx	lr

00081f92 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81f92:	0189      	lsls	r1, r1, #6
   81f94:	2305      	movs	r3, #5
   81f96:	5043      	str	r3, [r0, r1]
}
   81f98:	4770      	bx	lr

00081f9a <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81f9a:	0189      	lsls	r1, r1, #6
   81f9c:	2302      	movs	r3, #2
   81f9e:	5043      	str	r3, [r0, r1]
}
   81fa0:	4770      	bx	lr

00081fa2 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81fa2:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   81fa6:	61c2      	str	r2, [r0, #28]
}
   81fa8:	4770      	bx	lr

00081faa <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81faa:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81fae:	6242      	str	r2, [r0, #36]	; 0x24
}
   81fb0:	4770      	bx	lr

00081fb2 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81fb2:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81fb6:	6a00      	ldr	r0, [r0, #32]
}
   81fb8:	4770      	bx	lr
	...

00081fbc <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81fbc:	b570      	push	{r4, r5, r6, lr}
   81fbe:	b086      	sub	sp, #24
   81fc0:	4604      	mov	r4, r0
   81fc2:	460d      	mov	r5, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81fc4:	2304      	movs	r3, #4
   81fc6:	9300      	str	r3, [sp, #0]
   81fc8:	ab02      	add	r3, sp, #8
   81fca:	220f      	movs	r2, #15
   81fcc:	210e      	movs	r1, #14
   81fce:	480c      	ldr	r0, [pc, #48]	; (82000 <flash_read_unique_id+0x44>)
   81fd0:	4e0c      	ldr	r6, [pc, #48]	; (82004 <flash_read_unique_id+0x48>)
   81fd2:	47b0      	blx	r6
   81fd4:	b980      	cbnz	r0, 81ff8 <flash_read_unique_id+0x3c>
   81fd6:	4603      	mov	r3, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   81fd8:	462e      	mov	r6, r5
   81fda:	2d04      	cmp	r5, #4
   81fdc:	bf28      	it	cs
   81fde:	2604      	movcs	r6, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81fe0:	b165      	cbz	r5, 81ffc <flash_read_unique_id+0x40>
   81fe2:	a902      	add	r1, sp, #8
   81fe4:	1f22      	subs	r2, r4, #4
		pul_data[ul_idx] = uid_buf[ul_idx];
   81fe6:	f851 4b04 	ldr.w	r4, [r1], #4
   81fea:	f842 4f04 	str.w	r4, [r2, #4]!
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81fee:	3301      	adds	r3, #1
   81ff0:	429e      	cmp	r6, r3
   81ff2:	d8f8      	bhi.n	81fe6 <flash_read_unique_id+0x2a>
	}

	return FLASH_RC_OK;
}
   81ff4:	b006      	add	sp, #24
   81ff6:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   81ff8:	2010      	movs	r0, #16
   81ffa:	e7fb      	b.n	81ff4 <flash_read_unique_id+0x38>
	return FLASH_RC_OK;
   81ffc:	4628      	mov	r0, r5
   81ffe:	e7f9      	b.n	81ff4 <flash_read_unique_id+0x38>
   82000:	400e0800 	.word	0x400e0800
   82004:	20000001 	.word	0x20000001

00082008 <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   82008:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   8200a:	204f      	movs	r0, #79	; 0x4f
   8200c:	4c03      	ldr	r4, [pc, #12]	; (8201c <ui_init+0x14>)
   8200e:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82010:	2050      	movs	r0, #80	; 0x50
   82012:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   82014:	2051      	movs	r0, #81	; 0x51
   82016:	47a0      	blx	r4
}
   82018:	bd10      	pop	{r4, pc}
   8201a:	bf00      	nop
   8201c:	0008017d 	.word	0x0008017d

00082020 <ui_powerdown>:

void ui_powerdown(void)
{
   82020:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   82022:	204f      	movs	r0, #79	; 0x4f
   82024:	4c04      	ldr	r4, [pc, #16]	; (82038 <ui_powerdown+0x18>)
   82026:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82028:	2050      	movs	r0, #80	; 0x50
   8202a:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   8202c:	2051      	movs	r0, #81	; 0x51
   8202e:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   82030:	203f      	movs	r0, #63	; 0x3f
   82032:	4b02      	ldr	r3, [pc, #8]	; (8203c <ui_powerdown+0x1c>)
   82034:	4798      	blx	r3
		
}
   82036:	bd10      	pop	{r4, pc}
   82038:	0008017d 	.word	0x0008017d
   8203c:	00082ba1 	.word	0x00082ba1

00082040 <ui_wakeup>:

void ui_wakeup(void)
{
   82040:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   82042:	204f      	movs	r0, #79	; 0x4f
   82044:	4b02      	ldr	r3, [pc, #8]	; (82050 <ui_wakeup+0x10>)
   82046:	4798      	blx	r3
	board_power(1);
   82048:	203f      	movs	r0, #63	; 0x3f
   8204a:	4b02      	ldr	r3, [pc, #8]	; (82054 <ui_wakeup+0x14>)
   8204c:	4798      	blx	r3
}
   8204e:	bd08      	pop	{r3, pc}
   82050:	000801c1 	.word	0x000801c1
   82054:	00082b87 	.word	0x00082b87

00082058 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   82058:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   8205a:	4b0d      	ldr	r3, [pc, #52]	; (82090 <ui_process+0x38>)
   8205c:	fba3 2300 	umull	r2, r3, r3, r0
   82060:	099b      	lsrs	r3, r3, #6
   82062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82066:	fb02 0013 	mls	r0, r2, r3, r0
   8206a:	b280      	uxth	r0, r0
   8206c:	b138      	cbz	r0, 8207e <ui_process+0x26>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   8206e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   82072:	d008      	beq.n	82086 <ui_process+0x2e>
		LED_Off(LED0_GPIO);
	}
	
	task_tickCnt++;
   82074:	4a07      	ldr	r2, [pc, #28]	; (82094 <ui_process+0x3c>)
   82076:	6813      	ldr	r3, [r2, #0]
   82078:	3301      	adds	r3, #1
   8207a:	6013      	str	r3, [r2, #0]
}
   8207c:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   8207e:	204f      	movs	r0, #79	; 0x4f
   82080:	4b05      	ldr	r3, [pc, #20]	; (82098 <ui_process+0x40>)
   82082:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   82084:	e7f6      	b.n	82074 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   82086:	204f      	movs	r0, #79	; 0x4f
   82088:	4b04      	ldr	r3, [pc, #16]	; (8209c <ui_process+0x44>)
   8208a:	4798      	blx	r3
   8208c:	e7f2      	b.n	82074 <ui_process+0x1c>
   8208e:	bf00      	nop
   82090:	10624dd3 	.word	0x10624dd3
   82094:	2000149c 	.word	0x2000149c
   82098:	000801c1 	.word	0x000801c1
   8209c:	0008017d 	.word	0x0008017d

000820a0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   820a0:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   820a2:	203e      	movs	r0, #62	; 0x3e
   820a4:	4b07      	ldr	r3, [pc, #28]	; (820c4 <sysclk_enable_usb+0x24>)
   820a6:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   820a8:	4c07      	ldr	r4, [pc, #28]	; (820c8 <sysclk_enable_usb+0x28>)
   820aa:	47a0      	blx	r4
   820ac:	2800      	cmp	r0, #0
   820ae:	d0fc      	beq.n	820aa <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   820b0:	4b06      	ldr	r3, [pc, #24]	; (820cc <sysclk_enable_usb+0x2c>)
   820b2:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   820b6:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   820b8:	4c05      	ldr	r4, [pc, #20]	; (820d0 <sysclk_enable_usb+0x30>)
   820ba:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   820bc:	2800      	cmp	r0, #0
   820be:	d0fc      	beq.n	820ba <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   820c0:	bd10      	pop	{r4, pc}
   820c2:	bf00      	nop
   820c4:	00082e75 	.word	0x00082e75
   820c8:	00082e9d 	.word	0x00082e9d
   820cc:	400e0400 	.word	0x400e0400
   820d0:	00082f0d 	.word	0x00082f0d

000820d4 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   820d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   820d6:	4812      	ldr	r0, [pc, #72]	; (82120 <sysclk_init+0x4c>)
   820d8:	4b12      	ldr	r3, [pc, #72]	; (82124 <sysclk_init+0x50>)
   820da:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   820dc:	203e      	movs	r0, #62	; 0x3e
   820de:	4b12      	ldr	r3, [pc, #72]	; (82128 <sysclk_init+0x54>)
   820e0:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   820e2:	4c12      	ldr	r4, [pc, #72]	; (8212c <sysclk_init+0x58>)
   820e4:	47a0      	blx	r4
   820e6:	2800      	cmp	r0, #0
   820e8:	d0fc      	beq.n	820e4 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   820ea:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   820ee:	4b10      	ldr	r3, [pc, #64]	; (82130 <sysclk_init+0x5c>)
   820f0:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   820f2:	4c10      	ldr	r4, [pc, #64]	; (82134 <sysclk_init+0x60>)
   820f4:	47a0      	blx	r4
   820f6:	2800      	cmp	r0, #0
   820f8:	d0fc      	beq.n	820f4 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   820fa:	4b0f      	ldr	r3, [pc, #60]	; (82138 <sysclk_init+0x64>)
   820fc:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   820fe:	4b0f      	ldr	r3, [pc, #60]	; (8213c <sysclk_init+0x68>)
   82100:	4a0f      	ldr	r2, [pc, #60]	; (82140 <sysclk_init+0x6c>)
   82102:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   82104:	4c0f      	ldr	r4, [pc, #60]	; (82144 <sysclk_init+0x70>)
   82106:	47a0      	blx	r4
   82108:	2800      	cmp	r0, #0
   8210a:	d0fc      	beq.n	82106 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8210c:	2010      	movs	r0, #16
   8210e:	4b0e      	ldr	r3, [pc, #56]	; (82148 <sysclk_init+0x74>)
   82110:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82112:	4b0e      	ldr	r3, [pc, #56]	; (8214c <sysclk_init+0x78>)
   82114:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82116:	4802      	ldr	r0, [pc, #8]	; (82120 <sysclk_init+0x4c>)
   82118:	4b02      	ldr	r3, [pc, #8]	; (82124 <sysclk_init+0x50>)
   8211a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8211c:	bd10      	pop	{r4, pc}
   8211e:	bf00      	nop
   82120:	05b8d800 	.word	0x05b8d800
   82124:	20000139 	.word	0x20000139
   82128:	00082e75 	.word	0x00082e75
   8212c:	00082e9d 	.word	0x00082e9d
   82130:	00082ebd 	.word	0x00082ebd
   82134:	00082ead 	.word	0x00082ead
   82138:	00082edd 	.word	0x00082edd
   8213c:	400e0400 	.word	0x400e0400
   82140:	200f3f01 	.word	0x200f3f01
   82144:	00082eed 	.word	0x00082eed
   82148:	00082e15 	.word	0x00082e15
   8214c:	000847c1 	.word	0x000847c1

00082150 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   82150:	4b01      	ldr	r3, [pc, #4]	; (82158 <udi_vendor_getsetting+0x8>)
   82152:	7818      	ldrb	r0, [r3, #0]
   82154:	4770      	bx	lr
   82156:	bf00      	nop
   82158:	20001392 	.word	0x20001392

0008215c <udi_vendor_enable>:
{
   8215c:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8215e:	4b05      	ldr	r3, [pc, #20]	; (82174 <udi_vendor_enable+0x18>)
   82160:	4798      	blx	r3
   82162:	78c3      	ldrb	r3, [r0, #3]
   82164:	4a04      	ldr	r2, [pc, #16]	; (82178 <udi_vendor_enable+0x1c>)
   82166:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   82168:	b10b      	cbz	r3, 8216e <udi_vendor_enable+0x12>
	return true;
   8216a:	2001      	movs	r0, #1
}
   8216c:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8216e:	4b03      	ldr	r3, [pc, #12]	; (8217c <udi_vendor_enable+0x20>)
   82170:	4798      	blx	r3
   82172:	e7fb      	b.n	8216c <udi_vendor_enable+0x10>
   82174:	00082391 	.word	0x00082391
   82178:	20001392 	.word	0x20001392
   8217c:	00081c81 	.word	0x00081c81

00082180 <udi_vendor_disable>:
{
   82180:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   82182:	4b03      	ldr	r3, [pc, #12]	; (82190 <udi_vendor_disable+0x10>)
   82184:	781b      	ldrb	r3, [r3, #0]
   82186:	b103      	cbz	r3, 8218a <udi_vendor_disable+0xa>
}
   82188:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   8218a:	4b02      	ldr	r3, [pc, #8]	; (82194 <udi_vendor_disable+0x14>)
   8218c:	4798      	blx	r3
}
   8218e:	e7fb      	b.n	82188 <udi_vendor_disable+0x8>
   82190:	20001392 	.word	0x20001392
   82194:	00081ca9 	.word	0x00081ca9

00082198 <udi_vendor_setup>:
{
   82198:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   8219a:	4a0c      	ldr	r2, [pc, #48]	; (821cc <udi_vendor_setup+0x34>)
   8219c:	7813      	ldrb	r3, [r2, #0]
   8219e:	f992 2000 	ldrsb.w	r2, [r2]
   821a2:	2a00      	cmp	r2, #0
   821a4:	db06      	blt.n	821b4 <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   821a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   821aa:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   821ac:	bf18      	it	ne
   821ae:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   821b0:	d009      	beq.n	821c6 <udi_vendor_setup+0x2e>
}
   821b2:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   821b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
   821b8:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   821ba:	bf18      	it	ne
   821bc:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   821be:	d1f8      	bne.n	821b2 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   821c0:	4b03      	ldr	r3, [pc, #12]	; (821d0 <udi_vendor_setup+0x38>)
   821c2:	4798      	blx	r3
   821c4:	e7f5      	b.n	821b2 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   821c6:	4b03      	ldr	r3, [pc, #12]	; (821d4 <udi_vendor_setup+0x3c>)
   821c8:	4798      	blx	r3
   821ca:	e7f2      	b.n	821b2 <udi_vendor_setup+0x1a>
   821cc:	20001bfc 	.word	0x20001bfc
   821d0:	00081dc5 	.word	0x00081dc5
   821d4:	00081cb5 	.word	0x00081cb5

000821d8 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   821d8:	b510      	push	{r4, lr}
   821da:	b082      	sub	sp, #8
   821dc:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   821de:	9200      	str	r2, [sp, #0]
   821e0:	4602      	mov	r2, r0
   821e2:	2100      	movs	r1, #0
   821e4:	2081      	movs	r0, #129	; 0x81
   821e6:	4c02      	ldr	r4, [pc, #8]	; (821f0 <udi_vendor_bulk_in_run+0x18>)
   821e8:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   821ea:	b002      	add	sp, #8
   821ec:	bd10      	pop	{r4, pc}
   821ee:	bf00      	nop
   821f0:	00084201 	.word	0x00084201

000821f4 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   821f4:	b510      	push	{r4, lr}
   821f6:	b082      	sub	sp, #8
   821f8:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   821fa:	9200      	str	r2, [sp, #0]
   821fc:	4602      	mov	r2, r0
   821fe:	2100      	movs	r1, #0
   82200:	2002      	movs	r0, #2
   82202:	4c02      	ldr	r4, [pc, #8]	; (8220c <udi_vendor_bulk_out_run+0x18>)
   82204:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   82206:	b002      	add	sp, #8
   82208:	bd10      	pop	{r4, pc}
   8220a:	bf00      	nop
   8220c:	00084201 	.word	0x00084201

00082210 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   82210:	4b0b      	ldr	r3, [pc, #44]	; (82240 <udc_next_desc_in_iface+0x30>)
   82212:	681b      	ldr	r3, [r3, #0]
   82214:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82216:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82218:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8221a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8221c:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8221e:	4290      	cmp	r0, r2
   82220:	d20a      	bcs.n	82238 <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82222:	7843      	ldrb	r3, [r0, #1]
   82224:	2b04      	cmp	r3, #4
   82226:	d009      	beq.n	8223c <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   82228:	428b      	cmp	r3, r1
   8222a:	d008      	beq.n	8223e <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   8222c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8222e:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   82230:	4290      	cmp	r0, r2
   82232:	d3f6      	bcc.n	82222 <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   82234:	2000      	movs	r0, #0
   82236:	4770      	bx	lr
   82238:	2000      	movs	r0, #0
   8223a:	4770      	bx	lr
   8223c:	2000      	movs	r0, #0
}
   8223e:	4770      	bx	lr
   82240:	2000139c 	.word	0x2000139c

00082244 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   82244:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   82246:	4b03      	ldr	r3, [pc, #12]	; (82254 <udc_valid_address+0x10>)
   82248:	7898      	ldrb	r0, [r3, #2]
   8224a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8224e:	4b02      	ldr	r3, [pc, #8]	; (82258 <udc_valid_address+0x14>)
   82250:	4798      	blx	r3
}
   82252:	bd08      	pop	{r3, pc}
   82254:	20001bfc 	.word	0x20001bfc
   82258:	00083f65 	.word	0x00083f65

0008225c <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   8225c:	4b18      	ldr	r3, [pc, #96]	; (822c0 <udc_update_iface_desc+0x64>)
   8225e:	781b      	ldrb	r3, [r3, #0]
   82260:	b33b      	cbz	r3, 822b2 <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82262:	4b18      	ldr	r3, [pc, #96]	; (822c4 <udc_update_iface_desc+0x68>)
   82264:	681b      	ldr	r3, [r3, #0]
   82266:	681b      	ldr	r3, [r3, #0]
   82268:	791a      	ldrb	r2, [r3, #4]
   8226a:	4282      	cmp	r2, r0
   8226c:	d923      	bls.n	822b6 <udc_update_iface_desc+0x5a>
{
   8226e:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   82270:	4a15      	ldr	r2, [pc, #84]	; (822c8 <udc_update_iface_desc+0x6c>)
   82272:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82274:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82276:	441c      	add	r4, r3
	while (ptr_end_desc >
   82278:	42a3      	cmp	r3, r4
   8227a:	d21e      	bcs.n	822ba <udc_update_iface_desc+0x5e>
   8227c:	2500      	movs	r5, #0
   8227e:	2601      	movs	r6, #1
   82280:	e004      	b.n	8228c <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   82282:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82284:	4413      	add	r3, r2
	while (ptr_end_desc >
   82286:	4635      	mov	r5, r6
   82288:	42a3      	cmp	r3, r4
   8228a:	d20d      	bcs.n	822a8 <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8228c:	785a      	ldrb	r2, [r3, #1]
   8228e:	2a04      	cmp	r2, #4
   82290:	d1f7      	bne.n	82282 <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82292:	789a      	ldrb	r2, [r3, #2]
   82294:	4282      	cmp	r2, r0
   82296:	d1f4      	bne.n	82282 <udc_update_iface_desc+0x26>
   82298:	78da      	ldrb	r2, [r3, #3]
   8229a:	428a      	cmp	r2, r1
   8229c:	d1f1      	bne.n	82282 <udc_update_iface_desc+0x26>
   8229e:	b10d      	cbz	r5, 822a4 <udc_update_iface_desc+0x48>
   822a0:	4a09      	ldr	r2, [pc, #36]	; (822c8 <udc_update_iface_desc+0x6c>)
   822a2:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   822a4:	2001      	movs	r0, #1
   822a6:	e002      	b.n	822ae <udc_update_iface_desc+0x52>
   822a8:	4a07      	ldr	r2, [pc, #28]	; (822c8 <udc_update_iface_desc+0x6c>)
   822aa:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   822ac:	2000      	movs	r0, #0
}
   822ae:	bc70      	pop	{r4, r5, r6}
   822b0:	4770      	bx	lr
		return false;
   822b2:	2000      	movs	r0, #0
   822b4:	4770      	bx	lr
		return false;
   822b6:	2000      	movs	r0, #0
}
   822b8:	4770      	bx	lr
	return false; // Interface not found
   822ba:	2000      	movs	r0, #0
   822bc:	e7f7      	b.n	822ae <udc_update_iface_desc+0x52>
   822be:	bf00      	nop
   822c0:	20001399 	.word	0x20001399
   822c4:	2000139c 	.word	0x2000139c
   822c8:	200013a0 	.word	0x200013a0

000822cc <udc_iface_disable>:
{
   822cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   822d0:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   822d2:	2100      	movs	r1, #0
   822d4:	4b12      	ldr	r3, [pc, #72]	; (82320 <udc_iface_disable+0x54>)
   822d6:	4798      	blx	r3
   822d8:	4680      	mov	r8, r0
   822da:	b1f0      	cbz	r0, 8231a <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   822dc:	4b11      	ldr	r3, [pc, #68]	; (82324 <udc_iface_disable+0x58>)
   822de:	681b      	ldr	r3, [r3, #0]
   822e0:	685b      	ldr	r3, [r3, #4]
   822e2:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   822e6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   822ea:	4798      	blx	r3
   822ec:	4601      	mov	r1, r0
   822ee:	4620      	mov	r0, r4
   822f0:	4b0b      	ldr	r3, [pc, #44]	; (82320 <udc_iface_disable+0x54>)
   822f2:	4798      	blx	r3
   822f4:	4680      	mov	r8, r0
   822f6:	b180      	cbz	r0, 8231a <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   822f8:	4b0b      	ldr	r3, [pc, #44]	; (82328 <udc_iface_disable+0x5c>)
   822fa:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   822fc:	2605      	movs	r6, #5
   822fe:	4d0b      	ldr	r5, [pc, #44]	; (8232c <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   82300:	4f0b      	ldr	r7, [pc, #44]	; (82330 <udc_iface_disable+0x64>)
   82302:	e001      	b.n	82308 <udc_iface_disable+0x3c>
   82304:	7880      	ldrb	r0, [r0, #2]
   82306:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   82308:	4631      	mov	r1, r6
   8230a:	4620      	mov	r0, r4
   8230c:	47a8      	blx	r5
			if (NULL == ep_desc) {
   8230e:	4604      	mov	r4, r0
   82310:	2800      	cmp	r0, #0
   82312:	d1f7      	bne.n	82304 <udc_iface_disable+0x38>
	udi_api->disable();
   82314:	f8d9 3004 	ldr.w	r3, [r9, #4]
   82318:	4798      	blx	r3
}
   8231a:	4640      	mov	r0, r8
   8231c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82320:	0008225d 	.word	0x0008225d
   82324:	2000139c 	.word	0x2000139c
   82328:	200013a0 	.word	0x200013a0
   8232c:	00082211 	.word	0x00082211
   82330:	00083fb9 	.word	0x00083fb9

00082334 <udc_iface_enable>:
{
   82334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82338:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8233a:	4b10      	ldr	r3, [pc, #64]	; (8237c <udc_iface_enable+0x48>)
   8233c:	4798      	blx	r3
   8233e:	4603      	mov	r3, r0
   82340:	b1c8      	cbz	r0, 82376 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82342:	4b0f      	ldr	r3, [pc, #60]	; (82380 <udc_iface_enable+0x4c>)
   82344:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   82346:	2605      	movs	r6, #5
   82348:	4d0e      	ldr	r5, [pc, #56]	; (82384 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8234a:	4f0f      	ldr	r7, [pc, #60]	; (82388 <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8234c:	4631      	mov	r1, r6
   8234e:	4620      	mov	r0, r4
   82350:	47a8      	blx	r5
		if (NULL == ep_desc)
   82352:	4604      	mov	r4, r0
   82354:	b138      	cbz	r0, 82366 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   82356:	8882      	ldrh	r2, [r0, #4]
   82358:	78c1      	ldrb	r1, [r0, #3]
   8235a:	7880      	ldrb	r0, [r0, #2]
   8235c:	47b8      	blx	r7
   8235e:	4603      	mov	r3, r0
   82360:	2800      	cmp	r0, #0
   82362:	d1f3      	bne.n	8234c <udc_iface_enable+0x18>
   82364:	e007      	b.n	82376 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   82366:	4b09      	ldr	r3, [pc, #36]	; (8238c <udc_iface_enable+0x58>)
   82368:	681b      	ldr	r3, [r3, #0]
   8236a:	685b      	ldr	r3, [r3, #4]
   8236c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   82370:	681b      	ldr	r3, [r3, #0]
   82372:	4798      	blx	r3
   82374:	4603      	mov	r3, r0
}
   82376:	4618      	mov	r0, r3
   82378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8237c:	0008225d 	.word	0x0008225d
   82380:	200013a0 	.word	0x200013a0
   82384:	00082211 	.word	0x00082211
   82388:	000842fd 	.word	0x000842fd
   8238c:	2000139c 	.word	0x2000139c

00082390 <udc_get_interface_desc>:
}
   82390:	4b01      	ldr	r3, [pc, #4]	; (82398 <udc_get_interface_desc+0x8>)
   82392:	6818      	ldr	r0, [r3, #0]
   82394:	4770      	bx	lr
   82396:	bf00      	nop
   82398:	200013a0 	.word	0x200013a0

0008239c <udc_start>:
{
   8239c:	b508      	push	{r3, lr}
	udd_enable();
   8239e:	4b01      	ldr	r3, [pc, #4]	; (823a4 <udc_start+0x8>)
   823a0:	4798      	blx	r3
}
   823a2:	bd08      	pop	{r3, pc}
   823a4:	00083e55 	.word	0x00083e55

000823a8 <udc_reset>:
{
   823a8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   823aa:	4b0d      	ldr	r3, [pc, #52]	; (823e0 <udc_reset+0x38>)
   823ac:	781b      	ldrb	r3, [r3, #0]
   823ae:	b183      	cbz	r3, 823d2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   823b0:	4b0c      	ldr	r3, [pc, #48]	; (823e4 <udc_reset+0x3c>)
   823b2:	681b      	ldr	r3, [r3, #0]
   823b4:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   823b6:	791b      	ldrb	r3, [r3, #4]
   823b8:	b15b      	cbz	r3, 823d2 <udc_reset+0x2a>
   823ba:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   823bc:	4e0a      	ldr	r6, [pc, #40]	; (823e8 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   823be:	4d09      	ldr	r5, [pc, #36]	; (823e4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   823c0:	b2e0      	uxtb	r0, r4
   823c2:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   823c4:	3401      	adds	r4, #1
   823c6:	682b      	ldr	r3, [r5, #0]
   823c8:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   823ca:	791a      	ldrb	r2, [r3, #4]
   823cc:	b2e3      	uxtb	r3, r4
   823ce:	429a      	cmp	r2, r3
   823d0:	d8f6      	bhi.n	823c0 <udc_reset+0x18>
	udc_num_configuration = 0;
   823d2:	2300      	movs	r3, #0
   823d4:	4a02      	ldr	r2, [pc, #8]	; (823e0 <udc_reset+0x38>)
   823d6:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   823d8:	4a04      	ldr	r2, [pc, #16]	; (823ec <udc_reset+0x44>)
   823da:	8013      	strh	r3, [r2, #0]
}
   823dc:	bd70      	pop	{r4, r5, r6, pc}
   823de:	bf00      	nop
   823e0:	20001399 	.word	0x20001399
   823e4:	2000139c 	.word	0x2000139c
   823e8:	000822cd 	.word	0x000822cd
   823ec:	20001394 	.word	0x20001394

000823f0 <udc_sof_notify>:
{
   823f0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   823f2:	4b0e      	ldr	r3, [pc, #56]	; (8242c <udc_sof_notify+0x3c>)
   823f4:	781b      	ldrb	r3, [r3, #0]
   823f6:	b1bb      	cbz	r3, 82428 <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   823f8:	4b0d      	ldr	r3, [pc, #52]	; (82430 <udc_sof_notify+0x40>)
   823fa:	681a      	ldr	r2, [r3, #0]
   823fc:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   823fe:	791b      	ldrb	r3, [r3, #4]
   82400:	b193      	cbz	r3, 82428 <udc_sof_notify+0x38>
   82402:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82404:	4d0a      	ldr	r5, [pc, #40]	; (82430 <udc_sof_notify+0x40>)
   82406:	e006      	b.n	82416 <udc_sof_notify+0x26>
   82408:	682a      	ldr	r2, [r5, #0]
   8240a:	3401      	adds	r4, #1
   8240c:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   8240e:	7919      	ldrb	r1, [r3, #4]
   82410:	b2e3      	uxtb	r3, r4
   82412:	4299      	cmp	r1, r3
   82414:	d908      	bls.n	82428 <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   82416:	b2e3      	uxtb	r3, r4
   82418:	6852      	ldr	r2, [r2, #4]
   8241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   8241e:	691b      	ldr	r3, [r3, #16]
   82420:	2b00      	cmp	r3, #0
   82422:	d0f1      	beq.n	82408 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   82424:	4798      	blx	r3
   82426:	e7ef      	b.n	82408 <udc_sof_notify+0x18>
}
   82428:	bd38      	pop	{r3, r4, r5, pc}
   8242a:	bf00      	nop
   8242c:	20001399 	.word	0x20001399
   82430:	2000139c 	.word	0x2000139c

00082434 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   82434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   82438:	4b91      	ldr	r3, [pc, #580]	; (82680 <udc_process_setup+0x24c>)
   8243a:	2200      	movs	r2, #0
   8243c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   8243e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82440:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   82442:	881b      	ldrh	r3, [r3, #0]
   82444:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   82448:	d01b      	beq.n	82482 <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   8244a:	4b8d      	ldr	r3, [pc, #564]	; (82680 <udc_process_setup+0x24c>)
   8244c:	781a      	ldrb	r2, [r3, #0]
   8244e:	f993 3000 	ldrsb.w	r3, [r3]
   82452:	2b00      	cmp	r3, #0
   82454:	db1b      	blt.n	8248e <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82456:	f012 0f60 	tst.w	r2, #96	; 0x60
   8245a:	f000 8147 	beq.w	826ec <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   8245e:	4b88      	ldr	r3, [pc, #544]	; (82680 <udc_process_setup+0x24c>)
   82460:	781b      	ldrb	r3, [r3, #0]
   82462:	f003 031f 	and.w	r3, r3, #31
   82466:	2b01      	cmp	r3, #1
   82468:	f000 8245 	beq.w	828f6 <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8246c:	4b84      	ldr	r3, [pc, #528]	; (82680 <udc_process_setup+0x24c>)
   8246e:	781b      	ldrb	r3, [r3, #0]
   82470:	f003 031f 	and.w	r3, r3, #31
   82474:	2b02      	cmp	r3, #2
   82476:	f000 8291 	beq.w	8299c <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8247a:	2300      	movs	r3, #0
#endif
}
   8247c:	4618      	mov	r0, r3
   8247e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   82482:	219e      	movs	r1, #158	; 0x9e
   82484:	487f      	ldr	r0, [pc, #508]	; (82684 <udc_process_setup+0x250>)
   82486:	4b80      	ldr	r3, [pc, #512]	; (82688 <udc_process_setup+0x254>)
   82488:	4798      	blx	r3
		return true;
   8248a:	2301      	movs	r3, #1
   8248c:	e7f6      	b.n	8247c <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   8248e:	4b7c      	ldr	r3, [pc, #496]	; (82680 <udc_process_setup+0x24c>)
   82490:	88db      	ldrh	r3, [r3, #6]
   82492:	2b00      	cmp	r3, #0
   82494:	f000 82ae 	beq.w	829f4 <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82498:	f012 0f60 	tst.w	r2, #96	; 0x60
   8249c:	d1df      	bne.n	8245e <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8249e:	f012 021f 	ands.w	r2, r2, #31
   824a2:	f040 80c1 	bne.w	82628 <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   824a6:	4a76      	ldr	r2, [pc, #472]	; (82680 <udc_process_setup+0x24c>)
   824a8:	7852      	ldrb	r2, [r2, #1]
   824aa:	2a06      	cmp	r2, #6
   824ac:	d00b      	beq.n	824c6 <udc_process_setup+0x92>
   824ae:	2a08      	cmp	r2, #8
   824b0:	f000 80b2 	beq.w	82618 <udc_process_setup+0x1e4>
   824b4:	2a00      	cmp	r2, #0
   824b6:	d1d2      	bne.n	8245e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   824b8:	2b02      	cmp	r3, #2
   824ba:	d1d0      	bne.n	8245e <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   824bc:	2102      	movs	r1, #2
   824be:	4873      	ldr	r0, [pc, #460]	; (8268c <udc_process_setup+0x258>)
   824c0:	4b71      	ldr	r3, [pc, #452]	; (82688 <udc_process_setup+0x254>)
   824c2:	4798      	blx	r3
	return true;
   824c4:	e12f      	b.n	82726 <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   824c6:	4b6e      	ldr	r3, [pc, #440]	; (82680 <udc_process_setup+0x24c>)
   824c8:	885a      	ldrh	r2, [r3, #2]
   824ca:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   824cc:	0a13      	lsrs	r3, r2, #8
   824ce:	3b01      	subs	r3, #1
   824d0:	2b0e      	cmp	r3, #14
   824d2:	f200 8209 	bhi.w	828e8 <udc_process_setup+0x4b4>
   824d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   824da:	000f      	.short	0x000f
   824dc:	007a0023 	.word	0x007a0023
   824e0:	02070207 	.word	0x02070207
   824e4:	00520044 	.word	0x00520044
   824e8:	02070207 	.word	0x02070207
   824ec:	02070207 	.word	0x02070207
   824f0:	02070207 	.word	0x02070207
   824f4:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   824f8:	4b65      	ldr	r3, [pc, #404]	; (82690 <udc_process_setup+0x25c>)
   824fa:	4798      	blx	r3
   824fc:	b928      	cbnz	r0, 8250a <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   824fe:	4b65      	ldr	r3, [pc, #404]	; (82694 <udc_process_setup+0x260>)
   82500:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   82502:	7801      	ldrb	r1, [r0, #0]
   82504:	4b60      	ldr	r3, [pc, #384]	; (82688 <udc_process_setup+0x254>)
   82506:	4798      	blx	r3
   82508:	e030      	b.n	8256c <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   8250a:	4b62      	ldr	r3, [pc, #392]	; (82694 <udc_process_setup+0x260>)
   8250c:	681a      	ldr	r2, [r3, #0]
   8250e:	2110      	movs	r1, #16
   82510:	7091      	strb	r1, [r2, #2]
   82512:	2102      	movs	r1, #2
   82514:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   82516:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   82518:	7801      	ldrb	r1, [r0, #0]
   8251a:	4b5b      	ldr	r3, [pc, #364]	; (82688 <udc_process_setup+0x254>)
   8251c:	4798      	blx	r3
   8251e:	e025      	b.n	8256c <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   82520:	4b5b      	ldr	r3, [pc, #364]	; (82690 <udc_process_setup+0x25c>)
   82522:	4798      	blx	r3
   82524:	b180      	cbz	r0, 82548 <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   82526:	4b5b      	ldr	r3, [pc, #364]	; (82694 <udc_process_setup+0x260>)
   82528:	689b      	ldr	r3, [r3, #8]
   8252a:	7c5b      	ldrb	r3, [r3, #17]
   8252c:	42a3      	cmp	r3, r4
   8252e:	d996      	bls.n	8245e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82530:	4b58      	ldr	r3, [pc, #352]	; (82694 <udc_process_setup+0x260>)
   82532:	691b      	ldr	r3, [r3, #16]
   82534:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82538:	8841      	ldrh	r1, [r0, #2]
   8253a:	4b53      	ldr	r3, [pc, #332]	; (82688 <udc_process_setup+0x254>)
   8253c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8253e:	4b50      	ldr	r3, [pc, #320]	; (82680 <udc_process_setup+0x24c>)
   82540:	689b      	ldr	r3, [r3, #8]
   82542:	2202      	movs	r2, #2
   82544:	705a      	strb	r2, [r3, #1]
		break;
   82546:	e011      	b.n	8256c <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   82548:	4b52      	ldr	r3, [pc, #328]	; (82694 <udc_process_setup+0x260>)
   8254a:	681b      	ldr	r3, [r3, #0]
   8254c:	7c5b      	ldrb	r3, [r3, #17]
   8254e:	42a3      	cmp	r3, r4
   82550:	d985      	bls.n	8245e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82552:	4b50      	ldr	r3, [pc, #320]	; (82694 <udc_process_setup+0x260>)
   82554:	685b      	ldr	r3, [r3, #4]
   82556:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8255a:	8841      	ldrh	r1, [r0, #2]
   8255c:	4b4a      	ldr	r3, [pc, #296]	; (82688 <udc_process_setup+0x254>)
   8255e:	4798      	blx	r3
   82560:	e7ed      	b.n	8253e <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   82562:	4b4c      	ldr	r3, [pc, #304]	; (82694 <udc_process_setup+0x260>)
   82564:	68d8      	ldr	r0, [r3, #12]
   82566:	7801      	ldrb	r1, [r0, #0]
   82568:	4b47      	ldr	r3, [pc, #284]	; (82688 <udc_process_setup+0x254>)
   8256a:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   8256c:	4b44      	ldr	r3, [pc, #272]	; (82680 <udc_process_setup+0x24c>)
   8256e:	88da      	ldrh	r2, [r3, #6]
   82570:	899b      	ldrh	r3, [r3, #12]
   82572:	4293      	cmp	r3, r2
   82574:	f240 80d7 	bls.w	82726 <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82578:	4b41      	ldr	r3, [pc, #260]	; (82680 <udc_process_setup+0x24c>)
   8257a:	819a      	strh	r2, [r3, #12]
   8257c:	e0d3      	b.n	82726 <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   8257e:	4b44      	ldr	r3, [pc, #272]	; (82690 <udc_process_setup+0x25c>)
   82580:	4798      	blx	r3
   82582:	b988      	cbnz	r0, 825a8 <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   82584:	4b43      	ldr	r3, [pc, #268]	; (82694 <udc_process_setup+0x260>)
   82586:	689b      	ldr	r3, [r3, #8]
   82588:	7c5b      	ldrb	r3, [r3, #17]
   8258a:	42a3      	cmp	r3, r4
   8258c:	f67f af67 	bls.w	8245e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82590:	4b40      	ldr	r3, [pc, #256]	; (82694 <udc_process_setup+0x260>)
   82592:	691b      	ldr	r3, [r3, #16]
   82594:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82598:	8841      	ldrh	r1, [r0, #2]
   8259a:	4b3b      	ldr	r3, [pc, #236]	; (82688 <udc_process_setup+0x254>)
   8259c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8259e:	4b38      	ldr	r3, [pc, #224]	; (82680 <udc_process_setup+0x24c>)
   825a0:	689b      	ldr	r3, [r3, #8]
   825a2:	2207      	movs	r2, #7
   825a4:	705a      	strb	r2, [r3, #1]
		break;
   825a6:	e7e1      	b.n	8256c <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   825a8:	4b3a      	ldr	r3, [pc, #232]	; (82694 <udc_process_setup+0x260>)
   825aa:	681b      	ldr	r3, [r3, #0]
   825ac:	7c5b      	ldrb	r3, [r3, #17]
   825ae:	42a3      	cmp	r3, r4
   825b0:	f67f af55 	bls.w	8245e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   825b4:	4b37      	ldr	r3, [pc, #220]	; (82694 <udc_process_setup+0x260>)
   825b6:	685b      	ldr	r3, [r3, #4]
   825b8:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   825bc:	8841      	ldrh	r1, [r0, #2]
   825be:	4b32      	ldr	r3, [pc, #200]	; (82688 <udc_process_setup+0x254>)
   825c0:	4798      	blx	r3
   825c2:	e7ec      	b.n	8259e <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   825c4:	2121      	movs	r1, #33	; 0x21
   825c6:	4834      	ldr	r0, [pc, #208]	; (82698 <udc_process_setup+0x264>)
   825c8:	4b2f      	ldr	r3, [pc, #188]	; (82688 <udc_process_setup+0x254>)
   825ca:	4798      	blx	r3
		break;
   825cc:	e7ce      	b.n	8256c <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   825ce:	b2d2      	uxtb	r2, r2
   825d0:	2a03      	cmp	r2, #3
   825d2:	f63f af44 	bhi.w	8245e <udc_process_setup+0x2a>
   825d6:	e8df f002 	tbb	[pc, r2]
   825da:	1914      	.short	0x1914
   825dc:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   825de:	2020      	movs	r0, #32
   825e0:	4a2e      	ldr	r2, [pc, #184]	; (8269c <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   825e2:	4613      	mov	r3, r2
   825e4:	492e      	ldr	r1, [pc, #184]	; (826a0 <udc_process_setup+0x26c>)
   825e6:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   825e8:	f813 4b01 	ldrb.w	r4, [r3], #1
   825ec:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   825f0:	429a      	cmp	r2, r3
   825f2:	d1f9      	bne.n	825e8 <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   825f4:	0041      	lsls	r1, r0, #1
   825f6:	3102      	adds	r1, #2
   825f8:	4829      	ldr	r0, [pc, #164]	; (826a0 <udc_process_setup+0x26c>)
   825fa:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   825fc:	4b22      	ldr	r3, [pc, #136]	; (82688 <udc_process_setup+0x254>)
   825fe:	4798      	blx	r3
   82600:	e7b4      	b.n	8256c <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   82602:	2104      	movs	r1, #4
   82604:	4827      	ldr	r0, [pc, #156]	; (826a4 <udc_process_setup+0x270>)
   82606:	4b20      	ldr	r3, [pc, #128]	; (82688 <udc_process_setup+0x254>)
   82608:	4798      	blx	r3
	if (str_length) {
   8260a:	e7af      	b.n	8256c <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   8260c:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   8260e:	4a26      	ldr	r2, [pc, #152]	; (826a8 <udc_process_setup+0x274>)
   82610:	e7e7      	b.n	825e2 <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   82612:	2013      	movs	r0, #19
		str = udc_string_product_name;
   82614:	4a25      	ldr	r2, [pc, #148]	; (826ac <udc_process_setup+0x278>)
   82616:	e7e4      	b.n	825e2 <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   82618:	2b01      	cmp	r3, #1
   8261a:	f47f af20 	bne.w	8245e <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   8261e:	2101      	movs	r1, #1
   82620:	4823      	ldr	r0, [pc, #140]	; (826b0 <udc_process_setup+0x27c>)
   82622:	4b19      	ldr	r3, [pc, #100]	; (82688 <udc_process_setup+0x254>)
   82624:	4798      	blx	r3
	return true;
   82626:	e07e      	b.n	82726 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82628:	2a01      	cmp	r2, #1
   8262a:	d149      	bne.n	826c0 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   8262c:	4a14      	ldr	r2, [pc, #80]	; (82680 <udc_process_setup+0x24c>)
   8262e:	7852      	ldrb	r2, [r2, #1]
   82630:	2a0a      	cmp	r2, #10
   82632:	f47f af14 	bne.w	8245e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   82636:	2b01      	cmp	r3, #1
   82638:	f47f af11 	bne.w	8245e <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   8263c:	4b1c      	ldr	r3, [pc, #112]	; (826b0 <udc_process_setup+0x27c>)
   8263e:	781b      	ldrb	r3, [r3, #0]
   82640:	2b00      	cmp	r3, #0
   82642:	f43f af0c 	beq.w	8245e <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82646:	4b0e      	ldr	r3, [pc, #56]	; (82680 <udc_process_setup+0x24c>)
   82648:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8264a:	4b1a      	ldr	r3, [pc, #104]	; (826b4 <udc_process_setup+0x280>)
   8264c:	681d      	ldr	r5, [r3, #0]
   8264e:	682b      	ldr	r3, [r5, #0]
   82650:	791b      	ldrb	r3, [r3, #4]
   82652:	42a3      	cmp	r3, r4
   82654:	f67f af03 	bls.w	8245e <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   82658:	2100      	movs	r1, #0
   8265a:	4620      	mov	r0, r4
   8265c:	4b16      	ldr	r3, [pc, #88]	; (826b8 <udc_process_setup+0x284>)
   8265e:	4798      	blx	r3
   82660:	2800      	cmp	r0, #0
   82662:	f43f aefc 	beq.w	8245e <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82666:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   82668:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   8266c:	68db      	ldr	r3, [r3, #12]
   8266e:	4798      	blx	r3
   82670:	4b12      	ldr	r3, [pc, #72]	; (826bc <udc_process_setup+0x288>)
   82672:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   82674:	2101      	movs	r1, #1
   82676:	4618      	mov	r0, r3
   82678:	4b03      	ldr	r3, [pc, #12]	; (82688 <udc_process_setup+0x254>)
   8267a:	4798      	blx	r3
	return true;
   8267c:	e053      	b.n	82726 <udc_process_setup+0x2f2>
   8267e:	bf00      	nop
   82680:	20001bfc 	.word	0x20001bfc
   82684:	200002e4 	.word	0x200002e4
   82688:	00083fad 	.word	0x00083fad
   8268c:	20001394 	.word	0x20001394
   82690:	00083f55 	.word	0x00083f55
   82694:	200001e4 	.word	0x200001e4
   82698:	0008bdcc 	.word	0x0008bdcc
   8269c:	20000388 	.word	0x20000388
   826a0:	20000270 	.word	0x20000270
   826a4:	200002b4 	.word	0x200002b4
   826a8:	200002b8 	.word	0x200002b8
   826ac:	200002d0 	.word	0x200002d0
   826b0:	20001399 	.word	0x20001399
   826b4:	2000139c 	.word	0x2000139c
   826b8:	0008225d 	.word	0x0008225d
   826bc:	20001398 	.word	0x20001398
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   826c0:	2a02      	cmp	r2, #2
   826c2:	f47f aecc 	bne.w	8245e <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   826c6:	4a93      	ldr	r2, [pc, #588]	; (82914 <udc_process_setup+0x4e0>)
   826c8:	7852      	ldrb	r2, [r2, #1]
   826ca:	2a00      	cmp	r2, #0
   826cc:	f47f aec7 	bne.w	8245e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   826d0:	2b02      	cmp	r3, #2
   826d2:	f47f aec4 	bne.w	8245e <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   826d6:	4b8f      	ldr	r3, [pc, #572]	; (82914 <udc_process_setup+0x4e0>)
   826d8:	7918      	ldrb	r0, [r3, #4]
   826da:	4b8f      	ldr	r3, [pc, #572]	; (82918 <udc_process_setup+0x4e4>)
   826dc:	4798      	blx	r3
   826de:	4b8f      	ldr	r3, [pc, #572]	; (8291c <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   826e0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   826e2:	2102      	movs	r1, #2
   826e4:	4618      	mov	r0, r3
   826e6:	4b8e      	ldr	r3, [pc, #568]	; (82920 <udc_process_setup+0x4ec>)
   826e8:	4798      	blx	r3
	return true;
   826ea:	e01c      	b.n	82726 <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   826ec:	f012 021f 	ands.w	r2, r2, #31
   826f0:	f040 80b1 	bne.w	82856 <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   826f4:	4b87      	ldr	r3, [pc, #540]	; (82914 <udc_process_setup+0x4e0>)
   826f6:	785b      	ldrb	r3, [r3, #1]
   826f8:	3b01      	subs	r3, #1
   826fa:	2b08      	cmp	r3, #8
   826fc:	f200 80ab 	bhi.w	82856 <udc_process_setup+0x422>
   82700:	e8df f013 	tbh	[pc, r3, lsl #1]
   82704:	00a90013 	.word	0x00a90013
   82708:	00a90023 	.word	0x00a90023
   8270c:	00a90009 	.word	0x00a90009
   82710:	00a900a9 	.word	0x00a900a9
   82714:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   82716:	4b7f      	ldr	r3, [pc, #508]	; (82914 <udc_process_setup+0x4e0>)
   82718:	88db      	ldrh	r3, [r3, #6]
   8271a:	2b00      	cmp	r3, #0
   8271c:	f47f ae9f 	bne.w	8245e <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   82720:	4b7c      	ldr	r3, [pc, #496]	; (82914 <udc_process_setup+0x4e0>)
   82722:	4a80      	ldr	r2, [pc, #512]	; (82924 <udc_process_setup+0x4f0>)
   82724:	611a      	str	r2, [r3, #16]
			return true;
   82726:	2301      	movs	r3, #1
   82728:	e6a8      	b.n	8247c <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   8272a:	4b7a      	ldr	r3, [pc, #488]	; (82914 <udc_process_setup+0x4e0>)
   8272c:	88db      	ldrh	r3, [r3, #6]
   8272e:	2b00      	cmp	r3, #0
   82730:	f47f ae95 	bne.w	8245e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   82734:	4b77      	ldr	r3, [pc, #476]	; (82914 <udc_process_setup+0x4e0>)
   82736:	885b      	ldrh	r3, [r3, #2]
   82738:	2b01      	cmp	r3, #1
   8273a:	f47f ae90 	bne.w	8245e <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   8273e:	4a7a      	ldr	r2, [pc, #488]	; (82928 <udc_process_setup+0x4f4>)
   82740:	8813      	ldrh	r3, [r2, #0]
   82742:	f023 0302 	bic.w	r3, r3, #2
   82746:	8013      	strh	r3, [r2, #0]
		return true;
   82748:	e7ed      	b.n	82726 <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   8274a:	4b72      	ldr	r3, [pc, #456]	; (82914 <udc_process_setup+0x4e0>)
   8274c:	88db      	ldrh	r3, [r3, #6]
   8274e:	2b00      	cmp	r3, #0
   82750:	f47f ae85 	bne.w	8245e <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   82754:	4b6f      	ldr	r3, [pc, #444]	; (82914 <udc_process_setup+0x4e0>)
   82756:	885b      	ldrh	r3, [r3, #2]
   82758:	2b02      	cmp	r3, #2
   8275a:	f47f ae80 	bne.w	8245e <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   8275e:	4b73      	ldr	r3, [pc, #460]	; (8292c <udc_process_setup+0x4f8>)
   82760:	4798      	blx	r3
   82762:	2800      	cmp	r0, #0
   82764:	f43f ae7b 	beq.w	8245e <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   82768:	4b6a      	ldr	r3, [pc, #424]	; (82914 <udc_process_setup+0x4e0>)
   8276a:	791b      	ldrb	r3, [r3, #4]
   8276c:	2b00      	cmp	r3, #0
   8276e:	f47f ae76 	bne.w	8245e <udc_process_setup+0x2a>
		udc_reset();
   82772:	4b6f      	ldr	r3, [pc, #444]	; (82930 <udc_process_setup+0x4fc>)
   82774:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   82776:	4b67      	ldr	r3, [pc, #412]	; (82914 <udc_process_setup+0x4e0>)
   82778:	889b      	ldrh	r3, [r3, #4]
   8277a:	0a1b      	lsrs	r3, r3, #8
   8277c:	3b01      	subs	r3, #1
   8277e:	2b03      	cmp	r3, #3
   82780:	f200 80b7 	bhi.w	828f2 <udc_process_setup+0x4be>
   82784:	e8df f003 	tbb	[pc, r3]
   82788:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8278c:	4b61      	ldr	r3, [pc, #388]	; (82914 <udc_process_setup+0x4e0>)
   8278e:	4a69      	ldr	r2, [pc, #420]	; (82934 <udc_process_setup+0x500>)
   82790:	611a      	str	r2, [r3, #16]
			return true;
   82792:	e7c8      	b.n	82726 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   82794:	4b5f      	ldr	r3, [pc, #380]	; (82914 <udc_process_setup+0x4e0>)
   82796:	4a68      	ldr	r2, [pc, #416]	; (82938 <udc_process_setup+0x504>)
   82798:	611a      	str	r2, [r3, #16]
			return true;
   8279a:	e7c4      	b.n	82726 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8279c:	4b5d      	ldr	r3, [pc, #372]	; (82914 <udc_process_setup+0x4e0>)
   8279e:	4a67      	ldr	r2, [pc, #412]	; (8293c <udc_process_setup+0x508>)
   827a0:	611a      	str	r2, [r3, #16]
			return true;
   827a2:	e7c0      	b.n	82726 <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   827a4:	4b5b      	ldr	r3, [pc, #364]	; (82914 <udc_process_setup+0x4e0>)
   827a6:	4a66      	ldr	r2, [pc, #408]	; (82940 <udc_process_setup+0x50c>)
   827a8:	611a      	str	r2, [r3, #16]
			return true;
   827aa:	e7bc      	b.n	82726 <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   827ac:	4b59      	ldr	r3, [pc, #356]	; (82914 <udc_process_setup+0x4e0>)
   827ae:	88db      	ldrh	r3, [r3, #6]
   827b0:	2b00      	cmp	r3, #0
   827b2:	f47f ae54 	bne.w	8245e <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   827b6:	4b63      	ldr	r3, [pc, #396]	; (82944 <udc_process_setup+0x510>)
   827b8:	4798      	blx	r3
   827ba:	2800      	cmp	r0, #0
   827bc:	f43f ae4f 	beq.w	8245e <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   827c0:	4b5a      	ldr	r3, [pc, #360]	; (8292c <udc_process_setup+0x4f8>)
   827c2:	4798      	blx	r3
   827c4:	2800      	cmp	r0, #0
   827c6:	d034      	beq.n	82832 <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   827c8:	4b5f      	ldr	r3, [pc, #380]	; (82948 <udc_process_setup+0x514>)
   827ca:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   827cc:	7c5a      	ldrb	r2, [r3, #17]
   827ce:	4b51      	ldr	r3, [pc, #324]	; (82914 <udc_process_setup+0x4e0>)
   827d0:	789b      	ldrb	r3, [r3, #2]
   827d2:	429a      	cmp	r2, r3
   827d4:	f4ff ae43 	bcc.w	8245e <udc_process_setup+0x2a>
	udc_reset();
   827d8:	4b55      	ldr	r3, [pc, #340]	; (82930 <udc_process_setup+0x4fc>)
   827da:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   827dc:	4b4d      	ldr	r3, [pc, #308]	; (82914 <udc_process_setup+0x4e0>)
   827de:	789b      	ldrb	r3, [r3, #2]
   827e0:	4a5a      	ldr	r2, [pc, #360]	; (8294c <udc_process_setup+0x518>)
   827e2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   827e4:	2b00      	cmp	r3, #0
   827e6:	d09e      	beq.n	82726 <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   827e8:	4b50      	ldr	r3, [pc, #320]	; (8292c <udc_process_setup+0x4f8>)
   827ea:	4798      	blx	r3
   827ec:	2800      	cmp	r0, #0
   827ee:	d028      	beq.n	82842 <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   827f0:	4b56      	ldr	r3, [pc, #344]	; (8294c <udc_process_setup+0x518>)
   827f2:	781b      	ldrb	r3, [r3, #0]
   827f4:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   827f8:	3a01      	subs	r2, #1
   827fa:	4b53      	ldr	r3, [pc, #332]	; (82948 <udc_process_setup+0x514>)
   827fc:	691b      	ldr	r3, [r3, #16]
   827fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   82802:	4a53      	ldr	r2, [pc, #332]	; (82950 <udc_process_setup+0x51c>)
   82804:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82806:	681b      	ldr	r3, [r3, #0]
   82808:	791b      	ldrb	r3, [r3, #4]
   8280a:	2b00      	cmp	r3, #0
   8280c:	d08b      	beq.n	82726 <udc_process_setup+0x2f2>
   8280e:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   82810:	4626      	mov	r6, r4
   82812:	4d50      	ldr	r5, [pc, #320]	; (82954 <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82814:	4f4e      	ldr	r7, [pc, #312]	; (82950 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   82816:	4631      	mov	r1, r6
   82818:	b2e0      	uxtb	r0, r4
   8281a:	47a8      	blx	r5
   8281c:	2800      	cmp	r0, #0
   8281e:	f43f ae1e 	beq.w	8245e <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82822:	3401      	adds	r4, #1
   82824:	683b      	ldr	r3, [r7, #0]
   82826:	681b      	ldr	r3, [r3, #0]
   82828:	791a      	ldrb	r2, [r3, #4]
   8282a:	b2e3      	uxtb	r3, r4
   8282c:	429a      	cmp	r2, r3
   8282e:	d8f2      	bhi.n	82816 <udc_process_setup+0x3e2>
   82830:	e779      	b.n	82726 <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   82832:	4b45      	ldr	r3, [pc, #276]	; (82948 <udc_process_setup+0x514>)
   82834:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82836:	7c5a      	ldrb	r2, [r3, #17]
   82838:	4b36      	ldr	r3, [pc, #216]	; (82914 <udc_process_setup+0x4e0>)
   8283a:	789b      	ldrb	r3, [r3, #2]
   8283c:	429a      	cmp	r2, r3
   8283e:	d2cb      	bcs.n	827d8 <udc_process_setup+0x3a4>
   82840:	e60d      	b.n	8245e <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   82842:	4b42      	ldr	r3, [pc, #264]	; (8294c <udc_process_setup+0x518>)
   82844:	781b      	ldrb	r3, [r3, #0]
   82846:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   8284a:	3a01      	subs	r2, #1
   8284c:	4b3e      	ldr	r3, [pc, #248]	; (82948 <udc_process_setup+0x514>)
   8284e:	685b      	ldr	r3, [r3, #4]
   82850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   82854:	e7d5      	b.n	82802 <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82856:	2a01      	cmp	r2, #1
   82858:	d01a      	beq.n	82890 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8285a:	2a02      	cmp	r2, #2
   8285c:	f47f adff 	bne.w	8245e <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   82860:	4b2c      	ldr	r3, [pc, #176]	; (82914 <udc_process_setup+0x4e0>)
   82862:	785b      	ldrb	r3, [r3, #1]
   82864:	2b01      	cmp	r3, #1
   82866:	d031      	beq.n	828cc <udc_process_setup+0x498>
   82868:	2b03      	cmp	r3, #3
   8286a:	f47f adf8 	bne.w	8245e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   8286e:	4a29      	ldr	r2, [pc, #164]	; (82914 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   82870:	88d3      	ldrh	r3, [r2, #6]
   82872:	8852      	ldrh	r2, [r2, #2]
   82874:	4313      	orrs	r3, r2
   82876:	b29b      	uxth	r3, r3
   82878:	2b00      	cmp	r3, #0
   8287a:	f47f adf0 	bne.w	8245e <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8287e:	4c25      	ldr	r4, [pc, #148]	; (82914 <udc_process_setup+0x4e0>)
   82880:	7920      	ldrb	r0, [r4, #4]
   82882:	4b35      	ldr	r3, [pc, #212]	; (82958 <udc_process_setup+0x524>)
   82884:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   82886:	7920      	ldrb	r0, [r4, #4]
   82888:	4b34      	ldr	r3, [pc, #208]	; (8295c <udc_process_setup+0x528>)
   8288a:	4798      	blx	r3
   8288c:	4603      	mov	r3, r0
   8288e:	e02c      	b.n	828ea <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   82890:	4b20      	ldr	r3, [pc, #128]	; (82914 <udc_process_setup+0x4e0>)
   82892:	785b      	ldrb	r3, [r3, #1]
   82894:	2b0b      	cmp	r3, #11
   82896:	f47f ade2 	bne.w	8245e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   8289a:	4b1e      	ldr	r3, [pc, #120]	; (82914 <udc_process_setup+0x4e0>)
   8289c:	88db      	ldrh	r3, [r3, #6]
   8289e:	2b00      	cmp	r3, #0
   828a0:	f47f addd 	bne.w	8245e <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   828a4:	4b29      	ldr	r3, [pc, #164]	; (8294c <udc_process_setup+0x518>)
   828a6:	781b      	ldrb	r3, [r3, #0]
   828a8:	2b00      	cmp	r3, #0
   828aa:	f43f add8 	beq.w	8245e <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   828ae:	4b19      	ldr	r3, [pc, #100]	; (82914 <udc_process_setup+0x4e0>)
   828b0:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   828b2:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   828b4:	4620      	mov	r0, r4
   828b6:	4b2a      	ldr	r3, [pc, #168]	; (82960 <udc_process_setup+0x52c>)
   828b8:	4798      	blx	r3
   828ba:	2800      	cmp	r0, #0
   828bc:	f43f adcf 	beq.w	8245e <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   828c0:	b2e9      	uxtb	r1, r5
   828c2:	4620      	mov	r0, r4
   828c4:	4b23      	ldr	r3, [pc, #140]	; (82954 <udc_process_setup+0x520>)
   828c6:	4798      	blx	r3
   828c8:	4603      	mov	r3, r0
   828ca:	e00e      	b.n	828ea <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   828cc:	4a11      	ldr	r2, [pc, #68]	; (82914 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   828ce:	88d3      	ldrh	r3, [r2, #6]
   828d0:	8852      	ldrh	r2, [r2, #2]
   828d2:	4313      	orrs	r3, r2
   828d4:	b29b      	uxth	r3, r3
   828d6:	2b00      	cmp	r3, #0
   828d8:	f47f adc1 	bne.w	8245e <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   828dc:	4b0d      	ldr	r3, [pc, #52]	; (82914 <udc_process_setup+0x4e0>)
   828de:	7918      	ldrb	r0, [r3, #4]
   828e0:	4b20      	ldr	r3, [pc, #128]	; (82964 <udc_process_setup+0x530>)
   828e2:	4798      	blx	r3
   828e4:	4603      	mov	r3, r0
   828e6:	e000      	b.n	828ea <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   828e8:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   828ea:	2b00      	cmp	r3, #0
   828ec:	f47f adc6 	bne.w	8247c <udc_process_setup+0x48>
   828f0:	e5b5      	b.n	8245e <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   828f2:	2300      	movs	r3, #0
   828f4:	e7f9      	b.n	828ea <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   828f6:	4b15      	ldr	r3, [pc, #84]	; (8294c <udc_process_setup+0x518>)
   828f8:	781b      	ldrb	r3, [r3, #0]
   828fa:	2b00      	cmp	r3, #0
   828fc:	d07c      	beq.n	829f8 <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   828fe:	4b05      	ldr	r3, [pc, #20]	; (82914 <udc_process_setup+0x4e0>)
   82900:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82902:	4b13      	ldr	r3, [pc, #76]	; (82950 <udc_process_setup+0x51c>)
   82904:	681d      	ldr	r5, [r3, #0]
   82906:	682b      	ldr	r3, [r5, #0]
   82908:	791b      	ldrb	r3, [r3, #4]
   8290a:	42a3      	cmp	r3, r4
   8290c:	d82c      	bhi.n	82968 <udc_process_setup+0x534>
	return false;
   8290e:	2300      	movs	r3, #0
   82910:	e5b4      	b.n	8247c <udc_process_setup+0x48>
   82912:	bf00      	nop
   82914:	20001bfc 	.word	0x20001bfc
   82918:	00084011 	.word	0x00084011
   8291c:	20001396 	.word	0x20001396
   82920:	00083fad 	.word	0x00083fad
   82924:	00082245 	.word	0x00082245
   82928:	20001394 	.word	0x20001394
   8292c:	00083f55 	.word	0x00083f55
   82930:	000823a9 	.word	0x000823a9
   82934:	000845d1 	.word	0x000845d1
   82938:	000845f5 	.word	0x000845f5
   8293c:	00084619 	.word	0x00084619
   82940:	00084631 	.word	0x00084631
   82944:	00083f8d 	.word	0x00083f8d
   82948:	200001e4 	.word	0x200001e4
   8294c:	20001399 	.word	0x20001399
   82950:	2000139c 	.word	0x2000139c
   82954:	00082335 	.word	0x00082335
   82958:	0008455d 	.word	0x0008455d
   8295c:	00084045 	.word	0x00084045
   82960:	000822cd 	.word	0x000822cd
   82964:	00084109 	.word	0x00084109
	if (!udc_update_iface_desc(iface_num, 0)) {
   82968:	2100      	movs	r1, #0
   8296a:	4620      	mov	r0, r4
   8296c:	4b23      	ldr	r3, [pc, #140]	; (829fc <udc_process_setup+0x5c8>)
   8296e:	4798      	blx	r3
   82970:	2800      	cmp	r0, #0
   82972:	f43f ad7b 	beq.w	8246c <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82976:	686b      	ldr	r3, [r5, #4]
   82978:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8297c:	68eb      	ldr	r3, [r5, #12]
   8297e:	4798      	blx	r3
   82980:	4601      	mov	r1, r0
   82982:	4620      	mov	r0, r4
   82984:	4b1d      	ldr	r3, [pc, #116]	; (829fc <udc_process_setup+0x5c8>)
   82986:	4798      	blx	r3
   82988:	2800      	cmp	r0, #0
   8298a:	f43f ad6f 	beq.w	8246c <udc_process_setup+0x38>
	return udi_api->setup();
   8298e:	68ab      	ldr	r3, [r5, #8]
   82990:	4798      	blx	r3
		if (udc_req_iface()) {
   82992:	4603      	mov	r3, r0
   82994:	2800      	cmp	r0, #0
   82996:	f47f ad71 	bne.w	8247c <udc_process_setup+0x48>
   8299a:	e567      	b.n	8246c <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   8299c:	4b18      	ldr	r3, [pc, #96]	; (82a00 <udc_process_setup+0x5cc>)
   8299e:	781b      	ldrb	r3, [r3, #0]
   829a0:	b323      	cbz	r3, 829ec <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   829a2:	4b18      	ldr	r3, [pc, #96]	; (82a04 <udc_process_setup+0x5d0>)
   829a4:	681a      	ldr	r2, [r3, #0]
   829a6:	6813      	ldr	r3, [r2, #0]
   829a8:	791b      	ldrb	r3, [r3, #4]
   829aa:	b30b      	cbz	r3, 829f0 <udc_process_setup+0x5bc>
   829ac:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   829ae:	4e13      	ldr	r6, [pc, #76]	; (829fc <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   829b0:	4f14      	ldr	r7, [pc, #80]	; (82a04 <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   829b2:	b2ec      	uxtb	r4, r5
   829b4:	6853      	ldr	r3, [r2, #4]
   829b6:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   829ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   829be:	4798      	blx	r3
   829c0:	4601      	mov	r1, r0
   829c2:	4620      	mov	r0, r4
   829c4:	47b0      	blx	r6
   829c6:	4603      	mov	r3, r0
   829c8:	2800      	cmp	r0, #0
   829ca:	f43f ad57 	beq.w	8247c <udc_process_setup+0x48>
		if (udi_api->setup()) {
   829ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
   829d2:	4798      	blx	r3
   829d4:	4603      	mov	r3, r0
   829d6:	2800      	cmp	r0, #0
   829d8:	f47f ad50 	bne.w	8247c <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   829dc:	683a      	ldr	r2, [r7, #0]
   829de:	3501      	adds	r5, #1
   829e0:	6811      	ldr	r1, [r2, #0]
   829e2:	7908      	ldrb	r0, [r1, #4]
   829e4:	b2e9      	uxtb	r1, r5
   829e6:	4288      	cmp	r0, r1
   829e8:	d8e3      	bhi.n	829b2 <udc_process_setup+0x57e>
   829ea:	e547      	b.n	8247c <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   829ec:	2300      	movs	r3, #0
   829ee:	e545      	b.n	8247c <udc_process_setup+0x48>
	return false;
   829f0:	2300      	movs	r3, #0
   829f2:	e543      	b.n	8247c <udc_process_setup+0x48>
			return false; // Error from USB host
   829f4:	2300      	movs	r3, #0
   829f6:	e541      	b.n	8247c <udc_process_setup+0x48>
	return false;
   829f8:	2300      	movs	r3, #0
   829fa:	e53f      	b.n	8247c <udc_process_setup+0x48>
   829fc:	0008225d 	.word	0x0008225d
   82a00:	20001399 	.word	0x20001399
   82a04:	2000139c 	.word	0x2000139c

00082a08 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   82a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   82a0c:	b980      	cbnz	r0, 82a30 <_read+0x28>
   82a0e:	460c      	mov	r4, r1
   82a10:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   82a12:	2a00      	cmp	r2, #0
   82a14:	dd0f      	ble.n	82a36 <_read+0x2e>
   82a16:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   82a18:	4e08      	ldr	r6, [pc, #32]	; (82a3c <_read+0x34>)
   82a1a:	4d09      	ldr	r5, [pc, #36]	; (82a40 <_read+0x38>)
   82a1c:	6830      	ldr	r0, [r6, #0]
   82a1e:	682b      	ldr	r3, [r5, #0]
   82a20:	4621      	mov	r1, r4
   82a22:	4798      	blx	r3
		ptr++;
   82a24:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   82a26:	42bc      	cmp	r4, r7
   82a28:	d1f8      	bne.n	82a1c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   82a2a:	4640      	mov	r0, r8
   82a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   82a30:	f04f 38ff 	mov.w	r8, #4294967295
   82a34:	e7f9      	b.n	82a2a <_read+0x22>
	int nChars = 0;
   82a36:	4680      	mov	r8, r0
   82a38:	e7f7      	b.n	82a2a <_read+0x22>
   82a3a:	bf00      	nop
   82a3c:	20001bf8 	.word	0x20001bf8
   82a40:	20001bf0 	.word	0x20001bf0

00082a44 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82a44:	3801      	subs	r0, #1
   82a46:	2802      	cmp	r0, #2
   82a48:	d81a      	bhi.n	82a80 <_write+0x3c>
{
   82a4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82a4e:	460e      	mov	r6, r1
   82a50:	4617      	mov	r7, r2
		return -1;
	}

	for (; len != 0; --len) {
   82a52:	b1c2      	cbz	r2, 82a86 <_write+0x42>
   82a54:	1e4d      	subs	r5, r1, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   82a56:	f8df 903c 	ldr.w	r9, [pc, #60]	; 82a94 <_write+0x50>
   82a5a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 82a98 <_write+0x54>
   82a5e:	f8d9 0000 	ldr.w	r0, [r9]
   82a62:	462c      	mov	r4, r5
   82a64:	f8d8 3000 	ldr.w	r3, [r8]
   82a68:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   82a6c:	4798      	blx	r3
   82a6e:	2800      	cmp	r0, #0
   82a70:	db0b      	blt.n	82a8a <_write+0x46>
			return -1;
		}
		++nChars;
   82a72:	3402      	adds	r4, #2
   82a74:	1ba0      	subs	r0, r4, r6
	for (; len != 0; --len) {
   82a76:	43eb      	mvns	r3, r5
   82a78:	443b      	add	r3, r7
   82a7a:	42f3      	cmn	r3, r6
   82a7c:	d1ef      	bne.n	82a5e <_write+0x1a>
   82a7e:	e006      	b.n	82a8e <_write+0x4a>
		return -1;
   82a80:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return nChars;
}
   82a84:	4770      	bx	lr
	int nChars = 0;
   82a86:	4610      	mov	r0, r2
   82a88:	e001      	b.n	82a8e <_write+0x4a>
			return -1;
   82a8a:	f04f 30ff 	mov.w	r0, #4294967295
}
   82a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82a92:	bf00      	nop
   82a94:	20001bf8 	.word	0x20001bf8
   82a98:	20001bf4 	.word	0x20001bf4

00082a9c <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82a9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82aa0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82aa4:	670a      	str	r2, [r1, #112]	; 0x70
}
   82aa6:	4770      	bx	lr

00082aa8 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82aa8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82aac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82ab0:	674a      	str	r2, [r1, #116]	; 0x74
}
   82ab2:	4770      	bx	lr

00082ab4 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82ab4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82ab8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82abc:	678a      	str	r2, [r1, #120]	; 0x78
}
   82abe:	4770      	bx	lr

00082ac0 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82ac0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82ac4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   82ac8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   82acc:	4770      	bx	lr

00082ace <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82ace:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82ad0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82ad4:	d015      	beq.n	82b02 <pio_set_peripheral+0x34>
   82ad6:	d80a      	bhi.n	82aee <pio_set_peripheral+0x20>
   82ad8:	b191      	cbz	r1, 82b00 <pio_set_peripheral+0x32>
   82ada:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82ade:	d10e      	bne.n	82afe <pio_set_peripheral+0x30>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82ae0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82ae2:	6f03      	ldr	r3, [r0, #112]	; 0x70
   82ae4:	400b      	ands	r3, r1
   82ae6:	ea23 0302 	bic.w	r3, r3, r2
   82aea:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82aec:	e007      	b.n	82afe <pio_set_peripheral+0x30>
	switch (ul_type) {
   82aee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82af2:	d005      	beq.n	82b00 <pio_set_peripheral+0x32>
   82af4:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
   82af8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82afc:	d000      	beq.n	82b00 <pio_set_peripheral+0x32>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82afe:	6042      	str	r2, [r0, #4]
}
   82b00:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   82b02:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82b04:	4313      	orrs	r3, r2
   82b06:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82b08:	e7f9      	b.n	82afe <pio_set_peripheral+0x30>

00082b0a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82b0a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82b0c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82b10:	bf14      	ite	ne
   82b12:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82b14:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82b16:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82b1a:	bf14      	ite	ne
   82b1c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   82b1e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   82b20:	f012 0f02 	tst.w	r2, #2
   82b24:	d004      	beq.n	82b30 <pio_set_input+0x26>
		p_pio->PIO_SCIFSR = ul_mask;
   82b26:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   82b2a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82b2c:	6001      	str	r1, [r0, #0]
}
   82b2e:	4770      	bx	lr
		if (ul_attribute & PIO_DEBOUNCE) {
   82b30:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82b34:	bf18      	it	ne
   82b36:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
   82b3a:	e7f6      	b.n	82b2a <pio_set_input+0x20>

00082b3c <pio_set_output>:
{
   82b3c:	b410      	push	{r4}
   82b3e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82b40:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82b42:	b144      	cbz	r4, 82b56 <pio_set_output+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82b44:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
   82b46:	b143      	cbz	r3, 82b5a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82b48:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   82b4a:	b142      	cbz	r2, 82b5e <pio_set_output+0x22>
		p_pio->PIO_SODR = ul_mask;
   82b4c:	6301      	str	r1, [r0, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   82b4e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82b50:	6001      	str	r1, [r0, #0]
}
   82b52:	bc10      	pop	{r4}
   82b54:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
   82b56:	6601      	str	r1, [r0, #96]	; 0x60
   82b58:	e7f5      	b.n	82b46 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   82b5a:	6541      	str	r1, [r0, #84]	; 0x54
   82b5c:	e7f5      	b.n	82b4a <pio_set_output+0xe>
		p_pio->PIO_CODR = ul_mask;
   82b5e:	6341      	str	r1, [r0, #52]	; 0x34
   82b60:	e7f5      	b.n	82b4e <pio_set_output+0x12>

00082b62 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82b62:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82b64:	4770      	bx	lr

00082b66 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82b66:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82b68:	4770      	bx	lr

00082b6a <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82b6a:	0943      	lsrs	r3, r0, #5
   82b6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82b70:	f203 7306 	addw	r3, r3, #1798	; 0x706
   82b74:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   82b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82b78:	f000 001f 	and.w	r0, r0, #31
   82b7c:	fa23 f000 	lsr.w	r0, r3, r0
}
   82b80:	f000 0001 	and.w	r0, r0, #1
   82b84:	4770      	bx	lr

00082b86 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82b86:	0943      	lsrs	r3, r0, #5
   82b88:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82b8c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   82b90:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82b92:	f000 001f 	and.w	r0, r0, #31
   82b96:	2201      	movs	r2, #1
   82b98:	fa02 f000 	lsl.w	r0, r2, r0
   82b9c:	6318      	str	r0, [r3, #48]	; 0x30
}
   82b9e:	4770      	bx	lr

00082ba0 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82ba0:	0943      	lsrs	r3, r0, #5
   82ba2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82ba6:	f203 7306 	addw	r3, r3, #1798	; 0x706
   82baa:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82bac:	f000 001f 	and.w	r0, r0, #31
   82bb0:	2201      	movs	r2, #1
   82bb2:	fa02 f000 	lsl.w	r0, r2, r0
   82bb6:	6358      	str	r0, [r3, #52]	; 0x34
}
   82bb8:	4770      	bx	lr
	...

00082bbc <pio_configure_pin>:
{
   82bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   82bbe:	b083      	sub	sp, #12
   82bc0:	460e      	mov	r6, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82bc2:	0943      	lsrs	r3, r0, #5
   82bc4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82bc8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   82bcc:	025d      	lsls	r5, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82bce:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82bd2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82bd6:	d032      	beq.n	82c3e <pio_configure_pin+0x82>
   82bd8:	d818      	bhi.n	82c0c <pio_configure_pin+0x50>
   82bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82bde:	d01d      	beq.n	82c1c <pio_configure_pin+0x60>
   82be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82be4:	bf18      	it	ne
   82be6:	2000      	movne	r0, #0
   82be8:	d116      	bne.n	82c18 <pio_configure_pin+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82bea:	f000 001f 	and.w	r0, r0, #31
   82bee:	2401      	movs	r4, #1
   82bf0:	4084      	lsls	r4, r0
   82bf2:	4622      	mov	r2, r4
   82bf4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82bf8:	4628      	mov	r0, r5
   82bfa:	4b21      	ldr	r3, [pc, #132]	; (82c80 <pio_configure_pin+0xc4>)
   82bfc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82bfe:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   82c02:	bf12      	itee	ne
   82c04:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82c06:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   82c08:	2001      	moveq	r0, #1
   82c0a:	e005      	b.n	82c18 <pio_configure_pin+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82c0c:	f001 43e0 	and.w	r3, r1, #1879048192	; 0x70000000
   82c10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82c14:	d01e      	beq.n	82c54 <pio_configure_pin+0x98>
   82c16:	2000      	movs	r0, #0
}
   82c18:	b003      	add	sp, #12
   82c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82c1c:	f000 001f 	and.w	r0, r0, #31
   82c20:	2401      	movs	r4, #1
   82c22:	4084      	lsls	r4, r0
   82c24:	4622      	mov	r2, r4
   82c26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82c2a:	4628      	mov	r0, r5
   82c2c:	4b14      	ldr	r3, [pc, #80]	; (82c80 <pio_configure_pin+0xc4>)
   82c2e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82c30:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   82c34:	bf12      	itee	ne
   82c36:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82c38:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   82c3a:	2001      	moveq	r0, #1
   82c3c:	e7ec      	b.n	82c18 <pio_configure_pin+0x5c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82c3e:	f000 011f 	and.w	r1, r0, #31
   82c42:	2401      	movs	r4, #1
   82c44:	4632      	mov	r2, r6
   82c46:	fa04 f101 	lsl.w	r1, r4, r1
   82c4a:	4628      	mov	r0, r5
   82c4c:	4b0d      	ldr	r3, [pc, #52]	; (82c84 <pio_configure_pin+0xc8>)
   82c4e:	4798      	blx	r3
	return 1;
   82c50:	4620      	mov	r0, r4
		break;
   82c52:	e7e1      	b.n	82c18 <pio_configure_pin+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82c54:	f001 5260 	and.w	r2, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82c58:	f000 011f 	and.w	r1, r0, #31
   82c5c:	2701      	movs	r7, #1
   82c5e:	ea06 0307 	and.w	r3, r6, r7
   82c62:	9300      	str	r3, [sp, #0]
   82c64:	f3c6 0380 	ubfx	r3, r6, #2, #1
   82c68:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82c6c:	bf14      	ite	ne
   82c6e:	2200      	movne	r2, #0
   82c70:	2201      	moveq	r2, #1
   82c72:	fa07 f101 	lsl.w	r1, r7, r1
   82c76:	4628      	mov	r0, r5
   82c78:	4c03      	ldr	r4, [pc, #12]	; (82c88 <pio_configure_pin+0xcc>)
   82c7a:	47a0      	blx	r4
	return 1;
   82c7c:	4638      	mov	r0, r7
		break;
   82c7e:	e7cb      	b.n	82c18 <pio_configure_pin+0x5c>
   82c80:	00082acf 	.word	0x00082acf
   82c84:	00082b0b 	.word	0x00082b0b
   82c88:	00082b3d 	.word	0x00082b3d

00082c8c <pio_configure_pin_group>:
{
   82c8c:	b570      	push	{r4, r5, r6, lr}
   82c8e:	b082      	sub	sp, #8
   82c90:	4605      	mov	r5, r0
   82c92:	460e      	mov	r6, r1
   82c94:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   82c96:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82c9a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82c9e:	d029      	beq.n	82cf4 <pio_configure_pin_group+0x68>
   82ca0:	d814      	bhi.n	82ccc <pio_configure_pin_group+0x40>
   82ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82ca6:	d019      	beq.n	82cdc <pio_configure_pin_group+0x50>
   82ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82cac:	bf18      	it	ne
   82cae:	2000      	movne	r0, #0
   82cb0:	d112      	bne.n	82cd8 <pio_configure_pin_group+0x4c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82cb2:	460a      	mov	r2, r1
   82cb4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82cb8:	4628      	mov	r0, r5
   82cba:	4b18      	ldr	r3, [pc, #96]	; (82d1c <pio_configure_pin_group+0x90>)
   82cbc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82cbe:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   82cc2:	bf12      	itee	ne
   82cc4:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82cc6:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82cc8:	2001      	moveq	r0, #1
   82cca:	e005      	b.n	82cd8 <pio_configure_pin_group+0x4c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82ccc:	f002 43e0 	and.w	r3, r2, #1879048192	; 0x70000000
   82cd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82cd4:	d012      	beq.n	82cfc <pio_configure_pin_group+0x70>
   82cd6:	2000      	movs	r0, #0
}
   82cd8:	b002      	add	sp, #8
   82cda:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82cdc:	460a      	mov	r2, r1
   82cde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ce2:	4b0e      	ldr	r3, [pc, #56]	; (82d1c <pio_configure_pin_group+0x90>)
   82ce4:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82ce6:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   82cea:	bf12      	itee	ne
   82cec:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82cee:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82cf0:	2001      	moveq	r0, #1
   82cf2:	e7f1      	b.n	82cd8 <pio_configure_pin_group+0x4c>
		pio_set_input(p_pio, ul_mask, ul_flags);
   82cf4:	4b0a      	ldr	r3, [pc, #40]	; (82d20 <pio_configure_pin_group+0x94>)
   82cf6:	4798      	blx	r3
	return 1;
   82cf8:	2001      	movs	r0, #1
		break;
   82cfa:	e7ed      	b.n	82cd8 <pio_configure_pin_group+0x4c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82cfc:	f002 5260 	and.w	r2, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82d00:	f004 0301 	and.w	r3, r4, #1
   82d04:	9300      	str	r3, [sp, #0]
   82d06:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82d0a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82d0e:	bf14      	ite	ne
   82d10:	2200      	movne	r2, #0
   82d12:	2201      	moveq	r2, #1
   82d14:	4c03      	ldr	r4, [pc, #12]	; (82d24 <pio_configure_pin_group+0x98>)
   82d16:	47a0      	blx	r4
	return 1;
   82d18:	2001      	movs	r0, #1
		break;
   82d1a:	e7dd      	b.n	82cd8 <pio_configure_pin_group+0x4c>
   82d1c:	00082acf 	.word	0x00082acf
   82d20:	00082b0b 	.word	0x00082b0b
   82d24:	00082b3d 	.word	0x00082b3d

00082d28 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d2c:	4604      	mov	r4, r0
   82d2e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82d30:	4b0e      	ldr	r3, [pc, #56]	; (82d6c <pio_handler_process+0x44>)
   82d32:	4798      	blx	r3
   82d34:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82d36:	4620      	mov	r0, r4
   82d38:	4b0d      	ldr	r3, [pc, #52]	; (82d70 <pio_handler_process+0x48>)
   82d3a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82d3c:	4005      	ands	r5, r0
   82d3e:	d013      	beq.n	82d68 <pio_handler_process+0x40>
   82d40:	4c0c      	ldr	r4, [pc, #48]	; (82d74 <pio_handler_process+0x4c>)
   82d42:	f104 0860 	add.w	r8, r4, #96	; 0x60
   82d46:	e003      	b.n	82d50 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82d48:	4544      	cmp	r4, r8
   82d4a:	d00d      	beq.n	82d68 <pio_handler_process+0x40>
		while (status != 0) {
   82d4c:	3410      	adds	r4, #16
   82d4e:	b15d      	cbz	r5, 82d68 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82d50:	6820      	ldr	r0, [r4, #0]
   82d52:	42b0      	cmp	r0, r6
   82d54:	d1f8      	bne.n	82d48 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82d56:	6861      	ldr	r1, [r4, #4]
   82d58:	4229      	tst	r1, r5
   82d5a:	d0f5      	beq.n	82d48 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82d5c:	68e3      	ldr	r3, [r4, #12]
   82d5e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82d60:	6863      	ldr	r3, [r4, #4]
   82d62:	ea25 0503 	bic.w	r5, r5, r3
   82d66:	e7ef      	b.n	82d48 <pio_handler_process+0x20>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d6c:	00082b63 	.word	0x00082b63
   82d70:	00082b67 	.word	0x00082b67
   82d74:	200013a4 	.word	0x200013a4

00082d78 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82d78:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82d7a:	210a      	movs	r1, #10
   82d7c:	4801      	ldr	r0, [pc, #4]	; (82d84 <PIOA_Handler+0xc>)
   82d7e:	4b02      	ldr	r3, [pc, #8]	; (82d88 <PIOA_Handler+0x10>)
   82d80:	4798      	blx	r3
}
   82d82:	bd08      	pop	{r3, pc}
   82d84:	400e0c00 	.word	0x400e0c00
   82d88:	00082d29 	.word	0x00082d29

00082d8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82d8c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82d8e:	210b      	movs	r1, #11
   82d90:	4801      	ldr	r0, [pc, #4]	; (82d98 <PIOB_Handler+0xc>)
   82d92:	4b02      	ldr	r3, [pc, #8]	; (82d9c <PIOB_Handler+0x10>)
   82d94:	4798      	blx	r3
}
   82d96:	bd08      	pop	{r3, pc}
   82d98:	400e0e00 	.word	0x400e0e00
   82d9c:	00082d29 	.word	0x00082d29

00082da0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82da0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82da2:	210c      	movs	r1, #12
   82da4:	4801      	ldr	r0, [pc, #4]	; (82dac <PIOC_Handler+0xc>)
   82da6:	4b02      	ldr	r3, [pc, #8]	; (82db0 <PIOC_Handler+0x10>)
   82da8:	4798      	blx	r3
}
   82daa:	bd08      	pop	{r3, pc}
   82dac:	400e1000 	.word	0x400e1000
   82db0:	00082d29 	.word	0x00082d29

00082db4 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82db4:	4a16      	ldr	r2, [pc, #88]	; (82e10 <pmc_switch_mck_to_mainck+0x5c>)
   82db6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82db8:	f023 0303 	bic.w	r3, r3, #3
   82dbc:	f043 0301 	orr.w	r3, r3, #1
   82dc0:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82dc2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82dc4:	f013 0f08 	tst.w	r3, #8
   82dc8:	d10a      	bne.n	82de0 <pmc_switch_mck_to_mainck+0x2c>
   82dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82dce:	4910      	ldr	r1, [pc, #64]	; (82e10 <pmc_switch_mck_to_mainck+0x5c>)
   82dd0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82dd2:	f012 0f08 	tst.w	r2, #8
   82dd6:	d103      	bne.n	82de0 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82dd8:	3b01      	subs	r3, #1
   82dda:	d1f9      	bne.n	82dd0 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   82ddc:	2001      	movs	r0, #1
   82dde:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82de0:	4a0b      	ldr	r2, [pc, #44]	; (82e10 <pmc_switch_mck_to_mainck+0x5c>)
   82de2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82de8:	4303      	orrs	r3, r0
   82dea:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82dec:	6e90      	ldr	r0, [r2, #104]	; 0x68
   82dee:	f010 0008 	ands.w	r0, r0, #8
   82df2:	d10a      	bne.n	82e0a <pmc_switch_mck_to_mainck+0x56>
   82df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82df8:	4905      	ldr	r1, [pc, #20]	; (82e10 <pmc_switch_mck_to_mainck+0x5c>)
   82dfa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82dfc:	f012 0f08 	tst.w	r2, #8
   82e00:	d105      	bne.n	82e0e <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82e02:	3b01      	subs	r3, #1
   82e04:	d1f9      	bne.n	82dfa <pmc_switch_mck_to_mainck+0x46>
			return 1;
   82e06:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82e08:	4770      	bx	lr
	return 0;
   82e0a:	2000      	movs	r0, #0
   82e0c:	4770      	bx	lr
   82e0e:	4770      	bx	lr
   82e10:	400e0400 	.word	0x400e0400

00082e14 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82e14:	4a16      	ldr	r2, [pc, #88]	; (82e70 <pmc_switch_mck_to_pllack+0x5c>)
   82e16:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82e1c:	4303      	orrs	r3, r0
   82e1e:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e20:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82e22:	f013 0f08 	tst.w	r3, #8
   82e26:	d10a      	bne.n	82e3e <pmc_switch_mck_to_pllack+0x2a>
   82e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82e2c:	4910      	ldr	r1, [pc, #64]	; (82e70 <pmc_switch_mck_to_pllack+0x5c>)
   82e2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82e30:	f012 0f08 	tst.w	r2, #8
   82e34:	d103      	bne.n	82e3e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82e36:	3b01      	subs	r3, #1
   82e38:	d1f9      	bne.n	82e2e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82e3a:	2001      	movs	r0, #1
   82e3c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82e3e:	4a0c      	ldr	r2, [pc, #48]	; (82e70 <pmc_switch_mck_to_pllack+0x5c>)
   82e40:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82e42:	f023 0303 	bic.w	r3, r3, #3
   82e46:	f043 0302 	orr.w	r3, r3, #2
   82e4a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e4c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   82e4e:	f010 0008 	ands.w	r0, r0, #8
   82e52:	d10a      	bne.n	82e6a <pmc_switch_mck_to_pllack+0x56>
   82e54:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82e58:	4905      	ldr	r1, [pc, #20]	; (82e70 <pmc_switch_mck_to_pllack+0x5c>)
   82e5a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82e5c:	f012 0f08 	tst.w	r2, #8
   82e60:	d105      	bne.n	82e6e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82e62:	3b01      	subs	r3, #1
   82e64:	d1f9      	bne.n	82e5a <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82e66:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82e68:	4770      	bx	lr
	return 0;
   82e6a:	2000      	movs	r0, #0
   82e6c:	4770      	bx	lr
   82e6e:	4770      	bx	lr
   82e70:	400e0400 	.word	0x400e0400

00082e74 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   82e74:	4908      	ldr	r1, [pc, #32]	; (82e98 <pmc_osc_enable_main_xtal+0x24>)
   82e76:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82e78:	0203      	lsls	r3, r0, #8
   82e7a:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82e7c:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82e80:	4313      	orrs	r3, r2
   82e82:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82e86:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   82e8a:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82e8c:	460a      	mov	r2, r1
   82e8e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82e90:	f013 0f01 	tst.w	r3, #1
   82e94:	d0fb      	beq.n	82e8e <pmc_osc_enable_main_xtal+0x1a>
}
   82e96:	4770      	bx	lr
   82e98:	400e0400 	.word	0x400e0400

00082e9c <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   82e9c:	4b02      	ldr	r3, [pc, #8]	; (82ea8 <pmc_osc_is_ready_main_xtal+0xc>)
   82e9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82ea0:	f000 0001 	and.w	r0, r0, #1
   82ea4:	4770      	bx	lr
   82ea6:	bf00      	nop
   82ea8:	400e0400 	.word	0x400e0400

00082eac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82eac:	4b02      	ldr	r3, [pc, #8]	; (82eb8 <pmc_osc_is_ready_mainck+0xc>)
   82eae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82eb0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82eb4:	4770      	bx	lr
   82eb6:	bf00      	nop
   82eb8:	400e0400 	.word	0x400e0400

00082ebc <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   82ebc:	4b06      	ldr	r3, [pc, #24]	; (82ed8 <pmc_mainck_osc_select+0x1c>)
   82ebe:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   82ec0:	b130      	cbz	r0, 82ed0 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   82ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   82ec6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82eca:	4a03      	ldr	r2, [pc, #12]	; (82ed8 <pmc_mainck_osc_select+0x1c>)
   82ecc:	6213      	str	r3, [r2, #32]
}
   82ece:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   82ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   82ed4:	e7f7      	b.n	82ec6 <pmc_mainck_osc_select+0xa>
   82ed6:	bf00      	nop
   82ed8:	400e0400 	.word	0x400e0400

00082edc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82edc:	4b02      	ldr	r3, [pc, #8]	; (82ee8 <pmc_disable_pllack+0xc>)
   82ede:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82ee2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82ee4:	4770      	bx	lr
   82ee6:	bf00      	nop
   82ee8:	400e0400 	.word	0x400e0400

00082eec <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82eec:	4b02      	ldr	r3, [pc, #8]	; (82ef8 <pmc_is_locked_pllack+0xc>)
   82eee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82ef0:	f000 0002 	and.w	r0, r0, #2
   82ef4:	4770      	bx	lr
   82ef6:	bf00      	nop
   82ef8:	400e0400 	.word	0x400e0400

00082efc <pmc_disable_upll_clock>:
/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   82efc:	4a02      	ldr	r2, [pc, #8]	; (82f08 <pmc_disable_upll_clock+0xc>)
   82efe:	69d3      	ldr	r3, [r2, #28]
   82f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82f04:	61d3      	str	r3, [r2, #28]
}
   82f06:	4770      	bx	lr
   82f08:	400e0400 	.word	0x400e0400

00082f0c <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82f0c:	4b02      	ldr	r3, [pc, #8]	; (82f18 <pmc_is_locked_upll+0xc>)
   82f0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82f10:	f000 0040 	and.w	r0, r0, #64	; 0x40
   82f14:	4770      	bx	lr
   82f16:	bf00      	nop
   82f18:	400e0400 	.word	0x400e0400

00082f1c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82f1c:	281d      	cmp	r0, #29
   82f1e:	d80c      	bhi.n	82f3a <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82f20:	4b08      	ldr	r3, [pc, #32]	; (82f44 <pmc_enable_periph_clk+0x28>)
   82f22:	699a      	ldr	r2, [r3, #24]
   82f24:	2301      	movs	r3, #1
   82f26:	4083      	lsls	r3, r0
   82f28:	4393      	bics	r3, r2
   82f2a:	d008      	beq.n	82f3e <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
   82f2c:	2301      	movs	r3, #1
   82f2e:	fa03 f000 	lsl.w	r0, r3, r0
   82f32:	4b04      	ldr	r3, [pc, #16]	; (82f44 <pmc_enable_periph_clk+0x28>)
   82f34:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82f36:	2000      	movs	r0, #0
   82f38:	4770      	bx	lr
		return 1;
   82f3a:	2001      	movs	r0, #1
   82f3c:	4770      	bx	lr
	return 0;
   82f3e:	2000      	movs	r0, #0
}
   82f40:	4770      	bx	lr
   82f42:	bf00      	nop
   82f44:	400e0400 	.word	0x400e0400

00082f48 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82f48:	281d      	cmp	r0, #29
   82f4a:	d80e      	bhi.n	82f6a <pmc_disable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82f4c:	4b08      	ldr	r3, [pc, #32]	; (82f70 <pmc_disable_periph_clk+0x28>)
   82f4e:	699a      	ldr	r2, [r3, #24]
   82f50:	2301      	movs	r3, #1
   82f52:	4083      	lsls	r3, r0
   82f54:	4393      	bics	r3, r2
   82f56:	d001      	beq.n	82f5c <pmc_disable_periph_clk+0x14>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   82f58:	2000      	movs	r0, #0
}
   82f5a:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   82f5c:	2301      	movs	r3, #1
   82f5e:	fa03 f000 	lsl.w	r0, r3, r0
   82f62:	4b03      	ldr	r3, [pc, #12]	; (82f70 <pmc_disable_periph_clk+0x28>)
   82f64:	6158      	str	r0, [r3, #20]
	return 0;
   82f66:	2000      	movs	r0, #0
   82f68:	4770      	bx	lr
		return 1;
   82f6a:	2001      	movs	r0, #1
   82f6c:	4770      	bx	lr
   82f6e:	bf00      	nop
   82f70:	400e0400 	.word	0x400e0400

00082f74 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   82f74:	f44f 7380 	mov.w	r3, #256	; 0x100
   82f78:	4083      	lsls	r3, r0
   82f7a:	4a01      	ldr	r2, [pc, #4]	; (82f80 <pmc_enable_pck+0xc>)
   82f7c:	6013      	str	r3, [r2, #0]
}
   82f7e:	4770      	bx	lr
   82f80:	400e0400 	.word	0x400e0400

00082f84 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   82f84:	4b03      	ldr	r3, [pc, #12]	; (82f94 <pmc_set_fast_startup_input+0x10>)
   82f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82f88:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   82f8c:	4310      	orrs	r0, r2
   82f8e:	6718      	str	r0, [r3, #112]	; 0x70
}
   82f90:	4770      	bx	lr
   82f92:	bf00      	nop
   82f94:	400e0400 	.word	0x400e0400

00082f98 <pmc_enable_waitmode>:
 */
void pmc_enable_waitmode(void)
{
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   82f98:	4a0a      	ldr	r2, [pc, #40]	; (82fc4 <pmc_enable_waitmode+0x2c>)
   82f9a:	6f13      	ldr	r3, [r2, #112]	; 0x70
   82f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82fa0:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   82fa2:	4a09      	ldr	r2, [pc, #36]	; (82fc8 <pmc_enable_waitmode+0x30>)
   82fa4:	6913      	ldr	r3, [r2, #16]
   82fa6:	f023 0304 	bic.w	r3, r3, #4
   82faa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   82fac:	bf20      	wfe
   82fae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
   82fb2:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   82fb4:	3b01      	subs	r3, #1
   82fb6:	d1fc      	bne.n	82fb2 <pmc_enable_waitmode+0x1a>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   82fb8:	4a02      	ldr	r2, [pc, #8]	; (82fc4 <pmc_enable_waitmode+0x2c>)
   82fba:	6a13      	ldr	r3, [r2, #32]
   82fbc:	f013 0f08 	tst.w	r3, #8
   82fc0:	d0fb      	beq.n	82fba <pmc_enable_waitmode+0x22>

}
   82fc2:	4770      	bx	lr
   82fc4:	400e0400 	.word	0x400e0400
   82fc8:	e000ed00 	.word	0xe000ed00

00082fcc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   82fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82fd0:	4604      	mov	r4, r0
	switch (sleep_mode) {
   82fd2:	2804      	cmp	r0, #4
   82fd4:	dc18      	bgt.n	83008 <pmc_sleep+0x3c>
   82fd6:	2802      	cmp	r0, #2
   82fd8:	dc28      	bgt.n	8302c <pmc_sleep+0x60>
   82fda:	1e43      	subs	r3, r0, #1
   82fdc:	2b01      	cmp	r3, #1
   82fde:	d821      	bhi.n	83024 <pmc_sleep+0x58>
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82fe0:	4a93      	ldr	r2, [pc, #588]	; (83230 <pmc_sleep+0x264>)
   82fe2:	6f13      	ldr	r3, [r2, #112]	; 0x70
   82fe4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   82fe8:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   82fea:	4a92      	ldr	r2, [pc, #584]	; (83234 <pmc_sleep+0x268>)
   82fec:	6913      	ldr	r3, [r2, #16]
   82fee:	f023 0304 	bic.w	r3, r3, #4
   82ff2:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82ff4:	4b90      	ldr	r3, [pc, #576]	; (83238 <pmc_sleep+0x26c>)
   82ff6:	2201      	movs	r2, #1
   82ff8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82ffa:	f3bf 8f5f 	dmb	sy
   82ffe:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   83000:	2802      	cmp	r0, #2
   83002:	d011      	beq.n	83028 <pmc_sleep+0x5c>
  __ASM volatile ("wfe");
   83004:	bf20      	wfe
}
   83006:	e00d      	b.n	83024 <pmc_sleep+0x58>
	switch (sleep_mode) {
   83008:	2805      	cmp	r0, #5
   8300a:	d10b      	bne.n	83024 <pmc_sleep+0x58>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   8300c:	4a89      	ldr	r2, [pc, #548]	; (83234 <pmc_sleep+0x268>)
   8300e:	6913      	ldr	r3, [r2, #16]
   83010:	f043 0304 	orr.w	r3, r3, #4
   83014:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   83016:	4b88      	ldr	r3, [pc, #544]	; (83238 <pmc_sleep+0x26c>)
   83018:	2201      	movs	r2, #1
   8301a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8301c:	f3bf 8f5f 	dmb	sy
   83020:	b662      	cpsie	i
  __ASM volatile ("wfe");
   83022:	bf20      	wfe
		__WFE() ;
#endif
		break;
#endif
	}
}
   83024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __ASM volatile ("wfi");
   83028:	bf30      	wfi
}
   8302a:	e7fb      	b.n	83024 <pmc_sleep+0x58>
  __ASM volatile ("cpsid i");
   8302c:	b672      	cpsid	i
  __ASM volatile ("dmb");
   8302e:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   83032:	4b81      	ldr	r3, [pc, #516]	; (83238 <pmc_sleep+0x26c>)
   83034:	2200      	movs	r2, #0
   83036:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   83038:	4b80      	ldr	r3, [pc, #512]	; (8323c <pmc_sleep+0x270>)
   8303a:	2201      	movs	r2, #1
   8303c:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
   8303e:	4b7c      	ldr	r3, [pc, #496]	; (83230 <pmc_sleep+0x264>)
   83040:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
   83042:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
   83044:	4a7e      	ldr	r2, [pc, #504]	; (83240 <pmc_sleep+0x274>)
   83046:	f8d2 9000 	ldr.w	r9, [r2]
	uint32_t fmr1 = EFC1->EEFC_FMR;
   8304a:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8304e:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
   83052:	6a9e      	ldr	r6, [r3, #40]	; 0x28
		*p_pll1_setting = PMC->CKGR_UCKR;
   83054:	f8d3 a01c 	ldr.w	sl, [r3, #28]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   83058:	f447 125c 	orr.w	r2, r7, #3604480	; 0x370000
   8305c:	f042 0208 	orr.w	r2, r2, #8
   83060:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   83062:	f015 0f02 	tst.w	r5, #2
   83066:	d00a      	beq.n	8307e <pmc_sleep+0xb2>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   83068:	f025 0103 	bic.w	r1, r5, #3
   8306c:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
   83070:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83072:	461a      	mov	r2, r3
   83074:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83076:	f013 0f08 	tst.w	r3, #8
   8307a:	d0fb      	beq.n	83074 <pmc_sleep+0xa8>
   8307c:	e000      	b.n	83080 <pmc_sleep+0xb4>
	uint32_t mckr = PMC->PMC_MCKR;
   8307e:	4629      	mov	r1, r5
	if (mckr & PMC_MCKR_PRES_Msk) {
   83080:	f011 0f70 	tst.w	r1, #112	; 0x70
   83084:	d008      	beq.n	83098 <pmc_sleep+0xcc>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   83086:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
   8308a:	4b69      	ldr	r3, [pc, #420]	; (83230 <pmc_sleep+0x264>)
   8308c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8308e:	461a      	mov	r2, r3
   83090:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83092:	f013 0f08 	tst.w	r3, #8
   83096:	d0fb      	beq.n	83090 <pmc_sleep+0xc4>
	pmc_disable_pllack();
   83098:	4b6a      	ldr	r3, [pc, #424]	; (83244 <pmc_sleep+0x278>)
   8309a:	4798      	blx	r3
	pmc_disable_upll_clock();
   8309c:	4b6a      	ldr	r3, [pc, #424]	; (83248 <pmc_sleep+0x27c>)
   8309e:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   830a0:	4a63      	ldr	r2, [pc, #396]	; (83230 <pmc_sleep+0x264>)
   830a2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   830a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   830a8:	d0fb      	beq.n	830a2 <pmc_sleep+0xd6>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   830aa:	4a61      	ldr	r2, [pc, #388]	; (83230 <pmc_sleep+0x264>)
   830ac:	6a13      	ldr	r3, [r2, #32]
   830ae:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   830b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   830b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   830ba:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   830bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   830be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   830c2:	d0fb      	beq.n	830bc <pmc_sleep+0xf0>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   830c4:	f429 6370 	bic.w	r3, r9, #3840	; 0xf00
   830c8:	4a5d      	ldr	r2, [pc, #372]	; (83240 <pmc_sleep+0x274>)
   830ca:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   830cc:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
   830d0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   830d4:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   830d6:	2c04      	cmp	r4, #4
   830d8:	d109      	bne.n	830ee <pmc_sleep+0x122>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   830da:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
   830de:	6a13      	ldr	r3, [r2, #32]
   830e0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   830e4:	f023 0301 	bic.w	r3, r3, #1
   830e8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   830ec:	6213      	str	r3, [r2, #32]
		cpu_irq_enable();
   830ee:	4c52      	ldr	r4, [pc, #328]	; (83238 <pmc_sleep+0x26c>)
   830f0:	2301      	movs	r3, #1
   830f2:	7023      	strb	r3, [r4, #0]
   830f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   830f8:	b662      	cpsie	i
		pmc_enable_waitmode();
   830fa:	4b54      	ldr	r3, [pc, #336]	; (8324c <pmc_sleep+0x280>)
   830fc:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   830fe:	b672      	cpsid	i
   83100:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   83104:	2300      	movs	r3, #0
   83106:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   83108:	f017 0f02 	tst.w	r7, #2
   8310c:	d02a      	beq.n	83164 <pmc_sleep+0x198>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8310e:	4a48      	ldr	r2, [pc, #288]	; (83230 <pmc_sleep+0x264>)
   83110:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83112:	494f      	ldr	r1, [pc, #316]	; (83250 <pmc_sleep+0x284>)
   83114:	4019      	ands	r1, r3
   83116:	4b4f      	ldr	r3, [pc, #316]	; (83254 <pmc_sleep+0x288>)
   83118:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8311a:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8311c:	6a13      	ldr	r3, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
   8311e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83122:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   83126:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8312a:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   8312c:	4a4a      	ldr	r2, [pc, #296]	; (83258 <pmc_sleep+0x28c>)
   8312e:	4032      	ands	r2, r6
   83130:	b122      	cbz	r2, 8313c <pmc_sleep+0x170>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   83132:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
   83136:	4b3e      	ldr	r3, [pc, #248]	; (83230 <pmc_sleep+0x264>)
   83138:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   8313a:	2202      	movs	r2, #2
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   8313c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
   83140:	d004      	beq.n	8314c <pmc_sleep+0x180>
		PMC->CKGR_UCKR = pll1_setting;
   83142:	4b3b      	ldr	r3, [pc, #236]	; (83230 <pmc_sleep+0x264>)
   83144:	f8c3 a01c 	str.w	sl, [r3, #28]
		pll_sr |= PMC_SR_LOCKU;
   83148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   8314c:	f005 0303 	and.w	r3, r5, #3
   83150:	2b02      	cmp	r3, #2
   83152:	d038      	beq.n	831c6 <pmc_sleep+0x1fa>
   83154:	2b03      	cmp	r3, #3
   83156:	d13b      	bne.n	831d0 <pmc_sleep+0x204>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   83158:	4935      	ldr	r1, [pc, #212]	; (83230 <pmc_sleep+0x264>)
   8315a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8315c:	f013 0f40 	tst.w	r3, #64	; 0x40
   83160:	d0fb      	beq.n	8315a <pmc_sleep+0x18e>
   83162:	e035      	b.n	831d0 <pmc_sleep+0x204>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   83164:	f017 0f01 	tst.w	r7, #1
   83168:	d0e0      	beq.n	8312c <pmc_sleep+0x160>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   8316a:	4b31      	ldr	r3, [pc, #196]	; (83230 <pmc_sleep+0x264>)
   8316c:	6a1b      	ldr	r3, [r3, #32]
   8316e:	f013 0f01 	tst.w	r3, #1
   83172:	d10e      	bne.n	83192 <pmc_sleep+0x1c6>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83174:	4a2e      	ldr	r2, [pc, #184]	; (83230 <pmc_sleep+0x264>)
   83176:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   83178:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8317c:	f023 0303 	bic.w	r3, r3, #3
   83180:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83184:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83188:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8318a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8318c:	f013 0f01 	tst.w	r3, #1
   83190:	d0fb      	beq.n	8318a <pmc_sleep+0x1be>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   83192:	4b27      	ldr	r3, [pc, #156]	; (83230 <pmc_sleep+0x264>)
   83194:	6a1b      	ldr	r3, [r3, #32]
   83196:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8319a:	d10a      	bne.n	831b2 <pmc_sleep+0x1e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8319c:	4a24      	ldr	r2, [pc, #144]	; (83230 <pmc_sleep+0x264>)
   8319e:	6a13      	ldr	r3, [r2, #32]
   831a0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   831a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   831a8:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   831aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   831ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   831b0:	d0fb      	beq.n	831aa <pmc_sleep+0x1de>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   831b2:	4a1f      	ldr	r2, [pc, #124]	; (83230 <pmc_sleep+0x264>)
   831b4:	6a13      	ldr	r3, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
   831b6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   831ba:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   831be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   831c2:	6213      	str	r3, [r2, #32]
   831c4:	e7b2      	b.n	8312c <pmc_sleep+0x160>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   831c6:	491a      	ldr	r1, [pc, #104]	; (83230 <pmc_sleep+0x264>)
   831c8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   831ca:	f013 0f02 	tst.w	r3, #2
   831ce:	d0fb      	beq.n	831c8 <pmc_sleep+0x1fc>
	mckr = PMC->PMC_MCKR;
   831d0:	4917      	ldr	r1, [pc, #92]	; (83230 <pmc_sleep+0x264>)
   831d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   831d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   831d8:	f005 0070 	and.w	r0, r5, #112	; 0x70
   831dc:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   831de:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   831e0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   831e2:	f013 0f08 	tst.w	r3, #8
   831e6:	d0fb      	beq.n	831e0 <pmc_sleep+0x214>
	EFC0->EEFC_FMR = fmr_setting;
   831e8:	4b15      	ldr	r3, [pc, #84]	; (83240 <pmc_sleep+0x274>)
   831ea:	f8c3 9000 	str.w	r9, [r3]
	EFC1->EEFC_FMR = fmr_setting1;
   831ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
   831f2:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
   831f6:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
   831fa:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   831fc:	4619      	mov	r1, r3
   831fe:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   83200:	f013 0f08 	tst.w	r3, #8
   83204:	d0fb      	beq.n	831fe <pmc_sleep+0x232>
	while (!(PMC->PMC_SR & pll_sr));
   83206:	490a      	ldr	r1, [pc, #40]	; (83230 <pmc_sleep+0x264>)
   83208:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8320a:	4213      	tst	r3, r2
   8320c:	d0fc      	beq.n	83208 <pmc_sleep+0x23c>
		b_is_sleep_clock_used = false;
   8320e:	4b0b      	ldr	r3, [pc, #44]	; (8323c <pmc_sleep+0x270>)
   83210:	2200      	movs	r2, #0
   83212:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   83214:	4b11      	ldr	r3, [pc, #68]	; (8325c <pmc_sleep+0x290>)
   83216:	681b      	ldr	r3, [r3, #0]
   83218:	b11b      	cbz	r3, 83222 <pmc_sleep+0x256>
			callback_clocks_restored();
   8321a:	4798      	blx	r3
			callback_clocks_restored = NULL;
   8321c:	4b0f      	ldr	r3, [pc, #60]	; (8325c <pmc_sleep+0x290>)
   8321e:	2200      	movs	r2, #0
   83220:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   83222:	4b05      	ldr	r3, [pc, #20]	; (83238 <pmc_sleep+0x26c>)
   83224:	2201      	movs	r2, #1
   83226:	701a      	strb	r2, [r3, #0]
   83228:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8322c:	b662      	cpsie	i
		break;
   8322e:	e6f9      	b.n	83024 <pmc_sleep+0x58>
   83230:	400e0400 	.word	0x400e0400
   83234:	e000ed00 	.word	0xe000ed00
   83238:	20000382 	.word	0x20000382
   8323c:	20001414 	.word	0x20001414
   83240:	400e0800 	.word	0x400e0800
   83244:	00082edd 	.word	0x00082edd
   83248:	00082efd 	.word	0x00082efd
   8324c:	00082f99 	.word	0x00082f99
   83250:	fec8fffc 	.word	0xfec8fffc
   83254:	01370002 	.word	0x01370002
   83258:	07ff0000 	.word	0x07ff0000
   8325c:	20001418 	.word	0x20001418

00083260 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83260:	4b02      	ldr	r3, [pc, #8]	; (8326c <pmc_is_wakeup_clocks_restored+0xc>)
   83262:	7818      	ldrb	r0, [r3, #0]
}
   83264:	f080 0001 	eor.w	r0, r0, #1
   83268:	4770      	bx	lr
   8326a:	bf00      	nop
   8326c:	20001414 	.word	0x20001414

00083270 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   83270:	b508      	push	{r3, lr}
   83272:	2014      	movs	r0, #20
   83274:	4b01      	ldr	r3, [pc, #4]	; (8327c <spi_enable_clock+0xc>)
   83276:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   83278:	bd08      	pop	{r3, pc}
   8327a:	bf00      	nop
   8327c:	00082f1d 	.word	0x00082f1d

00083280 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   83280:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   83282:	f643 2499 	movw	r4, #15001	; 0x3a99
   83286:	6905      	ldr	r5, [r0, #16]
   83288:	f015 0f02 	tst.w	r5, #2
   8328c:	d103      	bne.n	83296 <spi_write+0x16>
		if (!timeout--) {
   8328e:	3c01      	subs	r4, #1
   83290:	d1f9      	bne.n	83286 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   83292:	2001      	movs	r0, #1
   83294:	e00c      	b.n	832b0 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
   83296:	6844      	ldr	r4, [r0, #4]
   83298:	f014 0f02 	tst.w	r4, #2
   8329c:	d006      	beq.n	832ac <spi_write+0x2c>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   8329e:	0412      	lsls	r2, r2, #16
   832a0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   832a4:	4311      	orrs	r1, r2
		if (uc_last) {
   832a6:	b10b      	cbz	r3, 832ac <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   832a8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   832ac:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   832ae:	2000      	movs	r0, #0
}
   832b0:	bc30      	pop	{r4, r5}
   832b2:	4770      	bx	lr

000832b4 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   832b4:	b132      	cbz	r2, 832c4 <spi_set_clock_polarity+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   832b6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   832ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
   832bc:	f043 0301 	orr.w	r3, r3, #1
   832c0:	6303      	str	r3, [r0, #48]	; 0x30
   832c2:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   832c4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   832c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   832ca:	f023 0301 	bic.w	r3, r3, #1
   832ce:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   832d0:	4770      	bx	lr

000832d2 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   832d2:	b132      	cbz	r2, 832e2 <spi_set_clock_phase+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   832d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   832d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   832da:	f043 0302 	orr.w	r3, r3, #2
   832de:	6303      	str	r3, [r0, #48]	; 0x30
   832e0:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   832e2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   832e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   832e8:	f023 0302 	bic.w	r3, r3, #2
   832ec:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   832ee:	4770      	bx	lr

000832f0 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   832f0:	1e43      	subs	r3, r0, #1
   832f2:	440b      	add	r3, r1
   832f4:	fbb3 f0f0 	udiv	r0, r3, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   832f8:	1e43      	subs	r3, r0, #1
   832fa:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   832fc:	bf94      	ite	ls
   832fe:	b200      	sxthls	r0, r0
		return -1;
   83300:	f04f 30ff 	movhi.w	r0, #4294967295
}
   83304:	4770      	bx	lr

00083306 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   83306:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8330a:	6b08      	ldr	r0, [r1, #48]	; 0x30
   8330c:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
   83310:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   83312:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83314:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   83318:	630b      	str	r3, [r1, #48]	; 0x30
}
   8331a:	4770      	bx	lr

0008331c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   8331c:	4603      	mov	r3, r0
   8331e:	b9c0      	cbnz	r0, 83352 <udd_sleep_mode+0x36>
   83320:	4a18      	ldr	r2, [pc, #96]	; (83384 <udd_sleep_mode+0x68>)
   83322:	7812      	ldrb	r2, [r2, #0]
   83324:	b192      	cbz	r2, 8334c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83326:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8332a:	b672      	cpsid	i
   8332c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83330:	4a15      	ldr	r2, [pc, #84]	; (83388 <udd_sleep_mode+0x6c>)
   83332:	2100      	movs	r1, #0
   83334:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   83336:	4915      	ldr	r1, [pc, #84]	; (8338c <udd_sleep_mode+0x70>)
   83338:	788a      	ldrb	r2, [r1, #2]
   8333a:	3a01      	subs	r2, #1
   8333c:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8333e:	b928      	cbnz	r0, 8334c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   83340:	4a11      	ldr	r2, [pc, #68]	; (83388 <udd_sleep_mode+0x6c>)
   83342:	2101      	movs	r1, #1
   83344:	7011      	strb	r1, [r2, #0]
   83346:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8334a:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8334c:	4a0d      	ldr	r2, [pc, #52]	; (83384 <udd_sleep_mode+0x68>)
   8334e:	7013      	strb	r3, [r2, #0]
}
   83350:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   83352:	4a0c      	ldr	r2, [pc, #48]	; (83384 <udd_sleep_mode+0x68>)
   83354:	7812      	ldrb	r2, [r2, #0]
   83356:	2a00      	cmp	r2, #0
   83358:	d1f8      	bne.n	8334c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8335a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8335e:	b672      	cpsid	i
   83360:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83364:	4a08      	ldr	r2, [pc, #32]	; (83388 <udd_sleep_mode+0x6c>)
   83366:	2100      	movs	r1, #0
   83368:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   8336a:	4908      	ldr	r1, [pc, #32]	; (8338c <udd_sleep_mode+0x70>)
   8336c:	788a      	ldrb	r2, [r1, #2]
   8336e:	3201      	adds	r2, #1
   83370:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   83372:	2800      	cmp	r0, #0
   83374:	d1ea      	bne.n	8334c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   83376:	4a04      	ldr	r2, [pc, #16]	; (83388 <udd_sleep_mode+0x6c>)
   83378:	2101      	movs	r1, #1
   8337a:	7011      	strb	r1, [r2, #0]
   8337c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83380:	b662      	cpsie	i
}
   83382:	e7e3      	b.n	8334c <udd_sleep_mode+0x30>
   83384:	2000141d 	.word	0x2000141d
   83388:	20000382 	.word	0x20000382
   8338c:	20001be8 	.word	0x20001be8

00083390 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83390:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   83394:	b672      	cpsid	i
   83396:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8339a:	4a0e      	ldr	r2, [pc, #56]	; (833d4 <udd_ctrl_init+0x44>)
   8339c:	2100      	movs	r1, #0
   8339e:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   833a0:	4a0d      	ldr	r2, [pc, #52]	; (833d8 <udd_ctrl_init+0x48>)
   833a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   833a6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   833aa:	b92b      	cbnz	r3, 833b8 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   833ac:	4b09      	ldr	r3, [pc, #36]	; (833d4 <udd_ctrl_init+0x44>)
   833ae:	2201      	movs	r2, #1
   833b0:	701a      	strb	r2, [r3, #0]
   833b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   833b6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   833b8:	4b07      	ldr	r3, [pc, #28]	; (833d8 <udd_ctrl_init+0x48>)
   833ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   833be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   833c2:	4a06      	ldr	r2, [pc, #24]	; (833dc <udd_ctrl_init+0x4c>)
   833c4:	2300      	movs	r3, #0
   833c6:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   833c8:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   833ca:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   833cc:	4a04      	ldr	r2, [pc, #16]	; (833e0 <udd_ctrl_init+0x50>)
   833ce:	7013      	strb	r3, [r2, #0]
}
   833d0:	4770      	bx	lr
   833d2:	bf00      	nop
   833d4:	20000382 	.word	0x20000382
   833d8:	400a4000 	.word	0x400a4000
   833dc:	20001bfc 	.word	0x20001bfc
   833e0:	20001422 	.word	0x20001422

000833e4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   833e4:	4b03      	ldr	r3, [pc, #12]	; (833f4 <udd_ctrl_stall_data+0x10>)
   833e6:	2205      	movs	r2, #5
   833e8:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   833ea:	4b03      	ldr	r3, [pc, #12]	; (833f8 <udd_ctrl_stall_data+0x14>)
   833ec:	2220      	movs	r2, #32
   833ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   833f2:	4770      	bx	lr
   833f4:	20001422 	.word	0x20001422
   833f8:	400a4000 	.word	0x400a4000

000833fc <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   833fc:	4b11      	ldr	r3, [pc, #68]	; (83444 <udd_ctrl_send_zlp_in+0x48>)
   833fe:	2203      	movs	r2, #3
   83400:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83402:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83406:	b672      	cpsid	i
   83408:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8340c:	4b0e      	ldr	r3, [pc, #56]	; (83448 <udd_ctrl_send_zlp_in+0x4c>)
   8340e:	2200      	movs	r2, #0
   83410:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   83412:	4b0e      	ldr	r3, [pc, #56]	; (8344c <udd_ctrl_send_zlp_in+0x50>)
   83414:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83418:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8341c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83420:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83424:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   83428:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8342c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   83430:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83434:	b929      	cbnz	r1, 83442 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   83436:	4b04      	ldr	r3, [pc, #16]	; (83448 <udd_ctrl_send_zlp_in+0x4c>)
   83438:	2201      	movs	r2, #1
   8343a:	701a      	strb	r2, [r3, #0]
   8343c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83440:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   83442:	4770      	bx	lr
   83444:	20001422 	.word	0x20001422
   83448:	20000382 	.word	0x20000382
   8344c:	400a4000 	.word	0x400a4000

00083450 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   83450:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   83452:	4b02      	ldr	r3, [pc, #8]	; (8345c <udd_ctrl_endofrequest+0xc>)
   83454:	691b      	ldr	r3, [r3, #16]
   83456:	b103      	cbz	r3, 8345a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   83458:	4798      	blx	r3
	}
}
   8345a:	bd08      	pop	{r3, pc}
   8345c:	20001bfc 	.word	0x20001bfc

00083460 <udd_ctrl_in_sent>:
{
   83460:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83462:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   83466:	b672      	cpsid	i
   83468:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8346c:	4a4c      	ldr	r2, [pc, #304]	; (835a0 <udd_ctrl_in_sent+0x140>)
   8346e:	2100      	movs	r1, #0
   83470:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   83472:	4a4c      	ldr	r2, [pc, #304]	; (835a4 <udd_ctrl_in_sent+0x144>)
   83474:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83478:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8347c:	b92b      	cbnz	r3, 8348a <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   8347e:	4b48      	ldr	r3, [pc, #288]	; (835a0 <udd_ctrl_in_sent+0x140>)
   83480:	2201      	movs	r2, #1
   83482:	701a      	strb	r2, [r3, #0]
   83484:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83488:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8348a:	4b47      	ldr	r3, [pc, #284]	; (835a8 <udd_ctrl_in_sent+0x148>)
   8348c:	781b      	ldrb	r3, [r3, #0]
   8348e:	2b03      	cmp	r3, #3
   83490:	d05a      	beq.n	83548 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83492:	4b46      	ldr	r3, [pc, #280]	; (835ac <udd_ctrl_in_sent+0x14c>)
   83494:	881b      	ldrh	r3, [r3, #0]
   83496:	4a46      	ldr	r2, [pc, #280]	; (835b0 <udd_ctrl_in_sent+0x150>)
   83498:	8994      	ldrh	r4, [r2, #12]
   8349a:	1ae4      	subs	r4, r4, r3
   8349c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   8349e:	b9c4      	cbnz	r4, 834d2 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   834a0:	4a44      	ldr	r2, [pc, #272]	; (835b4 <udd_ctrl_in_sent+0x154>)
   834a2:	8811      	ldrh	r1, [r2, #0]
   834a4:	440b      	add	r3, r1
   834a6:	b29b      	uxth	r3, r3
   834a8:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   834aa:	4a41      	ldr	r2, [pc, #260]	; (835b0 <udd_ctrl_in_sent+0x150>)
   834ac:	88d2      	ldrh	r2, [r2, #6]
   834ae:	429a      	cmp	r2, r3
   834b0:	d04f      	beq.n	83552 <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   834b2:	4b41      	ldr	r3, [pc, #260]	; (835b8 <udd_ctrl_in_sent+0x158>)
   834b4:	781b      	ldrb	r3, [r3, #0]
   834b6:	2b00      	cmp	r3, #0
   834b8:	d14b      	bne.n	83552 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   834ba:	4b3d      	ldr	r3, [pc, #244]	; (835b0 <udd_ctrl_in_sent+0x150>)
   834bc:	695b      	ldr	r3, [r3, #20]
   834be:	2b00      	cmp	r3, #0
   834c0:	d06c      	beq.n	8359c <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   834c2:	4798      	blx	r3
   834c4:	2800      	cmp	r0, #0
   834c6:	d069      	beq.n	8359c <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   834c8:	4b38      	ldr	r3, [pc, #224]	; (835ac <udd_ctrl_in_sent+0x14c>)
   834ca:	2200      	movs	r2, #0
   834cc:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   834ce:	4b38      	ldr	r3, [pc, #224]	; (835b0 <udd_ctrl_in_sent+0x150>)
   834d0:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   834d2:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   834d4:	bf92      	itee	ls
   834d6:	2201      	movls	r2, #1
		b_shortpacket = false;
   834d8:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   834da:	2440      	movhi	r4, #64	; 0x40
   834dc:	4b36      	ldr	r3, [pc, #216]	; (835b8 <udd_ctrl_in_sent+0x158>)
   834de:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   834e0:	4b33      	ldr	r3, [pc, #204]	; (835b0 <udd_ctrl_in_sent+0x150>)
   834e2:	689a      	ldr	r2, [r3, #8]
   834e4:	4b31      	ldr	r3, [pc, #196]	; (835ac <udd_ctrl_in_sent+0x14c>)
   834e6:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   834e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   834ec:	b672      	cpsid	i
   834ee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   834f2:	4b2b      	ldr	r3, [pc, #172]	; (835a0 <udd_ctrl_in_sent+0x140>)
   834f4:	2100      	movs	r1, #0
   834f6:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   834f8:	4b2a      	ldr	r3, [pc, #168]	; (835a4 <udd_ctrl_in_sent+0x144>)
   834fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   834fe:	f413 7f00 	tst.w	r3, #512	; 0x200
   83502:	d140      	bne.n	83586 <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   83504:	b14c      	cbz	r4, 8351a <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83506:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83508:	4b2c      	ldr	r3, [pc, #176]	; (835bc <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   8350a:	4619      	mov	r1, r3
   8350c:	3301      	adds	r3, #1
   8350e:	f812 0b01 	ldrb.w	r0, [r2], #1
   83512:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   83514:	b2d9      	uxtb	r1, r3
   83516:	42a1      	cmp	r1, r4
   83518:	d3f7      	bcc.n	8350a <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   8351a:	4a24      	ldr	r2, [pc, #144]	; (835ac <udd_ctrl_in_sent+0x14c>)
   8351c:	8813      	ldrh	r3, [r2, #0]
   8351e:	441c      	add	r4, r3
   83520:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   83522:	4b20      	ldr	r3, [pc, #128]	; (835a4 <udd_ctrl_in_sent+0x144>)
   83524:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83528:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8352c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   83530:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83534:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83538:	bb7d      	cbnz	r5, 8359a <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   8353a:	4b19      	ldr	r3, [pc, #100]	; (835a0 <udd_ctrl_in_sent+0x140>)
   8353c:	2201      	movs	r2, #1
   8353e:	701a      	strb	r2, [r3, #0]
   83540:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83544:	b662      	cpsie	i
}
   83546:	e028      	b.n	8359a <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   83548:	4b1d      	ldr	r3, [pc, #116]	; (835c0 <udd_ctrl_in_sent+0x160>)
   8354a:	4798      	blx	r3
		udd_ctrl_init();
   8354c:	4b1d      	ldr	r3, [pc, #116]	; (835c4 <udd_ctrl_in_sent+0x164>)
   8354e:	4798      	blx	r3
		return;
   83550:	e023      	b.n	8359a <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83552:	4b15      	ldr	r3, [pc, #84]	; (835a8 <udd_ctrl_in_sent+0x148>)
   83554:	2204      	movs	r2, #4
   83556:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83558:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   8355c:	b672      	cpsid	i
   8355e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83562:	4b0f      	ldr	r3, [pc, #60]	; (835a0 <udd_ctrl_in_sent+0x140>)
   83564:	2200      	movs	r2, #0
   83566:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   83568:	4b0e      	ldr	r3, [pc, #56]	; (835a4 <udd_ctrl_in_sent+0x144>)
   8356a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8356e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   83572:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83576:	b981      	cbnz	r1, 8359a <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   83578:	4b09      	ldr	r3, [pc, #36]	; (835a0 <udd_ctrl_in_sent+0x140>)
   8357a:	2201      	movs	r2, #1
   8357c:	701a      	strb	r2, [r3, #0]
   8357e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83582:	b662      	cpsie	i
}
   83584:	e009      	b.n	8359a <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   83586:	b92d      	cbnz	r5, 83594 <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   83588:	4b05      	ldr	r3, [pc, #20]	; (835a0 <udd_ctrl_in_sent+0x140>)
   8358a:	2201      	movs	r2, #1
   8358c:	701a      	strb	r2, [r3, #0]
   8358e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83592:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83594:	4b04      	ldr	r3, [pc, #16]	; (835a8 <udd_ctrl_in_sent+0x148>)
   83596:	2204      	movs	r2, #4
   83598:	701a      	strb	r2, [r3, #0]
}
   8359a:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   8359c:	2201      	movs	r2, #1
   8359e:	e79d      	b.n	834dc <udd_ctrl_in_sent+0x7c>
   835a0:	20000382 	.word	0x20000382
   835a4:	400a4000 	.word	0x400a4000
   835a8:	20001422 	.word	0x20001422
   835ac:	2000141e 	.word	0x2000141e
   835b0:	20001bfc 	.word	0x20001bfc
   835b4:	20001420 	.word	0x20001420
   835b8:	2000141c 	.word	0x2000141c
   835bc:	20180000 	.word	0x20180000
   835c0:	00083451 	.word	0x00083451
   835c4:	00083391 	.word	0x00083391

000835c8 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   835c8:	b538      	push	{r3, r4, r5, lr}
   835ca:	4603      	mov	r3, r0
   835cc:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   835ce:	7d19      	ldrb	r1, [r3, #20]
   835d0:	f011 0f01 	tst.w	r1, #1
   835d4:	d011      	beq.n	835fa <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   835d6:	7d19      	ldrb	r1, [r3, #20]
   835d8:	f36f 0100 	bfc	r1, #0, #1
   835dc:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   835de:	681c      	ldr	r4, [r3, #0]
   835e0:	b15c      	cbz	r4, 835fa <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   835e2:	f102 0108 	add.w	r1, r2, #8
   835e6:	0149      	lsls	r1, r1, #5
   835e8:	4d04      	ldr	r5, [pc, #16]	; (835fc <udd_ep_finish_job+0x34>)
   835ea:	5869      	ldr	r1, [r5, r1]
   835ec:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   835f0:	bf18      	it	ne
   835f2:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   835f6:	6899      	ldr	r1, [r3, #8]
   835f8:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   835fa:	bd38      	pop	{r3, r4, r5, pc}
   835fc:	400a4000 	.word	0x400a4000

00083600 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83602:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83604:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   83606:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8360a:	496c      	ldr	r1, [pc, #432]	; (837bc <udd_ep_trans_done+0x1bc>)
   8360c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   83610:	7d09      	ldrb	r1, [r1, #20]
   83612:	f011 0f01 	tst.w	r1, #1
   83616:	f000 80ca 	beq.w	837ae <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8361a:	4601      	mov	r1, r0
   8361c:	4867      	ldr	r0, [pc, #412]	; (837bc <udd_ep_trans_done+0x1bc>)
   8361e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   83622:	68cd      	ldr	r5, [r1, #12]
   83624:	6888      	ldr	r0, [r1, #8]
   83626:	4285      	cmp	r5, r0
   83628:	f000 80a6 	beq.w	83778 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8362c:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8362e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   83632:	d863      	bhi.n	836fc <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   83634:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   83636:	0151      	lsls	r1, r2, #5
   83638:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8363c:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   83640:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   83644:	f016 0f08 	tst.w	r6, #8
   83648:	d014      	beq.n	83674 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8364a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8364e:	f006 0607 	and.w	r6, r6, #7
   83652:	2108      	movs	r1, #8
   83654:	40b1      	lsls	r1, r6
   83656:	3901      	subs	r1, #1
   83658:	4201      	tst	r1, r0
   8365a:	d068      	beq.n	8372e <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8365c:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83660:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   83664:	4e55      	ldr	r6, [pc, #340]	; (837bc <udd_ep_trans_done+0x1bc>)
   83666:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   8366a:	7d0e      	ldrb	r6, [r1, #20]
   8366c:	f36f 0641 	bfc	r6, #1, #1
   83670:	750e      	strb	r6, [r1, #20]
   83672:	e05c      	b.n	8372e <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83674:	0151      	lsls	r1, r2, #5
   83676:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8367a:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8367e:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   83682:	f3c6 1601 	ubfx	r6, r6, #4, #2
   83686:	2e01      	cmp	r6, #1
   83688:	d14f      	bne.n	8372a <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8368a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8368e:	f006 0607 	and.w	r6, r6, #7
   83692:	2108      	movs	r1, #8
   83694:	40b1      	lsls	r1, r6
   83696:	4281      	cmp	r1, r0
   83698:	d247      	bcs.n	8372a <udd_ep_trans_done+0x12a>
   8369a:	e048      	b.n	8372e <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   8369c:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   836a0:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   836a2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   836a6:	4a45      	ldr	r2, [pc, #276]	; (837bc <udd_ep_trans_done+0x1bc>)
   836a8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   836ac:	68d1      	ldr	r1, [r2, #12]
   836ae:	4401      	add	r1, r0
   836b0:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   836b2:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   836b4:	4a42      	ldr	r2, [pc, #264]	; (837c0 <udd_ep_trans_done+0x1c0>)
   836b6:	6911      	ldr	r1, [r2, #16]
   836b8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   836bc:	fa00 f303 	lsl.w	r3, r0, r3
   836c0:	430b      	orrs	r3, r1
   836c2:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   836c4:	2d00      	cmp	r5, #0
   836c6:	d172      	bne.n	837ae <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   836c8:	4b3e      	ldr	r3, [pc, #248]	; (837c4 <udd_ep_trans_done+0x1c4>)
   836ca:	2201      	movs	r2, #1
   836cc:	701a      	strb	r2, [r3, #0]
   836ce:	f3bf 8f5f 	dmb	sy
   836d2:	b662      	cpsie	i
}
   836d4:	e06b      	b.n	837ae <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   836d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   836da:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   836de:	4b38      	ldr	r3, [pc, #224]	; (837c0 <udd_ep_trans_done+0x1c0>)
   836e0:	6919      	ldr	r1, [r3, #16]
   836e2:	f44f 7080 	mov.w	r0, #256	; 0x100
   836e6:	fa00 f202 	lsl.w	r2, r0, r2
   836ea:	430a      	orrs	r2, r1
   836ec:	611a      	str	r2, [r3, #16]
			return;
   836ee:	e05e      	b.n	837ae <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   836f0:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   836f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   836f8:	2400      	movs	r4, #0
   836fa:	e018      	b.n	8372e <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   836fc:	0151      	lsls	r1, r2, #5
   836fe:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   83702:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   83706:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   8370a:	f014 0408 	ands.w	r4, r4, #8
   8370e:	d1ef      	bne.n	836f0 <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83710:	0151      	lsls	r1, r2, #5
   83712:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   83716:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8371a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   8371e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   83722:	2801      	cmp	r0, #1
   83724:	d044      	beq.n	837b0 <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83726:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   8372a:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8372e:	4926      	ldr	r1, [pc, #152]	; (837c8 <udd_ep_trans_done+0x1c8>)
   83730:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   83734:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   83738:	4f20      	ldr	r7, [pc, #128]	; (837bc <udd_ep_trans_done+0x1bc>)
   8373a:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   8373e:	6876      	ldr	r6, [r6, #4]
   83740:	4435      	add	r5, r6
   83742:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83744:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   83748:	b672      	cpsid	i
   8374a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8374e:	4e1d      	ldr	r6, [pc, #116]	; (837c4 <udd_ep_trans_done+0x1c4>)
   83750:	2700      	movs	r7, #0
   83752:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   83754:	68ce      	ldr	r6, [r1, #12]
   83756:	f016 0f10 	tst.w	r6, #16
   8375a:	d09f      	beq.n	8369c <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   8375c:	b92d      	cbnz	r5, 8376a <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   8375e:	4919      	ldr	r1, [pc, #100]	; (837c4 <udd_ep_trans_done+0x1c4>)
   83760:	2001      	movs	r0, #1
   83762:	7008      	strb	r0, [r1, #0]
   83764:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83768:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   8376a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8376e:	4813      	ldr	r0, [pc, #76]	; (837bc <udd_ep_trans_done+0x1bc>)
   83770:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   83774:	68c8      	ldr	r0, [r1, #12]
   83776:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   83778:	0151      	lsls	r1, r2, #5
   8377a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8377e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   83782:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   83786:	f010 0f08 	tst.w	r0, #8
   8378a:	d008      	beq.n	8379e <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   8378c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   83790:	4c0a      	ldr	r4, [pc, #40]	; (837bc <udd_ep_trans_done+0x1bc>)
   83792:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   83796:	7d00      	ldrb	r0, [r0, #20]
   83798:	f010 0f02 	tst.w	r0, #2
   8379c:	d19b      	bne.n	836d6 <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   8379e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   837a2:	2100      	movs	r1, #0
   837a4:	4805      	ldr	r0, [pc, #20]	; (837bc <udd_ep_trans_done+0x1bc>)
   837a6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   837aa:	4b08      	ldr	r3, [pc, #32]	; (837cc <udd_ep_trans_done+0x1cc>)
   837ac:	4798      	blx	r3
}
   837ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   837b0:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   837b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   837b8:	e7b9      	b.n	8372e <udd_ep_trans_done+0x12e>
   837ba:	bf00      	nop
   837bc:	20001424 	.word	0x20001424
   837c0:	400a4000 	.word	0x400a4000
   837c4:	20000382 	.word	0x20000382
   837c8:	400a4300 	.word	0x400a4300
   837cc:	000835c9 	.word	0x000835c9

000837d0 <UDPHS_Handler>:
{
   837d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   837d4:	201d      	movs	r0, #29
   837d6:	4ba0      	ldr	r3, [pc, #640]	; (83a58 <UDPHS_Handler+0x288>)
   837d8:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   837da:	4ba0      	ldr	r3, [pc, #640]	; (83a5c <UDPHS_Handler+0x28c>)
   837dc:	4798      	blx	r3
   837de:	b920      	cbnz	r0, 837ea <UDPHS_Handler+0x1a>
   837e0:	4b9f      	ldr	r3, [pc, #636]	; (83a60 <UDPHS_Handler+0x290>)
   837e2:	695b      	ldr	r3, [r3, #20]
   837e4:	f013 0f02 	tst.w	r3, #2
   837e8:	d041      	beq.n	8386e <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   837ea:	4b9d      	ldr	r3, [pc, #628]	; (83a60 <UDPHS_Handler+0x290>)
   837ec:	695b      	ldr	r3, [r3, #20]
   837ee:	f013 0f08 	tst.w	r3, #8
   837f2:	d143      	bne.n	8387c <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   837f4:	4b9a      	ldr	r3, [pc, #616]	; (83a60 <UDPHS_Handler+0x290>)
   837f6:	695b      	ldr	r3, [r3, #20]
   837f8:	f013 0f04 	tst.w	r3, #4
   837fc:	d14c      	bne.n	83898 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   837fe:	4a98      	ldr	r2, [pc, #608]	; (83a60 <UDPHS_Handler+0x290>)
   83800:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   83804:	6952      	ldr	r2, [r2, #20]
   83806:	f412 7f80 	tst.w	r2, #256	; 0x100
   8380a:	d029      	beq.n	83860 <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   8380c:	4a94      	ldr	r2, [pc, #592]	; (83a60 <UDPHS_Handler+0x290>)
   8380e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   83812:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   83816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8381a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   8381e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   83822:	d13f      	bne.n	838a4 <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   83824:	f413 6f80 	tst.w	r3, #1024	; 0x400
   83828:	d006      	beq.n	83838 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8382a:	4a8d      	ldr	r2, [pc, #564]	; (83a60 <UDPHS_Handler+0x290>)
   8382c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   83830:	f412 6f80 	tst.w	r2, #1024	; 0x400
   83834:	f040 809e 	bne.w	83974 <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   83838:	f413 7f00 	tst.w	r3, #512	; 0x200
   8383c:	f040 809d 	bne.w	8397a <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   83840:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   83844:	d004      	beq.n	83850 <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   83846:	4a86      	ldr	r2, [pc, #536]	; (83a60 <UDPHS_Handler+0x290>)
   83848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8384c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   83850:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   83854:	f040 8144 	bne.w	83ae0 <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   83858:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   8385c:	f040 8155 	bne.w	83b0a <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83860:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   83862:	497f      	ldr	r1, [pc, #508]	; (83a60 <UDPHS_Handler+0x290>)
   83864:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   83868:	f44f 7e80 	mov.w	lr, #256	; 0x100
   8386c:	e19c      	b.n	83ba8 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   8386e:	b672      	cpsid	i
   83870:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   83874:	4b7b      	ldr	r3, [pc, #492]	; (83a64 <UDPHS_Handler+0x294>)
   83876:	2200      	movs	r2, #0
   83878:	701a      	strb	r2, [r3, #0]
		return;
   8387a:	e008      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ack_sof();
   8387c:	4b78      	ldr	r3, [pc, #480]	; (83a60 <UDPHS_Handler+0x290>)
   8387e:	2208      	movs	r2, #8
   83880:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   83882:	695b      	ldr	r3, [r3, #20]
   83884:	f013 0f01 	tst.w	r3, #1
   83888:	d003      	beq.n	83892 <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   8388a:	4b77      	ldr	r3, [pc, #476]	; (83a68 <UDPHS_Handler+0x298>)
   8388c:	4798      	blx	r3
}
   8388e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   83892:	4b76      	ldr	r3, [pc, #472]	; (83a6c <UDPHS_Handler+0x29c>)
   83894:	4798      	blx	r3
   83896:	e7f8      	b.n	8388a <UDPHS_Handler+0xba>
		udd_ack_msof();
   83898:	4b71      	ldr	r3, [pc, #452]	; (83a60 <UDPHS_Handler+0x290>)
   8389a:	2204      	movs	r2, #4
   8389c:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   8389e:	4b73      	ldr	r3, [pc, #460]	; (83a6c <UDPHS_Handler+0x29c>)
   838a0:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   838a2:	e7f4      	b.n	8388e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   838a4:	4b72      	ldr	r3, [pc, #456]	; (83a70 <UDPHS_Handler+0x2a0>)
   838a6:	781b      	ldrb	r3, [r3, #0]
   838a8:	2b00      	cmp	r3, #0
   838aa:	d140      	bne.n	8392e <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   838ac:	4b6c      	ldr	r3, [pc, #432]	; (83a60 <UDPHS_Handler+0x290>)
   838ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   838b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
   838b6:	2b08      	cmp	r3, #8
   838b8:	d13e      	bne.n	83938 <UDPHS_Handler+0x168>
   838ba:	4a6e      	ldr	r2, [pc, #440]	; (83a74 <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   838bc:	4b6e      	ldr	r3, [pc, #440]	; (83a78 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   838be:	486f      	ldr	r0, [pc, #444]	; (83a7c <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   838c0:	4619      	mov	r1, r3
   838c2:	3301      	adds	r3, #1
   838c4:	7809      	ldrb	r1, [r1, #0]
   838c6:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   838ca:	4283      	cmp	r3, r0
   838cc:	d1f8      	bne.n	838c0 <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   838ce:	4b6c      	ldr	r3, [pc, #432]	; (83a80 <UDPHS_Handler+0x2b0>)
   838d0:	4798      	blx	r3
   838d2:	2800      	cmp	r0, #0
   838d4:	d038      	beq.n	83948 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   838d6:	4b62      	ldr	r3, [pc, #392]	; (83a60 <UDPHS_Handler+0x290>)
   838d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   838dc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   838e0:	4b68      	ldr	r3, [pc, #416]	; (83a84 <UDPHS_Handler+0x2b4>)
   838e2:	f993 3000 	ldrsb.w	r3, [r3]
   838e6:	2b00      	cmp	r3, #0
   838e8:	db36      	blt.n	83958 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   838ea:	4b66      	ldr	r3, [pc, #408]	; (83a84 <UDPHS_Handler+0x2b4>)
   838ec:	88db      	ldrh	r3, [r3, #6]
   838ee:	2b00      	cmp	r3, #0
   838f0:	d03d      	beq.n	8396e <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   838f2:	2300      	movs	r3, #0
   838f4:	4a64      	ldr	r2, [pc, #400]	; (83a88 <UDPHS_Handler+0x2b8>)
   838f6:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   838f8:	4a64      	ldr	r2, [pc, #400]	; (83a8c <UDPHS_Handler+0x2bc>)
   838fa:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   838fc:	4a5c      	ldr	r2, [pc, #368]	; (83a70 <UDPHS_Handler+0x2a0>)
   838fe:	2101      	movs	r1, #1
   83900:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   83902:	4a57      	ldr	r2, [pc, #348]	; (83a60 <UDPHS_Handler+0x290>)
   83904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   83908:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8390c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   83910:	b672      	cpsid	i
   83912:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83916:	4c53      	ldr	r4, [pc, #332]	; (83a64 <UDPHS_Handler+0x294>)
   83918:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   8391a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8391e:	2800      	cmp	r0, #0
   83920:	d1b5      	bne.n	8388e <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   83922:	2201      	movs	r2, #1
   83924:	7022      	strb	r2, [r4, #0]
   83926:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8392a:	b662      	cpsie	i
}
   8392c:	e7af      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   8392e:	4b58      	ldr	r3, [pc, #352]	; (83a90 <UDPHS_Handler+0x2c0>)
   83930:	4798      	blx	r3
		udd_ctrl_init();
   83932:	4b58      	ldr	r3, [pc, #352]	; (83a94 <UDPHS_Handler+0x2c4>)
   83934:	4798      	blx	r3
   83936:	e7b9      	b.n	838ac <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   83938:	4b57      	ldr	r3, [pc, #348]	; (83a98 <UDPHS_Handler+0x2c8>)
   8393a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8393c:	4b48      	ldr	r3, [pc, #288]	; (83a60 <UDPHS_Handler+0x290>)
   8393e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83942:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   83946:	e7a2      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   83948:	4b53      	ldr	r3, [pc, #332]	; (83a98 <UDPHS_Handler+0x2c8>)
   8394a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8394c:	4b44      	ldr	r3, [pc, #272]	; (83a60 <UDPHS_Handler+0x290>)
   8394e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83952:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   83956:	e79a      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   83958:	2300      	movs	r3, #0
   8395a:	4a4b      	ldr	r2, [pc, #300]	; (83a88 <UDPHS_Handler+0x2b8>)
   8395c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8395e:	4a4b      	ldr	r2, [pc, #300]	; (83a8c <UDPHS_Handler+0x2bc>)
   83960:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   83962:	4b43      	ldr	r3, [pc, #268]	; (83a70 <UDPHS_Handler+0x2a0>)
   83964:	2202      	movs	r2, #2
   83966:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   83968:	4b4c      	ldr	r3, [pc, #304]	; (83a9c <UDPHS_Handler+0x2cc>)
   8396a:	4798      	blx	r3
   8396c:	e78f      	b.n	8388e <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   8396e:	4b4c      	ldr	r3, [pc, #304]	; (83aa0 <UDPHS_Handler+0x2d0>)
   83970:	4798      	blx	r3
			return;
   83972:	e78c      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   83974:	4b49      	ldr	r3, [pc, #292]	; (83a9c <UDPHS_Handler+0x2cc>)
   83976:	4798      	blx	r3
		return true;
   83978:	e789      	b.n	8388e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8397a:	4b3d      	ldr	r3, [pc, #244]	; (83a70 <UDPHS_Handler+0x2a0>)
   8397c:	781b      	ldrb	r3, [r3, #0]
   8397e:	2b01      	cmp	r3, #1
   83980:	d00b      	beq.n	8399a <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   83982:	2b02      	cmp	r3, #2
   83984:	d001      	beq.n	8398a <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   83986:	2b04      	cmp	r3, #4
   83988:	d104      	bne.n	83994 <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   8398a:	4b41      	ldr	r3, [pc, #260]	; (83a90 <UDPHS_Handler+0x2c0>)
   8398c:	4798      	blx	r3
		udd_ctrl_init();
   8398e:	4b41      	ldr	r3, [pc, #260]	; (83a94 <UDPHS_Handler+0x2c4>)
   83990:	4798      	blx	r3
		return;
   83992:	e77c      	b.n	8388e <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   83994:	4b40      	ldr	r3, [pc, #256]	; (83a98 <UDPHS_Handler+0x2c8>)
   83996:	4798      	blx	r3
   83998:	e7f9      	b.n	8398e <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   8399a:	4b31      	ldr	r3, [pc, #196]	; (83a60 <UDPHS_Handler+0x290>)
   8399c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   839a0:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   839a4:	4b37      	ldr	r3, [pc, #220]	; (83a84 <UDPHS_Handler+0x2b4>)
   839a6:	899b      	ldrh	r3, [r3, #12]
   839a8:	4a38      	ldr	r2, [pc, #224]	; (83a8c <UDPHS_Handler+0x2bc>)
   839aa:	8814      	ldrh	r4, [r2, #0]
   839ac:	1822      	adds	r2, r4, r0
   839ae:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   839b0:	bfbc      	itt	lt
   839b2:	1b1b      	sublt	r3, r3, r4
   839b4:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   839b6:	4b33      	ldr	r3, [pc, #204]	; (83a84 <UDPHS_Handler+0x2b4>)
   839b8:	689a      	ldr	r2, [r3, #8]
   839ba:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   839bc:	b170      	cbz	r0, 839dc <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   839be:	4b2e      	ldr	r3, [pc, #184]	; (83a78 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   839c0:	4619      	mov	r1, r3
   839c2:	3301      	adds	r3, #1
   839c4:	7809      	ldrb	r1, [r1, #0]
   839c6:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   839ca:	b2d9      	uxtb	r1, r3
   839cc:	4281      	cmp	r1, r0
   839ce:	d3f7      	bcc.n	839c0 <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   839d0:	4404      	add	r4, r0
   839d2:	b2a4      	uxth	r4, r4
   839d4:	4b2d      	ldr	r3, [pc, #180]	; (83a8c <UDPHS_Handler+0x2bc>)
   839d6:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   839d8:	2840      	cmp	r0, #64	; 0x40
   839da:	d00d      	beq.n	839f8 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   839dc:	4b29      	ldr	r3, [pc, #164]	; (83a84 <UDPHS_Handler+0x2b4>)
   839de:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   839e0:	695b      	ldr	r3, [r3, #20]
   839e2:	b10b      	cbz	r3, 839e8 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   839e4:	4798      	blx	r3
   839e6:	b370      	cbz	r0, 83a46 <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   839e8:	4b1d      	ldr	r3, [pc, #116]	; (83a60 <UDPHS_Handler+0x290>)
   839ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   839ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   839f2:	4b2b      	ldr	r3, [pc, #172]	; (83aa0 <UDPHS_Handler+0x2d0>)
   839f4:	4798      	blx	r3
		return;
   839f6:	e74a      	b.n	8388e <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   839f8:	4b22      	ldr	r3, [pc, #136]	; (83a84 <UDPHS_Handler+0x2b4>)
   839fa:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   839fc:	4b22      	ldr	r3, [pc, #136]	; (83a88 <UDPHS_Handler+0x2b8>)
   839fe:	881b      	ldrh	r3, [r3, #0]
   83a00:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   83a02:	429a      	cmp	r2, r3
   83a04:	ddea      	ble.n	839dc <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   83a06:	4b1f      	ldr	r3, [pc, #124]	; (83a84 <UDPHS_Handler+0x2b4>)
   83a08:	899b      	ldrh	r3, [r3, #12]
   83a0a:	42a3      	cmp	r3, r4
   83a0c:	d04a      	beq.n	83aa4 <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   83a0e:	4b14      	ldr	r3, [pc, #80]	; (83a60 <UDPHS_Handler+0x290>)
   83a10:	f44f 7200 	mov.w	r2, #512	; 0x200
   83a14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   83a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83a1c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83a20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83a24:	b672      	cpsid	i
   83a26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83a2a:	480e      	ldr	r0, [pc, #56]	; (83a64 <UDPHS_Handler+0x294>)
   83a2c:	2400      	movs	r4, #0
   83a2e:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   83a30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   83a34:	2900      	cmp	r1, #0
   83a36:	f47f af2a 	bne.w	8388e <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   83a3a:	2201      	movs	r2, #1
   83a3c:	7002      	strb	r2, [r0, #0]
   83a3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83a42:	b662      	cpsie	i
}
   83a44:	e723      	b.n	8388e <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   83a46:	4b14      	ldr	r3, [pc, #80]	; (83a98 <UDPHS_Handler+0x2c8>)
   83a48:	4798      	blx	r3
				udd_ack_out_received(0);
   83a4a:	4b05      	ldr	r3, [pc, #20]	; (83a60 <UDPHS_Handler+0x290>)
   83a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   83a50:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   83a54:	e71b      	b.n	8388e <UDPHS_Handler+0xbe>
   83a56:	bf00      	nop
   83a58:	00082f1d 	.word	0x00082f1d
   83a5c:	00083261 	.word	0x00083261
   83a60:	400a4000 	.word	0x400a4000
   83a64:	20000382 	.word	0x20000382
   83a68:	00081c61 	.word	0x00081c61
   83a6c:	000823f1 	.word	0x000823f1
   83a70:	20001422 	.word	0x20001422
   83a74:	20001bfb 	.word	0x20001bfb
   83a78:	20180000 	.word	0x20180000
   83a7c:	20180008 	.word	0x20180008
   83a80:	00082435 	.word	0x00082435
   83a84:	20001bfc 	.word	0x20001bfc
   83a88:	20001420 	.word	0x20001420
   83a8c:	2000141e 	.word	0x2000141e
   83a90:	00083451 	.word	0x00083451
   83a94:	00083391 	.word	0x00083391
   83a98:	000833e5 	.word	0x000833e5
   83a9c:	00083461 	.word	0x00083461
   83aa0:	000833fd 	.word	0x000833fd
		if (!udd_g_ctrlreq.over_under_run) {
   83aa4:	4bb3      	ldr	r3, [pc, #716]	; (83d74 <UDPHS_Handler+0x5a4>)
   83aa6:	695b      	ldr	r3, [r3, #20]
   83aa8:	b153      	cbz	r3, 83ac0 <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   83aaa:	4798      	blx	r3
   83aac:	b180      	cbz	r0, 83ad0 <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83aae:	49b2      	ldr	r1, [pc, #712]	; (83d78 <UDPHS_Handler+0x5a8>)
   83ab0:	4ab2      	ldr	r2, [pc, #712]	; (83d7c <UDPHS_Handler+0x5ac>)
   83ab2:	880b      	ldrh	r3, [r1, #0]
   83ab4:	8810      	ldrh	r0, [r2, #0]
   83ab6:	4403      	add	r3, r0
   83ab8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   83aba:	2300      	movs	r3, #0
   83abc:	8013      	strh	r3, [r2, #0]
   83abe:	e7a6      	b.n	83a0e <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   83ac0:	4baf      	ldr	r3, [pc, #700]	; (83d80 <UDPHS_Handler+0x5b0>)
   83ac2:	4798      	blx	r3
			udd_ack_out_received(0);
   83ac4:	4baf      	ldr	r3, [pc, #700]	; (83d84 <UDPHS_Handler+0x5b4>)
   83ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
   83aca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83ace:	e6de      	b.n	8388e <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   83ad0:	4bab      	ldr	r3, [pc, #684]	; (83d80 <UDPHS_Handler+0x5b0>)
   83ad2:	4798      	blx	r3
			udd_ack_out_received(0);
   83ad4:	4bab      	ldr	r3, [pc, #684]	; (83d84 <UDPHS_Handler+0x5b4>)
   83ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
   83ada:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83ade:	e6d6      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   83ae0:	4ba8      	ldr	r3, [pc, #672]	; (83d84 <UDPHS_Handler+0x5b4>)
   83ae2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83ae6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   83aea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83aee:	f413 6f80 	tst.w	r3, #1024	; 0x400
   83af2:	f47f aecc 	bne.w	8388e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83af6:	4ba4      	ldr	r3, [pc, #656]	; (83d88 <UDPHS_Handler+0x5b8>)
   83af8:	781b      	ldrb	r3, [r3, #0]
   83afa:	2b03      	cmp	r3, #3
   83afc:	f47f aec7 	bne.w	8388e <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   83b00:	4ba0      	ldr	r3, [pc, #640]	; (83d84 <UDPHS_Handler+0x5b4>)
   83b02:	2220      	movs	r2, #32
   83b04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83b08:	e6c1      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   83b0a:	4b9e      	ldr	r3, [pc, #632]	; (83d84 <UDPHS_Handler+0x5b4>)
   83b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83b10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   83b14:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83b18:	f413 7f00 	tst.w	r3, #512	; 0x200
   83b1c:	f47f aeb7 	bne.w	8388e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   83b20:	4b99      	ldr	r3, [pc, #612]	; (83d88 <UDPHS_Handler+0x5b8>)
   83b22:	781b      	ldrb	r3, [r3, #0]
   83b24:	2b01      	cmp	r3, #1
   83b26:	d007      	beq.n	83b38 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   83b28:	2b04      	cmp	r3, #4
   83b2a:	f47f aeb0 	bne.w	8388e <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   83b2e:	4b95      	ldr	r3, [pc, #596]	; (83d84 <UDPHS_Handler+0x5b4>)
   83b30:	2220      	movs	r2, #32
   83b32:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83b36:	e6aa      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   83b38:	4b94      	ldr	r3, [pc, #592]	; (83d8c <UDPHS_Handler+0x5bc>)
   83b3a:	4798      	blx	r3
   83b3c:	e6a7      	b.n	8388e <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   83b3e:	4b94      	ldr	r3, [pc, #592]	; (83d90 <UDPHS_Handler+0x5c0>)
   83b40:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83b44:	68d9      	ldr	r1, [r3, #12]
   83b46:	f011 0f01 	tst.w	r1, #1
   83b4a:	f47f aea0 	bne.w	8388e <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   83b4e:	488d      	ldr	r0, [pc, #564]	; (83d84 <UDPHS_Handler+0x5b4>)
   83b50:	6901      	ldr	r1, [r0, #16]
   83b52:	ea21 0606 	bic.w	r6, r1, r6
   83b56:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   83b58:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   83b5a:	0c1b      	lsrs	r3, r3, #16
   83b5c:	d008      	beq.n	83b70 <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   83b5e:	498d      	ldr	r1, [pc, #564]	; (83d94 <UDPHS_Handler+0x5c4>)
   83b60:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   83b64:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   83b68:	68e0      	ldr	r0, [r4, #12]
   83b6a:	1ac3      	subs	r3, r0, r3
   83b6c:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   83b6e:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   83b70:	4610      	mov	r0, r2
   83b72:	4b89      	ldr	r3, [pc, #548]	; (83d98 <UDPHS_Handler+0x5c8>)
   83b74:	4798      	blx	r3
			return true;
   83b76:	e68a      	b.n	8388e <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   83b78:	0163      	lsls	r3, r4, #5
   83b7a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   83b7e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   83b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
   83b86:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   83b8a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   83b8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   83b92:	2100      	movs	r1, #0
   83b94:	487f      	ldr	r0, [pc, #508]	; (83d94 <UDPHS_Handler+0x5c4>)
   83b96:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   83b9a:	4b80      	ldr	r3, [pc, #512]	; (83d9c <UDPHS_Handler+0x5cc>)
   83b9c:	4798      	blx	r3
				return true;
   83b9e:	e676      	b.n	8388e <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   83ba0:	3301      	adds	r3, #1
   83ba2:	2b03      	cmp	r3, #3
   83ba4:	f000 80b6 	beq.w	83d14 <UDPHS_Handler+0x544>
   83ba8:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   83baa:	461c      	mov	r4, r3
   83bac:	1e5d      	subs	r5, r3, #1
   83bae:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   83bb0:	690f      	ldr	r7, [r1, #16]
   83bb2:	fa0c f605 	lsl.w	r6, ip, r5
   83bb6:	4237      	tst	r7, r6
   83bb8:	d002      	beq.n	83bc0 <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   83bba:	6948      	ldr	r0, [r1, #20]
   83bbc:	4206      	tst	r6, r0
   83bbe:	d1be      	bne.n	83b3e <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   83bc0:	690f      	ldr	r7, [r1, #16]
   83bc2:	fa0e f604 	lsl.w	r6, lr, r4
   83bc6:	4237      	tst	r7, r6
   83bc8:	d0ea      	beq.n	83ba0 <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   83bca:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   83bce:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   83bd2:	f410 6f00 	tst.w	r0, #2048	; 0x800
   83bd6:	d006      	beq.n	83be6 <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   83bd8:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   83bdc:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   83be0:	f410 6f00 	tst.w	r0, #2048	; 0x800
   83be4:	d0c8      	beq.n	83b78 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   83be6:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   83bea:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   83bee:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   83bf2:	d0d5      	beq.n	83ba0 <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   83bf4:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   83bf8:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   83bfc:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   83c00:	d1ce      	bne.n	83ba0 <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   83c02:	4b60      	ldr	r3, [pc, #384]	; (83d84 <UDPHS_Handler+0x5b4>)
   83c04:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   83c08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   83c0c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   83c10:	691a      	ldr	r2, [r3, #16]
   83c12:	ea22 0606 	bic.w	r6, r2, r6
   83c16:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   83c18:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   83c1c:	4b5d      	ldr	r3, [pc, #372]	; (83d94 <UDPHS_Handler+0x5c4>)
   83c1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   83c22:	f898 3014 	ldrb.w	r3, [r8, #20]
   83c26:	f36f 0382 	bfc	r3, #2, #1
   83c2a:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   83c2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   83c32:	f023 0302 	bic.w	r3, r3, #2
   83c36:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   83c3a:	2320      	movs	r3, #32
   83c3c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   83c40:	2340      	movs	r3, #64	; 0x40
   83c42:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   83c46:	e622      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ack_reset();
   83c48:	4c4e      	ldr	r4, [pc, #312]	; (83d84 <UDPHS_Handler+0x5b4>)
   83c4a:	2310      	movs	r3, #16
   83c4c:	61a3      	str	r3, [r4, #24]
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   83c4e:	4e51      	ldr	r6, [pc, #324]	; (83d94 <UDPHS_Handler+0x5c4>)
   83c50:	2201      	movs	r2, #1
   83c52:	4611      	mov	r1, r2
   83c54:	4630      	mov	r0, r6
   83c56:	4d51      	ldr	r5, [pc, #324]	; (83d9c <UDPHS_Handler+0x5cc>)
   83c58:	47a8      	blx	r5
   83c5a:	2202      	movs	r2, #2
   83c5c:	2101      	movs	r1, #1
   83c5e:	f106 0018 	add.w	r0, r6, #24
   83c62:	47a8      	blx	r5
		udc_reset();
   83c64:	4b4e      	ldr	r3, [pc, #312]	; (83da0 <UDPHS_Handler+0x5d0>)
   83c66:	4798      	blx	r3
	udd_configure_address(0);
   83c68:	6823      	ldr	r3, [r4, #0]
   83c6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83c6e:	6023      	str	r3, [r4, #0]
	udd_enable_address();
   83c70:	6823      	ldr	r3, [r4, #0]
   83c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83c76:	6023      	str	r3, [r4, #0]
	udd_configure_endpoint(0,
   83c78:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   83c7c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83c80:	f023 0303 	bic.w	r3, r3, #3
   83c84:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   83c88:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	udd_enable_endpoint(0);
   83c8c:	2301      	movs	r3, #1
   83c8e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83c92:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   83c96:	b672      	cpsid	i
   83c98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83c9c:	4b41      	ldr	r3, [pc, #260]	; (83da4 <UDPHS_Handler+0x5d4>)
   83c9e:	2100      	movs	r1, #0
   83ca0:	7019      	strb	r1, [r3, #0]
	udd_enable_setup_received_interrupt(0);
   83ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83ca6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   83caa:	f44f 7300 	mov.w	r3, #512	; 0x200
   83cae:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   83cb2:	6923      	ldr	r3, [r4, #16]
   83cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   83cb8:	6123      	str	r3, [r4, #16]
	if (cpu_irq_is_enabled_flags(flags))
   83cba:	b92a      	cbnz	r2, 83cc8 <UDPHS_Handler+0x4f8>
		cpu_irq_enable();
   83cbc:	4b39      	ldr	r3, [pc, #228]	; (83da4 <UDPHS_Handler+0x5d4>)
   83cbe:	2201      	movs	r2, #1
   83cc0:	701a      	strb	r2, [r3, #0]
   83cc2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83cc6:	b662      	cpsie	i
		udd_ctrl_init();
   83cc8:	4b37      	ldr	r3, [pc, #220]	; (83da8 <UDPHS_Handler+0x5d8>)
   83cca:	4798      	blx	r3
		udd_enable_sof_interrupt();
   83ccc:	4b2d      	ldr	r3, [pc, #180]	; (83d84 <UDPHS_Handler+0x5b4>)
   83cce:	691a      	ldr	r2, [r3, #16]
   83cd0:	f042 0208 	orr.w	r2, r2, #8
   83cd4:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   83cd6:	691a      	ldr	r2, [r3, #16]
   83cd8:	f042 0204 	orr.w	r2, r2, #4
   83cdc:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   83cde:	691a      	ldr	r2, [r3, #16]
   83ce0:	f042 0202 	orr.w	r2, r2, #2
   83ce4:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   83ce6:	e5d2      	b.n	8388e <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   83ce8:	4b26      	ldr	r3, [pc, #152]	; (83d84 <UDPHS_Handler+0x5b4>)
   83cea:	2220      	movs	r2, #32
   83cec:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   83cee:	691a      	ldr	r2, [r3, #16]
   83cf0:	f022 0202 	bic.w	r2, r2, #2
   83cf4:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   83cf6:	691a      	ldr	r2, [r3, #16]
   83cf8:	f042 0220 	orr.w	r2, r2, #32
   83cfc:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   83cfe:	2202      	movs	r2, #2
   83d00:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   83d02:	201d      	movs	r0, #29
   83d04:	4b29      	ldr	r3, [pc, #164]	; (83dac <UDPHS_Handler+0x5dc>)
   83d06:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   83d08:	4b29      	ldr	r3, [pc, #164]	; (83db0 <UDPHS_Handler+0x5e0>)
   83d0a:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   83d0c:	2000      	movs	r0, #0
   83d0e:	4b29      	ldr	r3, [pc, #164]	; (83db4 <UDPHS_Handler+0x5e4>)
   83d10:	4798      	blx	r3
		goto udd_interrupt_end;
   83d12:	e5bc      	b.n	8388e <UDPHS_Handler+0xbe>
	if (Is_udd_reset()) {
   83d14:	4b1b      	ldr	r3, [pc, #108]	; (83d84 <UDPHS_Handler+0x5b4>)
   83d16:	695b      	ldr	r3, [r3, #20]
   83d18:	f013 0f10 	tst.w	r3, #16
   83d1c:	d194      	bne.n	83c48 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   83d1e:	4b19      	ldr	r3, [pc, #100]	; (83d84 <UDPHS_Handler+0x5b4>)
   83d20:	691b      	ldr	r3, [r3, #16]
   83d22:	f013 0f02 	tst.w	r3, #2
   83d26:	d004      	beq.n	83d32 <UDPHS_Handler+0x562>
   83d28:	4b16      	ldr	r3, [pc, #88]	; (83d84 <UDPHS_Handler+0x5b4>)
   83d2a:	695b      	ldr	r3, [r3, #20]
   83d2c:	f013 0f02 	tst.w	r3, #2
   83d30:	d1da      	bne.n	83ce8 <UDPHS_Handler+0x518>
	if (Is_udd_wake_up()) {
   83d32:	4b14      	ldr	r3, [pc, #80]	; (83d84 <UDPHS_Handler+0x5b4>)
   83d34:	695b      	ldr	r3, [r3, #20]
   83d36:	f013 0f20 	tst.w	r3, #32
   83d3a:	f43f ada8 	beq.w	8388e <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   83d3e:	2001      	movs	r0, #1
   83d40:	4b1c      	ldr	r3, [pc, #112]	; (83db4 <UDPHS_Handler+0x5e4>)
   83d42:	4798      	blx	r3
		udd_ack_suspend();
   83d44:	4b0f      	ldr	r3, [pc, #60]	; (83d84 <UDPHS_Handler+0x5b4>)
   83d46:	2202      	movs	r2, #2
   83d48:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   83d4a:	2220      	movs	r2, #32
   83d4c:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   83d4e:	691a      	ldr	r2, [r3, #16]
   83d50:	f022 0220 	bic.w	r2, r2, #32
   83d54:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   83d56:	691a      	ldr	r2, [r3, #16]
   83d58:	f042 0202 	orr.w	r2, r2, #2
   83d5c:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   83d5e:	691a      	ldr	r2, [r3, #16]
   83d60:	f042 0208 	orr.w	r2, r2, #8
   83d64:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   83d66:	691a      	ldr	r2, [r3, #16]
   83d68:	f042 0204 	orr.w	r2, r2, #4
   83d6c:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   83d6e:	4b12      	ldr	r3, [pc, #72]	; (83db8 <UDPHS_Handler+0x5e8>)
   83d70:	4798      	blx	r3
		goto udd_interrupt_end;
   83d72:	e58c      	b.n	8388e <UDPHS_Handler+0xbe>
   83d74:	20001bfc 	.word	0x20001bfc
   83d78:	20001420 	.word	0x20001420
   83d7c:	2000141e 	.word	0x2000141e
   83d80:	000833e5 	.word	0x000833e5
   83d84:	400a4000 	.word	0x400a4000
   83d88:	20001422 	.word	0x20001422
   83d8c:	000833fd 	.word	0x000833fd
   83d90:	400a4300 	.word	0x400a4300
   83d94:	20001424 	.word	0x20001424
   83d98:	00083601 	.word	0x00083601
   83d9c:	000835c9 	.word	0x000835c9
   83da0:	000823a9 	.word	0x000823a9
   83da4:	20000382 	.word	0x20000382
   83da8:	00083391 	.word	0x00083391
   83dac:	00082f49 	.word	0x00082f49
   83db0:	00081c49 	.word	0x00081c49
   83db4:	0008331d 	.word	0x0008331d
   83db8:	00081c55 	.word	0x00081c55

00083dbc <udd_attach>:
{
   83dbc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83dbe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83dc2:	b672      	cpsid	i
   83dc4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83dc8:	4b1d      	ldr	r3, [pc, #116]	; (83e40 <udd_attach+0x84>)
   83dca:	2200      	movs	r2, #0
   83dcc:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   83dce:	2001      	movs	r0, #1
   83dd0:	4b1c      	ldr	r3, [pc, #112]	; (83e44 <udd_attach+0x88>)
   83dd2:	4798      	blx	r3
	udd_enable_periph_ck();
   83dd4:	201d      	movs	r0, #29
   83dd6:	4b1c      	ldr	r3, [pc, #112]	; (83e48 <udd_attach+0x8c>)
   83dd8:	4798      	blx	r3
	udd_attach_device();
   83dda:	4b1c      	ldr	r3, [pc, #112]	; (83e4c <udd_attach+0x90>)
   83ddc:	681a      	ldr	r2, [r3, #0]
   83dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   83de2:	601a      	str	r2, [r3, #0]
   83de4:	681a      	ldr	r2, [r3, #0]
   83de6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   83dea:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   83dec:	691a      	ldr	r2, [r3, #16]
   83dee:	f042 0210 	orr.w	r2, r2, #16
   83df2:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   83df4:	691a      	ldr	r2, [r3, #16]
   83df6:	f042 0202 	orr.w	r2, r2, #2
   83dfa:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   83dfc:	691a      	ldr	r2, [r3, #16]
   83dfe:	f042 0220 	orr.w	r2, r2, #32
   83e02:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   83e04:	691a      	ldr	r2, [r3, #16]
   83e06:	f042 0208 	orr.w	r2, r2, #8
   83e0a:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   83e0c:	691a      	ldr	r2, [r3, #16]
   83e0e:	f042 0204 	orr.w	r2, r2, #4
   83e12:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   83e14:	2208      	movs	r2, #8
   83e16:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   83e18:	2204      	movs	r2, #4
   83e1a:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   83e1c:	2210      	movs	r2, #16
   83e1e:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   83e20:	2202      	movs	r2, #2
   83e22:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   83e24:	2220      	movs	r2, #32
   83e26:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   83e28:	201d      	movs	r0, #29
   83e2a:	4b09      	ldr	r3, [pc, #36]	; (83e50 <udd_attach+0x94>)
   83e2c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83e2e:	b92c      	cbnz	r4, 83e3c <udd_attach+0x80>
		cpu_irq_enable();
   83e30:	4b03      	ldr	r3, [pc, #12]	; (83e40 <udd_attach+0x84>)
   83e32:	2201      	movs	r2, #1
   83e34:	701a      	strb	r2, [r3, #0]
   83e36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83e3a:	b662      	cpsie	i
}
   83e3c:	bd10      	pop	{r4, pc}
   83e3e:	bf00      	nop
   83e40:	20000382 	.word	0x20000382
   83e44:	0008331d 	.word	0x0008331d
   83e48:	00082f1d 	.word	0x00082f1d
   83e4c:	400a4000 	.word	0x400a4000
   83e50:	00082f49 	.word	0x00082f49

00083e54 <udd_enable>:
{
   83e54:	b570      	push	{r4, r5, r6, lr}
	sysclk_enable_usb();
   83e56:	4b27      	ldr	r3, [pc, #156]	; (83ef4 <udd_enable+0xa0>)
   83e58:	4798      	blx	r3
	udd_enable_periph_ck();
   83e5a:	201d      	movs	r0, #29
   83e5c:	4b26      	ldr	r3, [pc, #152]	; (83ef8 <udd_enable+0xa4>)
   83e5e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83e60:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   83e64:	b672      	cpsid	i
   83e66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83e6a:	4d24      	ldr	r5, [pc, #144]	; (83efc <udd_enable+0xa8>)
   83e6c:	2400      	movs	r4, #0
   83e6e:	702c      	strb	r4, [r5, #0]
	udd_enable_periph();
   83e70:	4b23      	ldr	r3, [pc, #140]	; (83f00 <udd_enable+0xac>)
   83e72:	681a      	ldr	r2, [r3, #0]
   83e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   83e78:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83e7a:	4a22      	ldr	r2, [pc, #136]	; (83f04 <udd_enable+0xb0>)
   83e7c:	2150      	movs	r1, #80	; 0x50
   83e7e:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83e82:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   83e86:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   83e88:	4a1f      	ldr	r2, [pc, #124]	; (83f08 <udd_enable+0xb4>)
   83e8a:	7d11      	ldrb	r1, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   83e8c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   83e90:	f364 0182 	bfi	r1, r4, #2, #1
   83e94:	7511      	strb	r1, [r2, #20]
		udd_ep_job[i].busy = false;
   83e96:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   83e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   83e9e:	f364 0182 	bfi	r1, r4, #2, #1
   83ea2:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
	udd_high_speed_enable();
   83ea6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   83eaa:	f022 0203 	bic.w	r2, r2, #3
   83eae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   83eb2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83eb6:	4b15      	ldr	r3, [pc, #84]	; (83f0c <udd_enable+0xb8>)
   83eb8:	4798      	blx	r3
	udd_b_idle = false;
   83eba:	4b15      	ldr	r3, [pc, #84]	; (83f10 <udd_enable+0xbc>)
   83ebc:	701c      	strb	r4, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83ebe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   83ec2:	b672      	cpsid	i
   83ec4:	f3bf 8f5f 	dmb	sy
   83ec8:	702c      	strb	r4, [r5, #0]
   83eca:	4a12      	ldr	r2, [pc, #72]	; (83f14 <udd_enable+0xc0>)
   83ecc:	78d3      	ldrb	r3, [r2, #3]
   83ece:	3301      	adds	r3, #1
   83ed0:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   83ed2:	b921      	cbnz	r1, 83ede <udd_enable+0x8a>
		cpu_irq_enable();
   83ed4:	2201      	movs	r2, #1
   83ed6:	702a      	strb	r2, [r5, #0]
   83ed8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83edc:	b662      	cpsie	i
	udd_attach();
   83ede:	4b0e      	ldr	r3, [pc, #56]	; (83f18 <udd_enable+0xc4>)
   83ee0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83ee2:	b92e      	cbnz	r6, 83ef0 <udd_enable+0x9c>
		cpu_irq_enable();
   83ee4:	4b05      	ldr	r3, [pc, #20]	; (83efc <udd_enable+0xa8>)
   83ee6:	2201      	movs	r2, #1
   83ee8:	701a      	strb	r2, [r3, #0]
   83eea:	f3bf 8f5f 	dmb	sy
   83eee:	b662      	cpsie	i
}
   83ef0:	bd70      	pop	{r4, r5, r6, pc}
   83ef2:	bf00      	nop
   83ef4:	000820a1 	.word	0x000820a1
   83ef8:	00082f1d 	.word	0x00082f1d
   83efc:	20000382 	.word	0x20000382
   83f00:	400a4000 	.word	0x400a4000
   83f04:	e000e100 	.word	0xe000e100
   83f08:	20001424 	.word	0x20001424
   83f0c:	00082f85 	.word	0x00082f85
   83f10:	2000141d 	.word	0x2000141d
   83f14:	20001be8 	.word	0x20001be8
   83f18:	00083dbd 	.word	0x00083dbd

00083f1c <udd_detach>:
{
   83f1c:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   83f1e:	201d      	movs	r0, #29
   83f20:	4b08      	ldr	r3, [pc, #32]	; (83f44 <udd_detach+0x28>)
   83f22:	4798      	blx	r3
	udd_detach_device();
   83f24:	4b08      	ldr	r3, [pc, #32]	; (83f48 <udd_detach+0x2c>)
   83f26:	681a      	ldr	r2, [r3, #0]
   83f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   83f2c:	601a      	str	r2, [r3, #0]
   83f2e:	681a      	ldr	r2, [r3, #0]
   83f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83f34:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   83f36:	201d      	movs	r0, #29
   83f38:	4b04      	ldr	r3, [pc, #16]	; (83f4c <udd_detach+0x30>)
   83f3a:	4798      	blx	r3
	udd_sleep_mode(false);
   83f3c:	2000      	movs	r0, #0
   83f3e:	4b04      	ldr	r3, [pc, #16]	; (83f50 <udd_detach+0x34>)
   83f40:	4798      	blx	r3
}
   83f42:	bd08      	pop	{r3, pc}
   83f44:	00082f1d 	.word	0x00082f1d
   83f48:	400a4000 	.word	0x400a4000
   83f4c:	00082f49 	.word	0x00082f49
   83f50:	0008331d 	.word	0x0008331d

00083f54 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   83f54:	4b02      	ldr	r3, [pc, #8]	; (83f60 <udd_is_high_speed+0xc>)
   83f56:	6958      	ldr	r0, [r3, #20]
}
   83f58:	f000 0001 	and.w	r0, r0, #1
   83f5c:	4770      	bx	lr
   83f5e:	bf00      	nop
   83f60:	400a4000 	.word	0x400a4000

00083f64 <udd_set_address>:
	udd_disable_address();
   83f64:	4b08      	ldr	r3, [pc, #32]	; (83f88 <udd_set_address+0x24>)
   83f66:	681a      	ldr	r2, [r3, #0]
   83f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   83f6c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   83f6e:	681a      	ldr	r2, [r3, #0]
   83f70:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83f74:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83f78:	4302      	orrs	r2, r0
   83f7a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   83f7c:	681a      	ldr	r2, [r3, #0]
   83f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83f82:	601a      	str	r2, [r3, #0]
}
   83f84:	4770      	bx	lr
   83f86:	bf00      	nop
   83f88:	400a4000 	.word	0x400a4000

00083f8c <udd_getaddress>:
	return udd_get_configured_address();
   83f8c:	4b02      	ldr	r3, [pc, #8]	; (83f98 <udd_getaddress+0xc>)
   83f8e:	6818      	ldr	r0, [r3, #0]
}
   83f90:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83f94:	4770      	bx	lr
   83f96:	bf00      	nop
   83f98:	400a4000 	.word	0x400a4000

00083f9c <udd_get_frame_number>:
	return udd_frame_number();
   83f9c:	4b02      	ldr	r3, [pc, #8]	; (83fa8 <udd_get_frame_number+0xc>)
   83f9e:	6858      	ldr	r0, [r3, #4]
}
   83fa0:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   83fa4:	4770      	bx	lr
   83fa6:	bf00      	nop
   83fa8:	400a4000 	.word	0x400a4000

00083fac <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   83fac:	4b01      	ldr	r3, [pc, #4]	; (83fb4 <udd_set_setup_payload+0x8>)
   83fae:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   83fb0:	8199      	strh	r1, [r3, #12]
}
   83fb2:	4770      	bx	lr
   83fb4:	20001bfc 	.word	0x20001bfc

00083fb8 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83fb8:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   83fbc:	2a02      	cmp	r2, #2
   83fbe:	d900      	bls.n	83fc2 <udd_ep_free+0xa>
   83fc0:	4770      	bx	lr
{
   83fc2:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   83fc4:	0153      	lsls	r3, r2, #5
   83fc6:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   83fca:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   83fce:	2101      	movs	r1, #1
   83fd0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   83fd4:	4603      	mov	r3, r0
   83fd6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   83fda:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   83fde:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83fe2:	1e55      	subs	r5, r2, #1
   83fe4:	4c08      	ldr	r4, [pc, #32]	; (84008 <udd_ep_free+0x50>)
   83fe6:	fa05 f601 	lsl.w	r6, r5, r1
   83fea:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   83fee:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   83ff2:	4b06      	ldr	r3, [pc, #24]	; (8400c <udd_ep_free+0x54>)
   83ff4:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   83ff6:	4435      	add	r5, r6
   83ff8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   83ffc:	7d23      	ldrb	r3, [r4, #20]
   83ffe:	f36f 0382 	bfc	r3, #2, #1
   84002:	7523      	strb	r3, [r4, #20]
}
   84004:	bd70      	pop	{r4, r5, r6, pc}
   84006:	bf00      	nop
   84008:	20001424 	.word	0x20001424
   8400c:	000835c9 	.word	0x000835c9

00084010 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84010:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   84014:	0143      	lsls	r3, r0, #5
   84016:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8401a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8401e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   84022:	f013 0f20 	tst.w	r3, #32
   84026:	d109      	bne.n	8403c <udd_ep_is_halted+0x2c>
   84028:	3801      	subs	r0, #1
   8402a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8402e:	4b04      	ldr	r3, [pc, #16]	; (84040 <udd_ep_is_halted+0x30>)
   84030:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   84034:	7d00      	ldrb	r0, [r0, #20]
   84036:	f3c0 0080 	ubfx	r0, r0, #2, #1
   8403a:	4770      	bx	lr
   8403c:	2001      	movs	r0, #1
}
   8403e:	4770      	bx	lr
   84040:	20001424 	.word	0x20001424

00084044 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84044:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84048:	2b02      	cmp	r3, #2
   8404a:	d851      	bhi.n	840f0 <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8404c:	015a      	lsls	r2, r3, #5
   8404e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84052:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84056:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8405a:	f012 0f20 	tst.w	r2, #32
   8405e:	d149      	bne.n	840f4 <udd_ep_set_halt+0xb0>
{
   84060:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   84062:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84064:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   84068:	4a25      	ldr	r2, [pc, #148]	; (84100 <udd_ep_set_halt+0xbc>)
   8406a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   8406e:	7d12      	ldrb	r2, [r2, #20]
   84070:	f012 0f04 	tst.w	r2, #4
   84074:	d140      	bne.n	840f8 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   84076:	f012 0f01 	tst.w	r2, #1
   8407a:	d13f      	bne.n	840fc <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8407c:	f010 0f80 	tst.w	r0, #128	; 0x80
   84080:	d114      	bne.n	840ac <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84082:	015b      	lsls	r3, r3, #5
   84084:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84088:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8408c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84090:	f022 0202 	bic.w	r2, r2, #2
   84094:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   84098:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8409c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   840a0:	2220      	movs	r2, #32
   840a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   840a6:	2001      	movs	r0, #1
}
   840a8:	bc10      	pop	{r4}
   840aa:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   840ac:	015a      	lsls	r2, r3, #5
   840ae:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   840b2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   840b6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   840ba:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   840be:	d0e0      	beq.n	84082 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   840c0:	4a0f      	ldr	r2, [pc, #60]	; (84100 <udd_ep_set_halt+0xbc>)
   840c2:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   840c6:	7d0a      	ldrb	r2, [r1, #20]
   840c8:	f042 0204 	orr.w	r2, r2, #4
   840cc:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   840ce:	490d      	ldr	r1, [pc, #52]	; (84104 <udd_ep_set_halt+0xc0>)
   840d0:	f103 0208 	add.w	r2, r3, #8
   840d4:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   840d8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   840dc:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   840de:	6908      	ldr	r0, [r1, #16]
   840e0:	f44f 7280 	mov.w	r2, #256	; 0x100
   840e4:	fa02 f303 	lsl.w	r3, r2, r3
   840e8:	4303      	orrs	r3, r0
   840ea:	610b      	str	r3, [r1, #16]
			return true;
   840ec:	2001      	movs	r0, #1
   840ee:	e7db      	b.n	840a8 <udd_ep_set_halt+0x64>
		return false;
   840f0:	2000      	movs	r0, #0
   840f2:	4770      	bx	lr
		return true; // Already STALL
   840f4:	2001      	movs	r0, #1
}
   840f6:	4770      	bx	lr
		return true; // Already STALL
   840f8:	2001      	movs	r0, #1
   840fa:	e7d5      	b.n	840a8 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   840fc:	2000      	movs	r0, #0
   840fe:	e7d3      	b.n	840a8 <udd_ep_set_halt+0x64>
   84100:	20001424 	.word	0x20001424
   84104:	400a4000 	.word	0x400a4000

00084108 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   84108:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   8410c:	2802      	cmp	r0, #2
   8410e:	d862      	bhi.n	841d6 <udd_ep_clear_halt+0xce>
{
   84110:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   84112:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   84114:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   84118:	4b37      	ldr	r3, [pc, #220]	; (841f8 <udd_ep_clear_halt+0xf0>)
   8411a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   8411e:	7d1b      	ldrb	r3, [r3, #20]
   84120:	f013 0f04 	tst.w	r3, #4
   84124:	d05b      	beq.n	841de <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   84126:	460b      	mov	r3, r1
   84128:	4933      	ldr	r1, [pc, #204]	; (841f8 <udd_ep_clear_halt+0xf0>)
   8412a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   8412e:	7d19      	ldrb	r1, [r3, #20]
   84130:	f36f 0182 	bfc	r1, #2, #1
   84134:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   84136:	4b31      	ldr	r3, [pc, #196]	; (841fc <udd_ep_clear_halt+0xf4>)
   84138:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   8413c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   84140:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   84144:	6919      	ldr	r1, [r3, #16]
   84146:	f44f 7480 	mov.w	r4, #256	; 0x100
   8414a:	4084      	lsls	r4, r0
   8414c:	ea21 0104 	bic.w	r1, r1, r4
   84150:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   84152:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   84156:	f013 0f20 	tst.w	r3, #32
   8415a:	d024      	beq.n	841a6 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   8415c:	0143      	lsls	r3, r0, #5
   8415e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84162:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84166:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8416a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8416e:	d00b      	beq.n	84188 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   84170:	0143      	lsls	r3, r0, #5
   84172:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84176:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8417a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8417e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   84182:	2140      	movs	r1, #64	; 0x40
   84184:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   84188:	0143      	lsls	r3, r0, #5
   8418a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8418e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84192:	2120      	movs	r1, #32
   84194:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   84198:	4618      	mov	r0, r3
   8419a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   8419e:	f043 0302 	orr.w	r3, r3, #2
   841a2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   841a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   841aa:	4913      	ldr	r1, [pc, #76]	; (841f8 <udd_ep_clear_halt+0xf0>)
   841ac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   841b0:	7d1b      	ldrb	r3, [r3, #20]
   841b2:	f013 0f01 	tst.w	r3, #1
   841b6:	d010      	beq.n	841da <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   841b8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   841bc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   841c0:	7d18      	ldrb	r0, [r3, #20]
   841c2:	f36f 0000 	bfc	r0, #0, #1
   841c6:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   841c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   841cc:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   841d0:	4798      	blx	r3
	return true;
   841d2:	2001      	movs	r0, #1
   841d4:	e002      	b.n	841dc <udd_ep_clear_halt+0xd4>
		return false;
   841d6:	2000      	movs	r0, #0
}
   841d8:	4770      	bx	lr
	return true;
   841da:	2001      	movs	r0, #1
}
   841dc:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   841de:	0143      	lsls	r3, r0, #5
   841e0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   841e4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   841e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   841ec:	f013 0f20 	tst.w	r3, #32
   841f0:	d1b4      	bne.n	8415c <udd_ep_clear_halt+0x54>
	return true;
   841f2:	2001      	movs	r0, #1
   841f4:	e7f2      	b.n	841dc <udd_ep_clear_halt+0xd4>
   841f6:	bf00      	nop
   841f8:	20001424 	.word	0x20001424
   841fc:	400a4000 	.word	0x400a4000

00084200 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   84200:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   84204:	2802      	cmp	r0, #2
   84206:	d868      	bhi.n	842da <udd_ep_run+0xda>
{
   84208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   8420a:	0144      	lsls	r4, r0, #5
   8420c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   84210:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   84214:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   84218:	f014 0f01 	tst.w	r4, #1
   8421c:	d05f      	beq.n	842de <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   8421e:	0144      	lsls	r4, r0, #5
   84220:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   84224:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   84228:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   8422c:	f014 0f20 	tst.w	r4, #32
   84230:	d157      	bne.n	842e2 <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   84232:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   84234:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   84238:	4d2d      	ldr	r5, [pc, #180]	; (842f0 <udd_ep_run+0xf0>)
   8423a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   8423e:	7d2d      	ldrb	r5, [r5, #20]
   84240:	f015 0f04 	tst.w	r5, #4
   84244:	d14f      	bne.n	842e6 <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84246:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   8424a:	b672      	cpsid	i
   8424c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84250:	4d28      	ldr	r5, [pc, #160]	; (842f4 <udd_ep_run+0xf4>)
   84252:	2600      	movs	r6, #0
   84254:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   84256:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8425a:	4e25      	ldr	r6, [pc, #148]	; (842f0 <udd_ep_run+0xf0>)
   8425c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   84260:	7d2d      	ldrb	r5, [r5, #20]
   84262:	f015 0f01 	tst.w	r5, #1
   84266:	d121      	bne.n	842ac <udd_ep_run+0xac>
	ptr_job->busy = true;
   84268:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8426c:	4e20      	ldr	r6, [pc, #128]	; (842f0 <udd_ep_run+0xf0>)
   8426e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   84272:	7d2e      	ldrb	r6, [r5, #20]
   84274:	f046 0601 	orr.w	r6, r6, #1
   84278:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8427a:	b92f      	cbnz	r7, 84288 <udd_ep_run+0x88>
		cpu_irq_enable();
   8427c:	4d1d      	ldr	r5, [pc, #116]	; (842f4 <udd_ep_run+0xf4>)
   8427e:	2601      	movs	r6, #1
   84280:	702e      	strb	r6, [r5, #0]
   84282:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84286:	b662      	cpsie	i
	ptr_job->buf = buf;
   84288:	4e19      	ldr	r6, [pc, #100]	; (842f0 <udd_ep_run+0xf0>)
   8428a:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   8428e:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   84292:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   84294:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   84296:	2200      	movs	r2, #0
   84298:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   8429a:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   8429c:	9a06      	ldr	r2, [sp, #24]
   8429e:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   842a2:	b961      	cbnz	r1, 842be <udd_ep_run+0xbe>
   842a4:	fab3 f383 	clz	r3, r3
   842a8:	095b      	lsrs	r3, r3, #5
   842aa:	e009      	b.n	842c0 <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   842ac:	b9ef      	cbnz	r7, 842ea <udd_ep_run+0xea>
		cpu_irq_enable();
   842ae:	4b11      	ldr	r3, [pc, #68]	; (842f4 <udd_ep_run+0xf4>)
   842b0:	2201      	movs	r2, #1
   842b2:	701a      	strb	r2, [r3, #0]
   842b4:	f3bf 8f5f 	dmb	sy
   842b8:	b662      	cpsie	i
		return false; // Job already on going
   842ba:	2000      	movs	r0, #0
}
   842bc:	e010      	b.n	842e0 <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   842be:	2301      	movs	r3, #1
   842c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   842c4:	4a0a      	ldr	r2, [pc, #40]	; (842f0 <udd_ep_run+0xf0>)
   842c6:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   842ca:	7d22      	ldrb	r2, [r4, #20]
   842cc:	f363 0241 	bfi	r2, r3, #1, #1
   842d0:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   842d2:	4b09      	ldr	r3, [pc, #36]	; (842f8 <udd_ep_run+0xf8>)
   842d4:	4798      	blx	r3
	return true;
   842d6:	2001      	movs	r0, #1
   842d8:	e002      	b.n	842e0 <udd_ep_run+0xe0>
		return false;
   842da:	2000      	movs	r0, #0
}
   842dc:	4770      	bx	lr
		return false; // Endpoint is halted
   842de:	2000      	movs	r0, #0
}
   842e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   842e2:	2000      	movs	r0, #0
   842e4:	e7fc      	b.n	842e0 <udd_ep_run+0xe0>
   842e6:	2000      	movs	r0, #0
   842e8:	e7fa      	b.n	842e0 <udd_ep_run+0xe0>
		return false; // Job already on going
   842ea:	2000      	movs	r0, #0
   842ec:	e7f8      	b.n	842e0 <udd_ep_run+0xe0>
   842ee:	bf00      	nop
   842f0:	20001424 	.word	0x20001424
   842f4:	20000382 	.word	0x20000382
   842f8:	00083601 	.word	0x00083601

000842fc <udd_ep_alloc>:
{
   842fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84300:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   84302:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   84306:	2d02      	cmp	r5, #2
   84308:	f200 8115 	bhi.w	84536 <udd_ep_alloc+0x23a>
	if (Is_udd_endpoint_enabled(ep)) {
   8430c:	016b      	lsls	r3, r5, #5
   8430e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84312:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84316:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
   8431a:	f014 0401 	ands.w	r4, r4, #1
   8431e:	f040 810e 	bne.w	8453e <udd_ep_alloc+0x242>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   84322:	f001 0703 	and.w	r7, r1, #3
   84326:	2f02      	cmp	r7, #2
   84328:	d055      	beq.n	843d6 <udd_ep_alloc+0xda>
   8432a:	2f03      	cmp	r7, #3
   8432c:	d052      	beq.n	843d4 <udd_ep_alloc+0xd8>
   8432e:	2f01      	cmp	r7, #1
   84330:	d001      	beq.n	84336 <udd_ep_alloc+0x3a>
   84332:	2000      	movs	r0, #0
   84334:	e100      	b.n	84538 <udd_ep_alloc+0x23c>
	if (b_iso_hbw) {
   84336:	2d00      	cmp	r5, #0
   84338:	d04d      	beq.n	843d6 <udd_ep_alloc+0xda>
		switch(MaxEndpointSize & (0x3u << 11)) {
   8433a:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   8433e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84342:	d044      	beq.n	843ce <udd_ep_alloc+0xd2>
   84344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   84348:	bf14      	ite	ne
   8434a:	46b8      	movne	r8, r7
   8434c:	f04f 0803 	moveq.w	r8, #3
		MaxEndpointSize &= ~(0x3u << 11);
   84350:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   84354:	b292      	uxth	r2, r2
   84356:	f04f 0e01 	mov.w	lr, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8435a:	ea4f 1c45 	mov.w	ip, r5, lsl #5
   8435e:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
   84362:	f50c 2c20 	add.w	ip, ip, #655360	; 0xa0000
   84366:	f8dc 6100 	ldr.w	r6, [ip, #256]	; 0x100
   8436a:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   8436e:	f026 0603 	bic.w	r6, r6, #3
   84372:	0109      	lsls	r1, r1, #4
   84374:	f001 0130 	and.w	r1, r1, #48	; 0x30
   84378:	f010 0f80 	tst.w	r0, #128	; 0x80
   8437c:	bf0c      	ite	eq
   8437e:	4620      	moveq	r0, r4
   84380:	2008      	movne	r0, #8
   84382:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84386:	d22e      	bcs.n	843e6 <udd_ep_alloc+0xea>
   84388:	2a08      	cmp	r2, #8
   8438a:	bf38      	it	cc
   8438c:	2208      	movcc	r2, #8
   8438e:	0053      	lsls	r3, r2, #1
   84390:	3b01      	subs	r3, #1
   84392:	fab3 f383 	clz	r3, r3
   84396:	f1c3 031c 	rsb	r3, r3, #28
   8439a:	4331      	orrs	r1, r6
   8439c:	ea41 1787 	orr.w	r7, r1, r7, lsl #6
   843a0:	4338      	orrs	r0, r7
   843a2:	f1be 0f00 	cmp.w	lr, #0
   843a6:	d001      	beq.n	843ac <udd_ep_alloc+0xb0>
   843a8:	ea4f 2408 	mov.w	r4, r8, lsl #8
   843ac:	4303      	orrs	r3, r0
   843ae:	4323      	orrs	r3, r4
   843b0:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   843b4:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
   843b8:	2b00      	cmp	r3, #0
   843ba:	f280 80c4 	bge.w	84546 <udd_ep_alloc+0x24a>
	udd_enable_endpoint(ep);
   843be:	2301      	movs	r3, #1
   843c0:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   843c4:	2302      	movs	r3, #2
	ep_allocated = 0;
   843c6:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   843c8:	4861      	ldr	r0, [pc, #388]	; (84550 <udd_ep_alloc+0x254>)
			udd_disable_endpoint(i);
   843ca:	2401      	movs	r4, #1
   843cc:	e012      	b.n	843f4 <udd_ep_alloc+0xf8>
			nb_tran = 2;
   843ce:	f04f 0802 	mov.w	r8, #2
   843d2:	e7bd      	b.n	84350 <udd_ep_alloc+0x54>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   843d4:	2701      	movs	r7, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   843d6:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   843da:	f040 80b2 	bne.w	84542 <udd_ep_alloc+0x246>
   843de:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   843e2:	46f0      	mov	r8, lr
   843e4:	e7b9      	b.n	8435a <udd_ep_alloc+0x5e>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   843e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
   843ea:	e7d2      	b.n	84392 <udd_ep_alloc+0x96>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   843ec:	3b01      	subs	r3, #1
   843ee:	b2db      	uxtb	r3, r3
   843f0:	429d      	cmp	r5, r3
   843f2:	d81e      	bhi.n	84432 <udd_ep_alloc+0x136>
		if (Is_udd_endpoint_enabled(i)) {
   843f4:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   843f8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   843fc:	f012 0f01 	tst.w	r2, #1
   84400:	d0f4      	beq.n	843ec <udd_ep_alloc+0xf0>
			bank = udd_get_endpoint_bank(i);
   84402:	015a      	lsls	r2, r3, #5
   84404:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84408:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   8440c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   84410:	f3c1 1181 	ubfx	r1, r1, #6, #2
   84414:	005f      	lsls	r7, r3, #1
   84416:	40b9      	lsls	r1, r7
   84418:	430e      	orrs	r6, r1
   8441a:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   8441c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   84420:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   84424:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   84428:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   8442c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   84430:	e7dc      	b.n	843ec <udd_ep_alloc+0xf0>
   84432:	462c      	mov	r4, r5
   84434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   84438:	4b46      	ldr	r3, [pc, #280]	; (84554 <udd_ep_alloc+0x258>)
   8443a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		bool b_restart = ptr_job->busy;
   8443e:	461f      	mov	r7, r3
		udd_enable_endpoint(i);
   84440:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   84444:	f8df 9110 	ldr.w	r9, [pc, #272]	; 84558 <udd_ep_alloc+0x25c>
   84448:	e023      	b.n	84492 <udd_ep_alloc+0x196>
			if (NULL == ptr_job->call_trans) {
   8444a:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   8444e:	4a41      	ldr	r2, [pc, #260]	; (84554 <udd_ep_alloc+0x258>)
   84450:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   84454:	2c00      	cmp	r4, #0
   84456:	d078      	beq.n	8454a <udd_ep_alloc+0x24e>
			if (Is_udd_endpoint_in(i)) {
   84458:	f10c 0c08 	add.w	ip, ip, #8
   8445c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   84460:	4b3b      	ldr	r3, [pc, #236]	; (84550 <udd_ep_alloc+0x254>)
   84462:	f853 300c 	ldr.w	r3, [r3, ip]
   84466:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   8446a:	bf18      	it	ne
   8446c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84470:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   84474:	4b37      	ldr	r3, [pc, #220]	; (84554 <udd_ep_alloc+0x258>)
   84476:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   8447a:	4602      	mov	r2, r0
   8447c:	f8de 100c 	ldr.w	r1, [lr, #12]
   84480:	2001      	movs	r0, #1
   84482:	47a0      	blx	r4
			return false;
   84484:	2000      	movs	r0, #0
   84486:	e057      	b.n	84538 <udd_ep_alloc+0x23c>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84488:	3401      	adds	r4, #1
   8448a:	3518      	adds	r5, #24
   8448c:	b2e3      	uxtb	r3, r4
   8448e:	2b02      	cmp	r3, #2
   84490:	d84f      	bhi.n	84532 <udd_ep_alloc+0x236>
   84492:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84494:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   84496:	0063      	lsls	r3, r4, #1
   84498:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   8449c:	f013 0203 	ands.w	r2, r3, #3
   844a0:	d0f2      	beq.n	84488 <udd_ep_alloc+0x18c>
   844a2:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   844a6:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   844aa:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   844ae:	7d0b      	ldrb	r3, [r1, #20]
   844b0:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   844b4:	f36f 0300 	bfc	r3, #0, #1
   844b8:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   844ba:	0163      	lsls	r3, r4, #5
   844bc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   844c0:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   844c4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   844c8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   844cc:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   844d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   844d4:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   844d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   844dc:	2a00      	cmp	r2, #0
   844de:	dab4      	bge.n	8444a <udd_ep_alloc+0x14e>
		udd_enable_endpoint_bank_autoswitch(i);
   844e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   844e4:	f042 0202 	orr.w	r2, r2, #2
   844e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   844ec:	f1ba 0f00 	cmp.w	sl, #0
   844f0:	d0ca      	beq.n	84488 <udd_ep_alloc+0x18c>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   844f2:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   844f6:	f855 2c08 	ldr.w	r2, [r5, #-8]
   844fa:	ebab 0102 	sub.w	r1, fp, r2
   844fe:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   84502:	f855 3c10 	ldr.w	r3, [r5, #-16]
   84506:	eb02 0a03 	add.w	sl, r2, r3
   8450a:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   8450e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   84512:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   84516:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   8451a:	f855 3c18 	ldr.w	r3, [r5, #-24]
   8451e:	9300      	str	r3, [sp, #0]
   84520:	ebaa 030b 	sub.w	r3, sl, fp
   84524:	440a      	add	r2, r1
   84526:	f3cc 0140 	ubfx	r1, ip, #1, #1
   8452a:	47c8      	blx	r9
			if (!b_restart) {
   8452c:	2800      	cmp	r0, #0
   8452e:	d1ab      	bne.n	84488 <udd_ep_alloc+0x18c>
   84530:	e002      	b.n	84538 <udd_ep_alloc+0x23c>
	return true;
   84532:	2001      	movs	r0, #1
   84534:	e000      	b.n	84538 <udd_ep_alloc+0x23c>
		return false;
   84536:	2000      	movs	r0, #0
}
   84538:	b003      	add	sp, #12
   8453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8453e:	2000      	movs	r0, #0
   84540:	e7fa      	b.n	84538 <udd_ep_alloc+0x23c>
		return false;
   84542:	2000      	movs	r0, #0
   84544:	e7f8      	b.n	84538 <udd_ep_alloc+0x23c>
		return false;
   84546:	2000      	movs	r0, #0
   84548:	e7f6      	b.n	84538 <udd_ep_alloc+0x23c>
				return false;
   8454a:	2000      	movs	r0, #0
   8454c:	e7f4      	b.n	84538 <udd_ep_alloc+0x23c>
   8454e:	bf00      	nop
   84550:	400a4000 	.word	0x400a4000
   84554:	20001424 	.word	0x20001424
   84558:	00084201 	.word	0x00084201

0008455c <udd_ep_abort>:
{
   8455c:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8455e:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   84562:	4b18      	ldr	r3, [pc, #96]	; (845c4 <udd_ep_abort+0x68>)
   84564:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   84568:	2100      	movs	r1, #0
   8456a:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   8456c:	f010 0f80 	tst.w	r0, #128	; 0x80
   84570:	d109      	bne.n	84586 <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84572:	1e50      	subs	r0, r2, #1
   84574:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84578:	2101      	movs	r1, #1
   8457a:	4b13      	ldr	r3, [pc, #76]	; (845c8 <udd_ep_abort+0x6c>)
   8457c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   84580:	4b12      	ldr	r3, [pc, #72]	; (845cc <udd_ep_abort+0x70>)
   84582:	4798      	blx	r3
}
   84584:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   84586:	0151      	lsls	r1, r2, #5
   84588:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8458c:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   84590:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   84594:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   84598:	d0eb      	beq.n	84572 <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   8459a:	0153      	lsls	r3, r2, #5
   8459c:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   845a0:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   845a4:	f501 748a 	add.w	r4, r1, #276	; 0x114
   845a8:	f44f 7000 	mov.w	r0, #512	; 0x200
   845ac:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   845ae:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   845b2:	f413 7f00 	tst.w	r3, #512	; 0x200
   845b6:	d1fa      	bne.n	845ae <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   845b8:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   845bc:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   845c0:	d1f4      	bne.n	845ac <udd_ep_abort+0x50>
   845c2:	e7d6      	b.n	84572 <udd_ep_abort+0x16>
   845c4:	400a4300 	.word	0x400a4300
   845c8:	20001424 	.word	0x20001424
   845cc:	000835c9 	.word	0x000835c9

000845d0 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   845d0:	4a07      	ldr	r2, [pc, #28]	; (845f0 <udd_test_mode_j+0x20>)
   845d2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   845d6:	f023 0303 	bic.w	r3, r3, #3
   845da:	f043 0302 	orr.w	r3, r3, #2
   845de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   845e2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   845e6:	f043 0304 	orr.w	r3, r3, #4
   845ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   845ee:	4770      	bx	lr
   845f0:	400a4000 	.word	0x400a4000

000845f4 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   845f4:	4a07      	ldr	r2, [pc, #28]	; (84614 <udd_test_mode_k+0x20>)
   845f6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   845fa:	f023 0303 	bic.w	r3, r3, #3
   845fe:	f043 0302 	orr.w	r3, r3, #2
   84602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   84606:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8460a:	f043 0308 	orr.w	r3, r3, #8
   8460e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84612:	4770      	bx	lr
   84614:	400a4000 	.word	0x400a4000

00084618 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   84618:	4a04      	ldr	r2, [pc, #16]	; (8462c <udd_test_mode_se0_nak+0x14>)
   8461a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8461e:	f023 0303 	bic.w	r3, r3, #3
   84622:	f043 0302 	orr.w	r3, r3, #2
   84626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8462a:	4770      	bx	lr
   8462c:	400a4000 	.word	0x400a4000

00084630 <udd_test_mode_packet>:
{
   84630:	b430      	push	{r4, r5}
   84632:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   84634:	466c      	mov	r4, sp
   84636:	4d21      	ldr	r5, [pc, #132]	; (846bc <udd_test_mode_packet+0x8c>)
   84638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8463a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8463c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8463e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84644:	e895 0003 	ldmia.w	r5, {r0, r1}
   84648:	f844 0b04 	str.w	r0, [r4], #4
   8464c:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   8464e:	4b1c      	ldr	r3, [pc, #112]	; (846c0 <udd_test_mode_packet+0x90>)
   84650:	2101      	movs	r1, #1
   84652:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   84656:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8465a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   8465e:	f022 0203 	bic.w	r2, r2, #3
   84662:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   84666:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   8466a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   8466e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   84672:	f022 0203 	bic.w	r2, r2, #3
   84676:	f042 0202 	orr.w	r2, r2, #2
   8467a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   8467e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   84682:	f042 0210 	orr.w	r2, r2, #16
   84686:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   8468a:	466b      	mov	r3, sp
   8468c:	480d      	ldr	r0, [pc, #52]	; (846c4 <udd_test_mode_packet+0x94>)
   8468e:	aa0e      	add	r2, sp, #56	; 0x38
   84690:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   84692:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   84696:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   84698:	f813 1b01 	ldrb.w	r1, [r3], #1
   8469c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   8469e:	42a3      	cmp	r3, r4
   846a0:	d1f9      	bne.n	84696 <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   846a2:	4b07      	ldr	r3, [pc, #28]	; (846c0 <udd_test_mode_packet+0x90>)
   846a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   846a8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   846ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   846b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   846b4:	b00e      	add	sp, #56	; 0x38
   846b6:	bc30      	pop	{r4, r5}
   846b8:	4770      	bx	lr
   846ba:	bf00      	nop
   846bc:	0008bdf0 	.word	0x0008bdf0
   846c0:	400a4000 	.word	0x400a4000
   846c4:	20180038 	.word	0x20180038

000846c8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   846c8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   846ca:	23ac      	movs	r3, #172	; 0xac
   846cc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   846ce:	680b      	ldr	r3, [r1, #0]
   846d0:	684a      	ldr	r2, [r1, #4]
   846d2:	fbb3 f3f2 	udiv	r3, r3, r2
   846d6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   846d8:	1e5c      	subs	r4, r3, #1
   846da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   846de:	4294      	cmp	r4, r2
   846e0:	d80b      	bhi.n	846fa <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   846e2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   846e4:	688b      	ldr	r3, [r1, #8]
   846e6:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   846e8:	f240 2302 	movw	r3, #514	; 0x202
   846ec:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   846f0:	2350      	movs	r3, #80	; 0x50
   846f2:	6003      	str	r3, [r0, #0]

	return 0;
   846f4:	2000      	movs	r0, #0
}
   846f6:	bc10      	pop	{r4}
   846f8:	4770      	bx	lr
		return 1;
   846fa:	2001      	movs	r0, #1
   846fc:	e7fb      	b.n	846f6 <uart_init+0x2e>

000846fe <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   846fe:	6943      	ldr	r3, [r0, #20]
   84700:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   84704:	bf1a      	itte	ne
   84706:	61c1      	strne	r1, [r0, #28]
	return 0;
   84708:	2000      	movne	r0, #0
		return 1;
   8470a:	2001      	moveq	r0, #1
}
   8470c:	4770      	bx	lr

0008470e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8470e:	6943      	ldr	r3, [r0, #20]
   84710:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   84714:	bf1d      	ittte	ne
   84716:	6983      	ldrne	r3, [r0, #24]
   84718:	700b      	strbne	r3, [r1, #0]
	return 0;
   8471a:	2000      	movne	r0, #0
		return 1;
   8471c:	2001      	moveq	r0, #1
}
   8471e:	4770      	bx	lr

00084720 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   84720:	e7fe      	b.n	84720 <Dummy_Handler>
	...

00084724 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   84724:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   84726:	4a1d      	ldr	r2, [pc, #116]	; (8479c <Reset_Handler+0x78>)
   84728:	4b1d      	ldr	r3, [pc, #116]	; (847a0 <Reset_Handler+0x7c>)
   8472a:	429a      	cmp	r2, r3
   8472c:	d011      	beq.n	84752 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
   8472e:	461a      	mov	r2, r3
   84730:	4b1c      	ldr	r3, [pc, #112]	; (847a4 <Reset_Handler+0x80>)
   84732:	429a      	cmp	r2, r3
   84734:	d20d      	bcs.n	84752 <Reset_Handler+0x2e>
   84736:	4611      	mov	r1, r2
   84738:	3b01      	subs	r3, #1
   8473a:	1a9b      	subs	r3, r3, r2
   8473c:	f023 0303 	bic.w	r3, r3, #3
   84740:	3304      	adds	r3, #4
   84742:	4a16      	ldr	r2, [pc, #88]	; (8479c <Reset_Handler+0x78>)
   84744:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
   84746:	f852 0b04 	ldr.w	r0, [r2], #4
   8474a:	f841 0b04 	str.w	r0, [r1], #4
		for (; pDest < &_erelocate;) {
   8474e:	429a      	cmp	r2, r3
   84750:	d1f9      	bne.n	84746 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84752:	4a15      	ldr	r2, [pc, #84]	; (847a8 <Reset_Handler+0x84>)
   84754:	4b15      	ldr	r3, [pc, #84]	; (847ac <Reset_Handler+0x88>)
   84756:	429a      	cmp	r2, r3
   84758:	d20a      	bcs.n	84770 <Reset_Handler+0x4c>
   8475a:	3b01      	subs	r3, #1
   8475c:	1a9b      	subs	r3, r3, r2
   8475e:	f023 0303 	bic.w	r3, r3, #3
   84762:	3304      	adds	r3, #4
   84764:	4413      	add	r3, r2
		*pDest++ = 0;
   84766:	2100      	movs	r1, #0
   84768:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8476c:	4293      	cmp	r3, r2
   8476e:	d1fb      	bne.n	84768 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84770:	4b0f      	ldr	r3, [pc, #60]	; (847b0 <Reset_Handler+0x8c>)
   84772:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   84776:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8477a:	490e      	ldr	r1, [pc, #56]	; (847b4 <Reset_Handler+0x90>)
   8477c:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   8477e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   84782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84786:	d203      	bcs.n	84790 <Reset_Handler+0x6c>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84788:	688b      	ldr	r3, [r1, #8]
   8478a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8478e:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   84790:	4b09      	ldr	r3, [pc, #36]	; (847b8 <Reset_Handler+0x94>)
   84792:	4798      	blx	r3

	/* Branch to main function */
	main();
   84794:	4b09      	ldr	r3, [pc, #36]	; (847bc <Reset_Handler+0x98>)
   84796:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84798:	e7fe      	b.n	84798 <Reset_Handler+0x74>
   8479a:	bf00      	nop
   8479c:	0008c314 	.word	0x0008c314
   847a0:	20000000 	.word	0x20000000
   847a4:	20000d58 	.word	0x20000d58
   847a8:	20000d58 	.word	0x20000d58
   847ac:	20001c3c 	.word	0x20001c3c
   847b0:	00080000 	.word	0x00080000
   847b4:	e000ed00 	.word	0xe000ed00
   847b8:	00084f4d 	.word	0x00084f4d
   847bc:	00084cf9 	.word	0x00084cf9

000847c0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   847c0:	4b3d      	ldr	r3, [pc, #244]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   847c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   847c4:	f002 0303 	and.w	r3, r2, #3
   847c8:	2b01      	cmp	r3, #1
   847ca:	d032      	beq.n	84832 <SystemCoreClockUpdate+0x72>
   847cc:	f012 0f02 	tst.w	r2, #2
   847d0:	d11b      	bne.n	8480a <SystemCoreClockUpdate+0x4a>
   847d2:	b953      	cbnz	r3, 847ea <SystemCoreClockUpdate+0x2a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   847d4:	4b39      	ldr	r3, [pc, #228]	; (848bc <SystemCoreClockUpdate+0xfc>)
   847d6:	695b      	ldr	r3, [r3, #20]
   847d8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   847dc:	4b38      	ldr	r3, [pc, #224]	; (848c0 <SystemCoreClockUpdate+0x100>)
   847de:	bf14      	ite	ne
   847e0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   847e4:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   847e8:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   847ea:	4b33      	ldr	r3, [pc, #204]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   847ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   847ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
   847f2:	2b70      	cmp	r3, #112	; 0x70
   847f4:	d058      	beq.n	848a8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   847f6:	4b30      	ldr	r3, [pc, #192]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   847f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   847fa:	f3c2 1202 	ubfx	r2, r2, #4, #3
   847fe:	4b30      	ldr	r3, [pc, #192]	; (848c0 <SystemCoreClockUpdate+0x100>)
   84800:	681b      	ldr	r3, [r3, #0]
   84802:	40d3      	lsrs	r3, r2
   84804:	4a2e      	ldr	r2, [pc, #184]	; (848c0 <SystemCoreClockUpdate+0x100>)
   84806:	6013      	str	r3, [r2, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   84808:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8480a:	4b2b      	ldr	r3, [pc, #172]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   8480c:	6a1b      	ldr	r3, [r3, #32]
   8480e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   84812:	d12a      	bne.n	8486a <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84814:	4b2a      	ldr	r3, [pc, #168]	; (848c0 <SystemCoreClockUpdate+0x100>)
   84816:	4a2b      	ldr	r2, [pc, #172]	; (848c4 <SystemCoreClockUpdate+0x104>)
   84818:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8481a:	4b27      	ldr	r3, [pc, #156]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   8481c:	6a1b      	ldr	r3, [r3, #32]
   8481e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84822:	2b10      	cmp	r3, #16
   84824:	d02e      	beq.n	84884 <SystemCoreClockUpdate+0xc4>
   84826:	2b20      	cmp	r3, #32
   84828:	d122      	bne.n	84870 <SystemCoreClockUpdate+0xb0>
				SystemCoreClock *= 3U;
   8482a:	4b25      	ldr	r3, [pc, #148]	; (848c0 <SystemCoreClockUpdate+0x100>)
   8482c:	4a26      	ldr	r2, [pc, #152]	; (848c8 <SystemCoreClockUpdate+0x108>)
   8482e:	601a      	str	r2, [r3, #0]
				break;
   84830:	e01e      	b.n	84870 <SystemCoreClockUpdate+0xb0>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84832:	4b21      	ldr	r3, [pc, #132]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   84834:	6a1b      	ldr	r3, [r3, #32]
   84836:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8483a:	d003      	beq.n	84844 <SystemCoreClockUpdate+0x84>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8483c:	4b20      	ldr	r3, [pc, #128]	; (848c0 <SystemCoreClockUpdate+0x100>)
   8483e:	4a22      	ldr	r2, [pc, #136]	; (848c8 <SystemCoreClockUpdate+0x108>)
   84840:	601a      	str	r2, [r3, #0]
   84842:	e7d2      	b.n	847ea <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84844:	4b1e      	ldr	r3, [pc, #120]	; (848c0 <SystemCoreClockUpdate+0x100>)
   84846:	4a1f      	ldr	r2, [pc, #124]	; (848c4 <SystemCoreClockUpdate+0x104>)
   84848:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8484a:	4b1b      	ldr	r3, [pc, #108]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   8484c:	6a1b      	ldr	r3, [r3, #32]
   8484e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84852:	2b10      	cmp	r3, #16
   84854:	d005      	beq.n	84862 <SystemCoreClockUpdate+0xa2>
   84856:	2b20      	cmp	r3, #32
   84858:	d1c7      	bne.n	847ea <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8485a:	4b19      	ldr	r3, [pc, #100]	; (848c0 <SystemCoreClockUpdate+0x100>)
   8485c:	4a1a      	ldr	r2, [pc, #104]	; (848c8 <SystemCoreClockUpdate+0x108>)
   8485e:	601a      	str	r2, [r3, #0]
				break;
   84860:	e7c3      	b.n	847ea <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   84862:	4b17      	ldr	r3, [pc, #92]	; (848c0 <SystemCoreClockUpdate+0x100>)
   84864:	4a19      	ldr	r2, [pc, #100]	; (848cc <SystemCoreClockUpdate+0x10c>)
   84866:	601a      	str	r2, [r3, #0]
				break;
   84868:	e7bf      	b.n	847ea <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8486a:	4b15      	ldr	r3, [pc, #84]	; (848c0 <SystemCoreClockUpdate+0x100>)
   8486c:	4a16      	ldr	r2, [pc, #88]	; (848c8 <SystemCoreClockUpdate+0x108>)
   8486e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84870:	4b11      	ldr	r3, [pc, #68]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   84872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84874:	f003 0303 	and.w	r3, r3, #3
   84878:	2b02      	cmp	r3, #2
   8487a:	d007      	beq.n	8488c <SystemCoreClockUpdate+0xcc>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8487c:	4b10      	ldr	r3, [pc, #64]	; (848c0 <SystemCoreClockUpdate+0x100>)
   8487e:	4a14      	ldr	r2, [pc, #80]	; (848d0 <SystemCoreClockUpdate+0x110>)
   84880:	601a      	str	r2, [r3, #0]
   84882:	e7b2      	b.n	847ea <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   84884:	4b0e      	ldr	r3, [pc, #56]	; (848c0 <SystemCoreClockUpdate+0x100>)
   84886:	4a11      	ldr	r2, [pc, #68]	; (848cc <SystemCoreClockUpdate+0x10c>)
   84888:	601a      	str	r2, [r3, #0]
				break;
   8488a:	e7f1      	b.n	84870 <SystemCoreClockUpdate+0xb0>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8488c:	4a0a      	ldr	r2, [pc, #40]	; (848b8 <SystemCoreClockUpdate+0xf8>)
   8488e:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   84890:	6a92      	ldr	r2, [r2, #40]	; 0x28
   84892:	480b      	ldr	r0, [pc, #44]	; (848c0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84894:	f3c1 410a 	ubfx	r1, r1, #16, #11
   84898:	6803      	ldr	r3, [r0, #0]
   8489a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8489e:	b2d2      	uxtb	r2, r2
   848a0:	fbb3 f3f2 	udiv	r3, r3, r2
   848a4:	6003      	str	r3, [r0, #0]
   848a6:	e7a0      	b.n	847ea <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   848a8:	4b05      	ldr	r3, [pc, #20]	; (848c0 <SystemCoreClockUpdate+0x100>)
   848aa:	681b      	ldr	r3, [r3, #0]
   848ac:	4a09      	ldr	r2, [pc, #36]	; (848d4 <SystemCoreClockUpdate+0x114>)
   848ae:	fba2 2303 	umull	r2, r3, r2, r3
   848b2:	085b      	lsrs	r3, r3, #1
   848b4:	e7a6      	b.n	84804 <SystemCoreClockUpdate+0x44>
   848b6:	bf00      	nop
   848b8:	400e0400 	.word	0x400e0400
   848bc:	400e1210 	.word	0x400e1210
   848c0:	20000384 	.word	0x20000384
   848c4:	003d0900 	.word	0x003d0900
   848c8:	00b71b00 	.word	0x00b71b00
   848cc:	007a1200 	.word	0x007a1200
   848d0:	0e4e1c00 	.word	0x0e4e1c00
   848d4:	aaaaaaab 	.word	0xaaaaaaab

000848d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   848d8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   848da:	4a09      	ldr	r2, [pc, #36]	; (84900 <_sbrk+0x28>)
   848dc:	6812      	ldr	r2, [r2, #0]
   848de:	b15a      	cbz	r2, 848f8 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   848e0:	4a07      	ldr	r2, [pc, #28]	; (84900 <_sbrk+0x28>)
   848e2:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   848e4:	18c1      	adds	r1, r0, r3
   848e6:	4a07      	ldr	r2, [pc, #28]	; (84904 <_sbrk+0x2c>)
   848e8:	4291      	cmp	r1, r2
		return (caddr_t) -1;	
	}

	heap += incr;
   848ea:	bfdd      	ittte	le
   848ec:	460b      	movle	r3, r1
   848ee:	4a04      	ldrle	r2, [pc, #16]	; (84900 <_sbrk+0x28>)
   848f0:	6013      	strle	r3, [r2, #0]
		return (caddr_t) -1;	
   848f2:	f04f 30ff 	movgt.w	r0, #4294967295

	return (caddr_t) prev_heap;
}
   848f6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   848f8:	4a01      	ldr	r2, [pc, #4]	; (84900 <_sbrk+0x28>)
   848fa:	4903      	ldr	r1, [pc, #12]	; (84908 <_sbrk+0x30>)
   848fc:	6011      	str	r1, [r2, #0]
   848fe:	e7ef      	b.n	848e0 <_sbrk+0x8>
   84900:	20001454 	.word	0x20001454
   84904:	2007fffc 	.word	0x2007fffc
   84908:	20082000 	.word	0x20082000

0008490c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8490c:	f04f 30ff 	mov.w	r0, #4294967295
   84910:	4770      	bx	lr

00084912 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   84912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   84916:	604b      	str	r3, [r1, #4]

	return 0;
}
   84918:	2000      	movs	r0, #0
   8491a:	4770      	bx	lr

0008491c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8491c:	2001      	movs	r0, #1
   8491e:	4770      	bx	lr

00084920 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   84920:	2000      	movs	r0, #0
   84922:	4770      	bx	lr

00084924 <_exit>:

extern void _exit(int status)
{
   84924:	b508      	push	{r3, lr}
   84926:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   84928:	4801      	ldr	r0, [pc, #4]	; (84930 <_exit+0xc>)
   8492a:	4b02      	ldr	r3, [pc, #8]	; (84934 <_exit+0x10>)
   8492c:	4798      	blx	r3

	for (;;);
   8492e:	e7fe      	b.n	8492e <_exit+0xa>
   84930:	0008be28 	.word	0x0008be28
   84934:	00084f95 	.word	0x00084f95

00084938 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   84938:	4770      	bx	lr

0008493a <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   8493a:	f04f 30ff 	mov.w	r0, #4294967295
   8493e:	4770      	bx	lr

00084940 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   84940:	b5f0      	push	{r4, r5, r6, r7, lr}
   84942:	b083      	sub	sp, #12
   84944:	4605      	mov	r5, r0
   84946:	460c      	mov	r4, r1
	uint32_t val = 0;
   84948:	2300      	movs	r3, #0
   8494a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8494c:	4b1e      	ldr	r3, [pc, #120]	; (849c8 <usart_serial_getchar+0x88>)
   8494e:	4298      	cmp	r0, r3
   84950:	d00f      	beq.n	84972 <usart_serial_getchar+0x32>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   84952:	4b1e      	ldr	r3, [pc, #120]	; (849cc <usart_serial_getchar+0x8c>)
   84954:	4298      	cmp	r0, r3
   84956:	d020      	beq.n	8499a <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   84958:	4b1d      	ldr	r3, [pc, #116]	; (849d0 <usart_serial_getchar+0x90>)
   8495a:	4298      	cmp	r0, r3
   8495c:	d110      	bne.n	84980 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
   8495e:	461e      	mov	r6, r3
   84960:	4d1c      	ldr	r5, [pc, #112]	; (849d4 <usart_serial_getchar+0x94>)
   84962:	a901      	add	r1, sp, #4
   84964:	4630      	mov	r0, r6
   84966:	47a8      	blx	r5
   84968:	2800      	cmp	r0, #0
   8496a:	d1fa      	bne.n	84962 <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   8496c:	9b01      	ldr	r3, [sp, #4]
   8496e:	7023      	strb	r3, [r4, #0]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   84970:	e028      	b.n	849c4 <usart_serial_getchar+0x84>
		while (uart_read((Uart*)p_usart, data));
   84972:	461f      	mov	r7, r3
   84974:	4e18      	ldr	r6, [pc, #96]	; (849d8 <usart_serial_getchar+0x98>)
   84976:	4621      	mov	r1, r4
   84978:	4638      	mov	r0, r7
   8497a:	47b0      	blx	r6
   8497c:	2800      	cmp	r0, #0
   8497e:	d1fa      	bne.n	84976 <usart_serial_getchar+0x36>
	if (USART2 == p_usart) {
   84980:	4b16      	ldr	r3, [pc, #88]	; (849dc <usart_serial_getchar+0x9c>)
   84982:	429d      	cmp	r5, r3
   84984:	d112      	bne.n	849ac <usart_serial_getchar+0x6c>
		while (usart_read(p_usart, &val));
   84986:	461e      	mov	r6, r3
   84988:	4d12      	ldr	r5, [pc, #72]	; (849d4 <usart_serial_getchar+0x94>)
   8498a:	a901      	add	r1, sp, #4
   8498c:	4630      	mov	r0, r6
   8498e:	47a8      	blx	r5
   84990:	2800      	cmp	r0, #0
   84992:	d1fa      	bne.n	8498a <usart_serial_getchar+0x4a>
		*data = (uint8_t)(val & 0xFF);
   84994:	9b01      	ldr	r3, [sp, #4]
   84996:	7023      	strb	r3, [r4, #0]
	if (USART3 == p_usart) {
   84998:	e014      	b.n	849c4 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   8499a:	461f      	mov	r7, r3
   8499c:	4e0d      	ldr	r6, [pc, #52]	; (849d4 <usart_serial_getchar+0x94>)
   8499e:	a901      	add	r1, sp, #4
   849a0:	4638      	mov	r0, r7
   849a2:	47b0      	blx	r6
   849a4:	2800      	cmp	r0, #0
   849a6:	d1fa      	bne.n	8499e <usart_serial_getchar+0x5e>
		*data = (uint8_t)(val & 0xFF);
   849a8:	9b01      	ldr	r3, [sp, #4]
   849aa:	7023      	strb	r3, [r4, #0]
	if (USART3 == p_usart) {
   849ac:	4b0c      	ldr	r3, [pc, #48]	; (849e0 <usart_serial_getchar+0xa0>)
   849ae:	429d      	cmp	r5, r3
   849b0:	d108      	bne.n	849c4 <usart_serial_getchar+0x84>
		while (usart_read(p_usart, &val));
   849b2:	461e      	mov	r6, r3
   849b4:	4d07      	ldr	r5, [pc, #28]	; (849d4 <usart_serial_getchar+0x94>)
   849b6:	a901      	add	r1, sp, #4
   849b8:	4630      	mov	r0, r6
   849ba:	47a8      	blx	r5
   849bc:	2800      	cmp	r0, #0
   849be:	d1fa      	bne.n	849b6 <usart_serial_getchar+0x76>
		*data = (uint8_t)(val & 0xFF);
   849c0:	9b01      	ldr	r3, [sp, #4]
   849c2:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   849c4:	b003      	add	sp, #12
   849c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   849c8:	400e0600 	.word	0x400e0600
   849cc:	40090000 	.word	0x40090000
   849d0:	40094000 	.word	0x40094000
   849d4:	000804c3 	.word	0x000804c3
   849d8:	0008470f 	.word	0x0008470f
   849dc:	40098000 	.word	0x40098000
   849e0:	4009c000 	.word	0x4009c000

000849e4 <usart_serial_putchar>:
{
   849e4:	b570      	push	{r4, r5, r6, lr}
   849e6:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   849e8:	4b1e      	ldr	r3, [pc, #120]	; (84a64 <usart_serial_putchar+0x80>)
   849ea:	4298      	cmp	r0, r3
   849ec:	d00d      	beq.n	84a0a <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   849ee:	4b1e      	ldr	r3, [pc, #120]	; (84a68 <usart_serial_putchar+0x84>)
   849f0:	4298      	cmp	r0, r3
   849f2:	d013      	beq.n	84a1c <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   849f4:	4b1d      	ldr	r3, [pc, #116]	; (84a6c <usart_serial_putchar+0x88>)
   849f6:	4298      	cmp	r0, r3
   849f8:	d019      	beq.n	84a2e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   849fa:	4b1d      	ldr	r3, [pc, #116]	; (84a70 <usart_serial_putchar+0x8c>)
   849fc:	4298      	cmp	r0, r3
   849fe:	d01f      	beq.n	84a40 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   84a00:	4b1c      	ldr	r3, [pc, #112]	; (84a74 <usart_serial_putchar+0x90>)
   84a02:	4298      	cmp	r0, r3
   84a04:	d025      	beq.n	84a52 <usart_serial_putchar+0x6e>
	return 0;
   84a06:	2000      	movs	r0, #0
}
   84a08:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   84a0a:	461e      	mov	r6, r3
   84a0c:	4d1a      	ldr	r5, [pc, #104]	; (84a78 <usart_serial_putchar+0x94>)
   84a0e:	4621      	mov	r1, r4
   84a10:	4630      	mov	r0, r6
   84a12:	47a8      	blx	r5
   84a14:	2800      	cmp	r0, #0
   84a16:	d1fa      	bne.n	84a0e <usart_serial_putchar+0x2a>
		return 1;
   84a18:	2001      	movs	r0, #1
   84a1a:	e7f5      	b.n	84a08 <usart_serial_putchar+0x24>
		while (usart_write(p_usart, c)!=0);
   84a1c:	461e      	mov	r6, r3
   84a1e:	4d17      	ldr	r5, [pc, #92]	; (84a7c <usart_serial_putchar+0x98>)
   84a20:	4621      	mov	r1, r4
   84a22:	4630      	mov	r0, r6
   84a24:	47a8      	blx	r5
   84a26:	2800      	cmp	r0, #0
   84a28:	d1fa      	bne.n	84a20 <usart_serial_putchar+0x3c>
		return 1;
   84a2a:	2001      	movs	r0, #1
   84a2c:	e7ec      	b.n	84a08 <usart_serial_putchar+0x24>
		while (usart_write(p_usart, c)!=0);
   84a2e:	461e      	mov	r6, r3
   84a30:	4d12      	ldr	r5, [pc, #72]	; (84a7c <usart_serial_putchar+0x98>)
   84a32:	4621      	mov	r1, r4
   84a34:	4630      	mov	r0, r6
   84a36:	47a8      	blx	r5
   84a38:	2800      	cmp	r0, #0
   84a3a:	d1fa      	bne.n	84a32 <usart_serial_putchar+0x4e>
		return 1;
   84a3c:	2001      	movs	r0, #1
   84a3e:	e7e3      	b.n	84a08 <usart_serial_putchar+0x24>
		while (usart_write(p_usart, c)!=0);
   84a40:	461e      	mov	r6, r3
   84a42:	4d0e      	ldr	r5, [pc, #56]	; (84a7c <usart_serial_putchar+0x98>)
   84a44:	4621      	mov	r1, r4
   84a46:	4630      	mov	r0, r6
   84a48:	47a8      	blx	r5
   84a4a:	2800      	cmp	r0, #0
   84a4c:	d1fa      	bne.n	84a44 <usart_serial_putchar+0x60>
		return 1;
   84a4e:	2001      	movs	r0, #1
   84a50:	e7da      	b.n	84a08 <usart_serial_putchar+0x24>
		while (usart_write(p_usart, c)!=0);
   84a52:	461e      	mov	r6, r3
   84a54:	4d09      	ldr	r5, [pc, #36]	; (84a7c <usart_serial_putchar+0x98>)
   84a56:	4621      	mov	r1, r4
   84a58:	4630      	mov	r0, r6
   84a5a:	47a8      	blx	r5
   84a5c:	2800      	cmp	r0, #0
   84a5e:	d1fa      	bne.n	84a56 <usart_serial_putchar+0x72>
		return 1;
   84a60:	2001      	movs	r0, #1
   84a62:	e7d1      	b.n	84a08 <usart_serial_putchar+0x24>
   84a64:	400e0600 	.word	0x400e0600
   84a68:	40090000 	.word	0x40090000
   84a6c:	40094000 	.word	0x40094000
   84a70:	40098000 	.word	0x40098000
   84a74:	4009c000 	.word	0x4009c000
   84a78:	000846ff 	.word	0x000846ff
   84a7c:	0008049d 	.word	0x0008049d

00084a80 <fpga_pins>:

void fpga_pins(bool enabled);
static void configure_console(void);

void fpga_pins(bool enabled)
{
   84a80:	b570      	push	{r4, r5, r6, lr}
   84a82:	4604      	mov	r4, r0
	
	gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
   84a84:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84a88:	2036      	movs	r0, #54	; 0x36
   84a8a:	4d95      	ldr	r5, [pc, #596]	; (84ce0 <fpga_pins+0x260>)
   84a8c:	47a8      	blx	r5
	gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);
   84a8e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84a92:	2032      	movs	r0, #50	; 0x32
   84a94:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   84a96:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84a9a:	2007      	movs	r0, #7
   84a9c:	47a8      	blx	r5
	
	if (enabled){
   84a9e:	2c00      	cmp	r4, #0
   84aa0:	d07e      	beq.n	84ba0 <fpga_pins+0x120>

		#ifdef CONF_BOARD_PCK1
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
		#endif
		
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   84aa2:	4d90      	ldr	r5, [pc, #576]	; (84ce4 <fpga_pins+0x264>)
   84aa4:	4629      	mov	r1, r5
   84aa6:	2029      	movs	r0, #41	; 0x29
   84aa8:	4c8d      	ldr	r4, [pc, #564]	; (84ce0 <fpga_pins+0x260>)
   84aaa:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   84aac:	4629      	mov	r1, r5
   84aae:	202a      	movs	r0, #42	; 0x2a
   84ab0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   84ab2:	4629      	mov	r1, r5
   84ab4:	202b      	movs	r0, #43	; 0x2b
   84ab6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   84ab8:	4629      	mov	r1, r5
   84aba:	202c      	movs	r0, #44	; 0x2c
   84abc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   84abe:	4629      	mov	r1, r5
   84ac0:	202d      	movs	r0, #45	; 0x2d
   84ac2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   84ac4:	4629      	mov	r1, r5
   84ac6:	202e      	movs	r0, #46	; 0x2e
   84ac8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   84aca:	4629      	mov	r1, r5
   84acc:	202f      	movs	r0, #47	; 0x2f
   84ace:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   84ad0:	4629      	mov	r1, r5
   84ad2:	2030      	movs	r0, #48	; 0x30
   84ad4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   84ad6:	4629      	mov	r1, r5
   84ad8:	2033      	movs	r0, #51	; 0x33
   84ada:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   84adc:	4629      	mov	r1, r5
   84ade:	2037      	movs	r0, #55	; 0x37
   84ae0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   84ae2:	4629      	mov	r1, r5
   84ae4:	2034      	movs	r0, #52	; 0x34
   84ae6:	47a0      	blx	r4
			
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG2);
   84ae8:	4e7f      	ldr	r6, [pc, #508]	; (84ce8 <fpga_pins+0x268>)
   84aea:	4631      	mov	r1, r6
   84aec:	2027      	movs	r0, #39	; 0x27
   84aee:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG2);
   84af0:	4631      	mov	r1, r6
   84af2:	2028      	movs	r0, #40	; 0x28
   84af4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
   84af6:	4629      	mov	r1, r5
   84af8:	2040      	movs	r0, #64	; 0x40
   84afa:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
   84afc:	4629      	mov	r1, r5
   84afe:	2041      	movs	r0, #65	; 0x41
   84b00:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
   84b02:	4629      	mov	r1, r5
   84b04:	2042      	movs	r0, #66	; 0x42
   84b06:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
   84b08:	4629      	mov	r1, r5
   84b0a:	2043      	movs	r0, #67	; 0x43
   84b0c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
   84b0e:	4629      	mov	r1, r5
   84b10:	2044      	movs	r0, #68	; 0x44
   84b12:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
   84b14:	4629      	mov	r1, r5
   84b16:	2045      	movs	r0, #69	; 0x45
   84b18:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
   84b1a:	4629      	mov	r1, r5
   84b1c:	2046      	movs	r0, #70	; 0x46
   84b1e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
   84b20:	4629      	mov	r1, r5
   84b22:	2047      	movs	r0, #71	; 0x47
   84b24:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
   84b26:	4629      	mov	r1, r5
   84b28:	2048      	movs	r0, #72	; 0x48
   84b2a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
   84b2c:	4629      	mov	r1, r5
   84b2e:	2049      	movs	r0, #73	; 0x49
   84b30:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
   84b32:	4629      	mov	r1, r5
   84b34:	204a      	movs	r0, #74	; 0x4a
   84b36:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
   84b38:	4629      	mov	r1, r5
   84b3a:	204b      	movs	r0, #75	; 0x4b
   84b3c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
   84b3e:	4629      	mov	r1, r5
   84b40:	2054      	movs	r0, #84	; 0x54
   84b42:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
   84b44:	4629      	mov	r1, r5
   84b46:	2055      	movs	r0, #85	; 0x55
   84b48:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
   84b4a:	4629      	mov	r1, r5
   84b4c:	2056      	movs	r0, #86	; 0x56
   84b4e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
   84b50:	4629      	mov	r1, r5
   84b52:	2057      	movs	r0, #87	; 0x57
   84b54:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
   84b56:	4629      	mov	r1, r5
   84b58:	2058      	movs	r0, #88	; 0x58
   84b5a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
   84b5c:	4629      	mov	r1, r5
   84b5e:	2059      	movs	r0, #89	; 0x59
   84b60:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1);
   84b62:	4629      	mov	r1, r5
   84b64:	205a      	movs	r0, #90	; 0x5a
   84b66:	47a0      	blx	r4
		
		/* FPGA Programming pins */
		FPGA_NPROG_SETUP();
   84b68:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84b6c:	2008      	movs	r0, #8
   84b6e:	47a0      	blx	r4
		FPGA_NPROG_HIGH();
   84b70:	2008      	movs	r0, #8
   84b72:	4b5e      	ldr	r3, [pc, #376]	; (84cec <fpga_pins+0x26c>)
   84b74:	4798      	blx	r3
		//ALE pin under SW control
		//gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
		//gpio_set_pin_high(FPGA_ALE_GPIO);
			
		//Force FPGA trigger
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   84b76:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84b7a:	2031      	movs	r0, #49	; 0x31
   84b7c:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   84b7e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84b82:	2008      	movs	r0, #8
   84b84:	47a0      	blx	r4
		
		gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   84b86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84b8a:	200d      	movs	r0, #13
   84b8c:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   84b8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84b92:	200e      	movs	r0, #14
   84b94:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   84b96:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84b9a:	200f      	movs	r0, #15
   84b9c:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT);
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT);
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
	}
	
}
   84b9e:	bd70      	pop	{r4, r5, r6, pc}
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   84ba0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84ba4:	2029      	movs	r0, #41	; 0x29
   84ba6:	4c4e      	ldr	r4, [pc, #312]	; (84ce0 <fpga_pins+0x260>)
   84ba8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   84baa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bae:	202a      	movs	r0, #42	; 0x2a
   84bb0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   84bb2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bb6:	202b      	movs	r0, #43	; 0x2b
   84bb8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   84bba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bbe:	202c      	movs	r0, #44	; 0x2c
   84bc0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   84bc2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bc6:	202d      	movs	r0, #45	; 0x2d
   84bc8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   84bca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bce:	202e      	movs	r0, #46	; 0x2e
   84bd0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   84bd2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bd6:	202f      	movs	r0, #47	; 0x2f
   84bd8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   84bda:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bde:	2030      	movs	r0, #48	; 0x30
   84be0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   84be2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84be6:	2033      	movs	r0, #51	; 0x33
   84be8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   84bea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bee:	2037      	movs	r0, #55	; 0x37
   84bf0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   84bf2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bf6:	2034      	movs	r0, #52	; 0x34
   84bf8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIO_INPUT);
   84bfa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84bfe:	2027      	movs	r0, #39	; 0x27
   84c00:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIO_INPUT);
   84c02:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c06:	2028      	movs	r0, #40	; 0x28
   84c08:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIO_INPUT);
   84c0a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c0e:	2040      	movs	r0, #64	; 0x40
   84c10:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIO_INPUT);
   84c12:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c16:	2041      	movs	r0, #65	; 0x41
   84c18:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIO_INPUT);
   84c1a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c1e:	2042      	movs	r0, #66	; 0x42
   84c20:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIO_INPUT);
   84c22:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c26:	2043      	movs	r0, #67	; 0x43
   84c28:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIO_INPUT);
   84c2a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c2e:	2044      	movs	r0, #68	; 0x44
   84c30:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIO_INPUT);
   84c32:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c36:	2045      	movs	r0, #69	; 0x45
   84c38:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIO_INPUT);
   84c3a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c3e:	2046      	movs	r0, #70	; 0x46
   84c40:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIO_INPUT);
   84c42:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c46:	2047      	movs	r0, #71	; 0x47
   84c48:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIO_INPUT);
   84c4a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c4e:	2048      	movs	r0, #72	; 0x48
   84c50:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIO_INPUT);
   84c52:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c56:	2049      	movs	r0, #73	; 0x49
   84c58:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIO_INPUT);
   84c5a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c5e:	204a      	movs	r0, #74	; 0x4a
   84c60:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIO_INPUT);
   84c62:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c66:	204b      	movs	r0, #75	; 0x4b
   84c68:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIO_INPUT);
   84c6a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c6e:	2054      	movs	r0, #84	; 0x54
   84c70:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIO_INPUT);
   84c72:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c76:	2055      	movs	r0, #85	; 0x55
   84c78:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIO_INPUT);
   84c7a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c7e:	2056      	movs	r0, #86	; 0x56
   84c80:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIO_INPUT);
   84c82:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c86:	2057      	movs	r0, #87	; 0x57
   84c88:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIO_INPUT);
   84c8a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c8e:	2058      	movs	r0, #88	; 0x58
   84c90:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIO_INPUT);
   84c92:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c96:	2059      	movs	r0, #89	; 0x59
   84c98:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIO_INPUT);	
   84c9a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84c9e:	205a      	movs	r0, #90	; 0x5a
   84ca0:	47a0      	blx	r4
		gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, PIO_INPUT);
   84ca2:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
   84ca6:	21ff      	movs	r1, #255	; 0xff
   84ca8:	4811      	ldr	r0, [pc, #68]	; (84cf0 <fpga_pins+0x270>)
   84caa:	4b12      	ldr	r3, [pc, #72]	; (84cf4 <fpga_pins+0x274>)
   84cac:	4798      	blx	r3
		gpio_configure_pin(FPGA_ALE_GPIO, PIO_INPUT);
   84cae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84cb2:	2035      	movs	r0, #53	; 0x35
   84cb4:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   84cb6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84cba:	2031      	movs	r0, #49	; 0x31
   84cbc:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   84cbe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84cc2:	2008      	movs	r0, #8
   84cc4:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT);
   84cc6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84cca:	200d      	movs	r0, #13
   84ccc:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT);
   84cce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84cd2:	200e      	movs	r0, #14
   84cd4:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT);
   84cd6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84cda:	200f      	movs	r0, #15
   84cdc:	47a0      	blx	r4
}
   84cde:	e75e      	b.n	84b9e <fpga_pins+0x11e>
   84ce0:	00082bbd 	.word	0x00082bbd
   84ce4:	08000001 	.word	0x08000001
   84ce8:	10000001 	.word	0x10000001
   84cec:	00082b87 	.word	0x00082b87
   84cf0:	400e0e00 	.word	0x400e0e00
   84cf4:	00082c8d 	.word	0x00082c8d

00084cf8 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   84cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84cfc:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   84cfe:	2110      	movs	r1, #16
   84d00:	eb0d 0001 	add.w	r0, sp, r1
   84d04:	4b53      	ldr	r3, [pc, #332]	; (84e54 <main+0x15c>)
   84d06:	4798      	blx	r3
   84d08:	2008      	movs	r0, #8
   84d0a:	4d53      	ldr	r5, [pc, #332]	; (84e58 <main+0x160>)
   84d0c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   84d0e:	4c53      	ldr	r4, [pc, #332]	; (84e5c <main+0x164>)
   84d10:	4b53      	ldr	r3, [pc, #332]	; (84e60 <main+0x168>)
   84d12:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   84d14:	4b53      	ldr	r3, [pc, #332]	; (84e64 <main+0x16c>)
   84d16:	4a54      	ldr	r2, [pc, #336]	; (84e68 <main+0x170>)
   84d18:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   84d1a:	4b54      	ldr	r3, [pc, #336]	; (84e6c <main+0x174>)
   84d1c:	4a54      	ldr	r2, [pc, #336]	; (84e70 <main+0x178>)
   84d1e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   84d20:	4b54      	ldr	r3, [pc, #336]	; (84e74 <main+0x17c>)
   84d22:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   84d24:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   84d28:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   84d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84d2e:	9303      	str	r3, [sp, #12]
   84d30:	2008      	movs	r0, #8
   84d32:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   84d34:	a901      	add	r1, sp, #4
   84d36:	4620      	mov	r0, r4
   84d38:	4b4f      	ldr	r3, [pc, #316]	; (84e78 <main+0x180>)
   84d3a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   84d3c:	4d4f      	ldr	r5, [pc, #316]	; (84e7c <main+0x184>)
   84d3e:	682b      	ldr	r3, [r5, #0]
   84d40:	2100      	movs	r1, #0
   84d42:	6898      	ldr	r0, [r3, #8]
   84d44:	4c4e      	ldr	r4, [pc, #312]	; (84e80 <main+0x188>)
   84d46:	47a0      	blx	r4
	setbuf(stdin, NULL);
   84d48:	682b      	ldr	r3, [r5, #0]
   84d4a:	2100      	movs	r1, #0
   84d4c:	6858      	ldr	r0, [r3, #4]
   84d4e:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   84d50:	2101      	movs	r1, #1
   84d52:	4b4c      	ldr	r3, [pc, #304]	; (84e84 <main+0x18c>)
   84d54:	7019      	strb	r1, [r3, #0]
   84d56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d5a:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   84d5c:	4b4a      	ldr	r3, [pc, #296]	; (84e88 <main+0x190>)
   84d5e:	2200      	movs	r2, #0
   84d60:	701a      	strb	r2, [r3, #0]
   84d62:	705a      	strb	r2, [r3, #1]
   84d64:	709a      	strb	r2, [r3, #2]
   84d66:	70da      	strb	r2, [r3, #3]
   84d68:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   84d6a:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   84d6c:	4b47      	ldr	r3, [pc, #284]	; (84e8c <main+0x194>)
   84d6e:	4798      	blx	r3
	board_init();
   84d70:	4b47      	ldr	r3, [pc, #284]	; (84e90 <main+0x198>)
   84d72:	4798      	blx	r3
#else
	system_init();
#endif

	fpga_program_init();
   84d74:	4b47      	ldr	r3, [pc, #284]	; (84e94 <main+0x19c>)
   84d76:	4798      	blx	r3
	tps56520_init();
   84d78:	4b47      	ldr	r3, [pc, #284]	; (84e98 <main+0x1a0>)
   84d7a:	4798      	blx	r3
	
	//Init CDCE906 Chip
	cdce906_init();
   84d7c:	4b47      	ldr	r3, [pc, #284]	; (84e9c <main+0x1a4>)
   84d7e:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   84d80:	ac04      	add	r4, sp, #16
   84d82:	4d47      	ldr	r5, [pc, #284]	; (84ea0 <main+0x1a8>)
   84d84:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   84d88:	4f46      	ldr	r7, [pc, #280]	; (84ea4 <main+0x1ac>)
   84d8a:	4e47      	ldr	r6, [pc, #284]	; (84ea8 <main+0x1b0>)
   84d8c:	f854 2b04 	ldr.w	r2, [r4], #4
   84d90:	4639      	mov	r1, r7
   84d92:	4628      	mov	r0, r5
   84d94:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   84d96:	3508      	adds	r5, #8
   84d98:	4544      	cmp	r4, r8
   84d9a:	d1f7      	bne.n	84d8c <main+0x94>
	}
	usb_serial_number[32] = 0;
   84d9c:	4e40      	ldr	r6, [pc, #256]	; (84ea0 <main+0x1a8>)
   84d9e:	2400      	movs	r4, #0
   84da0:	f886 4020 	strb.w	r4, [r6, #32]
	
	printf("ChipWhisperer-CW305 Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   84da4:	4a41      	ldr	r2, [pc, #260]	; (84eac <main+0x1b4>)
   84da6:	4942      	ldr	r1, [pc, #264]	; (84eb0 <main+0x1b8>)
   84da8:	4842      	ldr	r0, [pc, #264]	; (84eb4 <main+0x1bc>)
   84daa:	4d43      	ldr	r5, [pc, #268]	; (84eb8 <main+0x1c0>)
   84dac:	47a8      	blx	r5
	printf("Serial number: %s\n", usb_serial_number);
   84dae:	4631      	mov	r1, r6
   84db0:	4842      	ldr	r0, [pc, #264]	; (84ebc <main+0x1c4>)
   84db2:	47a8      	blx	r5
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   84db4:	2009      	movs	r0, #9
   84db6:	4b28      	ldr	r3, [pc, #160]	; (84e58 <main+0x160>)
   84db8:	4798      	blx	r3
	fpga_pins(true);
   84dba:	2001      	movs	r0, #1
   84dbc:	4f40      	ldr	r7, [pc, #256]	; (84ec0 <main+0x1c8>)
   84dbe:	47b8      	blx	r7
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   84dc0:	4840      	ldr	r0, [pc, #256]	; (84ec4 <main+0x1cc>)
   84dc2:	47a8      	blx	r5
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   84dc4:	4e40      	ldr	r6, [pc, #256]	; (84ec8 <main+0x1d0>)
   84dc6:	4a41      	ldr	r2, [pc, #260]	; (84ecc <main+0x1d4>)
   84dc8:	4621      	mov	r1, r4
   84dca:	4630      	mov	r0, r6
   84dcc:	4b40      	ldr	r3, [pc, #256]	; (84ed0 <main+0x1d8>)
   84dce:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(3)
   84dd0:	4a40      	ldr	r2, [pc, #256]	; (84ed4 <main+0x1dc>)
   84dd2:	4621      	mov	r1, r4
   84dd4:	4630      	mov	r0, r6
   84dd6:	4b40      	ldr	r3, [pc, #256]	; (84ed8 <main+0x1e0>)
   84dd8:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(3));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(4)
   84dda:	f04f 1204 	mov.w	r2, #262148	; 0x40004
   84dde:	4621      	mov	r1, r4
   84de0:	4630      	mov	r0, r6
   84de2:	4b3e      	ldr	r3, [pc, #248]	; (84edc <main+0x1e4>)
   84de4:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   84de6:	2203      	movs	r2, #3
   84de8:	4621      	mov	r1, r4
   84dea:	4630      	mov	r0, r6
   84dec:	4b3c      	ldr	r3, [pc, #240]	; (84ee0 <main+0x1e8>)
   84dee:	4798      	blx	r3
        | SMC_MODE_DBW_BIT_8);
	
	
	ui_init();
   84df0:	4b3c      	ldr	r3, [pc, #240]	; (84ee4 <main+0x1ec>)
   84df2:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   84df4:	4b3c      	ldr	r3, [pc, #240]	; (84ee8 <main+0x1f0>)
   84df6:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   84df8:	4b3c      	ldr	r3, [pc, #240]	; (84eec <main+0x1f4>)
   84dfa:	2204      	movs	r2, #4
   84dfc:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   84dfe:	4620      	mov	r0, r4
   84e00:	4b3b      	ldr	r3, [pc, #236]	; (84ef0 <main+0x1f8>)
   84e02:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");	
   84e04:	483b      	ldr	r0, [pc, #236]	; (84ef4 <main+0x1fc>)
   84e06:	47a8      	blx	r5
	
	//Turn off FPGA pins for now, will be enabled in event loop
	fpga_pins(false);
   84e08:	4620      	mov	r0, r4
   84e0a:	47b8      	blx	r7
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
   84e0c:	4c1d      	ldr	r4, [pc, #116]	; (84e84 <main+0x18c>)
   84e0e:	2700      	movs	r7, #0
   84e10:	463e      	mov	r6, r7
	while (!(*lock_ptr)) {
   84e12:	4d1d      	ldr	r5, [pc, #116]	; (84e88 <main+0x190>)
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   84e14:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 84efc <main+0x204>
   84e18:	e006      	b.n	84e28 <main+0x130>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
   84e1a:	2301      	movs	r3, #1
   84e1c:	7023      	strb	r3, [r4, #0]
   84e1e:	f3bf 8f5f 	dmb	sy
   84e22:	b662      	cpsie	i
		
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
		sleepmgr_enter_sleep();
		process_events();
   84e24:	4b34      	ldr	r3, [pc, #208]	; (84ef8 <main+0x200>)
   84e26:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   84e28:	b672      	cpsid	i
   84e2a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e2e:	7026      	strb	r6, [r4, #0]
	while (!(*lock_ptr)) {
   84e30:	7828      	ldrb	r0, [r5, #0]
   84e32:	2800      	cmp	r0, #0
   84e34:	d1f1      	bne.n	84e1a <main+0x122>
   84e36:	4b14      	ldr	r3, [pc, #80]	; (84e88 <main+0x190>)
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   84e38:	3001      	adds	r0, #1
   84e3a:	b2c0      	uxtb	r0, r0
	while (!(*lock_ptr)) {
   84e3c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   84e40:	2a00      	cmp	r2, #0
   84e42:	d0f9      	beq.n	84e38 <main+0x140>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   84e44:	2800      	cmp	r0, #0
   84e46:	d0e8      	beq.n	84e1a <main+0x122>
   84e48:	b672      	cpsid	i
   84e4a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e4e:	7027      	strb	r7, [r4, #0]
	pmc_sleep(sleep_mode);
   84e50:	47c0      	blx	r8
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   84e52:	e7e7      	b.n	84e24 <main+0x12c>
   84e54:	00081fbd 	.word	0x00081fbd
   84e58:	00082f1d 	.word	0x00082f1d
   84e5c:	400e0600 	.word	0x400e0600
   84e60:	20001bf8 	.word	0x20001bf8
   84e64:	20001bf4 	.word	0x20001bf4
   84e68:	000849e5 	.word	0x000849e5
   84e6c:	20001bf0 	.word	0x20001bf0
   84e70:	00084941 	.word	0x00084941
   84e74:	05b8d800 	.word	0x05b8d800
   84e78:	000846c9 	.word	0x000846c9
   84e7c:	200003ac 	.word	0x200003ac
   84e80:	00085149 	.word	0x00085149
   84e84:	20000382 	.word	0x20000382
   84e88:	20001be8 	.word	0x20001be8
   84e8c:	000820d5 	.word	0x000820d5
   84e90:	00080151 	.word	0x00080151
   84e94:	00080631 	.word	0x00080631
   84e98:	000814d1 	.word	0x000814d1
   84e9c:	0008055d 	.word	0x0008055d
   84ea0:	20000388 	.word	0x20000388
   84ea4:	0008be44 	.word	0x0008be44
   84ea8:	000852f9 	.word	0x000852f9
   84eac:	0008be4c 	.word	0x0008be4c
   84eb0:	0008be58 	.word	0x0008be58
   84eb4:	0008be64 	.word	0x0008be64
   84eb8:	00084f95 	.word	0x00084f95
   84ebc:	0008be98 	.word	0x0008be98
   84ec0:	00084a81 	.word	0x00084a81
   84ec4:	0008beac 	.word	0x0008beac
   84ec8:	400e0000 	.word	0x400e0000
   84ecc:	01010100 	.word	0x01010100
   84ed0:	00082a9d 	.word	0x00082a9d
   84ed4:	03030103 	.word	0x03030103
   84ed8:	00082aa9 	.word	0x00082aa9
   84edc:	00082ab5 	.word	0x00082ab5
   84ee0:	00082ac1 	.word	0x00082ac1
   84ee4:	00082009 	.word	0x00082009
   84ee8:	0008239d 	.word	0x0008239d
   84eec:	400e0400 	.word	0x400e0400
   84ef0:	00082f75 	.word	0x00082f75
   84ef4:	0008becc 	.word	0x0008becc
   84ef8:	000813b1 	.word	0x000813b1
   84efc:	00082fcd 	.word	0x00082fcd

00084f00 <do_task>:

/*
Can insert regular tasks here if needed
*/
void do_task(void)
{
   84f00:	b508      	push	{r3, lr}
	static bool last_power_state = false;
	
	//If change in external state pin
	if (board_get_powerstate() != last_power_state){
   84f02:	203e      	movs	r0, #62	; 0x3e
   84f04:	4b0e      	ldr	r3, [pc, #56]	; (84f40 <do_task+0x40>)
   84f06:	4798      	blx	r3
   84f08:	3800      	subs	r0, #0
   84f0a:	bf18      	it	ne
   84f0c:	2001      	movne	r0, #1
   84f0e:	4b0d      	ldr	r3, [pc, #52]	; (84f44 <do_task+0x44>)
   84f10:	781b      	ldrb	r3, [r3, #0]
   84f12:	4298      	cmp	r0, r3
   84f14:	d100      	bne.n	84f18 <do_task+0x18>
		}
		
		//Record new state
		last_power_state = board_get_powerstate();
	}
}
   84f16:	bd08      	pop	{r3, pc}
		if (board_get_powerstate()){
   84f18:	203e      	movs	r0, #62	; 0x3e
   84f1a:	4b09      	ldr	r3, [pc, #36]	; (84f40 <do_task+0x40>)
   84f1c:	4798      	blx	r3
   84f1e:	b158      	cbz	r0, 84f38 <do_task+0x38>
			fpga_pins(true);
   84f20:	2001      	movs	r0, #1
   84f22:	4b09      	ldr	r3, [pc, #36]	; (84f48 <do_task+0x48>)
   84f24:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   84f26:	203e      	movs	r0, #62	; 0x3e
   84f28:	4b05      	ldr	r3, [pc, #20]	; (84f40 <do_task+0x40>)
   84f2a:	4798      	blx	r3
   84f2c:	3800      	subs	r0, #0
   84f2e:	bf18      	it	ne
   84f30:	2001      	movne	r0, #1
   84f32:	4b04      	ldr	r3, [pc, #16]	; (84f44 <do_task+0x44>)
   84f34:	7018      	strb	r0, [r3, #0]
}
   84f36:	e7ee      	b.n	84f16 <do_task+0x16>
			fpga_pins(false);
   84f38:	2000      	movs	r0, #0
   84f3a:	4b03      	ldr	r3, [pc, #12]	; (84f48 <do_task+0x48>)
   84f3c:	4798      	blx	r3
   84f3e:	e7f2      	b.n	84f26 <do_task+0x26>
   84f40:	00082b6b 	.word	0x00082b6b
   84f44:	20001458 	.word	0x20001458
   84f48:	00084a81 	.word	0x00084a81

00084f4c <__libc_init_array>:
   84f4c:	b570      	push	{r4, r5, r6, lr}
   84f4e:	4e0d      	ldr	r6, [pc, #52]	; (84f84 <__libc_init_array+0x38>)
   84f50:	4d0d      	ldr	r5, [pc, #52]	; (84f88 <__libc_init_array+0x3c>)
   84f52:	1b76      	subs	r6, r6, r5
   84f54:	10b6      	asrs	r6, r6, #2
   84f56:	d006      	beq.n	84f66 <__libc_init_array+0x1a>
   84f58:	2400      	movs	r4, #0
   84f5a:	f855 3b04 	ldr.w	r3, [r5], #4
   84f5e:	3401      	adds	r4, #1
   84f60:	4798      	blx	r3
   84f62:	42a6      	cmp	r6, r4
   84f64:	d1f9      	bne.n	84f5a <__libc_init_array+0xe>
   84f66:	4e09      	ldr	r6, [pc, #36]	; (84f8c <__libc_init_array+0x40>)
   84f68:	4d09      	ldr	r5, [pc, #36]	; (84f90 <__libc_init_array+0x44>)
   84f6a:	f007 f9bd 	bl	8c2e8 <_init>
   84f6e:	1b76      	subs	r6, r6, r5
   84f70:	10b6      	asrs	r6, r6, #2
   84f72:	d006      	beq.n	84f82 <__libc_init_array+0x36>
   84f74:	2400      	movs	r4, #0
   84f76:	f855 3b04 	ldr.w	r3, [r5], #4
   84f7a:	3401      	adds	r4, #1
   84f7c:	4798      	blx	r3
   84f7e:	42a6      	cmp	r6, r4
   84f80:	d1f9      	bne.n	84f76 <__libc_init_array+0x2a>
   84f82:	bd70      	pop	{r4, r5, r6, pc}
   84f84:	0008c2f4 	.word	0x0008c2f4
   84f88:	0008c2f4 	.word	0x0008c2f4
   84f8c:	0008c2fc 	.word	0x0008c2fc
   84f90:	0008c2f4 	.word	0x0008c2f4

00084f94 <iprintf>:
   84f94:	b40f      	push	{r0, r1, r2, r3}
   84f96:	b500      	push	{lr}
   84f98:	4907      	ldr	r1, [pc, #28]	; (84fb8 <iprintf+0x24>)
   84f9a:	b083      	sub	sp, #12
   84f9c:	ab04      	add	r3, sp, #16
   84f9e:	6808      	ldr	r0, [r1, #0]
   84fa0:	f853 2b04 	ldr.w	r2, [r3], #4
   84fa4:	6881      	ldr	r1, [r0, #8]
   84fa6:	9301      	str	r3, [sp, #4]
   84fa8:	f001 ffac 	bl	86f04 <_vfiprintf_r>
   84fac:	b003      	add	sp, #12
   84fae:	f85d eb04 	ldr.w	lr, [sp], #4
   84fb2:	b004      	add	sp, #16
   84fb4:	4770      	bx	lr
   84fb6:	bf00      	nop
   84fb8:	200003ac 	.word	0x200003ac

00084fbc <memcpy>:
   84fbc:	4684      	mov	ip, r0
   84fbe:	ea41 0300 	orr.w	r3, r1, r0
   84fc2:	f013 0303 	ands.w	r3, r3, #3
   84fc6:	d149      	bne.n	8505c <memcpy+0xa0>
   84fc8:	3a40      	subs	r2, #64	; 0x40
   84fca:	d323      	bcc.n	85014 <memcpy+0x58>
   84fcc:	680b      	ldr	r3, [r1, #0]
   84fce:	6003      	str	r3, [r0, #0]
   84fd0:	684b      	ldr	r3, [r1, #4]
   84fd2:	6043      	str	r3, [r0, #4]
   84fd4:	688b      	ldr	r3, [r1, #8]
   84fd6:	6083      	str	r3, [r0, #8]
   84fd8:	68cb      	ldr	r3, [r1, #12]
   84fda:	60c3      	str	r3, [r0, #12]
   84fdc:	690b      	ldr	r3, [r1, #16]
   84fde:	6103      	str	r3, [r0, #16]
   84fe0:	694b      	ldr	r3, [r1, #20]
   84fe2:	6143      	str	r3, [r0, #20]
   84fe4:	698b      	ldr	r3, [r1, #24]
   84fe6:	6183      	str	r3, [r0, #24]
   84fe8:	69cb      	ldr	r3, [r1, #28]
   84fea:	61c3      	str	r3, [r0, #28]
   84fec:	6a0b      	ldr	r3, [r1, #32]
   84fee:	6203      	str	r3, [r0, #32]
   84ff0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84ff2:	6243      	str	r3, [r0, #36]	; 0x24
   84ff4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84ff6:	6283      	str	r3, [r0, #40]	; 0x28
   84ff8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84ffa:	62c3      	str	r3, [r0, #44]	; 0x2c
   84ffc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84ffe:	6303      	str	r3, [r0, #48]	; 0x30
   85000:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85002:	6343      	str	r3, [r0, #52]	; 0x34
   85004:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85006:	6383      	str	r3, [r0, #56]	; 0x38
   85008:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8500a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8500c:	3040      	adds	r0, #64	; 0x40
   8500e:	3140      	adds	r1, #64	; 0x40
   85010:	3a40      	subs	r2, #64	; 0x40
   85012:	d2db      	bcs.n	84fcc <memcpy+0x10>
   85014:	3230      	adds	r2, #48	; 0x30
   85016:	d30b      	bcc.n	85030 <memcpy+0x74>
   85018:	680b      	ldr	r3, [r1, #0]
   8501a:	6003      	str	r3, [r0, #0]
   8501c:	684b      	ldr	r3, [r1, #4]
   8501e:	6043      	str	r3, [r0, #4]
   85020:	688b      	ldr	r3, [r1, #8]
   85022:	6083      	str	r3, [r0, #8]
   85024:	68cb      	ldr	r3, [r1, #12]
   85026:	60c3      	str	r3, [r0, #12]
   85028:	3010      	adds	r0, #16
   8502a:	3110      	adds	r1, #16
   8502c:	3a10      	subs	r2, #16
   8502e:	d2f3      	bcs.n	85018 <memcpy+0x5c>
   85030:	320c      	adds	r2, #12
   85032:	d305      	bcc.n	85040 <memcpy+0x84>
   85034:	f851 3b04 	ldr.w	r3, [r1], #4
   85038:	f840 3b04 	str.w	r3, [r0], #4
   8503c:	3a04      	subs	r2, #4
   8503e:	d2f9      	bcs.n	85034 <memcpy+0x78>
   85040:	3204      	adds	r2, #4
   85042:	d008      	beq.n	85056 <memcpy+0x9a>
   85044:	07d2      	lsls	r2, r2, #31
   85046:	bf1c      	itt	ne
   85048:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8504c:	f800 3b01 	strbne.w	r3, [r0], #1
   85050:	d301      	bcc.n	85056 <memcpy+0x9a>
   85052:	880b      	ldrh	r3, [r1, #0]
   85054:	8003      	strh	r3, [r0, #0]
   85056:	4660      	mov	r0, ip
   85058:	4770      	bx	lr
   8505a:	bf00      	nop
   8505c:	2a08      	cmp	r2, #8
   8505e:	d313      	bcc.n	85088 <memcpy+0xcc>
   85060:	078b      	lsls	r3, r1, #30
   85062:	d0b1      	beq.n	84fc8 <memcpy+0xc>
   85064:	f010 0303 	ands.w	r3, r0, #3
   85068:	d0ae      	beq.n	84fc8 <memcpy+0xc>
   8506a:	f1c3 0304 	rsb	r3, r3, #4
   8506e:	1ad2      	subs	r2, r2, r3
   85070:	07db      	lsls	r3, r3, #31
   85072:	bf1c      	itt	ne
   85074:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85078:	f800 3b01 	strbne.w	r3, [r0], #1
   8507c:	d3a4      	bcc.n	84fc8 <memcpy+0xc>
   8507e:	f831 3b02 	ldrh.w	r3, [r1], #2
   85082:	f820 3b02 	strh.w	r3, [r0], #2
   85086:	e79f      	b.n	84fc8 <memcpy+0xc>
   85088:	3a04      	subs	r2, #4
   8508a:	d3d9      	bcc.n	85040 <memcpy+0x84>
   8508c:	3a01      	subs	r2, #1
   8508e:	f811 3b01 	ldrb.w	r3, [r1], #1
   85092:	f800 3b01 	strb.w	r3, [r0], #1
   85096:	d2f9      	bcs.n	8508c <memcpy+0xd0>
   85098:	780b      	ldrb	r3, [r1, #0]
   8509a:	7003      	strb	r3, [r0, #0]
   8509c:	784b      	ldrb	r3, [r1, #1]
   8509e:	7043      	strb	r3, [r0, #1]
   850a0:	788b      	ldrb	r3, [r1, #2]
   850a2:	7083      	strb	r3, [r0, #2]
   850a4:	4660      	mov	r0, ip
   850a6:	4770      	bx	lr

000850a8 <memset>:
   850a8:	b4f0      	push	{r4, r5, r6, r7}
   850aa:	0786      	lsls	r6, r0, #30
   850ac:	d046      	beq.n	8513c <memset+0x94>
   850ae:	1e54      	subs	r4, r2, #1
   850b0:	2a00      	cmp	r2, #0
   850b2:	d03c      	beq.n	8512e <memset+0x86>
   850b4:	4603      	mov	r3, r0
   850b6:	b2ca      	uxtb	r2, r1
   850b8:	e001      	b.n	850be <memset+0x16>
   850ba:	3c01      	subs	r4, #1
   850bc:	d337      	bcc.n	8512e <memset+0x86>
   850be:	f803 2b01 	strb.w	r2, [r3], #1
   850c2:	079d      	lsls	r5, r3, #30
   850c4:	d1f9      	bne.n	850ba <memset+0x12>
   850c6:	2c03      	cmp	r4, #3
   850c8:	d92a      	bls.n	85120 <memset+0x78>
   850ca:	b2cd      	uxtb	r5, r1
   850cc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   850d0:	2c0f      	cmp	r4, #15
   850d2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   850d6:	d934      	bls.n	85142 <memset+0x9a>
   850d8:	f1a4 0210 	sub.w	r2, r4, #16
   850dc:	f022 0c0f 	bic.w	ip, r2, #15
   850e0:	f103 0720 	add.w	r7, r3, #32
   850e4:	0916      	lsrs	r6, r2, #4
   850e6:	4467      	add	r7, ip
   850e8:	f103 0210 	add.w	r2, r3, #16
   850ec:	e942 5504 	strd	r5, r5, [r2, #-16]
   850f0:	e942 5502 	strd	r5, r5, [r2, #-8]
   850f4:	3210      	adds	r2, #16
   850f6:	42ba      	cmp	r2, r7
   850f8:	d1f8      	bne.n	850ec <memset+0x44>
   850fa:	1c72      	adds	r2, r6, #1
   850fc:	f014 0f0c 	tst.w	r4, #12
   85100:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85104:	f004 060f 	and.w	r6, r4, #15
   85108:	d013      	beq.n	85132 <memset+0x8a>
   8510a:	1f33      	subs	r3, r6, #4
   8510c:	f023 0303 	bic.w	r3, r3, #3
   85110:	3304      	adds	r3, #4
   85112:	4413      	add	r3, r2
   85114:	f842 5b04 	str.w	r5, [r2], #4
   85118:	4293      	cmp	r3, r2
   8511a:	d1fb      	bne.n	85114 <memset+0x6c>
   8511c:	f006 0403 	and.w	r4, r6, #3
   85120:	b12c      	cbz	r4, 8512e <memset+0x86>
   85122:	b2ca      	uxtb	r2, r1
   85124:	441c      	add	r4, r3
   85126:	f803 2b01 	strb.w	r2, [r3], #1
   8512a:	429c      	cmp	r4, r3
   8512c:	d1fb      	bne.n	85126 <memset+0x7e>
   8512e:	bcf0      	pop	{r4, r5, r6, r7}
   85130:	4770      	bx	lr
   85132:	4634      	mov	r4, r6
   85134:	4613      	mov	r3, r2
   85136:	2c00      	cmp	r4, #0
   85138:	d1f3      	bne.n	85122 <memset+0x7a>
   8513a:	e7f8      	b.n	8512e <memset+0x86>
   8513c:	4614      	mov	r4, r2
   8513e:	4603      	mov	r3, r0
   85140:	e7c1      	b.n	850c6 <memset+0x1e>
   85142:	461a      	mov	r2, r3
   85144:	4626      	mov	r6, r4
   85146:	e7e0      	b.n	8510a <memset+0x62>

00085148 <setbuf>:
   85148:	2900      	cmp	r1, #0
   8514a:	bf0c      	ite	eq
   8514c:	2202      	moveq	r2, #2
   8514e:	2200      	movne	r2, #0
   85150:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85154:	f000 b800 	b.w	85158 <setvbuf>

00085158 <setvbuf>:
   85158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8515c:	4d65      	ldr	r5, [pc, #404]	; (852f4 <setvbuf+0x19c>)
   8515e:	4604      	mov	r4, r0
   85160:	f8d5 9000 	ldr.w	r9, [r5]
   85164:	460f      	mov	r7, r1
   85166:	4690      	mov	r8, r2
   85168:	461e      	mov	r6, r3
   8516a:	b083      	sub	sp, #12
   8516c:	f1b9 0f00 	cmp.w	r9, #0
   85170:	d003      	beq.n	8517a <setvbuf+0x22>
   85172:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   85176:	2b00      	cmp	r3, #0
   85178:	d079      	beq.n	8526e <setvbuf+0x116>
   8517a:	f1b8 0f02 	cmp.w	r8, #2
   8517e:	d006      	beq.n	8518e <setvbuf+0x36>
   85180:	f1b8 0f01 	cmp.w	r8, #1
   85184:	f200 80a3 	bhi.w	852ce <setvbuf+0x176>
   85188:	2e00      	cmp	r6, #0
   8518a:	f2c0 80a0 	blt.w	852ce <setvbuf+0x176>
   8518e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85190:	07d9      	lsls	r1, r3, #31
   85192:	d552      	bpl.n	8523a <setvbuf+0xe2>
   85194:	4621      	mov	r1, r4
   85196:	4648      	mov	r0, r9
   85198:	f003 fe92 	bl	88ec0 <_fflush_r>
   8519c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8519e:	b141      	cbz	r1, 851b2 <setvbuf+0x5a>
   851a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   851a4:	4299      	cmp	r1, r3
   851a6:	d002      	beq.n	851ae <setvbuf+0x56>
   851a8:	4648      	mov	r0, r9
   851aa:	f004 f809 	bl	891c0 <_free_r>
   851ae:	2300      	movs	r3, #0
   851b0:	6323      	str	r3, [r4, #48]	; 0x30
   851b2:	2300      	movs	r3, #0
   851b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   851b8:	61a3      	str	r3, [r4, #24]
   851ba:	6063      	str	r3, [r4, #4]
   851bc:	062b      	lsls	r3, r5, #24
   851be:	d465      	bmi.n	8528c <setvbuf+0x134>
   851c0:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   851c4:	f025 0503 	bic.w	r5, r5, #3
   851c8:	f1b8 0f02 	cmp.w	r8, #2
   851cc:	81a5      	strh	r5, [r4, #12]
   851ce:	d064      	beq.n	8529a <setvbuf+0x142>
   851d0:	ab01      	add	r3, sp, #4
   851d2:	466a      	mov	r2, sp
   851d4:	4621      	mov	r1, r4
   851d6:	4648      	mov	r0, r9
   851d8:	f004 faa4 	bl	89724 <__swhatbuf_r>
   851dc:	89a3      	ldrh	r3, [r4, #12]
   851de:	4318      	orrs	r0, r3
   851e0:	81a0      	strh	r0, [r4, #12]
   851e2:	2e00      	cmp	r6, #0
   851e4:	d030      	beq.n	85248 <setvbuf+0xf0>
   851e6:	2f00      	cmp	r7, #0
   851e8:	d02f      	beq.n	8524a <setvbuf+0xf2>
   851ea:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   851ee:	2b00      	cmp	r3, #0
   851f0:	d039      	beq.n	85266 <setvbuf+0x10e>
   851f2:	9b00      	ldr	r3, [sp, #0]
   851f4:	e9c4 7604 	strd	r7, r6, [r4, #16]
   851f8:	42b3      	cmp	r3, r6
   851fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   851fe:	6027      	str	r7, [r4, #0]
   85200:	bf1c      	itt	ne
   85202:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   85206:	81a3      	strhne	r3, [r4, #12]
   85208:	f1b8 0f01 	cmp.w	r8, #1
   8520c:	bf04      	itt	eq
   8520e:	f043 0301 	orreq.w	r3, r3, #1
   85212:	81a3      	strheq	r3, [r4, #12]
   85214:	b29a      	uxth	r2, r3
   85216:	f013 0308 	ands.w	r3, r3, #8
   8521a:	d02c      	beq.n	85276 <setvbuf+0x11e>
   8521c:	07d1      	lsls	r1, r2, #31
   8521e:	d554      	bpl.n	852ca <setvbuf+0x172>
   85220:	2100      	movs	r1, #0
   85222:	4276      	negs	r6, r6
   85224:	61a6      	str	r6, [r4, #24]
   85226:	6e66      	ldr	r6, [r4, #100]	; 0x64
   85228:	60a1      	str	r1, [r4, #8]
   8522a:	f016 0601 	ands.w	r6, r6, #1
   8522e:	d027      	beq.n	85280 <setvbuf+0x128>
   85230:	2600      	movs	r6, #0
   85232:	4630      	mov	r0, r6
   85234:	b003      	add	sp, #12
   85236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8523a:	89a3      	ldrh	r3, [r4, #12]
   8523c:	059a      	lsls	r2, r3, #22
   8523e:	d4a9      	bmi.n	85194 <setvbuf+0x3c>
   85240:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85242:	f004 fa6b 	bl	8971c <__retarget_lock_acquire_recursive>
   85246:	e7a5      	b.n	85194 <setvbuf+0x3c>
   85248:	9e00      	ldr	r6, [sp, #0]
   8524a:	4630      	mov	r0, r6
   8524c:	f004 fae2 	bl	89814 <malloc>
   85250:	4607      	mov	r7, r0
   85252:	2800      	cmp	r0, #0
   85254:	d03e      	beq.n	852d4 <setvbuf+0x17c>
   85256:	89a3      	ldrh	r3, [r4, #12]
   85258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8525c:	81a3      	strh	r3, [r4, #12]
   8525e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   85262:	2b00      	cmp	r3, #0
   85264:	d1c5      	bne.n	851f2 <setvbuf+0x9a>
   85266:	4648      	mov	r0, r9
   85268:	f003 fe86 	bl	88f78 <__sinit>
   8526c:	e7c1      	b.n	851f2 <setvbuf+0x9a>
   8526e:	4648      	mov	r0, r9
   85270:	f003 fe82 	bl	88f78 <__sinit>
   85274:	e781      	b.n	8517a <setvbuf+0x22>
   85276:	60a3      	str	r3, [r4, #8]
   85278:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8527a:	f016 0601 	ands.w	r6, r6, #1
   8527e:	d1d7      	bne.n	85230 <setvbuf+0xd8>
   85280:	0593      	lsls	r3, r2, #22
   85282:	d51b      	bpl.n	852bc <setvbuf+0x164>
   85284:	4630      	mov	r0, r6
   85286:	b003      	add	sp, #12
   85288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8528c:	4648      	mov	r0, r9
   8528e:	6921      	ldr	r1, [r4, #16]
   85290:	f003 ff96 	bl	891c0 <_free_r>
   85294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   85298:	e792      	b.n	851c0 <setvbuf+0x68>
   8529a:	2600      	movs	r6, #0
   8529c:	2300      	movs	r3, #0
   8529e:	2101      	movs	r1, #1
   852a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   852a2:	f045 0502 	orr.w	r5, r5, #2
   852a6:	60a3      	str	r3, [r4, #8]
   852a8:	07d7      	lsls	r7, r2, #31
   852aa:	f104 0343 	add.w	r3, r4, #67	; 0x43
   852ae:	81a5      	strh	r5, [r4, #12]
   852b0:	6161      	str	r1, [r4, #20]
   852b2:	6023      	str	r3, [r4, #0]
   852b4:	6123      	str	r3, [r4, #16]
   852b6:	d4e5      	bmi.n	85284 <setvbuf+0x12c>
   852b8:	05a8      	lsls	r0, r5, #22
   852ba:	d4e3      	bmi.n	85284 <setvbuf+0x12c>
   852bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   852be:	f004 fa2f 	bl	89720 <__retarget_lock_release_recursive>
   852c2:	4630      	mov	r0, r6
   852c4:	b003      	add	sp, #12
   852c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   852ca:	60a6      	str	r6, [r4, #8]
   852cc:	e7d4      	b.n	85278 <setvbuf+0x120>
   852ce:	f04f 36ff 	mov.w	r6, #4294967295
   852d2:	e7d7      	b.n	85284 <setvbuf+0x12c>
   852d4:	9d00      	ldr	r5, [sp, #0]
   852d6:	42b5      	cmp	r5, r6
   852d8:	d004      	beq.n	852e4 <setvbuf+0x18c>
   852da:	4628      	mov	r0, r5
   852dc:	f004 fa9a 	bl	89814 <malloc>
   852e0:	4607      	mov	r7, r0
   852e2:	b920      	cbnz	r0, 852ee <setvbuf+0x196>
   852e4:	f04f 36ff 	mov.w	r6, #4294967295
   852e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   852ec:	e7d6      	b.n	8529c <setvbuf+0x144>
   852ee:	462e      	mov	r6, r5
   852f0:	e7b1      	b.n	85256 <setvbuf+0xfe>
   852f2:	bf00      	nop
   852f4:	200003ac 	.word	0x200003ac

000852f8 <sprintf>:
   852f8:	b40e      	push	{r1, r2, r3}
   852fa:	4601      	mov	r1, r0
   852fc:	b530      	push	{r4, r5, lr}
   852fe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   85302:	b09c      	sub	sp, #112	; 0x70
   85304:	ab1f      	add	r3, sp, #124	; 0x7c
   85306:	480b      	ldr	r0, [pc, #44]	; (85334 <sprintf+0x3c>)
   85308:	f853 2b04 	ldr.w	r2, [r3], #4
   8530c:	4d0a      	ldr	r5, [pc, #40]	; (85338 <sprintf+0x40>)
   8530e:	9102      	str	r1, [sp, #8]
   85310:	9106      	str	r1, [sp, #24]
   85312:	6800      	ldr	r0, [r0, #0]
   85314:	a902      	add	r1, sp, #8
   85316:	9301      	str	r3, [sp, #4]
   85318:	e9cd 4504 	strd	r4, r5, [sp, #16]
   8531c:	9407      	str	r4, [sp, #28]
   8531e:	f000 f80d 	bl	8533c <_svfprintf_r>
   85322:	2200      	movs	r2, #0
   85324:	9b02      	ldr	r3, [sp, #8]
   85326:	701a      	strb	r2, [r3, #0]
   85328:	b01c      	add	sp, #112	; 0x70
   8532a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8532e:	b003      	add	sp, #12
   85330:	4770      	bx	lr
   85332:	bf00      	nop
   85334:	200003ac 	.word	0x200003ac
   85338:	ffff0208 	.word	0xffff0208

0008533c <_svfprintf_r>:
   8533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85340:	b0d7      	sub	sp, #348	; 0x15c
   85342:	468b      	mov	fp, r1
   85344:	4617      	mov	r7, r2
   85346:	930e      	str	r3, [sp, #56]	; 0x38
   85348:	4681      	mov	r9, r0
   8534a:	f004 f9df 	bl	8970c <_localeconv_r>
   8534e:	6803      	ldr	r3, [r0, #0]
   85350:	4618      	mov	r0, r3
   85352:	9318      	str	r3, [sp, #96]	; 0x60
   85354:	f005 fbdc 	bl	8ab10 <strlen>
   85358:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8535c:	9017      	str	r0, [sp, #92]	; 0x5c
   8535e:	061d      	lsls	r5, r3, #24
   85360:	d504      	bpl.n	8536c <_svfprintf_r+0x30>
   85362:	f8db 3010 	ldr.w	r3, [fp, #16]
   85366:	2b00      	cmp	r3, #0
   85368:	f000 87df 	beq.w	8632a <_svfprintf_r+0xfee>
   8536c:	2300      	movs	r3, #0
   8536e:	2100      	movs	r1, #0
   85370:	2200      	movs	r2, #0
   85372:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   85376:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   8537a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   8537e:	9313      	str	r3, [sp, #76]	; 0x4c
   85380:	9319      	str	r3, [sp, #100]	; 0x64
   85382:	930a      	str	r3, [sp, #40]	; 0x28
   85384:	ab2d      	add	r3, sp, #180	; 0xb4
   85386:	4698      	mov	r8, r3
   85388:	932a      	str	r3, [sp, #168]	; 0xa8
   8538a:	783b      	ldrb	r3, [r7, #0]
   8538c:	46da      	mov	sl, fp
   8538e:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   85392:	2b00      	cmp	r3, #0
   85394:	f000 81a4 	beq.w	856e0 <_svfprintf_r+0x3a4>
   85398:	463c      	mov	r4, r7
   8539a:	e004      	b.n	853a6 <_svfprintf_r+0x6a>
   8539c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   853a0:	2b00      	cmp	r3, #0
   853a2:	f000 80fd 	beq.w	855a0 <_svfprintf_r+0x264>
   853a6:	2b25      	cmp	r3, #37	; 0x25
   853a8:	d1f8      	bne.n	8539c <_svfprintf_r+0x60>
   853aa:	1be5      	subs	r5, r4, r7
   853ac:	f040 80fb 	bne.w	855a6 <_svfprintf_r+0x26a>
   853b0:	7823      	ldrb	r3, [r4, #0]
   853b2:	2b00      	cmp	r3, #0
   853b4:	f000 8194 	beq.w	856e0 <_svfprintf_r+0x3a4>
   853b8:	2300      	movs	r3, #0
   853ba:	930b      	str	r3, [sp, #44]	; 0x2c
   853bc:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   853c0:	9307      	str	r3, [sp, #28]
   853c2:	f04f 33ff 	mov.w	r3, #4294967295
   853c6:	7866      	ldrb	r6, [r4, #1]
   853c8:	f104 0b01 	add.w	fp, r4, #1
   853cc:	2120      	movs	r1, #32
   853ce:	242b      	movs	r4, #43	; 0x2b
   853d0:	9309      	str	r3, [sp, #36]	; 0x24
   853d2:	f10b 0b01 	add.w	fp, fp, #1
   853d6:	f1a6 0320 	sub.w	r3, r6, #32
   853da:	2b5a      	cmp	r3, #90	; 0x5a
   853dc:	f200 80ff 	bhi.w	855de <_svfprintf_r+0x2a2>
   853e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   853e4:	00fd02bc 	.word	0x00fd02bc
   853e8:	02b500fd 	.word	0x02b500fd
   853ec:	00fd00fd 	.word	0x00fd00fd
   853f0:	029100fd 	.word	0x029100fd
   853f4:	00fd00fd 	.word	0x00fd00fd
   853f8:	02e7006a 	.word	0x02e7006a
   853fc:	023400fd 	.word	0x023400fd
   85400:	00fd02cd 	.word	0x00fd02cd
   85404:	005b02c6 	.word	0x005b02c6
   85408:	005b005b 	.word	0x005b005b
   8540c:	005b005b 	.word	0x005b005b
   85410:	005b005b 	.word	0x005b005b
   85414:	005b005b 	.word	0x005b005b
   85418:	00fd00fd 	.word	0x00fd00fd
   8541c:	00fd00fd 	.word	0x00fd00fd
   85420:	00fd00fd 	.word	0x00fd00fd
   85424:	019000fd 	.word	0x019000fd
   85428:	01f700fd 	.word	0x01f700fd
   8542c:	0190007c 	.word	0x0190007c
   85430:	01900190 	.word	0x01900190
   85434:	00fd00fd 	.word	0x00fd00fd
   85438:	00fd00fd 	.word	0x00fd00fd
   8543c:	00fd028a 	.word	0x00fd028a
   85440:	00a900fd 	.word	0x00a900fd
   85444:	00fd00fd 	.word	0x00fd00fd
   85448:	020b00fd 	.word	0x020b00fd
   8544c:	023b00fd 	.word	0x023b00fd
   85450:	00fd00fd 	.word	0x00fd00fd
   85454:	00fd0781 	.word	0x00fd0781
   85458:	00fd00fd 	.word	0x00fd00fd
   8545c:	00fd00fd 	.word	0x00fd00fd
   85460:	00fd00fd 	.word	0x00fd00fd
   85464:	019000fd 	.word	0x019000fd
   85468:	01f700fd 	.word	0x01f700fd
   8546c:	01900080 	.word	0x01900080
   85470:	01900190 	.word	0x01900190
   85474:	00800280 	.word	0x00800280
   85478:	00fd0075 	.word	0x00fd0075
   8547c:	00fd0276 	.word	0x00fd0276
   85480:	00ad025e 	.word	0x00ad025e
   85484:	0075024c 	.word	0x0075024c
   85488:	020b00fd 	.word	0x020b00fd
   8548c:	075b0072 	.word	0x075b0072
   85490:	00fd00fd 	.word	0x00fd00fd
   85494:	00fd075f 	.word	0x00fd075f
   85498:	0072      	.short	0x0072
   8549a:	2200      	movs	r2, #0
   8549c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   854a0:	f81b 6b01 	ldrb.w	r6, [fp], #1
   854a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   854a8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   854ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   854b0:	2b09      	cmp	r3, #9
   854b2:	d9f5      	bls.n	854a0 <_svfprintf_r+0x164>
   854b4:	920b      	str	r2, [sp, #44]	; 0x2c
   854b6:	e78e      	b.n	853d6 <_svfprintf_r+0x9a>
   854b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   854ba:	f853 2b04 	ldr.w	r2, [r3], #4
   854be:	2a00      	cmp	r2, #0
   854c0:	920b      	str	r2, [sp, #44]	; 0x2c
   854c2:	930e      	str	r3, [sp, #56]	; 0x38
   854c4:	f2c0 81bf 	blt.w	85846 <_svfprintf_r+0x50a>
   854c8:	f89b 6000 	ldrb.w	r6, [fp]
   854cc:	e781      	b.n	853d2 <_svfprintf_r+0x96>
   854ce:	9b07      	ldr	r3, [sp, #28]
   854d0:	f89b 6000 	ldrb.w	r6, [fp]
   854d4:	f043 0320 	orr.w	r3, r3, #32
   854d8:	9307      	str	r3, [sp, #28]
   854da:	e77a      	b.n	853d2 <_svfprintf_r+0x96>
   854dc:	9b07      	ldr	r3, [sp, #28]
   854de:	f043 0310 	orr.w	r3, r3, #16
   854e2:	9307      	str	r3, [sp, #28]
   854e4:	9b07      	ldr	r3, [sp, #28]
   854e6:	069c      	lsls	r4, r3, #26
   854e8:	f140 8162 	bpl.w	857b0 <_svfprintf_r+0x474>
   854ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   854ee:	3307      	adds	r3, #7
   854f0:	f023 0307 	bic.w	r3, r3, #7
   854f4:	4619      	mov	r1, r3
   854f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   854fa:	4614      	mov	r4, r2
   854fc:	461d      	mov	r5, r3
   854fe:	910e      	str	r1, [sp, #56]	; 0x38
   85500:	2a00      	cmp	r2, #0
   85502:	f173 0300 	sbcs.w	r3, r3, #0
   85506:	f2c0 85ab 	blt.w	86060 <_svfprintf_r+0xd24>
   8550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8550c:	3301      	adds	r3, #1
   8550e:	9b07      	ldr	r3, [sp, #28]
   85510:	f000 8414 	beq.w	85d3c <_svfprintf_r+0xa00>
   85514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85518:	ea54 0205 	orrs.w	r2, r4, r5
   8551c:	9308      	str	r3, [sp, #32]
   8551e:	f040 840e 	bne.w	85d3e <_svfprintf_r+0xa02>
   85522:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85524:	2a00      	cmp	r2, #0
   85526:	f040 840f 	bne.w	85d48 <_svfprintf_r+0xa0c>
   8552a:	9307      	str	r3, [sp, #28]
   8552c:	2300      	movs	r3, #0
   8552e:	af56      	add	r7, sp, #344	; 0x158
   85530:	9309      	str	r3, [sp, #36]	; 0x24
   85532:	930c      	str	r3, [sp, #48]	; 0x30
   85534:	e26b      	b.n	85a0e <_svfprintf_r+0x6d2>
   85536:	9b07      	ldr	r3, [sp, #28]
   85538:	f043 0310 	orr.w	r3, r3, #16
   8553c:	9307      	str	r3, [sp, #28]
   8553e:	9b07      	ldr	r3, [sp, #28]
   85540:	069a      	lsls	r2, r3, #26
   85542:	f140 8126 	bpl.w	85792 <_svfprintf_r+0x456>
   85546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85548:	3307      	adds	r3, #7
   8554a:	f023 0307 	bic.w	r3, r3, #7
   8554e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   85552:	930e      	str	r3, [sp, #56]	; 0x38
   85554:	9b07      	ldr	r3, [sp, #28]
   85556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   8555a:	9308      	str	r3, [sp, #32]
   8555c:	2300      	movs	r3, #0
   8555e:	2200      	movs	r2, #0
   85560:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   85564:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85566:	4611      	mov	r1, r2
   85568:	3101      	adds	r1, #1
   8556a:	f000 8231 	beq.w	859d0 <_svfprintf_r+0x694>
   8556e:	9908      	ldr	r1, [sp, #32]
   85570:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   85574:	9107      	str	r1, [sp, #28]
   85576:	ea54 0105 	orrs.w	r1, r4, r5
   8557a:	f040 8227 	bne.w	859cc <_svfprintf_r+0x690>
   8557e:	2a00      	cmp	r2, #0
   85580:	f040 837d 	bne.w	85c7e <_svfprintf_r+0x942>
   85584:	2b00      	cmp	r3, #0
   85586:	d1d1      	bne.n	8552c <_svfprintf_r+0x1f0>
   85588:	9b08      	ldr	r3, [sp, #32]
   8558a:	f013 0301 	ands.w	r3, r3, #1
   8558e:	930c      	str	r3, [sp, #48]	; 0x30
   85590:	f000 8590 	beq.w	860b4 <_svfprintf_r+0xd78>
   85594:	2330      	movs	r3, #48	; 0x30
   85596:	f20d 1757 	addw	r7, sp, #343	; 0x157
   8559a:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   8559e:	e236      	b.n	85a0e <_svfprintf_r+0x6d2>
   855a0:	1be5      	subs	r5, r4, r7
   855a2:	f000 809d 	beq.w	856e0 <_svfprintf_r+0x3a4>
   855a6:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   855aa:	3301      	adds	r3, #1
   855ac:	442a      	add	r2, r5
   855ae:	2b07      	cmp	r3, #7
   855b0:	e9c8 7500 	strd	r7, r5, [r8]
   855b4:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   855b8:	dc06      	bgt.n	855c8 <_svfprintf_r+0x28c>
   855ba:	f108 0808 	add.w	r8, r8, #8
   855be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   855c0:	7823      	ldrb	r3, [r4, #0]
   855c2:	442a      	add	r2, r5
   855c4:	920a      	str	r2, [sp, #40]	; 0x28
   855c6:	e6f4      	b.n	853b2 <_svfprintf_r+0x76>
   855c8:	4651      	mov	r1, sl
   855ca:	4648      	mov	r0, r9
   855cc:	aa2a      	add	r2, sp, #168	; 0xa8
   855ce:	f005 fb01 	bl	8abd4 <__ssprint_r>
   855d2:	2800      	cmp	r0, #0
   855d4:	f041 83ce 	bne.w	86d74 <_svfprintf_r+0x1a38>
   855d8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   855dc:	e7ef      	b.n	855be <_svfprintf_r+0x282>
   855de:	2e00      	cmp	r6, #0
   855e0:	d07e      	beq.n	856e0 <_svfprintf_r+0x3a4>
   855e2:	2300      	movs	r3, #0
   855e4:	2101      	movs	r1, #1
   855e6:	461a      	mov	r2, r3
   855e8:	9108      	str	r1, [sp, #32]
   855ea:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   855ee:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   855f2:	930d      	str	r3, [sp, #52]	; 0x34
   855f4:	9309      	str	r3, [sp, #36]	; 0x24
   855f6:	9312      	str	r3, [sp, #72]	; 0x48
   855f8:	9316      	str	r3, [sp, #88]	; 0x58
   855fa:	9310      	str	r3, [sp, #64]	; 0x40
   855fc:	910c      	str	r1, [sp, #48]	; 0x30
   855fe:	af3d      	add	r7, sp, #244	; 0xf4
   85600:	9b07      	ldr	r3, [sp, #28]
   85602:	f013 0302 	ands.w	r3, r3, #2
   85606:	d002      	beq.n	8560e <_svfprintf_r+0x2d2>
   85608:	9908      	ldr	r1, [sp, #32]
   8560a:	3102      	adds	r1, #2
   8560c:	9108      	str	r1, [sp, #32]
   8560e:	9907      	ldr	r1, [sp, #28]
   85610:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   85614:	910f      	str	r1, [sp, #60]	; 0x3c
   85616:	d105      	bne.n	85624 <_svfprintf_r+0x2e8>
   85618:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8561a:	9808      	ldr	r0, [sp, #32]
   8561c:	1a0d      	subs	r5, r1, r0
   8561e:	2d00      	cmp	r5, #0
   85620:	f300 834b 	bgt.w	85cba <_svfprintf_r+0x97e>
   85624:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85626:	b172      	cbz	r2, 85646 <_svfprintf_r+0x30a>
   85628:	2001      	movs	r0, #1
   8562a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8562c:	4404      	add	r4, r0
   8562e:	4402      	add	r2, r0
   85630:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   85634:	2a07      	cmp	r2, #7
   85636:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8563a:	e9c8 1000 	strd	r1, r0, [r8]
   8563e:	f300 83cd 	bgt.w	85ddc <_svfprintf_r+0xaa0>
   85642:	f108 0808 	add.w	r8, r8, #8
   85646:	b16b      	cbz	r3, 85664 <_svfprintf_r+0x328>
   85648:	2102      	movs	r1, #2
   8564a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8564c:	440c      	add	r4, r1
   8564e:	3301      	adds	r3, #1
   85650:	aa23      	add	r2, sp, #140	; 0x8c
   85652:	2b07      	cmp	r3, #7
   85654:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85658:	e9c8 2100 	strd	r2, r1, [r8]
   8565c:	f300 83cc 	bgt.w	85df8 <_svfprintf_r+0xabc>
   85660:	f108 0808 	add.w	r8, r8, #8
   85664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85666:	2b80      	cmp	r3, #128	; 0x80
   85668:	f000 8234 	beq.w	85ad4 <_svfprintf_r+0x798>
   8566c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8566e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85670:	1a9d      	subs	r5, r3, r2
   85672:	2d00      	cmp	r5, #0
   85674:	f300 826e 	bgt.w	85b54 <_svfprintf_r+0x818>
   85678:	9b07      	ldr	r3, [sp, #28]
   8567a:	05d9      	lsls	r1, r3, #23
   8567c:	f100 81d5 	bmi.w	85a2a <_svfprintf_r+0x6ee>
   85680:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85684:	3301      	adds	r3, #1
   85686:	4414      	add	r4, r2
   85688:	2b07      	cmp	r3, #7
   8568a:	e9c8 7200 	strd	r7, r2, [r8]
   8568e:	942c      	str	r4, [sp, #176]	; 0xb0
   85690:	932b      	str	r3, [sp, #172]	; 0xac
   85692:	f300 8397 	bgt.w	85dc4 <_svfprintf_r+0xa88>
   85696:	f108 0808 	add.w	r8, r8, #8
   8569a:	9b07      	ldr	r3, [sp, #28]
   8569c:	0759      	lsls	r1, r3, #29
   8569e:	d505      	bpl.n	856ac <_svfprintf_r+0x370>
   856a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   856a2:	9a08      	ldr	r2, [sp, #32]
   856a4:	1a9d      	subs	r5, r3, r2
   856a6:	2d00      	cmp	r5, #0
   856a8:	f300 83b2 	bgt.w	85e10 <_svfprintf_r+0xad4>
   856ac:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   856b0:	9908      	ldr	r1, [sp, #32]
   856b2:	428a      	cmp	r2, r1
   856b4:	bfac      	ite	ge
   856b6:	189b      	addge	r3, r3, r2
   856b8:	185b      	addlt	r3, r3, r1
   856ba:	930a      	str	r3, [sp, #40]	; 0x28
   856bc:	2c00      	cmp	r4, #0
   856be:	f040 827d 	bne.w	85bbc <_svfprintf_r+0x880>
   856c2:	2300      	movs	r3, #0
   856c4:	932b      	str	r3, [sp, #172]	; 0xac
   856c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   856c8:	b11b      	cbz	r3, 856d2 <_svfprintf_r+0x396>
   856ca:	4648      	mov	r0, r9
   856cc:	990d      	ldr	r1, [sp, #52]	; 0x34
   856ce:	f003 fd77 	bl	891c0 <_free_r>
   856d2:	465f      	mov	r7, fp
   856d4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   856d8:	783b      	ldrb	r3, [r7, #0]
   856da:	2b00      	cmp	r3, #0
   856dc:	f47f ae5c 	bne.w	85398 <_svfprintf_r+0x5c>
   856e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   856e2:	46d3      	mov	fp, sl
   856e4:	2b00      	cmp	r3, #0
   856e6:	f041 824b 	bne.w	86b80 <_svfprintf_r+0x1844>
   856ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   856ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   856f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   856f4:	bf18      	it	ne
   856f6:	f04f 33ff 	movne.w	r3, #4294967295
   856fa:	930a      	str	r3, [sp, #40]	; 0x28
   856fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   856fe:	b057      	add	sp, #348	; 0x15c
   85700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85706:	3307      	adds	r3, #7
   85708:	f023 0307 	bic.w	r3, r3, #7
   8570c:	4619      	mov	r1, r3
   8570e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   85712:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   85716:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   8571a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   8571e:	461d      	mov	r5, r3
   85720:	4618      	mov	r0, r3
   85722:	910e      	str	r1, [sp, #56]	; 0x38
   85724:	f04f 32ff 	mov.w	r2, #4294967295
   85728:	4621      	mov	r1, r4
   8572a:	4ba4      	ldr	r3, [pc, #656]	; (859bc <_svfprintf_r+0x680>)
   8572c:	f006 f986 	bl	8ba3c <__aeabi_dcmpun>
   85730:	2800      	cmp	r0, #0
   85732:	f040 84d9 	bne.w	860e8 <_svfprintf_r+0xdac>
   85736:	4628      	mov	r0, r5
   85738:	4621      	mov	r1, r4
   8573a:	f04f 32ff 	mov.w	r2, #4294967295
   8573e:	4b9f      	ldr	r3, [pc, #636]	; (859bc <_svfprintf_r+0x680>)
   85740:	f006 f95e 	bl	8ba00 <__aeabi_dcmple>
   85744:	2800      	cmp	r0, #0
   85746:	f040 84cf 	bne.w	860e8 <_svfprintf_r+0xdac>
   8574a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8574e:	2200      	movs	r2, #0
   85750:	2300      	movs	r3, #0
   85752:	f006 f94b 	bl	8b9ec <__aeabi_dcmplt>
   85756:	2800      	cmp	r0, #0
   85758:	f041 800e 	bne.w	86778 <_svfprintf_r+0x143c>
   8575c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85760:	2003      	movs	r0, #3
   85762:	2100      	movs	r1, #0
   85764:	4f96      	ldr	r7, [pc, #600]	; (859c0 <_svfprintf_r+0x684>)
   85766:	4b97      	ldr	r3, [pc, #604]	; (859c4 <_svfprintf_r+0x688>)
   85768:	9008      	str	r0, [sp, #32]
   8576a:	910d      	str	r1, [sp, #52]	; 0x34
   8576c:	2e47      	cmp	r6, #71	; 0x47
   8576e:	bfc8      	it	gt
   85770:	461f      	movgt	r7, r3
   85772:	9c07      	ldr	r4, [sp, #28]
   85774:	900c      	str	r0, [sp, #48]	; 0x30
   85776:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   8577a:	9407      	str	r4, [sp, #28]
   8577c:	9109      	str	r1, [sp, #36]	; 0x24
   8577e:	9112      	str	r1, [sp, #72]	; 0x48
   85780:	9116      	str	r1, [sp, #88]	; 0x58
   85782:	9110      	str	r1, [sp, #64]	; 0x40
   85784:	2a00      	cmp	r2, #0
   85786:	f43f af3b 	beq.w	85600 <_svfprintf_r+0x2c4>
   8578a:	9b08      	ldr	r3, [sp, #32]
   8578c:	3301      	adds	r3, #1
   8578e:	9308      	str	r3, [sp, #32]
   85790:	e736      	b.n	85600 <_svfprintf_r+0x2c4>
   85792:	9b07      	ldr	r3, [sp, #28]
   85794:	06db      	lsls	r3, r3, #27
   85796:	f100 849c 	bmi.w	860d2 <_svfprintf_r+0xd96>
   8579a:	9b07      	ldr	r3, [sp, #28]
   8579c:	065f      	lsls	r7, r3, #25
   8579e:	f140 87b2 	bpl.w	86706 <_svfprintf_r+0x13ca>
   857a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   857a4:	2500      	movs	r5, #0
   857a6:	f853 4b04 	ldr.w	r4, [r3], #4
   857aa:	930e      	str	r3, [sp, #56]	; 0x38
   857ac:	b2a4      	uxth	r4, r4
   857ae:	e6d1      	b.n	85554 <_svfprintf_r+0x218>
   857b0:	9b07      	ldr	r3, [sp, #28]
   857b2:	06d8      	lsls	r0, r3, #27
   857b4:	f100 8568 	bmi.w	86288 <_svfprintf_r+0xf4c>
   857b8:	9b07      	ldr	r3, [sp, #28]
   857ba:	0659      	lsls	r1, r3, #25
   857bc:	f140 87be 	bpl.w	8673c <_svfprintf_r+0x1400>
   857c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   857c2:	f853 4b04 	ldr.w	r4, [r3], #4
   857c6:	b224      	sxth	r4, r4
   857c8:	17e5      	asrs	r5, r4, #31
   857ca:	930e      	str	r3, [sp, #56]	; 0x38
   857cc:	4622      	mov	r2, r4
   857ce:	462b      	mov	r3, r5
   857d0:	e696      	b.n	85500 <_svfprintf_r+0x1c4>
   857d2:	2100      	movs	r1, #0
   857d4:	2401      	movs	r4, #1
   857d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   857d8:	460a      	mov	r2, r1
   857da:	f853 0b04 	ldr.w	r0, [r3], #4
   857de:	9408      	str	r4, [sp, #32]
   857e0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   857e4:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   857e8:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   857ec:	9109      	str	r1, [sp, #36]	; 0x24
   857ee:	9112      	str	r1, [sp, #72]	; 0x48
   857f0:	9116      	str	r1, [sp, #88]	; 0x58
   857f2:	9110      	str	r1, [sp, #64]	; 0x40
   857f4:	940c      	str	r4, [sp, #48]	; 0x30
   857f6:	af3d      	add	r7, sp, #244	; 0xf4
   857f8:	e702      	b.n	85600 <_svfprintf_r+0x2c4>
   857fa:	2500      	movs	r5, #0
   857fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   857fe:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   85802:	f854 7b04 	ldr.w	r7, [r4], #4
   85806:	2f00      	cmp	r7, #0
   85808:	f000 859f 	beq.w	8634a <_svfprintf_r+0x100e>
   8580c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8580e:	4613      	mov	r3, r2
   85810:	3301      	adds	r3, #1
   85812:	f000 8770 	beq.w	866f6 <_svfprintf_r+0x13ba>
   85816:	4629      	mov	r1, r5
   85818:	4638      	mov	r0, r7
   8581a:	f004 fac7 	bl	89dac <memchr>
   8581e:	900d      	str	r0, [sp, #52]	; 0x34
   85820:	2800      	cmp	r0, #0
   85822:	f001 80b9 	beq.w	86998 <_svfprintf_r+0x165c>
   85826:	462b      	mov	r3, r5
   85828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8582a:	9509      	str	r5, [sp, #36]	; 0x24
   8582c:	1bd2      	subs	r2, r2, r7
   8582e:	920c      	str	r2, [sp, #48]	; 0x30
   85830:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   85834:	9208      	str	r2, [sp, #32]
   85836:	940e      	str	r4, [sp, #56]	; 0x38
   85838:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8583c:	930d      	str	r3, [sp, #52]	; 0x34
   8583e:	9312      	str	r3, [sp, #72]	; 0x48
   85840:	9316      	str	r3, [sp, #88]	; 0x58
   85842:	9310      	str	r3, [sp, #64]	; 0x40
   85844:	e79e      	b.n	85784 <_svfprintf_r+0x448>
   85846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85848:	425b      	negs	r3, r3
   8584a:	930b      	str	r3, [sp, #44]	; 0x2c
   8584c:	9b07      	ldr	r3, [sp, #28]
   8584e:	f89b 6000 	ldrb.w	r6, [fp]
   85852:	f043 0304 	orr.w	r3, r3, #4
   85856:	9307      	str	r3, [sp, #28]
   85858:	e5bb      	b.n	853d2 <_svfprintf_r+0x96>
   8585a:	9b07      	ldr	r3, [sp, #28]
   8585c:	f043 0310 	orr.w	r3, r3, #16
   85860:	9308      	str	r3, [sp, #32]
   85862:	9b08      	ldr	r3, [sp, #32]
   85864:	069d      	lsls	r5, r3, #26
   85866:	f140 83ea 	bpl.w	8603e <_svfprintf_r+0xd02>
   8586a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8586c:	3307      	adds	r3, #7
   8586e:	f023 0307 	bic.w	r3, r3, #7
   85872:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   85876:	930e      	str	r3, [sp, #56]	; 0x38
   85878:	2301      	movs	r3, #1
   8587a:	e670      	b.n	8555e <_svfprintf_r+0x222>
   8587c:	f647 0230 	movw	r2, #30768	; 0x7830
   85880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85882:	9907      	ldr	r1, [sp, #28]
   85884:	f853 4b04 	ldr.w	r4, [r3], #4
   85888:	f041 0102 	orr.w	r1, r1, #2
   8588c:	930e      	str	r3, [sp, #56]	; 0x38
   8588e:	4b4e      	ldr	r3, [pc, #312]	; (859c8 <_svfprintf_r+0x68c>)
   85890:	2500      	movs	r5, #0
   85892:	9319      	str	r3, [sp, #100]	; 0x64
   85894:	2678      	movs	r6, #120	; 0x78
   85896:	2302      	movs	r3, #2
   85898:	9108      	str	r1, [sp, #32]
   8589a:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   8589e:	e65e      	b.n	8555e <_svfprintf_r+0x222>
   858a0:	9b07      	ldr	r3, [sp, #28]
   858a2:	069d      	lsls	r5, r3, #26
   858a4:	f100 8408 	bmi.w	860b8 <_svfprintf_r+0xd7c>
   858a8:	9b07      	ldr	r3, [sp, #28]
   858aa:	06dc      	lsls	r4, r3, #27
   858ac:	f100 86e1 	bmi.w	86672 <_svfprintf_r+0x1336>
   858b0:	9b07      	ldr	r3, [sp, #28]
   858b2:	0658      	lsls	r0, r3, #25
   858b4:	f100 8795 	bmi.w	867e2 <_svfprintf_r+0x14a6>
   858b8:	9b07      	ldr	r3, [sp, #28]
   858ba:	0599      	lsls	r1, r3, #22
   858bc:	f140 86d9 	bpl.w	86672 <_svfprintf_r+0x1336>
   858c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   858c2:	990a      	ldr	r1, [sp, #40]	; 0x28
   858c4:	f853 2b04 	ldr.w	r2, [r3], #4
   858c8:	465f      	mov	r7, fp
   858ca:	7011      	strb	r1, [r2, #0]
   858cc:	930e      	str	r3, [sp, #56]	; 0x38
   858ce:	e703      	b.n	856d8 <_svfprintf_r+0x39c>
   858d0:	f89b 6000 	ldrb.w	r6, [fp]
   858d4:	9b07      	ldr	r3, [sp, #28]
   858d6:	2e6c      	cmp	r6, #108	; 0x6c
   858d8:	f000 8508 	beq.w	862ec <_svfprintf_r+0xfb0>
   858dc:	f043 0310 	orr.w	r3, r3, #16
   858e0:	9307      	str	r3, [sp, #28]
   858e2:	e576      	b.n	853d2 <_svfprintf_r+0x96>
   858e4:	f89b 6000 	ldrb.w	r6, [fp]
   858e8:	9b07      	ldr	r3, [sp, #28]
   858ea:	2e68      	cmp	r6, #104	; 0x68
   858ec:	f000 8507 	beq.w	862fe <_svfprintf_r+0xfc2>
   858f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   858f4:	9307      	str	r3, [sp, #28]
   858f6:	e56c      	b.n	853d2 <_svfprintf_r+0x96>
   858f8:	9b07      	ldr	r3, [sp, #28]
   858fa:	f89b 6000 	ldrb.w	r6, [fp]
   858fe:	f043 0308 	orr.w	r3, r3, #8
   85902:	9307      	str	r3, [sp, #28]
   85904:	e565      	b.n	853d2 <_svfprintf_r+0x96>
   85906:	4648      	mov	r0, r9
   85908:	f003 ff00 	bl	8970c <_localeconv_r>
   8590c:	6843      	ldr	r3, [r0, #4]
   8590e:	4618      	mov	r0, r3
   85910:	931c      	str	r3, [sp, #112]	; 0x70
   85912:	f005 f8fd 	bl	8ab10 <strlen>
   85916:	4603      	mov	r3, r0
   85918:	4648      	mov	r0, r9
   8591a:	461d      	mov	r5, r3
   8591c:	931d      	str	r3, [sp, #116]	; 0x74
   8591e:	f003 fef5 	bl	8970c <_localeconv_r>
   85922:	6882      	ldr	r2, [r0, #8]
   85924:	2120      	movs	r1, #32
   85926:	921a      	str	r2, [sp, #104]	; 0x68
   85928:	2d00      	cmp	r5, #0
   8592a:	f43f adcd 	beq.w	854c8 <_svfprintf_r+0x18c>
   8592e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85930:	2b00      	cmp	r3, #0
   85932:	f43f adc9 	beq.w	854c8 <_svfprintf_r+0x18c>
   85936:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   85938:	781b      	ldrb	r3, [r3, #0]
   8593a:	2b00      	cmp	r3, #0
   8593c:	f43f adc4 	beq.w	854c8 <_svfprintf_r+0x18c>
   85940:	9b07      	ldr	r3, [sp, #28]
   85942:	f89b 6000 	ldrb.w	r6, [fp]
   85946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8594a:	9307      	str	r3, [sp, #28]
   8594c:	e541      	b.n	853d2 <_svfprintf_r+0x96>
   8594e:	9b07      	ldr	r3, [sp, #28]
   85950:	f89b 6000 	ldrb.w	r6, [fp]
   85954:	f043 0301 	orr.w	r3, r3, #1
   85958:	9307      	str	r3, [sp, #28]
   8595a:	e53a      	b.n	853d2 <_svfprintf_r+0x96>
   8595c:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   85960:	2b00      	cmp	r3, #0
   85962:	f47f adb1 	bne.w	854c8 <_svfprintf_r+0x18c>
   85966:	f89b 6000 	ldrb.w	r6, [fp]
   8596a:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   8596e:	e530      	b.n	853d2 <_svfprintf_r+0x96>
   85970:	9b07      	ldr	r3, [sp, #28]
   85972:	f89b 6000 	ldrb.w	r6, [fp]
   85976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8597a:	9307      	str	r3, [sp, #28]
   8597c:	e529      	b.n	853d2 <_svfprintf_r+0x96>
   8597e:	465a      	mov	r2, fp
   85980:	f812 6b01 	ldrb.w	r6, [r2], #1
   85984:	2e2a      	cmp	r6, #42	; 0x2a
   85986:	f001 8251 	beq.w	86e2c <_svfprintf_r+0x1af0>
   8598a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8598e:	2b09      	cmp	r3, #9
   85990:	4693      	mov	fp, r2
   85992:	bf98      	it	ls
   85994:	2200      	movls	r2, #0
   85996:	f201 80ef 	bhi.w	86b78 <_svfprintf_r+0x183c>
   8599a:	f81b 6b01 	ldrb.w	r6, [fp], #1
   8599e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   859a2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   859a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   859aa:	2b09      	cmp	r3, #9
   859ac:	d9f5      	bls.n	8599a <_svfprintf_r+0x65e>
   859ae:	9209      	str	r2, [sp, #36]	; 0x24
   859b0:	e511      	b.n	853d6 <_svfprintf_r+0x9a>
   859b2:	f89b 6000 	ldrb.w	r6, [fp]
   859b6:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   859ba:	e50a      	b.n	853d2 <_svfprintf_r+0x96>
   859bc:	7fefffff 	.word	0x7fefffff
   859c0:	0008bef0 	.word	0x0008bef0
   859c4:	0008bef4 	.word	0x0008bef4
   859c8:	0008bf00 	.word	0x0008bf00
   859cc:	9a07      	ldr	r2, [sp, #28]
   859ce:	9208      	str	r2, [sp, #32]
   859d0:	2b01      	cmp	r3, #1
   859d2:	f000 81b4 	beq.w	85d3e <_svfprintf_r+0xa02>
   859d6:	2b02      	cmp	r3, #2
   859d8:	f000 8159 	beq.w	85c8e <_svfprintf_r+0x952>
   859dc:	af56      	add	r7, sp, #344	; 0x158
   859de:	08e2      	lsrs	r2, r4, #3
   859e0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   859e4:	08e9      	lsrs	r1, r5, #3
   859e6:	f004 0307 	and.w	r3, r4, #7
   859ea:	460d      	mov	r5, r1
   859ec:	4614      	mov	r4, r2
   859ee:	3330      	adds	r3, #48	; 0x30
   859f0:	ea54 0105 	orrs.w	r1, r4, r5
   859f4:	463a      	mov	r2, r7
   859f6:	f807 3d01 	strb.w	r3, [r7, #-1]!
   859fa:	d1f0      	bne.n	859de <_svfprintf_r+0x6a2>
   859fc:	9908      	ldr	r1, [sp, #32]
   859fe:	4608      	mov	r0, r1
   85a00:	07c0      	lsls	r0, r0, #31
   85a02:	f100 82b8 	bmi.w	85f76 <_svfprintf_r+0xc3a>
   85a06:	ab56      	add	r3, sp, #344	; 0x158
   85a08:	1bdb      	subs	r3, r3, r7
   85a0a:	9107      	str	r1, [sp, #28]
   85a0c:	930c      	str	r3, [sp, #48]	; 0x30
   85a0e:	2300      	movs	r3, #0
   85a10:	9909      	ldr	r1, [sp, #36]	; 0x24
   85a12:	930d      	str	r3, [sp, #52]	; 0x34
   85a14:	9312      	str	r3, [sp, #72]	; 0x48
   85a16:	9316      	str	r3, [sp, #88]	; 0x58
   85a18:	9310      	str	r3, [sp, #64]	; 0x40
   85a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85a1c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85a20:	428b      	cmp	r3, r1
   85a22:	bfb8      	it	lt
   85a24:	460b      	movlt	r3, r1
   85a26:	9308      	str	r3, [sp, #32]
   85a28:	e6ac      	b.n	85784 <_svfprintf_r+0x448>
   85a2a:	2e65      	cmp	r6, #101	; 0x65
   85a2c:	f340 80d8 	ble.w	85be0 <_svfprintf_r+0x8a4>
   85a30:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85a34:	2200      	movs	r2, #0
   85a36:	2300      	movs	r3, #0
   85a38:	f005 ffce 	bl	8b9d8 <__aeabi_dcmpeq>
   85a3c:	2800      	cmp	r0, #0
   85a3e:	f000 821e 	beq.w	85e7e <_svfprintf_r+0xb42>
   85a42:	2101      	movs	r1, #1
   85a44:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85a46:	4ac5      	ldr	r2, [pc, #788]	; (85d5c <_svfprintf_r+0xa20>)
   85a48:	440b      	add	r3, r1
   85a4a:	440c      	add	r4, r1
   85a4c:	2b07      	cmp	r3, #7
   85a4e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85a52:	e9c8 2100 	strd	r2, r1, [r8]
   85a56:	f300 85bb 	bgt.w	865d0 <_svfprintf_r+0x1294>
   85a5a:	f108 0808 	add.w	r8, r8, #8
   85a5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85a60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85a62:	4293      	cmp	r3, r2
   85a64:	f280 8321 	bge.w	860aa <_svfprintf_r+0xd6e>
   85a68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85a6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85a6c:	3301      	adds	r3, #1
   85a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   85a70:	4414      	add	r4, r2
   85a72:	2b07      	cmp	r3, #7
   85a74:	e9c8 1200 	strd	r1, r2, [r8]
   85a78:	942c      	str	r4, [sp, #176]	; 0xb0
   85a7a:	932b      	str	r3, [sp, #172]	; 0xac
   85a7c:	f300 8448 	bgt.w	86310 <_svfprintf_r+0xfd4>
   85a80:	f108 0808 	add.w	r8, r8, #8
   85a84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85a86:	1e5d      	subs	r5, r3, #1
   85a88:	2d00      	cmp	r5, #0
   85a8a:	f77f ae06 	ble.w	8569a <_svfprintf_r+0x35e>
   85a8e:	2d10      	cmp	r5, #16
   85a90:	f340 85c7 	ble.w	86622 <_svfprintf_r+0x12e6>
   85a94:	4fb2      	ldr	r7, [pc, #712]	; (85d60 <_svfprintf_r+0xa24>)
   85a96:	2610      	movs	r6, #16
   85a98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85a9a:	970f      	str	r7, [sp, #60]	; 0x3c
   85a9c:	e005      	b.n	85aaa <_svfprintf_r+0x76e>
   85a9e:	f108 0808 	add.w	r8, r8, #8
   85aa2:	3d10      	subs	r5, #16
   85aa4:	2d10      	cmp	r5, #16
   85aa6:	f340 85bf 	ble.w	86628 <_svfprintf_r+0x12ec>
   85aaa:	3301      	adds	r3, #1
   85aac:	3410      	adds	r4, #16
   85aae:	2b07      	cmp	r3, #7
   85ab0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85ab4:	e9c8 7600 	strd	r7, r6, [r8]
   85ab8:	ddf1      	ble.n	85a9e <_svfprintf_r+0x762>
   85aba:	4651      	mov	r1, sl
   85abc:	4648      	mov	r0, r9
   85abe:	aa2a      	add	r2, sp, #168	; 0xa8
   85ac0:	f005 f888 	bl	8abd4 <__ssprint_r>
   85ac4:	2800      	cmp	r0, #0
   85ac6:	f040 8081 	bne.w	85bcc <_svfprintf_r+0x890>
   85aca:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85ace:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85ad2:	e7e6      	b.n	85aa2 <_svfprintf_r+0x766>
   85ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85ad6:	9a08      	ldr	r2, [sp, #32]
   85ad8:	1a9d      	subs	r5, r3, r2
   85ada:	2d00      	cmp	r5, #0
   85adc:	f77f adc6 	ble.w	8566c <_svfprintf_r+0x330>
   85ae0:	2d10      	cmp	r5, #16
   85ae2:	f341 8069 	ble.w	86bb8 <_svfprintf_r+0x187c>
   85ae6:	489e      	ldr	r0, [pc, #632]	; (85d60 <_svfprintf_r+0xa24>)
   85ae8:	4621      	mov	r1, r4
   85aea:	2310      	movs	r3, #16
   85aec:	4604      	mov	r4, r0
   85aee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85af0:	900f      	str	r0, [sp, #60]	; 0x3c
   85af2:	e004      	b.n	85afe <_svfprintf_r+0x7c2>
   85af4:	3d10      	subs	r5, #16
   85af6:	2d10      	cmp	r5, #16
   85af8:	f108 0808 	add.w	r8, r8, #8
   85afc:	dd17      	ble.n	85b2e <_svfprintf_r+0x7f2>
   85afe:	3201      	adds	r2, #1
   85b00:	3110      	adds	r1, #16
   85b02:	2a07      	cmp	r2, #7
   85b04:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   85b08:	e9c8 4300 	strd	r4, r3, [r8]
   85b0c:	ddf2      	ble.n	85af4 <_svfprintf_r+0x7b8>
   85b0e:	4651      	mov	r1, sl
   85b10:	4648      	mov	r0, r9
   85b12:	aa2a      	add	r2, sp, #168	; 0xa8
   85b14:	f005 f85e 	bl	8abd4 <__ssprint_r>
   85b18:	2800      	cmp	r0, #0
   85b1a:	d157      	bne.n	85bcc <_svfprintf_r+0x890>
   85b1c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85b20:	3d10      	subs	r5, #16
   85b22:	2d10      	cmp	r5, #16
   85b24:	f04f 0310 	mov.w	r3, #16
   85b28:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85b2c:	dce7      	bgt.n	85afe <_svfprintf_r+0x7c2>
   85b2e:	460c      	mov	r4, r1
   85b30:	3201      	adds	r2, #1
   85b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85b34:	442c      	add	r4, r5
   85b36:	2a07      	cmp	r2, #7
   85b38:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   85b3c:	e9c8 3500 	strd	r3, r5, [r8]
   85b40:	f300 858a 	bgt.w	86658 <_svfprintf_r+0x131c>
   85b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85b48:	f108 0808 	add.w	r8, r8, #8
   85b4c:	1a9d      	subs	r5, r3, r2
   85b4e:	2d00      	cmp	r5, #0
   85b50:	f77f ad92 	ble.w	85678 <_svfprintf_r+0x33c>
   85b54:	2d10      	cmp	r5, #16
   85b56:	f340 860a 	ble.w	8676e <_svfprintf_r+0x1432>
   85b5a:	4881      	ldr	r0, [pc, #516]	; (85d60 <_svfprintf_r+0xa24>)
   85b5c:	4621      	mov	r1, r4
   85b5e:	2310      	movs	r3, #16
   85b60:	4604      	mov	r4, r0
   85b62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85b64:	900f      	str	r0, [sp, #60]	; 0x3c
   85b66:	e004      	b.n	85b72 <_svfprintf_r+0x836>
   85b68:	3d10      	subs	r5, #16
   85b6a:	2d10      	cmp	r5, #16
   85b6c:	f108 0808 	add.w	r8, r8, #8
   85b70:	dd16      	ble.n	85ba0 <_svfprintf_r+0x864>
   85b72:	3201      	adds	r2, #1
   85b74:	3110      	adds	r1, #16
   85b76:	2a07      	cmp	r2, #7
   85b78:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   85b7c:	e9c8 4300 	strd	r4, r3, [r8]
   85b80:	ddf2      	ble.n	85b68 <_svfprintf_r+0x82c>
   85b82:	4651      	mov	r1, sl
   85b84:	4648      	mov	r0, r9
   85b86:	aa2a      	add	r2, sp, #168	; 0xa8
   85b88:	f005 f824 	bl	8abd4 <__ssprint_r>
   85b8c:	b9f0      	cbnz	r0, 85bcc <_svfprintf_r+0x890>
   85b8e:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85b92:	3d10      	subs	r5, #16
   85b94:	2d10      	cmp	r5, #16
   85b96:	f04f 0310 	mov.w	r3, #16
   85b9a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85b9e:	dce8      	bgt.n	85b72 <_svfprintf_r+0x836>
   85ba0:	460c      	mov	r4, r1
   85ba2:	3201      	adds	r2, #1
   85ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85ba6:	442c      	add	r4, r5
   85ba8:	2a07      	cmp	r2, #7
   85baa:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   85bae:	e9c8 3500 	strd	r3, r5, [r8]
   85bb2:	f300 8237 	bgt.w	86024 <_svfprintf_r+0xce8>
   85bb6:	f108 0808 	add.w	r8, r8, #8
   85bba:	e55d      	b.n	85678 <_svfprintf_r+0x33c>
   85bbc:	4651      	mov	r1, sl
   85bbe:	4648      	mov	r0, r9
   85bc0:	aa2a      	add	r2, sp, #168	; 0xa8
   85bc2:	f005 f807 	bl	8abd4 <__ssprint_r>
   85bc6:	2800      	cmp	r0, #0
   85bc8:	f43f ad7b 	beq.w	856c2 <_svfprintf_r+0x386>
   85bcc:	46d3      	mov	fp, sl
   85bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85bd0:	2b00      	cmp	r3, #0
   85bd2:	f43f ad8a 	beq.w	856ea <_svfprintf_r+0x3ae>
   85bd6:	4648      	mov	r0, r9
   85bd8:	990d      	ldr	r1, [sp, #52]	; 0x34
   85bda:	f003 faf1 	bl	891c0 <_free_r>
   85bde:	e584      	b.n	856ea <_svfprintf_r+0x3ae>
   85be0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85be2:	2b01      	cmp	r3, #1
   85be4:	f340 81d5 	ble.w	85f92 <_svfprintf_r+0xc56>
   85be8:	2301      	movs	r3, #1
   85bea:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   85bec:	441c      	add	r4, r3
   85bee:	441d      	add	r5, r3
   85bf0:	2d07      	cmp	r5, #7
   85bf2:	942c      	str	r4, [sp, #176]	; 0xb0
   85bf4:	f8c8 7000 	str.w	r7, [r8]
   85bf8:	952b      	str	r5, [sp, #172]	; 0xac
   85bfa:	f8c8 3004 	str.w	r3, [r8, #4]
   85bfe:	f300 823a 	bgt.w	86076 <_svfprintf_r+0xd3a>
   85c02:	f108 0808 	add.w	r8, r8, #8
   85c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   85c08:	3501      	adds	r5, #1
   85c0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   85c0c:	441c      	add	r4, r3
   85c0e:	2d07      	cmp	r5, #7
   85c10:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85c14:	e9c8 2300 	strd	r2, r3, [r8]
   85c18:	f300 823a 	bgt.w	86090 <_svfprintf_r+0xd54>
   85c1c:	f108 0808 	add.w	r8, r8, #8
   85c20:	2300      	movs	r3, #0
   85c22:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85c26:	2200      	movs	r2, #0
   85c28:	f005 fed6 	bl	8b9d8 <__aeabi_dcmpeq>
   85c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   85c2e:	2800      	cmp	r0, #0
   85c30:	f040 81cd 	bne.w	85fce <_svfprintf_r+0xc92>
   85c34:	3b01      	subs	r3, #1
   85c36:	3501      	adds	r5, #1
   85c38:	3701      	adds	r7, #1
   85c3a:	441c      	add	r4, r3
   85c3c:	2d07      	cmp	r5, #7
   85c3e:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85c42:	f8c8 7000 	str.w	r7, [r8]
   85c46:	f8c8 3004 	str.w	r3, [r8, #4]
   85c4a:	f300 84dc 	bgt.w	86606 <_svfprintf_r+0x12ca>
   85c4e:	f108 0808 	add.w	r8, r8, #8
   85c52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   85c54:	3501      	adds	r5, #1
   85c56:	4414      	add	r4, r2
   85c58:	ab26      	add	r3, sp, #152	; 0x98
   85c5a:	2d07      	cmp	r5, #7
   85c5c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   85c60:	e9c8 3200 	strd	r3, r2, [r8]
   85c64:	f77f ad17 	ble.w	85696 <_svfprintf_r+0x35a>
   85c68:	4651      	mov	r1, sl
   85c6a:	4648      	mov	r0, r9
   85c6c:	aa2a      	add	r2, sp, #168	; 0xa8
   85c6e:	f004 ffb1 	bl	8abd4 <__ssprint_r>
   85c72:	2800      	cmp	r0, #0
   85c74:	d1aa      	bne.n	85bcc <_svfprintf_r+0x890>
   85c76:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85c78:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85c7c:	e50d      	b.n	8569a <_svfprintf_r+0x35e>
   85c7e:	2b01      	cmp	r3, #1
   85c80:	f000 87ca 	beq.w	86c18 <_svfprintf_r+0x18dc>
   85c84:	2b02      	cmp	r3, #2
   85c86:	9b07      	ldr	r3, [sp, #28]
   85c88:	9308      	str	r3, [sp, #32]
   85c8a:	f47f aea7 	bne.w	859dc <_svfprintf_r+0x6a0>
   85c8e:	9819      	ldr	r0, [sp, #100]	; 0x64
   85c90:	af56      	add	r7, sp, #344	; 0x158
   85c92:	0923      	lsrs	r3, r4, #4
   85c94:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85c98:	0929      	lsrs	r1, r5, #4
   85c9a:	f004 020f 	and.w	r2, r4, #15
   85c9e:	460d      	mov	r5, r1
   85ca0:	461c      	mov	r4, r3
   85ca2:	5c83      	ldrb	r3, [r0, r2]
   85ca4:	f807 3d01 	strb.w	r3, [r7, #-1]!
   85ca8:	ea54 0305 	orrs.w	r3, r4, r5
   85cac:	d1f1      	bne.n	85c92 <_svfprintf_r+0x956>
   85cae:	9b08      	ldr	r3, [sp, #32]
   85cb0:	9307      	str	r3, [sp, #28]
   85cb2:	ab56      	add	r3, sp, #344	; 0x158
   85cb4:	1bdb      	subs	r3, r3, r7
   85cb6:	930c      	str	r3, [sp, #48]	; 0x30
   85cb8:	e6a9      	b.n	85a0e <_svfprintf_r+0x6d2>
   85cba:	2d10      	cmp	r5, #16
   85cbc:	f340 8668 	ble.w	86990 <_svfprintf_r+0x1654>
   85cc0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   85cc4:	931e      	str	r3, [sp, #120]	; 0x78
   85cc6:	460b      	mov	r3, r1
   85cc8:	4639      	mov	r1, r7
   85cca:	2410      	movs	r4, #16
   85ccc:	4637      	mov	r7, r6
   85cce:	4656      	mov	r6, sl
   85cd0:	46ca      	mov	sl, r9
   85cd2:	4689      	mov	r9, r1
   85cd4:	e004      	b.n	85ce0 <_svfprintf_r+0x9a4>
   85cd6:	3d10      	subs	r5, #16
   85cd8:	2d10      	cmp	r5, #16
   85cda:	f108 0808 	add.w	r8, r8, #8
   85cde:	dd17      	ble.n	85d10 <_svfprintf_r+0x9d4>
   85ce0:	3201      	adds	r2, #1
   85ce2:	4920      	ldr	r1, [pc, #128]	; (85d64 <_svfprintf_r+0xa28>)
   85ce4:	3310      	adds	r3, #16
   85ce6:	2a07      	cmp	r2, #7
   85ce8:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   85cec:	e9c8 1400 	strd	r1, r4, [r8]
   85cf0:	ddf1      	ble.n	85cd6 <_svfprintf_r+0x99a>
   85cf2:	4631      	mov	r1, r6
   85cf4:	4650      	mov	r0, sl
   85cf6:	aa2a      	add	r2, sp, #168	; 0xa8
   85cf8:	f004 ff6c 	bl	8abd4 <__ssprint_r>
   85cfc:	2800      	cmp	r0, #0
   85cfe:	f040 8458 	bne.w	865b2 <_svfprintf_r+0x1276>
   85d02:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   85d06:	3d10      	subs	r5, #16
   85d08:	2d10      	cmp	r5, #16
   85d0a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85d0e:	dce7      	bgt.n	85ce0 <_svfprintf_r+0x9a4>
   85d10:	4648      	mov	r0, r9
   85d12:	46d1      	mov	r9, sl
   85d14:	46b2      	mov	sl, r6
   85d16:	463e      	mov	r6, r7
   85d18:	4607      	mov	r7, r0
   85d1a:	4619      	mov	r1, r3
   85d1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   85d1e:	194c      	adds	r4, r1, r5
   85d20:	3201      	adds	r2, #1
   85d22:	4910      	ldr	r1, [pc, #64]	; (85d64 <_svfprintf_r+0xa28>)
   85d24:	2a07      	cmp	r2, #7
   85d26:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   85d2a:	e9c8 1500 	strd	r1, r5, [r8]
   85d2e:	f300 841f 	bgt.w	86570 <_svfprintf_r+0x1234>
   85d32:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   85d36:	f108 0808 	add.w	r8, r8, #8
   85d3a:	e474      	b.n	85626 <_svfprintf_r+0x2ea>
   85d3c:	9308      	str	r3, [sp, #32]
   85d3e:	2d00      	cmp	r5, #0
   85d40:	bf08      	it	eq
   85d42:	2c0a      	cmpeq	r4, #10
   85d44:	f080 83d0 	bcs.w	864e8 <_svfprintf_r+0x11ac>
   85d48:	9b08      	ldr	r3, [sp, #32]
   85d4a:	3430      	adds	r4, #48	; 0x30
   85d4c:	9307      	str	r3, [sp, #28]
   85d4e:	2301      	movs	r3, #1
   85d50:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   85d54:	930c      	str	r3, [sp, #48]	; 0x30
   85d56:	f20d 1757 	addw	r7, sp, #343	; 0x157
   85d5a:	e658      	b.n	85a0e <_svfprintf_r+0x6d2>
   85d5c:	0008bf30 	.word	0x0008bf30
   85d60:	0008bf44 	.word	0x0008bf44
   85d64:	0008bf34 	.word	0x0008bf34
   85d68:	4651      	mov	r1, sl
   85d6a:	4648      	mov	r0, r9
   85d6c:	aa2a      	add	r2, sp, #168	; 0xa8
   85d6e:	f004 ff31 	bl	8abd4 <__ssprint_r>
   85d72:	2800      	cmp	r0, #0
   85d74:	f47f af2a 	bne.w	85bcc <_svfprintf_r+0x890>
   85d78:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85d7a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85d7c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85d80:	2a00      	cmp	r2, #0
   85d82:	f040 847f 	bne.w	86684 <_svfprintf_r+0x1348>
   85d86:	9b07      	ldr	r3, [sp, #28]
   85d88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85d8a:	f003 0301 	and.w	r3, r3, #1
   85d8e:	4313      	orrs	r3, r2
   85d90:	f43f ac83 	beq.w	8569a <_svfprintf_r+0x35e>
   85d94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85d96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   85d98:	3301      	adds	r3, #1
   85d9a:	9918      	ldr	r1, [sp, #96]	; 0x60
   85d9c:	4414      	add	r4, r2
   85d9e:	2b07      	cmp	r3, #7
   85da0:	e9c8 1200 	strd	r1, r2, [r8]
   85da4:	942c      	str	r4, [sp, #176]	; 0xb0
   85da6:	932b      	str	r3, [sp, #172]	; 0xac
   85da8:	f300 8524 	bgt.w	867f4 <_svfprintf_r+0x14b8>
   85dac:	f108 0808 	add.w	r8, r8, #8
   85db0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85db2:	3301      	adds	r3, #1
   85db4:	4414      	add	r4, r2
   85db6:	2b07      	cmp	r3, #7
   85db8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85dbc:	e9c8 7200 	strd	r7, r2, [r8]
   85dc0:	f77f ac69 	ble.w	85696 <_svfprintf_r+0x35a>
   85dc4:	4651      	mov	r1, sl
   85dc6:	4648      	mov	r0, r9
   85dc8:	aa2a      	add	r2, sp, #168	; 0xa8
   85dca:	f004 ff03 	bl	8abd4 <__ssprint_r>
   85dce:	2800      	cmp	r0, #0
   85dd0:	f47f aefc 	bne.w	85bcc <_svfprintf_r+0x890>
   85dd4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85dd6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85dda:	e45e      	b.n	8569a <_svfprintf_r+0x35e>
   85ddc:	4651      	mov	r1, sl
   85dde:	4648      	mov	r0, r9
   85de0:	aa2a      	add	r2, sp, #168	; 0xa8
   85de2:	931e      	str	r3, [sp, #120]	; 0x78
   85de4:	f004 fef6 	bl	8abd4 <__ssprint_r>
   85de8:	2800      	cmp	r0, #0
   85dea:	f47f aeef 	bne.w	85bcc <_svfprintf_r+0x890>
   85dee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85df0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   85df2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85df6:	e426      	b.n	85646 <_svfprintf_r+0x30a>
   85df8:	4651      	mov	r1, sl
   85dfa:	4648      	mov	r0, r9
   85dfc:	aa2a      	add	r2, sp, #168	; 0xa8
   85dfe:	f004 fee9 	bl	8abd4 <__ssprint_r>
   85e02:	2800      	cmp	r0, #0
   85e04:	f47f aee2 	bne.w	85bcc <_svfprintf_r+0x890>
   85e08:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85e0a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85e0e:	e429      	b.n	85664 <_svfprintf_r+0x328>
   85e10:	2d10      	cmp	r5, #16
   85e12:	f340 86be 	ble.w	86b92 <_svfprintf_r+0x1856>
   85e16:	2610      	movs	r6, #16
   85e18:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85e1a:	e004      	b.n	85e26 <_svfprintf_r+0xaea>
   85e1c:	3d10      	subs	r5, #16
   85e1e:	2d10      	cmp	r5, #16
   85e20:	f108 0808 	add.w	r8, r8, #8
   85e24:	dd17      	ble.n	85e56 <_svfprintf_r+0xb1a>
   85e26:	3301      	adds	r3, #1
   85e28:	4aad      	ldr	r2, [pc, #692]	; (860e0 <_svfprintf_r+0xda4>)
   85e2a:	3410      	adds	r4, #16
   85e2c:	2b07      	cmp	r3, #7
   85e2e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85e32:	e9c8 2600 	strd	r2, r6, [r8]
   85e36:	ddf1      	ble.n	85e1c <_svfprintf_r+0xae0>
   85e38:	4651      	mov	r1, sl
   85e3a:	4648      	mov	r0, r9
   85e3c:	aa2a      	add	r2, sp, #168	; 0xa8
   85e3e:	f004 fec9 	bl	8abd4 <__ssprint_r>
   85e42:	2800      	cmp	r0, #0
   85e44:	f47f aec2 	bne.w	85bcc <_svfprintf_r+0x890>
   85e48:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85e4c:	3d10      	subs	r5, #16
   85e4e:	2d10      	cmp	r5, #16
   85e50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85e54:	dce7      	bgt.n	85e26 <_svfprintf_r+0xaea>
   85e56:	3301      	adds	r3, #1
   85e58:	4aa1      	ldr	r2, [pc, #644]	; (860e0 <_svfprintf_r+0xda4>)
   85e5a:	442c      	add	r4, r5
   85e5c:	2b07      	cmp	r3, #7
   85e5e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85e62:	e9c8 2500 	strd	r2, r5, [r8]
   85e66:	f77f ac21 	ble.w	856ac <_svfprintf_r+0x370>
   85e6a:	4651      	mov	r1, sl
   85e6c:	4648      	mov	r0, r9
   85e6e:	aa2a      	add	r2, sp, #168	; 0xa8
   85e70:	f004 feb0 	bl	8abd4 <__ssprint_r>
   85e74:	2800      	cmp	r0, #0
   85e76:	f47f aea9 	bne.w	85bcc <_svfprintf_r+0x890>
   85e7a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85e7c:	e416      	b.n	856ac <_svfprintf_r+0x370>
   85e7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85e80:	2a00      	cmp	r2, #0
   85e82:	f340 8386 	ble.w	86592 <_svfprintf_r+0x1256>
   85e86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85e8a:	4293      	cmp	r3, r2
   85e8c:	bfa8      	it	ge
   85e8e:	4613      	movge	r3, r2
   85e90:	2b00      	cmp	r3, #0
   85e92:	461d      	mov	r5, r3
   85e94:	dd0b      	ble.n	85eae <_svfprintf_r+0xb72>
   85e96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85e98:	442c      	add	r4, r5
   85e9a:	3301      	adds	r3, #1
   85e9c:	2b07      	cmp	r3, #7
   85e9e:	e9c8 7500 	strd	r7, r5, [r8]
   85ea2:	942c      	str	r4, [sp, #176]	; 0xb0
   85ea4:	932b      	str	r3, [sp, #172]	; 0xac
   85ea6:	f300 851e 	bgt.w	868e6 <_svfprintf_r+0x15aa>
   85eaa:	f108 0808 	add.w	r8, r8, #8
   85eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85eb0:	2d00      	cmp	r5, #0
   85eb2:	bfa8      	it	ge
   85eb4:	1b5b      	subge	r3, r3, r5
   85eb6:	2b00      	cmp	r3, #0
   85eb8:	461d      	mov	r5, r3
   85eba:	f300 8256 	bgt.w	8636a <_svfprintf_r+0x102e>
   85ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85ec0:	443b      	add	r3, r7
   85ec2:	461e      	mov	r6, r3
   85ec4:	9b07      	ldr	r3, [sp, #28]
   85ec6:	055b      	lsls	r3, r3, #21
   85ec8:	f100 8277 	bmi.w	863ba <_svfprintf_r+0x107e>
   85ecc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85ece:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85ed0:	4293      	cmp	r3, r2
   85ed2:	db03      	blt.n	85edc <_svfprintf_r+0xba0>
   85ed4:	9a07      	ldr	r2, [sp, #28]
   85ed6:	07d5      	lsls	r5, r2, #31
   85ed8:	f140 847a 	bpl.w	867d0 <_svfprintf_r+0x1494>
   85edc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85ede:	9917      	ldr	r1, [sp, #92]	; 0x5c
   85ee0:	3201      	adds	r2, #1
   85ee2:	9818      	ldr	r0, [sp, #96]	; 0x60
   85ee4:	440c      	add	r4, r1
   85ee6:	2a07      	cmp	r2, #7
   85ee8:	e9c8 0100 	strd	r0, r1, [r8]
   85eec:	942c      	str	r4, [sp, #176]	; 0xb0
   85eee:	922b      	str	r2, [sp, #172]	; 0xac
   85ef0:	f300 8506 	bgt.w	86900 <_svfprintf_r+0x15c4>
   85ef4:	f108 0808 	add.w	r8, r8, #8
   85ef8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   85efa:	18bd      	adds	r5, r7, r2
   85efc:	1bad      	subs	r5, r5, r6
   85efe:	1ad3      	subs	r3, r2, r3
   85f00:	429d      	cmp	r5, r3
   85f02:	bfa8      	it	ge
   85f04:	461d      	movge	r5, r3
   85f06:	2d00      	cmp	r5, #0
   85f08:	dd0b      	ble.n	85f22 <_svfprintf_r+0xbe6>
   85f0a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   85f0c:	442c      	add	r4, r5
   85f0e:	3201      	adds	r2, #1
   85f10:	2a07      	cmp	r2, #7
   85f12:	e9c8 6500 	strd	r6, r5, [r8]
   85f16:	942c      	str	r4, [sp, #176]	; 0xb0
   85f18:	922b      	str	r2, [sp, #172]	; 0xac
   85f1a:	f300 855f 	bgt.w	869dc <_svfprintf_r+0x16a0>
   85f1e:	f108 0808 	add.w	r8, r8, #8
   85f22:	2d00      	cmp	r5, #0
   85f24:	bfb4      	ite	lt
   85f26:	461d      	movlt	r5, r3
   85f28:	1b5d      	subge	r5, r3, r5
   85f2a:	2d00      	cmp	r5, #0
   85f2c:	f77f abb5 	ble.w	8569a <_svfprintf_r+0x35e>
   85f30:	2d10      	cmp	r5, #16
   85f32:	f340 8376 	ble.w	86622 <_svfprintf_r+0x12e6>
   85f36:	4f6b      	ldr	r7, [pc, #428]	; (860e4 <_svfprintf_r+0xda8>)
   85f38:	2610      	movs	r6, #16
   85f3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   85f3c:	970f      	str	r7, [sp, #60]	; 0x3c
   85f3e:	e005      	b.n	85f4c <_svfprintf_r+0xc10>
   85f40:	f108 0808 	add.w	r8, r8, #8
   85f44:	3d10      	subs	r5, #16
   85f46:	2d10      	cmp	r5, #16
   85f48:	f340 836e 	ble.w	86628 <_svfprintf_r+0x12ec>
   85f4c:	3301      	adds	r3, #1
   85f4e:	3410      	adds	r4, #16
   85f50:	2b07      	cmp	r3, #7
   85f52:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   85f56:	e9c8 7600 	strd	r7, r6, [r8]
   85f5a:	ddf1      	ble.n	85f40 <_svfprintf_r+0xc04>
   85f5c:	4651      	mov	r1, sl
   85f5e:	4648      	mov	r0, r9
   85f60:	aa2a      	add	r2, sp, #168	; 0xa8
   85f62:	f004 fe37 	bl	8abd4 <__ssprint_r>
   85f66:	2800      	cmp	r0, #0
   85f68:	f47f ae30 	bne.w	85bcc <_svfprintf_r+0x890>
   85f6c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   85f70:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85f74:	e7e6      	b.n	85f44 <_svfprintf_r+0xc08>
   85f76:	2b30      	cmp	r3, #48	; 0x30
   85f78:	f43f ae99 	beq.w	85cae <_svfprintf_r+0x972>
   85f7c:	2330      	movs	r3, #48	; 0x30
   85f7e:	3a02      	subs	r2, #2
   85f80:	f807 3c01 	strb.w	r3, [r7, #-1]
   85f84:	9908      	ldr	r1, [sp, #32]
   85f86:	ab56      	add	r3, sp, #344	; 0x158
   85f88:	1a9b      	subs	r3, r3, r2
   85f8a:	4617      	mov	r7, r2
   85f8c:	9107      	str	r1, [sp, #28]
   85f8e:	930c      	str	r3, [sp, #48]	; 0x30
   85f90:	e53d      	b.n	85a0e <_svfprintf_r+0x6d2>
   85f92:	9b07      	ldr	r3, [sp, #28]
   85f94:	07d8      	lsls	r0, r3, #31
   85f96:	f53f ae27 	bmi.w	85be8 <_svfprintf_r+0x8ac>
   85f9a:	2301      	movs	r3, #1
   85f9c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   85f9e:	441c      	add	r4, r3
   85fa0:	441d      	add	r5, r3
   85fa2:	2d07      	cmp	r5, #7
   85fa4:	942c      	str	r4, [sp, #176]	; 0xb0
   85fa6:	f8c8 7000 	str.w	r7, [r8]
   85faa:	952b      	str	r5, [sp, #172]	; 0xac
   85fac:	f8c8 3004 	str.w	r3, [r8, #4]
   85fb0:	f77f ae4d 	ble.w	85c4e <_svfprintf_r+0x912>
   85fb4:	4651      	mov	r1, sl
   85fb6:	4648      	mov	r0, r9
   85fb8:	aa2a      	add	r2, sp, #168	; 0xa8
   85fba:	f004 fe0b 	bl	8abd4 <__ssprint_r>
   85fbe:	2800      	cmp	r0, #0
   85fc0:	f47f ae04 	bne.w	85bcc <_svfprintf_r+0x890>
   85fc4:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   85fc8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   85fcc:	e641      	b.n	85c52 <_svfprintf_r+0x916>
   85fce:	1e5e      	subs	r6, r3, #1
   85fd0:	2e00      	cmp	r6, #0
   85fd2:	f77f ae3e 	ble.w	85c52 <_svfprintf_r+0x916>
   85fd6:	2e10      	cmp	r6, #16
   85fd8:	f340 871e 	ble.w	86e18 <_svfprintf_r+0x1adc>
   85fdc:	4b41      	ldr	r3, [pc, #260]	; (860e4 <_svfprintf_r+0xda8>)
   85fde:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   85fe2:	2710      	movs	r7, #16
   85fe4:	46d3      	mov	fp, sl
   85fe6:	930f      	str	r3, [sp, #60]	; 0x3c
   85fe8:	46ca      	mov	sl, r9
   85fea:	4699      	mov	r9, r3
   85fec:	e005      	b.n	85ffa <_svfprintf_r+0xcbe>
   85fee:	f108 0808 	add.w	r8, r8, #8
   85ff2:	3e10      	subs	r6, #16
   85ff4:	2e10      	cmp	r6, #16
   85ff6:	f340 82f8 	ble.w	865ea <_svfprintf_r+0x12ae>
   85ffa:	3501      	adds	r5, #1
   85ffc:	3410      	adds	r4, #16
   85ffe:	2d07      	cmp	r5, #7
   86000:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86004:	e9c8 9700 	strd	r9, r7, [r8]
   86008:	ddf1      	ble.n	85fee <_svfprintf_r+0xcb2>
   8600a:	4659      	mov	r1, fp
   8600c:	4650      	mov	r0, sl
   8600e:	aa2a      	add	r2, sp, #168	; 0xa8
   86010:	f004 fde0 	bl	8abd4 <__ssprint_r>
   86014:	2800      	cmp	r0, #0
   86016:	f040 85cc 	bne.w	86bb2 <_svfprintf_r+0x1876>
   8601a:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8601e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86022:	e7e6      	b.n	85ff2 <_svfprintf_r+0xcb6>
   86024:	4651      	mov	r1, sl
   86026:	4648      	mov	r0, r9
   86028:	aa2a      	add	r2, sp, #168	; 0xa8
   8602a:	f004 fdd3 	bl	8abd4 <__ssprint_r>
   8602e:	2800      	cmp	r0, #0
   86030:	f47f adcc 	bne.w	85bcc <_svfprintf_r+0x890>
   86034:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86036:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8603a:	f7ff bb1d 	b.w	85678 <_svfprintf_r+0x33c>
   8603e:	9b08      	ldr	r3, [sp, #32]
   86040:	06dc      	lsls	r4, r3, #27
   86042:	f100 8119 	bmi.w	86278 <_svfprintf_r+0xf3c>
   86046:	9b08      	ldr	r3, [sp, #32]
   86048:	0658      	lsls	r0, r3, #25
   8604a:	f140 8368 	bpl.w	8671e <_svfprintf_r+0x13e2>
   8604e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86050:	2301      	movs	r3, #1
   86052:	f852 4b04 	ldr.w	r4, [r2], #4
   86056:	2500      	movs	r5, #0
   86058:	920e      	str	r2, [sp, #56]	; 0x38
   8605a:	b2a4      	uxth	r4, r4
   8605c:	f7ff ba7f 	b.w	8555e <_svfprintf_r+0x222>
   86060:	232d      	movs	r3, #45	; 0x2d
   86062:	9a07      	ldr	r2, [sp, #28]
   86064:	4264      	negs	r4, r4
   86066:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8606a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8606e:	2301      	movs	r3, #1
   86070:	9208      	str	r2, [sp, #32]
   86072:	f7ff ba77 	b.w	85564 <_svfprintf_r+0x228>
   86076:	4651      	mov	r1, sl
   86078:	4648      	mov	r0, r9
   8607a:	aa2a      	add	r2, sp, #168	; 0xa8
   8607c:	f004 fdaa 	bl	8abd4 <__ssprint_r>
   86080:	2800      	cmp	r0, #0
   86082:	f47f ada3 	bne.w	85bcc <_svfprintf_r+0x890>
   86086:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8608a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8608e:	e5ba      	b.n	85c06 <_svfprintf_r+0x8ca>
   86090:	4651      	mov	r1, sl
   86092:	4648      	mov	r0, r9
   86094:	aa2a      	add	r2, sp, #168	; 0xa8
   86096:	f004 fd9d 	bl	8abd4 <__ssprint_r>
   8609a:	2800      	cmp	r0, #0
   8609c:	f47f ad96 	bne.w	85bcc <_svfprintf_r+0x890>
   860a0:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   860a4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   860a8:	e5ba      	b.n	85c20 <_svfprintf_r+0x8e4>
   860aa:	9b07      	ldr	r3, [sp, #28]
   860ac:	07da      	lsls	r2, r3, #31
   860ae:	f57f aaf4 	bpl.w	8569a <_svfprintf_r+0x35e>
   860b2:	e4d9      	b.n	85a68 <_svfprintf_r+0x72c>
   860b4:	af56      	add	r7, sp, #344	; 0x158
   860b6:	e4aa      	b.n	85a0e <_svfprintf_r+0x6d2>
   860b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   860ba:	465f      	mov	r7, fp
   860bc:	f853 1b04 	ldr.w	r1, [r3], #4
   860c0:	930e      	str	r3, [sp, #56]	; 0x38
   860c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   860c4:	17dd      	asrs	r5, r3, #31
   860c6:	461a      	mov	r2, r3
   860c8:	462b      	mov	r3, r5
   860ca:	e9c1 2300 	strd	r2, r3, [r1]
   860ce:	f7ff bb03 	b.w	856d8 <_svfprintf_r+0x39c>
   860d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   860d4:	2500      	movs	r5, #0
   860d6:	f853 4b04 	ldr.w	r4, [r3], #4
   860da:	930e      	str	r3, [sp, #56]	; 0x38
   860dc:	f7ff ba3a 	b.w	85554 <_svfprintf_r+0x218>
   860e0:	0008bf34 	.word	0x0008bf34
   860e4:	0008bf44 	.word	0x0008bf44
   860e8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   860ec:	460b      	mov	r3, r1
   860ee:	4602      	mov	r2, r0
   860f0:	f005 fca4 	bl	8ba3c <__aeabi_dcmpun>
   860f4:	4601      	mov	r1, r0
   860f6:	2800      	cmp	r0, #0
   860f8:	f040 8643 	bne.w	86d82 <_svfprintf_r+0x1a46>
   860fc:	2e61      	cmp	r6, #97	; 0x61
   860fe:	f000 8586 	beq.w	86c0e <_svfprintf_r+0x18d2>
   86102:	2e41      	cmp	r6, #65	; 0x41
   86104:	f000 847a 	beq.w	869fc <_svfprintf_r+0x16c0>
   86108:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8610a:	f026 0520 	bic.w	r5, r6, #32
   8610e:	1c5a      	adds	r2, r3, #1
   86110:	9508      	str	r5, [sp, #32]
   86112:	f000 837d 	beq.w	86810 <_svfprintf_r+0x14d4>
   86116:	2d47      	cmp	r5, #71	; 0x47
   86118:	f000 859e 	beq.w	86c58 <_svfprintf_r+0x191c>
   8611c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86120:	9b07      	ldr	r3, [sp, #28]
   86122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86126:	9312      	str	r3, [sp, #72]	; 0x48
   86128:	460b      	mov	r3, r1
   8612a:	2b00      	cmp	r3, #0
   8612c:	f2c0 85ba 	blt.w	86ca4 <_svfprintf_r+0x1968>
   86130:	2200      	movs	r2, #0
   86132:	930f      	str	r3, [sp, #60]	; 0x3c
   86134:	921e      	str	r2, [sp, #120]	; 0x78
   86136:	920d      	str	r2, [sp, #52]	; 0x34
   86138:	900c      	str	r0, [sp, #48]	; 0x30
   8613a:	2d46      	cmp	r5, #70	; 0x46
   8613c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8613e:	f000 8407 	beq.w	86950 <_svfprintf_r+0x1614>
   86142:	2d45      	cmp	r5, #69	; 0x45
   86144:	f04f 0002 	mov.w	r0, #2
   86148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8614a:	f040 83e7 	bne.w	8691c <_svfprintf_r+0x15e0>
   8614e:	9909      	ldr	r1, [sp, #36]	; 0x24
   86150:	9000      	str	r0, [sp, #0]
   86152:	1c4c      	adds	r4, r1, #1
   86154:	a928      	add	r1, sp, #160	; 0xa0
   86156:	a825      	add	r0, sp, #148	; 0x94
   86158:	9104      	str	r1, [sp, #16]
   8615a:	a924      	add	r1, sp, #144	; 0x90
   8615c:	e9cd 1002 	strd	r1, r0, [sp, #8]
   86160:	9401      	str	r4, [sp, #4]
   86162:	4648      	mov	r0, r9
   86164:	f001 feb0 	bl	87ec8 <_dtoa_r>
   86168:	4607      	mov	r7, r0
   8616a:	4404      	add	r4, r0
   8616c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8616e:	9d07      	ldr	r5, [sp, #28]
   86170:	9307      	str	r3, [sp, #28]
   86172:	2200      	movs	r2, #0
   86174:	2300      	movs	r3, #0
   86176:	980c      	ldr	r0, [sp, #48]	; 0x30
   86178:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8617a:	f005 fc2d 	bl	8b9d8 <__aeabi_dcmpeq>
   8617e:	2800      	cmp	r0, #0
   86180:	f000 8398 	beq.w	868b4 <_svfprintf_r+0x1578>
   86184:	4623      	mov	r3, r4
   86186:	1bdb      	subs	r3, r3, r7
   86188:	9313      	str	r3, [sp, #76]	; 0x4c
   8618a:	9b08      	ldr	r3, [sp, #32]
   8618c:	2b47      	cmp	r3, #71	; 0x47
   8618e:	f000 835e 	beq.w	8684e <_svfprintf_r+0x1512>
   86192:	9b08      	ldr	r3, [sp, #32]
   86194:	2b46      	cmp	r3, #70	; 0x46
   86196:	f000 840b 	beq.w	869b0 <_svfprintf_r+0x1674>
   8619a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8619c:	9310      	str	r3, [sp, #64]	; 0x40
   8619e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   861a0:	9a08      	ldr	r2, [sp, #32]
   861a2:	3b01      	subs	r3, #1
   861a4:	2a41      	cmp	r2, #65	; 0x41
   861a6:	9324      	str	r3, [sp, #144]	; 0x90
   861a8:	f000 85ad 	beq.w	86d06 <_svfprintf_r+0x19ca>
   861ac:	2100      	movs	r1, #0
   861ae:	b2f2      	uxtb	r2, r6
   861b0:	2b00      	cmp	r3, #0
   861b2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   861b6:	bfb6      	itet	lt
   861b8:	222d      	movlt	r2, #45	; 0x2d
   861ba:	222b      	movge	r2, #43	; 0x2b
   861bc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   861be:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   861c2:	bfb8      	it	lt
   861c4:	f1c3 0301 	rsblt	r3, r3, #1
   861c8:	2b09      	cmp	r3, #9
   861ca:	f340 85a2 	ble.w	86d12 <_svfprintf_r+0x19d6>
   861ce:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   861d2:	4672      	mov	r2, lr
   861d4:	469c      	mov	ip, r3
   861d6:	4cbf      	ldr	r4, [pc, #764]	; (864d4 <_svfprintf_r+0x1198>)
   861d8:	4660      	mov	r0, ip
   861da:	4611      	mov	r1, r2
   861dc:	fb84 230c 	smull	r2, r3, r4, ip
   861e0:	ea4f 72ec 	mov.w	r2, ip, asr #31
   861e4:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   861e8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   861ec:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   861f0:	3330      	adds	r3, #48	; 0x30
   861f2:	2863      	cmp	r0, #99	; 0x63
   861f4:	4694      	mov	ip, r2
   861f6:	f801 3c01 	strb.w	r3, [r1, #-1]
   861fa:	f101 32ff 	add.w	r2, r1, #4294967295
   861fe:	dceb      	bgt.n	861d8 <_svfprintf_r+0xe9c>
   86200:	4663      	mov	r3, ip
   86202:	3330      	adds	r3, #48	; 0x30
   86204:	b2d8      	uxtb	r0, r3
   86206:	1e8b      	subs	r3, r1, #2
   86208:	459e      	cmp	lr, r3
   8620a:	f802 0c01 	strb.w	r0, [r2, #-1]
   8620e:	f240 862c 	bls.w	86e6a <_svfprintf_r+0x1b2e>
   86212:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   86216:	e001      	b.n	8621c <_svfprintf_r+0xee0>
   86218:	f812 0b01 	ldrb.w	r0, [r2], #1
   8621c:	4596      	cmp	lr, r2
   8621e:	f803 0b01 	strb.w	r0, [r3], #1
   86222:	d1f9      	bne.n	86218 <_svfprintf_r+0xedc>
   86224:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   86228:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   8622c:	1a5b      	subs	r3, r3, r1
   8622e:	4413      	add	r3, r2
   86230:	aa26      	add	r2, sp, #152	; 0x98
   86232:	1a9b      	subs	r3, r3, r2
   86234:	931b      	str	r3, [sp, #108]	; 0x6c
   86236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86238:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8623a:	2b01      	cmp	r3, #1
   8623c:	441a      	add	r2, r3
   8623e:	920c      	str	r2, [sp, #48]	; 0x30
   86240:	f340 85cc 	ble.w	86ddc <_svfprintf_r+0x1aa0>
   86244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86248:	4413      	add	r3, r2
   8624a:	930c      	str	r3, [sp, #48]	; 0x30
   8624c:	2300      	movs	r3, #0
   8624e:	9312      	str	r3, [sp, #72]	; 0x48
   86250:	9316      	str	r3, [sp, #88]	; 0x58
   86252:	9310      	str	r3, [sp, #64]	; 0x40
   86254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86256:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   8625a:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   8625e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86262:	9207      	str	r2, [sp, #28]
   86264:	9308      	str	r3, [sp, #32]
   86266:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86268:	2b00      	cmp	r3, #0
   8626a:	f040 8317 	bne.w	8689c <_svfprintf_r+0x1560>
   8626e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86272:	9309      	str	r3, [sp, #36]	; 0x24
   86274:	f7ff ba86 	b.w	85784 <_svfprintf_r+0x448>
   86278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8627a:	2301      	movs	r3, #1
   8627c:	f852 4b04 	ldr.w	r4, [r2], #4
   86280:	2500      	movs	r5, #0
   86282:	920e      	str	r2, [sp, #56]	; 0x38
   86284:	f7ff b96b 	b.w	8555e <_svfprintf_r+0x222>
   86288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8628a:	f853 4b04 	ldr.w	r4, [r3], #4
   8628e:	17e5      	asrs	r5, r4, #31
   86290:	930e      	str	r3, [sp, #56]	; 0x38
   86292:	4622      	mov	r2, r4
   86294:	462b      	mov	r3, r5
   86296:	f7ff b933 	b.w	85500 <_svfprintf_r+0x1c4>
   8629a:	9b07      	ldr	r3, [sp, #28]
   8629c:	9308      	str	r3, [sp, #32]
   8629e:	f7ff bae0 	b.w	85862 <_svfprintf_r+0x526>
   862a2:	4b8d      	ldr	r3, [pc, #564]	; (864d8 <_svfprintf_r+0x119c>)
   862a4:	9319      	str	r3, [sp, #100]	; 0x64
   862a6:	9b07      	ldr	r3, [sp, #28]
   862a8:	0699      	lsls	r1, r3, #26
   862aa:	f140 80fe 	bpl.w	864aa <_svfprintf_r+0x116e>
   862ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   862b0:	3307      	adds	r3, #7
   862b2:	f023 0307 	bic.w	r3, r3, #7
   862b6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   862ba:	930e      	str	r3, [sp, #56]	; 0x38
   862bc:	9a07      	ldr	r2, [sp, #28]
   862be:	07d7      	lsls	r7, r2, #31
   862c0:	d50a      	bpl.n	862d8 <_svfprintf_r+0xf9c>
   862c2:	ea54 0305 	orrs.w	r3, r4, r5
   862c6:	d007      	beq.n	862d8 <_svfprintf_r+0xf9c>
   862c8:	2330      	movs	r3, #48	; 0x30
   862ca:	f042 0202 	orr.w	r2, r2, #2
   862ce:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   862d2:	9207      	str	r2, [sp, #28]
   862d4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   862d8:	9a07      	ldr	r2, [sp, #28]
   862da:	2302      	movs	r3, #2
   862dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   862e0:	9208      	str	r2, [sp, #32]
   862e2:	f7ff b93c 	b.w	8555e <_svfprintf_r+0x222>
   862e6:	4b7d      	ldr	r3, [pc, #500]	; (864dc <_svfprintf_r+0x11a0>)
   862e8:	9319      	str	r3, [sp, #100]	; 0x64
   862ea:	e7dc      	b.n	862a6 <_svfprintf_r+0xf6a>
   862ec:	f043 0320 	orr.w	r3, r3, #32
   862f0:	f89b 6001 	ldrb.w	r6, [fp, #1]
   862f4:	9307      	str	r3, [sp, #28]
   862f6:	f10b 0b01 	add.w	fp, fp, #1
   862fa:	f7ff b86a 	b.w	853d2 <_svfprintf_r+0x96>
   862fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   86302:	f89b 6001 	ldrb.w	r6, [fp, #1]
   86306:	9307      	str	r3, [sp, #28]
   86308:	f10b 0b01 	add.w	fp, fp, #1
   8630c:	f7ff b861 	b.w	853d2 <_svfprintf_r+0x96>
   86310:	4651      	mov	r1, sl
   86312:	4648      	mov	r0, r9
   86314:	aa2a      	add	r2, sp, #168	; 0xa8
   86316:	f004 fc5d 	bl	8abd4 <__ssprint_r>
   8631a:	2800      	cmp	r0, #0
   8631c:	f47f ac56 	bne.w	85bcc <_svfprintf_r+0x890>
   86320:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86322:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86326:	f7ff bbad 	b.w	85a84 <_svfprintf_r+0x748>
   8632a:	2140      	movs	r1, #64	; 0x40
   8632c:	4648      	mov	r0, r9
   8632e:	f003 fa79 	bl	89824 <_malloc_r>
   86332:	f8cb 0000 	str.w	r0, [fp]
   86336:	f8cb 0010 	str.w	r0, [fp, #16]
   8633a:	2800      	cmp	r0, #0
   8633c:	f000 858d 	beq.w	86e5a <_svfprintf_r+0x1b1e>
   86340:	2340      	movs	r3, #64	; 0x40
   86342:	f8cb 3014 	str.w	r3, [fp, #20]
   86346:	f7ff b811 	b.w	8536c <_svfprintf_r+0x30>
   8634a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8634c:	463a      	mov	r2, r7
   8634e:	2b06      	cmp	r3, #6
   86350:	bf28      	it	cs
   86352:	2306      	movcs	r3, #6
   86354:	9709      	str	r7, [sp, #36]	; 0x24
   86356:	9712      	str	r7, [sp, #72]	; 0x48
   86358:	9716      	str	r7, [sp, #88]	; 0x58
   8635a:	9710      	str	r7, [sp, #64]	; 0x40
   8635c:	970d      	str	r7, [sp, #52]	; 0x34
   8635e:	9308      	str	r3, [sp, #32]
   86360:	4f5f      	ldr	r7, [pc, #380]	; (864e0 <_svfprintf_r+0x11a4>)
   86362:	940e      	str	r4, [sp, #56]	; 0x38
   86364:	930c      	str	r3, [sp, #48]	; 0x30
   86366:	f7ff ba0d 	b.w	85784 <_svfprintf_r+0x448>
   8636a:	2b10      	cmp	r3, #16
   8636c:	f340 8558 	ble.w	86e20 <_svfprintf_r+0x1ae4>
   86370:	4651      	mov	r1, sl
   86372:	4a5c      	ldr	r2, [pc, #368]	; (864e4 <_svfprintf_r+0x11a8>)
   86374:	46ca      	mov	sl, r9
   86376:	9709      	str	r7, [sp, #36]	; 0x24
   86378:	2610      	movs	r6, #16
   8637a:	4617      	mov	r7, r2
   8637c:	4689      	mov	r9, r1
   8637e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86380:	920f      	str	r2, [sp, #60]	; 0x3c
   86382:	e005      	b.n	86390 <_svfprintf_r+0x1054>
   86384:	f108 0808 	add.w	r8, r8, #8
   86388:	3d10      	subs	r5, #16
   8638a:	2d10      	cmp	r5, #16
   8638c:	f340 81fa 	ble.w	86784 <_svfprintf_r+0x1448>
   86390:	3301      	adds	r3, #1
   86392:	3410      	adds	r4, #16
   86394:	2b07      	cmp	r3, #7
   86396:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8639a:	e9c8 7600 	strd	r7, r6, [r8]
   8639e:	ddf1      	ble.n	86384 <_svfprintf_r+0x1048>
   863a0:	4649      	mov	r1, r9
   863a2:	4650      	mov	r0, sl
   863a4:	aa2a      	add	r2, sp, #168	; 0xa8
   863a6:	f004 fc15 	bl	8abd4 <__ssprint_r>
   863aa:	2800      	cmp	r0, #0
   863ac:	f040 83fd 	bne.w	86baa <_svfprintf_r+0x186e>
   863b0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   863b4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   863b8:	e7e6      	b.n	86388 <_svfprintf_r+0x104c>
   863ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   863bc:	4642      	mov	r2, r8
   863be:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   863c2:	18fb      	adds	r3, r7, r3
   863c4:	9309      	str	r3, [sp, #36]	; 0x24
   863c6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   863ca:	970f      	str	r7, [sp, #60]	; 0x3c
   863cc:	4620      	mov	r0, r4
   863ce:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   863d2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   863d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   863d6:	f1b8 0f00 	cmp.w	r8, #0
   863da:	d02d      	beq.n	86438 <_svfprintf_r+0x10fc>
   863dc:	bb7b      	cbnz	r3, 8643e <_svfprintf_r+0x1102>
   863de:	3f01      	subs	r7, #1
   863e0:	f108 38ff 	add.w	r8, r8, #4294967295
   863e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   863e6:	991c      	ldr	r1, [sp, #112]	; 0x70
   863e8:	3301      	adds	r3, #1
   863ea:	4458      	add	r0, fp
   863ec:	2b07      	cmp	r3, #7
   863ee:	e9c2 1b00 	strd	r1, fp, [r2]
   863f2:	902c      	str	r0, [sp, #176]	; 0xb0
   863f4:	932b      	str	r3, [sp, #172]	; 0xac
   863f6:	dc62      	bgt.n	864be <_svfprintf_r+0x1182>
   863f8:	3208      	adds	r2, #8
   863fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   863fc:	783b      	ldrb	r3, [r7, #0]
   863fe:	1b8d      	subs	r5, r1, r6
   86400:	429d      	cmp	r5, r3
   86402:	bfa8      	it	ge
   86404:	461d      	movge	r5, r3
   86406:	2d00      	cmp	r5, #0
   86408:	dd0b      	ble.n	86422 <_svfprintf_r+0x10e6>
   8640a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8640c:	4428      	add	r0, r5
   8640e:	3301      	adds	r3, #1
   86410:	2b07      	cmp	r3, #7
   86412:	e9c2 6500 	strd	r6, r5, [r2]
   86416:	902c      	str	r0, [sp, #176]	; 0xb0
   86418:	932b      	str	r3, [sp, #172]	; 0xac
   8641a:	f300 8111 	bgt.w	86640 <_svfprintf_r+0x1304>
   8641e:	783b      	ldrb	r3, [r7, #0]
   86420:	3208      	adds	r2, #8
   86422:	2d00      	cmp	r5, #0
   86424:	bfb4      	ite	lt
   86426:	461d      	movlt	r5, r3
   86428:	1b5d      	subge	r5, r3, r5
   8642a:	2d00      	cmp	r5, #0
   8642c:	dc0b      	bgt.n	86446 <_svfprintf_r+0x110a>
   8642e:	441e      	add	r6, r3
   86430:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86432:	f1b8 0f00 	cmp.w	r8, #0
   86436:	d1d1      	bne.n	863dc <_svfprintf_r+0x10a0>
   86438:	2b00      	cmp	r3, #0
   8643a:	f000 81f9 	beq.w	86830 <_svfprintf_r+0x14f4>
   8643e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86440:	3b01      	subs	r3, #1
   86442:	9312      	str	r3, [sp, #72]	; 0x48
   86444:	e7ce      	b.n	863e4 <_svfprintf_r+0x10a8>
   86446:	2d10      	cmp	r5, #16
   86448:	f340 84c5 	ble.w	86dd6 <_svfprintf_r+0x1a9a>
   8644c:	992b      	ldr	r1, [sp, #172]	; 0xac
   8644e:	2410      	movs	r4, #16
   86450:	460b      	mov	r3, r1
   86452:	e004      	b.n	8645e <_svfprintf_r+0x1122>
   86454:	3d10      	subs	r5, #16
   86456:	2d10      	cmp	r5, #16
   86458:	f102 0208 	add.w	r2, r2, #8
   8645c:	dd16      	ble.n	8648c <_svfprintf_r+0x1150>
   8645e:	3301      	adds	r3, #1
   86460:	4920      	ldr	r1, [pc, #128]	; (864e4 <_svfprintf_r+0x11a8>)
   86462:	3010      	adds	r0, #16
   86464:	2b07      	cmp	r3, #7
   86466:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8646a:	e9c2 1400 	strd	r1, r4, [r2]
   8646e:	ddf1      	ble.n	86454 <_svfprintf_r+0x1118>
   86470:	4651      	mov	r1, sl
   86472:	4648      	mov	r0, r9
   86474:	aa2a      	add	r2, sp, #168	; 0xa8
   86476:	f004 fbad 	bl	8abd4 <__ssprint_r>
   8647a:	2800      	cmp	r0, #0
   8647c:	f47f aba6 	bne.w	85bcc <_svfprintf_r+0x890>
   86480:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   86484:	3d10      	subs	r5, #16
   86486:	2d10      	cmp	r5, #16
   86488:	aa2d      	add	r2, sp, #180	; 0xb4
   8648a:	dce8      	bgt.n	8645e <_svfprintf_r+0x1122>
   8648c:	4619      	mov	r1, r3
   8648e:	1c4b      	adds	r3, r1, #1
   86490:	4914      	ldr	r1, [pc, #80]	; (864e4 <_svfprintf_r+0x11a8>)
   86492:	4428      	add	r0, r5
   86494:	2b07      	cmp	r3, #7
   86496:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8649a:	e9c2 1500 	strd	r1, r5, [r2]
   8649e:	f300 8215 	bgt.w	868cc <_svfprintf_r+0x1590>
   864a2:	783b      	ldrb	r3, [r7, #0]
   864a4:	3208      	adds	r2, #8
   864a6:	441e      	add	r6, r3
   864a8:	e7c2      	b.n	86430 <_svfprintf_r+0x10f4>
   864aa:	9b07      	ldr	r3, [sp, #28]
   864ac:	06da      	lsls	r2, r3, #27
   864ae:	f140 8084 	bpl.w	865ba <_svfprintf_r+0x127e>
   864b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   864b4:	2500      	movs	r5, #0
   864b6:	f853 4b04 	ldr.w	r4, [r3], #4
   864ba:	930e      	str	r3, [sp, #56]	; 0x38
   864bc:	e6fe      	b.n	862bc <_svfprintf_r+0xf80>
   864be:	4651      	mov	r1, sl
   864c0:	4648      	mov	r0, r9
   864c2:	aa2a      	add	r2, sp, #168	; 0xa8
   864c4:	f004 fb86 	bl	8abd4 <__ssprint_r>
   864c8:	2800      	cmp	r0, #0
   864ca:	f47f ab7f 	bne.w	85bcc <_svfprintf_r+0x890>
   864ce:	982c      	ldr	r0, [sp, #176]	; 0xb0
   864d0:	aa2d      	add	r2, sp, #180	; 0xb4
   864d2:	e792      	b.n	863fa <_svfprintf_r+0x10be>
   864d4:	66666667 	.word	0x66666667
   864d8:	0008bf00 	.word	0x0008bf00
   864dc:	0008bf14 	.word	0x0008bf14
   864e0:	0008bf28 	.word	0x0008bf28
   864e4:	0008bf44 	.word	0x0008bf44
   864e8:	2200      	movs	r2, #0
   864ea:	9b08      	ldr	r3, [sp, #32]
   864ec:	f8cd b01c 	str.w	fp, [sp, #28]
   864f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   864f4:	960c      	str	r6, [sp, #48]	; 0x30
   864f6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   864fa:	4693      	mov	fp, r2
   864fc:	46ca      	mov	sl, r9
   864fe:	461e      	mov	r6, r3
   86500:	46c1      	mov	r9, r8
   86502:	af56      	add	r7, sp, #344	; 0x158
   86504:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   86508:	e00b      	b.n	86522 <_svfprintf_r+0x11e6>
   8650a:	220a      	movs	r2, #10
   8650c:	2300      	movs	r3, #0
   8650e:	4620      	mov	r0, r4
   86510:	4629      	mov	r1, r5
   86512:	f005 fad1 	bl	8bab8 <__aeabi_uldivmod>
   86516:	2d00      	cmp	r5, #0
   86518:	bf08      	it	eq
   8651a:	2c0a      	cmpeq	r4, #10
   8651c:	d31b      	bcc.n	86556 <_svfprintf_r+0x121a>
   8651e:	4604      	mov	r4, r0
   86520:	460d      	mov	r5, r1
   86522:	220a      	movs	r2, #10
   86524:	2300      	movs	r3, #0
   86526:	4620      	mov	r0, r4
   86528:	4629      	mov	r1, r5
   8652a:	f005 fac5 	bl	8bab8 <__aeabi_uldivmod>
   8652e:	3230      	adds	r2, #48	; 0x30
   86530:	f807 2c01 	strb.w	r2, [r7, #-1]
   86534:	f10b 0b01 	add.w	fp, fp, #1
   86538:	3f01      	subs	r7, #1
   8653a:	2e00      	cmp	r6, #0
   8653c:	d0e5      	beq.n	8650a <_svfprintf_r+0x11ce>
   8653e:	f898 3000 	ldrb.w	r3, [r8]
   86542:	459b      	cmp	fp, r3
   86544:	d1e1      	bne.n	8650a <_svfprintf_r+0x11ce>
   86546:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   8654a:	d0de      	beq.n	8650a <_svfprintf_r+0x11ce>
   8654c:	2d00      	cmp	r5, #0
   8654e:	bf08      	it	eq
   86550:	2c0a      	cmpeq	r4, #10
   86552:	f080 8128 	bcs.w	867a6 <_svfprintf_r+0x146a>
   86556:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   8655a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   8655e:	46c8      	mov	r8, r9
   86560:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86562:	46d1      	mov	r9, sl
   86564:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86568:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   8656c:	f7ff bb9f 	b.w	85cae <_svfprintf_r+0x972>
   86570:	4651      	mov	r1, sl
   86572:	4648      	mov	r0, r9
   86574:	aa2a      	add	r2, sp, #168	; 0xa8
   86576:	931e      	str	r3, [sp, #120]	; 0x78
   86578:	f004 fb2c 	bl	8abd4 <__ssprint_r>
   8657c:	2800      	cmp	r0, #0
   8657e:	f47f ab25 	bne.w	85bcc <_svfprintf_r+0x890>
   86582:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86586:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86588:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8658a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8658e:	f7ff b84a 	b.w	85626 <_svfprintf_r+0x2ea>
   86592:	2001      	movs	r0, #1
   86594:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86596:	49c5      	ldr	r1, [pc, #788]	; (868ac <_svfprintf_r+0x1570>)
   86598:	4403      	add	r3, r0
   8659a:	4404      	add	r4, r0
   8659c:	2b07      	cmp	r3, #7
   8659e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   865a2:	e9c8 1000 	strd	r1, r0, [r8]
   865a6:	f73f abdf 	bgt.w	85d68 <_svfprintf_r+0xa2c>
   865aa:	f108 0808 	add.w	r8, r8, #8
   865ae:	f7ff bbe7 	b.w	85d80 <_svfprintf_r+0xa44>
   865b2:	46d1      	mov	r9, sl
   865b4:	46b3      	mov	fp, r6
   865b6:	f7ff bb0a 	b.w	85bce <_svfprintf_r+0x892>
   865ba:	9b07      	ldr	r3, [sp, #28]
   865bc:	065b      	lsls	r3, r3, #25
   865be:	f140 80cb 	bpl.w	86758 <_svfprintf_r+0x141c>
   865c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   865c4:	2500      	movs	r5, #0
   865c6:	f853 4b04 	ldr.w	r4, [r3], #4
   865ca:	930e      	str	r3, [sp, #56]	; 0x38
   865cc:	b2a4      	uxth	r4, r4
   865ce:	e675      	b.n	862bc <_svfprintf_r+0xf80>
   865d0:	4651      	mov	r1, sl
   865d2:	4648      	mov	r0, r9
   865d4:	aa2a      	add	r2, sp, #168	; 0xa8
   865d6:	f004 fafd 	bl	8abd4 <__ssprint_r>
   865da:	2800      	cmp	r0, #0
   865dc:	f47f aaf6 	bne.w	85bcc <_svfprintf_r+0x890>
   865e0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   865e2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   865e6:	f7ff ba3a 	b.w	85a5e <_svfprintf_r+0x722>
   865ea:	46d1      	mov	r9, sl
   865ec:	46da      	mov	sl, fp
   865ee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   865f2:	3501      	adds	r5, #1
   865f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   865f6:	4434      	add	r4, r6
   865f8:	2d07      	cmp	r5, #7
   865fa:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   865fe:	e9c8 3600 	strd	r3, r6, [r8]
   86602:	f77f ab24 	ble.w	85c4e <_svfprintf_r+0x912>
   86606:	4651      	mov	r1, sl
   86608:	4648      	mov	r0, r9
   8660a:	aa2a      	add	r2, sp, #168	; 0xa8
   8660c:	f004 fae2 	bl	8abd4 <__ssprint_r>
   86610:	2800      	cmp	r0, #0
   86612:	f47f aadb 	bne.w	85bcc <_svfprintf_r+0x890>
   86616:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8661a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8661e:	f7ff bb18 	b.w	85c52 <_svfprintf_r+0x916>
   86622:	4aa3      	ldr	r2, [pc, #652]	; (868b0 <_svfprintf_r+0x1574>)
   86624:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86626:	920f      	str	r2, [sp, #60]	; 0x3c
   86628:	3301      	adds	r3, #1
   8662a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8662c:	442c      	add	r4, r5
   8662e:	2b07      	cmp	r3, #7
   86630:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86634:	e9c8 2500 	strd	r2, r5, [r8]
   86638:	f77f a82d 	ble.w	85696 <_svfprintf_r+0x35a>
   8663c:	f7ff bbc2 	b.w	85dc4 <_svfprintf_r+0xa88>
   86640:	4651      	mov	r1, sl
   86642:	4648      	mov	r0, r9
   86644:	aa2a      	add	r2, sp, #168	; 0xa8
   86646:	f004 fac5 	bl	8abd4 <__ssprint_r>
   8664a:	2800      	cmp	r0, #0
   8664c:	f47f aabe 	bne.w	85bcc <_svfprintf_r+0x890>
   86650:	783b      	ldrb	r3, [r7, #0]
   86652:	982c      	ldr	r0, [sp, #176]	; 0xb0
   86654:	aa2d      	add	r2, sp, #180	; 0xb4
   86656:	e6e4      	b.n	86422 <_svfprintf_r+0x10e6>
   86658:	4651      	mov	r1, sl
   8665a:	4648      	mov	r0, r9
   8665c:	aa2a      	add	r2, sp, #168	; 0xa8
   8665e:	f004 fab9 	bl	8abd4 <__ssprint_r>
   86662:	2800      	cmp	r0, #0
   86664:	f47f aab2 	bne.w	85bcc <_svfprintf_r+0x890>
   86668:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8666a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8666e:	f7fe bffd 	b.w	8566c <_svfprintf_r+0x330>
   86672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86674:	990a      	ldr	r1, [sp, #40]	; 0x28
   86676:	f853 2b04 	ldr.w	r2, [r3], #4
   8667a:	465f      	mov	r7, fp
   8667c:	6011      	str	r1, [r2, #0]
   8667e:	930e      	str	r3, [sp, #56]	; 0x38
   86680:	f7ff b82a 	b.w	856d8 <_svfprintf_r+0x39c>
   86684:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86686:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86688:	3301      	adds	r3, #1
   8668a:	9818      	ldr	r0, [sp, #96]	; 0x60
   8668c:	440c      	add	r4, r1
   8668e:	2b07      	cmp	r3, #7
   86690:	e9c8 0100 	strd	r0, r1, [r8]
   86694:	942c      	str	r4, [sp, #176]	; 0xb0
   86696:	932b      	str	r3, [sp, #172]	; 0xac
   86698:	f300 80ac 	bgt.w	867f4 <_svfprintf_r+0x14b8>
   8669c:	f108 0808 	add.w	r8, r8, #8
   866a0:	2a00      	cmp	r2, #0
   866a2:	f6bf ab85 	bge.w	85db0 <_svfprintf_r+0xa74>
   866a6:	4255      	negs	r5, r2
   866a8:	3210      	adds	r2, #16
   866aa:	f280 83d3 	bge.w	86e54 <_svfprintf_r+0x1b18>
   866ae:	4651      	mov	r1, sl
   866b0:	4a7f      	ldr	r2, [pc, #508]	; (868b0 <_svfprintf_r+0x1574>)
   866b2:	46ca      	mov	sl, r9
   866b4:	9709      	str	r7, [sp, #36]	; 0x24
   866b6:	2610      	movs	r6, #16
   866b8:	4617      	mov	r7, r2
   866ba:	4689      	mov	r9, r1
   866bc:	920f      	str	r2, [sp, #60]	; 0x3c
   866be:	e005      	b.n	866cc <_svfprintf_r+0x1390>
   866c0:	f108 0808 	add.w	r8, r8, #8
   866c4:	3d10      	subs	r5, #16
   866c6:	2d10      	cmp	r5, #16
   866c8:	f340 82aa 	ble.w	86c20 <_svfprintf_r+0x18e4>
   866cc:	3301      	adds	r3, #1
   866ce:	3410      	adds	r4, #16
   866d0:	2b07      	cmp	r3, #7
   866d2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   866d6:	e9c8 7600 	strd	r7, r6, [r8]
   866da:	ddf1      	ble.n	866c0 <_svfprintf_r+0x1384>
   866dc:	4649      	mov	r1, r9
   866de:	4650      	mov	r0, sl
   866e0:	aa2a      	add	r2, sp, #168	; 0xa8
   866e2:	f004 fa77 	bl	8abd4 <__ssprint_r>
   866e6:	2800      	cmp	r0, #0
   866e8:	f040 825f 	bne.w	86baa <_svfprintf_r+0x186e>
   866ec:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   866f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   866f4:	e7e6      	b.n	866c4 <_svfprintf_r+0x1388>
   866f6:	4638      	mov	r0, r7
   866f8:	f004 fa0a 	bl	8ab10 <strlen>
   866fc:	462b      	mov	r3, r5
   866fe:	4602      	mov	r2, r0
   86700:	9509      	str	r5, [sp, #36]	; 0x24
   86702:	f7ff b894 	b.w	8582e <_svfprintf_r+0x4f2>
   86706:	9b07      	ldr	r3, [sp, #28]
   86708:	2500      	movs	r5, #0
   8670a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8670e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86710:	f853 4b04 	ldr.w	r4, [r3], #4
   86714:	930e      	str	r3, [sp, #56]	; 0x38
   86716:	bf18      	it	ne
   86718:	b2e4      	uxtbne	r4, r4
   8671a:	f7fe bf1b 	b.w	85554 <_svfprintf_r+0x218>
   8671e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86720:	9b08      	ldr	r3, [sp, #32]
   86722:	f852 4b04 	ldr.w	r4, [r2], #4
   86726:	f413 7f00 	tst.w	r3, #512	; 0x200
   8672a:	f04f 0500 	mov.w	r5, #0
   8672e:	f04f 0301 	mov.w	r3, #1
   86732:	920e      	str	r2, [sp, #56]	; 0x38
   86734:	bf18      	it	ne
   86736:	b2e4      	uxtbne	r4, r4
   86738:	f7fe bf11 	b.w	8555e <_svfprintf_r+0x222>
   8673c:	9b07      	ldr	r3, [sp, #28]
   8673e:	f413 7f00 	tst.w	r3, #512	; 0x200
   86742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86744:	f853 4b04 	ldr.w	r4, [r3], #4
   86748:	bf18      	it	ne
   8674a:	b264      	sxtbne	r4, r4
   8674c:	17e5      	asrs	r5, r4, #31
   8674e:	930e      	str	r3, [sp, #56]	; 0x38
   86750:	4622      	mov	r2, r4
   86752:	462b      	mov	r3, r5
   86754:	f7fe bed4 	b.w	85500 <_svfprintf_r+0x1c4>
   86758:	9b07      	ldr	r3, [sp, #28]
   8675a:	2500      	movs	r5, #0
   8675c:	f413 7f00 	tst.w	r3, #512	; 0x200
   86760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86762:	f853 4b04 	ldr.w	r4, [r3], #4
   86766:	930e      	str	r3, [sp, #56]	; 0x38
   86768:	bf18      	it	ne
   8676a:	b2e4      	uxtbne	r4, r4
   8676c:	e5a6      	b.n	862bc <_svfprintf_r+0xf80>
   8676e:	4b50      	ldr	r3, [pc, #320]	; (868b0 <_svfprintf_r+0x1574>)
   86770:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86772:	930f      	str	r3, [sp, #60]	; 0x3c
   86774:	f7ff ba15 	b.w	85ba2 <_svfprintf_r+0x866>
   86778:	232d      	movs	r3, #45	; 0x2d
   8677a:	461a      	mov	r2, r3
   8677c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86780:	f7fe bfee 	b.w	85760 <_svfprintf_r+0x424>
   86784:	464a      	mov	r2, r9
   86786:	46d1      	mov	r9, sl
   86788:	4692      	mov	sl, r2
   8678a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8678c:	3301      	adds	r3, #1
   8678e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86790:	442c      	add	r4, r5
   86792:	2b07      	cmp	r3, #7
   86794:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86798:	e9c8 2500 	strd	r2, r5, [r8]
   8679c:	dc3b      	bgt.n	86816 <_svfprintf_r+0x14da>
   8679e:	f108 0808 	add.w	r8, r8, #8
   867a2:	f7ff bb8c 	b.w	85ebe <_svfprintf_r+0xb82>
   867a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   867a8:	991c      	ldr	r1, [sp, #112]	; 0x70
   867aa:	1aff      	subs	r7, r7, r3
   867ac:	461a      	mov	r2, r3
   867ae:	4638      	mov	r0, r7
   867b0:	f004 f9dc 	bl	8ab6c <strncpy>
   867b4:	f898 3001 	ldrb.w	r3, [r8, #1]
   867b8:	b10b      	cbz	r3, 867be <_svfprintf_r+0x1482>
   867ba:	f108 0801 	add.w	r8, r8, #1
   867be:	220a      	movs	r2, #10
   867c0:	2300      	movs	r3, #0
   867c2:	4620      	mov	r0, r4
   867c4:	4629      	mov	r1, r5
   867c6:	f005 f977 	bl	8bab8 <__aeabi_uldivmod>
   867ca:	f04f 0b00 	mov.w	fp, #0
   867ce:	e6a6      	b.n	8651e <_svfprintf_r+0x11e2>
   867d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   867d2:	18bd      	adds	r5, r7, r2
   867d4:	1bad      	subs	r5, r5, r6
   867d6:	1ad3      	subs	r3, r2, r3
   867d8:	429d      	cmp	r5, r3
   867da:	bfa8      	it	ge
   867dc:	461d      	movge	r5, r3
   867de:	f7ff bba0 	b.w	85f22 <_svfprintf_r+0xbe6>
   867e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   867e6:	f853 2b04 	ldr.w	r2, [r3], #4
   867ea:	465f      	mov	r7, fp
   867ec:	8011      	strh	r1, [r2, #0]
   867ee:	930e      	str	r3, [sp, #56]	; 0x38
   867f0:	f7fe bf72 	b.w	856d8 <_svfprintf_r+0x39c>
   867f4:	4651      	mov	r1, sl
   867f6:	4648      	mov	r0, r9
   867f8:	aa2a      	add	r2, sp, #168	; 0xa8
   867fa:	f004 f9eb 	bl	8abd4 <__ssprint_r>
   867fe:	2800      	cmp	r0, #0
   86800:	f47f a9e4 	bne.w	85bcc <_svfprintf_r+0x890>
   86804:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86808:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8680a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8680e:	e747      	b.n	866a0 <_svfprintf_r+0x1364>
   86810:	2306      	movs	r3, #6
   86812:	9309      	str	r3, [sp, #36]	; 0x24
   86814:	e482      	b.n	8611c <_svfprintf_r+0xde0>
   86816:	4651      	mov	r1, sl
   86818:	4648      	mov	r0, r9
   8681a:	aa2a      	add	r2, sp, #168	; 0xa8
   8681c:	f004 f9da 	bl	8abd4 <__ssprint_r>
   86820:	2800      	cmp	r0, #0
   86822:	f47f a9d3 	bne.w	85bcc <_svfprintf_r+0x890>
   86826:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86828:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8682c:	f7ff bb47 	b.w	85ebe <_svfprintf_r+0xb82>
   86830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86832:	971a      	str	r7, [sp, #104]	; 0x68
   86834:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86836:	4690      	mov	r8, r2
   86838:	18fb      	adds	r3, r7, r3
   8683a:	429e      	cmp	r6, r3
   8683c:	4632      	mov	r2, r6
   8683e:	bf28      	it	cs
   86840:	461a      	movcs	r2, r3
   86842:	4604      	mov	r4, r0
   86844:	4616      	mov	r6, r2
   86846:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8684a:	f7ff bb3f 	b.w	85ecc <_svfprintf_r+0xb90>
   8684e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86850:	1cd8      	adds	r0, r3, #3
   86852:	9310      	str	r3, [sp, #64]	; 0x40
   86854:	db02      	blt.n	8685c <_svfprintf_r+0x1520>
   86856:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86858:	4293      	cmp	r3, r2
   8685a:	dd04      	ble.n	86866 <_svfprintf_r+0x152a>
   8685c:	3e02      	subs	r6, #2
   8685e:	f026 0320 	bic.w	r3, r6, #32
   86862:	9308      	str	r3, [sp, #32]
   86864:	e49b      	b.n	8619e <_svfprintf_r+0xe62>
   86866:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86868:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8686a:	428b      	cmp	r3, r1
   8686c:	f2c0 817a 	blt.w	86b64 <_svfprintf_r+0x1828>
   86870:	07ea      	lsls	r2, r5, #31
   86872:	f140 8283 	bpl.w	86d7c <_svfprintf_r+0x1a40>
   86876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86878:	4413      	add	r3, r2
   8687a:	930c      	str	r3, [sp, #48]	; 0x30
   8687c:	056e      	lsls	r6, r5, #21
   8687e:	f140 8277 	bpl.w	86d70 <_svfprintf_r+0x1a34>
   86882:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86884:	2b00      	cmp	r3, #0
   86886:	f300 8210 	bgt.w	86caa <_svfprintf_r+0x196e>
   8688a:	2667      	movs	r6, #103	; 0x67
   8688c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8688e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86892:	9308      	str	r3, [sp, #32]
   86894:	2300      	movs	r3, #0
   86896:	9312      	str	r3, [sp, #72]	; 0x48
   86898:	9316      	str	r3, [sp, #88]	; 0x58
   8689a:	e4e4      	b.n	86266 <_svfprintf_r+0xf2a>
   8689c:	222d      	movs	r2, #45	; 0x2d
   8689e:	2300      	movs	r3, #0
   868a0:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   868a4:	9309      	str	r3, [sp, #36]	; 0x24
   868a6:	f7fe bf70 	b.w	8578a <_svfprintf_r+0x44e>
   868aa:	bf00      	nop
   868ac:	0008bf30 	.word	0x0008bf30
   868b0:	0008bf44 	.word	0x0008bf44
   868b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   868b6:	42a3      	cmp	r3, r4
   868b8:	f4bf ac65 	bcs.w	86186 <_svfprintf_r+0xe4a>
   868bc:	2130      	movs	r1, #48	; 0x30
   868be:	1c5a      	adds	r2, r3, #1
   868c0:	9228      	str	r2, [sp, #160]	; 0xa0
   868c2:	7019      	strb	r1, [r3, #0]
   868c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   868c6:	429c      	cmp	r4, r3
   868c8:	d8f9      	bhi.n	868be <_svfprintf_r+0x1582>
   868ca:	e45c      	b.n	86186 <_svfprintf_r+0xe4a>
   868cc:	4651      	mov	r1, sl
   868ce:	4648      	mov	r0, r9
   868d0:	aa2a      	add	r2, sp, #168	; 0xa8
   868d2:	f004 f97f 	bl	8abd4 <__ssprint_r>
   868d6:	2800      	cmp	r0, #0
   868d8:	f47f a978 	bne.w	85bcc <_svfprintf_r+0x890>
   868dc:	783b      	ldrb	r3, [r7, #0]
   868de:	982c      	ldr	r0, [sp, #176]	; 0xb0
   868e0:	aa2d      	add	r2, sp, #180	; 0xb4
   868e2:	441e      	add	r6, r3
   868e4:	e5a4      	b.n	86430 <_svfprintf_r+0x10f4>
   868e6:	4651      	mov	r1, sl
   868e8:	4648      	mov	r0, r9
   868ea:	aa2a      	add	r2, sp, #168	; 0xa8
   868ec:	f004 f972 	bl	8abd4 <__ssprint_r>
   868f0:	2800      	cmp	r0, #0
   868f2:	f47f a96b 	bne.w	85bcc <_svfprintf_r+0x890>
   868f6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   868f8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   868fc:	f7ff bad7 	b.w	85eae <_svfprintf_r+0xb72>
   86900:	4651      	mov	r1, sl
   86902:	4648      	mov	r0, r9
   86904:	aa2a      	add	r2, sp, #168	; 0xa8
   86906:	f004 f965 	bl	8abd4 <__ssprint_r>
   8690a:	2800      	cmp	r0, #0
   8690c:	f47f a95e 	bne.w	85bcc <_svfprintf_r+0x890>
   86910:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86912:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86914:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86918:	f7ff baee 	b.w	85ef8 <_svfprintf_r+0xbbc>
   8691c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8691e:	a928      	add	r1, sp, #160	; 0xa0
   86920:	e9cd 0400 	strd	r0, r4, [sp]
   86924:	9104      	str	r1, [sp, #16]
   86926:	a825      	add	r0, sp, #148	; 0x94
   86928:	a924      	add	r1, sp, #144	; 0x90
   8692a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8692e:	4648      	mov	r0, r9
   86930:	f001 faca 	bl	87ec8 <_dtoa_r>
   86934:	2d47      	cmp	r5, #71	; 0x47
   86936:	4607      	mov	r7, r0
   86938:	d119      	bne.n	8696e <_svfprintf_r+0x1632>
   8693a:	9d07      	ldr	r5, [sp, #28]
   8693c:	462b      	mov	r3, r5
   8693e:	07db      	lsls	r3, r3, #31
   86940:	f100 812a 	bmi.w	86b98 <_svfprintf_r+0x185c>
   86944:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86946:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86948:	9207      	str	r2, [sp, #28]
   8694a:	2247      	movs	r2, #71	; 0x47
   8694c:	9208      	str	r2, [sp, #32]
   8694e:	e41a      	b.n	86186 <_svfprintf_r+0xe4a>
   86950:	2003      	movs	r0, #3
   86952:	9c09      	ldr	r4, [sp, #36]	; 0x24
   86954:	a928      	add	r1, sp, #160	; 0xa0
   86956:	e9cd 0400 	strd	r0, r4, [sp]
   8695a:	9104      	str	r1, [sp, #16]
   8695c:	a825      	add	r0, sp, #148	; 0x94
   8695e:	a924      	add	r1, sp, #144	; 0x90
   86960:	e9cd 1002 	strd	r1, r0, [sp, #8]
   86964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86966:	4648      	mov	r0, r9
   86968:	f001 faae 	bl	87ec8 <_dtoa_r>
   8696c:	4607      	mov	r7, r0
   8696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86970:	2d46      	cmp	r5, #70	; 0x46
   86972:	eb07 0403 	add.w	r4, r7, r3
   86976:	f47f abf9 	bne.w	8616c <_svfprintf_r+0xe30>
   8697a:	783b      	ldrb	r3, [r7, #0]
   8697c:	2b30      	cmp	r3, #48	; 0x30
   8697e:	f000 821c 	beq.w	86dba <_svfprintf_r+0x1a7e>
   86982:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86984:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86986:	9d07      	ldr	r5, [sp, #28]
   86988:	441c      	add	r4, r3
   8698a:	9207      	str	r2, [sp, #28]
   8698c:	f7ff bbf1 	b.w	86172 <_svfprintf_r+0xe36>
   86990:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86994:	f7ff b9c3 	b.w	85d1e <_svfprintf_r+0x9e2>
   86998:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8699a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8699e:	9308      	str	r3, [sp, #32]
   869a0:	930c      	str	r3, [sp, #48]	; 0x30
   869a2:	9009      	str	r0, [sp, #36]	; 0x24
   869a4:	940e      	str	r4, [sp, #56]	; 0x38
   869a6:	9012      	str	r0, [sp, #72]	; 0x48
   869a8:	9016      	str	r0, [sp, #88]	; 0x58
   869aa:	9010      	str	r0, [sp, #64]	; 0x40
   869ac:	f7fe beea 	b.w	85784 <_svfprintf_r+0x448>
   869b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   869b2:	2a00      	cmp	r2, #0
   869b4:	9210      	str	r2, [sp, #64]	; 0x40
   869b6:	f340 821b 	ble.w	86df0 <_svfprintf_r+0x1ab4>
   869ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   869bc:	f005 0301 	and.w	r3, r5, #1
   869c0:	430b      	orrs	r3, r1
   869c2:	f040 819a 	bne.w	86cfa <_svfprintf_r+0x19be>
   869c6:	2666      	movs	r6, #102	; 0x66
   869c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   869ca:	930c      	str	r3, [sp, #48]	; 0x30
   869cc:	056a      	lsls	r2, r5, #21
   869ce:	f100 816d 	bmi.w	86cac <_svfprintf_r+0x1970>
   869d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   869d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   869d8:	9308      	str	r3, [sp, #32]
   869da:	e75b      	b.n	86894 <_svfprintf_r+0x1558>
   869dc:	4651      	mov	r1, sl
   869de:	4648      	mov	r0, r9
   869e0:	aa2a      	add	r2, sp, #168	; 0xa8
   869e2:	f004 f8f7 	bl	8abd4 <__ssprint_r>
   869e6:	2800      	cmp	r0, #0
   869e8:	f47f a8f0 	bne.w	85bcc <_svfprintf_r+0x890>
   869ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   869ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   869f0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   869f2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   869f6:	1ad3      	subs	r3, r2, r3
   869f8:	f7ff ba93 	b.w	85f22 <_svfprintf_r+0xbe6>
   869fc:	2330      	movs	r3, #48	; 0x30
   869fe:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   86a02:	2358      	movs	r3, #88	; 0x58
   86a04:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   86a08:	9b07      	ldr	r3, [sp, #28]
   86a0a:	f043 0402 	orr.w	r4, r3, #2
   86a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86a10:	2b63      	cmp	r3, #99	; 0x63
   86a12:	f300 80f2 	bgt.w	86bfa <_svfprintf_r+0x18be>
   86a16:	2300      	movs	r3, #0
   86a18:	af3d      	add	r7, sp, #244	; 0xf4
   86a1a:	930d      	str	r3, [sp, #52]	; 0x34
   86a1c:	9b07      	ldr	r3, [sp, #28]
   86a1e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86a22:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   86a26:	9312      	str	r3, [sp, #72]	; 0x48
   86a28:	4613      	mov	r3, r2
   86a2a:	2b00      	cmp	r3, #0
   86a2c:	f026 0520 	bic.w	r5, r6, #32
   86a30:	9407      	str	r4, [sp, #28]
   86a32:	f2c0 808d 	blt.w	86b50 <_svfprintf_r+0x1814>
   86a36:	930f      	str	r3, [sp, #60]	; 0x3c
   86a38:	2300      	movs	r3, #0
   86a3a:	9508      	str	r5, [sp, #32]
   86a3c:	910c      	str	r1, [sp, #48]	; 0x30
   86a3e:	931e      	str	r3, [sp, #120]	; 0x78
   86a40:	2e61      	cmp	r6, #97	; 0x61
   86a42:	f000 817d 	beq.w	86d40 <_svfprintf_r+0x1a04>
   86a46:	2e41      	cmp	r6, #65	; 0x41
   86a48:	f47f ab77 	bne.w	8613a <_svfprintf_r+0xdfe>
   86a4c:	aa24      	add	r2, sp, #144	; 0x90
   86a4e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a50:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86a52:	f003 ffcd 	bl	8a9f0 <frexp>
   86a56:	2200      	movs	r2, #0
   86a58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86a5c:	f004 fd54 	bl	8b508 <__aeabi_dmul>
   86a60:	4604      	mov	r4, r0
   86a62:	460d      	mov	r5, r1
   86a64:	2200      	movs	r2, #0
   86a66:	2300      	movs	r3, #0
   86a68:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   86a6c:	f004 ffb4 	bl	8b9d8 <__aeabi_dcmpeq>
   86a70:	b108      	cbz	r0, 86a76 <_svfprintf_r+0x173a>
   86a72:	2301      	movs	r3, #1
   86a74:	9324      	str	r3, [sp, #144]	; 0x90
   86a76:	4bae      	ldr	r3, [pc, #696]	; (86d30 <_svfprintf_r+0x19f4>)
   86a78:	930c      	str	r3, [sp, #48]	; 0x30
   86a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86a7c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   86a80:	3b01      	subs	r3, #1
   86a82:	9613      	str	r6, [sp, #76]	; 0x4c
   86a84:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   86a88:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   86a8c:	9721      	str	r7, [sp, #132]	; 0x84
   86a8e:	46ba      	mov	sl, r7
   86a90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   86a94:	4699      	mov	r9, r3
   86a96:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86a9a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   86a9e:	e006      	b.n	86aae <_svfprintf_r+0x1772>
   86aa0:	2200      	movs	r2, #0
   86aa2:	2300      	movs	r3, #0
   86aa4:	f004 ff98 	bl	8b9d8 <__aeabi_dcmpeq>
   86aa8:	f109 39ff 	add.w	r9, r9, #4294967295
   86aac:	b9e8      	cbnz	r0, 86aea <_svfprintf_r+0x17ae>
   86aae:	2200      	movs	r2, #0
   86ab0:	4ba0      	ldr	r3, [pc, #640]	; (86d34 <_svfprintf_r+0x19f8>)
   86ab2:	4630      	mov	r0, r6
   86ab4:	4639      	mov	r1, r7
   86ab6:	f004 fd27 	bl	8b508 <__aeabi_dmul>
   86aba:	460d      	mov	r5, r1
   86abc:	4604      	mov	r4, r0
   86abe:	f004 ffd3 	bl	8ba68 <__aeabi_d2iz>
   86ac2:	4680      	mov	r8, r0
   86ac4:	f004 fcb6 	bl	8b434 <__aeabi_i2d>
   86ac8:	460b      	mov	r3, r1
   86aca:	4602      	mov	r2, r0
   86acc:	4629      	mov	r1, r5
   86ace:	4620      	mov	r0, r4
   86ad0:	f004 fb62 	bl	8b198 <__aeabi_dsub>
   86ad4:	f81b 3008 	ldrb.w	r3, [fp, r8]
   86ad8:	f1b9 3fff 	cmp.w	r9, #4294967295
   86adc:	4655      	mov	r5, sl
   86ade:	4606      	mov	r6, r0
   86ae0:	460f      	mov	r7, r1
   86ae2:	464c      	mov	r4, r9
   86ae4:	f80a 3b01 	strb.w	r3, [sl], #1
   86ae8:	d1da      	bne.n	86aa0 <_svfprintf_r+0x1764>
   86aea:	4630      	mov	r0, r6
   86aec:	4639      	mov	r1, r7
   86aee:	2200      	movs	r2, #0
   86af0:	4b91      	ldr	r3, [pc, #580]	; (86d38 <_svfprintf_r+0x19fc>)
   86af2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   86af6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   86af8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   86afc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   86b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   86b04:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   86b08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   86b0c:	9f21      	ldr	r7, [sp, #132]	; 0x84
   86b0e:	f004 ff8b 	bl	8ba28 <__aeabi_dcmpgt>
   86b12:	2800      	cmp	r0, #0
   86b14:	d155      	bne.n	86bc2 <_svfprintf_r+0x1886>
   86b16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   86b1a:	2200      	movs	r2, #0
   86b1c:	4b86      	ldr	r3, [pc, #536]	; (86d38 <_svfprintf_r+0x19fc>)
   86b1e:	f004 ff5b 	bl	8b9d8 <__aeabi_dcmpeq>
   86b22:	b110      	cbz	r0, 86b2a <_svfprintf_r+0x17ee>
   86b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86b26:	07db      	lsls	r3, r3, #31
   86b28:	d44b      	bmi.n	86bc2 <_svfprintf_r+0x1886>
   86b2a:	2c00      	cmp	r4, #0
   86b2c:	db08      	blt.n	86b40 <_svfprintf_r+0x1804>
   86b2e:	2230      	movs	r2, #48	; 0x30
   86b30:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86b32:	1c63      	adds	r3, r4, #1
   86b34:	440b      	add	r3, r1
   86b36:	f801 2b01 	strb.w	r2, [r1], #1
   86b3a:	428b      	cmp	r3, r1
   86b3c:	d1fb      	bne.n	86b36 <_svfprintf_r+0x17fa>
   86b3e:	910f      	str	r1, [sp, #60]	; 0x3c
   86b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86b42:	9d07      	ldr	r5, [sp, #28]
   86b44:	1bdb      	subs	r3, r3, r7
   86b46:	9313      	str	r3, [sp, #76]	; 0x4c
   86b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86b4a:	9307      	str	r3, [sp, #28]
   86b4c:	f7ff bb1d 	b.w	8618a <_svfprintf_r+0xe4e>
   86b50:	9508      	str	r5, [sp, #32]
   86b52:	232d      	movs	r3, #45	; 0x2d
   86b54:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86b58:	931e      	str	r3, [sp, #120]	; 0x78
   86b5a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   86b5e:	910c      	str	r1, [sp, #48]	; 0x30
   86b60:	930f      	str	r3, [sp, #60]	; 0x3c
   86b62:	e76d      	b.n	86a40 <_svfprintf_r+0x1704>
   86b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86b66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86b68:	189a      	adds	r2, r3, r2
   86b6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86b6c:	920c      	str	r2, [sp, #48]	; 0x30
   86b6e:	2b00      	cmp	r3, #0
   86b70:	f340 811a 	ble.w	86da8 <_svfprintf_r+0x1a6c>
   86b74:	2667      	movs	r6, #103	; 0x67
   86b76:	e729      	b.n	869cc <_svfprintf_r+0x1690>
   86b78:	2300      	movs	r3, #0
   86b7a:	9309      	str	r3, [sp, #36]	; 0x24
   86b7c:	f7fe bc2b 	b.w	853d6 <_svfprintf_r+0x9a>
   86b80:	4648      	mov	r0, r9
   86b82:	4651      	mov	r1, sl
   86b84:	aa2a      	add	r2, sp, #168	; 0xa8
   86b86:	f004 f825 	bl	8abd4 <__ssprint_r>
   86b8a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   86b8e:	f7fe bdae 	b.w	856ee <_svfprintf_r+0x3b2>
   86b92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86b94:	f7ff b95f 	b.w	85e56 <_svfprintf_r+0xb1a>
   86b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86b9a:	9d07      	ldr	r5, [sp, #28]
   86b9c:	18fc      	adds	r4, r7, r3
   86b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86ba0:	9307      	str	r3, [sp, #28]
   86ba2:	2347      	movs	r3, #71	; 0x47
   86ba4:	9308      	str	r3, [sp, #32]
   86ba6:	f7ff bae4 	b.w	86172 <_svfprintf_r+0xe36>
   86baa:	46cb      	mov	fp, r9
   86bac:	46d1      	mov	r9, sl
   86bae:	f7ff b80e 	b.w	85bce <_svfprintf_r+0x892>
   86bb2:	46d1      	mov	r9, sl
   86bb4:	f7ff b80b 	b.w	85bce <_svfprintf_r+0x892>
   86bb8:	4b60      	ldr	r3, [pc, #384]	; (86d3c <_svfprintf_r+0x1a00>)
   86bba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86bbc:	930f      	str	r3, [sp, #60]	; 0x3c
   86bbe:	f7fe bfb7 	b.w	85b30 <_svfprintf_r+0x7f4>
   86bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
   86bc6:	9528      	str	r5, [sp, #160]	; 0xa0
   86bc8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   86bcc:	7bc9      	ldrb	r1, [r1, #15]
   86bce:	428a      	cmp	r2, r1
   86bd0:	f040 812a 	bne.w	86e28 <_svfprintf_r+0x1aec>
   86bd4:	2030      	movs	r0, #48	; 0x30
   86bd6:	f803 0c01 	strb.w	r0, [r3, #-1]
   86bda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   86bdc:	1e5a      	subs	r2, r3, #1
   86bde:	9228      	str	r2, [sp, #160]	; 0xa0
   86be0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   86be4:	4291      	cmp	r1, r2
   86be6:	d0f6      	beq.n	86bd6 <_svfprintf_r+0x189a>
   86be8:	2a39      	cmp	r2, #57	; 0x39
   86bea:	bf0b      	itete	eq
   86bec:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   86bee:	3201      	addne	r2, #1
   86bf0:	7a92      	ldrbeq	r2, [r2, #10]
   86bf2:	b2d2      	uxtbne	r2, r2
   86bf4:	f803 2c01 	strb.w	r2, [r3, #-1]
   86bf8:	e7a2      	b.n	86b40 <_svfprintf_r+0x1804>
   86bfa:	4648      	mov	r0, r9
   86bfc:	1c59      	adds	r1, r3, #1
   86bfe:	f002 fe11 	bl	89824 <_malloc_r>
   86c02:	4607      	mov	r7, r0
   86c04:	2800      	cmp	r0, #0
   86c06:	f000 811d 	beq.w	86e44 <_svfprintf_r+0x1b08>
   86c0a:	900d      	str	r0, [sp, #52]	; 0x34
   86c0c:	e706      	b.n	86a1c <_svfprintf_r+0x16e0>
   86c0e:	2330      	movs	r3, #48	; 0x30
   86c10:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   86c14:	2378      	movs	r3, #120	; 0x78
   86c16:	e6f5      	b.n	86a04 <_svfprintf_r+0x16c8>
   86c18:	9b07      	ldr	r3, [sp, #28]
   86c1a:	9308      	str	r3, [sp, #32]
   86c1c:	f7ff b894 	b.w	85d48 <_svfprintf_r+0xa0c>
   86c20:	464a      	mov	r2, r9
   86c22:	46d1      	mov	r9, sl
   86c24:	4692      	mov	sl, r2
   86c26:	9f09      	ldr	r7, [sp, #36]	; 0x24
   86c28:	3301      	adds	r3, #1
   86c2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86c2c:	442c      	add	r4, r5
   86c2e:	2b07      	cmp	r3, #7
   86c30:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86c34:	e9c8 2500 	strd	r2, r5, [r8]
   86c38:	f77f a8b8 	ble.w	85dac <_svfprintf_r+0xa70>
   86c3c:	4651      	mov	r1, sl
   86c3e:	4648      	mov	r0, r9
   86c40:	aa2a      	add	r2, sp, #168	; 0xa8
   86c42:	f003 ffc7 	bl	8abd4 <__ssprint_r>
   86c46:	2800      	cmp	r0, #0
   86c48:	f47e afc0 	bne.w	85bcc <_svfprintf_r+0x890>
   86c4c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86c50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86c54:	f7ff b8ac 	b.w	85db0 <_svfprintf_r+0xa74>
   86c58:	2b00      	cmp	r3, #0
   86c5a:	bf08      	it	eq
   86c5c:	2301      	moveq	r3, #1
   86c5e:	9309      	str	r3, [sp, #36]	; 0x24
   86c60:	9b07      	ldr	r3, [sp, #28]
   86c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86c66:	9312      	str	r3, [sp, #72]	; 0x48
   86c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86c6a:	2b00      	cmp	r3, #0
   86c6c:	930c      	str	r3, [sp, #48]	; 0x30
   86c6e:	f2c0 80bd 	blt.w	86dec <_svfprintf_r+0x1ab0>
   86c72:	2402      	movs	r4, #2
   86c74:	9d09      	ldr	r5, [sp, #36]	; 0x24
   86c76:	a828      	add	r0, sp, #160	; 0xa0
   86c78:	aa25      	add	r2, sp, #148	; 0x94
   86c7a:	ab24      	add	r3, sp, #144	; 0x90
   86c7c:	e9cd 2003 	strd	r2, r0, [sp, #12]
   86c80:	e9cd 4500 	strd	r4, r5, [sp]
   86c84:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   86c88:	9302      	str	r3, [sp, #8]
   86c8a:	4622      	mov	r2, r4
   86c8c:	462b      	mov	r3, r5
   86c8e:	4648      	mov	r0, r9
   86c90:	911e      	str	r1, [sp, #120]	; 0x78
   86c92:	f001 f919 	bl	87ec8 <_dtoa_r>
   86c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86c98:	4607      	mov	r7, r0
   86c9a:	930f      	str	r3, [sp, #60]	; 0x3c
   86c9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86c9e:	940c      	str	r4, [sp, #48]	; 0x30
   86ca0:	930d      	str	r3, [sp, #52]	; 0x34
   86ca2:	e64a      	b.n	8693a <_svfprintf_r+0x15fe>
   86ca4:	2300      	movs	r3, #0
   86ca6:	930d      	str	r3, [sp, #52]	; 0x34
   86ca8:	e753      	b.n	86b52 <_svfprintf_r+0x1816>
   86caa:	2667      	movs	r6, #103	; 0x67
   86cac:	991a      	ldr	r1, [sp, #104]	; 0x68
   86cae:	780b      	ldrb	r3, [r1, #0]
   86cb0:	2bff      	cmp	r3, #255	; 0xff
   86cb2:	f000 80de 	beq.w	86e72 <_svfprintf_r+0x1b36>
   86cb6:	2400      	movs	r4, #0
   86cb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   86cba:	4620      	mov	r0, r4
   86cbc:	e003      	b.n	86cc6 <_svfprintf_r+0x198a>
   86cbe:	3001      	adds	r0, #1
   86cc0:	3101      	adds	r1, #1
   86cc2:	2bff      	cmp	r3, #255	; 0xff
   86cc4:	d008      	beq.n	86cd8 <_svfprintf_r+0x199c>
   86cc6:	4293      	cmp	r3, r2
   86cc8:	da06      	bge.n	86cd8 <_svfprintf_r+0x199c>
   86cca:	1ad2      	subs	r2, r2, r3
   86ccc:	784b      	ldrb	r3, [r1, #1]
   86cce:	2b00      	cmp	r3, #0
   86cd0:	d1f5      	bne.n	86cbe <_svfprintf_r+0x1982>
   86cd2:	780b      	ldrb	r3, [r1, #0]
   86cd4:	3401      	adds	r4, #1
   86cd6:	e7f4      	b.n	86cc2 <_svfprintf_r+0x1986>
   86cd8:	911a      	str	r1, [sp, #104]	; 0x68
   86cda:	9210      	str	r2, [sp, #64]	; 0x40
   86cdc:	9016      	str	r0, [sp, #88]	; 0x58
   86cde:	9412      	str	r4, [sp, #72]	; 0x48
   86ce0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86ce2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86ce4:	990c      	ldr	r1, [sp, #48]	; 0x30
   86ce6:	4413      	add	r3, r2
   86ce8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   86cea:	fb02 1303 	mla	r3, r2, r3, r1
   86cee:	930c      	str	r3, [sp, #48]	; 0x30
   86cf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86cf4:	9308      	str	r3, [sp, #32]
   86cf6:	f7ff bab6 	b.w	86266 <_svfprintf_r+0xf2a>
   86cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86cfc:	2666      	movs	r6, #102	; 0x66
   86cfe:	18d3      	adds	r3, r2, r3
   86d00:	4419      	add	r1, r3
   86d02:	910c      	str	r1, [sp, #48]	; 0x30
   86d04:	e662      	b.n	869cc <_svfprintf_r+0x1690>
   86d06:	f106 020f 	add.w	r2, r6, #15
   86d0a:	2101      	movs	r1, #1
   86d0c:	b2d2      	uxtb	r2, r2
   86d0e:	f7ff ba4f 	b.w	861b0 <_svfprintf_r+0xe74>
   86d12:	2900      	cmp	r1, #0
   86d14:	d167      	bne.n	86de6 <_svfprintf_r+0x1aaa>
   86d16:	2230      	movs	r2, #48	; 0x30
   86d18:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   86d1c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   86d20:	3330      	adds	r3, #48	; 0x30
   86d22:	f802 3b01 	strb.w	r3, [r2], #1
   86d26:	ab26      	add	r3, sp, #152	; 0x98
   86d28:	1ad3      	subs	r3, r2, r3
   86d2a:	931b      	str	r3, [sp, #108]	; 0x6c
   86d2c:	f7ff ba83 	b.w	86236 <_svfprintf_r+0xefa>
   86d30:	0008bf14 	.word	0x0008bf14
   86d34:	40300000 	.word	0x40300000
   86d38:	3fe00000 	.word	0x3fe00000
   86d3c:	0008bf44 	.word	0x0008bf44
   86d40:	aa24      	add	r2, sp, #144	; 0x90
   86d42:	980c      	ldr	r0, [sp, #48]	; 0x30
   86d44:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86d46:	f003 fe53 	bl	8a9f0 <frexp>
   86d4a:	2200      	movs	r2, #0
   86d4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   86d50:	f004 fbda 	bl	8b508 <__aeabi_dmul>
   86d54:	4604      	mov	r4, r0
   86d56:	460d      	mov	r5, r1
   86d58:	2200      	movs	r2, #0
   86d5a:	2300      	movs	r3, #0
   86d5c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   86d60:	f004 fe3a 	bl	8b9d8 <__aeabi_dcmpeq>
   86d64:	b108      	cbz	r0, 86d6a <_svfprintf_r+0x1a2e>
   86d66:	2301      	movs	r3, #1
   86d68:	9324      	str	r3, [sp, #144]	; 0x90
   86d6a:	4b44      	ldr	r3, [pc, #272]	; (86e7c <_svfprintf_r+0x1b40>)
   86d6c:	930c      	str	r3, [sp, #48]	; 0x30
   86d6e:	e684      	b.n	86a7a <_svfprintf_r+0x173e>
   86d70:	2667      	movs	r6, #103	; 0x67
   86d72:	e62e      	b.n	869d2 <_svfprintf_r+0x1696>
   86d74:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   86d78:	f7fe bcb9 	b.w	856ee <_svfprintf_r+0x3b2>
   86d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86d7e:	930c      	str	r3, [sp, #48]	; 0x30
   86d80:	e57c      	b.n	8687c <_svfprintf_r+0x1540>
   86d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86d84:	2003      	movs	r0, #3
   86d86:	2b00      	cmp	r3, #0
   86d88:	bfb8      	it	lt
   86d8a:	232d      	movlt	r3, #45	; 0x2d
   86d8c:	f04f 0100 	mov.w	r1, #0
   86d90:	bfba      	itte	lt
   86d92:	461a      	movlt	r2, r3
   86d94:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   86d98:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   86d9c:	4f38      	ldr	r7, [pc, #224]	; (86e80 <_svfprintf_r+0x1b44>)
   86d9e:	4b39      	ldr	r3, [pc, #228]	; (86e84 <_svfprintf_r+0x1b48>)
   86da0:	9008      	str	r0, [sp, #32]
   86da2:	910d      	str	r1, [sp, #52]	; 0x34
   86da4:	f7fe bce2 	b.w	8576c <_svfprintf_r+0x430>
   86da8:	f1c3 0301 	rsb	r3, r3, #1
   86dac:	441a      	add	r2, r3
   86dae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86db2:	2667      	movs	r6, #103	; 0x67
   86db4:	920c      	str	r2, [sp, #48]	; 0x30
   86db6:	9308      	str	r3, [sp, #32]
   86db8:	e56c      	b.n	86894 <_svfprintf_r+0x1558>
   86dba:	2200      	movs	r2, #0
   86dbc:	2300      	movs	r3, #0
   86dbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   86dc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86dc2:	f004 fe09 	bl	8b9d8 <__aeabi_dcmpeq>
   86dc6:	2800      	cmp	r0, #0
   86dc8:	f47f addb 	bne.w	86982 <_svfprintf_r+0x1646>
   86dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86dce:	f1c3 0301 	rsb	r3, r3, #1
   86dd2:	9324      	str	r3, [sp, #144]	; 0x90
   86dd4:	e5d6      	b.n	86984 <_svfprintf_r+0x1648>
   86dd6:	992b      	ldr	r1, [sp, #172]	; 0xac
   86dd8:	f7ff bb59 	b.w	8648e <_svfprintf_r+0x1152>
   86ddc:	07e9      	lsls	r1, r5, #31
   86dde:	f57f aa35 	bpl.w	8624c <_svfprintf_r+0xf10>
   86de2:	f7ff ba2f 	b.w	86244 <_svfprintf_r+0xf08>
   86de6:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   86dea:	e799      	b.n	86d20 <_svfprintf_r+0x19e4>
   86dec:	900d      	str	r0, [sp, #52]	; 0x34
   86dee:	e6b0      	b.n	86b52 <_svfprintf_r+0x1816>
   86df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86df2:	f005 0501 	and.w	r5, r5, #1
   86df6:	4613      	mov	r3, r2
   86df8:	432b      	orrs	r3, r5
   86dfa:	d104      	bne.n	86e06 <_svfprintf_r+0x1aca>
   86dfc:	2301      	movs	r3, #1
   86dfe:	2666      	movs	r6, #102	; 0x66
   86e00:	9308      	str	r3, [sp, #32]
   86e02:	930c      	str	r3, [sp, #48]	; 0x30
   86e04:	e546      	b.n	86894 <_svfprintf_r+0x1558>
   86e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86e08:	2666      	movs	r6, #102	; 0x66
   86e0a:	3301      	adds	r3, #1
   86e0c:	441a      	add	r2, r3
   86e0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86e12:	920c      	str	r2, [sp, #48]	; 0x30
   86e14:	9308      	str	r3, [sp, #32]
   86e16:	e53d      	b.n	86894 <_svfprintf_r+0x1558>
   86e18:	4b1b      	ldr	r3, [pc, #108]	; (86e88 <_svfprintf_r+0x1b4c>)
   86e1a:	930f      	str	r3, [sp, #60]	; 0x3c
   86e1c:	f7ff bbe9 	b.w	865f2 <_svfprintf_r+0x12b6>
   86e20:	4a19      	ldr	r2, [pc, #100]	; (86e88 <_svfprintf_r+0x1b4c>)
   86e22:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86e24:	920f      	str	r2, [sp, #60]	; 0x3c
   86e26:	e4b1      	b.n	8678c <_svfprintf_r+0x1450>
   86e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86e2a:	e6dd      	b.n	86be8 <_svfprintf_r+0x18ac>
   86e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e2e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   86e32:	f853 0b04 	ldr.w	r0, [r3], #4
   86e36:	4693      	mov	fp, r2
   86e38:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   86e3c:	9009      	str	r0, [sp, #36]	; 0x24
   86e3e:	930e      	str	r3, [sp, #56]	; 0x38
   86e40:	f7fe bac7 	b.w	853d2 <_svfprintf_r+0x96>
   86e44:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   86e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86e4c:	f8aa 300c 	strh.w	r3, [sl, #12]
   86e50:	f7fe bc4d 	b.w	856ee <_svfprintf_r+0x3b2>
   86e54:	4a0c      	ldr	r2, [pc, #48]	; (86e88 <_svfprintf_r+0x1b4c>)
   86e56:	920f      	str	r2, [sp, #60]	; 0x3c
   86e58:	e6e6      	b.n	86c28 <_svfprintf_r+0x18ec>
   86e5a:	230c      	movs	r3, #12
   86e5c:	f04f 32ff 	mov.w	r2, #4294967295
   86e60:	f8c9 3000 	str.w	r3, [r9]
   86e64:	920a      	str	r2, [sp, #40]	; 0x28
   86e66:	f7fe bc49 	b.w	856fc <_svfprintf_r+0x3c0>
   86e6a:	2302      	movs	r3, #2
   86e6c:	931b      	str	r3, [sp, #108]	; 0x6c
   86e6e:	f7ff b9e2 	b.w	86236 <_svfprintf_r+0xefa>
   86e72:	2300      	movs	r3, #0
   86e74:	9312      	str	r3, [sp, #72]	; 0x48
   86e76:	9316      	str	r3, [sp, #88]	; 0x58
   86e78:	e732      	b.n	86ce0 <_svfprintf_r+0x19a4>
   86e7a:	bf00      	nop
   86e7c:	0008bf00 	.word	0x0008bf00
   86e80:	0008bef8 	.word	0x0008bef8
   86e84:	0008befc 	.word	0x0008befc
   86e88:	0008bf44 	.word	0x0008bf44

00086e8c <__sprint_r.part.0>:
   86e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e90:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   86e92:	4690      	mov	r8, r2
   86e94:	049c      	lsls	r4, r3, #18
   86e96:	d52d      	bpl.n	86ef4 <__sprint_r.part.0+0x68>
   86e98:	6893      	ldr	r3, [r2, #8]
   86e9a:	6812      	ldr	r2, [r2, #0]
   86e9c:	b343      	cbz	r3, 86ef0 <__sprint_r.part.0+0x64>
   86e9e:	468b      	mov	fp, r1
   86ea0:	4606      	mov	r6, r0
   86ea2:	f102 0908 	add.w	r9, r2, #8
   86ea6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   86eaa:	ea5f 079a 	movs.w	r7, sl, lsr #2
   86eae:	d015      	beq.n	86edc <__sprint_r.part.0+0x50>
   86eb0:	2400      	movs	r4, #0
   86eb2:	3d04      	subs	r5, #4
   86eb4:	e001      	b.n	86eba <__sprint_r.part.0+0x2e>
   86eb6:	42a7      	cmp	r7, r4
   86eb8:	d00e      	beq.n	86ed8 <__sprint_r.part.0+0x4c>
   86eba:	465a      	mov	r2, fp
   86ebc:	4630      	mov	r0, r6
   86ebe:	f855 1f04 	ldr.w	r1, [r5, #4]!
   86ec2:	f002 f8f9 	bl	890b8 <_fputwc_r>
   86ec6:	1c43      	adds	r3, r0, #1
   86ec8:	f104 0401 	add.w	r4, r4, #1
   86ecc:	d1f3      	bne.n	86eb6 <__sprint_r.part.0+0x2a>
   86ece:	2300      	movs	r3, #0
   86ed0:	e9c8 3301 	strd	r3, r3, [r8, #4]
   86ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ed8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   86edc:	f02a 0a03 	bic.w	sl, sl, #3
   86ee0:	eba3 030a 	sub.w	r3, r3, sl
   86ee4:	f8c8 3008 	str.w	r3, [r8, #8]
   86ee8:	f109 0908 	add.w	r9, r9, #8
   86eec:	2b00      	cmp	r3, #0
   86eee:	d1da      	bne.n	86ea6 <__sprint_r.part.0+0x1a>
   86ef0:	2000      	movs	r0, #0
   86ef2:	e7ec      	b.n	86ece <__sprint_r.part.0+0x42>
   86ef4:	f002 fa6a 	bl	893cc <__sfvwrite_r>
   86ef8:	2300      	movs	r3, #0
   86efa:	e9c8 3301 	strd	r3, r3, [r8, #4]
   86efe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f02:	bf00      	nop

00086f04 <_vfiprintf_r>:
   86f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f08:	b0bb      	sub	sp, #236	; 0xec
   86f0a:	461c      	mov	r4, r3
   86f0c:	4689      	mov	r9, r1
   86f0e:	4690      	mov	r8, r2
   86f10:	e9cd 3004 	strd	r3, r0, [sp, #16]
   86f14:	b118      	cbz	r0, 86f1e <_vfiprintf_r+0x1a>
   86f16:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86f18:	2b00      	cmp	r3, #0
   86f1a:	f000 827a 	beq.w	87412 <_vfiprintf_r+0x50e>
   86f1e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   86f22:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   86f26:	07de      	lsls	r6, r3, #31
   86f28:	b28a      	uxth	r2, r1
   86f2a:	d402      	bmi.n	86f32 <_vfiprintf_r+0x2e>
   86f2c:	058d      	lsls	r5, r1, #22
   86f2e:	f140 851a 	bpl.w	87966 <_vfiprintf_r+0xa62>
   86f32:	0490      	lsls	r0, r2, #18
   86f34:	d40a      	bmi.n	86f4c <_vfiprintf_r+0x48>
   86f36:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   86f3a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   86f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   86f42:	f8a9 200c 	strh.w	r2, [r9, #12]
   86f46:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   86f4a:	b292      	uxth	r2, r2
   86f4c:	0711      	lsls	r1, r2, #28
   86f4e:	f140 80f6 	bpl.w	8713e <_vfiprintf_r+0x23a>
   86f52:	f8d9 3010 	ldr.w	r3, [r9, #16]
   86f56:	2b00      	cmp	r3, #0
   86f58:	f000 80f1 	beq.w	8713e <_vfiprintf_r+0x23a>
   86f5c:	f002 031a 	and.w	r3, r2, #26
   86f60:	2b0a      	cmp	r3, #10
   86f62:	f000 80fa 	beq.w	8715a <_vfiprintf_r+0x256>
   86f66:	2300      	movs	r3, #0
   86f68:	46cb      	mov	fp, r9
   86f6a:	e9cd 3308 	strd	r3, r3, [sp, #32]
   86f6e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   86f72:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   86f76:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   86f7a:	9303      	str	r3, [sp, #12]
   86f7c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   86f80:	f898 3000 	ldrb.w	r3, [r8]
   86f84:	2b00      	cmp	r3, #0
   86f86:	f000 81ed 	beq.w	87364 <_vfiprintf_r+0x460>
   86f8a:	4644      	mov	r4, r8
   86f8c:	e004      	b.n	86f98 <_vfiprintf_r+0x94>
   86f8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86f92:	2b00      	cmp	r3, #0
   86f94:	f000 8127 	beq.w	871e6 <_vfiprintf_r+0x2e2>
   86f98:	2b25      	cmp	r3, #37	; 0x25
   86f9a:	d1f8      	bne.n	86f8e <_vfiprintf_r+0x8a>
   86f9c:	ebb4 0508 	subs.w	r5, r4, r8
   86fa0:	f040 8125 	bne.w	871ee <_vfiprintf_r+0x2ea>
   86fa4:	7823      	ldrb	r3, [r4, #0]
   86fa6:	2b00      	cmp	r3, #0
   86fa8:	f000 81dc 	beq.w	87364 <_vfiprintf_r+0x460>
   86fac:	f04f 0200 	mov.w	r2, #0
   86fb0:	2300      	movs	r3, #0
   86fb2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   86fb6:	f04f 32ff 	mov.w	r2, #4294967295
   86fba:	252b      	movs	r5, #43	; 0x2b
   86fbc:	461f      	mov	r7, r3
   86fbe:	9302      	str	r3, [sp, #8]
   86fc0:	7863      	ldrb	r3, [r4, #1]
   86fc2:	f104 0801 	add.w	r8, r4, #1
   86fc6:	9200      	str	r2, [sp, #0]
   86fc8:	f108 0801 	add.w	r8, r8, #1
   86fcc:	f1a3 0220 	sub.w	r2, r3, #32
   86fd0:	2a5a      	cmp	r2, #90	; 0x5a
   86fd2:	f200 8141 	bhi.w	87258 <_vfiprintf_r+0x354>
   86fd6:	e8df f012 	tbh	[pc, r2, lsl #1]
   86fda:	0272      	.short	0x0272
   86fdc:	013f013f 	.word	0x013f013f
   86fe0:	013f026d 	.word	0x013f026d
   86fe4:	013f013f 	.word	0x013f013f
   86fe8:	013f024b 	.word	0x013f024b
   86fec:	006a013f 	.word	0x006a013f
   86ff0:	013f0227 	.word	0x013f0227
   86ff4:	02310222 	.word	0x02310222
   86ff8:	022c013f 	.word	0x022c013f
   86ffc:	005b005b 	.word	0x005b005b
   87000:	005b005b 	.word	0x005b005b
   87004:	005b005b 	.word	0x005b005b
   87008:	005b005b 	.word	0x005b005b
   8700c:	013f005b 	.word	0x013f005b
   87010:	013f013f 	.word	0x013f013f
   87014:	013f013f 	.word	0x013f013f
   87018:	013f013f 	.word	0x013f013f
   8701c:	013f013f 	.word	0x013f013f
   87020:	007a020e 	.word	0x007a020e
   87024:	013f013f 	.word	0x013f013f
   87028:	013f013f 	.word	0x013f013f
   8702c:	013f013f 	.word	0x013f013f
   87030:	013f013f 	.word	0x013f013f
   87034:	013f013f 	.word	0x013f013f
   87038:	013f00d7 	.word	0x013f00d7
   8703c:	013f013f 	.word	0x013f013f
   87040:	013f01f2 	.word	0x013f01f2
   87044:	013f0297 	.word	0x013f0297
   87048:	0500013f 	.word	0x0500013f
   8704c:	013f013f 	.word	0x013f013f
   87050:	013f013f 	.word	0x013f013f
   87054:	013f013f 	.word	0x013f013f
   87058:	013f013f 	.word	0x013f013f
   8705c:	013f013f 	.word	0x013f013f
   87060:	007c020e 	.word	0x007c020e
   87064:	013f013f 	.word	0x013f013f
   87068:	028a013f 	.word	0x028a013f
   8706c:	0075007c 	.word	0x0075007c
   87070:	027d013f 	.word	0x027d013f
   87074:	02b6013f 	.word	0x02b6013f
   87078:	02a600d9 	.word	0x02a600d9
   8707c:	013f0075 	.word	0x013f0075
   87080:	007201f2 	.word	0x007201f2
   87084:	013f04fe 	.word	0x013f04fe
   87088:	051c013f 	.word	0x051c013f
   8708c:	0072013f 	.word	0x0072013f
   87090:	2100      	movs	r1, #0
   87092:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87096:	f818 3b01 	ldrb.w	r3, [r8], #1
   8709a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8709e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   870a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   870a6:	2a09      	cmp	r2, #9
   870a8:	d9f5      	bls.n	87096 <_vfiprintf_r+0x192>
   870aa:	9102      	str	r1, [sp, #8]
   870ac:	e78e      	b.n	86fcc <_vfiprintf_r+0xc8>
   870ae:	9b04      	ldr	r3, [sp, #16]
   870b0:	f853 2b04 	ldr.w	r2, [r3], #4
   870b4:	2a00      	cmp	r2, #0
   870b6:	9202      	str	r2, [sp, #8]
   870b8:	9304      	str	r3, [sp, #16]
   870ba:	f2c0 81ad 	blt.w	87418 <_vfiprintf_r+0x514>
   870be:	f898 3000 	ldrb.w	r3, [r8]
   870c2:	e781      	b.n	86fc8 <_vfiprintf_r+0xc4>
   870c4:	f898 3000 	ldrb.w	r3, [r8]
   870c8:	f047 0720 	orr.w	r7, r7, #32
   870cc:	e77c      	b.n	86fc8 <_vfiprintf_r+0xc4>
   870ce:	f047 0710 	orr.w	r7, r7, #16
   870d2:	06bc      	lsls	r4, r7, #26
   870d4:	f140 8158 	bpl.w	87388 <_vfiprintf_r+0x484>
   870d8:	9c04      	ldr	r4, [sp, #16]
   870da:	3407      	adds	r4, #7
   870dc:	f024 0307 	bic.w	r3, r4, #7
   870e0:	4619      	mov	r1, r3
   870e2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   870e6:	4614      	mov	r4, r2
   870e8:	461d      	mov	r5, r3
   870ea:	9104      	str	r1, [sp, #16]
   870ec:	2a00      	cmp	r2, #0
   870ee:	f173 0300 	sbcs.w	r3, r3, #0
   870f2:	f2c0 841e 	blt.w	87932 <_vfiprintf_r+0xa2e>
   870f6:	9b00      	ldr	r3, [sp, #0]
   870f8:	3301      	adds	r3, #1
   870fa:	f000 84f0 	beq.w	87ade <_vfiprintf_r+0xbda>
   870fe:	ea54 0305 	orrs.w	r3, r4, r5
   87102:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   87106:	f000 83fc 	beq.w	87902 <_vfiprintf_r+0x9fe>
   8710a:	2d00      	cmp	r5, #0
   8710c:	bf08      	it	eq
   8710e:	2c0a      	cmpeq	r4, #10
   87110:	f080 84a9 	bcs.w	87a66 <_vfiprintf_r+0xb62>
   87114:	2301      	movs	r3, #1
   87116:	464f      	mov	r7, r9
   87118:	3430      	adds	r4, #48	; 0x30
   8711a:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8711e:	9301      	str	r3, [sp, #4]
   87120:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   87124:	e9dd 2100 	ldrd	r2, r1, [sp]
   87128:	428a      	cmp	r2, r1
   8712a:	bfb8      	it	lt
   8712c:	460a      	movlt	r2, r1
   8712e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   87132:	4615      	mov	r5, r2
   87134:	2b00      	cmp	r3, #0
   87136:	f000 809d 	beq.w	87274 <_vfiprintf_r+0x370>
   8713a:	3501      	adds	r5, #1
   8713c:	e09a      	b.n	87274 <_vfiprintf_r+0x370>
   8713e:	4649      	mov	r1, r9
   87140:	9805      	ldr	r0, [sp, #20]
   87142:	f000 fdb9 	bl	87cb8 <__swsetup_r>
   87146:	2800      	cmp	r0, #0
   87148:	f040 854a 	bne.w	87be0 <_vfiprintf_r+0xcdc>
   8714c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   87150:	f002 031a 	and.w	r3, r2, #26
   87154:	2b0a      	cmp	r3, #10
   87156:	f47f af06 	bne.w	86f66 <_vfiprintf_r+0x62>
   8715a:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   8715e:	2b00      	cmp	r3, #0
   87160:	f6ff af01 	blt.w	86f66 <_vfiprintf_r+0x62>
   87164:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87168:	07de      	lsls	r6, r3, #31
   8716a:	d402      	bmi.n	87172 <_vfiprintf_r+0x26e>
   8716c:	0595      	lsls	r5, r2, #22
   8716e:	f140 850e 	bpl.w	87b8e <_vfiprintf_r+0xc8a>
   87172:	4623      	mov	r3, r4
   87174:	4642      	mov	r2, r8
   87176:	4649      	mov	r1, r9
   87178:	9805      	ldr	r0, [sp, #20]
   8717a:	f000 fd59 	bl	87c30 <__sbprintf>
   8717e:	9003      	str	r0, [sp, #12]
   87180:	9803      	ldr	r0, [sp, #12]
   87182:	b03b      	add	sp, #236	; 0xec
   87184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87188:	f047 0710 	orr.w	r7, r7, #16
   8718c:	06b8      	lsls	r0, r7, #26
   8718e:	9c04      	ldr	r4, [sp, #16]
   87190:	f140 8109 	bpl.w	873a6 <_vfiprintf_r+0x4a2>
   87194:	3407      	adds	r4, #7
   87196:	f024 0307 	bic.w	r3, r4, #7
   8719a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8719e:	9304      	str	r3, [sp, #16]
   871a0:	2300      	movs	r3, #0
   871a2:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   871a6:	f04f 0200 	mov.w	r2, #0
   871aa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   871ae:	9a00      	ldr	r2, [sp, #0]
   871b0:	4611      	mov	r1, r2
   871b2:	3101      	adds	r1, #1
   871b4:	f000 81db 	beq.w	8756e <_vfiprintf_r+0x66a>
   871b8:	ea54 0105 	orrs.w	r1, r4, r5
   871bc:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   871c0:	f040 81d4 	bne.w	8756c <_vfiprintf_r+0x668>
   871c4:	2a00      	cmp	r2, #0
   871c6:	f040 848d 	bne.w	87ae4 <_vfiprintf_r+0xbe0>
   871ca:	2b00      	cmp	r3, #0
   871cc:	f040 839e 	bne.w	8790c <_vfiprintf_r+0xa08>
   871d0:	f019 0301 	ands.w	r3, r9, #1
   871d4:	9301      	str	r3, [sp, #4]
   871d6:	f000 83c3 	beq.w	87960 <_vfiprintf_r+0xa5c>
   871da:	2330      	movs	r3, #48	; 0x30
   871dc:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   871e0:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   871e4:	e79e      	b.n	87124 <_vfiprintf_r+0x220>
   871e6:	ebb4 0508 	subs.w	r5, r4, r8
   871ea:	f000 80bb 	beq.w	87364 <_vfiprintf_r+0x460>
   871ee:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   871f2:	3301      	adds	r3, #1
   871f4:	442a      	add	r2, r5
   871f6:	2b07      	cmp	r3, #7
   871f8:	e9ca 8500 	strd	r8, r5, [sl]
   871fc:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   87200:	dc06      	bgt.n	87210 <_vfiprintf_r+0x30c>
   87202:	f10a 0a08 	add.w	sl, sl, #8
   87206:	9a03      	ldr	r2, [sp, #12]
   87208:	7823      	ldrb	r3, [r4, #0]
   8720a:	442a      	add	r2, r5
   8720c:	9203      	str	r2, [sp, #12]
   8720e:	e6ca      	b.n	86fa6 <_vfiprintf_r+0xa2>
   87210:	2a00      	cmp	r2, #0
   87212:	f000 8372 	beq.w	878fa <_vfiprintf_r+0x9f6>
   87216:	4659      	mov	r1, fp
   87218:	9805      	ldr	r0, [sp, #20]
   8721a:	aa0e      	add	r2, sp, #56	; 0x38
   8721c:	f7ff fe36 	bl	86e8c <__sprint_r.part.0>
   87220:	b950      	cbnz	r0, 87238 <_vfiprintf_r+0x334>
   87222:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87226:	e7ee      	b.n	87206 <_vfiprintf_r+0x302>
   87228:	4659      	mov	r1, fp
   8722a:	9805      	ldr	r0, [sp, #20]
   8722c:	aa0e      	add	r2, sp, #56	; 0x38
   8722e:	f7ff fe2d 	bl	86e8c <__sprint_r.part.0>
   87232:	2800      	cmp	r0, #0
   87234:	f000 808d 	beq.w	87352 <_vfiprintf_r+0x44e>
   87238:	46d9      	mov	r9, fp
   8723a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8723e:	f013 0f01 	tst.w	r3, #1
   87242:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   87246:	f000 8095 	beq.w	87374 <_vfiprintf_r+0x470>
   8724a:	065b      	lsls	r3, r3, #25
   8724c:	f100 84d4 	bmi.w	87bf8 <_vfiprintf_r+0xcf4>
   87250:	9803      	ldr	r0, [sp, #12]
   87252:	b03b      	add	sp, #236	; 0xec
   87254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87258:	2b00      	cmp	r3, #0
   8725a:	f000 8083 	beq.w	87364 <_vfiprintf_r+0x460>
   8725e:	2501      	movs	r5, #1
   87260:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87264:	f04f 0300 	mov.w	r3, #0
   87268:	9501      	str	r5, [sp, #4]
   8726a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8726e:	ae21      	add	r6, sp, #132	; 0x84
   87270:	2300      	movs	r3, #0
   87272:	9300      	str	r3, [sp, #0]
   87274:	f017 0302 	ands.w	r3, r7, #2
   87278:	9307      	str	r3, [sp, #28]
   8727a:	bf18      	it	ne
   8727c:	3502      	addne	r5, #2
   8727e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   87282:	9306      	str	r3, [sp, #24]
   87284:	d104      	bne.n	87290 <_vfiprintf_r+0x38c>
   87286:	9b02      	ldr	r3, [sp, #8]
   87288:	1b5c      	subs	r4, r3, r5
   8728a:	2c00      	cmp	r4, #0
   8728c:	f300 8274 	bgt.w	87778 <_vfiprintf_r+0x874>
   87290:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87294:	1c48      	adds	r0, r1, #1
   87296:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   8729a:	b174      	cbz	r4, 872ba <_vfiprintf_r+0x3b6>
   8729c:	2101      	movs	r1, #1
   8729e:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   872a2:	440a      	add	r2, r1
   872a4:	2807      	cmp	r0, #7
   872a6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   872aa:	e9ca 4100 	strd	r4, r1, [sl]
   872ae:	f300 8246 	bgt.w	8773e <_vfiprintf_r+0x83a>
   872b2:	4601      	mov	r1, r0
   872b4:	f10a 0a08 	add.w	sl, sl, #8
   872b8:	3001      	adds	r0, #1
   872ba:	9b07      	ldr	r3, [sp, #28]
   872bc:	b1c3      	cbz	r3, 872f0 <_vfiprintf_r+0x3ec>
   872be:	2102      	movs	r1, #2
   872c0:	ab0d      	add	r3, sp, #52	; 0x34
   872c2:	440a      	add	r2, r1
   872c4:	2807      	cmp	r0, #7
   872c6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   872ca:	e9ca 3100 	strd	r3, r1, [sl]
   872ce:	f340 824e 	ble.w	8776e <_vfiprintf_r+0x86a>
   872d2:	2a00      	cmp	r2, #0
   872d4:	f000 830c 	beq.w	878f0 <_vfiprintf_r+0x9ec>
   872d8:	4659      	mov	r1, fp
   872da:	9805      	ldr	r0, [sp, #20]
   872dc:	aa0e      	add	r2, sp, #56	; 0x38
   872de:	f7ff fdd5 	bl	86e8c <__sprint_r.part.0>
   872e2:	2800      	cmp	r0, #0
   872e4:	d1a8      	bne.n	87238 <_vfiprintf_r+0x334>
   872e6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   872ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   872ee:	1c48      	adds	r0, r1, #1
   872f0:	9b06      	ldr	r3, [sp, #24]
   872f2:	2b80      	cmp	r3, #128	; 0x80
   872f4:	f000 817e 	beq.w	875f4 <_vfiprintf_r+0x6f0>
   872f8:	e9dd 3400 	ldrd	r3, r4, [sp]
   872fc:	1b1c      	subs	r4, r3, r4
   872fe:	2c00      	cmp	r4, #0
   87300:	f300 81d3 	bgt.w	876aa <_vfiprintf_r+0x7a6>
   87304:	9b01      	ldr	r3, [sp, #4]
   87306:	2807      	cmp	r0, #7
   87308:	441a      	add	r2, r3
   8730a:	e9ca 6300 	strd	r6, r3, [sl]
   8730e:	9210      	str	r2, [sp, #64]	; 0x40
   87310:	900f      	str	r0, [sp, #60]	; 0x3c
   87312:	f340 816c 	ble.w	875ee <_vfiprintf_r+0x6ea>
   87316:	2a00      	cmp	r2, #0
   87318:	f000 8276 	beq.w	87808 <_vfiprintf_r+0x904>
   8731c:	4659      	mov	r1, fp
   8731e:	9805      	ldr	r0, [sp, #20]
   87320:	aa0e      	add	r2, sp, #56	; 0x38
   87322:	f7ff fdb3 	bl	86e8c <__sprint_r.part.0>
   87326:	2800      	cmp	r0, #0
   87328:	d186      	bne.n	87238 <_vfiprintf_r+0x334>
   8732a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8732c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87330:	0779      	lsls	r1, r7, #29
   87332:	d504      	bpl.n	8733e <_vfiprintf_r+0x43a>
   87334:	9b02      	ldr	r3, [sp, #8]
   87336:	1b5c      	subs	r4, r3, r5
   87338:	2c00      	cmp	r4, #0
   8733a:	f300 826e 	bgt.w	8781a <_vfiprintf_r+0x916>
   8733e:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   87342:	42a9      	cmp	r1, r5
   87344:	bfac      	ite	ge
   87346:	185b      	addge	r3, r3, r1
   87348:	195b      	addlt	r3, r3, r5
   8734a:	9303      	str	r3, [sp, #12]
   8734c:	2a00      	cmp	r2, #0
   8734e:	f47f af6b 	bne.w	87228 <_vfiprintf_r+0x324>
   87352:	2300      	movs	r3, #0
   87354:	930f      	str	r3, [sp, #60]	; 0x3c
   87356:	f898 3000 	ldrb.w	r3, [r8]
   8735a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8735e:	2b00      	cmp	r3, #0
   87360:	f47f ae13 	bne.w	86f8a <_vfiprintf_r+0x86>
   87364:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87366:	46d9      	mov	r9, fp
   87368:	2b00      	cmp	r3, #0
   8736a:	f040 8426 	bne.w	87bba <_vfiprintf_r+0xcb6>
   8736e:	2300      	movs	r3, #0
   87370:	930f      	str	r3, [sp, #60]	; 0x3c
   87372:	e762      	b.n	8723a <_vfiprintf_r+0x336>
   87374:	059a      	lsls	r2, r3, #22
   87376:	f53f af68 	bmi.w	8724a <_vfiprintf_r+0x346>
   8737a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8737e:	f002 f9cf 	bl	89720 <__retarget_lock_release_recursive>
   87382:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   87386:	e760      	b.n	8724a <_vfiprintf_r+0x346>
   87388:	9b04      	ldr	r3, [sp, #16]
   8738a:	06f8      	lsls	r0, r7, #27
   8738c:	f853 4b04 	ldr.w	r4, [r3], #4
   87390:	f100 8308 	bmi.w	879a4 <_vfiprintf_r+0xaa0>
   87394:	0679      	lsls	r1, r7, #25
   87396:	f140 8302 	bpl.w	8799e <_vfiprintf_r+0xa9a>
   8739a:	b224      	sxth	r4, r4
   8739c:	17e5      	asrs	r5, r4, #31
   8739e:	9304      	str	r3, [sp, #16]
   873a0:	4622      	mov	r2, r4
   873a2:	462b      	mov	r3, r5
   873a4:	e6a2      	b.n	870ec <_vfiprintf_r+0x1e8>
   873a6:	f854 3b04 	ldr.w	r3, [r4], #4
   873aa:	06f9      	lsls	r1, r7, #27
   873ac:	9404      	str	r4, [sp, #16]
   873ae:	f100 82f3 	bmi.w	87998 <_vfiprintf_r+0xa94>
   873b2:	067a      	lsls	r2, r7, #25
   873b4:	f140 82ed 	bpl.w	87992 <_vfiprintf_r+0xa8e>
   873b8:	2500      	movs	r5, #0
   873ba:	b29c      	uxth	r4, r3
   873bc:	e6f0      	b.n	871a0 <_vfiprintf_r+0x29c>
   873be:	f04f 0300 	mov.w	r3, #0
   873c2:	9c04      	ldr	r4, [sp, #16]
   873c4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   873c8:	f854 6b04 	ldr.w	r6, [r4], #4
   873cc:	2e00      	cmp	r6, #0
   873ce:	f000 8397 	beq.w	87b00 <_vfiprintf_r+0xbfc>
   873d2:	9a00      	ldr	r2, [sp, #0]
   873d4:	4613      	mov	r3, r2
   873d6:	3301      	adds	r3, #1
   873d8:	f000 831e 	beq.w	87a18 <_vfiprintf_r+0xb14>
   873dc:	2100      	movs	r1, #0
   873de:	4630      	mov	r0, r6
   873e0:	f002 fce4 	bl	89dac <memchr>
   873e4:	2800      	cmp	r0, #0
   873e6:	f000 83d8 	beq.w	87b9a <_vfiprintf_r+0xc96>
   873ea:	1b83      	subs	r3, r0, r6
   873ec:	9301      	str	r3, [sp, #4]
   873ee:	2300      	movs	r3, #0
   873f0:	9404      	str	r4, [sp, #16]
   873f2:	9300      	str	r3, [sp, #0]
   873f4:	e696      	b.n	87124 <_vfiprintf_r+0x220>
   873f6:	2501      	movs	r5, #1
   873f8:	f04f 0200 	mov.w	r2, #0
   873fc:	9c04      	ldr	r4, [sp, #16]
   873fe:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   87402:	f854 3b04 	ldr.w	r3, [r4], #4
   87406:	9501      	str	r5, [sp, #4]
   87408:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8740c:	9404      	str	r4, [sp, #16]
   8740e:	ae21      	add	r6, sp, #132	; 0x84
   87410:	e72e      	b.n	87270 <_vfiprintf_r+0x36c>
   87412:	f001 fdb1 	bl	88f78 <__sinit>
   87416:	e582      	b.n	86f1e <_vfiprintf_r+0x1a>
   87418:	9b02      	ldr	r3, [sp, #8]
   8741a:	425b      	negs	r3, r3
   8741c:	9302      	str	r3, [sp, #8]
   8741e:	f898 3000 	ldrb.w	r3, [r8]
   87422:	f047 0704 	orr.w	r7, r7, #4
   87426:	e5cf      	b.n	86fc8 <_vfiprintf_r+0xc4>
   87428:	f898 3000 	ldrb.w	r3, [r8]
   8742c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   87430:	e5ca      	b.n	86fc8 <_vfiprintf_r+0xc4>
   87432:	f898 3000 	ldrb.w	r3, [r8]
   87436:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8743a:	e5c5      	b.n	86fc8 <_vfiprintf_r+0xc4>
   8743c:	4641      	mov	r1, r8
   8743e:	f811 3b01 	ldrb.w	r3, [r1], #1
   87442:	2b2a      	cmp	r3, #42	; 0x2a
   87444:	f000 83dd 	beq.w	87c02 <_vfiprintf_r+0xcfe>
   87448:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8744c:	2a09      	cmp	r2, #9
   8744e:	4688      	mov	r8, r1
   87450:	bf98      	it	ls
   87452:	2100      	movls	r1, #0
   87454:	f200 83ad 	bhi.w	87bb2 <_vfiprintf_r+0xcae>
   87458:	f818 3b01 	ldrb.w	r3, [r8], #1
   8745c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   87460:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   87464:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   87468:	2a09      	cmp	r2, #9
   8746a:	d9f5      	bls.n	87458 <_vfiprintf_r+0x554>
   8746c:	9100      	str	r1, [sp, #0]
   8746e:	e5ad      	b.n	86fcc <_vfiprintf_r+0xc8>
   87470:	9c05      	ldr	r4, [sp, #20]
   87472:	4620      	mov	r0, r4
   87474:	f002 f94a 	bl	8970c <_localeconv_r>
   87478:	6843      	ldr	r3, [r0, #4]
   8747a:	4618      	mov	r0, r3
   8747c:	930a      	str	r3, [sp, #40]	; 0x28
   8747e:	f003 fb47 	bl	8ab10 <strlen>
   87482:	4603      	mov	r3, r0
   87484:	4620      	mov	r0, r4
   87486:	930b      	str	r3, [sp, #44]	; 0x2c
   87488:	461c      	mov	r4, r3
   8748a:	f002 f93f 	bl	8970c <_localeconv_r>
   8748e:	6882      	ldr	r2, [r0, #8]
   87490:	9209      	str	r2, [sp, #36]	; 0x24
   87492:	2c00      	cmp	r4, #0
   87494:	f43f ae13 	beq.w	870be <_vfiprintf_r+0x1ba>
   87498:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8749a:	2b00      	cmp	r3, #0
   8749c:	f43f ae0f 	beq.w	870be <_vfiprintf_r+0x1ba>
   874a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   874a2:	781b      	ldrb	r3, [r3, #0]
   874a4:	2b00      	cmp	r3, #0
   874a6:	f43f ae0a 	beq.w	870be <_vfiprintf_r+0x1ba>
   874aa:	f898 3000 	ldrb.w	r3, [r8]
   874ae:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   874b2:	e589      	b.n	86fc8 <_vfiprintf_r+0xc4>
   874b4:	f898 3000 	ldrb.w	r3, [r8]
   874b8:	f047 0701 	orr.w	r7, r7, #1
   874bc:	e584      	b.n	86fc8 <_vfiprintf_r+0xc4>
   874be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   874c2:	2b00      	cmp	r3, #0
   874c4:	f47f adfb 	bne.w	870be <_vfiprintf_r+0x1ba>
   874c8:	2320      	movs	r3, #32
   874ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   874ce:	f898 3000 	ldrb.w	r3, [r8]
   874d2:	e579      	b.n	86fc8 <_vfiprintf_r+0xc4>
   874d4:	f898 3000 	ldrb.w	r3, [r8]
   874d8:	2b6c      	cmp	r3, #108	; 0x6c
   874da:	bf03      	ittte	eq
   874dc:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   874e0:	f047 0720 	orreq.w	r7, r7, #32
   874e4:	f108 0801 	addeq.w	r8, r8, #1
   874e8:	f047 0710 	orrne.w	r7, r7, #16
   874ec:	e56c      	b.n	86fc8 <_vfiprintf_r+0xc4>
   874ee:	f898 3000 	ldrb.w	r3, [r8]
   874f2:	2b68      	cmp	r3, #104	; 0x68
   874f4:	bf03      	ittte	eq
   874f6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   874fa:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   874fe:	f108 0801 	addeq.w	r8, r8, #1
   87502:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   87506:	e55f      	b.n	86fc8 <_vfiprintf_r+0xc4>
   87508:	f047 0910 	orr.w	r9, r7, #16
   8750c:	f019 0f20 	tst.w	r9, #32
   87510:	9c04      	ldr	r4, [sp, #16]
   87512:	f000 8200 	beq.w	87916 <_vfiprintf_r+0xa12>
   87516:	3407      	adds	r4, #7
   87518:	f024 0307 	bic.w	r3, r4, #7
   8751c:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87520:	9304      	str	r3, [sp, #16]
   87522:	2301      	movs	r3, #1
   87524:	e63f      	b.n	871a6 <_vfiprintf_r+0x2a2>
   87526:	f647 0330 	movw	r3, #30768	; 0x7830
   8752a:	9c04      	ldr	r4, [sp, #16]
   8752c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   87530:	f854 2b04 	ldr.w	r2, [r4], #4
   87534:	4bbf      	ldr	r3, [pc, #764]	; (87834 <_vfiprintf_r+0x930>)
   87536:	9404      	str	r4, [sp, #16]
   87538:	9308      	str	r3, [sp, #32]
   8753a:	4614      	mov	r4, r2
   8753c:	2500      	movs	r5, #0
   8753e:	2302      	movs	r3, #2
   87540:	f047 0902 	orr.w	r9, r7, #2
   87544:	e62f      	b.n	871a6 <_vfiprintf_r+0x2a2>
   87546:	06bb      	lsls	r3, r7, #26
   87548:	f100 8232 	bmi.w	879b0 <_vfiprintf_r+0xaac>
   8754c:	06fe      	lsls	r6, r7, #27
   8754e:	f100 82cf 	bmi.w	87af0 <_vfiprintf_r+0xbec>
   87552:	067d      	lsls	r5, r7, #25
   87554:	f100 8301 	bmi.w	87b5a <_vfiprintf_r+0xc56>
   87558:	05bc      	lsls	r4, r7, #22
   8755a:	f140 82c9 	bpl.w	87af0 <_vfiprintf_r+0xbec>
   8755e:	9c04      	ldr	r4, [sp, #16]
   87560:	9a03      	ldr	r2, [sp, #12]
   87562:	f854 3b04 	ldr.w	r3, [r4], #4
   87566:	701a      	strb	r2, [r3, #0]
   87568:	9404      	str	r4, [sp, #16]
   8756a:	e509      	b.n	86f80 <_vfiprintf_r+0x7c>
   8756c:	46b9      	mov	r9, r7
   8756e:	2b01      	cmp	r3, #1
   87570:	f43f adcb 	beq.w	8710a <_vfiprintf_r+0x206>
   87574:	2b02      	cmp	r3, #2
   87576:	ae3a      	add	r6, sp, #232	; 0xe8
   87578:	d113      	bne.n	875a2 <_vfiprintf_r+0x69e>
   8757a:	9808      	ldr	r0, [sp, #32]
   8757c:	0923      	lsrs	r3, r4, #4
   8757e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87582:	0929      	lsrs	r1, r5, #4
   87584:	f004 020f 	and.w	r2, r4, #15
   87588:	460d      	mov	r5, r1
   8758a:	461c      	mov	r4, r3
   8758c:	5c83      	ldrb	r3, [r0, r2]
   8758e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   87592:	ea54 0305 	orrs.w	r3, r4, r5
   87596:	d1f1      	bne.n	8757c <_vfiprintf_r+0x678>
   87598:	ab3a      	add	r3, sp, #232	; 0xe8
   8759a:	1b9b      	subs	r3, r3, r6
   8759c:	464f      	mov	r7, r9
   8759e:	9301      	str	r3, [sp, #4]
   875a0:	e5c0      	b.n	87124 <_vfiprintf_r+0x220>
   875a2:	08e2      	lsrs	r2, r4, #3
   875a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   875a8:	08e9      	lsrs	r1, r5, #3
   875aa:	f004 0307 	and.w	r3, r4, #7
   875ae:	460d      	mov	r5, r1
   875b0:	4614      	mov	r4, r2
   875b2:	3330      	adds	r3, #48	; 0x30
   875b4:	ea54 0105 	orrs.w	r1, r4, r5
   875b8:	4632      	mov	r2, r6
   875ba:	f806 3d01 	strb.w	r3, [r6, #-1]!
   875be:	d1f0      	bne.n	875a2 <_vfiprintf_r+0x69e>
   875c0:	f019 0f01 	tst.w	r9, #1
   875c4:	d0e8      	beq.n	87598 <_vfiprintf_r+0x694>
   875c6:	2b30      	cmp	r3, #48	; 0x30
   875c8:	d0e6      	beq.n	87598 <_vfiprintf_r+0x694>
   875ca:	2330      	movs	r3, #48	; 0x30
   875cc:	3a02      	subs	r2, #2
   875ce:	f806 3c01 	strb.w	r3, [r6, #-1]
   875d2:	ab3a      	add	r3, sp, #232	; 0xe8
   875d4:	1a9b      	subs	r3, r3, r2
   875d6:	464f      	mov	r7, r9
   875d8:	4616      	mov	r6, r2
   875da:	9301      	str	r3, [sp, #4]
   875dc:	e5a2      	b.n	87124 <_vfiprintf_r+0x220>
   875de:	2301      	movs	r3, #1
   875e0:	9a01      	ldr	r2, [sp, #4]
   875e2:	930f      	str	r3, [sp, #60]	; 0x3c
   875e4:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   875e8:	9212      	str	r2, [sp, #72]	; 0x48
   875ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   875ee:	f10a 0a08 	add.w	sl, sl, #8
   875f2:	e69d      	b.n	87330 <_vfiprintf_r+0x42c>
   875f4:	9b02      	ldr	r3, [sp, #8]
   875f6:	1b5c      	subs	r4, r3, r5
   875f8:	2c00      	cmp	r4, #0
   875fa:	f77f ae7d 	ble.w	872f8 <_vfiprintf_r+0x3f4>
   875fe:	2c10      	cmp	r4, #16
   87600:	f340 82ea 	ble.w	87bd8 <_vfiprintf_r+0xcd4>
   87604:	f8df 9230 	ldr.w	r9, [pc, #560]	; 87838 <_vfiprintf_r+0x934>
   87608:	4650      	mov	r0, sl
   8760a:	9706      	str	r7, [sp, #24]
   8760c:	46b2      	mov	sl, r6
   8760e:	464e      	mov	r6, r9
   87610:	46c1      	mov	r9, r8
   87612:	46a8      	mov	r8, r5
   87614:	9d05      	ldr	r5, [sp, #20]
   87616:	e006      	b.n	87626 <_vfiprintf_r+0x722>
   87618:	f101 0c02 	add.w	ip, r1, #2
   8761c:	4619      	mov	r1, r3
   8761e:	3008      	adds	r0, #8
   87620:	3c10      	subs	r4, #16
   87622:	2c10      	cmp	r4, #16
   87624:	dd1a      	ble.n	8765c <_vfiprintf_r+0x758>
   87626:	2710      	movs	r7, #16
   87628:	1c4b      	adds	r3, r1, #1
   8762a:	3210      	adds	r2, #16
   8762c:	2b07      	cmp	r3, #7
   8762e:	9210      	str	r2, [sp, #64]	; 0x40
   87630:	6006      	str	r6, [r0, #0]
   87632:	6047      	str	r7, [r0, #4]
   87634:	930f      	str	r3, [sp, #60]	; 0x3c
   87636:	ddef      	ble.n	87618 <_vfiprintf_r+0x714>
   87638:	2a00      	cmp	r2, #0
   8763a:	d07b      	beq.n	87734 <_vfiprintf_r+0x830>
   8763c:	4659      	mov	r1, fp
   8763e:	4628      	mov	r0, r5
   87640:	aa0e      	add	r2, sp, #56	; 0x38
   87642:	f7ff fc23 	bl	86e8c <__sprint_r.part.0>
   87646:	2800      	cmp	r0, #0
   87648:	f47f adf6 	bne.w	87238 <_vfiprintf_r+0x334>
   8764c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87650:	3c10      	subs	r4, #16
   87652:	2c10      	cmp	r4, #16
   87654:	a811      	add	r0, sp, #68	; 0x44
   87656:	f101 0c01 	add.w	ip, r1, #1
   8765a:	dce4      	bgt.n	87626 <_vfiprintf_r+0x722>
   8765c:	4645      	mov	r5, r8
   8765e:	46c8      	mov	r8, r9
   87660:	46b1      	mov	r9, r6
   87662:	4656      	mov	r6, sl
   87664:	4682      	mov	sl, r0
   87666:	9f06      	ldr	r7, [sp, #24]
   87668:	4422      	add	r2, r4
   8766a:	f1bc 0f07 	cmp.w	ip, #7
   8766e:	e9ca 9400 	strd	r9, r4, [sl]
   87672:	9210      	str	r2, [sp, #64]	; 0x40
   87674:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   87678:	f340 817e 	ble.w	87978 <_vfiprintf_r+0xa74>
   8767c:	2a00      	cmp	r2, #0
   8767e:	f000 825c 	beq.w	87b3a <_vfiprintf_r+0xc36>
   87682:	4659      	mov	r1, fp
   87684:	9805      	ldr	r0, [sp, #20]
   87686:	aa0e      	add	r2, sp, #56	; 0x38
   87688:	f7ff fc00 	bl	86e8c <__sprint_r.part.0>
   8768c:	2800      	cmp	r0, #0
   8768e:	f47f add3 	bne.w	87238 <_vfiprintf_r+0x334>
   87692:	e9dd 3400 	ldrd	r3, r4, [sp]
   87696:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8769a:	1b1c      	subs	r4, r3, r4
   8769c:	2c00      	cmp	r4, #0
   8769e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   876a2:	f101 0001 	add.w	r0, r1, #1
   876a6:	f77f ae2d 	ble.w	87304 <_vfiprintf_r+0x400>
   876aa:	2c10      	cmp	r4, #16
   876ac:	f8df 9188 	ldr.w	r9, [pc, #392]	; 87838 <_vfiprintf_r+0x934>
   876b0:	dd2f      	ble.n	87712 <_vfiprintf_r+0x80e>
   876b2:	46d4      	mov	ip, sl
   876b4:	46b2      	mov	sl, r6
   876b6:	464e      	mov	r6, r9
   876b8:	46c1      	mov	r9, r8
   876ba:	46a8      	mov	r8, r5
   876bc:	9d05      	ldr	r5, [sp, #20]
   876be:	e006      	b.n	876ce <_vfiprintf_r+0x7ca>
   876c0:	1c88      	adds	r0, r1, #2
   876c2:	4619      	mov	r1, r3
   876c4:	f10c 0c08 	add.w	ip, ip, #8
   876c8:	3c10      	subs	r4, #16
   876ca:	2c10      	cmp	r4, #16
   876cc:	dd1c      	ble.n	87708 <_vfiprintf_r+0x804>
   876ce:	2010      	movs	r0, #16
   876d0:	1c4b      	adds	r3, r1, #1
   876d2:	3210      	adds	r2, #16
   876d4:	2b07      	cmp	r3, #7
   876d6:	9210      	str	r2, [sp, #64]	; 0x40
   876d8:	f8cc 6000 	str.w	r6, [ip]
   876dc:	f8cc 0004 	str.w	r0, [ip, #4]
   876e0:	930f      	str	r3, [sp, #60]	; 0x3c
   876e2:	dded      	ble.n	876c0 <_vfiprintf_r+0x7bc>
   876e4:	b30a      	cbz	r2, 8772a <_vfiprintf_r+0x826>
   876e6:	4659      	mov	r1, fp
   876e8:	4628      	mov	r0, r5
   876ea:	aa0e      	add	r2, sp, #56	; 0x38
   876ec:	f7ff fbce 	bl	86e8c <__sprint_r.part.0>
   876f0:	2800      	cmp	r0, #0
   876f2:	f47f ada1 	bne.w	87238 <_vfiprintf_r+0x334>
   876f6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   876fa:	3c10      	subs	r4, #16
   876fc:	2c10      	cmp	r4, #16
   876fe:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   87702:	f101 0001 	add.w	r0, r1, #1
   87706:	dce2      	bgt.n	876ce <_vfiprintf_r+0x7ca>
   87708:	4645      	mov	r5, r8
   8770a:	46c8      	mov	r8, r9
   8770c:	46b1      	mov	r9, r6
   8770e:	4656      	mov	r6, sl
   87710:	46e2      	mov	sl, ip
   87712:	4422      	add	r2, r4
   87714:	2807      	cmp	r0, #7
   87716:	e9ca 9400 	strd	r9, r4, [sl]
   8771a:	9210      	str	r2, [sp, #64]	; 0x40
   8771c:	900f      	str	r0, [sp, #60]	; 0x3c
   8771e:	f300 80d3 	bgt.w	878c8 <_vfiprintf_r+0x9c4>
   87722:	f10a 0a08 	add.w	sl, sl, #8
   87726:	3001      	adds	r0, #1
   87728:	e5ec      	b.n	87304 <_vfiprintf_r+0x400>
   8772a:	2001      	movs	r0, #1
   8772c:	4611      	mov	r1, r2
   8772e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   87732:	e7c9      	b.n	876c8 <_vfiprintf_r+0x7c4>
   87734:	f04f 0c01 	mov.w	ip, #1
   87738:	4611      	mov	r1, r2
   8773a:	a811      	add	r0, sp, #68	; 0x44
   8773c:	e770      	b.n	87620 <_vfiprintf_r+0x71c>
   8773e:	2a00      	cmp	r2, #0
   87740:	f000 80d3 	beq.w	878ea <_vfiprintf_r+0x9e6>
   87744:	4659      	mov	r1, fp
   87746:	9805      	ldr	r0, [sp, #20]
   87748:	aa0e      	add	r2, sp, #56	; 0x38
   8774a:	f7ff fb9f 	bl	86e8c <__sprint_r.part.0>
   8774e:	2800      	cmp	r0, #0
   87750:	f47f ad72 	bne.w	87238 <_vfiprintf_r+0x334>
   87754:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87758:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8775c:	1c48      	adds	r0, r1, #1
   8775e:	e5ac      	b.n	872ba <_vfiprintf_r+0x3b6>
   87760:	2202      	movs	r2, #2
   87762:	2001      	movs	r0, #1
   87764:	ab0d      	add	r3, sp, #52	; 0x34
   87766:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8776a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8776e:	4601      	mov	r1, r0
   87770:	f10a 0a08 	add.w	sl, sl, #8
   87774:	1c48      	adds	r0, r1, #1
   87776:	e5bb      	b.n	872f0 <_vfiprintf_r+0x3ec>
   87778:	2c10      	cmp	r4, #16
   8777a:	f340 8214 	ble.w	87ba6 <_vfiprintf_r+0xca2>
   8777e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   87782:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8783c <_vfiprintf_r+0x938>
   87786:	46d4      	mov	ip, sl
   87788:	46b2      	mov	sl, r6
   8778a:	464e      	mov	r6, r9
   8778c:	46c1      	mov	r9, r8
   8778e:	46a8      	mov	r8, r5
   87790:	9d05      	ldr	r5, [sp, #20]
   87792:	e006      	b.n	877a2 <_vfiprintf_r+0x89e>
   87794:	1c99      	adds	r1, r3, #2
   87796:	4603      	mov	r3, r0
   87798:	f10c 0c08 	add.w	ip, ip, #8
   8779c:	3c10      	subs	r4, #16
   8779e:	2c10      	cmp	r4, #16
   877a0:	dd1c      	ble.n	877dc <_vfiprintf_r+0x8d8>
   877a2:	2110      	movs	r1, #16
   877a4:	1c58      	adds	r0, r3, #1
   877a6:	3210      	adds	r2, #16
   877a8:	2807      	cmp	r0, #7
   877aa:	9210      	str	r2, [sp, #64]	; 0x40
   877ac:	f8cc 6000 	str.w	r6, [ip]
   877b0:	f8cc 1004 	str.w	r1, [ip, #4]
   877b4:	900f      	str	r0, [sp, #60]	; 0x3c
   877b6:	dded      	ble.n	87794 <_vfiprintf_r+0x890>
   877b8:	b30a      	cbz	r2, 877fe <_vfiprintf_r+0x8fa>
   877ba:	4659      	mov	r1, fp
   877bc:	4628      	mov	r0, r5
   877be:	aa0e      	add	r2, sp, #56	; 0x38
   877c0:	f7ff fb64 	bl	86e8c <__sprint_r.part.0>
   877c4:	2800      	cmp	r0, #0
   877c6:	f47f ad37 	bne.w	87238 <_vfiprintf_r+0x334>
   877ca:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   877ce:	3c10      	subs	r4, #16
   877d0:	2c10      	cmp	r4, #16
   877d2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   877d6:	f103 0101 	add.w	r1, r3, #1
   877da:	dce2      	bgt.n	877a2 <_vfiprintf_r+0x89e>
   877dc:	4645      	mov	r5, r8
   877de:	46c8      	mov	r8, r9
   877e0:	46b1      	mov	r9, r6
   877e2:	4656      	mov	r6, sl
   877e4:	46e2      	mov	sl, ip
   877e6:	4422      	add	r2, r4
   877e8:	2907      	cmp	r1, #7
   877ea:	e9ca 9400 	strd	r9, r4, [sl]
   877ee:	9210      	str	r2, [sp, #64]	; 0x40
   877f0:	910f      	str	r1, [sp, #60]	; 0x3c
   877f2:	f300 80a8 	bgt.w	87946 <_vfiprintf_r+0xa42>
   877f6:	f10a 0a08 	add.w	sl, sl, #8
   877fa:	1c48      	adds	r0, r1, #1
   877fc:	e54b      	b.n	87296 <_vfiprintf_r+0x392>
   877fe:	4613      	mov	r3, r2
   87800:	2101      	movs	r1, #1
   87802:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   87806:	e7c9      	b.n	8779c <_vfiprintf_r+0x898>
   87808:	0778      	lsls	r0, r7, #29
   8780a:	920f      	str	r2, [sp, #60]	; 0x3c
   8780c:	d554      	bpl.n	878b8 <_vfiprintf_r+0x9b4>
   8780e:	9b02      	ldr	r3, [sp, #8]
   87810:	1b5c      	subs	r4, r3, r5
   87812:	2c00      	cmp	r4, #0
   87814:	dd50      	ble.n	878b8 <_vfiprintf_r+0x9b4>
   87816:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8781a:	2c10      	cmp	r4, #16
   8781c:	f340 81d7 	ble.w	87bce <_vfiprintf_r+0xcca>
   87820:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8783c <_vfiprintf_r+0x938>
   87824:	2610      	movs	r6, #16
   87826:	464b      	mov	r3, r9
   87828:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8782a:	46a9      	mov	r9, r5
   8782c:	9f05      	ldr	r7, [sp, #20]
   8782e:	461d      	mov	r5, r3
   87830:	e00d      	b.n	8784e <_vfiprintf_r+0x94a>
   87832:	bf00      	nop
   87834:	0008bf00 	.word	0x0008bf00
   87838:	0008bf64 	.word	0x0008bf64
   8783c:	0008bf54 	.word	0x0008bf54
   87840:	1c88      	adds	r0, r1, #2
   87842:	4619      	mov	r1, r3
   87844:	f10a 0a08 	add.w	sl, sl, #8
   87848:	3c10      	subs	r4, #16
   8784a:	2c10      	cmp	r4, #16
   8784c:	dd19      	ble.n	87882 <_vfiprintf_r+0x97e>
   8784e:	1c4b      	adds	r3, r1, #1
   87850:	3210      	adds	r2, #16
   87852:	2b07      	cmp	r3, #7
   87854:	e9ca 5600 	strd	r5, r6, [sl]
   87858:	9210      	str	r2, [sp, #64]	; 0x40
   8785a:	930f      	str	r3, [sp, #60]	; 0x3c
   8785c:	ddf0      	ble.n	87840 <_vfiprintf_r+0x93c>
   8785e:	b332      	cbz	r2, 878ae <_vfiprintf_r+0x9aa>
   87860:	4659      	mov	r1, fp
   87862:	4638      	mov	r0, r7
   87864:	aa0e      	add	r2, sp, #56	; 0x38
   87866:	f7ff fb11 	bl	86e8c <__sprint_r.part.0>
   8786a:	2800      	cmp	r0, #0
   8786c:	f47f ace4 	bne.w	87238 <_vfiprintf_r+0x334>
   87870:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87874:	3c10      	subs	r4, #16
   87876:	2c10      	cmp	r4, #16
   87878:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8787c:	f101 0001 	add.w	r0, r1, #1
   87880:	dce5      	bgt.n	8784e <_vfiprintf_r+0x94a>
   87882:	462b      	mov	r3, r5
   87884:	464d      	mov	r5, r9
   87886:	4699      	mov	r9, r3
   87888:	4422      	add	r2, r4
   8788a:	2807      	cmp	r0, #7
   8788c:	e9ca 9400 	strd	r9, r4, [sl]
   87890:	9210      	str	r2, [sp, #64]	; 0x40
   87892:	900f      	str	r0, [sp, #60]	; 0x3c
   87894:	f77f ad53 	ble.w	8733e <_vfiprintf_r+0x43a>
   87898:	b172      	cbz	r2, 878b8 <_vfiprintf_r+0x9b4>
   8789a:	4659      	mov	r1, fp
   8789c:	9805      	ldr	r0, [sp, #20]
   8789e:	aa0e      	add	r2, sp, #56	; 0x38
   878a0:	f7ff faf4 	bl	86e8c <__sprint_r.part.0>
   878a4:	2800      	cmp	r0, #0
   878a6:	f47f acc7 	bne.w	87238 <_vfiprintf_r+0x334>
   878aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   878ac:	e547      	b.n	8733e <_vfiprintf_r+0x43a>
   878ae:	2001      	movs	r0, #1
   878b0:	4611      	mov	r1, r2
   878b2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   878b6:	e7c7      	b.n	87848 <_vfiprintf_r+0x944>
   878b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   878bc:	42aa      	cmp	r2, r5
   878be:	bfac      	ite	ge
   878c0:	189b      	addge	r3, r3, r2
   878c2:	195b      	addlt	r3, r3, r5
   878c4:	9303      	str	r3, [sp, #12]
   878c6:	e544      	b.n	87352 <_vfiprintf_r+0x44e>
   878c8:	2a00      	cmp	r2, #0
   878ca:	f43f ae88 	beq.w	875de <_vfiprintf_r+0x6da>
   878ce:	4659      	mov	r1, fp
   878d0:	9805      	ldr	r0, [sp, #20]
   878d2:	aa0e      	add	r2, sp, #56	; 0x38
   878d4:	f7ff fada 	bl	86e8c <__sprint_r.part.0>
   878d8:	2800      	cmp	r0, #0
   878da:	f47f acad 	bne.w	87238 <_vfiprintf_r+0x334>
   878de:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   878e2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   878e6:	3001      	adds	r0, #1
   878e8:	e50c      	b.n	87304 <_vfiprintf_r+0x400>
   878ea:	9b07      	ldr	r3, [sp, #28]
   878ec:	2b00      	cmp	r3, #0
   878ee:	d16b      	bne.n	879c8 <_vfiprintf_r+0xac4>
   878f0:	2001      	movs	r0, #1
   878f2:	4611      	mov	r1, r2
   878f4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   878f8:	e4fa      	b.n	872f0 <_vfiprintf_r+0x3ec>
   878fa:	920f      	str	r2, [sp, #60]	; 0x3c
   878fc:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87900:	e481      	b.n	87206 <_vfiprintf_r+0x302>
   87902:	9b00      	ldr	r3, [sp, #0]
   87904:	2b00      	cmp	r3, #0
   87906:	f47f ac05 	bne.w	87114 <_vfiprintf_r+0x210>
   8790a:	464f      	mov	r7, r9
   8790c:	2300      	movs	r3, #0
   8790e:	ae3a      	add	r6, sp, #232	; 0xe8
   87910:	9300      	str	r3, [sp, #0]
   87912:	9301      	str	r3, [sp, #4]
   87914:	e406      	b.n	87124 <_vfiprintf_r+0x220>
   87916:	f854 2b04 	ldr.w	r2, [r4], #4
   8791a:	f019 0f10 	tst.w	r9, #16
   8791e:	f04f 0301 	mov.w	r3, #1
   87922:	9404      	str	r4, [sp, #16]
   87924:	d132      	bne.n	8798c <_vfiprintf_r+0xa88>
   87926:	f019 0f40 	tst.w	r9, #64	; 0x40
   8792a:	d02b      	beq.n	87984 <_vfiprintf_r+0xa80>
   8792c:	2500      	movs	r5, #0
   8792e:	b294      	uxth	r4, r2
   87930:	e439      	b.n	871a6 <_vfiprintf_r+0x2a2>
   87932:	232d      	movs	r3, #45	; 0x2d
   87934:	4264      	negs	r4, r4
   87936:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8793a:	46b9      	mov	r9, r7
   8793c:	f04f 0301 	mov.w	r3, #1
   87940:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87944:	e433      	b.n	871ae <_vfiprintf_r+0x2aa>
   87946:	2a00      	cmp	r2, #0
   87948:	d06f      	beq.n	87a2a <_vfiprintf_r+0xb26>
   8794a:	4659      	mov	r1, fp
   8794c:	9805      	ldr	r0, [sp, #20]
   8794e:	aa0e      	add	r2, sp, #56	; 0x38
   87950:	f7ff fa9c 	bl	86e8c <__sprint_r.part.0>
   87954:	2800      	cmp	r0, #0
   87956:	f47f ac6f 	bne.w	87238 <_vfiprintf_r+0x334>
   8795a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8795e:	e497      	b.n	87290 <_vfiprintf_r+0x38c>
   87960:	ae3a      	add	r6, sp, #232	; 0xe8
   87962:	f7ff bbdf 	b.w	87124 <_vfiprintf_r+0x220>
   87966:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8796a:	f001 fed7 	bl	8971c <__retarget_lock_acquire_recursive>
   8796e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   87972:	b28a      	uxth	r2, r1
   87974:	f7ff badd 	b.w	86f32 <_vfiprintf_r+0x2e>
   87978:	4661      	mov	r1, ip
   8797a:	f10a 0a08 	add.w	sl, sl, #8
   8797e:	f10c 0001 	add.w	r0, ip, #1
   87982:	e4b9      	b.n	872f8 <_vfiprintf_r+0x3f4>
   87984:	f419 7f00 	tst.w	r9, #512	; 0x200
   87988:	f040 80ef 	bne.w	87b6a <_vfiprintf_r+0xc66>
   8798c:	4614      	mov	r4, r2
   8798e:	2500      	movs	r5, #0
   87990:	e409      	b.n	871a6 <_vfiprintf_r+0x2a2>
   87992:	05be      	lsls	r6, r7, #22
   87994:	f100 80f7 	bmi.w	87b86 <_vfiprintf_r+0xc82>
   87998:	461c      	mov	r4, r3
   8799a:	2500      	movs	r5, #0
   8799c:	e400      	b.n	871a0 <_vfiprintf_r+0x29c>
   8799e:	05ba      	lsls	r2, r7, #22
   879a0:	f100 80ea 	bmi.w	87b78 <_vfiprintf_r+0xc74>
   879a4:	17e5      	asrs	r5, r4, #31
   879a6:	9304      	str	r3, [sp, #16]
   879a8:	4622      	mov	r2, r4
   879aa:	462b      	mov	r3, r5
   879ac:	f7ff bb9e 	b.w	870ec <_vfiprintf_r+0x1e8>
   879b0:	9b03      	ldr	r3, [sp, #12]
   879b2:	9c04      	ldr	r4, [sp, #16]
   879b4:	17dd      	asrs	r5, r3, #31
   879b6:	461a      	mov	r2, r3
   879b8:	462b      	mov	r3, r5
   879ba:	f854 1b04 	ldr.w	r1, [r4], #4
   879be:	e9c1 2300 	strd	r2, r3, [r1]
   879c2:	9404      	str	r4, [sp, #16]
   879c4:	f7ff badc 	b.w	86f80 <_vfiprintf_r+0x7c>
   879c8:	2202      	movs	r2, #2
   879ca:	ab0d      	add	r3, sp, #52	; 0x34
   879cc:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   879d0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   879d4:	e6cc      	b.n	87770 <_vfiprintf_r+0x86c>
   879d6:	46b9      	mov	r9, r7
   879d8:	e598      	b.n	8750c <_vfiprintf_r+0x608>
   879da:	4a90      	ldr	r2, [pc, #576]	; (87c1c <_vfiprintf_r+0xd18>)
   879dc:	9208      	str	r2, [sp, #32]
   879de:	06bd      	lsls	r5, r7, #26
   879e0:	9c04      	ldr	r4, [sp, #16]
   879e2:	d530      	bpl.n	87a46 <_vfiprintf_r+0xb42>
   879e4:	3407      	adds	r4, #7
   879e6:	f024 0207 	bic.w	r2, r4, #7
   879ea:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   879ee:	9204      	str	r2, [sp, #16]
   879f0:	07fe      	lsls	r6, r7, #31
   879f2:	d509      	bpl.n	87a08 <_vfiprintf_r+0xb04>
   879f4:	ea54 0205 	orrs.w	r2, r4, r5
   879f8:	d006      	beq.n	87a08 <_vfiprintf_r+0xb04>
   879fa:	2230      	movs	r2, #48	; 0x30
   879fc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   87a00:	f047 0702 	orr.w	r7, r7, #2
   87a04:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   87a08:	2302      	movs	r3, #2
   87a0a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   87a0e:	f7ff bbca 	b.w	871a6 <_vfiprintf_r+0x2a2>
   87a12:	4a83      	ldr	r2, [pc, #524]	; (87c20 <_vfiprintf_r+0xd1c>)
   87a14:	9208      	str	r2, [sp, #32]
   87a16:	e7e2      	b.n	879de <_vfiprintf_r+0xada>
   87a18:	4630      	mov	r0, r6
   87a1a:	f003 f879 	bl	8ab10 <strlen>
   87a1e:	2300      	movs	r3, #0
   87a20:	9404      	str	r4, [sp, #16]
   87a22:	9001      	str	r0, [sp, #4]
   87a24:	9300      	str	r3, [sp, #0]
   87a26:	f7ff bb7d 	b.w	87124 <_vfiprintf_r+0x220>
   87a2a:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   87a2e:	2900      	cmp	r1, #0
   87a30:	f040 8089 	bne.w	87b46 <_vfiprintf_r+0xc42>
   87a34:	9b07      	ldr	r3, [sp, #28]
   87a36:	2b00      	cmp	r3, #0
   87a38:	f47f ae92 	bne.w	87760 <_vfiprintf_r+0x85c>
   87a3c:	4611      	mov	r1, r2
   87a3e:	2001      	movs	r0, #1
   87a40:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87a44:	e458      	b.n	872f8 <_vfiprintf_r+0x3f4>
   87a46:	f854 2b04 	ldr.w	r2, [r4], #4
   87a4a:	9404      	str	r4, [sp, #16]
   87a4c:	06fc      	lsls	r4, r7, #27
   87a4e:	d407      	bmi.n	87a60 <_vfiprintf_r+0xb5c>
   87a50:	0678      	lsls	r0, r7, #25
   87a52:	d502      	bpl.n	87a5a <_vfiprintf_r+0xb56>
   87a54:	2500      	movs	r5, #0
   87a56:	b294      	uxth	r4, r2
   87a58:	e7ca      	b.n	879f0 <_vfiprintf_r+0xaec>
   87a5a:	05b9      	lsls	r1, r7, #22
   87a5c:	f100 8089 	bmi.w	87b72 <_vfiprintf_r+0xc6e>
   87a60:	4614      	mov	r4, r2
   87a62:	2500      	movs	r5, #0
   87a64:	e7c4      	b.n	879f0 <_vfiprintf_r+0xaec>
   87a66:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   87a6a:	f8cd 9004 	str.w	r9, [sp, #4]
   87a6e:	f8cd 8018 	str.w	r8, [sp, #24]
   87a72:	2700      	movs	r7, #0
   87a74:	4698      	mov	r8, r3
   87a76:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   87a7a:	ae3a      	add	r6, sp, #232	; 0xe8
   87a7c:	e00b      	b.n	87a96 <_vfiprintf_r+0xb92>
   87a7e:	220a      	movs	r2, #10
   87a80:	2300      	movs	r3, #0
   87a82:	4620      	mov	r0, r4
   87a84:	4629      	mov	r1, r5
   87a86:	f004 f817 	bl	8bab8 <__aeabi_uldivmod>
   87a8a:	2d00      	cmp	r5, #0
   87a8c:	bf08      	it	eq
   87a8e:	2c0a      	cmpeq	r4, #10
   87a90:	d319      	bcc.n	87ac6 <_vfiprintf_r+0xbc2>
   87a92:	4604      	mov	r4, r0
   87a94:	460d      	mov	r5, r1
   87a96:	220a      	movs	r2, #10
   87a98:	2300      	movs	r3, #0
   87a9a:	4620      	mov	r0, r4
   87a9c:	4629      	mov	r1, r5
   87a9e:	f004 f80b 	bl	8bab8 <__aeabi_uldivmod>
   87aa2:	3230      	adds	r2, #48	; 0x30
   87aa4:	f806 2c01 	strb.w	r2, [r6, #-1]
   87aa8:	3701      	adds	r7, #1
   87aaa:	3e01      	subs	r6, #1
   87aac:	f1b8 0f00 	cmp.w	r8, #0
   87ab0:	d0e5      	beq.n	87a7e <_vfiprintf_r+0xb7a>
   87ab2:	f899 3000 	ldrb.w	r3, [r9]
   87ab6:	42bb      	cmp	r3, r7
   87ab8:	d1e1      	bne.n	87a7e <_vfiprintf_r+0xb7a>
   87aba:	2fff      	cmp	r7, #255	; 0xff
   87abc:	d0df      	beq.n	87a7e <_vfiprintf_r+0xb7a>
   87abe:	2d00      	cmp	r5, #0
   87ac0:	bf08      	it	eq
   87ac2:	2c0a      	cmpeq	r4, #10
   87ac4:	d225      	bcs.n	87b12 <_vfiprintf_r+0xc0e>
   87ac6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   87aca:	ab3a      	add	r3, sp, #232	; 0xe8
   87acc:	f8dd 9004 	ldr.w	r9, [sp, #4]
   87ad0:	1b9b      	subs	r3, r3, r6
   87ad2:	464f      	mov	r7, r9
   87ad4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   87ad8:	9301      	str	r3, [sp, #4]
   87ada:	f7ff bb23 	b.w	87124 <_vfiprintf_r+0x220>
   87ade:	46b9      	mov	r9, r7
   87ae0:	f7ff bb13 	b.w	8710a <_vfiprintf_r+0x206>
   87ae4:	2b01      	cmp	r3, #1
   87ae6:	46b9      	mov	r9, r7
   87ae8:	f47f ad44 	bne.w	87574 <_vfiprintf_r+0x670>
   87aec:	f7ff bb12 	b.w	87114 <_vfiprintf_r+0x210>
   87af0:	9c04      	ldr	r4, [sp, #16]
   87af2:	9a03      	ldr	r2, [sp, #12]
   87af4:	f854 3b04 	ldr.w	r3, [r4], #4
   87af8:	601a      	str	r2, [r3, #0]
   87afa:	9404      	str	r4, [sp, #16]
   87afc:	f7ff ba40 	b.w	86f80 <_vfiprintf_r+0x7c>
   87b00:	9d00      	ldr	r5, [sp, #0]
   87b02:	4e48      	ldr	r6, [pc, #288]	; (87c24 <_vfiprintf_r+0xd20>)
   87b04:	2d06      	cmp	r5, #6
   87b06:	bf28      	it	cs
   87b08:	2506      	movcs	r5, #6
   87b0a:	9404      	str	r4, [sp, #16]
   87b0c:	9501      	str	r5, [sp, #4]
   87b0e:	f7ff bbaf 	b.w	87270 <_vfiprintf_r+0x36c>
   87b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87b14:	990a      	ldr	r1, [sp, #40]	; 0x28
   87b16:	1af6      	subs	r6, r6, r3
   87b18:	461a      	mov	r2, r3
   87b1a:	4630      	mov	r0, r6
   87b1c:	f003 f826 	bl	8ab6c <strncpy>
   87b20:	f899 3001 	ldrb.w	r3, [r9, #1]
   87b24:	b10b      	cbz	r3, 87b2a <_vfiprintf_r+0xc26>
   87b26:	f109 0901 	add.w	r9, r9, #1
   87b2a:	220a      	movs	r2, #10
   87b2c:	2300      	movs	r3, #0
   87b2e:	4620      	mov	r0, r4
   87b30:	4629      	mov	r1, r5
   87b32:	f003 ffc1 	bl	8bab8 <__aeabi_uldivmod>
   87b36:	2700      	movs	r7, #0
   87b38:	e7ab      	b.n	87a92 <_vfiprintf_r+0xb8e>
   87b3a:	2001      	movs	r0, #1
   87b3c:	4611      	mov	r1, r2
   87b3e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87b42:	f7ff bbd9 	b.w	872f8 <_vfiprintf_r+0x3f4>
   87b46:	2201      	movs	r2, #1
   87b48:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   87b4c:	4610      	mov	r0, r2
   87b4e:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   87b52:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87b56:	f7ff bbac 	b.w	872b2 <_vfiprintf_r+0x3ae>
   87b5a:	9c04      	ldr	r4, [sp, #16]
   87b5c:	9a03      	ldr	r2, [sp, #12]
   87b5e:	f854 3b04 	ldr.w	r3, [r4], #4
   87b62:	801a      	strh	r2, [r3, #0]
   87b64:	9404      	str	r4, [sp, #16]
   87b66:	f7ff ba0b 	b.w	86f80 <_vfiprintf_r+0x7c>
   87b6a:	2500      	movs	r5, #0
   87b6c:	b2d4      	uxtb	r4, r2
   87b6e:	f7ff bb1a 	b.w	871a6 <_vfiprintf_r+0x2a2>
   87b72:	2500      	movs	r5, #0
   87b74:	b2d4      	uxtb	r4, r2
   87b76:	e73b      	b.n	879f0 <_vfiprintf_r+0xaec>
   87b78:	b264      	sxtb	r4, r4
   87b7a:	17e5      	asrs	r5, r4, #31
   87b7c:	9304      	str	r3, [sp, #16]
   87b7e:	4622      	mov	r2, r4
   87b80:	462b      	mov	r3, r5
   87b82:	f7ff bab3 	b.w	870ec <_vfiprintf_r+0x1e8>
   87b86:	2500      	movs	r5, #0
   87b88:	b2dc      	uxtb	r4, r3
   87b8a:	f7ff bb09 	b.w	871a0 <_vfiprintf_r+0x29c>
   87b8e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   87b92:	f001 fdc5 	bl	89720 <__retarget_lock_release_recursive>
   87b96:	f7ff baec 	b.w	87172 <_vfiprintf_r+0x26e>
   87b9a:	9b00      	ldr	r3, [sp, #0]
   87b9c:	9404      	str	r4, [sp, #16]
   87b9e:	9301      	str	r3, [sp, #4]
   87ba0:	9000      	str	r0, [sp, #0]
   87ba2:	f7ff babf 	b.w	87124 <_vfiprintf_r+0x220>
   87ba6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   87baa:	f8df 907c 	ldr.w	r9, [pc, #124]	; 87c28 <_vfiprintf_r+0xd24>
   87bae:	3101      	adds	r1, #1
   87bb0:	e619      	b.n	877e6 <_vfiprintf_r+0x8e2>
   87bb2:	2200      	movs	r2, #0
   87bb4:	9200      	str	r2, [sp, #0]
   87bb6:	f7ff ba09 	b.w	86fcc <_vfiprintf_r+0xc8>
   87bba:	4659      	mov	r1, fp
   87bbc:	9805      	ldr	r0, [sp, #20]
   87bbe:	aa0e      	add	r2, sp, #56	; 0x38
   87bc0:	f7ff f964 	bl	86e8c <__sprint_r.part.0>
   87bc4:	2800      	cmp	r0, #0
   87bc6:	f43f abd2 	beq.w	8736e <_vfiprintf_r+0x46a>
   87bca:	f7ff bb36 	b.w	8723a <_vfiprintf_r+0x336>
   87bce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   87bd0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 87c28 <_vfiprintf_r+0xd24>
   87bd4:	3001      	adds	r0, #1
   87bd6:	e657      	b.n	87888 <_vfiprintf_r+0x984>
   87bd8:	4684      	mov	ip, r0
   87bda:	f8df 9050 	ldr.w	r9, [pc, #80]	; 87c2c <_vfiprintf_r+0xd28>
   87bde:	e543      	b.n	87668 <_vfiprintf_r+0x764>
   87be0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87be4:	07db      	lsls	r3, r3, #31
   87be6:	d407      	bmi.n	87bf8 <_vfiprintf_r+0xcf4>
   87be8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   87bec:	059f      	lsls	r7, r3, #22
   87bee:	d403      	bmi.n	87bf8 <_vfiprintf_r+0xcf4>
   87bf0:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   87bf4:	f001 fd94 	bl	89720 <__retarget_lock_release_recursive>
   87bf8:	f04f 33ff 	mov.w	r3, #4294967295
   87bfc:	9303      	str	r3, [sp, #12]
   87bfe:	f7ff bb27 	b.w	87250 <_vfiprintf_r+0x34c>
   87c02:	9a04      	ldr	r2, [sp, #16]
   87c04:	f898 3001 	ldrb.w	r3, [r8, #1]
   87c08:	f852 0b04 	ldr.w	r0, [r2], #4
   87c0c:	4688      	mov	r8, r1
   87c0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   87c12:	9000      	str	r0, [sp, #0]
   87c14:	9204      	str	r2, [sp, #16]
   87c16:	f7ff b9d7 	b.w	86fc8 <_vfiprintf_r+0xc4>
   87c1a:	bf00      	nop
   87c1c:	0008bf14 	.word	0x0008bf14
   87c20:	0008bf00 	.word	0x0008bf00
   87c24:	0008bf28 	.word	0x0008bf28
   87c28:	0008bf54 	.word	0x0008bf54
   87c2c:	0008bf64 	.word	0x0008bf64

00087c30 <__sbprintf>:
   87c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   87c32:	460c      	mov	r4, r1
   87c34:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   87c38:	f04f 0e00 	mov.w	lr, #0
   87c3c:	4615      	mov	r5, r2
   87c3e:	4606      	mov	r6, r0
   87c40:	461f      	mov	r7, r3
   87c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87c44:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   87c48:	89e2      	ldrh	r2, [r4, #14]
   87c4a:	8989      	ldrh	r1, [r1, #12]
   87c4c:	9319      	str	r3, [sp, #100]	; 0x64
   87c4e:	69e3      	ldr	r3, [r4, #28]
   87c50:	f8ad 200e 	strh.w	r2, [sp, #14]
   87c54:	6a62      	ldr	r2, [r4, #36]	; 0x24
   87c56:	f021 0102 	bic.w	r1, r1, #2
   87c5a:	9307      	str	r3, [sp, #28]
   87c5c:	a816      	add	r0, sp, #88	; 0x58
   87c5e:	ab1a      	add	r3, sp, #104	; 0x68
   87c60:	f8ad 100c 	strh.w	r1, [sp, #12]
   87c64:	f8cd e018 	str.w	lr, [sp, #24]
   87c68:	9209      	str	r2, [sp, #36]	; 0x24
   87c6a:	9300      	str	r3, [sp, #0]
   87c6c:	9304      	str	r3, [sp, #16]
   87c6e:	f8cd c008 	str.w	ip, [sp, #8]
   87c72:	f8cd c014 	str.w	ip, [sp, #20]
   87c76:	f001 fd4d 	bl	89714 <__retarget_lock_init_recursive>
   87c7a:	462a      	mov	r2, r5
   87c7c:	463b      	mov	r3, r7
   87c7e:	4669      	mov	r1, sp
   87c80:	4630      	mov	r0, r6
   87c82:	f7ff f93f 	bl	86f04 <_vfiprintf_r>
   87c86:	1e05      	subs	r5, r0, #0
   87c88:	db07      	blt.n	87c9a <__sbprintf+0x6a>
   87c8a:	4630      	mov	r0, r6
   87c8c:	4669      	mov	r1, sp
   87c8e:	f001 f917 	bl	88ec0 <_fflush_r>
   87c92:	2800      	cmp	r0, #0
   87c94:	bf18      	it	ne
   87c96:	f04f 35ff 	movne.w	r5, #4294967295
   87c9a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   87c9e:	065b      	lsls	r3, r3, #25
   87ca0:	d503      	bpl.n	87caa <__sbprintf+0x7a>
   87ca2:	89a3      	ldrh	r3, [r4, #12]
   87ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87ca8:	81a3      	strh	r3, [r4, #12]
   87caa:	9816      	ldr	r0, [sp, #88]	; 0x58
   87cac:	f001 fd34 	bl	89718 <__retarget_lock_close_recursive>
   87cb0:	4628      	mov	r0, r5
   87cb2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   87cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087cb8 <__swsetup_r>:
   87cb8:	b538      	push	{r3, r4, r5, lr}
   87cba:	4b32      	ldr	r3, [pc, #200]	; (87d84 <__swsetup_r+0xcc>)
   87cbc:	4605      	mov	r5, r0
   87cbe:	6818      	ldr	r0, [r3, #0]
   87cc0:	460c      	mov	r4, r1
   87cc2:	b110      	cbz	r0, 87cca <__swsetup_r+0x12>
   87cc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87cc6:	2b00      	cmp	r3, #0
   87cc8:	d03c      	beq.n	87d44 <__swsetup_r+0x8c>
   87cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87cce:	0718      	lsls	r0, r3, #28
   87cd0:	b29a      	uxth	r2, r3
   87cd2:	d50c      	bpl.n	87cee <__swsetup_r+0x36>
   87cd4:	6921      	ldr	r1, [r4, #16]
   87cd6:	b1a9      	cbz	r1, 87d04 <__swsetup_r+0x4c>
   87cd8:	f012 0001 	ands.w	r0, r2, #1
   87cdc:	d022      	beq.n	87d24 <__swsetup_r+0x6c>
   87cde:	2500      	movs	r5, #0
   87ce0:	6960      	ldr	r0, [r4, #20]
   87ce2:	60a5      	str	r5, [r4, #8]
   87ce4:	4240      	negs	r0, r0
   87ce6:	61a0      	str	r0, [r4, #24]
   87ce8:	b311      	cbz	r1, 87d30 <__swsetup_r+0x78>
   87cea:	2000      	movs	r0, #0
   87cec:	bd38      	pop	{r3, r4, r5, pc}
   87cee:	06d1      	lsls	r1, r2, #27
   87cf0:	d53f      	bpl.n	87d72 <__swsetup_r+0xba>
   87cf2:	0752      	lsls	r2, r2, #29
   87cf4:	d429      	bmi.n	87d4a <__swsetup_r+0x92>
   87cf6:	6921      	ldr	r1, [r4, #16]
   87cf8:	f043 0308 	orr.w	r3, r3, #8
   87cfc:	81a3      	strh	r3, [r4, #12]
   87cfe:	b29a      	uxth	r2, r3
   87d00:	2900      	cmp	r1, #0
   87d02:	d1e9      	bne.n	87cd8 <__swsetup_r+0x20>
   87d04:	f402 7020 	and.w	r0, r2, #640	; 0x280
   87d08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   87d0c:	d0e4      	beq.n	87cd8 <__swsetup_r+0x20>
   87d0e:	4628      	mov	r0, r5
   87d10:	4621      	mov	r1, r4
   87d12:	f001 fd35 	bl	89780 <__smakebuf_r>
   87d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87d1a:	6921      	ldr	r1, [r4, #16]
   87d1c:	b29a      	uxth	r2, r3
   87d1e:	f012 0001 	ands.w	r0, r2, #1
   87d22:	d1dc      	bne.n	87cde <__swsetup_r+0x26>
   87d24:	0795      	lsls	r5, r2, #30
   87d26:	bf58      	it	pl
   87d28:	6960      	ldrpl	r0, [r4, #20]
   87d2a:	60a0      	str	r0, [r4, #8]
   87d2c:	2900      	cmp	r1, #0
   87d2e:	d1dc      	bne.n	87cea <__swsetup_r+0x32>
   87d30:	0612      	lsls	r2, r2, #24
   87d32:	bf58      	it	pl
   87d34:	4608      	movpl	r0, r1
   87d36:	d5d9      	bpl.n	87cec <__swsetup_r+0x34>
   87d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87d3c:	f04f 30ff 	mov.w	r0, #4294967295
   87d40:	81a3      	strh	r3, [r4, #12]
   87d42:	bd38      	pop	{r3, r4, r5, pc}
   87d44:	f001 f918 	bl	88f78 <__sinit>
   87d48:	e7bf      	b.n	87cca <__swsetup_r+0x12>
   87d4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87d4c:	b151      	cbz	r1, 87d64 <__swsetup_r+0xac>
   87d4e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   87d52:	4291      	cmp	r1, r2
   87d54:	d004      	beq.n	87d60 <__swsetup_r+0xa8>
   87d56:	4628      	mov	r0, r5
   87d58:	f001 fa32 	bl	891c0 <_free_r>
   87d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87d60:	2200      	movs	r2, #0
   87d62:	6322      	str	r2, [r4, #48]	; 0x30
   87d64:	2200      	movs	r2, #0
   87d66:	6921      	ldr	r1, [r4, #16]
   87d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   87d6c:	e9c4 1200 	strd	r1, r2, [r4]
   87d70:	e7c2      	b.n	87cf8 <__swsetup_r+0x40>
   87d72:	2209      	movs	r2, #9
   87d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87d78:	602a      	str	r2, [r5, #0]
   87d7a:	f04f 30ff 	mov.w	r0, #4294967295
   87d7e:	81a3      	strh	r3, [r4, #12]
   87d80:	bd38      	pop	{r3, r4, r5, pc}
   87d82:	bf00      	nop
   87d84:	200003ac 	.word	0x200003ac

00087d88 <register_fini>:
   87d88:	4b02      	ldr	r3, [pc, #8]	; (87d94 <register_fini+0xc>)
   87d8a:	b113      	cbz	r3, 87d92 <register_fini+0xa>
   87d8c:	4802      	ldr	r0, [pc, #8]	; (87d98 <register_fini+0x10>)
   87d8e:	f000 b805 	b.w	87d9c <atexit>
   87d92:	4770      	bx	lr
   87d94:	00000000 	.word	0x00000000
   87d98:	00088fed 	.word	0x00088fed

00087d9c <atexit>:
   87d9c:	2300      	movs	r3, #0
   87d9e:	4601      	mov	r1, r0
   87da0:	461a      	mov	r2, r3
   87da2:	4618      	mov	r0, r3
   87da4:	f003 b82c 	b.w	8ae00 <__register_exitproc>

00087da8 <quorem>:
   87da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87dac:	6903      	ldr	r3, [r0, #16]
   87dae:	690d      	ldr	r5, [r1, #16]
   87db0:	b083      	sub	sp, #12
   87db2:	42ab      	cmp	r3, r5
   87db4:	f2c0 8084 	blt.w	87ec0 <quorem+0x118>
   87db8:	3d01      	subs	r5, #1
   87dba:	f101 0614 	add.w	r6, r1, #20
   87dbe:	f100 0914 	add.w	r9, r0, #20
   87dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   87dc6:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   87dca:	3301      	adds	r3, #1
   87dcc:	468e      	mov	lr, r1
   87dce:	00a9      	lsls	r1, r5, #2
   87dd0:	9100      	str	r1, [sp, #0]
   87dd2:	429a      	cmp	r2, r3
   87dd4:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   87dd8:	4682      	mov	sl, r0
   87dda:	fbb2 f7f3 	udiv	r7, r2, r3
   87dde:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   87de2:	9101      	str	r1, [sp, #4]
   87de4:	d337      	bcc.n	87e56 <quorem+0xae>
   87de6:	2200      	movs	r2, #0
   87de8:	46b4      	mov	ip, r6
   87dea:	4614      	mov	r4, r2
   87dec:	4648      	mov	r0, r9
   87dee:	f85c 3b04 	ldr.w	r3, [ip], #4
   87df2:	6801      	ldr	r1, [r0, #0]
   87df4:	fa1f fb83 	uxth.w	fp, r3
   87df8:	fb07 220b 	mla	r2, r7, fp, r2
   87dfc:	0c1b      	lsrs	r3, r3, #16
   87dfe:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   87e02:	fb07 bb03 	mla	fp, r7, r3, fp
   87e06:	b293      	uxth	r3, r2
   87e08:	1ae3      	subs	r3, r4, r3
   87e0a:	b28a      	uxth	r2, r1
   87e0c:	fa1f f48b 	uxth.w	r4, fp
   87e10:	4413      	add	r3, r2
   87e12:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   87e16:	eb04 4423 	add.w	r4, r4, r3, asr #16
   87e1a:	b29b      	uxth	r3, r3
   87e1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   87e20:	45e0      	cmp	r8, ip
   87e22:	f840 3b04 	str.w	r3, [r0], #4
   87e26:	ea4f 4424 	mov.w	r4, r4, asr #16
   87e2a:	ea4f 421b 	mov.w	r2, fp, lsr #16
   87e2e:	d2de      	bcs.n	87dee <quorem+0x46>
   87e30:	9b00      	ldr	r3, [sp, #0]
   87e32:	f859 3003 	ldr.w	r3, [r9, r3]
   87e36:	b973      	cbnz	r3, 87e56 <quorem+0xae>
   87e38:	9b01      	ldr	r3, [sp, #4]
   87e3a:	3b04      	subs	r3, #4
   87e3c:	4599      	cmp	r9, r3
   87e3e:	d304      	bcc.n	87e4a <quorem+0xa2>
   87e40:	e007      	b.n	87e52 <quorem+0xaa>
   87e42:	4599      	cmp	r9, r3
   87e44:	f105 35ff 	add.w	r5, r5, #4294967295
   87e48:	d203      	bcs.n	87e52 <quorem+0xaa>
   87e4a:	f853 2904 	ldr.w	r2, [r3], #-4
   87e4e:	2a00      	cmp	r2, #0
   87e50:	d0f7      	beq.n	87e42 <quorem+0x9a>
   87e52:	f8ca 5010 	str.w	r5, [sl, #16]
   87e56:	4671      	mov	r1, lr
   87e58:	4650      	mov	r0, sl
   87e5a:	f002 fab1 	bl	8a3c0 <__mcmp>
   87e5e:	2800      	cmp	r0, #0
   87e60:	db2a      	blt.n	87eb8 <quorem+0x110>
   87e62:	4648      	mov	r0, r9
   87e64:	2300      	movs	r3, #0
   87e66:	3701      	adds	r7, #1
   87e68:	f856 1b04 	ldr.w	r1, [r6], #4
   87e6c:	6804      	ldr	r4, [r0, #0]
   87e6e:	b28a      	uxth	r2, r1
   87e70:	1a9a      	subs	r2, r3, r2
   87e72:	0c0b      	lsrs	r3, r1, #16
   87e74:	b2a1      	uxth	r1, r4
   87e76:	440a      	add	r2, r1
   87e78:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   87e7c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87e80:	b292      	uxth	r2, r2
   87e82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87e86:	45b0      	cmp	r8, r6
   87e88:	f840 2b04 	str.w	r2, [r0], #4
   87e8c:	ea4f 4323 	mov.w	r3, r3, asr #16
   87e90:	d2ea      	bcs.n	87e68 <quorem+0xc0>
   87e92:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   87e96:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   87e9a:	b96a      	cbnz	r2, 87eb8 <quorem+0x110>
   87e9c:	3b04      	subs	r3, #4
   87e9e:	4599      	cmp	r9, r3
   87ea0:	d304      	bcc.n	87eac <quorem+0x104>
   87ea2:	e007      	b.n	87eb4 <quorem+0x10c>
   87ea4:	4599      	cmp	r9, r3
   87ea6:	f105 35ff 	add.w	r5, r5, #4294967295
   87eaa:	d203      	bcs.n	87eb4 <quorem+0x10c>
   87eac:	f853 2904 	ldr.w	r2, [r3], #-4
   87eb0:	2a00      	cmp	r2, #0
   87eb2:	d0f7      	beq.n	87ea4 <quorem+0xfc>
   87eb4:	f8ca 5010 	str.w	r5, [sl, #16]
   87eb8:	4638      	mov	r0, r7
   87eba:	b003      	add	sp, #12
   87ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ec0:	2000      	movs	r0, #0
   87ec2:	b003      	add	sp, #12
   87ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087ec8 <_dtoa_r>:
   87ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87ecc:	4616      	mov	r6, r2
   87ece:	461f      	mov	r7, r3
   87ed0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   87ed2:	b09b      	sub	sp, #108	; 0x6c
   87ed4:	4604      	mov	r4, r0
   87ed6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   87eda:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   87edc:	b141      	cbz	r1, 87ef0 <_dtoa_r+0x28>
   87ede:	2301      	movs	r3, #1
   87ee0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   87ee2:	4093      	lsls	r3, r2
   87ee4:	e9c1 2301 	strd	r2, r3, [r1, #4]
   87ee8:	f002 f83c 	bl	89f64 <_Bfree>
   87eec:	2300      	movs	r3, #0
   87eee:	6423      	str	r3, [r4, #64]	; 0x40
   87ef0:	f1b7 0900 	subs.w	r9, r7, #0
   87ef4:	bfb4      	ite	lt
   87ef6:	2301      	movlt	r3, #1
   87ef8:	2300      	movge	r3, #0
   87efa:	602b      	str	r3, [r5, #0]
   87efc:	4b76      	ldr	r3, [pc, #472]	; (880d8 <_dtoa_r+0x210>)
   87efe:	bfbc      	itt	lt
   87f00:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   87f04:	f8cd 9014 	strlt.w	r9, [sp, #20]
   87f08:	ea33 0309 	bics.w	r3, r3, r9
   87f0c:	f000 80ab 	beq.w	88066 <_dtoa_r+0x19e>
   87f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   87f14:	4610      	mov	r0, r2
   87f16:	4619      	mov	r1, r3
   87f18:	2200      	movs	r2, #0
   87f1a:	2300      	movs	r3, #0
   87f1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   87f20:	f003 fd5a 	bl	8b9d8 <__aeabi_dcmpeq>
   87f24:	4680      	mov	r8, r0
   87f26:	b170      	cbz	r0, 87f46 <_dtoa_r+0x7e>
   87f28:	2301      	movs	r3, #1
   87f2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87f2c:	6013      	str	r3, [r2, #0]
   87f2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87f30:	2b00      	cmp	r3, #0
   87f32:	f000 82c2 	beq.w	884ba <_dtoa_r+0x5f2>
   87f36:	4869      	ldr	r0, [pc, #420]	; (880dc <_dtoa_r+0x214>)
   87f38:	6018      	str	r0, [r3, #0]
   87f3a:	1e43      	subs	r3, r0, #1
   87f3c:	9303      	str	r3, [sp, #12]
   87f3e:	9803      	ldr	r0, [sp, #12]
   87f40:	b01b      	add	sp, #108	; 0x6c
   87f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f46:	aa18      	add	r2, sp, #96	; 0x60
   87f48:	ab19      	add	r3, sp, #100	; 0x64
   87f4a:	e9cd 3200 	strd	r3, r2, [sp]
   87f4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   87f52:	4620      	mov	r0, r4
   87f54:	f002 fafa 	bl	8a54c <__d2b>
   87f58:	ea5f 5519 	movs.w	r5, r9, lsr #20
   87f5c:	4682      	mov	sl, r0
   87f5e:	f040 8098 	bne.w	88092 <_dtoa_r+0x1ca>
   87f62:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   87f66:	4445      	add	r5, r8
   87f68:	f205 4032 	addw	r0, r5, #1074	; 0x432
   87f6c:	2820      	cmp	r0, #32
   87f6e:	f340 8390 	ble.w	88692 <_dtoa_r+0x7ca>
   87f72:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   87f76:	f205 4012 	addw	r0, r5, #1042	; 0x412
   87f7a:	fa09 f903 	lsl.w	r9, r9, r3
   87f7e:	fa26 f000 	lsr.w	r0, r6, r0
   87f82:	ea49 0000 	orr.w	r0, r9, r0
   87f86:	f003 fa45 	bl	8b414 <__aeabi_ui2d>
   87f8a:	2201      	movs	r2, #1
   87f8c:	3d01      	subs	r5, #1
   87f8e:	920f      	str	r2, [sp, #60]	; 0x3c
   87f90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87f94:	2200      	movs	r2, #0
   87f96:	4b52      	ldr	r3, [pc, #328]	; (880e0 <_dtoa_r+0x218>)
   87f98:	f003 f8fe 	bl	8b198 <__aeabi_dsub>
   87f9c:	a348      	add	r3, pc, #288	; (adr r3, 880c0 <_dtoa_r+0x1f8>)
   87f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87fa2:	f003 fab1 	bl	8b508 <__aeabi_dmul>
   87fa6:	a348      	add	r3, pc, #288	; (adr r3, 880c8 <_dtoa_r+0x200>)
   87fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   87fac:	f003 f8f6 	bl	8b19c <__adddf3>
   87fb0:	4606      	mov	r6, r0
   87fb2:	4628      	mov	r0, r5
   87fb4:	460f      	mov	r7, r1
   87fb6:	f003 fa3d 	bl	8b434 <__aeabi_i2d>
   87fba:	a345      	add	r3, pc, #276	; (adr r3, 880d0 <_dtoa_r+0x208>)
   87fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   87fc0:	f003 faa2 	bl	8b508 <__aeabi_dmul>
   87fc4:	4602      	mov	r2, r0
   87fc6:	460b      	mov	r3, r1
   87fc8:	4630      	mov	r0, r6
   87fca:	4639      	mov	r1, r7
   87fcc:	f003 f8e6 	bl	8b19c <__adddf3>
   87fd0:	4606      	mov	r6, r0
   87fd2:	460f      	mov	r7, r1
   87fd4:	f003 fd48 	bl	8ba68 <__aeabi_d2iz>
   87fd8:	2200      	movs	r2, #0
   87fda:	4683      	mov	fp, r0
   87fdc:	2300      	movs	r3, #0
   87fde:	4630      	mov	r0, r6
   87fe0:	4639      	mov	r1, r7
   87fe2:	f003 fd03 	bl	8b9ec <__aeabi_dcmplt>
   87fe6:	2800      	cmp	r0, #0
   87fe8:	f040 825a 	bne.w	884a0 <_dtoa_r+0x5d8>
   87fec:	f1bb 0f16 	cmp.w	fp, #22
   87ff0:	f200 8248 	bhi.w	88484 <_dtoa_r+0x5bc>
   87ff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87ff8:	4b3a      	ldr	r3, [pc, #232]	; (880e4 <_dtoa_r+0x21c>)
   87ffa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   87ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
   88002:	f003 fcf3 	bl	8b9ec <__aeabi_dcmplt>
   88006:	2800      	cmp	r0, #0
   88008:	d072      	beq.n	880f0 <_dtoa_r+0x228>
   8800a:	2300      	movs	r3, #0
   8800c:	eba8 0505 	sub.w	r5, r8, r5
   88010:	930e      	str	r3, [sp, #56]	; 0x38
   88012:	1e6b      	subs	r3, r5, #1
   88014:	f10b 3bff 	add.w	fp, fp, #4294967295
   88018:	9306      	str	r3, [sp, #24]
   8801a:	f100 823b 	bmi.w	88494 <_dtoa_r+0x5cc>
   8801e:	2300      	movs	r3, #0
   88020:	930b      	str	r3, [sp, #44]	; 0x2c
   88022:	f1bb 0f00 	cmp.w	fp, #0
   88026:	da6b      	bge.n	88100 <_dtoa_r+0x238>
   88028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8802a:	f8cd b01c 	str.w	fp, [sp, #28]
   8802e:	eba3 030b 	sub.w	r3, r3, fp
   88032:	930b      	str	r3, [sp, #44]	; 0x2c
   88034:	f1cb 0300 	rsb	r3, fp, #0
   88038:	930d      	str	r3, [sp, #52]	; 0x34
   8803a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8803c:	f04f 0b00 	mov.w	fp, #0
   88040:	2b09      	cmp	r3, #9
   88042:	d866      	bhi.n	88112 <_dtoa_r+0x24a>
   88044:	2b05      	cmp	r3, #5
   88046:	f340 8322 	ble.w	8868e <_dtoa_r+0x7c6>
   8804a:	2500      	movs	r5, #0
   8804c:	3b04      	subs	r3, #4
   8804e:	9324      	str	r3, [sp, #144]	; 0x90
   88050:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88052:	3b02      	subs	r3, #2
   88054:	2b03      	cmp	r3, #3
   88056:	f200 866e 	bhi.w	88d36 <_dtoa_r+0xe6e>
   8805a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8805e:	043b      	.short	0x043b
   88060:	042f0438 	.word	0x042f0438
   88064:	0412      	.short	0x0412
   88066:	f242 730f 	movw	r3, #9999	; 0x270f
   8806a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8806c:	f3c9 0913 	ubfx	r9, r9, #0, #20
   88070:	6013      	str	r3, [r2, #0]
   88072:	ea59 0306 	orrs.w	r3, r9, r6
   88076:	d11c      	bne.n	880b2 <_dtoa_r+0x1ea>
   88078:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8807a:	2b00      	cmp	r3, #0
   8807c:	f000 8657 	beq.w	88d2e <_dtoa_r+0xe66>
   88080:	4b19      	ldr	r3, [pc, #100]	; (880e8 <_dtoa_r+0x220>)
   88082:	9303      	str	r3, [sp, #12]
   88084:	3308      	adds	r3, #8
   88086:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   88088:	9803      	ldr	r0, [sp, #12]
   8808a:	6013      	str	r3, [r2, #0]
   8808c:	b01b      	add	sp, #108	; 0x6c
   8808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88092:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   88096:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8809a:	4608      	mov	r0, r1
   8809c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   880a0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   880a4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   880a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   880ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   880b0:	e770      	b.n	87f94 <_dtoa_r+0xcc>
   880b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   880b4:	2b00      	cmp	r3, #0
   880b6:	f040 83c8 	bne.w	8884a <_dtoa_r+0x982>
   880ba:	4b0c      	ldr	r3, [pc, #48]	; (880ec <_dtoa_r+0x224>)
   880bc:	9303      	str	r3, [sp, #12]
   880be:	e73e      	b.n	87f3e <_dtoa_r+0x76>
   880c0:	636f4361 	.word	0x636f4361
   880c4:	3fd287a7 	.word	0x3fd287a7
   880c8:	8b60c8b3 	.word	0x8b60c8b3
   880cc:	3fc68a28 	.word	0x3fc68a28
   880d0:	509f79fb 	.word	0x509f79fb
   880d4:	3fd34413 	.word	0x3fd34413
   880d8:	7ff00000 	.word	0x7ff00000
   880dc:	0008bf31 	.word	0x0008bf31
   880e0:	3ff80000 	.word	0x3ff80000
   880e4:	0008c0d0 	.word	0x0008c0d0
   880e8:	0008bf78 	.word	0x0008bf78
   880ec:	0008bf74 	.word	0x0008bf74
   880f0:	eba8 0505 	sub.w	r5, r8, r5
   880f4:	1e6b      	subs	r3, r5, #1
   880f6:	9306      	str	r3, [sp, #24]
   880f8:	f100 84a9 	bmi.w	88a4e <_dtoa_r+0xb86>
   880fc:	900e      	str	r0, [sp, #56]	; 0x38
   880fe:	900b      	str	r0, [sp, #44]	; 0x2c
   88100:	9b06      	ldr	r3, [sp, #24]
   88102:	445b      	add	r3, fp
   88104:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   88108:	2300      	movs	r3, #0
   8810a:	930d      	str	r3, [sp, #52]	; 0x34
   8810c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8810e:	2b09      	cmp	r3, #9
   88110:	d998      	bls.n	88044 <_dtoa_r+0x17c>
   88112:	2300      	movs	r3, #0
   88114:	2501      	movs	r5, #1
   88116:	9324      	str	r3, [sp, #144]	; 0x90
   88118:	9325      	str	r3, [sp, #148]	; 0x94
   8811a:	f04f 33ff 	mov.w	r3, #4294967295
   8811e:	950c      	str	r5, [sp, #48]	; 0x30
   88120:	930a      	str	r3, [sp, #40]	; 0x28
   88122:	2100      	movs	r1, #0
   88124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88126:	6461      	str	r1, [r4, #68]	; 0x44
   88128:	9312      	str	r3, [sp, #72]	; 0x48
   8812a:	4620      	mov	r0, r4
   8812c:	f001 fef4 	bl	89f18 <_Balloc>
   88130:	9003      	str	r0, [sp, #12]
   88132:	2800      	cmp	r0, #0
   88134:	f000 8607 	beq.w	88d46 <_dtoa_r+0xe7e>
   88138:	9b03      	ldr	r3, [sp, #12]
   8813a:	6423      	str	r3, [r4, #64]	; 0x40
   8813c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8813e:	2b0e      	cmp	r3, #14
   88140:	f200 80e9 	bhi.w	88316 <_dtoa_r+0x44e>
   88144:	2d00      	cmp	r5, #0
   88146:	f000 80e6 	beq.w	88316 <_dtoa_r+0x44e>
   8814a:	9907      	ldr	r1, [sp, #28]
   8814c:	2900      	cmp	r1, #0
   8814e:	f340 8452 	ble.w	889f6 <_dtoa_r+0xb2e>
   88152:	4bb5      	ldr	r3, [pc, #724]	; (88428 <_dtoa_r+0x560>)
   88154:	f001 020f 	and.w	r2, r1, #15
   88158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8815c:	05c8      	lsls	r0, r1, #23
   8815e:	ea4f 1521 	mov.w	r5, r1, asr #4
   88162:	e9d3 6700 	ldrd	r6, r7, [r3]
   88166:	f140 83ee 	bpl.w	88946 <_dtoa_r+0xa7e>
   8816a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8816e:	4baf      	ldr	r3, [pc, #700]	; (8842c <_dtoa_r+0x564>)
   88170:	f04f 0903 	mov.w	r9, #3
   88174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   88178:	f003 faf0 	bl	8b75c <__aeabi_ddiv>
   8817c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88180:	f005 050f 	and.w	r5, r5, #15
   88184:	b18d      	cbz	r5, 881aa <_dtoa_r+0x2e2>
   88186:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8842c <_dtoa_r+0x564>
   8818a:	07e9      	lsls	r1, r5, #31
   8818c:	d509      	bpl.n	881a2 <_dtoa_r+0x2da>
   8818e:	e9d8 2300 	ldrd	r2, r3, [r8]
   88192:	4630      	mov	r0, r6
   88194:	4639      	mov	r1, r7
   88196:	f003 f9b7 	bl	8b508 <__aeabi_dmul>
   8819a:	4606      	mov	r6, r0
   8819c:	460f      	mov	r7, r1
   8819e:	f109 0901 	add.w	r9, r9, #1
   881a2:	106d      	asrs	r5, r5, #1
   881a4:	f108 0808 	add.w	r8, r8, #8
   881a8:	d1ef      	bne.n	8818a <_dtoa_r+0x2c2>
   881aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   881ae:	4632      	mov	r2, r6
   881b0:	463b      	mov	r3, r7
   881b2:	f003 fad3 	bl	8b75c <__aeabi_ddiv>
   881b6:	4606      	mov	r6, r0
   881b8:	460f      	mov	r7, r1
   881ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881bc:	b143      	cbz	r3, 881d0 <_dtoa_r+0x308>
   881be:	2200      	movs	r2, #0
   881c0:	4630      	mov	r0, r6
   881c2:	4639      	mov	r1, r7
   881c4:	4b9a      	ldr	r3, [pc, #616]	; (88430 <_dtoa_r+0x568>)
   881c6:	f003 fc11 	bl	8b9ec <__aeabi_dcmplt>
   881ca:	2800      	cmp	r0, #0
   881cc:	f040 853b 	bne.w	88c46 <_dtoa_r+0xd7e>
   881d0:	4648      	mov	r0, r9
   881d2:	f003 f92f 	bl	8b434 <__aeabi_i2d>
   881d6:	4632      	mov	r2, r6
   881d8:	463b      	mov	r3, r7
   881da:	f003 f995 	bl	8b508 <__aeabi_dmul>
   881de:	4b95      	ldr	r3, [pc, #596]	; (88434 <_dtoa_r+0x56c>)
   881e0:	2200      	movs	r2, #0
   881e2:	f002 ffdb 	bl	8b19c <__adddf3>
   881e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   881e8:	4680      	mov	r8, r0
   881ea:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   881ee:	2b00      	cmp	r3, #0
   881f0:	f000 83ce 	beq.w	88990 <_dtoa_r+0xac8>
   881f4:	9b07      	ldr	r3, [sp, #28]
   881f6:	9313      	str	r3, [sp, #76]	; 0x4c
   881f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   881fa:	9310      	str	r3, [sp, #64]	; 0x40
   881fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   881fe:	2b00      	cmp	r3, #0
   88200:	f000 84b7 	beq.w	88b72 <_dtoa_r+0xcaa>
   88204:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88206:	4b88      	ldr	r3, [pc, #544]	; (88428 <_dtoa_r+0x560>)
   88208:	2000      	movs	r0, #0
   8820a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8820e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   88212:	4989      	ldr	r1, [pc, #548]	; (88438 <_dtoa_r+0x570>)
   88214:	f003 faa2 	bl	8b75c <__aeabi_ddiv>
   88218:	4642      	mov	r2, r8
   8821a:	464b      	mov	r3, r9
   8821c:	f002 ffbc 	bl	8b198 <__aeabi_dsub>
   88220:	4602      	mov	r2, r0
   88222:	460b      	mov	r3, r1
   88224:	4630      	mov	r0, r6
   88226:	4639      	mov	r1, r7
   88228:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8822c:	f003 fc1c 	bl	8ba68 <__aeabi_d2iz>
   88230:	4680      	mov	r8, r0
   88232:	f003 f8ff 	bl	8b434 <__aeabi_i2d>
   88236:	4602      	mov	r2, r0
   88238:	460b      	mov	r3, r1
   8823a:	4630      	mov	r0, r6
   8823c:	4639      	mov	r1, r7
   8823e:	f002 ffab 	bl	8b198 <__aeabi_dsub>
   88242:	9d03      	ldr	r5, [sp, #12]
   88244:	f108 0330 	add.w	r3, r8, #48	; 0x30
   88248:	4606      	mov	r6, r0
   8824a:	460f      	mov	r7, r1
   8824c:	4602      	mov	r2, r0
   8824e:	f805 3b01 	strb.w	r3, [r5], #1
   88252:	460b      	mov	r3, r1
   88254:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88258:	f003 fbe6 	bl	8ba28 <__aeabi_dcmpgt>
   8825c:	2800      	cmp	r0, #0
   8825e:	f040 853b 	bne.w	88cd8 <_dtoa_r+0xe10>
   88262:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   88266:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8826a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8826e:	f04f 0900 	mov.w	r9, #0
   88272:	9410      	str	r4, [sp, #64]	; 0x40
   88274:	e02a      	b.n	882cc <_dtoa_r+0x404>
   88276:	f109 0901 	add.w	r9, r9, #1
   8827a:	45c1      	cmp	r9, r8
   8827c:	da48      	bge.n	88310 <_dtoa_r+0x448>
   8827e:	4650      	mov	r0, sl
   88280:	4659      	mov	r1, fp
   88282:	2200      	movs	r2, #0
   88284:	4b6d      	ldr	r3, [pc, #436]	; (8843c <_dtoa_r+0x574>)
   88286:	f003 f93f 	bl	8b508 <__aeabi_dmul>
   8828a:	2200      	movs	r2, #0
   8828c:	4b6b      	ldr	r3, [pc, #428]	; (8843c <_dtoa_r+0x574>)
   8828e:	4682      	mov	sl, r0
   88290:	468b      	mov	fp, r1
   88292:	4630      	mov	r0, r6
   88294:	4639      	mov	r1, r7
   88296:	f003 f937 	bl	8b508 <__aeabi_dmul>
   8829a:	460f      	mov	r7, r1
   8829c:	4606      	mov	r6, r0
   8829e:	f003 fbe3 	bl	8ba68 <__aeabi_d2iz>
   882a2:	4604      	mov	r4, r0
   882a4:	f003 f8c6 	bl	8b434 <__aeabi_i2d>
   882a8:	4602      	mov	r2, r0
   882aa:	460b      	mov	r3, r1
   882ac:	4630      	mov	r0, r6
   882ae:	4639      	mov	r1, r7
   882b0:	f002 ff72 	bl	8b198 <__aeabi_dsub>
   882b4:	3430      	adds	r4, #48	; 0x30
   882b6:	4652      	mov	r2, sl
   882b8:	465b      	mov	r3, fp
   882ba:	f805 4b01 	strb.w	r4, [r5], #1
   882be:	4606      	mov	r6, r0
   882c0:	460f      	mov	r7, r1
   882c2:	f003 fb93 	bl	8b9ec <__aeabi_dcmplt>
   882c6:	2800      	cmp	r0, #0
   882c8:	f040 8503 	bne.w	88cd2 <_dtoa_r+0xe0a>
   882cc:	4632      	mov	r2, r6
   882ce:	463b      	mov	r3, r7
   882d0:	2000      	movs	r0, #0
   882d2:	4957      	ldr	r1, [pc, #348]	; (88430 <_dtoa_r+0x568>)
   882d4:	f002 ff60 	bl	8b198 <__aeabi_dsub>
   882d8:	4652      	mov	r2, sl
   882da:	465b      	mov	r3, fp
   882dc:	f003 fb86 	bl	8b9ec <__aeabi_dcmplt>
   882e0:	2800      	cmp	r0, #0
   882e2:	d0c8      	beq.n	88276 <_dtoa_r+0x3ae>
   882e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   882e6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   882ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
   882ec:	9a03      	ldr	r2, [sp, #12]
   882ee:	9307      	str	r3, [sp, #28]
   882f0:	e002      	b.n	882f8 <_dtoa_r+0x430>
   882f2:	4295      	cmp	r5, r2
   882f4:	f000 84d2 	beq.w	88c9c <_dtoa_r+0xdd4>
   882f8:	46a9      	mov	r9, r5
   882fa:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   882fe:	2b39      	cmp	r3, #57	; 0x39
   88300:	d0f7      	beq.n	882f2 <_dtoa_r+0x42a>
   88302:	3301      	adds	r3, #1
   88304:	b2db      	uxtb	r3, r3
   88306:	702b      	strb	r3, [r5, #0]
   88308:	9b07      	ldr	r3, [sp, #28]
   8830a:	3301      	adds	r3, #1
   8830c:	9307      	str	r3, [sp, #28]
   8830e:	e1a0      	b.n	88652 <_dtoa_r+0x78a>
   88310:	9c10      	ldr	r4, [sp, #64]	; 0x40
   88312:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   88316:	9b19      	ldr	r3, [sp, #100]	; 0x64
   88318:	2b00      	cmp	r3, #0
   8831a:	f2c0 8093 	blt.w	88444 <_dtoa_r+0x57c>
   8831e:	9a07      	ldr	r2, [sp, #28]
   88320:	2a0e      	cmp	r2, #14
   88322:	f300 808f 	bgt.w	88444 <_dtoa_r+0x57c>
   88326:	4b40      	ldr	r3, [pc, #256]	; (88428 <_dtoa_r+0x560>)
   88328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8832c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88330:	e9cd 2304 	strd	r2, r3, [sp, #16]
   88334:	9b25      	ldr	r3, [sp, #148]	; 0x94
   88336:	2b00      	cmp	r3, #0
   88338:	da1a      	bge.n	88370 <_dtoa_r+0x4a8>
   8833a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8833c:	2b00      	cmp	r3, #0
   8833e:	dc17      	bgt.n	88370 <_dtoa_r+0x4a8>
   88340:	f040 833f 	bne.w	889c2 <_dtoa_r+0xafa>
   88344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   88348:	2200      	movs	r2, #0
   8834a:	4b3d      	ldr	r3, [pc, #244]	; (88440 <_dtoa_r+0x578>)
   8834c:	f003 f8dc 	bl	8b508 <__aeabi_dmul>
   88350:	4602      	mov	r2, r0
   88352:	460b      	mov	r3, r1
   88354:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   88358:	f003 fb52 	bl	8ba00 <__aeabi_dcmple>
   8835c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   88360:	4645      	mov	r5, r8
   88362:	2800      	cmp	r0, #0
   88364:	f000 82cd 	beq.w	88902 <_dtoa_r+0xa3a>
   88368:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8836a:	9f03      	ldr	r7, [sp, #12]
   8836c:	43de      	mvns	r6, r3
   8836e:	e2d0      	b.n	88912 <_dtoa_r+0xa4a>
   88370:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   88374:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   88378:	4632      	mov	r2, r6
   8837a:	463b      	mov	r3, r7
   8837c:	f003 f9ee 	bl	8b75c <__aeabi_ddiv>
   88380:	f003 fb72 	bl	8ba68 <__aeabi_d2iz>
   88384:	4680      	mov	r8, r0
   88386:	f003 f855 	bl	8b434 <__aeabi_i2d>
   8838a:	4632      	mov	r2, r6
   8838c:	463b      	mov	r3, r7
   8838e:	f003 f8bb 	bl	8b508 <__aeabi_dmul>
   88392:	460b      	mov	r3, r1
   88394:	4602      	mov	r2, r0
   88396:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8839a:	f002 fefd 	bl	8b198 <__aeabi_dsub>
   8839e:	9d03      	ldr	r5, [sp, #12]
   883a0:	f108 0330 	add.w	r3, r8, #48	; 0x30
   883a4:	f805 3b01 	strb.w	r3, [r5], #1
   883a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   883aa:	2b01      	cmp	r3, #1
   883ac:	f000 837f 	beq.w	88aae <_dtoa_r+0xbe6>
   883b0:	f8cd a018 	str.w	sl, [sp, #24]
   883b4:	f04f 0901 	mov.w	r9, #1
   883b8:	469b      	mov	fp, r3
   883ba:	46aa      	mov	sl, r5
   883bc:	9408      	str	r4, [sp, #32]
   883be:	e01d      	b.n	883fc <_dtoa_r+0x534>
   883c0:	4632      	mov	r2, r6
   883c2:	463b      	mov	r3, r7
   883c4:	4620      	mov	r0, r4
   883c6:	4629      	mov	r1, r5
   883c8:	f003 f9c8 	bl	8b75c <__aeabi_ddiv>
   883cc:	f003 fb4c 	bl	8ba68 <__aeabi_d2iz>
   883d0:	4680      	mov	r8, r0
   883d2:	f003 f82f 	bl	8b434 <__aeabi_i2d>
   883d6:	4632      	mov	r2, r6
   883d8:	463b      	mov	r3, r7
   883da:	f003 f895 	bl	8b508 <__aeabi_dmul>
   883de:	f109 0901 	add.w	r9, r9, #1
   883e2:	460b      	mov	r3, r1
   883e4:	4602      	mov	r2, r0
   883e6:	4629      	mov	r1, r5
   883e8:	4620      	mov	r0, r4
   883ea:	f002 fed5 	bl	8b198 <__aeabi_dsub>
   883ee:	f108 0330 	add.w	r3, r8, #48	; 0x30
   883f2:	45cb      	cmp	fp, r9
   883f4:	f80a 3b01 	strb.w	r3, [sl], #1
   883f8:	f000 8355 	beq.w	88aa6 <_dtoa_r+0xbde>
   883fc:	2200      	movs	r2, #0
   883fe:	4b0f      	ldr	r3, [pc, #60]	; (8843c <_dtoa_r+0x574>)
   88400:	f003 f882 	bl	8b508 <__aeabi_dmul>
   88404:	2200      	movs	r2, #0
   88406:	2300      	movs	r3, #0
   88408:	4604      	mov	r4, r0
   8840a:	460d      	mov	r5, r1
   8840c:	f003 fae4 	bl	8b9d8 <__aeabi_dcmpeq>
   88410:	2800      	cmp	r0, #0
   88412:	d0d5      	beq.n	883c0 <_dtoa_r+0x4f8>
   88414:	4655      	mov	r5, sl
   88416:	9c08      	ldr	r4, [sp, #32]
   88418:	f8dd a018 	ldr.w	sl, [sp, #24]
   8841c:	9b07      	ldr	r3, [sp, #28]
   8841e:	46a9      	mov	r9, r5
   88420:	3301      	adds	r3, #1
   88422:	9307      	str	r3, [sp, #28]
   88424:	e115      	b.n	88652 <_dtoa_r+0x78a>
   88426:	bf00      	nop
   88428:	0008c0d0 	.word	0x0008c0d0
   8842c:	0008c0a8 	.word	0x0008c0a8
   88430:	3ff00000 	.word	0x3ff00000
   88434:	401c0000 	.word	0x401c0000
   88438:	3fe00000 	.word	0x3fe00000
   8843c:	40240000 	.word	0x40240000
   88440:	40140000 	.word	0x40140000
   88444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88446:	2a00      	cmp	r2, #0
   88448:	d03d      	beq.n	884c6 <_dtoa_r+0x5fe>
   8844a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8844c:	2a01      	cmp	r2, #1
   8844e:	f340 82bc 	ble.w	889ca <_dtoa_r+0xb02>
   88452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88454:	1e5f      	subs	r7, r3, #1
   88456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88458:	42bb      	cmp	r3, r7
   8845a:	f2c0 826e 	blt.w	8893a <_dtoa_r+0xa72>
   8845e:	1bdf      	subs	r7, r3, r7
   88460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88462:	2b00      	cmp	r3, #0
   88464:	f2c0 8354 	blt.w	88b10 <_dtoa_r+0xc48>
   88468:	9a06      	ldr	r2, [sp, #24]
   8846a:	4611      	mov	r1, r2
   8846c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8846e:	4419      	add	r1, r3
   88470:	4616      	mov	r6, r2
   88472:	441a      	add	r2, r3
   88474:	9106      	str	r1, [sp, #24]
   88476:	920b      	str	r2, [sp, #44]	; 0x2c
   88478:	2101      	movs	r1, #1
   8847a:	4620      	mov	r0, r4
   8847c:	f001 fe1a 	bl	8a0b4 <__i2b>
   88480:	4605      	mov	r5, r0
   88482:	e023      	b.n	884cc <_dtoa_r+0x604>
   88484:	2301      	movs	r3, #1
   88486:	eba8 0505 	sub.w	r5, r8, r5
   8848a:	930e      	str	r3, [sp, #56]	; 0x38
   8848c:	1e6b      	subs	r3, r5, #1
   8848e:	9306      	str	r3, [sp, #24]
   88490:	f57f adc5 	bpl.w	8801e <_dtoa_r+0x156>
   88494:	f1c5 0301 	rsb	r3, r5, #1
   88498:	930b      	str	r3, [sp, #44]	; 0x2c
   8849a:	2300      	movs	r3, #0
   8849c:	9306      	str	r3, [sp, #24]
   8849e:	e5c0      	b.n	88022 <_dtoa_r+0x15a>
   884a0:	4658      	mov	r0, fp
   884a2:	f002 ffc7 	bl	8b434 <__aeabi_i2d>
   884a6:	4632      	mov	r2, r6
   884a8:	463b      	mov	r3, r7
   884aa:	f003 fa95 	bl	8b9d8 <__aeabi_dcmpeq>
   884ae:	2800      	cmp	r0, #0
   884b0:	f47f ad9c 	bne.w	87fec <_dtoa_r+0x124>
   884b4:	f10b 3bff 	add.w	fp, fp, #4294967295
   884b8:	e598      	b.n	87fec <_dtoa_r+0x124>
   884ba:	4bc7      	ldr	r3, [pc, #796]	; (887d8 <_dtoa_r+0x910>)
   884bc:	9303      	str	r3, [sp, #12]
   884be:	9803      	ldr	r0, [sp, #12]
   884c0:	b01b      	add	sp, #108	; 0x6c
   884c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   884c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   884c8:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   884cc:	2e00      	cmp	r6, #0
   884ce:	dd0c      	ble.n	884ea <_dtoa_r+0x622>
   884d0:	9a06      	ldr	r2, [sp, #24]
   884d2:	2a00      	cmp	r2, #0
   884d4:	dd09      	ble.n	884ea <_dtoa_r+0x622>
   884d6:	42b2      	cmp	r2, r6
   884d8:	4613      	mov	r3, r2
   884da:	bfa8      	it	ge
   884dc:	4633      	movge	r3, r6
   884de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   884e0:	1af6      	subs	r6, r6, r3
   884e2:	1ac9      	subs	r1, r1, r3
   884e4:	1ad3      	subs	r3, r2, r3
   884e6:	910b      	str	r1, [sp, #44]	; 0x2c
   884e8:	9306      	str	r3, [sp, #24]
   884ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   884ec:	b1d3      	cbz	r3, 88524 <_dtoa_r+0x65c>
   884ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   884f0:	2b00      	cmp	r3, #0
   884f2:	f000 81a3 	beq.w	8883c <_dtoa_r+0x974>
   884f6:	2f00      	cmp	r7, #0
   884f8:	dd10      	ble.n	8851c <_dtoa_r+0x654>
   884fa:	4629      	mov	r1, r5
   884fc:	463a      	mov	r2, r7
   884fe:	4620      	mov	r0, r4
   88500:	f001 fe9e 	bl	8a240 <__pow5mult>
   88504:	4652      	mov	r2, sl
   88506:	4601      	mov	r1, r0
   88508:	4605      	mov	r5, r0
   8850a:	4620      	mov	r0, r4
   8850c:	f001 fde8 	bl	8a0e0 <__multiply>
   88510:	4603      	mov	r3, r0
   88512:	4651      	mov	r1, sl
   88514:	4620      	mov	r0, r4
   88516:	469a      	mov	sl, r3
   88518:	f001 fd24 	bl	89f64 <_Bfree>
   8851c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8851e:	1bda      	subs	r2, r3, r7
   88520:	f040 818d 	bne.w	8883e <_dtoa_r+0x976>
   88524:	2101      	movs	r1, #1
   88526:	4620      	mov	r0, r4
   88528:	f001 fdc4 	bl	8a0b4 <__i2b>
   8852c:	f1bb 0f00 	cmp.w	fp, #0
   88530:	4680      	mov	r8, r0
   88532:	f300 80b3 	bgt.w	8869c <_dtoa_r+0x7d4>
   88536:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88538:	2b01      	cmp	r3, #1
   8853a:	f340 818a 	ble.w	88852 <_dtoa_r+0x98a>
   8853e:	f04f 0900 	mov.w	r9, #0
   88542:	2001      	movs	r0, #1
   88544:	f1bb 0f00 	cmp.w	fp, #0
   88548:	f040 80b4 	bne.w	886b4 <_dtoa_r+0x7ec>
   8854c:	9a06      	ldr	r2, [sp, #24]
   8854e:	4410      	add	r0, r2
   88550:	f010 001f 	ands.w	r0, r0, #31
   88554:	f000 8092 	beq.w	8867c <_dtoa_r+0x7b4>
   88558:	f1c0 0320 	rsb	r3, r0, #32
   8855c:	2b04      	cmp	r3, #4
   8855e:	f340 83f9 	ble.w	88d54 <_dtoa_r+0xe8c>
   88562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88564:	f1c0 001c 	rsb	r0, r0, #28
   88568:	4403      	add	r3, r0
   8856a:	4402      	add	r2, r0
   8856c:	930b      	str	r3, [sp, #44]	; 0x2c
   8856e:	4406      	add	r6, r0
   88570:	9206      	str	r2, [sp, #24]
   88572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88574:	2b00      	cmp	r3, #0
   88576:	dd05      	ble.n	88584 <_dtoa_r+0x6bc>
   88578:	4651      	mov	r1, sl
   8857a:	461a      	mov	r2, r3
   8857c:	4620      	mov	r0, r4
   8857e:	f001 feab 	bl	8a2d8 <__lshift>
   88582:	4682      	mov	sl, r0
   88584:	9b06      	ldr	r3, [sp, #24]
   88586:	2b00      	cmp	r3, #0
   88588:	dd05      	ble.n	88596 <_dtoa_r+0x6ce>
   8858a:	4641      	mov	r1, r8
   8858c:	461a      	mov	r2, r3
   8858e:	4620      	mov	r0, r4
   88590:	f001 fea2 	bl	8a2d8 <__lshift>
   88594:	4680      	mov	r8, r0
   88596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88598:	2b00      	cmp	r3, #0
   8859a:	f040 8135 	bne.w	88808 <_dtoa_r+0x940>
   8859e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   885a0:	2b00      	cmp	r3, #0
   885a2:	f340 811b 	ble.w	887dc <_dtoa_r+0x914>
   885a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   885a8:	2b00      	cmp	r3, #0
   885aa:	f040 809a 	bne.w	886e2 <_dtoa_r+0x81a>
   885ae:	9b07      	ldr	r3, [sp, #28]
   885b0:	3301      	adds	r3, #1
   885b2:	9307      	str	r3, [sp, #28]
   885b4:	2601      	movs	r6, #1
   885b6:	9f03      	ldr	r7, [sp, #12]
   885b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   885bc:	e007      	b.n	885ce <_dtoa_r+0x706>
   885be:	4651      	mov	r1, sl
   885c0:	2300      	movs	r3, #0
   885c2:	220a      	movs	r2, #10
   885c4:	4620      	mov	r0, r4
   885c6:	f001 fcd7 	bl	89f78 <__multadd>
   885ca:	4682      	mov	sl, r0
   885cc:	3601      	adds	r6, #1
   885ce:	4641      	mov	r1, r8
   885d0:	4650      	mov	r0, sl
   885d2:	f7ff fbe9 	bl	87da8 <quorem>
   885d6:	454e      	cmp	r6, r9
   885d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   885dc:	f807 3b01 	strb.w	r3, [r7], #1
   885e0:	dbed      	blt.n	885be <_dtoa_r+0x6f6>
   885e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   885e4:	2600      	movs	r6, #0
   885e6:	2a00      	cmp	r2, #0
   885e8:	bfcc      	ite	gt
   885ea:	4693      	movgt	fp, r2
   885ec:	f04f 0b01 	movle.w	fp, #1
   885f0:	9a03      	ldr	r2, [sp, #12]
   885f2:	4493      	add	fp, r2
   885f4:	4651      	mov	r1, sl
   885f6:	2201      	movs	r2, #1
   885f8:	4620      	mov	r0, r4
   885fa:	9304      	str	r3, [sp, #16]
   885fc:	f001 fe6c 	bl	8a2d8 <__lshift>
   88600:	4641      	mov	r1, r8
   88602:	4682      	mov	sl, r0
   88604:	f001 fedc 	bl	8a3c0 <__mcmp>
   88608:	2800      	cmp	r0, #0
   8860a:	f340 81a8 	ble.w	8895e <_dtoa_r+0xa96>
   8860e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   88612:	9a03      	ldr	r2, [sp, #12]
   88614:	f10b 3bff 	add.w	fp, fp, #4294967295
   88618:	e004      	b.n	88624 <_dtoa_r+0x75c>
   8861a:	455a      	cmp	r2, fp
   8861c:	f000 81e4 	beq.w	889e8 <_dtoa_r+0xb20>
   88620:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   88624:	2b39      	cmp	r3, #57	; 0x39
   88626:	f10b 0901 	add.w	r9, fp, #1
   8862a:	d0f6      	beq.n	8861a <_dtoa_r+0x752>
   8862c:	3301      	adds	r3, #1
   8862e:	f88b 3000 	strb.w	r3, [fp]
   88632:	4641      	mov	r1, r8
   88634:	4620      	mov	r0, r4
   88636:	f001 fc95 	bl	89f64 <_Bfree>
   8863a:	b155      	cbz	r5, 88652 <_dtoa_r+0x78a>
   8863c:	b12e      	cbz	r6, 8864a <_dtoa_r+0x782>
   8863e:	42ae      	cmp	r6, r5
   88640:	d003      	beq.n	8864a <_dtoa_r+0x782>
   88642:	4631      	mov	r1, r6
   88644:	4620      	mov	r0, r4
   88646:	f001 fc8d 	bl	89f64 <_Bfree>
   8864a:	4629      	mov	r1, r5
   8864c:	4620      	mov	r0, r4
   8864e:	f001 fc89 	bl	89f64 <_Bfree>
   88652:	4651      	mov	r1, sl
   88654:	4620      	mov	r0, r4
   88656:	f001 fc85 	bl	89f64 <_Bfree>
   8865a:	2300      	movs	r3, #0
   8865c:	f889 3000 	strb.w	r3, [r9]
   88660:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88662:	461a      	mov	r2, r3
   88664:	9b07      	ldr	r3, [sp, #28]
   88666:	6013      	str	r3, [r2, #0]
   88668:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8866a:	2b00      	cmp	r3, #0
   8866c:	f43f ac67 	beq.w	87f3e <_dtoa_r+0x76>
   88670:	9803      	ldr	r0, [sp, #12]
   88672:	f8c3 9000 	str.w	r9, [r3]
   88676:	b01b      	add	sp, #108	; 0x6c
   88678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8867c:	201c      	movs	r0, #28
   8867e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88680:	4406      	add	r6, r0
   88682:	4403      	add	r3, r0
   88684:	930b      	str	r3, [sp, #44]	; 0x2c
   88686:	9b06      	ldr	r3, [sp, #24]
   88688:	4403      	add	r3, r0
   8868a:	9306      	str	r3, [sp, #24]
   8868c:	e771      	b.n	88572 <_dtoa_r+0x6aa>
   8868e:	2501      	movs	r5, #1
   88690:	e4de      	b.n	88050 <_dtoa_r+0x188>
   88692:	f1c0 0020 	rsb	r0, r0, #32
   88696:	fa06 f000 	lsl.w	r0, r6, r0
   8869a:	e474      	b.n	87f86 <_dtoa_r+0xbe>
   8869c:	4601      	mov	r1, r0
   8869e:	465a      	mov	r2, fp
   886a0:	4620      	mov	r0, r4
   886a2:	f001 fdcd 	bl	8a240 <__pow5mult>
   886a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   886a8:	4680      	mov	r8, r0
   886aa:	2b01      	cmp	r3, #1
   886ac:	f340 81d1 	ble.w	88a52 <_dtoa_r+0xb8a>
   886b0:	f04f 0900 	mov.w	r9, #0
   886b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   886b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   886bc:	6918      	ldr	r0, [r3, #16]
   886be:	f001 fca9 	bl	8a014 <__hi0bits>
   886c2:	f1c0 0020 	rsb	r0, r0, #32
   886c6:	e741      	b.n	8854c <_dtoa_r+0x684>
   886c8:	4629      	mov	r1, r5
   886ca:	2300      	movs	r3, #0
   886cc:	220a      	movs	r2, #10
   886ce:	4620      	mov	r0, r4
   886d0:	f001 fc52 	bl	89f78 <__multadd>
   886d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   886d6:	4605      	mov	r5, r0
   886d8:	2b00      	cmp	r3, #0
   886da:	f340 8315 	ble.w	88d08 <_dtoa_r+0xe40>
   886de:	9707      	str	r7, [sp, #28]
   886e0:	930a      	str	r3, [sp, #40]	; 0x28
   886e2:	2e00      	cmp	r6, #0
   886e4:	f300 8122 	bgt.w	8892c <_dtoa_r+0xa64>
   886e8:	f1b9 0f00 	cmp.w	r9, #0
   886ec:	f040 81f9 	bne.w	88ae2 <_dtoa_r+0xc1a>
   886f0:	462f      	mov	r7, r5
   886f2:	9903      	ldr	r1, [sp, #12]
   886f4:	9b04      	ldr	r3, [sp, #16]
   886f6:	460e      	mov	r6, r1
   886f8:	f003 0201 	and.w	r2, r3, #1
   886fc:	1e4b      	subs	r3, r1, #1
   886fe:	9924      	ldr	r1, [sp, #144]	; 0x90
   88700:	920c      	str	r2, [sp, #48]	; 0x30
   88702:	430a      	orrs	r2, r1
   88704:	920b      	str	r2, [sp, #44]	; 0x2c
   88706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88708:	441a      	add	r2, r3
   8870a:	920a      	str	r2, [sp, #40]	; 0x28
   8870c:	4641      	mov	r1, r8
   8870e:	4650      	mov	r0, sl
   88710:	f7ff fb4a 	bl	87da8 <quorem>
   88714:	4629      	mov	r1, r5
   88716:	4683      	mov	fp, r0
   88718:	4650      	mov	r0, sl
   8871a:	f001 fe51 	bl	8a3c0 <__mcmp>
   8871e:	463a      	mov	r2, r7
   88720:	4641      	mov	r1, r8
   88722:	4681      	mov	r9, r0
   88724:	4620      	mov	r0, r4
   88726:	f001 fe69 	bl	8a3fc <__mdiff>
   8872a:	68c2      	ldr	r2, [r0, #12]
   8872c:	4601      	mov	r1, r0
   8872e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   88732:	2a00      	cmp	r2, #0
   88734:	d142      	bne.n	887bc <_dtoa_r+0x8f4>
   88736:	9006      	str	r0, [sp, #24]
   88738:	4650      	mov	r0, sl
   8873a:	9308      	str	r3, [sp, #32]
   8873c:	f001 fe40 	bl	8a3c0 <__mcmp>
   88740:	9906      	ldr	r1, [sp, #24]
   88742:	9004      	str	r0, [sp, #16]
   88744:	4620      	mov	r0, r4
   88746:	f001 fc0d 	bl	89f64 <_Bfree>
   8874a:	9a04      	ldr	r2, [sp, #16]
   8874c:	9b08      	ldr	r3, [sp, #32]
   8874e:	b91a      	cbnz	r2, 88758 <_dtoa_r+0x890>
   88750:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88752:	2900      	cmp	r1, #0
   88754:	f000 82cb 	beq.w	88cee <_dtoa_r+0xe26>
   88758:	f1b9 0f00 	cmp.w	r9, #0
   8875c:	f2c0 8185 	blt.w	88a6a <_dtoa_r+0xba2>
   88760:	9924      	ldr	r1, [sp, #144]	; 0x90
   88762:	ea41 0909 	orr.w	r9, r1, r9
   88766:	990c      	ldr	r1, [sp, #48]	; 0x30
   88768:	ea51 0109 	orrs.w	r1, r1, r9
   8876c:	f000 817d 	beq.w	88a6a <_dtoa_r+0xba2>
   88770:	2a00      	cmp	r2, #0
   88772:	f300 81d1 	bgt.w	88b18 <_dtoa_r+0xc50>
   88776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88778:	f106 0901 	add.w	r9, r6, #1
   8877c:	4296      	cmp	r6, r2
   8877e:	46cb      	mov	fp, r9
   88780:	7033      	strb	r3, [r6, #0]
   88782:	f000 81e3 	beq.w	88b4c <_dtoa_r+0xc84>
   88786:	4651      	mov	r1, sl
   88788:	2300      	movs	r3, #0
   8878a:	220a      	movs	r2, #10
   8878c:	4620      	mov	r0, r4
   8878e:	f001 fbf3 	bl	89f78 <__multadd>
   88792:	42bd      	cmp	r5, r7
   88794:	4682      	mov	sl, r0
   88796:	4629      	mov	r1, r5
   88798:	f04f 0300 	mov.w	r3, #0
   8879c:	f04f 020a 	mov.w	r2, #10
   887a0:	4620      	mov	r0, r4
   887a2:	d012      	beq.n	887ca <_dtoa_r+0x902>
   887a4:	f001 fbe8 	bl	89f78 <__multadd>
   887a8:	4639      	mov	r1, r7
   887aa:	4605      	mov	r5, r0
   887ac:	2300      	movs	r3, #0
   887ae:	220a      	movs	r2, #10
   887b0:	4620      	mov	r0, r4
   887b2:	f001 fbe1 	bl	89f78 <__multadd>
   887b6:	464e      	mov	r6, r9
   887b8:	4607      	mov	r7, r0
   887ba:	e7a7      	b.n	8870c <_dtoa_r+0x844>
   887bc:	4620      	mov	r0, r4
   887be:	9304      	str	r3, [sp, #16]
   887c0:	f001 fbd0 	bl	89f64 <_Bfree>
   887c4:	2201      	movs	r2, #1
   887c6:	9b04      	ldr	r3, [sp, #16]
   887c8:	e7c6      	b.n	88758 <_dtoa_r+0x890>
   887ca:	f001 fbd5 	bl	89f78 <__multadd>
   887ce:	464e      	mov	r6, r9
   887d0:	4605      	mov	r5, r0
   887d2:	4607      	mov	r7, r0
   887d4:	e79a      	b.n	8870c <_dtoa_r+0x844>
   887d6:	bf00      	nop
   887d8:	0008bf30 	.word	0x0008bf30
   887dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   887de:	2b02      	cmp	r3, #2
   887e0:	dc7e      	bgt.n	888e0 <_dtoa_r+0xa18>
   887e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   887e4:	2b00      	cmp	r3, #0
   887e6:	f47f af7c 	bne.w	886e2 <_dtoa_r+0x81a>
   887ea:	4641      	mov	r1, r8
   887ec:	4650      	mov	r0, sl
   887ee:	f7ff fadb 	bl	87da8 <quorem>
   887f2:	9a07      	ldr	r2, [sp, #28]
   887f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   887f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   887fc:	3201      	adds	r2, #1
   887fe:	2600      	movs	r6, #0
   88800:	9207      	str	r2, [sp, #28]
   88802:	f80b 3b01 	strb.w	r3, [fp], #1
   88806:	e6f5      	b.n	885f4 <_dtoa_r+0x72c>
   88808:	4641      	mov	r1, r8
   8880a:	4650      	mov	r0, sl
   8880c:	f001 fdd8 	bl	8a3c0 <__mcmp>
   88810:	2800      	cmp	r0, #0
   88812:	f6bf aec4 	bge.w	8859e <_dtoa_r+0x6d6>
   88816:	4651      	mov	r1, sl
   88818:	2300      	movs	r3, #0
   8881a:	220a      	movs	r2, #10
   8881c:	4620      	mov	r0, r4
   8881e:	f001 fbab 	bl	89f78 <__multadd>
   88822:	9b07      	ldr	r3, [sp, #28]
   88824:	4682      	mov	sl, r0
   88826:	1e5f      	subs	r7, r3, #1
   88828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8882a:	2b00      	cmp	r3, #0
   8882c:	f47f af4c 	bne.w	886c8 <_dtoa_r+0x800>
   88830:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88832:	2b00      	cmp	r3, #0
   88834:	f340 8262 	ble.w	88cfc <_dtoa_r+0xe34>
   88838:	930a      	str	r3, [sp, #40]	; 0x28
   8883a:	e6bb      	b.n	885b4 <_dtoa_r+0x6ec>
   8883c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8883e:	4651      	mov	r1, sl
   88840:	4620      	mov	r0, r4
   88842:	f001 fcfd 	bl	8a240 <__pow5mult>
   88846:	4682      	mov	sl, r0
   88848:	e66c      	b.n	88524 <_dtoa_r+0x65c>
   8884a:	4bba      	ldr	r3, [pc, #744]	; (88b34 <_dtoa_r+0xc6c>)
   8884c:	9303      	str	r3, [sp, #12]
   8884e:	3303      	adds	r3, #3
   88850:	e419      	b.n	88086 <_dtoa_r+0x1be>
   88852:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88856:	2900      	cmp	r1, #0
   88858:	f47f ae71 	bne.w	8853e <_dtoa_r+0x676>
   8885c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88860:	2b00      	cmp	r3, #0
   88862:	f47f ae6c 	bne.w	8853e <_dtoa_r+0x676>
   88866:	4bb4      	ldr	r3, [pc, #720]	; (88b38 <_dtoa_r+0xc70>)
   88868:	4013      	ands	r3, r2
   8886a:	2b00      	cmp	r3, #0
   8886c:	f000 822a 	beq.w	88cc4 <_dtoa_r+0xdfc>
   88870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88872:	f04f 0901 	mov.w	r9, #1
   88876:	3301      	adds	r3, #1
   88878:	930b      	str	r3, [sp, #44]	; 0x2c
   8887a:	9b06      	ldr	r3, [sp, #24]
   8887c:	3301      	adds	r3, #1
   8887e:	9306      	str	r3, [sp, #24]
   88880:	e65f      	b.n	88542 <_dtoa_r+0x67a>
   88882:	2301      	movs	r3, #1
   88884:	930c      	str	r3, [sp, #48]	; 0x30
   88886:	9b25      	ldr	r3, [sp, #148]	; 0x94
   88888:	9a07      	ldr	r2, [sp, #28]
   8888a:	4413      	add	r3, r2
   8888c:	9312      	str	r3, [sp, #72]	; 0x48
   8888e:	3301      	adds	r3, #1
   88890:	2b01      	cmp	r3, #1
   88892:	461e      	mov	r6, r3
   88894:	bfb8      	it	lt
   88896:	2601      	movlt	r6, #1
   88898:	930a      	str	r3, [sp, #40]	; 0x28
   8889a:	2100      	movs	r1, #0
   8889c:	2e17      	cmp	r6, #23
   8889e:	6461      	str	r1, [r4, #68]	; 0x44
   888a0:	f77f ac43 	ble.w	8812a <_dtoa_r+0x262>
   888a4:	2201      	movs	r2, #1
   888a6:	2304      	movs	r3, #4
   888a8:	005b      	lsls	r3, r3, #1
   888aa:	f103 0014 	add.w	r0, r3, #20
   888ae:	42b0      	cmp	r0, r6
   888b0:	4611      	mov	r1, r2
   888b2:	f102 0201 	add.w	r2, r2, #1
   888b6:	d9f7      	bls.n	888a8 <_dtoa_r+0x9e0>
   888b8:	6461      	str	r1, [r4, #68]	; 0x44
   888ba:	e436      	b.n	8812a <_dtoa_r+0x262>
   888bc:	2301      	movs	r3, #1
   888be:	930c      	str	r3, [sp, #48]	; 0x30
   888c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   888c2:	2b00      	cmp	r3, #0
   888c4:	dd46      	ble.n	88954 <_dtoa_r+0xa8c>
   888c6:	461e      	mov	r6, r3
   888c8:	9312      	str	r3, [sp, #72]	; 0x48
   888ca:	930a      	str	r3, [sp, #40]	; 0x28
   888cc:	e7e5      	b.n	8889a <_dtoa_r+0x9d2>
   888ce:	2300      	movs	r3, #0
   888d0:	930c      	str	r3, [sp, #48]	; 0x30
   888d2:	e7d8      	b.n	88886 <_dtoa_r+0x9be>
   888d4:	2300      	movs	r3, #0
   888d6:	930c      	str	r3, [sp, #48]	; 0x30
   888d8:	e7f2      	b.n	888c0 <_dtoa_r+0x9f8>
   888da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   888dc:	9707      	str	r7, [sp, #28]
   888de:	930a      	str	r3, [sp, #40]	; 0x28
   888e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   888e2:	2b00      	cmp	r3, #0
   888e4:	f47f ad40 	bne.w	88368 <_dtoa_r+0x4a0>
   888e8:	4641      	mov	r1, r8
   888ea:	2205      	movs	r2, #5
   888ec:	4620      	mov	r0, r4
   888ee:	f001 fb43 	bl	89f78 <__multadd>
   888f2:	4680      	mov	r8, r0
   888f4:	4650      	mov	r0, sl
   888f6:	4641      	mov	r1, r8
   888f8:	f001 fd62 	bl	8a3c0 <__mcmp>
   888fc:	2800      	cmp	r0, #0
   888fe:	f77f ad33 	ble.w	88368 <_dtoa_r+0x4a0>
   88902:	9f03      	ldr	r7, [sp, #12]
   88904:	2231      	movs	r2, #49	; 0x31
   88906:	463b      	mov	r3, r7
   88908:	9e07      	ldr	r6, [sp, #28]
   8890a:	f803 2b01 	strb.w	r2, [r3], #1
   8890e:	3601      	adds	r6, #1
   88910:	9303      	str	r3, [sp, #12]
   88912:	4641      	mov	r1, r8
   88914:	4620      	mov	r0, r4
   88916:	f001 fb25 	bl	89f64 <_Bfree>
   8891a:	1c73      	adds	r3, r6, #1
   8891c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   88920:	9307      	str	r3, [sp, #28]
   88922:	9703      	str	r7, [sp, #12]
   88924:	2d00      	cmp	r5, #0
   88926:	f47f ae90 	bne.w	8864a <_dtoa_r+0x782>
   8892a:	e692      	b.n	88652 <_dtoa_r+0x78a>
   8892c:	4629      	mov	r1, r5
   8892e:	4632      	mov	r2, r6
   88930:	4620      	mov	r0, r4
   88932:	f001 fcd1 	bl	8a2d8 <__lshift>
   88936:	4605      	mov	r5, r0
   88938:	e6d6      	b.n	886e8 <_dtoa_r+0x820>
   8893a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8893c:	970d      	str	r7, [sp, #52]	; 0x34
   8893e:	1afb      	subs	r3, r7, r3
   88940:	449b      	add	fp, r3
   88942:	2700      	movs	r7, #0
   88944:	e58c      	b.n	88460 <_dtoa_r+0x598>
   88946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8894a:	f04f 0902 	mov.w	r9, #2
   8894e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   88952:	e417      	b.n	88184 <_dtoa_r+0x2bc>
   88954:	2301      	movs	r3, #1
   88956:	9325      	str	r3, [sp, #148]	; 0x94
   88958:	930a      	str	r3, [sp, #40]	; 0x28
   8895a:	f7ff bbe2 	b.w	88122 <_dtoa_r+0x25a>
   8895e:	d103      	bne.n	88968 <_dtoa_r+0xaa0>
   88960:	9b04      	ldr	r3, [sp, #16]
   88962:	07db      	lsls	r3, r3, #31
   88964:	f53f ae53 	bmi.w	8860e <_dtoa_r+0x746>
   88968:	46d9      	mov	r9, fp
   8896a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8896e:	2b30      	cmp	r3, #48	; 0x30
   88970:	d0fa      	beq.n	88968 <_dtoa_r+0xaa0>
   88972:	e65e      	b.n	88632 <_dtoa_r+0x76a>
   88974:	4648      	mov	r0, r9
   88976:	f002 fd5d 	bl	8b434 <__aeabi_i2d>
   8897a:	4632      	mov	r2, r6
   8897c:	463b      	mov	r3, r7
   8897e:	f002 fdc3 	bl	8b508 <__aeabi_dmul>
   88982:	2200      	movs	r2, #0
   88984:	4b6d      	ldr	r3, [pc, #436]	; (88b3c <_dtoa_r+0xc74>)
   88986:	f002 fc09 	bl	8b19c <__adddf3>
   8898a:	4680      	mov	r8, r0
   8898c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   88990:	4630      	mov	r0, r6
   88992:	4639      	mov	r1, r7
   88994:	2200      	movs	r2, #0
   88996:	4b6a      	ldr	r3, [pc, #424]	; (88b40 <_dtoa_r+0xc78>)
   88998:	f002 fbfe 	bl	8b198 <__aeabi_dsub>
   8899c:	4642      	mov	r2, r8
   8899e:	464b      	mov	r3, r9
   889a0:	4606      	mov	r6, r0
   889a2:	460f      	mov	r7, r1
   889a4:	f003 f840 	bl	8ba28 <__aeabi_dcmpgt>
   889a8:	2800      	cmp	r0, #0
   889aa:	f040 8187 	bne.w	88cbc <_dtoa_r+0xdf4>
   889ae:	4642      	mov	r2, r8
   889b0:	4630      	mov	r0, r6
   889b2:	4639      	mov	r1, r7
   889b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   889b8:	f003 f818 	bl	8b9ec <__aeabi_dcmplt>
   889bc:	2800      	cmp	r0, #0
   889be:	f43f acaa 	beq.w	88316 <_dtoa_r+0x44e>
   889c2:	f04f 0800 	mov.w	r8, #0
   889c6:	4645      	mov	r5, r8
   889c8:	e4ce      	b.n	88368 <_dtoa_r+0x4a0>
   889ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   889cc:	2a00      	cmp	r2, #0
   889ce:	f000 80c3 	beq.w	88b58 <_dtoa_r+0xc90>
   889d2:	9a06      	ldr	r2, [sp, #24]
   889d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   889d8:	441a      	add	r2, r3
   889da:	9206      	str	r2, [sp, #24]
   889dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   889de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   889e0:	4616      	mov	r6, r2
   889e2:	441a      	add	r2, r3
   889e4:	920b      	str	r2, [sp, #44]	; 0x2c
   889e6:	e547      	b.n	88478 <_dtoa_r+0x5b0>
   889e8:	2331      	movs	r3, #49	; 0x31
   889ea:	9a07      	ldr	r2, [sp, #28]
   889ec:	3201      	adds	r2, #1
   889ee:	9207      	str	r2, [sp, #28]
   889f0:	9a03      	ldr	r2, [sp, #12]
   889f2:	7013      	strb	r3, [r2, #0]
   889f4:	e61d      	b.n	88632 <_dtoa_r+0x76a>
   889f6:	f000 814b 	beq.w	88c90 <_dtoa_r+0xdc8>
   889fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   889fe:	9b07      	ldr	r3, [sp, #28]
   88a00:	425d      	negs	r5, r3
   88a02:	4b50      	ldr	r3, [pc, #320]	; (88b44 <_dtoa_r+0xc7c>)
   88a04:	f005 020f 	and.w	r2, r5, #15
   88a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88a10:	f002 fd7a 	bl	8b508 <__aeabi_dmul>
   88a14:	112d      	asrs	r5, r5, #4
   88a16:	4606      	mov	r6, r0
   88a18:	460f      	mov	r7, r1
   88a1a:	f000 817d 	beq.w	88d18 <_dtoa_r+0xe50>
   88a1e:	2300      	movs	r3, #0
   88a20:	f04f 0902 	mov.w	r9, #2
   88a24:	f8df 8120 	ldr.w	r8, [pc, #288]	; 88b48 <_dtoa_r+0xc80>
   88a28:	07ea      	lsls	r2, r5, #31
   88a2a:	d505      	bpl.n	88a38 <_dtoa_r+0xb70>
   88a2c:	e9d8 2300 	ldrd	r2, r3, [r8]
   88a30:	f002 fd6a 	bl	8b508 <__aeabi_dmul>
   88a34:	2301      	movs	r3, #1
   88a36:	4499      	add	r9, r3
   88a38:	106d      	asrs	r5, r5, #1
   88a3a:	f108 0808 	add.w	r8, r8, #8
   88a3e:	d1f3      	bne.n	88a28 <_dtoa_r+0xb60>
   88a40:	2b00      	cmp	r3, #0
   88a42:	f43f abba 	beq.w	881ba <_dtoa_r+0x2f2>
   88a46:	4606      	mov	r6, r0
   88a48:	460f      	mov	r7, r1
   88a4a:	f7ff bbb6 	b.w	881ba <_dtoa_r+0x2f2>
   88a4e:	900e      	str	r0, [sp, #56]	; 0x38
   88a50:	e520      	b.n	88494 <_dtoa_r+0x5cc>
   88a52:	9b04      	ldr	r3, [sp, #16]
   88a54:	2b00      	cmp	r3, #0
   88a56:	f47f ae2b 	bne.w	886b0 <_dtoa_r+0x7e8>
   88a5a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88a5e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88a62:	2b00      	cmp	r3, #0
   88a64:	f43f aeff 	beq.w	88866 <_dtoa_r+0x99e>
   88a68:	e622      	b.n	886b0 <_dtoa_r+0x7e8>
   88a6a:	2a00      	cmp	r2, #0
   88a6c:	dd12      	ble.n	88a94 <_dtoa_r+0xbcc>
   88a6e:	4651      	mov	r1, sl
   88a70:	2201      	movs	r2, #1
   88a72:	4620      	mov	r0, r4
   88a74:	9304      	str	r3, [sp, #16]
   88a76:	f001 fc2f 	bl	8a2d8 <__lshift>
   88a7a:	4641      	mov	r1, r8
   88a7c:	4682      	mov	sl, r0
   88a7e:	f001 fc9f 	bl	8a3c0 <__mcmp>
   88a82:	2800      	cmp	r0, #0
   88a84:	9b04      	ldr	r3, [sp, #16]
   88a86:	f340 812c 	ble.w	88ce2 <_dtoa_r+0xe1a>
   88a8a:	2b39      	cmp	r3, #57	; 0x39
   88a8c:	f000 810c 	beq.w	88ca8 <_dtoa_r+0xde0>
   88a90:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   88a94:	46b1      	mov	r9, r6
   88a96:	f809 3b01 	strb.w	r3, [r9], #1
   88a9a:	9b07      	ldr	r3, [sp, #28]
   88a9c:	462e      	mov	r6, r5
   88a9e:	3301      	adds	r3, #1
   88aa0:	463d      	mov	r5, r7
   88aa2:	9307      	str	r3, [sp, #28]
   88aa4:	e5c5      	b.n	88632 <_dtoa_r+0x76a>
   88aa6:	4655      	mov	r5, sl
   88aa8:	9c08      	ldr	r4, [sp, #32]
   88aaa:	f8dd a018 	ldr.w	sl, [sp, #24]
   88aae:	4602      	mov	r2, r0
   88ab0:	460b      	mov	r3, r1
   88ab2:	f002 fb73 	bl	8b19c <__adddf3>
   88ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88aba:	4606      	mov	r6, r0
   88abc:	460f      	mov	r7, r1
   88abe:	f002 ffb3 	bl	8ba28 <__aeabi_dcmpgt>
   88ac2:	b960      	cbnz	r0, 88ade <_dtoa_r+0xc16>
   88ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88ac8:	4630      	mov	r0, r6
   88aca:	4639      	mov	r1, r7
   88acc:	f002 ff84 	bl	8b9d8 <__aeabi_dcmpeq>
   88ad0:	2800      	cmp	r0, #0
   88ad2:	f43f aca3 	beq.w	8841c <_dtoa_r+0x554>
   88ad6:	f018 0f01 	tst.w	r8, #1
   88ada:	f43f ac9f 	beq.w	8841c <_dtoa_r+0x554>
   88ade:	9a03      	ldr	r2, [sp, #12]
   88ae0:	e40a      	b.n	882f8 <_dtoa_r+0x430>
   88ae2:	4620      	mov	r0, r4
   88ae4:	6869      	ldr	r1, [r5, #4]
   88ae6:	f001 fa17 	bl	89f18 <_Balloc>
   88aea:	4606      	mov	r6, r0
   88aec:	2800      	cmp	r0, #0
   88aee:	f000 8117 	beq.w	88d20 <_dtoa_r+0xe58>
   88af2:	692b      	ldr	r3, [r5, #16]
   88af4:	f105 010c 	add.w	r1, r5, #12
   88af8:	3302      	adds	r3, #2
   88afa:	009a      	lsls	r2, r3, #2
   88afc:	300c      	adds	r0, #12
   88afe:	f7fc fa5d 	bl	84fbc <memcpy>
   88b02:	4631      	mov	r1, r6
   88b04:	2201      	movs	r2, #1
   88b06:	4620      	mov	r0, r4
   88b08:	f001 fbe6 	bl	8a2d8 <__lshift>
   88b0c:	4607      	mov	r7, r0
   88b0e:	e5f0      	b.n	886f2 <_dtoa_r+0x82a>
   88b10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   88b14:	1a9e      	subs	r6, r3, r2
   88b16:	e4af      	b.n	88478 <_dtoa_r+0x5b0>
   88b18:	2b39      	cmp	r3, #57	; 0x39
   88b1a:	f000 80c5 	beq.w	88ca8 <_dtoa_r+0xde0>
   88b1e:	46b1      	mov	r9, r6
   88b20:	3301      	adds	r3, #1
   88b22:	f809 3b01 	strb.w	r3, [r9], #1
   88b26:	9b07      	ldr	r3, [sp, #28]
   88b28:	462e      	mov	r6, r5
   88b2a:	3301      	adds	r3, #1
   88b2c:	463d      	mov	r5, r7
   88b2e:	9307      	str	r3, [sp, #28]
   88b30:	e57f      	b.n	88632 <_dtoa_r+0x76a>
   88b32:	bf00      	nop
   88b34:	0008bf74 	.word	0x0008bf74
   88b38:	7ff00000 	.word	0x7ff00000
   88b3c:	401c0000 	.word	0x401c0000
   88b40:	40140000 	.word	0x40140000
   88b44:	0008c0d0 	.word	0x0008c0d0
   88b48:	0008c0a8 	.word	0x0008c0a8
   88b4c:	9a07      	ldr	r2, [sp, #28]
   88b4e:	462e      	mov	r6, r5
   88b50:	3201      	adds	r2, #1
   88b52:	463d      	mov	r5, r7
   88b54:	9207      	str	r2, [sp, #28]
   88b56:	e54d      	b.n	885f4 <_dtoa_r+0x72c>
   88b58:	9b18      	ldr	r3, [sp, #96]	; 0x60
   88b5a:	9a06      	ldr	r2, [sp, #24]
   88b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   88b62:	441a      	add	r2, r3
   88b64:	9206      	str	r2, [sp, #24]
   88b66:	460a      	mov	r2, r1
   88b68:	441a      	add	r2, r3
   88b6a:	460e      	mov	r6, r1
   88b6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   88b6e:	920b      	str	r2, [sp, #44]	; 0x2c
   88b70:	e482      	b.n	88478 <_dtoa_r+0x5b0>
   88b72:	9810      	ldr	r0, [sp, #64]	; 0x40
   88b74:	497f      	ldr	r1, [pc, #508]	; (88d74 <_dtoa_r+0xeac>)
   88b76:	4642      	mov	r2, r8
   88b78:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   88b7c:	464b      	mov	r3, r9
   88b7e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   88b82:	f002 fcc1 	bl	8b508 <__aeabi_dmul>
   88b86:	4602      	mov	r2, r0
   88b88:	460b      	mov	r3, r1
   88b8a:	4630      	mov	r0, r6
   88b8c:	4639      	mov	r1, r7
   88b8e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   88b92:	f002 ff69 	bl	8ba68 <__aeabi_d2iz>
   88b96:	4680      	mov	r8, r0
   88b98:	f002 fc4c 	bl	8b434 <__aeabi_i2d>
   88b9c:	460b      	mov	r3, r1
   88b9e:	4602      	mov	r2, r0
   88ba0:	4639      	mov	r1, r7
   88ba2:	4630      	mov	r0, r6
   88ba4:	f002 faf8 	bl	8b198 <__aeabi_dsub>
   88ba8:	4606      	mov	r6, r0
   88baa:	9810      	ldr	r0, [sp, #64]	; 0x40
   88bac:	9d03      	ldr	r5, [sp, #12]
   88bae:	f108 0330 	add.w	r3, r8, #48	; 0x30
   88bb2:	2801      	cmp	r0, #1
   88bb4:	460f      	mov	r7, r1
   88bb6:	f805 3b01 	strb.w	r3, [r5], #1
   88bba:	d01e      	beq.n	88bfa <_dtoa_r+0xd32>
   88bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88bbe:	9a03      	ldr	r2, [sp, #12]
   88bc0:	4413      	add	r3, r2
   88bc2:	4698      	mov	r8, r3
   88bc4:	2200      	movs	r2, #0
   88bc6:	4b6c      	ldr	r3, [pc, #432]	; (88d78 <_dtoa_r+0xeb0>)
   88bc8:	4630      	mov	r0, r6
   88bca:	4639      	mov	r1, r7
   88bcc:	f002 fc9c 	bl	8b508 <__aeabi_dmul>
   88bd0:	460f      	mov	r7, r1
   88bd2:	4606      	mov	r6, r0
   88bd4:	f002 ff48 	bl	8ba68 <__aeabi_d2iz>
   88bd8:	4681      	mov	r9, r0
   88bda:	f002 fc2b 	bl	8b434 <__aeabi_i2d>
   88bde:	4602      	mov	r2, r0
   88be0:	460b      	mov	r3, r1
   88be2:	4630      	mov	r0, r6
   88be4:	4639      	mov	r1, r7
   88be6:	f002 fad7 	bl	8b198 <__aeabi_dsub>
   88bea:	f109 0930 	add.w	r9, r9, #48	; 0x30
   88bee:	f805 9b01 	strb.w	r9, [r5], #1
   88bf2:	4545      	cmp	r5, r8
   88bf4:	4606      	mov	r6, r0
   88bf6:	460f      	mov	r7, r1
   88bf8:	d1e4      	bne.n	88bc4 <_dtoa_r+0xcfc>
   88bfa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   88bfe:	2200      	movs	r2, #0
   88c00:	4b5e      	ldr	r3, [pc, #376]	; (88d7c <_dtoa_r+0xeb4>)
   88c02:	4640      	mov	r0, r8
   88c04:	4649      	mov	r1, r9
   88c06:	f002 fac9 	bl	8b19c <__adddf3>
   88c0a:	4632      	mov	r2, r6
   88c0c:	463b      	mov	r3, r7
   88c0e:	f002 feed 	bl	8b9ec <__aeabi_dcmplt>
   88c12:	2800      	cmp	r0, #0
   88c14:	d158      	bne.n	88cc8 <_dtoa_r+0xe00>
   88c16:	4642      	mov	r2, r8
   88c18:	464b      	mov	r3, r9
   88c1a:	2000      	movs	r0, #0
   88c1c:	4957      	ldr	r1, [pc, #348]	; (88d7c <_dtoa_r+0xeb4>)
   88c1e:	f002 fabb 	bl	8b198 <__aeabi_dsub>
   88c22:	4632      	mov	r2, r6
   88c24:	463b      	mov	r3, r7
   88c26:	f002 feff 	bl	8ba28 <__aeabi_dcmpgt>
   88c2a:	2800      	cmp	r0, #0
   88c2c:	f43f ab73 	beq.w	88316 <_dtoa_r+0x44e>
   88c30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   88c34:	46a9      	mov	r9, r5
   88c36:	2b30      	cmp	r3, #48	; 0x30
   88c38:	f105 35ff 	add.w	r5, r5, #4294967295
   88c3c:	d0f8      	beq.n	88c30 <_dtoa_r+0xd68>
   88c3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88c40:	3301      	adds	r3, #1
   88c42:	9307      	str	r3, [sp, #28]
   88c44:	e505      	b.n	88652 <_dtoa_r+0x78a>
   88c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88c48:	2b00      	cmp	r3, #0
   88c4a:	f43f ae93 	beq.w	88974 <_dtoa_r+0xaac>
   88c4e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   88c50:	2d00      	cmp	r5, #0
   88c52:	f77f ab60 	ble.w	88316 <_dtoa_r+0x44e>
   88c56:	2200      	movs	r2, #0
   88c58:	4b47      	ldr	r3, [pc, #284]	; (88d78 <_dtoa_r+0xeb0>)
   88c5a:	4630      	mov	r0, r6
   88c5c:	4639      	mov	r1, r7
   88c5e:	f002 fc53 	bl	8b508 <__aeabi_dmul>
   88c62:	4606      	mov	r6, r0
   88c64:	460f      	mov	r7, r1
   88c66:	f109 0001 	add.w	r0, r9, #1
   88c6a:	f002 fbe3 	bl	8b434 <__aeabi_i2d>
   88c6e:	4632      	mov	r2, r6
   88c70:	463b      	mov	r3, r7
   88c72:	f002 fc49 	bl	8b508 <__aeabi_dmul>
   88c76:	2200      	movs	r2, #0
   88c78:	4b41      	ldr	r3, [pc, #260]	; (88d80 <_dtoa_r+0xeb8>)
   88c7a:	f002 fa8f 	bl	8b19c <__adddf3>
   88c7e:	9a07      	ldr	r2, [sp, #28]
   88c80:	4680      	mov	r8, r0
   88c82:	3a01      	subs	r2, #1
   88c84:	9213      	str	r2, [sp, #76]	; 0x4c
   88c86:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   88c8a:	9510      	str	r5, [sp, #64]	; 0x40
   88c8c:	f7ff bab6 	b.w	881fc <_dtoa_r+0x334>
   88c90:	f04f 0902 	mov.w	r9, #2
   88c94:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   88c98:	f7ff ba8f 	b.w	881ba <_dtoa_r+0x2f2>
   88c9c:	9b07      	ldr	r3, [sp, #28]
   88c9e:	3301      	adds	r3, #1
   88ca0:	9307      	str	r3, [sp, #28]
   88ca2:	2331      	movs	r3, #49	; 0x31
   88ca4:	f7ff bb2f 	b.w	88306 <_dtoa_r+0x43e>
   88ca8:	46b3      	mov	fp, r6
   88caa:	2339      	movs	r3, #57	; 0x39
   88cac:	9a07      	ldr	r2, [sp, #28]
   88cae:	462e      	mov	r6, r5
   88cb0:	3201      	adds	r2, #1
   88cb2:	463d      	mov	r5, r7
   88cb4:	9207      	str	r2, [sp, #28]
   88cb6:	f80b 3b01 	strb.w	r3, [fp], #1
   88cba:	e4aa      	b.n	88612 <_dtoa_r+0x74a>
   88cbc:	f04f 0800 	mov.w	r8, #0
   88cc0:	4645      	mov	r5, r8
   88cc2:	e61e      	b.n	88902 <_dtoa_r+0xa3a>
   88cc4:	4699      	mov	r9, r3
   88cc6:	e43c      	b.n	88542 <_dtoa_r+0x67a>
   88cc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88cca:	9a03      	ldr	r2, [sp, #12]
   88ccc:	9307      	str	r3, [sp, #28]
   88cce:	f7ff bb13 	b.w	882f8 <_dtoa_r+0x430>
   88cd2:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   88cd6:	9c10      	ldr	r4, [sp, #64]	; 0x40
   88cd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88cda:	46a9      	mov	r9, r5
   88cdc:	3301      	adds	r3, #1
   88cde:	9307      	str	r3, [sp, #28]
   88ce0:	e4b7      	b.n	88652 <_dtoa_r+0x78a>
   88ce2:	f47f aed7 	bne.w	88a94 <_dtoa_r+0xbcc>
   88ce6:	07da      	lsls	r2, r3, #31
   88ce8:	f57f aed4 	bpl.w	88a94 <_dtoa_r+0xbcc>
   88cec:	e6cd      	b.n	88a8a <_dtoa_r+0xbc2>
   88cee:	2b39      	cmp	r3, #57	; 0x39
   88cf0:	d0da      	beq.n	88ca8 <_dtoa_r+0xde0>
   88cf2:	f1b9 0f00 	cmp.w	r9, #0
   88cf6:	f73f aecb 	bgt.w	88a90 <_dtoa_r+0xbc8>
   88cfa:	e6cb      	b.n	88a94 <_dtoa_r+0xbcc>
   88cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88cfe:	2b02      	cmp	r3, #2
   88d00:	f73f adeb 	bgt.w	888da <_dtoa_r+0xa12>
   88d04:	9707      	str	r7, [sp, #28]
   88d06:	e570      	b.n	887ea <_dtoa_r+0x922>
   88d08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88d0a:	2b02      	cmp	r3, #2
   88d0c:	f73f ade5 	bgt.w	888da <_dtoa_r+0xa12>
   88d10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88d12:	9707      	str	r7, [sp, #28]
   88d14:	930a      	str	r3, [sp, #40]	; 0x28
   88d16:	e4e4      	b.n	886e2 <_dtoa_r+0x81a>
   88d18:	f04f 0902 	mov.w	r9, #2
   88d1c:	f7ff ba4d 	b.w	881ba <_dtoa_r+0x2f2>
   88d20:	4602      	mov	r2, r0
   88d22:	f240 21ea 	movw	r1, #746	; 0x2ea
   88d26:	4b17      	ldr	r3, [pc, #92]	; (88d84 <_dtoa_r+0xebc>)
   88d28:	4817      	ldr	r0, [pc, #92]	; (88d88 <_dtoa_r+0xec0>)
   88d2a:	f002 f8af 	bl	8ae8c <__assert_func>
   88d2e:	4b17      	ldr	r3, [pc, #92]	; (88d8c <_dtoa_r+0xec4>)
   88d30:	9303      	str	r3, [sp, #12]
   88d32:	f7ff b904 	b.w	87f3e <_dtoa_r+0x76>
   88d36:	2500      	movs	r5, #0
   88d38:	4620      	mov	r0, r4
   88d3a:	4629      	mov	r1, r5
   88d3c:	6465      	str	r5, [r4, #68]	; 0x44
   88d3e:	f001 f8eb 	bl	89f18 <_Balloc>
   88d42:	9003      	str	r0, [sp, #12]
   88d44:	b958      	cbnz	r0, 88d5e <_dtoa_r+0xe96>
   88d46:	2200      	movs	r2, #0
   88d48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   88d4c:	4b0d      	ldr	r3, [pc, #52]	; (88d84 <_dtoa_r+0xebc>)
   88d4e:	480e      	ldr	r0, [pc, #56]	; (88d88 <_dtoa_r+0xec0>)
   88d50:	f002 f89c 	bl	8ae8c <__assert_func>
   88d54:	f43f ac0d 	beq.w	88572 <_dtoa_r+0x6aa>
   88d58:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   88d5c:	e48f      	b.n	8867e <_dtoa_r+0x7b6>
   88d5e:	f04f 33ff 	mov.w	r3, #4294967295
   88d62:	9312      	str	r3, [sp, #72]	; 0x48
   88d64:	930a      	str	r3, [sp, #40]	; 0x28
   88d66:	2301      	movs	r3, #1
   88d68:	9a03      	ldr	r2, [sp, #12]
   88d6a:	9525      	str	r5, [sp, #148]	; 0x94
   88d6c:	6422      	str	r2, [r4, #64]	; 0x40
   88d6e:	930c      	str	r3, [sp, #48]	; 0x30
   88d70:	f7ff bad1 	b.w	88316 <_dtoa_r+0x44e>
   88d74:	0008c0d0 	.word	0x0008c0d0
   88d78:	40240000 	.word	0x40240000
   88d7c:	3fe00000 	.word	0x3fe00000
   88d80:	401c0000 	.word	0x401c0000
   88d84:	0008bf84 	.word	0x0008bf84
   88d88:	0008bf98 	.word	0x0008bf98
   88d8c:	0008bf78 	.word	0x0008bf78

00088d90 <__sflush_r>:
   88d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   88d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88d98:	460d      	mov	r5, r1
   88d9a:	0711      	lsls	r1, r2, #28
   88d9c:	4680      	mov	r8, r0
   88d9e:	d447      	bmi.n	88e30 <__sflush_r+0xa0>
   88da0:	686b      	ldr	r3, [r5, #4]
   88da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   88da6:	2b00      	cmp	r3, #0
   88da8:	81aa      	strh	r2, [r5, #12]
   88daa:	dd5e      	ble.n	88e6a <__sflush_r+0xda>
   88dac:	6aac      	ldr	r4, [r5, #40]	; 0x28
   88dae:	2c00      	cmp	r4, #0
   88db0:	d058      	beq.n	88e64 <__sflush_r+0xd4>
   88db2:	2300      	movs	r3, #0
   88db4:	f8d8 6000 	ldr.w	r6, [r8]
   88db8:	f8c8 3000 	str.w	r3, [r8]
   88dbc:	b293      	uxth	r3, r2
   88dbe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   88dc2:	d156      	bne.n	88e72 <__sflush_r+0xe2>
   88dc4:	2301      	movs	r3, #1
   88dc6:	4640      	mov	r0, r8
   88dc8:	69e9      	ldr	r1, [r5, #28]
   88dca:	47a0      	blx	r4
   88dcc:	1c43      	adds	r3, r0, #1
   88dce:	d067      	beq.n	88ea0 <__sflush_r+0x110>
   88dd0:	89ab      	ldrh	r3, [r5, #12]
   88dd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   88dd4:	075f      	lsls	r7, r3, #29
   88dd6:	d505      	bpl.n	88de4 <__sflush_r+0x54>
   88dd8:	686a      	ldr	r2, [r5, #4]
   88dda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   88ddc:	1a80      	subs	r0, r0, r2
   88dde:	b10b      	cbz	r3, 88de4 <__sflush_r+0x54>
   88de0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   88de2:	1ac0      	subs	r0, r0, r3
   88de4:	4602      	mov	r2, r0
   88de6:	69e9      	ldr	r1, [r5, #28]
   88de8:	2300      	movs	r3, #0
   88dea:	4640      	mov	r0, r8
   88dec:	47a0      	blx	r4
   88dee:	1c41      	adds	r1, r0, #1
   88df0:	d141      	bne.n	88e76 <__sflush_r+0xe6>
   88df2:	f8d8 3000 	ldr.w	r3, [r8]
   88df6:	2b00      	cmp	r3, #0
   88df8:	d03d      	beq.n	88e76 <__sflush_r+0xe6>
   88dfa:	2b1d      	cmp	r3, #29
   88dfc:	d001      	beq.n	88e02 <__sflush_r+0x72>
   88dfe:	2b16      	cmp	r3, #22
   88e00:	d156      	bne.n	88eb0 <__sflush_r+0x120>
   88e02:	2100      	movs	r1, #0
   88e04:	692a      	ldr	r2, [r5, #16]
   88e06:	89ab      	ldrh	r3, [r5, #12]
   88e08:	e9c5 2100 	strd	r2, r1, [r5]
   88e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   88e10:	81ab      	strh	r3, [r5, #12]
   88e12:	6b29      	ldr	r1, [r5, #48]	; 0x30
   88e14:	f8c8 6000 	str.w	r6, [r8]
   88e18:	b321      	cbz	r1, 88e64 <__sflush_r+0xd4>
   88e1a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   88e1e:	4299      	cmp	r1, r3
   88e20:	d002      	beq.n	88e28 <__sflush_r+0x98>
   88e22:	4640      	mov	r0, r8
   88e24:	f000 f9cc 	bl	891c0 <_free_r>
   88e28:	2000      	movs	r0, #0
   88e2a:	6328      	str	r0, [r5, #48]	; 0x30
   88e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88e30:	692f      	ldr	r7, [r5, #16]
   88e32:	b1bf      	cbz	r7, 88e64 <__sflush_r+0xd4>
   88e34:	b293      	uxth	r3, r2
   88e36:	079a      	lsls	r2, r3, #30
   88e38:	bf18      	it	ne
   88e3a:	2300      	movne	r3, #0
   88e3c:	682e      	ldr	r6, [r5, #0]
   88e3e:	bf08      	it	eq
   88e40:	696b      	ldreq	r3, [r5, #20]
   88e42:	602f      	str	r7, [r5, #0]
   88e44:	1bf6      	subs	r6, r6, r7
   88e46:	60ab      	str	r3, [r5, #8]
   88e48:	e00a      	b.n	88e60 <__sflush_r+0xd0>
   88e4a:	4633      	mov	r3, r6
   88e4c:	463a      	mov	r2, r7
   88e4e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   88e50:	4640      	mov	r0, r8
   88e52:	69e9      	ldr	r1, [r5, #28]
   88e54:	47a0      	blx	r4
   88e56:	1e04      	subs	r4, r0, #0
   88e58:	eba6 0604 	sub.w	r6, r6, r4
   88e5c:	4427      	add	r7, r4
   88e5e:	dd17      	ble.n	88e90 <__sflush_r+0x100>
   88e60:	2e00      	cmp	r6, #0
   88e62:	dcf2      	bgt.n	88e4a <__sflush_r+0xba>
   88e64:	2000      	movs	r0, #0
   88e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88e6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   88e6c:	2b00      	cmp	r3, #0
   88e6e:	dc9d      	bgt.n	88dac <__sflush_r+0x1c>
   88e70:	e7f8      	b.n	88e64 <__sflush_r+0xd4>
   88e72:	6d28      	ldr	r0, [r5, #80]	; 0x50
   88e74:	e7ae      	b.n	88dd4 <__sflush_r+0x44>
   88e76:	2100      	movs	r1, #0
   88e78:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   88e7c:	692a      	ldr	r2, [r5, #16]
   88e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   88e82:	81ab      	strh	r3, [r5, #12]
   88e84:	04db      	lsls	r3, r3, #19
   88e86:	e9c5 2100 	strd	r2, r1, [r5]
   88e8a:	d5c2      	bpl.n	88e12 <__sflush_r+0x82>
   88e8c:	6528      	str	r0, [r5, #80]	; 0x50
   88e8e:	e7c0      	b.n	88e12 <__sflush_r+0x82>
   88e90:	89ab      	ldrh	r3, [r5, #12]
   88e92:	f04f 30ff 	mov.w	r0, #4294967295
   88e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88e9a:	81ab      	strh	r3, [r5, #12]
   88e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88ea0:	f8d8 3000 	ldr.w	r3, [r8]
   88ea4:	2b00      	cmp	r3, #0
   88ea6:	d093      	beq.n	88dd0 <__sflush_r+0x40>
   88ea8:	2b1d      	cmp	r3, #29
   88eaa:	d006      	beq.n	88eba <__sflush_r+0x12a>
   88eac:	2b16      	cmp	r3, #22
   88eae:	d004      	beq.n	88eba <__sflush_r+0x12a>
   88eb0:	89ab      	ldrh	r3, [r5, #12]
   88eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88eb6:	81ab      	strh	r3, [r5, #12]
   88eb8:	e7d5      	b.n	88e66 <__sflush_r+0xd6>
   88eba:	f8c8 6000 	str.w	r6, [r8]
   88ebe:	e7d1      	b.n	88e64 <__sflush_r+0xd4>

00088ec0 <_fflush_r>:
   88ec0:	b538      	push	{r3, r4, r5, lr}
   88ec2:	460c      	mov	r4, r1
   88ec4:	4605      	mov	r5, r0
   88ec6:	b108      	cbz	r0, 88ecc <_fflush_r+0xc>
   88ec8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88eca:	b1a3      	cbz	r3, 88ef6 <_fflush_r+0x36>
   88ecc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   88ed0:	b1b8      	cbz	r0, 88f02 <_fflush_r+0x42>
   88ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88ed4:	07db      	lsls	r3, r3, #31
   88ed6:	d401      	bmi.n	88edc <_fflush_r+0x1c>
   88ed8:	0581      	lsls	r1, r0, #22
   88eda:	d515      	bpl.n	88f08 <_fflush_r+0x48>
   88edc:	4628      	mov	r0, r5
   88ede:	4621      	mov	r1, r4
   88ee0:	f7ff ff56 	bl	88d90 <__sflush_r>
   88ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88ee6:	4605      	mov	r5, r0
   88ee8:	07da      	lsls	r2, r3, #31
   88eea:	d402      	bmi.n	88ef2 <_fflush_r+0x32>
   88eec:	89a3      	ldrh	r3, [r4, #12]
   88eee:	059b      	lsls	r3, r3, #22
   88ef0:	d50e      	bpl.n	88f10 <_fflush_r+0x50>
   88ef2:	4628      	mov	r0, r5
   88ef4:	bd38      	pop	{r3, r4, r5, pc}
   88ef6:	f000 f83f 	bl	88f78 <__sinit>
   88efa:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   88efe:	2800      	cmp	r0, #0
   88f00:	d1e7      	bne.n	88ed2 <_fflush_r+0x12>
   88f02:	4605      	mov	r5, r0
   88f04:	4628      	mov	r0, r5
   88f06:	bd38      	pop	{r3, r4, r5, pc}
   88f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88f0a:	f000 fc07 	bl	8971c <__retarget_lock_acquire_recursive>
   88f0e:	e7e5      	b.n	88edc <_fflush_r+0x1c>
   88f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88f12:	f000 fc05 	bl	89720 <__retarget_lock_release_recursive>
   88f16:	4628      	mov	r0, r5
   88f18:	bd38      	pop	{r3, r4, r5, pc}
   88f1a:	bf00      	nop

00088f1c <std>:
   88f1c:	2300      	movs	r3, #0
   88f1e:	b510      	push	{r4, lr}
   88f20:	4604      	mov	r4, r0
   88f22:	e9c0 3300 	strd	r3, r3, [r0]
   88f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
   88f2a:	8181      	strh	r1, [r0, #12]
   88f2c:	81c2      	strh	r2, [r0, #14]
   88f2e:	4619      	mov	r1, r3
   88f30:	6083      	str	r3, [r0, #8]
   88f32:	6643      	str	r3, [r0, #100]	; 0x64
   88f34:	6183      	str	r3, [r0, #24]
   88f36:	2208      	movs	r2, #8
   88f38:	305c      	adds	r0, #92	; 0x5c
   88f3a:	f7fc f8b5 	bl	850a8 <memset>
   88f3e:	4807      	ldr	r0, [pc, #28]	; (88f5c <std+0x40>)
   88f40:	4907      	ldr	r1, [pc, #28]	; (88f60 <std+0x44>)
   88f42:	4a08      	ldr	r2, [pc, #32]	; (88f64 <std+0x48>)
   88f44:	4b08      	ldr	r3, [pc, #32]	; (88f68 <std+0x4c>)
   88f46:	e9c4 4007 	strd	r4, r0, [r4, #28]
   88f4a:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   88f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
   88f50:	f104 0058 	add.w	r0, r4, #88	; 0x58
   88f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   88f58:	f000 bbdc 	b.w	89714 <__retarget_lock_init_recursive>
   88f5c:	0008aa85 	.word	0x0008aa85
   88f60:	0008aaa9 	.word	0x0008aaa9
   88f64:	0008aae9 	.word	0x0008aae9
   88f68:	0008ab09 	.word	0x0008ab09

00088f6c <_cleanup_r>:
   88f6c:	4901      	ldr	r1, [pc, #4]	; (88f74 <_cleanup_r+0x8>)
   88f6e:	f000 bba3 	b.w	896b8 <_fwalk_reent>
   88f72:	bf00      	nop
   88f74:	0008af4d 	.word	0x0008af4d

00088f78 <__sinit>:
   88f78:	b510      	push	{r4, lr}
   88f7a:	4604      	mov	r4, r0
   88f7c:	4813      	ldr	r0, [pc, #76]	; (88fcc <__sinit+0x54>)
   88f7e:	f000 fbcd 	bl	8971c <__retarget_lock_acquire_recursive>
   88f82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   88f84:	b9ea      	cbnz	r2, 88fc2 <__sinit+0x4a>
   88f86:	2003      	movs	r0, #3
   88f88:	4911      	ldr	r1, [pc, #68]	; (88fd0 <__sinit+0x58>)
   88f8a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   88f8e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   88f92:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   88f96:	63e1      	str	r1, [r4, #60]	; 0x3c
   88f98:	6860      	ldr	r0, [r4, #4]
   88f9a:	2104      	movs	r1, #4
   88f9c:	f7ff ffbe 	bl	88f1c <std>
   88fa0:	68a0      	ldr	r0, [r4, #8]
   88fa2:	2201      	movs	r2, #1
   88fa4:	2109      	movs	r1, #9
   88fa6:	f7ff ffb9 	bl	88f1c <std>
   88faa:	68e0      	ldr	r0, [r4, #12]
   88fac:	2202      	movs	r2, #2
   88fae:	2112      	movs	r1, #18
   88fb0:	f7ff ffb4 	bl	88f1c <std>
   88fb4:	2301      	movs	r3, #1
   88fb6:	4805      	ldr	r0, [pc, #20]	; (88fcc <__sinit+0x54>)
   88fb8:	63a3      	str	r3, [r4, #56]	; 0x38
   88fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   88fbe:	f000 bbaf 	b.w	89720 <__retarget_lock_release_recursive>
   88fc2:	4802      	ldr	r0, [pc, #8]	; (88fcc <__sinit+0x54>)
   88fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   88fc8:	f000 bbaa 	b.w	89720 <__retarget_lock_release_recursive>
   88fcc:	20001c20 	.word	0x20001c20
   88fd0:	00088f6d 	.word	0x00088f6d

00088fd4 <__sfp_lock_acquire>:
   88fd4:	4801      	ldr	r0, [pc, #4]	; (88fdc <__sfp_lock_acquire+0x8>)
   88fd6:	f000 bba1 	b.w	8971c <__retarget_lock_acquire_recursive>
   88fda:	bf00      	nop
   88fdc:	20001c34 	.word	0x20001c34

00088fe0 <__sfp_lock_release>:
   88fe0:	4801      	ldr	r0, [pc, #4]	; (88fe8 <__sfp_lock_release+0x8>)
   88fe2:	f000 bb9d 	b.w	89720 <__retarget_lock_release_recursive>
   88fe6:	bf00      	nop
   88fe8:	20001c34 	.word	0x20001c34

00088fec <__libc_fini_array>:
   88fec:	b538      	push	{r3, r4, r5, lr}
   88fee:	4b08      	ldr	r3, [pc, #32]	; (89010 <__libc_fini_array+0x24>)
   88ff0:	4d08      	ldr	r5, [pc, #32]	; (89014 <__libc_fini_array+0x28>)
   88ff2:	1b5b      	subs	r3, r3, r5
   88ff4:	109c      	asrs	r4, r3, #2
   88ff6:	d007      	beq.n	89008 <__libc_fini_array+0x1c>
   88ff8:	3b04      	subs	r3, #4
   88ffa:	441d      	add	r5, r3
   88ffc:	3c01      	subs	r4, #1
   88ffe:	f855 3904 	ldr.w	r3, [r5], #-4
   89002:	4798      	blx	r3
   89004:	2c00      	cmp	r4, #0
   89006:	d1f9      	bne.n	88ffc <__libc_fini_array+0x10>
   89008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8900c:	f003 b976 	b.w	8c2fc <_fini>
   89010:	0008c30c 	.word	0x0008c30c
   89014:	0008c308 	.word	0x0008c308

00089018 <__fputwc>:
   89018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8901c:	b083      	sub	sp, #12
   8901e:	4607      	mov	r7, r0
   89020:	4688      	mov	r8, r1
   89022:	4614      	mov	r4, r2
   89024:	f000 fb6c 	bl	89700 <__locale_mb_cur_max>
   89028:	2801      	cmp	r0, #1
   8902a:	d103      	bne.n	89034 <__fputwc+0x1c>
   8902c:	f108 33ff 	add.w	r3, r8, #4294967295
   89030:	2bfe      	cmp	r3, #254	; 0xfe
   89032:	d933      	bls.n	8909c <__fputwc+0x84>
   89034:	4642      	mov	r2, r8
   89036:	4638      	mov	r0, r7
   89038:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8903c:	a901      	add	r1, sp, #4
   8903e:	f001 fe9d 	bl	8ad7c <_wcrtomb_r>
   89042:	1c42      	adds	r2, r0, #1
   89044:	4606      	mov	r6, r0
   89046:	d02f      	beq.n	890a8 <__fputwc+0x90>
   89048:	b318      	cbz	r0, 89092 <__fputwc+0x7a>
   8904a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8904e:	2500      	movs	r5, #0
   89050:	f10d 0904 	add.w	r9, sp, #4
   89054:	e008      	b.n	89068 <__fputwc+0x50>
   89056:	6823      	ldr	r3, [r4, #0]
   89058:	1c5a      	adds	r2, r3, #1
   8905a:	6022      	str	r2, [r4, #0]
   8905c:	7019      	strb	r1, [r3, #0]
   8905e:	3501      	adds	r5, #1
   89060:	42b5      	cmp	r5, r6
   89062:	d216      	bcs.n	89092 <__fputwc+0x7a>
   89064:	f815 1009 	ldrb.w	r1, [r5, r9]
   89068:	68a3      	ldr	r3, [r4, #8]
   8906a:	3b01      	subs	r3, #1
   8906c:	2b00      	cmp	r3, #0
   8906e:	60a3      	str	r3, [r4, #8]
   89070:	daf1      	bge.n	89056 <__fputwc+0x3e>
   89072:	69a2      	ldr	r2, [r4, #24]
   89074:	4293      	cmp	r3, r2
   89076:	db01      	blt.n	8907c <__fputwc+0x64>
   89078:	290a      	cmp	r1, #10
   8907a:	d1ec      	bne.n	89056 <__fputwc+0x3e>
   8907c:	4622      	mov	r2, r4
   8907e:	4638      	mov	r0, r7
   89080:	f001 fe24 	bl	8accc <__swbuf_r>
   89084:	1c43      	adds	r3, r0, #1
   89086:	d1ea      	bne.n	8905e <__fputwc+0x46>
   89088:	4606      	mov	r6, r0
   8908a:	4630      	mov	r0, r6
   8908c:	b003      	add	sp, #12
   8908e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89092:	4646      	mov	r6, r8
   89094:	4630      	mov	r0, r6
   89096:	b003      	add	sp, #12
   89098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8909c:	fa5f f188 	uxtb.w	r1, r8
   890a0:	4606      	mov	r6, r0
   890a2:	f88d 1004 	strb.w	r1, [sp, #4]
   890a6:	e7d2      	b.n	8904e <__fputwc+0x36>
   890a8:	4630      	mov	r0, r6
   890aa:	89a3      	ldrh	r3, [r4, #12]
   890ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   890b0:	81a3      	strh	r3, [r4, #12]
   890b2:	b003      	add	sp, #12
   890b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000890b8 <_fputwc_r>:
   890b8:	b530      	push	{r4, r5, lr}
   890ba:	6e53      	ldr	r3, [r2, #100]	; 0x64
   890bc:	4614      	mov	r4, r2
   890be:	f013 0f01 	tst.w	r3, #1
   890c2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   890c6:	4605      	mov	r5, r0
   890c8:	b083      	sub	sp, #12
   890ca:	b29a      	uxth	r2, r3
   890cc:	d101      	bne.n	890d2 <_fputwc_r+0x1a>
   890ce:	0598      	lsls	r0, r3, #22
   890d0:	d51c      	bpl.n	8910c <_fputwc_r+0x54>
   890d2:	0490      	lsls	r0, r2, #18
   890d4:	d406      	bmi.n	890e4 <_fputwc_r+0x2c>
   890d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   890d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   890dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   890e0:	81a3      	strh	r3, [r4, #12]
   890e2:	6662      	str	r2, [r4, #100]	; 0x64
   890e4:	4628      	mov	r0, r5
   890e6:	4622      	mov	r2, r4
   890e8:	f7ff ff96 	bl	89018 <__fputwc>
   890ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   890ee:	4605      	mov	r5, r0
   890f0:	07da      	lsls	r2, r3, #31
   890f2:	d402      	bmi.n	890fa <_fputwc_r+0x42>
   890f4:	89a3      	ldrh	r3, [r4, #12]
   890f6:	059b      	lsls	r3, r3, #22
   890f8:	d502      	bpl.n	89100 <_fputwc_r+0x48>
   890fa:	4628      	mov	r0, r5
   890fc:	b003      	add	sp, #12
   890fe:	bd30      	pop	{r4, r5, pc}
   89100:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89102:	f000 fb0d 	bl	89720 <__retarget_lock_release_recursive>
   89106:	4628      	mov	r0, r5
   89108:	b003      	add	sp, #12
   8910a:	bd30      	pop	{r4, r5, pc}
   8910c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8910e:	9101      	str	r1, [sp, #4]
   89110:	f000 fb04 	bl	8971c <__retarget_lock_acquire_recursive>
   89114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89118:	9901      	ldr	r1, [sp, #4]
   8911a:	b29a      	uxth	r2, r3
   8911c:	e7d9      	b.n	890d2 <_fputwc_r+0x1a>
   8911e:	bf00      	nop

00089120 <_malloc_trim_r>:
   89120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89122:	460c      	mov	r4, r1
   89124:	4f23      	ldr	r7, [pc, #140]	; (891b4 <_malloc_trim_r+0x94>)
   89126:	4606      	mov	r6, r0
   89128:	f000 feea 	bl	89f00 <__malloc_lock>
   8912c:	68bb      	ldr	r3, [r7, #8]
   8912e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   89132:	685d      	ldr	r5, [r3, #4]
   89134:	310f      	adds	r1, #15
   89136:	f025 0503 	bic.w	r5, r5, #3
   8913a:	194b      	adds	r3, r1, r5
   8913c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   89140:	f023 030f 	bic.w	r3, r3, #15
   89144:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   89148:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8914c:	db07      	blt.n	8915e <_malloc_trim_r+0x3e>
   8914e:	2100      	movs	r1, #0
   89150:	4630      	mov	r0, r6
   89152:	f001 fc85 	bl	8aa60 <_sbrk_r>
   89156:	68bb      	ldr	r3, [r7, #8]
   89158:	442b      	add	r3, r5
   8915a:	4298      	cmp	r0, r3
   8915c:	d004      	beq.n	89168 <_malloc_trim_r+0x48>
   8915e:	4630      	mov	r0, r6
   89160:	f000 fed4 	bl	89f0c <__malloc_unlock>
   89164:	2000      	movs	r0, #0
   89166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89168:	4630      	mov	r0, r6
   8916a:	4261      	negs	r1, r4
   8916c:	f001 fc78 	bl	8aa60 <_sbrk_r>
   89170:	3001      	adds	r0, #1
   89172:	d00d      	beq.n	89190 <_malloc_trim_r+0x70>
   89174:	4a10      	ldr	r2, [pc, #64]	; (891b8 <_malloc_trim_r+0x98>)
   89176:	68b9      	ldr	r1, [r7, #8]
   89178:	6813      	ldr	r3, [r2, #0]
   8917a:	1b2d      	subs	r5, r5, r4
   8917c:	f045 0501 	orr.w	r5, r5, #1
   89180:	4630      	mov	r0, r6
   89182:	1b1b      	subs	r3, r3, r4
   89184:	604d      	str	r5, [r1, #4]
   89186:	6013      	str	r3, [r2, #0]
   89188:	f000 fec0 	bl	89f0c <__malloc_unlock>
   8918c:	2001      	movs	r0, #1
   8918e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89190:	2100      	movs	r1, #0
   89192:	4630      	mov	r0, r6
   89194:	f001 fc64 	bl	8aa60 <_sbrk_r>
   89198:	68ba      	ldr	r2, [r7, #8]
   8919a:	1a83      	subs	r3, r0, r2
   8919c:	2b0f      	cmp	r3, #15
   8919e:	ddde      	ble.n	8915e <_malloc_trim_r+0x3e>
   891a0:	4906      	ldr	r1, [pc, #24]	; (891bc <_malloc_trim_r+0x9c>)
   891a2:	f043 0301 	orr.w	r3, r3, #1
   891a6:	680c      	ldr	r4, [r1, #0]
   891a8:	4903      	ldr	r1, [pc, #12]	; (891b8 <_malloc_trim_r+0x98>)
   891aa:	1b00      	subs	r0, r0, r4
   891ac:	6053      	str	r3, [r2, #4]
   891ae:	6008      	str	r0, [r1, #0]
   891b0:	e7d5      	b.n	8915e <_malloc_trim_r+0x3e>
   891b2:	bf00      	nop
   891b4:	20000948 	.word	0x20000948
   891b8:	2000145c 	.word	0x2000145c
   891bc:	20000d50 	.word	0x20000d50

000891c0 <_free_r>:
   891c0:	2900      	cmp	r1, #0
   891c2:	d05f      	beq.n	89284 <_free_r+0xc4>
   891c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   891c6:	460c      	mov	r4, r1
   891c8:	4606      	mov	r6, r0
   891ca:	f000 fe99 	bl	89f00 <__malloc_lock>
   891ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   891d2:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 893c8 <_free_r+0x208>
   891d6:	f1a4 0008 	sub.w	r0, r4, #8
   891da:	f023 0101 	bic.w	r1, r3, #1
   891de:	1842      	adds	r2, r0, r1
   891e0:	f8dc 7008 	ldr.w	r7, [ip, #8]
   891e4:	6855      	ldr	r5, [r2, #4]
   891e6:	4297      	cmp	r7, r2
   891e8:	f025 0503 	bic.w	r5, r5, #3
   891ec:	f000 8089 	beq.w	89302 <_free_r+0x142>
   891f0:	07df      	lsls	r7, r3, #31
   891f2:	6055      	str	r5, [r2, #4]
   891f4:	d434      	bmi.n	89260 <_free_r+0xa0>
   891f6:	f854 7c08 	ldr.w	r7, [r4, #-8]
   891fa:	f10c 0408 	add.w	r4, ip, #8
   891fe:	1bc0      	subs	r0, r0, r7
   89200:	6883      	ldr	r3, [r0, #8]
   89202:	4439      	add	r1, r7
   89204:	42a3      	cmp	r3, r4
   89206:	d06a      	beq.n	892de <_free_r+0x11e>
   89208:	1957      	adds	r7, r2, r5
   8920a:	687f      	ldr	r7, [r7, #4]
   8920c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   89210:	f8c3 e00c 	str.w	lr, [r3, #12]
   89214:	f8ce 3008 	str.w	r3, [lr, #8]
   89218:	07fb      	lsls	r3, r7, #31
   8921a:	f140 8097 	bpl.w	8934c <_free_r+0x18c>
   8921e:	f041 0301 	orr.w	r3, r1, #1
   89222:	6043      	str	r3, [r0, #4]
   89224:	6011      	str	r1, [r2, #0]
   89226:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8922a:	d234      	bcs.n	89296 <_free_r+0xd6>
   8922c:	2201      	movs	r2, #1
   8922e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   89232:	08cb      	lsrs	r3, r1, #3
   89234:	0949      	lsrs	r1, r1, #5
   89236:	4413      	add	r3, r2
   89238:	fa02 f101 	lsl.w	r1, r2, r1
   8923c:	4321      	orrs	r1, r4
   8923e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   89242:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   89246:	3a08      	subs	r2, #8
   89248:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8924c:	f8cc 1004 	str.w	r1, [ip, #4]
   89250:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   89254:	60e0      	str	r0, [r4, #12]
   89256:	4630      	mov	r0, r6
   89258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8925c:	f000 be56 	b.w	89f0c <__malloc_unlock>
   89260:	1953      	adds	r3, r2, r5
   89262:	685b      	ldr	r3, [r3, #4]
   89264:	07df      	lsls	r7, r3, #31
   89266:	d40e      	bmi.n	89286 <_free_r+0xc6>
   89268:	4429      	add	r1, r5
   8926a:	f10c 0408 	add.w	r4, ip, #8
   8926e:	6893      	ldr	r3, [r2, #8]
   89270:	42a3      	cmp	r3, r4
   89272:	d073      	beq.n	8935c <_free_r+0x19c>
   89274:	68d4      	ldr	r4, [r2, #12]
   89276:	f041 0201 	orr.w	r2, r1, #1
   8927a:	60dc      	str	r4, [r3, #12]
   8927c:	60a3      	str	r3, [r4, #8]
   8927e:	6042      	str	r2, [r0, #4]
   89280:	5041      	str	r1, [r0, r1]
   89282:	e7d0      	b.n	89226 <_free_r+0x66>
   89284:	4770      	bx	lr
   89286:	f041 0301 	orr.w	r3, r1, #1
   8928a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8928e:	f844 3c04 	str.w	r3, [r4, #-4]
   89292:	6011      	str	r1, [r2, #0]
   89294:	d3ca      	bcc.n	8922c <_free_r+0x6c>
   89296:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8929a:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8929e:	d24a      	bcs.n	89336 <_free_r+0x176>
   892a0:	098b      	lsrs	r3, r1, #6
   892a2:	f103 0539 	add.w	r5, r3, #57	; 0x39
   892a6:	00ed      	lsls	r5, r5, #3
   892a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
   892ac:	f85c 3005 	ldr.w	r3, [ip, r5]
   892b0:	eb0c 0405 	add.w	r4, ip, r5
   892b4:	3c08      	subs	r4, #8
   892b6:	429c      	cmp	r4, r3
   892b8:	d059      	beq.n	8936e <_free_r+0x1ae>
   892ba:	685a      	ldr	r2, [r3, #4]
   892bc:	f022 0203 	bic.w	r2, r2, #3
   892c0:	428a      	cmp	r2, r1
   892c2:	d902      	bls.n	892ca <_free_r+0x10a>
   892c4:	689b      	ldr	r3, [r3, #8]
   892c6:	429c      	cmp	r4, r3
   892c8:	d1f7      	bne.n	892ba <_free_r+0xfa>
   892ca:	68dc      	ldr	r4, [r3, #12]
   892cc:	e9c0 3402 	strd	r3, r4, [r0, #8]
   892d0:	60a0      	str	r0, [r4, #8]
   892d2:	60d8      	str	r0, [r3, #12]
   892d4:	4630      	mov	r0, r6
   892d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   892da:	f000 be17 	b.w	89f0c <__malloc_unlock>
   892de:	1953      	adds	r3, r2, r5
   892e0:	685b      	ldr	r3, [r3, #4]
   892e2:	07db      	lsls	r3, r3, #31
   892e4:	d466      	bmi.n	893b4 <_free_r+0x1f4>
   892e6:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   892ea:	4429      	add	r1, r5
   892ec:	f041 0401 	orr.w	r4, r1, #1
   892f0:	60d3      	str	r3, [r2, #12]
   892f2:	609a      	str	r2, [r3, #8]
   892f4:	6044      	str	r4, [r0, #4]
   892f6:	5041      	str	r1, [r0, r1]
   892f8:	4630      	mov	r0, r6
   892fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   892fe:	f000 be05 	b.w	89f0c <__malloc_unlock>
   89302:	07db      	lsls	r3, r3, #31
   89304:	4429      	add	r1, r5
   89306:	d407      	bmi.n	89318 <_free_r+0x158>
   89308:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8930c:	1b00      	subs	r0, r0, r4
   8930e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   89312:	4421      	add	r1, r4
   89314:	60d3      	str	r3, [r2, #12]
   89316:	609a      	str	r2, [r3, #8]
   89318:	4b29      	ldr	r3, [pc, #164]	; (893c0 <_free_r+0x200>)
   8931a:	f041 0201 	orr.w	r2, r1, #1
   8931e:	681b      	ldr	r3, [r3, #0]
   89320:	6042      	str	r2, [r0, #4]
   89322:	428b      	cmp	r3, r1
   89324:	f8cc 0008 	str.w	r0, [ip, #8]
   89328:	d895      	bhi.n	89256 <_free_r+0x96>
   8932a:	4b26      	ldr	r3, [pc, #152]	; (893c4 <_free_r+0x204>)
   8932c:	4630      	mov	r0, r6
   8932e:	6819      	ldr	r1, [r3, #0]
   89330:	f7ff fef6 	bl	89120 <_malloc_trim_r>
   89334:	e78f      	b.n	89256 <_free_r+0x96>
   89336:	2b14      	cmp	r3, #20
   89338:	d90a      	bls.n	89350 <_free_r+0x190>
   8933a:	2b54      	cmp	r3, #84	; 0x54
   8933c:	d821      	bhi.n	89382 <_free_r+0x1c2>
   8933e:	0b0b      	lsrs	r3, r1, #12
   89340:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   89344:	00ed      	lsls	r5, r5, #3
   89346:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8934a:	e7af      	b.n	892ac <_free_r+0xec>
   8934c:	4429      	add	r1, r5
   8934e:	e78e      	b.n	8926e <_free_r+0xae>
   89350:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   89354:	00ed      	lsls	r5, r5, #3
   89356:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8935a:	e7a7      	b.n	892ac <_free_r+0xec>
   8935c:	f041 0301 	orr.w	r3, r1, #1
   89360:	e9cc 0004 	strd	r0, r0, [ip, #16]
   89364:	e9c0 4402 	strd	r4, r4, [r0, #8]
   89368:	6043      	str	r3, [r0, #4]
   8936a:	5041      	str	r1, [r0, r1]
   8936c:	e773      	b.n	89256 <_free_r+0x96>
   8936e:	2501      	movs	r5, #1
   89370:	f8dc 1004 	ldr.w	r1, [ip, #4]
   89374:	1092      	asrs	r2, r2, #2
   89376:	fa05 f202 	lsl.w	r2, r5, r2
   8937a:	430a      	orrs	r2, r1
   8937c:	f8cc 2004 	str.w	r2, [ip, #4]
   89380:	e7a4      	b.n	892cc <_free_r+0x10c>
   89382:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89386:	d806      	bhi.n	89396 <_free_r+0x1d6>
   89388:	0bcb      	lsrs	r3, r1, #15
   8938a:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8938e:	00ed      	lsls	r5, r5, #3
   89390:	f103 0277 	add.w	r2, r3, #119	; 0x77
   89394:	e78a      	b.n	892ac <_free_r+0xec>
   89396:	f240 5254 	movw	r2, #1364	; 0x554
   8939a:	4293      	cmp	r3, r2
   8939c:	d806      	bhi.n	893ac <_free_r+0x1ec>
   8939e:	0c8b      	lsrs	r3, r1, #18
   893a0:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   893a4:	00ed      	lsls	r5, r5, #3
   893a6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   893aa:	e77f      	b.n	892ac <_free_r+0xec>
   893ac:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   893b0:	227e      	movs	r2, #126	; 0x7e
   893b2:	e77b      	b.n	892ac <_free_r+0xec>
   893b4:	f041 0301 	orr.w	r3, r1, #1
   893b8:	6043      	str	r3, [r0, #4]
   893ba:	6011      	str	r1, [r2, #0]
   893bc:	e74b      	b.n	89256 <_free_r+0x96>
   893be:	bf00      	nop
   893c0:	20000d54 	.word	0x20000d54
   893c4:	2000148c 	.word	0x2000148c
   893c8:	20000948 	.word	0x20000948

000893cc <__sfvwrite_r>:
   893cc:	6893      	ldr	r3, [r2, #8]
   893ce:	2b00      	cmp	r3, #0
   893d0:	f000 80bd 	beq.w	8954e <__sfvwrite_r+0x182>
   893d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   893d8:	4690      	mov	r8, r2
   893da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   893de:	460c      	mov	r4, r1
   893e0:	0711      	lsls	r1, r2, #28
   893e2:	4681      	mov	r9, r0
   893e4:	b083      	sub	sp, #12
   893e6:	b293      	uxth	r3, r2
   893e8:	d527      	bpl.n	8943a <__sfvwrite_r+0x6e>
   893ea:	6922      	ldr	r2, [r4, #16]
   893ec:	b32a      	cbz	r2, 8943a <__sfvwrite_r+0x6e>
   893ee:	f013 0702 	ands.w	r7, r3, #2
   893f2:	f8d8 5000 	ldr.w	r5, [r8]
   893f6:	d02f      	beq.n	89458 <__sfvwrite_r+0x8c>
   893f8:	f04f 0b00 	mov.w	fp, #0
   893fc:	465f      	mov	r7, fp
   893fe:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 896b4 <__sfvwrite_r+0x2e8>
   89402:	2f00      	cmp	r7, #0
   89404:	f000 8089 	beq.w	8951a <__sfvwrite_r+0x14e>
   89408:	4557      	cmp	r7, sl
   8940a:	463b      	mov	r3, r7
   8940c:	465a      	mov	r2, fp
   8940e:	bf28      	it	cs
   89410:	4653      	movcs	r3, sl
   89412:	4648      	mov	r0, r9
   89414:	69e1      	ldr	r1, [r4, #28]
   89416:	6a66      	ldr	r6, [r4, #36]	; 0x24
   89418:	47b0      	blx	r6
   8941a:	2800      	cmp	r0, #0
   8941c:	f340 808d 	ble.w	8953a <__sfvwrite_r+0x16e>
   89420:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89424:	4483      	add	fp, r0
   89426:	1a1b      	subs	r3, r3, r0
   89428:	1a3f      	subs	r7, r7, r0
   8942a:	f8c8 3008 	str.w	r3, [r8, #8]
   8942e:	2b00      	cmp	r3, #0
   89430:	d1e7      	bne.n	89402 <__sfvwrite_r+0x36>
   89432:	2000      	movs	r0, #0
   89434:	b003      	add	sp, #12
   89436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8943a:	4621      	mov	r1, r4
   8943c:	4648      	mov	r0, r9
   8943e:	f7fe fc3b 	bl	87cb8 <__swsetup_r>
   89442:	2800      	cmp	r0, #0
   89444:	f040 8132 	bne.w	896ac <__sfvwrite_r+0x2e0>
   89448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8944c:	f8d8 5000 	ldr.w	r5, [r8]
   89450:	b293      	uxth	r3, r2
   89452:	f013 0702 	ands.w	r7, r3, #2
   89456:	d1cf      	bne.n	893f8 <__sfvwrite_r+0x2c>
   89458:	f013 0a01 	ands.w	sl, r3, #1
   8945c:	d179      	bne.n	89552 <__sfvwrite_r+0x186>
   8945e:	4656      	mov	r6, sl
   89460:	2e00      	cmp	r6, #0
   89462:	d056      	beq.n	89512 <__sfvwrite_r+0x146>
   89464:	059a      	lsls	r2, r3, #22
   89466:	68a7      	ldr	r7, [r4, #8]
   89468:	f140 80bd 	bpl.w	895e6 <__sfvwrite_r+0x21a>
   8946c:	42b7      	cmp	r7, r6
   8946e:	46bb      	mov	fp, r7
   89470:	f200 80d2 	bhi.w	89618 <__sfvwrite_r+0x24c>
   89474:	f413 6f90 	tst.w	r3, #1152	; 0x480
   89478:	f000 80d0 	beq.w	8961c <__sfvwrite_r+0x250>
   8947c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   89480:	6822      	ldr	r2, [r4, #0]
   89482:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   89486:	eba2 0b01 	sub.w	fp, r2, r1
   8948a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8948e:	f10b 0001 	add.w	r0, fp, #1
   89492:	107f      	asrs	r7, r7, #1
   89494:	4430      	add	r0, r6
   89496:	42b8      	cmp	r0, r7
   89498:	463a      	mov	r2, r7
   8949a:	bf84      	itt	hi
   8949c:	4607      	movhi	r7, r0
   8949e:	463a      	movhi	r2, r7
   894a0:	055b      	lsls	r3, r3, #21
   894a2:	f140 80e7 	bpl.w	89674 <__sfvwrite_r+0x2a8>
   894a6:	4611      	mov	r1, r2
   894a8:	4648      	mov	r0, r9
   894aa:	f000 f9bb 	bl	89824 <_malloc_r>
   894ae:	2800      	cmp	r0, #0
   894b0:	f000 80f6 	beq.w	896a0 <__sfvwrite_r+0x2d4>
   894b4:	465a      	mov	r2, fp
   894b6:	6921      	ldr	r1, [r4, #16]
   894b8:	9000      	str	r0, [sp, #0]
   894ba:	f7fb fd7f 	bl	84fbc <memcpy>
   894be:	89a2      	ldrh	r2, [r4, #12]
   894c0:	9b00      	ldr	r3, [sp, #0]
   894c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   894c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   894ca:	81a2      	strh	r2, [r4, #12]
   894cc:	eba7 020b 	sub.w	r2, r7, fp
   894d0:	eb03 000b 	add.w	r0, r3, fp
   894d4:	6167      	str	r7, [r4, #20]
   894d6:	46b3      	mov	fp, r6
   894d8:	4637      	mov	r7, r6
   894da:	6123      	str	r3, [r4, #16]
   894dc:	6020      	str	r0, [r4, #0]
   894de:	60a2      	str	r2, [r4, #8]
   894e0:	465a      	mov	r2, fp
   894e2:	4651      	mov	r1, sl
   894e4:	f000 fca2 	bl	89e2c <memmove>
   894e8:	68a2      	ldr	r2, [r4, #8]
   894ea:	6823      	ldr	r3, [r4, #0]
   894ec:	1bd2      	subs	r2, r2, r7
   894ee:	4637      	mov	r7, r6
   894f0:	2600      	movs	r6, #0
   894f2:	445b      	add	r3, fp
   894f4:	60a2      	str	r2, [r4, #8]
   894f6:	6023      	str	r3, [r4, #0]
   894f8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   894fc:	44ba      	add	sl, r7
   894fe:	1bd7      	subs	r7, r2, r7
   89500:	f8c8 7008 	str.w	r7, [r8, #8]
   89504:	2f00      	cmp	r7, #0
   89506:	d094      	beq.n	89432 <__sfvwrite_r+0x66>
   89508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8950c:	b29b      	uxth	r3, r3
   8950e:	2e00      	cmp	r6, #0
   89510:	d1a8      	bne.n	89464 <__sfvwrite_r+0x98>
   89512:	e9d5 a600 	ldrd	sl, r6, [r5]
   89516:	3508      	adds	r5, #8
   89518:	e7a2      	b.n	89460 <__sfvwrite_r+0x94>
   8951a:	e9d5 b700 	ldrd	fp, r7, [r5]
   8951e:	3508      	adds	r5, #8
   89520:	e76f      	b.n	89402 <__sfvwrite_r+0x36>
   89522:	4629      	mov	r1, r5
   89524:	465a      	mov	r2, fp
   89526:	f000 fc81 	bl	89e2c <memmove>
   8952a:	6823      	ldr	r3, [r4, #0]
   8952c:	4621      	mov	r1, r4
   8952e:	445b      	add	r3, fp
   89530:	4648      	mov	r0, r9
   89532:	6023      	str	r3, [r4, #0]
   89534:	f7ff fcc4 	bl	88ec0 <_fflush_r>
   89538:	b358      	cbz	r0, 89592 <__sfvwrite_r+0x1c6>
   8953a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8953e:	f04f 30ff 	mov.w	r0, #4294967295
   89542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89546:	81a3      	strh	r3, [r4, #12]
   89548:	b003      	add	sp, #12
   8954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8954e:	2000      	movs	r0, #0
   89550:	4770      	bx	lr
   89552:	463e      	mov	r6, r7
   89554:	46aa      	mov	sl, r5
   89556:	4638      	mov	r0, r7
   89558:	463d      	mov	r5, r7
   8955a:	9700      	str	r7, [sp, #0]
   8955c:	b36e      	cbz	r6, 895ba <__sfvwrite_r+0x1ee>
   8955e:	2800      	cmp	r0, #0
   89560:	d035      	beq.n	895ce <__sfvwrite_r+0x202>
   89562:	9a00      	ldr	r2, [sp, #0]
   89564:	6820      	ldr	r0, [r4, #0]
   89566:	6921      	ldr	r1, [r4, #16]
   89568:	42b2      	cmp	r2, r6
   8956a:	bf28      	it	cs
   8956c:	4632      	movcs	r2, r6
   8956e:	4288      	cmp	r0, r1
   89570:	6963      	ldr	r3, [r4, #20]
   89572:	d904      	bls.n	8957e <__sfvwrite_r+0x1b2>
   89574:	68a1      	ldr	r1, [r4, #8]
   89576:	eb03 0b01 	add.w	fp, r3, r1
   8957a:	455a      	cmp	r2, fp
   8957c:	dcd1      	bgt.n	89522 <__sfvwrite_r+0x156>
   8957e:	4293      	cmp	r3, r2
   89580:	dc6b      	bgt.n	8965a <__sfvwrite_r+0x28e>
   89582:	462a      	mov	r2, r5
   89584:	4648      	mov	r0, r9
   89586:	69e1      	ldr	r1, [r4, #28]
   89588:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8958a:	47b8      	blx	r7
   8958c:	f1b0 0b00 	subs.w	fp, r0, #0
   89590:	ddd3      	ble.n	8953a <__sfvwrite_r+0x16e>
   89592:	9b00      	ldr	r3, [sp, #0]
   89594:	ebb3 030b 	subs.w	r3, r3, fp
   89598:	9300      	str	r3, [sp, #0]
   8959a:	d057      	beq.n	8964c <__sfvwrite_r+0x280>
   8959c:	2001      	movs	r0, #1
   8959e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   895a2:	445d      	add	r5, fp
   895a4:	eba3 030b 	sub.w	r3, r3, fp
   895a8:	eba6 060b 	sub.w	r6, r6, fp
   895ac:	f8c8 3008 	str.w	r3, [r8, #8]
   895b0:	2b00      	cmp	r3, #0
   895b2:	f43f af3e 	beq.w	89432 <__sfvwrite_r+0x66>
   895b6:	2e00      	cmp	r6, #0
   895b8:	d1d1      	bne.n	8955e <__sfvwrite_r+0x192>
   895ba:	f10a 0308 	add.w	r3, sl, #8
   895be:	f853 6c04 	ldr.w	r6, [r3, #-4]
   895c2:	469a      	mov	sl, r3
   895c4:	f853 5c08 	ldr.w	r5, [r3, #-8]
   895c8:	3308      	adds	r3, #8
   895ca:	2e00      	cmp	r6, #0
   895cc:	d0f7      	beq.n	895be <__sfvwrite_r+0x1f2>
   895ce:	4632      	mov	r2, r6
   895d0:	210a      	movs	r1, #10
   895d2:	4628      	mov	r0, r5
   895d4:	f000 fbea 	bl	89dac <memchr>
   895d8:	2800      	cmp	r0, #0
   895da:	d05e      	beq.n	8969a <__sfvwrite_r+0x2ce>
   895dc:	3001      	adds	r0, #1
   895de:	1b43      	subs	r3, r0, r5
   895e0:	461a      	mov	r2, r3
   895e2:	9300      	str	r3, [sp, #0]
   895e4:	e7be      	b.n	89564 <__sfvwrite_r+0x198>
   895e6:	6820      	ldr	r0, [r4, #0]
   895e8:	6923      	ldr	r3, [r4, #16]
   895ea:	4298      	cmp	r0, r3
   895ec:	d818      	bhi.n	89620 <__sfvwrite_r+0x254>
   895ee:	6962      	ldr	r2, [r4, #20]
   895f0:	42b2      	cmp	r2, r6
   895f2:	d815      	bhi.n	89620 <__sfvwrite_r+0x254>
   895f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   895f8:	42b3      	cmp	r3, r6
   895fa:	bf28      	it	cs
   895fc:	4633      	movcs	r3, r6
   895fe:	fb93 f3f2 	sdiv	r3, r3, r2
   89602:	6a67      	ldr	r7, [r4, #36]	; 0x24
   89604:	fb02 f303 	mul.w	r3, r2, r3
   89608:	4648      	mov	r0, r9
   8960a:	4652      	mov	r2, sl
   8960c:	69e1      	ldr	r1, [r4, #28]
   8960e:	47b8      	blx	r7
   89610:	1e07      	subs	r7, r0, #0
   89612:	dd92      	ble.n	8953a <__sfvwrite_r+0x16e>
   89614:	1bf6      	subs	r6, r6, r7
   89616:	e76f      	b.n	894f8 <__sfvwrite_r+0x12c>
   89618:	4637      	mov	r7, r6
   8961a:	46b3      	mov	fp, r6
   8961c:	6820      	ldr	r0, [r4, #0]
   8961e:	e75f      	b.n	894e0 <__sfvwrite_r+0x114>
   89620:	42b7      	cmp	r7, r6
   89622:	bf28      	it	cs
   89624:	4637      	movcs	r7, r6
   89626:	4651      	mov	r1, sl
   89628:	463a      	mov	r2, r7
   8962a:	f000 fbff 	bl	89e2c <memmove>
   8962e:	68a3      	ldr	r3, [r4, #8]
   89630:	6822      	ldr	r2, [r4, #0]
   89632:	1bdb      	subs	r3, r3, r7
   89634:	443a      	add	r2, r7
   89636:	60a3      	str	r3, [r4, #8]
   89638:	6022      	str	r2, [r4, #0]
   8963a:	2b00      	cmp	r3, #0
   8963c:	d1ea      	bne.n	89614 <__sfvwrite_r+0x248>
   8963e:	4621      	mov	r1, r4
   89640:	4648      	mov	r0, r9
   89642:	f7ff fc3d 	bl	88ec0 <_fflush_r>
   89646:	2800      	cmp	r0, #0
   89648:	d0e4      	beq.n	89614 <__sfvwrite_r+0x248>
   8964a:	e776      	b.n	8953a <__sfvwrite_r+0x16e>
   8964c:	4621      	mov	r1, r4
   8964e:	4648      	mov	r0, r9
   89650:	f7ff fc36 	bl	88ec0 <_fflush_r>
   89654:	2800      	cmp	r0, #0
   89656:	d0a2      	beq.n	8959e <__sfvwrite_r+0x1d2>
   89658:	e76f      	b.n	8953a <__sfvwrite_r+0x16e>
   8965a:	4629      	mov	r1, r5
   8965c:	4693      	mov	fp, r2
   8965e:	9201      	str	r2, [sp, #4]
   89660:	f000 fbe4 	bl	89e2c <memmove>
   89664:	68a1      	ldr	r1, [r4, #8]
   89666:	6823      	ldr	r3, [r4, #0]
   89668:	9a01      	ldr	r2, [sp, #4]
   8966a:	1a89      	subs	r1, r1, r2
   8966c:	441a      	add	r2, r3
   8966e:	60a1      	str	r1, [r4, #8]
   89670:	6022      	str	r2, [r4, #0]
   89672:	e78e      	b.n	89592 <__sfvwrite_r+0x1c6>
   89674:	4648      	mov	r0, r9
   89676:	f000 ffcb 	bl	8a610 <_realloc_r>
   8967a:	4603      	mov	r3, r0
   8967c:	2800      	cmp	r0, #0
   8967e:	f47f af25 	bne.w	894cc <__sfvwrite_r+0x100>
   89682:	4648      	mov	r0, r9
   89684:	6921      	ldr	r1, [r4, #16]
   89686:	f7ff fd9b 	bl	891c0 <_free_r>
   8968a:	220c      	movs	r2, #12
   8968c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89690:	f8c9 2000 	str.w	r2, [r9]
   89694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   89698:	e751      	b.n	8953e <__sfvwrite_r+0x172>
   8969a:	1c72      	adds	r2, r6, #1
   8969c:	9200      	str	r2, [sp, #0]
   8969e:	e761      	b.n	89564 <__sfvwrite_r+0x198>
   896a0:	220c      	movs	r2, #12
   896a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   896a6:	f8c9 2000 	str.w	r2, [r9]
   896aa:	e748      	b.n	8953e <__sfvwrite_r+0x172>
   896ac:	f04f 30ff 	mov.w	r0, #4294967295
   896b0:	e6c0      	b.n	89434 <__sfvwrite_r+0x68>
   896b2:	bf00      	nop
   896b4:	7ffffc00 	.word	0x7ffffc00

000896b8 <_fwalk_reent>:
   896b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   896bc:	4607      	mov	r7, r0
   896be:	4688      	mov	r8, r1
   896c0:	f04f 0900 	mov.w	r9, #0
   896c4:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   896c8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   896cc:	3d01      	subs	r5, #1
   896ce:	d410      	bmi.n	896f2 <_fwalk_reent+0x3a>
   896d0:	89a3      	ldrh	r3, [r4, #12]
   896d2:	3d01      	subs	r5, #1
   896d4:	2b01      	cmp	r3, #1
   896d6:	d908      	bls.n	896ea <_fwalk_reent+0x32>
   896d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   896dc:	3301      	adds	r3, #1
   896de:	d004      	beq.n	896ea <_fwalk_reent+0x32>
   896e0:	4621      	mov	r1, r4
   896e2:	4638      	mov	r0, r7
   896e4:	47c0      	blx	r8
   896e6:	ea49 0900 	orr.w	r9, r9, r0
   896ea:	1c6b      	adds	r3, r5, #1
   896ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
   896f0:	d1ee      	bne.n	896d0 <_fwalk_reent+0x18>
   896f2:	6836      	ldr	r6, [r6, #0]
   896f4:	2e00      	cmp	r6, #0
   896f6:	d1e7      	bne.n	896c8 <_fwalk_reent+0x10>
   896f8:	4648      	mov	r0, r9
   896fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   896fe:	bf00      	nop

00089700 <__locale_mb_cur_max>:
   89700:	4b01      	ldr	r3, [pc, #4]	; (89708 <__locale_mb_cur_max+0x8>)
   89702:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   89706:	4770      	bx	lr
   89708:	200007dc 	.word	0x200007dc

0008970c <_localeconv_r>:
   8970c:	4800      	ldr	r0, [pc, #0]	; (89710 <_localeconv_r+0x4>)
   8970e:	4770      	bx	lr
   89710:	200008cc 	.word	0x200008cc

00089714 <__retarget_lock_init_recursive>:
   89714:	4770      	bx	lr
   89716:	bf00      	nop

00089718 <__retarget_lock_close_recursive>:
   89718:	4770      	bx	lr
   8971a:	bf00      	nop

0008971c <__retarget_lock_acquire_recursive>:
   8971c:	4770      	bx	lr
   8971e:	bf00      	nop

00089720 <__retarget_lock_release_recursive>:
   89720:	4770      	bx	lr
   89722:	bf00      	nop

00089724 <__swhatbuf_r>:
   89724:	b570      	push	{r4, r5, r6, lr}
   89726:	460c      	mov	r4, r1
   89728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8972c:	4615      	mov	r5, r2
   8972e:	2900      	cmp	r1, #0
   89730:	461e      	mov	r6, r3
   89732:	b096      	sub	sp, #88	; 0x58
   89734:	db14      	blt.n	89760 <__swhatbuf_r+0x3c>
   89736:	466a      	mov	r2, sp
   89738:	f001 fc82 	bl	8b040 <_fstat_r>
   8973c:	2800      	cmp	r0, #0
   8973e:	db0f      	blt.n	89760 <__swhatbuf_r+0x3c>
   89740:	9a01      	ldr	r2, [sp, #4]
   89742:	f44f 6380 	mov.w	r3, #1024	; 0x400
   89746:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8974a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8974e:	fab2 f282 	clz	r2, r2
   89752:	f44f 6000 	mov.w	r0, #2048	; 0x800
   89756:	0952      	lsrs	r2, r2, #5
   89758:	6032      	str	r2, [r6, #0]
   8975a:	602b      	str	r3, [r5, #0]
   8975c:	b016      	add	sp, #88	; 0x58
   8975e:	bd70      	pop	{r4, r5, r6, pc}
   89760:	2300      	movs	r3, #0
   89762:	89a1      	ldrh	r1, [r4, #12]
   89764:	6033      	str	r3, [r6, #0]
   89766:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8976a:	d004      	beq.n	89776 <__swhatbuf_r+0x52>
   8976c:	2240      	movs	r2, #64	; 0x40
   8976e:	4618      	mov	r0, r3
   89770:	602a      	str	r2, [r5, #0]
   89772:	b016      	add	sp, #88	; 0x58
   89774:	bd70      	pop	{r4, r5, r6, pc}
   89776:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8977a:	602b      	str	r3, [r5, #0]
   8977c:	b016      	add	sp, #88	; 0x58
   8977e:	bd70      	pop	{r4, r5, r6, pc}

00089780 <__smakebuf_r>:
   89780:	b570      	push	{r4, r5, r6, lr}
   89782:	898b      	ldrh	r3, [r1, #12]
   89784:	460c      	mov	r4, r1
   89786:	079d      	lsls	r5, r3, #30
   89788:	b082      	sub	sp, #8
   8978a:	d507      	bpl.n	8979c <__smakebuf_r+0x1c>
   8978c:	2201      	movs	r2, #1
   8978e:	f101 0343 	add.w	r3, r1, #67	; 0x43
   89792:	614a      	str	r2, [r1, #20]
   89794:	600b      	str	r3, [r1, #0]
   89796:	610b      	str	r3, [r1, #16]
   89798:	b002      	add	sp, #8
   8979a:	bd70      	pop	{r4, r5, r6, pc}
   8979c:	ab01      	add	r3, sp, #4
   8979e:	466a      	mov	r2, sp
   897a0:	4606      	mov	r6, r0
   897a2:	f7ff ffbf 	bl	89724 <__swhatbuf_r>
   897a6:	9900      	ldr	r1, [sp, #0]
   897a8:	4605      	mov	r5, r0
   897aa:	4630      	mov	r0, r6
   897ac:	f000 f83a 	bl	89824 <_malloc_r>
   897b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   897b4:	b170      	cbz	r0, 897d4 <__smakebuf_r+0x54>
   897b6:	4916      	ldr	r1, [pc, #88]	; (89810 <__smakebuf_r+0x90>)
   897b8:	9a00      	ldr	r2, [sp, #0]
   897ba:	63f1      	str	r1, [r6, #60]	; 0x3c
   897bc:	9901      	ldr	r1, [sp, #4]
   897be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   897c2:	e9c4 0204 	strd	r0, r2, [r4, #16]
   897c6:	81a3      	strh	r3, [r4, #12]
   897c8:	6020      	str	r0, [r4, #0]
   897ca:	b989      	cbnz	r1, 897f0 <__smakebuf_r+0x70>
   897cc:	432b      	orrs	r3, r5
   897ce:	81a3      	strh	r3, [r4, #12]
   897d0:	b002      	add	sp, #8
   897d2:	bd70      	pop	{r4, r5, r6, pc}
   897d4:	059a      	lsls	r2, r3, #22
   897d6:	d4df      	bmi.n	89798 <__smakebuf_r+0x18>
   897d8:	2101      	movs	r1, #1
   897da:	f023 0303 	bic.w	r3, r3, #3
   897de:	f104 0243 	add.w	r2, r4, #67	; 0x43
   897e2:	f043 0302 	orr.w	r3, r3, #2
   897e6:	81a3      	strh	r3, [r4, #12]
   897e8:	6161      	str	r1, [r4, #20]
   897ea:	6022      	str	r2, [r4, #0]
   897ec:	6122      	str	r2, [r4, #16]
   897ee:	e7d3      	b.n	89798 <__smakebuf_r+0x18>
   897f0:	4630      	mov	r0, r6
   897f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   897f6:	f001 fc39 	bl	8b06c <_isatty_r>
   897fa:	b910      	cbnz	r0, 89802 <__smakebuf_r+0x82>
   897fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89800:	e7e4      	b.n	897cc <__smakebuf_r+0x4c>
   89802:	89a2      	ldrh	r2, [r4, #12]
   89804:	f022 0203 	bic.w	r2, r2, #3
   89808:	f042 0201 	orr.w	r2, r2, #1
   8980c:	b213      	sxth	r3, r2
   8980e:	e7dd      	b.n	897cc <__smakebuf_r+0x4c>
   89810:	00088f6d 	.word	0x00088f6d

00089814 <malloc>:
   89814:	4b02      	ldr	r3, [pc, #8]	; (89820 <malloc+0xc>)
   89816:	4601      	mov	r1, r0
   89818:	6818      	ldr	r0, [r3, #0]
   8981a:	f000 b803 	b.w	89824 <_malloc_r>
   8981e:	bf00      	nop
   89820:	200003ac 	.word	0x200003ac

00089824 <_malloc_r>:
   89824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89828:	f101 050b 	add.w	r5, r1, #11
   8982c:	2d16      	cmp	r5, #22
   8982e:	4606      	mov	r6, r0
   89830:	b083      	sub	sp, #12
   89832:	d824      	bhi.n	8987e <_malloc_r+0x5a>
   89834:	2910      	cmp	r1, #16
   89836:	f200 80b6 	bhi.w	899a6 <_malloc_r+0x182>
   8983a:	f000 fb61 	bl	89f00 <__malloc_lock>
   8983e:	2510      	movs	r5, #16
   89840:	2002      	movs	r0, #2
   89842:	2318      	movs	r3, #24
   89844:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 89d30 <_malloc_r+0x50c>
   89848:	4443      	add	r3, r8
   8984a:	685c      	ldr	r4, [r3, #4]
   8984c:	f1a3 0208 	sub.w	r2, r3, #8
   89850:	4294      	cmp	r4, r2
   89852:	f000 80b4 	beq.w	899be <_malloc_r+0x19a>
   89856:	6863      	ldr	r3, [r4, #4]
   89858:	68e1      	ldr	r1, [r4, #12]
   8985a:	f023 0303 	bic.w	r3, r3, #3
   8985e:	4423      	add	r3, r4
   89860:	685a      	ldr	r2, [r3, #4]
   89862:	68a5      	ldr	r5, [r4, #8]
   89864:	f042 0201 	orr.w	r2, r2, #1
   89868:	60e9      	str	r1, [r5, #12]
   8986a:	4630      	mov	r0, r6
   8986c:	608d      	str	r5, [r1, #8]
   8986e:	3408      	adds	r4, #8
   89870:	605a      	str	r2, [r3, #4]
   89872:	f000 fb4b 	bl	89f0c <__malloc_unlock>
   89876:	4620      	mov	r0, r4
   89878:	b003      	add	sp, #12
   8987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8987e:	f035 0507 	bics.w	r5, r5, #7
   89882:	f100 8090 	bmi.w	899a6 <_malloc_r+0x182>
   89886:	42a9      	cmp	r1, r5
   89888:	f200 808d 	bhi.w	899a6 <_malloc_r+0x182>
   8988c:	f000 fb38 	bl	89f00 <__malloc_lock>
   89890:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   89894:	f0c0 8185 	bcc.w	89ba2 <_malloc_r+0x37e>
   89898:	0a6b      	lsrs	r3, r5, #9
   8989a:	f000 808b 	beq.w	899b4 <_malloc_r+0x190>
   8989e:	2b04      	cmp	r3, #4
   898a0:	f200 815b 	bhi.w	89b5a <_malloc_r+0x336>
   898a4:	09ab      	lsrs	r3, r5, #6
   898a6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   898aa:	f103 0738 	add.w	r7, r3, #56	; 0x38
   898ae:	00c1      	lsls	r1, r0, #3
   898b0:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 89d30 <_malloc_r+0x50c>
   898b4:	4441      	add	r1, r8
   898b6:	684c      	ldr	r4, [r1, #4]
   898b8:	3908      	subs	r1, #8
   898ba:	42a1      	cmp	r1, r4
   898bc:	d106      	bne.n	898cc <_malloc_r+0xa8>
   898be:	e00c      	b.n	898da <_malloc_r+0xb6>
   898c0:	2a00      	cmp	r2, #0
   898c2:	f280 8122 	bge.w	89b0a <_malloc_r+0x2e6>
   898c6:	68e4      	ldr	r4, [r4, #12]
   898c8:	42a1      	cmp	r1, r4
   898ca:	d006      	beq.n	898da <_malloc_r+0xb6>
   898cc:	6863      	ldr	r3, [r4, #4]
   898ce:	f023 0303 	bic.w	r3, r3, #3
   898d2:	1b5a      	subs	r2, r3, r5
   898d4:	2a0f      	cmp	r2, #15
   898d6:	ddf3      	ble.n	898c0 <_malloc_r+0x9c>
   898d8:	4638      	mov	r0, r7
   898da:	f8d8 4010 	ldr.w	r4, [r8, #16]
   898de:	f8df c454 	ldr.w	ip, [pc, #1108]	; 89d34 <_malloc_r+0x510>
   898e2:	4564      	cmp	r4, ip
   898e4:	d077      	beq.n	899d6 <_malloc_r+0x1b2>
   898e6:	6862      	ldr	r2, [r4, #4]
   898e8:	f022 0203 	bic.w	r2, r2, #3
   898ec:	1b53      	subs	r3, r2, r5
   898ee:	2b0f      	cmp	r3, #15
   898f0:	f300 8165 	bgt.w	89bbe <_malloc_r+0x39a>
   898f4:	2b00      	cmp	r3, #0
   898f6:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   898fa:	f280 8156 	bge.w	89baa <_malloc_r+0x386>
   898fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89902:	f080 8106 	bcs.w	89b12 <_malloc_r+0x2ee>
   89906:	2101      	movs	r1, #1
   89908:	08d3      	lsrs	r3, r2, #3
   8990a:	0952      	lsrs	r2, r2, #5
   8990c:	440b      	add	r3, r1
   8990e:	fa01 f202 	lsl.w	r2, r1, r2
   89912:	f8d8 1004 	ldr.w	r1, [r8, #4]
   89916:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8991a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8991e:	430a      	orrs	r2, r1
   89920:	f1ae 0108 	sub.w	r1, lr, #8
   89924:	e9c4 7102 	strd	r7, r1, [r4, #8]
   89928:	f8c8 2004 	str.w	r2, [r8, #4]
   8992c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   89930:	60fc      	str	r4, [r7, #12]
   89932:	2101      	movs	r1, #1
   89934:	1083      	asrs	r3, r0, #2
   89936:	4099      	lsls	r1, r3
   89938:	4291      	cmp	r1, r2
   8993a:	d853      	bhi.n	899e4 <_malloc_r+0x1c0>
   8993c:	4211      	tst	r1, r2
   8993e:	d106      	bne.n	8994e <_malloc_r+0x12a>
   89940:	f020 0003 	bic.w	r0, r0, #3
   89944:	0049      	lsls	r1, r1, #1
   89946:	4211      	tst	r1, r2
   89948:	f100 0004 	add.w	r0, r0, #4
   8994c:	d0fa      	beq.n	89944 <_malloc_r+0x120>
   8994e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   89952:	464c      	mov	r4, r9
   89954:	4686      	mov	lr, r0
   89956:	68e7      	ldr	r7, [r4, #12]
   89958:	42bc      	cmp	r4, r7
   8995a:	d107      	bne.n	8996c <_malloc_r+0x148>
   8995c:	e109      	b.n	89b72 <_malloc_r+0x34e>
   8995e:	2b00      	cmp	r3, #0
   89960:	f280 8110 	bge.w	89b84 <_malloc_r+0x360>
   89964:	68ff      	ldr	r7, [r7, #12]
   89966:	42bc      	cmp	r4, r7
   89968:	f000 8103 	beq.w	89b72 <_malloc_r+0x34e>
   8996c:	687a      	ldr	r2, [r7, #4]
   8996e:	f022 0203 	bic.w	r2, r2, #3
   89972:	1b53      	subs	r3, r2, r5
   89974:	2b0f      	cmp	r3, #15
   89976:	ddf2      	ble.n	8995e <_malloc_r+0x13a>
   89978:	f045 0e01 	orr.w	lr, r5, #1
   8997c:	4630      	mov	r0, r6
   8997e:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   89982:	443d      	add	r5, r7
   89984:	f043 0601 	orr.w	r6, r3, #1
   89988:	f8c7 e004 	str.w	lr, [r7, #4]
   8998c:	60e1      	str	r1, [r4, #12]
   8998e:	608c      	str	r4, [r1, #8]
   89990:	e9c8 5504 	strd	r5, r5, [r8, #16]
   89994:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   89998:	606e      	str	r6, [r5, #4]
   8999a:	50bb      	str	r3, [r7, r2]
   8999c:	f000 fab6 	bl	89f0c <__malloc_unlock>
   899a0:	f107 0408 	add.w	r4, r7, #8
   899a4:	e002      	b.n	899ac <_malloc_r+0x188>
   899a6:	230c      	movs	r3, #12
   899a8:	2400      	movs	r4, #0
   899aa:	6033      	str	r3, [r6, #0]
   899ac:	4620      	mov	r0, r4
   899ae:	b003      	add	sp, #12
   899b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   899b4:	f44f 7100 	mov.w	r1, #512	; 0x200
   899b8:	2040      	movs	r0, #64	; 0x40
   899ba:	273f      	movs	r7, #63	; 0x3f
   899bc:	e778      	b.n	898b0 <_malloc_r+0x8c>
   899be:	68dc      	ldr	r4, [r3, #12]
   899c0:	42a3      	cmp	r3, r4
   899c2:	bf08      	it	eq
   899c4:	3002      	addeq	r0, #2
   899c6:	f47f af46 	bne.w	89856 <_malloc_r+0x32>
   899ca:	f8d8 4010 	ldr.w	r4, [r8, #16]
   899ce:	f8df c364 	ldr.w	ip, [pc, #868]	; 89d34 <_malloc_r+0x510>
   899d2:	4564      	cmp	r4, ip
   899d4:	d187      	bne.n	898e6 <_malloc_r+0xc2>
   899d6:	2101      	movs	r1, #1
   899d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   899dc:	1083      	asrs	r3, r0, #2
   899de:	4099      	lsls	r1, r3
   899e0:	4291      	cmp	r1, r2
   899e2:	d9ab      	bls.n	8993c <_malloc_r+0x118>
   899e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   899e8:	6867      	ldr	r7, [r4, #4]
   899ea:	f027 0703 	bic.w	r7, r7, #3
   899ee:	42bd      	cmp	r5, r7
   899f0:	d802      	bhi.n	899f8 <_malloc_r+0x1d4>
   899f2:	1b7b      	subs	r3, r7, r5
   899f4:	2b0f      	cmp	r3, #15
   899f6:	dc77      	bgt.n	89ae8 <_malloc_r+0x2c4>
   899f8:	f8df 933c 	ldr.w	r9, [pc, #828]	; 89d38 <_malloc_r+0x514>
   899fc:	4bc8      	ldr	r3, [pc, #800]	; (89d20 <_malloc_r+0x4fc>)
   899fe:	f8d9 2000 	ldr.w	r2, [r9]
   89a02:	681b      	ldr	r3, [r3, #0]
   89a04:	3201      	adds	r2, #1
   89a06:	442b      	add	r3, r5
   89a08:	eb04 0a07 	add.w	sl, r4, r7
   89a0c:	f000 8124 	beq.w	89c58 <_malloc_r+0x434>
   89a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   89a14:	330f      	adds	r3, #15
   89a16:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   89a1a:	f02b 0b0f 	bic.w	fp, fp, #15
   89a1e:	4659      	mov	r1, fp
   89a20:	4630      	mov	r0, r6
   89a22:	f001 f81d 	bl	8aa60 <_sbrk_r>
   89a26:	1c41      	adds	r1, r0, #1
   89a28:	4602      	mov	r2, r0
   89a2a:	f000 80e1 	beq.w	89bf0 <_malloc_r+0x3cc>
   89a2e:	4582      	cmp	sl, r0
   89a30:	f200 80dc 	bhi.w	89bec <_malloc_r+0x3c8>
   89a34:	4bbb      	ldr	r3, [pc, #748]	; (89d24 <_malloc_r+0x500>)
   89a36:	6819      	ldr	r1, [r3, #0]
   89a38:	4459      	add	r1, fp
   89a3a:	4608      	mov	r0, r1
   89a3c:	6019      	str	r1, [r3, #0]
   89a3e:	f000 8141 	beq.w	89cc4 <_malloc_r+0x4a0>
   89a42:	f8d9 1000 	ldr.w	r1, [r9]
   89a46:	9301      	str	r3, [sp, #4]
   89a48:	3101      	adds	r1, #1
   89a4a:	bf1b      	ittet	ne
   89a4c:	eba2 0a0a 	subne.w	sl, r2, sl
   89a50:	4450      	addne	r0, sl
   89a52:	f8c9 2000 	streq.w	r2, [r9]
   89a56:	6018      	strne	r0, [r3, #0]
   89a58:	f012 0a07 	ands.w	sl, r2, #7
   89a5c:	f000 810a 	beq.w	89c74 <_malloc_r+0x450>
   89a60:	f1ca 0108 	rsb	r1, sl, #8
   89a64:	440a      	add	r2, r1
   89a66:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   89a6a:	4493      	add	fp, r2
   89a6c:	3108      	adds	r1, #8
   89a6e:	eba1 010b 	sub.w	r1, r1, fp
   89a72:	f3c1 090b 	ubfx	r9, r1, #0, #12
   89a76:	4649      	mov	r1, r9
   89a78:	4630      	mov	r0, r6
   89a7a:	9200      	str	r2, [sp, #0]
   89a7c:	f000 fff0 	bl	8aa60 <_sbrk_r>
   89a80:	1c42      	adds	r2, r0, #1
   89a82:	e9dd 2300 	ldrd	r2, r3, [sp]
   89a86:	f000 8143 	beq.w	89d10 <_malloc_r+0x4ec>
   89a8a:	1a80      	subs	r0, r0, r2
   89a8c:	eb00 0b09 	add.w	fp, r0, r9
   89a90:	6819      	ldr	r1, [r3, #0]
   89a92:	f04b 0001 	orr.w	r0, fp, #1
   89a96:	4449      	add	r1, r9
   89a98:	4544      	cmp	r4, r8
   89a9a:	f8c8 2008 	str.w	r2, [r8, #8]
   89a9e:	6019      	str	r1, [r3, #0]
   89aa0:	6050      	str	r0, [r2, #4]
   89aa2:	f000 811c 	beq.w	89cde <_malloc_r+0x4ba>
   89aa6:	2f0f      	cmp	r7, #15
   89aa8:	f240 811b 	bls.w	89ce2 <_malloc_r+0x4be>
   89aac:	f04f 0c05 	mov.w	ip, #5
   89ab0:	6860      	ldr	r0, [r4, #4]
   89ab2:	3f0c      	subs	r7, #12
   89ab4:	f027 0707 	bic.w	r7, r7, #7
   89ab8:	f000 0001 	and.w	r0, r0, #1
   89abc:	4338      	orrs	r0, r7
   89abe:	eb04 0e07 	add.w	lr, r4, r7
   89ac2:	2f0f      	cmp	r7, #15
   89ac4:	6060      	str	r0, [r4, #4]
   89ac6:	e9ce cc01 	strd	ip, ip, [lr, #4]
   89aca:	f200 8137 	bhi.w	89d3c <_malloc_r+0x518>
   89ace:	4614      	mov	r4, r2
   89ad0:	6850      	ldr	r0, [r2, #4]
   89ad2:	4b95      	ldr	r3, [pc, #596]	; (89d28 <_malloc_r+0x504>)
   89ad4:	681a      	ldr	r2, [r3, #0]
   89ad6:	428a      	cmp	r2, r1
   89ad8:	bf38      	it	cc
   89ada:	6019      	strcc	r1, [r3, #0]
   89adc:	4b93      	ldr	r3, [pc, #588]	; (89d2c <_malloc_r+0x508>)
   89ade:	681a      	ldr	r2, [r3, #0]
   89ae0:	428a      	cmp	r2, r1
   89ae2:	bf38      	it	cc
   89ae4:	6019      	strcc	r1, [r3, #0]
   89ae6:	e086      	b.n	89bf6 <_malloc_r+0x3d2>
   89ae8:	f045 0201 	orr.w	r2, r5, #1
   89aec:	f043 0301 	orr.w	r3, r3, #1
   89af0:	4425      	add	r5, r4
   89af2:	6062      	str	r2, [r4, #4]
   89af4:	4630      	mov	r0, r6
   89af6:	f8c8 5008 	str.w	r5, [r8, #8]
   89afa:	3408      	adds	r4, #8
   89afc:	606b      	str	r3, [r5, #4]
   89afe:	f000 fa05 	bl	89f0c <__malloc_unlock>
   89b02:	4620      	mov	r0, r4
   89b04:	b003      	add	sp, #12
   89b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b0a:	4423      	add	r3, r4
   89b0c:	685a      	ldr	r2, [r3, #4]
   89b0e:	68e1      	ldr	r1, [r4, #12]
   89b10:	e6a7      	b.n	89862 <_malloc_r+0x3e>
   89b12:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   89b16:	ea4f 2352 	mov.w	r3, r2, lsr #9
   89b1a:	d361      	bcc.n	89be0 <_malloc_r+0x3bc>
   89b1c:	2b14      	cmp	r3, #20
   89b1e:	f200 80ba 	bhi.w	89c96 <_malloc_r+0x472>
   89b22:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   89b26:	00c9      	lsls	r1, r1, #3
   89b28:	335b      	adds	r3, #91	; 0x5b
   89b2a:	eb08 0701 	add.w	r7, r8, r1
   89b2e:	f858 1001 	ldr.w	r1, [r8, r1]
   89b32:	3f08      	subs	r7, #8
   89b34:	428f      	cmp	r7, r1
   89b36:	f000 8092 	beq.w	89c5e <_malloc_r+0x43a>
   89b3a:	684b      	ldr	r3, [r1, #4]
   89b3c:	f023 0303 	bic.w	r3, r3, #3
   89b40:	4293      	cmp	r3, r2
   89b42:	d902      	bls.n	89b4a <_malloc_r+0x326>
   89b44:	6889      	ldr	r1, [r1, #8]
   89b46:	428f      	cmp	r7, r1
   89b48:	d1f7      	bne.n	89b3a <_malloc_r+0x316>
   89b4a:	68cf      	ldr	r7, [r1, #12]
   89b4c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   89b50:	e9c4 1702 	strd	r1, r7, [r4, #8]
   89b54:	60bc      	str	r4, [r7, #8]
   89b56:	60cc      	str	r4, [r1, #12]
   89b58:	e6eb      	b.n	89932 <_malloc_r+0x10e>
   89b5a:	2b14      	cmp	r3, #20
   89b5c:	d959      	bls.n	89c12 <_malloc_r+0x3ee>
   89b5e:	2b54      	cmp	r3, #84	; 0x54
   89b60:	f200 80a1 	bhi.w	89ca6 <_malloc_r+0x482>
   89b64:	0b2b      	lsrs	r3, r5, #12
   89b66:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   89b6a:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   89b6e:	00c1      	lsls	r1, r0, #3
   89b70:	e69e      	b.n	898b0 <_malloc_r+0x8c>
   89b72:	f10e 0e01 	add.w	lr, lr, #1
   89b76:	f01e 0f03 	tst.w	lr, #3
   89b7a:	f104 0408 	add.w	r4, r4, #8
   89b7e:	f47f aeea 	bne.w	89956 <_malloc_r+0x132>
   89b82:	e051      	b.n	89c28 <_malloc_r+0x404>
   89b84:	463c      	mov	r4, r7
   89b86:	443a      	add	r2, r7
   89b88:	6853      	ldr	r3, [r2, #4]
   89b8a:	68f9      	ldr	r1, [r7, #12]
   89b8c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   89b90:	f043 0301 	orr.w	r3, r3, #1
   89b94:	6053      	str	r3, [r2, #4]
   89b96:	4630      	mov	r0, r6
   89b98:	60e9      	str	r1, [r5, #12]
   89b9a:	608d      	str	r5, [r1, #8]
   89b9c:	f000 f9b6 	bl	89f0c <__malloc_unlock>
   89ba0:	e704      	b.n	899ac <_malloc_r+0x188>
   89ba2:	08e8      	lsrs	r0, r5, #3
   89ba4:	f105 0308 	add.w	r3, r5, #8
   89ba8:	e64c      	b.n	89844 <_malloc_r+0x20>
   89baa:	4422      	add	r2, r4
   89bac:	6853      	ldr	r3, [r2, #4]
   89bae:	4630      	mov	r0, r6
   89bb0:	f043 0301 	orr.w	r3, r3, #1
   89bb4:	6053      	str	r3, [r2, #4]
   89bb6:	3408      	adds	r4, #8
   89bb8:	f000 f9a8 	bl	89f0c <__malloc_unlock>
   89bbc:	e6f6      	b.n	899ac <_malloc_r+0x188>
   89bbe:	f045 0701 	orr.w	r7, r5, #1
   89bc2:	f043 0101 	orr.w	r1, r3, #1
   89bc6:	4425      	add	r5, r4
   89bc8:	6067      	str	r7, [r4, #4]
   89bca:	4630      	mov	r0, r6
   89bcc:	e9c8 5504 	strd	r5, r5, [r8, #16]
   89bd0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   89bd4:	6069      	str	r1, [r5, #4]
   89bd6:	50a3      	str	r3, [r4, r2]
   89bd8:	f000 f998 	bl	89f0c <__malloc_unlock>
   89bdc:	3408      	adds	r4, #8
   89bde:	e6e5      	b.n	899ac <_malloc_r+0x188>
   89be0:	0993      	lsrs	r3, r2, #6
   89be2:	f103 0139 	add.w	r1, r3, #57	; 0x39
   89be6:	00c9      	lsls	r1, r1, #3
   89be8:	3338      	adds	r3, #56	; 0x38
   89bea:	e79e      	b.n	89b2a <_malloc_r+0x306>
   89bec:	4544      	cmp	r4, r8
   89bee:	d064      	beq.n	89cba <_malloc_r+0x496>
   89bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89bf4:	6860      	ldr	r0, [r4, #4]
   89bf6:	f020 0b03 	bic.w	fp, r0, #3
   89bfa:	455d      	cmp	r5, fp
   89bfc:	ebab 0305 	sub.w	r3, fp, r5
   89c00:	d802      	bhi.n	89c08 <_malloc_r+0x3e4>
   89c02:	2b0f      	cmp	r3, #15
   89c04:	f73f af70 	bgt.w	89ae8 <_malloc_r+0x2c4>
   89c08:	4630      	mov	r0, r6
   89c0a:	f000 f97f 	bl	89f0c <__malloc_unlock>
   89c0e:	2400      	movs	r4, #0
   89c10:	e6cc      	b.n	899ac <_malloc_r+0x188>
   89c12:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   89c16:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   89c1a:	00c1      	lsls	r1, r0, #3
   89c1c:	e648      	b.n	898b0 <_malloc_r+0x8c>
   89c1e:	f859 3908 	ldr.w	r3, [r9], #-8
   89c22:	454b      	cmp	r3, r9
   89c24:	f040 80a9 	bne.w	89d7a <_malloc_r+0x556>
   89c28:	f010 0f03 	tst.w	r0, #3
   89c2c:	f100 30ff 	add.w	r0, r0, #4294967295
   89c30:	d1f5      	bne.n	89c1e <_malloc_r+0x3fa>
   89c32:	f8d8 3004 	ldr.w	r3, [r8, #4]
   89c36:	ea23 0301 	bic.w	r3, r3, r1
   89c3a:	f8c8 3004 	str.w	r3, [r8, #4]
   89c3e:	0049      	lsls	r1, r1, #1
   89c40:	4299      	cmp	r1, r3
   89c42:	f63f aecf 	bhi.w	899e4 <_malloc_r+0x1c0>
   89c46:	b919      	cbnz	r1, 89c50 <_malloc_r+0x42c>
   89c48:	e6cc      	b.n	899e4 <_malloc_r+0x1c0>
   89c4a:	0049      	lsls	r1, r1, #1
   89c4c:	f10e 0e04 	add.w	lr, lr, #4
   89c50:	4219      	tst	r1, r3
   89c52:	d0fa      	beq.n	89c4a <_malloc_r+0x426>
   89c54:	4670      	mov	r0, lr
   89c56:	e67a      	b.n	8994e <_malloc_r+0x12a>
   89c58:	f103 0b10 	add.w	fp, r3, #16
   89c5c:	e6df      	b.n	89a1e <_malloc_r+0x1fa>
   89c5e:	f04f 0e01 	mov.w	lr, #1
   89c62:	109a      	asrs	r2, r3, #2
   89c64:	f8d8 3004 	ldr.w	r3, [r8, #4]
   89c68:	fa0e f202 	lsl.w	r2, lr, r2
   89c6c:	431a      	orrs	r2, r3
   89c6e:	f8c8 2004 	str.w	r2, [r8, #4]
   89c72:	e76d      	b.n	89b50 <_malloc_r+0x32c>
   89c74:	eb02 010b 	add.w	r1, r2, fp
   89c78:	4249      	negs	r1, r1
   89c7a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   89c7e:	4649      	mov	r1, r9
   89c80:	4630      	mov	r0, r6
   89c82:	9200      	str	r2, [sp, #0]
   89c84:	f000 feec 	bl	8aa60 <_sbrk_r>
   89c88:	1c43      	adds	r3, r0, #1
   89c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
   89c8e:	f47f aefc 	bne.w	89a8a <_malloc_r+0x266>
   89c92:	46d1      	mov	r9, sl
   89c94:	e6fc      	b.n	89a90 <_malloc_r+0x26c>
   89c96:	2b54      	cmp	r3, #84	; 0x54
   89c98:	d826      	bhi.n	89ce8 <_malloc_r+0x4c4>
   89c9a:	0b13      	lsrs	r3, r2, #12
   89c9c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   89ca0:	00c9      	lsls	r1, r1, #3
   89ca2:	336e      	adds	r3, #110	; 0x6e
   89ca4:	e741      	b.n	89b2a <_malloc_r+0x306>
   89ca6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89caa:	d826      	bhi.n	89cfa <_malloc_r+0x4d6>
   89cac:	0beb      	lsrs	r3, r5, #15
   89cae:	f103 0078 	add.w	r0, r3, #120	; 0x78
   89cb2:	f103 0777 	add.w	r7, r3, #119	; 0x77
   89cb6:	00c1      	lsls	r1, r0, #3
   89cb8:	e5fa      	b.n	898b0 <_malloc_r+0x8c>
   89cba:	4b1a      	ldr	r3, [pc, #104]	; (89d24 <_malloc_r+0x500>)
   89cbc:	6818      	ldr	r0, [r3, #0]
   89cbe:	4458      	add	r0, fp
   89cc0:	6018      	str	r0, [r3, #0]
   89cc2:	e6be      	b.n	89a42 <_malloc_r+0x21e>
   89cc4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   89cc8:	f1bc 0f00 	cmp.w	ip, #0
   89ccc:	f47f aeb9 	bne.w	89a42 <_malloc_r+0x21e>
   89cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89cd4:	44bb      	add	fp, r7
   89cd6:	f04b 0001 	orr.w	r0, fp, #1
   89cda:	6060      	str	r0, [r4, #4]
   89cdc:	e6f9      	b.n	89ad2 <_malloc_r+0x2ae>
   89cde:	4614      	mov	r4, r2
   89ce0:	e6f7      	b.n	89ad2 <_malloc_r+0x2ae>
   89ce2:	2301      	movs	r3, #1
   89ce4:	6053      	str	r3, [r2, #4]
   89ce6:	e78f      	b.n	89c08 <_malloc_r+0x3e4>
   89ce8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89cec:	d832      	bhi.n	89d54 <_malloc_r+0x530>
   89cee:	0bd3      	lsrs	r3, r2, #15
   89cf0:	f103 0178 	add.w	r1, r3, #120	; 0x78
   89cf4:	00c9      	lsls	r1, r1, #3
   89cf6:	3377      	adds	r3, #119	; 0x77
   89cf8:	e717      	b.n	89b2a <_malloc_r+0x306>
   89cfa:	f240 5254 	movw	r2, #1364	; 0x554
   89cfe:	4293      	cmp	r3, r2
   89d00:	d832      	bhi.n	89d68 <_malloc_r+0x544>
   89d02:	0cab      	lsrs	r3, r5, #18
   89d04:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   89d08:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   89d0c:	00c1      	lsls	r1, r0, #3
   89d0e:	e5cf      	b.n	898b0 <_malloc_r+0x8c>
   89d10:	f1aa 0a08 	sub.w	sl, sl, #8
   89d14:	44d3      	add	fp, sl
   89d16:	f04f 0900 	mov.w	r9, #0
   89d1a:	ebab 0b02 	sub.w	fp, fp, r2
   89d1e:	e6b7      	b.n	89a90 <_malloc_r+0x26c>
   89d20:	2000148c 	.word	0x2000148c
   89d24:	2000145c 	.word	0x2000145c
   89d28:	20001484 	.word	0x20001484
   89d2c:	20001488 	.word	0x20001488
   89d30:	20000948 	.word	0x20000948
   89d34:	20000950 	.word	0x20000950
   89d38:	20000d50 	.word	0x20000d50
   89d3c:	f104 0108 	add.w	r1, r4, #8
   89d40:	4630      	mov	r0, r6
   89d42:	9300      	str	r3, [sp, #0]
   89d44:	f7ff fa3c 	bl	891c0 <_free_r>
   89d48:	f8d8 4008 	ldr.w	r4, [r8, #8]
   89d4c:	9b00      	ldr	r3, [sp, #0]
   89d4e:	6860      	ldr	r0, [r4, #4]
   89d50:	6819      	ldr	r1, [r3, #0]
   89d52:	e6be      	b.n	89ad2 <_malloc_r+0x2ae>
   89d54:	f240 5154 	movw	r1, #1364	; 0x554
   89d58:	428b      	cmp	r3, r1
   89d5a:	d80a      	bhi.n	89d72 <_malloc_r+0x54e>
   89d5c:	0c93      	lsrs	r3, r2, #18
   89d5e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   89d62:	00c9      	lsls	r1, r1, #3
   89d64:	337c      	adds	r3, #124	; 0x7c
   89d66:	e6e0      	b.n	89b2a <_malloc_r+0x306>
   89d68:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   89d6c:	207f      	movs	r0, #127	; 0x7f
   89d6e:	277e      	movs	r7, #126	; 0x7e
   89d70:	e59e      	b.n	898b0 <_malloc_r+0x8c>
   89d72:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   89d76:	237e      	movs	r3, #126	; 0x7e
   89d78:	e6d7      	b.n	89b2a <_malloc_r+0x306>
   89d7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   89d7e:	e75e      	b.n	89c3e <_malloc_r+0x41a>

00089d80 <__ascii_mbtowc>:
   89d80:	b082      	sub	sp, #8
   89d82:	b149      	cbz	r1, 89d98 <__ascii_mbtowc+0x18>
   89d84:	b15a      	cbz	r2, 89d9e <__ascii_mbtowc+0x1e>
   89d86:	b16b      	cbz	r3, 89da4 <__ascii_mbtowc+0x24>
   89d88:	7813      	ldrb	r3, [r2, #0]
   89d8a:	600b      	str	r3, [r1, #0]
   89d8c:	7812      	ldrb	r2, [r2, #0]
   89d8e:	1e10      	subs	r0, r2, #0
   89d90:	bf18      	it	ne
   89d92:	2001      	movne	r0, #1
   89d94:	b002      	add	sp, #8
   89d96:	4770      	bx	lr
   89d98:	a901      	add	r1, sp, #4
   89d9a:	2a00      	cmp	r2, #0
   89d9c:	d1f3      	bne.n	89d86 <__ascii_mbtowc+0x6>
   89d9e:	4610      	mov	r0, r2
   89da0:	b002      	add	sp, #8
   89da2:	4770      	bx	lr
   89da4:	f06f 0001 	mvn.w	r0, #1
   89da8:	e7f4      	b.n	89d94 <__ascii_mbtowc+0x14>
   89daa:	bf00      	nop

00089dac <memchr>:
   89dac:	b470      	push	{r4, r5, r6}
   89dae:	0784      	lsls	r4, r0, #30
   89db0:	b2cd      	uxtb	r5, r1
   89db2:	d012      	beq.n	89dda <memchr+0x2e>
   89db4:	4603      	mov	r3, r0
   89db6:	1e54      	subs	r4, r2, #1
   89db8:	b92a      	cbnz	r2, 89dc6 <memchr+0x1a>
   89dba:	e00b      	b.n	89dd4 <memchr+0x28>
   89dbc:	079a      	lsls	r2, r3, #30
   89dbe:	4618      	mov	r0, r3
   89dc0:	d00c      	beq.n	89ddc <memchr+0x30>
   89dc2:	3c01      	subs	r4, #1
   89dc4:	d306      	bcc.n	89dd4 <memchr+0x28>
   89dc6:	4618      	mov	r0, r3
   89dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
   89dcc:	42aa      	cmp	r2, r5
   89dce:	d1f5      	bne.n	89dbc <memchr+0x10>
   89dd0:	bc70      	pop	{r4, r5, r6}
   89dd2:	4770      	bx	lr
   89dd4:	2000      	movs	r0, #0
   89dd6:	bc70      	pop	{r4, r5, r6}
   89dd8:	4770      	bx	lr
   89dda:	4614      	mov	r4, r2
   89ddc:	2c03      	cmp	r4, #3
   89dde:	d80d      	bhi.n	89dfc <memchr+0x50>
   89de0:	2c00      	cmp	r4, #0
   89de2:	d0f7      	beq.n	89dd4 <memchr+0x28>
   89de4:	4602      	mov	r2, r0
   89de6:	1903      	adds	r3, r0, r4
   89de8:	e001      	b.n	89dee <memchr+0x42>
   89dea:	429a      	cmp	r2, r3
   89dec:	d0f2      	beq.n	89dd4 <memchr+0x28>
   89dee:	4610      	mov	r0, r2
   89df0:	f812 1b01 	ldrb.w	r1, [r2], #1
   89df4:	42a9      	cmp	r1, r5
   89df6:	d1f8      	bne.n	89dea <memchr+0x3e>
   89df8:	bc70      	pop	{r4, r5, r6}
   89dfa:	4770      	bx	lr
   89dfc:	4606      	mov	r6, r0
   89dfe:	020a      	lsls	r2, r1, #8
   89e00:	b292      	uxth	r2, r2
   89e02:	432a      	orrs	r2, r5
   89e04:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   89e08:	6833      	ldr	r3, [r6, #0]
   89e0a:	4630      	mov	r0, r6
   89e0c:	4053      	eors	r3, r2
   89e0e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   89e12:	ea21 0303 	bic.w	r3, r1, r3
   89e16:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   89e1a:	f106 0604 	add.w	r6, r6, #4
   89e1e:	d1e1      	bne.n	89de4 <memchr+0x38>
   89e20:	3c04      	subs	r4, #4
   89e22:	2c03      	cmp	r4, #3
   89e24:	4630      	mov	r0, r6
   89e26:	d8ef      	bhi.n	89e08 <memchr+0x5c>
   89e28:	e7da      	b.n	89de0 <memchr+0x34>
   89e2a:	bf00      	nop

00089e2c <memmove>:
   89e2c:	4288      	cmp	r0, r1
   89e2e:	b4f0      	push	{r4, r5, r6, r7}
   89e30:	d90d      	bls.n	89e4e <memmove+0x22>
   89e32:	188b      	adds	r3, r1, r2
   89e34:	4283      	cmp	r3, r0
   89e36:	d90a      	bls.n	89e4e <memmove+0x22>
   89e38:	1884      	adds	r4, r0, r2
   89e3a:	b132      	cbz	r2, 89e4a <memmove+0x1e>
   89e3c:	4622      	mov	r2, r4
   89e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   89e42:	4299      	cmp	r1, r3
   89e44:	f802 4d01 	strb.w	r4, [r2, #-1]!
   89e48:	d1f9      	bne.n	89e3e <memmove+0x12>
   89e4a:	bcf0      	pop	{r4, r5, r6, r7}
   89e4c:	4770      	bx	lr
   89e4e:	2a0f      	cmp	r2, #15
   89e50:	d80e      	bhi.n	89e70 <memmove+0x44>
   89e52:	4603      	mov	r3, r0
   89e54:	1e54      	subs	r4, r2, #1
   89e56:	2a00      	cmp	r2, #0
   89e58:	d0f7      	beq.n	89e4a <memmove+0x1e>
   89e5a:	3401      	adds	r4, #1
   89e5c:	440c      	add	r4, r1
   89e5e:	3b01      	subs	r3, #1
   89e60:	f811 2b01 	ldrb.w	r2, [r1], #1
   89e64:	42a1      	cmp	r1, r4
   89e66:	f803 2f01 	strb.w	r2, [r3, #1]!
   89e6a:	d1f9      	bne.n	89e60 <memmove+0x34>
   89e6c:	bcf0      	pop	{r4, r5, r6, r7}
   89e6e:	4770      	bx	lr
   89e70:	ea40 0301 	orr.w	r3, r0, r1
   89e74:	079b      	lsls	r3, r3, #30
   89e76:	d13e      	bne.n	89ef6 <memmove+0xca>
   89e78:	f1a2 0310 	sub.w	r3, r2, #16
   89e7c:	f023 040f 	bic.w	r4, r3, #15
   89e80:	f101 0720 	add.w	r7, r1, #32
   89e84:	4427      	add	r7, r4
   89e86:	091b      	lsrs	r3, r3, #4
   89e88:	f101 0410 	add.w	r4, r1, #16
   89e8c:	f100 0510 	add.w	r5, r0, #16
   89e90:	f854 6c10 	ldr.w	r6, [r4, #-16]
   89e94:	3410      	adds	r4, #16
   89e96:	f845 6c10 	str.w	r6, [r5, #-16]
   89e9a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   89e9e:	3510      	adds	r5, #16
   89ea0:	f845 6c1c 	str.w	r6, [r5, #-28]
   89ea4:	f854 6c18 	ldr.w	r6, [r4, #-24]
   89ea8:	f845 6c18 	str.w	r6, [r5, #-24]
   89eac:	f854 6c14 	ldr.w	r6, [r4, #-20]
   89eb0:	42bc      	cmp	r4, r7
   89eb2:	f845 6c14 	str.w	r6, [r5, #-20]
   89eb6:	d1eb      	bne.n	89e90 <memmove+0x64>
   89eb8:	3301      	adds	r3, #1
   89eba:	f012 0f0c 	tst.w	r2, #12
   89ebe:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   89ec2:	f002 040f 	and.w	r4, r2, #15
   89ec6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   89eca:	d017      	beq.n	89efc <memmove+0xd0>
   89ecc:	460e      	mov	r6, r1
   89ece:	3c04      	subs	r4, #4
   89ed0:	f024 0c03 	bic.w	ip, r4, #3
   89ed4:	08a5      	lsrs	r5, r4, #2
   89ed6:	449c      	add	ip, r3
   89ed8:	1f1c      	subs	r4, r3, #4
   89eda:	f856 7b04 	ldr.w	r7, [r6], #4
   89ede:	f844 7f04 	str.w	r7, [r4, #4]!
   89ee2:	4564      	cmp	r4, ip
   89ee4:	d1f9      	bne.n	89eda <memmove+0xae>
   89ee6:	1c6c      	adds	r4, r5, #1
   89ee8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   89eec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   89ef0:	f002 0203 	and.w	r2, r2, #3
   89ef4:	e7ae      	b.n	89e54 <memmove+0x28>
   89ef6:	4603      	mov	r3, r0
   89ef8:	1e54      	subs	r4, r2, #1
   89efa:	e7ae      	b.n	89e5a <memmove+0x2e>
   89efc:	4622      	mov	r2, r4
   89efe:	e7a9      	b.n	89e54 <memmove+0x28>

00089f00 <__malloc_lock>:
   89f00:	4801      	ldr	r0, [pc, #4]	; (89f08 <__malloc_lock+0x8>)
   89f02:	f7ff bc0b 	b.w	8971c <__retarget_lock_acquire_recursive>
   89f06:	bf00      	nop
   89f08:	20001c24 	.word	0x20001c24

00089f0c <__malloc_unlock>:
   89f0c:	4801      	ldr	r0, [pc, #4]	; (89f14 <__malloc_unlock+0x8>)
   89f0e:	f7ff bc07 	b.w	89720 <__retarget_lock_release_recursive>
   89f12:	bf00      	nop
   89f14:	20001c24 	.word	0x20001c24

00089f18 <_Balloc>:
   89f18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89f1a:	b570      	push	{r4, r5, r6, lr}
   89f1c:	4605      	mov	r5, r0
   89f1e:	460c      	mov	r4, r1
   89f20:	b14b      	cbz	r3, 89f36 <_Balloc+0x1e>
   89f22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   89f26:	b180      	cbz	r0, 89f4a <_Balloc+0x32>
   89f28:	6802      	ldr	r2, [r0, #0]
   89f2a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   89f2e:	2300      	movs	r3, #0
   89f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
   89f34:	bd70      	pop	{r4, r5, r6, pc}
   89f36:	2221      	movs	r2, #33	; 0x21
   89f38:	2104      	movs	r1, #4
   89f3a:	f000 ffc5 	bl	8aec8 <_calloc_r>
   89f3e:	4603      	mov	r3, r0
   89f40:	64e8      	str	r0, [r5, #76]	; 0x4c
   89f42:	2800      	cmp	r0, #0
   89f44:	d1ed      	bne.n	89f22 <_Balloc+0xa>
   89f46:	2000      	movs	r0, #0
   89f48:	bd70      	pop	{r4, r5, r6, pc}
   89f4a:	2101      	movs	r1, #1
   89f4c:	fa01 f604 	lsl.w	r6, r1, r4
   89f50:	1d72      	adds	r2, r6, #5
   89f52:	4628      	mov	r0, r5
   89f54:	0092      	lsls	r2, r2, #2
   89f56:	f000 ffb7 	bl	8aec8 <_calloc_r>
   89f5a:	2800      	cmp	r0, #0
   89f5c:	d0f3      	beq.n	89f46 <_Balloc+0x2e>
   89f5e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   89f62:	e7e4      	b.n	89f2e <_Balloc+0x16>

00089f64 <_Bfree>:
   89f64:	b131      	cbz	r1, 89f74 <_Bfree+0x10>
   89f66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89f68:	684a      	ldr	r2, [r1, #4]
   89f6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   89f6e:	6008      	str	r0, [r1, #0]
   89f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   89f74:	4770      	bx	lr
   89f76:	bf00      	nop

00089f78 <__multadd>:
   89f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89f7c:	4680      	mov	r8, r0
   89f7e:	461c      	mov	r4, r3
   89f80:	2000      	movs	r0, #0
   89f82:	460f      	mov	r7, r1
   89f84:	690e      	ldr	r6, [r1, #16]
   89f86:	3114      	adds	r1, #20
   89f88:	680d      	ldr	r5, [r1, #0]
   89f8a:	3001      	adds	r0, #1
   89f8c:	b2ab      	uxth	r3, r5
   89f8e:	fb02 4303 	mla	r3, r2, r3, r4
   89f92:	0c2c      	lsrs	r4, r5, #16
   89f94:	0c1d      	lsrs	r5, r3, #16
   89f96:	fb02 5404 	mla	r4, r2, r4, r5
   89f9a:	b29b      	uxth	r3, r3
   89f9c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   89fa0:	4286      	cmp	r6, r0
   89fa2:	f841 3b04 	str.w	r3, [r1], #4
   89fa6:	ea4f 4414 	mov.w	r4, r4, lsr #16
   89faa:	dced      	bgt.n	89f88 <__multadd+0x10>
   89fac:	b13c      	cbz	r4, 89fbe <__multadd+0x46>
   89fae:	68bb      	ldr	r3, [r7, #8]
   89fb0:	42b3      	cmp	r3, r6
   89fb2:	dd07      	ble.n	89fc4 <__multadd+0x4c>
   89fb4:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   89fb8:	3601      	adds	r6, #1
   89fba:	615c      	str	r4, [r3, #20]
   89fbc:	613e      	str	r6, [r7, #16]
   89fbe:	4638      	mov	r0, r7
   89fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89fc4:	6879      	ldr	r1, [r7, #4]
   89fc6:	4640      	mov	r0, r8
   89fc8:	3101      	adds	r1, #1
   89fca:	f7ff ffa5 	bl	89f18 <_Balloc>
   89fce:	4605      	mov	r5, r0
   89fd0:	b1b0      	cbz	r0, 8a000 <__multadd+0x88>
   89fd2:	693a      	ldr	r2, [r7, #16]
   89fd4:	f107 010c 	add.w	r1, r7, #12
   89fd8:	3202      	adds	r2, #2
   89fda:	0092      	lsls	r2, r2, #2
   89fdc:	300c      	adds	r0, #12
   89fde:	f7fa ffed 	bl	84fbc <memcpy>
   89fe2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   89fe6:	687a      	ldr	r2, [r7, #4]
   89fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89fec:	6039      	str	r1, [r7, #0]
   89fee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   89ff2:	462f      	mov	r7, r5
   89ff4:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   89ff8:	3601      	adds	r6, #1
   89ffa:	615c      	str	r4, [r3, #20]
   89ffc:	613e      	str	r6, [r7, #16]
   89ffe:	e7de      	b.n	89fbe <__multadd+0x46>
   8a000:	4602      	mov	r2, r0
   8a002:	21b5      	movs	r1, #181	; 0xb5
   8a004:	4b01      	ldr	r3, [pc, #4]	; (8a00c <__multadd+0x94>)
   8a006:	4802      	ldr	r0, [pc, #8]	; (8a010 <__multadd+0x98>)
   8a008:	f000 ff40 	bl	8ae8c <__assert_func>
   8a00c:	0008bf84 	.word	0x0008bf84
   8a010:	0008c024 	.word	0x0008c024

0008a014 <__hi0bits>:
   8a014:	0c02      	lsrs	r2, r0, #16
   8a016:	0412      	lsls	r2, r2, #16
   8a018:	4603      	mov	r3, r0
   8a01a:	b9ca      	cbnz	r2, 8a050 <__hi0bits+0x3c>
   8a01c:	0403      	lsls	r3, r0, #16
   8a01e:	2010      	movs	r0, #16
   8a020:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8a024:	bf04      	itt	eq
   8a026:	021b      	lsleq	r3, r3, #8
   8a028:	3008      	addeq	r0, #8
   8a02a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8a02e:	bf04      	itt	eq
   8a030:	011b      	lsleq	r3, r3, #4
   8a032:	3004      	addeq	r0, #4
   8a034:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8a038:	bf04      	itt	eq
   8a03a:	009b      	lsleq	r3, r3, #2
   8a03c:	3002      	addeq	r0, #2
   8a03e:	2b00      	cmp	r3, #0
   8a040:	db05      	blt.n	8a04e <__hi0bits+0x3a>
   8a042:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8a046:	f100 0001 	add.w	r0, r0, #1
   8a04a:	bf08      	it	eq
   8a04c:	2020      	moveq	r0, #32
   8a04e:	4770      	bx	lr
   8a050:	2000      	movs	r0, #0
   8a052:	e7e5      	b.n	8a020 <__hi0bits+0xc>

0008a054 <__lo0bits>:
   8a054:	6803      	ldr	r3, [r0, #0]
   8a056:	4601      	mov	r1, r0
   8a058:	f013 0207 	ands.w	r2, r3, #7
   8a05c:	d007      	beq.n	8a06e <__lo0bits+0x1a>
   8a05e:	07da      	lsls	r2, r3, #31
   8a060:	d420      	bmi.n	8a0a4 <__lo0bits+0x50>
   8a062:	0798      	lsls	r0, r3, #30
   8a064:	d522      	bpl.n	8a0ac <__lo0bits+0x58>
   8a066:	085b      	lsrs	r3, r3, #1
   8a068:	2001      	movs	r0, #1
   8a06a:	600b      	str	r3, [r1, #0]
   8a06c:	4770      	bx	lr
   8a06e:	b298      	uxth	r0, r3
   8a070:	b1a8      	cbz	r0, 8a09e <__lo0bits+0x4a>
   8a072:	4610      	mov	r0, r2
   8a074:	f013 0fff 	tst.w	r3, #255	; 0xff
   8a078:	bf04      	itt	eq
   8a07a:	0a1b      	lsreq	r3, r3, #8
   8a07c:	3008      	addeq	r0, #8
   8a07e:	071a      	lsls	r2, r3, #28
   8a080:	bf04      	itt	eq
   8a082:	091b      	lsreq	r3, r3, #4
   8a084:	3004      	addeq	r0, #4
   8a086:	079a      	lsls	r2, r3, #30
   8a088:	bf04      	itt	eq
   8a08a:	089b      	lsreq	r3, r3, #2
   8a08c:	3002      	addeq	r0, #2
   8a08e:	07da      	lsls	r2, r3, #31
   8a090:	d403      	bmi.n	8a09a <__lo0bits+0x46>
   8a092:	085b      	lsrs	r3, r3, #1
   8a094:	f100 0001 	add.w	r0, r0, #1
   8a098:	d006      	beq.n	8a0a8 <__lo0bits+0x54>
   8a09a:	600b      	str	r3, [r1, #0]
   8a09c:	4770      	bx	lr
   8a09e:	2010      	movs	r0, #16
   8a0a0:	0c1b      	lsrs	r3, r3, #16
   8a0a2:	e7e7      	b.n	8a074 <__lo0bits+0x20>
   8a0a4:	2000      	movs	r0, #0
   8a0a6:	4770      	bx	lr
   8a0a8:	2020      	movs	r0, #32
   8a0aa:	4770      	bx	lr
   8a0ac:	089b      	lsrs	r3, r3, #2
   8a0ae:	2002      	movs	r0, #2
   8a0b0:	600b      	str	r3, [r1, #0]
   8a0b2:	4770      	bx	lr

0008a0b4 <__i2b>:
   8a0b4:	b510      	push	{r4, lr}
   8a0b6:	460c      	mov	r4, r1
   8a0b8:	2101      	movs	r1, #1
   8a0ba:	f7ff ff2d 	bl	89f18 <_Balloc>
   8a0be:	4602      	mov	r2, r0
   8a0c0:	b118      	cbz	r0, 8a0ca <__i2b+0x16>
   8a0c2:	2301      	movs	r3, #1
   8a0c4:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8a0c8:	bd10      	pop	{r4, pc}
   8a0ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a0ce:	4b02      	ldr	r3, [pc, #8]	; (8a0d8 <__i2b+0x24>)
   8a0d0:	4802      	ldr	r0, [pc, #8]	; (8a0dc <__i2b+0x28>)
   8a0d2:	f000 fedb 	bl	8ae8c <__assert_func>
   8a0d6:	bf00      	nop
   8a0d8:	0008bf84 	.word	0x0008bf84
   8a0dc:	0008c024 	.word	0x0008c024

0008a0e0 <__multiply>:
   8a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a0e4:	690d      	ldr	r5, [r1, #16]
   8a0e6:	6917      	ldr	r7, [r2, #16]
   8a0e8:	460e      	mov	r6, r1
   8a0ea:	42bd      	cmp	r5, r7
   8a0ec:	4614      	mov	r4, r2
   8a0ee:	b085      	sub	sp, #20
   8a0f0:	db05      	blt.n	8a0fe <__multiply+0x1e>
   8a0f2:	463a      	mov	r2, r7
   8a0f4:	4623      	mov	r3, r4
   8a0f6:	462f      	mov	r7, r5
   8a0f8:	460c      	mov	r4, r1
   8a0fa:	4615      	mov	r5, r2
   8a0fc:	461e      	mov	r6, r3
   8a0fe:	68a3      	ldr	r3, [r4, #8]
   8a100:	6861      	ldr	r1, [r4, #4]
   8a102:	eb07 0805 	add.w	r8, r7, r5
   8a106:	4543      	cmp	r3, r8
   8a108:	bfb8      	it	lt
   8a10a:	3101      	addlt	r1, #1
   8a10c:	f7ff ff04 	bl	89f18 <_Balloc>
   8a110:	9001      	str	r0, [sp, #4]
   8a112:	2800      	cmp	r0, #0
   8a114:	f000 8088 	beq.w	8a228 <__multiply+0x148>
   8a118:	9b01      	ldr	r3, [sp, #4]
   8a11a:	f103 0914 	add.w	r9, r3, #20
   8a11e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8a122:	45d1      	cmp	r9, sl
   8a124:	d205      	bcs.n	8a132 <__multiply+0x52>
   8a126:	464b      	mov	r3, r9
   8a128:	2200      	movs	r2, #0
   8a12a:	f843 2b04 	str.w	r2, [r3], #4
   8a12e:	459a      	cmp	sl, r3
   8a130:	d8fb      	bhi.n	8a12a <__multiply+0x4a>
   8a132:	f106 0e14 	add.w	lr, r6, #20
   8a136:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8a13a:	f104 0314 	add.w	r3, r4, #20
   8a13e:	45de      	cmp	lr, fp
   8a140:	461a      	mov	r2, r3
   8a142:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8a146:	d23e      	bcs.n	8a1c6 <__multiply+0xe6>
   8a148:	1b3b      	subs	r3, r7, r4
   8a14a:	3b15      	subs	r3, #21
   8a14c:	f023 0303 	bic.w	r3, r3, #3
   8a150:	3304      	adds	r3, #4
   8a152:	3415      	adds	r4, #21
   8a154:	42a7      	cmp	r7, r4
   8a156:	bf38      	it	cc
   8a158:	2304      	movcc	r3, #4
   8a15a:	e9cd a802 	strd	sl, r8, [sp, #8]
   8a15e:	4698      	mov	r8, r3
   8a160:	4692      	mov	sl, r2
   8a162:	e003      	b.n	8a16c <__multiply+0x8c>
   8a164:	45f3      	cmp	fp, lr
   8a166:	f109 0904 	add.w	r9, r9, #4
   8a16a:	d92a      	bls.n	8a1c2 <__multiply+0xe2>
   8a16c:	f85e 0b04 	ldr.w	r0, [lr], #4
   8a170:	b286      	uxth	r6, r0
   8a172:	2e00      	cmp	r6, #0
   8a174:	d138      	bne.n	8a1e8 <__multiply+0x108>
   8a176:	0c00      	lsrs	r0, r0, #16
   8a178:	d0f4      	beq.n	8a164 <__multiply+0x84>
   8a17a:	f8d9 3000 	ldr.w	r3, [r9]
   8a17e:	4654      	mov	r4, sl
   8a180:	461e      	mov	r6, r3
   8a182:	464d      	mov	r5, r9
   8a184:	f04f 0c00 	mov.w	ip, #0
   8a188:	8822      	ldrh	r2, [r4, #0]
   8a18a:	0c36      	lsrs	r6, r6, #16
   8a18c:	fb00 6602 	mla	r6, r0, r2, r6
   8a190:	b29b      	uxth	r3, r3
   8a192:	44b4      	add	ip, r6
   8a194:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8a198:	f845 3b04 	str.w	r3, [r5], #4
   8a19c:	f854 3b04 	ldr.w	r3, [r4], #4
   8a1a0:	682e      	ldr	r6, [r5, #0]
   8a1a2:	0c1b      	lsrs	r3, r3, #16
   8a1a4:	b2b2      	uxth	r2, r6
   8a1a6:	fb00 2303 	mla	r3, r0, r3, r2
   8a1aa:	42a7      	cmp	r7, r4
   8a1ac:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8a1b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8a1b4:	d8e8      	bhi.n	8a188 <__multiply+0xa8>
   8a1b6:	45f3      	cmp	fp, lr
   8a1b8:	f849 3008 	str.w	r3, [r9, r8]
   8a1bc:	f109 0904 	add.w	r9, r9, #4
   8a1c0:	d8d4      	bhi.n	8a16c <__multiply+0x8c>
   8a1c2:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8a1c6:	f1b8 0f00 	cmp.w	r8, #0
   8a1ca:	dc03      	bgt.n	8a1d4 <__multiply+0xf4>
   8a1cc:	e006      	b.n	8a1dc <__multiply+0xfc>
   8a1ce:	f1b8 0801 	subs.w	r8, r8, #1
   8a1d2:	d003      	beq.n	8a1dc <__multiply+0xfc>
   8a1d4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8a1d8:	2b00      	cmp	r3, #0
   8a1da:	d0f8      	beq.n	8a1ce <__multiply+0xee>
   8a1dc:	9801      	ldr	r0, [sp, #4]
   8a1de:	f8c0 8010 	str.w	r8, [r0, #16]
   8a1e2:	b005      	add	sp, #20
   8a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a1e8:	4655      	mov	r5, sl
   8a1ea:	464c      	mov	r4, r9
   8a1ec:	2300      	movs	r3, #0
   8a1ee:	f855 1b04 	ldr.w	r1, [r5], #4
   8a1f2:	6820      	ldr	r0, [r4, #0]
   8a1f4:	b28a      	uxth	r2, r1
   8a1f6:	fa1f fc80 	uxth.w	ip, r0
   8a1fa:	fb06 c202 	mla	r2, r6, r2, ip
   8a1fe:	0c09      	lsrs	r1, r1, #16
   8a200:	0c00      	lsrs	r0, r0, #16
   8a202:	fb06 0101 	mla	r1, r6, r1, r0
   8a206:	4413      	add	r3, r2
   8a208:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8a20c:	b29b      	uxth	r3, r3
   8a20e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a212:	42af      	cmp	r7, r5
   8a214:	f844 3b04 	str.w	r3, [r4], #4
   8a218:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8a21c:	d8e7      	bhi.n	8a1ee <__multiply+0x10e>
   8a21e:	f849 3008 	str.w	r3, [r9, r8]
   8a222:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8a226:	e7a6      	b.n	8a176 <__multiply+0x96>
   8a228:	4602      	mov	r2, r0
   8a22a:	f240 115d 	movw	r1, #349	; 0x15d
   8a22e:	4b02      	ldr	r3, [pc, #8]	; (8a238 <__multiply+0x158>)
   8a230:	4802      	ldr	r0, [pc, #8]	; (8a23c <__multiply+0x15c>)
   8a232:	f000 fe2b 	bl	8ae8c <__assert_func>
   8a236:	bf00      	nop
   8a238:	0008bf84 	.word	0x0008bf84
   8a23c:	0008c024 	.word	0x0008c024

0008a240 <__pow5mult>:
   8a240:	f012 0303 	ands.w	r3, r2, #3
   8a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a248:	4614      	mov	r4, r2
   8a24a:	4607      	mov	r7, r0
   8a24c:	d12e      	bne.n	8a2ac <__pow5mult+0x6c>
   8a24e:	460e      	mov	r6, r1
   8a250:	10a4      	asrs	r4, r4, #2
   8a252:	d01c      	beq.n	8a28e <__pow5mult+0x4e>
   8a254:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8a256:	b395      	cbz	r5, 8a2be <__pow5mult+0x7e>
   8a258:	07e3      	lsls	r3, r4, #31
   8a25a:	f04f 0800 	mov.w	r8, #0
   8a25e:	d406      	bmi.n	8a26e <__pow5mult+0x2e>
   8a260:	1064      	asrs	r4, r4, #1
   8a262:	d014      	beq.n	8a28e <__pow5mult+0x4e>
   8a264:	6828      	ldr	r0, [r5, #0]
   8a266:	b1a8      	cbz	r0, 8a294 <__pow5mult+0x54>
   8a268:	4605      	mov	r5, r0
   8a26a:	07e3      	lsls	r3, r4, #31
   8a26c:	d5f8      	bpl.n	8a260 <__pow5mult+0x20>
   8a26e:	462a      	mov	r2, r5
   8a270:	4631      	mov	r1, r6
   8a272:	4638      	mov	r0, r7
   8a274:	f7ff ff34 	bl	8a0e0 <__multiply>
   8a278:	b1b6      	cbz	r6, 8a2a8 <__pow5mult+0x68>
   8a27a:	6871      	ldr	r1, [r6, #4]
   8a27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a27e:	1064      	asrs	r4, r4, #1
   8a280:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8a284:	6032      	str	r2, [r6, #0]
   8a286:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8a28a:	4606      	mov	r6, r0
   8a28c:	d1ea      	bne.n	8a264 <__pow5mult+0x24>
   8a28e:	4630      	mov	r0, r6
   8a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a294:	462a      	mov	r2, r5
   8a296:	4629      	mov	r1, r5
   8a298:	4638      	mov	r0, r7
   8a29a:	f7ff ff21 	bl	8a0e0 <__multiply>
   8a29e:	6028      	str	r0, [r5, #0]
   8a2a0:	4605      	mov	r5, r0
   8a2a2:	f8c0 8000 	str.w	r8, [r0]
   8a2a6:	e7e0      	b.n	8a26a <__pow5mult+0x2a>
   8a2a8:	4606      	mov	r6, r0
   8a2aa:	e7d9      	b.n	8a260 <__pow5mult+0x20>
   8a2ac:	4a09      	ldr	r2, [pc, #36]	; (8a2d4 <__pow5mult+0x94>)
   8a2ae:	3b01      	subs	r3, #1
   8a2b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a2b4:	2300      	movs	r3, #0
   8a2b6:	f7ff fe5f 	bl	89f78 <__multadd>
   8a2ba:	4606      	mov	r6, r0
   8a2bc:	e7c8      	b.n	8a250 <__pow5mult+0x10>
   8a2be:	f240 2171 	movw	r1, #625	; 0x271
   8a2c2:	4638      	mov	r0, r7
   8a2c4:	f7ff fef6 	bl	8a0b4 <__i2b>
   8a2c8:	2300      	movs	r3, #0
   8a2ca:	64b8      	str	r0, [r7, #72]	; 0x48
   8a2cc:	4605      	mov	r5, r0
   8a2ce:	6003      	str	r3, [r0, #0]
   8a2d0:	e7c2      	b.n	8a258 <__pow5mult+0x18>
   8a2d2:	bf00      	nop
   8a2d4:	0008c198 	.word	0x0008c198

0008a2d8 <__lshift>:
   8a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a2dc:	690f      	ldr	r7, [r1, #16]
   8a2de:	688b      	ldr	r3, [r1, #8]
   8a2e0:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8a2e4:	1c7e      	adds	r6, r7, #1
   8a2e6:	429e      	cmp	r6, r3
   8a2e8:	460d      	mov	r5, r1
   8a2ea:	4691      	mov	r9, r2
   8a2ec:	4680      	mov	r8, r0
   8a2ee:	6849      	ldr	r1, [r1, #4]
   8a2f0:	ea4f 1462 	mov.w	r4, r2, asr #5
   8a2f4:	dd04      	ble.n	8a300 <__lshift+0x28>
   8a2f6:	005b      	lsls	r3, r3, #1
   8a2f8:	429e      	cmp	r6, r3
   8a2fa:	f101 0101 	add.w	r1, r1, #1
   8a2fe:	dcfa      	bgt.n	8a2f6 <__lshift+0x1e>
   8a300:	4640      	mov	r0, r8
   8a302:	f7ff fe09 	bl	89f18 <_Balloc>
   8a306:	2800      	cmp	r0, #0
   8a308:	d04f      	beq.n	8a3aa <__lshift+0xd2>
   8a30a:	2c00      	cmp	r4, #0
   8a30c:	f100 0114 	add.w	r1, r0, #20
   8a310:	dd0d      	ble.n	8a32e <__lshift+0x56>
   8a312:	460b      	mov	r3, r1
   8a314:	2200      	movs	r2, #0
   8a316:	3405      	adds	r4, #5
   8a318:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8a31c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8a320:	f843 2b04 	str.w	r2, [r3], #4
   8a324:	42a3      	cmp	r3, r4
   8a326:	d1fb      	bne.n	8a320 <__lshift+0x48>
   8a328:	f1ac 0314 	sub.w	r3, ip, #20
   8a32c:	4419      	add	r1, r3
   8a32e:	692c      	ldr	r4, [r5, #16]
   8a330:	f105 0314 	add.w	r3, r5, #20
   8a334:	f019 091f 	ands.w	r9, r9, #31
   8a338:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8a33c:	d02d      	beq.n	8a39a <__lshift+0xc2>
   8a33e:	468e      	mov	lr, r1
   8a340:	f04f 0a00 	mov.w	sl, #0
   8a344:	f1c9 0220 	rsb	r2, r9, #32
   8a348:	681c      	ldr	r4, [r3, #0]
   8a34a:	fa04 f409 	lsl.w	r4, r4, r9
   8a34e:	ea44 040a 	orr.w	r4, r4, sl
   8a352:	f84e 4b04 	str.w	r4, [lr], #4
   8a356:	f853 4b04 	ldr.w	r4, [r3], #4
   8a35a:	459c      	cmp	ip, r3
   8a35c:	fa24 fa02 	lsr.w	sl, r4, r2
   8a360:	d8f2      	bhi.n	8a348 <__lshift+0x70>
   8a362:	ebac 0305 	sub.w	r3, ip, r5
   8a366:	3b15      	subs	r3, #21
   8a368:	f023 0303 	bic.w	r3, r3, #3
   8a36c:	3304      	adds	r3, #4
   8a36e:	f105 0215 	add.w	r2, r5, #21
   8a372:	4594      	cmp	ip, r2
   8a374:	bf38      	it	cc
   8a376:	2304      	movcc	r3, #4
   8a378:	f1ba 0f00 	cmp.w	sl, #0
   8a37c:	bf18      	it	ne
   8a37e:	4637      	movne	r7, r6
   8a380:	f841 a003 	str.w	sl, [r1, r3]
   8a384:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8a388:	686a      	ldr	r2, [r5, #4]
   8a38a:	6107      	str	r7, [r0, #16]
   8a38c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a390:	6029      	str	r1, [r5, #0]
   8a392:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8a396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a39a:	3904      	subs	r1, #4
   8a39c:	f853 2b04 	ldr.w	r2, [r3], #4
   8a3a0:	459c      	cmp	ip, r3
   8a3a2:	f841 2f04 	str.w	r2, [r1, #4]!
   8a3a6:	d8f9      	bhi.n	8a39c <__lshift+0xc4>
   8a3a8:	e7ec      	b.n	8a384 <__lshift+0xac>
   8a3aa:	4602      	mov	r2, r0
   8a3ac:	f240 11d9 	movw	r1, #473	; 0x1d9
   8a3b0:	4b01      	ldr	r3, [pc, #4]	; (8a3b8 <__lshift+0xe0>)
   8a3b2:	4802      	ldr	r0, [pc, #8]	; (8a3bc <__lshift+0xe4>)
   8a3b4:	f000 fd6a 	bl	8ae8c <__assert_func>
   8a3b8:	0008bf84 	.word	0x0008bf84
   8a3bc:	0008c024 	.word	0x0008c024

0008a3c0 <__mcmp>:
   8a3c0:	b430      	push	{r4, r5}
   8a3c2:	690b      	ldr	r3, [r1, #16]
   8a3c4:	4605      	mov	r5, r0
   8a3c6:	6900      	ldr	r0, [r0, #16]
   8a3c8:	1ac0      	subs	r0, r0, r3
   8a3ca:	d111      	bne.n	8a3f0 <__mcmp+0x30>
   8a3cc:	3514      	adds	r5, #20
   8a3ce:	3114      	adds	r1, #20
   8a3d0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8a3d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8a3d8:	e001      	b.n	8a3de <__mcmp+0x1e>
   8a3da:	429d      	cmp	r5, r3
   8a3dc:	d208      	bcs.n	8a3f0 <__mcmp+0x30>
   8a3de:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8a3e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8a3e6:	428c      	cmp	r4, r1
   8a3e8:	d0f7      	beq.n	8a3da <__mcmp+0x1a>
   8a3ea:	d203      	bcs.n	8a3f4 <__mcmp+0x34>
   8a3ec:	f04f 30ff 	mov.w	r0, #4294967295
   8a3f0:	bc30      	pop	{r4, r5}
   8a3f2:	4770      	bx	lr
   8a3f4:	2001      	movs	r0, #1
   8a3f6:	bc30      	pop	{r4, r5}
   8a3f8:	4770      	bx	lr
   8a3fa:	bf00      	nop

0008a3fc <__mdiff>:
   8a3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a400:	690b      	ldr	r3, [r1, #16]
   8a402:	460c      	mov	r4, r1
   8a404:	6911      	ldr	r1, [r2, #16]
   8a406:	4690      	mov	r8, r2
   8a408:	eba3 0b01 	sub.w	fp, r3, r1
   8a40c:	f1bb 0f00 	cmp.w	fp, #0
   8a410:	d17c      	bne.n	8a50c <__mdiff+0x110>
   8a412:	f104 0614 	add.w	r6, r4, #20
   8a416:	3214      	adds	r2, #20
   8a418:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8a41c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8a420:	e001      	b.n	8a426 <__mdiff+0x2a>
   8a422:	429e      	cmp	r6, r3
   8a424:	d276      	bcs.n	8a514 <__mdiff+0x118>
   8a426:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8a42a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8a42e:	428d      	cmp	r5, r1
   8a430:	d0f7      	beq.n	8a422 <__mdiff+0x26>
   8a432:	d365      	bcc.n	8a500 <__mdiff+0x104>
   8a434:	6861      	ldr	r1, [r4, #4]
   8a436:	f7ff fd6f 	bl	89f18 <_Balloc>
   8a43a:	2800      	cmp	r0, #0
   8a43c:	d074      	beq.n	8a528 <__mdiff+0x12c>
   8a43e:	f100 0614 	add.w	r6, r0, #20
   8a442:	46b4      	mov	ip, r6
   8a444:	2300      	movs	r3, #0
   8a446:	6927      	ldr	r7, [r4, #16]
   8a448:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8a44c:	f104 0a14 	add.w	sl, r4, #20
   8a450:	f108 0514 	add.w	r5, r8, #20
   8a454:	f8c0 b00c 	str.w	fp, [r0, #12]
   8a458:	3410      	adds	r4, #16
   8a45a:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8a45e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8a462:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8a466:	f855 bb04 	ldr.w	fp, [r5], #4
   8a46a:	b291      	uxth	r1, r2
   8a46c:	440b      	add	r3, r1
   8a46e:	fa1f f18b 	uxth.w	r1, fp
   8a472:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8a476:	1a59      	subs	r1, r3, r1
   8a478:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8a47c:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8a480:	b289      	uxth	r1, r1
   8a482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8a486:	45a9      	cmp	r9, r5
   8a488:	f84c 1b04 	str.w	r1, [ip], #4
   8a48c:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a490:	d8e7      	bhi.n	8a462 <__mdiff+0x66>
   8a492:	eba9 0208 	sub.w	r2, r9, r8
   8a496:	3a15      	subs	r2, #21
   8a498:	f108 0815 	add.w	r8, r8, #21
   8a49c:	45c1      	cmp	r9, r8
   8a49e:	f022 0403 	bic.w	r4, r2, #3
   8a4a2:	f104 0404 	add.w	r4, r4, #4
   8a4a6:	bf38      	it	cc
   8a4a8:	2404      	movcc	r4, #4
   8a4aa:	f022 0203 	bic.w	r2, r2, #3
   8a4ae:	bf38      	it	cc
   8a4b0:	2200      	movcc	r2, #0
   8a4b2:	44a2      	add	sl, r4
   8a4b4:	45d6      	cmp	lr, sl
   8a4b6:	4434      	add	r4, r6
   8a4b8:	4416      	add	r6, r2
   8a4ba:	d918      	bls.n	8a4ee <__mdiff+0xf2>
   8a4bc:	4625      	mov	r5, r4
   8a4be:	4652      	mov	r2, sl
   8a4c0:	f852 6b04 	ldr.w	r6, [r2], #4
   8a4c4:	b2b1      	uxth	r1, r6
   8a4c6:	4419      	add	r1, r3
   8a4c8:	140b      	asrs	r3, r1, #16
   8a4ca:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8a4ce:	b289      	uxth	r1, r1
   8a4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8a4d4:	4596      	cmp	lr, r2
   8a4d6:	f845 1b04 	str.w	r1, [r5], #4
   8a4da:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a4de:	d8ef      	bhi.n	8a4c0 <__mdiff+0xc4>
   8a4e0:	f10e 36ff 	add.w	r6, lr, #4294967295
   8a4e4:	eba6 060a 	sub.w	r6, r6, sl
   8a4e8:	f026 0603 	bic.w	r6, r6, #3
   8a4ec:	4426      	add	r6, r4
   8a4ee:	b921      	cbnz	r1, 8a4fa <__mdiff+0xfe>
   8a4f0:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8a4f4:	3f01      	subs	r7, #1
   8a4f6:	2b00      	cmp	r3, #0
   8a4f8:	d0fa      	beq.n	8a4f0 <__mdiff+0xf4>
   8a4fa:	6107      	str	r7, [r0, #16]
   8a4fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a500:	4623      	mov	r3, r4
   8a502:	f04f 0b01 	mov.w	fp, #1
   8a506:	4644      	mov	r4, r8
   8a508:	4698      	mov	r8, r3
   8a50a:	e793      	b.n	8a434 <__mdiff+0x38>
   8a50c:	dbf8      	blt.n	8a500 <__mdiff+0x104>
   8a50e:	f04f 0b00 	mov.w	fp, #0
   8a512:	e78f      	b.n	8a434 <__mdiff+0x38>
   8a514:	2100      	movs	r1, #0
   8a516:	f7ff fcff 	bl	89f18 <_Balloc>
   8a51a:	b160      	cbz	r0, 8a536 <__mdiff+0x13a>
   8a51c:	2201      	movs	r2, #1
   8a51e:	2300      	movs	r3, #0
   8a520:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a528:	4602      	mov	r2, r0
   8a52a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8a52e:	4b05      	ldr	r3, [pc, #20]	; (8a544 <__mdiff+0x148>)
   8a530:	4805      	ldr	r0, [pc, #20]	; (8a548 <__mdiff+0x14c>)
   8a532:	f000 fcab 	bl	8ae8c <__assert_func>
   8a536:	4602      	mov	r2, r0
   8a538:	f240 2132 	movw	r1, #562	; 0x232
   8a53c:	4b01      	ldr	r3, [pc, #4]	; (8a544 <__mdiff+0x148>)
   8a53e:	4802      	ldr	r0, [pc, #8]	; (8a548 <__mdiff+0x14c>)
   8a540:	f000 fca4 	bl	8ae8c <__assert_func>
   8a544:	0008bf84 	.word	0x0008bf84
   8a548:	0008c024 	.word	0x0008c024

0008a54c <__d2b>:
   8a54c:	b570      	push	{r4, r5, r6, lr}
   8a54e:	2101      	movs	r1, #1
   8a550:	b082      	sub	sp, #8
   8a552:	4616      	mov	r6, r2
   8a554:	461d      	mov	r5, r3
   8a556:	f7ff fcdf 	bl	89f18 <_Balloc>
   8a55a:	4604      	mov	r4, r0
   8a55c:	2800      	cmp	r0, #0
   8a55e:	d04c      	beq.n	8a5fa <__d2b+0xae>
   8a560:	462b      	mov	r3, r5
   8a562:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8a566:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8a56a:	b10d      	cbz	r5, 8a570 <__d2b+0x24>
   8a56c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a570:	2e00      	cmp	r6, #0
   8a572:	9301      	str	r3, [sp, #4]
   8a574:	d022      	beq.n	8a5bc <__d2b+0x70>
   8a576:	4668      	mov	r0, sp
   8a578:	9600      	str	r6, [sp, #0]
   8a57a:	f7ff fd6b 	bl	8a054 <__lo0bits>
   8a57e:	2800      	cmp	r0, #0
   8a580:	d037      	beq.n	8a5f2 <__d2b+0xa6>
   8a582:	9b01      	ldr	r3, [sp, #4]
   8a584:	9900      	ldr	r1, [sp, #0]
   8a586:	f1c0 0220 	rsb	r2, r0, #32
   8a58a:	fa03 f202 	lsl.w	r2, r3, r2
   8a58e:	430a      	orrs	r2, r1
   8a590:	40c3      	lsrs	r3, r0
   8a592:	9301      	str	r3, [sp, #4]
   8a594:	6162      	str	r2, [r4, #20]
   8a596:	2b00      	cmp	r3, #0
   8a598:	bf14      	ite	ne
   8a59a:	2102      	movne	r1, #2
   8a59c:	2101      	moveq	r1, #1
   8a59e:	61a3      	str	r3, [r4, #24]
   8a5a0:	6121      	str	r1, [r4, #16]
   8a5a2:	b1b5      	cbz	r5, 8a5d2 <__d2b+0x86>
   8a5a4:	9a06      	ldr	r2, [sp, #24]
   8a5a6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8a5aa:	4403      	add	r3, r0
   8a5ac:	6013      	str	r3, [r2, #0]
   8a5ae:	9b07      	ldr	r3, [sp, #28]
   8a5b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8a5b4:	6018      	str	r0, [r3, #0]
   8a5b6:	4620      	mov	r0, r4
   8a5b8:	b002      	add	sp, #8
   8a5ba:	bd70      	pop	{r4, r5, r6, pc}
   8a5bc:	a801      	add	r0, sp, #4
   8a5be:	f7ff fd49 	bl	8a054 <__lo0bits>
   8a5c2:	2301      	movs	r3, #1
   8a5c4:	9a01      	ldr	r2, [sp, #4]
   8a5c6:	4619      	mov	r1, r3
   8a5c8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8a5cc:	3020      	adds	r0, #32
   8a5ce:	2d00      	cmp	r5, #0
   8a5d0:	d1e8      	bne.n	8a5a4 <__d2b+0x58>
   8a5d2:	9a06      	ldr	r2, [sp, #24]
   8a5d4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8a5d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8a5dc:	6010      	str	r0, [r2, #0]
   8a5de:	6918      	ldr	r0, [r3, #16]
   8a5e0:	f7ff fd18 	bl	8a014 <__hi0bits>
   8a5e4:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8a5e8:	4620      	mov	r0, r4
   8a5ea:	9b07      	ldr	r3, [sp, #28]
   8a5ec:	6019      	str	r1, [r3, #0]
   8a5ee:	b002      	add	sp, #8
   8a5f0:	bd70      	pop	{r4, r5, r6, pc}
   8a5f2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8a5f6:	6162      	str	r2, [r4, #20]
   8a5f8:	e7cd      	b.n	8a596 <__d2b+0x4a>
   8a5fa:	4602      	mov	r2, r0
   8a5fc:	f240 310a 	movw	r1, #778	; 0x30a
   8a600:	4b01      	ldr	r3, [pc, #4]	; (8a608 <__d2b+0xbc>)
   8a602:	4802      	ldr	r0, [pc, #8]	; (8a60c <__d2b+0xc0>)
   8a604:	f000 fc42 	bl	8ae8c <__assert_func>
   8a608:	0008bf84 	.word	0x0008bf84
   8a60c:	0008c024 	.word	0x0008c024

0008a610 <_realloc_r>:
   8a610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a614:	4616      	mov	r6, r2
   8a616:	2900      	cmp	r1, #0
   8a618:	f000 80bd 	beq.w	8a796 <_realloc_r+0x186>
   8a61c:	f106 050b 	add.w	r5, r6, #11
   8a620:	460c      	mov	r4, r1
   8a622:	4680      	mov	r8, r0
   8a624:	f7ff fc6c 	bl	89f00 <__malloc_lock>
   8a628:	2d16      	cmp	r5, #22
   8a62a:	d85f      	bhi.n	8a6ec <_realloc_r+0xdc>
   8a62c:	2510      	movs	r5, #16
   8a62e:	462a      	mov	r2, r5
   8a630:	42ae      	cmp	r6, r5
   8a632:	d860      	bhi.n	8a6f6 <_realloc_r+0xe6>
   8a634:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8a638:	f1a4 0908 	sub.w	r9, r4, #8
   8a63c:	f021 0703 	bic.w	r7, r1, #3
   8a640:	4297      	cmp	r7, r2
   8a642:	f280 8086 	bge.w	8a752 <_realloc_r+0x142>
   8a646:	4bc9      	ldr	r3, [pc, #804]	; (8a96c <_realloc_r+0x35c>)
   8a648:	eb09 0007 	add.w	r0, r9, r7
   8a64c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8a650:	4584      	cmp	ip, r0
   8a652:	f000 80b9 	beq.w	8a7c8 <_realloc_r+0x1b8>
   8a656:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8a65a:	f02c 0301 	bic.w	r3, ip, #1
   8a65e:	4403      	add	r3, r0
   8a660:	685b      	ldr	r3, [r3, #4]
   8a662:	07db      	lsls	r3, r3, #31
   8a664:	f100 808c 	bmi.w	8a780 <_realloc_r+0x170>
   8a668:	f02c 0c03 	bic.w	ip, ip, #3
   8a66c:	eb07 030c 	add.w	r3, r7, ip
   8a670:	4293      	cmp	r3, r2
   8a672:	f280 8115 	bge.w	8a8a0 <_realloc_r+0x290>
   8a676:	07cb      	lsls	r3, r1, #31
   8a678:	d40f      	bmi.n	8a69a <_realloc_r+0x8a>
   8a67a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a67e:	eba9 0a03 	sub.w	sl, r9, r3
   8a682:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a686:	f023 0103 	bic.w	r1, r3, #3
   8a68a:	448c      	add	ip, r1
   8a68c:	44bc      	add	ip, r7
   8a68e:	4594      	cmp	ip, r2
   8a690:	da38      	bge.n	8a704 <_realloc_r+0xf4>
   8a692:	187b      	adds	r3, r7, r1
   8a694:	4293      	cmp	r3, r2
   8a696:	f280 810f 	bge.w	8a8b8 <_realloc_r+0x2a8>
   8a69a:	4631      	mov	r1, r6
   8a69c:	4640      	mov	r0, r8
   8a69e:	f7ff f8c1 	bl	89824 <_malloc_r>
   8a6a2:	4606      	mov	r6, r0
   8a6a4:	b1e0      	cbz	r0, 8a6e0 <_realloc_r+0xd0>
   8a6a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a6aa:	f1a0 0208 	sub.w	r2, r0, #8
   8a6ae:	f023 0301 	bic.w	r3, r3, #1
   8a6b2:	444b      	add	r3, r9
   8a6b4:	4293      	cmp	r3, r2
   8a6b6:	f000 80f9 	beq.w	8a8ac <_realloc_r+0x29c>
   8a6ba:	1f3a      	subs	r2, r7, #4
   8a6bc:	2a24      	cmp	r2, #36	; 0x24
   8a6be:	f200 811c 	bhi.w	8a8fa <_realloc_r+0x2ea>
   8a6c2:	2a13      	cmp	r2, #19
   8a6c4:	f200 80cd 	bhi.w	8a862 <_realloc_r+0x252>
   8a6c8:	4603      	mov	r3, r0
   8a6ca:	4622      	mov	r2, r4
   8a6cc:	6811      	ldr	r1, [r2, #0]
   8a6ce:	6019      	str	r1, [r3, #0]
   8a6d0:	6851      	ldr	r1, [r2, #4]
   8a6d2:	6059      	str	r1, [r3, #4]
   8a6d4:	6892      	ldr	r2, [r2, #8]
   8a6d6:	609a      	str	r2, [r3, #8]
   8a6d8:	4621      	mov	r1, r4
   8a6da:	4640      	mov	r0, r8
   8a6dc:	f7fe fd70 	bl	891c0 <_free_r>
   8a6e0:	4640      	mov	r0, r8
   8a6e2:	f7ff fc13 	bl	89f0c <__malloc_unlock>
   8a6e6:	4630      	mov	r0, r6
   8a6e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a6ec:	f025 0507 	bic.w	r5, r5, #7
   8a6f0:	2d00      	cmp	r5, #0
   8a6f2:	462a      	mov	r2, r5
   8a6f4:	da9c      	bge.n	8a630 <_realloc_r+0x20>
   8a6f6:	230c      	movs	r3, #12
   8a6f8:	2600      	movs	r6, #0
   8a6fa:	f8c8 3000 	str.w	r3, [r8]
   8a6fe:	4630      	mov	r0, r6
   8a700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a704:	4656      	mov	r6, sl
   8a706:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8a70a:	60cb      	str	r3, [r1, #12]
   8a70c:	6099      	str	r1, [r3, #8]
   8a70e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8a712:	f8da 300c 	ldr.w	r3, [sl, #12]
   8a716:	1f3a      	subs	r2, r7, #4
   8a718:	2a24      	cmp	r2, #36	; 0x24
   8a71a:	60cb      	str	r3, [r1, #12]
   8a71c:	6099      	str	r1, [r3, #8]
   8a71e:	f200 8107 	bhi.w	8a930 <_realloc_r+0x320>
   8a722:	2a13      	cmp	r2, #19
   8a724:	f240 8102 	bls.w	8a92c <_realloc_r+0x31c>
   8a728:	6823      	ldr	r3, [r4, #0]
   8a72a:	2a1b      	cmp	r2, #27
   8a72c:	f8ca 3008 	str.w	r3, [sl, #8]
   8a730:	6863      	ldr	r3, [r4, #4]
   8a732:	f8ca 300c 	str.w	r3, [sl, #12]
   8a736:	f200 811b 	bhi.w	8a970 <_realloc_r+0x360>
   8a73a:	3408      	adds	r4, #8
   8a73c:	f10a 0310 	add.w	r3, sl, #16
   8a740:	6822      	ldr	r2, [r4, #0]
   8a742:	4667      	mov	r7, ip
   8a744:	601a      	str	r2, [r3, #0]
   8a746:	6862      	ldr	r2, [r4, #4]
   8a748:	46d1      	mov	r9, sl
   8a74a:	605a      	str	r2, [r3, #4]
   8a74c:	68a2      	ldr	r2, [r4, #8]
   8a74e:	4634      	mov	r4, r6
   8a750:	609a      	str	r2, [r3, #8]
   8a752:	1b7b      	subs	r3, r7, r5
   8a754:	2b0f      	cmp	r3, #15
   8a756:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8a75a:	d821      	bhi.n	8a7a0 <_realloc_r+0x190>
   8a75c:	f002 0201 	and.w	r2, r2, #1
   8a760:	433a      	orrs	r2, r7
   8a762:	eb09 0107 	add.w	r1, r9, r7
   8a766:	f8c9 2004 	str.w	r2, [r9, #4]
   8a76a:	684b      	ldr	r3, [r1, #4]
   8a76c:	f043 0301 	orr.w	r3, r3, #1
   8a770:	604b      	str	r3, [r1, #4]
   8a772:	4626      	mov	r6, r4
   8a774:	4640      	mov	r0, r8
   8a776:	f7ff fbc9 	bl	89f0c <__malloc_unlock>
   8a77a:	4630      	mov	r0, r6
   8a77c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a780:	07c9      	lsls	r1, r1, #31
   8a782:	d48a      	bmi.n	8a69a <_realloc_r+0x8a>
   8a784:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a788:	eba9 0a03 	sub.w	sl, r9, r3
   8a78c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a790:	f021 0103 	bic.w	r1, r1, #3
   8a794:	e77d      	b.n	8a692 <_realloc_r+0x82>
   8a796:	4611      	mov	r1, r2
   8a798:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a79c:	f7ff b842 	b.w	89824 <_malloc_r>
   8a7a0:	f002 0201 	and.w	r2, r2, #1
   8a7a4:	eb09 0105 	add.w	r1, r9, r5
   8a7a8:	f043 0301 	orr.w	r3, r3, #1
   8a7ac:	432a      	orrs	r2, r5
   8a7ae:	f8c9 2004 	str.w	r2, [r9, #4]
   8a7b2:	444f      	add	r7, r9
   8a7b4:	604b      	str	r3, [r1, #4]
   8a7b6:	687b      	ldr	r3, [r7, #4]
   8a7b8:	4640      	mov	r0, r8
   8a7ba:	f043 0301 	orr.w	r3, r3, #1
   8a7be:	3108      	adds	r1, #8
   8a7c0:	607b      	str	r3, [r7, #4]
   8a7c2:	f7fe fcfd 	bl	891c0 <_free_r>
   8a7c6:	e7d4      	b.n	8a772 <_realloc_r+0x162>
   8a7c8:	f8dc b004 	ldr.w	fp, [ip, #4]
   8a7cc:	f105 0010 	add.w	r0, r5, #16
   8a7d0:	f02b 0b03 	bic.w	fp, fp, #3
   8a7d4:	eb07 0c0b 	add.w	ip, r7, fp
   8a7d8:	4584      	cmp	ip, r0
   8a7da:	da4d      	bge.n	8a878 <_realloc_r+0x268>
   8a7dc:	07c9      	lsls	r1, r1, #31
   8a7de:	f53f af5c 	bmi.w	8a69a <_realloc_r+0x8a>
   8a7e2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8a7e6:	eba9 0a01 	sub.w	sl, r9, r1
   8a7ea:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a7ee:	f021 0103 	bic.w	r1, r1, #3
   8a7f2:	448b      	add	fp, r1
   8a7f4:	44bb      	add	fp, r7
   8a7f6:	4558      	cmp	r0, fp
   8a7f8:	f73f af4b 	bgt.w	8a692 <_realloc_r+0x82>
   8a7fc:	4656      	mov	r6, sl
   8a7fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a802:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a806:	1f3a      	subs	r2, r7, #4
   8a808:	2a24      	cmp	r2, #36	; 0x24
   8a80a:	60c1      	str	r1, [r0, #12]
   8a80c:	6088      	str	r0, [r1, #8]
   8a80e:	f200 80bd 	bhi.w	8a98c <_realloc_r+0x37c>
   8a812:	2a13      	cmp	r2, #19
   8a814:	f240 80b8 	bls.w	8a988 <_realloc_r+0x378>
   8a818:	6821      	ldr	r1, [r4, #0]
   8a81a:	2a1b      	cmp	r2, #27
   8a81c:	f8ca 1008 	str.w	r1, [sl, #8]
   8a820:	6861      	ldr	r1, [r4, #4]
   8a822:	f8ca 100c 	str.w	r1, [sl, #12]
   8a826:	f200 80c1 	bhi.w	8a9ac <_realloc_r+0x39c>
   8a82a:	3408      	adds	r4, #8
   8a82c:	f10a 0210 	add.w	r2, sl, #16
   8a830:	6821      	ldr	r1, [r4, #0]
   8a832:	6011      	str	r1, [r2, #0]
   8a834:	6861      	ldr	r1, [r4, #4]
   8a836:	6051      	str	r1, [r2, #4]
   8a838:	68a1      	ldr	r1, [r4, #8]
   8a83a:	6091      	str	r1, [r2, #8]
   8a83c:	ebab 0205 	sub.w	r2, fp, r5
   8a840:	eb0a 0105 	add.w	r1, sl, r5
   8a844:	f042 0201 	orr.w	r2, r2, #1
   8a848:	6099      	str	r1, [r3, #8]
   8a84a:	604a      	str	r2, [r1, #4]
   8a84c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a850:	4640      	mov	r0, r8
   8a852:	f003 0301 	and.w	r3, r3, #1
   8a856:	431d      	orrs	r5, r3
   8a858:	f8ca 5004 	str.w	r5, [sl, #4]
   8a85c:	f7ff fb56 	bl	89f0c <__malloc_unlock>
   8a860:	e74d      	b.n	8a6fe <_realloc_r+0xee>
   8a862:	6823      	ldr	r3, [r4, #0]
   8a864:	2a1b      	cmp	r2, #27
   8a866:	6003      	str	r3, [r0, #0]
   8a868:	6863      	ldr	r3, [r4, #4]
   8a86a:	6043      	str	r3, [r0, #4]
   8a86c:	d849      	bhi.n	8a902 <_realloc_r+0x2f2>
   8a86e:	f104 0208 	add.w	r2, r4, #8
   8a872:	f100 0308 	add.w	r3, r0, #8
   8a876:	e729      	b.n	8a6cc <_realloc_r+0xbc>
   8a878:	ebac 0205 	sub.w	r2, ip, r5
   8a87c:	eb09 0105 	add.w	r1, r9, r5
   8a880:	f042 0201 	orr.w	r2, r2, #1
   8a884:	6099      	str	r1, [r3, #8]
   8a886:	604a      	str	r2, [r1, #4]
   8a888:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a88c:	4640      	mov	r0, r8
   8a88e:	f003 0301 	and.w	r3, r3, #1
   8a892:	431d      	orrs	r5, r3
   8a894:	f844 5c04 	str.w	r5, [r4, #-4]
   8a898:	f7ff fb38 	bl	89f0c <__malloc_unlock>
   8a89c:	4626      	mov	r6, r4
   8a89e:	e72e      	b.n	8a6fe <_realloc_r+0xee>
   8a8a0:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8a8a4:	461f      	mov	r7, r3
   8a8a6:	60ca      	str	r2, [r1, #12]
   8a8a8:	6091      	str	r1, [r2, #8]
   8a8aa:	e752      	b.n	8a752 <_realloc_r+0x142>
   8a8ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8a8b0:	f023 0303 	bic.w	r3, r3, #3
   8a8b4:	441f      	add	r7, r3
   8a8b6:	e74c      	b.n	8a752 <_realloc_r+0x142>
   8a8b8:	4656      	mov	r6, sl
   8a8ba:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a8be:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a8c2:	1f3a      	subs	r2, r7, #4
   8a8c4:	2a24      	cmp	r2, #36	; 0x24
   8a8c6:	60c1      	str	r1, [r0, #12]
   8a8c8:	6088      	str	r0, [r1, #8]
   8a8ca:	d827      	bhi.n	8a91c <_realloc_r+0x30c>
   8a8cc:	2a13      	cmp	r2, #19
   8a8ce:	d923      	bls.n	8a918 <_realloc_r+0x308>
   8a8d0:	6821      	ldr	r1, [r4, #0]
   8a8d2:	2a1b      	cmp	r2, #27
   8a8d4:	f8ca 1008 	str.w	r1, [sl, #8]
   8a8d8:	6861      	ldr	r1, [r4, #4]
   8a8da:	f8ca 100c 	str.w	r1, [sl, #12]
   8a8de:	d82f      	bhi.n	8a940 <_realloc_r+0x330>
   8a8e0:	3408      	adds	r4, #8
   8a8e2:	f10a 0210 	add.w	r2, sl, #16
   8a8e6:	6821      	ldr	r1, [r4, #0]
   8a8e8:	461f      	mov	r7, r3
   8a8ea:	6011      	str	r1, [r2, #0]
   8a8ec:	6863      	ldr	r3, [r4, #4]
   8a8ee:	46d1      	mov	r9, sl
   8a8f0:	6053      	str	r3, [r2, #4]
   8a8f2:	68a3      	ldr	r3, [r4, #8]
   8a8f4:	4634      	mov	r4, r6
   8a8f6:	6093      	str	r3, [r2, #8]
   8a8f8:	e72b      	b.n	8a752 <_realloc_r+0x142>
   8a8fa:	4621      	mov	r1, r4
   8a8fc:	f7ff fa96 	bl	89e2c <memmove>
   8a900:	e6ea      	b.n	8a6d8 <_realloc_r+0xc8>
   8a902:	68a3      	ldr	r3, [r4, #8]
   8a904:	2a24      	cmp	r2, #36	; 0x24
   8a906:	6083      	str	r3, [r0, #8]
   8a908:	68e3      	ldr	r3, [r4, #12]
   8a90a:	60c3      	str	r3, [r0, #12]
   8a90c:	d024      	beq.n	8a958 <_realloc_r+0x348>
   8a90e:	f104 0210 	add.w	r2, r4, #16
   8a912:	f100 0310 	add.w	r3, r0, #16
   8a916:	e6d9      	b.n	8a6cc <_realloc_r+0xbc>
   8a918:	4632      	mov	r2, r6
   8a91a:	e7e4      	b.n	8a8e6 <_realloc_r+0x2d6>
   8a91c:	4621      	mov	r1, r4
   8a91e:	4630      	mov	r0, r6
   8a920:	461f      	mov	r7, r3
   8a922:	46d1      	mov	r9, sl
   8a924:	f7ff fa82 	bl	89e2c <memmove>
   8a928:	4634      	mov	r4, r6
   8a92a:	e712      	b.n	8a752 <_realloc_r+0x142>
   8a92c:	4633      	mov	r3, r6
   8a92e:	e707      	b.n	8a740 <_realloc_r+0x130>
   8a930:	4621      	mov	r1, r4
   8a932:	4630      	mov	r0, r6
   8a934:	4667      	mov	r7, ip
   8a936:	46d1      	mov	r9, sl
   8a938:	f7ff fa78 	bl	89e2c <memmove>
   8a93c:	4634      	mov	r4, r6
   8a93e:	e708      	b.n	8a752 <_realloc_r+0x142>
   8a940:	68a1      	ldr	r1, [r4, #8]
   8a942:	2a24      	cmp	r2, #36	; 0x24
   8a944:	f8ca 1010 	str.w	r1, [sl, #16]
   8a948:	68e1      	ldr	r1, [r4, #12]
   8a94a:	f8ca 1014 	str.w	r1, [sl, #20]
   8a94e:	d023      	beq.n	8a998 <_realloc_r+0x388>
   8a950:	3410      	adds	r4, #16
   8a952:	f10a 0218 	add.w	r2, sl, #24
   8a956:	e7c6      	b.n	8a8e6 <_realloc_r+0x2d6>
   8a958:	6923      	ldr	r3, [r4, #16]
   8a95a:	f104 0218 	add.w	r2, r4, #24
   8a95e:	6103      	str	r3, [r0, #16]
   8a960:	6961      	ldr	r1, [r4, #20]
   8a962:	f100 0318 	add.w	r3, r0, #24
   8a966:	6141      	str	r1, [r0, #20]
   8a968:	e6b0      	b.n	8a6cc <_realloc_r+0xbc>
   8a96a:	bf00      	nop
   8a96c:	20000948 	.word	0x20000948
   8a970:	68a3      	ldr	r3, [r4, #8]
   8a972:	2a24      	cmp	r2, #36	; 0x24
   8a974:	f8ca 3010 	str.w	r3, [sl, #16]
   8a978:	68e3      	ldr	r3, [r4, #12]
   8a97a:	f8ca 3014 	str.w	r3, [sl, #20]
   8a97e:	d021      	beq.n	8a9c4 <_realloc_r+0x3b4>
   8a980:	3410      	adds	r4, #16
   8a982:	f10a 0318 	add.w	r3, sl, #24
   8a986:	e6db      	b.n	8a740 <_realloc_r+0x130>
   8a988:	4632      	mov	r2, r6
   8a98a:	e751      	b.n	8a830 <_realloc_r+0x220>
   8a98c:	4621      	mov	r1, r4
   8a98e:	4630      	mov	r0, r6
   8a990:	f7ff fa4c 	bl	89e2c <memmove>
   8a994:	4b15      	ldr	r3, [pc, #84]	; (8a9ec <_realloc_r+0x3dc>)
   8a996:	e751      	b.n	8a83c <_realloc_r+0x22c>
   8a998:	6921      	ldr	r1, [r4, #16]
   8a99a:	f10a 0220 	add.w	r2, sl, #32
   8a99e:	f8ca 1018 	str.w	r1, [sl, #24]
   8a9a2:	6961      	ldr	r1, [r4, #20]
   8a9a4:	3418      	adds	r4, #24
   8a9a6:	f8ca 101c 	str.w	r1, [sl, #28]
   8a9aa:	e79c      	b.n	8a8e6 <_realloc_r+0x2d6>
   8a9ac:	68a1      	ldr	r1, [r4, #8]
   8a9ae:	2a24      	cmp	r2, #36	; 0x24
   8a9b0:	f8ca 1010 	str.w	r1, [sl, #16]
   8a9b4:	68e1      	ldr	r1, [r4, #12]
   8a9b6:	f8ca 1014 	str.w	r1, [sl, #20]
   8a9ba:	d00d      	beq.n	8a9d8 <_realloc_r+0x3c8>
   8a9bc:	3410      	adds	r4, #16
   8a9be:	f10a 0218 	add.w	r2, sl, #24
   8a9c2:	e735      	b.n	8a830 <_realloc_r+0x220>
   8a9c4:	6922      	ldr	r2, [r4, #16]
   8a9c6:	f10a 0320 	add.w	r3, sl, #32
   8a9ca:	f8ca 2018 	str.w	r2, [sl, #24]
   8a9ce:	6962      	ldr	r2, [r4, #20]
   8a9d0:	3418      	adds	r4, #24
   8a9d2:	f8ca 201c 	str.w	r2, [sl, #28]
   8a9d6:	e6b3      	b.n	8a740 <_realloc_r+0x130>
   8a9d8:	6921      	ldr	r1, [r4, #16]
   8a9da:	f10a 0220 	add.w	r2, sl, #32
   8a9de:	f8ca 1018 	str.w	r1, [sl, #24]
   8a9e2:	6961      	ldr	r1, [r4, #20]
   8a9e4:	3418      	adds	r4, #24
   8a9e6:	f8ca 101c 	str.w	r1, [sl, #28]
   8a9ea:	e721      	b.n	8a830 <_realloc_r+0x220>
   8a9ec:	20000948 	.word	0x20000948

0008a9f0 <frexp>:
   8a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a9f2:	4617      	mov	r7, r2
   8a9f4:	2200      	movs	r2, #0
   8a9f6:	f8df c060 	ldr.w	ip, [pc, #96]	; 8aa58 <frexp+0x68>
   8a9fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8a9fe:	4563      	cmp	r3, ip
   8aa00:	4604      	mov	r4, r0
   8aa02:	460d      	mov	r5, r1
   8aa04:	603a      	str	r2, [r7, #0]
   8aa06:	dc22      	bgt.n	8aa4e <frexp+0x5e>
   8aa08:	4684      	mov	ip, r0
   8aa0a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8aa0e:	d01e      	beq.n	8aa4e <frexp+0x5e>
   8aa10:	f8df c048 	ldr.w	ip, [pc, #72]	; 8aa5c <frexp+0x6c>
   8aa14:	460e      	mov	r6, r1
   8aa16:	ea01 0c0c 	and.w	ip, r1, ip
   8aa1a:	f1bc 0f00 	cmp.w	ip, #0
   8aa1e:	d109      	bne.n	8aa34 <frexp+0x44>
   8aa20:	2200      	movs	r2, #0
   8aa22:	4b0c      	ldr	r3, [pc, #48]	; (8aa54 <frexp+0x64>)
   8aa24:	f000 fd70 	bl	8b508 <__aeabi_dmul>
   8aa28:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8aa2c:	4604      	mov	r4, r0
   8aa2e:	460e      	mov	r6, r1
   8aa30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8aa34:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8aa38:	151b      	asrs	r3, r3, #20
   8aa3a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8aa3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8aa42:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8aa46:	4413      	add	r3, r2
   8aa48:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8aa4c:	603b      	str	r3, [r7, #0]
   8aa4e:	4620      	mov	r0, r4
   8aa50:	4629      	mov	r1, r5
   8aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aa54:	43500000 	.word	0x43500000
   8aa58:	7fefffff 	.word	0x7fefffff
   8aa5c:	7ff00000 	.word	0x7ff00000

0008aa60 <_sbrk_r>:
   8aa60:	2200      	movs	r2, #0
   8aa62:	b538      	push	{r3, r4, r5, lr}
   8aa64:	4d06      	ldr	r5, [pc, #24]	; (8aa80 <_sbrk_r+0x20>)
   8aa66:	4604      	mov	r4, r0
   8aa68:	4608      	mov	r0, r1
   8aa6a:	602a      	str	r2, [r5, #0]
   8aa6c:	f7f9 ff34 	bl	848d8 <_sbrk>
   8aa70:	1c43      	adds	r3, r0, #1
   8aa72:	d000      	beq.n	8aa76 <_sbrk_r+0x16>
   8aa74:	bd38      	pop	{r3, r4, r5, pc}
   8aa76:	682b      	ldr	r3, [r5, #0]
   8aa78:	2b00      	cmp	r3, #0
   8aa7a:	d0fb      	beq.n	8aa74 <_sbrk_r+0x14>
   8aa7c:	6023      	str	r3, [r4, #0]
   8aa7e:	bd38      	pop	{r3, r4, r5, pc}
   8aa80:	20001c38 	.word	0x20001c38

0008aa84 <__sread>:
   8aa84:	b510      	push	{r4, lr}
   8aa86:	460c      	mov	r4, r1
   8aa88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8aa8c:	f000 fb16 	bl	8b0bc <_read_r>
   8aa90:	2800      	cmp	r0, #0
   8aa92:	db03      	blt.n	8aa9c <__sread+0x18>
   8aa94:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8aa96:	4403      	add	r3, r0
   8aa98:	6523      	str	r3, [r4, #80]	; 0x50
   8aa9a:	bd10      	pop	{r4, pc}
   8aa9c:	89a3      	ldrh	r3, [r4, #12]
   8aa9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8aaa2:	81a3      	strh	r3, [r4, #12]
   8aaa4:	bd10      	pop	{r4, pc}
   8aaa6:	bf00      	nop

0008aaa8 <__swrite>:
   8aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8aaac:	460c      	mov	r4, r1
   8aaae:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8aab2:	461f      	mov	r7, r3
   8aab4:	05cb      	lsls	r3, r1, #23
   8aab6:	4616      	mov	r6, r2
   8aab8:	4605      	mov	r5, r0
   8aaba:	d40b      	bmi.n	8aad4 <__swrite+0x2c>
   8aabc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8aac0:	81a1      	strh	r1, [r4, #12]
   8aac2:	463b      	mov	r3, r7
   8aac4:	4632      	mov	r2, r6
   8aac6:	4628      	mov	r0, r5
   8aac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8aacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8aad0:	f000 b980 	b.w	8add4 <_write_r>
   8aad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8aad8:	2302      	movs	r3, #2
   8aada:	2200      	movs	r2, #0
   8aadc:	f000 fad8 	bl	8b090 <_lseek_r>
   8aae0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8aae4:	e7ea      	b.n	8aabc <__swrite+0x14>
   8aae6:	bf00      	nop

0008aae8 <__sseek>:
   8aae8:	b510      	push	{r4, lr}
   8aaea:	460c      	mov	r4, r1
   8aaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8aaf0:	f000 face 	bl	8b090 <_lseek_r>
   8aaf4:	89a3      	ldrh	r3, [r4, #12]
   8aaf6:	1c42      	adds	r2, r0, #1
   8aaf8:	bf0e      	itee	eq
   8aafa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8aafe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8ab02:	6520      	strne	r0, [r4, #80]	; 0x50
   8ab04:	81a3      	strh	r3, [r4, #12]
   8ab06:	bd10      	pop	{r4, pc}

0008ab08 <__sclose>:
   8ab08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ab0c:	f000 ba0c 	b.w	8af28 <_close_r>

0008ab10 <strlen>:
   8ab10:	f020 0103 	bic.w	r1, r0, #3
   8ab14:	f010 0003 	ands.w	r0, r0, #3
   8ab18:	f1c0 0000 	rsb	r0, r0, #0
   8ab1c:	f851 3b04 	ldr.w	r3, [r1], #4
   8ab20:	f100 0c04 	add.w	ip, r0, #4
   8ab24:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8ab28:	f06f 0200 	mvn.w	r2, #0
   8ab2c:	bf1c      	itt	ne
   8ab2e:	fa22 f20c 	lsrne.w	r2, r2, ip
   8ab32:	4313      	orrne	r3, r2
   8ab34:	f04f 0c01 	mov.w	ip, #1
   8ab38:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8ab3c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8ab40:	eba3 020c 	sub.w	r2, r3, ip
   8ab44:	ea22 0203 	bic.w	r2, r2, r3
   8ab48:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8ab4c:	bf04      	itt	eq
   8ab4e:	f851 3b04 	ldreq.w	r3, [r1], #4
   8ab52:	3004      	addeq	r0, #4
   8ab54:	d0f4      	beq.n	8ab40 <strlen+0x30>
   8ab56:	f1c2 0100 	rsb	r1, r2, #0
   8ab5a:	ea02 0201 	and.w	r2, r2, r1
   8ab5e:	fab2 f282 	clz	r2, r2
   8ab62:	f1c2 021f 	rsb	r2, r2, #31
   8ab66:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8ab6a:	4770      	bx	lr

0008ab6c <strncpy>:
   8ab6c:	b470      	push	{r4, r5, r6}
   8ab6e:	ea40 0401 	orr.w	r4, r0, r1
   8ab72:	07a3      	lsls	r3, r4, #30
   8ab74:	d122      	bne.n	8abbc <strncpy+0x50>
   8ab76:	2a03      	cmp	r2, #3
   8ab78:	d920      	bls.n	8abbc <strncpy+0x50>
   8ab7a:	460b      	mov	r3, r1
   8ab7c:	4604      	mov	r4, r0
   8ab7e:	4619      	mov	r1, r3
   8ab80:	f853 6b04 	ldr.w	r6, [r3], #4
   8ab84:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8ab88:	ea25 0506 	bic.w	r5, r5, r6
   8ab8c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8ab90:	d115      	bne.n	8abbe <strncpy+0x52>
   8ab92:	3a04      	subs	r2, #4
   8ab94:	2a03      	cmp	r2, #3
   8ab96:	4619      	mov	r1, r3
   8ab98:	f844 6b04 	str.w	r6, [r4], #4
   8ab9c:	d8ef      	bhi.n	8ab7e <strncpy+0x12>
   8ab9e:	1e4d      	subs	r5, r1, #1
   8aba0:	b152      	cbz	r2, 8abb8 <strncpy+0x4c>
   8aba2:	4623      	mov	r3, r4
   8aba4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8aba8:	1e56      	subs	r6, r2, #1
   8abaa:	f803 1b01 	strb.w	r1, [r3], #1
   8abae:	b141      	cbz	r1, 8abc2 <strncpy+0x56>
   8abb0:	4632      	mov	r2, r6
   8abb2:	461c      	mov	r4, r3
   8abb4:	2a00      	cmp	r2, #0
   8abb6:	d1f4      	bne.n	8aba2 <strncpy+0x36>
   8abb8:	bc70      	pop	{r4, r5, r6}
   8abba:	4770      	bx	lr
   8abbc:	4604      	mov	r4, r0
   8abbe:	1e4d      	subs	r5, r1, #1
   8abc0:	e7ee      	b.n	8aba0 <strncpy+0x34>
   8abc2:	4422      	add	r2, r4
   8abc4:	2e00      	cmp	r6, #0
   8abc6:	d0f7      	beq.n	8abb8 <strncpy+0x4c>
   8abc8:	f803 1b01 	strb.w	r1, [r3], #1
   8abcc:	4293      	cmp	r3, r2
   8abce:	d1fb      	bne.n	8abc8 <strncpy+0x5c>
   8abd0:	bc70      	pop	{r4, r5, r6}
   8abd2:	4770      	bx	lr

0008abd4 <__ssprint_r>:
   8abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8abd8:	6893      	ldr	r3, [r2, #8]
   8abda:	4691      	mov	r9, r2
   8abdc:	b083      	sub	sp, #12
   8abde:	2b00      	cmp	r3, #0
   8abe0:	d06d      	beq.n	8acbe <__ssprint_r+0xea>
   8abe2:	6817      	ldr	r7, [r2, #0]
   8abe4:	4680      	mov	r8, r0
   8abe6:	460c      	mov	r4, r1
   8abe8:	6808      	ldr	r0, [r1, #0]
   8abea:	688d      	ldr	r5, [r1, #8]
   8abec:	3708      	adds	r7, #8
   8abee:	e043      	b.n	8ac78 <__ssprint_r+0xa4>
   8abf0:	89a3      	ldrh	r3, [r4, #12]
   8abf2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8abf6:	d02e      	beq.n	8ac56 <__ssprint_r+0x82>
   8abf8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8abfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8ac00:	eba0 0a01 	sub.w	sl, r0, r1
   8ac04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8ac08:	eb0a 0006 	add.w	r0, sl, r6
   8ac0c:	106d      	asrs	r5, r5, #1
   8ac0e:	3001      	adds	r0, #1
   8ac10:	42a8      	cmp	r0, r5
   8ac12:	462a      	mov	r2, r5
   8ac14:	bf84      	itt	hi
   8ac16:	4605      	movhi	r5, r0
   8ac18:	462a      	movhi	r2, r5
   8ac1a:	055b      	lsls	r3, r3, #21
   8ac1c:	d536      	bpl.n	8ac8c <__ssprint_r+0xb8>
   8ac1e:	4611      	mov	r1, r2
   8ac20:	4640      	mov	r0, r8
   8ac22:	f7fe fdff 	bl	89824 <_malloc_r>
   8ac26:	2800      	cmp	r0, #0
   8ac28:	d03a      	beq.n	8aca0 <__ssprint_r+0xcc>
   8ac2a:	4652      	mov	r2, sl
   8ac2c:	6921      	ldr	r1, [r4, #16]
   8ac2e:	9001      	str	r0, [sp, #4]
   8ac30:	f7fa f9c4 	bl	84fbc <memcpy>
   8ac34:	89a2      	ldrh	r2, [r4, #12]
   8ac36:	9b01      	ldr	r3, [sp, #4]
   8ac38:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8ac3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8ac40:	81a2      	strh	r2, [r4, #12]
   8ac42:	eba5 020a 	sub.w	r2, r5, sl
   8ac46:	eb03 000a 	add.w	r0, r3, sl
   8ac4a:	6165      	str	r5, [r4, #20]
   8ac4c:	46b2      	mov	sl, r6
   8ac4e:	4635      	mov	r5, r6
   8ac50:	6123      	str	r3, [r4, #16]
   8ac52:	6020      	str	r0, [r4, #0]
   8ac54:	60a2      	str	r2, [r4, #8]
   8ac56:	4659      	mov	r1, fp
   8ac58:	4652      	mov	r2, sl
   8ac5a:	f7ff f8e7 	bl	89e2c <memmove>
   8ac5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8ac62:	68a1      	ldr	r1, [r4, #8]
   8ac64:	6820      	ldr	r0, [r4, #0]
   8ac66:	1b4d      	subs	r5, r1, r5
   8ac68:	4450      	add	r0, sl
   8ac6a:	1b9e      	subs	r6, r3, r6
   8ac6c:	60a5      	str	r5, [r4, #8]
   8ac6e:	6020      	str	r0, [r4, #0]
   8ac70:	f8c9 6008 	str.w	r6, [r9, #8]
   8ac74:	b31e      	cbz	r6, 8acbe <__ssprint_r+0xea>
   8ac76:	3708      	adds	r7, #8
   8ac78:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8ac7c:	2e00      	cmp	r6, #0
   8ac7e:	d0fa      	beq.n	8ac76 <__ssprint_r+0xa2>
   8ac80:	42b5      	cmp	r5, r6
   8ac82:	46aa      	mov	sl, r5
   8ac84:	d9b4      	bls.n	8abf0 <__ssprint_r+0x1c>
   8ac86:	4635      	mov	r5, r6
   8ac88:	46b2      	mov	sl, r6
   8ac8a:	e7e4      	b.n	8ac56 <__ssprint_r+0x82>
   8ac8c:	4640      	mov	r0, r8
   8ac8e:	f7ff fcbf 	bl	8a610 <_realloc_r>
   8ac92:	4603      	mov	r3, r0
   8ac94:	2800      	cmp	r0, #0
   8ac96:	d1d4      	bne.n	8ac42 <__ssprint_r+0x6e>
   8ac98:	4640      	mov	r0, r8
   8ac9a:	6921      	ldr	r1, [r4, #16]
   8ac9c:	f7fe fa90 	bl	891c0 <_free_r>
   8aca0:	230c      	movs	r3, #12
   8aca2:	2200      	movs	r2, #0
   8aca4:	f04f 30ff 	mov.w	r0, #4294967295
   8aca8:	f8c8 3000 	str.w	r3, [r8]
   8acac:	89a3      	ldrh	r3, [r4, #12]
   8acae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8acb2:	81a3      	strh	r3, [r4, #12]
   8acb4:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8acb8:	b003      	add	sp, #12
   8acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8acbe:	2000      	movs	r0, #0
   8acc0:	f8c9 0004 	str.w	r0, [r9, #4]
   8acc4:	b003      	add	sp, #12
   8acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8acca:	bf00      	nop

0008accc <__swbuf_r>:
   8accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8acce:	460d      	mov	r5, r1
   8acd0:	4614      	mov	r4, r2
   8acd2:	4606      	mov	r6, r0
   8acd4:	b110      	cbz	r0, 8acdc <__swbuf_r+0x10>
   8acd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8acd8:	2b00      	cmp	r3, #0
   8acda:	d043      	beq.n	8ad64 <__swbuf_r+0x98>
   8acdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8ace0:	69a3      	ldr	r3, [r4, #24]
   8ace2:	0717      	lsls	r7, r2, #28
   8ace4:	60a3      	str	r3, [r4, #8]
   8ace6:	b290      	uxth	r0, r2
   8ace8:	d51b      	bpl.n	8ad22 <__swbuf_r+0x56>
   8acea:	6923      	ldr	r3, [r4, #16]
   8acec:	b1cb      	cbz	r3, 8ad22 <__swbuf_r+0x56>
   8acee:	b2ed      	uxtb	r5, r5
   8acf0:	0481      	lsls	r1, r0, #18
   8acf2:	462f      	mov	r7, r5
   8acf4:	d522      	bpl.n	8ad3c <__swbuf_r+0x70>
   8acf6:	6822      	ldr	r2, [r4, #0]
   8acf8:	6961      	ldr	r1, [r4, #20]
   8acfa:	1ad3      	subs	r3, r2, r3
   8acfc:	4299      	cmp	r1, r3
   8acfe:	dd29      	ble.n	8ad54 <__swbuf_r+0x88>
   8ad00:	3301      	adds	r3, #1
   8ad02:	68a1      	ldr	r1, [r4, #8]
   8ad04:	1c50      	adds	r0, r2, #1
   8ad06:	3901      	subs	r1, #1
   8ad08:	60a1      	str	r1, [r4, #8]
   8ad0a:	6020      	str	r0, [r4, #0]
   8ad0c:	7015      	strb	r5, [r2, #0]
   8ad0e:	6962      	ldr	r2, [r4, #20]
   8ad10:	429a      	cmp	r2, r3
   8ad12:	d02a      	beq.n	8ad6a <__swbuf_r+0x9e>
   8ad14:	89a3      	ldrh	r3, [r4, #12]
   8ad16:	07db      	lsls	r3, r3, #31
   8ad18:	d501      	bpl.n	8ad1e <__swbuf_r+0x52>
   8ad1a:	2d0a      	cmp	r5, #10
   8ad1c:	d025      	beq.n	8ad6a <__swbuf_r+0x9e>
   8ad1e:	4638      	mov	r0, r7
   8ad20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ad22:	4621      	mov	r1, r4
   8ad24:	4630      	mov	r0, r6
   8ad26:	f7fc ffc7 	bl	87cb8 <__swsetup_r>
   8ad2a:	bb20      	cbnz	r0, 8ad76 <__swbuf_r+0xaa>
   8ad2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8ad30:	b2ed      	uxtb	r5, r5
   8ad32:	b290      	uxth	r0, r2
   8ad34:	0481      	lsls	r1, r0, #18
   8ad36:	462f      	mov	r7, r5
   8ad38:	6923      	ldr	r3, [r4, #16]
   8ad3a:	d4dc      	bmi.n	8acf6 <__swbuf_r+0x2a>
   8ad3c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8ad3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8ad42:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8ad46:	81a2      	strh	r2, [r4, #12]
   8ad48:	6822      	ldr	r2, [r4, #0]
   8ad4a:	6661      	str	r1, [r4, #100]	; 0x64
   8ad4c:	6961      	ldr	r1, [r4, #20]
   8ad4e:	1ad3      	subs	r3, r2, r3
   8ad50:	4299      	cmp	r1, r3
   8ad52:	dcd5      	bgt.n	8ad00 <__swbuf_r+0x34>
   8ad54:	4621      	mov	r1, r4
   8ad56:	4630      	mov	r0, r6
   8ad58:	f7fe f8b2 	bl	88ec0 <_fflush_r>
   8ad5c:	b958      	cbnz	r0, 8ad76 <__swbuf_r+0xaa>
   8ad5e:	2301      	movs	r3, #1
   8ad60:	6822      	ldr	r2, [r4, #0]
   8ad62:	e7ce      	b.n	8ad02 <__swbuf_r+0x36>
   8ad64:	f7fe f908 	bl	88f78 <__sinit>
   8ad68:	e7b8      	b.n	8acdc <__swbuf_r+0x10>
   8ad6a:	4621      	mov	r1, r4
   8ad6c:	4630      	mov	r0, r6
   8ad6e:	f7fe f8a7 	bl	88ec0 <_fflush_r>
   8ad72:	2800      	cmp	r0, #0
   8ad74:	d0d3      	beq.n	8ad1e <__swbuf_r+0x52>
   8ad76:	f04f 37ff 	mov.w	r7, #4294967295
   8ad7a:	e7d0      	b.n	8ad1e <__swbuf_r+0x52>

0008ad7c <_wcrtomb_r>:
   8ad7c:	b570      	push	{r4, r5, r6, lr}
   8ad7e:	4606      	mov	r6, r0
   8ad80:	461d      	mov	r5, r3
   8ad82:	b084      	sub	sp, #16
   8ad84:	b139      	cbz	r1, 8ad96 <_wcrtomb_r+0x1a>
   8ad86:	4c0b      	ldr	r4, [pc, #44]	; (8adb4 <_wcrtomb_r+0x38>)
   8ad88:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8ad8c:	47a0      	blx	r4
   8ad8e:	1c43      	adds	r3, r0, #1
   8ad90:	d00a      	beq.n	8ada8 <_wcrtomb_r+0x2c>
   8ad92:	b004      	add	sp, #16
   8ad94:	bd70      	pop	{r4, r5, r6, pc}
   8ad96:	460c      	mov	r4, r1
   8ad98:	4906      	ldr	r1, [pc, #24]	; (8adb4 <_wcrtomb_r+0x38>)
   8ad9a:	4622      	mov	r2, r4
   8ad9c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8ada0:	a901      	add	r1, sp, #4
   8ada2:	47a0      	blx	r4
   8ada4:	1c43      	adds	r3, r0, #1
   8ada6:	d1f4      	bne.n	8ad92 <_wcrtomb_r+0x16>
   8ada8:	2200      	movs	r2, #0
   8adaa:	238a      	movs	r3, #138	; 0x8a
   8adac:	602a      	str	r2, [r5, #0]
   8adae:	6033      	str	r3, [r6, #0]
   8adb0:	b004      	add	sp, #16
   8adb2:	bd70      	pop	{r4, r5, r6, pc}
   8adb4:	200007dc 	.word	0x200007dc

0008adb8 <__ascii_wctomb>:
   8adb8:	4603      	mov	r3, r0
   8adba:	b149      	cbz	r1, 8add0 <__ascii_wctomb+0x18>
   8adbc:	2aff      	cmp	r2, #255	; 0xff
   8adbe:	d802      	bhi.n	8adc6 <__ascii_wctomb+0xe>
   8adc0:	2001      	movs	r0, #1
   8adc2:	700a      	strb	r2, [r1, #0]
   8adc4:	4770      	bx	lr
   8adc6:	228a      	movs	r2, #138	; 0x8a
   8adc8:	f04f 30ff 	mov.w	r0, #4294967295
   8adcc:	601a      	str	r2, [r3, #0]
   8adce:	4770      	bx	lr
   8add0:	4608      	mov	r0, r1
   8add2:	4770      	bx	lr

0008add4 <_write_r>:
   8add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8add6:	460f      	mov	r7, r1
   8add8:	2600      	movs	r6, #0
   8adda:	4d08      	ldr	r5, [pc, #32]	; (8adfc <_write_r+0x28>)
   8addc:	4611      	mov	r1, r2
   8adde:	4604      	mov	r4, r0
   8ade0:	461a      	mov	r2, r3
   8ade2:	4638      	mov	r0, r7
   8ade4:	602e      	str	r6, [r5, #0]
   8ade6:	f7f7 fe2d 	bl	82a44 <_write>
   8adea:	1c43      	adds	r3, r0, #1
   8adec:	d000      	beq.n	8adf0 <_write_r+0x1c>
   8adee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8adf0:	682b      	ldr	r3, [r5, #0]
   8adf2:	2b00      	cmp	r3, #0
   8adf4:	d0fb      	beq.n	8adee <_write_r+0x1a>
   8adf6:	6023      	str	r3, [r4, #0]
   8adf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8adfa:	bf00      	nop
   8adfc:	20001c38 	.word	0x20001c38

0008ae00 <__register_exitproc>:
   8ae00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ae04:	f8df a080 	ldr.w	sl, [pc, #128]	; 8ae88 <__register_exitproc+0x88>
   8ae08:	4606      	mov	r6, r0
   8ae0a:	f8da 0000 	ldr.w	r0, [sl]
   8ae0e:	4698      	mov	r8, r3
   8ae10:	460f      	mov	r7, r1
   8ae12:	4691      	mov	r9, r2
   8ae14:	f7fe fc82 	bl	8971c <__retarget_lock_acquire_recursive>
   8ae18:	4b1a      	ldr	r3, [pc, #104]	; (8ae84 <__register_exitproc+0x84>)
   8ae1a:	681b      	ldr	r3, [r3, #0]
   8ae1c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8ae20:	b324      	cbz	r4, 8ae6c <__register_exitproc+0x6c>
   8ae22:	6865      	ldr	r5, [r4, #4]
   8ae24:	2d1f      	cmp	r5, #31
   8ae26:	dc26      	bgt.n	8ae76 <__register_exitproc+0x76>
   8ae28:	b95e      	cbnz	r6, 8ae42 <__register_exitproc+0x42>
   8ae2a:	1c6b      	adds	r3, r5, #1
   8ae2c:	3502      	adds	r5, #2
   8ae2e:	f8da 0000 	ldr.w	r0, [sl]
   8ae32:	6063      	str	r3, [r4, #4]
   8ae34:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8ae38:	f7fe fc72 	bl	89720 <__retarget_lock_release_recursive>
   8ae3c:	2000      	movs	r0, #0
   8ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8ae42:	2301      	movs	r3, #1
   8ae44:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8ae48:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8ae4c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8ae50:	40ab      	lsls	r3, r5
   8ae52:	431a      	orrs	r2, r3
   8ae54:	2e02      	cmp	r6, #2
   8ae56:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8ae5a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8ae5e:	d1e4      	bne.n	8ae2a <__register_exitproc+0x2a>
   8ae60:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8ae64:	4313      	orrs	r3, r2
   8ae66:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8ae6a:	e7de      	b.n	8ae2a <__register_exitproc+0x2a>
   8ae6c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8ae70:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8ae74:	e7d5      	b.n	8ae22 <__register_exitproc+0x22>
   8ae76:	f8da 0000 	ldr.w	r0, [sl]
   8ae7a:	f7fe fc51 	bl	89720 <__retarget_lock_release_recursive>
   8ae7e:	f04f 30ff 	mov.w	r0, #4294967295
   8ae82:	e7dc      	b.n	8ae3e <__register_exitproc+0x3e>
   8ae84:	0008beec 	.word	0x0008beec
   8ae88:	200007d8 	.word	0x200007d8

0008ae8c <__assert_func>:
   8ae8c:	4614      	mov	r4, r2
   8ae8e:	b500      	push	{lr}
   8ae90:	4d09      	ldr	r5, [pc, #36]	; (8aeb8 <__assert_func+0x2c>)
   8ae92:	461a      	mov	r2, r3
   8ae94:	4603      	mov	r3, r0
   8ae96:	6828      	ldr	r0, [r5, #0]
   8ae98:	b085      	sub	sp, #20
   8ae9a:	68c0      	ldr	r0, [r0, #12]
   8ae9c:	b144      	cbz	r4, 8aeb0 <__assert_func+0x24>
   8ae9e:	4d07      	ldr	r5, [pc, #28]	; (8aebc <__assert_func+0x30>)
   8aea0:	9100      	str	r1, [sp, #0]
   8aea2:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8aea6:	4906      	ldr	r1, [pc, #24]	; (8aec0 <__assert_func+0x34>)
   8aea8:	f000 f8b6 	bl	8b018 <fiprintf>
   8aeac:	f000 f91c 	bl	8b0e8 <abort>
   8aeb0:	4d04      	ldr	r5, [pc, #16]	; (8aec4 <__assert_func+0x38>)
   8aeb2:	462c      	mov	r4, r5
   8aeb4:	e7f4      	b.n	8aea0 <__assert_func+0x14>
   8aeb6:	bf00      	nop
   8aeb8:	200003ac 	.word	0x200003ac
   8aebc:	0008c1a4 	.word	0x0008c1a4
   8aec0:	0008c1b4 	.word	0x0008c1b4
   8aec4:	0008be40 	.word	0x0008be40

0008aec8 <_calloc_r>:
   8aec8:	b510      	push	{r4, lr}
   8aeca:	fb02 f101 	mul.w	r1, r2, r1
   8aece:	f7fe fca9 	bl	89824 <_malloc_r>
   8aed2:	4604      	mov	r4, r0
   8aed4:	b168      	cbz	r0, 8aef2 <_calloc_r+0x2a>
   8aed6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8aeda:	f022 0203 	bic.w	r2, r2, #3
   8aede:	3a04      	subs	r2, #4
   8aee0:	2a24      	cmp	r2, #36	; 0x24
   8aee2:	d818      	bhi.n	8af16 <_calloc_r+0x4e>
   8aee4:	2a13      	cmp	r2, #19
   8aee6:	d806      	bhi.n	8aef6 <_calloc_r+0x2e>
   8aee8:	4602      	mov	r2, r0
   8aeea:	2300      	movs	r3, #0
   8aeec:	e9c2 3300 	strd	r3, r3, [r2]
   8aef0:	6093      	str	r3, [r2, #8]
   8aef2:	4620      	mov	r0, r4
   8aef4:	bd10      	pop	{r4, pc}
   8aef6:	2300      	movs	r3, #0
   8aef8:	2a1b      	cmp	r2, #27
   8aefa:	e9c0 3300 	strd	r3, r3, [r0]
   8aefe:	d90f      	bls.n	8af20 <_calloc_r+0x58>
   8af00:	2a24      	cmp	r2, #36	; 0x24
   8af02:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8af06:	bf0a      	itet	eq
   8af08:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8af0c:	f100 0210 	addne.w	r2, r0, #16
   8af10:	f100 0218 	addeq.w	r2, r0, #24
   8af14:	e7e9      	b.n	8aeea <_calloc_r+0x22>
   8af16:	2100      	movs	r1, #0
   8af18:	f7fa f8c6 	bl	850a8 <memset>
   8af1c:	4620      	mov	r0, r4
   8af1e:	bd10      	pop	{r4, pc}
   8af20:	f100 0208 	add.w	r2, r0, #8
   8af24:	e7e1      	b.n	8aeea <_calloc_r+0x22>
   8af26:	bf00      	nop

0008af28 <_close_r>:
   8af28:	2200      	movs	r2, #0
   8af2a:	b538      	push	{r3, r4, r5, lr}
   8af2c:	4d06      	ldr	r5, [pc, #24]	; (8af48 <_close_r+0x20>)
   8af2e:	4604      	mov	r4, r0
   8af30:	4608      	mov	r0, r1
   8af32:	602a      	str	r2, [r5, #0]
   8af34:	f7f9 fcea 	bl	8490c <_close>
   8af38:	1c43      	adds	r3, r0, #1
   8af3a:	d000      	beq.n	8af3e <_close_r+0x16>
   8af3c:	bd38      	pop	{r3, r4, r5, pc}
   8af3e:	682b      	ldr	r3, [r5, #0]
   8af40:	2b00      	cmp	r3, #0
   8af42:	d0fb      	beq.n	8af3c <_close_r+0x14>
   8af44:	6023      	str	r3, [r4, #0]
   8af46:	bd38      	pop	{r3, r4, r5, pc}
   8af48:	20001c38 	.word	0x20001c38

0008af4c <_fclose_r>:
   8af4c:	b570      	push	{r4, r5, r6, lr}
   8af4e:	2900      	cmp	r1, #0
   8af50:	d04b      	beq.n	8afea <_fclose_r+0x9e>
   8af52:	460c      	mov	r4, r1
   8af54:	4605      	mov	r5, r0
   8af56:	b110      	cbz	r0, 8af5e <_fclose_r+0x12>
   8af58:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8af5a:	2b00      	cmp	r3, #0
   8af5c:	d048      	beq.n	8aff0 <_fclose_r+0xa4>
   8af5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8af60:	07d8      	lsls	r0, r3, #31
   8af62:	d534      	bpl.n	8afce <_fclose_r+0x82>
   8af64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8af68:	2b00      	cmp	r3, #0
   8af6a:	d03e      	beq.n	8afea <_fclose_r+0x9e>
   8af6c:	4621      	mov	r1, r4
   8af6e:	4628      	mov	r0, r5
   8af70:	f7fd ff0e 	bl	88d90 <__sflush_r>
   8af74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8af76:	4606      	mov	r6, r0
   8af78:	b133      	cbz	r3, 8af88 <_fclose_r+0x3c>
   8af7a:	4628      	mov	r0, r5
   8af7c:	69e1      	ldr	r1, [r4, #28]
   8af7e:	4798      	blx	r3
   8af80:	2800      	cmp	r0, #0
   8af82:	bfb8      	it	lt
   8af84:	f04f 36ff 	movlt.w	r6, #4294967295
   8af88:	89a3      	ldrh	r3, [r4, #12]
   8af8a:	061a      	lsls	r2, r3, #24
   8af8c:	d43b      	bmi.n	8b006 <_fclose_r+0xba>
   8af8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8af90:	b141      	cbz	r1, 8afa4 <_fclose_r+0x58>
   8af92:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8af96:	4299      	cmp	r1, r3
   8af98:	d002      	beq.n	8afa0 <_fclose_r+0x54>
   8af9a:	4628      	mov	r0, r5
   8af9c:	f7fe f910 	bl	891c0 <_free_r>
   8afa0:	2300      	movs	r3, #0
   8afa2:	6323      	str	r3, [r4, #48]	; 0x30
   8afa4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8afa6:	b121      	cbz	r1, 8afb2 <_fclose_r+0x66>
   8afa8:	4628      	mov	r0, r5
   8afaa:	f7fe f909 	bl	891c0 <_free_r>
   8afae:	2300      	movs	r3, #0
   8afb0:	6463      	str	r3, [r4, #68]	; 0x44
   8afb2:	f7fe f80f 	bl	88fd4 <__sfp_lock_acquire>
   8afb6:	2200      	movs	r2, #0
   8afb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8afba:	81a2      	strh	r2, [r4, #12]
   8afbc:	07db      	lsls	r3, r3, #31
   8afbe:	d527      	bpl.n	8b010 <_fclose_r+0xc4>
   8afc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8afc2:	f7fe fba9 	bl	89718 <__retarget_lock_close_recursive>
   8afc6:	f7fe f80b 	bl	88fe0 <__sfp_lock_release>
   8afca:	4630      	mov	r0, r6
   8afcc:	bd70      	pop	{r4, r5, r6, pc}
   8afce:	89a3      	ldrh	r3, [r4, #12]
   8afd0:	0599      	lsls	r1, r3, #22
   8afd2:	d4cb      	bmi.n	8af6c <_fclose_r+0x20>
   8afd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8afd6:	f7fe fba1 	bl	8971c <__retarget_lock_acquire_recursive>
   8afda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8afde:	2b00      	cmp	r3, #0
   8afe0:	d1c4      	bne.n	8af6c <_fclose_r+0x20>
   8afe2:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8afe4:	f016 0601 	ands.w	r6, r6, #1
   8afe8:	d008      	beq.n	8affc <_fclose_r+0xb0>
   8afea:	2600      	movs	r6, #0
   8afec:	4630      	mov	r0, r6
   8afee:	bd70      	pop	{r4, r5, r6, pc}
   8aff0:	f7fd ffc2 	bl	88f78 <__sinit>
   8aff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8aff6:	07d8      	lsls	r0, r3, #31
   8aff8:	d4b4      	bmi.n	8af64 <_fclose_r+0x18>
   8affa:	e7e8      	b.n	8afce <_fclose_r+0x82>
   8affc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8affe:	f7fe fb8f 	bl	89720 <__retarget_lock_release_recursive>
   8b002:	4630      	mov	r0, r6
   8b004:	bd70      	pop	{r4, r5, r6, pc}
   8b006:	4628      	mov	r0, r5
   8b008:	6921      	ldr	r1, [r4, #16]
   8b00a:	f7fe f8d9 	bl	891c0 <_free_r>
   8b00e:	e7be      	b.n	8af8e <_fclose_r+0x42>
   8b010:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b012:	f7fe fb85 	bl	89720 <__retarget_lock_release_recursive>
   8b016:	e7d3      	b.n	8afc0 <_fclose_r+0x74>

0008b018 <fiprintf>:
   8b018:	b40e      	push	{r1, r2, r3}
   8b01a:	b510      	push	{r4, lr}
   8b01c:	b083      	sub	sp, #12
   8b01e:	ab05      	add	r3, sp, #20
   8b020:	4c06      	ldr	r4, [pc, #24]	; (8b03c <fiprintf+0x24>)
   8b022:	f853 2b04 	ldr.w	r2, [r3], #4
   8b026:	4601      	mov	r1, r0
   8b028:	6820      	ldr	r0, [r4, #0]
   8b02a:	9301      	str	r3, [sp, #4]
   8b02c:	f7fb ff6a 	bl	86f04 <_vfiprintf_r>
   8b030:	b003      	add	sp, #12
   8b032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b036:	b003      	add	sp, #12
   8b038:	4770      	bx	lr
   8b03a:	bf00      	nop
   8b03c:	200003ac 	.word	0x200003ac

0008b040 <_fstat_r>:
   8b040:	b570      	push	{r4, r5, r6, lr}
   8b042:	460c      	mov	r4, r1
   8b044:	4603      	mov	r3, r0
   8b046:	2600      	movs	r6, #0
   8b048:	4d07      	ldr	r5, [pc, #28]	; (8b068 <_fstat_r+0x28>)
   8b04a:	4620      	mov	r0, r4
   8b04c:	4611      	mov	r1, r2
   8b04e:	461c      	mov	r4, r3
   8b050:	602e      	str	r6, [r5, #0]
   8b052:	f7f9 fc5e 	bl	84912 <_fstat>
   8b056:	1c43      	adds	r3, r0, #1
   8b058:	d000      	beq.n	8b05c <_fstat_r+0x1c>
   8b05a:	bd70      	pop	{r4, r5, r6, pc}
   8b05c:	682b      	ldr	r3, [r5, #0]
   8b05e:	2b00      	cmp	r3, #0
   8b060:	d0fb      	beq.n	8b05a <_fstat_r+0x1a>
   8b062:	6023      	str	r3, [r4, #0]
   8b064:	bd70      	pop	{r4, r5, r6, pc}
   8b066:	bf00      	nop
   8b068:	20001c38 	.word	0x20001c38

0008b06c <_isatty_r>:
   8b06c:	2200      	movs	r2, #0
   8b06e:	b538      	push	{r3, r4, r5, lr}
   8b070:	4d06      	ldr	r5, [pc, #24]	; (8b08c <_isatty_r+0x20>)
   8b072:	4604      	mov	r4, r0
   8b074:	4608      	mov	r0, r1
   8b076:	602a      	str	r2, [r5, #0]
   8b078:	f7f9 fc50 	bl	8491c <_isatty>
   8b07c:	1c43      	adds	r3, r0, #1
   8b07e:	d000      	beq.n	8b082 <_isatty_r+0x16>
   8b080:	bd38      	pop	{r3, r4, r5, pc}
   8b082:	682b      	ldr	r3, [r5, #0]
   8b084:	2b00      	cmp	r3, #0
   8b086:	d0fb      	beq.n	8b080 <_isatty_r+0x14>
   8b088:	6023      	str	r3, [r4, #0]
   8b08a:	bd38      	pop	{r3, r4, r5, pc}
   8b08c:	20001c38 	.word	0x20001c38

0008b090 <_lseek_r>:
   8b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b092:	460f      	mov	r7, r1
   8b094:	2600      	movs	r6, #0
   8b096:	4d08      	ldr	r5, [pc, #32]	; (8b0b8 <_lseek_r+0x28>)
   8b098:	4611      	mov	r1, r2
   8b09a:	4604      	mov	r4, r0
   8b09c:	461a      	mov	r2, r3
   8b09e:	4638      	mov	r0, r7
   8b0a0:	602e      	str	r6, [r5, #0]
   8b0a2:	f7f9 fc3d 	bl	84920 <_lseek>
   8b0a6:	1c43      	adds	r3, r0, #1
   8b0a8:	d000      	beq.n	8b0ac <_lseek_r+0x1c>
   8b0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b0ac:	682b      	ldr	r3, [r5, #0]
   8b0ae:	2b00      	cmp	r3, #0
   8b0b0:	d0fb      	beq.n	8b0aa <_lseek_r+0x1a>
   8b0b2:	6023      	str	r3, [r4, #0]
   8b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b0b6:	bf00      	nop
   8b0b8:	20001c38 	.word	0x20001c38

0008b0bc <_read_r>:
   8b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b0be:	460f      	mov	r7, r1
   8b0c0:	2600      	movs	r6, #0
   8b0c2:	4d08      	ldr	r5, [pc, #32]	; (8b0e4 <_read_r+0x28>)
   8b0c4:	4611      	mov	r1, r2
   8b0c6:	4604      	mov	r4, r0
   8b0c8:	461a      	mov	r2, r3
   8b0ca:	4638      	mov	r0, r7
   8b0cc:	602e      	str	r6, [r5, #0]
   8b0ce:	f7f7 fc9b 	bl	82a08 <_read>
   8b0d2:	1c43      	adds	r3, r0, #1
   8b0d4:	d000      	beq.n	8b0d8 <_read_r+0x1c>
   8b0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b0d8:	682b      	ldr	r3, [r5, #0]
   8b0da:	2b00      	cmp	r3, #0
   8b0dc:	d0fb      	beq.n	8b0d6 <_read_r+0x1a>
   8b0de:	6023      	str	r3, [r4, #0]
   8b0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b0e2:	bf00      	nop
   8b0e4:	20001c38 	.word	0x20001c38

0008b0e8 <abort>:
   8b0e8:	2006      	movs	r0, #6
   8b0ea:	b508      	push	{r3, lr}
   8b0ec:	f000 f830 	bl	8b150 <raise>
   8b0f0:	2001      	movs	r0, #1
   8b0f2:	f7f9 fc17 	bl	84924 <_exit>
   8b0f6:	bf00      	nop

0008b0f8 <_raise_r>:
   8b0f8:	291f      	cmp	r1, #31
   8b0fa:	b538      	push	{r3, r4, r5, lr}
   8b0fc:	4605      	mov	r5, r0
   8b0fe:	d821      	bhi.n	8b144 <_raise_r+0x4c>
   8b100:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8b104:	460c      	mov	r4, r1
   8b106:	b16a      	cbz	r2, 8b124 <_raise_r+0x2c>
   8b108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8b10c:	b153      	cbz	r3, 8b124 <_raise_r+0x2c>
   8b10e:	2b01      	cmp	r3, #1
   8b110:	d016      	beq.n	8b140 <_raise_r+0x48>
   8b112:	1c59      	adds	r1, r3, #1
   8b114:	d010      	beq.n	8b138 <_raise_r+0x40>
   8b116:	2500      	movs	r5, #0
   8b118:	4620      	mov	r0, r4
   8b11a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8b11e:	4798      	blx	r3
   8b120:	4628      	mov	r0, r5
   8b122:	bd38      	pop	{r3, r4, r5, pc}
   8b124:	4628      	mov	r0, r5
   8b126:	f000 f831 	bl	8b18c <_getpid_r>
   8b12a:	4622      	mov	r2, r4
   8b12c:	4601      	mov	r1, r0
   8b12e:	4628      	mov	r0, r5
   8b130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b134:	f000 b814 	b.w	8b160 <_kill_r>
   8b138:	2316      	movs	r3, #22
   8b13a:	2001      	movs	r0, #1
   8b13c:	602b      	str	r3, [r5, #0]
   8b13e:	bd38      	pop	{r3, r4, r5, pc}
   8b140:	2000      	movs	r0, #0
   8b142:	bd38      	pop	{r3, r4, r5, pc}
   8b144:	2316      	movs	r3, #22
   8b146:	f04f 30ff 	mov.w	r0, #4294967295
   8b14a:	602b      	str	r3, [r5, #0]
   8b14c:	bd38      	pop	{r3, r4, r5, pc}
   8b14e:	bf00      	nop

0008b150 <raise>:
   8b150:	4b02      	ldr	r3, [pc, #8]	; (8b15c <raise+0xc>)
   8b152:	4601      	mov	r1, r0
   8b154:	6818      	ldr	r0, [r3, #0]
   8b156:	f7ff bfcf 	b.w	8b0f8 <_raise_r>
   8b15a:	bf00      	nop
   8b15c:	200003ac 	.word	0x200003ac

0008b160 <_kill_r>:
   8b160:	b570      	push	{r4, r5, r6, lr}
   8b162:	460c      	mov	r4, r1
   8b164:	4603      	mov	r3, r0
   8b166:	2600      	movs	r6, #0
   8b168:	4d07      	ldr	r5, [pc, #28]	; (8b188 <_kill_r+0x28>)
   8b16a:	4620      	mov	r0, r4
   8b16c:	4611      	mov	r1, r2
   8b16e:	461c      	mov	r4, r3
   8b170:	602e      	str	r6, [r5, #0]
   8b172:	f7f9 fbe1 	bl	84938 <_kill>
   8b176:	1c43      	adds	r3, r0, #1
   8b178:	d000      	beq.n	8b17c <_kill_r+0x1c>
   8b17a:	bd70      	pop	{r4, r5, r6, pc}
   8b17c:	682b      	ldr	r3, [r5, #0]
   8b17e:	2b00      	cmp	r3, #0
   8b180:	d0fb      	beq.n	8b17a <_kill_r+0x1a>
   8b182:	6023      	str	r3, [r4, #0]
   8b184:	bd70      	pop	{r4, r5, r6, pc}
   8b186:	bf00      	nop
   8b188:	20001c38 	.word	0x20001c38

0008b18c <_getpid_r>:
   8b18c:	f7f9 bbd5 	b.w	8493a <_getpid>

0008b190 <__aeabi_drsub>:
   8b190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8b194:	e002      	b.n	8b19c <__adddf3>
   8b196:	bf00      	nop

0008b198 <__aeabi_dsub>:
   8b198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008b19c <__adddf3>:
   8b19c:	b530      	push	{r4, r5, lr}
   8b19e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8b1a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8b1a6:	ea94 0f05 	teq	r4, r5
   8b1aa:	bf08      	it	eq
   8b1ac:	ea90 0f02 	teqeq	r0, r2
   8b1b0:	bf1f      	itttt	ne
   8b1b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   8b1b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   8b1ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8b1be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b1c2:	f000 80e2 	beq.w	8b38a <__adddf3+0x1ee>
   8b1c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8b1ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8b1ce:	bfb8      	it	lt
   8b1d0:	426d      	neglt	r5, r5
   8b1d2:	dd0c      	ble.n	8b1ee <__adddf3+0x52>
   8b1d4:	442c      	add	r4, r5
   8b1d6:	ea80 0202 	eor.w	r2, r0, r2
   8b1da:	ea81 0303 	eor.w	r3, r1, r3
   8b1de:	ea82 0000 	eor.w	r0, r2, r0
   8b1e2:	ea83 0101 	eor.w	r1, r3, r1
   8b1e6:	ea80 0202 	eor.w	r2, r0, r2
   8b1ea:	ea81 0303 	eor.w	r3, r1, r3
   8b1ee:	2d36      	cmp	r5, #54	; 0x36
   8b1f0:	bf88      	it	hi
   8b1f2:	bd30      	pophi	{r4, r5, pc}
   8b1f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8b1f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b1fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8b200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8b204:	d002      	beq.n	8b20c <__adddf3+0x70>
   8b206:	4240      	negs	r0, r0
   8b208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b20c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8b210:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8b218:	d002      	beq.n	8b220 <__adddf3+0x84>
   8b21a:	4252      	negs	r2, r2
   8b21c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b220:	ea94 0f05 	teq	r4, r5
   8b224:	f000 80a7 	beq.w	8b376 <__adddf3+0x1da>
   8b228:	f1a4 0401 	sub.w	r4, r4, #1
   8b22c:	f1d5 0e20 	rsbs	lr, r5, #32
   8b230:	db0d      	blt.n	8b24e <__adddf3+0xb2>
   8b232:	fa02 fc0e 	lsl.w	ip, r2, lr
   8b236:	fa22 f205 	lsr.w	r2, r2, r5
   8b23a:	1880      	adds	r0, r0, r2
   8b23c:	f141 0100 	adc.w	r1, r1, #0
   8b240:	fa03 f20e 	lsl.w	r2, r3, lr
   8b244:	1880      	adds	r0, r0, r2
   8b246:	fa43 f305 	asr.w	r3, r3, r5
   8b24a:	4159      	adcs	r1, r3
   8b24c:	e00e      	b.n	8b26c <__adddf3+0xd0>
   8b24e:	f1a5 0520 	sub.w	r5, r5, #32
   8b252:	f10e 0e20 	add.w	lr, lr, #32
   8b256:	2a01      	cmp	r2, #1
   8b258:	fa03 fc0e 	lsl.w	ip, r3, lr
   8b25c:	bf28      	it	cs
   8b25e:	f04c 0c02 	orrcs.w	ip, ip, #2
   8b262:	fa43 f305 	asr.w	r3, r3, r5
   8b266:	18c0      	adds	r0, r0, r3
   8b268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8b26c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b270:	d507      	bpl.n	8b282 <__adddf3+0xe6>
   8b272:	f04f 0e00 	mov.w	lr, #0
   8b276:	f1dc 0c00 	rsbs	ip, ip, #0
   8b27a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8b27e:	eb6e 0101 	sbc.w	r1, lr, r1
   8b282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8b286:	d31b      	bcc.n	8b2c0 <__adddf3+0x124>
   8b288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8b28c:	d30c      	bcc.n	8b2a8 <__adddf3+0x10c>
   8b28e:	0849      	lsrs	r1, r1, #1
   8b290:	ea5f 0030 	movs.w	r0, r0, rrx
   8b294:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8b298:	f104 0401 	add.w	r4, r4, #1
   8b29c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8b2a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8b2a4:	f080 809a 	bcs.w	8b3dc <__adddf3+0x240>
   8b2a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8b2ac:	bf08      	it	eq
   8b2ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b2b2:	f150 0000 	adcs.w	r0, r0, #0
   8b2b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b2ba:	ea41 0105 	orr.w	r1, r1, r5
   8b2be:	bd30      	pop	{r4, r5, pc}
   8b2c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8b2c4:	4140      	adcs	r0, r0
   8b2c6:	eb41 0101 	adc.w	r1, r1, r1
   8b2ca:	3c01      	subs	r4, #1
   8b2cc:	bf28      	it	cs
   8b2ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8b2d2:	d2e9      	bcs.n	8b2a8 <__adddf3+0x10c>
   8b2d4:	f091 0f00 	teq	r1, #0
   8b2d8:	bf04      	itt	eq
   8b2da:	4601      	moveq	r1, r0
   8b2dc:	2000      	moveq	r0, #0
   8b2de:	fab1 f381 	clz	r3, r1
   8b2e2:	bf08      	it	eq
   8b2e4:	3320      	addeq	r3, #32
   8b2e6:	f1a3 030b 	sub.w	r3, r3, #11
   8b2ea:	f1b3 0220 	subs.w	r2, r3, #32
   8b2ee:	da0c      	bge.n	8b30a <__adddf3+0x16e>
   8b2f0:	320c      	adds	r2, #12
   8b2f2:	dd08      	ble.n	8b306 <__adddf3+0x16a>
   8b2f4:	f102 0c14 	add.w	ip, r2, #20
   8b2f8:	f1c2 020c 	rsb	r2, r2, #12
   8b2fc:	fa01 f00c 	lsl.w	r0, r1, ip
   8b300:	fa21 f102 	lsr.w	r1, r1, r2
   8b304:	e00c      	b.n	8b320 <__adddf3+0x184>
   8b306:	f102 0214 	add.w	r2, r2, #20
   8b30a:	bfd8      	it	le
   8b30c:	f1c2 0c20 	rsble	ip, r2, #32
   8b310:	fa01 f102 	lsl.w	r1, r1, r2
   8b314:	fa20 fc0c 	lsr.w	ip, r0, ip
   8b318:	bfdc      	itt	le
   8b31a:	ea41 010c 	orrle.w	r1, r1, ip
   8b31e:	4090      	lslle	r0, r2
   8b320:	1ae4      	subs	r4, r4, r3
   8b322:	bfa2      	ittt	ge
   8b324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8b328:	4329      	orrge	r1, r5
   8b32a:	bd30      	popge	{r4, r5, pc}
   8b32c:	ea6f 0404 	mvn.w	r4, r4
   8b330:	3c1f      	subs	r4, #31
   8b332:	da1c      	bge.n	8b36e <__adddf3+0x1d2>
   8b334:	340c      	adds	r4, #12
   8b336:	dc0e      	bgt.n	8b356 <__adddf3+0x1ba>
   8b338:	f104 0414 	add.w	r4, r4, #20
   8b33c:	f1c4 0220 	rsb	r2, r4, #32
   8b340:	fa20 f004 	lsr.w	r0, r0, r4
   8b344:	fa01 f302 	lsl.w	r3, r1, r2
   8b348:	ea40 0003 	orr.w	r0, r0, r3
   8b34c:	fa21 f304 	lsr.w	r3, r1, r4
   8b350:	ea45 0103 	orr.w	r1, r5, r3
   8b354:	bd30      	pop	{r4, r5, pc}
   8b356:	f1c4 040c 	rsb	r4, r4, #12
   8b35a:	f1c4 0220 	rsb	r2, r4, #32
   8b35e:	fa20 f002 	lsr.w	r0, r0, r2
   8b362:	fa01 f304 	lsl.w	r3, r1, r4
   8b366:	ea40 0003 	orr.w	r0, r0, r3
   8b36a:	4629      	mov	r1, r5
   8b36c:	bd30      	pop	{r4, r5, pc}
   8b36e:	fa21 f004 	lsr.w	r0, r1, r4
   8b372:	4629      	mov	r1, r5
   8b374:	bd30      	pop	{r4, r5, pc}
   8b376:	f094 0f00 	teq	r4, #0
   8b37a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8b37e:	bf06      	itte	eq
   8b380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8b384:	3401      	addeq	r4, #1
   8b386:	3d01      	subne	r5, #1
   8b388:	e74e      	b.n	8b228 <__adddf3+0x8c>
   8b38a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b38e:	bf18      	it	ne
   8b390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b394:	d029      	beq.n	8b3ea <__adddf3+0x24e>
   8b396:	ea94 0f05 	teq	r4, r5
   8b39a:	bf08      	it	eq
   8b39c:	ea90 0f02 	teqeq	r0, r2
   8b3a0:	d005      	beq.n	8b3ae <__adddf3+0x212>
   8b3a2:	ea54 0c00 	orrs.w	ip, r4, r0
   8b3a6:	bf04      	itt	eq
   8b3a8:	4619      	moveq	r1, r3
   8b3aa:	4610      	moveq	r0, r2
   8b3ac:	bd30      	pop	{r4, r5, pc}
   8b3ae:	ea91 0f03 	teq	r1, r3
   8b3b2:	bf1e      	ittt	ne
   8b3b4:	2100      	movne	r1, #0
   8b3b6:	2000      	movne	r0, #0
   8b3b8:	bd30      	popne	{r4, r5, pc}
   8b3ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8b3be:	d105      	bne.n	8b3cc <__adddf3+0x230>
   8b3c0:	0040      	lsls	r0, r0, #1
   8b3c2:	4149      	adcs	r1, r1
   8b3c4:	bf28      	it	cs
   8b3c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8b3ca:	bd30      	pop	{r4, r5, pc}
   8b3cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8b3d0:	bf3c      	itt	cc
   8b3d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8b3d6:	bd30      	popcc	{r4, r5, pc}
   8b3d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b3dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8b3e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b3e4:	f04f 0000 	mov.w	r0, #0
   8b3e8:	bd30      	pop	{r4, r5, pc}
   8b3ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b3ee:	bf1a      	itte	ne
   8b3f0:	4619      	movne	r1, r3
   8b3f2:	4610      	movne	r0, r2
   8b3f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8b3f8:	bf1c      	itt	ne
   8b3fa:	460b      	movne	r3, r1
   8b3fc:	4602      	movne	r2, r0
   8b3fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b402:	bf06      	itte	eq
   8b404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8b408:	ea91 0f03 	teqeq	r1, r3
   8b40c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8b410:	bd30      	pop	{r4, r5, pc}
   8b412:	bf00      	nop

0008b414 <__aeabi_ui2d>:
   8b414:	f090 0f00 	teq	r0, #0
   8b418:	bf04      	itt	eq
   8b41a:	2100      	moveq	r1, #0
   8b41c:	4770      	bxeq	lr
   8b41e:	b530      	push	{r4, r5, lr}
   8b420:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b424:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b428:	f04f 0500 	mov.w	r5, #0
   8b42c:	f04f 0100 	mov.w	r1, #0
   8b430:	e750      	b.n	8b2d4 <__adddf3+0x138>
   8b432:	bf00      	nop

0008b434 <__aeabi_i2d>:
   8b434:	f090 0f00 	teq	r0, #0
   8b438:	bf04      	itt	eq
   8b43a:	2100      	moveq	r1, #0
   8b43c:	4770      	bxeq	lr
   8b43e:	b530      	push	{r4, r5, lr}
   8b440:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b444:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8b44c:	bf48      	it	mi
   8b44e:	4240      	negmi	r0, r0
   8b450:	f04f 0100 	mov.w	r1, #0
   8b454:	e73e      	b.n	8b2d4 <__adddf3+0x138>
   8b456:	bf00      	nop

0008b458 <__aeabi_f2d>:
   8b458:	0042      	lsls	r2, r0, #1
   8b45a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8b45e:	ea4f 0131 	mov.w	r1, r1, rrx
   8b462:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8b466:	bf1f      	itttt	ne
   8b468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8b46c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8b470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8b474:	4770      	bxne	lr
   8b476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8b47a:	bf08      	it	eq
   8b47c:	4770      	bxeq	lr
   8b47e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8b482:	bf04      	itt	eq
   8b484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8b488:	4770      	bxeq	lr
   8b48a:	b530      	push	{r4, r5, lr}
   8b48c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8b490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b498:	e71c      	b.n	8b2d4 <__adddf3+0x138>
   8b49a:	bf00      	nop

0008b49c <__aeabi_ul2d>:
   8b49c:	ea50 0201 	orrs.w	r2, r0, r1
   8b4a0:	bf08      	it	eq
   8b4a2:	4770      	bxeq	lr
   8b4a4:	b530      	push	{r4, r5, lr}
   8b4a6:	f04f 0500 	mov.w	r5, #0
   8b4aa:	e00a      	b.n	8b4c2 <__aeabi_l2d+0x16>

0008b4ac <__aeabi_l2d>:
   8b4ac:	ea50 0201 	orrs.w	r2, r0, r1
   8b4b0:	bf08      	it	eq
   8b4b2:	4770      	bxeq	lr
   8b4b4:	b530      	push	{r4, r5, lr}
   8b4b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8b4ba:	d502      	bpl.n	8b4c2 <__aeabi_l2d+0x16>
   8b4bc:	4240      	negs	r0, r0
   8b4be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b4c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8b4c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8b4ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8b4ce:	f43f aed8 	beq.w	8b282 <__adddf3+0xe6>
   8b4d2:	f04f 0203 	mov.w	r2, #3
   8b4d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b4da:	bf18      	it	ne
   8b4dc:	3203      	addne	r2, #3
   8b4de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8b4e2:	bf18      	it	ne
   8b4e4:	3203      	addne	r2, #3
   8b4e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8b4ea:	f1c2 0320 	rsb	r3, r2, #32
   8b4ee:	fa00 fc03 	lsl.w	ip, r0, r3
   8b4f2:	fa20 f002 	lsr.w	r0, r0, r2
   8b4f6:	fa01 fe03 	lsl.w	lr, r1, r3
   8b4fa:	ea40 000e 	orr.w	r0, r0, lr
   8b4fe:	fa21 f102 	lsr.w	r1, r1, r2
   8b502:	4414      	add	r4, r2
   8b504:	e6bd      	b.n	8b282 <__adddf3+0xe6>
   8b506:	bf00      	nop

0008b508 <__aeabi_dmul>:
   8b508:	b570      	push	{r4, r5, r6, lr}
   8b50a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8b50e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8b512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8b516:	bf1d      	ittte	ne
   8b518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8b51c:	ea94 0f0c 	teqne	r4, ip
   8b520:	ea95 0f0c 	teqne	r5, ip
   8b524:	f000 f8de 	bleq	8b6e4 <__aeabi_dmul+0x1dc>
   8b528:	442c      	add	r4, r5
   8b52a:	ea81 0603 	eor.w	r6, r1, r3
   8b52e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8b532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8b536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8b53a:	bf18      	it	ne
   8b53c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8b540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b548:	d038      	beq.n	8b5bc <__aeabi_dmul+0xb4>
   8b54a:	fba0 ce02 	umull	ip, lr, r0, r2
   8b54e:	f04f 0500 	mov.w	r5, #0
   8b552:	fbe1 e502 	umlal	lr, r5, r1, r2
   8b556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8b55a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8b55e:	f04f 0600 	mov.w	r6, #0
   8b562:	fbe1 5603 	umlal	r5, r6, r1, r3
   8b566:	f09c 0f00 	teq	ip, #0
   8b56a:	bf18      	it	ne
   8b56c:	f04e 0e01 	orrne.w	lr, lr, #1
   8b570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8b574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8b578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8b57c:	d204      	bcs.n	8b588 <__aeabi_dmul+0x80>
   8b57e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8b582:	416d      	adcs	r5, r5
   8b584:	eb46 0606 	adc.w	r6, r6, r6
   8b588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8b58c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8b590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8b594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8b598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8b59c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8b5a0:	bf88      	it	hi
   8b5a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8b5a6:	d81e      	bhi.n	8b5e6 <__aeabi_dmul+0xde>
   8b5a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8b5ac:	bf08      	it	eq
   8b5ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8b5b2:	f150 0000 	adcs.w	r0, r0, #0
   8b5b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b5ba:	bd70      	pop	{r4, r5, r6, pc}
   8b5bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8b5c0:	ea46 0101 	orr.w	r1, r6, r1
   8b5c4:	ea40 0002 	orr.w	r0, r0, r2
   8b5c8:	ea81 0103 	eor.w	r1, r1, r3
   8b5cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8b5d0:	bfc2      	ittt	gt
   8b5d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   8b5d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8b5da:	bd70      	popgt	{r4, r5, r6, pc}
   8b5dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b5e0:	f04f 0e00 	mov.w	lr, #0
   8b5e4:	3c01      	subs	r4, #1
   8b5e6:	f300 80ab 	bgt.w	8b740 <__aeabi_dmul+0x238>
   8b5ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8b5ee:	bfde      	ittt	le
   8b5f0:	2000      	movle	r0, #0
   8b5f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8b5f6:	bd70      	pople	{r4, r5, r6, pc}
   8b5f8:	f1c4 0400 	rsb	r4, r4, #0
   8b5fc:	3c20      	subs	r4, #32
   8b5fe:	da35      	bge.n	8b66c <__aeabi_dmul+0x164>
   8b600:	340c      	adds	r4, #12
   8b602:	dc1b      	bgt.n	8b63c <__aeabi_dmul+0x134>
   8b604:	f104 0414 	add.w	r4, r4, #20
   8b608:	f1c4 0520 	rsb	r5, r4, #32
   8b60c:	fa00 f305 	lsl.w	r3, r0, r5
   8b610:	fa20 f004 	lsr.w	r0, r0, r4
   8b614:	fa01 f205 	lsl.w	r2, r1, r5
   8b618:	ea40 0002 	orr.w	r0, r0, r2
   8b61c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8b620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8b624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b628:	fa21 f604 	lsr.w	r6, r1, r4
   8b62c:	eb42 0106 	adc.w	r1, r2, r6
   8b630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b634:	bf08      	it	eq
   8b636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b63a:	bd70      	pop	{r4, r5, r6, pc}
   8b63c:	f1c4 040c 	rsb	r4, r4, #12
   8b640:	f1c4 0520 	rsb	r5, r4, #32
   8b644:	fa00 f304 	lsl.w	r3, r0, r4
   8b648:	fa20 f005 	lsr.w	r0, r0, r5
   8b64c:	fa01 f204 	lsl.w	r2, r1, r4
   8b650:	ea40 0002 	orr.w	r0, r0, r2
   8b654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8b65c:	f141 0100 	adc.w	r1, r1, #0
   8b660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b664:	bf08      	it	eq
   8b666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b66a:	bd70      	pop	{r4, r5, r6, pc}
   8b66c:	f1c4 0520 	rsb	r5, r4, #32
   8b670:	fa00 f205 	lsl.w	r2, r0, r5
   8b674:	ea4e 0e02 	orr.w	lr, lr, r2
   8b678:	fa20 f304 	lsr.w	r3, r0, r4
   8b67c:	fa01 f205 	lsl.w	r2, r1, r5
   8b680:	ea43 0302 	orr.w	r3, r3, r2
   8b684:	fa21 f004 	lsr.w	r0, r1, r4
   8b688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b68c:	fa21 f204 	lsr.w	r2, r1, r4
   8b690:	ea20 0002 	bic.w	r0, r0, r2
   8b694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8b698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8b69c:	bf08      	it	eq
   8b69e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8b6a2:	bd70      	pop	{r4, r5, r6, pc}
   8b6a4:	f094 0f00 	teq	r4, #0
   8b6a8:	d10f      	bne.n	8b6ca <__aeabi_dmul+0x1c2>
   8b6aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8b6ae:	0040      	lsls	r0, r0, #1
   8b6b0:	eb41 0101 	adc.w	r1, r1, r1
   8b6b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b6b8:	bf08      	it	eq
   8b6ba:	3c01      	subeq	r4, #1
   8b6bc:	d0f7      	beq.n	8b6ae <__aeabi_dmul+0x1a6>
   8b6be:	ea41 0106 	orr.w	r1, r1, r6
   8b6c2:	f095 0f00 	teq	r5, #0
   8b6c6:	bf18      	it	ne
   8b6c8:	4770      	bxne	lr
   8b6ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8b6ce:	0052      	lsls	r2, r2, #1
   8b6d0:	eb43 0303 	adc.w	r3, r3, r3
   8b6d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8b6d8:	bf08      	it	eq
   8b6da:	3d01      	subeq	r5, #1
   8b6dc:	d0f7      	beq.n	8b6ce <__aeabi_dmul+0x1c6>
   8b6de:	ea43 0306 	orr.w	r3, r3, r6
   8b6e2:	4770      	bx	lr
   8b6e4:	ea94 0f0c 	teq	r4, ip
   8b6e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8b6ec:	bf18      	it	ne
   8b6ee:	ea95 0f0c 	teqne	r5, ip
   8b6f2:	d00c      	beq.n	8b70e <__aeabi_dmul+0x206>
   8b6f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b6f8:	bf18      	it	ne
   8b6fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b6fe:	d1d1      	bne.n	8b6a4 <__aeabi_dmul+0x19c>
   8b700:	ea81 0103 	eor.w	r1, r1, r3
   8b704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b708:	f04f 0000 	mov.w	r0, #0
   8b70c:	bd70      	pop	{r4, r5, r6, pc}
   8b70e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b712:	bf06      	itte	eq
   8b714:	4610      	moveq	r0, r2
   8b716:	4619      	moveq	r1, r3
   8b718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b71c:	d019      	beq.n	8b752 <__aeabi_dmul+0x24a>
   8b71e:	ea94 0f0c 	teq	r4, ip
   8b722:	d102      	bne.n	8b72a <__aeabi_dmul+0x222>
   8b724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8b728:	d113      	bne.n	8b752 <__aeabi_dmul+0x24a>
   8b72a:	ea95 0f0c 	teq	r5, ip
   8b72e:	d105      	bne.n	8b73c <__aeabi_dmul+0x234>
   8b730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8b734:	bf1c      	itt	ne
   8b736:	4610      	movne	r0, r2
   8b738:	4619      	movne	r1, r3
   8b73a:	d10a      	bne.n	8b752 <__aeabi_dmul+0x24a>
   8b73c:	ea81 0103 	eor.w	r1, r1, r3
   8b740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8b744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8b748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b74c:	f04f 0000 	mov.w	r0, #0
   8b750:	bd70      	pop	{r4, r5, r6, pc}
   8b752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8b756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8b75a:	bd70      	pop	{r4, r5, r6, pc}

0008b75c <__aeabi_ddiv>:
   8b75c:	b570      	push	{r4, r5, r6, lr}
   8b75e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8b762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8b766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8b76a:	bf1d      	ittte	ne
   8b76c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8b770:	ea94 0f0c 	teqne	r4, ip
   8b774:	ea95 0f0c 	teqne	r5, ip
   8b778:	f000 f8a7 	bleq	8b8ca <__aeabi_ddiv+0x16e>
   8b77c:	eba4 0405 	sub.w	r4, r4, r5
   8b780:	ea81 0e03 	eor.w	lr, r1, r3
   8b784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8b788:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b78c:	f000 8088 	beq.w	8b8a0 <__aeabi_ddiv+0x144>
   8b790:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8b798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8b79c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8b7a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8b7a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8b7a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8b7ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8b7b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8b7b4:	429d      	cmp	r5, r3
   8b7b6:	bf08      	it	eq
   8b7b8:	4296      	cmpeq	r6, r2
   8b7ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8b7be:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8b7c2:	d202      	bcs.n	8b7ca <__aeabi_ddiv+0x6e>
   8b7c4:	085b      	lsrs	r3, r3, #1
   8b7c6:	ea4f 0232 	mov.w	r2, r2, rrx
   8b7ca:	1ab6      	subs	r6, r6, r2
   8b7cc:	eb65 0503 	sbc.w	r5, r5, r3
   8b7d0:	085b      	lsrs	r3, r3, #1
   8b7d2:	ea4f 0232 	mov.w	r2, r2, rrx
   8b7d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8b7da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8b7de:	ebb6 0e02 	subs.w	lr, r6, r2
   8b7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b7e6:	bf22      	ittt	cs
   8b7e8:	1ab6      	subcs	r6, r6, r2
   8b7ea:	4675      	movcs	r5, lr
   8b7ec:	ea40 000c 	orrcs.w	r0, r0, ip
   8b7f0:	085b      	lsrs	r3, r3, #1
   8b7f2:	ea4f 0232 	mov.w	r2, r2, rrx
   8b7f6:	ebb6 0e02 	subs.w	lr, r6, r2
   8b7fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b7fe:	bf22      	ittt	cs
   8b800:	1ab6      	subcs	r6, r6, r2
   8b802:	4675      	movcs	r5, lr
   8b804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8b808:	085b      	lsrs	r3, r3, #1
   8b80a:	ea4f 0232 	mov.w	r2, r2, rrx
   8b80e:	ebb6 0e02 	subs.w	lr, r6, r2
   8b812:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b816:	bf22      	ittt	cs
   8b818:	1ab6      	subcs	r6, r6, r2
   8b81a:	4675      	movcs	r5, lr
   8b81c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8b820:	085b      	lsrs	r3, r3, #1
   8b822:	ea4f 0232 	mov.w	r2, r2, rrx
   8b826:	ebb6 0e02 	subs.w	lr, r6, r2
   8b82a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8b82e:	bf22      	ittt	cs
   8b830:	1ab6      	subcs	r6, r6, r2
   8b832:	4675      	movcs	r5, lr
   8b834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8b838:	ea55 0e06 	orrs.w	lr, r5, r6
   8b83c:	d018      	beq.n	8b870 <__aeabi_ddiv+0x114>
   8b83e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8b842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8b846:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8b84a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8b84e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8b852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8b856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8b85a:	d1c0      	bne.n	8b7de <__aeabi_ddiv+0x82>
   8b85c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b860:	d10b      	bne.n	8b87a <__aeabi_ddiv+0x11e>
   8b862:	ea41 0100 	orr.w	r1, r1, r0
   8b866:	f04f 0000 	mov.w	r0, #0
   8b86a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8b86e:	e7b6      	b.n	8b7de <__aeabi_ddiv+0x82>
   8b870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b874:	bf04      	itt	eq
   8b876:	4301      	orreq	r1, r0
   8b878:	2000      	moveq	r0, #0
   8b87a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8b87e:	bf88      	it	hi
   8b880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8b884:	f63f aeaf 	bhi.w	8b5e6 <__aeabi_dmul+0xde>
   8b888:	ebb5 0c03 	subs.w	ip, r5, r3
   8b88c:	bf04      	itt	eq
   8b88e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8b892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b896:	f150 0000 	adcs.w	r0, r0, #0
   8b89a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b89e:	bd70      	pop	{r4, r5, r6, pc}
   8b8a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8b8a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8b8a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8b8ac:	bfc2      	ittt	gt
   8b8ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   8b8b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8b8b6:	bd70      	popgt	{r4, r5, r6, pc}
   8b8b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8b8bc:	f04f 0e00 	mov.w	lr, #0
   8b8c0:	3c01      	subs	r4, #1
   8b8c2:	e690      	b.n	8b5e6 <__aeabi_dmul+0xde>
   8b8c4:	ea45 0e06 	orr.w	lr, r5, r6
   8b8c8:	e68d      	b.n	8b5e6 <__aeabi_dmul+0xde>
   8b8ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8b8ce:	ea94 0f0c 	teq	r4, ip
   8b8d2:	bf08      	it	eq
   8b8d4:	ea95 0f0c 	teqeq	r5, ip
   8b8d8:	f43f af3b 	beq.w	8b752 <__aeabi_dmul+0x24a>
   8b8dc:	ea94 0f0c 	teq	r4, ip
   8b8e0:	d10a      	bne.n	8b8f8 <__aeabi_ddiv+0x19c>
   8b8e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b8e6:	f47f af34 	bne.w	8b752 <__aeabi_dmul+0x24a>
   8b8ea:	ea95 0f0c 	teq	r5, ip
   8b8ee:	f47f af25 	bne.w	8b73c <__aeabi_dmul+0x234>
   8b8f2:	4610      	mov	r0, r2
   8b8f4:	4619      	mov	r1, r3
   8b8f6:	e72c      	b.n	8b752 <__aeabi_dmul+0x24a>
   8b8f8:	ea95 0f0c 	teq	r5, ip
   8b8fc:	d106      	bne.n	8b90c <__aeabi_ddiv+0x1b0>
   8b8fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8b902:	f43f aefd 	beq.w	8b700 <__aeabi_dmul+0x1f8>
   8b906:	4610      	mov	r0, r2
   8b908:	4619      	mov	r1, r3
   8b90a:	e722      	b.n	8b752 <__aeabi_dmul+0x24a>
   8b90c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8b910:	bf18      	it	ne
   8b912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8b916:	f47f aec5 	bne.w	8b6a4 <__aeabi_dmul+0x19c>
   8b91a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8b91e:	f47f af0d 	bne.w	8b73c <__aeabi_dmul+0x234>
   8b922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8b926:	f47f aeeb 	bne.w	8b700 <__aeabi_dmul+0x1f8>
   8b92a:	e712      	b.n	8b752 <__aeabi_dmul+0x24a>

0008b92c <__gedf2>:
   8b92c:	f04f 3cff 	mov.w	ip, #4294967295
   8b930:	e006      	b.n	8b940 <__cmpdf2+0x4>
   8b932:	bf00      	nop

0008b934 <__ledf2>:
   8b934:	f04f 0c01 	mov.w	ip, #1
   8b938:	e002      	b.n	8b940 <__cmpdf2+0x4>
   8b93a:	bf00      	nop

0008b93c <__cmpdf2>:
   8b93c:	f04f 0c01 	mov.w	ip, #1
   8b940:	f84d cd04 	str.w	ip, [sp, #-4]!
   8b944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8b948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8b94c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8b950:	bf18      	it	ne
   8b952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8b956:	d01b      	beq.n	8b990 <__cmpdf2+0x54>
   8b958:	b001      	add	sp, #4
   8b95a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8b95e:	bf0c      	ite	eq
   8b960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8b964:	ea91 0f03 	teqne	r1, r3
   8b968:	bf02      	ittt	eq
   8b96a:	ea90 0f02 	teqeq	r0, r2
   8b96e:	2000      	moveq	r0, #0
   8b970:	4770      	bxeq	lr
   8b972:	f110 0f00 	cmn.w	r0, #0
   8b976:	ea91 0f03 	teq	r1, r3
   8b97a:	bf58      	it	pl
   8b97c:	4299      	cmppl	r1, r3
   8b97e:	bf08      	it	eq
   8b980:	4290      	cmpeq	r0, r2
   8b982:	bf2c      	ite	cs
   8b984:	17d8      	asrcs	r0, r3, #31
   8b986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8b98a:	f040 0001 	orr.w	r0, r0, #1
   8b98e:	4770      	bx	lr
   8b990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8b994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8b998:	d102      	bne.n	8b9a0 <__cmpdf2+0x64>
   8b99a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8b99e:	d107      	bne.n	8b9b0 <__cmpdf2+0x74>
   8b9a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8b9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8b9a8:	d1d6      	bne.n	8b958 <__cmpdf2+0x1c>
   8b9aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8b9ae:	d0d3      	beq.n	8b958 <__cmpdf2+0x1c>
   8b9b0:	f85d 0b04 	ldr.w	r0, [sp], #4
   8b9b4:	4770      	bx	lr
   8b9b6:	bf00      	nop

0008b9b8 <__aeabi_cdrcmple>:
   8b9b8:	4684      	mov	ip, r0
   8b9ba:	4610      	mov	r0, r2
   8b9bc:	4662      	mov	r2, ip
   8b9be:	468c      	mov	ip, r1
   8b9c0:	4619      	mov	r1, r3
   8b9c2:	4663      	mov	r3, ip
   8b9c4:	e000      	b.n	8b9c8 <__aeabi_cdcmpeq>
   8b9c6:	bf00      	nop

0008b9c8 <__aeabi_cdcmpeq>:
   8b9c8:	b501      	push	{r0, lr}
   8b9ca:	f7ff ffb7 	bl	8b93c <__cmpdf2>
   8b9ce:	2800      	cmp	r0, #0
   8b9d0:	bf48      	it	mi
   8b9d2:	f110 0f00 	cmnmi.w	r0, #0
   8b9d6:	bd01      	pop	{r0, pc}

0008b9d8 <__aeabi_dcmpeq>:
   8b9d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8b9dc:	f7ff fff4 	bl	8b9c8 <__aeabi_cdcmpeq>
   8b9e0:	bf0c      	ite	eq
   8b9e2:	2001      	moveq	r0, #1
   8b9e4:	2000      	movne	r0, #0
   8b9e6:	f85d fb08 	ldr.w	pc, [sp], #8
   8b9ea:	bf00      	nop

0008b9ec <__aeabi_dcmplt>:
   8b9ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   8b9f0:	f7ff ffea 	bl	8b9c8 <__aeabi_cdcmpeq>
   8b9f4:	bf34      	ite	cc
   8b9f6:	2001      	movcc	r0, #1
   8b9f8:	2000      	movcs	r0, #0
   8b9fa:	f85d fb08 	ldr.w	pc, [sp], #8
   8b9fe:	bf00      	nop

0008ba00 <__aeabi_dcmple>:
   8ba00:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba04:	f7ff ffe0 	bl	8b9c8 <__aeabi_cdcmpeq>
   8ba08:	bf94      	ite	ls
   8ba0a:	2001      	movls	r0, #1
   8ba0c:	2000      	movhi	r0, #0
   8ba0e:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba12:	bf00      	nop

0008ba14 <__aeabi_dcmpge>:
   8ba14:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba18:	f7ff ffce 	bl	8b9b8 <__aeabi_cdrcmple>
   8ba1c:	bf94      	ite	ls
   8ba1e:	2001      	movls	r0, #1
   8ba20:	2000      	movhi	r0, #0
   8ba22:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba26:	bf00      	nop

0008ba28 <__aeabi_dcmpgt>:
   8ba28:	f84d ed08 	str.w	lr, [sp, #-8]!
   8ba2c:	f7ff ffc4 	bl	8b9b8 <__aeabi_cdrcmple>
   8ba30:	bf34      	ite	cc
   8ba32:	2001      	movcc	r0, #1
   8ba34:	2000      	movcs	r0, #0
   8ba36:	f85d fb08 	ldr.w	pc, [sp], #8
   8ba3a:	bf00      	nop

0008ba3c <__aeabi_dcmpun>:
   8ba3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ba40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ba44:	d102      	bne.n	8ba4c <__aeabi_dcmpun+0x10>
   8ba46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8ba4a:	d10a      	bne.n	8ba62 <__aeabi_dcmpun+0x26>
   8ba4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ba50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ba54:	d102      	bne.n	8ba5c <__aeabi_dcmpun+0x20>
   8ba56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8ba5a:	d102      	bne.n	8ba62 <__aeabi_dcmpun+0x26>
   8ba5c:	f04f 0000 	mov.w	r0, #0
   8ba60:	4770      	bx	lr
   8ba62:	f04f 0001 	mov.w	r0, #1
   8ba66:	4770      	bx	lr

0008ba68 <__aeabi_d2iz>:
   8ba68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8ba6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8ba70:	d215      	bcs.n	8ba9e <__aeabi_d2iz+0x36>
   8ba72:	d511      	bpl.n	8ba98 <__aeabi_d2iz+0x30>
   8ba74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8ba78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8ba7c:	d912      	bls.n	8baa4 <__aeabi_d2iz+0x3c>
   8ba7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ba82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8ba86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8ba8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8ba8e:	fa23 f002 	lsr.w	r0, r3, r2
   8ba92:	bf18      	it	ne
   8ba94:	4240      	negne	r0, r0
   8ba96:	4770      	bx	lr
   8ba98:	f04f 0000 	mov.w	r0, #0
   8ba9c:	4770      	bx	lr
   8ba9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8baa2:	d105      	bne.n	8bab0 <__aeabi_d2iz+0x48>
   8baa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8baa8:	bf08      	it	eq
   8baaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8baae:	4770      	bx	lr
   8bab0:	f04f 0000 	mov.w	r0, #0
   8bab4:	4770      	bx	lr
   8bab6:	bf00      	nop

0008bab8 <__aeabi_uldivmod>:
   8bab8:	b953      	cbnz	r3, 8bad0 <__aeabi_uldivmod+0x18>
   8baba:	b94a      	cbnz	r2, 8bad0 <__aeabi_uldivmod+0x18>
   8babc:	2900      	cmp	r1, #0
   8babe:	bf08      	it	eq
   8bac0:	2800      	cmpeq	r0, #0
   8bac2:	bf1c      	itt	ne
   8bac4:	f04f 31ff 	movne.w	r1, #4294967295
   8bac8:	f04f 30ff 	movne.w	r0, #4294967295
   8bacc:	f000 b96e 	b.w	8bdac <__aeabi_idiv0>
   8bad0:	f1ad 0c08 	sub.w	ip, sp, #8
   8bad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8bad8:	f000 f806 	bl	8bae8 <__udivmoddi4>
   8badc:	f8dd e004 	ldr.w	lr, [sp, #4]
   8bae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8bae4:	b004      	add	sp, #16
   8bae6:	4770      	bx	lr

0008bae8 <__udivmoddi4>:
   8bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8baec:	9e08      	ldr	r6, [sp, #32]
   8baee:	460d      	mov	r5, r1
   8baf0:	4604      	mov	r4, r0
   8baf2:	468e      	mov	lr, r1
   8baf4:	2b00      	cmp	r3, #0
   8baf6:	f040 8083 	bne.w	8bc00 <__udivmoddi4+0x118>
   8bafa:	428a      	cmp	r2, r1
   8bafc:	4617      	mov	r7, r2
   8bafe:	d947      	bls.n	8bb90 <__udivmoddi4+0xa8>
   8bb00:	fab2 f382 	clz	r3, r2
   8bb04:	b14b      	cbz	r3, 8bb1a <__udivmoddi4+0x32>
   8bb06:	f1c3 0120 	rsb	r1, r3, #32
   8bb0a:	fa05 fe03 	lsl.w	lr, r5, r3
   8bb0e:	fa20 f101 	lsr.w	r1, r0, r1
   8bb12:	409f      	lsls	r7, r3
   8bb14:	ea41 0e0e 	orr.w	lr, r1, lr
   8bb18:	409c      	lsls	r4, r3
   8bb1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8bb1e:	fbbe fcf8 	udiv	ip, lr, r8
   8bb22:	fa1f f987 	uxth.w	r9, r7
   8bb26:	fb08 e21c 	mls	r2, r8, ip, lr
   8bb2a:	fb0c f009 	mul.w	r0, ip, r9
   8bb2e:	0c21      	lsrs	r1, r4, #16
   8bb30:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8bb34:	4290      	cmp	r0, r2
   8bb36:	d90a      	bls.n	8bb4e <__udivmoddi4+0x66>
   8bb38:	18ba      	adds	r2, r7, r2
   8bb3a:	f10c 31ff 	add.w	r1, ip, #4294967295
   8bb3e:	f080 8118 	bcs.w	8bd72 <__udivmoddi4+0x28a>
   8bb42:	4290      	cmp	r0, r2
   8bb44:	f240 8115 	bls.w	8bd72 <__udivmoddi4+0x28a>
   8bb48:	f1ac 0c02 	sub.w	ip, ip, #2
   8bb4c:	443a      	add	r2, r7
   8bb4e:	1a12      	subs	r2, r2, r0
   8bb50:	fbb2 f0f8 	udiv	r0, r2, r8
   8bb54:	fb08 2210 	mls	r2, r8, r0, r2
   8bb58:	fb00 f109 	mul.w	r1, r0, r9
   8bb5c:	b2a4      	uxth	r4, r4
   8bb5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8bb62:	42a1      	cmp	r1, r4
   8bb64:	d909      	bls.n	8bb7a <__udivmoddi4+0x92>
   8bb66:	193c      	adds	r4, r7, r4
   8bb68:	f100 32ff 	add.w	r2, r0, #4294967295
   8bb6c:	f080 8103 	bcs.w	8bd76 <__udivmoddi4+0x28e>
   8bb70:	42a1      	cmp	r1, r4
   8bb72:	f240 8100 	bls.w	8bd76 <__udivmoddi4+0x28e>
   8bb76:	3802      	subs	r0, #2
   8bb78:	443c      	add	r4, r7
   8bb7a:	1a64      	subs	r4, r4, r1
   8bb7c:	2100      	movs	r1, #0
   8bb7e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8bb82:	b11e      	cbz	r6, 8bb8c <__udivmoddi4+0xa4>
   8bb84:	2200      	movs	r2, #0
   8bb86:	40dc      	lsrs	r4, r3
   8bb88:	e9c6 4200 	strd	r4, r2, [r6]
   8bb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bb90:	b902      	cbnz	r2, 8bb94 <__udivmoddi4+0xac>
   8bb92:	deff      	udf	#255	; 0xff
   8bb94:	fab2 f382 	clz	r3, r2
   8bb98:	2b00      	cmp	r3, #0
   8bb9a:	d14f      	bne.n	8bc3c <__udivmoddi4+0x154>
   8bb9c:	1a8d      	subs	r5, r1, r2
   8bb9e:	2101      	movs	r1, #1
   8bba0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   8bba4:	fa1f f882 	uxth.w	r8, r2
   8bba8:	fbb5 fcfe 	udiv	ip, r5, lr
   8bbac:	fb0e 551c 	mls	r5, lr, ip, r5
   8bbb0:	fb08 f00c 	mul.w	r0, r8, ip
   8bbb4:	0c22      	lsrs	r2, r4, #16
   8bbb6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8bbba:	42a8      	cmp	r0, r5
   8bbbc:	d907      	bls.n	8bbce <__udivmoddi4+0xe6>
   8bbbe:	197d      	adds	r5, r7, r5
   8bbc0:	f10c 32ff 	add.w	r2, ip, #4294967295
   8bbc4:	d202      	bcs.n	8bbcc <__udivmoddi4+0xe4>
   8bbc6:	42a8      	cmp	r0, r5
   8bbc8:	f200 80e9 	bhi.w	8bd9e <__udivmoddi4+0x2b6>
   8bbcc:	4694      	mov	ip, r2
   8bbce:	1a2d      	subs	r5, r5, r0
   8bbd0:	fbb5 f0fe 	udiv	r0, r5, lr
   8bbd4:	fb0e 5510 	mls	r5, lr, r0, r5
   8bbd8:	fb08 f800 	mul.w	r8, r8, r0
   8bbdc:	b2a4      	uxth	r4, r4
   8bbde:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8bbe2:	45a0      	cmp	r8, r4
   8bbe4:	d907      	bls.n	8bbf6 <__udivmoddi4+0x10e>
   8bbe6:	193c      	adds	r4, r7, r4
   8bbe8:	f100 32ff 	add.w	r2, r0, #4294967295
   8bbec:	d202      	bcs.n	8bbf4 <__udivmoddi4+0x10c>
   8bbee:	45a0      	cmp	r8, r4
   8bbf0:	f200 80d9 	bhi.w	8bda6 <__udivmoddi4+0x2be>
   8bbf4:	4610      	mov	r0, r2
   8bbf6:	eba4 0408 	sub.w	r4, r4, r8
   8bbfa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8bbfe:	e7c0      	b.n	8bb82 <__udivmoddi4+0x9a>
   8bc00:	428b      	cmp	r3, r1
   8bc02:	d908      	bls.n	8bc16 <__udivmoddi4+0x12e>
   8bc04:	2e00      	cmp	r6, #0
   8bc06:	f000 80b1 	beq.w	8bd6c <__udivmoddi4+0x284>
   8bc0a:	2100      	movs	r1, #0
   8bc0c:	e9c6 0500 	strd	r0, r5, [r6]
   8bc10:	4608      	mov	r0, r1
   8bc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bc16:	fab3 f183 	clz	r1, r3
   8bc1a:	2900      	cmp	r1, #0
   8bc1c:	d14b      	bne.n	8bcb6 <__udivmoddi4+0x1ce>
   8bc1e:	42ab      	cmp	r3, r5
   8bc20:	d302      	bcc.n	8bc28 <__udivmoddi4+0x140>
   8bc22:	4282      	cmp	r2, r0
   8bc24:	f200 80b9 	bhi.w	8bd9a <__udivmoddi4+0x2b2>
   8bc28:	1a84      	subs	r4, r0, r2
   8bc2a:	eb65 0303 	sbc.w	r3, r5, r3
   8bc2e:	2001      	movs	r0, #1
   8bc30:	469e      	mov	lr, r3
   8bc32:	2e00      	cmp	r6, #0
   8bc34:	d0aa      	beq.n	8bb8c <__udivmoddi4+0xa4>
   8bc36:	e9c6 4e00 	strd	r4, lr, [r6]
   8bc3a:	e7a7      	b.n	8bb8c <__udivmoddi4+0xa4>
   8bc3c:	409f      	lsls	r7, r3
   8bc3e:	f1c3 0220 	rsb	r2, r3, #32
   8bc42:	40d1      	lsrs	r1, r2
   8bc44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8bc48:	fbb1 f0fe 	udiv	r0, r1, lr
   8bc4c:	fa1f f887 	uxth.w	r8, r7
   8bc50:	fb0e 1110 	mls	r1, lr, r0, r1
   8bc54:	fa24 f202 	lsr.w	r2, r4, r2
   8bc58:	409d      	lsls	r5, r3
   8bc5a:	fb00 fc08 	mul.w	ip, r0, r8
   8bc5e:	432a      	orrs	r2, r5
   8bc60:	0c15      	lsrs	r5, r2, #16
   8bc62:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8bc66:	45ac      	cmp	ip, r5
   8bc68:	fa04 f403 	lsl.w	r4, r4, r3
   8bc6c:	d909      	bls.n	8bc82 <__udivmoddi4+0x19a>
   8bc6e:	197d      	adds	r5, r7, r5
   8bc70:	f100 31ff 	add.w	r1, r0, #4294967295
   8bc74:	f080 808f 	bcs.w	8bd96 <__udivmoddi4+0x2ae>
   8bc78:	45ac      	cmp	ip, r5
   8bc7a:	f240 808c 	bls.w	8bd96 <__udivmoddi4+0x2ae>
   8bc7e:	3802      	subs	r0, #2
   8bc80:	443d      	add	r5, r7
   8bc82:	eba5 050c 	sub.w	r5, r5, ip
   8bc86:	fbb5 f1fe 	udiv	r1, r5, lr
   8bc8a:	fb0e 5c11 	mls	ip, lr, r1, r5
   8bc8e:	fb01 f908 	mul.w	r9, r1, r8
   8bc92:	b295      	uxth	r5, r2
   8bc94:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8bc98:	45a9      	cmp	r9, r5
   8bc9a:	d907      	bls.n	8bcac <__udivmoddi4+0x1c4>
   8bc9c:	197d      	adds	r5, r7, r5
   8bc9e:	f101 32ff 	add.w	r2, r1, #4294967295
   8bca2:	d274      	bcs.n	8bd8e <__udivmoddi4+0x2a6>
   8bca4:	45a9      	cmp	r9, r5
   8bca6:	d972      	bls.n	8bd8e <__udivmoddi4+0x2a6>
   8bca8:	3902      	subs	r1, #2
   8bcaa:	443d      	add	r5, r7
   8bcac:	eba5 0509 	sub.w	r5, r5, r9
   8bcb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8bcb4:	e778      	b.n	8bba8 <__udivmoddi4+0xc0>
   8bcb6:	f1c1 0720 	rsb	r7, r1, #32
   8bcba:	408b      	lsls	r3, r1
   8bcbc:	fa22 fc07 	lsr.w	ip, r2, r7
   8bcc0:	ea4c 0c03 	orr.w	ip, ip, r3
   8bcc4:	fa25 f407 	lsr.w	r4, r5, r7
   8bcc8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8bccc:	fbb4 f9fe 	udiv	r9, r4, lr
   8bcd0:	fa1f f88c 	uxth.w	r8, ip
   8bcd4:	fb0e 4419 	mls	r4, lr, r9, r4
   8bcd8:	fa20 f307 	lsr.w	r3, r0, r7
   8bcdc:	fb09 fa08 	mul.w	sl, r9, r8
   8bce0:	408d      	lsls	r5, r1
   8bce2:	431d      	orrs	r5, r3
   8bce4:	0c2b      	lsrs	r3, r5, #16
   8bce6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8bcea:	45a2      	cmp	sl, r4
   8bcec:	fa02 f201 	lsl.w	r2, r2, r1
   8bcf0:	fa00 f301 	lsl.w	r3, r0, r1
   8bcf4:	d909      	bls.n	8bd0a <__udivmoddi4+0x222>
   8bcf6:	eb1c 0404 	adds.w	r4, ip, r4
   8bcfa:	f109 30ff 	add.w	r0, r9, #4294967295
   8bcfe:	d248      	bcs.n	8bd92 <__udivmoddi4+0x2aa>
   8bd00:	45a2      	cmp	sl, r4
   8bd02:	d946      	bls.n	8bd92 <__udivmoddi4+0x2aa>
   8bd04:	f1a9 0902 	sub.w	r9, r9, #2
   8bd08:	4464      	add	r4, ip
   8bd0a:	eba4 040a 	sub.w	r4, r4, sl
   8bd0e:	fbb4 f0fe 	udiv	r0, r4, lr
   8bd12:	fb0e 4410 	mls	r4, lr, r0, r4
   8bd16:	fb00 fa08 	mul.w	sl, r0, r8
   8bd1a:	b2ad      	uxth	r5, r5
   8bd1c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8bd20:	45a2      	cmp	sl, r4
   8bd22:	d908      	bls.n	8bd36 <__udivmoddi4+0x24e>
   8bd24:	eb1c 0404 	adds.w	r4, ip, r4
   8bd28:	f100 35ff 	add.w	r5, r0, #4294967295
   8bd2c:	d22d      	bcs.n	8bd8a <__udivmoddi4+0x2a2>
   8bd2e:	45a2      	cmp	sl, r4
   8bd30:	d92b      	bls.n	8bd8a <__udivmoddi4+0x2a2>
   8bd32:	3802      	subs	r0, #2
   8bd34:	4464      	add	r4, ip
   8bd36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8bd3a:	fba0 8902 	umull	r8, r9, r0, r2
   8bd3e:	eba4 040a 	sub.w	r4, r4, sl
   8bd42:	454c      	cmp	r4, r9
   8bd44:	46c6      	mov	lr, r8
   8bd46:	464d      	mov	r5, r9
   8bd48:	d319      	bcc.n	8bd7e <__udivmoddi4+0x296>
   8bd4a:	d016      	beq.n	8bd7a <__udivmoddi4+0x292>
   8bd4c:	b15e      	cbz	r6, 8bd66 <__udivmoddi4+0x27e>
   8bd4e:	ebb3 020e 	subs.w	r2, r3, lr
   8bd52:	eb64 0405 	sbc.w	r4, r4, r5
   8bd56:	fa04 f707 	lsl.w	r7, r4, r7
   8bd5a:	fa22 f301 	lsr.w	r3, r2, r1
   8bd5e:	431f      	orrs	r7, r3
   8bd60:	40cc      	lsrs	r4, r1
   8bd62:	e9c6 7400 	strd	r7, r4, [r6]
   8bd66:	2100      	movs	r1, #0
   8bd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bd6c:	4631      	mov	r1, r6
   8bd6e:	4630      	mov	r0, r6
   8bd70:	e70c      	b.n	8bb8c <__udivmoddi4+0xa4>
   8bd72:	468c      	mov	ip, r1
   8bd74:	e6eb      	b.n	8bb4e <__udivmoddi4+0x66>
   8bd76:	4610      	mov	r0, r2
   8bd78:	e6ff      	b.n	8bb7a <__udivmoddi4+0x92>
   8bd7a:	4543      	cmp	r3, r8
   8bd7c:	d2e6      	bcs.n	8bd4c <__udivmoddi4+0x264>
   8bd7e:	ebb8 0e02 	subs.w	lr, r8, r2
   8bd82:	eb69 050c 	sbc.w	r5, r9, ip
   8bd86:	3801      	subs	r0, #1
   8bd88:	e7e0      	b.n	8bd4c <__udivmoddi4+0x264>
   8bd8a:	4628      	mov	r0, r5
   8bd8c:	e7d3      	b.n	8bd36 <__udivmoddi4+0x24e>
   8bd8e:	4611      	mov	r1, r2
   8bd90:	e78c      	b.n	8bcac <__udivmoddi4+0x1c4>
   8bd92:	4681      	mov	r9, r0
   8bd94:	e7b9      	b.n	8bd0a <__udivmoddi4+0x222>
   8bd96:	4608      	mov	r0, r1
   8bd98:	e773      	b.n	8bc82 <__udivmoddi4+0x19a>
   8bd9a:	4608      	mov	r0, r1
   8bd9c:	e749      	b.n	8bc32 <__udivmoddi4+0x14a>
   8bd9e:	f1ac 0c02 	sub.w	ip, ip, #2
   8bda2:	443d      	add	r5, r7
   8bda4:	e713      	b.n	8bbce <__udivmoddi4+0xe6>
   8bda6:	3802      	subs	r0, #2
   8bda8:	443c      	add	r4, r7
   8bdaa:	e724      	b.n	8bbf6 <__udivmoddi4+0x10e>

0008bdac <__aeabi_idiv0>:
   8bdac:	4770      	bx	lr
   8bdae:	bf00      	nop

0008bdb0 <LED_DESCRIPTOR>:
   8bdb0:	004f 0000 0001 0000 0050 0000 0001 0000     O.......P.......
   8bdc0:	0051 0000 0001 0000 0000 0000               Q...........

0008bdcc <BOS_DESC>:
   8bdcc:	0f05 0021 1c01 0510 df00 dd60 89d8 c745     ..!.......`...E.
   8bddc:	9c4c 65d2 9e9d 8a64 009f 0300 9e06 0100     L..e..d.........
	...
   8bdf8:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8be08:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8be18:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...
   8be28:	7845 7469 6e69 2067 6977 6874 7320 6174     Exiting with sta
   8be38:	7574 2073 6425 0a2e 0000 0000 3025 7838     tus %d......%08x
   8be48:	0000 0000 6f4e 2076 3620 3220 3230 0030     ....Nov  6 2020.
   8be58:	3731 313a 3a35 3431 0000 0000 6843 7069     17:15:14....Chip
   8be68:	6857 7369 6570 6572 2d72 5743 3033 2035     Whisperer-CW305 
   8be78:	6e4f 696c 656e 202e 6946 6d72 6177 6572     Online. Firmware
   8be88:	6220 6975 646c 203a 7325 252f 0a73 0000      build: %s/%s...
   8be98:	6553 6972 6c61 6e20 6d75 6562 3a72 2520     Serial number: %
   8bea8:	0a73 0000 6553 7474 6e69 2067 7075 4620     s...Setting up F
   8beb8:	4750 2041 6f43 6d6d 6e75 6369 7461 6f69     PGA Communicatio
   8bec8:	0a6e 0000 7645 6e65 2074 6f4c 706f 4520     n...Event Loop E
   8bed8:	746e 7265 6465 202c 6177 7469 6e69 2e67     ntered, waiting.
   8bee8:	2e2e 000a                                   ....

0008beec <_global_impure_ptr>:
   8beec:	03b0 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
   8befc:	616e 006e 3130 3332 3534 3736 3938 6261     nan.0123456789ab
   8bf0c:	6463 6665 0000 0000 3130 3332 3534 3736     cdef....01234567
   8bf1c:	3938 4241 4443 4645 0000 0000 6e28 6c75     89ABCDEF....(nul
   8bf2c:	296c 0000 0030 0000                         l)..0...

0008bf34 <blanks.7335>:
   8bf34:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008bf44 <zeroes.7336>:
   8bf44:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008bf54 <blanks.7328>:
   8bf54:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008bf64 <zeroes.7329>:
   8bf64:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8bf74:	614e 004e 6e49 6966 696e 7974 0000 0000     NaN.Infinity....
   8bf84:	6142 6c6c 636f 7320 6375 6563 6465 6465     Balloc succeeded
   8bf94:	0000 0000 6d2f 746e 772f 726f 736b 6170     ..../mnt/workspa
   8bfa4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   8bfb4:	392d 702d 7069 6c65 6e69 2f65 656a 6b6e     -9-pipeline/jenk
   8bfc4:	6e69 2d73 4347 2d43 2d39 6970 6570 696c     ins-GCC-9-pipeli
   8bfd4:	656e 322d 3030 325f 3230 3030 3235 5f31     ne-200_20200521_
   8bfe4:	3531 3039 3530 3333 3437 732f 6372 6e2f     1590053374/src/n
   8bff4:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   8c004:	2f63 7473 6c64 6269 642f 6f74 2e61 0063     c/stdlib/dtoa.c.
   8c014:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
   8c024:	6d2f 746e 772f 726f 736b 6170 6563 772f     /mnt/workspace/w
   8c034:	726f 736b 6170 6563 472f 4343 392d 702d     orkspace/GCC-9-p
   8c044:	7069 6c65 6e69 2f65 656a 6b6e 6e69 2d73     ipeline/jenkins-
   8c054:	4347 2d43 2d39 6970 6570 696c 656e 322d     GCC-9-pipeline-2
   8c064:	3030 325f 3230 3030 3235 5f31 3531 3039     00_20200521_1590
   8c074:	3530 3333 3437 732f 6372 6e2f 7765 696c     053374/src/newli
   8c084:	2f62 656e 6c77 6269 6c2f 6269 2f63 7473     b/newlib/libc/st
   8c094:	6c64 6269 6d2f 7270 6365 632e 0000 0000     dlib/mprec.c....
   8c0a4:	0000 0000                                   ....

0008c0a8 <__mprec_bigtens>:
   8c0a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   8c0b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   8c0c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

0008c0d0 <__mprec_tens>:
   8c0d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   8c0e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   8c0f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   8c100:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   8c110:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   8c120:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   8c130:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   8c140:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   8c150:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   8c160:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   8c170:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   8c180:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   8c190:	9db4 79d9 7843 44ea                         ...yCx.D

0008c198 <p05.6122>:
   8c198:	0005 0000 0019 0000 007d 0000 202c 7566     ........}..., fu
   8c1a8:	636e 6974 6e6f 203a 0000 0000 7361 6573     nction: ....asse
   8c1b8:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
   8c1c8:	3a64 6620 6c69 2065 2522 2273 202c 696c     d: file "%s", li
   8c1d8:	656e 2520 2564 2573 0a73 0000               ne %d%s%s...

0008c1e4 <_ctype_>:
   8c1e4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8c1f4:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8c204:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8c214:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8c224:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8c234:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8c244:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8c254:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8c264:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008c2e8 <_init>:
   8c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c2ea:	bf00      	nop
   8c2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c2ee:	bc08      	pop	{r3}
   8c2f0:	469e      	mov	lr, r3
   8c2f2:	4770      	bx	lr

0008c2f4 <__init_array_start>:
   8c2f4:	00087d89 	.word	0x00087d89

0008c2f8 <__frame_dummy_init_array_entry>:
   8c2f8:	000800e1                                ....

0008c2fc <_fini>:
   8c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c2fe:	bf00      	nop
   8c300:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c302:	bc08      	pop	{r3}
   8c304:	469e      	mov	lr, r3
   8c306:	4770      	bx	lr

0008c308 <__do_global_dtors_aux_fini_array_entry>:
   8c308:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b36b      	cbz	r3, 20000064 <efc_perform_read_sequence+0x64>
20000008:	4604      	mov	r4, r0
2000000a:	461d      	mov	r5, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000c:	6803      	ldr	r3, [r0, #0]
2000000e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000012:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000014:	b2c9      	uxtb	r1, r1
20000016:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001c:	68a3      	ldr	r3, [r4, #8]
2000001e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000020:	9801      	ldr	r0, [sp, #4]
20000022:	f010 0001 	ands.w	r0, r0, #1
20000026:	d1f9      	bne.n	2000001c <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000028:	b15e      	cbz	r6, 20000042 <efc_perform_read_sequence+0x42>
2000002a:	1f2b      	subs	r3, r5, #4
2000002c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
20000030:	3e04      	subs	r6, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000032:	f5c5 2500 	rsb	r5, r5, #524288	; 0x80000
20000036:	3504      	adds	r5, #4
20000038:	58e9      	ldr	r1, [r5, r3]
2000003a:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003e:	42b3      	cmp	r3, r6
20000040:	d1fa      	bne.n	20000038 <efc_perform_read_sequence+0x38>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000042:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000044:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000048:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000004a:	68a3      	ldr	r3, [r4, #8]
2000004c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000004e:	9b01      	ldr	r3, [sp, #4]
20000050:	f013 0f01 	tst.w	r3, #1
20000054:	d0f9      	beq.n	2000004a <efc_perform_read_sequence+0x4a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000056:	6823      	ldr	r3, [r4, #0]
20000058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000005c:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
}
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
		return EFC_RC_INVALID;
20000064:	2002      	movs	r0, #2
20000066:	e7fa      	b.n	2000005e <efc_perform_read_sequence+0x5e>

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
}
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr

20000086 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000086:	f3bf 8f5f 	dmb	sy
2000008a:	3801      	subs	r0, #1
2000008c:	d1fb      	bne.n	20000086 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
2000008e:	4770      	bx	lr

20000090 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000090:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000094:	4a21      	ldr	r2, [pc, #132]	; (2000011c <SystemInit+0x8c>)
20000096:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000098:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000009c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000009e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000a6:	6a1b      	ldr	r3, [r3, #32]
200000a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000ac:	d107      	bne.n	200000be <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ae:	4b1c      	ldr	r3, [pc, #112]	; (20000120 <SystemInit+0x90>)
200000b0:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x94>)
200000b2:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b4:	461a      	mov	r2, r3
200000b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000b8:	f013 0f01 	tst.w	r3, #1
200000bc:	d0fb      	beq.n	200000b6 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000be:	4b18      	ldr	r3, [pc, #96]	; (20000120 <SystemInit+0x90>)
200000c0:	4a19      	ldr	r2, [pc, #100]	; (20000128 <SystemInit+0x98>)
200000c2:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c4:	461a      	mov	r2, r3
200000c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000cc:	d0fb      	beq.n	200000c6 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ce:	4a14      	ldr	r2, [pc, #80]	; (20000120 <SystemInit+0x90>)
200000d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d2:	f023 0303 	bic.w	r3, r3, #3
200000d6:	f043 0301 	orr.w	r3, r3, #1
200000da:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000de:	f013 0f08 	tst.w	r3, #8
200000e2:	d0fb      	beq.n	200000dc <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e4:	4b0e      	ldr	r3, [pc, #56]	; (20000120 <SystemInit+0x90>)
200000e6:	4a11      	ldr	r2, [pc, #68]	; (2000012c <SystemInit+0x9c>)
200000e8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ea:	461a      	mov	r2, r3
200000ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000ee:	f013 0f02 	tst.w	r3, #2
200000f2:	d0fb      	beq.n	200000ec <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f4:	4b0a      	ldr	r3, [pc, #40]	; (20000120 <SystemInit+0x90>)
200000f6:	2211      	movs	r2, #17
200000f8:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fa:	461a      	mov	r2, r3
200000fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000fe:	f013 0f08 	tst.w	r3, #8
20000102:	d0fb      	beq.n	200000fc <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000104:	4b06      	ldr	r3, [pc, #24]	; (20000120 <SystemInit+0x90>)
20000106:	2212      	movs	r2, #18
20000108:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010a:	461a      	mov	r2, r3
2000010c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000010e:	f013 0f08 	tst.w	r3, #8
20000112:	d0fb      	beq.n	2000010c <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000114:	4b06      	ldr	r3, [pc, #24]	; (20000130 <SystemInit+0xa0>)
20000116:	4a07      	ldr	r2, [pc, #28]	; (20000134 <SystemInit+0xa4>)
20000118:	601a      	str	r2, [r3, #0]
}
2000011a:	4770      	bx	lr
2000011c:	400e0800 	.word	0x400e0800
20000120:	400e0400 	.word	0x400e0400
20000124:	00370809 	.word	0x00370809
20000128:	01370809 	.word	0x01370809
2000012c:	200f3f01 	.word	0x200f3f01
20000130:	20000384 	.word	0x20000384
20000134:	05b8d800 	.word	0x05b8d800

20000138 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000138:	4b16      	ldr	r3, [pc, #88]	; (20000194 <system_init_flash+0x5c>)
2000013a:	4298      	cmp	r0, r3
2000013c:	d206      	bcs.n	2000014c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000013e:	2300      	movs	r3, #0
20000140:	4a15      	ldr	r2, [pc, #84]	; (20000198 <system_init_flash+0x60>)
20000142:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000144:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000148:	6013      	str	r3, [r2, #0]
2000014a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000014c:	4b13      	ldr	r3, [pc, #76]	; (2000019c <system_init_flash+0x64>)
2000014e:	4298      	cmp	r0, r3
20000150:	d207      	bcs.n	20000162 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000152:	f44f 7380 	mov.w	r3, #256	; 0x100
20000156:	4a10      	ldr	r2, [pc, #64]	; (20000198 <system_init_flash+0x60>)
20000158:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000162:	4b0f      	ldr	r3, [pc, #60]	; (200001a0 <system_init_flash+0x68>)
20000164:	4298      	cmp	r0, r3
20000166:	d807      	bhi.n	20000178 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000168:	f44f 7300 	mov.w	r3, #512	; 0x200
2000016c:	4a0a      	ldr	r2, [pc, #40]	; (20000198 <system_init_flash+0x60>)
2000016e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000174:	6013      	str	r3, [r2, #0]
20000176:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000178:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <system_init_flash+0x6c>)
2000017a:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000017c:	bf94      	ite	ls
2000017e:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000182:	f44f 6380 	movhi.w	r3, #1024	; 0x400
20000186:	4a04      	ldr	r2, [pc, #16]	; (20000198 <system_init_flash+0x60>)
20000188:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000018a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000018e:	6013      	str	r3, [r2, #0]
	}
}
20000190:	4770      	bx	lr
20000192:	bf00      	nop
20000194:	016e3600 	.word	0x016e3600
20000198:	400e0800 	.word	0x400e0800
2000019c:	02625a00 	.word	0x02625a00
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff

200001a8 <pin_spi1_cs>:
200001a8:	ffffffff                                ....

200001ac <pin_spi1_miso>:
200001ac:	ffffffff                                ....

200001b0 <pin_spi1_mosi>:
200001b0:	ffffffff                                ....

200001b4 <pin_spi1_sck>:
200001b4:	ffffffff                                ....

200001b8 <XPROG_Param_EEPageSize>:
200001b8:	00000020                                 ...

200001bc <XPROG_Param_NVMBase>:
200001bc:	010001c0                                ....

200001c0 <XPROG_Param_NVMCMDRegAddr>:
200001c0:	                                         3

200001c1 <XPROG_Param_NVMCSRRegAddr>:
200001c1:	                                         2..

200001c4 <defaultTimeoutTicks>:
200001c4:	000001f4                                ....

200001c8 <main_b_vendor_enable>:
200001c8:	                                         ..

200001ca <vccint_setting>:
200001ca:	                                         ..

200001cc <xram>:
200001cc:	60000000                                ...`

200001d0 <udi_api_vendor>:
200001d0:	0008215d 00082181 00082199 00082151     ]!...!...!..Q!..
200001e0:	00000000                                ....

200001e4 <udc_config>:
200001e4:	2000024c 20000204 2000024c 20000260     L.. ... L.. `.. 
200001f4:	200001fc 00000000                       ... ....

200001fc <udc_config_hs>:
200001fc:	2000022c 2000026c                       ,.. l.. 

20000204 <udc_config_lsfs>:
20000204:	2000020c 2000026c                       ... l.. 

2000020c <udc_desc_fs>:
2000020c:	00200209 80000101 000409fa ffff0200     .. .............
2000021c:	050700ff 00400281 02050700 00004002     ......@......@..

2000022c <udc_desc_hs>:
2000022c:	00200209 80000101 000409fa ffff0200     .. .............
2000023c:	050700ff 02000281 02050700 00020002     ................

2000024c <udc_device_desc>:
2000024c:	02000112 40000000 c3052b3e 02010100     .......@>+......
2000025c:	00000103                                ....

20000260 <udc_device_qual>:
20000260:	0200060a 40000000 00000001              .......@....

2000026c <udi_apis>:
2000026c:	200001d0                                ... 

20000270 <udc_string_desc>:
20000270:	00000300 00000000 00000000 00000000     ................
	...

200002b4 <udc_string_desc_languageid>:
200002b4:	04090304                                ....

200002b8 <udc_string_manufacturer_name>:
200002b8:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002c8:	636e4920 0000002e                        Inc....

200002d0 <udc_string_product_name>:
200002d0:	70696843 73696857 65726570 57432072     ChipWhisperer CW
200002e0:	00353033                                305.

200002e4 <winusb_20_desc>:
200002e4:	0000000a 06030000 0014009e 49570003     ..............WI
200002f4:	4253554e 00000000 00000000 00800000     NUSB............
20000304:	00010004 00430028 00690068 00770070     ....(.C.h.i.p.w.
20000314:	00690068 00700073 00720065 00720065     h.i.s.p.e.r.e.r.
20000324:	0069004c 00650074 00550047 004e4449     L.i.t.e.G.U.IDN.
20000334:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
20000344:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
20000354:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
20000364:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
20000374:	00610031 00650064 007d0039               1.a.d.e.9.}...

20000382 <g_interrupt_enabled>:
20000382:	                                         ..

20000384 <SystemCoreClock>:
20000384:	003d0900                                ..=.

20000388 <usb_serial_number>:
20000388:	30303030 30303030 30303030 44414544     000000000000DEAD
20000398:	46454542 00000000 00000000 00000000     BEEF............
200003a8:	00000000                                ....

200003ac <_impure_ptr>:
200003ac:	200003b0                                ... 

200003b0 <impure_data>:
200003b0:	00000000 2000069c 20000704 2000076c     ....... ... l.. 
	...
20000458:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000468:	0005deec 0000000b 00000000 00000000     ................
	...

200007d8 <__atexit_recursive_mutex>:
200007d8:	20001c14                                ... 

200007dc <__global_locale>:
200007dc:	00000043 00000000 00000000 00000000     C...............
	...
200007fc:	00000043 00000000 00000000 00000000     C...............
	...
2000081c:	00000043 00000000 00000000 00000000     C...............
	...
2000083c:	00000043 00000000 00000000 00000000     C...............
	...
2000085c:	00000043 00000000 00000000 00000000     C...............
	...
2000087c:	00000043 00000000 00000000 00000000     C...............
	...
2000089c:	00000043 00000000 00000000 00000000     C...............
	...
200008bc:	0008adb9 00089d81 00000000 0008c1e4     ................
200008cc:	0008c020 0008be40 0008be40 0008be40      ...@...@...@...
200008dc:	0008be40 0008be40 0008be40 0008be40     @...@...@...@...
200008ec:	0008be40 0008be40 ffffffff ffffffff     @...@...........
200008fc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000924:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000948 <__malloc_av_>:
	...
20000950:	20000948 20000948 20000950 20000950     H.. H.. P.. P.. 
20000960:	20000958 20000958 20000960 20000960     X.. X.. `.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 

20000d50 <__malloc_sbrk_base>:
20000d50:	ffffffff                                ....

20000d54 <__malloc_trim_threshold>:
20000d54:	00020000                                ....
